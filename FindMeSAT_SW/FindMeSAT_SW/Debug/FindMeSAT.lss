
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000954c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000496  00802000  0000954c  000095e0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005db  00802496  00802496  00009a76  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009a76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00009ad4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a00  00000000  00000000  00009b18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001af8d  00000000  00000000  0000a518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006a12  00000000  00000000  000254a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ebc1  00000000  00000000  0002beb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a24  00000000  00000000  0003aa78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003f47d  00000000  00000000  0003d49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ac85  00000000  00000000  0007c919  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e0  00000000  00000000  000875a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000e446  00000000  00000000  00087f80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__ctors_end>
       4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
       8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
       c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      10:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      14:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      18:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_6>
      1c:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__vector_7>
      20:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__vector_8>
      24:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__vector_9>
      28:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      2c:	0c 94 06 13 	jmp	0x260c	; 0x260c <__vector_11>
      30:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      34:	0c 94 16 28 	jmp	0x502c	; 0x502c <__vector_13>
      38:	0c 94 6e 20 	jmp	0x40dc	; 0x40dc <__vector_14>
      3c:	0c 94 9b 20 	jmp	0x4136	; 0x4136 <__vector_15>
      40:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__vector_16>
      44:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__vector_17>
      48:	0c 94 22 21 	jmp	0x4244	; 0x4244 <__vector_18>
      4c:	0c 94 4f 21 	jmp	0x429e	; 0x429e <__vector_19>
      50:	0c 94 7c 21 	jmp	0x42f8	; 0x42f8 <__vector_20>
      54:	0c 94 a9 21 	jmp	0x4352	; 0x4352 <__vector_21>
      58:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__vector_22>
      5c:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__vector_23>
      60:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      64:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      68:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      6c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      70:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      74:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      78:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      7c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      80:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      84:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      88:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      8c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      90:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      94:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      98:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      9c:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <__vector_39>
      a0:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <__vector_40>
      a4:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__vector_41>
      a8:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__vector_42>
      ac:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b8:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__vector_46>
      bc:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__vector_47>
      c0:	0c 94 1f 24 	jmp	0x483e	; 0x483e <__vector_48>
      c4:	0c 94 4c 24 	jmp	0x4898	; 0x4898 <__vector_49>
      c8:	0c 94 79 24 	jmp	0x48f2	; 0x48f2 <__vector_50>
      cc:	0c 94 a6 24 	jmp	0x494c	; 0x494c <__vector_51>
      d0:	0c 94 d3 24 	jmp	0x49a6	; 0x49a6 <__vector_52>
      d4:	0c 94 00 25 	jmp	0x4a00	; 0x4a00 <__vector_53>
      d8:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__vector_54>
      dc:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__vector_55>
      e0:	0c 94 87 25 	jmp	0x4b0e	; 0x4b0e <__vector_56>
      e4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      e8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      ec:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      fc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     100:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     104:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     108:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     10c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     110:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     114:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     118:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     11c:	0c 94 cf 1c 	jmp	0x399e	; 0x399e <__vector_71>
     120:	0c 94 01 1d 	jmp	0x3a02	; 0x3a02 <__vector_72>
     124:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__vector_73>
     128:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__vector_74>
     12c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     130:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     134:	0c 94 30 22 	jmp	0x4460	; 0x4460 <__vector_77>
     138:	0c 94 5d 22 	jmp	0x44ba	; 0x44ba <__vector_78>
     13c:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__vector_79>
     140:	0c 94 b7 22 	jmp	0x456e	; 0x456e <__vector_80>
     144:	0c 94 e4 22 	jmp	0x45c8	; 0x45c8 <__vector_81>
     148:	0c 94 11 23 	jmp	0x4622	; 0x4622 <__vector_82>
     14c:	0c 94 3e 23 	jmp	0x467c	; 0x467c <__vector_83>
     150:	0c 94 6b 23 	jmp	0x46d6	; 0x46d6 <__vector_84>
     154:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__vector_85>
     158:	0c 94 c5 23 	jmp	0x478a	; 0x478a <__vector_86>
     15c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     160:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     164:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     168:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     16c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     170:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     174:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     178:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     17c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     180:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     184:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     188:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     18c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     190:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     194:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     198:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     19c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1ac:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1b0:	0c 94 b4 25 	jmp	0x4b68	; 0x4b68 <__vector_108>
     1b4:	0c 94 e1 25 	jmp	0x4bc2	; 0x4bc2 <__vector_109>
     1b8:	0c 94 0e 26 	jmp	0x4c1c	; 0x4c1c <__vector_110>
     1bc:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__vector_111>
     1c0:	0c 94 68 26 	jmp	0x4cd0	; 0x4cd0 <__vector_112>
     1c4:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__vector_113>
     1c8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1cc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1dc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1ec:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1f0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1f4:	0c 94 fa 2e 	jmp	0x5df4	; 0x5df4 <__vector_125>
     1f8:	0c 94 b4 2f 	jmp	0x5f68	; 0x5f68 <__vector_126>
     1fc:	db 29       	or	r29, r11
     1fe:	de 29       	or	r29, r14
     200:	e1 29       	or	r30, r1
     202:	e4 29       	or	r30, r4
     204:	e7 29       	or	r30, r7
     206:	ea 29       	or	r30, r10
     208:	ed 29       	or	r30, r13
     20a:	2c 31       	cpi	r18, 0x1C	; 28
     20c:	3f 31       	cpi	r19, 0x1F	; 31
     20e:	52 31       	cpi	r21, 0x12	; 18
     210:	65 31       	cpi	r22, 0x15	; 21
     212:	78 31       	cpi	r23, 0x18	; 24
     214:	8b 31       	cpi	r24, 0x1B	; 27
     216:	9e 31       	cpi	r25, 0x1E	; 30

00000218 <PM_SINE>:
     218:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     228:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     238:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     248:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     258:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     268:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     278:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     288:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     298:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     2a8:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     2b8:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     2c8:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     2d8:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     2e8:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     2f8:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     308:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     318:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     328:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     338:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     348:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     358:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     368:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     378:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     388:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     398:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     3a8:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     3b8:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     3c8:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     3d8:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     3e8:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     3f8:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     408:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     418:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     428:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     438:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     448:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     458:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
     468:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
     478:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
     488:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
     498:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
     4a8:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
     4b8:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
     4c8:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
     4d8:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
     4e8:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
     4f8:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
     508:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
     518:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
     528:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
     538:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
     548:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
     558:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
     568:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
     578:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
     588:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
     598:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
     5a8:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
     5b8:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
     5c8:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
     5d8:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
     5e8:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
     5f8:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
     608:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
     618:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
     628:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
     638:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
     648:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
     658:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
     668:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
     678:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
     688:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
     698:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
     6a8:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
     6b8:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
     6c8:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
     6d8:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
     6e8:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
     6f8:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
     708:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
     718:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
     728:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
     738:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
     748:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
     758:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
     768:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
     778:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
     788:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
     798:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
     7a8:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
     7b8:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
     7c8:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
     7d8:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
     7e8:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
     7f8:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
     808:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
     818:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
     828:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
     838:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
     848:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
     858:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
     868:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
     878:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
     888:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
     898:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
     8a8:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
     8b8:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
     8c8:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
     8d8:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
     8e8:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
     8f8:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
     908:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
     918:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
     928:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
     938:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
     948:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
     958:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
     968:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
     978:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
     988:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
     998:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
     9a8:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
     9b8:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
     9c8:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
     9d8:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
     9e8:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
     9f8:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
     a08:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
     a18:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
     a28:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
     a38:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
     a48:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
     a58:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
     a68:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
     a78:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
     a88:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
     a98:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
     aa8:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
     ab8:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
     ac8:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
     ad8:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
     ae8:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
     af8:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
     b08:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
     b18:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
     b28:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
     b38:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
     b48:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
     b58:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
     b68:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
     b78:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
     b88:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
     b98:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
     ba8:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
     bb8:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
     bc8:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
     bd8:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
     be8:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
     bf8:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
     c08:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
     c18:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
     c28:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
     c38:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
     c48:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
     c58:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
     c68:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
     c78:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
     c88:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
     c98:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
     ca8:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
     cb8:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
     cc8:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
     cd8:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
     ce8:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
     cf8:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
     d08:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
     d18:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
     d28:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
     d38:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
     d48:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
     d58:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
     d68:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
     d78:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
     d88:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
     d98:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
     da8:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
     db8:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
     dc8:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
     dd8:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
     de8:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
     df8:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
     e08:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
     e18:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
     e28:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
     e38:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
     e48:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
     e58:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
     e68:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
     e78:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
     e88:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
     e98:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
     ea8:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
     eb8:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
     ec8:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
     ed8:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
     ee8:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
     ef8:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
     f08:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
     f18:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
     f28:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
     f38:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
     f48:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
     f58:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
     f68:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
     f78:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
     f88:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
     f98:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
     fa8:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
     fb8:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
     fc8:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
     fd8:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
     fe8:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
     ff8:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1008:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1018:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    1028:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    1038:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    1048:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    1058:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    1068:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    1078:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1088:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1098:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    10a8:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    10b8:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    10c8:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    10d8:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    10e8:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    10f8:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1108:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1118:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    1128:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    1138:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    1148:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    1158:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    1168:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    1178:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1188:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1198:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    11a8:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    11b8:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    11c8:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    11d8:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    11e8:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    11f8:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1208:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1218:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    1228:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    1238:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    1248:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    1258:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    1268:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    1278:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1288:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1298:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    12a8:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    12b8:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    12c8:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    12d8:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    12e8:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    12f8:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1308:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1318:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    1328:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    1338:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    1348:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    1358:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    1368:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    1378:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1388:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1398:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    13a8:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    13b8:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    13c8:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    13d8:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    13e8:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    13f8:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1408:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1418:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1428:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1438:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1448:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1458:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    1468:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    1478:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    1488:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    1498:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    14a8:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    14b8:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    14c8:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    14d8:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    14e8:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    14f8:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    1508:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    1518:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    1528:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    1538:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    1548:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    1558:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    1568:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    1578:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    1588:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    1598:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    15a8:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    15b8:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    15c8:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    15d8:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    15e8:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    15f8:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    1608:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    1618:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    1628:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    1638:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    1648:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    1658:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    1668:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    1678:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    1688:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    1698:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    16a8:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    16b8:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    16c8:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    16d8:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    16e8:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    16f8:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    1708:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    1718:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    1728:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    1738:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    1748:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    1758:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    1768:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    1778:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    1788:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    1798:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    17a8:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    17b8:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    17c8:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    17d8:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    17e8:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    17f8:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    1808:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    1818:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    1828:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    1838:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    1848:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    1858:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    1868:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    1878:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    1888:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    1898:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    18a8:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    18b8:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    18c8:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    18d8:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    18e8:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    18f8:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    1908:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    1918:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    1928:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    1938:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    1948:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    1958:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    1968:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    1978:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    1988:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    1998:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    19a8:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    19b8:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    19c8:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    19d8:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    19e8:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    19f8:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    1a08:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    1a18:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    1a28:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    1a38:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    1a48:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    1a58:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    1a68:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    1a78:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    1a88:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    1a98:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    1aa8:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    1ab8:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    1ac8:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    1ad8:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    1ae8:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    1af8:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    1b08:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    1b18:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    1b28:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    1b38:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    1b48:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    1b58:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    1b68:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    1b78:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    1b88:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    1b98:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    1ba8:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    1bb8:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    1bc8:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    1bd8:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    1be8:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    1bf8:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    1c08:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    1c18:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    1c28:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    1c38:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    1c48:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    1c58:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    1c68:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    1c78:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    1c88:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    1c98:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    1ca8:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    1cb8:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    1cc8:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    1cd8:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    1ce8:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    1cf8:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    1d08:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    1d18:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    1d28:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    1d38:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    1d48:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    1d58:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    1d68:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    1d78:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    1d88:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    1d98:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    1da8:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    1db8:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    1dc8:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    1dd8:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    1de8:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    1df8:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    1e08:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    1e18:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    1e28:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    1e38:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    1e48:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    1e58:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    1e68:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    1e78:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    1e88:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    1e98:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    1ea8:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    1eb8:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    1ec8:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    1ed8:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    1ee8:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    1ef8:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    1f08:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    1f18:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    1f28:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    1f38:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    1f48:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    1f58:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    1f68:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    1f78:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    1f88:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    1f98:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    1fa8:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    1fb8:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    1fc8:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    1fd8:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    1fe8:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    1ff8:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2008:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2018:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    2028:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    2038:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    2048:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    2058:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    2068:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    2078:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2088:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2098:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    20a8:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    20b8:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    20c8:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    20d8:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    20e8:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    20f8:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2108:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2118:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    2128:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    2138:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    2148:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    2158:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    2168:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    2178:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2188:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2198:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    21a8:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    21b8:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    21c8:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    21d8:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    21e8:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    21f8:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2208:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002218 <__ctors_end>:
    2218:	11 24       	eor	r1, r1
    221a:	1f be       	out	0x3f, r1	; 63
    221c:	cf ef       	ldi	r28, 0xFF	; 255
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	df e5       	ldi	r29, 0x5F	; 95
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	0c bf       	out	0x3c, r16	; 60

00002228 <__do_copy_data>:
    2228:	14 e2       	ldi	r17, 0x24	; 36
    222a:	a0 e0       	ldi	r26, 0x00	; 0
    222c:	b0 e2       	ldi	r27, 0x20	; 32
    222e:	ec e4       	ldi	r30, 0x4C	; 76
    2230:	f5 e9       	ldi	r31, 0x95	; 149
    2232:	00 e0       	ldi	r16, 0x00	; 0
    2234:	0b bf       	out	0x3b, r16	; 59
    2236:	02 c0       	rjmp	.+4      	; 0x223c <__do_copy_data+0x14>
    2238:	07 90       	elpm	r0, Z+
    223a:	0d 92       	st	X+, r0
    223c:	a6 39       	cpi	r26, 0x96	; 150
    223e:	b1 07       	cpc	r27, r17
    2240:	d9 f7       	brne	.-10     	; 0x2238 <__do_copy_data+0x10>

00002242 <__do_clear_bss>:
    2242:	2a e2       	ldi	r18, 0x2A	; 42
    2244:	a6 e9       	ldi	r26, 0x96	; 150
    2246:	b4 e2       	ldi	r27, 0x24	; 36
    2248:	01 c0       	rjmp	.+2      	; 0x224c <.do_clear_bss_start>

0000224a <.do_clear_bss_loop>:
    224a:	1d 92       	st	X+, r1

0000224c <.do_clear_bss_start>:
    224c:	a1 37       	cpi	r26, 0x71	; 113
    224e:	b2 07       	cpc	r27, r18
    2250:	e1 f7       	brne	.-8      	; 0x224a <.do_clear_bss_loop>
    2252:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <main>
    2256:	0c 94 a4 4a 	jmp	0x9548	; 0x9548 <_exit>

0000225a <__bad_interrupt>:
    225a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000225e <nvm_init>:
#include "conf_nvm.h"
#include "nvm.h"

status_code_t nvm_init(mem_type_t mem)
{
	switch (mem) {
    225e:	83 30       	cpi	r24, 0x03	; 3
    2260:	10 f4       	brcc	.+4      	; 0x2266 <nvm_init+0x8>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	08 95       	ret
		}
		break;
#endif

	default:
		return ERR_INVALID_ARG;
    2266:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    2268:	08 95       	ret

0000226a <dma_interrupt>:
void dma_disable(void)
{
	DMA.CTRL = 0;
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	48 2f       	mov	r20, r24
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	fa 01       	movw	r30, r20
    2274:	71 96       	adiw	r30, 0x11	; 17
    2276:	e2 95       	swap	r30
    2278:	f2 95       	swap	r31
    227a:	f0 7f       	andi	r31, 0xF0	; 240
    227c:	fe 27       	eor	r31, r30
    227e:	e0 7f       	andi	r30, 0xF0	; 240
    2280:	fe 27       	eor	r31, r30
    2282:	a0 e0       	ldi	r26, 0x00	; 0
    2284:	b1 e0       	ldi	r27, 0x01	; 1
    2286:	14 96       	adiw	r26, 0x04	; 4
    2288:	9c 91       	ld	r25, X
    228a:	14 97       	sbiw	r26, 0x04	; 4
    228c:	13 96       	adiw	r26, 0x03	; 3
    228e:	6c 91       	ld	r22, X
    2290:	da 01       	movw	r26, r20
    2292:	14 96       	adiw	r26, 0x04	; 4
    2294:	21 e0       	ldi	r18, 0x01	; 1
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	e9 01       	movw	r28, r18
    229a:	08 2e       	mov	r0, r24
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <dma_interrupt+0x38>
    229e:	cc 0f       	add	r28, r28
    22a0:	dd 1f       	adc	r29, r29
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <dma_interrupt+0x34>
    22a6:	0a 2e       	mov	r0, r26
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <dma_interrupt+0x44>
    22aa:	22 0f       	add	r18, r18
    22ac:	33 1f       	adc	r19, r19
    22ae:	0a 94       	dec	r0
    22b0:	e2 f7       	brpl	.-8      	; 0x22aa <dma_interrupt+0x40>
    22b2:	2c 2b       	or	r18, r28
    22b4:	62 23       	and	r22, r18
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	eb 01       	movw	r28, r22
    22ba:	0a 2e       	mov	r0, r26
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <dma_interrupt+0x58>
    22be:	d5 95       	asr	r29
    22c0:	c7 95       	ror	r28
    22c2:	0a 94       	dec	r0
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <dma_interrupt+0x54>
    22c6:	c0 fd       	sbrc	r28, 0
    22c8:	1a c0       	rjmp	.+52     	; 0x22fe <dma_interrupt+0x94>
    22ca:	08 2e       	mov	r0, r24
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <dma_interrupt+0x68>
    22ce:	75 95       	asr	r23
    22d0:	67 95       	ror	r22
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <dma_interrupt+0x64>
    22d6:	60 fd       	sbrc	r22, 0
    22d8:	14 c0       	rjmp	.+40     	; 0x2302 <dma_interrupt+0x98>
    22da:	29 23       	and	r18, r25
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	b9 01       	movw	r22, r18
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <dma_interrupt+0x7c>
    22e2:	75 95       	asr	r23
    22e4:	67 95       	ror	r22
    22e6:	aa 95       	dec	r26
    22e8:	e2 f7       	brpl	.-8      	; 0x22e2 <dma_interrupt+0x78>
    22ea:	60 fd       	sbrc	r22, 0
    22ec:	0c c0       	rjmp	.+24     	; 0x2306 <dma_interrupt+0x9c>
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <dma_interrupt+0x8a>
    22f0:	35 95       	asr	r19
    22f2:	27 95       	ror	r18
    22f4:	8a 95       	dec	r24
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <dma_interrupt+0x86>
    22f8:	82 2f       	mov	r24, r18
    22fa:	81 70       	andi	r24, 0x01	; 1
    22fc:	05 c0       	rjmp	.+10     	; 0x2308 <dma_interrupt+0x9e>
    22fe:	84 e0       	ldi	r24, 0x04	; 4
    2300:	03 c0       	rjmp	.+6      	; 0x2308 <dma_interrupt+0x9e>
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <dma_interrupt+0x9e>
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	90 63       	ori	r25, 0x30	; 48
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	44 0f       	add	r20, r20
    2310:	55 1f       	adc	r21, r21
    2312:	fa 01       	movw	r30, r20
    2314:	e3 5c       	subi	r30, 0xC3	; 195
    2316:	f5 4d       	sbci	r31, 0xD5	; 213
    2318:	01 90       	ld	r0, Z+
    231a:	f0 81       	ld	r31, Z
    231c:	e0 2d       	mov	r30, r0
    231e:	30 97       	sbiw	r30, 0x00	; 0
    2320:	09 f0       	breq	.+2      	; 0x2324 <dma_interrupt+0xba>
    2322:	19 95       	eicall
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	08 95       	ret

0000232a <dma_enable>:
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	1f 92       	push	r1
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    233c:	80 91 5c 2a 	lds	r24, 0x2A5C	; 0x802a5c <sleepmgr_locks+0x1>
    2340:	8f 3f       	cpi	r24, 0xFF	; 255
    2342:	09 f4       	brne	.+2      	; 0x2346 <dma_enable+0x1c>
    2344:	ff cf       	rjmp	.-2      	; 0x2344 <dma_enable+0x1a>
    2346:	8f b7       	in	r24, 0x3f	; 63
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	f8 94       	cli
    234c:	99 81       	ldd	r25, Y+1	; 0x01
    234e:	eb e5       	ldi	r30, 0x5B	; 91
    2350:	fa e2       	ldi	r31, 0x2A	; 42
    2352:	81 81       	ldd	r24, Z+1	; 0x01
    2354:	8f 5f       	subi	r24, 0xFF	; 255
    2356:	81 83       	std	Z+1, r24	; 0x01
    2358:	9f bf       	out	0x3f, r25	; 63
    235a:	e0 e0       	ldi	r30, 0x00	; 0
    235c:	f1 e0       	ldi	r31, 0x01	; 1
    235e:	80 e4       	ldi	r24, 0x40	; 64
    2360:	80 83       	st	Z, r24
    2362:	80 e8       	ldi	r24, 0x80	; 128
    2364:	80 83       	st	Z, r24
    2366:	0f 90       	pop	r0
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	08 95       	ret

0000236e <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    236e:	e8 2f       	mov	r30, r24
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	ee 0f       	add	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	e3 5c       	subi	r30, 0xC3	; 195
    2378:	f5 4d       	sbci	r31, 0xD5	; 213
    237a:	60 83       	st	Z, r22
    237c:	71 83       	std	Z+1, r23	; 0x01
    237e:	08 95       	ret

00002380 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	0b b6       	in	r0, 0x3b	; 59
    238c:	0f 92       	push	r0
    238e:	2f 93       	push	r18
    2390:	3f 93       	push	r19
    2392:	4f 93       	push	r20
    2394:	5f 93       	push	r21
    2396:	6f 93       	push	r22
    2398:	7f 93       	push	r23
    239a:	8f 93       	push	r24
    239c:	9f 93       	push	r25
    239e:	af 93       	push	r26
    23a0:	bf 93       	push	r27
    23a2:	ef 93       	push	r30
    23a4:	ff 93       	push	r31
	dma_interrupt(0);
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	60 df       	rcall	.-320    	; 0x226a <dma_interrupt>
}
    23aa:	ff 91       	pop	r31
    23ac:	ef 91       	pop	r30
    23ae:	bf 91       	pop	r27
    23b0:	af 91       	pop	r26
    23b2:	9f 91       	pop	r25
    23b4:	8f 91       	pop	r24
    23b6:	7f 91       	pop	r23
    23b8:	6f 91       	pop	r22
    23ba:	5f 91       	pop	r21
    23bc:	4f 91       	pop	r20
    23be:	3f 91       	pop	r19
    23c0:	2f 91       	pop	r18
    23c2:	0f 90       	pop	r0
    23c4:	0b be       	out	0x3b, r0	; 59
    23c6:	0f 90       	pop	r0
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	0f 90       	pop	r0
    23cc:	1f 90       	pop	r1
    23ce:	18 95       	reti

000023d0 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    23d0:	1f 92       	push	r1
    23d2:	0f 92       	push	r0
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	0f 92       	push	r0
    23d8:	11 24       	eor	r1, r1
    23da:	0b b6       	in	r0, 0x3b	; 59
    23dc:	0f 92       	push	r0
    23de:	2f 93       	push	r18
    23e0:	3f 93       	push	r19
    23e2:	4f 93       	push	r20
    23e4:	5f 93       	push	r21
    23e6:	6f 93       	push	r22
    23e8:	7f 93       	push	r23
    23ea:	8f 93       	push	r24
    23ec:	9f 93       	push	r25
    23ee:	af 93       	push	r26
    23f0:	bf 93       	push	r27
    23f2:	ef 93       	push	r30
    23f4:	ff 93       	push	r31
	dma_interrupt(1);
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	38 df       	rcall	.-400    	; 0x226a <dma_interrupt>
}
    23fa:	ff 91       	pop	r31
    23fc:	ef 91       	pop	r30
    23fe:	bf 91       	pop	r27
    2400:	af 91       	pop	r26
    2402:	9f 91       	pop	r25
    2404:	8f 91       	pop	r24
    2406:	7f 91       	pop	r23
    2408:	6f 91       	pop	r22
    240a:	5f 91       	pop	r21
    240c:	4f 91       	pop	r20
    240e:	3f 91       	pop	r19
    2410:	2f 91       	pop	r18
    2412:	0f 90       	pop	r0
    2414:	0b be       	out	0x3b, r0	; 59
    2416:	0f 90       	pop	r0
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	0f 90       	pop	r0
    241c:	1f 90       	pop	r1
    241e:	18 95       	reti

00002420 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    2420:	1f 92       	push	r1
    2422:	0f 92       	push	r0
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	0f 92       	push	r0
    2428:	11 24       	eor	r1, r1
    242a:	0b b6       	in	r0, 0x3b	; 59
    242c:	0f 92       	push	r0
    242e:	2f 93       	push	r18
    2430:	3f 93       	push	r19
    2432:	4f 93       	push	r20
    2434:	5f 93       	push	r21
    2436:	6f 93       	push	r22
    2438:	7f 93       	push	r23
    243a:	8f 93       	push	r24
    243c:	9f 93       	push	r25
    243e:	af 93       	push	r26
    2440:	bf 93       	push	r27
    2442:	ef 93       	push	r30
    2444:	ff 93       	push	r31
	dma_interrupt(2);
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	10 df       	rcall	.-480    	; 0x226a <dma_interrupt>
}
    244a:	ff 91       	pop	r31
    244c:	ef 91       	pop	r30
    244e:	bf 91       	pop	r27
    2450:	af 91       	pop	r26
    2452:	9f 91       	pop	r25
    2454:	8f 91       	pop	r24
    2456:	7f 91       	pop	r23
    2458:	6f 91       	pop	r22
    245a:	5f 91       	pop	r21
    245c:	4f 91       	pop	r20
    245e:	3f 91       	pop	r19
    2460:	2f 91       	pop	r18
    2462:	0f 90       	pop	r0
    2464:	0b be       	out	0x3b, r0	; 59
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	0f 90       	pop	r0
    246c:	1f 90       	pop	r1
    246e:	18 95       	reti

00002470 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    2470:	1f 92       	push	r1
    2472:	0f 92       	push	r0
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	0f 92       	push	r0
    2478:	11 24       	eor	r1, r1
    247a:	0b b6       	in	r0, 0x3b	; 59
    247c:	0f 92       	push	r0
    247e:	2f 93       	push	r18
    2480:	3f 93       	push	r19
    2482:	4f 93       	push	r20
    2484:	5f 93       	push	r21
    2486:	6f 93       	push	r22
    2488:	7f 93       	push	r23
    248a:	8f 93       	push	r24
    248c:	9f 93       	push	r25
    248e:	af 93       	push	r26
    2490:	bf 93       	push	r27
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
	dma_interrupt(3);
    2496:	83 e0       	ldi	r24, 0x03	; 3
    2498:	e8 de       	rcall	.-560    	; 0x226a <dma_interrupt>
}
    249a:	ff 91       	pop	r31
    249c:	ef 91       	pop	r30
    249e:	bf 91       	pop	r27
    24a0:	af 91       	pop	r26
    24a2:	9f 91       	pop	r25
    24a4:	8f 91       	pop	r24
    24a6:	7f 91       	pop	r23
    24a8:	6f 91       	pop	r22
    24aa:	5f 91       	pop	r21
    24ac:	4f 91       	pop	r20
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0b be       	out	0x3b, r0	; 59
    24b6:	0f 90       	pop	r0
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	0f 90       	pop	r0
    24bc:	1f 90       	pop	r1
    24be:	18 95       	reti

000024c0 <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	1f 92       	push	r1
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    24cc:	e8 2f       	mov	r30, r24
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	71 96       	adiw	r30, 0x11	; 17
    24d2:	e2 95       	swap	r30
    24d4:	f2 95       	swap	r31
    24d6:	f0 7f       	andi	r31, 0xF0	; 240
    24d8:	fe 27       	eor	r31, r30
    24da:	e0 7f       	andi	r30, 0xF0	; 240
    24dc:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    24de:	8f b7       	in	r24, 0x3f	; 63
    24e0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    24e2:	f8 94       	cli
	return flags;
    24e4:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    24e6:	19 96       	adiw	r26, 0x09	; 9
    24e8:	8c 91       	ld	r24, X
    24ea:	19 97       	sbiw	r26, 0x09	; 9
    24ec:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    24ee:	1a 96       	adiw	r26, 0x0a	; 10
    24f0:	8c 91       	ld	r24, X
    24f2:	1a 97       	sbiw	r26, 0x0a	; 10
    24f4:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    24f6:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    24f8:	17 96       	adiw	r26, 0x07	; 7
    24fa:	8c 91       	ld	r24, X
    24fc:	17 97       	sbiw	r26, 0x07	; 7
    24fe:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    2500:	18 96       	adiw	r26, 0x08	; 8
    2502:	8c 91       	ld	r24, X
    2504:	18 97       	sbiw	r26, 0x08	; 8
    2506:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    2508:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    250a:	12 96       	adiw	r26, 0x02	; 2
    250c:	8c 91       	ld	r24, X
    250e:	12 97       	sbiw	r26, 0x02	; 2
    2510:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    2512:	13 96       	adiw	r26, 0x03	; 3
    2514:	8c 91       	ld	r24, X
    2516:	13 97       	sbiw	r26, 0x03	; 3
    2518:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    251a:	14 96       	adiw	r26, 0x04	; 4
    251c:	2d 91       	ld	r18, X+
    251e:	3c 91       	ld	r19, X
    2520:	15 97       	sbiw	r26, 0x05	; 5
    2522:	24 83       	std	Z+4, r18	; 0x04
    2524:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    2526:	16 96       	adiw	r26, 0x06	; 6
    2528:	8c 91       	ld	r24, X
    252a:	16 97       	sbiw	r26, 0x06	; 6
    252c:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	8c 91       	ld	r24, X
    2532:	11 97       	sbiw	r26, 0x01	; 1
    2534:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    2536:	8c 91       	ld	r24, X
    2538:	8f 77       	andi	r24, 0x7F	; 127
    253a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    253c:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    253e:	0f 90       	pop	r0
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    2546:	04 c0       	rjmp	.+8      	; 0x2550 <__portable_avr_delay_cycles+0xa>
    2548:	61 50       	subi	r22, 0x01	; 1
    254a:	71 09       	sbc	r23, r1
    254c:	81 09       	sbc	r24, r1
    254e:	91 09       	sbc	r25, r1
    2550:	61 15       	cp	r22, r1
    2552:	71 05       	cpc	r23, r1
    2554:	81 05       	cpc	r24, r1
    2556:	91 05       	cpc	r25, r1
    2558:	b9 f7       	brne	.-18     	; 0x2548 <__portable_avr_delay_cycles+0x2>
    255a:	08 95       	ret

0000255c <rtc_get_time>:
    255c:	80 e1       	ldi	r24, 0x10	; 16
    255e:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    2562:	e0 e2       	ldi	r30, 0x20	; 32
    2564:	f4 e0       	ldi	r31, 0x04	; 4
    2566:	81 81       	ldd	r24, Z+1	; 0x01
    2568:	84 fd       	sbrc	r24, 4
    256a:	fd cf       	rjmp	.-6      	; 0x2566 <rtc_get_time+0xa>
    256c:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    2570:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    2574:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    2578:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    257c:	08 95       	ret

0000257e <rtc_set_callback>:
    257e:	80 93 45 2a 	sts	0x2A45, r24	; 0x802a45 <rtc_data>
    2582:	90 93 46 2a 	sts	0x2A46, r25	; 0x802a46 <rtc_data+0x1>
    2586:	08 95       	ret

00002588 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    258c:	64 e0       	ldi	r22, 0x04	; 4
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    2594:	c0 ef       	ldi	r28, 0xF0	; 240
    2596:	d0 e0       	ldi	r29, 0x00	; 0
    2598:	88 81       	ld	r24, Y
    259a:	82 60       	ori	r24, 0x02	; 2
    259c:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    259e:	61 e0       	ldi	r22, 0x01	; 1
    25a0:	80 ef       	ldi	r24, 0xF0	; 240
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 de 42 	call	0x85bc	; 0x85bc <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    25a8:	88 81       	ld	r24, Y
    25aa:	84 60       	ori	r24, 0x04	; 4
    25ac:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    25ae:	69 ee       	ldi	r22, 0xE9	; 233
    25b0:	73 e0       	ldi	r23, 0x03	; 3
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	c7 df       	rcall	.-114    	; 0x2546 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    25b8:	88 81       	ld	r24, Y
    25ba:	88 61       	ori	r24, 0x18	; 24
    25bc:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    25be:	e0 ef       	ldi	r30, 0xF0	; 240
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	81 81       	ldd	r24, Z+1	; 0x01
    25c4:	83 ff       	sbrs	r24, 3
    25c6:	fd cf       	rjmp	.-6      	; 0x25c2 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    25c8:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    25cc:	e0 e2       	ldi	r30, 0x20	; 32
    25ce:	f4 e0       	ldi	r31, 0x04	; 4
    25d0:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    25d2:	80 fd       	sbrc	r24, 0
    25d4:	fd cf       	rjmp	.-6      	; 0x25d0 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    25d6:	e0 e2       	ldi	r30, 0x20	; 32
    25d8:	f4 e0       	ldi	r31, 0x04	; 4
    25da:	8f ef       	ldi	r24, 0xFF	; 255
    25dc:	9f ef       	ldi	r25, 0xFF	; 255
    25de:	dc 01       	movw	r26, r24
    25e0:	80 87       	std	Z+8, r24	; 0x08
    25e2:	91 87       	std	Z+9, r25	; 0x09
    25e4:	a2 87       	std	Z+10, r26	; 0x0a
    25e6:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    25e8:	14 82       	std	Z+4, r1	; 0x04
    25ea:	15 82       	std	Z+5, r1	; 0x05
    25ec:	16 82       	std	Z+6, r1	; 0x06
    25ee:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    25f0:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    25f2:	80 fd       	sbrc	r24, 0
    25f4:	fd cf       	rjmp	.-6      	; 0x25f0 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    25f6:	e0 e2       	ldi	r30, 0x20	; 32
    25f8:	f4 e0       	ldi	r31, 0x04	; 4
    25fa:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2600:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    2602:	80 fd       	sbrc	r24, 0
    2604:	fd cf       	rjmp	.-6      	; 0x2600 <rtc_init+0x78>
}
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    260c:	1f 92       	push	r1
    260e:	0f 92       	push	r0
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	0f 92       	push	r0
    2614:	11 24       	eor	r1, r1
    2616:	0b b6       	in	r0, 0x3b	; 59
    2618:	0f 92       	push	r0
    261a:	2f 93       	push	r18
    261c:	3f 93       	push	r19
    261e:	4f 93       	push	r20
    2620:	5f 93       	push	r21
    2622:	6f 93       	push	r22
    2624:	7f 93       	push	r23
    2626:	8f 93       	push	r24
    2628:	9f 93       	push	r25
    262a:	af 93       	push	r26
    262c:	bf 93       	push	r27
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	ef 93       	push	r30
    2634:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    2636:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    263a:	c0 91 45 2a 	lds	r28, 0x2A45	; 0x802a45 <rtc_data>
    263e:	d0 91 46 2a 	lds	r29, 0x2A46	; 0x802a46 <rtc_data+0x1>
    2642:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    2644:	19 f0       	breq	.+6      	; 0x264c <__vector_11+0x40>
    2646:	8a df       	rcall	.-236    	; 0x255c <rtc_get_time>
    2648:	fe 01       	movw	r30, r28
}
    264a:	19 95       	eicall
    264c:	ff 91       	pop	r31
    264e:	ef 91       	pop	r30
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	bf 91       	pop	r27
    2656:	af 91       	pop	r26
    2658:	9f 91       	pop	r25
    265a:	8f 91       	pop	r24
    265c:	7f 91       	pop	r23
    265e:	6f 91       	pop	r22
    2660:	5f 91       	pop	r21
    2662:	4f 91       	pop	r20
    2664:	3f 91       	pop	r19
    2666:	2f 91       	pop	r18
    2668:	0f 90       	pop	r0
    266a:	0b be       	out	0x3b, r0	; 59
    266c:	0f 90       	pop	r0
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	0f 90       	pop	r0
    2672:	1f 90       	pop	r1
    2674:	18 95       	reti

00002676 <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* Interpolate result */
	uint16_t left_x       = phase >> 4;												// left side
	int16_t  left_y       = (int16_t)PGM_READ_WORD(&(PM_SINE[left_x])) - 0x8000;
    2676:	fc 01       	movw	r30, r24
    2678:	f2 95       	swap	r31
    267a:	e2 95       	swap	r30
    267c:	ef 70       	andi	r30, 0x0F	; 15
    267e:	ef 27       	eor	r30, r31
    2680:	ff 70       	andi	r31, 0x0F	; 15
    2682:	ef 27       	eor	r30, r31
    2684:	ee 0f       	add	r30, r30
    2686:	ff 1f       	adc	r31, r31
    2688:	e8 5e       	subi	r30, 0xE8	; 232
    268a:	fd 4f       	sbci	r31, 0xFD	; 253
    268c:	25 91       	lpm	r18, Z+
    268e:	34 91       	lpm	r19, Z
    2690:	30 58       	subi	r19, 0x80	; 128
	uint16_t rght_x       = (phase + 16) >> 4;										// right side
	int16_t  rght_y       = (int16_t)PGM_READ_WORD(&(PM_SINE[rght_x])) - 0x8000;
    2692:	fc 01       	movw	r30, r24
    2694:	70 96       	adiw	r30, 0x10	; 16
    2696:	f2 95       	swap	r31
    2698:	e2 95       	swap	r30
    269a:	ef 70       	andi	r30, 0x0F	; 15
    269c:	ef 27       	eor	r30, r31
    269e:	ff 70       	andi	r31, 0x0F	; 15
    26a0:	ef 27       	eor	r30, r31
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	e8 5e       	subi	r30, 0xE8	; 232
    26a8:	fd 4f       	sbci	r31, 0xFD	; 253
    26aa:	45 91       	lpm	r20, Z+
    26ac:	54 91       	lpm	r21, Z
	int16_t  prob         = phase & 0x0f;											// phase fraction
	int16_t  delta_frac_y = (int16_t) (((rght_y - left_y) * prob) >> 4);			// interpolation
	int16_t  val          = left_y + delta_frac_y;

	return 0x8000U + (uint16_t)val;
    26ae:	50 58       	subi	r21, 0x80	; 128
    26b0:	42 1b       	sub	r20, r18
    26b2:	53 0b       	sbc	r21, r19
    26b4:	8f 70       	andi	r24, 0x0F	; 15
    26b6:	99 27       	eor	r25, r25
    26b8:	48 9f       	mul	r20, r24
    26ba:	b0 01       	movw	r22, r0
    26bc:	49 9f       	mul	r20, r25
    26be:	70 0d       	add	r23, r0
    26c0:	58 9f       	mul	r21, r24
    26c2:	70 0d       	add	r23, r0
    26c4:	11 24       	eor	r1, r1
    26c6:	cb 01       	movw	r24, r22
    26c8:	95 95       	asr	r25
    26ca:	87 95       	ror	r24
    26cc:	95 95       	asr	r25
    26ce:	87 95       	ror	r24
    26d0:	95 95       	asr	r25
    26d2:	87 95       	ror	r24
    26d4:	95 95       	asr	r25
    26d6:	87 95       	ror	r24
    26d8:	82 0f       	add	r24, r18
    26da:	93 1f       	adc	r25, r19
}
    26dc:	90 58       	subi	r25, 0x80	; 128
    26de:	08 95       	ret

000026e0 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    26e0:	04 c0       	rjmp	.+8      	; 0x26ea <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    26e2:	61 50       	subi	r22, 0x01	; 1
    26e4:	71 09       	sbc	r23, r1
    26e6:	81 09       	sbc	r24, r1
    26e8:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    26ea:	61 15       	cp	r22, r1
    26ec:	71 05       	cpc	r23, r1
    26ee:	81 05       	cpc	r24, r1
    26f0:	91 05       	cpc	r25, r1
    26f2:	b9 f7       	brne	.-18     	; 0x26e2 <__portable_avr_delay_cycles+0x2>
    26f4:	08 95       	ret

000026f6 <twi2_waitUntilReady>:
}
#endif


static void twi2_waitUntilReady(void)
{
    26f6:	cf 92       	push	r12
    26f8:	df 92       	push	r13
    26fa:	ef 92       	push	r14
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
	status_code_t status;
	uint8_t isBusy;
	uint8_t isValid;

	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_STATE;
    2704:	eb e0       	ldi	r30, 0x0B	; 11
    2706:	f0 e2       	ldi	r31, 0x20	; 32
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	84 83       	std	Z+4, r24	; 0x04
    2712:	95 83       	std	Z+5, r25	; 0x05

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2714:	8f 01       	movw	r16, r30
    2716:	cc 24       	eor	r12, r12
    2718:	c3 94       	inc	r12
    271a:	d1 2c       	mov	r13, r1
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    271c:	0f 2e       	mov	r0, r31
    271e:	f3 e6       	ldi	r31, 0x63	; 99
    2720:	ef 2e       	mov	r14, r31
    2722:	f8 e2       	ldi	r31, 0x28	; 40
    2724:	ff 2e       	mov	r15, r31
    2726:	f0 2d       	mov	r31, r0
	twi2_packet.addr_length = 1;

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2728:	f8 01       	movw	r30, r16
    272a:	c0 86       	std	Z+8, r12	; 0x08
    272c:	d1 86       	std	Z+9, r13	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	b8 01       	movw	r22, r16
    2732:	80 e8       	ldi	r24, 0x80	; 128
    2734:	94 e0       	ldi	r25, 0x04	; 4
    2736:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    273a:	f7 01       	movw	r30, r14
    273c:	c0 81       	ld	r28, Z
    273e:	9c 2f       	mov	r25, r28
    2740:	90 78       	andi	r25, 0x80	; 128
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
    2742:	81 11       	cpse	r24, r1
    2744:	0d c0       	rjmp	.+26     	; 0x2760 <twi2_waitUntilReady+0x6a>
    2746:	91 f0       	breq	.+36     	; 0x276c <twi2_waitUntilReady+0x76>
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
		} else {
			if (isBusy && isValid) {
    2748:	8c 2f       	mov	r24, r28
    274a:	81 78       	andi	r24, 0x81	; 129
    274c:	81 38       	cpi	r24, 0x81	; 129
    274e:	29 f4       	brne	.+10     	; 0x275a <twi2_waitUntilReady+0x64>
				delay_us(TWI_SMART_LCD_DEVICE_BUSY_DELAY_MIN_US);
    2750:	65 ef       	ldi	r22, 0xF5	; 245
    2752:	71 e0       	ldi	r23, 0x01	; 1
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	c3 df       	rcall	.-122    	; 0x26e0 <__portable_avr_delay_cycles>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
    275a:	c0 fd       	sbrc	r28, 0
    275c:	e5 cf       	rjmp	.-54     	; 0x2728 <twi2_waitUntilReady+0x32>
    275e:	0c c0       	rjmp	.+24     	; 0x2778 <twi2_waitUntilReady+0x82>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2760:	65 e0       	ldi	r22, 0x05	; 5
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	bb df       	rcall	.-138    	; 0x26e0 <__portable_avr_delay_cycles>
    276a:	de cf       	rjmp	.-68     	; 0x2728 <twi2_waitUntilReady+0x32>
    276c:	65 e0       	ldi	r22, 0x05	; 5
    276e:	70 e0       	ldi	r23, 0x00	; 0
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	b5 df       	rcall	.-150    	; 0x26e0 <__portable_avr_delay_cycles>
    2776:	d8 cf       	rjmp	.-80     	; 0x2728 <twi2_waitUntilReady+0x32>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
	//printf("DBG909\r\n");
}
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	df 90       	pop	r13
    2784:	cf 90       	pop	r12
    2786:	08 95       	ret

00002788 <task_twi2_lcd_pos_xy>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_pos_xy(uint8_t x, uint8_t y)
{
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	d8 2f       	mov	r29, r24
	twi2_waitUntilReady();
    278e:	c6 2f       	mov	r28, r22
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2790:	b2 df       	rcall	.-156    	; 0x26f6 <twi2_waitUntilReady>
    2792:	eb e0       	ldi	r30, 0x0B	; 11
    2794:	f0 e2       	ldi	r31, 0x20	; 32
    2796:	80 e2       	ldi	r24, 0x20	; 32
	twi2_m_data[0] = x;
    2798:	81 83       	std	Z+1, r24	; 0x01
    279a:	a3 e6       	ldi	r26, 0x63	; 99
    279c:	b8 e2       	ldi	r27, 0x28	; 40
	twi2_m_data[1] = y;
    279e:	dc 93       	st	X, r29
    27a0:	11 96       	adiw	r26, 0x01	; 1
	twi2_packet.length = 2;
    27a2:	cc 93       	st	X, r28
    27a4:	82 e0       	ldi	r24, 0x02	; 2
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	80 87       	std	Z+8, r24	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    27aa:	91 87       	std	Z+9, r25	; 0x09
    27ac:	40 e0       	ldi	r20, 0x00	; 0
    27ae:	bf 01       	movw	r22, r30
    27b0:	80 e8       	ldi	r24, 0x80	; 128
    27b2:	94 e0       	ldi	r25, 0x04	; 4
    27b4:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    27b8:	65 e0       	ldi	r22, 0x05	; 5
    27ba:	70 e0       	ldi	r23, 0x00	; 0
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
}
    27c0:	8f df       	rcall	.-226    	; 0x26e0 <__portable_avr_delay_cycles>
    27c2:	df 91       	pop	r29
    27c4:	cf 91       	pop	r28
    27c6:	08 95       	ret

000027c8 <isr_twi1_baro>:
static void isr_twi1_gyro(uint32_t now, bool sync)
{
}

static void isr_twi1_baro(uint32_t now, bool sync)
{
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	1f 92       	push	r1
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
	static uint8_t  s_step = 100;
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	/* Restart a new cycle if ready */
	if (sync && (s_step >= 100)) {
    27d2:	44 23       	and	r20, r20
    27d4:	41 f0       	breq	.+16     	; 0x27e6 <isr_twi1_baro+0x1e>
    27d6:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_step.7323>
    27da:	84 36       	cpi	r24, 0x64	; 100
    27dc:	08 f4       	brcc	.+2      	; 0x27e0 <isr_twi1_baro+0x18>
    27de:	bb c0       	rjmp	.+374    	; 0x2956 <isr_twi1_baro+0x18e>
		s_step = 0;
    27e0:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <s_step.7323>
    27e4:	09 c0       	rjmp	.+18     	; 0x27f8 <isr_twi1_baro+0x30>
	}

	switch (s_step) {
    27e6:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_step.7323>
    27ea:	85 31       	cpi	r24, 0x15	; 21
    27ec:	09 f1       	breq	.+66     	; 0x2830 <isr_twi1_baro+0x68>
    27ee:	8b 32       	cpi	r24, 0x2B	; 43
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <isr_twi1_baro+0x2c>
    27f2:	59 c0       	rjmp	.+178    	; 0x28a6 <isr_twi1_baro+0xde>
    27f4:	81 11       	cpse	r24, r1
    27f6:	a9 c0       	rjmp	.+338    	; 0x294a <isr_twi1_baro+0x182>
		case 0:
			/* Request D1 */
			twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    27f8:	ef e1       	ldi	r30, 0x1F	; 31
    27fa:	f0 e2       	ldi	r31, 0x20	; 32
    27fc:	86 e7       	ldi	r24, 0x76	; 118
    27fe:	80 83       	st	Z, r24
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D1_4096;
    2800:	88 e4       	ldi	r24, 0x48	; 72
    2802:	81 83       	std	Z+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	84 83       	std	Z+4, r24	; 0x04
    280a:	95 83       	std	Z+5, r25	; 0x05
			twi1_packet.length = 0;
    280c:	10 86       	std	Z+8, r1	; 0x08
    280e:	11 86       	std	Z+9, r1	; 0x09
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	bf 01       	movw	r22, r30
    2814:	80 ea       	ldi	r24, 0xA0	; 160
    2816:	94 e0       	ldi	r25, 0x04	; 4
    2818:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
			status_code_t sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    281c:	81 11       	cpse	r24, r1
    281e:	04 c0       	rjmp	.+8      	; 0x2828 <isr_twi1_baro+0x60>
				s_step = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7323>
				return;
    2826:	a0 c0       	rjmp	.+320    	; 0x2968 <isr_twi1_baro+0x1a0>
			}

			s_step = 200;										// Failed, stay until new sync triggers
    2828:	88 ec       	ldi	r24, 0xC8	; 200
    282a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7323>
			return;
    282e:	9c c0       	rjmp	.+312    	; 0x2968 <isr_twi1_baro+0x1a0>
		break;

		case 21:
			/* Get data */
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    2830:	ef e1       	ldi	r30, 0x1F	; 31
    2832:	f0 e2       	ldi	r31, 0x20	; 32
    2834:	11 82       	std	Z+1, r1	; 0x01
			twi1_packet.length = 3;
    2836:	83 e0       	ldi	r24, 0x03	; 3
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	80 87       	std	Z+8, r24	; 0x08
    283c:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    283e:	41 e0       	ldi	r20, 0x01	; 1
    2840:	bf 01       	movw	r22, r30
    2842:	80 ea       	ldi	r24, 0xA0	; 160
    2844:	94 e0       	ldi	r25, 0x04	; 4
    2846:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    284a:	81 11       	cpse	r24, r1
    284c:	28 c0       	rjmp	.+80     	; 0x289e <isr_twi1_baro+0xd6>
				s_twi1_baro_d1 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    284e:	eb e6       	ldi	r30, 0x6B	; 107
    2850:	f8 e2       	ldi	r31, 0x28	; 40
    2852:	20 81       	ld	r18, Z
    2854:	81 81       	ldd	r24, Z+1	; 0x01
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	a0 e0       	ldi	r26, 0x00	; 0
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	ba 2f       	mov	r27, r26
    285e:	a9 2f       	mov	r26, r25
    2860:	98 2f       	mov	r25, r24
    2862:	88 27       	eor	r24, r24
    2864:	a2 2b       	or	r26, r18
    2866:	22 81       	ldd	r18, Z+2	; 0x02
    2868:	82 2b       	or	r24, r18
    286a:	80 93 a0 24 	sts	0x24A0, r24	; 0x8024a0 <s_twi1_baro_d1.7324>
    286e:	90 93 a1 24 	sts	0x24A1, r25	; 0x8024a1 <s_twi1_baro_d1.7324+0x1>
    2872:	a0 93 a2 24 	sts	0x24A2, r26	; 0x8024a2 <s_twi1_baro_d1.7324+0x2>
    2876:	b0 93 a3 24 	sts	0x24A3, r27	; 0x8024a3 <s_twi1_baro_d1.7324+0x3>

				/* Request D2 */
				twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D2_4096;
    287a:	ef e1       	ldi	r30, 0x1F	; 31
    287c:	f0 e2       	ldi	r31, 0x20	; 32
    287e:	88 e5       	ldi	r24, 0x58	; 88
    2880:	81 83       	std	Z+1, r24	; 0x01
				twi1_packet.length = 0;
    2882:	10 86       	std	Z+8, r1	; 0x08
    2884:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	bf 01       	movw	r22, r30
    288a:	80 ea       	ldi	r24, 0xA0	; 160
    288c:	94 e0       	ldi	r25, 0x04	; 4
    288e:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
				sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
				if (sc == STATUS_OK) {
    2892:	81 11       	cpse	r24, r1
    2894:	04 c0       	rjmp	.+8      	; 0x289e <isr_twi1_baro+0xd6>
					s_step = 22;
    2896:	86 e1       	ldi	r24, 0x16	; 22
    2898:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7323>
					return;
    289c:	65 c0       	rjmp	.+202    	; 0x2968 <isr_twi1_baro+0x1a0>
				}
			}

			s_step = 211;										// Failed, stay until new sync triggers
    289e:	83 ed       	ldi	r24, 0xD3	; 211
    28a0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7323>
			return;
    28a4:	61 c0       	rjmp	.+194    	; 0x2968 <isr_twi1_baro+0x1a0>
		break;

		case 43:
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    28a6:	ef e1       	ldi	r30, 0x1F	; 31
    28a8:	f0 e2       	ldi	r31, 0x20	; 32
    28aa:	11 82       	std	Z+1, r1	; 0x01
			twi1_packet.length = 3;
    28ac:	83 e0       	ldi	r24, 0x03	; 3
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	80 87       	std	Z+8, r24	; 0x08
    28b2:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    28b4:	41 e0       	ldi	r20, 0x01	; 1
    28b6:	bf 01       	movw	r22, r30
    28b8:	80 ea       	ldi	r24, 0xA0	; 160
    28ba:	94 e0       	ldi	r25, 0x04	; 4
    28bc:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    28c0:	81 11       	cpse	r24, r1
    28c2:	3f c0       	rjmp	.+126    	; 0x2942 <isr_twi1_baro+0x17a>
				s_twi1_baro_d2 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    28c4:	eb e6       	ldi	r30, 0x6B	; 107
    28c6:	f8 e2       	ldi	r31, 0x28	; 40
    28c8:	20 81       	ld	r18, Z
    28ca:	81 81       	ldd	r24, Z+1	; 0x01
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	ba 2f       	mov	r27, r26
    28d4:	a9 2f       	mov	r26, r25
    28d6:	98 2f       	mov	r25, r24
    28d8:	88 27       	eor	r24, r24
    28da:	a2 2b       	or	r26, r18
    28dc:	22 81       	ldd	r18, Z+2	; 0x02
    28de:	82 2b       	or	r24, r18
    28e0:	80 93 9c 24 	sts	0x249C, r24	; 0x80249c <s_twi1_baro_d2.7325>
    28e4:	90 93 9d 24 	sts	0x249D, r25	; 0x80249d <s_twi1_baro_d2.7325+0x1>
    28e8:	a0 93 9e 24 	sts	0x249E, r26	; 0x80249e <s_twi1_baro_d2.7325+0x2>
    28ec:	b0 93 9f 24 	sts	0x249F, r27	; 0x80249f <s_twi1_baro_d2.7325+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    28f0:	8f b7       	in	r24, 0x3f	; 63
    28f2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    28f4:	f8 94       	cli
	return flags;
    28f6:	89 81       	ldd	r24, Y+1	; 0x01

				irqflags_t flags = cpu_irq_save();
				g_twi1_baro_d1 = s_twi1_baro_d1;
    28f8:	40 91 a0 24 	lds	r20, 0x24A0	; 0x8024a0 <s_twi1_baro_d1.7324>
    28fc:	50 91 a1 24 	lds	r21, 0x24A1	; 0x8024a1 <s_twi1_baro_d1.7324+0x1>
    2900:	60 91 a2 24 	lds	r22, 0x24A2	; 0x8024a2 <s_twi1_baro_d1.7324+0x2>
    2904:	70 91 a3 24 	lds	r23, 0x24A3	; 0x8024a3 <s_twi1_baro_d1.7324+0x3>
    2908:	40 93 e8 28 	sts	0x28E8, r20	; 0x8028e8 <g_twi1_baro_d1>
    290c:	50 93 e9 28 	sts	0x28E9, r21	; 0x8028e9 <g_twi1_baro_d1+0x1>
    2910:	60 93 ea 28 	sts	0x28EA, r22	; 0x8028ea <g_twi1_baro_d1+0x2>
    2914:	70 93 eb 28 	sts	0x28EB, r23	; 0x8028eb <g_twi1_baro_d1+0x3>
				g_twi1_baro_d2 = s_twi1_baro_d2;
    2918:	40 91 9c 24 	lds	r20, 0x249C	; 0x80249c <s_twi1_baro_d2.7325>
    291c:	50 91 9d 24 	lds	r21, 0x249D	; 0x80249d <s_twi1_baro_d2.7325+0x1>
    2920:	60 91 9e 24 	lds	r22, 0x249E	; 0x80249e <s_twi1_baro_d2.7325+0x2>
    2924:	70 91 9f 24 	lds	r23, 0x249F	; 0x80249f <s_twi1_baro_d2.7325+0x3>
    2928:	40 93 e4 28 	sts	0x28E4, r20	; 0x8028e4 <g_twi1_baro_d2>
    292c:	50 93 e5 28 	sts	0x28E5, r21	; 0x8028e5 <g_twi1_baro_d2+0x1>
    2930:	60 93 e6 28 	sts	0x28E6, r22	; 0x8028e6 <g_twi1_baro_d2+0x2>
    2934:	70 93 e7 28 	sts	0x28E7, r23	; 0x8028e7 <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2938:	8f bf       	out	0x3f, r24	; 63
				cpu_irq_restore(flags);

				s_step = 123;									// Success, stay until new sync triggers
    293a:	8b e7       	ldi	r24, 0x7B	; 123
    293c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7323>
				return;
    2940:	13 c0       	rjmp	.+38     	; 0x2968 <isr_twi1_baro+0x1a0>
			}

			s_step = 223;										// Failed, stay until new sync triggers
    2942:	8f ed       	ldi	r24, 0xDF	; 223
    2944:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7323>
			return;
    2948:	0f c0       	rjmp	.+30     	; 0x2968 <isr_twi1_baro+0x1a0>
		break;

		default:
			/* Delay step of 0.5 ms */
			if (s_step < 100) {
    294a:	84 36       	cpi	r24, 0x64	; 100
    294c:	68 f4       	brcc	.+26     	; 0x2968 <isr_twi1_baro+0x1a0>
				s_step++;
    294e:	8f 5f       	subi	r24, 0xFF	; 255
    2950:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7323>
    2954:	09 c0       	rjmp	.+18     	; 0x2968 <isr_twi1_baro+0x1a0>
	/* Restart a new cycle if ready */
	if (sync && (s_step >= 100)) {
		s_step = 0;
	}

	switch (s_step) {
    2956:	85 31       	cpi	r24, 0x15	; 21
    2958:	09 f4       	brne	.+2      	; 0x295c <isr_twi1_baro+0x194>
    295a:	6a cf       	rjmp	.-300    	; 0x2830 <isr_twi1_baro+0x68>
    295c:	8b 32       	cpi	r24, 0x2B	; 43
    295e:	09 f4       	brne	.+2      	; 0x2962 <isr_twi1_baro+0x19a>
    2960:	a2 cf       	rjmp	.-188    	; 0x28a6 <isr_twi1_baro+0xde>
    2962:	81 11       	cpse	r24, r1
    2964:	f4 cf       	rjmp	.-24     	; 0x294e <isr_twi1_baro+0x186>
    2966:	48 cf       	rjmp	.-368    	; 0x27f8 <isr_twi1_baro+0x30>
			/* Delay step of 0.5 ms */
			if (s_step < 100) {
				s_step++;
			}
	}
}
    2968:	0f 90       	pop	r0
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	08 95       	ret

00002970 <task_twi2_lcd_str>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_str(uint8_t x, uint8_t y, const char* str)
{
    2970:	9f 92       	push	r9
    2972:	af 92       	push	r10
    2974:	bf 92       	push	r11
    2976:	cf 92       	push	r12
    2978:	df 92       	push	r13
    297a:	ef 92       	push	r14
    297c:	ff 92       	push	r15
    297e:	0f 93       	push	r16
    2980:	1f 93       	push	r17
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	b8 2e       	mov	r11, r24
    2988:	a6 2e       	mov	r10, r22
    298a:	ea 01       	movw	r28, r20
	uint8_t slen = strlen(str);
    298c:	fa 01       	movw	r30, r20
    298e:	01 90       	ld	r0, Z+
    2990:	00 20       	and	r0, r0
    2992:	e9 f7       	brne	.-6      	; 0x298e <task_twi2_lcd_str+0x1e>
    2994:	31 97       	sbiw	r30, 0x01	; 1
    2996:	ce 2e       	mov	r12, r30
    2998:	c4 1a       	sub	r12, r20
	if (!slen) {
    299a:	09 f4       	brne	.+2      	; 0x299e <task_twi2_lcd_str+0x2e>
    299c:	43 c0       	rjmp	.+134    	; 0x2a24 <task_twi2_lcd_str+0xb4>
		/* Chunk of the string */
		{
			task_twi2_lcd_pos_xy(x, y);

			twi2_waitUntilReady();
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    299e:	0b e0       	ldi	r16, 0x0B	; 11
    29a0:	10 e2       	ldi	r17, 0x20	; 32
    29a2:	0f 2e       	mov	r0, r31
    29a4:	f0 e3       	ldi	r31, 0x30	; 48
    29a6:	9f 2e       	mov	r9, r31
    29a8:	f0 2d       	mov	r31, r0
			twi2_m_data[0] = this_len;
    29aa:	0f 2e       	mov	r0, r31
    29ac:	f3 e6       	ldi	r31, 0x63	; 99
    29ae:	ef 2e       	mov	r14, r31
    29b0:	f8 e2       	ldi	r31, 0x28	; 40
    29b2:	ff 2e       	mov	r15, r31
    29b4:	f0 2d       	mov	r31, r0
    29b6:	dc 2c       	mov	r13, r12
    29b8:	e6 e0       	ldi	r30, 0x06	; 6
    29ba:	ec 15       	cp	r30, r12
    29bc:	20 f4       	brcc	.+8      	; 0x29c6 <task_twi2_lcd_str+0x56>
    29be:	0f 2e       	mov	r0, r31
    29c0:	f6 e0       	ldi	r31, 0x06	; 6
    29c2:	df 2e       	mov	r13, r31
    29c4:	f0 2d       	mov	r31, r0
			this_len = TWI2_STR_MAXLEN;
		}

		/* Chunk of the string */
		{
			task_twi2_lcd_pos_xy(x, y);
    29c6:	6a 2d       	mov	r22, r10
    29c8:	8b 2d       	mov	r24, r11

			twi2_waitUntilReady();
    29ca:	de de       	rcall	.-580    	; 0x2788 <task_twi2_lcd_pos_xy>
    29cc:	94 de       	rcall	.-728    	; 0x26f6 <twi2_waitUntilReady>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    29ce:	f8 01       	movw	r30, r16
    29d0:	91 82       	std	Z+1, r9	; 0x01
			twi2_m_data[0] = this_len;
    29d2:	f7 01       	movw	r30, r14
    29d4:	d0 82       	st	Z, r13
			for (uint8_t idx = 1; idx <= this_len; ++idx) {
    29d6:	dd 20       	and	r13, r13
    29d8:	69 f0       	breq	.+26     	; 0x29f4 <task_twi2_lcd_str+0x84>
    29da:	81 e0       	ldi	r24, 0x01	; 1
				twi2_m_data[idx] = *(str++);
    29dc:	21 96       	adiw	r28, 0x01	; 1
    29de:	e8 2f       	mov	r30, r24
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	ed 59       	subi	r30, 0x9D	; 157
    29e4:	f7 4d       	sbci	r31, 0xD7	; 215
    29e6:	de 01       	movw	r26, r28
    29e8:	11 97       	sbiw	r26, 0x01	; 1
    29ea:	9c 91       	ld	r25, X
    29ec:	90 83       	st	Z, r25
			task_twi2_lcd_pos_xy(x, y);

			twi2_waitUntilReady();
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
			twi2_m_data[0] = this_len;
			for (uint8_t idx = 1; idx <= this_len; ++idx) {
    29ee:	8f 5f       	subi	r24, 0xFF	; 255
    29f0:	d8 16       	cp	r13, r24
    29f2:	a0 f7       	brcc	.-24     	; 0x29dc <task_twi2_lcd_str+0x6c>
				twi2_m_data[idx] = *(str++);
			}
			twi2_packet.length = this_len + 1;
    29f4:	8d 2d       	mov	r24, r13
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	01 96       	adiw	r24, 0x01	; 1
    29fa:	f8 01       	movw	r30, r16
    29fc:	80 87       	std	Z+8, r24	; 0x08
    29fe:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	b8 01       	movw	r22, r16
    2a04:	80 e8       	ldi	r24, 0x80	; 128
    2a06:	94 e0       	ldi	r25, 0x04	; 4
    2a08:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2a0c:	65 e0       	ldi	r22, 0x05	; 5
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	65 de       	rcall	.-822    	; 0x26e0 <__portable_avr_delay_cycles>
		}

		x    += this_len * 6;
    2a16:	8d 2d       	mov	r24, r13
    2a18:	88 0f       	add	r24, r24
    2a1a:	8d 0d       	add	r24, r13
    2a1c:	88 0f       	add	r24, r24
    2a1e:	b8 0e       	add	r11, r24
		slen -= this_len;
    2a20:	cd 18       	sub	r12, r13
	uint8_t slen = strlen(str);
	if (!slen) {
		return;
	}

	while (slen) {
    2a22:	49 f6       	brne	.-110    	; 0x29b6 <task_twi2_lcd_str+0x46>
		}

		x    += this_len * 6;
		slen -= this_len;
	}
}
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	1f 91       	pop	r17
    2a2a:	0f 91       	pop	r16
    2a2c:	ff 90       	pop	r15
    2a2e:	ef 90       	pop	r14
    2a30:	df 90       	pop	r13
    2a32:	cf 90       	pop	r12
    2a34:	bf 90       	pop	r11
    2a36:	af 90       	pop	r10
    2a38:	9f 90       	pop	r9
    2a3a:	08 95       	ret

00002a3c <task_twi2_lcd_print_format_uint16>:
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
	task_twi2_lcd_str(6 * 18, (line++) * 10, "hPa");
}

static void task_twi2_lcd_print_format_uint16(uint8_t x, uint8_t y, int16_t adc_i, int16_t adc_f, const char* fmt)
{
    2a3c:	cf 92       	push	r12
    2a3e:	df 92       	push	r13
    2a40:	ef 92       	push	r14
    2a42:	ff 92       	push	r15
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	f4 2e       	mov	r15, r20
    2a4e:	e5 2e       	mov	r14, r21
    2a50:	d2 2e       	mov	r13, r18
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    2a52:	c3 2e       	mov	r12, r19
    2a54:	99 de       	rcall	.-718    	; 0x2788 <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    2a56:	4f de       	rcall	.-866    	; 0x26f6 <twi2_waitUntilReady>
    2a58:	cb e0       	ldi	r28, 0x0B	; 11
    2a5a:	d0 e2       	ldi	r29, 0x20	; 32
    2a5c:	80 e3       	ldi	r24, 0x30	; 48
	twi2_m_data[0] = sprintf((char*)&(twi2_m_data[1]), fmt, adc_i, adc_f);
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	cf 92       	push	r12
    2a62:	df 92       	push	r13
    2a64:	ef 92       	push	r14
    2a66:	ff 92       	push	r15
    2a68:	1f 93       	push	r17
    2a6a:	0f 93       	push	r16
    2a6c:	84 e6       	ldi	r24, 0x64	; 100
    2a6e:	98 e2       	ldi	r25, 0x28	; 40
    2a70:	9f 93       	push	r25
    2a72:	8f 93       	push	r24
    2a74:	0e 94 93 46 	call	0x8d26	; 0x8d26 <sprintf>
    2a78:	80 93 63 28 	sts	0x2863, r24	; 0x802863 <twi2_m_data>
	twi2_packet.length = twi2_m_data[0] + 1;
    2a7c:	99 27       	eor	r25, r25
    2a7e:	01 96       	adiw	r24, 0x01	; 1
    2a80:	88 87       	std	Y+8, r24	; 0x08
    2a82:	99 87       	std	Y+9, r25	; 0x09
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	be 01       	movw	r22, r28
    2a88:	80 e8       	ldi	r24, 0x80	; 128
    2a8a:	94 e0       	ldi	r25, 0x04	; 4
    2a8c:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2a90:	65 e0       	ldi	r22, 0x05	; 5
    2a92:	70 e0       	ldi	r23, 0x00	; 0
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	90 e0       	ldi	r25, 0x00	; 0
}
    2a98:	23 de       	rcall	.-954    	; 0x26e0 <__portable_avr_delay_cycles>
    2a9a:	8d b7       	in	r24, 0x3d	; 61
    2a9c:	9e b7       	in	r25, 0x3e	; 62
    2a9e:	08 96       	adiw	r24, 0x08	; 8
    2aa0:	8d bf       	out	0x3d, r24	; 61
    2aa2:	9e bf       	out	0x3e, r25	; 62
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	ff 90       	pop	r15
    2aae:	ef 90       	pop	r14
    2ab0:	df 90       	pop	r13
    2ab2:	cf 90       	pop	r12
    2ab4:	08 95       	ret

00002ab6 <task_twi2_lcd_print_format_uint32>:

static void task_twi2_lcd_print_format_uint32(uint8_t x, uint8_t y, int32_t adc_i, int32_t adc_f, const char* fmt)
{
    2ab6:	8f 92       	push	r8
    2ab8:	9f 92       	push	r9
    2aba:	af 92       	push	r10
    2abc:	bf 92       	push	r11
    2abe:	cf 92       	push	r12
    2ac0:	df 92       	push	r13
    2ac2:	ef 92       	push	r14
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	b2 2e       	mov	r11, r18
    2ad0:	a3 2e       	mov	r10, r19
    2ad2:	94 2e       	mov	r9, r20
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    2ad4:	85 2e       	mov	r8, r21
    2ad6:	58 de       	rcall	.-848    	; 0x2788 <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    2ad8:	0e de       	rcall	.-996    	; 0x26f6 <twi2_waitUntilReady>
    2ada:	cb e0       	ldi	r28, 0x0B	; 11
    2adc:	d0 e2       	ldi	r29, 0x20	; 32
    2ade:	80 e3       	ldi	r24, 0x30	; 48
	twi2_m_data[0] = sprintf((char*)&(twi2_m_data[1]), fmt, adc_i, adc_f);
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	1f 93       	push	r17
    2ae4:	0f 93       	push	r16
    2ae6:	ff 92       	push	r15
    2ae8:	ef 92       	push	r14
    2aea:	8f 92       	push	r8
    2aec:	9f 92       	push	r9
    2aee:	af 92       	push	r10
    2af0:	bf 92       	push	r11
    2af2:	df 92       	push	r13
    2af4:	cf 92       	push	r12
    2af6:	84 e6       	ldi	r24, 0x64	; 100
    2af8:	98 e2       	ldi	r25, 0x28	; 40
    2afa:	9f 93       	push	r25
    2afc:	8f 93       	push	r24
    2afe:	0e 94 93 46 	call	0x8d26	; 0x8d26 <sprintf>
    2b02:	80 93 63 28 	sts	0x2863, r24	; 0x802863 <twi2_m_data>
	twi2_packet.length = twi2_m_data[0] + 1;
    2b06:	99 27       	eor	r25, r25
    2b08:	01 96       	adiw	r24, 0x01	; 1
    2b0a:	88 87       	std	Y+8, r24	; 0x08
    2b0c:	99 87       	std	Y+9, r25	; 0x09
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	be 01       	movw	r22, r28
    2b12:	80 e8       	ldi	r24, 0x80	; 128
    2b14:	94 e0       	ldi	r25, 0x04	; 4
    2b16:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2b1a:	65 e0       	ldi	r22, 0x05	; 5
    2b1c:	70 e0       	ldi	r23, 0x00	; 0
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	90 e0       	ldi	r25, 0x00	; 0
}
    2b22:	de dd       	rcall	.-1092   	; 0x26e0 <__portable_avr_delay_cycles>
    2b24:	8d b7       	in	r24, 0x3d	; 61
    2b26:	9e b7       	in	r25, 0x3e	; 62
    2b28:	0c 96       	adiw	r24, 0x0c	; 12
    2b2a:	8d bf       	out	0x3d, r24	; 61
    2b2c:	9e bf       	out	0x3e, r25	; 62
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	df 90       	pop	r13
    2b3c:	cf 90       	pop	r12
    2b3e:	bf 90       	pop	r11
    2b40:	af 90       	pop	r10
    2b42:	9f 90       	pop	r9
    2b44:	8f 90       	pop	r8
    2b46:	08 95       	ret

00002b48 <twi_init>:
}


void twi_init(void) {
	#ifdef TWI1_MASTER
	TWI1_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA1
    2b48:	e0 e8       	ldi	r30, 0x80	; 128
    2b4a:	f6 e0       	ldi	r31, 0x06	; 6
    2b4c:	88 e3       	ldi	r24, 0x38	; 56
    2b4e:	80 8b       	std	Z+16, r24	; 0x10
	TWI1_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL1
    2b50:	81 8b       	std	Z+17, r24	; 0x11
	#endif

	#ifdef TWI2_MASTER
	TWI2_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA2
    2b52:	e0 e4       	ldi	r30, 0x40	; 64
    2b54:	f6 e0       	ldi	r31, 0x06	; 6
    2b56:	80 8b       	std	Z+16, r24	; 0x10
	TWI2_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL2
    2b58:	81 8b       	std	Z+17, r24	; 0x11
    2b5a:	08 95       	ret

00002b5c <twi_start>:
	#endif
}

void twi_start(void) {
    2b5c:	8f 92       	push	r8
    2b5e:	9f 92       	push	r9
    2b60:	af 92       	push	r10
    2b62:	bf 92       	push	r11
    2b64:	cf 92       	push	r12
    2b66:	df 92       	push	r13
    2b68:	ef 92       	push	r14
    2b6a:	ff 92       	push	r15
    2b6c:	0f 93       	push	r16
    2b6e:	1f 93       	push	r17
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2b74:	60 e4       	ldi	r22, 0x40	; 64
    2b76:	85 e0       	ldi	r24, 0x05	; 5
    2b78:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
	#else
	#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
    2b7c:	6a e2       	ldi	r22, 0x2A	; 42
    2b7e:	70 e2       	ldi	r23, 0x20	; 32
    2b80:	80 ea       	ldi	r24, 0xA0	; 160
    2b82:	94 e0       	ldi	r25, 0x04	; 4
    2b84:	0e 94 64 28 	call	0x50c8	; 0x50c8 <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    2b88:	e0 ea       	ldi	r30, 0xA0	; 160
    2b8a:	f4 e0       	ldi	r31, 0x04	; 4
    2b8c:	81 81       	ldd	r24, Z+1	; 0x01
    2b8e:	88 60       	ori	r24, 0x08	; 8
    2b90:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2b92:	60 e4       	ldi	r22, 0x40	; 64
    2b94:	83 e0       	ldi	r24, 0x03	; 3
    2b96:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
	#else
	#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
    2b9a:	66 e1       	ldi	r22, 0x16	; 22
    2b9c:	70 e2       	ldi	r23, 0x20	; 32
    2b9e:	80 e8       	ldi	r24, 0x80	; 128
    2ba0:	94 e0       	ldi	r25, 0x04	; 4
    2ba2:	0e 94 64 28 	call	0x50c8	; 0x50c8 <twi_master_init>
    2ba6:	e0 e8       	ldi	r30, 0x80	; 128
    2ba8:	f4 e0       	ldi	r31, 0x04	; 4
    2baa:	81 81       	ldd	r24, Z+1	; 0x01
    2bac:	88 60       	ori	r24, 0x08	; 8
    2bae:	81 83       	std	Z+1, r24	; 0x01

static void init_twi1_hygro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Hygro SHT31-DIS - I2C address: 0x%02X\r\n", TWI1_SLAVE_HYGRO_ADDR);
    2bb0:	1f 92       	push	r1
    2bb2:	c4 e4       	ldi	r28, 0x44	; 68
    2bb4:	cf 93       	push	r28
    2bb6:	86 ef       	ldi	r24, 0xF6	; 246
    2bb8:	90 e2       	ldi	r25, 0x20	; 32
    2bba:	9f 93       	push	r25
    2bbc:	8f 93       	push	r24
    2bbe:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <printf>
	g_twi1_hygro_status = 0;
    2bc2:	10 92 da 28 	sts	0x28DA, r1	; 0x8028da <g_twi1_hygro_status>
	//
	twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    2bc6:	ef e1       	ldi	r30, 0x1F	; 31
    2bc8:	f0 e2       	ldi	r31, 0x20	; 32
    2bca:	c0 83       	st	Z, r28
	twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_RESET_HI;
    2bcc:	80 e3       	ldi	r24, 0x30	; 48
    2bce:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_RESET_LO;
    2bd0:	82 ea       	ldi	r24, 0xA2	; 162
    2bd2:	82 83       	std	Z+2, r24	; 0x02
	twi1_packet.addr_length = 2;
    2bd4:	82 e0       	ldi	r24, 0x02	; 2
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	84 83       	std	Z+4, r24	; 0x04
    2bda:	95 83       	std	Z+5, r25	; 0x05
	twi1_packet.length = 0;
    2bdc:	10 86       	std	Z+8, r1	; 0x08
    2bde:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	bf 01       	movw	r22, r30
    2be4:	80 ea       	ldi	r24, 0xA0	; 160
    2be6:	94 e0       	ldi	r25, 0x04	; 4
    2be8:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
	sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	81 11       	cpse	r24, r1
    2bf6:	2b c0       	rjmp	.+86     	; 0x2c4e <twi_start+0xf2>
		delay_ms(1);
    2bf8:	68 e8       	ldi	r22, 0x88	; 136
    2bfa:	73 e1       	ldi	r23, 0x13	; 19
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	6f dd       	rcall	.-1314   	; 0x26e0 <__portable_avr_delay_cycles>
		//
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_STATUS_HI;
    2c02:	ef e1       	ldi	r30, 0x1F	; 31
    2c04:	f0 e2       	ldi	r31, 0x20	; 32
    2c06:	83 ef       	ldi	r24, 0xF3	; 243
    2c08:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_STATUS_LO;
    2c0a:	8d e2       	ldi	r24, 0x2D	; 45
    2c0c:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.length = 2;
    2c0e:	82 e0       	ldi	r24, 0x02	; 2
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	80 87       	std	Z+8, r24	; 0x08
    2c14:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2c16:	41 e0       	ldi	r20, 0x01	; 1
    2c18:	bf 01       	movw	r22, r30
    2c1a:	80 ea       	ldi	r24, 0xA0	; 160
    2c1c:	94 e0       	ldi	r25, 0x04	; 4
    2c1e:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc == STATUS_OK) {
    2c22:	81 11       	cpse	r24, r1
    2c24:	18 c0       	rjmp	.+48     	; 0x2c56 <twi_start+0xfa>
			g_twi1_hygro_status = (twi1_m_data[0] << 8) | twi1_m_data[1];
    2c26:	80 91 6c 28 	lds	r24, 0x286C	; 0x80286c <twi1_m_data+0x1>
    2c2a:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <g_twi1_hygro_status>
			g_twi1_hygro_valid = true;
    2c2e:	91 e0       	ldi	r25, 0x01	; 1
    2c30:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <g_twi1_hygro_valid>
			printf("TWI-onboard: Hygro SHT31-DIS -   status: 0x%02X\r\n", g_twi1_hygro_status);
    2c34:	1f 92       	push	r1
    2c36:	8f 93       	push	r24
    2c38:	8d e2       	ldi	r24, 0x2D	; 45
    2c3a:	91 e2       	ldi	r25, 0x21	; 33
    2c3c:	9f 93       	push	r25
    2c3e:	8f 93       	push	r24
    2c40:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <printf>
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	04 c0       	rjmp	.+8      	; 0x2c56 <twi_start+0xfa>
		}
	} else {
		printf("TWI-onboard:  ... device not on board.\r\n");
    2c4e:	8f e5       	ldi	r24, 0x5F	; 95
    2c50:	91 e2       	ldi	r25, 0x21	; 33
    2c52:	0e 94 63 46 	call	0x8cc6	; 0x8cc6 <puts>

static void init_twi1_gyro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Gyro MPU-9250 - I2C address: 0x%02X, 0x%02X\r\n", TWI1_SLAVE_GYRO_ADDR_1, TWI1_SLAVE_GYRO_ADDR_2);
    2c56:	1f 92       	push	r1
    2c58:	8c e0       	ldi	r24, 0x0C	; 12
    2c5a:	8f 93       	push	r24
    2c5c:	1f 92       	push	r1
    2c5e:	c8 e6       	ldi	r28, 0x68	; 104
    2c60:	cf 93       	push	r28
    2c62:	87 e8       	ldi	r24, 0x87	; 135
    2c64:	91 e2       	ldi	r25, 0x21	; 33
    2c66:	9f 93       	push	r25
    2c68:	8f 93       	push	r24
    2c6a:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <printf>
	g_twi1_gyro_1_version = 0;
    2c6e:	10 92 00 29 	sts	0x2900, r1	; 0x802900 <g_twi1_gyro_1_version>
	g_twi1_gyro_2_version = 0;
    2c72:	10 92 ff 28 	sts	0x28FF, r1	; 0x8028ff <g_twi1_gyro_2_version>
	//
	twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    2c76:	ef e1       	ldi	r30, 0x1F	; 31
    2c78:	f0 e2       	ldi	r31, 0x20	; 32
    2c7a:	c0 83       	st	Z, r28
	twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_RESET;
    2c7c:	8b e6       	ldi	r24, 0x6B	; 107
    2c7e:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr_length = 1;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	84 83       	std	Z+4, r24	; 0x04
    2c86:	95 83       	std	Z+5, r25	; 0x05
	twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_RESET;
    2c88:	21 e8       	ldi	r18, 0x81	; 129
    2c8a:	20 93 6b 28 	sts	0x286B, r18	; 0x80286b <twi1_m_data>
	twi1_packet.length = 1;
    2c8e:	80 87       	std	Z+8, r24	; 0x08
    2c90:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	bf 01       	movw	r22, r30
    2c96:	80 ea       	ldi	r24, 0xA0	; 160
    2c98:	94 e0       	ldi	r25, 0x04	; 4
    2c9a:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
	sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
	//
	if (sc == STATUS_OK) {
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	81 11       	cpse	r24, r1
    2cac:	5b c0       	rjmp	.+182    	; 0x2d64 <twi_start+0x208>
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    2cae:	ef e1       	ldi	r30, 0x1F	; 31
    2cb0:	f0 e2       	ldi	r31, 0x20	; 32
    2cb2:	8c e0       	ldi	r24, 0x0C	; 12
    2cb4:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_RESET;
    2cb6:	8a e0       	ldi	r24, 0x0A	; 10
    2cb8:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	84 83       	std	Z+4, r24	; 0x04
    2cc0:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_RESET;
    2cc2:	2f e1       	ldi	r18, 0x1F	; 31
    2cc4:	20 93 6b 28 	sts	0x286B, r18	; 0x80286b <twi1_m_data>
		twi1_packet.length = 1;
    2cc8:	80 87       	std	Z+8, r24	; 0x08
    2cca:	91 87       	std	Z+9, r25	; 0x09
    2ccc:	40 e0       	ldi	r20, 0x00	; 0
    2cce:	bf 01       	movw	r22, r30
    2cd0:	80 ea       	ldi	r24, 0xA0	; 160
    2cd2:	94 e0       	ldi	r25, 0x04	; 4
    2cd4:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc == STATUS_OK) {
    2cd8:	81 11       	cpse	r24, r1
    2cda:	48 c0       	rjmp	.+144    	; 0x2d6c <twi_start+0x210>
			delay_ms(10);
    2cdc:	61 e5       	ldi	r22, 0x51	; 81
    2cde:	73 ec       	ldi	r23, 0xC3	; 195
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	fd dc       	rcall	.-1542   	; 0x26e0 <__portable_avr_delay_cycles>
			//
			twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    2ce6:	ef e1       	ldi	r30, 0x1F	; 31
    2ce8:	f0 e2       	ldi	r31, 0x20	; 32
    2cea:	88 e6       	ldi	r24, 0x68	; 104
    2cec:	80 83       	st	Z, r24
			twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_WHOAMI;
    2cee:	85 e7       	ldi	r24, 0x75	; 117
    2cf0:	81 83       	std	Z+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	84 83       	std	Z+4, r24	; 0x04
    2cf8:	95 83       	std	Z+5, r25	; 0x05
			twi1_packet.length = 1;
    2cfa:	80 87       	std	Z+8, r24	; 0x08
    2cfc:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2cfe:	41 e0       	ldi	r20, 0x01	; 1
    2d00:	bf 01       	movw	r22, r30
    2d02:	80 ea       	ldi	r24, 0xA0	; 160
    2d04:	94 e0       	ldi	r25, 0x04	; 4
    2d06:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2d0a:	81 11       	cpse	r24, r1
    2d0c:	2f c0       	rjmp	.+94     	; 0x2d6c <twi_start+0x210>
				g_twi1_gyro_1_version = twi1_m_data[0];
    2d0e:	80 91 6b 28 	lds	r24, 0x286B	; 0x80286b <twi1_m_data>
    2d12:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <g_twi1_gyro_1_version>
				//
				twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    2d16:	ef e1       	ldi	r30, 0x1F	; 31
    2d18:	f0 e2       	ldi	r31, 0x20	; 32
    2d1a:	8c e0       	ldi	r24, 0x0C	; 12
    2d1c:	80 83       	st	Z, r24
				twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_DEVICE_ID;
    2d1e:	11 82       	std	Z+1, r1	; 0x01
    2d20:	41 e0       	ldi	r20, 0x01	; 1
    2d22:	bf 01       	movw	r22, r30
    2d24:	80 ea       	ldi	r24, 0xA0	; 160
    2d26:	94 e0       	ldi	r25, 0x04	; 4
    2d28:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
				sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
				if (sc == STATUS_OK) {
    2d2c:	81 11       	cpse	r24, r1
    2d2e:	1e c0       	rjmp	.+60     	; 0x2d6c <twi_start+0x210>
					g_twi1_gyro_2_version = twi1_m_data[0];
    2d30:	80 91 6b 28 	lds	r24, 0x286B	; 0x80286b <twi1_m_data>
    2d34:	80 93 ff 28 	sts	0x28FF, r24	; 0x8028ff <g_twi1_gyro_2_version>
					g_twi1_gyro_valid = true;
    2d38:	91 e0       	ldi	r25, 0x01	; 1
    2d3a:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <g_twi1_gyro_valid>
					printf("TWI-onboard: Gyro MPU-9250 -     version: 0x%02X, 0x%02X\r\n", g_twi1_gyro_1_version, g_twi1_gyro_2_version);
    2d3e:	1f 92       	push	r1
    2d40:	8f 93       	push	r24
    2d42:	80 91 00 29 	lds	r24, 0x2900	; 0x802900 <g_twi1_gyro_1_version>
    2d46:	1f 92       	push	r1
    2d48:	8f 93       	push	r24
    2d4a:	84 ec       	ldi	r24, 0xC4	; 196
    2d4c:	91 e2       	ldi	r25, 0x21	; 33
    2d4e:	9f 93       	push	r25
    2d50:	8f 93       	push	r24
    2d52:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <printf>
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	04 c0       	rjmp	.+8      	; 0x2d6c <twi_start+0x210>
				}
			}
		}
	} else {
		printf("TWI-onboard:  ... device not on board.\r\n");
    2d64:	8f e5       	ldi	r24, 0x5F	; 95
    2d66:	91 e2       	ldi	r25, 0x21	; 33
    2d68:	0e 94 63 46 	call	0x8cc6	; 0x8cc6 <puts>

static void init_twi1_baro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Baro MS560702BA03-50 - I2C address: 0x%02X\r\n", TWI1_SLAVE_BARO_ADDR);
    2d6c:	1f 92       	push	r1
    2d6e:	c6 e7       	ldi	r28, 0x76	; 118
    2d70:	cf 93       	push	r28
    2d72:	8f ef       	ldi	r24, 0xFF	; 255
    2d74:	91 e2       	ldi	r25, 0x21	; 33
    2d76:	9f 93       	push	r25
    2d78:	8f 93       	push	r24
    2d7a:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <printf>
	twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    2d7e:	ef e1       	ldi	r30, 0x1F	; 31
    2d80:	f0 e2       	ldi	r31, 0x20	; 32
    2d82:	c0 83       	st	Z, r28
	twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_RESET;
    2d84:	8e e1       	ldi	r24, 0x1E	; 30
    2d86:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr_length = 1;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	84 83       	std	Z+4, r24	; 0x04
    2d8e:	95 83       	std	Z+5, r25	; 0x05
	twi1_packet.length = 0;
    2d90:	10 86       	std	Z+8, r1	; 0x08
    2d92:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	bf 01       	movw	r22, r30
    2d98:	80 ea       	ldi	r24, 0xA0	; 160
    2d9a:	94 e0       	ldi	r25, 0x04	; 4
    2d9c:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
	sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	81 11       	cpse	r24, r1
    2daa:	73 c0       	rjmp	.+230    	; 0x2e92 <twi_start+0x336>
		delay_ms(3);
    2dac:	68 e9       	ldi	r22, 0x98	; 152
    2dae:	7a e3       	ldi	r23, 0x3A	; 58
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	95 dc       	rcall	.-1750   	; 0x26e0 <__portable_avr_delay_cycles>

		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_VERSION;
    2db6:	ef e1       	ldi	r30, 0x1F	; 31
    2db8:	f0 e2       	ldi	r31, 0x20	; 32
    2dba:	8e ea       	ldi	r24, 0xAE	; 174
    2dbc:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.length = 2;
    2dbe:	82 e0       	ldi	r24, 0x02	; 2
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	80 87       	std	Z+8, r24	; 0x08
    2dc4:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2dc6:	41 e0       	ldi	r20, 0x01	; 1
    2dc8:	bf 01       	movw	r22, r30
    2dca:	80 ea       	ldi	r24, 0xA0	; 160
    2dcc:	94 e0       	ldi	r25, 0x04	; 4
    2dce:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc == STATUS_OK) {
    2dd2:	81 11       	cpse	r24, r1
    2dd4:	1f c0       	rjmp	.+62     	; 0x2e14 <twi_start+0x2b8>
			g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
    2dd6:	eb e6       	ldi	r30, 0x6B	; 107
    2dd8:	f8 e2       	ldi	r31, 0x28	; 40
    2dda:	80 81       	ld	r24, Z
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	98 2f       	mov	r25, r24
    2de0:	88 27       	eor	r24, r24
    2de2:	21 81       	ldd	r18, Z+1	; 0x01
    2de4:	82 2b       	or	r24, r18
    2de6:	92 95       	swap	r25
    2de8:	82 95       	swap	r24
    2dea:	8f 70       	andi	r24, 0x0F	; 15
    2dec:	89 27       	eor	r24, r25
    2dee:	9f 70       	andi	r25, 0x0F	; 15
    2df0:	89 27       	eor	r24, r25
    2df2:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <g_twi1_baro_version>
    2df6:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <g_twi1_baro_version+0x1>
			printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);
    2dfa:	9f 93       	push	r25
    2dfc:	8f 93       	push	r24
    2dfe:	8b e3       	ldi	r24, 0x3B	; 59
    2e00:	92 e2       	ldi	r25, 0x22	; 34
    2e02:	9f 93       	push	r25
    2e04:	8f 93       	push	r24
    2e06:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <printf>
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	93 c0       	rjmp	.+294    	; 0x2f3a <twi_start+0x3de>
		} else {
			printf("TWI-onboard:  BAD reading serial/CRC word.\r\n");
    2e14:	81 e7       	ldi	r24, 0x71	; 113
    2e16:	92 e2       	ldi	r25, 0x22	; 34
    2e18:	0e 94 63 46 	call	0x8cc6	; 0x8cc6 <puts>
    2e1c:	8e c0       	rjmp	.+284    	; 0x2f3a <twi_start+0x3de>
		}

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
    2e1e:	ce 01       	movw	r24, r28
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	80 6a       	ori	r24, 0xA0	; 160
    2e26:	f4 01       	movw	r30, r8
    2e28:	81 83       	std	Z+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    2e2a:	a4 82       	std	Z+4, r10	; 0x04
    2e2c:	b5 82       	std	Z+5, r11	; 0x05
			twi1_packet.length = 2;
    2e2e:	c0 86       	std	Z+8, r12	; 0x08
    2e30:	d1 86       	std	Z+9, r13	; 0x09
    2e32:	41 e0       	ldi	r20, 0x01	; 1
    2e34:	b4 01       	movw	r22, r8
    2e36:	80 ea       	ldi	r24, 0xA0	; 160
    2e38:	94 e0       	ldi	r25, 0x04	; 4
    2e3a:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2e3e:	81 11       	cpse	r24, r1
    2e40:	16 c0       	rjmp	.+44     	; 0x2e6e <twi_start+0x312>
				g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    2e42:	f8 01       	movw	r30, r16
    2e44:	80 81       	ld	r24, Z
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	98 2f       	mov	r25, r24
    2e4a:	88 27       	eor	r24, r24
    2e4c:	21 81       	ldd	r18, Z+1	; 0x01
    2e4e:	82 2b       	or	r24, r18
    2e50:	f7 01       	movw	r30, r14
    2e52:	81 93       	st	Z+, r24
    2e54:	91 93       	st	Z+, r25
    2e56:	7f 01       	movw	r14, r30
				if (adr == C_TWI1_BARO_C_CNT - 1) {
    2e58:	c7 30       	cpi	r28, 0x07	; 7
    2e5a:	d1 05       	cpc	r29, r1
    2e5c:	a9 f4       	brne	.+42     	; 0x2e88 <twi_start+0x32c>
					g_twi1_baro_valid = true;
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <g_twi1_baro_valid>
					printf("TWI-onboard:  INIT success.\r\n");
    2e64:	8d e9       	ldi	r24, 0x9D	; 157
    2e66:	92 e2       	ldi	r25, 0x22	; 34
    2e68:	0e 94 63 46 	call	0x8cc6	; 0x8cc6 <puts>
    2e6c:	16 c0       	rjmp	.+44     	; 0x2e9a <twi_start+0x33e>
				}
			} else {
				printf("TWI-onboard:  BAD reading PROM address %d.\r\n", adr);
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	8a eb       	ldi	r24, 0xBA	; 186
    2e74:	92 e2       	ldi	r25, 0x22	; 34
    2e76:	9f 93       	push	r25
    2e78:	8f 93       	push	r24
    2e7a:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <printf>
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	09 c0       	rjmp	.+18     	; 0x2e9a <twi_start+0x33e>
			printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);
		} else {
			printf("TWI-onboard:  BAD reading serial/CRC word.\r\n");
		}

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
    2e88:	21 96       	adiw	r28, 0x01	; 1
    2e8a:	c8 30       	cpi	r28, 0x08	; 8
    2e8c:	d1 05       	cpc	r29, r1
    2e8e:	39 f6       	brne	.-114    	; 0x2e1e <twi_start+0x2c2>
    2e90:	04 c0       	rjmp	.+8      	; 0x2e9a <twi_start+0x33e>
				printf("TWI-onboard:  BAD reading PROM address %d.\r\n", adr);
				break;
			}
		}
	} else {
		printf("TWI-onboard:  ... device not on board.\r\n");
    2e92:	8f e5       	ldi	r24, 0x5F	; 95
    2e94:	91 e2       	ldi	r25, 0x21	; 33
    2e96:	0e 94 63 46 	call	0x8cc6	; 0x8cc6 <puts>
	init_twi1_gyro();

	/* Device Baro MS560702BA03-50 - I2C address: 0x76 */
	init_twi1_baro();

	printf("-----------\r\n\r\n");
    2e9a:	87 ee       	ldi	r24, 0xE7	; 231
    2e9c:	92 e2       	ldi	r25, 0x22	; 34
    2e9e:	0e 94 63 46 	call	0x8cc6	; 0x8cc6 <puts>
	#endif

	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
    2ea2:	61 ed       	ldi	r22, 0xD1	; 209
    2ea4:	72 e1       	ldi	r23, 0x12	; 18
    2ea6:	83 e1       	ldi	r24, 0x13	; 19
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	1a dc       	rcall	.-1996   	; 0x26e0 <__portable_avr_delay_cycles>

/* TWI2 - LCD Port */
static void start_twi2_lcd(void)
{
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
    2eac:	eb e0       	ldi	r30, 0x0B	; 11
    2eae:	f0 e2       	ldi	r31, 0x20	; 32
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	84 83       	std	Z+4, r24	; 0x04
    2eba:	95 83       	std	Z+5, r25	; 0x05
	twi2_packet.length = 1;
    2ebc:	80 87       	std	Z+8, r24	; 0x08
    2ebe:	91 87       	std	Z+9, r25	; 0x09
    2ec0:	41 e0       	ldi	r20, 0x01	; 1
    2ec2:	bf 01       	movw	r22, r30
    2ec4:	80 e8       	ldi	r24, 0x80	; 128
    2ec6:	94 e0       	ldi	r25, 0x04	; 4
    2ec8:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
    2ecc:	80 91 63 28 	lds	r24, 0x2863	; 0x802863 <twi2_m_data>
    2ed0:	80 93 d9 28 	sts	0x28D9, r24	; 0x8028d9 <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
    2ed4:	81 31       	cpi	r24, 0x11	; 17
    2ed6:	08 f4       	brcc	.+2      	; 0x2eda <twi_start+0x37e>
    2ed8:	48 c0       	rjmp	.+144    	; 0x2f6a <twi_start+0x40e>
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
    2eda:	cb e0       	ldi	r28, 0x0B	; 11
    2edc:	d0 e2       	ldi	r29, 0x20	; 32
    2ede:	82 e0       	ldi	r24, 0x02	; 2
    2ee0:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = 0x10;
    2ee2:	0f 2e       	mov	r0, r31
    2ee4:	f3 e6       	ldi	r31, 0x63	; 99
    2ee6:	ef 2e       	mov	r14, r31
    2ee8:	f8 e2       	ldi	r31, 0x28	; 40
    2eea:	ff 2e       	mov	r15, r31
    2eec:	f0 2d       	mov	r31, r0
    2eee:	80 e1       	ldi	r24, 0x10	; 16
    2ef0:	f7 01       	movw	r30, r14
    2ef2:	80 83       	st	Z, r24
		twi2_packet.length = 1;
    2ef4:	01 e0       	ldi	r16, 0x01	; 1
    2ef6:	10 e0       	ldi	r17, 0x00	; 0
    2ef8:	08 87       	std	Y+8, r16	; 0x08
    2efa:	19 87       	std	Y+9, r17	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2efc:	40 e0       	ldi	r20, 0x00	; 0
    2efe:	be 01       	movw	r22, r28
    2f00:	80 e8       	ldi	r24, 0x80	; 128
    2f02:	94 e0       	ldi	r25, 0x04	; 4
    2f04:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2f08:	65 e0       	ldi	r22, 0x05	; 5
    2f0a:	70 e0       	ldi	r23, 0x00	; 0
    2f0c:	80 e0       	ldi	r24, 0x00	; 0

		twi2_waitUntilReady();
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	e7 db       	rcall	.-2098   	; 0x26e0 <__portable_avr_delay_cycles>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
    2f12:	f1 db       	rcall	.-2078   	; 0x26f6 <twi2_waitUntilReady>
    2f14:	84 e1       	ldi	r24, 0x14	; 20
		twi2_m_data[0] = GFX_PIXEL_SET;
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	f7 01       	movw	r30, r14
		twi2_packet.length = 1;
    2f1c:	80 83       	st	Z, r24
    2f1e:	08 87       	std	Y+8, r16	; 0x08
    2f20:	19 87       	std	Y+9, r17	; 0x09
    2f22:	40 e0       	ldi	r20, 0x00	; 0
    2f24:	be 01       	movw	r22, r28
    2f26:	80 e8       	ldi	r24, 0x80	; 128
    2f28:	94 e0       	ldi	r25, 0x04	; 4
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2f2a:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
    2f2e:	65 e0       	ldi	r22, 0x05	; 5
    2f30:	70 e0       	ldi	r23, 0x00	; 0
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e0       	ldi	r25, 0x00	; 0
	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
	start_twi2_lcd();
}
    2f36:	d4 db       	rcall	.-2136   	; 0x26e0 <__portable_avr_delay_cycles>
    2f38:	18 c0       	rjmp	.+48     	; 0x2f6a <twi_start+0x40e>
    2f3a:	0f 2e       	mov	r0, r31
    2f3c:	fe ee       	ldi	r31, 0xEE	; 238
    2f3e:	ef 2e       	mov	r14, r31
    2f40:	f8 e2       	ldi	r31, 0x28	; 40
    2f42:	ff 2e       	mov	r15, r31
	TWI2_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA2
	TWI2_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL2
	#endif
}

void twi_start(void) {
    2f44:	f0 2d       	mov	r31, r0
    2f46:	c1 e0       	ldi	r28, 0x01	; 1
		} else {
			printf("TWI-onboard:  BAD reading serial/CRC word.\r\n");
		}

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
    2f48:	d0 e0       	ldi	r29, 0x00	; 0
    2f4a:	0f 2e       	mov	r0, r31
    2f4c:	ff e1       	ldi	r31, 0x1F	; 31
    2f4e:	8f 2e       	mov	r8, r31
    2f50:	f0 e2       	ldi	r31, 0x20	; 32
    2f52:	9f 2e       	mov	r9, r31
			twi1_packet.addr_length = 1;
    2f54:	f0 2d       	mov	r31, r0
    2f56:	aa 24       	eor	r10, r10
    2f58:	a3 94       	inc	r10
			twi1_packet.length = 2;
    2f5a:	b1 2c       	mov	r11, r1
    2f5c:	68 94       	set
    2f5e:	cc 24       	eor	r12, r12
    2f60:	c1 f8       	bld	r12, 1
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
				g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    2f62:	d1 2c       	mov	r13, r1
    2f64:	0b e6       	ldi	r16, 0x6B	; 107
    2f66:	18 e2       	ldi	r17, 0x28	; 40
	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
	start_twi2_lcd();
}
    2f68:	5a cf       	rjmp	.-332    	; 0x2e1e <twi_start+0x2c2>
    2f6a:	df 91       	pop	r29
    2f6c:	cf 91       	pop	r28
    2f6e:	1f 91       	pop	r17
    2f70:	0f 91       	pop	r16
    2f72:	ff 90       	pop	r15
    2f74:	ef 90       	pop	r14
    2f76:	df 90       	pop	r13
    2f78:	cf 90       	pop	r12
    2f7a:	bf 90       	pop	r11
    2f7c:	af 90       	pop	r10
    2f7e:	9f 90       	pop	r9
    2f80:	8f 90       	pop	r8
    2f82:	08 95       	ret

00002f84 <isr_10ms_twi1_onboard>:
	}
}

/* 10ms TWI1 - Gyro device */
void isr_10ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    2f84:	08 95       	ret

00002f86 <isr_500ms_twi1_onboard>:
{	/* Service time slot */
	if (g_twi1_hygro_valid) {
		isr_twi1_hygro(now, true);
	}

	if (g_twi1_baro_valid) {
    2f86:	20 91 fe 28 	lds	r18, 0x28FE	; 0x8028fe <g_twi1_baro_valid>
    2f8a:	22 23       	and	r18, r18
    2f8c:	11 f0       	breq	.+4      	; 0x2f92 <isr_500ms_twi1_onboard+0xc>
		isr_twi1_baro(now, true);
    2f8e:	41 e0       	ldi	r20, 0x01	; 1
    2f90:	1b cc       	rjmp	.-1994   	; 0x27c8 <isr_twi1_baro>
    2f92:	08 95       	ret

00002f94 <isr_sparetime_twi1_onboard>:

	if (g_twi1_gyro_valid) {
		isr_twi1_gyro(now, false);
	}

	if (g_twi1_baro_valid) {
    2f94:	20 91 fe 28 	lds	r18, 0x28FE	; 0x8028fe <g_twi1_baro_valid>
    2f98:	22 23       	and	r18, r18
    2f9a:	11 f0       	breq	.+4      	; 0x2fa0 <isr_sparetime_twi1_onboard+0xc>
		isr_twi1_baro(now, false);
    2f9c:	40 e0       	ldi	r20, 0x00	; 0
    2f9e:	14 cc       	rjmp	.-2008   	; 0x27c8 <isr_twi1_baro>
    2fa0:	08 95       	ret

00002fa2 <task_twi1_onboard>:
	}
}

/* TWI1 - onboard devices */
void task_twi1_onboard(uint32_t now)
{
    2fa2:	2f 92       	push	r2
    2fa4:	3f 92       	push	r3
    2fa6:	4f 92       	push	r4
    2fa8:	5f 92       	push	r5
    2faa:	6f 92       	push	r6
    2fac:	7f 92       	push	r7
    2fae:	8f 92       	push	r8
    2fb0:	9f 92       	push	r9
    2fb2:	af 92       	push	r10
    2fb4:	bf 92       	push	r11
    2fb6:	cf 92       	push	r12
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	a7 97       	sbiw	r28, 0x27	; 39
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	de bf       	out	0x3e, r29	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2fd0:	8f b7       	in	r24, 0x3f	; 63
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
    2fd4:	f8 94       	cli
	return flags;
    2fd6:	9b 81       	ldd	r25, Y+3	; 0x03
	irqflags_t flags = cpu_irq_save();
	bool l_twi1_hygro_valid	= g_twi1_hygro_valid;
	bool l_twi1_gyro_valid	= g_twi1_gyro_valid;
	bool l_twi1_baro_valid	= g_twi1_baro_valid;
    2fd8:	80 91 fe 28 	lds	r24, 0x28FE	; 0x8028fe <g_twi1_baro_valid>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2fdc:	9f bf       	out	0x3f, r25	; 63

	if (l_twi1_gyro_valid) {
		task_twi1_gyro(now);
	}

	if (l_twi1_baro_valid) {
    2fde:	88 23       	and	r24, r24
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <task_twi1_onboard+0x42>
    2fe2:	25 c2       	rjmp	.+1098   	; 0x342e <task_twi1_onboard+0x48c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2fe4:	8f b7       	in	r24, 0x3f	; 63
    2fe6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2fe8:	f8 94       	cli
	return flags;
    2fea:	8a 81       	ldd	r24, Y+2	; 0x02
{	// Calculations for the presentation layer
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	irqflags_t flags = cpu_irq_save();
	uint32_t l_twi1_baro_d1 = g_twi1_baro_d1;
    2fec:	20 91 e8 28 	lds	r18, 0x28E8	; 0x8028e8 <g_twi1_baro_d1>
    2ff0:	30 91 e9 28 	lds	r19, 0x28E9	; 0x8028e9 <g_twi1_baro_d1+0x1>
    2ff4:	40 91 ea 28 	lds	r20, 0x28EA	; 0x8028ea <g_twi1_baro_d1+0x2>
    2ff8:	50 91 eb 28 	lds	r21, 0x28EB	; 0x8028eb <g_twi1_baro_d1+0x3>
    2ffc:	28 8f       	std	Y+24, r18	; 0x18
    2ffe:	39 8f       	std	Y+25, r19	; 0x19
    3000:	4a 8f       	std	Y+26, r20	; 0x1a
    3002:	5b 8f       	std	Y+27, r21	; 0x1b
	uint32_t l_twi1_baro_d2 = g_twi1_baro_d2;
    3004:	40 91 e4 28 	lds	r20, 0x28E4	; 0x8028e4 <g_twi1_baro_d2>
    3008:	50 91 e5 28 	lds	r21, 0x28E5	; 0x8028e5 <g_twi1_baro_d2+0x1>
    300c:	60 91 e6 28 	lds	r22, 0x28E6	; 0x8028e6 <g_twi1_baro_d2+0x2>
    3010:	70 91 e7 28 	lds	r23, 0x28E7	; 0x8028e7 <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3014:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	/* Calculate and present Baro and Temp values when a different measurement has arrived */
	if ((l_twi1_baro_d1 != s_twi1_baro_d1) || (l_twi1_baro_d2 != s_twi1_baro_d2)) {
    3016:	88 8d       	ldd	r24, Y+24	; 0x18
    3018:	99 8d       	ldd	r25, Y+25	; 0x19
    301a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    301c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    301e:	89 2b       	or	r24, r25
    3020:	8a 2b       	or	r24, r26
    3022:	8b 2b       	or	r24, r27
    3024:	31 f4       	brne	.+12     	; 0x3032 <task_twi1_onboard+0x90>
    3026:	41 15       	cp	r20, r1
    3028:	51 05       	cpc	r21, r1
    302a:	61 05       	cpc	r22, r1
    302c:	71 05       	cpc	r23, r1
    302e:	09 f4       	brne	.+2      	; 0x3032 <task_twi1_onboard+0x90>
    3030:	fe c1       	rjmp	.+1020   	; 0x342e <task_twi1_onboard+0x48c>
		int32_t dT = (int32_t)l_twi1_baro_d2 - ((int32_t)g_twi1_baro_c[5] << 8);
    3032:	0f 2e       	mov	r0, r31
    3034:	fc ee       	ldi	r31, 0xEC	; 236
    3036:	2f 2e       	mov	r2, r31
    3038:	f8 e2       	ldi	r31, 0x28	; 40
    303a:	3f 2e       	mov	r3, r31
    303c:	f0 2d       	mov	r31, r0
		int32_t temp_p20 = (int32_t)(((int64_t)dT * g_twi1_baro_c[6]) >> 23);
    303e:	d1 01       	movw	r26, r2
    3040:	1a 96       	adiw	r26, 0x0a	; 10
    3042:	8d 91       	ld	r24, X+
    3044:	9c 91       	ld	r25, X
    3046:	1b 97       	sbiw	r26, 0x0b	; 11
    3048:	a0 e0       	ldi	r26, 0x00	; 0
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	ba 2f       	mov	r27, r26
    304e:	a9 2f       	mov	r26, r25
    3050:	98 2f       	mov	r25, r24
    3052:	88 27       	eor	r24, r24
    3054:	2a 01       	movw	r4, r20
    3056:	3b 01       	movw	r6, r22
    3058:	48 1a       	sub	r4, r24
    305a:	59 0a       	sbc	r5, r25
    305c:	6a 0a       	sbc	r6, r26
    305e:	7b 0a       	sbc	r7, r27
    3060:	a3 01       	movw	r20, r6
    3062:	92 01       	movw	r18, r4
    3064:	55 0f       	add	r21, r21
    3066:	22 0b       	sbc	r18, r18
    3068:	32 2f       	mov	r19, r18
    306a:	a9 01       	movw	r20, r18
    306c:	2c 83       	std	Y+4, r18	; 0x04
    306e:	3d 83       	std	Y+5, r19	; 0x05
    3070:	4e 83       	std	Y+6, r20	; 0x06
    3072:	5f 83       	std	Y+7, r21	; 0x07
    3074:	d1 01       	movw	r26, r2
    3076:	1c 96       	adiw	r26, 0x0c	; 12
    3078:	4d 91       	ld	r20, X+
    307a:	5c 91       	ld	r21, X
    307c:	1d 97       	sbiw	r26, 0x0d	; 13
    307e:	a4 2c       	mov	r10, r4
    3080:	b5 2c       	mov	r11, r5
    3082:	c6 2c       	mov	r12, r6
    3084:	d7 2c       	mov	r13, r7
    3086:	ec 80       	ldd	r14, Y+4	; 0x04
    3088:	fe 2c       	mov	r15, r14
    308a:	0e 2d       	mov	r16, r14
    308c:	1e 2d       	mov	r17, r14
    308e:	24 2f       	mov	r18, r20
    3090:	35 2f       	mov	r19, r21
    3092:	40 e0       	ldi	r20, 0x00	; 0
    3094:	50 e0       	ldi	r21, 0x00	; 0
    3096:	60 e0       	ldi	r22, 0x00	; 0
    3098:	70 e0       	ldi	r23, 0x00	; 0
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	0e 94 79 43 	call	0x86f2	; 0x86f2 <__muldi3>
    30a2:	07 e1       	ldi	r16, 0x17	; 23
    30a4:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__ashrdi3>
    30a8:	2c 87       	std	Y+12, r18	; 0x0c
    30aa:	3d 87       	std	Y+13, r19	; 0x0d
    30ac:	4e 87       	std	Y+14, r20	; 0x0e
    30ae:	5f 87       	std	Y+15, r21	; 0x0f
    30b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    30b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    30b4:	4e 85       	ldd	r20, Y+14	; 0x0e
    30b6:	5f 85       	ldd	r21, Y+15	; 0x0f
    30b8:	2c a3       	std	Y+36, r18	; 0x24
    30ba:	3d a3       	std	Y+37, r19	; 0x25
    30bc:	4e a3       	std	Y+38, r20	; 0x26
    30be:	5f a3       	std	Y+39, r21	; 0x27
		int32_t temp = temp_p20 + 2000L;
    30c0:	ba 01       	movw	r22, r20
    30c2:	a9 01       	movw	r20, r18
    30c4:	40 53       	subi	r20, 0x30	; 48
    30c6:	58 4f       	sbci	r21, 0xF8	; 248
    30c8:	6f 4f       	sbci	r22, 0xFF	; 255
    30ca:	7f 4f       	sbci	r23, 0xFF	; 255
    30cc:	4c 8b       	std	Y+20, r20	; 0x14
    30ce:	5d 8b       	std	Y+21, r21	; 0x15
    30d0:	6e 8b       	std	Y+22, r22	; 0x16
    30d2:	7f 8b       	std	Y+23, r23	; 0x17
		int64_t off  = ((int64_t)g_twi1_baro_c[2] << 17) + (((int64_t)g_twi1_baro_c[4] * dT) >> 6);
    30d4:	d1 01       	movw	r26, r2
    30d6:	18 96       	adiw	r26, 0x08	; 8
    30d8:	4d 91       	ld	r20, X+
    30da:	5c 91       	ld	r21, X
    30dc:	19 97       	sbiw	r26, 0x09	; 9
    30de:	fe 2c       	mov	r15, r14
    30e0:	0e 2d       	mov	r16, r14
    30e2:	24 2f       	mov	r18, r20
    30e4:	35 2f       	mov	r19, r21
    30e6:	40 e0       	ldi	r20, 0x00	; 0
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	60 e0       	ldi	r22, 0x00	; 0
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	0e 94 79 43 	call	0x86f2	; 0x86f2 <__muldi3>
    30f6:	06 e0       	ldi	r16, 0x06	; 6
    30f8:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__ashrdi3>
    30fc:	28 8b       	std	Y+16, r18	; 0x10
    30fe:	39 8b       	std	Y+17, r19	; 0x11
    3100:	84 2e       	mov	r8, r20
    3102:	95 2e       	mov	r9, r21
    3104:	b6 2f       	mov	r27, r22
    3106:	a7 2f       	mov	r26, r23
    3108:	8a 8b       	std	Y+18, r24	; 0x12
    310a:	9b 8b       	std	Y+19, r25	; 0x13
    310c:	f1 01       	movw	r30, r2
    310e:	a4 80       	ldd	r10, Z+4	; 0x04
    3110:	b5 80       	ldd	r11, Z+5	; 0x05
    3112:	2a 2d       	mov	r18, r10
    3114:	3b 2d       	mov	r19, r11
    3116:	40 e0       	ldi	r20, 0x00	; 0
    3118:	50 e0       	ldi	r21, 0x00	; 0
    311a:	60 e0       	ldi	r22, 0x00	; 0
    311c:	70 e0       	ldi	r23, 0x00	; 0
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	01 e1       	ldi	r16, 0x11	; 17
    3124:	0e 94 ca 43 	call	0x8794	; 0x8794 <__ashldi3>
    3128:	a2 2e       	mov	r10, r18
    312a:	b3 2e       	mov	r11, r19
    312c:	c4 2e       	mov	r12, r20
    312e:	d5 2e       	mov	r13, r21
    3130:	e6 2e       	mov	r14, r22
    3132:	f7 2e       	mov	r15, r23
    3134:	08 2f       	mov	r16, r24
    3136:	19 2f       	mov	r17, r25
    3138:	28 89       	ldd	r18, Y+16	; 0x10
    313a:	39 89       	ldd	r19, Y+17	; 0x11
    313c:	48 2d       	mov	r20, r8
    313e:	59 2d       	mov	r21, r9
    3140:	6b 2f       	mov	r22, r27
    3142:	7a 2f       	mov	r23, r26
    3144:	8a 89       	ldd	r24, Y+18	; 0x12
    3146:	9b 89       	ldd	r25, Y+19	; 0x13
    3148:	0e 94 01 44 	call	0x8802	; 0x8802 <__adddi3>
    314c:	28 8b       	std	Y+16, r18	; 0x10
    314e:	39 8b       	std	Y+17, r19	; 0x11
    3150:	4c 8f       	std	Y+28, r20	; 0x1c
    3152:	5d 8f       	std	Y+29, r21	; 0x1d
    3154:	6e 8f       	std	Y+30, r22	; 0x1e
    3156:	7f 8f       	std	Y+31, r23	; 0x1f
    3158:	88 a3       	std	Y+32, r24	; 0x20
    315a:	99 a3       	std	Y+33, r25	; 0x21
		int64_t sens = ((int64_t)g_twi1_baro_c[1] << 16) + (((int64_t)g_twi1_baro_c[3] * dT) >> 7);
    315c:	46 81       	ldd	r20, Z+6	; 0x06
    315e:	57 81       	ldd	r21, Z+7	; 0x07
    3160:	a4 2c       	mov	r10, r4
    3162:	b5 2c       	mov	r11, r5
    3164:	c6 2c       	mov	r12, r6
    3166:	d7 2c       	mov	r13, r7
    3168:	ec 80       	ldd	r14, Y+4	; 0x04
    316a:	fe 2c       	mov	r15, r14
    316c:	0e 2d       	mov	r16, r14
    316e:	1e 2d       	mov	r17, r14
    3170:	24 2f       	mov	r18, r20
    3172:	35 2f       	mov	r19, r21
    3174:	40 e0       	ldi	r20, 0x00	; 0
    3176:	50 e0       	ldi	r21, 0x00	; 0
    3178:	60 e0       	ldi	r22, 0x00	; 0
    317a:	70 e0       	ldi	r23, 0x00	; 0
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	0e 94 79 43 	call	0x86f2	; 0x86f2 <__muldi3>
    3184:	07 e0       	ldi	r16, 0x07	; 7
    3186:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__ashrdi3>
    318a:	2a 8b       	std	Y+18, r18	; 0x12
    318c:	3b 8b       	std	Y+19, r19	; 0x13
    318e:	84 2e       	mov	r8, r20
    3190:	95 2e       	mov	r9, r21
    3192:	b6 2f       	mov	r27, r22
    3194:	a7 2f       	mov	r26, r23
    3196:	8a a3       	std	Y+34, r24	; 0x22
    3198:	9b a3       	std	Y+35, r25	; 0x23
    319a:	f1 01       	movw	r30, r2
    319c:	a2 80       	ldd	r10, Z+2	; 0x02
    319e:	b3 80       	ldd	r11, Z+3	; 0x03
    31a0:	2a 2d       	mov	r18, r10
    31a2:	3b 2d       	mov	r19, r11
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	50 e0       	ldi	r21, 0x00	; 0
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	00 e1       	ldi	r16, 0x10	; 16
    31b2:	0e 94 ca 43 	call	0x8794	; 0x8794 <__ashldi3>
    31b6:	a2 2e       	mov	r10, r18
    31b8:	b3 2e       	mov	r11, r19
    31ba:	c4 2e       	mov	r12, r20
    31bc:	d5 2e       	mov	r13, r21
    31be:	e6 2e       	mov	r14, r22
    31c0:	f7 2e       	mov	r15, r23
    31c2:	08 2f       	mov	r16, r24
    31c4:	19 2f       	mov	r17, r25
    31c6:	2a 89       	ldd	r18, Y+18	; 0x12
    31c8:	3b 89       	ldd	r19, Y+19	; 0x13
    31ca:	48 2d       	mov	r20, r8
    31cc:	59 2d       	mov	r21, r9
    31ce:	6b 2f       	mov	r22, r27
    31d0:	7a 2f       	mov	r23, r26
    31d2:	8a a1       	ldd	r24, Y+34	; 0x22
    31d4:	9b a1       	ldd	r25, Y+35	; 0x23
    31d6:	0e 94 01 44 	call	0x8802	; 0x8802 <__adddi3>
    31da:	32 2e       	mov	r3, r18
    31dc:	23 2e       	mov	r2, r19
    31de:	4a 8b       	std	Y+18, r20	; 0x12
    31e0:	5b 8b       	std	Y+19, r21	; 0x13
    31e2:	6a a3       	std	Y+34, r22	; 0x22
    31e4:	7b a3       	std	Y+35, r23	; 0x23
    31e6:	98 2e       	mov	r9, r24
    31e8:	89 2e       	mov	r8, r25

		/* Low temp and very low temp corrections */
		if (temp < 2000L) {
    31ea:	2c 89       	ldd	r18, Y+20	; 0x14
    31ec:	3d 89       	ldd	r19, Y+21	; 0x15
    31ee:	4e 89       	ldd	r20, Y+22	; 0x16
    31f0:	5f 89       	ldd	r21, Y+23	; 0x17
    31f2:	20 3d       	cpi	r18, 0xD0	; 208
    31f4:	37 40       	sbci	r19, 0x07	; 7
    31f6:	41 05       	cpc	r20, r1
    31f8:	51 05       	cpc	r21, r1
    31fa:	0c f0       	brlt	.+2      	; 0x31fe <task_twi1_onboard+0x25c>
    31fc:	d0 c0       	rjmp	.+416    	; 0x339e <task_twi1_onboard+0x3fc>
			int32_t t2 = (int32_t)(((int64_t)dT * (int64_t)dT) >> 31);
    31fe:	a4 2c       	mov	r10, r4
    3200:	b5 2c       	mov	r11, r5
    3202:	c6 2c       	mov	r12, r6
    3204:	d7 2c       	mov	r13, r7
    3206:	ec 80       	ldd	r14, Y+4	; 0x04
    3208:	fe 2c       	mov	r15, r14
    320a:	0e 2d       	mov	r16, r14
    320c:	1e 2d       	mov	r17, r14
    320e:	24 2d       	mov	r18, r4
    3210:	35 2d       	mov	r19, r5
    3212:	46 2d       	mov	r20, r6
    3214:	57 2d       	mov	r21, r7
    3216:	60 2f       	mov	r22, r16
    3218:	70 2f       	mov	r23, r16
    321a:	80 2f       	mov	r24, r16
    321c:	9e 2d       	mov	r25, r14
    321e:	0e 94 79 43 	call	0x86f2	; 0x86f2 <__muldi3>
    3222:	0f e1       	ldi	r16, 0x1F	; 31
    3224:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__ashrdi3>
    3228:	2c 83       	std	Y+4, r18	; 0x04
    322a:	3d 83       	std	Y+5, r19	; 0x05
    322c:	4e 83       	std	Y+6, r20	; 0x06
    322e:	5f 83       	std	Y+7, r21	; 0x07
			int32_t temp_p20_2 = temp_p20 * temp_p20;
    3230:	2c 85       	ldd	r18, Y+12	; 0x0c
    3232:	3d 85       	ldd	r19, Y+13	; 0x0d
    3234:	4e 85       	ldd	r20, Y+14	; 0x0e
    3236:	5f 85       	ldd	r21, Y+15	; 0x0f
    3238:	ca 01       	movw	r24, r20
    323a:	b9 01       	movw	r22, r18
    323c:	0e 94 e4 42 	call	0x85c8	; 0x85c8 <__mulsi3>
    3240:	2b 01       	movw	r4, r22
    3242:	3c 01       	movw	r6, r24
			int32_t off2 = (61 * temp_p20_2) >> 4;
    3244:	ad e3       	ldi	r26, 0x3D	; 61
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	9b 01       	movw	r18, r22
    324a:	ac 01       	movw	r20, r24
    324c:	0e 94 6f 43 	call	0x86de	; 0x86de <__muluhisi3>
    3250:	7b 01       	movw	r14, r22
    3252:	8c 01       	movw	r16, r24
    3254:	68 94       	set
    3256:	13 f8       	bld	r1, 3
    3258:	15 95       	asr	r17
    325a:	07 95       	ror	r16
    325c:	f7 94       	ror	r15
    325e:	e7 94       	ror	r14
    3260:	16 94       	lsr	r1
    3262:	d1 f7       	brne	.-12     	; 0x3258 <task_twi1_onboard+0x2b6>
			int32_t sens2 = temp_p20_2 << 1;
    3264:	44 0c       	add	r4, r4
    3266:	55 1c       	adc	r5, r5
    3268:	66 1c       	adc	r6, r6
    326a:	77 1c       	adc	r7, r7

			if (temp < -1500L) {
    326c:	8c 89       	ldd	r24, Y+20	; 0x14
    326e:	9d 89       	ldd	r25, Y+21	; 0x15
    3270:	ae 89       	ldd	r26, Y+22	; 0x16
    3272:	bf 89       	ldd	r27, Y+23	; 0x17
    3274:	84 32       	cpi	r24, 0x24	; 36
    3276:	9a 4f       	sbci	r25, 0xFA	; 250
    3278:	af 4f       	sbci	r26, 0xFF	; 255
    327a:	bf 4f       	sbci	r27, 0xFF	; 255
    327c:	c4 f5       	brge	.+112    	; 0x32ee <task_twi1_onboard+0x34c>
				int32_t temp_m15 = temp + 1500L;
    327e:	6c a1       	ldd	r22, Y+36	; 0x24
    3280:	7d a1       	ldd	r23, Y+37	; 0x25
    3282:	8e a1       	ldd	r24, Y+38	; 0x26
    3284:	9f a1       	ldd	r25, Y+39	; 0x27
    3286:	64 55       	subi	r22, 0x54	; 84
    3288:	72 4f       	sbci	r23, 0xF2	; 242
    328a:	8f 4f       	sbci	r24, 0xFF	; 255
    328c:	9f 4f       	sbci	r25, 0xFF	; 255
				int32_t temp_m15_2 = temp_m15 * temp_m15;
    328e:	9b 01       	movw	r18, r22
    3290:	ac 01       	movw	r20, r24
    3292:	0e 94 e4 42 	call	0x85c8	; 0x85c8 <__mulsi3>
				off2  += 15 * temp_m15_2;
    3296:	9b 01       	movw	r18, r22
    3298:	ac 01       	movw	r20, r24
    329a:	22 0f       	add	r18, r18
    329c:	33 1f       	adc	r19, r19
    329e:	44 1f       	adc	r20, r20
    32a0:	55 1f       	adc	r21, r21
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	82 0f       	add	r24, r18
    32a8:	93 1f       	adc	r25, r19
    32aa:	a4 1f       	adc	r26, r20
    32ac:	b5 1f       	adc	r27, r21
    32ae:	5c 01       	movw	r10, r24
    32b0:	6d 01       	movw	r12, r26
    32b2:	aa 0c       	add	r10, r10
    32b4:	bb 1c       	adc	r11, r11
    32b6:	cc 1c       	adc	r12, r12
    32b8:	dd 1c       	adc	r13, r13
    32ba:	aa 0c       	add	r10, r10
    32bc:	bb 1c       	adc	r11, r11
    32be:	cc 1c       	adc	r12, r12
    32c0:	dd 1c       	adc	r13, r13
    32c2:	8a 0d       	add	r24, r10
    32c4:	9b 1d       	adc	r25, r11
    32c6:	ac 1d       	adc	r26, r12
    32c8:	bd 1d       	adc	r27, r13
    32ca:	e8 0e       	add	r14, r24
    32cc:	f9 1e       	adc	r15, r25
    32ce:	0a 1f       	adc	r16, r26
    32d0:	1b 1f       	adc	r17, r27
				sens2 +=  8 * temp_m15_2;
    32d2:	da 01       	movw	r26, r20
    32d4:	c9 01       	movw	r24, r18
    32d6:	88 0f       	add	r24, r24
    32d8:	99 1f       	adc	r25, r25
    32da:	aa 1f       	adc	r26, r26
    32dc:	bb 1f       	adc	r27, r27
    32de:	88 0f       	add	r24, r24
    32e0:	99 1f       	adc	r25, r25
    32e2:	aa 1f       	adc	r26, r26
    32e4:	bb 1f       	adc	r27, r27
    32e6:	48 0e       	add	r4, r24
    32e8:	59 1e       	adc	r5, r25
    32ea:	6a 1e       	adc	r6, r26
    32ec:	7b 1e       	adc	r7, r27
			}
			temp -= t2;
    32ee:	2c 89       	ldd	r18, Y+20	; 0x14
    32f0:	3d 89       	ldd	r19, Y+21	; 0x15
    32f2:	4e 89       	ldd	r20, Y+22	; 0x16
    32f4:	5f 89       	ldd	r21, Y+23	; 0x17
    32f6:	6c 81       	ldd	r22, Y+4	; 0x04
    32f8:	7d 81       	ldd	r23, Y+5	; 0x05
    32fa:	8e 81       	ldd	r24, Y+6	; 0x06
    32fc:	9f 81       	ldd	r25, Y+7	; 0x07
    32fe:	26 1b       	sub	r18, r22
    3300:	37 0b       	sbc	r19, r23
    3302:	48 0b       	sbc	r20, r24
    3304:	59 0b       	sbc	r21, r25
    3306:	2c 8b       	std	Y+20, r18	; 0x14
    3308:	3d 8b       	std	Y+21, r19	; 0x15
    330a:	4e 8b       	std	Y+22, r20	; 0x16
    330c:	5f 8b       	std	Y+23, r21	; 0x17
			off  -= off2;
    330e:	d8 01       	movw	r26, r16
    3310:	c7 01       	movw	r24, r14
    3312:	bb 0f       	add	r27, r27
    3314:	88 0b       	sbc	r24, r24
    3316:	98 2f       	mov	r25, r24
    3318:	dc 01       	movw	r26, r24
    331a:	8c 83       	std	Y+4, r24	; 0x04
    331c:	9d 83       	std	Y+5, r25	; 0x05
    331e:	ae 83       	std	Y+6, r26	; 0x06
    3320:	bf 83       	std	Y+7, r27	; 0x07
    3322:	28 89       	ldd	r18, Y+16	; 0x10
    3324:	39 89       	ldd	r19, Y+17	; 0x11
    3326:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3328:	5d 8d       	ldd	r21, Y+29	; 0x1d
    332a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    332c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    332e:	88 a1       	ldd	r24, Y+32	; 0x20
    3330:	99 a1       	ldd	r25, Y+33	; 0x21
    3332:	ae 2c       	mov	r10, r14
    3334:	bf 2c       	mov	r11, r15
    3336:	c0 2e       	mov	r12, r16
    3338:	d1 2e       	mov	r13, r17
    333a:	ec 80       	ldd	r14, Y+4	; 0x04
    333c:	fe 2c       	mov	r15, r14
    333e:	0e 2d       	mov	r16, r14
    3340:	1e 2d       	mov	r17, r14
    3342:	0e 94 0a 44 	call	0x8814	; 0x8814 <__subdi3>
    3346:	28 8b       	std	Y+16, r18	; 0x10
    3348:	39 8b       	std	Y+17, r19	; 0x11
    334a:	4c 8f       	std	Y+28, r20	; 0x1c
    334c:	5d 8f       	std	Y+29, r21	; 0x1d
    334e:	6e 8f       	std	Y+30, r22	; 0x1e
    3350:	7f 8f       	std	Y+31, r23	; 0x1f
    3352:	88 a3       	std	Y+32, r24	; 0x20
    3354:	99 a3       	std	Y+33, r25	; 0x21
			sens -= sens2;
    3356:	a3 01       	movw	r20, r6
    3358:	92 01       	movw	r18, r4
    335a:	55 0f       	add	r21, r21
    335c:	22 0b       	sbc	r18, r18
    335e:	32 2f       	mov	r19, r18
    3360:	a9 01       	movw	r20, r18
    3362:	2c 83       	std	Y+4, r18	; 0x04
    3364:	3d 83       	std	Y+5, r19	; 0x05
    3366:	4e 83       	std	Y+6, r20	; 0x06
    3368:	5f 83       	std	Y+7, r21	; 0x07
    336a:	23 2d       	mov	r18, r3
    336c:	32 2d       	mov	r19, r2
    336e:	4a 89       	ldd	r20, Y+18	; 0x12
    3370:	5b 89       	ldd	r21, Y+19	; 0x13
    3372:	6a a1       	ldd	r22, Y+34	; 0x22
    3374:	7b a1       	ldd	r23, Y+35	; 0x23
    3376:	89 2d       	mov	r24, r9
    3378:	98 2d       	mov	r25, r8
    337a:	a4 2c       	mov	r10, r4
    337c:	b5 2c       	mov	r11, r5
    337e:	c6 2c       	mov	r12, r6
    3380:	d7 2c       	mov	r13, r7
    3382:	ec 80       	ldd	r14, Y+4	; 0x04
    3384:	fe 2c       	mov	r15, r14
    3386:	0e 2d       	mov	r16, r14
    3388:	1e 2d       	mov	r17, r14
    338a:	0e 94 0a 44 	call	0x8814	; 0x8814 <__subdi3>
    338e:	32 2e       	mov	r3, r18
    3390:	23 2e       	mov	r2, r19
    3392:	4a 8b       	std	Y+18, r20	; 0x12
    3394:	5b 8b       	std	Y+19, r21	; 0x13
    3396:	6a a3       	std	Y+34, r22	; 0x22
    3398:	7b a3       	std	Y+35, r23	; 0x23
    339a:	98 2e       	mov	r9, r24
    339c:	89 2e       	mov	r8, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    339e:	8f b7       	in	r24, 0x3f	; 63
    33a0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    33a2:	f8 94       	cli
	return flags;
    33a4:	79 80       	ldd	r7, Y+1	; 0x01
		}
		int32_t p = (int32_t)((((l_twi1_baro_d1 * sens) >> 21) - off) >> 15);

		flags = cpu_irq_save();
		g_twi1_baro_temp_100 = temp;
    33a6:	4c 89       	ldd	r20, Y+20	; 0x14
    33a8:	5d 89       	ldd	r21, Y+21	; 0x15
    33aa:	6e 89       	ldd	r22, Y+22	; 0x16
    33ac:	7f 89       	ldd	r23, Y+23	; 0x17
    33ae:	40 93 e0 28 	sts	0x28E0, r20	; 0x8028e0 <g_twi1_baro_temp_100>
    33b2:	50 93 e1 28 	sts	0x28E1, r21	; 0x8028e1 <g_twi1_baro_temp_100+0x1>
    33b6:	60 93 e2 28 	sts	0x28E2, r22	; 0x8028e2 <g_twi1_baro_temp_100+0x2>
    33ba:	70 93 e3 28 	sts	0x28E3, r23	; 0x8028e3 <g_twi1_baro_temp_100+0x3>
		g_twi1_baro_p_100    = p;
    33be:	48 8d       	ldd	r20, Y+24	; 0x18
    33c0:	59 8d       	ldd	r21, Y+25	; 0x19
    33c2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    33c4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    33c6:	9a 01       	movw	r18, r20
    33c8:	ab 01       	movw	r20, r22
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	cb 01       	movw	r24, r22
    33d0:	2c 83       	std	Y+4, r18	; 0x04
    33d2:	3d 83       	std	Y+5, r19	; 0x05
    33d4:	4e 83       	std	Y+6, r20	; 0x06
    33d6:	5f 83       	std	Y+7, r21	; 0x07
    33d8:	68 87       	std	Y+8, r22	; 0x08
    33da:	79 87       	std	Y+9, r23	; 0x09
    33dc:	8a 87       	std	Y+10, r24	; 0x0a
    33de:	9b 87       	std	Y+11, r25	; 0x0b
    33e0:	a3 2c       	mov	r10, r3
    33e2:	b2 2c       	mov	r11, r2
    33e4:	ca 88       	ldd	r12, Y+18	; 0x12
    33e6:	db 88       	ldd	r13, Y+19	; 0x13
    33e8:	ea a0       	ldd	r14, Y+34	; 0x22
    33ea:	fb a0       	ldd	r15, Y+35	; 0x23
    33ec:	09 2d       	mov	r16, r9
    33ee:	18 2d       	mov	r17, r8
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	70 e0       	ldi	r23, 0x00	; 0
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	0e 94 79 43 	call	0x86f2	; 0x86f2 <__muldi3>
    33fc:	05 e1       	ldi	r16, 0x15	; 21
    33fe:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__ashrdi3>
    3402:	a8 88       	ldd	r10, Y+16	; 0x10
    3404:	b9 88       	ldd	r11, Y+17	; 0x11
    3406:	cc 8c       	ldd	r12, Y+28	; 0x1c
    3408:	dd 8c       	ldd	r13, Y+29	; 0x1d
    340a:	ee 8c       	ldd	r14, Y+30	; 0x1e
    340c:	ff 8c       	ldd	r15, Y+31	; 0x1f
    340e:	08 a1       	ldd	r16, Y+32	; 0x20
    3410:	19 a1       	ldd	r17, Y+33	; 0x21
    3412:	0e 94 0a 44 	call	0x8814	; 0x8814 <__subdi3>
    3416:	0f e0       	ldi	r16, 0x0F	; 15
    3418:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__ashrdi3>
    341c:	20 93 dc 28 	sts	0x28DC, r18	; 0x8028dc <g_twi1_baro_p_100>
    3420:	30 93 dd 28 	sts	0x28DD, r19	; 0x8028dd <g_twi1_baro_p_100+0x1>
    3424:	40 93 de 28 	sts	0x28DE, r20	; 0x8028de <g_twi1_baro_p_100+0x2>
    3428:	50 93 df 28 	sts	0x28DF, r21	; 0x8028df <g_twi1_baro_p_100+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    342c:	7f be       	out	0x3f, r7	; 63
	}

	if (l_twi1_baro_valid) {
		task_twi1_baro(now);
	}
}
    342e:	a7 96       	adiw	r28, 0x27	; 39
    3430:	cd bf       	out	0x3d, r28	; 61
    3432:	de bf       	out	0x3e, r29	; 62
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	ff 90       	pop	r15
    343e:	ef 90       	pop	r14
    3440:	df 90       	pop	r13
    3442:	cf 90       	pop	r12
    3444:	bf 90       	pop	r11
    3446:	af 90       	pop	r10
    3448:	9f 90       	pop	r9
    344a:	8f 90       	pop	r8
    344c:	7f 90       	pop	r7
    344e:	6f 90       	pop	r6
    3450:	5f 90       	pop	r5
    3452:	4f 90       	pop	r4
    3454:	3f 90       	pop	r3
    3456:	2f 90       	pop	r2
    3458:	08 95       	ret

0000345a <task_twi2_lcd>:
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

/* TWI2 - LCD Port */
void task_twi2_lcd(uint32_t now)
{
    345a:	2f 92       	push	r2
    345c:	3f 92       	push	r3
    345e:	4f 92       	push	r4
    3460:	5f 92       	push	r5
    3462:	6f 92       	push	r6
    3464:	7f 92       	push	r7
    3466:	8f 92       	push	r8
    3468:	9f 92       	push	r9
    346a:	af 92       	push	r10
    346c:	bf 92       	push	r11
    346e:	cf 92       	push	r12
    3470:	df 92       	push	r13
    3472:	ef 92       	push	r14
    3474:	ff 92       	push	r15
    3476:	0f 93       	push	r16
    3478:	1f 93       	push	r17
    347a:	cf 93       	push	r28
    347c:	df 93       	push	r29
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
    3482:	27 97       	sbiw	r28, 0x07	; 7
    3484:	cd bf       	out	0x3d, r28	; 61
    3486:	de bf       	out	0x3e, r29	; 62
	static uint16_t s_lcd_entry_cnt = 0U;
	static uint32_t s_lcd_last = 0UL;

	if (g_twi2_lcd_version >= 0x11) {
    3488:	20 91 d9 28 	lds	r18, 0x28D9	; 0x8028d9 <g_twi2_lcd_version>
    348c:	21 31       	cpi	r18, 0x11	; 17
    348e:	08 f4       	brcc	.+2      	; 0x3492 <task_twi2_lcd+0x38>
    3490:	c4 c1       	rjmp	.+904    	; 0x381a <task_twi2_lcd+0x3c0>
		//static uint8_t s_ofs = 0;

		/* Show current measurement data on the LCD */
		if (((now - s_lcd_last) >= 512) || (now < s_lcd_last)) {
    3492:	c0 90 98 24 	lds	r12, 0x2498	; 0x802498 <s_lcd_last.7436>
    3496:	d0 90 99 24 	lds	r13, 0x2499	; 0x802499 <s_lcd_last.7436+0x1>
    349a:	e0 90 9a 24 	lds	r14, 0x249A	; 0x80249a <s_lcd_last.7436+0x2>
    349e:	f0 90 9b 24 	lds	r15, 0x249B	; 0x80249b <s_lcd_last.7436+0x3>
    34a2:	8b 01       	movw	r16, r22
    34a4:	9c 01       	movw	r18, r24
    34a6:	0c 19       	sub	r16, r12
    34a8:	1d 09       	sbc	r17, r13
    34aa:	2e 09       	sbc	r18, r14
    34ac:	3f 09       	sbc	r19, r15
    34ae:	01 15       	cp	r16, r1
    34b0:	12 40       	sbci	r17, 0x02	; 2
    34b2:	21 05       	cpc	r18, r1
    34b4:	31 05       	cpc	r19, r1
    34b6:	30 f4       	brcc	.+12     	; 0x34c4 <task_twi2_lcd+0x6a>
    34b8:	6c 15       	cp	r22, r12
    34ba:	7d 05       	cpc	r23, r13
    34bc:	8e 05       	cpc	r24, r14
    34be:	9f 05       	cpc	r25, r15
    34c0:	08 f0       	brcs	.+2      	; 0x34c4 <task_twi2_lcd+0x6a>
    34c2:	ca c1       	rjmp	.+916    	; 0x3858 <task_twi2_lcd+0x3fe>
			const uint8_t col_left = 6 * 10;
			uint8_t line = 2;

			s_lcd_last = now;
    34c4:	60 93 98 24 	sts	0x2498, r22	; 0x802498 <s_lcd_last.7436>
    34c8:	70 93 99 24 	sts	0x2499, r23	; 0x802499 <s_lcd_last.7436+0x1>
    34cc:	80 93 9a 24 	sts	0x249A, r24	; 0x80249a <s_lcd_last.7436+0x2>
    34d0:	90 93 9b 24 	sts	0x249B, r25	; 0x80249b <s_lcd_last.7436+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    34d4:	8f b7       	in	r24, 0x3f	; 63
    34d6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    34d8:	f8 94       	cli
	return flags;
    34da:	89 81       	ldd	r24, Y+1	; 0x01

			/* Get up-to-date global data */
			irqflags_t flags = cpu_irq_save();
			int16_t l_adc_vctcxo_volt_1000	= g_adc_vctcxo_volt_1000;
    34dc:	c0 90 7d 28 	lds	r12, 0x287D	; 0x80287d <g_adc_vctcxo_volt_1000>
    34e0:	d0 90 7e 28 	lds	r13, 0x287E	; 0x80287e <g_adc_vctcxo_volt_1000+0x1>
			int16_t l_adc_5v0_volt_1000		= g_adc_5v0_volt_1000;
    34e4:	a0 90 7b 28 	lds	r10, 0x287B	; 0x80287b <g_adc_5v0_volt_1000>
    34e8:	b0 90 7c 28 	lds	r11, 0x287C	; 0x80287c <g_adc_5v0_volt_1000+0x1>
			int16_t l_adc_vbat_volt_1000	= g_adc_vbat_volt_1000;
    34ec:	80 90 79 28 	lds	r8, 0x2879	; 0x802879 <g_adc_vbat_volt_1000>
    34f0:	90 90 7a 28 	lds	r9, 0x287A	; 0x80287a <g_adc_vbat_volt_1000+0x1>
			int16_t l_adc_temp_deg_100		= g_adc_temp_deg_100;
    34f4:	e0 90 73 28 	lds	r14, 0x2873	; 0x802873 <g_adc_temp_deg_100>
    34f8:	f0 90 74 28 	lds	r15, 0x2874	; 0x802874 <g_adc_temp_deg_100+0x1>
			int16_t l_adc_io_adc4_volt_1000	= g_adc_io_adc4_volt_1000;
    34fc:	20 90 77 28 	lds	r2, 0x2877	; 0x802877 <g_adc_io_adc4_volt_1000>
    3500:	30 90 78 28 	lds	r3, 0x2878	; 0x802878 <g_adc_io_adc4_volt_1000+0x1>
			int16_t l_adc_io_adc5_volt_1000	= g_adc_io_adc5_volt_1000;
    3504:	e0 91 75 28 	lds	r30, 0x2875	; 0x802875 <g_adc_io_adc5_volt_1000>
    3508:	f0 91 76 28 	lds	r31, 0x2876	; 0x802876 <g_adc_io_adc5_volt_1000+0x1>
    350c:	ea 83       	std	Y+2, r30	; 0x02
    350e:	fb 83       	std	Y+3, r31	; 0x03
			int32_t l_twi1_baro_temp_100	= g_twi1_baro_temp_100;
    3510:	20 91 e0 28 	lds	r18, 0x28E0	; 0x8028e0 <g_twi1_baro_temp_100>
    3514:	30 91 e1 28 	lds	r19, 0x28E1	; 0x8028e1 <g_twi1_baro_temp_100+0x1>
    3518:	40 91 e2 28 	lds	r20, 0x28E2	; 0x8028e2 <g_twi1_baro_temp_100+0x2>
    351c:	50 91 e3 28 	lds	r21, 0x28E3	; 0x8028e3 <g_twi1_baro_temp_100+0x3>
    3520:	2c 83       	std	Y+4, r18	; 0x04
    3522:	3d 83       	std	Y+5, r19	; 0x05
    3524:	4e 83       	std	Y+6, r20	; 0x06
    3526:	5f 83       	std	Y+7, r21	; 0x07
			int32_t l_twi1_baro_p_100		= g_twi1_baro_p_100;
    3528:	40 90 dc 28 	lds	r4, 0x28DC	; 0x8028dc <g_twi1_baro_p_100>
    352c:	50 90 dd 28 	lds	r5, 0x28DD	; 0x8028dd <g_twi1_baro_p_100+0x1>
    3530:	60 90 de 28 	lds	r6, 0x28DE	; 0x8028de <g_twi1_baro_p_100+0x2>
    3534:	70 90 df 28 	lds	r7, 0x28DF	; 0x8028df <g_twi1_baro_p_100+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3538:	8f bf       	out	0x3f, r24	; 63
			cpu_irq_restore(flags);

			/* Repaint all items when starting and at some interval */
			if (!(s_lcd_entry_cnt++)) {
    353a:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <__data_end>
    353e:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <__data_end+0x1>
    3542:	9c 01       	movw	r18, r24
    3544:	2f 5f       	subi	r18, 0xFF	; 255
    3546:	3f 4f       	sbci	r19, 0xFF	; 255
    3548:	20 93 96 24 	sts	0x2496, r18	; 0x802496 <__data_end>
    354c:	30 93 97 24 	sts	0x2497, r19	; 0x802497 <__data_end+0x1>
    3550:	89 2b       	or	r24, r25
    3552:	09 f0       	breq	.+2      	; 0x3556 <task_twi2_lcd+0xfc>
}


static void task_twi2_lcd_cls(void)
{
	twi2_waitUntilReady();
    3554:	e3 c0       	rjmp	.+454    	; 0x371c <task_twi2_lcd+0x2c2>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
    3556:	cf d8       	rcall	.-3682   	; 0x26f6 <twi2_waitUntilReady>
    3558:	0b e0       	ldi	r16, 0x0B	; 11
    355a:	10 e2       	ldi	r17, 0x20	; 32
    355c:	80 e1       	ldi	r24, 0x10	; 16
    355e:	f8 01       	movw	r30, r16
	twi2_packet.length = 0;
    3560:	81 83       	std	Z+1, r24	; 0x01
    3562:	10 86       	std	Z+8, r1	; 0x08
    3564:	11 86       	std	Z+9, r1	; 0x09
    3566:	40 e0       	ldi	r20, 0x00	; 0
    3568:	b8 01       	movw	r22, r16
    356a:	80 e8       	ldi	r24, 0x80	; 128
    356c:	94 e0       	ldi	r25, 0x04	; 4
    356e:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3572:	65 e0       	ldi	r22, 0x05	; 5
    3574:	70 e0       	ldi	r23, 0x00	; 0
    3576:	80 e0       	ldi	r24, 0x00	; 0
    3578:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t line;

	/* The header line */
	task_twi2_lcd_cls();
	task_twi2_lcd_str(6 * 10, 2, "FindMeSAT");
    357a:	b2 d8       	rcall	.-3740   	; 0x26e0 <__portable_avr_delay_cycles>
    357c:	46 ef       	ldi	r20, 0xF6	; 246
    357e:	52 e2       	ldi	r21, 0x22	; 34
    3580:	62 e0       	ldi	r22, 0x02	; 2
    3582:	8c e3       	ldi	r24, 0x3C	; 60
	task_twi2_lcd_str(6 * 30, 2, "by DF4IAH");
    3584:	f5 d9       	rcall	.-3094   	; 0x2970 <task_twi2_lcd_str>
    3586:	40 e0       	ldi	r20, 0x00	; 0
    3588:	53 e2       	ldi	r21, 0x23	; 35
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_circ(uint8_t x, uint8_t y, uint8_t radius, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    358a:	62 e0       	ldi	r22, 0x02	; 2
    358c:	84 eb       	ldi	r24, 0xB4	; 180
    358e:	f0 d9       	rcall	.-3104   	; 0x2970 <task_twi2_lcd_str>
    3590:	64 e0       	ldi	r22, 0x04	; 4

	twi2_waitUntilReady();
    3592:	89 e0       	ldi	r24, 0x09	; 9
    3594:	f9 d8       	rcall	.-3598   	; 0x2788 <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC : TWI_SMART_LCD_CMD_DRAW_CIRC;
    3596:	af d8       	rcall	.-3746   	; 0x26f6 <twi2_waitUntilReady>
    3598:	8a e3       	ldi	r24, 0x3A	; 58
    359a:	f8 01       	movw	r30, r16
	twi2_m_data[0] = radius;
    359c:	81 83       	std	Z+1, r24	; 0x01
    359e:	83 e0       	ldi	r24, 0x03	; 3
    35a0:	e3 e6       	ldi	r30, 0x63	; 99
    35a2:	f8 e2       	ldi	r31, 0x28	; 40
	twi2_packet.length = 1;
    35a4:	80 83       	st	Z, r24
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	f8 01       	movw	r30, r16
    35ac:	80 87       	std	Z+8, r24	; 0x08
    35ae:	91 87       	std	Z+9, r25	; 0x09
    35b0:	40 e0       	ldi	r20, 0x00	; 0
    35b2:	b8 01       	movw	r22, r16
    35b4:	80 e8       	ldi	r24, 0x80	; 128
    35b6:	94 e0       	ldi	r25, 0x04	; 4
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    35b8:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
    35bc:	65 e0       	ldi	r22, 0x05	; 5
    35be:	70 e0       	ldi	r23, 0x00	; 0
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	8d d8       	rcall	.-3814   	; 0x26e0 <__portable_avr_delay_cycles>
    35c6:	62 e0       	ldi	r22, 0x02	; 2

	twi2_waitUntilReady();
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	de d8       	rcall	.-3652   	; 0x2788 <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_RECT : TWI_SMART_LCD_CMD_DRAW_RECT;
    35cc:	94 d8       	rcall	.-3800   	; 0x26f6 <twi2_waitUntilReady>
    35ce:	24 e3       	ldi	r18, 0x34	; 52
    35d0:	f8 01       	movw	r30, r16
	twi2_m_data[0] = width;
    35d2:	21 83       	std	Z+1, r18	; 0x01
    35d4:	26 e0       	ldi	r18, 0x06	; 6
    35d6:	e3 e6       	ldi	r30, 0x63	; 99
    35d8:	f8 e2       	ldi	r31, 0x28	; 40
	twi2_m_data[1] = height;
    35da:	20 83       	st	Z, r18
    35dc:	34 e0       	ldi	r19, 0x04	; 4
    35de:	30 93 64 28 	sts	0x2864, r19	; 0x802864 <twi2_m_data+0x1>
	twi2_packet.length = 2;
    35e2:	22 e0       	ldi	r18, 0x02	; 2
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	f8 01       	movw	r30, r16
    35e8:	20 87       	std	Z+8, r18	; 0x08
    35ea:	31 87       	std	Z+9, r19	; 0x09
    35ec:	40 e0       	ldi	r20, 0x00	; 0
    35ee:	b8 01       	movw	r22, r16
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    35f0:	80 e8       	ldi	r24, 0x80	; 128
    35f2:	94 e0       	ldi	r25, 0x04	; 4
    35f4:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
    35f8:	65 e0       	ldi	r22, 0x05	; 5
    35fa:	70 e0       	ldi	r23, 0x00	; 0
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	6f d8       	rcall	.-3874   	; 0x26e0 <__portable_avr_delay_cycles>
    3602:	62 e0       	ldi	r22, 0x02	; 2

	twi2_waitUntilReady();
    3604:	8c e0       	ldi	r24, 0x0C	; 12
    3606:	c0 d8       	rcall	.-3712   	; 0x2788 <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_RECT : TWI_SMART_LCD_CMD_DRAW_RECT;
    3608:	76 d8       	rcall	.-3860   	; 0x26f6 <twi2_waitUntilReady>
    360a:	24 e3       	ldi	r18, 0x34	; 52
    360c:	f8 01       	movw	r30, r16
	twi2_m_data[0] = width;
    360e:	21 83       	std	Z+1, r18	; 0x01
    3610:	26 e0       	ldi	r18, 0x06	; 6
    3612:	e3 e6       	ldi	r30, 0x63	; 99
    3614:	f8 e2       	ldi	r31, 0x28	; 40
	twi2_m_data[1] = height;
    3616:	20 83       	st	Z, r18
    3618:	34 e0       	ldi	r19, 0x04	; 4
    361a:	30 93 64 28 	sts	0x2864, r19	; 0x802864 <twi2_m_data+0x1>
	twi2_packet.length = 2;
    361e:	22 e0       	ldi	r18, 0x02	; 2
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	f8 01       	movw	r30, r16
    3624:	20 87       	std	Z+8, r18	; 0x08
    3626:	31 87       	std	Z+9, r19	; 0x09
    3628:	40 e0       	ldi	r20, 0x00	; 0
    362a:	b8 01       	movw	r22, r16
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    362c:	80 e8       	ldi	r24, 0x80	; 128
    362e:	94 e0       	ldi	r25, 0x04	; 4
    3630:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
    3634:	65 e0       	ldi	r22, 0x05	; 5
    3636:	70 e0       	ldi	r23, 0x00	; 0
	}
}

static void task_twi2_lcd_line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
	task_twi2_lcd_pos_xy(x1, y1);
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	51 d8       	rcall	.-3934   	; 0x26e0 <__portable_avr_delay_cycles>
    363e:	6b e0       	ldi	r22, 0x0B	; 11

	twi2_waitUntilReady();
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	a2 d8       	rcall	.-3772   	; 0x2788 <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
    3644:	58 d8       	rcall	.-3920   	; 0x26f6 <twi2_waitUntilReady>
    3646:	82 e3       	ldi	r24, 0x32	; 50
    3648:	f8 01       	movw	r30, r16
	twi2_m_data[0] = x2;
    364a:	81 83       	std	Z+1, r24	; 0x01
    364c:	8f ee       	ldi	r24, 0xEF	; 239
    364e:	e3 e6       	ldi	r30, 0x63	; 99
    3650:	f8 e2       	ldi	r31, 0x28	; 40
	twi2_m_data[1] = y2;
    3652:	80 83       	st	Z, r24
    3654:	8b e0       	ldi	r24, 0x0B	; 11
	twi2_packet.length = 2;
    3656:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <twi2_m_data+0x1>
    365a:	22 e0       	ldi	r18, 0x02	; 2
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	f8 01       	movw	r30, r16
    3660:	20 87       	std	Z+8, r18	; 0x08
    3662:	31 87       	std	Z+9, r19	; 0x09
    3664:	40 e0       	ldi	r20, 0x00	; 0
    3666:	b8 01       	movw	r22, r16
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3668:	80 e8       	ldi	r24, 0x80	; 128
    366a:	94 e0       	ldi	r25, 0x04	; 4
    366c:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
    3670:	65 e0       	ldi	r22, 0x05	; 5
	/* Header line separator */
	task_twi2_lcd_line(0, 11, 239, 11);

	/* Left measurement names */
	line = 2;
	task_twi2_lcd_str(6 *  0, (line++) * 10, "mP Temp =");
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	33 d8       	rcall	.-3994   	; 0x26e0 <__portable_avr_delay_cycles>
	task_twi2_lcd_str(6 *  3, (line++) * 10,    "Vusb =");
    367a:	4a e0       	ldi	r20, 0x0A	; 10
    367c:	53 e2       	ldi	r21, 0x23	; 35
    367e:	64 e1       	ldi	r22, 0x14	; 20
    3680:	80 e0       	ldi	r24, 0x00	; 0
	task_twi2_lcd_str(6 *  3, (line++) * 10,    "Vbat =");
    3682:	76 d9       	rcall	.-3348   	; 0x2970 <task_twi2_lcd_str>
    3684:	44 e1       	ldi	r20, 0x14	; 20
    3686:	53 e2       	ldi	r21, 0x23	; 35
    3688:	6e e1       	ldi	r22, 0x1E	; 30
    368a:	82 e1       	ldi	r24, 0x12	; 18
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vvctcxo =");
    368c:	71 d9       	rcall	.-3358   	; 0x2970 <task_twi2_lcd_str>
    368e:	4b e1       	ldi	r20, 0x1B	; 27
    3690:	53 e2       	ldi	r21, 0x23	; 35
    3692:	68 e2       	ldi	r22, 0x28	; 40
    3694:	82 e1       	ldi	r24, 0x12	; 18
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vioadc4 =");
    3696:	6c d9       	rcall	.-3368   	; 0x2970 <task_twi2_lcd_str>
    3698:	42 e2       	ldi	r20, 0x22	; 34
    369a:	53 e2       	ldi	r21, 0x23	; 35
    369c:	62 e3       	ldi	r22, 0x32	; 50
    369e:	80 e0       	ldi	r24, 0x00	; 0
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vioadc5 =");
    36a0:	67 d9       	rcall	.-3378   	; 0x2970 <task_twi2_lcd_str>
    36a2:	4c e2       	ldi	r20, 0x2C	; 44
    36a4:	53 e2       	ldi	r21, 0x23	; 35
    36a6:	6c e3       	ldi	r22, 0x3C	; 60
	line++;

	task_twi2_lcd_str(6 *  0, (line++) * 10, "Ba_Temp =");
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	62 d9       	rcall	.-3388   	; 0x2970 <task_twi2_lcd_str>
    36ac:	46 e3       	ldi	r20, 0x36	; 54
    36ae:	53 e2       	ldi	r21, 0x23	; 35
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Ba_Pres =");
    36b0:	66 e4       	ldi	r22, 0x46	; 70
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	5d d9       	rcall	.-3398   	; 0x2970 <task_twi2_lcd_str>
    36b6:	40 e4       	ldi	r20, 0x40	; 64
    36b8:	53 e2       	ldi	r21, 0x23	; 35

	/* Left measurement units */
	line = 2;
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    36ba:	6a e5       	ldi	r22, 0x5A	; 90
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	58 d9       	rcall	.-3408   	; 0x2970 <task_twi2_lcd_str>
    36c0:	4a e4       	ldi	r20, 0x4A	; 74
    36c2:	53 e2       	ldi	r21, 0x23	; 35
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    36c4:	64 e6       	ldi	r22, 0x64	; 100
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	53 d9       	rcall	.-3418   	; 0x2970 <task_twi2_lcd_str>
    36ca:	44 e5       	ldi	r20, 0x54	; 84
    36cc:	53 e2       	ldi	r21, 0x23	; 35
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    36ce:	64 e1       	ldi	r22, 0x14	; 20
    36d0:	80 e6       	ldi	r24, 0x60	; 96
    36d2:	4e d9       	rcall	.-3428   	; 0x2970 <task_twi2_lcd_str>
    36d4:	46 e5       	ldi	r20, 0x56	; 86
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    36d6:	53 e2       	ldi	r21, 0x23	; 35
    36d8:	6e e1       	ldi	r22, 0x1E	; 30
    36da:	80 e6       	ldi	r24, 0x60	; 96
    36dc:	49 d9       	rcall	.-3438   	; 0x2970 <task_twi2_lcd_str>
    36de:	46 e5       	ldi	r20, 0x56	; 86
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    36e0:	53 e2       	ldi	r21, 0x23	; 35
    36e2:	68 e2       	ldi	r22, 0x28	; 40
    36e4:	80 e6       	ldi	r24, 0x60	; 96
    36e6:	44 d9       	rcall	.-3448   	; 0x2970 <task_twi2_lcd_str>
    36e8:	46 e5       	ldi	r20, 0x56	; 86
    36ea:	53 e2       	ldi	r21, 0x23	; 35
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    36ec:	62 e3       	ldi	r22, 0x32	; 50
    36ee:	80 e6       	ldi	r24, 0x60	; 96
    36f0:	3f d9       	rcall	.-3458   	; 0x2970 <task_twi2_lcd_str>
    36f2:	46 e5       	ldi	r20, 0x56	; 86
    36f4:	53 e2       	ldi	r21, 0x23	; 35
    36f6:	6c e3       	ldi	r22, 0x3C	; 60
	line++;

	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    36f8:	80 e6       	ldi	r24, 0x60	; 96
    36fa:	3a d9       	rcall	.-3468   	; 0x2970 <task_twi2_lcd_str>
    36fc:	46 e5       	ldi	r20, 0x56	; 86
    36fe:	53 e2       	ldi	r21, 0x23	; 35
    3700:	66 e4       	ldi	r22, 0x46	; 70
    3702:	80 e6       	ldi	r24, 0x60	; 96
	task_twi2_lcd_str(6 * 18, (line++) * 10, "hPa");
    3704:	35 d9       	rcall	.-3478   	; 0x2970 <task_twi2_lcd_str>
    3706:	44 e5       	ldi	r20, 0x54	; 84
    3708:	53 e2       	ldi	r21, 0x23	; 35
    370a:	6a e5       	ldi	r22, 0x5A	; 90
    370c:	80 e6       	ldi	r24, 0x60	; 96
    370e:	30 d9       	rcall	.-3488   	; 0x2970 <task_twi2_lcd_str>

			/* Repaint all items when starting and at some interval */
			if (!(s_lcd_entry_cnt++)) {
				task_twi2_lcd_header();
			#if 1
			} else if (s_lcd_entry_cnt >= 120) {
    3710:	48 e5       	ldi	r20, 0x58	; 88
    3712:	53 e2       	ldi	r21, 0x23	; 35
    3714:	64 e6       	ldi	r22, 0x64	; 100
				s_lcd_entry_cnt = 0;
    3716:	8c e6       	ldi	r24, 0x6C	; 108
    3718:	2b d9       	rcall	.-3498   	; 0x2970 <task_twi2_lcd_str>
    371a:	07 c0       	rjmp	.+14     	; 0x372a <task_twi2_lcd+0x2d0>
    371c:	28 37       	cpi	r18, 0x78	; 120
			#endif
			}

			/* ADC_TEMP */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_temp_deg_100 / 100,      (l_adc_temp_deg_100 / 10) % 10,  "%2d.%01d");
    371e:	31 05       	cpc	r19, r1
    3720:	20 f0       	brcs	.+8      	; 0x372a <task_twi2_lcd+0x2d0>
    3722:	10 92 96 24 	sts	0x2496, r1	; 0x802496 <__data_end>
    3726:	10 92 97 24 	sts	0x2497, r1	; 0x802497 <__data_end+0x1>
    372a:	2a e0       	ldi	r18, 0x0A	; 10
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	c7 01       	movw	r24, r14
    3730:	b9 01       	movw	r22, r18
    3732:	0e 94 07 43 	call	0x860e	; 0x860e <__divmodhi4>
    3736:	cb 01       	movw	r24, r22
    3738:	b9 01       	movw	r22, r18
    373a:	0e 94 07 43 	call	0x860e	; 0x860e <__divmodhi4>
    373e:	9c 01       	movw	r18, r24
    3740:	c7 01       	movw	r24, r14
    3742:	64 e6       	ldi	r22, 0x64	; 100
    3744:	70 e0       	ldi	r23, 0x00	; 0
    3746:	0e 94 07 43 	call	0x860e	; 0x860e <__divmodhi4>

			/* ADC_5V0 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_5v0_volt_1000 / 1000,     l_adc_5v0_volt_1000 % 1000,     "%1d.%03d");
    374a:	ab 01       	movw	r20, r22
    374c:	0c e5       	ldi	r16, 0x5C	; 92
    374e:	13 e2       	ldi	r17, 0x23	; 35
    3750:	64 e1       	ldi	r22, 0x14	; 20
    3752:	8c e3       	ldi	r24, 0x3C	; 60
    3754:	73 d9       	rcall	.-3354   	; 0x2a3c <task_twi2_lcd_print_format_uint16>
    3756:	0f 2e       	mov	r0, r31
    3758:	f8 ee       	ldi	r31, 0xE8	; 232
    375a:	ef 2e       	mov	r14, r31
    375c:	f3 e0       	ldi	r31, 0x03	; 3
    375e:	ff 2e       	mov	r15, r31
    3760:	f0 2d       	mov	r31, r0
    3762:	c5 01       	movw	r24, r10
    3764:	b7 01       	movw	r22, r14
    3766:	0e 94 07 43 	call	0x860e	; 0x860e <__divmodhi4>

			/* ADC_VBAT */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_vbat_volt_1000 / 1000,    l_adc_vbat_volt_1000 % 1000,    "%1d.%03d");
    376a:	ab 01       	movw	r20, r22
    376c:	05 e6       	ldi	r16, 0x65	; 101
    376e:	13 e2       	ldi	r17, 0x23	; 35
    3770:	9c 01       	movw	r18, r24
    3772:	6e e1       	ldi	r22, 0x1E	; 30
    3774:	8c e3       	ldi	r24, 0x3C	; 60
    3776:	62 d9       	rcall	.-3388   	; 0x2a3c <task_twi2_lcd_print_format_uint16>
    3778:	c4 01       	movw	r24, r8

			/* ADC_VCTCXO */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_vctcxo_volt_1000 / 1000,  l_adc_vctcxo_volt_1000 % 1000,  "%1d.%03d");
    377a:	b7 01       	movw	r22, r14
    377c:	0e 94 07 43 	call	0x860e	; 0x860e <__divmodhi4>
    3780:	ab 01       	movw	r20, r22
    3782:	9c 01       	movw	r18, r24
    3784:	68 e2       	ldi	r22, 0x28	; 40
    3786:	8c e3       	ldi	r24, 0x3C	; 60
    3788:	59 d9       	rcall	.-3406   	; 0x2a3c <task_twi2_lcd_print_format_uint16>
    378a:	c6 01       	movw	r24, r12
    378c:	b7 01       	movw	r22, r14

			/* ADC_IO_ADC4 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_io_adc4_volt_1000 / 1000, l_adc_io_adc4_volt_1000 % 1000, "%1d.%03d");
    378e:	0e 94 07 43 	call	0x860e	; 0x860e <__divmodhi4>
    3792:	ab 01       	movw	r20, r22
    3794:	9c 01       	movw	r18, r24
    3796:	62 e3       	ldi	r22, 0x32	; 50
    3798:	8c e3       	ldi	r24, 0x3C	; 60
    379a:	50 d9       	rcall	.-3424   	; 0x2a3c <task_twi2_lcd_print_format_uint16>
    379c:	c1 01       	movw	r24, r2
    379e:	b7 01       	movw	r22, r14
    37a0:	0e 94 07 43 	call	0x860e	; 0x860e <__divmodhi4>

			/* ADC_IO_ADC5 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_io_adc5_volt_1000 / 1000, l_adc_io_adc5_volt_1000 % 1000, "%1d.%03d");
    37a4:	ab 01       	movw	r20, r22
    37a6:	9c 01       	movw	r18, r24
    37a8:	6c e3       	ldi	r22, 0x3C	; 60
    37aa:	8c e3       	ldi	r24, 0x3C	; 60
    37ac:	47 d9       	rcall	.-3442   	; 0x2a3c <task_twi2_lcd_print_format_uint16>
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	9b 81       	ldd	r25, Y+3	; 0x03
    37b2:	b7 01       	movw	r22, r14
    37b4:	0e 94 07 43 	call	0x860e	; 0x860e <__divmodhi4>
			line++;

			/* Baro_Temp */
			task_twi2_lcd_print_format_uint32(col_left, (line++) * 10, l_twi1_baro_temp_100 / 100,     l_twi1_baro_temp_100 % 100,     "%-2ld.%02ld");
    37b8:	ab 01       	movw	r20, r22
    37ba:	9c 01       	movw	r18, r24
    37bc:	66 e4       	ldi	r22, 0x46	; 70
    37be:	8c e3       	ldi	r24, 0x3C	; 60
    37c0:	3d d9       	rcall	.-3462   	; 0x2a3c <task_twi2_lcd_print_format_uint16>
    37c2:	0f 2e       	mov	r0, r31
    37c4:	f4 e6       	ldi	r31, 0x64	; 100
    37c6:	8f 2e       	mov	r8, r31
    37c8:	91 2c       	mov	r9, r1
    37ca:	a1 2c       	mov	r10, r1
    37cc:	b1 2c       	mov	r11, r1
    37ce:	f0 2d       	mov	r31, r0
    37d0:	6c 81       	ldd	r22, Y+4	; 0x04
    37d2:	7d 81       	ldd	r23, Y+5	; 0x05
    37d4:	8e 81       	ldd	r24, Y+6	; 0x06
    37d6:	9f 81       	ldd	r25, Y+7	; 0x07
    37d8:	a5 01       	movw	r20, r10
    37da:	94 01       	movw	r18, r8
    37dc:	0e 94 3c 43 	call	0x8678	; 0x8678 <__divmodsi4>
    37e0:	0f 2e       	mov	r0, r31
    37e2:	fe e6       	ldi	r31, 0x6E	; 110
    37e4:	cf 2e       	mov	r12, r31
    37e6:	f3 e2       	ldi	r31, 0x23	; 35
    37e8:	df 2e       	mov	r13, r31

			/* Baro_P */
			task_twi2_lcd_print_format_uint32(col_left, (line++) * 10, l_twi1_baro_p_100 / 100,        l_twi1_baro_p_100 % 100,        "%4ld.%02ld");
    37ea:	f0 2d       	mov	r31, r0
    37ec:	7b 01       	movw	r14, r22
    37ee:	8c 01       	movw	r16, r24
    37f0:	6a e5       	ldi	r22, 0x5A	; 90
    37f2:	8c e3       	ldi	r24, 0x3C	; 60
    37f4:	60 d9       	rcall	.-3392   	; 0x2ab6 <task_twi2_lcd_print_format_uint32>
    37f6:	c3 01       	movw	r24, r6
    37f8:	b2 01       	movw	r22, r4
    37fa:	a5 01       	movw	r20, r10
    37fc:	94 01       	movw	r18, r8
    37fe:	0e 94 3c 43 	call	0x8678	; 0x8678 <__divmodsi4>
    3802:	0f 2e       	mov	r0, r31
    3804:	fa e7       	ldi	r31, 0x7A	; 122
    3806:	cf 2e       	mov	r12, r31
    3808:	f3 e2       	ldi	r31, 0x23	; 35
    380a:	df 2e       	mov	r13, r31
    380c:	f0 2d       	mov	r31, r0
    380e:	7b 01       	movw	r14, r22
				task_twi2_lcd_cls();
			}
		}
		#endif

	} else if (g_twi2_lcd_version == 0x10) {
    3810:	8c 01       	movw	r16, r24
    3812:	64 e6       	ldi	r22, 0x64	; 100
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi2_waitUntilReady();
    3814:	8c e3       	ldi	r24, 0x3C	; 60
    3816:	4f d9       	rcall	.-3426   	; 0x2ab6 <task_twi2_lcd_print_format_uint32>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
    3818:	1f c0       	rjmp	.+62     	; 0x3858 <task_twi2_lcd+0x3fe>
    381a:	20 31       	cpi	r18, 0x10	; 16
    381c:	e9 f4       	brne	.+58     	; 0x3858 <task_twi2_lcd+0x3fe>
    381e:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <twi2_waitUntilReady>
		twi2_m_data[0] = 1;
    3822:	eb e0       	ldi	r30, 0x0B	; 11
    3824:	f0 e2       	ldi	r31, 0x20	; 32
    3826:	84 e8       	ldi	r24, 0x84	; 132
		twi2_m_data[1] = 128;
    3828:	81 83       	std	Z+1, r24	; 0x01
    382a:	a3 e6       	ldi	r26, 0x63	; 99
    382c:	b8 e2       	ldi	r27, 0x28	; 40
		twi2_packet.length = 2;
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	8c 93       	st	X, r24
    3832:	80 e8       	ldi	r24, 0x80	; 128
    3834:	11 96       	adiw	r26, 0x01	; 1
    3836:	8c 93       	st	X, r24
    3838:	82 e0       	ldi	r24, 0x02	; 2
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	80 87       	std	Z+8, r24	; 0x08
    383e:	91 87       	std	Z+9, r25	; 0x09
    3840:	40 e0       	ldi	r20, 0x00	; 0
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
    3842:	bf 01       	movw	r22, r30
    3844:	80 e8       	ldi	r24, 0x80	; 128
    3846:	94 e0       	ldi	r25, 0x04	; 4
    3848:	0e 94 79 28 	call	0x50f2	; 0x50f2 <twi_master_transfer>
    384c:	69 e8       	ldi	r22, 0x89	; 137
	}
}
    384e:	73 e1       	ldi	r23, 0x13	; 19
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__portable_avr_delay_cycles>
    3858:	27 96       	adiw	r28, 0x07	; 7
    385a:	cd bf       	out	0x3d, r28	; 61
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	df 91       	pop	r29
    3860:	cf 91       	pop	r28
    3862:	1f 91       	pop	r17
    3864:	0f 91       	pop	r16
    3866:	ff 90       	pop	r15
    3868:	ef 90       	pop	r14
    386a:	df 90       	pop	r13
    386c:	cf 90       	pop	r12
    386e:	bf 90       	pop	r11
    3870:	af 90       	pop	r10
    3872:	9f 90       	pop	r9
    3874:	8f 90       	pop	r8
    3876:	7f 90       	pop	r7
    3878:	6f 90       	pop	r6
    387a:	5f 90       	pop	r5
    387c:	4f 90       	pop	r4
    387e:	3f 90       	pop	r3
    3880:	2f 90       	pop	r2
    3882:	08 95       	ret

00003884 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    3884:	08 95       	ret

00003886 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    3886:	cf 93       	push	r28
    3888:	df 93       	push	r29
    388a:	1f 92       	push	r1
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3890:	2f b7       	in	r18, 0x3f	; 63
    3892:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    3894:	f8 94       	cli
	return flags;
    3896:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    3898:	28 2f       	mov	r18, r24
    389a:	39 2f       	mov	r19, r25
    389c:	21 15       	cp	r18, r1
    389e:	82 e0       	ldi	r24, 0x02	; 2
    38a0:	38 07       	cpc	r19, r24
    38a2:	29 f4       	brne	.+10     	; 0x38ae <adc_set_callback+0x28>
		adca_callback = callback;
    38a4:	60 93 49 2a 	sts	0x2A49, r22	; 0x802a49 <adca_callback>
    38a8:	70 93 4a 2a 	sts	0x2A4A, r23	; 0x802a4a <adca_callback+0x1>
    38ac:	07 c0       	rjmp	.+14     	; 0x38bc <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    38ae:	20 34       	cpi	r18, 0x40	; 64
    38b0:	32 40       	sbci	r19, 0x02	; 2
    38b2:	21 f4       	brne	.+8      	; 0x38bc <adc_set_callback+0x36>
		adcb_callback = callback;
    38b4:	60 93 47 2a 	sts	0x2A47, r22	; 0x802a47 <adcb_callback>
    38b8:	70 93 48 2a 	sts	0x2A48, r23	; 0x802a48 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    38bc:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    38be:	0f 90       	pop	r0
    38c0:	df 91       	pop	r29
    38c2:	cf 91       	pop	r28
    38c4:	08 95       	ret

000038c6 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    38c6:	81 15       	cp	r24, r1
    38c8:	22 e0       	ldi	r18, 0x02	; 2
    38ca:	92 07       	cpc	r25, r18
    38cc:	69 f4       	brne	.+26     	; 0x38e8 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    38ce:	80 91 a5 24 	lds	r24, 0x24A5	; 0x8024a5 <adca_enable_count>
    38d2:	91 e0       	ldi	r25, 0x01	; 1
    38d4:	98 0f       	add	r25, r24
    38d6:	90 93 a5 24 	sts	0x24A5, r25	; 0x8024a5 <adca_enable_count>
    38da:	81 11       	cpse	r24, r1
    38dc:	14 c0       	rjmp	.+40     	; 0x3906 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    38de:	62 e0       	ldi	r22, 0x02	; 2
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	0c 94 cc 3a 	jmp	0x7598	; 0x7598 <sysclk_enable_module>
    38e6:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    38e8:	80 34       	cpi	r24, 0x40	; 64
    38ea:	92 40       	sbci	r25, 0x02	; 2
    38ec:	61 f4       	brne	.+24     	; 0x3906 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    38ee:	80 91 a4 24 	lds	r24, 0x24A4	; 0x8024a4 <adcb_enable_count>
    38f2:	91 e0       	ldi	r25, 0x01	; 1
    38f4:	98 0f       	add	r25, r24
    38f6:	90 93 a4 24 	sts	0x24A4, r25	; 0x8024a4 <adcb_enable_count>
    38fa:	81 11       	cpse	r24, r1
    38fc:	04 c0       	rjmp	.+8      	; 0x3906 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    38fe:	62 e0       	ldi	r22, 0x02	; 2
    3900:	82 e0       	ldi	r24, 0x02	; 2
    3902:	0c 94 cc 3a 	jmp	0x7598	; 0x7598 <sysclk_enable_module>
    3906:	08 95       	ret

00003908 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    3908:	81 15       	cp	r24, r1
    390a:	22 e0       	ldi	r18, 0x02	; 2
    390c:	92 07       	cpc	r25, r18
    390e:	61 f4       	brne	.+24     	; 0x3928 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    3910:	80 91 a5 24 	lds	r24, 0x24A5	; 0x8024a5 <adca_enable_count>
    3914:	81 50       	subi	r24, 0x01	; 1
    3916:	80 93 a5 24 	sts	0x24A5, r24	; 0x8024a5 <adca_enable_count>
    391a:	81 11       	cpse	r24, r1
    391c:	13 c0       	rjmp	.+38     	; 0x3944 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    391e:	62 e0       	ldi	r22, 0x02	; 2
    3920:	81 e0       	ldi	r24, 0x01	; 1
    3922:	0c 94 e2 3a 	jmp	0x75c4	; 0x75c4 <sysclk_disable_module>
    3926:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    3928:	80 34       	cpi	r24, 0x40	; 64
    392a:	92 40       	sbci	r25, 0x02	; 2
    392c:	59 f4       	brne	.+22     	; 0x3944 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    392e:	80 91 a4 24 	lds	r24, 0x24A4	; 0x8024a4 <adcb_enable_count>
    3932:	81 50       	subi	r24, 0x01	; 1
    3934:	80 93 a4 24 	sts	0x24A4, r24	; 0x8024a4 <adcb_enable_count>
    3938:	81 11       	cpse	r24, r1
    393a:	04 c0       	rjmp	.+8      	; 0x3944 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    393c:	62 e0       	ldi	r22, 0x02	; 2
    393e:	82 e0       	ldi	r24, 0x02	; 2
    3940:	0c 94 e2 3a 	jmp	0x75c4	; 0x75c4 <sysclk_disable_module>
    3944:	08 95       	ret

00003946 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    3946:	ef 92       	push	r14
    3948:	ff 92       	push	r15
    394a:	1f 93       	push	r17
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	1f 92       	push	r1
    3952:	1f 92       	push	r1
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    395a:	8f b7       	in	r24, 0x3f	; 63
    395c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    395e:	f8 94       	cli
	return flags;
    3960:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    3962:	c7 01       	movw	r24, r14
    3964:	b0 df       	rcall	.-160    	; 0x38c6 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    3966:	f7 01       	movw	r30, r14
    3968:	80 81       	ld	r24, Z
    396a:	81 60       	ori	r24, 0x01	; 1
    396c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    396e:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    3970:	80 91 5c 2a 	lds	r24, 0x2A5C	; 0x802a5c <sleepmgr_locks+0x1>
    3974:	8f 3f       	cpi	r24, 0xFF	; 255
    3976:	09 f4       	brne	.+2      	; 0x397a <adc_enable+0x34>
    3978:	ff cf       	rjmp	.-2      	; 0x3978 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    397a:	8f b7       	in	r24, 0x3f	; 63
    397c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    397e:	f8 94       	cli
	return flags;
    3980:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    3982:	eb e5       	ldi	r30, 0x5B	; 91
    3984:	fa e2       	ldi	r31, 0x2A	; 42
    3986:	81 81       	ldd	r24, Z+1	; 0x01
    3988:	8f 5f       	subi	r24, 0xFF	; 255
    398a:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    398c:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	df 91       	pop	r29
    3994:	cf 91       	pop	r28
    3996:	1f 91       	pop	r17
    3998:	ff 90       	pop	r15
    399a:	ef 90       	pop	r14
    399c:	08 95       	ret

0000399e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    399e:	1f 92       	push	r1
    39a0:	0f 92       	push	r0
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	0f 92       	push	r0
    39a6:	11 24       	eor	r1, r1
    39a8:	0b b6       	in	r0, 0x3b	; 59
    39aa:	0f 92       	push	r0
    39ac:	2f 93       	push	r18
    39ae:	3f 93       	push	r19
    39b0:	4f 93       	push	r20
    39b2:	5f 93       	push	r21
    39b4:	6f 93       	push	r22
    39b6:	7f 93       	push	r23
    39b8:	8f 93       	push	r24
    39ba:	9f 93       	push	r25
    39bc:	af 93       	push	r26
    39be:	bf 93       	push	r27
    39c0:	ef 93       	push	r30
    39c2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    39c4:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    39c8:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    39cc:	e0 91 49 2a 	lds	r30, 0x2A49	; 0x802a49 <adca_callback>
    39d0:	f0 91 4a 2a 	lds	r31, 0x2A4A	; 0x802a4a <adca_callback+0x1>
    39d4:	61 e0       	ldi	r22, 0x01	; 1
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	92 e0       	ldi	r25, 0x02	; 2
    39da:	19 95       	eicall
}
    39dc:	ff 91       	pop	r31
    39de:	ef 91       	pop	r30
    39e0:	bf 91       	pop	r27
    39e2:	af 91       	pop	r26
    39e4:	9f 91       	pop	r25
    39e6:	8f 91       	pop	r24
    39e8:	7f 91       	pop	r23
    39ea:	6f 91       	pop	r22
    39ec:	5f 91       	pop	r21
    39ee:	4f 91       	pop	r20
    39f0:	3f 91       	pop	r19
    39f2:	2f 91       	pop	r18
    39f4:	0f 90       	pop	r0
    39f6:	0b be       	out	0x3b, r0	; 59
    39f8:	0f 90       	pop	r0
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	0f 90       	pop	r0
    39fe:	1f 90       	pop	r1
    3a00:	18 95       	reti

00003a02 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    3a02:	1f 92       	push	r1
    3a04:	0f 92       	push	r0
    3a06:	0f b6       	in	r0, 0x3f	; 63
    3a08:	0f 92       	push	r0
    3a0a:	11 24       	eor	r1, r1
    3a0c:	0b b6       	in	r0, 0x3b	; 59
    3a0e:	0f 92       	push	r0
    3a10:	2f 93       	push	r18
    3a12:	3f 93       	push	r19
    3a14:	4f 93       	push	r20
    3a16:	5f 93       	push	r21
    3a18:	6f 93       	push	r22
    3a1a:	7f 93       	push	r23
    3a1c:	8f 93       	push	r24
    3a1e:	9f 93       	push	r25
    3a20:	af 93       	push	r26
    3a22:	bf 93       	push	r27
    3a24:	ef 93       	push	r30
    3a26:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    3a28:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    3a2c:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    3a30:	e0 91 49 2a 	lds	r30, 0x2A49	; 0x802a49 <adca_callback>
    3a34:	f0 91 4a 2a 	lds	r31, 0x2A4A	; 0x802a4a <adca_callback+0x1>
    3a38:	62 e0       	ldi	r22, 0x02	; 2
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	92 e0       	ldi	r25, 0x02	; 2
    3a3e:	19 95       	eicall
}
    3a40:	ff 91       	pop	r31
    3a42:	ef 91       	pop	r30
    3a44:	bf 91       	pop	r27
    3a46:	af 91       	pop	r26
    3a48:	9f 91       	pop	r25
    3a4a:	8f 91       	pop	r24
    3a4c:	7f 91       	pop	r23
    3a4e:	6f 91       	pop	r22
    3a50:	5f 91       	pop	r21
    3a52:	4f 91       	pop	r20
    3a54:	3f 91       	pop	r19
    3a56:	2f 91       	pop	r18
    3a58:	0f 90       	pop	r0
    3a5a:	0b be       	out	0x3b, r0	; 59
    3a5c:	0f 90       	pop	r0
    3a5e:	0f be       	out	0x3f, r0	; 63
    3a60:	0f 90       	pop	r0
    3a62:	1f 90       	pop	r1
    3a64:	18 95       	reti

00003a66 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    3a66:	1f 92       	push	r1
    3a68:	0f 92       	push	r0
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	0f 92       	push	r0
    3a6e:	11 24       	eor	r1, r1
    3a70:	0b b6       	in	r0, 0x3b	; 59
    3a72:	0f 92       	push	r0
    3a74:	2f 93       	push	r18
    3a76:	3f 93       	push	r19
    3a78:	4f 93       	push	r20
    3a7a:	5f 93       	push	r21
    3a7c:	6f 93       	push	r22
    3a7e:	7f 93       	push	r23
    3a80:	8f 93       	push	r24
    3a82:	9f 93       	push	r25
    3a84:	af 93       	push	r26
    3a86:	bf 93       	push	r27
    3a88:	ef 93       	push	r30
    3a8a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    3a8c:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    3a90:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    3a94:	e0 91 49 2a 	lds	r30, 0x2A49	; 0x802a49 <adca_callback>
    3a98:	f0 91 4a 2a 	lds	r31, 0x2A4A	; 0x802a4a <adca_callback+0x1>
    3a9c:	64 e0       	ldi	r22, 0x04	; 4
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	92 e0       	ldi	r25, 0x02	; 2
    3aa2:	19 95       	eicall
}
    3aa4:	ff 91       	pop	r31
    3aa6:	ef 91       	pop	r30
    3aa8:	bf 91       	pop	r27
    3aaa:	af 91       	pop	r26
    3aac:	9f 91       	pop	r25
    3aae:	8f 91       	pop	r24
    3ab0:	7f 91       	pop	r23
    3ab2:	6f 91       	pop	r22
    3ab4:	5f 91       	pop	r21
    3ab6:	4f 91       	pop	r20
    3ab8:	3f 91       	pop	r19
    3aba:	2f 91       	pop	r18
    3abc:	0f 90       	pop	r0
    3abe:	0b be       	out	0x3b, r0	; 59
    3ac0:	0f 90       	pop	r0
    3ac2:	0f be       	out	0x3f, r0	; 63
    3ac4:	0f 90       	pop	r0
    3ac6:	1f 90       	pop	r1
    3ac8:	18 95       	reti

00003aca <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    3aca:	1f 92       	push	r1
    3acc:	0f 92       	push	r0
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	0f 92       	push	r0
    3ad2:	11 24       	eor	r1, r1
    3ad4:	0b b6       	in	r0, 0x3b	; 59
    3ad6:	0f 92       	push	r0
    3ad8:	2f 93       	push	r18
    3ada:	3f 93       	push	r19
    3adc:	4f 93       	push	r20
    3ade:	5f 93       	push	r21
    3ae0:	6f 93       	push	r22
    3ae2:	7f 93       	push	r23
    3ae4:	8f 93       	push	r24
    3ae6:	9f 93       	push	r25
    3ae8:	af 93       	push	r26
    3aea:	bf 93       	push	r27
    3aec:	ef 93       	push	r30
    3aee:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    3af0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    3af4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    3af8:	e0 91 49 2a 	lds	r30, 0x2A49	; 0x802a49 <adca_callback>
    3afc:	f0 91 4a 2a 	lds	r31, 0x2A4A	; 0x802a4a <adca_callback+0x1>
    3b00:	68 e0       	ldi	r22, 0x08	; 8
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	92 e0       	ldi	r25, 0x02	; 2
    3b06:	19 95       	eicall
}
    3b08:	ff 91       	pop	r31
    3b0a:	ef 91       	pop	r30
    3b0c:	bf 91       	pop	r27
    3b0e:	af 91       	pop	r26
    3b10:	9f 91       	pop	r25
    3b12:	8f 91       	pop	r24
    3b14:	7f 91       	pop	r23
    3b16:	6f 91       	pop	r22
    3b18:	5f 91       	pop	r21
    3b1a:	4f 91       	pop	r20
    3b1c:	3f 91       	pop	r19
    3b1e:	2f 91       	pop	r18
    3b20:	0f 90       	pop	r0
    3b22:	0b be       	out	0x3b, r0	; 59
    3b24:	0f 90       	pop	r0
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	0f 90       	pop	r0
    3b2a:	1f 90       	pop	r1
    3b2c:	18 95       	reti

00003b2e <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    3b2e:	1f 92       	push	r1
    3b30:	0f 92       	push	r0
    3b32:	0f b6       	in	r0, 0x3f	; 63
    3b34:	0f 92       	push	r0
    3b36:	11 24       	eor	r1, r1
    3b38:	0b b6       	in	r0, 0x3b	; 59
    3b3a:	0f 92       	push	r0
    3b3c:	2f 93       	push	r18
    3b3e:	3f 93       	push	r19
    3b40:	4f 93       	push	r20
    3b42:	5f 93       	push	r21
    3b44:	6f 93       	push	r22
    3b46:	7f 93       	push	r23
    3b48:	8f 93       	push	r24
    3b4a:	9f 93       	push	r25
    3b4c:	af 93       	push	r26
    3b4e:	bf 93       	push	r27
    3b50:	ef 93       	push	r30
    3b52:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    3b54:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    3b58:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    3b5c:	e0 91 47 2a 	lds	r30, 0x2A47	; 0x802a47 <adcb_callback>
    3b60:	f0 91 48 2a 	lds	r31, 0x2A48	; 0x802a48 <adcb_callback+0x1>
    3b64:	61 e0       	ldi	r22, 0x01	; 1
    3b66:	80 e4       	ldi	r24, 0x40	; 64
    3b68:	92 e0       	ldi	r25, 0x02	; 2
    3b6a:	19 95       	eicall
}
    3b6c:	ff 91       	pop	r31
    3b6e:	ef 91       	pop	r30
    3b70:	bf 91       	pop	r27
    3b72:	af 91       	pop	r26
    3b74:	9f 91       	pop	r25
    3b76:	8f 91       	pop	r24
    3b78:	7f 91       	pop	r23
    3b7a:	6f 91       	pop	r22
    3b7c:	5f 91       	pop	r21
    3b7e:	4f 91       	pop	r20
    3b80:	3f 91       	pop	r19
    3b82:	2f 91       	pop	r18
    3b84:	0f 90       	pop	r0
    3b86:	0b be       	out	0x3b, r0	; 59
    3b88:	0f 90       	pop	r0
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	0f 90       	pop	r0
    3b8e:	1f 90       	pop	r1
    3b90:	18 95       	reti

00003b92 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    3b92:	1f 92       	push	r1
    3b94:	0f 92       	push	r0
    3b96:	0f b6       	in	r0, 0x3f	; 63
    3b98:	0f 92       	push	r0
    3b9a:	11 24       	eor	r1, r1
    3b9c:	0b b6       	in	r0, 0x3b	; 59
    3b9e:	0f 92       	push	r0
    3ba0:	2f 93       	push	r18
    3ba2:	3f 93       	push	r19
    3ba4:	4f 93       	push	r20
    3ba6:	5f 93       	push	r21
    3ba8:	6f 93       	push	r22
    3baa:	7f 93       	push	r23
    3bac:	8f 93       	push	r24
    3bae:	9f 93       	push	r25
    3bb0:	af 93       	push	r26
    3bb2:	bf 93       	push	r27
    3bb4:	ef 93       	push	r30
    3bb6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    3bb8:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    3bbc:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    3bc0:	e0 91 47 2a 	lds	r30, 0x2A47	; 0x802a47 <adcb_callback>
    3bc4:	f0 91 48 2a 	lds	r31, 0x2A48	; 0x802a48 <adcb_callback+0x1>
    3bc8:	62 e0       	ldi	r22, 0x02	; 2
    3bca:	80 e4       	ldi	r24, 0x40	; 64
    3bcc:	92 e0       	ldi	r25, 0x02	; 2
    3bce:	19 95       	eicall
}
    3bd0:	ff 91       	pop	r31
    3bd2:	ef 91       	pop	r30
    3bd4:	bf 91       	pop	r27
    3bd6:	af 91       	pop	r26
    3bd8:	9f 91       	pop	r25
    3bda:	8f 91       	pop	r24
    3bdc:	7f 91       	pop	r23
    3bde:	6f 91       	pop	r22
    3be0:	5f 91       	pop	r21
    3be2:	4f 91       	pop	r20
    3be4:	3f 91       	pop	r19
    3be6:	2f 91       	pop	r18
    3be8:	0f 90       	pop	r0
    3bea:	0b be       	out	0x3b, r0	; 59
    3bec:	0f 90       	pop	r0
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	0f 90       	pop	r0
    3bf2:	1f 90       	pop	r1
    3bf4:	18 95       	reti

00003bf6 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    3bf6:	1f 92       	push	r1
    3bf8:	0f 92       	push	r0
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	0f 92       	push	r0
    3bfe:	11 24       	eor	r1, r1
    3c00:	0b b6       	in	r0, 0x3b	; 59
    3c02:	0f 92       	push	r0
    3c04:	2f 93       	push	r18
    3c06:	3f 93       	push	r19
    3c08:	4f 93       	push	r20
    3c0a:	5f 93       	push	r21
    3c0c:	6f 93       	push	r22
    3c0e:	7f 93       	push	r23
    3c10:	8f 93       	push	r24
    3c12:	9f 93       	push	r25
    3c14:	af 93       	push	r26
    3c16:	bf 93       	push	r27
    3c18:	ef 93       	push	r30
    3c1a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    3c1c:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    3c20:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    3c24:	e0 91 47 2a 	lds	r30, 0x2A47	; 0x802a47 <adcb_callback>
    3c28:	f0 91 48 2a 	lds	r31, 0x2A48	; 0x802a48 <adcb_callback+0x1>
    3c2c:	64 e0       	ldi	r22, 0x04	; 4
    3c2e:	80 e4       	ldi	r24, 0x40	; 64
    3c30:	92 e0       	ldi	r25, 0x02	; 2
    3c32:	19 95       	eicall
}
    3c34:	ff 91       	pop	r31
    3c36:	ef 91       	pop	r30
    3c38:	bf 91       	pop	r27
    3c3a:	af 91       	pop	r26
    3c3c:	9f 91       	pop	r25
    3c3e:	8f 91       	pop	r24
    3c40:	7f 91       	pop	r23
    3c42:	6f 91       	pop	r22
    3c44:	5f 91       	pop	r21
    3c46:	4f 91       	pop	r20
    3c48:	3f 91       	pop	r19
    3c4a:	2f 91       	pop	r18
    3c4c:	0f 90       	pop	r0
    3c4e:	0b be       	out	0x3b, r0	; 59
    3c50:	0f 90       	pop	r0
    3c52:	0f be       	out	0x3f, r0	; 63
    3c54:	0f 90       	pop	r0
    3c56:	1f 90       	pop	r1
    3c58:	18 95       	reti

00003c5a <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    3c5a:	1f 92       	push	r1
    3c5c:	0f 92       	push	r0
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	0f 92       	push	r0
    3c62:	11 24       	eor	r1, r1
    3c64:	0b b6       	in	r0, 0x3b	; 59
    3c66:	0f 92       	push	r0
    3c68:	2f 93       	push	r18
    3c6a:	3f 93       	push	r19
    3c6c:	4f 93       	push	r20
    3c6e:	5f 93       	push	r21
    3c70:	6f 93       	push	r22
    3c72:	7f 93       	push	r23
    3c74:	8f 93       	push	r24
    3c76:	9f 93       	push	r25
    3c78:	af 93       	push	r26
    3c7a:	bf 93       	push	r27
    3c7c:	ef 93       	push	r30
    3c7e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    3c80:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    3c84:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    3c88:	e0 91 47 2a 	lds	r30, 0x2A47	; 0x802a47 <adcb_callback>
    3c8c:	f0 91 48 2a 	lds	r31, 0x2A48	; 0x802a48 <adcb_callback+0x1>
    3c90:	68 e0       	ldi	r22, 0x08	; 8
    3c92:	80 e4       	ldi	r24, 0x40	; 64
    3c94:	92 e0       	ldi	r25, 0x02	; 2
    3c96:	19 95       	eicall
}
    3c98:	ff 91       	pop	r31
    3c9a:	ef 91       	pop	r30
    3c9c:	bf 91       	pop	r27
    3c9e:	af 91       	pop	r26
    3ca0:	9f 91       	pop	r25
    3ca2:	8f 91       	pop	r24
    3ca4:	7f 91       	pop	r23
    3ca6:	6f 91       	pop	r22
    3ca8:	5f 91       	pop	r21
    3caa:	4f 91       	pop	r20
    3cac:	3f 91       	pop	r19
    3cae:	2f 91       	pop	r18
    3cb0:	0f 90       	pop	r0
    3cb2:	0b be       	out	0x3b, r0	; 59
    3cb4:	0f 90       	pop	r0
    3cb6:	0f be       	out	0x3f, r0	; 63
    3cb8:	0f 90       	pop	r0
    3cba:	1f 90       	pop	r1
    3cbc:	18 95       	reti

00003cbe <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    3cbe:	bf 92       	push	r11
    3cc0:	cf 92       	push	r12
    3cc2:	df 92       	push	r13
    3cc4:	ef 92       	push	r14
    3cc6:	ff 92       	push	r15
    3cc8:	0f 93       	push	r16
    3cca:	1f 93       	push	r17
    3ccc:	cf 93       	push	r28
    3cce:	df 93       	push	r29
    3cd0:	1f 92       	push	r1
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
    3cd6:	8c 01       	movw	r16, r24
    3cd8:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    3cda:	81 15       	cp	r24, r1
    3cdc:	22 e0       	ldi	r18, 0x02	; 2
    3cde:	92 07       	cpc	r25, r18
    3ce0:	81 f4       	brne	.+32     	; 0x3d02 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    3ce2:	61 e2       	ldi	r22, 0x21	; 33
    3ce4:	70 e0       	ldi	r23, 0x00	; 0
    3ce6:	82 e0       	ldi	r24, 0x02	; 2
    3ce8:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    3cec:	c8 2e       	mov	r12, r24
    3cee:	d1 2c       	mov	r13, r1
    3cf0:	60 e2       	ldi	r22, 0x20	; 32
    3cf2:	70 e0       	ldi	r23, 0x00	; 0
    3cf4:	82 e0       	ldi	r24, 0x02	; 2
    3cf6:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    3cfa:	dc 2c       	mov	r13, r12
    3cfc:	cc 24       	eor	r12, r12
    3cfe:	c8 2a       	or	r12, r24
    3d00:	12 c0       	rjmp	.+36     	; 0x3d26 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    3d02:	80 34       	cpi	r24, 0x40	; 64
    3d04:	92 40       	sbci	r25, 0x02	; 2
    3d06:	d1 f5       	brne	.+116    	; 0x3d7c <adc_write_configuration+0xbe>
    3d08:	65 e2       	ldi	r22, 0x25	; 37
    3d0a:	70 e0       	ldi	r23, 0x00	; 0
    3d0c:	82 e0       	ldi	r24, 0x02	; 2
    3d0e:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    3d12:	c8 2e       	mov	r12, r24
    3d14:	d1 2c       	mov	r13, r1
    3d16:	64 e2       	ldi	r22, 0x24	; 36
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	82 e0       	ldi	r24, 0x02	; 2
    3d1c:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    3d20:	dc 2c       	mov	r13, r12
    3d22:	cc 24       	eor	r12, r12
    3d24:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3d26:	8f b7       	in	r24, 0x3f	; 63
    3d28:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3d2a:	f8 94       	cli
	return flags;
    3d2c:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    3d2e:	c8 01       	movw	r24, r16
    3d30:	ca dd       	rcall	.-1132   	; 0x38c6 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    3d32:	f8 01       	movw	r30, r16
    3d34:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    3d36:	92 e0       	ldi	r25, 0x02	; 2
    3d38:	90 83       	st	Z, r25
	adc->CAL = cal;
    3d3a:	c4 86       	std	Z+12, r12	; 0x0c
    3d3c:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    3d3e:	f7 01       	movw	r30, r14
    3d40:	25 81       	ldd	r18, Z+5	; 0x05
    3d42:	36 81       	ldd	r19, Z+6	; 0x06
    3d44:	f8 01       	movw	r30, r16
    3d46:	20 8f       	std	Z+24, r18	; 0x18
    3d48:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    3d4a:	f7 01       	movw	r30, r14
    3d4c:	92 81       	ldd	r25, Z+2	; 0x02
    3d4e:	f8 01       	movw	r30, r16
    3d50:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    3d52:	f7 01       	movw	r30, r14
    3d54:	94 81       	ldd	r25, Z+4	; 0x04
    3d56:	f8 01       	movw	r30, r16
    3d58:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    3d5a:	f7 01       	movw	r30, r14
    3d5c:	93 81       	ldd	r25, Z+3	; 0x03
    3d5e:	f8 01       	movw	r30, r16
    3d60:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    3d62:	f7 01       	movw	r30, r14
    3d64:	91 81       	ldd	r25, Z+1	; 0x01
    3d66:	f8 01       	movw	r30, r16
    3d68:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    3d6a:	81 70       	andi	r24, 0x01	; 1
    3d6c:	f7 01       	movw	r30, r14
    3d6e:	90 81       	ld	r25, Z
    3d70:	89 2b       	or	r24, r25
    3d72:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    3d74:	80 83       	st	Z, r24
    3d76:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3d78:	c7 dd       	rcall	.-1138   	; 0x3908 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    3d7a:	bf be       	out	0x3f, r11	; 63
    3d7c:	0f 90       	pop	r0
    3d7e:	df 91       	pop	r29
    3d80:	cf 91       	pop	r28
    3d82:	1f 91       	pop	r17
    3d84:	0f 91       	pop	r16
    3d86:	ff 90       	pop	r15
    3d88:	ef 90       	pop	r14
    3d8a:	df 90       	pop	r13
    3d8c:	cf 90       	pop	r12
    3d8e:	bf 90       	pop	r11
    3d90:	08 95       	ret

00003d92 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    3d92:	df 92       	push	r13
    3d94:	ef 92       	push	r14
    3d96:	ff 92       	push	r15
    3d98:	0f 93       	push	r16
    3d9a:	1f 93       	push	r17
    3d9c:	cf 93       	push	r28
    3d9e:	df 93       	push	r29
    3da0:	1f 92       	push	r1
    3da2:	cd b7       	in	r28, 0x3d	; 61
    3da4:	de b7       	in	r29, 0x3e	; 62
    3da6:	8c 01       	movw	r16, r24
    3da8:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3daa:	8f b7       	in	r24, 0x3f	; 63
    3dac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3dae:	f8 94       	cli
	return flags;
    3db0:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    3db2:	c8 01       	movw	r24, r16
    3db4:	88 dd       	rcall	.-1264   	; 0x38c6 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    3db6:	f8 01       	movw	r30, r16
    3db8:	80 81       	ld	r24, Z
    3dba:	80 7c       	andi	r24, 0xC0	; 192
    3dbc:	f7 01       	movw	r30, r14
    3dbe:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    3dc0:	f8 01       	movw	r30, r16
    3dc2:	80 8d       	ldd	r24, Z+24	; 0x18
    3dc4:	91 8d       	ldd	r25, Z+25	; 0x19
    3dc6:	f7 01       	movw	r30, r14
    3dc8:	85 83       	std	Z+5, r24	; 0x05
    3dca:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    3dcc:	f8 01       	movw	r30, r16
    3dce:	82 81       	ldd	r24, Z+2	; 0x02
    3dd0:	f7 01       	movw	r30, r14
    3dd2:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    3dd4:	f8 01       	movw	r30, r16
    3dd6:	84 81       	ldd	r24, Z+4	; 0x04
    3dd8:	f7 01       	movw	r30, r14
    3dda:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    3ddc:	f8 01       	movw	r30, r16
    3dde:	83 81       	ldd	r24, Z+3	; 0x03
    3de0:	f7 01       	movw	r30, r14
    3de2:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    3de4:	f8 01       	movw	r30, r16
    3de6:	81 81       	ldd	r24, Z+1	; 0x01
    3de8:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    3dea:	81 83       	std	Z+1, r24	; 0x01
    3dec:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3dee:	8c dd       	rcall	.-1256   	; 0x3908 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    3df0:	df be       	out	0x3f, r13	; 63
    3df2:	0f 90       	pop	r0
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	1f 91       	pop	r17
    3dfa:	0f 91       	pop	r16
    3dfc:	ff 90       	pop	r15
    3dfe:	ef 90       	pop	r14
    3e00:	df 90       	pop	r13
    3e02:	08 95       	ret

00003e04 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    3e04:	af 92       	push	r10
    3e06:	bf 92       	push	r11
    3e08:	cf 92       	push	r12
    3e0a:	df 92       	push	r13
    3e0c:	ef 92       	push	r14
    3e0e:	ff 92       	push	r15
    3e10:	0f 93       	push	r16
    3e12:	1f 93       	push	r17
    3e14:	cf 93       	push	r28
    3e16:	df 93       	push	r29
    3e18:	1f 92       	push	r1
    3e1a:	cd b7       	in	r28, 0x3d	; 61
    3e1c:	de b7       	in	r29, 0x3e	; 62
    3e1e:	6c 01       	movw	r12, r24
    3e20:	b6 2e       	mov	r11, r22
    3e22:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3e24:	86 2f       	mov	r24, r22
    3e26:	83 70       	andi	r24, 0x03	; 3
    3e28:	29 f4       	brne	.+10     	; 0x3e34 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    3e2a:	96 2f       	mov	r25, r22
    3e2c:	96 95       	lsr	r25
    3e2e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    3e30:	82 e0       	ldi	r24, 0x02	; 2
    3e32:	02 c0       	rjmp	.+4      	; 0x3e38 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3e34:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    3e36:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    3e38:	90 ff       	sbrs	r25, 0
		index++;
    3e3a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    3e3c:	86 01       	movw	r16, r12
    3e3e:	00 5e       	subi	r16, 0xE0	; 224
    3e40:	1f 4f       	sbci	r17, 0xFF	; 255
    3e42:	98 e0       	ldi	r25, 0x08	; 8
    3e44:	89 9f       	mul	r24, r25
    3e46:	00 0d       	add	r16, r0
    3e48:	11 1d       	adc	r17, r1
    3e4a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3e4c:	8f b7       	in	r24, 0x3f	; 63
    3e4e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3e50:	f8 94       	cli
	return flags;
    3e52:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    3e54:	c6 01       	movw	r24, r12
    3e56:	37 dd       	rcall	.-1426   	; 0x38c6 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    3e58:	f7 01       	movw	r30, r14
    3e5a:	80 81       	ld	r24, Z
    3e5c:	f8 01       	movw	r30, r16
    3e5e:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    3e60:	f7 01       	movw	r30, r14
    3e62:	82 81       	ldd	r24, Z+2	; 0x02
    3e64:	f8 01       	movw	r30, r16
    3e66:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    3e68:	f7 01       	movw	r30, r14
    3e6a:	81 81       	ldd	r24, Z+1	; 0x01
    3e6c:	f8 01       	movw	r30, r16
    3e6e:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    3e70:	b0 fe       	sbrs	r11, 0
    3e72:	04 c0       	rjmp	.+8      	; 0x3e7c <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    3e74:	f7 01       	movw	r30, r14
    3e76:	83 81       	ldd	r24, Z+3	; 0x03
    3e78:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    3e7a:	86 83       	std	Z+6, r24	; 0x06
    3e7c:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3e7e:	44 dd       	rcall	.-1400   	; 0x3908 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    3e80:	af be       	out	0x3f, r10	; 63
    3e82:	0f 90       	pop	r0
    3e84:	df 91       	pop	r29
    3e86:	cf 91       	pop	r28
    3e88:	1f 91       	pop	r17
    3e8a:	0f 91       	pop	r16
    3e8c:	ff 90       	pop	r15
    3e8e:	ef 90       	pop	r14
    3e90:	df 90       	pop	r13
    3e92:	cf 90       	pop	r12
    3e94:	bf 90       	pop	r11
    3e96:	af 90       	pop	r10
    3e98:	08 95       	ret

00003e9a <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    3e9a:	af 92       	push	r10
    3e9c:	bf 92       	push	r11
    3e9e:	cf 92       	push	r12
    3ea0:	df 92       	push	r13
    3ea2:	ef 92       	push	r14
    3ea4:	ff 92       	push	r15
    3ea6:	0f 93       	push	r16
    3ea8:	1f 93       	push	r17
    3eaa:	cf 93       	push	r28
    3eac:	df 93       	push	r29
    3eae:	1f 92       	push	r1
    3eb0:	cd b7       	in	r28, 0x3d	; 61
    3eb2:	de b7       	in	r29, 0x3e	; 62
    3eb4:	6c 01       	movw	r12, r24
    3eb6:	b6 2e       	mov	r11, r22
    3eb8:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3eba:	86 2f       	mov	r24, r22
    3ebc:	83 70       	andi	r24, 0x03	; 3
    3ebe:	29 f4       	brne	.+10     	; 0x3eca <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    3ec0:	96 2f       	mov	r25, r22
    3ec2:	96 95       	lsr	r25
    3ec4:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    3ec6:	82 e0       	ldi	r24, 0x02	; 2
    3ec8:	02 c0       	rjmp	.+4      	; 0x3ece <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3eca:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    3ece:	90 ff       	sbrs	r25, 0
		index++;
    3ed0:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    3ed2:	86 01       	movw	r16, r12
    3ed4:	00 5e       	subi	r16, 0xE0	; 224
    3ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed8:	98 e0       	ldi	r25, 0x08	; 8
    3eda:	89 9f       	mul	r24, r25
    3edc:	00 0d       	add	r16, r0
    3ede:	11 1d       	adc	r17, r1
    3ee0:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3ee2:	8f b7       	in	r24, 0x3f	; 63
    3ee4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3ee6:	f8 94       	cli
	return flags;
    3ee8:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    3eea:	c6 01       	movw	r24, r12
    3eec:	ec dc       	rcall	.-1576   	; 0x38c6 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    3eee:	f8 01       	movw	r30, r16
    3ef0:	80 81       	ld	r24, Z
    3ef2:	f7 01       	movw	r30, r14
    3ef4:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    3ef6:	f8 01       	movw	r30, r16
    3ef8:	82 81       	ldd	r24, Z+2	; 0x02
    3efa:	f7 01       	movw	r30, r14
    3efc:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    3efe:	f8 01       	movw	r30, r16
    3f00:	81 81       	ldd	r24, Z+1	; 0x01
    3f02:	f7 01       	movw	r30, r14
    3f04:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    3f06:	b0 fe       	sbrs	r11, 0
    3f08:	04 c0       	rjmp	.+8      	; 0x3f12 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    3f0a:	f8 01       	movw	r30, r16
    3f0c:	86 81       	ldd	r24, Z+6	; 0x06
    3f0e:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    3f10:	83 83       	std	Z+3, r24	; 0x03
    3f12:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3f14:	f9 dc       	rcall	.-1550   	; 0x3908 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    3f16:	af be       	out	0x3f, r10	; 63
    3f18:	0f 90       	pop	r0
    3f1a:	df 91       	pop	r29
    3f1c:	cf 91       	pop	r28
    3f1e:	1f 91       	pop	r17
    3f20:	0f 91       	pop	r16
    3f22:	ff 90       	pop	r15
    3f24:	ef 90       	pop	r14
    3f26:	df 90       	pop	r13
    3f28:	cf 90       	pop	r12
    3f2a:	bf 90       	pop	r11
    3f2c:	af 90       	pop	r10
    3f2e:	08 95       	ret

00003f30 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    3f30:	80 32       	cpi	r24, 0x20	; 32
    3f32:	93 40       	sbci	r25, 0x03	; 3
    3f34:	61 f4       	brne	.+24     	; 0x3f4e <dac_enable_clock+0x1e>
    3f36:	80 91 a6 24 	lds	r24, 0x24A6	; 0x8024a6 <dacb_enable_count>
    3f3a:	91 e0       	ldi	r25, 0x01	; 1
    3f3c:	98 0f       	add	r25, r24
    3f3e:	90 93 a6 24 	sts	0x24A6, r25	; 0x8024a6 <dacb_enable_count>
    3f42:	81 11       	cpse	r24, r1
    3f44:	04 c0       	rjmp	.+8      	; 0x3f4e <dac_enable_clock+0x1e>
    3f46:	64 e0       	ldi	r22, 0x04	; 4
    3f48:	82 e0       	ldi	r24, 0x02	; 2
    3f4a:	0c 94 cc 3a 	jmp	0x7598	; 0x7598 <sysclk_enable_module>
    3f4e:	08 95       	ret

00003f50 <dac_disable_clock>:
    3f50:	80 32       	cpi	r24, 0x20	; 32
    3f52:	93 40       	sbci	r25, 0x03	; 3
    3f54:	59 f4       	brne	.+22     	; 0x3f6c <dac_disable_clock+0x1c>
    3f56:	80 91 a6 24 	lds	r24, 0x24A6	; 0x8024a6 <dacb_enable_count>
    3f5a:	81 50       	subi	r24, 0x01	; 1
    3f5c:	80 93 a6 24 	sts	0x24A6, r24	; 0x8024a6 <dacb_enable_count>
    3f60:	81 11       	cpse	r24, r1
    3f62:	04 c0       	rjmp	.+8      	; 0x3f6c <dac_disable_clock+0x1c>
    3f64:	64 e0       	ldi	r22, 0x04	; 4
    3f66:	82 e0       	ldi	r24, 0x02	; 2
    3f68:	0c 94 e2 3a 	jmp	0x75c4	; 0x75c4 <sysclk_disable_module>
    3f6c:	08 95       	ret

00003f6e <dac_enable>:
    3f6e:	ef 92       	push	r14
    3f70:	ff 92       	push	r15
    3f72:	1f 93       	push	r17
    3f74:	cf 93       	push	r28
    3f76:	df 93       	push	r29
    3f78:	1f 92       	push	r1
    3f7a:	1f 92       	push	r1
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
    3f80:	2f b7       	in	r18, 0x3f	; 63
    3f82:	29 83       	std	Y+1, r18	; 0x01
    3f84:	f8 94       	cli
    3f86:	19 81       	ldd	r17, Y+1	; 0x01
    3f88:	20 91 5c 2a 	lds	r18, 0x2A5C	; 0x802a5c <sleepmgr_locks+0x1>
    3f8c:	2f 3f       	cpi	r18, 0xFF	; 255
    3f8e:	09 f4       	brne	.+2      	; 0x3f92 <dac_enable+0x24>
    3f90:	ff cf       	rjmp	.-2      	; 0x3f90 <dac_enable+0x22>
    3f92:	7c 01       	movw	r14, r24
    3f94:	8f b7       	in	r24, 0x3f	; 63
    3f96:	8a 83       	std	Y+2, r24	; 0x02
    3f98:	f8 94       	cli
    3f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9c:	eb e5       	ldi	r30, 0x5B	; 91
    3f9e:	fa e2       	ldi	r31, 0x2A	; 42
    3fa0:	81 81       	ldd	r24, Z+1	; 0x01
    3fa2:	8f 5f       	subi	r24, 0xFF	; 255
    3fa4:	81 83       	std	Z+1, r24	; 0x01
    3fa6:	9f bf       	out	0x3f, r25	; 63
    3fa8:	c7 01       	movw	r24, r14
    3faa:	c2 df       	rcall	.-124    	; 0x3f30 <dac_enable_clock>
    3fac:	f7 01       	movw	r30, r14
    3fae:	80 81       	ld	r24, Z
    3fb0:	81 60       	ori	r24, 0x01	; 1
    3fb2:	80 83       	st	Z, r24
    3fb4:	1f bf       	out	0x3f, r17	; 63
    3fb6:	0f 90       	pop	r0
    3fb8:	0f 90       	pop	r0
    3fba:	df 91       	pop	r29
    3fbc:	cf 91       	pop	r28
    3fbe:	1f 91       	pop	r17
    3fc0:	ff 90       	pop	r15
    3fc2:	ef 90       	pop	r14
    3fc4:	08 95       	ret

00003fc6 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    3fc6:	9f 92       	push	r9
    3fc8:	af 92       	push	r10
    3fca:	bf 92       	push	r11
    3fcc:	cf 92       	push	r12
    3fce:	df 92       	push	r13
    3fd0:	ef 92       	push	r14
    3fd2:	ff 92       	push	r15
    3fd4:	0f 93       	push	r16
    3fd6:	1f 93       	push	r17
    3fd8:	cf 93       	push	r28
    3fda:	df 93       	push	r29
    3fdc:	1f 92       	push	r1
    3fde:	cd b7       	in	r28, 0x3d	; 61
    3fe0:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    3fe2:	80 32       	cpi	r24, 0x20	; 32
    3fe4:	23 e0       	ldi	r18, 0x03	; 3
    3fe6:	92 07       	cpc	r25, r18
    3fe8:	09 f0       	breq	.+2      	; 0x3fec <dac_write_configuration+0x26>
    3fea:	3c c0       	rjmp	.+120    	; 0x4064 <dac_write_configuration+0x9e>
    3fec:	7b 01       	movw	r14, r22
    3fee:	8c 01       	movw	r16, r24
    3ff0:	63 e3       	ldi	r22, 0x33	; 51
    3ff2:	70 e0       	ldi	r23, 0x00	; 0
    3ff4:	82 e0       	ldi	r24, 0x02	; 2
    3ff6:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
    3ffa:	98 2e       	mov	r9, r24
    3ffc:	62 e3       	ldi	r22, 0x32	; 50
    3ffe:	70 e0       	ldi	r23, 0x00	; 0
    4000:	82 e0       	ldi	r24, 0x02	; 2
    4002:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
    4006:	a8 2e       	mov	r10, r24
    4008:	67 e3       	ldi	r22, 0x37	; 55
    400a:	70 e0       	ldi	r23, 0x00	; 0
    400c:	82 e0       	ldi	r24, 0x02	; 2
    400e:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
    4012:	b8 2e       	mov	r11, r24
    4014:	66 e3       	ldi	r22, 0x36	; 54
    4016:	70 e0       	ldi	r23, 0x00	; 0
    4018:	82 e0       	ldi	r24, 0x02	; 2
    401a:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
    401e:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4020:	8f b7       	in	r24, 0x3f	; 63
    4022:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4024:	f8 94       	cli
	return flags;
    4026:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    4028:	c8 01       	movw	r24, r16
    402a:	82 df       	rcall	.-252    	; 0x3f30 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    402c:	f8 01       	movw	r30, r16
    402e:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    4030:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    4032:	f7 01       	movw	r30, r14
    4034:	91 81       	ldd	r25, Z+1	; 0x01
    4036:	f8 01       	movw	r30, r16
    4038:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    403a:	f7 01       	movw	r30, r14
    403c:	92 81       	ldd	r25, Z+2	; 0x02
    403e:	f8 01       	movw	r30, r16
    4040:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    4042:	f7 01       	movw	r30, r14
    4044:	93 81       	ldd	r25, Z+3	; 0x03
    4046:	f8 01       	movw	r30, r16
    4048:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    404a:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    404c:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    404e:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    4050:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    4052:	81 70       	andi	r24, 0x01	; 1
    4054:	f7 01       	movw	r30, r14
    4056:	90 81       	ld	r25, Z
    4058:	89 2b       	or	r24, r25
    405a:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    405c:	80 83       	st	Z, r24
    405e:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4060:	77 df       	rcall	.-274    	; 0x3f50 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    4062:	df be       	out	0x3f, r13	; 63
    4064:	0f 90       	pop	r0
    4066:	df 91       	pop	r29
    4068:	cf 91       	pop	r28
    406a:	1f 91       	pop	r17
    406c:	0f 91       	pop	r16
    406e:	ff 90       	pop	r15
    4070:	ef 90       	pop	r14
    4072:	df 90       	pop	r13
    4074:	cf 90       	pop	r12
    4076:	bf 90       	pop	r11
    4078:	af 90       	pop	r10
    407a:	9f 90       	pop	r9
    407c:	08 95       	ret

0000407e <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    407e:	df 92       	push	r13
    4080:	ef 92       	push	r14
    4082:	ff 92       	push	r15
    4084:	0f 93       	push	r16
    4086:	1f 93       	push	r17
    4088:	cf 93       	push	r28
    408a:	df 93       	push	r29
    408c:	1f 92       	push	r1
    408e:	cd b7       	in	r28, 0x3d	; 61
    4090:	de b7       	in	r29, 0x3e	; 62
    4092:	8c 01       	movw	r16, r24
    4094:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4096:	8f b7       	in	r24, 0x3f	; 63
    4098:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    409a:	f8 94       	cli
	return flags;
    409c:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    409e:	c8 01       	movw	r24, r16
    40a0:	47 df       	rcall	.-370    	; 0x3f30 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    40a2:	f8 01       	movw	r30, r16
    40a4:	80 81       	ld	r24, Z
    40a6:	8e 7f       	andi	r24, 0xFE	; 254
    40a8:	f7 01       	movw	r30, r14
    40aa:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    40ac:	f8 01       	movw	r30, r16
    40ae:	81 81       	ldd	r24, Z+1	; 0x01
    40b0:	f7 01       	movw	r30, r14
    40b2:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    40b4:	f8 01       	movw	r30, r16
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
    40b8:	f7 01       	movw	r30, r14
    40ba:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    40bc:	f8 01       	movw	r30, r16
    40be:	83 81       	ldd	r24, Z+3	; 0x03
    40c0:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    40c2:	83 83       	std	Z+3, r24	; 0x03
    40c4:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    40c6:	44 df       	rcall	.-376    	; 0x3f50 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    40c8:	df be       	out	0x3f, r13	; 63
    40ca:	0f 90       	pop	r0
    40cc:	df 91       	pop	r29
    40ce:	cf 91       	pop	r28
    40d0:	1f 91       	pop	r17
    40d2:	0f 91       	pop	r16
    40d4:	ff 90       	pop	r15
    40d6:	ef 90       	pop	r14
    40d8:	df 90       	pop	r13
    40da:	08 95       	ret

000040dc <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    40dc:	1f 92       	push	r1
    40de:	0f 92       	push	r0
    40e0:	0f b6       	in	r0, 0x3f	; 63
    40e2:	0f 92       	push	r0
    40e4:	11 24       	eor	r1, r1
    40e6:	0b b6       	in	r0, 0x3b	; 59
    40e8:	0f 92       	push	r0
    40ea:	2f 93       	push	r18
    40ec:	3f 93       	push	r19
    40ee:	4f 93       	push	r20
    40f0:	5f 93       	push	r21
    40f2:	6f 93       	push	r22
    40f4:	7f 93       	push	r23
    40f6:	8f 93       	push	r24
    40f8:	9f 93       	push	r25
    40fa:	af 93       	push	r26
    40fc:	bf 93       	push	r27
    40fe:	ef 93       	push	r30
    4100:	ff 93       	push	r31
    4102:	e0 91 ed 24 	lds	r30, 0x24ED	; 0x8024ed <tc_tcc0_ovf_callback>
    4106:	f0 91 ee 24 	lds	r31, 0x24EE	; 0x8024ee <tc_tcc0_ovf_callback+0x1>
    410a:	30 97       	sbiw	r30, 0x00	; 0
    410c:	09 f0       	breq	.+2      	; 0x4110 <__vector_14+0x34>
    410e:	19 95       	eicall
    4110:	ff 91       	pop	r31
    4112:	ef 91       	pop	r30
    4114:	bf 91       	pop	r27
    4116:	af 91       	pop	r26
    4118:	9f 91       	pop	r25
    411a:	8f 91       	pop	r24
    411c:	7f 91       	pop	r23
    411e:	6f 91       	pop	r22
    4120:	5f 91       	pop	r21
    4122:	4f 91       	pop	r20
    4124:	3f 91       	pop	r19
    4126:	2f 91       	pop	r18
    4128:	0f 90       	pop	r0
    412a:	0b be       	out	0x3b, r0	; 59
    412c:	0f 90       	pop	r0
    412e:	0f be       	out	0x3f, r0	; 63
    4130:	0f 90       	pop	r0
    4132:	1f 90       	pop	r1
    4134:	18 95       	reti

00004136 <__vector_15>:
    4136:	1f 92       	push	r1
    4138:	0f 92       	push	r0
    413a:	0f b6       	in	r0, 0x3f	; 63
    413c:	0f 92       	push	r0
    413e:	11 24       	eor	r1, r1
    4140:	0b b6       	in	r0, 0x3b	; 59
    4142:	0f 92       	push	r0
    4144:	2f 93       	push	r18
    4146:	3f 93       	push	r19
    4148:	4f 93       	push	r20
    414a:	5f 93       	push	r21
    414c:	6f 93       	push	r22
    414e:	7f 93       	push	r23
    4150:	8f 93       	push	r24
    4152:	9f 93       	push	r25
    4154:	af 93       	push	r26
    4156:	bf 93       	push	r27
    4158:	ef 93       	push	r30
    415a:	ff 93       	push	r31
    415c:	e0 91 eb 24 	lds	r30, 0x24EB	; 0x8024eb <tc_tcc0_err_callback>
    4160:	f0 91 ec 24 	lds	r31, 0x24EC	; 0x8024ec <tc_tcc0_err_callback+0x1>
    4164:	30 97       	sbiw	r30, 0x00	; 0
    4166:	09 f0       	breq	.+2      	; 0x416a <__vector_15+0x34>
    4168:	19 95       	eicall
    416a:	ff 91       	pop	r31
    416c:	ef 91       	pop	r30
    416e:	bf 91       	pop	r27
    4170:	af 91       	pop	r26
    4172:	9f 91       	pop	r25
    4174:	8f 91       	pop	r24
    4176:	7f 91       	pop	r23
    4178:	6f 91       	pop	r22
    417a:	5f 91       	pop	r21
    417c:	4f 91       	pop	r20
    417e:	3f 91       	pop	r19
    4180:	2f 91       	pop	r18
    4182:	0f 90       	pop	r0
    4184:	0b be       	out	0x3b, r0	; 59
    4186:	0f 90       	pop	r0
    4188:	0f be       	out	0x3f, r0	; 63
    418a:	0f 90       	pop	r0
    418c:	1f 90       	pop	r1
    418e:	18 95       	reti

00004190 <__vector_16>:
    4190:	1f 92       	push	r1
    4192:	0f 92       	push	r0
    4194:	0f b6       	in	r0, 0x3f	; 63
    4196:	0f 92       	push	r0
    4198:	11 24       	eor	r1, r1
    419a:	0b b6       	in	r0, 0x3b	; 59
    419c:	0f 92       	push	r0
    419e:	2f 93       	push	r18
    41a0:	3f 93       	push	r19
    41a2:	4f 93       	push	r20
    41a4:	5f 93       	push	r21
    41a6:	6f 93       	push	r22
    41a8:	7f 93       	push	r23
    41aa:	8f 93       	push	r24
    41ac:	9f 93       	push	r25
    41ae:	af 93       	push	r26
    41b0:	bf 93       	push	r27
    41b2:	ef 93       	push	r30
    41b4:	ff 93       	push	r31
    41b6:	e0 91 e9 24 	lds	r30, 0x24E9	; 0x8024e9 <tc_tcc0_cca_callback>
    41ba:	f0 91 ea 24 	lds	r31, 0x24EA	; 0x8024ea <tc_tcc0_cca_callback+0x1>
    41be:	30 97       	sbiw	r30, 0x00	; 0
    41c0:	09 f0       	breq	.+2      	; 0x41c4 <__vector_16+0x34>
    41c2:	19 95       	eicall
    41c4:	ff 91       	pop	r31
    41c6:	ef 91       	pop	r30
    41c8:	bf 91       	pop	r27
    41ca:	af 91       	pop	r26
    41cc:	9f 91       	pop	r25
    41ce:	8f 91       	pop	r24
    41d0:	7f 91       	pop	r23
    41d2:	6f 91       	pop	r22
    41d4:	5f 91       	pop	r21
    41d6:	4f 91       	pop	r20
    41d8:	3f 91       	pop	r19
    41da:	2f 91       	pop	r18
    41dc:	0f 90       	pop	r0
    41de:	0b be       	out	0x3b, r0	; 59
    41e0:	0f 90       	pop	r0
    41e2:	0f be       	out	0x3f, r0	; 63
    41e4:	0f 90       	pop	r0
    41e6:	1f 90       	pop	r1
    41e8:	18 95       	reti

000041ea <__vector_17>:
    41ea:	1f 92       	push	r1
    41ec:	0f 92       	push	r0
    41ee:	0f b6       	in	r0, 0x3f	; 63
    41f0:	0f 92       	push	r0
    41f2:	11 24       	eor	r1, r1
    41f4:	0b b6       	in	r0, 0x3b	; 59
    41f6:	0f 92       	push	r0
    41f8:	2f 93       	push	r18
    41fa:	3f 93       	push	r19
    41fc:	4f 93       	push	r20
    41fe:	5f 93       	push	r21
    4200:	6f 93       	push	r22
    4202:	7f 93       	push	r23
    4204:	8f 93       	push	r24
    4206:	9f 93       	push	r25
    4208:	af 93       	push	r26
    420a:	bf 93       	push	r27
    420c:	ef 93       	push	r30
    420e:	ff 93       	push	r31
    4210:	e0 91 e7 24 	lds	r30, 0x24E7	; 0x8024e7 <tc_tcc0_ccb_callback>
    4214:	f0 91 e8 24 	lds	r31, 0x24E8	; 0x8024e8 <tc_tcc0_ccb_callback+0x1>
    4218:	30 97       	sbiw	r30, 0x00	; 0
    421a:	09 f0       	breq	.+2      	; 0x421e <__vector_17+0x34>
    421c:	19 95       	eicall
    421e:	ff 91       	pop	r31
    4220:	ef 91       	pop	r30
    4222:	bf 91       	pop	r27
    4224:	af 91       	pop	r26
    4226:	9f 91       	pop	r25
    4228:	8f 91       	pop	r24
    422a:	7f 91       	pop	r23
    422c:	6f 91       	pop	r22
    422e:	5f 91       	pop	r21
    4230:	4f 91       	pop	r20
    4232:	3f 91       	pop	r19
    4234:	2f 91       	pop	r18
    4236:	0f 90       	pop	r0
    4238:	0b be       	out	0x3b, r0	; 59
    423a:	0f 90       	pop	r0
    423c:	0f be       	out	0x3f, r0	; 63
    423e:	0f 90       	pop	r0
    4240:	1f 90       	pop	r1
    4242:	18 95       	reti

00004244 <__vector_18>:
    4244:	1f 92       	push	r1
    4246:	0f 92       	push	r0
    4248:	0f b6       	in	r0, 0x3f	; 63
    424a:	0f 92       	push	r0
    424c:	11 24       	eor	r1, r1
    424e:	0b b6       	in	r0, 0x3b	; 59
    4250:	0f 92       	push	r0
    4252:	2f 93       	push	r18
    4254:	3f 93       	push	r19
    4256:	4f 93       	push	r20
    4258:	5f 93       	push	r21
    425a:	6f 93       	push	r22
    425c:	7f 93       	push	r23
    425e:	8f 93       	push	r24
    4260:	9f 93       	push	r25
    4262:	af 93       	push	r26
    4264:	bf 93       	push	r27
    4266:	ef 93       	push	r30
    4268:	ff 93       	push	r31
    426a:	e0 91 e5 24 	lds	r30, 0x24E5	; 0x8024e5 <tc_tcc0_ccc_callback>
    426e:	f0 91 e6 24 	lds	r31, 0x24E6	; 0x8024e6 <tc_tcc0_ccc_callback+0x1>
    4272:	30 97       	sbiw	r30, 0x00	; 0
    4274:	09 f0       	breq	.+2      	; 0x4278 <__vector_18+0x34>
    4276:	19 95       	eicall
    4278:	ff 91       	pop	r31
    427a:	ef 91       	pop	r30
    427c:	bf 91       	pop	r27
    427e:	af 91       	pop	r26
    4280:	9f 91       	pop	r25
    4282:	8f 91       	pop	r24
    4284:	7f 91       	pop	r23
    4286:	6f 91       	pop	r22
    4288:	5f 91       	pop	r21
    428a:	4f 91       	pop	r20
    428c:	3f 91       	pop	r19
    428e:	2f 91       	pop	r18
    4290:	0f 90       	pop	r0
    4292:	0b be       	out	0x3b, r0	; 59
    4294:	0f 90       	pop	r0
    4296:	0f be       	out	0x3f, r0	; 63
    4298:	0f 90       	pop	r0
    429a:	1f 90       	pop	r1
    429c:	18 95       	reti

0000429e <__vector_19>:
    429e:	1f 92       	push	r1
    42a0:	0f 92       	push	r0
    42a2:	0f b6       	in	r0, 0x3f	; 63
    42a4:	0f 92       	push	r0
    42a6:	11 24       	eor	r1, r1
    42a8:	0b b6       	in	r0, 0x3b	; 59
    42aa:	0f 92       	push	r0
    42ac:	2f 93       	push	r18
    42ae:	3f 93       	push	r19
    42b0:	4f 93       	push	r20
    42b2:	5f 93       	push	r21
    42b4:	6f 93       	push	r22
    42b6:	7f 93       	push	r23
    42b8:	8f 93       	push	r24
    42ba:	9f 93       	push	r25
    42bc:	af 93       	push	r26
    42be:	bf 93       	push	r27
    42c0:	ef 93       	push	r30
    42c2:	ff 93       	push	r31
    42c4:	e0 91 e3 24 	lds	r30, 0x24E3	; 0x8024e3 <tc_tcc0_ccd_callback>
    42c8:	f0 91 e4 24 	lds	r31, 0x24E4	; 0x8024e4 <tc_tcc0_ccd_callback+0x1>
    42cc:	30 97       	sbiw	r30, 0x00	; 0
    42ce:	09 f0       	breq	.+2      	; 0x42d2 <__vector_19+0x34>
    42d0:	19 95       	eicall
    42d2:	ff 91       	pop	r31
    42d4:	ef 91       	pop	r30
    42d6:	bf 91       	pop	r27
    42d8:	af 91       	pop	r26
    42da:	9f 91       	pop	r25
    42dc:	8f 91       	pop	r24
    42de:	7f 91       	pop	r23
    42e0:	6f 91       	pop	r22
    42e2:	5f 91       	pop	r21
    42e4:	4f 91       	pop	r20
    42e6:	3f 91       	pop	r19
    42e8:	2f 91       	pop	r18
    42ea:	0f 90       	pop	r0
    42ec:	0b be       	out	0x3b, r0	; 59
    42ee:	0f 90       	pop	r0
    42f0:	0f be       	out	0x3f, r0	; 63
    42f2:	0f 90       	pop	r0
    42f4:	1f 90       	pop	r1
    42f6:	18 95       	reti

000042f8 <__vector_20>:
    42f8:	1f 92       	push	r1
    42fa:	0f 92       	push	r0
    42fc:	0f b6       	in	r0, 0x3f	; 63
    42fe:	0f 92       	push	r0
    4300:	11 24       	eor	r1, r1
    4302:	0b b6       	in	r0, 0x3b	; 59
    4304:	0f 92       	push	r0
    4306:	2f 93       	push	r18
    4308:	3f 93       	push	r19
    430a:	4f 93       	push	r20
    430c:	5f 93       	push	r21
    430e:	6f 93       	push	r22
    4310:	7f 93       	push	r23
    4312:	8f 93       	push	r24
    4314:	9f 93       	push	r25
    4316:	af 93       	push	r26
    4318:	bf 93       	push	r27
    431a:	ef 93       	push	r30
    431c:	ff 93       	push	r31
    431e:	e0 91 e1 24 	lds	r30, 0x24E1	; 0x8024e1 <tc_tcc1_ovf_callback>
    4322:	f0 91 e2 24 	lds	r31, 0x24E2	; 0x8024e2 <tc_tcc1_ovf_callback+0x1>
    4326:	30 97       	sbiw	r30, 0x00	; 0
    4328:	09 f0       	breq	.+2      	; 0x432c <__vector_20+0x34>
    432a:	19 95       	eicall
    432c:	ff 91       	pop	r31
    432e:	ef 91       	pop	r30
    4330:	bf 91       	pop	r27
    4332:	af 91       	pop	r26
    4334:	9f 91       	pop	r25
    4336:	8f 91       	pop	r24
    4338:	7f 91       	pop	r23
    433a:	6f 91       	pop	r22
    433c:	5f 91       	pop	r21
    433e:	4f 91       	pop	r20
    4340:	3f 91       	pop	r19
    4342:	2f 91       	pop	r18
    4344:	0f 90       	pop	r0
    4346:	0b be       	out	0x3b, r0	; 59
    4348:	0f 90       	pop	r0
    434a:	0f be       	out	0x3f, r0	; 63
    434c:	0f 90       	pop	r0
    434e:	1f 90       	pop	r1
    4350:	18 95       	reti

00004352 <__vector_21>:
    4352:	1f 92       	push	r1
    4354:	0f 92       	push	r0
    4356:	0f b6       	in	r0, 0x3f	; 63
    4358:	0f 92       	push	r0
    435a:	11 24       	eor	r1, r1
    435c:	0b b6       	in	r0, 0x3b	; 59
    435e:	0f 92       	push	r0
    4360:	2f 93       	push	r18
    4362:	3f 93       	push	r19
    4364:	4f 93       	push	r20
    4366:	5f 93       	push	r21
    4368:	6f 93       	push	r22
    436a:	7f 93       	push	r23
    436c:	8f 93       	push	r24
    436e:	9f 93       	push	r25
    4370:	af 93       	push	r26
    4372:	bf 93       	push	r27
    4374:	ef 93       	push	r30
    4376:	ff 93       	push	r31
    4378:	e0 91 df 24 	lds	r30, 0x24DF	; 0x8024df <tc_tcc1_err_callback>
    437c:	f0 91 e0 24 	lds	r31, 0x24E0	; 0x8024e0 <tc_tcc1_err_callback+0x1>
    4380:	30 97       	sbiw	r30, 0x00	; 0
    4382:	09 f0       	breq	.+2      	; 0x4386 <__vector_21+0x34>
    4384:	19 95       	eicall
    4386:	ff 91       	pop	r31
    4388:	ef 91       	pop	r30
    438a:	bf 91       	pop	r27
    438c:	af 91       	pop	r26
    438e:	9f 91       	pop	r25
    4390:	8f 91       	pop	r24
    4392:	7f 91       	pop	r23
    4394:	6f 91       	pop	r22
    4396:	5f 91       	pop	r21
    4398:	4f 91       	pop	r20
    439a:	3f 91       	pop	r19
    439c:	2f 91       	pop	r18
    439e:	0f 90       	pop	r0
    43a0:	0b be       	out	0x3b, r0	; 59
    43a2:	0f 90       	pop	r0
    43a4:	0f be       	out	0x3f, r0	; 63
    43a6:	0f 90       	pop	r0
    43a8:	1f 90       	pop	r1
    43aa:	18 95       	reti

000043ac <__vector_22>:
    43ac:	1f 92       	push	r1
    43ae:	0f 92       	push	r0
    43b0:	0f b6       	in	r0, 0x3f	; 63
    43b2:	0f 92       	push	r0
    43b4:	11 24       	eor	r1, r1
    43b6:	0b b6       	in	r0, 0x3b	; 59
    43b8:	0f 92       	push	r0
    43ba:	2f 93       	push	r18
    43bc:	3f 93       	push	r19
    43be:	4f 93       	push	r20
    43c0:	5f 93       	push	r21
    43c2:	6f 93       	push	r22
    43c4:	7f 93       	push	r23
    43c6:	8f 93       	push	r24
    43c8:	9f 93       	push	r25
    43ca:	af 93       	push	r26
    43cc:	bf 93       	push	r27
    43ce:	ef 93       	push	r30
    43d0:	ff 93       	push	r31
    43d2:	e0 91 dd 24 	lds	r30, 0x24DD	; 0x8024dd <tc_tcc1_cca_callback>
    43d6:	f0 91 de 24 	lds	r31, 0x24DE	; 0x8024de <tc_tcc1_cca_callback+0x1>
    43da:	30 97       	sbiw	r30, 0x00	; 0
    43dc:	09 f0       	breq	.+2      	; 0x43e0 <__vector_22+0x34>
    43de:	19 95       	eicall
    43e0:	ff 91       	pop	r31
    43e2:	ef 91       	pop	r30
    43e4:	bf 91       	pop	r27
    43e6:	af 91       	pop	r26
    43e8:	9f 91       	pop	r25
    43ea:	8f 91       	pop	r24
    43ec:	7f 91       	pop	r23
    43ee:	6f 91       	pop	r22
    43f0:	5f 91       	pop	r21
    43f2:	4f 91       	pop	r20
    43f4:	3f 91       	pop	r19
    43f6:	2f 91       	pop	r18
    43f8:	0f 90       	pop	r0
    43fa:	0b be       	out	0x3b, r0	; 59
    43fc:	0f 90       	pop	r0
    43fe:	0f be       	out	0x3f, r0	; 63
    4400:	0f 90       	pop	r0
    4402:	1f 90       	pop	r1
    4404:	18 95       	reti

00004406 <__vector_23>:
    4406:	1f 92       	push	r1
    4408:	0f 92       	push	r0
    440a:	0f b6       	in	r0, 0x3f	; 63
    440c:	0f 92       	push	r0
    440e:	11 24       	eor	r1, r1
    4410:	0b b6       	in	r0, 0x3b	; 59
    4412:	0f 92       	push	r0
    4414:	2f 93       	push	r18
    4416:	3f 93       	push	r19
    4418:	4f 93       	push	r20
    441a:	5f 93       	push	r21
    441c:	6f 93       	push	r22
    441e:	7f 93       	push	r23
    4420:	8f 93       	push	r24
    4422:	9f 93       	push	r25
    4424:	af 93       	push	r26
    4426:	bf 93       	push	r27
    4428:	ef 93       	push	r30
    442a:	ff 93       	push	r31
    442c:	e0 91 db 24 	lds	r30, 0x24DB	; 0x8024db <tc_tcc1_ccb_callback>
    4430:	f0 91 dc 24 	lds	r31, 0x24DC	; 0x8024dc <tc_tcc1_ccb_callback+0x1>
    4434:	30 97       	sbiw	r30, 0x00	; 0
    4436:	09 f0       	breq	.+2      	; 0x443a <__vector_23+0x34>
    4438:	19 95       	eicall
    443a:	ff 91       	pop	r31
    443c:	ef 91       	pop	r30
    443e:	bf 91       	pop	r27
    4440:	af 91       	pop	r26
    4442:	9f 91       	pop	r25
    4444:	8f 91       	pop	r24
    4446:	7f 91       	pop	r23
    4448:	6f 91       	pop	r22
    444a:	5f 91       	pop	r21
    444c:	4f 91       	pop	r20
    444e:	3f 91       	pop	r19
    4450:	2f 91       	pop	r18
    4452:	0f 90       	pop	r0
    4454:	0b be       	out	0x3b, r0	; 59
    4456:	0f 90       	pop	r0
    4458:	0f be       	out	0x3f, r0	; 63
    445a:	0f 90       	pop	r0
    445c:	1f 90       	pop	r1
    445e:	18 95       	reti

00004460 <__vector_77>:
    4460:	1f 92       	push	r1
    4462:	0f 92       	push	r0
    4464:	0f b6       	in	r0, 0x3f	; 63
    4466:	0f 92       	push	r0
    4468:	11 24       	eor	r1, r1
    446a:	0b b6       	in	r0, 0x3b	; 59
    446c:	0f 92       	push	r0
    446e:	2f 93       	push	r18
    4470:	3f 93       	push	r19
    4472:	4f 93       	push	r20
    4474:	5f 93       	push	r21
    4476:	6f 93       	push	r22
    4478:	7f 93       	push	r23
    447a:	8f 93       	push	r24
    447c:	9f 93       	push	r25
    447e:	af 93       	push	r26
    4480:	bf 93       	push	r27
    4482:	ef 93       	push	r30
    4484:	ff 93       	push	r31
    4486:	e0 91 d9 24 	lds	r30, 0x24D9	; 0x8024d9 <tc_tcd0_ovf_callback>
    448a:	f0 91 da 24 	lds	r31, 0x24DA	; 0x8024da <tc_tcd0_ovf_callback+0x1>
    448e:	30 97       	sbiw	r30, 0x00	; 0
    4490:	09 f0       	breq	.+2      	; 0x4494 <__vector_77+0x34>
    4492:	19 95       	eicall
    4494:	ff 91       	pop	r31
    4496:	ef 91       	pop	r30
    4498:	bf 91       	pop	r27
    449a:	af 91       	pop	r26
    449c:	9f 91       	pop	r25
    449e:	8f 91       	pop	r24
    44a0:	7f 91       	pop	r23
    44a2:	6f 91       	pop	r22
    44a4:	5f 91       	pop	r21
    44a6:	4f 91       	pop	r20
    44a8:	3f 91       	pop	r19
    44aa:	2f 91       	pop	r18
    44ac:	0f 90       	pop	r0
    44ae:	0b be       	out	0x3b, r0	; 59
    44b0:	0f 90       	pop	r0
    44b2:	0f be       	out	0x3f, r0	; 63
    44b4:	0f 90       	pop	r0
    44b6:	1f 90       	pop	r1
    44b8:	18 95       	reti

000044ba <__vector_78>:
    44ba:	1f 92       	push	r1
    44bc:	0f 92       	push	r0
    44be:	0f b6       	in	r0, 0x3f	; 63
    44c0:	0f 92       	push	r0
    44c2:	11 24       	eor	r1, r1
    44c4:	0b b6       	in	r0, 0x3b	; 59
    44c6:	0f 92       	push	r0
    44c8:	2f 93       	push	r18
    44ca:	3f 93       	push	r19
    44cc:	4f 93       	push	r20
    44ce:	5f 93       	push	r21
    44d0:	6f 93       	push	r22
    44d2:	7f 93       	push	r23
    44d4:	8f 93       	push	r24
    44d6:	9f 93       	push	r25
    44d8:	af 93       	push	r26
    44da:	bf 93       	push	r27
    44dc:	ef 93       	push	r30
    44de:	ff 93       	push	r31
    44e0:	e0 91 d7 24 	lds	r30, 0x24D7	; 0x8024d7 <tc_tcd0_err_callback>
    44e4:	f0 91 d8 24 	lds	r31, 0x24D8	; 0x8024d8 <tc_tcd0_err_callback+0x1>
    44e8:	30 97       	sbiw	r30, 0x00	; 0
    44ea:	09 f0       	breq	.+2      	; 0x44ee <__vector_78+0x34>
    44ec:	19 95       	eicall
    44ee:	ff 91       	pop	r31
    44f0:	ef 91       	pop	r30
    44f2:	bf 91       	pop	r27
    44f4:	af 91       	pop	r26
    44f6:	9f 91       	pop	r25
    44f8:	8f 91       	pop	r24
    44fa:	7f 91       	pop	r23
    44fc:	6f 91       	pop	r22
    44fe:	5f 91       	pop	r21
    4500:	4f 91       	pop	r20
    4502:	3f 91       	pop	r19
    4504:	2f 91       	pop	r18
    4506:	0f 90       	pop	r0
    4508:	0b be       	out	0x3b, r0	; 59
    450a:	0f 90       	pop	r0
    450c:	0f be       	out	0x3f, r0	; 63
    450e:	0f 90       	pop	r0
    4510:	1f 90       	pop	r1
    4512:	18 95       	reti

00004514 <__vector_79>:
    4514:	1f 92       	push	r1
    4516:	0f 92       	push	r0
    4518:	0f b6       	in	r0, 0x3f	; 63
    451a:	0f 92       	push	r0
    451c:	11 24       	eor	r1, r1
    451e:	0b b6       	in	r0, 0x3b	; 59
    4520:	0f 92       	push	r0
    4522:	2f 93       	push	r18
    4524:	3f 93       	push	r19
    4526:	4f 93       	push	r20
    4528:	5f 93       	push	r21
    452a:	6f 93       	push	r22
    452c:	7f 93       	push	r23
    452e:	8f 93       	push	r24
    4530:	9f 93       	push	r25
    4532:	af 93       	push	r26
    4534:	bf 93       	push	r27
    4536:	ef 93       	push	r30
    4538:	ff 93       	push	r31
    453a:	e0 91 d5 24 	lds	r30, 0x24D5	; 0x8024d5 <tc_tcd0_cca_callback>
    453e:	f0 91 d6 24 	lds	r31, 0x24D6	; 0x8024d6 <tc_tcd0_cca_callback+0x1>
    4542:	30 97       	sbiw	r30, 0x00	; 0
    4544:	09 f0       	breq	.+2      	; 0x4548 <__vector_79+0x34>
    4546:	19 95       	eicall
    4548:	ff 91       	pop	r31
    454a:	ef 91       	pop	r30
    454c:	bf 91       	pop	r27
    454e:	af 91       	pop	r26
    4550:	9f 91       	pop	r25
    4552:	8f 91       	pop	r24
    4554:	7f 91       	pop	r23
    4556:	6f 91       	pop	r22
    4558:	5f 91       	pop	r21
    455a:	4f 91       	pop	r20
    455c:	3f 91       	pop	r19
    455e:	2f 91       	pop	r18
    4560:	0f 90       	pop	r0
    4562:	0b be       	out	0x3b, r0	; 59
    4564:	0f 90       	pop	r0
    4566:	0f be       	out	0x3f, r0	; 63
    4568:	0f 90       	pop	r0
    456a:	1f 90       	pop	r1
    456c:	18 95       	reti

0000456e <__vector_80>:
    456e:	1f 92       	push	r1
    4570:	0f 92       	push	r0
    4572:	0f b6       	in	r0, 0x3f	; 63
    4574:	0f 92       	push	r0
    4576:	11 24       	eor	r1, r1
    4578:	0b b6       	in	r0, 0x3b	; 59
    457a:	0f 92       	push	r0
    457c:	2f 93       	push	r18
    457e:	3f 93       	push	r19
    4580:	4f 93       	push	r20
    4582:	5f 93       	push	r21
    4584:	6f 93       	push	r22
    4586:	7f 93       	push	r23
    4588:	8f 93       	push	r24
    458a:	9f 93       	push	r25
    458c:	af 93       	push	r26
    458e:	bf 93       	push	r27
    4590:	ef 93       	push	r30
    4592:	ff 93       	push	r31
    4594:	e0 91 d3 24 	lds	r30, 0x24D3	; 0x8024d3 <tc_tcd0_ccb_callback>
    4598:	f0 91 d4 24 	lds	r31, 0x24D4	; 0x8024d4 <tc_tcd0_ccb_callback+0x1>
    459c:	30 97       	sbiw	r30, 0x00	; 0
    459e:	09 f0       	breq	.+2      	; 0x45a2 <__vector_80+0x34>
    45a0:	19 95       	eicall
    45a2:	ff 91       	pop	r31
    45a4:	ef 91       	pop	r30
    45a6:	bf 91       	pop	r27
    45a8:	af 91       	pop	r26
    45aa:	9f 91       	pop	r25
    45ac:	8f 91       	pop	r24
    45ae:	7f 91       	pop	r23
    45b0:	6f 91       	pop	r22
    45b2:	5f 91       	pop	r21
    45b4:	4f 91       	pop	r20
    45b6:	3f 91       	pop	r19
    45b8:	2f 91       	pop	r18
    45ba:	0f 90       	pop	r0
    45bc:	0b be       	out	0x3b, r0	; 59
    45be:	0f 90       	pop	r0
    45c0:	0f be       	out	0x3f, r0	; 63
    45c2:	0f 90       	pop	r0
    45c4:	1f 90       	pop	r1
    45c6:	18 95       	reti

000045c8 <__vector_81>:
    45c8:	1f 92       	push	r1
    45ca:	0f 92       	push	r0
    45cc:	0f b6       	in	r0, 0x3f	; 63
    45ce:	0f 92       	push	r0
    45d0:	11 24       	eor	r1, r1
    45d2:	0b b6       	in	r0, 0x3b	; 59
    45d4:	0f 92       	push	r0
    45d6:	2f 93       	push	r18
    45d8:	3f 93       	push	r19
    45da:	4f 93       	push	r20
    45dc:	5f 93       	push	r21
    45de:	6f 93       	push	r22
    45e0:	7f 93       	push	r23
    45e2:	8f 93       	push	r24
    45e4:	9f 93       	push	r25
    45e6:	af 93       	push	r26
    45e8:	bf 93       	push	r27
    45ea:	ef 93       	push	r30
    45ec:	ff 93       	push	r31
    45ee:	e0 91 d1 24 	lds	r30, 0x24D1	; 0x8024d1 <tc_tcd0_ccc_callback>
    45f2:	f0 91 d2 24 	lds	r31, 0x24D2	; 0x8024d2 <tc_tcd0_ccc_callback+0x1>
    45f6:	30 97       	sbiw	r30, 0x00	; 0
    45f8:	09 f0       	breq	.+2      	; 0x45fc <__vector_81+0x34>
    45fa:	19 95       	eicall
    45fc:	ff 91       	pop	r31
    45fe:	ef 91       	pop	r30
    4600:	bf 91       	pop	r27
    4602:	af 91       	pop	r26
    4604:	9f 91       	pop	r25
    4606:	8f 91       	pop	r24
    4608:	7f 91       	pop	r23
    460a:	6f 91       	pop	r22
    460c:	5f 91       	pop	r21
    460e:	4f 91       	pop	r20
    4610:	3f 91       	pop	r19
    4612:	2f 91       	pop	r18
    4614:	0f 90       	pop	r0
    4616:	0b be       	out	0x3b, r0	; 59
    4618:	0f 90       	pop	r0
    461a:	0f be       	out	0x3f, r0	; 63
    461c:	0f 90       	pop	r0
    461e:	1f 90       	pop	r1
    4620:	18 95       	reti

00004622 <__vector_82>:
    4622:	1f 92       	push	r1
    4624:	0f 92       	push	r0
    4626:	0f b6       	in	r0, 0x3f	; 63
    4628:	0f 92       	push	r0
    462a:	11 24       	eor	r1, r1
    462c:	0b b6       	in	r0, 0x3b	; 59
    462e:	0f 92       	push	r0
    4630:	2f 93       	push	r18
    4632:	3f 93       	push	r19
    4634:	4f 93       	push	r20
    4636:	5f 93       	push	r21
    4638:	6f 93       	push	r22
    463a:	7f 93       	push	r23
    463c:	8f 93       	push	r24
    463e:	9f 93       	push	r25
    4640:	af 93       	push	r26
    4642:	bf 93       	push	r27
    4644:	ef 93       	push	r30
    4646:	ff 93       	push	r31
    4648:	e0 91 cf 24 	lds	r30, 0x24CF	; 0x8024cf <tc_tcd0_ccd_callback>
    464c:	f0 91 d0 24 	lds	r31, 0x24D0	; 0x8024d0 <tc_tcd0_ccd_callback+0x1>
    4650:	30 97       	sbiw	r30, 0x00	; 0
    4652:	09 f0       	breq	.+2      	; 0x4656 <__vector_82+0x34>
    4654:	19 95       	eicall
    4656:	ff 91       	pop	r31
    4658:	ef 91       	pop	r30
    465a:	bf 91       	pop	r27
    465c:	af 91       	pop	r26
    465e:	9f 91       	pop	r25
    4660:	8f 91       	pop	r24
    4662:	7f 91       	pop	r23
    4664:	6f 91       	pop	r22
    4666:	5f 91       	pop	r21
    4668:	4f 91       	pop	r20
    466a:	3f 91       	pop	r19
    466c:	2f 91       	pop	r18
    466e:	0f 90       	pop	r0
    4670:	0b be       	out	0x3b, r0	; 59
    4672:	0f 90       	pop	r0
    4674:	0f be       	out	0x3f, r0	; 63
    4676:	0f 90       	pop	r0
    4678:	1f 90       	pop	r1
    467a:	18 95       	reti

0000467c <__vector_83>:
    467c:	1f 92       	push	r1
    467e:	0f 92       	push	r0
    4680:	0f b6       	in	r0, 0x3f	; 63
    4682:	0f 92       	push	r0
    4684:	11 24       	eor	r1, r1
    4686:	0b b6       	in	r0, 0x3b	; 59
    4688:	0f 92       	push	r0
    468a:	2f 93       	push	r18
    468c:	3f 93       	push	r19
    468e:	4f 93       	push	r20
    4690:	5f 93       	push	r21
    4692:	6f 93       	push	r22
    4694:	7f 93       	push	r23
    4696:	8f 93       	push	r24
    4698:	9f 93       	push	r25
    469a:	af 93       	push	r26
    469c:	bf 93       	push	r27
    469e:	ef 93       	push	r30
    46a0:	ff 93       	push	r31
    46a2:	e0 91 cd 24 	lds	r30, 0x24CD	; 0x8024cd <tc_tcd1_ovf_callback>
    46a6:	f0 91 ce 24 	lds	r31, 0x24CE	; 0x8024ce <tc_tcd1_ovf_callback+0x1>
    46aa:	30 97       	sbiw	r30, 0x00	; 0
    46ac:	09 f0       	breq	.+2      	; 0x46b0 <__vector_83+0x34>
    46ae:	19 95       	eicall
    46b0:	ff 91       	pop	r31
    46b2:	ef 91       	pop	r30
    46b4:	bf 91       	pop	r27
    46b6:	af 91       	pop	r26
    46b8:	9f 91       	pop	r25
    46ba:	8f 91       	pop	r24
    46bc:	7f 91       	pop	r23
    46be:	6f 91       	pop	r22
    46c0:	5f 91       	pop	r21
    46c2:	4f 91       	pop	r20
    46c4:	3f 91       	pop	r19
    46c6:	2f 91       	pop	r18
    46c8:	0f 90       	pop	r0
    46ca:	0b be       	out	0x3b, r0	; 59
    46cc:	0f 90       	pop	r0
    46ce:	0f be       	out	0x3f, r0	; 63
    46d0:	0f 90       	pop	r0
    46d2:	1f 90       	pop	r1
    46d4:	18 95       	reti

000046d6 <__vector_84>:
    46d6:	1f 92       	push	r1
    46d8:	0f 92       	push	r0
    46da:	0f b6       	in	r0, 0x3f	; 63
    46dc:	0f 92       	push	r0
    46de:	11 24       	eor	r1, r1
    46e0:	0b b6       	in	r0, 0x3b	; 59
    46e2:	0f 92       	push	r0
    46e4:	2f 93       	push	r18
    46e6:	3f 93       	push	r19
    46e8:	4f 93       	push	r20
    46ea:	5f 93       	push	r21
    46ec:	6f 93       	push	r22
    46ee:	7f 93       	push	r23
    46f0:	8f 93       	push	r24
    46f2:	9f 93       	push	r25
    46f4:	af 93       	push	r26
    46f6:	bf 93       	push	r27
    46f8:	ef 93       	push	r30
    46fa:	ff 93       	push	r31
    46fc:	e0 91 cb 24 	lds	r30, 0x24CB	; 0x8024cb <tc_tcd1_err_callback>
    4700:	f0 91 cc 24 	lds	r31, 0x24CC	; 0x8024cc <tc_tcd1_err_callback+0x1>
    4704:	30 97       	sbiw	r30, 0x00	; 0
    4706:	09 f0       	breq	.+2      	; 0x470a <__vector_84+0x34>
    4708:	19 95       	eicall
    470a:	ff 91       	pop	r31
    470c:	ef 91       	pop	r30
    470e:	bf 91       	pop	r27
    4710:	af 91       	pop	r26
    4712:	9f 91       	pop	r25
    4714:	8f 91       	pop	r24
    4716:	7f 91       	pop	r23
    4718:	6f 91       	pop	r22
    471a:	5f 91       	pop	r21
    471c:	4f 91       	pop	r20
    471e:	3f 91       	pop	r19
    4720:	2f 91       	pop	r18
    4722:	0f 90       	pop	r0
    4724:	0b be       	out	0x3b, r0	; 59
    4726:	0f 90       	pop	r0
    4728:	0f be       	out	0x3f, r0	; 63
    472a:	0f 90       	pop	r0
    472c:	1f 90       	pop	r1
    472e:	18 95       	reti

00004730 <__vector_85>:
    4730:	1f 92       	push	r1
    4732:	0f 92       	push	r0
    4734:	0f b6       	in	r0, 0x3f	; 63
    4736:	0f 92       	push	r0
    4738:	11 24       	eor	r1, r1
    473a:	0b b6       	in	r0, 0x3b	; 59
    473c:	0f 92       	push	r0
    473e:	2f 93       	push	r18
    4740:	3f 93       	push	r19
    4742:	4f 93       	push	r20
    4744:	5f 93       	push	r21
    4746:	6f 93       	push	r22
    4748:	7f 93       	push	r23
    474a:	8f 93       	push	r24
    474c:	9f 93       	push	r25
    474e:	af 93       	push	r26
    4750:	bf 93       	push	r27
    4752:	ef 93       	push	r30
    4754:	ff 93       	push	r31
    4756:	e0 91 c9 24 	lds	r30, 0x24C9	; 0x8024c9 <tc_tcd1_cca_callback>
    475a:	f0 91 ca 24 	lds	r31, 0x24CA	; 0x8024ca <tc_tcd1_cca_callback+0x1>
    475e:	30 97       	sbiw	r30, 0x00	; 0
    4760:	09 f0       	breq	.+2      	; 0x4764 <__vector_85+0x34>
    4762:	19 95       	eicall
    4764:	ff 91       	pop	r31
    4766:	ef 91       	pop	r30
    4768:	bf 91       	pop	r27
    476a:	af 91       	pop	r26
    476c:	9f 91       	pop	r25
    476e:	8f 91       	pop	r24
    4770:	7f 91       	pop	r23
    4772:	6f 91       	pop	r22
    4774:	5f 91       	pop	r21
    4776:	4f 91       	pop	r20
    4778:	3f 91       	pop	r19
    477a:	2f 91       	pop	r18
    477c:	0f 90       	pop	r0
    477e:	0b be       	out	0x3b, r0	; 59
    4780:	0f 90       	pop	r0
    4782:	0f be       	out	0x3f, r0	; 63
    4784:	0f 90       	pop	r0
    4786:	1f 90       	pop	r1
    4788:	18 95       	reti

0000478a <__vector_86>:
    478a:	1f 92       	push	r1
    478c:	0f 92       	push	r0
    478e:	0f b6       	in	r0, 0x3f	; 63
    4790:	0f 92       	push	r0
    4792:	11 24       	eor	r1, r1
    4794:	0b b6       	in	r0, 0x3b	; 59
    4796:	0f 92       	push	r0
    4798:	2f 93       	push	r18
    479a:	3f 93       	push	r19
    479c:	4f 93       	push	r20
    479e:	5f 93       	push	r21
    47a0:	6f 93       	push	r22
    47a2:	7f 93       	push	r23
    47a4:	8f 93       	push	r24
    47a6:	9f 93       	push	r25
    47a8:	af 93       	push	r26
    47aa:	bf 93       	push	r27
    47ac:	ef 93       	push	r30
    47ae:	ff 93       	push	r31
    47b0:	e0 91 c7 24 	lds	r30, 0x24C7	; 0x8024c7 <tc_tcd1_ccb_callback>
    47b4:	f0 91 c8 24 	lds	r31, 0x24C8	; 0x8024c8 <tc_tcd1_ccb_callback+0x1>
    47b8:	30 97       	sbiw	r30, 0x00	; 0
    47ba:	09 f0       	breq	.+2      	; 0x47be <__vector_86+0x34>
    47bc:	19 95       	eicall
    47be:	ff 91       	pop	r31
    47c0:	ef 91       	pop	r30
    47c2:	bf 91       	pop	r27
    47c4:	af 91       	pop	r26
    47c6:	9f 91       	pop	r25
    47c8:	8f 91       	pop	r24
    47ca:	7f 91       	pop	r23
    47cc:	6f 91       	pop	r22
    47ce:	5f 91       	pop	r21
    47d0:	4f 91       	pop	r20
    47d2:	3f 91       	pop	r19
    47d4:	2f 91       	pop	r18
    47d6:	0f 90       	pop	r0
    47d8:	0b be       	out	0x3b, r0	; 59
    47da:	0f 90       	pop	r0
    47dc:	0f be       	out	0x3f, r0	; 63
    47de:	0f 90       	pop	r0
    47e0:	1f 90       	pop	r1
    47e2:	18 95       	reti

000047e4 <__vector_47>:
    47e4:	1f 92       	push	r1
    47e6:	0f 92       	push	r0
    47e8:	0f b6       	in	r0, 0x3f	; 63
    47ea:	0f 92       	push	r0
    47ec:	11 24       	eor	r1, r1
    47ee:	0b b6       	in	r0, 0x3b	; 59
    47f0:	0f 92       	push	r0
    47f2:	2f 93       	push	r18
    47f4:	3f 93       	push	r19
    47f6:	4f 93       	push	r20
    47f8:	5f 93       	push	r21
    47fa:	6f 93       	push	r22
    47fc:	7f 93       	push	r23
    47fe:	8f 93       	push	r24
    4800:	9f 93       	push	r25
    4802:	af 93       	push	r26
    4804:	bf 93       	push	r27
    4806:	ef 93       	push	r30
    4808:	ff 93       	push	r31
    480a:	e0 91 c5 24 	lds	r30, 0x24C5	; 0x8024c5 <tc_tce0_ovf_callback>
    480e:	f0 91 c6 24 	lds	r31, 0x24C6	; 0x8024c6 <tc_tce0_ovf_callback+0x1>
    4812:	30 97       	sbiw	r30, 0x00	; 0
    4814:	09 f0       	breq	.+2      	; 0x4818 <__vector_47+0x34>
    4816:	19 95       	eicall
    4818:	ff 91       	pop	r31
    481a:	ef 91       	pop	r30
    481c:	bf 91       	pop	r27
    481e:	af 91       	pop	r26
    4820:	9f 91       	pop	r25
    4822:	8f 91       	pop	r24
    4824:	7f 91       	pop	r23
    4826:	6f 91       	pop	r22
    4828:	5f 91       	pop	r21
    482a:	4f 91       	pop	r20
    482c:	3f 91       	pop	r19
    482e:	2f 91       	pop	r18
    4830:	0f 90       	pop	r0
    4832:	0b be       	out	0x3b, r0	; 59
    4834:	0f 90       	pop	r0
    4836:	0f be       	out	0x3f, r0	; 63
    4838:	0f 90       	pop	r0
    483a:	1f 90       	pop	r1
    483c:	18 95       	reti

0000483e <__vector_48>:
    483e:	1f 92       	push	r1
    4840:	0f 92       	push	r0
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	0f 92       	push	r0
    4846:	11 24       	eor	r1, r1
    4848:	0b b6       	in	r0, 0x3b	; 59
    484a:	0f 92       	push	r0
    484c:	2f 93       	push	r18
    484e:	3f 93       	push	r19
    4850:	4f 93       	push	r20
    4852:	5f 93       	push	r21
    4854:	6f 93       	push	r22
    4856:	7f 93       	push	r23
    4858:	8f 93       	push	r24
    485a:	9f 93       	push	r25
    485c:	af 93       	push	r26
    485e:	bf 93       	push	r27
    4860:	ef 93       	push	r30
    4862:	ff 93       	push	r31
    4864:	e0 91 c3 24 	lds	r30, 0x24C3	; 0x8024c3 <tc_tce0_err_callback>
    4868:	f0 91 c4 24 	lds	r31, 0x24C4	; 0x8024c4 <tc_tce0_err_callback+0x1>
    486c:	30 97       	sbiw	r30, 0x00	; 0
    486e:	09 f0       	breq	.+2      	; 0x4872 <__vector_48+0x34>
    4870:	19 95       	eicall
    4872:	ff 91       	pop	r31
    4874:	ef 91       	pop	r30
    4876:	bf 91       	pop	r27
    4878:	af 91       	pop	r26
    487a:	9f 91       	pop	r25
    487c:	8f 91       	pop	r24
    487e:	7f 91       	pop	r23
    4880:	6f 91       	pop	r22
    4882:	5f 91       	pop	r21
    4884:	4f 91       	pop	r20
    4886:	3f 91       	pop	r19
    4888:	2f 91       	pop	r18
    488a:	0f 90       	pop	r0
    488c:	0b be       	out	0x3b, r0	; 59
    488e:	0f 90       	pop	r0
    4890:	0f be       	out	0x3f, r0	; 63
    4892:	0f 90       	pop	r0
    4894:	1f 90       	pop	r1
    4896:	18 95       	reti

00004898 <__vector_49>:
    4898:	1f 92       	push	r1
    489a:	0f 92       	push	r0
    489c:	0f b6       	in	r0, 0x3f	; 63
    489e:	0f 92       	push	r0
    48a0:	11 24       	eor	r1, r1
    48a2:	0b b6       	in	r0, 0x3b	; 59
    48a4:	0f 92       	push	r0
    48a6:	2f 93       	push	r18
    48a8:	3f 93       	push	r19
    48aa:	4f 93       	push	r20
    48ac:	5f 93       	push	r21
    48ae:	6f 93       	push	r22
    48b0:	7f 93       	push	r23
    48b2:	8f 93       	push	r24
    48b4:	9f 93       	push	r25
    48b6:	af 93       	push	r26
    48b8:	bf 93       	push	r27
    48ba:	ef 93       	push	r30
    48bc:	ff 93       	push	r31
    48be:	e0 91 c1 24 	lds	r30, 0x24C1	; 0x8024c1 <tc_tce0_cca_callback>
    48c2:	f0 91 c2 24 	lds	r31, 0x24C2	; 0x8024c2 <tc_tce0_cca_callback+0x1>
    48c6:	30 97       	sbiw	r30, 0x00	; 0
    48c8:	09 f0       	breq	.+2      	; 0x48cc <__vector_49+0x34>
    48ca:	19 95       	eicall
    48cc:	ff 91       	pop	r31
    48ce:	ef 91       	pop	r30
    48d0:	bf 91       	pop	r27
    48d2:	af 91       	pop	r26
    48d4:	9f 91       	pop	r25
    48d6:	8f 91       	pop	r24
    48d8:	7f 91       	pop	r23
    48da:	6f 91       	pop	r22
    48dc:	5f 91       	pop	r21
    48de:	4f 91       	pop	r20
    48e0:	3f 91       	pop	r19
    48e2:	2f 91       	pop	r18
    48e4:	0f 90       	pop	r0
    48e6:	0b be       	out	0x3b, r0	; 59
    48e8:	0f 90       	pop	r0
    48ea:	0f be       	out	0x3f, r0	; 63
    48ec:	0f 90       	pop	r0
    48ee:	1f 90       	pop	r1
    48f0:	18 95       	reti

000048f2 <__vector_50>:
    48f2:	1f 92       	push	r1
    48f4:	0f 92       	push	r0
    48f6:	0f b6       	in	r0, 0x3f	; 63
    48f8:	0f 92       	push	r0
    48fa:	11 24       	eor	r1, r1
    48fc:	0b b6       	in	r0, 0x3b	; 59
    48fe:	0f 92       	push	r0
    4900:	2f 93       	push	r18
    4902:	3f 93       	push	r19
    4904:	4f 93       	push	r20
    4906:	5f 93       	push	r21
    4908:	6f 93       	push	r22
    490a:	7f 93       	push	r23
    490c:	8f 93       	push	r24
    490e:	9f 93       	push	r25
    4910:	af 93       	push	r26
    4912:	bf 93       	push	r27
    4914:	ef 93       	push	r30
    4916:	ff 93       	push	r31
    4918:	e0 91 bf 24 	lds	r30, 0x24BF	; 0x8024bf <tc_tce0_ccb_callback>
    491c:	f0 91 c0 24 	lds	r31, 0x24C0	; 0x8024c0 <tc_tce0_ccb_callback+0x1>
    4920:	30 97       	sbiw	r30, 0x00	; 0
    4922:	09 f0       	breq	.+2      	; 0x4926 <__vector_50+0x34>
    4924:	19 95       	eicall
    4926:	ff 91       	pop	r31
    4928:	ef 91       	pop	r30
    492a:	bf 91       	pop	r27
    492c:	af 91       	pop	r26
    492e:	9f 91       	pop	r25
    4930:	8f 91       	pop	r24
    4932:	7f 91       	pop	r23
    4934:	6f 91       	pop	r22
    4936:	5f 91       	pop	r21
    4938:	4f 91       	pop	r20
    493a:	3f 91       	pop	r19
    493c:	2f 91       	pop	r18
    493e:	0f 90       	pop	r0
    4940:	0b be       	out	0x3b, r0	; 59
    4942:	0f 90       	pop	r0
    4944:	0f be       	out	0x3f, r0	; 63
    4946:	0f 90       	pop	r0
    4948:	1f 90       	pop	r1
    494a:	18 95       	reti

0000494c <__vector_51>:
    494c:	1f 92       	push	r1
    494e:	0f 92       	push	r0
    4950:	0f b6       	in	r0, 0x3f	; 63
    4952:	0f 92       	push	r0
    4954:	11 24       	eor	r1, r1
    4956:	0b b6       	in	r0, 0x3b	; 59
    4958:	0f 92       	push	r0
    495a:	2f 93       	push	r18
    495c:	3f 93       	push	r19
    495e:	4f 93       	push	r20
    4960:	5f 93       	push	r21
    4962:	6f 93       	push	r22
    4964:	7f 93       	push	r23
    4966:	8f 93       	push	r24
    4968:	9f 93       	push	r25
    496a:	af 93       	push	r26
    496c:	bf 93       	push	r27
    496e:	ef 93       	push	r30
    4970:	ff 93       	push	r31
    4972:	e0 91 bd 24 	lds	r30, 0x24BD	; 0x8024bd <tc_tce0_ccc_callback>
    4976:	f0 91 be 24 	lds	r31, 0x24BE	; 0x8024be <tc_tce0_ccc_callback+0x1>
    497a:	30 97       	sbiw	r30, 0x00	; 0
    497c:	09 f0       	breq	.+2      	; 0x4980 <__vector_51+0x34>
    497e:	19 95       	eicall
    4980:	ff 91       	pop	r31
    4982:	ef 91       	pop	r30
    4984:	bf 91       	pop	r27
    4986:	af 91       	pop	r26
    4988:	9f 91       	pop	r25
    498a:	8f 91       	pop	r24
    498c:	7f 91       	pop	r23
    498e:	6f 91       	pop	r22
    4990:	5f 91       	pop	r21
    4992:	4f 91       	pop	r20
    4994:	3f 91       	pop	r19
    4996:	2f 91       	pop	r18
    4998:	0f 90       	pop	r0
    499a:	0b be       	out	0x3b, r0	; 59
    499c:	0f 90       	pop	r0
    499e:	0f be       	out	0x3f, r0	; 63
    49a0:	0f 90       	pop	r0
    49a2:	1f 90       	pop	r1
    49a4:	18 95       	reti

000049a6 <__vector_52>:
    49a6:	1f 92       	push	r1
    49a8:	0f 92       	push	r0
    49aa:	0f b6       	in	r0, 0x3f	; 63
    49ac:	0f 92       	push	r0
    49ae:	11 24       	eor	r1, r1
    49b0:	0b b6       	in	r0, 0x3b	; 59
    49b2:	0f 92       	push	r0
    49b4:	2f 93       	push	r18
    49b6:	3f 93       	push	r19
    49b8:	4f 93       	push	r20
    49ba:	5f 93       	push	r21
    49bc:	6f 93       	push	r22
    49be:	7f 93       	push	r23
    49c0:	8f 93       	push	r24
    49c2:	9f 93       	push	r25
    49c4:	af 93       	push	r26
    49c6:	bf 93       	push	r27
    49c8:	ef 93       	push	r30
    49ca:	ff 93       	push	r31
    49cc:	e0 91 bb 24 	lds	r30, 0x24BB	; 0x8024bb <tc_tce0_ccd_callback>
    49d0:	f0 91 bc 24 	lds	r31, 0x24BC	; 0x8024bc <tc_tce0_ccd_callback+0x1>
    49d4:	30 97       	sbiw	r30, 0x00	; 0
    49d6:	09 f0       	breq	.+2      	; 0x49da <__vector_52+0x34>
    49d8:	19 95       	eicall
    49da:	ff 91       	pop	r31
    49dc:	ef 91       	pop	r30
    49de:	bf 91       	pop	r27
    49e0:	af 91       	pop	r26
    49e2:	9f 91       	pop	r25
    49e4:	8f 91       	pop	r24
    49e6:	7f 91       	pop	r23
    49e8:	6f 91       	pop	r22
    49ea:	5f 91       	pop	r21
    49ec:	4f 91       	pop	r20
    49ee:	3f 91       	pop	r19
    49f0:	2f 91       	pop	r18
    49f2:	0f 90       	pop	r0
    49f4:	0b be       	out	0x3b, r0	; 59
    49f6:	0f 90       	pop	r0
    49f8:	0f be       	out	0x3f, r0	; 63
    49fa:	0f 90       	pop	r0
    49fc:	1f 90       	pop	r1
    49fe:	18 95       	reti

00004a00 <__vector_53>:
    4a00:	1f 92       	push	r1
    4a02:	0f 92       	push	r0
    4a04:	0f b6       	in	r0, 0x3f	; 63
    4a06:	0f 92       	push	r0
    4a08:	11 24       	eor	r1, r1
    4a0a:	0b b6       	in	r0, 0x3b	; 59
    4a0c:	0f 92       	push	r0
    4a0e:	2f 93       	push	r18
    4a10:	3f 93       	push	r19
    4a12:	4f 93       	push	r20
    4a14:	5f 93       	push	r21
    4a16:	6f 93       	push	r22
    4a18:	7f 93       	push	r23
    4a1a:	8f 93       	push	r24
    4a1c:	9f 93       	push	r25
    4a1e:	af 93       	push	r26
    4a20:	bf 93       	push	r27
    4a22:	ef 93       	push	r30
    4a24:	ff 93       	push	r31
    4a26:	e0 91 b9 24 	lds	r30, 0x24B9	; 0x8024b9 <tc_tce1_ovf_callback>
    4a2a:	f0 91 ba 24 	lds	r31, 0x24BA	; 0x8024ba <tc_tce1_ovf_callback+0x1>
    4a2e:	30 97       	sbiw	r30, 0x00	; 0
    4a30:	09 f0       	breq	.+2      	; 0x4a34 <__vector_53+0x34>
    4a32:	19 95       	eicall
    4a34:	ff 91       	pop	r31
    4a36:	ef 91       	pop	r30
    4a38:	bf 91       	pop	r27
    4a3a:	af 91       	pop	r26
    4a3c:	9f 91       	pop	r25
    4a3e:	8f 91       	pop	r24
    4a40:	7f 91       	pop	r23
    4a42:	6f 91       	pop	r22
    4a44:	5f 91       	pop	r21
    4a46:	4f 91       	pop	r20
    4a48:	3f 91       	pop	r19
    4a4a:	2f 91       	pop	r18
    4a4c:	0f 90       	pop	r0
    4a4e:	0b be       	out	0x3b, r0	; 59
    4a50:	0f 90       	pop	r0
    4a52:	0f be       	out	0x3f, r0	; 63
    4a54:	0f 90       	pop	r0
    4a56:	1f 90       	pop	r1
    4a58:	18 95       	reti

00004a5a <__vector_54>:
    4a5a:	1f 92       	push	r1
    4a5c:	0f 92       	push	r0
    4a5e:	0f b6       	in	r0, 0x3f	; 63
    4a60:	0f 92       	push	r0
    4a62:	11 24       	eor	r1, r1
    4a64:	0b b6       	in	r0, 0x3b	; 59
    4a66:	0f 92       	push	r0
    4a68:	2f 93       	push	r18
    4a6a:	3f 93       	push	r19
    4a6c:	4f 93       	push	r20
    4a6e:	5f 93       	push	r21
    4a70:	6f 93       	push	r22
    4a72:	7f 93       	push	r23
    4a74:	8f 93       	push	r24
    4a76:	9f 93       	push	r25
    4a78:	af 93       	push	r26
    4a7a:	bf 93       	push	r27
    4a7c:	ef 93       	push	r30
    4a7e:	ff 93       	push	r31
    4a80:	e0 91 b7 24 	lds	r30, 0x24B7	; 0x8024b7 <tc_tce1_err_callback>
    4a84:	f0 91 b8 24 	lds	r31, 0x24B8	; 0x8024b8 <tc_tce1_err_callback+0x1>
    4a88:	30 97       	sbiw	r30, 0x00	; 0
    4a8a:	09 f0       	breq	.+2      	; 0x4a8e <__vector_54+0x34>
    4a8c:	19 95       	eicall
    4a8e:	ff 91       	pop	r31
    4a90:	ef 91       	pop	r30
    4a92:	bf 91       	pop	r27
    4a94:	af 91       	pop	r26
    4a96:	9f 91       	pop	r25
    4a98:	8f 91       	pop	r24
    4a9a:	7f 91       	pop	r23
    4a9c:	6f 91       	pop	r22
    4a9e:	5f 91       	pop	r21
    4aa0:	4f 91       	pop	r20
    4aa2:	3f 91       	pop	r19
    4aa4:	2f 91       	pop	r18
    4aa6:	0f 90       	pop	r0
    4aa8:	0b be       	out	0x3b, r0	; 59
    4aaa:	0f 90       	pop	r0
    4aac:	0f be       	out	0x3f, r0	; 63
    4aae:	0f 90       	pop	r0
    4ab0:	1f 90       	pop	r1
    4ab2:	18 95       	reti

00004ab4 <__vector_55>:
    4ab4:	1f 92       	push	r1
    4ab6:	0f 92       	push	r0
    4ab8:	0f b6       	in	r0, 0x3f	; 63
    4aba:	0f 92       	push	r0
    4abc:	11 24       	eor	r1, r1
    4abe:	0b b6       	in	r0, 0x3b	; 59
    4ac0:	0f 92       	push	r0
    4ac2:	2f 93       	push	r18
    4ac4:	3f 93       	push	r19
    4ac6:	4f 93       	push	r20
    4ac8:	5f 93       	push	r21
    4aca:	6f 93       	push	r22
    4acc:	7f 93       	push	r23
    4ace:	8f 93       	push	r24
    4ad0:	9f 93       	push	r25
    4ad2:	af 93       	push	r26
    4ad4:	bf 93       	push	r27
    4ad6:	ef 93       	push	r30
    4ad8:	ff 93       	push	r31
    4ada:	e0 91 b5 24 	lds	r30, 0x24B5	; 0x8024b5 <tc_tce1_cca_callback>
    4ade:	f0 91 b6 24 	lds	r31, 0x24B6	; 0x8024b6 <tc_tce1_cca_callback+0x1>
    4ae2:	30 97       	sbiw	r30, 0x00	; 0
    4ae4:	09 f0       	breq	.+2      	; 0x4ae8 <__vector_55+0x34>
    4ae6:	19 95       	eicall
    4ae8:	ff 91       	pop	r31
    4aea:	ef 91       	pop	r30
    4aec:	bf 91       	pop	r27
    4aee:	af 91       	pop	r26
    4af0:	9f 91       	pop	r25
    4af2:	8f 91       	pop	r24
    4af4:	7f 91       	pop	r23
    4af6:	6f 91       	pop	r22
    4af8:	5f 91       	pop	r21
    4afa:	4f 91       	pop	r20
    4afc:	3f 91       	pop	r19
    4afe:	2f 91       	pop	r18
    4b00:	0f 90       	pop	r0
    4b02:	0b be       	out	0x3b, r0	; 59
    4b04:	0f 90       	pop	r0
    4b06:	0f be       	out	0x3f, r0	; 63
    4b08:	0f 90       	pop	r0
    4b0a:	1f 90       	pop	r1
    4b0c:	18 95       	reti

00004b0e <__vector_56>:
    4b0e:	1f 92       	push	r1
    4b10:	0f 92       	push	r0
    4b12:	0f b6       	in	r0, 0x3f	; 63
    4b14:	0f 92       	push	r0
    4b16:	11 24       	eor	r1, r1
    4b18:	0b b6       	in	r0, 0x3b	; 59
    4b1a:	0f 92       	push	r0
    4b1c:	2f 93       	push	r18
    4b1e:	3f 93       	push	r19
    4b20:	4f 93       	push	r20
    4b22:	5f 93       	push	r21
    4b24:	6f 93       	push	r22
    4b26:	7f 93       	push	r23
    4b28:	8f 93       	push	r24
    4b2a:	9f 93       	push	r25
    4b2c:	af 93       	push	r26
    4b2e:	bf 93       	push	r27
    4b30:	ef 93       	push	r30
    4b32:	ff 93       	push	r31
    4b34:	e0 91 b3 24 	lds	r30, 0x24B3	; 0x8024b3 <tc_tce1_ccb_callback>
    4b38:	f0 91 b4 24 	lds	r31, 0x24B4	; 0x8024b4 <tc_tce1_ccb_callback+0x1>
    4b3c:	30 97       	sbiw	r30, 0x00	; 0
    4b3e:	09 f0       	breq	.+2      	; 0x4b42 <__vector_56+0x34>
    4b40:	19 95       	eicall
    4b42:	ff 91       	pop	r31
    4b44:	ef 91       	pop	r30
    4b46:	bf 91       	pop	r27
    4b48:	af 91       	pop	r26
    4b4a:	9f 91       	pop	r25
    4b4c:	8f 91       	pop	r24
    4b4e:	7f 91       	pop	r23
    4b50:	6f 91       	pop	r22
    4b52:	5f 91       	pop	r21
    4b54:	4f 91       	pop	r20
    4b56:	3f 91       	pop	r19
    4b58:	2f 91       	pop	r18
    4b5a:	0f 90       	pop	r0
    4b5c:	0b be       	out	0x3b, r0	; 59
    4b5e:	0f 90       	pop	r0
    4b60:	0f be       	out	0x3f, r0	; 63
    4b62:	0f 90       	pop	r0
    4b64:	1f 90       	pop	r1
    4b66:	18 95       	reti

00004b68 <__vector_108>:
    4b68:	1f 92       	push	r1
    4b6a:	0f 92       	push	r0
    4b6c:	0f b6       	in	r0, 0x3f	; 63
    4b6e:	0f 92       	push	r0
    4b70:	11 24       	eor	r1, r1
    4b72:	0b b6       	in	r0, 0x3b	; 59
    4b74:	0f 92       	push	r0
    4b76:	2f 93       	push	r18
    4b78:	3f 93       	push	r19
    4b7a:	4f 93       	push	r20
    4b7c:	5f 93       	push	r21
    4b7e:	6f 93       	push	r22
    4b80:	7f 93       	push	r23
    4b82:	8f 93       	push	r24
    4b84:	9f 93       	push	r25
    4b86:	af 93       	push	r26
    4b88:	bf 93       	push	r27
    4b8a:	ef 93       	push	r30
    4b8c:	ff 93       	push	r31
    4b8e:	e0 91 b1 24 	lds	r30, 0x24B1	; 0x8024b1 <tc_tcf0_ovf_callback>
    4b92:	f0 91 b2 24 	lds	r31, 0x24B2	; 0x8024b2 <tc_tcf0_ovf_callback+0x1>
    4b96:	30 97       	sbiw	r30, 0x00	; 0
    4b98:	09 f0       	breq	.+2      	; 0x4b9c <__vector_108+0x34>
    4b9a:	19 95       	eicall
    4b9c:	ff 91       	pop	r31
    4b9e:	ef 91       	pop	r30
    4ba0:	bf 91       	pop	r27
    4ba2:	af 91       	pop	r26
    4ba4:	9f 91       	pop	r25
    4ba6:	8f 91       	pop	r24
    4ba8:	7f 91       	pop	r23
    4baa:	6f 91       	pop	r22
    4bac:	5f 91       	pop	r21
    4bae:	4f 91       	pop	r20
    4bb0:	3f 91       	pop	r19
    4bb2:	2f 91       	pop	r18
    4bb4:	0f 90       	pop	r0
    4bb6:	0b be       	out	0x3b, r0	; 59
    4bb8:	0f 90       	pop	r0
    4bba:	0f be       	out	0x3f, r0	; 63
    4bbc:	0f 90       	pop	r0
    4bbe:	1f 90       	pop	r1
    4bc0:	18 95       	reti

00004bc2 <__vector_109>:
    4bc2:	1f 92       	push	r1
    4bc4:	0f 92       	push	r0
    4bc6:	0f b6       	in	r0, 0x3f	; 63
    4bc8:	0f 92       	push	r0
    4bca:	11 24       	eor	r1, r1
    4bcc:	0b b6       	in	r0, 0x3b	; 59
    4bce:	0f 92       	push	r0
    4bd0:	2f 93       	push	r18
    4bd2:	3f 93       	push	r19
    4bd4:	4f 93       	push	r20
    4bd6:	5f 93       	push	r21
    4bd8:	6f 93       	push	r22
    4bda:	7f 93       	push	r23
    4bdc:	8f 93       	push	r24
    4bde:	9f 93       	push	r25
    4be0:	af 93       	push	r26
    4be2:	bf 93       	push	r27
    4be4:	ef 93       	push	r30
    4be6:	ff 93       	push	r31
    4be8:	e0 91 af 24 	lds	r30, 0x24AF	; 0x8024af <tc_tcf0_err_callback>
    4bec:	f0 91 b0 24 	lds	r31, 0x24B0	; 0x8024b0 <tc_tcf0_err_callback+0x1>
    4bf0:	30 97       	sbiw	r30, 0x00	; 0
    4bf2:	09 f0       	breq	.+2      	; 0x4bf6 <__vector_109+0x34>
    4bf4:	19 95       	eicall
    4bf6:	ff 91       	pop	r31
    4bf8:	ef 91       	pop	r30
    4bfa:	bf 91       	pop	r27
    4bfc:	af 91       	pop	r26
    4bfe:	9f 91       	pop	r25
    4c00:	8f 91       	pop	r24
    4c02:	7f 91       	pop	r23
    4c04:	6f 91       	pop	r22
    4c06:	5f 91       	pop	r21
    4c08:	4f 91       	pop	r20
    4c0a:	3f 91       	pop	r19
    4c0c:	2f 91       	pop	r18
    4c0e:	0f 90       	pop	r0
    4c10:	0b be       	out	0x3b, r0	; 59
    4c12:	0f 90       	pop	r0
    4c14:	0f be       	out	0x3f, r0	; 63
    4c16:	0f 90       	pop	r0
    4c18:	1f 90       	pop	r1
    4c1a:	18 95       	reti

00004c1c <__vector_110>:
    4c1c:	1f 92       	push	r1
    4c1e:	0f 92       	push	r0
    4c20:	0f b6       	in	r0, 0x3f	; 63
    4c22:	0f 92       	push	r0
    4c24:	11 24       	eor	r1, r1
    4c26:	0b b6       	in	r0, 0x3b	; 59
    4c28:	0f 92       	push	r0
    4c2a:	2f 93       	push	r18
    4c2c:	3f 93       	push	r19
    4c2e:	4f 93       	push	r20
    4c30:	5f 93       	push	r21
    4c32:	6f 93       	push	r22
    4c34:	7f 93       	push	r23
    4c36:	8f 93       	push	r24
    4c38:	9f 93       	push	r25
    4c3a:	af 93       	push	r26
    4c3c:	bf 93       	push	r27
    4c3e:	ef 93       	push	r30
    4c40:	ff 93       	push	r31
    4c42:	e0 91 ad 24 	lds	r30, 0x24AD	; 0x8024ad <tc_tcf0_cca_callback>
    4c46:	f0 91 ae 24 	lds	r31, 0x24AE	; 0x8024ae <tc_tcf0_cca_callback+0x1>
    4c4a:	30 97       	sbiw	r30, 0x00	; 0
    4c4c:	09 f0       	breq	.+2      	; 0x4c50 <__vector_110+0x34>
    4c4e:	19 95       	eicall
    4c50:	ff 91       	pop	r31
    4c52:	ef 91       	pop	r30
    4c54:	bf 91       	pop	r27
    4c56:	af 91       	pop	r26
    4c58:	9f 91       	pop	r25
    4c5a:	8f 91       	pop	r24
    4c5c:	7f 91       	pop	r23
    4c5e:	6f 91       	pop	r22
    4c60:	5f 91       	pop	r21
    4c62:	4f 91       	pop	r20
    4c64:	3f 91       	pop	r19
    4c66:	2f 91       	pop	r18
    4c68:	0f 90       	pop	r0
    4c6a:	0b be       	out	0x3b, r0	; 59
    4c6c:	0f 90       	pop	r0
    4c6e:	0f be       	out	0x3f, r0	; 63
    4c70:	0f 90       	pop	r0
    4c72:	1f 90       	pop	r1
    4c74:	18 95       	reti

00004c76 <__vector_111>:
    4c76:	1f 92       	push	r1
    4c78:	0f 92       	push	r0
    4c7a:	0f b6       	in	r0, 0x3f	; 63
    4c7c:	0f 92       	push	r0
    4c7e:	11 24       	eor	r1, r1
    4c80:	0b b6       	in	r0, 0x3b	; 59
    4c82:	0f 92       	push	r0
    4c84:	2f 93       	push	r18
    4c86:	3f 93       	push	r19
    4c88:	4f 93       	push	r20
    4c8a:	5f 93       	push	r21
    4c8c:	6f 93       	push	r22
    4c8e:	7f 93       	push	r23
    4c90:	8f 93       	push	r24
    4c92:	9f 93       	push	r25
    4c94:	af 93       	push	r26
    4c96:	bf 93       	push	r27
    4c98:	ef 93       	push	r30
    4c9a:	ff 93       	push	r31
    4c9c:	e0 91 ab 24 	lds	r30, 0x24AB	; 0x8024ab <tc_tcf0_ccb_callback>
    4ca0:	f0 91 ac 24 	lds	r31, 0x24AC	; 0x8024ac <tc_tcf0_ccb_callback+0x1>
    4ca4:	30 97       	sbiw	r30, 0x00	; 0
    4ca6:	09 f0       	breq	.+2      	; 0x4caa <__vector_111+0x34>
    4ca8:	19 95       	eicall
    4caa:	ff 91       	pop	r31
    4cac:	ef 91       	pop	r30
    4cae:	bf 91       	pop	r27
    4cb0:	af 91       	pop	r26
    4cb2:	9f 91       	pop	r25
    4cb4:	8f 91       	pop	r24
    4cb6:	7f 91       	pop	r23
    4cb8:	6f 91       	pop	r22
    4cba:	5f 91       	pop	r21
    4cbc:	4f 91       	pop	r20
    4cbe:	3f 91       	pop	r19
    4cc0:	2f 91       	pop	r18
    4cc2:	0f 90       	pop	r0
    4cc4:	0b be       	out	0x3b, r0	; 59
    4cc6:	0f 90       	pop	r0
    4cc8:	0f be       	out	0x3f, r0	; 63
    4cca:	0f 90       	pop	r0
    4ccc:	1f 90       	pop	r1
    4cce:	18 95       	reti

00004cd0 <__vector_112>:
    4cd0:	1f 92       	push	r1
    4cd2:	0f 92       	push	r0
    4cd4:	0f b6       	in	r0, 0x3f	; 63
    4cd6:	0f 92       	push	r0
    4cd8:	11 24       	eor	r1, r1
    4cda:	0b b6       	in	r0, 0x3b	; 59
    4cdc:	0f 92       	push	r0
    4cde:	2f 93       	push	r18
    4ce0:	3f 93       	push	r19
    4ce2:	4f 93       	push	r20
    4ce4:	5f 93       	push	r21
    4ce6:	6f 93       	push	r22
    4ce8:	7f 93       	push	r23
    4cea:	8f 93       	push	r24
    4cec:	9f 93       	push	r25
    4cee:	af 93       	push	r26
    4cf0:	bf 93       	push	r27
    4cf2:	ef 93       	push	r30
    4cf4:	ff 93       	push	r31
    4cf6:	e0 91 a9 24 	lds	r30, 0x24A9	; 0x8024a9 <tc_tcf0_ccc_callback>
    4cfa:	f0 91 aa 24 	lds	r31, 0x24AA	; 0x8024aa <tc_tcf0_ccc_callback+0x1>
    4cfe:	30 97       	sbiw	r30, 0x00	; 0
    4d00:	09 f0       	breq	.+2      	; 0x4d04 <__vector_112+0x34>
    4d02:	19 95       	eicall
    4d04:	ff 91       	pop	r31
    4d06:	ef 91       	pop	r30
    4d08:	bf 91       	pop	r27
    4d0a:	af 91       	pop	r26
    4d0c:	9f 91       	pop	r25
    4d0e:	8f 91       	pop	r24
    4d10:	7f 91       	pop	r23
    4d12:	6f 91       	pop	r22
    4d14:	5f 91       	pop	r21
    4d16:	4f 91       	pop	r20
    4d18:	3f 91       	pop	r19
    4d1a:	2f 91       	pop	r18
    4d1c:	0f 90       	pop	r0
    4d1e:	0b be       	out	0x3b, r0	; 59
    4d20:	0f 90       	pop	r0
    4d22:	0f be       	out	0x3f, r0	; 63
    4d24:	0f 90       	pop	r0
    4d26:	1f 90       	pop	r1
    4d28:	18 95       	reti

00004d2a <__vector_113>:
    4d2a:	1f 92       	push	r1
    4d2c:	0f 92       	push	r0
    4d2e:	0f b6       	in	r0, 0x3f	; 63
    4d30:	0f 92       	push	r0
    4d32:	11 24       	eor	r1, r1
    4d34:	0b b6       	in	r0, 0x3b	; 59
    4d36:	0f 92       	push	r0
    4d38:	2f 93       	push	r18
    4d3a:	3f 93       	push	r19
    4d3c:	4f 93       	push	r20
    4d3e:	5f 93       	push	r21
    4d40:	6f 93       	push	r22
    4d42:	7f 93       	push	r23
    4d44:	8f 93       	push	r24
    4d46:	9f 93       	push	r25
    4d48:	af 93       	push	r26
    4d4a:	bf 93       	push	r27
    4d4c:	ef 93       	push	r30
    4d4e:	ff 93       	push	r31
    4d50:	e0 91 a7 24 	lds	r30, 0x24A7	; 0x8024a7 <tc_tcf0_ccd_callback>
    4d54:	f0 91 a8 24 	lds	r31, 0x24A8	; 0x8024a8 <tc_tcf0_ccd_callback+0x1>
    4d58:	30 97       	sbiw	r30, 0x00	; 0
    4d5a:	09 f0       	breq	.+2      	; 0x4d5e <__vector_113+0x34>
    4d5c:	19 95       	eicall
    4d5e:	ff 91       	pop	r31
    4d60:	ef 91       	pop	r30
    4d62:	bf 91       	pop	r27
    4d64:	af 91       	pop	r26
    4d66:	9f 91       	pop	r25
    4d68:	8f 91       	pop	r24
    4d6a:	7f 91       	pop	r23
    4d6c:	6f 91       	pop	r22
    4d6e:	5f 91       	pop	r21
    4d70:	4f 91       	pop	r20
    4d72:	3f 91       	pop	r19
    4d74:	2f 91       	pop	r18
    4d76:	0f 90       	pop	r0
    4d78:	0b be       	out	0x3b, r0	; 59
    4d7a:	0f 90       	pop	r0
    4d7c:	0f be       	out	0x3f, r0	; 63
    4d7e:	0f 90       	pop	r0
    4d80:	1f 90       	pop	r1
    4d82:	18 95       	reti

00004d84 <tc_enable>:
    4d84:	1f 93       	push	r17
    4d86:	cf 93       	push	r28
    4d88:	df 93       	push	r29
    4d8a:	1f 92       	push	r1
    4d8c:	1f 92       	push	r1
    4d8e:	cd b7       	in	r28, 0x3d	; 61
    4d90:	de b7       	in	r29, 0x3e	; 62
    4d92:	2f b7       	in	r18, 0x3f	; 63
    4d94:	2a 83       	std	Y+2, r18	; 0x02
    4d96:	f8 94       	cli
    4d98:	1a 81       	ldd	r17, Y+2	; 0x02
    4d9a:	28 2f       	mov	r18, r24
    4d9c:	39 2f       	mov	r19, r25
    4d9e:	21 15       	cp	r18, r1
    4da0:	88 e0       	ldi	r24, 0x08	; 8
    4da2:	38 07       	cpc	r19, r24
    4da4:	49 f4       	brne	.+18     	; 0x4db8 <tc_enable+0x34>
    4da6:	61 e0       	ldi	r22, 0x01	; 1
    4da8:	83 e0       	ldi	r24, 0x03	; 3
    4daa:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4dae:	64 e0       	ldi	r22, 0x04	; 4
    4db0:	83 e0       	ldi	r24, 0x03	; 3
    4db2:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4db6:	4f c0       	rjmp	.+158    	; 0x4e56 <tc_enable+0xd2>
    4db8:	20 34       	cpi	r18, 0x40	; 64
    4dba:	88 e0       	ldi	r24, 0x08	; 8
    4dbc:	38 07       	cpc	r19, r24
    4dbe:	49 f4       	brne	.+18     	; 0x4dd2 <tc_enable+0x4e>
    4dc0:	62 e0       	ldi	r22, 0x02	; 2
    4dc2:	83 e0       	ldi	r24, 0x03	; 3
    4dc4:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4dc8:	64 e0       	ldi	r22, 0x04	; 4
    4dca:	83 e0       	ldi	r24, 0x03	; 3
    4dcc:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4dd0:	42 c0       	rjmp	.+132    	; 0x4e56 <tc_enable+0xd2>
    4dd2:	21 15       	cp	r18, r1
    4dd4:	89 e0       	ldi	r24, 0x09	; 9
    4dd6:	38 07       	cpc	r19, r24
    4dd8:	49 f4       	brne	.+18     	; 0x4dec <tc_enable+0x68>
    4dda:	61 e0       	ldi	r22, 0x01	; 1
    4ddc:	84 e0       	ldi	r24, 0x04	; 4
    4dde:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4de2:	64 e0       	ldi	r22, 0x04	; 4
    4de4:	84 e0       	ldi	r24, 0x04	; 4
    4de6:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4dea:	35 c0       	rjmp	.+106    	; 0x4e56 <tc_enable+0xd2>
    4dec:	20 34       	cpi	r18, 0x40	; 64
    4dee:	89 e0       	ldi	r24, 0x09	; 9
    4df0:	38 07       	cpc	r19, r24
    4df2:	49 f4       	brne	.+18     	; 0x4e06 <tc_enable+0x82>
    4df4:	62 e0       	ldi	r22, 0x02	; 2
    4df6:	84 e0       	ldi	r24, 0x04	; 4
    4df8:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4dfc:	64 e0       	ldi	r22, 0x04	; 4
    4dfe:	84 e0       	ldi	r24, 0x04	; 4
    4e00:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4e04:	28 c0       	rjmp	.+80     	; 0x4e56 <tc_enable+0xd2>
    4e06:	21 15       	cp	r18, r1
    4e08:	8a e0       	ldi	r24, 0x0A	; 10
    4e0a:	38 07       	cpc	r19, r24
    4e0c:	49 f4       	brne	.+18     	; 0x4e20 <tc_enable+0x9c>
    4e0e:	61 e0       	ldi	r22, 0x01	; 1
    4e10:	85 e0       	ldi	r24, 0x05	; 5
    4e12:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4e16:	64 e0       	ldi	r22, 0x04	; 4
    4e18:	85 e0       	ldi	r24, 0x05	; 5
    4e1a:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4e1e:	1b c0       	rjmp	.+54     	; 0x4e56 <tc_enable+0xd2>
    4e20:	20 34       	cpi	r18, 0x40	; 64
    4e22:	8a e0       	ldi	r24, 0x0A	; 10
    4e24:	38 07       	cpc	r19, r24
    4e26:	49 f4       	brne	.+18     	; 0x4e3a <tc_enable+0xb6>
    4e28:	62 e0       	ldi	r22, 0x02	; 2
    4e2a:	85 e0       	ldi	r24, 0x05	; 5
    4e2c:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4e30:	64 e0       	ldi	r22, 0x04	; 4
    4e32:	85 e0       	ldi	r24, 0x05	; 5
    4e34:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4e38:	0e c0       	rjmp	.+28     	; 0x4e56 <tc_enable+0xd2>
    4e3a:	21 15       	cp	r18, r1
    4e3c:	3b 40       	sbci	r19, 0x0B	; 11
    4e3e:	49 f4       	brne	.+18     	; 0x4e52 <tc_enable+0xce>
    4e40:	61 e0       	ldi	r22, 0x01	; 1
    4e42:	86 e0       	ldi	r24, 0x06	; 6
    4e44:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4e48:	64 e0       	ldi	r22, 0x04	; 4
    4e4a:	86 e0       	ldi	r24, 0x06	; 6
    4e4c:	0e 94 cc 3a 	call	0x7598	; 0x7598 <sysclk_enable_module>
    4e50:	02 c0       	rjmp	.+4      	; 0x4e56 <tc_enable+0xd2>
    4e52:	1f bf       	out	0x3f, r17	; 63
    4e54:	10 c0       	rjmp	.+32     	; 0x4e76 <tc_enable+0xf2>
    4e56:	80 91 5c 2a 	lds	r24, 0x2A5C	; 0x802a5c <sleepmgr_locks+0x1>
    4e5a:	8f 3f       	cpi	r24, 0xFF	; 255
    4e5c:	09 f4       	brne	.+2      	; 0x4e60 <tc_enable+0xdc>
    4e5e:	ff cf       	rjmp	.-2      	; 0x4e5e <tc_enable+0xda>
    4e60:	8f b7       	in	r24, 0x3f	; 63
    4e62:	89 83       	std	Y+1, r24	; 0x01
    4e64:	f8 94       	cli
    4e66:	99 81       	ldd	r25, Y+1	; 0x01
    4e68:	eb e5       	ldi	r30, 0x5B	; 91
    4e6a:	fa e2       	ldi	r31, 0x2A	; 42
    4e6c:	81 81       	ldd	r24, Z+1	; 0x01
    4e6e:	8f 5f       	subi	r24, 0xFF	; 255
    4e70:	81 83       	std	Z+1, r24	; 0x01
    4e72:	9f bf       	out	0x3f, r25	; 63
    4e74:	1f bf       	out	0x3f, r17	; 63
    4e76:	0f 90       	pop	r0
    4e78:	0f 90       	pop	r0
    4e7a:	df 91       	pop	r29
    4e7c:	cf 91       	pop	r28
    4e7e:	1f 91       	pop	r17
    4e80:	08 95       	ret

00004e82 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    4e82:	81 15       	cp	r24, r1
    4e84:	28 e0       	ldi	r18, 0x08	; 8
    4e86:	92 07       	cpc	r25, r18
    4e88:	29 f4       	brne	.+10     	; 0x4e94 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    4e8a:	60 93 ed 24 	sts	0x24ED, r22	; 0x8024ed <tc_tcc0_ovf_callback>
    4e8e:	70 93 ee 24 	sts	0x24EE, r23	; 0x8024ee <tc_tcc0_ovf_callback+0x1>
    4e92:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    4e94:	80 34       	cpi	r24, 0x40	; 64
    4e96:	28 e0       	ldi	r18, 0x08	; 8
    4e98:	92 07       	cpc	r25, r18
    4e9a:	29 f4       	brne	.+10     	; 0x4ea6 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    4e9c:	60 93 e1 24 	sts	0x24E1, r22	; 0x8024e1 <tc_tcc1_ovf_callback>
    4ea0:	70 93 e2 24 	sts	0x24E2, r23	; 0x8024e2 <tc_tcc1_ovf_callback+0x1>
    4ea4:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    4ea6:	81 15       	cp	r24, r1
    4ea8:	29 e0       	ldi	r18, 0x09	; 9
    4eaa:	92 07       	cpc	r25, r18
    4eac:	29 f4       	brne	.+10     	; 0x4eb8 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    4eae:	60 93 d9 24 	sts	0x24D9, r22	; 0x8024d9 <tc_tcd0_ovf_callback>
    4eb2:	70 93 da 24 	sts	0x24DA, r23	; 0x8024da <tc_tcd0_ovf_callback+0x1>
    4eb6:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    4eb8:	80 34       	cpi	r24, 0x40	; 64
    4eba:	29 e0       	ldi	r18, 0x09	; 9
    4ebc:	92 07       	cpc	r25, r18
    4ebe:	29 f4       	brne	.+10     	; 0x4eca <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    4ec0:	60 93 cd 24 	sts	0x24CD, r22	; 0x8024cd <tc_tcd1_ovf_callback>
    4ec4:	70 93 ce 24 	sts	0x24CE, r23	; 0x8024ce <tc_tcd1_ovf_callback+0x1>
    4ec8:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    4eca:	81 15       	cp	r24, r1
    4ecc:	2a e0       	ldi	r18, 0x0A	; 10
    4ece:	92 07       	cpc	r25, r18
    4ed0:	29 f4       	brne	.+10     	; 0x4edc <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    4ed2:	60 93 c5 24 	sts	0x24C5, r22	; 0x8024c5 <tc_tce0_ovf_callback>
    4ed6:	70 93 c6 24 	sts	0x24C6, r23	; 0x8024c6 <tc_tce0_ovf_callback+0x1>
    4eda:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    4edc:	80 34       	cpi	r24, 0x40	; 64
    4ede:	2a e0       	ldi	r18, 0x0A	; 10
    4ee0:	92 07       	cpc	r25, r18
    4ee2:	29 f4       	brne	.+10     	; 0x4eee <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    4ee4:	60 93 b9 24 	sts	0x24B9, r22	; 0x8024b9 <tc_tce1_ovf_callback>
    4ee8:	70 93 ba 24 	sts	0x24BA, r23	; 0x8024ba <tc_tce1_ovf_callback+0x1>
    4eec:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    4eee:	81 15       	cp	r24, r1
    4ef0:	9b 40       	sbci	r25, 0x0B	; 11
    4ef2:	21 f4       	brne	.+8      	; 0x4efc <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    4ef4:	60 93 b1 24 	sts	0x24B1, r22	; 0x8024b1 <tc_tcf0_ovf_callback>
    4ef8:	70 93 b2 24 	sts	0x24B2, r23	; 0x8024b2 <tc_tcf0_ovf_callback+0x1>
    4efc:	08 95       	ret

00004efe <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    4efe:	cf 93       	push	r28
    4f00:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    4f02:	e0 91 ef 24 	lds	r30, 0x24EF	; 0x8024ef <transfer>
    4f06:	f0 91 f0 24 	lds	r31, 0x24F0	; 0x8024f0 <transfer+0x1>
    4f0a:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    4f0c:	83 ff       	sbrs	r24, 3
    4f0e:	08 c0       	rjmp	.+16     	; 0x4f20 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    4f10:	88 60       	ori	r24, 0x08	; 8
    4f12:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    4f14:	83 e0       	ldi	r24, 0x03	; 3
    4f16:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    4f18:	86 ef       	ldi	r24, 0xF6	; 246
    4f1a:	80 93 f9 24 	sts	0x24F9, r24	; 0x8024f9 <transfer+0xa>
    4f1e:	83 c0       	rjmp	.+262    	; 0x5026 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    4f20:	98 2f       	mov	r25, r24
    4f22:	94 71       	andi	r25, 0x14	; 20
    4f24:	31 f0       	breq	.+12     	; 0x4f32 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4f26:	83 e0       	ldi	r24, 0x03	; 3
    4f28:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    4f2a:	8f ef       	ldi	r24, 0xFF	; 255
    4f2c:	80 93 f9 24 	sts	0x24F9, r24	; 0x8024f9 <transfer+0xa>
    4f30:	7a c0       	rjmp	.+244    	; 0x5026 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    4f32:	86 ff       	sbrs	r24, 6
    4f34:	43 c0       	rjmp	.+134    	; 0x4fbc <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    4f36:	cf ee       	ldi	r28, 0xEF	; 239
    4f38:	d4 e2       	ldi	r29, 0x24	; 36
    4f3a:	aa 81       	ldd	r26, Y+2	; 0x02
    4f3c:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    4f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    4f40:	9d 81       	ldd	r25, Y+5	; 0x05
    4f42:	14 96       	adiw	r26, 0x04	; 4
    4f44:	2d 91       	ld	r18, X+
    4f46:	3c 91       	ld	r19, X
    4f48:	15 97       	sbiw	r26, 0x05	; 5
    4f4a:	82 17       	cp	r24, r18
    4f4c:	93 07       	cpc	r25, r19
    4f4e:	6c f4       	brge	.+26     	; 0x4f6a <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    4f50:	9c 01       	movw	r18, r24
    4f52:	2f 5f       	subi	r18, 0xFF	; 255
    4f54:	3f 4f       	sbci	r19, 0xFF	; 255
    4f56:	20 93 f3 24 	sts	0x24F3, r18	; 0x8024f3 <transfer+0x4>
    4f5a:	30 93 f4 24 	sts	0x24F4, r19	; 0x8024f4 <transfer+0x5>
    4f5e:	a8 0f       	add	r26, r24
    4f60:	b9 1f       	adc	r27, r25
    4f62:	11 96       	adiw	r26, 0x01	; 1
    4f64:	8c 91       	ld	r24, X
    4f66:	87 83       	std	Z+7, r24	; 0x07
    4f68:	5e c0       	rjmp	.+188    	; 0x5026 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    4f6a:	80 91 f5 24 	lds	r24, 0x24F5	; 0x8024f5 <transfer+0x6>
    4f6e:	90 91 f6 24 	lds	r25, 0x24F6	; 0x8024f6 <transfer+0x7>
    4f72:	18 96       	adiw	r26, 0x08	; 8
    4f74:	2d 91       	ld	r18, X+
    4f76:	3c 91       	ld	r19, X
    4f78:	19 97       	sbiw	r26, 0x09	; 9
    4f7a:	82 17       	cp	r24, r18
    4f7c:	93 07       	cpc	r25, r19
    4f7e:	c8 f4       	brcc	.+50     	; 0x4fb2 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    4f80:	20 91 f7 24 	lds	r18, 0x24F7	; 0x8024f7 <transfer+0x8>
    4f84:	22 23       	and	r18, r18
    4f86:	21 f0       	breq	.+8      	; 0x4f90 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    4f88:	86 81       	ldd	r24, Z+6	; 0x06
    4f8a:	81 60       	ori	r24, 0x01	; 1
    4f8c:	86 83       	std	Z+6, r24	; 0x06
    4f8e:	4b c0       	rjmp	.+150    	; 0x5026 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    4f90:	16 96       	adiw	r26, 0x06	; 6
    4f92:	2d 91       	ld	r18, X+
    4f94:	3c 91       	ld	r19, X
    4f96:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    4f98:	ac 01       	movw	r20, r24
    4f9a:	4f 5f       	subi	r20, 0xFF	; 255
    4f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    4f9e:	40 93 f5 24 	sts	0x24F5, r20	; 0x8024f5 <transfer+0x6>
    4fa2:	50 93 f6 24 	sts	0x24F6, r21	; 0x8024f6 <transfer+0x7>
    4fa6:	d9 01       	movw	r26, r18
    4fa8:	a8 0f       	add	r26, r24
    4faa:	b9 1f       	adc	r27, r25
    4fac:	8c 91       	ld	r24, X
    4fae:	87 83       	std	Z+7, r24	; 0x07
    4fb0:	3a c0       	rjmp	.+116    	; 0x5026 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4fb2:	83 e0       	ldi	r24, 0x03	; 3
    4fb4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    4fb6:	10 92 f9 24 	sts	0x24F9, r1	; 0x8024f9 <transfer+0xa>
    4fba:	35 c0       	rjmp	.+106    	; 0x5026 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    4fbc:	88 23       	and	r24, r24
    4fbe:	84 f5       	brge	.+96     	; 0x5020 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    4fc0:	af ee       	ldi	r26, 0xEF	; 239
    4fc2:	b4 e2       	ldi	r27, 0x24	; 36
    4fc4:	12 96       	adiw	r26, 0x02	; 2
    4fc6:	cd 91       	ld	r28, X+
    4fc8:	dc 91       	ld	r29, X
    4fca:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    4fcc:	16 96       	adiw	r26, 0x06	; 6
    4fce:	8d 91       	ld	r24, X+
    4fd0:	9c 91       	ld	r25, X
    4fd2:	17 97       	sbiw	r26, 0x07	; 7
    4fd4:	28 85       	ldd	r18, Y+8	; 0x08
    4fd6:	39 85       	ldd	r19, Y+9	; 0x09
    4fd8:	82 17       	cp	r24, r18
    4fda:	93 07       	cpc	r25, r19
    4fdc:	d8 f4       	brcc	.+54     	; 0x5014 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    4fde:	6e 81       	ldd	r22, Y+6	; 0x06
    4fe0:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    4fe2:	9c 01       	movw	r18, r24
    4fe4:	2f 5f       	subi	r18, 0xFF	; 255
    4fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    4fe8:	20 93 f5 24 	sts	0x24F5, r18	; 0x8024f5 <transfer+0x6>
    4fec:	30 93 f6 24 	sts	0x24F6, r19	; 0x8024f6 <transfer+0x7>
    4ff0:	47 81       	ldd	r20, Z+7	; 0x07
    4ff2:	db 01       	movw	r26, r22
    4ff4:	a8 0f       	add	r26, r24
    4ff6:	b9 1f       	adc	r27, r25
    4ff8:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    4ffa:	88 85       	ldd	r24, Y+8	; 0x08
    4ffc:	99 85       	ldd	r25, Y+9	; 0x09
    4ffe:	28 17       	cp	r18, r24
    5000:	39 07       	cpc	r19, r25
    5002:	18 f4       	brcc	.+6      	; 0x500a <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    5004:	82 e0       	ldi	r24, 0x02	; 2
    5006:	83 83       	std	Z+3, r24	; 0x03
    5008:	0e c0       	rjmp	.+28     	; 0x5026 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    500a:	87 e0       	ldi	r24, 0x07	; 7
    500c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    500e:	10 92 f9 24 	sts	0x24F9, r1	; 0x8024f9 <transfer+0xa>
    5012:	09 c0       	rjmp	.+18     	; 0x5026 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5014:	83 e0       	ldi	r24, 0x03	; 3
    5016:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    5018:	89 ef       	ldi	r24, 0xF9	; 249
    501a:	80 93 f9 24 	sts	0x24F9, r24	; 0x8024f9 <transfer+0xa>
    501e:	03 c0       	rjmp	.+6      	; 0x5026 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    5020:	8b ef       	ldi	r24, 0xFB	; 251
    5022:	80 93 f9 24 	sts	0x24F9, r24	; 0x8024f9 <transfer+0xa>
	}
}
    5026:	df 91       	pop	r29
    5028:	cf 91       	pop	r28
    502a:	08 95       	ret

0000502c <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    502c:	1f 92       	push	r1
    502e:	0f 92       	push	r0
    5030:	0f b6       	in	r0, 0x3f	; 63
    5032:	0f 92       	push	r0
    5034:	11 24       	eor	r1, r1
    5036:	0b b6       	in	r0, 0x3b	; 59
    5038:	0f 92       	push	r0
    503a:	2f 93       	push	r18
    503c:	3f 93       	push	r19
    503e:	4f 93       	push	r20
    5040:	5f 93       	push	r21
    5042:	6f 93       	push	r22
    5044:	7f 93       	push	r23
    5046:	8f 93       	push	r24
    5048:	9f 93       	push	r25
    504a:	af 93       	push	r26
    504c:	bf 93       	push	r27
    504e:	ef 93       	push	r30
    5050:	ff 93       	push	r31
    5052:	55 df       	rcall	.-342    	; 0x4efe <twim_interrupt_handler>
    5054:	ff 91       	pop	r31
    5056:	ef 91       	pop	r30
    5058:	bf 91       	pop	r27
    505a:	af 91       	pop	r26
    505c:	9f 91       	pop	r25
    505e:	8f 91       	pop	r24
    5060:	7f 91       	pop	r23
    5062:	6f 91       	pop	r22
    5064:	5f 91       	pop	r21
    5066:	4f 91       	pop	r20
    5068:	3f 91       	pop	r19
    506a:	2f 91       	pop	r18
    506c:	0f 90       	pop	r0
    506e:	0b be       	out	0x3b, r0	; 59
    5070:	0f 90       	pop	r0
    5072:	0f be       	out	0x3f, r0	; 63
    5074:	0f 90       	pop	r0
    5076:	1f 90       	pop	r1
    5078:	18 95       	reti

0000507a <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    507a:	1f 92       	push	r1
    507c:	0f 92       	push	r0
    507e:	0f b6       	in	r0, 0x3f	; 63
    5080:	0f 92       	push	r0
    5082:	11 24       	eor	r1, r1
    5084:	0b b6       	in	r0, 0x3b	; 59
    5086:	0f 92       	push	r0
    5088:	2f 93       	push	r18
    508a:	3f 93       	push	r19
    508c:	4f 93       	push	r20
    508e:	5f 93       	push	r21
    5090:	6f 93       	push	r22
    5092:	7f 93       	push	r23
    5094:	8f 93       	push	r24
    5096:	9f 93       	push	r25
    5098:	af 93       	push	r26
    509a:	bf 93       	push	r27
    509c:	ef 93       	push	r30
    509e:	ff 93       	push	r31
    50a0:	2e df       	rcall	.-420    	; 0x4efe <twim_interrupt_handler>
    50a2:	ff 91       	pop	r31
    50a4:	ef 91       	pop	r30
    50a6:	bf 91       	pop	r27
    50a8:	af 91       	pop	r26
    50aa:	9f 91       	pop	r25
    50ac:	8f 91       	pop	r24
    50ae:	7f 91       	pop	r23
    50b0:	6f 91       	pop	r22
    50b2:	5f 91       	pop	r21
    50b4:	4f 91       	pop	r20
    50b6:	3f 91       	pop	r19
    50b8:	2f 91       	pop	r18
    50ba:	0f 90       	pop	r0
    50bc:	0b be       	out	0x3b, r0	; 59
    50be:	0f 90       	pop	r0
    50c0:	0f be       	out	0x3f, r0	; 63
    50c2:	0f 90       	pop	r0
    50c4:	1f 90       	pop	r1
    50c6:	18 95       	reti

000050c8 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    50c8:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    50ca:	db 01       	movw	r26, r22
    50cc:	14 96       	adiw	r26, 0x04	; 4
    50ce:	8c 91       	ld	r24, X
    50d0:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    50d2:	88 eb       	ldi	r24, 0xB8	; 184
    50d4:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    50d6:	81 e0       	ldi	r24, 0x01	; 1
    50d8:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    50da:	ef ee       	ldi	r30, 0xEF	; 239
    50dc:	f4 e2       	ldi	r31, 0x24	; 36
    50de:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    50e0:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    50e2:	e0 ea       	ldi	r30, 0xA0	; 160
    50e4:	f0 e0       	ldi	r31, 0x00	; 0
    50e6:	82 81       	ldd	r24, Z+2	; 0x02
    50e8:	82 60       	ori	r24, 0x02	; 2
    50ea:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    50ec:	78 94       	sei

	return STATUS_OK;
}
    50ee:	80 e0       	ldi	r24, 0x00	; 0
    50f0:	08 95       	ret

000050f2 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    50f2:	cf 93       	push	r28
    50f4:	df 93       	push	r29
    50f6:	1f 92       	push	r1
    50f8:	cd b7       	in	r28, 0x3d	; 61
    50fa:	de b7       	in	r29, 0x3e	; 62
    50fc:	9c 01       	movw	r18, r24
    50fe:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    5100:	89 2b       	or	r24, r25
    5102:	09 f4       	brne	.+2      	; 0x5106 <twi_master_transfer+0x14>
    5104:	51 c0       	rjmp	.+162    	; 0x51a8 <twi_master_transfer+0xb6>
    5106:	30 97       	sbiw	r30, 0x00	; 0
    5108:	09 f4       	brne	.+2      	; 0x510c <twi_master_transfer+0x1a>
    510a:	50 c0       	rjmp	.+160    	; 0x51ac <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    510c:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    510e:	80 91 f8 24 	lds	r24, 0x24F8	; 0x8024f8 <transfer+0x9>
    5112:	88 23       	and	r24, r24
    5114:	19 f0       	breq	.+6      	; 0x511c <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    5116:	99 23       	and	r25, r25
    5118:	f1 f3       	breq	.-4      	; 0x5116 <twi_master_transfer+0x24>
    511a:	4a c0       	rjmp	.+148    	; 0x51b0 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    511c:	8f b7       	in	r24, 0x3f	; 63
    511e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5120:	f8 94       	cli
	return flags;
    5122:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    5124:	af ee       	ldi	r26, 0xEF	; 239
    5126:	b4 e2       	ldi	r27, 0x24	; 36
    5128:	91 e0       	ldi	r25, 0x01	; 1
    512a:	19 96       	adiw	r26, 0x09	; 9
    512c:	9c 93       	st	X, r25
    512e:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    5130:	90 e8       	ldi	r25, 0x80	; 128
    5132:	1a 96       	adiw	r26, 0x0a	; 10
    5134:	9c 93       	st	X, r25
    5136:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5138:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    513a:	2d 93       	st	X+, r18
    513c:	3c 93       	st	X, r19
    513e:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    5140:	12 96       	adiw	r26, 0x02	; 2
    5142:	6d 93       	st	X+, r22
    5144:	7c 93       	st	X, r23
    5146:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    5148:	14 96       	adiw	r26, 0x04	; 4
    514a:	1d 92       	st	X+, r1
    514c:	1c 92       	st	X, r1
    514e:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    5150:	16 96       	adiw	r26, 0x06	; 6
    5152:	1d 92       	st	X+, r1
    5154:	1c 92       	st	X, r1
    5156:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    5158:	18 96       	adiw	r26, 0x08	; 8
    515a:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    515c:	80 81       	ld	r24, Z
    515e:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    5160:	64 81       	ldd	r22, Z+4	; 0x04
    5162:	75 81       	ldd	r23, Z+5	; 0x05
    5164:	67 2b       	or	r22, r23
    5166:	11 f4       	brne	.+4      	; 0x516c <twi_master_transfer+0x7a>
    5168:	41 11       	cpse	r20, r1
    516a:	03 c0       	rjmp	.+6      	; 0x5172 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    516c:	f9 01       	movw	r30, r18
    516e:	86 83       	std	Z+6, r24	; 0x06
    5170:	03 c0       	rjmp	.+6      	; 0x5178 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    5172:	81 60       	ori	r24, 0x01	; 1
    5174:	f9 01       	movw	r30, r18
    5176:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    5178:	ef ee       	ldi	r30, 0xEF	; 239
    517a:	f4 e2       	ldi	r31, 0x24	; 36
    517c:	92 85       	ldd	r25, Z+10	; 0x0a
    517e:	90 38       	cpi	r25, 0x80	; 128
    5180:	e9 f3       	breq	.-6      	; 0x517c <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    5182:	f9 01       	movw	r30, r18
    5184:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    5186:	83 70       	andi	r24, 0x03	; 3
    5188:	81 30       	cpi	r24, 0x01	; 1
    518a:	49 f0       	breq	.+18     	; 0x519e <twi_master_transfer+0xac>
    518c:	af ee       	ldi	r26, 0xEF	; 239
    518e:	b4 e2       	ldi	r27, 0x24	; 36
    5190:	ed 91       	ld	r30, X+
    5192:	fc 91       	ld	r31, X
    5194:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    5196:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    5198:	83 70       	andi	r24, 0x03	; 3
    519a:	81 30       	cpi	r24, 0x01	; 1
    519c:	c9 f7       	brne	.-14     	; 0x5190 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    519e:	ef ee       	ldi	r30, 0xEF	; 239
    51a0:	f4 e2       	ldi	r31, 0x24	; 36
    51a2:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    51a4:	11 86       	std	Z+9, r1	; 0x09
    51a6:	05 c0       	rjmp	.+10     	; 0x51b2 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    51a8:	88 ef       	ldi	r24, 0xF8	; 248
    51aa:	03 c0       	rjmp	.+6      	; 0x51b2 <twi_master_transfer+0xc0>
    51ac:	88 ef       	ldi	r24, 0xF8	; 248
    51ae:	01 c0       	rjmp	.+2      	; 0x51b2 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    51b0:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    51b2:	0f 90       	pop	r0
    51b4:	df 91       	pop	r29
    51b6:	cf 91       	pop	r28
    51b8:	08 95       	ret

000051ba <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    51ba:	cf 93       	push	r28
    51bc:	df 93       	push	r29
    51be:	1f 92       	push	r1
    51c0:	1f 92       	push	r1
    51c2:	cd b7       	in	r28, 0x3d	; 61
    51c4:	de b7       	in	r29, 0x3e	; 62
    51c6:	81 11       	cpse	r24, r1
    51c8:	26 c0       	rjmp	.+76     	; 0x5216 <udd_sleep_mode+0x5c>
    51ca:	90 91 24 26 	lds	r25, 0x2624	; 0x802624 <udd_b_idle>
    51ce:	99 23       	and	r25, r25
    51d0:	f9 f0       	breq	.+62     	; 0x5210 <udd_sleep_mode+0x56>
    51d2:	90 91 5c 2a 	lds	r25, 0x2A5C	; 0x802a5c <sleepmgr_locks+0x1>
    51d6:	91 11       	cpse	r25, r1
    51d8:	01 c0       	rjmp	.+2      	; 0x51dc <udd_sleep_mode+0x22>
    51da:	ff cf       	rjmp	.-2      	; 0x51da <udd_sleep_mode+0x20>
    51dc:	9f b7       	in	r25, 0x3f	; 63
    51de:	9a 83       	std	Y+2, r25	; 0x02
    51e0:	f8 94       	cli
    51e2:	2a 81       	ldd	r18, Y+2	; 0x02
    51e4:	eb e5       	ldi	r30, 0x5B	; 91
    51e6:	fa e2       	ldi	r31, 0x2A	; 42
    51e8:	91 81       	ldd	r25, Z+1	; 0x01
    51ea:	91 50       	subi	r25, 0x01	; 1
    51ec:	91 83       	std	Z+1, r25	; 0x01
    51ee:	2f bf       	out	0x3f, r18	; 63
    51f0:	0f c0       	rjmp	.+30     	; 0x5210 <udd_sleep_mode+0x56>
    51f2:	90 91 5c 2a 	lds	r25, 0x2A5C	; 0x802a5c <sleepmgr_locks+0x1>
    51f6:	9f 3f       	cpi	r25, 0xFF	; 255
    51f8:	09 f4       	brne	.+2      	; 0x51fc <udd_sleep_mode+0x42>
    51fa:	ff cf       	rjmp	.-2      	; 0x51fa <udd_sleep_mode+0x40>
    51fc:	9f b7       	in	r25, 0x3f	; 63
    51fe:	99 83       	std	Y+1, r25	; 0x01
    5200:	f8 94       	cli
    5202:	29 81       	ldd	r18, Y+1	; 0x01
    5204:	eb e5       	ldi	r30, 0x5B	; 91
    5206:	fa e2       	ldi	r31, 0x2A	; 42
    5208:	91 81       	ldd	r25, Z+1	; 0x01
    520a:	9f 5f       	subi	r25, 0xFF	; 255
    520c:	91 83       	std	Z+1, r25	; 0x01
    520e:	2f bf       	out	0x3f, r18	; 63
    5210:	80 93 24 26 	sts	0x2624, r24	; 0x802624 <udd_b_idle>
    5214:	05 c0       	rjmp	.+10     	; 0x5220 <udd_sleep_mode+0x66>
    5216:	90 91 24 26 	lds	r25, 0x2624	; 0x802624 <udd_b_idle>
    521a:	99 23       	and	r25, r25
    521c:	51 f3       	breq	.-44     	; 0x51f2 <udd_sleep_mode+0x38>
    521e:	f8 cf       	rjmp	.-16     	; 0x5210 <udd_sleep_mode+0x56>
    5220:	0f 90       	pop	r0
    5222:	0f 90       	pop	r0
    5224:	df 91       	pop	r29
    5226:	cf 91       	pop	r28
    5228:	08 95       	ret

0000522a <udd_ctrl_init>:
    522a:	0f 93       	push	r16
    522c:	e8 ec       	ldi	r30, 0xC8	; 200
    522e:	f4 e0       	ldi	r31, 0x04	; 4
    5230:	80 81       	ld	r24, Z
    5232:	8f 7d       	andi	r24, 0xDF	; 223
    5234:	80 83       	st	Z, r24
    5236:	80 81       	ld	r24, Z
    5238:	8f 7d       	andi	r24, 0xDF	; 223
    523a:	80 83       	st	Z, r24
    523c:	e8 ef       	ldi	r30, 0xF8	; 248
    523e:	f5 e2       	ldi	r31, 0x25	; 37
    5240:	02 e0       	ldi	r16, 0x02	; 2
    5242:	05 93       	las	Z, r16
    5244:	10 92 fa 25 	sts	0x25FA, r1	; 0x8025fa <udd_sram+0x16>
    5248:	10 92 fb 25 	sts	0x25FB, r1	; 0x8025fb <udd_sram+0x17>
    524c:	00 e2       	ldi	r16, 0x20	; 32
    524e:	06 93       	lac	Z, r16
    5250:	00 e4       	ldi	r16, 0x40	; 64
    5252:	06 93       	lac	Z, r16
    5254:	e0 ef       	ldi	r30, 0xF0	; 240
    5256:	f5 e2       	ldi	r31, 0x25	; 37
    5258:	00 e4       	ldi	r16, 0x40	; 64
    525a:	06 93       	lac	Z, r16
    525c:	eb e4       	ldi	r30, 0x4B	; 75
    525e:	fa e2       	ldi	r31, 0x2A	; 42
    5260:	14 86       	std	Z+12, r1	; 0x0c
    5262:	15 86       	std	Z+13, r1	; 0x0d
    5264:	16 86       	std	Z+14, r1	; 0x0e
    5266:	17 86       	std	Z+15, r1	; 0x0f
    5268:	12 86       	std	Z+10, r1	; 0x0a
    526a:	13 86       	std	Z+11, r1	; 0x0b
    526c:	10 92 e3 25 	sts	0x25E3, r1	; 0x8025e3 <udd_ep_control_state>
    5270:	0f 91       	pop	r16
    5272:	08 95       	ret

00005274 <udd_ctrl_stall_data>:
    5274:	0f 93       	push	r16
    5276:	85 e0       	ldi	r24, 0x05	; 5
    5278:	80 93 e3 25 	sts	0x25E3, r24	; 0x8025e3 <udd_ep_control_state>
    527c:	e9 ef       	ldi	r30, 0xF9	; 249
    527e:	f5 e2       	ldi	r31, 0x25	; 37
    5280:	04 e0       	ldi	r16, 0x04	; 4
    5282:	05 93       	las	Z, r16
    5284:	e1 ef       	ldi	r30, 0xF1	; 241
    5286:	f5 e2       	ldi	r31, 0x25	; 37
    5288:	04 e0       	ldi	r16, 0x04	; 4
    528a:	05 93       	las	Z, r16
    528c:	0f 91       	pop	r16
    528e:	08 95       	ret

00005290 <udd_ctrl_send_zlp_in>:
    5290:	0f 93       	push	r16
    5292:	83 e0       	ldi	r24, 0x03	; 3
    5294:	80 93 e3 25 	sts	0x25E3, r24	; 0x8025e3 <udd_ep_control_state>
    5298:	10 92 fa 25 	sts	0x25FA, r1	; 0x8025fa <udd_sram+0x16>
    529c:	10 92 fb 25 	sts	0x25FB, r1	; 0x8025fb <udd_sram+0x17>
    52a0:	e8 ef       	ldi	r30, 0xF8	; 248
    52a2:	f5 e2       	ldi	r31, 0x25	; 37
    52a4:	02 e0       	ldi	r16, 0x02	; 2
    52a6:	06 93       	lac	Z, r16
    52a8:	0f 91       	pop	r16
    52aa:	08 95       	ret

000052ac <udd_ctrl_endofrequest>:
    52ac:	e0 91 57 2a 	lds	r30, 0x2A57	; 0x802a57 <udd_g_ctrlreq+0xc>
    52b0:	f0 91 58 2a 	lds	r31, 0x2A58	; 0x802a58 <udd_g_ctrlreq+0xd>
    52b4:	30 97       	sbiw	r30, 0x00	; 0
    52b6:	09 f0       	breq	.+2      	; 0x52ba <udd_ctrl_endofrequest+0xe>
    52b8:	19 95       	eicall
    52ba:	08 95       	ret

000052bc <udd_ctrl_in_sent>:
    52bc:	0f 93       	push	r16
    52be:	cf 93       	push	r28
    52c0:	df 93       	push	r29
    52c2:	80 91 e3 25 	lds	r24, 0x25E3	; 0x8025e3 <udd_ep_control_state>
    52c6:	83 30       	cpi	r24, 0x03	; 3
    52c8:	19 f4       	brne	.+6      	; 0x52d0 <udd_ctrl_in_sent+0x14>
    52ca:	f0 df       	rcall	.-32     	; 0x52ac <udd_ctrl_endofrequest>
    52cc:	ae df       	rcall	.-164    	; 0x522a <udd_ctrl_init>
    52ce:	5e c0       	rjmp	.+188    	; 0x538c <udd_ctrl_in_sent+0xd0>
    52d0:	80 91 df 25 	lds	r24, 0x25DF	; 0x8025df <udd_ctrl_payload_nb_trans>
    52d4:	90 91 e0 25 	lds	r25, 0x25E0	; 0x8025e0 <udd_ctrl_payload_nb_trans+0x1>
    52d8:	c0 91 55 2a 	lds	r28, 0x2A55	; 0x802a55 <udd_g_ctrlreq+0xa>
    52dc:	d0 91 56 2a 	lds	r29, 0x2A56	; 0x802a56 <udd_g_ctrlreq+0xb>
    52e0:	c8 1b       	sub	r28, r24
    52e2:	d9 0b       	sbc	r29, r25
    52e4:	71 f5       	brne	.+92     	; 0x5342 <udd_ctrl_in_sent+0x86>
    52e6:	20 91 e1 25 	lds	r18, 0x25E1	; 0x8025e1 <udd_ctrl_prev_payload_nb_trans>
    52ea:	30 91 e2 25 	lds	r19, 0x25E2	; 0x8025e2 <udd_ctrl_prev_payload_nb_trans+0x1>
    52ee:	82 0f       	add	r24, r18
    52f0:	93 1f       	adc	r25, r19
    52f2:	80 93 e1 25 	sts	0x25E1, r24	; 0x8025e1 <udd_ctrl_prev_payload_nb_trans>
    52f6:	90 93 e2 25 	sts	0x25E2, r25	; 0x8025e2 <udd_ctrl_prev_payload_nb_trans+0x1>
    52fa:	20 91 51 2a 	lds	r18, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    52fe:	30 91 52 2a 	lds	r19, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    5302:	82 17       	cp	r24, r18
    5304:	93 07       	cpc	r25, r19
    5306:	21 f0       	breq	.+8      	; 0x5310 <udd_ctrl_in_sent+0x54>
    5308:	80 91 fa 24 	lds	r24, 0x24FA	; 0x8024fa <b_shortpacket.5472>
    530c:	88 23       	and	r24, r24
    530e:	41 f0       	breq	.+16     	; 0x5320 <udd_ctrl_in_sent+0x64>
    5310:	84 e0       	ldi	r24, 0x04	; 4
    5312:	80 93 e3 25 	sts	0x25E3, r24	; 0x8025e3 <udd_ep_control_state>
    5316:	e0 ef       	ldi	r30, 0xF0	; 240
    5318:	f5 e2       	ldi	r31, 0x25	; 37
    531a:	02 e0       	ldi	r16, 0x02	; 2
    531c:	06 93       	lac	Z, r16
    531e:	36 c0       	rjmp	.+108    	; 0x538c <udd_ctrl_in_sent+0xd0>
    5320:	e0 91 59 2a 	lds	r30, 0x2A59	; 0x802a59 <udd_g_ctrlreq+0xe>
    5324:	f0 91 5a 2a 	lds	r31, 0x2A5A	; 0x802a5a <udd_g_ctrlreq+0xf>
    5328:	30 97       	sbiw	r30, 0x00	; 0
    532a:	99 f0       	breq	.+38     	; 0x5352 <udd_ctrl_in_sent+0x96>
    532c:	19 95       	eicall
    532e:	88 23       	and	r24, r24
    5330:	81 f0       	breq	.+32     	; 0x5352 <udd_ctrl_in_sent+0x96>
    5332:	10 92 df 25 	sts	0x25DF, r1	; 0x8025df <udd_ctrl_payload_nb_trans>
    5336:	10 92 e0 25 	sts	0x25E0, r1	; 0x8025e0 <udd_ctrl_payload_nb_trans+0x1>
    533a:	c0 91 55 2a 	lds	r28, 0x2A55	; 0x802a55 <udd_g_ctrlreq+0xa>
    533e:	d0 91 56 2a 	lds	r29, 0x2A56	; 0x802a56 <udd_g_ctrlreq+0xb>
    5342:	c0 34       	cpi	r28, 0x40	; 64
    5344:	d1 05       	cpc	r29, r1
    5346:	28 f0       	brcs	.+10     	; 0x5352 <udd_ctrl_in_sent+0x96>
    5348:	10 92 fa 24 	sts	0x24FA, r1	; 0x8024fa <b_shortpacket.5472>
    534c:	c0 e4       	ldi	r28, 0x40	; 64
    534e:	d0 e0       	ldi	r29, 0x00	; 0
    5350:	03 c0       	rjmp	.+6      	; 0x5358 <udd_ctrl_in_sent+0x9c>
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	80 93 fa 24 	sts	0x24FA, r24	; 0x8024fa <b_shortpacket.5472>
    5358:	e4 ee       	ldi	r30, 0xE4	; 228
    535a:	f5 e2       	ldi	r31, 0x25	; 37
    535c:	c6 8b       	std	Z+22, r28	; 0x16
    535e:	d7 8b       	std	Z+23, r29	; 0x17
    5360:	80 91 df 25 	lds	r24, 0x25DF	; 0x8025df <udd_ctrl_payload_nb_trans>
    5364:	90 91 e0 25 	lds	r25, 0x25E0	; 0x8025e0 <udd_ctrl_payload_nb_trans+0x1>
    5368:	20 91 53 2a 	lds	r18, 0x2A53	; 0x802a53 <udd_g_ctrlreq+0x8>
    536c:	30 91 54 2a 	lds	r19, 0x2A54	; 0x802a54 <udd_g_ctrlreq+0x9>
    5370:	28 0f       	add	r18, r24
    5372:	39 1f       	adc	r19, r25
    5374:	20 8f       	std	Z+24, r18	; 0x18
    5376:	31 8f       	std	Z+25, r19	; 0x19
    5378:	c8 0f       	add	r28, r24
    537a:	d9 1f       	adc	r29, r25
    537c:	c0 93 df 25 	sts	0x25DF, r28	; 0x8025df <udd_ctrl_payload_nb_trans>
    5380:	d0 93 e0 25 	sts	0x25E0, r29	; 0x8025e0 <udd_ctrl_payload_nb_trans+0x1>
    5384:	e8 ef       	ldi	r30, 0xF8	; 248
    5386:	f5 e2       	ldi	r31, 0x25	; 37
    5388:	02 e0       	ldi	r16, 0x02	; 2
    538a:	06 93       	lac	Z, r16
    538c:	df 91       	pop	r29
    538e:	cf 91       	pop	r28
    5390:	0f 91       	pop	r16
    5392:	08 95       	ret

00005394 <udd_ep_get_size>:
    5394:	fc 01       	movw	r30, r24
    5396:	81 81       	ldd	r24, Z+1	; 0x01
    5398:	e8 2f       	mov	r30, r24
    539a:	e7 70       	andi	r30, 0x07	; 7
    539c:	8e 2f       	mov	r24, r30
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	fc 01       	movw	r30, r24
    53a2:	31 97       	sbiw	r30, 0x01	; 1
    53a4:	e7 30       	cpi	r30, 0x07	; 7
    53a6:	f1 05       	cpc	r31, r1
    53a8:	d8 f4       	brcc	.+54     	; 0x53e0 <udd_ep_get_size+0x4c>
    53aa:	88 27       	eor	r24, r24
    53ac:	e2 50       	subi	r30, 0x02	; 2
    53ae:	ff 4f       	sbci	r31, 0xFF	; 255
    53b0:	8f 4f       	sbci	r24, 0xFF	; 255
    53b2:	0c 94 58 43 	jmp	0x86b0	; 0x86b0 <__tablejump2__>
    53b6:	80 e1       	ldi	r24, 0x10	; 16
    53b8:	90 e0       	ldi	r25, 0x00	; 0
    53ba:	08 95       	ret
    53bc:	80 e2       	ldi	r24, 0x20	; 32
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	08 95       	ret
    53c2:	80 e4       	ldi	r24, 0x40	; 64
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	08 95       	ret
    53c8:	80 e8       	ldi	r24, 0x80	; 128
    53ca:	90 e0       	ldi	r25, 0x00	; 0
    53cc:	08 95       	ret
    53ce:	80 e0       	ldi	r24, 0x00	; 0
    53d0:	91 e0       	ldi	r25, 0x01	; 1
    53d2:	08 95       	ret
    53d4:	80 e0       	ldi	r24, 0x00	; 0
    53d6:	92 e0       	ldi	r25, 0x02	; 2
    53d8:	08 95       	ret
    53da:	8f ef       	ldi	r24, 0xFF	; 255
    53dc:	93 e0       	ldi	r25, 0x03	; 3
    53de:	08 95       	ret
    53e0:	88 e0       	ldi	r24, 0x08	; 8
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	08 95       	ret

000053e6 <udd_ep_get_job>:
    53e6:	28 2f       	mov	r18, r24
    53e8:	2f 70       	andi	r18, 0x0F	; 15
    53ea:	30 e0       	ldi	r19, 0x00	; 0
    53ec:	22 0f       	add	r18, r18
    53ee:	33 1f       	adc	r19, r19
    53f0:	08 2e       	mov	r0, r24
    53f2:	00 0c       	add	r0, r0
    53f4:	99 0b       	sbc	r25, r25
    53f6:	88 27       	eor	r24, r24
    53f8:	99 0f       	add	r25, r25
    53fa:	88 1f       	adc	r24, r24
    53fc:	99 27       	eor	r25, r25
    53fe:	82 0f       	add	r24, r18
    5400:	93 1f       	adc	r25, r19
    5402:	02 97       	sbiw	r24, 0x02	; 2
    5404:	9c 01       	movw	r18, r24
    5406:	22 0f       	add	r18, r18
    5408:	33 1f       	adc	r19, r19
    540a:	22 0f       	add	r18, r18
    540c:	33 1f       	adc	r19, r19
    540e:	22 0f       	add	r18, r18
    5410:	33 1f       	adc	r19, r19
    5412:	82 0f       	add	r24, r18
    5414:	93 1f       	adc	r25, r19
    5416:	85 58       	subi	r24, 0x85	; 133
    5418:	9a 4d       	sbci	r25, 0xDA	; 218
    541a:	08 95       	ret

0000541c <udd_ctrl_interrupt_tc_setup>:
    541c:	0f 93       	push	r16
    541e:	cf 93       	push	r28
    5420:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5424:	80 ff       	sbrs	r24, 0
    5426:	65 c0       	rjmp	.+202    	; 0x54f2 <udd_ctrl_interrupt_tc_setup+0xd6>
    5428:	81 e0       	ldi	r24, 0x01	; 1
    542a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    542e:	e0 ef       	ldi	r30, 0xF0	; 240
    5430:	f5 e2       	ldi	r31, 0x25	; 37
    5432:	00 e8       	ldi	r16, 0x80	; 128
    5434:	06 93       	lac	Z, r16
    5436:	e8 ef       	ldi	r30, 0xF8	; 248
    5438:	f5 e2       	ldi	r31, 0x25	; 37
    543a:	00 e8       	ldi	r16, 0x80	; 128
    543c:	06 93       	lac	Z, r16
    543e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    5442:	e0 ef       	ldi	r30, 0xF0	; 240
    5444:	f5 e2       	ldi	r31, 0x25	; 37
    5446:	00 e1       	ldi	r16, 0x10	; 16
    5448:	06 93       	lac	Z, r16
    544a:	80 91 e3 25 	lds	r24, 0x25E3	; 0x8025e3 <udd_ep_control_state>
    544e:	88 23       	and	r24, r24
    5450:	29 f0       	breq	.+10     	; 0x545c <udd_ctrl_interrupt_tc_setup+0x40>
    5452:	83 50       	subi	r24, 0x03	; 3
    5454:	82 30       	cpi	r24, 0x02	; 2
    5456:	08 f4       	brcc	.+2      	; 0x545a <udd_ctrl_interrupt_tc_setup+0x3e>
    5458:	29 df       	rcall	.-430    	; 0x52ac <udd_ctrl_endofrequest>
    545a:	e7 de       	rcall	.-562    	; 0x522a <udd_ctrl_init>
    545c:	80 91 f2 25 	lds	r24, 0x25F2	; 0x8025f2 <udd_sram+0xe>
    5460:	90 91 f3 25 	lds	r25, 0x25F3	; 0x8025f3 <udd_sram+0xf>
    5464:	08 97       	sbiw	r24, 0x08	; 8
    5466:	09 f0       	breq	.+2      	; 0x546a <udd_ctrl_interrupt_tc_setup+0x4e>
    5468:	46 c0       	rjmp	.+140    	; 0x54f6 <udd_ctrl_interrupt_tc_setup+0xda>
    546a:	88 e0       	ldi	r24, 0x08	; 8
    546c:	ef e9       	ldi	r30, 0x9F	; 159
    546e:	f5 e2       	ldi	r31, 0x25	; 37
    5470:	ab e4       	ldi	r26, 0x4B	; 75
    5472:	ba e2       	ldi	r27, 0x2A	; 42
    5474:	01 90       	ld	r0, Z+
    5476:	0d 92       	st	X+, r0
    5478:	8a 95       	dec	r24
    547a:	e1 f7       	brne	.-8      	; 0x5474 <udd_ctrl_interrupt_tc_setup+0x58>
    547c:	e8 ec       	ldi	r30, 0xC8	; 200
    547e:	f4 e0       	ldi	r31, 0x04	; 4
    5480:	80 81       	ld	r24, Z
    5482:	80 62       	ori	r24, 0x20	; 32
    5484:	80 83       	st	Z, r24
    5486:	80 81       	ld	r24, Z
    5488:	80 62       	ori	r24, 0x20	; 32
    548a:	80 83       	st	Z, r24
    548c:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <udc_process_setup>
    5490:	c8 2f       	mov	r28, r24
    5492:	81 11       	cpse	r24, r1
    5494:	03 c0       	rjmp	.+6      	; 0x549c <udd_ctrl_interrupt_tc_setup+0x80>
    5496:	ee de       	rcall	.-548    	; 0x5274 <udd_ctrl_stall_data>
    5498:	c1 e0       	ldi	r28, 0x01	; 1
    549a:	2e c0       	rjmp	.+92     	; 0x54f8 <udd_ctrl_interrupt_tc_setup+0xdc>
    549c:	80 91 4b 2a 	lds	r24, 0x2A4B	; 0x802a4b <udd_g_ctrlreq>
    54a0:	88 23       	and	r24, r24
    54a2:	6c f4       	brge	.+26     	; 0x54be <udd_ctrl_interrupt_tc_setup+0xa2>
    54a4:	10 92 e1 25 	sts	0x25E1, r1	; 0x8025e1 <udd_ctrl_prev_payload_nb_trans>
    54a8:	10 92 e2 25 	sts	0x25E2, r1	; 0x8025e2 <udd_ctrl_prev_payload_nb_trans+0x1>
    54ac:	10 92 df 25 	sts	0x25DF, r1	; 0x8025df <udd_ctrl_payload_nb_trans>
    54b0:	10 92 e0 25 	sts	0x25E0, r1	; 0x8025e0 <udd_ctrl_payload_nb_trans+0x1>
    54b4:	82 e0       	ldi	r24, 0x02	; 2
    54b6:	80 93 e3 25 	sts	0x25E3, r24	; 0x8025e3 <udd_ep_control_state>
    54ba:	00 df       	rcall	.-512    	; 0x52bc <udd_ctrl_in_sent>
    54bc:	1d c0       	rjmp	.+58     	; 0x54f8 <udd_ctrl_interrupt_tc_setup+0xdc>
    54be:	80 91 51 2a 	lds	r24, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    54c2:	90 91 52 2a 	lds	r25, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    54c6:	89 2b       	or	r24, r25
    54c8:	11 f4       	brne	.+4      	; 0x54ce <udd_ctrl_interrupt_tc_setup+0xb2>
    54ca:	e2 de       	rcall	.-572    	; 0x5290 <udd_ctrl_send_zlp_in>
    54cc:	15 c0       	rjmp	.+42     	; 0x54f8 <udd_ctrl_interrupt_tc_setup+0xdc>
    54ce:	10 92 e1 25 	sts	0x25E1, r1	; 0x8025e1 <udd_ctrl_prev_payload_nb_trans>
    54d2:	10 92 e2 25 	sts	0x25E2, r1	; 0x8025e2 <udd_ctrl_prev_payload_nb_trans+0x1>
    54d6:	10 92 df 25 	sts	0x25DF, r1	; 0x8025df <udd_ctrl_payload_nb_trans>
    54da:	10 92 e0 25 	sts	0x25E0, r1	; 0x8025e0 <udd_ctrl_payload_nb_trans+0x1>
    54de:	81 e0       	ldi	r24, 0x01	; 1
    54e0:	80 93 e3 25 	sts	0x25E3, r24	; 0x8025e3 <udd_ep_control_state>
    54e4:	e0 ef       	ldi	r30, 0xF0	; 240
    54e6:	f5 e2       	ldi	r31, 0x25	; 37
    54e8:	02 e0       	ldi	r16, 0x02	; 2
    54ea:	06 93       	lac	Z, r16
    54ec:	00 e2       	ldi	r16, 0x20	; 32
    54ee:	06 93       	lac	Z, r16
    54f0:	03 c0       	rjmp	.+6      	; 0x54f8 <udd_ctrl_interrupt_tc_setup+0xdc>
    54f2:	c0 e0       	ldi	r28, 0x00	; 0
    54f4:	01 c0       	rjmp	.+2      	; 0x54f8 <udd_ctrl_interrupt_tc_setup+0xdc>
    54f6:	c1 e0       	ldi	r28, 0x01	; 1
    54f8:	8c 2f       	mov	r24, r28
    54fa:	cf 91       	pop	r28
    54fc:	0f 91       	pop	r16
    54fe:	08 95       	ret

00005500 <udd_ep_trans_complet>:
    5500:	8f 92       	push	r8
    5502:	9f 92       	push	r9
    5504:	af 92       	push	r10
    5506:	bf 92       	push	r11
    5508:	df 92       	push	r13
    550a:	ef 92       	push	r14
    550c:	ff 92       	push	r15
    550e:	0f 93       	push	r16
    5510:	1f 93       	push	r17
    5512:	cf 93       	push	r28
    5514:	df 93       	push	r29
    5516:	d8 2e       	mov	r13, r24
    5518:	66 df       	rcall	.-308    	; 0x53e6 <udd_ep_get_job>
    551a:	8c 01       	movw	r16, r24
    551c:	cd 2d       	mov	r28, r13
    551e:	cf 70       	andi	r28, 0x0F	; 15
    5520:	d0 e0       	ldi	r29, 0x00	; 0
    5522:	ce 01       	movw	r24, r28
    5524:	88 0f       	add	r24, r24
    5526:	99 1f       	adc	r25, r25
    5528:	cd 2d       	mov	r28, r13
    552a:	0d 2c       	mov	r0, r13
    552c:	00 0c       	add	r0, r0
    552e:	dd 0b       	sbc	r29, r29
    5530:	cc 27       	eor	r28, r28
    5532:	dd 0f       	add	r29, r29
    5534:	cc 1f       	adc	r28, r28
    5536:	dd 27       	eor	r29, r29
    5538:	c8 0f       	add	r28, r24
    553a:	d9 1f       	adc	r29, r25
    553c:	ce 01       	movw	r24, r28
    553e:	88 0f       	add	r24, r24
    5540:	99 1f       	adc	r25, r25
    5542:	88 0f       	add	r24, r24
    5544:	99 1f       	adc	r25, r25
    5546:	88 0f       	add	r24, r24
    5548:	99 1f       	adc	r25, r25
    554a:	9c 01       	movw	r18, r24
    554c:	20 51       	subi	r18, 0x10	; 16
    554e:	3a 4d       	sbci	r19, 0xDA	; 218
    5550:	79 01       	movw	r14, r18
    5552:	c9 01       	movw	r24, r18
    5554:	1f df       	rcall	.-450    	; 0x5394 <udd_ep_get_size>
    5556:	4c 01       	movw	r8, r24
    5558:	dd 20       	and	r13, r13
    555a:	0c f0       	brlt	.+2      	; 0x555e <udd_ep_trans_complet+0x5e>
    555c:	7b c0       	rjmp	.+246    	; 0x5654 <udd_ep_trans_complet+0x154>
    555e:	fe 01       	movw	r30, r28
    5560:	ee 0f       	add	r30, r30
    5562:	ff 1f       	adc	r31, r31
    5564:	ee 0f       	add	r30, r30
    5566:	ff 1f       	adc	r31, r31
    5568:	ee 0f       	add	r30, r30
    556a:	ff 1f       	adc	r31, r31
    556c:	ec 51       	subi	r30, 0x1C	; 28
    556e:	fa 4d       	sbci	r31, 0xDA	; 218
    5570:	22 89       	ldd	r18, Z+18	; 0x12
    5572:	33 89       	ldd	r19, Z+19	; 0x13
    5574:	d8 01       	movw	r26, r16
    5576:	15 96       	adiw	r26, 0x05	; 5
    5578:	8d 91       	ld	r24, X+
    557a:	9c 91       	ld	r25, X
    557c:	16 97       	sbiw	r26, 0x06	; 6
    557e:	82 0f       	add	r24, r18
    5580:	93 1f       	adc	r25, r19
    5582:	15 96       	adiw	r26, 0x05	; 5
    5584:	8d 93       	st	X+, r24
    5586:	9c 93       	st	X, r25
    5588:	16 97       	sbiw	r26, 0x06	; 6
    558a:	13 96       	adiw	r26, 0x03	; 3
    558c:	2d 91       	ld	r18, X+
    558e:	3c 91       	ld	r19, X
    5590:	14 97       	sbiw	r26, 0x04	; 4
    5592:	82 17       	cp	r24, r18
    5594:	93 07       	cpc	r25, r19
    5596:	09 f4       	brne	.+2      	; 0x559a <udd_ep_trans_complet+0x9a>
    5598:	47 c0       	rjmp	.+142    	; 0x5628 <udd_ep_trans_complet+0x128>
    559a:	28 1b       	sub	r18, r24
    559c:	39 0b       	sbc	r19, r25
    559e:	21 15       	cp	r18, r1
    55a0:	b4 e0       	ldi	r27, 0x04	; 4
    55a2:	3b 07       	cpc	r19, r27
    55a4:	40 f0       	brcs	.+16     	; 0x55b6 <udd_ep_trans_complet+0xb6>
    55a6:	2f ef       	ldi	r18, 0xFF	; 255
    55a8:	33 e0       	ldi	r19, 0x03	; 3
    55aa:	c9 01       	movw	r24, r18
    55ac:	b4 01       	movw	r22, r8
    55ae:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <__udivmodhi4>
    55b2:	28 1b       	sub	r18, r24
    55b4:	39 0b       	sbc	r19, r25
    55b6:	f8 01       	movw	r30, r16
    55b8:	80 81       	ld	r24, Z
    55ba:	81 ff       	sbrs	r24, 1
    55bc:	0a c0       	rjmp	.+20     	; 0x55d2 <udd_ep_trans_complet+0xd2>
    55be:	c9 01       	movw	r24, r18
    55c0:	b4 01       	movw	r22, r8
    55c2:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <__udivmodhi4>
    55c6:	41 e0       	ldi	r20, 0x01	; 1
    55c8:	89 2b       	or	r24, r25
    55ca:	09 f0       	breq	.+2      	; 0x55ce <udd_ep_trans_complet+0xce>
    55cc:	40 e0       	ldi	r20, 0x00	; 0
    55ce:	84 2f       	mov	r24, r20
    55d0:	01 c0       	rjmp	.+2      	; 0x55d4 <udd_ep_trans_complet+0xd4>
    55d2:	80 e0       	ldi	r24, 0x00	; 0
    55d4:	d8 01       	movw	r26, r16
    55d6:	9c 91       	ld	r25, X
    55d8:	80 fb       	bst	r24, 0
    55da:	91 f9       	bld	r25, 1
    55dc:	9c 93       	st	X, r25
    55de:	fe 01       	movw	r30, r28
    55e0:	ee 0f       	add	r30, r30
    55e2:	ff 1f       	adc	r31, r31
    55e4:	ee 0f       	add	r30, r30
    55e6:	ff 1f       	adc	r31, r31
    55e8:	ee 0f       	add	r30, r30
    55ea:	ff 1f       	adc	r31, r31
    55ec:	ec 51       	subi	r30, 0x1C	; 28
    55ee:	fa 4d       	sbci	r31, 0xDA	; 218
    55f0:	12 8a       	std	Z+18, r1	; 0x12
    55f2:	13 8a       	std	Z+19, r1	; 0x13
    55f4:	26 87       	std	Z+14, r18	; 0x0e
    55f6:	37 87       	std	Z+15, r19	; 0x0f
    55f8:	11 96       	adiw	r26, 0x01	; 1
    55fa:	2d 91       	ld	r18, X+
    55fc:	3c 91       	ld	r19, X
    55fe:	12 97       	sbiw	r26, 0x02	; 2
    5600:	15 96       	adiw	r26, 0x05	; 5
    5602:	8d 91       	ld	r24, X+
    5604:	9c 91       	ld	r25, X
    5606:	16 97       	sbiw	r26, 0x06	; 6
    5608:	82 0f       	add	r24, r18
    560a:	93 1f       	adc	r25, r19
    560c:	cc 0f       	add	r28, r28
    560e:	dd 1f       	adc	r29, r29
    5610:	cc 0f       	add	r28, r28
    5612:	dd 1f       	adc	r29, r29
    5614:	cc 0f       	add	r28, r28
    5616:	dd 1f       	adc	r29, r29
    5618:	cc 50       	subi	r28, 0x0C	; 12
    561a:	da 4d       	sbci	r29, 0xDA	; 218
    561c:	88 83       	st	Y, r24
    561e:	99 83       	std	Y+1, r25	; 0x01
    5620:	f7 01       	movw	r30, r14
    5622:	02 e0       	ldi	r16, 0x02	; 2
    5624:	06 93       	lac	Z, r16
    5626:	e4 c0       	rjmp	.+456    	; 0x57f0 <udd_ep_trans_complet+0x2f0>
    5628:	d8 01       	movw	r26, r16
    562a:	8c 91       	ld	r24, X
    562c:	81 ff       	sbrs	r24, 1
    562e:	cd c0       	rjmp	.+410    	; 0x57ca <udd_ep_trans_complet+0x2ca>
    5630:	8d 7f       	andi	r24, 0xFD	; 253
    5632:	8c 93       	st	X, r24
    5634:	cc 0f       	add	r28, r28
    5636:	dd 1f       	adc	r29, r29
    5638:	cc 0f       	add	r28, r28
    563a:	dd 1f       	adc	r29, r29
    563c:	cc 0f       	add	r28, r28
    563e:	dd 1f       	adc	r29, r29
    5640:	cc 51       	subi	r28, 0x1C	; 28
    5642:	da 4d       	sbci	r29, 0xDA	; 218
    5644:	1a 8a       	std	Y+18, r1	; 0x12
    5646:	1b 8a       	std	Y+19, r1	; 0x13
    5648:	1e 86       	std	Y+14, r1	; 0x0e
    564a:	1f 86       	std	Y+15, r1	; 0x0f
    564c:	f7 01       	movw	r30, r14
    564e:	02 e0       	ldi	r16, 0x02	; 2
    5650:	06 93       	lac	Z, r16
    5652:	ce c0       	rjmp	.+412    	; 0x57f0 <udd_ep_trans_complet+0x2f0>
    5654:	fe 01       	movw	r30, r28
    5656:	ee 0f       	add	r30, r30
    5658:	ff 1f       	adc	r31, r31
    565a:	ee 0f       	add	r30, r30
    565c:	ff 1f       	adc	r31, r31
    565e:	ee 0f       	add	r30, r30
    5660:	ff 1f       	adc	r31, r31
    5662:	ec 51       	subi	r30, 0x1C	; 28
    5664:	fa 4d       	sbci	r31, 0xDA	; 218
    5666:	a6 84       	ldd	r10, Z+14	; 0x0e
    5668:	b7 84       	ldd	r11, Z+15	; 0x0f
    566a:	d8 01       	movw	r26, r16
    566c:	8c 91       	ld	r24, X
    566e:	82 ff       	sbrs	r24, 2
    5670:	1b c0       	rjmp	.+54     	; 0x56a8 <udd_ep_trans_complet+0x1a8>
    5672:	11 96       	adiw	r26, 0x01	; 1
    5674:	ed 91       	ld	r30, X+
    5676:	fc 91       	ld	r31, X
    5678:	12 97       	sbiw	r26, 0x02	; 2
    567a:	15 96       	adiw	r26, 0x05	; 5
    567c:	2d 91       	ld	r18, X+
    567e:	3c 91       	ld	r19, X
    5680:	16 97       	sbiw	r26, 0x06	; 6
    5682:	13 96       	adiw	r26, 0x03	; 3
    5684:	8d 91       	ld	r24, X+
    5686:	9c 91       	ld	r25, X
    5688:	14 97       	sbiw	r26, 0x04	; 4
    568a:	b4 01       	movw	r22, r8
    568c:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <__udivmodhi4>
    5690:	b0 e4       	ldi	r27, 0x40	; 64
    5692:	db 9e       	mul	r13, r27
    5694:	b0 01       	movw	r22, r0
    5696:	11 24       	eor	r1, r1
    5698:	65 54       	subi	r22, 0x45	; 69
    569a:	7b 4d       	sbci	r23, 0xDB	; 219
    569c:	ac 01       	movw	r20, r24
    569e:	cf 01       	movw	r24, r30
    56a0:	82 0f       	add	r24, r18
    56a2:	93 1f       	adc	r25, r19
    56a4:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <memcpy>
    56a8:	f8 01       	movw	r30, r16
    56aa:	25 81       	ldd	r18, Z+5	; 0x05
    56ac:	36 81       	ldd	r19, Z+6	; 0x06
    56ae:	2a 0d       	add	r18, r10
    56b0:	3b 1d       	adc	r19, r11
    56b2:	25 83       	std	Z+5, r18	; 0x05
    56b4:	36 83       	std	Z+6, r19	; 0x06
    56b6:	83 81       	ldd	r24, Z+3	; 0x03
    56b8:	94 81       	ldd	r25, Z+4	; 0x04
    56ba:	82 17       	cp	r24, r18
    56bc:	93 07       	cpc	r25, r19
    56be:	68 f4       	brcc	.+26     	; 0x56da <udd_ep_trans_complet+0x1da>
    56c0:	85 83       	std	Z+5, r24	; 0x05
    56c2:	96 83       	std	Z+6, r25	; 0x06
    56c4:	cc 0f       	add	r28, r28
    56c6:	dd 1f       	adc	r29, r29
    56c8:	cc 0f       	add	r28, r28
    56ca:	dd 1f       	adc	r29, r29
    56cc:	cc 0f       	add	r28, r28
    56ce:	dd 1f       	adc	r29, r29
    56d0:	cc 51       	subi	r28, 0x1C	; 28
    56d2:	da 4d       	sbci	r29, 0xDA	; 218
    56d4:	8a 89       	ldd	r24, Y+18	; 0x12
    56d6:	9b 89       	ldd	r25, Y+19	; 0x13
    56d8:	78 c0       	rjmp	.+240    	; 0x57ca <udd_ep_trans_complet+0x2ca>
    56da:	fe 01       	movw	r30, r28
    56dc:	ee 0f       	add	r30, r30
    56de:	ff 1f       	adc	r31, r31
    56e0:	ee 0f       	add	r30, r30
    56e2:	ff 1f       	adc	r31, r31
    56e4:	ee 0f       	add	r30, r30
    56e6:	ff 1f       	adc	r31, r31
    56e8:	ec 51       	subi	r30, 0x1C	; 28
    56ea:	fa 4d       	sbci	r31, 0xDA	; 218
    56ec:	42 89       	ldd	r20, Z+18	; 0x12
    56ee:	53 89       	ldd	r21, Z+19	; 0x13
    56f0:	a4 16       	cp	r10, r20
    56f2:	b5 06       	cpc	r11, r21
    56f4:	09 f0       	breq	.+2      	; 0x56f8 <udd_ep_trans_complet+0x1f8>
    56f6:	69 c0       	rjmp	.+210    	; 0x57ca <udd_ep_trans_complet+0x2ca>
    56f8:	28 17       	cp	r18, r24
    56fa:	39 07       	cpc	r19, r25
    56fc:	09 f4       	brne	.+2      	; 0x5700 <udd_ep_trans_complet+0x200>
    56fe:	65 c0       	rjmp	.+202    	; 0x57ca <udd_ep_trans_complet+0x2ca>
    5700:	ac 01       	movw	r20, r24
    5702:	42 1b       	sub	r20, r18
    5704:	53 0b       	sbc	r21, r19
    5706:	9a 01       	movw	r18, r20
    5708:	21 15       	cp	r18, r1
    570a:	54 e0       	ldi	r21, 0x04	; 4
    570c:	35 07       	cpc	r19, r21
    570e:	48 f0       	brcs	.+18     	; 0x5722 <udd_ep_trans_complet+0x222>
    5710:	2f ef       	ldi	r18, 0xFF	; 255
    5712:	33 e0       	ldi	r19, 0x03	; 3
    5714:	c9 01       	movw	r24, r18
    5716:	b4 01       	movw	r22, r8
    5718:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <__udivmodhi4>
    571c:	28 1b       	sub	r18, r24
    571e:	39 0b       	sbc	r19, r25
    5720:	06 c0       	rjmp	.+12     	; 0x572e <udd_ep_trans_complet+0x22e>
    5722:	c9 01       	movw	r24, r18
    5724:	b4 01       	movw	r22, r8
    5726:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <__udivmodhi4>
    572a:	28 1b       	sub	r18, r24
    572c:	39 0b       	sbc	r19, r25
    572e:	fe 01       	movw	r30, r28
    5730:	ee 0f       	add	r30, r30
    5732:	ff 1f       	adc	r31, r31
    5734:	ee 0f       	add	r30, r30
    5736:	ff 1f       	adc	r31, r31
    5738:	ee 0f       	add	r30, r30
    573a:	ff 1f       	adc	r31, r31
    573c:	ec 51       	subi	r30, 0x1C	; 28
    573e:	fa 4d       	sbci	r31, 0xDA	; 218
    5740:	16 86       	std	Z+14, r1	; 0x0e
    5742:	17 86       	std	Z+15, r1	; 0x0f
    5744:	28 15       	cp	r18, r8
    5746:	39 05       	cpc	r19, r9
    5748:	00 f5       	brcc	.+64     	; 0x578a <udd_ep_trans_complet+0x28a>
    574a:	d8 01       	movw	r26, r16
    574c:	8c 91       	ld	r24, X
    574e:	84 60       	ori	r24, 0x04	; 4
    5750:	8c 93       	st	X, r24
    5752:	b0 e4       	ldi	r27, 0x40	; 64
    5754:	db 9e       	mul	r13, r27
    5756:	c0 01       	movw	r24, r0
    5758:	11 24       	eor	r1, r1
    575a:	85 54       	subi	r24, 0x45	; 69
    575c:	9b 4d       	sbci	r25, 0xDB	; 219
    575e:	fe 01       	movw	r30, r28
    5760:	ee 0f       	add	r30, r30
    5762:	ff 1f       	adc	r31, r31
    5764:	ee 0f       	add	r30, r30
    5766:	ff 1f       	adc	r31, r31
    5768:	ee 0f       	add	r30, r30
    576a:	ff 1f       	adc	r31, r31
    576c:	ec 50       	subi	r30, 0x0C	; 12
    576e:	fa 4d       	sbci	r31, 0xDA	; 218
    5770:	80 83       	st	Z, r24
    5772:	91 83       	std	Z+1, r25	; 0x01
    5774:	cc 0f       	add	r28, r28
    5776:	dd 1f       	adc	r29, r29
    5778:	cc 0f       	add	r28, r28
    577a:	dd 1f       	adc	r29, r29
    577c:	cc 0f       	add	r28, r28
    577e:	dd 1f       	adc	r29, r29
    5780:	cc 51       	subi	r28, 0x1C	; 28
    5782:	da 4d       	sbci	r29, 0xDA	; 218
    5784:	8a 8a       	std	Y+18, r8	; 0x12
    5786:	9b 8a       	std	Y+19, r9	; 0x13
    5788:	1c c0       	rjmp	.+56     	; 0x57c2 <udd_ep_trans_complet+0x2c2>
    578a:	f8 01       	movw	r30, r16
    578c:	41 81       	ldd	r20, Z+1	; 0x01
    578e:	52 81       	ldd	r21, Z+2	; 0x02
    5790:	85 81       	ldd	r24, Z+5	; 0x05
    5792:	96 81       	ldd	r25, Z+6	; 0x06
    5794:	84 0f       	add	r24, r20
    5796:	95 1f       	adc	r25, r21
    5798:	fe 01       	movw	r30, r28
    579a:	ee 0f       	add	r30, r30
    579c:	ff 1f       	adc	r31, r31
    579e:	ee 0f       	add	r30, r30
    57a0:	ff 1f       	adc	r31, r31
    57a2:	ee 0f       	add	r30, r30
    57a4:	ff 1f       	adc	r31, r31
    57a6:	ec 50       	subi	r30, 0x0C	; 12
    57a8:	fa 4d       	sbci	r31, 0xDA	; 218
    57aa:	80 83       	st	Z, r24
    57ac:	91 83       	std	Z+1, r25	; 0x01
    57ae:	cc 0f       	add	r28, r28
    57b0:	dd 1f       	adc	r29, r29
    57b2:	cc 0f       	add	r28, r28
    57b4:	dd 1f       	adc	r29, r29
    57b6:	cc 0f       	add	r28, r28
    57b8:	dd 1f       	adc	r29, r29
    57ba:	cc 51       	subi	r28, 0x1C	; 28
    57bc:	da 4d       	sbci	r29, 0xDA	; 218
    57be:	2a 8b       	std	Y+18, r18	; 0x12
    57c0:	3b 8b       	std	Y+19, r19	; 0x13
    57c2:	f7 01       	movw	r30, r14
    57c4:	02 e0       	ldi	r16, 0x02	; 2
    57c6:	06 93       	lac	Z, r16
    57c8:	13 c0       	rjmp	.+38     	; 0x57f0 <udd_ep_trans_complet+0x2f0>
    57ca:	d8 01       	movw	r26, r16
    57cc:	8c 91       	ld	r24, X
    57ce:	80 ff       	sbrs	r24, 0
    57d0:	0f c0       	rjmp	.+30     	; 0x57f0 <udd_ep_trans_complet+0x2f0>
    57d2:	8e 7f       	andi	r24, 0xFE	; 254
    57d4:	8c 93       	st	X, r24
    57d6:	17 96       	adiw	r26, 0x07	; 7
    57d8:	ed 91       	ld	r30, X+
    57da:	fc 91       	ld	r31, X
    57dc:	18 97       	sbiw	r26, 0x08	; 8
    57de:	30 97       	sbiw	r30, 0x00	; 0
    57e0:	39 f0       	breq	.+14     	; 0x57f0 <udd_ep_trans_complet+0x2f0>
    57e2:	15 96       	adiw	r26, 0x05	; 5
    57e4:	6d 91       	ld	r22, X+
    57e6:	7c 91       	ld	r23, X
    57e8:	16 97       	sbiw	r26, 0x06	; 6
    57ea:	4d 2d       	mov	r20, r13
    57ec:	80 e0       	ldi	r24, 0x00	; 0
    57ee:	19 95       	eicall
    57f0:	df 91       	pop	r29
    57f2:	cf 91       	pop	r28
    57f4:	1f 91       	pop	r17
    57f6:	0f 91       	pop	r16
    57f8:	ff 90       	pop	r15
    57fa:	ef 90       	pop	r14
    57fc:	df 90       	pop	r13
    57fe:	bf 90       	pop	r11
    5800:	af 90       	pop	r10
    5802:	9f 90       	pop	r9
    5804:	8f 90       	pop	r8
    5806:	08 95       	ret

00005808 <udd_attach>:
    5808:	1f 93       	push	r17
    580a:	cf 93       	push	r28
    580c:	df 93       	push	r29
    580e:	1f 92       	push	r1
    5810:	cd b7       	in	r28, 0x3d	; 61
    5812:	de b7       	in	r29, 0x3e	; 62
    5814:	8f b7       	in	r24, 0x3f	; 63
    5816:	89 83       	std	Y+1, r24	; 0x01
    5818:	f8 94       	cli
    581a:	19 81       	ldd	r17, Y+1	; 0x01
    581c:	81 e0       	ldi	r24, 0x01	; 1
    581e:	cd dc       	rcall	.-1638   	; 0x51ba <udd_sleep_mode>
    5820:	ea ec       	ldi	r30, 0xCA	; 202
    5822:	f4 e0       	ldi	r31, 0x04	; 4
    5824:	80 e4       	ldi	r24, 0x40	; 64
    5826:	80 83       	st	Z, r24
    5828:	80 e2       	ldi	r24, 0x20	; 32
    582a:	80 83       	st	Z, r24
    582c:	e1 ec       	ldi	r30, 0xC1	; 193
    582e:	f4 e0       	ldi	r31, 0x04	; 4
    5830:	80 81       	ld	r24, Z
    5832:	81 60       	ori	r24, 0x01	; 1
    5834:	80 83       	st	Z, r24
    5836:	a9 ec       	ldi	r26, 0xC9	; 201
    5838:	b4 e0       	ldi	r27, 0x04	; 4
    583a:	8c 91       	ld	r24, X
    583c:	82 60       	ori	r24, 0x02	; 2
    583e:	8c 93       	st	X, r24
    5840:	e8 ec       	ldi	r30, 0xC8	; 200
    5842:	f4 e0       	ldi	r31, 0x04	; 4
    5844:	80 81       	ld	r24, Z
    5846:	80 64       	ori	r24, 0x40	; 64
    5848:	80 83       	st	Z, r24
    584a:	8c 91       	ld	r24, X
    584c:	81 60       	ori	r24, 0x01	; 1
    584e:	8c 93       	st	X, r24
    5850:	80 81       	ld	r24, Z
    5852:	80 68       	ori	r24, 0x80	; 128
    5854:	80 83       	st	Z, r24
    5856:	1f bf       	out	0x3f, r17	; 63
    5858:	0f 90       	pop	r0
    585a:	df 91       	pop	r29
    585c:	cf 91       	pop	r28
    585e:	1f 91       	pop	r17
    5860:	08 95       	ret

00005862 <udd_enable>:
    5862:	0f 93       	push	r16
    5864:	1f 93       	push	r17
    5866:	cf 93       	push	r28
    5868:	df 93       	push	r29
    586a:	1f 92       	push	r1
    586c:	1f 92       	push	r1
    586e:	cd b7       	in	r28, 0x3d	; 61
    5870:	de b7       	in	r29, 0x3e	; 62
    5872:	00 e6       	ldi	r16, 0x60	; 96
    5874:	10 e0       	ldi	r17, 0x00	; 0
    5876:	f8 01       	movw	r30, r16
    5878:	10 82       	st	Z, r1
    587a:	80 e3       	ldi	r24, 0x30	; 48
    587c:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <sysclk_enable_usb>
    5880:	e0 ec       	ldi	r30, 0xC0	; 192
    5882:	f4 e0       	ldi	r31, 0x04	; 4
    5884:	80 81       	ld	r24, Z
    5886:	80 64       	ori	r24, 0x40	; 64
    5888:	80 83       	st	Z, r24
    588a:	81 e0       	ldi	r24, 0x01	; 1
    588c:	f8 01       	movw	r30, r16
    588e:	80 83       	st	Z, r24
    5890:	8f b7       	in	r24, 0x3f	; 63
    5892:	8a 83       	std	Y+2, r24	; 0x02
    5894:	f8 94       	cli
    5896:	1a 81       	ldd	r17, Y+2	; 0x02
    5898:	e4 ee       	ldi	r30, 0xE4	; 228
    589a:	f5 e2       	ldi	r31, 0x25	; 37
    589c:	15 86       	std	Z+13, r1	; 0x0d
    589e:	15 8a       	std	Z+21, r1	; 0x15
    58a0:	15 8e       	std	Z+29, r1	; 0x1d
    58a2:	15 a2       	std	Z+37, r1	; 0x25
    58a4:	15 a6       	std	Z+45, r1	; 0x2d
    58a6:	15 aa       	std	Z+53, r1	; 0x35
    58a8:	eb e7       	ldi	r30, 0x7B	; 123
    58aa:	f5 e2       	ldi	r31, 0x25	; 37
    58ac:	80 81       	ld	r24, Z
    58ae:	8e 7f       	andi	r24, 0xFE	; 254
    58b0:	80 83       	st	Z, r24
    58b2:	e4 e8       	ldi	r30, 0x84	; 132
    58b4:	f5 e2       	ldi	r31, 0x25	; 37
    58b6:	80 81       	ld	r24, Z
    58b8:	8e 7f       	andi	r24, 0xFE	; 254
    58ba:	80 83       	st	Z, r24
    58bc:	ed e8       	ldi	r30, 0x8D	; 141
    58be:	f5 e2       	ldi	r31, 0x25	; 37
    58c0:	80 81       	ld	r24, Z
    58c2:	8e 7f       	andi	r24, 0xFE	; 254
    58c4:	80 83       	st	Z, r24
    58c6:	e6 e9       	ldi	r30, 0x96	; 150
    58c8:	f5 e2       	ldi	r31, 0x25	; 37
    58ca:	80 81       	ld	r24, Z
    58cc:	8e 7f       	andi	r24, 0xFE	; 254
    58ce:	80 83       	st	Z, r24
    58d0:	6a e1       	ldi	r22, 0x1A	; 26
    58d2:	70 e0       	ldi	r23, 0x00	; 0
    58d4:	82 e0       	ldi	r24, 0x02	; 2
    58d6:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
    58da:	8f 3f       	cpi	r24, 0xFF	; 255
    58dc:	19 f0       	breq	.+6      	; 0x58e4 <udd_enable+0x82>
    58de:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    58e2:	03 c0       	rjmp	.+6      	; 0x58ea <udd_enable+0x88>
    58e4:	8f e1       	ldi	r24, 0x1F	; 31
    58e6:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    58ea:	6b e1       	ldi	r22, 0x1B	; 27
    58ec:	70 e0       	ldi	r23, 0x00	; 0
    58ee:	82 e0       	ldi	r24, 0x02	; 2
    58f0:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
    58f4:	8f 3f       	cpi	r24, 0xFF	; 255
    58f6:	19 f0       	breq	.+6      	; 0x58fe <udd_enable+0x9c>
    58f8:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    58fc:	03 c0       	rjmp	.+6      	; 0x5904 <udd_enable+0xa2>
    58fe:	8f e1       	ldi	r24, 0x1F	; 31
    5900:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    5904:	e0 ec       	ldi	r30, 0xC0	; 192
    5906:	f4 e0       	ldi	r31, 0x04	; 4
    5908:	80 81       	ld	r24, Z
    590a:	82 60       	ori	r24, 0x02	; 2
    590c:	80 83       	st	Z, r24
    590e:	80 81       	ld	r24, Z
    5910:	80 68       	ori	r24, 0x80	; 128
    5912:	80 83       	st	Z, r24
    5914:	80 81       	ld	r24, Z
    5916:	80 61       	ori	r24, 0x10	; 16
    5918:	80 83       	st	Z, r24
    591a:	80 ef       	ldi	r24, 0xF0	; 240
    591c:	95 e2       	ldi	r25, 0x25	; 37
    591e:	86 83       	std	Z+6, r24	; 0x06
    5920:	97 83       	std	Z+7, r25	; 0x07
    5922:	80 81       	ld	r24, Z
    5924:	80 62       	ori	r24, 0x20	; 32
    5926:	80 83       	st	Z, r24
    5928:	8f ef       	ldi	r24, 0xFF	; 255
    592a:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    592e:	e8 ec       	ldi	r30, 0xC8	; 200
    5930:	f4 e0       	ldi	r31, 0x04	; 4
    5932:	80 81       	ld	r24, Z
    5934:	81 60       	ori	r24, 0x01	; 1
    5936:	80 83       	st	Z, r24
    5938:	10 92 24 26 	sts	0x2624, r1	; 0x802624 <udd_b_idle>
    593c:	80 91 60 2a 	lds	r24, 0x2A60	; 0x802a60 <sleepmgr_locks+0x5>
    5940:	8f 3f       	cpi	r24, 0xFF	; 255
    5942:	09 f4       	brne	.+2      	; 0x5946 <udd_enable+0xe4>
    5944:	ff cf       	rjmp	.-2      	; 0x5944 <udd_enable+0xe2>
    5946:	8f b7       	in	r24, 0x3f	; 63
    5948:	89 83       	std	Y+1, r24	; 0x01
    594a:	f8 94       	cli
    594c:	99 81       	ldd	r25, Y+1	; 0x01
    594e:	eb e5       	ldi	r30, 0x5B	; 91
    5950:	fa e2       	ldi	r31, 0x2A	; 42
    5952:	85 81       	ldd	r24, Z+5	; 0x05
    5954:	8f 5f       	subi	r24, 0xFF	; 255
    5956:	85 83       	std	Z+5, r24	; 0x05
    5958:	9f bf       	out	0x3f, r25	; 63
    595a:	56 df       	rcall	.-340    	; 0x5808 <udd_attach>
    595c:	1f bf       	out	0x3f, r17	; 63
    595e:	0f 90       	pop	r0
    5960:	0f 90       	pop	r0
    5962:	df 91       	pop	r29
    5964:	cf 91       	pop	r28
    5966:	1f 91       	pop	r17
    5968:	0f 91       	pop	r16
    596a:	08 95       	ret

0000596c <udd_is_high_speed>:
    596c:	80 e0       	ldi	r24, 0x00	; 0
    596e:	08 95       	ret

00005970 <udd_set_address>:
    5970:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    5974:	08 95       	ret

00005976 <udd_getaddress>:
    5976:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    597a:	08 95       	ret

0000597c <udd_get_frame_number>:
    597c:	80 91 20 26 	lds	r24, 0x2620	; 0x802620 <udd_sram+0x3c>
    5980:	90 91 21 26 	lds	r25, 0x2621	; 0x802621 <udd_sram+0x3d>
    5984:	08 95       	ret

00005986 <udd_get_micro_frame_number>:
    5986:	80 e0       	ldi	r24, 0x00	; 0
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	08 95       	ret

0000598c <udd_set_setup_payload>:
    598c:	eb e4       	ldi	r30, 0x4B	; 75
    598e:	fa e2       	ldi	r31, 0x2A	; 42
    5990:	80 87       	std	Z+8, r24	; 0x08
    5992:	91 87       	std	Z+9, r25	; 0x09
    5994:	62 87       	std	Z+10, r22	; 0x0a
    5996:	73 87       	std	Z+11, r23	; 0x0b
    5998:	08 95       	ret

0000599a <udd_ep_alloc>:
    599a:	28 2f       	mov	r18, r24
    599c:	2f 70       	andi	r18, 0x0F	; 15
    599e:	30 e0       	ldi	r19, 0x00	; 0
    59a0:	22 0f       	add	r18, r18
    59a2:	33 1f       	adc	r19, r19
    59a4:	08 2e       	mov	r0, r24
    59a6:	00 0c       	add	r0, r0
    59a8:	99 0b       	sbc	r25, r25
    59aa:	88 27       	eor	r24, r24
    59ac:	99 0f       	add	r25, r25
    59ae:	88 1f       	adc	r24, r24
    59b0:	99 27       	eor	r25, r25
    59b2:	82 0f       	add	r24, r18
    59b4:	93 1f       	adc	r25, r19
    59b6:	fc 01       	movw	r30, r24
    59b8:	ee 0f       	add	r30, r30
    59ba:	ff 1f       	adc	r31, r31
    59bc:	ee 0f       	add	r30, r30
    59be:	ff 1f       	adc	r31, r31
    59c0:	ee 0f       	add	r30, r30
    59c2:	ff 1f       	adc	r31, r31
    59c4:	ec 51       	subi	r30, 0x1C	; 28
    59c6:	fa 4d       	sbci	r31, 0xDA	; 218
    59c8:	25 85       	ldd	r18, Z+13	; 0x0d
    59ca:	20 7c       	andi	r18, 0xC0	; 192
    59cc:	09 f0       	breq	.+2      	; 0x59d0 <udd_ep_alloc+0x36>
    59ce:	69 c0       	rjmp	.+210    	; 0x5aa2 <udd_ep_alloc+0x108>
    59d0:	63 70       	andi	r22, 0x03	; 3
    59d2:	61 30       	cpi	r22, 0x01	; 1
    59d4:	11 f0       	breq	.+4      	; 0x59da <udd_ep_alloc+0x40>
    59d6:	18 f4       	brcc	.+6      	; 0x59de <udd_ep_alloc+0x44>
    59d8:	04 c0       	rjmp	.+8      	; 0x59e2 <udd_ep_alloc+0x48>
    59da:	60 ec       	ldi	r22, 0xC0	; 192
    59dc:	03 c0       	rjmp	.+6      	; 0x59e4 <udd_ep_alloc+0x4a>
    59de:	60 e8       	ldi	r22, 0x80	; 128
    59e0:	01 c0       	rjmp	.+2      	; 0x59e4 <udd_ep_alloc+0x4a>
    59e2:	60 e4       	ldi	r22, 0x40	; 64
    59e4:	40 38       	cpi	r20, 0x80	; 128
    59e6:	51 05       	cpc	r21, r1
    59e8:	e9 f0       	breq	.+58     	; 0x5a24 <udd_ep_alloc+0x8a>
    59ea:	50 f4       	brcc	.+20     	; 0x5a00 <udd_ep_alloc+0x66>
    59ec:	40 32       	cpi	r20, 0x20	; 32
    59ee:	51 05       	cpc	r21, r1
    59f0:	a9 f0       	breq	.+42     	; 0x5a1c <udd_ep_alloc+0x82>
    59f2:	40 34       	cpi	r20, 0x40	; 64
    59f4:	51 05       	cpc	r21, r1
    59f6:	a1 f0       	breq	.+40     	; 0x5a20 <udd_ep_alloc+0x86>
    59f8:	40 31       	cpi	r20, 0x10	; 16
    59fa:	51 05       	cpc	r21, r1
    59fc:	d9 f4       	brne	.+54     	; 0x5a34 <udd_ep_alloc+0x9a>
    59fe:	0c c0       	rjmp	.+24     	; 0x5a18 <udd_ep_alloc+0x7e>
    5a00:	41 15       	cp	r20, r1
    5a02:	22 e0       	ldi	r18, 0x02	; 2
    5a04:	52 07       	cpc	r21, r18
    5a06:	91 f0       	breq	.+36     	; 0x5a2c <udd_ep_alloc+0x92>
    5a08:	4f 3f       	cpi	r20, 0xFF	; 255
    5a0a:	23 e0       	ldi	r18, 0x03	; 3
    5a0c:	52 07       	cpc	r21, r18
    5a0e:	81 f0       	breq	.+32     	; 0x5a30 <udd_ep_alloc+0x96>
    5a10:	41 15       	cp	r20, r1
    5a12:	51 40       	sbci	r21, 0x01	; 1
    5a14:	79 f4       	brne	.+30     	; 0x5a34 <udd_ep_alloc+0x9a>
    5a16:	08 c0       	rjmp	.+16     	; 0x5a28 <udd_ep_alloc+0x8e>
    5a18:	21 e0       	ldi	r18, 0x01	; 1
    5a1a:	0d c0       	rjmp	.+26     	; 0x5a36 <udd_ep_alloc+0x9c>
    5a1c:	22 e0       	ldi	r18, 0x02	; 2
    5a1e:	0b c0       	rjmp	.+22     	; 0x5a36 <udd_ep_alloc+0x9c>
    5a20:	23 e0       	ldi	r18, 0x03	; 3
    5a22:	09 c0       	rjmp	.+18     	; 0x5a36 <udd_ep_alloc+0x9c>
    5a24:	24 e0       	ldi	r18, 0x04	; 4
    5a26:	07 c0       	rjmp	.+14     	; 0x5a36 <udd_ep_alloc+0x9c>
    5a28:	25 e0       	ldi	r18, 0x05	; 5
    5a2a:	05 c0       	rjmp	.+10     	; 0x5a36 <udd_ep_alloc+0x9c>
    5a2c:	26 e0       	ldi	r18, 0x06	; 6
    5a2e:	03 c0       	rjmp	.+6      	; 0x5a36 <udd_ep_alloc+0x9c>
    5a30:	27 e0       	ldi	r18, 0x07	; 7
    5a32:	01 c0       	rjmp	.+2      	; 0x5a36 <udd_ep_alloc+0x9c>
    5a34:	20 e0       	ldi	r18, 0x00	; 0
    5a36:	fc 01       	movw	r30, r24
    5a38:	ee 0f       	add	r30, r30
    5a3a:	ff 1f       	adc	r31, r31
    5a3c:	ee 0f       	add	r30, r30
    5a3e:	ff 1f       	adc	r31, r31
    5a40:	ee 0f       	add	r30, r30
    5a42:	ff 1f       	adc	r31, r31
    5a44:	ec 51       	subi	r30, 0x1C	; 28
    5a46:	fa 4d       	sbci	r31, 0xDA	; 218
    5a48:	15 86       	std	Z+13, r1	; 0x0d
    5a4a:	36 e0       	ldi	r19, 0x06	; 6
    5a4c:	34 87       	std	Z+12, r19	; 0x0c
    5a4e:	26 2b       	or	r18, r22
    5a50:	25 87       	std	Z+13, r18	; 0x0d
    5a52:	fc 01       	movw	r30, r24
    5a54:	ee 0f       	add	r30, r30
    5a56:	ff 1f       	adc	r31, r31
    5a58:	ee 0f       	add	r30, r30
    5a5a:	ff 1f       	adc	r31, r31
    5a5c:	ee 0f       	add	r30, r30
    5a5e:	ff 1f       	adc	r31, r31
    5a60:	ec 51       	subi	r30, 0x1C	; 28
    5a62:	fa 4d       	sbci	r31, 0xDA	; 218
    5a64:	25 85       	ldd	r18, Z+13	; 0x0d
    5a66:	20 7c       	andi	r18, 0xC0	; 192
    5a68:	20 3c       	cpi	r18, 0xC0	; 192
    5a6a:	69 f4       	brne	.+26     	; 0x5a86 <udd_ep_alloc+0xec>
    5a6c:	fc 01       	movw	r30, r24
    5a6e:	ee 0f       	add	r30, r30
    5a70:	ff 1f       	adc	r31, r31
    5a72:	ee 0f       	add	r30, r30
    5a74:	ff 1f       	adc	r31, r31
    5a76:	ee 0f       	add	r30, r30
    5a78:	ff 1f       	adc	r31, r31
    5a7a:	ec 51       	subi	r30, 0x1C	; 28
    5a7c:	fa 4d       	sbci	r31, 0xDA	; 218
    5a7e:	25 85       	ldd	r18, Z+13	; 0x0d
    5a80:	27 70       	andi	r18, 0x07	; 7
    5a82:	27 30       	cpi	r18, 0x07	; 7
    5a84:	81 f0       	breq	.+32     	; 0x5aa6 <udd_ep_alloc+0x10c>
    5a86:	88 0f       	add	r24, r24
    5a88:	99 1f       	adc	r25, r25
    5a8a:	88 0f       	add	r24, r24
    5a8c:	99 1f       	adc	r25, r25
    5a8e:	88 0f       	add	r24, r24
    5a90:	99 1f       	adc	r25, r25
    5a92:	fc 01       	movw	r30, r24
    5a94:	ec 51       	subi	r30, 0x1C	; 28
    5a96:	fa 4d       	sbci	r31, 0xDA	; 218
    5a98:	85 85       	ldd	r24, Z+13	; 0x0d
    5a9a:	80 62       	ori	r24, 0x20	; 32
    5a9c:	85 87       	std	Z+13, r24	; 0x0d
    5a9e:	81 e0       	ldi	r24, 0x01	; 1
    5aa0:	08 95       	ret
    5aa2:	80 e0       	ldi	r24, 0x00	; 0
    5aa4:	08 95       	ret
    5aa6:	81 e0       	ldi	r24, 0x01	; 1
    5aa8:	08 95       	ret

00005aaa <udd_ep_is_halted>:
    5aaa:	e8 2f       	mov	r30, r24
    5aac:	ef 70       	andi	r30, 0x0F	; 15
    5aae:	f0 e0       	ldi	r31, 0x00	; 0
    5ab0:	ee 0f       	add	r30, r30
    5ab2:	ff 1f       	adc	r31, r31
    5ab4:	08 2e       	mov	r0, r24
    5ab6:	00 0c       	add	r0, r0
    5ab8:	99 0b       	sbc	r25, r25
    5aba:	88 27       	eor	r24, r24
    5abc:	99 0f       	add	r25, r25
    5abe:	88 1f       	adc	r24, r24
    5ac0:	99 27       	eor	r25, r25
    5ac2:	e8 0f       	add	r30, r24
    5ac4:	f9 1f       	adc	r31, r25
    5ac6:	ee 0f       	add	r30, r30
    5ac8:	ff 1f       	adc	r31, r31
    5aca:	ee 0f       	add	r30, r30
    5acc:	ff 1f       	adc	r31, r31
    5ace:	ee 0f       	add	r30, r30
    5ad0:	ff 1f       	adc	r31, r31
    5ad2:	ec 51       	subi	r30, 0x1C	; 28
    5ad4:	fa 4d       	sbci	r31, 0xDA	; 218
    5ad6:	85 85       	ldd	r24, Z+13	; 0x0d
    5ad8:	82 fb       	bst	r24, 2
    5ada:	88 27       	eor	r24, r24
    5adc:	80 f9       	bld	r24, 0
    5ade:	08 95       	ret

00005ae0 <udd_ep_clear_halt>:
    5ae0:	0f 93       	push	r16
    5ae2:	28 2f       	mov	r18, r24
    5ae4:	2f 70       	andi	r18, 0x0F	; 15
    5ae6:	30 e0       	ldi	r19, 0x00	; 0
    5ae8:	a9 01       	movw	r20, r18
    5aea:	44 0f       	add	r20, r20
    5aec:	55 1f       	adc	r21, r21
    5aee:	28 2f       	mov	r18, r24
    5af0:	08 2e       	mov	r0, r24
    5af2:	00 0c       	add	r0, r0
    5af4:	33 0b       	sbc	r19, r19
    5af6:	22 27       	eor	r18, r18
    5af8:	33 0f       	add	r19, r19
    5afa:	22 1f       	adc	r18, r18
    5afc:	33 27       	eor	r19, r19
    5afe:	24 0f       	add	r18, r20
    5b00:	35 1f       	adc	r19, r21
    5b02:	a9 01       	movw	r20, r18
    5b04:	44 0f       	add	r20, r20
    5b06:	55 1f       	adc	r21, r21
    5b08:	44 0f       	add	r20, r20
    5b0a:	55 1f       	adc	r21, r21
    5b0c:	44 0f       	add	r20, r20
    5b0e:	55 1f       	adc	r21, r21
    5b10:	fa 01       	movw	r30, r20
    5b12:	e0 51       	subi	r30, 0x10	; 16
    5b14:	fa 4d       	sbci	r31, 0xDA	; 218
    5b16:	01 e0       	ldi	r16, 0x01	; 1
    5b18:	06 93       	lac	Z, r16
    5b1a:	fa 01       	movw	r30, r20
    5b1c:	ec 51       	subi	r30, 0x1C	; 28
    5b1e:	fa 4d       	sbci	r31, 0xDA	; 218
    5b20:	95 85       	ldd	r25, Z+13	; 0x0d
    5b22:	92 ff       	sbrs	r25, 2
    5b24:	11 c0       	rjmp	.+34     	; 0x5b48 <udd_ep_clear_halt+0x68>
    5b26:	fa 01       	movw	r30, r20
    5b28:	ec 51       	subi	r30, 0x1C	; 28
    5b2a:	fa 4d       	sbci	r31, 0xDA	; 218
    5b2c:	95 85       	ldd	r25, Z+13	; 0x0d
    5b2e:	9b 7f       	andi	r25, 0xFB	; 251
    5b30:	95 87       	std	Z+13, r25	; 0x0d
    5b32:	59 dc       	rcall	.-1870   	; 0x53e6 <udd_ep_get_job>
    5b34:	fc 01       	movw	r30, r24
    5b36:	80 81       	ld	r24, Z
    5b38:	80 ff       	sbrs	r24, 0
    5b3a:	06 c0       	rjmp	.+12     	; 0x5b48 <udd_ep_clear_halt+0x68>
    5b3c:	8e 7f       	andi	r24, 0xFE	; 254
    5b3e:	80 83       	st	Z, r24
    5b40:	07 80       	ldd	r0, Z+7	; 0x07
    5b42:	f0 85       	ldd	r31, Z+8	; 0x08
    5b44:	e0 2d       	mov	r30, r0
    5b46:	19 95       	eicall
    5b48:	81 e0       	ldi	r24, 0x01	; 1
    5b4a:	0f 91       	pop	r16
    5b4c:	08 95       	ret

00005b4e <udd_ep_run>:
    5b4e:	6f 92       	push	r6
    5b50:	7f 92       	push	r7
    5b52:	8f 92       	push	r8
    5b54:	9f 92       	push	r9
    5b56:	af 92       	push	r10
    5b58:	bf 92       	push	r11
    5b5a:	cf 92       	push	r12
    5b5c:	df 92       	push	r13
    5b5e:	ef 92       	push	r14
    5b60:	ff 92       	push	r15
    5b62:	0f 93       	push	r16
    5b64:	1f 93       	push	r17
    5b66:	cf 93       	push	r28
    5b68:	df 93       	push	r29
    5b6a:	1f 92       	push	r1
    5b6c:	cd b7       	in	r28, 0x3d	; 61
    5b6e:	de b7       	in	r29, 0x3e	; 62
    5b70:	78 2e       	mov	r7, r24
    5b72:	66 2e       	mov	r6, r22
    5b74:	4a 01       	movw	r8, r20
    5b76:	59 01       	movw	r10, r18
    5b78:	36 dc       	rcall	.-1940   	; 0x53e6 <udd_ep_get_job>
    5b7a:	6c 01       	movw	r12, r24
    5b7c:	27 2d       	mov	r18, r7
    5b7e:	87 2d       	mov	r24, r7
    5b80:	8f 70       	andi	r24, 0x0F	; 15
    5b82:	e8 2e       	mov	r14, r24
    5b84:	f1 2c       	mov	r15, r1
    5b86:	c7 01       	movw	r24, r14
    5b88:	88 0f       	add	r24, r24
    5b8a:	99 1f       	adc	r25, r25
    5b8c:	e7 2c       	mov	r14, r7
    5b8e:	07 2c       	mov	r0, r7
    5b90:	00 0c       	add	r0, r0
    5b92:	ff 08       	sbc	r15, r15
    5b94:	ee 24       	eor	r14, r14
    5b96:	ff 0c       	add	r15, r15
    5b98:	ee 1c       	adc	r14, r14
    5b9a:	ff 24       	eor	r15, r15
    5b9c:	e8 0e       	add	r14, r24
    5b9e:	f9 1e       	adc	r15, r25
    5ba0:	f7 01       	movw	r30, r14
    5ba2:	ee 0f       	add	r30, r30
    5ba4:	ff 1f       	adc	r31, r31
    5ba6:	ee 0f       	add	r30, r30
    5ba8:	ff 1f       	adc	r31, r31
    5baa:	ee 0f       	add	r30, r30
    5bac:	ff 1f       	adc	r31, r31
    5bae:	ec 51       	subi	r30, 0x1C	; 28
    5bb0:	fa 4d       	sbci	r31, 0xDA	; 218
    5bb2:	85 85       	ldd	r24, Z+13	; 0x0d
    5bb4:	80 7c       	andi	r24, 0xC0	; 192
    5bb6:	09 f4       	brne	.+2      	; 0x5bba <udd_ep_run+0x6c>
    5bb8:	82 c0       	rjmp	.+260    	; 0x5cbe <udd_ep_run+0x170>
    5bba:	f7 01       	movw	r30, r14
    5bbc:	ee 0f       	add	r30, r30
    5bbe:	ff 1f       	adc	r31, r31
    5bc0:	ee 0f       	add	r30, r30
    5bc2:	ff 1f       	adc	r31, r31
    5bc4:	ee 0f       	add	r30, r30
    5bc6:	ff 1f       	adc	r31, r31
    5bc8:	ec 51       	subi	r30, 0x1C	; 28
    5bca:	fa 4d       	sbci	r31, 0xDA	; 218
    5bcc:	85 85       	ldd	r24, Z+13	; 0x0d
    5bce:	80 7c       	andi	r24, 0xC0	; 192
    5bd0:	80 3c       	cpi	r24, 0xC0	; 192
    5bd2:	61 f0       	breq	.+24     	; 0x5bec <udd_ep_run+0x9e>
    5bd4:	f7 01       	movw	r30, r14
    5bd6:	ee 0f       	add	r30, r30
    5bd8:	ff 1f       	adc	r31, r31
    5bda:	ee 0f       	add	r30, r30
    5bdc:	ff 1f       	adc	r31, r31
    5bde:	ee 0f       	add	r30, r30
    5be0:	ff 1f       	adc	r31, r31
    5be2:	ec 51       	subi	r30, 0x1C	; 28
    5be4:	fa 4d       	sbci	r31, 0xDA	; 218
    5be6:	85 85       	ldd	r24, Z+13	; 0x0d
    5be8:	82 fd       	sbrc	r24, 2
    5bea:	6b c0       	rjmp	.+214    	; 0x5cc2 <udd_ep_run+0x174>
    5bec:	8f b7       	in	r24, 0x3f	; 63
    5bee:	89 83       	std	Y+1, r24	; 0x01
    5bf0:	f8 94       	cli
    5bf2:	89 81       	ldd	r24, Y+1	; 0x01
    5bf4:	f6 01       	movw	r30, r12
    5bf6:	90 81       	ld	r25, Z
    5bf8:	90 ff       	sbrs	r25, 0
    5bfa:	03 c0       	rjmp	.+6      	; 0x5c02 <udd_ep_run+0xb4>
    5bfc:	8f bf       	out	0x3f, r24	; 63
    5bfe:	80 e0       	ldi	r24, 0x00	; 0
    5c00:	61 c0       	rjmp	.+194    	; 0x5cc4 <udd_ep_run+0x176>
    5c02:	f6 01       	movw	r30, r12
    5c04:	90 81       	ld	r25, Z
    5c06:	91 60       	ori	r25, 0x01	; 1
    5c08:	90 83       	st	Z, r25
    5c0a:	8f bf       	out	0x3f, r24	; 63
    5c0c:	81 82       	std	Z+1, r8	; 0x01
    5c0e:	92 82       	std	Z+2, r9	; 0x02
    5c10:	a3 82       	std	Z+3, r10	; 0x03
    5c12:	b4 82       	std	Z+4, r11	; 0x04
    5c14:	15 82       	std	Z+5, r1	; 0x05
    5c16:	16 82       	std	Z+6, r1	; 0x06
    5c18:	07 83       	std	Z+7, r16	; 0x07
    5c1a:	10 87       	std	Z+8, r17	; 0x08
    5c1c:	61 10       	cpse	r6, r1
    5c1e:	06 c0       	rjmp	.+12     	; 0x5c2c <udd_ep_run+0xde>
    5c20:	91 e0       	ldi	r25, 0x01	; 1
    5c22:	a1 14       	cp	r10, r1
    5c24:	b1 04       	cpc	r11, r1
    5c26:	19 f0       	breq	.+6      	; 0x5c2e <udd_ep_run+0xe0>
    5c28:	90 e0       	ldi	r25, 0x00	; 0
    5c2a:	01 c0       	rjmp	.+2      	; 0x5c2e <udd_ep_run+0xe0>
    5c2c:	91 e0       	ldi	r25, 0x01	; 1
    5c2e:	f6 01       	movw	r30, r12
    5c30:	80 81       	ld	r24, Z
    5c32:	90 fb       	bst	r25, 0
    5c34:	81 f9       	bld	r24, 1
    5c36:	8b 7f       	andi	r24, 0xFB	; 251
    5c38:	80 83       	st	Z, r24
    5c3a:	22 23       	and	r18, r18
    5c3c:	64 f4       	brge	.+24     	; 0x5c56 <udd_ep_run+0x108>
    5c3e:	f7 01       	movw	r30, r14
    5c40:	ee 0f       	add	r30, r30
    5c42:	ff 1f       	adc	r31, r31
    5c44:	ee 0f       	add	r30, r30
    5c46:	ff 1f       	adc	r31, r31
    5c48:	ee 0f       	add	r30, r30
    5c4a:	ff 1f       	adc	r31, r31
    5c4c:	ec 51       	subi	r30, 0x1C	; 28
    5c4e:	fa 4d       	sbci	r31, 0xDA	; 218
    5c50:	12 8a       	std	Z+18, r1	; 0x12
    5c52:	13 8a       	std	Z+19, r1	; 0x13
    5c54:	30 c0       	rjmp	.+96     	; 0x5cb6 <udd_ep_run+0x168>
    5c56:	f7 01       	movw	r30, r14
    5c58:	ee 0f       	add	r30, r30
    5c5a:	ff 1f       	adc	r31, r31
    5c5c:	ee 0f       	add	r30, r30
    5c5e:	ff 1f       	adc	r31, r31
    5c60:	ee 0f       	add	r30, r30
    5c62:	ff 1f       	adc	r31, r31
    5c64:	ec 51       	subi	r30, 0x1C	; 28
    5c66:	fa 4d       	sbci	r31, 0xDA	; 218
    5c68:	85 85       	ldd	r24, Z+13	; 0x0d
    5c6a:	80 7c       	andi	r24, 0xC0	; 192
    5c6c:	80 3c       	cpi	r24, 0xC0	; 192
    5c6e:	b1 f4       	brne	.+44     	; 0x5c9c <udd_ep_run+0x14e>
    5c70:	c7 01       	movw	r24, r14
    5c72:	88 0f       	add	r24, r24
    5c74:	99 1f       	adc	r25, r25
    5c76:	88 0f       	add	r24, r24
    5c78:	99 1f       	adc	r25, r25
    5c7a:	88 0f       	add	r24, r24
    5c7c:	99 1f       	adc	r25, r25
    5c7e:	80 51       	subi	r24, 0x10	; 16
    5c80:	9a 4d       	sbci	r25, 0xDA	; 218
    5c82:	88 db       	rcall	.-2288   	; 0x5394 <udd_ep_get_size>
    5c84:	bc 01       	movw	r22, r24
    5c86:	c5 01       	movw	r24, r10
    5c88:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <__udivmodhi4>
    5c8c:	89 2b       	or	r24, r25
    5c8e:	31 f0       	breq	.+12     	; 0x5c9c <udd_ep_run+0x14e>
    5c90:	f6 01       	movw	r30, r12
    5c92:	80 81       	ld	r24, Z
    5c94:	8e 7f       	andi	r24, 0xFE	; 254
    5c96:	80 83       	st	Z, r24
    5c98:	80 e0       	ldi	r24, 0x00	; 0
    5c9a:	14 c0       	rjmp	.+40     	; 0x5cc4 <udd_ep_run+0x176>
    5c9c:	f7 01       	movw	r30, r14
    5c9e:	ee 0f       	add	r30, r30
    5ca0:	ff 1f       	adc	r31, r31
    5ca2:	ee 0f       	add	r30, r30
    5ca4:	ff 1f       	adc	r31, r31
    5ca6:	ee 0f       	add	r30, r30
    5ca8:	ff 1f       	adc	r31, r31
    5caa:	ec 51       	subi	r30, 0x1C	; 28
    5cac:	fa 4d       	sbci	r31, 0xDA	; 218
    5cae:	16 86       	std	Z+14, r1	; 0x0e
    5cb0:	17 86       	std	Z+15, r1	; 0x0f
    5cb2:	12 8a       	std	Z+18, r1	; 0x12
    5cb4:	13 8a       	std	Z+19, r1	; 0x13
    5cb6:	87 2d       	mov	r24, r7
    5cb8:	23 dc       	rcall	.-1978   	; 0x5500 <udd_ep_trans_complet>
    5cba:	81 e0       	ldi	r24, 0x01	; 1
    5cbc:	03 c0       	rjmp	.+6      	; 0x5cc4 <udd_ep_run+0x176>
    5cbe:	80 e0       	ldi	r24, 0x00	; 0
    5cc0:	01 c0       	rjmp	.+2      	; 0x5cc4 <udd_ep_run+0x176>
    5cc2:	80 e0       	ldi	r24, 0x00	; 0
    5cc4:	0f 90       	pop	r0
    5cc6:	df 91       	pop	r29
    5cc8:	cf 91       	pop	r28
    5cca:	1f 91       	pop	r17
    5ccc:	0f 91       	pop	r16
    5cce:	ff 90       	pop	r15
    5cd0:	ef 90       	pop	r14
    5cd2:	df 90       	pop	r13
    5cd4:	cf 90       	pop	r12
    5cd6:	bf 90       	pop	r11
    5cd8:	af 90       	pop	r10
    5cda:	9f 90       	pop	r9
    5cdc:	8f 90       	pop	r8
    5cde:	7f 90       	pop	r7
    5ce0:	6f 90       	pop	r6
    5ce2:	08 95       	ret

00005ce4 <udd_ep_abort>:
    5ce4:	ff 92       	push	r15
    5ce6:	0f 93       	push	r16
    5ce8:	1f 93       	push	r17
    5cea:	cf 93       	push	r28
    5cec:	df 93       	push	r29
    5cee:	18 2f       	mov	r17, r24
    5cf0:	c8 2f       	mov	r28, r24
    5cf2:	cf 70       	andi	r28, 0x0F	; 15
    5cf4:	d0 e0       	ldi	r29, 0x00	; 0
    5cf6:	ce 01       	movw	r24, r28
    5cf8:	88 0f       	add	r24, r24
    5cfa:	99 1f       	adc	r25, r25
    5cfc:	c1 2f       	mov	r28, r17
    5cfe:	01 2e       	mov	r0, r17
    5d00:	00 0c       	add	r0, r0
    5d02:	dd 0b       	sbc	r29, r29
    5d04:	cc 27       	eor	r28, r28
    5d06:	dd 0f       	add	r29, r29
    5d08:	cc 1f       	adc	r28, r28
    5d0a:	dd 27       	eor	r29, r29
    5d0c:	c8 0f       	add	r28, r24
    5d0e:	d9 1f       	adc	r29, r25
    5d10:	81 2f       	mov	r24, r17
    5d12:	69 db       	rcall	.-2350   	; 0x53e6 <udd_ep_get_job>
    5d14:	dc 01       	movw	r26, r24
    5d16:	fe 01       	movw	r30, r28
    5d18:	ee 0f       	add	r30, r30
    5d1a:	ff 1f       	adc	r31, r31
    5d1c:	ee 0f       	add	r30, r30
    5d1e:	ff 1f       	adc	r31, r31
    5d20:	ee 0f       	add	r30, r30
    5d22:	ff 1f       	adc	r31, r31
    5d24:	e0 51       	subi	r30, 0x10	; 16
    5d26:	fa 4d       	sbci	r31, 0xDA	; 218
    5d28:	02 e0       	ldi	r16, 0x02	; 2
    5d2a:	05 93       	las	Z, r16
    5d2c:	8c 91       	ld	r24, X
    5d2e:	80 ff       	sbrs	r24, 0
    5d30:	22 c0       	rjmp	.+68     	; 0x5d76 <udd_ep_abort+0x92>
    5d32:	8e 7f       	andi	r24, 0xFE	; 254
    5d34:	8c 93       	st	X, r24
    5d36:	17 96       	adiw	r26, 0x07	; 7
    5d38:	ed 91       	ld	r30, X+
    5d3a:	fc 91       	ld	r31, X
    5d3c:	18 97       	sbiw	r26, 0x08	; 8
    5d3e:	30 97       	sbiw	r30, 0x00	; 0
    5d40:	d1 f0       	breq	.+52     	; 0x5d76 <udd_ep_abort+0x92>
    5d42:	11 23       	and	r17, r17
    5d44:	5c f4       	brge	.+22     	; 0x5d5c <udd_ep_abort+0x78>
    5d46:	cc 0f       	add	r28, r28
    5d48:	dd 1f       	adc	r29, r29
    5d4a:	cc 0f       	add	r28, r28
    5d4c:	dd 1f       	adc	r29, r29
    5d4e:	cc 0f       	add	r28, r28
    5d50:	dd 1f       	adc	r29, r29
    5d52:	cc 51       	subi	r28, 0x1C	; 28
    5d54:	da 4d       	sbci	r29, 0xDA	; 218
    5d56:	6a 89       	ldd	r22, Y+18	; 0x12
    5d58:	7b 89       	ldd	r23, Y+19	; 0x13
    5d5a:	0a c0       	rjmp	.+20     	; 0x5d70 <udd_ep_abort+0x8c>
    5d5c:	cc 0f       	add	r28, r28
    5d5e:	dd 1f       	adc	r29, r29
    5d60:	cc 0f       	add	r28, r28
    5d62:	dd 1f       	adc	r29, r29
    5d64:	cc 0f       	add	r28, r28
    5d66:	dd 1f       	adc	r29, r29
    5d68:	cc 51       	subi	r28, 0x1C	; 28
    5d6a:	da 4d       	sbci	r29, 0xDA	; 218
    5d6c:	6e 85       	ldd	r22, Y+14	; 0x0e
    5d6e:	7f 85       	ldd	r23, Y+15	; 0x0f
    5d70:	41 2f       	mov	r20, r17
    5d72:	81 e0       	ldi	r24, 0x01	; 1
    5d74:	19 95       	eicall
    5d76:	df 91       	pop	r29
    5d78:	cf 91       	pop	r28
    5d7a:	1f 91       	pop	r17
    5d7c:	0f 91       	pop	r16
    5d7e:	ff 90       	pop	r15
    5d80:	08 95       	ret

00005d82 <udd_ep_free>:
    5d82:	cf 93       	push	r28
    5d84:	c8 2f       	mov	r28, r24
    5d86:	ae df       	rcall	.-164    	; 0x5ce4 <udd_ep_abort>
    5d88:	ec 2f       	mov	r30, r28
    5d8a:	ef 70       	andi	r30, 0x0F	; 15
    5d8c:	f0 e0       	ldi	r31, 0x00	; 0
    5d8e:	ee 0f       	add	r30, r30
    5d90:	ff 1f       	adc	r31, r31
    5d92:	8c 2f       	mov	r24, r28
    5d94:	cc 0f       	add	r28, r28
    5d96:	99 0b       	sbc	r25, r25
    5d98:	88 27       	eor	r24, r24
    5d9a:	99 0f       	add	r25, r25
    5d9c:	88 1f       	adc	r24, r24
    5d9e:	99 27       	eor	r25, r25
    5da0:	e8 0f       	add	r30, r24
    5da2:	f9 1f       	adc	r31, r25
    5da4:	ee 0f       	add	r30, r30
    5da6:	ff 1f       	adc	r31, r31
    5da8:	ee 0f       	add	r30, r30
    5daa:	ff 1f       	adc	r31, r31
    5dac:	ee 0f       	add	r30, r30
    5dae:	ff 1f       	adc	r31, r31
    5db0:	ec 51       	subi	r30, 0x1C	; 28
    5db2:	fa 4d       	sbci	r31, 0xDA	; 218
    5db4:	15 86       	std	Z+13, r1	; 0x0d
    5db6:	cf 91       	pop	r28
    5db8:	08 95       	ret

00005dba <udd_ep_set_halt>:
    5dba:	e8 2f       	mov	r30, r24
    5dbc:	ef 70       	andi	r30, 0x0F	; 15
    5dbe:	f0 e0       	ldi	r31, 0x00	; 0
    5dc0:	ee 0f       	add	r30, r30
    5dc2:	ff 1f       	adc	r31, r31
    5dc4:	28 2f       	mov	r18, r24
    5dc6:	08 2e       	mov	r0, r24
    5dc8:	00 0c       	add	r0, r0
    5dca:	33 0b       	sbc	r19, r19
    5dcc:	22 27       	eor	r18, r18
    5dce:	33 0f       	add	r19, r19
    5dd0:	22 1f       	adc	r18, r18
    5dd2:	33 27       	eor	r19, r19
    5dd4:	e2 0f       	add	r30, r18
    5dd6:	f3 1f       	adc	r31, r19
    5dd8:	ee 0f       	add	r30, r30
    5dda:	ff 1f       	adc	r31, r31
    5ddc:	ee 0f       	add	r30, r30
    5dde:	ff 1f       	adc	r31, r31
    5de0:	ee 0f       	add	r30, r30
    5de2:	ff 1f       	adc	r31, r31
    5de4:	ec 51       	subi	r30, 0x1C	; 28
    5de6:	fa 4d       	sbci	r31, 0xDA	; 218
    5de8:	95 85       	ldd	r25, Z+13	; 0x0d
    5dea:	94 60       	ori	r25, 0x04	; 4
    5dec:	95 87       	std	Z+13, r25	; 0x0d
    5dee:	7a df       	rcall	.-268    	; 0x5ce4 <udd_ep_abort>
    5df0:	81 e0       	ldi	r24, 0x01	; 1
    5df2:	08 95       	ret

00005df4 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    5df4:	1f 92       	push	r1
    5df6:	0f 92       	push	r0
    5df8:	0f b6       	in	r0, 0x3f	; 63
    5dfa:	0f 92       	push	r0
    5dfc:	11 24       	eor	r1, r1
    5dfe:	0b b6       	in	r0, 0x3b	; 59
    5e00:	0f 92       	push	r0
    5e02:	0f 93       	push	r16
    5e04:	2f 93       	push	r18
    5e06:	3f 93       	push	r19
    5e08:	4f 93       	push	r20
    5e0a:	5f 93       	push	r21
    5e0c:	6f 93       	push	r22
    5e0e:	7f 93       	push	r23
    5e10:	8f 93       	push	r24
    5e12:	9f 93       	push	r25
    5e14:	af 93       	push	r26
    5e16:	bf 93       	push	r27
    5e18:	ef 93       	push	r30
    5e1a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    5e1c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5e20:	88 23       	and	r24, r24
    5e22:	34 f4       	brge	.+12     	; 0x5e30 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    5e24:	80 e8       	ldi	r24, 0x80	; 128
    5e26:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    5e2a:	0e 94 84 3f 	call	0x7f08	; 0x7f08 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    5e2e:	88 c0       	rjmp	.+272    	; 0x5f40 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    5e30:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5e34:	82 ff       	sbrs	r24, 2
    5e36:	20 c0       	rjmp	.+64     	; 0x5e78 <__vector_125+0x84>
		udd_ack_underflow_event();
    5e38:	84 e0       	ldi	r24, 0x04	; 4
    5e3a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    5e3e:	80 91 f8 25 	lds	r24, 0x25F8	; 0x8025f8 <udd_sram+0x14>
    5e42:	86 ff       	sbrs	r24, 6
    5e44:	7d c0       	rjmp	.+250    	; 0x5f40 <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    5e46:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5e4a:	81 fd       	sbrc	r24, 1
    5e4c:	79 c0       	rjmp	.+242    	; 0x5f40 <__vector_125+0x14c>
    5e4e:	e6 da       	rcall	.-2612   	; 0x541c <udd_ctrl_interrupt_tc_setup>
    5e50:	81 11       	cpse	r24, r1
    5e52:	76 c0       	rjmp	.+236    	; 0x5f40 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    5e54:	80 91 e3 25 	lds	r24, 0x25E3	; 0x8025e3 <udd_ep_control_state>
    5e58:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    5e5a:	11 f4       	brne	.+4      	; 0x5e60 <__vector_125+0x6c>
    5e5c:	19 da       	rcall	.-3022   	; 0x5290 <udd_ctrl_send_zlp_in>
    5e5e:	70 c0       	rjmp	.+224    	; 0x5f40 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    5e60:	84 30       	cpi	r24, 0x04	; 4
    5e62:	09 f0       	breq	.+2      	; 0x5e66 <__vector_125+0x72>
    5e64:	6d c0       	rjmp	.+218    	; 0x5f40 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    5e66:	e9 ef       	ldi	r30, 0xF9	; 249
    5e68:	f5 e2       	ldi	r31, 0x25	; 37
    5e6a:	04 e0       	ldi	r16, 0x04	; 4
    5e6c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5e6e:	e1 ef       	ldi	r30, 0xF1	; 241
    5e70:	f5 e2       	ldi	r31, 0x25	; 37
    5e72:	04 e0       	ldi	r16, 0x04	; 4
    5e74:	05 93       	las	Z, r16
    5e76:	64 c0       	rjmp	.+200    	; 0x5f40 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    5e78:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5e7c:	81 ff       	sbrs	r24, 1
    5e7e:	5b c0       	rjmp	.+182    	; 0x5f36 <__vector_125+0x142>
		udd_ack_overflow_event();
    5e80:	82 e0       	ldi	r24, 0x02	; 2
    5e82:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    5e86:	80 91 f0 25 	lds	r24, 0x25F0	; 0x8025f0 <udd_sram+0xc>
    5e8a:	86 ff       	sbrs	r24, 6
    5e8c:	59 c0       	rjmp	.+178    	; 0x5f40 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    5e8e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5e92:	81 fd       	sbrc	r24, 1
    5e94:	55 c0       	rjmp	.+170    	; 0x5f40 <__vector_125+0x14c>
    5e96:	c2 da       	rcall	.-2684   	; 0x541c <udd_ctrl_interrupt_tc_setup>
    5e98:	81 11       	cpse	r24, r1
    5e9a:	52 c0       	rjmp	.+164    	; 0x5f40 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    5e9c:	80 91 e3 25 	lds	r24, 0x25E3	; 0x8025e3 <udd_ep_control_state>
    5ea0:	82 30       	cpi	r24, 0x02	; 2
    5ea2:	41 f4       	brne	.+16     	; 0x5eb4 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    5ea4:	84 e0       	ldi	r24, 0x04	; 4
    5ea6:	80 93 e3 25 	sts	0x25E3, r24	; 0x8025e3 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    5eaa:	e0 ef       	ldi	r30, 0xF0	; 240
    5eac:	f5 e2       	ldi	r31, 0x25	; 37
    5eae:	02 e0       	ldi	r16, 0x02	; 2
    5eb0:	06 93       	lac	Z, r16
    5eb2:	46 c0       	rjmp	.+140    	; 0x5f40 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    5eb4:	83 30       	cpi	r24, 0x03	; 3
    5eb6:	09 f0       	breq	.+2      	; 0x5eba <__vector_125+0xc6>
    5eb8:	43 c0       	rjmp	.+134    	; 0x5f40 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    5eba:	e9 ef       	ldi	r30, 0xF9	; 249
    5ebc:	f5 e2       	ldi	r31, 0x25	; 37
    5ebe:	04 e0       	ldi	r16, 0x04	; 4
    5ec0:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5ec2:	e1 ef       	ldi	r30, 0xF1	; 241
    5ec4:	f5 e2       	ldi	r31, 0x25	; 37
    5ec6:	04 e0       	ldi	r16, 0x04	; 4
    5ec8:	05 93       	las	Z, r16
    5eca:	3a c0       	rjmp	.+116    	; 0x5f40 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    5ecc:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    5ece:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5ed2:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    5ed4:	07 df       	rcall	.-498    	; 0x5ce4 <udd_ep_abort>
    5ed6:	81 e8       	ldi	r24, 0x81	; 129
    5ed8:	05 df       	rcall	.-502    	; 0x5ce4 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5eda:	82 e0       	ldi	r24, 0x02	; 2
    5edc:	03 df       	rcall	.-506    	; 0x5ce4 <udd_ep_abort>
    5ede:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    5ee0:	01 df       	rcall	.-510    	; 0x5ce4 <udd_ep_abort>
    5ee2:	0e 94 5a 3f 	call	0x7eb4	; 0x7eb4 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    5ee6:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    5eea:	e4 ee       	ldi	r30, 0xE4	; 228
    5eec:	f5 e2       	ldi	r31, 0x25	; 37
	udd_endpoint_clear_status(ep_ctrl);
    5eee:	15 86       	std	Z+13, r1	; 0x0d
    5ef0:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5ef2:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    5ef4:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5ef6:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    5ef8:	15 8a       	std	Z+21, r1	; 0x15
    5efa:	94 8b       	std	Z+20, r25	; 0x14
    5efc:	85 8b       	std	Z+21, r24	; 0x15
    5efe:	8f e9       	ldi	r24, 0x9F	; 159
		// Reset endpoint control management
		udd_ctrl_init();
    5f00:	95 e2       	ldi	r25, 0x25	; 37
    5f02:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    5f04:	91 8b       	std	Z+17, r25	; 0x11
    5f06:	91 d9       	rcall	.-3294   	; 0x522a <udd_ctrl_init>
		udd_ack_suspend_event();
    5f08:	1b c0       	rjmp	.+54     	; 0x5f40 <__vector_125+0x14c>
    5f0a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    5f0e:	86 ff       	sbrs	r24, 6
    5f10:	07 c0       	rjmp	.+14     	; 0x5f20 <__vector_125+0x12c>
    5f12:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    5f14:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    5f18:	80 e0       	ldi	r24, 0x00	; 0
    5f1a:	4f d9       	rcall	.-3426   	; 0x51ba <udd_sleep_mode>
		udd_ack_resume_event();
    5f1c:	b1 d5       	rcall	.+2914   	; 0x6a80 <usb_callback_suspend_action>
    5f1e:	10 c0       	rjmp	.+32     	; 0x5f40 <__vector_125+0x14c>
    5f20:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    5f24:	85 ff       	sbrs	r24, 5
    5f26:	0c c0       	rjmp	.+24     	; 0x5f40 <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    5f28:	80 e2       	ldi	r24, 0x20	; 32
    5f2a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    5f2e:	81 e0       	ldi	r24, 0x01	; 1
    5f30:	44 d9       	rcall	.-3448   	; 0x51ba <udd_sleep_mode>
    5f32:	a7 d5       	rcall	.+2894   	; 0x6a82 <usb_callback_resume_action>
    5f34:	05 c0       	rjmp	.+10     	; 0x5f40 <__vector_125+0x14c>
    5f36:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    5f3a:	84 fd       	sbrc	r24, 4
    5f3c:	c7 cf       	rjmp	.-114    	; 0x5ecc <__vector_125+0xd8>
    5f3e:	e5 cf       	rjmp	.-54     	; 0x5f0a <__vector_125+0x116>
    5f40:	ff 91       	pop	r31
    5f42:	ef 91       	pop	r30
    5f44:	bf 91       	pop	r27
    5f46:	af 91       	pop	r26
    5f48:	9f 91       	pop	r25
    5f4a:	8f 91       	pop	r24
    5f4c:	7f 91       	pop	r23
    5f4e:	6f 91       	pop	r22
    5f50:	5f 91       	pop	r21
    5f52:	4f 91       	pop	r20
    5f54:	3f 91       	pop	r19
    5f56:	2f 91       	pop	r18
    5f58:	0f 91       	pop	r16
    5f5a:	0f 90       	pop	r0
    5f5c:	0b be       	out	0x3b, r0	; 59
    5f5e:	0f 90       	pop	r0
    5f60:	0f be       	out	0x3f, r0	; 63
    5f62:	0f 90       	pop	r0
    5f64:	1f 90       	pop	r1
    5f66:	18 95       	reti

00005f68 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    5f68:	1f 92       	push	r1
    5f6a:	0f 92       	push	r0
    5f6c:	0f b6       	in	r0, 0x3f	; 63
    5f6e:	0f 92       	push	r0
    5f70:	11 24       	eor	r1, r1
    5f72:	0b b6       	in	r0, 0x3b	; 59
    5f74:	0f 92       	push	r0
    5f76:	0f 93       	push	r16
    5f78:	1f 93       	push	r17
    5f7a:	2f 93       	push	r18
    5f7c:	3f 93       	push	r19
    5f7e:	4f 93       	push	r20
    5f80:	5f 93       	push	r21
    5f82:	6f 93       	push	r22
    5f84:	7f 93       	push	r23
    5f86:	8f 93       	push	r24
    5f88:	9f 93       	push	r25
    5f8a:	af 93       	push	r26
    5f8c:	bf 93       	push	r27
    5f8e:	cf 93       	push	r28
    5f90:	df 93       	push	r29
    5f92:	ef 93       	push	r30
    5f94:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    5f96:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5f9a:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    5f9c:	03 c0       	rjmp	.+6      	; 0x5fa4 <__vector_126+0x3c>
    5f9e:	3e da       	rcall	.-2948   	; 0x541c <udd_ctrl_interrupt_tc_setup>
    5fa0:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    5fa2:	c4 c0       	rjmp	.+392    	; 0x612c <__stack+0x12d>
    5fa4:	82 e0       	ldi	r24, 0x02	; 2
    5fa6:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    5faa:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    5fae:	81 95       	neg	r24
    5fb0:	88 0f       	add	r24, r24
    5fb2:	e0 ef       	ldi	r30, 0xF0	; 240
    5fb4:	f5 e2       	ldi	r31, 0x25	; 37
    5fb6:	e8 1b       	sub	r30, r24
    5fb8:	f1 09       	sbc	r31, r1
    5fba:	20 81       	ld	r18, Z
    5fbc:	31 81       	ldd	r19, Z+1	; 0x01
    5fbe:	20 5f       	subi	r18, 0xF0	; 240
    5fc0:	35 42       	sbci	r19, 0x25	; 37
    5fc2:	36 95       	lsr	r19
    5fc4:	27 95       	ror	r18
    5fc6:	36 95       	lsr	r19
    5fc8:	27 95       	ror	r18
    5fca:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    5fcc:	27 95       	ror	r18
    5fce:	82 2f       	mov	r24, r18
    5fd0:	86 95       	lsr	r24
    5fd2:	20 fd       	sbrc	r18, 0
    5fd4:	02 c0       	rjmp	.+4      	; 0x5fda <__vector_126+0x72>
    5fd6:	90 e0       	ldi	r25, 0x00	; 0
    5fd8:	01 c0       	rjmp	.+2      	; 0x5fdc <__vector_126+0x74>
    5fda:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    5fdc:	89 0f       	add	r24, r25
    5fde:	e8 2f       	mov	r30, r24
    5fe0:	ef 70       	andi	r30, 0x0F	; 15
    5fe2:	f0 e0       	ldi	r31, 0x00	; 0
    5fe4:	ee 0f       	add	r30, r30
    5fe6:	ff 1f       	adc	r31, r31
    5fe8:	28 2f       	mov	r18, r24
    5fea:	08 2e       	mov	r0, r24
    5fec:	00 0c       	add	r0, r0
    5fee:	33 0b       	sbc	r19, r19
    5ff0:	22 27       	eor	r18, r18
    5ff2:	33 0f       	add	r19, r19
    5ff4:	22 1f       	adc	r18, r18
    5ff6:	33 27       	eor	r19, r19
    5ff8:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    5ffa:	f3 1f       	adc	r31, r19
    5ffc:	df 01       	movw	r26, r30
    5ffe:	aa 0f       	add	r26, r26
    6000:	bb 1f       	adc	r27, r27
    6002:	aa 0f       	add	r26, r26
    6004:	bb 1f       	adc	r27, r27
    6006:	aa 0f       	add	r26, r26
    6008:	bb 1f       	adc	r27, r27
    600a:	ac 51       	subi	r26, 0x1C	; 28
    600c:	ba 4d       	sbci	r27, 0xDA	; 218
    600e:	1c 96       	adiw	r26, 0x0c	; 12
    6010:	9c 91       	ld	r25, X
    6012:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    6014:	8b c0       	rjmp	.+278    	; 0x612c <__stack+0x12d>
    6016:	ee 0f       	add	r30, r30
    6018:	ff 1f       	adc	r31, r31
    601a:	ee 0f       	add	r30, r30
    601c:	ff 1f       	adc	r31, r31
    601e:	ee 0f       	add	r30, r30
    6020:	ff 1f       	adc	r31, r31
    6022:	e0 51       	subi	r30, 0x10	; 16
    6024:	fa 4d       	sbci	r31, 0xDA	; 218
    6026:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    6028:	06 93       	lac	Z, r16
    602a:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    602c:	7a c0       	rjmp	.+244    	; 0x6122 <__stack+0x123>
    602e:	80 91 e3 25 	lds	r24, 0x25E3	; 0x8025e3 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    6032:	84 30       	cpi	r24, 0x04	; 4
    6034:	19 f4       	brne	.+6      	; 0x603c <__stack+0x3d>
    6036:	3a d9       	rcall	.-3468   	; 0x52ac <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    6038:	f8 d8       	rcall	.-3600   	; 0x522a <udd_ctrl_init>
    603a:	78 c0       	rjmp	.+240    	; 0x612c <__stack+0x12d>
    603c:	00 91 f2 25 	lds	r16, 0x25F2	; 0x8025f2 <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    6040:	10 91 f3 25 	lds	r17, 0x25F3	; 0x8025f3 <udd_sram+0xf>
    6044:	80 91 55 2a 	lds	r24, 0x2A55	; 0x802a55 <udd_g_ctrlreq+0xa>
    6048:	90 91 56 2a 	lds	r25, 0x2A56	; 0x802a56 <udd_g_ctrlreq+0xb>
    604c:	c0 91 df 25 	lds	r28, 0x25DF	; 0x8025df <udd_ctrl_payload_nb_trans>
    6050:	d0 91 e0 25 	lds	r29, 0x25E0	; 0x8025e0 <udd_ctrl_payload_nb_trans+0x1>
    6054:	98 01       	movw	r18, r16
    6056:	2c 0f       	add	r18, r28
    6058:	3d 1f       	adc	r19, r29
    605a:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    605c:	93 07       	cpc	r25, r19
    605e:	18 f4       	brcc	.+6      	; 0x6066 <__stack+0x67>
    6060:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    6062:	0c 1b       	sub	r16, r28
    6064:	1d 0b       	sbc	r17, r29
    6066:	80 91 53 2a 	lds	r24, 0x2A53	; 0x802a53 <udd_g_ctrlreq+0x8>
    606a:	90 91 54 2a 	lds	r25, 0x2A54	; 0x802a54 <udd_g_ctrlreq+0x9>
    606e:	a8 01       	movw	r20, r16
    6070:	6f e9       	ldi	r22, 0x9F	; 159
    6072:	75 e2       	ldi	r23, 0x25	; 37
    6074:	8c 0f       	add	r24, r28
    6076:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    6078:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <memcpy>
    607c:	c0 0f       	add	r28, r16
    607e:	d1 1f       	adc	r29, r17
    6080:	c0 93 df 25 	sts	0x25DF, r28	; 0x8025df <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    6084:	d0 93 e0 25 	sts	0x25E0, r29	; 0x8025e0 <udd_ctrl_payload_nb_trans+0x1>
    6088:	00 34       	cpi	r16, 0x40	; 64
    608a:	11 05       	cpc	r17, r1
    608c:	69 f4       	brne	.+26     	; 0x60a8 <__stack+0xa9>
    608e:	80 91 e1 25 	lds	r24, 0x25E1	; 0x8025e1 <udd_ctrl_prev_payload_nb_trans>
    6092:	90 91 e2 25 	lds	r25, 0x25E2	; 0x8025e2 <udd_ctrl_prev_payload_nb_trans+0x1>
    6096:	8c 0f       	add	r24, r28
    6098:	9d 1f       	adc	r25, r29
    609a:	20 91 51 2a 	lds	r18, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    609e:	30 91 52 2a 	lds	r19, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    60a2:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    60a4:	93 07       	cpc	r25, r19
    60a6:	80 f0       	brcs	.+32     	; 0x60c8 <__stack+0xc9>
    60a8:	eb e4       	ldi	r30, 0x4B	; 75
    60aa:	fa e2       	ldi	r31, 0x2A	; 42
		if (NULL != udd_g_ctrlreq.over_under_run) {
    60ac:	c2 87       	std	Z+10, r28	; 0x0a
    60ae:	d3 87       	std	Z+11, r29	; 0x0b
    60b0:	06 84       	ldd	r0, Z+14	; 0x0e
    60b2:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    60b4:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    60b6:	30 97       	sbiw	r30, 0x00	; 0
    60b8:	29 f0       	breq	.+10     	; 0x60c4 <__stack+0xc5>
    60ba:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    60bc:	81 11       	cpse	r24, r1
    60be:	02 c0       	rjmp	.+4      	; 0x60c4 <__stack+0xc5>
    60c0:	d9 d8       	rcall	.-3662   	; 0x5274 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    60c2:	34 c0       	rjmp	.+104    	; 0x612c <__stack+0x12d>
    60c4:	e5 d8       	rcall	.-3638   	; 0x5290 <udd_ctrl_send_zlp_in>
    60c6:	32 c0       	rjmp	.+100    	; 0x612c <__stack+0x12d>
    60c8:	80 91 55 2a 	lds	r24, 0x2A55	; 0x802a55 <udd_g_ctrlreq+0xa>
    60cc:	90 91 56 2a 	lds	r25, 0x2A56	; 0x802a56 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    60d0:	c8 17       	cp	r28, r24
    60d2:	d9 07       	cpc	r29, r25
    60d4:	f9 f4       	brne	.+62     	; 0x6114 <__stack+0x115>
    60d6:	e0 91 59 2a 	lds	r30, 0x2A59	; 0x802a59 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    60da:	f0 91 5a 2a 	lds	r31, 0x2A5A	; 0x802a5a <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    60de:	30 97       	sbiw	r30, 0x00	; 0
    60e0:	11 f4       	brne	.+4      	; 0x60e6 <__stack+0xe7>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    60e2:	c8 d8       	rcall	.-3696   	; 0x5274 <udd_ctrl_stall_data>
    60e4:	23 c0       	rjmp	.+70     	; 0x612c <__stack+0x12d>
    60e6:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    60e8:	81 11       	cpse	r24, r1
    60ea:	02 c0       	rjmp	.+4      	; 0x60f0 <__stack+0xf1>
    60ec:	c3 d8       	rcall	.-3706   	; 0x5274 <udd_ctrl_stall_data>
    60ee:	1e c0       	rjmp	.+60     	; 0x612c <__stack+0x12d>
    60f0:	20 91 e1 25 	lds	r18, 0x25E1	; 0x8025e1 <udd_ctrl_prev_payload_nb_trans>
    60f4:	30 91 e2 25 	lds	r19, 0x25E2	; 0x8025e2 <udd_ctrl_prev_payload_nb_trans+0x1>
    60f8:	80 91 df 25 	lds	r24, 0x25DF	; 0x8025df <udd_ctrl_payload_nb_trans>
    60fc:	90 91 e0 25 	lds	r25, 0x25E0	; 0x8025e0 <udd_ctrl_payload_nb_trans+0x1>
    6100:	82 0f       	add	r24, r18
    6102:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    6104:	80 93 e1 25 	sts	0x25E1, r24	; 0x8025e1 <udd_ctrl_prev_payload_nb_trans>
    6108:	90 93 e2 25 	sts	0x25E2, r25	; 0x8025e2 <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    610c:	10 92 df 25 	sts	0x25DF, r1	; 0x8025df <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    6110:	10 92 e0 25 	sts	0x25E0, r1	; 0x8025e0 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    6114:	e0 ef       	ldi	r30, 0xF0	; 240
    6116:	f5 e2       	ldi	r31, 0x25	; 37
		udd_ctrl_in_sent();
    6118:	02 e0       	ldi	r16, 0x02	; 2
    611a:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    611c:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    611e:	06 93       	lac	Z, r16
    6120:	05 c0       	rjmp	.+10     	; 0x612c <__stack+0x12d>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    6122:	80 38       	cpi	r24, 0x80	; 128
    6124:	11 f4       	brne	.+4      	; 0x612a <__stack+0x12b>
    6126:	ca d8       	rcall	.-3692   	; 0x52bc <udd_ctrl_in_sent>
    6128:	01 c0       	rjmp	.+2      	; 0x612c <__stack+0x12d>
    612a:	ea d9       	rcall	.-3116   	; 0x5500 <udd_ep_trans_complet>
    612c:	ff 91       	pop	r31
    612e:	ef 91       	pop	r30
    6130:	df 91       	pop	r29
    6132:	cf 91       	pop	r28
    6134:	bf 91       	pop	r27
    6136:	af 91       	pop	r26
    6138:	9f 91       	pop	r25
    613a:	8f 91       	pop	r24
    613c:	7f 91       	pop	r23
    613e:	6f 91       	pop	r22
    6140:	5f 91       	pop	r21
    6142:	4f 91       	pop	r20
    6144:	3f 91       	pop	r19
    6146:	2f 91       	pop	r18
    6148:	1f 91       	pop	r17
    614a:	0f 91       	pop	r16
    614c:	0f 90       	pop	r0
    614e:	0b be       	out	0x3b, r0	; 59
    6150:	0f 90       	pop	r0
    6152:	0f be       	out	0x3f, r0	; 63
    6154:	0f 90       	pop	r0
    6156:	1f 90       	pop	r1
    6158:	18 95       	reti

0000615a <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    615a:	cf 92       	push	r12
    615c:	df 92       	push	r13
    615e:	ef 92       	push	r14
    6160:	ff 92       	push	r15
    6162:	cf 93       	push	r28
    6164:	df 93       	push	r29
    6166:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    6168:	6b 01       	movw	r12, r22
    616a:	e1 2c       	mov	r14, r1
    616c:	f1 2c       	mov	r15, r1
    616e:	60 e8       	ldi	r22, 0x80	; 128
    6170:	73 ec       	ldi	r23, 0xC3	; 195
    6172:	89 ec       	ldi	r24, 0xC9	; 201
    6174:	91 e0       	ldi	r25, 0x01	; 1
    6176:	a7 01       	movw	r20, r14
    6178:	96 01       	movw	r18, r12
    617a:	0e 94 1a 43 	call	0x8634	; 0x8634 <__udivmodsi4>
    617e:	ca 01       	movw	r24, r20
    6180:	b9 01       	movw	r22, r18
    6182:	2f ef       	ldi	r18, 0xFF	; 255
    6184:	3f ef       	ldi	r19, 0xFF	; 255
    6186:	40 e0       	ldi	r20, 0x00	; 0
    6188:	50 e0       	ldi	r21, 0x00	; 0
    618a:	0e 94 1a 43 	call	0x8634	; 0x8634 <__udivmodsi4>
	if (smallest_div < 1) {
    618e:	21 15       	cp	r18, r1
    6190:	31 05       	cpc	r19, r1
    6192:	29 f4       	brne	.+10     	; 0x619e <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    6194:	81 e0       	ldi	r24, 0x01	; 1
    6196:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    6198:	21 e0       	ldi	r18, 0x01	; 1
    619a:	30 e0       	ldi	r19, 0x00	; 0
    619c:	2d c0       	rjmp	.+90     	; 0x61f8 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    619e:	22 30       	cpi	r18, 0x02	; 2
    61a0:	31 05       	cpc	r19, r1
    61a2:	28 f4       	brcc	.+10     	; 0x61ae <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    61a4:	82 e0       	ldi	r24, 0x02	; 2
    61a6:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    61a8:	22 e0       	ldi	r18, 0x02	; 2
    61aa:	30 e0       	ldi	r19, 0x00	; 0
    61ac:	25 c0       	rjmp	.+74     	; 0x61f8 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    61ae:	24 30       	cpi	r18, 0x04	; 4
    61b0:	31 05       	cpc	r19, r1
    61b2:	28 f4       	brcc	.+10     	; 0x61be <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    61b4:	83 e0       	ldi	r24, 0x03	; 3
    61b6:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    61b8:	24 e0       	ldi	r18, 0x04	; 4
    61ba:	30 e0       	ldi	r19, 0x00	; 0
    61bc:	1d c0       	rjmp	.+58     	; 0x61f8 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    61be:	28 30       	cpi	r18, 0x08	; 8
    61c0:	31 05       	cpc	r19, r1
    61c2:	28 f4       	brcc	.+10     	; 0x61ce <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    61c4:	84 e0       	ldi	r24, 0x04	; 4
    61c6:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    61c8:	28 e0       	ldi	r18, 0x08	; 8
    61ca:	30 e0       	ldi	r19, 0x00	; 0
    61cc:	15 c0       	rjmp	.+42     	; 0x61f8 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    61ce:	20 34       	cpi	r18, 0x40	; 64
    61d0:	31 05       	cpc	r19, r1
    61d2:	28 f4       	brcc	.+10     	; 0x61de <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    61d4:	85 e0       	ldi	r24, 0x05	; 5
    61d6:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    61d8:	20 e4       	ldi	r18, 0x40	; 64
    61da:	30 e0       	ldi	r19, 0x00	; 0
    61dc:	0d c0       	rjmp	.+26     	; 0x61f8 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    61de:	2f 3f       	cpi	r18, 0xFF	; 255
    61e0:	31 05       	cpc	r19, r1
    61e2:	09 f0       	breq	.+2      	; 0x61e6 <pwm_set_frequency+0x8c>
    61e4:	28 f4       	brcc	.+10     	; 0x61f0 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    61e6:	86 e0       	ldi	r24, 0x06	; 6
    61e8:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    61ea:	20 e0       	ldi	r18, 0x00	; 0
    61ec:	31 e0       	ldi	r19, 0x01	; 1
    61ee:	04 c0       	rjmp	.+8      	; 0x61f8 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    61f0:	87 e0       	ldi	r24, 0x07	; 7
    61f2:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    61f4:	20 e0       	ldi	r18, 0x00	; 0
    61f6:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    61f8:	40 e0       	ldi	r20, 0x00	; 0
    61fa:	50 e0       	ldi	r21, 0x00	; 0
    61fc:	60 e8       	ldi	r22, 0x80	; 128
    61fe:	73 ec       	ldi	r23, 0xC3	; 195
    6200:	89 ec       	ldi	r24, 0xC9	; 201
    6202:	91 e0       	ldi	r25, 0x01	; 1
    6204:	0e 94 1a 43 	call	0x8634	; 0x8634 <__udivmodsi4>
    6208:	ca 01       	movw	r24, r20
    620a:	b9 01       	movw	r22, r18
    620c:	a7 01       	movw	r20, r14
    620e:	96 01       	movw	r18, r12
    6210:	0e 94 1a 43 	call	0x8634	; 0x8634 <__udivmodsi4>
    6214:	2d 83       	std	Y+5, r18	; 0x05
    6216:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    6218:	24 36       	cpi	r18, 0x64	; 100
    621a:	31 05       	cpc	r19, r1
    621c:	18 f4       	brcc	.+6      	; 0x6224 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    621e:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    6220:	1d 82       	std	Y+5, r1	; 0x05
    6222:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    6224:	df 91       	pop	r29
    6226:	cf 91       	pop	r28
    6228:	ff 90       	pop	r15
    622a:	ef 90       	pop	r14
    622c:	df 90       	pop	r13
    622e:	cf 90       	pop	r12
    6230:	08 95       	ret

00006232 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    6232:	0f 93       	push	r16
    6234:	1f 93       	push	r17
    6236:	cf 93       	push	r28
    6238:	df 93       	push	r29
    623a:	ec 01       	movw	r28, r24
    623c:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    623e:	86 2f       	mov	r24, r22
    6240:	90 e0       	ldi	r25, 0x00	; 0
    6242:	87 30       	cpi	r24, 0x07	; 7
    6244:	91 05       	cpc	r25, r1
    6246:	08 f0       	brcs	.+2      	; 0x624a <pwm_init+0x18>
    6248:	8b c0       	rjmp	.+278    	; 0x6360 <pwm_init+0x12e>
    624a:	fc 01       	movw	r30, r24
    624c:	88 27       	eor	r24, r24
    624e:	eb 5f       	subi	r30, 0xFB	; 251
    6250:	fe 4f       	sbci	r31, 0xFE	; 254
    6252:	8f 4f       	sbci	r24, 0xFF	; 255
    6254:	0c 94 58 43 	jmp	0x86b0	; 0x86b0 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    6258:	80 e0       	ldi	r24, 0x00	; 0
    625a:	98 e0       	ldi	r25, 0x08	; 8
    625c:	88 83       	st	Y, r24
    625e:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    6260:	e0 e4       	ldi	r30, 0x40	; 64
    6262:	f6 e0       	ldi	r31, 0x06	; 6
    6264:	30 81       	ld	r19, Z
    6266:	81 e0       	ldi	r24, 0x01	; 1
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	2f ef       	ldi	r18, 0xFF	; 255
    626c:	24 0f       	add	r18, r20
    626e:	02 c0       	rjmp	.+4      	; 0x6274 <pwm_init+0x42>
    6270:	88 0f       	add	r24, r24
    6272:	99 1f       	adc	r25, r25
    6274:	2a 95       	dec	r18
    6276:	e2 f7       	brpl	.-8      	; 0x6270 <pwm_init+0x3e>
    6278:	83 2b       	or	r24, r19
    627a:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    627c:	71 c0       	rjmp	.+226    	; 0x6360 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    627e:	80 e4       	ldi	r24, 0x40	; 64
    6280:	98 e0       	ldi	r25, 0x08	; 8
    6282:	88 83       	st	Y, r24
    6284:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    6286:	e0 e4       	ldi	r30, 0x40	; 64
    6288:	f6 e0       	ldi	r31, 0x06	; 6
    628a:	30 81       	ld	r19, Z
    628c:	81 e0       	ldi	r24, 0x01	; 1
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	23 e0       	ldi	r18, 0x03	; 3
    6292:	24 0f       	add	r18, r20
    6294:	02 c0       	rjmp	.+4      	; 0x629a <pwm_init+0x68>
    6296:	88 0f       	add	r24, r24
    6298:	99 1f       	adc	r25, r25
    629a:	2a 95       	dec	r18
    629c:	e2 f7       	brpl	.-8      	; 0x6296 <pwm_init+0x64>
    629e:	83 2b       	or	r24, r19
    62a0:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    62a2:	5e c0       	rjmp	.+188    	; 0x6360 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    62a4:	80 e0       	ldi	r24, 0x00	; 0
    62a6:	99 e0       	ldi	r25, 0x09	; 9
    62a8:	88 83       	st	Y, r24
    62aa:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    62ac:	e0 e6       	ldi	r30, 0x60	; 96
    62ae:	f6 e0       	ldi	r31, 0x06	; 6
    62b0:	30 81       	ld	r19, Z
    62b2:	81 e0       	ldi	r24, 0x01	; 1
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	2f ef       	ldi	r18, 0xFF	; 255
    62b8:	24 0f       	add	r18, r20
    62ba:	02 c0       	rjmp	.+4      	; 0x62c0 <pwm_init+0x8e>
    62bc:	88 0f       	add	r24, r24
    62be:	99 1f       	adc	r25, r25
    62c0:	2a 95       	dec	r18
    62c2:	e2 f7       	brpl	.-8      	; 0x62bc <pwm_init+0x8a>
    62c4:	83 2b       	or	r24, r19
    62c6:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    62c8:	4b c0       	rjmp	.+150    	; 0x6360 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    62ca:	80 e4       	ldi	r24, 0x40	; 64
    62cc:	99 e0       	ldi	r25, 0x09	; 9
    62ce:	88 83       	st	Y, r24
    62d0:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    62d2:	e0 e6       	ldi	r30, 0x60	; 96
    62d4:	f6 e0       	ldi	r31, 0x06	; 6
    62d6:	30 81       	ld	r19, Z
    62d8:	81 e0       	ldi	r24, 0x01	; 1
    62da:	90 e0       	ldi	r25, 0x00	; 0
    62dc:	23 e0       	ldi	r18, 0x03	; 3
    62de:	24 0f       	add	r18, r20
    62e0:	02 c0       	rjmp	.+4      	; 0x62e6 <pwm_init+0xb4>
    62e2:	88 0f       	add	r24, r24
    62e4:	99 1f       	adc	r25, r25
    62e6:	2a 95       	dec	r18
    62e8:	e2 f7       	brpl	.-8      	; 0x62e2 <pwm_init+0xb0>
    62ea:	83 2b       	or	r24, r19
    62ec:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    62ee:	38 c0       	rjmp	.+112    	; 0x6360 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    62f0:	80 e0       	ldi	r24, 0x00	; 0
    62f2:	9a e0       	ldi	r25, 0x0A	; 10
    62f4:	88 83       	st	Y, r24
    62f6:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    62f8:	e0 e8       	ldi	r30, 0x80	; 128
    62fa:	f6 e0       	ldi	r31, 0x06	; 6
    62fc:	30 81       	ld	r19, Z
    62fe:	81 e0       	ldi	r24, 0x01	; 1
    6300:	90 e0       	ldi	r25, 0x00	; 0
    6302:	2f ef       	ldi	r18, 0xFF	; 255
    6304:	24 0f       	add	r18, r20
    6306:	02 c0       	rjmp	.+4      	; 0x630c <pwm_init+0xda>
    6308:	88 0f       	add	r24, r24
    630a:	99 1f       	adc	r25, r25
    630c:	2a 95       	dec	r18
    630e:	e2 f7       	brpl	.-8      	; 0x6308 <pwm_init+0xd6>
    6310:	83 2b       	or	r24, r19
    6312:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    6314:	25 c0       	rjmp	.+74     	; 0x6360 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    6316:	80 e4       	ldi	r24, 0x40	; 64
    6318:	9a e0       	ldi	r25, 0x0A	; 10
    631a:	88 83       	st	Y, r24
    631c:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    631e:	e0 e8       	ldi	r30, 0x80	; 128
    6320:	f6 e0       	ldi	r31, 0x06	; 6
    6322:	30 81       	ld	r19, Z
    6324:	81 e0       	ldi	r24, 0x01	; 1
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	23 e0       	ldi	r18, 0x03	; 3
    632a:	24 0f       	add	r18, r20
    632c:	02 c0       	rjmp	.+4      	; 0x6332 <pwm_init+0x100>
    632e:	88 0f       	add	r24, r24
    6330:	99 1f       	adc	r25, r25
    6332:	2a 95       	dec	r18
    6334:	e2 f7       	brpl	.-8      	; 0x632e <pwm_init+0xfc>
    6336:	83 2b       	or	r24, r19
    6338:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    633a:	12 c0       	rjmp	.+36     	; 0x6360 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    633c:	80 e0       	ldi	r24, 0x00	; 0
    633e:	9b e0       	ldi	r25, 0x0B	; 11
    6340:	88 83       	st	Y, r24
    6342:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    6344:	e0 ea       	ldi	r30, 0xA0	; 160
    6346:	f6 e0       	ldi	r31, 0x06	; 6
    6348:	30 81       	ld	r19, Z
    634a:	81 e0       	ldi	r24, 0x01	; 1
    634c:	90 e0       	ldi	r25, 0x00	; 0
    634e:	2f ef       	ldi	r18, 0xFF	; 255
    6350:	24 0f       	add	r18, r20
    6352:	02 c0       	rjmp	.+4      	; 0x6358 <pwm_init+0x126>
    6354:	88 0f       	add	r24, r24
    6356:	99 1f       	adc	r25, r25
    6358:	2a 95       	dec	r18
    635a:	e2 f7       	brpl	.-8      	; 0x6354 <pwm_init+0x122>
    635c:	83 2b       	or	r24, r19
    635e:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    6360:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    6362:	42 30       	cpi	r20, 0x02	; 2
    6364:	61 f0       	breq	.+24     	; 0x637e <pwm_init+0x14c>
    6366:	18 f4       	brcc	.+6      	; 0x636e <pwm_init+0x13c>
    6368:	41 30       	cpi	r20, 0x01	; 1
    636a:	31 f0       	breq	.+12     	; 0x6378 <pwm_init+0x146>
    636c:	10 c0       	rjmp	.+32     	; 0x638e <pwm_init+0x15c>
    636e:	43 30       	cpi	r20, 0x03	; 3
    6370:	49 f0       	breq	.+18     	; 0x6384 <pwm_init+0x152>
    6372:	44 30       	cpi	r20, 0x04	; 4
    6374:	51 f0       	breq	.+20     	; 0x638a <pwm_init+0x158>
    6376:	0b c0       	rjmp	.+22     	; 0x638e <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    6378:	80 e1       	ldi	r24, 0x10	; 16
    637a:	8b 83       	std	Y+3, r24	; 0x03
		break;
    637c:	08 c0       	rjmp	.+16     	; 0x638e <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    637e:	80 e2       	ldi	r24, 0x20	; 32
    6380:	8b 83       	std	Y+3, r24	; 0x03
		break;
    6382:	05 c0       	rjmp	.+10     	; 0x638e <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    6384:	80 e4       	ldi	r24, 0x40	; 64
    6386:	8b 83       	std	Y+3, r24	; 0x03
		break;
    6388:	02 c0       	rjmp	.+4      	; 0x638e <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    638a:	80 e8       	ldi	r24, 0x80	; 128
    638c:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    638e:	88 81       	ld	r24, Y
    6390:	99 81       	ldd	r25, Y+1	; 0x01
    6392:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    6396:	e8 81       	ld	r30, Y
    6398:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    639a:	81 81       	ldd	r24, Z+1	; 0x01
    639c:	88 7f       	andi	r24, 0xF8	; 248
    639e:	83 60       	ori	r24, 0x03	; 3
    63a0:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    63a2:	1d 82       	std	Y+5, r1	; 0x05
    63a4:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    63a6:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    63a8:	e8 81       	ld	r30, Y
    63aa:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    63ac:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    63ae:	80 7f       	andi	r24, 0xF0	; 240
    63b0:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    63b2:	b8 01       	movw	r22, r16
    63b4:	ce 01       	movw	r24, r28
    63b6:	d1 de       	rcall	.-606    	; 0x615a <pwm_set_frequency>
}
    63b8:	df 91       	pop	r29
    63ba:	cf 91       	pop	r28
    63bc:	1f 91       	pop	r17
    63be:	0f 91       	pop	r16
    63c0:	08 95       	ret

000063c2 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    63c2:	cf 93       	push	r28
    63c4:	df 93       	push	r29
    63c6:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    63c8:	2d 81       	ldd	r18, Y+5	; 0x05
    63ca:	3e 81       	ldd	r19, Y+6	; 0x06
    63cc:	a6 2f       	mov	r26, r22
    63ce:	b0 e0       	ldi	r27, 0x00	; 0
    63d0:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__umulhisi3>
    63d4:	24 e6       	ldi	r18, 0x64	; 100
    63d6:	30 e0       	ldi	r19, 0x00	; 0
    63d8:	40 e0       	ldi	r20, 0x00	; 0
    63da:	50 e0       	ldi	r21, 0x00	; 0
    63dc:	0e 94 1a 43 	call	0x8634	; 0x8634 <__udivmodsi4>
    63e0:	8a 81       	ldd	r24, Y+2	; 0x02
    63e2:	e8 81       	ld	r30, Y
    63e4:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    63e6:	e6 fd       	sbrc	r30, 6
    63e8:	17 c0       	rjmp	.+46     	; 0x6418 <pwm_start+0x56>
		switch (channel_index) {
    63ea:	82 30       	cpi	r24, 0x02	; 2
    63ec:	61 f0       	breq	.+24     	; 0x6406 <pwm_start+0x44>
    63ee:	18 f4       	brcc	.+6      	; 0x63f6 <pwm_start+0x34>
    63f0:	81 30       	cpi	r24, 0x01	; 1
    63f2:	31 f0       	breq	.+12     	; 0x6400 <pwm_start+0x3e>
    63f4:	1b c0       	rjmp	.+54     	; 0x642c <pwm_start+0x6a>
    63f6:	83 30       	cpi	r24, 0x03	; 3
    63f8:	49 f0       	breq	.+18     	; 0x640c <pwm_start+0x4a>
    63fa:	84 30       	cpi	r24, 0x04	; 4
    63fc:	51 f0       	breq	.+20     	; 0x6412 <pwm_start+0x50>
    63fe:	16 c0       	rjmp	.+44     	; 0x642c <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    6400:	20 af       	std	Z+56, r18	; 0x38
    6402:	31 af       	std	Z+57, r19	; 0x39
    6404:	13 c0       	rjmp	.+38     	; 0x642c <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    6406:	22 af       	std	Z+58, r18	; 0x3a
    6408:	33 af       	std	Z+59, r19	; 0x3b
    640a:	10 c0       	rjmp	.+32     	; 0x642c <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    640c:	24 af       	std	Z+60, r18	; 0x3c
    640e:	35 af       	std	Z+61, r19	; 0x3d
    6410:	0d c0       	rjmp	.+26     	; 0x642c <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    6412:	26 af       	std	Z+62, r18	; 0x3e
    6414:	37 af       	std	Z+63, r19	; 0x3f
    6416:	0a c0       	rjmp	.+20     	; 0x642c <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    6418:	81 30       	cpi	r24, 0x01	; 1
    641a:	19 f0       	breq	.+6      	; 0x6422 <pwm_start+0x60>
    641c:	82 30       	cpi	r24, 0x02	; 2
    641e:	21 f0       	breq	.+8      	; 0x6428 <pwm_start+0x66>
    6420:	05 c0       	rjmp	.+10     	; 0x642c <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    6422:	20 af       	std	Z+56, r18	; 0x38
    6424:	31 af       	std	Z+57, r19	; 0x39
    6426:	02 c0       	rjmp	.+4      	; 0x642c <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    6428:	22 af       	std	Z+58, r18	; 0x3a
    642a:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    642c:	8d 81       	ldd	r24, Y+5	; 0x05
    642e:	9e 81       	ldd	r25, Y+6	; 0x06
    6430:	e8 81       	ld	r30, Y
    6432:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    6434:	86 a3       	std	Z+38, r24	; 0x26
    6436:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    6438:	8b 81       	ldd	r24, Y+3	; 0x03
    643a:	e8 81       	ld	r30, Y
    643c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    643e:	e6 fd       	sbrc	r30, 6
    6440:	04 c0       	rjmp	.+8      	; 0x644a <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    6442:	91 81       	ldd	r25, Z+1	; 0x01
    6444:	89 2b       	or	r24, r25
    6446:	81 83       	std	Z+1, r24	; 0x01
    6448:	04 c0       	rjmp	.+8      	; 0x6452 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    644a:	91 81       	ldd	r25, Z+1	; 0x01
    644c:	80 73       	andi	r24, 0x30	; 48
    644e:	89 2b       	or	r24, r25
    6450:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    6452:	e8 81       	ld	r30, Y
    6454:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    6456:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    6458:	80 7f       	andi	r24, 0xF0	; 240
    645a:	9c 81       	ldd	r25, Y+4	; 0x04
    645c:	89 2b       	or	r24, r25
    645e:	80 83       	st	Z, r24
}
    6460:	df 91       	pop	r29
    6462:	cf 91       	pop	r28
    6464:	08 95       	ret

00006466 <__portable_avr_delay_cycles>:
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    6466:	04 c0       	rjmp	.+8      	; 0x6470 <__portable_avr_delay_cycles+0xa>
    6468:	61 50       	subi	r22, 0x01	; 1
    646a:	71 09       	sbc	r23, r1
    646c:	81 09       	sbc	r24, r1
    646e:	91 09       	sbc	r25, r1
    6470:	61 15       	cp	r22, r1
    6472:	71 05       	cpc	r23, r1
    6474:	81 05       	cpc	r24, r1
    6476:	91 05       	cpc	r25, r1
    6478:	b9 f7       	brne	.-18     	; 0x6468 <__portable_avr_delay_cycles+0x2>
    647a:	08 95       	ret

0000647c <isr_rtc_alarm>:
    647c:	08 95       	ret

0000647e <isr_adc_a>:
    647e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    6482:	4e 5b       	subi	r20, 0xBE	; 190
    6484:	51 09       	sbc	r21, r1
    6486:	60 ff       	sbrs	r22, 0
    6488:	d3 c0       	rjmp	.+422    	; 0x6630 <isr_adc_a+0x1b2>
    648a:	82 95       	swap	r24
    648c:	8f 70       	andi	r24, 0x0F	; 15
    648e:	81 30       	cpi	r24, 0x01	; 1
    6490:	31 f0       	breq	.+12     	; 0x649e <isr_adc_a+0x20>
    6492:	08 f4       	brcc	.+2      	; 0x6496 <isr_adc_a+0x18>
    6494:	8a c0       	rjmp	.+276    	; 0x65aa <isr_adc_a+0x12c>
    6496:	82 30       	cpi	r24, 0x02	; 2
    6498:	09 f4       	brne	.+2      	; 0x649c <isr_adc_a+0x1e>
    649a:	44 c0       	rjmp	.+136    	; 0x6524 <isr_adc_a+0xa6>
    649c:	08 95       	ret
    649e:	05 2e       	mov	r0, r21
    64a0:	00 0c       	add	r0, r0
    64a2:	66 0b       	sbc	r22, r22
    64a4:	77 0b       	sbc	r23, r23
    64a6:	80 91 b3 28 	lds	r24, 0x28B3	; 0x8028b3 <g_adc_vctcxo_sum>
    64aa:	90 91 b4 28 	lds	r25, 0x28B4	; 0x8028b4 <g_adc_vctcxo_sum+0x1>
    64ae:	a0 91 b5 28 	lds	r26, 0x28B5	; 0x8028b5 <g_adc_vctcxo_sum+0x2>
    64b2:	b0 91 b6 28 	lds	r27, 0x28B6	; 0x8028b6 <g_adc_vctcxo_sum+0x3>
    64b6:	48 0f       	add	r20, r24
    64b8:	59 1f       	adc	r21, r25
    64ba:	6a 1f       	adc	r22, r26
    64bc:	7b 1f       	adc	r23, r27
    64be:	40 93 b3 28 	sts	0x28B3, r20	; 0x8028b3 <g_adc_vctcxo_sum>
    64c2:	50 93 b4 28 	sts	0x28B4, r21	; 0x8028b4 <g_adc_vctcxo_sum+0x1>
    64c6:	60 93 b5 28 	sts	0x28B5, r22	; 0x8028b5 <g_adc_vctcxo_sum+0x2>
    64ca:	70 93 b6 28 	sts	0x28B6, r23	; 0x8028b6 <g_adc_vctcxo_sum+0x3>
    64ce:	80 91 b1 28 	lds	r24, 0x28B1	; 0x8028b1 <g_adc_vctcxo_cnt>
    64d2:	90 91 b2 28 	lds	r25, 0x28B2	; 0x8028b2 <g_adc_vctcxo_cnt+0x1>
    64d6:	01 96       	adiw	r24, 0x01	; 1
    64d8:	80 93 b1 28 	sts	0x28B1, r24	; 0x8028b1 <g_adc_vctcxo_cnt>
    64dc:	90 93 b2 28 	sts	0x28B2, r25	; 0x8028b2 <g_adc_vctcxo_cnt+0x1>
    64e0:	8f 3f       	cpi	r24, 0xFF	; 255
    64e2:	91 05       	cpc	r25, r1
    64e4:	09 f0       	breq	.+2      	; 0x64e8 <isr_adc_a+0x6a>
    64e6:	08 f4       	brcc	.+2      	; 0x64ea <isr_adc_a+0x6c>
    64e8:	2b c1       	rjmp	.+598    	; 0x6740 <isr_adc_a+0x2c2>
    64ea:	68 94       	set
    64ec:	16 f8       	bld	r1, 6
    64ee:	75 95       	asr	r23
    64f0:	67 95       	ror	r22
    64f2:	57 95       	ror	r21
    64f4:	47 95       	ror	r20
    64f6:	16 94       	lsr	r1
    64f8:	d1 f7       	brne	.-12     	; 0x64ee <isr_adc_a+0x70>
    64fa:	40 93 b7 28 	sts	0x28B7, r20	; 0x8028b7 <g_adc_vctcxo_cur>
    64fe:	50 93 b8 28 	sts	0x28B8, r21	; 0x8028b8 <g_adc_vctcxo_cur+0x1>
    6502:	60 93 b9 28 	sts	0x28B9, r22	; 0x8028b9 <g_adc_vctcxo_cur+0x2>
    6506:	70 93 ba 28 	sts	0x28BA, r23	; 0x8028ba <g_adc_vctcxo_cur+0x3>
    650a:	10 92 b1 28 	sts	0x28B1, r1	; 0x8028b1 <g_adc_vctcxo_cnt>
    650e:	10 92 b2 28 	sts	0x28B2, r1	; 0x8028b2 <g_adc_vctcxo_cnt+0x1>
    6512:	10 92 b3 28 	sts	0x28B3, r1	; 0x8028b3 <g_adc_vctcxo_sum>
    6516:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <g_adc_vctcxo_sum+0x1>
    651a:	10 92 b5 28 	sts	0x28B5, r1	; 0x8028b5 <g_adc_vctcxo_sum+0x2>
    651e:	10 92 b6 28 	sts	0x28B6, r1	; 0x8028b6 <g_adc_vctcxo_sum+0x3>
    6522:	08 95       	ret
    6524:	05 2e       	mov	r0, r21
    6526:	00 0c       	add	r0, r0
    6528:	66 0b       	sbc	r22, r22
    652a:	77 0b       	sbc	r23, r23
    652c:	80 91 a9 28 	lds	r24, 0x28A9	; 0x8028a9 <g_adc_5v0_sum>
    6530:	90 91 aa 28 	lds	r25, 0x28AA	; 0x8028aa <g_adc_5v0_sum+0x1>
    6534:	a0 91 ab 28 	lds	r26, 0x28AB	; 0x8028ab <g_adc_5v0_sum+0x2>
    6538:	b0 91 ac 28 	lds	r27, 0x28AC	; 0x8028ac <g_adc_5v0_sum+0x3>
    653c:	48 0f       	add	r20, r24
    653e:	59 1f       	adc	r21, r25
    6540:	6a 1f       	adc	r22, r26
    6542:	7b 1f       	adc	r23, r27
    6544:	40 93 a9 28 	sts	0x28A9, r20	; 0x8028a9 <g_adc_5v0_sum>
    6548:	50 93 aa 28 	sts	0x28AA, r21	; 0x8028aa <g_adc_5v0_sum+0x1>
    654c:	60 93 ab 28 	sts	0x28AB, r22	; 0x8028ab <g_adc_5v0_sum+0x2>
    6550:	70 93 ac 28 	sts	0x28AC, r23	; 0x8028ac <g_adc_5v0_sum+0x3>
    6554:	80 91 a7 28 	lds	r24, 0x28A7	; 0x8028a7 <g_adc_5v0_cnt>
    6558:	90 91 a8 28 	lds	r25, 0x28A8	; 0x8028a8 <g_adc_5v0_cnt+0x1>
    655c:	01 96       	adiw	r24, 0x01	; 1
    655e:	80 93 a7 28 	sts	0x28A7, r24	; 0x8028a7 <g_adc_5v0_cnt>
    6562:	90 93 a8 28 	sts	0x28A8, r25	; 0x8028a8 <g_adc_5v0_cnt+0x1>
    6566:	8f 3f       	cpi	r24, 0xFF	; 255
    6568:	91 05       	cpc	r25, r1
    656a:	09 f0       	breq	.+2      	; 0x656e <isr_adc_a+0xf0>
    656c:	08 f4       	brcc	.+2      	; 0x6570 <isr_adc_a+0xf2>
    656e:	e8 c0       	rjmp	.+464    	; 0x6740 <isr_adc_a+0x2c2>
    6570:	68 94       	set
    6572:	16 f8       	bld	r1, 6
    6574:	75 95       	asr	r23
    6576:	67 95       	ror	r22
    6578:	57 95       	ror	r21
    657a:	47 95       	ror	r20
    657c:	16 94       	lsr	r1
    657e:	d1 f7       	brne	.-12     	; 0x6574 <isr_adc_a+0xf6>
    6580:	40 93 ad 28 	sts	0x28AD, r20	; 0x8028ad <g_adc_5v0_cur>
    6584:	50 93 ae 28 	sts	0x28AE, r21	; 0x8028ae <g_adc_5v0_cur+0x1>
    6588:	60 93 af 28 	sts	0x28AF, r22	; 0x8028af <g_adc_5v0_cur+0x2>
    658c:	70 93 b0 28 	sts	0x28B0, r23	; 0x8028b0 <g_adc_5v0_cur+0x3>
    6590:	10 92 a7 28 	sts	0x28A7, r1	; 0x8028a7 <g_adc_5v0_cnt>
    6594:	10 92 a8 28 	sts	0x28A8, r1	; 0x8028a8 <g_adc_5v0_cnt+0x1>
    6598:	10 92 a9 28 	sts	0x28A9, r1	; 0x8028a9 <g_adc_5v0_sum>
    659c:	10 92 aa 28 	sts	0x28AA, r1	; 0x8028aa <g_adc_5v0_sum+0x1>
    65a0:	10 92 ab 28 	sts	0x28AB, r1	; 0x8028ab <g_adc_5v0_sum+0x2>
    65a4:	10 92 ac 28 	sts	0x28AC, r1	; 0x8028ac <g_adc_5v0_sum+0x3>
    65a8:	08 95       	ret
    65aa:	05 2e       	mov	r0, r21
    65ac:	00 0c       	add	r0, r0
    65ae:	66 0b       	sbc	r22, r22
    65b0:	77 0b       	sbc	r23, r23
    65b2:	80 91 9f 28 	lds	r24, 0x289F	; 0x80289f <g_adc_vbat_sum>
    65b6:	90 91 a0 28 	lds	r25, 0x28A0	; 0x8028a0 <g_adc_vbat_sum+0x1>
    65ba:	a0 91 a1 28 	lds	r26, 0x28A1	; 0x8028a1 <g_adc_vbat_sum+0x2>
    65be:	b0 91 a2 28 	lds	r27, 0x28A2	; 0x8028a2 <g_adc_vbat_sum+0x3>
    65c2:	48 0f       	add	r20, r24
    65c4:	59 1f       	adc	r21, r25
    65c6:	6a 1f       	adc	r22, r26
    65c8:	7b 1f       	adc	r23, r27
    65ca:	40 93 9f 28 	sts	0x289F, r20	; 0x80289f <g_adc_vbat_sum>
    65ce:	50 93 a0 28 	sts	0x28A0, r21	; 0x8028a0 <g_adc_vbat_sum+0x1>
    65d2:	60 93 a1 28 	sts	0x28A1, r22	; 0x8028a1 <g_adc_vbat_sum+0x2>
    65d6:	70 93 a2 28 	sts	0x28A2, r23	; 0x8028a2 <g_adc_vbat_sum+0x3>
    65da:	80 91 9d 28 	lds	r24, 0x289D	; 0x80289d <g_adc_vbat_cnt>
    65de:	90 91 9e 28 	lds	r25, 0x289E	; 0x80289e <g_adc_vbat_cnt+0x1>
    65e2:	01 96       	adiw	r24, 0x01	; 1
    65e4:	80 93 9d 28 	sts	0x289D, r24	; 0x80289d <g_adc_vbat_cnt>
    65e8:	90 93 9e 28 	sts	0x289E, r25	; 0x80289e <g_adc_vbat_cnt+0x1>
    65ec:	8f 3f       	cpi	r24, 0xFF	; 255
    65ee:	91 05       	cpc	r25, r1
    65f0:	09 f0       	breq	.+2      	; 0x65f4 <isr_adc_a+0x176>
    65f2:	08 f4       	brcc	.+2      	; 0x65f6 <isr_adc_a+0x178>
    65f4:	a5 c0       	rjmp	.+330    	; 0x6740 <isr_adc_a+0x2c2>
    65f6:	68 94       	set
    65f8:	16 f8       	bld	r1, 6
    65fa:	75 95       	asr	r23
    65fc:	67 95       	ror	r22
    65fe:	57 95       	ror	r21
    6600:	47 95       	ror	r20
    6602:	16 94       	lsr	r1
    6604:	d1 f7       	brne	.-12     	; 0x65fa <isr_adc_a+0x17c>
    6606:	40 93 a3 28 	sts	0x28A3, r20	; 0x8028a3 <g_adc_vbat_cur>
    660a:	50 93 a4 28 	sts	0x28A4, r21	; 0x8028a4 <g_adc_vbat_cur+0x1>
    660e:	60 93 a5 28 	sts	0x28A5, r22	; 0x8028a5 <g_adc_vbat_cur+0x2>
    6612:	70 93 a6 28 	sts	0x28A6, r23	; 0x8028a6 <g_adc_vbat_cur+0x3>
    6616:	10 92 9d 28 	sts	0x289D, r1	; 0x80289d <g_adc_vbat_cnt>
    661a:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <g_adc_vbat_cnt+0x1>
    661e:	10 92 9f 28 	sts	0x289F, r1	; 0x80289f <g_adc_vbat_sum>
    6622:	10 92 a0 28 	sts	0x28A0, r1	; 0x8028a0 <g_adc_vbat_sum+0x1>
    6626:	10 92 a1 28 	sts	0x28A1, r1	; 0x8028a1 <g_adc_vbat_sum+0x2>
    662a:	10 92 a2 28 	sts	0x28A2, r1	; 0x8028a2 <g_adc_vbat_sum+0x3>
    662e:	08 95       	ret
    6630:	61 ff       	sbrs	r22, 1
    6632:	43 c0       	rjmp	.+134    	; 0x66ba <isr_adc_a+0x23c>
    6634:	05 2e       	mov	r0, r21
    6636:	00 0c       	add	r0, r0
    6638:	66 0b       	sbc	r22, r22
    663a:	77 0b       	sbc	r23, r23
    663c:	80 91 95 28 	lds	r24, 0x2895	; 0x802895 <g_adc_io_adc4_sum>
    6640:	90 91 96 28 	lds	r25, 0x2896	; 0x802896 <g_adc_io_adc4_sum+0x1>
    6644:	a0 91 97 28 	lds	r26, 0x2897	; 0x802897 <g_adc_io_adc4_sum+0x2>
    6648:	b0 91 98 28 	lds	r27, 0x2898	; 0x802898 <g_adc_io_adc4_sum+0x3>
    664c:	48 0f       	add	r20, r24
    664e:	59 1f       	adc	r21, r25
    6650:	6a 1f       	adc	r22, r26
    6652:	7b 1f       	adc	r23, r27
    6654:	40 93 95 28 	sts	0x2895, r20	; 0x802895 <g_adc_io_adc4_sum>
    6658:	50 93 96 28 	sts	0x2896, r21	; 0x802896 <g_adc_io_adc4_sum+0x1>
    665c:	60 93 97 28 	sts	0x2897, r22	; 0x802897 <g_adc_io_adc4_sum+0x2>
    6660:	70 93 98 28 	sts	0x2898, r23	; 0x802898 <g_adc_io_adc4_sum+0x3>
    6664:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <g_adc_io_adc4_cnt>
    6668:	90 91 94 28 	lds	r25, 0x2894	; 0x802894 <g_adc_io_adc4_cnt+0x1>
    666c:	01 96       	adiw	r24, 0x01	; 1
    666e:	80 93 93 28 	sts	0x2893, r24	; 0x802893 <g_adc_io_adc4_cnt>
    6672:	90 93 94 28 	sts	0x2894, r25	; 0x802894 <g_adc_io_adc4_cnt+0x1>
    6676:	8f 3f       	cpi	r24, 0xFF	; 255
    6678:	91 05       	cpc	r25, r1
    667a:	09 f0       	breq	.+2      	; 0x667e <isr_adc_a+0x200>
    667c:	08 f4       	brcc	.+2      	; 0x6680 <isr_adc_a+0x202>
    667e:	60 c0       	rjmp	.+192    	; 0x6740 <isr_adc_a+0x2c2>
    6680:	68 94       	set
    6682:	16 f8       	bld	r1, 6
    6684:	75 95       	asr	r23
    6686:	67 95       	ror	r22
    6688:	57 95       	ror	r21
    668a:	47 95       	ror	r20
    668c:	16 94       	lsr	r1
    668e:	d1 f7       	brne	.-12     	; 0x6684 <isr_adc_a+0x206>
    6690:	40 93 99 28 	sts	0x2899, r20	; 0x802899 <g_adc_io_adc4_cur>
    6694:	50 93 9a 28 	sts	0x289A, r21	; 0x80289a <g_adc_io_adc4_cur+0x1>
    6698:	60 93 9b 28 	sts	0x289B, r22	; 0x80289b <g_adc_io_adc4_cur+0x2>
    669c:	70 93 9c 28 	sts	0x289C, r23	; 0x80289c <g_adc_io_adc4_cur+0x3>
    66a0:	10 92 93 28 	sts	0x2893, r1	; 0x802893 <g_adc_io_adc4_cnt>
    66a4:	10 92 94 28 	sts	0x2894, r1	; 0x802894 <g_adc_io_adc4_cnt+0x1>
    66a8:	10 92 95 28 	sts	0x2895, r1	; 0x802895 <g_adc_io_adc4_sum>
    66ac:	10 92 96 28 	sts	0x2896, r1	; 0x802896 <g_adc_io_adc4_sum+0x1>
    66b0:	10 92 97 28 	sts	0x2897, r1	; 0x802897 <g_adc_io_adc4_sum+0x2>
    66b4:	10 92 98 28 	sts	0x2898, r1	; 0x802898 <g_adc_io_adc4_sum+0x3>
    66b8:	08 95       	ret
    66ba:	62 ff       	sbrs	r22, 2
    66bc:	41 c0       	rjmp	.+130    	; 0x6740 <isr_adc_a+0x2c2>
    66be:	05 2e       	mov	r0, r21
    66c0:	00 0c       	add	r0, r0
    66c2:	66 0b       	sbc	r22, r22
    66c4:	77 0b       	sbc	r23, r23
    66c6:	80 91 8b 28 	lds	r24, 0x288B	; 0x80288b <g_adc_io_adc5_sum>
    66ca:	90 91 8c 28 	lds	r25, 0x288C	; 0x80288c <g_adc_io_adc5_sum+0x1>
    66ce:	a0 91 8d 28 	lds	r26, 0x288D	; 0x80288d <g_adc_io_adc5_sum+0x2>
    66d2:	b0 91 8e 28 	lds	r27, 0x288E	; 0x80288e <g_adc_io_adc5_sum+0x3>
    66d6:	48 0f       	add	r20, r24
    66d8:	59 1f       	adc	r21, r25
    66da:	6a 1f       	adc	r22, r26
    66dc:	7b 1f       	adc	r23, r27
    66de:	40 93 8b 28 	sts	0x288B, r20	; 0x80288b <g_adc_io_adc5_sum>
    66e2:	50 93 8c 28 	sts	0x288C, r21	; 0x80288c <g_adc_io_adc5_sum+0x1>
    66e6:	60 93 8d 28 	sts	0x288D, r22	; 0x80288d <g_adc_io_adc5_sum+0x2>
    66ea:	70 93 8e 28 	sts	0x288E, r23	; 0x80288e <g_adc_io_adc5_sum+0x3>
    66ee:	80 91 89 28 	lds	r24, 0x2889	; 0x802889 <g_adc_io_adc5_cnt>
    66f2:	90 91 8a 28 	lds	r25, 0x288A	; 0x80288a <g_adc_io_adc5_cnt+0x1>
    66f6:	01 96       	adiw	r24, 0x01	; 1
    66f8:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <g_adc_io_adc5_cnt>
    66fc:	90 93 8a 28 	sts	0x288A, r25	; 0x80288a <g_adc_io_adc5_cnt+0x1>
    6700:	8f 3f       	cpi	r24, 0xFF	; 255
    6702:	91 05       	cpc	r25, r1
    6704:	e9 f0       	breq	.+58     	; 0x6740 <isr_adc_a+0x2c2>
    6706:	e0 f0       	brcs	.+56     	; 0x6740 <isr_adc_a+0x2c2>
    6708:	68 94       	set
    670a:	16 f8       	bld	r1, 6
    670c:	75 95       	asr	r23
    670e:	67 95       	ror	r22
    6710:	57 95       	ror	r21
    6712:	47 95       	ror	r20
    6714:	16 94       	lsr	r1
    6716:	d1 f7       	brne	.-12     	; 0x670c <isr_adc_a+0x28e>
    6718:	40 93 8f 28 	sts	0x288F, r20	; 0x80288f <g_adc_io_adc5_cur>
    671c:	50 93 90 28 	sts	0x2890, r21	; 0x802890 <g_adc_io_adc5_cur+0x1>
    6720:	60 93 91 28 	sts	0x2891, r22	; 0x802891 <g_adc_io_adc5_cur+0x2>
    6724:	70 93 92 28 	sts	0x2892, r23	; 0x802892 <g_adc_io_adc5_cur+0x3>
    6728:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <g_adc_io_adc5_cnt>
    672c:	10 92 8a 28 	sts	0x288A, r1	; 0x80288a <g_adc_io_adc5_cnt+0x1>
    6730:	10 92 8b 28 	sts	0x288B, r1	; 0x80288b <g_adc_io_adc5_sum>
    6734:	10 92 8c 28 	sts	0x288C, r1	; 0x80288c <g_adc_io_adc5_sum+0x1>
    6738:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <g_adc_io_adc5_sum+0x2>
    673c:	10 92 8e 28 	sts	0x288E, r1	; 0x80288e <g_adc_io_adc5_sum+0x3>
    6740:	08 95       	ret

00006742 <isr_adc_b>:
    6742:	60 ff       	sbrs	r22, 0
    6744:	43 c0       	rjmp	.+134    	; 0x67cc <isr_adc_b+0x8a>
    6746:	4e 5b       	subi	r20, 0xBE	; 190
    6748:	51 09       	sbc	r21, r1
    674a:	05 2e       	mov	r0, r21
    674c:	00 0c       	add	r0, r0
    674e:	66 0b       	sbc	r22, r22
    6750:	77 0b       	sbc	r23, r23
    6752:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <g_adc_temp_sum>
    6756:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <g_adc_temp_sum+0x1>
    675a:	a0 91 83 28 	lds	r26, 0x2883	; 0x802883 <g_adc_temp_sum+0x2>
    675e:	b0 91 84 28 	lds	r27, 0x2884	; 0x802884 <g_adc_temp_sum+0x3>
    6762:	48 0f       	add	r20, r24
    6764:	59 1f       	adc	r21, r25
    6766:	6a 1f       	adc	r22, r26
    6768:	7b 1f       	adc	r23, r27
    676a:	40 93 81 28 	sts	0x2881, r20	; 0x802881 <g_adc_temp_sum>
    676e:	50 93 82 28 	sts	0x2882, r21	; 0x802882 <g_adc_temp_sum+0x1>
    6772:	60 93 83 28 	sts	0x2883, r22	; 0x802883 <g_adc_temp_sum+0x2>
    6776:	70 93 84 28 	sts	0x2884, r23	; 0x802884 <g_adc_temp_sum+0x3>
    677a:	80 91 7f 28 	lds	r24, 0x287F	; 0x80287f <g_adc_temp_cnt>
    677e:	90 91 80 28 	lds	r25, 0x2880	; 0x802880 <g_adc_temp_cnt+0x1>
    6782:	01 96       	adiw	r24, 0x01	; 1
    6784:	80 93 7f 28 	sts	0x287F, r24	; 0x80287f <g_adc_temp_cnt>
    6788:	90 93 80 28 	sts	0x2880, r25	; 0x802880 <g_adc_temp_cnt+0x1>
    678c:	8f 3f       	cpi	r24, 0xFF	; 255
    678e:	91 05       	cpc	r25, r1
    6790:	e9 f0       	breq	.+58     	; 0x67cc <isr_adc_b+0x8a>
    6792:	e0 f0       	brcs	.+56     	; 0x67cc <isr_adc_b+0x8a>
    6794:	68 94       	set
    6796:	16 f8       	bld	r1, 6
    6798:	75 95       	asr	r23
    679a:	67 95       	ror	r22
    679c:	57 95       	ror	r21
    679e:	47 95       	ror	r20
    67a0:	16 94       	lsr	r1
    67a2:	d1 f7       	brne	.-12     	; 0x6798 <isr_adc_b+0x56>
    67a4:	40 93 85 28 	sts	0x2885, r20	; 0x802885 <g_adc_temp_cur>
    67a8:	50 93 86 28 	sts	0x2886, r21	; 0x802886 <g_adc_temp_cur+0x1>
    67ac:	60 93 87 28 	sts	0x2887, r22	; 0x802887 <g_adc_temp_cur+0x2>
    67b0:	70 93 88 28 	sts	0x2888, r23	; 0x802888 <g_adc_temp_cur+0x3>
    67b4:	10 92 7f 28 	sts	0x287F, r1	; 0x80287f <g_adc_temp_cnt>
    67b8:	10 92 80 28 	sts	0x2880, r1	; 0x802880 <g_adc_temp_cnt+0x1>
    67bc:	10 92 81 28 	sts	0x2881, r1	; 0x802881 <g_adc_temp_sum>
    67c0:	10 92 82 28 	sts	0x2882, r1	; 0x802882 <g_adc_temp_sum+0x1>
    67c4:	10 92 83 28 	sts	0x2883, r1	; 0x802883 <g_adc_temp_sum+0x2>
    67c8:	10 92 84 28 	sts	0x2884, r1	; 0x802884 <g_adc_temp_sum+0x3>
    67cc:	08 95       	ret

000067ce <task_dac>:
    67ce:	cf 93       	push	r28
    67d0:	df 93       	push	r29
    67d2:	1f 92       	push	r1
    67d4:	1f 92       	push	r1
    67d6:	cd b7       	in	r28, 0x3d	; 61
    67d8:	de b7       	in	r29, 0x3e	; 62
    67da:	8f b7       	in	r24, 0x3f	; 63
    67dc:	8a 83       	std	Y+2, r24	; 0x02
    67de:	f8 94       	cli
    67e0:	8a 81       	ldd	r24, Y+2	; 0x02
    67e2:	8f bf       	out	0x3f, r24	; 63
    67e4:	80 91 31 26 	lds	r24, 0x2631	; 0x802631 <s_dds0_freq_mHz.7470>
    67e8:	90 91 32 26 	lds	r25, 0x2632	; 0x802632 <s_dds0_freq_mHz.7470+0x1>
    67ec:	a0 91 33 26 	lds	r26, 0x2633	; 0x802633 <s_dds0_freq_mHz.7470+0x2>
    67f0:	b0 91 34 26 	lds	r27, 0x2634	; 0x802634 <s_dds0_freq_mHz.7470+0x3>
    67f4:	80 38       	cpi	r24, 0x80	; 128
    67f6:	94 48       	sbci	r25, 0x84	; 132
    67f8:	ae 41       	sbci	r26, 0x1E	; 30
    67fa:	b1 05       	cpc	r27, r1
    67fc:	69 f4       	brne	.+26     	; 0x6818 <task_dac+0x4a>
    67fe:	80 91 2d 26 	lds	r24, 0x262D	; 0x80262d <s_dds1_freq_mHz.7471>
    6802:	90 91 2e 26 	lds	r25, 0x262E	; 0x80262e <s_dds1_freq_mHz.7471+0x1>
    6806:	a0 91 2f 26 	lds	r26, 0x262F	; 0x80262f <s_dds1_freq_mHz.7471+0x2>
    680a:	b0 91 30 26 	lds	r27, 0x2630	; 0x802630 <s_dds1_freq_mHz.7471+0x3>
    680e:	8a 30       	cpi	r24, 0x0A	; 10
    6810:	99 40       	sbci	r25, 0x09	; 9
    6812:	ad 43       	sbci	r26, 0x3D	; 61
    6814:	b1 05       	cpc	r27, r1
    6816:	a9 f1       	breq	.+106    	; 0x6882 <task_dac+0xb4>
    6818:	80 e8       	ldi	r24, 0x80	; 128
    681a:	94 e8       	ldi	r25, 0x84	; 132
    681c:	ae e1       	ldi	r26, 0x1E	; 30
    681e:	b0 e0       	ldi	r27, 0x00	; 0
    6820:	80 93 31 26 	sts	0x2631, r24	; 0x802631 <s_dds0_freq_mHz.7470>
    6824:	90 93 32 26 	sts	0x2632, r25	; 0x802632 <s_dds0_freq_mHz.7470+0x1>
    6828:	a0 93 33 26 	sts	0x2633, r26	; 0x802633 <s_dds0_freq_mHz.7470+0x2>
    682c:	b0 93 34 26 	sts	0x2634, r27	; 0x802634 <s_dds0_freq_mHz.7470+0x3>
    6830:	8a e0       	ldi	r24, 0x0A	; 10
    6832:	99 e0       	ldi	r25, 0x09	; 9
    6834:	ad e3       	ldi	r26, 0x3D	; 61
    6836:	b0 e0       	ldi	r27, 0x00	; 0
    6838:	80 93 2d 26 	sts	0x262D, r24	; 0x80262d <s_dds1_freq_mHz.7471>
    683c:	90 93 2e 26 	sts	0x262E, r25	; 0x80262e <s_dds1_freq_mHz.7471+0x1>
    6840:	a0 93 2f 26 	sts	0x262F, r26	; 0x80262f <s_dds1_freq_mHz.7471+0x2>
    6844:	b0 93 30 26 	sts	0x2630, r27	; 0x802630 <s_dds1_freq_mHz.7471+0x3>
    6848:	8f b7       	in	r24, 0x3f	; 63
    684a:	89 83       	std	Y+1, r24	; 0x01
    684c:	f8 94       	cli
    684e:	89 81       	ldd	r24, Y+1	; 0x01
    6850:	41 e5       	ldi	r20, 0x51	; 81
    6852:	58 eb       	ldi	r21, 0xB8	; 184
    6854:	6e e1       	ldi	r22, 0x1E	; 30
    6856:	75 e0       	ldi	r23, 0x05	; 5
    6858:	40 93 45 28 	sts	0x2845, r20	; 0x802845 <dds0_inc>
    685c:	50 93 46 28 	sts	0x2846, r21	; 0x802846 <dds0_inc+0x1>
    6860:	60 93 47 28 	sts	0x2847, r22	; 0x802847 <dds0_inc+0x2>
    6864:	70 93 48 28 	sts	0x2848, r23	; 0x802848 <dds0_inc+0x3>
    6868:	41 e5       	ldi	r20, 0x51	; 81
    686a:	52 e7       	ldi	r21, 0x72	; 114
    686c:	6d e3       	ldi	r22, 0x3D	; 61
    686e:	7a e0       	ldi	r23, 0x0A	; 10
    6870:	40 93 3d 28 	sts	0x283D, r20	; 0x80283d <dds1_inc>
    6874:	50 93 3e 28 	sts	0x283E, r21	; 0x80283e <dds1_inc+0x1>
    6878:	60 93 3f 28 	sts	0x283F, r22	; 0x80283f <dds1_inc+0x2>
    687c:	70 93 40 28 	sts	0x2840, r23	; 0x802840 <dds1_inc+0x3>
    6880:	8f bf       	out	0x3f, r24	; 63
    6882:	0f 90       	pop	r0
    6884:	0f 90       	pop	r0
    6886:	df 91       	pop	r29
    6888:	cf 91       	pop	r28
    688a:	08 95       	ret

0000688c <isr_tcc0_ovfl>:
    688c:	cf 92       	push	r12
    688e:	df 92       	push	r13
    6890:	ef 92       	push	r14
    6892:	ff 92       	push	r15
    6894:	0f 93       	push	r16
    6896:	1f 93       	push	r17
    6898:	0e 94 ae 12 	call	0x255c	; 0x255c <rtc_get_time>
    689c:	21 e0       	ldi	r18, 0x01	; 1
    689e:	20 93 0c 08 	sts	0x080C, r18	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    68a2:	00 91 39 26 	lds	r16, 0x2639	; 0x802639 <last_10ms.7355>
    68a6:	10 91 3a 26 	lds	r17, 0x263A	; 0x80263a <last_10ms.7355+0x1>
    68aa:	20 91 3b 26 	lds	r18, 0x263B	; 0x80263b <last_10ms.7355+0x2>
    68ae:	30 91 3c 26 	lds	r19, 0x263C	; 0x80263c <last_10ms.7355+0x3>
    68b2:	6b 01       	movw	r12, r22
    68b4:	7c 01       	movw	r14, r24
    68b6:	c0 1a       	sub	r12, r16
    68b8:	d1 0a       	sbc	r13, r17
    68ba:	e2 0a       	sbc	r14, r18
    68bc:	f3 0a       	sbc	r15, r19
    68be:	4a e0       	ldi	r20, 0x0A	; 10
    68c0:	c4 16       	cp	r12, r20
    68c2:	d1 04       	cpc	r13, r1
    68c4:	e1 04       	cpc	r14, r1
    68c6:	f1 04       	cpc	r15, r1
    68c8:	28 f4       	brcc	.+10     	; 0x68d4 <isr_tcc0_ovfl+0x48>
    68ca:	60 17       	cp	r22, r16
    68cc:	71 07       	cpc	r23, r17
    68ce:	82 07       	cpc	r24, r18
    68d0:	93 07       	cpc	r25, r19
    68d2:	58 f4       	brcc	.+22     	; 0x68ea <isr_tcc0_ovfl+0x5e>
    68d4:	60 93 39 26 	sts	0x2639, r22	; 0x802639 <last_10ms.7355>
    68d8:	70 93 3a 26 	sts	0x263A, r23	; 0x80263a <last_10ms.7355+0x1>
    68dc:	80 93 3b 26 	sts	0x263B, r24	; 0x80263b <last_10ms.7355+0x2>
    68e0:	90 93 3c 26 	sts	0x263C, r25	; 0x80263c <last_10ms.7355+0x3>
    68e4:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <isr_10ms_twi1_onboard>
    68e8:	26 c0       	rjmp	.+76     	; 0x6936 <isr_tcc0_ovfl+0xaa>
    68ea:	00 91 35 26 	lds	r16, 0x2635	; 0x802635 <last_500ms.7356>
    68ee:	10 91 36 26 	lds	r17, 0x2636	; 0x802636 <last_500ms.7356+0x1>
    68f2:	20 91 37 26 	lds	r18, 0x2637	; 0x802637 <last_500ms.7356+0x2>
    68f6:	30 91 38 26 	lds	r19, 0x2638	; 0x802638 <last_500ms.7356+0x3>
    68fa:	6b 01       	movw	r12, r22
    68fc:	7c 01       	movw	r14, r24
    68fe:	c0 1a       	sub	r12, r16
    6900:	d1 0a       	sbc	r13, r17
    6902:	e2 0a       	sbc	r14, r18
    6904:	f3 0a       	sbc	r15, r19
    6906:	c1 14       	cp	r12, r1
    6908:	42 e0       	ldi	r20, 0x02	; 2
    690a:	d4 06       	cpc	r13, r20
    690c:	e1 04       	cpc	r14, r1
    690e:	f1 04       	cpc	r15, r1
    6910:	28 f4       	brcc	.+10     	; 0x691c <isr_tcc0_ovfl+0x90>
    6912:	60 17       	cp	r22, r16
    6914:	71 07       	cpc	r23, r17
    6916:	82 07       	cpc	r24, r18
    6918:	93 07       	cpc	r25, r19
    691a:	58 f4       	brcc	.+22     	; 0x6932 <isr_tcc0_ovfl+0xa6>
    691c:	60 93 35 26 	sts	0x2635, r22	; 0x802635 <last_500ms.7356>
    6920:	70 93 36 26 	sts	0x2636, r23	; 0x802636 <last_500ms.7356+0x1>
    6924:	80 93 37 26 	sts	0x2637, r24	; 0x802637 <last_500ms.7356+0x2>
    6928:	90 93 38 26 	sts	0x2638, r25	; 0x802638 <last_500ms.7356+0x3>
    692c:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <isr_500ms_twi1_onboard>
    6930:	02 c0       	rjmp	.+4      	; 0x6936 <isr_tcc0_ovfl+0xaa>
    6932:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <isr_sparetime_twi1_onboard>
    6936:	1f 91       	pop	r17
    6938:	0f 91       	pop	r16
    693a:	ff 90       	pop	r15
    693c:	ef 90       	pop	r14
    693e:	df 90       	pop	r13
    6940:	cf 90       	pop	r12
    6942:	08 95       	ret

00006944 <calc_next_frame>:
    6944:	8f 92       	push	r8
    6946:	9f 92       	push	r9
    6948:	af 92       	push	r10
    694a:	bf 92       	push	r11
    694c:	cf 92       	push	r12
    694e:	df 92       	push	r13
    6950:	ef 92       	push	r14
    6952:	ff 92       	push	r15
    6954:	0f 93       	push	r16
    6956:	1f 93       	push	r17
    6958:	cf 93       	push	r28
    695a:	df 93       	push	r29
    695c:	6b 01       	movw	r12, r22
    695e:	5a 01       	movw	r10, r20
    6960:	79 01       	movw	r14, r18
    6962:	48 01       	movw	r8, r16
    6964:	ec 01       	movw	r28, r24
    6966:	8c 01       	movw	r16, r24
    6968:	13 95       	inc	r17
    696a:	f6 01       	movw	r30, r12
    696c:	82 81       	ldd	r24, Z+2	; 0x02
    696e:	93 81       	ldd	r25, Z+3	; 0x03
    6970:	0e 94 3b 13 	call	0x2676	; 0x2676 <get_interpolated_sine>
    6974:	88 83       	st	Y, r24
    6976:	99 83       	std	Y+1, r25	; 0x01
    6978:	f7 01       	movw	r30, r14
    697a:	82 81       	ldd	r24, Z+2	; 0x02
    697c:	93 81       	ldd	r25, Z+3	; 0x03
    697e:	0e 94 3b 13 	call	0x2676	; 0x2676 <get_interpolated_sine>
    6982:	8a 83       	std	Y+2, r24	; 0x02
    6984:	9b 83       	std	Y+3, r25	; 0x03
    6986:	f6 01       	movw	r30, r12
    6988:	40 81       	ld	r20, Z
    698a:	51 81       	ldd	r21, Z+1	; 0x01
    698c:	62 81       	ldd	r22, Z+2	; 0x02
    698e:	73 81       	ldd	r23, Z+3	; 0x03
    6990:	f5 01       	movw	r30, r10
    6992:	80 81       	ld	r24, Z
    6994:	91 81       	ldd	r25, Z+1	; 0x01
    6996:	a2 81       	ldd	r26, Z+2	; 0x02
    6998:	b3 81       	ldd	r27, Z+3	; 0x03
    699a:	84 0f       	add	r24, r20
    699c:	95 1f       	adc	r25, r21
    699e:	a6 1f       	adc	r26, r22
    69a0:	b7 1f       	adc	r27, r23
    69a2:	f6 01       	movw	r30, r12
    69a4:	80 83       	st	Z, r24
    69a6:	91 83       	std	Z+1, r25	; 0x01
    69a8:	a2 83       	std	Z+2, r26	; 0x02
    69aa:	b3 83       	std	Z+3, r27	; 0x03
    69ac:	f7 01       	movw	r30, r14
    69ae:	40 81       	ld	r20, Z
    69b0:	51 81       	ldd	r21, Z+1	; 0x01
    69b2:	62 81       	ldd	r22, Z+2	; 0x02
    69b4:	73 81       	ldd	r23, Z+3	; 0x03
    69b6:	f4 01       	movw	r30, r8
    69b8:	80 81       	ld	r24, Z
    69ba:	91 81       	ldd	r25, Z+1	; 0x01
    69bc:	a2 81       	ldd	r26, Z+2	; 0x02
    69be:	b3 81       	ldd	r27, Z+3	; 0x03
    69c0:	84 0f       	add	r24, r20
    69c2:	95 1f       	adc	r25, r21
    69c4:	a6 1f       	adc	r26, r22
    69c6:	b7 1f       	adc	r27, r23
    69c8:	f7 01       	movw	r30, r14
    69ca:	80 83       	st	Z, r24
    69cc:	91 83       	std	Z+1, r25	; 0x01
    69ce:	a2 83       	std	Z+2, r26	; 0x02
    69d0:	b3 83       	std	Z+3, r27	; 0x03
    69d2:	24 96       	adiw	r28, 0x04	; 4
    69d4:	c0 17       	cp	r28, r16
    69d6:	d1 07       	cpc	r29, r17
    69d8:	41 f6       	brne	.-112    	; 0x696a <calc_next_frame+0x26>
    69da:	df 91       	pop	r29
    69dc:	cf 91       	pop	r28
    69de:	1f 91       	pop	r17
    69e0:	0f 91       	pop	r16
    69e2:	ff 90       	pop	r15
    69e4:	ef 90       	pop	r14
    69e6:	df 90       	pop	r13
    69e8:	cf 90       	pop	r12
    69ea:	bf 90       	pop	r11
    69ec:	af 90       	pop	r10
    69ee:	9f 90       	pop	r9
    69f0:	8f 90       	pop	r8
    69f2:	08 95       	ret

000069f4 <isr_dma_dac_ch0_B>:
    69f4:	0f 93       	push	r16
    69f6:	1f 93       	push	r17
    69f8:	cf 93       	push	r28
    69fa:	df 93       	push	r29
    69fc:	1f 92       	push	r1
    69fe:	cd b7       	in	r28, 0x3d	; 61
    6a00:	de b7       	in	r29, 0x3e	; 62
    6a02:	8f b7       	in	r24, 0x3f	; 63
    6a04:	89 83       	std	Y+1, r24	; 0x01
    6a06:	f8 94       	cli
    6a08:	99 81       	ldd	r25, Y+1	; 0x01
    6a0a:	e0 e1       	ldi	r30, 0x10	; 16
    6a0c:	f1 e0       	ldi	r31, 0x01	; 1
    6a0e:	80 81       	ld	r24, Z
    6a10:	80 68       	ori	r24, 0x80	; 128
    6a12:	80 83       	st	Z, r24
    6a14:	9f bf       	out	0x3f, r25	; 63
    6a16:	78 94       	sei
    6a18:	0d e3       	ldi	r16, 0x3D	; 61
    6a1a:	18 e2       	ldi	r17, 0x28	; 40
    6a1c:	27 e0       	ldi	r18, 0x07	; 7
    6a1e:	30 e2       	ldi	r19, 0x20	; 32
    6a20:	45 e4       	ldi	r20, 0x45	; 69
    6a22:	58 e2       	ldi	r21, 0x28	; 40
    6a24:	61 e4       	ldi	r22, 0x41	; 65
    6a26:	78 e2       	ldi	r23, 0x28	; 40
    6a28:	8d e3       	ldi	r24, 0x3D	; 61
    6a2a:	97 e2       	ldi	r25, 0x27	; 39
    6a2c:	8b df       	rcall	.-234    	; 0x6944 <calc_next_frame>
    6a2e:	0f 90       	pop	r0
    6a30:	df 91       	pop	r29
    6a32:	cf 91       	pop	r28
    6a34:	1f 91       	pop	r17
    6a36:	0f 91       	pop	r16
    6a38:	08 95       	ret

00006a3a <isr_dma_dac_ch0_A>:
    6a3a:	0f 93       	push	r16
    6a3c:	1f 93       	push	r17
    6a3e:	cf 93       	push	r28
    6a40:	df 93       	push	r29
    6a42:	1f 92       	push	r1
    6a44:	cd b7       	in	r28, 0x3d	; 61
    6a46:	de b7       	in	r29, 0x3e	; 62
    6a48:	8f b7       	in	r24, 0x3f	; 63
    6a4a:	89 83       	std	Y+1, r24	; 0x01
    6a4c:	f8 94       	cli
    6a4e:	99 81       	ldd	r25, Y+1	; 0x01
    6a50:	e0 e2       	ldi	r30, 0x20	; 32
    6a52:	f1 e0       	ldi	r31, 0x01	; 1
    6a54:	80 81       	ld	r24, Z
    6a56:	80 68       	ori	r24, 0x80	; 128
    6a58:	80 83       	st	Z, r24
    6a5a:	9f bf       	out	0x3f, r25	; 63
    6a5c:	78 94       	sei
    6a5e:	0d e3       	ldi	r16, 0x3D	; 61
    6a60:	18 e2       	ldi	r17, 0x28	; 40
    6a62:	27 e0       	ldi	r18, 0x07	; 7
    6a64:	30 e2       	ldi	r19, 0x20	; 32
    6a66:	45 e4       	ldi	r20, 0x45	; 69
    6a68:	58 e2       	ldi	r21, 0x28	; 40
    6a6a:	61 e4       	ldi	r22, 0x41	; 65
    6a6c:	78 e2       	ldi	r23, 0x28	; 40
    6a6e:	8d e3       	ldi	r24, 0x3D	; 61
    6a70:	96 e2       	ldi	r25, 0x26	; 38
    6a72:	68 df       	rcall	.-304    	; 0x6944 <calc_next_frame>
    6a74:	0f 90       	pop	r0
    6a76:	df 91       	pop	r29
    6a78:	cf 91       	pop	r28
    6a7a:	1f 91       	pop	r17
    6a7c:	0f 91       	pop	r16
    6a7e:	08 95       	ret

00006a80 <usb_callback_suspend_action>:
    6a80:	08 95       	ret

00006a82 <usb_callback_resume_action>:
    6a82:	08 95       	ret

00006a84 <usb_callback_remotewakeup_enable>:
    6a84:	08 95       	ret

00006a86 <usb_callback_remotewakeup_disable>:
    6a86:	08 95       	ret

00006a88 <usb_callback_cdc_enable>:

bool usb_callback_cdc_enable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = true;
    6a88:	81 e0       	ldi	r24, 0x01	; 1
    6a8a:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <usb_cdc_transfers_autorized>
	return true;
}
    6a8e:	08 95       	ret

00006a90 <usb_callback_cdc_disable>:

void usb_callback_cdc_disable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = false;
    6a90:	10 92 02 29 	sts	0x2902, r1	; 0x802902 <usb_cdc_transfers_autorized>
    6a94:	08 95       	ret

00006a96 <usb_callback_config>:
}

void usb_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    6a96:	08 95       	ret

00006a98 <usb_callback_cdc_set_dtr>:

}

void usb_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
    6a98:	08 95       	ret

00006a9a <usb_callback_cdc_set_rts>:

}

void usb_callback_cdc_set_rts(uint8_t port, bool b_enable)
{
    6a9a:	08 95       	ret

00006a9c <usb_callback_rx_notify>:

}

void usb_callback_rx_notify(uint8_t port)
{
    6a9c:	08 95       	ret

00006a9e <usb_callback_tx_empty_notify>:

}

void usb_callback_tx_empty_notify(uint8_t port)
{
    6a9e:	08 95       	ret

00006aa0 <main>:
	task_usb(now);												// Handling the USB connection
}


int main(void)
{
    6aa0:	2f 92       	push	r2
    6aa2:	3f 92       	push	r3
    6aa4:	4f 92       	push	r4
    6aa6:	5f 92       	push	r5
    6aa8:	6f 92       	push	r6
    6aaa:	7f 92       	push	r7
    6aac:	8f 92       	push	r8
    6aae:	9f 92       	push	r9
    6ab0:	af 92       	push	r10
    6ab2:	bf 92       	push	r11
    6ab4:	cf 92       	push	r12
    6ab6:	df 92       	push	r13
    6ab8:	ef 92       	push	r14
    6aba:	ff 92       	push	r15
    6abc:	0f 93       	push	r16
    6abe:	1f 93       	push	r17
    6ac0:	cf 93       	push	r28
    6ac2:	df 93       	push	r29
    6ac4:	cd b7       	in	r28, 0x3d	; 61
    6ac6:	de b7       	in	r29, 0x3e	; 62
    6ac8:	69 97       	sbiw	r28, 0x19	; 25
    6aca:	cd bf       	out	0x3d, r28	; 61
    6acc:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	/* Init of interrupt system */
	irq_initialize_vectors();
    6ace:	e0 ea       	ldi	r30, 0xA0	; 160
    6ad0:	f0 e0       	ldi	r31, 0x00	; 0
    6ad2:	0f 2e       	mov	r0, r31
    6ad4:	f7 e0       	ldi	r31, 0x07	; 7
    6ad6:	df 2e       	mov	r13, r31
    6ad8:	f0 2d       	mov	r31, r0
    6ada:	d2 82       	std	Z+2, r13	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    6adc:	d2 82       	std	Z+2, r13	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    6ade:	82 81       	ldd	r24, Z+2	; 0x02
    6ae0:	8f 77       	andi	r24, 0x7F	; 127
    6ae2:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);

	sysclk_init();		// Clock configuration set-up
    6ae4:	11 82       	std	Z+1, r1	; 0x01
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    6ae6:	d7 d4       	rcall	.+2478   	; 0x7496 <sysclk_init>
    6ae8:	eb e5       	ldi	r30, 0x5B	; 91
    6aea:	fa e2       	ldi	r31, 0x2A	; 42
    6aec:	10 82       	st	Z, r1
    6aee:	11 82       	std	Z+1, r1	; 0x01
    6af0:	12 82       	std	Z+2, r1	; 0x02
    6af2:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    6af4:	14 82       	std	Z+4, r1	; 0x04
    6af6:	55 24       	eor	r5, r5
    6af8:	53 94       	inc	r5

	sleepmgr_init();	// Unlocks all sleep mode levels

	rtc_init();
    6afa:	55 82       	std	Z+5, r5	; 0x05
    6afc:	0e 94 c4 12 	call	0x2588	; 0x2588 <rtc_init>
}


static void rtc_start(void)
{
	rtc_set_callback(isr_rtc_alarm);
    6b00:	8e e3       	ldi	r24, 0x3E	; 62
    6b02:	92 e3       	ldi	r25, 0x32	; 50
    6b04:	0e 94 bf 12 	call	0x257e	; 0x257e <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    6b08:	62 e0       	ldi	r22, 0x02	; 2
    6b0a:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event channels 0, 1, 2, 3 */
	EVSYS.CH0MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH0
    6b0c:	45 d5       	rcall	.+2698   	; 0x7598 <sysclk_enable_module>
    6b0e:	e0 e8       	ldi	r30, 0x80	; 128
    6b10:	f1 e0       	ldi	r31, 0x01	; 1
    6b12:	86 ec       	ldi	r24, 0xC6	; 198
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH0 no digital filtering
    6b14:	80 83       	st	Z, r24
	EVSYS.CH1MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH1
    6b16:	10 86       	std	Z+8, r1	; 0x08
	EVSYS.CH1CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH1 no digital filtering
    6b18:	81 83       	std	Z+1, r24	; 0x01
	EVSYS.CH2MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH2
    6b1a:	11 86       	std	Z+9, r1	; 0x09
	EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH2 no digital filtering
    6b1c:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH3MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH3
    6b1e:	12 86       	std	Z+10, r1	; 0x0a
	EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH3 no digital filtering
    6b20:	83 83       	std	Z+3, r24	; 0x03

	/* DAC - event 4 */
	EVSYS.CH4MUX  = EVSYS_CHMUX_TCE1_OVF_gc;									// TCE1 overflow goes to EVSYS CH4
    6b22:	13 86       	std	Z+11, r1	; 0x0b
    6b24:	88 ee       	ldi	r24, 0xE8	; 232
	EVSYS.CH4CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH4 no digital filtering
    6b26:	84 83       	std	Z+4, r24	; 0x04

static void tc_init(void)
{
	/* TCC0: VCTCXO PWM signal generation and ADCA & ADCB */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 2560);						// Init PWM structure and enable timer - running with 2560 Hz
    6b28:	14 86       	std	Z+12, r1	; 0x0c
    6b2a:	20 e0       	ldi	r18, 0x00	; 0
    6b2c:	3a e0       	ldi	r19, 0x0A	; 10
    6b2e:	43 e0       	ldi	r20, 0x03	; 3
    6b30:	60 e0       	ldi	r22, 0x00	; 0
    6b32:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM here. Percentage with 1% granularity is to coarse, use driver access instead
    6b34:	01 96       	adiw	r24, 0x01	; 1
    6b36:	7d db       	rcall	.-2310   	; 0x6232 <pwm_init>
    6b38:	6d e2       	ldi	r22, 0x2D	; 45
    6b3a:	ce 01       	movw	r24, r28
	tc_write_cc_buffer(&TCC0, TC_CCC, (uint16_t) (0.5f + pwm_vctcxo_cfg.period * C_VCTCXO_DEFAULT_VOLTS / C_VCTCXO_PWM_HI_VOLTS));	// Initial value for VCTCXO
    6b3c:	01 96       	adiw	r24, 0x01	; 1
    6b3e:	41 dc       	rcall	.-1918   	; 0x63c2 <pwm_start>
    6b40:	6e 81       	ldd	r22, Y+6	; 0x06
    6b42:	7f 81       	ldd	r23, Y+7	; 0x07
    6b44:	80 e0       	ldi	r24, 0x00	; 0
    6b46:	90 e0       	ldi	r25, 0x00	; 0
    6b48:	0e 94 0c 45 	call	0x8a18	; 0x8a18 <__floatunsisf>
    6b4c:	20 e0       	ldi	r18, 0x00	; 0
    6b4e:	30 e0       	ldi	r19, 0x00	; 0
    6b50:	40 ec       	ldi	r20, 0xC0	; 192
    6b52:	5f e3       	ldi	r21, 0x3F	; 63
    6b54:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    6b58:	27 e2       	ldi	r18, 0x27	; 39
    6b5a:	31 e3       	ldi	r19, 0x31	; 49
    6b5c:	40 e5       	ldi	r20, 0x50	; 80
    6b5e:	50 e4       	ldi	r21, 0x40	; 64
    6b60:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    6b64:	20 e0       	ldi	r18, 0x00	; 0
    6b66:	30 e0       	ldi	r19, 0x00	; 0
    6b68:	40 e0       	ldi	r20, 0x00	; 0
    6b6a:	5f e3       	ldi	r21, 0x3F	; 63
    6b6c:	0e 94 14 44 	call	0x8828	; 0x8828 <__addsf3>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    6b70:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixunssfsi>
    6b74:	00 e0       	ldi	r16, 0x00	; 0
    6b76:	18 e0       	ldi	r17, 0x08	; 8
    6b78:	d8 01       	movw	r26, r16
    6b7a:	dc 96       	adiw	r26, 0x3c	; 60
    6b7c:	6d 93       	st	X+, r22

	/* TCE1: DAC clock */
	tc_enable(&TCE1);
    6b7e:	7c 93       	st	X, r23
    6b80:	dd 97       	sbiw	r26, 0x3d	; 61
    6b82:	80 e4       	ldi	r24, 0x40	; 64
    6b84:	9a e0       	ldi	r25, 0x0A	; 10
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    6b86:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <tc_enable>
    6b8a:	0f 2e       	mov	r0, r31
    6b8c:	f0 e4       	ldi	r31, 0x40	; 64
    6b8e:	ef 2e       	mov	r14, r31
    6b90:	fa e0       	ldi	r31, 0x0A	; 10
    6b92:	ff 2e       	mov	r15, r31
    6b94:	f0 2d       	mov	r31, r0
    6b96:	f7 01       	movw	r30, r14
    6b98:	81 81       	ldd	r24, Z+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    6b9a:	88 7f       	andi	r24, 0xF8	; 248
    6b9c:	81 83       	std	Z+1, r24	; 0x01
    6b9e:	8b e2       	ldi	r24, 0x2B	; 43
    6ba0:	91 e0       	ldi	r25, 0x01	; 1


static void adc_init(void)
{
	/* Disable digital circuits of ADC pins */
	PORTA_PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6ba2:	86 a3       	std	Z+38, r24	; 0x26
    6ba4:	97 a3       	std	Z+39, r25	; 0x27
    6ba6:	e0 e1       	ldi	r30, 0x10	; 16
    6ba8:	f6 e0       	ldi	r31, 0x06	; 6
    6baa:	80 81       	ld	r24, Z
	PORTA_PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6bac:	87 60       	ori	r24, 0x07	; 7
    6bae:	80 83       	st	Z, r24
    6bb0:	e1 e1       	ldi	r30, 0x11	; 17
    6bb2:	f6 e0       	ldi	r31, 0x06	; 6
    6bb4:	80 81       	ld	r24, Z
	PORTA_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6bb6:	87 60       	ori	r24, 0x07	; 7
    6bb8:	80 83       	st	Z, r24
    6bba:	e2 e1       	ldi	r30, 0x12	; 18
    6bbc:	f6 e0       	ldi	r31, 0x06	; 6
    6bbe:	80 81       	ld	r24, Z
	PORTA_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6bc0:	87 60       	ori	r24, 0x07	; 7
    6bc2:	80 83       	st	Z, r24
    6bc4:	e3 e1       	ldi	r30, 0x13	; 19
    6bc6:	f6 e0       	ldi	r31, 0x06	; 6
    6bc8:	80 81       	ld	r24, Z
	PORTA_PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6bca:	87 60       	ori	r24, 0x07	; 7
    6bcc:	80 83       	st	Z, r24
    6bce:	e4 e1       	ldi	r30, 0x14	; 20
    6bd0:	f6 e0       	ldi	r31, 0x06	; 6
    6bd2:	80 81       	ld	r24, Z
	PORTA_PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6bd4:	87 60       	ori	r24, 0x07	; 7
    6bd6:	80 83       	st	Z, r24
    6bd8:	e5 e1       	ldi	r30, 0x15	; 21
    6bda:	f6 e0       	ldi	r31, 0x06	; 6
    6bdc:	80 81       	ld	r24, Z
	PORTB_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6bde:	87 60       	ori	r24, 0x07	; 7
    6be0:	80 83       	st	Z, r24
    6be2:	e2 e3       	ldi	r30, 0x32	; 50
    6be4:	f6 e0       	ldi	r31, 0x06	; 6
    6be6:	80 81       	ld	r24, Z
	PORTB_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6be8:	87 60       	ori	r24, 0x07	; 7
    6bea:	80 83       	st	Z, r24
    6bec:	e3 e3       	ldi	r30, 0x33	; 51
    6bee:	f6 e0       	ldi	r31, 0x06	; 6
    6bf0:	80 81       	ld	r24, Z

	/* Prepare the structures */
	adc_read_configuration(&ADC_VCTCXO_5V0_VBAT,							&g_adc_a_conf);
    6bf2:	87 60       	ori	r24, 0x07	; 7
    6bf4:	80 83       	st	Z, r24
    6bf6:	62 ed       	ldi	r22, 0xD2	; 210
    6bf8:	78 e2       	ldi	r23, 0x28	; 40
    6bfa:	80 e0       	ldi	r24, 0x00	; 0
    6bfc:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    6bfe:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <adc_read_configuration>
    6c02:	4e ec       	ldi	r20, 0xCE	; 206
    6c04:	58 e2       	ldi	r21, 0x28	; 40
    6c06:	61 e0       	ldi	r22, 0x01	; 1
    6c08:	80 e0       	ldi	r24, 0x00	; 0
    6c0a:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    6c0c:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <adcch_read_configuration>
    6c10:	4a ec       	ldi	r20, 0xCA	; 202
    6c12:	58 e2       	ldi	r21, 0x28	; 40
    6c14:	62 e0       	ldi	r22, 0x02	; 2
    6c16:	80 e0       	ldi	r24, 0x00	; 0
    6c18:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    6c1a:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <adcch_read_configuration>
    6c1e:	46 ec       	ldi	r20, 0xC6	; 198
    6c20:	58 e2       	ldi	r21, 0x28	; 40
    6c22:	64 e0       	ldi	r22, 0x04	; 4
    6c24:	80 e0       	ldi	r24, 0x00	; 0
    6c26:	92 e0       	ldi	r25, 0x02	; 2
	adc_read_configuration(&ADC_TEMP,										&g_adc_b_conf);
    6c28:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <adcch_read_configuration>
    6c2c:	6f eb       	ldi	r22, 0xBF	; 191
    6c2e:	78 e2       	ldi	r23, 0x28	; 40
    6c30:	80 e4       	ldi	r24, 0x40	; 64
    6c32:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    6c34:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <adc_read_configuration>
    6c38:	4b eb       	ldi	r20, 0xBB	; 187
    6c3a:	58 e2       	ldi	r21, 0x28	; 40
    6c3c:	61 e0       	ldi	r22, 0x01	; 1
    6c3e:	80 e4       	ldi	r24, 0x40	; 64
    6c40:	92 e0       	ldi	r25, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    6c42:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <adcch_read_configuration>
    6c46:	a2 ed       	ldi	r26, 0xD2	; 210
    6c48:	b8 e2       	ldi	r27, 0x28	; 40
    6c4a:	83 e0       	ldi	r24, 0x03	; 3
    6c4c:	14 96       	adiw	r26, 0x04	; 4
    6c4e:	8c 93       	st	X, r24
    6c50:	14 97       	sbiw	r26, 0x04	; 4
    6c52:	6f eb       	ldi	r22, 0xBF	; 191
    6c54:	78 e2       	ldi	r23, 0x28	; 40
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_disable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl &= ~int_inp;
    6c56:	fb 01       	movw	r30, r22
    6c58:	d4 82       	std	Z+4, r13	; 0x04
    6c5a:	12 96       	adiw	r26, 0x02	; 2
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    6c5c:	3c 91       	ld	r19, X
 * \note Not all device families feature this setting.
 */
static inline void adc_set_current_limit(struct adc_config *conf,
		enum adc_current_limit currlimit)
{
	conf->ctrlb &= ~ADC_CURRLIMIT_gm;
    6c5e:	12 97       	sbiw	r26, 0x02	; 2
    6c60:	22 81       	ldd	r18, Z+2	; 0x02
    6c62:	11 96       	adiw	r26, 0x01	; 1
    6c64:	9c 91       	ld	r25, X
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    6c66:	11 97       	sbiw	r26, 0x01	; 1
    6c68:	81 81       	ldd	r24, Z+1	; 0x01
    6c6a:	0f 2e       	mov	r0, r31
    6c6c:	fe ec       	ldi	r31, 0xCE	; 206
    6c6e:	cf 2e       	mov	r12, r31
    6c70:	f8 e2       	ldi	r31, 0x28	; 40
    6c72:	df 2e       	mov	r13, r31
    6c74:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    6c76:	f6 01       	movw	r30, r12
    6c78:	50 82       	st	Z, r5
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    6c7a:	48 e0       	ldi	r20, 0x08	; 8
    6c7c:	41 83       	std	Z+1, r20	; 0x01
    6c7e:	0f 2e       	mov	r0, r31
    6c80:	fa ec       	ldi	r31, 0xCA	; 202
    6c82:	8f 2e       	mov	r8, r31
    6c84:	f8 e2       	ldi	r31, 0x28	; 40
    6c86:	9f 2e       	mov	r9, r31
    6c88:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    6c8a:	f4 01       	movw	r30, r8
    6c8c:	50 82       	st	Z, r5
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    6c8e:	40 e2       	ldi	r20, 0x20	; 32
    6c90:	41 83       	std	Z+1, r20	; 0x01
    6c92:	0f 2e       	mov	r0, r31
    6c94:	f6 ec       	ldi	r31, 0xC6	; 198
    6c96:	af 2e       	mov	r10, r31
    6c98:	f8 e2       	ldi	r31, 0x28	; 40
    6c9a:	bf 2e       	mov	r11, r31
    6c9c:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    6c9e:	f5 01       	movw	r30, r10
    6ca0:	50 82       	st	Z, r5
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    6ca2:	48 e2       	ldi	r20, 0x28	; 40
    6ca4:	41 83       	std	Z+1, r20	; 0x01
    6ca6:	0f 2e       	mov	r0, r31
    6ca8:	fb eb       	ldi	r31, 0xBB	; 187
    6caa:	6f 2e       	mov	r6, r31
    6cac:	f8 e2       	ldi	r31, 0x28	; 40
    6cae:	7f 2e       	mov	r7, r31
    6cb0:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    6cb2:	f3 01       	movw	r30, r6
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    6cb4:	10 82       	st	Z, r1
    6cb6:	11 82       	std	Z+1, r1	; 0x01
    6cb8:	3c 78       	andi	r19, 0x8C	; 140
    6cba:	30 62       	ori	r19, 0x20	; 32
    6cbc:	12 96       	adiw	r26, 0x02	; 2
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    6cbe:	3c 93       	st	X, r19
    6cc0:	12 97       	sbiw	r26, 0x02	; 2
    6cc2:	2f 78       	andi	r18, 0x8F	; 143
    6cc4:	23 60       	ori	r18, 0x03	; 3
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    6cc6:	fb 01       	movw	r30, r22
    6cc8:	22 83       	std	Z+2, r18	; 0x02
    6cca:	22 e0       	ldi	r18, 0x02	; 2
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    6ccc:	f6 01       	movw	r30, r12
    6cce:	23 83       	std	Z+3, r18	; 0x03
    6cd0:	91 70       	andi	r25, 0x01	; 1
    6cd2:	90 62       	ori	r25, 0x20	; 32
    6cd4:	11 96       	adiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    6cd6:	9c 93       	st	X, r25
    6cd8:	11 97       	sbiw	r26, 0x01	; 1
    6cda:	0f 2e       	mov	r0, r31
    6cdc:	fb e0       	ldi	r31, 0x0B	; 11
    6cde:	4f 2e       	mov	r4, r31
    6ce0:	f0 2d       	mov	r31, r0
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    6ce2:	13 96       	adiw	r26, 0x03	; 3
    6ce4:	4c 92       	st	X, r4
    6ce6:	81 70       	andi	r24, 0x01	; 1
    6ce8:	80 66       	ori	r24, 0x60	; 96
    6cea:	db 01       	movw	r26, r22
    6cec:	11 96       	adiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    6cee:	8c 93       	st	X, r24
    6cf0:	11 97       	sbiw	r26, 0x01	; 1
	/* Trigger */
	adc_set_conversion_trigger(&g_adc_a_conf, ADC_TRIG_EVENT_SINGLE, 3, 1);
	adc_set_conversion_trigger(&g_adc_b_conf, ADC_TRIG_EVENT_SINGLE, 1, 0);

	/* Interrupt service routine */
	adc_set_callback(&ADCA, isr_adc_a);
    6cf2:	13 96       	adiw	r26, 0x03	; 3
    6cf4:	5c 92       	st	X, r5
    6cf6:	6f e3       	ldi	r22, 0x3F	; 63
    6cf8:	72 e3       	ldi	r23, 0x32	; 50
    6cfa:	80 e0       	ldi	r24, 0x00	; 0
    6cfc:	92 e0       	ldi	r25, 0x02	; 2
	adc_set_callback(&ADCB, isr_adc_b);
    6cfe:	0e 94 43 1c 	call	0x3886	; 0x3886 <adc_set_callback>
    6d02:	61 ea       	ldi	r22, 0xA1	; 161
    6d04:	73 e3       	ldi	r23, 0x33	; 51
    6d06:	80 e4       	ldi	r24, 0x40	; 64
    6d08:	92 e0       	ldi	r25, 0x02	; 2
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    6d0a:	0e 94 43 1c 	call	0x3886	; 0x3886 <adc_set_callback>
    6d0e:	f4 01       	movw	r30, r8
    6d10:	22 81       	ldd	r18, Z+2	; 0x02
    6d12:	d5 01       	movw	r26, r10
    6d14:	12 96       	adiw	r26, 0x02	; 2
    6d16:	9c 91       	ld	r25, X
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    6d18:	f3 01       	movw	r30, r6
    6d1a:	82 81       	ldd	r24, Z+2	; 0x02
    6d1c:	d6 01       	movw	r26, r12
    6d1e:	12 96       	adiw	r26, 0x02	; 2
    6d20:	3c 91       	ld	r19, X
    6d22:	12 97       	sbiw	r26, 0x02	; 2
    6d24:	30 7f       	andi	r19, 0xF0	; 240
    6d26:	31 60       	ori	r19, 0x01	; 1
    6d28:	12 96       	adiw	r26, 0x02	; 2
    6d2a:	3c 93       	st	X, r19
    6d2c:	20 7f       	andi	r18, 0xF0	; 240
    6d2e:	21 60       	ori	r18, 0x01	; 1
    6d30:	f4 01       	movw	r30, r8
    6d32:	22 83       	std	Z+2, r18	; 0x02
    6d34:	90 7f       	andi	r25, 0xF0	; 240
    6d36:	91 60       	ori	r25, 0x01	; 1
    6d38:	d5 01       	movw	r26, r10
    6d3a:	12 96       	adiw	r26, 0x02	; 2
    6d3c:	9c 93       	st	X, r25
    6d3e:	80 7f       	andi	r24, 0xF0	; 240
    6d40:	81 60       	ori	r24, 0x01	; 1
	adcch_enable_interrupt(&g_adcch_io_adc4_conf);
	adcch_enable_interrupt(&g_adcch_io_adc5_conf);
	adcch_enable_interrupt(&g_adcch_temp_conf);

	/* Execute the new settings */
	adc_write_configuration(&ADCA,											&g_adc_a_conf);
    6d42:	f3 01       	movw	r30, r6
    6d44:	82 83       	std	Z+2, r24	; 0x02
    6d46:	62 ed       	ldi	r22, 0xD2	; 210
    6d48:	78 e2       	ldi	r23, 0x28	; 40
    6d4a:	80 e0       	ldi	r24, 0x00	; 0
    6d4c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO_5V0_VBAT,	ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    6d4e:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <adc_write_configuration>
    6d52:	a6 01       	movw	r20, r12
    6d54:	61 e0       	ldi	r22, 0x01	; 1
    6d56:	80 e0       	ldi	r24, 0x00	; 0
    6d58:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4,			ADC_IO_ADC4_CH,			&g_adcch_io_adc4_conf);
    6d5a:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <adcch_write_configuration>
    6d5e:	a4 01       	movw	r20, r8
    6d60:	62 e0       	ldi	r22, 0x02	; 2
    6d62:	80 e0       	ldi	r24, 0x00	; 0
    6d64:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5,			ADC_IO_ADC5_CH,			&g_adcch_io_adc5_conf);
    6d66:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <adcch_write_configuration>
    6d6a:	a5 01       	movw	r20, r10
    6d6c:	64 e0       	ldi	r22, 0x04	; 4
    6d6e:	80 e0       	ldi	r24, 0x00	; 0
    6d70:	92 e0       	ldi	r25, 0x02	; 2
	adc_write_configuration(&ADCB,											&g_adc_b_conf);
    6d72:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <adcch_write_configuration>
    6d76:	6f eb       	ldi	r22, 0xBF	; 191
    6d78:	78 e2       	ldi	r23, 0x28	; 40
    6d7a:	80 e4       	ldi	r24, 0x40	; 64
    6d7c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_TEMP,			ADC_TEMP_CH,			&g_adcch_temp_conf);
    6d7e:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <adc_write_configuration>
    6d82:	a3 01       	movw	r20, r6
    6d84:	61 e0       	ldi	r22, 0x01	; 1
    6d86:	80 e4       	ldi	r24, 0x40	; 64
    6d88:	92 e0       	ldi	r25, 0x02	; 2
    6d8a:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <adcch_write_configuration>
    6d8e:	61 e2       	ldi	r22, 0x21	; 33
    6d90:	70 e0       	ldi	r23, 0x00	; 0
    6d92:	82 e0       	ldi	r24, 0x02	; 2
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    6d94:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
		data <<= 8;
    6d98:	c8 2e       	mov	r12, r24
    6d9a:	d1 2c       	mov	r13, r1
    6d9c:	dc 2c       	mov	r13, r12
    6d9e:	cc 24       	eor	r12, r12
    6da0:	60 e2       	ldi	r22, 0x20	; 32
    6da2:	70 e0       	ldi	r23, 0x00	; 0
    6da4:	82 e0       	ldi	r24, 0x02	; 2
		data |= nvm_read_production_signature_row(ADCACAL0);
    6da6:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>

	/* Get production signature for calibration */
	ADCA_CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    6daa:	c8 2a       	or	r12, r24
    6dac:	c0 92 0c 02 	sts	0x020C, r12	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    6db0:	d0 92 0d 02 	sts	0x020D, r13	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    6db4:	65 e2       	ldi	r22, 0x25	; 37
    6db6:	70 e0       	ldi	r23, 0x00	; 0
    6db8:	82 e0       	ldi	r24, 0x02	; 2
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    6dba:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
		data <<= 8;
    6dbe:	c8 2e       	mov	r12, r24
    6dc0:	d1 2c       	mov	r13, r1
    6dc2:	dc 2c       	mov	r13, r12
    6dc4:	cc 24       	eor	r12, r12
    6dc6:	64 e2       	ldi	r22, 0x24	; 36
    6dc8:	70 e0       	ldi	r23, 0x00	; 0
    6dca:	82 e0       	ldi	r24, 0x02	; 2
		data |= nvm_read_production_signature_row(ADCBCAL0);
    6dcc:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
	ADCB_CAL = adc_get_calibration_data(ADC_CAL_ADCB);
    6dd0:	c8 2a       	or	r12, r24
    6dd2:	c0 92 4c 02 	sts	0x024C, r12	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
static void isr_dma_dac_ch0_B(enum dma_channel_status status);
static void task_dac(uint32_t now);

static void dac_init(void)
{
	dac_read_configuration(&DAC_DAC, &dac_conf);
    6dd6:	d0 92 4d 02 	sts	0x024D, r13	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
    6dda:	6f e5       	ldi	r22, 0x5F	; 95
    6ddc:	78 e2       	ldi	r23, 0x28	; 40
    6dde:	80 e2       	ldi	r24, 0x20	; 32
    6de0:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    6de2:	0e 94 3f 20 	call	0x407e	; 0x407e <dac_read_configuration>
    6de6:	ef e5       	ldi	r30, 0x5F	; 95
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    6de8:	f8 e2       	ldi	r31, 0x28	; 40
    6dea:	52 82       	std	Z+2, r5	; 0x02
    6dec:	0f 2e       	mov	r0, r31
    6dee:	fc e0       	ldi	r31, 0x0C	; 12
    6df0:	7f 2e       	mov	r7, r31
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    6df2:	f0 2d       	mov	r31, r0
    6df4:	70 82       	st	Z, r7
    6df6:	81 81       	ldd	r24, Z+1	; 0x01
    6df8:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    6dfa:	83 64       	ori	r24, 0x43	; 67
    6dfc:	81 83       	std	Z+1, r24	; 0x01
	dac_set_conversion_parameters(&dac_conf, DAC_REF_BANDGAP, DAC_ADJ_LEFT);
	dac_set_active_channel(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 0);
	dac_set_conversion_trigger(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 4);
	dac_write_configuration(&DAC_DAC, &dac_conf);
    6dfe:	84 e0       	ldi	r24, 0x04	; 4
    6e00:	83 83       	std	Z+3, r24	; 0x03
    6e02:	bf 01       	movw	r22, r30
    6e04:	80 e2       	ldi	r24, 0x20	; 32
    6e06:	93 e0       	ldi	r25, 0x03	; 3
    6e08:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <dac_write_configuration>
    6e0c:	62 e3       	ldi	r22, 0x32	; 50
    6e0e:	70 e0       	ldi	r23, 0x00	; 0
    6e10:	82 e0       	ldi	r24, 0x02	; 2

	/* Get production signature for calibration */
	DACB_CH0OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB0_OFFSET);
    6e12:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
    6e16:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    6e1a:	63 e3       	ldi	r22, 0x33	; 51
    6e1c:	70 e0       	ldi	r23, 0x00	; 0
    6e1e:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH0GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB0_GAIN);
    6e20:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
    6e24:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    6e28:	66 e3       	ldi	r22, 0x36	; 54
    6e2a:	70 e0       	ldi	r23, 0x00	; 0
    6e2c:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH1OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB1_OFFSET);
    6e2e:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
    6e32:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    6e36:	67 e3       	ldi	r22, 0x37	; 55
    6e38:	70 e0       	ldi	r23, 0x00	; 0
    6e3a:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH1GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB1_GAIN);
    6e3c:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
	}
}

static void dma_init(void)
{
	memset(&dmach_dma0_conf, 0, sizeof(dmach_dma0_conf));	// DACB channel 0 - linked with dma1
    6e40:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
    6e44:	0f 2e       	mov	r0, r31
    6e46:	f4 e5       	ldi	r31, 0x54	; 84
    6e48:	af 2e       	mov	r10, r31
    6e4a:	f8 e2       	ldi	r31, 0x28	; 40
    6e4c:	bf 2e       	mov	r11, r31
    6e4e:	f0 2d       	mov	r31, r0
    6e50:	d5 01       	movw	r26, r10
    6e52:	e4 2d       	mov	r30, r4
    6e54:	1d 92       	st	X+, r1
	memset(&dmach_dma1_conf, 0, sizeof(dmach_dma1_conf));	// DACB channel 0 - linked with dma0
    6e56:	ea 95       	dec	r30
    6e58:	e9 f7       	brne	.-6      	; 0x6e54 <main+0x3b4>
    6e5a:	0f 2e       	mov	r0, r31
    6e5c:	f9 e4       	ldi	r31, 0x49	; 73
    6e5e:	cf 2e       	mov	r12, r31
    6e60:	f8 e2       	ldi	r31, 0x28	; 40
    6e62:	df 2e       	mov	r13, r31
    6e64:	f0 2d       	mov	r31, r0
    6e66:	d6 01       	movw	r26, r12
    6e68:	1d 92       	st	X+, r1
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
    6e6a:	4a 94       	dec	r4
    6e6c:	e9 f7       	brne	.-6      	; 0x6e68 <main+0x3c8>
    6e6e:	81 2c       	mov	r8, r1
    6e70:	99 24       	eor	r9, r9
    6e72:	93 94       	inc	r9
    6e74:	f5 01       	movw	r30, r10
    6e76:	84 82       	std	Z+4, r8	; 0x04
    6e78:	95 82       	std	Z+5, r9	; 0x05
    6e7a:	d6 01       	movw	r26, r12
    6e7c:	14 96       	adiw	r26, 0x04	; 4
    6e7e:	8d 92       	st	X+, r8
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    6e80:	9c 92       	st	X, r9
    6e82:	15 97       	sbiw	r26, 0x05	; 5
    6e84:	8d e3       	ldi	r24, 0x3D	; 61
    6e86:	96 e2       	ldi	r25, 0x26	; 38
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    6e88:	87 83       	std	Z+7, r24	; 0x07
    6e8a:	90 87       	std	Z+8, r25	; 0x08
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    6e8c:	29 ed       	ldi	r18, 0xD9	; 217
    6e8e:	22 83       	std	Z+2, r18	; 0x02
    6e90:	88 e3       	ldi	r24, 0x38	; 56
    6e92:	93 e0       	ldi	r25, 0x03	; 3
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    6e94:	81 87       	std	Z+9, r24	; 0x09
    6e96:	92 87       	std	Z+10, r25	; 0x0a
    6e98:	4d e3       	ldi	r20, 0x3D	; 61
    6e9a:	57 e2       	ldi	r21, 0x27	; 39
    6e9c:	17 96       	adiw	r26, 0x07	; 7
    6e9e:	4d 93       	st	X+, r20
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    6ea0:	5c 93       	st	X, r21
    6ea2:	18 97       	sbiw	r26, 0x08	; 8
    6ea4:	12 96       	adiw	r26, 0x02	; 2
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    6ea6:	2c 93       	st	X, r18
    6ea8:	12 97       	sbiw	r26, 0x02	; 2
    6eaa:	19 96       	adiw	r26, 0x09	; 9
    6eac:	8d 93       	st	X+, r24
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    6eae:	9c 93       	st	X, r25
    6eb0:	1a 97       	sbiw	r26, 0x0a	; 10
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    6eb2:	95 e2       	ldi	r25, 0x25	; 37
    6eb4:	93 83       	std	Z+3, r25	; 0x03
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    6eb6:	86 e0       	ldi	r24, 0x06	; 6
    6eb8:	80 83       	st	Z, r24
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    6eba:	13 96       	adiw	r26, 0x03	; 3
	dma_channel_set_single_shot(&dmach_dma0_conf);

	dma_channel_set_trigger_source(&dmach_dma1_conf, DMA_CH_TRIGSRC_DACB_CH0_gc);
	dma_channel_set_single_shot(&dmach_dma1_conf);

	task_dac(rtc_get_time());																		// Calculate DDS increments
    6ebc:	9c 93       	st	X, r25
    6ebe:	13 97       	sbiw	r26, 0x03	; 3
    6ec0:	8c 93       	st	X, r24
    6ec2:	0e 94 ae 12 	call	0x255c	; 0x255c <rtc_get_time>
	tc_init();			// Timers
	adc_init();			// ADC
#ifdef USE_DAC
	dac_init();			// DAC
#endif
	twi_init();			// I2C / TWI
    6ec6:	83 dc       	rcall	.-1786   	; 0x67ce <task_dac>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    6ec8:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <twi_init>

	nvm_init(INT_FLASH);
    6ecc:	0e 94 42 1c 	call	0x3884	; 0x3884 <board_init>
    6ed0:	80 e0       	ldi	r24, 0x00	; 0

	/* All interrupt sources & PMIC are prepared until here - IRQ activation follows */
	cpu_irq_enable();
    6ed2:	0e 94 2f 11 	call	0x225e	; 0x225e <nvm_init>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    6ed6:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    6ed8:	f8 01       	movw	r30, r16
    6eda:	80 81       	ld	r24, Z
    6edc:	80 7f       	andi	r24, 0xF0	; 240

static void tc_start(void)
{
	/* ADC clock */
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc);							// VCTCXO PWM start, output still is Z-state
	tc_set_overflow_interrupt_callback(&TCC0, isr_tcc0_ovfl);
    6ede:	81 60       	ori	r24, 0x01	; 1
    6ee0:	80 83       	st	Z, r24
    6ee2:	66 e4       	ldi	r22, 0x46	; 70
    6ee4:	74 e3       	ldi	r23, 0x34	; 52
    6ee6:	80 e0       	ldi	r24, 0x00	; 0
    6ee8:	98 e0       	ldi	r25, 0x08	; 8
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    6eea:	0e 94 41 27 	call	0x4e82	; 0x4e82 <tc_set_overflow_interrupt_callback>
    6eee:	d8 01       	movw	r26, r16
    6ef0:	16 96       	adiw	r26, 0x06	; 6
    6ef2:	8c 91       	ld	r24, X
    6ef4:	16 97       	sbiw	r26, 0x06	; 6
    6ef6:	8c 7f       	andi	r24, 0xFC	; 252
    6ef8:	16 96       	adiw	r26, 0x06	; 6
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    6efa:	8c 93       	st	X, r24
    6efc:	16 97       	sbiw	r26, 0x06	; 6
    6efe:	16 96       	adiw	r26, 0x06	; 6
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    6f00:	8c 91       	ld	r24, X
    6f02:	16 97       	sbiw	r26, 0x06	; 6
    6f04:	81 60       	ori	r24, 0x01	; 1
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    6f06:	16 96       	adiw	r26, 0x06	; 6
    6f08:	8c 93       	st	X, r24
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    6f0a:	f7 01       	movw	r30, r14
    6f0c:	80 81       	ld	r24, Z
    6f0e:	80 7f       	andi	r24, 0xF0	; 240
	dma_init();
}

static void dac_start(void)
{
	dac_enable(&DACB);
    6f10:	81 60       	ori	r24, 0x01	; 1
    6f12:	80 83       	st	Z, r24
    6f14:	80 e2       	ldi	r24, 0x20	; 32
    6f16:	93 e0       	ldi	r25, 0x03	; 3
	task_dac(rtc_get_time());																		// Calculate DDS increments
}

static void dma_start(void)
{
	dma_enable();
    6f18:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <dac_enable>

	dma_set_callback(DMA_CHANNEL_DACB_CH0_A, isr_dma_dac_ch0_A);
    6f1c:	0e 94 95 11 	call	0x232a	; 0x232a <dma_enable>
    6f20:	6d e1       	ldi	r22, 0x1D	; 29
    6f22:	75 e3       	ldi	r23, 0x35	; 53
    6f24:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline void dma_channel_set_interrupt_level(struct dma_channel_config
		*config, enum dma_int_level_t level)
{
	config->ctrlb &= ~(DMA_CH_ERRINTLVL_gm | DMA_CH_TRNINTLVL_gm);
	config->ctrlb |= (level << DMA_CH_ERRINTLVL_gp)
    6f26:	0e 94 b7 11 	call	0x236e	; 0x236e <dma_set_callback>
    6f2a:	d5 01       	movw	r26, r10
    6f2c:	11 96       	adiw	r26, 0x01	; 1
    6f2e:	8c 91       	ld	r24, X
    6f30:	11 97       	sbiw	r26, 0x01	; 1
    6f32:	80 7f       	andi	r24, 0xF0	; 240
    6f34:	8a 60       	ori	r24, 0x0A	; 10
	dma_channel_set_interrupt_level(&dmach_dma0_conf, DMA_INT_LVL_MED);

	dma_set_callback(DMA_CHANNEL_DACB_CH0_B, isr_dma_dac_ch0_B);
    6f36:	11 96       	adiw	r26, 0x01	; 1
    6f38:	8c 93       	st	X, r24
    6f3a:	6a ef       	ldi	r22, 0xFA	; 250
    6f3c:	74 e3       	ldi	r23, 0x34	; 52
    6f3e:	81 e0       	ldi	r24, 0x01	; 1
    6f40:	0e 94 b7 11 	call	0x236e	; 0x236e <dma_set_callback>
    6f44:	f6 01       	movw	r30, r12
    6f46:	81 81       	ldd	r24, Z+1	; 0x01
    6f48:	80 7f       	andi	r24, 0xF0	; 240

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6f4a:	8a 60       	ori	r24, 0x0A	; 10
    6f4c:	81 83       	std	Z+1, r24	; 0x01
	cpu_irq_disable();
    6f4e:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    6f50:	8b 87       	std	Y+11, r24	; 0x0b
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_PRIMODE_gm) | primode;
    6f52:	f8 94       	cli
    6f54:	9b 85       	ldd	r25, Y+11	; 0x0b
    6f56:	d4 01       	movw	r26, r8
    6f58:	8c 91       	ld	r24, X
    6f5a:	8c 7f       	andi	r24, 0xFC	; 252
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6f5c:	82 60       	ori	r24, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6f5e:	8c 93       	st	X, r24
    6f60:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_disable();
    6f62:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    6f64:	8a 87       	std	Y+10, r24	; 0x0a
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_DBUFMODE_gm) | dbufmode;
    6f66:	f8 94       	cli
    6f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f6a:	f4 01       	movw	r30, r8
    6f6c:	80 81       	ld	r24, Z
    6f6e:	83 7f       	andi	r24, 0xF3	; 243
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6f70:	84 60       	ori	r24, 0x04	; 4
	dma_channel_set_interrupt_level(&dmach_dma1_conf, DMA_INT_LVL_MED);

	dma_set_priority_mode(DMA_PRIMODE_CH01RR23_gc);
	dma_set_double_buffer_mode(DMA_DBUFMODE_CH01_gc);

	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_A, &dmach_dma0_conf);
    6f72:	80 83       	st	Z, r24
    6f74:	9f bf       	out	0x3f, r25	; 63
    6f76:	b5 01       	movw	r22, r10
    6f78:	80 e0       	ldi	r24, 0x00	; 0
	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_B, &dmach_dma1_conf);
    6f7a:	0e 94 60 12 	call	0x24c0	; 0x24c0 <dma_channel_write_config>
    6f7e:	b6 01       	movw	r22, r12
    6f80:	81 e0       	ldi	r24, 0x01	; 1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6f82:	0e 94 60 12 	call	0x24c0	; 0x24c0 <dma_channel_write_config>
	cpu_irq_disable();
    6f86:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    6f88:	8d 87       	std	Y+13, r24	; 0x0d
	/* IRQ disabled section */
	{
		irqflags_t flags = cpu_irq_save();

		/* Prepare DMA blocks */
		calc_next_frame(&dac_io_dac0_buf[0][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    6f8a:	f8 94       	cli
    6f8c:	fd 84       	ldd	r15, Y+13	; 0x0d
    6f8e:	0d e3       	ldi	r16, 0x3D	; 61
    6f90:	18 e2       	ldi	r17, 0x28	; 40
    6f92:	27 e0       	ldi	r18, 0x07	; 7
    6f94:	30 e2       	ldi	r19, 0x20	; 32
    6f96:	45 e4       	ldi	r20, 0x45	; 69
    6f98:	58 e2       	ldi	r21, 0x28	; 40
    6f9a:	61 e4       	ldi	r22, 0x41	; 65
    6f9c:	78 e2       	ldi	r23, 0x28	; 40
    6f9e:	8d e3       	ldi	r24, 0x3D	; 61
		calc_next_frame(&dac_io_dac0_buf[1][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    6fa0:	96 e2       	ldi	r25, 0x26	; 38
    6fa2:	d0 dc       	rcall	.-1632   	; 0x6944 <calc_next_frame>
    6fa4:	27 e0       	ldi	r18, 0x07	; 7
    6fa6:	30 e2       	ldi	r19, 0x20	; 32
    6fa8:	45 e4       	ldi	r20, 0x45	; 69
    6faa:	58 e2       	ldi	r21, 0x28	; 40
    6fac:	61 e4       	ldi	r22, 0x41	; 65
    6fae:	78 e2       	ldi	r23, 0x28	; 40
    6fb0:	8d e3       	ldi	r24, 0x3D	; 61

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6fb2:	97 e2       	ldi	r25, 0x27	; 39
    6fb4:	c7 dc       	rcall	.-1650   	; 0x6944 <calc_next_frame>
	cpu_irq_disable();
    6fb6:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    6fb8:	8c 87       	std	Y+12, r24	; 0x0c
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    6fba:	f8 94       	cli
    6fbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    6fbe:	e0 e1       	ldi	r30, 0x10	; 16
    6fc0:	f1 e0       	ldi	r31, 0x01	; 1
    6fc2:	80 81       	ld	r24, Z
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6fc4:	80 68       	ori	r24, 0x80	; 128
    6fc6:	80 83       	st	Z, r24
}

static void adc_start(void)
{
	/* Power up after configurations are being set */
	adc_enable(&ADCA);
    6fc8:	9f bf       	out	0x3f, r25	; 63
    6fca:	ff be       	out	0x3f, r15	; 63
    6fcc:	80 e0       	ldi	r24, 0x00	; 0
	adc_enable(&ADCB);
    6fce:	92 e0       	ldi	r25, 0x02	; 2
    6fd0:	0e 94 a3 1c 	call	0x3946	; 0x3946 <adc_enable>
    6fd4:	80 e4       	ldi	r24, 0x40	; 64
}


static void usb_init(void)
{
	udc_start();
    6fd6:	92 e0       	ldi	r25, 0x02	; 2

#if 1
	stdio_usb_init();	// Init and enable stdio_usb
    6fd8:	0e 94 a3 1c 	call	0x3946	; 0x3946 <adc_enable>
	stdio_usb_enable();
    6fdc:	68 d7       	rcall	.+3792   	; 0x7eae <udc_start>
	delay_ms(140);
    6fde:	0e 94 ab 42 	call	0x8556	; 0x8556 <stdio_usb_init>
    6fe2:	0e 94 a7 42 	call	0x854e	; 0x854e <stdio_usb_enable>
    6fe6:	61 e6       	ldi	r22, 0x61	; 97
    6fe8:	7e ea       	ldi	r23, 0xAE	; 174

	printf("%c\r\n", 0x0c);
    6fea:	8a e0       	ldi	r24, 0x0A	; 10
    6fec:	90 e0       	ldi	r25, 0x00	; 0
    6fee:	3b da       	rcall	.-2954   	; 0x6466 <__portable_avr_delay_cycles>
    6ff0:	1f 92       	push	r1
    6ff2:	7f 92       	push	r7
    6ff4:	85 e8       	ldi	r24, 0x85	; 133
    6ff6:	93 e2       	ldi	r25, 0x23	; 35
    6ff8:	9f 93       	push	r25
	printf("===============================\r\n");
    6ffa:	8f 93       	push	r24
    6ffc:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <printf>
    7000:	8a e8       	ldi	r24, 0x8A	; 138
	printf("FindMeSAT - USB logging started\r\n");
    7002:	93 e2       	ldi	r25, 0x23	; 35
    7004:	0e 94 63 46 	call	0x8cc6	; 0x8cc6 <puts>
    7008:	8b ea       	ldi	r24, 0xAB	; 171
	printf("===============================\r\n\r\n");
    700a:	93 e2       	ldi	r25, 0x23	; 35
    700c:	0e 94 63 46 	call	0x8cc6	; 0x8cc6 <puts>
    7010:	8c ec       	ldi	r24, 0xCC	; 204

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB

	/* Start TWI channels */
	twi_start();		// Start TWI
    7012:	93 e2       	ldi	r25, 0x23	; 35
    7014:	0e 94 63 46 	call	0x8cc6	; 0x8cc6 <puts>

	/* The application code */
	runmode = 1;
    7018:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <twi_start>
    701c:	50 92 03 29 	sts	0x2903, r5	; 0x802903 <runmode>
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    7020:	0f 90       	pop	r0
    7022:	0f 90       	pop	r0
    7024:	0f 90       	pop	r0
    7026:	0f 90       	pop	r0
	}
}

static void task(void)
{
	uint32_t now = rtc_get_time();
    7028:	0f 2e       	mov	r0, r31
    702a:	f8 e4       	ldi	r31, 0x48	; 72
    702c:	2f 2e       	mov	r2, r31
    702e:	31 2c       	mov	r3, r1

	/* TASK when woken up and all ISRs are done */
	task_dac(now);
    7030:	f0 2d       	mov	r31, r0
    7032:	0e 94 ae 12 	call	0x255c	; 0x255c <rtc_get_time>

static void task_adc(uint32_t now)
{	/* Calculations of the ADC values for the presentation layer */
	static uint32_t adc_last = 0;

	if ((now - adc_last) >= 512 || (now < adc_last)) {
    7036:	6b 01       	movw	r12, r22
    7038:	7c 01       	movw	r14, r24
    703a:	c9 db       	rcall	.-2158   	; 0x67ce <task_dac>
    703c:	80 91 29 26 	lds	r24, 0x2629	; 0x802629 <adc_last.7480>
    7040:	90 91 2a 26 	lds	r25, 0x262A	; 0x80262a <adc_last.7480+0x1>
    7044:	a0 91 2b 26 	lds	r26, 0x262B	; 0x80262b <adc_last.7480+0x2>
    7048:	b0 91 2c 26 	lds	r27, 0x262C	; 0x80262c <adc_last.7480+0x3>
    704c:	b7 01       	movw	r22, r14
    704e:	a6 01       	movw	r20, r12
    7050:	48 1b       	sub	r20, r24
    7052:	59 0b       	sbc	r21, r25
    7054:	6a 0b       	sbc	r22, r26
    7056:	7b 0b       	sbc	r23, r27
    7058:	41 15       	cp	r20, r1
    705a:	52 40       	sbci	r21, 0x02	; 2
    705c:	61 05       	cpc	r22, r1
    705e:	71 05       	cpc	r23, r1
    7060:	30 f4       	brcc	.+12     	; 0x706e <main+0x5ce>
    7062:	c8 16       	cp	r12, r24
    7064:	d9 06       	cpc	r13, r25
		adc_last = now;
    7066:	ea 06       	cpc	r14, r26
    7068:	fb 06       	cpc	r15, r27
    706a:	08 f0       	brcs	.+2      	; 0x706e <main+0x5ce>
    706c:	06 c1       	rjmp	.+524    	; 0x727a <main+0x7da>
    706e:	c0 92 29 26 	sts	0x2629, r12	; 0x802629 <adc_last.7480>
    7072:	d0 92 2a 26 	sts	0x262A, r13	; 0x80262a <adc_last.7480+0x1>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7076:	e0 92 2b 26 	sts	0x262B, r14	; 0x80262b <adc_last.7480+0x2>
	cpu_irq_disable();
    707a:	f0 92 2c 26 	sts	0x262C, r15	; 0x80262c <adc_last.7480+0x3>

		irqflags_t flags = cpu_irq_save();
		int32_t l_adc_vctcxo_cur	= g_adc_vctcxo_cur;
    707e:	8f b7       	in	r24, 0x3f	; 63
    7080:	88 87       	std	Y+8, r24	; 0x08
    7082:	f8 94       	cli
    7084:	68 85       	ldd	r22, Y+8	; 0x08
    7086:	20 91 b7 28 	lds	r18, 0x28B7	; 0x8028b7 <g_adc_vctcxo_cur>
    708a:	30 91 b8 28 	lds	r19, 0x28B8	; 0x8028b8 <g_adc_vctcxo_cur+0x1>
		int32_t l_adc_5v0_cur		= g_adc_5v0_cur;
    708e:	40 91 b9 28 	lds	r20, 0x28B9	; 0x8028b9 <g_adc_vctcxo_cur+0x2>
    7092:	50 91 ba 28 	lds	r21, 0x28BA	; 0x8028ba <g_adc_vctcxo_cur+0x3>
    7096:	40 90 ad 28 	lds	r4, 0x28AD	; 0x8028ad <g_adc_5v0_cur>
    709a:	50 90 ae 28 	lds	r5, 0x28AE	; 0x8028ae <g_adc_5v0_cur+0x1>
		int32_t l_adc_vbat_cur		= g_adc_vbat_cur;
    709e:	60 90 af 28 	lds	r6, 0x28AF	; 0x8028af <g_adc_5v0_cur+0x2>
    70a2:	70 90 b0 28 	lds	r7, 0x28B0	; 0x8028b0 <g_adc_5v0_cur+0x3>
    70a6:	80 90 a3 28 	lds	r8, 0x28A3	; 0x8028a3 <g_adc_vbat_cur>
    70aa:	90 90 a4 28 	lds	r9, 0x28A4	; 0x8028a4 <g_adc_vbat_cur+0x1>
		int32_t l_adc_io_adc4_cur	= g_adc_io_adc4_cur;
    70ae:	a0 90 a5 28 	lds	r10, 0x28A5	; 0x8028a5 <g_adc_vbat_cur+0x2>
    70b2:	b0 90 a6 28 	lds	r11, 0x28A6	; 0x8028a6 <g_adc_vbat_cur+0x3>
    70b6:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <g_adc_io_adc4_cur>
    70ba:	90 91 9a 28 	lds	r25, 0x289A	; 0x80289a <g_adc_io_adc4_cur+0x1>
    70be:	a0 91 9b 28 	lds	r26, 0x289B	; 0x80289b <g_adc_io_adc4_cur+0x2>
    70c2:	b0 91 9c 28 	lds	r27, 0x289C	; 0x80289c <g_adc_io_adc4_cur+0x3>
		int32_t l_adc_io_adc5_cur	= g_adc_io_adc5_cur;
    70c6:	8e 87       	std	Y+14, r24	; 0x0e
    70c8:	9f 87       	std	Y+15, r25	; 0x0f
    70ca:	a8 8b       	std	Y+16, r26	; 0x10
    70cc:	b9 8b       	std	Y+17, r27	; 0x11
    70ce:	80 91 8f 28 	lds	r24, 0x288F	; 0x80288f <g_adc_io_adc5_cur>
    70d2:	90 91 90 28 	lds	r25, 0x2890	; 0x802890 <g_adc_io_adc5_cur+0x1>
    70d6:	a0 91 91 28 	lds	r26, 0x2891	; 0x802891 <g_adc_io_adc5_cur+0x2>
    70da:	b0 91 92 28 	lds	r27, 0x2892	; 0x802892 <g_adc_io_adc5_cur+0x3>
		int32_t l_adc_temp_cur		= g_adc_temp_cur;
    70de:	8a 8b       	std	Y+18, r24	; 0x12
    70e0:	9b 8b       	std	Y+19, r25	; 0x13
    70e2:	ac 8b       	std	Y+20, r26	; 0x14
    70e4:	bd 8b       	std	Y+21, r27	; 0x15
    70e6:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <g_adc_temp_cur>
    70ea:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <g_adc_temp_cur+0x1>
    70ee:	a0 91 87 28 	lds	r26, 0x2887	; 0x802887 <g_adc_temp_cur+0x2>
    70f2:	b0 91 88 28 	lds	r27, 0x2888	; 0x802888 <g_adc_temp_cur+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    70f6:	8e 8b       	std	Y+22, r24	; 0x16

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    70f8:	9f 8b       	std	Y+23, r25	; 0x17
    70fa:	a8 8f       	std	Y+24, r26	; 0x18
	cpu_irq_disable();
    70fc:	b9 8f       	std	Y+25, r27	; 0x19
	return flags;
    70fe:	6f bf       	out	0x3f, r22	; 63
		int16_t l_adc_io_adc4_volt_1000	= (uint16_t) (((  1000 * l_adc_io_adc4_cur) / ((float)C_ADC_STEPS)) * C_VCC_3V0_AREF_VOLTS                    );
		int16_t l_adc_io_adc5_volt_1000	= (uint16_t) (((  1000 * l_adc_io_adc5_cur) / ((float)C_ADC_STEPS)) * C_VCC_3V0_AREF_VOLTS                    );
		int16_t l_adc_temp_deg_100		= (uint16_t) ((((  100 * l_adc_temp_cur   ) / ((float)C_ADC_STEPS))                        * C_TEMPSENSE_MULT )  -  100 * C_0DEGC_K);

		flags = cpu_irq_save();
		g_adc_vctcxo_volt_1000	= l_adc_vctcxo_volt_1000;
    7100:	8f b7       	in	r24, 0x3f	; 63
    7102:	89 83       	std	Y+1, r24	; 0x01
    7104:	f8 94       	cli
    7106:	19 81       	ldd	r17, Y+1	; 0x01
    7108:	a8 ee       	ldi	r26, 0xE8	; 232
    710a:	b3 e0       	ldi	r27, 0x03	; 3
    710c:	0e 94 6f 43 	call	0x86de	; 0x86de <__muluhisi3>
    7110:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <__floatsisf>
    7114:	20 e0       	ldi	r18, 0x00	; 0
    7116:	30 e0       	ldi	r19, 0x00	; 0
    7118:	40 e0       	ldi	r20, 0x00	; 0
    711a:	59 e3       	ldi	r21, 0x39	; 57
    711c:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    7120:	20 e0       	ldi	r18, 0x00	; 0
    7122:	30 e0       	ldi	r19, 0x00	; 0
    7124:	40 e4       	ldi	r20, 0x40	; 64
    7126:	50 e4       	ldi	r21, 0x40	; 64
    7128:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    712c:	20 e0       	ldi	r18, 0x00	; 0
    712e:	30 e0       	ldi	r19, 0x00	; 0
    7130:	4c e3       	ldi	r20, 0x3C	; 60
    7132:	52 e4       	ldi	r21, 0x42	; 66
    7134:	0e 94 13 44 	call	0x8826	; 0x8826 <__subsf3>
    7138:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixunssfsi>
		g_adc_5v0_volt_1000		= l_adc_5v0_volt_1000;
    713c:	60 93 7d 28 	sts	0x287D, r22	; 0x80287d <g_adc_vctcxo_volt_1000>
    7140:	70 93 7e 28 	sts	0x287E, r23	; 0x80287e <g_adc_vctcxo_volt_1000+0x1>
    7144:	a8 ee       	ldi	r26, 0xE8	; 232
    7146:	b3 e0       	ldi	r27, 0x03	; 3
    7148:	a3 01       	movw	r20, r6
    714a:	92 01       	movw	r18, r4
    714c:	0e 94 6f 43 	call	0x86de	; 0x86de <__muluhisi3>
    7150:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <__floatsisf>
    7154:	20 e0       	ldi	r18, 0x00	; 0
    7156:	30 e0       	ldi	r19, 0x00	; 0
    7158:	40 e0       	ldi	r20, 0x00	; 0
    715a:	59 e3       	ldi	r21, 0x39	; 57
    715c:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    7160:	20 e0       	ldi	r18, 0x00	; 0
    7162:	30 e0       	ldi	r19, 0x00	; 0
    7164:	40 e4       	ldi	r20, 0x40	; 64
    7166:	50 e4       	ldi	r21, 0x40	; 64
    7168:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    716c:	29 ed       	ldi	r18, 0xD9	; 217
    716e:	38 ed       	ldi	r19, 0xD8	; 216
    7170:	4a e1       	ldi	r20, 0x1A	; 26
    7172:	50 e4       	ldi	r21, 0x40	; 64
    7174:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    7178:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixunssfsi>
		g_adc_vbat_volt_1000	= l_adc_vbat_volt_1000;
    717c:	60 93 7b 28 	sts	0x287B, r22	; 0x80287b <g_adc_5v0_volt_1000>
    7180:	70 93 7c 28 	sts	0x287C, r23	; 0x80287c <g_adc_5v0_volt_1000+0x1>
    7184:	a8 ee       	ldi	r26, 0xE8	; 232
    7186:	b3 e0       	ldi	r27, 0x03	; 3
    7188:	a5 01       	movw	r20, r10
    718a:	94 01       	movw	r18, r8
    718c:	0e 94 6f 43 	call	0x86de	; 0x86de <__muluhisi3>
    7190:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <__floatsisf>
    7194:	20 e0       	ldi	r18, 0x00	; 0
    7196:	30 e0       	ldi	r19, 0x00	; 0
    7198:	40 e0       	ldi	r20, 0x00	; 0
    719a:	59 e3       	ldi	r21, 0x39	; 57
    719c:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    71a0:	20 e0       	ldi	r18, 0x00	; 0
    71a2:	30 e0       	ldi	r19, 0x00	; 0
    71a4:	40 e4       	ldi	r20, 0x40	; 64
    71a6:	50 e4       	ldi	r21, 0x40	; 64
    71a8:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    71ac:	23 ee       	ldi	r18, 0xE3	; 227
    71ae:	35 e4       	ldi	r19, 0x45	; 69
    71b0:	4b e1       	ldi	r20, 0x1B	; 27
    71b2:	50 e4       	ldi	r21, 0x40	; 64
    71b4:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    71b8:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixunssfsi>
		g_adc_io_adc4_volt_1000	= l_adc_io_adc4_volt_1000;
    71bc:	60 93 79 28 	sts	0x2879, r22	; 0x802879 <g_adc_vbat_volt_1000>
    71c0:	70 93 7a 28 	sts	0x287A, r23	; 0x80287a <g_adc_vbat_volt_1000+0x1>
    71c4:	a8 ee       	ldi	r26, 0xE8	; 232
    71c6:	b3 e0       	ldi	r27, 0x03	; 3
    71c8:	2e 85       	ldd	r18, Y+14	; 0x0e
    71ca:	3f 85       	ldd	r19, Y+15	; 0x0f
    71cc:	48 89       	ldd	r20, Y+16	; 0x10
    71ce:	59 89       	ldd	r21, Y+17	; 0x11
    71d0:	0e 94 6f 43 	call	0x86de	; 0x86de <__muluhisi3>
    71d4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <__floatsisf>
    71d8:	20 e0       	ldi	r18, 0x00	; 0
    71da:	30 e0       	ldi	r19, 0x00	; 0
    71dc:	40 e0       	ldi	r20, 0x00	; 0
    71de:	59 e3       	ldi	r21, 0x39	; 57
    71e0:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    71e4:	20 e0       	ldi	r18, 0x00	; 0
    71e6:	30 e0       	ldi	r19, 0x00	; 0
    71e8:	40 e4       	ldi	r20, 0x40	; 64
    71ea:	50 e4       	ldi	r21, 0x40	; 64
    71ec:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    71f0:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixunssfsi>
		g_adc_io_adc5_volt_1000	= l_adc_io_adc5_volt_1000;
    71f4:	60 93 77 28 	sts	0x2877, r22	; 0x802877 <g_adc_io_adc4_volt_1000>
    71f8:	70 93 78 28 	sts	0x2878, r23	; 0x802878 <g_adc_io_adc4_volt_1000+0x1>
    71fc:	a8 ee       	ldi	r26, 0xE8	; 232
    71fe:	b3 e0       	ldi	r27, 0x03	; 3
    7200:	2a 89       	ldd	r18, Y+18	; 0x12
    7202:	3b 89       	ldd	r19, Y+19	; 0x13
    7204:	4c 89       	ldd	r20, Y+20	; 0x14
    7206:	5d 89       	ldd	r21, Y+21	; 0x15
    7208:	0e 94 6f 43 	call	0x86de	; 0x86de <__muluhisi3>
    720c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <__floatsisf>
    7210:	20 e0       	ldi	r18, 0x00	; 0
    7212:	30 e0       	ldi	r19, 0x00	; 0
    7214:	40 e0       	ldi	r20, 0x00	; 0
    7216:	59 e3       	ldi	r21, 0x39	; 57
    7218:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    721c:	20 e0       	ldi	r18, 0x00	; 0
    721e:	30 e0       	ldi	r19, 0x00	; 0
    7220:	40 e4       	ldi	r20, 0x40	; 64
    7222:	50 e4       	ldi	r21, 0x40	; 64
    7224:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    7228:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixunssfsi>
		g_adc_temp_deg_100		= l_adc_temp_deg_100;
    722c:	60 93 75 28 	sts	0x2875, r22	; 0x802875 <g_adc_io_adc5_volt_1000>
    7230:	70 93 76 28 	sts	0x2876, r23	; 0x802876 <g_adc_io_adc5_volt_1000+0x1>
    7234:	a4 e6       	ldi	r26, 0x64	; 100
    7236:	b0 e0       	ldi	r27, 0x00	; 0
    7238:	2e 89       	ldd	r18, Y+22	; 0x16
    723a:	3f 89       	ldd	r19, Y+23	; 0x17
    723c:	48 8d       	ldd	r20, Y+24	; 0x18
    723e:	59 8d       	ldd	r21, Y+25	; 0x19
    7240:	0e 94 6f 43 	call	0x86de	; 0x86de <__muluhisi3>
    7244:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <__floatsisf>
    7248:	20 e0       	ldi	r18, 0x00	; 0
    724a:	30 e0       	ldi	r19, 0x00	; 0
    724c:	40 e0       	ldi	r20, 0x00	; 0
    724e:	59 e3       	ldi	r21, 0x39	; 57
    7250:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    7254:	2d ec       	ldi	r18, 0xCD	; 205
    7256:	3c e4       	ldi	r19, 0x4C	; 76
    7258:	4d e1       	ldi	r20, 0x1D	; 29
    725a:	54 e4       	ldi	r21, 0x44	; 68
    725c:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__mulsf3>
    7260:	20 e0       	ldi	r18, 0x00	; 0
    7262:	36 e6       	ldi	r19, 0x66	; 102
    7264:	45 ed       	ldi	r20, 0xD5	; 213
    7266:	56 e4       	ldi	r21, 0x46	; 70
    7268:	0e 94 13 44 	call	0x8826	; 0x8826 <__subsf3>
    726c:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixunssfsi>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7270:	60 93 73 28 	sts	0x2873, r22	; 0x802873 <g_adc_temp_deg_100>

static void task_twi(uint32_t now)
{	/* Calculations for the presentation layer and display */

	/* TWI1 - SIM808, Hygro, Gyro, Baro devices */
	task_twi1_onboard(now);
    7274:	70 93 74 28 	sts	0x2874, r23	; 0x802874 <g_adc_temp_deg_100+0x1>
    7278:	1f bf       	out	0x3f, r17	; 63

	/* TWI2 - LCD Port */
	task_twi2_lcd(now);
    727a:	c7 01       	movw	r24, r14
    727c:	b6 01       	movw	r22, r12
    727e:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <task_twi1_onboard>
}

static void task_usb(uint32_t now)
{
	if (usb_cdc_transfers_autorized) {
    7282:	c7 01       	movw	r24, r14
    7284:	b6 01       	movw	r22, r12
    7286:	0e 94 2d 1a 	call	0x345a	; 0x345a <task_twi2_lcd>
    728a:	80 91 02 29 	lds	r24, 0x2902	; 0x802902 <usb_cdc_transfers_autorized>
		// stdio_usb_init();
		// stdio_usb_enable();
#endif

		/* Monitoring at the USB serial terminal */
		if (((now - usb_last) >= 512) || (now < usb_last)) {
    728e:	88 23       	and	r24, r24
    7290:	09 f4       	brne	.+2      	; 0x7294 <main+0x7f4>
    7292:	9e c0       	rjmp	.+316    	; 0x73d0 <main+0x930>
    7294:	80 91 25 26 	lds	r24, 0x2625	; 0x802625 <usb_last.7500>
    7298:	90 91 26 26 	lds	r25, 0x2626	; 0x802626 <usb_last.7500+0x1>
    729c:	a0 91 27 26 	lds	r26, 0x2627	; 0x802627 <usb_last.7500+0x2>
    72a0:	b0 91 28 26 	lds	r27, 0x2628	; 0x802628 <usb_last.7500+0x3>
    72a4:	b7 01       	movw	r22, r14
    72a6:	a6 01       	movw	r20, r12
    72a8:	48 1b       	sub	r20, r24
    72aa:	59 0b       	sbc	r21, r25
    72ac:	6a 0b       	sbc	r22, r26
    72ae:	7b 0b       	sbc	r23, r27
    72b0:	41 15       	cp	r20, r1
    72b2:	52 40       	sbci	r21, 0x02	; 2
    72b4:	61 05       	cpc	r22, r1
    72b6:	71 05       	cpc	r23, r1
    72b8:	30 f4       	brcc	.+12     	; 0x72c6 <main+0x826>
    72ba:	c8 16       	cp	r12, r24
    72bc:	d9 06       	cpc	r13, r25
			usb_last = now;
    72be:	ea 06       	cpc	r14, r26
    72c0:	fb 06       	cpc	r15, r27
    72c2:	08 f0       	brcs	.+2      	; 0x72c6 <main+0x826>
    72c4:	85 c0       	rjmp	.+266    	; 0x73d0 <main+0x930>
    72c6:	c0 92 25 26 	sts	0x2625, r12	; 0x802625 <usb_last.7500>
    72ca:	d0 92 26 26 	sts	0x2626, r13	; 0x802626 <usb_last.7500+0x1>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    72ce:	e0 92 27 26 	sts	0x2627, r14	; 0x802627 <usb_last.7500+0x2>
	cpu_irq_disable();
    72d2:	f0 92 28 26 	sts	0x2628, r15	; 0x802628 <usb_last.7500+0x3>

			flags = cpu_irq_save();
			int16_t l_adc_vctcxo_volt_1000	= g_adc_vctcxo_volt_1000;
    72d6:	8f b7       	in	r24, 0x3f	; 63
    72d8:	89 87       	std	Y+9, r24	; 0x09
    72da:	f8 94       	cli
    72dc:	29 85       	ldd	r18, Y+9	; 0x09
    72de:	f0 91 7d 28 	lds	r31, 0x287D	; 0x80287d <g_adc_vctcxo_volt_1000>
			int16_t l_adc_5v0_volt_1000		= g_adc_5v0_volt_1000;
    72e2:	fa 8b       	std	Y+18, r31	; 0x12
    72e4:	80 91 7e 28 	lds	r24, 0x287E	; 0x80287e <g_adc_vctcxo_volt_1000+0x1>
    72e8:	8e 8b       	std	Y+22, r24	; 0x16
			int16_t l_adc_vbat_volt_1000	= g_adc_vbat_volt_1000;
    72ea:	40 90 7b 28 	lds	r4, 0x287B	; 0x80287b <g_adc_5v0_volt_1000>
    72ee:	50 90 7c 28 	lds	r5, 0x287C	; 0x80287c <g_adc_5v0_volt_1000+0x1>
			int16_t l_adc_io_adc4_volt_1000	= g_adc_io_adc4_volt_1000;
    72f2:	60 90 79 28 	lds	r6, 0x2879	; 0x802879 <g_adc_vbat_volt_1000>
    72f6:	10 91 7a 28 	lds	r17, 0x287A	; 0x80287a <g_adc_vbat_volt_1000+0x1>
			int16_t l_adc_io_adc5_volt_1000	= g_adc_io_adc5_volt_1000;
    72fa:	00 91 77 28 	lds	r16, 0x2877	; 0x802877 <g_adc_io_adc4_volt_1000>
    72fe:	90 90 78 28 	lds	r9, 0x2878	; 0x802878 <g_adc_io_adc4_volt_1000+0x1>
			int16_t l_adc_temp_deg_100		= g_adc_temp_deg_100;
    7302:	80 90 75 28 	lds	r8, 0x2875	; 0x802875 <g_adc_io_adc5_volt_1000>
    7306:	70 90 76 28 	lds	r7, 0x2876	; 0x802876 <g_adc_io_adc5_volt_1000+0x1>
			int32_t l_twi1_baro_temp_100	= g_twi1_baro_temp_100;
    730a:	a0 90 73 28 	lds	r10, 0x2873	; 0x802873 <g_adc_temp_deg_100>
    730e:	b0 90 74 28 	lds	r11, 0x2874	; 0x802874 <g_adc_temp_deg_100+0x1>
    7312:	80 91 e0 28 	lds	r24, 0x28E0	; 0x8028e0 <g_twi1_baro_temp_100>
    7316:	90 91 e1 28 	lds	r25, 0x28E1	; 0x8028e1 <g_twi1_baro_temp_100+0x1>
    731a:	a0 91 e2 28 	lds	r26, 0x28E2	; 0x8028e2 <g_twi1_baro_temp_100+0x2>
    731e:	b0 91 e3 28 	lds	r27, 0x28E3	; 0x8028e3 <g_twi1_baro_temp_100+0x3>
			int32_t l_twi1_baro_p_100		= g_twi1_baro_p_100;
    7322:	8e 87       	std	Y+14, r24	; 0x0e
    7324:	9f 87       	std	Y+15, r25	; 0x0f
    7326:	a8 8b       	std	Y+16, r26	; 0x10
    7328:	b9 8b       	std	Y+17, r27	; 0x11
    732a:	60 91 dc 28 	lds	r22, 0x28DC	; 0x8028dc <g_twi1_baro_p_100>
    732e:	70 91 dd 28 	lds	r23, 0x28DD	; 0x8028dd <g_twi1_baro_p_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7332:	80 91 de 28 	lds	r24, 0x28DE	; 0x8028de <g_twi1_baro_p_100+0x2>
			cpu_irq_restore(flags);

			printf("Time = %5ld: U_vctcxo=%4d mV, U_5v0=%4d mV, U_vbat=%4d mV, U_io_adc4=%4d mV, U_io_adc5=%4d mV, mP_Temp=%-2d.%02dC,\tBaro_Temp=%-2ld.%02ld C, Baro_P=%04ld.%02ld hPa\r\n",
    7336:	90 91 df 28 	lds	r25, 0x28DF	; 0x8028df <g_twi1_baro_p_100+0x3>
    733a:	2f bf       	out	0x3f, r18	; 63
    733c:	24 e6       	ldi	r18, 0x64	; 100
    733e:	30 e0       	ldi	r19, 0x00	; 0
    7340:	40 e0       	ldi	r20, 0x00	; 0
    7342:	50 e0       	ldi	r21, 0x00	; 0
    7344:	0e 94 3c 43 	call	0x8678	; 0x8678 <__divmodsi4>
    7348:	9f 93       	push	r25
    734a:	8f 93       	push	r24
    734c:	7f 93       	push	r23
    734e:	6f 93       	push	r22
    7350:	5f 93       	push	r21
    7352:	4f 93       	push	r20
    7354:	3f 93       	push	r19
    7356:	2f 93       	push	r18
    7358:	6e 85       	ldd	r22, Y+14	; 0x0e
    735a:	7f 85       	ldd	r23, Y+15	; 0x0f
    735c:	88 89       	ldd	r24, Y+16	; 0x10
    735e:	99 89       	ldd	r25, Y+17	; 0x11
    7360:	24 e6       	ldi	r18, 0x64	; 100
    7362:	30 e0       	ldi	r19, 0x00	; 0
    7364:	40 e0       	ldi	r20, 0x00	; 0
    7366:	50 e0       	ldi	r21, 0x00	; 0
    7368:	0e 94 3c 43 	call	0x8678	; 0x8678 <__divmodsi4>
    736c:	9f 93       	push	r25
    736e:	8f 93       	push	r24
    7370:	7f 93       	push	r23
    7372:	6f 93       	push	r22
    7374:	5f 93       	push	r21
    7376:	4f 93       	push	r20
    7378:	3f 93       	push	r19
    737a:	2f 93       	push	r18
    737c:	c5 01       	movw	r24, r10
    737e:	64 e6       	ldi	r22, 0x64	; 100
    7380:	70 e0       	ldi	r23, 0x00	; 0
    7382:	0e 94 07 43 	call	0x860e	; 0x860e <__divmodhi4>
    7386:	9f 93       	push	r25
    7388:	8f 93       	push	r24
    738a:	7f 93       	push	r23
    738c:	6f 93       	push	r22
    738e:	7f 92       	push	r7
    7390:	8f 92       	push	r8
    7392:	9f 92       	push	r9
    7394:	0f 93       	push	r16
    7396:	1f 93       	push	r17
    7398:	6f 92       	push	r6
    739a:	5f 92       	push	r5
    739c:	4f 92       	push	r4
    739e:	9e 89       	ldd	r25, Y+22	; 0x16
    73a0:	9f 93       	push	r25
    73a2:	aa 89       	ldd	r26, Y+18	; 0x12
    73a4:	af 93       	push	r26
    73a6:	0b 2e       	mov	r0, r27
    73a8:	ba e0       	ldi	r27, 0x0A	; 10
    73aa:	f6 94       	lsr	r15
    73ac:	e7 94       	ror	r14
    73ae:	d7 94       	ror	r13
    73b0:	c7 94       	ror	r12
    73b2:	ba 95       	dec	r27
    73b4:	d1 f7       	brne	.-12     	; 0x73aa <main+0x90a>
    73b6:	b0 2d       	mov	r27, r0
    73b8:	ff 92       	push	r15
    73ba:	ef 92       	push	r14
    73bc:	df 92       	push	r13
    73be:	cf 92       	push	r12
    73c0:	ef ee       	ldi	r30, 0xEF	; 239
    73c2:	f3 e2       	ldi	r31, 0x23	; 35
    73c4:	ff 93       	push	r31
    73c6:	ef 93       	push	r30
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    73c8:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <printf>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    73cc:	cd bf       	out	0x3d, r28	; 61
    73ce:	de bf       	out	0x3e, r29	; 62
    73d0:	f8 94       	cli
    73d2:	ab e5       	ldi	r26, 0x5B	; 91
    73d4:	ba e2       	ldi	r27, 0x2A	; 42
    73d6:	8c 91       	ld	r24, X
    73d8:	81 11       	cpse	r24, r1
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    73da:	09 c0       	rjmp	.+18     	; 0x73ee <main+0x94e>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    73dc:	ac e5       	ldi	r26, 0x5C	; 92
    73de:	ba e2       	ldi	r27, 0x2A	; 42
    73e0:	e0 e0       	ldi	r30, 0x00	; 0
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    73e2:	ef 5f       	subi	r30, 0xFF	; 255
    73e4:	8d 91       	ld	r24, X+
		cpu_irq_enable();
    73e6:	88 23       	and	r24, r24
    73e8:	e1 f3       	breq	.-8      	; 0x73e2 <main+0x942>
    73ea:	e1 11       	cpse	r30, r1
    73ec:	02 c0       	rjmp	.+4      	; 0x73f2 <main+0x952>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    73ee:	78 94       	sei
    73f0:	12 c0       	rjmp	.+36     	; 0x7416 <main+0x976>
    73f2:	d1 01       	movw	r26, r2
    73f4:	8c 91       	ld	r24, X
    73f6:	f0 e0       	ldi	r31, 0x00	; 0
    73f8:	ee 5c       	subi	r30, 0xCE	; 206
    73fa:	ff 4d       	sbci	r31, 0xDF	; 223
	sleep_enable();
    73fc:	81 7f       	andi	r24, 0xF1	; 241
    73fe:	90 81       	ld	r25, Z
    7400:	89 2b       	or	r24, r25

	cpu_irq_enable();
    7402:	8c 93       	st	X, r24
	sleep_enter();
    7404:	8c 91       	ld	r24, X

	sleep_disable();
    7406:	81 60       	ori	r24, 0x01	; 1
    7408:	8c 93       	st	X, r24
    740a:	78 94       	sei
    740c:	88 95       	sleep
	/* Start TWI channels */
	twi_start();		// Start TWI

	/* The application code */
	runmode = 1;
    while (runmode) {
    740e:	f1 01       	movw	r30, r2
    7410:	80 81       	ld	r24, Z
    7412:	8e 7f       	andi	r24, 0xFE	; 254
    7414:	80 83       	st	Z, r24
		task();
		sleepmgr_enter_sleep();
    }

	cpu_irq_disable();
    7416:	80 91 03 29 	lds	r24, 0x2903	; 0x802903 <runmode>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    741a:	81 11       	cpse	r24, r1
    741c:	0a ce       	rjmp	.-1004   	; 0x7032 <main+0x592>
    741e:	f8 94       	cli
    7420:	f8 94       	cli
    7422:	80 91 5b 2a 	lds	r24, 0x2A5B	; 0x802a5b <sleepmgr_locks>
    7426:	81 11       	cpse	r24, r1
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    7428:	09 c0       	rjmp	.+18     	; 0x743c <main+0x99c>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    742a:	ac e5       	ldi	r26, 0x5C	; 92
    742c:	ba e2       	ldi	r27, 0x2A	; 42
    742e:	e0 e0       	ldi	r30, 0x00	; 0
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    7430:	ef 5f       	subi	r30, 0xFF	; 255
    7432:	8d 91       	ld	r24, X+
		cpu_irq_enable();
    7434:	88 23       	and	r24, r24
    7436:	e1 f3       	breq	.-8      	; 0x7430 <main+0x990>
    7438:	e1 11       	cpse	r30, r1
    743a:	02 c0       	rjmp	.+4      	; 0x7440 <main+0x9a0>
    743c:	78 94       	sei

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    743e:	13 c0       	rjmp	.+38     	; 0x7466 <main+0x9c6>
    7440:	a8 e4       	ldi	r26, 0x48	; 72
    7442:	b0 e0       	ldi	r27, 0x00	; 0
    7444:	8c 91       	ld	r24, X
    7446:	f0 e0       	ldi	r31, 0x00	; 0
    7448:	ee 5c       	subi	r30, 0xCE	; 206
    744a:	ff 4d       	sbci	r31, 0xDF	; 223
    744c:	98 2f       	mov	r25, r24
	sleep_enable();
    744e:	91 7f       	andi	r25, 0xF1	; 241
    7450:	80 81       	ld	r24, Z
    7452:	89 2b       	or	r24, r25

	cpu_irq_enable();
    7454:	8c 93       	st	X, r24
	sleep_enter();
    7456:	8c 91       	ld	r24, X

	sleep_disable();
    7458:	81 60       	ori	r24, 0x01	; 1
    745a:	8c 93       	st	X, r24
    745c:	78 94       	sei
	sleepmgr_enter_sleep();

	return retcode;
}
    745e:	88 95       	sleep
    7460:	8c 91       	ld	r24, X
    7462:	8e 7f       	andi	r24, 0xFE	; 254
    7464:	8c 93       	st	X, r24
    7466:	80 e0       	ldi	r24, 0x00	; 0
    7468:	90 e0       	ldi	r25, 0x00	; 0
    746a:	69 96       	adiw	r28, 0x19	; 25
    746c:	cd bf       	out	0x3d, r28	; 61
    746e:	de bf       	out	0x3e, r29	; 62
    7470:	df 91       	pop	r29
    7472:	cf 91       	pop	r28
    7474:	1f 91       	pop	r17
    7476:	0f 91       	pop	r16
    7478:	ff 90       	pop	r15
    747a:	ef 90       	pop	r14
    747c:	df 90       	pop	r13
    747e:	cf 90       	pop	r12
    7480:	bf 90       	pop	r11
    7482:	af 90       	pop	r10
    7484:	9f 90       	pop	r9
    7486:	8f 90       	pop	r8
    7488:	7f 90       	pop	r7
    748a:	6f 90       	pop	r6
    748c:	5f 90       	pop	r5
    748e:	4f 90       	pop	r4
    7490:	3f 90       	pop	r3
    7492:	2f 90       	pop	r2
    7494:	08 95       	ret

00007496 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    7496:	cf 93       	push	r28
    7498:	df 93       	push	r29
    749a:	cd b7       	in	r28, 0x3d	; 61
    749c:	de b7       	in	r29, 0x3e	; 62
    749e:	28 97       	sbiw	r28, 0x08	; 8
    74a0:	cd bf       	out	0x3d, r28	; 61
    74a2:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    74a4:	8f ef       	ldi	r24, 0xFF	; 255
    74a6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    74aa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    74ae:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    74b2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    74b6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    74ba:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    74be:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    74c2:	61 e0       	ldi	r22, 0x01	; 1
    74c4:	81 e4       	ldi	r24, 0x41	; 65
    74c6:	90 e0       	ldi	r25, 0x00	; 0
    74c8:	0e 94 de 42 	call	0x85bc	; 0x85bc <ccp_write_io>
    74cc:	6c e1       	ldi	r22, 0x1C	; 28
    74ce:	70 e0       	ldi	r23, 0x00	; 0
    74d0:	82 e0       	ldi	r24, 0x02	; 2
    74d2:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    74d6:	8a 83       	std	Y+2, r24	; 0x02
    74d8:	6d e1       	ldi	r22, 0x1D	; 29
    74da:	70 e0       	ldi	r23, 0x00	; 0
    74dc:	82 e0       	ldi	r24, 0x02	; 2
    74de:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    74e2:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    74e4:	89 81       	ldd	r24, Y+1	; 0x01
    74e6:	9a 81       	ldd	r25, Y+2	; 0x02
    74e8:	01 96       	adiw	r24, 0x01	; 1
    74ea:	21 f4       	brne	.+8      	; 0x74f4 <sysclk_init+0x5e>
		cal = 0x2340;
    74ec:	80 e4       	ldi	r24, 0x40	; 64
    74ee:	93 e2       	ldi	r25, 0x23	; 35
    74f0:	89 83       	std	Y+1, r24	; 0x01
    74f2:	9a 83       	std	Y+2, r25	; 0x02
    74f4:	89 81       	ldd	r24, Y+1	; 0x01
    74f6:	9a 81       	ldd	r25, Y+2	; 0x02
    74f8:	8b 83       	std	Y+3, r24	; 0x03
    74fa:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    74fc:	e0 e6       	ldi	r30, 0x60	; 96
    74fe:	f0 e0       	ldi	r31, 0x00	; 0
    7500:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    7502:	8c 81       	ldd	r24, Y+4	; 0x04
    7504:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    7506:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    750a:	84 fd       	sbrc	r24, 4
    750c:	21 c0       	rjmp	.+66     	; 0x7550 <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    750e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    7512:	83 fd       	sbrc	r24, 3
    7514:	0e c0       	rjmp	.+28     	; 0x7532 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    7516:	e0 e5       	ldi	r30, 0x50	; 80
    7518:	f0 e0       	ldi	r31, 0x00	; 0
    751a:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    751c:	8f b7       	in	r24, 0x3f	; 63
    751e:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    7520:	f8 94       	cli
	return flags;
    7522:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    7524:	80 81       	ld	r24, Z
    7526:	88 60       	ori	r24, 0x08	; 8
    7528:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    752a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    752c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    752e:	83 ff       	sbrs	r24, 3
    7530:	fd cf       	rjmp	.-6      	; 0x752c <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7532:	8f b7       	in	r24, 0x3f	; 63
    7534:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    7536:	f8 94       	cli
	return flags;
    7538:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    753a:	e0 e5       	ldi	r30, 0x50	; 80
    753c:	f0 e0       	ldi	r31, 0x00	; 0
    753e:	83 ec       	ldi	r24, 0xC3	; 195
    7540:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    7542:	80 81       	ld	r24, Z
    7544:	80 61       	ori	r24, 0x10	; 16
    7546:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7548:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    754a:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    754c:	84 ff       	sbrs	r24, 4
    754e:	fd cf       	rjmp	.-6      	; 0x754a <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    7550:	64 e0       	ldi	r22, 0x04	; 4
    7552:	80 e4       	ldi	r24, 0x40	; 64
    7554:	90 e0       	ldi	r25, 0x00	; 0
    7556:	0e 94 de 42 	call	0x85bc	; 0x85bc <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    755a:	8f b7       	in	r24, 0x3f	; 63
    755c:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    755e:	f8 94       	cli
	return flags;
    7560:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    7562:	e0 e5       	ldi	r30, 0x50	; 80
    7564:	f0 e0       	ldi	r31, 0x00	; 0
    7566:	80 81       	ld	r24, Z
    7568:	8e 7f       	andi	r24, 0xFE	; 254
    756a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    756c:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    756e:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7570:	8f b7       	in	r24, 0x3f	; 63
    7572:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    7574:	f8 94       	cli
	return flags;
    7576:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    7578:	80 81       	ld	r24, Z
    757a:	88 60       	ori	r24, 0x08	; 8
    757c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    757e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    7580:	81 81       	ldd	r24, Z+1	; 0x01
    7582:	83 ff       	sbrs	r24, 3
    7584:	fd cf       	rjmp	.-6      	; 0x7580 <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    7586:	8b e0       	ldi	r24, 0x0B	; 11
    7588:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    758c:	28 96       	adiw	r28, 0x08	; 8
    758e:	cd bf       	out	0x3d, r28	; 61
    7590:	de bf       	out	0x3e, r29	; 62
    7592:	df 91       	pop	r29
    7594:	cf 91       	pop	r28
    7596:	08 95       	ret

00007598 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    7598:	cf 93       	push	r28
    759a:	df 93       	push	r29
    759c:	1f 92       	push	r1
    759e:	cd b7       	in	r28, 0x3d	; 61
    75a0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    75a2:	9f b7       	in	r25, 0x3f	; 63
    75a4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    75a6:	f8 94       	cli
	return flags;
    75a8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    75aa:	e8 2f       	mov	r30, r24
    75ac:	f0 e0       	ldi	r31, 0x00	; 0
    75ae:	e0 59       	subi	r30, 0x90	; 144
    75b0:	ff 4f       	sbci	r31, 0xFF	; 255
    75b2:	60 95       	com	r22
    75b4:	80 81       	ld	r24, Z
    75b6:	68 23       	and	r22, r24
    75b8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    75ba:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    75bc:	0f 90       	pop	r0
    75be:	df 91       	pop	r29
    75c0:	cf 91       	pop	r28
    75c2:	08 95       	ret

000075c4 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    75c4:	cf 93       	push	r28
    75c6:	df 93       	push	r29
    75c8:	1f 92       	push	r1
    75ca:	cd b7       	in	r28, 0x3d	; 61
    75cc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    75ce:	9f b7       	in	r25, 0x3f	; 63
    75d0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    75d2:	f8 94       	cli
	return flags;
    75d4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    75d6:	e8 2f       	mov	r30, r24
    75d8:	f0 e0       	ldi	r31, 0x00	; 0
    75da:	e0 59       	subi	r30, 0x90	; 144
    75dc:	ff 4f       	sbci	r31, 0xFF	; 255
    75de:	80 81       	ld	r24, Z
    75e0:	68 2b       	or	r22, r24
    75e2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    75e4:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    75e6:	0f 90       	pop	r0
    75e8:	df 91       	pop	r29
    75ea:	cf 91       	pop	r28
    75ec:	08 95       	ret

000075ee <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    75ee:	cf 93       	push	r28
    75f0:	df 93       	push	r29
    75f2:	1f 92       	push	r1
    75f4:	1f 92       	push	r1
    75f6:	cd b7       	in	r28, 0x3d	; 61
    75f8:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    75fa:	86 30       	cpi	r24, 0x06	; 6
    75fc:	11 f0       	breq	.+4      	; 0x7602 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    75fe:	60 e0       	ldi	r22, 0x00	; 0
    7600:	01 c0       	rjmp	.+2      	; 0x7604 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    7602:	68 e1       	ldi	r22, 0x18	; 24
    7604:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    7608:	81 fd       	sbrc	r24, 1
    760a:	2a c0       	rjmp	.+84     	; 0x7660 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    760c:	8f b7       	in	r24, 0x3f	; 63
    760e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    7610:	f8 94       	cli
	return flags;
    7612:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    7614:	e0 e5       	ldi	r30, 0x50	; 80
    7616:	f0 e0       	ldi	r31, 0x00	; 0
    7618:	80 81       	ld	r24, Z
    761a:	82 60       	ori	r24, 0x02	; 2
    761c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    761e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    7620:	81 81       	ldd	r24, Z+1	; 0x01
    7622:	81 ff       	sbrs	r24, 1
    7624:	fd cf       	rjmp	.-6      	; 0x7620 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7626:	8f b7       	in	r24, 0x3f	; 63
    7628:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    762a:	f8 94       	cli
	return flags;
    762c:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    762e:	a0 e5       	ldi	r26, 0x50	; 80
    7630:	b0 e0       	ldi	r27, 0x00	; 0
    7632:	16 96       	adiw	r26, 0x06	; 6
    7634:	8c 91       	ld	r24, X
    7636:	16 97       	sbiw	r26, 0x06	; 6
    7638:	89 7f       	andi	r24, 0xF9	; 249
    763a:	16 96       	adiw	r26, 0x06	; 6
    763c:	8c 93       	st	X, r24
    763e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    7640:	e0 e6       	ldi	r30, 0x60	; 96
    7642:	f0 e0       	ldi	r31, 0x00	; 0
    7644:	80 e8       	ldi	r24, 0x80	; 128
    7646:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    7648:	8b eb       	ldi	r24, 0xBB	; 187
    764a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    764c:	16 96       	adiw	r26, 0x06	; 6
    764e:	8c 91       	ld	r24, X
    7650:	16 97       	sbiw	r26, 0x06	; 6
    7652:	84 60       	ori	r24, 0x04	; 4
    7654:	16 96       	adiw	r26, 0x06	; 6
    7656:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    7658:	80 81       	ld	r24, Z
    765a:	81 60       	ori	r24, 0x01	; 1
    765c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    765e:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    7660:	63 60       	ori	r22, 0x03	; 3
    7662:	84 e4       	ldi	r24, 0x44	; 68
    7664:	90 e0       	ldi	r25, 0x00	; 0
    7666:	aa d7       	rcall	.+3924   	; 0x85bc <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    7668:	60 e4       	ldi	r22, 0x40	; 64
    766a:	80 e0       	ldi	r24, 0x00	; 0
    766c:	95 df       	rcall	.-214    	; 0x7598 <sysclk_enable_module>
}
    766e:	0f 90       	pop	r0
    7670:	0f 90       	pop	r0
    7672:	df 91       	pop	r29
    7674:	cf 91       	pop	r28
    7676:	08 95       	ret

00007678 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    7678:	80 91 1a 2a 	lds	r24, 0x2A1A	; 0x802a1a <udi_cdc_nb_comm_enabled>
    767c:	81 50       	subi	r24, 0x01	; 1
    767e:	80 93 1a 2a 	sts	0x2A1A, r24	; 0x802a1a <udi_cdc_nb_comm_enabled>
    7682:	08 95       	ret

00007684 <udi_cdc_data_setup>:
    7684:	80 e0       	ldi	r24, 0x00	; 0
    7686:	08 95       	ret

00007688 <udi_cdc_getsetting>:
    7688:	80 e0       	ldi	r24, 0x00	; 0
    768a:	08 95       	ret

0000768c <udi_cdc_line_coding_received>:
    768c:	68 e2       	ldi	r22, 0x28	; 40
    768e:	7a e2       	ldi	r23, 0x2A	; 42
    7690:	80 e0       	ldi	r24, 0x00	; 0
    7692:	01 ca       	rjmp	.-3070   	; 0x6a96 <usb_callback_config>
    7694:	08 95       	ret

00007696 <udi_cdc_comm_enable>:
    7696:	10 92 1a 2a 	sts	0x2A1A, r1	; 0x802a1a <udi_cdc_nb_comm_enabled>
    769a:	10 92 26 2a 	sts	0x2A26, r1	; 0x802a26 <udi_cdc_state>
    769e:	10 92 27 2a 	sts	0x2A27, r1	; 0x802a27 <udi_cdc_state+0x1>
    76a2:	ec e1       	ldi	r30, 0x1C	; 28
    76a4:	fa e2       	ldi	r31, 0x2A	; 42
    76a6:	81 ea       	ldi	r24, 0xA1	; 161
    76a8:	80 83       	st	Z, r24
    76aa:	80 e2       	ldi	r24, 0x20	; 32
    76ac:	81 83       	std	Z+1, r24	; 0x01
    76ae:	12 82       	std	Z+2, r1	; 0x02
    76b0:	13 82       	std	Z+3, r1	; 0x03
    76b2:	14 82       	std	Z+4, r1	; 0x04
    76b4:	15 82       	std	Z+5, r1	; 0x05
    76b6:	82 e0       	ldi	r24, 0x02	; 2
    76b8:	90 e0       	ldi	r25, 0x00	; 0
    76ba:	86 83       	std	Z+6, r24	; 0x06
    76bc:	97 83       	std	Z+7, r25	; 0x07
    76be:	10 86       	std	Z+8, r1	; 0x08
    76c0:	11 86       	std	Z+9, r1	; 0x09
    76c2:	e8 e2       	ldi	r30, 0x28	; 40
    76c4:	fa e2       	ldi	r31, 0x2A	; 42
    76c6:	80 e0       	ldi	r24, 0x00	; 0
    76c8:	92 ec       	ldi	r25, 0xC2	; 194
    76ca:	a1 e0       	ldi	r26, 0x01	; 1
    76cc:	b0 e0       	ldi	r27, 0x00	; 0
    76ce:	80 83       	st	Z, r24
    76d0:	91 83       	std	Z+1, r25	; 0x01
    76d2:	a2 83       	std	Z+2, r26	; 0x02
    76d4:	b3 83       	std	Z+3, r27	; 0x03
    76d6:	14 82       	std	Z+4, r1	; 0x04
    76d8:	15 82       	std	Z+5, r1	; 0x05
    76da:	88 e0       	ldi	r24, 0x08	; 8
    76dc:	86 83       	std	Z+6, r24	; 0x06
    76de:	bf 01       	movw	r22, r30
    76e0:	80 e0       	ldi	r24, 0x00	; 0
    76e2:	d9 d9       	rcall	.-3150   	; 0x6a96 <usb_callback_config>
    76e4:	d1 d9       	rcall	.-3166   	; 0x6a88 <usb_callback_cdc_enable>
    76e6:	88 23       	and	r24, r24
    76e8:	29 f0       	breq	.+10     	; 0x76f4 <udi_cdc_comm_enable+0x5e>
    76ea:	90 91 1a 2a 	lds	r25, 0x2A1A	; 0x802a1a <udi_cdc_nb_comm_enabled>
    76ee:	9f 5f       	subi	r25, 0xFF	; 255
    76f0:	90 93 1a 2a 	sts	0x2A1A, r25	; 0x802a1a <udi_cdc_nb_comm_enabled>
    76f4:	08 95       	ret

000076f6 <udi_cdc_tx_send>:
    76f6:	ff 92       	push	r15
    76f8:	0f 93       	push	r16
    76fa:	1f 93       	push	r17
    76fc:	cf 93       	push	r28
    76fe:	df 93       	push	r29
    7700:	1f 92       	push	r1
    7702:	cd b7       	in	r28, 0x3d	; 61
    7704:	de b7       	in	r29, 0x3e	; 62
    7706:	80 91 07 29 	lds	r24, 0x2907	; 0x802907 <udi_cdc_tx_trans_ongoing>
    770a:	81 11       	cpse	r24, r1
    770c:	9f c0       	rjmp	.+318    	; 0x784c <udi_cdc_tx_send+0x156>
    770e:	0e 94 b6 2c 	call	0x596c	; 0x596c <udd_is_high_speed>
    7712:	88 23       	and	r24, r24
    7714:	51 f0       	breq	.+20     	; 0x772a <udi_cdc_tx_send+0x34>
    7716:	00 91 08 29 	lds	r16, 0x2908	; 0x802908 <udi_cdc_tx_sof_num>
    771a:	10 91 09 29 	lds	r17, 0x2909	; 0x802909 <udi_cdc_tx_sof_num+0x1>
    771e:	0e 94 c3 2c 	call	0x5986	; 0x5986 <udd_get_micro_frame_number>
    7722:	08 17       	cp	r16, r24
    7724:	19 07       	cpc	r17, r25
    7726:	59 f4       	brne	.+22     	; 0x773e <udi_cdc_tx_send+0x48>
    7728:	91 c0       	rjmp	.+290    	; 0x784c <udi_cdc_tx_send+0x156>
    772a:	00 91 08 29 	lds	r16, 0x2908	; 0x802908 <udi_cdc_tx_sof_num>
    772e:	10 91 09 29 	lds	r17, 0x2909	; 0x802909 <udi_cdc_tx_sof_num+0x1>
    7732:	0e 94 be 2c 	call	0x597c	; 0x597c <udd_get_frame_number>
    7736:	08 17       	cp	r16, r24
    7738:	19 07       	cpc	r17, r25
    773a:	09 f4       	brne	.+2      	; 0x773e <udi_cdc_tx_send+0x48>
    773c:	87 c0       	rjmp	.+270    	; 0x784c <udi_cdc_tx_send+0x156>
    773e:	8f b7       	in	r24, 0x3f	; 63
    7740:	89 83       	std	Y+1, r24	; 0x01
    7742:	f8 94       	cli
    7744:	19 81       	ldd	r17, Y+1	; 0x01
    7746:	00 91 0a 29 	lds	r16, 0x290A	; 0x80290a <udi_cdc_tx_buf_sel>
    774a:	e0 2f       	mov	r30, r16
    774c:	f0 e0       	ldi	r31, 0x00	; 0
    774e:	ee 0f       	add	r30, r30
    7750:	ff 1f       	adc	r31, r31
    7752:	e5 5f       	subi	r30, 0xF5	; 245
    7754:	f6 4d       	sbci	r31, 0xD6	; 214
    7756:	80 81       	ld	r24, Z
    7758:	91 81       	ldd	r25, Z+1	; 0x01
    775a:	89 2b       	or	r24, r25
    775c:	09 f5       	brne	.+66     	; 0x77a0 <udi_cdc_tx_send+0xaa>
    775e:	80 91 04 29 	lds	r24, 0x2904	; 0x802904 <sof_zlp_counter.5059>
    7762:	90 91 05 29 	lds	r25, 0x2905	; 0x802905 <sof_zlp_counter.5059+0x1>
    7766:	01 96       	adiw	r24, 0x01	; 1
    7768:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <sof_zlp_counter.5059>
    776c:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <sof_zlp_counter.5059+0x1>
    7770:	0e 94 b6 2c 	call	0x596c	; 0x596c <udd_is_high_speed>
    7774:	81 11       	cpse	r24, r1
    7776:	07 c0       	rjmp	.+14     	; 0x7786 <udi_cdc_tx_send+0x90>
    7778:	80 91 04 29 	lds	r24, 0x2904	; 0x802904 <sof_zlp_counter.5059>
    777c:	90 91 05 29 	lds	r25, 0x2905	; 0x802905 <sof_zlp_counter.5059+0x1>
    7780:	84 36       	cpi	r24, 0x64	; 100
    7782:	91 05       	cpc	r25, r1
    7784:	58 f0       	brcs	.+22     	; 0x779c <udi_cdc_tx_send+0xa6>
    7786:	0e 94 b6 2c 	call	0x596c	; 0x596c <udd_is_high_speed>
    778a:	88 23       	and	r24, r24
    778c:	49 f0       	breq	.+18     	; 0x77a0 <udi_cdc_tx_send+0xaa>
    778e:	80 91 04 29 	lds	r24, 0x2904	; 0x802904 <sof_zlp_counter.5059>
    7792:	90 91 05 29 	lds	r25, 0x2905	; 0x802905 <sof_zlp_counter.5059+0x1>
    7796:	80 32       	cpi	r24, 0x20	; 32
    7798:	93 40       	sbci	r25, 0x03	; 3
    779a:	10 f4       	brcc	.+4      	; 0x77a0 <udi_cdc_tx_send+0xaa>
    779c:	1f bf       	out	0x3f, r17	; 63
    779e:	56 c0       	rjmp	.+172    	; 0x784c <udi_cdc_tx_send+0x156>
    77a0:	10 92 04 29 	sts	0x2904, r1	; 0x802904 <sof_zlp_counter.5059>
    77a4:	10 92 05 29 	sts	0x2905, r1	; 0x802905 <sof_zlp_counter.5059+0x1>
    77a8:	80 91 06 29 	lds	r24, 0x2906	; 0x802906 <udi_cdc_tx_both_buf_to_send>
    77ac:	81 11       	cpse	r24, r1
    77ae:	06 c0       	rjmp	.+12     	; 0x77bc <udi_cdc_tx_send+0xc6>
    77b0:	81 e0       	ldi	r24, 0x01	; 1
    77b2:	01 11       	cpse	r16, r1
    77b4:	80 e0       	ldi	r24, 0x00	; 0
    77b6:	80 93 0a 29 	sts	0x290A, r24	; 0x80290a <udi_cdc_tx_buf_sel>
    77ba:	04 c0       	rjmp	.+8      	; 0x77c4 <udi_cdc_tx_send+0xce>
    77bc:	81 e0       	ldi	r24, 0x01	; 1
    77be:	01 11       	cpse	r16, r1
    77c0:	80 e0       	ldi	r24, 0x00	; 0
    77c2:	08 2f       	mov	r16, r24
    77c4:	81 e0       	ldi	r24, 0x01	; 1
    77c6:	80 93 07 29 	sts	0x2907, r24	; 0x802907 <udi_cdc_tx_trans_ongoing>
    77ca:	1f bf       	out	0x3f, r17	; 63
    77cc:	10 e0       	ldi	r17, 0x00	; 0
    77ce:	f8 01       	movw	r30, r16
    77d0:	ee 0f       	add	r30, r30
    77d2:	ff 1f       	adc	r31, r31
    77d4:	e5 5f       	subi	r30, 0xF5	; 245
    77d6:	f6 4d       	sbci	r31, 0xD6	; 214
    77d8:	80 81       	ld	r24, Z
    77da:	91 81       	ldd	r25, Z+1	; 0x01
    77dc:	ff 24       	eor	r15, r15
    77de:	f3 94       	inc	r15
    77e0:	80 34       	cpi	r24, 0x40	; 64
    77e2:	91 05       	cpc	r25, r1
    77e4:	09 f4       	brne	.+2      	; 0x77e8 <udi_cdc_tx_send+0xf2>
    77e6:	f1 2c       	mov	r15, r1
    77e8:	80 34       	cpi	r24, 0x40	; 64
    77ea:	91 05       	cpc	r25, r1
    77ec:	91 f0       	breq	.+36     	; 0x7812 <udi_cdc_tx_send+0x11c>
    77ee:	0e 94 b6 2c 	call	0x596c	; 0x596c <udd_is_high_speed>
    77f2:	88 23       	and	r24, r24
    77f4:	39 f0       	breq	.+14     	; 0x7804 <udi_cdc_tx_send+0x10e>
    77f6:	0e 94 c3 2c 	call	0x5986	; 0x5986 <udd_get_micro_frame_number>
    77fa:	80 93 08 29 	sts	0x2908, r24	; 0x802908 <udi_cdc_tx_sof_num>
    77fe:	90 93 09 29 	sts	0x2909, r25	; 0x802909 <udi_cdc_tx_sof_num+0x1>
    7802:	0b c0       	rjmp	.+22     	; 0x781a <udi_cdc_tx_send+0x124>
    7804:	0e 94 be 2c 	call	0x597c	; 0x597c <udd_get_frame_number>
    7808:	80 93 08 29 	sts	0x2908, r24	; 0x802908 <udi_cdc_tx_sof_num>
    780c:	90 93 09 29 	sts	0x2909, r25	; 0x802909 <udi_cdc_tx_sof_num+0x1>
    7810:	04 c0       	rjmp	.+8      	; 0x781a <udi_cdc_tx_send+0x124>
    7812:	10 92 08 29 	sts	0x2908, r1	; 0x802908 <udi_cdc_tx_sof_num>
    7816:	10 92 09 29 	sts	0x2909, r1	; 0x802909 <udi_cdc_tx_sof_num+0x1>
    781a:	f8 01       	movw	r30, r16
    781c:	ee 0f       	add	r30, r30
    781e:	ff 1f       	adc	r31, r31
    7820:	e5 5f       	subi	r30, 0xF5	; 245
    7822:	f6 4d       	sbci	r31, 0xD6	; 214
    7824:	20 81       	ld	r18, Z
    7826:	31 81       	ldd	r19, Z+1	; 0x01
    7828:	a8 01       	movw	r20, r16
    782a:	00 24       	eor	r0, r0
    782c:	56 95       	lsr	r21
    782e:	47 95       	ror	r20
    7830:	07 94       	ror	r0
    7832:	56 95       	lsr	r21
    7834:	47 95       	ror	r20
    7836:	07 94       	ror	r0
    7838:	54 2f       	mov	r21, r20
    783a:	40 2d       	mov	r20, r0
    783c:	40 5f       	subi	r20, 0xF0	; 240
    783e:	56 4d       	sbci	r21, 0xD6	; 214
    7840:	00 e3       	ldi	r16, 0x30	; 48
    7842:	1c e3       	ldi	r17, 0x3C	; 60
    7844:	6f 2d       	mov	r22, r15
    7846:	81 e8       	ldi	r24, 0x81	; 129
    7848:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <udd_ep_run>
    784c:	0f 90       	pop	r0
    784e:	df 91       	pop	r29
    7850:	cf 91       	pop	r28
    7852:	1f 91       	pop	r17
    7854:	0f 91       	pop	r16
    7856:	ff 90       	pop	r15
    7858:	08 95       	ret

0000785a <udi_cdc_data_sof_notify>:
    785a:	80 e0       	ldi	r24, 0x00	; 0
    785c:	4c cf       	rjmp	.-360    	; 0x76f6 <udi_cdc_tx_send>
    785e:	08 95       	ret

00007860 <udi_cdc_data_sent>:
    7860:	81 11       	cpse	r24, r1
    7862:	19 c0       	rjmp	.+50     	; 0x7896 <udi_cdc_data_sent+0x36>
    7864:	20 91 0a 29 	lds	r18, 0x290A	; 0x80290a <udi_cdc_tx_buf_sel>
    7868:	81 e0       	ldi	r24, 0x01	; 1
    786a:	90 e0       	ldi	r25, 0x00	; 0
    786c:	22 23       	and	r18, r18
    786e:	11 f0       	breq	.+4      	; 0x7874 <udi_cdc_data_sent+0x14>
    7870:	80 e0       	ldi	r24, 0x00	; 0
    7872:	90 e0       	ldi	r25, 0x00	; 0
    7874:	88 0f       	add	r24, r24
    7876:	99 1f       	adc	r25, r25
    7878:	fc 01       	movw	r30, r24
    787a:	e5 5f       	subi	r30, 0xF5	; 245
    787c:	f6 4d       	sbci	r31, 0xD6	; 214
    787e:	10 82       	st	Z, r1
    7880:	11 82       	std	Z+1, r1	; 0x01
    7882:	10 92 06 29 	sts	0x2906, r1	; 0x802906 <udi_cdc_tx_both_buf_to_send>
    7886:	10 92 07 29 	sts	0x2907, r1	; 0x802907 <udi_cdc_tx_trans_ongoing>
    788a:	67 2b       	or	r22, r23
    788c:	11 f0       	breq	.+4      	; 0x7892 <udi_cdc_data_sent+0x32>
    788e:	80 e0       	ldi	r24, 0x00	; 0
    7890:	06 d9       	rcall	.-3572   	; 0x6a9e <usb_callback_tx_empty_notify>
    7892:	80 e0       	ldi	r24, 0x00	; 0
    7894:	30 cf       	rjmp	.-416    	; 0x76f6 <udi_cdc_tx_send>
    7896:	08 95       	ret

00007898 <udi_cdc_data_disable>:
    7898:	80 91 19 2a 	lds	r24, 0x2A19	; 0x802a19 <udi_cdc_nb_data_enabled>
    789c:	81 50       	subi	r24, 0x01	; 1
    789e:	80 93 19 2a 	sts	0x2A19, r24	; 0x802a19 <udi_cdc_nb_data_enabled>
    78a2:	80 91 19 2a 	lds	r24, 0x2A19	; 0x802a19 <udi_cdc_nb_data_enabled>
    78a6:	f4 d8       	rcall	.-3608   	; 0x6a90 <usb_callback_cdc_disable>
    78a8:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <udi_cdc_data_running>
    78ac:	08 95       	ret

000078ae <udi_cdc_comm_setup>:
    78ae:	cf 93       	push	r28
    78b0:	df 93       	push	r29
    78b2:	80 91 4b 2a 	lds	r24, 0x2A4B	; 0x802a4b <udd_g_ctrlreq>
    78b6:	88 23       	and	r24, r24
    78b8:	e4 f4       	brge	.+56     	; 0x78f2 <udi_cdc_comm_setup+0x44>
    78ba:	80 76       	andi	r24, 0x60	; 96
    78bc:	80 32       	cpi	r24, 0x20	; 32
    78be:	09 f0       	breq	.+2      	; 0x78c2 <udi_cdc_comm_setup+0x14>
    78c0:	47 c0       	rjmp	.+142    	; 0x7950 <udi_cdc_comm_setup+0xa2>
    78c2:	80 91 4c 2a 	lds	r24, 0x2A4C	; 0x802a4c <udd_g_ctrlreq+0x1>
    78c6:	81 32       	cpi	r24, 0x21	; 33
    78c8:	09 f0       	breq	.+2      	; 0x78cc <udi_cdc_comm_setup+0x1e>
    78ca:	44 c0       	rjmp	.+136    	; 0x7954 <udi_cdc_comm_setup+0xa6>
    78cc:	80 91 51 2a 	lds	r24, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    78d0:	90 91 52 2a 	lds	r25, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    78d4:	07 97       	sbiw	r24, 0x07	; 7
    78d6:	09 f0       	breq	.+2      	; 0x78da <udi_cdc_comm_setup+0x2c>
    78d8:	3f c0       	rjmp	.+126    	; 0x7958 <udi_cdc_comm_setup+0xaa>
    78da:	eb e4       	ldi	r30, 0x4B	; 75
    78dc:	fa e2       	ldi	r31, 0x2A	; 42
    78de:	88 e2       	ldi	r24, 0x28	; 40
    78e0:	9a e2       	ldi	r25, 0x2A	; 42
    78e2:	80 87       	std	Z+8, r24	; 0x08
    78e4:	91 87       	std	Z+9, r25	; 0x09
    78e6:	87 e0       	ldi	r24, 0x07	; 7
    78e8:	90 e0       	ldi	r25, 0x00	; 0
    78ea:	82 87       	std	Z+10, r24	; 0x0a
    78ec:	93 87       	std	Z+11, r25	; 0x0b
    78ee:	81 e0       	ldi	r24, 0x01	; 1
    78f0:	3a c0       	rjmp	.+116    	; 0x7966 <udi_cdc_comm_setup+0xb8>
    78f2:	80 76       	andi	r24, 0x60	; 96
    78f4:	80 32       	cpi	r24, 0x20	; 32
    78f6:	91 f5       	brne	.+100    	; 0x795c <udi_cdc_comm_setup+0xae>
    78f8:	80 91 4c 2a 	lds	r24, 0x2A4C	; 0x802a4c <udd_g_ctrlreq+0x1>
    78fc:	80 32       	cpi	r24, 0x20	; 32
    78fe:	19 f0       	breq	.+6      	; 0x7906 <udi_cdc_comm_setup+0x58>
    7900:	82 32       	cpi	r24, 0x22	; 34
    7902:	b9 f0       	breq	.+46     	; 0x7932 <udi_cdc_comm_setup+0x84>
    7904:	2d c0       	rjmp	.+90     	; 0x7960 <udi_cdc_comm_setup+0xb2>
    7906:	80 91 51 2a 	lds	r24, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    790a:	90 91 52 2a 	lds	r25, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    790e:	07 97       	sbiw	r24, 0x07	; 7
    7910:	49 f5       	brne	.+82     	; 0x7964 <udi_cdc_comm_setup+0xb6>
    7912:	eb e4       	ldi	r30, 0x4B	; 75
    7914:	fa e2       	ldi	r31, 0x2A	; 42
    7916:	86 e4       	ldi	r24, 0x46	; 70
    7918:	9b e3       	ldi	r25, 0x3B	; 59
    791a:	84 87       	std	Z+12, r24	; 0x0c
    791c:	95 87       	std	Z+13, r25	; 0x0d
    791e:	88 e2       	ldi	r24, 0x28	; 40
    7920:	9a e2       	ldi	r25, 0x2A	; 42
    7922:	80 87       	std	Z+8, r24	; 0x08
    7924:	91 87       	std	Z+9, r25	; 0x09
    7926:	87 e0       	ldi	r24, 0x07	; 7
    7928:	90 e0       	ldi	r25, 0x00	; 0
    792a:	82 87       	std	Z+10, r24	; 0x0a
    792c:	93 87       	std	Z+11, r25	; 0x0b
    792e:	81 e0       	ldi	r24, 0x01	; 1
    7930:	1a c0       	rjmp	.+52     	; 0x7966 <udi_cdc_comm_setup+0xb8>
    7932:	cb e4       	ldi	r28, 0x4B	; 75
    7934:	da e2       	ldi	r29, 0x2A	; 42
    7936:	6a 81       	ldd	r22, Y+2	; 0x02
    7938:	61 70       	andi	r22, 0x01	; 1
    793a:	80 e0       	ldi	r24, 0x00	; 0
    793c:	ad d8       	rcall	.-3750   	; 0x6a98 <usb_callback_cdc_set_dtr>
    793e:	6a 81       	ldd	r22, Y+2	; 0x02
    7940:	7b 81       	ldd	r23, Y+3	; 0x03
    7942:	76 95       	lsr	r23
    7944:	67 95       	ror	r22
    7946:	61 70       	andi	r22, 0x01	; 1
    7948:	80 e0       	ldi	r24, 0x00	; 0
    794a:	a7 d8       	rcall	.-3762   	; 0x6a9a <usb_callback_cdc_set_rts>
    794c:	81 e0       	ldi	r24, 0x01	; 1
    794e:	0b c0       	rjmp	.+22     	; 0x7966 <udi_cdc_comm_setup+0xb8>
    7950:	80 e0       	ldi	r24, 0x00	; 0
    7952:	09 c0       	rjmp	.+18     	; 0x7966 <udi_cdc_comm_setup+0xb8>
    7954:	80 e0       	ldi	r24, 0x00	; 0
    7956:	07 c0       	rjmp	.+14     	; 0x7966 <udi_cdc_comm_setup+0xb8>
    7958:	80 e0       	ldi	r24, 0x00	; 0
    795a:	05 c0       	rjmp	.+10     	; 0x7966 <udi_cdc_comm_setup+0xb8>
    795c:	80 e0       	ldi	r24, 0x00	; 0
    795e:	03 c0       	rjmp	.+6      	; 0x7966 <udi_cdc_comm_setup+0xb8>
    7960:	80 e0       	ldi	r24, 0x00	; 0
    7962:	01 c0       	rjmp	.+2      	; 0x7966 <udi_cdc_comm_setup+0xb8>
    7964:	80 e0       	ldi	r24, 0x00	; 0
    7966:	df 91       	pop	r29
    7968:	cf 91       	pop	r28
    796a:	08 95       	ret

0000796c <udi_cdc_multi_get_nb_received_data>:
    796c:	cf 93       	push	r28
    796e:	df 93       	push	r29
    7970:	1f 92       	push	r1
    7972:	cd b7       	in	r28, 0x3d	; 61
    7974:	de b7       	in	r29, 0x3e	; 62
    7976:	8f b7       	in	r24, 0x3f	; 63
    7978:	89 83       	std	Y+1, r24	; 0x01
    797a:	f8 94       	cli
    797c:	49 81       	ldd	r20, Y+1	; 0x01
    797e:	20 91 91 29 	lds	r18, 0x2991	; 0x802991 <udi_cdc_rx_pos>
    7982:	30 91 92 29 	lds	r19, 0x2992	; 0x802992 <udi_cdc_rx_pos+0x1>
    7986:	e0 91 93 29 	lds	r30, 0x2993	; 0x802993 <udi_cdc_rx_buf_sel>
    798a:	f0 e0       	ldi	r31, 0x00	; 0
    798c:	ee 0f       	add	r30, r30
    798e:	ff 1f       	adc	r31, r31
    7990:	ec 56       	subi	r30, 0x6C	; 108
    7992:	f6 4d       	sbci	r31, 0xD6	; 214
    7994:	80 81       	ld	r24, Z
    7996:	91 81       	ldd	r25, Z+1	; 0x01
    7998:	4f bf       	out	0x3f, r20	; 63
    799a:	82 1b       	sub	r24, r18
    799c:	93 0b       	sbc	r25, r19
    799e:	0f 90       	pop	r0
    79a0:	df 91       	pop	r29
    79a2:	cf 91       	pop	r28
    79a4:	08 95       	ret

000079a6 <udi_cdc_multi_is_rx_ready>:
    79a6:	e2 df       	rcall	.-60     	; 0x796c <udi_cdc_multi_get_nb_received_data>
    79a8:	21 e0       	ldi	r18, 0x01	; 1
    79aa:	89 2b       	or	r24, r25
    79ac:	09 f4       	brne	.+2      	; 0x79b0 <udi_cdc_multi_is_rx_ready+0xa>
    79ae:	20 e0       	ldi	r18, 0x00	; 0
    79b0:	82 2f       	mov	r24, r18
    79b2:	08 95       	ret

000079b4 <udi_cdc_rx_start>:
    79b4:	0f 93       	push	r16
    79b6:	1f 93       	push	r17
    79b8:	cf 93       	push	r28
    79ba:	df 93       	push	r29
    79bc:	1f 92       	push	r1
    79be:	cd b7       	in	r28, 0x3d	; 61
    79c0:	de b7       	in	r29, 0x3e	; 62
    79c2:	8f b7       	in	r24, 0x3f	; 63
    79c4:	89 83       	std	Y+1, r24	; 0x01
    79c6:	f8 94       	cli
    79c8:	99 81       	ldd	r25, Y+1	; 0x01
    79ca:	20 91 93 29 	lds	r18, 0x2993	; 0x802993 <udi_cdc_rx_buf_sel>
    79ce:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udi_cdc_rx_trans_ongoing>
    79d2:	81 11       	cpse	r24, r1
    79d4:	10 c0       	rjmp	.+32     	; 0x79f6 <udi_cdc_rx_start+0x42>
    79d6:	60 91 91 29 	lds	r22, 0x2991	; 0x802991 <udi_cdc_rx_pos>
    79da:	70 91 92 29 	lds	r23, 0x2992	; 0x802992 <udi_cdc_rx_pos+0x1>
    79de:	02 2f       	mov	r16, r18
    79e0:	10 e0       	ldi	r17, 0x00	; 0
    79e2:	f8 01       	movw	r30, r16
    79e4:	ee 0f       	add	r30, r30
    79e6:	ff 1f       	adc	r31, r31
    79e8:	ec 56       	subi	r30, 0x6C	; 108
    79ea:	f6 4d       	sbci	r31, 0xD6	; 214
    79ec:	40 81       	ld	r20, Z
    79ee:	51 81       	ldd	r21, Z+1	; 0x01
    79f0:	64 17       	cp	r22, r20
    79f2:	75 07       	cpc	r23, r21
    79f4:	18 f4       	brcc	.+6      	; 0x79fc <udi_cdc_rx_start+0x48>
    79f6:	9f bf       	out	0x3f, r25	; 63
    79f8:	80 e0       	ldi	r24, 0x00	; 0
    79fa:	27 c0       	rjmp	.+78     	; 0x7a4a <udi_cdc_rx_start+0x96>
    79fc:	10 92 91 29 	sts	0x2991, r1	; 0x802991 <udi_cdc_rx_pos>
    7a00:	10 92 92 29 	sts	0x2992, r1	; 0x802992 <udi_cdc_rx_pos+0x1>
    7a04:	81 e0       	ldi	r24, 0x01	; 1
    7a06:	21 11       	cpse	r18, r1
    7a08:	80 e0       	ldi	r24, 0x00	; 0
    7a0a:	80 93 93 29 	sts	0x2993, r24	; 0x802993 <udi_cdc_rx_buf_sel>
    7a0e:	81 e0       	ldi	r24, 0x01	; 1
    7a10:	80 93 90 29 	sts	0x2990, r24	; 0x802990 <udi_cdc_rx_trans_ongoing>
    7a14:	9f bf       	out	0x3f, r25	; 63
    7a16:	80 e0       	ldi	r24, 0x00	; 0
    7a18:	c6 df       	rcall	.-116    	; 0x79a6 <udi_cdc_multi_is_rx_ready>
    7a1a:	88 23       	and	r24, r24
    7a1c:	11 f0       	breq	.+4      	; 0x7a22 <udi_cdc_rx_start+0x6e>
    7a1e:	80 e0       	ldi	r24, 0x00	; 0
    7a20:	3d d8       	rcall	.-3974   	; 0x6a9c <usb_callback_rx_notify>
    7a22:	a8 01       	movw	r20, r16
    7a24:	00 24       	eor	r0, r0
    7a26:	56 95       	lsr	r21
    7a28:	47 95       	ror	r20
    7a2a:	07 94       	ror	r0
    7a2c:	56 95       	lsr	r21
    7a2e:	47 95       	ror	r20
    7a30:	07 94       	ror	r0
    7a32:	54 2f       	mov	r21, r20
    7a34:	40 2d       	mov	r20, r0
    7a36:	48 56       	subi	r20, 0x68	; 104
    7a38:	56 4d       	sbci	r21, 0xD6	; 214
    7a3a:	0d e5       	ldi	r16, 0x5D	; 93
    7a3c:	1d e3       	ldi	r17, 0x3D	; 61
    7a3e:	20 e4       	ldi	r18, 0x40	; 64
    7a40:	30 e0       	ldi	r19, 0x00	; 0
    7a42:	61 e0       	ldi	r22, 0x01	; 1
    7a44:	82 e0       	ldi	r24, 0x02	; 2
    7a46:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <udd_ep_run>
    7a4a:	0f 90       	pop	r0
    7a4c:	df 91       	pop	r29
    7a4e:	cf 91       	pop	r28
    7a50:	1f 91       	pop	r17
    7a52:	0f 91       	pop	r16
    7a54:	08 95       	ret

00007a56 <udi_cdc_data_enable>:
    7a56:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <udi_cdc_nb_data_enabled>
    7a5a:	10 92 07 29 	sts	0x2907, r1	; 0x802907 <udi_cdc_tx_trans_ongoing>
    7a5e:	10 92 06 29 	sts	0x2906, r1	; 0x802906 <udi_cdc_tx_both_buf_to_send>
    7a62:	10 92 0a 29 	sts	0x290A, r1	; 0x80290a <udi_cdc_tx_buf_sel>
    7a66:	eb e0       	ldi	r30, 0x0B	; 11
    7a68:	f9 e2       	ldi	r31, 0x29	; 41
    7a6a:	10 82       	st	Z, r1
    7a6c:	11 82       	std	Z+1, r1	; 0x01
    7a6e:	12 82       	std	Z+2, r1	; 0x02
    7a70:	13 82       	std	Z+3, r1	; 0x03
    7a72:	10 92 08 29 	sts	0x2908, r1	; 0x802908 <udi_cdc_tx_sof_num>
    7a76:	10 92 09 29 	sts	0x2909, r1	; 0x802909 <udi_cdc_tx_sof_num+0x1>
    7a7a:	80 e0       	ldi	r24, 0x00	; 0
    7a7c:	3c de       	rcall	.-904    	; 0x76f6 <udi_cdc_tx_send>
    7a7e:	10 92 90 29 	sts	0x2990, r1	; 0x802990 <udi_cdc_rx_trans_ongoing>
    7a82:	10 92 93 29 	sts	0x2993, r1	; 0x802993 <udi_cdc_rx_buf_sel>
    7a86:	e4 e9       	ldi	r30, 0x94	; 148
    7a88:	f9 e2       	ldi	r31, 0x29	; 41
    7a8a:	10 82       	st	Z, r1
    7a8c:	11 82       	std	Z+1, r1	; 0x01
    7a8e:	12 82       	std	Z+2, r1	; 0x02
    7a90:	13 82       	std	Z+3, r1	; 0x03
    7a92:	10 92 91 29 	sts	0x2991, r1	; 0x802991 <udi_cdc_rx_pos>
    7a96:	10 92 92 29 	sts	0x2992, r1	; 0x802992 <udi_cdc_rx_pos+0x1>
    7a9a:	80 e0       	ldi	r24, 0x00	; 0
    7a9c:	8b df       	rcall	.-234    	; 0x79b4 <udi_cdc_rx_start>
    7a9e:	88 23       	and	r24, r24
    7aa0:	59 f0       	breq	.+22     	; 0x7ab8 <udi_cdc_data_enable+0x62>
    7aa2:	90 91 19 2a 	lds	r25, 0x2A19	; 0x802a19 <udi_cdc_nb_data_enabled>
    7aa6:	9f 5f       	subi	r25, 0xFF	; 255
    7aa8:	90 93 19 2a 	sts	0x2A19, r25	; 0x802a19 <udi_cdc_nb_data_enabled>
    7aac:	90 91 19 2a 	lds	r25, 0x2A19	; 0x802a19 <udi_cdc_nb_data_enabled>
    7ab0:	91 30       	cpi	r25, 0x01	; 1
    7ab2:	11 f4       	brne	.+4      	; 0x7ab8 <udi_cdc_data_enable+0x62>
    7ab4:	90 93 18 2a 	sts	0x2A18, r25	; 0x802a18 <udi_cdc_data_running>
    7ab8:	08 95       	ret

00007aba <udi_cdc_data_received>:
    7aba:	0f 93       	push	r16
    7abc:	1f 93       	push	r17
    7abe:	81 11       	cpse	r24, r1
    7ac0:	29 c0       	rjmp	.+82     	; 0x7b14 <udi_cdc_data_received+0x5a>
    7ac2:	80 91 93 29 	lds	r24, 0x2993	; 0x802993 <udi_cdc_rx_buf_sel>
    7ac6:	e1 e0       	ldi	r30, 0x01	; 1
    7ac8:	81 11       	cpse	r24, r1
    7aca:	e0 e0       	ldi	r30, 0x00	; 0
    7acc:	84 2f       	mov	r24, r20
    7ace:	61 15       	cp	r22, r1
    7ad0:	71 05       	cpc	r23, r1
    7ad2:	a9 f4       	brne	.+42     	; 0x7afe <udi_cdc_data_received+0x44>
    7ad4:	4e 2f       	mov	r20, r30
    7ad6:	50 e0       	ldi	r21, 0x00	; 0
    7ad8:	00 24       	eor	r0, r0
    7ada:	56 95       	lsr	r21
    7adc:	47 95       	ror	r20
    7ade:	07 94       	ror	r0
    7ae0:	56 95       	lsr	r21
    7ae2:	47 95       	ror	r20
    7ae4:	07 94       	ror	r0
    7ae6:	54 2f       	mov	r21, r20
    7ae8:	40 2d       	mov	r20, r0
    7aea:	48 56       	subi	r20, 0x68	; 104
    7aec:	56 4d       	sbci	r21, 0xD6	; 214
    7aee:	0d e5       	ldi	r16, 0x5D	; 93
    7af0:	1d e3       	ldi	r17, 0x3D	; 61
    7af2:	20 e4       	ldi	r18, 0x40	; 64
    7af4:	30 e0       	ldi	r19, 0x00	; 0
    7af6:	61 e0       	ldi	r22, 0x01	; 1
    7af8:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <udd_ep_run>
    7afc:	0b c0       	rjmp	.+22     	; 0x7b14 <udi_cdc_data_received+0x5a>
    7afe:	f0 e0       	ldi	r31, 0x00	; 0
    7b00:	ee 0f       	add	r30, r30
    7b02:	ff 1f       	adc	r31, r31
    7b04:	ec 56       	subi	r30, 0x6C	; 108
    7b06:	f6 4d       	sbci	r31, 0xD6	; 214
    7b08:	60 83       	st	Z, r22
    7b0a:	71 83       	std	Z+1, r23	; 0x01
    7b0c:	10 92 90 29 	sts	0x2990, r1	; 0x802990 <udi_cdc_rx_trans_ongoing>
    7b10:	80 e0       	ldi	r24, 0x00	; 0
    7b12:	50 df       	rcall	.-352    	; 0x79b4 <udi_cdc_rx_start>
    7b14:	1f 91       	pop	r17
    7b16:	0f 91       	pop	r16
    7b18:	08 95       	ret

00007b1a <udi_cdc_multi_getc>:
    7b1a:	ef 92       	push	r14
    7b1c:	ff 92       	push	r15
    7b1e:	1f 93       	push	r17
    7b20:	cf 93       	push	r28
    7b22:	df 93       	push	r29
    7b24:	1f 92       	push	r1
    7b26:	cd b7       	in	r28, 0x3d	; 61
    7b28:	de b7       	in	r29, 0x3e	; 62
    7b2a:	11 e0       	ldi	r17, 0x01	; 1
    7b2c:	80 91 2e 2a 	lds	r24, 0x2A2E	; 0x802a2e <udi_cdc_line_coding+0x6>
    7b30:	89 30       	cpi	r24, 0x09	; 9
    7b32:	09 f0       	breq	.+2      	; 0x7b36 <udi_cdc_multi_getc+0x1c>
    7b34:	10 e0       	ldi	r17, 0x00	; 0
    7b36:	40 e0       	ldi	r20, 0x00	; 0
    7b38:	50 e0       	ldi	r21, 0x00	; 0
    7b3a:	8f b7       	in	r24, 0x3f	; 63
    7b3c:	89 83       	std	Y+1, r24	; 0x01
    7b3e:	f8 94       	cli
    7b40:	a9 81       	ldd	r26, Y+1	; 0x01
    7b42:	20 91 91 29 	lds	r18, 0x2991	; 0x802991 <udi_cdc_rx_pos>
    7b46:	30 91 92 29 	lds	r19, 0x2992	; 0x802992 <udi_cdc_rx_pos+0x1>
    7b4a:	80 91 93 29 	lds	r24, 0x2993	; 0x802993 <udi_cdc_rx_buf_sel>
    7b4e:	90 e0       	ldi	r25, 0x00	; 0
    7b50:	fc 01       	movw	r30, r24
    7b52:	ee 0f       	add	r30, r30
    7b54:	ff 1f       	adc	r31, r31
    7b56:	ec 56       	subi	r30, 0x6C	; 108
    7b58:	f6 4d       	sbci	r31, 0xD6	; 214
    7b5a:	60 81       	ld	r22, Z
    7b5c:	71 81       	ldd	r23, Z+1	; 0x01
    7b5e:	af bf       	out	0x3f, r26	; 63
    7b60:	26 17       	cp	r18, r22
    7b62:	37 07       	cpc	r19, r23
    7b64:	30 f0       	brcs	.+12     	; 0x7b72 <udi_cdc_multi_getc+0x58>
    7b66:	80 91 18 2a 	lds	r24, 0x2A18	; 0x802a18 <udi_cdc_data_running>
    7b6a:	81 11       	cpse	r24, r1
    7b6c:	e6 cf       	rjmp	.-52     	; 0x7b3a <udi_cdc_multi_getc+0x20>
    7b6e:	90 e0       	ldi	r25, 0x00	; 0
    7b70:	21 c0       	rjmp	.+66     	; 0x7bb4 <udi_cdc_multi_getc+0x9a>
    7b72:	fc 01       	movw	r30, r24
    7b74:	00 24       	eor	r0, r0
    7b76:	f6 95       	lsr	r31
    7b78:	e7 95       	ror	r30
    7b7a:	07 94       	ror	r0
    7b7c:	f6 95       	lsr	r31
    7b7e:	e7 95       	ror	r30
    7b80:	07 94       	ror	r0
    7b82:	fe 2f       	mov	r31, r30
    7b84:	e0 2d       	mov	r30, r0
    7b86:	e8 56       	subi	r30, 0x68	; 104
    7b88:	f6 4d       	sbci	r31, 0xD6	; 214
    7b8a:	e2 0f       	add	r30, r18
    7b8c:	f3 1f       	adc	r31, r19
    7b8e:	80 81       	ld	r24, Z
    7b90:	7a 01       	movw	r14, r20
    7b92:	e8 2a       	or	r14, r24
    7b94:	2f 5f       	subi	r18, 0xFF	; 255
    7b96:	3f 4f       	sbci	r19, 0xFF	; 255
    7b98:	20 93 91 29 	sts	0x2991, r18	; 0x802991 <udi_cdc_rx_pos>
    7b9c:	30 93 92 29 	sts	0x2992, r19	; 0x802992 <udi_cdc_rx_pos+0x1>
    7ba0:	80 e0       	ldi	r24, 0x00	; 0
    7ba2:	08 df       	rcall	.-496    	; 0x79b4 <udi_cdc_rx_start>
    7ba4:	11 23       	and	r17, r17
    7ba6:	21 f0       	breq	.+8      	; 0x7bb0 <udi_cdc_multi_getc+0x96>
    7ba8:	5e 2d       	mov	r21, r14
    7baa:	44 27       	eor	r20, r20
    7bac:	10 e0       	ldi	r17, 0x00	; 0
    7bae:	c5 cf       	rjmp	.-118    	; 0x7b3a <udi_cdc_multi_getc+0x20>
    7bb0:	8e 2d       	mov	r24, r14
    7bb2:	9f 2d       	mov	r25, r15
    7bb4:	0f 90       	pop	r0
    7bb6:	df 91       	pop	r29
    7bb8:	cf 91       	pop	r28
    7bba:	1f 91       	pop	r17
    7bbc:	ff 90       	pop	r15
    7bbe:	ef 90       	pop	r14
    7bc0:	08 95       	ret

00007bc2 <udi_cdc_getc>:
    7bc2:	80 e0       	ldi	r24, 0x00	; 0
    7bc4:	aa cf       	rjmp	.-172    	; 0x7b1a <udi_cdc_multi_getc>
    7bc6:	08 95       	ret

00007bc8 <udi_cdc_multi_get_free_tx_buffer>:
    7bc8:	cf 93       	push	r28
    7bca:	df 93       	push	r29
    7bcc:	1f 92       	push	r1
    7bce:	cd b7       	in	r28, 0x3d	; 61
    7bd0:	de b7       	in	r29, 0x3e	; 62
    7bd2:	8f b7       	in	r24, 0x3f	; 63
    7bd4:	89 83       	std	Y+1, r24	; 0x01
    7bd6:	f8 94       	cli
    7bd8:	99 81       	ldd	r25, Y+1	; 0x01
    7bda:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <udi_cdc_tx_buf_sel>
    7bde:	e8 2f       	mov	r30, r24
    7be0:	f0 e0       	ldi	r31, 0x00	; 0
    7be2:	ee 0f       	add	r30, r30
    7be4:	ff 1f       	adc	r31, r31
    7be6:	e5 5f       	subi	r30, 0xF5	; 245
    7be8:	f6 4d       	sbci	r31, 0xD6	; 214
    7bea:	20 81       	ld	r18, Z
    7bec:	31 81       	ldd	r19, Z+1	; 0x01
    7bee:	20 34       	cpi	r18, 0x40	; 64
    7bf0:	31 05       	cpc	r19, r1
    7bf2:	89 f4       	brne	.+34     	; 0x7c16 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    7bf4:	40 91 07 29 	lds	r20, 0x2907	; 0x802907 <udi_cdc_tx_trans_ongoing>
    7bf8:	41 11       	cpse	r20, r1
    7bfa:	0d c0       	rjmp	.+26     	; 0x7c16 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    7bfc:	40 91 06 29 	lds	r20, 0x2906	; 0x802906 <udi_cdc_tx_both_buf_to_send>
    7c00:	41 11       	cpse	r20, r1
    7c02:	09 c0       	rjmp	.+18     	; 0x7c16 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    7c04:	21 e0       	ldi	r18, 0x01	; 1
    7c06:	20 93 06 29 	sts	0x2906, r18	; 0x802906 <udi_cdc_tx_both_buf_to_send>
    7c0a:	81 11       	cpse	r24, r1
    7c0c:	20 e0       	ldi	r18, 0x00	; 0
    7c0e:	20 93 0a 29 	sts	0x290A, r18	; 0x80290a <udi_cdc_tx_buf_sel>
    7c12:	20 e0       	ldi	r18, 0x00	; 0
    7c14:	30 e0       	ldi	r19, 0x00	; 0
    7c16:	9f bf       	out	0x3f, r25	; 63
    7c18:	80 e4       	ldi	r24, 0x40	; 64
    7c1a:	90 e0       	ldi	r25, 0x00	; 0
    7c1c:	82 1b       	sub	r24, r18
    7c1e:	93 0b       	sbc	r25, r19
    7c20:	0f 90       	pop	r0
    7c22:	df 91       	pop	r29
    7c24:	cf 91       	pop	r28
    7c26:	08 95       	ret

00007c28 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    7c28:	cf df       	rcall	.-98     	; 0x7bc8 <udi_cdc_multi_get_free_tx_buffer>
    7c2a:	21 e0       	ldi	r18, 0x01	; 1
    7c2c:	89 2b       	or	r24, r25
    7c2e:	09 f4       	brne	.+2      	; 0x7c32 <udi_cdc_multi_is_tx_ready+0xa>
    7c30:	20 e0       	ldi	r18, 0x00	; 0
    7c32:	82 2f       	mov	r24, r18
    7c34:	08 95       	ret

00007c36 <udi_cdc_multi_putc>:
    7c36:	ff 92       	push	r15
    7c38:	0f 93       	push	r16
    7c3a:	1f 93       	push	r17
    7c3c:	cf 93       	push	r28
    7c3e:	df 93       	push	r29
    7c40:	1f 92       	push	r1
    7c42:	cd b7       	in	r28, 0x3d	; 61
    7c44:	de b7       	in	r29, 0x3e	; 62
    7c46:	f6 2e       	mov	r15, r22
    7c48:	17 2f       	mov	r17, r23
    7c4a:	01 e0       	ldi	r16, 0x01	; 1
    7c4c:	80 91 2e 2a 	lds	r24, 0x2A2E	; 0x802a2e <udi_cdc_line_coding+0x6>
    7c50:	89 30       	cpi	r24, 0x09	; 9
    7c52:	09 f0       	breq	.+2      	; 0x7c56 <udi_cdc_multi_putc+0x20>
    7c54:	00 e0       	ldi	r16, 0x00	; 0
    7c56:	80 e0       	ldi	r24, 0x00	; 0
    7c58:	e7 df       	rcall	.-50     	; 0x7c28 <udi_cdc_multi_is_tx_ready>
    7c5a:	81 11       	cpse	r24, r1
    7c5c:	07 c0       	rjmp	.+14     	; 0x7c6c <udi_cdc_multi_putc+0x36>
    7c5e:	80 91 18 2a 	lds	r24, 0x2A18	; 0x802a18 <udi_cdc_data_running>
    7c62:	81 11       	cpse	r24, r1
    7c64:	f8 cf       	rjmp	.-16     	; 0x7c56 <udi_cdc_multi_putc+0x20>
    7c66:	80 e0       	ldi	r24, 0x00	; 0
    7c68:	90 e0       	ldi	r25, 0x00	; 0
    7c6a:	2c c0       	rjmp	.+88     	; 0x7cc4 <udi_cdc_multi_putc+0x8e>
    7c6c:	8f b7       	in	r24, 0x3f	; 63
    7c6e:	89 83       	std	Y+1, r24	; 0x01
    7c70:	f8 94       	cli
    7c72:	49 81       	ldd	r20, Y+1	; 0x01
    7c74:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <udi_cdc_tx_buf_sel>
    7c78:	90 e0       	ldi	r25, 0x00	; 0
    7c7a:	fc 01       	movw	r30, r24
    7c7c:	ee 0f       	add	r30, r30
    7c7e:	ff 1f       	adc	r31, r31
    7c80:	e5 5f       	subi	r30, 0xF5	; 245
    7c82:	f6 4d       	sbci	r31, 0xD6	; 214
    7c84:	20 81       	ld	r18, Z
    7c86:	31 81       	ldd	r19, Z+1	; 0x01
    7c88:	b9 01       	movw	r22, r18
    7c8a:	6f 5f       	subi	r22, 0xFF	; 255
    7c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    7c8e:	60 83       	st	Z, r22
    7c90:	71 83       	std	Z+1, r23	; 0x01
    7c92:	00 24       	eor	r0, r0
    7c94:	96 95       	lsr	r25
    7c96:	87 95       	ror	r24
    7c98:	07 94       	ror	r0
    7c9a:	96 95       	lsr	r25
    7c9c:	87 95       	ror	r24
    7c9e:	07 94       	ror	r0
    7ca0:	98 2f       	mov	r25, r24
    7ca2:	80 2d       	mov	r24, r0
    7ca4:	80 5f       	subi	r24, 0xF0	; 240
    7ca6:	96 4d       	sbci	r25, 0xD6	; 214
    7ca8:	fc 01       	movw	r30, r24
    7caa:	e2 0f       	add	r30, r18
    7cac:	f3 1f       	adc	r31, r19
    7cae:	f0 82       	st	Z, r15
    7cb0:	4f bf       	out	0x3f, r20	; 63
    7cb2:	00 23       	and	r16, r16
    7cb4:	29 f0       	breq	.+10     	; 0x7cc0 <udi_cdc_multi_putc+0x8a>
    7cb6:	f1 2e       	mov	r15, r17
    7cb8:	11 0f       	add	r17, r17
    7cba:	11 0b       	sbc	r17, r17
    7cbc:	00 e0       	ldi	r16, 0x00	; 0
    7cbe:	cb cf       	rjmp	.-106    	; 0x7c56 <udi_cdc_multi_putc+0x20>
    7cc0:	81 e0       	ldi	r24, 0x01	; 1
    7cc2:	90 e0       	ldi	r25, 0x00	; 0
    7cc4:	0f 90       	pop	r0
    7cc6:	df 91       	pop	r29
    7cc8:	cf 91       	pop	r28
    7cca:	1f 91       	pop	r17
    7ccc:	0f 91       	pop	r16
    7cce:	ff 90       	pop	r15
    7cd0:	08 95       	ret

00007cd2 <udi_cdc_putc>:
    7cd2:	bc 01       	movw	r22, r24
    7cd4:	80 e0       	ldi	r24, 0x00	; 0
    7cd6:	af cf       	rjmp	.-162    	; 0x7c36 <udi_cdc_multi_putc>
    7cd8:	08 95       	ret

00007cda <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    7cda:	e0 91 34 2a 	lds	r30, 0x2A34	; 0x802a34 <udc_ptr_conf>
    7cde:	f0 91 35 2a 	lds	r31, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    7ce2:	01 90       	ld	r0, Z+
    7ce4:	f0 81       	ld	r31, Z
    7ce6:	e0 2d       	mov	r30, r0
    7ce8:	22 81       	ldd	r18, Z+2	; 0x02
    7cea:	33 81       	ldd	r19, Z+3	; 0x03
    7cec:	2e 0f       	add	r18, r30
    7cee:	3f 1f       	adc	r19, r31
    7cf0:	fc 01       	movw	r30, r24
    7cf2:	40 81       	ld	r20, Z
    7cf4:	e4 0f       	add	r30, r20
    7cf6:	f1 1d       	adc	r31, r1
    7cf8:	e2 17       	cp	r30, r18
    7cfa:	f3 07       	cpc	r31, r19
    7cfc:	a0 f4       	brcc	.+40     	; 0x7d26 <udc_next_desc_in_iface+0x4c>
    7cfe:	81 81       	ldd	r24, Z+1	; 0x01
    7d00:	84 30       	cpi	r24, 0x04	; 4
    7d02:	a1 f0       	breq	.+40     	; 0x7d2c <udc_next_desc_in_iface+0x52>
    7d04:	86 13       	cpse	r24, r22
    7d06:	06 c0       	rjmp	.+12     	; 0x7d14 <udc_next_desc_in_iface+0x3a>
    7d08:	14 c0       	rjmp	.+40     	; 0x7d32 <udc_next_desc_in_iface+0x58>
    7d0a:	81 81       	ldd	r24, Z+1	; 0x01
    7d0c:	84 30       	cpi	r24, 0x04	; 4
    7d0e:	a1 f0       	breq	.+40     	; 0x7d38 <udc_next_desc_in_iface+0x5e>
    7d10:	86 17       	cp	r24, r22
    7d12:	a9 f0       	breq	.+42     	; 0x7d3e <udc_next_desc_in_iface+0x64>
    7d14:	80 81       	ld	r24, Z
    7d16:	e8 0f       	add	r30, r24
    7d18:	f1 1d       	adc	r31, r1
    7d1a:	e2 17       	cp	r30, r18
    7d1c:	f3 07       	cpc	r31, r19
    7d1e:	a8 f3       	brcs	.-22     	; 0x7d0a <udc_next_desc_in_iface+0x30>
    7d20:	80 e0       	ldi	r24, 0x00	; 0
    7d22:	90 e0       	ldi	r25, 0x00	; 0
    7d24:	08 95       	ret
    7d26:	80 e0       	ldi	r24, 0x00	; 0
    7d28:	90 e0       	ldi	r25, 0x00	; 0
    7d2a:	08 95       	ret
    7d2c:	80 e0       	ldi	r24, 0x00	; 0
    7d2e:	90 e0       	ldi	r25, 0x00	; 0
    7d30:	08 95       	ret
    7d32:	8e 2f       	mov	r24, r30
    7d34:	9f 2f       	mov	r25, r31
    7d36:	08 95       	ret
    7d38:	80 e0       	ldi	r24, 0x00	; 0
    7d3a:	90 e0       	ldi	r25, 0x00	; 0
    7d3c:	08 95       	ret
    7d3e:	8e 2f       	mov	r24, r30
    7d40:	9f 2f       	mov	r25, r31
    7d42:	08 95       	ret

00007d44 <udc_valid_address>:
    7d44:	80 91 4d 2a 	lds	r24, 0x2A4D	; 0x802a4d <udd_g_ctrlreq+0x2>
    7d48:	8f 77       	andi	r24, 0x7F	; 127
    7d4a:	0c 94 b8 2c 	jmp	0x5970	; 0x5970 <udd_set_address>
    7d4e:	08 95       	ret

00007d50 <udc_update_iface_desc>:
    7d50:	90 91 36 2a 	lds	r25, 0x2A36	; 0x802a36 <udc_num_configuration>
    7d54:	99 23       	and	r25, r25
    7d56:	81 f1       	breq	.+96     	; 0x7db8 <udc_update_iface_desc+0x68>
    7d58:	e0 91 34 2a 	lds	r30, 0x2A34	; 0x802a34 <udc_ptr_conf>
    7d5c:	f0 91 35 2a 	lds	r31, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    7d60:	01 90       	ld	r0, Z+
    7d62:	f0 81       	ld	r31, Z
    7d64:	e0 2d       	mov	r30, r0
    7d66:	94 81       	ldd	r25, Z+4	; 0x04
    7d68:	89 17       	cp	r24, r25
    7d6a:	40 f5       	brcc	.+80     	; 0x7dbc <udc_update_iface_desc+0x6c>
    7d6c:	e0 93 32 2a 	sts	0x2A32, r30	; 0x802a32 <udc_ptr_iface>
    7d70:	f0 93 33 2a 	sts	0x2A33, r31	; 0x802a33 <udc_ptr_iface+0x1>
    7d74:	22 81       	ldd	r18, Z+2	; 0x02
    7d76:	33 81       	ldd	r19, Z+3	; 0x03
    7d78:	2e 0f       	add	r18, r30
    7d7a:	3f 1f       	adc	r19, r31
    7d7c:	e2 17       	cp	r30, r18
    7d7e:	f3 07       	cpc	r31, r19
    7d80:	f8 f4       	brcc	.+62     	; 0x7dc0 <udc_update_iface_desc+0x70>
    7d82:	91 81       	ldd	r25, Z+1	; 0x01
    7d84:	94 30       	cpi	r25, 0x04	; 4
    7d86:	61 f4       	brne	.+24     	; 0x7da0 <udc_update_iface_desc+0x50>
    7d88:	92 81       	ldd	r25, Z+2	; 0x02
    7d8a:	89 13       	cpse	r24, r25
    7d8c:	09 c0       	rjmp	.+18     	; 0x7da0 <udc_update_iface_desc+0x50>
    7d8e:	93 81       	ldd	r25, Z+3	; 0x03
    7d90:	96 13       	cpse	r25, r22
    7d92:	06 c0       	rjmp	.+12     	; 0x7da0 <udc_update_iface_desc+0x50>
    7d94:	e0 93 32 2a 	sts	0x2A32, r30	; 0x802a32 <udc_ptr_iface>
    7d98:	f0 93 33 2a 	sts	0x2A33, r31	; 0x802a33 <udc_ptr_iface+0x1>
    7d9c:	81 e0       	ldi	r24, 0x01	; 1
    7d9e:	08 95       	ret
    7da0:	90 81       	ld	r25, Z
    7da2:	e9 0f       	add	r30, r25
    7da4:	f1 1d       	adc	r31, r1
    7da6:	e2 17       	cp	r30, r18
    7da8:	f3 07       	cpc	r31, r19
    7daa:	58 f3       	brcs	.-42     	; 0x7d82 <udc_update_iface_desc+0x32>
    7dac:	e0 93 32 2a 	sts	0x2A32, r30	; 0x802a32 <udc_ptr_iface>
    7db0:	f0 93 33 2a 	sts	0x2A33, r31	; 0x802a33 <udc_ptr_iface+0x1>
    7db4:	80 e0       	ldi	r24, 0x00	; 0
    7db6:	08 95       	ret
    7db8:	80 e0       	ldi	r24, 0x00	; 0
    7dba:	08 95       	ret
    7dbc:	80 e0       	ldi	r24, 0x00	; 0
    7dbe:	08 95       	ret
    7dc0:	80 e0       	ldi	r24, 0x00	; 0
    7dc2:	08 95       	ret

00007dc4 <udc_iface_disable>:
    7dc4:	ef 92       	push	r14
    7dc6:	ff 92       	push	r15
    7dc8:	1f 93       	push	r17
    7dca:	cf 93       	push	r28
    7dcc:	df 93       	push	r29
    7dce:	c8 2f       	mov	r28, r24
    7dd0:	60 e0       	ldi	r22, 0x00	; 0
    7dd2:	be df       	rcall	.-132    	; 0x7d50 <udc_update_iface_desc>
    7dd4:	18 2f       	mov	r17, r24
    7dd6:	88 23       	and	r24, r24
    7dd8:	81 f1       	breq	.+96     	; 0x7e3a <udc_iface_disable+0x76>
    7dda:	a0 91 34 2a 	lds	r26, 0x2A34	; 0x802a34 <udc_ptr_conf>
    7dde:	b0 91 35 2a 	lds	r27, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    7de2:	ec 2f       	mov	r30, r28
    7de4:	f0 e0       	ldi	r31, 0x00	; 0
    7de6:	ee 0f       	add	r30, r30
    7de8:	ff 1f       	adc	r31, r31
    7dea:	12 96       	adiw	r26, 0x02	; 2
    7dec:	8d 91       	ld	r24, X+
    7dee:	9c 91       	ld	r25, X
    7df0:	13 97       	sbiw	r26, 0x03	; 3
    7df2:	e8 0f       	add	r30, r24
    7df4:	f9 1f       	adc	r31, r25
    7df6:	e0 80       	ld	r14, Z
    7df8:	f1 80       	ldd	r15, Z+1	; 0x01
    7dfa:	d7 01       	movw	r26, r14
    7dfc:	16 96       	adiw	r26, 0x06	; 6
    7dfe:	ed 91       	ld	r30, X+
    7e00:	fc 91       	ld	r31, X
    7e02:	17 97       	sbiw	r26, 0x07	; 7
    7e04:	19 95       	eicall
    7e06:	68 2f       	mov	r22, r24
    7e08:	8c 2f       	mov	r24, r28
    7e0a:	a2 df       	rcall	.-188    	; 0x7d50 <udc_update_iface_desc>
    7e0c:	18 2f       	mov	r17, r24
    7e0e:	88 23       	and	r24, r24
    7e10:	a1 f0       	breq	.+40     	; 0x7e3a <udc_iface_disable+0x76>
    7e12:	c0 91 32 2a 	lds	r28, 0x2A32	; 0x802a32 <udc_ptr_iface>
    7e16:	d0 91 33 2a 	lds	r29, 0x2A33	; 0x802a33 <udc_ptr_iface+0x1>
    7e1a:	65 e0       	ldi	r22, 0x05	; 5
    7e1c:	ce 01       	movw	r24, r28
    7e1e:	5d df       	rcall	.-326    	; 0x7cda <udc_next_desc_in_iface>
    7e20:	ec 01       	movw	r28, r24
    7e22:	89 2b       	or	r24, r25
    7e24:	21 f0       	breq	.+8      	; 0x7e2e <udc_iface_disable+0x6a>
    7e26:	8a 81       	ldd	r24, Y+2	; 0x02
    7e28:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <udd_ep_free>
    7e2c:	f6 cf       	rjmp	.-20     	; 0x7e1a <udc_iface_disable+0x56>
    7e2e:	d7 01       	movw	r26, r14
    7e30:	12 96       	adiw	r26, 0x02	; 2
    7e32:	ed 91       	ld	r30, X+
    7e34:	fc 91       	ld	r31, X
    7e36:	13 97       	sbiw	r26, 0x03	; 3
    7e38:	19 95       	eicall
    7e3a:	81 2f       	mov	r24, r17
    7e3c:	df 91       	pop	r29
    7e3e:	cf 91       	pop	r28
    7e40:	1f 91       	pop	r17
    7e42:	ff 90       	pop	r15
    7e44:	ef 90       	pop	r14
    7e46:	08 95       	ret

00007e48 <udc_iface_enable>:
    7e48:	1f 93       	push	r17
    7e4a:	cf 93       	push	r28
    7e4c:	df 93       	push	r29
    7e4e:	18 2f       	mov	r17, r24
    7e50:	7f df       	rcall	.-258    	; 0x7d50 <udc_update_iface_desc>
    7e52:	88 23       	and	r24, r24
    7e54:	41 f1       	breq	.+80     	; 0x7ea6 <udc_iface_enable+0x5e>
    7e56:	c0 91 32 2a 	lds	r28, 0x2A32	; 0x802a32 <udc_ptr_iface>
    7e5a:	d0 91 33 2a 	lds	r29, 0x2A33	; 0x802a33 <udc_ptr_iface+0x1>
    7e5e:	65 e0       	ldi	r22, 0x05	; 5
    7e60:	ce 01       	movw	r24, r28
    7e62:	3b df       	rcall	.-394    	; 0x7cda <udc_next_desc_in_iface>
    7e64:	ec 01       	movw	r28, r24
    7e66:	89 2b       	or	r24, r25
    7e68:	49 f0       	breq	.+18     	; 0x7e7c <udc_iface_enable+0x34>
    7e6a:	4c 81       	ldd	r20, Y+4	; 0x04
    7e6c:	5d 81       	ldd	r21, Y+5	; 0x05
    7e6e:	6b 81       	ldd	r22, Y+3	; 0x03
    7e70:	8a 81       	ldd	r24, Y+2	; 0x02
    7e72:	0e 94 cd 2c 	call	0x599a	; 0x599a <udd_ep_alloc>
    7e76:	81 11       	cpse	r24, r1
    7e78:	f2 cf       	rjmp	.-28     	; 0x7e5e <udc_iface_enable+0x16>
    7e7a:	15 c0       	rjmp	.+42     	; 0x7ea6 <udc_iface_enable+0x5e>
    7e7c:	a0 91 34 2a 	lds	r26, 0x2A34	; 0x802a34 <udc_ptr_conf>
    7e80:	b0 91 35 2a 	lds	r27, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    7e84:	e1 2f       	mov	r30, r17
    7e86:	f0 e0       	ldi	r31, 0x00	; 0
    7e88:	ee 0f       	add	r30, r30
    7e8a:	ff 1f       	adc	r31, r31
    7e8c:	12 96       	adiw	r26, 0x02	; 2
    7e8e:	8d 91       	ld	r24, X+
    7e90:	9c 91       	ld	r25, X
    7e92:	13 97       	sbiw	r26, 0x03	; 3
    7e94:	e8 0f       	add	r30, r24
    7e96:	f9 1f       	adc	r31, r25
    7e98:	01 90       	ld	r0, Z+
    7e9a:	f0 81       	ld	r31, Z
    7e9c:	e0 2d       	mov	r30, r0
    7e9e:	01 90       	ld	r0, Z+
    7ea0:	f0 81       	ld	r31, Z
    7ea2:	e0 2d       	mov	r30, r0
    7ea4:	19 95       	eicall
    7ea6:	df 91       	pop	r29
    7ea8:	cf 91       	pop	r28
    7eaa:	1f 91       	pop	r17
    7eac:	08 95       	ret

00007eae <udc_start>:
    7eae:	0c 94 31 2c 	jmp	0x5862	; 0x5862 <udd_enable>
    7eb2:	08 95       	ret

00007eb4 <udc_reset>:
    7eb4:	cf 93       	push	r28
    7eb6:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <udc_num_configuration>
    7eba:	88 23       	and	r24, r24
    7ebc:	c1 f0       	breq	.+48     	; 0x7eee <udc_reset+0x3a>
    7ebe:	e0 91 34 2a 	lds	r30, 0x2A34	; 0x802a34 <udc_ptr_conf>
    7ec2:	f0 91 35 2a 	lds	r31, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    7ec6:	01 90       	ld	r0, Z+
    7ec8:	f0 81       	ld	r31, Z
    7eca:	e0 2d       	mov	r30, r0
    7ecc:	84 81       	ldd	r24, Z+4	; 0x04
    7ece:	88 23       	and	r24, r24
    7ed0:	71 f0       	breq	.+28     	; 0x7eee <udc_reset+0x3a>
    7ed2:	c0 e0       	ldi	r28, 0x00	; 0
    7ed4:	8c 2f       	mov	r24, r28
    7ed6:	76 df       	rcall	.-276    	; 0x7dc4 <udc_iface_disable>
    7ed8:	cf 5f       	subi	r28, 0xFF	; 255
    7eda:	e0 91 34 2a 	lds	r30, 0x2A34	; 0x802a34 <udc_ptr_conf>
    7ede:	f0 91 35 2a 	lds	r31, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    7ee2:	01 90       	ld	r0, Z+
    7ee4:	f0 81       	ld	r31, Z
    7ee6:	e0 2d       	mov	r30, r0
    7ee8:	84 81       	ldd	r24, Z+4	; 0x04
    7eea:	c8 17       	cp	r28, r24
    7eec:	98 f3       	brcs	.-26     	; 0x7ed4 <udc_reset+0x20>
    7eee:	10 92 36 2a 	sts	0x2A36, r1	; 0x802a36 <udc_num_configuration>
    7ef2:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <udc_device_status>
    7ef6:	81 fd       	sbrc	r24, 1
    7ef8:	0e 94 43 35 	call	0x6a86	; 0x6a86 <usb_callback_remotewakeup_disable>
    7efc:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <udc_device_status>
    7f00:	10 92 3b 2a 	sts	0x2A3B, r1	; 0x802a3b <udc_device_status+0x1>
    7f04:	cf 91       	pop	r28
    7f06:	08 95       	ret

00007f08 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    7f08:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    7f0a:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <udc_num_configuration>
    7f0e:	88 23       	and	r24, r24
    7f10:	49 f1       	breq	.+82     	; 0x7f64 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7f12:	a0 91 34 2a 	lds	r26, 0x2A34	; 0x802a34 <udc_ptr_conf>
    7f16:	b0 91 35 2a 	lds	r27, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    7f1a:	ed 91       	ld	r30, X+
    7f1c:	fc 91       	ld	r31, X
    7f1e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    7f20:	84 81       	ldd	r24, Z+4	; 0x04
    7f22:	88 23       	and	r24, r24
    7f24:	f9 f0       	breq	.+62     	; 0x7f64 <udc_sof_notify+0x5c>
    7f26:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    7f28:	ec 2f       	mov	r30, r28
    7f2a:	f0 e0       	ldi	r31, 0x00	; 0
    7f2c:	ee 0f       	add	r30, r30
    7f2e:	ff 1f       	adc	r31, r31
    7f30:	12 96       	adiw	r26, 0x02	; 2
    7f32:	8d 91       	ld	r24, X+
    7f34:	9c 91       	ld	r25, X
    7f36:	13 97       	sbiw	r26, 0x03	; 3
    7f38:	e8 0f       	add	r30, r24
    7f3a:	f9 1f       	adc	r31, r25
    7f3c:	01 90       	ld	r0, Z+
    7f3e:	f0 81       	ld	r31, Z
    7f40:	e0 2d       	mov	r30, r0
    7f42:	00 84       	ldd	r0, Z+8	; 0x08
    7f44:	f1 85       	ldd	r31, Z+9	; 0x09
    7f46:	e0 2d       	mov	r30, r0
    7f48:	30 97       	sbiw	r30, 0x00	; 0
    7f4a:	09 f0       	breq	.+2      	; 0x7f4e <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    7f4c:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    7f4e:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7f50:	a0 91 34 2a 	lds	r26, 0x2A34	; 0x802a34 <udc_ptr_conf>
    7f54:	b0 91 35 2a 	lds	r27, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    7f58:	ed 91       	ld	r30, X+
    7f5a:	fc 91       	ld	r31, X
    7f5c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    7f5e:	84 81       	ldd	r24, Z+4	; 0x04
    7f60:	c8 17       	cp	r28, r24
    7f62:	10 f3       	brcs	.-60     	; 0x7f28 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    7f64:	cf 91       	pop	r28
    7f66:	08 95       	ret

00007f68 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    7f68:	0f 93       	push	r16
    7f6a:	1f 93       	push	r17
    7f6c:	cf 93       	push	r28
    7f6e:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    7f70:	eb e4       	ldi	r30, 0x4B	; 75
    7f72:	fa e2       	ldi	r31, 0x2A	; 42
    7f74:	12 86       	std	Z+10, r1	; 0x0a
    7f76:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    7f78:	14 86       	std	Z+12, r1	; 0x0c
    7f7a:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    7f7c:	16 86       	std	Z+14, r1	; 0x0e
    7f7e:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    7f80:	80 81       	ld	r24, Z
    7f82:	88 23       	and	r24, r24
    7f84:	0c f0       	brlt	.+2      	; 0x7f88 <udc_process_setup+0x20>
    7f86:	95 c2       	rjmp	.+1322   	; 0x84b2 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    7f88:	20 91 51 2a 	lds	r18, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    7f8c:	30 91 52 2a 	lds	r19, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    7f90:	21 15       	cp	r18, r1
    7f92:	31 05       	cpc	r19, r1
    7f94:	09 f0       	breq	.+2      	; 0x7f98 <udc_process_setup+0x30>
    7f96:	88 c2       	rjmp	.+1296   	; 0x84a8 <udc_process_setup+0x540>
    7f98:	7f c2       	rjmp	.+1278   	; 0x8498 <udc_process_setup+0x530>
    7f9a:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    7f9c:	09 f0       	breq	.+2      	; 0x7fa0 <udc_process_setup+0x38>
    7f9e:	ab c0       	rjmp	.+342    	; 0x80f6 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    7fa0:	90 91 4c 2a 	lds	r25, 0x2A4C	; 0x802a4c <udd_g_ctrlreq+0x1>
    7fa4:	96 30       	cpi	r25, 0x06	; 6
    7fa6:	81 f0       	breq	.+32     	; 0x7fc8 <udc_process_setup+0x60>
    7fa8:	98 30       	cpi	r25, 0x08	; 8
    7faa:	09 f4       	brne	.+2      	; 0x7fae <udc_process_setup+0x46>
    7fac:	99 c0       	rjmp	.+306    	; 0x80e0 <udc_process_setup+0x178>
    7fae:	91 11       	cpse	r25, r1
    7fb0:	a2 c0       	rjmp	.+324    	; 0x80f6 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    7fb2:	22 30       	cpi	r18, 0x02	; 2
    7fb4:	31 05       	cpc	r19, r1
    7fb6:	09 f0       	breq	.+2      	; 0x7fba <udc_process_setup+0x52>
    7fb8:	2b c2       	rjmp	.+1110   	; 0x8410 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    7fba:	62 e0       	ldi	r22, 0x02	; 2
    7fbc:	70 e0       	ldi	r23, 0x00	; 0
    7fbe:	8a e3       	ldi	r24, 0x3A	; 58
    7fc0:	9a e2       	ldi	r25, 0x2A	; 42
    7fc2:	0e 94 c6 2c 	call	0x598c	; 0x598c <udd_set_setup_payload>
    7fc6:	7e c2       	rjmp	.+1276   	; 0x84c4 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    7fc8:	80 91 4d 2a 	lds	r24, 0x2A4D	; 0x802a4d <udd_g_ctrlreq+0x2>
    7fcc:	90 91 4e 2a 	lds	r25, 0x2A4E	; 0x802a4e <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    7fd0:	29 2f       	mov	r18, r25
    7fd2:	33 27       	eor	r19, r19
    7fd4:	22 30       	cpi	r18, 0x02	; 2
    7fd6:	31 05       	cpc	r19, r1
    7fd8:	b1 f0       	breq	.+44     	; 0x8006 <udc_process_setup+0x9e>
    7fda:	20 f4       	brcc	.+8      	; 0x7fe4 <udc_process_setup+0x7c>
    7fdc:	21 30       	cpi	r18, 0x01	; 1
    7fde:	31 05       	cpc	r19, r1
    7fe0:	41 f0       	breq	.+16     	; 0x7ff2 <udc_process_setup+0x8a>
    7fe2:	d8 c1       	rjmp	.+944    	; 0x8394 <udc_process_setup+0x42c>
    7fe4:	23 30       	cpi	r18, 0x03	; 3
    7fe6:	31 05       	cpc	r19, r1
    7fe8:	f1 f1       	breq	.+124    	; 0x8066 <udc_process_setup+0xfe>
    7fea:	2f 30       	cpi	r18, 0x0F	; 15
    7fec:	31 05       	cpc	r19, r1
    7fee:	61 f1       	breq	.+88     	; 0x8048 <udc_process_setup+0xe0>
    7ff0:	d1 c1       	rjmp	.+930    	; 0x8394 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    7ff2:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <udc_config>
    7ff6:	90 91 4e 20 	lds	r25, 0x204E	; 0x80204e <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    7ffa:	dc 01       	movw	r26, r24
    7ffc:	6c 91       	ld	r22, X
    7ffe:	70 e0       	ldi	r23, 0x00	; 0
    8000:	0e 94 c6 2c 	call	0x598c	; 0x598c <udd_set_setup_payload>
    8004:	5e c0       	rjmp	.+188    	; 0x80c2 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    8006:	e0 91 4d 20 	lds	r30, 0x204D	; 0x80204d <udc_config>
    800a:	f0 91 4e 20 	lds	r31, 0x204E	; 0x80204e <udc_config+0x1>
    800e:	21 89       	ldd	r18, Z+17	; 0x11
    8010:	82 17       	cp	r24, r18
    8012:	08 f0       	brcs	.+2      	; 0x8016 <udc_process_setup+0xae>
    8014:	fd c1       	rjmp	.+1018   	; 0x8410 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    8016:	99 27       	eor	r25, r25
    8018:	88 0f       	add	r24, r24
    801a:	99 1f       	adc	r25, r25
    801c:	88 0f       	add	r24, r24
    801e:	99 1f       	adc	r25, r25
    8020:	e0 91 4f 20 	lds	r30, 0x204F	; 0x80204f <udc_config+0x2>
    8024:	f0 91 50 20 	lds	r31, 0x2050	; 0x802050 <udc_config+0x3>
    8028:	e8 0f       	add	r30, r24
    802a:	f9 1f       	adc	r31, r25
    802c:	80 81       	ld	r24, Z
    802e:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    8030:	fc 01       	movw	r30, r24
    8032:	62 81       	ldd	r22, Z+2	; 0x02
    8034:	73 81       	ldd	r23, Z+3	; 0x03
    8036:	0e 94 c6 2c 	call	0x598c	; 0x598c <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    803a:	e0 91 53 2a 	lds	r30, 0x2A53	; 0x802a53 <udd_g_ctrlreq+0x8>
    803e:	f0 91 54 2a 	lds	r31, 0x2A54	; 0x802a54 <udd_g_ctrlreq+0x9>
    8042:	82 e0       	ldi	r24, 0x02	; 2
    8044:	81 83       	std	Z+1, r24	; 0x01
    8046:	3d c0       	rjmp	.+122    	; 0x80c2 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    8048:	80 91 51 20 	lds	r24, 0x2051	; 0x802051 <udc_config+0x4>
    804c:	90 91 52 20 	lds	r25, 0x2052	; 0x802052 <udc_config+0x5>
    8050:	00 97       	sbiw	r24, 0x00	; 0
    8052:	09 f4       	brne	.+2      	; 0x8056 <udc_process_setup+0xee>
    8054:	dd c1       	rjmp	.+954    	; 0x8410 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    8056:	dc 01       	movw	r26, r24
    8058:	12 96       	adiw	r26, 0x02	; 2
    805a:	6d 91       	ld	r22, X+
    805c:	7c 91       	ld	r23, X
    805e:	13 97       	sbiw	r26, 0x03	; 3
    8060:	0e 94 c6 2c 	call	0x598c	; 0x598c <udd_set_setup_payload>
    8064:	2e c0       	rjmp	.+92     	; 0x80c2 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    8066:	99 27       	eor	r25, r25
    8068:	81 30       	cpi	r24, 0x01	; 1
    806a:	91 05       	cpc	r25, r1
    806c:	99 f0       	breq	.+38     	; 0x8094 <udc_process_setup+0x12c>
    806e:	58 f0       	brcs	.+22     	; 0x8086 <udc_process_setup+0x11e>
    8070:	82 30       	cpi	r24, 0x02	; 2
    8072:	91 05       	cpc	r25, r1
    8074:	09 f4       	brne	.+2      	; 0x8078 <udc_process_setup+0x110>
    8076:	22 c2       	rjmp	.+1092   	; 0x84bc <udc_process_setup+0x554>
    8078:	03 97       	sbiw	r24, 0x03	; 3
    807a:	09 f0       	breq	.+2      	; 0x807e <udc_process_setup+0x116>
    807c:	94 c1       	rjmp	.+808    	; 0x83a6 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    807e:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    8080:	e4 e9       	ldi	r30, 0x94	; 148
    8082:	f4 e2       	ldi	r31, 0x24	; 36
    8084:	0a c0       	rjmp	.+20     	; 0x809a <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    8086:	64 e0       	ldi	r22, 0x04	; 4
    8088:	70 e0       	ldi	r23, 0x00	; 0
    808a:	82 ef       	ldi	r24, 0xF2	; 242
    808c:	90 e2       	ldi	r25, 0x20	; 32
    808e:	0e 94 c6 2c 	call	0x598c	; 0x598c <udd_set_setup_payload>
    8092:	17 c0       	rjmp	.+46     	; 0x80c2 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    8094:	e1 ee       	ldi	r30, 0xE1	; 225
    8096:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    8098:	30 e1       	ldi	r19, 0x10	; 16
    809a:	a4 eb       	ldi	r26, 0xB4	; 180
    809c:	b0 e2       	ldi	r27, 0x20	; 32
    809e:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    80a0:	81 91       	ld	r24, Z+
    80a2:	90 e0       	ldi	r25, 0x00	; 0
    80a4:	8d 93       	st	X+, r24
    80a6:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    80a8:	2f 5f       	subi	r18, 0xFF	; 255
    80aa:	23 17       	cp	r18, r19
    80ac:	c8 f3       	brcs	.-14     	; 0x80a0 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    80ae:	63 2f       	mov	r22, r19
    80b0:	66 0f       	add	r22, r22
    80b2:	6e 5f       	subi	r22, 0xFE	; 254
    80b4:	60 93 b2 20 	sts	0x20B2, r22	; 0x8020b2 <udc_string_desc>
		udd_set_setup_payload(
    80b8:	70 e0       	ldi	r23, 0x00	; 0
    80ba:	82 eb       	ldi	r24, 0xB2	; 178
    80bc:	90 e2       	ldi	r25, 0x20	; 32
    80be:	0e 94 c6 2c 	call	0x598c	; 0x598c <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    80c2:	eb e4       	ldi	r30, 0x4B	; 75
    80c4:	fa e2       	ldi	r31, 0x2A	; 42
    80c6:	86 81       	ldd	r24, Z+6	; 0x06
    80c8:	97 81       	ldd	r25, Z+7	; 0x07
    80ca:	22 85       	ldd	r18, Z+10	; 0x0a
    80cc:	33 85       	ldd	r19, Z+11	; 0x0b
    80ce:	82 17       	cp	r24, r18
    80d0:	93 07       	cpc	r25, r19
    80d2:	08 f0       	brcs	.+2      	; 0x80d6 <udc_process_setup+0x16e>
    80d4:	f7 c1       	rjmp	.+1006   	; 0x84c4 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    80d6:	80 93 55 2a 	sts	0x2A55, r24	; 0x802a55 <udd_g_ctrlreq+0xa>
    80da:	90 93 56 2a 	sts	0x2A56, r25	; 0x802a56 <udd_g_ctrlreq+0xb>
    80de:	f2 c1       	rjmp	.+996    	; 0x84c4 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    80e0:	21 30       	cpi	r18, 0x01	; 1
    80e2:	31 05       	cpc	r19, r1
    80e4:	09 f0       	breq	.+2      	; 0x80e8 <udc_process_setup+0x180>
    80e6:	94 c1       	rjmp	.+808    	; 0x8410 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    80e8:	61 e0       	ldi	r22, 0x01	; 1
    80ea:	70 e0       	ldi	r23, 0x00	; 0
    80ec:	86 e3       	ldi	r24, 0x36	; 54
    80ee:	9a e2       	ldi	r25, 0x2A	; 42
    80f0:	0e 94 c6 2c 	call	0x598c	; 0x598c <udd_set_setup_payload>
    80f4:	e7 c1       	rjmp	.+974    	; 0x84c4 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    80f6:	81 30       	cpi	r24, 0x01	; 1
    80f8:	e9 f5       	brne	.+122    	; 0x8174 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    80fa:	90 91 4c 2a 	lds	r25, 0x2A4C	; 0x802a4c <udd_g_ctrlreq+0x1>
    80fe:	9a 30       	cpi	r25, 0x0A	; 10
    8100:	c9 f5       	brne	.+114    	; 0x8174 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    8102:	21 30       	cpi	r18, 0x01	; 1
    8104:	31 05       	cpc	r19, r1
    8106:	09 f0       	breq	.+2      	; 0x810a <udc_process_setup+0x1a2>
    8108:	53 c1       	rjmp	.+678    	; 0x83b0 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    810a:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <udc_num_configuration>
    810e:	88 23       	and	r24, r24
    8110:	09 f4       	brne	.+2      	; 0x8114 <udc_process_setup+0x1ac>
    8112:	4e c1       	rjmp	.+668    	; 0x83b0 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    8114:	c0 91 4f 2a 	lds	r28, 0x2A4F	; 0x802a4f <udd_g_ctrlreq+0x4>
    8118:	d0 91 50 2a 	lds	r29, 0x2A50	; 0x802a50 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    811c:	00 91 34 2a 	lds	r16, 0x2A34	; 0x802a34 <udc_ptr_conf>
    8120:	10 91 35 2a 	lds	r17, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    8124:	d8 01       	movw	r26, r16
    8126:	ed 91       	ld	r30, X+
    8128:	fc 91       	ld	r31, X
    812a:	84 81       	ldd	r24, Z+4	; 0x04
    812c:	c8 17       	cp	r28, r24
    812e:	08 f0       	brcs	.+2      	; 0x8132 <udc_process_setup+0x1ca>
    8130:	3f c1       	rjmp	.+638    	; 0x83b0 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    8132:	60 e0       	ldi	r22, 0x00	; 0
    8134:	8c 2f       	mov	r24, r28
    8136:	0c de       	rcall	.-1000   	; 0x7d50 <udc_update_iface_desc>
    8138:	88 23       	and	r24, r24
    813a:	09 f4       	brne	.+2      	; 0x813e <udc_process_setup+0x1d6>
    813c:	34 c1       	rjmp	.+616    	; 0x83a6 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    813e:	ce 01       	movw	r24, r28
    8140:	99 27       	eor	r25, r25
    8142:	88 0f       	add	r24, r24
    8144:	99 1f       	adc	r25, r25
    8146:	d8 01       	movw	r26, r16
    8148:	12 96       	adiw	r26, 0x02	; 2
    814a:	ed 91       	ld	r30, X+
    814c:	fc 91       	ld	r31, X
    814e:	13 97       	sbiw	r26, 0x03	; 3
    8150:	e8 0f       	add	r30, r24
    8152:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    8154:	01 90       	ld	r0, Z+
    8156:	f0 81       	ld	r31, Z
    8158:	e0 2d       	mov	r30, r0
    815a:	86 81       	ldd	r24, Z+6	; 0x06
    815c:	97 81       	ldd	r25, Z+7	; 0x07
    815e:	fc 01       	movw	r30, r24
    8160:	19 95       	eicall
    8162:	80 93 38 2a 	sts	0x2A38, r24	; 0x802a38 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    8166:	61 e0       	ldi	r22, 0x01	; 1
    8168:	70 e0       	ldi	r23, 0x00	; 0
    816a:	88 e3       	ldi	r24, 0x38	; 56
    816c:	9a e2       	ldi	r25, 0x2A	; 42
    816e:	0e 94 c6 2c 	call	0x598c	; 0x598c <udd_set_setup_payload>
    8172:	a8 c1       	rjmp	.+848    	; 0x84c4 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    8174:	82 30       	cpi	r24, 0x02	; 2
    8176:	09 f0       	breq	.+2      	; 0x817a <udc_process_setup+0x212>
    8178:	16 c1       	rjmp	.+556    	; 0x83a6 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    817a:	80 91 4c 2a 	lds	r24, 0x2A4C	; 0x802a4c <udd_g_ctrlreq+0x1>
    817e:	81 11       	cpse	r24, r1
    8180:	0b c1       	rjmp	.+534    	; 0x8398 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    8182:	22 30       	cpi	r18, 0x02	; 2
    8184:	31 05       	cpc	r19, r1
    8186:	09 f0       	breq	.+2      	; 0x818a <udc_process_setup+0x222>
    8188:	43 c1       	rjmp	.+646    	; 0x8410 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    818a:	80 91 4f 2a 	lds	r24, 0x2A4F	; 0x802a4f <udd_g_ctrlreq+0x4>
    818e:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <udd_ep_is_halted>
    8192:	90 e0       	ldi	r25, 0x00	; 0
    8194:	80 93 30 2a 	sts	0x2A30, r24	; 0x802a30 <udc_ep_status.4757>
    8198:	90 93 31 2a 	sts	0x2A31, r25	; 0x802a31 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    819c:	62 e0       	ldi	r22, 0x02	; 2
    819e:	70 e0       	ldi	r23, 0x00	; 0
    81a0:	80 e3       	ldi	r24, 0x30	; 48
    81a2:	9a e2       	ldi	r25, 0x2A	; 42
    81a4:	0e 94 c6 2c 	call	0x598c	; 0x598c <udd_set_setup_payload>
    81a8:	8d c1       	rjmp	.+794    	; 0x84c4 <udc_process_setup+0x55c>
    81aa:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    81ac:	09 f0       	breq	.+2      	; 0x81b0 <udc_process_setup+0x248>
    81ae:	a0 c0       	rjmp	.+320    	; 0x82f0 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    81b0:	90 91 4c 2a 	lds	r25, 0x2A4C	; 0x802a4c <udd_g_ctrlreq+0x1>
    81b4:	93 30       	cpi	r25, 0x03	; 3
    81b6:	91 f1       	breq	.+100    	; 0x821c <udc_process_setup+0x2b4>
    81b8:	18 f4       	brcc	.+6      	; 0x81c0 <udc_process_setup+0x258>
    81ba:	91 30       	cpi	r25, 0x01	; 1
    81bc:	a9 f0       	breq	.+42     	; 0x81e8 <udc_process_setup+0x280>
    81be:	98 c0       	rjmp	.+304    	; 0x82f0 <udc_process_setup+0x388>
    81c0:	95 30       	cpi	r25, 0x05	; 5
    81c2:	21 f0       	breq	.+8      	; 0x81cc <udc_process_setup+0x264>
    81c4:	99 30       	cpi	r25, 0x09	; 9
    81c6:	09 f4       	brne	.+2      	; 0x81ca <udc_process_setup+0x262>
    81c8:	43 c0       	rjmp	.+134    	; 0x8250 <udc_process_setup+0x2e8>
    81ca:	92 c0       	rjmp	.+292    	; 0x82f0 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    81cc:	80 91 51 2a 	lds	r24, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    81d0:	90 91 52 2a 	lds	r25, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    81d4:	89 2b       	or	r24, r25
    81d6:	09 f0       	breq	.+2      	; 0x81da <udc_process_setup+0x272>
    81d8:	1b c1       	rjmp	.+566    	; 0x8410 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    81da:	82 ea       	ldi	r24, 0xA2	; 162
    81dc:	9e e3       	ldi	r25, 0x3E	; 62
    81de:	80 93 57 2a 	sts	0x2A57, r24	; 0x802a57 <udd_g_ctrlreq+0xc>
    81e2:	90 93 58 2a 	sts	0x2A58, r25	; 0x802a58 <udd_g_ctrlreq+0xd>
    81e6:	6e c1       	rjmp	.+732    	; 0x84c4 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    81e8:	80 91 51 2a 	lds	r24, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    81ec:	90 91 52 2a 	lds	r25, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    81f0:	89 2b       	or	r24, r25
    81f2:	09 f0       	breq	.+2      	; 0x81f6 <udc_process_setup+0x28e>
    81f4:	0d c1       	rjmp	.+538    	; 0x8410 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    81f6:	80 91 4d 2a 	lds	r24, 0x2A4D	; 0x802a4d <udd_g_ctrlreq+0x2>
    81fa:	90 91 4e 2a 	lds	r25, 0x2A4E	; 0x802a4e <udd_g_ctrlreq+0x3>
    81fe:	01 97       	sbiw	r24, 0x01	; 1
    8200:	09 f0       	breq	.+2      	; 0x8204 <udc_process_setup+0x29c>
    8202:	06 c1       	rjmp	.+524    	; 0x8410 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    8204:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <udc_device_status>
    8208:	90 91 3b 2a 	lds	r25, 0x2A3B	; 0x802a3b <udc_device_status+0x1>
    820c:	8d 7f       	andi	r24, 0xFD	; 253
    820e:	80 93 3a 2a 	sts	0x2A3A, r24	; 0x802a3a <udc_device_status>
    8212:	90 93 3b 2a 	sts	0x2A3B, r25	; 0x802a3b <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    8216:	0e 94 43 35 	call	0x6a86	; 0x6a86 <usb_callback_remotewakeup_disable>
    821a:	54 c1       	rjmp	.+680    	; 0x84c4 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    821c:	80 91 51 2a 	lds	r24, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    8220:	90 91 52 2a 	lds	r25, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    8224:	89 2b       	or	r24, r25
    8226:	09 f0       	breq	.+2      	; 0x822a <udc_process_setup+0x2c2>
    8228:	f3 c0       	rjmp	.+486    	; 0x8410 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    822a:	80 91 4d 2a 	lds	r24, 0x2A4D	; 0x802a4d <udd_g_ctrlreq+0x2>
    822e:	90 91 4e 2a 	lds	r25, 0x2A4E	; 0x802a4e <udd_g_ctrlreq+0x3>
    8232:	01 97       	sbiw	r24, 0x01	; 1
    8234:	09 f0       	breq	.+2      	; 0x8238 <udc_process_setup+0x2d0>
    8236:	b2 c0       	rjmp	.+356    	; 0x839c <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    8238:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <udc_device_status>
    823c:	90 91 3b 2a 	lds	r25, 0x2A3B	; 0x802a3b <udc_device_status+0x1>
    8240:	82 60       	ori	r24, 0x02	; 2
    8242:	80 93 3a 2a 	sts	0x2A3A, r24	; 0x802a3a <udc_device_status>
    8246:	90 93 3b 2a 	sts	0x2A3B, r25	; 0x802a3b <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    824a:	0e 94 42 35 	call	0x6a84	; 0x6a84 <usb_callback_remotewakeup_enable>
    824e:	3a c1       	rjmp	.+628    	; 0x84c4 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    8250:	80 91 51 2a 	lds	r24, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    8254:	90 91 52 2a 	lds	r25, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    8258:	89 2b       	or	r24, r25
    825a:	09 f0       	breq	.+2      	; 0x825e <udc_process_setup+0x2f6>
    825c:	d9 c0       	rjmp	.+434    	; 0x8410 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    825e:	0e 94 bb 2c 	call	0x5976	; 0x5976 <udd_getaddress>
    8262:	88 23       	and	r24, r24
    8264:	09 f4       	brne	.+2      	; 0x8268 <udc_process_setup+0x300>
    8266:	9f c0       	rjmp	.+318    	; 0x83a6 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    8268:	20 91 4d 2a 	lds	r18, 0x2A4D	; 0x802a4d <udd_g_ctrlreq+0x2>
    826c:	30 91 4e 2a 	lds	r19, 0x2A4E	; 0x802a4e <udd_g_ctrlreq+0x3>
    8270:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    8272:	e0 91 4d 20 	lds	r30, 0x204D	; 0x80204d <udc_config>
    8276:	f0 91 4e 20 	lds	r31, 0x204E	; 0x80204e <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    827a:	81 89       	ldd	r24, Z+17	; 0x11
    827c:	90 e0       	ldi	r25, 0x00	; 0
    827e:	82 17       	cp	r24, r18
    8280:	93 07       	cpc	r25, r19
    8282:	08 f4       	brcc	.+2      	; 0x8286 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    8284:	90 c0       	rjmp	.+288    	; 0x83a6 <udc_process_setup+0x43e>
    8286:	16 de       	rcall	.-980    	; 0x7eb4 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    8288:	80 91 4d 2a 	lds	r24, 0x2A4D	; 0x802a4d <udd_g_ctrlreq+0x2>
    828c:	90 91 4e 2a 	lds	r25, 0x2A4E	; 0x802a4e <udd_g_ctrlreq+0x3>
    8290:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    8294:	88 23       	and	r24, r24
    8296:	09 f4       	brne	.+2      	; 0x829a <udc_process_setup+0x332>
    8298:	15 c1       	rjmp	.+554    	; 0x84c4 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    829a:	99 27       	eor	r25, r25
    829c:	81 50       	subi	r24, 0x01	; 1
    829e:	90 4c       	sbci	r25, 0xC0	; 192
    82a0:	88 0f       	add	r24, r24
    82a2:	99 1f       	adc	r25, r25
    82a4:	88 0f       	add	r24, r24
    82a6:	99 1f       	adc	r25, r25
    82a8:	e0 91 4f 20 	lds	r30, 0x204F	; 0x80204f <udc_config+0x2>
    82ac:	f0 91 50 20 	lds	r31, 0x2050	; 0x802050 <udc_config+0x3>
    82b0:	e8 0f       	add	r30, r24
    82b2:	f9 1f       	adc	r31, r25
    82b4:	e0 93 34 2a 	sts	0x2A34, r30	; 0x802a34 <udc_ptr_conf>
    82b8:	f0 93 35 2a 	sts	0x2A35, r31	; 0x802a35 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    82bc:	01 90       	ld	r0, Z+
    82be:	f0 81       	ld	r31, Z
    82c0:	e0 2d       	mov	r30, r0
    82c2:	84 81       	ldd	r24, Z+4	; 0x04
    82c4:	88 23       	and	r24, r24
    82c6:	09 f4       	brne	.+2      	; 0x82ca <udc_process_setup+0x362>
    82c8:	fd c0       	rjmp	.+506    	; 0x84c4 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    82ca:	c0 e0       	ldi	r28, 0x00	; 0
    82cc:	60 e0       	ldi	r22, 0x00	; 0
    82ce:	8c 2f       	mov	r24, r28
    82d0:	bb dd       	rcall	.-1162   	; 0x7e48 <udc_iface_enable>
    82d2:	88 23       	and	r24, r24
    82d4:	09 f4       	brne	.+2      	; 0x82d8 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    82d6:	67 c0       	rjmp	.+206    	; 0x83a6 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    82d8:	cf 5f       	subi	r28, 0xFF	; 255
    82da:	e0 91 34 2a 	lds	r30, 0x2A34	; 0x802a34 <udc_ptr_conf>
    82de:	f0 91 35 2a 	lds	r31, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    82e2:	01 90       	ld	r0, Z+
    82e4:	f0 81       	ld	r31, Z
    82e6:	e0 2d       	mov	r30, r0
    82e8:	84 81       	ldd	r24, Z+4	; 0x04
    82ea:	c8 17       	cp	r28, r24
    82ec:	78 f3       	brcs	.-34     	; 0x82cc <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    82ee:	ea c0       	rjmp	.+468    	; 0x84c4 <udc_process_setup+0x55c>
    82f0:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    82f2:	e9 f4       	brne	.+58     	; 0x832e <udc_process_setup+0x3c6>
    82f4:	90 91 4c 2a 	lds	r25, 0x2A4C	; 0x802a4c <udd_g_ctrlreq+0x1>
    82f8:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    82fa:	c9 f4       	brne	.+50     	; 0x832e <udc_process_setup+0x3c6>
    82fc:	80 91 51 2a 	lds	r24, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    8300:	90 91 52 2a 	lds	r25, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    8304:	89 2b       	or	r24, r25
    8306:	09 f0       	breq	.+2      	; 0x830a <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    8308:	53 c0       	rjmp	.+166    	; 0x83b0 <udc_process_setup+0x448>
    830a:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <udc_num_configuration>
    830e:	88 23       	and	r24, r24
    8310:	09 f4       	brne	.+2      	; 0x8314 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    8312:	4e c0       	rjmp	.+156    	; 0x83b0 <udc_process_setup+0x448>
    8314:	eb e4       	ldi	r30, 0x4B	; 75
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    8316:	fa e2       	ldi	r31, 0x2A	; 42

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    8318:	c4 81       	ldd	r28, Z+4	; 0x04
    831a:	d2 81       	ldd	r29, Z+2	; 0x02
    831c:	8c 2f       	mov	r24, r28
    831e:	52 dd       	rcall	.-1372   	; 0x7dc4 <udc_iface_disable>
    8320:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    8322:	09 f4       	brne	.+2      	; 0x8326 <udc_process_setup+0x3be>
    8324:	40 c0       	rjmp	.+128    	; 0x83a6 <udc_process_setup+0x43e>
    8326:	6d 2f       	mov	r22, r29
    8328:	8c 2f       	mov	r24, r28
    832a:	8e dd       	rcall	.-1252   	; 0x7e48 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    832c:	3a c0       	rjmp	.+116    	; 0x83a2 <udc_process_setup+0x43a>
    832e:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    8330:	d1 f5       	brne	.+116    	; 0x83a6 <udc_process_setup+0x43e>
    8332:	80 91 4c 2a 	lds	r24, 0x2A4C	; 0x802a4c <udd_g_ctrlreq+0x1>
    8336:	81 30       	cpi	r24, 0x01	; 1
    8338:	19 f0       	breq	.+6      	; 0x8340 <udc_process_setup+0x3d8>
    833a:	83 30       	cpi	r24, 0x03	; 3
    833c:	a1 f0       	breq	.+40     	; 0x8366 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    833e:	30 c0       	rjmp	.+96     	; 0x83a0 <udc_process_setup+0x438>
    8340:	80 91 51 2a 	lds	r24, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    8344:	90 91 52 2a 	lds	r25, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    8348:	89 2b       	or	r24, r25
    834a:	09 f0       	breq	.+2      	; 0x834e <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    834c:	61 c0       	rjmp	.+194    	; 0x8410 <udc_process_setup+0x4a8>
    834e:	80 91 4d 2a 	lds	r24, 0x2A4D	; 0x802a4d <udd_g_ctrlreq+0x2>
    8352:	90 91 4e 2a 	lds	r25, 0x2A4E	; 0x802a4e <udd_g_ctrlreq+0x3>
    8356:	89 2b       	or	r24, r25
    8358:	09 f0       	breq	.+2      	; 0x835c <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    835a:	5a c0       	rjmp	.+180    	; 0x8410 <udc_process_setup+0x4a8>
    835c:	80 91 4f 2a 	lds	r24, 0x2A4F	; 0x802a4f <udd_g_ctrlreq+0x4>
    8360:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    8364:	1e c0       	rjmp	.+60     	; 0x83a2 <udc_process_setup+0x43a>
    8366:	80 91 51 2a 	lds	r24, 0x2A51	; 0x802a51 <udd_g_ctrlreq+0x6>
    836a:	90 91 52 2a 	lds	r25, 0x2A52	; 0x802a52 <udd_g_ctrlreq+0x7>
    836e:	89 2b       	or	r24, r25
    8370:	09 f0       	breq	.+2      	; 0x8374 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    8372:	4e c0       	rjmp	.+156    	; 0x8410 <udc_process_setup+0x4a8>
    8374:	80 91 4d 2a 	lds	r24, 0x2A4D	; 0x802a4d <udd_g_ctrlreq+0x2>
    8378:	90 91 4e 2a 	lds	r25, 0x2A4E	; 0x802a4e <udd_g_ctrlreq+0x3>
    837c:	89 2b       	or	r24, r25
    837e:	09 f0       	breq	.+2      	; 0x8382 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    8380:	47 c0       	rjmp	.+142    	; 0x8410 <udc_process_setup+0x4a8>
    8382:	cb e4       	ldi	r28, 0x4B	; 75
    8384:	da e2       	ldi	r29, 0x2A	; 42
    8386:	8c 81       	ldd	r24, Y+4	; 0x04
    8388:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    838c:	8c 81       	ldd	r24, Y+4	; 0x04
    838e:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    8392:	07 c0       	rjmp	.+14     	; 0x83a2 <udc_process_setup+0x43a>
    8394:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    8396:	05 c0       	rjmp	.+10     	; 0x83a2 <udc_process_setup+0x43a>
    8398:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    839a:	03 c0       	rjmp	.+6      	; 0x83a2 <udc_process_setup+0x43a>
    839c:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    839e:	01 c0       	rjmp	.+2      	; 0x83a2 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    83a0:	80 e0       	ldi	r24, 0x00	; 0
    83a2:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    83a4:	90 c0       	rjmp	.+288    	; 0x84c6 <udc_process_setup+0x55e>
    83a6:	80 91 4b 2a 	lds	r24, 0x2A4B	; 0x802a4b <udd_g_ctrlreq>
    83aa:	8f 71       	andi	r24, 0x1F	; 31
    83ac:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    83ae:	81 f5       	brne	.+96     	; 0x8410 <udc_process_setup+0x4a8>
    83b0:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <udc_num_configuration>
    83b4:	88 23       	and	r24, r24
    83b6:	09 f4       	brne	.+2      	; 0x83ba <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    83b8:	71 c0       	rjmp	.+226    	; 0x849c <udc_process_setup+0x534>
    83ba:	00 91 4f 2a 	lds	r16, 0x2A4F	; 0x802a4f <udd_g_ctrlreq+0x4>
    83be:	10 91 50 2a 	lds	r17, 0x2A50	; 0x802a50 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    83c2:	c0 91 34 2a 	lds	r28, 0x2A34	; 0x802a34 <udc_ptr_conf>
    83c6:	d0 91 35 2a 	lds	r29, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    83ca:	e8 81       	ld	r30, Y
    83cc:	f9 81       	ldd	r31, Y+1	; 0x01
    83ce:	84 81       	ldd	r24, Z+4	; 0x04
    83d0:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    83d2:	08 f0       	brcs	.+2      	; 0x83d6 <udc_process_setup+0x46e>
    83d4:	65 c0       	rjmp	.+202    	; 0x84a0 <udc_process_setup+0x538>
    83d6:	60 e0       	ldi	r22, 0x00	; 0
    83d8:	80 2f       	mov	r24, r16
    83da:	ba dc       	rcall	.-1676   	; 0x7d50 <udc_update_iface_desc>
    83dc:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    83de:	c1 f0       	breq	.+48     	; 0x8410 <udc_process_setup+0x4a8>
    83e0:	f8 01       	movw	r30, r16
    83e2:	ff 27       	eor	r31, r31
    83e4:	cf 01       	movw	r24, r30
    83e6:	88 0f       	add	r24, r24
    83e8:	99 1f       	adc	r25, r25
    83ea:	ea 81       	ldd	r30, Y+2	; 0x02
    83ec:	fb 81       	ldd	r31, Y+3	; 0x03
    83ee:	e8 0f       	add	r30, r24
    83f0:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    83f2:	c0 81       	ld	r28, Z
    83f4:	d1 81       	ldd	r29, Z+1	; 0x01
    83f6:	ee 81       	ldd	r30, Y+6	; 0x06
    83f8:	ff 81       	ldd	r31, Y+7	; 0x07
    83fa:	19 95       	eicall
    83fc:	68 2f       	mov	r22, r24
    83fe:	80 2f       	mov	r24, r16
    8400:	a7 dc       	rcall	.-1714   	; 0x7d50 <udc_update_iface_desc>
    8402:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    8404:	29 f0       	breq	.+10     	; 0x8410 <udc_process_setup+0x4a8>
    8406:	ec 81       	ldd	r30, Y+4	; 0x04
    8408:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    840a:	19 95       	eicall
    840c:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    840e:	5b c0       	rjmp	.+182    	; 0x84c6 <udc_process_setup+0x55e>
    8410:	80 91 4b 2a 	lds	r24, 0x2A4B	; 0x802a4b <udd_g_ctrlreq>
    8414:	8f 71       	andi	r24, 0x1F	; 31
    8416:	82 30       	cpi	r24, 0x02	; 2
    8418:	09 f0       	breq	.+2      	; 0x841c <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    841a:	44 c0       	rjmp	.+136    	; 0x84a4 <udc_process_setup+0x53c>
    841c:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <udc_num_configuration>
    8420:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    8422:	b1 f1       	breq	.+108    	; 0x8490 <udc_process_setup+0x528>
    8424:	a0 91 34 2a 	lds	r26, 0x2A34	; 0x802a34 <udc_ptr_conf>
    8428:	b0 91 35 2a 	lds	r27, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    842c:	ed 91       	ld	r30, X+
    842e:	fc 91       	ld	r31, X
    8430:	11 97       	sbiw	r26, 0x01	; 1
    8432:	84 81       	ldd	r24, Z+4	; 0x04
    8434:	88 23       	and	r24, r24
    8436:	71 f1       	breq	.+92     	; 0x8494 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    8438:	c0 e0       	ldi	r28, 0x00	; 0
    843a:	ec 2f       	mov	r30, r28
    843c:	f0 e0       	ldi	r31, 0x00	; 0
    843e:	ee 0f       	add	r30, r30
    8440:	ff 1f       	adc	r31, r31
    8442:	12 96       	adiw	r26, 0x02	; 2
    8444:	8d 91       	ld	r24, X+
    8446:	9c 91       	ld	r25, X
    8448:	13 97       	sbiw	r26, 0x03	; 3
    844a:	e8 0f       	add	r30, r24
    844c:	f9 1f       	adc	r31, r25
    844e:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    8450:	11 81       	ldd	r17, Z+1	; 0x01
    8452:	d8 01       	movw	r26, r16
    8454:	16 96       	adiw	r26, 0x06	; 6
    8456:	ed 91       	ld	r30, X+
    8458:	fc 91       	ld	r31, X
    845a:	17 97       	sbiw	r26, 0x07	; 7
    845c:	19 95       	eicall
    845e:	68 2f       	mov	r22, r24
    8460:	8c 2f       	mov	r24, r28
    8462:	76 dc       	rcall	.-1812   	; 0x7d50 <udc_update_iface_desc>
    8464:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    8466:	79 f1       	breq	.+94     	; 0x84c6 <udc_process_setup+0x55e>
    8468:	d8 01       	movw	r26, r16
    846a:	14 96       	adiw	r26, 0x04	; 4
    846c:	ed 91       	ld	r30, X+
    846e:	fc 91       	ld	r31, X
    8470:	15 97       	sbiw	r26, 0x05	; 5
    8472:	19 95       	eicall
    8474:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    8476:	27 c0       	rjmp	.+78     	; 0x84c6 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    8478:	cf 5f       	subi	r28, 0xFF	; 255
    847a:	a0 91 34 2a 	lds	r26, 0x2A34	; 0x802a34 <udc_ptr_conf>
    847e:	b0 91 35 2a 	lds	r27, 0x2A35	; 0x802a35 <udc_ptr_conf+0x1>
    8482:	ed 91       	ld	r30, X+
    8484:	fc 91       	ld	r31, X
    8486:	11 97       	sbiw	r26, 0x01	; 1
    8488:	94 81       	ldd	r25, Z+4	; 0x04
    848a:	c9 17       	cp	r28, r25
    848c:	b0 f2       	brcs	.-84     	; 0x843a <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    848e:	1b c0       	rjmp	.+54     	; 0x84c6 <udc_process_setup+0x55e>
    8490:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    8492:	19 c0       	rjmp	.+50     	; 0x84c6 <udc_process_setup+0x55e>
    8494:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    8496:	17 c0       	rjmp	.+46     	; 0x84c6 <udc_process_setup+0x55e>
    8498:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    849a:	15 c0       	rjmp	.+42     	; 0x84c6 <udc_process_setup+0x55e>
    849c:	80 e0       	ldi	r24, 0x00	; 0
    849e:	13 c0       	rjmp	.+38     	; 0x84c6 <udc_process_setup+0x55e>
    84a0:	80 e0       	ldi	r24, 0x00	; 0
    84a2:	11 c0       	rjmp	.+34     	; 0x84c6 <udc_process_setup+0x55e>
    84a4:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    84a6:	0f c0       	rjmp	.+30     	; 0x84c6 <udc_process_setup+0x55e>
    84a8:	98 2f       	mov	r25, r24
    84aa:	90 76       	andi	r25, 0x60	; 96
    84ac:	09 f0       	breq	.+2      	; 0x84b0 <udc_process_setup+0x548>
    84ae:	7b cf       	rjmp	.-266    	; 0x83a6 <udc_process_setup+0x43e>
    84b0:	74 cd       	rjmp	.-1304   	; 0x7f9a <udc_process_setup+0x32>
    84b2:	98 2f       	mov	r25, r24
    84b4:	90 76       	andi	r25, 0x60	; 96
    84b6:	09 f0       	breq	.+2      	; 0x84ba <udc_process_setup+0x552>
    84b8:	76 cf       	rjmp	.-276    	; 0x83a6 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    84ba:	77 ce       	rjmp	.-786    	; 0x81aa <udc_process_setup+0x242>
		str = udc_string_product_name;
    84bc:	3c e0       	ldi	r19, 0x0C	; 12
    84be:	e4 ed       	ldi	r30, 0xD4	; 212
    84c0:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    84c2:	eb cd       	rjmp	.-1066   	; 0x809a <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    84c4:	81 e0       	ldi	r24, 0x01	; 1
    84c6:	df 91       	pop	r29
    84c8:	cf 91       	pop	r28
    84ca:	1f 91       	pop	r17
    84cc:	0f 91       	pop	r16
    84ce:	08 95       	ret

000084d0 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    84d0:	cf 93       	push	r28
    84d2:	df 93       	push	r29
    84d4:	1f 92       	push	r1
    84d6:	cd b7       	in	r28, 0x3d	; 61
    84d8:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    84da:	80 91 65 2a 	lds	r24, 0x2A65	; 0x802a65 <stdio_base>
    84de:	90 91 66 2a 	lds	r25, 0x2A66	; 0x802a66 <stdio_base+0x1>
    84e2:	e0 91 61 2a 	lds	r30, 0x2A61	; 0x802a61 <ptr_get>
    84e6:	f0 91 62 2a 	lds	r31, 0x2A62	; 0x802a62 <ptr_get+0x1>
    84ea:	be 01       	movw	r22, r28
    84ec:	6f 5f       	subi	r22, 0xFF	; 255
    84ee:	7f 4f       	sbci	r23, 0xFF	; 255
    84f0:	19 95       	eicall
	return c;
    84f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    84f4:	08 2e       	mov	r0, r24
    84f6:	00 0c       	add	r0, r0
    84f8:	99 0b       	sbc	r25, r25
    84fa:	0f 90       	pop	r0
    84fc:	df 91       	pop	r29
    84fe:	cf 91       	pop	r28
    8500:	08 95       	ret

00008502 <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    8502:	80 91 3c 2a 	lds	r24, 0x2A3C	; 0x802a3c <stdio_usb_interface_enable>
    8506:	88 23       	and	r24, r24
    8508:	81 f0       	breq	.+32     	; 0x852a <stdio_usb_putchar+0x28>
    850a:	86 2f       	mov	r24, r22
    850c:	08 2e       	mov	r0, r24
    850e:	00 0c       	add	r0, r0
    8510:	99 0b       	sbc	r25, r25
    8512:	df db       	rcall	.-2114   	; 0x7cd2 <udi_cdc_putc>
    8514:	21 e0       	ldi	r18, 0x01	; 1
    8516:	30 e0       	ldi	r19, 0x00	; 0
    8518:	89 2b       	or	r24, r25
    851a:	11 f0       	breq	.+4      	; 0x8520 <stdio_usb_putchar+0x1e>
    851c:	20 e0       	ldi	r18, 0x00	; 0
    851e:	30 e0       	ldi	r19, 0x00	; 0
    8520:	88 27       	eor	r24, r24
    8522:	99 27       	eor	r25, r25
    8524:	82 1b       	sub	r24, r18
    8526:	93 0b       	sbc	r25, r19
    8528:	08 95       	ret
    852a:	80 e0       	ldi	r24, 0x00	; 0
    852c:	90 e0       	ldi	r25, 0x00	; 0
    852e:	08 95       	ret

00008530 <stdio_usb_getchar>:
    8530:	cf 93       	push	r28
    8532:	df 93       	push	r29
    8534:	80 91 3c 2a 	lds	r24, 0x2A3C	; 0x802a3c <stdio_usb_interface_enable>
    8538:	81 11       	cpse	r24, r1
    853a:	03 c0       	rjmp	.+6      	; 0x8542 <stdio_usb_getchar+0x12>
    853c:	fb 01       	movw	r30, r22
    853e:	10 82       	st	Z, r1
    8540:	03 c0       	rjmp	.+6      	; 0x8548 <stdio_usb_getchar+0x18>
    8542:	eb 01       	movw	r28, r22
    8544:	3e db       	rcall	.-2436   	; 0x7bc2 <udi_cdc_getc>
    8546:	88 83       	st	Y, r24
    8548:	df 91       	pop	r29
    854a:	cf 91       	pop	r28
    854c:	08 95       	ret

0000854e <stdio_usb_enable>:
    854e:	81 e0       	ldi	r24, 0x01	; 1
    8550:	80 93 3c 2a 	sts	0x2A3C, r24	; 0x802a3c <stdio_usb_interface_enable>
    8554:	08 95       	ret

00008556 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    8556:	10 92 65 2a 	sts	0x2A65, r1	; 0x802a65 <stdio_base>
    855a:	10 92 66 2a 	sts	0x2A66, r1	; 0x802a66 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    855e:	81 e8       	ldi	r24, 0x81	; 129
    8560:	92 e4       	ldi	r25, 0x42	; 66
    8562:	80 93 63 2a 	sts	0x2A63, r24	; 0x802a63 <ptr_put>
    8566:	90 93 64 2a 	sts	0x2A64, r25	; 0x802a64 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    856a:	88 e9       	ldi	r24, 0x98	; 152
    856c:	92 e4       	ldi	r25, 0x42	; 66
    856e:	80 93 61 2a 	sts	0x2A61, r24	; 0x802a61 <ptr_get>
    8572:	90 93 62 2a 	sts	0x2A62, r25	; 0x802a62 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    8576:	9b dc       	rcall	.-1738   	; 0x7eae <udc_start>
    8578:	68 e6       	ldi	r22, 0x68	; 104
    857a:	72 e4       	ldi	r23, 0x42	; 66
    857c:	82 ec       	ldi	r24, 0xC2	; 194
    857e:	92 e4       	ldi	r25, 0x42	; 66
    8580:	45 c3       	rjmp	.+1674   	; 0x8c0c <fdevopen>
    8582:	08 95       	ret

00008584 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    8584:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    8586:	80 91 65 2a 	lds	r24, 0x2A65	; 0x802a65 <stdio_base>
    858a:	90 91 66 2a 	lds	r25, 0x2A66	; 0x802a66 <stdio_base+0x1>
    858e:	e0 91 63 2a 	lds	r30, 0x2A63	; 0x802a63 <ptr_put>
    8592:	f0 91 64 2a 	lds	r31, 0x2A64	; 0x802a64 <ptr_put+0x1>
    8596:	19 95       	eicall
    8598:	99 23       	and	r25, r25
    859a:	1c f0       	brlt	.+6      	; 0x85a2 <_write+0x1e>
		return -1;
	}
	return 1;
    859c:	81 e0       	ldi	r24, 0x01	; 1
    859e:	90 e0       	ldi	r25, 0x00	; 0
    85a0:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    85a2:	8f ef       	ldi	r24, 0xFF	; 255
    85a4:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    85a6:	08 95       	ret

000085a8 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    85a8:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    85ac:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    85ae:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    85b0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    85b4:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    85b6:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    85ba:	08 95       	ret

000085bc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    85bc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    85be:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    85c0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    85c2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    85c4:	60 83       	st	Z, r22
	ret                             // Return to caller
    85c6:	08 95       	ret

000085c8 <__mulsi3>:
    85c8:	db 01       	movw	r26, r22
    85ca:	8f 93       	push	r24
    85cc:	9f 93       	push	r25
    85ce:	87 d0       	rcall	.+270    	; 0x86de <__muluhisi3>
    85d0:	bf 91       	pop	r27
    85d2:	af 91       	pop	r26
    85d4:	a2 9f       	mul	r26, r18
    85d6:	80 0d       	add	r24, r0
    85d8:	91 1d       	adc	r25, r1
    85da:	a3 9f       	mul	r26, r19
    85dc:	90 0d       	add	r25, r0
    85de:	b2 9f       	mul	r27, r18
    85e0:	90 0d       	add	r25, r0
    85e2:	11 24       	eor	r1, r1
    85e4:	08 95       	ret

000085e6 <__udivmodhi4>:
    85e6:	aa 1b       	sub	r26, r26
    85e8:	bb 1b       	sub	r27, r27
    85ea:	51 e1       	ldi	r21, 0x11	; 17
    85ec:	07 c0       	rjmp	.+14     	; 0x85fc <__udivmodhi4_ep>

000085ee <__udivmodhi4_loop>:
    85ee:	aa 1f       	adc	r26, r26
    85f0:	bb 1f       	adc	r27, r27
    85f2:	a6 17       	cp	r26, r22
    85f4:	b7 07       	cpc	r27, r23
    85f6:	10 f0       	brcs	.+4      	; 0x85fc <__udivmodhi4_ep>
    85f8:	a6 1b       	sub	r26, r22
    85fa:	b7 0b       	sbc	r27, r23

000085fc <__udivmodhi4_ep>:
    85fc:	88 1f       	adc	r24, r24
    85fe:	99 1f       	adc	r25, r25
    8600:	5a 95       	dec	r21
    8602:	a9 f7       	brne	.-22     	; 0x85ee <__udivmodhi4_loop>
    8604:	80 95       	com	r24
    8606:	90 95       	com	r25
    8608:	bc 01       	movw	r22, r24
    860a:	cd 01       	movw	r24, r26
    860c:	08 95       	ret

0000860e <__divmodhi4>:
    860e:	97 fb       	bst	r25, 7
    8610:	07 2e       	mov	r0, r23
    8612:	16 f4       	brtc	.+4      	; 0x8618 <__divmodhi4+0xa>
    8614:	00 94       	com	r0
    8616:	06 d0       	rcall	.+12     	; 0x8624 <__divmodhi4_neg1>
    8618:	77 fd       	sbrc	r23, 7
    861a:	08 d0       	rcall	.+16     	; 0x862c <__divmodhi4_neg2>
    861c:	e4 df       	rcall	.-56     	; 0x85e6 <__udivmodhi4>
    861e:	07 fc       	sbrc	r0, 7
    8620:	05 d0       	rcall	.+10     	; 0x862c <__divmodhi4_neg2>
    8622:	3e f4       	brtc	.+14     	; 0x8632 <__divmodhi4_exit>

00008624 <__divmodhi4_neg1>:
    8624:	90 95       	com	r25
    8626:	81 95       	neg	r24
    8628:	9f 4f       	sbci	r25, 0xFF	; 255
    862a:	08 95       	ret

0000862c <__divmodhi4_neg2>:
    862c:	70 95       	com	r23
    862e:	61 95       	neg	r22
    8630:	7f 4f       	sbci	r23, 0xFF	; 255

00008632 <__divmodhi4_exit>:
    8632:	08 95       	ret

00008634 <__udivmodsi4>:
    8634:	a1 e2       	ldi	r26, 0x21	; 33
    8636:	1a 2e       	mov	r1, r26
    8638:	aa 1b       	sub	r26, r26
    863a:	bb 1b       	sub	r27, r27
    863c:	fd 01       	movw	r30, r26
    863e:	0d c0       	rjmp	.+26     	; 0x865a <__udivmodsi4_ep>

00008640 <__udivmodsi4_loop>:
    8640:	aa 1f       	adc	r26, r26
    8642:	bb 1f       	adc	r27, r27
    8644:	ee 1f       	adc	r30, r30
    8646:	ff 1f       	adc	r31, r31
    8648:	a2 17       	cp	r26, r18
    864a:	b3 07       	cpc	r27, r19
    864c:	e4 07       	cpc	r30, r20
    864e:	f5 07       	cpc	r31, r21
    8650:	20 f0       	brcs	.+8      	; 0x865a <__udivmodsi4_ep>
    8652:	a2 1b       	sub	r26, r18
    8654:	b3 0b       	sbc	r27, r19
    8656:	e4 0b       	sbc	r30, r20
    8658:	f5 0b       	sbc	r31, r21

0000865a <__udivmodsi4_ep>:
    865a:	66 1f       	adc	r22, r22
    865c:	77 1f       	adc	r23, r23
    865e:	88 1f       	adc	r24, r24
    8660:	99 1f       	adc	r25, r25
    8662:	1a 94       	dec	r1
    8664:	69 f7       	brne	.-38     	; 0x8640 <__udivmodsi4_loop>
    8666:	60 95       	com	r22
    8668:	70 95       	com	r23
    866a:	80 95       	com	r24
    866c:	90 95       	com	r25
    866e:	9b 01       	movw	r18, r22
    8670:	ac 01       	movw	r20, r24
    8672:	bd 01       	movw	r22, r26
    8674:	cf 01       	movw	r24, r30
    8676:	08 95       	ret

00008678 <__divmodsi4>:
    8678:	05 2e       	mov	r0, r21
    867a:	97 fb       	bst	r25, 7
    867c:	16 f4       	brtc	.+4      	; 0x8682 <__divmodsi4+0xa>
    867e:	00 94       	com	r0
    8680:	0f d0       	rcall	.+30     	; 0x86a0 <__negsi2>
    8682:	57 fd       	sbrc	r21, 7
    8684:	05 d0       	rcall	.+10     	; 0x8690 <__divmodsi4_neg2>
    8686:	d6 df       	rcall	.-84     	; 0x8634 <__udivmodsi4>
    8688:	07 fc       	sbrc	r0, 7
    868a:	02 d0       	rcall	.+4      	; 0x8690 <__divmodsi4_neg2>
    868c:	46 f4       	brtc	.+16     	; 0x869e <__divmodsi4_exit>
    868e:	08 c0       	rjmp	.+16     	; 0x86a0 <__negsi2>

00008690 <__divmodsi4_neg2>:
    8690:	50 95       	com	r21
    8692:	40 95       	com	r20
    8694:	30 95       	com	r19
    8696:	21 95       	neg	r18
    8698:	3f 4f       	sbci	r19, 0xFF	; 255
    869a:	4f 4f       	sbci	r20, 0xFF	; 255
    869c:	5f 4f       	sbci	r21, 0xFF	; 255

0000869e <__divmodsi4_exit>:
    869e:	08 95       	ret

000086a0 <__negsi2>:
    86a0:	90 95       	com	r25
    86a2:	80 95       	com	r24
    86a4:	70 95       	com	r23
    86a6:	61 95       	neg	r22
    86a8:	7f 4f       	sbci	r23, 0xFF	; 255
    86aa:	8f 4f       	sbci	r24, 0xFF	; 255
    86ac:	9f 4f       	sbci	r25, 0xFF	; 255
    86ae:	08 95       	ret

000086b0 <__tablejump2__>:
    86b0:	ee 0f       	add	r30, r30
    86b2:	ff 1f       	adc	r31, r31
    86b4:	88 1f       	adc	r24, r24
    86b6:	8b bf       	out	0x3b, r24	; 59
    86b8:	07 90       	elpm	r0, Z+
    86ba:	f6 91       	elpm	r31, Z
    86bc:	e0 2d       	mov	r30, r0
    86be:	19 94       	eijmp

000086c0 <__umulhisi3>:
    86c0:	a2 9f       	mul	r26, r18
    86c2:	b0 01       	movw	r22, r0
    86c4:	b3 9f       	mul	r27, r19
    86c6:	c0 01       	movw	r24, r0
    86c8:	a3 9f       	mul	r26, r19
    86ca:	70 0d       	add	r23, r0
    86cc:	81 1d       	adc	r24, r1
    86ce:	11 24       	eor	r1, r1
    86d0:	91 1d       	adc	r25, r1
    86d2:	b2 9f       	mul	r27, r18
    86d4:	70 0d       	add	r23, r0
    86d6:	81 1d       	adc	r24, r1
    86d8:	11 24       	eor	r1, r1
    86da:	91 1d       	adc	r25, r1
    86dc:	08 95       	ret

000086de <__muluhisi3>:
    86de:	f0 df       	rcall	.-32     	; 0x86c0 <__umulhisi3>
    86e0:	a5 9f       	mul	r26, r21
    86e2:	90 0d       	add	r25, r0
    86e4:	b4 9f       	mul	r27, r20
    86e6:	90 0d       	add	r25, r0
    86e8:	a4 9f       	mul	r26, r20
    86ea:	80 0d       	add	r24, r0
    86ec:	91 1d       	adc	r25, r1
    86ee:	11 24       	eor	r1, r1
    86f0:	08 95       	ret

000086f2 <__muldi3>:
    86f2:	df 93       	push	r29
    86f4:	cf 93       	push	r28
    86f6:	1f 93       	push	r17
    86f8:	0f 93       	push	r16
    86fa:	9a 9d       	mul	r25, r10
    86fc:	f0 2d       	mov	r31, r0
    86fe:	21 9f       	mul	r18, r17
    8700:	f0 0d       	add	r31, r0
    8702:	8b 9d       	mul	r24, r11
    8704:	f0 0d       	add	r31, r0
    8706:	8a 9d       	mul	r24, r10
    8708:	e0 2d       	mov	r30, r0
    870a:	f1 0d       	add	r31, r1
    870c:	03 9f       	mul	r16, r19
    870e:	f0 0d       	add	r31, r0
    8710:	02 9f       	mul	r16, r18
    8712:	e0 0d       	add	r30, r0
    8714:	f1 1d       	adc	r31, r1
    8716:	4e 9d       	mul	r20, r14
    8718:	e0 0d       	add	r30, r0
    871a:	f1 1d       	adc	r31, r1
    871c:	5e 9d       	mul	r21, r14
    871e:	f0 0d       	add	r31, r0
    8720:	4f 9d       	mul	r20, r15
    8722:	f0 0d       	add	r31, r0
    8724:	7f 93       	push	r23
    8726:	6f 93       	push	r22
    8728:	bf 92       	push	r11
    872a:	af 92       	push	r10
    872c:	5f 93       	push	r21
    872e:	4f 93       	push	r20
    8730:	d5 01       	movw	r26, r10
    8732:	c6 df       	rcall	.-116    	; 0x86c0 <__umulhisi3>
    8734:	8b 01       	movw	r16, r22
    8736:	ac 01       	movw	r20, r24
    8738:	d7 01       	movw	r26, r14
    873a:	c2 df       	rcall	.-124    	; 0x86c0 <__umulhisi3>
    873c:	eb 01       	movw	r28, r22
    873e:	e8 0f       	add	r30, r24
    8740:	f9 1f       	adc	r31, r25
    8742:	d6 01       	movw	r26, r12
    8744:	1f d0       	rcall	.+62     	; 0x8784 <__muldi3_6>
    8746:	2f 91       	pop	r18
    8748:	3f 91       	pop	r19
    874a:	d6 01       	movw	r26, r12
    874c:	b9 df       	rcall	.-142    	; 0x86c0 <__umulhisi3>
    874e:	c6 0f       	add	r28, r22
    8750:	d7 1f       	adc	r29, r23
    8752:	e8 1f       	adc	r30, r24
    8754:	f9 1f       	adc	r31, r25
    8756:	af 91       	pop	r26
    8758:	bf 91       	pop	r27
    875a:	14 d0       	rcall	.+40     	; 0x8784 <__muldi3_6>
    875c:	2f 91       	pop	r18
    875e:	3f 91       	pop	r19
    8760:	af df       	rcall	.-162    	; 0x86c0 <__umulhisi3>
    8762:	c6 0f       	add	r28, r22
    8764:	d7 1f       	adc	r29, r23
    8766:	e8 1f       	adc	r30, r24
    8768:	f9 1f       	adc	r31, r25
    876a:	d6 01       	movw	r26, r12
    876c:	a9 df       	rcall	.-174    	; 0x86c0 <__umulhisi3>
    876e:	e6 0f       	add	r30, r22
    8770:	f7 1f       	adc	r31, r23
    8772:	98 01       	movw	r18, r16
    8774:	be 01       	movw	r22, r28
    8776:	cf 01       	movw	r24, r30
    8778:	11 24       	eor	r1, r1
    877a:	0f 91       	pop	r16
    877c:	1f 91       	pop	r17
    877e:	cf 91       	pop	r28
    8780:	df 91       	pop	r29
    8782:	08 95       	ret

00008784 <__muldi3_6>:
    8784:	9d df       	rcall	.-198    	; 0x86c0 <__umulhisi3>
    8786:	46 0f       	add	r20, r22
    8788:	57 1f       	adc	r21, r23
    878a:	c8 1f       	adc	r28, r24
    878c:	d9 1f       	adc	r29, r25
    878e:	08 f4       	brcc	.+2      	; 0x8792 <__muldi3_6+0xe>
    8790:	31 96       	adiw	r30, 0x01	; 1
    8792:	08 95       	ret

00008794 <__ashldi3>:
    8794:	0f 93       	push	r16
    8796:	08 30       	cpi	r16, 0x08	; 8
    8798:	90 f0       	brcs	.+36     	; 0x87be <__ashldi3+0x2a>
    879a:	98 2f       	mov	r25, r24
    879c:	87 2f       	mov	r24, r23
    879e:	76 2f       	mov	r23, r22
    87a0:	65 2f       	mov	r22, r21
    87a2:	54 2f       	mov	r21, r20
    87a4:	43 2f       	mov	r20, r19
    87a6:	32 2f       	mov	r19, r18
    87a8:	22 27       	eor	r18, r18
    87aa:	08 50       	subi	r16, 0x08	; 8
    87ac:	f4 cf       	rjmp	.-24     	; 0x8796 <__ashldi3+0x2>
    87ae:	22 0f       	add	r18, r18
    87b0:	33 1f       	adc	r19, r19
    87b2:	44 1f       	adc	r20, r20
    87b4:	55 1f       	adc	r21, r21
    87b6:	66 1f       	adc	r22, r22
    87b8:	77 1f       	adc	r23, r23
    87ba:	88 1f       	adc	r24, r24
    87bc:	99 1f       	adc	r25, r25
    87be:	0a 95       	dec	r16
    87c0:	b2 f7       	brpl	.-20     	; 0x87ae <__ashldi3+0x1a>
    87c2:	0f 91       	pop	r16
    87c4:	08 95       	ret

000087c6 <__ashrdi3>:
    87c6:	97 fb       	bst	r25, 7
    87c8:	10 f8       	bld	r1, 0

000087ca <__lshrdi3>:
    87ca:	16 94       	lsr	r1
    87cc:	00 08       	sbc	r0, r0
    87ce:	0f 93       	push	r16
    87d0:	08 30       	cpi	r16, 0x08	; 8
    87d2:	98 f0       	brcs	.+38     	; 0x87fa <__lshrdi3+0x30>
    87d4:	08 50       	subi	r16, 0x08	; 8
    87d6:	23 2f       	mov	r18, r19
    87d8:	34 2f       	mov	r19, r20
    87da:	45 2f       	mov	r20, r21
    87dc:	56 2f       	mov	r21, r22
    87de:	67 2f       	mov	r22, r23
    87e0:	78 2f       	mov	r23, r24
    87e2:	89 2f       	mov	r24, r25
    87e4:	90 2d       	mov	r25, r0
    87e6:	f4 cf       	rjmp	.-24     	; 0x87d0 <__lshrdi3+0x6>
    87e8:	05 94       	asr	r0
    87ea:	97 95       	ror	r25
    87ec:	87 95       	ror	r24
    87ee:	77 95       	ror	r23
    87f0:	67 95       	ror	r22
    87f2:	57 95       	ror	r21
    87f4:	47 95       	ror	r20
    87f6:	37 95       	ror	r19
    87f8:	27 95       	ror	r18
    87fa:	0a 95       	dec	r16
    87fc:	aa f7       	brpl	.-22     	; 0x87e8 <__lshrdi3+0x1e>
    87fe:	0f 91       	pop	r16
    8800:	08 95       	ret

00008802 <__adddi3>:
    8802:	2a 0d       	add	r18, r10
    8804:	3b 1d       	adc	r19, r11
    8806:	4c 1d       	adc	r20, r12
    8808:	5d 1d       	adc	r21, r13
    880a:	6e 1d       	adc	r22, r14
    880c:	7f 1d       	adc	r23, r15
    880e:	80 1f       	adc	r24, r16
    8810:	91 1f       	adc	r25, r17
    8812:	08 95       	ret

00008814 <__subdi3>:
    8814:	2a 19       	sub	r18, r10
    8816:	3b 09       	sbc	r19, r11
    8818:	4c 09       	sbc	r20, r12
    881a:	5d 09       	sbc	r21, r13
    881c:	6e 09       	sbc	r22, r14
    881e:	7f 09       	sbc	r23, r15
    8820:	80 0b       	sbc	r24, r16
    8822:	91 0b       	sbc	r25, r17
    8824:	08 95       	ret

00008826 <__subsf3>:
    8826:	50 58       	subi	r21, 0x80	; 128

00008828 <__addsf3>:
    8828:	bb 27       	eor	r27, r27
    882a:	aa 27       	eor	r26, r26
    882c:	0e d0       	rcall	.+28     	; 0x884a <__addsf3x>
    882e:	48 c1       	rjmp	.+656    	; 0x8ac0 <__fp_round>
    8830:	39 d1       	rcall	.+626    	; 0x8aa4 <__fp_pscA>
    8832:	30 f0       	brcs	.+12     	; 0x8840 <__addsf3+0x18>
    8834:	3e d1       	rcall	.+636    	; 0x8ab2 <__fp_pscB>
    8836:	20 f0       	brcs	.+8      	; 0x8840 <__addsf3+0x18>
    8838:	31 f4       	brne	.+12     	; 0x8846 <__addsf3+0x1e>
    883a:	9f 3f       	cpi	r25, 0xFF	; 255
    883c:	11 f4       	brne	.+4      	; 0x8842 <__addsf3+0x1a>
    883e:	1e f4       	brtc	.+6      	; 0x8846 <__addsf3+0x1e>
    8840:	2e c1       	rjmp	.+604    	; 0x8a9e <__fp_nan>
    8842:	0e f4       	brtc	.+2      	; 0x8846 <__addsf3+0x1e>
    8844:	e0 95       	com	r30
    8846:	e7 fb       	bst	r30, 7
    8848:	24 c1       	rjmp	.+584    	; 0x8a92 <__fp_inf>

0000884a <__addsf3x>:
    884a:	e9 2f       	mov	r30, r25
    884c:	4a d1       	rcall	.+660    	; 0x8ae2 <__fp_split3>
    884e:	80 f3       	brcs	.-32     	; 0x8830 <__addsf3+0x8>
    8850:	ba 17       	cp	r27, r26
    8852:	62 07       	cpc	r22, r18
    8854:	73 07       	cpc	r23, r19
    8856:	84 07       	cpc	r24, r20
    8858:	95 07       	cpc	r25, r21
    885a:	18 f0       	brcs	.+6      	; 0x8862 <__addsf3x+0x18>
    885c:	71 f4       	brne	.+28     	; 0x887a <__addsf3x+0x30>
    885e:	9e f5       	brtc	.+102    	; 0x88c6 <__addsf3x+0x7c>
    8860:	62 c1       	rjmp	.+708    	; 0x8b26 <__fp_zero>
    8862:	0e f4       	brtc	.+2      	; 0x8866 <__addsf3x+0x1c>
    8864:	e0 95       	com	r30
    8866:	0b 2e       	mov	r0, r27
    8868:	ba 2f       	mov	r27, r26
    886a:	a0 2d       	mov	r26, r0
    886c:	0b 01       	movw	r0, r22
    886e:	b9 01       	movw	r22, r18
    8870:	90 01       	movw	r18, r0
    8872:	0c 01       	movw	r0, r24
    8874:	ca 01       	movw	r24, r20
    8876:	a0 01       	movw	r20, r0
    8878:	11 24       	eor	r1, r1
    887a:	ff 27       	eor	r31, r31
    887c:	59 1b       	sub	r21, r25
    887e:	99 f0       	breq	.+38     	; 0x88a6 <__addsf3x+0x5c>
    8880:	59 3f       	cpi	r21, 0xF9	; 249
    8882:	50 f4       	brcc	.+20     	; 0x8898 <__addsf3x+0x4e>
    8884:	50 3e       	cpi	r21, 0xE0	; 224
    8886:	68 f1       	brcs	.+90     	; 0x88e2 <__addsf3x+0x98>
    8888:	1a 16       	cp	r1, r26
    888a:	f0 40       	sbci	r31, 0x00	; 0
    888c:	a2 2f       	mov	r26, r18
    888e:	23 2f       	mov	r18, r19
    8890:	34 2f       	mov	r19, r20
    8892:	44 27       	eor	r20, r20
    8894:	58 5f       	subi	r21, 0xF8	; 248
    8896:	f3 cf       	rjmp	.-26     	; 0x887e <__addsf3x+0x34>
    8898:	46 95       	lsr	r20
    889a:	37 95       	ror	r19
    889c:	27 95       	ror	r18
    889e:	a7 95       	ror	r26
    88a0:	f0 40       	sbci	r31, 0x00	; 0
    88a2:	53 95       	inc	r21
    88a4:	c9 f7       	brne	.-14     	; 0x8898 <__addsf3x+0x4e>
    88a6:	7e f4       	brtc	.+30     	; 0x88c6 <__addsf3x+0x7c>
    88a8:	1f 16       	cp	r1, r31
    88aa:	ba 0b       	sbc	r27, r26
    88ac:	62 0b       	sbc	r22, r18
    88ae:	73 0b       	sbc	r23, r19
    88b0:	84 0b       	sbc	r24, r20
    88b2:	ba f0       	brmi	.+46     	; 0x88e2 <__addsf3x+0x98>
    88b4:	91 50       	subi	r25, 0x01	; 1
    88b6:	a1 f0       	breq	.+40     	; 0x88e0 <__addsf3x+0x96>
    88b8:	ff 0f       	add	r31, r31
    88ba:	bb 1f       	adc	r27, r27
    88bc:	66 1f       	adc	r22, r22
    88be:	77 1f       	adc	r23, r23
    88c0:	88 1f       	adc	r24, r24
    88c2:	c2 f7       	brpl	.-16     	; 0x88b4 <__addsf3x+0x6a>
    88c4:	0e c0       	rjmp	.+28     	; 0x88e2 <__addsf3x+0x98>
    88c6:	ba 0f       	add	r27, r26
    88c8:	62 1f       	adc	r22, r18
    88ca:	73 1f       	adc	r23, r19
    88cc:	84 1f       	adc	r24, r20
    88ce:	48 f4       	brcc	.+18     	; 0x88e2 <__addsf3x+0x98>
    88d0:	87 95       	ror	r24
    88d2:	77 95       	ror	r23
    88d4:	67 95       	ror	r22
    88d6:	b7 95       	ror	r27
    88d8:	f7 95       	ror	r31
    88da:	9e 3f       	cpi	r25, 0xFE	; 254
    88dc:	08 f0       	brcs	.+2      	; 0x88e0 <__addsf3x+0x96>
    88de:	b3 cf       	rjmp	.-154    	; 0x8846 <__addsf3+0x1e>
    88e0:	93 95       	inc	r25
    88e2:	88 0f       	add	r24, r24
    88e4:	08 f0       	brcs	.+2      	; 0x88e8 <__addsf3x+0x9e>
    88e6:	99 27       	eor	r25, r25
    88e8:	ee 0f       	add	r30, r30
    88ea:	97 95       	ror	r25
    88ec:	87 95       	ror	r24
    88ee:	08 95       	ret

000088f0 <__divsf3>:
    88f0:	0c d0       	rcall	.+24     	; 0x890a <__divsf3x>
    88f2:	e6 c0       	rjmp	.+460    	; 0x8ac0 <__fp_round>
    88f4:	de d0       	rcall	.+444    	; 0x8ab2 <__fp_pscB>
    88f6:	40 f0       	brcs	.+16     	; 0x8908 <__divsf3+0x18>
    88f8:	d5 d0       	rcall	.+426    	; 0x8aa4 <__fp_pscA>
    88fa:	30 f0       	brcs	.+12     	; 0x8908 <__divsf3+0x18>
    88fc:	21 f4       	brne	.+8      	; 0x8906 <__divsf3+0x16>
    88fe:	5f 3f       	cpi	r21, 0xFF	; 255
    8900:	19 f0       	breq	.+6      	; 0x8908 <__divsf3+0x18>
    8902:	c7 c0       	rjmp	.+398    	; 0x8a92 <__fp_inf>
    8904:	51 11       	cpse	r21, r1
    8906:	10 c1       	rjmp	.+544    	; 0x8b28 <__fp_szero>
    8908:	ca c0       	rjmp	.+404    	; 0x8a9e <__fp_nan>

0000890a <__divsf3x>:
    890a:	eb d0       	rcall	.+470    	; 0x8ae2 <__fp_split3>
    890c:	98 f3       	brcs	.-26     	; 0x88f4 <__divsf3+0x4>

0000890e <__divsf3_pse>:
    890e:	99 23       	and	r25, r25
    8910:	c9 f3       	breq	.-14     	; 0x8904 <__divsf3+0x14>
    8912:	55 23       	and	r21, r21
    8914:	b1 f3       	breq	.-20     	; 0x8902 <__divsf3+0x12>
    8916:	95 1b       	sub	r25, r21
    8918:	55 0b       	sbc	r21, r21
    891a:	bb 27       	eor	r27, r27
    891c:	aa 27       	eor	r26, r26
    891e:	62 17       	cp	r22, r18
    8920:	73 07       	cpc	r23, r19
    8922:	84 07       	cpc	r24, r20
    8924:	38 f0       	brcs	.+14     	; 0x8934 <__divsf3_pse+0x26>
    8926:	9f 5f       	subi	r25, 0xFF	; 255
    8928:	5f 4f       	sbci	r21, 0xFF	; 255
    892a:	22 0f       	add	r18, r18
    892c:	33 1f       	adc	r19, r19
    892e:	44 1f       	adc	r20, r20
    8930:	aa 1f       	adc	r26, r26
    8932:	a9 f3       	breq	.-22     	; 0x891e <__divsf3_pse+0x10>
    8934:	33 d0       	rcall	.+102    	; 0x899c <__divsf3_pse+0x8e>
    8936:	0e 2e       	mov	r0, r30
    8938:	3a f0       	brmi	.+14     	; 0x8948 <__divsf3_pse+0x3a>
    893a:	e0 e8       	ldi	r30, 0x80	; 128
    893c:	30 d0       	rcall	.+96     	; 0x899e <__divsf3_pse+0x90>
    893e:	91 50       	subi	r25, 0x01	; 1
    8940:	50 40       	sbci	r21, 0x00	; 0
    8942:	e6 95       	lsr	r30
    8944:	00 1c       	adc	r0, r0
    8946:	ca f7       	brpl	.-14     	; 0x893a <__divsf3_pse+0x2c>
    8948:	29 d0       	rcall	.+82     	; 0x899c <__divsf3_pse+0x8e>
    894a:	fe 2f       	mov	r31, r30
    894c:	27 d0       	rcall	.+78     	; 0x899c <__divsf3_pse+0x8e>
    894e:	66 0f       	add	r22, r22
    8950:	77 1f       	adc	r23, r23
    8952:	88 1f       	adc	r24, r24
    8954:	bb 1f       	adc	r27, r27
    8956:	26 17       	cp	r18, r22
    8958:	37 07       	cpc	r19, r23
    895a:	48 07       	cpc	r20, r24
    895c:	ab 07       	cpc	r26, r27
    895e:	b0 e8       	ldi	r27, 0x80	; 128
    8960:	09 f0       	breq	.+2      	; 0x8964 <__divsf3_pse+0x56>
    8962:	bb 0b       	sbc	r27, r27
    8964:	80 2d       	mov	r24, r0
    8966:	bf 01       	movw	r22, r30
    8968:	ff 27       	eor	r31, r31
    896a:	93 58       	subi	r25, 0x83	; 131
    896c:	5f 4f       	sbci	r21, 0xFF	; 255
    896e:	2a f0       	brmi	.+10     	; 0x897a <__divsf3_pse+0x6c>
    8970:	9e 3f       	cpi	r25, 0xFE	; 254
    8972:	51 05       	cpc	r21, r1
    8974:	68 f0       	brcs	.+26     	; 0x8990 <__divsf3_pse+0x82>
    8976:	8d c0       	rjmp	.+282    	; 0x8a92 <__fp_inf>
    8978:	d7 c0       	rjmp	.+430    	; 0x8b28 <__fp_szero>
    897a:	5f 3f       	cpi	r21, 0xFF	; 255
    897c:	ec f3       	brlt	.-6      	; 0x8978 <__divsf3_pse+0x6a>
    897e:	98 3e       	cpi	r25, 0xE8	; 232
    8980:	dc f3       	brlt	.-10     	; 0x8978 <__divsf3_pse+0x6a>
    8982:	86 95       	lsr	r24
    8984:	77 95       	ror	r23
    8986:	67 95       	ror	r22
    8988:	b7 95       	ror	r27
    898a:	f7 95       	ror	r31
    898c:	9f 5f       	subi	r25, 0xFF	; 255
    898e:	c9 f7       	brne	.-14     	; 0x8982 <__divsf3_pse+0x74>
    8990:	88 0f       	add	r24, r24
    8992:	91 1d       	adc	r25, r1
    8994:	96 95       	lsr	r25
    8996:	87 95       	ror	r24
    8998:	97 f9       	bld	r25, 7
    899a:	08 95       	ret
    899c:	e1 e0       	ldi	r30, 0x01	; 1
    899e:	66 0f       	add	r22, r22
    89a0:	77 1f       	adc	r23, r23
    89a2:	88 1f       	adc	r24, r24
    89a4:	bb 1f       	adc	r27, r27
    89a6:	62 17       	cp	r22, r18
    89a8:	73 07       	cpc	r23, r19
    89aa:	84 07       	cpc	r24, r20
    89ac:	ba 07       	cpc	r27, r26
    89ae:	20 f0       	brcs	.+8      	; 0x89b8 <__divsf3_pse+0xaa>
    89b0:	62 1b       	sub	r22, r18
    89b2:	73 0b       	sbc	r23, r19
    89b4:	84 0b       	sbc	r24, r20
    89b6:	ba 0b       	sbc	r27, r26
    89b8:	ee 1f       	adc	r30, r30
    89ba:	88 f7       	brcc	.-30     	; 0x899e <__divsf3_pse+0x90>
    89bc:	e0 95       	com	r30
    89be:	08 95       	ret

000089c0 <__fixunssfsi>:
    89c0:	98 d0       	rcall	.+304    	; 0x8af2 <__fp_splitA>
    89c2:	88 f0       	brcs	.+34     	; 0x89e6 <__fixunssfsi+0x26>
    89c4:	9f 57       	subi	r25, 0x7F	; 127
    89c6:	90 f0       	brcs	.+36     	; 0x89ec <__fixunssfsi+0x2c>
    89c8:	b9 2f       	mov	r27, r25
    89ca:	99 27       	eor	r25, r25
    89cc:	b7 51       	subi	r27, 0x17	; 23
    89ce:	a0 f0       	brcs	.+40     	; 0x89f8 <__fixunssfsi+0x38>
    89d0:	d1 f0       	breq	.+52     	; 0x8a06 <__fixunssfsi+0x46>
    89d2:	66 0f       	add	r22, r22
    89d4:	77 1f       	adc	r23, r23
    89d6:	88 1f       	adc	r24, r24
    89d8:	99 1f       	adc	r25, r25
    89da:	1a f0       	brmi	.+6      	; 0x89e2 <__fixunssfsi+0x22>
    89dc:	ba 95       	dec	r27
    89de:	c9 f7       	brne	.-14     	; 0x89d2 <__fixunssfsi+0x12>
    89e0:	12 c0       	rjmp	.+36     	; 0x8a06 <__fixunssfsi+0x46>
    89e2:	b1 30       	cpi	r27, 0x01	; 1
    89e4:	81 f0       	breq	.+32     	; 0x8a06 <__fixunssfsi+0x46>
    89e6:	9f d0       	rcall	.+318    	; 0x8b26 <__fp_zero>
    89e8:	b1 e0       	ldi	r27, 0x01	; 1
    89ea:	08 95       	ret
    89ec:	9c c0       	rjmp	.+312    	; 0x8b26 <__fp_zero>
    89ee:	67 2f       	mov	r22, r23
    89f0:	78 2f       	mov	r23, r24
    89f2:	88 27       	eor	r24, r24
    89f4:	b8 5f       	subi	r27, 0xF8	; 248
    89f6:	39 f0       	breq	.+14     	; 0x8a06 <__fixunssfsi+0x46>
    89f8:	b9 3f       	cpi	r27, 0xF9	; 249
    89fa:	cc f3       	brlt	.-14     	; 0x89ee <__fixunssfsi+0x2e>
    89fc:	86 95       	lsr	r24
    89fe:	77 95       	ror	r23
    8a00:	67 95       	ror	r22
    8a02:	b3 95       	inc	r27
    8a04:	d9 f7       	brne	.-10     	; 0x89fc <__fixunssfsi+0x3c>
    8a06:	3e f4       	brtc	.+14     	; 0x8a16 <__fixunssfsi+0x56>
    8a08:	90 95       	com	r25
    8a0a:	80 95       	com	r24
    8a0c:	70 95       	com	r23
    8a0e:	61 95       	neg	r22
    8a10:	7f 4f       	sbci	r23, 0xFF	; 255
    8a12:	8f 4f       	sbci	r24, 0xFF	; 255
    8a14:	9f 4f       	sbci	r25, 0xFF	; 255
    8a16:	08 95       	ret

00008a18 <__floatunsisf>:
    8a18:	e8 94       	clt
    8a1a:	09 c0       	rjmp	.+18     	; 0x8a2e <__floatsisf+0x12>

00008a1c <__floatsisf>:
    8a1c:	97 fb       	bst	r25, 7
    8a1e:	3e f4       	brtc	.+14     	; 0x8a2e <__floatsisf+0x12>
    8a20:	90 95       	com	r25
    8a22:	80 95       	com	r24
    8a24:	70 95       	com	r23
    8a26:	61 95       	neg	r22
    8a28:	7f 4f       	sbci	r23, 0xFF	; 255
    8a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    8a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    8a2e:	99 23       	and	r25, r25
    8a30:	a9 f0       	breq	.+42     	; 0x8a5c <__floatsisf+0x40>
    8a32:	f9 2f       	mov	r31, r25
    8a34:	96 e9       	ldi	r25, 0x96	; 150
    8a36:	bb 27       	eor	r27, r27
    8a38:	93 95       	inc	r25
    8a3a:	f6 95       	lsr	r31
    8a3c:	87 95       	ror	r24
    8a3e:	77 95       	ror	r23
    8a40:	67 95       	ror	r22
    8a42:	b7 95       	ror	r27
    8a44:	f1 11       	cpse	r31, r1
    8a46:	f8 cf       	rjmp	.-16     	; 0x8a38 <__floatsisf+0x1c>
    8a48:	fa f4       	brpl	.+62     	; 0x8a88 <__floatsisf+0x6c>
    8a4a:	bb 0f       	add	r27, r27
    8a4c:	11 f4       	brne	.+4      	; 0x8a52 <__floatsisf+0x36>
    8a4e:	60 ff       	sbrs	r22, 0
    8a50:	1b c0       	rjmp	.+54     	; 0x8a88 <__floatsisf+0x6c>
    8a52:	6f 5f       	subi	r22, 0xFF	; 255
    8a54:	7f 4f       	sbci	r23, 0xFF	; 255
    8a56:	8f 4f       	sbci	r24, 0xFF	; 255
    8a58:	9f 4f       	sbci	r25, 0xFF	; 255
    8a5a:	16 c0       	rjmp	.+44     	; 0x8a88 <__floatsisf+0x6c>
    8a5c:	88 23       	and	r24, r24
    8a5e:	11 f0       	breq	.+4      	; 0x8a64 <__floatsisf+0x48>
    8a60:	96 e9       	ldi	r25, 0x96	; 150
    8a62:	11 c0       	rjmp	.+34     	; 0x8a86 <__floatsisf+0x6a>
    8a64:	77 23       	and	r23, r23
    8a66:	21 f0       	breq	.+8      	; 0x8a70 <__floatsisf+0x54>
    8a68:	9e e8       	ldi	r25, 0x8E	; 142
    8a6a:	87 2f       	mov	r24, r23
    8a6c:	76 2f       	mov	r23, r22
    8a6e:	05 c0       	rjmp	.+10     	; 0x8a7a <__floatsisf+0x5e>
    8a70:	66 23       	and	r22, r22
    8a72:	71 f0       	breq	.+28     	; 0x8a90 <__floatsisf+0x74>
    8a74:	96 e8       	ldi	r25, 0x86	; 134
    8a76:	86 2f       	mov	r24, r22
    8a78:	70 e0       	ldi	r23, 0x00	; 0
    8a7a:	60 e0       	ldi	r22, 0x00	; 0
    8a7c:	2a f0       	brmi	.+10     	; 0x8a88 <__floatsisf+0x6c>
    8a7e:	9a 95       	dec	r25
    8a80:	66 0f       	add	r22, r22
    8a82:	77 1f       	adc	r23, r23
    8a84:	88 1f       	adc	r24, r24
    8a86:	da f7       	brpl	.-10     	; 0x8a7e <__floatsisf+0x62>
    8a88:	88 0f       	add	r24, r24
    8a8a:	96 95       	lsr	r25
    8a8c:	87 95       	ror	r24
    8a8e:	97 f9       	bld	r25, 7
    8a90:	08 95       	ret

00008a92 <__fp_inf>:
    8a92:	97 f9       	bld	r25, 7
    8a94:	9f 67       	ori	r25, 0x7F	; 127
    8a96:	80 e8       	ldi	r24, 0x80	; 128
    8a98:	70 e0       	ldi	r23, 0x00	; 0
    8a9a:	60 e0       	ldi	r22, 0x00	; 0
    8a9c:	08 95       	ret

00008a9e <__fp_nan>:
    8a9e:	9f ef       	ldi	r25, 0xFF	; 255
    8aa0:	80 ec       	ldi	r24, 0xC0	; 192
    8aa2:	08 95       	ret

00008aa4 <__fp_pscA>:
    8aa4:	00 24       	eor	r0, r0
    8aa6:	0a 94       	dec	r0
    8aa8:	16 16       	cp	r1, r22
    8aaa:	17 06       	cpc	r1, r23
    8aac:	18 06       	cpc	r1, r24
    8aae:	09 06       	cpc	r0, r25
    8ab0:	08 95       	ret

00008ab2 <__fp_pscB>:
    8ab2:	00 24       	eor	r0, r0
    8ab4:	0a 94       	dec	r0
    8ab6:	12 16       	cp	r1, r18
    8ab8:	13 06       	cpc	r1, r19
    8aba:	14 06       	cpc	r1, r20
    8abc:	05 06       	cpc	r0, r21
    8abe:	08 95       	ret

00008ac0 <__fp_round>:
    8ac0:	09 2e       	mov	r0, r25
    8ac2:	03 94       	inc	r0
    8ac4:	00 0c       	add	r0, r0
    8ac6:	11 f4       	brne	.+4      	; 0x8acc <__fp_round+0xc>
    8ac8:	88 23       	and	r24, r24
    8aca:	52 f0       	brmi	.+20     	; 0x8ae0 <__fp_round+0x20>
    8acc:	bb 0f       	add	r27, r27
    8ace:	40 f4       	brcc	.+16     	; 0x8ae0 <__fp_round+0x20>
    8ad0:	bf 2b       	or	r27, r31
    8ad2:	11 f4       	brne	.+4      	; 0x8ad8 <__fp_round+0x18>
    8ad4:	60 ff       	sbrs	r22, 0
    8ad6:	04 c0       	rjmp	.+8      	; 0x8ae0 <__fp_round+0x20>
    8ad8:	6f 5f       	subi	r22, 0xFF	; 255
    8ada:	7f 4f       	sbci	r23, 0xFF	; 255
    8adc:	8f 4f       	sbci	r24, 0xFF	; 255
    8ade:	9f 4f       	sbci	r25, 0xFF	; 255
    8ae0:	08 95       	ret

00008ae2 <__fp_split3>:
    8ae2:	57 fd       	sbrc	r21, 7
    8ae4:	90 58       	subi	r25, 0x80	; 128
    8ae6:	44 0f       	add	r20, r20
    8ae8:	55 1f       	adc	r21, r21
    8aea:	59 f0       	breq	.+22     	; 0x8b02 <__fp_splitA+0x10>
    8aec:	5f 3f       	cpi	r21, 0xFF	; 255
    8aee:	71 f0       	breq	.+28     	; 0x8b0c <__fp_splitA+0x1a>
    8af0:	47 95       	ror	r20

00008af2 <__fp_splitA>:
    8af2:	88 0f       	add	r24, r24
    8af4:	97 fb       	bst	r25, 7
    8af6:	99 1f       	adc	r25, r25
    8af8:	61 f0       	breq	.+24     	; 0x8b12 <__fp_splitA+0x20>
    8afa:	9f 3f       	cpi	r25, 0xFF	; 255
    8afc:	79 f0       	breq	.+30     	; 0x8b1c <__fp_splitA+0x2a>
    8afe:	87 95       	ror	r24
    8b00:	08 95       	ret
    8b02:	12 16       	cp	r1, r18
    8b04:	13 06       	cpc	r1, r19
    8b06:	14 06       	cpc	r1, r20
    8b08:	55 1f       	adc	r21, r21
    8b0a:	f2 cf       	rjmp	.-28     	; 0x8af0 <__fp_split3+0xe>
    8b0c:	46 95       	lsr	r20
    8b0e:	f1 df       	rcall	.-30     	; 0x8af2 <__fp_splitA>
    8b10:	08 c0       	rjmp	.+16     	; 0x8b22 <__fp_splitA+0x30>
    8b12:	16 16       	cp	r1, r22
    8b14:	17 06       	cpc	r1, r23
    8b16:	18 06       	cpc	r1, r24
    8b18:	99 1f       	adc	r25, r25
    8b1a:	f1 cf       	rjmp	.-30     	; 0x8afe <__fp_splitA+0xc>
    8b1c:	86 95       	lsr	r24
    8b1e:	71 05       	cpc	r23, r1
    8b20:	61 05       	cpc	r22, r1
    8b22:	08 94       	sec
    8b24:	08 95       	ret

00008b26 <__fp_zero>:
    8b26:	e8 94       	clt

00008b28 <__fp_szero>:
    8b28:	bb 27       	eor	r27, r27
    8b2a:	66 27       	eor	r22, r22
    8b2c:	77 27       	eor	r23, r23
    8b2e:	cb 01       	movw	r24, r22
    8b30:	97 f9       	bld	r25, 7
    8b32:	08 95       	ret

00008b34 <__mulsf3>:
    8b34:	0b d0       	rcall	.+22     	; 0x8b4c <__mulsf3x>
    8b36:	c4 cf       	rjmp	.-120    	; 0x8ac0 <__fp_round>
    8b38:	b5 df       	rcall	.-150    	; 0x8aa4 <__fp_pscA>
    8b3a:	28 f0       	brcs	.+10     	; 0x8b46 <__mulsf3+0x12>
    8b3c:	ba df       	rcall	.-140    	; 0x8ab2 <__fp_pscB>
    8b3e:	18 f0       	brcs	.+6      	; 0x8b46 <__mulsf3+0x12>
    8b40:	95 23       	and	r25, r21
    8b42:	09 f0       	breq	.+2      	; 0x8b46 <__mulsf3+0x12>
    8b44:	a6 cf       	rjmp	.-180    	; 0x8a92 <__fp_inf>
    8b46:	ab cf       	rjmp	.-170    	; 0x8a9e <__fp_nan>
    8b48:	11 24       	eor	r1, r1
    8b4a:	ee cf       	rjmp	.-36     	; 0x8b28 <__fp_szero>

00008b4c <__mulsf3x>:
    8b4c:	ca df       	rcall	.-108    	; 0x8ae2 <__fp_split3>
    8b4e:	a0 f3       	brcs	.-24     	; 0x8b38 <__mulsf3+0x4>

00008b50 <__mulsf3_pse>:
    8b50:	95 9f       	mul	r25, r21
    8b52:	d1 f3       	breq	.-12     	; 0x8b48 <__mulsf3+0x14>
    8b54:	95 0f       	add	r25, r21
    8b56:	50 e0       	ldi	r21, 0x00	; 0
    8b58:	55 1f       	adc	r21, r21
    8b5a:	62 9f       	mul	r22, r18
    8b5c:	f0 01       	movw	r30, r0
    8b5e:	72 9f       	mul	r23, r18
    8b60:	bb 27       	eor	r27, r27
    8b62:	f0 0d       	add	r31, r0
    8b64:	b1 1d       	adc	r27, r1
    8b66:	63 9f       	mul	r22, r19
    8b68:	aa 27       	eor	r26, r26
    8b6a:	f0 0d       	add	r31, r0
    8b6c:	b1 1d       	adc	r27, r1
    8b6e:	aa 1f       	adc	r26, r26
    8b70:	64 9f       	mul	r22, r20
    8b72:	66 27       	eor	r22, r22
    8b74:	b0 0d       	add	r27, r0
    8b76:	a1 1d       	adc	r26, r1
    8b78:	66 1f       	adc	r22, r22
    8b7a:	82 9f       	mul	r24, r18
    8b7c:	22 27       	eor	r18, r18
    8b7e:	b0 0d       	add	r27, r0
    8b80:	a1 1d       	adc	r26, r1
    8b82:	62 1f       	adc	r22, r18
    8b84:	73 9f       	mul	r23, r19
    8b86:	b0 0d       	add	r27, r0
    8b88:	a1 1d       	adc	r26, r1
    8b8a:	62 1f       	adc	r22, r18
    8b8c:	83 9f       	mul	r24, r19
    8b8e:	a0 0d       	add	r26, r0
    8b90:	61 1d       	adc	r22, r1
    8b92:	22 1f       	adc	r18, r18
    8b94:	74 9f       	mul	r23, r20
    8b96:	33 27       	eor	r19, r19
    8b98:	a0 0d       	add	r26, r0
    8b9a:	61 1d       	adc	r22, r1
    8b9c:	23 1f       	adc	r18, r19
    8b9e:	84 9f       	mul	r24, r20
    8ba0:	60 0d       	add	r22, r0
    8ba2:	21 1d       	adc	r18, r1
    8ba4:	82 2f       	mov	r24, r18
    8ba6:	76 2f       	mov	r23, r22
    8ba8:	6a 2f       	mov	r22, r26
    8baa:	11 24       	eor	r1, r1
    8bac:	9f 57       	subi	r25, 0x7F	; 127
    8bae:	50 40       	sbci	r21, 0x00	; 0
    8bb0:	8a f0       	brmi	.+34     	; 0x8bd4 <__mulsf3_pse+0x84>
    8bb2:	e1 f0       	breq	.+56     	; 0x8bec <__mulsf3_pse+0x9c>
    8bb4:	88 23       	and	r24, r24
    8bb6:	4a f0       	brmi	.+18     	; 0x8bca <__mulsf3_pse+0x7a>
    8bb8:	ee 0f       	add	r30, r30
    8bba:	ff 1f       	adc	r31, r31
    8bbc:	bb 1f       	adc	r27, r27
    8bbe:	66 1f       	adc	r22, r22
    8bc0:	77 1f       	adc	r23, r23
    8bc2:	88 1f       	adc	r24, r24
    8bc4:	91 50       	subi	r25, 0x01	; 1
    8bc6:	50 40       	sbci	r21, 0x00	; 0
    8bc8:	a9 f7       	brne	.-22     	; 0x8bb4 <__mulsf3_pse+0x64>
    8bca:	9e 3f       	cpi	r25, 0xFE	; 254
    8bcc:	51 05       	cpc	r21, r1
    8bce:	70 f0       	brcs	.+28     	; 0x8bec <__mulsf3_pse+0x9c>
    8bd0:	60 cf       	rjmp	.-320    	; 0x8a92 <__fp_inf>
    8bd2:	aa cf       	rjmp	.-172    	; 0x8b28 <__fp_szero>
    8bd4:	5f 3f       	cpi	r21, 0xFF	; 255
    8bd6:	ec f3       	brlt	.-6      	; 0x8bd2 <__mulsf3_pse+0x82>
    8bd8:	98 3e       	cpi	r25, 0xE8	; 232
    8bda:	dc f3       	brlt	.-10     	; 0x8bd2 <__mulsf3_pse+0x82>
    8bdc:	86 95       	lsr	r24
    8bde:	77 95       	ror	r23
    8be0:	67 95       	ror	r22
    8be2:	b7 95       	ror	r27
    8be4:	f7 95       	ror	r31
    8be6:	e7 95       	ror	r30
    8be8:	9f 5f       	subi	r25, 0xFF	; 255
    8bea:	c1 f7       	brne	.-16     	; 0x8bdc <__mulsf3_pse+0x8c>
    8bec:	fe 2b       	or	r31, r30
    8bee:	88 0f       	add	r24, r24
    8bf0:	91 1d       	adc	r25, r1
    8bf2:	96 95       	lsr	r25
    8bf4:	87 95       	ror	r24
    8bf6:	97 f9       	bld	r25, 7
    8bf8:	08 95       	ret

00008bfa <memcpy>:
    8bfa:	fb 01       	movw	r30, r22
    8bfc:	dc 01       	movw	r26, r24
    8bfe:	02 c0       	rjmp	.+4      	; 0x8c04 <memcpy+0xa>
    8c00:	01 90       	ld	r0, Z+
    8c02:	0d 92       	st	X+, r0
    8c04:	41 50       	subi	r20, 0x01	; 1
    8c06:	50 40       	sbci	r21, 0x00	; 0
    8c08:	d8 f7       	brcc	.-10     	; 0x8c00 <memcpy+0x6>
    8c0a:	08 95       	ret

00008c0c <fdevopen>:
    8c0c:	0f 93       	push	r16
    8c0e:	1f 93       	push	r17
    8c10:	cf 93       	push	r28
    8c12:	df 93       	push	r29
    8c14:	00 97       	sbiw	r24, 0x00	; 0
    8c16:	31 f4       	brne	.+12     	; 0x8c24 <fdevopen+0x18>
    8c18:	61 15       	cp	r22, r1
    8c1a:	71 05       	cpc	r23, r1
    8c1c:	19 f4       	brne	.+6      	; 0x8c24 <fdevopen+0x18>
    8c1e:	80 e0       	ldi	r24, 0x00	; 0
    8c20:	90 e0       	ldi	r25, 0x00	; 0
    8c22:	39 c0       	rjmp	.+114    	; 0x8c96 <fdevopen+0x8a>
    8c24:	8b 01       	movw	r16, r22
    8c26:	ec 01       	movw	r28, r24
    8c28:	6e e0       	ldi	r22, 0x0E	; 14
    8c2a:	70 e0       	ldi	r23, 0x00	; 0
    8c2c:	81 e0       	ldi	r24, 0x01	; 1
    8c2e:	90 e0       	ldi	r25, 0x00	; 0
    8c30:	99 d2       	rcall	.+1330   	; 0x9164 <calloc>
    8c32:	fc 01       	movw	r30, r24
    8c34:	89 2b       	or	r24, r25
    8c36:	99 f3       	breq	.-26     	; 0x8c1e <fdevopen+0x12>
    8c38:	80 e8       	ldi	r24, 0x80	; 128
    8c3a:	83 83       	std	Z+3, r24	; 0x03
    8c3c:	01 15       	cp	r16, r1
    8c3e:	11 05       	cpc	r17, r1
    8c40:	71 f0       	breq	.+28     	; 0x8c5e <fdevopen+0x52>
    8c42:	02 87       	std	Z+10, r16	; 0x0a
    8c44:	13 87       	std	Z+11, r17	; 0x0b
    8c46:	81 e8       	ldi	r24, 0x81	; 129
    8c48:	83 83       	std	Z+3, r24	; 0x03
    8c4a:	80 91 67 2a 	lds	r24, 0x2A67	; 0x802a67 <__iob>
    8c4e:	90 91 68 2a 	lds	r25, 0x2A68	; 0x802a68 <__iob+0x1>
    8c52:	89 2b       	or	r24, r25
    8c54:	21 f4       	brne	.+8      	; 0x8c5e <fdevopen+0x52>
    8c56:	e0 93 67 2a 	sts	0x2A67, r30	; 0x802a67 <__iob>
    8c5a:	f0 93 68 2a 	sts	0x2A68, r31	; 0x802a68 <__iob+0x1>
    8c5e:	20 97       	sbiw	r28, 0x00	; 0
    8c60:	c9 f0       	breq	.+50     	; 0x8c94 <fdevopen+0x88>
    8c62:	c0 87       	std	Z+8, r28	; 0x08
    8c64:	d1 87       	std	Z+9, r29	; 0x09
    8c66:	83 81       	ldd	r24, Z+3	; 0x03
    8c68:	82 60       	ori	r24, 0x02	; 2
    8c6a:	83 83       	std	Z+3, r24	; 0x03
    8c6c:	80 91 69 2a 	lds	r24, 0x2A69	; 0x802a69 <__iob+0x2>
    8c70:	90 91 6a 2a 	lds	r25, 0x2A6A	; 0x802a6a <__iob+0x3>
    8c74:	89 2b       	or	r24, r25
    8c76:	71 f4       	brne	.+28     	; 0x8c94 <fdevopen+0x88>
    8c78:	e0 93 69 2a 	sts	0x2A69, r30	; 0x802a69 <__iob+0x2>
    8c7c:	f0 93 6a 2a 	sts	0x2A6A, r31	; 0x802a6a <__iob+0x3>
    8c80:	80 91 6b 2a 	lds	r24, 0x2A6B	; 0x802a6b <__iob+0x4>
    8c84:	90 91 6c 2a 	lds	r25, 0x2A6C	; 0x802a6c <__iob+0x5>
    8c88:	89 2b       	or	r24, r25
    8c8a:	21 f4       	brne	.+8      	; 0x8c94 <fdevopen+0x88>
    8c8c:	e0 93 6b 2a 	sts	0x2A6B, r30	; 0x802a6b <__iob+0x4>
    8c90:	f0 93 6c 2a 	sts	0x2A6C, r31	; 0x802a6c <__iob+0x5>
    8c94:	cf 01       	movw	r24, r30
    8c96:	df 91       	pop	r29
    8c98:	cf 91       	pop	r28
    8c9a:	1f 91       	pop	r17
    8c9c:	0f 91       	pop	r16
    8c9e:	08 95       	ret

00008ca0 <printf>:
    8ca0:	cf 93       	push	r28
    8ca2:	df 93       	push	r29
    8ca4:	cd b7       	in	r28, 0x3d	; 61
    8ca6:	de b7       	in	r29, 0x3e	; 62
    8ca8:	ae 01       	movw	r20, r28
    8caa:	4a 5f       	subi	r20, 0xFA	; 250
    8cac:	5f 4f       	sbci	r21, 0xFF	; 255
    8cae:	fa 01       	movw	r30, r20
    8cb0:	61 91       	ld	r22, Z+
    8cb2:	71 91       	ld	r23, Z+
    8cb4:	af 01       	movw	r20, r30
    8cb6:	80 91 69 2a 	lds	r24, 0x2A69	; 0x802a69 <__iob+0x2>
    8cba:	90 91 6a 2a 	lds	r25, 0x2A6A	; 0x802a6a <__iob+0x3>
    8cbe:	5b d0       	rcall	.+182    	; 0x8d76 <vfprintf>
    8cc0:	df 91       	pop	r29
    8cc2:	cf 91       	pop	r28
    8cc4:	08 95       	ret

00008cc6 <puts>:
    8cc6:	0f 93       	push	r16
    8cc8:	1f 93       	push	r17
    8cca:	cf 93       	push	r28
    8ccc:	df 93       	push	r29
    8cce:	e0 91 69 2a 	lds	r30, 0x2A69	; 0x802a69 <__iob+0x2>
    8cd2:	f0 91 6a 2a 	lds	r31, 0x2A6A	; 0x802a6a <__iob+0x3>
    8cd6:	23 81       	ldd	r18, Z+3	; 0x03
    8cd8:	21 ff       	sbrs	r18, 1
    8cda:	1b c0       	rjmp	.+54     	; 0x8d12 <puts+0x4c>
    8cdc:	8c 01       	movw	r16, r24
    8cde:	d0 e0       	ldi	r29, 0x00	; 0
    8ce0:	c0 e0       	ldi	r28, 0x00	; 0
    8ce2:	f8 01       	movw	r30, r16
    8ce4:	81 91       	ld	r24, Z+
    8ce6:	8f 01       	movw	r16, r30
    8ce8:	60 91 69 2a 	lds	r22, 0x2A69	; 0x802a69 <__iob+0x2>
    8cec:	70 91 6a 2a 	lds	r23, 0x2A6A	; 0x802a6a <__iob+0x3>
    8cf0:	db 01       	movw	r26, r22
    8cf2:	18 96       	adiw	r26, 0x08	; 8
    8cf4:	ed 91       	ld	r30, X+
    8cf6:	fc 91       	ld	r31, X
    8cf8:	19 97       	sbiw	r26, 0x09	; 9
    8cfa:	88 23       	and	r24, r24
    8cfc:	31 f0       	breq	.+12     	; 0x8d0a <puts+0x44>
    8cfe:	19 95       	eicall
    8d00:	89 2b       	or	r24, r25
    8d02:	79 f3       	breq	.-34     	; 0x8ce2 <puts+0x1c>
    8d04:	df ef       	ldi	r29, 0xFF	; 255
    8d06:	cf ef       	ldi	r28, 0xFF	; 255
    8d08:	ec cf       	rjmp	.-40     	; 0x8ce2 <puts+0x1c>
    8d0a:	8a e0       	ldi	r24, 0x0A	; 10
    8d0c:	19 95       	eicall
    8d0e:	89 2b       	or	r24, r25
    8d10:	19 f0       	breq	.+6      	; 0x8d18 <puts+0x52>
    8d12:	8f ef       	ldi	r24, 0xFF	; 255
    8d14:	9f ef       	ldi	r25, 0xFF	; 255
    8d16:	02 c0       	rjmp	.+4      	; 0x8d1c <puts+0x56>
    8d18:	8d 2f       	mov	r24, r29
    8d1a:	9c 2f       	mov	r25, r28
    8d1c:	df 91       	pop	r29
    8d1e:	cf 91       	pop	r28
    8d20:	1f 91       	pop	r17
    8d22:	0f 91       	pop	r16
    8d24:	08 95       	ret

00008d26 <sprintf>:
    8d26:	0f 93       	push	r16
    8d28:	1f 93       	push	r17
    8d2a:	cf 93       	push	r28
    8d2c:	df 93       	push	r29
    8d2e:	cd b7       	in	r28, 0x3d	; 61
    8d30:	de b7       	in	r29, 0x3e	; 62
    8d32:	2e 97       	sbiw	r28, 0x0e	; 14
    8d34:	cd bf       	out	0x3d, r28	; 61
    8d36:	de bf       	out	0x3e, r29	; 62
    8d38:	0e 89       	ldd	r16, Y+22	; 0x16
    8d3a:	1f 89       	ldd	r17, Y+23	; 0x17
    8d3c:	86 e0       	ldi	r24, 0x06	; 6
    8d3e:	8c 83       	std	Y+4, r24	; 0x04
    8d40:	09 83       	std	Y+1, r16	; 0x01
    8d42:	1a 83       	std	Y+2, r17	; 0x02
    8d44:	8f ef       	ldi	r24, 0xFF	; 255
    8d46:	9f e7       	ldi	r25, 0x7F	; 127
    8d48:	8d 83       	std	Y+5, r24	; 0x05
    8d4a:	9e 83       	std	Y+6, r25	; 0x06
    8d4c:	ae 01       	movw	r20, r28
    8d4e:	46 5e       	subi	r20, 0xE6	; 230
    8d50:	5f 4f       	sbci	r21, 0xFF	; 255
    8d52:	68 8d       	ldd	r22, Y+24	; 0x18
    8d54:	79 8d       	ldd	r23, Y+25	; 0x19
    8d56:	ce 01       	movw	r24, r28
    8d58:	01 96       	adiw	r24, 0x01	; 1
    8d5a:	0d d0       	rcall	.+26     	; 0x8d76 <vfprintf>
    8d5c:	ef 81       	ldd	r30, Y+7	; 0x07
    8d5e:	f8 85       	ldd	r31, Y+8	; 0x08
    8d60:	e0 0f       	add	r30, r16
    8d62:	f1 1f       	adc	r31, r17
    8d64:	10 82       	st	Z, r1
    8d66:	2e 96       	adiw	r28, 0x0e	; 14
    8d68:	cd bf       	out	0x3d, r28	; 61
    8d6a:	de bf       	out	0x3e, r29	; 62
    8d6c:	df 91       	pop	r29
    8d6e:	cf 91       	pop	r28
    8d70:	1f 91       	pop	r17
    8d72:	0f 91       	pop	r16
    8d74:	08 95       	ret

00008d76 <vfprintf>:
    8d76:	2f 92       	push	r2
    8d78:	3f 92       	push	r3
    8d7a:	4f 92       	push	r4
    8d7c:	5f 92       	push	r5
    8d7e:	6f 92       	push	r6
    8d80:	7f 92       	push	r7
    8d82:	8f 92       	push	r8
    8d84:	9f 92       	push	r9
    8d86:	af 92       	push	r10
    8d88:	bf 92       	push	r11
    8d8a:	cf 92       	push	r12
    8d8c:	df 92       	push	r13
    8d8e:	ef 92       	push	r14
    8d90:	ff 92       	push	r15
    8d92:	0f 93       	push	r16
    8d94:	1f 93       	push	r17
    8d96:	cf 93       	push	r28
    8d98:	df 93       	push	r29
    8d9a:	cd b7       	in	r28, 0x3d	; 61
    8d9c:	de b7       	in	r29, 0x3e	; 62
    8d9e:	2b 97       	sbiw	r28, 0x0b	; 11
    8da0:	cd bf       	out	0x3d, r28	; 61
    8da2:	de bf       	out	0x3e, r29	; 62
    8da4:	6c 01       	movw	r12, r24
    8da6:	7b 01       	movw	r14, r22
    8da8:	8a 01       	movw	r16, r20
    8daa:	fc 01       	movw	r30, r24
    8dac:	16 82       	std	Z+6, r1	; 0x06
    8dae:	17 82       	std	Z+7, r1	; 0x07
    8db0:	83 81       	ldd	r24, Z+3	; 0x03
    8db2:	81 ff       	sbrs	r24, 1
    8db4:	bf c1       	rjmp	.+894    	; 0x9134 <vfprintf+0x3be>
    8db6:	ce 01       	movw	r24, r28
    8db8:	01 96       	adiw	r24, 0x01	; 1
    8dba:	3c 01       	movw	r6, r24
    8dbc:	f6 01       	movw	r30, r12
    8dbe:	93 81       	ldd	r25, Z+3	; 0x03
    8dc0:	f7 01       	movw	r30, r14
    8dc2:	93 fd       	sbrc	r25, 3
    8dc4:	85 91       	lpm	r24, Z+
    8dc6:	93 ff       	sbrs	r25, 3
    8dc8:	81 91       	ld	r24, Z+
    8dca:	7f 01       	movw	r14, r30
    8dcc:	88 23       	and	r24, r24
    8dce:	09 f4       	brne	.+2      	; 0x8dd2 <vfprintf+0x5c>
    8dd0:	ad c1       	rjmp	.+858    	; 0x912c <vfprintf+0x3b6>
    8dd2:	85 32       	cpi	r24, 0x25	; 37
    8dd4:	39 f4       	brne	.+14     	; 0x8de4 <vfprintf+0x6e>
    8dd6:	93 fd       	sbrc	r25, 3
    8dd8:	85 91       	lpm	r24, Z+
    8dda:	93 ff       	sbrs	r25, 3
    8ddc:	81 91       	ld	r24, Z+
    8dde:	7f 01       	movw	r14, r30
    8de0:	85 32       	cpi	r24, 0x25	; 37
    8de2:	21 f4       	brne	.+8      	; 0x8dec <vfprintf+0x76>
    8de4:	b6 01       	movw	r22, r12
    8de6:	90 e0       	ldi	r25, 0x00	; 0
    8de8:	15 d3       	rcall	.+1578   	; 0x9414 <fputc>
    8dea:	e8 cf       	rjmp	.-48     	; 0x8dbc <vfprintf+0x46>
    8dec:	91 2c       	mov	r9, r1
    8dee:	21 2c       	mov	r2, r1
    8df0:	31 2c       	mov	r3, r1
    8df2:	ff e1       	ldi	r31, 0x1F	; 31
    8df4:	f3 15       	cp	r31, r3
    8df6:	d8 f0       	brcs	.+54     	; 0x8e2e <vfprintf+0xb8>
    8df8:	8b 32       	cpi	r24, 0x2B	; 43
    8dfa:	79 f0       	breq	.+30     	; 0x8e1a <vfprintf+0xa4>
    8dfc:	38 f4       	brcc	.+14     	; 0x8e0c <vfprintf+0x96>
    8dfe:	80 32       	cpi	r24, 0x20	; 32
    8e00:	79 f0       	breq	.+30     	; 0x8e20 <vfprintf+0xaa>
    8e02:	83 32       	cpi	r24, 0x23	; 35
    8e04:	a1 f4       	brne	.+40     	; 0x8e2e <vfprintf+0xb8>
    8e06:	23 2d       	mov	r18, r3
    8e08:	20 61       	ori	r18, 0x10	; 16
    8e0a:	1d c0       	rjmp	.+58     	; 0x8e46 <vfprintf+0xd0>
    8e0c:	8d 32       	cpi	r24, 0x2D	; 45
    8e0e:	61 f0       	breq	.+24     	; 0x8e28 <vfprintf+0xb2>
    8e10:	80 33       	cpi	r24, 0x30	; 48
    8e12:	69 f4       	brne	.+26     	; 0x8e2e <vfprintf+0xb8>
    8e14:	23 2d       	mov	r18, r3
    8e16:	21 60       	ori	r18, 0x01	; 1
    8e18:	16 c0       	rjmp	.+44     	; 0x8e46 <vfprintf+0xd0>
    8e1a:	83 2d       	mov	r24, r3
    8e1c:	82 60       	ori	r24, 0x02	; 2
    8e1e:	38 2e       	mov	r3, r24
    8e20:	e3 2d       	mov	r30, r3
    8e22:	e4 60       	ori	r30, 0x04	; 4
    8e24:	3e 2e       	mov	r3, r30
    8e26:	2a c0       	rjmp	.+84     	; 0x8e7c <vfprintf+0x106>
    8e28:	f3 2d       	mov	r31, r3
    8e2a:	f8 60       	ori	r31, 0x08	; 8
    8e2c:	1d c0       	rjmp	.+58     	; 0x8e68 <vfprintf+0xf2>
    8e2e:	37 fc       	sbrc	r3, 7
    8e30:	2d c0       	rjmp	.+90     	; 0x8e8c <vfprintf+0x116>
    8e32:	20 ed       	ldi	r18, 0xD0	; 208
    8e34:	28 0f       	add	r18, r24
    8e36:	2a 30       	cpi	r18, 0x0A	; 10
    8e38:	40 f0       	brcs	.+16     	; 0x8e4a <vfprintf+0xd4>
    8e3a:	8e 32       	cpi	r24, 0x2E	; 46
    8e3c:	b9 f4       	brne	.+46     	; 0x8e6c <vfprintf+0xf6>
    8e3e:	36 fc       	sbrc	r3, 6
    8e40:	75 c1       	rjmp	.+746    	; 0x912c <vfprintf+0x3b6>
    8e42:	23 2d       	mov	r18, r3
    8e44:	20 64       	ori	r18, 0x40	; 64
    8e46:	32 2e       	mov	r3, r18
    8e48:	19 c0       	rjmp	.+50     	; 0x8e7c <vfprintf+0x106>
    8e4a:	36 fe       	sbrs	r3, 6
    8e4c:	06 c0       	rjmp	.+12     	; 0x8e5a <vfprintf+0xe4>
    8e4e:	8a e0       	ldi	r24, 0x0A	; 10
    8e50:	98 9e       	mul	r9, r24
    8e52:	20 0d       	add	r18, r0
    8e54:	11 24       	eor	r1, r1
    8e56:	92 2e       	mov	r9, r18
    8e58:	11 c0       	rjmp	.+34     	; 0x8e7c <vfprintf+0x106>
    8e5a:	ea e0       	ldi	r30, 0x0A	; 10
    8e5c:	2e 9e       	mul	r2, r30
    8e5e:	20 0d       	add	r18, r0
    8e60:	11 24       	eor	r1, r1
    8e62:	22 2e       	mov	r2, r18
    8e64:	f3 2d       	mov	r31, r3
    8e66:	f0 62       	ori	r31, 0x20	; 32
    8e68:	3f 2e       	mov	r3, r31
    8e6a:	08 c0       	rjmp	.+16     	; 0x8e7c <vfprintf+0x106>
    8e6c:	8c 36       	cpi	r24, 0x6C	; 108
    8e6e:	21 f4       	brne	.+8      	; 0x8e78 <vfprintf+0x102>
    8e70:	83 2d       	mov	r24, r3
    8e72:	80 68       	ori	r24, 0x80	; 128
    8e74:	38 2e       	mov	r3, r24
    8e76:	02 c0       	rjmp	.+4      	; 0x8e7c <vfprintf+0x106>
    8e78:	88 36       	cpi	r24, 0x68	; 104
    8e7a:	41 f4       	brne	.+16     	; 0x8e8c <vfprintf+0x116>
    8e7c:	f7 01       	movw	r30, r14
    8e7e:	93 fd       	sbrc	r25, 3
    8e80:	85 91       	lpm	r24, Z+
    8e82:	93 ff       	sbrs	r25, 3
    8e84:	81 91       	ld	r24, Z+
    8e86:	7f 01       	movw	r14, r30
    8e88:	81 11       	cpse	r24, r1
    8e8a:	b3 cf       	rjmp	.-154    	; 0x8df2 <vfprintf+0x7c>
    8e8c:	98 2f       	mov	r25, r24
    8e8e:	9f 7d       	andi	r25, 0xDF	; 223
    8e90:	95 54       	subi	r25, 0x45	; 69
    8e92:	93 30       	cpi	r25, 0x03	; 3
    8e94:	28 f4       	brcc	.+10     	; 0x8ea0 <vfprintf+0x12a>
    8e96:	0c 5f       	subi	r16, 0xFC	; 252
    8e98:	1f 4f       	sbci	r17, 0xFF	; 255
    8e9a:	9f e3       	ldi	r25, 0x3F	; 63
    8e9c:	99 83       	std	Y+1, r25	; 0x01
    8e9e:	0d c0       	rjmp	.+26     	; 0x8eba <vfprintf+0x144>
    8ea0:	83 36       	cpi	r24, 0x63	; 99
    8ea2:	31 f0       	breq	.+12     	; 0x8eb0 <vfprintf+0x13a>
    8ea4:	83 37       	cpi	r24, 0x73	; 115
    8ea6:	71 f0       	breq	.+28     	; 0x8ec4 <vfprintf+0x14e>
    8ea8:	83 35       	cpi	r24, 0x53	; 83
    8eaa:	09 f0       	breq	.+2      	; 0x8eae <vfprintf+0x138>
    8eac:	55 c0       	rjmp	.+170    	; 0x8f58 <vfprintf+0x1e2>
    8eae:	20 c0       	rjmp	.+64     	; 0x8ef0 <vfprintf+0x17a>
    8eb0:	f8 01       	movw	r30, r16
    8eb2:	80 81       	ld	r24, Z
    8eb4:	89 83       	std	Y+1, r24	; 0x01
    8eb6:	0e 5f       	subi	r16, 0xFE	; 254
    8eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    8eba:	88 24       	eor	r8, r8
    8ebc:	83 94       	inc	r8
    8ebe:	91 2c       	mov	r9, r1
    8ec0:	53 01       	movw	r10, r6
    8ec2:	12 c0       	rjmp	.+36     	; 0x8ee8 <vfprintf+0x172>
    8ec4:	28 01       	movw	r4, r16
    8ec6:	f2 e0       	ldi	r31, 0x02	; 2
    8ec8:	4f 0e       	add	r4, r31
    8eca:	51 1c       	adc	r5, r1
    8ecc:	f8 01       	movw	r30, r16
    8ece:	a0 80       	ld	r10, Z
    8ed0:	b1 80       	ldd	r11, Z+1	; 0x01
    8ed2:	36 fe       	sbrs	r3, 6
    8ed4:	03 c0       	rjmp	.+6      	; 0x8edc <vfprintf+0x166>
    8ed6:	69 2d       	mov	r22, r9
    8ed8:	70 e0       	ldi	r23, 0x00	; 0
    8eda:	02 c0       	rjmp	.+4      	; 0x8ee0 <vfprintf+0x16a>
    8edc:	6f ef       	ldi	r22, 0xFF	; 255
    8ede:	7f ef       	ldi	r23, 0xFF	; 255
    8ee0:	c5 01       	movw	r24, r10
    8ee2:	8d d2       	rcall	.+1306   	; 0x93fe <strnlen>
    8ee4:	4c 01       	movw	r8, r24
    8ee6:	82 01       	movw	r16, r4
    8ee8:	f3 2d       	mov	r31, r3
    8eea:	ff 77       	andi	r31, 0x7F	; 127
    8eec:	3f 2e       	mov	r3, r31
    8eee:	15 c0       	rjmp	.+42     	; 0x8f1a <vfprintf+0x1a4>
    8ef0:	28 01       	movw	r4, r16
    8ef2:	22 e0       	ldi	r18, 0x02	; 2
    8ef4:	42 0e       	add	r4, r18
    8ef6:	51 1c       	adc	r5, r1
    8ef8:	f8 01       	movw	r30, r16
    8efa:	a0 80       	ld	r10, Z
    8efc:	b1 80       	ldd	r11, Z+1	; 0x01
    8efe:	36 fe       	sbrs	r3, 6
    8f00:	03 c0       	rjmp	.+6      	; 0x8f08 <vfprintf+0x192>
    8f02:	69 2d       	mov	r22, r9
    8f04:	70 e0       	ldi	r23, 0x00	; 0
    8f06:	02 c0       	rjmp	.+4      	; 0x8f0c <vfprintf+0x196>
    8f08:	6f ef       	ldi	r22, 0xFF	; 255
    8f0a:	7f ef       	ldi	r23, 0xFF	; 255
    8f0c:	c5 01       	movw	r24, r10
    8f0e:	65 d2       	rcall	.+1226   	; 0x93da <strnlen_P>
    8f10:	4c 01       	movw	r8, r24
    8f12:	f3 2d       	mov	r31, r3
    8f14:	f0 68       	ori	r31, 0x80	; 128
    8f16:	3f 2e       	mov	r3, r31
    8f18:	82 01       	movw	r16, r4
    8f1a:	33 fc       	sbrc	r3, 3
    8f1c:	19 c0       	rjmp	.+50     	; 0x8f50 <vfprintf+0x1da>
    8f1e:	82 2d       	mov	r24, r2
    8f20:	90 e0       	ldi	r25, 0x00	; 0
    8f22:	88 16       	cp	r8, r24
    8f24:	99 06       	cpc	r9, r25
    8f26:	a0 f4       	brcc	.+40     	; 0x8f50 <vfprintf+0x1da>
    8f28:	b6 01       	movw	r22, r12
    8f2a:	80 e2       	ldi	r24, 0x20	; 32
    8f2c:	90 e0       	ldi	r25, 0x00	; 0
    8f2e:	72 d2       	rcall	.+1252   	; 0x9414 <fputc>
    8f30:	2a 94       	dec	r2
    8f32:	f5 cf       	rjmp	.-22     	; 0x8f1e <vfprintf+0x1a8>
    8f34:	f5 01       	movw	r30, r10
    8f36:	37 fc       	sbrc	r3, 7
    8f38:	85 91       	lpm	r24, Z+
    8f3a:	37 fe       	sbrs	r3, 7
    8f3c:	81 91       	ld	r24, Z+
    8f3e:	5f 01       	movw	r10, r30
    8f40:	b6 01       	movw	r22, r12
    8f42:	90 e0       	ldi	r25, 0x00	; 0
    8f44:	67 d2       	rcall	.+1230   	; 0x9414 <fputc>
    8f46:	21 10       	cpse	r2, r1
    8f48:	2a 94       	dec	r2
    8f4a:	21 e0       	ldi	r18, 0x01	; 1
    8f4c:	82 1a       	sub	r8, r18
    8f4e:	91 08       	sbc	r9, r1
    8f50:	81 14       	cp	r8, r1
    8f52:	91 04       	cpc	r9, r1
    8f54:	79 f7       	brne	.-34     	; 0x8f34 <vfprintf+0x1be>
    8f56:	e1 c0       	rjmp	.+450    	; 0x911a <vfprintf+0x3a4>
    8f58:	84 36       	cpi	r24, 0x64	; 100
    8f5a:	11 f0       	breq	.+4      	; 0x8f60 <vfprintf+0x1ea>
    8f5c:	89 36       	cpi	r24, 0x69	; 105
    8f5e:	39 f5       	brne	.+78     	; 0x8fae <vfprintf+0x238>
    8f60:	f8 01       	movw	r30, r16
    8f62:	37 fe       	sbrs	r3, 7
    8f64:	07 c0       	rjmp	.+14     	; 0x8f74 <vfprintf+0x1fe>
    8f66:	60 81       	ld	r22, Z
    8f68:	71 81       	ldd	r23, Z+1	; 0x01
    8f6a:	82 81       	ldd	r24, Z+2	; 0x02
    8f6c:	93 81       	ldd	r25, Z+3	; 0x03
    8f6e:	0c 5f       	subi	r16, 0xFC	; 252
    8f70:	1f 4f       	sbci	r17, 0xFF	; 255
    8f72:	08 c0       	rjmp	.+16     	; 0x8f84 <vfprintf+0x20e>
    8f74:	60 81       	ld	r22, Z
    8f76:	71 81       	ldd	r23, Z+1	; 0x01
    8f78:	07 2e       	mov	r0, r23
    8f7a:	00 0c       	add	r0, r0
    8f7c:	88 0b       	sbc	r24, r24
    8f7e:	99 0b       	sbc	r25, r25
    8f80:	0e 5f       	subi	r16, 0xFE	; 254
    8f82:	1f 4f       	sbci	r17, 0xFF	; 255
    8f84:	f3 2d       	mov	r31, r3
    8f86:	ff 76       	andi	r31, 0x6F	; 111
    8f88:	3f 2e       	mov	r3, r31
    8f8a:	97 ff       	sbrs	r25, 7
    8f8c:	09 c0       	rjmp	.+18     	; 0x8fa0 <vfprintf+0x22a>
    8f8e:	90 95       	com	r25
    8f90:	80 95       	com	r24
    8f92:	70 95       	com	r23
    8f94:	61 95       	neg	r22
    8f96:	7f 4f       	sbci	r23, 0xFF	; 255
    8f98:	8f 4f       	sbci	r24, 0xFF	; 255
    8f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    8f9c:	f0 68       	ori	r31, 0x80	; 128
    8f9e:	3f 2e       	mov	r3, r31
    8fa0:	2a e0       	ldi	r18, 0x0A	; 10
    8fa2:	30 e0       	ldi	r19, 0x00	; 0
    8fa4:	a3 01       	movw	r20, r6
    8fa6:	72 d2       	rcall	.+1252   	; 0x948c <__ultoa_invert>
    8fa8:	88 2e       	mov	r8, r24
    8faa:	86 18       	sub	r8, r6
    8fac:	44 c0       	rjmp	.+136    	; 0x9036 <vfprintf+0x2c0>
    8fae:	85 37       	cpi	r24, 0x75	; 117
    8fb0:	31 f4       	brne	.+12     	; 0x8fbe <vfprintf+0x248>
    8fb2:	23 2d       	mov	r18, r3
    8fb4:	2f 7e       	andi	r18, 0xEF	; 239
    8fb6:	b2 2e       	mov	r11, r18
    8fb8:	2a e0       	ldi	r18, 0x0A	; 10
    8fba:	30 e0       	ldi	r19, 0x00	; 0
    8fbc:	25 c0       	rjmp	.+74     	; 0x9008 <vfprintf+0x292>
    8fbe:	93 2d       	mov	r25, r3
    8fc0:	99 7f       	andi	r25, 0xF9	; 249
    8fc2:	b9 2e       	mov	r11, r25
    8fc4:	8f 36       	cpi	r24, 0x6F	; 111
    8fc6:	c1 f0       	breq	.+48     	; 0x8ff8 <vfprintf+0x282>
    8fc8:	18 f4       	brcc	.+6      	; 0x8fd0 <vfprintf+0x25a>
    8fca:	88 35       	cpi	r24, 0x58	; 88
    8fcc:	79 f0       	breq	.+30     	; 0x8fec <vfprintf+0x276>
    8fce:	ae c0       	rjmp	.+348    	; 0x912c <vfprintf+0x3b6>
    8fd0:	80 37       	cpi	r24, 0x70	; 112
    8fd2:	19 f0       	breq	.+6      	; 0x8fda <vfprintf+0x264>
    8fd4:	88 37       	cpi	r24, 0x78	; 120
    8fd6:	21 f0       	breq	.+8      	; 0x8fe0 <vfprintf+0x26a>
    8fd8:	a9 c0       	rjmp	.+338    	; 0x912c <vfprintf+0x3b6>
    8fda:	e9 2f       	mov	r30, r25
    8fdc:	e0 61       	ori	r30, 0x10	; 16
    8fde:	be 2e       	mov	r11, r30
    8fe0:	b4 fe       	sbrs	r11, 4
    8fe2:	0d c0       	rjmp	.+26     	; 0x8ffe <vfprintf+0x288>
    8fe4:	fb 2d       	mov	r31, r11
    8fe6:	f4 60       	ori	r31, 0x04	; 4
    8fe8:	bf 2e       	mov	r11, r31
    8fea:	09 c0       	rjmp	.+18     	; 0x8ffe <vfprintf+0x288>
    8fec:	34 fe       	sbrs	r3, 4
    8fee:	0a c0       	rjmp	.+20     	; 0x9004 <vfprintf+0x28e>
    8ff0:	29 2f       	mov	r18, r25
    8ff2:	26 60       	ori	r18, 0x06	; 6
    8ff4:	b2 2e       	mov	r11, r18
    8ff6:	06 c0       	rjmp	.+12     	; 0x9004 <vfprintf+0x28e>
    8ff8:	28 e0       	ldi	r18, 0x08	; 8
    8ffa:	30 e0       	ldi	r19, 0x00	; 0
    8ffc:	05 c0       	rjmp	.+10     	; 0x9008 <vfprintf+0x292>
    8ffe:	20 e1       	ldi	r18, 0x10	; 16
    9000:	30 e0       	ldi	r19, 0x00	; 0
    9002:	02 c0       	rjmp	.+4      	; 0x9008 <vfprintf+0x292>
    9004:	20 e1       	ldi	r18, 0x10	; 16
    9006:	32 e0       	ldi	r19, 0x02	; 2
    9008:	f8 01       	movw	r30, r16
    900a:	b7 fe       	sbrs	r11, 7
    900c:	07 c0       	rjmp	.+14     	; 0x901c <vfprintf+0x2a6>
    900e:	60 81       	ld	r22, Z
    9010:	71 81       	ldd	r23, Z+1	; 0x01
    9012:	82 81       	ldd	r24, Z+2	; 0x02
    9014:	93 81       	ldd	r25, Z+3	; 0x03
    9016:	0c 5f       	subi	r16, 0xFC	; 252
    9018:	1f 4f       	sbci	r17, 0xFF	; 255
    901a:	06 c0       	rjmp	.+12     	; 0x9028 <vfprintf+0x2b2>
    901c:	60 81       	ld	r22, Z
    901e:	71 81       	ldd	r23, Z+1	; 0x01
    9020:	80 e0       	ldi	r24, 0x00	; 0
    9022:	90 e0       	ldi	r25, 0x00	; 0
    9024:	0e 5f       	subi	r16, 0xFE	; 254
    9026:	1f 4f       	sbci	r17, 0xFF	; 255
    9028:	a3 01       	movw	r20, r6
    902a:	30 d2       	rcall	.+1120   	; 0x948c <__ultoa_invert>
    902c:	88 2e       	mov	r8, r24
    902e:	86 18       	sub	r8, r6
    9030:	fb 2d       	mov	r31, r11
    9032:	ff 77       	andi	r31, 0x7F	; 127
    9034:	3f 2e       	mov	r3, r31
    9036:	36 fe       	sbrs	r3, 6
    9038:	0d c0       	rjmp	.+26     	; 0x9054 <vfprintf+0x2de>
    903a:	23 2d       	mov	r18, r3
    903c:	2e 7f       	andi	r18, 0xFE	; 254
    903e:	a2 2e       	mov	r10, r18
    9040:	89 14       	cp	r8, r9
    9042:	58 f4       	brcc	.+22     	; 0x905a <vfprintf+0x2e4>
    9044:	34 fe       	sbrs	r3, 4
    9046:	0b c0       	rjmp	.+22     	; 0x905e <vfprintf+0x2e8>
    9048:	32 fc       	sbrc	r3, 2
    904a:	09 c0       	rjmp	.+18     	; 0x905e <vfprintf+0x2e8>
    904c:	83 2d       	mov	r24, r3
    904e:	8e 7e       	andi	r24, 0xEE	; 238
    9050:	a8 2e       	mov	r10, r24
    9052:	05 c0       	rjmp	.+10     	; 0x905e <vfprintf+0x2e8>
    9054:	b8 2c       	mov	r11, r8
    9056:	a3 2c       	mov	r10, r3
    9058:	03 c0       	rjmp	.+6      	; 0x9060 <vfprintf+0x2ea>
    905a:	b8 2c       	mov	r11, r8
    905c:	01 c0       	rjmp	.+2      	; 0x9060 <vfprintf+0x2ea>
    905e:	b9 2c       	mov	r11, r9
    9060:	a4 fe       	sbrs	r10, 4
    9062:	0f c0       	rjmp	.+30     	; 0x9082 <vfprintf+0x30c>
    9064:	fe 01       	movw	r30, r28
    9066:	e8 0d       	add	r30, r8
    9068:	f1 1d       	adc	r31, r1
    906a:	80 81       	ld	r24, Z
    906c:	80 33       	cpi	r24, 0x30	; 48
    906e:	21 f4       	brne	.+8      	; 0x9078 <vfprintf+0x302>
    9070:	9a 2d       	mov	r25, r10
    9072:	99 7e       	andi	r25, 0xE9	; 233
    9074:	a9 2e       	mov	r10, r25
    9076:	09 c0       	rjmp	.+18     	; 0x908a <vfprintf+0x314>
    9078:	a2 fe       	sbrs	r10, 2
    907a:	06 c0       	rjmp	.+12     	; 0x9088 <vfprintf+0x312>
    907c:	b3 94       	inc	r11
    907e:	b3 94       	inc	r11
    9080:	04 c0       	rjmp	.+8      	; 0x908a <vfprintf+0x314>
    9082:	8a 2d       	mov	r24, r10
    9084:	86 78       	andi	r24, 0x86	; 134
    9086:	09 f0       	breq	.+2      	; 0x908a <vfprintf+0x314>
    9088:	b3 94       	inc	r11
    908a:	a3 fc       	sbrc	r10, 3
    908c:	10 c0       	rjmp	.+32     	; 0x90ae <vfprintf+0x338>
    908e:	a0 fe       	sbrs	r10, 0
    9090:	06 c0       	rjmp	.+12     	; 0x909e <vfprintf+0x328>
    9092:	b2 14       	cp	r11, r2
    9094:	80 f4       	brcc	.+32     	; 0x90b6 <vfprintf+0x340>
    9096:	28 0c       	add	r2, r8
    9098:	92 2c       	mov	r9, r2
    909a:	9b 18       	sub	r9, r11
    909c:	0d c0       	rjmp	.+26     	; 0x90b8 <vfprintf+0x342>
    909e:	b2 14       	cp	r11, r2
    90a0:	58 f4       	brcc	.+22     	; 0x90b8 <vfprintf+0x342>
    90a2:	b6 01       	movw	r22, r12
    90a4:	80 e2       	ldi	r24, 0x20	; 32
    90a6:	90 e0       	ldi	r25, 0x00	; 0
    90a8:	b5 d1       	rcall	.+874    	; 0x9414 <fputc>
    90aa:	b3 94       	inc	r11
    90ac:	f8 cf       	rjmp	.-16     	; 0x909e <vfprintf+0x328>
    90ae:	b2 14       	cp	r11, r2
    90b0:	18 f4       	brcc	.+6      	; 0x90b8 <vfprintf+0x342>
    90b2:	2b 18       	sub	r2, r11
    90b4:	02 c0       	rjmp	.+4      	; 0x90ba <vfprintf+0x344>
    90b6:	98 2c       	mov	r9, r8
    90b8:	21 2c       	mov	r2, r1
    90ba:	a4 fe       	sbrs	r10, 4
    90bc:	0f c0       	rjmp	.+30     	; 0x90dc <vfprintf+0x366>
    90be:	b6 01       	movw	r22, r12
    90c0:	80 e3       	ldi	r24, 0x30	; 48
    90c2:	90 e0       	ldi	r25, 0x00	; 0
    90c4:	a7 d1       	rcall	.+846    	; 0x9414 <fputc>
    90c6:	a2 fe       	sbrs	r10, 2
    90c8:	16 c0       	rjmp	.+44     	; 0x90f6 <vfprintf+0x380>
    90ca:	a1 fc       	sbrc	r10, 1
    90cc:	03 c0       	rjmp	.+6      	; 0x90d4 <vfprintf+0x35e>
    90ce:	88 e7       	ldi	r24, 0x78	; 120
    90d0:	90 e0       	ldi	r25, 0x00	; 0
    90d2:	02 c0       	rjmp	.+4      	; 0x90d8 <vfprintf+0x362>
    90d4:	88 e5       	ldi	r24, 0x58	; 88
    90d6:	90 e0       	ldi	r25, 0x00	; 0
    90d8:	b6 01       	movw	r22, r12
    90da:	0c c0       	rjmp	.+24     	; 0x90f4 <vfprintf+0x37e>
    90dc:	8a 2d       	mov	r24, r10
    90de:	86 78       	andi	r24, 0x86	; 134
    90e0:	51 f0       	breq	.+20     	; 0x90f6 <vfprintf+0x380>
    90e2:	a1 fe       	sbrs	r10, 1
    90e4:	02 c0       	rjmp	.+4      	; 0x90ea <vfprintf+0x374>
    90e6:	8b e2       	ldi	r24, 0x2B	; 43
    90e8:	01 c0       	rjmp	.+2      	; 0x90ec <vfprintf+0x376>
    90ea:	80 e2       	ldi	r24, 0x20	; 32
    90ec:	a7 fc       	sbrc	r10, 7
    90ee:	8d e2       	ldi	r24, 0x2D	; 45
    90f0:	b6 01       	movw	r22, r12
    90f2:	90 e0       	ldi	r25, 0x00	; 0
    90f4:	8f d1       	rcall	.+798    	; 0x9414 <fputc>
    90f6:	89 14       	cp	r8, r9
    90f8:	30 f4       	brcc	.+12     	; 0x9106 <vfprintf+0x390>
    90fa:	b6 01       	movw	r22, r12
    90fc:	80 e3       	ldi	r24, 0x30	; 48
    90fe:	90 e0       	ldi	r25, 0x00	; 0
    9100:	89 d1       	rcall	.+786    	; 0x9414 <fputc>
    9102:	9a 94       	dec	r9
    9104:	f8 cf       	rjmp	.-16     	; 0x90f6 <vfprintf+0x380>
    9106:	8a 94       	dec	r8
    9108:	f3 01       	movw	r30, r6
    910a:	e8 0d       	add	r30, r8
    910c:	f1 1d       	adc	r31, r1
    910e:	80 81       	ld	r24, Z
    9110:	b6 01       	movw	r22, r12
    9112:	90 e0       	ldi	r25, 0x00	; 0
    9114:	7f d1       	rcall	.+766    	; 0x9414 <fputc>
    9116:	81 10       	cpse	r8, r1
    9118:	f6 cf       	rjmp	.-20     	; 0x9106 <vfprintf+0x390>
    911a:	22 20       	and	r2, r2
    911c:	09 f4       	brne	.+2      	; 0x9120 <vfprintf+0x3aa>
    911e:	4e ce       	rjmp	.-868    	; 0x8dbc <vfprintf+0x46>
    9120:	b6 01       	movw	r22, r12
    9122:	80 e2       	ldi	r24, 0x20	; 32
    9124:	90 e0       	ldi	r25, 0x00	; 0
    9126:	76 d1       	rcall	.+748    	; 0x9414 <fputc>
    9128:	2a 94       	dec	r2
    912a:	f7 cf       	rjmp	.-18     	; 0x911a <vfprintf+0x3a4>
    912c:	f6 01       	movw	r30, r12
    912e:	86 81       	ldd	r24, Z+6	; 0x06
    9130:	97 81       	ldd	r25, Z+7	; 0x07
    9132:	02 c0       	rjmp	.+4      	; 0x9138 <vfprintf+0x3c2>
    9134:	8f ef       	ldi	r24, 0xFF	; 255
    9136:	9f ef       	ldi	r25, 0xFF	; 255
    9138:	2b 96       	adiw	r28, 0x0b	; 11
    913a:	cd bf       	out	0x3d, r28	; 61
    913c:	de bf       	out	0x3e, r29	; 62
    913e:	df 91       	pop	r29
    9140:	cf 91       	pop	r28
    9142:	1f 91       	pop	r17
    9144:	0f 91       	pop	r16
    9146:	ff 90       	pop	r15
    9148:	ef 90       	pop	r14
    914a:	df 90       	pop	r13
    914c:	cf 90       	pop	r12
    914e:	bf 90       	pop	r11
    9150:	af 90       	pop	r10
    9152:	9f 90       	pop	r9
    9154:	8f 90       	pop	r8
    9156:	7f 90       	pop	r7
    9158:	6f 90       	pop	r6
    915a:	5f 90       	pop	r5
    915c:	4f 90       	pop	r4
    915e:	3f 90       	pop	r3
    9160:	2f 90       	pop	r2
    9162:	08 95       	ret

00009164 <calloc>:
    9164:	0f 93       	push	r16
    9166:	1f 93       	push	r17
    9168:	cf 93       	push	r28
    916a:	df 93       	push	r29
    916c:	86 9f       	mul	r24, r22
    916e:	80 01       	movw	r16, r0
    9170:	87 9f       	mul	r24, r23
    9172:	10 0d       	add	r17, r0
    9174:	96 9f       	mul	r25, r22
    9176:	10 0d       	add	r17, r0
    9178:	11 24       	eor	r1, r1
    917a:	c8 01       	movw	r24, r16
    917c:	0d d0       	rcall	.+26     	; 0x9198 <malloc>
    917e:	ec 01       	movw	r28, r24
    9180:	00 97       	sbiw	r24, 0x00	; 0
    9182:	21 f0       	breq	.+8      	; 0x918c <calloc+0x28>
    9184:	a8 01       	movw	r20, r16
    9186:	60 e0       	ldi	r22, 0x00	; 0
    9188:	70 e0       	ldi	r23, 0x00	; 0
    918a:	32 d1       	rcall	.+612    	; 0x93f0 <memset>
    918c:	ce 01       	movw	r24, r28
    918e:	df 91       	pop	r29
    9190:	cf 91       	pop	r28
    9192:	1f 91       	pop	r17
    9194:	0f 91       	pop	r16
    9196:	08 95       	ret

00009198 <malloc>:
    9198:	0f 93       	push	r16
    919a:	1f 93       	push	r17
    919c:	cf 93       	push	r28
    919e:	df 93       	push	r29
    91a0:	82 30       	cpi	r24, 0x02	; 2
    91a2:	91 05       	cpc	r25, r1
    91a4:	10 f4       	brcc	.+4      	; 0x91aa <malloc+0x12>
    91a6:	82 e0       	ldi	r24, 0x02	; 2
    91a8:	90 e0       	ldi	r25, 0x00	; 0
    91aa:	e0 91 6f 2a 	lds	r30, 0x2A6F	; 0x802a6f <__flp>
    91ae:	f0 91 70 2a 	lds	r31, 0x2A70	; 0x802a70 <__flp+0x1>
    91b2:	20 e0       	ldi	r18, 0x00	; 0
    91b4:	30 e0       	ldi	r19, 0x00	; 0
    91b6:	a0 e0       	ldi	r26, 0x00	; 0
    91b8:	b0 e0       	ldi	r27, 0x00	; 0
    91ba:	30 97       	sbiw	r30, 0x00	; 0
    91bc:	19 f1       	breq	.+70     	; 0x9204 <malloc+0x6c>
    91be:	40 81       	ld	r20, Z
    91c0:	51 81       	ldd	r21, Z+1	; 0x01
    91c2:	02 81       	ldd	r16, Z+2	; 0x02
    91c4:	13 81       	ldd	r17, Z+3	; 0x03
    91c6:	48 17       	cp	r20, r24
    91c8:	59 07       	cpc	r21, r25
    91ca:	c8 f0       	brcs	.+50     	; 0x91fe <malloc+0x66>
    91cc:	84 17       	cp	r24, r20
    91ce:	95 07       	cpc	r25, r21
    91d0:	69 f4       	brne	.+26     	; 0x91ec <malloc+0x54>
    91d2:	10 97       	sbiw	r26, 0x00	; 0
    91d4:	31 f0       	breq	.+12     	; 0x91e2 <malloc+0x4a>
    91d6:	12 96       	adiw	r26, 0x02	; 2
    91d8:	0c 93       	st	X, r16
    91da:	12 97       	sbiw	r26, 0x02	; 2
    91dc:	13 96       	adiw	r26, 0x03	; 3
    91de:	1c 93       	st	X, r17
    91e0:	27 c0       	rjmp	.+78     	; 0x9230 <malloc+0x98>
    91e2:	00 93 6f 2a 	sts	0x2A6F, r16	; 0x802a6f <__flp>
    91e6:	10 93 70 2a 	sts	0x2A70, r17	; 0x802a70 <__flp+0x1>
    91ea:	22 c0       	rjmp	.+68     	; 0x9230 <malloc+0x98>
    91ec:	21 15       	cp	r18, r1
    91ee:	31 05       	cpc	r19, r1
    91f0:	19 f0       	breq	.+6      	; 0x91f8 <malloc+0x60>
    91f2:	42 17       	cp	r20, r18
    91f4:	53 07       	cpc	r21, r19
    91f6:	18 f4       	brcc	.+6      	; 0x91fe <malloc+0x66>
    91f8:	9a 01       	movw	r18, r20
    91fa:	bd 01       	movw	r22, r26
    91fc:	ef 01       	movw	r28, r30
    91fe:	df 01       	movw	r26, r30
    9200:	f8 01       	movw	r30, r16
    9202:	db cf       	rjmp	.-74     	; 0x91ba <malloc+0x22>
    9204:	21 15       	cp	r18, r1
    9206:	31 05       	cpc	r19, r1
    9208:	f9 f0       	breq	.+62     	; 0x9248 <malloc+0xb0>
    920a:	28 1b       	sub	r18, r24
    920c:	39 0b       	sbc	r19, r25
    920e:	24 30       	cpi	r18, 0x04	; 4
    9210:	31 05       	cpc	r19, r1
    9212:	80 f4       	brcc	.+32     	; 0x9234 <malloc+0x9c>
    9214:	8a 81       	ldd	r24, Y+2	; 0x02
    9216:	9b 81       	ldd	r25, Y+3	; 0x03
    9218:	61 15       	cp	r22, r1
    921a:	71 05       	cpc	r23, r1
    921c:	21 f0       	breq	.+8      	; 0x9226 <malloc+0x8e>
    921e:	fb 01       	movw	r30, r22
    9220:	82 83       	std	Z+2, r24	; 0x02
    9222:	93 83       	std	Z+3, r25	; 0x03
    9224:	04 c0       	rjmp	.+8      	; 0x922e <malloc+0x96>
    9226:	80 93 6f 2a 	sts	0x2A6F, r24	; 0x802a6f <__flp>
    922a:	90 93 70 2a 	sts	0x2A70, r25	; 0x802a70 <__flp+0x1>
    922e:	fe 01       	movw	r30, r28
    9230:	32 96       	adiw	r30, 0x02	; 2
    9232:	44 c0       	rjmp	.+136    	; 0x92bc <malloc+0x124>
    9234:	fe 01       	movw	r30, r28
    9236:	e2 0f       	add	r30, r18
    9238:	f3 1f       	adc	r31, r19
    923a:	81 93       	st	Z+, r24
    923c:	91 93       	st	Z+, r25
    923e:	22 50       	subi	r18, 0x02	; 2
    9240:	31 09       	sbc	r19, r1
    9242:	28 83       	st	Y, r18
    9244:	39 83       	std	Y+1, r19	; 0x01
    9246:	3a c0       	rjmp	.+116    	; 0x92bc <malloc+0x124>
    9248:	20 91 6d 2a 	lds	r18, 0x2A6D	; 0x802a6d <__brkval>
    924c:	30 91 6e 2a 	lds	r19, 0x2A6E	; 0x802a6e <__brkval+0x1>
    9250:	23 2b       	or	r18, r19
    9252:	41 f4       	brne	.+16     	; 0x9264 <malloc+0xcc>
    9254:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    9258:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    925c:	20 93 6d 2a 	sts	0x2A6D, r18	; 0x802a6d <__brkval>
    9260:	30 93 6e 2a 	sts	0x2A6E, r19	; 0x802a6e <__brkval+0x1>
    9264:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    9268:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    926c:	21 15       	cp	r18, r1
    926e:	31 05       	cpc	r19, r1
    9270:	41 f4       	brne	.+16     	; 0x9282 <malloc+0xea>
    9272:	2d b7       	in	r18, 0x3d	; 61
    9274:	3e b7       	in	r19, 0x3e	; 62
    9276:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    927a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    927e:	24 1b       	sub	r18, r20
    9280:	35 0b       	sbc	r19, r21
    9282:	e0 91 6d 2a 	lds	r30, 0x2A6D	; 0x802a6d <__brkval>
    9286:	f0 91 6e 2a 	lds	r31, 0x2A6E	; 0x802a6e <__brkval+0x1>
    928a:	e2 17       	cp	r30, r18
    928c:	f3 07       	cpc	r31, r19
    928e:	a0 f4       	brcc	.+40     	; 0x92b8 <malloc+0x120>
    9290:	2e 1b       	sub	r18, r30
    9292:	3f 0b       	sbc	r19, r31
    9294:	28 17       	cp	r18, r24
    9296:	39 07       	cpc	r19, r25
    9298:	78 f0       	brcs	.+30     	; 0x92b8 <malloc+0x120>
    929a:	ac 01       	movw	r20, r24
    929c:	4e 5f       	subi	r20, 0xFE	; 254
    929e:	5f 4f       	sbci	r21, 0xFF	; 255
    92a0:	24 17       	cp	r18, r20
    92a2:	35 07       	cpc	r19, r21
    92a4:	48 f0       	brcs	.+18     	; 0x92b8 <malloc+0x120>
    92a6:	4e 0f       	add	r20, r30
    92a8:	5f 1f       	adc	r21, r31
    92aa:	40 93 6d 2a 	sts	0x2A6D, r20	; 0x802a6d <__brkval>
    92ae:	50 93 6e 2a 	sts	0x2A6E, r21	; 0x802a6e <__brkval+0x1>
    92b2:	81 93       	st	Z+, r24
    92b4:	91 93       	st	Z+, r25
    92b6:	02 c0       	rjmp	.+4      	; 0x92bc <malloc+0x124>
    92b8:	e0 e0       	ldi	r30, 0x00	; 0
    92ba:	f0 e0       	ldi	r31, 0x00	; 0
    92bc:	cf 01       	movw	r24, r30
    92be:	df 91       	pop	r29
    92c0:	cf 91       	pop	r28
    92c2:	1f 91       	pop	r17
    92c4:	0f 91       	pop	r16
    92c6:	08 95       	ret

000092c8 <free>:
    92c8:	cf 93       	push	r28
    92ca:	df 93       	push	r29
    92cc:	00 97       	sbiw	r24, 0x00	; 0
    92ce:	09 f4       	brne	.+2      	; 0x92d2 <free+0xa>
    92d0:	81 c0       	rjmp	.+258    	; 0x93d4 <free+0x10c>
    92d2:	fc 01       	movw	r30, r24
    92d4:	32 97       	sbiw	r30, 0x02	; 2
    92d6:	12 82       	std	Z+2, r1	; 0x02
    92d8:	13 82       	std	Z+3, r1	; 0x03
    92da:	a0 91 6f 2a 	lds	r26, 0x2A6F	; 0x802a6f <__flp>
    92de:	b0 91 70 2a 	lds	r27, 0x2A70	; 0x802a70 <__flp+0x1>
    92e2:	10 97       	sbiw	r26, 0x00	; 0
    92e4:	81 f4       	brne	.+32     	; 0x9306 <free+0x3e>
    92e6:	20 81       	ld	r18, Z
    92e8:	31 81       	ldd	r19, Z+1	; 0x01
    92ea:	82 0f       	add	r24, r18
    92ec:	93 1f       	adc	r25, r19
    92ee:	20 91 6d 2a 	lds	r18, 0x2A6D	; 0x802a6d <__brkval>
    92f2:	30 91 6e 2a 	lds	r19, 0x2A6E	; 0x802a6e <__brkval+0x1>
    92f6:	28 17       	cp	r18, r24
    92f8:	39 07       	cpc	r19, r25
    92fa:	51 f5       	brne	.+84     	; 0x9350 <free+0x88>
    92fc:	e0 93 6d 2a 	sts	0x2A6D, r30	; 0x802a6d <__brkval>
    9300:	f0 93 6e 2a 	sts	0x2A6E, r31	; 0x802a6e <__brkval+0x1>
    9304:	67 c0       	rjmp	.+206    	; 0x93d4 <free+0x10c>
    9306:	ed 01       	movw	r28, r26
    9308:	20 e0       	ldi	r18, 0x00	; 0
    930a:	30 e0       	ldi	r19, 0x00	; 0
    930c:	ce 17       	cp	r28, r30
    930e:	df 07       	cpc	r29, r31
    9310:	40 f4       	brcc	.+16     	; 0x9322 <free+0x5a>
    9312:	4a 81       	ldd	r20, Y+2	; 0x02
    9314:	5b 81       	ldd	r21, Y+3	; 0x03
    9316:	9e 01       	movw	r18, r28
    9318:	41 15       	cp	r20, r1
    931a:	51 05       	cpc	r21, r1
    931c:	f1 f0       	breq	.+60     	; 0x935a <free+0x92>
    931e:	ea 01       	movw	r28, r20
    9320:	f5 cf       	rjmp	.-22     	; 0x930c <free+0x44>
    9322:	c2 83       	std	Z+2, r28	; 0x02
    9324:	d3 83       	std	Z+3, r29	; 0x03
    9326:	40 81       	ld	r20, Z
    9328:	51 81       	ldd	r21, Z+1	; 0x01
    932a:	84 0f       	add	r24, r20
    932c:	95 1f       	adc	r25, r21
    932e:	c8 17       	cp	r28, r24
    9330:	d9 07       	cpc	r29, r25
    9332:	59 f4       	brne	.+22     	; 0x934a <free+0x82>
    9334:	88 81       	ld	r24, Y
    9336:	99 81       	ldd	r25, Y+1	; 0x01
    9338:	84 0f       	add	r24, r20
    933a:	95 1f       	adc	r25, r21
    933c:	02 96       	adiw	r24, 0x02	; 2
    933e:	80 83       	st	Z, r24
    9340:	91 83       	std	Z+1, r25	; 0x01
    9342:	8a 81       	ldd	r24, Y+2	; 0x02
    9344:	9b 81       	ldd	r25, Y+3	; 0x03
    9346:	82 83       	std	Z+2, r24	; 0x02
    9348:	93 83       	std	Z+3, r25	; 0x03
    934a:	21 15       	cp	r18, r1
    934c:	31 05       	cpc	r19, r1
    934e:	29 f4       	brne	.+10     	; 0x935a <free+0x92>
    9350:	e0 93 6f 2a 	sts	0x2A6F, r30	; 0x802a6f <__flp>
    9354:	f0 93 70 2a 	sts	0x2A70, r31	; 0x802a70 <__flp+0x1>
    9358:	3d c0       	rjmp	.+122    	; 0x93d4 <free+0x10c>
    935a:	e9 01       	movw	r28, r18
    935c:	ea 83       	std	Y+2, r30	; 0x02
    935e:	fb 83       	std	Y+3, r31	; 0x03
    9360:	49 91       	ld	r20, Y+
    9362:	59 91       	ld	r21, Y+
    9364:	c4 0f       	add	r28, r20
    9366:	d5 1f       	adc	r29, r21
    9368:	ec 17       	cp	r30, r28
    936a:	fd 07       	cpc	r31, r29
    936c:	61 f4       	brne	.+24     	; 0x9386 <free+0xbe>
    936e:	80 81       	ld	r24, Z
    9370:	91 81       	ldd	r25, Z+1	; 0x01
    9372:	84 0f       	add	r24, r20
    9374:	95 1f       	adc	r25, r21
    9376:	02 96       	adiw	r24, 0x02	; 2
    9378:	e9 01       	movw	r28, r18
    937a:	88 83       	st	Y, r24
    937c:	99 83       	std	Y+1, r25	; 0x01
    937e:	82 81       	ldd	r24, Z+2	; 0x02
    9380:	93 81       	ldd	r25, Z+3	; 0x03
    9382:	8a 83       	std	Y+2, r24	; 0x02
    9384:	9b 83       	std	Y+3, r25	; 0x03
    9386:	e0 e0       	ldi	r30, 0x00	; 0
    9388:	f0 e0       	ldi	r31, 0x00	; 0
    938a:	12 96       	adiw	r26, 0x02	; 2
    938c:	8d 91       	ld	r24, X+
    938e:	9c 91       	ld	r25, X
    9390:	13 97       	sbiw	r26, 0x03	; 3
    9392:	00 97       	sbiw	r24, 0x00	; 0
    9394:	19 f0       	breq	.+6      	; 0x939c <free+0xd4>
    9396:	fd 01       	movw	r30, r26
    9398:	dc 01       	movw	r26, r24
    939a:	f7 cf       	rjmp	.-18     	; 0x938a <free+0xc2>
    939c:	8d 91       	ld	r24, X+
    939e:	9c 91       	ld	r25, X
    93a0:	11 97       	sbiw	r26, 0x01	; 1
    93a2:	9d 01       	movw	r18, r26
    93a4:	2e 5f       	subi	r18, 0xFE	; 254
    93a6:	3f 4f       	sbci	r19, 0xFF	; 255
    93a8:	82 0f       	add	r24, r18
    93aa:	93 1f       	adc	r25, r19
    93ac:	20 91 6d 2a 	lds	r18, 0x2A6D	; 0x802a6d <__brkval>
    93b0:	30 91 6e 2a 	lds	r19, 0x2A6E	; 0x802a6e <__brkval+0x1>
    93b4:	28 17       	cp	r18, r24
    93b6:	39 07       	cpc	r19, r25
    93b8:	69 f4       	brne	.+26     	; 0x93d4 <free+0x10c>
    93ba:	30 97       	sbiw	r30, 0x00	; 0
    93bc:	29 f4       	brne	.+10     	; 0x93c8 <free+0x100>
    93be:	10 92 6f 2a 	sts	0x2A6F, r1	; 0x802a6f <__flp>
    93c2:	10 92 70 2a 	sts	0x2A70, r1	; 0x802a70 <__flp+0x1>
    93c6:	02 c0       	rjmp	.+4      	; 0x93cc <free+0x104>
    93c8:	12 82       	std	Z+2, r1	; 0x02
    93ca:	13 82       	std	Z+3, r1	; 0x03
    93cc:	a0 93 6d 2a 	sts	0x2A6D, r26	; 0x802a6d <__brkval>
    93d0:	b0 93 6e 2a 	sts	0x2A6E, r27	; 0x802a6e <__brkval+0x1>
    93d4:	df 91       	pop	r29
    93d6:	cf 91       	pop	r28
    93d8:	08 95       	ret

000093da <strnlen_P>:
    93da:	fc 01       	movw	r30, r24
    93dc:	05 90       	lpm	r0, Z+
    93de:	61 50       	subi	r22, 0x01	; 1
    93e0:	70 40       	sbci	r23, 0x00	; 0
    93e2:	01 10       	cpse	r0, r1
    93e4:	d8 f7       	brcc	.-10     	; 0x93dc <strnlen_P+0x2>
    93e6:	80 95       	com	r24
    93e8:	90 95       	com	r25
    93ea:	8e 0f       	add	r24, r30
    93ec:	9f 1f       	adc	r25, r31
    93ee:	08 95       	ret

000093f0 <memset>:
    93f0:	dc 01       	movw	r26, r24
    93f2:	01 c0       	rjmp	.+2      	; 0x93f6 <memset+0x6>
    93f4:	6d 93       	st	X+, r22
    93f6:	41 50       	subi	r20, 0x01	; 1
    93f8:	50 40       	sbci	r21, 0x00	; 0
    93fa:	e0 f7       	brcc	.-8      	; 0x93f4 <memset+0x4>
    93fc:	08 95       	ret

000093fe <strnlen>:
    93fe:	fc 01       	movw	r30, r24
    9400:	61 50       	subi	r22, 0x01	; 1
    9402:	70 40       	sbci	r23, 0x00	; 0
    9404:	01 90       	ld	r0, Z+
    9406:	01 10       	cpse	r0, r1
    9408:	d8 f7       	brcc	.-10     	; 0x9400 <strnlen+0x2>
    940a:	80 95       	com	r24
    940c:	90 95       	com	r25
    940e:	8e 0f       	add	r24, r30
    9410:	9f 1f       	adc	r25, r31
    9412:	08 95       	ret

00009414 <fputc>:
    9414:	0f 93       	push	r16
    9416:	1f 93       	push	r17
    9418:	cf 93       	push	r28
    941a:	df 93       	push	r29
    941c:	fb 01       	movw	r30, r22
    941e:	23 81       	ldd	r18, Z+3	; 0x03
    9420:	21 fd       	sbrc	r18, 1
    9422:	03 c0       	rjmp	.+6      	; 0x942a <fputc+0x16>
    9424:	8f ef       	ldi	r24, 0xFF	; 255
    9426:	9f ef       	ldi	r25, 0xFF	; 255
    9428:	2c c0       	rjmp	.+88     	; 0x9482 <fputc+0x6e>
    942a:	22 ff       	sbrs	r18, 2
    942c:	16 c0       	rjmp	.+44     	; 0x945a <fputc+0x46>
    942e:	46 81       	ldd	r20, Z+6	; 0x06
    9430:	57 81       	ldd	r21, Z+7	; 0x07
    9432:	24 81       	ldd	r18, Z+4	; 0x04
    9434:	35 81       	ldd	r19, Z+5	; 0x05
    9436:	42 17       	cp	r20, r18
    9438:	53 07       	cpc	r21, r19
    943a:	44 f4       	brge	.+16     	; 0x944c <fputc+0x38>
    943c:	a0 81       	ld	r26, Z
    943e:	b1 81       	ldd	r27, Z+1	; 0x01
    9440:	9d 01       	movw	r18, r26
    9442:	2f 5f       	subi	r18, 0xFF	; 255
    9444:	3f 4f       	sbci	r19, 0xFF	; 255
    9446:	20 83       	st	Z, r18
    9448:	31 83       	std	Z+1, r19	; 0x01
    944a:	8c 93       	st	X, r24
    944c:	26 81       	ldd	r18, Z+6	; 0x06
    944e:	37 81       	ldd	r19, Z+7	; 0x07
    9450:	2f 5f       	subi	r18, 0xFF	; 255
    9452:	3f 4f       	sbci	r19, 0xFF	; 255
    9454:	26 83       	std	Z+6, r18	; 0x06
    9456:	37 83       	std	Z+7, r19	; 0x07
    9458:	14 c0       	rjmp	.+40     	; 0x9482 <fputc+0x6e>
    945a:	8b 01       	movw	r16, r22
    945c:	ec 01       	movw	r28, r24
    945e:	fb 01       	movw	r30, r22
    9460:	00 84       	ldd	r0, Z+8	; 0x08
    9462:	f1 85       	ldd	r31, Z+9	; 0x09
    9464:	e0 2d       	mov	r30, r0
    9466:	19 95       	eicall
    9468:	89 2b       	or	r24, r25
    946a:	e1 f6       	brne	.-72     	; 0x9424 <fputc+0x10>
    946c:	d8 01       	movw	r26, r16
    946e:	16 96       	adiw	r26, 0x06	; 6
    9470:	8d 91       	ld	r24, X+
    9472:	9c 91       	ld	r25, X
    9474:	17 97       	sbiw	r26, 0x07	; 7
    9476:	01 96       	adiw	r24, 0x01	; 1
    9478:	16 96       	adiw	r26, 0x06	; 6
    947a:	8d 93       	st	X+, r24
    947c:	9c 93       	st	X, r25
    947e:	17 97       	sbiw	r26, 0x07	; 7
    9480:	ce 01       	movw	r24, r28
    9482:	df 91       	pop	r29
    9484:	cf 91       	pop	r28
    9486:	1f 91       	pop	r17
    9488:	0f 91       	pop	r16
    948a:	08 95       	ret

0000948c <__ultoa_invert>:
    948c:	fa 01       	movw	r30, r20
    948e:	aa 27       	eor	r26, r26
    9490:	28 30       	cpi	r18, 0x08	; 8
    9492:	51 f1       	breq	.+84     	; 0x94e8 <__ultoa_invert+0x5c>
    9494:	20 31       	cpi	r18, 0x10	; 16
    9496:	81 f1       	breq	.+96     	; 0x94f8 <__ultoa_invert+0x6c>
    9498:	e8 94       	clt
    949a:	6f 93       	push	r22
    949c:	6e 7f       	andi	r22, 0xFE	; 254
    949e:	6e 5f       	subi	r22, 0xFE	; 254
    94a0:	7f 4f       	sbci	r23, 0xFF	; 255
    94a2:	8f 4f       	sbci	r24, 0xFF	; 255
    94a4:	9f 4f       	sbci	r25, 0xFF	; 255
    94a6:	af 4f       	sbci	r26, 0xFF	; 255
    94a8:	b1 e0       	ldi	r27, 0x01	; 1
    94aa:	3e d0       	rcall	.+124    	; 0x9528 <__ultoa_invert+0x9c>
    94ac:	b4 e0       	ldi	r27, 0x04	; 4
    94ae:	3c d0       	rcall	.+120    	; 0x9528 <__ultoa_invert+0x9c>
    94b0:	67 0f       	add	r22, r23
    94b2:	78 1f       	adc	r23, r24
    94b4:	89 1f       	adc	r24, r25
    94b6:	9a 1f       	adc	r25, r26
    94b8:	a1 1d       	adc	r26, r1
    94ba:	68 0f       	add	r22, r24
    94bc:	79 1f       	adc	r23, r25
    94be:	8a 1f       	adc	r24, r26
    94c0:	91 1d       	adc	r25, r1
    94c2:	a1 1d       	adc	r26, r1
    94c4:	6a 0f       	add	r22, r26
    94c6:	71 1d       	adc	r23, r1
    94c8:	81 1d       	adc	r24, r1
    94ca:	91 1d       	adc	r25, r1
    94cc:	a1 1d       	adc	r26, r1
    94ce:	20 d0       	rcall	.+64     	; 0x9510 <__ultoa_invert+0x84>
    94d0:	09 f4       	brne	.+2      	; 0x94d4 <__ultoa_invert+0x48>
    94d2:	68 94       	set
    94d4:	3f 91       	pop	r19
    94d6:	2a e0       	ldi	r18, 0x0A	; 10
    94d8:	26 9f       	mul	r18, r22
    94da:	11 24       	eor	r1, r1
    94dc:	30 19       	sub	r19, r0
    94de:	30 5d       	subi	r19, 0xD0	; 208
    94e0:	31 93       	st	Z+, r19
    94e2:	de f6       	brtc	.-74     	; 0x949a <__ultoa_invert+0xe>
    94e4:	cf 01       	movw	r24, r30
    94e6:	08 95       	ret
    94e8:	46 2f       	mov	r20, r22
    94ea:	47 70       	andi	r20, 0x07	; 7
    94ec:	40 5d       	subi	r20, 0xD0	; 208
    94ee:	41 93       	st	Z+, r20
    94f0:	b3 e0       	ldi	r27, 0x03	; 3
    94f2:	0f d0       	rcall	.+30     	; 0x9512 <__ultoa_invert+0x86>
    94f4:	c9 f7       	brne	.-14     	; 0x94e8 <__ultoa_invert+0x5c>
    94f6:	f6 cf       	rjmp	.-20     	; 0x94e4 <__ultoa_invert+0x58>
    94f8:	46 2f       	mov	r20, r22
    94fa:	4f 70       	andi	r20, 0x0F	; 15
    94fc:	40 5d       	subi	r20, 0xD0	; 208
    94fe:	4a 33       	cpi	r20, 0x3A	; 58
    9500:	18 f0       	brcs	.+6      	; 0x9508 <__ultoa_invert+0x7c>
    9502:	49 5d       	subi	r20, 0xD9	; 217
    9504:	31 fd       	sbrc	r19, 1
    9506:	40 52       	subi	r20, 0x20	; 32
    9508:	41 93       	st	Z+, r20
    950a:	02 d0       	rcall	.+4      	; 0x9510 <__ultoa_invert+0x84>
    950c:	a9 f7       	brne	.-22     	; 0x94f8 <__ultoa_invert+0x6c>
    950e:	ea cf       	rjmp	.-44     	; 0x94e4 <__ultoa_invert+0x58>
    9510:	b4 e0       	ldi	r27, 0x04	; 4
    9512:	a6 95       	lsr	r26
    9514:	97 95       	ror	r25
    9516:	87 95       	ror	r24
    9518:	77 95       	ror	r23
    951a:	67 95       	ror	r22
    951c:	ba 95       	dec	r27
    951e:	c9 f7       	brne	.-14     	; 0x9512 <__ultoa_invert+0x86>
    9520:	00 97       	sbiw	r24, 0x00	; 0
    9522:	61 05       	cpc	r22, r1
    9524:	71 05       	cpc	r23, r1
    9526:	08 95       	ret
    9528:	9b 01       	movw	r18, r22
    952a:	ac 01       	movw	r20, r24
    952c:	0a 2e       	mov	r0, r26
    952e:	06 94       	lsr	r0
    9530:	57 95       	ror	r21
    9532:	47 95       	ror	r20
    9534:	37 95       	ror	r19
    9536:	27 95       	ror	r18
    9538:	ba 95       	dec	r27
    953a:	c9 f7       	brne	.-14     	; 0x952e <__ultoa_invert+0xa2>
    953c:	62 0f       	add	r22, r18
    953e:	73 1f       	adc	r23, r19
    9540:	84 1f       	adc	r24, r20
    9542:	95 1f       	adc	r25, r21
    9544:	a0 1d       	adc	r26, r0
    9546:	08 95       	ret

00009548 <_exit>:
    9548:	f8 94       	cli

0000954a <__stop_program>:
    954a:	ff cf       	rjmp	.-2      	; 0x954a <__stop_program>
