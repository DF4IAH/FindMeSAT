
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001023a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d0  00802000  0001023a  000102ce  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007a3  008021d0  008021d0  000104a0  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0001049e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000104fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c88  00000000  00000000  00010540  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00025e0d  00000000  00000000  000111c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000079ad  00000000  00000000  00036fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00014de4  00000000  00000000  0003e982  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000039a8  00000000  00000000  00053768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0004415e  00000000  00000000  00057110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010bda  00000000  00000000  0009b26e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cf0  00000000  00000000  000abe48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00010485  00000000  00000000  000acb38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 19 	jmp	0x337c	; 0x337c <__ctors_end>
       4:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
       8:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
       c:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      10:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      14:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      18:	0c 94 65 24 	jmp	0x48ca	; 0x48ca <__vector_6>
      1c:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__vector_7>
      20:	0c 94 b5 24 	jmp	0x496a	; 0x496a <__vector_8>
      24:	0c 94 dd 24 	jmp	0x49ba	; 0x49ba <__vector_9>
      28:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      2c:	0c 94 b6 25 	jmp	0x4b6c	; 0x4b6c <__vector_11>
      30:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      34:	0c 94 f8 4f 	jmp	0x9ff0	; 0x9ff0 <__vector_13>
      38:	0c 94 50 48 	jmp	0x90a0	; 0x90a0 <__vector_14>
      3c:	0c 94 7d 48 	jmp	0x90fa	; 0x90fa <__vector_15>
      40:	0c 94 aa 48 	jmp	0x9154	; 0x9154 <__vector_16>
      44:	0c 94 d7 48 	jmp	0x91ae	; 0x91ae <__vector_17>
      48:	0c 94 04 49 	jmp	0x9208	; 0x9208 <__vector_18>
      4c:	0c 94 31 49 	jmp	0x9262	; 0x9262 <__vector_19>
      50:	0c 94 5e 49 	jmp	0x92bc	; 0x92bc <__vector_20>
      54:	0c 94 8b 49 	jmp	0x9316	; 0x9316 <__vector_21>
      58:	0c 94 b8 49 	jmp	0x9370	; 0x9370 <__vector_22>
      5c:	0c 94 e5 49 	jmp	0x93ca	; 0x93ca <__vector_23>
      60:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      64:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      68:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      6c:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      70:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      74:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      78:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      7c:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      80:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      84:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      88:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      8c:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      90:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      94:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      98:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      9c:	0c 94 53 45 	jmp	0x8aa6	; 0x8aa6 <__vector_39>
      a0:	0c 94 85 45 	jmp	0x8b0a	; 0x8b0a <__vector_40>
      a4:	0c 94 b7 45 	jmp	0x8b6e	; 0x8b6e <__vector_41>
      a8:	0c 94 e9 45 	jmp	0x8bd2	; 0x8bd2 <__vector_42>
      ac:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      b0:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      b4:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      b8:	0c 94 1f 50 	jmp	0xa03e	; 0xa03e <__vector_46>
      bc:	0c 94 d4 4b 	jmp	0x97a8	; 0x97a8 <__vector_47>
      c0:	0c 94 01 4c 	jmp	0x9802	; 0x9802 <__vector_48>
      c4:	0c 94 2e 4c 	jmp	0x985c	; 0x985c <__vector_49>
      c8:	0c 94 5b 4c 	jmp	0x98b6	; 0x98b6 <__vector_50>
      cc:	0c 94 88 4c 	jmp	0x9910	; 0x9910 <__vector_51>
      d0:	0c 94 b5 4c 	jmp	0x996a	; 0x996a <__vector_52>
      d4:	0c 94 e2 4c 	jmp	0x99c4	; 0x99c4 <__vector_53>
      d8:	0c 94 0f 4d 	jmp	0x9a1e	; 0x9a1e <__vector_54>
      dc:	0c 94 3c 4d 	jmp	0x9a78	; 0x9a78 <__vector_55>
      e0:	0c 94 69 4d 	jmp	0x9ad2	; 0x9ad2 <__vector_56>
      e4:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      e8:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      ec:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      f0:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      f4:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      f8:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
      fc:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     100:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     104:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     108:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     10c:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     110:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     114:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     118:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     11c:	0c 94 8b 44 	jmp	0x8916	; 0x8916 <__vector_71>
     120:	0c 94 bd 44 	jmp	0x897a	; 0x897a <__vector_72>
     124:	0c 94 ef 44 	jmp	0x89de	; 0x89de <__vector_73>
     128:	0c 94 21 45 	jmp	0x8a42	; 0x8a42 <__vector_74>
     12c:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     130:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     134:	0c 94 12 4a 	jmp	0x9424	; 0x9424 <__vector_77>
     138:	0c 94 3f 4a 	jmp	0x947e	; 0x947e <__vector_78>
     13c:	0c 94 6c 4a 	jmp	0x94d8	; 0x94d8 <__vector_79>
     140:	0c 94 99 4a 	jmp	0x9532	; 0x9532 <__vector_80>
     144:	0c 94 c6 4a 	jmp	0x958c	; 0x958c <__vector_81>
     148:	0c 94 f3 4a 	jmp	0x95e6	; 0x95e6 <__vector_82>
     14c:	0c 94 20 4b 	jmp	0x9640	; 0x9640 <__vector_83>
     150:	0c 94 4d 4b 	jmp	0x969a	; 0x969a <__vector_84>
     154:	0c 94 7a 4b 	jmp	0x96f4	; 0x96f4 <__vector_85>
     158:	0c 94 a7 4b 	jmp	0x974e	; 0x974e <__vector_86>
     15c:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     160:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     164:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     168:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     16c:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     170:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     174:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     178:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     17c:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     180:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     184:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     188:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     18c:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     190:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     194:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     198:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     19c:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1a0:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1a4:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1a8:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1ac:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1b0:	0c 94 96 4d 	jmp	0x9b2c	; 0x9b2c <__vector_108>
     1b4:	0c 94 c3 4d 	jmp	0x9b86	; 0x9b86 <__vector_109>
     1b8:	0c 94 f0 4d 	jmp	0x9be0	; 0x9be0 <__vector_110>
     1bc:	0c 94 1d 4e 	jmp	0x9c3a	; 0x9c3a <__vector_111>
     1c0:	0c 94 4a 4e 	jmp	0x9c94	; 0x9c94 <__vector_112>
     1c4:	0c 94 77 4e 	jmp	0x9cee	; 0x9cee <__vector_113>
     1c8:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1cc:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1d0:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1d4:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1d8:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1dc:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__vector_119>
     1e0:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1e4:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1e8:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1ec:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1f0:	0c 94 df 19 	jmp	0x33be	; 0x33be <__bad_interrupt>
     1f4:	0c 94 09 57 	jmp	0xae12	; 0xae12 <__vector_125>
     1f8:	0c 94 c5 57 	jmp	0xaf8a	; 0xaf8a <__vector_126>
     1fc:	bd 51       	subi	r27, 0x1D	; 29
     1fe:	c0 51       	subi	r28, 0x10	; 16
     200:	c3 51       	subi	r28, 0x13	; 19
     202:	c6 51       	subi	r28, 0x16	; 22
     204:	c9 51       	subi	r28, 0x19	; 25
     206:	cc 51       	subi	r28, 0x1C	; 28
     208:	cf 51       	subi	r28, 0x1F	; 31
     20a:	3d 59       	subi	r19, 0x9D	; 157
     20c:	50 59       	subi	r21, 0x90	; 144
     20e:	63 59       	subi	r22, 0x93	; 147
     210:	76 59       	subi	r23, 0x96	; 150
     212:	89 59       	subi	r24, 0x99	; 153
     214:	9c 59       	subi	r25, 0x9C	; 156
     216:	af 59       	subi	r26, 0x9F	; 159
     218:	05 a8       	ldd	r0, Z+53	; 0x35
     21a:	4c cd       	rjmp	.-1384   	; 0xfffffcb4 <__eeprom_end+0xff7efcb4>
     21c:	b2 d4       	rcall	.+2404   	; 0xb82 <PM_SINE_IP+0x4a7>
     21e:	4e b9       	out	0x0e, r20	; 14
     220:	38 36       	cpi	r19, 0x68	; 104
     222:	a9 02       	muls	r26, r25
     224:	0c 50       	subi	r16, 0x0C	; 12
     226:	b9 91       	ld	r27, Y+
     228:	86 88       	ldd	r8, Z+22	; 0x16
     22a:	08 3c       	cpi	r16, 0xC8	; 200
     22c:	a6 aa       	std	Z+54, r10	; 0x36
     22e:	aa 2a       	or	r10, r26
     230:	be 00       	.word	0x00be	; ????
     232:	00 00       	nop
     234:	80 3f       	cpi	r24, 0xF0	; 240
     236:	07 63       	ori	r16, 0x37	; 55
     238:	42 36       	cpi	r20, 0x62	; 98
     23a:	b7 9b       	sbis	0x16, 7	; 22
     23c:	d8 a7       	std	Y+40, r29	; 0x28
     23e:	1a 39       	cpi	r17, 0x9A	; 154
     240:	68 56       	subi	r22, 0x68	; 104
     242:	18 ae       	std	Y+56, r1	; 0x38
     244:	ba ab       	std	Y+50, r27	; 0x32
     246:	55 8c       	ldd	r5, Z+29	; 0x1d
     248:	1d 3c       	cpi	r17, 0xCD	; 205
     24a:	b7 cc       	rjmp	.-1682   	; 0xfffffbba <__eeprom_end+0xff7efbba>
     24c:	57 63       	ori	r21, 0x37	; 55
     24e:	bd 6d       	ori	r27, 0xDD	; 221
     250:	ed fd       	.word	0xfded	; ????
     252:	75 3e       	cpi	r23, 0xE5	; 229
     254:	f6 17       	cp	r31, r22
     256:	72 31       	cpi	r23, 0x12	; 18
     258:	bf 00       	.word	0x00bf	; ????
     25a:	00 00       	nop
     25c:	80 3f       	cpi	r24, 0xF0	; 240
     25e:	08 00       	.word	0x0008	; ????
     260:	00 00       	nop
     262:	be 92       	st	-X, r11
     264:	24 49       	sbci	r18, 0x94	; 148
     266:	12 3e       	cpi	r17, 0xE2	; 226
     268:	ab aa       	std	Y+51, r10	; 0x33
     26a:	aa 2a       	or	r10, r26
     26c:	be cd       	rjmp	.-1156   	; 0xfffffdea <__eeprom_end+0xff7efdea>
     26e:	cc cc       	rjmp	.-1640   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
     270:	4c 3e       	cpi	r20, 0xEC	; 236
     272:	00 00       	nop
     274:	00 80       	ld	r0, Z
     276:	be ab       	std	Y+54, r27	; 0x36
     278:	aa aa       	std	Y+50, r10	; 0x32
     27a:	aa 3e       	cpi	r26, 0xEA	; 234
     27c:	00 00       	nop
     27e:	00 00       	nop
     280:	bf 00       	.word	0x00bf	; ????
     282:	00 00       	nop
     284:	80 3f       	cpi	r24, 0xF0	; 240
     286:	00 00       	nop
     288:	00 00       	nop
     28a:	00 08       	sbc	r0, r0
     28c:	41 78       	andi	r20, 0x81	; 129
     28e:	d3 bb       	out	0x13, r29	; 19
     290:	43 87       	std	Z+11, r20	; 0x0b
     292:	d1 13       	cpse	r29, r17
     294:	3d 19       	sub	r19, r13
     296:	0e 3c       	cpi	r16, 0xCE	; 206
     298:	c3 bd       	out	0x23, r28	; 35
     29a:	42 82       	std	Z+2, r4	; 0x02
     29c:	ad 2b       	or	r26, r29
     29e:	3e 68       	ori	r19, 0x8E	; 142
     2a0:	ec 82       	std	Y+4, r14	; 0x04
     2a2:	76 be       	out	0x36, r7	; 54
     2a4:	d9 8f       	std	Y+25, r29	; 0x19
     2a6:	e1 a9       	ldd	r30, Z+49	; 0x31
     2a8:	3e 4c       	sbci	r19, 0xCE	; 206
     2aa:	80 ef       	ldi	r24, 0xF0	; 240
     2ac:	ff be       	out	0x3f, r15	; 63
     2ae:	01 c4       	rjmp	.+2050   	; 0xab2 <PM_SINE_IP+0x3d7>
     2b0:	ff 7f       	andi	r31, 0xFF	; 255
     2b2:	3f 00       	.word	0x003f	; ????
     2b4:	00 00       	nop
	...

000002b8 <__trampolines_end>:
     2b8:	6e 61       	ori	r22, 0x1E	; 30
     2ba:	6e 00       	.word	0x006e	; ????

000002bc <__c.2332>:
     2bc:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2cc:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2dc:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2ec:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2fc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     30c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     31c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     32c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     33c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     34c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     35c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     36c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     37c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     38c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     39c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3ac:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003ba <pstr_nan>:
     3ba:	4e 41 4e                                            NAN

000003bd <pstr_inity>:
     3bd:	49 4e 49 54 59                                      INITY

000003c2 <pstr_inf>:
     3c2:	49 4e 46                                            INF

000003c5 <pwr_m10>:
     3c5:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     3d5:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000003dd <pwr_p10>:
     3dd:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     3ed:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000003f5 <PM_TWI1_INIT_ONBOARD_SIM808_OK>:
     3f5:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 73 75 63     Init: SIM808 suc
     405:	63 65 73 73 00                                      cess.

0000040a <PM_TWI1_INIT_ONBOARD_SIM808_RESTART>:
     40a:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 72 65 73     Init: SIM808 res
     41a:	74 61 72 74 69 6e 67 20 2e 2e 2e 00                 tarting ....

00000426 <PM_TWI1_INIT_ONBOARD_SIM808_START>:
     426:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 73 74 61     Init: SIM808 sta
     436:	72 74 69 6e 67 20 2e 2e 2e 00                       rting ....

00000440 <PM_SIM808_INFO_SYNCED>:
     440:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 20 62     SIM808 ser1:   b
     450:	61 75 64 20 72 61 74 65 20 73 79 6e 63 65 64 0d     aud rate synced.
     460:	0a 00                                               ..

00000462 <PM_SIM808_INFO_RESTART>:
     462:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 53 74     SIM808 ser1:  St
     472:	61 72 74 69 6e 67 20 74 68 65 20 64 65 76 69 63     arting the devic
     482:	65 20 2e 2e 2e 0d 0a 00                             e ......

0000048a <PM_SIM808_INFO_START>:
     48a:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 53 74     SIM808 ser1:  St
     49a:	61 72 74 69 6e 67 20 74 68 65 20 64 65 76 69 63     arting the devic
     4aa:	65 20 2e 2e 2e 0d 0a 00                             e ......

000004b2 <PM_SIM808_OK>:
     4b2:	4f 4b 00                                            OK.

000004b5 <PM_INFO_PART_L2P4>:
     4b5:	47 79 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e 32     Gyro_Temp=%+06.2
     4c5:	66 43 20 28 25 2b 30 36 64 29 0d 0a 0d 0a 00        fC (%+06d).....

000004d4 <PM_INFO_PART_L2P3B>:
     4d4:	4d 7a 3d 25 2b 30 37 2e 33 66 75 54 20 28 25 2b     Mz=%+07.3fuT (%+
     4e4:	30 36 64 29 09 20 09 00                             06d). ..

000004ec <PM_INFO_PART_L2P3A>:
     4ec:	4d 78 3d 25 2b 30 37 2e 33 66 75 54 20 28 25 2b     Mx=%+07.3fuT (%+
     4fc:	30 36 64 29 2c 20 4d 79 3d 25 2b 30 37 2e 33 66     06d), My=%+07.3f
     50c:	75 54 20 28 25 2b 30 36 64 29 2c 20 00              uT (%+06d), .

00000519 <PM_INFO_PART_L2P2B>:
     519:	47 7a 3d 25 2b 30 37 2e 32 66 64 70 73 20 28 25     Gz=%+07.2fdps (%
     529:	30 36 64 29 09 20 09 00                             06d). ..

00000531 <PM_INFO_PART_L2P2A>:
     531:	47 78 3d 25 2b 30 37 2e 32 66 64 70 73 20 28 25     Gx=%+07.2fdps (%
     541:	2b 30 36 64 29 2c 20 47 79 3d 25 2b 30 37 2e 32     +06d), Gy=%+07.2
     551:	66 64 70 73 20 28 25 2b 30 36 64 29 2c 20 00        fdps (%+06d), .

00000560 <PM_INFO_PART_L2P1B>:
     560:	41 7a 3d 25 2b 30 35 2e 33 66 67 20 28 25 2b 30     Az=%+05.3fg (%+0
     570:	36 64 29 09 20 09 00                                6d). ..

00000577 <PM_INFO_PART_L2P1A>:
     577:	09 41 78 3d 25 2b 30 35 2e 33 66 67 20 28 25 2b     .Ax=%+05.3fg (%+
     587:	30 36 64 29 2c 20 41 79 3d 25 2b 30 35 2e 33 66     06d), Ay=%+05.3f
     597:	67 20 28 25 2b 30 36 64 29 2c 20 00                 g (%+06d), .

000005a3 <PM_INFO_PART_L1P3>:
     5a3:	48 79 67 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e     Hygro_Temp=%+06.
     5b3:	32 66 43 2c 20 48 79 67 72 6f 5f 52 65 6c 48 3d     2fC, Hygro_RelH=
     5c3:	25 30 35 2e 32 66 25 25 0d 0a 00                    %05.2f%%...

000005ce <PM_INFO_PART_L1P2>:
     5ce:	42 61 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e 32     Baro_Temp=%+06.2
     5de:	66 43 2c 20 42 61 72 6f 5f 50 3d 25 37 2e 32 66     fC, Baro_P=%7.2f
     5ee:	68 50 61 09 20 09 00                                hPa. ..

000005f5 <PM_INFO_PART_L1P1C>:
     5f5:	6d 50 5f 54 65 6d 70 3d 25 2b 30 36 2e 32 66 43     mP_Temp=%+06.2fC
     605:	09 20 09 00                                         . ..

00000609 <PM_INFO_PART_L1P1B>:
     609:	55 61 64 63 34 3d 25 34 64 20 6d 56 2c 20 55 61     Uadc4=%4d mV, Ua
     619:	64 63 35 3d 25 34 64 20 6d 56 2c 20 55 73 69 6c     dc5=%4d mV, Usil
     629:	3d 25 34 64 20 6d 56 2c 20 00                       =%4d mV, .

00000633 <PM_INFO_PART_L1P1A>:
     633:	54 69 6d 65 20 3d 20 25 30 36 6c 64 3a 20 55 76     Time = %06ld: Uv
     643:	63 6f 3d 25 34 64 20 6d 56 2c 20 55 35 76 3d 25     co=%4d mV, U5v=%
     653:	34 64 20 6d 56 2c 20 55 62 61 74 3d 25 34 64 20     4d mV, Ubat=%4d 
     663:	6d 56 2c 20 00                                      mV, .

00000668 <PM_USBINIT_HEADER_4>:
     668:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     678:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0d     ===============.
     688:	0a 0d 0a 00                                         ....

0000068c <PM_USBINIT_HEADER_3>:
     68c:	46 69 6e 64 4d 65 53 41 54 20 2d 20 55 53 42 20     FindMeSAT - USB 
     69c:	6c 6f 67 67 69 6e 67 20 73 74 61 72 74 65 64 0d     logging started.
     6ac:	0a 00                                               ..

000006ae <PM_USBINIT_HEADER_2>:
     6ae:	25 63 0d 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     %c..============
     6be:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     6ce:	3d 3d 3d 0d 0a 00                                   ===...

000006d4 <PM_USBINIT_HEADER_1>:
     6d4:	0d 0a 0d 0a 0d 0a 00                                .......

000006db <PM_SINE_IP>:
     6db:	00 fd f9 f6 f3 f0 ec e9 e6 e3 df dc d9 d6 d2 cf     ................
     6eb:	00 fd fa f6 f3 f0 ed ea e6 e3 e0 dd da d7 d3 d0     ................
     6fb:	00 fd fa f7 f3 f0 ed ea e7 e4 e1 de da d7 d4 d1     ................
     70b:	00 fd fa f7 f4 f1 ee eb e7 e4 e1 de db d8 d5 d2     ................
     71b:	00 fd fa f7 f4 f1 ee eb e8 e5 e2 df dc d9 d6 d3     ................
     72b:	00 fd fa f7 f4 f1 ee eb e8 e6 e3 e0 dd da d7 d4     ................
     73b:	00 fd fa f7 f4 f2 ef ec e9 e6 e3 e0 dd db d8 d5     ................
     74b:	00 fd fa f8 f5 f2 ef ec e9 e7 e4 e1 de db d9 d6     ................
     75b:	00 fd fa f8 f5 f2 ef ed ea e7 e4 e2 df dc d9 d7     ................
     76b:	00 fd fb f8 f5 f3 f0 ed ea e8 e5 e2 e0 dd da d8     ................
     77b:	00 fd fb f8 f5 f3 f0 ee eb e8 e6 e3 e0 de db d9     ................
     78b:	00 fd fb f8 f6 f3 f1 ee eb e9 e6 e4 e1 df dc da     ................
     79b:	00 fd fb f8 f6 f3 f1 ee ec e9 e7 e4 e2 df dd da     ................
     7ab:	00 fe fb f9 f6 f4 f1 ef ec ea e8 e5 e3 e0 de db     ................
     7bb:	00 fe fb f9 f6 f4 f2 ef ed eb e8 e6 e3 e1 df dc     ................
     7cb:	00 fe fb f9 f7 f4 f2 f0 ed eb e9 e7 e4 e2 e0 dd     ................
     7db:	00 fe fb f9 f7 f5 f2 f0 ee ec e9 e7 e5 e3 e0 de     ................
     7eb:	00 fe fc f9 f7 f5 f3 f1 ee ec ea e8 e6 e4 e1 df     ................
     7fb:	00 fe fc fa f7 f5 f3 f1 ef ed eb e9 e6 e4 e2 e0     ................
     80b:	00 fe fc fa f8 f6 f4 f2 ef ed eb e9 e7 e5 e3 e1     ................
     81b:	00 fe fc fa f8 f6 f4 f2 f0 ee ec ea e8 e6 e4 e2     ................
     82b:	00 fe fc fa f8 f6 f4 f2 f0 ef ed eb e9 e7 e5 e3     ................
     83b:	00 fe fc fa f8 f7 f5 f3 f1 ef ed eb e9 e8 e6 e4     ................
     84b:	00 fe fc fb f9 f7 f5 f3 f1 f0 ee ec ea e8 e7 e5     ................
     85b:	00 fe fc fb f9 f7 f5 f4 f2 f0 ee ed eb e9 e7 e6     ................
     86b:	00 fe fd fb f9 f8 f6 f4 f2 f1 ef ed ec ea e8 e7     ................
     87b:	00 fe fd fb f9 f8 f6 f5 f3 f1 f0 ee ec eb e9 e8     ................
     88b:	00 fe fd fb fa f8 f7 f5 f3 f2 f0 ef ed ec ea e9     ................
     89b:	00 fe fd fb fa f8 f7 f5 f4 f2 f1 ef ee ec eb e9     ................
     8ab:	00 ff fd fc fa f9 f7 f6 f4 f3 f2 f0 ef ed ec ea     ................
     8bb:	00 ff fd fc fa f9 f8 f6 f5 f4 f2 f1 ef ee ed eb     ................
     8cb:	00 ff fd fc fb f9 f8 f7 f5 f4 f3 f2 f0 ef ee ec     ................
     8db:	00 ff fd fc fb fa f8 f7 f6 f5 f3 f2 f1 f0 ee ed     ................
     8eb:	00 ff fe fc fb fa f9 f8 f6 f5 f4 f3 f2 f1 ef ee     ................
     8fb:	00 ff fe fd fb fa f9 f8 f7 f6 f5 f4 f2 f1 f0 ef     ................
     90b:	00 ff fe fd fc fb fa f9 f7 f6 f5 f4 f3 f2 f1 f0     ................
     91b:	00 ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1     ................
     92b:	00 ff fe fd fc fb fa f9 f8 f8 f7 f6 f5 f4 f3 f2     ................
     93b:	00 ff fe fd fc fc fb fa f9 f8 f7 f6 f5 f5 f4 f3     ................
     94b:	00 ff fe fe fd fc fb fa f9 f9 f8 f7 f6 f5 f5 f4     ................
     95b:	00 ff fe fe fd fc fb fb fa f9 f8 f8 f7 f6 f5 f5     ................
     96b:	00 ff ff fe fd fd fc fb fa fa f9 f8 f8 f7 f6 f6     ................
     97b:	00 ff ff fe fd fd fc fc fb fa fa f9 f8 f8 f7 f7     ................
     98b:	00 ff ff fe fe fd fd fc fb fb fa fa f9 f9 f8 f8     ................
     99b:	00 ff ff fe fe fd fd fc fc fb fb fa fa f9 f9 f8     ................
     9ab:	00 00 ff ff fe fe fd fd fc fc fc fb fb fa fa f9     ................
     9bb:	00 00 ff ff fe fe fe fd fd fd fc fc fb fb fb fa     ................
     9cb:	00 00 ff ff ff fe fe fe fd fd fd fd fc fc fc fb     ................
     9db:	00 00 ff ff ff ff fe fe fe fe fd fd fd fd fc fc     ................
     9eb:	00 00 00 ff ff ff ff ff fe fe fe fe fe fe fd fd     ................
     9fb:	00 00 00 00 ff ff ff ff ff ff ff ff fe fe fe fe     ................
	...
     a13:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     a33:	01 01 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
     a43:	01 01 01 01 02 02 02 02 00 00 00 01 01 01 01 01     ................
     a53:	02 02 02 02 02 02 03 03 00 00 01 01 01 01 02 02     ................
     a63:	02 02 03 03 03 03 04 04 00 00 01 01 01 02 02 02     ................
     a73:	03 03 03 03 04 04 04 05 00 00 01 01 02 02 02 03     ................
     a83:	03 03 04 04 05 05 05 06 00 00 01 01 02 02 03 03     ................
     a93:	04 04 04 05 05 06 06 07 00 01 01 02 02 03 03 04     ................
     aa3:	04 05 05 06 06 07 07 08 00 01 01 02 02 03 03 04     ................
     ab3:	05 05 06 06 07 07 08 08 00 01 01 02 03 03 04 04     ................
     ac3:	05 06 06 07 08 08 09 09 00 01 01 02 03 03 04 05     ................
     ad3:	06 06 07 08 08 09 0a 0a 00 01 02 02 03 04 05 05     ................
     ae3:	06 07 08 08 09 0a 0b 0b 00 01 02 02 03 04 05 06     ................
     af3:	07 07 08 09 0a 0b 0b 0c 00 01 02 03 04 04 05 06     ................
     b03:	07 08 09 0a 0b 0b 0c 0d 00 01 02 03 04 05 06 07     ................
     b13:	08 08 09 0a 0b 0c 0d 0e 00 01 02 03 04 05 06 07     ................
     b23:	08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 04 05 06 07     ................
     b33:	09 0a 0b 0c 0d 0e 0f 10 00 01 02 03 05 06 07 08     ................
     b43:	09 0a 0b 0c 0e 0f 10 11 00 01 02 04 05 06 07 08     ................
     b53:	0a 0b 0c 0d 0e 0f 11 12 00 01 03 04 05 06 08 09     ................
     b63:	0a 0b 0d 0e 0f 10 12 13 00 01 03 04 05 07 08 09     ................
     b73:	0b 0c 0d 0e 10 11 12 14 00 01 03 04 06 07 08 0a     ................
     b83:	0b 0c 0e 0f 11 12 13 15 00 01 03 04 06 07 09 0a     ................
     b93:	0c 0d 0e 10 11 13 14 16 00 02 03 05 06 08 09 0b     ................
     ba3:	0c 0e 0f 11 12 14 15 17 00 02 03 05 06 08 09 0b     ................
     bb3:	0d 0e 10 11 13 14 16 17 00 02 03 05 07 08 0a 0b     ................
     bc3:	0d 0f 10 12 14 15 17 18 00 02 03 05 07 08 0a 0c     ................
     bd3:	0e 0f 11 13 14 16 18 19 00 02 04 05 07 09 0b 0c     ................
     be3:	0e 10 12 13 15 17 19 1a 00 02 04 05 07 09 0b 0d     ................
     bf3:	0f 10 12 14 16 18 19 1b 00 02 04 06 08 09 0b 0d     ................
     c03:	0f 11 13 15 17 18 1a 1c 00 02 04 06 08 0a 0c 0e     ................
     c13:	10 11 13 15 17 19 1b 1d 00 02 04 06 08 0a 0c 0e     ................
     c23:	10 12 14 16 18 1a 1c 1e 00 02 04 06 08 0a 0c 0e     ................
     c33:	11 13 15 17 19 1b 1d 1f 00 02 04 06 09 0b 0d 0f     ................
     c43:	11 13 15 17 1a 1c 1e 20 00 02 04 07 09 0b 0d 0f     ....... ........
     c53:	12 14 16 18 1a 1c 1f 21 00 02 05 07 09 0b 0e 10     .......!........
     c63:	12 14 17 19 1b 1d 20 22 00 02 05 07 09 0c 0e 10     ...... "........
     c73:	13 15 17 19 1c 1e 20 23 00 02 05 07 0a 0c 0e 11     ...... #........
     c83:	13 15 18 1a 1d 1f 21 24 00 02 05 07 0a 0c 0f 11     ......!$........
     c93:	14 16 18 1b 1d 20 22 25 00 03 05 08 0a 0d 0f 12     ..... "%........
     ca3:	14 17 19 1c 1e 21 23 26 00 03 05 08 0a 0d 0f 12     .....!#&........
     cb3:	15 17 1a 1c 1f 21 24 26 00 03 05 08 0b 0d 10 12     .....!$&........
     cc3:	15 18 1a 1d 20 22 25 27 00 03 05 08 0b 0d 10 13     .... "%'........
     cd3:	16 18 1b 1e 20 23 26 28 00 03 06 08 0b 0e 11 13     .... #&(........
     ce3:	16 19 1c 1e 21 24 27 29 00 03 06 08 0b 0e 11 14     ....!$')........
     cf3:	17 19 1c 1f 22 25 27 2a 00 03 06 09 0c 0e 11 14     ...."%'*........
     d03:	17 1a 1d 20 23 25 28 2b 00 03 06 09 0c 0f 12 15     ... #%(+........
     d13:	18 1a 1d 20 23 26 29 2c 00 03 06 09 0c 0f 12 15     ... #&),........
     d23:	18 1b 1e 21 24 27 2a 2d 00 03 06 09 0c 0f 12 15     ...!$'*-........
     d33:	19 1c 1f 22 25 28 2b 2e 00 03 06 09 0d 10 13 16     ..."%(+.........
     d43:	19 1c 1f 22 26 29 2c 2f 00 03 06 0a 0d 10 13 16     ..."&),/........
     d53:	1a 1d 20 23 26 29 2d 30                             .. #&)-0

00000d5b <PM_SINE>:
     d5b:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     d6b:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     d7b:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     d8b:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     d9b:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     dab:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     dbb:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     dcb:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     ddb:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     deb:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     dfb:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     e0b:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     e1b:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     e2b:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     e3b:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     e4b:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     e5b:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     e6b:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     e7b:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     e8b:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     e9b:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     eab:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     ebb:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     ecb:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     edb:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     eeb:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     efb:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     f0b:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     f1b:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     f2b:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     f3b:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     f4b:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     f5b:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     f6b:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     f7b:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     f8b:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     f9b:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
     fab:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
     fbb:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
     fcb:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
     fdb:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
     feb:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
     ffb:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
    100b:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
    101b:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
    102b:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
    103b:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
    104b:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
    105b:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
    106b:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
    107b:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
    108b:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
    109b:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
    10ab:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
    10bb:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
    10cb:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
    10db:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
    10eb:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
    10fb:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
    110b:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
    111b:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
    112b:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
    113b:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
    114b:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
    115b:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
    116b:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
    117b:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
    118b:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
    119b:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
    11ab:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
    11bb:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
    11cb:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
    11db:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
    11eb:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
    11fb:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
    120b:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
    121b:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
    122b:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
    123b:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
    124b:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
    125b:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
    126b:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
    127b:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
    128b:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
    129b:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
    12ab:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
    12bb:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
    12cb:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
    12db:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
    12eb:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
    12fb:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
    130b:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
    131b:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
    132b:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
    133b:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
    134b:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
    135b:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
    136b:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
    137b:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
    138b:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
    139b:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
    13ab:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
    13bb:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
    13cb:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
    13db:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
    13eb:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
    13fb:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
    140b:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
    141b:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
    142b:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
    143b:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
    144b:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
    145b:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
    146b:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
    147b:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
    148b:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
    149b:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
    14ab:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
    14bb:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
    14cb:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
    14db:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
    14eb:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
    14fb:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
    150b:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
    151b:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
    152b:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
    153b:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
    154b:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
    155b:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
    156b:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
    157b:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
    158b:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
    159b:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
    15ab:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
    15bb:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
    15cb:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
    15db:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
    15eb:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
    15fb:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
    160b:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
    161b:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
    162b:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
    163b:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
    164b:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
    165b:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
    166b:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
    167b:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
    168b:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
    169b:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
    16ab:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
    16bb:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
    16cb:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
    16db:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
    16eb:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
    16fb:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
    170b:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
    171b:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
    172b:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
    173b:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
    174b:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
    175b:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
    176b:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
    177b:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
    178b:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
    179b:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
    17ab:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
    17bb:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
    17cb:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
    17db:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
    17eb:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
    17fb:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
    180b:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
    181b:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
    182b:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
    183b:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
    184b:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
    185b:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
    186b:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
    187b:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
    188b:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
    189b:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
    18ab:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
    18bb:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
    18cb:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
    18db:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
    18eb:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
    18fb:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
    190b:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
    191b:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
    192b:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
    193b:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
    194b:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
    195b:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
    196b:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
    197b:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
    198b:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
    199b:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
    19ab:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
    19bb:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
    19cb:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
    19db:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
    19eb:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
    19fb:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
    1a0b:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
    1a1b:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
    1a2b:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
    1a3b:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
    1a4b:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
    1a5b:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
    1a6b:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
    1a7b:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
    1a8b:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
    1a9b:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
    1aab:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
    1abb:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
    1acb:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
    1adb:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
    1aeb:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
    1afb:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
    1b0b:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
    1b1b:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
    1b2b:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
    1b3b:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1b4b:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1b5b:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    1b6b:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    1b7b:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    1b8b:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    1b9b:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    1bab:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    1bbb:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1bcb:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1bdb:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    1beb:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    1bfb:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    1c0b:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    1c1b:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    1c2b:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    1c3b:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1c4b:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1c5b:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    1c6b:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    1c7b:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    1c8b:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    1c9b:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    1cab:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    1cbb:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1ccb:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1cdb:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    1ceb:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    1cfb:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    1d0b:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    1d1b:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    1d2b:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    1d3b:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1d4b:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1d5b:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    1d6b:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    1d7b:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    1d8b:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    1d9b:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    1dab:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    1dbb:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1dcb:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1ddb:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    1deb:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    1dfb:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    1e0b:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    1e1b:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    1e2b:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    1e3b:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1e4b:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1e5b:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    1e6b:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    1e7b:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    1e8b:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    1e9b:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    1eab:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    1ebb:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1ecb:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1edb:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    1eeb:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    1efb:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    1f0b:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    1f1b:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    1f2b:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    1f3b:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1f4b:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1f5b:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1f6b:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1f7b:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1f8b:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1f9b:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    1fab:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    1fbb:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    1fcb:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    1fdb:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    1feb:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    1ffb:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    200b:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    201b:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    202b:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    203b:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    204b:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    205b:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    206b:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    207b:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    208b:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    209b:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    20ab:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    20bb:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    20cb:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    20db:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    20eb:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    20fb:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    210b:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    211b:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    212b:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    213b:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    214b:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    215b:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    216b:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    217b:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    218b:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    219b:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    21ab:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    21bb:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    21cb:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    21db:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    21eb:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    21fb:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    220b:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    221b:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    222b:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    223b:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    224b:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    225b:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    226b:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    227b:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    228b:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    229b:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    22ab:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    22bb:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    22cb:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    22db:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    22eb:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    22fb:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    230b:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    231b:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    232b:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    233b:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    234b:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    235b:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    236b:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    237b:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    238b:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    239b:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    23ab:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    23bb:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    23cb:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    23db:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    23eb:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    23fb:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    240b:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    241b:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    242b:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    243b:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    244b:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    245b:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    246b:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    247b:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    248b:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    249b:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    24ab:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    24bb:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    24cb:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    24db:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    24eb:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    24fb:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    250b:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    251b:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    252b:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    253b:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    254b:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    255b:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    256b:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    257b:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    258b:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    259b:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    25ab:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    25bb:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    25cb:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    25db:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    25eb:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    25fb:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    260b:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    261b:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    262b:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    263b:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    264b:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    265b:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    266b:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    267b:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    268b:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    269b:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    26ab:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    26bb:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    26cb:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    26db:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    26eb:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    26fb:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    270b:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    271b:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    272b:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    273b:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    274b:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    275b:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    276b:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    277b:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    278b:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    279b:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    27ab:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    27bb:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    27cb:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    27db:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    27eb:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    27fb:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    280b:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    281b:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    282b:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    283b:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    284b:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    285b:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    286b:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    287b:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    288b:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    289b:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    28ab:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    28bb:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    28cb:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    28db:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    28eb:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    28fb:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    290b:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    291b:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    292b:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    293b:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    294b:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    295b:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    296b:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    297b:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    298b:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    299b:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    29ab:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    29bb:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    29cb:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    29db:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    29eb:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    29fb:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    2a0b:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    2a1b:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    2a2b:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    2a3b:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    2a4b:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    2a5b:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    2a6b:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    2a7b:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    2a8b:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    2a9b:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    2aab:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    2abb:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    2acb:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    2adb:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    2aeb:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    2afb:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    2b0b:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    2b1b:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    2b2b:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    2b3b:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2b4b:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2b5b:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    2b6b:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    2b7b:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    2b8b:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    2b9b:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    2bab:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    2bbb:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2bcb:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2bdb:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    2beb:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    2bfb:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    2c0b:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    2c1b:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    2c2b:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    2c3b:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2c4b:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2c5b:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    2c6b:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    2c7b:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    2c8b:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    2c9b:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    2cab:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    2cbb:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2ccb:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2cdb:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    2ceb:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    2cfb:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    2d0b:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    2d1b:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    2d2b:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    2d3b:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2d4b:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002d5b <PM_UNKNOWN_01>:
    2d5b:	0d 0a 3f 3f 3f 20 75 6e 6b 6e 6f 77 6e 20 63 6f     ..??? unknown co
    2d6b:	6d 6d 61 6e 64 20 2d 20 66 6f 72 20 61 73 73 69     mmand - for assi
    2d7b:	73 74 61 6e 63 65 20 65 6e 74 65 72 20 20 68 65     stance enter  he
    2d8b:	6c 70 0d 0a 00                                      lp...

00002d90 <PM_IP_CMD_reset>:
    2d90:	72 65 73 65 74 3d 00                                reset=.

00002d97 <PM_IP_CMD_pt>:
    2d97:	70 74 3d 00                                         pt=.

00002d9b <PM_IP_CMD_kb>:
    2d9b:	6b 62 3d 00                                         kb=.

00002d9f <PM_IP_CMD_help>:
    2d9f:	68 65 6c 70 00                                      help.

00002da4 <PM_IP_CMD_info>:
    2da4:	69 6e 66 6f 3d 00                                   info=.

00002daa <PM_IP_CMD_eb>:
    2daa:	65 62 3d 00                                         eb=.

00002dae <PM_IP_CMD_dds>:
    2dae:	64 64 73 3d 00                                      dds=.

00002db3 <PM_IP_CMD_dac>:
    2db3:	64 61 63 3d 00                                      dac=.

00002db8 <PM_IP_CMD_bl>:
    2db8:	62 6c 3d 00                                         bl=.

00002dbc <PM_IP_CMD_bias>:
    2dbc:	62 69 61 73 3d 00                                   bias=.

00002dc2 <PM_IP_CMD_adc>:
    2dc2:	61 64 63 3d 00                                      adc=.

00002dc7 <PM_IP_CMD_CmdLine>:
    2dc7:	0d 0a 3e 20 00                                      ..> .

00002dcc <PM_IP_CMD_NewLine>:
    2dcc:	0d 0a 00                                            ...

00002dcf <PM_HELP_PT_2>:
    2dcf:	31 3a 20 74 75 72 6e 20 73 70 65 65 64 2c 20 32     1: turn speed, 2
    2ddf:	3a 20 76 61 72 69 6f 6d 65 74 65 72 0d 0a 00        : variometer...

00002dee <PM_HELP_PT_1>:
    2dee:	70 74 3d 09 09 30 3a 20 70 69 74 63 68 20 74 6f     pt=..0: pitch to
    2dfe:	6e 65 20 4f 46 46 2c 20 00                          ne OFF, .

00002e07 <PM_HELP_KB_1>:
    2e07:	6b 62 3d 09 09 30 3a 20 6b 65 79 20 62 65 65 70     kb=..0: key beep
    2e17:	20 4f 46 46 2c 20 31 3a 20 4f 4e 0d 0a 00            OFF, 1: ON...

00002e25 <PM_HELP_INFO_1>:
    2e25:	69 6e 66 6f 3d 09 09 30 3a 20 4f 46 46 2c 20 31     info=..0: OFF, 1
    2e35:	3a 20 4f 4e 0d 0a 00                                : ON...

00002e3c <PM_HELP_HELP_2>:
    2e3c:	61 62 6f 75 74 20 61 6c 6c 20 61 76 61 69 6c 61     about all availa
    2e4c:	62 6c 65 20 63 6f 6d 6d 61 6e 64 73 0d 0a 00        ble commands...

00002e5b <PM_HELP_HELP_1>:
    2e5b:	68 65 6c 70 09 09 54 68 69 73 20 69 6e 66 6f 72     help..This infor
    2e6b:	6d 61 74 69 6f 6e 20 70 61 67 65 20 00              mation page .

00002e78 <PM_HELP_EB_1>:
    2e78:	65 62 3d 09 09 30 3a 20 65 72 72 6f 72 20 62 65     eb=..0: error be
    2e88:	65 70 20 4f 46 46 2c 20 31 3a 20 4f 4e 0d 0a 00     ep OFF, 1: ON...

00002e98 <PM_HELP_DDS_3>:
    2e98:	63 3a 20 73 74 61 72 74 69 6e 67 20 70 68 61 73     c: starting phas
    2ea8:	65 20 6f 66 20 44 44 53 31 2d 44 44 53 30 20 64     e of DDS1-DDS0 d
    2eb8:	65 67 0d 0a 00                                      eg...

00002ebd <PM_HELP_DDS_2>:
    2ebd:	62 3a 20 44 44 53 31 20 6d 48 7a 2c 20 00           b: DDS1 mHz, .

00002ecb <PM_HELP_DDS_1>:
    2ecb:	64 64 73 3d 61 2c 62 2c 63 09 61 3a 20 44 44 53     dds=a,b,c.a: DDS
    2edb:	30 20 66 72 65 71 75 65 6e 63 79 20 6d 48 7a 2c     0 frequency mHz,
    2eeb:	20 00                                                .

00002eed <PM_HELP_DAC_2>:
    2eed:	31 3a 20 74 75 72 6e 20 44 41 43 42 20 6f 6e 0d     1: turn DACB on.
    2efd:	0a 00                                               ..

00002eff <PM_HELP_DAC_1>:
    2eff:	64 61 63 3d 09 09 30 3a 20 74 75 72 6e 20 44 41     dac=..0: turn DA
    2f0f:	43 42 20 6f 66 66 2c 20 00                          CB off, .

00002f18 <PM_HELP_BL_2>:
    2f18:	2d 31 3a 20 41 55 54 4f 2c 20 2d 32 3a 20 53 50     -1: AUTO, -2: SP
    2f28:	45 43 49 41 4c 0d 0a 00                             ECIAL...

00002f30 <PM_HELP_BL_1>:
    2f30:	62 6c 3d 09 09 30 2d 32 35 35 3a 20 62 61 63 6b     bl=..0-255: back
    2f40:	6c 69 67 68 74 20 50 57 4d 2c 20 00                 light PWM, .

00002f4c <PM_HELP_BIAS_2>:
    2f4c:	66 6f 72 20 4c 43 44 20 63 6f 6e 74 72 61 73 74     for LCD contrast
    2f5c:	0d 0a 00                                            ...

00002f5f <PM_HELP_BIAS_1>:
    2f5f:	62 69 61 73 3d 09 09 30 2d 36 33 3a 20 62 69 61     bias=..0-63: bia
    2f6f:	73 20 76 6f 6c 74 61 67 65 20 00                    s voltage .

00002f7a <PM_HELP_ADC_2>:
    2f7a:	31 3a 20 74 75 72 6e 20 41 44 43 41 20 61 6e 64     1: turn ADCA and
    2f8a:	20 41 44 43 42 20 6f 6e 0d 0a 00                     ADCB on...

00002f95 <PM_HELP_ADC_1>:
    2f95:	61 64 63 3d 09 09 30 3a 20 74 75 72 6e 20 41 44     adc=..0: turn AD
    2fa5:	43 41 20 61 6e 64 20 41 44 43 42 20 6f 66 66 2c     CA and ADCB off,
    2fb5:	20 00                                                .

00002fb7 <PM_HELP_HDR_2>:
    2fb7:	2a 20 43 4f 4d 4d 41 4e 44 53 20 2a 0d 0a 2a 2a     * COMMANDS *..**
    2fc7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0d 0a 0d 0a 00        **********.....

00002fd6 <PM_HELP_HDR_1>:
    2fd6:	0d 0a 0d 0a 0d 0a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ......**********
    2fe6:	2a 2a 0d 0a 00                                      **...

00002feb <PM_FORMAT_5F3>:
    2feb:	25 35 2e 33 66 00                                   %5.3f.

00002ff1 <PM_FORMAT_4F1>:
    2ff1:	25 34 2e 31 66 00                                   %4.1f.

00002ff7 <PM_FORMAT_07F2>:
    2ff7:	25 30 37 2e 32 66 00                                %07.2f.

00002ffe <PM_FORMAT_05F2>:
    2ffe:	25 30 35 2e 32 66 00                                %05.2f.

00003005 <PM_TWI1_INIT_ONBOARD_01>:
    3005:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d 0a 0d 0a 00     -----------.....

00003015 <PM_TWI1_INIT_ONBOARD_BARO_OK>:
    3015:	49 6e 69 74 3a 20 42 61 72 6f 20 20 73 75 63 63     Init: Baro  succ
    3025:	65 73 73 00                                         ess.

00003029 <PM_TWI1_INIT_BARO_06>:
    3029:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    3039:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    3049:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

0000305a <PM_TWI1_INIT_BARO_05>:
    305a:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    306a:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

00003078 <PM_TWI1_INIT_BARO_04>:
    3078:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 42 41     TWI-onboard:  BA
    3088:	44 20 72 65 61 64 69 6e 67 20 50 52 4f 4d 20 61     D reading PROM a
    3098:	64 64 72 65 73 73 20 25 64 2e 20 28 73 63 3d 25     ddress %d. (sc=%
    30a8:	64 29 0d 0a 00                                      d)...

000030ad <PM_TWI1_INIT_BARO_03>:
    30ad:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 42 61 72     TWI-onboard: Bar
    30bd:	6f 20 4d 53 35 36 30 37 30 32 42 41 30 33 2d 35     o MS560702BA03-5
    30cd:	30 20 2d 20 20 20 20 20 73 65 72 69 61 6c 23 3a     0 -     serial#:
    30dd:	20 25 64 0d 0a 00                                    %d...

000030e3 <PM_TWI1_INIT_BARO_02>:
    30e3:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 42 41     TWI-onboard:  BA
    30f3:	44 20 72 65 61 64 69 6e 67 20 73 65 72 69 61 6c     D reading serial
    3103:	2f 43 52 43 20 77 6f 72 64 2e 20 28 73 63 3d 25     /CRC word. (sc=%
    3113:	64 29 0d 0a 00                                      d)...

00003118 <PM_TWI1_INIT_BARO_01>:
    3118:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 42     ..TWI-onboard: B
    3128:	61 72 6f 20 4d 53 35 36 30 37 30 32 42 41 30 33     aro MS560702BA03
    3138:	2d 35 30 20 2d 20 49 32 43 20 61 64 64 72 65 73     -50 - I2C addres
    3148:	73 3a 20 30 78 25 30 32 58 0d 0a 00                 s: 0x%02X...

00003154 <PM_TWI1_INIT_ONBOARD_GYRO_OK>:
    3154:	49 6e 69 74 3a 20 47 79 72 6f 20 20 73 75 63 63     Init: Gyro  succ
    3164:	65 73 73 00                                         ess.

00003168 <PM_TWI1_INIT_GYRO_05>:
    3168:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    3178:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    3188:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

00003199 <PM_TWI1_INIT_GYRO_04>:
    3199:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    31a9:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

000031b7 <PM_TWI1_INIT_GYRO_03>:
    31b7:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47 79 72     TWI-onboard: Gyr
    31c7:	6f 20 4d 50 55 2d 39 32 35 30 20 2d 20 20 20 20     o MPU-9250 -    
    31d7:	20 76 65 72 73 69 6f 6e 3a 20 30 78 25 30 32 58      version: 0x%02X
    31e7:	2c 20 30 78 25 30 32 58 0d 0a 00                    , 0x%02X...

000031f2 <PM_TWI1_INIT_GYRO_02>:
    31f2:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47 79 72     TWI-onboard: Gyr
    3202:	6f 20 4d 50 55 2d 39 32 35 30 20 20 20 2d 20 20     o MPU-9250   -  
    3212:	20 27 72 65 73 65 74 20 31 27 20 62 61 64 20 72      'reset 1' bad r
    3222:	65 73 70 6f 6e 73 65 0d 0a 00                       esponse...

0000322c <PM_TWI1_INIT_GYRO_01>:
    322c:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47     ..TWI-onboard: G
    323c:	79 72 6f 20 4d 50 55 2d 39 32 35 30 20 2d 20 49     yro MPU-9250 - I
    324c:	32 43 20 61 64 64 72 65 73 73 3a 20 30 78 25 30     2C address: 0x%0
    325c:	32 58 2c 20 30 78 25 30 32 58 0d 0a 00              2X, 0x%02X...

00003269 <PM_TWI1_INIT_ONBOARD_HYGRO_OK>:
    3269:	49 6e 69 74 3a 20 48 79 67 72 6f 20 73 75 63 63     Init: Hygro succ
    3279:	65 73 73 00                                         ess.

0000327d <PM_TWI1_INIT_HYGRO_05>:
    327d:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    328d:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    329d:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

000032ae <PM_TWI1_INIT_HYGRO_04>:
    32ae:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    32be:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

000032cc <PM_TWI1_INIT_HYGRO_03>:
    32cc:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48 79 67     TWI-onboard: Hyg
    32dc:	72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d 20 20     ro SHT31-DIS -  
    32ec:	20 73 74 61 74 75 73 3a 20 30 78 25 30 32 58 0d      status: 0x%02X.
    32fc:	0a 00                                               ..

000032fe <PM_TWI1_INIT_HYGRO_02>:
    32fe:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48 79 67     TWI-onboard: Hyg
    330e:	72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d 20 20     ro SHT31-DIS -  
    331e:	20 61 64 64 72 65 73 73 20 4e 41 43 4b 20 2f 20      address NACK / 
    332e:	27 62 72 65 61 6b 27 20 62 61 64 20 72 65 73 70     'break' bad resp
    333e:	6f 6e 73 65 0d 0a 00                                onse...

00003345 <PM_TWI1_INIT_HYGRO_01>:
    3345:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48     ..TWI-onboard: H
    3355:	79 67 72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d     ygro SHT31-DIS -
    3365:	20 49 32 43 20 61 64 64 72 65 73 73 3a 20 30 78      I2C address: 0x
    3375:	25 30 32 58 0d 0a 00                                %02X...

0000337c <__ctors_end>:
    337c:	11 24       	eor	r1, r1
    337e:	1f be       	out	0x3f, r1	; 63
    3380:	cf ef       	ldi	r28, 0xFF	; 255
    3382:	cd bf       	out	0x3d, r28	; 61
    3384:	df e5       	ldi	r29, 0x5F	; 95
    3386:	de bf       	out	0x3e, r29	; 62
    3388:	00 e0       	ldi	r16, 0x00	; 0
    338a:	0c bf       	out	0x3c, r16	; 60

0000338c <__do_copy_data>:
    338c:	11 e2       	ldi	r17, 0x21	; 33
    338e:	a0 e0       	ldi	r26, 0x00	; 0
    3390:	b0 e2       	ldi	r27, 0x20	; 32
    3392:	ea e3       	ldi	r30, 0x3A	; 58
    3394:	f2 e0       	ldi	r31, 0x02	; 2
    3396:	01 e0       	ldi	r16, 0x01	; 1
    3398:	0b bf       	out	0x3b, r16	; 59
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <__do_copy_data+0x14>
    339c:	07 90       	elpm	r0, Z+
    339e:	0d 92       	st	X+, r0
    33a0:	a0 3d       	cpi	r26, 0xD0	; 208
    33a2:	b1 07       	cpc	r27, r17
    33a4:	d9 f7       	brne	.-10     	; 0x339c <__do_copy_data+0x10>

000033a6 <__do_clear_bss>:
    33a6:	29 e2       	ldi	r18, 0x29	; 41
    33a8:	a0 ed       	ldi	r26, 0xD0	; 208
    33aa:	b1 e2       	ldi	r27, 0x21	; 33
    33ac:	01 c0       	rjmp	.+2      	; 0x33b0 <.do_clear_bss_start>

000033ae <.do_clear_bss_loop>:
    33ae:	1d 92       	st	X+, r1

000033b0 <.do_clear_bss_start>:
    33b0:	a3 37       	cpi	r26, 0x73	; 115
    33b2:	b2 07       	cpc	r27, r18
    33b4:	e1 f7       	brne	.-8      	; 0x33ae <.do_clear_bss_loop>
    33b6:	0e 94 26 68 	call	0xd04c	; 0xd04c <main>
    33ba:	0c 94 1b 81 	jmp	0x10236	; 0x10236 <_exit>

000033be <__bad_interrupt>:
    33be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000033c2 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    33c2:	ef 92       	push	r14
    33c4:	ff 92       	push	r15
    33c6:	0f 93       	push	r16
    33c8:	1f 93       	push	r17
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	7c 01       	movw	r14, r24
    33d0:	8b 01       	movw	r16, r22
    33d2:	ea 01       	movw	r28, r20
	while (len) {
    33d4:	20 97       	sbiw	r28, 0x00	; 0
    33d6:	39 f0       	breq	.+14     	; 0x33e6 <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    33d8:	f8 01       	movw	r30, r16
    33da:	61 91       	ld	r22, Z+
    33dc:	8f 01       	movw	r16, r30
    33de:	c7 01       	movw	r24, r14
    33e0:	0a d0       	rcall	.+20     	; 0x33f6 <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
    33e2:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    33e4:	c9 f7       	brne	.-14     	; 0x33d8 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	1f 91       	pop	r17
    33ee:	0f 91       	pop	r16
    33f0:	ff 90       	pop	r15
    33f2:	ef 90       	pop	r14
    33f4:	08 95       	ret

000033f6 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    33f6:	fc 01       	movw	r30, r24
    33f8:	91 81       	ldd	r25, Z+1	; 0x01
    33fa:	95 ff       	sbrs	r25, 5
    33fc:	fd cf       	rjmp	.-6      	; 0x33f8 <usart_putchar+0x2>
    33fe:	60 83       	st	Z, r22
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	08 95       	ret

00003406 <usart_getchar>:
    3406:	fc 01       	movw	r30, r24
    3408:	91 81       	ldd	r25, Z+1	; 0x01
    340a:	99 23       	and	r25, r25
    340c:	ec f7       	brge	.-6      	; 0x3408 <usart_getchar+0x2>
    340e:	80 81       	ld	r24, Z
    3410:	08 95       	ret

00003412 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    3412:	4f 92       	push	r4
    3414:	5f 92       	push	r5
    3416:	6f 92       	push	r6
    3418:	7f 92       	push	r7
    341a:	8f 92       	push	r8
    341c:	9f 92       	push	r9
    341e:	af 92       	push	r10
    3420:	bf 92       	push	r11
    3422:	ef 92       	push	r14
    3424:	ff 92       	push	r15
    3426:	0f 93       	push	r16
    3428:	1f 93       	push	r17
    342a:	cf 93       	push	r28
    342c:	7c 01       	movw	r14, r24
    342e:	4a 01       	movw	r8, r20
    3430:	5b 01       	movw	r10, r22
    3432:	28 01       	movw	r4, r16
    3434:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    3436:	fc 01       	movw	r30, r24
    3438:	84 81       	ldd	r24, Z+4	; 0x04
    343a:	82 ff       	sbrs	r24, 2
    343c:	16 c0       	rjmp	.+44     	; 0x346a <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    343e:	d9 01       	movw	r26, r18
    3440:	c8 01       	movw	r24, r16
    3442:	68 94       	set
    3444:	12 f8       	bld	r1, 2
    3446:	b6 95       	lsr	r27
    3448:	a7 95       	ror	r26
    344a:	97 95       	ror	r25
    344c:	87 95       	ror	r24
    344e:	16 94       	lsr	r1
    3450:	d1 f7       	brne	.-12     	; 0x3446 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    3452:	b9 01       	movw	r22, r18
    3454:	a8 01       	movw	r20, r16
    3456:	03 2e       	mov	r0, r19
    3458:	36 e1       	ldi	r19, 0x16	; 22
    345a:	76 95       	lsr	r23
    345c:	67 95       	ror	r22
    345e:	57 95       	ror	r21
    3460:	47 95       	ror	r20
    3462:	3a 95       	dec	r19
    3464:	d1 f7       	brne	.-12     	; 0x345a <usart_set_baudrate+0x48>
    3466:	30 2d       	mov	r19, r0
    3468:	15 c0       	rjmp	.+42     	; 0x3494 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    346a:	d9 01       	movw	r26, r18
    346c:	c8 01       	movw	r24, r16
    346e:	68 94       	set
    3470:	13 f8       	bld	r1, 3
    3472:	b6 95       	lsr	r27
    3474:	a7 95       	ror	r26
    3476:	97 95       	ror	r25
    3478:	87 95       	ror	r24
    347a:	16 94       	lsr	r1
    347c:	d1 f7       	brne	.-12     	; 0x3472 <usart_set_baudrate+0x60>
		min_rate /= 2;
    347e:	b9 01       	movw	r22, r18
    3480:	a8 01       	movw	r20, r16
    3482:	03 2e       	mov	r0, r19
    3484:	37 e1       	ldi	r19, 0x17	; 23
    3486:	76 95       	lsr	r23
    3488:	67 95       	ror	r22
    348a:	57 95       	ror	r21
    348c:	47 95       	ror	r20
    348e:	3a 95       	dec	r19
    3490:	d1 f7       	brne	.-12     	; 0x3486 <usart_set_baudrate+0x74>
    3492:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    3494:	88 15       	cp	r24, r8
    3496:	99 05       	cpc	r25, r9
    3498:	aa 05       	cpc	r26, r10
    349a:	bb 05       	cpc	r27, r11
    349c:	08 f4       	brcc	.+2      	; 0x34a0 <usart_set_baudrate+0x8e>
    349e:	a6 c0       	rjmp	.+332    	; 0x35ec <usart_set_baudrate+0x1da>
    34a0:	84 16       	cp	r8, r20
    34a2:	95 06       	cpc	r9, r21
    34a4:	a6 06       	cpc	r10, r22
    34a6:	b7 06       	cpc	r11, r23
    34a8:	08 f4       	brcc	.+2      	; 0x34ac <usart_set_baudrate+0x9a>
    34aa:	a2 c0       	rjmp	.+324    	; 0x35f0 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    34ac:	f7 01       	movw	r30, r14
    34ae:	84 81       	ldd	r24, Z+4	; 0x04
    34b0:	82 fd       	sbrc	r24, 2
    34b2:	04 c0       	rjmp	.+8      	; 0x34bc <usart_set_baudrate+0xaa>
		baud *= 2;
    34b4:	88 0c       	add	r8, r8
    34b6:	99 1c       	adc	r9, r9
    34b8:	aa 1c       	adc	r10, r10
    34ba:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    34bc:	c3 01       	movw	r24, r6
    34be:	b2 01       	movw	r22, r4
    34c0:	a5 01       	movw	r20, r10
    34c2:	94 01       	movw	r18, r8
    34c4:	0e 94 b2 79 	call	0xf364	; 0xf364 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    34c8:	2f 3f       	cpi	r18, 0xFF	; 255
    34ca:	31 05       	cpc	r19, r1
    34cc:	41 05       	cpc	r20, r1
    34ce:	51 05       	cpc	r21, r1
    34d0:	08 f4       	brcc	.+2      	; 0x34d4 <usart_set_baudrate+0xc2>
    34d2:	90 c0       	rjmp	.+288    	; 0x35f4 <usart_set_baudrate+0x1e2>
    34d4:	8f ef       	ldi	r24, 0xFF	; 255
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	a0 e0       	ldi	r26, 0x00	; 0
    34da:	b0 e0       	ldi	r27, 0x00	; 0
    34dc:	c9 ef       	ldi	r28, 0xF9	; 249
    34de:	05 c0       	rjmp	.+10     	; 0x34ea <usart_set_baudrate+0xd8>
    34e0:	28 17       	cp	r18, r24
    34e2:	39 07       	cpc	r19, r25
    34e4:	4a 07       	cpc	r20, r26
    34e6:	5b 07       	cpc	r21, r27
    34e8:	58 f0       	brcs	.+22     	; 0x3500 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    34ea:	88 0f       	add	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	aa 1f       	adc	r26, r26
    34f0:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    34f2:	cd 3f       	cpi	r28, 0xFD	; 253
    34f4:	0c f4       	brge	.+2      	; 0x34f8 <usart_set_baudrate+0xe6>
			limit |= 1;
    34f6:	81 60       	ori	r24, 0x01	; 1
    34f8:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    34fa:	c7 30       	cpi	r28, 0x07	; 7
    34fc:	89 f7       	brne	.-30     	; 0x34e0 <usart_set_baudrate+0xce>
    34fe:	4f c0       	rjmp	.+158    	; 0x359e <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    3500:	cc 23       	and	r28, r28
    3502:	0c f0       	brlt	.+2      	; 0x3506 <usart_set_baudrate+0xf4>
    3504:	4c c0       	rjmp	.+152    	; 0x359e <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3506:	d5 01       	movw	r26, r10
    3508:	c4 01       	movw	r24, r8
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	aa 1f       	adc	r26, r26
    3510:	bb 1f       	adc	r27, r27
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	aa 1f       	adc	r26, r26
    3518:	bb 1f       	adc	r27, r27
    351a:	88 0f       	add	r24, r24
    351c:	99 1f       	adc	r25, r25
    351e:	aa 1f       	adc	r26, r26
    3520:	bb 1f       	adc	r27, r27
    3522:	48 1a       	sub	r4, r24
    3524:	59 0a       	sbc	r5, r25
    3526:	6a 0a       	sbc	r6, r26
    3528:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    352a:	ce 3f       	cpi	r28, 0xFE	; 254
    352c:	f4 f4       	brge	.+60     	; 0x356a <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    352e:	8d ef       	ldi	r24, 0xFD	; 253
    3530:	9f ef       	ldi	r25, 0xFF	; 255
    3532:	8c 1b       	sub	r24, r28
    3534:	91 09       	sbc	r25, r1
    3536:	c7 fd       	sbrc	r28, 7
    3538:	93 95       	inc	r25
    353a:	04 c0       	rjmp	.+8      	; 0x3544 <usart_set_baudrate+0x132>
    353c:	44 0c       	add	r4, r4
    353e:	55 1c       	adc	r5, r5
    3540:	66 1c       	adc	r6, r6
    3542:	77 1c       	adc	r7, r7
    3544:	8a 95       	dec	r24
    3546:	d2 f7       	brpl	.-12     	; 0x353c <usart_set_baudrate+0x12a>
    3548:	d5 01       	movw	r26, r10
    354a:	c4 01       	movw	r24, r8
    354c:	b6 95       	lsr	r27
    354e:	a7 95       	ror	r26
    3550:	97 95       	ror	r25
    3552:	87 95       	ror	r24
    3554:	bc 01       	movw	r22, r24
    3556:	cd 01       	movw	r24, r26
    3558:	64 0d       	add	r22, r4
    355a:	75 1d       	adc	r23, r5
    355c:	86 1d       	adc	r24, r6
    355e:	97 1d       	adc	r25, r7
    3560:	a5 01       	movw	r20, r10
    3562:	94 01       	movw	r18, r8
    3564:	0e 94 b2 79 	call	0xf364	; 0xf364 <__udivmodsi4>
    3568:	37 c0       	rjmp	.+110    	; 0x35d8 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    356a:	83 e0       	ldi	r24, 0x03	; 3
    356c:	8c 0f       	add	r24, r28
    356e:	a5 01       	movw	r20, r10
    3570:	94 01       	movw	r18, r8
    3572:	04 c0       	rjmp	.+8      	; 0x357c <usart_set_baudrate+0x16a>
    3574:	22 0f       	add	r18, r18
    3576:	33 1f       	adc	r19, r19
    3578:	44 1f       	adc	r20, r20
    357a:	55 1f       	adc	r21, r21
    357c:	8a 95       	dec	r24
    357e:	d2 f7       	brpl	.-12     	; 0x3574 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    3580:	da 01       	movw	r26, r20
    3582:	c9 01       	movw	r24, r18
    3584:	b6 95       	lsr	r27
    3586:	a7 95       	ror	r26
    3588:	97 95       	ror	r25
    358a:	87 95       	ror	r24
    358c:	bc 01       	movw	r22, r24
    358e:	cd 01       	movw	r24, r26
    3590:	64 0d       	add	r22, r4
    3592:	75 1d       	adc	r23, r5
    3594:	86 1d       	adc	r24, r6
    3596:	97 1d       	adc	r25, r7
    3598:	0e 94 b2 79 	call	0xf364	; 0xf364 <__udivmodsi4>
    359c:	1d c0       	rjmp	.+58     	; 0x35d8 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    359e:	83 e0       	ldi	r24, 0x03	; 3
    35a0:	8c 0f       	add	r24, r28
    35a2:	a5 01       	movw	r20, r10
    35a4:	94 01       	movw	r18, r8
    35a6:	04 c0       	rjmp	.+8      	; 0x35b0 <usart_set_baudrate+0x19e>
    35a8:	22 0f       	add	r18, r18
    35aa:	33 1f       	adc	r19, r19
    35ac:	44 1f       	adc	r20, r20
    35ae:	55 1f       	adc	r21, r21
    35b0:	8a 95       	dec	r24
    35b2:	d2 f7       	brpl	.-12     	; 0x35a8 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    35b4:	da 01       	movw	r26, r20
    35b6:	c9 01       	movw	r24, r18
    35b8:	b6 95       	lsr	r27
    35ba:	a7 95       	ror	r26
    35bc:	97 95       	ror	r25
    35be:	87 95       	ror	r24
    35c0:	bc 01       	movw	r22, r24
    35c2:	cd 01       	movw	r24, r26
    35c4:	64 0d       	add	r22, r4
    35c6:	75 1d       	adc	r23, r5
    35c8:	86 1d       	adc	r24, r6
    35ca:	97 1d       	adc	r25, r7
    35cc:	0e 94 b2 79 	call	0xf364	; 0xf364 <__udivmodsi4>
    35d0:	21 50       	subi	r18, 0x01	; 1
    35d2:	31 09       	sbc	r19, r1
    35d4:	41 09       	sbc	r20, r1
    35d6:	51 09       	sbc	r21, r1
	volatile uint8_t reg_b = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	volatile uint8_t reg_a = (uint8_t)div;
	volatile uint16_t pre  = ((uint16_t)reg_b) | ((uint16_t)reg_a << 8);
#endif

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    35d8:	83 2f       	mov	r24, r19
    35da:	8f 70       	andi	r24, 0x0F	; 15
    35dc:	c2 95       	swap	r28
    35de:	c0 7f       	andi	r28, 0xF0	; 240
    35e0:	c8 2b       	or	r28, r24
    35e2:	f7 01       	movw	r30, r14
    35e4:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    35e6:	26 83       	std	Z+6, r18	; 0x06

	return true;
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	18 c0       	rjmp	.+48     	; 0x361c <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	16 c0       	rjmp	.+44     	; 0x361c <usart_set_baudrate+0x20a>
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	14 c0       	rjmp	.+40     	; 0x361c <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    35f4:	d5 01       	movw	r26, r10
    35f6:	c4 01       	movw	r24, r8
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	aa 1f       	adc	r26, r26
    35fe:	bb 1f       	adc	r27, r27
    3600:	88 0f       	add	r24, r24
    3602:	99 1f       	adc	r25, r25
    3604:	aa 1f       	adc	r26, r26
    3606:	bb 1f       	adc	r27, r27
    3608:	88 0f       	add	r24, r24
    360a:	99 1f       	adc	r25, r25
    360c:	aa 1f       	adc	r26, r26
    360e:	bb 1f       	adc	r27, r27
    3610:	48 1a       	sub	r4, r24
    3612:	59 0a       	sbc	r5, r25
    3614:	6a 0a       	sbc	r6, r26
    3616:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3618:	c9 ef       	ldi	r28, 0xF9	; 249
    361a:	89 cf       	rjmp	.-238    	; 0x352e <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    361c:	cf 91       	pop	r28
    361e:	1f 91       	pop	r17
    3620:	0f 91       	pop	r16
    3622:	ff 90       	pop	r15
    3624:	ef 90       	pop	r14
    3626:	bf 90       	pop	r11
    3628:	af 90       	pop	r10
    362a:	9f 90       	pop	r9
    362c:	8f 90       	pop	r8
    362e:	7f 90       	pop	r7
    3630:	6f 90       	pop	r6
    3632:	5f 90       	pop	r5
    3634:	4f 90       	pop	r4
    3636:	08 95       	ret

00003638 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    3638:	0f 93       	push	r16
    363a:	1f 93       	push	r17
    363c:	cf 93       	push	r28
    363e:	df 93       	push	r29
    3640:	ec 01       	movw	r28, r24
    3642:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    3644:	00 97       	sbiw	r24, 0x00	; 0
    3646:	09 f4       	brne	.+2      	; 0x364a <usart_init_rs232+0x12>
    3648:	03 c1       	rjmp	.+518    	; 0x3850 <usart_init_rs232+0x218>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    364a:	80 3c       	cpi	r24, 0xC0	; 192
    364c:	91 05       	cpc	r25, r1
    364e:	29 f4       	brne	.+10     	; 0x365a <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    3650:	60 e1       	ldi	r22, 0x10	; 16
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    3658:	fb c0       	rjmp	.+502    	; 0x3850 <usart_init_rs232+0x218>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    365a:	c0 38       	cpi	r28, 0x80	; 128
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	d8 07       	cpc	r29, r24
    3660:	29 f4       	brne	.+10     	; 0x366c <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3662:	62 e0       	ldi	r22, 0x02	; 2
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    366a:	f2 c0       	rjmp	.+484    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    366c:	c1 15       	cp	r28, r1
    366e:	e1 e0       	ldi	r30, 0x01	; 1
    3670:	de 07       	cpc	r29, r30
    3672:	29 f4       	brne	.+10     	; 0x367e <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    3674:	61 e0       	ldi	r22, 0x01	; 1
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    367c:	e9 c0       	rjmp	.+466    	; 0x3850 <usart_init_rs232+0x218>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    367e:	c0 38       	cpi	r28, 0x80	; 128
    3680:	f3 e0       	ldi	r31, 0x03	; 3
    3682:	df 07       	cpc	r29, r31
    3684:	29 f4       	brne	.+10     	; 0x3690 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    3686:	61 e0       	ldi	r22, 0x01	; 1
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    368e:	e0 c0       	rjmp	.+448    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    3690:	c0 39       	cpi	r28, 0x90	; 144
    3692:	83 e0       	ldi	r24, 0x03	; 3
    3694:	d8 07       	cpc	r29, r24
    3696:	29 f4       	brne	.+10     	; 0x36a2 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    3698:	61 e0       	ldi	r22, 0x01	; 1
    369a:	82 e0       	ldi	r24, 0x02	; 2
    369c:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    36a0:	d7 c0       	rjmp	.+430    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    36a2:	c1 15       	cp	r28, r1
    36a4:	e2 e0       	ldi	r30, 0x02	; 2
    36a6:	de 07       	cpc	r29, r30
    36a8:	29 f4       	brne	.+10     	; 0x36b4 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    36aa:	62 e0       	ldi	r22, 0x02	; 2
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    36b2:	ce c0       	rjmp	.+412    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    36b4:	c0 34       	cpi	r28, 0x40	; 64
    36b6:	f2 e0       	ldi	r31, 0x02	; 2
    36b8:	df 07       	cpc	r29, r31
    36ba:	29 f4       	brne	.+10     	; 0x36c6 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    36bc:	62 e0       	ldi	r22, 0x02	; 2
    36be:	82 e0       	ldi	r24, 0x02	; 2
    36c0:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    36c4:	c5 c0       	rjmp	.+394    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    36c6:	c0 32       	cpi	r28, 0x20	; 32
    36c8:	83 e0       	ldi	r24, 0x03	; 3
    36ca:	d8 07       	cpc	r29, r24
    36cc:	29 f4       	brne	.+10     	; 0x36d8 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    36ce:	64 e0       	ldi	r22, 0x04	; 4
    36d0:	82 e0       	ldi	r24, 0x02	; 2
    36d2:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    36d6:	bc c0       	rjmp	.+376    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    36d8:	c1 15       	cp	r28, r1
    36da:	e8 e0       	ldi	r30, 0x08	; 8
    36dc:	de 07       	cpc	r29, r30
    36de:	29 f4       	brne	.+10     	; 0x36ea <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	83 e0       	ldi	r24, 0x03	; 3
    36e4:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    36e8:	b3 c0       	rjmp	.+358    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    36ea:	c1 15       	cp	r28, r1
    36ec:	f9 e0       	ldi	r31, 0x09	; 9
    36ee:	df 07       	cpc	r29, r31
    36f0:	29 f4       	brne	.+10     	; 0x36fc <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    36f2:	61 e0       	ldi	r22, 0x01	; 1
    36f4:	84 e0       	ldi	r24, 0x04	; 4
    36f6:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    36fa:	aa c0       	rjmp	.+340    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    36fc:	c1 15       	cp	r28, r1
    36fe:	8a e0       	ldi	r24, 0x0A	; 10
    3700:	d8 07       	cpc	r29, r24
    3702:	29 f4       	brne	.+10     	; 0x370e <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    3704:	61 e0       	ldi	r22, 0x01	; 1
    3706:	85 e0       	ldi	r24, 0x05	; 5
    3708:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    370c:	a1 c0       	rjmp	.+322    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    370e:	c1 15       	cp	r28, r1
    3710:	eb e0       	ldi	r30, 0x0B	; 11
    3712:	de 07       	cpc	r29, r30
    3714:	29 f4       	brne	.+10     	; 0x3720 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    3716:	61 e0       	ldi	r22, 0x01	; 1
    3718:	86 e0       	ldi	r24, 0x06	; 6
    371a:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    371e:	98 c0       	rjmp	.+304    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    3720:	c0 34       	cpi	r28, 0x40	; 64
    3722:	f8 e0       	ldi	r31, 0x08	; 8
    3724:	df 07       	cpc	r29, r31
    3726:	29 f4       	brne	.+10     	; 0x3732 <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    3728:	62 e0       	ldi	r22, 0x02	; 2
    372a:	83 e0       	ldi	r24, 0x03	; 3
    372c:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    3730:	8f c0       	rjmp	.+286    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    3732:	c0 34       	cpi	r28, 0x40	; 64
    3734:	89 e0       	ldi	r24, 0x09	; 9
    3736:	d8 07       	cpc	r29, r24
    3738:	29 f4       	brne	.+10     	; 0x3744 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    373a:	62 e0       	ldi	r22, 0x02	; 2
    373c:	84 e0       	ldi	r24, 0x04	; 4
    373e:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    3742:	86 c0       	rjmp	.+268    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    3744:	c0 34       	cpi	r28, 0x40	; 64
    3746:	ea e0       	ldi	r30, 0x0A	; 10
    3748:	de 07       	cpc	r29, r30
    374a:	29 f4       	brne	.+10     	; 0x3756 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    374c:	62 e0       	ldi	r22, 0x02	; 2
    374e:	85 e0       	ldi	r24, 0x05	; 5
    3750:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    3754:	7d c0       	rjmp	.+250    	; 0x3850 <usart_init_rs232+0x218>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    3756:	c0 39       	cpi	r28, 0x90	; 144
    3758:	f8 e0       	ldi	r31, 0x08	; 8
    375a:	df 07       	cpc	r29, r31
    375c:	29 f4       	brne	.+10     	; 0x3768 <usart_init_rs232+0x130>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    375e:	64 e0       	ldi	r22, 0x04	; 4
    3760:	83 e0       	ldi	r24, 0x03	; 3
    3762:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    3766:	74 c0       	rjmp	.+232    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    3768:	c0 39       	cpi	r28, 0x90	; 144
    376a:	89 e0       	ldi	r24, 0x09	; 9
    376c:	d8 07       	cpc	r29, r24
    376e:	29 f4       	brne	.+10     	; 0x377a <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3770:	64 e0       	ldi	r22, 0x04	; 4
    3772:	84 e0       	ldi	r24, 0x04	; 4
    3774:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    3778:	6b c0       	rjmp	.+214    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    377a:	c0 39       	cpi	r28, 0x90	; 144
    377c:	ea e0       	ldi	r30, 0x0A	; 10
    377e:	de 07       	cpc	r29, r30
    3780:	29 f4       	brne	.+10     	; 0x378c <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    3782:	64 e0       	ldi	r22, 0x04	; 4
    3784:	85 e0       	ldi	r24, 0x05	; 5
    3786:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    378a:	62 c0       	rjmp	.+196    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    378c:	c0 39       	cpi	r28, 0x90	; 144
    378e:	fb e0       	ldi	r31, 0x0B	; 11
    3790:	df 07       	cpc	r29, r31
    3792:	29 f4       	brne	.+10     	; 0x379e <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    3794:	64 e0       	ldi	r22, 0x04	; 4
    3796:	86 e0       	ldi	r24, 0x06	; 6
    3798:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    379c:	59 c0       	rjmp	.+178    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    379e:	c0 3c       	cpi	r28, 0xC0	; 192
    37a0:	88 e0       	ldi	r24, 0x08	; 8
    37a2:	d8 07       	cpc	r29, r24
    37a4:	29 f4       	brne	.+10     	; 0x37b0 <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    37a6:	68 e0       	ldi	r22, 0x08	; 8
    37a8:	83 e0       	ldi	r24, 0x03	; 3
    37aa:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    37ae:	50 c0       	rjmp	.+160    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    37b0:	c0 3c       	cpi	r28, 0xC0	; 192
    37b2:	e9 e0       	ldi	r30, 0x09	; 9
    37b4:	de 07       	cpc	r29, r30
    37b6:	29 f4       	brne	.+10     	; 0x37c2 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    37b8:	68 e0       	ldi	r22, 0x08	; 8
    37ba:	84 e0       	ldi	r24, 0x04	; 4
    37bc:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    37c0:	47 c0       	rjmp	.+142    	; 0x3850 <usart_init_rs232+0x218>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    37c2:	c0 3a       	cpi	r28, 0xA0	; 160
    37c4:	f8 e0       	ldi	r31, 0x08	; 8
    37c6:	df 07       	cpc	r29, r31
    37c8:	29 f4       	brne	.+10     	; 0x37d4 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    37ca:	60 e1       	ldi	r22, 0x10	; 16
    37cc:	83 e0       	ldi	r24, 0x03	; 3
    37ce:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    37d2:	3e c0       	rjmp	.+124    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    37d4:	c0 3a       	cpi	r28, 0xA0	; 160
    37d6:	89 e0       	ldi	r24, 0x09	; 9
    37d8:	d8 07       	cpc	r29, r24
    37da:	29 f4       	brne	.+10     	; 0x37e6 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    37dc:	60 e1       	ldi	r22, 0x10	; 16
    37de:	84 e0       	ldi	r24, 0x04	; 4
    37e0:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    37e4:	35 c0       	rjmp	.+106    	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    37e6:	c0 3a       	cpi	r28, 0xA0	; 160
    37e8:	ea e0       	ldi	r30, 0x0A	; 10
    37ea:	de 07       	cpc	r29, r30
    37ec:	29 f4       	brne	.+10     	; 0x37f8 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    37ee:	60 e1       	ldi	r22, 0x10	; 16
    37f0:	85 e0       	ldi	r24, 0x05	; 5
    37f2:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    37f6:	2c c0       	rjmp	.+88     	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    37f8:	c0 3a       	cpi	r28, 0xA0	; 160
    37fa:	fb e0       	ldi	r31, 0x0B	; 11
    37fc:	df 07       	cpc	r29, r31
    37fe:	29 f4       	brne	.+10     	; 0x380a <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    3800:	60 e1       	ldi	r22, 0x10	; 16
    3802:	86 e0       	ldi	r24, 0x06	; 6
    3804:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    3808:	23 c0       	rjmp	.+70     	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    380a:	c0 3b       	cpi	r28, 0xB0	; 176
    380c:	88 e0       	ldi	r24, 0x08	; 8
    380e:	d8 07       	cpc	r29, r24
    3810:	29 f4       	brne	.+10     	; 0x381c <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    3812:	60 e2       	ldi	r22, 0x20	; 32
    3814:	83 e0       	ldi	r24, 0x03	; 3
    3816:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    381a:	1a c0       	rjmp	.+52     	; 0x3850 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    381c:	c0 3b       	cpi	r28, 0xB0	; 176
    381e:	e9 e0       	ldi	r30, 0x09	; 9
    3820:	de 07       	cpc	r29, r30
    3822:	29 f4       	brne	.+10     	; 0x382e <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    3824:	60 e2       	ldi	r22, 0x20	; 32
    3826:	84 e0       	ldi	r24, 0x04	; 4
    3828:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    382c:	11 c0       	rjmp	.+34     	; 0x3850 <usart_init_rs232+0x218>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    382e:	c0 38       	cpi	r28, 0x80	; 128
    3830:	f4 e0       	ldi	r31, 0x04	; 4
    3832:	df 07       	cpc	r29, r31
    3834:	29 f4       	brne	.+10     	; 0x3840 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    3836:	60 e4       	ldi	r22, 0x40	; 64
    3838:	83 e0       	ldi	r24, 0x03	; 3
    383a:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    383e:	08 c0       	rjmp	.+16     	; 0x3850 <usart_init_rs232+0x218>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    3840:	c0 3a       	cpi	r28, 0xA0	; 160
    3842:	84 e0       	ldi	r24, 0x04	; 4
    3844:	d8 07       	cpc	r29, r24
    3846:	21 f4       	brne	.+8      	; 0x3850 <usart_init_rs232+0x218>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    3848:	60 e4       	ldi	r22, 0x40	; 64
    384a:	85 e0       	ldi	r24, 0x05	; 5
    384c:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    3850:	8d 81       	ldd	r24, Y+5	; 0x05
    3852:	8f 73       	andi	r24, 0x3F	; 63
    3854:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    3856:	f8 01       	movw	r30, r16
    3858:	95 81       	ldd	r25, Z+5	; 0x05
    385a:	84 81       	ldd	r24, Z+4	; 0x04
    385c:	89 2b       	or	r24, r25
    385e:	96 81       	ldd	r25, Z+6	; 0x06
    3860:	91 11       	cpse	r25, r1
    3862:	98 e0       	ldi	r25, 0x08	; 8
    3864:	89 2b       	or	r24, r25
    3866:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    3868:	f8 01       	movw	r30, r16
    386a:	40 81       	ld	r20, Z
    386c:	51 81       	ldd	r21, Z+1	; 0x01
    386e:	62 81       	ldd	r22, Z+2	; 0x02
    3870:	73 81       	ldd	r23, Z+3	; 0x03
    3872:	00 e8       	ldi	r16, 0x80	; 128
    3874:	13 ec       	ldi	r17, 0xC3	; 195
    3876:	29 ec       	ldi	r18, 0xC9	; 201
    3878:	31 e0       	ldi	r19, 0x01	; 1
    387a:	ce 01       	movw	r24, r28
    387c:	ca dd       	rcall	.-1132   	; 0x3412 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    387e:	9c 81       	ldd	r25, Y+4	; 0x04
    3880:	98 60       	ori	r25, 0x08	; 8
    3882:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    3884:	9c 81       	ldd	r25, Y+4	; 0x04
    3886:	90 61       	ori	r25, 0x10	; 16
    3888:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    388a:	df 91       	pop	r29
    388c:	cf 91       	pop	r28
    388e:	1f 91       	pop	r17
    3890:	0f 91       	pop	r16
    3892:	08 95       	ret

00003894 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    3894:	04 c0       	rjmp	.+8      	; 0x389e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    3896:	61 50       	subi	r22, 0x01	; 1
    3898:	71 09       	sbc	r23, r1
    389a:	81 09       	sbc	r24, r1
    389c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    389e:	61 15       	cp	r22, r1
    38a0:	71 05       	cpc	r23, r1
    38a2:	81 05       	cpc	r24, r1
    38a4:	91 05       	cpc	r25, r1
    38a6:	b9 f7       	brne	.-18     	; 0x3896 <__portable_avr_delay_cycles+0x2>
    38a8:	08 95       	ret

000038aa <__vector_119>:
/* ISR routines */


/* Serial data received */
ISR(USARTF0_RXC_vect)
{
    38aa:	1f 92       	push	r1
    38ac:	0f 92       	push	r0
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	0f 92       	push	r0
    38b2:	11 24       	eor	r1, r1
    38b4:	0b b6       	in	r0, 0x3b	; 59
    38b6:	0f 92       	push	r0
    38b8:	2f 93       	push	r18
    38ba:	3f 93       	push	r19
    38bc:	4f 93       	push	r20
    38be:	5f 93       	push	r21
    38c0:	6f 93       	push	r22
    38c2:	7f 93       	push	r23
    38c4:	8f 93       	push	r24
    38c6:	9f 93       	push	r25
    38c8:	af 93       	push	r26
    38ca:	bf 93       	push	r27
    38cc:	ef 93       	push	r30
    38ce:	ff 93       	push	r31
	/* Byte received */
	uint8_t ser1_rxd = usart_getchar(USART_SERIAL1);
    38d0:	80 ea       	ldi	r24, 0xA0	; 160
    38d2:	9b e0       	ldi	r25, 0x0B	; 11
    38d4:	98 dd       	rcall	.-1232   	; 0x3406 <usart_getchar>

	if (g_usart1_rx_idx < C_USART1_RX_BUF_LEN) {
    38d6:	e0 91 6d 27 	lds	r30, 0x276D	; 0x80276d <g_usart1_rx_idx>
    38da:	e8 30       	cpi	r30, 0x08	; 8
    38dc:	40 f4       	brcc	.+16     	; 0x38ee <__vector_119+0x44>
		g_usart1_rx_buf[g_usart1_rx_idx++] = ser1_rxd;
    38de:	91 e0       	ldi	r25, 0x01	; 1
    38e0:	9e 0f       	add	r25, r30
    38e2:	90 93 6d 27 	sts	0x276D, r25	; 0x80276d <g_usart1_rx_idx>
    38e6:	f0 e0       	ldi	r31, 0x00	; 0
    38e8:	eb 59       	subi	r30, 0x9B	; 155
    38ea:	f8 4d       	sbci	r31, 0xD8	; 216
    38ec:	80 83       	st	Z, r24
	}

	/* Input string ready to read */
	g_usart1_rx_ready = true;
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	80 93 6e 27 	sts	0x276E, r24	; 0x80276e <g_usart1_rx_ready>
}
    38f4:	ff 91       	pop	r31
    38f6:	ef 91       	pop	r30
    38f8:	bf 91       	pop	r27
    38fa:	af 91       	pop	r26
    38fc:	9f 91       	pop	r25
    38fe:	8f 91       	pop	r24
    3900:	7f 91       	pop	r23
    3902:	6f 91       	pop	r22
    3904:	5f 91       	pop	r21
    3906:	4f 91       	pop	r20
    3908:	3f 91       	pop	r19
    390a:	2f 91       	pop	r18
    390c:	0f 90       	pop	r0
    390e:	0b be       	out	0x3b, r0	; 59
    3910:	0f 90       	pop	r0
    3912:	0f be       	out	0x3f, r0	; 63
    3914:	0f 90       	pop	r0
    3916:	1f 90       	pop	r1
    3918:	18 95       	reti

0000391a <serial_init>:


/* Set up serial connection to the SIM808 */
void serial_init(void)
{
    391a:	cf 92       	push	r12
    391c:	df 92       	push	r13
    391e:	ff 92       	push	r15
    3920:	0f 93       	push	r16
    3922:	1f 93       	push	r17
    3924:	cf 93       	push	r28
    3926:	df 93       	push	r29
    3928:	cd b7       	in	r28, 0x3d	; 61
    392a:	de b7       	in	r29, 0x3e	; 62
    392c:	27 97       	sbiw	r28, 0x07	; 7
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	de bf       	out	0x3e, r29	; 62
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3932:	e0 ea       	ldi	r30, 0xA0	; 160
    3934:	f6 e0       	ldi	r31, 0x06	; 6
    3936:	92 e0       	ldi	r25, 0x02	; 2
    3938:	95 83       	std	Z+5, r25	; 0x05
    393a:	88 e0       	ldi	r24, 0x08	; 8
    393c:	85 83       	std	Z+5, r24	; 0x05
    393e:	60 e8       	ldi	r22, 0x80	; 128
    3940:	65 83       	std	Z+5, r22	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3942:	20 e8       	ldi	r18, 0x80	; 128
    3944:	36 e0       	ldi	r19, 0x06	; 6
    3946:	00 e2       	ldi	r16, 0x20	; 32
    3948:	d9 01       	movw	r26, r18
    394a:	16 96       	adiw	r26, 0x06	; 6
    394c:	0c 93       	st	X, r16
    394e:	16 97       	sbiw	r26, 0x06	; 6
    3950:	70 e1       	ldi	r23, 0x10	; 16
    3952:	16 96       	adiw	r26, 0x06	; 6
    3954:	7c 93       	st	X, r23
    3956:	0f 2e       	mov	r0, r31
    3958:	f0 e6       	ldi	r31, 0x60	; 96
    395a:	cf 2e       	mov	r12, r31
    395c:	f6 e0       	ldi	r31, 0x06	; 6
    395e:	df 2e       	mov	r13, r31
    3960:	f0 2d       	mov	r31, r0
    3962:	d6 01       	movw	r26, r12
    3964:	16 96       	adiw	r26, 0x06	; 6
    3966:	9c 93       	st	X, r25
    3968:	16 97       	sbiw	r26, 0x06	; 6
    396a:	16 96       	adiw	r26, 0x06	; 6
    396c:	8c 93       	st	X, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    396e:	4f b7       	in	r20, 0x3f	; 63
    3970:	49 83       	std	Y+1, r20	; 0x01
	cpu_irq_disable();
    3972:	f8 94       	cli
	return flags;
    3974:	f9 80       	ldd	r15, Y+1	; 0x01
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3976:	41 eb       	ldi	r20, 0xB1	; 177
    3978:	56 e0       	ldi	r21, 0x06	; 6
    397a:	da 01       	movw	r26, r20
    397c:	1c 91       	ld	r17, X
    397e:	17 70       	andi	r17, 0x07	; 7
    3980:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3982:	1c 91       	ld	r17, X
    3984:	10 68       	ori	r17, 0x80	; 128
    3986:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3988:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    398a:	4f b7       	in	r20, 0x3f	; 63
    398c:	4a 83       	std	Y+2, r20	; 0x02
	cpu_irq_disable();
    398e:	f8 94       	cli
	return flags;
    3990:	fa 80       	ldd	r15, Y+2	; 0x02
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3992:	43 eb       	ldi	r20, 0xB3	; 179
    3994:	56 e0       	ldi	r21, 0x06	; 6
    3996:	da 01       	movw	r26, r20
    3998:	1c 91       	ld	r17, X
    399a:	17 70       	andi	r17, 0x07	; 7
    399c:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    399e:	1c 91       	ld	r17, X
    39a0:	10 68       	ori	r17, 0x80	; 128
    39a2:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39a4:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    39a6:	4f b7       	in	r20, 0x3f	; 63
    39a8:	4b 83       	std	Y+3, r20	; 0x03
	cpu_irq_disable();
    39aa:	f8 94       	cli
	return flags;
    39ac:	fb 80       	ldd	r15, Y+3	; 0x03
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    39ae:	47 eb       	ldi	r20, 0xB7	; 183
    39b0:	56 e0       	ldi	r21, 0x06	; 6
    39b2:	da 01       	movw	r26, r20
    39b4:	1c 91       	ld	r17, X
    39b6:	17 70       	andi	r17, 0x07	; 7
    39b8:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    39ba:	1c 91       	ld	r17, X
    39bc:	10 68       	ori	r17, 0x80	; 128
    39be:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39c0:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    39c2:	4f b7       	in	r20, 0x3f	; 63
    39c4:	4c 83       	std	Y+4, r20	; 0x04
	cpu_irq_disable();
    39c6:	f8 94       	cli
	return flags;
    39c8:	fc 80       	ldd	r15, Y+4	; 0x04
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    39ca:	45 e9       	ldi	r20, 0x95	; 149
    39cc:	56 e0       	ldi	r21, 0x06	; 6
    39ce:	da 01       	movw	r26, r20
    39d0:	1c 91       	ld	r17, X
    39d2:	17 70       	andi	r17, 0x07	; 7
    39d4:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    39d6:	1c 91       	ld	r17, X
    39d8:	10 69       	ori	r17, 0x90	; 144
    39da:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39dc:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    39de:	4f b7       	in	r20, 0x3f	; 63
    39e0:	4d 83       	std	Y+5, r20	; 0x05
	cpu_irq_disable();
    39e2:	f8 94       	cli
	return flags;
    39e4:	fd 80       	ldd	r15, Y+5	; 0x05
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    39e6:	44 e9       	ldi	r20, 0x94	; 148
    39e8:	56 e0       	ldi	r21, 0x06	; 6
    39ea:	da 01       	movw	r26, r20
    39ec:	1c 91       	ld	r17, X
    39ee:	17 70       	andi	r17, 0x07	; 7
    39f0:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    39f2:	1c 91       	ld	r17, X
    39f4:	10 69       	ori	r17, 0x90	; 144
    39f6:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39f8:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    39fa:	4f b7       	in	r20, 0x3f	; 63
    39fc:	4e 83       	std	Y+6, r20	; 0x06
	cpu_irq_disable();
    39fe:	f8 94       	cli
	return flags;
    3a00:	fe 80       	ldd	r15, Y+6	; 0x06
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3a02:	41 e7       	ldi	r20, 0x71	; 113
    3a04:	56 e0       	ldi	r21, 0x06	; 6
    3a06:	da 01       	movw	r26, r20
    3a08:	1c 91       	ld	r17, X
    3a0a:	17 70       	andi	r17, 0x07	; 7
    3a0c:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3a0e:	1c 91       	ld	r17, X
    3a10:	10 69       	ori	r17, 0x90	; 144
    3a12:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a14:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3a16:	4f b7       	in	r20, 0x3f	; 63
    3a18:	4f 83       	std	Y+7, r20	; 0x07
	cpu_irq_disable();
    3a1a:	f8 94       	cli
	return flags;
    3a1c:	ff 80       	ldd	r15, Y+7	; 0x07
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3a1e:	43 e7       	ldi	r20, 0x73	; 115
    3a20:	56 e0       	ldi	r21, 0x06	; 6
    3a22:	da 01       	movw	r26, r20
    3a24:	1c 91       	ld	r17, X
    3a26:	17 70       	andi	r17, 0x07	; 7
    3a28:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3a2a:	1c 91       	ld	r17, X
    3a2c:	10 69       	ori	r17, 0x90	; 144
    3a2e:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a30:	ff be       	out	0x3f, r15	; 63
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3a32:	91 83       	std	Z+1, r25	; 0x01
    3a34:	81 83       	std	Z+1, r24	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3a36:	54 e0       	ldi	r21, 0x04	; 4
    3a38:	52 83       	std	Z+2, r21	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3a3a:	61 83       	std	Z+1, r22	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3a3c:	10 e4       	ldi	r17, 0x40	; 64
    3a3e:	12 83       	std	Z+2, r17	; 0x02
    3a40:	72 83       	std	Z+2, r23	; 0x02
    3a42:	41 e0       	ldi	r20, 0x01	; 1
    3a44:	42 83       	std	Z+2, r20	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3a46:	f9 01       	movw	r30, r18
    3a48:	01 83       	std	Z+1, r16	; 0x01
    3a4a:	71 83       	std	Z+1, r23	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3a4c:	82 83       	std	Z+2, r24	; 0x02
    3a4e:	e0 e0       	ldi	r30, 0x00	; 0
    3a50:	f6 e0       	ldi	r31, 0x06	; 6
    3a52:	62 83       	std	Z+2, r22	; 0x02
    3a54:	12 83       	std	Z+2, r17	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3a56:	d6 01       	movw	r26, r12
    3a58:	11 96       	adiw	r26, 0x01	; 1
    3a5a:	9c 93       	st	X, r25
    3a5c:	11 97       	sbiw	r26, 0x01	; 1
    3a5e:	11 96       	adiw	r26, 0x01	; 1
    3a60:	8c 93       	st	X, r24
    3a62:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3a64:	12 96       	adiw	r26, 0x02	; 2
    3a66:	5c 93       	st	X, r21
    3a68:	12 97       	sbiw	r26, 0x02	; 2
    3a6a:	12 96       	adiw	r26, 0x02	; 2
    3a6c:	4c 93       	st	X, r20
    3a6e:	40 93 e2 07 	sts	0x07E2, r20	; 0x8007e2 <__TEXT_REGION_LENGTH__+0x7007e2>

	ioport_set_pin_dir(GPS_GSM_1PPS_GPIO,			IOPORT_DIR_INPUT);


	/* Prepare to use ASF USART service */
	g_usart1_options.baudrate	= USART_SERIAL1_BAUDRATE;
    3a72:	ef e6       	ldi	r30, 0x6F	; 111
    3a74:	f7 e2       	ldi	r31, 0x27	; 39
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	96 e9       	ldi	r25, 0x96	; 150
    3a7a:	a0 e0       	ldi	r26, 0x00	; 0
    3a7c:	b0 e0       	ldi	r27, 0x00	; 0
    3a7e:	80 83       	st	Z, r24
    3a80:	91 83       	std	Z+1, r25	; 0x01
    3a82:	a2 83       	std	Z+2, r26	; 0x02
    3a84:	b3 83       	std	Z+3, r27	; 0x03
	g_usart1_options.charlength	= USART_SERIAL1_CHAR_LENGTH;
    3a86:	83 e0       	ldi	r24, 0x03	; 3
    3a88:	84 83       	std	Z+4, r24	; 0x04
	g_usart1_options.paritytype	= USART_SERIAL1_PARITY;
    3a8a:	15 82       	std	Z+5, r1	; 0x05
	g_usart1_options.stopbits	= USART_SERIAL1_STOP_BIT;
    3a8c:	16 82       	std	Z+6, r1	; 0x06
}
    3a8e:	27 96       	adiw	r28, 0x07	; 7
    3a90:	cd bf       	out	0x3d, r28	; 61
    3a92:	de bf       	out	0x3e, r29	; 62
    3a94:	df 91       	pop	r29
    3a96:	cf 91       	pop	r28
    3a98:	1f 91       	pop	r17
    3a9a:	0f 91       	pop	r16
    3a9c:	ff 90       	pop	r15
    3a9e:	df 90       	pop	r13
    3aa0:	cf 90       	pop	r12
    3aa2:	08 95       	ret

00003aa4 <serial_start>:
PROGMEM_DECLARE(const char, PM_TWI1_INIT_ONBOARD_SIM808_RESTART[]);
PROGMEM_DECLARE(const char, PM_TWI1_INIT_ONBOARD_SIM808_OK[]);

/* USB device stack start function to enable stack and start USB */
void serial_start(void)
{
    3aa4:	2f 92       	push	r2
    3aa6:	3f 92       	push	r3
    3aa8:	4f 92       	push	r4
    3aaa:	5f 92       	push	r5
    3aac:	6f 92       	push	r6
    3aae:	7f 92       	push	r7
    3ab0:	8f 92       	push	r8
    3ab2:	9f 92       	push	r9
    3ab4:	af 92       	push	r10
    3ab6:	bf 92       	push	r11
    3ab8:	cf 92       	push	r12
    3aba:	df 92       	push	r13
    3abc:	ef 92       	push	r14
    3abe:	ff 92       	push	r15
    3ac0:	0f 93       	push	r16
    3ac2:	1f 93       	push	r17
    3ac4:	cf 93       	push	r28
    3ac6:	df 93       	push	r29
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	29 97       	sbiw	r28, 0x09	; 9
    3ace:	cd bf       	out	0x3d, r28	; 61
    3ad0:	de bf       	out	0x3e, r29	; 62
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    3ad2:	ef e6       	ldi	r30, 0x6F	; 111
    3ad4:	f7 e2       	ldi	r31, 0x27	; 39
    3ad6:	84 81       	ldd	r24, Z+4	; 0x04
    3ad8:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    3ada:	85 81       	ldd	r24, Z+5	; 0x05
    3adc:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    3ade:	86 81       	ldd	r24, Z+6	; 0x06
    3ae0:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    3ae2:	80 81       	ld	r24, Z
    3ae4:	91 81       	ldd	r25, Z+1	; 0x01
    3ae6:	a2 81       	ldd	r26, Z+2	; 0x02
    3ae8:	b3 81       	ldd	r27, Z+3	; 0x03
    3aea:	89 83       	std	Y+1, r24	; 0x01
    3aec:	9a 83       	std	Y+2, r25	; 0x02
    3aee:	ab 83       	std	Y+3, r26	; 0x03
    3af0:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
	}
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    3af2:	60 e1       	ldi	r22, 0x10	; 16
    3af4:	86 e0       	ldi	r24, 0x06	; 6
    3af6:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    3afa:	be 01       	movw	r22, r28
    3afc:	6f 5f       	subi	r22, 0xFF	; 255
    3afe:	7f 4f       	sbci	r23, 0xFF	; 255
    3b00:	80 ea       	ldi	r24, 0xA0	; 160
    3b02:	9b e0       	ldi	r25, 0x0B	; 11
    3b04:	99 dd       	rcall	.-1230   	; 0x3638 <usart_init_rs232>

	/* Init and start of the ASF USART service/device */
	usart_serial_init(USART_SERIAL1, &g_usart1_options);

	/* ISR interrupt levels */
	((USART_t*)USART_SERIAL1)->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    3b06:	80 e1       	ldi	r24, 0x10	; 16
    3b08:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>

	/* Inform about to start the SIM808 - LCD */
	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_START);
    3b0c:	86 e2       	ldi	r24, 0x26	; 38
    3b0e:	94 e0       	ldi	r25, 0x04	; 4
    3b10:	9f 93       	push	r25
    3b12:	8f 93       	push	r24
    3b14:	1f 92       	push	r1
    3b16:	68 94       	set
    3b18:	ff 24       	eor	r15, r15
    3b1a:	f6 f8       	bld	r15, 6
    3b1c:	ff 92       	push	r15
    3b1e:	0f e3       	ldi	r16, 0x3F	; 63
    3b20:	15 e2       	ldi	r17, 0x25	; 37
    3b22:	1f 93       	push	r17
    3b24:	0f 93       	push	r16
    3b26:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3b2a:	a8 01       	movw	r20, r16
    3b2c:	66 e4       	ldi	r22, 0x46	; 70
    3b2e:	88 e0       	ldi	r24, 0x08	; 8
    3b30:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>

	/* Inform about to start the SIM808 - USB */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_START);
    3b34:	8a e8       	ldi	r24, 0x8A	; 138
    3b36:	94 e0       	ldi	r25, 0x04	; 4
    3b38:	9f 93       	push	r25
    3b3a:	8f 93       	push	r24
    3b3c:	1f 92       	push	r1
    3b3e:	ff 92       	push	r15
    3b40:	1f 93       	push	r17
    3b42:	0f 93       	push	r16
    3b44:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, len, false);
    3b48:	40 e0       	ldi	r20, 0x00	; 0
    3b4a:	68 2f       	mov	r22, r24
    3b4c:	c8 01       	movw	r24, r16
    3b4e:	43 d1       	rcall	.+646    	; 0x3dd6 <udi_write_tx_buf>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3b50:	80 e2       	ldi	r24, 0x20	; 32
    3b52:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

	/* Release the GSM_RESETn */
	ioport_set_pin_level(GSM_RESET_DRV_GPIO, HIGH);
	delay_ms(500);
    3b56:	61 ea       	ldi	r22, 0xA1	; 161
    3b58:	75 e2       	ldi	r23, 0x25	; 37
    3b5a:	86 e2       	ldi	r24, 0x26	; 38
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	9a de       	rcall	.-716    	; 0x3894 <__portable_avr_delay_cycles>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3b60:	00 ea       	ldi	r16, 0xA0	; 160
    3b62:	16 e0       	ldi	r17, 0x06	; 6
    3b64:	82 e0       	ldi	r24, 0x02	; 2
    3b66:	f8 01       	movw	r30, r16
    3b68:	86 83       	std	Z+6, r24	; 0x06

	/* Data Terminal Ready is true */
	ioport_set_pin_level(GSM_DTR1_DRV, LOW);	// Activate SIM808 (non SLEEP mode)
	delay_ms(100);
    3b6a:	61 e2       	ldi	r22, 0x21	; 33
    3b6c:	71 ea       	ldi	r23, 0xA1	; 161
    3b6e:	87 e0       	ldi	r24, 0x07	; 7
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	90 de       	rcall	.-736    	; 0x3894 <__portable_avr_delay_cycles>
    3b74:	80 e8       	ldi	r24, 0x80	; 128
    3b76:	f8 01       	movw	r30, r16
	ioport_set_pin_level(GSM_RTS1_DRV, LOW);	// Serial line ready
	delay_ms(1);
    3b78:	86 83       	std	Z+6, r24	; 0x06
    3b7a:	68 e8       	ldi	r22, 0x88	; 136
    3b7c:	73 e1       	ldi	r23, 0x13	; 19
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	88 de       	rcall	.-752    	; 0x3894 <__portable_avr_delay_cycles>
    3b84:	cd bf       	out	0x3d, r28	; 61
	/* ISR interrupt levels */
	((USART_t*)USART_SERIAL1)->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;

	/* Inform about to start the SIM808 - LCD */
	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_START);
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3b86:	de bf       	out	0x3e, r29	; 62
    3b88:	68 94       	set
    3b8a:	55 24       	eor	r5, r5
				g_usart1_rx_ready = false;
				cpu_irq_restore(flags);
			}

			/* Leave loop when SIM808 responds */
			if (g_prepare_buf[0] && strstr_P(g_prepare_buf, PM_SIM808_OK))
    3b8c:	53 f8       	bld	r5, 3
    3b8e:	0f 2e       	mov	r0, r31
    3b90:	ff e3       	ldi	r31, 0x3F	; 63
    3b92:	ef 2e       	mov	r14, r31
    3b94:	f5 e2       	ldi	r31, 0x25	; 37
    3b96:	ff 2e       	mov	r15, r31
    3b98:	f0 2d       	mov	r31, r0
    3b9a:	e8 86       	std	Y+8, r14	; 0x08
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3b9c:	f9 86       	std	Y+9, r15	; 0x09
    3b9e:	0f 2e       	mov	r0, r31
    3ba0:	f0 ea       	ldi	r31, 0xA0	; 160
    3ba2:	cf 2e       	mov	r12, r31
    3ba4:	f6 e0       	ldi	r31, 0x06	; 6
    3ba6:	df 2e       	mov	r13, r31
    3ba8:	f0 2d       	mov	r31, r0
    3baa:	68 94       	set
    3bac:	22 24       	eor	r2, r2
    3bae:	27 f8       	bld	r2, 7
    3bb0:	68 94       	set
    3bb2:	33 24       	eor	r3, r3
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3bb4:	31 f8       	bld	r3, 1
    3bb6:	0f 2e       	mov	r0, r31
    3bb8:	f0 e8       	ldi	r31, 0x80	; 128
    3bba:	8f 2e       	mov	r8, r31
    3bbc:	f6 e0       	ldi	r31, 0x06	; 6
    3bbe:	9f 2e       	mov	r9, r31
    3bc0:	f0 2d       	mov	r31, r0
    3bc2:	68 94       	set
    3bc4:	44 24       	eor	r4, r4
				/* Inform about restart - LCD */
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
    3bc6:	45 f8       	bld	r4, 5
    3bc8:	0f 2e       	mov	r0, r31
    3bca:	fa e0       	ldi	r31, 0x0A	; 10
    3bcc:	af 2e       	mov	r10, r31
    3bce:	f4 e0       	ldi	r31, 0x04	; 4
    3bd0:	bf 2e       	mov	r11, r31
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);

				/* Inform about restart - USB */
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_RESTART);
    3bd2:	f0 2d       	mov	r31, r0
    3bd4:	0f 2e       	mov	r0, r31
    3bd6:	f2 e6       	ldi	r31, 0x62	; 98
    3bd8:	6f 2e       	mov	r6, r31
    3bda:	f4 e0       	ldi	r31, 0x04	; 4
    3bdc:	7f 2e       	mov	r7, r31
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3bde:	f0 2d       	mov	r31, r0
    3be0:	04 e0       	ldi	r16, 0x04	; 4
	ioport_set_pin_level(GSM_RTS1_DRV, LOW);	// Serial line ready
	delay_ms(1);

	/* Synchronize with SIM808 */
	while (true) {
		usart_serial_write_packet(USART_SERIAL1, (const uint8_t*)"AT\r", 3);
    3be2:	10 e0       	ldi	r17, 0x00	; 0
    3be4:	43 e0       	ldi	r20, 0x03	; 3
    3be6:	50 e0       	ldi	r21, 0x00	; 0
    3be8:	64 e3       	ldi	r22, 0x34	; 52
    3bea:	71 e2       	ldi	r23, 0x21	; 33
    3bec:	80 ea       	ldi	r24, 0xA0	; 160
		delay_ms(100);
    3bee:	9b e0       	ldi	r25, 0x0B	; 11
    3bf0:	e8 db       	rcall	.-2096   	; 0x33c2 <usart_serial_write_packet>
    3bf2:	61 e2       	ldi	r22, 0x21	; 33
    3bf4:	71 ea       	ldi	r23, 0xA1	; 161
    3bf6:	87 e0       	ldi	r24, 0x07	; 7
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
		if (g_usart1_rx_ready) {
    3bfa:	4c de       	rcall	.-872    	; 0x3894 <__portable_avr_delay_cycles>
    3bfc:	80 91 6e 27 	lds	r24, 0x276E	; 0x80276e <g_usart1_rx_ready>
    3c00:	88 23       	and	r24, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c02:	81 f3       	breq	.-32     	; 0x3be4 <serial_start+0x140>
    3c04:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    3c06:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    3c08:	f8 94       	cli
			{
				irqflags_t flags = cpu_irq_save();
				for (int8_t idx = g_usart1_rx_idx - 1; idx >= 0; --idx) {
    3c0a:	39 81       	ldd	r19, Y+1	; 0x01
    3c0c:	20 91 6d 27 	lds	r18, 0x276D	; 0x80276d <g_usart1_rx_idx>
    3c10:	21 50       	subi	r18, 0x01	; 1
					g_prepare_buf[idx] = g_usart1_rx_buf[idx];
    3c12:	72 f0       	brmi	.+28     	; 0x3c30 <serial_start+0x18c>
    3c14:	82 2f       	mov	r24, r18
    3c16:	02 2e       	mov	r0, r18
    3c18:	00 0c       	add	r0, r0
    3c1a:	99 0b       	sbc	r25, r25
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	e1 5c       	subi	r30, 0xC1	; 193
    3c20:	fa 4d       	sbci	r31, 0xDA	; 218
    3c22:	dc 01       	movw	r26, r24
    3c24:	ab 59       	subi	r26, 0x9B	; 155
    3c26:	b8 4d       	sbci	r27, 0xD8	; 216
    3c28:	8c 91       	ld	r24, X
    3c2a:	80 83       	st	Z, r24
		usart_serial_write_packet(USART_SERIAL1, (const uint8_t*)"AT\r", 3);
		delay_ms(100);
		if (g_usart1_rx_ready) {
			{
				irqflags_t flags = cpu_irq_save();
				for (int8_t idx = g_usart1_rx_idx - 1; idx >= 0; --idx) {
    3c2c:	21 50       	subi	r18, 0x01	; 1
					g_prepare_buf[idx] = g_usart1_rx_buf[idx];
				}
				g_usart1_rx_idx = 0;
    3c2e:	92 f7       	brpl	.-28     	; 0x3c14 <serial_start+0x170>
    3c30:	10 92 6d 27 	sts	0x276D, r1	; 0x80276d <g_usart1_rx_idx>
				g_usart1_rx_ready = false;
    3c34:	10 92 6e 27 	sts	0x276E, r1	; 0x80276e <g_usart1_rx_ready>
				cpu_irq_restore(flags);
			}

			/* Leave loop when SIM808 responds */
			if (g_prepare_buf[0] && strstr_P(g_prepare_buf, PM_SIM808_OK))
    3c38:	3f bf       	out	0x3f, r19	; 63
    3c3a:	f7 01       	movw	r30, r14
    3c3c:	80 81       	ld	r24, Z
    3c3e:	88 23       	and	r24, r24
    3c40:	49 f0       	breq	.+18     	; 0x3c54 <serial_start+0x1b0>
    3c42:	62 eb       	ldi	r22, 0xB2	; 178
    3c44:	74 e0       	ldi	r23, 0x04	; 4
    3c46:	88 85       	ldd	r24, Y+8	; 0x08
    3c48:	99 85       	ldd	r25, Y+9	; 0x09
    3c4a:	0e 94 d0 7c 	call	0xf9a0	; 0xf9a0 <strstr_P>
    3c4e:	89 2b       	or	r24, r25
    3c50:	09 f0       	breq	.+2      	; 0x3c54 <serial_start+0x1b0>
    3c52:	52 c0       	rjmp	.+164    	; 0x3cf8 <serial_start+0x254>
    3c54:	01 50       	subi	r16, 0x01	; 1
				break;

			if (loop_ctr++ > 2) {
    3c56:	11 09       	sbc	r17, r1
    3c58:	09 f0       	breq	.+2      	; 0x3c5c <serial_start+0x1b8>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3c5a:	c4 cf       	rjmp	.-120    	; 0x3be4 <serial_start+0x140>
    3c5c:	f6 01       	movw	r30, r12
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3c5e:	25 82       	std	Z+5, r2	; 0x05
    3c60:	35 82       	std	Z+5, r3	; 0x05

				/* Turn off SIM808 */
				ioport_set_pin_level(GSM_RTS1_DRV,			HIGH);	// Serial line NOT ready
				ioport_set_pin_level(GSM_DTR1_DRV,			HIGH);	// DTR inactive
				ioport_set_pin_level(GSM_RESET_DRV_GPIO,	LOW);	// RESETn active
				delay_ms(150);
    3c62:	f4 01       	movw	r30, r8
    3c64:	46 82       	std	Z+6, r4	; 0x06
    3c66:	61 eb       	ldi	r22, 0xB1	; 177
    3c68:	71 e7       	ldi	r23, 0x71	; 113
    3c6a:	8b e0       	ldi	r24, 0x0B	; 11
    3c6c:	90 e0       	ldi	r25, 0x00	; 0

				/* Inform about restart - LCD */
				if (line > 12) {
    3c6e:	12 de       	rcall	.-988    	; 0x3894 <__portable_avr_delay_cycles>
    3c70:	fc e0       	ldi	r31, 0x0C	; 12
    3c72:	f5 15       	cp	r31, r5
					task_twi2_lcd_header();
    3c74:	30 f4       	brcc	.+12     	; 0x3c82 <serial_start+0x1de>
    3c76:	0e 94 aa 34 	call	0x6954	; 0x6954 <task_twi2_lcd_header>
					line = 3;
    3c7a:	0f 2e       	mov	r0, r31
    3c7c:	f3 e0       	ldi	r31, 0x03	; 3
    3c7e:	5f 2e       	mov	r5, r31
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
    3c80:	f0 2d       	mov	r31, r0
    3c82:	bf 92       	push	r11
    3c84:	af 92       	push	r10
    3c86:	1f 92       	push	r1
    3c88:	80 e4       	ldi	r24, 0x40	; 64
    3c8a:	8f 93       	push	r24
    3c8c:	ff 92       	push	r15
    3c8e:	ef 92       	push	r14
    3c90:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3c94:	11 e0       	ldi	r17, 0x01	; 1
    3c96:	15 0d       	add	r17, r5
    3c98:	65 2d       	mov	r22, r5
    3c9a:	66 0f       	add	r22, r22
    3c9c:	86 2f       	mov	r24, r22
    3c9e:	88 0f       	add	r24, r24
    3ca0:	88 0f       	add	r24, r24
    3ca2:	68 0f       	add	r22, r24
    3ca4:	a7 01       	movw	r20, r14
    3ca6:	88 e0       	ldi	r24, 0x08	; 8
    3ca8:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>

				/* Inform about restart - USB */
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_RESTART);
    3cac:	7f 92       	push	r7
    3cae:	6f 92       	push	r6
    3cb0:	1f 92       	push	r1
    3cb2:	90 e4       	ldi	r25, 0x40	; 64
    3cb4:	9f 93       	push	r25
    3cb6:	ff 92       	push	r15
    3cb8:	ef 92       	push	r14
				udi_write_tx_buf(g_prepare_buf, len, false);
    3cba:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    3cbe:	40 e0       	ldi	r20, 0x00	; 0
    3cc0:	68 2f       	mov	r22, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3cc2:	c7 01       	movw	r24, r14
    3cc4:	88 d0       	rcall	.+272    	; 0x3dd6 <udi_write_tx_buf>

				/* Restart SIM808 */
				ioport_set_pin_level(GSM_RESET_DRV_GPIO,	HIGH);	// Release the RESETn line
				delay_ms(500);
    3cc6:	f4 01       	movw	r30, r8
    3cc8:	45 82       	std	Z+5, r4	; 0x05
    3cca:	61 ea       	ldi	r22, 0xA1	; 161
    3ccc:	75 e2       	ldi	r23, 0x25	; 37
    3cce:	86 e2       	ldi	r24, 0x26	; 38
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	e0 dd       	rcall	.-1088   	; 0x3894 <__portable_avr_delay_cycles>
				ioport_set_pin_level(GSM_DTR1_DRV,			LOW);	// DTR active
				delay_ms(100);
    3cd4:	f6 01       	movw	r30, r12
    3cd6:	36 82       	std	Z+6, r3	; 0x06
    3cd8:	61 e2       	ldi	r22, 0x21	; 33
    3cda:	71 ea       	ldi	r23, 0xA1	; 161
    3cdc:	87 e0       	ldi	r24, 0x07	; 7
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	d9 dd       	rcall	.-1102   	; 0x3894 <__portable_avr_delay_cycles>
				ioport_set_pin_level(GSM_RTS1_DRV,			LOW);	// Serial line ready
				delay_ms(1);
    3ce2:	f6 01       	movw	r30, r12
    3ce4:	26 82       	std	Z+6, r2	; 0x06
    3ce6:	68 e8       	ldi	r22, 0x88	; 136
    3ce8:	73 e1       	ldi	r23, 0x13	; 19
    3cea:	80 e0       	ldi	r24, 0x00	; 0
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	d2 dd       	rcall	.-1116   	; 0x3894 <__portable_avr_delay_cycles>
    3cf0:	cd bf       	out	0x3d, r28	; 61
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	51 2e       	mov	r5, r17
			}
		}
	}

	/* Inform about baud rate match - LCD */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_OK);
    3cf6:	74 cf       	rjmp	.-280    	; 0x3be0 <serial_start+0x13c>
    3cf8:	85 ef       	ldi	r24, 0xF5	; 245
    3cfa:	93 e0       	ldi	r25, 0x03	; 3
    3cfc:	9f 93       	push	r25
    3cfe:	8f 93       	push	r24
    3d00:	1f 92       	push	r1
    3d02:	68 94       	set
    3d04:	ff 24       	eor	r15, r15
    3d06:	f6 f8       	bld	r15, 6
    3d08:	ff 92       	push	r15
    3d0a:	0f e3       	ldi	r16, 0x3F	; 63
    3d0c:	15 e2       	ldi	r17, 0x25	; 37
    3d0e:	1f 93       	push	r17
    3d10:	0f 93       	push	r16
    3d12:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3d16:	55 0c       	add	r5, r5
    3d18:	65 2d       	mov	r22, r5
    3d1a:	66 0f       	add	r22, r22
    3d1c:	66 0f       	add	r22, r22
    3d1e:	65 0d       	add	r22, r5
    3d20:	a8 01       	movw	r20, r16
    3d22:	88 e0       	ldi	r24, 0x08	; 8
    3d24:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>

	/* Inform about baud rate match - USB */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_SYNCED);
    3d28:	80 e4       	ldi	r24, 0x40	; 64
    3d2a:	94 e0       	ldi	r25, 0x04	; 4
    3d2c:	9f 93       	push	r25
    3d2e:	8f 93       	push	r24
    3d30:	1f 92       	push	r1
    3d32:	ff 92       	push	r15
    3d34:	1f 93       	push	r17
    3d36:	0f 93       	push	r16
	udi_write_tx_buf(g_prepare_buf, len, false);
    3d38:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    3d3c:	40 e0       	ldi	r20, 0x00	; 0
    3d3e:	68 2f       	mov	r22, r24
    3d40:	c8 01       	movw	r24, r16
}
    3d42:	49 d0       	rcall	.+146    	; 0x3dd6 <udi_write_tx_buf>
    3d44:	cd bf       	out	0x3d, r28	; 61
    3d46:	de bf       	out	0x3e, r29	; 62
    3d48:	29 96       	adiw	r28, 0x09	; 9
    3d4a:	cd bf       	out	0x3d, r28	; 61
    3d4c:	de bf       	out	0x3e, r29	; 62
    3d4e:	df 91       	pop	r29
    3d50:	cf 91       	pop	r28
    3d52:	1f 91       	pop	r17
    3d54:	0f 91       	pop	r16
    3d56:	ff 90       	pop	r15
    3d58:	ef 90       	pop	r14
    3d5a:	df 90       	pop	r13
    3d5c:	cf 90       	pop	r12
    3d5e:	bf 90       	pop	r11
    3d60:	af 90       	pop	r10
    3d62:	9f 90       	pop	r9
    3d64:	8f 90       	pop	r8
    3d66:	7f 90       	pop	r7
    3d68:	6f 90       	pop	r6
    3d6a:	5f 90       	pop	r5
    3d6c:	4f 90       	pop	r4
    3d6e:	3f 90       	pop	r3
    3d70:	2f 90       	pop	r2
    3d72:	08 95       	ret

00003d74 <task_serial>:


void task_serial(uint32_t now)
{
    3d74:	cf 93       	push	r28
    3d76:	df 93       	push	r29
    3d78:	1f 92       	push	r1
    3d7a:	cd b7       	in	r28, 0x3d	; 61
    3d7c:	de b7       	in	r29, 0x3e	; 62
	uint8_t len = 0;

	/* Leave when nothing to do */
	if (!g_usart1_rx_ready) {
    3d7e:	80 91 6e 27 	lds	r24, 0x276E	; 0x80276e <g_usart1_rx_ready>
    3d82:	88 23       	and	r24, r24
    3d84:	21 f1       	breq	.+72     	; 0x3dce <task_serial+0x5a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3d86:	8f b7       	in	r24, 0x3f	; 63
    3d88:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3d8a:	f8 94       	cli
	return flags;
    3d8c:	39 81       	ldd	r19, Y+1	; 0x01
	}

	/* Take out own copy and reset */
	{
		irqflags_t flags = cpu_irq_save();
		if (g_usart1_rx_idx) {
    3d8e:	60 91 6d 27 	lds	r22, 0x276D	; 0x80276d <g_usart1_rx_idx>
    3d92:	66 23       	and	r22, r22
    3d94:	a9 f0       	breq	.+42     	; 0x3dc0 <task_serial+0x4c>
			len = g_usart1_rx_idx;
			for (int8_t idx = g_usart1_rx_idx - 1; idx >= 0; --idx) {
    3d96:	2f ef       	ldi	r18, 0xFF	; 255
    3d98:	26 0f       	add	r18, r22
    3d9a:	72 f0       	brmi	.+28     	; 0x3db8 <task_serial+0x44>
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
    3d9c:	82 2f       	mov	r24, r18
    3d9e:	02 2e       	mov	r0, r18
    3da0:	00 0c       	add	r0, r0
    3da2:	99 0b       	sbc	r25, r25
    3da4:	fc 01       	movw	r30, r24
    3da6:	e1 5c       	subi	r30, 0xC1	; 193
    3da8:	fa 4d       	sbci	r31, 0xDA	; 218
    3daa:	dc 01       	movw	r26, r24
    3dac:	ab 59       	subi	r26, 0x9B	; 155
    3dae:	b8 4d       	sbci	r27, 0xD8	; 216
    3db0:	8c 91       	ld	r24, X
    3db2:	80 83       	st	Z, r24
    3db4:	21 50       	subi	r18, 0x01	; 1
	/* Take out own copy and reset */
	{
		irqflags_t flags = cpu_irq_save();
		if (g_usart1_rx_idx) {
			len = g_usart1_rx_idx;
			for (int8_t idx = g_usart1_rx_idx - 1; idx >= 0; --idx) {
    3db6:	92 f7       	brpl	.-28     	; 0x3d9c <task_serial+0x28>
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
			}
			g_usart1_rx_idx = 0;
    3db8:	10 92 6d 27 	sts	0x276D, r1	; 0x80276d <g_usart1_rx_idx>
			g_usart1_rx_ready = false;
    3dbc:	10 92 6e 27 	sts	0x276E, r1	; 0x80276e <g_usart1_rx_ready>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3dc0:	3f bf       	out	0x3f, r19	; 63
		}
		cpu_irq_restore(flags);
	}

	/* Copy stream to USB_CDC */
	if (len) {
    3dc2:	66 23       	and	r22, r22
    3dc4:	21 f0       	breq	.+8      	; 0x3dce <task_serial+0x5a>
		udi_write_tx_buf(g_prepare_buf, len, false);
    3dc6:	40 e0       	ldi	r20, 0x00	; 0
    3dc8:	8f e3       	ldi	r24, 0x3F	; 63
    3dca:	95 e2       	ldi	r25, 0x25	; 37
    3dcc:	04 d0       	rcall	.+8      	; 0x3dd6 <udi_write_tx_buf>
	}
}
    3dce:	0f 90       	pop	r0
    3dd0:	df 91       	pop	r29
    3dd2:	cf 91       	pop	r28
    3dd4:	08 95       	ret

00003dd6 <udi_write_tx_buf>:
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    3dd6:	ef 92       	push	r14
    3dd8:	ff 92       	push	r15
    3dda:	0f 93       	push	r16
    3ddc:	1f 93       	push	r17
    3dde:	cf 93       	push	r28
    3de0:	df 93       	push	r29
    3de2:	20 91 78 27 	lds	r18, 0x2778	; 0x802778 <g_usb_cdc_transfers_authorized>
    3de6:	21 11       	cpse	r18, r1
    3de8:	3a c0       	rjmp	.+116    	; 0x3e5e <udi_write_tx_buf+0x88>
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	3f c0       	rjmp	.+126    	; 0x3e6c <udi_write_tx_buf+0x96>
    3dee:	04 2f       	mov	r16, r20
    3df0:	16 2f       	mov	r17, r22
    3df2:	7c 01       	movw	r14, r24
    3df4:	d0 e0       	ldi	r29, 0x00	; 0
    3df6:	c0 e0       	ldi	r28, 0x00	; 0
    3df8:	0e 94 37 6d 	call	0xda6e	; 0xda6e <udi_cdc_is_tx_ready>
    3dfc:	81 11       	cpse	r24, r1
    3dfe:	06 c0       	rjmp	.+12     	; 0x3e0c <udi_write_tx_buf+0x36>
    3e00:	df 5f       	subi	r29, 0xFF	; 255
    3e02:	82 e0       	ldi	r24, 0x02	; 2
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	0e 94 fd 67 	call	0xcffa	; 0xcffa <yield_ms>
    3e0a:	23 c0       	rjmp	.+70     	; 0x3e52 <udi_write_tx_buf+0x7c>
    3e0c:	f7 01       	movw	r30, r14
    3e0e:	ec 0f       	add	r30, r28
    3e10:	f1 1d       	adc	r31, r1
    3e12:	80 81       	ld	r24, Z
    3e14:	00 23       	and	r16, r16
    3e16:	49 f0       	breq	.+18     	; 0x3e2a <udi_write_tx_buf+0x54>
    3e18:	28 2f       	mov	r18, r24
    3e1a:	08 2e       	mov	r0, r24
    3e1c:	00 0c       	add	r0, r0
    3e1e:	33 0b       	sbc	r19, r19
    3e20:	20 52       	subi	r18, 0x20	; 32
    3e22:	31 09       	sbc	r19, r1
    3e24:	20 36       	cpi	r18, 0x60	; 96
    3e26:	31 05       	cpc	r19, r1
    3e28:	88 f4       	brcc	.+34     	; 0x3e4c <udi_write_tx_buf+0x76>
    3e2a:	90 91 77 27 	lds	r25, 0x2777	; 0x802777 <g_usb_cdc_access_blocked>
    3e2e:	91 11       	cpse	r25, r1
    3e30:	0d c0       	rjmp	.+26     	; 0x3e4c <udi_write_tx_buf+0x76>
    3e32:	08 2e       	mov	r0, r24
    3e34:	00 0c       	add	r0, r0
    3e36:	99 0b       	sbc	r25, r25
    3e38:	0e 94 88 6d 	call	0xdb10	; 0xdb10 <udi_cdc_putc>
    3e3c:	89 2b       	or	r24, r25
    3e3e:	31 f4       	brne	.+12     	; 0x3e4c <udi_write_tx_buf+0x76>
    3e40:	df 5f       	subi	r29, 0xFF	; 255
    3e42:	82 e0       	ldi	r24, 0x02	; 2
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	0e 94 fd 67 	call	0xcffa	; 0xcffa <yield_ms>
    3e4a:	03 c0       	rjmp	.+6      	; 0x3e52 <udi_write_tx_buf+0x7c>
    3e4c:	cf 5f       	subi	r28, 0xFF	; 255
    3e4e:	d0 e0       	ldi	r29, 0x00	; 0
    3e50:	0a c0       	rjmp	.+20     	; 0x3e66 <udi_write_tx_buf+0x90>
    3e52:	d9 3c       	cpi	r29, 0xC9	; 201
    3e54:	40 f0       	brcs	.+16     	; 0x3e66 <udi_write_tx_buf+0x90>
    3e56:	10 92 78 27 	sts	0x2778, r1	; 0x802778 <g_usb_cdc_transfers_authorized>
    3e5a:	8c 2f       	mov	r24, r28
    3e5c:	07 c0       	rjmp	.+14     	; 0x3e6c <udi_write_tx_buf+0x96>
    3e5e:	61 11       	cpse	r22, r1
    3e60:	c6 cf       	rjmp	.-116    	; 0x3dee <udi_write_tx_buf+0x18>
    3e62:	80 e0       	ldi	r24, 0x00	; 0
    3e64:	03 c0       	rjmp	.+6      	; 0x3e6c <udi_write_tx_buf+0x96>
    3e66:	c1 17       	cp	r28, r17
    3e68:	38 f2       	brcs	.-114    	; 0x3df8 <udi_write_tx_buf+0x22>
    3e6a:	8c 2f       	mov	r24, r28
    3e6c:	df 91       	pop	r29
    3e6e:	cf 91       	pop	r28
    3e70:	1f 91       	pop	r17
    3e72:	0f 91       	pop	r16
    3e74:	ff 90       	pop	r15
    3e76:	ef 90       	pop	r14
    3e78:	08 95       	ret

00003e7a <usb_init>:
    3e7a:	0e 94 d1 71 	call	0xe3a2	; 0xe3a2 <stdio_usb_init>
    3e7e:	80 91 7b 27 	lds	r24, 0x277B	; 0x80277b <g_usb_cdc_stdout_enabled>
    3e82:	81 11       	cpse	r24, r1
    3e84:	0e 94 ca 71 	call	0xe394	; 0xe394 <stdio_usb_enable>
    3e88:	84 ef       	ldi	r24, 0xF4	; 244
    3e8a:	91 e0       	ldi	r25, 0x01	; 1
    3e8c:	0e 94 fd 67 	call	0xcffa	; 0xcffa <yield_ms>
    3e90:	84 ed       	ldi	r24, 0xD4	; 212
    3e92:	96 e0       	ldi	r25, 0x06	; 6
    3e94:	9f 93       	push	r25
    3e96:	8f 93       	push	r24
    3e98:	1f 92       	push	r1
    3e9a:	80 e4       	ldi	r24, 0x40	; 64
    3e9c:	8f 93       	push	r24
    3e9e:	8f e3       	ldi	r24, 0x3F	; 63
    3ea0:	95 e2       	ldi	r25, 0x25	; 37
    3ea2:	9f 93       	push	r25
    3ea4:	8f 93       	push	r24
    3ea6:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    3eaa:	81 34       	cpi	r24, 0x41	; 65
    3eac:	91 05       	cpc	r25, r1
    3eae:	10 f0       	brcs	.+4      	; 0x3eb4 <usb_init+0x3a>
    3eb0:	80 e4       	ldi	r24, 0x40	; 64
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	40 e0       	ldi	r20, 0x00	; 0
    3eb6:	68 2f       	mov	r22, r24
    3eb8:	8f e3       	ldi	r24, 0x3F	; 63
    3eba:	95 e2       	ldi	r25, 0x25	; 37
    3ebc:	8c df       	rcall	.-232    	; 0x3dd6 <udi_write_tx_buf>
    3ebe:	1f 92       	push	r1
    3ec0:	8c e0       	ldi	r24, 0x0C	; 12
    3ec2:	8f 93       	push	r24
    3ec4:	8e ea       	ldi	r24, 0xAE	; 174
    3ec6:	96 e0       	ldi	r25, 0x06	; 6
    3ec8:	9f 93       	push	r25
    3eca:	8f 93       	push	r24
    3ecc:	1f 92       	push	r1
    3ece:	80 e4       	ldi	r24, 0x40	; 64
    3ed0:	8f 93       	push	r24
    3ed2:	8f e3       	ldi	r24, 0x3F	; 63
    3ed4:	95 e2       	ldi	r25, 0x25	; 37
    3ed6:	9f 93       	push	r25
    3ed8:	8f 93       	push	r24
    3eda:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    3ede:	81 34       	cpi	r24, 0x41	; 65
    3ee0:	91 05       	cpc	r25, r1
    3ee2:	10 f0       	brcs	.+4      	; 0x3ee8 <usb_init+0x6e>
    3ee4:	80 e4       	ldi	r24, 0x40	; 64
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	40 e0       	ldi	r20, 0x00	; 0
    3eea:	68 2f       	mov	r22, r24
    3eec:	8f e3       	ldi	r24, 0x3F	; 63
    3eee:	95 e2       	ldi	r25, 0x25	; 37
    3ef0:	72 df       	rcall	.-284    	; 0x3dd6 <udi_write_tx_buf>
    3ef2:	8c e8       	ldi	r24, 0x8C	; 140
    3ef4:	96 e0       	ldi	r25, 0x06	; 6
    3ef6:	9f 93       	push	r25
    3ef8:	8f 93       	push	r24
    3efa:	1f 92       	push	r1
    3efc:	80 e4       	ldi	r24, 0x40	; 64
    3efe:	8f 93       	push	r24
    3f00:	8f e3       	ldi	r24, 0x3F	; 63
    3f02:	95 e2       	ldi	r25, 0x25	; 37
    3f04:	9f 93       	push	r25
    3f06:	8f 93       	push	r24
    3f08:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    3f0c:	81 34       	cpi	r24, 0x41	; 65
    3f0e:	91 05       	cpc	r25, r1
    3f10:	10 f0       	brcs	.+4      	; 0x3f16 <usb_init+0x9c>
    3f12:	80 e4       	ldi	r24, 0x40	; 64
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	40 e0       	ldi	r20, 0x00	; 0
    3f18:	68 2f       	mov	r22, r24
    3f1a:	8f e3       	ldi	r24, 0x3F	; 63
    3f1c:	95 e2       	ldi	r25, 0x25	; 37
    3f1e:	5b df       	rcall	.-330    	; 0x3dd6 <udi_write_tx_buf>
    3f20:	88 e6       	ldi	r24, 0x68	; 104
    3f22:	96 e0       	ldi	r25, 0x06	; 6
    3f24:	9f 93       	push	r25
    3f26:	8f 93       	push	r24
    3f28:	1f 92       	push	r1
    3f2a:	80 e4       	ldi	r24, 0x40	; 64
    3f2c:	8f 93       	push	r24
    3f2e:	8f e3       	ldi	r24, 0x3F	; 63
    3f30:	95 e2       	ldi	r25, 0x25	; 37
    3f32:	9f 93       	push	r25
    3f34:	8f 93       	push	r24
    3f36:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    3f3a:	81 34       	cpi	r24, 0x41	; 65
    3f3c:	91 05       	cpc	r25, r1
    3f3e:	10 f0       	brcs	.+4      	; 0x3f44 <usb_init+0xca>
    3f40:	80 e4       	ldi	r24, 0x40	; 64
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	40 e0       	ldi	r20, 0x00	; 0
    3f46:	68 2f       	mov	r22, r24
    3f48:	8f e3       	ldi	r24, 0x3F	; 63
    3f4a:	95 e2       	ldi	r25, 0x25	; 37
    3f4c:	44 df       	rcall	.-376    	; 0x3dd6 <udi_write_tx_buf>
    3f4e:	8d b7       	in	r24, 0x3d	; 61
    3f50:	9e b7       	in	r25, 0x3e	; 62
    3f52:	4a 96       	adiw	r24, 0x1a	; 26
    3f54:	8d bf       	out	0x3d, r24	; 61
    3f56:	9e bf       	out	0x3e, r25	; 62
    3f58:	08 95       	ret

00003f5a <usb_callback_suspend_action>:
    3f5a:	83 e0       	ldi	r24, 0x03	; 3
    3f5c:	80 93 76 27 	sts	0x2776, r24	; 0x802776 <g_workmode>
    3f60:	08 95       	ret

00003f62 <usb_callback_resume_action>:
    3f62:	82 e0       	ldi	r24, 0x02	; 2
    3f64:	80 93 76 27 	sts	0x2776, r24	; 0x802776 <g_workmode>
    3f68:	08 95       	ret

00003f6a <usb_callback_remotewakeup_enable>:
    3f6a:	08 95       	ret

00003f6c <usb_callback_remotewakeup_disable>:
    3f6c:	08 95       	ret

00003f6e <usb_callback_cdc_enable>:
}

bool usb_callback_cdc_enable(void)
{
	/* USB CDC feature for serial communication */
	g_usb_cdc_transfers_authorized = true;
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	80 93 78 27 	sts	0x2778, r24	; 0x802778 <g_usb_cdc_transfers_authorized>
	return true;
}
    3f74:	08 95       	ret

00003f76 <usb_callback_cdc_disable>:

void usb_callback_cdc_disable(void)
{
	/* USB CDC feature for serial communication */
	g_usb_cdc_transfers_authorized = false;
    3f76:	10 92 78 27 	sts	0x2778, r1	; 0x802778 <g_usb_cdc_transfers_authorized>
    3f7a:	08 95       	ret

00003f7c <usb_callback_config>:
}

void usb_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    3f7c:	08 95       	ret

00003f7e <usb_callback_cdc_set_dtr>:

}

void usb_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
    3f7e:	08 95       	ret

00003f80 <usb_callback_cdc_set_rts>:

}

void usb_callback_cdc_set_rts(uint8_t port, bool b_enable)
{
    3f80:	08 95       	ret

00003f82 <usb_callback_rx_notify>:

}

void usb_callback_rx_notify(uint8_t port)
{
	g_usb_cdc_rx_received = true;
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	80 93 79 27 	sts	0x2779, r24	; 0x802779 <g_usb_cdc_rx_received>
    3f88:	08 95       	ret

00003f8a <usb_callback_tx_empty_notify>:
}

void usb_callback_tx_empty_notify(uint8_t port)
{
	g_usb_cdc_access_blocked = false;
    3f8a:	10 92 77 27 	sts	0x2777, r1	; 0x802777 <g_usb_cdc_access_blocked>
    3f8e:	08 95       	ret

00003f90 <task_usb>:
PROGMEM_DECLARE(const char, PM_INFO_PART_L2P3A[]);
PROGMEM_DECLARE(const char, PM_INFO_PART_L2P3B[]);
PROGMEM_DECLARE(const char, PM_INFO_PART_L2P4[]);

void task_usb(uint32_t now)
{
    3f90:	2f 92       	push	r2
    3f92:	3f 92       	push	r3
    3f94:	4f 92       	push	r4
    3f96:	5f 92       	push	r5
    3f98:	6f 92       	push	r6
    3f9a:	7f 92       	push	r7
    3f9c:	8f 92       	push	r8
    3f9e:	9f 92       	push	r9
    3fa0:	af 92       	push	r10
    3fa2:	bf 92       	push	r11
    3fa4:	cf 92       	push	r12
    3fa6:	df 92       	push	r13
    3fa8:	ef 92       	push	r14
    3faa:	ff 92       	push	r15
    3fac:	0f 93       	push	r16
    3fae:	1f 93       	push	r17
    3fb0:	cf 93       	push	r28
    3fb2:	df 93       	push	r29
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    3fb8:	c2 54       	subi	r28, 0x42	; 66
    3fba:	d1 09       	sbc	r29, r1
    3fbc:	cd bf       	out	0x3d, r28	; 61
    3fbe:	de bf       	out	0x3e, r29	; 62
	/* Monitoring at the USB serial terminal */
	if (g_usb_cdc_transfers_authorized) {
    3fc0:	20 91 78 27 	lds	r18, 0x2778	; 0x802778 <g_usb_cdc_transfers_authorized>
    3fc4:	22 23       	and	r18, r18
    3fc6:	09 f4       	brne	.+2      	; 0x3fca <task_usb+0x3a>
    3fc8:	ae c3       	rjmp	.+1884   	; 0x4726 <task_usb+0x796>
    3fca:	6b 01       	movw	r12, r22
    3fcc:	7c 01       	movw	r14, r24
		static uint32_t usb_last = 0UL;

		/* Get command lines from the USB host */
		if (g_usb_cdc_rx_received) {
    3fce:	80 91 79 27 	lds	r24, 0x2779	; 0x802779 <g_usb_cdc_rx_received>
    3fd2:	88 23       	and	r24, r24
    3fd4:	d1 f1       	breq	.+116    	; 0x404a <task_usb+0xba>
			g_usb_cdc_rx_received = false;
    3fd6:	10 92 79 27 	sts	0x2779, r1	; 0x802779 <g_usb_cdc_rx_received>
	if (!g_usb_cdc_transfers_authorized) {
		return;
	}

	/* Single thread only */
	if (!sched_getLock(&g_interpreter_lock)) {
    3fda:	82 e8       	ldi	r24, 0x82	; 130
    3fdc:	96 e2       	ldi	r25, 0x26	; 38
    3fde:	0e 94 eb 62 	call	0xc5d6	; 0xc5d6 <sched_getLock>
    3fe2:	88 23       	and	r24, r24
    3fe4:	91 f1       	breq	.+100    	; 0x404a <task_usb+0xba>
		return;
	}

	/* Get command lines from the USB host */
	iram_size_t cdc_rx_len = udi_cdc_get_nb_received_data();
    3fe6:	0e 94 89 6b 	call	0xd712	; 0xd712 <udi_cdc_get_nb_received_data>
    3fea:	8c 01       	movw	r16, r24
	cdc_rx_len = min(cdc_rx_len, sizeof(cdc_rx_buf));
    3fec:	05 97       	sbiw	r24, 0x05	; 5
    3fee:	10 f0       	brcs	.+4      	; 0x3ff4 <task_usb+0x64>
    3ff0:	04 e0       	ldi	r16, 0x04	; 4
    3ff2:	10 e0       	ldi	r17, 0x00	; 0
	while (cdc_rx_len) {
    3ff4:	01 15       	cp	r16, r1
    3ff6:	11 05       	cpc	r17, r1
    3ff8:	21 f1       	breq	.+72     	; 0x4042 <task_usb+0xb2>
		if (g_keyBeep_enable) {
    3ffa:	80 91 7c 27 	lds	r24, 0x277C	; 0x80277c <g_keyBeep_enable>
    3ffe:	88 23       	and	r24, r24
    4000:	41 f0       	breq	.+16     	; 0x4012 <task_usb+0x82>
			twi2_set_beep(176, 1);  // Click sound
    4002:	61 e0       	ldi	r22, 0x01	; 1
    4004:	80 eb       	ldi	r24, 0xB0	; 176
    4006:	0e 94 85 31 	call	0x630a	; 0x630a <twi2_set_beep>
			yield_ms(10);
    400a:	8a e0       	ldi	r24, 0x0A	; 10
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	0e 94 fd 67 	call	0xcffa	; 0xcffa <yield_ms>
		}

		/* Read the data block */
		udi_cdc_read_no_polling(cdc_rx_buf, cdc_rx_len);
    4012:	b8 01       	movw	r22, r16
    4014:	ce 01       	movw	r24, r28
    4016:	01 96       	adiw	r24, 0x01	; 1
    4018:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <udi_cdc_read_no_polling>

		/* Echo back when not monitoring information are enabled */
		if (!g_usb_cdc_printStatusLines) {
    401c:	80 91 7a 27 	lds	r24, 0x277A	; 0x80277a <g_usb_cdc_printStatusLines>
    4020:	81 11       	cpse	r24, r1
    4022:	05 c0       	rjmp	.+10     	; 0x402e <task_usb+0x9e>
			udi_write_tx_buf(cdc_rx_buf, cdc_rx_len, true);
    4024:	41 e0       	ldi	r20, 0x01	; 1
    4026:	60 2f       	mov	r22, r16
    4028:	ce 01       	movw	r24, r28
    402a:	01 96       	adiw	r24, 0x01	; 1
    402c:	d4 de       	rcall	.-600    	; 0x3dd6 <udi_write_tx_buf>
		}

		/* Call the interpreter */
		interpreter_doProcess(cdc_rx_buf, cdc_rx_len);
    402e:	b8 01       	movw	r22, r16
    4030:	ce 01       	movw	r24, r28
    4032:	01 96       	adiw	r24, 0x01	; 1
    4034:	0e 94 4b 28 	call	0x5096	; 0x5096 <interpreter_doProcess>

		/* Check for more available data */
		cdc_rx_len = udi_cdc_get_nb_received_data();
    4038:	0e 94 89 6b 	call	0xd712	; 0xd712 <udi_cdc_get_nb_received_data>
    403c:	8c 01       	movw	r16, r24
	}

	/* Get command lines from the USB host */
	iram_size_t cdc_rx_len = udi_cdc_get_nb_received_data();
	cdc_rx_len = min(cdc_rx_len, sizeof(cdc_rx_buf));
	while (cdc_rx_len) {
    403e:	89 2b       	or	r24, r25
    4040:	e1 f6       	brne	.-72     	; 0x3ffa <task_usb+0x6a>
		/* Check for more available data */
		cdc_rx_len = udi_cdc_get_nb_received_data();
	}

	/* Release this lock */
	sched_freeLock(&g_interpreter_lock);
    4042:	82 e8       	ldi	r24, 0x82	; 130
    4044:	96 e2       	ldi	r25, 0x26	; 38
    4046:	0e 94 03 63 	call	0xc606	; 0xc606 <sched_freeLock>
			g_usb_cdc_rx_received = false;
			usb_rx_process(now);
		}

		/* Status output when requested */
		if (g_usb_cdc_printStatusLines) {
    404a:	80 91 7a 27 	lds	r24, 0x277A	; 0x80277a <g_usb_cdc_printStatusLines>
    404e:	88 23       	and	r24, r24
    4050:	09 f4       	brne	.+2      	; 0x4054 <task_usb+0xc4>
    4052:	69 c3       	rjmp	.+1746   	; 0x4726 <task_usb+0x796>
			if (((now - usb_last) >= 512) || (now < usb_last)) {
    4054:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <__data_end>
    4058:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <__data_end+0x1>
    405c:	a0 91 d2 21 	lds	r26, 0x21D2	; 0x8021d2 <__data_end+0x2>
    4060:	b0 91 d3 21 	lds	r27, 0x21D3	; 0x8021d3 <__data_end+0x3>
    4064:	b7 01       	movw	r22, r14
    4066:	a6 01       	movw	r20, r12
    4068:	48 1b       	sub	r20, r24
    406a:	59 0b       	sbc	r21, r25
    406c:	6a 0b       	sbc	r22, r26
    406e:	7b 0b       	sbc	r23, r27
    4070:	41 15       	cp	r20, r1
    4072:	52 40       	sbci	r21, 0x02	; 2
    4074:	61 05       	cpc	r22, r1
    4076:	71 05       	cpc	r23, r1
    4078:	30 f4       	brcc	.+12     	; 0x4086 <task_usb+0xf6>
    407a:	c8 16       	cp	r12, r24
    407c:	d9 06       	cpc	r13, r25
    407e:	ea 06       	cpc	r14, r26
    4080:	fb 06       	cpc	r15, r27
    4082:	08 f0       	brcs	.+2      	; 0x4086 <task_usb+0xf6>
    4084:	50 c3       	rjmp	.+1696   	; 0x4726 <task_usb+0x796>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4086:	8f b7       	in	r24, 0x3f	; 63
    4088:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    408a:	f8 94       	cli
	return flags;
    408c:	69 81       	ldd	r22, Y+1	; 0x01
				int32_t	l_twi1_gyro_2_mag_z_nT;

				/* Getting a copy of the values */
				{
					irqflags_t flags			= cpu_irq_save();
					l_adc_vctcxo_volt_1000		= g_adc_vctcxo_volt_1000;
    408e:	30 91 90 26 	lds	r19, 0x2690	; 0x802690 <g_adc_vctcxo_volt_1000>
    4092:	22 96       	adiw	r28, 0x02	; 2
    4094:	3f af       	std	Y+63, r19	; 0x3f
    4096:	22 97       	sbiw	r28, 0x02	; 2
    4098:	70 91 91 26 	lds	r23, 0x2691	; 0x802691 <g_adc_vctcxo_volt_1000+0x1>
    409c:	23 96       	adiw	r28, 0x03	; 3
    409e:	7f af       	std	Y+63, r23	; 0x3f
    40a0:	23 97       	sbiw	r28, 0x03	; 3
					l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    40a2:	20 91 8e 26 	lds	r18, 0x268E	; 0x80268e <g_adc_5v0_volt_1000>
    40a6:	30 91 8f 26 	lds	r19, 0x268F	; 0x80268f <g_adc_5v0_volt_1000+0x1>
					l_adc_vbat_volt_1000		= g_adc_vbat_volt_1000;
    40aa:	40 91 8c 26 	lds	r20, 0x268C	; 0x80268c <g_adc_vbat_volt_1000>
    40ae:	50 91 8d 26 	lds	r21, 0x268D	; 0x80268d <g_adc_vbat_volt_1000+0x1>
					l_adc_io_adc4_volt_1000		= g_adc_io_adc4_volt_1000;
    40b2:	80 91 8a 26 	lds	r24, 0x268A	; 0x80268a <g_adc_io_adc4_volt_1000>
    40b6:	8b a7       	std	Y+43, r24	; 0x2b
    40b8:	90 91 8b 26 	lds	r25, 0x268B	; 0x80268b <g_adc_io_adc4_volt_1000+0x1>
    40bc:	9c a7       	std	Y+44, r25	; 0x2c
					l_adc_io_adc5_volt_1000		= g_adc_io_adc5_volt_1000;
    40be:	20 90 88 26 	lds	r2, 0x2688	; 0x802688 <g_adc_io_adc5_volt_1000>
    40c2:	30 90 89 26 	lds	r3, 0x2689	; 0x802689 <g_adc_io_adc5_volt_1000+0x1>
					l_adc_silence_volt_1000		= g_adc_silence_volt_1000;
    40c6:	00 91 86 26 	lds	r16, 0x2686	; 0x802686 <g_adc_silence_volt_1000>
    40ca:	10 91 87 26 	lds	r17, 0x2687	; 0x802687 <g_adc_silence_volt_1000+0x1>
					l_adc_temp_deg_100			= g_adc_temp_deg_100;
    40ce:	a0 91 84 26 	lds	r26, 0x2684	; 0x802684 <g_adc_temp_deg_100>
    40d2:	b0 91 85 26 	lds	r27, 0x2685	; 0x802685 <g_adc_temp_deg_100+0x1>
    40d6:	ad 83       	std	Y+5, r26	; 0x05
    40d8:	be 83       	std	Y+6, r27	; 0x06
					l_twi1_baro_temp_100		= g_twi1_baro_temp_100;
    40da:	80 90 0a 27 	lds	r8, 0x270A	; 0x80270a <g_twi1_baro_temp_100>
    40de:	90 90 0b 27 	lds	r9, 0x270B	; 0x80270b <g_twi1_baro_temp_100+0x1>
    40e2:	a0 90 0c 27 	lds	r10, 0x270C	; 0x80270c <g_twi1_baro_temp_100+0x2>
    40e6:	b0 90 0d 27 	lds	r11, 0x270D	; 0x80270d <g_twi1_baro_temp_100+0x3>
					l_twi1_baro_p_100			= g_twi1_baro_p_100;
    40ea:	40 90 06 27 	lds	r4, 0x2706	; 0x802706 <g_twi1_baro_p_100>
    40ee:	50 90 07 27 	lds	r5, 0x2707	; 0x802707 <g_twi1_baro_p_100+0x1>
    40f2:	60 90 08 27 	lds	r6, 0x2708	; 0x802708 <g_twi1_baro_p_100+0x2>
    40f6:	70 90 09 27 	lds	r7, 0x2709	; 0x802709 <g_twi1_baro_p_100+0x3>
					l_twi1_hygro_T_100			= g_twi1_hygro_T_100;
    40fa:	e0 91 fe 26 	lds	r30, 0x26FE	; 0x8026fe <g_twi1_hygro_T_100>
    40fe:	f0 91 ff 26 	lds	r31, 0x26FF	; 0x8026ff <g_twi1_hygro_T_100+0x1>
    4102:	ef 83       	std	Y+7, r30	; 0x07
    4104:	f8 87       	std	Y+8, r31	; 0x08
					l_twi1_hygro_RH_100			= g_twi1_hygro_RH_100;
    4106:	80 91 fc 26 	lds	r24, 0x26FC	; 0x8026fc <g_twi1_hygro_RH_100>
    410a:	90 91 fd 26 	lds	r25, 0x26FD	; 0x8026fd <g_twi1_hygro_RH_100+0x1>
    410e:	89 87       	std	Y+9, r24	; 0x09
    4110:	9a 87       	std	Y+10, r25	; 0x0a
					l_twi1_gyro_1_accel_x		= g_twi1_gyro_1_accel_x;
    4112:	90 91 5b 27 	lds	r25, 0x275B	; 0x80275b <g_twi1_gyro_1_accel_x>
    4116:	9d a7       	std	Y+45, r25	; 0x2d
    4118:	a0 91 5c 27 	lds	r26, 0x275C	; 0x80275c <g_twi1_gyro_1_accel_x+0x1>
    411c:	ae a7       	std	Y+46, r26	; 0x2e
					l_twi1_gyro_1_accel_y		= g_twi1_gyro_1_accel_y;
    411e:	b0 91 59 27 	lds	r27, 0x2759	; 0x802759 <g_twi1_gyro_1_accel_y>
    4122:	bf a7       	std	Y+47, r27	; 0x2f
    4124:	e0 91 5a 27 	lds	r30, 0x275A	; 0x80275a <g_twi1_gyro_1_accel_y+0x1>
    4128:	e8 ab       	std	Y+48, r30	; 0x30
					l_twi1_gyro_1_accel_z		= g_twi1_gyro_1_accel_z;
    412a:	f0 91 57 27 	lds	r31, 0x2757	; 0x802757 <g_twi1_gyro_1_accel_z>
    412e:	f9 ab       	std	Y+49, r31	; 0x31
    4130:	70 91 58 27 	lds	r23, 0x2758	; 0x802758 <g_twi1_gyro_1_accel_z+0x1>
    4134:	7a ab       	std	Y+50, r23	; 0x32
					l_twi1_gyro_1_accel_x_mg	= g_twi1_gyro_1_accel_x_mg;
    4136:	80 91 55 27 	lds	r24, 0x2755	; 0x802755 <g_twi1_gyro_1_accel_x_mg>
    413a:	90 91 56 27 	lds	r25, 0x2756	; 0x802756 <g_twi1_gyro_1_accel_x_mg+0x1>
    413e:	8b 87       	std	Y+11, r24	; 0x0b
    4140:	9c 87       	std	Y+12, r25	; 0x0c
					l_twi1_gyro_1_accel_y_mg	= g_twi1_gyro_1_accel_y_mg;
    4142:	a0 91 53 27 	lds	r26, 0x2753	; 0x802753 <g_twi1_gyro_1_accel_y_mg>
    4146:	b0 91 54 27 	lds	r27, 0x2754	; 0x802754 <g_twi1_gyro_1_accel_y_mg+0x1>
    414a:	ad 87       	std	Y+13, r26	; 0x0d
    414c:	be 87       	std	Y+14, r27	; 0x0e
					l_twi1_gyro_1_accel_z_mg	= g_twi1_gyro_1_accel_z_mg;
    414e:	e0 91 51 27 	lds	r30, 0x2751	; 0x802751 <g_twi1_gyro_1_accel_z_mg>
    4152:	f0 91 52 27 	lds	r31, 0x2752	; 0x802752 <g_twi1_gyro_1_accel_z_mg+0x1>
    4156:	ef 87       	std	Y+15, r30	; 0x0f
    4158:	f8 8b       	std	Y+16, r31	; 0x10
					l_twi1_gyro_1_gyro_x		= g_twi1_gyro_1_gyro_x;
    415a:	f0 91 4f 27 	lds	r31, 0x274F	; 0x80274f <g_twi1_gyro_1_gyro_x>
    415e:	fb ab       	std	Y+51, r31	; 0x33
    4160:	70 91 50 27 	lds	r23, 0x2750	; 0x802750 <g_twi1_gyro_1_gyro_x+0x1>
    4164:	7c ab       	std	Y+52, r23	; 0x34
					l_twi1_gyro_1_gyro_y		= g_twi1_gyro_1_gyro_y;
    4166:	80 91 4d 27 	lds	r24, 0x274D	; 0x80274d <g_twi1_gyro_1_gyro_y>
    416a:	8d ab       	std	Y+53, r24	; 0x35
    416c:	90 91 4e 27 	lds	r25, 0x274E	; 0x80274e <g_twi1_gyro_1_gyro_y+0x1>
    4170:	9e ab       	std	Y+54, r25	; 0x36
					l_twi1_gyro_1_gyro_z		= g_twi1_gyro_1_gyro_z;
    4172:	a0 91 4b 27 	lds	r26, 0x274B	; 0x80274b <g_twi1_gyro_1_gyro_z>
    4176:	af ab       	std	Y+55, r26	; 0x37
    4178:	b0 91 4c 27 	lds	r27, 0x274C	; 0x80274c <g_twi1_gyro_1_gyro_z+0x1>
    417c:	b8 af       	std	Y+56, r27	; 0x38
					l_twi1_gyro_1_gyro_x_mdps	= g_twi1_gyro_1_gyro_x_mdps;
    417e:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <g_twi1_gyro_1_gyro_x_mdps>
    4182:	90 91 48 27 	lds	r25, 0x2748	; 0x802748 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    4186:	a0 91 49 27 	lds	r26, 0x2749	; 0x802749 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    418a:	b0 91 4a 27 	lds	r27, 0x274A	; 0x80274a <g_twi1_gyro_1_gyro_x_mdps+0x3>
    418e:	89 8b       	std	Y+17, r24	; 0x11
    4190:	9a 8b       	std	Y+18, r25	; 0x12
    4192:	ab 8b       	std	Y+19, r26	; 0x13
    4194:	bc 8b       	std	Y+20, r27	; 0x14
					l_twi1_gyro_1_gyro_y_mdps	= g_twi1_gyro_1_gyro_y_mdps;
    4196:	80 91 43 27 	lds	r24, 0x2743	; 0x802743 <g_twi1_gyro_1_gyro_y_mdps>
    419a:	90 91 44 27 	lds	r25, 0x2744	; 0x802744 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    419e:	a0 91 45 27 	lds	r26, 0x2745	; 0x802745 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    41a2:	b0 91 46 27 	lds	r27, 0x2746	; 0x802746 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    41a6:	8d 8b       	std	Y+21, r24	; 0x15
    41a8:	9e 8b       	std	Y+22, r25	; 0x16
    41aa:	af 8b       	std	Y+23, r26	; 0x17
    41ac:	b8 8f       	std	Y+24, r27	; 0x18
					l_twi1_gyro_1_gyro_z_mdps	= g_twi1_gyro_1_gyro_z_mdps;
    41ae:	80 91 3f 27 	lds	r24, 0x273F	; 0x80273f <g_twi1_gyro_1_gyro_z_mdps>
    41b2:	90 91 40 27 	lds	r25, 0x2740	; 0x802740 <g_twi1_gyro_1_gyro_z_mdps+0x1>
    41b6:	a0 91 41 27 	lds	r26, 0x2741	; 0x802741 <g_twi1_gyro_1_gyro_z_mdps+0x2>
    41ba:	b0 91 42 27 	lds	r27, 0x2742	; 0x802742 <g_twi1_gyro_1_gyro_z_mdps+0x3>
    41be:	89 8f       	std	Y+25, r24	; 0x19
    41c0:	9a 8f       	std	Y+26, r25	; 0x1a
    41c2:	ab 8f       	std	Y+27, r26	; 0x1b
    41c4:	bc 8f       	std	Y+28, r27	; 0x1c
					l_twi1_gyro_1_temp			= g_twi1_gyro_1_temp;
    41c6:	90 91 61 27 	lds	r25, 0x2761	; 0x802761 <g_twi1_gyro_1_temp>
    41ca:	99 af       	std	Y+57, r25	; 0x39
    41cc:	a0 91 62 27 	lds	r26, 0x2762	; 0x802762 <g_twi1_gyro_1_temp+0x1>
    41d0:	aa af       	std	Y+58, r26	; 0x3a
					l_twi1_gyro_1_temp_deg_100	= g_twi1_gyro_1_temp_deg_100;
    41d2:	e0 91 5d 27 	lds	r30, 0x275D	; 0x80275d <g_twi1_gyro_1_temp_deg_100>
    41d6:	f0 91 5e 27 	lds	r31, 0x275E	; 0x80275e <g_twi1_gyro_1_temp_deg_100+0x1>
    41da:	ed 8f       	std	Y+29, r30	; 0x1d
    41dc:	fe 8f       	std	Y+30, r31	; 0x1e
					l_twi1_gyro_2_mag_x			= g_twi1_gyro_2_mag_x;
    41de:	f0 91 39 27 	lds	r31, 0x2739	; 0x802739 <g_twi1_gyro_2_mag_x>
    41e2:	fb af       	std	Y+59, r31	; 0x3b
    41e4:	70 91 3a 27 	lds	r23, 0x273A	; 0x80273a <g_twi1_gyro_2_mag_x+0x1>
    41e8:	7c af       	std	Y+60, r23	; 0x3c
					l_twi1_gyro_2_mag_y			= g_twi1_gyro_2_mag_y;
    41ea:	80 91 37 27 	lds	r24, 0x2737	; 0x802737 <g_twi1_gyro_2_mag_y>
    41ee:	8d af       	std	Y+61, r24	; 0x3d
    41f0:	90 91 38 27 	lds	r25, 0x2738	; 0x802738 <g_twi1_gyro_2_mag_y+0x1>
    41f4:	9e af       	std	Y+62, r25	; 0x3e
					l_twi1_gyro_2_mag_z			= g_twi1_gyro_2_mag_z;
    41f6:	a0 91 35 27 	lds	r26, 0x2735	; 0x802735 <g_twi1_gyro_2_mag_z>
    41fa:	af af       	std	Y+63, r26	; 0x3f
    41fc:	b0 91 36 27 	lds	r27, 0x2736	; 0x802736 <g_twi1_gyro_2_mag_z+0x1>
    4200:	21 96       	adiw	r28, 0x01	; 1
    4202:	bf af       	std	Y+63, r27	; 0x3f
    4204:	21 97       	sbiw	r28, 0x01	; 1
					l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
    4206:	80 91 31 27 	lds	r24, 0x2731	; 0x802731 <g_twi1_gyro_2_mag_x_nT>
    420a:	90 91 32 27 	lds	r25, 0x2732	; 0x802732 <g_twi1_gyro_2_mag_x_nT+0x1>
    420e:	a0 91 33 27 	lds	r26, 0x2733	; 0x802733 <g_twi1_gyro_2_mag_x_nT+0x2>
    4212:	b0 91 34 27 	lds	r27, 0x2734	; 0x802734 <g_twi1_gyro_2_mag_x_nT+0x3>
    4216:	8f 8f       	std	Y+31, r24	; 0x1f
    4218:	98 a3       	std	Y+32, r25	; 0x20
    421a:	a9 a3       	std	Y+33, r26	; 0x21
    421c:	ba a3       	std	Y+34, r27	; 0x22
					l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
    421e:	80 91 2d 27 	lds	r24, 0x272D	; 0x80272d <g_twi1_gyro_2_mag_y_nT>
    4222:	90 91 2e 27 	lds	r25, 0x272E	; 0x80272e <g_twi1_gyro_2_mag_y_nT+0x1>
    4226:	a0 91 2f 27 	lds	r26, 0x272F	; 0x80272f <g_twi1_gyro_2_mag_y_nT+0x2>
    422a:	b0 91 30 27 	lds	r27, 0x2730	; 0x802730 <g_twi1_gyro_2_mag_y_nT+0x3>
    422e:	8b a3       	std	Y+35, r24	; 0x23
    4230:	9c a3       	std	Y+36, r25	; 0x24
    4232:	ad a3       	std	Y+37, r26	; 0x25
    4234:	be a3       	std	Y+38, r27	; 0x26
					l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
    4236:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <g_twi1_gyro_2_mag_z_nT>
    423a:	90 91 2a 27 	lds	r25, 0x272A	; 0x80272a <g_twi1_gyro_2_mag_z_nT+0x1>
    423e:	a0 91 2b 27 	lds	r26, 0x272B	; 0x80272b <g_twi1_gyro_2_mag_z_nT+0x2>
    4242:	b0 91 2c 27 	lds	r27, 0x272C	; 0x80272c <g_twi1_gyro_2_mag_z_nT+0x3>
    4246:	8f a3       	std	Y+39, r24	; 0x27
    4248:	98 a7       	std	Y+40, r25	; 0x28
    424a:	a9 a7       	std	Y+41, r26	; 0x29
    424c:	ba a7       	std	Y+42, r27	; 0x2a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    424e:	6f bf       	out	0x3f, r22	; 63
					cpu_irq_restore(flags);
				}

				int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1A,
    4250:	5f 93       	push	r21
    4252:	4f 93       	push	r20
    4254:	3f 93       	push	r19
    4256:	2f 93       	push	r18
    4258:	23 96       	adiw	r28, 0x03	; 3
    425a:	9f ad       	ldd	r25, Y+63	; 0x3f
    425c:	23 97       	sbiw	r28, 0x03	; 3
    425e:	9f 93       	push	r25
    4260:	22 96       	adiw	r28, 0x02	; 2
    4262:	af ad       	ldd	r26, Y+63	; 0x3f
    4264:	22 97       	sbiw	r28, 0x02	; 2
    4266:	af 93       	push	r26
    4268:	d7 01       	movw	r26, r14
    426a:	c6 01       	movw	r24, r12
    426c:	07 2e       	mov	r0, r23
    426e:	7a e0       	ldi	r23, 0x0A	; 10
    4270:	b6 95       	lsr	r27
    4272:	a7 95       	ror	r26
    4274:	97 95       	ror	r25
    4276:	87 95       	ror	r24
    4278:	7a 95       	dec	r23
    427a:	d1 f7       	brne	.-12     	; 0x4270 <task_usb+0x2e0>
    427c:	70 2d       	mov	r23, r0
    427e:	bf 93       	push	r27
    4280:	af 93       	push	r26
    4282:	9f 93       	push	r25
    4284:	8f 93       	push	r24
    4286:	83 e3       	ldi	r24, 0x33	; 51
    4288:	96 e0       	ldi	r25, 0x06	; 6
    428a:	9f 93       	push	r25
    428c:	8f 93       	push	r24
    428e:	1f 92       	push	r1
    4290:	80 e4       	ldi	r24, 0x40	; 64
    4292:	8f 93       	push	r24
    4294:	8f e3       	ldi	r24, 0x3F	; 63
    4296:	95 e2       	ldi	r25, 0x25	; 37
    4298:	9f 93       	push	r25
    429a:	8f 93       	push	r24
    429c:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				now >> 10,
				l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    42a0:	81 34       	cpi	r24, 0x41	; 65
    42a2:	91 05       	cpc	r25, r1
    42a4:	10 f0       	brcs	.+4      	; 0x42aa <task_usb+0x31a>
    42a6:	80 e4       	ldi	r24, 0x40	; 64
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	40 e0       	ldi	r20, 0x00	; 0
    42ac:	68 2f       	mov	r22, r24
    42ae:	8f e3       	ldi	r24, 0x3F	; 63
    42b0:	95 e2       	ldi	r25, 0x25	; 37
    42b2:	91 dd       	rcall	.-1246   	; 0x3dd6 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1B,
    42b4:	1f 93       	push	r17
    42b6:	0f 93       	push	r16
    42b8:	3f 92       	push	r3
    42ba:	2f 92       	push	r2
    42bc:	bc a5       	ldd	r27, Y+44	; 0x2c
    42be:	bf 93       	push	r27
    42c0:	eb a5       	ldd	r30, Y+43	; 0x2b
    42c2:	ef 93       	push	r30
    42c4:	89 e0       	ldi	r24, 0x09	; 9
    42c6:	96 e0       	ldi	r25, 0x06	; 6
    42c8:	9f 93       	push	r25
    42ca:	8f 93       	push	r24
    42cc:	1f 92       	push	r1
    42ce:	80 e4       	ldi	r24, 0x40	; 64
    42d0:	8f 93       	push	r24
    42d2:	8f e3       	ldi	r24, 0x3F	; 63
    42d4:	95 e2       	ldi	r25, 0x25	; 37
    42d6:	9f 93       	push	r25
    42d8:	8f 93       	push	r24
    42da:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    42de:	81 34       	cpi	r24, 0x41	; 65
    42e0:	91 05       	cpc	r25, r1
    42e2:	10 f0       	brcs	.+4      	; 0x42e8 <task_usb+0x358>
    42e4:	80 e4       	ldi	r24, 0x40	; 64
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	40 e0       	ldi	r20, 0x00	; 0
    42ea:	68 2f       	mov	r22, r24
    42ec:	8f e3       	ldi	r24, 0x3F	; 63
    42ee:	95 e2       	ldi	r25, 0x25	; 37
    42f0:	72 dd       	rcall	.-1308   	; 0x3dd6 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1C,
    42f2:	2d 81       	ldd	r18, Y+5	; 0x05
    42f4:	3e 81       	ldd	r19, Y+6	; 0x06
    42f6:	b9 01       	movw	r22, r18
    42f8:	33 0f       	add	r19, r19
    42fa:	88 0b       	sbc	r24, r24
    42fc:	99 0b       	sbc	r25, r25
    42fe:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    4302:	20 e0       	ldi	r18, 0x00	; 0
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	48 ec       	ldi	r20, 0xC8	; 200
    4308:	52 e4       	ldi	r21, 0x42	; 66
    430a:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    430e:	9f 93       	push	r25
    4310:	8f 93       	push	r24
    4312:	7f 93       	push	r23
    4314:	6f 93       	push	r22
    4316:	85 ef       	ldi	r24, 0xF5	; 245
    4318:	95 e0       	ldi	r25, 0x05	; 5
    431a:	9f 93       	push	r25
    431c:	8f 93       	push	r24
    431e:	1f 92       	push	r1
    4320:	80 e4       	ldi	r24, 0x40	; 64
    4322:	8f 93       	push	r24
    4324:	8f e3       	ldi	r24, 0x3F	; 63
    4326:	95 e2       	ldi	r25, 0x25	; 37
    4328:	9f 93       	push	r25
    432a:	8f 93       	push	r24
    432c:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				l_adc_temp_deg_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4330:	cd bf       	out	0x3d, r28	; 61
    4332:	de bf       	out	0x3e, r29	; 62
    4334:	81 34       	cpi	r24, 0x41	; 65
    4336:	91 05       	cpc	r25, r1
    4338:	10 f0       	brcs	.+4      	; 0x433e <task_usb+0x3ae>
    433a:	80 e4       	ldi	r24, 0x40	; 64
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	40 e0       	ldi	r20, 0x00	; 0
    4340:	68 2f       	mov	r22, r24
    4342:	8f e3       	ldi	r24, 0x3F	; 63
    4344:	95 e2       	ldi	r25, 0x25	; 37
    4346:	47 dd       	rcall	.-1394   	; 0x3dd6 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P2,
    4348:	c3 01       	movw	r24, r6
    434a:	b2 01       	movw	r22, r4
    434c:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	48 ec       	ldi	r20, 0xC8	; 200
    4356:	52 e4       	ldi	r21, 0x42	; 66
    4358:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    435c:	9f 93       	push	r25
    435e:	8f 93       	push	r24
    4360:	7f 93       	push	r23
    4362:	6f 93       	push	r22
    4364:	c5 01       	movw	r24, r10
    4366:	b4 01       	movw	r22, r8
    4368:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    436c:	20 e0       	ldi	r18, 0x00	; 0
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	48 ec       	ldi	r20, 0xC8	; 200
    4372:	52 e4       	ldi	r21, 0x42	; 66
    4374:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    4378:	9f 93       	push	r25
    437a:	8f 93       	push	r24
    437c:	7f 93       	push	r23
    437e:	6f 93       	push	r22
    4380:	8e ec       	ldi	r24, 0xCE	; 206
    4382:	95 e0       	ldi	r25, 0x05	; 5
    4384:	9f 93       	push	r25
    4386:	8f 93       	push	r24
    4388:	1f 92       	push	r1
    438a:	80 e4       	ldi	r24, 0x40	; 64
    438c:	8f 93       	push	r24
    438e:	8f e3       	ldi	r24, 0x3F	; 63
    4390:	95 e2       	ldi	r25, 0x25	; 37
    4392:	9f 93       	push	r25
    4394:	8f 93       	push	r24
    4396:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				l_twi1_baro_temp_100 / 100.f, l_twi1_baro_p_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    439a:	81 34       	cpi	r24, 0x41	; 65
    439c:	91 05       	cpc	r25, r1
    439e:	10 f0       	brcs	.+4      	; 0x43a4 <task_usb+0x414>
    43a0:	80 e4       	ldi	r24, 0x40	; 64
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	40 e0       	ldi	r20, 0x00	; 0
    43a6:	68 2f       	mov	r22, r24
    43a8:	8f e3       	ldi	r24, 0x3F	; 63
    43aa:	95 e2       	ldi	r25, 0x25	; 37
    43ac:	14 dd       	rcall	.-1496   	; 0x3dd6 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P3,
    43ae:	e9 85       	ldd	r30, Y+9	; 0x09
    43b0:	fa 85       	ldd	r31, Y+10	; 0x0a
    43b2:	bf 01       	movw	r22, r30
    43b4:	ff 0f       	add	r31, r31
    43b6:	88 0b       	sbc	r24, r24
    43b8:	99 0b       	sbc	r25, r25
    43ba:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    43be:	20 e0       	ldi	r18, 0x00	; 0
    43c0:	30 e0       	ldi	r19, 0x00	; 0
    43c2:	48 ec       	ldi	r20, 0xC8	; 200
    43c4:	52 e4       	ldi	r21, 0x42	; 66
    43c6:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    43ca:	9f 93       	push	r25
    43cc:	8f 93       	push	r24
    43ce:	7f 93       	push	r23
    43d0:	6f 93       	push	r22
    43d2:	2f 81       	ldd	r18, Y+7	; 0x07
    43d4:	38 85       	ldd	r19, Y+8	; 0x08
    43d6:	b9 01       	movw	r22, r18
    43d8:	33 0f       	add	r19, r19
    43da:	88 0b       	sbc	r24, r24
    43dc:	99 0b       	sbc	r25, r25
    43de:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	48 ec       	ldi	r20, 0xC8	; 200
    43e8:	52 e4       	ldi	r21, 0x42	; 66
    43ea:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    43ee:	9f 93       	push	r25
    43f0:	8f 93       	push	r24
    43f2:	7f 93       	push	r23
    43f4:	6f 93       	push	r22
    43f6:	83 ea       	ldi	r24, 0xA3	; 163
    43f8:	95 e0       	ldi	r25, 0x05	; 5
    43fa:	9f 93       	push	r25
    43fc:	8f 93       	push	r24
    43fe:	1f 92       	push	r1
    4400:	80 e4       	ldi	r24, 0x40	; 64
    4402:	8f 93       	push	r24
    4404:	8f e3       	ldi	r24, 0x3F	; 63
    4406:	95 e2       	ldi	r25, 0x25	; 37
    4408:	9f 93       	push	r25
    440a:	8f 93       	push	r24
    440c:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				l_twi1_hygro_T_100 / 100.f, l_twi1_hygro_RH_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4410:	81 34       	cpi	r24, 0x41	; 65
    4412:	91 05       	cpc	r25, r1
    4414:	10 f0       	brcs	.+4      	; 0x441a <task_usb+0x48a>
    4416:	80 e4       	ldi	r24, 0x40	; 64
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	40 e0       	ldi	r20, 0x00	; 0
    441c:	68 2f       	mov	r22, r24
    441e:	8f e3       	ldi	r24, 0x3F	; 63
    4420:	95 e2       	ldi	r25, 0x25	; 37
    4422:	d9 dc       	rcall	.-1614   	; 0x3dd6 <udi_write_tx_buf>


				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P1A,
    4424:	38 a9       	ldd	r19, Y+48	; 0x30
    4426:	3f 93       	push	r19
    4428:	7f a5       	ldd	r23, Y+47	; 0x2f
    442a:	7f 93       	push	r23
    442c:	ad 85       	ldd	r26, Y+13	; 0x0d
    442e:	be 85       	ldd	r27, Y+14	; 0x0e
    4430:	bd 01       	movw	r22, r26
    4432:	bb 0f       	add	r27, r27
    4434:	88 0b       	sbc	r24, r24
    4436:	99 0b       	sbc	r25, r25
    4438:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    443c:	20 e0       	ldi	r18, 0x00	; 0
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	4a e7       	ldi	r20, 0x7A	; 122
    4442:	54 e4       	ldi	r21, 0x44	; 68
    4444:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    4448:	9f 93       	push	r25
    444a:	8f 93       	push	r24
    444c:	7f 93       	push	r23
    444e:	6f 93       	push	r22
    4450:	be a5       	ldd	r27, Y+46	; 0x2e
    4452:	bf 93       	push	r27
    4454:	ed a5       	ldd	r30, Y+45	; 0x2d
    4456:	ef 93       	push	r30
    4458:	2b 85       	ldd	r18, Y+11	; 0x0b
    445a:	3c 85       	ldd	r19, Y+12	; 0x0c
    445c:	b9 01       	movw	r22, r18
    445e:	33 0f       	add	r19, r19
    4460:	88 0b       	sbc	r24, r24
    4462:	99 0b       	sbc	r25, r25
    4464:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	4a e7       	ldi	r20, 0x7A	; 122
    446e:	54 e4       	ldi	r21, 0x44	; 68
    4470:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    4474:	9f 93       	push	r25
    4476:	8f 93       	push	r24
    4478:	7f 93       	push	r23
    447a:	6f 93       	push	r22
    447c:	87 e7       	ldi	r24, 0x77	; 119
    447e:	95 e0       	ldi	r25, 0x05	; 5
    4480:	9f 93       	push	r25
    4482:	8f 93       	push	r24
    4484:	1f 92       	push	r1
    4486:	80 e4       	ldi	r24, 0x40	; 64
    4488:	8f 93       	push	r24
    448a:	8f e3       	ldi	r24, 0x3F	; 63
    448c:	95 e2       	ldi	r25, 0x25	; 37
    448e:	9f 93       	push	r25
    4490:	8f 93       	push	r24
    4492:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				l_twi1_gyro_1_accel_x_mg / 1000.f, l_twi1_gyro_1_accel_x,
				l_twi1_gyro_1_accel_y_mg / 1000.f, l_twi1_gyro_1_accel_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4496:	cd bf       	out	0x3d, r28	; 61
    4498:	de bf       	out	0x3e, r29	; 62
    449a:	81 34       	cpi	r24, 0x41	; 65
    449c:	91 05       	cpc	r25, r1
    449e:	10 f0       	brcs	.+4      	; 0x44a4 <task_usb+0x514>
    44a0:	80 e4       	ldi	r24, 0x40	; 64
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	40 e0       	ldi	r20, 0x00	; 0
    44a6:	68 2f       	mov	r22, r24
    44a8:	8f e3       	ldi	r24, 0x3F	; 63
    44aa:	95 e2       	ldi	r25, 0x25	; 37
    44ac:	94 dc       	rcall	.-1752   	; 0x3dd6 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P1B,
    44ae:	ba a9       	ldd	r27, Y+50	; 0x32
    44b0:	bf 93       	push	r27
    44b2:	e9 a9       	ldd	r30, Y+49	; 0x31
    44b4:	ef 93       	push	r30
    44b6:	2f 85       	ldd	r18, Y+15	; 0x0f
    44b8:	38 89       	ldd	r19, Y+16	; 0x10
    44ba:	b9 01       	movw	r22, r18
    44bc:	33 0f       	add	r19, r19
    44be:	88 0b       	sbc	r24, r24
    44c0:	99 0b       	sbc	r25, r25
    44c2:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	4a e7       	ldi	r20, 0x7A	; 122
    44cc:	54 e4       	ldi	r21, 0x44	; 68
    44ce:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    44d2:	9f 93       	push	r25
    44d4:	8f 93       	push	r24
    44d6:	7f 93       	push	r23
    44d8:	6f 93       	push	r22
    44da:	80 e6       	ldi	r24, 0x60	; 96
    44dc:	95 e0       	ldi	r25, 0x05	; 5
    44de:	9f 93       	push	r25
    44e0:	8f 93       	push	r24
    44e2:	1f 92       	push	r1
    44e4:	80 e4       	ldi	r24, 0x40	; 64
    44e6:	8f 93       	push	r24
    44e8:	8f e3       	ldi	r24, 0x3F	; 63
    44ea:	95 e2       	ldi	r25, 0x25	; 37
    44ec:	9f 93       	push	r25
    44ee:	8f 93       	push	r24
    44f0:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				l_twi1_gyro_1_accel_z_mg / 1000.f, l_twi1_gyro_1_accel_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    44f4:	81 34       	cpi	r24, 0x41	; 65
    44f6:	91 05       	cpc	r25, r1
    44f8:	10 f0       	brcs	.+4      	; 0x44fe <task_usb+0x56e>
    44fa:	80 e4       	ldi	r24, 0x40	; 64
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	40 e0       	ldi	r20, 0x00	; 0
    4500:	68 2f       	mov	r22, r24
    4502:	8f e3       	ldi	r24, 0x3F	; 63
    4504:	95 e2       	ldi	r25, 0x25	; 37
    4506:	67 dc       	rcall	.-1842   	; 0x3dd6 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P2A,
    4508:	3e a9       	ldd	r19, Y+54	; 0x36
    450a:	3f 93       	push	r19
    450c:	7d a9       	ldd	r23, Y+53	; 0x35
    450e:	7f 93       	push	r23
    4510:	6d 89       	ldd	r22, Y+21	; 0x15
    4512:	7e 89       	ldd	r23, Y+22	; 0x16
    4514:	8f 89       	ldd	r24, Y+23	; 0x17
    4516:	98 8d       	ldd	r25, Y+24	; 0x18
    4518:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    451c:	20 e0       	ldi	r18, 0x00	; 0
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	4a e7       	ldi	r20, 0x7A	; 122
    4522:	54 e4       	ldi	r21, 0x44	; 68
    4524:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    4528:	9f 93       	push	r25
    452a:	8f 93       	push	r24
    452c:	7f 93       	push	r23
    452e:	6f 93       	push	r22
    4530:	8c a9       	ldd	r24, Y+52	; 0x34
    4532:	8f 93       	push	r24
    4534:	9b a9       	ldd	r25, Y+51	; 0x33
    4536:	9f 93       	push	r25
    4538:	69 89       	ldd	r22, Y+17	; 0x11
    453a:	7a 89       	ldd	r23, Y+18	; 0x12
    453c:	8b 89       	ldd	r24, Y+19	; 0x13
    453e:	9c 89       	ldd	r25, Y+20	; 0x14
    4540:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	4a e7       	ldi	r20, 0x7A	; 122
    454a:	54 e4       	ldi	r21, 0x44	; 68
    454c:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    4550:	9f 93       	push	r25
    4552:	8f 93       	push	r24
    4554:	7f 93       	push	r23
    4556:	6f 93       	push	r22
    4558:	81 e3       	ldi	r24, 0x31	; 49
    455a:	95 e0       	ldi	r25, 0x05	; 5
    455c:	9f 93       	push	r25
    455e:	8f 93       	push	r24
    4560:	1f 92       	push	r1
    4562:	80 e4       	ldi	r24, 0x40	; 64
    4564:	8f 93       	push	r24
    4566:	8f e3       	ldi	r24, 0x3F	; 63
    4568:	95 e2       	ldi	r25, 0x25	; 37
    456a:	9f 93       	push	r25
    456c:	8f 93       	push	r24
    456e:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				l_twi1_gyro_1_gyro_x_mdps / 1000.f, l_twi1_gyro_1_gyro_x,
				l_twi1_gyro_1_gyro_y_mdps / 1000.f, l_twi1_gyro_1_gyro_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4572:	81 34       	cpi	r24, 0x41	; 65
    4574:	91 05       	cpc	r25, r1
    4576:	10 f0       	brcs	.+4      	; 0x457c <task_usb+0x5ec>
    4578:	80 e4       	ldi	r24, 0x40	; 64
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	40 e0       	ldi	r20, 0x00	; 0
    457e:	68 2f       	mov	r22, r24
    4580:	8f e3       	ldi	r24, 0x3F	; 63
    4582:	95 e2       	ldi	r25, 0x25	; 37
    4584:	28 dc       	rcall	.-1968   	; 0x3dd6 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P2B,
    4586:	a8 ad       	ldd	r26, Y+56	; 0x38
    4588:	af 93       	push	r26
    458a:	bf a9       	ldd	r27, Y+55	; 0x37
    458c:	bf 93       	push	r27
    458e:	69 8d       	ldd	r22, Y+25	; 0x19
    4590:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4594:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4596:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    459a:	20 e0       	ldi	r18, 0x00	; 0
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	4a e7       	ldi	r20, 0x7A	; 122
    45a0:	54 e4       	ldi	r21, 0x44	; 68
    45a2:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    45a6:	9f 93       	push	r25
    45a8:	8f 93       	push	r24
    45aa:	7f 93       	push	r23
    45ac:	6f 93       	push	r22
    45ae:	89 e1       	ldi	r24, 0x19	; 25
    45b0:	95 e0       	ldi	r25, 0x05	; 5
    45b2:	9f 93       	push	r25
    45b4:	8f 93       	push	r24
    45b6:	1f 92       	push	r1
    45b8:	80 e4       	ldi	r24, 0x40	; 64
    45ba:	8f 93       	push	r24
    45bc:	8f e3       	ldi	r24, 0x3F	; 63
    45be:	95 e2       	ldi	r25, 0x25	; 37
    45c0:	9f 93       	push	r25
    45c2:	8f 93       	push	r24
    45c4:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				l_twi1_gyro_1_gyro_z_mdps / 1000.f, l_twi1_gyro_1_gyro_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    45c8:	cd bf       	out	0x3d, r28	; 61
    45ca:	de bf       	out	0x3e, r29	; 62
    45cc:	81 34       	cpi	r24, 0x41	; 65
    45ce:	91 05       	cpc	r25, r1
    45d0:	10 f0       	brcs	.+4      	; 0x45d6 <task_usb+0x646>
    45d2:	80 e4       	ldi	r24, 0x40	; 64
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	40 e0       	ldi	r20, 0x00	; 0
    45d8:	68 2f       	mov	r22, r24
    45da:	8f e3       	ldi	r24, 0x3F	; 63
    45dc:	95 e2       	ldi	r25, 0x25	; 37
    45de:	fb db       	rcall	.-2058   	; 0x3dd6 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P3A,
    45e0:	fe ad       	ldd	r31, Y+62	; 0x3e
    45e2:	ff 93       	push	r31
    45e4:	2d ad       	ldd	r18, Y+61	; 0x3d
    45e6:	2f 93       	push	r18
    45e8:	6b a1       	ldd	r22, Y+35	; 0x23
    45ea:	7c a1       	ldd	r23, Y+36	; 0x24
    45ec:	8d a1       	ldd	r24, Y+37	; 0x25
    45ee:	9e a1       	ldd	r25, Y+38	; 0x26
    45f0:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    45f4:	20 e0       	ldi	r18, 0x00	; 0
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	4a e7       	ldi	r20, 0x7A	; 122
    45fa:	54 e4       	ldi	r21, 0x44	; 68
    45fc:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    4600:	9f 93       	push	r25
    4602:	8f 93       	push	r24
    4604:	7f 93       	push	r23
    4606:	6f 93       	push	r22
    4608:	3c ad       	ldd	r19, Y+60	; 0x3c
    460a:	3f 93       	push	r19
    460c:	7b ad       	ldd	r23, Y+59	; 0x3b
    460e:	7f 93       	push	r23
    4610:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4612:	78 a1       	ldd	r23, Y+32	; 0x20
    4614:	89 a1       	ldd	r24, Y+33	; 0x21
    4616:	9a a1       	ldd	r25, Y+34	; 0x22
    4618:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    461c:	20 e0       	ldi	r18, 0x00	; 0
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	4a e7       	ldi	r20, 0x7A	; 122
    4622:	54 e4       	ldi	r21, 0x44	; 68
    4624:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    4628:	9f 93       	push	r25
    462a:	8f 93       	push	r24
    462c:	7f 93       	push	r23
    462e:	6f 93       	push	r22
    4630:	8c ee       	ldi	r24, 0xEC	; 236
    4632:	94 e0       	ldi	r25, 0x04	; 4
    4634:	9f 93       	push	r25
    4636:	8f 93       	push	r24
    4638:	1f 92       	push	r1
    463a:	80 e4       	ldi	r24, 0x40	; 64
    463c:	8f 93       	push	r24
    463e:	8f e3       	ldi	r24, 0x3F	; 63
    4640:	95 e2       	ldi	r25, 0x25	; 37
    4642:	9f 93       	push	r25
    4644:	8f 93       	push	r24
    4646:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				l_twi1_gyro_2_mag_x_nT / 1000.f, l_twi1_gyro_2_mag_x,
				l_twi1_gyro_2_mag_y_nT / 1000.f, l_twi1_gyro_2_mag_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    464a:	81 34       	cpi	r24, 0x41	; 65
    464c:	91 05       	cpc	r25, r1
    464e:	10 f0       	brcs	.+4      	; 0x4654 <task_usb+0x6c4>
    4650:	80 e4       	ldi	r24, 0x40	; 64
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	40 e0       	ldi	r20, 0x00	; 0
    4656:	68 2f       	mov	r22, r24
    4658:	8f e3       	ldi	r24, 0x3F	; 63
    465a:	95 e2       	ldi	r25, 0x25	; 37
    465c:	bc db       	rcall	.-2184   	; 0x3dd6 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P3B,
    465e:	21 96       	adiw	r28, 0x01	; 1
    4660:	8f ad       	ldd	r24, Y+63	; 0x3f
    4662:	21 97       	sbiw	r28, 0x01	; 1
    4664:	8f 93       	push	r24
    4666:	9f ad       	ldd	r25, Y+63	; 0x3f
    4668:	9f 93       	push	r25
    466a:	6f a1       	ldd	r22, Y+39	; 0x27
    466c:	78 a5       	ldd	r23, Y+40	; 0x28
    466e:	89 a5       	ldd	r24, Y+41	; 0x29
    4670:	9a a5       	ldd	r25, Y+42	; 0x2a
    4672:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	4a e7       	ldi	r20, 0x7A	; 122
    467c:	54 e4       	ldi	r21, 0x44	; 68
    467e:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    4682:	9f 93       	push	r25
    4684:	8f 93       	push	r24
    4686:	7f 93       	push	r23
    4688:	6f 93       	push	r22
    468a:	84 ed       	ldi	r24, 0xD4	; 212
    468c:	94 e0       	ldi	r25, 0x04	; 4
    468e:	9f 93       	push	r25
    4690:	8f 93       	push	r24
    4692:	1f 92       	push	r1
    4694:	80 e4       	ldi	r24, 0x40	; 64
    4696:	8f 93       	push	r24
    4698:	8f e3       	ldi	r24, 0x3F	; 63
    469a:	95 e2       	ldi	r25, 0x25	; 37
    469c:	9f 93       	push	r25
    469e:	8f 93       	push	r24
    46a0:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				l_twi1_gyro_2_mag_z_nT / 1000.f, l_twi1_gyro_2_mag_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    46a4:	81 34       	cpi	r24, 0x41	; 65
    46a6:	91 05       	cpc	r25, r1
    46a8:	10 f0       	brcs	.+4      	; 0x46ae <task_usb+0x71e>
    46aa:	80 e4       	ldi	r24, 0x40	; 64
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	40 e0       	ldi	r20, 0x00	; 0
    46b0:	68 2f       	mov	r22, r24
    46b2:	8f e3       	ldi	r24, 0x3F	; 63
    46b4:	95 e2       	ldi	r25, 0x25	; 37
    46b6:	8f db       	rcall	.-2274   	; 0x3dd6 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P4,
    46b8:	aa ad       	ldd	r26, Y+58	; 0x3a
    46ba:	af 93       	push	r26
    46bc:	b9 ad       	ldd	r27, Y+57	; 0x39
    46be:	bf 93       	push	r27
    46c0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    46c2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    46c4:	bf 01       	movw	r22, r30
    46c6:	ff 0f       	add	r31, r31
    46c8:	88 0b       	sbc	r24, r24
    46ca:	99 0b       	sbc	r25, r25
    46cc:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    46d0:	20 e0       	ldi	r18, 0x00	; 0
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	48 ec       	ldi	r20, 0xC8	; 200
    46d6:	52 e4       	ldi	r21, 0x42	; 66
    46d8:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    46dc:	9f 93       	push	r25
    46de:	8f 93       	push	r24
    46e0:	7f 93       	push	r23
    46e2:	6f 93       	push	r22
    46e4:	85 eb       	ldi	r24, 0xB5	; 181
    46e6:	94 e0       	ldi	r25, 0x04	; 4
    46e8:	9f 93       	push	r25
    46ea:	8f 93       	push	r24
    46ec:	1f 92       	push	r1
    46ee:	80 e4       	ldi	r24, 0x40	; 64
    46f0:	8f 93       	push	r24
    46f2:	8f e3       	ldi	r24, 0x3F	; 63
    46f4:	95 e2       	ldi	r25, 0x25	; 37
    46f6:	9f 93       	push	r25
    46f8:	8f 93       	push	r24
    46fa:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
				l_twi1_gyro_1_temp_deg_100 / 100.f, l_twi1_gyro_1_temp);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    46fe:	cd bf       	out	0x3d, r28	; 61
    4700:	de bf       	out	0x3e, r29	; 62
    4702:	81 34       	cpi	r24, 0x41	; 65
    4704:	91 05       	cpc	r25, r1
    4706:	10 f0       	brcs	.+4      	; 0x470c <task_usb+0x77c>
    4708:	80 e4       	ldi	r24, 0x40	; 64
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	40 e0       	ldi	r20, 0x00	; 0
    470e:	68 2f       	mov	r22, r24
    4710:	8f e3       	ldi	r24, 0x3F	; 63
    4712:	95 e2       	ldi	r25, 0x25	; 37
    4714:	60 db       	rcall	.-2368   	; 0x3dd6 <udi_write_tx_buf>

				/* Store last time of status line */
				usb_last = now;
    4716:	c0 92 d0 21 	sts	0x21D0, r12	; 0x8021d0 <__data_end>
    471a:	d0 92 d1 21 	sts	0x21D1, r13	; 0x8021d1 <__data_end+0x1>
    471e:	e0 92 d2 21 	sts	0x21D2, r14	; 0x8021d2 <__data_end+0x2>
    4722:	f0 92 d3 21 	sts	0x21D3, r15	; 0x8021d3 <__data_end+0x3>
			}
		}
	}
}
    4726:	ce 5b       	subi	r28, 0xBE	; 190
    4728:	df 4f       	sbci	r29, 0xFF	; 255
    472a:	cd bf       	out	0x3d, r28	; 61
    472c:	de bf       	out	0x3e, r29	; 62
    472e:	df 91       	pop	r29
    4730:	cf 91       	pop	r28
    4732:	1f 91       	pop	r17
    4734:	0f 91       	pop	r16
    4736:	ff 90       	pop	r15
    4738:	ef 90       	pop	r14
    473a:	df 90       	pop	r13
    473c:	cf 90       	pop	r12
    473e:	bf 90       	pop	r11
    4740:	af 90       	pop	r10
    4742:	9f 90       	pop	r9
    4744:	8f 90       	pop	r8
    4746:	7f 90       	pop	r7
    4748:	6f 90       	pop	r6
    474a:	5f 90       	pop	r5
    474c:	4f 90       	pop	r4
    474e:	3f 90       	pop	r3
    4750:	2f 90       	pop	r2
    4752:	08 95       	ret

00004754 <nvm_init>:
#include "conf_nvm.h"
#include "nvm.h"

status_code_t nvm_init(mem_type_t mem)
{
	switch (mem) {
    4754:	83 30       	cpi	r24, 0x03	; 3
    4756:	10 f4       	brcc	.+4      	; 0x475c <nvm_init+0x8>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4758:	80 e0       	ldi	r24, 0x00	; 0
    475a:	08 95       	ret
		}
		break;
#endif

	default:
		return ERR_INVALID_ARG;
    475c:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    475e:	08 95       	ret

00004760 <fifo_init>:
 */

#include "fifo.h"

int fifo_init(fifo_desc_t *fifo_desc, void *buffer, uint8_t size)
{
    4760:	fc 01       	movw	r30, r24
	// ... and must fit in a uint8_t. Since the read and write indexes are using a
	// double-index range implementation, the max FIFO size is thus 128 items.
	Assert (size <= 128);

	// Fifo starts empty.
	fifo_desc->read_index  = 0;
    4762:	12 82       	std	Z+2, r1	; 0x02
	fifo_desc->write_index = 0;
    4764:	13 82       	std	Z+3, r1	; 0x03

	// Save the size parameter.
	fifo_desc->size = size;
    4766:	44 83       	std	Z+4, r20	; 0x04

	// Create a mask to speed up the FIFO management (index swapping).
	fifo_desc->mask = (2 * (uint16_t)size) - 1;
    4768:	44 0f       	add	r20, r20
    476a:	41 50       	subi	r20, 0x01	; 1
    476c:	45 83       	std	Z+5, r20	; 0x05

	// Save the buffer pointer.
	fifo_desc->buffer.u8ptr = buffer;
    476e:	60 83       	st	Z, r22
    4770:	71 83       	std	Z+1, r23	; 0x01

	return FIFO_OK;
}
    4772:	80 e0       	ldi	r24, 0x00	; 0
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	08 95       	ret

00004778 <dma_interrupt>:
 * dma_set_callback() function.
 *
 * \param num DMA channel number to handle interrupt for
 */
static void dma_interrupt(const dma_channel_num_t num)
{
    4778:	cf 93       	push	r28
    477a:	df 93       	push	r29
	enum dma_channel_status status;
	DMA_CH_t *channel;

	channel = dma_get_channel_address_from_num(num);
    477c:	48 2f       	mov	r20, r24
    477e:	50 e0       	ldi	r21, 0x00	; 0
    4780:	fa 01       	movw	r30, r20
    4782:	71 96       	adiw	r30, 0x11	; 17
    4784:	e2 95       	swap	r30
    4786:	f2 95       	swap	r31
    4788:	f0 7f       	andi	r31, 0xF0	; 240
    478a:	fe 27       	eor	r31, r30
    478c:	e0 7f       	andi	r30, 0xF0	; 240
    478e:	fe 27       	eor	r31, r30
 * \return Channel status given by a \ref dma_channel_status
 */
static inline enum dma_channel_status dma_get_channel_status(
		dma_channel_num_t num)
{
	uint8_t busy_pending    = DMA.STATUS;
    4790:	a0 e0       	ldi	r26, 0x00	; 0
    4792:	b1 e0       	ldi	r27, 0x01	; 1
    4794:	14 96       	adiw	r26, 0x04	; 4
    4796:	9c 91       	ld	r25, X
    4798:	14 97       	sbiw	r26, 0x04	; 4
	uint8_t error_completed = DMA.INTFLAGS;
    479a:	13 96       	adiw	r26, 0x03	; 3
    479c:	6c 91       	ld	r22, X

	/*
	 * Check lower and upper nibble of INTFLAGS register to find possible
	 * error or transfer completed status.
	 */
	error_completed &= (1 << num) | (1 << (num + 4));
    479e:	da 01       	movw	r26, r20
    47a0:	14 96       	adiw	r26, 0x04	; 4
    47a2:	21 e0       	ldi	r18, 0x01	; 1
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	e9 01       	movw	r28, r18
    47a8:	08 2e       	mov	r0, r24
    47aa:	02 c0       	rjmp	.+4      	; 0x47b0 <dma_interrupt+0x38>
    47ac:	cc 0f       	add	r28, r28
    47ae:	dd 1f       	adc	r29, r29
    47b0:	0a 94       	dec	r0
    47b2:	e2 f7       	brpl	.-8      	; 0x47ac <dma_interrupt+0x34>
    47b4:	0a 2e       	mov	r0, r26
    47b6:	02 c0       	rjmp	.+4      	; 0x47bc <dma_interrupt+0x44>
    47b8:	22 0f       	add	r18, r18
    47ba:	33 1f       	adc	r19, r19
    47bc:	0a 94       	dec	r0
    47be:	e2 f7       	brpl	.-8      	; 0x47b8 <dma_interrupt+0x40>
    47c0:	2c 2b       	or	r18, r28
    47c2:	62 23       	and	r22, r18
	if (error_completed & (1 << (num + 4))) {
    47c4:	70 e0       	ldi	r23, 0x00	; 0
    47c6:	eb 01       	movw	r28, r22
    47c8:	0a 2e       	mov	r0, r26
    47ca:	02 c0       	rjmp	.+4      	; 0x47d0 <dma_interrupt+0x58>
    47cc:	d5 95       	asr	r29
    47ce:	c7 95       	ror	r28
    47d0:	0a 94       	dec	r0
    47d2:	e2 f7       	brpl	.-8      	; 0x47cc <dma_interrupt+0x54>
    47d4:	c0 fd       	sbrc	r28, 0
    47d6:	1a c0       	rjmp	.+52     	; 0x480c <dma_interrupt+0x94>
		return DMA_CH_TRANSFER_ERROR;
	} else if (error_completed & (1 << num)) {
    47d8:	08 2e       	mov	r0, r24
    47da:	02 c0       	rjmp	.+4      	; 0x47e0 <dma_interrupt+0x68>
    47dc:	75 95       	asr	r23
    47de:	67 95       	ror	r22
    47e0:	0a 94       	dec	r0
    47e2:	e2 f7       	brpl	.-8      	; 0x47dc <dma_interrupt+0x64>
    47e4:	60 fd       	sbrc	r22, 0
    47e6:	14 c0       	rjmp	.+40     	; 0x4810 <dma_interrupt+0x98>

	/*
	 * Check lower and upper nibble of STATUS register to find possible
	 * busy or pending completed status.
	 */
	busy_pending &= (1 << num) | (1 << (num + 4));
    47e8:	29 23       	and	r18, r25
	if (busy_pending & (1 << (num + 4))) {
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	b9 01       	movw	r22, r18
    47ee:	02 c0       	rjmp	.+4      	; 0x47f4 <dma_interrupt+0x7c>
    47f0:	75 95       	asr	r23
    47f2:	67 95       	ror	r22
    47f4:	aa 95       	dec	r26
    47f6:	e2 f7       	brpl	.-8      	; 0x47f0 <dma_interrupt+0x78>
    47f8:	60 fd       	sbrc	r22, 0
    47fa:	0c c0       	rjmp	.+24     	; 0x4814 <dma_interrupt+0x9c>
	 * Check lower and upper nibble of INTFLAGS register to find possible
	 * error or transfer completed status.
	 */
	error_completed &= (1 << num) | (1 << (num + 4));
	if (error_completed & (1 << (num + 4))) {
		return DMA_CH_TRANSFER_ERROR;
    47fc:	02 c0       	rjmp	.+4      	; 0x4802 <dma_interrupt+0x8a>
    47fe:	35 95       	asr	r19
    4800:	27 95       	ror	r18
    4802:	8a 95       	dec	r24
    4804:	e2 f7       	brpl	.-8      	; 0x47fe <dma_interrupt+0x86>
    4806:	82 2f       	mov	r24, r18
    4808:	81 70       	andi	r24, 0x01	; 1
    480a:	05 c0       	rjmp	.+10     	; 0x4816 <dma_interrupt+0x9e>
    480c:	84 e0       	ldi	r24, 0x04	; 4
    480e:	03 c0       	rjmp	.+6      	; 0x4816 <dma_interrupt+0x9e>
	} else if (error_completed & (1 << num)) {
		return DMA_CH_TRANSFER_COMPLETED;
    4810:	83 e0       	ldi	r24, 0x03	; 3
    4812:	01 c0       	rjmp	.+2      	; 0x4816 <dma_interrupt+0x9e>
	 * Check lower and upper nibble of STATUS register to find possible
	 * busy or pending completed status.
	 */
	busy_pending &= (1 << num) | (1 << (num + 4));
	if (busy_pending & (1 << (num + 4))) {
		return DMA_CH_BUSY;
    4814:	82 e0       	ldi	r24, 0x02	; 2
	status  = dma_get_channel_status(num);

	/* Clear all interrupt flags to be sure */
	channel->CTRLB |= DMA_CH_TRNIF_bm | DMA_CH_ERRIF_bm;
    4816:	91 81       	ldd	r25, Z+1	; 0x01
    4818:	90 63       	ori	r25, 0x30	; 48
    481a:	91 83       	std	Z+1, r25	; 0x01

	if (dma_data[num].callback) {
    481c:	44 0f       	add	r20, r20
    481e:	55 1f       	adc	r21, r21
    4820:	fa 01       	movw	r30, r20
    4822:	e9 54       	subi	r30, 0x49	; 73
    4824:	f7 4d       	sbci	r31, 0xD7	; 215
    4826:	01 90       	ld	r0, Z+
    4828:	f0 81       	ld	r31, Z
    482a:	e0 2d       	mov	r30, r0
    482c:	30 97       	sbiw	r30, 0x00	; 0
    482e:	09 f0       	breq	.+2      	; 0x4832 <dma_interrupt+0xba>
		dma_data[num].callback(status);
    4830:	19 95       	eicall
	}
}
    4832:	df 91       	pop	r29
    4834:	cf 91       	pop	r28
    4836:	08 95       	ret

00004838 <dma_enable>:
 *
 * \note This function will do a soft reset of the DMA controller, clearing all
 * previous configuration.
 */
void dma_enable(void)
{
    4838:	cf 93       	push	r28
    483a:	df 93       	push	r29
    483c:	1f 92       	push	r1
    483e:	cd b7       	in	r28, 0x3d	; 61
    4840:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4842:	61 e0       	ldi	r22, 0x01	; 1
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    484a:	80 91 5c 29 	lds	r24, 0x295C	; 0x80295c <sleepmgr_locks+0x1>
    484e:	8f 3f       	cpi	r24, 0xFF	; 255
    4850:	09 f4       	brne	.+2      	; 0x4854 <dma_enable+0x1c>
    4852:	ff cf       	rjmp	.-2      	; 0x4852 <dma_enable+0x1a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4854:	8f b7       	in	r24, 0x3f	; 63
    4856:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4858:	f8 94       	cli
	return flags;
    485a:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    485c:	eb e5       	ldi	r30, 0x5B	; 91
    485e:	f9 e2       	ldi	r31, 0x29	; 41
    4860:	81 81       	ldd	r24, Z+1	; 0x01
    4862:	8f 5f       	subi	r24, 0xFF	; 255
    4864:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4866:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_lock_mode(SLEEPMGR_IDLE);

	/* Reset DMA controller just to make sure everything is from scratch */
	DMA.CTRL = DMA_RESET_bm;
    4868:	e0 e0       	ldi	r30, 0x00	; 0
    486a:	f1 e0       	ldi	r31, 0x01	; 1
    486c:	80 e4       	ldi	r24, 0x40	; 64
    486e:	80 83       	st	Z, r24
	DMA.CTRL = DMA_ENABLE_bm;
    4870:	80 e8       	ldi	r24, 0x80	; 128
    4872:	80 83       	st	Z, r24
}
    4874:	0f 90       	pop	r0
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	08 95       	ret

0000487c <dma_disable>:

/**
 * \brief Disable DMA controller
 */
void dma_disable(void)
{
    487c:	cf 93       	push	r28
    487e:	df 93       	push	r29
    4880:	1f 92       	push	r1
    4882:	cd b7       	in	r28, 0x3d	; 61
    4884:	de b7       	in	r29, 0x3e	; 62
	DMA.CTRL = 0;
    4886:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    488a:	61 e0       	ldi	r22, 0x01	; 1
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	0e 94 87 69 	call	0xd30e	; 0xd30e <sysclk_disable_module>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4892:	80 91 5c 29 	lds	r24, 0x295C	; 0x80295c <sleepmgr_locks+0x1>
    4896:	81 11       	cpse	r24, r1
    4898:	01 c0       	rjmp	.+2      	; 0x489c <dma_disable+0x20>
    489a:	ff cf       	rjmp	.-2      	; 0x489a <dma_disable+0x1e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    489c:	8f b7       	in	r24, 0x3f	; 63
    489e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    48a0:	f8 94       	cli
	return flags;
    48a2:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    48a4:	eb e5       	ldi	r30, 0x5B	; 91
    48a6:	f9 e2       	ldi	r31, 0x29	; 41
    48a8:	81 81       	ldd	r24, Z+1	; 0x01
    48aa:	81 50       	subi	r24, 0x01	; 1
    48ac:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    48ae:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    48b0:	0f 90       	pop	r0
    48b2:	df 91       	pop	r29
    48b4:	cf 91       	pop	r28
    48b6:	08 95       	ret

000048b8 <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    48b8:	e8 2f       	mov	r30, r24
    48ba:	f0 e0       	ldi	r31, 0x00	; 0
    48bc:	ee 0f       	add	r30, r30
    48be:	ff 1f       	adc	r31, r31
    48c0:	e9 54       	subi	r30, 0x49	; 73
    48c2:	f7 4d       	sbci	r31, 0xD7	; 215
    48c4:	60 83       	st	Z, r22
    48c6:	71 83       	std	Z+1, r23	; 0x01
    48c8:	08 95       	ret

000048ca <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    48ca:	1f 92       	push	r1
    48cc:	0f 92       	push	r0
    48ce:	0f b6       	in	r0, 0x3f	; 63
    48d0:	0f 92       	push	r0
    48d2:	11 24       	eor	r1, r1
    48d4:	0b b6       	in	r0, 0x3b	; 59
    48d6:	0f 92       	push	r0
    48d8:	2f 93       	push	r18
    48da:	3f 93       	push	r19
    48dc:	4f 93       	push	r20
    48de:	5f 93       	push	r21
    48e0:	6f 93       	push	r22
    48e2:	7f 93       	push	r23
    48e4:	8f 93       	push	r24
    48e6:	9f 93       	push	r25
    48e8:	af 93       	push	r26
    48ea:	bf 93       	push	r27
    48ec:	ef 93       	push	r30
    48ee:	ff 93       	push	r31
	dma_interrupt(0);
    48f0:	80 e0       	ldi	r24, 0x00	; 0
    48f2:	42 df       	rcall	.-380    	; 0x4778 <dma_interrupt>
}
    48f4:	ff 91       	pop	r31
    48f6:	ef 91       	pop	r30
    48f8:	bf 91       	pop	r27
    48fa:	af 91       	pop	r26
    48fc:	9f 91       	pop	r25
    48fe:	8f 91       	pop	r24
    4900:	7f 91       	pop	r23
    4902:	6f 91       	pop	r22
    4904:	5f 91       	pop	r21
    4906:	4f 91       	pop	r20
    4908:	3f 91       	pop	r19
    490a:	2f 91       	pop	r18
    490c:	0f 90       	pop	r0
    490e:	0b be       	out	0x3b, r0	; 59
    4910:	0f 90       	pop	r0
    4912:	0f be       	out	0x3f, r0	; 63
    4914:	0f 90       	pop	r0
    4916:	1f 90       	pop	r1
    4918:	18 95       	reti

0000491a <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    491a:	1f 92       	push	r1
    491c:	0f 92       	push	r0
    491e:	0f b6       	in	r0, 0x3f	; 63
    4920:	0f 92       	push	r0
    4922:	11 24       	eor	r1, r1
    4924:	0b b6       	in	r0, 0x3b	; 59
    4926:	0f 92       	push	r0
    4928:	2f 93       	push	r18
    492a:	3f 93       	push	r19
    492c:	4f 93       	push	r20
    492e:	5f 93       	push	r21
    4930:	6f 93       	push	r22
    4932:	7f 93       	push	r23
    4934:	8f 93       	push	r24
    4936:	9f 93       	push	r25
    4938:	af 93       	push	r26
    493a:	bf 93       	push	r27
    493c:	ef 93       	push	r30
    493e:	ff 93       	push	r31
	dma_interrupt(1);
    4940:	81 e0       	ldi	r24, 0x01	; 1
    4942:	1a df       	rcall	.-460    	; 0x4778 <dma_interrupt>
}
    4944:	ff 91       	pop	r31
    4946:	ef 91       	pop	r30
    4948:	bf 91       	pop	r27
    494a:	af 91       	pop	r26
    494c:	9f 91       	pop	r25
    494e:	8f 91       	pop	r24
    4950:	7f 91       	pop	r23
    4952:	6f 91       	pop	r22
    4954:	5f 91       	pop	r21
    4956:	4f 91       	pop	r20
    4958:	3f 91       	pop	r19
    495a:	2f 91       	pop	r18
    495c:	0f 90       	pop	r0
    495e:	0b be       	out	0x3b, r0	; 59
    4960:	0f 90       	pop	r0
    4962:	0f be       	out	0x3f, r0	; 63
    4964:	0f 90       	pop	r0
    4966:	1f 90       	pop	r1
    4968:	18 95       	reti

0000496a <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    496a:	1f 92       	push	r1
    496c:	0f 92       	push	r0
    496e:	0f b6       	in	r0, 0x3f	; 63
    4970:	0f 92       	push	r0
    4972:	11 24       	eor	r1, r1
    4974:	0b b6       	in	r0, 0x3b	; 59
    4976:	0f 92       	push	r0
    4978:	2f 93       	push	r18
    497a:	3f 93       	push	r19
    497c:	4f 93       	push	r20
    497e:	5f 93       	push	r21
    4980:	6f 93       	push	r22
    4982:	7f 93       	push	r23
    4984:	8f 93       	push	r24
    4986:	9f 93       	push	r25
    4988:	af 93       	push	r26
    498a:	bf 93       	push	r27
    498c:	ef 93       	push	r30
    498e:	ff 93       	push	r31
	dma_interrupt(2);
    4990:	82 e0       	ldi	r24, 0x02	; 2
    4992:	f2 de       	rcall	.-540    	; 0x4778 <dma_interrupt>
}
    4994:	ff 91       	pop	r31
    4996:	ef 91       	pop	r30
    4998:	bf 91       	pop	r27
    499a:	af 91       	pop	r26
    499c:	9f 91       	pop	r25
    499e:	8f 91       	pop	r24
    49a0:	7f 91       	pop	r23
    49a2:	6f 91       	pop	r22
    49a4:	5f 91       	pop	r21
    49a6:	4f 91       	pop	r20
    49a8:	3f 91       	pop	r19
    49aa:	2f 91       	pop	r18
    49ac:	0f 90       	pop	r0
    49ae:	0b be       	out	0x3b, r0	; 59
    49b0:	0f 90       	pop	r0
    49b2:	0f be       	out	0x3f, r0	; 63
    49b4:	0f 90       	pop	r0
    49b6:	1f 90       	pop	r1
    49b8:	18 95       	reti

000049ba <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    49ba:	1f 92       	push	r1
    49bc:	0f 92       	push	r0
    49be:	0f b6       	in	r0, 0x3f	; 63
    49c0:	0f 92       	push	r0
    49c2:	11 24       	eor	r1, r1
    49c4:	0b b6       	in	r0, 0x3b	; 59
    49c6:	0f 92       	push	r0
    49c8:	2f 93       	push	r18
    49ca:	3f 93       	push	r19
    49cc:	4f 93       	push	r20
    49ce:	5f 93       	push	r21
    49d0:	6f 93       	push	r22
    49d2:	7f 93       	push	r23
    49d4:	8f 93       	push	r24
    49d6:	9f 93       	push	r25
    49d8:	af 93       	push	r26
    49da:	bf 93       	push	r27
    49dc:	ef 93       	push	r30
    49de:	ff 93       	push	r31
	dma_interrupt(3);
    49e0:	83 e0       	ldi	r24, 0x03	; 3
    49e2:	ca de       	rcall	.-620    	; 0x4778 <dma_interrupt>
}
    49e4:	ff 91       	pop	r31
    49e6:	ef 91       	pop	r30
    49e8:	bf 91       	pop	r27
    49ea:	af 91       	pop	r26
    49ec:	9f 91       	pop	r25
    49ee:	8f 91       	pop	r24
    49f0:	7f 91       	pop	r23
    49f2:	6f 91       	pop	r22
    49f4:	5f 91       	pop	r21
    49f6:	4f 91       	pop	r20
    49f8:	3f 91       	pop	r19
    49fa:	2f 91       	pop	r18
    49fc:	0f 90       	pop	r0
    49fe:	0b be       	out	0x3b, r0	; 59
    4a00:	0f 90       	pop	r0
    4a02:	0f be       	out	0x3f, r0	; 63
    4a04:	0f 90       	pop	r0
    4a06:	1f 90       	pop	r1
    4a08:	18 95       	reti

00004a0a <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    4a0a:	cf 93       	push	r28
    4a0c:	df 93       	push	r29
    4a0e:	1f 92       	push	r1
    4a10:	cd b7       	in	r28, 0x3d	; 61
    4a12:	de b7       	in	r29, 0x3e	; 62
    4a14:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    4a16:	e8 2f       	mov	r30, r24
    4a18:	f0 e0       	ldi	r31, 0x00	; 0
    4a1a:	71 96       	adiw	r30, 0x11	; 17
    4a1c:	e2 95       	swap	r30
    4a1e:	f2 95       	swap	r31
    4a20:	f0 7f       	andi	r31, 0xF0	; 240
    4a22:	fe 27       	eor	r31, r30
    4a24:	e0 7f       	andi	r30, 0xF0	; 240
    4a26:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4a28:	8f b7       	in	r24, 0x3f	; 63
    4a2a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4a2c:	f8 94       	cli
	return flags;
    4a2e:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    4a30:	19 96       	adiw	r26, 0x09	; 9
    4a32:	8c 91       	ld	r24, X
    4a34:	19 97       	sbiw	r26, 0x09	; 9
    4a36:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    4a38:	1a 96       	adiw	r26, 0x0a	; 10
    4a3a:	8c 91       	ld	r24, X
    4a3c:	1a 97       	sbiw	r26, 0x0a	; 10
    4a3e:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    4a40:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    4a42:	17 96       	adiw	r26, 0x07	; 7
    4a44:	8c 91       	ld	r24, X
    4a46:	17 97       	sbiw	r26, 0x07	; 7
    4a48:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    4a4a:	18 96       	adiw	r26, 0x08	; 8
    4a4c:	8c 91       	ld	r24, X
    4a4e:	18 97       	sbiw	r26, 0x08	; 8
    4a50:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    4a52:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    4a54:	12 96       	adiw	r26, 0x02	; 2
    4a56:	8c 91       	ld	r24, X
    4a58:	12 97       	sbiw	r26, 0x02	; 2
    4a5a:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    4a5c:	13 96       	adiw	r26, 0x03	; 3
    4a5e:	8c 91       	ld	r24, X
    4a60:	13 97       	sbiw	r26, 0x03	; 3
    4a62:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    4a64:	14 96       	adiw	r26, 0x04	; 4
    4a66:	2d 91       	ld	r18, X+
    4a68:	3c 91       	ld	r19, X
    4a6a:	15 97       	sbiw	r26, 0x05	; 5
    4a6c:	24 83       	std	Z+4, r18	; 0x04
    4a6e:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    4a70:	16 96       	adiw	r26, 0x06	; 6
    4a72:	8c 91       	ld	r24, X
    4a74:	16 97       	sbiw	r26, 0x06	; 6
    4a76:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    4a78:	11 96       	adiw	r26, 0x01	; 1
    4a7a:	8c 91       	ld	r24, X
    4a7c:	11 97       	sbiw	r26, 0x01	; 1
    4a7e:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    4a80:	8c 91       	ld	r24, X
    4a82:	8f 77       	andi	r24, 0x7F	; 127
    4a84:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4a86:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    4a88:	0f 90       	pop	r0
    4a8a:	df 91       	pop	r29
    4a8c:	cf 91       	pop	r28
    4a8e:	08 95       	ret

00004a90 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    4a90:	04 c0       	rjmp	.+8      	; 0x4a9a <__portable_avr_delay_cycles+0xa>
    4a92:	61 50       	subi	r22, 0x01	; 1
    4a94:	71 09       	sbc	r23, r1
    4a96:	81 09       	sbc	r24, r1
    4a98:	91 09       	sbc	r25, r1
    4a9a:	61 15       	cp	r22, r1
    4a9c:	71 05       	cpc	r23, r1
    4a9e:	81 05       	cpc	r24, r1
    4aa0:	91 05       	cpc	r25, r1
    4aa2:	b9 f7       	brne	.-18     	; 0x4a92 <__portable_avr_delay_cycles+0x2>
    4aa4:	08 95       	ret

00004aa6 <rtc_get_time>:
    4aa6:	80 e1       	ldi	r24, 0x10	; 16
    4aa8:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    4aac:	e0 e2       	ldi	r30, 0x20	; 32
    4aae:	f4 e0       	ldi	r31, 0x04	; 4
    4ab0:	81 81       	ldd	r24, Z+1	; 0x01
    4ab2:	84 fd       	sbrc	r24, 4
    4ab4:	fd cf       	rjmp	.-6      	; 0x4ab0 <rtc_get_time+0xa>
    4ab6:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    4aba:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    4abe:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    4ac2:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    4ac6:	08 95       	ret

00004ac8 <rtc_set_alarm>:
    4ac8:	e0 e2       	ldi	r30, 0x20	; 32
    4aca:	f4 e0       	ldi	r31, 0x04	; 4
    4acc:	24 e0       	ldi	r18, 0x04	; 4
    4ace:	22 83       	std	Z+2, r18	; 0x02
    4ad0:	64 87       	std	Z+12, r22	; 0x0c
    4ad2:	75 87       	std	Z+13, r23	; 0x0d
    4ad4:	86 87       	std	Z+14, r24	; 0x0e
    4ad6:	97 87       	std	Z+15, r25	; 0x0f
    4ad8:	82 e0       	ldi	r24, 0x02	; 2
    4ada:	83 83       	std	Z+3, r24	; 0x03
    4adc:	08 95       	ret

00004ade <rtc_set_callback>:
    4ade:	80 93 bf 28 	sts	0x28BF, r24	; 0x8028bf <rtc_data>
    4ae2:	90 93 c0 28 	sts	0x28C0, r25	; 0x8028c0 <rtc_data+0x1>
    4ae6:	08 95       	ret

00004ae8 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    4ae8:	cf 93       	push	r28
    4aea:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    4aec:	64 e0       	ldi	r22, 0x04	; 4
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    4af4:	c0 ef       	ldi	r28, 0xF0	; 240
    4af6:	d0 e0       	ldi	r29, 0x00	; 0
    4af8:	88 81       	ld	r24, Y
    4afa:	82 60       	ori	r24, 0x02	; 2
    4afc:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    4afe:	61 e0       	ldi	r22, 0x01	; 1
    4b00:	80 ef       	ldi	r24, 0xF0	; 240
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	0e 94 05 72 	call	0xe40a	; 0xe40a <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    4b08:	88 81       	ld	r24, Y
    4b0a:	84 60       	ori	r24, 0x04	; 4
    4b0c:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    4b0e:	69 ee       	ldi	r22, 0xE9	; 233
    4b10:	73 e0       	ldi	r23, 0x03	; 3
    4b12:	80 e0       	ldi	r24, 0x00	; 0
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	bc df       	rcall	.-136    	; 0x4a90 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    4b18:	88 81       	ld	r24, Y
    4b1a:	88 61       	ori	r24, 0x18	; 24
    4b1c:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    4b1e:	e0 ef       	ldi	r30, 0xF0	; 240
    4b20:	f0 e0       	ldi	r31, 0x00	; 0
    4b22:	81 81       	ldd	r24, Z+1	; 0x01
    4b24:	83 ff       	sbrs	r24, 3
    4b26:	fd cf       	rjmp	.-6      	; 0x4b22 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    4b28:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4b2c:	e0 e2       	ldi	r30, 0x20	; 32
    4b2e:	f4 e0       	ldi	r31, 0x04	; 4
    4b30:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    4b32:	80 fd       	sbrc	r24, 0
    4b34:	fd cf       	rjmp	.-6      	; 0x4b30 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    4b36:	e0 e2       	ldi	r30, 0x20	; 32
    4b38:	f4 e0       	ldi	r31, 0x04	; 4
    4b3a:	8f ef       	ldi	r24, 0xFF	; 255
    4b3c:	9f ef       	ldi	r25, 0xFF	; 255
    4b3e:	dc 01       	movw	r26, r24
    4b40:	80 87       	std	Z+8, r24	; 0x08
    4b42:	91 87       	std	Z+9, r25	; 0x09
    4b44:	a2 87       	std	Z+10, r26	; 0x0a
    4b46:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    4b48:	14 82       	std	Z+4, r1	; 0x04
    4b4a:	15 82       	std	Z+5, r1	; 0x05
    4b4c:	16 82       	std	Z+6, r1	; 0x06
    4b4e:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4b50:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    4b52:	80 fd       	sbrc	r24, 0
    4b54:	fd cf       	rjmp	.-6      	; 0x4b50 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    4b56:	e0 e2       	ldi	r30, 0x20	; 32
    4b58:	f4 e0       	ldi	r31, 0x04	; 4
    4b5a:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    4b5c:	81 e0       	ldi	r24, 0x01	; 1
    4b5e:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4b60:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    4b62:	80 fd       	sbrc	r24, 0
    4b64:	fd cf       	rjmp	.-6      	; 0x4b60 <rtc_init+0x78>
}
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	08 95       	ret

00004b6c <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    4b6c:	1f 92       	push	r1
    4b6e:	0f 92       	push	r0
    4b70:	0f b6       	in	r0, 0x3f	; 63
    4b72:	0f 92       	push	r0
    4b74:	11 24       	eor	r1, r1
    4b76:	0b b6       	in	r0, 0x3b	; 59
    4b78:	0f 92       	push	r0
    4b7a:	2f 93       	push	r18
    4b7c:	3f 93       	push	r19
    4b7e:	4f 93       	push	r20
    4b80:	5f 93       	push	r21
    4b82:	6f 93       	push	r22
    4b84:	7f 93       	push	r23
    4b86:	8f 93       	push	r24
    4b88:	9f 93       	push	r25
    4b8a:	af 93       	push	r26
    4b8c:	bf 93       	push	r27
    4b8e:	cf 93       	push	r28
    4b90:	df 93       	push	r29
    4b92:	ef 93       	push	r30
    4b94:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    4b96:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    4b9a:	c0 91 bf 28 	lds	r28, 0x28BF	; 0x8028bf <rtc_data>
    4b9e:	d0 91 c0 28 	lds	r29, 0x28C0	; 0x8028c0 <rtc_data+0x1>
    4ba2:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    4ba4:	19 f0       	breq	.+6      	; 0x4bac <__vector_11+0x40>
    4ba6:	7f df       	rcall	.-258    	; 0x4aa6 <rtc_get_time>
    4ba8:	fe 01       	movw	r30, r28
}
    4baa:	19 95       	eicall
    4bac:	ff 91       	pop	r31
    4bae:	ef 91       	pop	r30
    4bb0:	df 91       	pop	r29
    4bb2:	cf 91       	pop	r28
    4bb4:	bf 91       	pop	r27
    4bb6:	af 91       	pop	r26
    4bb8:	9f 91       	pop	r25
    4bba:	8f 91       	pop	r24
    4bbc:	7f 91       	pop	r23
    4bbe:	6f 91       	pop	r22
    4bc0:	5f 91       	pop	r21
    4bc2:	4f 91       	pop	r20
    4bc4:	3f 91       	pop	r19
    4bc6:	2f 91       	pop	r18
    4bc8:	0f 90       	pop	r0
    4bca:	0b be       	out	0x3b, r0	; 59
    4bcc:	0f 90       	pop	r0
    4bce:	0f be       	out	0x3f, r0	; 63
    4bd0:	0f 90       	pop	r0
    4bd2:	1f 90       	pop	r1
    4bd4:	18 95       	reti

00004bd6 <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* SINE LUT */
	uint16_t left_x, rght_x, left_y, rght_y;
	rght_x = left_x = phase >> 4;
    4bd6:	fc 01       	movw	r30, r24
    4bd8:	f2 95       	swap	r31
    4bda:	e2 95       	swap	r30
    4bdc:	ef 70       	andi	r30, 0x0F	; 15
    4bde:	ef 27       	eor	r30, r31
    4be0:	ff 70       	andi	r31, 0x0F	; 15
    4be2:	ef 27       	eor	r30, r31
	if (++rght_x >= PM_SINE_COUNT) {
    4be4:	9f 01       	movw	r18, r30
    4be6:	2f 5f       	subi	r18, 0xFF	; 255
    4be8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bea:	21 15       	cp	r18, r1
    4bec:	40 e1       	ldi	r20, 0x10	; 16
    4bee:	34 07       	cpc	r19, r20
    4bf0:	08 f0       	brcs	.+2      	; 0x4bf4 <get_interpolated_sine+0x1e>
		rght_x -= PM_SINE_COUNT;
    4bf2:	30 51       	subi	r19, 0x10	; 16
	}
	left_y = PGM_READ_WORD(&(PM_SINE[left_x]));
    4bf4:	ee 0f       	add	r30, r30
    4bf6:	ff 1f       	adc	r31, r31
    4bf8:	e5 5a       	subi	r30, 0xA5	; 165
    4bfa:	f2 4f       	sbci	r31, 0xF2	; 242
    4bfc:	45 91       	lpm	r20, Z+
    4bfe:	54 91       	lpm	r21, Z
	rght_y = PGM_READ_WORD(&(PM_SINE[rght_x]));
    4c00:	f9 01       	movw	r30, r18
    4c02:	ee 0f       	add	r30, r30
    4c04:	ff 1f       	adc	r31, r31
    4c06:	e5 5a       	subi	r30, 0xA5	; 165
    4c08:	f2 4f       	sbci	r31, 0xF2	; 242
    4c0a:	25 91       	lpm	r18, Z+
    4c0c:	34 91       	lpm	r19, Z

	/* INTERPOLATION LUT */
	uint16_t idx_y	= (uint16_t)((uint32_t)PM_SINE_MAX_STEP + rght_y - left_y);		// PM_SINE_MAX_STEP = +/-50
	uint16_t idx	= (idx_y << 4) | (phase & 0x0f);
	return left_y + (int8_t)PGM_READ_BYTE(&(PM_SINE_IP[idx]));
    4c0e:	f9 01       	movw	r30, r18
    4c10:	f4 96       	adiw	r30, 0x34	; 52
    4c12:	e4 1b       	sub	r30, r20
    4c14:	f5 0b       	sbc	r31, r21
    4c16:	e2 95       	swap	r30
    4c18:	f2 95       	swap	r31
    4c1a:	f0 7f       	andi	r31, 0xF0	; 240
    4c1c:	fe 27       	eor	r31, r30
    4c1e:	e0 7f       	andi	r30, 0xF0	; 240
    4c20:	fe 27       	eor	r31, r30
    4c22:	8f 70       	andi	r24, 0x0F	; 15
    4c24:	99 27       	eor	r25, r25
    4c26:	e8 2b       	or	r30, r24
    4c28:	f9 2b       	or	r31, r25
    4c2a:	e5 52       	subi	r30, 0x25	; 37
    4c2c:	f9 4f       	sbci	r31, 0xF9	; 249
    4c2e:	e4 91       	lpm	r30, Z
}
    4c30:	ca 01       	movw	r24, r20
    4c32:	8e 0f       	add	r24, r30
    4c34:	91 1d       	adc	r25, r1
    4c36:	e7 fd       	sbrc	r30, 7
    4c38:	9a 95       	dec	r25
    4c3a:	08 95       	ret

00004c3c <printHelp>:

void printHelp(void)
{
	static bool s_again = false;

	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HDR_1);
    4c3c:	86 ed       	ldi	r24, 0xD6	; 214
    4c3e:	9f e2       	ldi	r25, 0x2F	; 47
    4c40:	9f 93       	push	r25
    4c42:	8f 93       	push	r24
    4c44:	1f 92       	push	r1
    4c46:	80 e4       	ldi	r24, 0x40	; 64
    4c48:	8f 93       	push	r24
    4c4a:	8f e3       	ldi	r24, 0x3F	; 63
    4c4c:	95 e2       	ldi	r25, 0x25	; 37
    4c4e:	9f 93       	push	r25
    4c50:	8f 93       	push	r24
    4c52:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4c56:	81 34       	cpi	r24, 0x41	; 65
    4c58:	91 05       	cpc	r25, r1
    4c5a:	10 f0       	brcs	.+4      	; 0x4c60 <printHelp+0x24>
    4c5c:	80 e4       	ldi	r24, 0x40	; 64
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	40 e0       	ldi	r20, 0x00	; 0
    4c62:	68 2f       	mov	r22, r24
    4c64:	8f e3       	ldi	r24, 0x3F	; 63
    4c66:	95 e2       	ldi	r25, 0x25	; 37
    4c68:	b6 d8       	rcall	.-3732   	; 0x3dd6 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HDR_2);
    4c6a:	87 eb       	ldi	r24, 0xB7	; 183
    4c6c:	9f e2       	ldi	r25, 0x2F	; 47
    4c6e:	9f 93       	push	r25
    4c70:	8f 93       	push	r24
    4c72:	1f 92       	push	r1
    4c74:	80 e4       	ldi	r24, 0x40	; 64
    4c76:	8f 93       	push	r24
    4c78:	8f e3       	ldi	r24, 0x3F	; 63
    4c7a:	95 e2       	ldi	r25, 0x25	; 37
    4c7c:	9f 93       	push	r25
    4c7e:	8f 93       	push	r24
    4c80:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4c84:	81 34       	cpi	r24, 0x41	; 65
    4c86:	91 05       	cpc	r25, r1
    4c88:	10 f0       	brcs	.+4      	; 0x4c8e <printHelp+0x52>
    4c8a:	80 e4       	ldi	r24, 0x40	; 64
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	40 e0       	ldi	r20, 0x00	; 0
    4c90:	68 2f       	mov	r22, r24
    4c92:	8f e3       	ldi	r24, 0x3F	; 63
    4c94:	95 e2       	ldi	r25, 0x25	; 37
    4c96:	9f d8       	rcall	.-3778   	; 0x3dd6 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_ADC_1);
    4c98:	85 e9       	ldi	r24, 0x95	; 149
    4c9a:	9f e2       	ldi	r25, 0x2F	; 47
    4c9c:	9f 93       	push	r25
    4c9e:	8f 93       	push	r24
    4ca0:	1f 92       	push	r1
    4ca2:	80 e4       	ldi	r24, 0x40	; 64
    4ca4:	8f 93       	push	r24
    4ca6:	8f e3       	ldi	r24, 0x3F	; 63
    4ca8:	95 e2       	ldi	r25, 0x25	; 37
    4caa:	9f 93       	push	r25
    4cac:	8f 93       	push	r24
    4cae:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4cb2:	81 34       	cpi	r24, 0x41	; 65
    4cb4:	91 05       	cpc	r25, r1
    4cb6:	10 f0       	brcs	.+4      	; 0x4cbc <printHelp+0x80>
    4cb8:	80 e4       	ldi	r24, 0x40	; 64
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	40 e0       	ldi	r20, 0x00	; 0
    4cbe:	68 2f       	mov	r22, r24
    4cc0:	8f e3       	ldi	r24, 0x3F	; 63
    4cc2:	95 e2       	ldi	r25, 0x25	; 37
    4cc4:	88 d8       	rcall	.-3824   	; 0x3dd6 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_ADC_2);
    4cc6:	8a e7       	ldi	r24, 0x7A	; 122
    4cc8:	9f e2       	ldi	r25, 0x2F	; 47
    4cca:	9f 93       	push	r25
    4ccc:	8f 93       	push	r24
    4cce:	1f 92       	push	r1
    4cd0:	80 e4       	ldi	r24, 0x40	; 64
    4cd2:	8f 93       	push	r24
    4cd4:	8f e3       	ldi	r24, 0x3F	; 63
    4cd6:	95 e2       	ldi	r25, 0x25	; 37
    4cd8:	9f 93       	push	r25
    4cda:	8f 93       	push	r24
    4cdc:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4ce0:	81 34       	cpi	r24, 0x41	; 65
    4ce2:	91 05       	cpc	r25, r1
    4ce4:	10 f0       	brcs	.+4      	; 0x4cea <printHelp+0xae>
    4ce6:	80 e4       	ldi	r24, 0x40	; 64
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	40 e0       	ldi	r20, 0x00	; 0
    4cec:	68 2f       	mov	r22, r24
    4cee:	8f e3       	ldi	r24, 0x3F	; 63
    4cf0:	95 e2       	ldi	r25, 0x25	; 37
    4cf2:	71 d8       	rcall	.-3870   	; 0x3dd6 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BIAS_1);
    4cf4:	8f e5       	ldi	r24, 0x5F	; 95
    4cf6:	9f e2       	ldi	r25, 0x2F	; 47
    4cf8:	9f 93       	push	r25
    4cfa:	8f 93       	push	r24
    4cfc:	1f 92       	push	r1
    4cfe:	80 e4       	ldi	r24, 0x40	; 64
    4d00:	8f 93       	push	r24
    4d02:	8f e3       	ldi	r24, 0x3F	; 63
    4d04:	95 e2       	ldi	r25, 0x25	; 37
    4d06:	9f 93       	push	r25
    4d08:	8f 93       	push	r24
    4d0a:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4d0e:	81 34       	cpi	r24, 0x41	; 65
    4d10:	91 05       	cpc	r25, r1
    4d12:	10 f0       	brcs	.+4      	; 0x4d18 <printHelp+0xdc>
    4d14:	80 e4       	ldi	r24, 0x40	; 64
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	40 e0       	ldi	r20, 0x00	; 0
    4d1a:	68 2f       	mov	r22, r24
    4d1c:	8f e3       	ldi	r24, 0x3F	; 63
    4d1e:	95 e2       	ldi	r25, 0x25	; 37
    4d20:	5a d8       	rcall	.-3916   	; 0x3dd6 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BIAS_2);
    4d22:	8c e4       	ldi	r24, 0x4C	; 76
    4d24:	9f e2       	ldi	r25, 0x2F	; 47
    4d26:	9f 93       	push	r25
    4d28:	8f 93       	push	r24
    4d2a:	1f 92       	push	r1
    4d2c:	80 e4       	ldi	r24, 0x40	; 64
    4d2e:	8f 93       	push	r24
    4d30:	8f e3       	ldi	r24, 0x3F	; 63
    4d32:	95 e2       	ldi	r25, 0x25	; 37
    4d34:	9f 93       	push	r25
    4d36:	8f 93       	push	r24
    4d38:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4d3c:	2d b7       	in	r18, 0x3d	; 61
    4d3e:	3e b7       	in	r19, 0x3e	; 62
    4d40:	2c 5d       	subi	r18, 0xDC	; 220
    4d42:	3f 4f       	sbci	r19, 0xFF	; 255
    4d44:	2d bf       	out	0x3d, r18	; 61
    4d46:	3e bf       	out	0x3e, r19	; 62
    4d48:	81 34       	cpi	r24, 0x41	; 65
    4d4a:	91 05       	cpc	r25, r1
    4d4c:	10 f0       	brcs	.+4      	; 0x4d52 <printHelp+0x116>
    4d4e:	80 e4       	ldi	r24, 0x40	; 64
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	40 e0       	ldi	r20, 0x00	; 0
    4d54:	68 2f       	mov	r22, r24
    4d56:	8f e3       	ldi	r24, 0x3F	; 63
    4d58:	95 e2       	ldi	r25, 0x25	; 37
    4d5a:	3d d8       	rcall	.-3974   	; 0x3dd6 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BL_1);
    4d5c:	80 e3       	ldi	r24, 0x30	; 48
    4d5e:	9f e2       	ldi	r25, 0x2F	; 47
    4d60:	9f 93       	push	r25
    4d62:	8f 93       	push	r24
    4d64:	1f 92       	push	r1
    4d66:	80 e4       	ldi	r24, 0x40	; 64
    4d68:	8f 93       	push	r24
    4d6a:	8f e3       	ldi	r24, 0x3F	; 63
    4d6c:	95 e2       	ldi	r25, 0x25	; 37
    4d6e:	9f 93       	push	r25
    4d70:	8f 93       	push	r24
    4d72:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4d76:	81 34       	cpi	r24, 0x41	; 65
    4d78:	91 05       	cpc	r25, r1
    4d7a:	10 f0       	brcs	.+4      	; 0x4d80 <printHelp+0x144>
    4d7c:	80 e4       	ldi	r24, 0x40	; 64
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	40 e0       	ldi	r20, 0x00	; 0
    4d82:	68 2f       	mov	r22, r24
    4d84:	8f e3       	ldi	r24, 0x3F	; 63
    4d86:	95 e2       	ldi	r25, 0x25	; 37
    4d88:	26 d8       	rcall	.-4020   	; 0x3dd6 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BL_2);
    4d8a:	88 e1       	ldi	r24, 0x18	; 24
    4d8c:	9f e2       	ldi	r25, 0x2F	; 47
    4d8e:	9f 93       	push	r25
    4d90:	8f 93       	push	r24
    4d92:	1f 92       	push	r1
    4d94:	80 e4       	ldi	r24, 0x40	; 64
    4d96:	8f 93       	push	r24
    4d98:	8f e3       	ldi	r24, 0x3F	; 63
    4d9a:	95 e2       	ldi	r25, 0x25	; 37
    4d9c:	9f 93       	push	r25
    4d9e:	8f 93       	push	r24
    4da0:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4da4:	81 34       	cpi	r24, 0x41	; 65
    4da6:	91 05       	cpc	r25, r1
    4da8:	10 f0       	brcs	.+4      	; 0x4dae <printHelp+0x172>
    4daa:	80 e4       	ldi	r24, 0x40	; 64
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	40 e0       	ldi	r20, 0x00	; 0
    4db0:	68 2f       	mov	r22, r24
    4db2:	8f e3       	ldi	r24, 0x3F	; 63
    4db4:	95 e2       	ldi	r25, 0x25	; 37
    4db6:	0f d8       	rcall	.-4066   	; 0x3dd6 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DAC_1);
    4db8:	8f ef       	ldi	r24, 0xFF	; 255
    4dba:	9e e2       	ldi	r25, 0x2E	; 46
    4dbc:	9f 93       	push	r25
    4dbe:	8f 93       	push	r24
    4dc0:	1f 92       	push	r1
    4dc2:	80 e4       	ldi	r24, 0x40	; 64
    4dc4:	8f 93       	push	r24
    4dc6:	8f e3       	ldi	r24, 0x3F	; 63
    4dc8:	95 e2       	ldi	r25, 0x25	; 37
    4dca:	9f 93       	push	r25
    4dcc:	8f 93       	push	r24
    4dce:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4dd2:	81 34       	cpi	r24, 0x41	; 65
    4dd4:	91 05       	cpc	r25, r1
    4dd6:	10 f0       	brcs	.+4      	; 0x4ddc <printHelp+0x1a0>
    4dd8:	80 e4       	ldi	r24, 0x40	; 64
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	40 e0       	ldi	r20, 0x00	; 0
    4dde:	68 2f       	mov	r22, r24
    4de0:	8f e3       	ldi	r24, 0x3F	; 63
    4de2:	95 e2       	ldi	r25, 0x25	; 37
    4de4:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DAC_2);
    4de8:	8d ee       	ldi	r24, 0xED	; 237
    4dea:	9e e2       	ldi	r25, 0x2E	; 46
    4dec:	9f 93       	push	r25
    4dee:	8f 93       	push	r24
    4df0:	1f 92       	push	r1
    4df2:	80 e4       	ldi	r24, 0x40	; 64
    4df4:	8f 93       	push	r24
    4df6:	8f e3       	ldi	r24, 0x3F	; 63
    4df8:	95 e2       	ldi	r25, 0x25	; 37
    4dfa:	9f 93       	push	r25
    4dfc:	8f 93       	push	r24
    4dfe:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4e02:	81 34       	cpi	r24, 0x41	; 65
    4e04:	91 05       	cpc	r25, r1
    4e06:	10 f0       	brcs	.+4      	; 0x4e0c <printHelp+0x1d0>
    4e08:	80 e4       	ldi	r24, 0x40	; 64
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	40 e0       	ldi	r20, 0x00	; 0
    4e0e:	68 2f       	mov	r22, r24
    4e10:	8f e3       	ldi	r24, 0x3F	; 63
    4e12:	95 e2       	ldi	r25, 0x25	; 37
    4e14:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_1);
    4e18:	8b ec       	ldi	r24, 0xCB	; 203
    4e1a:	9e e2       	ldi	r25, 0x2E	; 46
    4e1c:	9f 93       	push	r25
    4e1e:	8f 93       	push	r24
    4e20:	1f 92       	push	r1
    4e22:	80 e4       	ldi	r24, 0x40	; 64
    4e24:	8f 93       	push	r24
    4e26:	8f e3       	ldi	r24, 0x3F	; 63
    4e28:	95 e2       	ldi	r25, 0x25	; 37
    4e2a:	9f 93       	push	r25
    4e2c:	8f 93       	push	r24
    4e2e:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4e32:	81 34       	cpi	r24, 0x41	; 65
    4e34:	91 05       	cpc	r25, r1
    4e36:	10 f0       	brcs	.+4      	; 0x4e3c <printHelp+0x200>
    4e38:	80 e4       	ldi	r24, 0x40	; 64
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	40 e0       	ldi	r20, 0x00	; 0
    4e3e:	68 2f       	mov	r22, r24
    4e40:	8f e3       	ldi	r24, 0x3F	; 63
    4e42:	95 e2       	ldi	r25, 0x25	; 37
    4e44:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_2);
    4e48:	8d eb       	ldi	r24, 0xBD	; 189
    4e4a:	9e e2       	ldi	r25, 0x2E	; 46
    4e4c:	9f 93       	push	r25
    4e4e:	8f 93       	push	r24
    4e50:	1f 92       	push	r1
    4e52:	80 e4       	ldi	r24, 0x40	; 64
    4e54:	8f 93       	push	r24
    4e56:	8f e3       	ldi	r24, 0x3F	; 63
    4e58:	95 e2       	ldi	r25, 0x25	; 37
    4e5a:	9f 93       	push	r25
    4e5c:	8f 93       	push	r24
    4e5e:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4e62:	2d b7       	in	r18, 0x3d	; 61
    4e64:	3e b7       	in	r19, 0x3e	; 62
    4e66:	2c 5d       	subi	r18, 0xDC	; 220
    4e68:	3f 4f       	sbci	r19, 0xFF	; 255
    4e6a:	2d bf       	out	0x3d, r18	; 61
    4e6c:	3e bf       	out	0x3e, r19	; 62
    4e6e:	81 34       	cpi	r24, 0x41	; 65
    4e70:	91 05       	cpc	r25, r1
    4e72:	10 f0       	brcs	.+4      	; 0x4e78 <printHelp+0x23c>
    4e74:	80 e4       	ldi	r24, 0x40	; 64
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	40 e0       	ldi	r20, 0x00	; 0
    4e7a:	68 2f       	mov	r22, r24
    4e7c:	8f e3       	ldi	r24, 0x3F	; 63
    4e7e:	95 e2       	ldi	r25, 0x25	; 37
    4e80:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_3);
    4e84:	88 e9       	ldi	r24, 0x98	; 152
    4e86:	9e e2       	ldi	r25, 0x2E	; 46
    4e88:	9f 93       	push	r25
    4e8a:	8f 93       	push	r24
    4e8c:	1f 92       	push	r1
    4e8e:	80 e4       	ldi	r24, 0x40	; 64
    4e90:	8f 93       	push	r24
    4e92:	8f e3       	ldi	r24, 0x3F	; 63
    4e94:	95 e2       	ldi	r25, 0x25	; 37
    4e96:	9f 93       	push	r25
    4e98:	8f 93       	push	r24
    4e9a:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4e9e:	81 34       	cpi	r24, 0x41	; 65
    4ea0:	91 05       	cpc	r25, r1
    4ea2:	10 f0       	brcs	.+4      	; 0x4ea8 <printHelp+0x26c>
    4ea4:	80 e4       	ldi	r24, 0x40	; 64
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	40 e0       	ldi	r20, 0x00	; 0
    4eaa:	68 2f       	mov	r22, r24
    4eac:	8f e3       	ldi	r24, 0x3F	; 63
    4eae:	95 e2       	ldi	r25, 0x25	; 37
    4eb0:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_EB_1);
    4eb4:	88 e7       	ldi	r24, 0x78	; 120
    4eb6:	9e e2       	ldi	r25, 0x2E	; 46
    4eb8:	9f 93       	push	r25
    4eba:	8f 93       	push	r24
    4ebc:	1f 92       	push	r1
    4ebe:	80 e4       	ldi	r24, 0x40	; 64
    4ec0:	8f 93       	push	r24
    4ec2:	8f e3       	ldi	r24, 0x3F	; 63
    4ec4:	95 e2       	ldi	r25, 0x25	; 37
    4ec6:	9f 93       	push	r25
    4ec8:	8f 93       	push	r24
    4eca:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4ece:	81 34       	cpi	r24, 0x41	; 65
    4ed0:	91 05       	cpc	r25, r1
    4ed2:	10 f0       	brcs	.+4      	; 0x4ed8 <printHelp+0x29c>
    4ed4:	80 e4       	ldi	r24, 0x40	; 64
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	40 e0       	ldi	r20, 0x00	; 0
    4eda:	68 2f       	mov	r22, r24
    4edc:	8f e3       	ldi	r24, 0x3F	; 63
    4ede:	95 e2       	ldi	r25, 0x25	; 37
    4ee0:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HELP_1);
    4ee4:	8b e5       	ldi	r24, 0x5B	; 91
    4ee6:	9e e2       	ldi	r25, 0x2E	; 46
    4ee8:	9f 93       	push	r25
    4eea:	8f 93       	push	r24
    4eec:	1f 92       	push	r1
    4eee:	80 e4       	ldi	r24, 0x40	; 64
    4ef0:	8f 93       	push	r24
    4ef2:	8f e3       	ldi	r24, 0x3F	; 63
    4ef4:	95 e2       	ldi	r25, 0x25	; 37
    4ef6:	9f 93       	push	r25
    4ef8:	8f 93       	push	r24
    4efa:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4efe:	81 34       	cpi	r24, 0x41	; 65
    4f00:	91 05       	cpc	r25, r1
    4f02:	10 f0       	brcs	.+4      	; 0x4f08 <printHelp+0x2cc>
    4f04:	80 e4       	ldi	r24, 0x40	; 64
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	40 e0       	ldi	r20, 0x00	; 0
    4f0a:	68 2f       	mov	r22, r24
    4f0c:	8f e3       	ldi	r24, 0x3F	; 63
    4f0e:	95 e2       	ldi	r25, 0x25	; 37
    4f10:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HELP_2);
    4f14:	8c e3       	ldi	r24, 0x3C	; 60
    4f16:	9e e2       	ldi	r25, 0x2E	; 46
    4f18:	9f 93       	push	r25
    4f1a:	8f 93       	push	r24
    4f1c:	1f 92       	push	r1
    4f1e:	80 e4       	ldi	r24, 0x40	; 64
    4f20:	8f 93       	push	r24
    4f22:	8f e3       	ldi	r24, 0x3F	; 63
    4f24:	95 e2       	ldi	r25, 0x25	; 37
    4f26:	9f 93       	push	r25
    4f28:	8f 93       	push	r24
    4f2a:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4f2e:	81 34       	cpi	r24, 0x41	; 65
    4f30:	91 05       	cpc	r25, r1
    4f32:	10 f0       	brcs	.+4      	; 0x4f38 <printHelp+0x2fc>
    4f34:	80 e4       	ldi	r24, 0x40	; 64
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	40 e0       	ldi	r20, 0x00	; 0
    4f3a:	68 2f       	mov	r22, r24
    4f3c:	8f e3       	ldi	r24, 0x3F	; 63
    4f3e:	95 e2       	ldi	r25, 0x25	; 37
    4f40:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_INFO_1);
    4f44:	85 e2       	ldi	r24, 0x25	; 37
    4f46:	9e e2       	ldi	r25, 0x2E	; 46
    4f48:	9f 93       	push	r25
    4f4a:	8f 93       	push	r24
    4f4c:	1f 92       	push	r1
    4f4e:	80 e4       	ldi	r24, 0x40	; 64
    4f50:	8f 93       	push	r24
    4f52:	8f e3       	ldi	r24, 0x3F	; 63
    4f54:	95 e2       	ldi	r25, 0x25	; 37
    4f56:	9f 93       	push	r25
    4f58:	8f 93       	push	r24
    4f5a:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4f5e:	81 34       	cpi	r24, 0x41	; 65
    4f60:	91 05       	cpc	r25, r1
    4f62:	10 f0       	brcs	.+4      	; 0x4f68 <printHelp+0x32c>
    4f64:	80 e4       	ldi	r24, 0x40	; 64
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	40 e0       	ldi	r20, 0x00	; 0
    4f6a:	68 2f       	mov	r22, r24
    4f6c:	8f e3       	ldi	r24, 0x3F	; 63
    4f6e:	95 e2       	ldi	r25, 0x25	; 37
    4f70:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_KB_1);
    4f74:	87 e0       	ldi	r24, 0x07	; 7
    4f76:	9e e2       	ldi	r25, 0x2E	; 46
    4f78:	9f 93       	push	r25
    4f7a:	8f 93       	push	r24
    4f7c:	1f 92       	push	r1
    4f7e:	80 e4       	ldi	r24, 0x40	; 64
    4f80:	8f 93       	push	r24
    4f82:	8f e3       	ldi	r24, 0x3F	; 63
    4f84:	95 e2       	ldi	r25, 0x25	; 37
    4f86:	9f 93       	push	r25
    4f88:	8f 93       	push	r24
    4f8a:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4f8e:	2d b7       	in	r18, 0x3d	; 61
    4f90:	3e b7       	in	r19, 0x3e	; 62
    4f92:	2c 5d       	subi	r18, 0xDC	; 220
    4f94:	3f 4f       	sbci	r19, 0xFF	; 255
    4f96:	2d bf       	out	0x3d, r18	; 61
    4f98:	3e bf       	out	0x3e, r19	; 62
    4f9a:	81 34       	cpi	r24, 0x41	; 65
    4f9c:	91 05       	cpc	r25, r1
    4f9e:	10 f0       	brcs	.+4      	; 0x4fa4 <printHelp+0x368>
    4fa0:	80 e4       	ldi	r24, 0x40	; 64
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	40 e0       	ldi	r20, 0x00	; 0
    4fa6:	68 2f       	mov	r22, r24
    4fa8:	8f e3       	ldi	r24, 0x3F	; 63
    4faa:	95 e2       	ldi	r25, 0x25	; 37
    4fac:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_PT_1);
    4fb0:	8e ee       	ldi	r24, 0xEE	; 238
    4fb2:	9d e2       	ldi	r25, 0x2D	; 45
    4fb4:	9f 93       	push	r25
    4fb6:	8f 93       	push	r24
    4fb8:	1f 92       	push	r1
    4fba:	80 e4       	ldi	r24, 0x40	; 64
    4fbc:	8f 93       	push	r24
    4fbe:	8f e3       	ldi	r24, 0x3F	; 63
    4fc0:	95 e2       	ldi	r25, 0x25	; 37
    4fc2:	9f 93       	push	r25
    4fc4:	8f 93       	push	r24
    4fc6:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4fca:	81 34       	cpi	r24, 0x41	; 65
    4fcc:	91 05       	cpc	r25, r1
    4fce:	10 f0       	brcs	.+4      	; 0x4fd4 <printHelp+0x398>
    4fd0:	80 e4       	ldi	r24, 0x40	; 64
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	40 e0       	ldi	r20, 0x00	; 0
    4fd6:	68 2f       	mov	r22, r24
    4fd8:	8f e3       	ldi	r24, 0x3F	; 63
    4fda:	95 e2       	ldi	r25, 0x25	; 37
    4fdc:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_PT_2);
    4fe0:	8f ec       	ldi	r24, 0xCF	; 207
    4fe2:	9d e2       	ldi	r25, 0x2D	; 45
    4fe4:	9f 93       	push	r25
    4fe6:	8f 93       	push	r24
    4fe8:	1f 92       	push	r1
    4fea:	80 e4       	ldi	r24, 0x40	; 64
    4fec:	8f 93       	push	r24
    4fee:	8f e3       	ldi	r24, 0x3F	; 63
    4ff0:	95 e2       	ldi	r25, 0x25	; 37
    4ff2:	9f 93       	push	r25
    4ff4:	8f 93       	push	r24
    4ff6:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4ffa:	81 34       	cpi	r24, 0x41	; 65
    4ffc:	91 05       	cpc	r25, r1
    4ffe:	10 f0       	brcs	.+4      	; 0x5004 <printHelp+0x3c8>
    5000:	80 e4       	ldi	r24, 0x40	; 64
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	40 e0       	ldi	r20, 0x00	; 0
    5006:	68 2f       	mov	r22, r24
    5008:	8f e3       	ldi	r24, 0x3F	; 63
    500a:	95 e2       	ldi	r25, 0x25	; 37
    500c:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_NewLine);
    5010:	8c ec       	ldi	r24, 0xCC	; 204
    5012:	9d e2       	ldi	r25, 0x2D	; 45
    5014:	9f 93       	push	r25
    5016:	8f 93       	push	r24
    5018:	1f 92       	push	r1
    501a:	80 e4       	ldi	r24, 0x40	; 64
    501c:	8f 93       	push	r24
    501e:	8f e3       	ldi	r24, 0x3F	; 63
    5020:	95 e2       	ldi	r25, 0x25	; 37
    5022:	9f 93       	push	r25
    5024:	8f 93       	push	r24
    5026:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    502a:	81 34       	cpi	r24, 0x41	; 65
    502c:	91 05       	cpc	r25, r1
    502e:	10 f0       	brcs	.+4      	; 0x5034 <printHelp+0x3f8>
    5030:	80 e4       	ldi	r24, 0x40	; 64
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	40 e0       	ldi	r20, 0x00	; 0
    5036:	68 2f       	mov	r22, r24
    5038:	8f e3       	ldi	r24, 0x3F	; 63
    503a:	95 e2       	ldi	r25, 0x25	; 37
    503c:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>

	if (!s_again) {
    5040:	8d b7       	in	r24, 0x3d	; 61
    5042:	9e b7       	in	r25, 0x3e	; 62
    5044:	42 96       	adiw	r24, 0x12	; 18
    5046:	8d bf       	out	0x3d, r24	; 61
    5048:	9e bf       	out	0x3e, r25	; 62
    504a:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <s_again.7681>
    504e:	81 11       	cpse	r24, r1
    5050:	21 c0       	rjmp	.+66     	; 0x5094 <printHelp+0x458>
		s_again = true;
    5052:	81 e0       	ldi	r24, 0x01	; 1
    5054:	80 93 d4 21 	sts	0x21D4, r24	; 0x8021d4 <s_again.7681>
		len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_CmdLine);
    5058:	87 ec       	ldi	r24, 0xC7	; 199
    505a:	9d e2       	ldi	r25, 0x2D	; 45
    505c:	9f 93       	push	r25
    505e:	8f 93       	push	r24
    5060:	1f 92       	push	r1
    5062:	80 e4       	ldi	r24, 0x40	; 64
    5064:	8f 93       	push	r24
    5066:	8f e3       	ldi	r24, 0x3F	; 63
    5068:	95 e2       	ldi	r25, 0x25	; 37
    506a:	9f 93       	push	r25
    506c:	8f 93       	push	r24
    506e:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
		udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5072:	81 34       	cpi	r24, 0x41	; 65
    5074:	91 05       	cpc	r25, r1
    5076:	10 f0       	brcs	.+4      	; 0x507c <printHelp+0x440>
    5078:	80 e4       	ldi	r24, 0x40	; 64
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	40 e0       	ldi	r20, 0x00	; 0
    507e:	68 2f       	mov	r22, r24
    5080:	8f e3       	ldi	r24, 0x3F	; 63
    5082:	95 e2       	ldi	r25, 0x25	; 37
    5084:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    5088:	0f 90       	pop	r0
    508a:	0f 90       	pop	r0
    508c:	0f 90       	pop	r0
    508e:	0f 90       	pop	r0
    5090:	0f 90       	pop	r0
    5092:	0f 90       	pop	r0
    5094:	08 95       	ret

00005096 <interpreter_doProcess>:
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
}


void interpreter_doProcess(char rx_buf[], iram_size_t rx_len)
{
    5096:	df 92       	push	r13
    5098:	ef 92       	push	r14
    509a:	ff 92       	push	r15
    509c:	0f 93       	push	r16
    509e:	1f 93       	push	r17
    50a0:	cf 93       	push	r28
    50a2:	df 93       	push	r29
    50a4:	cd b7       	in	r28, 0x3d	; 61
    50a6:	de b7       	in	r29, 0x3e	; 62
    50a8:	2c 97       	sbiw	r28, 0x0c	; 12
    50aa:	cd bf       	out	0x3d, r28	; 61
    50ac:	de bf       	out	0x3e, r29	; 62
    50ae:	7c 01       	movw	r14, r24
    50b0:	8b 01       	movw	r16, r22
	/* Sanity checks */
	if (!rx_buf || !rx_len || (rx_len >= (C_RX_CMDLINE_BUF_SIZE - 1))) {
    50b2:	89 2b       	or	r24, r25
    50b4:	09 f4       	brne	.+2      	; 0x50b8 <interpreter_doProcess+0x22>
    50b6:	1a c2       	rjmp	.+1076   	; 0x54ec <interpreter_doProcess+0x456>
    50b8:	cb 01       	movw	r24, r22
    50ba:	01 97       	sbiw	r24, 0x01	; 1
    50bc:	8e 3f       	cpi	r24, 0xFE	; 254
    50be:	91 05       	cpc	r25, r1
    50c0:	08 f0       	brcs	.+2      	; 0x50c4 <interpreter_doProcess+0x2e>
    50c2:	14 c2       	rjmp	.+1064   	; 0x54ec <interpreter_doProcess+0x456>
		return;
	}

	/* Look for line termination */
	char* pos = memchr(rx_buf, '\r', rx_len);
    50c4:	ab 01       	movw	r20, r22
    50c6:	6d e0       	ldi	r22, 0x0D	; 13
    50c8:	70 e0       	ldi	r23, 0x00	; 0
    50ca:	c7 01       	movw	r24, r14
    50cc:	0e 94 ea 7c 	call	0xf9d4	; 0xf9d4 <memchr>

	/* Clipping */
	if ((s_rx_cmdLine_idx + rx_len) >= C_RX_CMDLINE_BUF_SIZE) {
    50d0:	d0 90 d5 21 	lds	r13, 0x21D5	; 0x8021d5 <s_rx_cmdLine_idx>
    50d4:	2d 2d       	mov	r18, r13
    50d6:	30 e0       	ldi	r19, 0x00	; 0
    50d8:	a8 01       	movw	r20, r16
    50da:	42 0f       	add	r20, r18
    50dc:	53 1f       	adc	r21, r19
    50de:	4f 3f       	cpi	r20, 0xFF	; 255
    50e0:	51 05       	cpc	r21, r1
    50e2:	51 f0       	breq	.+20     	; 0x50f8 <interpreter_doProcess+0x62>
    50e4:	48 f0       	brcs	.+18     	; 0x50f8 <interpreter_doProcess+0x62>
		/* Over sized - clip incoming data on the buffer size limit */
		rx_len = (C_RX_CMDLINE_BUF_SIZE - 1) - s_rx_cmdLine_idx;
    50e6:	0f ef       	ldi	r16, 0xFF	; 255
    50e8:	10 e0       	ldi	r17, 0x00	; 0
    50ea:	0d 19       	sub	r16, r13
    50ec:	11 09       	sbc	r17, r1

		/* Adjust pos if the line ending exists */
		if (pos) {
    50ee:	89 2b       	or	r24, r25
    50f0:	01 f1       	breq	.+64     	; 0x5132 <interpreter_doProcess+0x9c>
			pos = rx_buf + rx_len;
    50f2:	c7 01       	movw	r24, r14
    50f4:	80 0f       	add	r24, r16
    50f6:	91 1f       	adc	r25, r17
		}
	}

	/* Add new chunk to buffer */
	uint8_t pos_len = pos ?  ((pos - rx_buf) + 1) : rx_len;
    50f8:	00 97       	sbiw	r24, 0x00	; 0
    50fa:	d9 f0       	breq	.+54     	; 0x5132 <interpreter_doProcess+0x9c>
    50fc:	8e 19       	sub	r24, r14
    50fe:	9f 09       	sbc	r25, r15
    5100:	11 e0       	ldi	r17, 0x01	; 1
    5102:	18 0f       	add	r17, r24
	memcpy(s_rx_cmdLine_buf + s_rx_cmdLine_idx, rx_buf, pos_len);
    5104:	41 2f       	mov	r20, r17
    5106:	50 e0       	ldi	r21, 0x00	; 0
    5108:	b7 01       	movw	r22, r14
    510a:	c9 01       	movw	r24, r18
    510c:	8a 52       	subi	r24, 0x2A	; 42
    510e:	9e 4d       	sbci	r25, 0xDE	; 222
    5110:	0e 94 f7 7c 	call	0xf9ee	; 0xf9ee <memcpy>
	s_rx_cmdLine_idx += pos_len;
    5114:	8d 2d       	mov	r24, r13
    5116:	81 0f       	add	r24, r17
    5118:	80 93 d5 21 	sts	0x21D5, r24	; 0x8021d5 <s_rx_cmdLine_idx>

static void executeCmdLine(char* cmdLine_buf, uint8_t cmdLine_len)
{
	/* Process command */
	{
		if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_adc, sizeof(PM_IP_CMD_adc) - 1)) {
    511c:	44 e0       	ldi	r20, 0x04	; 4
    511e:	50 e0       	ldi	r21, 0x00	; 0
    5120:	62 ec       	ldi	r22, 0xC2	; 194
    5122:	7d e2       	ldi	r23, 0x2D	; 45
    5124:	86 ed       	ldi	r24, 0xD6	; 214
    5126:	91 e2       	ldi	r25, 0x21	; 33
    5128:	0e 94 b7 7c 	call	0xf96e	; 0xf96e <strncmp_P>
    512c:	89 2b       	or	r24, r25
    512e:	51 f5       	brne	.+84     	; 0x5184 <interpreter_doProcess+0xee>
    5130:	0c c0       	rjmp	.+24     	; 0x514a <interpreter_doProcess+0xb4>
		}
	}

	/* Add new chunk to buffer */
	uint8_t pos_len = pos ?  ((pos - rx_buf) + 1) : rx_len;
	memcpy(s_rx_cmdLine_buf + s_rx_cmdLine_idx, rx_buf, pos_len);
    5132:	a8 01       	movw	r20, r16
    5134:	55 27       	eor	r21, r21
    5136:	b7 01       	movw	r22, r14
    5138:	c9 01       	movw	r24, r18
    513a:	8a 52       	subi	r24, 0x2A	; 42
    513c:	9e 4d       	sbci	r25, 0xDE	; 222
    513e:	0e 94 f7 7c 	call	0xf9ee	; 0xf9ee <memcpy>
	s_rx_cmdLine_idx += pos_len;
    5142:	0d 0d       	add	r16, r13
    5144:	00 93 d5 21 	sts	0x21D5, r16	; 0x8021d5 <s_rx_cmdLine_idx>
    5148:	d1 c1       	rjmp	.+930    	; 0x54ec <interpreter_doProcess+0x456>
static void executeCmdLine(char* cmdLine_buf, uint8_t cmdLine_len)
{
	/* Process command */
	{
		if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_adc, sizeof(PM_IP_CMD_adc) - 1)) {
			int val[1] = { 0 };
    514a:	19 82       	std	Y+1, r1	; 0x01
    514c:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_adc) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    514e:	ce 01       	movw	r24, r28
    5150:	01 96       	adiw	r24, 0x01	; 1
    5152:	7c 01       	movw	r14, r24
    5154:	00 e0       	ldi	r16, 0x00	; 0
    5156:	10 e0       	ldi	r17, 0x00	; 0
    5158:	20 e0       	ldi	r18, 0x00	; 0
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	43 e0       	ldi	r20, 0x03	; 3
    515e:	50 e0       	ldi	r21, 0x00	; 0
    5160:	60 e0       	ldi	r22, 0x00	; 0
    5162:	70 e0       	ldi	r23, 0x00	; 0
    5164:	8a ed       	ldi	r24, 0xDA	; 218
    5166:	91 e2       	ldi	r25, 0x21	; 33
    5168:	0e 94 b0 61 	call	0xc360	; 0xc360 <myStringToVar>
    516c:	89 2b       	or	r24, r25
    516e:	09 f4       	brne	.+2      	; 0x5172 <interpreter_doProcess+0xdc>
    5170:	9d c1       	rjmp	.+826    	; 0x54ac <interpreter_doProcess+0x416>
				adc_app_enable(val[0]);
    5172:	81 e0       	ldi	r24, 0x01	; 1
    5174:	29 81       	ldd	r18, Y+1	; 0x01
    5176:	3a 81       	ldd	r19, Y+2	; 0x02
    5178:	23 2b       	or	r18, r19
    517a:	09 f4       	brne	.+2      	; 0x517e <interpreter_doProcess+0xe8>
    517c:	80 e0       	ldi	r24, 0x00	; 0
    517e:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <adc_app_enable>
    5182:	94 c1       	rjmp	.+808    	; 0x54ac <interpreter_doProcess+0x416>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_bias, sizeof(PM_IP_CMD_bias) - 1)) {
    5184:	45 e0       	ldi	r20, 0x05	; 5
    5186:	50 e0       	ldi	r21, 0x00	; 0
    5188:	6c eb       	ldi	r22, 0xBC	; 188
    518a:	7d e2       	ldi	r23, 0x2D	; 45
    518c:	86 ed       	ldi	r24, 0xD6	; 214
    518e:	91 e2       	ldi	r25, 0x21	; 33
    5190:	0e 94 b7 7c 	call	0xf96e	; 0xf96e <strncmp_P>
    5194:	89 2b       	or	r24, r25
    5196:	c1 f4       	brne	.+48     	; 0x51c8 <interpreter_doProcess+0x132>
			int val[1] = { 0 };
    5198:	19 82       	std	Y+1, r1	; 0x01
    519a:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_bias) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    519c:	ce 01       	movw	r24, r28
    519e:	01 96       	adiw	r24, 0x01	; 1
    51a0:	7c 01       	movw	r14, r24
    51a2:	00 e0       	ldi	r16, 0x00	; 0
    51a4:	10 e0       	ldi	r17, 0x00	; 0
    51a6:	20 e0       	ldi	r18, 0x00	; 0
    51a8:	30 e0       	ldi	r19, 0x00	; 0
    51aa:	43 e0       	ldi	r20, 0x03	; 3
    51ac:	50 e0       	ldi	r21, 0x00	; 0
    51ae:	60 e0       	ldi	r22, 0x00	; 0
    51b0:	70 e0       	ldi	r23, 0x00	; 0
    51b2:	8b ed       	ldi	r24, 0xDB	; 219
    51b4:	91 e2       	ldi	r25, 0x21	; 33
    51b6:	0e 94 b0 61 	call	0xc360	; 0xc360 <myStringToVar>
    51ba:	89 2b       	or	r24, r25
    51bc:	09 f4       	brne	.+2      	; 0x51c0 <interpreter_doProcess+0x12a>
    51be:	76 c1       	rjmp	.+748    	; 0x54ac <interpreter_doProcess+0x416>
				bias_update(val[0]);
    51c0:	89 81       	ldd	r24, Y+1	; 0x01
    51c2:	0e 94 89 62 	call	0xc512	; 0xc512 <bias_update>
    51c6:	72 c1       	rjmp	.+740    	; 0x54ac <interpreter_doProcess+0x416>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_bl, sizeof(PM_IP_CMD_bl) - 1)) {
    51c8:	43 e0       	ldi	r20, 0x03	; 3
    51ca:	50 e0       	ldi	r21, 0x00	; 0
    51cc:	68 eb       	ldi	r22, 0xB8	; 184
    51ce:	7d e2       	ldi	r23, 0x2D	; 45
    51d0:	86 ed       	ldi	r24, 0xD6	; 214
    51d2:	91 e2       	ldi	r25, 0x21	; 33
    51d4:	0e 94 b7 7c 	call	0xf96e	; 0xf96e <strncmp_P>
    51d8:	89 2b       	or	r24, r25
    51da:	c9 f4       	brne	.+50     	; 0x520e <interpreter_doProcess+0x178>
			int val[1] = { 0 };
    51dc:	19 82       	std	Y+1, r1	; 0x01
    51de:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_bl) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    51e0:	ce 01       	movw	r24, r28
    51e2:	01 96       	adiw	r24, 0x01	; 1
    51e4:	7c 01       	movw	r14, r24
    51e6:	00 e0       	ldi	r16, 0x00	; 0
    51e8:	10 e0       	ldi	r17, 0x00	; 0
    51ea:	20 e0       	ldi	r18, 0x00	; 0
    51ec:	30 e0       	ldi	r19, 0x00	; 0
    51ee:	43 e0       	ldi	r20, 0x03	; 3
    51f0:	50 e0       	ldi	r21, 0x00	; 0
    51f2:	60 e0       	ldi	r22, 0x00	; 0
    51f4:	70 e0       	ldi	r23, 0x00	; 0
    51f6:	89 ed       	ldi	r24, 0xD9	; 217
    51f8:	91 e2       	ldi	r25, 0x21	; 33
    51fa:	0e 94 b0 61 	call	0xc360	; 0xc360 <myStringToVar>
    51fe:	89 2b       	or	r24, r25
    5200:	09 f4       	brne	.+2      	; 0x5204 <interpreter_doProcess+0x16e>
    5202:	54 c1       	rjmp	.+680    	; 0x54ac <interpreter_doProcess+0x416>
				backlight_mode_pwm(val[0]);
    5204:	89 81       	ldd	r24, Y+1	; 0x01
    5206:	9a 81       	ldd	r25, Y+2	; 0x02
    5208:	0e 94 73 62 	call	0xc4e6	; 0xc4e6 <backlight_mode_pwm>
    520c:	4f c1       	rjmp	.+670    	; 0x54ac <interpreter_doProcess+0x416>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_dac, sizeof(PM_IP_CMD_dac) - 1)) {
    520e:	44 e0       	ldi	r20, 0x04	; 4
    5210:	50 e0       	ldi	r21, 0x00	; 0
    5212:	63 eb       	ldi	r22, 0xB3	; 179
    5214:	7d e2       	ldi	r23, 0x2D	; 45
    5216:	86 ed       	ldi	r24, 0xD6	; 214
    5218:	91 e2       	ldi	r25, 0x21	; 33
    521a:	0e 94 b7 7c 	call	0xf96e	; 0xf96e <strncmp_P>
    521e:	89 2b       	or	r24, r25
    5220:	e9 f4       	brne	.+58     	; 0x525c <interpreter_doProcess+0x1c6>
			int val[1] = { 0 };
    5222:	19 82       	std	Y+1, r1	; 0x01
    5224:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_dac) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5226:	ce 01       	movw	r24, r28
    5228:	01 96       	adiw	r24, 0x01	; 1
    522a:	7c 01       	movw	r14, r24
    522c:	00 e0       	ldi	r16, 0x00	; 0
    522e:	10 e0       	ldi	r17, 0x00	; 0
    5230:	20 e0       	ldi	r18, 0x00	; 0
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	43 e0       	ldi	r20, 0x03	; 3
    5236:	50 e0       	ldi	r21, 0x00	; 0
    5238:	60 e0       	ldi	r22, 0x00	; 0
    523a:	70 e0       	ldi	r23, 0x00	; 0
    523c:	8a ed       	ldi	r24, 0xDA	; 218
    523e:	91 e2       	ldi	r25, 0x21	; 33
    5240:	0e 94 b0 61 	call	0xc360	; 0xc360 <myStringToVar>
    5244:	89 2b       	or	r24, r25
    5246:	09 f4       	brne	.+2      	; 0x524a <interpreter_doProcess+0x1b4>
    5248:	31 c1       	rjmp	.+610    	; 0x54ac <interpreter_doProcess+0x416>
				dac_app_enable(val[0]);
    524a:	81 e0       	ldi	r24, 0x01	; 1
    524c:	29 81       	ldd	r18, Y+1	; 0x01
    524e:	3a 81       	ldd	r19, Y+2	; 0x02
    5250:	23 2b       	or	r18, r19
    5252:	09 f4       	brne	.+2      	; 0x5256 <interpreter_doProcess+0x1c0>
    5254:	80 e0       	ldi	r24, 0x00	; 0
    5256:	0e 94 8f 62 	call	0xc51e	; 0xc51e <dac_app_enable>
    525a:	28 c1       	rjmp	.+592    	; 0x54ac <interpreter_doProcess+0x416>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_dds, sizeof(PM_IP_CMD_dds) - 1)) {
    525c:	44 e0       	ldi	r20, 0x04	; 4
    525e:	50 e0       	ldi	r21, 0x00	; 0
    5260:	6e ea       	ldi	r22, 0xAE	; 174
    5262:	7d e2       	ldi	r23, 0x2D	; 45
    5264:	86 ed       	ldi	r24, 0xD6	; 214
    5266:	91 e2       	ldi	r25, 0x21	; 33
    5268:	0e 94 b7 7c 	call	0xf96e	; 0xf96e <strncmp_P>
    526c:	89 2b       	or	r24, r25
    526e:	51 f5       	brne	.+84     	; 0x52c4 <interpreter_doProcess+0x22e>
			float val[3] = { -1.f, -1.f, -1.f };
    5270:	8c e0       	ldi	r24, 0x0C	; 12
    5272:	e8 e2       	ldi	r30, 0x28	; 40
    5274:	f1 e2       	ldi	r31, 0x21	; 33
    5276:	de 01       	movw	r26, r28
    5278:	11 96       	adiw	r26, 0x01	; 1
    527a:	01 90       	ld	r0, Z+
    527c:	0d 92       	st	X+, r0
    527e:	8a 95       	dec	r24
    5280:	e1 f7       	brne	.-8      	; 0x527a <interpreter_doProcess+0x1e4>
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_dds) - 1), MY_STRING_TO_VAR_FLOAT | (MY_STRING_TO_VAR_FLOAT << 2) | (MY_STRING_TO_VAR_FLOAT << 4), &(val[0]), NULL, NULL)) {
    5282:	e1 2c       	mov	r14, r1
    5284:	f1 2c       	mov	r15, r1
    5286:	00 e0       	ldi	r16, 0x00	; 0
    5288:	10 e0       	ldi	r17, 0x00	; 0
    528a:	9e 01       	movw	r18, r28
    528c:	2f 5f       	subi	r18, 0xFF	; 255
    528e:	3f 4f       	sbci	r19, 0xFF	; 255
    5290:	45 e1       	ldi	r20, 0x15	; 21
    5292:	50 e0       	ldi	r21, 0x00	; 0
    5294:	60 e0       	ldi	r22, 0x00	; 0
    5296:	70 e0       	ldi	r23, 0x00	; 0
    5298:	8a ed       	ldi	r24, 0xDA	; 218
    529a:	91 e2       	ldi	r25, 0x21	; 33
    529c:	0e 94 b0 61 	call	0xc360	; 0xc360 <myStringToVar>
    52a0:	89 2b       	or	r24, r25
    52a2:	09 f4       	brne	.+2      	; 0x52a6 <interpreter_doProcess+0x210>
    52a4:	03 c1       	rjmp	.+518    	; 0x54ac <interpreter_doProcess+0x416>
				dds_update(val[0], val[1], val[2]);
    52a6:	e9 84       	ldd	r14, Y+9	; 0x09
    52a8:	fa 84       	ldd	r15, Y+10	; 0x0a
    52aa:	0b 85       	ldd	r16, Y+11	; 0x0b
    52ac:	1c 85       	ldd	r17, Y+12	; 0x0c
    52ae:	2d 81       	ldd	r18, Y+5	; 0x05
    52b0:	3e 81       	ldd	r19, Y+6	; 0x06
    52b2:	4f 81       	ldd	r20, Y+7	; 0x07
    52b4:	58 85       	ldd	r21, Y+8	; 0x08
    52b6:	69 81       	ldd	r22, Y+1	; 0x01
    52b8:	7a 81       	ldd	r23, Y+2	; 0x02
    52ba:	8b 81       	ldd	r24, Y+3	; 0x03
    52bc:	9c 81       	ldd	r25, Y+4	; 0x04
    52be:	0e 94 a8 65 	call	0xcb50	; 0xcb50 <dds_update>
    52c2:	f4 c0       	rjmp	.+488    	; 0x54ac <interpreter_doProcess+0x416>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_eb, sizeof(PM_IP_CMD_eb) - 1)) {
    52c4:	43 e0       	ldi	r20, 0x03	; 3
    52c6:	50 e0       	ldi	r21, 0x00	; 0
    52c8:	6a ea       	ldi	r22, 0xAA	; 170
    52ca:	7d e2       	ldi	r23, 0x2D	; 45
    52cc:	86 ed       	ldi	r24, 0xD6	; 214
    52ce:	91 e2       	ldi	r25, 0x21	; 33
    52d0:	0e 94 b7 7c 	call	0xf96e	; 0xf96e <strncmp_P>
    52d4:	89 2b       	or	r24, r25
    52d6:	e9 f4       	brne	.+58     	; 0x5312 <interpreter_doProcess+0x27c>
			int val[1] = { 0 };
    52d8:	19 82       	std	Y+1, r1	; 0x01
    52da:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_eb) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    52dc:	ce 01       	movw	r24, r28
    52de:	01 96       	adiw	r24, 0x01	; 1
    52e0:	7c 01       	movw	r14, r24
    52e2:	00 e0       	ldi	r16, 0x00	; 0
    52e4:	10 e0       	ldi	r17, 0x00	; 0
    52e6:	20 e0       	ldi	r18, 0x00	; 0
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	43 e0       	ldi	r20, 0x03	; 3
    52ec:	50 e0       	ldi	r21, 0x00	; 0
    52ee:	60 e0       	ldi	r22, 0x00	; 0
    52f0:	70 e0       	ldi	r23, 0x00	; 0
    52f2:	89 ed       	ldi	r24, 0xD9	; 217
    52f4:	91 e2       	ldi	r25, 0x21	; 33
    52f6:	0e 94 b0 61 	call	0xc360	; 0xc360 <myStringToVar>
    52fa:	89 2b       	or	r24, r25
    52fc:	09 f4       	brne	.+2      	; 0x5300 <interpreter_doProcess+0x26a>
    52fe:	d6 c0       	rjmp	.+428    	; 0x54ac <interpreter_doProcess+0x416>
				errorBeep_enable(val[0]);
    5300:	81 e0       	ldi	r24, 0x01	; 1
    5302:	29 81       	ldd	r18, Y+1	; 0x01
    5304:	3a 81       	ldd	r19, Y+2	; 0x02
    5306:	23 2b       	or	r18, r19
    5308:	09 f4       	brne	.+2      	; 0x530c <interpreter_doProcess+0x276>
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	0e 94 df 62 	call	0xc5be	; 0xc5be <errorBeep_enable>
    5310:	cd c0       	rjmp	.+410    	; 0x54ac <interpreter_doProcess+0x416>
			}

		} else if (!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_help, sizeof(PM_IP_CMD_help) - 1)) {
    5312:	44 e0       	ldi	r20, 0x04	; 4
    5314:	50 e0       	ldi	r21, 0x00	; 0
    5316:	6f e9       	ldi	r22, 0x9F	; 159
    5318:	7d e2       	ldi	r23, 0x2D	; 45
    531a:	86 ed       	ldi	r24, 0xD6	; 214
    531c:	91 e2       	ldi	r25, 0x21	; 33
    531e:	0e 94 9f 7c 	call	0xf93e	; 0xf93e <strncasecmp_P>
    5322:	89 2b       	or	r24, r25
			printHelp();
    5324:	11 f4       	brne	.+4      	; 0x532a <interpreter_doProcess+0x294>
    5326:	8a dc       	rcall	.-1772   	; 0x4c3c <printHelp>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_info, sizeof(PM_IP_CMD_info) - 1)) {
    5328:	c1 c0       	rjmp	.+386    	; 0x54ac <interpreter_doProcess+0x416>
    532a:	45 e0       	ldi	r20, 0x05	; 5
    532c:	50 e0       	ldi	r21, 0x00	; 0
    532e:	64 ea       	ldi	r22, 0xA4	; 164
    5330:	7d e2       	ldi	r23, 0x2D	; 45
    5332:	86 ed       	ldi	r24, 0xD6	; 214
    5334:	91 e2       	ldi	r25, 0x21	; 33
    5336:	0e 94 b7 7c 	call	0xf96e	; 0xf96e <strncmp_P>
    533a:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    533c:	e9 f4       	brne	.+58     	; 0x5378 <interpreter_doProcess+0x2e2>
    533e:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_info) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5340:	1a 82       	std	Y+2, r1	; 0x02
    5342:	ce 01       	movw	r24, r28
    5344:	01 96       	adiw	r24, 0x01	; 1
    5346:	7c 01       	movw	r14, r24
    5348:	00 e0       	ldi	r16, 0x00	; 0
    534a:	10 e0       	ldi	r17, 0x00	; 0
    534c:	20 e0       	ldi	r18, 0x00	; 0
    534e:	30 e0       	ldi	r19, 0x00	; 0
    5350:	43 e0       	ldi	r20, 0x03	; 3
    5352:	50 e0       	ldi	r21, 0x00	; 0
    5354:	60 e0       	ldi	r22, 0x00	; 0
    5356:	70 e0       	ldi	r23, 0x00	; 0
    5358:	8b ed       	ldi	r24, 0xDB	; 219
    535a:	91 e2       	ldi	r25, 0x21	; 33
    535c:	0e 94 b0 61 	call	0xc360	; 0xc360 <myStringToVar>
    5360:	89 2b       	or	r24, r25
    5362:	09 f4       	brne	.+2      	; 0x5366 <interpreter_doProcess+0x2d0>
				printStatusLines_enable(val[0]);
    5364:	a3 c0       	rjmp	.+326    	; 0x54ac <interpreter_doProcess+0x416>
    5366:	81 e0       	ldi	r24, 0x01	; 1
    5368:	29 81       	ldd	r18, Y+1	; 0x01
    536a:	3a 81       	ldd	r19, Y+2	; 0x02
    536c:	23 2b       	or	r18, r19
    536e:	09 f4       	brne	.+2      	; 0x5372 <interpreter_doProcess+0x2dc>
    5370:	80 e0       	ldi	r24, 0x00	; 0
    5372:	0e 94 e2 62 	call	0xc5c4	; 0xc5c4 <printStatusLines_enable>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_kb, sizeof(PM_IP_CMD_kb) - 1)) {
    5376:	9a c0       	rjmp	.+308    	; 0x54ac <interpreter_doProcess+0x416>
    5378:	43 e0       	ldi	r20, 0x03	; 3
    537a:	50 e0       	ldi	r21, 0x00	; 0
    537c:	6b e9       	ldi	r22, 0x9B	; 155
    537e:	7d e2       	ldi	r23, 0x2D	; 45
    5380:	86 ed       	ldi	r24, 0xD6	; 214
    5382:	91 e2       	ldi	r25, 0x21	; 33
    5384:	0e 94 b7 7c 	call	0xf96e	; 0xf96e <strncmp_P>
    5388:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    538a:	e9 f4       	brne	.+58     	; 0x53c6 <interpreter_doProcess+0x330>
    538c:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_kb) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    538e:	1a 82       	std	Y+2, r1	; 0x02
    5390:	ce 01       	movw	r24, r28
    5392:	01 96       	adiw	r24, 0x01	; 1
    5394:	7c 01       	movw	r14, r24
    5396:	00 e0       	ldi	r16, 0x00	; 0
    5398:	10 e0       	ldi	r17, 0x00	; 0
    539a:	20 e0       	ldi	r18, 0x00	; 0
    539c:	30 e0       	ldi	r19, 0x00	; 0
    539e:	43 e0       	ldi	r20, 0x03	; 3
    53a0:	50 e0       	ldi	r21, 0x00	; 0
    53a2:	60 e0       	ldi	r22, 0x00	; 0
    53a4:	70 e0       	ldi	r23, 0x00	; 0
    53a6:	89 ed       	ldi	r24, 0xD9	; 217
    53a8:	91 e2       	ldi	r25, 0x21	; 33
    53aa:	0e 94 b0 61 	call	0xc360	; 0xc360 <myStringToVar>
    53ae:	89 2b       	or	r24, r25
    53b0:	09 f4       	brne	.+2      	; 0x53b4 <interpreter_doProcess+0x31e>
				keyBeep_enable(val[0]);
    53b2:	7c c0       	rjmp	.+248    	; 0x54ac <interpreter_doProcess+0x416>
    53b4:	81 e0       	ldi	r24, 0x01	; 1
    53b6:	29 81       	ldd	r18, Y+1	; 0x01
    53b8:	3a 81       	ldd	r19, Y+2	; 0x02
    53ba:	23 2b       	or	r18, r19
    53bc:	09 f4       	brne	.+2      	; 0x53c0 <interpreter_doProcess+0x32a>
    53be:	80 e0       	ldi	r24, 0x00	; 0
    53c0:	0e 94 e5 62 	call	0xc5ca	; 0xc5ca <keyBeep_enable>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_pt, sizeof(PM_IP_CMD_pt) - 1)) {
    53c4:	73 c0       	rjmp	.+230    	; 0x54ac <interpreter_doProcess+0x416>
    53c6:	43 e0       	ldi	r20, 0x03	; 3
    53c8:	50 e0       	ldi	r21, 0x00	; 0
    53ca:	67 e9       	ldi	r22, 0x97	; 151
    53cc:	7d e2       	ldi	r23, 0x2D	; 45
    53ce:	86 ed       	ldi	r24, 0xD6	; 214
    53d0:	91 e2       	ldi	r25, 0x21	; 33
    53d2:	0e 94 b7 7c 	call	0xf96e	; 0xf96e <strncmp_P>
    53d6:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    53d8:	c1 f4       	brne	.+48     	; 0x540a <interpreter_doProcess+0x374>
    53da:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_pt) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    53dc:	1a 82       	std	Y+2, r1	; 0x02
    53de:	ce 01       	movw	r24, r28
    53e0:	01 96       	adiw	r24, 0x01	; 1
    53e2:	7c 01       	movw	r14, r24
    53e4:	00 e0       	ldi	r16, 0x00	; 0
    53e6:	10 e0       	ldi	r17, 0x00	; 0
    53e8:	20 e0       	ldi	r18, 0x00	; 0
    53ea:	30 e0       	ldi	r19, 0x00	; 0
    53ec:	43 e0       	ldi	r20, 0x03	; 3
    53ee:	50 e0       	ldi	r21, 0x00	; 0
    53f0:	60 e0       	ldi	r22, 0x00	; 0
    53f2:	70 e0       	ldi	r23, 0x00	; 0
    53f4:	89 ed       	ldi	r24, 0xD9	; 217
    53f6:	91 e2       	ldi	r25, 0x21	; 33
    53f8:	0e 94 b0 61 	call	0xc360	; 0xc360 <myStringToVar>
    53fc:	89 2b       	or	r24, r25
    53fe:	09 f4       	brne	.+2      	; 0x5402 <interpreter_doProcess+0x36c>
				pitchTone_mode(val[0]);
    5400:	55 c0       	rjmp	.+170    	; 0x54ac <interpreter_doProcess+0x416>
    5402:	89 81       	ldd	r24, Y+1	; 0x01
    5404:	0e 94 e8 62 	call	0xc5d0	; 0xc5d0 <pitchTone_mode>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_reset, sizeof(PM_IP_CMD_reset) - 1)) {
    5408:	51 c0       	rjmp	.+162    	; 0x54ac <interpreter_doProcess+0x416>
    540a:	46 e0       	ldi	r20, 0x06	; 6
    540c:	50 e0       	ldi	r21, 0x00	; 0
    540e:	60 e9       	ldi	r22, 0x90	; 144
    5410:	7d e2       	ldi	r23, 0x2D	; 45
    5412:	86 ed       	ldi	r24, 0xD6	; 214
    5414:	91 e2       	ldi	r25, 0x21	; 33
    5416:	0e 94 b7 7c 	call	0xf96e	; 0xf96e <strncmp_P>
    541a:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    541c:	f1 f4       	brne	.+60     	; 0x545a <interpreter_doProcess+0x3c4>
    541e:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_reset) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5420:	1a 82       	std	Y+2, r1	; 0x02
    5422:	ce 01       	movw	r24, r28
    5424:	01 96       	adiw	r24, 0x01	; 1
    5426:	7c 01       	movw	r14, r24
    5428:	00 e0       	ldi	r16, 0x00	; 0
    542a:	10 e0       	ldi	r17, 0x00	; 0
    542c:	20 e0       	ldi	r18, 0x00	; 0
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	43 e0       	ldi	r20, 0x03	; 3
    5432:	50 e0       	ldi	r21, 0x00	; 0
    5434:	60 e0       	ldi	r22, 0x00	; 0
    5436:	70 e0       	ldi	r23, 0x00	; 0
    5438:	8c ed       	ldi	r24, 0xDC	; 220
    543a:	91 e2       	ldi	r25, 0x21	; 33
    543c:	0e 94 b0 61 	call	0xc360	; 0xc360 <myStringToVar>
    5440:	89 2b       	or	r24, r25
				if (val[0] == 1) {
    5442:	a1 f1       	breq	.+104    	; 0x54ac <interpreter_doProcess+0x416>
    5444:	89 81       	ldd	r24, Y+1	; 0x01
    5446:	9a 81       	ldd	r25, Y+2	; 0x02
    5448:	01 97       	sbiw	r24, 0x01	; 1
					/* Terminate the USB connection */
					stdio_usb_disable();
    544a:	81 f5       	brne	.+96     	; 0x54ac <interpreter_doProcess+0x416>
    544c:	0e 94 ce 71 	call	0xe39c	; 0xe39c <stdio_usb_disable>
					udc_stop();
    5450:	0e 94 a3 6e 	call	0xdd46	; 0xdd46 <udc_stop>

					asm volatile(
    5454:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
					);
				}
			}

		} else {
			int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_UNKNOWN_01);
    5458:	29 c0       	rjmp	.+82     	; 0x54ac <interpreter_doProcess+0x416>
    545a:	8b e5       	ldi	r24, 0x5B	; 91
    545c:	9d e2       	ldi	r25, 0x2D	; 45
    545e:	9f 93       	push	r25
    5460:	8f 93       	push	r24
    5462:	1f 92       	push	r1
    5464:	80 e4       	ldi	r24, 0x40	; 64
    5466:	8f 93       	push	r24
    5468:	8f e3       	ldi	r24, 0x3F	; 63
    546a:	95 e2       	ldi	r25, 0x25	; 37
    546c:	9f 93       	push	r25
    546e:	8f 93       	push	r24
    5470:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
			udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5474:	81 34       	cpi	r24, 0x41	; 65
    5476:	91 05       	cpc	r25, r1
    5478:	10 f0       	brcs	.+4      	; 0x547e <interpreter_doProcess+0x3e8>
    547a:	80 e4       	ldi	r24, 0x40	; 64
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	40 e0       	ldi	r20, 0x00	; 0
    5480:	68 2f       	mov	r22, r24
    5482:	8f e3       	ldi	r24, 0x3F	; 63
    5484:	95 e2       	ldi	r25, 0x25	; 37
    5486:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>

			if (g_errorBeep_enable) {
    548a:	0f 90       	pop	r0
    548c:	0f 90       	pop	r0
    548e:	0f 90       	pop	r0
    5490:	0f 90       	pop	r0
    5492:	0f 90       	pop	r0
    5494:	0f 90       	pop	r0
    5496:	80 91 5f 20 	lds	r24, 0x205F	; 0x80205f <g_errorBeep_enable>
    549a:	88 23       	and	r24, r24
				twi2_set_beep(100, 10);  // Bad sound
    549c:	39 f0       	breq	.+14     	; 0x54ac <interpreter_doProcess+0x416>
    549e:	6a e0       	ldi	r22, 0x0A	; 10
    54a0:	84 e6       	ldi	r24, 0x64	; 100
				yield_ms(125);
    54a2:	33 d7       	rcall	.+3686   	; 0x630a <twi2_set_beep>
    54a4:	8d e7       	ldi	r24, 0x7D	; 125
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	0e 94 fd 67 	call	0xcffa	; 0xcffa <yield_ms>
			}
		}
	}

	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_CmdLine);
    54ac:	87 ec       	ldi	r24, 0xC7	; 199
    54ae:	9d e2       	ldi	r25, 0x2D	; 45
    54b0:	9f 93       	push	r25
    54b2:	8f 93       	push	r24
    54b4:	1f 92       	push	r1
    54b6:	80 e4       	ldi	r24, 0x40	; 64
    54b8:	8f 93       	push	r24
    54ba:	8f e3       	ldi	r24, 0x3F	; 63
    54bc:	95 e2       	ldi	r25, 0x25	; 37
    54be:	9f 93       	push	r25
    54c0:	8f 93       	push	r24
    54c2:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    54c6:	81 34       	cpi	r24, 0x41	; 65
    54c8:	91 05       	cpc	r25, r1
    54ca:	10 f0       	brcs	.+4      	; 0x54d0 <interpreter_doProcess+0x43a>
    54cc:	80 e4       	ldi	r24, 0x40	; 64
    54ce:	90 e0       	ldi	r25, 0x00	; 0
    54d0:	40 e0       	ldi	r20, 0x00	; 0
    54d2:	68 2f       	mov	r22, r24
    54d4:	8f e3       	ldi	r24, 0x3F	; 63
    54d6:	95 e2       	ldi	r25, 0x25	; 37
    54d8:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>

	/* Execute line */
	if (pos) {
		/* Feed interpreter with line data */
		executeCmdLine(s_rx_cmdLine_buf, s_rx_cmdLine_idx);
		s_rx_cmdLine_idx = 0;
    54dc:	10 92 d5 21 	sts	0x21D5, r1	; 0x8021d5 <s_rx_cmdLine_idx>
    54e0:	0f 90       	pop	r0
    54e2:	0f 90       	pop	r0
    54e4:	0f 90       	pop	r0
    54e6:	0f 90       	pop	r0
    54e8:	0f 90       	pop	r0
	}
}
    54ea:	0f 90       	pop	r0
    54ec:	2c 96       	adiw	r28, 0x0c	; 12
    54ee:	cd bf       	out	0x3d, r28	; 61
    54f0:	de bf       	out	0x3e, r29	; 62
    54f2:	df 91       	pop	r29
    54f4:	cf 91       	pop	r28
    54f6:	1f 91       	pop	r17
    54f8:	0f 91       	pop	r16
    54fa:	ff 90       	pop	r15
    54fc:	ef 90       	pop	r14
    54fe:	df 90       	pop	r13
    5500:	08 95       	ret

00005502 <__portable_avr_delay_cycles>:
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
	twi2_m_data[0] = sprintf_P((char*)&(twi2_m_data[1]), fmt_P);
	twi2_packet.length = twi2_m_data[0] + 1;
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}
    5502:	04 c0       	rjmp	.+8      	; 0x550c <__portable_avr_delay_cycles+0xa>
    5504:	61 50       	subi	r22, 0x01	; 1
    5506:	71 09       	sbc	r23, r1
    5508:	81 09       	sbc	r24, r1
    550a:	91 09       	sbc	r25, r1
    550c:	61 15       	cp	r22, r1
    550e:	71 05       	cpc	r23, r1
    5510:	81 05       	cpc	r24, r1
    5512:	91 05       	cpc	r25, r1
    5514:	b9 f7       	brne	.-18     	; 0x5504 <__portable_avr_delay_cycles+0x2>
    5516:	08 95       	ret

00005518 <task_twi1_hygro>:
    5518:	ff 92       	push	r15
    551a:	0f 93       	push	r16
    551c:	1f 93       	push	r17
    551e:	cf 93       	push	r28
    5520:	df 93       	push	r29
    5522:	00 d0       	rcall	.+0      	; 0x5524 <task_twi1_hygro+0xc>
    5524:	cd b7       	in	r28, 0x3d	; 61
    5526:	de b7       	in	r29, 0x3e	; 62
    5528:	8f b7       	in	r24, 0x3f	; 63
    552a:	8b 83       	std	Y+3, r24	; 0x03
    552c:	f8 94       	cli
    552e:	8b 81       	ldd	r24, Y+3	; 0x03
    5530:	20 91 02 27 	lds	r18, 0x2702	; 0x802702 <g_twi1_hygro_S_T>
    5534:	30 91 03 27 	lds	r19, 0x2703	; 0x802703 <g_twi1_hygro_S_T+0x1>
    5538:	00 91 00 27 	lds	r16, 0x2700	; 0x802700 <g_twi1_hygro_S_RH>
    553c:	10 91 01 27 	lds	r17, 0x2701	; 0x802701 <g_twi1_hygro_S_RH+0x1>
    5540:	8f bf       	out	0x3f, r24	; 63
    5542:	21 15       	cp	r18, r1
    5544:	31 05       	cpc	r19, r1
    5546:	a9 f0       	breq	.+42     	; 0x5572 <task_twi1_hygro+0x5a>
    5548:	8f b7       	in	r24, 0x3f	; 63
    554a:	8a 83       	std	Y+2, r24	; 0x02
    554c:	f8 94       	cli
    554e:	fa 80       	ldd	r15, Y+2	; 0x02
    5550:	ac e5       	ldi	r26, 0x5C	; 92
    5552:	b4 e4       	ldi	r27, 0x44	; 68
    5554:	0e 94 fe 79 	call	0xf3fc	; 0xf3fc <__umulhisi3>
    5558:	2f ef       	ldi	r18, 0xFF	; 255
    555a:	3f ef       	ldi	r19, 0xFF	; 255
    555c:	40 e0       	ldi	r20, 0x00	; 0
    555e:	50 e0       	ldi	r21, 0x00	; 0
    5560:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <__divmodsi4>
    5564:	24 59       	subi	r18, 0x94	; 148
    5566:	31 41       	sbci	r19, 0x11	; 17
    5568:	20 93 fe 26 	sts	0x26FE, r18	; 0x8026fe <g_twi1_hygro_T_100>
    556c:	30 93 ff 26 	sts	0x26FF, r19	; 0x8026ff <g_twi1_hygro_T_100+0x1>
    5570:	ff be       	out	0x3f, r15	; 63
    5572:	01 15       	cp	r16, r1
    5574:	11 05       	cpc	r17, r1
    5576:	a1 f0       	breq	.+40     	; 0x55a0 <task_twi1_hygro+0x88>
    5578:	8f b7       	in	r24, 0x3f	; 63
    557a:	89 83       	std	Y+1, r24	; 0x01
    557c:	f8 94       	cli
    557e:	f9 80       	ldd	r15, Y+1	; 0x01
    5580:	98 01       	movw	r18, r16
    5582:	a0 e1       	ldi	r26, 0x10	; 16
    5584:	b7 e2       	ldi	r27, 0x27	; 39
    5586:	0e 94 fe 79 	call	0xf3fc	; 0xf3fc <__umulhisi3>
    558a:	2f ef       	ldi	r18, 0xFF	; 255
    558c:	3f ef       	ldi	r19, 0xFF	; 255
    558e:	40 e0       	ldi	r20, 0x00	; 0
    5590:	50 e0       	ldi	r21, 0x00	; 0
    5592:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <__divmodsi4>
    5596:	20 93 fc 26 	sts	0x26FC, r18	; 0x8026fc <g_twi1_hygro_RH_100>
    559a:	30 93 fd 26 	sts	0x26FD, r19	; 0x8026fd <g_twi1_hygro_RH_100+0x1>
    559e:	ff be       	out	0x3f, r15	; 63
    55a0:	23 96       	adiw	r28, 0x03	; 3
    55a2:	cd bf       	out	0x3d, r28	; 61
    55a4:	de bf       	out	0x3e, r29	; 62
    55a6:	df 91       	pop	r29
    55a8:	cf 91       	pop	r28
    55aa:	1f 91       	pop	r17
    55ac:	0f 91       	pop	r16
    55ae:	ff 90       	pop	r15
    55b0:	08 95       	ret

000055b2 <task_twi1_gyro>:
    55b2:	4f 92       	push	r4
    55b4:	5f 92       	push	r5
    55b6:	6f 92       	push	r6
    55b8:	7f 92       	push	r7
    55ba:	8f 92       	push	r8
    55bc:	9f 92       	push	r9
    55be:	af 92       	push	r10
    55c0:	bf 92       	push	r11
    55c2:	cf 92       	push	r12
    55c4:	df 92       	push	r13
    55c6:	ef 92       	push	r14
    55c8:	ff 92       	push	r15
    55ca:	0f 93       	push	r16
    55cc:	1f 93       	push	r17
    55ce:	cf 93       	push	r28
    55d0:	df 93       	push	r29
    55d2:	00 d0       	rcall	.+0      	; 0x55d4 <task_twi1_gyro+0x22>
    55d4:	00 d0       	rcall	.+0      	; 0x55d6 <task_twi1_gyro+0x24>
    55d6:	cd b7       	in	r28, 0x3d	; 61
    55d8:	de b7       	in	r29, 0x3e	; 62
    55da:	8f b7       	in	r24, 0x3f	; 63
    55dc:	89 83       	std	Y+1, r24	; 0x01
    55de:	f8 94       	cli
    55e0:	99 81       	ldd	r25, Y+1	; 0x01
    55e2:	80 91 5b 27 	lds	r24, 0x275B	; 0x80275b <g_twi1_gyro_1_accel_x>
    55e6:	f0 91 5c 27 	lds	r31, 0x275C	; 0x80275c <g_twi1_gyro_1_accel_x+0x1>
    55ea:	40 90 59 27 	lds	r4, 0x2759	; 0x802759 <g_twi1_gyro_1_accel_y>
    55ee:	50 90 5a 27 	lds	r5, 0x275A	; 0x80275a <g_twi1_gyro_1_accel_y+0x1>
    55f2:	60 90 57 27 	lds	r6, 0x2757	; 0x802757 <g_twi1_gyro_1_accel_z>
    55f6:	90 90 58 27 	lds	r9, 0x2758	; 0x802758 <g_twi1_gyro_1_accel_z+0x1>
    55fa:	9f bf       	out	0x3f, r25	; 63
    55fc:	a8 2f       	mov	r26, r24
    55fe:	ef 2f       	mov	r30, r31
    5600:	ee 0f       	add	r30, r30
    5602:	ee 0b       	sbc	r30, r30
    5604:	28 2f       	mov	r18, r24
    5606:	3f 2f       	mov	r19, r31
    5608:	4e 2f       	mov	r20, r30
    560a:	5e 2f       	mov	r21, r30
    560c:	6e 2f       	mov	r22, r30
    560e:	7e 2f       	mov	r23, r30
    5610:	8e 2f       	mov	r24, r30
    5612:	9e 2f       	mov	r25, r30
    5614:	02 e0       	ldi	r16, 0x02	; 2
    5616:	0e 94 38 7b 	call	0xf670	; 0xf670 <__ashldi3>
    561a:	a2 2e       	mov	r10, r18
    561c:	b3 2e       	mov	r11, r19
    561e:	c4 2e       	mov	r12, r20
    5620:	d5 2e       	mov	r13, r21
    5622:	e6 2e       	mov	r14, r22
    5624:	f7 2e       	mov	r15, r23
    5626:	b8 2f       	mov	r27, r24
    5628:	19 2f       	mov	r17, r25
    562a:	05 e0       	ldi	r16, 0x05	; 5
    562c:	0e 94 38 7b 	call	0xf670	; 0xf670 <__ashldi3>
    5630:	0b 2f       	mov	r16, r27
    5632:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <__subdi3>
    5636:	aa 2e       	mov	r10, r26
    5638:	bf 2e       	mov	r11, r31
    563a:	ce 2e       	mov	r12, r30
    563c:	de 2e       	mov	r13, r30
    563e:	ee 2e       	mov	r14, r30
    5640:	fe 2e       	mov	r15, r30
    5642:	0e 2f       	mov	r16, r30
    5644:	1e 2f       	mov	r17, r30
    5646:	0e 94 6f 7b 	call	0xf6de	; 0xf6de <__adddi3>
    564a:	04 e0       	ldi	r16, 0x04	; 4
    564c:	0e 94 38 7b 	call	0xf670	; 0xf670 <__ashldi3>
    5650:	b0 90 56 20 	lds	r11, 0x2056	; 0x802056 <g_twi1_gyro_1_accel_factx+0x1>
    5654:	a0 90 55 20 	lds	r10, 0x2055	; 0x802055 <g_twi1_gyro_1_accel_factx>
    5658:	1b 2d       	mov	r17, r11
    565a:	11 0f       	add	r17, r17
    565c:	11 0b       	sbc	r17, r17
    565e:	c1 2e       	mov	r12, r17
    5660:	d1 2e       	mov	r13, r17
    5662:	e1 2e       	mov	r14, r17
    5664:	f1 2e       	mov	r15, r17
    5666:	01 2f       	mov	r16, r17
    5668:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    566c:	68 94       	set
    566e:	aa 24       	eor	r10, r10
    5670:	a4 f8       	bld	r10, 4
    5672:	0f 2e       	mov	r0, r31
    5674:	f7 e2       	ldi	r31, 0x27	; 39
    5676:	bf 2e       	mov	r11, r31
    5678:	f0 2d       	mov	r31, r0
    567a:	c1 2c       	mov	r12, r1
    567c:	d1 2c       	mov	r13, r1
    567e:	e1 2c       	mov	r14, r1
    5680:	f1 2c       	mov	r15, r1
    5682:	00 e0       	ldi	r16, 0x00	; 0
    5684:	10 e0       	ldi	r17, 0x00	; 0
    5686:	0e 94 70 7a 	call	0xf4e0	; 0xf4e0 <__divdi3>
    568a:	0f e0       	ldi	r16, 0x0F	; 15
    568c:	0e 94 51 7b 	call	0xf6a2	; 0xf6a2 <__ashrdi3>
    5690:	72 2e       	mov	r7, r18
    5692:	83 2e       	mov	r8, r19
    5694:	e5 2d       	mov	r30, r5
    5696:	ee 0f       	add	r30, r30
    5698:	ee 0b       	sbc	r30, r30
    569a:	24 2d       	mov	r18, r4
    569c:	35 2d       	mov	r19, r5
    569e:	4e 2f       	mov	r20, r30
    56a0:	5e 2f       	mov	r21, r30
    56a2:	6e 2f       	mov	r22, r30
    56a4:	7e 2f       	mov	r23, r30
    56a6:	8e 2f       	mov	r24, r30
    56a8:	9e 2f       	mov	r25, r30
    56aa:	02 e0       	ldi	r16, 0x02	; 2
    56ac:	0e 94 38 7b 	call	0xf670	; 0xf670 <__ashldi3>
    56b0:	a2 2e       	mov	r10, r18
    56b2:	b3 2e       	mov	r11, r19
    56b4:	c4 2e       	mov	r12, r20
    56b6:	d5 2e       	mov	r13, r21
    56b8:	e6 2e       	mov	r14, r22
    56ba:	f7 2e       	mov	r15, r23
    56bc:	a8 2f       	mov	r26, r24
    56be:	19 2f       	mov	r17, r25
    56c0:	05 e0       	ldi	r16, 0x05	; 5
    56c2:	0e 94 38 7b 	call	0xf670	; 0xf670 <__ashldi3>
    56c6:	0a 2f       	mov	r16, r26
    56c8:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <__subdi3>
    56cc:	a4 2c       	mov	r10, r4
    56ce:	b5 2c       	mov	r11, r5
    56d0:	ce 2e       	mov	r12, r30
    56d2:	de 2e       	mov	r13, r30
    56d4:	ee 2e       	mov	r14, r30
    56d6:	fe 2e       	mov	r15, r30
    56d8:	0e 2f       	mov	r16, r30
    56da:	1e 2f       	mov	r17, r30
    56dc:	0e 94 6f 7b 	call	0xf6de	; 0xf6de <__adddi3>
    56e0:	04 e0       	ldi	r16, 0x04	; 4
    56e2:	0e 94 38 7b 	call	0xf670	; 0xf670 <__ashldi3>
    56e6:	b0 90 54 20 	lds	r11, 0x2054	; 0x802054 <g_twi1_gyro_1_accel_facty+0x1>
    56ea:	a0 90 53 20 	lds	r10, 0x2053	; 0x802053 <g_twi1_gyro_1_accel_facty>
    56ee:	1b 2d       	mov	r17, r11
    56f0:	11 0f       	add	r17, r17
    56f2:	11 0b       	sbc	r17, r17
    56f4:	c1 2e       	mov	r12, r17
    56f6:	d1 2e       	mov	r13, r17
    56f8:	e1 2e       	mov	r14, r17
    56fa:	f1 2e       	mov	r15, r17
    56fc:	01 2f       	mov	r16, r17
    56fe:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    5702:	68 94       	set
    5704:	aa 24       	eor	r10, r10
    5706:	a4 f8       	bld	r10, 4
    5708:	0f 2e       	mov	r0, r31
    570a:	f7 e2       	ldi	r31, 0x27	; 39
    570c:	bf 2e       	mov	r11, r31
    570e:	f0 2d       	mov	r31, r0
    5710:	c1 2c       	mov	r12, r1
    5712:	d1 2c       	mov	r13, r1
    5714:	e1 2c       	mov	r14, r1
    5716:	f1 2c       	mov	r15, r1
    5718:	00 e0       	ldi	r16, 0x00	; 0
    571a:	10 e0       	ldi	r17, 0x00	; 0
    571c:	0e 94 70 7a 	call	0xf4e0	; 0xf4e0 <__divdi3>
    5720:	0f e0       	ldi	r16, 0x0F	; 15
    5722:	0e 94 51 7b 	call	0xf6a2	; 0xf6a2 <__ashrdi3>
    5726:	42 2e       	mov	r4, r18
    5728:	53 2e       	mov	r5, r19
    572a:	e9 2d       	mov	r30, r9
    572c:	ee 0f       	add	r30, r30
    572e:	ee 0b       	sbc	r30, r30
    5730:	26 2d       	mov	r18, r6
    5732:	39 2d       	mov	r19, r9
    5734:	4e 2f       	mov	r20, r30
    5736:	5e 2f       	mov	r21, r30
    5738:	6e 2f       	mov	r22, r30
    573a:	7e 2f       	mov	r23, r30
    573c:	8e 2f       	mov	r24, r30
    573e:	9e 2f       	mov	r25, r30
    5740:	02 e0       	ldi	r16, 0x02	; 2
    5742:	0e 94 38 7b 	call	0xf670	; 0xf670 <__ashldi3>
    5746:	a2 2e       	mov	r10, r18
    5748:	b3 2e       	mov	r11, r19
    574a:	c4 2e       	mov	r12, r20
    574c:	d5 2e       	mov	r13, r21
    574e:	e6 2e       	mov	r14, r22
    5750:	f7 2e       	mov	r15, r23
    5752:	a8 2f       	mov	r26, r24
    5754:	19 2f       	mov	r17, r25
    5756:	05 e0       	ldi	r16, 0x05	; 5
    5758:	0e 94 38 7b 	call	0xf670	; 0xf670 <__ashldi3>
    575c:	0a 2f       	mov	r16, r26
    575e:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <__subdi3>
    5762:	a6 2c       	mov	r10, r6
    5764:	b9 2c       	mov	r11, r9
    5766:	ce 2e       	mov	r12, r30
    5768:	de 2e       	mov	r13, r30
    576a:	ee 2e       	mov	r14, r30
    576c:	fe 2e       	mov	r15, r30
    576e:	0e 2f       	mov	r16, r30
    5770:	1e 2f       	mov	r17, r30
    5772:	0e 94 6f 7b 	call	0xf6de	; 0xf6de <__adddi3>
    5776:	04 e0       	ldi	r16, 0x04	; 4
    5778:	0e 94 38 7b 	call	0xf670	; 0xf670 <__ashldi3>
    577c:	b0 90 52 20 	lds	r11, 0x2052	; 0x802052 <g_twi1_gyro_1_accel_factz+0x1>
    5780:	a0 90 51 20 	lds	r10, 0x2051	; 0x802051 <g_twi1_gyro_1_accel_factz>
    5784:	1b 2d       	mov	r17, r11
    5786:	11 0f       	add	r17, r17
    5788:	11 0b       	sbc	r17, r17
    578a:	c1 2e       	mov	r12, r17
    578c:	d1 2e       	mov	r13, r17
    578e:	e1 2e       	mov	r14, r17
    5790:	f1 2e       	mov	r15, r17
    5792:	01 2f       	mov	r16, r17
    5794:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    5798:	68 94       	set
    579a:	aa 24       	eor	r10, r10
    579c:	a4 f8       	bld	r10, 4
    579e:	0f 2e       	mov	r0, r31
    57a0:	f7 e2       	ldi	r31, 0x27	; 39
    57a2:	bf 2e       	mov	r11, r31
    57a4:	f0 2d       	mov	r31, r0
    57a6:	c1 2c       	mov	r12, r1
    57a8:	d1 2c       	mov	r13, r1
    57aa:	e1 2c       	mov	r14, r1
    57ac:	f1 2c       	mov	r15, r1
    57ae:	00 e0       	ldi	r16, 0x00	; 0
    57b0:	10 e0       	ldi	r17, 0x00	; 0
    57b2:	0e 94 70 7a 	call	0xf4e0	; 0xf4e0 <__divdi3>
    57b6:	0f e0       	ldi	r16, 0x0F	; 15
    57b8:	0e 94 51 7b 	call	0xf6a2	; 0xf6a2 <__ashrdi3>
    57bc:	92 2f       	mov	r25, r18
    57be:	2f b7       	in	r18, 0x3f	; 63
    57c0:	2a 83       	std	Y+2, r18	; 0x02
    57c2:	f8 94       	cli
    57c4:	2a 81       	ldd	r18, Y+2	; 0x02
    57c6:	70 92 55 27 	sts	0x2755, r7	; 0x802755 <g_twi1_gyro_1_accel_x_mg>
    57ca:	80 92 56 27 	sts	0x2756, r8	; 0x802756 <g_twi1_gyro_1_accel_x_mg+0x1>
    57ce:	40 92 53 27 	sts	0x2753, r4	; 0x802753 <g_twi1_gyro_1_accel_y_mg>
    57d2:	50 92 54 27 	sts	0x2754, r5	; 0x802754 <g_twi1_gyro_1_accel_y_mg+0x1>
    57d6:	90 93 51 27 	sts	0x2751, r25	; 0x802751 <g_twi1_gyro_1_accel_z_mg>
    57da:	30 93 52 27 	sts	0x2752, r19	; 0x802752 <g_twi1_gyro_1_accel_z_mg+0x1>
    57de:	2f bf       	out	0x3f, r18	; 63
    57e0:	8f b7       	in	r24, 0x3f	; 63
    57e2:	8b 83       	std	Y+3, r24	; 0x03
    57e4:	f8 94       	cli
    57e6:	9b 81       	ldd	r25, Y+3	; 0x03
    57e8:	80 91 4f 27 	lds	r24, 0x274F	; 0x80274f <g_twi1_gyro_1_gyro_x>
    57ec:	30 91 50 27 	lds	r19, 0x2750	; 0x802750 <g_twi1_gyro_1_gyro_x+0x1>
    57f0:	50 90 4d 27 	lds	r5, 0x274D	; 0x80274d <g_twi1_gyro_1_gyro_y>
    57f4:	60 90 4e 27 	lds	r6, 0x274E	; 0x80274e <g_twi1_gyro_1_gyro_y+0x1>
    57f8:	70 90 4b 27 	lds	r7, 0x274B	; 0x80274b <g_twi1_gyro_1_gyro_z>
    57fc:	80 90 4c 27 	lds	r8, 0x274C	; 0x80274c <g_twi1_gyro_1_gyro_z+0x1>
    5800:	9f bf       	out	0x3f, r25	; 63
    5802:	9f b7       	in	r25, 0x3f	; 63
    5804:	9c 83       	std	Y+4, r25	; 0x04
    5806:	f8 94       	cli
    5808:	9c 80       	ldd	r9, Y+4	; 0x04
    580a:	28 2f       	mov	r18, r24
    580c:	93 2f       	mov	r25, r19
    580e:	99 0f       	add	r25, r25
    5810:	99 0b       	sbc	r25, r25
    5812:	0f 2e       	mov	r0, r31
    5814:	f0 e9       	ldi	r31, 0x90	; 144
    5816:	af 2e       	mov	r10, r31
    5818:	f0 2d       	mov	r31, r0
    581a:	0f 2e       	mov	r0, r31
    581c:	f0 ed       	ldi	r31, 0xD0	; 208
    581e:	bf 2e       	mov	r11, r31
    5820:	f0 2d       	mov	r31, r0
    5822:	0f 2e       	mov	r0, r31
    5824:	f3 e0       	ldi	r31, 0x03	; 3
    5826:	cf 2e       	mov	r12, r31
    5828:	f0 2d       	mov	r31, r0
    582a:	00 e0       	ldi	r16, 0x00	; 0
    582c:	49 2f       	mov	r20, r25
    582e:	59 2f       	mov	r21, r25
    5830:	69 2f       	mov	r22, r25
    5832:	79 2f       	mov	r23, r25
    5834:	89 2f       	mov	r24, r25
    5836:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    583a:	0f e0       	ldi	r16, 0x0F	; 15
    583c:	0e 94 51 7b 	call	0xf6a2	; 0xf6a2 <__ashrdi3>
    5840:	20 93 47 27 	sts	0x2747, r18	; 0x802747 <g_twi1_gyro_1_gyro_x_mdps>
    5844:	30 93 48 27 	sts	0x2748, r19	; 0x802748 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    5848:	40 93 49 27 	sts	0x2749, r20	; 0x802749 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    584c:	50 93 4a 27 	sts	0x274A, r21	; 0x80274a <g_twi1_gyro_1_gyro_x_mdps+0x3>
    5850:	25 2d       	mov	r18, r5
    5852:	96 2d       	mov	r25, r6
    5854:	99 0f       	add	r25, r25
    5856:	99 0b       	sbc	r25, r25
    5858:	00 e0       	ldi	r16, 0x00	; 0
    585a:	36 2d       	mov	r19, r6
    585c:	49 2f       	mov	r20, r25
    585e:	59 2f       	mov	r21, r25
    5860:	69 2f       	mov	r22, r25
    5862:	79 2f       	mov	r23, r25
    5864:	89 2f       	mov	r24, r25
    5866:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    586a:	0f e0       	ldi	r16, 0x0F	; 15
    586c:	0e 94 51 7b 	call	0xf6a2	; 0xf6a2 <__ashrdi3>
    5870:	20 93 43 27 	sts	0x2743, r18	; 0x802743 <g_twi1_gyro_1_gyro_y_mdps>
    5874:	30 93 44 27 	sts	0x2744, r19	; 0x802744 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    5878:	40 93 45 27 	sts	0x2745, r20	; 0x802745 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    587c:	50 93 46 27 	sts	0x2746, r21	; 0x802746 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    5880:	27 2d       	mov	r18, r7
    5882:	98 2d       	mov	r25, r8
    5884:	99 0f       	add	r25, r25
    5886:	99 0b       	sbc	r25, r25
    5888:	00 e0       	ldi	r16, 0x00	; 0
    588a:	38 2d       	mov	r19, r8
    588c:	49 2f       	mov	r20, r25
    588e:	59 2f       	mov	r21, r25
    5890:	69 2f       	mov	r22, r25
    5892:	79 2f       	mov	r23, r25
    5894:	89 2f       	mov	r24, r25
    5896:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    589a:	0f e0       	ldi	r16, 0x0F	; 15
    589c:	0e 94 51 7b 	call	0xf6a2	; 0xf6a2 <__ashrdi3>
    58a0:	20 93 3f 27 	sts	0x273F, r18	; 0x80273f <g_twi1_gyro_1_gyro_z_mdps>
    58a4:	30 93 40 27 	sts	0x2740, r19	; 0x802740 <g_twi1_gyro_1_gyro_z_mdps+0x1>
    58a8:	40 93 41 27 	sts	0x2741, r20	; 0x802741 <g_twi1_gyro_1_gyro_z_mdps+0x2>
    58ac:	50 93 42 27 	sts	0x2742, r21	; 0x802742 <g_twi1_gyro_1_gyro_z_mdps+0x3>
    58b0:	9f be       	out	0x3f, r9	; 63
    58b2:	8f b7       	in	r24, 0x3f	; 63
    58b4:	8d 83       	std	Y+5, r24	; 0x05
    58b6:	f8 94       	cli
    58b8:	8d 81       	ldd	r24, Y+5	; 0x05
    58ba:	20 91 39 27 	lds	r18, 0x2739	; 0x802739 <g_twi1_gyro_2_mag_x>
    58be:	30 91 3a 27 	lds	r19, 0x273A	; 0x80273a <g_twi1_gyro_2_mag_x+0x1>
    58c2:	e0 90 37 27 	lds	r14, 0x2737	; 0x802737 <g_twi1_gyro_2_mag_y>
    58c6:	f0 90 38 27 	lds	r15, 0x2738	; 0x802738 <g_twi1_gyro_2_mag_y+0x1>
    58ca:	a0 90 35 27 	lds	r10, 0x2735	; 0x802735 <g_twi1_gyro_2_mag_z>
    58ce:	b0 90 36 27 	lds	r11, 0x2736	; 0x802736 <g_twi1_gyro_2_mag_z+0x1>
    58d2:	00 91 61 27 	lds	r16, 0x2761	; 0x802761 <g_twi1_gyro_1_temp>
    58d6:	10 91 62 27 	lds	r17, 0x2762	; 0x802762 <g_twi1_gyro_1_temp+0x1>
    58da:	8f bf       	out	0x3f, r24	; 63
    58dc:	a0 91 43 20 	lds	r26, 0x2043	; 0x802043 <g_twi1_gyro_2_mag_factx>
    58e0:	b0 91 44 20 	lds	r27, 0x2044	; 0x802044 <g_twi1_gyro_2_mag_factx+0x1>
    58e4:	e0 91 3d 27 	lds	r30, 0x273D	; 0x80273d <g_twi1_gyro_2_asax>
    58e8:	33 23       	and	r19, r19
    58ea:	2c f1       	brlt	.+74     	; 0x5936 <task_twi1_gyro+0x384>
    58ec:	0e 94 f8 79 	call	0xf3f0	; 0xf3f0 <__mulhisi3>
    58f0:	9b 01       	movw	r18, r22
    58f2:	ac 01       	movw	r20, r24
    58f4:	8e 2f       	mov	r24, r30
    58f6:	ee 0f       	add	r30, r30
    58f8:	99 0b       	sbc	r25, r25
    58fa:	aa 0b       	sbc	r26, r26
    58fc:	bb 0b       	sbc	r27, r27
    58fe:	bc 01       	movw	r22, r24
    5900:	cd 01       	movw	r24, r26
    5902:	60 58       	subi	r22, 0x80	; 128
    5904:	7f 4f       	sbci	r23, 0xFF	; 255
    5906:	8f 4f       	sbci	r24, 0xFF	; 255
    5908:	9f 4f       	sbci	r25, 0xFF	; 255
    590a:	0e 94 7c 79 	call	0xf2f8	; 0xf2f8 <__mulsi3>
    590e:	2a e0       	ldi	r18, 0x0A	; 10
    5910:	30 e0       	ldi	r19, 0x00	; 0
    5912:	40 e0       	ldi	r20, 0x00	; 0
    5914:	50 e0       	ldi	r21, 0x00	; 0
    5916:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <__divmodsi4>
    591a:	29 01       	movw	r4, r18
    591c:	3a 01       	movw	r6, r20
    591e:	80 e8       	ldi	r24, 0x80	; 128
    5920:	48 0e       	add	r4, r24
    5922:	51 1c       	adc	r5, r1
    5924:	61 1c       	adc	r6, r1
    5926:	71 1c       	adc	r7, r1
    5928:	45 2c       	mov	r4, r5
    592a:	56 2c       	mov	r5, r6
    592c:	67 2c       	mov	r6, r7
    592e:	77 24       	eor	r7, r7
    5930:	67 fc       	sbrc	r6, 7
    5932:	7a 94       	dec	r7
    5934:	24 c0       	rjmp	.+72     	; 0x597e <task_twi1_gyro+0x3cc>
    5936:	0e 94 f8 79 	call	0xf3f0	; 0xf3f0 <__mulhisi3>
    593a:	9b 01       	movw	r18, r22
    593c:	ac 01       	movw	r20, r24
    593e:	8e 2f       	mov	r24, r30
    5940:	ee 0f       	add	r30, r30
    5942:	99 0b       	sbc	r25, r25
    5944:	aa 0b       	sbc	r26, r26
    5946:	bb 0b       	sbc	r27, r27
    5948:	bc 01       	movw	r22, r24
    594a:	cd 01       	movw	r24, r26
    594c:	60 58       	subi	r22, 0x80	; 128
    594e:	7f 4f       	sbci	r23, 0xFF	; 255
    5950:	8f 4f       	sbci	r24, 0xFF	; 255
    5952:	9f 4f       	sbci	r25, 0xFF	; 255
    5954:	0e 94 7c 79 	call	0xf2f8	; 0xf2f8 <__mulsi3>
    5958:	2a e0       	ldi	r18, 0x0A	; 10
    595a:	30 e0       	ldi	r19, 0x00	; 0
    595c:	40 e0       	ldi	r20, 0x00	; 0
    595e:	50 e0       	ldi	r21, 0x00	; 0
    5960:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <__divmodsi4>
    5964:	29 01       	movw	r4, r18
    5966:	3a 01       	movw	r6, r20
    5968:	80 e8       	ldi	r24, 0x80	; 128
    596a:	48 1a       	sub	r4, r24
    596c:	51 08       	sbc	r5, r1
    596e:	61 08       	sbc	r6, r1
    5970:	71 08       	sbc	r7, r1
    5972:	45 2c       	mov	r4, r5
    5974:	56 2c       	mov	r5, r6
    5976:	67 2c       	mov	r6, r7
    5978:	77 24       	eor	r7, r7
    597a:	67 fc       	sbrc	r6, 7
    597c:	7a 94       	dec	r7
    597e:	a0 91 41 20 	lds	r26, 0x2041	; 0x802041 <g_twi1_gyro_2_mag_facty>
    5982:	b0 91 42 20 	lds	r27, 0x2042	; 0x802042 <g_twi1_gyro_2_mag_facty+0x1>
    5986:	e0 91 3c 27 	lds	r30, 0x273C	; 0x80273c <g_twi1_gyro_2_asay>
    598a:	ff 20       	and	r15, r15
    598c:	34 f1       	brlt	.+76     	; 0x59da <task_twi1_gyro+0x428>
    598e:	97 01       	movw	r18, r14
    5990:	0e 94 f8 79 	call	0xf3f0	; 0xf3f0 <__mulhisi3>
    5994:	9b 01       	movw	r18, r22
    5996:	ac 01       	movw	r20, r24
    5998:	8e 2f       	mov	r24, r30
    599a:	ee 0f       	add	r30, r30
    599c:	99 0b       	sbc	r25, r25
    599e:	aa 0b       	sbc	r26, r26
    59a0:	bb 0b       	sbc	r27, r27
    59a2:	bc 01       	movw	r22, r24
    59a4:	cd 01       	movw	r24, r26
    59a6:	60 58       	subi	r22, 0x80	; 128
    59a8:	7f 4f       	sbci	r23, 0xFF	; 255
    59aa:	8f 4f       	sbci	r24, 0xFF	; 255
    59ac:	9f 4f       	sbci	r25, 0xFF	; 255
    59ae:	0e 94 7c 79 	call	0xf2f8	; 0xf2f8 <__mulsi3>
    59b2:	2a e0       	ldi	r18, 0x0A	; 10
    59b4:	30 e0       	ldi	r19, 0x00	; 0
    59b6:	40 e0       	ldi	r20, 0x00	; 0
    59b8:	50 e0       	ldi	r21, 0x00	; 0
    59ba:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <__divmodsi4>
    59be:	69 01       	movw	r12, r18
    59c0:	7a 01       	movw	r14, r20
    59c2:	80 e8       	ldi	r24, 0x80	; 128
    59c4:	c8 0e       	add	r12, r24
    59c6:	d1 1c       	adc	r13, r1
    59c8:	e1 1c       	adc	r14, r1
    59ca:	f1 1c       	adc	r15, r1
    59cc:	cd 2c       	mov	r12, r13
    59ce:	de 2c       	mov	r13, r14
    59d0:	ef 2c       	mov	r14, r15
    59d2:	ff 24       	eor	r15, r15
    59d4:	e7 fc       	sbrc	r14, 7
    59d6:	fa 94       	dec	r15
    59d8:	25 c0       	rjmp	.+74     	; 0x5a24 <task_twi1_gyro+0x472>
    59da:	97 01       	movw	r18, r14
    59dc:	0e 94 f8 79 	call	0xf3f0	; 0xf3f0 <__mulhisi3>
    59e0:	9b 01       	movw	r18, r22
    59e2:	ac 01       	movw	r20, r24
    59e4:	8e 2f       	mov	r24, r30
    59e6:	ee 0f       	add	r30, r30
    59e8:	99 0b       	sbc	r25, r25
    59ea:	aa 0b       	sbc	r26, r26
    59ec:	bb 0b       	sbc	r27, r27
    59ee:	bc 01       	movw	r22, r24
    59f0:	cd 01       	movw	r24, r26
    59f2:	60 58       	subi	r22, 0x80	; 128
    59f4:	7f 4f       	sbci	r23, 0xFF	; 255
    59f6:	8f 4f       	sbci	r24, 0xFF	; 255
    59f8:	9f 4f       	sbci	r25, 0xFF	; 255
    59fa:	0e 94 7c 79 	call	0xf2f8	; 0xf2f8 <__mulsi3>
    59fe:	2a e0       	ldi	r18, 0x0A	; 10
    5a00:	30 e0       	ldi	r19, 0x00	; 0
    5a02:	40 e0       	ldi	r20, 0x00	; 0
    5a04:	50 e0       	ldi	r21, 0x00	; 0
    5a06:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <__divmodsi4>
    5a0a:	69 01       	movw	r12, r18
    5a0c:	7a 01       	movw	r14, r20
    5a0e:	80 e8       	ldi	r24, 0x80	; 128
    5a10:	c8 1a       	sub	r12, r24
    5a12:	d1 08       	sbc	r13, r1
    5a14:	e1 08       	sbc	r14, r1
    5a16:	f1 08       	sbc	r15, r1
    5a18:	cd 2c       	mov	r12, r13
    5a1a:	de 2c       	mov	r13, r14
    5a1c:	ef 2c       	mov	r14, r15
    5a1e:	ff 24       	eor	r15, r15
    5a20:	e7 fc       	sbrc	r14, 7
    5a22:	fa 94       	dec	r15
    5a24:	a0 91 3f 20 	lds	r26, 0x203F	; 0x80203f <g_twi1_gyro_2_mag_factz>
    5a28:	b0 91 40 20 	lds	r27, 0x2040	; 0x802040 <g_twi1_gyro_2_mag_factz+0x1>
    5a2c:	e0 91 3b 27 	lds	r30, 0x273B	; 0x80273b <g_twi1_gyro_2_asaz>
    5a30:	bb 20       	and	r11, r11
    5a32:	34 f1       	brlt	.+76     	; 0x5a80 <task_twi1_gyro+0x4ce>
    5a34:	95 01       	movw	r18, r10
    5a36:	0e 94 f8 79 	call	0xf3f0	; 0xf3f0 <__mulhisi3>
    5a3a:	9b 01       	movw	r18, r22
    5a3c:	ac 01       	movw	r20, r24
    5a3e:	8e 2f       	mov	r24, r30
    5a40:	ee 0f       	add	r30, r30
    5a42:	99 0b       	sbc	r25, r25
    5a44:	aa 0b       	sbc	r26, r26
    5a46:	bb 0b       	sbc	r27, r27
    5a48:	bc 01       	movw	r22, r24
    5a4a:	cd 01       	movw	r24, r26
    5a4c:	60 58       	subi	r22, 0x80	; 128
    5a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a50:	8f 4f       	sbci	r24, 0xFF	; 255
    5a52:	9f 4f       	sbci	r25, 0xFF	; 255
    5a54:	0e 94 7c 79 	call	0xf2f8	; 0xf2f8 <__mulsi3>
    5a58:	2a e0       	ldi	r18, 0x0A	; 10
    5a5a:	30 e0       	ldi	r19, 0x00	; 0
    5a5c:	40 e0       	ldi	r20, 0x00	; 0
    5a5e:	50 e0       	ldi	r21, 0x00	; 0
    5a60:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <__divmodsi4>
    5a64:	49 01       	movw	r8, r18
    5a66:	5a 01       	movw	r10, r20
    5a68:	80 e8       	ldi	r24, 0x80	; 128
    5a6a:	88 0e       	add	r8, r24
    5a6c:	91 1c       	adc	r9, r1
    5a6e:	a1 1c       	adc	r10, r1
    5a70:	b1 1c       	adc	r11, r1
    5a72:	89 2c       	mov	r8, r9
    5a74:	9a 2c       	mov	r9, r10
    5a76:	ab 2c       	mov	r10, r11
    5a78:	bb 24       	eor	r11, r11
    5a7a:	a7 fc       	sbrc	r10, 7
    5a7c:	ba 94       	dec	r11
    5a7e:	25 c0       	rjmp	.+74     	; 0x5aca <task_twi1_gyro+0x518>
    5a80:	95 01       	movw	r18, r10
    5a82:	0e 94 f8 79 	call	0xf3f0	; 0xf3f0 <__mulhisi3>
    5a86:	9b 01       	movw	r18, r22
    5a88:	ac 01       	movw	r20, r24
    5a8a:	8e 2f       	mov	r24, r30
    5a8c:	ee 0f       	add	r30, r30
    5a8e:	99 0b       	sbc	r25, r25
    5a90:	aa 0b       	sbc	r26, r26
    5a92:	bb 0b       	sbc	r27, r27
    5a94:	bc 01       	movw	r22, r24
    5a96:	cd 01       	movw	r24, r26
    5a98:	60 58       	subi	r22, 0x80	; 128
    5a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5aa0:	0e 94 7c 79 	call	0xf2f8	; 0xf2f8 <__mulsi3>
    5aa4:	2a e0       	ldi	r18, 0x0A	; 10
    5aa6:	30 e0       	ldi	r19, 0x00	; 0
    5aa8:	40 e0       	ldi	r20, 0x00	; 0
    5aaa:	50 e0       	ldi	r21, 0x00	; 0
    5aac:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <__divmodsi4>
    5ab0:	49 01       	movw	r8, r18
    5ab2:	5a 01       	movw	r10, r20
    5ab4:	80 e8       	ldi	r24, 0x80	; 128
    5ab6:	88 1a       	sub	r8, r24
    5ab8:	91 08       	sbc	r9, r1
    5aba:	a1 08       	sbc	r10, r1
    5abc:	b1 08       	sbc	r11, r1
    5abe:	89 2c       	mov	r8, r9
    5ac0:	9a 2c       	mov	r9, r10
    5ac2:	ab 2c       	mov	r10, r11
    5ac4:	bb 24       	eor	r11, r11
    5ac6:	a7 fc       	sbrc	r10, 7
    5ac8:	ba 94       	dec	r11
    5aca:	80 91 5f 27 	lds	r24, 0x275F	; 0x80275f <g_twi1_gyro_1_temp_RTofs>
    5ace:	90 91 60 27 	lds	r25, 0x2760	; 0x802760 <g_twi1_gyro_1_temp_RTofs+0x1>
    5ad2:	d8 01       	movw	r26, r16
    5ad4:	a8 1b       	sub	r26, r24
    5ad6:	b9 0b       	sbc	r27, r25
    5ad8:	24 e6       	ldi	r18, 0x64	; 100
    5ada:	30 e0       	ldi	r19, 0x00	; 0
    5adc:	0e 94 0d 7a 	call	0xf41a	; 0xf41a <__usmulhisi3>
    5ae0:	20 91 5d 20 	lds	r18, 0x205D	; 0x80205d <g_twi1_gyro_1_temp_sens>
    5ae4:	30 91 5e 20 	lds	r19, 0x205E	; 0x80205e <g_twi1_gyro_1_temp_sens+0x1>
    5ae8:	03 2e       	mov	r0, r19
    5aea:	00 0c       	add	r0, r0
    5aec:	44 0b       	sbc	r20, r20
    5aee:	55 0b       	sbc	r21, r21
    5af0:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <__divmodsi4>
    5af4:	2c 5c       	subi	r18, 0xCC	; 204
    5af6:	37 4f       	sbci	r19, 0xF7	; 247
    5af8:	8f b7       	in	r24, 0x3f	; 63
    5afa:	8e 83       	std	Y+6, r24	; 0x06
    5afc:	f8 94       	cli
    5afe:	8e 81       	ldd	r24, Y+6	; 0x06
    5b00:	40 92 31 27 	sts	0x2731, r4	; 0x802731 <g_twi1_gyro_2_mag_x_nT>
    5b04:	50 92 32 27 	sts	0x2732, r5	; 0x802732 <g_twi1_gyro_2_mag_x_nT+0x1>
    5b08:	60 92 33 27 	sts	0x2733, r6	; 0x802733 <g_twi1_gyro_2_mag_x_nT+0x2>
    5b0c:	70 92 34 27 	sts	0x2734, r7	; 0x802734 <g_twi1_gyro_2_mag_x_nT+0x3>
    5b10:	c0 92 2d 27 	sts	0x272D, r12	; 0x80272d <g_twi1_gyro_2_mag_y_nT>
    5b14:	d0 92 2e 27 	sts	0x272E, r13	; 0x80272e <g_twi1_gyro_2_mag_y_nT+0x1>
    5b18:	e0 92 2f 27 	sts	0x272F, r14	; 0x80272f <g_twi1_gyro_2_mag_y_nT+0x2>
    5b1c:	f0 92 30 27 	sts	0x2730, r15	; 0x802730 <g_twi1_gyro_2_mag_y_nT+0x3>
    5b20:	80 92 29 27 	sts	0x2729, r8	; 0x802729 <g_twi1_gyro_2_mag_z_nT>
    5b24:	90 92 2a 27 	sts	0x272A, r9	; 0x80272a <g_twi1_gyro_2_mag_z_nT+0x1>
    5b28:	a0 92 2b 27 	sts	0x272B, r10	; 0x80272b <g_twi1_gyro_2_mag_z_nT+0x2>
    5b2c:	b0 92 2c 27 	sts	0x272C, r11	; 0x80272c <g_twi1_gyro_2_mag_z_nT+0x3>
    5b30:	20 93 5d 27 	sts	0x275D, r18	; 0x80275d <g_twi1_gyro_1_temp_deg_100>
    5b34:	30 93 5e 27 	sts	0x275E, r19	; 0x80275e <g_twi1_gyro_1_temp_deg_100+0x1>
    5b38:	8f bf       	out	0x3f, r24	; 63
    5b3a:	26 96       	adiw	r28, 0x06	; 6
    5b3c:	cd bf       	out	0x3d, r28	; 61
    5b3e:	de bf       	out	0x3e, r29	; 62
    5b40:	df 91       	pop	r29
    5b42:	cf 91       	pop	r28
    5b44:	1f 91       	pop	r17
    5b46:	0f 91       	pop	r16
    5b48:	ff 90       	pop	r15
    5b4a:	ef 90       	pop	r14
    5b4c:	df 90       	pop	r13
    5b4e:	cf 90       	pop	r12
    5b50:	bf 90       	pop	r11
    5b52:	af 90       	pop	r10
    5b54:	9f 90       	pop	r9
    5b56:	8f 90       	pop	r8
    5b58:	7f 90       	pop	r7
    5b5a:	6f 90       	pop	r6
    5b5c:	5f 90       	pop	r5
    5b5e:	4f 90       	pop	r4
    5b60:	08 95       	ret

00005b62 <task_twi1_baro>:
    5b62:	2f 92       	push	r2
    5b64:	3f 92       	push	r3
    5b66:	4f 92       	push	r4
    5b68:	5f 92       	push	r5
    5b6a:	6f 92       	push	r6
    5b6c:	7f 92       	push	r7
    5b6e:	8f 92       	push	r8
    5b70:	9f 92       	push	r9
    5b72:	af 92       	push	r10
    5b74:	bf 92       	push	r11
    5b76:	cf 92       	push	r12
    5b78:	df 92       	push	r13
    5b7a:	ef 92       	push	r14
    5b7c:	ff 92       	push	r15
    5b7e:	0f 93       	push	r16
    5b80:	1f 93       	push	r17
    5b82:	cf 93       	push	r28
    5b84:	df 93       	push	r29
    5b86:	cd b7       	in	r28, 0x3d	; 61
    5b88:	de b7       	in	r29, 0x3e	; 62
    5b8a:	a6 97       	sbiw	r28, 0x26	; 38
    5b8c:	cd bf       	out	0x3d, r28	; 61
    5b8e:	de bf       	out	0x3e, r29	; 62
    5b90:	8f b7       	in	r24, 0x3f	; 63
    5b92:	8a 83       	std	Y+2, r24	; 0x02
    5b94:	f8 94       	cli
    5b96:	8a 81       	ldd	r24, Y+2	; 0x02
    5b98:	20 91 12 27 	lds	r18, 0x2712	; 0x802712 <g_twi1_baro_d1>
    5b9c:	30 91 13 27 	lds	r19, 0x2713	; 0x802713 <g_twi1_baro_d1+0x1>
    5ba0:	40 91 14 27 	lds	r20, 0x2714	; 0x802714 <g_twi1_baro_d1+0x2>
    5ba4:	50 91 15 27 	lds	r21, 0x2715	; 0x802715 <g_twi1_baro_d1+0x3>
    5ba8:	2f 8b       	std	Y+23, r18	; 0x17
    5baa:	38 8f       	std	Y+24, r19	; 0x18
    5bac:	49 8f       	std	Y+25, r20	; 0x19
    5bae:	5a 8f       	std	Y+26, r21	; 0x1a
    5bb0:	40 91 0e 27 	lds	r20, 0x270E	; 0x80270e <g_twi1_baro_d2>
    5bb4:	50 91 0f 27 	lds	r21, 0x270F	; 0x80270f <g_twi1_baro_d2+0x1>
    5bb8:	60 91 10 27 	lds	r22, 0x2710	; 0x802710 <g_twi1_baro_d2+0x2>
    5bbc:	70 91 11 27 	lds	r23, 0x2711	; 0x802711 <g_twi1_baro_d2+0x3>
    5bc0:	8f bf       	out	0x3f, r24	; 63
    5bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    5bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    5bc6:	a9 8d       	ldd	r26, Y+25	; 0x19
    5bc8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5bca:	89 2b       	or	r24, r25
    5bcc:	8a 2b       	or	r24, r26
    5bce:	8b 2b       	or	r24, r27
    5bd0:	31 f4       	brne	.+12     	; 0x5bde <task_twi1_baro+0x7c>
    5bd2:	41 15       	cp	r20, r1
    5bd4:	51 05       	cpc	r21, r1
    5bd6:	61 05       	cpc	r22, r1
    5bd8:	71 05       	cpc	r23, r1
    5bda:	09 f4       	brne	.+2      	; 0x5bde <task_twi1_baro+0x7c>
    5bdc:	fe c1       	rjmp	.+1020   	; 0x5fda <task_twi1_baro+0x478>
    5bde:	0f 2e       	mov	r0, r31
    5be0:	f6 e1       	ldi	r31, 0x16	; 22
    5be2:	2f 2e       	mov	r2, r31
    5be4:	f7 e2       	ldi	r31, 0x27	; 39
    5be6:	3f 2e       	mov	r3, r31
    5be8:	f0 2d       	mov	r31, r0
    5bea:	d1 01       	movw	r26, r2
    5bec:	1a 96       	adiw	r26, 0x0a	; 10
    5bee:	8d 91       	ld	r24, X+
    5bf0:	9c 91       	ld	r25, X
    5bf2:	1b 97       	sbiw	r26, 0x0b	; 11
    5bf4:	a0 e0       	ldi	r26, 0x00	; 0
    5bf6:	b0 e0       	ldi	r27, 0x00	; 0
    5bf8:	ba 2f       	mov	r27, r26
    5bfa:	a9 2f       	mov	r26, r25
    5bfc:	98 2f       	mov	r25, r24
    5bfe:	88 27       	eor	r24, r24
    5c00:	2a 01       	movw	r4, r20
    5c02:	3b 01       	movw	r6, r22
    5c04:	48 1a       	sub	r4, r24
    5c06:	59 0a       	sbc	r5, r25
    5c08:	6a 0a       	sbc	r6, r26
    5c0a:	7b 0a       	sbc	r7, r27
    5c0c:	a3 01       	movw	r20, r6
    5c0e:	92 01       	movw	r18, r4
    5c10:	55 0f       	add	r21, r21
    5c12:	22 0b       	sbc	r18, r18
    5c14:	32 2f       	mov	r19, r18
    5c16:	a9 01       	movw	r20, r18
    5c18:	2b 83       	std	Y+3, r18	; 0x03
    5c1a:	3c 83       	std	Y+4, r19	; 0x04
    5c1c:	4d 83       	std	Y+5, r20	; 0x05
    5c1e:	5e 83       	std	Y+6, r21	; 0x06
    5c20:	d1 01       	movw	r26, r2
    5c22:	1c 96       	adiw	r26, 0x0c	; 12
    5c24:	4d 91       	ld	r20, X+
    5c26:	5c 91       	ld	r21, X
    5c28:	1d 97       	sbiw	r26, 0x0d	; 13
    5c2a:	a4 2c       	mov	r10, r4
    5c2c:	b5 2c       	mov	r11, r5
    5c2e:	c6 2c       	mov	r12, r6
    5c30:	d7 2c       	mov	r13, r7
    5c32:	eb 80       	ldd	r14, Y+3	; 0x03
    5c34:	fe 2c       	mov	r15, r14
    5c36:	0e 2d       	mov	r16, r14
    5c38:	1e 2d       	mov	r17, r14
    5c3a:	24 2f       	mov	r18, r20
    5c3c:	35 2f       	mov	r19, r21
    5c3e:	40 e0       	ldi	r20, 0x00	; 0
    5c40:	50 e0       	ldi	r21, 0x00	; 0
    5c42:	60 e0       	ldi	r22, 0x00	; 0
    5c44:	70 e0       	ldi	r23, 0x00	; 0
    5c46:	80 e0       	ldi	r24, 0x00	; 0
    5c48:	90 e0       	ldi	r25, 0x00	; 0
    5c4a:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    5c4e:	07 e1       	ldi	r16, 0x17	; 23
    5c50:	0e 94 51 7b 	call	0xf6a2	; 0xf6a2 <__ashrdi3>
    5c54:	2b 87       	std	Y+11, r18	; 0x0b
    5c56:	3c 87       	std	Y+12, r19	; 0x0c
    5c58:	4d 87       	std	Y+13, r20	; 0x0d
    5c5a:	5e 87       	std	Y+14, r21	; 0x0e
    5c5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    5c5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5c60:	4d 85       	ldd	r20, Y+13	; 0x0d
    5c62:	5e 85       	ldd	r21, Y+14	; 0x0e
    5c64:	2b a3       	std	Y+35, r18	; 0x23
    5c66:	3c a3       	std	Y+36, r19	; 0x24
    5c68:	4d a3       	std	Y+37, r20	; 0x25
    5c6a:	5e a3       	std	Y+38, r21	; 0x26
    5c6c:	ba 01       	movw	r22, r20
    5c6e:	a9 01       	movw	r20, r18
    5c70:	40 53       	subi	r20, 0x30	; 48
    5c72:	58 4f       	sbci	r21, 0xF8	; 248
    5c74:	6f 4f       	sbci	r22, 0xFF	; 255
    5c76:	7f 4f       	sbci	r23, 0xFF	; 255
    5c78:	4b 8b       	std	Y+19, r20	; 0x13
    5c7a:	5c 8b       	std	Y+20, r21	; 0x14
    5c7c:	6d 8b       	std	Y+21, r22	; 0x15
    5c7e:	7e 8b       	std	Y+22, r23	; 0x16
    5c80:	d1 01       	movw	r26, r2
    5c82:	18 96       	adiw	r26, 0x08	; 8
    5c84:	4d 91       	ld	r20, X+
    5c86:	5c 91       	ld	r21, X
    5c88:	19 97       	sbiw	r26, 0x09	; 9
    5c8a:	fe 2c       	mov	r15, r14
    5c8c:	0e 2d       	mov	r16, r14
    5c8e:	24 2f       	mov	r18, r20
    5c90:	35 2f       	mov	r19, r21
    5c92:	40 e0       	ldi	r20, 0x00	; 0
    5c94:	50 e0       	ldi	r21, 0x00	; 0
    5c96:	60 e0       	ldi	r22, 0x00	; 0
    5c98:	70 e0       	ldi	r23, 0x00	; 0
    5c9a:	80 e0       	ldi	r24, 0x00	; 0
    5c9c:	90 e0       	ldi	r25, 0x00	; 0
    5c9e:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    5ca2:	06 e0       	ldi	r16, 0x06	; 6
    5ca4:	0e 94 51 7b 	call	0xf6a2	; 0xf6a2 <__ashrdi3>
    5ca8:	2f 87       	std	Y+15, r18	; 0x0f
    5caa:	38 8b       	std	Y+16, r19	; 0x10
    5cac:	84 2e       	mov	r8, r20
    5cae:	95 2e       	mov	r9, r21
    5cb0:	b6 2f       	mov	r27, r22
    5cb2:	a7 2f       	mov	r26, r23
    5cb4:	89 8b       	std	Y+17, r24	; 0x11
    5cb6:	9a 8b       	std	Y+18, r25	; 0x12
    5cb8:	f1 01       	movw	r30, r2
    5cba:	a4 80       	ldd	r10, Z+4	; 0x04
    5cbc:	b5 80       	ldd	r11, Z+5	; 0x05
    5cbe:	2a 2d       	mov	r18, r10
    5cc0:	3b 2d       	mov	r19, r11
    5cc2:	40 e0       	ldi	r20, 0x00	; 0
    5cc4:	50 e0       	ldi	r21, 0x00	; 0
    5cc6:	60 e0       	ldi	r22, 0x00	; 0
    5cc8:	70 e0       	ldi	r23, 0x00	; 0
    5cca:	80 e0       	ldi	r24, 0x00	; 0
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	01 e1       	ldi	r16, 0x11	; 17
    5cd0:	0e 94 38 7b 	call	0xf670	; 0xf670 <__ashldi3>
    5cd4:	a2 2e       	mov	r10, r18
    5cd6:	b3 2e       	mov	r11, r19
    5cd8:	c4 2e       	mov	r12, r20
    5cda:	d5 2e       	mov	r13, r21
    5cdc:	e6 2e       	mov	r14, r22
    5cde:	f7 2e       	mov	r15, r23
    5ce0:	08 2f       	mov	r16, r24
    5ce2:	19 2f       	mov	r17, r25
    5ce4:	2f 85       	ldd	r18, Y+15	; 0x0f
    5ce6:	38 89       	ldd	r19, Y+16	; 0x10
    5ce8:	48 2d       	mov	r20, r8
    5cea:	59 2d       	mov	r21, r9
    5cec:	6b 2f       	mov	r22, r27
    5cee:	7a 2f       	mov	r23, r26
    5cf0:	89 89       	ldd	r24, Y+17	; 0x11
    5cf2:	9a 89       	ldd	r25, Y+18	; 0x12
    5cf4:	0e 94 6f 7b 	call	0xf6de	; 0xf6de <__adddi3>
    5cf8:	2f 87       	std	Y+15, r18	; 0x0f
    5cfa:	38 8b       	std	Y+16, r19	; 0x10
    5cfc:	4b 8f       	std	Y+27, r20	; 0x1b
    5cfe:	5c 8f       	std	Y+28, r21	; 0x1c
    5d00:	6d 8f       	std	Y+29, r22	; 0x1d
    5d02:	7e 8f       	std	Y+30, r23	; 0x1e
    5d04:	8f 8f       	std	Y+31, r24	; 0x1f
    5d06:	98 a3       	std	Y+32, r25	; 0x20
    5d08:	46 81       	ldd	r20, Z+6	; 0x06
    5d0a:	57 81       	ldd	r21, Z+7	; 0x07
    5d0c:	a4 2c       	mov	r10, r4
    5d0e:	b5 2c       	mov	r11, r5
    5d10:	c6 2c       	mov	r12, r6
    5d12:	d7 2c       	mov	r13, r7
    5d14:	eb 80       	ldd	r14, Y+3	; 0x03
    5d16:	fe 2c       	mov	r15, r14
    5d18:	0e 2d       	mov	r16, r14
    5d1a:	1e 2d       	mov	r17, r14
    5d1c:	24 2f       	mov	r18, r20
    5d1e:	35 2f       	mov	r19, r21
    5d20:	40 e0       	ldi	r20, 0x00	; 0
    5d22:	50 e0       	ldi	r21, 0x00	; 0
    5d24:	60 e0       	ldi	r22, 0x00	; 0
    5d26:	70 e0       	ldi	r23, 0x00	; 0
    5d28:	80 e0       	ldi	r24, 0x00	; 0
    5d2a:	90 e0       	ldi	r25, 0x00	; 0
    5d2c:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    5d30:	07 e0       	ldi	r16, 0x07	; 7
    5d32:	0e 94 51 7b 	call	0xf6a2	; 0xf6a2 <__ashrdi3>
    5d36:	29 8b       	std	Y+17, r18	; 0x11
    5d38:	3a 8b       	std	Y+18, r19	; 0x12
    5d3a:	84 2e       	mov	r8, r20
    5d3c:	95 2e       	mov	r9, r21
    5d3e:	b6 2f       	mov	r27, r22
    5d40:	a7 2f       	mov	r26, r23
    5d42:	89 a3       	std	Y+33, r24	; 0x21
    5d44:	9a a3       	std	Y+34, r25	; 0x22
    5d46:	f1 01       	movw	r30, r2
    5d48:	a2 80       	ldd	r10, Z+2	; 0x02
    5d4a:	b3 80       	ldd	r11, Z+3	; 0x03
    5d4c:	2a 2d       	mov	r18, r10
    5d4e:	3b 2d       	mov	r19, r11
    5d50:	40 e0       	ldi	r20, 0x00	; 0
    5d52:	50 e0       	ldi	r21, 0x00	; 0
    5d54:	60 e0       	ldi	r22, 0x00	; 0
    5d56:	70 e0       	ldi	r23, 0x00	; 0
    5d58:	80 e0       	ldi	r24, 0x00	; 0
    5d5a:	90 e0       	ldi	r25, 0x00	; 0
    5d5c:	00 e1       	ldi	r16, 0x10	; 16
    5d5e:	0e 94 38 7b 	call	0xf670	; 0xf670 <__ashldi3>
    5d62:	a2 2e       	mov	r10, r18
    5d64:	b3 2e       	mov	r11, r19
    5d66:	c4 2e       	mov	r12, r20
    5d68:	d5 2e       	mov	r13, r21
    5d6a:	e6 2e       	mov	r14, r22
    5d6c:	f7 2e       	mov	r15, r23
    5d6e:	08 2f       	mov	r16, r24
    5d70:	19 2f       	mov	r17, r25
    5d72:	29 89       	ldd	r18, Y+17	; 0x11
    5d74:	3a 89       	ldd	r19, Y+18	; 0x12
    5d76:	48 2d       	mov	r20, r8
    5d78:	59 2d       	mov	r21, r9
    5d7a:	6b 2f       	mov	r22, r27
    5d7c:	7a 2f       	mov	r23, r26
    5d7e:	89 a1       	ldd	r24, Y+33	; 0x21
    5d80:	9a a1       	ldd	r25, Y+34	; 0x22
    5d82:	0e 94 6f 7b 	call	0xf6de	; 0xf6de <__adddi3>
    5d86:	32 2e       	mov	r3, r18
    5d88:	23 2e       	mov	r2, r19
    5d8a:	49 8b       	std	Y+17, r20	; 0x11
    5d8c:	5a 8b       	std	Y+18, r21	; 0x12
    5d8e:	69 a3       	std	Y+33, r22	; 0x21
    5d90:	7a a3       	std	Y+34, r23	; 0x22
    5d92:	98 2e       	mov	r9, r24
    5d94:	89 2e       	mov	r8, r25
    5d96:	2b 89       	ldd	r18, Y+19	; 0x13
    5d98:	3c 89       	ldd	r19, Y+20	; 0x14
    5d9a:	4d 89       	ldd	r20, Y+21	; 0x15
    5d9c:	5e 89       	ldd	r21, Y+22	; 0x16
    5d9e:	20 3d       	cpi	r18, 0xD0	; 208
    5da0:	37 40       	sbci	r19, 0x07	; 7
    5da2:	41 05       	cpc	r20, r1
    5da4:	51 05       	cpc	r21, r1
    5da6:	0c f0       	brlt	.+2      	; 0x5daa <task_twi1_baro+0x248>
    5da8:	d0 c0       	rjmp	.+416    	; 0x5f4a <task_twi1_baro+0x3e8>
    5daa:	a4 2c       	mov	r10, r4
    5dac:	b5 2c       	mov	r11, r5
    5dae:	c6 2c       	mov	r12, r6
    5db0:	d7 2c       	mov	r13, r7
    5db2:	eb 80       	ldd	r14, Y+3	; 0x03
    5db4:	fe 2c       	mov	r15, r14
    5db6:	0e 2d       	mov	r16, r14
    5db8:	1e 2d       	mov	r17, r14
    5dba:	24 2d       	mov	r18, r4
    5dbc:	35 2d       	mov	r19, r5
    5dbe:	46 2d       	mov	r20, r6
    5dc0:	57 2d       	mov	r21, r7
    5dc2:	60 2f       	mov	r22, r16
    5dc4:	70 2f       	mov	r23, r16
    5dc6:	80 2f       	mov	r24, r16
    5dc8:	9e 2d       	mov	r25, r14
    5dca:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    5dce:	0f e1       	ldi	r16, 0x1F	; 31
    5dd0:	0e 94 51 7b 	call	0xf6a2	; 0xf6a2 <__ashrdi3>
    5dd4:	2b 83       	std	Y+3, r18	; 0x03
    5dd6:	3c 83       	std	Y+4, r19	; 0x04
    5dd8:	4d 83       	std	Y+5, r20	; 0x05
    5dda:	5e 83       	std	Y+6, r21	; 0x06
    5ddc:	2b 85       	ldd	r18, Y+11	; 0x0b
    5dde:	3c 85       	ldd	r19, Y+12	; 0x0c
    5de0:	4d 85       	ldd	r20, Y+13	; 0x0d
    5de2:	5e 85       	ldd	r21, Y+14	; 0x0e
    5de4:	ca 01       	movw	r24, r20
    5de6:	b9 01       	movw	r22, r18
    5de8:	0e 94 7c 79 	call	0xf2f8	; 0xf2f8 <__mulsi3>
    5dec:	2b 01       	movw	r4, r22
    5dee:	3c 01       	movw	r6, r24
    5df0:	ad e3       	ldi	r26, 0x3D	; 61
    5df2:	b0 e0       	ldi	r27, 0x00	; 0
    5df4:	9b 01       	movw	r18, r22
    5df6:	ac 01       	movw	r20, r24
    5df8:	0e 94 13 7a 	call	0xf426	; 0xf426 <__muluhisi3>
    5dfc:	7b 01       	movw	r14, r22
    5dfe:	8c 01       	movw	r16, r24
    5e00:	68 94       	set
    5e02:	13 f8       	bld	r1, 3
    5e04:	15 95       	asr	r17
    5e06:	07 95       	ror	r16
    5e08:	f7 94       	ror	r15
    5e0a:	e7 94       	ror	r14
    5e0c:	16 94       	lsr	r1
    5e0e:	d1 f7       	brne	.-12     	; 0x5e04 <task_twi1_baro+0x2a2>
    5e10:	44 0c       	add	r4, r4
    5e12:	55 1c       	adc	r5, r5
    5e14:	66 1c       	adc	r6, r6
    5e16:	77 1c       	adc	r7, r7
    5e18:	8b 89       	ldd	r24, Y+19	; 0x13
    5e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    5e1c:	ad 89       	ldd	r26, Y+21	; 0x15
    5e1e:	be 89       	ldd	r27, Y+22	; 0x16
    5e20:	84 32       	cpi	r24, 0x24	; 36
    5e22:	9a 4f       	sbci	r25, 0xFA	; 250
    5e24:	af 4f       	sbci	r26, 0xFF	; 255
    5e26:	bf 4f       	sbci	r27, 0xFF	; 255
    5e28:	c4 f5       	brge	.+112    	; 0x5e9a <task_twi1_baro+0x338>
    5e2a:	6b a1       	ldd	r22, Y+35	; 0x23
    5e2c:	7c a1       	ldd	r23, Y+36	; 0x24
    5e2e:	8d a1       	ldd	r24, Y+37	; 0x25
    5e30:	9e a1       	ldd	r25, Y+38	; 0x26
    5e32:	64 55       	subi	r22, 0x54	; 84
    5e34:	72 4f       	sbci	r23, 0xF2	; 242
    5e36:	8f 4f       	sbci	r24, 0xFF	; 255
    5e38:	9f 4f       	sbci	r25, 0xFF	; 255
    5e3a:	9b 01       	movw	r18, r22
    5e3c:	ac 01       	movw	r20, r24
    5e3e:	0e 94 7c 79 	call	0xf2f8	; 0xf2f8 <__mulsi3>
    5e42:	9b 01       	movw	r18, r22
    5e44:	ac 01       	movw	r20, r24
    5e46:	22 0f       	add	r18, r18
    5e48:	33 1f       	adc	r19, r19
    5e4a:	44 1f       	adc	r20, r20
    5e4c:	55 1f       	adc	r21, r21
    5e4e:	dc 01       	movw	r26, r24
    5e50:	cb 01       	movw	r24, r22
    5e52:	82 0f       	add	r24, r18
    5e54:	93 1f       	adc	r25, r19
    5e56:	a4 1f       	adc	r26, r20
    5e58:	b5 1f       	adc	r27, r21
    5e5a:	5c 01       	movw	r10, r24
    5e5c:	6d 01       	movw	r12, r26
    5e5e:	aa 0c       	add	r10, r10
    5e60:	bb 1c       	adc	r11, r11
    5e62:	cc 1c       	adc	r12, r12
    5e64:	dd 1c       	adc	r13, r13
    5e66:	aa 0c       	add	r10, r10
    5e68:	bb 1c       	adc	r11, r11
    5e6a:	cc 1c       	adc	r12, r12
    5e6c:	dd 1c       	adc	r13, r13
    5e6e:	8a 0d       	add	r24, r10
    5e70:	9b 1d       	adc	r25, r11
    5e72:	ac 1d       	adc	r26, r12
    5e74:	bd 1d       	adc	r27, r13
    5e76:	e8 0e       	add	r14, r24
    5e78:	f9 1e       	adc	r15, r25
    5e7a:	0a 1f       	adc	r16, r26
    5e7c:	1b 1f       	adc	r17, r27
    5e7e:	da 01       	movw	r26, r20
    5e80:	c9 01       	movw	r24, r18
    5e82:	88 0f       	add	r24, r24
    5e84:	99 1f       	adc	r25, r25
    5e86:	aa 1f       	adc	r26, r26
    5e88:	bb 1f       	adc	r27, r27
    5e8a:	88 0f       	add	r24, r24
    5e8c:	99 1f       	adc	r25, r25
    5e8e:	aa 1f       	adc	r26, r26
    5e90:	bb 1f       	adc	r27, r27
    5e92:	48 0e       	add	r4, r24
    5e94:	59 1e       	adc	r5, r25
    5e96:	6a 1e       	adc	r6, r26
    5e98:	7b 1e       	adc	r7, r27
    5e9a:	2b 89       	ldd	r18, Y+19	; 0x13
    5e9c:	3c 89       	ldd	r19, Y+20	; 0x14
    5e9e:	4d 89       	ldd	r20, Y+21	; 0x15
    5ea0:	5e 89       	ldd	r21, Y+22	; 0x16
    5ea2:	6b 81       	ldd	r22, Y+3	; 0x03
    5ea4:	7c 81       	ldd	r23, Y+4	; 0x04
    5ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    5eaa:	26 1b       	sub	r18, r22
    5eac:	37 0b       	sbc	r19, r23
    5eae:	48 0b       	sbc	r20, r24
    5eb0:	59 0b       	sbc	r21, r25
    5eb2:	2b 8b       	std	Y+19, r18	; 0x13
    5eb4:	3c 8b       	std	Y+20, r19	; 0x14
    5eb6:	4d 8b       	std	Y+21, r20	; 0x15
    5eb8:	5e 8b       	std	Y+22, r21	; 0x16
    5eba:	d8 01       	movw	r26, r16
    5ebc:	c7 01       	movw	r24, r14
    5ebe:	bb 0f       	add	r27, r27
    5ec0:	88 0b       	sbc	r24, r24
    5ec2:	98 2f       	mov	r25, r24
    5ec4:	dc 01       	movw	r26, r24
    5ec6:	8b 83       	std	Y+3, r24	; 0x03
    5ec8:	9c 83       	std	Y+4, r25	; 0x04
    5eca:	ad 83       	std	Y+5, r26	; 0x05
    5ecc:	be 83       	std	Y+6, r27	; 0x06
    5ece:	2f 85       	ldd	r18, Y+15	; 0x0f
    5ed0:	38 89       	ldd	r19, Y+16	; 0x10
    5ed2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5ed4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5ed6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5ed8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5eda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5edc:	98 a1       	ldd	r25, Y+32	; 0x20
    5ede:	ae 2c       	mov	r10, r14
    5ee0:	bf 2c       	mov	r11, r15
    5ee2:	c0 2e       	mov	r12, r16
    5ee4:	d1 2e       	mov	r13, r17
    5ee6:	eb 80       	ldd	r14, Y+3	; 0x03
    5ee8:	fe 2c       	mov	r15, r14
    5eea:	0e 2d       	mov	r16, r14
    5eec:	1e 2d       	mov	r17, r14
    5eee:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <__subdi3>
    5ef2:	2f 87       	std	Y+15, r18	; 0x0f
    5ef4:	38 8b       	std	Y+16, r19	; 0x10
    5ef6:	4b 8f       	std	Y+27, r20	; 0x1b
    5ef8:	5c 8f       	std	Y+28, r21	; 0x1c
    5efa:	6d 8f       	std	Y+29, r22	; 0x1d
    5efc:	7e 8f       	std	Y+30, r23	; 0x1e
    5efe:	8f 8f       	std	Y+31, r24	; 0x1f
    5f00:	98 a3       	std	Y+32, r25	; 0x20
    5f02:	a3 01       	movw	r20, r6
    5f04:	92 01       	movw	r18, r4
    5f06:	55 0f       	add	r21, r21
    5f08:	22 0b       	sbc	r18, r18
    5f0a:	32 2f       	mov	r19, r18
    5f0c:	a9 01       	movw	r20, r18
    5f0e:	2b 83       	std	Y+3, r18	; 0x03
    5f10:	3c 83       	std	Y+4, r19	; 0x04
    5f12:	4d 83       	std	Y+5, r20	; 0x05
    5f14:	5e 83       	std	Y+6, r21	; 0x06
    5f16:	23 2d       	mov	r18, r3
    5f18:	32 2d       	mov	r19, r2
    5f1a:	49 89       	ldd	r20, Y+17	; 0x11
    5f1c:	5a 89       	ldd	r21, Y+18	; 0x12
    5f1e:	69 a1       	ldd	r22, Y+33	; 0x21
    5f20:	7a a1       	ldd	r23, Y+34	; 0x22
    5f22:	89 2d       	mov	r24, r9
    5f24:	98 2d       	mov	r25, r8
    5f26:	a4 2c       	mov	r10, r4
    5f28:	b5 2c       	mov	r11, r5
    5f2a:	c6 2c       	mov	r12, r6
    5f2c:	d7 2c       	mov	r13, r7
    5f2e:	eb 80       	ldd	r14, Y+3	; 0x03
    5f30:	fe 2c       	mov	r15, r14
    5f32:	0e 2d       	mov	r16, r14
    5f34:	1e 2d       	mov	r17, r14
    5f36:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <__subdi3>
    5f3a:	32 2e       	mov	r3, r18
    5f3c:	23 2e       	mov	r2, r19
    5f3e:	49 8b       	std	Y+17, r20	; 0x11
    5f40:	5a 8b       	std	Y+18, r21	; 0x12
    5f42:	69 a3       	std	Y+33, r22	; 0x21
    5f44:	7a a3       	std	Y+34, r23	; 0x22
    5f46:	98 2e       	mov	r9, r24
    5f48:	89 2e       	mov	r8, r25
    5f4a:	8f b7       	in	r24, 0x3f	; 63
    5f4c:	89 83       	std	Y+1, r24	; 0x01
    5f4e:	f8 94       	cli
    5f50:	79 80       	ldd	r7, Y+1	; 0x01
    5f52:	4b 89       	ldd	r20, Y+19	; 0x13
    5f54:	5c 89       	ldd	r21, Y+20	; 0x14
    5f56:	6d 89       	ldd	r22, Y+21	; 0x15
    5f58:	7e 89       	ldd	r23, Y+22	; 0x16
    5f5a:	40 93 0a 27 	sts	0x270A, r20	; 0x80270a <g_twi1_baro_temp_100>
    5f5e:	50 93 0b 27 	sts	0x270B, r21	; 0x80270b <g_twi1_baro_temp_100+0x1>
    5f62:	60 93 0c 27 	sts	0x270C, r22	; 0x80270c <g_twi1_baro_temp_100+0x2>
    5f66:	70 93 0d 27 	sts	0x270D, r23	; 0x80270d <g_twi1_baro_temp_100+0x3>
    5f6a:	4f 89       	ldd	r20, Y+23	; 0x17
    5f6c:	58 8d       	ldd	r21, Y+24	; 0x18
    5f6e:	69 8d       	ldd	r22, Y+25	; 0x19
    5f70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5f72:	9a 01       	movw	r18, r20
    5f74:	ab 01       	movw	r20, r22
    5f76:	60 e0       	ldi	r22, 0x00	; 0
    5f78:	70 e0       	ldi	r23, 0x00	; 0
    5f7a:	cb 01       	movw	r24, r22
    5f7c:	2b 83       	std	Y+3, r18	; 0x03
    5f7e:	3c 83       	std	Y+4, r19	; 0x04
    5f80:	4d 83       	std	Y+5, r20	; 0x05
    5f82:	5e 83       	std	Y+6, r21	; 0x06
    5f84:	6f 83       	std	Y+7, r22	; 0x07
    5f86:	78 87       	std	Y+8, r23	; 0x08
    5f88:	89 87       	std	Y+9, r24	; 0x09
    5f8a:	9a 87       	std	Y+10, r25	; 0x0a
    5f8c:	a3 2c       	mov	r10, r3
    5f8e:	b2 2c       	mov	r11, r2
    5f90:	c9 88       	ldd	r12, Y+17	; 0x11
    5f92:	da 88       	ldd	r13, Y+18	; 0x12
    5f94:	e9 a0       	ldd	r14, Y+33	; 0x21
    5f96:	fa a0       	ldd	r15, Y+34	; 0x22
    5f98:	09 2d       	mov	r16, r9
    5f9a:	18 2d       	mov	r17, r8
    5f9c:	60 e0       	ldi	r22, 0x00	; 0
    5f9e:	70 e0       	ldi	r23, 0x00	; 0
    5fa0:	80 e0       	ldi	r24, 0x00	; 0
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    5fa8:	05 e1       	ldi	r16, 0x15	; 21
    5faa:	0e 94 51 7b 	call	0xf6a2	; 0xf6a2 <__ashrdi3>
    5fae:	af 84       	ldd	r10, Y+15	; 0x0f
    5fb0:	b8 88       	ldd	r11, Y+16	; 0x10
    5fb2:	cb 8c       	ldd	r12, Y+27	; 0x1b
    5fb4:	dc 8c       	ldd	r13, Y+28	; 0x1c
    5fb6:	ed 8c       	ldd	r14, Y+29	; 0x1d
    5fb8:	fe 8c       	ldd	r15, Y+30	; 0x1e
    5fba:	0f 8d       	ldd	r16, Y+31	; 0x1f
    5fbc:	18 a1       	ldd	r17, Y+32	; 0x20
    5fbe:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <__subdi3>
    5fc2:	0f e0       	ldi	r16, 0x0F	; 15
    5fc4:	0e 94 51 7b 	call	0xf6a2	; 0xf6a2 <__ashrdi3>
    5fc8:	20 93 06 27 	sts	0x2706, r18	; 0x802706 <g_twi1_baro_p_100>
    5fcc:	30 93 07 27 	sts	0x2707, r19	; 0x802707 <g_twi1_baro_p_100+0x1>
    5fd0:	40 93 08 27 	sts	0x2708, r20	; 0x802708 <g_twi1_baro_p_100+0x2>
    5fd4:	50 93 09 27 	sts	0x2709, r21	; 0x802709 <g_twi1_baro_p_100+0x3>
    5fd8:	7f be       	out	0x3f, r7	; 63
    5fda:	a6 96       	adiw	r28, 0x26	; 38
    5fdc:	cd bf       	out	0x3d, r28	; 61
    5fde:	de bf       	out	0x3e, r29	; 62
    5fe0:	df 91       	pop	r29
    5fe2:	cf 91       	pop	r28
    5fe4:	1f 91       	pop	r17
    5fe6:	0f 91       	pop	r16
    5fe8:	ff 90       	pop	r15
    5fea:	ef 90       	pop	r14
    5fec:	df 90       	pop	r13
    5fee:	cf 90       	pop	r12
    5ff0:	bf 90       	pop	r11
    5ff2:	af 90       	pop	r10
    5ff4:	9f 90       	pop	r9
    5ff6:	8f 90       	pop	r8
    5ff8:	7f 90       	pop	r7
    5ffa:	6f 90       	pop	r6
    5ffc:	5f 90       	pop	r5
    5ffe:	4f 90       	pop	r4
    6000:	3f 90       	pop	r3
    6002:	2f 90       	pop	r2
    6004:	08 95       	ret

00006006 <service_twi1_baro>:
    6006:	cf 93       	push	r28
    6008:	df 93       	push	r29
    600a:	1f 92       	push	r1
    600c:	cd b7       	in	r28, 0x3d	; 61
    600e:	de b7       	in	r29, 0x3e	; 62
    6010:	44 23       	and	r20, r20
    6012:	59 f0       	breq	.+22     	; 0x602a <service_twi1_baro+0x24>
    6014:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <s_step.7940>
    6018:	84 36       	cpi	r24, 0x64	; 100
    601a:	08 f4       	brcc	.+2      	; 0x601e <service_twi1_baro+0x18>
    601c:	cb c0       	rjmp	.+406    	; 0x61b4 <service_twi1_baro+0x1ae>
    601e:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <s_step.7940>
    6022:	81 e0       	ldi	r24, 0x01	; 1
    6024:	80 93 81 26 	sts	0x2681, r24	; 0x802681 <g_twi1_lock>
    6028:	09 c0       	rjmp	.+18     	; 0x603c <service_twi1_baro+0x36>
    602a:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <s_step.7940>
    602e:	85 31       	cpi	r24, 0x15	; 21
    6030:	19 f1       	breq	.+70     	; 0x6078 <service_twi1_baro+0x72>
    6032:	8b 32       	cpi	r24, 0x2B	; 43
    6034:	09 f4       	brne	.+2      	; 0x6038 <service_twi1_baro+0x32>
    6036:	5d c0       	rjmp	.+186    	; 0x60f2 <service_twi1_baro+0xec>
    6038:	81 11       	cpse	r24, r1
    603a:	b1 c0       	rjmp	.+354    	; 0x619e <service_twi1_baro+0x198>
    603c:	eb e2       	ldi	r30, 0x2B	; 43
    603e:	f0 e2       	ldi	r31, 0x20	; 32
    6040:	86 e7       	ldi	r24, 0x76	; 118
    6042:	80 83       	st	Z, r24
    6044:	88 e4       	ldi	r24, 0x48	; 72
    6046:	81 83       	std	Z+1, r24	; 0x01
    6048:	81 e0       	ldi	r24, 0x01	; 1
    604a:	90 e0       	ldi	r25, 0x00	; 0
    604c:	84 83       	std	Z+4, r24	; 0x04
    604e:	95 83       	std	Z+5, r25	; 0x05
    6050:	10 86       	std	Z+8, r1	; 0x08
    6052:	11 86       	std	Z+9, r1	; 0x09
    6054:	40 e0       	ldi	r20, 0x00	; 0
    6056:	bf 01       	movw	r22, r30
    6058:	80 ea       	ldi	r24, 0xA0	; 160
    605a:	94 e0       	ldi	r25, 0x04	; 4
    605c:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6060:	81 11       	cpse	r24, r1
    6062:	05 c0       	rjmp	.+10     	; 0x606e <service_twi1_baro+0x68>
    6064:	81 e0       	ldi	r24, 0x01	; 1
    6066:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7940>
    606a:	80 e0       	ldi	r24, 0x00	; 0
    606c:	ac c0       	rjmp	.+344    	; 0x61c6 <service_twi1_baro+0x1c0>
    606e:	88 ec       	ldi	r24, 0xC8	; 200
    6070:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7940>
    6074:	80 e0       	ldi	r24, 0x00	; 0
    6076:	a7 c0       	rjmp	.+334    	; 0x61c6 <service_twi1_baro+0x1c0>
    6078:	eb e2       	ldi	r30, 0x2B	; 43
    607a:	f0 e2       	ldi	r31, 0x20	; 32
    607c:	11 82       	std	Z+1, r1	; 0x01
    607e:	83 e0       	ldi	r24, 0x03	; 3
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	80 87       	std	Z+8, r24	; 0x08
    6084:	91 87       	std	Z+9, r25	; 0x09
    6086:	41 e0       	ldi	r20, 0x01	; 1
    6088:	bf 01       	movw	r22, r30
    608a:	80 ea       	ldi	r24, 0xA0	; 160
    608c:	94 e0       	ldi	r25, 0x04	; 4
    608e:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6092:	81 11       	cpse	r24, r1
    6094:	29 c0       	rjmp	.+82     	; 0x60e8 <service_twi1_baro+0xe2>
    6096:	e7 e3       	ldi	r30, 0x37	; 55
    6098:	f5 e2       	ldi	r31, 0x25	; 37
    609a:	20 81       	ld	r18, Z
    609c:	81 81       	ldd	r24, Z+1	; 0x01
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	a0 e0       	ldi	r26, 0x00	; 0
    60a2:	b0 e0       	ldi	r27, 0x00	; 0
    60a4:	ba 2f       	mov	r27, r26
    60a6:	a9 2f       	mov	r26, r25
    60a8:	98 2f       	mov	r25, r24
    60aa:	88 27       	eor	r24, r24
    60ac:	a2 2b       	or	r26, r18
    60ae:	22 81       	ldd	r18, Z+2	; 0x02
    60b0:	82 2b       	or	r24, r18
    60b2:	80 93 2d 23 	sts	0x232D, r24	; 0x80232d <s_twi1_baro_d1.7941>
    60b6:	90 93 2e 23 	sts	0x232E, r25	; 0x80232e <s_twi1_baro_d1.7941+0x1>
    60ba:	a0 93 2f 23 	sts	0x232F, r26	; 0x80232f <s_twi1_baro_d1.7941+0x2>
    60be:	b0 93 30 23 	sts	0x2330, r27	; 0x802330 <s_twi1_baro_d1.7941+0x3>
    60c2:	eb e2       	ldi	r30, 0x2B	; 43
    60c4:	f0 e2       	ldi	r31, 0x20	; 32
    60c6:	88 e5       	ldi	r24, 0x58	; 88
    60c8:	81 83       	std	Z+1, r24	; 0x01
    60ca:	10 86       	std	Z+8, r1	; 0x08
    60cc:	11 86       	std	Z+9, r1	; 0x09
    60ce:	40 e0       	ldi	r20, 0x00	; 0
    60d0:	bf 01       	movw	r22, r30
    60d2:	80 ea       	ldi	r24, 0xA0	; 160
    60d4:	94 e0       	ldi	r25, 0x04	; 4
    60d6:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    60da:	81 11       	cpse	r24, r1
    60dc:	05 c0       	rjmp	.+10     	; 0x60e8 <service_twi1_baro+0xe2>
    60de:	86 e1       	ldi	r24, 0x16	; 22
    60e0:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7940>
    60e4:	80 e0       	ldi	r24, 0x00	; 0
    60e6:	6f c0       	rjmp	.+222    	; 0x61c6 <service_twi1_baro+0x1c0>
    60e8:	83 ed       	ldi	r24, 0xD3	; 211
    60ea:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7940>
    60ee:	80 e0       	ldi	r24, 0x00	; 0
    60f0:	6a c0       	rjmp	.+212    	; 0x61c6 <service_twi1_baro+0x1c0>
    60f2:	eb e2       	ldi	r30, 0x2B	; 43
    60f4:	f0 e2       	ldi	r31, 0x20	; 32
    60f6:	11 82       	std	Z+1, r1	; 0x01
    60f8:	83 e0       	ldi	r24, 0x03	; 3
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	80 87       	std	Z+8, r24	; 0x08
    60fe:	91 87       	std	Z+9, r25	; 0x09
    6100:	41 e0       	ldi	r20, 0x01	; 1
    6102:	bf 01       	movw	r22, r30
    6104:	80 ea       	ldi	r24, 0xA0	; 160
    6106:	94 e0       	ldi	r25, 0x04	; 4
    6108:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    610c:	81 11       	cpse	r24, r1
    610e:	42 c0       	rjmp	.+132    	; 0x6194 <service_twi1_baro+0x18e>
    6110:	e7 e3       	ldi	r30, 0x37	; 55
    6112:	f5 e2       	ldi	r31, 0x25	; 37
    6114:	20 81       	ld	r18, Z
    6116:	81 81       	ldd	r24, Z+1	; 0x01
    6118:	90 e0       	ldi	r25, 0x00	; 0
    611a:	a0 e0       	ldi	r26, 0x00	; 0
    611c:	b0 e0       	ldi	r27, 0x00	; 0
    611e:	ba 2f       	mov	r27, r26
    6120:	a9 2f       	mov	r26, r25
    6122:	98 2f       	mov	r25, r24
    6124:	88 27       	eor	r24, r24
    6126:	a2 2b       	or	r26, r18
    6128:	22 81       	ldd	r18, Z+2	; 0x02
    612a:	82 2b       	or	r24, r18
    612c:	80 93 29 23 	sts	0x2329, r24	; 0x802329 <s_twi1_baro_d2.7942>
    6130:	90 93 2a 23 	sts	0x232A, r25	; 0x80232a <s_twi1_baro_d2.7942+0x1>
    6134:	a0 93 2b 23 	sts	0x232B, r26	; 0x80232b <s_twi1_baro_d2.7942+0x2>
    6138:	b0 93 2c 23 	sts	0x232C, r27	; 0x80232c <s_twi1_baro_d2.7942+0x3>
    613c:	8f b7       	in	r24, 0x3f	; 63
    613e:	89 83       	std	Y+1, r24	; 0x01
    6140:	f8 94       	cli
    6142:	89 81       	ldd	r24, Y+1	; 0x01
    6144:	40 91 2d 23 	lds	r20, 0x232D	; 0x80232d <s_twi1_baro_d1.7941>
    6148:	50 91 2e 23 	lds	r21, 0x232E	; 0x80232e <s_twi1_baro_d1.7941+0x1>
    614c:	60 91 2f 23 	lds	r22, 0x232F	; 0x80232f <s_twi1_baro_d1.7941+0x2>
    6150:	70 91 30 23 	lds	r23, 0x2330	; 0x802330 <s_twi1_baro_d1.7941+0x3>
    6154:	40 93 12 27 	sts	0x2712, r20	; 0x802712 <g_twi1_baro_d1>
    6158:	50 93 13 27 	sts	0x2713, r21	; 0x802713 <g_twi1_baro_d1+0x1>
    615c:	60 93 14 27 	sts	0x2714, r22	; 0x802714 <g_twi1_baro_d1+0x2>
    6160:	70 93 15 27 	sts	0x2715, r23	; 0x802715 <g_twi1_baro_d1+0x3>
    6164:	40 91 29 23 	lds	r20, 0x2329	; 0x802329 <s_twi1_baro_d2.7942>
    6168:	50 91 2a 23 	lds	r21, 0x232A	; 0x80232a <s_twi1_baro_d2.7942+0x1>
    616c:	60 91 2b 23 	lds	r22, 0x232B	; 0x80232b <s_twi1_baro_d2.7942+0x2>
    6170:	70 91 2c 23 	lds	r23, 0x232C	; 0x80232c <s_twi1_baro_d2.7942+0x3>
    6174:	40 93 0e 27 	sts	0x270E, r20	; 0x80270e <g_twi1_baro_d2>
    6178:	50 93 0f 27 	sts	0x270F, r21	; 0x80270f <g_twi1_baro_d2+0x1>
    617c:	60 93 10 27 	sts	0x2710, r22	; 0x802710 <g_twi1_baro_d2+0x2>
    6180:	70 93 11 27 	sts	0x2711, r23	; 0x802711 <g_twi1_baro_d2+0x3>
    6184:	8f bf       	out	0x3f, r24	; 63
    6186:	8b e7       	ldi	r24, 0x7B	; 123
    6188:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7940>
    618c:	10 92 81 26 	sts	0x2681, r1	; 0x802681 <g_twi1_lock>
    6190:	81 e0       	ldi	r24, 0x01	; 1
    6192:	19 c0       	rjmp	.+50     	; 0x61c6 <service_twi1_baro+0x1c0>
    6194:	8f ed       	ldi	r24, 0xDF	; 223
    6196:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7940>
    619a:	80 e0       	ldi	r24, 0x00	; 0
    619c:	14 c0       	rjmp	.+40     	; 0x61c6 <service_twi1_baro+0x1c0>
    619e:	84 36       	cpi	r24, 0x64	; 100
    61a0:	28 f4       	brcc	.+10     	; 0x61ac <service_twi1_baro+0x1a6>
    61a2:	8f 5f       	subi	r24, 0xFF	; 255
    61a4:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7940>
    61a8:	80 e0       	ldi	r24, 0x00	; 0
    61aa:	0d c0       	rjmp	.+26     	; 0x61c6 <service_twi1_baro+0x1c0>
    61ac:	10 92 81 26 	sts	0x2681, r1	; 0x802681 <g_twi1_lock>
    61b0:	80 e0       	ldi	r24, 0x00	; 0
    61b2:	09 c0       	rjmp	.+18     	; 0x61c6 <service_twi1_baro+0x1c0>
    61b4:	85 31       	cpi	r24, 0x15	; 21
    61b6:	09 f4       	brne	.+2      	; 0x61ba <service_twi1_baro+0x1b4>
    61b8:	5f cf       	rjmp	.-322    	; 0x6078 <service_twi1_baro+0x72>
    61ba:	8b 32       	cpi	r24, 0x2B	; 43
    61bc:	09 f4       	brne	.+2      	; 0x61c0 <service_twi1_baro+0x1ba>
    61be:	99 cf       	rjmp	.-206    	; 0x60f2 <service_twi1_baro+0xec>
    61c0:	81 11       	cpse	r24, r1
    61c2:	ef cf       	rjmp	.-34     	; 0x61a2 <service_twi1_baro+0x19c>
    61c4:	3b cf       	rjmp	.-394    	; 0x603c <service_twi1_baro+0x36>
    61c6:	0f 90       	pop	r0
    61c8:	df 91       	pop	r29
    61ca:	cf 91       	pop	r28
    61cc:	08 95       	ret

000061ce <twi2_waitUntilReady>:
    61ce:	cf 92       	push	r12
    61d0:	df 92       	push	r13
    61d2:	ef 92       	push	r14
    61d4:	ff 92       	push	r15
    61d6:	0f 93       	push	r16
    61d8:	1f 93       	push	r17
    61da:	cf 93       	push	r28
    61dc:	e7 e1       	ldi	r30, 0x17	; 23
    61de:	f0 e2       	ldi	r31, 0x20	; 32
    61e0:	83 e0       	ldi	r24, 0x03	; 3
    61e2:	81 83       	std	Z+1, r24	; 0x01
    61e4:	81 e0       	ldi	r24, 0x01	; 1
    61e6:	90 e0       	ldi	r25, 0x00	; 0
    61e8:	84 83       	std	Z+4, r24	; 0x04
    61ea:	95 83       	std	Z+5, r25	; 0x05
    61ec:	8f 01       	movw	r16, r30
    61ee:	cc 24       	eor	r12, r12
    61f0:	c3 94       	inc	r12
    61f2:	d1 2c       	mov	r13, r1
    61f4:	0f 2e       	mov	r0, r31
    61f6:	ff e2       	ldi	r31, 0x2F	; 47
    61f8:	ef 2e       	mov	r14, r31
    61fa:	f5 e2       	ldi	r31, 0x25	; 37
    61fc:	ff 2e       	mov	r15, r31
    61fe:	f0 2d       	mov	r31, r0
    6200:	f8 01       	movw	r30, r16
    6202:	c0 86       	std	Z+8, r12	; 0x08
    6204:	d1 86       	std	Z+9, r13	; 0x09
    6206:	41 e0       	ldi	r20, 0x01	; 1
    6208:	b8 01       	movw	r22, r16
    620a:	80 e8       	ldi	r24, 0x80	; 128
    620c:	94 e0       	ldi	r25, 0x04	; 4
    620e:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6212:	f7 01       	movw	r30, r14
    6214:	c0 81       	ld	r28, Z
    6216:	9c 2f       	mov	r25, r28
    6218:	90 78       	andi	r25, 0x80	; 128
    621a:	81 11       	cpse	r24, r1
    621c:	0d c0       	rjmp	.+26     	; 0x6238 <twi2_waitUntilReady+0x6a>
    621e:	91 f0       	breq	.+36     	; 0x6244 <twi2_waitUntilReady+0x76>
    6220:	8c 2f       	mov	r24, r28
    6222:	81 78       	andi	r24, 0x81	; 129
    6224:	81 38       	cpi	r24, 0x81	; 129
    6226:	29 f4       	brne	.+10     	; 0x6232 <twi2_waitUntilReady+0x64>
    6228:	65 ef       	ldi	r22, 0xF5	; 245
    622a:	71 e0       	ldi	r23, 0x01	; 1
    622c:	80 e0       	ldi	r24, 0x00	; 0
    622e:	90 e0       	ldi	r25, 0x00	; 0
    6230:	68 d9       	rcall	.-3376   	; 0x5502 <__portable_avr_delay_cycles>
    6232:	c0 fd       	sbrc	r28, 0
    6234:	e5 cf       	rjmp	.-54     	; 0x6200 <twi2_waitUntilReady+0x32>
    6236:	0c c0       	rjmp	.+24     	; 0x6250 <twi2_waitUntilReady+0x82>
    6238:	65 e0       	ldi	r22, 0x05	; 5
    623a:	70 e0       	ldi	r23, 0x00	; 0
    623c:	80 e0       	ldi	r24, 0x00	; 0
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	60 d9       	rcall	.-3392   	; 0x5502 <__portable_avr_delay_cycles>
    6242:	de cf       	rjmp	.-68     	; 0x6200 <twi2_waitUntilReady+0x32>
    6244:	65 e0       	ldi	r22, 0x05	; 5
    6246:	70 e0       	ldi	r23, 0x00	; 0
    6248:	80 e0       	ldi	r24, 0x00	; 0
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	5a d9       	rcall	.-3404   	; 0x5502 <__portable_avr_delay_cycles>
    624e:	d8 cf       	rjmp	.-80     	; 0x6200 <twi2_waitUntilReady+0x32>
    6250:	cf 91       	pop	r28
    6252:	1f 91       	pop	r17
    6254:	0f 91       	pop	r16
    6256:	ff 90       	pop	r15
    6258:	ef 90       	pop	r14
    625a:	df 90       	pop	r13
    625c:	cf 90       	pop	r12
    625e:	08 95       	ret

00006260 <twi2_set_leds>:
    6260:	cf 93       	push	r28
    6262:	c8 2f       	mov	r28, r24
    6264:	b4 df       	rcall	.-152    	; 0x61ce <twi2_waitUntilReady>
    6266:	e7 e1       	ldi	r30, 0x17	; 23
    6268:	f0 e2       	ldi	r31, 0x20	; 32
    626a:	80 e7       	ldi	r24, 0x70	; 112
    626c:	81 83       	std	Z+1, r24	; 0x01
    626e:	c3 70       	andi	r28, 0x03	; 3
    6270:	c0 93 2f 25 	sts	0x252F, r28	; 0x80252f <twi2_m_data>
    6274:	81 e0       	ldi	r24, 0x01	; 1
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	80 87       	std	Z+8, r24	; 0x08
    627a:	91 87       	std	Z+9, r25	; 0x09
    627c:	40 e0       	ldi	r20, 0x00	; 0
    627e:	bf 01       	movw	r22, r30
    6280:	80 e8       	ldi	r24, 0x80	; 128
    6282:	94 e0       	ldi	r25, 0x04	; 4
    6284:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6288:	65 e0       	ldi	r22, 0x05	; 5
    628a:	70 e0       	ldi	r23, 0x00	; 0
    628c:	80 e0       	ldi	r24, 0x00	; 0
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	38 d9       	rcall	.-3472   	; 0x5502 <__portable_avr_delay_cycles>
    6292:	cf 91       	pop	r28
    6294:	08 95       	ret

00006296 <twi2_set_ledbl>:
    6296:	cf 93       	push	r28
    6298:	df 93       	push	r29
    629a:	d8 2f       	mov	r29, r24
    629c:	c6 2f       	mov	r28, r22
    629e:	97 df       	rcall	.-210    	; 0x61ce <twi2_waitUntilReady>
    62a0:	e7 e1       	ldi	r30, 0x17	; 23
    62a2:	f0 e2       	ldi	r31, 0x20	; 32
    62a4:	84 e7       	ldi	r24, 0x74	; 116
    62a6:	81 83       	std	Z+1, r24	; 0x01
    62a8:	af e2       	ldi	r26, 0x2F	; 47
    62aa:	b5 e2       	ldi	r27, 0x25	; 37
    62ac:	dc 93       	st	X, r29
    62ae:	11 96       	adiw	r26, 0x01	; 1
    62b0:	cc 93       	st	X, r28
    62b2:	82 e0       	ldi	r24, 0x02	; 2
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	80 87       	std	Z+8, r24	; 0x08
    62b8:	91 87       	std	Z+9, r25	; 0x09
    62ba:	40 e0       	ldi	r20, 0x00	; 0
    62bc:	bf 01       	movw	r22, r30
    62be:	80 e8       	ldi	r24, 0x80	; 128
    62c0:	94 e0       	ldi	r25, 0x04	; 4
    62c2:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    62c6:	65 e0       	ldi	r22, 0x05	; 5
    62c8:	70 e0       	ldi	r23, 0x00	; 0
    62ca:	80 e0       	ldi	r24, 0x00	; 0
    62cc:	90 e0       	ldi	r25, 0x00	; 0
    62ce:	19 d9       	rcall	.-3534   	; 0x5502 <__portable_avr_delay_cycles>
    62d0:	df 91       	pop	r29
    62d2:	cf 91       	pop	r28
    62d4:	08 95       	ret

000062d6 <twi2_set_bias>:
    62d6:	cf 93       	push	r28
    62d8:	c8 2f       	mov	r28, r24
    62da:	79 df       	rcall	.-270    	; 0x61ce <twi2_waitUntilReady>
    62dc:	e7 e1       	ldi	r30, 0x17	; 23
    62de:	f0 e2       	ldi	r31, 0x20	; 32
    62e0:	85 e7       	ldi	r24, 0x75	; 117
    62e2:	81 83       	std	Z+1, r24	; 0x01
    62e4:	c0 93 2f 25 	sts	0x252F, r28	; 0x80252f <twi2_m_data>
    62e8:	81 e0       	ldi	r24, 0x01	; 1
    62ea:	90 e0       	ldi	r25, 0x00	; 0
    62ec:	80 87       	std	Z+8, r24	; 0x08
    62ee:	91 87       	std	Z+9, r25	; 0x09
    62f0:	40 e0       	ldi	r20, 0x00	; 0
    62f2:	bf 01       	movw	r22, r30
    62f4:	80 e8       	ldi	r24, 0x80	; 128
    62f6:	94 e0       	ldi	r25, 0x04	; 4
    62f8:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    62fc:	65 e0       	ldi	r22, 0x05	; 5
    62fe:	70 e0       	ldi	r23, 0x00	; 0
    6300:	80 e0       	ldi	r24, 0x00	; 0
    6302:	90 e0       	ldi	r25, 0x00	; 0
    6304:	fe d8       	rcall	.-3588   	; 0x5502 <__portable_avr_delay_cycles>
    6306:	cf 91       	pop	r28
    6308:	08 95       	ret

0000630a <twi2_set_beep>:
    630a:	cf 93       	push	r28
    630c:	df 93       	push	r29
    630e:	c8 2f       	mov	r28, r24
    6310:	d6 2f       	mov	r29, r22
    6312:	5d df       	rcall	.-326    	; 0x61ce <twi2_waitUntilReady>
    6314:	e7 e1       	ldi	r30, 0x17	; 23
    6316:	f0 e2       	ldi	r31, 0x20	; 32
    6318:	81 e7       	ldi	r24, 0x71	; 113
    631a:	81 83       	std	Z+1, r24	; 0x01
    631c:	af e2       	ldi	r26, 0x2F	; 47
    631e:	b5 e2       	ldi	r27, 0x25	; 37
    6320:	dc 93       	st	X, r29
    6322:	11 96       	adiw	r26, 0x01	; 1
    6324:	cc 93       	st	X, r28
    6326:	82 e0       	ldi	r24, 0x02	; 2
    6328:	90 e0       	ldi	r25, 0x00	; 0
    632a:	80 87       	std	Z+8, r24	; 0x08
    632c:	91 87       	std	Z+9, r25	; 0x09
    632e:	40 e0       	ldi	r20, 0x00	; 0
    6330:	bf 01       	movw	r22, r30
    6332:	80 e8       	ldi	r24, 0x80	; 128
    6334:	94 e0       	ldi	r25, 0x04	; 4
    6336:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    633a:	65 e0       	ldi	r22, 0x05	; 5
    633c:	70 e0       	ldi	r23, 0x00	; 0
    633e:	80 e0       	ldi	r24, 0x00	; 0
    6340:	90 e0       	ldi	r25, 0x00	; 0
    6342:	df d8       	rcall	.-3650   	; 0x5502 <__portable_avr_delay_cycles>
    6344:	df 91       	pop	r29
    6346:	cf 91       	pop	r28
    6348:	08 95       	ret

0000634a <twi_init>:
    634a:	e0 e8       	ldi	r30, 0x80	; 128
    634c:	f6 e0       	ldi	r31, 0x06	; 6
    634e:	88 e3       	ldi	r24, 0x38	; 56
    6350:	80 8b       	std	Z+16, r24	; 0x10
    6352:	81 8b       	std	Z+17, r24	; 0x11
    6354:	e0 e4       	ldi	r30, 0x40	; 64
    6356:	f6 e0       	ldi	r31, 0x06	; 6
    6358:	80 8b       	std	Z+16, r24	; 0x10
    635a:	81 8b       	std	Z+17, r24	; 0x11
    635c:	08 95       	ret

0000635e <isr_100ms_twi1_onboard>:
    635e:	cf 92       	push	r12
    6360:	ef 92       	push	r14
    6362:	0f 93       	push	r16
    6364:	78 94       	sei
    6366:	80 91 64 27 	lds	r24, 0x2764	; 0x802764 <g_twi1_gyro_valid>
    636a:	88 23       	and	r24, r24
    636c:	09 f4       	brne	.+2      	; 0x6370 <isr_100ms_twi1_onboard+0x12>
    636e:	09 c1       	rjmp	.+530    	; 0x6582 <isr_100ms_twi1_onboard+0x224>
    6370:	80 91 81 26 	lds	r24, 0x2681	; 0x802681 <g_twi1_lock>
    6374:	81 11       	cpse	r24, r1
    6376:	05 c1       	rjmp	.+522    	; 0x6582 <isr_100ms_twi1_onboard+0x224>
    6378:	eb e2       	ldi	r30, 0x2B	; 43
    637a:	f0 e2       	ldi	r31, 0x20	; 32
    637c:	88 e6       	ldi	r24, 0x68	; 104
    637e:	80 83       	st	Z, r24
    6380:	8b e3       	ldi	r24, 0x3B	; 59
    6382:	81 83       	std	Z+1, r24	; 0x01
    6384:	81 e0       	ldi	r24, 0x01	; 1
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	84 83       	std	Z+4, r24	; 0x04
    638a:	95 83       	std	Z+5, r25	; 0x05
    638c:	88 e0       	ldi	r24, 0x08	; 8
    638e:	90 e0       	ldi	r25, 0x00	; 0
    6390:	80 87       	std	Z+8, r24	; 0x08
    6392:	91 87       	std	Z+9, r25	; 0x09
    6394:	41 e0       	ldi	r20, 0x01	; 1
    6396:	bf 01       	movw	r22, r30
    6398:	80 ea       	ldi	r24, 0xA0	; 160
    639a:	94 e0       	ldi	r25, 0x04	; 4
    639c:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    63a0:	81 11       	cpse	r24, r1
    63a2:	ef c0       	rjmp	.+478    	; 0x6582 <isr_100ms_twi1_onboard+0x224>
    63a4:	e7 e3       	ldi	r30, 0x37	; 55
    63a6:	f5 e2       	ldi	r31, 0x25	; 37
    63a8:	80 81       	ld	r24, Z
    63aa:	90 e0       	ldi	r25, 0x00	; 0
    63ac:	98 2f       	mov	r25, r24
    63ae:	88 27       	eor	r24, r24
    63b0:	21 81       	ldd	r18, Z+1	; 0x01
    63b2:	82 2b       	or	r24, r18
    63b4:	80 93 5b 27 	sts	0x275B, r24	; 0x80275b <g_twi1_gyro_1_accel_x>
    63b8:	90 93 5c 27 	sts	0x275C, r25	; 0x80275c <g_twi1_gyro_1_accel_x+0x1>
    63bc:	82 81       	ldd	r24, Z+2	; 0x02
    63be:	90 e0       	ldi	r25, 0x00	; 0
    63c0:	98 2f       	mov	r25, r24
    63c2:	88 27       	eor	r24, r24
    63c4:	23 81       	ldd	r18, Z+3	; 0x03
    63c6:	82 2b       	or	r24, r18
    63c8:	80 93 59 27 	sts	0x2759, r24	; 0x802759 <g_twi1_gyro_1_accel_y>
    63cc:	90 93 5a 27 	sts	0x275A, r25	; 0x80275a <g_twi1_gyro_1_accel_y+0x1>
    63d0:	84 81       	ldd	r24, Z+4	; 0x04
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	98 2f       	mov	r25, r24
    63d6:	88 27       	eor	r24, r24
    63d8:	25 81       	ldd	r18, Z+5	; 0x05
    63da:	82 2b       	or	r24, r18
    63dc:	80 93 57 27 	sts	0x2757, r24	; 0x802757 <g_twi1_gyro_1_accel_z>
    63e0:	90 93 58 27 	sts	0x2758, r25	; 0x802758 <g_twi1_gyro_1_accel_z+0x1>
    63e4:	86 81       	ldd	r24, Z+6	; 0x06
    63e6:	90 e0       	ldi	r25, 0x00	; 0
    63e8:	98 2f       	mov	r25, r24
    63ea:	88 27       	eor	r24, r24
    63ec:	27 81       	ldd	r18, Z+7	; 0x07
    63ee:	82 2b       	or	r24, r18
    63f0:	80 93 61 27 	sts	0x2761, r24	; 0x802761 <g_twi1_gyro_1_temp>
    63f4:	90 93 62 27 	sts	0x2762, r25	; 0x802762 <g_twi1_gyro_1_temp+0x1>
    63f8:	eb e2       	ldi	r30, 0x2B	; 43
    63fa:	f0 e2       	ldi	r31, 0x20	; 32
    63fc:	88 e6       	ldi	r24, 0x68	; 104
    63fe:	80 83       	st	Z, r24
    6400:	83 e4       	ldi	r24, 0x43	; 67
    6402:	81 83       	std	Z+1, r24	; 0x01
    6404:	81 e0       	ldi	r24, 0x01	; 1
    6406:	90 e0       	ldi	r25, 0x00	; 0
    6408:	84 83       	std	Z+4, r24	; 0x04
    640a:	95 83       	std	Z+5, r25	; 0x05
    640c:	86 e0       	ldi	r24, 0x06	; 6
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	80 87       	std	Z+8, r24	; 0x08
    6412:	91 87       	std	Z+9, r25	; 0x09
    6414:	41 e0       	ldi	r20, 0x01	; 1
    6416:	bf 01       	movw	r22, r30
    6418:	80 ea       	ldi	r24, 0xA0	; 160
    641a:	94 e0       	ldi	r25, 0x04	; 4
    641c:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6420:	81 11       	cpse	r24, r1
    6422:	af c0       	rjmp	.+350    	; 0x6582 <isr_100ms_twi1_onboard+0x224>
    6424:	e7 e3       	ldi	r30, 0x37	; 55
    6426:	f5 e2       	ldi	r31, 0x25	; 37
    6428:	80 81       	ld	r24, Z
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	98 2f       	mov	r25, r24
    642e:	88 27       	eor	r24, r24
    6430:	21 81       	ldd	r18, Z+1	; 0x01
    6432:	82 2b       	or	r24, r18
    6434:	80 93 4f 27 	sts	0x274F, r24	; 0x80274f <g_twi1_gyro_1_gyro_x>
    6438:	90 93 50 27 	sts	0x2750, r25	; 0x802750 <g_twi1_gyro_1_gyro_x+0x1>
    643c:	82 81       	ldd	r24, Z+2	; 0x02
    643e:	90 e0       	ldi	r25, 0x00	; 0
    6440:	98 2f       	mov	r25, r24
    6442:	88 27       	eor	r24, r24
    6444:	23 81       	ldd	r18, Z+3	; 0x03
    6446:	82 2b       	or	r24, r18
    6448:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <g_twi1_gyro_1_gyro_y>
    644c:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <g_twi1_gyro_1_gyro_y+0x1>
    6450:	84 81       	ldd	r24, Z+4	; 0x04
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	98 2f       	mov	r25, r24
    6456:	88 27       	eor	r24, r24
    6458:	25 81       	ldd	r18, Z+5	; 0x05
    645a:	82 2b       	or	r24, r18
    645c:	80 93 4b 27 	sts	0x274B, r24	; 0x80274b <g_twi1_gyro_1_gyro_z>
    6460:	90 93 4c 27 	sts	0x274C, r25	; 0x80274c <g_twi1_gyro_1_gyro_z+0x1>
    6464:	eb e2       	ldi	r30, 0x2B	; 43
    6466:	f0 e2       	ldi	r31, 0x20	; 32
    6468:	8c e0       	ldi	r24, 0x0C	; 12
    646a:	80 83       	st	Z, r24
    646c:	82 e0       	ldi	r24, 0x02	; 2
    646e:	81 83       	std	Z+1, r24	; 0x01
    6470:	81 e0       	ldi	r24, 0x01	; 1
    6472:	90 e0       	ldi	r25, 0x00	; 0
    6474:	84 83       	std	Z+4, r24	; 0x04
    6476:	95 83       	std	Z+5, r25	; 0x05
    6478:	80 87       	std	Z+8, r24	; 0x08
    647a:	91 87       	std	Z+9, r25	; 0x09
    647c:	41 e0       	ldi	r20, 0x01	; 1
    647e:	bf 01       	movw	r22, r30
    6480:	80 ea       	ldi	r24, 0xA0	; 160
    6482:	94 e0       	ldi	r25, 0x04	; 4
    6484:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6488:	81 11       	cpse	r24, r1
    648a:	7b c0       	rjmp	.+246    	; 0x6582 <isr_100ms_twi1_onboard+0x224>
    648c:	80 91 37 25 	lds	r24, 0x2537	; 0x802537 <twi1_m_data>
    6490:	80 ff       	sbrs	r24, 0
    6492:	77 c0       	rjmp	.+238    	; 0x6582 <isr_100ms_twi1_onboard+0x224>
    6494:	eb e2       	ldi	r30, 0x2B	; 43
    6496:	f0 e2       	ldi	r31, 0x20	; 32
    6498:	8c e0       	ldi	r24, 0x0C	; 12
    649a:	80 83       	st	Z, r24
    649c:	83 e0       	ldi	r24, 0x03	; 3
    649e:	81 83       	std	Z+1, r24	; 0x01
    64a0:	81 e0       	ldi	r24, 0x01	; 1
    64a2:	90 e0       	ldi	r25, 0x00	; 0
    64a4:	84 83       	std	Z+4, r24	; 0x04
    64a6:	95 83       	std	Z+5, r25	; 0x05
    64a8:	86 e0       	ldi	r24, 0x06	; 6
    64aa:	90 e0       	ldi	r25, 0x00	; 0
    64ac:	80 87       	std	Z+8, r24	; 0x08
    64ae:	91 87       	std	Z+9, r25	; 0x09
    64b0:	41 e0       	ldi	r20, 0x01	; 1
    64b2:	bf 01       	movw	r22, r30
    64b4:	80 ea       	ldi	r24, 0xA0	; 160
    64b6:	94 e0       	ldi	r25, 0x04	; 4
    64b8:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    64bc:	81 11       	cpse	r24, r1
    64be:	61 c0       	rjmp	.+194    	; 0x6582 <isr_100ms_twi1_onboard+0x224>
    64c0:	e7 e3       	ldi	r30, 0x37	; 55
    64c2:	f5 e2       	ldi	r31, 0x25	; 37
    64c4:	81 81       	ldd	r24, Z+1	; 0x01
    64c6:	90 e0       	ldi	r25, 0x00	; 0
    64c8:	98 2f       	mov	r25, r24
    64ca:	88 27       	eor	r24, r24
    64cc:	20 81       	ld	r18, Z
    64ce:	82 2b       	or	r24, r18
    64d0:	20 91 49 20 	lds	r18, 0x2049	; 0x802049 <g_twi1_gyro_2_ofsx>
    64d4:	30 91 4a 20 	lds	r19, 0x204A	; 0x80204a <g_twi1_gyro_2_ofsx+0x1>
    64d8:	82 0f       	add	r24, r18
    64da:	93 1f       	adc	r25, r19
    64dc:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <g_twi1_gyro_2_mag_x>
    64e0:	90 93 3a 27 	sts	0x273A, r25	; 0x80273a <g_twi1_gyro_2_mag_x+0x1>
    64e4:	83 81       	ldd	r24, Z+3	; 0x03
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	98 2f       	mov	r25, r24
    64ea:	88 27       	eor	r24, r24
    64ec:	22 81       	ldd	r18, Z+2	; 0x02
    64ee:	82 2b       	or	r24, r18
    64f0:	20 91 47 20 	lds	r18, 0x2047	; 0x802047 <g_twi1_gyro_2_ofsy>
    64f4:	30 91 48 20 	lds	r19, 0x2048	; 0x802048 <g_twi1_gyro_2_ofsy+0x1>
    64f8:	82 0f       	add	r24, r18
    64fa:	93 1f       	adc	r25, r19
    64fc:	80 93 37 27 	sts	0x2737, r24	; 0x802737 <g_twi1_gyro_2_mag_y>
    6500:	90 93 38 27 	sts	0x2738, r25	; 0x802738 <g_twi1_gyro_2_mag_y+0x1>
    6504:	85 81       	ldd	r24, Z+5	; 0x05
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	98 2f       	mov	r25, r24
    650a:	88 27       	eor	r24, r24
    650c:	24 81       	ldd	r18, Z+4	; 0x04
    650e:	82 2b       	or	r24, r18
    6510:	20 91 45 20 	lds	r18, 0x2045	; 0x802045 <g_twi1_gyro_2_ofsz>
    6514:	30 91 46 20 	lds	r19, 0x2046	; 0x802046 <g_twi1_gyro_2_ofsz+0x1>
    6518:	82 0f       	add	r24, r18
    651a:	93 1f       	adc	r25, r19
    651c:	80 93 35 27 	sts	0x2735, r24	; 0x802735 <g_twi1_gyro_2_mag_z>
    6520:	90 93 36 27 	sts	0x2736, r25	; 0x802736 <g_twi1_gyro_2_mag_z+0x1>
    6524:	eb e2       	ldi	r30, 0x2B	; 43
    6526:	f0 e2       	ldi	r31, 0x20	; 32
    6528:	8c e0       	ldi	r24, 0x0C	; 12
    652a:	80 83       	st	Z, r24
    652c:	89 e0       	ldi	r24, 0x09	; 9
    652e:	81 83       	std	Z+1, r24	; 0x01
    6530:	81 e0       	ldi	r24, 0x01	; 1
    6532:	90 e0       	ldi	r25, 0x00	; 0
    6534:	84 83       	std	Z+4, r24	; 0x04
    6536:	95 83       	std	Z+5, r25	; 0x05
    6538:	80 87       	std	Z+8, r24	; 0x08
    653a:	91 87       	std	Z+9, r25	; 0x09
    653c:	41 e0       	ldi	r20, 0x01	; 1
    653e:	bf 01       	movw	r22, r30
    6540:	80 ea       	ldi	r24, 0xA0	; 160
    6542:	94 e0       	ldi	r25, 0x04	; 4
    6544:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6548:	81 11       	cpse	r24, r1
    654a:	1b c0       	rjmp	.+54     	; 0x6582 <isr_100ms_twi1_onboard+0x224>
    654c:	80 91 37 25 	lds	r24, 0x2537	; 0x802537 <twi1_m_data>
    6550:	83 ff       	sbrs	r24, 3
    6552:	0c c0       	rjmp	.+24     	; 0x656c <isr_100ms_twi1_onboard+0x20e>
    6554:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <g_twi1_gyro_2_mag_x>
    6558:	10 92 3a 27 	sts	0x273A, r1	; 0x80273a <g_twi1_gyro_2_mag_x+0x1>
    655c:	10 92 37 27 	sts	0x2737, r1	; 0x802737 <g_twi1_gyro_2_mag_y>
    6560:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <g_twi1_gyro_2_mag_y+0x1>
    6564:	10 92 35 27 	sts	0x2735, r1	; 0x802735 <g_twi1_gyro_2_mag_z>
    6568:	10 92 36 27 	sts	0x2736, r1	; 0x802736 <g_twi1_gyro_2_mag_z+0x1>
    656c:	c1 2c       	mov	r12, r1
    656e:	e1 2c       	mov	r14, r1
    6570:	01 e0       	ldi	r16, 0x01	; 1
    6572:	20 e0       	ldi	r18, 0x00	; 0
    6574:	30 e0       	ldi	r19, 0x00	; 0
    6576:	a9 01       	movw	r20, r18
    6578:	60 e0       	ldi	r22, 0x00	; 0
    657a:	89 ed       	ldi	r24, 0xD9	; 217
    657c:	9a e2       	ldi	r25, 0x2A	; 42
    657e:	0e 94 36 63 	call	0xc66c	; 0xc66c <sched_push>
    6582:	0f 91       	pop	r16
    6584:	ef 90       	pop	r14
    6586:	cf 90       	pop	r12
    6588:	08 95       	ret

0000658a <isr_500ms_twi1_onboard>:
    658a:	8f 92       	push	r8
    658c:	9f 92       	push	r9
    658e:	af 92       	push	r10
    6590:	bf 92       	push	r11
    6592:	cf 92       	push	r12
    6594:	ef 92       	push	r14
    6596:	0f 93       	push	r16
    6598:	4b 01       	movw	r8, r22
    659a:	5c 01       	movw	r10, r24
    659c:	78 94       	sei
    659e:	80 91 05 27 	lds	r24, 0x2705	; 0x802705 <g_twi1_hygro_valid>
    65a2:	88 23       	and	r24, r24
    65a4:	09 f4       	brne	.+2      	; 0x65a8 <isr_500ms_twi1_onboard+0x1e>
    65a6:	52 c0       	rjmp	.+164    	; 0x664c <isr_500ms_twi1_onboard+0xc2>
    65a8:	80 91 81 26 	lds	r24, 0x2681	; 0x802681 <g_twi1_lock>
    65ac:	81 11       	cpse	r24, r1
    65ae:	4e c0       	rjmp	.+156    	; 0x664c <isr_500ms_twi1_onboard+0xc2>
    65b0:	eb e2       	ldi	r30, 0x2B	; 43
    65b2:	f0 e2       	ldi	r31, 0x20	; 32
    65b4:	84 e4       	ldi	r24, 0x44	; 68
    65b6:	80 83       	st	Z, r24
    65b8:	80 ee       	ldi	r24, 0xE0	; 224
    65ba:	81 83       	std	Z+1, r24	; 0x01
    65bc:	12 82       	std	Z+2, r1	; 0x02
    65be:	82 e0       	ldi	r24, 0x02	; 2
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	84 83       	std	Z+4, r24	; 0x04
    65c4:	95 83       	std	Z+5, r25	; 0x05
    65c6:	85 e0       	ldi	r24, 0x05	; 5
    65c8:	90 e0       	ldi	r25, 0x00	; 0
    65ca:	80 87       	std	Z+8, r24	; 0x08
    65cc:	91 87       	std	Z+9, r25	; 0x09
    65ce:	41 e0       	ldi	r20, 0x01	; 1
    65d0:	bf 01       	movw	r22, r30
    65d2:	80 ea       	ldi	r24, 0xA0	; 160
    65d4:	94 e0       	ldi	r25, 0x04	; 4
    65d6:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    65da:	81 11       	cpse	r24, r1
    65dc:	16 c0       	rjmp	.+44     	; 0x660a <isr_500ms_twi1_onboard+0x80>
    65de:	e7 e3       	ldi	r30, 0x37	; 55
    65e0:	f5 e2       	ldi	r31, 0x25	; 37
    65e2:	80 81       	ld	r24, Z
    65e4:	90 e0       	ldi	r25, 0x00	; 0
    65e6:	98 2f       	mov	r25, r24
    65e8:	88 27       	eor	r24, r24
    65ea:	21 81       	ldd	r18, Z+1	; 0x01
    65ec:	82 2b       	or	r24, r18
    65ee:	80 93 02 27 	sts	0x2702, r24	; 0x802702 <g_twi1_hygro_S_T>
    65f2:	90 93 03 27 	sts	0x2703, r25	; 0x802703 <g_twi1_hygro_S_T+0x1>
    65f6:	83 81       	ldd	r24, Z+3	; 0x03
    65f8:	90 e0       	ldi	r25, 0x00	; 0
    65fa:	98 2f       	mov	r25, r24
    65fc:	88 27       	eor	r24, r24
    65fe:	24 81       	ldd	r18, Z+4	; 0x04
    6600:	82 2b       	or	r24, r18
    6602:	80 93 00 27 	sts	0x2700, r24	; 0x802700 <g_twi1_hygro_S_RH>
    6606:	90 93 01 27 	sts	0x2701, r25	; 0x802701 <g_twi1_hygro_S_RH+0x1>
    660a:	eb e2       	ldi	r30, 0x2B	; 43
    660c:	f0 e2       	ldi	r31, 0x20	; 32
    660e:	84 e4       	ldi	r24, 0x44	; 68
    6610:	80 83       	st	Z, r24
    6612:	84 e2       	ldi	r24, 0x24	; 36
    6614:	81 83       	std	Z+1, r24	; 0x01
    6616:	12 82       	std	Z+2, r1	; 0x02
    6618:	82 e0       	ldi	r24, 0x02	; 2
    661a:	90 e0       	ldi	r25, 0x00	; 0
    661c:	84 83       	std	Z+4, r24	; 0x04
    661e:	95 83       	std	Z+5, r25	; 0x05
    6620:	10 86       	std	Z+8, r1	; 0x08
    6622:	11 86       	std	Z+9, r1	; 0x09
    6624:	40 e0       	ldi	r20, 0x00	; 0
    6626:	bf 01       	movw	r22, r30
    6628:	80 ea       	ldi	r24, 0xA0	; 160
    662a:	94 e0       	ldi	r25, 0x04	; 4
    662c:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6630:	81 11       	cpse	r24, r1
    6632:	0c c0       	rjmp	.+24     	; 0x664c <isr_500ms_twi1_onboard+0xc2>
    6634:	c1 2c       	mov	r12, r1
    6636:	e1 2c       	mov	r14, r1
    6638:	01 e0       	ldi	r16, 0x01	; 1
    663a:	26 e4       	ldi	r18, 0x46	; 70
    663c:	30 e0       	ldi	r19, 0x00	; 0
    663e:	40 e0       	ldi	r20, 0x00	; 0
    6640:	50 e0       	ldi	r21, 0x00	; 0
    6642:	60 e0       	ldi	r22, 0x00	; 0
    6644:	8c e8       	ldi	r24, 0x8C	; 140
    6646:	9a e2       	ldi	r25, 0x2A	; 42
    6648:	0e 94 36 63 	call	0xc66c	; 0xc66c <sched_push>
    664c:	80 91 28 27 	lds	r24, 0x2728	; 0x802728 <g_twi1_baro_valid>
    6650:	88 23       	and	r24, r24
    6652:	21 f0       	breq	.+8      	; 0x665c <isr_500ms_twi1_onboard+0xd2>
    6654:	41 e0       	ldi	r20, 0x01	; 1
    6656:	c5 01       	movw	r24, r10
    6658:	b4 01       	movw	r22, r8
    665a:	d5 dc       	rcall	.-1622   	; 0x6006 <service_twi1_baro>
    665c:	0f 91       	pop	r16
    665e:	ef 90       	pop	r14
    6660:	cf 90       	pop	r12
    6662:	bf 90       	pop	r11
    6664:	af 90       	pop	r10
    6666:	9f 90       	pop	r9
    6668:	8f 90       	pop	r8
    666a:	08 95       	ret

0000666c <isr_sparetime_twi1_onboard>:
    666c:	cf 92       	push	r12
    666e:	ef 92       	push	r14
    6670:	0f 93       	push	r16
    6672:	78 94       	sei
    6674:	20 91 28 27 	lds	r18, 0x2728	; 0x802728 <g_twi1_baro_valid>
    6678:	22 23       	and	r18, r18
    667a:	81 f0       	breq	.+32     	; 0x669c <isr_sparetime_twi1_onboard+0x30>
    667c:	40 e0       	ldi	r20, 0x00	; 0
    667e:	c3 dc       	rcall	.-1658   	; 0x6006 <service_twi1_baro>
    6680:	88 23       	and	r24, r24
    6682:	61 f0       	breq	.+24     	; 0x669c <isr_sparetime_twi1_onboard+0x30>
    6684:	c1 2c       	mov	r12, r1
    6686:	e1 2c       	mov	r14, r1
    6688:	01 e0       	ldi	r16, 0x01	; 1
    668a:	26 e4       	ldi	r18, 0x46	; 70
    668c:	30 e0       	ldi	r19, 0x00	; 0
    668e:	40 e0       	ldi	r20, 0x00	; 0
    6690:	50 e0       	ldi	r21, 0x00	; 0
    6692:	60 e0       	ldi	r22, 0x00	; 0
    6694:	81 eb       	ldi	r24, 0xB1	; 177
    6696:	9d e2       	ldi	r25, 0x2D	; 45
    6698:	0e 94 36 63 	call	0xc66c	; 0xc66c <sched_push>
    669c:	0f 91       	pop	r16
    669e:	ef 90       	pop	r14
    66a0:	cf 90       	pop	r12
    66a2:	08 95       	ret

000066a4 <task_twi2_lcd_cls>:
    66a4:	94 dd       	rcall	.-1240   	; 0x61ce <twi2_waitUntilReady>
    66a6:	e7 e1       	ldi	r30, 0x17	; 23
    66a8:	f0 e2       	ldi	r31, 0x20	; 32
    66aa:	81 e1       	ldi	r24, 0x11	; 17
    66ac:	81 83       	std	Z+1, r24	; 0x01
    66ae:	10 86       	std	Z+8, r1	; 0x08
    66b0:	11 86       	std	Z+9, r1	; 0x09
    66b2:	40 e0       	ldi	r20, 0x00	; 0
    66b4:	bf 01       	movw	r22, r30
    66b6:	80 e8       	ldi	r24, 0x80	; 128
    66b8:	94 e0       	ldi	r25, 0x04	; 4
    66ba:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    66be:	65 e0       	ldi	r22, 0x05	; 5
    66c0:	70 e0       	ldi	r23, 0x00	; 0
    66c2:	80 e0       	ldi	r24, 0x00	; 0
    66c4:	90 e0       	ldi	r25, 0x00	; 0
    66c6:	0c 94 81 2a 	jmp	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    66ca:	08 95       	ret

000066cc <task_twi2_lcd_pos_xy>:
    66cc:	cf 93       	push	r28
    66ce:	df 93       	push	r29
    66d0:	d8 2f       	mov	r29, r24
    66d2:	c6 2f       	mov	r28, r22
    66d4:	7c dd       	rcall	.-1288   	; 0x61ce <twi2_waitUntilReady>
    66d6:	e7 e1       	ldi	r30, 0x17	; 23
    66d8:	f0 e2       	ldi	r31, 0x20	; 32
    66da:	80 e2       	ldi	r24, 0x20	; 32
    66dc:	81 83       	std	Z+1, r24	; 0x01
    66de:	af e2       	ldi	r26, 0x2F	; 47
    66e0:	b5 e2       	ldi	r27, 0x25	; 37
    66e2:	dc 93       	st	X, r29
    66e4:	11 96       	adiw	r26, 0x01	; 1
    66e6:	cc 93       	st	X, r28
    66e8:	82 e0       	ldi	r24, 0x02	; 2
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	80 87       	std	Z+8, r24	; 0x08
    66ee:	91 87       	std	Z+9, r25	; 0x09
    66f0:	40 e0       	ldi	r20, 0x00	; 0
    66f2:	bf 01       	movw	r22, r30
    66f4:	80 e8       	ldi	r24, 0x80	; 128
    66f6:	94 e0       	ldi	r25, 0x04	; 4
    66f8:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    66fc:	65 e0       	ldi	r22, 0x05	; 5
    66fe:	70 e0       	ldi	r23, 0x00	; 0
    6700:	80 e0       	ldi	r24, 0x00	; 0
    6702:	90 e0       	ldi	r25, 0x00	; 0
    6704:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6708:	df 91       	pop	r29
    670a:	cf 91       	pop	r28
    670c:	08 95       	ret

0000670e <task_twi2_lcd_print_format_float_P>:
    670e:	cf 92       	push	r12
    6710:	df 92       	push	r13
    6712:	ef 92       	push	r14
    6714:	ff 92       	push	r15
    6716:	0f 93       	push	r16
    6718:	1f 93       	push	r17
    671a:	cf 93       	push	r28
    671c:	df 93       	push	r29
    671e:	f2 2e       	mov	r15, r18
    6720:	e3 2e       	mov	r14, r19
    6722:	d4 2e       	mov	r13, r20
    6724:	c5 2e       	mov	r12, r21
    6726:	d2 df       	rcall	.-92     	; 0x66cc <task_twi2_lcd_pos_xy>
    6728:	52 dd       	rcall	.-1372   	; 0x61ce <twi2_waitUntilReady>
    672a:	c7 e1       	ldi	r28, 0x17	; 23
    672c:	d0 e2       	ldi	r29, 0x20	; 32
    672e:	80 e3       	ldi	r24, 0x30	; 48
    6730:	89 83       	std	Y+1, r24	; 0x01
    6732:	cf 92       	push	r12
    6734:	df 92       	push	r13
    6736:	ef 92       	push	r14
    6738:	ff 92       	push	r15
    673a:	1f 93       	push	r17
    673c:	0f 93       	push	r16
    673e:	80 e3       	ldi	r24, 0x30	; 48
    6740:	95 e2       	ldi	r25, 0x25	; 37
    6742:	9f 93       	push	r25
    6744:	8f 93       	push	r24
    6746:	0e 94 f0 7d 	call	0xfbe0	; 0xfbe0 <sprintf_P>
    674a:	80 93 2f 25 	sts	0x252F, r24	; 0x80252f <twi2_m_data>
    674e:	99 27       	eor	r25, r25
    6750:	01 96       	adiw	r24, 0x01	; 1
    6752:	88 87       	std	Y+8, r24	; 0x08
    6754:	99 87       	std	Y+9, r25	; 0x09
    6756:	40 e0       	ldi	r20, 0x00	; 0
    6758:	be 01       	movw	r22, r28
    675a:	80 e8       	ldi	r24, 0x80	; 128
    675c:	94 e0       	ldi	r25, 0x04	; 4
    675e:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6762:	65 e0       	ldi	r22, 0x05	; 5
    6764:	70 e0       	ldi	r23, 0x00	; 0
    6766:	80 e0       	ldi	r24, 0x00	; 0
    6768:	90 e0       	ldi	r25, 0x00	; 0
    676a:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    676e:	8d b7       	in	r24, 0x3d	; 61
    6770:	9e b7       	in	r25, 0x3e	; 62
    6772:	08 96       	adiw	r24, 0x08	; 8
    6774:	8d bf       	out	0x3d, r24	; 61
    6776:	9e bf       	out	0x3e, r25	; 62
    6778:	df 91       	pop	r29
    677a:	cf 91       	pop	r28
    677c:	1f 91       	pop	r17
    677e:	0f 91       	pop	r16
    6780:	ff 90       	pop	r15
    6782:	ef 90       	pop	r14
    6784:	df 90       	pop	r13
    6786:	cf 90       	pop	r12
    6788:	08 95       	ret

0000678a <task_twi2_lcd_str>:
    678a:	9f 92       	push	r9
    678c:	af 92       	push	r10
    678e:	bf 92       	push	r11
    6790:	cf 92       	push	r12
    6792:	df 92       	push	r13
    6794:	ef 92       	push	r14
    6796:	ff 92       	push	r15
    6798:	0f 93       	push	r16
    679a:	1f 93       	push	r17
    679c:	cf 93       	push	r28
    679e:	df 93       	push	r29
    67a0:	b8 2e       	mov	r11, r24
    67a2:	a6 2e       	mov	r10, r22
    67a4:	ea 01       	movw	r28, r20
    67a6:	fa 01       	movw	r30, r20
    67a8:	01 90       	ld	r0, Z+
    67aa:	00 20       	and	r0, r0
    67ac:	e9 f7       	brne	.-6      	; 0x67a8 <task_twi2_lcd_str+0x1e>
    67ae:	31 97       	sbiw	r30, 0x01	; 1
    67b0:	ce 2e       	mov	r12, r30
    67b2:	c4 1a       	sub	r12, r20
    67b4:	09 f4       	brne	.+2      	; 0x67b8 <task_twi2_lcd_str+0x2e>
    67b6:	44 c0       	rjmp	.+136    	; 0x6840 <task_twi2_lcd_str+0xb6>
    67b8:	07 e1       	ldi	r16, 0x17	; 23
    67ba:	10 e2       	ldi	r17, 0x20	; 32
    67bc:	0f 2e       	mov	r0, r31
    67be:	f0 e3       	ldi	r31, 0x30	; 48
    67c0:	9f 2e       	mov	r9, r31
    67c2:	f0 2d       	mov	r31, r0
    67c4:	0f 2e       	mov	r0, r31
    67c6:	ff e2       	ldi	r31, 0x2F	; 47
    67c8:	ef 2e       	mov	r14, r31
    67ca:	f5 e2       	ldi	r31, 0x25	; 37
    67cc:	ff 2e       	mov	r15, r31
    67ce:	f0 2d       	mov	r31, r0
    67d0:	dc 2c       	mov	r13, r12
    67d2:	e6 e0       	ldi	r30, 0x06	; 6
    67d4:	ec 15       	cp	r30, r12
    67d6:	20 f4       	brcc	.+8      	; 0x67e0 <task_twi2_lcd_str+0x56>
    67d8:	0f 2e       	mov	r0, r31
    67da:	f6 e0       	ldi	r31, 0x06	; 6
    67dc:	df 2e       	mov	r13, r31
    67de:	f0 2d       	mov	r31, r0
    67e0:	6a 2d       	mov	r22, r10
    67e2:	8b 2d       	mov	r24, r11
    67e4:	73 df       	rcall	.-282    	; 0x66cc <task_twi2_lcd_pos_xy>
    67e6:	f3 dc       	rcall	.-1562   	; 0x61ce <twi2_waitUntilReady>
    67e8:	f8 01       	movw	r30, r16
    67ea:	91 82       	std	Z+1, r9	; 0x01
    67ec:	f7 01       	movw	r30, r14
    67ee:	d0 82       	st	Z, r13
    67f0:	dd 20       	and	r13, r13
    67f2:	69 f0       	breq	.+26     	; 0x680e <task_twi2_lcd_str+0x84>
    67f4:	81 e0       	ldi	r24, 0x01	; 1
    67f6:	21 96       	adiw	r28, 0x01	; 1
    67f8:	e8 2f       	mov	r30, r24
    67fa:	f0 e0       	ldi	r31, 0x00	; 0
    67fc:	e1 5d       	subi	r30, 0xD1	; 209
    67fe:	fa 4d       	sbci	r31, 0xDA	; 218
    6800:	de 01       	movw	r26, r28
    6802:	11 97       	sbiw	r26, 0x01	; 1
    6804:	9c 91       	ld	r25, X
    6806:	90 83       	st	Z, r25
    6808:	8f 5f       	subi	r24, 0xFF	; 255
    680a:	d8 16       	cp	r13, r24
    680c:	a0 f7       	brcc	.-24     	; 0x67f6 <task_twi2_lcd_str+0x6c>
    680e:	8d 2d       	mov	r24, r13
    6810:	90 e0       	ldi	r25, 0x00	; 0
    6812:	01 96       	adiw	r24, 0x01	; 1
    6814:	f8 01       	movw	r30, r16
    6816:	80 87       	std	Z+8, r24	; 0x08
    6818:	91 87       	std	Z+9, r25	; 0x09
    681a:	40 e0       	ldi	r20, 0x00	; 0
    681c:	b8 01       	movw	r22, r16
    681e:	80 e8       	ldi	r24, 0x80	; 128
    6820:	94 e0       	ldi	r25, 0x04	; 4
    6822:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6826:	65 e0       	ldi	r22, 0x05	; 5
    6828:	70 e0       	ldi	r23, 0x00	; 0
    682a:	80 e0       	ldi	r24, 0x00	; 0
    682c:	90 e0       	ldi	r25, 0x00	; 0
    682e:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6832:	8d 2d       	mov	r24, r13
    6834:	88 0f       	add	r24, r24
    6836:	8d 0d       	add	r24, r13
    6838:	88 0f       	add	r24, r24
    683a:	b8 0e       	add	r11, r24
    683c:	cd 18       	sub	r12, r13
    683e:	41 f6       	brne	.-112    	; 0x67d0 <task_twi2_lcd_str+0x46>
    6840:	df 91       	pop	r29
    6842:	cf 91       	pop	r28
    6844:	1f 91       	pop	r17
    6846:	0f 91       	pop	r16
    6848:	ff 90       	pop	r15
    684a:	ef 90       	pop	r14
    684c:	df 90       	pop	r13
    684e:	cf 90       	pop	r12
    6850:	bf 90       	pop	r11
    6852:	af 90       	pop	r10
    6854:	9f 90       	pop	r9
    6856:	08 95       	ret

00006858 <task_twi2_lcd_line>:
    6858:	0f 93       	push	r16
    685a:	cf 93       	push	r28
    685c:	df 93       	push	r29
    685e:	d4 2f       	mov	r29, r20
    6860:	c2 2f       	mov	r28, r18
    6862:	34 df       	rcall	.-408    	; 0x66cc <task_twi2_lcd_pos_xy>
    6864:	b4 dc       	rcall	.-1688   	; 0x61ce <twi2_waitUntilReady>
    6866:	a7 e1       	ldi	r26, 0x17	; 23
    6868:	b0 e2       	ldi	r27, 0x20	; 32
    686a:	82 e3       	ldi	r24, 0x32	; 50
    686c:	11 96       	adiw	r26, 0x01	; 1
    686e:	8c 93       	st	X, r24
    6870:	11 97       	sbiw	r26, 0x01	; 1
    6872:	ef e2       	ldi	r30, 0x2F	; 47
    6874:	f5 e2       	ldi	r31, 0x25	; 37
    6876:	d0 83       	st	Z, r29
    6878:	c1 83       	std	Z+1, r28	; 0x01
    687a:	02 83       	std	Z+2, r16	; 0x02
    687c:	83 e0       	ldi	r24, 0x03	; 3
    687e:	90 e0       	ldi	r25, 0x00	; 0
    6880:	18 96       	adiw	r26, 0x08	; 8
    6882:	8d 93       	st	X+, r24
    6884:	9c 93       	st	X, r25
    6886:	19 97       	sbiw	r26, 0x09	; 9
    6888:	40 e0       	ldi	r20, 0x00	; 0
    688a:	bd 01       	movw	r22, r26
    688c:	80 e8       	ldi	r24, 0x80	; 128
    688e:	94 e0       	ldi	r25, 0x04	; 4
    6890:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6894:	65 e0       	ldi	r22, 0x05	; 5
    6896:	70 e0       	ldi	r23, 0x00	; 0
    6898:	80 e0       	ldi	r24, 0x00	; 0
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    68a0:	df 91       	pop	r29
    68a2:	cf 91       	pop	r28
    68a4:	0f 91       	pop	r16
    68a6:	08 95       	ret

000068a8 <task_twi2_lcd_rect>:
    68a8:	ef 92       	push	r14
    68aa:	0f 93       	push	r16
    68ac:	cf 93       	push	r28
    68ae:	df 93       	push	r29
    68b0:	d4 2f       	mov	r29, r20
    68b2:	c2 2f       	mov	r28, r18
    68b4:	0b df       	rcall	.-490    	; 0x66cc <task_twi2_lcd_pos_xy>
    68b6:	8b dc       	rcall	.-1770   	; 0x61ce <twi2_waitUntilReady>
    68b8:	01 11       	cpse	r16, r1
    68ba:	02 c0       	rjmp	.+4      	; 0x68c0 <task_twi2_lcd_rect+0x18>
    68bc:	84 e3       	ldi	r24, 0x34	; 52
    68be:	01 c0       	rjmp	.+2      	; 0x68c2 <task_twi2_lcd_rect+0x1a>
    68c0:	86 e3       	ldi	r24, 0x36	; 54
    68c2:	a7 e1       	ldi	r26, 0x17	; 23
    68c4:	b0 e2       	ldi	r27, 0x20	; 32
    68c6:	11 96       	adiw	r26, 0x01	; 1
    68c8:	8c 93       	st	X, r24
    68ca:	11 97       	sbiw	r26, 0x01	; 1
    68cc:	ef e2       	ldi	r30, 0x2F	; 47
    68ce:	f5 e2       	ldi	r31, 0x25	; 37
    68d0:	d0 83       	st	Z, r29
    68d2:	c1 83       	std	Z+1, r28	; 0x01
    68d4:	e2 82       	std	Z+2, r14	; 0x02
    68d6:	83 e0       	ldi	r24, 0x03	; 3
    68d8:	90 e0       	ldi	r25, 0x00	; 0
    68da:	18 96       	adiw	r26, 0x08	; 8
    68dc:	8d 93       	st	X+, r24
    68de:	9c 93       	st	X, r25
    68e0:	19 97       	sbiw	r26, 0x09	; 9
    68e2:	40 e0       	ldi	r20, 0x00	; 0
    68e4:	bd 01       	movw	r22, r26
    68e6:	80 e8       	ldi	r24, 0x80	; 128
    68e8:	94 e0       	ldi	r25, 0x04	; 4
    68ea:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    68ee:	65 e0       	ldi	r22, 0x05	; 5
    68f0:	70 e0       	ldi	r23, 0x00	; 0
    68f2:	80 e0       	ldi	r24, 0x00	; 0
    68f4:	90 e0       	ldi	r25, 0x00	; 0
    68f6:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    68fa:	df 91       	pop	r29
    68fc:	cf 91       	pop	r28
    68fe:	0f 91       	pop	r16
    6900:	ef 90       	pop	r14
    6902:	08 95       	ret

00006904 <task_twi2_lcd_circ>:
    6904:	0f 93       	push	r16
    6906:	cf 93       	push	r28
    6908:	df 93       	push	r29
    690a:	c4 2f       	mov	r28, r20
    690c:	d2 2f       	mov	r29, r18
    690e:	de de       	rcall	.-580    	; 0x66cc <task_twi2_lcd_pos_xy>
    6910:	5e dc       	rcall	.-1860   	; 0x61ce <twi2_waitUntilReady>
    6912:	d1 11       	cpse	r29, r1
    6914:	02 c0       	rjmp	.+4      	; 0x691a <task_twi2_lcd_circ+0x16>
    6916:	88 e3       	ldi	r24, 0x38	; 56
    6918:	01 c0       	rjmp	.+2      	; 0x691c <task_twi2_lcd_circ+0x18>
    691a:	8a e3       	ldi	r24, 0x3A	; 58
    691c:	e7 e1       	ldi	r30, 0x17	; 23
    691e:	f0 e2       	ldi	r31, 0x20	; 32
    6920:	81 83       	std	Z+1, r24	; 0x01
    6922:	af e2       	ldi	r26, 0x2F	; 47
    6924:	b5 e2       	ldi	r27, 0x25	; 37
    6926:	cc 93       	st	X, r28
    6928:	11 96       	adiw	r26, 0x01	; 1
    692a:	0c 93       	st	X, r16
    692c:	82 e0       	ldi	r24, 0x02	; 2
    692e:	90 e0       	ldi	r25, 0x00	; 0
    6930:	80 87       	std	Z+8, r24	; 0x08
    6932:	91 87       	std	Z+9, r25	; 0x09
    6934:	40 e0       	ldi	r20, 0x00	; 0
    6936:	bf 01       	movw	r22, r30
    6938:	80 e8       	ldi	r24, 0x80	; 128
    693a:	94 e0       	ldi	r25, 0x04	; 4
    693c:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6940:	65 e0       	ldi	r22, 0x05	; 5
    6942:	70 e0       	ldi	r23, 0x00	; 0
    6944:	80 e0       	ldi	r24, 0x00	; 0
    6946:	90 e0       	ldi	r25, 0x00	; 0
    6948:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    694c:	df 91       	pop	r29
    694e:	cf 91       	pop	r28
    6950:	0f 91       	pop	r16
    6952:	08 95       	ret

00006954 <task_twi2_lcd_header>:
    6954:	ef 92       	push	r14
    6956:	0f 93       	push	r16
    6958:	a5 de       	rcall	.-694    	; 0x66a4 <task_twi2_lcd_cls>
    695a:	48 e3       	ldi	r20, 0x38	; 56
    695c:	51 e2       	ldi	r21, 0x21	; 33
    695e:	62 e0       	ldi	r22, 0x02	; 2
    6960:	8c e3       	ldi	r24, 0x3C	; 60
    6962:	13 df       	rcall	.-474    	; 0x678a <task_twi2_lcd_str>
    6964:	42 e4       	ldi	r20, 0x42	; 66
    6966:	51 e2       	ldi	r21, 0x21	; 33
    6968:	62 e0       	ldi	r22, 0x02	; 2
    696a:	84 eb       	ldi	r24, 0xB4	; 180
    696c:	0e df       	rcall	.-484    	; 0x678a <task_twi2_lcd_str>
    696e:	01 e0       	ldi	r16, 0x01	; 1
    6970:	21 e0       	ldi	r18, 0x01	; 1
    6972:	43 e0       	ldi	r20, 0x03	; 3
    6974:	64 e0       	ldi	r22, 0x04	; 4
    6976:	89 e0       	ldi	r24, 0x09	; 9
    6978:	c5 df       	rcall	.-118    	; 0x6904 <task_twi2_lcd_circ>
    697a:	ee 24       	eor	r14, r14
    697c:	e3 94       	inc	r14
    697e:	00 e0       	ldi	r16, 0x00	; 0
    6980:	24 e0       	ldi	r18, 0x04	; 4
    6982:	46 e0       	ldi	r20, 0x06	; 6
    6984:	62 e0       	ldi	r22, 0x02	; 2
    6986:	81 e0       	ldi	r24, 0x01	; 1
    6988:	8f df       	rcall	.-226    	; 0x68a8 <task_twi2_lcd_rect>
    698a:	24 e0       	ldi	r18, 0x04	; 4
    698c:	46 e0       	ldi	r20, 0x06	; 6
    698e:	62 e0       	ldi	r22, 0x02	; 2
    6990:	8c e0       	ldi	r24, 0x0C	; 12
    6992:	8a df       	rcall	.-236    	; 0x68a8 <task_twi2_lcd_rect>
    6994:	01 e0       	ldi	r16, 0x01	; 1
    6996:	2b e0       	ldi	r18, 0x0B	; 11
    6998:	4f ee       	ldi	r20, 0xEF	; 239
    699a:	6b e0       	ldi	r22, 0x0B	; 11
    699c:	80 e0       	ldi	r24, 0x00	; 0
    699e:	5c df       	rcall	.-328    	; 0x6858 <task_twi2_lcd_line>
    69a0:	0f 91       	pop	r16
    69a2:	ef 90       	pop	r14
    69a4:	08 95       	ret

000069a6 <twi_start>:
    69a6:	7f 92       	push	r7
    69a8:	8f 92       	push	r8
    69aa:	9f 92       	push	r9
    69ac:	af 92       	push	r10
    69ae:	bf 92       	push	r11
    69b0:	cf 92       	push	r12
    69b2:	df 92       	push	r13
    69b4:	ef 92       	push	r14
    69b6:	ff 92       	push	r15
    69b8:	0f 93       	push	r16
    69ba:	1f 93       	push	r17
    69bc:	cf 93       	push	r28
    69be:	df 93       	push	r29
    69c0:	60 e4       	ldi	r22, 0x40	; 64
    69c2:	85 e0       	ldi	r24, 0x05	; 5
    69c4:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    69c8:	66 e3       	ldi	r22, 0x36	; 54
    69ca:	70 e2       	ldi	r23, 0x20	; 32
    69cc:	80 ea       	ldi	r24, 0xA0	; 160
    69ce:	94 e0       	ldi	r25, 0x04	; 4
    69d0:	0e 94 46 50 	call	0xa08c	; 0xa08c <twi_master_init>
    69d4:	e0 ea       	ldi	r30, 0xA0	; 160
    69d6:	f4 e0       	ldi	r31, 0x04	; 4
    69d8:	81 81       	ldd	r24, Z+1	; 0x01
    69da:	88 60       	ori	r24, 0x08	; 8
    69dc:	81 83       	std	Z+1, r24	; 0x01
    69de:	60 e4       	ldi	r22, 0x40	; 64
    69e0:	83 e0       	ldi	r24, 0x03	; 3
    69e2:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    69e6:	62 e2       	ldi	r22, 0x22	; 34
    69e8:	70 e2       	ldi	r23, 0x20	; 32
    69ea:	80 e8       	ldi	r24, 0x80	; 128
    69ec:	94 e0       	ldi	r25, 0x04	; 4
    69ee:	0e 94 46 50 	call	0xa08c	; 0xa08c <twi_master_init>
    69f2:	e0 e8       	ldi	r30, 0x80	; 128
    69f4:	f4 e0       	ldi	r31, 0x04	; 4
    69f6:	81 81       	ldd	r24, Z+1	; 0x01
    69f8:	88 60       	ori	r24, 0x08	; 8
    69fa:	81 83       	std	Z+1, r24	; 0x01
    69fc:	61 e4       	ldi	r22, 0x41	; 65
    69fe:	7b e4       	ldi	r23, 0x4B	; 75
    6a00:	8c e4       	ldi	r24, 0x4C	; 76
    6a02:	90 e0       	ldi	r25, 0x00	; 0
    6a04:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6a08:	e7 e1       	ldi	r30, 0x17	; 23
    6a0a:	f0 e2       	ldi	r31, 0x20	; 32
    6a0c:	81 e0       	ldi	r24, 0x01	; 1
    6a0e:	81 83       	std	Z+1, r24	; 0x01
    6a10:	81 e0       	ldi	r24, 0x01	; 1
    6a12:	90 e0       	ldi	r25, 0x00	; 0
    6a14:	84 83       	std	Z+4, r24	; 0x04
    6a16:	95 83       	std	Z+5, r25	; 0x05
    6a18:	80 87       	std	Z+8, r24	; 0x08
    6a1a:	91 87       	std	Z+9, r25	; 0x09
    6a1c:	41 e0       	ldi	r20, 0x01	; 1
    6a1e:	bf 01       	movw	r22, r30
    6a20:	80 e8       	ldi	r24, 0x80	; 128
    6a22:	94 e0       	ldi	r25, 0x04	; 4
    6a24:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6a28:	80 91 2f 25 	lds	r24, 0x252F	; 0x80252f <twi2_m_data>
    6a2c:	80 93 fb 26 	sts	0x26FB, r24	; 0x8026fb <g_twi2_lcd_version>
    6a30:	81 31       	cpi	r24, 0x11	; 17
    6a32:	08 f4       	brcc	.+2      	; 0x6a36 <twi_start+0x90>
    6a34:	78 c0       	rjmp	.+240    	; 0x6b26 <twi_start+0x180>
    6a36:	c7 e1       	ldi	r28, 0x17	; 23
    6a38:	d0 e2       	ldi	r29, 0x20	; 32
    6a3a:	82 e0       	ldi	r24, 0x02	; 2
    6a3c:	89 83       	std	Y+1, r24	; 0x01
    6a3e:	0f 2e       	mov	r0, r31
    6a40:	ff e2       	ldi	r31, 0x2F	; 47
    6a42:	ef 2e       	mov	r14, r31
    6a44:	f5 e2       	ldi	r31, 0x25	; 37
    6a46:	ff 2e       	mov	r15, r31
    6a48:	f0 2d       	mov	r31, r0
    6a4a:	68 94       	set
    6a4c:	dd 24       	eor	r13, r13
    6a4e:	d4 f8       	bld	r13, 4
    6a50:	f7 01       	movw	r30, r14
    6a52:	d0 82       	st	Z, r13
    6a54:	01 e0       	ldi	r16, 0x01	; 1
    6a56:	10 e0       	ldi	r17, 0x00	; 0
    6a58:	08 87       	std	Y+8, r16	; 0x08
    6a5a:	19 87       	std	Y+9, r17	; 0x09
    6a5c:	40 e0       	ldi	r20, 0x00	; 0
    6a5e:	be 01       	movw	r22, r28
    6a60:	80 e8       	ldi	r24, 0x80	; 128
    6a62:	94 e0       	ldi	r25, 0x04	; 4
    6a64:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6a68:	65 e0       	ldi	r22, 0x05	; 5
    6a6a:	70 e0       	ldi	r23, 0x00	; 0
    6a6c:	80 e0       	ldi	r24, 0x00	; 0
    6a6e:	90 e0       	ldi	r25, 0x00	; 0
    6a70:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6a74:	ac db       	rcall	.-2216   	; 0x61ce <twi2_waitUntilReady>
    6a76:	d9 82       	std	Y+1, r13	; 0x01
    6a78:	18 86       	std	Y+8, r1	; 0x08
    6a7a:	19 86       	std	Y+9, r1	; 0x09
    6a7c:	40 e0       	ldi	r20, 0x00	; 0
    6a7e:	be 01       	movw	r22, r28
    6a80:	80 e8       	ldi	r24, 0x80	; 128
    6a82:	94 e0       	ldi	r25, 0x04	; 4
    6a84:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6a88:	60 e9       	ldi	r22, 0x90	; 144
    6a8a:	70 ed       	ldi	r23, 0xD0	; 208
    6a8c:	83 e0       	ldi	r24, 0x03	; 3
    6a8e:	90 e0       	ldi	r25, 0x00	; 0
    6a90:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6a94:	81 e0       	ldi	r24, 0x01	; 1
    6a96:	e4 db       	rcall	.-2104   	; 0x6260 <twi2_set_leds>
    6a98:	9a db       	rcall	.-2252   	; 0x61ce <twi2_waitUntilReady>
    6a9a:	84 e1       	ldi	r24, 0x14	; 20
    6a9c:	89 83       	std	Y+1, r24	; 0x01
    6a9e:	81 e0       	ldi	r24, 0x01	; 1
    6aa0:	f7 01       	movw	r30, r14
    6aa2:	80 83       	st	Z, r24
    6aa4:	08 87       	std	Y+8, r16	; 0x08
    6aa6:	19 87       	std	Y+9, r17	; 0x09
    6aa8:	40 e0       	ldi	r20, 0x00	; 0
    6aaa:	be 01       	movw	r22, r28
    6aac:	80 e8       	ldi	r24, 0x80	; 128
    6aae:	94 e0       	ldi	r25, 0x04	; 4
    6ab0:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6ab4:	65 e0       	ldi	r22, 0x05	; 5
    6ab6:	70 e0       	ldi	r23, 0x00	; 0
    6ab8:	80 e0       	ldi	r24, 0x00	; 0
    6aba:	90 e0       	ldi	r25, 0x00	; 0
    6abc:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6ac0:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <g_bias_pm>
    6ac4:	08 dc       	rcall	.-2032   	; 0x62d6 <twi2_set_bias>
    6ac6:	69 e1       	ldi	r22, 0x19	; 25
    6ac8:	8c e2       	ldi	r24, 0x2C	; 44
    6aca:	1f dc       	rcall	.-1986   	; 0x630a <twi2_set_beep>
    6acc:	61 e6       	ldi	r22, 0x61	; 97
    6ace:	73 ee       	ldi	r23, 0xE3	; 227
    6ad0:	86 e1       	ldi	r24, 0x16	; 22
    6ad2:	90 e0       	ldi	r25, 0x00	; 0
    6ad4:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6ad8:	c0 e8       	ldi	r28, 0x80	; 128
    6ada:	6c 2f       	mov	r22, r28
    6adc:	80 e0       	ldi	r24, 0x00	; 0
    6ade:	db db       	rcall	.-2122   	; 0x6296 <twi2_set_ledbl>
    6ae0:	68 e8       	ldi	r22, 0x88	; 136
    6ae2:	73 e1       	ldi	r23, 0x13	; 19
    6ae4:	80 e0       	ldi	r24, 0x00	; 0
    6ae6:	90 e0       	ldi	r25, 0x00	; 0
    6ae8:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6aec:	c2 50       	subi	r28, 0x02	; 2
    6aee:	a9 f7       	brne	.-22     	; 0x6ada <twi_start+0x134>
    6af0:	69 e1       	ldi	r22, 0x19	; 25
    6af2:	88 e5       	ldi	r24, 0x58	; 88
    6af4:	0a dc       	rcall	.-2028   	; 0x630a <twi2_set_beep>
    6af6:	61 e6       	ldi	r22, 0x61	; 97
    6af8:	73 ee       	ldi	r23, 0xE3	; 227
    6afa:	86 e1       	ldi	r24, 0x16	; 22
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6b02:	6c 2f       	mov	r22, r28
    6b04:	80 e0       	ldi	r24, 0x00	; 0
    6b06:	c7 db       	rcall	.-2162   	; 0x6296 <twi2_set_ledbl>
    6b08:	68 e8       	ldi	r22, 0x88	; 136
    6b0a:	73 e1       	ldi	r23, 0x13	; 19
    6b0c:	80 e0       	ldi	r24, 0x00	; 0
    6b0e:	90 e0       	ldi	r25, 0x00	; 0
    6b10:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6b14:	ce 5f       	subi	r28, 0xFE	; 254
    6b16:	c2 38       	cpi	r28, 0x82	; 130
    6b18:	a1 f7       	brne	.-24     	; 0x6b02 <twi_start+0x15c>
    6b1a:	60 91 62 20 	lds	r22, 0x2062	; 0x802062 <g_backlight_mode_pwm>
    6b1e:	80 e0       	ldi	r24, 0x00	; 0
    6b20:	ba db       	rcall	.-2188   	; 0x6296 <twi2_set_ledbl>
    6b22:	82 e0       	ldi	r24, 0x02	; 2
    6b24:	9d db       	rcall	.-2246   	; 0x6260 <twi2_set_leds>
    6b26:	16 df       	rcall	.-468    	; 0x6954 <task_twi2_lcd_header>
    6b28:	1f 92       	push	r1
    6b2a:	84 e4       	ldi	r24, 0x44	; 68
    6b2c:	8f 93       	push	r24
    6b2e:	85 e4       	ldi	r24, 0x45	; 69
    6b30:	93 e3       	ldi	r25, 0x33	; 51
    6b32:	9f 93       	push	r25
    6b34:	8f 93       	push	r24
    6b36:	1f 92       	push	r1
    6b38:	80 e4       	ldi	r24, 0x40	; 64
    6b3a:	8f 93       	push	r24
    6b3c:	8f e3       	ldi	r24, 0x3F	; 63
    6b3e:	95 e2       	ldi	r25, 0x25	; 37
    6b40:	9f 93       	push	r25
    6b42:	8f 93       	push	r24
    6b44:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    6b48:	81 34       	cpi	r24, 0x41	; 65
    6b4a:	91 05       	cpc	r25, r1
    6b4c:	10 f0       	brcs	.+4      	; 0x6b52 <twi_start+0x1ac>
    6b4e:	80 e4       	ldi	r24, 0x40	; 64
    6b50:	90 e0       	ldi	r25, 0x00	; 0
    6b52:	40 e0       	ldi	r20, 0x00	; 0
    6b54:	68 2f       	mov	r22, r24
    6b56:	8f e3       	ldi	r24, 0x3F	; 63
    6b58:	95 e2       	ldi	r25, 0x25	; 37
    6b5a:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    6b5e:	10 92 04 27 	sts	0x2704, r1	; 0x802704 <g_twi1_hygro_status>
    6b62:	eb e2       	ldi	r30, 0x2B	; 43
    6b64:	f0 e2       	ldi	r31, 0x20	; 32
    6b66:	84 e4       	ldi	r24, 0x44	; 68
    6b68:	80 83       	st	Z, r24
    6b6a:	80 e3       	ldi	r24, 0x30	; 48
    6b6c:	81 83       	std	Z+1, r24	; 0x01
    6b6e:	83 e9       	ldi	r24, 0x93	; 147
    6b70:	82 83       	std	Z+2, r24	; 0x02
    6b72:	82 e0       	ldi	r24, 0x02	; 2
    6b74:	90 e0       	ldi	r25, 0x00	; 0
    6b76:	84 83       	std	Z+4, r24	; 0x04
    6b78:	95 83       	std	Z+5, r25	; 0x05
    6b7a:	10 86       	std	Z+8, r1	; 0x08
    6b7c:	11 86       	std	Z+9, r1	; 0x09
    6b7e:	40 e0       	ldi	r20, 0x00	; 0
    6b80:	bf 01       	movw	r22, r30
    6b82:	80 ea       	ldi	r24, 0xA0	; 160
    6b84:	94 e0       	ldi	r25, 0x04	; 4
    6b86:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6b8a:	c8 2f       	mov	r28, r24
    6b8c:	8d b7       	in	r24, 0x3d	; 61
    6b8e:	9e b7       	in	r25, 0x3e	; 62
    6b90:	08 96       	adiw	r24, 0x08	; 8
    6b92:	8d bf       	out	0x3d, r24	; 61
    6b94:	9e bf       	out	0x3e, r25	; 62
    6b96:	cc 23       	and	r28, r28
    6b98:	f9 f0       	breq	.+62     	; 0x6bd8 <twi_start+0x232>
    6b9a:	8e ef       	ldi	r24, 0xFE	; 254
    6b9c:	92 e3       	ldi	r25, 0x32	; 50
    6b9e:	9f 93       	push	r25
    6ba0:	8f 93       	push	r24
    6ba2:	1f 92       	push	r1
    6ba4:	80 e4       	ldi	r24, 0x40	; 64
    6ba6:	8f 93       	push	r24
    6ba8:	8f e3       	ldi	r24, 0x3F	; 63
    6baa:	95 e2       	ldi	r25, 0x25	; 37
    6bac:	9f 93       	push	r25
    6bae:	8f 93       	push	r24
    6bb0:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    6bb4:	81 34       	cpi	r24, 0x41	; 65
    6bb6:	91 05       	cpc	r25, r1
    6bb8:	10 f0       	brcs	.+4      	; 0x6bbe <twi_start+0x218>
    6bba:	80 e4       	ldi	r24, 0x40	; 64
    6bbc:	90 e0       	ldi	r25, 0x00	; 0
    6bbe:	40 e0       	ldi	r20, 0x00	; 0
    6bc0:	68 2f       	mov	r22, r24
    6bc2:	8f e3       	ldi	r24, 0x3F	; 63
    6bc4:	95 e2       	ldi	r25, 0x25	; 37
    6bc6:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    6bca:	0f 90       	pop	r0
    6bcc:	0f 90       	pop	r0
    6bce:	0f 90       	pop	r0
    6bd0:	0f 90       	pop	r0
    6bd2:	0f 90       	pop	r0
    6bd4:	0f 90       	pop	r0
    6bd6:	a2 c0       	rjmp	.+324    	; 0x6d1c <twi_start+0x376>
    6bd8:	60 e1       	ldi	r22, 0x10	; 16
    6bda:	77 e2       	ldi	r23, 0x27	; 39
    6bdc:	80 e0       	ldi	r24, 0x00	; 0
    6bde:	90 e0       	ldi	r25, 0x00	; 0
    6be0:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6be4:	eb e2       	ldi	r30, 0x2B	; 43
    6be6:	f0 e2       	ldi	r31, 0x20	; 32
    6be8:	84 e4       	ldi	r24, 0x44	; 68
    6bea:	80 83       	st	Z, r24
    6bec:	80 e3       	ldi	r24, 0x30	; 48
    6bee:	81 83       	std	Z+1, r24	; 0x01
    6bf0:	82 ea       	ldi	r24, 0xA2	; 162
    6bf2:	82 83       	std	Z+2, r24	; 0x02
    6bf4:	82 e0       	ldi	r24, 0x02	; 2
    6bf6:	90 e0       	ldi	r25, 0x00	; 0
    6bf8:	84 83       	std	Z+4, r24	; 0x04
    6bfa:	95 83       	std	Z+5, r25	; 0x05
    6bfc:	10 86       	std	Z+8, r1	; 0x08
    6bfe:	11 86       	std	Z+9, r1	; 0x09
    6c00:	40 e0       	ldi	r20, 0x00	; 0
    6c02:	bf 01       	movw	r22, r30
    6c04:	80 ea       	ldi	r24, 0xA0	; 160
    6c06:	94 e0       	ldi	r25, 0x04	; 4
    6c08:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6c0c:	c8 2f       	mov	r28, r24
    6c0e:	81 11       	cpse	r24, r1
    6c10:	85 c0       	rjmp	.+266    	; 0x6d1c <twi_start+0x376>
    6c12:	60 e1       	ldi	r22, 0x10	; 16
    6c14:	77 e2       	ldi	r23, 0x27	; 39
    6c16:	80 e0       	ldi	r24, 0x00	; 0
    6c18:	90 e0       	ldi	r25, 0x00	; 0
    6c1a:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6c1e:	eb e2       	ldi	r30, 0x2B	; 43
    6c20:	f0 e2       	ldi	r31, 0x20	; 32
    6c22:	84 e4       	ldi	r24, 0x44	; 68
    6c24:	80 83       	st	Z, r24
    6c26:	83 ef       	ldi	r24, 0xF3	; 243
    6c28:	81 83       	std	Z+1, r24	; 0x01
    6c2a:	8d e2       	ldi	r24, 0x2D	; 45
    6c2c:	82 83       	std	Z+2, r24	; 0x02
    6c2e:	82 e0       	ldi	r24, 0x02	; 2
    6c30:	90 e0       	ldi	r25, 0x00	; 0
    6c32:	84 83       	std	Z+4, r24	; 0x04
    6c34:	95 83       	std	Z+5, r25	; 0x05
    6c36:	80 87       	std	Z+8, r24	; 0x08
    6c38:	91 87       	std	Z+9, r25	; 0x09
    6c3a:	41 e0       	ldi	r20, 0x01	; 1
    6c3c:	bf 01       	movw	r22, r30
    6c3e:	80 ea       	ldi	r24, 0xA0	; 160
    6c40:	94 e0       	ldi	r25, 0x04	; 4
    6c42:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6c46:	c8 2f       	mov	r28, r24
    6c48:	81 11       	cpse	r24, r1
    6c4a:	68 c0       	rjmp	.+208    	; 0x6d1c <twi_start+0x376>
    6c4c:	80 91 38 25 	lds	r24, 0x2538	; 0x802538 <twi1_m_data+0x1>
    6c50:	80 93 04 27 	sts	0x2704, r24	; 0x802704 <g_twi1_hygro_status>
    6c54:	1f 92       	push	r1
    6c56:	8f 93       	push	r24
    6c58:	8c ec       	ldi	r24, 0xCC	; 204
    6c5a:	92 e3       	ldi	r25, 0x32	; 50
    6c5c:	9f 93       	push	r25
    6c5e:	8f 93       	push	r24
    6c60:	1f 92       	push	r1
    6c62:	80 e4       	ldi	r24, 0x40	; 64
    6c64:	8f 93       	push	r24
    6c66:	8f e3       	ldi	r24, 0x3F	; 63
    6c68:	95 e2       	ldi	r25, 0x25	; 37
    6c6a:	9f 93       	push	r25
    6c6c:	8f 93       	push	r24
    6c6e:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    6c72:	81 34       	cpi	r24, 0x41	; 65
    6c74:	91 05       	cpc	r25, r1
    6c76:	10 f0       	brcs	.+4      	; 0x6c7c <twi_start+0x2d6>
    6c78:	80 e4       	ldi	r24, 0x40	; 64
    6c7a:	90 e0       	ldi	r25, 0x00	; 0
    6c7c:	40 e0       	ldi	r20, 0x00	; 0
    6c7e:	68 2f       	mov	r22, r24
    6c80:	8f e3       	ldi	r24, 0x3F	; 63
    6c82:	95 e2       	ldi	r25, 0x25	; 37
    6c84:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    6c88:	eb e2       	ldi	r30, 0x2B	; 43
    6c8a:	f0 e2       	ldi	r31, 0x20	; 32
    6c8c:	84 e4       	ldi	r24, 0x44	; 68
    6c8e:	80 83       	st	Z, r24
    6c90:	84 e2       	ldi	r24, 0x24	; 36
    6c92:	81 83       	std	Z+1, r24	; 0x01
    6c94:	12 82       	std	Z+2, r1	; 0x02
    6c96:	82 e0       	ldi	r24, 0x02	; 2
    6c98:	90 e0       	ldi	r25, 0x00	; 0
    6c9a:	84 83       	std	Z+4, r24	; 0x04
    6c9c:	95 83       	std	Z+5, r25	; 0x05
    6c9e:	10 86       	std	Z+8, r1	; 0x08
    6ca0:	11 86       	std	Z+9, r1	; 0x09
    6ca2:	40 e0       	ldi	r20, 0x00	; 0
    6ca4:	bf 01       	movw	r22, r30
    6ca6:	80 ea       	ldi	r24, 0xA0	; 160
    6ca8:	94 e0       	ldi	r25, 0x04	; 4
    6caa:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6cae:	c8 2f       	mov	r28, r24
    6cb0:	ed b7       	in	r30, 0x3d	; 61
    6cb2:	fe b7       	in	r31, 0x3e	; 62
    6cb4:	38 96       	adiw	r30, 0x08	; 8
    6cb6:	ed bf       	out	0x3d, r30	; 61
    6cb8:	fe bf       	out	0x3e, r31	; 62
    6cba:	81 11       	cpse	r24, r1
    6cbc:	2f c0       	rjmp	.+94     	; 0x6d1c <twi_start+0x376>
    6cbe:	81 e0       	ldi	r24, 0x01	; 1
    6cc0:	80 93 05 27 	sts	0x2705, r24	; 0x802705 <g_twi1_hygro_valid>
    6cc4:	89 e6       	ldi	r24, 0x69	; 105
    6cc6:	92 e3       	ldi	r25, 0x32	; 50
    6cc8:	9f 93       	push	r25
    6cca:	8f 93       	push	r24
    6ccc:	1f 92       	push	r1
    6cce:	10 e4       	ldi	r17, 0x40	; 64
    6cd0:	1f 93       	push	r17
    6cd2:	cf e3       	ldi	r28, 0x3F	; 63
    6cd4:	d5 e2       	ldi	r29, 0x25	; 37
    6cd6:	df 93       	push	r29
    6cd8:	cf 93       	push	r28
    6cda:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    6cde:	ae 01       	movw	r20, r28
    6ce0:	6e e1       	ldi	r22, 0x1E	; 30
    6ce2:	88 e0       	ldi	r24, 0x08	; 8
    6ce4:	52 dd       	rcall	.-1372   	; 0x678a <task_twi2_lcd_str>
    6ce6:	8e ea       	ldi	r24, 0xAE	; 174
    6ce8:	92 e3       	ldi	r25, 0x32	; 50
    6cea:	9f 93       	push	r25
    6cec:	8f 93       	push	r24
    6cee:	1f 92       	push	r1
    6cf0:	1f 93       	push	r17
    6cf2:	df 93       	push	r29
    6cf4:	cf 93       	push	r28
    6cf6:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    6cfa:	81 34       	cpi	r24, 0x41	; 65
    6cfc:	91 05       	cpc	r25, r1
    6cfe:	10 f0       	brcs	.+4      	; 0x6d04 <twi_start+0x35e>
    6d00:	80 e4       	ldi	r24, 0x40	; 64
    6d02:	90 e0       	ldi	r25, 0x00	; 0
    6d04:	40 e0       	ldi	r20, 0x00	; 0
    6d06:	68 2f       	mov	r22, r24
    6d08:	8f e3       	ldi	r24, 0x3F	; 63
    6d0a:	95 e2       	ldi	r25, 0x25	; 37
    6d0c:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    6d10:	8d b7       	in	r24, 0x3d	; 61
    6d12:	9e b7       	in	r25, 0x3e	; 62
    6d14:	0c 96       	adiw	r24, 0x0c	; 12
    6d16:	8d bf       	out	0x3d, r24	; 61
    6d18:	9e bf       	out	0x3e, r25	; 62
    6d1a:	23 c0       	rjmp	.+70     	; 0x6d62 <twi_start+0x3bc>
    6d1c:	8c 2f       	mov	r24, r28
    6d1e:	0c 2e       	mov	r0, r28
    6d20:	00 0c       	add	r0, r0
    6d22:	99 0b       	sbc	r25, r25
    6d24:	9f 93       	push	r25
    6d26:	cf 93       	push	r28
    6d28:	8d e7       	ldi	r24, 0x7D	; 125
    6d2a:	92 e3       	ldi	r25, 0x32	; 50
    6d2c:	9f 93       	push	r25
    6d2e:	8f 93       	push	r24
    6d30:	1f 92       	push	r1
    6d32:	80 e4       	ldi	r24, 0x40	; 64
    6d34:	8f 93       	push	r24
    6d36:	8f e3       	ldi	r24, 0x3F	; 63
    6d38:	95 e2       	ldi	r25, 0x25	; 37
    6d3a:	9f 93       	push	r25
    6d3c:	8f 93       	push	r24
    6d3e:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    6d42:	81 34       	cpi	r24, 0x41	; 65
    6d44:	91 05       	cpc	r25, r1
    6d46:	10 f0       	brcs	.+4      	; 0x6d4c <twi_start+0x3a6>
    6d48:	80 e4       	ldi	r24, 0x40	; 64
    6d4a:	90 e0       	ldi	r25, 0x00	; 0
    6d4c:	40 e0       	ldi	r20, 0x00	; 0
    6d4e:	68 2f       	mov	r22, r24
    6d50:	8f e3       	ldi	r24, 0x3F	; 63
    6d52:	95 e2       	ldi	r25, 0x25	; 37
    6d54:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    6d58:	ed b7       	in	r30, 0x3d	; 61
    6d5a:	fe b7       	in	r31, 0x3e	; 62
    6d5c:	38 96       	adiw	r30, 0x08	; 8
    6d5e:	ed bf       	out	0x3d, r30	; 61
    6d60:	fe bf       	out	0x3e, r31	; 62
    6d62:	1f 92       	push	r1
    6d64:	8c e0       	ldi	r24, 0x0C	; 12
    6d66:	8f 93       	push	r24
    6d68:	1f 92       	push	r1
    6d6a:	88 e6       	ldi	r24, 0x68	; 104
    6d6c:	8f 93       	push	r24
    6d6e:	8c e2       	ldi	r24, 0x2C	; 44
    6d70:	92 e3       	ldi	r25, 0x32	; 50
    6d72:	9f 93       	push	r25
    6d74:	8f 93       	push	r24
    6d76:	1f 92       	push	r1
    6d78:	80 e4       	ldi	r24, 0x40	; 64
    6d7a:	8f 93       	push	r24
    6d7c:	8f e3       	ldi	r24, 0x3F	; 63
    6d7e:	95 e2       	ldi	r25, 0x25	; 37
    6d80:	9f 93       	push	r25
    6d82:	8f 93       	push	r24
    6d84:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    6d88:	81 34       	cpi	r24, 0x41	; 65
    6d8a:	91 05       	cpc	r25, r1
    6d8c:	10 f0       	brcs	.+4      	; 0x6d92 <twi_start+0x3ec>
    6d8e:	80 e4       	ldi	r24, 0x40	; 64
    6d90:	90 e0       	ldi	r25, 0x00	; 0
    6d92:	40 e0       	ldi	r20, 0x00	; 0
    6d94:	68 2f       	mov	r22, r24
    6d96:	8f e3       	ldi	r24, 0x3F	; 63
    6d98:	95 e2       	ldi	r25, 0x25	; 37
    6d9a:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    6d9e:	10 92 63 27 	sts	0x2763, r1	; 0x802763 <g_twi1_gyro_1_version>
    6da2:	10 92 3e 27 	sts	0x273E, r1	; 0x80273e <g_twi1_gyro_2_version>
    6da6:	eb e2       	ldi	r30, 0x2B	; 43
    6da8:	f0 e2       	ldi	r31, 0x20	; 32
    6daa:	88 e6       	ldi	r24, 0x68	; 104
    6dac:	80 83       	st	Z, r24
    6dae:	8b e6       	ldi	r24, 0x6B	; 107
    6db0:	81 83       	std	Z+1, r24	; 0x01
    6db2:	81 e0       	ldi	r24, 0x01	; 1
    6db4:	90 e0       	ldi	r25, 0x00	; 0
    6db6:	84 83       	std	Z+4, r24	; 0x04
    6db8:	95 83       	std	Z+5, r25	; 0x05
    6dba:	21 e8       	ldi	r18, 0x81	; 129
    6dbc:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    6dc0:	80 87       	std	Z+8, r24	; 0x08
    6dc2:	91 87       	std	Z+9, r25	; 0x09
    6dc4:	40 e0       	ldi	r20, 0x00	; 0
    6dc6:	bf 01       	movw	r22, r30
    6dc8:	80 ea       	ldi	r24, 0xA0	; 160
    6dca:	94 e0       	ldi	r25, 0x04	; 4
    6dcc:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6dd0:	c8 2f       	mov	r28, r24
    6dd2:	8d b7       	in	r24, 0x3d	; 61
    6dd4:	9e b7       	in	r25, 0x3e	; 62
    6dd6:	0a 96       	adiw	r24, 0x0a	; 10
    6dd8:	8d bf       	out	0x3d, r24	; 61
    6dda:	9e bf       	out	0x3e, r25	; 62
    6ddc:	cc 23       	and	r28, r28
    6dde:	f9 f0       	breq	.+62     	; 0x6e1e <twi_start+0x478>
    6de0:	82 ef       	ldi	r24, 0xF2	; 242
    6de2:	91 e3       	ldi	r25, 0x31	; 49
    6de4:	9f 93       	push	r25
    6de6:	8f 93       	push	r24
    6de8:	1f 92       	push	r1
    6dea:	80 e4       	ldi	r24, 0x40	; 64
    6dec:	8f 93       	push	r24
    6dee:	8f e3       	ldi	r24, 0x3F	; 63
    6df0:	95 e2       	ldi	r25, 0x25	; 37
    6df2:	9f 93       	push	r25
    6df4:	8f 93       	push	r24
    6df6:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    6dfa:	81 34       	cpi	r24, 0x41	; 65
    6dfc:	91 05       	cpc	r25, r1
    6dfe:	10 f0       	brcs	.+4      	; 0x6e04 <twi_start+0x45e>
    6e00:	80 e4       	ldi	r24, 0x40	; 64
    6e02:	90 e0       	ldi	r25, 0x00	; 0
    6e04:	40 e0       	ldi	r20, 0x00	; 0
    6e06:	68 2f       	mov	r22, r24
    6e08:	8f e3       	ldi	r24, 0x3F	; 63
    6e0a:	95 e2       	ldi	r25, 0x25	; 37
    6e0c:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    6e10:	0f 90       	pop	r0
    6e12:	0f 90       	pop	r0
    6e14:	0f 90       	pop	r0
    6e16:	0f 90       	pop	r0
    6e18:	0f 90       	pop	r0
    6e1a:	0f 90       	pop	r0
    6e1c:	40 c2       	rjmp	.+1152   	; 0x729e <twi_start+0x8f8>
    6e1e:	61 e5       	ldi	r22, 0x51	; 81
    6e20:	73 ec       	ldi	r23, 0xC3	; 195
    6e22:	80 e0       	ldi	r24, 0x00	; 0
    6e24:	90 e0       	ldi	r25, 0x00	; 0
    6e26:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6e2a:	eb e2       	ldi	r30, 0x2B	; 43
    6e2c:	f0 e2       	ldi	r31, 0x20	; 32
    6e2e:	88 e6       	ldi	r24, 0x68	; 104
    6e30:	80 83       	st	Z, r24
    6e32:	85 e7       	ldi	r24, 0x75	; 117
    6e34:	81 83       	std	Z+1, r24	; 0x01
    6e36:	81 e0       	ldi	r24, 0x01	; 1
    6e38:	90 e0       	ldi	r25, 0x00	; 0
    6e3a:	84 83       	std	Z+4, r24	; 0x04
    6e3c:	95 83       	std	Z+5, r25	; 0x05
    6e3e:	80 87       	std	Z+8, r24	; 0x08
    6e40:	91 87       	std	Z+9, r25	; 0x09
    6e42:	41 e0       	ldi	r20, 0x01	; 1
    6e44:	bf 01       	movw	r22, r30
    6e46:	80 ea       	ldi	r24, 0xA0	; 160
    6e48:	94 e0       	ldi	r25, 0x04	; 4
    6e4a:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6e4e:	c8 2f       	mov	r28, r24
    6e50:	81 11       	cpse	r24, r1
    6e52:	25 c2       	rjmp	.+1098   	; 0x729e <twi_start+0x8f8>
    6e54:	a7 e3       	ldi	r26, 0x37	; 55
    6e56:	b5 e2       	ldi	r27, 0x25	; 37
    6e58:	8c 91       	ld	r24, X
    6e5a:	80 93 63 27 	sts	0x2763, r24	; 0x802763 <g_twi1_gyro_1_version>
    6e5e:	eb e2       	ldi	r30, 0x2B	; 43
    6e60:	f0 e2       	ldi	r31, 0x20	; 32
    6e62:	88 e6       	ldi	r24, 0x68	; 104
    6e64:	80 83       	st	Z, r24
    6e66:	87 e3       	ldi	r24, 0x37	; 55
    6e68:	81 83       	std	Z+1, r24	; 0x01
    6e6a:	81 e0       	ldi	r24, 0x01	; 1
    6e6c:	90 e0       	ldi	r25, 0x00	; 0
    6e6e:	84 83       	std	Z+4, r24	; 0x04
    6e70:	95 83       	std	Z+5, r25	; 0x05
    6e72:	22 e0       	ldi	r18, 0x02	; 2
    6e74:	2c 93       	st	X, r18
    6e76:	80 87       	std	Z+8, r24	; 0x08
    6e78:	91 87       	std	Z+9, r25	; 0x09
    6e7a:	40 e0       	ldi	r20, 0x00	; 0
    6e7c:	bf 01       	movw	r22, r30
    6e7e:	80 ea       	ldi	r24, 0xA0	; 160
    6e80:	94 e0       	ldi	r25, 0x04	; 4
    6e82:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6e86:	c8 2f       	mov	r28, r24
    6e88:	81 11       	cpse	r24, r1
    6e8a:	09 c2       	rjmp	.+1042   	; 0x729e <twi_start+0x8f8>
    6e8c:	eb e2       	ldi	r30, 0x2B	; 43
    6e8e:	f0 e2       	ldi	r31, 0x20	; 32
    6e90:	8c e0       	ldi	r24, 0x0C	; 12
    6e92:	80 83       	st	Z, r24
    6e94:	8b e0       	ldi	r24, 0x0B	; 11
    6e96:	81 83       	std	Z+1, r24	; 0x01
    6e98:	81 e0       	ldi	r24, 0x01	; 1
    6e9a:	90 e0       	ldi	r25, 0x00	; 0
    6e9c:	84 83       	std	Z+4, r24	; 0x04
    6e9e:	95 83       	std	Z+5, r25	; 0x05
    6ea0:	21 e0       	ldi	r18, 0x01	; 1
    6ea2:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    6ea6:	80 87       	std	Z+8, r24	; 0x08
    6ea8:	91 87       	std	Z+9, r25	; 0x09
    6eaa:	40 e0       	ldi	r20, 0x00	; 0
    6eac:	bf 01       	movw	r22, r30
    6eae:	80 ea       	ldi	r24, 0xA0	; 160
    6eb0:	94 e0       	ldi	r25, 0x04	; 4
    6eb2:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6eb6:	c8 2f       	mov	r28, r24
    6eb8:	81 11       	cpse	r24, r1
    6eba:	f1 c1       	rjmp	.+994    	; 0x729e <twi_start+0x8f8>
    6ebc:	61 e5       	ldi	r22, 0x51	; 81
    6ebe:	73 ec       	ldi	r23, 0xC3	; 195
    6ec0:	80 e0       	ldi	r24, 0x00	; 0
    6ec2:	90 e0       	ldi	r25, 0x00	; 0
    6ec4:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6ec8:	eb e2       	ldi	r30, 0x2B	; 43
    6eca:	f0 e2       	ldi	r31, 0x20	; 32
    6ecc:	8c e0       	ldi	r24, 0x0C	; 12
    6ece:	80 83       	st	Z, r24
    6ed0:	11 82       	std	Z+1, r1	; 0x01
    6ed2:	81 e0       	ldi	r24, 0x01	; 1
    6ed4:	90 e0       	ldi	r25, 0x00	; 0
    6ed6:	84 83       	std	Z+4, r24	; 0x04
    6ed8:	95 83       	std	Z+5, r25	; 0x05
    6eda:	80 87       	std	Z+8, r24	; 0x08
    6edc:	91 87       	std	Z+9, r25	; 0x09
    6ede:	41 e0       	ldi	r20, 0x01	; 1
    6ee0:	bf 01       	movw	r22, r30
    6ee2:	80 ea       	ldi	r24, 0xA0	; 160
    6ee4:	94 e0       	ldi	r25, 0x04	; 4
    6ee6:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6eea:	c8 2f       	mov	r28, r24
    6eec:	81 11       	cpse	r24, r1
    6eee:	d7 c1       	rjmp	.+942    	; 0x729e <twi_start+0x8f8>
    6ef0:	80 91 37 25 	lds	r24, 0x2537	; 0x802537 <twi1_m_data>
    6ef4:	80 93 3e 27 	sts	0x273E, r24	; 0x80273e <g_twi1_gyro_2_version>
    6ef8:	1f 92       	push	r1
    6efa:	8f 93       	push	r24
    6efc:	80 91 63 27 	lds	r24, 0x2763	; 0x802763 <g_twi1_gyro_1_version>
    6f00:	1f 92       	push	r1
    6f02:	8f 93       	push	r24
    6f04:	87 eb       	ldi	r24, 0xB7	; 183
    6f06:	91 e3       	ldi	r25, 0x31	; 49
    6f08:	9f 93       	push	r25
    6f0a:	8f 93       	push	r24
    6f0c:	1f 92       	push	r1
    6f0e:	80 e4       	ldi	r24, 0x40	; 64
    6f10:	8f 93       	push	r24
    6f12:	8f e3       	ldi	r24, 0x3F	; 63
    6f14:	95 e2       	ldi	r25, 0x25	; 37
    6f16:	9f 93       	push	r25
    6f18:	8f 93       	push	r24
    6f1a:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    6f1e:	81 34       	cpi	r24, 0x41	; 65
    6f20:	91 05       	cpc	r25, r1
    6f22:	10 f0       	brcs	.+4      	; 0x6f28 <twi_start+0x582>
    6f24:	80 e4       	ldi	r24, 0x40	; 64
    6f26:	90 e0       	ldi	r25, 0x00	; 0
    6f28:	40 e0       	ldi	r20, 0x00	; 0
    6f2a:	68 2f       	mov	r22, r24
    6f2c:	8f e3       	ldi	r24, 0x3F	; 63
    6f2e:	95 e2       	ldi	r25, 0x25	; 37
    6f30:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    6f34:	eb e2       	ldi	r30, 0x2B	; 43
    6f36:	f0 e2       	ldi	r31, 0x20	; 32
    6f38:	8c e0       	ldi	r24, 0x0C	; 12
    6f3a:	80 83       	st	Z, r24
    6f3c:	8a e0       	ldi	r24, 0x0A	; 10
    6f3e:	81 83       	std	Z+1, r24	; 0x01
    6f40:	81 e0       	ldi	r24, 0x01	; 1
    6f42:	90 e0       	ldi	r25, 0x00	; 0
    6f44:	84 83       	std	Z+4, r24	; 0x04
    6f46:	95 83       	std	Z+5, r25	; 0x05
    6f48:	2f e1       	ldi	r18, 0x1F	; 31
    6f4a:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    6f4e:	80 87       	std	Z+8, r24	; 0x08
    6f50:	91 87       	std	Z+9, r25	; 0x09
    6f52:	40 e0       	ldi	r20, 0x00	; 0
    6f54:	bf 01       	movw	r22, r30
    6f56:	80 ea       	ldi	r24, 0xA0	; 160
    6f58:	94 e0       	ldi	r25, 0x04	; 4
    6f5a:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6f5e:	c8 2f       	mov	r28, r24
    6f60:	ed b7       	in	r30, 0x3d	; 61
    6f62:	fe b7       	in	r31, 0x3e	; 62
    6f64:	3a 96       	adiw	r30, 0x0a	; 10
    6f66:	ed bf       	out	0x3d, r30	; 61
    6f68:	fe bf       	out	0x3e, r31	; 62
    6f6a:	81 11       	cpse	r24, r1
    6f6c:	98 c1       	rjmp	.+816    	; 0x729e <twi_start+0x8f8>
    6f6e:	eb e2       	ldi	r30, 0x2B	; 43
    6f70:	f0 e2       	ldi	r31, 0x20	; 32
    6f72:	8c e0       	ldi	r24, 0x0C	; 12
    6f74:	80 83       	st	Z, r24
    6f76:	80 e1       	ldi	r24, 0x10	; 16
    6f78:	81 83       	std	Z+1, r24	; 0x01
    6f7a:	81 e0       	ldi	r24, 0x01	; 1
    6f7c:	90 e0       	ldi	r25, 0x00	; 0
    6f7e:	84 83       	std	Z+4, r24	; 0x04
    6f80:	95 83       	std	Z+5, r25	; 0x05
    6f82:	83 e0       	ldi	r24, 0x03	; 3
    6f84:	90 e0       	ldi	r25, 0x00	; 0
    6f86:	80 87       	std	Z+8, r24	; 0x08
    6f88:	91 87       	std	Z+9, r25	; 0x09
    6f8a:	41 e0       	ldi	r20, 0x01	; 1
    6f8c:	bf 01       	movw	r22, r30
    6f8e:	80 ea       	ldi	r24, 0xA0	; 160
    6f90:	94 e0       	ldi	r25, 0x04	; 4
    6f92:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6f96:	c8 2f       	mov	r28, r24
    6f98:	81 11       	cpse	r24, r1
    6f9a:	81 c1       	rjmp	.+770    	; 0x729e <twi_start+0x8f8>
    6f9c:	a7 e3       	ldi	r26, 0x37	; 55
    6f9e:	b5 e2       	ldi	r27, 0x25	; 37
    6fa0:	8c 91       	ld	r24, X
    6fa2:	80 93 3d 27 	sts	0x273D, r24	; 0x80273d <g_twi1_gyro_2_asax>
    6fa6:	11 96       	adiw	r26, 0x01	; 1
    6fa8:	8c 91       	ld	r24, X
    6faa:	11 97       	sbiw	r26, 0x01	; 1
    6fac:	80 93 3c 27 	sts	0x273C, r24	; 0x80273c <g_twi1_gyro_2_asay>
    6fb0:	12 96       	adiw	r26, 0x02	; 2
    6fb2:	8c 91       	ld	r24, X
    6fb4:	12 97       	sbiw	r26, 0x02	; 2
    6fb6:	80 93 3b 27 	sts	0x273B, r24	; 0x80273b <g_twi1_gyro_2_asaz>
    6fba:	eb e2       	ldi	r30, 0x2B	; 43
    6fbc:	f0 e2       	ldi	r31, 0x20	; 32
    6fbe:	8c e0       	ldi	r24, 0x0C	; 12
    6fc0:	80 83       	st	Z, r24
    6fc2:	8a e0       	ldi	r24, 0x0A	; 10
    6fc4:	81 83       	std	Z+1, r24	; 0x01
    6fc6:	81 e0       	ldi	r24, 0x01	; 1
    6fc8:	90 e0       	ldi	r25, 0x00	; 0
    6fca:	84 83       	std	Z+4, r24	; 0x04
    6fcc:	95 83       	std	Z+5, r25	; 0x05
    6fce:	20 e1       	ldi	r18, 0x10	; 16
    6fd0:	2c 93       	st	X, r18
    6fd2:	80 87       	std	Z+8, r24	; 0x08
    6fd4:	91 87       	std	Z+9, r25	; 0x09
    6fd6:	40 e0       	ldi	r20, 0x00	; 0
    6fd8:	bf 01       	movw	r22, r30
    6fda:	80 ea       	ldi	r24, 0xA0	; 160
    6fdc:	94 e0       	ldi	r25, 0x04	; 4
    6fde:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    6fe2:	c8 2f       	mov	r28, r24
    6fe4:	81 11       	cpse	r24, r1
    6fe6:	5b c1       	rjmp	.+694    	; 0x729e <twi_start+0x8f8>
    6fe8:	61 e5       	ldi	r22, 0x51	; 81
    6fea:	73 ec       	ldi	r23, 0xC3	; 195
    6fec:	80 e0       	ldi	r24, 0x00	; 0
    6fee:	90 e0       	ldi	r25, 0x00	; 0
    6ff0:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    6ff4:	eb e2       	ldi	r30, 0x2B	; 43
    6ff6:	f0 e2       	ldi	r31, 0x20	; 32
    6ff8:	8c e0       	ldi	r24, 0x0C	; 12
    6ffa:	80 83       	st	Z, r24
    6ffc:	8a e0       	ldi	r24, 0x0A	; 10
    6ffe:	81 83       	std	Z+1, r24	; 0x01
    7000:	81 e0       	ldi	r24, 0x01	; 1
    7002:	90 e0       	ldi	r25, 0x00	; 0
    7004:	84 83       	std	Z+4, r24	; 0x04
    7006:	95 83       	std	Z+5, r25	; 0x05
    7008:	22 e1       	ldi	r18, 0x12	; 18
    700a:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    700e:	80 87       	std	Z+8, r24	; 0x08
    7010:	91 87       	std	Z+9, r25	; 0x09
    7012:	40 e0       	ldi	r20, 0x00	; 0
    7014:	bf 01       	movw	r22, r30
    7016:	80 ea       	ldi	r24, 0xA0	; 160
    7018:	94 e0       	ldi	r25, 0x04	; 4
    701a:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    701e:	c8 2f       	mov	r28, r24
    7020:	81 11       	cpse	r24, r1
    7022:	3d c1       	rjmp	.+634    	; 0x729e <twi_start+0x8f8>
    7024:	ab e2       	ldi	r26, 0x2B	; 43
    7026:	b0 e2       	ldi	r27, 0x20	; 32
    7028:	88 e6       	ldi	r24, 0x68	; 104
    702a:	8c 93       	st	X, r24
    702c:	83 e1       	ldi	r24, 0x13	; 19
    702e:	11 96       	adiw	r26, 0x01	; 1
    7030:	8c 93       	st	X, r24
    7032:	11 97       	sbiw	r26, 0x01	; 1
    7034:	81 e0       	ldi	r24, 0x01	; 1
    7036:	90 e0       	ldi	r25, 0x00	; 0
    7038:	14 96       	adiw	r26, 0x04	; 4
    703a:	8d 93       	st	X+, r24
    703c:	9c 93       	st	X, r25
    703e:	15 97       	sbiw	r26, 0x05	; 5
    7040:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <g_twi1_gyro_1_gyro_ofsx>
    7044:	90 91 50 20 	lds	r25, 0x2050	; 0x802050 <g_twi1_gyro_1_gyro_ofsx+0x1>
    7048:	e7 e3       	ldi	r30, 0x37	; 55
    704a:	f5 e2       	ldi	r31, 0x25	; 37
    704c:	90 83       	st	Z, r25
    704e:	81 83       	std	Z+1, r24	; 0x01
    7050:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <g_twi1_gyro_1_gyro_ofsy>
    7054:	90 91 4e 20 	lds	r25, 0x204E	; 0x80204e <g_twi1_gyro_1_gyro_ofsy+0x1>
    7058:	92 83       	std	Z+2, r25	; 0x02
    705a:	83 83       	std	Z+3, r24	; 0x03
    705c:	80 91 4b 20 	lds	r24, 0x204B	; 0x80204b <g_twi1_gyro_1_gyro_ofsz>
    7060:	90 91 4c 20 	lds	r25, 0x204C	; 0x80204c <g_twi1_gyro_1_gyro_ofsz+0x1>
    7064:	94 83       	std	Z+4, r25	; 0x04
    7066:	85 83       	std	Z+5, r24	; 0x05
    7068:	86 e0       	ldi	r24, 0x06	; 6
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	18 96       	adiw	r26, 0x08	; 8
    706e:	8d 93       	st	X+, r24
    7070:	9c 93       	st	X, r25
    7072:	19 97       	sbiw	r26, 0x09	; 9
    7074:	40 e0       	ldi	r20, 0x00	; 0
    7076:	bd 01       	movw	r22, r26
    7078:	80 ea       	ldi	r24, 0xA0	; 160
    707a:	94 e0       	ldi	r25, 0x04	; 4
    707c:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    7080:	c8 2f       	mov	r28, r24
    7082:	81 11       	cpse	r24, r1
    7084:	0c c1       	rjmp	.+536    	; 0x729e <twi_start+0x8f8>
    7086:	eb e2       	ldi	r30, 0x2B	; 43
    7088:	f0 e2       	ldi	r31, 0x20	; 32
    708a:	88 e6       	ldi	r24, 0x68	; 104
    708c:	80 83       	st	Z, r24
    708e:	87 e7       	ldi	r24, 0x77	; 119
    7090:	81 83       	std	Z+1, r24	; 0x01
    7092:	81 e0       	ldi	r24, 0x01	; 1
    7094:	90 e0       	ldi	r25, 0x00	; 0
    7096:	84 83       	std	Z+4, r24	; 0x04
    7098:	95 83       	std	Z+5, r25	; 0x05
    709a:	80 91 5b 20 	lds	r24, 0x205B	; 0x80205b <g_twi1_gyro_1_accel_ofsx>
    709e:	90 91 5c 20 	lds	r25, 0x205C	; 0x80205c <g_twi1_gyro_1_accel_ofsx+0x1>
    70a2:	a7 e3       	ldi	r26, 0x37	; 55
    70a4:	b5 e2       	ldi	r27, 0x25	; 37
    70a6:	9c 01       	movw	r18, r24
    70a8:	22 0f       	add	r18, r18
    70aa:	23 2f       	mov	r18, r19
    70ac:	22 1f       	adc	r18, r18
    70ae:	33 0b       	sbc	r19, r19
    70b0:	31 95       	neg	r19
    70b2:	2c 93       	st	X, r18
    70b4:	88 0f       	add	r24, r24
    70b6:	11 96       	adiw	r26, 0x01	; 1
    70b8:	8c 93       	st	X, r24
    70ba:	82 e0       	ldi	r24, 0x02	; 2
    70bc:	90 e0       	ldi	r25, 0x00	; 0
    70be:	80 87       	std	Z+8, r24	; 0x08
    70c0:	91 87       	std	Z+9, r25	; 0x09
    70c2:	40 e0       	ldi	r20, 0x00	; 0
    70c4:	bf 01       	movw	r22, r30
    70c6:	80 ea       	ldi	r24, 0xA0	; 160
    70c8:	94 e0       	ldi	r25, 0x04	; 4
    70ca:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    70ce:	c8 2f       	mov	r28, r24
    70d0:	81 11       	cpse	r24, r1
    70d2:	e5 c0       	rjmp	.+458    	; 0x729e <twi_start+0x8f8>
    70d4:	8a e7       	ldi	r24, 0x7A	; 122
    70d6:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <twi1_packet+0x1>
    70da:	80 91 59 20 	lds	r24, 0x2059	; 0x802059 <g_twi1_gyro_1_accel_ofsy>
    70de:	90 91 5a 20 	lds	r25, 0x205A	; 0x80205a <g_twi1_gyro_1_accel_ofsy+0x1>
    70e2:	e7 e3       	ldi	r30, 0x37	; 55
    70e4:	f5 e2       	ldi	r31, 0x25	; 37
    70e6:	9c 01       	movw	r18, r24
    70e8:	22 0f       	add	r18, r18
    70ea:	23 2f       	mov	r18, r19
    70ec:	22 1f       	adc	r18, r18
    70ee:	33 0b       	sbc	r19, r19
    70f0:	31 95       	neg	r19
    70f2:	20 83       	st	Z, r18
    70f4:	88 0f       	add	r24, r24
    70f6:	81 83       	std	Z+1, r24	; 0x01
    70f8:	40 e0       	ldi	r20, 0x00	; 0
    70fa:	6b e2       	ldi	r22, 0x2B	; 43
    70fc:	70 e2       	ldi	r23, 0x20	; 32
    70fe:	80 ea       	ldi	r24, 0xA0	; 160
    7100:	94 e0       	ldi	r25, 0x04	; 4
    7102:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    7106:	c8 2f       	mov	r28, r24
    7108:	81 11       	cpse	r24, r1
    710a:	c9 c0       	rjmp	.+402    	; 0x729e <twi_start+0x8f8>
    710c:	8d e7       	ldi	r24, 0x7D	; 125
    710e:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <twi1_packet+0x1>
    7112:	80 91 57 20 	lds	r24, 0x2057	; 0x802057 <g_twi1_gyro_1_accel_ofsz>
    7116:	90 91 58 20 	lds	r25, 0x2058	; 0x802058 <g_twi1_gyro_1_accel_ofsz+0x1>
    711a:	e7 e3       	ldi	r30, 0x37	; 55
    711c:	f5 e2       	ldi	r31, 0x25	; 37
    711e:	9c 01       	movw	r18, r24
    7120:	22 0f       	add	r18, r18
    7122:	23 2f       	mov	r18, r19
    7124:	22 1f       	adc	r18, r18
    7126:	33 0b       	sbc	r19, r19
    7128:	31 95       	neg	r19
    712a:	20 83       	st	Z, r18
    712c:	88 0f       	add	r24, r24
    712e:	81 83       	std	Z+1, r24	; 0x01
    7130:	40 e0       	ldi	r20, 0x00	; 0
    7132:	6b e2       	ldi	r22, 0x2B	; 43
    7134:	70 e2       	ldi	r23, 0x20	; 32
    7136:	80 ea       	ldi	r24, 0xA0	; 160
    7138:	94 e0       	ldi	r25, 0x04	; 4
    713a:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    713e:	c8 2f       	mov	r28, r24
    7140:	81 11       	cpse	r24, r1
    7142:	ad c0       	rjmp	.+346    	; 0x729e <twi_start+0x8f8>
    7144:	eb e2       	ldi	r30, 0x2B	; 43
    7146:	f0 e2       	ldi	r31, 0x20	; 32
    7148:	88 e6       	ldi	r24, 0x68	; 104
    714a:	80 83       	st	Z, r24
    714c:	89 e1       	ldi	r24, 0x19	; 25
    714e:	81 83       	std	Z+1, r24	; 0x01
    7150:	81 e0       	ldi	r24, 0x01	; 1
    7152:	90 e0       	ldi	r25, 0x00	; 0
    7154:	84 83       	std	Z+4, r24	; 0x04
    7156:	95 83       	std	Z+5, r25	; 0x05
    7158:	23 e6       	ldi	r18, 0x63	; 99
    715a:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    715e:	80 87       	std	Z+8, r24	; 0x08
    7160:	91 87       	std	Z+9, r25	; 0x09
    7162:	40 e0       	ldi	r20, 0x00	; 0
    7164:	bf 01       	movw	r22, r30
    7166:	80 ea       	ldi	r24, 0xA0	; 160
    7168:	94 e0       	ldi	r25, 0x04	; 4
    716a:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    716e:	c8 2f       	mov	r28, r24
    7170:	81 11       	cpse	r24, r1
    7172:	95 c0       	rjmp	.+298    	; 0x729e <twi_start+0x8f8>
    7174:	eb e2       	ldi	r30, 0x2B	; 43
    7176:	f0 e2       	ldi	r31, 0x20	; 32
    7178:	88 e6       	ldi	r24, 0x68	; 104
    717a:	80 83       	st	Z, r24
    717c:	8a e1       	ldi	r24, 0x1A	; 26
    717e:	81 83       	std	Z+1, r24	; 0x01
    7180:	81 e0       	ldi	r24, 0x01	; 1
    7182:	90 e0       	ldi	r25, 0x00	; 0
    7184:	84 83       	std	Z+4, r24	; 0x04
    7186:	95 83       	std	Z+5, r25	; 0x05
    7188:	26 e0       	ldi	r18, 0x06	; 6
    718a:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    718e:	80 87       	std	Z+8, r24	; 0x08
    7190:	91 87       	std	Z+9, r25	; 0x09
    7192:	40 e0       	ldi	r20, 0x00	; 0
    7194:	bf 01       	movw	r22, r30
    7196:	80 ea       	ldi	r24, 0xA0	; 160
    7198:	94 e0       	ldi	r25, 0x04	; 4
    719a:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    719e:	c8 2f       	mov	r28, r24
    71a0:	81 11       	cpse	r24, r1
    71a2:	7d c0       	rjmp	.+250    	; 0x729e <twi_start+0x8f8>
    71a4:	eb e2       	ldi	r30, 0x2B	; 43
    71a6:	f0 e2       	ldi	r31, 0x20	; 32
    71a8:	88 e6       	ldi	r24, 0x68	; 104
    71aa:	80 83       	st	Z, r24
    71ac:	8d e1       	ldi	r24, 0x1D	; 29
    71ae:	81 83       	std	Z+1, r24	; 0x01
    71b0:	81 e0       	ldi	r24, 0x01	; 1
    71b2:	90 e0       	ldi	r25, 0x00	; 0
    71b4:	84 83       	std	Z+4, r24	; 0x04
    71b6:	95 83       	std	Z+5, r25	; 0x05
    71b8:	26 e0       	ldi	r18, 0x06	; 6
    71ba:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    71be:	80 87       	std	Z+8, r24	; 0x08
    71c0:	91 87       	std	Z+9, r25	; 0x09
    71c2:	40 e0       	ldi	r20, 0x00	; 0
    71c4:	bf 01       	movw	r22, r30
    71c6:	80 ea       	ldi	r24, 0xA0	; 160
    71c8:	94 e0       	ldi	r25, 0x04	; 4
    71ca:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    71ce:	c8 2f       	mov	r28, r24
    71d0:	81 11       	cpse	r24, r1
    71d2:	65 c0       	rjmp	.+202    	; 0x729e <twi_start+0x8f8>
    71d4:	eb e2       	ldi	r30, 0x2B	; 43
    71d6:	f0 e2       	ldi	r31, 0x20	; 32
    71d8:	88 e6       	ldi	r24, 0x68	; 104
    71da:	80 83       	st	Z, r24
    71dc:	8f e1       	ldi	r24, 0x1F	; 31
    71de:	81 83       	std	Z+1, r24	; 0x01
    71e0:	81 e0       	ldi	r24, 0x01	; 1
    71e2:	90 e0       	ldi	r25, 0x00	; 0
    71e4:	84 83       	std	Z+4, r24	; 0x04
    71e6:	95 83       	std	Z+5, r25	; 0x05
    71e8:	29 e1       	ldi	r18, 0x19	; 25
    71ea:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    71ee:	80 87       	std	Z+8, r24	; 0x08
    71f0:	91 87       	std	Z+9, r25	; 0x09
    71f2:	40 e0       	ldi	r20, 0x00	; 0
    71f4:	bf 01       	movw	r22, r30
    71f6:	80 ea       	ldi	r24, 0xA0	; 160
    71f8:	94 e0       	ldi	r25, 0x04	; 4
    71fa:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    71fe:	c8 2f       	mov	r28, r24
    7200:	81 11       	cpse	r24, r1
    7202:	4d c0       	rjmp	.+154    	; 0x729e <twi_start+0x8f8>
    7204:	eb e2       	ldi	r30, 0x2B	; 43
    7206:	f0 e2       	ldi	r31, 0x20	; 32
    7208:	88 e6       	ldi	r24, 0x68	; 104
    720a:	80 83       	st	Z, r24
    720c:	8a e6       	ldi	r24, 0x6A	; 106
    720e:	81 83       	std	Z+1, r24	; 0x01
    7210:	81 e0       	ldi	r24, 0x01	; 1
    7212:	90 e0       	ldi	r25, 0x00	; 0
    7214:	84 83       	std	Z+4, r24	; 0x04
    7216:	95 83       	std	Z+5, r25	; 0x05
    7218:	21 e0       	ldi	r18, 0x01	; 1
    721a:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    721e:	80 87       	std	Z+8, r24	; 0x08
    7220:	91 87       	std	Z+9, r25	; 0x09
    7222:	40 e0       	ldi	r20, 0x00	; 0
    7224:	bf 01       	movw	r22, r30
    7226:	80 ea       	ldi	r24, 0xA0	; 160
    7228:	94 e0       	ldi	r25, 0x04	; 4
    722a:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    722e:	c8 2f       	mov	r28, r24
    7230:	81 11       	cpse	r24, r1
    7232:	35 c0       	rjmp	.+106    	; 0x729e <twi_start+0x8f8>
    7234:	61 e5       	ldi	r22, 0x51	; 81
    7236:	73 ec       	ldi	r23, 0xC3	; 195
    7238:	80 e0       	ldi	r24, 0x00	; 0
    723a:	90 e0       	ldi	r25, 0x00	; 0
    723c:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    7240:	81 e0       	ldi	r24, 0x01	; 1
    7242:	80 93 64 27 	sts	0x2764, r24	; 0x802764 <g_twi1_gyro_valid>
    7246:	84 e5       	ldi	r24, 0x54	; 84
    7248:	91 e3       	ldi	r25, 0x31	; 49
    724a:	9f 93       	push	r25
    724c:	8f 93       	push	r24
    724e:	1f 92       	push	r1
    7250:	10 e4       	ldi	r17, 0x40	; 64
    7252:	1f 93       	push	r17
    7254:	cf e3       	ldi	r28, 0x3F	; 63
    7256:	d5 e2       	ldi	r29, 0x25	; 37
    7258:	df 93       	push	r29
    725a:	cf 93       	push	r28
    725c:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    7260:	ae 01       	movw	r20, r28
    7262:	68 e2       	ldi	r22, 0x28	; 40
    7264:	88 e0       	ldi	r24, 0x08	; 8
    7266:	91 da       	rcall	.-2782   	; 0x678a <task_twi2_lcd_str>
    7268:	89 e9       	ldi	r24, 0x99	; 153
    726a:	91 e3       	ldi	r25, 0x31	; 49
    726c:	9f 93       	push	r25
    726e:	8f 93       	push	r24
    7270:	1f 92       	push	r1
    7272:	1f 93       	push	r17
    7274:	df 93       	push	r29
    7276:	cf 93       	push	r28
    7278:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    727c:	81 34       	cpi	r24, 0x41	; 65
    727e:	91 05       	cpc	r25, r1
    7280:	10 f0       	brcs	.+4      	; 0x7286 <twi_start+0x8e0>
    7282:	80 e4       	ldi	r24, 0x40	; 64
    7284:	90 e0       	ldi	r25, 0x00	; 0
    7286:	40 e0       	ldi	r20, 0x00	; 0
    7288:	68 2f       	mov	r22, r24
    728a:	8f e3       	ldi	r24, 0x3F	; 63
    728c:	95 e2       	ldi	r25, 0x25	; 37
    728e:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    7292:	8d b7       	in	r24, 0x3d	; 61
    7294:	9e b7       	in	r25, 0x3e	; 62
    7296:	0c 96       	adiw	r24, 0x0c	; 12
    7298:	8d bf       	out	0x3d, r24	; 61
    729a:	9e bf       	out	0x3e, r25	; 62
    729c:	23 c0       	rjmp	.+70     	; 0x72e4 <twi_start+0x93e>
    729e:	8c 2f       	mov	r24, r28
    72a0:	0c 2e       	mov	r0, r28
    72a2:	00 0c       	add	r0, r0
    72a4:	99 0b       	sbc	r25, r25
    72a6:	9f 93       	push	r25
    72a8:	cf 93       	push	r28
    72aa:	88 e6       	ldi	r24, 0x68	; 104
    72ac:	91 e3       	ldi	r25, 0x31	; 49
    72ae:	9f 93       	push	r25
    72b0:	8f 93       	push	r24
    72b2:	1f 92       	push	r1
    72b4:	80 e4       	ldi	r24, 0x40	; 64
    72b6:	8f 93       	push	r24
    72b8:	8f e3       	ldi	r24, 0x3F	; 63
    72ba:	95 e2       	ldi	r25, 0x25	; 37
    72bc:	9f 93       	push	r25
    72be:	8f 93       	push	r24
    72c0:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    72c4:	81 34       	cpi	r24, 0x41	; 65
    72c6:	91 05       	cpc	r25, r1
    72c8:	10 f0       	brcs	.+4      	; 0x72ce <twi_start+0x928>
    72ca:	80 e4       	ldi	r24, 0x40	; 64
    72cc:	90 e0       	ldi	r25, 0x00	; 0
    72ce:	40 e0       	ldi	r20, 0x00	; 0
    72d0:	68 2f       	mov	r22, r24
    72d2:	8f e3       	ldi	r24, 0x3F	; 63
    72d4:	95 e2       	ldi	r25, 0x25	; 37
    72d6:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    72da:	ed b7       	in	r30, 0x3d	; 61
    72dc:	fe b7       	in	r31, 0x3e	; 62
    72de:	38 96       	adiw	r30, 0x08	; 8
    72e0:	ed bf       	out	0x3d, r30	; 61
    72e2:	fe bf       	out	0x3e, r31	; 62
    72e4:	1f 92       	push	r1
    72e6:	86 e7       	ldi	r24, 0x76	; 118
    72e8:	8f 93       	push	r24
    72ea:	88 e1       	ldi	r24, 0x18	; 24
    72ec:	91 e3       	ldi	r25, 0x31	; 49
    72ee:	9f 93       	push	r25
    72f0:	8f 93       	push	r24
    72f2:	1f 92       	push	r1
    72f4:	80 e4       	ldi	r24, 0x40	; 64
    72f6:	8f 93       	push	r24
    72f8:	8f e3       	ldi	r24, 0x3F	; 63
    72fa:	95 e2       	ldi	r25, 0x25	; 37
    72fc:	9f 93       	push	r25
    72fe:	8f 93       	push	r24
    7300:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    7304:	81 34       	cpi	r24, 0x41	; 65
    7306:	91 05       	cpc	r25, r1
    7308:	10 f0       	brcs	.+4      	; 0x730e <twi_start+0x968>
    730a:	80 e4       	ldi	r24, 0x40	; 64
    730c:	90 e0       	ldi	r25, 0x00	; 0
    730e:	40 e0       	ldi	r20, 0x00	; 0
    7310:	68 2f       	mov	r22, r24
    7312:	8f e3       	ldi	r24, 0x3F	; 63
    7314:	95 e2       	ldi	r25, 0x25	; 37
    7316:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    731a:	eb e2       	ldi	r30, 0x2B	; 43
    731c:	f0 e2       	ldi	r31, 0x20	; 32
    731e:	86 e7       	ldi	r24, 0x76	; 118
    7320:	80 83       	st	Z, r24
    7322:	8e e1       	ldi	r24, 0x1E	; 30
    7324:	81 83       	std	Z+1, r24	; 0x01
    7326:	81 e0       	ldi	r24, 0x01	; 1
    7328:	90 e0       	ldi	r25, 0x00	; 0
    732a:	84 83       	std	Z+4, r24	; 0x04
    732c:	95 83       	std	Z+5, r25	; 0x05
    732e:	10 86       	std	Z+8, r1	; 0x08
    7330:	11 86       	std	Z+9, r1	; 0x09
    7332:	40 e0       	ldi	r20, 0x00	; 0
    7334:	bf 01       	movw	r22, r30
    7336:	80 ea       	ldi	r24, 0xA0	; 160
    7338:	94 e0       	ldi	r25, 0x04	; 4
    733a:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    733e:	c8 2f       	mov	r28, r24
    7340:	8d b7       	in	r24, 0x3d	; 61
    7342:	9e b7       	in	r25, 0x3e	; 62
    7344:	08 96       	adiw	r24, 0x08	; 8
    7346:	8d bf       	out	0x3d, r24	; 61
    7348:	9e bf       	out	0x3e, r25	; 62
    734a:	c1 11       	cpse	r28, r1
    734c:	04 c1       	rjmp	.+520    	; 0x7556 <twi_start+0xbb0>
    734e:	68 e9       	ldi	r22, 0x98	; 152
    7350:	7a e3       	ldi	r23, 0x3A	; 58
    7352:	80 e0       	ldi	r24, 0x00	; 0
    7354:	90 e0       	ldi	r25, 0x00	; 0
    7356:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    735a:	eb e2       	ldi	r30, 0x2B	; 43
    735c:	f0 e2       	ldi	r31, 0x20	; 32
    735e:	86 e7       	ldi	r24, 0x76	; 118
    7360:	80 83       	st	Z, r24
    7362:	8e ea       	ldi	r24, 0xAE	; 174
    7364:	81 83       	std	Z+1, r24	; 0x01
    7366:	81 e0       	ldi	r24, 0x01	; 1
    7368:	90 e0       	ldi	r25, 0x00	; 0
    736a:	84 83       	std	Z+4, r24	; 0x04
    736c:	95 83       	std	Z+5, r25	; 0x05
    736e:	82 e0       	ldi	r24, 0x02	; 2
    7370:	90 e0       	ldi	r25, 0x00	; 0
    7372:	80 87       	std	Z+8, r24	; 0x08
    7374:	91 87       	std	Z+9, r25	; 0x09
    7376:	41 e0       	ldi	r20, 0x01	; 1
    7378:	bf 01       	movw	r22, r30
    737a:	80 ea       	ldi	r24, 0xA0	; 160
    737c:	94 e0       	ldi	r25, 0x04	; 4
    737e:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    7382:	c8 2f       	mov	r28, r24
    7384:	88 23       	and	r24, r24
    7386:	21 f1       	breq	.+72     	; 0x73d0 <twi_start+0xa2a>
    7388:	8c 2f       	mov	r24, r28
    738a:	0c 2e       	mov	r0, r28
    738c:	00 0c       	add	r0, r0
    738e:	99 0b       	sbc	r25, r25
    7390:	9f 93       	push	r25
    7392:	cf 93       	push	r28
    7394:	83 ee       	ldi	r24, 0xE3	; 227
    7396:	90 e3       	ldi	r25, 0x30	; 48
    7398:	9f 93       	push	r25
    739a:	8f 93       	push	r24
    739c:	1f 92       	push	r1
    739e:	80 e4       	ldi	r24, 0x40	; 64
    73a0:	8f 93       	push	r24
    73a2:	8f e3       	ldi	r24, 0x3F	; 63
    73a4:	95 e2       	ldi	r25, 0x25	; 37
    73a6:	9f 93       	push	r25
    73a8:	8f 93       	push	r24
    73aa:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    73ae:	81 34       	cpi	r24, 0x41	; 65
    73b0:	91 05       	cpc	r25, r1
    73b2:	10 f0       	brcs	.+4      	; 0x73b8 <twi_start+0xa12>
    73b4:	80 e4       	ldi	r24, 0x40	; 64
    73b6:	90 e0       	ldi	r25, 0x00	; 0
    73b8:	40 e0       	ldi	r20, 0x00	; 0
    73ba:	68 2f       	mov	r22, r24
    73bc:	8f e3       	ldi	r24, 0x3F	; 63
    73be:	95 e2       	ldi	r25, 0x25	; 37
    73c0:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    73c4:	ed b7       	in	r30, 0x3d	; 61
    73c6:	fe b7       	in	r31, 0x3e	; 62
    73c8:	38 96       	adiw	r30, 0x08	; 8
    73ca:	ed bf       	out	0x3d, r30	; 61
    73cc:	fe bf       	out	0x3e, r31	; 62
    73ce:	c3 c0       	rjmp	.+390    	; 0x7556 <twi_start+0xbb0>
    73d0:	e7 e3       	ldi	r30, 0x37	; 55
    73d2:	f5 e2       	ldi	r31, 0x25	; 37
    73d4:	80 81       	ld	r24, Z
    73d6:	90 e0       	ldi	r25, 0x00	; 0
    73d8:	98 2f       	mov	r25, r24
    73da:	88 27       	eor	r24, r24
    73dc:	21 81       	ldd	r18, Z+1	; 0x01
    73de:	82 2b       	or	r24, r18
    73e0:	92 95       	swap	r25
    73e2:	82 95       	swap	r24
    73e4:	8f 70       	andi	r24, 0x0F	; 15
    73e6:	89 27       	eor	r24, r25
    73e8:	9f 70       	andi	r25, 0x0F	; 15
    73ea:	89 27       	eor	r24, r25
    73ec:	80 93 26 27 	sts	0x2726, r24	; 0x802726 <g_twi1_baro_version>
    73f0:	90 93 27 27 	sts	0x2727, r25	; 0x802727 <g_twi1_baro_version+0x1>
    73f4:	9f 93       	push	r25
    73f6:	8f 93       	push	r24
    73f8:	8d ea       	ldi	r24, 0xAD	; 173
    73fa:	90 e3       	ldi	r25, 0x30	; 48
    73fc:	9f 93       	push	r25
    73fe:	8f 93       	push	r24
    7400:	1f 92       	push	r1
    7402:	80 e4       	ldi	r24, 0x40	; 64
    7404:	8f 93       	push	r24
    7406:	8f e3       	ldi	r24, 0x3F	; 63
    7408:	95 e2       	ldi	r25, 0x25	; 37
    740a:	9f 93       	push	r25
    740c:	8f 93       	push	r24
    740e:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    7412:	81 34       	cpi	r24, 0x41	; 65
    7414:	91 05       	cpc	r25, r1
    7416:	10 f0       	brcs	.+4      	; 0x741c <twi_start+0xa76>
    7418:	80 e4       	ldi	r24, 0x40	; 64
    741a:	90 e0       	ldi	r25, 0x00	; 0
    741c:	40 e0       	ldi	r20, 0x00	; 0
    741e:	68 2f       	mov	r22, r24
    7420:	8f e3       	ldi	r24, 0x3F	; 63
    7422:	95 e2       	ldi	r25, 0x25	; 37
    7424:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    7428:	0f 2e       	mov	r0, r31
    742a:	f8 e1       	ldi	r31, 0x18	; 24
    742c:	ef 2e       	mov	r14, r31
    742e:	f7 e2       	ldi	r31, 0x27	; 39
    7430:	ff 2e       	mov	r15, r31
    7432:	f0 2d       	mov	r31, r0
    7434:	8d b7       	in	r24, 0x3d	; 61
    7436:	9e b7       	in	r25, 0x3e	; 62
    7438:	08 96       	adiw	r24, 0x08	; 8
    743a:	8d bf       	out	0x3d, r24	; 61
    743c:	9e bf       	out	0x3e, r25	; 62
    743e:	88 24       	eor	r8, r8
    7440:	83 94       	inc	r8
    7442:	91 2c       	mov	r9, r1
    7444:	cb e2       	ldi	r28, 0x2B	; 43
    7446:	d0 e2       	ldi	r29, 0x20	; 32
    7448:	0f 2e       	mov	r0, r31
    744a:	f6 e7       	ldi	r31, 0x76	; 118
    744c:	7f 2e       	mov	r7, r31
    744e:	f0 2d       	mov	r31, r0
    7450:	aa 24       	eor	r10, r10
    7452:	a3 94       	inc	r10
    7454:	b1 2c       	mov	r11, r1
    7456:	68 94       	set
    7458:	cc 24       	eor	r12, r12
    745a:	c1 f8       	bld	r12, 1
    745c:	d1 2c       	mov	r13, r1
    745e:	07 e3       	ldi	r16, 0x37	; 55
    7460:	15 e2       	ldi	r17, 0x25	; 37
    7462:	78 82       	st	Y, r7
    7464:	c4 01       	movw	r24, r8
    7466:	88 0f       	add	r24, r24
    7468:	99 1f       	adc	r25, r25
    746a:	80 6a       	ori	r24, 0xA0	; 160
    746c:	89 83       	std	Y+1, r24	; 0x01
    746e:	ac 82       	std	Y+4, r10	; 0x04
    7470:	bd 82       	std	Y+5, r11	; 0x05
    7472:	c8 86       	std	Y+8, r12	; 0x08
    7474:	d9 86       	std	Y+9, r13	; 0x09
    7476:	41 e0       	ldi	r20, 0x01	; 1
    7478:	be 01       	movw	r22, r28
    747a:	80 ea       	ldi	r24, 0xA0	; 160
    747c:	94 e0       	ldi	r25, 0x04	; 4
    747e:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    7482:	88 23       	and	r24, r24
    7484:	31 f1       	breq	.+76     	; 0x74d2 <twi_start+0xb2c>
    7486:	28 2f       	mov	r18, r24
    7488:	08 2e       	mov	r0, r24
    748a:	00 0c       	add	r0, r0
    748c:	33 0b       	sbc	r19, r19
    748e:	3f 93       	push	r19
    7490:	8f 93       	push	r24
    7492:	9f 92       	push	r9
    7494:	8f 92       	push	r8
    7496:	88 e7       	ldi	r24, 0x78	; 120
    7498:	90 e3       	ldi	r25, 0x30	; 48
    749a:	9f 93       	push	r25
    749c:	8f 93       	push	r24
    749e:	1f 92       	push	r1
    74a0:	80 e4       	ldi	r24, 0x40	; 64
    74a2:	8f 93       	push	r24
    74a4:	8f e3       	ldi	r24, 0x3F	; 63
    74a6:	95 e2       	ldi	r25, 0x25	; 37
    74a8:	9f 93       	push	r25
    74aa:	8f 93       	push	r24
    74ac:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    74b0:	81 34       	cpi	r24, 0x41	; 65
    74b2:	91 05       	cpc	r25, r1
    74b4:	10 f0       	brcs	.+4      	; 0x74ba <twi_start+0xb14>
    74b6:	80 e4       	ldi	r24, 0x40	; 64
    74b8:	90 e0       	ldi	r25, 0x00	; 0
    74ba:	40 e0       	ldi	r20, 0x00	; 0
    74bc:	68 2f       	mov	r22, r24
    74be:	8f e3       	ldi	r24, 0x3F	; 63
    74c0:	95 e2       	ldi	r25, 0x25	; 37
    74c2:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    74c6:	ed b7       	in	r30, 0x3d	; 61
    74c8:	fe b7       	in	r31, 0x3e	; 62
    74ca:	3a 96       	adiw	r30, 0x0a	; 10
    74cc:	ed bf       	out	0x3d, r30	; 61
    74ce:	fe bf       	out	0x3e, r31	; 62
    74d0:	13 c0       	rjmp	.+38     	; 0x74f8 <twi_start+0xb52>
    74d2:	f8 01       	movw	r30, r16
    74d4:	80 81       	ld	r24, Z
    74d6:	90 e0       	ldi	r25, 0x00	; 0
    74d8:	98 2f       	mov	r25, r24
    74da:	88 27       	eor	r24, r24
    74dc:	21 81       	ldd	r18, Z+1	; 0x01
    74de:	82 2b       	or	r24, r18
    74e0:	f7 01       	movw	r30, r14
    74e2:	81 93       	st	Z+, r24
    74e4:	91 93       	st	Z+, r25
    74e6:	7f 01       	movw	r14, r30
    74e8:	ff ef       	ldi	r31, 0xFF	; 255
    74ea:	8f 1a       	sub	r8, r31
    74ec:	9f 0a       	sbc	r9, r31
    74ee:	88 e0       	ldi	r24, 0x08	; 8
    74f0:	88 16       	cp	r8, r24
    74f2:	91 04       	cpc	r9, r1
    74f4:	09 f0       	breq	.+2      	; 0x74f8 <twi_start+0xb52>
    74f6:	b5 cf       	rjmp	.-150    	; 0x7462 <twi_start+0xabc>
    74f8:	81 e0       	ldi	r24, 0x01	; 1
    74fa:	80 93 28 27 	sts	0x2728, r24	; 0x802728 <g_twi1_baro_valid>
    74fe:	85 e1       	ldi	r24, 0x15	; 21
    7500:	90 e3       	ldi	r25, 0x30	; 48
    7502:	9f 93       	push	r25
    7504:	8f 93       	push	r24
    7506:	1f 92       	push	r1
    7508:	10 e4       	ldi	r17, 0x40	; 64
    750a:	1f 93       	push	r17
    750c:	cf e3       	ldi	r28, 0x3F	; 63
    750e:	d5 e2       	ldi	r29, 0x25	; 37
    7510:	df 93       	push	r29
    7512:	cf 93       	push	r28
    7514:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    7518:	ae 01       	movw	r20, r28
    751a:	62 e3       	ldi	r22, 0x32	; 50
    751c:	88 e0       	ldi	r24, 0x08	; 8
    751e:	35 d9       	rcall	.-3478   	; 0x678a <task_twi2_lcd_str>
    7520:	8a e5       	ldi	r24, 0x5A	; 90
    7522:	90 e3       	ldi	r25, 0x30	; 48
    7524:	9f 93       	push	r25
    7526:	8f 93       	push	r24
    7528:	1f 92       	push	r1
    752a:	1f 93       	push	r17
    752c:	df 93       	push	r29
    752e:	cf 93       	push	r28
    7530:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    7534:	81 34       	cpi	r24, 0x41	; 65
    7536:	91 05       	cpc	r25, r1
    7538:	10 f0       	brcs	.+4      	; 0x753e <twi_start+0xb98>
    753a:	80 e4       	ldi	r24, 0x40	; 64
    753c:	90 e0       	ldi	r25, 0x00	; 0
    753e:	40 e0       	ldi	r20, 0x00	; 0
    7540:	68 2f       	mov	r22, r24
    7542:	8f e3       	ldi	r24, 0x3F	; 63
    7544:	95 e2       	ldi	r25, 0x25	; 37
    7546:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    754a:	ed b7       	in	r30, 0x3d	; 61
    754c:	fe b7       	in	r31, 0x3e	; 62
    754e:	3c 96       	adiw	r30, 0x0c	; 12
    7550:	ed bf       	out	0x3d, r30	; 61
    7552:	fe bf       	out	0x3e, r31	; 62
    7554:	23 c0       	rjmp	.+70     	; 0x759c <twi_start+0xbf6>
    7556:	8c 2f       	mov	r24, r28
    7558:	0c 2e       	mov	r0, r28
    755a:	00 0c       	add	r0, r0
    755c:	99 0b       	sbc	r25, r25
    755e:	9f 93       	push	r25
    7560:	cf 93       	push	r28
    7562:	89 e2       	ldi	r24, 0x29	; 41
    7564:	90 e3       	ldi	r25, 0x30	; 48
    7566:	9f 93       	push	r25
    7568:	8f 93       	push	r24
    756a:	1f 92       	push	r1
    756c:	80 e4       	ldi	r24, 0x40	; 64
    756e:	8f 93       	push	r24
    7570:	8f e3       	ldi	r24, 0x3F	; 63
    7572:	95 e2       	ldi	r25, 0x25	; 37
    7574:	9f 93       	push	r25
    7576:	8f 93       	push	r24
    7578:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    757c:	81 34       	cpi	r24, 0x41	; 65
    757e:	91 05       	cpc	r25, r1
    7580:	10 f0       	brcs	.+4      	; 0x7586 <twi_start+0xbe0>
    7582:	80 e4       	ldi	r24, 0x40	; 64
    7584:	90 e0       	ldi	r25, 0x00	; 0
    7586:	40 e0       	ldi	r20, 0x00	; 0
    7588:	68 2f       	mov	r22, r24
    758a:	8f e3       	ldi	r24, 0x3F	; 63
    758c:	95 e2       	ldi	r25, 0x25	; 37
    758e:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    7592:	8d b7       	in	r24, 0x3d	; 61
    7594:	9e b7       	in	r25, 0x3e	; 62
    7596:	08 96       	adiw	r24, 0x08	; 8
    7598:	8d bf       	out	0x3d, r24	; 61
    759a:	9e bf       	out	0x3e, r25	; 62
    759c:	85 e0       	ldi	r24, 0x05	; 5
    759e:	90 e3       	ldi	r25, 0x30	; 48
    75a0:	9f 93       	push	r25
    75a2:	8f 93       	push	r24
    75a4:	1f 92       	push	r1
    75a6:	80 e4       	ldi	r24, 0x40	; 64
    75a8:	8f 93       	push	r24
    75aa:	8f e3       	ldi	r24, 0x3F	; 63
    75ac:	95 e2       	ldi	r25, 0x25	; 37
    75ae:	9f 93       	push	r25
    75b0:	8f 93       	push	r24
    75b2:	0e 94 b9 7d 	call	0xfb72	; 0xfb72 <snprintf_P>
    75b6:	81 34       	cpi	r24, 0x41	; 65
    75b8:	91 05       	cpc	r25, r1
    75ba:	10 f0       	brcs	.+4      	; 0x75c0 <twi_start+0xc1a>
    75bc:	80 e4       	ldi	r24, 0x40	; 64
    75be:	90 e0       	ldi	r25, 0x00	; 0
    75c0:	40 e0       	ldi	r20, 0x00	; 0
    75c2:	68 2f       	mov	r22, r24
    75c4:	8f e3       	ldi	r24, 0x3F	; 63
    75c6:	95 e2       	ldi	r25, 0x25	; 37
    75c8:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <udi_write_tx_buf>
    75cc:	0f 90       	pop	r0
    75ce:	0f 90       	pop	r0
    75d0:	0f 90       	pop	r0
    75d2:	0f 90       	pop	r0
    75d4:	0f 90       	pop	r0
    75d6:	0f 90       	pop	r0
    75d8:	df 91       	pop	r29
    75da:	cf 91       	pop	r28
    75dc:	1f 91       	pop	r17
    75de:	0f 91       	pop	r16
    75e0:	ff 90       	pop	r15
    75e2:	ef 90       	pop	r14
    75e4:	df 90       	pop	r13
    75e6:	cf 90       	pop	r12
    75e8:	bf 90       	pop	r11
    75ea:	af 90       	pop	r10
    75ec:	9f 90       	pop	r9
    75ee:	8f 90       	pop	r8
    75f0:	7f 90       	pop	r7
    75f2:	08 95       	ret

000075f4 <task_twi2_lcd__cpu1>:
PROGMEM_DECLARE(const char, PM_FORMAT_5F3[]);


/* TWI2 - LCD Port */
void task_twi2_lcd__cpu1(uint8_t col_left)
{
    75f4:	df 92       	push	r13
    75f6:	ef 92       	push	r14
    75f8:	ff 92       	push	r15
    75fa:	0f 93       	push	r16
    75fc:	1f 93       	push	r17
    75fe:	cf 93       	push	r28
    7600:	df 93       	push	r29
    7602:	1f 92       	push	r1
    7604:	cd b7       	in	r28, 0x3d	; 61
    7606:	de b7       	in	r29, 0x3e	; 62
    7608:	d8 2e       	mov	r13, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    760a:	8f b7       	in	r24, 0x3f	; 63
    760c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    760e:	f8 94       	cli
	return flags;
    7610:	89 81       	ldd	r24, Y+1	; 0x01
	int16_t l_adc_5v0_volt_1000;

	/* Get up-to-date global data */
	{
		irqflags_t flags			= cpu_irq_save();
		l_adc_temp_deg_100			= g_adc_temp_deg_100;
    7612:	60 91 84 26 	lds	r22, 0x2684	; 0x802684 <g_adc_temp_deg_100>
    7616:	70 91 85 26 	lds	r23, 0x2685	; 0x802685 <g_adc_temp_deg_100+0x1>
		l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    761a:	e0 90 8e 26 	lds	r14, 0x268E	; 0x80268e <g_adc_5v0_volt_1000>
    761e:	f0 90 8f 26 	lds	r15, 0x268F	; 0x80268f <g_adc_5v0_volt_1000+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7622:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
	}

	if (s_adc_temp_deg_100 != l_adc_temp_deg_100) {
    7624:	80 91 27 23 	lds	r24, 0x2327	; 0x802327 <s_adc_temp_deg_100.8100>
    7628:	90 91 28 23 	lds	r25, 0x2328	; 0x802328 <s_adc_temp_deg_100.8100+0x1>
    762c:	68 17       	cp	r22, r24
    762e:	79 07       	cpc	r23, r25
    7630:	b9 f0       	breq	.+46     	; 0x7660 <task_twi2_lcd__cpu1+0x6c>
		s_adc_temp_deg_100 = l_adc_temp_deg_100;
    7632:	60 93 27 23 	sts	0x2327, r22	; 0x802327 <s_adc_temp_deg_100.8100>
    7636:	70 93 28 23 	sts	0x2328, r23	; 0x802328 <s_adc_temp_deg_100.8100+0x1>

		/* ADC_TEMP */
		task_twi2_lcd_print_format_float_P(col_left,  2 * 10, l_adc_temp_deg_100 / 100.f, PM_FORMAT_4F1);
    763a:	07 2e       	mov	r0, r23
    763c:	00 0c       	add	r0, r0
    763e:	88 0b       	sbc	r24, r24
    7640:	99 0b       	sbc	r25, r25
    7642:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    7646:	20 e0       	ldi	r18, 0x00	; 0
    7648:	30 e0       	ldi	r19, 0x00	; 0
    764a:	48 ec       	ldi	r20, 0xC8	; 200
    764c:	52 e4       	ldi	r21, 0x42	; 66
    764e:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    7652:	9b 01       	movw	r18, r22
    7654:	ac 01       	movw	r20, r24
    7656:	01 ef       	ldi	r16, 0xF1	; 241
    7658:	1f e2       	ldi	r17, 0x2F	; 47
    765a:	64 e1       	ldi	r22, 0x14	; 20
    765c:	8d 2d       	mov	r24, r13
    765e:	57 d8       	rcall	.-3922   	; 0x670e <task_twi2_lcd_print_format_float_P>
	}

	if (s_adc_5v0_volt_1000 != l_adc_5v0_volt_1000) {
    7660:	80 91 25 23 	lds	r24, 0x2325	; 0x802325 <s_adc_5v0_volt_1000.8101>
    7664:	90 91 26 23 	lds	r25, 0x2326	; 0x802326 <s_adc_5v0_volt_1000.8101+0x1>
    7668:	e8 16       	cp	r14, r24
    766a:	f9 06       	cpc	r15, r25
    766c:	b9 f0       	breq	.+46     	; 0x769c <task_twi2_lcd__cpu1+0xa8>
		s_adc_5v0_volt_1000 = l_adc_5v0_volt_1000;
    766e:	e0 92 25 23 	sts	0x2325, r14	; 0x802325 <s_adc_5v0_volt_1000.8101>
    7672:	f0 92 26 23 	sts	0x2326, r15	; 0x802326 <s_adc_5v0_volt_1000.8101+0x1>

		/* ADC_5V0 */
		task_twi2_lcd_print_format_float_P(col_left,  3 * 10, l_adc_5v0_volt_1000 / 1000.f, PM_FORMAT_5F3);
    7676:	b7 01       	movw	r22, r14
    7678:	ff 0c       	add	r15, r15
    767a:	88 0b       	sbc	r24, r24
    767c:	99 0b       	sbc	r25, r25
    767e:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    7682:	20 e0       	ldi	r18, 0x00	; 0
    7684:	30 e0       	ldi	r19, 0x00	; 0
    7686:	4a e7       	ldi	r20, 0x7A	; 122
    7688:	54 e4       	ldi	r21, 0x44	; 68
    768a:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    768e:	9b 01       	movw	r18, r22
    7690:	ac 01       	movw	r20, r24
    7692:	0b ee       	ldi	r16, 0xEB	; 235
    7694:	1f e2       	ldi	r17, 0x2F	; 47
    7696:	6e e1       	ldi	r22, 0x1E	; 30
    7698:	8d 2d       	mov	r24, r13
    769a:	39 d8       	rcall	.-3982   	; 0x670e <task_twi2_lcd_print_format_float_P>
	}
}
    769c:	0f 90       	pop	r0
    769e:	df 91       	pop	r29
    76a0:	cf 91       	pop	r28
    76a2:	1f 91       	pop	r17
    76a4:	0f 91       	pop	r16
    76a6:	ff 90       	pop	r15
    76a8:	ef 90       	pop	r14
    76aa:	df 90       	pop	r13
    76ac:	08 95       	ret

000076ae <task_twi2_lcd__cpu2>:
	delay_ms(50);
}
#endif

void task_twi2_lcd_cls(void)
{
    76ae:	df 92       	push	r13
    76b0:	ef 92       	push	r14
    76b2:	ff 92       	push	r15
    76b4:	0f 93       	push	r16
    76b6:	1f 93       	push	r17
    76b8:	cf 93       	push	r28
    76ba:	df 93       	push	r29
    76bc:	1f 92       	push	r1
    76be:	cd b7       	in	r28, 0x3d	; 61
    76c0:	de b7       	in	r29, 0x3e	; 62
    76c2:	d8 2e       	mov	r13, r24
    76c4:	8f b7       	in	r24, 0x3f	; 63
    76c6:	89 83       	std	Y+1, r24	; 0x01
    76c8:	f8 94       	cli
    76ca:	89 81       	ldd	r24, Y+1	; 0x01
    76cc:	60 91 8c 26 	lds	r22, 0x268C	; 0x80268c <g_adc_vbat_volt_1000>
    76d0:	70 91 8d 26 	lds	r23, 0x268D	; 0x80268d <g_adc_vbat_volt_1000+0x1>
    76d4:	e0 90 90 26 	lds	r14, 0x2690	; 0x802690 <g_adc_vctcxo_volt_1000>
    76d8:	f0 90 91 26 	lds	r15, 0x2691	; 0x802691 <g_adc_vctcxo_volt_1000+0x1>
    76dc:	8f bf       	out	0x3f, r24	; 63
    76de:	80 91 23 23 	lds	r24, 0x2323	; 0x802323 <s_adc_vbat_volt_1000.8108>
    76e2:	90 91 24 23 	lds	r25, 0x2324	; 0x802324 <s_adc_vbat_volt_1000.8108+0x1>
    76e6:	68 17       	cp	r22, r24
    76e8:	79 07       	cpc	r23, r25
    76ea:	c1 f0       	breq	.+48     	; 0x771c <task_twi2_lcd__cpu2+0x6e>
    76ec:	60 93 23 23 	sts	0x2323, r22	; 0x802323 <s_adc_vbat_volt_1000.8108>
    76f0:	70 93 24 23 	sts	0x2324, r23	; 0x802324 <s_adc_vbat_volt_1000.8108+0x1>
    76f4:	07 2e       	mov	r0, r23
    76f6:	00 0c       	add	r0, r0
    76f8:	88 0b       	sbc	r24, r24
    76fa:	99 0b       	sbc	r25, r25
    76fc:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    7700:	20 e0       	ldi	r18, 0x00	; 0
    7702:	30 e0       	ldi	r19, 0x00	; 0
    7704:	4a e7       	ldi	r20, 0x7A	; 122
    7706:	54 e4       	ldi	r21, 0x44	; 68
    7708:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    770c:	9b 01       	movw	r18, r22
    770e:	ac 01       	movw	r20, r24
    7710:	0b ee       	ldi	r16, 0xEB	; 235
    7712:	1f e2       	ldi	r17, 0x2F	; 47
    7714:	68 e2       	ldi	r22, 0x28	; 40
    7716:	8d 2d       	mov	r24, r13
    7718:	0e 94 87 33 	call	0x670e	; 0x670e <task_twi2_lcd_print_format_float_P>
    771c:	80 91 21 23 	lds	r24, 0x2321	; 0x802321 <s_adc_vctcxo_volt_1000.8109>
    7720:	90 91 22 23 	lds	r25, 0x2322	; 0x802322 <s_adc_vctcxo_volt_1000.8109+0x1>
    7724:	e8 16       	cp	r14, r24
    7726:	f9 06       	cpc	r15, r25
    7728:	c1 f0       	breq	.+48     	; 0x775a <task_twi2_lcd__cpu2+0xac>
    772a:	e0 92 21 23 	sts	0x2321, r14	; 0x802321 <s_adc_vctcxo_volt_1000.8109>
    772e:	f0 92 22 23 	sts	0x2322, r15	; 0x802322 <s_adc_vctcxo_volt_1000.8109+0x1>
    7732:	b7 01       	movw	r22, r14
    7734:	ff 0c       	add	r15, r15
    7736:	88 0b       	sbc	r24, r24
    7738:	99 0b       	sbc	r25, r25
    773a:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    773e:	20 e0       	ldi	r18, 0x00	; 0
    7740:	30 e0       	ldi	r19, 0x00	; 0
    7742:	4a e7       	ldi	r20, 0x7A	; 122
    7744:	54 e4       	ldi	r21, 0x44	; 68
    7746:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    774a:	9b 01       	movw	r18, r22
    774c:	ac 01       	movw	r20, r24
    774e:	0b ee       	ldi	r16, 0xEB	; 235
    7750:	1f e2       	ldi	r17, 0x2F	; 47
    7752:	62 e3       	ldi	r22, 0x32	; 50
    7754:	8d 2d       	mov	r24, r13
    7756:	0e 94 87 33 	call	0x670e	; 0x670e <task_twi2_lcd_print_format_float_P>
    775a:	0f 90       	pop	r0
    775c:	df 91       	pop	r29
    775e:	cf 91       	pop	r28
    7760:	1f 91       	pop	r17
    7762:	0f 91       	pop	r16
    7764:	ff 90       	pop	r15
    7766:	ef 90       	pop	r14
    7768:	df 90       	pop	r13
    776a:	08 95       	ret

0000776c <task_twi2_lcd__cpu3>:
    776c:	df 92       	push	r13
    776e:	ef 92       	push	r14
    7770:	ff 92       	push	r15
    7772:	0f 93       	push	r16
    7774:	1f 93       	push	r17
    7776:	cf 93       	push	r28
    7778:	df 93       	push	r29
    777a:	1f 92       	push	r1
    777c:	cd b7       	in	r28, 0x3d	; 61
    777e:	de b7       	in	r29, 0x3e	; 62
    7780:	d8 2e       	mov	r13, r24
    7782:	8f b7       	in	r24, 0x3f	; 63
    7784:	89 83       	std	Y+1, r24	; 0x01
    7786:	f8 94       	cli
    7788:	89 81       	ldd	r24, Y+1	; 0x01
    778a:	60 91 8a 26 	lds	r22, 0x268A	; 0x80268a <g_adc_io_adc4_volt_1000>
    778e:	70 91 8b 26 	lds	r23, 0x268B	; 0x80268b <g_adc_io_adc4_volt_1000+0x1>
    7792:	e0 90 88 26 	lds	r14, 0x2688	; 0x802688 <g_adc_io_adc5_volt_1000>
    7796:	f0 90 89 26 	lds	r15, 0x2689	; 0x802689 <g_adc_io_adc5_volt_1000+0x1>
    779a:	8f bf       	out	0x3f, r24	; 63
    779c:	80 91 1f 23 	lds	r24, 0x231F	; 0x80231f <s_adc_io_adc4_volt_1000.8116>
    77a0:	90 91 20 23 	lds	r25, 0x2320	; 0x802320 <s_adc_io_adc4_volt_1000.8116+0x1>
    77a4:	68 17       	cp	r22, r24
    77a6:	79 07       	cpc	r23, r25
    77a8:	c1 f0       	breq	.+48     	; 0x77da <task_twi2_lcd__cpu3+0x6e>
    77aa:	60 93 1f 23 	sts	0x231F, r22	; 0x80231f <s_adc_io_adc4_volt_1000.8116>
    77ae:	70 93 20 23 	sts	0x2320, r23	; 0x802320 <s_adc_io_adc4_volt_1000.8116+0x1>
    77b2:	07 2e       	mov	r0, r23
    77b4:	00 0c       	add	r0, r0
    77b6:	88 0b       	sbc	r24, r24
    77b8:	99 0b       	sbc	r25, r25
    77ba:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    77be:	20 e0       	ldi	r18, 0x00	; 0
    77c0:	30 e0       	ldi	r19, 0x00	; 0
    77c2:	4a e7       	ldi	r20, 0x7A	; 122
    77c4:	54 e4       	ldi	r21, 0x44	; 68
    77c6:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    77ca:	9b 01       	movw	r18, r22
    77cc:	ac 01       	movw	r20, r24
    77ce:	0b ee       	ldi	r16, 0xEB	; 235
    77d0:	1f e2       	ldi	r17, 0x2F	; 47
    77d2:	6c e3       	ldi	r22, 0x3C	; 60
    77d4:	8d 2d       	mov	r24, r13
    77d6:	0e 94 87 33 	call	0x670e	; 0x670e <task_twi2_lcd_print_format_float_P>
    77da:	80 91 1d 23 	lds	r24, 0x231D	; 0x80231d <s_adc_io_adc5_volt_1000.8117>
    77de:	90 91 1e 23 	lds	r25, 0x231E	; 0x80231e <s_adc_io_adc5_volt_1000.8117+0x1>
    77e2:	e8 16       	cp	r14, r24
    77e4:	f9 06       	cpc	r15, r25
    77e6:	c1 f0       	breq	.+48     	; 0x7818 <task_twi2_lcd__cpu3+0xac>
    77e8:	e0 92 1d 23 	sts	0x231D, r14	; 0x80231d <s_adc_io_adc5_volt_1000.8117>
    77ec:	f0 92 1e 23 	sts	0x231E, r15	; 0x80231e <s_adc_io_adc5_volt_1000.8117+0x1>
    77f0:	b7 01       	movw	r22, r14
    77f2:	ff 0c       	add	r15, r15
    77f4:	88 0b       	sbc	r24, r24
    77f6:	99 0b       	sbc	r25, r25
    77f8:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    77fc:	20 e0       	ldi	r18, 0x00	; 0
    77fe:	30 e0       	ldi	r19, 0x00	; 0
    7800:	4a e7       	ldi	r20, 0x7A	; 122
    7802:	54 e4       	ldi	r21, 0x44	; 68
    7804:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    7808:	9b 01       	movw	r18, r22
    780a:	ac 01       	movw	r20, r24
    780c:	0b ee       	ldi	r16, 0xEB	; 235
    780e:	1f e2       	ldi	r17, 0x2F	; 47
    7810:	66 e4       	ldi	r22, 0x46	; 70
    7812:	8d 2d       	mov	r24, r13
    7814:	0e 94 87 33 	call	0x670e	; 0x670e <task_twi2_lcd_print_format_float_P>
    7818:	0f 90       	pop	r0
    781a:	df 91       	pop	r29
    781c:	cf 91       	pop	r28
    781e:	1f 91       	pop	r17
    7820:	0f 91       	pop	r16
    7822:	ff 90       	pop	r15
    7824:	ef 90       	pop	r14
    7826:	df 90       	pop	r13
    7828:	08 95       	ret

0000782a <task_twi2_lcd__hygro>:
    782a:	df 92       	push	r13
    782c:	ef 92       	push	r14
    782e:	ff 92       	push	r15
    7830:	0f 93       	push	r16
    7832:	1f 93       	push	r17
    7834:	cf 93       	push	r28
    7836:	df 93       	push	r29
    7838:	1f 92       	push	r1
    783a:	cd b7       	in	r28, 0x3d	; 61
    783c:	de b7       	in	r29, 0x3e	; 62
    783e:	d8 2e       	mov	r13, r24
    7840:	8f b7       	in	r24, 0x3f	; 63
    7842:	89 83       	std	Y+1, r24	; 0x01
    7844:	f8 94       	cli
    7846:	89 81       	ldd	r24, Y+1	; 0x01
    7848:	60 91 fe 26 	lds	r22, 0x26FE	; 0x8026fe <g_twi1_hygro_T_100>
    784c:	70 91 ff 26 	lds	r23, 0x26FF	; 0x8026ff <g_twi1_hygro_T_100+0x1>
    7850:	e0 90 fc 26 	lds	r14, 0x26FC	; 0x8026fc <g_twi1_hygro_RH_100>
    7854:	f0 90 fd 26 	lds	r15, 0x26FD	; 0x8026fd <g_twi1_hygro_RH_100+0x1>
    7858:	8f bf       	out	0x3f, r24	; 63
    785a:	80 91 1b 23 	lds	r24, 0x231B	; 0x80231b <s_twi1_hygro_T_100.8124>
    785e:	90 91 1c 23 	lds	r25, 0x231C	; 0x80231c <s_twi1_hygro_T_100.8124+0x1>
    7862:	68 17       	cp	r22, r24
    7864:	79 07       	cpc	r23, r25
    7866:	c1 f0       	breq	.+48     	; 0x7898 <task_twi2_lcd__hygro+0x6e>
    7868:	60 93 1b 23 	sts	0x231B, r22	; 0x80231b <s_twi1_hygro_T_100.8124>
    786c:	70 93 1c 23 	sts	0x231C, r23	; 0x80231c <s_twi1_hygro_T_100.8124+0x1>
    7870:	07 2e       	mov	r0, r23
    7872:	00 0c       	add	r0, r0
    7874:	88 0b       	sbc	r24, r24
    7876:	99 0b       	sbc	r25, r25
    7878:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    787c:	20 e0       	ldi	r18, 0x00	; 0
    787e:	30 e0       	ldi	r19, 0x00	; 0
    7880:	48 ec       	ldi	r20, 0xC8	; 200
    7882:	52 e4       	ldi	r21, 0x42	; 66
    7884:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    7888:	9b 01       	movw	r18, r22
    788a:	ac 01       	movw	r20, r24
    788c:	0e ef       	ldi	r16, 0xFE	; 254
    788e:	1f e2       	ldi	r17, 0x2F	; 47
    7890:	6e e6       	ldi	r22, 0x6E	; 110
    7892:	8d 2d       	mov	r24, r13
    7894:	0e 94 87 33 	call	0x670e	; 0x670e <task_twi2_lcd_print_format_float_P>
    7898:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <s_twi1_hygro_RH_100.8125>
    789c:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <s_twi1_hygro_RH_100.8125+0x1>
    78a0:	e8 16       	cp	r14, r24
    78a2:	f9 06       	cpc	r15, r25
    78a4:	c1 f0       	breq	.+48     	; 0x78d6 <task_twi2_lcd__hygro+0xac>
    78a6:	e0 92 19 23 	sts	0x2319, r14	; 0x802319 <s_twi1_hygro_RH_100.8125>
    78aa:	f0 92 1a 23 	sts	0x231A, r15	; 0x80231a <s_twi1_hygro_RH_100.8125+0x1>
    78ae:	b7 01       	movw	r22, r14
    78b0:	ff 0c       	add	r15, r15
    78b2:	88 0b       	sbc	r24, r24
    78b4:	99 0b       	sbc	r25, r25
    78b6:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    78ba:	20 e0       	ldi	r18, 0x00	; 0
    78bc:	30 e0       	ldi	r19, 0x00	; 0
    78be:	48 ec       	ldi	r20, 0xC8	; 200
    78c0:	52 e4       	ldi	r21, 0x42	; 66
    78c2:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    78c6:	9b 01       	movw	r18, r22
    78c8:	ac 01       	movw	r20, r24
    78ca:	0e ef       	ldi	r16, 0xFE	; 254
    78cc:	1f e2       	ldi	r17, 0x2F	; 47
    78ce:	68 e7       	ldi	r22, 0x78	; 120
    78d0:	8d 2d       	mov	r24, r13
    78d2:	0e 94 87 33 	call	0x670e	; 0x670e <task_twi2_lcd_print_format_float_P>
    78d6:	0f 90       	pop	r0
    78d8:	df 91       	pop	r29
    78da:	cf 91       	pop	r28
    78dc:	1f 91       	pop	r17
    78de:	0f 91       	pop	r16
    78e0:	ff 90       	pop	r15
    78e2:	ef 90       	pop	r14
    78e4:	df 90       	pop	r13
    78e6:	08 95       	ret

000078e8 <task_twi2_lcd__gyro_gfxmag>:
    78e8:	2f 92       	push	r2
    78ea:	3f 92       	push	r3
    78ec:	4f 92       	push	r4
    78ee:	5f 92       	push	r5
    78f0:	6f 92       	push	r6
    78f2:	7f 92       	push	r7
    78f4:	8f 92       	push	r8
    78f6:	9f 92       	push	r9
    78f8:	af 92       	push	r10
    78fa:	bf 92       	push	r11
    78fc:	cf 92       	push	r12
    78fe:	df 92       	push	r13
    7900:	ef 92       	push	r14
    7902:	ff 92       	push	r15
    7904:	0f 93       	push	r16
    7906:	1f 93       	push	r17
    7908:	cf 93       	push	r28
    790a:	df 93       	push	r29
    790c:	cd b7       	in	r28, 0x3d	; 61
    790e:	de b7       	in	r29, 0x3e	; 62
    7910:	2d 97       	sbiw	r28, 0x0d	; 13
    7912:	cd bf       	out	0x3d, r28	; 61
    7914:	de bf       	out	0x3e, r29	; 62
    7916:	8f b7       	in	r24, 0x3f	; 63
    7918:	89 83       	std	Y+1, r24	; 0x01
    791a:	f8 94       	cli
    791c:	89 81       	ldd	r24, Y+1	; 0x01
    791e:	80 90 31 27 	lds	r8, 0x2731	; 0x802731 <g_twi1_gyro_2_mag_x_nT>
    7922:	90 90 32 27 	lds	r9, 0x2732	; 0x802732 <g_twi1_gyro_2_mag_x_nT+0x1>
    7926:	a0 90 33 27 	lds	r10, 0x2733	; 0x802733 <g_twi1_gyro_2_mag_x_nT+0x2>
    792a:	b0 90 34 27 	lds	r11, 0x2734	; 0x802734 <g_twi1_gyro_2_mag_x_nT+0x3>
    792e:	40 90 2d 27 	lds	r4, 0x272D	; 0x80272d <g_twi1_gyro_2_mag_y_nT>
    7932:	50 90 2e 27 	lds	r5, 0x272E	; 0x80272e <g_twi1_gyro_2_mag_y_nT+0x1>
    7936:	60 90 2f 27 	lds	r6, 0x272F	; 0x80272f <g_twi1_gyro_2_mag_y_nT+0x2>
    793a:	70 90 30 27 	lds	r7, 0x2730	; 0x802730 <g_twi1_gyro_2_mag_y_nT+0x3>
    793e:	20 91 29 27 	lds	r18, 0x2729	; 0x802729 <g_twi1_gyro_2_mag_z_nT>
    7942:	30 91 2a 27 	lds	r19, 0x272A	; 0x80272a <g_twi1_gyro_2_mag_z_nT+0x1>
    7946:	40 91 2b 27 	lds	r20, 0x272B	; 0x80272b <g_twi1_gyro_2_mag_z_nT+0x2>
    794a:	50 91 2c 27 	lds	r21, 0x272C	; 0x80272c <g_twi1_gyro_2_mag_z_nT+0x3>
    794e:	2a 87       	std	Y+10, r18	; 0x0a
    7950:	3b 87       	std	Y+11, r19	; 0x0b
    7952:	4c 87       	std	Y+12, r20	; 0x0c
    7954:	5d 87       	std	Y+13, r21	; 0x0d
    7956:	8f bf       	out	0x3f, r24	; 63
    7958:	80 91 15 23 	lds	r24, 0x2315	; 0x802315 <s_twi1_gyro_2_mag_x_nT.8136>
    795c:	90 91 16 23 	lds	r25, 0x2316	; 0x802316 <s_twi1_gyro_2_mag_x_nT.8136+0x1>
    7960:	a0 91 17 23 	lds	r26, 0x2317	; 0x802317 <s_twi1_gyro_2_mag_x_nT.8136+0x2>
    7964:	b0 91 18 23 	lds	r27, 0x2318	; 0x802318 <s_twi1_gyro_2_mag_x_nT.8136+0x3>
    7968:	88 16       	cp	r8, r24
    796a:	99 06       	cpc	r9, r25
    796c:	aa 06       	cpc	r10, r26
    796e:	bb 06       	cpc	r11, r27
    7970:	d9 f4       	brne	.+54     	; 0x79a8 <task_twi2_lcd__gyro_gfxmag+0xc0>
    7972:	80 91 11 23 	lds	r24, 0x2311	; 0x802311 <s_twi1_gyro_2_mag_y_nT.8137>
    7976:	90 91 12 23 	lds	r25, 0x2312	; 0x802312 <s_twi1_gyro_2_mag_y_nT.8137+0x1>
    797a:	a0 91 13 23 	lds	r26, 0x2313	; 0x802313 <s_twi1_gyro_2_mag_y_nT.8137+0x2>
    797e:	b0 91 14 23 	lds	r27, 0x2314	; 0x802314 <s_twi1_gyro_2_mag_y_nT.8137+0x3>
    7982:	48 16       	cp	r4, r24
    7984:	59 06       	cpc	r5, r25
    7986:	6a 06       	cpc	r6, r26
    7988:	7b 06       	cpc	r7, r27
    798a:	71 f4       	brne	.+28     	; 0x79a8 <task_twi2_lcd__gyro_gfxmag+0xc0>
    798c:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <s_twi1_gyro_2_mag_z_nT.8138>
    7990:	90 91 0e 23 	lds	r25, 0x230E	; 0x80230e <s_twi1_gyro_2_mag_z_nT.8138+0x1>
    7994:	a0 91 0f 23 	lds	r26, 0x230F	; 0x80230f <s_twi1_gyro_2_mag_z_nT.8138+0x2>
    7998:	b0 91 10 23 	lds	r27, 0x2310	; 0x802310 <s_twi1_gyro_2_mag_z_nT.8138+0x3>
    799c:	28 17       	cp	r18, r24
    799e:	39 07       	cpc	r19, r25
    79a0:	4a 07       	cpc	r20, r26
    79a2:	5b 07       	cpc	r21, r27
    79a4:	09 f4       	brne	.+2      	; 0x79a8 <task_twi2_lcd__gyro_gfxmag+0xc0>
    79a6:	9b c1       	rjmp	.+822    	; 0x7cde <task_twi2_lcd__gyro_gfxmag+0x3f6>
    79a8:	80 92 15 23 	sts	0x2315, r8	; 0x802315 <s_twi1_gyro_2_mag_x_nT.8136>
    79ac:	90 92 16 23 	sts	0x2316, r9	; 0x802316 <s_twi1_gyro_2_mag_x_nT.8136+0x1>
    79b0:	a0 92 17 23 	sts	0x2317, r10	; 0x802317 <s_twi1_gyro_2_mag_x_nT.8136+0x2>
    79b4:	b0 92 18 23 	sts	0x2318, r11	; 0x802318 <s_twi1_gyro_2_mag_x_nT.8136+0x3>
    79b8:	40 92 11 23 	sts	0x2311, r4	; 0x802311 <s_twi1_gyro_2_mag_y_nT.8137>
    79bc:	50 92 12 23 	sts	0x2312, r5	; 0x802312 <s_twi1_gyro_2_mag_y_nT.8137+0x1>
    79c0:	60 92 13 23 	sts	0x2313, r6	; 0x802313 <s_twi1_gyro_2_mag_y_nT.8137+0x2>
    79c4:	70 92 14 23 	sts	0x2314, r7	; 0x802314 <s_twi1_gyro_2_mag_y_nT.8137+0x3>
    79c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    79ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    79cc:	ac 85       	ldd	r26, Y+12	; 0x0c
    79ce:	bd 85       	ldd	r27, Y+13	; 0x0d
    79d0:	80 93 0d 23 	sts	0x230D, r24	; 0x80230d <s_twi1_gyro_2_mag_z_nT.8138>
    79d4:	90 93 0e 23 	sts	0x230E, r25	; 0x80230e <s_twi1_gyro_2_mag_z_nT.8138+0x1>
    79d8:	a0 93 0f 23 	sts	0x230F, r26	; 0x80230f <s_twi1_gyro_2_mag_z_nT.8138+0x2>
    79dc:	b0 93 10 23 	sts	0x2310, r27	; 0x802310 <s_twi1_gyro_2_mag_z_nT.8138+0x3>
    79e0:	20 e0       	ldi	r18, 0x00	; 0
    79e2:	30 e8       	ldi	r19, 0x80	; 128
    79e4:	4b e3       	ldi	r20, 0x3B	; 59
    79e6:	55 e4       	ldi	r21, 0x45	; 69
    79e8:	60 91 09 23 	lds	r22, 0x2309	; 0x802309 <s_length.8139>
    79ec:	70 91 0a 23 	lds	r23, 0x230A	; 0x80230a <s_length.8139+0x1>
    79f0:	80 91 0b 23 	lds	r24, 0x230B	; 0x80230b <s_length.8139+0x2>
    79f4:	90 91 0c 23 	lds	r25, 0x230C	; 0x80230c <s_length.8139+0x3>
    79f8:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    79fc:	6b 01       	movw	r12, r22
    79fe:	7c 01       	movw	r14, r24
    7a00:	0e 94 82 76 	call	0xed04	; 0xed04 <__fixunssfsi>
    7a04:	16 2f       	mov	r17, r22
    7a06:	a7 01       	movw	r20, r14
    7a08:	96 01       	movw	r18, r12
    7a0a:	60 e0       	ldi	r22, 0x00	; 0
    7a0c:	70 e0       	ldi	r23, 0x00	; 0
    7a0e:	80 e8       	ldi	r24, 0x80	; 128
    7a10:	92 e4       	ldi	r25, 0x42	; 66
    7a12:	0e 94 a9 75 	call	0xeb52	; 0xeb52 <__subsf3>
    7a16:	0e 94 82 76 	call	0xed04	; 0xed04 <__fixunssfsi>
    7a1a:	e1 2c       	mov	r14, r1
    7a1c:	01 e0       	ldi	r16, 0x01	; 1
    7a1e:	21 2f       	mov	r18, r17
    7a20:	43 e0       	ldi	r20, 0x03	; 3
    7a22:	82 e7       	ldi	r24, 0x72	; 114
    7a24:	0e 94 54 34 	call	0x68a8	; 0x68a8 <task_twi2_lcd_rect>
    7a28:	20 91 08 23 	lds	r18, 0x2308	; 0x802308 <s_p1y.8141>
    7a2c:	28 5d       	subi	r18, 0xD8	; 216
    7a2e:	40 91 07 23 	lds	r20, 0x2307	; 0x802307 <s_p1x.8140>
    7a32:	4a 56       	subi	r20, 0x6A	; 106
    7a34:	00 e0       	ldi	r16, 0x00	; 0
    7a36:	68 e2       	ldi	r22, 0x28	; 40
    7a38:	86 e9       	ldi	r24, 0x96	; 150
    7a3a:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    7a3e:	20 91 06 23 	lds	r18, 0x2306	; 0x802306 <s_p2y.8143>
    7a42:	28 5d       	subi	r18, 0xD8	; 216
    7a44:	40 91 05 23 	lds	r20, 0x2305	; 0x802305 <s_p2x.8142>
    7a48:	4a 56       	subi	r20, 0x6A	; 106
    7a4a:	60 91 08 23 	lds	r22, 0x2308	; 0x802308 <s_p1y.8141>
    7a4e:	68 5d       	subi	r22, 0xD8	; 216
    7a50:	80 91 07 23 	lds	r24, 0x2307	; 0x802307 <s_p1x.8140>
    7a54:	8a 56       	subi	r24, 0x6A	; 106
    7a56:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    7a5a:	20 91 04 23 	lds	r18, 0x2304	; 0x802304 <s_p3y.8145>
    7a5e:	28 5d       	subi	r18, 0xD8	; 216
    7a60:	40 91 03 23 	lds	r20, 0x2303	; 0x802303 <s_p3x.8144>
    7a64:	4a 56       	subi	r20, 0x6A	; 106
    7a66:	60 91 06 23 	lds	r22, 0x2306	; 0x802306 <s_p2y.8143>
    7a6a:	68 5d       	subi	r22, 0xD8	; 216
    7a6c:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <s_p2x.8142>
    7a70:	8a 56       	subi	r24, 0x6A	; 106
    7a72:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    7a76:	01 e0       	ldi	r16, 0x01	; 1
    7a78:	21 e0       	ldi	r18, 0x01	; 1
    7a7a:	41 e0       	ldi	r20, 0x01	; 1
    7a7c:	68 e2       	ldi	r22, 0x28	; 40
    7a7e:	86 e9       	ldi	r24, 0x96	; 150
    7a80:	0e 94 82 34 	call	0x6904	; 0x6904 <task_twi2_lcd_circ>
    7a84:	c5 01       	movw	r24, r10
    7a86:	b4 01       	movw	r22, r8
    7a88:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    7a8c:	6a 83       	std	Y+2, r22	; 0x02
    7a8e:	7b 83       	std	Y+3, r23	; 0x03
    7a90:	8c 83       	std	Y+4, r24	; 0x04
    7a92:	9d 83       	std	Y+5, r25	; 0x05
    7a94:	c3 01       	movw	r24, r6
    7a96:	b2 01       	movw	r22, r4
    7a98:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    7a9c:	6e 83       	std	Y+6, r22	; 0x06
    7a9e:	7f 83       	std	Y+7, r23	; 0x07
    7aa0:	88 87       	std	Y+8, r24	; 0x08
    7aa2:	99 87       	std	Y+9, r25	; 0x09
    7aa4:	6a 85       	ldd	r22, Y+10	; 0x0a
    7aa6:	7b 85       	ldd	r23, Y+11	; 0x0b
    7aa8:	8c 85       	ldd	r24, Y+12	; 0x0c
    7aaa:	9d 85       	ldd	r25, Y+13	; 0x0d
    7aac:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    7ab0:	6b 01       	movw	r12, r22
    7ab2:	7c 01       	movw	r14, r24
    7ab4:	2a 81       	ldd	r18, Y+2	; 0x02
    7ab6:	3b 81       	ldd	r19, Y+3	; 0x03
    7ab8:	4c 81       	ldd	r20, Y+4	; 0x04
    7aba:	5d 81       	ldd	r21, Y+5	; 0x05
    7abc:	ca 01       	movw	r24, r20
    7abe:	b9 01       	movw	r22, r18
    7ac0:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    7ac4:	4b 01       	movw	r8, r22
    7ac6:	5c 01       	movw	r10, r24
    7ac8:	2e 81       	ldd	r18, Y+6	; 0x06
    7aca:	3f 81       	ldd	r19, Y+7	; 0x07
    7acc:	48 85       	ldd	r20, Y+8	; 0x08
    7ace:	59 85       	ldd	r21, Y+9	; 0x09
    7ad0:	ca 01       	movw	r24, r20
    7ad2:	b9 01       	movw	r22, r18
    7ad4:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    7ad8:	9b 01       	movw	r18, r22
    7ada:	ac 01       	movw	r20, r24
    7adc:	c5 01       	movw	r24, r10
    7ade:	b4 01       	movw	r22, r8
    7ae0:	0e 94 aa 75 	call	0xeb54	; 0xeb54 <__addsf3>
    7ae4:	4b 01       	movw	r8, r22
    7ae6:	5c 01       	movw	r10, r24
    7ae8:	a7 01       	movw	r20, r14
    7aea:	96 01       	movw	r18, r12
    7aec:	c7 01       	movw	r24, r14
    7aee:	b6 01       	movw	r22, r12
    7af0:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    7af4:	9b 01       	movw	r18, r22
    7af6:	ac 01       	movw	r20, r24
    7af8:	c5 01       	movw	r24, r10
    7afa:	b4 01       	movw	r22, r8
    7afc:	0e 94 aa 75 	call	0xeb54	; 0xeb54 <__addsf3>
    7b00:	20 e0       	ldi	r18, 0x00	; 0
    7b02:	30 e0       	ldi	r19, 0x00	; 0
    7b04:	40 e0       	ldi	r20, 0x00	; 0
    7b06:	5f e3       	ldi	r21, 0x3F	; 63
    7b08:	0e 94 00 78 	call	0xf000	; 0xf000 <pow>
    7b0c:	96 2e       	mov	r9, r22
    7b0e:	a7 2e       	mov	r10, r23
    7b10:	78 2e       	mov	r7, r24
    7b12:	69 2e       	mov	r6, r25
    7b14:	20 e0       	ldi	r18, 0x00	; 0
    7b16:	30 e0       	ldi	r19, 0x00	; 0
    7b18:	a9 01       	movw	r20, r18
    7b1a:	0e 94 0e 76 	call	0xec1c	; 0xec1c <__cmpsf2>
    7b1e:	81 11       	cpse	r24, r1
    7b20:	09 c0       	rjmp	.+18     	; 0x7b34 <task_twi2_lcd__gyro_gfxmag+0x24c>
    7b22:	91 2c       	mov	r9, r1
    7b24:	a1 2c       	mov	r10, r1
    7b26:	68 94       	set
    7b28:	77 24       	eor	r7, r7
    7b2a:	77 f8       	bld	r7, 7
    7b2c:	0f 2e       	mov	r0, r31
    7b2e:	ff e3       	ldi	r31, 0x3F	; 63
    7b30:	6f 2e       	mov	r6, r31
    7b32:	f0 2d       	mov	r31, r0
    7b34:	29 2d       	mov	r18, r9
    7b36:	3a 2d       	mov	r19, r10
    7b38:	47 2d       	mov	r20, r7
    7b3a:	56 2d       	mov	r21, r6
    7b3c:	6a 81       	ldd	r22, Y+2	; 0x02
    7b3e:	7b 81       	ldd	r23, Y+3	; 0x03
    7b40:	8c 81       	ldd	r24, Y+4	; 0x04
    7b42:	9d 81       	ldd	r25, Y+5	; 0x05
    7b44:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    7b48:	20 e0       	ldi	r18, 0x00	; 0
    7b4a:	30 e0       	ldi	r19, 0x00	; 0
    7b4c:	48 e4       	ldi	r20, 0x48	; 72
    7b4e:	51 e4       	ldi	r21, 0x41	; 65
    7b50:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    7b54:	1b 01       	movw	r2, r22
    7b56:	2c 01       	movw	r4, r24
    7b58:	0e 94 82 76 	call	0xed04	; 0xed04 <__fixunssfsi>
    7b5c:	86 2e       	mov	r8, r22
    7b5e:	c2 01       	movw	r24, r4
    7b60:	b1 01       	movw	r22, r2
    7b62:	90 58       	subi	r25, 0x80	; 128
    7b64:	0e 94 82 76 	call	0xed04	; 0xed04 <__fixunssfsi>
    7b68:	16 2f       	mov	r17, r22
    7b6a:	29 2d       	mov	r18, r9
    7b6c:	3a 2d       	mov	r19, r10
    7b6e:	47 2d       	mov	r20, r7
    7b70:	56 2d       	mov	r21, r6
    7b72:	6e 81       	ldd	r22, Y+6	; 0x06
    7b74:	7f 81       	ldd	r23, Y+7	; 0x07
    7b76:	88 85       	ldd	r24, Y+8	; 0x08
    7b78:	99 85       	ldd	r25, Y+9	; 0x09
    7b7a:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    7b7e:	20 e0       	ldi	r18, 0x00	; 0
    7b80:	30 e0       	ldi	r19, 0x00	; 0
    7b82:	48 ec       	ldi	r20, 0xC8	; 200
    7b84:	51 e4       	ldi	r21, 0x41	; 65
    7b86:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    7b8a:	1b 01       	movw	r2, r22
    7b8c:	2c 01       	movw	r4, r24
    7b8e:	68 2d       	mov	r22, r8
    7b90:	70 e0       	ldi	r23, 0x00	; 0
    7b92:	80 e0       	ldi	r24, 0x00	; 0
    7b94:	90 e0       	ldi	r25, 0x00	; 0
    7b96:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    7b9a:	9b 01       	movw	r18, r22
    7b9c:	ac 01       	movw	r20, r24
    7b9e:	c2 01       	movw	r24, r4
    7ba0:	b1 01       	movw	r22, r2
    7ba2:	0e 94 aa 75 	call	0xeb54	; 0xeb54 <__addsf3>
    7ba6:	0e 94 82 76 	call	0xed04	; 0xed04 <__fixunssfsi>
    7baa:	b6 2e       	mov	r11, r22
    7bac:	29 2d       	mov	r18, r9
    7bae:	3a 2d       	mov	r19, r10
    7bb0:	47 2d       	mov	r20, r7
    7bb2:	56 2d       	mov	r21, r6
    7bb4:	c7 01       	movw	r24, r14
    7bb6:	b6 01       	movw	r22, r12
    7bb8:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    7bbc:	20 e0       	ldi	r18, 0x00	; 0
    7bbe:	30 e0       	ldi	r19, 0x00	; 0
    7bc0:	48 ec       	ldi	r20, 0xC8	; 200
    7bc2:	51 e4       	ldi	r21, 0x41	; 65
    7bc4:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    7bc8:	6b 01       	movw	r12, r22
    7bca:	7c 01       	movw	r14, r24
    7bcc:	61 2f       	mov	r22, r17
    7bce:	70 e0       	ldi	r23, 0x00	; 0
    7bd0:	80 e0       	ldi	r24, 0x00	; 0
    7bd2:	90 e0       	ldi	r25, 0x00	; 0
    7bd4:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    7bd8:	9b 01       	movw	r18, r22
    7bda:	ac 01       	movw	r20, r24
    7bdc:	c7 01       	movw	r24, r14
    7bde:	b6 01       	movw	r22, r12
    7be0:	0e 94 aa 75 	call	0xeb54	; 0xeb54 <__addsf3>
    7be4:	0e 94 82 76 	call	0xed04	; 0xed04 <__fixunssfsi>
    7be8:	f6 2e       	mov	r15, r22
    7bea:	20 e0       	ldi	r18, 0x00	; 0
    7bec:	30 e5       	ldi	r19, 0x50	; 80
    7bee:	43 ec       	ldi	r20, 0xC3	; 195
    7bf0:	57 e4       	ldi	r21, 0x47	; 71
    7bf2:	69 2d       	mov	r22, r9
    7bf4:	7a 2d       	mov	r23, r10
    7bf6:	87 2d       	mov	r24, r7
    7bf8:	96 2d       	mov	r25, r6
    7bfa:	0e 94 99 77 	call	0xef32	; 0xef32 <__gesf2>
    7bfe:	18 16       	cp	r1, r24
    7c00:	6c f4       	brge	.+26     	; 0x7c1c <task_twi2_lcd__gyro_gfxmag+0x334>
    7c02:	91 2c       	mov	r9, r1
    7c04:	0f 2e       	mov	r0, r31
    7c06:	f0 e5       	ldi	r31, 0x50	; 80
    7c08:	af 2e       	mov	r10, r31
    7c0a:	f0 2d       	mov	r31, r0
    7c0c:	0f 2e       	mov	r0, r31
    7c0e:	f3 ec       	ldi	r31, 0xC3	; 195
    7c10:	7f 2e       	mov	r7, r31
    7c12:	f0 2d       	mov	r31, r0
    7c14:	0f 2e       	mov	r0, r31
    7c16:	f7 e4       	ldi	r31, 0x47	; 71
    7c18:	6f 2e       	mov	r6, r31
    7c1a:	f0 2d       	mov	r31, r0
    7c1c:	01 e0       	ldi	r16, 0x01	; 1
    7c1e:	20 e0       	ldi	r18, 0x00	; 0
    7c20:	42 e0       	ldi	r20, 0x02	; 2
    7c22:	60 e4       	ldi	r22, 0x40	; 64
    7c24:	83 e7       	ldi	r24, 0x73	; 115
    7c26:	0e 94 82 34 	call	0x6904	; 0x6904 <task_twi2_lcd_circ>
    7c2a:	20 e0       	ldi	r18, 0x00	; 0
    7c2c:	30 e8       	ldi	r19, 0x80	; 128
    7c2e:	4b e3       	ldi	r20, 0x3B	; 59
    7c30:	55 e4       	ldi	r21, 0x45	; 69
    7c32:	69 2d       	mov	r22, r9
    7c34:	7a 2d       	mov	r23, r10
    7c36:	87 2d       	mov	r24, r7
    7c38:	96 2d       	mov	r25, r6
    7c3a:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    7c3e:	1b 01       	movw	r2, r22
    7c40:	2c 01       	movw	r4, r24
    7c42:	0e 94 82 76 	call	0xed04	; 0xed04 <__fixunssfsi>
    7c46:	d6 2e       	mov	r13, r22
    7c48:	a2 01       	movw	r20, r4
    7c4a:	91 01       	movw	r18, r2
    7c4c:	60 e0       	ldi	r22, 0x00	; 0
    7c4e:	70 e0       	ldi	r23, 0x00	; 0
    7c50:	80 e8       	ldi	r24, 0x80	; 128
    7c52:	92 e4       	ldi	r25, 0x42	; 66
    7c54:	0e 94 a9 75 	call	0xeb52	; 0xeb52 <__subsf3>
    7c58:	0e 94 82 76 	call	0xed04	; 0xed04 <__fixunssfsi>
    7c5c:	ee 24       	eor	r14, r14
    7c5e:	e3 94       	inc	r14
    7c60:	2d 2d       	mov	r18, r13
    7c62:	43 e0       	ldi	r20, 0x03	; 3
    7c64:	82 e7       	ldi	r24, 0x72	; 114
    7c66:	0e 94 54 34 	call	0x68a8	; 0x68a8 <task_twi2_lcd_rect>
    7c6a:	0f 2e       	mov	r0, r31
    7c6c:	f8 e2       	ldi	r31, 0x28	; 40
    7c6e:	ef 2e       	mov	r14, r31
    7c70:	f0 2d       	mov	r31, r0
    7c72:	e1 0e       	add	r14, r17
    7c74:	0f 2e       	mov	r0, r31
    7c76:	f6 e9       	ldi	r31, 0x96	; 150
    7c78:	cf 2e       	mov	r12, r31
    7c7a:	f0 2d       	mov	r31, r0
    7c7c:	c8 0c       	add	r12, r8
    7c7e:	2e 2d       	mov	r18, r14
    7c80:	4c 2d       	mov	r20, r12
    7c82:	68 e2       	ldi	r22, 0x28	; 40
    7c84:	86 e9       	ldi	r24, 0x96	; 150
    7c86:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    7c8a:	0f 2e       	mov	r0, r31
    7c8c:	f6 e9       	ldi	r31, 0x96	; 150
    7c8e:	df 2e       	mov	r13, r31
    7c90:	f0 2d       	mov	r31, r0
    7c92:	db 0c       	add	r13, r11
    7c94:	2e 2d       	mov	r18, r14
    7c96:	4d 2d       	mov	r20, r13
    7c98:	6e 2d       	mov	r22, r14
    7c9a:	8c 2d       	mov	r24, r12
    7c9c:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    7ca0:	28 e2       	ldi	r18, 0x28	; 40
    7ca2:	2f 0d       	add	r18, r15
    7ca4:	4d 2d       	mov	r20, r13
    7ca6:	6e 2d       	mov	r22, r14
    7ca8:	8d 2d       	mov	r24, r13
    7caa:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    7cae:	89 2d       	mov	r24, r9
    7cb0:	9a 2d       	mov	r25, r10
    7cb2:	a7 2d       	mov	r26, r7
    7cb4:	b6 2d       	mov	r27, r6
    7cb6:	80 93 09 23 	sts	0x2309, r24	; 0x802309 <s_length.8139>
    7cba:	90 93 0a 23 	sts	0x230A, r25	; 0x80230a <s_length.8139+0x1>
    7cbe:	a0 93 0b 23 	sts	0x230B, r26	; 0x80230b <s_length.8139+0x2>
    7cc2:	b0 93 0c 23 	sts	0x230C, r27	; 0x80230c <s_length.8139+0x3>
    7cc6:	80 92 07 23 	sts	0x2307, r8	; 0x802307 <s_p1x.8140>
    7cca:	10 93 08 23 	sts	0x2308, r17	; 0x802308 <s_p1y.8141>
    7cce:	b0 92 05 23 	sts	0x2305, r11	; 0x802305 <s_p2x.8142>
    7cd2:	10 93 06 23 	sts	0x2306, r17	; 0x802306 <s_p2y.8143>
    7cd6:	b0 92 03 23 	sts	0x2303, r11	; 0x802303 <s_p3x.8144>
    7cda:	f0 92 04 23 	sts	0x2304, r15	; 0x802304 <s_p3y.8145>
    7cde:	2d 96       	adiw	r28, 0x0d	; 13
    7ce0:	cd bf       	out	0x3d, r28	; 61
    7ce2:	de bf       	out	0x3e, r29	; 62
    7ce4:	df 91       	pop	r29
    7ce6:	cf 91       	pop	r28
    7ce8:	1f 91       	pop	r17
    7cea:	0f 91       	pop	r16
    7cec:	ff 90       	pop	r15
    7cee:	ef 90       	pop	r14
    7cf0:	df 90       	pop	r13
    7cf2:	cf 90       	pop	r12
    7cf4:	bf 90       	pop	r11
    7cf6:	af 90       	pop	r10
    7cf8:	9f 90       	pop	r9
    7cfa:	8f 90       	pop	r8
    7cfc:	7f 90       	pop	r7
    7cfe:	6f 90       	pop	r6
    7d00:	5f 90       	pop	r5
    7d02:	4f 90       	pop	r4
    7d04:	3f 90       	pop	r3
    7d06:	2f 90       	pop	r2
    7d08:	08 95       	ret

00007d0a <task_twi2_lcd__gyro_gfxaccel>:
    7d0a:	6f 92       	push	r6
    7d0c:	7f 92       	push	r7
    7d0e:	8f 92       	push	r8
    7d10:	9f 92       	push	r9
    7d12:	af 92       	push	r10
    7d14:	bf 92       	push	r11
    7d16:	cf 92       	push	r12
    7d18:	df 92       	push	r13
    7d1a:	ef 92       	push	r14
    7d1c:	ff 92       	push	r15
    7d1e:	0f 93       	push	r16
    7d20:	1f 93       	push	r17
    7d22:	cf 93       	push	r28
    7d24:	df 93       	push	r29
    7d26:	1f 92       	push	r1
    7d28:	cd b7       	in	r28, 0x3d	; 61
    7d2a:	de b7       	in	r29, 0x3e	; 62
    7d2c:	8f b7       	in	r24, 0x3f	; 63
    7d2e:	89 83       	std	Y+1, r24	; 0x01
    7d30:	f8 94       	cli
    7d32:	89 81       	ldd	r24, Y+1	; 0x01
    7d34:	c0 90 55 27 	lds	r12, 0x2755	; 0x802755 <g_twi1_gyro_1_accel_x_mg>
    7d38:	d0 90 56 27 	lds	r13, 0x2756	; 0x802756 <g_twi1_gyro_1_accel_x_mg+0x1>
    7d3c:	a0 90 53 27 	lds	r10, 0x2753	; 0x802753 <g_twi1_gyro_1_accel_y_mg>
    7d40:	b0 90 54 27 	lds	r11, 0x2754	; 0x802754 <g_twi1_gyro_1_accel_y_mg+0x1>
    7d44:	e0 90 51 27 	lds	r14, 0x2751	; 0x802751 <g_twi1_gyro_1_accel_z_mg>
    7d48:	f0 90 52 27 	lds	r15, 0x2752	; 0x802752 <g_twi1_gyro_1_accel_z_mg+0x1>
    7d4c:	80 90 62 20 	lds	r8, 0x2062	; 0x802062 <g_backlight_mode_pwm>
    7d50:	90 90 63 20 	lds	r9, 0x2063	; 0x802063 <g_backlight_mode_pwm+0x1>
    7d54:	8f bf       	out	0x3f, r24	; 63
    7d56:	80 91 01 23 	lds	r24, 0x2301	; 0x802301 <s_twi1_gyro_1_accel_x_mg.8165>
    7d5a:	90 91 02 23 	lds	r25, 0x2302	; 0x802302 <s_twi1_gyro_1_accel_x_mg.8165+0x1>
    7d5e:	c8 16       	cp	r12, r24
    7d60:	d9 06       	cpc	r13, r25
    7d62:	79 f4       	brne	.+30     	; 0x7d82 <task_twi2_lcd__gyro_gfxaccel+0x78>
    7d64:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <s_twi1_gyro_1_accel_y_mg.8166>
    7d68:	90 91 00 23 	lds	r25, 0x2300	; 0x802300 <s_twi1_gyro_1_accel_y_mg.8166+0x1>
    7d6c:	a8 16       	cp	r10, r24
    7d6e:	b9 06       	cpc	r11, r25
    7d70:	41 f4       	brne	.+16     	; 0x7d82 <task_twi2_lcd__gyro_gfxaccel+0x78>
    7d72:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <s_twi1_gyro_1_accel_z_mg.8167>
    7d76:	90 91 fe 22 	lds	r25, 0x22FE	; 0x8022fe <s_twi1_gyro_1_accel_z_mg.8167+0x1>
    7d7a:	e8 16       	cp	r14, r24
    7d7c:	f9 06       	cpc	r15, r25
    7d7e:	09 f4       	brne	.+2      	; 0x7d82 <task_twi2_lcd__gyro_gfxaccel+0x78>
    7d80:	a6 c0       	rjmp	.+332    	; 0x7ece <task_twi2_lcd__gyro_gfxaccel+0x1c4>
    7d82:	c0 92 01 23 	sts	0x2301, r12	; 0x802301 <s_twi1_gyro_1_accel_x_mg.8165>
    7d86:	d0 92 02 23 	sts	0x2302, r13	; 0x802302 <s_twi1_gyro_1_accel_x_mg.8165+0x1>
    7d8a:	a0 92 ff 22 	sts	0x22FF, r10	; 0x8022ff <s_twi1_gyro_1_accel_y_mg.8166>
    7d8e:	b0 92 00 23 	sts	0x2300, r11	; 0x802300 <s_twi1_gyro_1_accel_y_mg.8166+0x1>
    7d92:	e0 92 fd 22 	sts	0x22FD, r14	; 0x8022fd <s_twi1_gyro_1_accel_z_mg.8167>
    7d96:	f0 92 fe 22 	sts	0x22FE, r15	; 0x8022fe <s_twi1_gyro_1_accel_z_mg.8167+0x1>
    7d9a:	20 91 fc 22 	lds	r18, 0x22FC	; 0x8022fc <s_p1y.8169>
    7d9e:	28 5d       	subi	r18, 0xD8	; 216
    7da0:	40 91 fb 22 	lds	r20, 0x22FB	; 0x8022fb <s_p1x.8168>
    7da4:	4e 52       	subi	r20, 0x2E	; 46
    7da6:	00 e0       	ldi	r16, 0x00	; 0
    7da8:	68 e2       	ldi	r22, 0x28	; 40
    7daa:	82 ed       	ldi	r24, 0xD2	; 210
    7dac:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    7db0:	20 91 fa 22 	lds	r18, 0x22FA	; 0x8022fa <s_p2y.8171>
    7db4:	28 5d       	subi	r18, 0xD8	; 216
    7db6:	40 91 f9 22 	lds	r20, 0x22F9	; 0x8022f9 <s_p2x.8170>
    7dba:	4e 52       	subi	r20, 0x2E	; 46
    7dbc:	60 91 fc 22 	lds	r22, 0x22FC	; 0x8022fc <s_p1y.8169>
    7dc0:	68 5d       	subi	r22, 0xD8	; 216
    7dc2:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <s_p1x.8168>
    7dc6:	8e 52       	subi	r24, 0x2E	; 46
    7dc8:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    7dcc:	20 91 f8 22 	lds	r18, 0x22F8	; 0x8022f8 <s_p3y.8173>
    7dd0:	28 5d       	subi	r18, 0xD8	; 216
    7dd2:	40 91 f7 22 	lds	r20, 0x22F7	; 0x8022f7 <s_p3x.8172>
    7dd6:	4e 52       	subi	r20, 0x2E	; 46
    7dd8:	60 91 fa 22 	lds	r22, 0x22FA	; 0x8022fa <s_p2y.8171>
    7ddc:	68 5d       	subi	r22, 0xD8	; 216
    7dde:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <s_p2x.8170>
    7de2:	8e 52       	subi	r24, 0x2E	; 46
    7de4:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    7de8:	01 e0       	ldi	r16, 0x01	; 1
    7dea:	21 e0       	ldi	r18, 0x01	; 1
    7dec:	41 e0       	ldi	r20, 0x01	; 1
    7dee:	68 e2       	ldi	r22, 0x28	; 40
    7df0:	82 ed       	ldi	r24, 0xD2	; 210
    7df2:	0e 94 82 34 	call	0x6904	; 0x6904 <task_twi2_lcd_circ>
    7df6:	c5 01       	movw	r24, r10
    7df8:	60 e5       	ldi	r22, 0x50	; 80
    7dfa:	70 e0       	ldi	r23, 0x00	; 0
    7dfc:	0e 94 9f 79 	call	0xf33e	; 0xf33e <__divmodhi4>
    7e00:	16 2f       	mov	r17, r22
    7e02:	66 2e       	mov	r6, r22
    7e04:	61 94       	neg	r6
    7e06:	28 e2       	ldi	r18, 0x28	; 40
    7e08:	30 e0       	ldi	r19, 0x00	; 0
    7e0a:	c6 01       	movw	r24, r12
    7e0c:	b9 01       	movw	r22, r18
    7e0e:	0e 94 9f 79 	call	0xf33e	; 0xf33e <__divmodhi4>
    7e12:	a6 2c       	mov	r10, r6
    7e14:	a6 1a       	sub	r10, r22
    7e16:	c7 01       	movw	r24, r14
    7e18:	b9 01       	movw	r22, r18
    7e1a:	0e 94 9f 79 	call	0xf33e	; 0xf33e <__divmodhi4>
    7e1e:	d1 2e       	mov	r13, r17
    7e20:	d6 0e       	add	r13, r22
    7e22:	0f 2e       	mov	r0, r31
    7e24:	f8 e2       	ldi	r31, 0x28	; 40
    7e26:	cf 2e       	mov	r12, r31
    7e28:	f0 2d       	mov	r31, r0
    7e2a:	c1 0e       	add	r12, r17
    7e2c:	82 ed       	ldi	r24, 0xD2	; 210
    7e2e:	b8 2e       	mov	r11, r24
    7e30:	b1 1a       	sub	r11, r17
    7e32:	2c 2d       	mov	r18, r12
    7e34:	4b 2d       	mov	r20, r11
    7e36:	68 e2       	ldi	r22, 0x28	; 40
    7e38:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    7e3c:	0f 2e       	mov	r0, r31
    7e3e:	f2 ed       	ldi	r31, 0xD2	; 210
    7e40:	7f 2e       	mov	r7, r31
    7e42:	f0 2d       	mov	r31, r0
    7e44:	7a 0c       	add	r7, r10
    7e46:	2c 2d       	mov	r18, r12
    7e48:	47 2d       	mov	r20, r7
    7e4a:	6c 2d       	mov	r22, r12
    7e4c:	8b 2d       	mov	r24, r11
    7e4e:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    7e52:	28 e2       	ldi	r18, 0x28	; 40
    7e54:	2d 0d       	add	r18, r13
    7e56:	47 2d       	mov	r20, r7
    7e58:	6c 2d       	mov	r22, r12
    7e5a:	87 2d       	mov	r24, r7
    7e5c:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    7e60:	60 92 fb 22 	sts	0x22FB, r6	; 0x8022fb <s_p1x.8168>
    7e64:	10 93 fc 22 	sts	0x22FC, r17	; 0x8022fc <s_p1y.8169>
    7e68:	a0 92 f9 22 	sts	0x22F9, r10	; 0x8022f9 <s_p2x.8170>
    7e6c:	10 93 fa 22 	sts	0x22FA, r17	; 0x8022fa <s_p2y.8171>
    7e70:	a0 92 f7 22 	sts	0x22F7, r10	; 0x8022f7 <s_p3x.8172>
    7e74:	d0 92 f8 22 	sts	0x22F8, r13	; 0x8022f8 <s_p3y.8173>
    7e78:	2e ef       	ldi	r18, 0xFE	; 254
    7e7a:	82 16       	cp	r8, r18
    7e7c:	2f ef       	ldi	r18, 0xFF	; 255
    7e7e:	92 06       	cpc	r9, r18
    7e80:	31 f5       	brne	.+76     	; 0x7ece <task_twi2_lcd__gyro_gfxaccel+0x1c4>
    7e82:	97 01       	movw	r18, r14
    7e84:	28 51       	subi	r18, 0x18	; 24
    7e86:	3c 4f       	sbci	r19, 0xFC	; 252
    7e88:	c9 01       	movw	r24, r18
    7e8a:	33 0f       	add	r19, r19
    7e8c:	aa 0b       	sbc	r26, r26
    7e8e:	bb 0b       	sbc	r27, r27
    7e90:	81 3d       	cpi	r24, 0xD1	; 209
    7e92:	27 e0       	ldi	r18, 0x07	; 7
    7e94:	92 07       	cpc	r25, r18
    7e96:	a1 05       	cpc	r26, r1
    7e98:	b1 05       	cpc	r27, r1
    7e9a:	24 f0       	brlt	.+8      	; 0x7ea4 <task_twi2_lcd__gyro_gfxaccel+0x19a>
    7e9c:	80 ed       	ldi	r24, 0xD0	; 208
    7e9e:	97 e0       	ldi	r25, 0x07	; 7
    7ea0:	a0 e0       	ldi	r26, 0x00	; 0
    7ea2:	b0 e0       	ldi	r27, 0x00	; 0
    7ea4:	9c 01       	movw	r18, r24
    7ea6:	ad 01       	movw	r20, r26
    7ea8:	bb 23       	and	r27, r27
    7eaa:	1c f4       	brge	.+6      	; 0x7eb2 <task_twi2_lcd__gyro_gfxaccel+0x1a8>
    7eac:	20 e0       	ldi	r18, 0x00	; 0
    7eae:	30 e0       	ldi	r19, 0x00	; 0
    7eb0:	a9 01       	movw	r20, r18
    7eb2:	af ef       	ldi	r26, 0xFF	; 255
    7eb4:	b0 e0       	ldi	r27, 0x00	; 0
    7eb6:	0e 94 13 7a 	call	0xf426	; 0xf426 <__muluhisi3>
    7eba:	20 ed       	ldi	r18, 0xD0	; 208
    7ebc:	37 e0       	ldi	r19, 0x07	; 7
    7ebe:	40 e0       	ldi	r20, 0x00	; 0
    7ec0:	50 e0       	ldi	r21, 0x00	; 0
    7ec2:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <__divmodsi4>
    7ec6:	62 2f       	mov	r22, r18
    7ec8:	80 e0       	ldi	r24, 0x00	; 0
    7eca:	0e 94 4b 31 	call	0x6296	; 0x6296 <twi2_set_ledbl>
    7ece:	0f 90       	pop	r0
    7ed0:	df 91       	pop	r29
    7ed2:	cf 91       	pop	r28
    7ed4:	1f 91       	pop	r17
    7ed6:	0f 91       	pop	r16
    7ed8:	ff 90       	pop	r15
    7eda:	ef 90       	pop	r14
    7edc:	df 90       	pop	r13
    7ede:	cf 90       	pop	r12
    7ee0:	bf 90       	pop	r11
    7ee2:	af 90       	pop	r10
    7ee4:	9f 90       	pop	r9
    7ee6:	8f 90       	pop	r8
    7ee8:	7f 90       	pop	r7
    7eea:	6f 90       	pop	r6
    7eec:	08 95       	ret

00007eee <task_twi2_lcd__gyro_gfxgyro>:
    7eee:	2f 92       	push	r2
    7ef0:	3f 92       	push	r3
    7ef2:	4f 92       	push	r4
    7ef4:	5f 92       	push	r5
    7ef6:	6f 92       	push	r6
    7ef8:	7f 92       	push	r7
    7efa:	8f 92       	push	r8
    7efc:	9f 92       	push	r9
    7efe:	af 92       	push	r10
    7f00:	bf 92       	push	r11
    7f02:	cf 92       	push	r12
    7f04:	df 92       	push	r13
    7f06:	ef 92       	push	r14
    7f08:	ff 92       	push	r15
    7f0a:	0f 93       	push	r16
    7f0c:	1f 93       	push	r17
    7f0e:	cf 93       	push	r28
    7f10:	df 93       	push	r29
    7f12:	cd b7       	in	r28, 0x3d	; 61
    7f14:	de b7       	in	r29, 0x3e	; 62
    7f16:	65 97       	sbiw	r28, 0x15	; 21
    7f18:	cd bf       	out	0x3d, r28	; 61
    7f1a:	de bf       	out	0x3e, r29	; 62
    7f1c:	8f b7       	in	r24, 0x3f	; 63
    7f1e:	89 83       	std	Y+1, r24	; 0x01
    7f20:	f8 94       	cli
    7f22:	89 81       	ldd	r24, Y+1	; 0x01
    7f24:	20 90 47 27 	lds	r2, 0x2747	; 0x802747 <g_twi1_gyro_1_gyro_x_mdps>
    7f28:	30 90 48 27 	lds	r3, 0x2748	; 0x802748 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    7f2c:	40 90 49 27 	lds	r4, 0x2749	; 0x802749 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    7f30:	50 90 4a 27 	lds	r5, 0x274A	; 0x80274a <g_twi1_gyro_1_gyro_x_mdps+0x3>
    7f34:	c0 90 43 27 	lds	r12, 0x2743	; 0x802743 <g_twi1_gyro_1_gyro_y_mdps>
    7f38:	d0 90 44 27 	lds	r13, 0x2744	; 0x802744 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    7f3c:	e0 90 45 27 	lds	r14, 0x2745	; 0x802745 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    7f40:	f0 90 46 27 	lds	r15, 0x2746	; 0x802746 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    7f44:	20 91 3f 27 	lds	r18, 0x273F	; 0x80273f <g_twi1_gyro_1_gyro_z_mdps>
    7f48:	30 91 40 27 	lds	r19, 0x2740	; 0x802740 <g_twi1_gyro_1_gyro_z_mdps+0x1>
    7f4c:	40 91 41 27 	lds	r20, 0x2741	; 0x802741 <g_twi1_gyro_1_gyro_z_mdps+0x2>
    7f50:	50 91 42 27 	lds	r21, 0x2742	; 0x802742 <g_twi1_gyro_1_gyro_z_mdps+0x3>
    7f54:	2a 8b       	std	Y+18, r18	; 0x12
    7f56:	3b 8b       	std	Y+19, r19	; 0x13
    7f58:	4c 8b       	std	Y+20, r20	; 0x14
    7f5a:	5d 8b       	std	Y+21, r21	; 0x15
    7f5c:	8f bf       	out	0x3f, r24	; 63
    7f5e:	80 91 f3 22 	lds	r24, 0x22F3	; 0x8022f3 <s_twi1_gyro_1_gyro_x_mdps.8197>
    7f62:	90 91 f4 22 	lds	r25, 0x22F4	; 0x8022f4 <s_twi1_gyro_1_gyro_x_mdps.8197+0x1>
    7f66:	a0 91 f5 22 	lds	r26, 0x22F5	; 0x8022f5 <s_twi1_gyro_1_gyro_x_mdps.8197+0x2>
    7f6a:	b0 91 f6 22 	lds	r27, 0x22F6	; 0x8022f6 <s_twi1_gyro_1_gyro_x_mdps.8197+0x3>
    7f6e:	28 16       	cp	r2, r24
    7f70:	39 06       	cpc	r3, r25
    7f72:	4a 06       	cpc	r4, r26
    7f74:	5b 06       	cpc	r5, r27
    7f76:	d9 f4       	brne	.+54     	; 0x7fae <task_twi2_lcd__gyro_gfxgyro+0xc0>
    7f78:	80 91 ef 22 	lds	r24, 0x22EF	; 0x8022ef <s_twi1_gyro_1_gyro_y_mdps.8198>
    7f7c:	90 91 f0 22 	lds	r25, 0x22F0	; 0x8022f0 <s_twi1_gyro_1_gyro_y_mdps.8198+0x1>
    7f80:	a0 91 f1 22 	lds	r26, 0x22F1	; 0x8022f1 <s_twi1_gyro_1_gyro_y_mdps.8198+0x2>
    7f84:	b0 91 f2 22 	lds	r27, 0x22F2	; 0x8022f2 <s_twi1_gyro_1_gyro_y_mdps.8198+0x3>
    7f88:	c8 16       	cp	r12, r24
    7f8a:	d9 06       	cpc	r13, r25
    7f8c:	ea 06       	cpc	r14, r26
    7f8e:	fb 06       	cpc	r15, r27
    7f90:	71 f4       	brne	.+28     	; 0x7fae <task_twi2_lcd__gyro_gfxgyro+0xc0>
    7f92:	80 91 eb 22 	lds	r24, 0x22EB	; 0x8022eb <s_twi1_gyro_1_gyro_z_mdps.8199>
    7f96:	90 91 ec 22 	lds	r25, 0x22EC	; 0x8022ec <s_twi1_gyro_1_gyro_z_mdps.8199+0x1>
    7f9a:	a0 91 ed 22 	lds	r26, 0x22ED	; 0x8022ed <s_twi1_gyro_1_gyro_z_mdps.8199+0x2>
    7f9e:	b0 91 ee 22 	lds	r27, 0x22EE	; 0x8022ee <s_twi1_gyro_1_gyro_z_mdps.8199+0x3>
    7fa2:	28 17       	cp	r18, r24
    7fa4:	39 07       	cpc	r19, r25
    7fa6:	4a 07       	cpc	r20, r26
    7fa8:	5b 07       	cpc	r21, r27
    7faa:	09 f4       	brne	.+2      	; 0x7fae <task_twi2_lcd__gyro_gfxgyro+0xc0>
    7fac:	b7 c1       	rjmp	.+878    	; 0x831c <task_twi2_lcd__gyro_gfxgyro+0x42e>
    7fae:	20 92 f3 22 	sts	0x22F3, r2	; 0x8022f3 <s_twi1_gyro_1_gyro_x_mdps.8197>
    7fb2:	30 92 f4 22 	sts	0x22F4, r3	; 0x8022f4 <s_twi1_gyro_1_gyro_x_mdps.8197+0x1>
    7fb6:	40 92 f5 22 	sts	0x22F5, r4	; 0x8022f5 <s_twi1_gyro_1_gyro_x_mdps.8197+0x2>
    7fba:	50 92 f6 22 	sts	0x22F6, r5	; 0x8022f6 <s_twi1_gyro_1_gyro_x_mdps.8197+0x3>
    7fbe:	c0 92 ef 22 	sts	0x22EF, r12	; 0x8022ef <s_twi1_gyro_1_gyro_y_mdps.8198>
    7fc2:	d0 92 f0 22 	sts	0x22F0, r13	; 0x8022f0 <s_twi1_gyro_1_gyro_y_mdps.8198+0x1>
    7fc6:	e0 92 f1 22 	sts	0x22F1, r14	; 0x8022f1 <s_twi1_gyro_1_gyro_y_mdps.8198+0x2>
    7fca:	f0 92 f2 22 	sts	0x22F2, r15	; 0x8022f2 <s_twi1_gyro_1_gyro_y_mdps.8198+0x3>
    7fce:	8a 89       	ldd	r24, Y+18	; 0x12
    7fd0:	9b 89       	ldd	r25, Y+19	; 0x13
    7fd2:	ac 89       	ldd	r26, Y+20	; 0x14
    7fd4:	bd 89       	ldd	r27, Y+21	; 0x15
    7fd6:	80 93 eb 22 	sts	0x22EB, r24	; 0x8022eb <s_twi1_gyro_1_gyro_z_mdps.8199>
    7fda:	90 93 ec 22 	sts	0x22EC, r25	; 0x8022ec <s_twi1_gyro_1_gyro_z_mdps.8199+0x1>
    7fde:	a0 93 ed 22 	sts	0x22ED, r26	; 0x8022ed <s_twi1_gyro_1_gyro_z_mdps.8199+0x2>
    7fe2:	b0 93 ee 22 	sts	0x22EE, r27	; 0x8022ee <s_twi1_gyro_1_gyro_z_mdps.8199+0x3>
    7fe6:	c2 01       	movw	r24, r4
    7fe8:	b1 01       	movw	r22, r2
    7fea:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    7fee:	2b ed       	ldi	r18, 0xDB	; 219
    7ff0:	3f e0       	ldi	r19, 0x0F	; 15
    7ff2:	49 e4       	ldi	r20, 0x49	; 73
    7ff4:	50 e4       	ldi	r21, 0x40	; 64
    7ff6:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    7ffa:	20 e0       	ldi	r18, 0x00	; 0
    7ffc:	38 ec       	ldi	r19, 0xC8	; 200
    7ffe:	4f e2       	ldi	r20, 0x2F	; 47
    8000:	58 e4       	ldi	r21, 0x48	; 72
    8002:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    8006:	6e 83       	std	Y+6, r22	; 0x06
    8008:	7f 83       	std	Y+7, r23	; 0x07
    800a:	88 87       	std	Y+8, r24	; 0x08
    800c:	99 87       	std	Y+9, r25	; 0x09
    800e:	c7 01       	movw	r24, r14
    8010:	b6 01       	movw	r22, r12
    8012:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    8016:	2b ed       	ldi	r18, 0xDB	; 219
    8018:	3f e0       	ldi	r19, 0x0F	; 15
    801a:	49 e4       	ldi	r20, 0x49	; 73
    801c:	50 e4       	ldi	r21, 0x40	; 64
    801e:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    8022:	20 e0       	ldi	r18, 0x00	; 0
    8024:	38 ec       	ldi	r19, 0xC8	; 200
    8026:	4f e2       	ldi	r20, 0x2F	; 47
    8028:	58 e4       	ldi	r21, 0x48	; 72
    802a:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    802e:	6a 87       	std	Y+10, r22	; 0x0a
    8030:	7b 87       	std	Y+11, r23	; 0x0b
    8032:	8c 87       	std	Y+12, r24	; 0x0c
    8034:	9d 87       	std	Y+13, r25	; 0x0d
    8036:	6a 89       	ldd	r22, Y+18	; 0x12
    8038:	7b 89       	ldd	r23, Y+19	; 0x13
    803a:	8c 89       	ldd	r24, Y+20	; 0x14
    803c:	9d 89       	ldd	r25, Y+21	; 0x15
    803e:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    8042:	2b ed       	ldi	r18, 0xDB	; 219
    8044:	3f e0       	ldi	r19, 0x0F	; 15
    8046:	49 e4       	ldi	r20, 0x49	; 73
    8048:	50 e4       	ldi	r21, 0x40	; 64
    804a:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    804e:	20 e0       	ldi	r18, 0x00	; 0
    8050:	38 ec       	ldi	r19, 0xC8	; 200
    8052:	4f e2       	ldi	r20, 0x2F	; 47
    8054:	58 e4       	ldi	r21, 0x48	; 72
    8056:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    805a:	6e 87       	std	Y+14, r22	; 0x0e
    805c:	7f 87       	std	Y+15, r23	; 0x0f
    805e:	88 8b       	std	Y+16, r24	; 0x10
    8060:	99 8b       	std	Y+17, r25	; 0x11
    8062:	80 90 e7 22 	lds	r8, 0x22E7	; 0x8022e7 <s_rads_x.8194>
    8066:	90 90 e8 22 	lds	r9, 0x22E8	; 0x8022e8 <s_rads_x.8194+0x1>
    806a:	a0 90 e9 22 	lds	r10, 0x22E9	; 0x8022e9 <s_rads_x.8194+0x2>
    806e:	b0 90 ea 22 	lds	r11, 0x22EA	; 0x8022ea <s_rads_x.8194+0x3>
    8072:	c5 01       	movw	r24, r10
    8074:	b4 01       	movw	r22, r8
    8076:	0e 94 12 76 	call	0xec24	; 0xec24 <cos>
    807a:	6a 83       	std	Y+2, r22	; 0x02
    807c:	7b 83       	std	Y+3, r23	; 0x03
    807e:	8c 83       	std	Y+4, r24	; 0x04
    8080:	9d 83       	std	Y+5, r25	; 0x05
    8082:	c5 01       	movw	r24, r10
    8084:	b4 01       	movw	r22, r8
    8086:	0e 94 4c 78 	call	0xf098	; 0xf098 <sin>
    808a:	4b 01       	movw	r8, r22
    808c:	5c 01       	movw	r10, r24
    808e:	20 e0       	ldi	r18, 0x00	; 0
    8090:	30 e0       	ldi	r19, 0x00	; 0
    8092:	40 e4       	ldi	r20, 0x40	; 64
    8094:	51 e4       	ldi	r21, 0x41	; 65
    8096:	6a 81       	ldd	r22, Y+2	; 0x02
    8098:	7b 81       	ldd	r23, Y+3	; 0x03
    809a:	8c 81       	ldd	r24, Y+4	; 0x04
    809c:	9d 81       	ldd	r25, Y+5	; 0x05
    809e:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    80a2:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    80a6:	14 e6       	ldi	r17, 0x64	; 100
    80a8:	71 2e       	mov	r7, r17
    80aa:	76 1a       	sub	r7, r22
    80ac:	20 e0       	ldi	r18, 0x00	; 0
    80ae:	30 e0       	ldi	r19, 0x00	; 0
    80b0:	40 e4       	ldi	r20, 0x40	; 64
    80b2:	51 e4       	ldi	r21, 0x41	; 65
    80b4:	c5 01       	movw	r24, r10
    80b6:	b4 01       	movw	r22, r8
    80b8:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    80bc:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    80c0:	46 e9       	ldi	r20, 0x96	; 150
    80c2:	46 1b       	sub	r20, r22
    80c4:	00 e0       	ldi	r16, 0x00	; 0
    80c6:	27 2d       	mov	r18, r7
    80c8:	64 e6       	ldi	r22, 0x64	; 100
    80ca:	86 e9       	ldi	r24, 0x96	; 150
    80cc:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    80d0:	80 90 e3 22 	lds	r8, 0x22E3	; 0x8022e3 <s_rads_y.8195>
    80d4:	90 90 e4 22 	lds	r9, 0x22E4	; 0x8022e4 <s_rads_y.8195+0x1>
    80d8:	a0 90 e5 22 	lds	r10, 0x22E5	; 0x8022e5 <s_rads_y.8195+0x2>
    80dc:	b0 90 e6 22 	lds	r11, 0x22E6	; 0x8022e6 <s_rads_y.8195+0x3>
    80e0:	c5 01       	movw	r24, r10
    80e2:	b4 01       	movw	r22, r8
    80e4:	0e 94 12 76 	call	0xec24	; 0xec24 <cos>
    80e8:	6a 83       	std	Y+2, r22	; 0x02
    80ea:	7b 83       	std	Y+3, r23	; 0x03
    80ec:	8c 83       	std	Y+4, r24	; 0x04
    80ee:	9d 83       	std	Y+5, r25	; 0x05
    80f0:	c5 01       	movw	r24, r10
    80f2:	b4 01       	movw	r22, r8
    80f4:	0e 94 4c 78 	call	0xf098	; 0xf098 <sin>
    80f8:	4b 01       	movw	r8, r22
    80fa:	5c 01       	movw	r10, r24
    80fc:	20 e0       	ldi	r18, 0x00	; 0
    80fe:	30 e0       	ldi	r19, 0x00	; 0
    8100:	40 e4       	ldi	r20, 0x40	; 64
    8102:	51 e4       	ldi	r21, 0x41	; 65
    8104:	6a 81       	ldd	r22, Y+2	; 0x02
    8106:	7b 81       	ldd	r23, Y+3	; 0x03
    8108:	8c 81       	ldd	r24, Y+4	; 0x04
    810a:	9d 81       	ldd	r25, Y+5	; 0x05
    810c:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    8110:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    8114:	71 2e       	mov	r7, r17
    8116:	76 1a       	sub	r7, r22
    8118:	20 e0       	ldi	r18, 0x00	; 0
    811a:	30 e0       	ldi	r19, 0x00	; 0
    811c:	40 e4       	ldi	r20, 0x40	; 64
    811e:	51 e4       	ldi	r21, 0x41	; 65
    8120:	c5 01       	movw	r24, r10
    8122:	b4 01       	movw	r22, r8
    8124:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    8128:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    812c:	44 eb       	ldi	r20, 0xB4	; 180
    812e:	46 0f       	add	r20, r22
    8130:	27 2d       	mov	r18, r7
    8132:	64 e6       	ldi	r22, 0x64	; 100
    8134:	84 eb       	ldi	r24, 0xB4	; 180
    8136:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    813a:	80 90 df 22 	lds	r8, 0x22DF	; 0x8022df <s_rads_z.8196>
    813e:	90 90 e0 22 	lds	r9, 0x22E0	; 0x8022e0 <s_rads_z.8196+0x1>
    8142:	a0 90 e1 22 	lds	r10, 0x22E1	; 0x8022e1 <s_rads_z.8196+0x2>
    8146:	b0 90 e2 22 	lds	r11, 0x22E2	; 0x8022e2 <s_rads_z.8196+0x3>
    814a:	c5 01       	movw	r24, r10
    814c:	b4 01       	movw	r22, r8
    814e:	0e 94 12 76 	call	0xec24	; 0xec24 <cos>
    8152:	6a 83       	std	Y+2, r22	; 0x02
    8154:	7b 83       	std	Y+3, r23	; 0x03
    8156:	8c 83       	std	Y+4, r24	; 0x04
    8158:	9d 83       	std	Y+5, r25	; 0x05
    815a:	c5 01       	movw	r24, r10
    815c:	b4 01       	movw	r22, r8
    815e:	0e 94 4c 78 	call	0xf098	; 0xf098 <sin>
    8162:	4b 01       	movw	r8, r22
    8164:	5c 01       	movw	r10, r24
    8166:	20 e0       	ldi	r18, 0x00	; 0
    8168:	30 e0       	ldi	r19, 0x00	; 0
    816a:	40 e4       	ldi	r20, 0x40	; 64
    816c:	51 e4       	ldi	r21, 0x41	; 65
    816e:	6a 81       	ldd	r22, Y+2	; 0x02
    8170:	7b 81       	ldd	r23, Y+3	; 0x03
    8172:	8c 81       	ldd	r24, Y+4	; 0x04
    8174:	9d 81       	ldd	r25, Y+5	; 0x05
    8176:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    817a:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    817e:	71 2e       	mov	r7, r17
    8180:	76 1a       	sub	r7, r22
    8182:	20 e0       	ldi	r18, 0x00	; 0
    8184:	30 e0       	ldi	r19, 0x00	; 0
    8186:	40 e4       	ldi	r20, 0x40	; 64
    8188:	51 e4       	ldi	r21, 0x41	; 65
    818a:	c5 01       	movw	r24, r10
    818c:	b4 01       	movw	r22, r8
    818e:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    8192:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    8196:	0f 2e       	mov	r0, r31
    8198:	f2 ed       	ldi	r31, 0xD2	; 210
    819a:	6f 2e       	mov	r6, r31
    819c:	f0 2d       	mov	r31, r0
    819e:	46 2d       	mov	r20, r6
    81a0:	46 1b       	sub	r20, r22
    81a2:	27 2d       	mov	r18, r7
    81a4:	64 e6       	ldi	r22, 0x64	; 100
    81a6:	82 ed       	ldi	r24, 0xD2	; 210
    81a8:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    81ac:	6e 81       	ldd	r22, Y+6	; 0x06
    81ae:	7f 81       	ldd	r23, Y+7	; 0x07
    81b0:	88 85       	ldd	r24, Y+8	; 0x08
    81b2:	99 85       	ldd	r25, Y+9	; 0x09
    81b4:	0e 94 12 76 	call	0xec24	; 0xec24 <cos>
    81b8:	6a 83       	std	Y+2, r22	; 0x02
    81ba:	7b 83       	std	Y+3, r23	; 0x03
    81bc:	8c 83       	std	Y+4, r24	; 0x04
    81be:	9d 83       	std	Y+5, r25	; 0x05
    81c0:	6e 81       	ldd	r22, Y+6	; 0x06
    81c2:	7f 81       	ldd	r23, Y+7	; 0x07
    81c4:	88 85       	ldd	r24, Y+8	; 0x08
    81c6:	99 85       	ldd	r25, Y+9	; 0x09
    81c8:	0e 94 4c 78 	call	0xf098	; 0xf098 <sin>
    81cc:	4b 01       	movw	r8, r22
    81ce:	5c 01       	movw	r10, r24
    81d0:	20 e0       	ldi	r18, 0x00	; 0
    81d2:	30 e0       	ldi	r19, 0x00	; 0
    81d4:	40 e4       	ldi	r20, 0x40	; 64
    81d6:	51 e4       	ldi	r21, 0x41	; 65
    81d8:	6a 81       	ldd	r22, Y+2	; 0x02
    81da:	7b 81       	ldd	r23, Y+3	; 0x03
    81dc:	8c 81       	ldd	r24, Y+4	; 0x04
    81de:	9d 81       	ldd	r25, Y+5	; 0x05
    81e0:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    81e4:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    81e8:	71 2e       	mov	r7, r17
    81ea:	76 1a       	sub	r7, r22
    81ec:	20 e0       	ldi	r18, 0x00	; 0
    81ee:	30 e0       	ldi	r19, 0x00	; 0
    81f0:	40 e4       	ldi	r20, 0x40	; 64
    81f2:	51 e4       	ldi	r21, 0x41	; 65
    81f4:	c5 01       	movw	r24, r10
    81f6:	b4 01       	movw	r22, r8
    81f8:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    81fc:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    8200:	46 e9       	ldi	r20, 0x96	; 150
    8202:	46 1b       	sub	r20, r22
    8204:	01 e0       	ldi	r16, 0x01	; 1
    8206:	27 2d       	mov	r18, r7
    8208:	64 e6       	ldi	r22, 0x64	; 100
    820a:	86 e9       	ldi	r24, 0x96	; 150
    820c:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    8210:	6a 85       	ldd	r22, Y+10	; 0x0a
    8212:	7b 85       	ldd	r23, Y+11	; 0x0b
    8214:	8c 85       	ldd	r24, Y+12	; 0x0c
    8216:	9d 85       	ldd	r25, Y+13	; 0x0d
    8218:	0e 94 12 76 	call	0xec24	; 0xec24 <cos>
    821c:	6a 83       	std	Y+2, r22	; 0x02
    821e:	7b 83       	std	Y+3, r23	; 0x03
    8220:	8c 83       	std	Y+4, r24	; 0x04
    8222:	9d 83       	std	Y+5, r25	; 0x05
    8224:	6a 85       	ldd	r22, Y+10	; 0x0a
    8226:	7b 85       	ldd	r23, Y+11	; 0x0b
    8228:	8c 85       	ldd	r24, Y+12	; 0x0c
    822a:	9d 85       	ldd	r25, Y+13	; 0x0d
    822c:	0e 94 4c 78 	call	0xf098	; 0xf098 <sin>
    8230:	4b 01       	movw	r8, r22
    8232:	5c 01       	movw	r10, r24
    8234:	20 e0       	ldi	r18, 0x00	; 0
    8236:	30 e0       	ldi	r19, 0x00	; 0
    8238:	40 e4       	ldi	r20, 0x40	; 64
    823a:	51 e4       	ldi	r21, 0x41	; 65
    823c:	6a 81       	ldd	r22, Y+2	; 0x02
    823e:	7b 81       	ldd	r23, Y+3	; 0x03
    8240:	8c 81       	ldd	r24, Y+4	; 0x04
    8242:	9d 81       	ldd	r25, Y+5	; 0x05
    8244:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    8248:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    824c:	71 2e       	mov	r7, r17
    824e:	76 1a       	sub	r7, r22
    8250:	20 e0       	ldi	r18, 0x00	; 0
    8252:	30 e0       	ldi	r19, 0x00	; 0
    8254:	40 e4       	ldi	r20, 0x40	; 64
    8256:	51 e4       	ldi	r21, 0x41	; 65
    8258:	c5 01       	movw	r24, r10
    825a:	b4 01       	movw	r22, r8
    825c:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    8260:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    8264:	44 eb       	ldi	r20, 0xB4	; 180
    8266:	46 0f       	add	r20, r22
    8268:	27 2d       	mov	r18, r7
    826a:	64 e6       	ldi	r22, 0x64	; 100
    826c:	84 eb       	ldi	r24, 0xB4	; 180
    826e:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    8272:	6e 85       	ldd	r22, Y+14	; 0x0e
    8274:	7f 85       	ldd	r23, Y+15	; 0x0f
    8276:	88 89       	ldd	r24, Y+16	; 0x10
    8278:	99 89       	ldd	r25, Y+17	; 0x11
    827a:	0e 94 12 76 	call	0xec24	; 0xec24 <cos>
    827e:	6a 83       	std	Y+2, r22	; 0x02
    8280:	7b 83       	std	Y+3, r23	; 0x03
    8282:	8c 83       	std	Y+4, r24	; 0x04
    8284:	9d 83       	std	Y+5, r25	; 0x05
    8286:	6e 85       	ldd	r22, Y+14	; 0x0e
    8288:	7f 85       	ldd	r23, Y+15	; 0x0f
    828a:	88 89       	ldd	r24, Y+16	; 0x10
    828c:	99 89       	ldd	r25, Y+17	; 0x11
    828e:	0e 94 4c 78 	call	0xf098	; 0xf098 <sin>
    8292:	4b 01       	movw	r8, r22
    8294:	5c 01       	movw	r10, r24
    8296:	20 e0       	ldi	r18, 0x00	; 0
    8298:	30 e0       	ldi	r19, 0x00	; 0
    829a:	40 e4       	ldi	r20, 0x40	; 64
    829c:	51 e4       	ldi	r21, 0x41	; 65
    829e:	6a 81       	ldd	r22, Y+2	; 0x02
    82a0:	7b 81       	ldd	r23, Y+3	; 0x03
    82a2:	8c 81       	ldd	r24, Y+4	; 0x04
    82a4:	9d 81       	ldd	r25, Y+5	; 0x05
    82a6:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    82aa:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    82ae:	71 2e       	mov	r7, r17
    82b0:	76 1a       	sub	r7, r22
    82b2:	20 e0       	ldi	r18, 0x00	; 0
    82b4:	30 e0       	ldi	r19, 0x00	; 0
    82b6:	40 e4       	ldi	r20, 0x40	; 64
    82b8:	51 e4       	ldi	r21, 0x41	; 65
    82ba:	c5 01       	movw	r24, r10
    82bc:	b4 01       	movw	r22, r8
    82be:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    82c2:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    82c6:	46 2d       	mov	r20, r6
    82c8:	46 1b       	sub	r20, r22
    82ca:	27 2d       	mov	r18, r7
    82cc:	64 e6       	ldi	r22, 0x64	; 100
    82ce:	82 ed       	ldi	r24, 0xD2	; 210
    82d0:	0e 94 2c 34 	call	0x6858	; 0x6858 <task_twi2_lcd_line>
    82d4:	2e 81       	ldd	r18, Y+6	; 0x06
    82d6:	3f 81       	ldd	r19, Y+7	; 0x07
    82d8:	48 85       	ldd	r20, Y+8	; 0x08
    82da:	59 85       	ldd	r21, Y+9	; 0x09
    82dc:	20 93 e7 22 	sts	0x22E7, r18	; 0x8022e7 <s_rads_x.8194>
    82e0:	30 93 e8 22 	sts	0x22E8, r19	; 0x8022e8 <s_rads_x.8194+0x1>
    82e4:	40 93 e9 22 	sts	0x22E9, r20	; 0x8022e9 <s_rads_x.8194+0x2>
    82e8:	50 93 ea 22 	sts	0x22EA, r21	; 0x8022ea <s_rads_x.8194+0x3>
    82ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    82ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    82f0:	ac 85       	ldd	r26, Y+12	; 0x0c
    82f2:	bd 85       	ldd	r27, Y+13	; 0x0d
    82f4:	80 93 e3 22 	sts	0x22E3, r24	; 0x8022e3 <s_rads_y.8195>
    82f8:	90 93 e4 22 	sts	0x22E4, r25	; 0x8022e4 <s_rads_y.8195+0x1>
    82fc:	a0 93 e5 22 	sts	0x22E5, r26	; 0x8022e5 <s_rads_y.8195+0x2>
    8300:	b0 93 e6 22 	sts	0x22E6, r27	; 0x8022e6 <s_rads_y.8195+0x3>
    8304:	2e 85       	ldd	r18, Y+14	; 0x0e
    8306:	3f 85       	ldd	r19, Y+15	; 0x0f
    8308:	48 89       	ldd	r20, Y+16	; 0x10
    830a:	59 89       	ldd	r21, Y+17	; 0x11
    830c:	20 93 df 22 	sts	0x22DF, r18	; 0x8022df <s_rads_z.8196>
    8310:	30 93 e0 22 	sts	0x22E0, r19	; 0x8022e0 <s_rads_z.8196+0x1>
    8314:	40 93 e1 22 	sts	0x22E1, r20	; 0x8022e1 <s_rads_z.8196+0x2>
    8318:	50 93 e2 22 	sts	0x22E2, r21	; 0x8022e2 <s_rads_z.8196+0x3>
    831c:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <g_pitch_tone_mode>
    8320:	81 30       	cpi	r24, 0x01	; 1
    8322:	81 f5       	brne	.+96     	; 0x8384 <task_twi2_lcd__gyro_gfxgyro+0x496>
    8324:	d2 01       	movw	r26, r4
    8326:	c1 01       	movw	r24, r2
    8328:	8c 0d       	add	r24, r12
    832a:	9d 1d       	adc	r25, r13
    832c:	ae 1d       	adc	r26, r14
    832e:	bf 1d       	adc	r27, r15
    8330:	2a 89       	ldd	r18, Y+18	; 0x12
    8332:	3b 89       	ldd	r19, Y+19	; 0x13
    8334:	4c 89       	ldd	r20, Y+20	; 0x14
    8336:	5d 89       	ldd	r21, Y+21	; 0x15
    8338:	82 0f       	add	r24, r18
    833a:	93 1f       	adc	r25, r19
    833c:	a4 1f       	adc	r26, r20
    833e:	b5 1f       	adc	r27, r21
    8340:	ac 01       	movw	r20, r24
    8342:	bd 01       	movw	r22, r26
    8344:	bb 23       	and	r27, r27
    8346:	3c f4       	brge	.+14     	; 0x8356 <task_twi2_lcd__gyro_gfxgyro+0x468>
    8348:	44 27       	eor	r20, r20
    834a:	55 27       	eor	r21, r21
    834c:	ba 01       	movw	r22, r20
    834e:	48 1b       	sub	r20, r24
    8350:	59 0b       	sbc	r21, r25
    8352:	6a 0b       	sbc	r22, r26
    8354:	7b 0b       	sbc	r23, r27
    8356:	cb 01       	movw	r24, r22
    8358:	ba 01       	movw	r22, r20
    835a:	61 39       	cpi	r22, 0x91	; 145
    835c:	31 e0       	ldi	r19, 0x01	; 1
    835e:	73 07       	cpc	r23, r19
    8360:	81 05       	cpc	r24, r1
    8362:	91 05       	cpc	r25, r1
    8364:	7c f0       	brlt	.+30     	; 0x8384 <task_twi2_lcd__gyro_gfxgyro+0x496>
    8366:	2c eb       	ldi	r18, 0xBC	; 188
    8368:	32 e0       	ldi	r19, 0x02	; 2
    836a:	40 e0       	ldi	r20, 0x00	; 0
    836c:	50 e0       	ldi	r21, 0x00	; 0
    836e:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <__divmodsi4>
    8372:	6a e0       	ldi	r22, 0x0A	; 10
    8374:	82 e1       	ldi	r24, 0x12	; 18
    8376:	82 0f       	add	r24, r18
    8378:	0e 94 85 31 	call	0x630a	; 0x630a <twi2_set_beep>
    837c:	8d e7       	ldi	r24, 0x7D	; 125
    837e:	90 e0       	ldi	r25, 0x00	; 0
    8380:	0e 94 fd 67 	call	0xcffa	; 0xcffa <yield_ms>
    8384:	65 96       	adiw	r28, 0x15	; 21
    8386:	cd bf       	out	0x3d, r28	; 61
    8388:	de bf       	out	0x3e, r29	; 62
    838a:	df 91       	pop	r29
    838c:	cf 91       	pop	r28
    838e:	1f 91       	pop	r17
    8390:	0f 91       	pop	r16
    8392:	ff 90       	pop	r15
    8394:	ef 90       	pop	r14
    8396:	df 90       	pop	r13
    8398:	cf 90       	pop	r12
    839a:	bf 90       	pop	r11
    839c:	af 90       	pop	r10
    839e:	9f 90       	pop	r9
    83a0:	8f 90       	pop	r8
    83a2:	7f 90       	pop	r7
    83a4:	6f 90       	pop	r6
    83a6:	5f 90       	pop	r5
    83a8:	4f 90       	pop	r4
    83aa:	3f 90       	pop	r3
    83ac:	2f 90       	pop	r2
    83ae:	08 95       	ret

000083b0 <task_twi2_lcd__gyro_beepvario>:
    83b0:	cf 92       	push	r12
    83b2:	df 92       	push	r13
    83b4:	ef 92       	push	r14
    83b6:	ff 92       	push	r15
    83b8:	cf 93       	push	r28
    83ba:	df 93       	push	r29
    83bc:	1f 92       	push	r1
    83be:	cd b7       	in	r28, 0x3d	; 61
    83c0:	de b7       	in	r29, 0x3e	; 62
    83c2:	8f b7       	in	r24, 0x3f	; 63
    83c4:	89 83       	std	Y+1, r24	; 0x01
    83c6:	f8 94       	cli
    83c8:	89 81       	ldd	r24, Y+1	; 0x01
    83ca:	c0 90 06 27 	lds	r12, 0x2706	; 0x802706 <g_twi1_baro_p_100>
    83ce:	d0 90 07 27 	lds	r13, 0x2707	; 0x802707 <g_twi1_baro_p_100+0x1>
    83d2:	e0 90 08 27 	lds	r14, 0x2708	; 0x802708 <g_twi1_baro_p_100+0x2>
    83d6:	f0 90 09 27 	lds	r15, 0x2709	; 0x802709 <g_twi1_baro_p_100+0x3>
    83da:	8f bf       	out	0x3f, r24	; 63
    83dc:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <g_pitch_tone_mode>
    83e0:	82 30       	cpi	r24, 0x02	; 2
    83e2:	99 f5       	brne	.+102    	; 0x844a <task_twi2_lcd__gyro_beepvario+0x9a>
    83e4:	40 91 06 27 	lds	r20, 0x2706	; 0x802706 <g_twi1_baro_p_100>
    83e8:	50 91 07 27 	lds	r21, 0x2707	; 0x802707 <g_twi1_baro_p_100+0x1>
    83ec:	60 91 08 27 	lds	r22, 0x2708	; 0x802708 <g_twi1_baro_p_100+0x2>
    83f0:	70 91 09 27 	lds	r23, 0x2709	; 0x802709 <g_twi1_baro_p_100+0x3>
    83f4:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_twi1_baro_p_100.8211>
    83f8:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <s_twi1_baro_p_100.8211+0x1>
    83fc:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <s_twi1_baro_p_100.8211+0x2>
    8400:	b0 91 09 20 	lds	r27, 0x2009	; 0x802009 <s_twi1_baro_p_100.8211+0x3>
    8404:	84 1b       	sub	r24, r20
    8406:	95 0b       	sbc	r25, r21
    8408:	a6 0b       	sbc	r26, r22
    840a:	b7 0b       	sbc	r27, r23
    840c:	8c 59       	subi	r24, 0x9C	; 156
    840e:	9f 4f       	sbci	r25, 0xFF	; 255
    8410:	af 4f       	sbci	r26, 0xFF	; 255
    8412:	bf 4f       	sbci	r27, 0xFF	; 255
    8414:	8a 30       	cpi	r24, 0x0A	; 10
    8416:	91 05       	cpc	r25, r1
    8418:	a1 05       	cpc	r26, r1
    841a:	b1 05       	cpc	r27, r1
    841c:	58 f0       	brcs	.+22     	; 0x8434 <task_twi2_lcd__gyro_beepvario+0x84>
    841e:	8f 3f       	cpi	r24, 0xFF	; 255
    8420:	91 05       	cpc	r25, r1
    8422:	a1 05       	cpc	r26, r1
    8424:	b1 05       	cpc	r27, r1
    8426:	51 f0       	breq	.+20     	; 0x843c <task_twi2_lcd__gyro_beepvario+0x8c>
    8428:	48 f0       	brcs	.+18     	; 0x843c <task_twi2_lcd__gyro_beepvario+0x8c>
    842a:	8f ef       	ldi	r24, 0xFF	; 255
    842c:	90 e0       	ldi	r25, 0x00	; 0
    842e:	a0 e0       	ldi	r26, 0x00	; 0
    8430:	b0 e0       	ldi	r27, 0x00	; 0
    8432:	04 c0       	rjmp	.+8      	; 0x843c <task_twi2_lcd__gyro_beepvario+0x8c>
    8434:	8a e0       	ldi	r24, 0x0A	; 10
    8436:	90 e0       	ldi	r25, 0x00	; 0
    8438:	a0 e0       	ldi	r26, 0x00	; 0
    843a:	b0 e0       	ldi	r27, 0x00	; 0
    843c:	6a e0       	ldi	r22, 0x0A	; 10
    843e:	0e 94 85 31 	call	0x630a	; 0x630a <twi2_set_beep>
    8442:	8d e7       	ldi	r24, 0x7D	; 125
    8444:	90 e0       	ldi	r25, 0x00	; 0
    8446:	0e 94 fd 67 	call	0xcffa	; 0xcffa <yield_ms>
    844a:	c0 92 06 20 	sts	0x2006, r12	; 0x802006 <s_twi1_baro_p_100.8211>
    844e:	d0 92 07 20 	sts	0x2007, r13	; 0x802007 <s_twi1_baro_p_100.8211+0x1>
    8452:	e0 92 08 20 	sts	0x2008, r14	; 0x802008 <s_twi1_baro_p_100.8211+0x2>
    8456:	f0 92 09 20 	sts	0x2009, r15	; 0x802009 <s_twi1_baro_p_100.8211+0x3>
    845a:	0f 90       	pop	r0
    845c:	df 91       	pop	r29
    845e:	cf 91       	pop	r28
    8460:	ff 90       	pop	r15
    8462:	ef 90       	pop	r14
    8464:	df 90       	pop	r13
    8466:	cf 90       	pop	r12
    8468:	08 95       	ret

0000846a <task_twi2_lcd__baro>:
    846a:	bf 92       	push	r11
    846c:	cf 92       	push	r12
    846e:	df 92       	push	r13
    8470:	ef 92       	push	r14
    8472:	ff 92       	push	r15
    8474:	0f 93       	push	r16
    8476:	1f 93       	push	r17
    8478:	cf 93       	push	r28
    847a:	df 93       	push	r29
    847c:	1f 92       	push	r1
    847e:	cd b7       	in	r28, 0x3d	; 61
    8480:	de b7       	in	r29, 0x3e	; 62
    8482:	b8 2e       	mov	r11, r24
    8484:	8f b7       	in	r24, 0x3f	; 63
    8486:	89 83       	std	Y+1, r24	; 0x01
    8488:	f8 94       	cli
    848a:	29 81       	ldd	r18, Y+1	; 0x01
    848c:	60 91 0a 27 	lds	r22, 0x270A	; 0x80270a <g_twi1_baro_temp_100>
    8490:	70 91 0b 27 	lds	r23, 0x270B	; 0x80270b <g_twi1_baro_temp_100+0x1>
    8494:	80 91 0c 27 	lds	r24, 0x270C	; 0x80270c <g_twi1_baro_temp_100+0x2>
    8498:	90 91 0d 27 	lds	r25, 0x270D	; 0x80270d <g_twi1_baro_temp_100+0x3>
    849c:	c0 90 06 27 	lds	r12, 0x2706	; 0x802706 <g_twi1_baro_p_100>
    84a0:	d0 90 07 27 	lds	r13, 0x2707	; 0x802707 <g_twi1_baro_p_100+0x1>
    84a4:	e0 90 08 27 	lds	r14, 0x2708	; 0x802708 <g_twi1_baro_p_100+0x2>
    84a8:	f0 90 09 27 	lds	r15, 0x2709	; 0x802709 <g_twi1_baro_p_100+0x3>
    84ac:	2f bf       	out	0x3f, r18	; 63
    84ae:	00 91 db 22 	lds	r16, 0x22DB	; 0x8022db <s_twi1_baro_temp_100.8222>
    84b2:	10 91 dc 22 	lds	r17, 0x22DC	; 0x8022dc <s_twi1_baro_temp_100.8222+0x1>
    84b6:	20 91 dd 22 	lds	r18, 0x22DD	; 0x8022dd <s_twi1_baro_temp_100.8222+0x2>
    84ba:	30 91 de 22 	lds	r19, 0x22DE	; 0x8022de <s_twi1_baro_temp_100.8222+0x3>
    84be:	60 17       	cp	r22, r16
    84c0:	71 07       	cpc	r23, r17
    84c2:	82 07       	cpc	r24, r18
    84c4:	93 07       	cpc	r25, r19
    84c6:	c1 f0       	breq	.+48     	; 0x84f8 <task_twi2_lcd__baro+0x8e>
    84c8:	60 93 db 22 	sts	0x22DB, r22	; 0x8022db <s_twi1_baro_temp_100.8222>
    84cc:	70 93 dc 22 	sts	0x22DC, r23	; 0x8022dc <s_twi1_baro_temp_100.8222+0x1>
    84d0:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <s_twi1_baro_temp_100.8222+0x2>
    84d4:	90 93 de 22 	sts	0x22DE, r25	; 0x8022de <s_twi1_baro_temp_100.8222+0x3>
    84d8:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    84dc:	20 e0       	ldi	r18, 0x00	; 0
    84de:	30 e0       	ldi	r19, 0x00	; 0
    84e0:	48 ec       	ldi	r20, 0xC8	; 200
    84e2:	52 e4       	ldi	r21, 0x42	; 66
    84e4:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    84e8:	9b 01       	movw	r18, r22
    84ea:	ac 01       	movw	r20, r24
    84ec:	0e ef       	ldi	r16, 0xFE	; 254
    84ee:	1f e2       	ldi	r17, 0x2F	; 47
    84f0:	6a e5       	ldi	r22, 0x5A	; 90
    84f2:	8b 2d       	mov	r24, r11
    84f4:	0e 94 87 33 	call	0x670e	; 0x670e <task_twi2_lcd_print_format_float_P>
    84f8:	80 91 d7 22 	lds	r24, 0x22D7	; 0x8022d7 <s_twi1_baro_p_100.8223>
    84fc:	90 91 d8 22 	lds	r25, 0x22D8	; 0x8022d8 <s_twi1_baro_p_100.8223+0x1>
    8500:	a0 91 d9 22 	lds	r26, 0x22D9	; 0x8022d9 <s_twi1_baro_p_100.8223+0x2>
    8504:	b0 91 da 22 	lds	r27, 0x22DA	; 0x8022da <s_twi1_baro_p_100.8223+0x3>
    8508:	c8 16       	cp	r12, r24
    850a:	d9 06       	cpc	r13, r25
    850c:	ea 06       	cpc	r14, r26
    850e:	fb 06       	cpc	r15, r27
    8510:	d1 f0       	breq	.+52     	; 0x8546 <task_twi2_lcd__baro+0xdc>
    8512:	c0 92 d7 22 	sts	0x22D7, r12	; 0x8022d7 <s_twi1_baro_p_100.8223>
    8516:	d0 92 d8 22 	sts	0x22D8, r13	; 0x8022d8 <s_twi1_baro_p_100.8223+0x1>
    851a:	e0 92 d9 22 	sts	0x22D9, r14	; 0x8022d9 <s_twi1_baro_p_100.8223+0x2>
    851e:	f0 92 da 22 	sts	0x22DA, r15	; 0x8022da <s_twi1_baro_p_100.8223+0x3>
    8522:	c7 01       	movw	r24, r14
    8524:	b6 01       	movw	r22, r12
    8526:	0e 94 b0 76 	call	0xed60	; 0xed60 <__floatsisf>
    852a:	20 e0       	ldi	r18, 0x00	; 0
    852c:	30 e0       	ldi	r19, 0x00	; 0
    852e:	48 ec       	ldi	r20, 0xC8	; 200
    8530:	52 e4       	ldi	r21, 0x42	; 66
    8532:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    8536:	9b 01       	movw	r18, r22
    8538:	ac 01       	movw	r20, r24
    853a:	07 ef       	ldi	r16, 0xF7	; 247
    853c:	1f e2       	ldi	r17, 0x2F	; 47
    853e:	64 e6       	ldi	r22, 0x64	; 100
    8540:	8b 2d       	mov	r24, r11
    8542:	0e 94 87 33 	call	0x670e	; 0x670e <task_twi2_lcd_print_format_float_P>
    8546:	0f 90       	pop	r0
    8548:	df 91       	pop	r29
    854a:	cf 91       	pop	r28
    854c:	1f 91       	pop	r17
    854e:	0f 91       	pop	r16
    8550:	ff 90       	pop	r15
    8552:	ef 90       	pop	r14
    8554:	df 90       	pop	r13
    8556:	cf 90       	pop	r12
    8558:	bf 90       	pop	r11
    855a:	08 95       	ret

0000855c <task_twi>:
    855c:	0f 93       	push	r16
    855e:	80 91 fb 26 	lds	r24, 0x26FB	; 0x8026fb <g_twi2_lcd_version>
    8562:	81 31       	cpi	r24, 0x11	; 17
    8564:	08 f4       	brcc	.+2      	; 0x8568 <task_twi+0xc>
    8566:	03 c1       	rjmp	.+518    	; 0x876e <task_twi+0x212>
    8568:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <g_twi2_lcd_repaint>
    856c:	88 23       	and	r24, r24
    856e:	09 f4       	brne	.+2      	; 0x8572 <task_twi+0x16>
    8570:	b5 c0       	rjmp	.+362    	; 0x86dc <task_twi+0x180>
    8572:	10 92 fa 26 	sts	0x26FA, r1	; 0x8026fa <g_twi2_lcd_repaint>
    8576:	0e 94 aa 34 	call	0x6954	; 0x6954 <task_twi2_lcd_header>
    857a:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    857e:	88 23       	and	r24, r24
    8580:	21 f1       	breq	.+72     	; 0x85ca <task_twi+0x6e>
    8582:	4c e4       	ldi	r20, 0x4C	; 76
    8584:	51 e2       	ldi	r21, 0x21	; 33
    8586:	64 e1       	ldi	r22, 0x14	; 20
    8588:	80 e0       	ldi	r24, 0x00	; 0
    858a:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    858e:	46 e5       	ldi	r20, 0x56	; 86
    8590:	51 e2       	ldi	r21, 0x21	; 33
    8592:	6e e1       	ldi	r22, 0x1E	; 30
    8594:	82 e1       	ldi	r24, 0x12	; 18
    8596:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    859a:	4d e5       	ldi	r20, 0x5D	; 93
    859c:	51 e2       	ldi	r21, 0x21	; 33
    859e:	68 e2       	ldi	r22, 0x28	; 40
    85a0:	82 e1       	ldi	r24, 0x12	; 18
    85a2:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    85a6:	44 e6       	ldi	r20, 0x64	; 100
    85a8:	51 e2       	ldi	r21, 0x21	; 33
    85aa:	62 e3       	ldi	r22, 0x32	; 50
    85ac:	80 e0       	ldi	r24, 0x00	; 0
    85ae:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    85b2:	4e e6       	ldi	r20, 0x6E	; 110
    85b4:	51 e2       	ldi	r21, 0x21	; 33
    85b6:	6c e3       	ldi	r22, 0x3C	; 60
    85b8:	80 e0       	ldi	r24, 0x00	; 0
    85ba:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    85be:	48 e7       	ldi	r20, 0x78	; 120
    85c0:	51 e2       	ldi	r21, 0x21	; 33
    85c2:	66 e4       	ldi	r22, 0x46	; 70
    85c4:	80 e0       	ldi	r24, 0x00	; 0
    85c6:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    85ca:	42 e8       	ldi	r20, 0x82	; 130
    85cc:	51 e2       	ldi	r21, 0x21	; 33
    85ce:	6a e5       	ldi	r22, 0x5A	; 90
    85d0:	80 e0       	ldi	r24, 0x00	; 0
    85d2:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    85d6:	4c e8       	ldi	r20, 0x8C	; 140
    85d8:	51 e2       	ldi	r21, 0x21	; 33
    85da:	64 e6       	ldi	r22, 0x64	; 100
    85dc:	80 e0       	ldi	r24, 0x00	; 0
    85de:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    85e2:	46 e9       	ldi	r20, 0x96	; 150
    85e4:	51 e2       	ldi	r21, 0x21	; 33
    85e6:	6e e6       	ldi	r22, 0x6E	; 110
    85e8:	80 e0       	ldi	r24, 0x00	; 0
    85ea:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    85ee:	40 ea       	ldi	r20, 0xA0	; 160
    85f0:	51 e2       	ldi	r21, 0x21	; 33
    85f2:	68 e7       	ldi	r22, 0x78	; 120
    85f4:	80 e0       	ldi	r24, 0x00	; 0
    85f6:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    85fa:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    85fe:	88 23       	and	r24, r24
    8600:	21 f1       	breq	.+72     	; 0x864a <task_twi+0xee>
    8602:	4a ea       	ldi	r20, 0xAA	; 170
    8604:	51 e2       	ldi	r21, 0x21	; 33
    8606:	64 e1       	ldi	r22, 0x14	; 20
    8608:	80 e6       	ldi	r24, 0x60	; 96
    860a:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    860e:	4c ea       	ldi	r20, 0xAC	; 172
    8610:	51 e2       	ldi	r21, 0x21	; 33
    8612:	6e e1       	ldi	r22, 0x1E	; 30
    8614:	80 e6       	ldi	r24, 0x60	; 96
    8616:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    861a:	4c ea       	ldi	r20, 0xAC	; 172
    861c:	51 e2       	ldi	r21, 0x21	; 33
    861e:	68 e2       	ldi	r22, 0x28	; 40
    8620:	80 e6       	ldi	r24, 0x60	; 96
    8622:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    8626:	4c ea       	ldi	r20, 0xAC	; 172
    8628:	51 e2       	ldi	r21, 0x21	; 33
    862a:	62 e3       	ldi	r22, 0x32	; 50
    862c:	80 e6       	ldi	r24, 0x60	; 96
    862e:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    8632:	4c ea       	ldi	r20, 0xAC	; 172
    8634:	51 e2       	ldi	r21, 0x21	; 33
    8636:	6c e3       	ldi	r22, 0x3C	; 60
    8638:	80 e6       	ldi	r24, 0x60	; 96
    863a:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    863e:	4c ea       	ldi	r20, 0xAC	; 172
    8640:	51 e2       	ldi	r21, 0x21	; 33
    8642:	66 e4       	ldi	r22, 0x46	; 70
    8644:	80 e6       	ldi	r24, 0x60	; 96
    8646:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    864a:	4a ea       	ldi	r20, 0xAA	; 170
    864c:	51 e2       	ldi	r21, 0x21	; 33
    864e:	6a e5       	ldi	r22, 0x5A	; 90
    8650:	80 e6       	ldi	r24, 0x60	; 96
    8652:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    8656:	4e ea       	ldi	r20, 0xAE	; 174
    8658:	51 e2       	ldi	r21, 0x21	; 33
    865a:	64 e6       	ldi	r22, 0x64	; 100
    865c:	8c e6       	ldi	r24, 0x6C	; 108
    865e:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    8662:	4a ea       	ldi	r20, 0xAA	; 170
    8664:	51 e2       	ldi	r21, 0x21	; 33
    8666:	6e e6       	ldi	r22, 0x6E	; 110
    8668:	80 e6       	ldi	r24, 0x60	; 96
    866a:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    866e:	42 eb       	ldi	r20, 0xB2	; 178
    8670:	51 e2       	ldi	r21, 0x21	; 33
    8672:	68 e7       	ldi	r22, 0x78	; 120
    8674:	80 e6       	ldi	r24, 0x60	; 96
    8676:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    867a:	01 e0       	ldi	r16, 0x01	; 1
    867c:	20 e0       	ldi	r18, 0x00	; 0
    867e:	4e e0       	ldi	r20, 0x0E	; 14
    8680:	64 e6       	ldi	r22, 0x64	; 100
    8682:	86 e9       	ldi	r24, 0x96	; 150
    8684:	0e 94 82 34 	call	0x6904	; 0x6904 <task_twi2_lcd_circ>
    8688:	20 e0       	ldi	r18, 0x00	; 0
    868a:	4e e0       	ldi	r20, 0x0E	; 14
    868c:	64 e6       	ldi	r22, 0x64	; 100
    868e:	84 eb       	ldi	r24, 0xB4	; 180
    8690:	0e 94 82 34 	call	0x6904	; 0x6904 <task_twi2_lcd_circ>
    8694:	20 e0       	ldi	r18, 0x00	; 0
    8696:	4e e0       	ldi	r20, 0x0E	; 14
    8698:	64 e6       	ldi	r22, 0x64	; 100
    869a:	82 ed       	ldi	r24, 0xD2	; 210
    869c:	0e 94 82 34 	call	0x6904	; 0x6904 <task_twi2_lcd_circ>
    86a0:	44 eb       	ldi	r20, 0xB4	; 180
    86a2:	51 e2       	ldi	r21, 0x21	; 33
    86a4:	66 e7       	ldi	r22, 0x76	; 118
    86a6:	82 e9       	ldi	r24, 0x92	; 146
    86a8:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    86ac:	47 eb       	ldi	r20, 0xB7	; 183
    86ae:	51 e2       	ldi	r21, 0x21	; 33
    86b0:	66 e7       	ldi	r22, 0x76	; 118
    86b2:	80 eb       	ldi	r24, 0xB0	; 176
    86b4:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    86b8:	4a eb       	ldi	r20, 0xBA	; 186
    86ba:	51 e2       	ldi	r21, 0x21	; 33
    86bc:	66 e7       	ldi	r22, 0x76	; 118
    86be:	8e ec       	ldi	r24, 0xCE	; 206
    86c0:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    86c4:	4d eb       	ldi	r20, 0xBD	; 189
    86c6:	51 e2       	ldi	r21, 0x21	; 33
    86c8:	68 e4       	ldi	r22, 0x48	; 72
    86ca:	81 e7       	ldi	r24, 0x71	; 113
    86cc:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    86d0:	47 ec       	ldi	r20, 0xC7	; 199
    86d2:	51 e2       	ldi	r21, 0x21	; 33
    86d4:	68 e4       	ldi	r22, 0x48	; 72
    86d6:	84 ec       	ldi	r24, 0xC4	; 196
    86d8:	0e 94 c5 33 	call	0x678a	; 0x678a <task_twi2_lcd_str>
    86dc:	05 d9       	rcall	.-3574   	; 0x78e8 <task_twi2_lcd__gyro_gfxmag>
    86de:	15 db       	rcall	.-2518   	; 0x7d0a <task_twi2_lcd__gyro_gfxaccel>
    86e0:	06 dc       	rcall	.-2036   	; 0x7eee <task_twi2_lcd__gyro_gfxgyro>
    86e2:	66 de       	rcall	.-820    	; 0x83b0 <task_twi2_lcd__gyro_beepvario>
    86e4:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <s_lcd_entry_state.8230>
    86e8:	82 30       	cpi	r24, 0x02	; 2
    86ea:	29 f1       	breq	.+74     	; 0x8736 <task_twi+0x1da>
    86ec:	28 f4       	brcc	.+10     	; 0x86f8 <task_twi+0x19c>
    86ee:	88 23       	and	r24, r24
    86f0:	41 f0       	breq	.+16     	; 0x8702 <task_twi+0x1a6>
    86f2:	81 30       	cpi	r24, 0x01	; 1
    86f4:	99 f0       	breq	.+38     	; 0x871c <task_twi+0x1c0>
    86f6:	38 c0       	rjmp	.+112    	; 0x8768 <task_twi+0x20c>
    86f8:	83 30       	cpi	r24, 0x03	; 3
    86fa:	49 f1       	breq	.+82     	; 0x874e <task_twi+0x1f2>
    86fc:	84 30       	cpi	r24, 0x04	; 4
    86fe:	79 f1       	breq	.+94     	; 0x875e <task_twi+0x202>
    8700:	33 c0       	rjmp	.+102    	; 0x8768 <task_twi+0x20c>
    8702:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    8706:	88 23       	and	r24, r24
    8708:	19 f0       	breq	.+6      	; 0x8710 <task_twi+0x1b4>
    870a:	8c e3       	ldi	r24, 0x3C	; 60
    870c:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <task_twi2_lcd__cpu1>
    8710:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <s_lcd_entry_state.8230>
    8714:	8f 5f       	subi	r24, 0xFF	; 255
    8716:	80 93 d6 22 	sts	0x22D6, r24	; 0x8022d6 <s_lcd_entry_state.8230>
    871a:	48 c0       	rjmp	.+144    	; 0x87ac <task_twi+0x250>
    871c:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    8720:	88 23       	and	r24, r24
    8722:	19 f0       	breq	.+6      	; 0x872a <task_twi+0x1ce>
    8724:	8c e3       	ldi	r24, 0x3C	; 60
    8726:	0e 94 57 3b 	call	0x76ae	; 0x76ae <task_twi2_lcd__cpu2>
    872a:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <s_lcd_entry_state.8230>
    872e:	8f 5f       	subi	r24, 0xFF	; 255
    8730:	80 93 d6 22 	sts	0x22D6, r24	; 0x8022d6 <s_lcd_entry_state.8230>
    8734:	3b c0       	rjmp	.+118    	; 0x87ac <task_twi+0x250>
    8736:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    873a:	88 23       	and	r24, r24
    873c:	11 f0       	breq	.+4      	; 0x8742 <task_twi+0x1e6>
    873e:	8c e3       	ldi	r24, 0x3C	; 60
    8740:	15 d8       	rcall	.-4054   	; 0x776c <task_twi2_lcd__cpu3>
    8742:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <s_lcd_entry_state.8230>
    8746:	8f 5f       	subi	r24, 0xFF	; 255
    8748:	80 93 d6 22 	sts	0x22D6, r24	; 0x8022d6 <s_lcd_entry_state.8230>
    874c:	2f c0       	rjmp	.+94     	; 0x87ac <task_twi+0x250>
    874e:	8c e3       	ldi	r24, 0x3C	; 60
    8750:	8c de       	rcall	.-744    	; 0x846a <task_twi2_lcd__baro>
    8752:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <s_lcd_entry_state.8230>
    8756:	8f 5f       	subi	r24, 0xFF	; 255
    8758:	80 93 d6 22 	sts	0x22D6, r24	; 0x8022d6 <s_lcd_entry_state.8230>
    875c:	27 c0       	rjmp	.+78     	; 0x87ac <task_twi+0x250>
    875e:	8c e3       	ldi	r24, 0x3C	; 60
    8760:	64 d8       	rcall	.-3896   	; 0x782a <task_twi2_lcd__hygro>
    8762:	10 92 d6 22 	sts	0x22D6, r1	; 0x8022d6 <s_lcd_entry_state.8230>
    8766:	22 c0       	rjmp	.+68     	; 0x87ac <task_twi+0x250>
    8768:	10 92 d6 22 	sts	0x22D6, r1	; 0x8022d6 <s_lcd_entry_state.8230>
    876c:	1f c0       	rjmp	.+62     	; 0x87ac <task_twi+0x250>
    876e:	80 31       	cpi	r24, 0x10	; 16
    8770:	e9 f4       	brne	.+58     	; 0x87ac <task_twi+0x250>
    8772:	0e 94 e7 30 	call	0x61ce	; 0x61ce <twi2_waitUntilReady>
    8776:	e7 e1       	ldi	r30, 0x17	; 23
    8778:	f0 e2       	ldi	r31, 0x20	; 32
    877a:	84 e8       	ldi	r24, 0x84	; 132
    877c:	81 83       	std	Z+1, r24	; 0x01
    877e:	af e2       	ldi	r26, 0x2F	; 47
    8780:	b5 e2       	ldi	r27, 0x25	; 37
    8782:	81 e0       	ldi	r24, 0x01	; 1
    8784:	8c 93       	st	X, r24
    8786:	80 e8       	ldi	r24, 0x80	; 128
    8788:	11 96       	adiw	r26, 0x01	; 1
    878a:	8c 93       	st	X, r24
    878c:	82 e0       	ldi	r24, 0x02	; 2
    878e:	90 e0       	ldi	r25, 0x00	; 0
    8790:	80 87       	std	Z+8, r24	; 0x08
    8792:	91 87       	std	Z+9, r25	; 0x09
    8794:	40 e0       	ldi	r20, 0x00	; 0
    8796:	bf 01       	movw	r22, r30
    8798:	80 e8       	ldi	r24, 0x80	; 128
    879a:	94 e0       	ldi	r25, 0x04	; 4
    879c:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <twi_master_transfer>
    87a0:	69 e8       	ldi	r22, 0x89	; 137
    87a2:	73 e1       	ldi	r23, 0x13	; 19
    87a4:	80 e0       	ldi	r24, 0x00	; 0
    87a6:	90 e0       	ldi	r25, 0x00	; 0
    87a8:	0e 94 81 2a 	call	0x5502	; 0x5502 <__portable_avr_delay_cycles>
    87ac:	0f 91       	pop	r16
    87ae:	08 95       	ret

000087b0 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    87b0:	08 95       	ret

000087b2 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    87b2:	cf 93       	push	r28
    87b4:	df 93       	push	r29
    87b6:	1f 92       	push	r1
    87b8:	cd b7       	in	r28, 0x3d	; 61
    87ba:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    87bc:	2f b7       	in	r18, 0x3f	; 63
    87be:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    87c0:	f8 94       	cli
	return flags;
    87c2:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    87c4:	28 2f       	mov	r18, r24
    87c6:	39 2f       	mov	r19, r25
    87c8:	21 15       	cp	r18, r1
    87ca:	82 e0       	ldi	r24, 0x02	; 2
    87cc:	38 07       	cpc	r19, r24
    87ce:	29 f4       	brne	.+10     	; 0x87da <adc_set_callback+0x28>
		adca_callback = callback;
    87d0:	60 93 c3 28 	sts	0x28C3, r22	; 0x8028c3 <adca_callback>
    87d4:	70 93 c4 28 	sts	0x28C4, r23	; 0x8028c4 <adca_callback+0x1>
    87d8:	07 c0       	rjmp	.+14     	; 0x87e8 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    87da:	20 34       	cpi	r18, 0x40	; 64
    87dc:	32 40       	sbci	r19, 0x02	; 2
    87de:	21 f4       	brne	.+8      	; 0x87e8 <adc_set_callback+0x36>
		adcb_callback = callback;
    87e0:	60 93 c1 28 	sts	0x28C1, r22	; 0x8028c1 <adcb_callback>
    87e4:	70 93 c2 28 	sts	0x28C2, r23	; 0x8028c2 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    87e8:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    87ea:	0f 90       	pop	r0
    87ec:	df 91       	pop	r29
    87ee:	cf 91       	pop	r28
    87f0:	08 95       	ret

000087f2 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    87f2:	81 15       	cp	r24, r1
    87f4:	22 e0       	ldi	r18, 0x02	; 2
    87f6:	92 07       	cpc	r25, r18
    87f8:	69 f4       	brne	.+26     	; 0x8814 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    87fa:	80 91 32 23 	lds	r24, 0x2332	; 0x802332 <adca_enable_count>
    87fe:	91 e0       	ldi	r25, 0x01	; 1
    8800:	98 0f       	add	r25, r24
    8802:	90 93 32 23 	sts	0x2332, r25	; 0x802332 <adca_enable_count>
    8806:	81 11       	cpse	r24, r1
    8808:	14 c0       	rjmp	.+40     	; 0x8832 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    880a:	62 e0       	ldi	r22, 0x02	; 2
    880c:	81 e0       	ldi	r24, 0x01	; 1
    880e:	0c 94 71 69 	jmp	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    8812:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    8814:	80 34       	cpi	r24, 0x40	; 64
    8816:	92 40       	sbci	r25, 0x02	; 2
    8818:	61 f4       	brne	.+24     	; 0x8832 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    881a:	80 91 31 23 	lds	r24, 0x2331	; 0x802331 <adcb_enable_count>
    881e:	91 e0       	ldi	r25, 0x01	; 1
    8820:	98 0f       	add	r25, r24
    8822:	90 93 31 23 	sts	0x2331, r25	; 0x802331 <adcb_enable_count>
    8826:	81 11       	cpse	r24, r1
    8828:	04 c0       	rjmp	.+8      	; 0x8832 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    882a:	62 e0       	ldi	r22, 0x02	; 2
    882c:	82 e0       	ldi	r24, 0x02	; 2
    882e:	0c 94 71 69 	jmp	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    8832:	08 95       	ret

00008834 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    8834:	81 15       	cp	r24, r1
    8836:	22 e0       	ldi	r18, 0x02	; 2
    8838:	92 07       	cpc	r25, r18
    883a:	61 f4       	brne	.+24     	; 0x8854 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    883c:	80 91 32 23 	lds	r24, 0x2332	; 0x802332 <adca_enable_count>
    8840:	81 50       	subi	r24, 0x01	; 1
    8842:	80 93 32 23 	sts	0x2332, r24	; 0x802332 <adca_enable_count>
    8846:	81 11       	cpse	r24, r1
    8848:	13 c0       	rjmp	.+38     	; 0x8870 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    884a:	62 e0       	ldi	r22, 0x02	; 2
    884c:	81 e0       	ldi	r24, 0x01	; 1
    884e:	0c 94 87 69 	jmp	0xd30e	; 0xd30e <sysclk_disable_module>
    8852:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    8854:	80 34       	cpi	r24, 0x40	; 64
    8856:	92 40       	sbci	r25, 0x02	; 2
    8858:	59 f4       	brne	.+22     	; 0x8870 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    885a:	80 91 31 23 	lds	r24, 0x2331	; 0x802331 <adcb_enable_count>
    885e:	81 50       	subi	r24, 0x01	; 1
    8860:	80 93 31 23 	sts	0x2331, r24	; 0x802331 <adcb_enable_count>
    8864:	81 11       	cpse	r24, r1
    8866:	04 c0       	rjmp	.+8      	; 0x8870 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    8868:	62 e0       	ldi	r22, 0x02	; 2
    886a:	82 e0       	ldi	r24, 0x02	; 2
    886c:	0c 94 87 69 	jmp	0xd30e	; 0xd30e <sysclk_disable_module>
    8870:	08 95       	ret

00008872 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    8872:	ef 92       	push	r14
    8874:	ff 92       	push	r15
    8876:	1f 93       	push	r17
    8878:	cf 93       	push	r28
    887a:	df 93       	push	r29
    887c:	1f 92       	push	r1
    887e:	1f 92       	push	r1
    8880:	cd b7       	in	r28, 0x3d	; 61
    8882:	de b7       	in	r29, 0x3e	; 62
    8884:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8886:	8f b7       	in	r24, 0x3f	; 63
    8888:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    888a:	f8 94       	cli
	return flags;
    888c:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    888e:	c7 01       	movw	r24, r14
    8890:	b0 df       	rcall	.-160    	; 0x87f2 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    8892:	f7 01       	movw	r30, r14
    8894:	80 81       	ld	r24, Z
    8896:	81 60       	ori	r24, 0x01	; 1
    8898:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    889a:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    889c:	80 91 5c 29 	lds	r24, 0x295C	; 0x80295c <sleepmgr_locks+0x1>
    88a0:	8f 3f       	cpi	r24, 0xFF	; 255
    88a2:	09 f4       	brne	.+2      	; 0x88a6 <adc_enable+0x34>
    88a4:	ff cf       	rjmp	.-2      	; 0x88a4 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    88a6:	8f b7       	in	r24, 0x3f	; 63
    88a8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    88aa:	f8 94       	cli
	return flags;
    88ac:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    88ae:	eb e5       	ldi	r30, 0x5B	; 91
    88b0:	f9 e2       	ldi	r31, 0x29	; 41
    88b2:	81 81       	ldd	r24, Z+1	; 0x01
    88b4:	8f 5f       	subi	r24, 0xFF	; 255
    88b6:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    88b8:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    88ba:	0f 90       	pop	r0
    88bc:	0f 90       	pop	r0
    88be:	df 91       	pop	r29
    88c0:	cf 91       	pop	r28
    88c2:	1f 91       	pop	r17
    88c4:	ff 90       	pop	r15
    88c6:	ef 90       	pop	r14
    88c8:	08 95       	ret

000088ca <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
    88ca:	1f 93       	push	r17
    88cc:	cf 93       	push	r28
    88ce:	df 93       	push	r29
    88d0:	1f 92       	push	r1
    88d2:	1f 92       	push	r1
    88d4:	cd b7       	in	r28, 0x3d	; 61
    88d6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    88d8:	2f b7       	in	r18, 0x3f	; 63
    88da:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    88dc:	f8 94       	cli
	return flags;
    88de:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
    88e0:	fc 01       	movw	r30, r24
    88e2:	20 81       	ld	r18, Z
    88e4:	2e 7f       	andi	r18, 0xFE	; 254
	adc_disable_clock(adc);
    88e6:	20 83       	st	Z, r18
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    88e8:	a5 df       	rcall	.-182    	; 0x8834 <adc_disable_clock>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    88ea:	1f bf       	out	0x3f, r17	; 63
    88ec:	80 91 5c 29 	lds	r24, 0x295C	; 0x80295c <sleepmgr_locks+0x1>
    88f0:	81 11       	cpse	r24, r1
    88f2:	01 c0       	rjmp	.+2      	; 0x88f6 <adc_disable+0x2c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    88f4:	ff cf       	rjmp	.-2      	; 0x88f4 <adc_disable+0x2a>
    88f6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    88f8:	8a 83       	std	Y+2, r24	; 0x02
	return flags;
    88fa:	f8 94       	cli
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    88fc:	9a 81       	ldd	r25, Y+2	; 0x02
    88fe:	eb e5       	ldi	r30, 0x5B	; 91
    8900:	f9 e2       	ldi	r31, 0x29	; 41
    8902:	81 81       	ldd	r24, Z+1	; 0x01
    8904:	81 50       	subi	r24, 0x01	; 1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8906:	81 83       	std	Z+1, r24	; 0x01
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    8908:	9f bf       	out	0x3f, r25	; 63
    890a:	0f 90       	pop	r0
    890c:	0f 90       	pop	r0
    890e:	df 91       	pop	r29
    8910:	cf 91       	pop	r28
    8912:	1f 91       	pop	r17
    8914:	08 95       	ret

00008916 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    8916:	1f 92       	push	r1
    8918:	0f 92       	push	r0
    891a:	0f b6       	in	r0, 0x3f	; 63
    891c:	0f 92       	push	r0
    891e:	11 24       	eor	r1, r1
    8920:	0b b6       	in	r0, 0x3b	; 59
    8922:	0f 92       	push	r0
    8924:	2f 93       	push	r18
    8926:	3f 93       	push	r19
    8928:	4f 93       	push	r20
    892a:	5f 93       	push	r21
    892c:	6f 93       	push	r22
    892e:	7f 93       	push	r23
    8930:	8f 93       	push	r24
    8932:	9f 93       	push	r25
    8934:	af 93       	push	r26
    8936:	bf 93       	push	r27
    8938:	ef 93       	push	r30
    893a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    893c:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    8940:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    8944:	e0 91 c3 28 	lds	r30, 0x28C3	; 0x8028c3 <adca_callback>
    8948:	f0 91 c4 28 	lds	r31, 0x28C4	; 0x8028c4 <adca_callback+0x1>
    894c:	61 e0       	ldi	r22, 0x01	; 1
    894e:	80 e0       	ldi	r24, 0x00	; 0
    8950:	92 e0       	ldi	r25, 0x02	; 2
    8952:	19 95       	eicall
}
    8954:	ff 91       	pop	r31
    8956:	ef 91       	pop	r30
    8958:	bf 91       	pop	r27
    895a:	af 91       	pop	r26
    895c:	9f 91       	pop	r25
    895e:	8f 91       	pop	r24
    8960:	7f 91       	pop	r23
    8962:	6f 91       	pop	r22
    8964:	5f 91       	pop	r21
    8966:	4f 91       	pop	r20
    8968:	3f 91       	pop	r19
    896a:	2f 91       	pop	r18
    896c:	0f 90       	pop	r0
    896e:	0b be       	out	0x3b, r0	; 59
    8970:	0f 90       	pop	r0
    8972:	0f be       	out	0x3f, r0	; 63
    8974:	0f 90       	pop	r0
    8976:	1f 90       	pop	r1
    8978:	18 95       	reti

0000897a <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    897a:	1f 92       	push	r1
    897c:	0f 92       	push	r0
    897e:	0f b6       	in	r0, 0x3f	; 63
    8980:	0f 92       	push	r0
    8982:	11 24       	eor	r1, r1
    8984:	0b b6       	in	r0, 0x3b	; 59
    8986:	0f 92       	push	r0
    8988:	2f 93       	push	r18
    898a:	3f 93       	push	r19
    898c:	4f 93       	push	r20
    898e:	5f 93       	push	r21
    8990:	6f 93       	push	r22
    8992:	7f 93       	push	r23
    8994:	8f 93       	push	r24
    8996:	9f 93       	push	r25
    8998:	af 93       	push	r26
    899a:	bf 93       	push	r27
    899c:	ef 93       	push	r30
    899e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    89a0:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    89a4:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    89a8:	e0 91 c3 28 	lds	r30, 0x28C3	; 0x8028c3 <adca_callback>
    89ac:	f0 91 c4 28 	lds	r31, 0x28C4	; 0x8028c4 <adca_callback+0x1>
    89b0:	62 e0       	ldi	r22, 0x02	; 2
    89b2:	80 e0       	ldi	r24, 0x00	; 0
    89b4:	92 e0       	ldi	r25, 0x02	; 2
    89b6:	19 95       	eicall
}
    89b8:	ff 91       	pop	r31
    89ba:	ef 91       	pop	r30
    89bc:	bf 91       	pop	r27
    89be:	af 91       	pop	r26
    89c0:	9f 91       	pop	r25
    89c2:	8f 91       	pop	r24
    89c4:	7f 91       	pop	r23
    89c6:	6f 91       	pop	r22
    89c8:	5f 91       	pop	r21
    89ca:	4f 91       	pop	r20
    89cc:	3f 91       	pop	r19
    89ce:	2f 91       	pop	r18
    89d0:	0f 90       	pop	r0
    89d2:	0b be       	out	0x3b, r0	; 59
    89d4:	0f 90       	pop	r0
    89d6:	0f be       	out	0x3f, r0	; 63
    89d8:	0f 90       	pop	r0
    89da:	1f 90       	pop	r1
    89dc:	18 95       	reti

000089de <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    89de:	1f 92       	push	r1
    89e0:	0f 92       	push	r0
    89e2:	0f b6       	in	r0, 0x3f	; 63
    89e4:	0f 92       	push	r0
    89e6:	11 24       	eor	r1, r1
    89e8:	0b b6       	in	r0, 0x3b	; 59
    89ea:	0f 92       	push	r0
    89ec:	2f 93       	push	r18
    89ee:	3f 93       	push	r19
    89f0:	4f 93       	push	r20
    89f2:	5f 93       	push	r21
    89f4:	6f 93       	push	r22
    89f6:	7f 93       	push	r23
    89f8:	8f 93       	push	r24
    89fa:	9f 93       	push	r25
    89fc:	af 93       	push	r26
    89fe:	bf 93       	push	r27
    8a00:	ef 93       	push	r30
    8a02:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    8a04:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    8a08:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    8a0c:	e0 91 c3 28 	lds	r30, 0x28C3	; 0x8028c3 <adca_callback>
    8a10:	f0 91 c4 28 	lds	r31, 0x28C4	; 0x8028c4 <adca_callback+0x1>
    8a14:	64 e0       	ldi	r22, 0x04	; 4
    8a16:	80 e0       	ldi	r24, 0x00	; 0
    8a18:	92 e0       	ldi	r25, 0x02	; 2
    8a1a:	19 95       	eicall
}
    8a1c:	ff 91       	pop	r31
    8a1e:	ef 91       	pop	r30
    8a20:	bf 91       	pop	r27
    8a22:	af 91       	pop	r26
    8a24:	9f 91       	pop	r25
    8a26:	8f 91       	pop	r24
    8a28:	7f 91       	pop	r23
    8a2a:	6f 91       	pop	r22
    8a2c:	5f 91       	pop	r21
    8a2e:	4f 91       	pop	r20
    8a30:	3f 91       	pop	r19
    8a32:	2f 91       	pop	r18
    8a34:	0f 90       	pop	r0
    8a36:	0b be       	out	0x3b, r0	; 59
    8a38:	0f 90       	pop	r0
    8a3a:	0f be       	out	0x3f, r0	; 63
    8a3c:	0f 90       	pop	r0
    8a3e:	1f 90       	pop	r1
    8a40:	18 95       	reti

00008a42 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    8a42:	1f 92       	push	r1
    8a44:	0f 92       	push	r0
    8a46:	0f b6       	in	r0, 0x3f	; 63
    8a48:	0f 92       	push	r0
    8a4a:	11 24       	eor	r1, r1
    8a4c:	0b b6       	in	r0, 0x3b	; 59
    8a4e:	0f 92       	push	r0
    8a50:	2f 93       	push	r18
    8a52:	3f 93       	push	r19
    8a54:	4f 93       	push	r20
    8a56:	5f 93       	push	r21
    8a58:	6f 93       	push	r22
    8a5a:	7f 93       	push	r23
    8a5c:	8f 93       	push	r24
    8a5e:	9f 93       	push	r25
    8a60:	af 93       	push	r26
    8a62:	bf 93       	push	r27
    8a64:	ef 93       	push	r30
    8a66:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    8a68:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    8a6c:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    8a70:	e0 91 c3 28 	lds	r30, 0x28C3	; 0x8028c3 <adca_callback>
    8a74:	f0 91 c4 28 	lds	r31, 0x28C4	; 0x8028c4 <adca_callback+0x1>
    8a78:	68 e0       	ldi	r22, 0x08	; 8
    8a7a:	80 e0       	ldi	r24, 0x00	; 0
    8a7c:	92 e0       	ldi	r25, 0x02	; 2
    8a7e:	19 95       	eicall
}
    8a80:	ff 91       	pop	r31
    8a82:	ef 91       	pop	r30
    8a84:	bf 91       	pop	r27
    8a86:	af 91       	pop	r26
    8a88:	9f 91       	pop	r25
    8a8a:	8f 91       	pop	r24
    8a8c:	7f 91       	pop	r23
    8a8e:	6f 91       	pop	r22
    8a90:	5f 91       	pop	r21
    8a92:	4f 91       	pop	r20
    8a94:	3f 91       	pop	r19
    8a96:	2f 91       	pop	r18
    8a98:	0f 90       	pop	r0
    8a9a:	0b be       	out	0x3b, r0	; 59
    8a9c:	0f 90       	pop	r0
    8a9e:	0f be       	out	0x3f, r0	; 63
    8aa0:	0f 90       	pop	r0
    8aa2:	1f 90       	pop	r1
    8aa4:	18 95       	reti

00008aa6 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    8aa6:	1f 92       	push	r1
    8aa8:	0f 92       	push	r0
    8aaa:	0f b6       	in	r0, 0x3f	; 63
    8aac:	0f 92       	push	r0
    8aae:	11 24       	eor	r1, r1
    8ab0:	0b b6       	in	r0, 0x3b	; 59
    8ab2:	0f 92       	push	r0
    8ab4:	2f 93       	push	r18
    8ab6:	3f 93       	push	r19
    8ab8:	4f 93       	push	r20
    8aba:	5f 93       	push	r21
    8abc:	6f 93       	push	r22
    8abe:	7f 93       	push	r23
    8ac0:	8f 93       	push	r24
    8ac2:	9f 93       	push	r25
    8ac4:	af 93       	push	r26
    8ac6:	bf 93       	push	r27
    8ac8:	ef 93       	push	r30
    8aca:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    8acc:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    8ad0:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    8ad4:	e0 91 c1 28 	lds	r30, 0x28C1	; 0x8028c1 <adcb_callback>
    8ad8:	f0 91 c2 28 	lds	r31, 0x28C2	; 0x8028c2 <adcb_callback+0x1>
    8adc:	61 e0       	ldi	r22, 0x01	; 1
    8ade:	80 e4       	ldi	r24, 0x40	; 64
    8ae0:	92 e0       	ldi	r25, 0x02	; 2
    8ae2:	19 95       	eicall
}
    8ae4:	ff 91       	pop	r31
    8ae6:	ef 91       	pop	r30
    8ae8:	bf 91       	pop	r27
    8aea:	af 91       	pop	r26
    8aec:	9f 91       	pop	r25
    8aee:	8f 91       	pop	r24
    8af0:	7f 91       	pop	r23
    8af2:	6f 91       	pop	r22
    8af4:	5f 91       	pop	r21
    8af6:	4f 91       	pop	r20
    8af8:	3f 91       	pop	r19
    8afa:	2f 91       	pop	r18
    8afc:	0f 90       	pop	r0
    8afe:	0b be       	out	0x3b, r0	; 59
    8b00:	0f 90       	pop	r0
    8b02:	0f be       	out	0x3f, r0	; 63
    8b04:	0f 90       	pop	r0
    8b06:	1f 90       	pop	r1
    8b08:	18 95       	reti

00008b0a <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    8b0a:	1f 92       	push	r1
    8b0c:	0f 92       	push	r0
    8b0e:	0f b6       	in	r0, 0x3f	; 63
    8b10:	0f 92       	push	r0
    8b12:	11 24       	eor	r1, r1
    8b14:	0b b6       	in	r0, 0x3b	; 59
    8b16:	0f 92       	push	r0
    8b18:	2f 93       	push	r18
    8b1a:	3f 93       	push	r19
    8b1c:	4f 93       	push	r20
    8b1e:	5f 93       	push	r21
    8b20:	6f 93       	push	r22
    8b22:	7f 93       	push	r23
    8b24:	8f 93       	push	r24
    8b26:	9f 93       	push	r25
    8b28:	af 93       	push	r26
    8b2a:	bf 93       	push	r27
    8b2c:	ef 93       	push	r30
    8b2e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    8b30:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    8b34:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    8b38:	e0 91 c1 28 	lds	r30, 0x28C1	; 0x8028c1 <adcb_callback>
    8b3c:	f0 91 c2 28 	lds	r31, 0x28C2	; 0x8028c2 <adcb_callback+0x1>
    8b40:	62 e0       	ldi	r22, 0x02	; 2
    8b42:	80 e4       	ldi	r24, 0x40	; 64
    8b44:	92 e0       	ldi	r25, 0x02	; 2
    8b46:	19 95       	eicall
}
    8b48:	ff 91       	pop	r31
    8b4a:	ef 91       	pop	r30
    8b4c:	bf 91       	pop	r27
    8b4e:	af 91       	pop	r26
    8b50:	9f 91       	pop	r25
    8b52:	8f 91       	pop	r24
    8b54:	7f 91       	pop	r23
    8b56:	6f 91       	pop	r22
    8b58:	5f 91       	pop	r21
    8b5a:	4f 91       	pop	r20
    8b5c:	3f 91       	pop	r19
    8b5e:	2f 91       	pop	r18
    8b60:	0f 90       	pop	r0
    8b62:	0b be       	out	0x3b, r0	; 59
    8b64:	0f 90       	pop	r0
    8b66:	0f be       	out	0x3f, r0	; 63
    8b68:	0f 90       	pop	r0
    8b6a:	1f 90       	pop	r1
    8b6c:	18 95       	reti

00008b6e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    8b6e:	1f 92       	push	r1
    8b70:	0f 92       	push	r0
    8b72:	0f b6       	in	r0, 0x3f	; 63
    8b74:	0f 92       	push	r0
    8b76:	11 24       	eor	r1, r1
    8b78:	0b b6       	in	r0, 0x3b	; 59
    8b7a:	0f 92       	push	r0
    8b7c:	2f 93       	push	r18
    8b7e:	3f 93       	push	r19
    8b80:	4f 93       	push	r20
    8b82:	5f 93       	push	r21
    8b84:	6f 93       	push	r22
    8b86:	7f 93       	push	r23
    8b88:	8f 93       	push	r24
    8b8a:	9f 93       	push	r25
    8b8c:	af 93       	push	r26
    8b8e:	bf 93       	push	r27
    8b90:	ef 93       	push	r30
    8b92:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    8b94:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    8b98:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    8b9c:	e0 91 c1 28 	lds	r30, 0x28C1	; 0x8028c1 <adcb_callback>
    8ba0:	f0 91 c2 28 	lds	r31, 0x28C2	; 0x8028c2 <adcb_callback+0x1>
    8ba4:	64 e0       	ldi	r22, 0x04	; 4
    8ba6:	80 e4       	ldi	r24, 0x40	; 64
    8ba8:	92 e0       	ldi	r25, 0x02	; 2
    8baa:	19 95       	eicall
}
    8bac:	ff 91       	pop	r31
    8bae:	ef 91       	pop	r30
    8bb0:	bf 91       	pop	r27
    8bb2:	af 91       	pop	r26
    8bb4:	9f 91       	pop	r25
    8bb6:	8f 91       	pop	r24
    8bb8:	7f 91       	pop	r23
    8bba:	6f 91       	pop	r22
    8bbc:	5f 91       	pop	r21
    8bbe:	4f 91       	pop	r20
    8bc0:	3f 91       	pop	r19
    8bc2:	2f 91       	pop	r18
    8bc4:	0f 90       	pop	r0
    8bc6:	0b be       	out	0x3b, r0	; 59
    8bc8:	0f 90       	pop	r0
    8bca:	0f be       	out	0x3f, r0	; 63
    8bcc:	0f 90       	pop	r0
    8bce:	1f 90       	pop	r1
    8bd0:	18 95       	reti

00008bd2 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    8bd2:	1f 92       	push	r1
    8bd4:	0f 92       	push	r0
    8bd6:	0f b6       	in	r0, 0x3f	; 63
    8bd8:	0f 92       	push	r0
    8bda:	11 24       	eor	r1, r1
    8bdc:	0b b6       	in	r0, 0x3b	; 59
    8bde:	0f 92       	push	r0
    8be0:	2f 93       	push	r18
    8be2:	3f 93       	push	r19
    8be4:	4f 93       	push	r20
    8be6:	5f 93       	push	r21
    8be8:	6f 93       	push	r22
    8bea:	7f 93       	push	r23
    8bec:	8f 93       	push	r24
    8bee:	9f 93       	push	r25
    8bf0:	af 93       	push	r26
    8bf2:	bf 93       	push	r27
    8bf4:	ef 93       	push	r30
    8bf6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    8bf8:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    8bfc:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    8c00:	e0 91 c1 28 	lds	r30, 0x28C1	; 0x8028c1 <adcb_callback>
    8c04:	f0 91 c2 28 	lds	r31, 0x28C2	; 0x8028c2 <adcb_callback+0x1>
    8c08:	68 e0       	ldi	r22, 0x08	; 8
    8c0a:	80 e4       	ldi	r24, 0x40	; 64
    8c0c:	92 e0       	ldi	r25, 0x02	; 2
    8c0e:	19 95       	eicall
}
    8c10:	ff 91       	pop	r31
    8c12:	ef 91       	pop	r30
    8c14:	bf 91       	pop	r27
    8c16:	af 91       	pop	r26
    8c18:	9f 91       	pop	r25
    8c1a:	8f 91       	pop	r24
    8c1c:	7f 91       	pop	r23
    8c1e:	6f 91       	pop	r22
    8c20:	5f 91       	pop	r21
    8c22:	4f 91       	pop	r20
    8c24:	3f 91       	pop	r19
    8c26:	2f 91       	pop	r18
    8c28:	0f 90       	pop	r0
    8c2a:	0b be       	out	0x3b, r0	; 59
    8c2c:	0f 90       	pop	r0
    8c2e:	0f be       	out	0x3f, r0	; 63
    8c30:	0f 90       	pop	r0
    8c32:	1f 90       	pop	r1
    8c34:	18 95       	reti

00008c36 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    8c36:	bf 92       	push	r11
    8c38:	cf 92       	push	r12
    8c3a:	df 92       	push	r13
    8c3c:	ef 92       	push	r14
    8c3e:	ff 92       	push	r15
    8c40:	0f 93       	push	r16
    8c42:	1f 93       	push	r17
    8c44:	cf 93       	push	r28
    8c46:	df 93       	push	r29
    8c48:	1f 92       	push	r1
    8c4a:	cd b7       	in	r28, 0x3d	; 61
    8c4c:	de b7       	in	r29, 0x3e	; 62
    8c4e:	8c 01       	movw	r16, r24
    8c50:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    8c52:	81 15       	cp	r24, r1
    8c54:	22 e0       	ldi	r18, 0x02	; 2
    8c56:	92 07       	cpc	r25, r18
    8c58:	81 f4       	brne	.+32     	; 0x8c7a <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    8c5a:	61 e2       	ldi	r22, 0x21	; 33
    8c5c:	70 e0       	ldi	r23, 0x00	; 0
    8c5e:	82 e0       	ldi	r24, 0x02	; 2
    8c60:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    8c64:	c8 2e       	mov	r12, r24
    8c66:	d1 2c       	mov	r13, r1
    8c68:	60 e2       	ldi	r22, 0x20	; 32
    8c6a:	70 e0       	ldi	r23, 0x00	; 0
    8c6c:	82 e0       	ldi	r24, 0x02	; 2
    8c6e:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    8c72:	dc 2c       	mov	r13, r12
    8c74:	cc 24       	eor	r12, r12
    8c76:	c8 2a       	or	r12, r24
    8c78:	12 c0       	rjmp	.+36     	; 0x8c9e <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    8c7a:	80 34       	cpi	r24, 0x40	; 64
    8c7c:	92 40       	sbci	r25, 0x02	; 2
    8c7e:	d1 f5       	brne	.+116    	; 0x8cf4 <adc_write_configuration+0xbe>
    8c80:	65 e2       	ldi	r22, 0x25	; 37
    8c82:	70 e0       	ldi	r23, 0x00	; 0
    8c84:	82 e0       	ldi	r24, 0x02	; 2
    8c86:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    8c8a:	c8 2e       	mov	r12, r24
    8c8c:	d1 2c       	mov	r13, r1
    8c8e:	64 e2       	ldi	r22, 0x24	; 36
    8c90:	70 e0       	ldi	r23, 0x00	; 0
    8c92:	82 e0       	ldi	r24, 0x02	; 2
    8c94:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    8c98:	dc 2c       	mov	r13, r12
    8c9a:	cc 24       	eor	r12, r12
    8c9c:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8c9e:	8f b7       	in	r24, 0x3f	; 63
    8ca0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    8ca2:	f8 94       	cli
	return flags;
    8ca4:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    8ca6:	c8 01       	movw	r24, r16
    8ca8:	a4 dd       	rcall	.-1208   	; 0x87f2 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    8caa:	f8 01       	movw	r30, r16
    8cac:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    8cae:	92 e0       	ldi	r25, 0x02	; 2
    8cb0:	90 83       	st	Z, r25
	adc->CAL = cal;
    8cb2:	c4 86       	std	Z+12, r12	; 0x0c
    8cb4:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    8cb6:	f7 01       	movw	r30, r14
    8cb8:	25 81       	ldd	r18, Z+5	; 0x05
    8cba:	36 81       	ldd	r19, Z+6	; 0x06
    8cbc:	f8 01       	movw	r30, r16
    8cbe:	20 8f       	std	Z+24, r18	; 0x18
    8cc0:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    8cc2:	f7 01       	movw	r30, r14
    8cc4:	92 81       	ldd	r25, Z+2	; 0x02
    8cc6:	f8 01       	movw	r30, r16
    8cc8:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    8cca:	f7 01       	movw	r30, r14
    8ccc:	94 81       	ldd	r25, Z+4	; 0x04
    8cce:	f8 01       	movw	r30, r16
    8cd0:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    8cd2:	f7 01       	movw	r30, r14
    8cd4:	93 81       	ldd	r25, Z+3	; 0x03
    8cd6:	f8 01       	movw	r30, r16
    8cd8:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    8cda:	f7 01       	movw	r30, r14
    8cdc:	91 81       	ldd	r25, Z+1	; 0x01
    8cde:	f8 01       	movw	r30, r16
    8ce0:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    8ce2:	81 70       	andi	r24, 0x01	; 1
    8ce4:	f7 01       	movw	r30, r14
    8ce6:	90 81       	ld	r25, Z
    8ce8:	89 2b       	or	r24, r25
    8cea:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    8cec:	80 83       	st	Z, r24
    8cee:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8cf0:	a1 dd       	rcall	.-1214   	; 0x8834 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    8cf2:	bf be       	out	0x3f, r11	; 63
    8cf4:	0f 90       	pop	r0
    8cf6:	df 91       	pop	r29
    8cf8:	cf 91       	pop	r28
    8cfa:	1f 91       	pop	r17
    8cfc:	0f 91       	pop	r16
    8cfe:	ff 90       	pop	r15
    8d00:	ef 90       	pop	r14
    8d02:	df 90       	pop	r13
    8d04:	cf 90       	pop	r12
    8d06:	bf 90       	pop	r11
    8d08:	08 95       	ret

00008d0a <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    8d0a:	df 92       	push	r13
    8d0c:	ef 92       	push	r14
    8d0e:	ff 92       	push	r15
    8d10:	0f 93       	push	r16
    8d12:	1f 93       	push	r17
    8d14:	cf 93       	push	r28
    8d16:	df 93       	push	r29
    8d18:	1f 92       	push	r1
    8d1a:	cd b7       	in	r28, 0x3d	; 61
    8d1c:	de b7       	in	r29, 0x3e	; 62
    8d1e:	8c 01       	movw	r16, r24
    8d20:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8d22:	8f b7       	in	r24, 0x3f	; 63
    8d24:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    8d26:	f8 94       	cli
	return flags;
    8d28:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    8d2a:	c8 01       	movw	r24, r16
    8d2c:	62 dd       	rcall	.-1340   	; 0x87f2 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    8d2e:	f8 01       	movw	r30, r16
    8d30:	80 81       	ld	r24, Z
    8d32:	80 7c       	andi	r24, 0xC0	; 192
    8d34:	f7 01       	movw	r30, r14
    8d36:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    8d38:	f8 01       	movw	r30, r16
    8d3a:	80 8d       	ldd	r24, Z+24	; 0x18
    8d3c:	91 8d       	ldd	r25, Z+25	; 0x19
    8d3e:	f7 01       	movw	r30, r14
    8d40:	85 83       	std	Z+5, r24	; 0x05
    8d42:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    8d44:	f8 01       	movw	r30, r16
    8d46:	82 81       	ldd	r24, Z+2	; 0x02
    8d48:	f7 01       	movw	r30, r14
    8d4a:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    8d4c:	f8 01       	movw	r30, r16
    8d4e:	84 81       	ldd	r24, Z+4	; 0x04
    8d50:	f7 01       	movw	r30, r14
    8d52:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    8d54:	f8 01       	movw	r30, r16
    8d56:	83 81       	ldd	r24, Z+3	; 0x03
    8d58:	f7 01       	movw	r30, r14
    8d5a:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    8d5c:	f8 01       	movw	r30, r16
    8d5e:	81 81       	ldd	r24, Z+1	; 0x01
    8d60:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    8d62:	81 83       	std	Z+1, r24	; 0x01
    8d64:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8d66:	66 dd       	rcall	.-1332   	; 0x8834 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    8d68:	df be       	out	0x3f, r13	; 63
    8d6a:	0f 90       	pop	r0
    8d6c:	df 91       	pop	r29
    8d6e:	cf 91       	pop	r28
    8d70:	1f 91       	pop	r17
    8d72:	0f 91       	pop	r16
    8d74:	ff 90       	pop	r15
    8d76:	ef 90       	pop	r14
    8d78:	df 90       	pop	r13
    8d7a:	08 95       	ret

00008d7c <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    8d7c:	af 92       	push	r10
    8d7e:	bf 92       	push	r11
    8d80:	cf 92       	push	r12
    8d82:	df 92       	push	r13
    8d84:	ef 92       	push	r14
    8d86:	ff 92       	push	r15
    8d88:	0f 93       	push	r16
    8d8a:	1f 93       	push	r17
    8d8c:	cf 93       	push	r28
    8d8e:	df 93       	push	r29
    8d90:	1f 92       	push	r1
    8d92:	cd b7       	in	r28, 0x3d	; 61
    8d94:	de b7       	in	r29, 0x3e	; 62
    8d96:	6c 01       	movw	r12, r24
    8d98:	b6 2e       	mov	r11, r22
    8d9a:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    8d9c:	86 2f       	mov	r24, r22
    8d9e:	83 70       	andi	r24, 0x03	; 3
    8da0:	29 f4       	brne	.+10     	; 0x8dac <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    8da2:	96 2f       	mov	r25, r22
    8da4:	96 95       	lsr	r25
    8da6:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    8da8:	82 e0       	ldi	r24, 0x02	; 2
    8daa:	02 c0       	rjmp	.+4      	; 0x8db0 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    8dac:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    8dae:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    8db0:	90 ff       	sbrs	r25, 0
		index++;
    8db2:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    8db4:	86 01       	movw	r16, r12
    8db6:	00 5e       	subi	r16, 0xE0	; 224
    8db8:	1f 4f       	sbci	r17, 0xFF	; 255
    8dba:	98 e0       	ldi	r25, 0x08	; 8
    8dbc:	89 9f       	mul	r24, r25
    8dbe:	00 0d       	add	r16, r0
    8dc0:	11 1d       	adc	r17, r1
    8dc2:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8dc4:	8f b7       	in	r24, 0x3f	; 63
    8dc6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    8dc8:	f8 94       	cli
	return flags;
    8dca:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    8dcc:	c6 01       	movw	r24, r12
    8dce:	11 dd       	rcall	.-1502   	; 0x87f2 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    8dd0:	f7 01       	movw	r30, r14
    8dd2:	80 81       	ld	r24, Z
    8dd4:	f8 01       	movw	r30, r16
    8dd6:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    8dd8:	f7 01       	movw	r30, r14
    8dda:	82 81       	ldd	r24, Z+2	; 0x02
    8ddc:	f8 01       	movw	r30, r16
    8dde:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    8de0:	f7 01       	movw	r30, r14
    8de2:	81 81       	ldd	r24, Z+1	; 0x01
    8de4:	f8 01       	movw	r30, r16
    8de6:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    8de8:	b0 fe       	sbrs	r11, 0
    8dea:	04 c0       	rjmp	.+8      	; 0x8df4 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    8dec:	f7 01       	movw	r30, r14
    8dee:	83 81       	ldd	r24, Z+3	; 0x03
    8df0:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    8df2:	86 83       	std	Z+6, r24	; 0x06
    8df4:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8df6:	1e dd       	rcall	.-1476   	; 0x8834 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    8df8:	af be       	out	0x3f, r10	; 63
    8dfa:	0f 90       	pop	r0
    8dfc:	df 91       	pop	r29
    8dfe:	cf 91       	pop	r28
    8e00:	1f 91       	pop	r17
    8e02:	0f 91       	pop	r16
    8e04:	ff 90       	pop	r15
    8e06:	ef 90       	pop	r14
    8e08:	df 90       	pop	r13
    8e0a:	cf 90       	pop	r12
    8e0c:	bf 90       	pop	r11
    8e0e:	af 90       	pop	r10
    8e10:	08 95       	ret

00008e12 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    8e12:	af 92       	push	r10
    8e14:	bf 92       	push	r11
    8e16:	cf 92       	push	r12
    8e18:	df 92       	push	r13
    8e1a:	ef 92       	push	r14
    8e1c:	ff 92       	push	r15
    8e1e:	0f 93       	push	r16
    8e20:	1f 93       	push	r17
    8e22:	cf 93       	push	r28
    8e24:	df 93       	push	r29
    8e26:	1f 92       	push	r1
    8e28:	cd b7       	in	r28, 0x3d	; 61
    8e2a:	de b7       	in	r29, 0x3e	; 62
    8e2c:	6c 01       	movw	r12, r24
    8e2e:	b6 2e       	mov	r11, r22
    8e30:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    8e32:	86 2f       	mov	r24, r22
    8e34:	83 70       	andi	r24, 0x03	; 3
    8e36:	29 f4       	brne	.+10     	; 0x8e42 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    8e38:	96 2f       	mov	r25, r22
    8e3a:	96 95       	lsr	r25
    8e3c:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    8e3e:	82 e0       	ldi	r24, 0x02	; 2
    8e40:	02 c0       	rjmp	.+4      	; 0x8e46 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    8e42:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    8e44:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    8e46:	90 ff       	sbrs	r25, 0
		index++;
    8e48:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    8e4a:	86 01       	movw	r16, r12
    8e4c:	00 5e       	subi	r16, 0xE0	; 224
    8e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    8e50:	98 e0       	ldi	r25, 0x08	; 8
    8e52:	89 9f       	mul	r24, r25
    8e54:	00 0d       	add	r16, r0
    8e56:	11 1d       	adc	r17, r1
    8e58:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8e5a:	8f b7       	in	r24, 0x3f	; 63
    8e5c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    8e5e:	f8 94       	cli
	return flags;
    8e60:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    8e62:	c6 01       	movw	r24, r12
    8e64:	c6 dc       	rcall	.-1652   	; 0x87f2 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    8e66:	f8 01       	movw	r30, r16
    8e68:	80 81       	ld	r24, Z
    8e6a:	f7 01       	movw	r30, r14
    8e6c:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    8e6e:	f8 01       	movw	r30, r16
    8e70:	82 81       	ldd	r24, Z+2	; 0x02
    8e72:	f7 01       	movw	r30, r14
    8e74:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    8e76:	f8 01       	movw	r30, r16
    8e78:	81 81       	ldd	r24, Z+1	; 0x01
    8e7a:	f7 01       	movw	r30, r14
    8e7c:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    8e7e:	b0 fe       	sbrs	r11, 0
    8e80:	04 c0       	rjmp	.+8      	; 0x8e8a <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    8e82:	f8 01       	movw	r30, r16
    8e84:	86 81       	ldd	r24, Z+6	; 0x06
    8e86:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    8e88:	83 83       	std	Z+3, r24	; 0x03
    8e8a:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8e8c:	d3 dc       	rcall	.-1626   	; 0x8834 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    8e8e:	af be       	out	0x3f, r10	; 63
    8e90:	0f 90       	pop	r0
    8e92:	df 91       	pop	r29
    8e94:	cf 91       	pop	r28
    8e96:	1f 91       	pop	r17
    8e98:	0f 91       	pop	r16
    8e9a:	ff 90       	pop	r15
    8e9c:	ef 90       	pop	r14
    8e9e:	df 90       	pop	r13
    8ea0:	cf 90       	pop	r12
    8ea2:	bf 90       	pop	r11
    8ea4:	af 90       	pop	r10
    8ea6:	08 95       	ret

00008ea8 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    8ea8:	80 32       	cpi	r24, 0x20	; 32
    8eaa:	93 40       	sbci	r25, 0x03	; 3
    8eac:	61 f4       	brne	.+24     	; 0x8ec6 <dac_enable_clock+0x1e>
    8eae:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <dacb_enable_count>
    8eb2:	91 e0       	ldi	r25, 0x01	; 1
    8eb4:	98 0f       	add	r25, r24
    8eb6:	90 93 33 23 	sts	0x2333, r25	; 0x802333 <dacb_enable_count>
    8eba:	81 11       	cpse	r24, r1
    8ebc:	04 c0       	rjmp	.+8      	; 0x8ec6 <dac_enable_clock+0x1e>
    8ebe:	64 e0       	ldi	r22, 0x04	; 4
    8ec0:	82 e0       	ldi	r24, 0x02	; 2
    8ec2:	0c 94 71 69 	jmp	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    8ec6:	08 95       	ret

00008ec8 <dac_disable_clock>:
    8ec8:	80 32       	cpi	r24, 0x20	; 32
    8eca:	93 40       	sbci	r25, 0x03	; 3
    8ecc:	59 f4       	brne	.+22     	; 0x8ee4 <dac_disable_clock+0x1c>
    8ece:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <dacb_enable_count>
    8ed2:	81 50       	subi	r24, 0x01	; 1
    8ed4:	80 93 33 23 	sts	0x2333, r24	; 0x802333 <dacb_enable_count>
    8ed8:	81 11       	cpse	r24, r1
    8eda:	04 c0       	rjmp	.+8      	; 0x8ee4 <dac_disable_clock+0x1c>
    8edc:	64 e0       	ldi	r22, 0x04	; 4
    8ede:	82 e0       	ldi	r24, 0x02	; 2
    8ee0:	0c 94 87 69 	jmp	0xd30e	; 0xd30e <sysclk_disable_module>
    8ee4:	08 95       	ret

00008ee6 <dac_enable>:
    8ee6:	ef 92       	push	r14
    8ee8:	ff 92       	push	r15
    8eea:	1f 93       	push	r17
    8eec:	cf 93       	push	r28
    8eee:	df 93       	push	r29
    8ef0:	1f 92       	push	r1
    8ef2:	1f 92       	push	r1
    8ef4:	cd b7       	in	r28, 0x3d	; 61
    8ef6:	de b7       	in	r29, 0x3e	; 62
    8ef8:	2f b7       	in	r18, 0x3f	; 63
    8efa:	29 83       	std	Y+1, r18	; 0x01
    8efc:	f8 94       	cli
    8efe:	19 81       	ldd	r17, Y+1	; 0x01
    8f00:	20 91 5c 29 	lds	r18, 0x295C	; 0x80295c <sleepmgr_locks+0x1>
    8f04:	2f 3f       	cpi	r18, 0xFF	; 255
    8f06:	09 f4       	brne	.+2      	; 0x8f0a <dac_enable+0x24>
    8f08:	ff cf       	rjmp	.-2      	; 0x8f08 <dac_enable+0x22>
    8f0a:	7c 01       	movw	r14, r24
    8f0c:	8f b7       	in	r24, 0x3f	; 63
    8f0e:	8a 83       	std	Y+2, r24	; 0x02
    8f10:	f8 94       	cli
    8f12:	9a 81       	ldd	r25, Y+2	; 0x02
    8f14:	eb e5       	ldi	r30, 0x5B	; 91
    8f16:	f9 e2       	ldi	r31, 0x29	; 41
    8f18:	81 81       	ldd	r24, Z+1	; 0x01
    8f1a:	8f 5f       	subi	r24, 0xFF	; 255
    8f1c:	81 83       	std	Z+1, r24	; 0x01
    8f1e:	9f bf       	out	0x3f, r25	; 63
    8f20:	c7 01       	movw	r24, r14
    8f22:	c2 df       	rcall	.-124    	; 0x8ea8 <dac_enable_clock>
    8f24:	f7 01       	movw	r30, r14
    8f26:	80 81       	ld	r24, Z
    8f28:	81 60       	ori	r24, 0x01	; 1
    8f2a:	80 83       	st	Z, r24
    8f2c:	1f bf       	out	0x3f, r17	; 63
    8f2e:	0f 90       	pop	r0
    8f30:	0f 90       	pop	r0
    8f32:	df 91       	pop	r29
    8f34:	cf 91       	pop	r28
    8f36:	1f 91       	pop	r17
    8f38:	ff 90       	pop	r15
    8f3a:	ef 90       	pop	r14
    8f3c:	08 95       	ret

00008f3e <dac_disable>:
    8f3e:	1f 93       	push	r17
    8f40:	cf 93       	push	r28
    8f42:	df 93       	push	r29
    8f44:	1f 92       	push	r1
    8f46:	1f 92       	push	r1
    8f48:	cd b7       	in	r28, 0x3d	; 61
    8f4a:	de b7       	in	r29, 0x3e	; 62
    8f4c:	2f b7       	in	r18, 0x3f	; 63
    8f4e:	29 83       	std	Y+1, r18	; 0x01
    8f50:	f8 94       	cli
    8f52:	19 81       	ldd	r17, Y+1	; 0x01
    8f54:	fc 01       	movw	r30, r24
    8f56:	20 81       	ld	r18, Z
    8f58:	2e 7f       	andi	r18, 0xFE	; 254
    8f5a:	20 83       	st	Z, r18
    8f5c:	b5 df       	rcall	.-150    	; 0x8ec8 <dac_disable_clock>
    8f5e:	80 91 5c 29 	lds	r24, 0x295C	; 0x80295c <sleepmgr_locks+0x1>
    8f62:	81 11       	cpse	r24, r1
    8f64:	01 c0       	rjmp	.+2      	; 0x8f68 <dac_disable+0x2a>
    8f66:	ff cf       	rjmp	.-2      	; 0x8f66 <dac_disable+0x28>
    8f68:	8f b7       	in	r24, 0x3f	; 63
    8f6a:	8a 83       	std	Y+2, r24	; 0x02
    8f6c:	f8 94       	cli
    8f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    8f70:	eb e5       	ldi	r30, 0x5B	; 91
    8f72:	f9 e2       	ldi	r31, 0x29	; 41
    8f74:	81 81       	ldd	r24, Z+1	; 0x01
    8f76:	81 50       	subi	r24, 0x01	; 1
    8f78:	81 83       	std	Z+1, r24	; 0x01
    8f7a:	9f bf       	out	0x3f, r25	; 63
    8f7c:	1f bf       	out	0x3f, r17	; 63
    8f7e:	0f 90       	pop	r0
    8f80:	0f 90       	pop	r0
    8f82:	df 91       	pop	r29
    8f84:	cf 91       	pop	r28
    8f86:	1f 91       	pop	r17
    8f88:	08 95       	ret

00008f8a <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    8f8a:	9f 92       	push	r9
    8f8c:	af 92       	push	r10
    8f8e:	bf 92       	push	r11
    8f90:	cf 92       	push	r12
    8f92:	df 92       	push	r13
    8f94:	ef 92       	push	r14
    8f96:	ff 92       	push	r15
    8f98:	0f 93       	push	r16
    8f9a:	1f 93       	push	r17
    8f9c:	cf 93       	push	r28
    8f9e:	df 93       	push	r29
    8fa0:	1f 92       	push	r1
    8fa2:	cd b7       	in	r28, 0x3d	; 61
    8fa4:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    8fa6:	80 32       	cpi	r24, 0x20	; 32
    8fa8:	23 e0       	ldi	r18, 0x03	; 3
    8faa:	92 07       	cpc	r25, r18
    8fac:	09 f0       	breq	.+2      	; 0x8fb0 <dac_write_configuration+0x26>
    8fae:	3c c0       	rjmp	.+120    	; 0x9028 <dac_write_configuration+0x9e>
    8fb0:	7b 01       	movw	r14, r22
    8fb2:	8c 01       	movw	r16, r24
    8fb4:	63 e3       	ldi	r22, 0x33	; 51
    8fb6:	70 e0       	ldi	r23, 0x00	; 0
    8fb8:	82 e0       	ldi	r24, 0x02	; 2
    8fba:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    8fbe:	98 2e       	mov	r9, r24
    8fc0:	62 e3       	ldi	r22, 0x32	; 50
    8fc2:	70 e0       	ldi	r23, 0x00	; 0
    8fc4:	82 e0       	ldi	r24, 0x02	; 2
    8fc6:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    8fca:	a8 2e       	mov	r10, r24
    8fcc:	67 e3       	ldi	r22, 0x37	; 55
    8fce:	70 e0       	ldi	r23, 0x00	; 0
    8fd0:	82 e0       	ldi	r24, 0x02	; 2
    8fd2:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    8fd6:	b8 2e       	mov	r11, r24
    8fd8:	66 e3       	ldi	r22, 0x36	; 54
    8fda:	70 e0       	ldi	r23, 0x00	; 0
    8fdc:	82 e0       	ldi	r24, 0x02	; 2
    8fde:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    8fe2:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8fe4:	8f b7       	in	r24, 0x3f	; 63
    8fe6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    8fe8:	f8 94       	cli
	return flags;
    8fea:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    8fec:	c8 01       	movw	r24, r16
    8fee:	5c df       	rcall	.-328    	; 0x8ea8 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    8ff0:	f8 01       	movw	r30, r16
    8ff2:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    8ff4:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    8ff6:	f7 01       	movw	r30, r14
    8ff8:	91 81       	ldd	r25, Z+1	; 0x01
    8ffa:	f8 01       	movw	r30, r16
    8ffc:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    8ffe:	f7 01       	movw	r30, r14
    9000:	92 81       	ldd	r25, Z+2	; 0x02
    9002:	f8 01       	movw	r30, r16
    9004:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    9006:	f7 01       	movw	r30, r14
    9008:	93 81       	ldd	r25, Z+3	; 0x03
    900a:	f8 01       	movw	r30, r16
    900c:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    900e:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    9010:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    9012:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    9014:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    9016:	81 70       	andi	r24, 0x01	; 1
    9018:	f7 01       	movw	r30, r14
    901a:	90 81       	ld	r25, Z
    901c:	89 2b       	or	r24, r25
    901e:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    9020:	80 83       	st	Z, r24
    9022:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9024:	51 df       	rcall	.-350    	; 0x8ec8 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    9026:	df be       	out	0x3f, r13	; 63
    9028:	0f 90       	pop	r0
    902a:	df 91       	pop	r29
    902c:	cf 91       	pop	r28
    902e:	1f 91       	pop	r17
    9030:	0f 91       	pop	r16
    9032:	ff 90       	pop	r15
    9034:	ef 90       	pop	r14
    9036:	df 90       	pop	r13
    9038:	cf 90       	pop	r12
    903a:	bf 90       	pop	r11
    903c:	af 90       	pop	r10
    903e:	9f 90       	pop	r9
    9040:	08 95       	ret

00009042 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    9042:	df 92       	push	r13
    9044:	ef 92       	push	r14
    9046:	ff 92       	push	r15
    9048:	0f 93       	push	r16
    904a:	1f 93       	push	r17
    904c:	cf 93       	push	r28
    904e:	df 93       	push	r29
    9050:	1f 92       	push	r1
    9052:	cd b7       	in	r28, 0x3d	; 61
    9054:	de b7       	in	r29, 0x3e	; 62
    9056:	8c 01       	movw	r16, r24
    9058:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    905a:	8f b7       	in	r24, 0x3f	; 63
    905c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    905e:	f8 94       	cli
	return flags;
    9060:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    9062:	c8 01       	movw	r24, r16
    9064:	21 df       	rcall	.-446    	; 0x8ea8 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    9066:	f8 01       	movw	r30, r16
    9068:	80 81       	ld	r24, Z
    906a:	8e 7f       	andi	r24, 0xFE	; 254
    906c:	f7 01       	movw	r30, r14
    906e:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    9070:	f8 01       	movw	r30, r16
    9072:	81 81       	ldd	r24, Z+1	; 0x01
    9074:	f7 01       	movw	r30, r14
    9076:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    9078:	f8 01       	movw	r30, r16
    907a:	82 81       	ldd	r24, Z+2	; 0x02
    907c:	f7 01       	movw	r30, r14
    907e:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    9080:	f8 01       	movw	r30, r16
    9082:	83 81       	ldd	r24, Z+3	; 0x03
    9084:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    9086:	83 83       	std	Z+3, r24	; 0x03
    9088:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    908a:	1e df       	rcall	.-452    	; 0x8ec8 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    908c:	df be       	out	0x3f, r13	; 63
    908e:	0f 90       	pop	r0
    9090:	df 91       	pop	r29
    9092:	cf 91       	pop	r28
    9094:	1f 91       	pop	r17
    9096:	0f 91       	pop	r16
    9098:	ff 90       	pop	r15
    909a:	ef 90       	pop	r14
    909c:	df 90       	pop	r13
    909e:	08 95       	ret

000090a0 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    90a0:	1f 92       	push	r1
    90a2:	0f 92       	push	r0
    90a4:	0f b6       	in	r0, 0x3f	; 63
    90a6:	0f 92       	push	r0
    90a8:	11 24       	eor	r1, r1
    90aa:	0b b6       	in	r0, 0x3b	; 59
    90ac:	0f 92       	push	r0
    90ae:	2f 93       	push	r18
    90b0:	3f 93       	push	r19
    90b2:	4f 93       	push	r20
    90b4:	5f 93       	push	r21
    90b6:	6f 93       	push	r22
    90b8:	7f 93       	push	r23
    90ba:	8f 93       	push	r24
    90bc:	9f 93       	push	r25
    90be:	af 93       	push	r26
    90c0:	bf 93       	push	r27
    90c2:	ef 93       	push	r30
    90c4:	ff 93       	push	r31
    90c6:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <tc_tcc0_ovf_callback>
    90ca:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <tc_tcc0_ovf_callback+0x1>
    90ce:	30 97       	sbiw	r30, 0x00	; 0
    90d0:	09 f0       	breq	.+2      	; 0x90d4 <__vector_14+0x34>
    90d2:	19 95       	eicall
    90d4:	ff 91       	pop	r31
    90d6:	ef 91       	pop	r30
    90d8:	bf 91       	pop	r27
    90da:	af 91       	pop	r26
    90dc:	9f 91       	pop	r25
    90de:	8f 91       	pop	r24
    90e0:	7f 91       	pop	r23
    90e2:	6f 91       	pop	r22
    90e4:	5f 91       	pop	r21
    90e6:	4f 91       	pop	r20
    90e8:	3f 91       	pop	r19
    90ea:	2f 91       	pop	r18
    90ec:	0f 90       	pop	r0
    90ee:	0b be       	out	0x3b, r0	; 59
    90f0:	0f 90       	pop	r0
    90f2:	0f be       	out	0x3f, r0	; 63
    90f4:	0f 90       	pop	r0
    90f6:	1f 90       	pop	r1
    90f8:	18 95       	reti

000090fa <__vector_15>:
    90fa:	1f 92       	push	r1
    90fc:	0f 92       	push	r0
    90fe:	0f b6       	in	r0, 0x3f	; 63
    9100:	0f 92       	push	r0
    9102:	11 24       	eor	r1, r1
    9104:	0b b6       	in	r0, 0x3b	; 59
    9106:	0f 92       	push	r0
    9108:	2f 93       	push	r18
    910a:	3f 93       	push	r19
    910c:	4f 93       	push	r20
    910e:	5f 93       	push	r21
    9110:	6f 93       	push	r22
    9112:	7f 93       	push	r23
    9114:	8f 93       	push	r24
    9116:	9f 93       	push	r25
    9118:	af 93       	push	r26
    911a:	bf 93       	push	r27
    911c:	ef 93       	push	r30
    911e:	ff 93       	push	r31
    9120:	e0 91 78 23 	lds	r30, 0x2378	; 0x802378 <tc_tcc0_err_callback>
    9124:	f0 91 79 23 	lds	r31, 0x2379	; 0x802379 <tc_tcc0_err_callback+0x1>
    9128:	30 97       	sbiw	r30, 0x00	; 0
    912a:	09 f0       	breq	.+2      	; 0x912e <__vector_15+0x34>
    912c:	19 95       	eicall
    912e:	ff 91       	pop	r31
    9130:	ef 91       	pop	r30
    9132:	bf 91       	pop	r27
    9134:	af 91       	pop	r26
    9136:	9f 91       	pop	r25
    9138:	8f 91       	pop	r24
    913a:	7f 91       	pop	r23
    913c:	6f 91       	pop	r22
    913e:	5f 91       	pop	r21
    9140:	4f 91       	pop	r20
    9142:	3f 91       	pop	r19
    9144:	2f 91       	pop	r18
    9146:	0f 90       	pop	r0
    9148:	0b be       	out	0x3b, r0	; 59
    914a:	0f 90       	pop	r0
    914c:	0f be       	out	0x3f, r0	; 63
    914e:	0f 90       	pop	r0
    9150:	1f 90       	pop	r1
    9152:	18 95       	reti

00009154 <__vector_16>:
    9154:	1f 92       	push	r1
    9156:	0f 92       	push	r0
    9158:	0f b6       	in	r0, 0x3f	; 63
    915a:	0f 92       	push	r0
    915c:	11 24       	eor	r1, r1
    915e:	0b b6       	in	r0, 0x3b	; 59
    9160:	0f 92       	push	r0
    9162:	2f 93       	push	r18
    9164:	3f 93       	push	r19
    9166:	4f 93       	push	r20
    9168:	5f 93       	push	r21
    916a:	6f 93       	push	r22
    916c:	7f 93       	push	r23
    916e:	8f 93       	push	r24
    9170:	9f 93       	push	r25
    9172:	af 93       	push	r26
    9174:	bf 93       	push	r27
    9176:	ef 93       	push	r30
    9178:	ff 93       	push	r31
    917a:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <tc_tcc0_cca_callback>
    917e:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <tc_tcc0_cca_callback+0x1>
    9182:	30 97       	sbiw	r30, 0x00	; 0
    9184:	09 f0       	breq	.+2      	; 0x9188 <__vector_16+0x34>
    9186:	19 95       	eicall
    9188:	ff 91       	pop	r31
    918a:	ef 91       	pop	r30
    918c:	bf 91       	pop	r27
    918e:	af 91       	pop	r26
    9190:	9f 91       	pop	r25
    9192:	8f 91       	pop	r24
    9194:	7f 91       	pop	r23
    9196:	6f 91       	pop	r22
    9198:	5f 91       	pop	r21
    919a:	4f 91       	pop	r20
    919c:	3f 91       	pop	r19
    919e:	2f 91       	pop	r18
    91a0:	0f 90       	pop	r0
    91a2:	0b be       	out	0x3b, r0	; 59
    91a4:	0f 90       	pop	r0
    91a6:	0f be       	out	0x3f, r0	; 63
    91a8:	0f 90       	pop	r0
    91aa:	1f 90       	pop	r1
    91ac:	18 95       	reti

000091ae <__vector_17>:
    91ae:	1f 92       	push	r1
    91b0:	0f 92       	push	r0
    91b2:	0f b6       	in	r0, 0x3f	; 63
    91b4:	0f 92       	push	r0
    91b6:	11 24       	eor	r1, r1
    91b8:	0b b6       	in	r0, 0x3b	; 59
    91ba:	0f 92       	push	r0
    91bc:	2f 93       	push	r18
    91be:	3f 93       	push	r19
    91c0:	4f 93       	push	r20
    91c2:	5f 93       	push	r21
    91c4:	6f 93       	push	r22
    91c6:	7f 93       	push	r23
    91c8:	8f 93       	push	r24
    91ca:	9f 93       	push	r25
    91cc:	af 93       	push	r26
    91ce:	bf 93       	push	r27
    91d0:	ef 93       	push	r30
    91d2:	ff 93       	push	r31
    91d4:	e0 91 74 23 	lds	r30, 0x2374	; 0x802374 <tc_tcc0_ccb_callback>
    91d8:	f0 91 75 23 	lds	r31, 0x2375	; 0x802375 <tc_tcc0_ccb_callback+0x1>
    91dc:	30 97       	sbiw	r30, 0x00	; 0
    91de:	09 f0       	breq	.+2      	; 0x91e2 <__vector_17+0x34>
    91e0:	19 95       	eicall
    91e2:	ff 91       	pop	r31
    91e4:	ef 91       	pop	r30
    91e6:	bf 91       	pop	r27
    91e8:	af 91       	pop	r26
    91ea:	9f 91       	pop	r25
    91ec:	8f 91       	pop	r24
    91ee:	7f 91       	pop	r23
    91f0:	6f 91       	pop	r22
    91f2:	5f 91       	pop	r21
    91f4:	4f 91       	pop	r20
    91f6:	3f 91       	pop	r19
    91f8:	2f 91       	pop	r18
    91fa:	0f 90       	pop	r0
    91fc:	0b be       	out	0x3b, r0	; 59
    91fe:	0f 90       	pop	r0
    9200:	0f be       	out	0x3f, r0	; 63
    9202:	0f 90       	pop	r0
    9204:	1f 90       	pop	r1
    9206:	18 95       	reti

00009208 <__vector_18>:
    9208:	1f 92       	push	r1
    920a:	0f 92       	push	r0
    920c:	0f b6       	in	r0, 0x3f	; 63
    920e:	0f 92       	push	r0
    9210:	11 24       	eor	r1, r1
    9212:	0b b6       	in	r0, 0x3b	; 59
    9214:	0f 92       	push	r0
    9216:	2f 93       	push	r18
    9218:	3f 93       	push	r19
    921a:	4f 93       	push	r20
    921c:	5f 93       	push	r21
    921e:	6f 93       	push	r22
    9220:	7f 93       	push	r23
    9222:	8f 93       	push	r24
    9224:	9f 93       	push	r25
    9226:	af 93       	push	r26
    9228:	bf 93       	push	r27
    922a:	ef 93       	push	r30
    922c:	ff 93       	push	r31
    922e:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <tc_tcc0_ccc_callback>
    9232:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <tc_tcc0_ccc_callback+0x1>
    9236:	30 97       	sbiw	r30, 0x00	; 0
    9238:	09 f0       	breq	.+2      	; 0x923c <__vector_18+0x34>
    923a:	19 95       	eicall
    923c:	ff 91       	pop	r31
    923e:	ef 91       	pop	r30
    9240:	bf 91       	pop	r27
    9242:	af 91       	pop	r26
    9244:	9f 91       	pop	r25
    9246:	8f 91       	pop	r24
    9248:	7f 91       	pop	r23
    924a:	6f 91       	pop	r22
    924c:	5f 91       	pop	r21
    924e:	4f 91       	pop	r20
    9250:	3f 91       	pop	r19
    9252:	2f 91       	pop	r18
    9254:	0f 90       	pop	r0
    9256:	0b be       	out	0x3b, r0	; 59
    9258:	0f 90       	pop	r0
    925a:	0f be       	out	0x3f, r0	; 63
    925c:	0f 90       	pop	r0
    925e:	1f 90       	pop	r1
    9260:	18 95       	reti

00009262 <__vector_19>:
    9262:	1f 92       	push	r1
    9264:	0f 92       	push	r0
    9266:	0f b6       	in	r0, 0x3f	; 63
    9268:	0f 92       	push	r0
    926a:	11 24       	eor	r1, r1
    926c:	0b b6       	in	r0, 0x3b	; 59
    926e:	0f 92       	push	r0
    9270:	2f 93       	push	r18
    9272:	3f 93       	push	r19
    9274:	4f 93       	push	r20
    9276:	5f 93       	push	r21
    9278:	6f 93       	push	r22
    927a:	7f 93       	push	r23
    927c:	8f 93       	push	r24
    927e:	9f 93       	push	r25
    9280:	af 93       	push	r26
    9282:	bf 93       	push	r27
    9284:	ef 93       	push	r30
    9286:	ff 93       	push	r31
    9288:	e0 91 70 23 	lds	r30, 0x2370	; 0x802370 <tc_tcc0_ccd_callback>
    928c:	f0 91 71 23 	lds	r31, 0x2371	; 0x802371 <tc_tcc0_ccd_callback+0x1>
    9290:	30 97       	sbiw	r30, 0x00	; 0
    9292:	09 f0       	breq	.+2      	; 0x9296 <__vector_19+0x34>
    9294:	19 95       	eicall
    9296:	ff 91       	pop	r31
    9298:	ef 91       	pop	r30
    929a:	bf 91       	pop	r27
    929c:	af 91       	pop	r26
    929e:	9f 91       	pop	r25
    92a0:	8f 91       	pop	r24
    92a2:	7f 91       	pop	r23
    92a4:	6f 91       	pop	r22
    92a6:	5f 91       	pop	r21
    92a8:	4f 91       	pop	r20
    92aa:	3f 91       	pop	r19
    92ac:	2f 91       	pop	r18
    92ae:	0f 90       	pop	r0
    92b0:	0b be       	out	0x3b, r0	; 59
    92b2:	0f 90       	pop	r0
    92b4:	0f be       	out	0x3f, r0	; 63
    92b6:	0f 90       	pop	r0
    92b8:	1f 90       	pop	r1
    92ba:	18 95       	reti

000092bc <__vector_20>:
    92bc:	1f 92       	push	r1
    92be:	0f 92       	push	r0
    92c0:	0f b6       	in	r0, 0x3f	; 63
    92c2:	0f 92       	push	r0
    92c4:	11 24       	eor	r1, r1
    92c6:	0b b6       	in	r0, 0x3b	; 59
    92c8:	0f 92       	push	r0
    92ca:	2f 93       	push	r18
    92cc:	3f 93       	push	r19
    92ce:	4f 93       	push	r20
    92d0:	5f 93       	push	r21
    92d2:	6f 93       	push	r22
    92d4:	7f 93       	push	r23
    92d6:	8f 93       	push	r24
    92d8:	9f 93       	push	r25
    92da:	af 93       	push	r26
    92dc:	bf 93       	push	r27
    92de:	ef 93       	push	r30
    92e0:	ff 93       	push	r31
    92e2:	e0 91 6e 23 	lds	r30, 0x236E	; 0x80236e <tc_tcc1_ovf_callback>
    92e6:	f0 91 6f 23 	lds	r31, 0x236F	; 0x80236f <tc_tcc1_ovf_callback+0x1>
    92ea:	30 97       	sbiw	r30, 0x00	; 0
    92ec:	09 f0       	breq	.+2      	; 0x92f0 <__vector_20+0x34>
    92ee:	19 95       	eicall
    92f0:	ff 91       	pop	r31
    92f2:	ef 91       	pop	r30
    92f4:	bf 91       	pop	r27
    92f6:	af 91       	pop	r26
    92f8:	9f 91       	pop	r25
    92fa:	8f 91       	pop	r24
    92fc:	7f 91       	pop	r23
    92fe:	6f 91       	pop	r22
    9300:	5f 91       	pop	r21
    9302:	4f 91       	pop	r20
    9304:	3f 91       	pop	r19
    9306:	2f 91       	pop	r18
    9308:	0f 90       	pop	r0
    930a:	0b be       	out	0x3b, r0	; 59
    930c:	0f 90       	pop	r0
    930e:	0f be       	out	0x3f, r0	; 63
    9310:	0f 90       	pop	r0
    9312:	1f 90       	pop	r1
    9314:	18 95       	reti

00009316 <__vector_21>:
    9316:	1f 92       	push	r1
    9318:	0f 92       	push	r0
    931a:	0f b6       	in	r0, 0x3f	; 63
    931c:	0f 92       	push	r0
    931e:	11 24       	eor	r1, r1
    9320:	0b b6       	in	r0, 0x3b	; 59
    9322:	0f 92       	push	r0
    9324:	2f 93       	push	r18
    9326:	3f 93       	push	r19
    9328:	4f 93       	push	r20
    932a:	5f 93       	push	r21
    932c:	6f 93       	push	r22
    932e:	7f 93       	push	r23
    9330:	8f 93       	push	r24
    9332:	9f 93       	push	r25
    9334:	af 93       	push	r26
    9336:	bf 93       	push	r27
    9338:	ef 93       	push	r30
    933a:	ff 93       	push	r31
    933c:	e0 91 6c 23 	lds	r30, 0x236C	; 0x80236c <tc_tcc1_err_callback>
    9340:	f0 91 6d 23 	lds	r31, 0x236D	; 0x80236d <tc_tcc1_err_callback+0x1>
    9344:	30 97       	sbiw	r30, 0x00	; 0
    9346:	09 f0       	breq	.+2      	; 0x934a <__vector_21+0x34>
    9348:	19 95       	eicall
    934a:	ff 91       	pop	r31
    934c:	ef 91       	pop	r30
    934e:	bf 91       	pop	r27
    9350:	af 91       	pop	r26
    9352:	9f 91       	pop	r25
    9354:	8f 91       	pop	r24
    9356:	7f 91       	pop	r23
    9358:	6f 91       	pop	r22
    935a:	5f 91       	pop	r21
    935c:	4f 91       	pop	r20
    935e:	3f 91       	pop	r19
    9360:	2f 91       	pop	r18
    9362:	0f 90       	pop	r0
    9364:	0b be       	out	0x3b, r0	; 59
    9366:	0f 90       	pop	r0
    9368:	0f be       	out	0x3f, r0	; 63
    936a:	0f 90       	pop	r0
    936c:	1f 90       	pop	r1
    936e:	18 95       	reti

00009370 <__vector_22>:
    9370:	1f 92       	push	r1
    9372:	0f 92       	push	r0
    9374:	0f b6       	in	r0, 0x3f	; 63
    9376:	0f 92       	push	r0
    9378:	11 24       	eor	r1, r1
    937a:	0b b6       	in	r0, 0x3b	; 59
    937c:	0f 92       	push	r0
    937e:	2f 93       	push	r18
    9380:	3f 93       	push	r19
    9382:	4f 93       	push	r20
    9384:	5f 93       	push	r21
    9386:	6f 93       	push	r22
    9388:	7f 93       	push	r23
    938a:	8f 93       	push	r24
    938c:	9f 93       	push	r25
    938e:	af 93       	push	r26
    9390:	bf 93       	push	r27
    9392:	ef 93       	push	r30
    9394:	ff 93       	push	r31
    9396:	e0 91 6a 23 	lds	r30, 0x236A	; 0x80236a <tc_tcc1_cca_callback>
    939a:	f0 91 6b 23 	lds	r31, 0x236B	; 0x80236b <tc_tcc1_cca_callback+0x1>
    939e:	30 97       	sbiw	r30, 0x00	; 0
    93a0:	09 f0       	breq	.+2      	; 0x93a4 <__vector_22+0x34>
    93a2:	19 95       	eicall
    93a4:	ff 91       	pop	r31
    93a6:	ef 91       	pop	r30
    93a8:	bf 91       	pop	r27
    93aa:	af 91       	pop	r26
    93ac:	9f 91       	pop	r25
    93ae:	8f 91       	pop	r24
    93b0:	7f 91       	pop	r23
    93b2:	6f 91       	pop	r22
    93b4:	5f 91       	pop	r21
    93b6:	4f 91       	pop	r20
    93b8:	3f 91       	pop	r19
    93ba:	2f 91       	pop	r18
    93bc:	0f 90       	pop	r0
    93be:	0b be       	out	0x3b, r0	; 59
    93c0:	0f 90       	pop	r0
    93c2:	0f be       	out	0x3f, r0	; 63
    93c4:	0f 90       	pop	r0
    93c6:	1f 90       	pop	r1
    93c8:	18 95       	reti

000093ca <__vector_23>:
    93ca:	1f 92       	push	r1
    93cc:	0f 92       	push	r0
    93ce:	0f b6       	in	r0, 0x3f	; 63
    93d0:	0f 92       	push	r0
    93d2:	11 24       	eor	r1, r1
    93d4:	0b b6       	in	r0, 0x3b	; 59
    93d6:	0f 92       	push	r0
    93d8:	2f 93       	push	r18
    93da:	3f 93       	push	r19
    93dc:	4f 93       	push	r20
    93de:	5f 93       	push	r21
    93e0:	6f 93       	push	r22
    93e2:	7f 93       	push	r23
    93e4:	8f 93       	push	r24
    93e6:	9f 93       	push	r25
    93e8:	af 93       	push	r26
    93ea:	bf 93       	push	r27
    93ec:	ef 93       	push	r30
    93ee:	ff 93       	push	r31
    93f0:	e0 91 68 23 	lds	r30, 0x2368	; 0x802368 <tc_tcc1_ccb_callback>
    93f4:	f0 91 69 23 	lds	r31, 0x2369	; 0x802369 <tc_tcc1_ccb_callback+0x1>
    93f8:	30 97       	sbiw	r30, 0x00	; 0
    93fa:	09 f0       	breq	.+2      	; 0x93fe <__vector_23+0x34>
    93fc:	19 95       	eicall
    93fe:	ff 91       	pop	r31
    9400:	ef 91       	pop	r30
    9402:	bf 91       	pop	r27
    9404:	af 91       	pop	r26
    9406:	9f 91       	pop	r25
    9408:	8f 91       	pop	r24
    940a:	7f 91       	pop	r23
    940c:	6f 91       	pop	r22
    940e:	5f 91       	pop	r21
    9410:	4f 91       	pop	r20
    9412:	3f 91       	pop	r19
    9414:	2f 91       	pop	r18
    9416:	0f 90       	pop	r0
    9418:	0b be       	out	0x3b, r0	; 59
    941a:	0f 90       	pop	r0
    941c:	0f be       	out	0x3f, r0	; 63
    941e:	0f 90       	pop	r0
    9420:	1f 90       	pop	r1
    9422:	18 95       	reti

00009424 <__vector_77>:
    9424:	1f 92       	push	r1
    9426:	0f 92       	push	r0
    9428:	0f b6       	in	r0, 0x3f	; 63
    942a:	0f 92       	push	r0
    942c:	11 24       	eor	r1, r1
    942e:	0b b6       	in	r0, 0x3b	; 59
    9430:	0f 92       	push	r0
    9432:	2f 93       	push	r18
    9434:	3f 93       	push	r19
    9436:	4f 93       	push	r20
    9438:	5f 93       	push	r21
    943a:	6f 93       	push	r22
    943c:	7f 93       	push	r23
    943e:	8f 93       	push	r24
    9440:	9f 93       	push	r25
    9442:	af 93       	push	r26
    9444:	bf 93       	push	r27
    9446:	ef 93       	push	r30
    9448:	ff 93       	push	r31
    944a:	e0 91 66 23 	lds	r30, 0x2366	; 0x802366 <tc_tcd0_ovf_callback>
    944e:	f0 91 67 23 	lds	r31, 0x2367	; 0x802367 <tc_tcd0_ovf_callback+0x1>
    9452:	30 97       	sbiw	r30, 0x00	; 0
    9454:	09 f0       	breq	.+2      	; 0x9458 <__vector_77+0x34>
    9456:	19 95       	eicall
    9458:	ff 91       	pop	r31
    945a:	ef 91       	pop	r30
    945c:	bf 91       	pop	r27
    945e:	af 91       	pop	r26
    9460:	9f 91       	pop	r25
    9462:	8f 91       	pop	r24
    9464:	7f 91       	pop	r23
    9466:	6f 91       	pop	r22
    9468:	5f 91       	pop	r21
    946a:	4f 91       	pop	r20
    946c:	3f 91       	pop	r19
    946e:	2f 91       	pop	r18
    9470:	0f 90       	pop	r0
    9472:	0b be       	out	0x3b, r0	; 59
    9474:	0f 90       	pop	r0
    9476:	0f be       	out	0x3f, r0	; 63
    9478:	0f 90       	pop	r0
    947a:	1f 90       	pop	r1
    947c:	18 95       	reti

0000947e <__vector_78>:
    947e:	1f 92       	push	r1
    9480:	0f 92       	push	r0
    9482:	0f b6       	in	r0, 0x3f	; 63
    9484:	0f 92       	push	r0
    9486:	11 24       	eor	r1, r1
    9488:	0b b6       	in	r0, 0x3b	; 59
    948a:	0f 92       	push	r0
    948c:	2f 93       	push	r18
    948e:	3f 93       	push	r19
    9490:	4f 93       	push	r20
    9492:	5f 93       	push	r21
    9494:	6f 93       	push	r22
    9496:	7f 93       	push	r23
    9498:	8f 93       	push	r24
    949a:	9f 93       	push	r25
    949c:	af 93       	push	r26
    949e:	bf 93       	push	r27
    94a0:	ef 93       	push	r30
    94a2:	ff 93       	push	r31
    94a4:	e0 91 64 23 	lds	r30, 0x2364	; 0x802364 <tc_tcd0_err_callback>
    94a8:	f0 91 65 23 	lds	r31, 0x2365	; 0x802365 <tc_tcd0_err_callback+0x1>
    94ac:	30 97       	sbiw	r30, 0x00	; 0
    94ae:	09 f0       	breq	.+2      	; 0x94b2 <__vector_78+0x34>
    94b0:	19 95       	eicall
    94b2:	ff 91       	pop	r31
    94b4:	ef 91       	pop	r30
    94b6:	bf 91       	pop	r27
    94b8:	af 91       	pop	r26
    94ba:	9f 91       	pop	r25
    94bc:	8f 91       	pop	r24
    94be:	7f 91       	pop	r23
    94c0:	6f 91       	pop	r22
    94c2:	5f 91       	pop	r21
    94c4:	4f 91       	pop	r20
    94c6:	3f 91       	pop	r19
    94c8:	2f 91       	pop	r18
    94ca:	0f 90       	pop	r0
    94cc:	0b be       	out	0x3b, r0	; 59
    94ce:	0f 90       	pop	r0
    94d0:	0f be       	out	0x3f, r0	; 63
    94d2:	0f 90       	pop	r0
    94d4:	1f 90       	pop	r1
    94d6:	18 95       	reti

000094d8 <__vector_79>:
    94d8:	1f 92       	push	r1
    94da:	0f 92       	push	r0
    94dc:	0f b6       	in	r0, 0x3f	; 63
    94de:	0f 92       	push	r0
    94e0:	11 24       	eor	r1, r1
    94e2:	0b b6       	in	r0, 0x3b	; 59
    94e4:	0f 92       	push	r0
    94e6:	2f 93       	push	r18
    94e8:	3f 93       	push	r19
    94ea:	4f 93       	push	r20
    94ec:	5f 93       	push	r21
    94ee:	6f 93       	push	r22
    94f0:	7f 93       	push	r23
    94f2:	8f 93       	push	r24
    94f4:	9f 93       	push	r25
    94f6:	af 93       	push	r26
    94f8:	bf 93       	push	r27
    94fa:	ef 93       	push	r30
    94fc:	ff 93       	push	r31
    94fe:	e0 91 62 23 	lds	r30, 0x2362	; 0x802362 <tc_tcd0_cca_callback>
    9502:	f0 91 63 23 	lds	r31, 0x2363	; 0x802363 <tc_tcd0_cca_callback+0x1>
    9506:	30 97       	sbiw	r30, 0x00	; 0
    9508:	09 f0       	breq	.+2      	; 0x950c <__vector_79+0x34>
    950a:	19 95       	eicall
    950c:	ff 91       	pop	r31
    950e:	ef 91       	pop	r30
    9510:	bf 91       	pop	r27
    9512:	af 91       	pop	r26
    9514:	9f 91       	pop	r25
    9516:	8f 91       	pop	r24
    9518:	7f 91       	pop	r23
    951a:	6f 91       	pop	r22
    951c:	5f 91       	pop	r21
    951e:	4f 91       	pop	r20
    9520:	3f 91       	pop	r19
    9522:	2f 91       	pop	r18
    9524:	0f 90       	pop	r0
    9526:	0b be       	out	0x3b, r0	; 59
    9528:	0f 90       	pop	r0
    952a:	0f be       	out	0x3f, r0	; 63
    952c:	0f 90       	pop	r0
    952e:	1f 90       	pop	r1
    9530:	18 95       	reti

00009532 <__vector_80>:
    9532:	1f 92       	push	r1
    9534:	0f 92       	push	r0
    9536:	0f b6       	in	r0, 0x3f	; 63
    9538:	0f 92       	push	r0
    953a:	11 24       	eor	r1, r1
    953c:	0b b6       	in	r0, 0x3b	; 59
    953e:	0f 92       	push	r0
    9540:	2f 93       	push	r18
    9542:	3f 93       	push	r19
    9544:	4f 93       	push	r20
    9546:	5f 93       	push	r21
    9548:	6f 93       	push	r22
    954a:	7f 93       	push	r23
    954c:	8f 93       	push	r24
    954e:	9f 93       	push	r25
    9550:	af 93       	push	r26
    9552:	bf 93       	push	r27
    9554:	ef 93       	push	r30
    9556:	ff 93       	push	r31
    9558:	e0 91 60 23 	lds	r30, 0x2360	; 0x802360 <tc_tcd0_ccb_callback>
    955c:	f0 91 61 23 	lds	r31, 0x2361	; 0x802361 <tc_tcd0_ccb_callback+0x1>
    9560:	30 97       	sbiw	r30, 0x00	; 0
    9562:	09 f0       	breq	.+2      	; 0x9566 <__vector_80+0x34>
    9564:	19 95       	eicall
    9566:	ff 91       	pop	r31
    9568:	ef 91       	pop	r30
    956a:	bf 91       	pop	r27
    956c:	af 91       	pop	r26
    956e:	9f 91       	pop	r25
    9570:	8f 91       	pop	r24
    9572:	7f 91       	pop	r23
    9574:	6f 91       	pop	r22
    9576:	5f 91       	pop	r21
    9578:	4f 91       	pop	r20
    957a:	3f 91       	pop	r19
    957c:	2f 91       	pop	r18
    957e:	0f 90       	pop	r0
    9580:	0b be       	out	0x3b, r0	; 59
    9582:	0f 90       	pop	r0
    9584:	0f be       	out	0x3f, r0	; 63
    9586:	0f 90       	pop	r0
    9588:	1f 90       	pop	r1
    958a:	18 95       	reti

0000958c <__vector_81>:
    958c:	1f 92       	push	r1
    958e:	0f 92       	push	r0
    9590:	0f b6       	in	r0, 0x3f	; 63
    9592:	0f 92       	push	r0
    9594:	11 24       	eor	r1, r1
    9596:	0b b6       	in	r0, 0x3b	; 59
    9598:	0f 92       	push	r0
    959a:	2f 93       	push	r18
    959c:	3f 93       	push	r19
    959e:	4f 93       	push	r20
    95a0:	5f 93       	push	r21
    95a2:	6f 93       	push	r22
    95a4:	7f 93       	push	r23
    95a6:	8f 93       	push	r24
    95a8:	9f 93       	push	r25
    95aa:	af 93       	push	r26
    95ac:	bf 93       	push	r27
    95ae:	ef 93       	push	r30
    95b0:	ff 93       	push	r31
    95b2:	e0 91 5e 23 	lds	r30, 0x235E	; 0x80235e <tc_tcd0_ccc_callback>
    95b6:	f0 91 5f 23 	lds	r31, 0x235F	; 0x80235f <tc_tcd0_ccc_callback+0x1>
    95ba:	30 97       	sbiw	r30, 0x00	; 0
    95bc:	09 f0       	breq	.+2      	; 0x95c0 <__vector_81+0x34>
    95be:	19 95       	eicall
    95c0:	ff 91       	pop	r31
    95c2:	ef 91       	pop	r30
    95c4:	bf 91       	pop	r27
    95c6:	af 91       	pop	r26
    95c8:	9f 91       	pop	r25
    95ca:	8f 91       	pop	r24
    95cc:	7f 91       	pop	r23
    95ce:	6f 91       	pop	r22
    95d0:	5f 91       	pop	r21
    95d2:	4f 91       	pop	r20
    95d4:	3f 91       	pop	r19
    95d6:	2f 91       	pop	r18
    95d8:	0f 90       	pop	r0
    95da:	0b be       	out	0x3b, r0	; 59
    95dc:	0f 90       	pop	r0
    95de:	0f be       	out	0x3f, r0	; 63
    95e0:	0f 90       	pop	r0
    95e2:	1f 90       	pop	r1
    95e4:	18 95       	reti

000095e6 <__vector_82>:
    95e6:	1f 92       	push	r1
    95e8:	0f 92       	push	r0
    95ea:	0f b6       	in	r0, 0x3f	; 63
    95ec:	0f 92       	push	r0
    95ee:	11 24       	eor	r1, r1
    95f0:	0b b6       	in	r0, 0x3b	; 59
    95f2:	0f 92       	push	r0
    95f4:	2f 93       	push	r18
    95f6:	3f 93       	push	r19
    95f8:	4f 93       	push	r20
    95fa:	5f 93       	push	r21
    95fc:	6f 93       	push	r22
    95fe:	7f 93       	push	r23
    9600:	8f 93       	push	r24
    9602:	9f 93       	push	r25
    9604:	af 93       	push	r26
    9606:	bf 93       	push	r27
    9608:	ef 93       	push	r30
    960a:	ff 93       	push	r31
    960c:	e0 91 5c 23 	lds	r30, 0x235C	; 0x80235c <tc_tcd0_ccd_callback>
    9610:	f0 91 5d 23 	lds	r31, 0x235D	; 0x80235d <tc_tcd0_ccd_callback+0x1>
    9614:	30 97       	sbiw	r30, 0x00	; 0
    9616:	09 f0       	breq	.+2      	; 0x961a <__vector_82+0x34>
    9618:	19 95       	eicall
    961a:	ff 91       	pop	r31
    961c:	ef 91       	pop	r30
    961e:	bf 91       	pop	r27
    9620:	af 91       	pop	r26
    9622:	9f 91       	pop	r25
    9624:	8f 91       	pop	r24
    9626:	7f 91       	pop	r23
    9628:	6f 91       	pop	r22
    962a:	5f 91       	pop	r21
    962c:	4f 91       	pop	r20
    962e:	3f 91       	pop	r19
    9630:	2f 91       	pop	r18
    9632:	0f 90       	pop	r0
    9634:	0b be       	out	0x3b, r0	; 59
    9636:	0f 90       	pop	r0
    9638:	0f be       	out	0x3f, r0	; 63
    963a:	0f 90       	pop	r0
    963c:	1f 90       	pop	r1
    963e:	18 95       	reti

00009640 <__vector_83>:
    9640:	1f 92       	push	r1
    9642:	0f 92       	push	r0
    9644:	0f b6       	in	r0, 0x3f	; 63
    9646:	0f 92       	push	r0
    9648:	11 24       	eor	r1, r1
    964a:	0b b6       	in	r0, 0x3b	; 59
    964c:	0f 92       	push	r0
    964e:	2f 93       	push	r18
    9650:	3f 93       	push	r19
    9652:	4f 93       	push	r20
    9654:	5f 93       	push	r21
    9656:	6f 93       	push	r22
    9658:	7f 93       	push	r23
    965a:	8f 93       	push	r24
    965c:	9f 93       	push	r25
    965e:	af 93       	push	r26
    9660:	bf 93       	push	r27
    9662:	ef 93       	push	r30
    9664:	ff 93       	push	r31
    9666:	e0 91 5a 23 	lds	r30, 0x235A	; 0x80235a <tc_tcd1_ovf_callback>
    966a:	f0 91 5b 23 	lds	r31, 0x235B	; 0x80235b <tc_tcd1_ovf_callback+0x1>
    966e:	30 97       	sbiw	r30, 0x00	; 0
    9670:	09 f0       	breq	.+2      	; 0x9674 <__vector_83+0x34>
    9672:	19 95       	eicall
    9674:	ff 91       	pop	r31
    9676:	ef 91       	pop	r30
    9678:	bf 91       	pop	r27
    967a:	af 91       	pop	r26
    967c:	9f 91       	pop	r25
    967e:	8f 91       	pop	r24
    9680:	7f 91       	pop	r23
    9682:	6f 91       	pop	r22
    9684:	5f 91       	pop	r21
    9686:	4f 91       	pop	r20
    9688:	3f 91       	pop	r19
    968a:	2f 91       	pop	r18
    968c:	0f 90       	pop	r0
    968e:	0b be       	out	0x3b, r0	; 59
    9690:	0f 90       	pop	r0
    9692:	0f be       	out	0x3f, r0	; 63
    9694:	0f 90       	pop	r0
    9696:	1f 90       	pop	r1
    9698:	18 95       	reti

0000969a <__vector_84>:
    969a:	1f 92       	push	r1
    969c:	0f 92       	push	r0
    969e:	0f b6       	in	r0, 0x3f	; 63
    96a0:	0f 92       	push	r0
    96a2:	11 24       	eor	r1, r1
    96a4:	0b b6       	in	r0, 0x3b	; 59
    96a6:	0f 92       	push	r0
    96a8:	2f 93       	push	r18
    96aa:	3f 93       	push	r19
    96ac:	4f 93       	push	r20
    96ae:	5f 93       	push	r21
    96b0:	6f 93       	push	r22
    96b2:	7f 93       	push	r23
    96b4:	8f 93       	push	r24
    96b6:	9f 93       	push	r25
    96b8:	af 93       	push	r26
    96ba:	bf 93       	push	r27
    96bc:	ef 93       	push	r30
    96be:	ff 93       	push	r31
    96c0:	e0 91 58 23 	lds	r30, 0x2358	; 0x802358 <tc_tcd1_err_callback>
    96c4:	f0 91 59 23 	lds	r31, 0x2359	; 0x802359 <tc_tcd1_err_callback+0x1>
    96c8:	30 97       	sbiw	r30, 0x00	; 0
    96ca:	09 f0       	breq	.+2      	; 0x96ce <__vector_84+0x34>
    96cc:	19 95       	eicall
    96ce:	ff 91       	pop	r31
    96d0:	ef 91       	pop	r30
    96d2:	bf 91       	pop	r27
    96d4:	af 91       	pop	r26
    96d6:	9f 91       	pop	r25
    96d8:	8f 91       	pop	r24
    96da:	7f 91       	pop	r23
    96dc:	6f 91       	pop	r22
    96de:	5f 91       	pop	r21
    96e0:	4f 91       	pop	r20
    96e2:	3f 91       	pop	r19
    96e4:	2f 91       	pop	r18
    96e6:	0f 90       	pop	r0
    96e8:	0b be       	out	0x3b, r0	; 59
    96ea:	0f 90       	pop	r0
    96ec:	0f be       	out	0x3f, r0	; 63
    96ee:	0f 90       	pop	r0
    96f0:	1f 90       	pop	r1
    96f2:	18 95       	reti

000096f4 <__vector_85>:
    96f4:	1f 92       	push	r1
    96f6:	0f 92       	push	r0
    96f8:	0f b6       	in	r0, 0x3f	; 63
    96fa:	0f 92       	push	r0
    96fc:	11 24       	eor	r1, r1
    96fe:	0b b6       	in	r0, 0x3b	; 59
    9700:	0f 92       	push	r0
    9702:	2f 93       	push	r18
    9704:	3f 93       	push	r19
    9706:	4f 93       	push	r20
    9708:	5f 93       	push	r21
    970a:	6f 93       	push	r22
    970c:	7f 93       	push	r23
    970e:	8f 93       	push	r24
    9710:	9f 93       	push	r25
    9712:	af 93       	push	r26
    9714:	bf 93       	push	r27
    9716:	ef 93       	push	r30
    9718:	ff 93       	push	r31
    971a:	e0 91 56 23 	lds	r30, 0x2356	; 0x802356 <tc_tcd1_cca_callback>
    971e:	f0 91 57 23 	lds	r31, 0x2357	; 0x802357 <tc_tcd1_cca_callback+0x1>
    9722:	30 97       	sbiw	r30, 0x00	; 0
    9724:	09 f0       	breq	.+2      	; 0x9728 <__vector_85+0x34>
    9726:	19 95       	eicall
    9728:	ff 91       	pop	r31
    972a:	ef 91       	pop	r30
    972c:	bf 91       	pop	r27
    972e:	af 91       	pop	r26
    9730:	9f 91       	pop	r25
    9732:	8f 91       	pop	r24
    9734:	7f 91       	pop	r23
    9736:	6f 91       	pop	r22
    9738:	5f 91       	pop	r21
    973a:	4f 91       	pop	r20
    973c:	3f 91       	pop	r19
    973e:	2f 91       	pop	r18
    9740:	0f 90       	pop	r0
    9742:	0b be       	out	0x3b, r0	; 59
    9744:	0f 90       	pop	r0
    9746:	0f be       	out	0x3f, r0	; 63
    9748:	0f 90       	pop	r0
    974a:	1f 90       	pop	r1
    974c:	18 95       	reti

0000974e <__vector_86>:
    974e:	1f 92       	push	r1
    9750:	0f 92       	push	r0
    9752:	0f b6       	in	r0, 0x3f	; 63
    9754:	0f 92       	push	r0
    9756:	11 24       	eor	r1, r1
    9758:	0b b6       	in	r0, 0x3b	; 59
    975a:	0f 92       	push	r0
    975c:	2f 93       	push	r18
    975e:	3f 93       	push	r19
    9760:	4f 93       	push	r20
    9762:	5f 93       	push	r21
    9764:	6f 93       	push	r22
    9766:	7f 93       	push	r23
    9768:	8f 93       	push	r24
    976a:	9f 93       	push	r25
    976c:	af 93       	push	r26
    976e:	bf 93       	push	r27
    9770:	ef 93       	push	r30
    9772:	ff 93       	push	r31
    9774:	e0 91 54 23 	lds	r30, 0x2354	; 0x802354 <tc_tcd1_ccb_callback>
    9778:	f0 91 55 23 	lds	r31, 0x2355	; 0x802355 <tc_tcd1_ccb_callback+0x1>
    977c:	30 97       	sbiw	r30, 0x00	; 0
    977e:	09 f0       	breq	.+2      	; 0x9782 <__vector_86+0x34>
    9780:	19 95       	eicall
    9782:	ff 91       	pop	r31
    9784:	ef 91       	pop	r30
    9786:	bf 91       	pop	r27
    9788:	af 91       	pop	r26
    978a:	9f 91       	pop	r25
    978c:	8f 91       	pop	r24
    978e:	7f 91       	pop	r23
    9790:	6f 91       	pop	r22
    9792:	5f 91       	pop	r21
    9794:	4f 91       	pop	r20
    9796:	3f 91       	pop	r19
    9798:	2f 91       	pop	r18
    979a:	0f 90       	pop	r0
    979c:	0b be       	out	0x3b, r0	; 59
    979e:	0f 90       	pop	r0
    97a0:	0f be       	out	0x3f, r0	; 63
    97a2:	0f 90       	pop	r0
    97a4:	1f 90       	pop	r1
    97a6:	18 95       	reti

000097a8 <__vector_47>:
    97a8:	1f 92       	push	r1
    97aa:	0f 92       	push	r0
    97ac:	0f b6       	in	r0, 0x3f	; 63
    97ae:	0f 92       	push	r0
    97b0:	11 24       	eor	r1, r1
    97b2:	0b b6       	in	r0, 0x3b	; 59
    97b4:	0f 92       	push	r0
    97b6:	2f 93       	push	r18
    97b8:	3f 93       	push	r19
    97ba:	4f 93       	push	r20
    97bc:	5f 93       	push	r21
    97be:	6f 93       	push	r22
    97c0:	7f 93       	push	r23
    97c2:	8f 93       	push	r24
    97c4:	9f 93       	push	r25
    97c6:	af 93       	push	r26
    97c8:	bf 93       	push	r27
    97ca:	ef 93       	push	r30
    97cc:	ff 93       	push	r31
    97ce:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <tc_tce0_ovf_callback>
    97d2:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <tc_tce0_ovf_callback+0x1>
    97d6:	30 97       	sbiw	r30, 0x00	; 0
    97d8:	09 f0       	breq	.+2      	; 0x97dc <__vector_47+0x34>
    97da:	19 95       	eicall
    97dc:	ff 91       	pop	r31
    97de:	ef 91       	pop	r30
    97e0:	bf 91       	pop	r27
    97e2:	af 91       	pop	r26
    97e4:	9f 91       	pop	r25
    97e6:	8f 91       	pop	r24
    97e8:	7f 91       	pop	r23
    97ea:	6f 91       	pop	r22
    97ec:	5f 91       	pop	r21
    97ee:	4f 91       	pop	r20
    97f0:	3f 91       	pop	r19
    97f2:	2f 91       	pop	r18
    97f4:	0f 90       	pop	r0
    97f6:	0b be       	out	0x3b, r0	; 59
    97f8:	0f 90       	pop	r0
    97fa:	0f be       	out	0x3f, r0	; 63
    97fc:	0f 90       	pop	r0
    97fe:	1f 90       	pop	r1
    9800:	18 95       	reti

00009802 <__vector_48>:
    9802:	1f 92       	push	r1
    9804:	0f 92       	push	r0
    9806:	0f b6       	in	r0, 0x3f	; 63
    9808:	0f 92       	push	r0
    980a:	11 24       	eor	r1, r1
    980c:	0b b6       	in	r0, 0x3b	; 59
    980e:	0f 92       	push	r0
    9810:	2f 93       	push	r18
    9812:	3f 93       	push	r19
    9814:	4f 93       	push	r20
    9816:	5f 93       	push	r21
    9818:	6f 93       	push	r22
    981a:	7f 93       	push	r23
    981c:	8f 93       	push	r24
    981e:	9f 93       	push	r25
    9820:	af 93       	push	r26
    9822:	bf 93       	push	r27
    9824:	ef 93       	push	r30
    9826:	ff 93       	push	r31
    9828:	e0 91 50 23 	lds	r30, 0x2350	; 0x802350 <tc_tce0_err_callback>
    982c:	f0 91 51 23 	lds	r31, 0x2351	; 0x802351 <tc_tce0_err_callback+0x1>
    9830:	30 97       	sbiw	r30, 0x00	; 0
    9832:	09 f0       	breq	.+2      	; 0x9836 <__vector_48+0x34>
    9834:	19 95       	eicall
    9836:	ff 91       	pop	r31
    9838:	ef 91       	pop	r30
    983a:	bf 91       	pop	r27
    983c:	af 91       	pop	r26
    983e:	9f 91       	pop	r25
    9840:	8f 91       	pop	r24
    9842:	7f 91       	pop	r23
    9844:	6f 91       	pop	r22
    9846:	5f 91       	pop	r21
    9848:	4f 91       	pop	r20
    984a:	3f 91       	pop	r19
    984c:	2f 91       	pop	r18
    984e:	0f 90       	pop	r0
    9850:	0b be       	out	0x3b, r0	; 59
    9852:	0f 90       	pop	r0
    9854:	0f be       	out	0x3f, r0	; 63
    9856:	0f 90       	pop	r0
    9858:	1f 90       	pop	r1
    985a:	18 95       	reti

0000985c <__vector_49>:
    985c:	1f 92       	push	r1
    985e:	0f 92       	push	r0
    9860:	0f b6       	in	r0, 0x3f	; 63
    9862:	0f 92       	push	r0
    9864:	11 24       	eor	r1, r1
    9866:	0b b6       	in	r0, 0x3b	; 59
    9868:	0f 92       	push	r0
    986a:	2f 93       	push	r18
    986c:	3f 93       	push	r19
    986e:	4f 93       	push	r20
    9870:	5f 93       	push	r21
    9872:	6f 93       	push	r22
    9874:	7f 93       	push	r23
    9876:	8f 93       	push	r24
    9878:	9f 93       	push	r25
    987a:	af 93       	push	r26
    987c:	bf 93       	push	r27
    987e:	ef 93       	push	r30
    9880:	ff 93       	push	r31
    9882:	e0 91 4e 23 	lds	r30, 0x234E	; 0x80234e <tc_tce0_cca_callback>
    9886:	f0 91 4f 23 	lds	r31, 0x234F	; 0x80234f <tc_tce0_cca_callback+0x1>
    988a:	30 97       	sbiw	r30, 0x00	; 0
    988c:	09 f0       	breq	.+2      	; 0x9890 <__vector_49+0x34>
    988e:	19 95       	eicall
    9890:	ff 91       	pop	r31
    9892:	ef 91       	pop	r30
    9894:	bf 91       	pop	r27
    9896:	af 91       	pop	r26
    9898:	9f 91       	pop	r25
    989a:	8f 91       	pop	r24
    989c:	7f 91       	pop	r23
    989e:	6f 91       	pop	r22
    98a0:	5f 91       	pop	r21
    98a2:	4f 91       	pop	r20
    98a4:	3f 91       	pop	r19
    98a6:	2f 91       	pop	r18
    98a8:	0f 90       	pop	r0
    98aa:	0b be       	out	0x3b, r0	; 59
    98ac:	0f 90       	pop	r0
    98ae:	0f be       	out	0x3f, r0	; 63
    98b0:	0f 90       	pop	r0
    98b2:	1f 90       	pop	r1
    98b4:	18 95       	reti

000098b6 <__vector_50>:
    98b6:	1f 92       	push	r1
    98b8:	0f 92       	push	r0
    98ba:	0f b6       	in	r0, 0x3f	; 63
    98bc:	0f 92       	push	r0
    98be:	11 24       	eor	r1, r1
    98c0:	0b b6       	in	r0, 0x3b	; 59
    98c2:	0f 92       	push	r0
    98c4:	2f 93       	push	r18
    98c6:	3f 93       	push	r19
    98c8:	4f 93       	push	r20
    98ca:	5f 93       	push	r21
    98cc:	6f 93       	push	r22
    98ce:	7f 93       	push	r23
    98d0:	8f 93       	push	r24
    98d2:	9f 93       	push	r25
    98d4:	af 93       	push	r26
    98d6:	bf 93       	push	r27
    98d8:	ef 93       	push	r30
    98da:	ff 93       	push	r31
    98dc:	e0 91 4c 23 	lds	r30, 0x234C	; 0x80234c <tc_tce0_ccb_callback>
    98e0:	f0 91 4d 23 	lds	r31, 0x234D	; 0x80234d <tc_tce0_ccb_callback+0x1>
    98e4:	30 97       	sbiw	r30, 0x00	; 0
    98e6:	09 f0       	breq	.+2      	; 0x98ea <__vector_50+0x34>
    98e8:	19 95       	eicall
    98ea:	ff 91       	pop	r31
    98ec:	ef 91       	pop	r30
    98ee:	bf 91       	pop	r27
    98f0:	af 91       	pop	r26
    98f2:	9f 91       	pop	r25
    98f4:	8f 91       	pop	r24
    98f6:	7f 91       	pop	r23
    98f8:	6f 91       	pop	r22
    98fa:	5f 91       	pop	r21
    98fc:	4f 91       	pop	r20
    98fe:	3f 91       	pop	r19
    9900:	2f 91       	pop	r18
    9902:	0f 90       	pop	r0
    9904:	0b be       	out	0x3b, r0	; 59
    9906:	0f 90       	pop	r0
    9908:	0f be       	out	0x3f, r0	; 63
    990a:	0f 90       	pop	r0
    990c:	1f 90       	pop	r1
    990e:	18 95       	reti

00009910 <__vector_51>:
    9910:	1f 92       	push	r1
    9912:	0f 92       	push	r0
    9914:	0f b6       	in	r0, 0x3f	; 63
    9916:	0f 92       	push	r0
    9918:	11 24       	eor	r1, r1
    991a:	0b b6       	in	r0, 0x3b	; 59
    991c:	0f 92       	push	r0
    991e:	2f 93       	push	r18
    9920:	3f 93       	push	r19
    9922:	4f 93       	push	r20
    9924:	5f 93       	push	r21
    9926:	6f 93       	push	r22
    9928:	7f 93       	push	r23
    992a:	8f 93       	push	r24
    992c:	9f 93       	push	r25
    992e:	af 93       	push	r26
    9930:	bf 93       	push	r27
    9932:	ef 93       	push	r30
    9934:	ff 93       	push	r31
    9936:	e0 91 4a 23 	lds	r30, 0x234A	; 0x80234a <tc_tce0_ccc_callback>
    993a:	f0 91 4b 23 	lds	r31, 0x234B	; 0x80234b <tc_tce0_ccc_callback+0x1>
    993e:	30 97       	sbiw	r30, 0x00	; 0
    9940:	09 f0       	breq	.+2      	; 0x9944 <__vector_51+0x34>
    9942:	19 95       	eicall
    9944:	ff 91       	pop	r31
    9946:	ef 91       	pop	r30
    9948:	bf 91       	pop	r27
    994a:	af 91       	pop	r26
    994c:	9f 91       	pop	r25
    994e:	8f 91       	pop	r24
    9950:	7f 91       	pop	r23
    9952:	6f 91       	pop	r22
    9954:	5f 91       	pop	r21
    9956:	4f 91       	pop	r20
    9958:	3f 91       	pop	r19
    995a:	2f 91       	pop	r18
    995c:	0f 90       	pop	r0
    995e:	0b be       	out	0x3b, r0	; 59
    9960:	0f 90       	pop	r0
    9962:	0f be       	out	0x3f, r0	; 63
    9964:	0f 90       	pop	r0
    9966:	1f 90       	pop	r1
    9968:	18 95       	reti

0000996a <__vector_52>:
    996a:	1f 92       	push	r1
    996c:	0f 92       	push	r0
    996e:	0f b6       	in	r0, 0x3f	; 63
    9970:	0f 92       	push	r0
    9972:	11 24       	eor	r1, r1
    9974:	0b b6       	in	r0, 0x3b	; 59
    9976:	0f 92       	push	r0
    9978:	2f 93       	push	r18
    997a:	3f 93       	push	r19
    997c:	4f 93       	push	r20
    997e:	5f 93       	push	r21
    9980:	6f 93       	push	r22
    9982:	7f 93       	push	r23
    9984:	8f 93       	push	r24
    9986:	9f 93       	push	r25
    9988:	af 93       	push	r26
    998a:	bf 93       	push	r27
    998c:	ef 93       	push	r30
    998e:	ff 93       	push	r31
    9990:	e0 91 48 23 	lds	r30, 0x2348	; 0x802348 <tc_tce0_ccd_callback>
    9994:	f0 91 49 23 	lds	r31, 0x2349	; 0x802349 <tc_tce0_ccd_callback+0x1>
    9998:	30 97       	sbiw	r30, 0x00	; 0
    999a:	09 f0       	breq	.+2      	; 0x999e <__vector_52+0x34>
    999c:	19 95       	eicall
    999e:	ff 91       	pop	r31
    99a0:	ef 91       	pop	r30
    99a2:	bf 91       	pop	r27
    99a4:	af 91       	pop	r26
    99a6:	9f 91       	pop	r25
    99a8:	8f 91       	pop	r24
    99aa:	7f 91       	pop	r23
    99ac:	6f 91       	pop	r22
    99ae:	5f 91       	pop	r21
    99b0:	4f 91       	pop	r20
    99b2:	3f 91       	pop	r19
    99b4:	2f 91       	pop	r18
    99b6:	0f 90       	pop	r0
    99b8:	0b be       	out	0x3b, r0	; 59
    99ba:	0f 90       	pop	r0
    99bc:	0f be       	out	0x3f, r0	; 63
    99be:	0f 90       	pop	r0
    99c0:	1f 90       	pop	r1
    99c2:	18 95       	reti

000099c4 <__vector_53>:
    99c4:	1f 92       	push	r1
    99c6:	0f 92       	push	r0
    99c8:	0f b6       	in	r0, 0x3f	; 63
    99ca:	0f 92       	push	r0
    99cc:	11 24       	eor	r1, r1
    99ce:	0b b6       	in	r0, 0x3b	; 59
    99d0:	0f 92       	push	r0
    99d2:	2f 93       	push	r18
    99d4:	3f 93       	push	r19
    99d6:	4f 93       	push	r20
    99d8:	5f 93       	push	r21
    99da:	6f 93       	push	r22
    99dc:	7f 93       	push	r23
    99de:	8f 93       	push	r24
    99e0:	9f 93       	push	r25
    99e2:	af 93       	push	r26
    99e4:	bf 93       	push	r27
    99e6:	ef 93       	push	r30
    99e8:	ff 93       	push	r31
    99ea:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <tc_tce1_ovf_callback>
    99ee:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <tc_tce1_ovf_callback+0x1>
    99f2:	30 97       	sbiw	r30, 0x00	; 0
    99f4:	09 f0       	breq	.+2      	; 0x99f8 <__vector_53+0x34>
    99f6:	19 95       	eicall
    99f8:	ff 91       	pop	r31
    99fa:	ef 91       	pop	r30
    99fc:	bf 91       	pop	r27
    99fe:	af 91       	pop	r26
    9a00:	9f 91       	pop	r25
    9a02:	8f 91       	pop	r24
    9a04:	7f 91       	pop	r23
    9a06:	6f 91       	pop	r22
    9a08:	5f 91       	pop	r21
    9a0a:	4f 91       	pop	r20
    9a0c:	3f 91       	pop	r19
    9a0e:	2f 91       	pop	r18
    9a10:	0f 90       	pop	r0
    9a12:	0b be       	out	0x3b, r0	; 59
    9a14:	0f 90       	pop	r0
    9a16:	0f be       	out	0x3f, r0	; 63
    9a18:	0f 90       	pop	r0
    9a1a:	1f 90       	pop	r1
    9a1c:	18 95       	reti

00009a1e <__vector_54>:
    9a1e:	1f 92       	push	r1
    9a20:	0f 92       	push	r0
    9a22:	0f b6       	in	r0, 0x3f	; 63
    9a24:	0f 92       	push	r0
    9a26:	11 24       	eor	r1, r1
    9a28:	0b b6       	in	r0, 0x3b	; 59
    9a2a:	0f 92       	push	r0
    9a2c:	2f 93       	push	r18
    9a2e:	3f 93       	push	r19
    9a30:	4f 93       	push	r20
    9a32:	5f 93       	push	r21
    9a34:	6f 93       	push	r22
    9a36:	7f 93       	push	r23
    9a38:	8f 93       	push	r24
    9a3a:	9f 93       	push	r25
    9a3c:	af 93       	push	r26
    9a3e:	bf 93       	push	r27
    9a40:	ef 93       	push	r30
    9a42:	ff 93       	push	r31
    9a44:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <tc_tce1_err_callback>
    9a48:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <tc_tce1_err_callback+0x1>
    9a4c:	30 97       	sbiw	r30, 0x00	; 0
    9a4e:	09 f0       	breq	.+2      	; 0x9a52 <__vector_54+0x34>
    9a50:	19 95       	eicall
    9a52:	ff 91       	pop	r31
    9a54:	ef 91       	pop	r30
    9a56:	bf 91       	pop	r27
    9a58:	af 91       	pop	r26
    9a5a:	9f 91       	pop	r25
    9a5c:	8f 91       	pop	r24
    9a5e:	7f 91       	pop	r23
    9a60:	6f 91       	pop	r22
    9a62:	5f 91       	pop	r21
    9a64:	4f 91       	pop	r20
    9a66:	3f 91       	pop	r19
    9a68:	2f 91       	pop	r18
    9a6a:	0f 90       	pop	r0
    9a6c:	0b be       	out	0x3b, r0	; 59
    9a6e:	0f 90       	pop	r0
    9a70:	0f be       	out	0x3f, r0	; 63
    9a72:	0f 90       	pop	r0
    9a74:	1f 90       	pop	r1
    9a76:	18 95       	reti

00009a78 <__vector_55>:
    9a78:	1f 92       	push	r1
    9a7a:	0f 92       	push	r0
    9a7c:	0f b6       	in	r0, 0x3f	; 63
    9a7e:	0f 92       	push	r0
    9a80:	11 24       	eor	r1, r1
    9a82:	0b b6       	in	r0, 0x3b	; 59
    9a84:	0f 92       	push	r0
    9a86:	2f 93       	push	r18
    9a88:	3f 93       	push	r19
    9a8a:	4f 93       	push	r20
    9a8c:	5f 93       	push	r21
    9a8e:	6f 93       	push	r22
    9a90:	7f 93       	push	r23
    9a92:	8f 93       	push	r24
    9a94:	9f 93       	push	r25
    9a96:	af 93       	push	r26
    9a98:	bf 93       	push	r27
    9a9a:	ef 93       	push	r30
    9a9c:	ff 93       	push	r31
    9a9e:	e0 91 42 23 	lds	r30, 0x2342	; 0x802342 <tc_tce1_cca_callback>
    9aa2:	f0 91 43 23 	lds	r31, 0x2343	; 0x802343 <tc_tce1_cca_callback+0x1>
    9aa6:	30 97       	sbiw	r30, 0x00	; 0
    9aa8:	09 f0       	breq	.+2      	; 0x9aac <__vector_55+0x34>
    9aaa:	19 95       	eicall
    9aac:	ff 91       	pop	r31
    9aae:	ef 91       	pop	r30
    9ab0:	bf 91       	pop	r27
    9ab2:	af 91       	pop	r26
    9ab4:	9f 91       	pop	r25
    9ab6:	8f 91       	pop	r24
    9ab8:	7f 91       	pop	r23
    9aba:	6f 91       	pop	r22
    9abc:	5f 91       	pop	r21
    9abe:	4f 91       	pop	r20
    9ac0:	3f 91       	pop	r19
    9ac2:	2f 91       	pop	r18
    9ac4:	0f 90       	pop	r0
    9ac6:	0b be       	out	0x3b, r0	; 59
    9ac8:	0f 90       	pop	r0
    9aca:	0f be       	out	0x3f, r0	; 63
    9acc:	0f 90       	pop	r0
    9ace:	1f 90       	pop	r1
    9ad0:	18 95       	reti

00009ad2 <__vector_56>:
    9ad2:	1f 92       	push	r1
    9ad4:	0f 92       	push	r0
    9ad6:	0f b6       	in	r0, 0x3f	; 63
    9ad8:	0f 92       	push	r0
    9ada:	11 24       	eor	r1, r1
    9adc:	0b b6       	in	r0, 0x3b	; 59
    9ade:	0f 92       	push	r0
    9ae0:	2f 93       	push	r18
    9ae2:	3f 93       	push	r19
    9ae4:	4f 93       	push	r20
    9ae6:	5f 93       	push	r21
    9ae8:	6f 93       	push	r22
    9aea:	7f 93       	push	r23
    9aec:	8f 93       	push	r24
    9aee:	9f 93       	push	r25
    9af0:	af 93       	push	r26
    9af2:	bf 93       	push	r27
    9af4:	ef 93       	push	r30
    9af6:	ff 93       	push	r31
    9af8:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <tc_tce1_ccb_callback>
    9afc:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <tc_tce1_ccb_callback+0x1>
    9b00:	30 97       	sbiw	r30, 0x00	; 0
    9b02:	09 f0       	breq	.+2      	; 0x9b06 <__vector_56+0x34>
    9b04:	19 95       	eicall
    9b06:	ff 91       	pop	r31
    9b08:	ef 91       	pop	r30
    9b0a:	bf 91       	pop	r27
    9b0c:	af 91       	pop	r26
    9b0e:	9f 91       	pop	r25
    9b10:	8f 91       	pop	r24
    9b12:	7f 91       	pop	r23
    9b14:	6f 91       	pop	r22
    9b16:	5f 91       	pop	r21
    9b18:	4f 91       	pop	r20
    9b1a:	3f 91       	pop	r19
    9b1c:	2f 91       	pop	r18
    9b1e:	0f 90       	pop	r0
    9b20:	0b be       	out	0x3b, r0	; 59
    9b22:	0f 90       	pop	r0
    9b24:	0f be       	out	0x3f, r0	; 63
    9b26:	0f 90       	pop	r0
    9b28:	1f 90       	pop	r1
    9b2a:	18 95       	reti

00009b2c <__vector_108>:
    9b2c:	1f 92       	push	r1
    9b2e:	0f 92       	push	r0
    9b30:	0f b6       	in	r0, 0x3f	; 63
    9b32:	0f 92       	push	r0
    9b34:	11 24       	eor	r1, r1
    9b36:	0b b6       	in	r0, 0x3b	; 59
    9b38:	0f 92       	push	r0
    9b3a:	2f 93       	push	r18
    9b3c:	3f 93       	push	r19
    9b3e:	4f 93       	push	r20
    9b40:	5f 93       	push	r21
    9b42:	6f 93       	push	r22
    9b44:	7f 93       	push	r23
    9b46:	8f 93       	push	r24
    9b48:	9f 93       	push	r25
    9b4a:	af 93       	push	r26
    9b4c:	bf 93       	push	r27
    9b4e:	ef 93       	push	r30
    9b50:	ff 93       	push	r31
    9b52:	e0 91 3e 23 	lds	r30, 0x233E	; 0x80233e <tc_tcf0_ovf_callback>
    9b56:	f0 91 3f 23 	lds	r31, 0x233F	; 0x80233f <tc_tcf0_ovf_callback+0x1>
    9b5a:	30 97       	sbiw	r30, 0x00	; 0
    9b5c:	09 f0       	breq	.+2      	; 0x9b60 <__vector_108+0x34>
    9b5e:	19 95       	eicall
    9b60:	ff 91       	pop	r31
    9b62:	ef 91       	pop	r30
    9b64:	bf 91       	pop	r27
    9b66:	af 91       	pop	r26
    9b68:	9f 91       	pop	r25
    9b6a:	8f 91       	pop	r24
    9b6c:	7f 91       	pop	r23
    9b6e:	6f 91       	pop	r22
    9b70:	5f 91       	pop	r21
    9b72:	4f 91       	pop	r20
    9b74:	3f 91       	pop	r19
    9b76:	2f 91       	pop	r18
    9b78:	0f 90       	pop	r0
    9b7a:	0b be       	out	0x3b, r0	; 59
    9b7c:	0f 90       	pop	r0
    9b7e:	0f be       	out	0x3f, r0	; 63
    9b80:	0f 90       	pop	r0
    9b82:	1f 90       	pop	r1
    9b84:	18 95       	reti

00009b86 <__vector_109>:
    9b86:	1f 92       	push	r1
    9b88:	0f 92       	push	r0
    9b8a:	0f b6       	in	r0, 0x3f	; 63
    9b8c:	0f 92       	push	r0
    9b8e:	11 24       	eor	r1, r1
    9b90:	0b b6       	in	r0, 0x3b	; 59
    9b92:	0f 92       	push	r0
    9b94:	2f 93       	push	r18
    9b96:	3f 93       	push	r19
    9b98:	4f 93       	push	r20
    9b9a:	5f 93       	push	r21
    9b9c:	6f 93       	push	r22
    9b9e:	7f 93       	push	r23
    9ba0:	8f 93       	push	r24
    9ba2:	9f 93       	push	r25
    9ba4:	af 93       	push	r26
    9ba6:	bf 93       	push	r27
    9ba8:	ef 93       	push	r30
    9baa:	ff 93       	push	r31
    9bac:	e0 91 3c 23 	lds	r30, 0x233C	; 0x80233c <tc_tcf0_err_callback>
    9bb0:	f0 91 3d 23 	lds	r31, 0x233D	; 0x80233d <tc_tcf0_err_callback+0x1>
    9bb4:	30 97       	sbiw	r30, 0x00	; 0
    9bb6:	09 f0       	breq	.+2      	; 0x9bba <__vector_109+0x34>
    9bb8:	19 95       	eicall
    9bba:	ff 91       	pop	r31
    9bbc:	ef 91       	pop	r30
    9bbe:	bf 91       	pop	r27
    9bc0:	af 91       	pop	r26
    9bc2:	9f 91       	pop	r25
    9bc4:	8f 91       	pop	r24
    9bc6:	7f 91       	pop	r23
    9bc8:	6f 91       	pop	r22
    9bca:	5f 91       	pop	r21
    9bcc:	4f 91       	pop	r20
    9bce:	3f 91       	pop	r19
    9bd0:	2f 91       	pop	r18
    9bd2:	0f 90       	pop	r0
    9bd4:	0b be       	out	0x3b, r0	; 59
    9bd6:	0f 90       	pop	r0
    9bd8:	0f be       	out	0x3f, r0	; 63
    9bda:	0f 90       	pop	r0
    9bdc:	1f 90       	pop	r1
    9bde:	18 95       	reti

00009be0 <__vector_110>:
    9be0:	1f 92       	push	r1
    9be2:	0f 92       	push	r0
    9be4:	0f b6       	in	r0, 0x3f	; 63
    9be6:	0f 92       	push	r0
    9be8:	11 24       	eor	r1, r1
    9bea:	0b b6       	in	r0, 0x3b	; 59
    9bec:	0f 92       	push	r0
    9bee:	2f 93       	push	r18
    9bf0:	3f 93       	push	r19
    9bf2:	4f 93       	push	r20
    9bf4:	5f 93       	push	r21
    9bf6:	6f 93       	push	r22
    9bf8:	7f 93       	push	r23
    9bfa:	8f 93       	push	r24
    9bfc:	9f 93       	push	r25
    9bfe:	af 93       	push	r26
    9c00:	bf 93       	push	r27
    9c02:	ef 93       	push	r30
    9c04:	ff 93       	push	r31
    9c06:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <tc_tcf0_cca_callback>
    9c0a:	f0 91 3b 23 	lds	r31, 0x233B	; 0x80233b <tc_tcf0_cca_callback+0x1>
    9c0e:	30 97       	sbiw	r30, 0x00	; 0
    9c10:	09 f0       	breq	.+2      	; 0x9c14 <__vector_110+0x34>
    9c12:	19 95       	eicall
    9c14:	ff 91       	pop	r31
    9c16:	ef 91       	pop	r30
    9c18:	bf 91       	pop	r27
    9c1a:	af 91       	pop	r26
    9c1c:	9f 91       	pop	r25
    9c1e:	8f 91       	pop	r24
    9c20:	7f 91       	pop	r23
    9c22:	6f 91       	pop	r22
    9c24:	5f 91       	pop	r21
    9c26:	4f 91       	pop	r20
    9c28:	3f 91       	pop	r19
    9c2a:	2f 91       	pop	r18
    9c2c:	0f 90       	pop	r0
    9c2e:	0b be       	out	0x3b, r0	; 59
    9c30:	0f 90       	pop	r0
    9c32:	0f be       	out	0x3f, r0	; 63
    9c34:	0f 90       	pop	r0
    9c36:	1f 90       	pop	r1
    9c38:	18 95       	reti

00009c3a <__vector_111>:
    9c3a:	1f 92       	push	r1
    9c3c:	0f 92       	push	r0
    9c3e:	0f b6       	in	r0, 0x3f	; 63
    9c40:	0f 92       	push	r0
    9c42:	11 24       	eor	r1, r1
    9c44:	0b b6       	in	r0, 0x3b	; 59
    9c46:	0f 92       	push	r0
    9c48:	2f 93       	push	r18
    9c4a:	3f 93       	push	r19
    9c4c:	4f 93       	push	r20
    9c4e:	5f 93       	push	r21
    9c50:	6f 93       	push	r22
    9c52:	7f 93       	push	r23
    9c54:	8f 93       	push	r24
    9c56:	9f 93       	push	r25
    9c58:	af 93       	push	r26
    9c5a:	bf 93       	push	r27
    9c5c:	ef 93       	push	r30
    9c5e:	ff 93       	push	r31
    9c60:	e0 91 38 23 	lds	r30, 0x2338	; 0x802338 <tc_tcf0_ccb_callback>
    9c64:	f0 91 39 23 	lds	r31, 0x2339	; 0x802339 <tc_tcf0_ccb_callback+0x1>
    9c68:	30 97       	sbiw	r30, 0x00	; 0
    9c6a:	09 f0       	breq	.+2      	; 0x9c6e <__vector_111+0x34>
    9c6c:	19 95       	eicall
    9c6e:	ff 91       	pop	r31
    9c70:	ef 91       	pop	r30
    9c72:	bf 91       	pop	r27
    9c74:	af 91       	pop	r26
    9c76:	9f 91       	pop	r25
    9c78:	8f 91       	pop	r24
    9c7a:	7f 91       	pop	r23
    9c7c:	6f 91       	pop	r22
    9c7e:	5f 91       	pop	r21
    9c80:	4f 91       	pop	r20
    9c82:	3f 91       	pop	r19
    9c84:	2f 91       	pop	r18
    9c86:	0f 90       	pop	r0
    9c88:	0b be       	out	0x3b, r0	; 59
    9c8a:	0f 90       	pop	r0
    9c8c:	0f be       	out	0x3f, r0	; 63
    9c8e:	0f 90       	pop	r0
    9c90:	1f 90       	pop	r1
    9c92:	18 95       	reti

00009c94 <__vector_112>:
    9c94:	1f 92       	push	r1
    9c96:	0f 92       	push	r0
    9c98:	0f b6       	in	r0, 0x3f	; 63
    9c9a:	0f 92       	push	r0
    9c9c:	11 24       	eor	r1, r1
    9c9e:	0b b6       	in	r0, 0x3b	; 59
    9ca0:	0f 92       	push	r0
    9ca2:	2f 93       	push	r18
    9ca4:	3f 93       	push	r19
    9ca6:	4f 93       	push	r20
    9ca8:	5f 93       	push	r21
    9caa:	6f 93       	push	r22
    9cac:	7f 93       	push	r23
    9cae:	8f 93       	push	r24
    9cb0:	9f 93       	push	r25
    9cb2:	af 93       	push	r26
    9cb4:	bf 93       	push	r27
    9cb6:	ef 93       	push	r30
    9cb8:	ff 93       	push	r31
    9cba:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <tc_tcf0_ccc_callback>
    9cbe:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <tc_tcf0_ccc_callback+0x1>
    9cc2:	30 97       	sbiw	r30, 0x00	; 0
    9cc4:	09 f0       	breq	.+2      	; 0x9cc8 <__vector_112+0x34>
    9cc6:	19 95       	eicall
    9cc8:	ff 91       	pop	r31
    9cca:	ef 91       	pop	r30
    9ccc:	bf 91       	pop	r27
    9cce:	af 91       	pop	r26
    9cd0:	9f 91       	pop	r25
    9cd2:	8f 91       	pop	r24
    9cd4:	7f 91       	pop	r23
    9cd6:	6f 91       	pop	r22
    9cd8:	5f 91       	pop	r21
    9cda:	4f 91       	pop	r20
    9cdc:	3f 91       	pop	r19
    9cde:	2f 91       	pop	r18
    9ce0:	0f 90       	pop	r0
    9ce2:	0b be       	out	0x3b, r0	; 59
    9ce4:	0f 90       	pop	r0
    9ce6:	0f be       	out	0x3f, r0	; 63
    9ce8:	0f 90       	pop	r0
    9cea:	1f 90       	pop	r1
    9cec:	18 95       	reti

00009cee <__vector_113>:
    9cee:	1f 92       	push	r1
    9cf0:	0f 92       	push	r0
    9cf2:	0f b6       	in	r0, 0x3f	; 63
    9cf4:	0f 92       	push	r0
    9cf6:	11 24       	eor	r1, r1
    9cf8:	0b b6       	in	r0, 0x3b	; 59
    9cfa:	0f 92       	push	r0
    9cfc:	2f 93       	push	r18
    9cfe:	3f 93       	push	r19
    9d00:	4f 93       	push	r20
    9d02:	5f 93       	push	r21
    9d04:	6f 93       	push	r22
    9d06:	7f 93       	push	r23
    9d08:	8f 93       	push	r24
    9d0a:	9f 93       	push	r25
    9d0c:	af 93       	push	r26
    9d0e:	bf 93       	push	r27
    9d10:	ef 93       	push	r30
    9d12:	ff 93       	push	r31
    9d14:	e0 91 34 23 	lds	r30, 0x2334	; 0x802334 <tc_tcf0_ccd_callback>
    9d18:	f0 91 35 23 	lds	r31, 0x2335	; 0x802335 <tc_tcf0_ccd_callback+0x1>
    9d1c:	30 97       	sbiw	r30, 0x00	; 0
    9d1e:	09 f0       	breq	.+2      	; 0x9d22 <__vector_113+0x34>
    9d20:	19 95       	eicall
    9d22:	ff 91       	pop	r31
    9d24:	ef 91       	pop	r30
    9d26:	bf 91       	pop	r27
    9d28:	af 91       	pop	r26
    9d2a:	9f 91       	pop	r25
    9d2c:	8f 91       	pop	r24
    9d2e:	7f 91       	pop	r23
    9d30:	6f 91       	pop	r22
    9d32:	5f 91       	pop	r21
    9d34:	4f 91       	pop	r20
    9d36:	3f 91       	pop	r19
    9d38:	2f 91       	pop	r18
    9d3a:	0f 90       	pop	r0
    9d3c:	0b be       	out	0x3b, r0	; 59
    9d3e:	0f 90       	pop	r0
    9d40:	0f be       	out	0x3f, r0	; 63
    9d42:	0f 90       	pop	r0
    9d44:	1f 90       	pop	r1
    9d46:	18 95       	reti

00009d48 <tc_enable>:
    9d48:	1f 93       	push	r17
    9d4a:	cf 93       	push	r28
    9d4c:	df 93       	push	r29
    9d4e:	1f 92       	push	r1
    9d50:	1f 92       	push	r1
    9d52:	cd b7       	in	r28, 0x3d	; 61
    9d54:	de b7       	in	r29, 0x3e	; 62
    9d56:	2f b7       	in	r18, 0x3f	; 63
    9d58:	2a 83       	std	Y+2, r18	; 0x02
    9d5a:	f8 94       	cli
    9d5c:	1a 81       	ldd	r17, Y+2	; 0x02
    9d5e:	28 2f       	mov	r18, r24
    9d60:	39 2f       	mov	r19, r25
    9d62:	21 15       	cp	r18, r1
    9d64:	88 e0       	ldi	r24, 0x08	; 8
    9d66:	38 07       	cpc	r19, r24
    9d68:	49 f4       	brne	.+18     	; 0x9d7c <tc_enable+0x34>
    9d6a:	61 e0       	ldi	r22, 0x01	; 1
    9d6c:	83 e0       	ldi	r24, 0x03	; 3
    9d6e:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9d72:	64 e0       	ldi	r22, 0x04	; 4
    9d74:	83 e0       	ldi	r24, 0x03	; 3
    9d76:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9d7a:	4f c0       	rjmp	.+158    	; 0x9e1a <tc_enable+0xd2>
    9d7c:	20 34       	cpi	r18, 0x40	; 64
    9d7e:	88 e0       	ldi	r24, 0x08	; 8
    9d80:	38 07       	cpc	r19, r24
    9d82:	49 f4       	brne	.+18     	; 0x9d96 <tc_enable+0x4e>
    9d84:	62 e0       	ldi	r22, 0x02	; 2
    9d86:	83 e0       	ldi	r24, 0x03	; 3
    9d88:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9d8c:	64 e0       	ldi	r22, 0x04	; 4
    9d8e:	83 e0       	ldi	r24, 0x03	; 3
    9d90:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9d94:	42 c0       	rjmp	.+132    	; 0x9e1a <tc_enable+0xd2>
    9d96:	21 15       	cp	r18, r1
    9d98:	89 e0       	ldi	r24, 0x09	; 9
    9d9a:	38 07       	cpc	r19, r24
    9d9c:	49 f4       	brne	.+18     	; 0x9db0 <tc_enable+0x68>
    9d9e:	61 e0       	ldi	r22, 0x01	; 1
    9da0:	84 e0       	ldi	r24, 0x04	; 4
    9da2:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9da6:	64 e0       	ldi	r22, 0x04	; 4
    9da8:	84 e0       	ldi	r24, 0x04	; 4
    9daa:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9dae:	35 c0       	rjmp	.+106    	; 0x9e1a <tc_enable+0xd2>
    9db0:	20 34       	cpi	r18, 0x40	; 64
    9db2:	89 e0       	ldi	r24, 0x09	; 9
    9db4:	38 07       	cpc	r19, r24
    9db6:	49 f4       	brne	.+18     	; 0x9dca <tc_enable+0x82>
    9db8:	62 e0       	ldi	r22, 0x02	; 2
    9dba:	84 e0       	ldi	r24, 0x04	; 4
    9dbc:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9dc0:	64 e0       	ldi	r22, 0x04	; 4
    9dc2:	84 e0       	ldi	r24, 0x04	; 4
    9dc4:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9dc8:	28 c0       	rjmp	.+80     	; 0x9e1a <tc_enable+0xd2>
    9dca:	21 15       	cp	r18, r1
    9dcc:	8a e0       	ldi	r24, 0x0A	; 10
    9dce:	38 07       	cpc	r19, r24
    9dd0:	49 f4       	brne	.+18     	; 0x9de4 <tc_enable+0x9c>
    9dd2:	61 e0       	ldi	r22, 0x01	; 1
    9dd4:	85 e0       	ldi	r24, 0x05	; 5
    9dd6:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9dda:	64 e0       	ldi	r22, 0x04	; 4
    9ddc:	85 e0       	ldi	r24, 0x05	; 5
    9dde:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9de2:	1b c0       	rjmp	.+54     	; 0x9e1a <tc_enable+0xd2>
    9de4:	20 34       	cpi	r18, 0x40	; 64
    9de6:	8a e0       	ldi	r24, 0x0A	; 10
    9de8:	38 07       	cpc	r19, r24
    9dea:	49 f4       	brne	.+18     	; 0x9dfe <tc_enable+0xb6>
    9dec:	62 e0       	ldi	r22, 0x02	; 2
    9dee:	85 e0       	ldi	r24, 0x05	; 5
    9df0:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9df4:	64 e0       	ldi	r22, 0x04	; 4
    9df6:	85 e0       	ldi	r24, 0x05	; 5
    9df8:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9dfc:	0e c0       	rjmp	.+28     	; 0x9e1a <tc_enable+0xd2>
    9dfe:	21 15       	cp	r18, r1
    9e00:	3b 40       	sbci	r19, 0x0B	; 11
    9e02:	49 f4       	brne	.+18     	; 0x9e16 <tc_enable+0xce>
    9e04:	61 e0       	ldi	r22, 0x01	; 1
    9e06:	86 e0       	ldi	r24, 0x06	; 6
    9e08:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9e0c:	64 e0       	ldi	r22, 0x04	; 4
    9e0e:	86 e0       	ldi	r24, 0x06	; 6
    9e10:	0e 94 71 69 	call	0xd2e2	; 0xd2e2 <sysclk_enable_module>
    9e14:	02 c0       	rjmp	.+4      	; 0x9e1a <tc_enable+0xd2>
    9e16:	1f bf       	out	0x3f, r17	; 63
    9e18:	10 c0       	rjmp	.+32     	; 0x9e3a <tc_enable+0xf2>
    9e1a:	80 91 5c 29 	lds	r24, 0x295C	; 0x80295c <sleepmgr_locks+0x1>
    9e1e:	8f 3f       	cpi	r24, 0xFF	; 255
    9e20:	09 f4       	brne	.+2      	; 0x9e24 <tc_enable+0xdc>
    9e22:	ff cf       	rjmp	.-2      	; 0x9e22 <tc_enable+0xda>
    9e24:	8f b7       	in	r24, 0x3f	; 63
    9e26:	89 83       	std	Y+1, r24	; 0x01
    9e28:	f8 94       	cli
    9e2a:	99 81       	ldd	r25, Y+1	; 0x01
    9e2c:	eb e5       	ldi	r30, 0x5B	; 91
    9e2e:	f9 e2       	ldi	r31, 0x29	; 41
    9e30:	81 81       	ldd	r24, Z+1	; 0x01
    9e32:	8f 5f       	subi	r24, 0xFF	; 255
    9e34:	81 83       	std	Z+1, r24	; 0x01
    9e36:	9f bf       	out	0x3f, r25	; 63
    9e38:	1f bf       	out	0x3f, r17	; 63
    9e3a:	0f 90       	pop	r0
    9e3c:	0f 90       	pop	r0
    9e3e:	df 91       	pop	r29
    9e40:	cf 91       	pop	r28
    9e42:	1f 91       	pop	r17
    9e44:	08 95       	ret

00009e46 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    9e46:	81 15       	cp	r24, r1
    9e48:	28 e0       	ldi	r18, 0x08	; 8
    9e4a:	92 07       	cpc	r25, r18
    9e4c:	29 f4       	brne	.+10     	; 0x9e58 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    9e4e:	60 93 7a 23 	sts	0x237A, r22	; 0x80237a <tc_tcc0_ovf_callback>
    9e52:	70 93 7b 23 	sts	0x237B, r23	; 0x80237b <tc_tcc0_ovf_callback+0x1>
    9e56:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    9e58:	80 34       	cpi	r24, 0x40	; 64
    9e5a:	28 e0       	ldi	r18, 0x08	; 8
    9e5c:	92 07       	cpc	r25, r18
    9e5e:	29 f4       	brne	.+10     	; 0x9e6a <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    9e60:	60 93 6e 23 	sts	0x236E, r22	; 0x80236e <tc_tcc1_ovf_callback>
    9e64:	70 93 6f 23 	sts	0x236F, r23	; 0x80236f <tc_tcc1_ovf_callback+0x1>
    9e68:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    9e6a:	81 15       	cp	r24, r1
    9e6c:	29 e0       	ldi	r18, 0x09	; 9
    9e6e:	92 07       	cpc	r25, r18
    9e70:	29 f4       	brne	.+10     	; 0x9e7c <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    9e72:	60 93 66 23 	sts	0x2366, r22	; 0x802366 <tc_tcd0_ovf_callback>
    9e76:	70 93 67 23 	sts	0x2367, r23	; 0x802367 <tc_tcd0_ovf_callback+0x1>
    9e7a:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    9e7c:	80 34       	cpi	r24, 0x40	; 64
    9e7e:	29 e0       	ldi	r18, 0x09	; 9
    9e80:	92 07       	cpc	r25, r18
    9e82:	29 f4       	brne	.+10     	; 0x9e8e <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    9e84:	60 93 5a 23 	sts	0x235A, r22	; 0x80235a <tc_tcd1_ovf_callback>
    9e88:	70 93 5b 23 	sts	0x235B, r23	; 0x80235b <tc_tcd1_ovf_callback+0x1>
    9e8c:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    9e8e:	81 15       	cp	r24, r1
    9e90:	2a e0       	ldi	r18, 0x0A	; 10
    9e92:	92 07       	cpc	r25, r18
    9e94:	29 f4       	brne	.+10     	; 0x9ea0 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    9e96:	60 93 52 23 	sts	0x2352, r22	; 0x802352 <tc_tce0_ovf_callback>
    9e9a:	70 93 53 23 	sts	0x2353, r23	; 0x802353 <tc_tce0_ovf_callback+0x1>
    9e9e:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    9ea0:	80 34       	cpi	r24, 0x40	; 64
    9ea2:	2a e0       	ldi	r18, 0x0A	; 10
    9ea4:	92 07       	cpc	r25, r18
    9ea6:	29 f4       	brne	.+10     	; 0x9eb2 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    9ea8:	60 93 46 23 	sts	0x2346, r22	; 0x802346 <tc_tce1_ovf_callback>
    9eac:	70 93 47 23 	sts	0x2347, r23	; 0x802347 <tc_tce1_ovf_callback+0x1>
    9eb0:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    9eb2:	81 15       	cp	r24, r1
    9eb4:	9b 40       	sbci	r25, 0x0B	; 11
    9eb6:	21 f4       	brne	.+8      	; 0x9ec0 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    9eb8:	60 93 3e 23 	sts	0x233E, r22	; 0x80233e <tc_tcf0_ovf_callback>
    9ebc:	70 93 3f 23 	sts	0x233F, r23	; 0x80233f <tc_tcf0_ovf_callback+0x1>
    9ec0:	08 95       	ret

00009ec2 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    9ec2:	cf 93       	push	r28
    9ec4:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    9ec6:	e0 91 7c 23 	lds	r30, 0x237C	; 0x80237c <transfer>
    9eca:	f0 91 7d 23 	lds	r31, 0x237D	; 0x80237d <transfer+0x1>
    9ece:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    9ed0:	83 ff       	sbrs	r24, 3
    9ed2:	08 c0       	rjmp	.+16     	; 0x9ee4 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    9ed4:	88 60       	ori	r24, 0x08	; 8
    9ed6:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    9ed8:	83 e0       	ldi	r24, 0x03	; 3
    9eda:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    9edc:	86 ef       	ldi	r24, 0xF6	; 246
    9ede:	80 93 86 23 	sts	0x2386, r24	; 0x802386 <transfer+0xa>
    9ee2:	83 c0       	rjmp	.+262    	; 0x9fea <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    9ee4:	98 2f       	mov	r25, r24
    9ee6:	94 71       	andi	r25, 0x14	; 20
    9ee8:	31 f0       	breq	.+12     	; 0x9ef6 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    9eea:	83 e0       	ldi	r24, 0x03	; 3
    9eec:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    9eee:	8f ef       	ldi	r24, 0xFF	; 255
    9ef0:	80 93 86 23 	sts	0x2386, r24	; 0x802386 <transfer+0xa>
    9ef4:	7a c0       	rjmp	.+244    	; 0x9fea <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    9ef6:	86 ff       	sbrs	r24, 6
    9ef8:	43 c0       	rjmp	.+134    	; 0x9f80 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    9efa:	cc e7       	ldi	r28, 0x7C	; 124
    9efc:	d3 e2       	ldi	r29, 0x23	; 35
    9efe:	aa 81       	ldd	r26, Y+2	; 0x02
    9f00:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    9f02:	8c 81       	ldd	r24, Y+4	; 0x04
    9f04:	9d 81       	ldd	r25, Y+5	; 0x05
    9f06:	14 96       	adiw	r26, 0x04	; 4
    9f08:	2d 91       	ld	r18, X+
    9f0a:	3c 91       	ld	r19, X
    9f0c:	15 97       	sbiw	r26, 0x05	; 5
    9f0e:	82 17       	cp	r24, r18
    9f10:	93 07       	cpc	r25, r19
    9f12:	6c f4       	brge	.+26     	; 0x9f2e <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    9f14:	9c 01       	movw	r18, r24
    9f16:	2f 5f       	subi	r18, 0xFF	; 255
    9f18:	3f 4f       	sbci	r19, 0xFF	; 255
    9f1a:	20 93 80 23 	sts	0x2380, r18	; 0x802380 <transfer+0x4>
    9f1e:	30 93 81 23 	sts	0x2381, r19	; 0x802381 <transfer+0x5>
    9f22:	a8 0f       	add	r26, r24
    9f24:	b9 1f       	adc	r27, r25
    9f26:	11 96       	adiw	r26, 0x01	; 1
    9f28:	8c 91       	ld	r24, X
    9f2a:	87 83       	std	Z+7, r24	; 0x07
    9f2c:	5e c0       	rjmp	.+188    	; 0x9fea <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    9f2e:	80 91 82 23 	lds	r24, 0x2382	; 0x802382 <transfer+0x6>
    9f32:	90 91 83 23 	lds	r25, 0x2383	; 0x802383 <transfer+0x7>
    9f36:	18 96       	adiw	r26, 0x08	; 8
    9f38:	2d 91       	ld	r18, X+
    9f3a:	3c 91       	ld	r19, X
    9f3c:	19 97       	sbiw	r26, 0x09	; 9
    9f3e:	82 17       	cp	r24, r18
    9f40:	93 07       	cpc	r25, r19
    9f42:	c8 f4       	brcc	.+50     	; 0x9f76 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    9f44:	20 91 84 23 	lds	r18, 0x2384	; 0x802384 <transfer+0x8>
    9f48:	22 23       	and	r18, r18
    9f4a:	21 f0       	breq	.+8      	; 0x9f54 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    9f4c:	86 81       	ldd	r24, Z+6	; 0x06
    9f4e:	81 60       	ori	r24, 0x01	; 1
    9f50:	86 83       	std	Z+6, r24	; 0x06
    9f52:	4b c0       	rjmp	.+150    	; 0x9fea <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    9f54:	16 96       	adiw	r26, 0x06	; 6
    9f56:	2d 91       	ld	r18, X+
    9f58:	3c 91       	ld	r19, X
    9f5a:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    9f5c:	ac 01       	movw	r20, r24
    9f5e:	4f 5f       	subi	r20, 0xFF	; 255
    9f60:	5f 4f       	sbci	r21, 0xFF	; 255
    9f62:	40 93 82 23 	sts	0x2382, r20	; 0x802382 <transfer+0x6>
    9f66:	50 93 83 23 	sts	0x2383, r21	; 0x802383 <transfer+0x7>
    9f6a:	d9 01       	movw	r26, r18
    9f6c:	a8 0f       	add	r26, r24
    9f6e:	b9 1f       	adc	r27, r25
    9f70:	8c 91       	ld	r24, X
    9f72:	87 83       	std	Z+7, r24	; 0x07
    9f74:	3a c0       	rjmp	.+116    	; 0x9fea <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    9f76:	83 e0       	ldi	r24, 0x03	; 3
    9f78:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    9f7a:	10 92 86 23 	sts	0x2386, r1	; 0x802386 <transfer+0xa>
    9f7e:	35 c0       	rjmp	.+106    	; 0x9fea <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    9f80:	88 23       	and	r24, r24
    9f82:	84 f5       	brge	.+96     	; 0x9fe4 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    9f84:	ac e7       	ldi	r26, 0x7C	; 124
    9f86:	b3 e2       	ldi	r27, 0x23	; 35
    9f88:	12 96       	adiw	r26, 0x02	; 2
    9f8a:	cd 91       	ld	r28, X+
    9f8c:	dc 91       	ld	r29, X
    9f8e:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    9f90:	16 96       	adiw	r26, 0x06	; 6
    9f92:	8d 91       	ld	r24, X+
    9f94:	9c 91       	ld	r25, X
    9f96:	17 97       	sbiw	r26, 0x07	; 7
    9f98:	28 85       	ldd	r18, Y+8	; 0x08
    9f9a:	39 85       	ldd	r19, Y+9	; 0x09
    9f9c:	82 17       	cp	r24, r18
    9f9e:	93 07       	cpc	r25, r19
    9fa0:	d8 f4       	brcc	.+54     	; 0x9fd8 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    9fa2:	6e 81       	ldd	r22, Y+6	; 0x06
    9fa4:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    9fa6:	9c 01       	movw	r18, r24
    9fa8:	2f 5f       	subi	r18, 0xFF	; 255
    9faa:	3f 4f       	sbci	r19, 0xFF	; 255
    9fac:	20 93 82 23 	sts	0x2382, r18	; 0x802382 <transfer+0x6>
    9fb0:	30 93 83 23 	sts	0x2383, r19	; 0x802383 <transfer+0x7>
    9fb4:	47 81       	ldd	r20, Z+7	; 0x07
    9fb6:	db 01       	movw	r26, r22
    9fb8:	a8 0f       	add	r26, r24
    9fba:	b9 1f       	adc	r27, r25
    9fbc:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    9fbe:	88 85       	ldd	r24, Y+8	; 0x08
    9fc0:	99 85       	ldd	r25, Y+9	; 0x09
    9fc2:	28 17       	cp	r18, r24
    9fc4:	39 07       	cpc	r19, r25
    9fc6:	18 f4       	brcc	.+6      	; 0x9fce <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    9fc8:	82 e0       	ldi	r24, 0x02	; 2
    9fca:	83 83       	std	Z+3, r24	; 0x03
    9fcc:	0e c0       	rjmp	.+28     	; 0x9fea <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    9fce:	87 e0       	ldi	r24, 0x07	; 7
    9fd0:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    9fd2:	10 92 86 23 	sts	0x2386, r1	; 0x802386 <transfer+0xa>
    9fd6:	09 c0       	rjmp	.+18     	; 0x9fea <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    9fd8:	83 e0       	ldi	r24, 0x03	; 3
    9fda:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    9fdc:	89 ef       	ldi	r24, 0xF9	; 249
    9fde:	80 93 86 23 	sts	0x2386, r24	; 0x802386 <transfer+0xa>
    9fe2:	03 c0       	rjmp	.+6      	; 0x9fea <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    9fe4:	8b ef       	ldi	r24, 0xFB	; 251
    9fe6:	80 93 86 23 	sts	0x2386, r24	; 0x802386 <transfer+0xa>
	}
}
    9fea:	df 91       	pop	r29
    9fec:	cf 91       	pop	r28
    9fee:	08 95       	ret

00009ff0 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    9ff0:	1f 92       	push	r1
    9ff2:	0f 92       	push	r0
    9ff4:	0f b6       	in	r0, 0x3f	; 63
    9ff6:	0f 92       	push	r0
    9ff8:	11 24       	eor	r1, r1
    9ffa:	0b b6       	in	r0, 0x3b	; 59
    9ffc:	0f 92       	push	r0
    9ffe:	2f 93       	push	r18
    a000:	3f 93       	push	r19
    a002:	4f 93       	push	r20
    a004:	5f 93       	push	r21
    a006:	6f 93       	push	r22
    a008:	7f 93       	push	r23
    a00a:	8f 93       	push	r24
    a00c:	9f 93       	push	r25
    a00e:	af 93       	push	r26
    a010:	bf 93       	push	r27
    a012:	ef 93       	push	r30
    a014:	ff 93       	push	r31
    a016:	55 df       	rcall	.-342    	; 0x9ec2 <twim_interrupt_handler>
    a018:	ff 91       	pop	r31
    a01a:	ef 91       	pop	r30
    a01c:	bf 91       	pop	r27
    a01e:	af 91       	pop	r26
    a020:	9f 91       	pop	r25
    a022:	8f 91       	pop	r24
    a024:	7f 91       	pop	r23
    a026:	6f 91       	pop	r22
    a028:	5f 91       	pop	r21
    a02a:	4f 91       	pop	r20
    a02c:	3f 91       	pop	r19
    a02e:	2f 91       	pop	r18
    a030:	0f 90       	pop	r0
    a032:	0b be       	out	0x3b, r0	; 59
    a034:	0f 90       	pop	r0
    a036:	0f be       	out	0x3f, r0	; 63
    a038:	0f 90       	pop	r0
    a03a:	1f 90       	pop	r1
    a03c:	18 95       	reti

0000a03e <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    a03e:	1f 92       	push	r1
    a040:	0f 92       	push	r0
    a042:	0f b6       	in	r0, 0x3f	; 63
    a044:	0f 92       	push	r0
    a046:	11 24       	eor	r1, r1
    a048:	0b b6       	in	r0, 0x3b	; 59
    a04a:	0f 92       	push	r0
    a04c:	2f 93       	push	r18
    a04e:	3f 93       	push	r19
    a050:	4f 93       	push	r20
    a052:	5f 93       	push	r21
    a054:	6f 93       	push	r22
    a056:	7f 93       	push	r23
    a058:	8f 93       	push	r24
    a05a:	9f 93       	push	r25
    a05c:	af 93       	push	r26
    a05e:	bf 93       	push	r27
    a060:	ef 93       	push	r30
    a062:	ff 93       	push	r31
    a064:	2e df       	rcall	.-420    	; 0x9ec2 <twim_interrupt_handler>
    a066:	ff 91       	pop	r31
    a068:	ef 91       	pop	r30
    a06a:	bf 91       	pop	r27
    a06c:	af 91       	pop	r26
    a06e:	9f 91       	pop	r25
    a070:	8f 91       	pop	r24
    a072:	7f 91       	pop	r23
    a074:	6f 91       	pop	r22
    a076:	5f 91       	pop	r21
    a078:	4f 91       	pop	r20
    a07a:	3f 91       	pop	r19
    a07c:	2f 91       	pop	r18
    a07e:	0f 90       	pop	r0
    a080:	0b be       	out	0x3b, r0	; 59
    a082:	0f 90       	pop	r0
    a084:	0f be       	out	0x3f, r0	; 63
    a086:	0f 90       	pop	r0
    a088:	1f 90       	pop	r1
    a08a:	18 95       	reti

0000a08c <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    a08c:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    a08e:	db 01       	movw	r26, r22
    a090:	14 96       	adiw	r26, 0x04	; 4
    a092:	8c 91       	ld	r24, X
    a094:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    a096:	88 eb       	ldi	r24, 0xB8	; 184
    a098:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    a09a:	81 e0       	ldi	r24, 0x01	; 1
    a09c:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    a09e:	ec e7       	ldi	r30, 0x7C	; 124
    a0a0:	f3 e2       	ldi	r31, 0x23	; 35
    a0a2:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    a0a4:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    a0a6:	e0 ea       	ldi	r30, 0xA0	; 160
    a0a8:	f0 e0       	ldi	r31, 0x00	; 0
    a0aa:	82 81       	ldd	r24, Z+2	; 0x02
    a0ac:	82 60       	ori	r24, 0x02	; 2
    a0ae:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    a0b0:	78 94       	sei

	return STATUS_OK;
}
    a0b2:	80 e0       	ldi	r24, 0x00	; 0
    a0b4:	08 95       	ret

0000a0b6 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    a0b6:	cf 93       	push	r28
    a0b8:	df 93       	push	r29
    a0ba:	1f 92       	push	r1
    a0bc:	cd b7       	in	r28, 0x3d	; 61
    a0be:	de b7       	in	r29, 0x3e	; 62
    a0c0:	9c 01       	movw	r18, r24
    a0c2:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    a0c4:	89 2b       	or	r24, r25
    a0c6:	09 f4       	brne	.+2      	; 0xa0ca <twi_master_transfer+0x14>
    a0c8:	51 c0       	rjmp	.+162    	; 0xa16c <twi_master_transfer+0xb6>
    a0ca:	30 97       	sbiw	r30, 0x00	; 0
    a0cc:	09 f4       	brne	.+2      	; 0xa0d0 <twi_master_transfer+0x1a>
    a0ce:	50 c0       	rjmp	.+160    	; 0xa170 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    a0d0:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    a0d2:	80 91 85 23 	lds	r24, 0x2385	; 0x802385 <transfer+0x9>
    a0d6:	88 23       	and	r24, r24
    a0d8:	19 f0       	breq	.+6      	; 0xa0e0 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    a0da:	99 23       	and	r25, r25
    a0dc:	f1 f3       	breq	.-4      	; 0xa0da <twi_master_transfer+0x24>
    a0de:	4a c0       	rjmp	.+148    	; 0xa174 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    a0e0:	8f b7       	in	r24, 0x3f	; 63
    a0e2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    a0e4:	f8 94       	cli
	return flags;
    a0e6:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    a0e8:	ac e7       	ldi	r26, 0x7C	; 124
    a0ea:	b3 e2       	ldi	r27, 0x23	; 35
    a0ec:	91 e0       	ldi	r25, 0x01	; 1
    a0ee:	19 96       	adiw	r26, 0x09	; 9
    a0f0:	9c 93       	st	X, r25
    a0f2:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    a0f4:	90 e8       	ldi	r25, 0x80	; 128
    a0f6:	1a 96       	adiw	r26, 0x0a	; 10
    a0f8:	9c 93       	st	X, r25
    a0fa:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    a0fc:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    a0fe:	2d 93       	st	X+, r18
    a100:	3c 93       	st	X, r19
    a102:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    a104:	12 96       	adiw	r26, 0x02	; 2
    a106:	6d 93       	st	X+, r22
    a108:	7c 93       	st	X, r23
    a10a:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    a10c:	14 96       	adiw	r26, 0x04	; 4
    a10e:	1d 92       	st	X+, r1
    a110:	1c 92       	st	X, r1
    a112:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    a114:	16 96       	adiw	r26, 0x06	; 6
    a116:	1d 92       	st	X+, r1
    a118:	1c 92       	st	X, r1
    a11a:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    a11c:	18 96       	adiw	r26, 0x08	; 8
    a11e:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    a120:	80 81       	ld	r24, Z
    a122:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    a124:	64 81       	ldd	r22, Z+4	; 0x04
    a126:	75 81       	ldd	r23, Z+5	; 0x05
    a128:	67 2b       	or	r22, r23
    a12a:	11 f4       	brne	.+4      	; 0xa130 <twi_master_transfer+0x7a>
    a12c:	41 11       	cpse	r20, r1
    a12e:	03 c0       	rjmp	.+6      	; 0xa136 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    a130:	f9 01       	movw	r30, r18
    a132:	86 83       	std	Z+6, r24	; 0x06
    a134:	03 c0       	rjmp	.+6      	; 0xa13c <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    a136:	81 60       	ori	r24, 0x01	; 1
    a138:	f9 01       	movw	r30, r18
    a13a:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    a13c:	ec e7       	ldi	r30, 0x7C	; 124
    a13e:	f3 e2       	ldi	r31, 0x23	; 35
    a140:	92 85       	ldd	r25, Z+10	; 0x0a
    a142:	90 38       	cpi	r25, 0x80	; 128
    a144:	e9 f3       	breq	.-6      	; 0xa140 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    a146:	f9 01       	movw	r30, r18
    a148:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    a14a:	83 70       	andi	r24, 0x03	; 3
    a14c:	81 30       	cpi	r24, 0x01	; 1
    a14e:	49 f0       	breq	.+18     	; 0xa162 <twi_master_transfer+0xac>
    a150:	ac e7       	ldi	r26, 0x7C	; 124
    a152:	b3 e2       	ldi	r27, 0x23	; 35
    a154:	ed 91       	ld	r30, X+
    a156:	fc 91       	ld	r31, X
    a158:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    a15a:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    a15c:	83 70       	andi	r24, 0x03	; 3
    a15e:	81 30       	cpi	r24, 0x01	; 1
    a160:	c9 f7       	brne	.-14     	; 0xa154 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    a162:	ec e7       	ldi	r30, 0x7C	; 124
    a164:	f3 e2       	ldi	r31, 0x23	; 35
    a166:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    a168:	11 86       	std	Z+9, r1	; 0x09
    a16a:	05 c0       	rjmp	.+10     	; 0xa176 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    a16c:	88 ef       	ldi	r24, 0xF8	; 248
    a16e:	03 c0       	rjmp	.+6      	; 0xa176 <twi_master_transfer+0xc0>
    a170:	88 ef       	ldi	r24, 0xF8	; 248
    a172:	01 c0       	rjmp	.+2      	; 0xa176 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    a174:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    a176:	0f 90       	pop	r0
    a178:	df 91       	pop	r29
    a17a:	cf 91       	pop	r28
    a17c:	08 95       	ret

0000a17e <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    a17e:	cf 93       	push	r28
    a180:	df 93       	push	r29
    a182:	1f 92       	push	r1
    a184:	1f 92       	push	r1
    a186:	cd b7       	in	r28, 0x3d	; 61
    a188:	de b7       	in	r29, 0x3e	; 62
    a18a:	81 11       	cpse	r24, r1
    a18c:	26 c0       	rjmp	.+76     	; 0xa1da <udd_sleep_mode+0x5c>
    a18e:	90 91 b4 24 	lds	r25, 0x24B4	; 0x8024b4 <udd_b_idle>
    a192:	99 23       	and	r25, r25
    a194:	f9 f0       	breq	.+62     	; 0xa1d4 <udd_sleep_mode+0x56>
    a196:	90 91 5c 29 	lds	r25, 0x295C	; 0x80295c <sleepmgr_locks+0x1>
    a19a:	91 11       	cpse	r25, r1
    a19c:	01 c0       	rjmp	.+2      	; 0xa1a0 <udd_sleep_mode+0x22>
    a19e:	ff cf       	rjmp	.-2      	; 0xa19e <udd_sleep_mode+0x20>
    a1a0:	9f b7       	in	r25, 0x3f	; 63
    a1a2:	9a 83       	std	Y+2, r25	; 0x02
    a1a4:	f8 94       	cli
    a1a6:	2a 81       	ldd	r18, Y+2	; 0x02
    a1a8:	eb e5       	ldi	r30, 0x5B	; 91
    a1aa:	f9 e2       	ldi	r31, 0x29	; 41
    a1ac:	91 81       	ldd	r25, Z+1	; 0x01
    a1ae:	91 50       	subi	r25, 0x01	; 1
    a1b0:	91 83       	std	Z+1, r25	; 0x01
    a1b2:	2f bf       	out	0x3f, r18	; 63
    a1b4:	0f c0       	rjmp	.+30     	; 0xa1d4 <udd_sleep_mode+0x56>
    a1b6:	90 91 5c 29 	lds	r25, 0x295C	; 0x80295c <sleepmgr_locks+0x1>
    a1ba:	9f 3f       	cpi	r25, 0xFF	; 255
    a1bc:	09 f4       	brne	.+2      	; 0xa1c0 <udd_sleep_mode+0x42>
    a1be:	ff cf       	rjmp	.-2      	; 0xa1be <udd_sleep_mode+0x40>
    a1c0:	9f b7       	in	r25, 0x3f	; 63
    a1c2:	99 83       	std	Y+1, r25	; 0x01
    a1c4:	f8 94       	cli
    a1c6:	29 81       	ldd	r18, Y+1	; 0x01
    a1c8:	eb e5       	ldi	r30, 0x5B	; 91
    a1ca:	f9 e2       	ldi	r31, 0x29	; 41
    a1cc:	91 81       	ldd	r25, Z+1	; 0x01
    a1ce:	9f 5f       	subi	r25, 0xFF	; 255
    a1d0:	91 83       	std	Z+1, r25	; 0x01
    a1d2:	2f bf       	out	0x3f, r18	; 63
    a1d4:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <udd_b_idle>
    a1d8:	05 c0       	rjmp	.+10     	; 0xa1e4 <udd_sleep_mode+0x66>
    a1da:	90 91 b4 24 	lds	r25, 0x24B4	; 0x8024b4 <udd_b_idle>
    a1de:	99 23       	and	r25, r25
    a1e0:	51 f3       	breq	.-44     	; 0xa1b6 <udd_sleep_mode+0x38>
    a1e2:	f8 cf       	rjmp	.-16     	; 0xa1d4 <udd_sleep_mode+0x56>
    a1e4:	0f 90       	pop	r0
    a1e6:	0f 90       	pop	r0
    a1e8:	df 91       	pop	r29
    a1ea:	cf 91       	pop	r28
    a1ec:	08 95       	ret

0000a1ee <udd_ctrl_init>:
    a1ee:	0f 93       	push	r16
    a1f0:	e8 ec       	ldi	r30, 0xC8	; 200
    a1f2:	f4 e0       	ldi	r31, 0x04	; 4
    a1f4:	80 81       	ld	r24, Z
    a1f6:	8f 7d       	andi	r24, 0xDF	; 223
    a1f8:	80 83       	st	Z, r24
    a1fa:	80 81       	ld	r24, Z
    a1fc:	8f 7d       	andi	r24, 0xDF	; 223
    a1fe:	80 83       	st	Z, r24
    a200:	e8 e8       	ldi	r30, 0x88	; 136
    a202:	f4 e2       	ldi	r31, 0x24	; 36
    a204:	02 e0       	ldi	r16, 0x02	; 2
    a206:	05 93       	las	Z, r16
    a208:	10 92 8a 24 	sts	0x248A, r1	; 0x80248a <udd_sram+0x16>
    a20c:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <udd_sram+0x17>
    a210:	00 e2       	ldi	r16, 0x20	; 32
    a212:	06 93       	lac	Z, r16
    a214:	00 e4       	ldi	r16, 0x40	; 64
    a216:	06 93       	lac	Z, r16
    a218:	e0 e8       	ldi	r30, 0x80	; 128
    a21a:	f4 e2       	ldi	r31, 0x24	; 36
    a21c:	00 e4       	ldi	r16, 0x40	; 64
    a21e:	06 93       	lac	Z, r16
    a220:	e5 ec       	ldi	r30, 0xC5	; 197
    a222:	f8 e2       	ldi	r31, 0x28	; 40
    a224:	14 86       	std	Z+12, r1	; 0x0c
    a226:	15 86       	std	Z+13, r1	; 0x0d
    a228:	16 86       	std	Z+14, r1	; 0x0e
    a22a:	17 86       	std	Z+15, r1	; 0x0f
    a22c:	12 86       	std	Z+10, r1	; 0x0a
    a22e:	13 86       	std	Z+11, r1	; 0x0b
    a230:	10 92 70 24 	sts	0x2470, r1	; 0x802470 <udd_ep_control_state>
    a234:	0f 91       	pop	r16
    a236:	08 95       	ret

0000a238 <udd_ctrl_stall_data>:
    a238:	0f 93       	push	r16
    a23a:	85 e0       	ldi	r24, 0x05	; 5
    a23c:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udd_ep_control_state>
    a240:	e9 e8       	ldi	r30, 0x89	; 137
    a242:	f4 e2       	ldi	r31, 0x24	; 36
    a244:	04 e0       	ldi	r16, 0x04	; 4
    a246:	05 93       	las	Z, r16
    a248:	e1 e8       	ldi	r30, 0x81	; 129
    a24a:	f4 e2       	ldi	r31, 0x24	; 36
    a24c:	04 e0       	ldi	r16, 0x04	; 4
    a24e:	05 93       	las	Z, r16
    a250:	0f 91       	pop	r16
    a252:	08 95       	ret

0000a254 <udd_ctrl_send_zlp_in>:
    a254:	0f 93       	push	r16
    a256:	83 e0       	ldi	r24, 0x03	; 3
    a258:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udd_ep_control_state>
    a25c:	10 92 8a 24 	sts	0x248A, r1	; 0x80248a <udd_sram+0x16>
    a260:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <udd_sram+0x17>
    a264:	e8 e8       	ldi	r30, 0x88	; 136
    a266:	f4 e2       	ldi	r31, 0x24	; 36
    a268:	02 e0       	ldi	r16, 0x02	; 2
    a26a:	06 93       	lac	Z, r16
    a26c:	0f 91       	pop	r16
    a26e:	08 95       	ret

0000a270 <udd_ctrl_endofrequest>:
    a270:	e0 91 d1 28 	lds	r30, 0x28D1	; 0x8028d1 <udd_g_ctrlreq+0xc>
    a274:	f0 91 d2 28 	lds	r31, 0x28D2	; 0x8028d2 <udd_g_ctrlreq+0xd>
    a278:	30 97       	sbiw	r30, 0x00	; 0
    a27a:	09 f0       	breq	.+2      	; 0xa27e <udd_ctrl_endofrequest+0xe>
    a27c:	19 95       	eicall
    a27e:	08 95       	ret

0000a280 <udd_ctrl_in_sent>:
    a280:	0f 93       	push	r16
    a282:	cf 93       	push	r28
    a284:	df 93       	push	r29
    a286:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_ep_control_state>
    a28a:	83 30       	cpi	r24, 0x03	; 3
    a28c:	19 f4       	brne	.+6      	; 0xa294 <udd_ctrl_in_sent+0x14>
    a28e:	f0 df       	rcall	.-32     	; 0xa270 <udd_ctrl_endofrequest>
    a290:	ae df       	rcall	.-164    	; 0xa1ee <udd_ctrl_init>
    a292:	5e c0       	rjmp	.+188    	; 0xa350 <udd_ctrl_in_sent+0xd0>
    a294:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_ctrl_payload_nb_trans>
    a298:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    a29c:	c0 91 cf 28 	lds	r28, 0x28CF	; 0x8028cf <udd_g_ctrlreq+0xa>
    a2a0:	d0 91 d0 28 	lds	r29, 0x28D0	; 0x8028d0 <udd_g_ctrlreq+0xb>
    a2a4:	c8 1b       	sub	r28, r24
    a2a6:	d9 0b       	sbc	r29, r25
    a2a8:	71 f5       	brne	.+92     	; 0xa306 <udd_ctrl_in_sent+0x86>
    a2aa:	20 91 6e 24 	lds	r18, 0x246E	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    a2ae:	30 91 6f 24 	lds	r19, 0x246F	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
    a2b2:	82 0f       	add	r24, r18
    a2b4:	93 1f       	adc	r25, r19
    a2b6:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    a2ba:	90 93 6f 24 	sts	0x246F, r25	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
    a2be:	20 91 cb 28 	lds	r18, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    a2c2:	30 91 cc 28 	lds	r19, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    a2c6:	82 17       	cp	r24, r18
    a2c8:	93 07       	cpc	r25, r19
    a2ca:	21 f0       	breq	.+8      	; 0xa2d4 <udd_ctrl_in_sent+0x54>
    a2cc:	80 91 87 23 	lds	r24, 0x2387	; 0x802387 <b_shortpacket.5472>
    a2d0:	88 23       	and	r24, r24
    a2d2:	41 f0       	breq	.+16     	; 0xa2e4 <udd_ctrl_in_sent+0x64>
    a2d4:	84 e0       	ldi	r24, 0x04	; 4
    a2d6:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udd_ep_control_state>
    a2da:	e0 e8       	ldi	r30, 0x80	; 128
    a2dc:	f4 e2       	ldi	r31, 0x24	; 36
    a2de:	02 e0       	ldi	r16, 0x02	; 2
    a2e0:	06 93       	lac	Z, r16
    a2e2:	36 c0       	rjmp	.+108    	; 0xa350 <udd_ctrl_in_sent+0xd0>
    a2e4:	e0 91 d3 28 	lds	r30, 0x28D3	; 0x8028d3 <udd_g_ctrlreq+0xe>
    a2e8:	f0 91 d4 28 	lds	r31, 0x28D4	; 0x8028d4 <udd_g_ctrlreq+0xf>
    a2ec:	30 97       	sbiw	r30, 0x00	; 0
    a2ee:	99 f0       	breq	.+38     	; 0xa316 <udd_ctrl_in_sent+0x96>
    a2f0:	19 95       	eicall
    a2f2:	88 23       	and	r24, r24
    a2f4:	81 f0       	breq	.+32     	; 0xa316 <udd_ctrl_in_sent+0x96>
    a2f6:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udd_ctrl_payload_nb_trans>
    a2fa:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    a2fe:	c0 91 cf 28 	lds	r28, 0x28CF	; 0x8028cf <udd_g_ctrlreq+0xa>
    a302:	d0 91 d0 28 	lds	r29, 0x28D0	; 0x8028d0 <udd_g_ctrlreq+0xb>
    a306:	c0 34       	cpi	r28, 0x40	; 64
    a308:	d1 05       	cpc	r29, r1
    a30a:	28 f0       	brcs	.+10     	; 0xa316 <udd_ctrl_in_sent+0x96>
    a30c:	10 92 87 23 	sts	0x2387, r1	; 0x802387 <b_shortpacket.5472>
    a310:	c0 e4       	ldi	r28, 0x40	; 64
    a312:	d0 e0       	ldi	r29, 0x00	; 0
    a314:	03 c0       	rjmp	.+6      	; 0xa31c <udd_ctrl_in_sent+0x9c>
    a316:	81 e0       	ldi	r24, 0x01	; 1
    a318:	80 93 87 23 	sts	0x2387, r24	; 0x802387 <b_shortpacket.5472>
    a31c:	e4 e7       	ldi	r30, 0x74	; 116
    a31e:	f4 e2       	ldi	r31, 0x24	; 36
    a320:	c6 8b       	std	Z+22, r28	; 0x16
    a322:	d7 8b       	std	Z+23, r29	; 0x17
    a324:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_ctrl_payload_nb_trans>
    a328:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    a32c:	20 91 cd 28 	lds	r18, 0x28CD	; 0x8028cd <udd_g_ctrlreq+0x8>
    a330:	30 91 ce 28 	lds	r19, 0x28CE	; 0x8028ce <udd_g_ctrlreq+0x9>
    a334:	28 0f       	add	r18, r24
    a336:	39 1f       	adc	r19, r25
    a338:	20 8f       	std	Z+24, r18	; 0x18
    a33a:	31 8f       	std	Z+25, r19	; 0x19
    a33c:	c8 0f       	add	r28, r24
    a33e:	d9 1f       	adc	r29, r25
    a340:	c0 93 6c 24 	sts	0x246C, r28	; 0x80246c <udd_ctrl_payload_nb_trans>
    a344:	d0 93 6d 24 	sts	0x246D, r29	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    a348:	e8 e8       	ldi	r30, 0x88	; 136
    a34a:	f4 e2       	ldi	r31, 0x24	; 36
    a34c:	02 e0       	ldi	r16, 0x02	; 2
    a34e:	06 93       	lac	Z, r16
    a350:	df 91       	pop	r29
    a352:	cf 91       	pop	r28
    a354:	0f 91       	pop	r16
    a356:	08 95       	ret

0000a358 <udd_ep_get_size>:
    a358:	fc 01       	movw	r30, r24
    a35a:	81 81       	ldd	r24, Z+1	; 0x01
    a35c:	e8 2f       	mov	r30, r24
    a35e:	e7 70       	andi	r30, 0x07	; 7
    a360:	8e 2f       	mov	r24, r30
    a362:	90 e0       	ldi	r25, 0x00	; 0
    a364:	fc 01       	movw	r30, r24
    a366:	31 97       	sbiw	r30, 0x01	; 1
    a368:	e7 30       	cpi	r30, 0x07	; 7
    a36a:	f1 05       	cpc	r31, r1
    a36c:	d8 f4       	brcc	.+54     	; 0xa3a4 <udd_ep_get_size+0x4c>
    a36e:	88 27       	eor	r24, r24
    a370:	e2 50       	subi	r30, 0x02	; 2
    a372:	ff 4f       	sbci	r31, 0xFF	; 255
    a374:	8f 4f       	sbci	r24, 0xFF	; 255
    a376:	0c 94 f0 79 	jmp	0xf3e0	; 0xf3e0 <__tablejump2__>
    a37a:	80 e1       	ldi	r24, 0x10	; 16
    a37c:	90 e0       	ldi	r25, 0x00	; 0
    a37e:	08 95       	ret
    a380:	80 e2       	ldi	r24, 0x20	; 32
    a382:	90 e0       	ldi	r25, 0x00	; 0
    a384:	08 95       	ret
    a386:	80 e4       	ldi	r24, 0x40	; 64
    a388:	90 e0       	ldi	r25, 0x00	; 0
    a38a:	08 95       	ret
    a38c:	80 e8       	ldi	r24, 0x80	; 128
    a38e:	90 e0       	ldi	r25, 0x00	; 0
    a390:	08 95       	ret
    a392:	80 e0       	ldi	r24, 0x00	; 0
    a394:	91 e0       	ldi	r25, 0x01	; 1
    a396:	08 95       	ret
    a398:	80 e0       	ldi	r24, 0x00	; 0
    a39a:	92 e0       	ldi	r25, 0x02	; 2
    a39c:	08 95       	ret
    a39e:	8f ef       	ldi	r24, 0xFF	; 255
    a3a0:	93 e0       	ldi	r25, 0x03	; 3
    a3a2:	08 95       	ret
    a3a4:	88 e0       	ldi	r24, 0x08	; 8
    a3a6:	90 e0       	ldi	r25, 0x00	; 0
    a3a8:	08 95       	ret

0000a3aa <udd_ep_get_job>:
    a3aa:	28 2f       	mov	r18, r24
    a3ac:	2f 70       	andi	r18, 0x0F	; 15
    a3ae:	30 e0       	ldi	r19, 0x00	; 0
    a3b0:	22 0f       	add	r18, r18
    a3b2:	33 1f       	adc	r19, r19
    a3b4:	08 2e       	mov	r0, r24
    a3b6:	00 0c       	add	r0, r0
    a3b8:	99 0b       	sbc	r25, r25
    a3ba:	88 27       	eor	r24, r24
    a3bc:	99 0f       	add	r25, r25
    a3be:	88 1f       	adc	r24, r24
    a3c0:	99 27       	eor	r25, r25
    a3c2:	82 0f       	add	r24, r18
    a3c4:	93 1f       	adc	r25, r19
    a3c6:	02 97       	sbiw	r24, 0x02	; 2
    a3c8:	9c 01       	movw	r18, r24
    a3ca:	22 0f       	add	r18, r18
    a3cc:	33 1f       	adc	r19, r19
    a3ce:	22 0f       	add	r18, r18
    a3d0:	33 1f       	adc	r19, r19
    a3d2:	22 0f       	add	r18, r18
    a3d4:	33 1f       	adc	r19, r19
    a3d6:	82 0f       	add	r24, r18
    a3d8:	93 1f       	adc	r25, r19
    a3da:	88 5f       	subi	r24, 0xF8	; 248
    a3dc:	9b 4d       	sbci	r25, 0xDB	; 219
    a3de:	08 95       	ret

0000a3e0 <udd_ctrl_interrupt_tc_setup>:
    a3e0:	0f 93       	push	r16
    a3e2:	cf 93       	push	r28
    a3e4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    a3e8:	80 ff       	sbrs	r24, 0
    a3ea:	65 c0       	rjmp	.+202    	; 0xa4b6 <udd_ctrl_interrupt_tc_setup+0xd6>
    a3ec:	81 e0       	ldi	r24, 0x01	; 1
    a3ee:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    a3f2:	e0 e8       	ldi	r30, 0x80	; 128
    a3f4:	f4 e2       	ldi	r31, 0x24	; 36
    a3f6:	00 e8       	ldi	r16, 0x80	; 128
    a3f8:	06 93       	lac	Z, r16
    a3fa:	e8 e8       	ldi	r30, 0x88	; 136
    a3fc:	f4 e2       	ldi	r31, 0x24	; 36
    a3fe:	00 e8       	ldi	r16, 0x80	; 128
    a400:	06 93       	lac	Z, r16
    a402:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    a406:	e0 e8       	ldi	r30, 0x80	; 128
    a408:	f4 e2       	ldi	r31, 0x24	; 36
    a40a:	00 e1       	ldi	r16, 0x10	; 16
    a40c:	06 93       	lac	Z, r16
    a40e:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_ep_control_state>
    a412:	88 23       	and	r24, r24
    a414:	29 f0       	breq	.+10     	; 0xa420 <udd_ctrl_interrupt_tc_setup+0x40>
    a416:	83 50       	subi	r24, 0x03	; 3
    a418:	82 30       	cpi	r24, 0x02	; 2
    a41a:	08 f4       	brcc	.+2      	; 0xa41e <udd_ctrl_interrupt_tc_setup+0x3e>
    a41c:	29 df       	rcall	.-430    	; 0xa270 <udd_ctrl_endofrequest>
    a41e:	e7 de       	rcall	.-562    	; 0xa1ee <udd_ctrl_init>
    a420:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udd_sram+0xe>
    a424:	90 91 83 24 	lds	r25, 0x2483	; 0x802483 <udd_sram+0xf>
    a428:	08 97       	sbiw	r24, 0x08	; 8
    a42a:	09 f0       	breq	.+2      	; 0xa42e <udd_ctrl_interrupt_tc_setup+0x4e>
    a42c:	46 c0       	rjmp	.+140    	; 0xa4ba <udd_ctrl_interrupt_tc_setup+0xda>
    a42e:	88 e0       	ldi	r24, 0x08	; 8
    a430:	ec e2       	ldi	r30, 0x2C	; 44
    a432:	f4 e2       	ldi	r31, 0x24	; 36
    a434:	a5 ec       	ldi	r26, 0xC5	; 197
    a436:	b8 e2       	ldi	r27, 0x28	; 40
    a438:	01 90       	ld	r0, Z+
    a43a:	0d 92       	st	X+, r0
    a43c:	8a 95       	dec	r24
    a43e:	e1 f7       	brne	.-8      	; 0xa438 <udd_ctrl_interrupt_tc_setup+0x58>
    a440:	e8 ec       	ldi	r30, 0xC8	; 200
    a442:	f4 e0       	ldi	r31, 0x04	; 4
    a444:	80 81       	ld	r24, Z
    a446:	80 62       	ori	r24, 0x20	; 32
    a448:	80 83       	st	Z, r24
    a44a:	80 81       	ld	r24, Z
    a44c:	80 62       	ori	r24, 0x20	; 32
    a44e:	80 83       	st	Z, r24
    a450:	0e 94 d7 6e 	call	0xddae	; 0xddae <udc_process_setup>
    a454:	c8 2f       	mov	r28, r24
    a456:	81 11       	cpse	r24, r1
    a458:	03 c0       	rjmp	.+6      	; 0xa460 <udd_ctrl_interrupt_tc_setup+0x80>
    a45a:	ee de       	rcall	.-548    	; 0xa238 <udd_ctrl_stall_data>
    a45c:	c1 e0       	ldi	r28, 0x01	; 1
    a45e:	2e c0       	rjmp	.+92     	; 0xa4bc <udd_ctrl_interrupt_tc_setup+0xdc>
    a460:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <udd_g_ctrlreq>
    a464:	88 23       	and	r24, r24
    a466:	6c f4       	brge	.+26     	; 0xa482 <udd_ctrl_interrupt_tc_setup+0xa2>
    a468:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    a46c:	10 92 6f 24 	sts	0x246F, r1	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
    a470:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udd_ctrl_payload_nb_trans>
    a474:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    a478:	82 e0       	ldi	r24, 0x02	; 2
    a47a:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udd_ep_control_state>
    a47e:	00 df       	rcall	.-512    	; 0xa280 <udd_ctrl_in_sent>
    a480:	1d c0       	rjmp	.+58     	; 0xa4bc <udd_ctrl_interrupt_tc_setup+0xdc>
    a482:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    a486:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    a48a:	89 2b       	or	r24, r25
    a48c:	11 f4       	brne	.+4      	; 0xa492 <udd_ctrl_interrupt_tc_setup+0xb2>
    a48e:	e2 de       	rcall	.-572    	; 0xa254 <udd_ctrl_send_zlp_in>
    a490:	15 c0       	rjmp	.+42     	; 0xa4bc <udd_ctrl_interrupt_tc_setup+0xdc>
    a492:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    a496:	10 92 6f 24 	sts	0x246F, r1	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
    a49a:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udd_ctrl_payload_nb_trans>
    a49e:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    a4a2:	81 e0       	ldi	r24, 0x01	; 1
    a4a4:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udd_ep_control_state>
    a4a8:	e0 e8       	ldi	r30, 0x80	; 128
    a4aa:	f4 e2       	ldi	r31, 0x24	; 36
    a4ac:	02 e0       	ldi	r16, 0x02	; 2
    a4ae:	06 93       	lac	Z, r16
    a4b0:	00 e2       	ldi	r16, 0x20	; 32
    a4b2:	06 93       	lac	Z, r16
    a4b4:	03 c0       	rjmp	.+6      	; 0xa4bc <udd_ctrl_interrupt_tc_setup+0xdc>
    a4b6:	c0 e0       	ldi	r28, 0x00	; 0
    a4b8:	01 c0       	rjmp	.+2      	; 0xa4bc <udd_ctrl_interrupt_tc_setup+0xdc>
    a4ba:	c1 e0       	ldi	r28, 0x01	; 1
    a4bc:	8c 2f       	mov	r24, r28
    a4be:	cf 91       	pop	r28
    a4c0:	0f 91       	pop	r16
    a4c2:	08 95       	ret

0000a4c4 <udd_ep_trans_complet>:
    a4c4:	8f 92       	push	r8
    a4c6:	9f 92       	push	r9
    a4c8:	af 92       	push	r10
    a4ca:	bf 92       	push	r11
    a4cc:	df 92       	push	r13
    a4ce:	ef 92       	push	r14
    a4d0:	ff 92       	push	r15
    a4d2:	0f 93       	push	r16
    a4d4:	1f 93       	push	r17
    a4d6:	cf 93       	push	r28
    a4d8:	df 93       	push	r29
    a4da:	d8 2e       	mov	r13, r24
    a4dc:	66 df       	rcall	.-308    	; 0xa3aa <udd_ep_get_job>
    a4de:	8c 01       	movw	r16, r24
    a4e0:	cd 2d       	mov	r28, r13
    a4e2:	cf 70       	andi	r28, 0x0F	; 15
    a4e4:	d0 e0       	ldi	r29, 0x00	; 0
    a4e6:	ce 01       	movw	r24, r28
    a4e8:	88 0f       	add	r24, r24
    a4ea:	99 1f       	adc	r25, r25
    a4ec:	cd 2d       	mov	r28, r13
    a4ee:	0d 2c       	mov	r0, r13
    a4f0:	00 0c       	add	r0, r0
    a4f2:	dd 0b       	sbc	r29, r29
    a4f4:	cc 27       	eor	r28, r28
    a4f6:	dd 0f       	add	r29, r29
    a4f8:	cc 1f       	adc	r28, r28
    a4fa:	dd 27       	eor	r29, r29
    a4fc:	c8 0f       	add	r28, r24
    a4fe:	d9 1f       	adc	r29, r25
    a500:	ce 01       	movw	r24, r28
    a502:	88 0f       	add	r24, r24
    a504:	99 1f       	adc	r25, r25
    a506:	88 0f       	add	r24, r24
    a508:	99 1f       	adc	r25, r25
    a50a:	88 0f       	add	r24, r24
    a50c:	99 1f       	adc	r25, r25
    a50e:	9c 01       	movw	r18, r24
    a510:	20 58       	subi	r18, 0x80	; 128
    a512:	3b 4d       	sbci	r19, 0xDB	; 219
    a514:	79 01       	movw	r14, r18
    a516:	c9 01       	movw	r24, r18
    a518:	1f df       	rcall	.-450    	; 0xa358 <udd_ep_get_size>
    a51a:	4c 01       	movw	r8, r24
    a51c:	dd 20       	and	r13, r13
    a51e:	0c f0       	brlt	.+2      	; 0xa522 <udd_ep_trans_complet+0x5e>
    a520:	7b c0       	rjmp	.+246    	; 0xa618 <udd_ep_trans_complet+0x154>
    a522:	fe 01       	movw	r30, r28
    a524:	ee 0f       	add	r30, r30
    a526:	ff 1f       	adc	r31, r31
    a528:	ee 0f       	add	r30, r30
    a52a:	ff 1f       	adc	r31, r31
    a52c:	ee 0f       	add	r30, r30
    a52e:	ff 1f       	adc	r31, r31
    a530:	ec 58       	subi	r30, 0x8C	; 140
    a532:	fb 4d       	sbci	r31, 0xDB	; 219
    a534:	22 89       	ldd	r18, Z+18	; 0x12
    a536:	33 89       	ldd	r19, Z+19	; 0x13
    a538:	d8 01       	movw	r26, r16
    a53a:	15 96       	adiw	r26, 0x05	; 5
    a53c:	8d 91       	ld	r24, X+
    a53e:	9c 91       	ld	r25, X
    a540:	16 97       	sbiw	r26, 0x06	; 6
    a542:	82 0f       	add	r24, r18
    a544:	93 1f       	adc	r25, r19
    a546:	15 96       	adiw	r26, 0x05	; 5
    a548:	8d 93       	st	X+, r24
    a54a:	9c 93       	st	X, r25
    a54c:	16 97       	sbiw	r26, 0x06	; 6
    a54e:	13 96       	adiw	r26, 0x03	; 3
    a550:	2d 91       	ld	r18, X+
    a552:	3c 91       	ld	r19, X
    a554:	14 97       	sbiw	r26, 0x04	; 4
    a556:	82 17       	cp	r24, r18
    a558:	93 07       	cpc	r25, r19
    a55a:	09 f4       	brne	.+2      	; 0xa55e <udd_ep_trans_complet+0x9a>
    a55c:	47 c0       	rjmp	.+142    	; 0xa5ec <udd_ep_trans_complet+0x128>
    a55e:	28 1b       	sub	r18, r24
    a560:	39 0b       	sbc	r19, r25
    a562:	21 15       	cp	r18, r1
    a564:	b4 e0       	ldi	r27, 0x04	; 4
    a566:	3b 07       	cpc	r19, r27
    a568:	40 f0       	brcs	.+16     	; 0xa57a <udd_ep_trans_complet+0xb6>
    a56a:	2f ef       	ldi	r18, 0xFF	; 255
    a56c:	33 e0       	ldi	r19, 0x03	; 3
    a56e:	c9 01       	movw	r24, r18
    a570:	b4 01       	movw	r22, r8
    a572:	0e 94 8b 79 	call	0xf316	; 0xf316 <__udivmodhi4>
    a576:	28 1b       	sub	r18, r24
    a578:	39 0b       	sbc	r19, r25
    a57a:	f8 01       	movw	r30, r16
    a57c:	80 81       	ld	r24, Z
    a57e:	81 ff       	sbrs	r24, 1
    a580:	0a c0       	rjmp	.+20     	; 0xa596 <udd_ep_trans_complet+0xd2>
    a582:	c9 01       	movw	r24, r18
    a584:	b4 01       	movw	r22, r8
    a586:	0e 94 8b 79 	call	0xf316	; 0xf316 <__udivmodhi4>
    a58a:	41 e0       	ldi	r20, 0x01	; 1
    a58c:	89 2b       	or	r24, r25
    a58e:	09 f0       	breq	.+2      	; 0xa592 <udd_ep_trans_complet+0xce>
    a590:	40 e0       	ldi	r20, 0x00	; 0
    a592:	84 2f       	mov	r24, r20
    a594:	01 c0       	rjmp	.+2      	; 0xa598 <udd_ep_trans_complet+0xd4>
    a596:	80 e0       	ldi	r24, 0x00	; 0
    a598:	d8 01       	movw	r26, r16
    a59a:	9c 91       	ld	r25, X
    a59c:	80 fb       	bst	r24, 0
    a59e:	91 f9       	bld	r25, 1
    a5a0:	9c 93       	st	X, r25
    a5a2:	fe 01       	movw	r30, r28
    a5a4:	ee 0f       	add	r30, r30
    a5a6:	ff 1f       	adc	r31, r31
    a5a8:	ee 0f       	add	r30, r30
    a5aa:	ff 1f       	adc	r31, r31
    a5ac:	ee 0f       	add	r30, r30
    a5ae:	ff 1f       	adc	r31, r31
    a5b0:	ec 58       	subi	r30, 0x8C	; 140
    a5b2:	fb 4d       	sbci	r31, 0xDB	; 219
    a5b4:	12 8a       	std	Z+18, r1	; 0x12
    a5b6:	13 8a       	std	Z+19, r1	; 0x13
    a5b8:	26 87       	std	Z+14, r18	; 0x0e
    a5ba:	37 87       	std	Z+15, r19	; 0x0f
    a5bc:	11 96       	adiw	r26, 0x01	; 1
    a5be:	2d 91       	ld	r18, X+
    a5c0:	3c 91       	ld	r19, X
    a5c2:	12 97       	sbiw	r26, 0x02	; 2
    a5c4:	15 96       	adiw	r26, 0x05	; 5
    a5c6:	8d 91       	ld	r24, X+
    a5c8:	9c 91       	ld	r25, X
    a5ca:	16 97       	sbiw	r26, 0x06	; 6
    a5cc:	82 0f       	add	r24, r18
    a5ce:	93 1f       	adc	r25, r19
    a5d0:	cc 0f       	add	r28, r28
    a5d2:	dd 1f       	adc	r29, r29
    a5d4:	cc 0f       	add	r28, r28
    a5d6:	dd 1f       	adc	r29, r29
    a5d8:	cc 0f       	add	r28, r28
    a5da:	dd 1f       	adc	r29, r29
    a5dc:	cc 57       	subi	r28, 0x7C	; 124
    a5de:	db 4d       	sbci	r29, 0xDB	; 219
    a5e0:	88 83       	st	Y, r24
    a5e2:	99 83       	std	Y+1, r25	; 0x01
    a5e4:	f7 01       	movw	r30, r14
    a5e6:	02 e0       	ldi	r16, 0x02	; 2
    a5e8:	06 93       	lac	Z, r16
    a5ea:	e4 c0       	rjmp	.+456    	; 0xa7b4 <udd_ep_trans_complet+0x2f0>
    a5ec:	d8 01       	movw	r26, r16
    a5ee:	8c 91       	ld	r24, X
    a5f0:	81 ff       	sbrs	r24, 1
    a5f2:	cd c0       	rjmp	.+410    	; 0xa78e <udd_ep_trans_complet+0x2ca>
    a5f4:	8d 7f       	andi	r24, 0xFD	; 253
    a5f6:	8c 93       	st	X, r24
    a5f8:	cc 0f       	add	r28, r28
    a5fa:	dd 1f       	adc	r29, r29
    a5fc:	cc 0f       	add	r28, r28
    a5fe:	dd 1f       	adc	r29, r29
    a600:	cc 0f       	add	r28, r28
    a602:	dd 1f       	adc	r29, r29
    a604:	cc 58       	subi	r28, 0x8C	; 140
    a606:	db 4d       	sbci	r29, 0xDB	; 219
    a608:	1a 8a       	std	Y+18, r1	; 0x12
    a60a:	1b 8a       	std	Y+19, r1	; 0x13
    a60c:	1e 86       	std	Y+14, r1	; 0x0e
    a60e:	1f 86       	std	Y+15, r1	; 0x0f
    a610:	f7 01       	movw	r30, r14
    a612:	02 e0       	ldi	r16, 0x02	; 2
    a614:	06 93       	lac	Z, r16
    a616:	ce c0       	rjmp	.+412    	; 0xa7b4 <udd_ep_trans_complet+0x2f0>
    a618:	fe 01       	movw	r30, r28
    a61a:	ee 0f       	add	r30, r30
    a61c:	ff 1f       	adc	r31, r31
    a61e:	ee 0f       	add	r30, r30
    a620:	ff 1f       	adc	r31, r31
    a622:	ee 0f       	add	r30, r30
    a624:	ff 1f       	adc	r31, r31
    a626:	ec 58       	subi	r30, 0x8C	; 140
    a628:	fb 4d       	sbci	r31, 0xDB	; 219
    a62a:	a6 84       	ldd	r10, Z+14	; 0x0e
    a62c:	b7 84       	ldd	r11, Z+15	; 0x0f
    a62e:	d8 01       	movw	r26, r16
    a630:	8c 91       	ld	r24, X
    a632:	82 ff       	sbrs	r24, 2
    a634:	1b c0       	rjmp	.+54     	; 0xa66c <udd_ep_trans_complet+0x1a8>
    a636:	11 96       	adiw	r26, 0x01	; 1
    a638:	ed 91       	ld	r30, X+
    a63a:	fc 91       	ld	r31, X
    a63c:	12 97       	sbiw	r26, 0x02	; 2
    a63e:	15 96       	adiw	r26, 0x05	; 5
    a640:	2d 91       	ld	r18, X+
    a642:	3c 91       	ld	r19, X
    a644:	16 97       	sbiw	r26, 0x06	; 6
    a646:	13 96       	adiw	r26, 0x03	; 3
    a648:	8d 91       	ld	r24, X+
    a64a:	9c 91       	ld	r25, X
    a64c:	14 97       	sbiw	r26, 0x04	; 4
    a64e:	b4 01       	movw	r22, r8
    a650:	0e 94 8b 79 	call	0xf316	; 0xf316 <__udivmodhi4>
    a654:	b0 e4       	ldi	r27, 0x40	; 64
    a656:	db 9e       	mul	r13, r27
    a658:	b0 01       	movw	r22, r0
    a65a:	11 24       	eor	r1, r1
    a65c:	68 5b       	subi	r22, 0xB8	; 184
    a65e:	7c 4d       	sbci	r23, 0xDC	; 220
    a660:	ac 01       	movw	r20, r24
    a662:	cf 01       	movw	r24, r30
    a664:	82 0f       	add	r24, r18
    a666:	93 1f       	adc	r25, r19
    a668:	0e 94 f7 7c 	call	0xf9ee	; 0xf9ee <memcpy>
    a66c:	f8 01       	movw	r30, r16
    a66e:	25 81       	ldd	r18, Z+5	; 0x05
    a670:	36 81       	ldd	r19, Z+6	; 0x06
    a672:	2a 0d       	add	r18, r10
    a674:	3b 1d       	adc	r19, r11
    a676:	25 83       	std	Z+5, r18	; 0x05
    a678:	36 83       	std	Z+6, r19	; 0x06
    a67a:	83 81       	ldd	r24, Z+3	; 0x03
    a67c:	94 81       	ldd	r25, Z+4	; 0x04
    a67e:	82 17       	cp	r24, r18
    a680:	93 07       	cpc	r25, r19
    a682:	68 f4       	brcc	.+26     	; 0xa69e <udd_ep_trans_complet+0x1da>
    a684:	85 83       	std	Z+5, r24	; 0x05
    a686:	96 83       	std	Z+6, r25	; 0x06
    a688:	cc 0f       	add	r28, r28
    a68a:	dd 1f       	adc	r29, r29
    a68c:	cc 0f       	add	r28, r28
    a68e:	dd 1f       	adc	r29, r29
    a690:	cc 0f       	add	r28, r28
    a692:	dd 1f       	adc	r29, r29
    a694:	cc 58       	subi	r28, 0x8C	; 140
    a696:	db 4d       	sbci	r29, 0xDB	; 219
    a698:	8a 89       	ldd	r24, Y+18	; 0x12
    a69a:	9b 89       	ldd	r25, Y+19	; 0x13
    a69c:	78 c0       	rjmp	.+240    	; 0xa78e <udd_ep_trans_complet+0x2ca>
    a69e:	fe 01       	movw	r30, r28
    a6a0:	ee 0f       	add	r30, r30
    a6a2:	ff 1f       	adc	r31, r31
    a6a4:	ee 0f       	add	r30, r30
    a6a6:	ff 1f       	adc	r31, r31
    a6a8:	ee 0f       	add	r30, r30
    a6aa:	ff 1f       	adc	r31, r31
    a6ac:	ec 58       	subi	r30, 0x8C	; 140
    a6ae:	fb 4d       	sbci	r31, 0xDB	; 219
    a6b0:	42 89       	ldd	r20, Z+18	; 0x12
    a6b2:	53 89       	ldd	r21, Z+19	; 0x13
    a6b4:	a4 16       	cp	r10, r20
    a6b6:	b5 06       	cpc	r11, r21
    a6b8:	09 f0       	breq	.+2      	; 0xa6bc <udd_ep_trans_complet+0x1f8>
    a6ba:	69 c0       	rjmp	.+210    	; 0xa78e <udd_ep_trans_complet+0x2ca>
    a6bc:	28 17       	cp	r18, r24
    a6be:	39 07       	cpc	r19, r25
    a6c0:	09 f4       	brne	.+2      	; 0xa6c4 <udd_ep_trans_complet+0x200>
    a6c2:	65 c0       	rjmp	.+202    	; 0xa78e <udd_ep_trans_complet+0x2ca>
    a6c4:	ac 01       	movw	r20, r24
    a6c6:	42 1b       	sub	r20, r18
    a6c8:	53 0b       	sbc	r21, r19
    a6ca:	9a 01       	movw	r18, r20
    a6cc:	21 15       	cp	r18, r1
    a6ce:	54 e0       	ldi	r21, 0x04	; 4
    a6d0:	35 07       	cpc	r19, r21
    a6d2:	48 f0       	brcs	.+18     	; 0xa6e6 <udd_ep_trans_complet+0x222>
    a6d4:	2f ef       	ldi	r18, 0xFF	; 255
    a6d6:	33 e0       	ldi	r19, 0x03	; 3
    a6d8:	c9 01       	movw	r24, r18
    a6da:	b4 01       	movw	r22, r8
    a6dc:	0e 94 8b 79 	call	0xf316	; 0xf316 <__udivmodhi4>
    a6e0:	28 1b       	sub	r18, r24
    a6e2:	39 0b       	sbc	r19, r25
    a6e4:	06 c0       	rjmp	.+12     	; 0xa6f2 <udd_ep_trans_complet+0x22e>
    a6e6:	c9 01       	movw	r24, r18
    a6e8:	b4 01       	movw	r22, r8
    a6ea:	0e 94 8b 79 	call	0xf316	; 0xf316 <__udivmodhi4>
    a6ee:	28 1b       	sub	r18, r24
    a6f0:	39 0b       	sbc	r19, r25
    a6f2:	fe 01       	movw	r30, r28
    a6f4:	ee 0f       	add	r30, r30
    a6f6:	ff 1f       	adc	r31, r31
    a6f8:	ee 0f       	add	r30, r30
    a6fa:	ff 1f       	adc	r31, r31
    a6fc:	ee 0f       	add	r30, r30
    a6fe:	ff 1f       	adc	r31, r31
    a700:	ec 58       	subi	r30, 0x8C	; 140
    a702:	fb 4d       	sbci	r31, 0xDB	; 219
    a704:	16 86       	std	Z+14, r1	; 0x0e
    a706:	17 86       	std	Z+15, r1	; 0x0f
    a708:	28 15       	cp	r18, r8
    a70a:	39 05       	cpc	r19, r9
    a70c:	00 f5       	brcc	.+64     	; 0xa74e <udd_ep_trans_complet+0x28a>
    a70e:	d8 01       	movw	r26, r16
    a710:	8c 91       	ld	r24, X
    a712:	84 60       	ori	r24, 0x04	; 4
    a714:	8c 93       	st	X, r24
    a716:	b0 e4       	ldi	r27, 0x40	; 64
    a718:	db 9e       	mul	r13, r27
    a71a:	c0 01       	movw	r24, r0
    a71c:	11 24       	eor	r1, r1
    a71e:	88 5b       	subi	r24, 0xB8	; 184
    a720:	9c 4d       	sbci	r25, 0xDC	; 220
    a722:	fe 01       	movw	r30, r28
    a724:	ee 0f       	add	r30, r30
    a726:	ff 1f       	adc	r31, r31
    a728:	ee 0f       	add	r30, r30
    a72a:	ff 1f       	adc	r31, r31
    a72c:	ee 0f       	add	r30, r30
    a72e:	ff 1f       	adc	r31, r31
    a730:	ec 57       	subi	r30, 0x7C	; 124
    a732:	fb 4d       	sbci	r31, 0xDB	; 219
    a734:	80 83       	st	Z, r24
    a736:	91 83       	std	Z+1, r25	; 0x01
    a738:	cc 0f       	add	r28, r28
    a73a:	dd 1f       	adc	r29, r29
    a73c:	cc 0f       	add	r28, r28
    a73e:	dd 1f       	adc	r29, r29
    a740:	cc 0f       	add	r28, r28
    a742:	dd 1f       	adc	r29, r29
    a744:	cc 58       	subi	r28, 0x8C	; 140
    a746:	db 4d       	sbci	r29, 0xDB	; 219
    a748:	8a 8a       	std	Y+18, r8	; 0x12
    a74a:	9b 8a       	std	Y+19, r9	; 0x13
    a74c:	1c c0       	rjmp	.+56     	; 0xa786 <udd_ep_trans_complet+0x2c2>
    a74e:	f8 01       	movw	r30, r16
    a750:	41 81       	ldd	r20, Z+1	; 0x01
    a752:	52 81       	ldd	r21, Z+2	; 0x02
    a754:	85 81       	ldd	r24, Z+5	; 0x05
    a756:	96 81       	ldd	r25, Z+6	; 0x06
    a758:	84 0f       	add	r24, r20
    a75a:	95 1f       	adc	r25, r21
    a75c:	fe 01       	movw	r30, r28
    a75e:	ee 0f       	add	r30, r30
    a760:	ff 1f       	adc	r31, r31
    a762:	ee 0f       	add	r30, r30
    a764:	ff 1f       	adc	r31, r31
    a766:	ee 0f       	add	r30, r30
    a768:	ff 1f       	adc	r31, r31
    a76a:	ec 57       	subi	r30, 0x7C	; 124
    a76c:	fb 4d       	sbci	r31, 0xDB	; 219
    a76e:	80 83       	st	Z, r24
    a770:	91 83       	std	Z+1, r25	; 0x01
    a772:	cc 0f       	add	r28, r28
    a774:	dd 1f       	adc	r29, r29
    a776:	cc 0f       	add	r28, r28
    a778:	dd 1f       	adc	r29, r29
    a77a:	cc 0f       	add	r28, r28
    a77c:	dd 1f       	adc	r29, r29
    a77e:	cc 58       	subi	r28, 0x8C	; 140
    a780:	db 4d       	sbci	r29, 0xDB	; 219
    a782:	2a 8b       	std	Y+18, r18	; 0x12
    a784:	3b 8b       	std	Y+19, r19	; 0x13
    a786:	f7 01       	movw	r30, r14
    a788:	02 e0       	ldi	r16, 0x02	; 2
    a78a:	06 93       	lac	Z, r16
    a78c:	13 c0       	rjmp	.+38     	; 0xa7b4 <udd_ep_trans_complet+0x2f0>
    a78e:	d8 01       	movw	r26, r16
    a790:	8c 91       	ld	r24, X
    a792:	80 ff       	sbrs	r24, 0
    a794:	0f c0       	rjmp	.+30     	; 0xa7b4 <udd_ep_trans_complet+0x2f0>
    a796:	8e 7f       	andi	r24, 0xFE	; 254
    a798:	8c 93       	st	X, r24
    a79a:	17 96       	adiw	r26, 0x07	; 7
    a79c:	ed 91       	ld	r30, X+
    a79e:	fc 91       	ld	r31, X
    a7a0:	18 97       	sbiw	r26, 0x08	; 8
    a7a2:	30 97       	sbiw	r30, 0x00	; 0
    a7a4:	39 f0       	breq	.+14     	; 0xa7b4 <udd_ep_trans_complet+0x2f0>
    a7a6:	15 96       	adiw	r26, 0x05	; 5
    a7a8:	6d 91       	ld	r22, X+
    a7aa:	7c 91       	ld	r23, X
    a7ac:	16 97       	sbiw	r26, 0x06	; 6
    a7ae:	4d 2d       	mov	r20, r13
    a7b0:	80 e0       	ldi	r24, 0x00	; 0
    a7b2:	19 95       	eicall
    a7b4:	df 91       	pop	r29
    a7b6:	cf 91       	pop	r28
    a7b8:	1f 91       	pop	r17
    a7ba:	0f 91       	pop	r16
    a7bc:	ff 90       	pop	r15
    a7be:	ef 90       	pop	r14
    a7c0:	df 90       	pop	r13
    a7c2:	bf 90       	pop	r11
    a7c4:	af 90       	pop	r10
    a7c6:	9f 90       	pop	r9
    a7c8:	8f 90       	pop	r8
    a7ca:	08 95       	ret

0000a7cc <udd_disable>:
    a7cc:	1f 93       	push	r17
    a7ce:	cf 93       	push	r28
    a7d0:	df 93       	push	r29
    a7d2:	1f 92       	push	r1
    a7d4:	1f 92       	push	r1
    a7d6:	cd b7       	in	r28, 0x3d	; 61
    a7d8:	de b7       	in	r29, 0x3e	; 62
    a7da:	8f b7       	in	r24, 0x3f	; 63
    a7dc:	89 83       	std	Y+1, r24	; 0x01
    a7de:	f8 94       	cli
    a7e0:	19 81       	ldd	r17, Y+1	; 0x01
    a7e2:	e1 ec       	ldi	r30, 0xC1	; 193
    a7e4:	f4 e0       	ldi	r31, 0x04	; 4
    a7e6:	80 81       	ld	r24, Z
    a7e8:	8e 7f       	andi	r24, 0xFE	; 254
    a7ea:	80 83       	st	Z, r24
    a7ec:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    a7f0:	10 82       	st	Z, r1
    a7f2:	0e 94 e2 69 	call	0xd3c4	; 0xd3c4 <sysclk_disable_usb>
    a7f6:	80 e0       	ldi	r24, 0x00	; 0
    a7f8:	c2 dc       	rcall	.-1660   	; 0xa17e <udd_sleep_mode>
    a7fa:	80 91 60 29 	lds	r24, 0x2960	; 0x802960 <sleepmgr_locks+0x5>
    a7fe:	81 11       	cpse	r24, r1
    a800:	01 c0       	rjmp	.+2      	; 0xa804 <udd_disable+0x38>
    a802:	ff cf       	rjmp	.-2      	; 0xa802 <udd_disable+0x36>
    a804:	8f b7       	in	r24, 0x3f	; 63
    a806:	8a 83       	std	Y+2, r24	; 0x02
    a808:	f8 94       	cli
    a80a:	9a 81       	ldd	r25, Y+2	; 0x02
    a80c:	eb e5       	ldi	r30, 0x5B	; 91
    a80e:	f9 e2       	ldi	r31, 0x29	; 41
    a810:	85 81       	ldd	r24, Z+5	; 0x05
    a812:	81 50       	subi	r24, 0x01	; 1
    a814:	85 83       	std	Z+5, r24	; 0x05
    a816:	9f bf       	out	0x3f, r25	; 63
    a818:	1f bf       	out	0x3f, r17	; 63
    a81a:	0f 90       	pop	r0
    a81c:	0f 90       	pop	r0
    a81e:	df 91       	pop	r29
    a820:	cf 91       	pop	r28
    a822:	1f 91       	pop	r17
    a824:	08 95       	ret

0000a826 <udd_attach>:
    a826:	1f 93       	push	r17
    a828:	cf 93       	push	r28
    a82a:	df 93       	push	r29
    a82c:	1f 92       	push	r1
    a82e:	cd b7       	in	r28, 0x3d	; 61
    a830:	de b7       	in	r29, 0x3e	; 62
    a832:	8f b7       	in	r24, 0x3f	; 63
    a834:	89 83       	std	Y+1, r24	; 0x01
    a836:	f8 94       	cli
    a838:	19 81       	ldd	r17, Y+1	; 0x01
    a83a:	81 e0       	ldi	r24, 0x01	; 1
    a83c:	a0 dc       	rcall	.-1728   	; 0xa17e <udd_sleep_mode>
    a83e:	ea ec       	ldi	r30, 0xCA	; 202
    a840:	f4 e0       	ldi	r31, 0x04	; 4
    a842:	80 e4       	ldi	r24, 0x40	; 64
    a844:	80 83       	st	Z, r24
    a846:	80 e2       	ldi	r24, 0x20	; 32
    a848:	80 83       	st	Z, r24
    a84a:	e1 ec       	ldi	r30, 0xC1	; 193
    a84c:	f4 e0       	ldi	r31, 0x04	; 4
    a84e:	80 81       	ld	r24, Z
    a850:	81 60       	ori	r24, 0x01	; 1
    a852:	80 83       	st	Z, r24
    a854:	a9 ec       	ldi	r26, 0xC9	; 201
    a856:	b4 e0       	ldi	r27, 0x04	; 4
    a858:	8c 91       	ld	r24, X
    a85a:	82 60       	ori	r24, 0x02	; 2
    a85c:	8c 93       	st	X, r24
    a85e:	e8 ec       	ldi	r30, 0xC8	; 200
    a860:	f4 e0       	ldi	r31, 0x04	; 4
    a862:	80 81       	ld	r24, Z
    a864:	80 64       	ori	r24, 0x40	; 64
    a866:	80 83       	st	Z, r24
    a868:	8c 91       	ld	r24, X
    a86a:	81 60       	ori	r24, 0x01	; 1
    a86c:	8c 93       	st	X, r24
    a86e:	80 81       	ld	r24, Z
    a870:	80 68       	ori	r24, 0x80	; 128
    a872:	80 83       	st	Z, r24
    a874:	1f bf       	out	0x3f, r17	; 63
    a876:	0f 90       	pop	r0
    a878:	df 91       	pop	r29
    a87a:	cf 91       	pop	r28
    a87c:	1f 91       	pop	r17
    a87e:	08 95       	ret

0000a880 <udd_enable>:
    a880:	0f 93       	push	r16
    a882:	1f 93       	push	r17
    a884:	cf 93       	push	r28
    a886:	df 93       	push	r29
    a888:	1f 92       	push	r1
    a88a:	1f 92       	push	r1
    a88c:	cd b7       	in	r28, 0x3d	; 61
    a88e:	de b7       	in	r29, 0x3e	; 62
    a890:	00 e6       	ldi	r16, 0x60	; 96
    a892:	10 e0       	ldi	r17, 0x00	; 0
    a894:	f8 01       	movw	r30, r16
    a896:	10 82       	st	Z, r1
    a898:	80 e3       	ldi	r24, 0x30	; 48
    a89a:	0e 94 9c 69 	call	0xd338	; 0xd338 <sysclk_enable_usb>
    a89e:	e0 ec       	ldi	r30, 0xC0	; 192
    a8a0:	f4 e0       	ldi	r31, 0x04	; 4
    a8a2:	80 81       	ld	r24, Z
    a8a4:	80 64       	ori	r24, 0x40	; 64
    a8a6:	80 83       	st	Z, r24
    a8a8:	81 e0       	ldi	r24, 0x01	; 1
    a8aa:	f8 01       	movw	r30, r16
    a8ac:	80 83       	st	Z, r24
    a8ae:	8f b7       	in	r24, 0x3f	; 63
    a8b0:	8a 83       	std	Y+2, r24	; 0x02
    a8b2:	f8 94       	cli
    a8b4:	1a 81       	ldd	r17, Y+2	; 0x02
    a8b6:	e4 e7       	ldi	r30, 0x74	; 116
    a8b8:	f4 e2       	ldi	r31, 0x24	; 36
    a8ba:	15 86       	std	Z+13, r1	; 0x0d
    a8bc:	15 8a       	std	Z+21, r1	; 0x15
    a8be:	15 8e       	std	Z+29, r1	; 0x1d
    a8c0:	15 a2       	std	Z+37, r1	; 0x25
    a8c2:	15 a6       	std	Z+45, r1	; 0x2d
    a8c4:	15 aa       	std	Z+53, r1	; 0x35
    a8c6:	e8 e0       	ldi	r30, 0x08	; 8
    a8c8:	f4 e2       	ldi	r31, 0x24	; 36
    a8ca:	80 81       	ld	r24, Z
    a8cc:	8e 7f       	andi	r24, 0xFE	; 254
    a8ce:	80 83       	st	Z, r24
    a8d0:	e1 e1       	ldi	r30, 0x11	; 17
    a8d2:	f4 e2       	ldi	r31, 0x24	; 36
    a8d4:	80 81       	ld	r24, Z
    a8d6:	8e 7f       	andi	r24, 0xFE	; 254
    a8d8:	80 83       	st	Z, r24
    a8da:	ea e1       	ldi	r30, 0x1A	; 26
    a8dc:	f4 e2       	ldi	r31, 0x24	; 36
    a8de:	80 81       	ld	r24, Z
    a8e0:	8e 7f       	andi	r24, 0xFE	; 254
    a8e2:	80 83       	st	Z, r24
    a8e4:	e3 e2       	ldi	r30, 0x23	; 35
    a8e6:	f4 e2       	ldi	r31, 0x24	; 36
    a8e8:	80 81       	ld	r24, Z
    a8ea:	8e 7f       	andi	r24, 0xFE	; 254
    a8ec:	80 83       	st	Z, r24
    a8ee:	6a e1       	ldi	r22, 0x1A	; 26
    a8f0:	70 e0       	ldi	r23, 0x00	; 0
    a8f2:	82 e0       	ldi	r24, 0x02	; 2
    a8f4:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    a8f8:	8f 3f       	cpi	r24, 0xFF	; 255
    a8fa:	19 f0       	breq	.+6      	; 0xa902 <udd_enable+0x82>
    a8fc:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    a900:	03 c0       	rjmp	.+6      	; 0xa908 <udd_enable+0x88>
    a902:	8f e1       	ldi	r24, 0x1F	; 31
    a904:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    a908:	6b e1       	ldi	r22, 0x1B	; 27
    a90a:	70 e0       	ldi	r23, 0x00	; 0
    a90c:	82 e0       	ldi	r24, 0x02	; 2
    a90e:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    a912:	8f 3f       	cpi	r24, 0xFF	; 255
    a914:	19 f0       	breq	.+6      	; 0xa91c <udd_enable+0x9c>
    a916:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    a91a:	03 c0       	rjmp	.+6      	; 0xa922 <udd_enable+0xa2>
    a91c:	8f e1       	ldi	r24, 0x1F	; 31
    a91e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    a922:	e0 ec       	ldi	r30, 0xC0	; 192
    a924:	f4 e0       	ldi	r31, 0x04	; 4
    a926:	80 81       	ld	r24, Z
    a928:	82 60       	ori	r24, 0x02	; 2
    a92a:	80 83       	st	Z, r24
    a92c:	80 81       	ld	r24, Z
    a92e:	80 68       	ori	r24, 0x80	; 128
    a930:	80 83       	st	Z, r24
    a932:	80 81       	ld	r24, Z
    a934:	80 61       	ori	r24, 0x10	; 16
    a936:	80 83       	st	Z, r24
    a938:	80 e8       	ldi	r24, 0x80	; 128
    a93a:	94 e2       	ldi	r25, 0x24	; 36
    a93c:	86 83       	std	Z+6, r24	; 0x06
    a93e:	97 83       	std	Z+7, r25	; 0x07
    a940:	80 81       	ld	r24, Z
    a942:	80 62       	ori	r24, 0x20	; 32
    a944:	80 83       	st	Z, r24
    a946:	8f ef       	ldi	r24, 0xFF	; 255
    a948:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    a94c:	e8 ec       	ldi	r30, 0xC8	; 200
    a94e:	f4 e0       	ldi	r31, 0x04	; 4
    a950:	80 81       	ld	r24, Z
    a952:	81 60       	ori	r24, 0x01	; 1
    a954:	80 83       	st	Z, r24
    a956:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <udd_b_idle>
    a95a:	80 91 60 29 	lds	r24, 0x2960	; 0x802960 <sleepmgr_locks+0x5>
    a95e:	8f 3f       	cpi	r24, 0xFF	; 255
    a960:	09 f4       	brne	.+2      	; 0xa964 <udd_enable+0xe4>
    a962:	ff cf       	rjmp	.-2      	; 0xa962 <udd_enable+0xe2>
    a964:	8f b7       	in	r24, 0x3f	; 63
    a966:	89 83       	std	Y+1, r24	; 0x01
    a968:	f8 94       	cli
    a96a:	99 81       	ldd	r25, Y+1	; 0x01
    a96c:	eb e5       	ldi	r30, 0x5B	; 91
    a96e:	f9 e2       	ldi	r31, 0x29	; 41
    a970:	85 81       	ldd	r24, Z+5	; 0x05
    a972:	8f 5f       	subi	r24, 0xFF	; 255
    a974:	85 83       	std	Z+5, r24	; 0x05
    a976:	9f bf       	out	0x3f, r25	; 63
    a978:	56 df       	rcall	.-340    	; 0xa826 <udd_attach>
    a97a:	1f bf       	out	0x3f, r17	; 63
    a97c:	0f 90       	pop	r0
    a97e:	0f 90       	pop	r0
    a980:	df 91       	pop	r29
    a982:	cf 91       	pop	r28
    a984:	1f 91       	pop	r17
    a986:	0f 91       	pop	r16
    a988:	08 95       	ret

0000a98a <udd_is_high_speed>:
    a98a:	80 e0       	ldi	r24, 0x00	; 0
    a98c:	08 95       	ret

0000a98e <udd_set_address>:
    a98e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    a992:	08 95       	ret

0000a994 <udd_getaddress>:
    a994:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    a998:	08 95       	ret

0000a99a <udd_get_frame_number>:
    a99a:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <udd_sram+0x3c>
    a99e:	90 91 b1 24 	lds	r25, 0x24B1	; 0x8024b1 <udd_sram+0x3d>
    a9a2:	08 95       	ret

0000a9a4 <udd_get_micro_frame_number>:
    a9a4:	80 e0       	ldi	r24, 0x00	; 0
    a9a6:	90 e0       	ldi	r25, 0x00	; 0
    a9a8:	08 95       	ret

0000a9aa <udd_set_setup_payload>:
    a9aa:	e5 ec       	ldi	r30, 0xC5	; 197
    a9ac:	f8 e2       	ldi	r31, 0x28	; 40
    a9ae:	80 87       	std	Z+8, r24	; 0x08
    a9b0:	91 87       	std	Z+9, r25	; 0x09
    a9b2:	62 87       	std	Z+10, r22	; 0x0a
    a9b4:	73 87       	std	Z+11, r23	; 0x0b
    a9b6:	08 95       	ret

0000a9b8 <udd_ep_alloc>:
    a9b8:	28 2f       	mov	r18, r24
    a9ba:	2f 70       	andi	r18, 0x0F	; 15
    a9bc:	30 e0       	ldi	r19, 0x00	; 0
    a9be:	22 0f       	add	r18, r18
    a9c0:	33 1f       	adc	r19, r19
    a9c2:	08 2e       	mov	r0, r24
    a9c4:	00 0c       	add	r0, r0
    a9c6:	99 0b       	sbc	r25, r25
    a9c8:	88 27       	eor	r24, r24
    a9ca:	99 0f       	add	r25, r25
    a9cc:	88 1f       	adc	r24, r24
    a9ce:	99 27       	eor	r25, r25
    a9d0:	82 0f       	add	r24, r18
    a9d2:	93 1f       	adc	r25, r19
    a9d4:	fc 01       	movw	r30, r24
    a9d6:	ee 0f       	add	r30, r30
    a9d8:	ff 1f       	adc	r31, r31
    a9da:	ee 0f       	add	r30, r30
    a9dc:	ff 1f       	adc	r31, r31
    a9de:	ee 0f       	add	r30, r30
    a9e0:	ff 1f       	adc	r31, r31
    a9e2:	ec 58       	subi	r30, 0x8C	; 140
    a9e4:	fb 4d       	sbci	r31, 0xDB	; 219
    a9e6:	25 85       	ldd	r18, Z+13	; 0x0d
    a9e8:	20 7c       	andi	r18, 0xC0	; 192
    a9ea:	09 f0       	breq	.+2      	; 0xa9ee <udd_ep_alloc+0x36>
    a9ec:	69 c0       	rjmp	.+210    	; 0xaac0 <udd_ep_alloc+0x108>
    a9ee:	63 70       	andi	r22, 0x03	; 3
    a9f0:	61 30       	cpi	r22, 0x01	; 1
    a9f2:	11 f0       	breq	.+4      	; 0xa9f8 <udd_ep_alloc+0x40>
    a9f4:	18 f4       	brcc	.+6      	; 0xa9fc <udd_ep_alloc+0x44>
    a9f6:	04 c0       	rjmp	.+8      	; 0xaa00 <udd_ep_alloc+0x48>
    a9f8:	60 ec       	ldi	r22, 0xC0	; 192
    a9fa:	03 c0       	rjmp	.+6      	; 0xaa02 <udd_ep_alloc+0x4a>
    a9fc:	60 e8       	ldi	r22, 0x80	; 128
    a9fe:	01 c0       	rjmp	.+2      	; 0xaa02 <udd_ep_alloc+0x4a>
    aa00:	60 e4       	ldi	r22, 0x40	; 64
    aa02:	40 38       	cpi	r20, 0x80	; 128
    aa04:	51 05       	cpc	r21, r1
    aa06:	e9 f0       	breq	.+58     	; 0xaa42 <udd_ep_alloc+0x8a>
    aa08:	50 f4       	brcc	.+20     	; 0xaa1e <udd_ep_alloc+0x66>
    aa0a:	40 32       	cpi	r20, 0x20	; 32
    aa0c:	51 05       	cpc	r21, r1
    aa0e:	a9 f0       	breq	.+42     	; 0xaa3a <udd_ep_alloc+0x82>
    aa10:	40 34       	cpi	r20, 0x40	; 64
    aa12:	51 05       	cpc	r21, r1
    aa14:	a1 f0       	breq	.+40     	; 0xaa3e <udd_ep_alloc+0x86>
    aa16:	40 31       	cpi	r20, 0x10	; 16
    aa18:	51 05       	cpc	r21, r1
    aa1a:	d9 f4       	brne	.+54     	; 0xaa52 <udd_ep_alloc+0x9a>
    aa1c:	0c c0       	rjmp	.+24     	; 0xaa36 <udd_ep_alloc+0x7e>
    aa1e:	41 15       	cp	r20, r1
    aa20:	22 e0       	ldi	r18, 0x02	; 2
    aa22:	52 07       	cpc	r21, r18
    aa24:	91 f0       	breq	.+36     	; 0xaa4a <udd_ep_alloc+0x92>
    aa26:	4f 3f       	cpi	r20, 0xFF	; 255
    aa28:	23 e0       	ldi	r18, 0x03	; 3
    aa2a:	52 07       	cpc	r21, r18
    aa2c:	81 f0       	breq	.+32     	; 0xaa4e <udd_ep_alloc+0x96>
    aa2e:	41 15       	cp	r20, r1
    aa30:	51 40       	sbci	r21, 0x01	; 1
    aa32:	79 f4       	brne	.+30     	; 0xaa52 <udd_ep_alloc+0x9a>
    aa34:	08 c0       	rjmp	.+16     	; 0xaa46 <udd_ep_alloc+0x8e>
    aa36:	21 e0       	ldi	r18, 0x01	; 1
    aa38:	0d c0       	rjmp	.+26     	; 0xaa54 <udd_ep_alloc+0x9c>
    aa3a:	22 e0       	ldi	r18, 0x02	; 2
    aa3c:	0b c0       	rjmp	.+22     	; 0xaa54 <udd_ep_alloc+0x9c>
    aa3e:	23 e0       	ldi	r18, 0x03	; 3
    aa40:	09 c0       	rjmp	.+18     	; 0xaa54 <udd_ep_alloc+0x9c>
    aa42:	24 e0       	ldi	r18, 0x04	; 4
    aa44:	07 c0       	rjmp	.+14     	; 0xaa54 <udd_ep_alloc+0x9c>
    aa46:	25 e0       	ldi	r18, 0x05	; 5
    aa48:	05 c0       	rjmp	.+10     	; 0xaa54 <udd_ep_alloc+0x9c>
    aa4a:	26 e0       	ldi	r18, 0x06	; 6
    aa4c:	03 c0       	rjmp	.+6      	; 0xaa54 <udd_ep_alloc+0x9c>
    aa4e:	27 e0       	ldi	r18, 0x07	; 7
    aa50:	01 c0       	rjmp	.+2      	; 0xaa54 <udd_ep_alloc+0x9c>
    aa52:	20 e0       	ldi	r18, 0x00	; 0
    aa54:	fc 01       	movw	r30, r24
    aa56:	ee 0f       	add	r30, r30
    aa58:	ff 1f       	adc	r31, r31
    aa5a:	ee 0f       	add	r30, r30
    aa5c:	ff 1f       	adc	r31, r31
    aa5e:	ee 0f       	add	r30, r30
    aa60:	ff 1f       	adc	r31, r31
    aa62:	ec 58       	subi	r30, 0x8C	; 140
    aa64:	fb 4d       	sbci	r31, 0xDB	; 219
    aa66:	15 86       	std	Z+13, r1	; 0x0d
    aa68:	36 e0       	ldi	r19, 0x06	; 6
    aa6a:	34 87       	std	Z+12, r19	; 0x0c
    aa6c:	26 2b       	or	r18, r22
    aa6e:	25 87       	std	Z+13, r18	; 0x0d
    aa70:	fc 01       	movw	r30, r24
    aa72:	ee 0f       	add	r30, r30
    aa74:	ff 1f       	adc	r31, r31
    aa76:	ee 0f       	add	r30, r30
    aa78:	ff 1f       	adc	r31, r31
    aa7a:	ee 0f       	add	r30, r30
    aa7c:	ff 1f       	adc	r31, r31
    aa7e:	ec 58       	subi	r30, 0x8C	; 140
    aa80:	fb 4d       	sbci	r31, 0xDB	; 219
    aa82:	25 85       	ldd	r18, Z+13	; 0x0d
    aa84:	20 7c       	andi	r18, 0xC0	; 192
    aa86:	20 3c       	cpi	r18, 0xC0	; 192
    aa88:	69 f4       	brne	.+26     	; 0xaaa4 <udd_ep_alloc+0xec>
    aa8a:	fc 01       	movw	r30, r24
    aa8c:	ee 0f       	add	r30, r30
    aa8e:	ff 1f       	adc	r31, r31
    aa90:	ee 0f       	add	r30, r30
    aa92:	ff 1f       	adc	r31, r31
    aa94:	ee 0f       	add	r30, r30
    aa96:	ff 1f       	adc	r31, r31
    aa98:	ec 58       	subi	r30, 0x8C	; 140
    aa9a:	fb 4d       	sbci	r31, 0xDB	; 219
    aa9c:	25 85       	ldd	r18, Z+13	; 0x0d
    aa9e:	27 70       	andi	r18, 0x07	; 7
    aaa0:	27 30       	cpi	r18, 0x07	; 7
    aaa2:	81 f0       	breq	.+32     	; 0xaac4 <udd_ep_alloc+0x10c>
    aaa4:	88 0f       	add	r24, r24
    aaa6:	99 1f       	adc	r25, r25
    aaa8:	88 0f       	add	r24, r24
    aaaa:	99 1f       	adc	r25, r25
    aaac:	88 0f       	add	r24, r24
    aaae:	99 1f       	adc	r25, r25
    aab0:	fc 01       	movw	r30, r24
    aab2:	ec 58       	subi	r30, 0x8C	; 140
    aab4:	fb 4d       	sbci	r31, 0xDB	; 219
    aab6:	85 85       	ldd	r24, Z+13	; 0x0d
    aab8:	80 62       	ori	r24, 0x20	; 32
    aaba:	85 87       	std	Z+13, r24	; 0x0d
    aabc:	81 e0       	ldi	r24, 0x01	; 1
    aabe:	08 95       	ret
    aac0:	80 e0       	ldi	r24, 0x00	; 0
    aac2:	08 95       	ret
    aac4:	81 e0       	ldi	r24, 0x01	; 1
    aac6:	08 95       	ret

0000aac8 <udd_ep_is_halted>:
    aac8:	e8 2f       	mov	r30, r24
    aaca:	ef 70       	andi	r30, 0x0F	; 15
    aacc:	f0 e0       	ldi	r31, 0x00	; 0
    aace:	ee 0f       	add	r30, r30
    aad0:	ff 1f       	adc	r31, r31
    aad2:	08 2e       	mov	r0, r24
    aad4:	00 0c       	add	r0, r0
    aad6:	99 0b       	sbc	r25, r25
    aad8:	88 27       	eor	r24, r24
    aada:	99 0f       	add	r25, r25
    aadc:	88 1f       	adc	r24, r24
    aade:	99 27       	eor	r25, r25
    aae0:	e8 0f       	add	r30, r24
    aae2:	f9 1f       	adc	r31, r25
    aae4:	ee 0f       	add	r30, r30
    aae6:	ff 1f       	adc	r31, r31
    aae8:	ee 0f       	add	r30, r30
    aaea:	ff 1f       	adc	r31, r31
    aaec:	ee 0f       	add	r30, r30
    aaee:	ff 1f       	adc	r31, r31
    aaf0:	ec 58       	subi	r30, 0x8C	; 140
    aaf2:	fb 4d       	sbci	r31, 0xDB	; 219
    aaf4:	85 85       	ldd	r24, Z+13	; 0x0d
    aaf6:	82 fb       	bst	r24, 2
    aaf8:	88 27       	eor	r24, r24
    aafa:	80 f9       	bld	r24, 0
    aafc:	08 95       	ret

0000aafe <udd_ep_clear_halt>:
    aafe:	0f 93       	push	r16
    ab00:	28 2f       	mov	r18, r24
    ab02:	2f 70       	andi	r18, 0x0F	; 15
    ab04:	30 e0       	ldi	r19, 0x00	; 0
    ab06:	a9 01       	movw	r20, r18
    ab08:	44 0f       	add	r20, r20
    ab0a:	55 1f       	adc	r21, r21
    ab0c:	28 2f       	mov	r18, r24
    ab0e:	08 2e       	mov	r0, r24
    ab10:	00 0c       	add	r0, r0
    ab12:	33 0b       	sbc	r19, r19
    ab14:	22 27       	eor	r18, r18
    ab16:	33 0f       	add	r19, r19
    ab18:	22 1f       	adc	r18, r18
    ab1a:	33 27       	eor	r19, r19
    ab1c:	24 0f       	add	r18, r20
    ab1e:	35 1f       	adc	r19, r21
    ab20:	a9 01       	movw	r20, r18
    ab22:	44 0f       	add	r20, r20
    ab24:	55 1f       	adc	r21, r21
    ab26:	44 0f       	add	r20, r20
    ab28:	55 1f       	adc	r21, r21
    ab2a:	44 0f       	add	r20, r20
    ab2c:	55 1f       	adc	r21, r21
    ab2e:	fa 01       	movw	r30, r20
    ab30:	e0 58       	subi	r30, 0x80	; 128
    ab32:	fb 4d       	sbci	r31, 0xDB	; 219
    ab34:	01 e0       	ldi	r16, 0x01	; 1
    ab36:	06 93       	lac	Z, r16
    ab38:	fa 01       	movw	r30, r20
    ab3a:	ec 58       	subi	r30, 0x8C	; 140
    ab3c:	fb 4d       	sbci	r31, 0xDB	; 219
    ab3e:	95 85       	ldd	r25, Z+13	; 0x0d
    ab40:	92 ff       	sbrs	r25, 2
    ab42:	11 c0       	rjmp	.+34     	; 0xab66 <udd_ep_clear_halt+0x68>
    ab44:	fa 01       	movw	r30, r20
    ab46:	ec 58       	subi	r30, 0x8C	; 140
    ab48:	fb 4d       	sbci	r31, 0xDB	; 219
    ab4a:	95 85       	ldd	r25, Z+13	; 0x0d
    ab4c:	9b 7f       	andi	r25, 0xFB	; 251
    ab4e:	95 87       	std	Z+13, r25	; 0x0d
    ab50:	2c dc       	rcall	.-1960   	; 0xa3aa <udd_ep_get_job>
    ab52:	fc 01       	movw	r30, r24
    ab54:	80 81       	ld	r24, Z
    ab56:	80 ff       	sbrs	r24, 0
    ab58:	06 c0       	rjmp	.+12     	; 0xab66 <udd_ep_clear_halt+0x68>
    ab5a:	8e 7f       	andi	r24, 0xFE	; 254
    ab5c:	80 83       	st	Z, r24
    ab5e:	07 80       	ldd	r0, Z+7	; 0x07
    ab60:	f0 85       	ldd	r31, Z+8	; 0x08
    ab62:	e0 2d       	mov	r30, r0
    ab64:	19 95       	eicall
    ab66:	81 e0       	ldi	r24, 0x01	; 1
    ab68:	0f 91       	pop	r16
    ab6a:	08 95       	ret

0000ab6c <udd_ep_run>:
    ab6c:	6f 92       	push	r6
    ab6e:	7f 92       	push	r7
    ab70:	8f 92       	push	r8
    ab72:	9f 92       	push	r9
    ab74:	af 92       	push	r10
    ab76:	bf 92       	push	r11
    ab78:	cf 92       	push	r12
    ab7a:	df 92       	push	r13
    ab7c:	ef 92       	push	r14
    ab7e:	ff 92       	push	r15
    ab80:	0f 93       	push	r16
    ab82:	1f 93       	push	r17
    ab84:	cf 93       	push	r28
    ab86:	df 93       	push	r29
    ab88:	1f 92       	push	r1
    ab8a:	cd b7       	in	r28, 0x3d	; 61
    ab8c:	de b7       	in	r29, 0x3e	; 62
    ab8e:	78 2e       	mov	r7, r24
    ab90:	66 2e       	mov	r6, r22
    ab92:	4a 01       	movw	r8, r20
    ab94:	59 01       	movw	r10, r18
    ab96:	09 dc       	rcall	.-2030   	; 0xa3aa <udd_ep_get_job>
    ab98:	6c 01       	movw	r12, r24
    ab9a:	27 2d       	mov	r18, r7
    ab9c:	87 2d       	mov	r24, r7
    ab9e:	8f 70       	andi	r24, 0x0F	; 15
    aba0:	e8 2e       	mov	r14, r24
    aba2:	f1 2c       	mov	r15, r1
    aba4:	c7 01       	movw	r24, r14
    aba6:	88 0f       	add	r24, r24
    aba8:	99 1f       	adc	r25, r25
    abaa:	e7 2c       	mov	r14, r7
    abac:	07 2c       	mov	r0, r7
    abae:	00 0c       	add	r0, r0
    abb0:	ff 08       	sbc	r15, r15
    abb2:	ee 24       	eor	r14, r14
    abb4:	ff 0c       	add	r15, r15
    abb6:	ee 1c       	adc	r14, r14
    abb8:	ff 24       	eor	r15, r15
    abba:	e8 0e       	add	r14, r24
    abbc:	f9 1e       	adc	r15, r25
    abbe:	f7 01       	movw	r30, r14
    abc0:	ee 0f       	add	r30, r30
    abc2:	ff 1f       	adc	r31, r31
    abc4:	ee 0f       	add	r30, r30
    abc6:	ff 1f       	adc	r31, r31
    abc8:	ee 0f       	add	r30, r30
    abca:	ff 1f       	adc	r31, r31
    abcc:	ec 58       	subi	r30, 0x8C	; 140
    abce:	fb 4d       	sbci	r31, 0xDB	; 219
    abd0:	85 85       	ldd	r24, Z+13	; 0x0d
    abd2:	80 7c       	andi	r24, 0xC0	; 192
    abd4:	09 f4       	brne	.+2      	; 0xabd8 <udd_ep_run+0x6c>
    abd6:	82 c0       	rjmp	.+260    	; 0xacdc <udd_ep_run+0x170>
    abd8:	f7 01       	movw	r30, r14
    abda:	ee 0f       	add	r30, r30
    abdc:	ff 1f       	adc	r31, r31
    abde:	ee 0f       	add	r30, r30
    abe0:	ff 1f       	adc	r31, r31
    abe2:	ee 0f       	add	r30, r30
    abe4:	ff 1f       	adc	r31, r31
    abe6:	ec 58       	subi	r30, 0x8C	; 140
    abe8:	fb 4d       	sbci	r31, 0xDB	; 219
    abea:	85 85       	ldd	r24, Z+13	; 0x0d
    abec:	80 7c       	andi	r24, 0xC0	; 192
    abee:	80 3c       	cpi	r24, 0xC0	; 192
    abf0:	61 f0       	breq	.+24     	; 0xac0a <udd_ep_run+0x9e>
    abf2:	f7 01       	movw	r30, r14
    abf4:	ee 0f       	add	r30, r30
    abf6:	ff 1f       	adc	r31, r31
    abf8:	ee 0f       	add	r30, r30
    abfa:	ff 1f       	adc	r31, r31
    abfc:	ee 0f       	add	r30, r30
    abfe:	ff 1f       	adc	r31, r31
    ac00:	ec 58       	subi	r30, 0x8C	; 140
    ac02:	fb 4d       	sbci	r31, 0xDB	; 219
    ac04:	85 85       	ldd	r24, Z+13	; 0x0d
    ac06:	82 fd       	sbrc	r24, 2
    ac08:	6b c0       	rjmp	.+214    	; 0xace0 <udd_ep_run+0x174>
    ac0a:	8f b7       	in	r24, 0x3f	; 63
    ac0c:	89 83       	std	Y+1, r24	; 0x01
    ac0e:	f8 94       	cli
    ac10:	89 81       	ldd	r24, Y+1	; 0x01
    ac12:	f6 01       	movw	r30, r12
    ac14:	90 81       	ld	r25, Z
    ac16:	90 ff       	sbrs	r25, 0
    ac18:	03 c0       	rjmp	.+6      	; 0xac20 <udd_ep_run+0xb4>
    ac1a:	8f bf       	out	0x3f, r24	; 63
    ac1c:	80 e0       	ldi	r24, 0x00	; 0
    ac1e:	61 c0       	rjmp	.+194    	; 0xace2 <udd_ep_run+0x176>
    ac20:	f6 01       	movw	r30, r12
    ac22:	90 81       	ld	r25, Z
    ac24:	91 60       	ori	r25, 0x01	; 1
    ac26:	90 83       	st	Z, r25
    ac28:	8f bf       	out	0x3f, r24	; 63
    ac2a:	81 82       	std	Z+1, r8	; 0x01
    ac2c:	92 82       	std	Z+2, r9	; 0x02
    ac2e:	a3 82       	std	Z+3, r10	; 0x03
    ac30:	b4 82       	std	Z+4, r11	; 0x04
    ac32:	15 82       	std	Z+5, r1	; 0x05
    ac34:	16 82       	std	Z+6, r1	; 0x06
    ac36:	07 83       	std	Z+7, r16	; 0x07
    ac38:	10 87       	std	Z+8, r17	; 0x08
    ac3a:	61 10       	cpse	r6, r1
    ac3c:	06 c0       	rjmp	.+12     	; 0xac4a <udd_ep_run+0xde>
    ac3e:	91 e0       	ldi	r25, 0x01	; 1
    ac40:	a1 14       	cp	r10, r1
    ac42:	b1 04       	cpc	r11, r1
    ac44:	19 f0       	breq	.+6      	; 0xac4c <udd_ep_run+0xe0>
    ac46:	90 e0       	ldi	r25, 0x00	; 0
    ac48:	01 c0       	rjmp	.+2      	; 0xac4c <udd_ep_run+0xe0>
    ac4a:	91 e0       	ldi	r25, 0x01	; 1
    ac4c:	f6 01       	movw	r30, r12
    ac4e:	80 81       	ld	r24, Z
    ac50:	90 fb       	bst	r25, 0
    ac52:	81 f9       	bld	r24, 1
    ac54:	8b 7f       	andi	r24, 0xFB	; 251
    ac56:	80 83       	st	Z, r24
    ac58:	22 23       	and	r18, r18
    ac5a:	64 f4       	brge	.+24     	; 0xac74 <udd_ep_run+0x108>
    ac5c:	f7 01       	movw	r30, r14
    ac5e:	ee 0f       	add	r30, r30
    ac60:	ff 1f       	adc	r31, r31
    ac62:	ee 0f       	add	r30, r30
    ac64:	ff 1f       	adc	r31, r31
    ac66:	ee 0f       	add	r30, r30
    ac68:	ff 1f       	adc	r31, r31
    ac6a:	ec 58       	subi	r30, 0x8C	; 140
    ac6c:	fb 4d       	sbci	r31, 0xDB	; 219
    ac6e:	12 8a       	std	Z+18, r1	; 0x12
    ac70:	13 8a       	std	Z+19, r1	; 0x13
    ac72:	30 c0       	rjmp	.+96     	; 0xacd4 <udd_ep_run+0x168>
    ac74:	f7 01       	movw	r30, r14
    ac76:	ee 0f       	add	r30, r30
    ac78:	ff 1f       	adc	r31, r31
    ac7a:	ee 0f       	add	r30, r30
    ac7c:	ff 1f       	adc	r31, r31
    ac7e:	ee 0f       	add	r30, r30
    ac80:	ff 1f       	adc	r31, r31
    ac82:	ec 58       	subi	r30, 0x8C	; 140
    ac84:	fb 4d       	sbci	r31, 0xDB	; 219
    ac86:	85 85       	ldd	r24, Z+13	; 0x0d
    ac88:	80 7c       	andi	r24, 0xC0	; 192
    ac8a:	80 3c       	cpi	r24, 0xC0	; 192
    ac8c:	b1 f4       	brne	.+44     	; 0xacba <udd_ep_run+0x14e>
    ac8e:	c7 01       	movw	r24, r14
    ac90:	88 0f       	add	r24, r24
    ac92:	99 1f       	adc	r25, r25
    ac94:	88 0f       	add	r24, r24
    ac96:	99 1f       	adc	r25, r25
    ac98:	88 0f       	add	r24, r24
    ac9a:	99 1f       	adc	r25, r25
    ac9c:	80 58       	subi	r24, 0x80	; 128
    ac9e:	9b 4d       	sbci	r25, 0xDB	; 219
    aca0:	5b db       	rcall	.-2378   	; 0xa358 <udd_ep_get_size>
    aca2:	bc 01       	movw	r22, r24
    aca4:	c5 01       	movw	r24, r10
    aca6:	0e 94 8b 79 	call	0xf316	; 0xf316 <__udivmodhi4>
    acaa:	89 2b       	or	r24, r25
    acac:	31 f0       	breq	.+12     	; 0xacba <udd_ep_run+0x14e>
    acae:	f6 01       	movw	r30, r12
    acb0:	80 81       	ld	r24, Z
    acb2:	8e 7f       	andi	r24, 0xFE	; 254
    acb4:	80 83       	st	Z, r24
    acb6:	80 e0       	ldi	r24, 0x00	; 0
    acb8:	14 c0       	rjmp	.+40     	; 0xace2 <udd_ep_run+0x176>
    acba:	f7 01       	movw	r30, r14
    acbc:	ee 0f       	add	r30, r30
    acbe:	ff 1f       	adc	r31, r31
    acc0:	ee 0f       	add	r30, r30
    acc2:	ff 1f       	adc	r31, r31
    acc4:	ee 0f       	add	r30, r30
    acc6:	ff 1f       	adc	r31, r31
    acc8:	ec 58       	subi	r30, 0x8C	; 140
    acca:	fb 4d       	sbci	r31, 0xDB	; 219
    accc:	16 86       	std	Z+14, r1	; 0x0e
    acce:	17 86       	std	Z+15, r1	; 0x0f
    acd0:	12 8a       	std	Z+18, r1	; 0x12
    acd2:	13 8a       	std	Z+19, r1	; 0x13
    acd4:	87 2d       	mov	r24, r7
    acd6:	f6 db       	rcall	.-2068   	; 0xa4c4 <udd_ep_trans_complet>
    acd8:	81 e0       	ldi	r24, 0x01	; 1
    acda:	03 c0       	rjmp	.+6      	; 0xace2 <udd_ep_run+0x176>
    acdc:	80 e0       	ldi	r24, 0x00	; 0
    acde:	01 c0       	rjmp	.+2      	; 0xace2 <udd_ep_run+0x176>
    ace0:	80 e0       	ldi	r24, 0x00	; 0
    ace2:	0f 90       	pop	r0
    ace4:	df 91       	pop	r29
    ace6:	cf 91       	pop	r28
    ace8:	1f 91       	pop	r17
    acea:	0f 91       	pop	r16
    acec:	ff 90       	pop	r15
    acee:	ef 90       	pop	r14
    acf0:	df 90       	pop	r13
    acf2:	cf 90       	pop	r12
    acf4:	bf 90       	pop	r11
    acf6:	af 90       	pop	r10
    acf8:	9f 90       	pop	r9
    acfa:	8f 90       	pop	r8
    acfc:	7f 90       	pop	r7
    acfe:	6f 90       	pop	r6
    ad00:	08 95       	ret

0000ad02 <udd_ep_abort>:
    ad02:	ff 92       	push	r15
    ad04:	0f 93       	push	r16
    ad06:	1f 93       	push	r17
    ad08:	cf 93       	push	r28
    ad0a:	df 93       	push	r29
    ad0c:	18 2f       	mov	r17, r24
    ad0e:	c8 2f       	mov	r28, r24
    ad10:	cf 70       	andi	r28, 0x0F	; 15
    ad12:	d0 e0       	ldi	r29, 0x00	; 0
    ad14:	ce 01       	movw	r24, r28
    ad16:	88 0f       	add	r24, r24
    ad18:	99 1f       	adc	r25, r25
    ad1a:	c1 2f       	mov	r28, r17
    ad1c:	01 2e       	mov	r0, r17
    ad1e:	00 0c       	add	r0, r0
    ad20:	dd 0b       	sbc	r29, r29
    ad22:	cc 27       	eor	r28, r28
    ad24:	dd 0f       	add	r29, r29
    ad26:	cc 1f       	adc	r28, r28
    ad28:	dd 27       	eor	r29, r29
    ad2a:	c8 0f       	add	r28, r24
    ad2c:	d9 1f       	adc	r29, r25
    ad2e:	81 2f       	mov	r24, r17
    ad30:	3c db       	rcall	.-2440   	; 0xa3aa <udd_ep_get_job>
    ad32:	dc 01       	movw	r26, r24
    ad34:	fe 01       	movw	r30, r28
    ad36:	ee 0f       	add	r30, r30
    ad38:	ff 1f       	adc	r31, r31
    ad3a:	ee 0f       	add	r30, r30
    ad3c:	ff 1f       	adc	r31, r31
    ad3e:	ee 0f       	add	r30, r30
    ad40:	ff 1f       	adc	r31, r31
    ad42:	e0 58       	subi	r30, 0x80	; 128
    ad44:	fb 4d       	sbci	r31, 0xDB	; 219
    ad46:	02 e0       	ldi	r16, 0x02	; 2
    ad48:	05 93       	las	Z, r16
    ad4a:	8c 91       	ld	r24, X
    ad4c:	80 ff       	sbrs	r24, 0
    ad4e:	22 c0       	rjmp	.+68     	; 0xad94 <udd_ep_abort+0x92>
    ad50:	8e 7f       	andi	r24, 0xFE	; 254
    ad52:	8c 93       	st	X, r24
    ad54:	17 96       	adiw	r26, 0x07	; 7
    ad56:	ed 91       	ld	r30, X+
    ad58:	fc 91       	ld	r31, X
    ad5a:	18 97       	sbiw	r26, 0x08	; 8
    ad5c:	30 97       	sbiw	r30, 0x00	; 0
    ad5e:	d1 f0       	breq	.+52     	; 0xad94 <udd_ep_abort+0x92>
    ad60:	11 23       	and	r17, r17
    ad62:	5c f4       	brge	.+22     	; 0xad7a <udd_ep_abort+0x78>
    ad64:	cc 0f       	add	r28, r28
    ad66:	dd 1f       	adc	r29, r29
    ad68:	cc 0f       	add	r28, r28
    ad6a:	dd 1f       	adc	r29, r29
    ad6c:	cc 0f       	add	r28, r28
    ad6e:	dd 1f       	adc	r29, r29
    ad70:	cc 58       	subi	r28, 0x8C	; 140
    ad72:	db 4d       	sbci	r29, 0xDB	; 219
    ad74:	6a 89       	ldd	r22, Y+18	; 0x12
    ad76:	7b 89       	ldd	r23, Y+19	; 0x13
    ad78:	0a c0       	rjmp	.+20     	; 0xad8e <udd_ep_abort+0x8c>
    ad7a:	cc 0f       	add	r28, r28
    ad7c:	dd 1f       	adc	r29, r29
    ad7e:	cc 0f       	add	r28, r28
    ad80:	dd 1f       	adc	r29, r29
    ad82:	cc 0f       	add	r28, r28
    ad84:	dd 1f       	adc	r29, r29
    ad86:	cc 58       	subi	r28, 0x8C	; 140
    ad88:	db 4d       	sbci	r29, 0xDB	; 219
    ad8a:	6e 85       	ldd	r22, Y+14	; 0x0e
    ad8c:	7f 85       	ldd	r23, Y+15	; 0x0f
    ad8e:	41 2f       	mov	r20, r17
    ad90:	81 e0       	ldi	r24, 0x01	; 1
    ad92:	19 95       	eicall
    ad94:	df 91       	pop	r29
    ad96:	cf 91       	pop	r28
    ad98:	1f 91       	pop	r17
    ad9a:	0f 91       	pop	r16
    ad9c:	ff 90       	pop	r15
    ad9e:	08 95       	ret

0000ada0 <udd_ep_free>:
    ada0:	cf 93       	push	r28
    ada2:	c8 2f       	mov	r28, r24
    ada4:	ae df       	rcall	.-164    	; 0xad02 <udd_ep_abort>
    ada6:	ec 2f       	mov	r30, r28
    ada8:	ef 70       	andi	r30, 0x0F	; 15
    adaa:	f0 e0       	ldi	r31, 0x00	; 0
    adac:	ee 0f       	add	r30, r30
    adae:	ff 1f       	adc	r31, r31
    adb0:	8c 2f       	mov	r24, r28
    adb2:	cc 0f       	add	r28, r28
    adb4:	99 0b       	sbc	r25, r25
    adb6:	88 27       	eor	r24, r24
    adb8:	99 0f       	add	r25, r25
    adba:	88 1f       	adc	r24, r24
    adbc:	99 27       	eor	r25, r25
    adbe:	e8 0f       	add	r30, r24
    adc0:	f9 1f       	adc	r31, r25
    adc2:	ee 0f       	add	r30, r30
    adc4:	ff 1f       	adc	r31, r31
    adc6:	ee 0f       	add	r30, r30
    adc8:	ff 1f       	adc	r31, r31
    adca:	ee 0f       	add	r30, r30
    adcc:	ff 1f       	adc	r31, r31
    adce:	ec 58       	subi	r30, 0x8C	; 140
    add0:	fb 4d       	sbci	r31, 0xDB	; 219
    add2:	15 86       	std	Z+13, r1	; 0x0d
    add4:	cf 91       	pop	r28
    add6:	08 95       	ret

0000add8 <udd_ep_set_halt>:
    add8:	e8 2f       	mov	r30, r24
    adda:	ef 70       	andi	r30, 0x0F	; 15
    addc:	f0 e0       	ldi	r31, 0x00	; 0
    adde:	ee 0f       	add	r30, r30
    ade0:	ff 1f       	adc	r31, r31
    ade2:	28 2f       	mov	r18, r24
    ade4:	08 2e       	mov	r0, r24
    ade6:	00 0c       	add	r0, r0
    ade8:	33 0b       	sbc	r19, r19
    adea:	22 27       	eor	r18, r18
    adec:	33 0f       	add	r19, r19
    adee:	22 1f       	adc	r18, r18
    adf0:	33 27       	eor	r19, r19
    adf2:	e2 0f       	add	r30, r18
    adf4:	f3 1f       	adc	r31, r19
    adf6:	ee 0f       	add	r30, r30
    adf8:	ff 1f       	adc	r31, r31
    adfa:	ee 0f       	add	r30, r30
    adfc:	ff 1f       	adc	r31, r31
    adfe:	ee 0f       	add	r30, r30
    ae00:	ff 1f       	adc	r31, r31
    ae02:	ec 58       	subi	r30, 0x8C	; 140
    ae04:	fb 4d       	sbci	r31, 0xDB	; 219
    ae06:	95 85       	ldd	r25, Z+13	; 0x0d
    ae08:	94 60       	ori	r25, 0x04	; 4
    ae0a:	95 87       	std	Z+13, r25	; 0x0d
    ae0c:	7a df       	rcall	.-268    	; 0xad02 <udd_ep_abort>
    ae0e:	81 e0       	ldi	r24, 0x01	; 1
    ae10:	08 95       	ret

0000ae12 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    ae12:	1f 92       	push	r1
    ae14:	0f 92       	push	r0
    ae16:	0f b6       	in	r0, 0x3f	; 63
    ae18:	0f 92       	push	r0
    ae1a:	11 24       	eor	r1, r1
    ae1c:	0b b6       	in	r0, 0x3b	; 59
    ae1e:	0f 92       	push	r0
    ae20:	0f 93       	push	r16
    ae22:	2f 93       	push	r18
    ae24:	3f 93       	push	r19
    ae26:	4f 93       	push	r20
    ae28:	5f 93       	push	r21
    ae2a:	6f 93       	push	r22
    ae2c:	7f 93       	push	r23
    ae2e:	8f 93       	push	r24
    ae30:	9f 93       	push	r25
    ae32:	af 93       	push	r26
    ae34:	bf 93       	push	r27
    ae36:	ef 93       	push	r30
    ae38:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    ae3a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    ae3e:	88 23       	and	r24, r24
    ae40:	34 f4       	brge	.+12     	; 0xae4e <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    ae42:	80 e8       	ldi	r24, 0x80	; 128
    ae44:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    ae48:	0e 94 a7 6e 	call	0xdd4e	; 0xdd4e <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    ae4c:	8a c0       	rjmp	.+276    	; 0xaf62 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    ae4e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    ae52:	82 ff       	sbrs	r24, 2
    ae54:	20 c0       	rjmp	.+64     	; 0xae96 <__vector_125+0x84>
		udd_ack_underflow_event();
    ae56:	84 e0       	ldi	r24, 0x04	; 4
    ae58:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    ae5c:	80 91 88 24 	lds	r24, 0x2488	; 0x802488 <udd_sram+0x14>
    ae60:	86 ff       	sbrs	r24, 6
    ae62:	7f c0       	rjmp	.+254    	; 0xaf62 <__vector_125+0x150>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    ae64:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    ae68:	81 fd       	sbrc	r24, 1
    ae6a:	7b c0       	rjmp	.+246    	; 0xaf62 <__vector_125+0x150>
    ae6c:	b9 da       	rcall	.-2702   	; 0xa3e0 <udd_ctrl_interrupt_tc_setup>
    ae6e:	81 11       	cpse	r24, r1
    ae70:	78 c0       	rjmp	.+240    	; 0xaf62 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    ae72:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_ep_control_state>
    ae76:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    ae78:	11 f4       	brne	.+4      	; 0xae7e <__vector_125+0x6c>
    ae7a:	ec d9       	rcall	.-3112   	; 0xa254 <udd_ctrl_send_zlp_in>
    ae7c:	72 c0       	rjmp	.+228    	; 0xaf62 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    ae7e:	84 30       	cpi	r24, 0x04	; 4
    ae80:	09 f0       	breq	.+2      	; 0xae84 <__vector_125+0x72>
    ae82:	6f c0       	rjmp	.+222    	; 0xaf62 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    ae84:	e9 e8       	ldi	r30, 0x89	; 137
    ae86:	f4 e2       	ldi	r31, 0x24	; 36
    ae88:	04 e0       	ldi	r16, 0x04	; 4
    ae8a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    ae8c:	e1 e8       	ldi	r30, 0x81	; 129
    ae8e:	f4 e2       	ldi	r31, 0x24	; 36
    ae90:	04 e0       	ldi	r16, 0x04	; 4
    ae92:	05 93       	las	Z, r16
    ae94:	66 c0       	rjmp	.+204    	; 0xaf62 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    ae96:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    ae9a:	81 ff       	sbrs	r24, 1
    ae9c:	5d c0       	rjmp	.+186    	; 0xaf58 <__vector_125+0x146>
		udd_ack_overflow_event();
    ae9e:	82 e0       	ldi	r24, 0x02	; 2
    aea0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    aea4:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_sram+0xc>
    aea8:	86 ff       	sbrs	r24, 6
    aeaa:	5b c0       	rjmp	.+182    	; 0xaf62 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    aeac:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    aeb0:	81 fd       	sbrc	r24, 1
    aeb2:	57 c0       	rjmp	.+174    	; 0xaf62 <__vector_125+0x150>
    aeb4:	95 da       	rcall	.-2774   	; 0xa3e0 <udd_ctrl_interrupt_tc_setup>
    aeb6:	81 11       	cpse	r24, r1
    aeb8:	54 c0       	rjmp	.+168    	; 0xaf62 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    aeba:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_ep_control_state>
    aebe:	82 30       	cpi	r24, 0x02	; 2
    aec0:	41 f4       	brne	.+16     	; 0xaed2 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    aec2:	84 e0       	ldi	r24, 0x04	; 4
    aec4:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    aec8:	e0 e8       	ldi	r30, 0x80	; 128
    aeca:	f4 e2       	ldi	r31, 0x24	; 36
    aecc:	02 e0       	ldi	r16, 0x02	; 2
    aece:	06 93       	lac	Z, r16
    aed0:	48 c0       	rjmp	.+144    	; 0xaf62 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    aed2:	83 30       	cpi	r24, 0x03	; 3
    aed4:	09 f0       	breq	.+2      	; 0xaed8 <__vector_125+0xc6>
    aed6:	45 c0       	rjmp	.+138    	; 0xaf62 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    aed8:	e9 e8       	ldi	r30, 0x89	; 137
    aeda:	f4 e2       	ldi	r31, 0x24	; 36
    aedc:	04 e0       	ldi	r16, 0x04	; 4
    aede:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    aee0:	e1 e8       	ldi	r30, 0x81	; 129
    aee2:	f4 e2       	ldi	r31, 0x24	; 36
    aee4:	04 e0       	ldi	r16, 0x04	; 4
    aee6:	05 93       	las	Z, r16
    aee8:	3c c0       	rjmp	.+120    	; 0xaf62 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    aeea:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    aeec:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    aef0:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    aef2:	07 df       	rcall	.-498    	; 0xad02 <udd_ep_abort>
    aef4:	81 e8       	ldi	r24, 0x81	; 129
    aef6:	05 df       	rcall	.-502    	; 0xad02 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    aef8:	82 e0       	ldi	r24, 0x02	; 2
    aefa:	03 df       	rcall	.-506    	; 0xad02 <udd_ep_abort>
    aefc:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    aefe:	01 df       	rcall	.-510    	; 0xad02 <udd_ep_abort>
    af00:	0e 94 79 6e 	call	0xdcf2	; 0xdcf2 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    af04:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    af08:	e4 e7       	ldi	r30, 0x74	; 116
    af0a:	f4 e2       	ldi	r31, 0x24	; 36
	udd_endpoint_clear_status(ep_ctrl);
    af0c:	15 86       	std	Z+13, r1	; 0x0d
    af0e:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    af10:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    af12:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    af14:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    af16:	15 8a       	std	Z+21, r1	; 0x15
    af18:	94 8b       	std	Z+20, r25	; 0x14
    af1a:	85 8b       	std	Z+21, r24	; 0x15
    af1c:	8c e2       	ldi	r24, 0x2C	; 44
		// Reset endpoint control management
		udd_ctrl_init();
    af1e:	94 e2       	ldi	r25, 0x24	; 36
    af20:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    af22:	91 8b       	std	Z+17, r25	; 0x11
    af24:	64 d9       	rcall	.-3384   	; 0xa1ee <udd_ctrl_init>
    af26:	1d c0       	rjmp	.+58     	; 0xaf62 <__vector_125+0x150>
		udd_ack_suspend_event();
    af28:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    af2c:	86 ff       	sbrs	r24, 6
		udd_sleep_mode(false); // Enter in SUSPEND mode
    af2e:	08 c0       	rjmp	.+16     	; 0xaf40 <__vector_125+0x12e>
    af30:	80 e4       	ldi	r24, 0x40	; 64
    af32:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    af36:	80 e0       	ldi	r24, 0x00	; 0
    af38:	22 d9       	rcall	.-3516   	; 0xa17e <udd_sleep_mode>
    af3a:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <usb_callback_suspend_action>
		udd_ack_resume_event();
    af3e:	11 c0       	rjmp	.+34     	; 0xaf62 <__vector_125+0x150>
    af40:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    af44:	85 ff       	sbrs	r24, 5
    af46:	0d c0       	rjmp	.+26     	; 0xaf62 <__vector_125+0x150>
    af48:	80 e2       	ldi	r24, 0x20	; 32
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    af4a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    af4e:	81 e0       	ldi	r24, 0x01	; 1
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    af50:	16 d9       	rcall	.-3540   	; 0xa17e <udd_sleep_mode>
    af52:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <usb_callback_resume_action>
    af56:	05 c0       	rjmp	.+10     	; 0xaf62 <__vector_125+0x150>
    af58:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    af5c:	84 fd       	sbrc	r24, 4
    af5e:	c5 cf       	rjmp	.-118    	; 0xaeea <__vector_125+0xd8>
    af60:	e3 cf       	rjmp	.-58     	; 0xaf28 <__vector_125+0x116>
    af62:	ff 91       	pop	r31
    af64:	ef 91       	pop	r30
    af66:	bf 91       	pop	r27
    af68:	af 91       	pop	r26
    af6a:	9f 91       	pop	r25
    af6c:	8f 91       	pop	r24
    af6e:	7f 91       	pop	r23
    af70:	6f 91       	pop	r22
    af72:	5f 91       	pop	r21
    af74:	4f 91       	pop	r20
    af76:	3f 91       	pop	r19
    af78:	2f 91       	pop	r18
    af7a:	0f 91       	pop	r16
    af7c:	0f 90       	pop	r0
    af7e:	0b be       	out	0x3b, r0	; 59
    af80:	0f 90       	pop	r0
    af82:	0f be       	out	0x3f, r0	; 63
    af84:	0f 90       	pop	r0
    af86:	1f 90       	pop	r1
    af88:	18 95       	reti

0000af8a <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    af8a:	1f 92       	push	r1
    af8c:	0f 92       	push	r0
    af8e:	0f b6       	in	r0, 0x3f	; 63
    af90:	0f 92       	push	r0
    af92:	11 24       	eor	r1, r1
    af94:	0b b6       	in	r0, 0x3b	; 59
    af96:	0f 92       	push	r0
    af98:	0f 93       	push	r16
    af9a:	1f 93       	push	r17
    af9c:	2f 93       	push	r18
    af9e:	3f 93       	push	r19
    afa0:	4f 93       	push	r20
    afa2:	5f 93       	push	r21
    afa4:	6f 93       	push	r22
    afa6:	7f 93       	push	r23
    afa8:	8f 93       	push	r24
    afaa:	9f 93       	push	r25
    afac:	af 93       	push	r26
    afae:	bf 93       	push	r27
    afb0:	cf 93       	push	r28
    afb2:	df 93       	push	r29
    afb4:	ef 93       	push	r30
    afb6:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    afb8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    afbc:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    afbe:	03 c0       	rjmp	.+6      	; 0xafc6 <__vector_126+0x3c>
    afc0:	0f da       	rcall	.-3042   	; 0xa3e0 <udd_ctrl_interrupt_tc_setup>
    afc2:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    afc4:	c4 c0       	rjmp	.+392    	; 0xb14e <__vector_126+0x1c4>
    afc6:	82 e0       	ldi	r24, 0x02	; 2
    afc8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    afcc:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    afd0:	81 95       	neg	r24
    afd2:	88 0f       	add	r24, r24
    afd4:	e0 e8       	ldi	r30, 0x80	; 128
    afd6:	f4 e2       	ldi	r31, 0x24	; 36
    afd8:	e8 1b       	sub	r30, r24
    afda:	f1 09       	sbc	r31, r1
    afdc:	20 81       	ld	r18, Z
    afde:	31 81       	ldd	r19, Z+1	; 0x01
    afe0:	20 58       	subi	r18, 0x80	; 128
    afe2:	34 42       	sbci	r19, 0x24	; 36
    afe4:	36 95       	lsr	r19
    afe6:	27 95       	ror	r18
    afe8:	36 95       	lsr	r19
    afea:	27 95       	ror	r18
    afec:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    afee:	27 95       	ror	r18
    aff0:	82 2f       	mov	r24, r18
    aff2:	86 95       	lsr	r24
    aff4:	20 fd       	sbrc	r18, 0
    aff6:	02 c0       	rjmp	.+4      	; 0xaffc <__vector_126+0x72>
    aff8:	90 e0       	ldi	r25, 0x00	; 0
    affa:	01 c0       	rjmp	.+2      	; 0xaffe <__vector_126+0x74>
    affc:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    affe:	89 0f       	add	r24, r25
    b000:	e8 2f       	mov	r30, r24
    b002:	ef 70       	andi	r30, 0x0F	; 15
    b004:	f0 e0       	ldi	r31, 0x00	; 0
    b006:	ee 0f       	add	r30, r30
    b008:	ff 1f       	adc	r31, r31
    b00a:	28 2f       	mov	r18, r24
    b00c:	08 2e       	mov	r0, r24
    b00e:	00 0c       	add	r0, r0
    b010:	33 0b       	sbc	r19, r19
    b012:	22 27       	eor	r18, r18
    b014:	33 0f       	add	r19, r19
    b016:	22 1f       	adc	r18, r18
    b018:	33 27       	eor	r19, r19
    b01a:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    b01c:	f3 1f       	adc	r31, r19
    b01e:	df 01       	movw	r26, r30
    b020:	aa 0f       	add	r26, r26
    b022:	bb 1f       	adc	r27, r27
    b024:	aa 0f       	add	r26, r26
    b026:	bb 1f       	adc	r27, r27
    b028:	aa 0f       	add	r26, r26
    b02a:	bb 1f       	adc	r27, r27
    b02c:	ac 58       	subi	r26, 0x8C	; 140
    b02e:	bb 4d       	sbci	r27, 0xDB	; 219
    b030:	1c 96       	adiw	r26, 0x0c	; 12
    b032:	9c 91       	ld	r25, X
    b034:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    b036:	8b c0       	rjmp	.+278    	; 0xb14e <__vector_126+0x1c4>
    b038:	ee 0f       	add	r30, r30
    b03a:	ff 1f       	adc	r31, r31
    b03c:	ee 0f       	add	r30, r30
    b03e:	ff 1f       	adc	r31, r31
    b040:	ee 0f       	add	r30, r30
    b042:	ff 1f       	adc	r31, r31
    b044:	e0 58       	subi	r30, 0x80	; 128
    b046:	fb 4d       	sbci	r31, 0xDB	; 219
    b048:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    b04a:	06 93       	lac	Z, r16
    b04c:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    b04e:	7a c0       	rjmp	.+244    	; 0xb144 <__vector_126+0x1ba>
    b050:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    b054:	84 30       	cpi	r24, 0x04	; 4
    b056:	19 f4       	brne	.+6      	; 0xb05e <__vector_126+0xd4>
    b058:	0b d9       	rcall	.-3562   	; 0xa270 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    b05a:	c9 d8       	rcall	.-3694   	; 0xa1ee <udd_ctrl_init>
    b05c:	78 c0       	rjmp	.+240    	; 0xb14e <__vector_126+0x1c4>
    b05e:	00 91 82 24 	lds	r16, 0x2482	; 0x802482 <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    b062:	10 91 83 24 	lds	r17, 0x2483	; 0x802483 <udd_sram+0xf>
    b066:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <udd_g_ctrlreq+0xa>
    b06a:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <udd_g_ctrlreq+0xb>
    b06e:	c0 91 6c 24 	lds	r28, 0x246C	; 0x80246c <udd_ctrl_payload_nb_trans>
    b072:	d0 91 6d 24 	lds	r29, 0x246D	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    b076:	98 01       	movw	r18, r16
    b078:	2c 0f       	add	r18, r28
    b07a:	3d 1f       	adc	r19, r29
    b07c:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    b07e:	93 07       	cpc	r25, r19
    b080:	18 f4       	brcc	.+6      	; 0xb088 <__vector_126+0xfe>
    b082:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    b084:	0c 1b       	sub	r16, r28
    b086:	1d 0b       	sbc	r17, r29
    b088:	80 91 cd 28 	lds	r24, 0x28CD	; 0x8028cd <udd_g_ctrlreq+0x8>
    b08c:	90 91 ce 28 	lds	r25, 0x28CE	; 0x8028ce <udd_g_ctrlreq+0x9>
    b090:	a8 01       	movw	r20, r16
    b092:	6c e2       	ldi	r22, 0x2C	; 44
    b094:	74 e2       	ldi	r23, 0x24	; 36
    b096:	8c 0f       	add	r24, r28
    b098:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    b09a:	0e 94 f7 7c 	call	0xf9ee	; 0xf9ee <memcpy>
    b09e:	c0 0f       	add	r28, r16
    b0a0:	d1 1f       	adc	r29, r17
    b0a2:	c0 93 6c 24 	sts	0x246C, r28	; 0x80246c <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    b0a6:	d0 93 6d 24 	sts	0x246D, r29	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    b0aa:	00 34       	cpi	r16, 0x40	; 64
    b0ac:	11 05       	cpc	r17, r1
    b0ae:	69 f4       	brne	.+26     	; 0xb0ca <__vector_126+0x140>
    b0b0:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    b0b4:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
    b0b8:	8c 0f       	add	r24, r28
    b0ba:	9d 1f       	adc	r25, r29
    b0bc:	20 91 cb 28 	lds	r18, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    b0c0:	30 91 cc 28 	lds	r19, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    b0c4:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    b0c6:	93 07       	cpc	r25, r19
    b0c8:	80 f0       	brcs	.+32     	; 0xb0ea <__vector_126+0x160>
    b0ca:	e5 ec       	ldi	r30, 0xC5	; 197
    b0cc:	f8 e2       	ldi	r31, 0x28	; 40
		if (NULL != udd_g_ctrlreq.over_under_run) {
    b0ce:	c2 87       	std	Z+10, r28	; 0x0a
    b0d0:	d3 87       	std	Z+11, r29	; 0x0b
    b0d2:	06 84       	ldd	r0, Z+14	; 0x0e
    b0d4:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    b0d6:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    b0d8:	30 97       	sbiw	r30, 0x00	; 0
    b0da:	29 f0       	breq	.+10     	; 0xb0e6 <__vector_126+0x15c>
    b0dc:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    b0de:	81 11       	cpse	r24, r1
    b0e0:	02 c0       	rjmp	.+4      	; 0xb0e6 <__vector_126+0x15c>
    b0e2:	aa d8       	rcall	.-3756   	; 0xa238 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    b0e4:	34 c0       	rjmp	.+104    	; 0xb14e <__vector_126+0x1c4>
    b0e6:	b6 d8       	rcall	.-3732   	; 0xa254 <udd_ctrl_send_zlp_in>
    b0e8:	32 c0       	rjmp	.+100    	; 0xb14e <__vector_126+0x1c4>
    b0ea:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <udd_g_ctrlreq+0xa>
    b0ee:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    b0f2:	c8 17       	cp	r28, r24
    b0f4:	d9 07       	cpc	r29, r25
    b0f6:	f9 f4       	brne	.+62     	; 0xb136 <__vector_126+0x1ac>
    b0f8:	e0 91 d3 28 	lds	r30, 0x28D3	; 0x8028d3 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    b0fc:	f0 91 d4 28 	lds	r31, 0x28D4	; 0x8028d4 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    b100:	30 97       	sbiw	r30, 0x00	; 0
    b102:	11 f4       	brne	.+4      	; 0xb108 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    b104:	99 d8       	rcall	.-3790   	; 0xa238 <udd_ctrl_stall_data>
    b106:	23 c0       	rjmp	.+70     	; 0xb14e <__vector_126+0x1c4>
    b108:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    b10a:	81 11       	cpse	r24, r1
    b10c:	02 c0       	rjmp	.+4      	; 0xb112 <__vector_126+0x188>
    b10e:	94 d8       	rcall	.-3800   	; 0xa238 <udd_ctrl_stall_data>
    b110:	1e c0       	rjmp	.+60     	; 0xb14e <__vector_126+0x1c4>
    b112:	20 91 6e 24 	lds	r18, 0x246E	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    b116:	30 91 6f 24 	lds	r19, 0x246F	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
    b11a:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_ctrl_payload_nb_trans>
    b11e:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    b122:	82 0f       	add	r24, r18
    b124:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    b126:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    b12a:	90 93 6f 24 	sts	0x246F, r25	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    b12e:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udd_ctrl_payload_nb_trans>
    b132:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
	udd_control_out_ack_tc();
    b136:	e0 e8       	ldi	r30, 0x80	; 128
    b138:	f4 e2       	ldi	r31, 0x24	; 36
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    b13a:	02 e0       	ldi	r16, 0x02	; 2
    b13c:	06 93       	lac	Z, r16
		udd_ctrl_in_sent();
    b13e:	00 e2       	ldi	r16, 0x20	; 32
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    b140:	06 93       	lac	Z, r16
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    b142:	05 c0       	rjmp	.+10     	; 0xb14e <__vector_126+0x1c4>
    b144:	80 38       	cpi	r24, 0x80	; 128
	}
#endif

udd_interrupt_tc_end:
	return;
}
    b146:	11 f4       	brne	.+4      	; 0xb14c <__vector_126+0x1c2>
    b148:	9b d8       	rcall	.-3786   	; 0xa280 <udd_ctrl_in_sent>
    b14a:	01 c0       	rjmp	.+2      	; 0xb14e <__vector_126+0x1c4>
    b14c:	bb d9       	rcall	.-3210   	; 0xa4c4 <udd_ep_trans_complet>
    b14e:	ff 91       	pop	r31
    b150:	ef 91       	pop	r30
    b152:	df 91       	pop	r29
    b154:	cf 91       	pop	r28
    b156:	bf 91       	pop	r27
    b158:	af 91       	pop	r26
    b15a:	9f 91       	pop	r25
    b15c:	8f 91       	pop	r24
    b15e:	7f 91       	pop	r23
    b160:	6f 91       	pop	r22
    b162:	5f 91       	pop	r21
    b164:	4f 91       	pop	r20
    b166:	3f 91       	pop	r19
    b168:	2f 91       	pop	r18
    b16a:	1f 91       	pop	r17
    b16c:	0f 91       	pop	r16
    b16e:	0f 90       	pop	r0
    b170:	0b be       	out	0x3b, r0	; 59
    b172:	0f 90       	pop	r0
    b174:	0f be       	out	0x3f, r0	; 63
    b176:	0f 90       	pop	r0
    b178:	1f 90       	pop	r1
    b17a:	18 95       	reti

0000b17c <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    b17c:	cf 92       	push	r12
    b17e:	df 92       	push	r13
    b180:	ef 92       	push	r14
    b182:	ff 92       	push	r15
    b184:	cf 93       	push	r28
    b186:	df 93       	push	r29
    b188:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    b18a:	6b 01       	movw	r12, r22
    b18c:	e1 2c       	mov	r14, r1
    b18e:	f1 2c       	mov	r15, r1
    b190:	60 e8       	ldi	r22, 0x80	; 128
    b192:	73 ec       	ldi	r23, 0xC3	; 195
    b194:	89 ec       	ldi	r24, 0xC9	; 201
    b196:	91 e0       	ldi	r25, 0x01	; 1
    b198:	a7 01       	movw	r20, r14
    b19a:	96 01       	movw	r18, r12
    b19c:	0e 94 b2 79 	call	0xf364	; 0xf364 <__udivmodsi4>
    b1a0:	ca 01       	movw	r24, r20
    b1a2:	b9 01       	movw	r22, r18
    b1a4:	2f ef       	ldi	r18, 0xFF	; 255
    b1a6:	3f ef       	ldi	r19, 0xFF	; 255
    b1a8:	40 e0       	ldi	r20, 0x00	; 0
    b1aa:	50 e0       	ldi	r21, 0x00	; 0
    b1ac:	0e 94 b2 79 	call	0xf364	; 0xf364 <__udivmodsi4>
	if (smallest_div < 1) {
    b1b0:	21 15       	cp	r18, r1
    b1b2:	31 05       	cpc	r19, r1
    b1b4:	29 f4       	brne	.+10     	; 0xb1c0 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    b1b6:	81 e0       	ldi	r24, 0x01	; 1
    b1b8:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    b1ba:	21 e0       	ldi	r18, 0x01	; 1
    b1bc:	30 e0       	ldi	r19, 0x00	; 0
    b1be:	2d c0       	rjmp	.+90     	; 0xb21a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    b1c0:	22 30       	cpi	r18, 0x02	; 2
    b1c2:	31 05       	cpc	r19, r1
    b1c4:	28 f4       	brcc	.+10     	; 0xb1d0 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    b1c6:	82 e0       	ldi	r24, 0x02	; 2
    b1c8:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    b1ca:	22 e0       	ldi	r18, 0x02	; 2
    b1cc:	30 e0       	ldi	r19, 0x00	; 0
    b1ce:	25 c0       	rjmp	.+74     	; 0xb21a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    b1d0:	24 30       	cpi	r18, 0x04	; 4
    b1d2:	31 05       	cpc	r19, r1
    b1d4:	28 f4       	brcc	.+10     	; 0xb1e0 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    b1d6:	83 e0       	ldi	r24, 0x03	; 3
    b1d8:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    b1da:	24 e0       	ldi	r18, 0x04	; 4
    b1dc:	30 e0       	ldi	r19, 0x00	; 0
    b1de:	1d c0       	rjmp	.+58     	; 0xb21a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    b1e0:	28 30       	cpi	r18, 0x08	; 8
    b1e2:	31 05       	cpc	r19, r1
    b1e4:	28 f4       	brcc	.+10     	; 0xb1f0 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    b1e6:	84 e0       	ldi	r24, 0x04	; 4
    b1e8:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    b1ea:	28 e0       	ldi	r18, 0x08	; 8
    b1ec:	30 e0       	ldi	r19, 0x00	; 0
    b1ee:	15 c0       	rjmp	.+42     	; 0xb21a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    b1f0:	20 34       	cpi	r18, 0x40	; 64
    b1f2:	31 05       	cpc	r19, r1
    b1f4:	28 f4       	brcc	.+10     	; 0xb200 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    b1f6:	85 e0       	ldi	r24, 0x05	; 5
    b1f8:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    b1fa:	20 e4       	ldi	r18, 0x40	; 64
    b1fc:	30 e0       	ldi	r19, 0x00	; 0
    b1fe:	0d c0       	rjmp	.+26     	; 0xb21a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    b200:	2f 3f       	cpi	r18, 0xFF	; 255
    b202:	31 05       	cpc	r19, r1
    b204:	09 f0       	breq	.+2      	; 0xb208 <pwm_set_frequency+0x8c>
    b206:	28 f4       	brcc	.+10     	; 0xb212 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    b208:	86 e0       	ldi	r24, 0x06	; 6
    b20a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    b20c:	20 e0       	ldi	r18, 0x00	; 0
    b20e:	31 e0       	ldi	r19, 0x01	; 1
    b210:	04 c0       	rjmp	.+8      	; 0xb21a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    b212:	87 e0       	ldi	r24, 0x07	; 7
    b214:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    b216:	20 e0       	ldi	r18, 0x00	; 0
    b218:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    b21a:	40 e0       	ldi	r20, 0x00	; 0
    b21c:	50 e0       	ldi	r21, 0x00	; 0
    b21e:	60 e8       	ldi	r22, 0x80	; 128
    b220:	73 ec       	ldi	r23, 0xC3	; 195
    b222:	89 ec       	ldi	r24, 0xC9	; 201
    b224:	91 e0       	ldi	r25, 0x01	; 1
    b226:	0e 94 b2 79 	call	0xf364	; 0xf364 <__udivmodsi4>
    b22a:	ca 01       	movw	r24, r20
    b22c:	b9 01       	movw	r22, r18
    b22e:	a7 01       	movw	r20, r14
    b230:	96 01       	movw	r18, r12
    b232:	0e 94 b2 79 	call	0xf364	; 0xf364 <__udivmodsi4>
    b236:	2d 83       	std	Y+5, r18	; 0x05
    b238:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    b23a:	24 36       	cpi	r18, 0x64	; 100
    b23c:	31 05       	cpc	r19, r1
    b23e:	18 f4       	brcc	.+6      	; 0xb246 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    b240:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    b242:	1d 82       	std	Y+5, r1	; 0x05
    b244:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    b246:	df 91       	pop	r29
    b248:	cf 91       	pop	r28
    b24a:	ff 90       	pop	r15
    b24c:	ef 90       	pop	r14
    b24e:	df 90       	pop	r13
    b250:	cf 90       	pop	r12
    b252:	08 95       	ret

0000b254 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    b254:	0f 93       	push	r16
    b256:	1f 93       	push	r17
    b258:	cf 93       	push	r28
    b25a:	df 93       	push	r29
    b25c:	ec 01       	movw	r28, r24
    b25e:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    b260:	86 2f       	mov	r24, r22
    b262:	90 e0       	ldi	r25, 0x00	; 0
    b264:	87 30       	cpi	r24, 0x07	; 7
    b266:	91 05       	cpc	r25, r1
    b268:	08 f0       	brcs	.+2      	; 0xb26c <pwm_init+0x18>
    b26a:	8b c0       	rjmp	.+278    	; 0xb382 <pwm_init+0x12e>
    b26c:	fc 01       	movw	r30, r24
    b26e:	88 27       	eor	r24, r24
    b270:	eb 5f       	subi	r30, 0xFB	; 251
    b272:	fe 4f       	sbci	r31, 0xFE	; 254
    b274:	8f 4f       	sbci	r24, 0xFF	; 255
    b276:	0c 94 f0 79 	jmp	0xf3e0	; 0xf3e0 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    b27a:	80 e0       	ldi	r24, 0x00	; 0
    b27c:	98 e0       	ldi	r25, 0x08	; 8
    b27e:	88 83       	st	Y, r24
    b280:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    b282:	e0 e4       	ldi	r30, 0x40	; 64
    b284:	f6 e0       	ldi	r31, 0x06	; 6
    b286:	30 81       	ld	r19, Z
    b288:	81 e0       	ldi	r24, 0x01	; 1
    b28a:	90 e0       	ldi	r25, 0x00	; 0
    b28c:	2f ef       	ldi	r18, 0xFF	; 255
    b28e:	24 0f       	add	r18, r20
    b290:	02 c0       	rjmp	.+4      	; 0xb296 <pwm_init+0x42>
    b292:	88 0f       	add	r24, r24
    b294:	99 1f       	adc	r25, r25
    b296:	2a 95       	dec	r18
    b298:	e2 f7       	brpl	.-8      	; 0xb292 <pwm_init+0x3e>
    b29a:	83 2b       	or	r24, r19
    b29c:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    b29e:	71 c0       	rjmp	.+226    	; 0xb382 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    b2a0:	80 e4       	ldi	r24, 0x40	; 64
    b2a2:	98 e0       	ldi	r25, 0x08	; 8
    b2a4:	88 83       	st	Y, r24
    b2a6:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    b2a8:	e0 e4       	ldi	r30, 0x40	; 64
    b2aa:	f6 e0       	ldi	r31, 0x06	; 6
    b2ac:	30 81       	ld	r19, Z
    b2ae:	81 e0       	ldi	r24, 0x01	; 1
    b2b0:	90 e0       	ldi	r25, 0x00	; 0
    b2b2:	23 e0       	ldi	r18, 0x03	; 3
    b2b4:	24 0f       	add	r18, r20
    b2b6:	02 c0       	rjmp	.+4      	; 0xb2bc <pwm_init+0x68>
    b2b8:	88 0f       	add	r24, r24
    b2ba:	99 1f       	adc	r25, r25
    b2bc:	2a 95       	dec	r18
    b2be:	e2 f7       	brpl	.-8      	; 0xb2b8 <pwm_init+0x64>
    b2c0:	83 2b       	or	r24, r19
    b2c2:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    b2c4:	5e c0       	rjmp	.+188    	; 0xb382 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    b2c6:	80 e0       	ldi	r24, 0x00	; 0
    b2c8:	99 e0       	ldi	r25, 0x09	; 9
    b2ca:	88 83       	st	Y, r24
    b2cc:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    b2ce:	e0 e6       	ldi	r30, 0x60	; 96
    b2d0:	f6 e0       	ldi	r31, 0x06	; 6
    b2d2:	30 81       	ld	r19, Z
    b2d4:	81 e0       	ldi	r24, 0x01	; 1
    b2d6:	90 e0       	ldi	r25, 0x00	; 0
    b2d8:	2f ef       	ldi	r18, 0xFF	; 255
    b2da:	24 0f       	add	r18, r20
    b2dc:	02 c0       	rjmp	.+4      	; 0xb2e2 <pwm_init+0x8e>
    b2de:	88 0f       	add	r24, r24
    b2e0:	99 1f       	adc	r25, r25
    b2e2:	2a 95       	dec	r18
    b2e4:	e2 f7       	brpl	.-8      	; 0xb2de <pwm_init+0x8a>
    b2e6:	83 2b       	or	r24, r19
    b2e8:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    b2ea:	4b c0       	rjmp	.+150    	; 0xb382 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    b2ec:	80 e4       	ldi	r24, 0x40	; 64
    b2ee:	99 e0       	ldi	r25, 0x09	; 9
    b2f0:	88 83       	st	Y, r24
    b2f2:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    b2f4:	e0 e6       	ldi	r30, 0x60	; 96
    b2f6:	f6 e0       	ldi	r31, 0x06	; 6
    b2f8:	30 81       	ld	r19, Z
    b2fa:	81 e0       	ldi	r24, 0x01	; 1
    b2fc:	90 e0       	ldi	r25, 0x00	; 0
    b2fe:	23 e0       	ldi	r18, 0x03	; 3
    b300:	24 0f       	add	r18, r20
    b302:	02 c0       	rjmp	.+4      	; 0xb308 <pwm_init+0xb4>
    b304:	88 0f       	add	r24, r24
    b306:	99 1f       	adc	r25, r25
    b308:	2a 95       	dec	r18
    b30a:	e2 f7       	brpl	.-8      	; 0xb304 <pwm_init+0xb0>
    b30c:	83 2b       	or	r24, r19
    b30e:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    b310:	38 c0       	rjmp	.+112    	; 0xb382 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    b312:	80 e0       	ldi	r24, 0x00	; 0
    b314:	9a e0       	ldi	r25, 0x0A	; 10
    b316:	88 83       	st	Y, r24
    b318:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    b31a:	e0 e8       	ldi	r30, 0x80	; 128
    b31c:	f6 e0       	ldi	r31, 0x06	; 6
    b31e:	30 81       	ld	r19, Z
    b320:	81 e0       	ldi	r24, 0x01	; 1
    b322:	90 e0       	ldi	r25, 0x00	; 0
    b324:	2f ef       	ldi	r18, 0xFF	; 255
    b326:	24 0f       	add	r18, r20
    b328:	02 c0       	rjmp	.+4      	; 0xb32e <pwm_init+0xda>
    b32a:	88 0f       	add	r24, r24
    b32c:	99 1f       	adc	r25, r25
    b32e:	2a 95       	dec	r18
    b330:	e2 f7       	brpl	.-8      	; 0xb32a <pwm_init+0xd6>
    b332:	83 2b       	or	r24, r19
    b334:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    b336:	25 c0       	rjmp	.+74     	; 0xb382 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    b338:	80 e4       	ldi	r24, 0x40	; 64
    b33a:	9a e0       	ldi	r25, 0x0A	; 10
    b33c:	88 83       	st	Y, r24
    b33e:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    b340:	e0 e8       	ldi	r30, 0x80	; 128
    b342:	f6 e0       	ldi	r31, 0x06	; 6
    b344:	30 81       	ld	r19, Z
    b346:	81 e0       	ldi	r24, 0x01	; 1
    b348:	90 e0       	ldi	r25, 0x00	; 0
    b34a:	23 e0       	ldi	r18, 0x03	; 3
    b34c:	24 0f       	add	r18, r20
    b34e:	02 c0       	rjmp	.+4      	; 0xb354 <pwm_init+0x100>
    b350:	88 0f       	add	r24, r24
    b352:	99 1f       	adc	r25, r25
    b354:	2a 95       	dec	r18
    b356:	e2 f7       	brpl	.-8      	; 0xb350 <pwm_init+0xfc>
    b358:	83 2b       	or	r24, r19
    b35a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    b35c:	12 c0       	rjmp	.+36     	; 0xb382 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    b35e:	80 e0       	ldi	r24, 0x00	; 0
    b360:	9b e0       	ldi	r25, 0x0B	; 11
    b362:	88 83       	st	Y, r24
    b364:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    b366:	e0 ea       	ldi	r30, 0xA0	; 160
    b368:	f6 e0       	ldi	r31, 0x06	; 6
    b36a:	30 81       	ld	r19, Z
    b36c:	81 e0       	ldi	r24, 0x01	; 1
    b36e:	90 e0       	ldi	r25, 0x00	; 0
    b370:	2f ef       	ldi	r18, 0xFF	; 255
    b372:	24 0f       	add	r18, r20
    b374:	02 c0       	rjmp	.+4      	; 0xb37a <pwm_init+0x126>
    b376:	88 0f       	add	r24, r24
    b378:	99 1f       	adc	r25, r25
    b37a:	2a 95       	dec	r18
    b37c:	e2 f7       	brpl	.-8      	; 0xb376 <pwm_init+0x122>
    b37e:	83 2b       	or	r24, r19
    b380:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    b382:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    b384:	42 30       	cpi	r20, 0x02	; 2
    b386:	61 f0       	breq	.+24     	; 0xb3a0 <pwm_init+0x14c>
    b388:	18 f4       	brcc	.+6      	; 0xb390 <pwm_init+0x13c>
    b38a:	41 30       	cpi	r20, 0x01	; 1
    b38c:	31 f0       	breq	.+12     	; 0xb39a <pwm_init+0x146>
    b38e:	10 c0       	rjmp	.+32     	; 0xb3b0 <pwm_init+0x15c>
    b390:	43 30       	cpi	r20, 0x03	; 3
    b392:	49 f0       	breq	.+18     	; 0xb3a6 <pwm_init+0x152>
    b394:	44 30       	cpi	r20, 0x04	; 4
    b396:	51 f0       	breq	.+20     	; 0xb3ac <pwm_init+0x158>
    b398:	0b c0       	rjmp	.+22     	; 0xb3b0 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    b39a:	80 e1       	ldi	r24, 0x10	; 16
    b39c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    b39e:	08 c0       	rjmp	.+16     	; 0xb3b0 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    b3a0:	80 e2       	ldi	r24, 0x20	; 32
    b3a2:	8b 83       	std	Y+3, r24	; 0x03
		break;
    b3a4:	05 c0       	rjmp	.+10     	; 0xb3b0 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    b3a6:	80 e4       	ldi	r24, 0x40	; 64
    b3a8:	8b 83       	std	Y+3, r24	; 0x03
		break;
    b3aa:	02 c0       	rjmp	.+4      	; 0xb3b0 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    b3ac:	80 e8       	ldi	r24, 0x80	; 128
    b3ae:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    b3b0:	88 81       	ld	r24, Y
    b3b2:	99 81       	ldd	r25, Y+1	; 0x01
    b3b4:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    b3b8:	e8 81       	ld	r30, Y
    b3ba:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    b3bc:	81 81       	ldd	r24, Z+1	; 0x01
    b3be:	88 7f       	andi	r24, 0xF8	; 248
    b3c0:	83 60       	ori	r24, 0x03	; 3
    b3c2:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    b3c4:	1d 82       	std	Y+5, r1	; 0x05
    b3c6:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    b3c8:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    b3ca:	e8 81       	ld	r30, Y
    b3cc:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    b3ce:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    b3d0:	80 7f       	andi	r24, 0xF0	; 240
    b3d2:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    b3d4:	b8 01       	movw	r22, r16
    b3d6:	ce 01       	movw	r24, r28
    b3d8:	d1 de       	rcall	.-606    	; 0xb17c <pwm_set_frequency>
}
    b3da:	df 91       	pop	r29
    b3dc:	cf 91       	pop	r28
    b3de:	1f 91       	pop	r17
    b3e0:	0f 91       	pop	r16
    b3e2:	08 95       	ret

0000b3e4 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    b3e4:	cf 93       	push	r28
    b3e6:	df 93       	push	r29
    b3e8:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    b3ea:	2d 81       	ldd	r18, Y+5	; 0x05
    b3ec:	3e 81       	ldd	r19, Y+6	; 0x06
    b3ee:	a6 2f       	mov	r26, r22
    b3f0:	b0 e0       	ldi	r27, 0x00	; 0
    b3f2:	0e 94 fe 79 	call	0xf3fc	; 0xf3fc <__umulhisi3>
    b3f6:	24 e6       	ldi	r18, 0x64	; 100
    b3f8:	30 e0       	ldi	r19, 0x00	; 0
    b3fa:	40 e0       	ldi	r20, 0x00	; 0
    b3fc:	50 e0       	ldi	r21, 0x00	; 0
    b3fe:	0e 94 b2 79 	call	0xf364	; 0xf364 <__udivmodsi4>
    b402:	8a 81       	ldd	r24, Y+2	; 0x02
    b404:	e8 81       	ld	r30, Y
    b406:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    b408:	e6 fd       	sbrc	r30, 6
    b40a:	17 c0       	rjmp	.+46     	; 0xb43a <pwm_start+0x56>
		switch (channel_index) {
    b40c:	82 30       	cpi	r24, 0x02	; 2
    b40e:	61 f0       	breq	.+24     	; 0xb428 <pwm_start+0x44>
    b410:	18 f4       	brcc	.+6      	; 0xb418 <pwm_start+0x34>
    b412:	81 30       	cpi	r24, 0x01	; 1
    b414:	31 f0       	breq	.+12     	; 0xb422 <pwm_start+0x3e>
    b416:	1b c0       	rjmp	.+54     	; 0xb44e <pwm_start+0x6a>
    b418:	83 30       	cpi	r24, 0x03	; 3
    b41a:	49 f0       	breq	.+18     	; 0xb42e <pwm_start+0x4a>
    b41c:	84 30       	cpi	r24, 0x04	; 4
    b41e:	51 f0       	breq	.+20     	; 0xb434 <pwm_start+0x50>
    b420:	16 c0       	rjmp	.+44     	; 0xb44e <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    b422:	20 af       	std	Z+56, r18	; 0x38
    b424:	31 af       	std	Z+57, r19	; 0x39
    b426:	13 c0       	rjmp	.+38     	; 0xb44e <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    b428:	22 af       	std	Z+58, r18	; 0x3a
    b42a:	33 af       	std	Z+59, r19	; 0x3b
    b42c:	10 c0       	rjmp	.+32     	; 0xb44e <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    b42e:	24 af       	std	Z+60, r18	; 0x3c
    b430:	35 af       	std	Z+61, r19	; 0x3d
    b432:	0d c0       	rjmp	.+26     	; 0xb44e <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    b434:	26 af       	std	Z+62, r18	; 0x3e
    b436:	37 af       	std	Z+63, r19	; 0x3f
    b438:	0a c0       	rjmp	.+20     	; 0xb44e <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    b43a:	81 30       	cpi	r24, 0x01	; 1
    b43c:	19 f0       	breq	.+6      	; 0xb444 <pwm_start+0x60>
    b43e:	82 30       	cpi	r24, 0x02	; 2
    b440:	21 f0       	breq	.+8      	; 0xb44a <pwm_start+0x66>
    b442:	05 c0       	rjmp	.+10     	; 0xb44e <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    b444:	20 af       	std	Z+56, r18	; 0x38
    b446:	31 af       	std	Z+57, r19	; 0x39
    b448:	02 c0       	rjmp	.+4      	; 0xb44e <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    b44a:	22 af       	std	Z+58, r18	; 0x3a
    b44c:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    b44e:	8d 81       	ldd	r24, Y+5	; 0x05
    b450:	9e 81       	ldd	r25, Y+6	; 0x06
    b452:	e8 81       	ld	r30, Y
    b454:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    b456:	86 a3       	std	Z+38, r24	; 0x26
    b458:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    b45a:	8b 81       	ldd	r24, Y+3	; 0x03
    b45c:	e8 81       	ld	r30, Y
    b45e:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    b460:	e6 fd       	sbrc	r30, 6
    b462:	04 c0       	rjmp	.+8      	; 0xb46c <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    b464:	91 81       	ldd	r25, Z+1	; 0x01
    b466:	89 2b       	or	r24, r25
    b468:	81 83       	std	Z+1, r24	; 0x01
    b46a:	04 c0       	rjmp	.+8      	; 0xb474 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    b46c:	91 81       	ldd	r25, Z+1	; 0x01
    b46e:	80 73       	andi	r24, 0x30	; 48
    b470:	89 2b       	or	r24, r25
    b472:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    b474:	e8 81       	ld	r30, Y
    b476:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    b478:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    b47a:	80 7f       	andi	r24, 0xF0	; 240
    b47c:	9c 81       	ldd	r25, Y+4	; 0x04
    b47e:	89 2b       	or	r24, r25
    b480:	80 83       	st	Z, r24
}
    b482:	df 91       	pop	r29
    b484:	cf 91       	pop	r28
    b486:	08 95       	ret

0000b488 <yield_ms_cb>:
void halt(void)
{
	/* MAIN Loop Shutdown */
	/* atomic */
	{
		g_workmode = WORKMODE_END;
    b488:	10 92 80 26 	sts	0x2680, r1	; 0x802680 <g_sched_yield>
    b48c:	08 95       	ret

0000b48e <isr_adc_a>:
    b48e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    b492:	4e 5b       	subi	r20, 0xBE	; 190
    b494:	51 09       	sbc	r21, r1
    b496:	60 ff       	sbrs	r22, 0
    b498:	d3 c0       	rjmp	.+422    	; 0xb640 <isr_adc_a+0x1b2>
    b49a:	82 95       	swap	r24
    b49c:	8f 70       	andi	r24, 0x0F	; 15
    b49e:	81 30       	cpi	r24, 0x01	; 1
    b4a0:	31 f0       	breq	.+12     	; 0xb4ae <isr_adc_a+0x20>
    b4a2:	08 f4       	brcc	.+2      	; 0xb4a6 <isr_adc_a+0x18>
    b4a4:	8a c0       	rjmp	.+276    	; 0xb5ba <isr_adc_a+0x12c>
    b4a6:	82 30       	cpi	r24, 0x02	; 2
    b4a8:	09 f4       	brne	.+2      	; 0xb4ac <isr_adc_a+0x1e>
    b4aa:	44 c0       	rjmp	.+136    	; 0xb534 <isr_adc_a+0xa6>
    b4ac:	08 95       	ret
    b4ae:	80 91 d0 26 	lds	r24, 0x26D0	; 0x8026d0 <g_adc_vctcxo_sum>
    b4b2:	90 91 d1 26 	lds	r25, 0x26D1	; 0x8026d1 <g_adc_vctcxo_sum+0x1>
    b4b6:	a0 91 d2 26 	lds	r26, 0x26D2	; 0x8026d2 <g_adc_vctcxo_sum+0x2>
    b4ba:	b0 91 d3 26 	lds	r27, 0x26D3	; 0x8026d3 <g_adc_vctcxo_sum+0x3>
    b4be:	05 2e       	mov	r0, r21
    b4c0:	00 0c       	add	r0, r0
    b4c2:	66 0b       	sbc	r22, r22
    b4c4:	77 0b       	sbc	r23, r23
    b4c6:	48 0f       	add	r20, r24
    b4c8:	59 1f       	adc	r21, r25
    b4ca:	6a 1f       	adc	r22, r26
    b4cc:	7b 1f       	adc	r23, r27
    b4ce:	40 93 d0 26 	sts	0x26D0, r20	; 0x8026d0 <g_adc_vctcxo_sum>
    b4d2:	50 93 d1 26 	sts	0x26D1, r21	; 0x8026d1 <g_adc_vctcxo_sum+0x1>
    b4d6:	60 93 d2 26 	sts	0x26D2, r22	; 0x8026d2 <g_adc_vctcxo_sum+0x2>
    b4da:	70 93 d3 26 	sts	0x26D3, r23	; 0x8026d3 <g_adc_vctcxo_sum+0x3>
    b4de:	80 91 ce 26 	lds	r24, 0x26CE	; 0x8026ce <g_adc_vctcxo_cnt>
    b4e2:	90 91 cf 26 	lds	r25, 0x26CF	; 0x8026cf <g_adc_vctcxo_cnt+0x1>
    b4e6:	01 96       	adiw	r24, 0x01	; 1
    b4e8:	80 93 ce 26 	sts	0x26CE, r24	; 0x8026ce <g_adc_vctcxo_cnt>
    b4ec:	90 93 cf 26 	sts	0x26CF, r25	; 0x8026cf <g_adc_vctcxo_cnt+0x1>
    b4f0:	8f 3f       	cpi	r24, 0xFF	; 255
    b4f2:	91 05       	cpc	r25, r1
    b4f4:	09 f0       	breq	.+2      	; 0xb4f8 <isr_adc_a+0x6a>
    b4f6:	08 f4       	brcc	.+2      	; 0xb4fa <isr_adc_a+0x6c>
    b4f8:	70 c1       	rjmp	.+736    	; 0xb7da <isr_adc_a+0x34c>
    b4fa:	80 91 d0 26 	lds	r24, 0x26D0	; 0x8026d0 <g_adc_vctcxo_sum>
    b4fe:	90 91 d1 26 	lds	r25, 0x26D1	; 0x8026d1 <g_adc_vctcxo_sum+0x1>
    b502:	a0 91 d2 26 	lds	r26, 0x26D2	; 0x8026d2 <g_adc_vctcxo_sum+0x2>
    b506:	b0 91 d3 26 	lds	r27, 0x26D3	; 0x8026d3 <g_adc_vctcxo_sum+0x3>
    b50a:	80 93 d4 26 	sts	0x26D4, r24	; 0x8026d4 <g_adc_vctcxo_cur>
    b50e:	90 93 d5 26 	sts	0x26D5, r25	; 0x8026d5 <g_adc_vctcxo_cur+0x1>
    b512:	a0 93 d6 26 	sts	0x26D6, r26	; 0x8026d6 <g_adc_vctcxo_cur+0x2>
    b516:	b0 93 d7 26 	sts	0x26D7, r27	; 0x8026d7 <g_adc_vctcxo_cur+0x3>
    b51a:	10 92 ce 26 	sts	0x26CE, r1	; 0x8026ce <g_adc_vctcxo_cnt>
    b51e:	10 92 cf 26 	sts	0x26CF, r1	; 0x8026cf <g_adc_vctcxo_cnt+0x1>
    b522:	10 92 d0 26 	sts	0x26D0, r1	; 0x8026d0 <g_adc_vctcxo_sum>
    b526:	10 92 d1 26 	sts	0x26D1, r1	; 0x8026d1 <g_adc_vctcxo_sum+0x1>
    b52a:	10 92 d2 26 	sts	0x26D2, r1	; 0x8026d2 <g_adc_vctcxo_sum+0x2>
    b52e:	10 92 d3 26 	sts	0x26D3, r1	; 0x8026d3 <g_adc_vctcxo_sum+0x3>
    b532:	08 95       	ret
    b534:	80 91 c6 26 	lds	r24, 0x26C6	; 0x8026c6 <g_adc_5v0_sum>
    b538:	90 91 c7 26 	lds	r25, 0x26C7	; 0x8026c7 <g_adc_5v0_sum+0x1>
    b53c:	a0 91 c8 26 	lds	r26, 0x26C8	; 0x8026c8 <g_adc_5v0_sum+0x2>
    b540:	b0 91 c9 26 	lds	r27, 0x26C9	; 0x8026c9 <g_adc_5v0_sum+0x3>
    b544:	05 2e       	mov	r0, r21
    b546:	00 0c       	add	r0, r0
    b548:	66 0b       	sbc	r22, r22
    b54a:	77 0b       	sbc	r23, r23
    b54c:	48 0f       	add	r20, r24
    b54e:	59 1f       	adc	r21, r25
    b550:	6a 1f       	adc	r22, r26
    b552:	7b 1f       	adc	r23, r27
    b554:	40 93 c6 26 	sts	0x26C6, r20	; 0x8026c6 <g_adc_5v0_sum>
    b558:	50 93 c7 26 	sts	0x26C7, r21	; 0x8026c7 <g_adc_5v0_sum+0x1>
    b55c:	60 93 c8 26 	sts	0x26C8, r22	; 0x8026c8 <g_adc_5v0_sum+0x2>
    b560:	70 93 c9 26 	sts	0x26C9, r23	; 0x8026c9 <g_adc_5v0_sum+0x3>
    b564:	80 91 c4 26 	lds	r24, 0x26C4	; 0x8026c4 <g_adc_5v0_cnt>
    b568:	90 91 c5 26 	lds	r25, 0x26C5	; 0x8026c5 <g_adc_5v0_cnt+0x1>
    b56c:	01 96       	adiw	r24, 0x01	; 1
    b56e:	80 93 c4 26 	sts	0x26C4, r24	; 0x8026c4 <g_adc_5v0_cnt>
    b572:	90 93 c5 26 	sts	0x26C5, r25	; 0x8026c5 <g_adc_5v0_cnt+0x1>
    b576:	8f 3f       	cpi	r24, 0xFF	; 255
    b578:	91 05       	cpc	r25, r1
    b57a:	09 f0       	breq	.+2      	; 0xb57e <isr_adc_a+0xf0>
    b57c:	08 f4       	brcc	.+2      	; 0xb580 <isr_adc_a+0xf2>
    b57e:	2d c1       	rjmp	.+602    	; 0xb7da <isr_adc_a+0x34c>
    b580:	80 91 c6 26 	lds	r24, 0x26C6	; 0x8026c6 <g_adc_5v0_sum>
    b584:	90 91 c7 26 	lds	r25, 0x26C7	; 0x8026c7 <g_adc_5v0_sum+0x1>
    b588:	a0 91 c8 26 	lds	r26, 0x26C8	; 0x8026c8 <g_adc_5v0_sum+0x2>
    b58c:	b0 91 c9 26 	lds	r27, 0x26C9	; 0x8026c9 <g_adc_5v0_sum+0x3>
    b590:	80 93 ca 26 	sts	0x26CA, r24	; 0x8026ca <g_adc_5v0_cur>
    b594:	90 93 cb 26 	sts	0x26CB, r25	; 0x8026cb <g_adc_5v0_cur+0x1>
    b598:	a0 93 cc 26 	sts	0x26CC, r26	; 0x8026cc <g_adc_5v0_cur+0x2>
    b59c:	b0 93 cd 26 	sts	0x26CD, r27	; 0x8026cd <g_adc_5v0_cur+0x3>
    b5a0:	10 92 c4 26 	sts	0x26C4, r1	; 0x8026c4 <g_adc_5v0_cnt>
    b5a4:	10 92 c5 26 	sts	0x26C5, r1	; 0x8026c5 <g_adc_5v0_cnt+0x1>
    b5a8:	10 92 c6 26 	sts	0x26C6, r1	; 0x8026c6 <g_adc_5v0_sum>
    b5ac:	10 92 c7 26 	sts	0x26C7, r1	; 0x8026c7 <g_adc_5v0_sum+0x1>
    b5b0:	10 92 c8 26 	sts	0x26C8, r1	; 0x8026c8 <g_adc_5v0_sum+0x2>
    b5b4:	10 92 c9 26 	sts	0x26C9, r1	; 0x8026c9 <g_adc_5v0_sum+0x3>
    b5b8:	08 95       	ret
    b5ba:	80 91 bc 26 	lds	r24, 0x26BC	; 0x8026bc <g_adc_vbat_sum>
    b5be:	90 91 bd 26 	lds	r25, 0x26BD	; 0x8026bd <g_adc_vbat_sum+0x1>
    b5c2:	a0 91 be 26 	lds	r26, 0x26BE	; 0x8026be <g_adc_vbat_sum+0x2>
    b5c6:	b0 91 bf 26 	lds	r27, 0x26BF	; 0x8026bf <g_adc_vbat_sum+0x3>
    b5ca:	05 2e       	mov	r0, r21
    b5cc:	00 0c       	add	r0, r0
    b5ce:	66 0b       	sbc	r22, r22
    b5d0:	77 0b       	sbc	r23, r23
    b5d2:	48 0f       	add	r20, r24
    b5d4:	59 1f       	adc	r21, r25
    b5d6:	6a 1f       	adc	r22, r26
    b5d8:	7b 1f       	adc	r23, r27
    b5da:	40 93 bc 26 	sts	0x26BC, r20	; 0x8026bc <g_adc_vbat_sum>
    b5de:	50 93 bd 26 	sts	0x26BD, r21	; 0x8026bd <g_adc_vbat_sum+0x1>
    b5e2:	60 93 be 26 	sts	0x26BE, r22	; 0x8026be <g_adc_vbat_sum+0x2>
    b5e6:	70 93 bf 26 	sts	0x26BF, r23	; 0x8026bf <g_adc_vbat_sum+0x3>
    b5ea:	80 91 ba 26 	lds	r24, 0x26BA	; 0x8026ba <g_adc_vbat_cnt>
    b5ee:	90 91 bb 26 	lds	r25, 0x26BB	; 0x8026bb <g_adc_vbat_cnt+0x1>
    b5f2:	01 96       	adiw	r24, 0x01	; 1
    b5f4:	80 93 ba 26 	sts	0x26BA, r24	; 0x8026ba <g_adc_vbat_cnt>
    b5f8:	90 93 bb 26 	sts	0x26BB, r25	; 0x8026bb <g_adc_vbat_cnt+0x1>
    b5fc:	8f 3f       	cpi	r24, 0xFF	; 255
    b5fe:	91 05       	cpc	r25, r1
    b600:	09 f0       	breq	.+2      	; 0xb604 <isr_adc_a+0x176>
    b602:	08 f4       	brcc	.+2      	; 0xb606 <isr_adc_a+0x178>
    b604:	ea c0       	rjmp	.+468    	; 0xb7da <isr_adc_a+0x34c>
    b606:	80 91 bc 26 	lds	r24, 0x26BC	; 0x8026bc <g_adc_vbat_sum>
    b60a:	90 91 bd 26 	lds	r25, 0x26BD	; 0x8026bd <g_adc_vbat_sum+0x1>
    b60e:	a0 91 be 26 	lds	r26, 0x26BE	; 0x8026be <g_adc_vbat_sum+0x2>
    b612:	b0 91 bf 26 	lds	r27, 0x26BF	; 0x8026bf <g_adc_vbat_sum+0x3>
    b616:	80 93 c0 26 	sts	0x26C0, r24	; 0x8026c0 <g_adc_vbat_cur>
    b61a:	90 93 c1 26 	sts	0x26C1, r25	; 0x8026c1 <g_adc_vbat_cur+0x1>
    b61e:	a0 93 c2 26 	sts	0x26C2, r26	; 0x8026c2 <g_adc_vbat_cur+0x2>
    b622:	b0 93 c3 26 	sts	0x26C3, r27	; 0x8026c3 <g_adc_vbat_cur+0x3>
    b626:	10 92 ba 26 	sts	0x26BA, r1	; 0x8026ba <g_adc_vbat_cnt>
    b62a:	10 92 bb 26 	sts	0x26BB, r1	; 0x8026bb <g_adc_vbat_cnt+0x1>
    b62e:	10 92 bc 26 	sts	0x26BC, r1	; 0x8026bc <g_adc_vbat_sum>
    b632:	10 92 bd 26 	sts	0x26BD, r1	; 0x8026bd <g_adc_vbat_sum+0x1>
    b636:	10 92 be 26 	sts	0x26BE, r1	; 0x8026be <g_adc_vbat_sum+0x2>
    b63a:	10 92 bf 26 	sts	0x26BF, r1	; 0x8026bf <g_adc_vbat_sum+0x3>
    b63e:	08 95       	ret
    b640:	61 ff       	sbrs	r22, 1
    b642:	43 c0       	rjmp	.+134    	; 0xb6ca <isr_adc_a+0x23c>
    b644:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <g_adc_io_adc4_sum>
    b648:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <g_adc_io_adc4_sum+0x1>
    b64c:	a0 91 b4 26 	lds	r26, 0x26B4	; 0x8026b4 <g_adc_io_adc4_sum+0x2>
    b650:	b0 91 b5 26 	lds	r27, 0x26B5	; 0x8026b5 <g_adc_io_adc4_sum+0x3>
    b654:	05 2e       	mov	r0, r21
    b656:	00 0c       	add	r0, r0
    b658:	66 0b       	sbc	r22, r22
    b65a:	77 0b       	sbc	r23, r23
    b65c:	48 0f       	add	r20, r24
    b65e:	59 1f       	adc	r21, r25
    b660:	6a 1f       	adc	r22, r26
    b662:	7b 1f       	adc	r23, r27
    b664:	40 93 b2 26 	sts	0x26B2, r20	; 0x8026b2 <g_adc_io_adc4_sum>
    b668:	50 93 b3 26 	sts	0x26B3, r21	; 0x8026b3 <g_adc_io_adc4_sum+0x1>
    b66c:	60 93 b4 26 	sts	0x26B4, r22	; 0x8026b4 <g_adc_io_adc4_sum+0x2>
    b670:	70 93 b5 26 	sts	0x26B5, r23	; 0x8026b5 <g_adc_io_adc4_sum+0x3>
    b674:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <g_adc_io_adc4_cnt>
    b678:	90 91 b1 26 	lds	r25, 0x26B1	; 0x8026b1 <g_adc_io_adc4_cnt+0x1>
    b67c:	01 96       	adiw	r24, 0x01	; 1
    b67e:	80 93 b0 26 	sts	0x26B0, r24	; 0x8026b0 <g_adc_io_adc4_cnt>
    b682:	90 93 b1 26 	sts	0x26B1, r25	; 0x8026b1 <g_adc_io_adc4_cnt+0x1>
    b686:	8f 3f       	cpi	r24, 0xFF	; 255
    b688:	91 05       	cpc	r25, r1
    b68a:	09 f0       	breq	.+2      	; 0xb68e <isr_adc_a+0x200>
    b68c:	08 f4       	brcc	.+2      	; 0xb690 <isr_adc_a+0x202>
    b68e:	a5 c0       	rjmp	.+330    	; 0xb7da <isr_adc_a+0x34c>
    b690:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <g_adc_io_adc4_sum>
    b694:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <g_adc_io_adc4_sum+0x1>
    b698:	a0 91 b4 26 	lds	r26, 0x26B4	; 0x8026b4 <g_adc_io_adc4_sum+0x2>
    b69c:	b0 91 b5 26 	lds	r27, 0x26B5	; 0x8026b5 <g_adc_io_adc4_sum+0x3>
    b6a0:	80 93 b6 26 	sts	0x26B6, r24	; 0x8026b6 <g_adc_io_adc4_cur>
    b6a4:	90 93 b7 26 	sts	0x26B7, r25	; 0x8026b7 <g_adc_io_adc4_cur+0x1>
    b6a8:	a0 93 b8 26 	sts	0x26B8, r26	; 0x8026b8 <g_adc_io_adc4_cur+0x2>
    b6ac:	b0 93 b9 26 	sts	0x26B9, r27	; 0x8026b9 <g_adc_io_adc4_cur+0x3>
    b6b0:	10 92 b0 26 	sts	0x26B0, r1	; 0x8026b0 <g_adc_io_adc4_cnt>
    b6b4:	10 92 b1 26 	sts	0x26B1, r1	; 0x8026b1 <g_adc_io_adc4_cnt+0x1>
    b6b8:	10 92 b2 26 	sts	0x26B2, r1	; 0x8026b2 <g_adc_io_adc4_sum>
    b6bc:	10 92 b3 26 	sts	0x26B3, r1	; 0x8026b3 <g_adc_io_adc4_sum+0x1>
    b6c0:	10 92 b4 26 	sts	0x26B4, r1	; 0x8026b4 <g_adc_io_adc4_sum+0x2>
    b6c4:	10 92 b5 26 	sts	0x26B5, r1	; 0x8026b5 <g_adc_io_adc4_sum+0x3>
    b6c8:	08 95       	ret
    b6ca:	62 ff       	sbrs	r22, 2
    b6cc:	43 c0       	rjmp	.+134    	; 0xb754 <isr_adc_a+0x2c6>
    b6ce:	80 91 a8 26 	lds	r24, 0x26A8	; 0x8026a8 <g_adc_io_adc5_sum>
    b6d2:	90 91 a9 26 	lds	r25, 0x26A9	; 0x8026a9 <g_adc_io_adc5_sum+0x1>
    b6d6:	a0 91 aa 26 	lds	r26, 0x26AA	; 0x8026aa <g_adc_io_adc5_sum+0x2>
    b6da:	b0 91 ab 26 	lds	r27, 0x26AB	; 0x8026ab <g_adc_io_adc5_sum+0x3>
    b6de:	05 2e       	mov	r0, r21
    b6e0:	00 0c       	add	r0, r0
    b6e2:	66 0b       	sbc	r22, r22
    b6e4:	77 0b       	sbc	r23, r23
    b6e6:	48 0f       	add	r20, r24
    b6e8:	59 1f       	adc	r21, r25
    b6ea:	6a 1f       	adc	r22, r26
    b6ec:	7b 1f       	adc	r23, r27
    b6ee:	40 93 a8 26 	sts	0x26A8, r20	; 0x8026a8 <g_adc_io_adc5_sum>
    b6f2:	50 93 a9 26 	sts	0x26A9, r21	; 0x8026a9 <g_adc_io_adc5_sum+0x1>
    b6f6:	60 93 aa 26 	sts	0x26AA, r22	; 0x8026aa <g_adc_io_adc5_sum+0x2>
    b6fa:	70 93 ab 26 	sts	0x26AB, r23	; 0x8026ab <g_adc_io_adc5_sum+0x3>
    b6fe:	80 91 a6 26 	lds	r24, 0x26A6	; 0x8026a6 <g_adc_io_adc5_cnt>
    b702:	90 91 a7 26 	lds	r25, 0x26A7	; 0x8026a7 <g_adc_io_adc5_cnt+0x1>
    b706:	01 96       	adiw	r24, 0x01	; 1
    b708:	80 93 a6 26 	sts	0x26A6, r24	; 0x8026a6 <g_adc_io_adc5_cnt>
    b70c:	90 93 a7 26 	sts	0x26A7, r25	; 0x8026a7 <g_adc_io_adc5_cnt+0x1>
    b710:	8f 3f       	cpi	r24, 0xFF	; 255
    b712:	91 05       	cpc	r25, r1
    b714:	09 f0       	breq	.+2      	; 0xb718 <isr_adc_a+0x28a>
    b716:	08 f4       	brcc	.+2      	; 0xb71a <isr_adc_a+0x28c>
    b718:	60 c0       	rjmp	.+192    	; 0xb7da <isr_adc_a+0x34c>
    b71a:	80 91 a8 26 	lds	r24, 0x26A8	; 0x8026a8 <g_adc_io_adc5_sum>
    b71e:	90 91 a9 26 	lds	r25, 0x26A9	; 0x8026a9 <g_adc_io_adc5_sum+0x1>
    b722:	a0 91 aa 26 	lds	r26, 0x26AA	; 0x8026aa <g_adc_io_adc5_sum+0x2>
    b726:	b0 91 ab 26 	lds	r27, 0x26AB	; 0x8026ab <g_adc_io_adc5_sum+0x3>
    b72a:	80 93 ac 26 	sts	0x26AC, r24	; 0x8026ac <g_adc_io_adc5_cur>
    b72e:	90 93 ad 26 	sts	0x26AD, r25	; 0x8026ad <g_adc_io_adc5_cur+0x1>
    b732:	a0 93 ae 26 	sts	0x26AE, r26	; 0x8026ae <g_adc_io_adc5_cur+0x2>
    b736:	b0 93 af 26 	sts	0x26AF, r27	; 0x8026af <g_adc_io_adc5_cur+0x3>
    b73a:	10 92 a6 26 	sts	0x26A6, r1	; 0x8026a6 <g_adc_io_adc5_cnt>
    b73e:	10 92 a7 26 	sts	0x26A7, r1	; 0x8026a7 <g_adc_io_adc5_cnt+0x1>
    b742:	10 92 a8 26 	sts	0x26A8, r1	; 0x8026a8 <g_adc_io_adc5_sum>
    b746:	10 92 a9 26 	sts	0x26A9, r1	; 0x8026a9 <g_adc_io_adc5_sum+0x1>
    b74a:	10 92 aa 26 	sts	0x26AA, r1	; 0x8026aa <g_adc_io_adc5_sum+0x2>
    b74e:	10 92 ab 26 	sts	0x26AB, r1	; 0x8026ab <g_adc_io_adc5_sum+0x3>
    b752:	08 95       	ret
    b754:	63 ff       	sbrs	r22, 3
    b756:	41 c0       	rjmp	.+130    	; 0xb7da <isr_adc_a+0x34c>
    b758:	80 91 9e 26 	lds	r24, 0x269E	; 0x80269e <g_adc_silence_sum>
    b75c:	90 91 9f 26 	lds	r25, 0x269F	; 0x80269f <g_adc_silence_sum+0x1>
    b760:	a0 91 a0 26 	lds	r26, 0x26A0	; 0x8026a0 <g_adc_silence_sum+0x2>
    b764:	b0 91 a1 26 	lds	r27, 0x26A1	; 0x8026a1 <g_adc_silence_sum+0x3>
    b768:	05 2e       	mov	r0, r21
    b76a:	00 0c       	add	r0, r0
    b76c:	66 0b       	sbc	r22, r22
    b76e:	77 0b       	sbc	r23, r23
    b770:	48 0f       	add	r20, r24
    b772:	59 1f       	adc	r21, r25
    b774:	6a 1f       	adc	r22, r26
    b776:	7b 1f       	adc	r23, r27
    b778:	40 93 9e 26 	sts	0x269E, r20	; 0x80269e <g_adc_silence_sum>
    b77c:	50 93 9f 26 	sts	0x269F, r21	; 0x80269f <g_adc_silence_sum+0x1>
    b780:	60 93 a0 26 	sts	0x26A0, r22	; 0x8026a0 <g_adc_silence_sum+0x2>
    b784:	70 93 a1 26 	sts	0x26A1, r23	; 0x8026a1 <g_adc_silence_sum+0x3>
    b788:	80 91 9c 26 	lds	r24, 0x269C	; 0x80269c <g_adc_silence_cnt>
    b78c:	90 91 9d 26 	lds	r25, 0x269D	; 0x80269d <g_adc_silence_cnt+0x1>
    b790:	01 96       	adiw	r24, 0x01	; 1
    b792:	80 93 9c 26 	sts	0x269C, r24	; 0x80269c <g_adc_silence_cnt>
    b796:	90 93 9d 26 	sts	0x269D, r25	; 0x80269d <g_adc_silence_cnt+0x1>
    b79a:	8f 3f       	cpi	r24, 0xFF	; 255
    b79c:	91 05       	cpc	r25, r1
    b79e:	e9 f0       	breq	.+58     	; 0xb7da <isr_adc_a+0x34c>
    b7a0:	e0 f0       	brcs	.+56     	; 0xb7da <isr_adc_a+0x34c>
    b7a2:	80 91 9e 26 	lds	r24, 0x269E	; 0x80269e <g_adc_silence_sum>
    b7a6:	90 91 9f 26 	lds	r25, 0x269F	; 0x80269f <g_adc_silence_sum+0x1>
    b7aa:	a0 91 a0 26 	lds	r26, 0x26A0	; 0x8026a0 <g_adc_silence_sum+0x2>
    b7ae:	b0 91 a1 26 	lds	r27, 0x26A1	; 0x8026a1 <g_adc_silence_sum+0x3>
    b7b2:	80 93 a2 26 	sts	0x26A2, r24	; 0x8026a2 <g_adc_silence_cur>
    b7b6:	90 93 a3 26 	sts	0x26A3, r25	; 0x8026a3 <g_adc_silence_cur+0x1>
    b7ba:	a0 93 a4 26 	sts	0x26A4, r26	; 0x8026a4 <g_adc_silence_cur+0x2>
    b7be:	b0 93 a5 26 	sts	0x26A5, r27	; 0x8026a5 <g_adc_silence_cur+0x3>
    b7c2:	10 92 9c 26 	sts	0x269C, r1	; 0x80269c <g_adc_silence_cnt>
    b7c6:	10 92 9d 26 	sts	0x269D, r1	; 0x80269d <g_adc_silence_cnt+0x1>
    b7ca:	10 92 9e 26 	sts	0x269E, r1	; 0x80269e <g_adc_silence_sum>
    b7ce:	10 92 9f 26 	sts	0x269F, r1	; 0x80269f <g_adc_silence_sum+0x1>
    b7d2:	10 92 a0 26 	sts	0x26A0, r1	; 0x8026a0 <g_adc_silence_sum+0x2>
    b7d6:	10 92 a1 26 	sts	0x26A1, r1	; 0x8026a1 <g_adc_silence_sum+0x3>
    b7da:	08 95       	ret

0000b7dc <isr_adc_b>:
    b7dc:	0f 93       	push	r16
    b7de:	1f 93       	push	r17
    b7e0:	60 ff       	sbrs	r22, 0
    b7e2:	43 c0       	rjmp	.+134    	; 0xb86a <isr_adc_b+0x8e>
    b7e4:	00 91 94 26 	lds	r16, 0x2694	; 0x802694 <g_adc_temp_sum>
    b7e8:	10 91 95 26 	lds	r17, 0x2695	; 0x802695 <g_adc_temp_sum+0x1>
    b7ec:	20 91 96 26 	lds	r18, 0x2696	; 0x802696 <g_adc_temp_sum+0x2>
    b7f0:	30 91 97 26 	lds	r19, 0x2697	; 0x802697 <g_adc_temp_sum+0x3>
    b7f4:	4e 5b       	subi	r20, 0xBE	; 190
    b7f6:	51 09       	sbc	r21, r1
    b7f8:	05 2e       	mov	r0, r21
    b7fa:	00 0c       	add	r0, r0
    b7fc:	66 0b       	sbc	r22, r22
    b7fe:	77 0b       	sbc	r23, r23
    b800:	40 0f       	add	r20, r16
    b802:	51 1f       	adc	r21, r17
    b804:	62 1f       	adc	r22, r18
    b806:	73 1f       	adc	r23, r19
    b808:	40 93 94 26 	sts	0x2694, r20	; 0x802694 <g_adc_temp_sum>
    b80c:	50 93 95 26 	sts	0x2695, r21	; 0x802695 <g_adc_temp_sum+0x1>
    b810:	60 93 96 26 	sts	0x2696, r22	; 0x802696 <g_adc_temp_sum+0x2>
    b814:	70 93 97 26 	sts	0x2697, r23	; 0x802697 <g_adc_temp_sum+0x3>
    b818:	80 91 92 26 	lds	r24, 0x2692	; 0x802692 <g_adc_temp_cnt>
    b81c:	90 91 93 26 	lds	r25, 0x2693	; 0x802693 <g_adc_temp_cnt+0x1>
    b820:	01 96       	adiw	r24, 0x01	; 1
    b822:	80 93 92 26 	sts	0x2692, r24	; 0x802692 <g_adc_temp_cnt>
    b826:	90 93 93 26 	sts	0x2693, r25	; 0x802693 <g_adc_temp_cnt+0x1>
    b82a:	8f 3f       	cpi	r24, 0xFF	; 255
    b82c:	91 05       	cpc	r25, r1
    b82e:	e9 f0       	breq	.+58     	; 0xb86a <isr_adc_b+0x8e>
    b830:	e0 f0       	brcs	.+56     	; 0xb86a <isr_adc_b+0x8e>
    b832:	80 91 94 26 	lds	r24, 0x2694	; 0x802694 <g_adc_temp_sum>
    b836:	90 91 95 26 	lds	r25, 0x2695	; 0x802695 <g_adc_temp_sum+0x1>
    b83a:	a0 91 96 26 	lds	r26, 0x2696	; 0x802696 <g_adc_temp_sum+0x2>
    b83e:	b0 91 97 26 	lds	r27, 0x2697	; 0x802697 <g_adc_temp_sum+0x3>
    b842:	80 93 98 26 	sts	0x2698, r24	; 0x802698 <g_adc_temp_cur>
    b846:	90 93 99 26 	sts	0x2699, r25	; 0x802699 <g_adc_temp_cur+0x1>
    b84a:	a0 93 9a 26 	sts	0x269A, r26	; 0x80269a <g_adc_temp_cur+0x2>
    b84e:	b0 93 9b 26 	sts	0x269B, r27	; 0x80269b <g_adc_temp_cur+0x3>
    b852:	10 92 92 26 	sts	0x2692, r1	; 0x802692 <g_adc_temp_cnt>
    b856:	10 92 93 26 	sts	0x2693, r1	; 0x802693 <g_adc_temp_cnt+0x1>
    b85a:	10 92 94 26 	sts	0x2694, r1	; 0x802694 <g_adc_temp_sum>
    b85e:	10 92 95 26 	sts	0x2695, r1	; 0x802695 <g_adc_temp_sum+0x1>
    b862:	10 92 96 26 	sts	0x2696, r1	; 0x802696 <g_adc_temp_sum+0x2>
    b866:	10 92 97 26 	sts	0x2697, r1	; 0x802697 <g_adc_temp_sum+0x3>
    b86a:	1f 91       	pop	r17
    b86c:	0f 91       	pop	r16
    b86e:	08 95       	ret

0000b870 <task_dac>:
    b870:	2f 92       	push	r2
    b872:	3f 92       	push	r3
    b874:	4f 92       	push	r4
    b876:	5f 92       	push	r5
    b878:	6f 92       	push	r6
    b87a:	7f 92       	push	r7
    b87c:	8f 92       	push	r8
    b87e:	9f 92       	push	r9
    b880:	af 92       	push	r10
    b882:	bf 92       	push	r11
    b884:	cf 92       	push	r12
    b886:	df 92       	push	r13
    b888:	ef 92       	push	r14
    b88a:	ff 92       	push	r15
    b88c:	0f 93       	push	r16
    b88e:	1f 93       	push	r17
    b890:	cf 93       	push	r28
    b892:	df 93       	push	r29
    b894:	cd b7       	in	r28, 0x3d	; 61
    b896:	de b7       	in	r29, 0x3e	; 62
    b898:	2e 97       	sbiw	r28, 0x0e	; 14
    b89a:	cd bf       	out	0x3d, r28	; 61
    b89c:	de bf       	out	0x3e, r29	; 62
    b89e:	8f b7       	in	r24, 0x3f	; 63
    b8a0:	8a 83       	std	Y+2, r24	; 0x02
    b8a2:	f8 94       	cli
    b8a4:	8a 81       	ldd	r24, Y+2	; 0x02
    b8a6:	40 90 13 20 	lds	r4, 0x2013	; 0x802013 <dds0_freq_mHz>
    b8aa:	50 90 14 20 	lds	r5, 0x2014	; 0x802014 <dds0_freq_mHz+0x1>
    b8ae:	60 90 15 20 	lds	r6, 0x2015	; 0x802015 <dds0_freq_mHz+0x2>
    b8b2:	70 90 16 20 	lds	r7, 0x2016	; 0x802016 <dds0_freq_mHz+0x3>
    b8b6:	00 91 0f 20 	lds	r16, 0x200F	; 0x80200f <dds1_freq_mHz>
    b8ba:	10 91 10 20 	lds	r17, 0x2010	; 0x802010 <dds1_freq_mHz+0x1>
    b8be:	20 91 11 20 	lds	r18, 0x2011	; 0x802011 <dds1_freq_mHz+0x2>
    b8c2:	30 91 12 20 	lds	r19, 0x2012	; 0x802012 <dds1_freq_mHz+0x3>
    b8c6:	0b 87       	std	Y+11, r16	; 0x0b
    b8c8:	1c 87       	std	Y+12, r17	; 0x0c
    b8ca:	2d 87       	std	Y+13, r18	; 0x0d
    b8cc:	3e 87       	std	Y+14, r19	; 0x0e
    b8ce:	8f bf       	out	0x3f, r24	; 63
    b8d0:	80 91 c5 24 	lds	r24, 0x24C5	; 0x8024c5 <s_dds0_freq_mHz.8063>
    b8d4:	90 91 c6 24 	lds	r25, 0x24C6	; 0x8024c6 <s_dds0_freq_mHz.8063+0x1>
    b8d8:	a0 91 c7 24 	lds	r26, 0x24C7	; 0x8024c7 <s_dds0_freq_mHz.8063+0x2>
    b8dc:	b0 91 c8 24 	lds	r27, 0x24C8	; 0x8024c8 <s_dds0_freq_mHz.8063+0x3>
    b8e0:	48 16       	cp	r4, r24
    b8e2:	59 06       	cpc	r5, r25
    b8e4:	6a 06       	cpc	r6, r26
    b8e6:	7b 06       	cpc	r7, r27
    b8e8:	71 f4       	brne	.+28     	; 0xb906 <task_dac+0x96>
    b8ea:	80 91 c1 24 	lds	r24, 0x24C1	; 0x8024c1 <s_dds1_freq_mHz.8064>
    b8ee:	90 91 c2 24 	lds	r25, 0x24C2	; 0x8024c2 <s_dds1_freq_mHz.8064+0x1>
    b8f2:	a0 91 c3 24 	lds	r26, 0x24C3	; 0x8024c3 <s_dds1_freq_mHz.8064+0x2>
    b8f6:	b0 91 c4 24 	lds	r27, 0x24C4	; 0x8024c4 <s_dds1_freq_mHz.8064+0x3>
    b8fa:	08 17       	cp	r16, r24
    b8fc:	19 07       	cpc	r17, r25
    b8fe:	2a 07       	cpc	r18, r26
    b900:	3b 07       	cpc	r19, r27
    b902:	09 f4       	brne	.+2      	; 0xb906 <task_dac+0x96>
    b904:	a1 c0       	rjmp	.+322    	; 0xba48 <task_dac+0x1d8>
    b906:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <dds0_freq_mHz>
    b90a:	90 91 14 20 	lds	r25, 0x2014	; 0x802014 <dds0_freq_mHz+0x1>
    b90e:	a0 91 15 20 	lds	r26, 0x2015	; 0x802015 <dds0_freq_mHz+0x2>
    b912:	b0 91 16 20 	lds	r27, 0x2016	; 0x802016 <dds0_freq_mHz+0x3>
    b916:	8c 01       	movw	r16, r24
    b918:	9d 01       	movw	r18, r26
    b91a:	40 e0       	ldi	r20, 0x00	; 0
    b91c:	50 e0       	ldi	r21, 0x00	; 0
    b91e:	ba 01       	movw	r22, r20
    b920:	8b 83       	std	Y+3, r24	; 0x03
    b922:	1c 83       	std	Y+4, r17	; 0x04
    b924:	2d 83       	std	Y+5, r18	; 0x05
    b926:	3e 83       	std	Y+6, r19	; 0x06
    b928:	4f 83       	std	Y+7, r20	; 0x07
    b92a:	58 87       	std	Y+8, r21	; 0x08
    b92c:	69 87       	std	Y+9, r22	; 0x09
    b92e:	7a 87       	std	Y+10, r23	; 0x0a
    b930:	aa 24       	eor	r10, r10
    b932:	aa 94       	dec	r10
    b934:	bb 24       	eor	r11, r11
    b936:	ba 94       	dec	r11
    b938:	cc 24       	eor	r12, r12
    b93a:	ca 94       	dec	r12
    b93c:	dd 24       	eor	r13, r13
    b93e:	da 94       	dec	r13
    b940:	e1 2c       	mov	r14, r1
    b942:	f1 2c       	mov	r15, r1
    b944:	00 e0       	ldi	r16, 0x00	; 0
    b946:	10 e0       	ldi	r17, 0x00	; 0
    b948:	2b 81       	ldd	r18, Y+3	; 0x03
    b94a:	3c 81       	ldd	r19, Y+4	; 0x04
    b94c:	4d 81       	ldd	r20, Y+5	; 0x05
    b94e:	5e 81       	ldd	r21, Y+6	; 0x06
    b950:	60 e0       	ldi	r22, 0x00	; 0
    b952:	70 e0       	ldi	r23, 0x00	; 0
    b954:	80 e0       	ldi	r24, 0x00	; 0
    b956:	90 e0       	ldi	r25, 0x00	; 0
    b958:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    b95c:	a1 2c       	mov	r10, r1
    b95e:	0f 2e       	mov	r0, r31
    b960:	fc e6       	ldi	r31, 0x6C	; 108
    b962:	bf 2e       	mov	r11, r31
    b964:	f0 2d       	mov	r31, r0
    b966:	0f 2e       	mov	r0, r31
    b968:	fc ed       	ldi	r31, 0xDC	; 220
    b96a:	cf 2e       	mov	r12, r31
    b96c:	f0 2d       	mov	r31, r0
    b96e:	68 94       	set
    b970:	dd 24       	eor	r13, r13
    b972:	d1 f8       	bld	r13, 1
    b974:	0e 94 9b 7a 	call	0xf536	; 0xf536 <__udivdi3>
    b978:	92 2e       	mov	r9, r18
    b97a:	83 2e       	mov	r8, r19
    b97c:	34 2e       	mov	r3, r20
    b97e:	25 2e       	mov	r2, r21
    b980:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <dds1_freq_mHz>
    b984:	90 91 10 20 	lds	r25, 0x2010	; 0x802010 <dds1_freq_mHz+0x1>
    b988:	a0 91 11 20 	lds	r26, 0x2011	; 0x802011 <dds1_freq_mHz+0x2>
    b98c:	b0 91 12 20 	lds	r27, 0x2012	; 0x802012 <dds1_freq_mHz+0x3>
    b990:	8c 01       	movw	r16, r24
    b992:	9d 01       	movw	r18, r26
    b994:	40 e0       	ldi	r20, 0x00	; 0
    b996:	50 e0       	ldi	r21, 0x00	; 0
    b998:	ba 01       	movw	r22, r20
    b99a:	8b 83       	std	Y+3, r24	; 0x03
    b99c:	1c 83       	std	Y+4, r17	; 0x04
    b99e:	2d 83       	std	Y+5, r18	; 0x05
    b9a0:	3e 83       	std	Y+6, r19	; 0x06
    b9a2:	4f 83       	std	Y+7, r20	; 0x07
    b9a4:	58 87       	std	Y+8, r21	; 0x08
    b9a6:	69 87       	std	Y+9, r22	; 0x09
    b9a8:	7a 87       	std	Y+10, r23	; 0x0a
    b9aa:	aa 24       	eor	r10, r10
    b9ac:	aa 94       	dec	r10
    b9ae:	bb 24       	eor	r11, r11
    b9b0:	ba 94       	dec	r11
    b9b2:	cc 24       	eor	r12, r12
    b9b4:	ca 94       	dec	r12
    b9b6:	dd 24       	eor	r13, r13
    b9b8:	da 94       	dec	r13
    b9ba:	00 e0       	ldi	r16, 0x00	; 0
    b9bc:	10 e0       	ldi	r17, 0x00	; 0
    b9be:	2b 81       	ldd	r18, Y+3	; 0x03
    b9c0:	3c 81       	ldd	r19, Y+4	; 0x04
    b9c2:	4d 81       	ldd	r20, Y+5	; 0x05
    b9c4:	5e 81       	ldd	r21, Y+6	; 0x06
    b9c6:	60 e0       	ldi	r22, 0x00	; 0
    b9c8:	70 e0       	ldi	r23, 0x00	; 0
    b9ca:	80 e0       	ldi	r24, 0x00	; 0
    b9cc:	90 e0       	ldi	r25, 0x00	; 0
    b9ce:	0e 94 1d 7a 	call	0xf43a	; 0xf43a <__muldi3>
    b9d2:	a1 2c       	mov	r10, r1
    b9d4:	0f 2e       	mov	r0, r31
    b9d6:	fc e6       	ldi	r31, 0x6C	; 108
    b9d8:	bf 2e       	mov	r11, r31
    b9da:	f0 2d       	mov	r31, r0
    b9dc:	0f 2e       	mov	r0, r31
    b9de:	fc ed       	ldi	r31, 0xDC	; 220
    b9e0:	cf 2e       	mov	r12, r31
    b9e2:	f0 2d       	mov	r31, r0
    b9e4:	68 94       	set
    b9e6:	dd 24       	eor	r13, r13
    b9e8:	d1 f8       	bld	r13, 1
    b9ea:	0e 94 9b 7a 	call	0xf536	; 0xf536 <__udivdi3>
    b9ee:	72 2f       	mov	r23, r18
    b9f0:	63 2f       	mov	r22, r19
    b9f2:	94 2f       	mov	r25, r20
    b9f4:	85 2f       	mov	r24, r21
    b9f6:	40 92 c5 24 	sts	0x24C5, r4	; 0x8024c5 <s_dds0_freq_mHz.8063>
    b9fa:	50 92 c6 24 	sts	0x24C6, r5	; 0x8024c6 <s_dds0_freq_mHz.8063+0x1>
    b9fe:	60 92 c7 24 	sts	0x24C7, r6	; 0x8024c7 <s_dds0_freq_mHz.8063+0x2>
    ba02:	70 92 c8 24 	sts	0x24C8, r7	; 0x8024c8 <s_dds0_freq_mHz.8063+0x3>
    ba06:	2b 85       	ldd	r18, Y+11	; 0x0b
    ba08:	3c 85       	ldd	r19, Y+12	; 0x0c
    ba0a:	4d 85       	ldd	r20, Y+13	; 0x0d
    ba0c:	5e 85       	ldd	r21, Y+14	; 0x0e
    ba0e:	20 93 c1 24 	sts	0x24C1, r18	; 0x8024c1 <s_dds1_freq_mHz.8064>
    ba12:	30 93 c2 24 	sts	0x24C2, r19	; 0x8024c2 <s_dds1_freq_mHz.8064+0x1>
    ba16:	40 93 c3 24 	sts	0x24C3, r20	; 0x8024c3 <s_dds1_freq_mHz.8064+0x2>
    ba1a:	50 93 c4 24 	sts	0x24C4, r21	; 0x8024c4 <s_dds1_freq_mHz.8064+0x3>
    ba1e:	2f b7       	in	r18, 0x3f	; 63
    ba20:	29 83       	std	Y+1, r18	; 0x01
    ba22:	f8 94       	cli
    ba24:	29 81       	ldd	r18, Y+1	; 0x01
    ba26:	90 92 11 25 	sts	0x2511, r9	; 0x802511 <dds0_inc>
    ba2a:	80 92 12 25 	sts	0x2512, r8	; 0x802512 <dds0_inc+0x1>
    ba2e:	30 92 13 25 	sts	0x2513, r3	; 0x802513 <dds0_inc+0x2>
    ba32:	20 92 14 25 	sts	0x2514, r2	; 0x802514 <dds0_inc+0x3>
    ba36:	70 93 09 25 	sts	0x2509, r23	; 0x802509 <dds1_inc>
    ba3a:	60 93 0a 25 	sts	0x250A, r22	; 0x80250a <dds1_inc+0x1>
    ba3e:	90 93 0b 25 	sts	0x250B, r25	; 0x80250b <dds1_inc+0x2>
    ba42:	80 93 0c 25 	sts	0x250C, r24	; 0x80250c <dds1_inc+0x3>
    ba46:	2f bf       	out	0x3f, r18	; 63
    ba48:	2e 96       	adiw	r28, 0x0e	; 14
    ba4a:	cd bf       	out	0x3d, r28	; 61
    ba4c:	de bf       	out	0x3e, r29	; 62
    ba4e:	df 91       	pop	r29
    ba50:	cf 91       	pop	r28
    ba52:	1f 91       	pop	r17
    ba54:	0f 91       	pop	r16
    ba56:	ff 90       	pop	r15
    ba58:	ef 90       	pop	r14
    ba5a:	df 90       	pop	r13
    ba5c:	cf 90       	pop	r12
    ba5e:	bf 90       	pop	r11
    ba60:	af 90       	pop	r10
    ba62:	9f 90       	pop	r9
    ba64:	8f 90       	pop	r8
    ba66:	7f 90       	pop	r7
    ba68:	6f 90       	pop	r6
    ba6a:	5f 90       	pop	r5
    ba6c:	4f 90       	pop	r4
    ba6e:	3f 90       	pop	r3
    ba70:	2f 90       	pop	r2
    ba72:	08 95       	ret

0000ba74 <task_adc>:
    ba74:	4f 92       	push	r4
    ba76:	5f 92       	push	r5
    ba78:	6f 92       	push	r6
    ba7a:	7f 92       	push	r7
    ba7c:	8f 92       	push	r8
    ba7e:	9f 92       	push	r9
    ba80:	af 92       	push	r10
    ba82:	bf 92       	push	r11
    ba84:	cf 92       	push	r12
    ba86:	df 92       	push	r13
    ba88:	ef 92       	push	r14
    ba8a:	ff 92       	push	r15
    ba8c:	cf 93       	push	r28
    ba8e:	df 93       	push	r29
    ba90:	cd b7       	in	r28, 0x3d	; 61
    ba92:	de b7       	in	r29, 0x3e	; 62
    ba94:	6a 97       	sbiw	r28, 0x1a	; 26
    ba96:	cd bf       	out	0x3d, r28	; 61
    ba98:	de bf       	out	0x3e, r29	; 62
    ba9a:	c0 90 b5 24 	lds	r12, 0x24B5	; 0x8024b5 <adc_last.8074>
    ba9e:	d0 90 b6 24 	lds	r13, 0x24B6	; 0x8024b6 <adc_last.8074+0x1>
    baa2:	e0 90 b7 24 	lds	r14, 0x24B7	; 0x8024b7 <adc_last.8074+0x2>
    baa6:	f0 90 b8 24 	lds	r15, 0x24B8	; 0x8024b8 <adc_last.8074+0x3>
    baaa:	4b 01       	movw	r8, r22
    baac:	5c 01       	movw	r10, r24
    baae:	8c 18       	sub	r8, r12
    bab0:	9d 08       	sbc	r9, r13
    bab2:	ae 08       	sbc	r10, r14
    bab4:	bf 08       	sbc	r11, r15
    bab6:	81 14       	cp	r8, r1
    bab8:	22 e0       	ldi	r18, 0x02	; 2
    baba:	92 06       	cpc	r9, r18
    babc:	a1 04       	cpc	r10, r1
    babe:	b1 04       	cpc	r11, r1
    bac0:	30 f4       	brcc	.+12     	; 0xbace <task_adc+0x5a>
    bac2:	6c 15       	cp	r22, r12
    bac4:	7d 05       	cpc	r23, r13
    bac6:	8e 05       	cpc	r24, r14
    bac8:	9f 05       	cpc	r25, r15
    baca:	08 f0       	brcs	.+2      	; 0xbace <task_adc+0x5a>
    bacc:	1a c1       	rjmp	.+564    	; 0xbd02 <task_adc+0x28e>
    bace:	dc 01       	movw	r26, r24
    bad0:	cb 01       	movw	r24, r22
    bad2:	80 93 b5 24 	sts	0x24B5, r24	; 0x8024b5 <adc_last.8074>
    bad6:	90 93 b6 24 	sts	0x24B6, r25	; 0x8024b6 <adc_last.8074+0x1>
    bada:	a0 93 b7 24 	sts	0x24B7, r26	; 0x8024b7 <adc_last.8074+0x2>
    bade:	b0 93 b8 24 	sts	0x24B8, r27	; 0x8024b8 <adc_last.8074+0x3>
    bae2:	8f b7       	in	r24, 0x3f	; 63
    bae4:	89 83       	std	Y+1, r24	; 0x01
    bae6:	f8 94       	cli
    bae8:	69 81       	ldd	r22, Y+1	; 0x01
    baea:	20 91 d4 26 	lds	r18, 0x26D4	; 0x8026d4 <g_adc_vctcxo_cur>
    baee:	30 91 d5 26 	lds	r19, 0x26D5	; 0x8026d5 <g_adc_vctcxo_cur+0x1>
    baf2:	40 91 d6 26 	lds	r20, 0x26D6	; 0x8026d6 <g_adc_vctcxo_cur+0x2>
    baf6:	50 91 d7 26 	lds	r21, 0x26D7	; 0x8026d7 <g_adc_vctcxo_cur+0x3>
    bafa:	40 90 ca 26 	lds	r4, 0x26CA	; 0x8026ca <g_adc_5v0_cur>
    bafe:	50 90 cb 26 	lds	r5, 0x26CB	; 0x8026cb <g_adc_5v0_cur+0x1>
    bb02:	60 90 cc 26 	lds	r6, 0x26CC	; 0x8026cc <g_adc_5v0_cur+0x2>
    bb06:	70 90 cd 26 	lds	r7, 0x26CD	; 0x8026cd <g_adc_5v0_cur+0x3>
    bb0a:	80 90 c0 26 	lds	r8, 0x26C0	; 0x8026c0 <g_adc_vbat_cur>
    bb0e:	90 90 c1 26 	lds	r9, 0x26C1	; 0x8026c1 <g_adc_vbat_cur+0x1>
    bb12:	a0 90 c2 26 	lds	r10, 0x26C2	; 0x8026c2 <g_adc_vbat_cur+0x2>
    bb16:	b0 90 c3 26 	lds	r11, 0x26C3	; 0x8026c3 <g_adc_vbat_cur+0x3>
    bb1a:	c0 90 b6 26 	lds	r12, 0x26B6	; 0x8026b6 <g_adc_io_adc4_cur>
    bb1e:	d0 90 b7 26 	lds	r13, 0x26B7	; 0x8026b7 <g_adc_io_adc4_cur+0x1>
    bb22:	e0 90 b8 26 	lds	r14, 0x26B8	; 0x8026b8 <g_adc_io_adc4_cur+0x2>
    bb26:	f0 90 b9 26 	lds	r15, 0x26B9	; 0x8026b9 <g_adc_io_adc4_cur+0x3>
    bb2a:	80 91 ac 26 	lds	r24, 0x26AC	; 0x8026ac <g_adc_io_adc5_cur>
    bb2e:	90 91 ad 26 	lds	r25, 0x26AD	; 0x8026ad <g_adc_io_adc5_cur+0x1>
    bb32:	a0 91 ae 26 	lds	r26, 0x26AE	; 0x8026ae <g_adc_io_adc5_cur+0x2>
    bb36:	b0 91 af 26 	lds	r27, 0x26AF	; 0x8026af <g_adc_io_adc5_cur+0x3>
    bb3a:	8b 83       	std	Y+3, r24	; 0x03
    bb3c:	9c 83       	std	Y+4, r25	; 0x04
    bb3e:	ad 83       	std	Y+5, r26	; 0x05
    bb40:	be 83       	std	Y+6, r27	; 0x06
    bb42:	80 91 a2 26 	lds	r24, 0x26A2	; 0x8026a2 <g_adc_silence_cur>
    bb46:	90 91 a3 26 	lds	r25, 0x26A3	; 0x8026a3 <g_adc_silence_cur+0x1>
    bb4a:	a0 91 a4 26 	lds	r26, 0x26A4	; 0x8026a4 <g_adc_silence_cur+0x2>
    bb4e:	b0 91 a5 26 	lds	r27, 0x26A5	; 0x8026a5 <g_adc_silence_cur+0x3>
    bb52:	8f 83       	std	Y+7, r24	; 0x07
    bb54:	98 87       	std	Y+8, r25	; 0x08
    bb56:	a9 87       	std	Y+9, r26	; 0x09
    bb58:	ba 87       	std	Y+10, r27	; 0x0a
    bb5a:	80 91 98 26 	lds	r24, 0x2698	; 0x802698 <g_adc_temp_cur>
    bb5e:	90 91 99 26 	lds	r25, 0x2699	; 0x802699 <g_adc_temp_cur+0x1>
    bb62:	a0 91 9a 26 	lds	r26, 0x269A	; 0x80269a <g_adc_temp_cur+0x2>
    bb66:	b0 91 9b 26 	lds	r27, 0x269B	; 0x80269b <g_adc_temp_cur+0x3>
    bb6a:	8b 87       	std	Y+11, r24	; 0x0b
    bb6c:	9c 87       	std	Y+12, r25	; 0x0c
    bb6e:	ad 87       	std	Y+13, r26	; 0x0d
    bb70:	be 87       	std	Y+14, r27	; 0x0e
    bb72:	6f bf       	out	0x3f, r22	; 63
    bb74:	a8 eb       	ldi	r26, 0xB8	; 184
    bb76:	bb e0       	ldi	r27, 0x0B	; 11
    bb78:	0e 94 13 7a 	call	0xf426	; 0xf426 <__muluhisi3>
    bb7c:	05 2e       	mov	r0, r21
    bb7e:	54 e1       	ldi	r21, 0x14	; 20
    bb80:	96 95       	lsr	r25
    bb82:	87 95       	ror	r24
    bb84:	77 95       	ror	r23
    bb86:	67 95       	ror	r22
    bb88:	5a 95       	dec	r21
    bb8a:	d1 f7       	brne	.-12     	; 0xbb80 <task_adc+0x10c>
    bb8c:	50 2d       	mov	r21, r0
    bb8e:	0e 94 ae 76 	call	0xed5c	; 0xed5c <__floatunsisf>
    bb92:	20 e0       	ldi	r18, 0x00	; 0
    bb94:	30 e0       	ldi	r19, 0x00	; 0
    bb96:	4c e3       	ldi	r20, 0x3C	; 60
    bb98:	52 e4       	ldi	r21, 0x42	; 66
    bb9a:	0e 94 a9 75 	call	0xeb52	; 0xeb52 <__subsf3>
    bb9e:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    bba2:	6f 87       	std	Y+15, r22	; 0x0f
    bba4:	78 8b       	std	Y+16, r23	; 0x10
    bba6:	89 8b       	std	Y+17, r24	; 0x11
    bba8:	9a 8b       	std	Y+18, r25	; 0x12
    bbaa:	a8 eb       	ldi	r26, 0xB8	; 184
    bbac:	bb e0       	ldi	r27, 0x0B	; 11
    bbae:	a3 01       	movw	r20, r6
    bbb0:	92 01       	movw	r18, r4
    bbb2:	0e 94 13 7a 	call	0xf426	; 0xf426 <__muluhisi3>
    bbb6:	0e 94 ae 76 	call	0xed5c	; 0xed5c <__floatunsisf>
    bbba:	29 ed       	ldi	r18, 0xD9	; 217
    bbbc:	38 ed       	ldi	r19, 0xD8	; 216
    bbbe:	4a e1       	ldi	r20, 0x1A	; 26
    bbc0:	50 e4       	ldi	r21, 0x40	; 64
    bbc2:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    bbc6:	20 e0       	ldi	r18, 0x00	; 0
    bbc8:	30 e0       	ldi	r19, 0x00	; 0
    bbca:	40 e8       	ldi	r20, 0x80	; 128
    bbcc:	55 e3       	ldi	r21, 0x35	; 53
    bbce:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    bbd2:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    bbd6:	6b 8b       	std	Y+19, r22	; 0x13
    bbd8:	7c 8b       	std	Y+20, r23	; 0x14
    bbda:	8d 8b       	std	Y+21, r24	; 0x15
    bbdc:	9e 8b       	std	Y+22, r25	; 0x16
    bbde:	a8 eb       	ldi	r26, 0xB8	; 184
    bbe0:	bb e0       	ldi	r27, 0x0B	; 11
    bbe2:	a5 01       	movw	r20, r10
    bbe4:	94 01       	movw	r18, r8
    bbe6:	0e 94 13 7a 	call	0xf426	; 0xf426 <__muluhisi3>
    bbea:	0e 94 ae 76 	call	0xed5c	; 0xed5c <__floatunsisf>
    bbee:	23 ee       	ldi	r18, 0xE3	; 227
    bbf0:	35 e4       	ldi	r19, 0x45	; 69
    bbf2:	4b e1       	ldi	r20, 0x1B	; 27
    bbf4:	50 e4       	ldi	r21, 0x40	; 64
    bbf6:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    bbfa:	20 e0       	ldi	r18, 0x00	; 0
    bbfc:	30 e0       	ldi	r19, 0x00	; 0
    bbfe:	40 e8       	ldi	r20, 0x80	; 128
    bc00:	55 e3       	ldi	r21, 0x35	; 53
    bc02:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    bc06:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    bc0a:	6f 8b       	std	Y+23, r22	; 0x17
    bc0c:	78 8f       	std	Y+24, r23	; 0x18
    bc0e:	89 8f       	std	Y+25, r24	; 0x19
    bc10:	9a 8f       	std	Y+26, r25	; 0x1a
    bc12:	a8 eb       	ldi	r26, 0xB8	; 184
    bc14:	bb e0       	ldi	r27, 0x0B	; 11
    bc16:	a7 01       	movw	r20, r14
    bc18:	96 01       	movw	r18, r12
    bc1a:	0e 94 13 7a 	call	0xf426	; 0xf426 <__muluhisi3>
    bc1e:	6b 01       	movw	r12, r22
    bc20:	7c 01       	movw	r14, r24
    bc22:	0b 2e       	mov	r0, r27
    bc24:	b4 e1       	ldi	r27, 0x14	; 20
    bc26:	f6 94       	lsr	r15
    bc28:	e7 94       	ror	r14
    bc2a:	d7 94       	ror	r13
    bc2c:	c7 94       	ror	r12
    bc2e:	ba 95       	dec	r27
    bc30:	d1 f7       	brne	.-12     	; 0xbc26 <task_adc+0x1b2>
    bc32:	b0 2d       	mov	r27, r0
    bc34:	2b 81       	ldd	r18, Y+3	; 0x03
    bc36:	3c 81       	ldd	r19, Y+4	; 0x04
    bc38:	4d 81       	ldd	r20, Y+5	; 0x05
    bc3a:	5e 81       	ldd	r21, Y+6	; 0x06
    bc3c:	0e 94 13 7a 	call	0xf426	; 0xf426 <__muluhisi3>
    bc40:	2b 01       	movw	r4, r22
    bc42:	3c 01       	movw	r6, r24
    bc44:	03 2e       	mov	r0, r19
    bc46:	34 e1       	ldi	r19, 0x14	; 20
    bc48:	76 94       	lsr	r7
    bc4a:	67 94       	ror	r6
    bc4c:	57 94       	ror	r5
    bc4e:	47 94       	ror	r4
    bc50:	3a 95       	dec	r19
    bc52:	d1 f7       	brne	.-12     	; 0xbc48 <task_adc+0x1d4>
    bc54:	30 2d       	mov	r19, r0
    bc56:	2f 81       	ldd	r18, Y+7	; 0x07
    bc58:	38 85       	ldd	r19, Y+8	; 0x08
    bc5a:	49 85       	ldd	r20, Y+9	; 0x09
    bc5c:	5a 85       	ldd	r21, Y+10	; 0x0a
    bc5e:	0e 94 13 7a 	call	0xf426	; 0xf426 <__muluhisi3>
    bc62:	4b 01       	movw	r8, r22
    bc64:	5c 01       	movw	r10, r24
    bc66:	07 2e       	mov	r0, r23
    bc68:	74 e1       	ldi	r23, 0x14	; 20
    bc6a:	b6 94       	lsr	r11
    bc6c:	a7 94       	ror	r10
    bc6e:	97 94       	ror	r9
    bc70:	87 94       	ror	r8
    bc72:	7a 95       	dec	r23
    bc74:	d1 f7       	brne	.-12     	; 0xbc6a <task_adc+0x1f6>
    bc76:	70 2d       	mov	r23, r0
    bc78:	a4 e6       	ldi	r26, 0x64	; 100
    bc7a:	b0 e0       	ldi	r27, 0x00	; 0
    bc7c:	2b 85       	ldd	r18, Y+11	; 0x0b
    bc7e:	3c 85       	ldd	r19, Y+12	; 0x0c
    bc80:	4d 85       	ldd	r20, Y+13	; 0x0d
    bc82:	5e 85       	ldd	r21, Y+14	; 0x0e
    bc84:	0e 94 13 7a 	call	0xf426	; 0xf426 <__muluhisi3>
    bc88:	0e 94 ae 76 	call	0xed5c	; 0xed5c <__floatunsisf>
    bc8c:	2d ec       	ldi	r18, 0xCD	; 205
    bc8e:	3c e4       	ldi	r19, 0x4C	; 76
    bc90:	4d e1       	ldi	r20, 0x1D	; 29
    bc92:	54 e4       	ldi	r21, 0x44	; 68
    bc94:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    bc98:	20 e0       	ldi	r18, 0x00	; 0
    bc9a:	30 e0       	ldi	r19, 0x00	; 0
    bc9c:	40 e8       	ldi	r20, 0x80	; 128
    bc9e:	55 e3       	ldi	r21, 0x35	; 53
    bca0:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    bca4:	20 e0       	ldi	r18, 0x00	; 0
    bca6:	36 e6       	ldi	r19, 0x66	; 102
    bca8:	45 ed       	ldi	r20, 0xD5	; 213
    bcaa:	56 e4       	ldi	r21, 0x46	; 70
    bcac:	0e 94 a9 75 	call	0xeb52	; 0xeb52 <__subsf3>
    bcb0:	0e 94 7d 76 	call	0xecfa	; 0xecfa <__fixsfsi>
    bcb4:	2f b7       	in	r18, 0x3f	; 63
    bcb6:	2a 83       	std	Y+2, r18	; 0x02
    bcb8:	f8 94       	cli
    bcba:	2a 81       	ldd	r18, Y+2	; 0x02
    bcbc:	af 85       	ldd	r26, Y+15	; 0x0f
    bcbe:	b8 89       	ldd	r27, Y+16	; 0x10
    bcc0:	a0 93 90 26 	sts	0x2690, r26	; 0x802690 <g_adc_vctcxo_volt_1000>
    bcc4:	b0 93 91 26 	sts	0x2691, r27	; 0x802691 <g_adc_vctcxo_volt_1000+0x1>
    bcc8:	4b 89       	ldd	r20, Y+19	; 0x13
    bcca:	5c 89       	ldd	r21, Y+20	; 0x14
    bccc:	40 93 8e 26 	sts	0x268E, r20	; 0x80268e <g_adc_5v0_volt_1000>
    bcd0:	50 93 8f 26 	sts	0x268F, r21	; 0x80268f <g_adc_5v0_volt_1000+0x1>
    bcd4:	af 89       	ldd	r26, Y+23	; 0x17
    bcd6:	b8 8d       	ldd	r27, Y+24	; 0x18
    bcd8:	a0 93 8c 26 	sts	0x268C, r26	; 0x80268c <g_adc_vbat_volt_1000>
    bcdc:	b0 93 8d 26 	sts	0x268D, r27	; 0x80268d <g_adc_vbat_volt_1000+0x1>
    bce0:	c0 92 8a 26 	sts	0x268A, r12	; 0x80268a <g_adc_io_adc4_volt_1000>
    bce4:	d0 92 8b 26 	sts	0x268B, r13	; 0x80268b <g_adc_io_adc4_volt_1000+0x1>
    bce8:	40 92 88 26 	sts	0x2688, r4	; 0x802688 <g_adc_io_adc5_volt_1000>
    bcec:	50 92 89 26 	sts	0x2689, r5	; 0x802689 <g_adc_io_adc5_volt_1000+0x1>
    bcf0:	80 92 86 26 	sts	0x2686, r8	; 0x802686 <g_adc_silence_volt_1000>
    bcf4:	90 92 87 26 	sts	0x2687, r9	; 0x802687 <g_adc_silence_volt_1000+0x1>
    bcf8:	60 93 84 26 	sts	0x2684, r22	; 0x802684 <g_adc_temp_deg_100>
    bcfc:	70 93 85 26 	sts	0x2685, r23	; 0x802685 <g_adc_temp_deg_100+0x1>
    bd00:	2f bf       	out	0x3f, r18	; 63
    bd02:	6a 96       	adiw	r28, 0x1a	; 26
    bd04:	cd bf       	out	0x3d, r28	; 61
    bd06:	de bf       	out	0x3e, r29	; 62
    bd08:	df 91       	pop	r29
    bd0a:	cf 91       	pop	r28
    bd0c:	ff 90       	pop	r15
    bd0e:	ef 90       	pop	r14
    bd10:	df 90       	pop	r13
    bd12:	cf 90       	pop	r12
    bd14:	bf 90       	pop	r11
    bd16:	af 90       	pop	r10
    bd18:	9f 90       	pop	r9
    bd1a:	8f 90       	pop	r8
    bd1c:	7f 90       	pop	r7
    bd1e:	6f 90       	pop	r6
    bd20:	5f 90       	pop	r5
    bd22:	4f 90       	pop	r4
    bd24:	08 95       	ret

0000bd26 <tc_init>:
    bd26:	cf 93       	push	r28
    bd28:	df 93       	push	r29
    bd2a:	cd b7       	in	r28, 0x3d	; 61
    bd2c:	de b7       	in	r29, 0x3e	; 62
    bd2e:	27 97       	sbiw	r28, 0x07	; 7
    bd30:	cd bf       	out	0x3d, r28	; 61
    bd32:	de bf       	out	0x3e, r29	; 62
    bd34:	20 e0       	ldi	r18, 0x00	; 0
    bd36:	38 e0       	ldi	r19, 0x08	; 8
    bd38:	43 e0       	ldi	r20, 0x03	; 3
    bd3a:	60 e0       	ldi	r22, 0x00	; 0
    bd3c:	ce 01       	movw	r24, r28
    bd3e:	01 96       	adiw	r24, 0x01	; 1
    bd40:	89 da       	rcall	.-2798   	; 0xb254 <pwm_init>
    bd42:	6d e2       	ldi	r22, 0x2D	; 45
    bd44:	ce 01       	movw	r24, r28
    bd46:	01 96       	adiw	r24, 0x01	; 1
    bd48:	4d db       	rcall	.-2406   	; 0xb3e4 <pwm_start>
    bd4a:	6e 81       	ldd	r22, Y+6	; 0x06
    bd4c:	7f 81       	ldd	r23, Y+7	; 0x07
    bd4e:	80 e0       	ldi	r24, 0x00	; 0
    bd50:	90 e0       	ldi	r25, 0x00	; 0
    bd52:	0e 94 ae 76 	call	0xed5c	; 0xed5c <__floatunsisf>
    bd56:	20 e0       	ldi	r18, 0x00	; 0
    bd58:	30 e0       	ldi	r19, 0x00	; 0
    bd5a:	40 ec       	ldi	r20, 0xC0	; 192
    bd5c:	5f e3       	ldi	r21, 0x3F	; 63
    bd5e:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    bd62:	27 e2       	ldi	r18, 0x27	; 39
    bd64:	31 e3       	ldi	r19, 0x31	; 49
    bd66:	40 e5       	ldi	r20, 0x50	; 80
    bd68:	50 e4       	ldi	r21, 0x40	; 64
    bd6a:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    bd6e:	20 e0       	ldi	r18, 0x00	; 0
    bd70:	30 e0       	ldi	r19, 0x00	; 0
    bd72:	40 e0       	ldi	r20, 0x00	; 0
    bd74:	5f e3       	ldi	r21, 0x3F	; 63
    bd76:	0e 94 aa 75 	call	0xeb54	; 0xeb54 <__addsf3>
    bd7a:	0e 94 82 76 	call	0xed04	; 0xed04 <__fixunssfsi>
    bd7e:	60 93 3c 08 	sts	0x083C, r22	; 0x80083c <__TEXT_REGION_LENGTH__+0x70083c>
    bd82:	70 93 3d 08 	sts	0x083D, r23	; 0x80083d <__TEXT_REGION_LENGTH__+0x70083d>
    bd86:	80 e4       	ldi	r24, 0x40	; 64
    bd88:	9a e0       	ldi	r25, 0x0A	; 10
    bd8a:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <tc_enable>
    bd8e:	e0 e4       	ldi	r30, 0x40	; 64
    bd90:	fa e0       	ldi	r31, 0x0A	; 10
    bd92:	81 81       	ldd	r24, Z+1	; 0x01
    bd94:	88 7f       	andi	r24, 0xF8	; 248
    bd96:	81 83       	std	Z+1, r24	; 0x01
    bd98:	80 e7       	ldi	r24, 0x70	; 112
    bd9a:	92 e0       	ldi	r25, 0x02	; 2
    bd9c:	86 a3       	std	Z+38, r24	; 0x26
    bd9e:	97 a3       	std	Z+39, r25	; 0x27
    bda0:	27 96       	adiw	r28, 0x07	; 7
    bda2:	cd bf       	out	0x3d, r28	; 61
    bda4:	de bf       	out	0x3e, r29	; 62
    bda6:	df 91       	pop	r29
    bda8:	cf 91       	pop	r28
    bdaa:	08 95       	ret

0000bdac <tc_start>:
    bdac:	cf 93       	push	r28
    bdae:	df 93       	push	r29
    bdb0:	c0 e0       	ldi	r28, 0x00	; 0
    bdb2:	d8 e0       	ldi	r29, 0x08	; 8
    bdb4:	88 81       	ld	r24, Y
    bdb6:	80 7f       	andi	r24, 0xF0	; 240
    bdb8:	81 60       	ori	r24, 0x01	; 1
    bdba:	88 83       	st	Y, r24
    bdbc:	67 e8       	ldi	r22, 0x87	; 135
    bdbe:	76 e6       	ldi	r23, 0x66	; 102
    bdc0:	80 e0       	ldi	r24, 0x00	; 0
    bdc2:	98 e0       	ldi	r25, 0x08	; 8
    bdc4:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <tc_set_overflow_interrupt_callback>
    bdc8:	8e 81       	ldd	r24, Y+6	; 0x06
    bdca:	8c 7f       	andi	r24, 0xFC	; 252
    bdcc:	8e 83       	std	Y+6, r24	; 0x06
    bdce:	8e 81       	ldd	r24, Y+6	; 0x06
    bdd0:	81 60       	ori	r24, 0x01	; 1
    bdd2:	8e 83       	std	Y+6, r24	; 0x06
    bdd4:	e0 e4       	ldi	r30, 0x40	; 64
    bdd6:	fa e0       	ldi	r31, 0x0A	; 10
    bdd8:	80 81       	ld	r24, Z
    bdda:	80 7f       	andi	r24, 0xF0	; 240
    bddc:	81 60       	ori	r24, 0x01	; 1
    bdde:	80 83       	st	Z, r24
    bde0:	df 91       	pop	r29
    bde2:	cf 91       	pop	r28
    bde4:	08 95       	ret

0000bde6 <dac_init>:
    bde6:	cf 93       	push	r28
    bde8:	df 93       	push	r29
    bdea:	6b e2       	ldi	r22, 0x2B	; 43
    bdec:	75 e2       	ldi	r23, 0x25	; 37
    bdee:	80 e2       	ldi	r24, 0x20	; 32
    bdf0:	93 e0       	ldi	r25, 0x03	; 3
    bdf2:	0e 94 21 48 	call	0x9042	; 0x9042 <dac_read_configuration>
    bdf6:	eb e2       	ldi	r30, 0x2B	; 43
    bdf8:	f5 e2       	ldi	r31, 0x25	; 37
    bdfa:	81 e0       	ldi	r24, 0x01	; 1
    bdfc:	82 83       	std	Z+2, r24	; 0x02
    bdfe:	8c e0       	ldi	r24, 0x0C	; 12
    be00:	80 83       	st	Z, r24
    be02:	81 81       	ldd	r24, Z+1	; 0x01
    be04:	8c 79       	andi	r24, 0x9C	; 156
    be06:	83 64       	ori	r24, 0x43	; 67
    be08:	81 83       	std	Z+1, r24	; 0x01
    be0a:	84 e0       	ldi	r24, 0x04	; 4
    be0c:	83 83       	std	Z+3, r24	; 0x03
    be0e:	bf 01       	movw	r22, r30
    be10:	80 e2       	ldi	r24, 0x20	; 32
    be12:	93 e0       	ldi	r25, 0x03	; 3
    be14:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <dac_write_configuration>
    be18:	62 e3       	ldi	r22, 0x32	; 50
    be1a:	70 e0       	ldi	r23, 0x00	; 0
    be1c:	82 e0       	ldi	r24, 0x02	; 2
    be1e:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    be22:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    be26:	63 e3       	ldi	r22, 0x33	; 51
    be28:	70 e0       	ldi	r23, 0x00	; 0
    be2a:	82 e0       	ldi	r24, 0x02	; 2
    be2c:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    be30:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    be34:	66 e3       	ldi	r22, 0x36	; 54
    be36:	70 e0       	ldi	r23, 0x00	; 0
    be38:	82 e0       	ldi	r24, 0x02	; 2
    be3a:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    be3e:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    be42:	67 e3       	ldi	r22, 0x37	; 55
    be44:	70 e0       	ldi	r23, 0x00	; 0
    be46:	82 e0       	ldi	r24, 0x02	; 2
    be48:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    be4c:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
    be50:	a0 e2       	ldi	r26, 0x20	; 32
    be52:	b5 e2       	ldi	r27, 0x25	; 37
    be54:	8b e0       	ldi	r24, 0x0B	; 11
    be56:	ed 01       	movw	r28, r26
    be58:	e8 2f       	mov	r30, r24
    be5a:	19 92       	st	Y+, r1
    be5c:	ea 95       	dec	r30
    be5e:	e9 f7       	brne	.-6      	; 0xbe5a <dac_init+0x74>
    be60:	e5 e1       	ldi	r30, 0x15	; 21
    be62:	f5 e2       	ldi	r31, 0x25	; 37
    be64:	ef 01       	movw	r28, r30
    be66:	19 92       	st	Y+, r1
    be68:	8a 95       	dec	r24
    be6a:	e9 f7       	brne	.-6      	; 0xbe66 <dac_init+0x80>
    be6c:	80 e2       	ldi	r24, 0x20	; 32
    be6e:	90 e0       	ldi	r25, 0x00	; 0
    be70:	14 96       	adiw	r26, 0x04	; 4
    be72:	8d 93       	st	X+, r24
    be74:	9c 93       	st	X, r25
    be76:	15 97       	sbiw	r26, 0x05	; 5
    be78:	84 83       	std	Z+4, r24	; 0x04
    be7a:	95 83       	std	Z+5, r25	; 0x05
    be7c:	89 ec       	ldi	r24, 0xC9	; 201
    be7e:	94 e2       	ldi	r25, 0x24	; 36
    be80:	17 96       	adiw	r26, 0x07	; 7
    be82:	8d 93       	st	X+, r24
    be84:	9c 93       	st	X, r25
    be86:	18 97       	sbiw	r26, 0x08	; 8
    be88:	29 ed       	ldi	r18, 0xD9	; 217
    be8a:	12 96       	adiw	r26, 0x02	; 2
    be8c:	2c 93       	st	X, r18
    be8e:	12 97       	sbiw	r26, 0x02	; 2
    be90:	88 e3       	ldi	r24, 0x38	; 56
    be92:	93 e0       	ldi	r25, 0x03	; 3
    be94:	19 96       	adiw	r26, 0x09	; 9
    be96:	8d 93       	st	X+, r24
    be98:	9c 93       	st	X, r25
    be9a:	1a 97       	sbiw	r26, 0x0a	; 10
    be9c:	49 ee       	ldi	r20, 0xE9	; 233
    be9e:	54 e2       	ldi	r21, 0x24	; 36
    bea0:	47 83       	std	Z+7, r20	; 0x07
    bea2:	50 87       	std	Z+8, r21	; 0x08
    bea4:	22 83       	std	Z+2, r18	; 0x02
    bea6:	81 87       	std	Z+9, r24	; 0x09
    bea8:	92 87       	std	Z+10, r25	; 0x0a
    beaa:	95 e2       	ldi	r25, 0x25	; 37
    beac:	13 96       	adiw	r26, 0x03	; 3
    beae:	9c 93       	st	X, r25
    beb0:	13 97       	sbiw	r26, 0x03	; 3
    beb2:	86 e0       	ldi	r24, 0x06	; 6
    beb4:	8c 93       	st	X, r24
    beb6:	93 83       	std	Z+3, r25	; 0x03
    beb8:	80 83       	st	Z, r24
    beba:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <rtc_get_time>
    bebe:	d8 dc       	rcall	.-1616   	; 0xb870 <task_dac>
    bec0:	df 91       	pop	r29
    bec2:	cf 91       	pop	r28
    bec4:	08 95       	ret

0000bec6 <calc_next_frame>:
    bec6:	8f 92       	push	r8
    bec8:	9f 92       	push	r9
    beca:	af 92       	push	r10
    becc:	bf 92       	push	r11
    bece:	cf 92       	push	r12
    bed0:	df 92       	push	r13
    bed2:	ef 92       	push	r14
    bed4:	ff 92       	push	r15
    bed6:	0f 93       	push	r16
    bed8:	1f 93       	push	r17
    beda:	cf 93       	push	r28
    bedc:	df 93       	push	r29
    bede:	6b 01       	movw	r12, r22
    bee0:	5a 01       	movw	r10, r20
    bee2:	79 01       	movw	r14, r18
    bee4:	48 01       	movw	r8, r16
    bee6:	ec 01       	movw	r28, r24
    bee8:	8c 01       	movw	r16, r24
    beea:	00 5e       	subi	r16, 0xE0	; 224
    beec:	1f 4f       	sbci	r17, 0xFF	; 255
    beee:	f6 01       	movw	r30, r12
    bef0:	82 81       	ldd	r24, Z+2	; 0x02
    bef2:	93 81       	ldd	r25, Z+3	; 0x03
    bef4:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <get_interpolated_sine>
    bef8:	88 83       	st	Y, r24
    befa:	99 83       	std	Y+1, r25	; 0x01
    befc:	f7 01       	movw	r30, r14
    befe:	82 81       	ldd	r24, Z+2	; 0x02
    bf00:	93 81       	ldd	r25, Z+3	; 0x03
    bf02:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <get_interpolated_sine>
    bf06:	8a 83       	std	Y+2, r24	; 0x02
    bf08:	9b 83       	std	Y+3, r25	; 0x03
    bf0a:	f6 01       	movw	r30, r12
    bf0c:	40 81       	ld	r20, Z
    bf0e:	51 81       	ldd	r21, Z+1	; 0x01
    bf10:	62 81       	ldd	r22, Z+2	; 0x02
    bf12:	73 81       	ldd	r23, Z+3	; 0x03
    bf14:	f5 01       	movw	r30, r10
    bf16:	80 81       	ld	r24, Z
    bf18:	91 81       	ldd	r25, Z+1	; 0x01
    bf1a:	a2 81       	ldd	r26, Z+2	; 0x02
    bf1c:	b3 81       	ldd	r27, Z+3	; 0x03
    bf1e:	84 0f       	add	r24, r20
    bf20:	95 1f       	adc	r25, r21
    bf22:	a6 1f       	adc	r26, r22
    bf24:	b7 1f       	adc	r27, r23
    bf26:	f6 01       	movw	r30, r12
    bf28:	80 83       	st	Z, r24
    bf2a:	91 83       	std	Z+1, r25	; 0x01
    bf2c:	a2 83       	std	Z+2, r26	; 0x02
    bf2e:	b3 83       	std	Z+3, r27	; 0x03
    bf30:	f7 01       	movw	r30, r14
    bf32:	40 81       	ld	r20, Z
    bf34:	51 81       	ldd	r21, Z+1	; 0x01
    bf36:	62 81       	ldd	r22, Z+2	; 0x02
    bf38:	73 81       	ldd	r23, Z+3	; 0x03
    bf3a:	f4 01       	movw	r30, r8
    bf3c:	80 81       	ld	r24, Z
    bf3e:	91 81       	ldd	r25, Z+1	; 0x01
    bf40:	a2 81       	ldd	r26, Z+2	; 0x02
    bf42:	b3 81       	ldd	r27, Z+3	; 0x03
    bf44:	84 0f       	add	r24, r20
    bf46:	95 1f       	adc	r25, r21
    bf48:	a6 1f       	adc	r26, r22
    bf4a:	b7 1f       	adc	r27, r23
    bf4c:	f7 01       	movw	r30, r14
    bf4e:	80 83       	st	Z, r24
    bf50:	91 83       	std	Z+1, r25	; 0x01
    bf52:	a2 83       	std	Z+2, r26	; 0x02
    bf54:	b3 83       	std	Z+3, r27	; 0x03
    bf56:	24 96       	adiw	r28, 0x04	; 4
    bf58:	c0 17       	cp	r28, r16
    bf5a:	d1 07       	cpc	r29, r17
    bf5c:	41 f6       	brne	.-112    	; 0xbeee <calc_next_frame+0x28>
    bf5e:	df 91       	pop	r29
    bf60:	cf 91       	pop	r28
    bf62:	1f 91       	pop	r17
    bf64:	0f 91       	pop	r16
    bf66:	ff 90       	pop	r15
    bf68:	ef 90       	pop	r14
    bf6a:	df 90       	pop	r13
    bf6c:	cf 90       	pop	r12
    bf6e:	bf 90       	pop	r11
    bf70:	af 90       	pop	r10
    bf72:	9f 90       	pop	r9
    bf74:	8f 90       	pop	r8
    bf76:	08 95       	ret

0000bf78 <dac_start>:
    bf78:	ff 92       	push	r15
    bf7a:	0f 93       	push	r16
    bf7c:	1f 93       	push	r17
    bf7e:	cf 93       	push	r28
    bf80:	df 93       	push	r29
    bf82:	00 d0       	rcall	.+0      	; 0xbf84 <dac_start+0xc>
    bf84:	1f 92       	push	r1
    bf86:	cd b7       	in	r28, 0x3d	; 61
    bf88:	de b7       	in	r29, 0x3e	; 62
    bf8a:	80 e2       	ldi	r24, 0x20	; 32
    bf8c:	93 e0       	ldi	r25, 0x03	; 3
    bf8e:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <dac_enable>
    bf92:	0e 94 1c 24 	call	0x4838	; 0x4838 <dma_enable>
    bf96:	6e e4       	ldi	r22, 0x4E	; 78
    bf98:	70 e6       	ldi	r23, 0x60	; 96
    bf9a:	80 e0       	ldi	r24, 0x00	; 0
    bf9c:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <dma_set_callback>
    bfa0:	e0 e2       	ldi	r30, 0x20	; 32
    bfa2:	f5 e2       	ldi	r31, 0x25	; 37
    bfa4:	81 81       	ldd	r24, Z+1	; 0x01
    bfa6:	80 7f       	andi	r24, 0xF0	; 240
    bfa8:	8a 60       	ori	r24, 0x0A	; 10
    bfaa:	81 83       	std	Z+1, r24	; 0x01
    bfac:	6b e2       	ldi	r22, 0x2B	; 43
    bfae:	70 e6       	ldi	r23, 0x60	; 96
    bfb0:	81 e0       	ldi	r24, 0x01	; 1
    bfb2:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <dma_set_callback>
    bfb6:	e5 e1       	ldi	r30, 0x15	; 21
    bfb8:	f5 e2       	ldi	r31, 0x25	; 37
    bfba:	81 81       	ldd	r24, Z+1	; 0x01
    bfbc:	80 7f       	andi	r24, 0xF0	; 240
    bfbe:	8a 60       	ori	r24, 0x0A	; 10
    bfc0:	81 83       	std	Z+1, r24	; 0x01
    bfc2:	8f b7       	in	r24, 0x3f	; 63
    bfc4:	8a 83       	std	Y+2, r24	; 0x02
    bfc6:	f8 94       	cli
    bfc8:	9a 81       	ldd	r25, Y+2	; 0x02
    bfca:	e0 e0       	ldi	r30, 0x00	; 0
    bfcc:	f1 e0       	ldi	r31, 0x01	; 1
    bfce:	80 81       	ld	r24, Z
    bfd0:	8c 7f       	andi	r24, 0xFC	; 252
    bfd2:	82 60       	ori	r24, 0x02	; 2
    bfd4:	80 83       	st	Z, r24
    bfd6:	9f bf       	out	0x3f, r25	; 63
    bfd8:	8f b7       	in	r24, 0x3f	; 63
    bfda:	89 83       	std	Y+1, r24	; 0x01
    bfdc:	f8 94       	cli
    bfde:	99 81       	ldd	r25, Y+1	; 0x01
    bfe0:	80 81       	ld	r24, Z
    bfe2:	83 7f       	andi	r24, 0xF3	; 243
    bfe4:	84 60       	ori	r24, 0x04	; 4
    bfe6:	80 83       	st	Z, r24
    bfe8:	9f bf       	out	0x3f, r25	; 63
    bfea:	60 e2       	ldi	r22, 0x20	; 32
    bfec:	75 e2       	ldi	r23, 0x25	; 37
    bfee:	80 e0       	ldi	r24, 0x00	; 0
    bff0:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <dma_channel_write_config>
    bff4:	65 e1       	ldi	r22, 0x15	; 21
    bff6:	75 e2       	ldi	r23, 0x25	; 37
    bff8:	81 e0       	ldi	r24, 0x01	; 1
    bffa:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <dma_channel_write_config>
    bffe:	8f b7       	in	r24, 0x3f	; 63
    c000:	8b 83       	std	Y+3, r24	; 0x03
    c002:	f8 94       	cli
    c004:	fb 80       	ldd	r15, Y+3	; 0x03
    c006:	09 e0       	ldi	r16, 0x09	; 9
    c008:	15 e2       	ldi	r17, 0x25	; 37
    c00a:	2b e0       	ldi	r18, 0x0B	; 11
    c00c:	30 e2       	ldi	r19, 0x20	; 32
    c00e:	41 e1       	ldi	r20, 0x11	; 17
    c010:	55 e2       	ldi	r21, 0x25	; 37
    c012:	6d e0       	ldi	r22, 0x0D	; 13
    c014:	75 e2       	ldi	r23, 0x25	; 37
    c016:	89 ec       	ldi	r24, 0xC9	; 201
    c018:	94 e2       	ldi	r25, 0x24	; 36
    c01a:	55 df       	rcall	.-342    	; 0xbec6 <calc_next_frame>
    c01c:	2b e0       	ldi	r18, 0x0B	; 11
    c01e:	30 e2       	ldi	r19, 0x20	; 32
    c020:	41 e1       	ldi	r20, 0x11	; 17
    c022:	55 e2       	ldi	r21, 0x25	; 37
    c024:	6d e0       	ldi	r22, 0x0D	; 13
    c026:	75 e2       	ldi	r23, 0x25	; 37
    c028:	89 ee       	ldi	r24, 0xE9	; 233
    c02a:	94 e2       	ldi	r25, 0x24	; 36
    c02c:	4c df       	rcall	.-360    	; 0xbec6 <calc_next_frame>
    c02e:	8f b7       	in	r24, 0x3f	; 63
    c030:	8c 83       	std	Y+4, r24	; 0x04
    c032:	f8 94       	cli
    c034:	9c 81       	ldd	r25, Y+4	; 0x04
    c036:	e0 e1       	ldi	r30, 0x10	; 16
    c038:	f1 e0       	ldi	r31, 0x01	; 1
    c03a:	80 81       	ld	r24, Z
    c03c:	80 68       	ori	r24, 0x80	; 128
    c03e:	80 83       	st	Z, r24
    c040:	9f bf       	out	0x3f, r25	; 63
    c042:	ff be       	out	0x3f, r15	; 63
    c044:	24 96       	adiw	r28, 0x04	; 4
    c046:	cd bf       	out	0x3d, r28	; 61
    c048:	de bf       	out	0x3e, r29	; 62
    c04a:	df 91       	pop	r29
    c04c:	cf 91       	pop	r28
    c04e:	1f 91       	pop	r17
    c050:	0f 91       	pop	r16
    c052:	ff 90       	pop	r15
    c054:	08 95       	ret

0000c056 <isr_dma_dac_ch0_B>:
    c056:	0f 93       	push	r16
    c058:	1f 93       	push	r17
    c05a:	cf 93       	push	r28
    c05c:	df 93       	push	r29
    c05e:	1f 92       	push	r1
    c060:	cd b7       	in	r28, 0x3d	; 61
    c062:	de b7       	in	r29, 0x3e	; 62
    c064:	8f b7       	in	r24, 0x3f	; 63
    c066:	89 83       	std	Y+1, r24	; 0x01
    c068:	f8 94       	cli
    c06a:	99 81       	ldd	r25, Y+1	; 0x01
    c06c:	e0 e1       	ldi	r30, 0x10	; 16
    c06e:	f1 e0       	ldi	r31, 0x01	; 1
    c070:	80 81       	ld	r24, Z
    c072:	80 68       	ori	r24, 0x80	; 128
    c074:	80 83       	st	Z, r24
    c076:	9f bf       	out	0x3f, r25	; 63
    c078:	78 94       	sei
    c07a:	09 e0       	ldi	r16, 0x09	; 9
    c07c:	15 e2       	ldi	r17, 0x25	; 37
    c07e:	2b e0       	ldi	r18, 0x0B	; 11
    c080:	30 e2       	ldi	r19, 0x20	; 32
    c082:	41 e1       	ldi	r20, 0x11	; 17
    c084:	55 e2       	ldi	r21, 0x25	; 37
    c086:	6d e0       	ldi	r22, 0x0D	; 13
    c088:	75 e2       	ldi	r23, 0x25	; 37
    c08a:	89 ee       	ldi	r24, 0xE9	; 233
    c08c:	94 e2       	ldi	r25, 0x24	; 36
    c08e:	1b df       	rcall	.-458    	; 0xbec6 <calc_next_frame>
    c090:	0f 90       	pop	r0
    c092:	df 91       	pop	r29
    c094:	cf 91       	pop	r28
    c096:	1f 91       	pop	r17
    c098:	0f 91       	pop	r16
    c09a:	08 95       	ret

0000c09c <isr_dma_dac_ch0_A>:
    c09c:	0f 93       	push	r16
    c09e:	1f 93       	push	r17
    c0a0:	cf 93       	push	r28
    c0a2:	df 93       	push	r29
    c0a4:	1f 92       	push	r1
    c0a6:	cd b7       	in	r28, 0x3d	; 61
    c0a8:	de b7       	in	r29, 0x3e	; 62
    c0aa:	8f b7       	in	r24, 0x3f	; 63
    c0ac:	89 83       	std	Y+1, r24	; 0x01
    c0ae:	f8 94       	cli
    c0b0:	99 81       	ldd	r25, Y+1	; 0x01
    c0b2:	e0 e2       	ldi	r30, 0x20	; 32
    c0b4:	f1 e0       	ldi	r31, 0x01	; 1
    c0b6:	80 81       	ld	r24, Z
    c0b8:	80 68       	ori	r24, 0x80	; 128
    c0ba:	80 83       	st	Z, r24
    c0bc:	9f bf       	out	0x3f, r25	; 63
    c0be:	78 94       	sei
    c0c0:	09 e0       	ldi	r16, 0x09	; 9
    c0c2:	15 e2       	ldi	r17, 0x25	; 37
    c0c4:	2b e0       	ldi	r18, 0x0B	; 11
    c0c6:	30 e2       	ldi	r19, 0x20	; 32
    c0c8:	41 e1       	ldi	r20, 0x11	; 17
    c0ca:	55 e2       	ldi	r21, 0x25	; 37
    c0cc:	6d e0       	ldi	r22, 0x0D	; 13
    c0ce:	75 e2       	ldi	r23, 0x25	; 37
    c0d0:	89 ec       	ldi	r24, 0xC9	; 201
    c0d2:	94 e2       	ldi	r25, 0x24	; 36
    c0d4:	f8 de       	rcall	.-528    	; 0xbec6 <calc_next_frame>
    c0d6:	0f 90       	pop	r0
    c0d8:	df 91       	pop	r29
    c0da:	cf 91       	pop	r28
    c0dc:	1f 91       	pop	r17
    c0de:	0f 91       	pop	r16
    c0e0:	08 95       	ret

0000c0e2 <adc_init>:
    c0e2:	8f 92       	push	r8
    c0e4:	9f 92       	push	r9
    c0e6:	af 92       	push	r10
    c0e8:	bf 92       	push	r11
    c0ea:	cf 92       	push	r12
    c0ec:	df 92       	push	r13
    c0ee:	ef 92       	push	r14
    c0f0:	ff 92       	push	r15
    c0f2:	0f 93       	push	r16
    c0f4:	1f 93       	push	r17
    c0f6:	cf 93       	push	r28
    c0f8:	df 93       	push	r29
    c0fa:	e0 e1       	ldi	r30, 0x10	; 16
    c0fc:	f6 e0       	ldi	r31, 0x06	; 6
    c0fe:	80 81       	ld	r24, Z
    c100:	87 60       	ori	r24, 0x07	; 7
    c102:	80 83       	st	Z, r24
    c104:	e1 e1       	ldi	r30, 0x11	; 17
    c106:	f6 e0       	ldi	r31, 0x06	; 6
    c108:	80 81       	ld	r24, Z
    c10a:	87 60       	ori	r24, 0x07	; 7
    c10c:	80 83       	st	Z, r24
    c10e:	e2 e1       	ldi	r30, 0x12	; 18
    c110:	f6 e0       	ldi	r31, 0x06	; 6
    c112:	80 81       	ld	r24, Z
    c114:	87 60       	ori	r24, 0x07	; 7
    c116:	80 83       	st	Z, r24
    c118:	e3 e1       	ldi	r30, 0x13	; 19
    c11a:	f6 e0       	ldi	r31, 0x06	; 6
    c11c:	80 81       	ld	r24, Z
    c11e:	87 60       	ori	r24, 0x07	; 7
    c120:	80 83       	st	Z, r24
    c122:	e4 e1       	ldi	r30, 0x14	; 20
    c124:	f6 e0       	ldi	r31, 0x06	; 6
    c126:	80 81       	ld	r24, Z
    c128:	87 60       	ori	r24, 0x07	; 7
    c12a:	80 83       	st	Z, r24
    c12c:	e5 e1       	ldi	r30, 0x15	; 21
    c12e:	f6 e0       	ldi	r31, 0x06	; 6
    c130:	80 81       	ld	r24, Z
    c132:	87 60       	ori	r24, 0x07	; 7
    c134:	80 83       	st	Z, r24
    c136:	e2 e3       	ldi	r30, 0x32	; 50
    c138:	f6 e0       	ldi	r31, 0x06	; 6
    c13a:	80 81       	ld	r24, Z
    c13c:	87 60       	ori	r24, 0x07	; 7
    c13e:	80 83       	st	Z, r24
    c140:	e3 e3       	ldi	r30, 0x33	; 51
    c142:	f6 e0       	ldi	r31, 0x06	; 6
    c144:	80 81       	ld	r24, Z
    c146:	87 60       	ori	r24, 0x07	; 7
    c148:	80 83       	st	Z, r24
    c14a:	63 ef       	ldi	r22, 0xF3	; 243
    c14c:	76 e2       	ldi	r23, 0x26	; 38
    c14e:	80 e0       	ldi	r24, 0x00	; 0
    c150:	92 e0       	ldi	r25, 0x02	; 2
    c152:	0e 94 85 46 	call	0x8d0a	; 0x8d0a <adc_read_configuration>
    c156:	4f ee       	ldi	r20, 0xEF	; 239
    c158:	56 e2       	ldi	r21, 0x26	; 38
    c15a:	61 e0       	ldi	r22, 0x01	; 1
    c15c:	80 e0       	ldi	r24, 0x00	; 0
    c15e:	92 e0       	ldi	r25, 0x02	; 2
    c160:	0e 94 09 47 	call	0x8e12	; 0x8e12 <adcch_read_configuration>
    c164:	4b ee       	ldi	r20, 0xEB	; 235
    c166:	56 e2       	ldi	r21, 0x26	; 38
    c168:	62 e0       	ldi	r22, 0x02	; 2
    c16a:	80 e0       	ldi	r24, 0x00	; 0
    c16c:	92 e0       	ldi	r25, 0x02	; 2
    c16e:	0e 94 09 47 	call	0x8e12	; 0x8e12 <adcch_read_configuration>
    c172:	47 ee       	ldi	r20, 0xE7	; 231
    c174:	56 e2       	ldi	r21, 0x26	; 38
    c176:	64 e0       	ldi	r22, 0x04	; 4
    c178:	80 e0       	ldi	r24, 0x00	; 0
    c17a:	92 e0       	ldi	r25, 0x02	; 2
    c17c:	0e 94 09 47 	call	0x8e12	; 0x8e12 <adcch_read_configuration>
    c180:	43 ee       	ldi	r20, 0xE3	; 227
    c182:	56 e2       	ldi	r21, 0x26	; 38
    c184:	68 e0       	ldi	r22, 0x08	; 8
    c186:	80 e0       	ldi	r24, 0x00	; 0
    c188:	92 e0       	ldi	r25, 0x02	; 2
    c18a:	0e 94 09 47 	call	0x8e12	; 0x8e12 <adcch_read_configuration>
    c18e:	6c ed       	ldi	r22, 0xDC	; 220
    c190:	76 e2       	ldi	r23, 0x26	; 38
    c192:	80 e4       	ldi	r24, 0x40	; 64
    c194:	92 e0       	ldi	r25, 0x02	; 2
    c196:	0e 94 85 46 	call	0x8d0a	; 0x8d0a <adc_read_configuration>
    c19a:	48 ed       	ldi	r20, 0xD8	; 216
    c19c:	56 e2       	ldi	r21, 0x26	; 38
    c19e:	61 e0       	ldi	r22, 0x01	; 1
    c1a0:	80 e4       	ldi	r24, 0x40	; 64
    c1a2:	92 e0       	ldi	r25, 0x02	; 2
    c1a4:	0e 94 09 47 	call	0x8e12	; 0x8e12 <adcch_read_configuration>
    c1a8:	a3 ef       	ldi	r26, 0xF3	; 243
    c1aa:	b6 e2       	ldi	r27, 0x26	; 38
    c1ac:	83 e0       	ldi	r24, 0x03	; 3
    c1ae:	14 96       	adiw	r26, 0x04	; 4
    c1b0:	8c 93       	st	X, r24
    c1b2:	14 97       	sbiw	r26, 0x04	; 4
    c1b4:	ec ed       	ldi	r30, 0xDC	; 220
    c1b6:	f6 e2       	ldi	r31, 0x26	; 38
    c1b8:	87 e0       	ldi	r24, 0x07	; 7
    c1ba:	84 83       	std	Z+4, r24	; 0x04
    c1bc:	12 96       	adiw	r26, 0x02	; 2
    c1be:	3c 91       	ld	r19, X
    c1c0:	12 97       	sbiw	r26, 0x02	; 2
    c1c2:	22 81       	ldd	r18, Z+2	; 0x02
    c1c4:	11 96       	adiw	r26, 0x01	; 1
    c1c6:	9c 91       	ld	r25, X
    c1c8:	11 97       	sbiw	r26, 0x01	; 1
    c1ca:	81 81       	ldd	r24, Z+1	; 0x01
    c1cc:	0f 2e       	mov	r0, r31
    c1ce:	ff ee       	ldi	r31, 0xEF	; 239
    c1d0:	8f 2e       	mov	r8, r31
    c1d2:	f6 e2       	ldi	r31, 0x26	; 38
    c1d4:	9f 2e       	mov	r9, r31
    c1d6:	f0 2d       	mov	r31, r0
    c1d8:	41 e0       	ldi	r20, 0x01	; 1
    c1da:	e4 01       	movw	r28, r8
    c1dc:	48 83       	st	Y, r20
    c1de:	58 e0       	ldi	r21, 0x08	; 8
    c1e0:	59 83       	std	Y+1, r21	; 0x01
    c1e2:	0f 2e       	mov	r0, r31
    c1e4:	fb ee       	ldi	r31, 0xEB	; 235
    c1e6:	af 2e       	mov	r10, r31
    c1e8:	f6 e2       	ldi	r31, 0x26	; 38
    c1ea:	bf 2e       	mov	r11, r31
    c1ec:	f0 2d       	mov	r31, r0
    c1ee:	e5 01       	movw	r28, r10
    c1f0:	48 83       	st	Y, r20
    c1f2:	60 e2       	ldi	r22, 0x20	; 32
    c1f4:	69 83       	std	Y+1, r22	; 0x01
    c1f6:	0f 2e       	mov	r0, r31
    c1f8:	f7 ee       	ldi	r31, 0xE7	; 231
    c1fa:	cf 2e       	mov	r12, r31
    c1fc:	f6 e2       	ldi	r31, 0x26	; 38
    c1fe:	df 2e       	mov	r13, r31
    c200:	f0 2d       	mov	r31, r0
    c202:	e6 01       	movw	r28, r12
    c204:	48 83       	st	Y, r20
    c206:	68 e2       	ldi	r22, 0x28	; 40
    c208:	69 83       	std	Y+1, r22	; 0x01
    c20a:	0f 2e       	mov	r0, r31
    c20c:	f3 ee       	ldi	r31, 0xE3	; 227
    c20e:	ef 2e       	mov	r14, r31
    c210:	f6 e2       	ldi	r31, 0x26	; 38
    c212:	ff 2e       	mov	r15, r31
    c214:	f0 2d       	mov	r31, r0
    c216:	e7 01       	movw	r28, r14
    c218:	18 82       	st	Y, r1
    c21a:	59 83       	std	Y+1, r21	; 0x01
    c21c:	08 ed       	ldi	r16, 0xD8	; 216
    c21e:	16 e2       	ldi	r17, 0x26	; 38
    c220:	e8 01       	movw	r28, r16
    c222:	18 82       	st	Y, r1
    c224:	19 82       	std	Y+1, r1	; 0x01
    c226:	3e 78       	andi	r19, 0x8E	; 142
    c228:	32 62       	ori	r19, 0x22	; 34
    c22a:	12 96       	adiw	r26, 0x02	; 2
    c22c:	3c 93       	st	X, r19
    c22e:	12 97       	sbiw	r26, 0x02	; 2
    c230:	2f 78       	andi	r18, 0x8F	; 143
    c232:	23 60       	ori	r18, 0x03	; 3
    c234:	22 83       	std	Z+2, r18	; 0x02
    c236:	22 e0       	ldi	r18, 0x02	; 2
    c238:	e4 01       	movw	r28, r8
    c23a:	2b 83       	std	Y+3, r18	; 0x03
    c23c:	91 70       	andi	r25, 0x01	; 1
    c23e:	90 64       	ori	r25, 0x40	; 64
    c240:	11 96       	adiw	r26, 0x01	; 1
    c242:	9c 93       	st	X, r25
    c244:	11 97       	sbiw	r26, 0x01	; 1
    c246:	9c e0       	ldi	r25, 0x0C	; 12
    c248:	13 96       	adiw	r26, 0x03	; 3
    c24a:	9c 93       	st	X, r25
    c24c:	81 70       	andi	r24, 0x01	; 1
    c24e:	80 66       	ori	r24, 0x60	; 96
    c250:	81 83       	std	Z+1, r24	; 0x01
    c252:	43 83       	std	Z+3, r20	; 0x03
    c254:	67 e4       	ldi	r22, 0x47	; 71
    c256:	7a e5       	ldi	r23, 0x5A	; 90
    c258:	80 e0       	ldi	r24, 0x00	; 0
    c25a:	92 e0       	ldi	r25, 0x02	; 2
    c25c:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <adc_set_callback>
    c260:	6e ee       	ldi	r22, 0xEE	; 238
    c262:	7b e5       	ldi	r23, 0x5B	; 91
    c264:	80 e4       	ldi	r24, 0x40	; 64
    c266:	92 e0       	ldi	r25, 0x02	; 2
    c268:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <adc_set_callback>
    c26c:	f5 01       	movw	r30, r10
    c26e:	32 81       	ldd	r19, Z+2	; 0x02
    c270:	e6 01       	movw	r28, r12
    c272:	2a 81       	ldd	r18, Y+2	; 0x02
    c274:	f7 01       	movw	r30, r14
    c276:	92 81       	ldd	r25, Z+2	; 0x02
    c278:	e8 01       	movw	r28, r16
    c27a:	8a 81       	ldd	r24, Y+2	; 0x02
    c27c:	f4 01       	movw	r30, r8
    c27e:	42 81       	ldd	r20, Z+2	; 0x02
    c280:	40 7f       	andi	r20, 0xF0	; 240
    c282:	41 60       	ori	r20, 0x01	; 1
    c284:	42 83       	std	Z+2, r20	; 0x02
    c286:	30 7f       	andi	r19, 0xF0	; 240
    c288:	31 60       	ori	r19, 0x01	; 1
    c28a:	e5 01       	movw	r28, r10
    c28c:	3a 83       	std	Y+2, r19	; 0x02
    c28e:	20 7f       	andi	r18, 0xF0	; 240
    c290:	21 60       	ori	r18, 0x01	; 1
    c292:	f6 01       	movw	r30, r12
    c294:	22 83       	std	Z+2, r18	; 0x02
    c296:	90 7f       	andi	r25, 0xF0	; 240
    c298:	91 60       	ori	r25, 0x01	; 1
    c29a:	e7 01       	movw	r28, r14
    c29c:	9a 83       	std	Y+2, r25	; 0x02
    c29e:	80 7f       	andi	r24, 0xF0	; 240
    c2a0:	81 60       	ori	r24, 0x01	; 1
    c2a2:	f8 01       	movw	r30, r16
    c2a4:	82 83       	std	Z+2, r24	; 0x02
    c2a6:	63 ef       	ldi	r22, 0xF3	; 243
    c2a8:	76 e2       	ldi	r23, 0x26	; 38
    c2aa:	80 e0       	ldi	r24, 0x00	; 0
    c2ac:	92 e0       	ldi	r25, 0x02	; 2
    c2ae:	0e 94 1b 46 	call	0x8c36	; 0x8c36 <adc_write_configuration>
    c2b2:	a4 01       	movw	r20, r8
    c2b4:	61 e0       	ldi	r22, 0x01	; 1
    c2b6:	80 e0       	ldi	r24, 0x00	; 0
    c2b8:	92 e0       	ldi	r25, 0x02	; 2
    c2ba:	0e 94 be 46 	call	0x8d7c	; 0x8d7c <adcch_write_configuration>
    c2be:	a5 01       	movw	r20, r10
    c2c0:	62 e0       	ldi	r22, 0x02	; 2
    c2c2:	80 e0       	ldi	r24, 0x00	; 0
    c2c4:	92 e0       	ldi	r25, 0x02	; 2
    c2c6:	0e 94 be 46 	call	0x8d7c	; 0x8d7c <adcch_write_configuration>
    c2ca:	a6 01       	movw	r20, r12
    c2cc:	64 e0       	ldi	r22, 0x04	; 4
    c2ce:	80 e0       	ldi	r24, 0x00	; 0
    c2d0:	92 e0       	ldi	r25, 0x02	; 2
    c2d2:	0e 94 be 46 	call	0x8d7c	; 0x8d7c <adcch_write_configuration>
    c2d6:	a7 01       	movw	r20, r14
    c2d8:	68 e0       	ldi	r22, 0x08	; 8
    c2da:	80 e0       	ldi	r24, 0x00	; 0
    c2dc:	92 e0       	ldi	r25, 0x02	; 2
    c2de:	0e 94 be 46 	call	0x8d7c	; 0x8d7c <adcch_write_configuration>
    c2e2:	6c ed       	ldi	r22, 0xDC	; 220
    c2e4:	76 e2       	ldi	r23, 0x26	; 38
    c2e6:	80 e4       	ldi	r24, 0x40	; 64
    c2e8:	92 e0       	ldi	r25, 0x02	; 2
    c2ea:	0e 94 1b 46 	call	0x8c36	; 0x8c36 <adc_write_configuration>
    c2ee:	a8 01       	movw	r20, r16
    c2f0:	61 e0       	ldi	r22, 0x01	; 1
    c2f2:	80 e4       	ldi	r24, 0x40	; 64
    c2f4:	92 e0       	ldi	r25, 0x02	; 2
    c2f6:	0e 94 be 46 	call	0x8d7c	; 0x8d7c <adcch_write_configuration>
    c2fa:	61 e2       	ldi	r22, 0x21	; 33
    c2fc:	70 e0       	ldi	r23, 0x00	; 0
    c2fe:	82 e0       	ldi	r24, 0x02	; 2
    c300:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    c304:	c8 2f       	mov	r28, r24
    c306:	d0 e0       	ldi	r29, 0x00	; 0
    c308:	dc 2f       	mov	r29, r28
    c30a:	cc 27       	eor	r28, r28
    c30c:	60 e2       	ldi	r22, 0x20	; 32
    c30e:	70 e0       	ldi	r23, 0x00	; 0
    c310:	82 e0       	ldi	r24, 0x02	; 2
    c312:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    c316:	c8 2b       	or	r28, r24
    c318:	c0 93 0c 02 	sts	0x020C, r28	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    c31c:	d0 93 0d 02 	sts	0x020D, r29	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    c320:	65 e2       	ldi	r22, 0x25	; 37
    c322:	70 e0       	ldi	r23, 0x00	; 0
    c324:	82 e0       	ldi	r24, 0x02	; 2
    c326:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    c32a:	c8 2f       	mov	r28, r24
    c32c:	d0 e0       	ldi	r29, 0x00	; 0
    c32e:	dc 2f       	mov	r29, r28
    c330:	cc 27       	eor	r28, r28
    c332:	64 e2       	ldi	r22, 0x24	; 36
    c334:	70 e0       	ldi	r23, 0x00	; 0
    c336:	82 e0       	ldi	r24, 0x02	; 2
    c338:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
    c33c:	c8 2b       	or	r28, r24
    c33e:	c0 93 4c 02 	sts	0x024C, r28	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
    c342:	d0 93 4d 02 	sts	0x024D, r29	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
    c346:	df 91       	pop	r29
    c348:	cf 91       	pop	r28
    c34a:	1f 91       	pop	r17
    c34c:	0f 91       	pop	r16
    c34e:	ff 90       	pop	r15
    c350:	ef 90       	pop	r14
    c352:	df 90       	pop	r13
    c354:	cf 90       	pop	r12
    c356:	bf 90       	pop	r11
    c358:	af 90       	pop	r10
    c35a:	9f 90       	pop	r9
    c35c:	8f 90       	pop	r8
    c35e:	08 95       	ret

0000c360 <myStringToVar>:
    c360:	2f 92       	push	r2
    c362:	3f 92       	push	r3
    c364:	4f 92       	push	r4
    c366:	5f 92       	push	r5
    c368:	6f 92       	push	r6
    c36a:	7f 92       	push	r7
    c36c:	8f 92       	push	r8
    c36e:	9f 92       	push	r9
    c370:	af 92       	push	r10
    c372:	bf 92       	push	r11
    c374:	cf 92       	push	r12
    c376:	df 92       	push	r13
    c378:	ef 92       	push	r14
    c37a:	ff 92       	push	r15
    c37c:	0f 93       	push	r16
    c37e:	1f 93       	push	r17
    c380:	cf 93       	push	r28
    c382:	df 93       	push	r29
    c384:	00 d0       	rcall	.+0      	; 0xc386 <myStringToVar+0x26>
    c386:	1f 92       	push	r1
    c388:	cd b7       	in	r28, 0x3d	; 61
    c38a:	de b7       	in	r29, 0x3e	; 62
    c38c:	6c 01       	movw	r12, r24
    c38e:	4a 01       	movw	r8, r20
    c390:	5b 01       	movw	r10, r22
    c392:	29 83       	std	Y+1, r18	; 0x01
    c394:	3a 83       	std	Y+2, r19	; 0x02
    c396:	18 01       	movw	r2, r16
    c398:	27 01       	movw	r4, r14
    c39a:	84 2f       	mov	r24, r20
    c39c:	83 70       	andi	r24, 0x03	; 3
    c39e:	09 f4       	brne	.+2      	; 0xc3a2 <myStringToVar+0x42>
    c3a0:	66 c0       	rjmp	.+204    	; 0xc46e <myStringToVar+0x10e>
    c3a2:	1b 82       	std	Y+3, r1	; 0x03
    c3a4:	1c 82       	std	Y+4, r1	; 0x04
    c3a6:	61 2c       	mov	r6, r1
    c3a8:	71 2c       	mov	r7, r1
    c3aa:	eb 80       	ldd	r14, Y+3	; 0x03
    c3ac:	fc 80       	ldd	r15, Y+4	; 0x04
    c3ae:	ec 0c       	add	r14, r12
    c3b0:	fd 1c       	adc	r15, r13
    c3b2:	82 30       	cpi	r24, 0x02	; 2
    c3b4:	e1 f0       	breq	.+56     	; 0xc3ee <myStringToVar+0x8e>
    c3b6:	83 30       	cpi	r24, 0x03	; 3
    c3b8:	69 f1       	breq	.+90     	; 0xc414 <myStringToVar+0xb4>
    c3ba:	81 30       	cpi	r24, 0x01	; 1
    c3bc:	09 f0       	breq	.+2      	; 0xc3c0 <myStringToVar+0x60>
    c3be:	59 c0       	rjmp	.+178    	; 0xc472 <myStringToVar+0x112>
    c3c0:	29 81       	ldd	r18, Y+1	; 0x01
    c3c2:	3a 81       	ldd	r19, Y+2	; 0x02
    c3c4:	21 15       	cp	r18, r1
    c3c6:	31 05       	cpc	r19, r1
    c3c8:	a9 f1       	breq	.+106    	; 0xc434 <myStringToVar+0xd4>
    c3ca:	89 01       	movw	r16, r18
    c3cc:	0c 5f       	subi	r16, 0xFC	; 252
    c3ce:	1f 4f       	sbci	r17, 0xFF	; 255
    c3d0:	c7 01       	movw	r24, r14
    c3d2:	0e 94 81 7b 	call	0xf702	; 0xf702 <atof>
    c3d6:	e9 81       	ldd	r30, Y+1	; 0x01
    c3d8:	fa 81       	ldd	r31, Y+2	; 0x02
    c3da:	60 83       	st	Z, r22
    c3dc:	71 83       	std	Z+1, r23	; 0x01
    c3de:	82 83       	std	Z+2, r24	; 0x02
    c3e0:	93 83       	std	Z+3, r25	; 0x03
    c3e2:	ff ef       	ldi	r31, 0xFF	; 255
    c3e4:	6f 1a       	sub	r6, r31
    c3e6:	7f 0a       	sbc	r7, r31
    c3e8:	09 83       	std	Y+1, r16	; 0x01
    c3ea:	1a 83       	std	Y+2, r17	; 0x02
    c3ec:	23 c0       	rjmp	.+70     	; 0xc434 <myStringToVar+0xd4>
    c3ee:	21 14       	cp	r2, r1
    c3f0:	31 04       	cpc	r3, r1
    c3f2:	01 f1       	breq	.+64     	; 0xc434 <myStringToVar+0xd4>
    c3f4:	81 01       	movw	r16, r2
    c3f6:	0c 5f       	subi	r16, 0xFC	; 252
    c3f8:	1f 4f       	sbci	r17, 0xFF	; 255
    c3fa:	c7 01       	movw	r24, r14
    c3fc:	0e 94 a1 7b 	call	0xf742	; 0xf742 <atol>
    c400:	f1 01       	movw	r30, r2
    c402:	60 83       	st	Z, r22
    c404:	71 83       	std	Z+1, r23	; 0x01
    c406:	82 83       	std	Z+2, r24	; 0x02
    c408:	93 83       	std	Z+3, r25	; 0x03
    c40a:	ff ef       	ldi	r31, 0xFF	; 255
    c40c:	6f 1a       	sub	r6, r31
    c40e:	7f 0a       	sbc	r7, r31
    c410:	18 01       	movw	r2, r16
    c412:	10 c0       	rjmp	.+32     	; 0xc434 <myStringToVar+0xd4>
    c414:	41 14       	cp	r4, r1
    c416:	51 04       	cpc	r5, r1
    c418:	69 f0       	breq	.+26     	; 0xc434 <myStringToVar+0xd4>
    c41a:	82 01       	movw	r16, r4
    c41c:	0e 5f       	subi	r16, 0xFE	; 254
    c41e:	1f 4f       	sbci	r17, 0xFF	; 255
    c420:	c7 01       	movw	r24, r14
    c422:	0e 94 84 7b 	call	0xf708	; 0xf708 <atoi>
    c426:	f2 01       	movw	r30, r4
    c428:	80 83       	st	Z, r24
    c42a:	91 83       	std	Z+1, r25	; 0x01
    c42c:	ff ef       	ldi	r31, 0xFF	; 255
    c42e:	6f 1a       	sub	r6, r31
    c430:	7f 0a       	sbc	r7, r31
    c432:	28 01       	movw	r4, r16
    c434:	6c e2       	ldi	r22, 0x2C	; 44
    c436:	70 e0       	ldi	r23, 0x00	; 0
    c438:	c7 01       	movw	r24, r14
    c43a:	0e 94 00 7d 	call	0xfa00	; 0xfa00 <strchr>
    c43e:	00 97       	sbiw	r24, 0x00	; 0
    c440:	c1 f0       	breq	.+48     	; 0xc472 <myStringToVar+0x112>
    c442:	01 96       	adiw	r24, 0x01	; 1
    c444:	8e 19       	sub	r24, r14
    c446:	9f 09       	sbc	r25, r15
    c448:	2b 81       	ldd	r18, Y+3	; 0x03
    c44a:	3c 81       	ldd	r19, Y+4	; 0x04
    c44c:	28 0f       	add	r18, r24
    c44e:	39 1f       	adc	r19, r25
    c450:	2b 83       	std	Y+3, r18	; 0x03
    c452:	3c 83       	std	Y+4, r19	; 0x04
    c454:	b6 94       	lsr	r11
    c456:	a7 94       	ror	r10
    c458:	97 94       	ror	r9
    c45a:	87 94       	ror	r8
    c45c:	b6 94       	lsr	r11
    c45e:	a7 94       	ror	r10
    c460:	97 94       	ror	r9
    c462:	87 94       	ror	r8
    c464:	88 2d       	mov	r24, r8
    c466:	83 70       	andi	r24, 0x03	; 3
    c468:	09 f0       	breq	.+2      	; 0xc46c <myStringToVar+0x10c>
    c46a:	9f cf       	rjmp	.-194    	; 0xc3aa <myStringToVar+0x4a>
    c46c:	02 c0       	rjmp	.+4      	; 0xc472 <myStringToVar+0x112>
    c46e:	61 2c       	mov	r6, r1
    c470:	71 2c       	mov	r7, r1
    c472:	c3 01       	movw	r24, r6
    c474:	24 96       	adiw	r28, 0x04	; 4
    c476:	cd bf       	out	0x3d, r28	; 61
    c478:	de bf       	out	0x3e, r29	; 62
    c47a:	df 91       	pop	r29
    c47c:	cf 91       	pop	r28
    c47e:	1f 91       	pop	r17
    c480:	0f 91       	pop	r16
    c482:	ff 90       	pop	r15
    c484:	ef 90       	pop	r14
    c486:	df 90       	pop	r13
    c488:	cf 90       	pop	r12
    c48a:	bf 90       	pop	r11
    c48c:	af 90       	pop	r10
    c48e:	9f 90       	pop	r9
    c490:	8f 90       	pop	r8
    c492:	7f 90       	pop	r7
    c494:	6f 90       	pop	r6
    c496:	5f 90       	pop	r5
    c498:	4f 90       	pop	r4
    c49a:	3f 90       	pop	r3
    c49c:	2f 90       	pop	r2
    c49e:	08 95       	ret

0000c4a0 <adc_app_enable>:
    c4a0:	cf 93       	push	r28
    c4a2:	90 91 64 20 	lds	r25, 0x2064	; 0x802064 <g_adc_enabled>
    c4a6:	98 17       	cp	r25, r24
    c4a8:	e1 f0       	breq	.+56     	; 0xc4e2 <adc_app_enable+0x42>
    c4aa:	c8 2f       	mov	r28, r24
    c4ac:	88 23       	and	r24, r24
    c4ae:	61 f0       	breq	.+24     	; 0xc4c8 <adc_app_enable+0x28>
    c4b0:	3a dc       	rcall	.-1932   	; 0xbd26 <tc_init>
    c4b2:	17 de       	rcall	.-978    	; 0xc0e2 <adc_init>
    c4b4:	7b dc       	rcall	.-1802   	; 0xbdac <tc_start>
    c4b6:	80 e0       	ldi	r24, 0x00	; 0
    c4b8:	92 e0       	ldi	r25, 0x02	; 2
    c4ba:	0e 94 39 44 	call	0x8872	; 0x8872 <adc_enable>
    c4be:	80 e4       	ldi	r24, 0x40	; 64
    c4c0:	92 e0       	ldi	r25, 0x02	; 2
    c4c2:	0e 94 39 44 	call	0x8872	; 0x8872 <adc_enable>
    c4c6:	08 c0       	rjmp	.+16     	; 0xc4d8 <adc_app_enable+0x38>
    c4c8:	80 e0       	ldi	r24, 0x00	; 0
    c4ca:	92 e0       	ldi	r25, 0x02	; 2
    c4cc:	0e 94 65 44 	call	0x88ca	; 0x88ca <adc_disable>
    c4d0:	80 e4       	ldi	r24, 0x40	; 64
    c4d2:	92 e0       	ldi	r25, 0x02	; 2
    c4d4:	0e 94 65 44 	call	0x88ca	; 0x88ca <adc_disable>
    c4d8:	c0 93 64 20 	sts	0x2064, r28	; 0x802064 <g_adc_enabled>
    c4dc:	81 e0       	ldi	r24, 0x01	; 1
    c4de:	80 93 fa 26 	sts	0x26FA, r24	; 0x8026fa <g_twi2_lcd_repaint>
    c4e2:	cf 91       	pop	r28
    c4e4:	08 95       	ret

0000c4e6 <backlight_mode_pwm>:
    c4e6:	80 93 62 20 	sts	0x2062, r24	; 0x802062 <g_backlight_mode_pwm>
    c4ea:	90 93 63 20 	sts	0x2063, r25	; 0x802063 <g_backlight_mode_pwm+0x1>
    c4ee:	8e 3f       	cpi	r24, 0xFE	; 254
    c4f0:	2f ef       	ldi	r18, 0xFF	; 255
    c4f2:	92 07       	cpc	r25, r18
    c4f4:	69 f0       	breq	.+26     	; 0xc510 <backlight_mode_pwm+0x2a>
    c4f6:	bc 01       	movw	r22, r24
    c4f8:	6f 3f       	cpi	r22, 0xFF	; 255
    c4fa:	8f ef       	ldi	r24, 0xFF	; 255
    c4fc:	78 07       	cpc	r23, r24
    c4fe:	29 f4       	brne	.+10     	; 0xc50a <backlight_mode_pwm+0x24>
    c500:	60 e0       	ldi	r22, 0x00	; 0
    c502:	81 e0       	ldi	r24, 0x01	; 1
    c504:	0c 94 4b 31 	jmp	0x6296	; 0x6296 <twi2_set_ledbl>
    c508:	08 95       	ret
    c50a:	80 e0       	ldi	r24, 0x00	; 0
    c50c:	0c 94 4b 31 	jmp	0x6296	; 0x6296 <twi2_set_ledbl>
    c510:	08 95       	ret

0000c512 <bias_update>:
    c512:	8f 73       	andi	r24, 0x3F	; 63
    c514:	80 93 61 20 	sts	0x2061, r24	; 0x802061 <g_bias_pm>
    c518:	0c 94 6b 31 	jmp	0x62d6	; 0x62d6 <twi2_set_bias>
    c51c:	08 95       	ret

0000c51e <dac_app_enable>:
    c51e:	1f 93       	push	r17
    c520:	cf 93       	push	r28
    c522:	df 93       	push	r29
    c524:	1f 92       	push	r1
    c526:	cd b7       	in	r28, 0x3d	; 61
    c528:	de b7       	in	r29, 0x3e	; 62
    c52a:	90 91 7d 27 	lds	r25, 0x277D	; 0x80277d <g_dac_enabled>
    c52e:	98 17       	cp	r25, r24
    c530:	09 f4       	brne	.+2      	; 0xc534 <dac_app_enable+0x16>
    c532:	40 c0       	rjmp	.+128    	; 0xc5b4 <dac_app_enable+0x96>
    c534:	18 2f       	mov	r17, r24
    c536:	88 23       	and	r24, r24
    c538:	a9 f1       	breq	.+106    	; 0xc5a4 <dac_app_enable+0x86>
    c53a:	8f b7       	in	r24, 0x3f	; 63
    c53c:	89 83       	std	Y+1, r24	; 0x01
    c53e:	f8 94       	cli
    c540:	89 81       	ldd	r24, Y+1	; 0x01
    c542:	40 e8       	ldi	r20, 0x80	; 128
    c544:	54 e8       	ldi	r21, 0x84	; 132
    c546:	6e e1       	ldi	r22, 0x1E	; 30
    c548:	70 e0       	ldi	r23, 0x00	; 0
    c54a:	40 93 13 20 	sts	0x2013, r20	; 0x802013 <dds0_freq_mHz>
    c54e:	50 93 14 20 	sts	0x2014, r21	; 0x802014 <dds0_freq_mHz+0x1>
    c552:	60 93 15 20 	sts	0x2015, r22	; 0x802015 <dds0_freq_mHz+0x2>
    c556:	70 93 16 20 	sts	0x2016, r23	; 0x802016 <dds0_freq_mHz+0x3>
    c55a:	10 92 0d 25 	sts	0x250D, r1	; 0x80250d <dds0_reg>
    c55e:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <dds0_reg+0x1>
    c562:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <dds0_reg+0x2>
    c566:	10 92 10 25 	sts	0x2510, r1	; 0x802510 <dds0_reg+0x3>
    c56a:	4a e0       	ldi	r20, 0x0A	; 10
    c56c:	59 e0       	ldi	r21, 0x09	; 9
    c56e:	6d e3       	ldi	r22, 0x3D	; 61
    c570:	70 e0       	ldi	r23, 0x00	; 0
    c572:	40 93 0f 20 	sts	0x200F, r20	; 0x80200f <dds1_freq_mHz>
    c576:	50 93 10 20 	sts	0x2010, r21	; 0x802010 <dds1_freq_mHz+0x1>
    c57a:	60 93 11 20 	sts	0x2011, r22	; 0x802011 <dds1_freq_mHz+0x2>
    c57e:	70 93 12 20 	sts	0x2012, r23	; 0x802012 <dds1_freq_mHz+0x3>
    c582:	40 e0       	ldi	r20, 0x00	; 0
    c584:	50 e0       	ldi	r21, 0x00	; 0
    c586:	60 e0       	ldi	r22, 0x00	; 0
    c588:	70 e4       	ldi	r23, 0x40	; 64
    c58a:	40 93 0b 20 	sts	0x200B, r20	; 0x80200b <dds1_reg>
    c58e:	50 93 0c 20 	sts	0x200C, r21	; 0x80200c <dds1_reg+0x1>
    c592:	60 93 0d 20 	sts	0x200D, r22	; 0x80200d <dds1_reg+0x2>
    c596:	70 93 0e 20 	sts	0x200E, r23	; 0x80200e <dds1_reg+0x3>
    c59a:	8f bf       	out	0x3f, r24	; 63
    c59c:	24 dc       	rcall	.-1976   	; 0xbde6 <dac_init>
    c59e:	06 dc       	rcall	.-2036   	; 0xbdac <tc_start>
    c5a0:	eb dc       	rcall	.-1578   	; 0xbf78 <dac_start>
    c5a2:	06 c0       	rjmp	.+12     	; 0xc5b0 <dac_app_enable+0x92>
    c5a4:	0e 94 3e 24 	call	0x487c	; 0x487c <dma_disable>
    c5a8:	80 e2       	ldi	r24, 0x20	; 32
    c5aa:	93 e0       	ldi	r25, 0x03	; 3
    c5ac:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <dac_disable>
    c5b0:	10 93 7d 27 	sts	0x277D, r17	; 0x80277d <g_dac_enabled>
    c5b4:	0f 90       	pop	r0
    c5b6:	df 91       	pop	r29
    c5b8:	cf 91       	pop	r28
    c5ba:	1f 91       	pop	r17
    c5bc:	08 95       	ret

0000c5be <errorBeep_enable>:
    c5be:	80 93 5f 20 	sts	0x205F, r24	; 0x80205f <g_errorBeep_enable>
    c5c2:	08 95       	ret

0000c5c4 <printStatusLines_enable>:
    c5c4:	80 93 7a 27 	sts	0x277A, r24	; 0x80277a <g_usb_cdc_printStatusLines>
    c5c8:	08 95       	ret

0000c5ca <keyBeep_enable>:
    c5ca:	80 93 7c 27 	sts	0x277C, r24	; 0x80277c <g_keyBeep_enable>
    c5ce:	08 95       	ret

0000c5d0 <pitchTone_mode>:
    c5d0:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <g_pitch_tone_mode>
    c5d4:	08 95       	ret

0000c5d6 <sched_getLock>:


/* Simple scheduler concept */

bool sched_getLock(volatile uint8_t* lockVar)
{
    c5d6:	cf 93       	push	r28
    c5d8:	df 93       	push	r29
    c5da:	1f 92       	push	r1
    c5dc:	cd b7       	in	r28, 0x3d	; 61
    c5de:	de b7       	in	r29, 0x3e	; 62
    c5e0:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    c5e2:	8f b7       	in	r24, 0x3f	; 63
    c5e4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    c5e6:	f8 94       	cli
	return flags;
    c5e8:	99 81       	ldd	r25, Y+1	; 0x01

	/* IRQ secured access */	
	{
		irqflags_t flags = cpu_irq_save();
		barrier();
		if (!*lockVar) {	// No use before
    c5ea:	80 81       	ld	r24, Z
    c5ec:	81 11       	cpse	r24, r1
    c5ee:	05 c0       	rjmp	.+10     	; 0xc5fa <sched_getLock+0x24>
			++*lockVar;
    c5f0:	80 81       	ld	r24, Z
    c5f2:	8f 5f       	subi	r24, 0xFF	; 255
    c5f4:	80 83       	st	Z, r24
			barrier();
			status = true;
    c5f6:	81 e0       	ldi	r24, 0x01	; 1
    c5f8:	01 c0       	rjmp	.+2      	; 0xc5fc <sched_getLock+0x26>

/* Simple scheduler concept */

bool sched_getLock(volatile uint8_t* lockVar)
{
	bool status = false;
    c5fa:	80 e0       	ldi	r24, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    c5fc:	9f bf       	out	0x3f, r25	; 63
			status = true;
		}
		cpu_irq_restore(flags);
	}
	return status;
}
    c5fe:	0f 90       	pop	r0
    c600:	df 91       	pop	r29
    c602:	cf 91       	pop	r28
    c604:	08 95       	ret

0000c606 <sched_freeLock>:
    c606:	cf 93       	push	r28
    c608:	df 93       	push	r29
    c60a:	1f 92       	push	r1
    c60c:	cd b7       	in	r28, 0x3d	; 61
    c60e:	de b7       	in	r29, 0x3e	; 62
    c610:	fc 01       	movw	r30, r24
    c612:	8f b7       	in	r24, 0x3f	; 63
    c614:	89 83       	std	Y+1, r24	; 0x01
    c616:	f8 94       	cli
    c618:	99 81       	ldd	r25, Y+1	; 0x01
    c61a:	10 82       	st	Z, r1
    c61c:	9f bf       	out	0x3f, r25	; 63
    c61e:	0f 90       	pop	r0
    c620:	df 91       	pop	r29
    c622:	cf 91       	pop	r28
    c624:	08 95       	ret

0000c626 <sched_doSleep>:
    c626:	f8 94       	cli
    c628:	80 91 5b 29 	lds	r24, 0x295B	; 0x80295b <sleepmgr_locks>
    c62c:	81 11       	cpse	r24, r1
    c62e:	09 c0       	rjmp	.+18     	; 0xc642 <sched_doSleep+0x1c>
    c630:	ac e5       	ldi	r26, 0x5C	; 92
    c632:	b9 e2       	ldi	r27, 0x29	; 41
    c634:	e0 e0       	ldi	r30, 0x00	; 0
    c636:	ef 5f       	subi	r30, 0xFF	; 255
    c638:	8d 91       	ld	r24, X+
    c63a:	88 23       	and	r24, r24
    c63c:	e1 f3       	breq	.-8      	; 0xc636 <sched_doSleep+0x10>
    c63e:	e1 11       	cpse	r30, r1
    c640:	02 c0       	rjmp	.+4      	; 0xc646 <sched_doSleep+0x20>
    c642:	78 94       	sei
    c644:	08 95       	ret
    c646:	a8 e4       	ldi	r26, 0x48	; 72
    c648:	b0 e0       	ldi	r27, 0x00	; 0
    c64a:	8c 91       	ld	r24, X
    c64c:	f0 e0       	ldi	r31, 0x00	; 0
    c64e:	ec 59       	subi	r30, 0x9C	; 156
    c650:	ff 4d       	sbci	r31, 0xDF	; 223
    c652:	81 7f       	andi	r24, 0xF1	; 241
    c654:	90 81       	ld	r25, Z
    c656:	89 2b       	or	r24, r25
    c658:	8c 93       	st	X, r24
    c65a:	8c 91       	ld	r24, X
    c65c:	81 60       	ori	r24, 0x01	; 1
    c65e:	8c 93       	st	X, r24
    c660:	78 94       	sei
    c662:	88 95       	sleep
    c664:	8c 91       	ld	r24, X
    c666:	8e 7f       	andi	r24, 0xFE	; 254
    c668:	8c 93       	st	X, r24
    c66a:	08 95       	ret

0000c66c <sched_push>:
    c66c:	2f 92       	push	r2
    c66e:	3f 92       	push	r3
    c670:	4f 92       	push	r4
    c672:	5f 92       	push	r5
    c674:	6f 92       	push	r6
    c676:	7f 92       	push	r7
    c678:	8f 92       	push	r8
    c67a:	9f 92       	push	r9
    c67c:	af 92       	push	r10
    c67e:	bf 92       	push	r11
    c680:	cf 92       	push	r12
    c682:	ef 92       	push	r14
    c684:	ff 92       	push	r15
    c686:	0f 93       	push	r16
    c688:	1f 93       	push	r17
    c68a:	cf 93       	push	r28
    c68c:	df 93       	push	r29
    c68e:	cd b7       	in	r28, 0x3d	; 61
    c690:	de b7       	in	r29, 0x3e	; 62
    c692:	2b 97       	sbiw	r28, 0x0b	; 11
    c694:	cd bf       	out	0x3d, r28	; 61
    c696:	de bf       	out	0x3e, r29	; 62
    c698:	3c 01       	movw	r6, r24
    c69a:	16 2f       	mov	r17, r22
    c69c:	49 01       	movw	r8, r18
    c69e:	5a 01       	movw	r10, r20
    c6a0:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <rtc_get_time>
    c6a4:	6c 83       	std	Y+4, r22	; 0x04
    c6a6:	7d 83       	std	Y+5, r23	; 0x05
    c6a8:	8e 83       	std	Y+6, r24	; 0x06
    c6aa:	9f 83       	std	Y+7, r25	; 0x07
    c6ac:	e1 10       	cpse	r14, r1
    c6ae:	08 c0       	rjmp	.+16     	; 0xc6c0 <sched_push+0x54>
    c6b0:	0f 2e       	mov	r0, r31
    c6b2:	21 2c       	mov	r2, r1
    c6b4:	31 2c       	mov	r3, r1
    c6b6:	f0 ef       	ldi	r31, 0xF0	; 240
    c6b8:	4f 2e       	mov	r4, r31
    c6ba:	51 2c       	mov	r5, r1
    c6bc:	f0 2d       	mov	r31, r0
    c6be:	07 c0       	rjmp	.+14     	; 0xc6ce <sched_push+0x62>
    c6c0:	0f 2e       	mov	r0, r31
    c6c2:	21 2c       	mov	r2, r1
    c6c4:	31 2c       	mov	r3, r1
    c6c6:	41 2c       	mov	r4, r1
    c6c8:	ff e8       	ldi	r31, 0x8F	; 143
    c6ca:	5f 2e       	mov	r5, r31
    c6cc:	f0 2d       	mov	r31, r0
    c6ce:	c1 10       	cpse	r12, r1
    c6d0:	05 c0       	rjmp	.+10     	; 0xc6dc <sched_push+0x70>
    c6d2:	18 86       	std	Y+8, r1	; 0x08
    c6d4:	19 86       	std	Y+9, r1	; 0x09
    c6d6:	1a 86       	std	Y+10, r1	; 0x0a
    c6d8:	1b 86       	std	Y+11, r1	; 0x0b
    c6da:	08 c0       	rjmp	.+16     	; 0xc6ec <sched_push+0x80>
    c6dc:	80 e0       	ldi	r24, 0x00	; 0
    c6de:	90 e0       	ldi	r25, 0x00	; 0
    c6e0:	a0 e0       	ldi	r26, 0x00	; 0
    c6e2:	b0 e4       	ldi	r27, 0x40	; 64
    c6e4:	88 87       	std	Y+8, r24	; 0x08
    c6e6:	99 87       	std	Y+9, r25	; 0x09
    c6e8:	aa 87       	std	Y+10, r26	; 0x0a
    c6ea:	bb 87       	std	Y+11, r27	; 0x0b
    c6ec:	00 23       	and	r16, r16
    c6ee:	09 f4       	brne	.+2      	; 0xc6f2 <sched_push+0x86>
    c6f0:	13 c2       	rjmp	.+1062   	; 0xcb18 <sched_push+0x4ac>
    c6f2:	92 e0       	ldi	r25, 0x02	; 2
    c6f4:	89 16       	cp	r8, r25
    c6f6:	91 04       	cpc	r9, r1
    c6f8:	a1 04       	cpc	r10, r1
    c6fa:	b1 04       	cpc	r11, r1
    c6fc:	c8 f0       	brcs	.+50     	; 0xc730 <sched_push+0xc4>
    c6fe:	a1 e3       	ldi	r26, 0x31	; 49
    c700:	8a 16       	cp	r8, r26
    c702:	a5 e7       	ldi	r26, 0x75	; 117
    c704:	9a 06       	cpc	r9, r26
    c706:	a1 04       	cpc	r10, r1
    c708:	b1 04       	cpc	r11, r1
    c70a:	b8 f4       	brcc	.+46     	; 0xc73a <sched_push+0xce>
    c70c:	c5 01       	movw	r24, r10
    c70e:	b4 01       	movw	r22, r8
    c710:	05 2e       	mov	r0, r21
    c712:	5a e0       	ldi	r21, 0x0A	; 10
    c714:	66 0f       	add	r22, r22
    c716:	77 1f       	adc	r23, r23
    c718:	88 1f       	adc	r24, r24
    c71a:	99 1f       	adc	r25, r25
    c71c:	5a 95       	dec	r21
    c71e:	d1 f7       	brne	.-12     	; 0xc714 <sched_push+0xa8>
    c720:	50 2d       	mov	r21, r0
    c722:	28 ee       	ldi	r18, 0xE8	; 232
    c724:	33 e0       	ldi	r19, 0x03	; 3
    c726:	40 e0       	ldi	r20, 0x00	; 0
    c728:	50 e0       	ldi	r21, 0x00	; 0
    c72a:	0e 94 b2 79 	call	0xf364	; 0xf364 <__udivmodsi4>
    c72e:	09 c0       	rjmp	.+18     	; 0xc742 <sched_push+0xd6>
    c730:	22 e0       	ldi	r18, 0x02	; 2
    c732:	30 e0       	ldi	r19, 0x00	; 0
    c734:	40 e0       	ldi	r20, 0x00	; 0
    c736:	50 e0       	ldi	r21, 0x00	; 0
    c738:	04 c0       	rjmp	.+8      	; 0xc742 <sched_push+0xd6>
    c73a:	21 e3       	ldi	r18, 0x31	; 49
    c73c:	30 e0       	ldi	r19, 0x00	; 0
    c73e:	40 e0       	ldi	r20, 0x00	; 0
    c740:	50 e0       	ldi	r21, 0x00	; 0
    c742:	8c 80       	ldd	r8, Y+4	; 0x04
    c744:	9d 80       	ldd	r9, Y+5	; 0x05
    c746:	ae 80       	ldd	r10, Y+6	; 0x06
    c748:	bf 80       	ldd	r11, Y+7	; 0x07
    c74a:	82 0e       	add	r8, r18
    c74c:	93 1e       	adc	r9, r19
    c74e:	a4 1e       	adc	r10, r20
    c750:	b5 1e       	adc	r11, r21
    c752:	e2 c1       	rjmp	.+964    	; 0xcb18 <sched_push+0x4ac>
    c754:	e5 ed       	ldi	r30, 0xD5	; 213
    c756:	f8 e2       	ldi	r31, 0x28	; 40
    c758:	83 81       	ldd	r24, Z+3	; 0x03
    c75a:	92 81       	ldd	r25, Z+2	; 0x02
    c75c:	89 1b       	sub	r24, r25
    c75e:	98 2f       	mov	r25, r24
    c760:	85 81       	ldd	r24, Z+5	; 0x05
    c762:	89 23       	and	r24, r25
    c764:	94 81       	ldd	r25, Z+4	; 0x04
    c766:	89 17       	cp	r24, r25
    c768:	09 f4       	brne	.+2      	; 0xc76c <sched_push+0x100>
    c76a:	dd c1       	rjmp	.+954    	; 0xcb26 <sched_push+0x4ba>
    c76c:	8f b7       	in	r24, 0x3f	; 63
    c76e:	8b 83       	std	Y+3, r24	; 0x03
    c770:	f8 94       	cli
    c772:	8b 81       	ldd	r24, Y+3	; 0x03
    c774:	93 81       	ldd	r25, Z+3	; 0x03
    c776:	32 81       	ldd	r19, Z+2	; 0x02
    c778:	25 81       	ldd	r18, Z+5	; 0x05
    c77a:	93 1b       	sub	r25, r19
    c77c:	92 23       	and	r25, r18
    c77e:	34 81       	ldd	r19, Z+4	; 0x04
    c780:	93 17       	cp	r25, r19
    c782:	99 f0       	breq	.+38     	; 0xc7aa <sched_push+0x13e>
    c784:	93 81       	ldd	r25, Z+3	; 0x03
    c786:	26 95       	lsr	r18
    c788:	29 23       	and	r18, r25
    c78a:	a0 81       	ld	r26, Z
    c78c:	b1 81       	ldd	r27, Z+1	; 0x01
    c78e:	04 e0       	ldi	r16, 0x04	; 4
    c790:	20 9f       	mul	r18, r16
    c792:	a0 0d       	add	r26, r0
    c794:	b1 1d       	adc	r27, r1
    c796:	11 24       	eor	r1, r1
    c798:	8d 92       	st	X+, r8
    c79a:	9d 92       	st	X+, r9
    c79c:	ad 92       	st	X+, r10
    c79e:	bc 92       	st	X, r11
    c7a0:	13 97       	sbiw	r26, 0x03	; 3
    c7a2:	9f 5f       	subi	r25, 0xFF	; 255
    c7a4:	25 81       	ldd	r18, Z+5	; 0x05
    c7a6:	92 23       	and	r25, r18
    c7a8:	93 83       	std	Z+3, r25	; 0x03
    c7aa:	e5 ed       	ldi	r30, 0xD5	; 213
    c7ac:	f8 e2       	ldi	r31, 0x28	; 40
    c7ae:	93 81       	ldd	r25, Z+3	; 0x03
    c7b0:	32 81       	ldd	r19, Z+2	; 0x02
    c7b2:	25 81       	ldd	r18, Z+5	; 0x05
    c7b4:	93 1b       	sub	r25, r19
    c7b6:	92 23       	and	r25, r18
    c7b8:	34 81       	ldd	r19, Z+4	; 0x04
    c7ba:	93 17       	cp	r25, r19
    c7bc:	19 f1       	breq	.+70     	; 0xc804 <sched_push+0x198>
    c7be:	93 81       	ldd	r25, Z+3	; 0x03
    c7c0:	26 95       	lsr	r18
    c7c2:	29 23       	and	r18, r25
    c7c4:	a0 81       	ld	r26, Z
    c7c6:	b1 81       	ldd	r27, Z+1	; 0x01
    c7c8:	34 e0       	ldi	r19, 0x04	; 4
    c7ca:	23 9f       	mul	r18, r19
    c7cc:	a0 0d       	add	r26, r0
    c7ce:	b1 1d       	adc	r27, r1
    c7d0:	11 24       	eor	r1, r1
    c7d2:	a3 01       	movw	r20, r6
    c7d4:	60 e0       	ldi	r22, 0x00	; 0
    c7d6:	70 e0       	ldi	r23, 0x00	; 0
    c7d8:	71 2b       	or	r23, r17
    c7da:	42 29       	or	r20, r2
    c7dc:	53 29       	or	r21, r3
    c7de:	64 29       	or	r22, r4
    c7e0:	75 29       	or	r23, r5
    c7e2:	08 85       	ldd	r16, Y+8	; 0x08
    c7e4:	19 85       	ldd	r17, Y+9	; 0x09
    c7e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    c7e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    c7ea:	40 2b       	or	r20, r16
    c7ec:	51 2b       	or	r21, r17
    c7ee:	62 2b       	or	r22, r18
    c7f0:	73 2b       	or	r23, r19
    c7f2:	4d 93       	st	X+, r20
    c7f4:	5d 93       	st	X+, r21
    c7f6:	6d 93       	st	X+, r22
    c7f8:	7c 93       	st	X, r23
    c7fa:	13 97       	sbiw	r26, 0x03	; 3
    c7fc:	9f 5f       	subi	r25, 0xFF	; 255
    c7fe:	25 81       	ldd	r18, Z+5	; 0x05
    c800:	92 23       	and	r25, r18
    c802:	93 83       	std	Z+3, r25	; 0x03
    c804:	8f bf       	out	0x3f, r24	; 63
    c806:	8f c1       	rjmp	.+798    	; 0xcb26 <sched_push+0x4ba>
    c808:	81 e0       	ldi	r24, 0x01	; 1
    c80a:	90 e0       	ldi	r25, 0x00	; 0
    c80c:	fc 01       	movw	r30, r24
    c80e:	ee 0f       	add	r30, r30
    c810:	ff 1f       	adc	r31, r31
    c812:	ee 0f       	add	r30, r30
    c814:	ff 1f       	adc	r31, r31
    c816:	ee 0f       	add	r30, r30
    c818:	ff 1f       	adc	r31, r31
    c81a:	e8 1b       	sub	r30, r24
    c81c:	f9 0b       	sbc	r31, r25
    c81e:	eb 55       	subi	r30, 0x5B	; 91
    c820:	fa 4d       	sbci	r31, 0xDA	; 218
    c822:	20 81       	ld	r18, Z
    c824:	20 fd       	sbrc	r18, 0
    c826:	32 c0       	rjmp	.+100    	; 0xc88c <sched_push+0x220>
    c828:	dc 01       	movw	r26, r24
    c82a:	aa 0f       	add	r26, r26
    c82c:	bb 1f       	adc	r27, r27
    c82e:	aa 0f       	add	r26, r26
    c830:	bb 1f       	adc	r27, r27
    c832:	aa 0f       	add	r26, r26
    c834:	bb 1f       	adc	r27, r27
    c836:	a8 1b       	sub	r26, r24
    c838:	b9 0b       	sbc	r27, r25
    c83a:	fd 01       	movw	r30, r26
    c83c:	eb 55       	subi	r30, 0x5B	; 91
    c83e:	fa 4d       	sbci	r31, 0xDA	; 218
    c840:	90 81       	ld	r25, Z
    c842:	91 60       	ori	r25, 0x01	; 1
    c844:	90 83       	st	Z, r25
    c846:	a1 56       	subi	r26, 0x61	; 97
    c848:	ba 4d       	sbci	r27, 0xDA	; 218
    c84a:	14 96       	adiw	r26, 0x04	; 4
    c84c:	6d 92       	st	X+, r6
    c84e:	7c 92       	st	X, r7
    c850:	15 97       	sbiw	r26, 0x05	; 5
    c852:	13 70       	andi	r17, 0x03	; 3
    c854:	11 0f       	add	r17, r17
    c856:	11 0f       	add	r17, r17
    c858:	11 0f       	add	r17, r17
    c85a:	90 81       	ld	r25, Z
    c85c:	97 7e       	andi	r25, 0xE7	; 231
    c85e:	91 2b       	or	r25, r17
    c860:	90 83       	st	Z, r25
    c862:	90 81       	ld	r25, Z
    c864:	e0 fa       	bst	r14, 0
    c866:	91 f9       	bld	r25, 1
    c868:	90 83       	st	Z, r25
    c86a:	90 81       	ld	r25, Z
    c86c:	c0 fa       	bst	r12, 0
    c86e:	92 f9       	bld	r25, 2
    c870:	90 83       	st	Z, r25
    c872:	8d 92       	st	X+, r8
    c874:	9d 92       	st	X+, r9
    c876:	ad 92       	st	X+, r10
    c878:	bc 92       	st	X, r11
    c87a:	13 97       	sbiw	r26, 0x03	; 3
    c87c:	8f 5f       	subi	r24, 0xFF	; 255
    c87e:	e0 91 7f 25 	lds	r30, 0x257F	; 0x80257f <g_sched_sort>
    c882:	ee 23       	and	r30, r30
    c884:	a1 f0       	breq	.+40     	; 0xc8ae <sched_push+0x242>
    c886:	20 e0       	ldi	r18, 0x00	; 0
    c888:	30 e0       	ldi	r19, 0x00	; 0
    c88a:	18 c0       	rjmp	.+48     	; 0xc8bc <sched_push+0x250>
    c88c:	01 96       	adiw	r24, 0x01	; 1
    c88e:	80 32       	cpi	r24, 0x20	; 32
    c890:	91 05       	cpc	r25, r1
    c892:	09 f0       	breq	.+2      	; 0xc896 <sched_push+0x22a>
    c894:	bb cf       	rjmp	.-138    	; 0xc80c <sched_push+0x1a0>
    c896:	1c 82       	std	Y+4, r1	; 0x04
    c898:	1d 82       	std	Y+5, r1	; 0x05
    c89a:	1e 82       	std	Y+6, r1	; 0x06
    c89c:	1f 82       	std	Y+7, r1	; 0x07
    c89e:	62 c0       	rjmp	.+196    	; 0xc964 <sched_push+0x2f8>
    c8a0:	f9 01       	movw	r30, r18
    c8a2:	e1 58       	subi	r30, 0x81	; 129
    c8a4:	fa 4d       	sbci	r31, 0xDA	; 218
    c8a6:	e0 81       	ld	r30, Z
    c8a8:	e1 11       	cpse	r30, r1
    c8aa:	08 c0       	rjmp	.+16     	; 0xc8bc <sched_push+0x250>
    c8ac:	02 c0       	rjmp	.+4      	; 0xc8b2 <sched_push+0x246>
    c8ae:	20 e0       	ldi	r18, 0x00	; 0
    c8b0:	30 e0       	ldi	r19, 0x00	; 0
    c8b2:	f9 01       	movw	r30, r18
    c8b4:	e1 58       	subi	r30, 0x81	; 129
    c8b6:	fa 4d       	sbci	r31, 0xDA	; 218
    c8b8:	80 83       	st	Z, r24
    c8ba:	3d c0       	rjmp	.+122    	; 0xc936 <sched_push+0x2ca>
    c8bc:	e1 50       	subi	r30, 0x01	; 1
    c8be:	4e 2f       	mov	r20, r30
    c8c0:	50 e0       	ldi	r21, 0x00	; 0
    c8c2:	17 e0       	ldi	r17, 0x07	; 7
    c8c4:	e1 9f       	mul	r30, r17
    c8c6:	f0 01       	movw	r30, r0
    c8c8:	11 24       	eor	r1, r1
    c8ca:	eb 55       	subi	r30, 0x5B	; 91
    c8cc:	fa 4d       	sbci	r31, 0xDA	; 218
    c8ce:	90 81       	ld	r25, Z
    c8d0:	90 ff       	sbrs	r25, 0
    c8d2:	2b c0       	rjmp	.+86     	; 0xc92a <sched_push+0x2be>
    c8d4:	fa 01       	movw	r30, r20
    c8d6:	ee 0f       	add	r30, r30
    c8d8:	ff 1f       	adc	r31, r31
    c8da:	ee 0f       	add	r30, r30
    c8dc:	ff 1f       	adc	r31, r31
    c8de:	ee 0f       	add	r30, r30
    c8e0:	ff 1f       	adc	r31, r31
    c8e2:	e4 1b       	sub	r30, r20
    c8e4:	f5 0b       	sbc	r31, r21
    c8e6:	e1 56       	subi	r30, 0x61	; 97
    c8e8:	fa 4d       	sbci	r31, 0xDA	; 218
    c8ea:	40 81       	ld	r20, Z
    c8ec:	51 81       	ldd	r21, Z+1	; 0x01
    c8ee:	62 81       	ldd	r22, Z+2	; 0x02
    c8f0:	73 81       	ldd	r23, Z+3	; 0x03
    c8f2:	84 16       	cp	r8, r20
    c8f4:	95 06       	cpc	r9, r21
    c8f6:	a6 06       	cpc	r10, r22
    c8f8:	b7 06       	cpc	r11, r23
    c8fa:	b8 f4       	brcc	.+46     	; 0xc92a <sched_push+0x2be>
    c8fc:	2f 31       	cpi	r18, 0x1F	; 31
    c8fe:	31 05       	cpc	r19, r1
    c900:	7c f4       	brge	.+30     	; 0xc920 <sched_push+0x2b4>
    c902:	4e e1       	ldi	r20, 0x1E	; 30
    c904:	50 e0       	ldi	r21, 0x00	; 0
    c906:	fa 01       	movw	r30, r20
    c908:	e1 58       	subi	r30, 0x81	; 129
    c90a:	fa 4d       	sbci	r31, 0xDA	; 218
    c90c:	90 81       	ld	r25, Z
    c90e:	fa 01       	movw	r30, r20
    c910:	e0 58       	subi	r30, 0x80	; 128
    c912:	fa 4d       	sbci	r31, 0xDA	; 218
    c914:	90 83       	st	Z, r25
    c916:	41 50       	subi	r20, 0x01	; 1
    c918:	51 09       	sbc	r21, r1
    c91a:	42 17       	cp	r20, r18
    c91c:	53 07       	cpc	r21, r19
    c91e:	9c f7       	brge	.-26     	; 0xc906 <sched_push+0x29a>
    c920:	f9 01       	movw	r30, r18
    c922:	e1 58       	subi	r30, 0x81	; 129
    c924:	fa 4d       	sbci	r31, 0xDA	; 218
    c926:	80 83       	st	Z, r24
    c928:	06 c0       	rjmp	.+12     	; 0xc936 <sched_push+0x2ca>
    c92a:	2f 5f       	subi	r18, 0xFF	; 255
    c92c:	3f 4f       	sbci	r19, 0xFF	; 255
    c92e:	20 32       	cpi	r18, 0x20	; 32
    c930:	31 05       	cpc	r19, r1
    c932:	09 f0       	breq	.+2      	; 0xc936 <sched_push+0x2ca>
    c934:	b5 cf       	rjmp	.-150    	; 0xc8a0 <sched_push+0x234>
    c936:	80 91 7f 25 	lds	r24, 0x257F	; 0x80257f <g_sched_sort>
    c93a:	90 e0       	ldi	r25, 0x00	; 0
    c93c:	01 97       	sbiw	r24, 0x01	; 1
    c93e:	fc 01       	movw	r30, r24
    c940:	ee 0f       	add	r30, r30
    c942:	ff 1f       	adc	r31, r31
    c944:	ee 0f       	add	r30, r30
    c946:	ff 1f       	adc	r31, r31
    c948:	ee 0f       	add	r30, r30
    c94a:	ff 1f       	adc	r31, r31
    c94c:	e8 1b       	sub	r30, r24
    c94e:	f9 0b       	sbc	r31, r25
    c950:	e1 56       	subi	r30, 0x61	; 97
    c952:	fa 4d       	sbci	r31, 0xDA	; 218
    c954:	80 81       	ld	r24, Z
    c956:	91 81       	ldd	r25, Z+1	; 0x01
    c958:	a2 81       	ldd	r26, Z+2	; 0x02
    c95a:	b3 81       	ldd	r27, Z+3	; 0x03
    c95c:	8c 83       	std	Y+4, r24	; 0x04
    c95e:	9d 83       	std	Y+5, r25	; 0x05
    c960:	ae 83       	std	Y+6, r26	; 0x06
    c962:	bf 83       	std	Y+7, r27	; 0x07
    c964:	83 e8       	ldi	r24, 0x83	; 131
    c966:	96 e2       	ldi	r25, 0x26	; 38
    c968:	4e de       	rcall	.-868    	; 0xc606 <sched_freeLock>
    c96a:	0f 2e       	mov	r0, r31
    c96c:	f5 ed       	ldi	r31, 0xD5	; 213
    c96e:	af 2e       	mov	r10, r31
    c970:	f8 e2       	ldi	r31, 0x28	; 40
    c972:	bf 2e       	mov	r11, r31
    c974:	f0 2d       	mov	r31, r0
    c976:	a3 c0       	rjmp	.+326    	; 0xcabe <sched_push+0x452>
    c978:	8f b7       	in	r24, 0x3f	; 63
    c97a:	8a 83       	std	Y+2, r24	; 0x02
    c97c:	f8 94       	cli
    c97e:	2a 81       	ldd	r18, Y+2	; 0x02
    c980:	d5 01       	movw	r26, r10
    c982:	13 96       	adiw	r26, 0x03	; 3
    c984:	9c 91       	ld	r25, X
    c986:	13 97       	sbiw	r26, 0x03	; 3
    c988:	12 96       	adiw	r26, 0x02	; 2
    c98a:	8c 91       	ld	r24, X
    c98c:	12 97       	sbiw	r26, 0x02	; 2
    c98e:	98 17       	cp	r25, r24
    c990:	c9 f0       	breq	.+50     	; 0xc9c4 <sched_push+0x358>
    c992:	12 96       	adiw	r26, 0x02	; 2
    c994:	9c 91       	ld	r25, X
    c996:	12 97       	sbiw	r26, 0x02	; 2
    c998:	15 96       	adiw	r26, 0x05	; 5
    c99a:	8c 91       	ld	r24, X
    c99c:	15 97       	sbiw	r26, 0x05	; 5
    c99e:	38 2f       	mov	r19, r24
    c9a0:	36 95       	lsr	r19
    c9a2:	39 23       	and	r19, r25
    c9a4:	ed 91       	ld	r30, X+
    c9a6:	fc 91       	ld	r31, X
    c9a8:	b4 e0       	ldi	r27, 0x04	; 4
    c9aa:	3b 9f       	mul	r19, r27
    c9ac:	e0 0d       	add	r30, r0
    c9ae:	f1 1d       	adc	r31, r1
    c9b0:	11 24       	eor	r1, r1
    c9b2:	40 81       	ld	r20, Z
    c9b4:	51 81       	ldd	r21, Z+1	; 0x01
    c9b6:	62 81       	ldd	r22, Z+2	; 0x02
    c9b8:	73 81       	ldd	r23, Z+3	; 0x03
    c9ba:	9f 5f       	subi	r25, 0xFF	; 255
    c9bc:	89 23       	and	r24, r25
    c9be:	f5 01       	movw	r30, r10
    c9c0:	82 83       	std	Z+2, r24	; 0x02
    c9c2:	03 c0       	rjmp	.+6      	; 0xc9ca <sched_push+0x35e>
    c9c4:	40 e0       	ldi	r20, 0x00	; 0
    c9c6:	50 e0       	ldi	r21, 0x00	; 0
    c9c8:	ba 01       	movw	r22, r20
    c9ca:	d5 01       	movw	r26, r10
    c9cc:	13 96       	adiw	r26, 0x03	; 3
    c9ce:	8c 91       	ld	r24, X
    c9d0:	13 97       	sbiw	r26, 0x03	; 3
    c9d2:	12 96       	adiw	r26, 0x02	; 2
    c9d4:	9c 91       	ld	r25, X
    c9d6:	12 97       	sbiw	r26, 0x02	; 2
    c9d8:	98 17       	cp	r25, r24
    c9da:	c9 f0       	breq	.+50     	; 0xca0e <sched_push+0x3a2>
    c9dc:	12 96       	adiw	r26, 0x02	; 2
    c9de:	3c 91       	ld	r19, X
    c9e0:	12 97       	sbiw	r26, 0x02	; 2
    c9e2:	15 96       	adiw	r26, 0x05	; 5
    c9e4:	9c 91       	ld	r25, X
    c9e6:	15 97       	sbiw	r26, 0x05	; 5
    c9e8:	89 2f       	mov	r24, r25
    c9ea:	86 95       	lsr	r24
    c9ec:	83 23       	and	r24, r19
    c9ee:	ed 91       	ld	r30, X+
    c9f0:	fc 91       	ld	r31, X
    c9f2:	b4 e0       	ldi	r27, 0x04	; 4
    c9f4:	8b 9f       	mul	r24, r27
    c9f6:	e0 0d       	add	r30, r0
    c9f8:	f1 1d       	adc	r31, r1
    c9fa:	11 24       	eor	r1, r1
    c9fc:	40 80       	ld	r4, Z
    c9fe:	51 80       	ldd	r5, Z+1	; 0x01
    ca00:	62 80       	ldd	r6, Z+2	; 0x02
    ca02:	73 80       	ldd	r7, Z+3	; 0x03
    ca04:	3f 5f       	subi	r19, 0xFF	; 255
    ca06:	93 23       	and	r25, r19
    ca08:	f5 01       	movw	r30, r10
    ca0a:	92 83       	std	Z+2, r25	; 0x02
    ca0c:	03 c0       	rjmp	.+6      	; 0xca14 <sched_push+0x3a8>
    ca0e:	41 2c       	mov	r4, r1
    ca10:	51 2c       	mov	r5, r1
    ca12:	32 01       	movw	r6, r4
    ca14:	2f bf       	out	0x3f, r18	; 63
    ca16:	d3 01       	movw	r26, r6
    ca18:	c2 01       	movw	r24, r4
    ca1a:	88 27       	eor	r24, r24
    ca1c:	99 27       	eor	r25, r25
    ca1e:	aa 27       	eor	r26, r26
    ca20:	bf 70       	andi	r27, 0x0F	; 15
    ca22:	00 97       	sbiw	r24, 0x00	; 0
    ca24:	a1 05       	cpc	r26, r1
    ca26:	bf 40       	sbci	r27, 0x0F	; 15
    ca28:	09 f1       	breq	.+66     	; 0xca6c <sched_push+0x400>
    ca2a:	8f b7       	in	r24, 0x3f	; 63
    ca2c:	89 83       	std	Y+1, r24	; 0x01
    ca2e:	f8 94       	cli
    ca30:	29 81       	ldd	r18, Y+1	; 0x01
    ca32:	12 c0       	rjmp	.+36     	; 0xca58 <sched_push+0x3ec>
    ca34:	d5 01       	movw	r26, r10
    ca36:	13 96       	adiw	r26, 0x03	; 3
    ca38:	9c 91       	ld	r25, X
    ca3a:	13 97       	sbiw	r26, 0x03	; 3
    ca3c:	12 96       	adiw	r26, 0x02	; 2
    ca3e:	8c 91       	ld	r24, X
    ca40:	12 97       	sbiw	r26, 0x02	; 2
    ca42:	98 17       	cp	r25, r24
    ca44:	49 f0       	breq	.+18     	; 0xca58 <sched_push+0x3ec>
    ca46:	12 96       	adiw	r26, 0x02	; 2
    ca48:	8c 91       	ld	r24, X
    ca4a:	12 97       	sbiw	r26, 0x02	; 2
    ca4c:	8f 5f       	subi	r24, 0xFF	; 255
    ca4e:	15 96       	adiw	r26, 0x05	; 5
    ca50:	9c 91       	ld	r25, X
    ca52:	89 23       	and	r24, r25
    ca54:	f5 01       	movw	r30, r10
    ca56:	82 83       	std	Z+2, r24	; 0x02
    ca58:	d5 01       	movw	r26, r10
    ca5a:	13 96       	adiw	r26, 0x03	; 3
    ca5c:	9c 91       	ld	r25, X
    ca5e:	13 97       	sbiw	r26, 0x03	; 3
    ca60:	12 96       	adiw	r26, 0x02	; 2
    ca62:	8c 91       	ld	r24, X
    ca64:	98 13       	cpse	r25, r24
    ca66:	e6 cf       	rjmp	.-52     	; 0xca34 <sched_push+0x3c8>
    ca68:	2f bf       	out	0x3f, r18	; 63
    ca6a:	29 c0       	rjmp	.+82     	; 0xcabe <sched_push+0x452>
    ca6c:	d3 01       	movw	r26, r6
    ca6e:	c2 01       	movw	r24, r4
    ca70:	aa 27       	eor	r26, r26
    ca72:	bb 27       	eor	r27, r27
    ca74:	89 2b       	or	r24, r25
    ca76:	8a 2b       	or	r24, r26
    ca78:	8b 2b       	or	r24, r27
    ca7a:	09 f1       	breq	.+66     	; 0xcabe <sched_push+0x452>
    ca7c:	41 15       	cp	r20, r1
    ca7e:	51 05       	cpc	r21, r1
    ca80:	61 05       	cpc	r22, r1
    ca82:	71 05       	cpc	r23, r1
    ca84:	e1 f0       	breq	.+56     	; 0xcabe <sched_push+0x452>
    ca86:	d3 01       	movw	r26, r6
    ca88:	c2 01       	movw	r24, r4
    ca8a:	07 2e       	mov	r0, r23
    ca8c:	7e e1       	ldi	r23, 0x1E	; 30
    ca8e:	b6 95       	lsr	r27
    ca90:	a7 95       	ror	r26
    ca92:	97 95       	ror	r25
    ca94:	87 95       	ror	r24
    ca96:	7a 95       	dec	r23
    ca98:	d1 f7       	brne	.-12     	; 0xca8e <sched_push+0x422>
    ca9a:	70 2d       	mov	r23, r0
    ca9c:	e8 2f       	mov	r30, r24
    ca9e:	e1 70       	andi	r30, 0x01	; 1
    caa0:	ce 2e       	mov	r12, r30
    caa2:	83 01       	movw	r16, r6
    caa4:	72 01       	movw	r14, r4
    caa6:	ee 24       	eor	r14, r14
    caa8:	17 fd       	sbrc	r17, 7
    caaa:	e3 94       	inc	r14
    caac:	ff 24       	eor	r15, r15
    caae:	00 27       	eor	r16, r16
    cab0:	11 27       	eor	r17, r17
    cab2:	00 e0       	ldi	r16, 0x00	; 0
    cab4:	9a 01       	movw	r18, r20
    cab6:	ab 01       	movw	r20, r22
    cab8:	60 e0       	ldi	r22, 0x00	; 0
    caba:	c2 01       	movw	r24, r4
    cabc:	d7 dd       	rcall	.-1106   	; 0xc66c <sched_push>
    cabe:	d5 01       	movw	r26, r10
    cac0:	13 96       	adiw	r26, 0x03	; 3
    cac2:	8c 91       	ld	r24, X
    cac4:	13 97       	sbiw	r26, 0x03	; 3
    cac6:	12 96       	adiw	r26, 0x02	; 2
    cac8:	9c 91       	ld	r25, X
    caca:	98 13       	cpse	r25, r24
    cacc:	55 cf       	rjmp	.-342    	; 0xc978 <sched_push+0x30c>
    cace:	0c 81       	ldd	r16, Y+4	; 0x04
    cad0:	1d 81       	ldd	r17, Y+5	; 0x05
    cad2:	2e 81       	ldd	r18, Y+6	; 0x06
    cad4:	3f 81       	ldd	r19, Y+7	; 0x07
    cad6:	01 2b       	or	r16, r17
    cad8:	02 2b       	or	r16, r18
    cada:	03 2b       	or	r16, r19
    cadc:	21 f1       	breq	.+72     	; 0xcb26 <sched_push+0x4ba>
    cade:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <rtc_get_time>
    cae2:	8b 01       	movw	r16, r22
    cae4:	9c 01       	movw	r18, r24
    cae6:	0e 5f       	subi	r16, 0xFE	; 254
    cae8:	1f 4f       	sbci	r17, 0xFF	; 255
    caea:	2f 4f       	sbci	r18, 0xFF	; 255
    caec:	3f 4f       	sbci	r19, 0xFF	; 255
    caee:	6c 81       	ldd	r22, Y+4	; 0x04
    caf0:	7d 81       	ldd	r23, Y+5	; 0x05
    caf2:	8e 81       	ldd	r24, Y+6	; 0x06
    caf4:	9f 81       	ldd	r25, Y+7	; 0x07
    caf6:	60 17       	cp	r22, r16
    caf8:	71 07       	cpc	r23, r17
    cafa:	82 07       	cpc	r24, r18
    cafc:	93 07       	cpc	r25, r19
    cafe:	10 f4       	brcc	.+4      	; 0xcb04 <sched_push+0x498>
    cb00:	c9 01       	movw	r24, r18
    cb02:	b8 01       	movw	r22, r16
    cb04:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <rtc_set_alarm>
    cb08:	0e c0       	rjmp	.+28     	; 0xcb26 <sched_push+0x4ba>
    cb0a:	80 91 a5 25 	lds	r24, 0x25A5	; 0x8025a5 <g_sched_data+0x6>
    cb0e:	80 fd       	sbrc	r24, 0
    cb10:	7b ce       	rjmp	.-778    	; 0xc808 <sched_push+0x19c>
    cb12:	80 e0       	ldi	r24, 0x00	; 0
    cb14:	90 e0       	ldi	r25, 0x00	; 0
    cb16:	88 ce       	rjmp	.-752    	; 0xc828 <sched_push+0x1bc>
    cb18:	83 e8       	ldi	r24, 0x83	; 131
    cb1a:	96 e2       	ldi	r25, 0x26	; 38
    cb1c:	5c dd       	rcall	.-1352   	; 0xc5d6 <sched_getLock>
    cb1e:	88 23       	and	r24, r24
    cb20:	09 f4       	brne	.+2      	; 0xcb24 <sched_push+0x4b8>
    cb22:	18 ce       	rjmp	.-976    	; 0xc754 <sched_push+0xe8>
    cb24:	f2 cf       	rjmp	.-28     	; 0xcb0a <sched_push+0x49e>
    cb26:	2b 96       	adiw	r28, 0x0b	; 11
    cb28:	cd bf       	out	0x3d, r28	; 61
    cb2a:	de bf       	out	0x3e, r29	; 62
    cb2c:	df 91       	pop	r29
    cb2e:	cf 91       	pop	r28
    cb30:	1f 91       	pop	r17
    cb32:	0f 91       	pop	r16
    cb34:	ff 90       	pop	r15
    cb36:	ef 90       	pop	r14
    cb38:	cf 90       	pop	r12
    cb3a:	bf 90       	pop	r11
    cb3c:	af 90       	pop	r10
    cb3e:	9f 90       	pop	r9
    cb40:	8f 90       	pop	r8
    cb42:	7f 90       	pop	r7
    cb44:	6f 90       	pop	r6
    cb46:	5f 90       	pop	r5
    cb48:	4f 90       	pop	r4
    cb4a:	3f 90       	pop	r3
    cb4c:	2f 90       	pop	r2
    cb4e:	08 95       	ret

0000cb50 <dds_update>:
    cb50:	4f 92       	push	r4
    cb52:	5f 92       	push	r5
    cb54:	6f 92       	push	r6
    cb56:	7f 92       	push	r7
    cb58:	8f 92       	push	r8
    cb5a:	9f 92       	push	r9
    cb5c:	af 92       	push	r10
    cb5e:	bf 92       	push	r11
    cb60:	cf 92       	push	r12
    cb62:	df 92       	push	r13
    cb64:	ef 92       	push	r14
    cb66:	ff 92       	push	r15
    cb68:	0f 93       	push	r16
    cb6a:	1f 93       	push	r17
    cb6c:	cf 93       	push	r28
    cb6e:	df 93       	push	r29
    cb70:	cd b7       	in	r28, 0x3d	; 61
    cb72:	de b7       	in	r29, 0x3e	; 62
    cb74:	2d 97       	sbiw	r28, 0x0d	; 13
    cb76:	cd bf       	out	0x3d, r28	; 61
    cb78:	de bf       	out	0x3e, r29	; 62
    cb7a:	6a 83       	std	Y+2, r22	; 0x02
    cb7c:	7b 83       	std	Y+3, r23	; 0x03
    cb7e:	8c 83       	std	Y+4, r24	; 0x04
    cb80:	9d 83       	std	Y+5, r25	; 0x05
    cb82:	2e 83       	std	Y+6, r18	; 0x06
    cb84:	3f 83       	std	Y+7, r19	; 0x07
    cb86:	48 87       	std	Y+8, r20	; 0x08
    cb88:	59 87       	std	Y+9, r21	; 0x09
    cb8a:	ea 86       	std	Y+10, r14	; 0x0a
    cb8c:	fb 86       	std	Y+11, r15	; 0x0b
    cb8e:	0c 87       	std	Y+12, r16	; 0x0c
    cb90:	1d 87       	std	Y+13, r17	; 0x0d
    cb92:	20 e0       	ldi	r18, 0x00	; 0
    cb94:	30 e0       	ldi	r19, 0x00	; 0
    cb96:	a9 01       	movw	r20, r18
    cb98:	0e 94 99 77 	call	0xef32	; 0xef32 <__gesf2>
    cb9c:	88 23       	and	r24, r24
    cb9e:	7c f0       	brlt	.+30     	; 0xcbbe <dds_update+0x6e>
    cba0:	20 e0       	ldi	r18, 0x00	; 0
    cba2:	30 e0       	ldi	r19, 0x00	; 0
    cba4:	4a e7       	ldi	r20, 0x7A	; 122
    cba6:	54 e4       	ldi	r21, 0x44	; 68
    cba8:	6a 81       	ldd	r22, Y+2	; 0x02
    cbaa:	7b 81       	ldd	r23, Y+3	; 0x03
    cbac:	8c 81       	ldd	r24, Y+4	; 0x04
    cbae:	9d 81       	ldd	r25, Y+5	; 0x05
    cbb0:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    cbb4:	0e 94 82 76 	call	0xed04	; 0xed04 <__fixunssfsi>
    cbb8:	2b 01       	movw	r4, r22
    cbba:	3c 01       	movw	r6, r24
    cbbc:	03 c0       	rjmp	.+6      	; 0xcbc4 <dds_update+0x74>
    cbbe:	41 2c       	mov	r4, r1
    cbc0:	51 2c       	mov	r5, r1
    cbc2:	32 01       	movw	r6, r4
    cbc4:	20 e0       	ldi	r18, 0x00	; 0
    cbc6:	30 e0       	ldi	r19, 0x00	; 0
    cbc8:	a9 01       	movw	r20, r18
    cbca:	6e 81       	ldd	r22, Y+6	; 0x06
    cbcc:	7f 81       	ldd	r23, Y+7	; 0x07
    cbce:	88 85       	ldd	r24, Y+8	; 0x08
    cbd0:	99 85       	ldd	r25, Y+9	; 0x09
    cbd2:	0e 94 99 77 	call	0xef32	; 0xef32 <__gesf2>
    cbd6:	88 23       	and	r24, r24
    cbd8:	7c f0       	brlt	.+30     	; 0xcbf8 <dds_update+0xa8>
    cbda:	20 e0       	ldi	r18, 0x00	; 0
    cbdc:	30 e0       	ldi	r19, 0x00	; 0
    cbde:	4a e7       	ldi	r20, 0x7A	; 122
    cbe0:	54 e4       	ldi	r21, 0x44	; 68
    cbe2:	6e 81       	ldd	r22, Y+6	; 0x06
    cbe4:	7f 81       	ldd	r23, Y+7	; 0x07
    cbe6:	88 85       	ldd	r24, Y+8	; 0x08
    cbe8:	99 85       	ldd	r25, Y+9	; 0x09
    cbea:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    cbee:	0e 94 82 76 	call	0xed04	; 0xed04 <__fixunssfsi>
    cbf2:	4b 01       	movw	r8, r22
    cbf4:	5c 01       	movw	r10, r24
    cbf6:	03 c0       	rjmp	.+6      	; 0xcbfe <dds_update+0xae>
    cbf8:	81 2c       	mov	r8, r1
    cbfa:	91 2c       	mov	r9, r1
    cbfc:	54 01       	movw	r10, r8
    cbfe:	20 e0       	ldi	r18, 0x00	; 0
    cc00:	30 e0       	ldi	r19, 0x00	; 0
    cc02:	a9 01       	movw	r20, r18
    cc04:	6a 85       	ldd	r22, Y+10	; 0x0a
    cc06:	7b 85       	ldd	r23, Y+11	; 0x0b
    cc08:	8c 85       	ldd	r24, Y+12	; 0x0c
    cc0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    cc0c:	0e 94 99 77 	call	0xef32	; 0xef32 <__gesf2>
    cc10:	88 23       	and	r24, r24
    cc12:	ac f0       	brlt	.+42     	; 0xcc3e <dds_update+0xee>
    cc14:	20 e0       	ldi	r18, 0x00	; 0
    cc16:	30 e0       	ldi	r19, 0x00	; 0
    cc18:	44 eb       	ldi	r20, 0xB4	; 180
    cc1a:	52 e4       	ldi	r21, 0x42	; 66
    cc1c:	6a 85       	ldd	r22, Y+10	; 0x0a
    cc1e:	7b 85       	ldd	r23, Y+11	; 0x0b
    cc20:	8c 85       	ldd	r24, Y+12	; 0x0c
    cc22:	9d 85       	ldd	r25, Y+13	; 0x0d
    cc24:	0e 94 15 76 	call	0xec2a	; 0xec2a <__divsf3>
    cc28:	20 e0       	ldi	r18, 0x00	; 0
    cc2a:	30 e0       	ldi	r19, 0x00	; 0
    cc2c:	40 e8       	ldi	r20, 0x80	; 128
    cc2e:	5e e4       	ldi	r21, 0x4E	; 78
    cc30:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
    cc34:	0e 94 82 76 	call	0xed04	; 0xed04 <__fixunssfsi>
    cc38:	6b 01       	movw	r12, r22
    cc3a:	7c 01       	movw	r14, r24
    cc3c:	03 c0       	rjmp	.+6      	; 0xcc44 <dds_update+0xf4>
    cc3e:	c1 2c       	mov	r12, r1
    cc40:	d1 2c       	mov	r13, r1
    cc42:	76 01       	movw	r14, r12
    cc44:	8f b7       	in	r24, 0x3f	; 63
    cc46:	89 83       	std	Y+1, r24	; 0x01
    cc48:	f8 94       	cli
    cc4a:	19 81       	ldd	r17, Y+1	; 0x01
    cc4c:	20 e0       	ldi	r18, 0x00	; 0
    cc4e:	30 e0       	ldi	r19, 0x00	; 0
    cc50:	a9 01       	movw	r20, r18
    cc52:	6a 81       	ldd	r22, Y+2	; 0x02
    cc54:	7b 81       	ldd	r23, Y+3	; 0x03
    cc56:	8c 81       	ldd	r24, Y+4	; 0x04
    cc58:	9d 81       	ldd	r25, Y+5	; 0x05
    cc5a:	0e 94 99 77 	call	0xef32	; 0xef32 <__gesf2>
    cc5e:	88 23       	and	r24, r24
    cc60:	44 f0       	brlt	.+16     	; 0xcc72 <dds_update+0x122>
    cc62:	40 92 13 20 	sts	0x2013, r4	; 0x802013 <dds0_freq_mHz>
    cc66:	50 92 14 20 	sts	0x2014, r5	; 0x802014 <dds0_freq_mHz+0x1>
    cc6a:	60 92 15 20 	sts	0x2015, r6	; 0x802015 <dds0_freq_mHz+0x2>
    cc6e:	70 92 16 20 	sts	0x2016, r7	; 0x802016 <dds0_freq_mHz+0x3>
    cc72:	20 e0       	ldi	r18, 0x00	; 0
    cc74:	30 e0       	ldi	r19, 0x00	; 0
    cc76:	a9 01       	movw	r20, r18
    cc78:	6e 81       	ldd	r22, Y+6	; 0x06
    cc7a:	7f 81       	ldd	r23, Y+7	; 0x07
    cc7c:	88 85       	ldd	r24, Y+8	; 0x08
    cc7e:	99 85       	ldd	r25, Y+9	; 0x09
    cc80:	0e 94 99 77 	call	0xef32	; 0xef32 <__gesf2>
    cc84:	88 23       	and	r24, r24
    cc86:	44 f0       	brlt	.+16     	; 0xcc98 <dds_update+0x148>
    cc88:	80 92 0f 20 	sts	0x200F, r8	; 0x80200f <dds1_freq_mHz>
    cc8c:	90 92 10 20 	sts	0x2010, r9	; 0x802010 <dds1_freq_mHz+0x1>
    cc90:	a0 92 11 20 	sts	0x2011, r10	; 0x802011 <dds1_freq_mHz+0x2>
    cc94:	b0 92 12 20 	sts	0x2012, r11	; 0x802012 <dds1_freq_mHz+0x3>
    cc98:	20 e0       	ldi	r18, 0x00	; 0
    cc9a:	30 e0       	ldi	r19, 0x00	; 0
    cc9c:	a9 01       	movw	r20, r18
    cc9e:	6a 85       	ldd	r22, Y+10	; 0x0a
    cca0:	7b 85       	ldd	r23, Y+11	; 0x0b
    cca2:	8c 85       	ldd	r24, Y+12	; 0x0c
    cca4:	9d 85       	ldd	r25, Y+13	; 0x0d
    cca6:	0e 94 99 77 	call	0xef32	; 0xef32 <__gesf2>
    ccaa:	88 23       	and	r24, r24
    ccac:	84 f0       	brlt	.+32     	; 0xccce <dds_update+0x17e>
    ccae:	10 92 0d 25 	sts	0x250D, r1	; 0x80250d <dds0_reg>
    ccb2:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <dds0_reg+0x1>
    ccb6:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <dds0_reg+0x2>
    ccba:	10 92 10 25 	sts	0x2510, r1	; 0x802510 <dds0_reg+0x3>
    ccbe:	c0 92 0b 20 	sts	0x200B, r12	; 0x80200b <dds1_reg>
    ccc2:	d0 92 0c 20 	sts	0x200C, r13	; 0x80200c <dds1_reg+0x1>
    ccc6:	e0 92 0d 20 	sts	0x200D, r14	; 0x80200d <dds1_reg+0x2>
    ccca:	f0 92 0e 20 	sts	0x200E, r15	; 0x80200e <dds1_reg+0x3>
    ccce:	1f bf       	out	0x3f, r17	; 63
    ccd0:	c1 2c       	mov	r12, r1
    ccd2:	e1 2c       	mov	r14, r1
    ccd4:	01 e0       	ldi	r16, 0x01	; 1
    ccd6:	2a e0       	ldi	r18, 0x0A	; 10
    ccd8:	30 e0       	ldi	r19, 0x00	; 0
    ccda:	40 e0       	ldi	r20, 0x00	; 0
    ccdc:	50 e0       	ldi	r21, 0x00	; 0
    ccde:	60 e0       	ldi	r22, 0x00	; 0
    cce0:	88 e3       	ldi	r24, 0x38	; 56
    cce2:	9c e5       	ldi	r25, 0x5C	; 92
    cce4:	c3 dc       	rcall	.-1658   	; 0xc66c <sched_push>
    cce6:	2d 96       	adiw	r28, 0x0d	; 13
    cce8:	cd bf       	out	0x3d, r28	; 61
    ccea:	de bf       	out	0x3e, r29	; 62
    ccec:	df 91       	pop	r29
    ccee:	cf 91       	pop	r28
    ccf0:	1f 91       	pop	r17
    ccf2:	0f 91       	pop	r16
    ccf4:	ff 90       	pop	r15
    ccf6:	ef 90       	pop	r14
    ccf8:	df 90       	pop	r13
    ccfa:	cf 90       	pop	r12
    ccfc:	bf 90       	pop	r11
    ccfe:	af 90       	pop	r10
    cd00:	9f 90       	pop	r9
    cd02:	8f 90       	pop	r8
    cd04:	7f 90       	pop	r7
    cd06:	6f 90       	pop	r6
    cd08:	5f 90       	pop	r5
    cd0a:	4f 90       	pop	r4
    cd0c:	08 95       	ret

0000cd0e <isr_tcc0_ovfl>:
    cd0e:	cf 92       	push	r12
    cd10:	df 92       	push	r13
    cd12:	ef 92       	push	r14
    cd14:	ff 92       	push	r15
    cd16:	0f 93       	push	r16
    cd18:	1f 93       	push	r17
    cd1a:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <rtc_get_time>
    cd1e:	21 e0       	ldi	r18, 0x01	; 1
    cd20:	20 93 0c 08 	sts	0x080C, r18	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    cd24:	20 91 76 27 	lds	r18, 0x2776	; 0x802776 <g_workmode>
    cd28:	22 30       	cpi	r18, 0x02	; 2
    cd2a:	09 f0       	breq	.+2      	; 0xcd2e <isr_tcc0_ovfl+0x20>
    cd2c:	65 c0       	rjmp	.+202    	; 0xcdf8 <isr_tcc0_ovfl+0xea>
    cd2e:	00 91 bd 24 	lds	r16, 0x24BD	; 0x8024bd <last_100ms.7994>
    cd32:	10 91 be 24 	lds	r17, 0x24BE	; 0x8024be <last_100ms.7994+0x1>
    cd36:	20 91 bf 24 	lds	r18, 0x24BF	; 0x8024bf <last_100ms.7994+0x2>
    cd3a:	30 91 c0 24 	lds	r19, 0x24C0	; 0x8024c0 <last_100ms.7994+0x3>
    cd3e:	6b 01       	movw	r12, r22
    cd40:	7c 01       	movw	r14, r24
    cd42:	c0 1a       	sub	r12, r16
    cd44:	d1 0a       	sbc	r13, r17
    cd46:	e2 0a       	sbc	r14, r18
    cd48:	f3 0a       	sbc	r15, r19
    cd4a:	46 e6       	ldi	r20, 0x66	; 102
    cd4c:	c4 16       	cp	r12, r20
    cd4e:	d1 04       	cpc	r13, r1
    cd50:	e1 04       	cpc	r14, r1
    cd52:	f1 04       	cpc	r15, r1
    cd54:	28 f4       	brcc	.+10     	; 0xcd60 <isr_tcc0_ovfl+0x52>
    cd56:	60 17       	cp	r22, r16
    cd58:	71 07       	cpc	r23, r17
    cd5a:	82 07       	cpc	r24, r18
    cd5c:	93 07       	cpc	r25, r19
    cd5e:	58 f4       	brcc	.+22     	; 0xcd76 <isr_tcc0_ovfl+0x68>
    cd60:	60 93 bd 24 	sts	0x24BD, r22	; 0x8024bd <last_100ms.7994>
    cd64:	70 93 be 24 	sts	0x24BE, r23	; 0x8024be <last_100ms.7994+0x1>
    cd68:	80 93 bf 24 	sts	0x24BF, r24	; 0x8024bf <last_100ms.7994+0x2>
    cd6c:	90 93 c0 24 	sts	0x24C0, r25	; 0x8024c0 <last_100ms.7994+0x3>
    cd70:	0e 94 af 31 	call	0x635e	; 0x635e <isr_100ms_twi1_onboard>
    cd74:	41 c0       	rjmp	.+130    	; 0xcdf8 <isr_tcc0_ovfl+0xea>
    cd76:	00 91 b9 24 	lds	r16, 0x24B9	; 0x8024b9 <last_500ms.7995>
    cd7a:	10 91 ba 24 	lds	r17, 0x24BA	; 0x8024ba <last_500ms.7995+0x1>
    cd7e:	20 91 bb 24 	lds	r18, 0x24BB	; 0x8024bb <last_500ms.7995+0x2>
    cd82:	30 91 bc 24 	lds	r19, 0x24BC	; 0x8024bc <last_500ms.7995+0x3>
    cd86:	6b 01       	movw	r12, r22
    cd88:	7c 01       	movw	r14, r24
    cd8a:	c0 1a       	sub	r12, r16
    cd8c:	d1 0a       	sbc	r13, r17
    cd8e:	e2 0a       	sbc	r14, r18
    cd90:	f3 0a       	sbc	r15, r19
    cd92:	c1 14       	cp	r12, r1
    cd94:	42 e0       	ldi	r20, 0x02	; 2
    cd96:	d4 06       	cpc	r13, r20
    cd98:	e1 04       	cpc	r14, r1
    cd9a:	f1 04       	cpc	r15, r1
    cd9c:	28 f4       	brcc	.+10     	; 0xcda8 <isr_tcc0_ovfl+0x9a>
    cd9e:	60 17       	cp	r22, r16
    cda0:	71 07       	cpc	r23, r17
    cda2:	82 07       	cpc	r24, r18
    cda4:	93 07       	cpc	r25, r19
    cda6:	30 f5       	brcc	.+76     	; 0xcdf4 <isr_tcc0_ovfl+0xe6>
    cda8:	60 93 b9 24 	sts	0x24B9, r22	; 0x8024b9 <last_500ms.7995>
    cdac:	70 93 ba 24 	sts	0x24BA, r23	; 0x8024ba <last_500ms.7995+0x1>
    cdb0:	80 93 bb 24 	sts	0x24BB, r24	; 0x8024bb <last_500ms.7995+0x2>
    cdb4:	90 93 bc 24 	sts	0x24BC, r25	; 0x8024bc <last_500ms.7995+0x3>
    cdb8:	0e 94 c5 32 	call	0x658a	; 0x658a <isr_500ms_twi1_onboard>
    cdbc:	c1 2c       	mov	r12, r1
    cdbe:	e1 2c       	mov	r14, r1
    cdc0:	01 e0       	ldi	r16, 0x01	; 1
    cdc2:	24 e6       	ldi	r18, 0x64	; 100
    cdc4:	30 e0       	ldi	r19, 0x00	; 0
    cdc6:	40 e0       	ldi	r20, 0x00	; 0
    cdc8:	50 e0       	ldi	r21, 0x00	; 0
    cdca:	60 e0       	ldi	r22, 0x00	; 0
    cdcc:	8a e3       	ldi	r24, 0x3A	; 58
    cdce:	9d e5       	ldi	r25, 0x5D	; 93
    cdd0:	4d dc       	rcall	.-1894   	; 0xc66c <sched_push>
    cdd2:	24 e6       	ldi	r18, 0x64	; 100
    cdd4:	30 e0       	ldi	r19, 0x00	; 0
    cdd6:	40 e0       	ldi	r20, 0x00	; 0
    cdd8:	50 e0       	ldi	r21, 0x00	; 0
    cdda:	60 e0       	ldi	r22, 0x00	; 0
    cddc:	88 e3       	ldi	r24, 0x38	; 56
    cdde:	9c e5       	ldi	r25, 0x5C	; 92
    cde0:	45 dc       	rcall	.-1910   	; 0xc66c <sched_push>
    cde2:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <rtc_get_time>
    cde6:	6e 5f       	subi	r22, 0xFE	; 254
    cde8:	7f 4f       	sbci	r23, 0xFF	; 255
    cdea:	8f 4f       	sbci	r24, 0xFF	; 255
    cdec:	9f 4f       	sbci	r25, 0xFF	; 255
    cdee:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <rtc_set_alarm>
    cdf2:	02 c0       	rjmp	.+4      	; 0xcdf8 <isr_tcc0_ovfl+0xea>
    cdf4:	0e 94 36 33 	call	0x666c	; 0x666c <isr_sparetime_twi1_onboard>
    cdf8:	1f 91       	pop	r17
    cdfa:	0f 91       	pop	r16
    cdfc:	ff 90       	pop	r15
    cdfe:	ef 90       	pop	r14
    ce00:	df 90       	pop	r13
    ce02:	cf 90       	pop	r12
    ce04:	08 95       	ret

0000ce06 <sched_pop>:
    ce06:	7f 92       	push	r7
    ce08:	8f 92       	push	r8
    ce0a:	9f 92       	push	r9
    ce0c:	af 92       	push	r10
    ce0e:	bf 92       	push	r11
    ce10:	cf 92       	push	r12
    ce12:	df 92       	push	r13
    ce14:	ef 92       	push	r14
    ce16:	ff 92       	push	r15
    ce18:	0f 93       	push	r16
    ce1a:	1f 93       	push	r17
    ce1c:	cf 93       	push	r28
    ce1e:	df 93       	push	r29
    ce20:	1f 92       	push	r1
    ce22:	cd b7       	in	r28, 0x3d	; 61
    ce24:	de b7       	in	r29, 0x3e	; 62
    ce26:	4b 01       	movw	r8, r22
    ce28:	5c 01       	movw	r10, r24
    ce2a:	83 e8       	ldi	r24, 0x83	; 131
    ce2c:	96 e2       	ldi	r25, 0x26	; 38
    ce2e:	d3 db       	rcall	.-2138   	; 0xc5d6 <sched_getLock>
    ce30:	81 11       	cpse	r24, r1
    ce32:	04 c0       	rjmp	.+8      	; 0xce3c <sched_pop+0x36>
    ce34:	81 e0       	ldi	r24, 0x01	; 1
    ce36:	80 93 7f 26 	sts	0x267F, r24	; 0x80267f <g_sched_pop_again>
    ce3a:	cd c0       	rjmp	.+410    	; 0xcfd6 <sched_pop+0x1d0>
    ce3c:	70 90 7f 25 	lds	r7, 0x257F	; 0x80257f <g_sched_sort>
    ce40:	77 20       	and	r7, r7
    ce42:	09 f4       	brne	.+2      	; 0xce46 <sched_pop+0x40>
    ce44:	c4 c0       	rjmp	.+392    	; 0xcfce <sched_pop+0x1c8>
    ce46:	87 2d       	mov	r24, r7
    ce48:	90 e0       	ldi	r25, 0x00	; 0
    ce4a:	01 97       	sbiw	r24, 0x01	; 1
    ce4c:	fc 01       	movw	r30, r24
    ce4e:	ee 0f       	add	r30, r30
    ce50:	ff 1f       	adc	r31, r31
    ce52:	ee 0f       	add	r30, r30
    ce54:	ff 1f       	adc	r31, r31
    ce56:	ee 0f       	add	r30, r30
    ce58:	ff 1f       	adc	r31, r31
    ce5a:	e8 1b       	sub	r30, r24
    ce5c:	f9 0b       	sbc	r31, r25
    ce5e:	eb 55       	subi	r30, 0x5B	; 91
    ce60:	fa 4d       	sbci	r31, 0xDA	; 218
    ce62:	20 81       	ld	r18, Z
    ce64:	20 ff       	sbrs	r18, 0
    ce66:	b3 c0       	rjmp	.+358    	; 0xcfce <sched_pop+0x1c8>
    ce68:	fc 01       	movw	r30, r24
    ce6a:	ee 0f       	add	r30, r30
    ce6c:	ff 1f       	adc	r31, r31
    ce6e:	ee 0f       	add	r30, r30
    ce70:	ff 1f       	adc	r31, r31
    ce72:	ee 0f       	add	r30, r30
    ce74:	ff 1f       	adc	r31, r31
    ce76:	e8 1b       	sub	r30, r24
    ce78:	f9 0b       	sbc	r31, r25
    ce7a:	e1 56       	subi	r30, 0x61	; 97
    ce7c:	fa 4d       	sbci	r31, 0xDA	; 218
    ce7e:	c0 80       	ld	r12, Z
    ce80:	d1 80       	ldd	r13, Z+1	; 0x01
    ce82:	e2 80       	ldd	r14, Z+2	; 0x02
    ce84:	f3 80       	ldd	r15, Z+3	; 0x03
    ce86:	0f e7       	ldi	r16, 0x7F	; 127
    ce88:	15 e2       	ldi	r17, 0x25	; 37
    ce8a:	74 c0       	rjmp	.+232    	; 0xcf74 <sched_pop+0x16e>
    ce8c:	87 2d       	mov	r24, r7
    ce8e:	90 e0       	ldi	r25, 0x00	; 0
    ce90:	01 97       	sbiw	r24, 0x01	; 1
    ce92:	dc 01       	movw	r26, r24
    ce94:	aa 0f       	add	r26, r26
    ce96:	bb 1f       	adc	r27, r27
    ce98:	aa 0f       	add	r26, r26
    ce9a:	bb 1f       	adc	r27, r27
    ce9c:	aa 0f       	add	r26, r26
    ce9e:	bb 1f       	adc	r27, r27
    cea0:	a8 1b       	sub	r26, r24
    cea2:	b9 0b       	sbc	r27, r25
    cea4:	fd 01       	movw	r30, r26
    cea6:	e1 56       	subi	r30, 0x61	; 97
    cea8:	fa 4d       	sbci	r31, 0xDA	; 218
    ceaa:	04 80       	ldd	r0, Z+4	; 0x04
    ceac:	f5 81       	ldd	r31, Z+5	; 0x05
    ceae:	e0 2d       	mov	r30, r0
    ceb0:	ab 55       	subi	r26, 0x5B	; 91
    ceb2:	ba 4d       	sbci	r27, 0xDA	; 218
    ceb4:	6c 91       	ld	r22, X
    ceb6:	66 95       	lsr	r22
    ceb8:	66 95       	lsr	r22
    ceba:	66 95       	lsr	r22
    cebc:	63 70       	andi	r22, 0x03	; 3
    cebe:	8c 91       	ld	r24, X
    cec0:	81 fb       	bst	r24, 1
    cec2:	77 27       	eor	r23, r23
    cec4:	70 f9       	bld	r23, 0
    cec6:	4c 91       	ld	r20, X
    cec8:	42 fb       	bst	r20, 2
    ceca:	44 27       	eor	r20, r20
    cecc:	40 f9       	bld	r20, 0
    cece:	8c 91       	ld	r24, X
    ced0:	8e 7f       	andi	r24, 0xFE	; 254
    ced2:	8c 93       	st	X, r24
    ced4:	80 e0       	ldi	r24, 0x00	; 0
    ced6:	90 e0       	ldi	r25, 0x00	; 0
    ced8:	9c 01       	movw	r18, r24
    ceda:	2f 5f       	subi	r18, 0xFF	; 255
    cedc:	3f 4f       	sbci	r19, 0xFF	; 255
    cede:	d9 01       	movw	r26, r18
    cee0:	a1 58       	subi	r26, 0x81	; 129
    cee2:	ba 4d       	sbci	r27, 0xDA	; 218
    cee4:	5c 91       	ld	r21, X
    cee6:	dc 01       	movw	r26, r24
    cee8:	a1 58       	subi	r26, 0x81	; 129
    ceea:	ba 4d       	sbci	r27, 0xDA	; 218
    ceec:	5c 93       	st	X, r21
    ceee:	c9 01       	movw	r24, r18
    cef0:	2f 31       	cpi	r18, 0x1F	; 31
    cef2:	31 05       	cpc	r19, r1
    cef4:	89 f7       	brne	.-30     	; 0xced8 <sched_pop+0xd2>
    cef6:	d8 01       	movw	r26, r16
    cef8:	5f 96       	adiw	r26, 0x1f	; 31
    cefa:	1c 92       	st	X, r1
    cefc:	30 97       	sbiw	r30, 0x00	; 0
    cefe:	b1 f0       	breq	.+44     	; 0xcf2c <sched_pop+0x126>
    cf00:	8f b7       	in	r24, 0x3f	; 63
    cf02:	89 83       	std	Y+1, r24	; 0x01
    cf04:	f8 94       	cli
    cf06:	79 80       	ldd	r7, Y+1	; 0x01
    cf08:	77 23       	and	r23, r23
    cf0a:	11 f0       	breq	.+4      	; 0xcf10 <sched_pop+0x10a>
    cf0c:	f8 94       	cli
    cf0e:	01 c0       	rjmp	.+2      	; 0xcf12 <sched_pop+0x10c>
    cf10:	78 94       	sei
    cf12:	66 23       	and	r22, r22
    cf14:	19 f0       	breq	.+6      	; 0xcf1c <sched_pop+0x116>
    cf16:	61 30       	cpi	r22, 0x01	; 1
    cf18:	29 f0       	breq	.+10     	; 0xcf24 <sched_pop+0x11e>
    cf1a:	07 c0       	rjmp	.+14     	; 0xcf2a <sched_pop+0x124>
    cf1c:	c7 01       	movw	r24, r14
    cf1e:	b6 01       	movw	r22, r12
    cf20:	19 95       	eicall
    cf22:	03 c0       	rjmp	.+6      	; 0xcf2a <sched_pop+0x124>
    cf24:	c7 01       	movw	r24, r14
    cf26:	b6 01       	movw	r22, r12
    cf28:	19 95       	eicall
    cf2a:	7f be       	out	0x3f, r7	; 63
    cf2c:	f8 01       	movw	r30, r16
    cf2e:	70 80       	ld	r7, Z
    cf30:	77 20       	and	r7, r7
    cf32:	41 f1       	breq	.+80     	; 0xcf84 <sched_pop+0x17e>
    cf34:	87 2d       	mov	r24, r7
    cf36:	90 e0       	ldi	r25, 0x00	; 0
    cf38:	01 97       	sbiw	r24, 0x01	; 1
    cf3a:	fc 01       	movw	r30, r24
    cf3c:	ee 0f       	add	r30, r30
    cf3e:	ff 1f       	adc	r31, r31
    cf40:	ee 0f       	add	r30, r30
    cf42:	ff 1f       	adc	r31, r31
    cf44:	ee 0f       	add	r30, r30
    cf46:	ff 1f       	adc	r31, r31
    cf48:	e8 1b       	sub	r30, r24
    cf4a:	f9 0b       	sbc	r31, r25
    cf4c:	eb 55       	subi	r30, 0x5B	; 91
    cf4e:	fa 4d       	sbci	r31, 0xDA	; 218
    cf50:	20 81       	ld	r18, Z
    cf52:	20 ff       	sbrs	r18, 0
    cf54:	17 c0       	rjmp	.+46     	; 0xcf84 <sched_pop+0x17e>
    cf56:	fc 01       	movw	r30, r24
    cf58:	ee 0f       	add	r30, r30
    cf5a:	ff 1f       	adc	r31, r31
    cf5c:	ee 0f       	add	r30, r30
    cf5e:	ff 1f       	adc	r31, r31
    cf60:	ee 0f       	add	r30, r30
    cf62:	ff 1f       	adc	r31, r31
    cf64:	e8 1b       	sub	r30, r24
    cf66:	f9 0b       	sbc	r31, r25
    cf68:	e1 56       	subi	r30, 0x61	; 97
    cf6a:	fa 4d       	sbci	r31, 0xDA	; 218
    cf6c:	c0 80       	ld	r12, Z
    cf6e:	d1 80       	ldd	r13, Z+1	; 0x01
    cf70:	e2 80       	ldd	r14, Z+2	; 0x02
    cf72:	f3 80       	ldd	r15, Z+3	; 0x03
    cf74:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <rtc_get_time>
    cf78:	6c 15       	cp	r22, r12
    cf7a:	7d 05       	cpc	r23, r13
    cf7c:	8e 05       	cpc	r24, r14
    cf7e:	9f 05       	cpc	r25, r15
    cf80:	08 f0       	brcs	.+2      	; 0xcf84 <sched_pop+0x17e>
    cf82:	84 cf       	rjmp	.-248    	; 0xce8c <sched_pop+0x86>
    cf84:	83 e8       	ldi	r24, 0x83	; 131
    cf86:	96 e2       	ldi	r25, 0x26	; 38
    cf88:	3e db       	rcall	.-2436   	; 0xc606 <sched_freeLock>
    cf8a:	c1 14       	cp	r12, r1
    cf8c:	d1 04       	cpc	r13, r1
    cf8e:	e1 04       	cpc	r14, r1
    cf90:	f1 04       	cpc	r15, r1
    cf92:	99 f0       	breq	.+38     	; 0xcfba <sched_pop+0x1b4>
    cf94:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <rtc_get_time>
    cf98:	8b 01       	movw	r16, r22
    cf9a:	9c 01       	movw	r18, r24
    cf9c:	0e 5f       	subi	r16, 0xFE	; 254
    cf9e:	1f 4f       	sbci	r17, 0xFF	; 255
    cfa0:	2f 4f       	sbci	r18, 0xFF	; 255
    cfa2:	3f 4f       	sbci	r19, 0xFF	; 255
    cfa4:	c7 01       	movw	r24, r14
    cfa6:	b6 01       	movw	r22, r12
    cfa8:	c0 16       	cp	r12, r16
    cfaa:	d1 06       	cpc	r13, r17
    cfac:	e2 06       	cpc	r14, r18
    cfae:	f3 06       	cpc	r15, r19
    cfb0:	10 f4       	brcc	.+4      	; 0xcfb6 <sched_pop+0x1b0>
    cfb2:	c9 01       	movw	r24, r18
    cfb4:	b8 01       	movw	r22, r16
    cfb6:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <rtc_set_alarm>
    cfba:	80 91 7f 26 	lds	r24, 0x267F	; 0x80267f <g_sched_pop_again>
    cfbe:	88 23       	and	r24, r24
    cfc0:	51 f0       	breq	.+20     	; 0xcfd6 <sched_pop+0x1d0>
    cfc2:	10 92 7f 26 	sts	0x267F, r1	; 0x80267f <g_sched_pop_again>
    cfc6:	c5 01       	movw	r24, r10
    cfc8:	b4 01       	movw	r22, r8
    cfca:	1d df       	rcall	.-454    	; 0xce06 <sched_pop>
    cfcc:	04 c0       	rjmp	.+8      	; 0xcfd6 <sched_pop+0x1d0>
    cfce:	83 e8       	ldi	r24, 0x83	; 131
    cfd0:	96 e2       	ldi	r25, 0x26	; 38
    cfd2:	19 db       	rcall	.-2510   	; 0xc606 <sched_freeLock>
    cfd4:	f2 cf       	rjmp	.-28     	; 0xcfba <sched_pop+0x1b4>
    cfd6:	0f 90       	pop	r0
    cfd8:	df 91       	pop	r29
    cfda:	cf 91       	pop	r28
    cfdc:	1f 91       	pop	r17
    cfde:	0f 91       	pop	r16
    cfe0:	ff 90       	pop	r15
    cfe2:	ef 90       	pop	r14
    cfe4:	df 90       	pop	r13
    cfe6:	cf 90       	pop	r12
    cfe8:	bf 90       	pop	r11
    cfea:	af 90       	pop	r10
    cfec:	9f 90       	pop	r9
    cfee:	8f 90       	pop	r8
    cff0:	7f 90       	pop	r7
    cff2:	08 95       	ret

0000cff4 <isr_rtc_alarm>:
    cff4:	78 94       	sei
    cff6:	07 cf       	rjmp	.-498    	; 0xce06 <sched_pop>
    cff8:	08 95       	ret

0000cffa <yield_ms>:
    cffa:	cf 92       	push	r12
    cffc:	ef 92       	push	r14
    cffe:	0f 93       	push	r16
    d000:	1f 93       	push	r17
    d002:	cf 93       	push	r28
    d004:	df 93       	push	r29
    d006:	1f 92       	push	r1
    d008:	cd b7       	in	r28, 0x3d	; 61
    d00a:	de b7       	in	r29, 0x3e	; 62
    d00c:	2f b7       	in	r18, 0x3f	; 63
    d00e:	29 83       	std	Y+1, r18	; 0x01
    d010:	f8 94       	cli
    d012:	19 81       	ldd	r17, Y+1	; 0x01
    d014:	78 94       	sei
    d016:	21 e0       	ldi	r18, 0x01	; 1
    d018:	20 93 80 26 	sts	0x2680, r18	; 0x802680 <g_sched_yield>
    d01c:	9c 01       	movw	r18, r24
    d01e:	40 e0       	ldi	r20, 0x00	; 0
    d020:	50 e0       	ldi	r21, 0x00	; 0
    d022:	c1 2c       	mov	r12, r1
    d024:	e1 2c       	mov	r14, r1
    d026:	01 e0       	ldi	r16, 0x01	; 1
    d028:	60 e0       	ldi	r22, 0x00	; 0
    d02a:	84 e4       	ldi	r24, 0x44	; 68
    d02c:	9a e5       	ldi	r25, 0x5A	; 90
    d02e:	1e db       	rcall	.-2500   	; 0xc66c <sched_push>
    d030:	fa da       	rcall	.-2572   	; 0xc626 <sched_doSleep>
    d032:	80 91 80 26 	lds	r24, 0x2680	; 0x802680 <g_sched_yield>
    d036:	81 11       	cpse	r24, r1
    d038:	fb cf       	rjmp	.-10     	; 0xd030 <yield_ms+0x36>
    d03a:	1f bf       	out	0x3f, r17	; 63
    d03c:	0f 90       	pop	r0
    d03e:	df 91       	pop	r29
    d040:	cf 91       	pop	r28
    d042:	1f 91       	pop	r17
    d044:	0f 91       	pop	r16
    d046:	ef 90       	pop	r14
    d048:	cf 90       	pop	r12
    d04a:	08 95       	ret

0000d04c <main>:
    d04c:	cf 92       	push	r12
    d04e:	df 92       	push	r13
    d050:	ef 92       	push	r14
    d052:	ff 92       	push	r15
    d054:	cf 93       	push	r28
    d056:	40 e2       	ldi	r20, 0x20	; 32
    d058:	6b ed       	ldi	r22, 0xDB	; 219
    d05a:	78 e2       	ldi	r23, 0x28	; 40
    d05c:	85 ed       	ldi	r24, 0xD5	; 213
    d05e:	98 e2       	ldi	r25, 0x28	; 40
    d060:	0e 94 b0 23 	call	0x4760	; 0x4760 <fifo_init>
    d064:	c1 e0       	ldi	r28, 0x01	; 1
    d066:	c0 93 76 27 	sts	0x2776, r28	; 0x802776 <g_workmode>
    d06a:	e0 ea       	ldi	r30, 0xA0	; 160
    d06c:	f0 e0       	ldi	r31, 0x00	; 0
    d06e:	87 e0       	ldi	r24, 0x07	; 7
    d070:	82 83       	std	Z+2, r24	; 0x02
    d072:	82 83       	std	Z+2, r24	; 0x02
    d074:	82 81       	ldd	r24, Z+2	; 0x02
    d076:	8f 77       	andi	r24, 0x7F	; 127
    d078:	82 83       	std	Z+2, r24	; 0x02
    d07a:	11 82       	std	Z+1, r1	; 0x01
    d07c:	b1 d0       	rcall	.+354    	; 0xd1e0 <sysclk_init>
    d07e:	eb e5       	ldi	r30, 0x5B	; 91
    d080:	f9 e2       	ldi	r31, 0x29	; 41
    d082:	10 82       	st	Z, r1
    d084:	11 82       	std	Z+1, r1	; 0x01
    d086:	12 82       	std	Z+2, r1	; 0x02
    d088:	13 82       	std	Z+3, r1	; 0x03
    d08a:	14 82       	std	Z+4, r1	; 0x04
    d08c:	c5 83       	std	Z+5, r28	; 0x05
    d08e:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <rtc_init>
    d092:	8a ef       	ldi	r24, 0xFA	; 250
    d094:	97 e6       	ldi	r25, 0x67	; 103
    d096:	0e 94 6f 25 	call	0x4ade	; 0x4ade <rtc_set_callback>
    d09a:	62 e0       	ldi	r22, 0x02	; 2
    d09c:	80 e0       	ldi	r24, 0x00	; 0
    d09e:	21 d1       	rcall	.+578    	; 0xd2e2 <sysclk_enable_module>
    d0a0:	e0 e8       	ldi	r30, 0x80	; 128
    d0a2:	f1 e0       	ldi	r31, 0x01	; 1
    d0a4:	86 ec       	ldi	r24, 0xC6	; 198
    d0a6:	80 83       	st	Z, r24
    d0a8:	10 86       	std	Z+8, r1	; 0x08
    d0aa:	81 83       	std	Z+1, r24	; 0x01
    d0ac:	11 86       	std	Z+9, r1	; 0x09
    d0ae:	82 83       	std	Z+2, r24	; 0x02
    d0b0:	12 86       	std	Z+10, r1	; 0x0a
    d0b2:	83 83       	std	Z+3, r24	; 0x03
    d0b4:	13 86       	std	Z+11, r1	; 0x0b
    d0b6:	88 ee       	ldi	r24, 0xE8	; 232
    d0b8:	84 83       	std	Z+4, r24	; 0x04
    d0ba:	14 86       	std	Z+12, r1	; 0x0c
    d0bc:	0e 94 93 5e 	call	0xbd26	; 0xbd26 <tc_init>
    d0c0:	0e 94 8d 1c 	call	0x391a	; 0x391a <serial_init>
    d0c4:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    d0c8:	81 11       	cpse	r24, r1
    d0ca:	0b d8       	rcall	.-4074   	; 0xc0e2 <adc_init>
    d0cc:	80 91 7d 27 	lds	r24, 0x277D	; 0x80277d <g_dac_enabled>
    d0d0:	81 11       	cpse	r24, r1
    d0d2:	0e 94 f3 5e 	call	0xbde6	; 0xbde6 <dac_init>
    d0d6:	0e 94 a5 31 	call	0x634a	; 0x634a <twi_init>
    d0da:	0e 94 d8 43 	call	0x87b0	; 0x87b0 <board_init>
    d0de:	80 e0       	ldi	r24, 0x00	; 0
    d0e0:	0e 94 aa 23 	call	0x4754	; 0x4754 <nvm_init>
    d0e4:	78 94       	sei
    d0e6:	0e 94 d6 5e 	call	0xbdac	; 0xbdac <tc_start>
    d0ea:	80 91 7d 27 	lds	r24, 0x277D	; 0x80277d <g_dac_enabled>
    d0ee:	81 11       	cpse	r24, r1
    d0f0:	0e 94 bc 5f 	call	0xbf78	; 0xbf78 <dac_start>
    d0f4:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    d0f8:	88 23       	and	r24, r24
    d0fa:	09 f4       	brne	.+2      	; 0xd0fe <main+0xb2>
    d0fc:	57 c0       	rjmp	.+174    	; 0xd1ac <main+0x160>
    d0fe:	80 e0       	ldi	r24, 0x00	; 0
    d100:	92 e0       	ldi	r25, 0x02	; 2
    d102:	0e 94 39 44 	call	0x8872	; 0x8872 <adc_enable>
    d106:	80 e4       	ldi	r24, 0x40	; 64
    d108:	92 e0       	ldi	r25, 0x02	; 2
    d10a:	0e 94 39 44 	call	0x8872	; 0x8872 <adc_enable>
    d10e:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <usb_init>
    d112:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <twi_start>
    d116:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <serial_start>
    d11a:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <printHelp>
    d11e:	80 e0       	ldi	r24, 0x00	; 0
    d120:	0e 94 30 31 	call	0x6260	; 0x6260 <twi2_set_leds>
    d124:	81 e0       	ldi	r24, 0x01	; 1
    d126:	80 93 fa 26 	sts	0x26FA, r24	; 0x8026fa <g_twi2_lcd_repaint>
    d12a:	82 e0       	ldi	r24, 0x02	; 2
    d12c:	80 93 76 27 	sts	0x2776, r24	; 0x802776 <g_workmode>
    d130:	82 e0       	ldi	r24, 0x02	; 2
    d132:	82 30       	cpi	r24, 0x02	; 2
    d134:	71 f4       	brne	.+28     	; 0xd152 <main+0x106>
    d136:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <rtc_get_time>
    d13a:	6b 01       	movw	r12, r22
    d13c:	7c 01       	movw	r14, r24
    d13e:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <task_serial>
    d142:	c7 01       	movw	r24, r14
    d144:	b6 01       	movw	r22, r12
    d146:	0e 94 ae 42 	call	0x855c	; 0x855c <task_twi>
    d14a:	c7 01       	movw	r24, r14
    d14c:	b6 01       	movw	r22, r12
    d14e:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <task_usb>
    d152:	80 e0       	ldi	r24, 0x00	; 0
    d154:	90 e0       	ldi	r25, 0x00	; 0
    d156:	51 df       	rcall	.-350    	; 0xcffa <yield_ms>
    d158:	80 91 76 27 	lds	r24, 0x2776	; 0x802776 <g_workmode>
    d15c:	81 11       	cpse	r24, r1
    d15e:	e9 cf       	rjmp	.-46     	; 0xd132 <main+0xe6>
    d160:	0e 94 30 31 	call	0x6260	; 0x6260 <twi2_set_leds>
    d164:	f8 94       	cli
    d166:	f8 94       	cli
    d168:	80 91 5b 29 	lds	r24, 0x295B	; 0x80295b <sleepmgr_locks>
    d16c:	81 11       	cpse	r24, r1
    d16e:	09 c0       	rjmp	.+18     	; 0xd182 <main+0x136>
    d170:	ac e5       	ldi	r26, 0x5C	; 92
    d172:	b9 e2       	ldi	r27, 0x29	; 41
    d174:	e0 e0       	ldi	r30, 0x00	; 0
    d176:	ef 5f       	subi	r30, 0xFF	; 255
    d178:	8d 91       	ld	r24, X+
    d17a:	88 23       	and	r24, r24
    d17c:	e1 f3       	breq	.-8      	; 0xd176 <main+0x12a>
    d17e:	e1 11       	cpse	r30, r1
    d180:	02 c0       	rjmp	.+4      	; 0xd186 <main+0x13a>
    d182:	78 94       	sei
    d184:	25 c0       	rjmp	.+74     	; 0xd1d0 <main+0x184>
    d186:	a8 e4       	ldi	r26, 0x48	; 72
    d188:	b0 e0       	ldi	r27, 0x00	; 0
    d18a:	8c 91       	ld	r24, X
    d18c:	f0 e0       	ldi	r31, 0x00	; 0
    d18e:	ec 59       	subi	r30, 0x9C	; 156
    d190:	ff 4d       	sbci	r31, 0xDF	; 223
    d192:	81 7f       	andi	r24, 0xF1	; 241
    d194:	90 81       	ld	r25, Z
    d196:	89 2b       	or	r24, r25
    d198:	8c 93       	st	X, r24
    d19a:	8c 91       	ld	r24, X
    d19c:	81 60       	ori	r24, 0x01	; 1
    d19e:	8c 93       	st	X, r24
    d1a0:	78 94       	sei
    d1a2:	88 95       	sleep
    d1a4:	8c 91       	ld	r24, X
    d1a6:	8e 7f       	andi	r24, 0xFE	; 254
    d1a8:	8c 93       	st	X, r24
    d1aa:	12 c0       	rjmp	.+36     	; 0xd1d0 <main+0x184>
    d1ac:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <usb_init>
    d1b0:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <twi_start>
    d1b4:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <serial_start>
    d1b8:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <printHelp>
    d1bc:	80 e0       	ldi	r24, 0x00	; 0
    d1be:	0e 94 30 31 	call	0x6260	; 0x6260 <twi2_set_leds>
    d1c2:	81 e0       	ldi	r24, 0x01	; 1
    d1c4:	80 93 fa 26 	sts	0x26FA, r24	; 0x8026fa <g_twi2_lcd_repaint>
    d1c8:	82 e0       	ldi	r24, 0x02	; 2
    d1ca:	80 93 76 27 	sts	0x2776, r24	; 0x802776 <g_workmode>
    d1ce:	b0 cf       	rjmp	.-160    	; 0xd130 <main+0xe4>
    d1d0:	80 e0       	ldi	r24, 0x00	; 0
    d1d2:	90 e0       	ldi	r25, 0x00	; 0
    d1d4:	cf 91       	pop	r28
    d1d6:	ff 90       	pop	r15
    d1d8:	ef 90       	pop	r14
    d1da:	df 90       	pop	r13
    d1dc:	cf 90       	pop	r12
    d1de:	08 95       	ret

0000d1e0 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    d1e0:	cf 93       	push	r28
    d1e2:	df 93       	push	r29
    d1e4:	cd b7       	in	r28, 0x3d	; 61
    d1e6:	de b7       	in	r29, 0x3e	; 62
    d1e8:	28 97       	sbiw	r28, 0x08	; 8
    d1ea:	cd bf       	out	0x3d, r28	; 61
    d1ec:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    d1ee:	8f ef       	ldi	r24, 0xFF	; 255
    d1f0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    d1f4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    d1f8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    d1fc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    d200:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    d204:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    d208:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    d20c:	61 e0       	ldi	r22, 0x01	; 1
    d20e:	81 e4       	ldi	r24, 0x41	; 65
    d210:	90 e0       	ldi	r25, 0x00	; 0
    d212:	0e 94 05 72 	call	0xe40a	; 0xe40a <ccp_write_io>
    d216:	6c e1       	ldi	r22, 0x1C	; 28
    d218:	70 e0       	ldi	r23, 0x00	; 0
    d21a:	82 e0       	ldi	r24, 0x02	; 2
    d21c:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    d220:	8a 83       	std	Y+2, r24	; 0x02
    d222:	6d e1       	ldi	r22, 0x1D	; 29
    d224:	70 e0       	ldi	r23, 0x00	; 0
    d226:	82 e0       	ldi	r24, 0x02	; 2
    d228:	0e 94 fb 71 	call	0xe3f6	; 0xe3f6 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    d22c:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    d22e:	89 81       	ldd	r24, Y+1	; 0x01
    d230:	9a 81       	ldd	r25, Y+2	; 0x02
    d232:	01 96       	adiw	r24, 0x01	; 1
    d234:	21 f4       	brne	.+8      	; 0xd23e <sysclk_init+0x5e>
		cal = 0x2340;
    d236:	80 e4       	ldi	r24, 0x40	; 64
    d238:	93 e2       	ldi	r25, 0x23	; 35
    d23a:	89 83       	std	Y+1, r24	; 0x01
    d23c:	9a 83       	std	Y+2, r25	; 0x02
    d23e:	89 81       	ldd	r24, Y+1	; 0x01
    d240:	9a 81       	ldd	r25, Y+2	; 0x02
    d242:	8b 83       	std	Y+3, r24	; 0x03
    d244:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    d246:	e0 e6       	ldi	r30, 0x60	; 96
    d248:	f0 e0       	ldi	r31, 0x00	; 0
    d24a:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    d24c:	8c 81       	ldd	r24, Y+4	; 0x04
    d24e:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    d250:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    d254:	84 fd       	sbrc	r24, 4
    d256:	21 c0       	rjmp	.+66     	; 0xd29a <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    d258:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    d25c:	83 fd       	sbrc	r24, 3
    d25e:	0e c0       	rjmp	.+28     	; 0xd27c <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    d260:	e0 e5       	ldi	r30, 0x50	; 80
    d262:	f0 e0       	ldi	r31, 0x00	; 0
    d264:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d266:	8f b7       	in	r24, 0x3f	; 63
    d268:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    d26a:	f8 94       	cli
	return flags;
    d26c:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    d26e:	80 81       	ld	r24, Z
    d270:	88 60       	ori	r24, 0x08	; 8
    d272:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d274:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    d276:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    d278:	83 ff       	sbrs	r24, 3
    d27a:	fd cf       	rjmp	.-6      	; 0xd276 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d27c:	8f b7       	in	r24, 0x3f	; 63
    d27e:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    d280:	f8 94       	cli
	return flags;
    d282:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    d284:	e0 e5       	ldi	r30, 0x50	; 80
    d286:	f0 e0       	ldi	r31, 0x00	; 0
    d288:	83 ec       	ldi	r24, 0xC3	; 195
    d28a:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    d28c:	80 81       	ld	r24, Z
    d28e:	80 61       	ori	r24, 0x10	; 16
    d290:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d292:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    d294:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    d296:	84 ff       	sbrs	r24, 4
    d298:	fd cf       	rjmp	.-6      	; 0xd294 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    d29a:	64 e0       	ldi	r22, 0x04	; 4
    d29c:	80 e4       	ldi	r24, 0x40	; 64
    d29e:	90 e0       	ldi	r25, 0x00	; 0
    d2a0:	0e 94 05 72 	call	0xe40a	; 0xe40a <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d2a4:	8f b7       	in	r24, 0x3f	; 63
    d2a6:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    d2a8:	f8 94       	cli
	return flags;
    d2aa:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    d2ac:	e0 e5       	ldi	r30, 0x50	; 80
    d2ae:	f0 e0       	ldi	r31, 0x00	; 0
    d2b0:	80 81       	ld	r24, Z
    d2b2:	8e 7f       	andi	r24, 0xFE	; 254
    d2b4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d2b6:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    d2b8:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d2ba:	8f b7       	in	r24, 0x3f	; 63
    d2bc:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    d2be:	f8 94       	cli
	return flags;
    d2c0:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    d2c2:	80 81       	ld	r24, Z
    d2c4:	88 60       	ori	r24, 0x08	; 8
    d2c6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d2c8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    d2ca:	81 81       	ldd	r24, Z+1	; 0x01
    d2cc:	83 ff       	sbrs	r24, 3
    d2ce:	fd cf       	rjmp	.-6      	; 0xd2ca <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    d2d0:	8b e0       	ldi	r24, 0x0B	; 11
    d2d2:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    d2d6:	28 96       	adiw	r28, 0x08	; 8
    d2d8:	cd bf       	out	0x3d, r28	; 61
    d2da:	de bf       	out	0x3e, r29	; 62
    d2dc:	df 91       	pop	r29
    d2de:	cf 91       	pop	r28
    d2e0:	08 95       	ret

0000d2e2 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    d2e2:	cf 93       	push	r28
    d2e4:	df 93       	push	r29
    d2e6:	1f 92       	push	r1
    d2e8:	cd b7       	in	r28, 0x3d	; 61
    d2ea:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d2ec:	9f b7       	in	r25, 0x3f	; 63
    d2ee:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    d2f0:	f8 94       	cli
	return flags;
    d2f2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    d2f4:	e8 2f       	mov	r30, r24
    d2f6:	f0 e0       	ldi	r31, 0x00	; 0
    d2f8:	e0 59       	subi	r30, 0x90	; 144
    d2fa:	ff 4f       	sbci	r31, 0xFF	; 255
    d2fc:	60 95       	com	r22
    d2fe:	80 81       	ld	r24, Z
    d300:	68 23       	and	r22, r24
    d302:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d304:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    d306:	0f 90       	pop	r0
    d308:	df 91       	pop	r29
    d30a:	cf 91       	pop	r28
    d30c:	08 95       	ret

0000d30e <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    d30e:	cf 93       	push	r28
    d310:	df 93       	push	r29
    d312:	1f 92       	push	r1
    d314:	cd b7       	in	r28, 0x3d	; 61
    d316:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d318:	9f b7       	in	r25, 0x3f	; 63
    d31a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    d31c:	f8 94       	cli
	return flags;
    d31e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    d320:	e8 2f       	mov	r30, r24
    d322:	f0 e0       	ldi	r31, 0x00	; 0
    d324:	e0 59       	subi	r30, 0x90	; 144
    d326:	ff 4f       	sbci	r31, 0xFF	; 255
    d328:	80 81       	ld	r24, Z
    d32a:	68 2b       	or	r22, r24
    d32c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d32e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    d330:	0f 90       	pop	r0
    d332:	df 91       	pop	r29
    d334:	cf 91       	pop	r28
    d336:	08 95       	ret

0000d338 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    d338:	cf 93       	push	r28
    d33a:	df 93       	push	r29
    d33c:	1f 92       	push	r1
    d33e:	1f 92       	push	r1
    d340:	cd b7       	in	r28, 0x3d	; 61
    d342:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    d344:	86 30       	cpi	r24, 0x06	; 6
    d346:	11 f0       	breq	.+4      	; 0xd34c <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    d348:	60 e0       	ldi	r22, 0x00	; 0
    d34a:	01 c0       	rjmp	.+2      	; 0xd34e <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    d34c:	68 e1       	ldi	r22, 0x18	; 24
    d34e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    d352:	81 fd       	sbrc	r24, 1
    d354:	2a c0       	rjmp	.+84     	; 0xd3aa <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d356:	8f b7       	in	r24, 0x3f	; 63
    d358:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    d35a:	f8 94       	cli
	return flags;
    d35c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    d35e:	e0 e5       	ldi	r30, 0x50	; 80
    d360:	f0 e0       	ldi	r31, 0x00	; 0
    d362:	80 81       	ld	r24, Z
    d364:	82 60       	ori	r24, 0x02	; 2
    d366:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d368:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    d36a:	81 81       	ldd	r24, Z+1	; 0x01
    d36c:	81 ff       	sbrs	r24, 1
    d36e:	fd cf       	rjmp	.-6      	; 0xd36a <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d370:	8f b7       	in	r24, 0x3f	; 63
    d372:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    d374:	f8 94       	cli
	return flags;
    d376:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    d378:	a0 e5       	ldi	r26, 0x50	; 80
    d37a:	b0 e0       	ldi	r27, 0x00	; 0
    d37c:	16 96       	adiw	r26, 0x06	; 6
    d37e:	8c 91       	ld	r24, X
    d380:	16 97       	sbiw	r26, 0x06	; 6
    d382:	89 7f       	andi	r24, 0xF9	; 249
    d384:	16 96       	adiw	r26, 0x06	; 6
    d386:	8c 93       	st	X, r24
    d388:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    d38a:	e0 e6       	ldi	r30, 0x60	; 96
    d38c:	f0 e0       	ldi	r31, 0x00	; 0
    d38e:	80 e8       	ldi	r24, 0x80	; 128
    d390:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    d392:	8b eb       	ldi	r24, 0xBB	; 187
    d394:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    d396:	16 96       	adiw	r26, 0x06	; 6
    d398:	8c 91       	ld	r24, X
    d39a:	16 97       	sbiw	r26, 0x06	; 6
    d39c:	84 60       	ori	r24, 0x04	; 4
    d39e:	16 96       	adiw	r26, 0x06	; 6
    d3a0:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    d3a2:	80 81       	ld	r24, Z
    d3a4:	81 60       	ori	r24, 0x01	; 1
    d3a6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d3a8:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    d3aa:	63 60       	ori	r22, 0x03	; 3
    d3ac:	84 e4       	ldi	r24, 0x44	; 68
    d3ae:	90 e0       	ldi	r25, 0x00	; 0
    d3b0:	0e 94 05 72 	call	0xe40a	; 0xe40a <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    d3b4:	60 e4       	ldi	r22, 0x40	; 64
    d3b6:	80 e0       	ldi	r24, 0x00	; 0
    d3b8:	94 df       	rcall	.-216    	; 0xd2e2 <sysclk_enable_module>
}
    d3ba:	0f 90       	pop	r0
    d3bc:	0f 90       	pop	r0
    d3be:	df 91       	pop	r29
    d3c0:	cf 91       	pop	r28
    d3c2:	08 95       	ret

0000d3c4 <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    d3c4:	60 e4       	ldi	r22, 0x40	; 64
    d3c6:	80 e0       	ldi	r24, 0x00	; 0
    d3c8:	a2 df       	rcall	.-188    	; 0xd30e <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    d3ca:	60 e0       	ldi	r22, 0x00	; 0
    d3cc:	84 e4       	ldi	r24, 0x44	; 68
    d3ce:	90 e0       	ldi	r25, 0x00	; 0
    d3d0:	0c 94 05 72 	jmp	0xe40a	; 0xe40a <ccp_write_io>
    d3d4:	08 95       	ret

0000d3d6 <udi_cdc_comm_disable>:
    d3d6:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <udi_cdc_nb_comm_enabled>
    d3da:	81 50       	subi	r24, 0x01	; 1
    d3dc:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <udi_cdc_nb_comm_enabled>
    d3e0:	08 95       	ret

0000d3e2 <udi_cdc_data_setup>:
    d3e2:	80 e0       	ldi	r24, 0x00	; 0
    d3e4:	08 95       	ret

0000d3e6 <udi_cdc_getsetting>:
    d3e6:	80 e0       	ldi	r24, 0x00	; 0
    d3e8:	08 95       	ret

0000d3ea <udi_cdc_line_coding_received>:
    d3ea:	62 ea       	ldi	r22, 0xA2	; 162
    d3ec:	78 e2       	ldi	r23, 0x28	; 40
    d3ee:	80 e0       	ldi	r24, 0x00	; 0
    d3f0:	0c 94 be 1f 	jmp	0x3f7c	; 0x3f7c <usb_callback_config>
    d3f4:	08 95       	ret

0000d3f6 <udi_cdc_comm_enable>:
    d3f6:	10 92 94 28 	sts	0x2894, r1	; 0x802894 <udi_cdc_nb_comm_enabled>
    d3fa:	10 92 a0 28 	sts	0x28A0, r1	; 0x8028a0 <udi_cdc_state>
    d3fe:	10 92 a1 28 	sts	0x28A1, r1	; 0x8028a1 <udi_cdc_state+0x1>
    d402:	e6 e9       	ldi	r30, 0x96	; 150
    d404:	f8 e2       	ldi	r31, 0x28	; 40
    d406:	81 ea       	ldi	r24, 0xA1	; 161
    d408:	80 83       	st	Z, r24
    d40a:	80 e2       	ldi	r24, 0x20	; 32
    d40c:	81 83       	std	Z+1, r24	; 0x01
    d40e:	12 82       	std	Z+2, r1	; 0x02
    d410:	13 82       	std	Z+3, r1	; 0x03
    d412:	14 82       	std	Z+4, r1	; 0x04
    d414:	15 82       	std	Z+5, r1	; 0x05
    d416:	82 e0       	ldi	r24, 0x02	; 2
    d418:	90 e0       	ldi	r25, 0x00	; 0
    d41a:	86 83       	std	Z+6, r24	; 0x06
    d41c:	97 83       	std	Z+7, r25	; 0x07
    d41e:	10 86       	std	Z+8, r1	; 0x08
    d420:	11 86       	std	Z+9, r1	; 0x09
    d422:	e2 ea       	ldi	r30, 0xA2	; 162
    d424:	f8 e2       	ldi	r31, 0x28	; 40
    d426:	80 e0       	ldi	r24, 0x00	; 0
    d428:	92 ec       	ldi	r25, 0xC2	; 194
    d42a:	a1 e0       	ldi	r26, 0x01	; 1
    d42c:	b0 e0       	ldi	r27, 0x00	; 0
    d42e:	80 83       	st	Z, r24
    d430:	91 83       	std	Z+1, r25	; 0x01
    d432:	a2 83       	std	Z+2, r26	; 0x02
    d434:	b3 83       	std	Z+3, r27	; 0x03
    d436:	14 82       	std	Z+4, r1	; 0x04
    d438:	15 82       	std	Z+5, r1	; 0x05
    d43a:	88 e0       	ldi	r24, 0x08	; 8
    d43c:	86 83       	std	Z+6, r24	; 0x06
    d43e:	bf 01       	movw	r22, r30
    d440:	80 e0       	ldi	r24, 0x00	; 0
    d442:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <usb_callback_config>
    d446:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <usb_callback_cdc_enable>
    d44a:	88 23       	and	r24, r24
    d44c:	29 f0       	breq	.+10     	; 0xd458 <udi_cdc_comm_enable+0x62>
    d44e:	90 91 94 28 	lds	r25, 0x2894	; 0x802894 <udi_cdc_nb_comm_enabled>
    d452:	9f 5f       	subi	r25, 0xFF	; 255
    d454:	90 93 94 28 	sts	0x2894, r25	; 0x802894 <udi_cdc_nb_comm_enabled>
    d458:	08 95       	ret

0000d45a <udi_cdc_tx_send>:
    d45a:	ff 92       	push	r15
    d45c:	0f 93       	push	r16
    d45e:	1f 93       	push	r17
    d460:	cf 93       	push	r28
    d462:	df 93       	push	r29
    d464:	1f 92       	push	r1
    d466:	cd b7       	in	r28, 0x3d	; 61
    d468:	de b7       	in	r29, 0x3e	; 62
    d46a:	80 91 81 27 	lds	r24, 0x2781	; 0x802781 <udi_cdc_tx_trans_ongoing>
    d46e:	81 11       	cpse	r24, r1
    d470:	9f c0       	rjmp	.+318    	; 0xd5b0 <udi_cdc_tx_send+0x156>
    d472:	0e 94 c5 54 	call	0xa98a	; 0xa98a <udd_is_high_speed>
    d476:	88 23       	and	r24, r24
    d478:	51 f0       	breq	.+20     	; 0xd48e <udi_cdc_tx_send+0x34>
    d47a:	00 91 82 27 	lds	r16, 0x2782	; 0x802782 <udi_cdc_tx_sof_num>
    d47e:	10 91 83 27 	lds	r17, 0x2783	; 0x802783 <udi_cdc_tx_sof_num+0x1>
    d482:	0e 94 d2 54 	call	0xa9a4	; 0xa9a4 <udd_get_micro_frame_number>
    d486:	08 17       	cp	r16, r24
    d488:	19 07       	cpc	r17, r25
    d48a:	59 f4       	brne	.+22     	; 0xd4a2 <udi_cdc_tx_send+0x48>
    d48c:	91 c0       	rjmp	.+290    	; 0xd5b0 <udi_cdc_tx_send+0x156>
    d48e:	00 91 82 27 	lds	r16, 0x2782	; 0x802782 <udi_cdc_tx_sof_num>
    d492:	10 91 83 27 	lds	r17, 0x2783	; 0x802783 <udi_cdc_tx_sof_num+0x1>
    d496:	0e 94 cd 54 	call	0xa99a	; 0xa99a <udd_get_frame_number>
    d49a:	08 17       	cp	r16, r24
    d49c:	19 07       	cpc	r17, r25
    d49e:	09 f4       	brne	.+2      	; 0xd4a2 <udi_cdc_tx_send+0x48>
    d4a0:	87 c0       	rjmp	.+270    	; 0xd5b0 <udi_cdc_tx_send+0x156>
    d4a2:	8f b7       	in	r24, 0x3f	; 63
    d4a4:	89 83       	std	Y+1, r24	; 0x01
    d4a6:	f8 94       	cli
    d4a8:	19 81       	ldd	r17, Y+1	; 0x01
    d4aa:	00 91 84 27 	lds	r16, 0x2784	; 0x802784 <udi_cdc_tx_buf_sel>
    d4ae:	e0 2f       	mov	r30, r16
    d4b0:	f0 e0       	ldi	r31, 0x00	; 0
    d4b2:	ee 0f       	add	r30, r30
    d4b4:	ff 1f       	adc	r31, r31
    d4b6:	eb 57       	subi	r30, 0x7B	; 123
    d4b8:	f8 4d       	sbci	r31, 0xD8	; 216
    d4ba:	80 81       	ld	r24, Z
    d4bc:	91 81       	ldd	r25, Z+1	; 0x01
    d4be:	89 2b       	or	r24, r25
    d4c0:	09 f5       	brne	.+66     	; 0xd504 <udi_cdc_tx_send+0xaa>
    d4c2:	80 91 7e 27 	lds	r24, 0x277E	; 0x80277e <sof_zlp_counter.5059>
    d4c6:	90 91 7f 27 	lds	r25, 0x277F	; 0x80277f <sof_zlp_counter.5059+0x1>
    d4ca:	01 96       	adiw	r24, 0x01	; 1
    d4cc:	80 93 7e 27 	sts	0x277E, r24	; 0x80277e <sof_zlp_counter.5059>
    d4d0:	90 93 7f 27 	sts	0x277F, r25	; 0x80277f <sof_zlp_counter.5059+0x1>
    d4d4:	0e 94 c5 54 	call	0xa98a	; 0xa98a <udd_is_high_speed>
    d4d8:	81 11       	cpse	r24, r1
    d4da:	07 c0       	rjmp	.+14     	; 0xd4ea <udi_cdc_tx_send+0x90>
    d4dc:	80 91 7e 27 	lds	r24, 0x277E	; 0x80277e <sof_zlp_counter.5059>
    d4e0:	90 91 7f 27 	lds	r25, 0x277F	; 0x80277f <sof_zlp_counter.5059+0x1>
    d4e4:	84 36       	cpi	r24, 0x64	; 100
    d4e6:	91 05       	cpc	r25, r1
    d4e8:	58 f0       	brcs	.+22     	; 0xd500 <udi_cdc_tx_send+0xa6>
    d4ea:	0e 94 c5 54 	call	0xa98a	; 0xa98a <udd_is_high_speed>
    d4ee:	88 23       	and	r24, r24
    d4f0:	49 f0       	breq	.+18     	; 0xd504 <udi_cdc_tx_send+0xaa>
    d4f2:	80 91 7e 27 	lds	r24, 0x277E	; 0x80277e <sof_zlp_counter.5059>
    d4f6:	90 91 7f 27 	lds	r25, 0x277F	; 0x80277f <sof_zlp_counter.5059+0x1>
    d4fa:	80 32       	cpi	r24, 0x20	; 32
    d4fc:	93 40       	sbci	r25, 0x03	; 3
    d4fe:	10 f4       	brcc	.+4      	; 0xd504 <udi_cdc_tx_send+0xaa>
    d500:	1f bf       	out	0x3f, r17	; 63
    d502:	56 c0       	rjmp	.+172    	; 0xd5b0 <udi_cdc_tx_send+0x156>
    d504:	10 92 7e 27 	sts	0x277E, r1	; 0x80277e <sof_zlp_counter.5059>
    d508:	10 92 7f 27 	sts	0x277F, r1	; 0x80277f <sof_zlp_counter.5059+0x1>
    d50c:	80 91 80 27 	lds	r24, 0x2780	; 0x802780 <udi_cdc_tx_both_buf_to_send>
    d510:	81 11       	cpse	r24, r1
    d512:	06 c0       	rjmp	.+12     	; 0xd520 <udi_cdc_tx_send+0xc6>
    d514:	81 e0       	ldi	r24, 0x01	; 1
    d516:	01 11       	cpse	r16, r1
    d518:	80 e0       	ldi	r24, 0x00	; 0
    d51a:	80 93 84 27 	sts	0x2784, r24	; 0x802784 <udi_cdc_tx_buf_sel>
    d51e:	04 c0       	rjmp	.+8      	; 0xd528 <udi_cdc_tx_send+0xce>
    d520:	81 e0       	ldi	r24, 0x01	; 1
    d522:	01 11       	cpse	r16, r1
    d524:	80 e0       	ldi	r24, 0x00	; 0
    d526:	08 2f       	mov	r16, r24
    d528:	81 e0       	ldi	r24, 0x01	; 1
    d52a:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <udi_cdc_tx_trans_ongoing>
    d52e:	1f bf       	out	0x3f, r17	; 63
    d530:	10 e0       	ldi	r17, 0x00	; 0
    d532:	f8 01       	movw	r30, r16
    d534:	ee 0f       	add	r30, r30
    d536:	ff 1f       	adc	r31, r31
    d538:	eb 57       	subi	r30, 0x7B	; 123
    d53a:	f8 4d       	sbci	r31, 0xD8	; 216
    d53c:	80 81       	ld	r24, Z
    d53e:	91 81       	ldd	r25, Z+1	; 0x01
    d540:	ff 24       	eor	r15, r15
    d542:	f3 94       	inc	r15
    d544:	80 34       	cpi	r24, 0x40	; 64
    d546:	91 05       	cpc	r25, r1
    d548:	09 f4       	brne	.+2      	; 0xd54c <udi_cdc_tx_send+0xf2>
    d54a:	f1 2c       	mov	r15, r1
    d54c:	80 34       	cpi	r24, 0x40	; 64
    d54e:	91 05       	cpc	r25, r1
    d550:	91 f0       	breq	.+36     	; 0xd576 <udi_cdc_tx_send+0x11c>
    d552:	0e 94 c5 54 	call	0xa98a	; 0xa98a <udd_is_high_speed>
    d556:	88 23       	and	r24, r24
    d558:	39 f0       	breq	.+14     	; 0xd568 <udi_cdc_tx_send+0x10e>
    d55a:	0e 94 d2 54 	call	0xa9a4	; 0xa9a4 <udd_get_micro_frame_number>
    d55e:	80 93 82 27 	sts	0x2782, r24	; 0x802782 <udi_cdc_tx_sof_num>
    d562:	90 93 83 27 	sts	0x2783, r25	; 0x802783 <udi_cdc_tx_sof_num+0x1>
    d566:	0b c0       	rjmp	.+22     	; 0xd57e <udi_cdc_tx_send+0x124>
    d568:	0e 94 cd 54 	call	0xa99a	; 0xa99a <udd_get_frame_number>
    d56c:	80 93 82 27 	sts	0x2782, r24	; 0x802782 <udi_cdc_tx_sof_num>
    d570:	90 93 83 27 	sts	0x2783, r25	; 0x802783 <udi_cdc_tx_sof_num+0x1>
    d574:	04 c0       	rjmp	.+8      	; 0xd57e <udi_cdc_tx_send+0x124>
    d576:	10 92 82 27 	sts	0x2782, r1	; 0x802782 <udi_cdc_tx_sof_num>
    d57a:	10 92 83 27 	sts	0x2783, r1	; 0x802783 <udi_cdc_tx_sof_num+0x1>
    d57e:	f8 01       	movw	r30, r16
    d580:	ee 0f       	add	r30, r30
    d582:	ff 1f       	adc	r31, r31
    d584:	eb 57       	subi	r30, 0x7B	; 123
    d586:	f8 4d       	sbci	r31, 0xD8	; 216
    d588:	20 81       	ld	r18, Z
    d58a:	31 81       	ldd	r19, Z+1	; 0x01
    d58c:	a8 01       	movw	r20, r16
    d58e:	00 24       	eor	r0, r0
    d590:	56 95       	lsr	r21
    d592:	47 95       	ror	r20
    d594:	07 94       	ror	r0
    d596:	56 95       	lsr	r21
    d598:	47 95       	ror	r20
    d59a:	07 94       	ror	r0
    d59c:	54 2f       	mov	r21, r20
    d59e:	40 2d       	mov	r20, r0
    d5a0:	46 57       	subi	r20, 0x76	; 118
    d5a2:	58 4d       	sbci	r21, 0xD8	; 216
    d5a4:	02 ee       	ldi	r16, 0xE2	; 226
    d5a6:	1a e6       	ldi	r17, 0x6A	; 106
    d5a8:	6f 2d       	mov	r22, r15
    d5aa:	81 e8       	ldi	r24, 0x81	; 129
    d5ac:	0e 94 b6 55 	call	0xab6c	; 0xab6c <udd_ep_run>
    d5b0:	0f 90       	pop	r0
    d5b2:	df 91       	pop	r29
    d5b4:	cf 91       	pop	r28
    d5b6:	1f 91       	pop	r17
    d5b8:	0f 91       	pop	r16
    d5ba:	ff 90       	pop	r15
    d5bc:	08 95       	ret

0000d5be <udi_cdc_data_sof_notify>:
    d5be:	80 e0       	ldi	r24, 0x00	; 0
    d5c0:	4c cf       	rjmp	.-360    	; 0xd45a <udi_cdc_tx_send>
    d5c2:	08 95       	ret

0000d5c4 <udi_cdc_data_sent>:
    d5c4:	81 11       	cpse	r24, r1
    d5c6:	1a c0       	rjmp	.+52     	; 0xd5fc <udi_cdc_data_sent+0x38>
    d5c8:	20 91 84 27 	lds	r18, 0x2784	; 0x802784 <udi_cdc_tx_buf_sel>
    d5cc:	81 e0       	ldi	r24, 0x01	; 1
    d5ce:	90 e0       	ldi	r25, 0x00	; 0
    d5d0:	22 23       	and	r18, r18
    d5d2:	11 f0       	breq	.+4      	; 0xd5d8 <udi_cdc_data_sent+0x14>
    d5d4:	80 e0       	ldi	r24, 0x00	; 0
    d5d6:	90 e0       	ldi	r25, 0x00	; 0
    d5d8:	88 0f       	add	r24, r24
    d5da:	99 1f       	adc	r25, r25
    d5dc:	fc 01       	movw	r30, r24
    d5de:	eb 57       	subi	r30, 0x7B	; 123
    d5e0:	f8 4d       	sbci	r31, 0xD8	; 216
    d5e2:	10 82       	st	Z, r1
    d5e4:	11 82       	std	Z+1, r1	; 0x01
    d5e6:	10 92 80 27 	sts	0x2780, r1	; 0x802780 <udi_cdc_tx_both_buf_to_send>
    d5ea:	10 92 81 27 	sts	0x2781, r1	; 0x802781 <udi_cdc_tx_trans_ongoing>
    d5ee:	67 2b       	or	r22, r23
    d5f0:	19 f0       	breq	.+6      	; 0xd5f8 <udi_cdc_data_sent+0x34>
    d5f2:	80 e0       	ldi	r24, 0x00	; 0
    d5f4:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <usb_callback_tx_empty_notify>
    d5f8:	80 e0       	ldi	r24, 0x00	; 0
    d5fa:	2f cf       	rjmp	.-418    	; 0xd45a <udi_cdc_tx_send>
    d5fc:	08 95       	ret

0000d5fe <udi_cdc_data_disable>:
    d5fe:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <udi_cdc_nb_data_enabled>
    d602:	81 50       	subi	r24, 0x01	; 1
    d604:	80 93 93 28 	sts	0x2893, r24	; 0x802893 <udi_cdc_nb_data_enabled>
    d608:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <udi_cdc_nb_data_enabled>
    d60c:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <usb_callback_cdc_disable>
    d610:	10 92 92 28 	sts	0x2892, r1	; 0x802892 <udi_cdc_data_running>
    d614:	08 95       	ret

0000d616 <udi_cdc_comm_setup>:
    d616:	cf 93       	push	r28
    d618:	df 93       	push	r29
    d61a:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <udd_g_ctrlreq>
    d61e:	88 23       	and	r24, r24
    d620:	e4 f4       	brge	.+56     	; 0xd65a <udi_cdc_comm_setup+0x44>
    d622:	80 76       	andi	r24, 0x60	; 96
    d624:	80 32       	cpi	r24, 0x20	; 32
    d626:	09 f0       	breq	.+2      	; 0xd62a <udi_cdc_comm_setup+0x14>
    d628:	49 c0       	rjmp	.+146    	; 0xd6bc <udi_cdc_comm_setup+0xa6>
    d62a:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <udd_g_ctrlreq+0x1>
    d62e:	81 32       	cpi	r24, 0x21	; 33
    d630:	09 f0       	breq	.+2      	; 0xd634 <udi_cdc_comm_setup+0x1e>
    d632:	46 c0       	rjmp	.+140    	; 0xd6c0 <udi_cdc_comm_setup+0xaa>
    d634:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    d638:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    d63c:	07 97       	sbiw	r24, 0x07	; 7
    d63e:	09 f0       	breq	.+2      	; 0xd642 <udi_cdc_comm_setup+0x2c>
    d640:	41 c0       	rjmp	.+130    	; 0xd6c4 <udi_cdc_comm_setup+0xae>
    d642:	e5 ec       	ldi	r30, 0xC5	; 197
    d644:	f8 e2       	ldi	r31, 0x28	; 40
    d646:	82 ea       	ldi	r24, 0xA2	; 162
    d648:	98 e2       	ldi	r25, 0x28	; 40
    d64a:	80 87       	std	Z+8, r24	; 0x08
    d64c:	91 87       	std	Z+9, r25	; 0x09
    d64e:	87 e0       	ldi	r24, 0x07	; 7
    d650:	90 e0       	ldi	r25, 0x00	; 0
    d652:	82 87       	std	Z+10, r24	; 0x0a
    d654:	93 87       	std	Z+11, r25	; 0x0b
    d656:	81 e0       	ldi	r24, 0x01	; 1
    d658:	3c c0       	rjmp	.+120    	; 0xd6d2 <udi_cdc_comm_setup+0xbc>
    d65a:	80 76       	andi	r24, 0x60	; 96
    d65c:	80 32       	cpi	r24, 0x20	; 32
    d65e:	a1 f5       	brne	.+104    	; 0xd6c8 <udi_cdc_comm_setup+0xb2>
    d660:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <udd_g_ctrlreq+0x1>
    d664:	80 32       	cpi	r24, 0x20	; 32
    d666:	19 f0       	breq	.+6      	; 0xd66e <udi_cdc_comm_setup+0x58>
    d668:	82 32       	cpi	r24, 0x22	; 34
    d66a:	b9 f0       	breq	.+46     	; 0xd69a <udi_cdc_comm_setup+0x84>
    d66c:	2f c0       	rjmp	.+94     	; 0xd6cc <udi_cdc_comm_setup+0xb6>
    d66e:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    d672:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    d676:	07 97       	sbiw	r24, 0x07	; 7
    d678:	59 f5       	brne	.+86     	; 0xd6d0 <udi_cdc_comm_setup+0xba>
    d67a:	e5 ec       	ldi	r30, 0xC5	; 197
    d67c:	f8 e2       	ldi	r31, 0x28	; 40
    d67e:	85 ef       	ldi	r24, 0xF5	; 245
    d680:	99 e6       	ldi	r25, 0x69	; 105
    d682:	84 87       	std	Z+12, r24	; 0x0c
    d684:	95 87       	std	Z+13, r25	; 0x0d
    d686:	82 ea       	ldi	r24, 0xA2	; 162
    d688:	98 e2       	ldi	r25, 0x28	; 40
    d68a:	80 87       	std	Z+8, r24	; 0x08
    d68c:	91 87       	std	Z+9, r25	; 0x09
    d68e:	87 e0       	ldi	r24, 0x07	; 7
    d690:	90 e0       	ldi	r25, 0x00	; 0
    d692:	82 87       	std	Z+10, r24	; 0x0a
    d694:	93 87       	std	Z+11, r25	; 0x0b
    d696:	81 e0       	ldi	r24, 0x01	; 1
    d698:	1c c0       	rjmp	.+56     	; 0xd6d2 <udi_cdc_comm_setup+0xbc>
    d69a:	c5 ec       	ldi	r28, 0xC5	; 197
    d69c:	d8 e2       	ldi	r29, 0x28	; 40
    d69e:	6a 81       	ldd	r22, Y+2	; 0x02
    d6a0:	61 70       	andi	r22, 0x01	; 1
    d6a2:	80 e0       	ldi	r24, 0x00	; 0
    d6a4:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <usb_callback_cdc_set_dtr>
    d6a8:	6a 81       	ldd	r22, Y+2	; 0x02
    d6aa:	7b 81       	ldd	r23, Y+3	; 0x03
    d6ac:	76 95       	lsr	r23
    d6ae:	67 95       	ror	r22
    d6b0:	61 70       	andi	r22, 0x01	; 1
    d6b2:	80 e0       	ldi	r24, 0x00	; 0
    d6b4:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <usb_callback_cdc_set_rts>
    d6b8:	81 e0       	ldi	r24, 0x01	; 1
    d6ba:	0b c0       	rjmp	.+22     	; 0xd6d2 <udi_cdc_comm_setup+0xbc>
    d6bc:	80 e0       	ldi	r24, 0x00	; 0
    d6be:	09 c0       	rjmp	.+18     	; 0xd6d2 <udi_cdc_comm_setup+0xbc>
    d6c0:	80 e0       	ldi	r24, 0x00	; 0
    d6c2:	07 c0       	rjmp	.+14     	; 0xd6d2 <udi_cdc_comm_setup+0xbc>
    d6c4:	80 e0       	ldi	r24, 0x00	; 0
    d6c6:	05 c0       	rjmp	.+10     	; 0xd6d2 <udi_cdc_comm_setup+0xbc>
    d6c8:	80 e0       	ldi	r24, 0x00	; 0
    d6ca:	03 c0       	rjmp	.+6      	; 0xd6d2 <udi_cdc_comm_setup+0xbc>
    d6cc:	80 e0       	ldi	r24, 0x00	; 0
    d6ce:	01 c0       	rjmp	.+2      	; 0xd6d2 <udi_cdc_comm_setup+0xbc>
    d6d0:	80 e0       	ldi	r24, 0x00	; 0
    d6d2:	df 91       	pop	r29
    d6d4:	cf 91       	pop	r28
    d6d6:	08 95       	ret

0000d6d8 <udi_cdc_multi_get_nb_received_data>:
    d6d8:	cf 93       	push	r28
    d6da:	df 93       	push	r29
    d6dc:	1f 92       	push	r1
    d6de:	cd b7       	in	r28, 0x3d	; 61
    d6e0:	de b7       	in	r29, 0x3e	; 62
    d6e2:	8f b7       	in	r24, 0x3f	; 63
    d6e4:	89 83       	std	Y+1, r24	; 0x01
    d6e6:	f8 94       	cli
    d6e8:	49 81       	ldd	r20, Y+1	; 0x01
    d6ea:	20 91 0b 28 	lds	r18, 0x280B	; 0x80280b <udi_cdc_rx_pos>
    d6ee:	30 91 0c 28 	lds	r19, 0x280C	; 0x80280c <udi_cdc_rx_pos+0x1>
    d6f2:	e0 91 0d 28 	lds	r30, 0x280D	; 0x80280d <udi_cdc_rx_buf_sel>
    d6f6:	f0 e0       	ldi	r31, 0x00	; 0
    d6f8:	ee 0f       	add	r30, r30
    d6fa:	ff 1f       	adc	r31, r31
    d6fc:	e2 5f       	subi	r30, 0xF2	; 242
    d6fe:	f7 4d       	sbci	r31, 0xD7	; 215
    d700:	80 81       	ld	r24, Z
    d702:	91 81       	ldd	r25, Z+1	; 0x01
    d704:	4f bf       	out	0x3f, r20	; 63
    d706:	82 1b       	sub	r24, r18
    d708:	93 0b       	sbc	r25, r19
    d70a:	0f 90       	pop	r0
    d70c:	df 91       	pop	r29
    d70e:	cf 91       	pop	r28
    d710:	08 95       	ret

0000d712 <udi_cdc_get_nb_received_data>:
    d712:	80 e0       	ldi	r24, 0x00	; 0
    d714:	e1 cf       	rjmp	.-62     	; 0xd6d8 <udi_cdc_multi_get_nb_received_data>
    d716:	08 95       	ret

0000d718 <udi_cdc_multi_is_rx_ready>:
    d718:	df df       	rcall	.-66     	; 0xd6d8 <udi_cdc_multi_get_nb_received_data>
    d71a:	21 e0       	ldi	r18, 0x01	; 1
    d71c:	89 2b       	or	r24, r25
    d71e:	09 f4       	brne	.+2      	; 0xd722 <udi_cdc_multi_is_rx_ready+0xa>
    d720:	20 e0       	ldi	r18, 0x00	; 0
    d722:	82 2f       	mov	r24, r18
    d724:	08 95       	ret

0000d726 <udi_cdc_rx_start>:
    d726:	0f 93       	push	r16
    d728:	1f 93       	push	r17
    d72a:	cf 93       	push	r28
    d72c:	df 93       	push	r29
    d72e:	1f 92       	push	r1
    d730:	cd b7       	in	r28, 0x3d	; 61
    d732:	de b7       	in	r29, 0x3e	; 62
    d734:	8f b7       	in	r24, 0x3f	; 63
    d736:	89 83       	std	Y+1, r24	; 0x01
    d738:	f8 94       	cli
    d73a:	99 81       	ldd	r25, Y+1	; 0x01
    d73c:	20 91 0d 28 	lds	r18, 0x280D	; 0x80280d <udi_cdc_rx_buf_sel>
    d740:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <udi_cdc_rx_trans_ongoing>
    d744:	81 11       	cpse	r24, r1
    d746:	10 c0       	rjmp	.+32     	; 0xd768 <udi_cdc_rx_start+0x42>
    d748:	60 91 0b 28 	lds	r22, 0x280B	; 0x80280b <udi_cdc_rx_pos>
    d74c:	70 91 0c 28 	lds	r23, 0x280C	; 0x80280c <udi_cdc_rx_pos+0x1>
    d750:	02 2f       	mov	r16, r18
    d752:	10 e0       	ldi	r17, 0x00	; 0
    d754:	f8 01       	movw	r30, r16
    d756:	ee 0f       	add	r30, r30
    d758:	ff 1f       	adc	r31, r31
    d75a:	e2 5f       	subi	r30, 0xF2	; 242
    d75c:	f7 4d       	sbci	r31, 0xD7	; 215
    d75e:	40 81       	ld	r20, Z
    d760:	51 81       	ldd	r21, Z+1	; 0x01
    d762:	64 17       	cp	r22, r20
    d764:	75 07       	cpc	r23, r21
    d766:	18 f4       	brcc	.+6      	; 0xd76e <udi_cdc_rx_start+0x48>
    d768:	9f bf       	out	0x3f, r25	; 63
    d76a:	80 e0       	ldi	r24, 0x00	; 0
    d76c:	28 c0       	rjmp	.+80     	; 0xd7be <udi_cdc_rx_start+0x98>
    d76e:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <udi_cdc_rx_pos>
    d772:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <udi_cdc_rx_pos+0x1>
    d776:	81 e0       	ldi	r24, 0x01	; 1
    d778:	21 11       	cpse	r18, r1
    d77a:	80 e0       	ldi	r24, 0x00	; 0
    d77c:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <udi_cdc_rx_buf_sel>
    d780:	81 e0       	ldi	r24, 0x01	; 1
    d782:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <udi_cdc_rx_trans_ongoing>
    d786:	9f bf       	out	0x3f, r25	; 63
    d788:	80 e0       	ldi	r24, 0x00	; 0
    d78a:	c6 df       	rcall	.-116    	; 0xd718 <udi_cdc_multi_is_rx_ready>
    d78c:	88 23       	and	r24, r24
    d78e:	19 f0       	breq	.+6      	; 0xd796 <udi_cdc_rx_start+0x70>
    d790:	80 e0       	ldi	r24, 0x00	; 0
    d792:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <usb_callback_rx_notify>
    d796:	a8 01       	movw	r20, r16
    d798:	00 24       	eor	r0, r0
    d79a:	56 95       	lsr	r21
    d79c:	47 95       	ror	r20
    d79e:	07 94       	ror	r0
    d7a0:	56 95       	lsr	r21
    d7a2:	47 95       	ror	r20
    d7a4:	07 94       	ror	r0
    d7a6:	54 2f       	mov	r21, r20
    d7a8:	40 2d       	mov	r20, r0
    d7aa:	4e 5e       	subi	r20, 0xEE	; 238
    d7ac:	57 4d       	sbci	r21, 0xD7	; 215
    d7ae:	07 e1       	ldi	r16, 0x17	; 23
    d7b0:	1c e6       	ldi	r17, 0x6C	; 108
    d7b2:	20 e4       	ldi	r18, 0x40	; 64
    d7b4:	30 e0       	ldi	r19, 0x00	; 0
    d7b6:	61 e0       	ldi	r22, 0x01	; 1
    d7b8:	82 e0       	ldi	r24, 0x02	; 2
    d7ba:	0e 94 b6 55 	call	0xab6c	; 0xab6c <udd_ep_run>
    d7be:	0f 90       	pop	r0
    d7c0:	df 91       	pop	r29
    d7c2:	cf 91       	pop	r28
    d7c4:	1f 91       	pop	r17
    d7c6:	0f 91       	pop	r16
    d7c8:	08 95       	ret

0000d7ca <udi_cdc_data_enable>:
    d7ca:	10 92 93 28 	sts	0x2893, r1	; 0x802893 <udi_cdc_nb_data_enabled>
    d7ce:	10 92 81 27 	sts	0x2781, r1	; 0x802781 <udi_cdc_tx_trans_ongoing>
    d7d2:	10 92 80 27 	sts	0x2780, r1	; 0x802780 <udi_cdc_tx_both_buf_to_send>
    d7d6:	10 92 84 27 	sts	0x2784, r1	; 0x802784 <udi_cdc_tx_buf_sel>
    d7da:	e5 e8       	ldi	r30, 0x85	; 133
    d7dc:	f7 e2       	ldi	r31, 0x27	; 39
    d7de:	10 82       	st	Z, r1
    d7e0:	11 82       	std	Z+1, r1	; 0x01
    d7e2:	12 82       	std	Z+2, r1	; 0x02
    d7e4:	13 82       	std	Z+3, r1	; 0x03
    d7e6:	10 92 82 27 	sts	0x2782, r1	; 0x802782 <udi_cdc_tx_sof_num>
    d7ea:	10 92 83 27 	sts	0x2783, r1	; 0x802783 <udi_cdc_tx_sof_num+0x1>
    d7ee:	80 e0       	ldi	r24, 0x00	; 0
    d7f0:	34 de       	rcall	.-920    	; 0xd45a <udi_cdc_tx_send>
    d7f2:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <udi_cdc_rx_trans_ongoing>
    d7f6:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <udi_cdc_rx_buf_sel>
    d7fa:	ee e0       	ldi	r30, 0x0E	; 14
    d7fc:	f8 e2       	ldi	r31, 0x28	; 40
    d7fe:	10 82       	st	Z, r1
    d800:	11 82       	std	Z+1, r1	; 0x01
    d802:	12 82       	std	Z+2, r1	; 0x02
    d804:	13 82       	std	Z+3, r1	; 0x03
    d806:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <udi_cdc_rx_pos>
    d80a:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <udi_cdc_rx_pos+0x1>
    d80e:	80 e0       	ldi	r24, 0x00	; 0
    d810:	8a df       	rcall	.-236    	; 0xd726 <udi_cdc_rx_start>
    d812:	88 23       	and	r24, r24
    d814:	59 f0       	breq	.+22     	; 0xd82c <udi_cdc_data_enable+0x62>
    d816:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <udi_cdc_nb_data_enabled>
    d81a:	9f 5f       	subi	r25, 0xFF	; 255
    d81c:	90 93 93 28 	sts	0x2893, r25	; 0x802893 <udi_cdc_nb_data_enabled>
    d820:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <udi_cdc_nb_data_enabled>
    d824:	91 30       	cpi	r25, 0x01	; 1
    d826:	11 f4       	brne	.+4      	; 0xd82c <udi_cdc_data_enable+0x62>
    d828:	90 93 92 28 	sts	0x2892, r25	; 0x802892 <udi_cdc_data_running>
    d82c:	08 95       	ret

0000d82e <udi_cdc_data_received>:
    d82e:	0f 93       	push	r16
    d830:	1f 93       	push	r17
    d832:	81 11       	cpse	r24, r1
    d834:	29 c0       	rjmp	.+82     	; 0xd888 <udi_cdc_data_received+0x5a>
    d836:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <udi_cdc_rx_buf_sel>
    d83a:	e1 e0       	ldi	r30, 0x01	; 1
    d83c:	81 11       	cpse	r24, r1
    d83e:	e0 e0       	ldi	r30, 0x00	; 0
    d840:	84 2f       	mov	r24, r20
    d842:	61 15       	cp	r22, r1
    d844:	71 05       	cpc	r23, r1
    d846:	a9 f4       	brne	.+42     	; 0xd872 <udi_cdc_data_received+0x44>
    d848:	4e 2f       	mov	r20, r30
    d84a:	50 e0       	ldi	r21, 0x00	; 0
    d84c:	00 24       	eor	r0, r0
    d84e:	56 95       	lsr	r21
    d850:	47 95       	ror	r20
    d852:	07 94       	ror	r0
    d854:	56 95       	lsr	r21
    d856:	47 95       	ror	r20
    d858:	07 94       	ror	r0
    d85a:	54 2f       	mov	r21, r20
    d85c:	40 2d       	mov	r20, r0
    d85e:	4e 5e       	subi	r20, 0xEE	; 238
    d860:	57 4d       	sbci	r21, 0xD7	; 215
    d862:	07 e1       	ldi	r16, 0x17	; 23
    d864:	1c e6       	ldi	r17, 0x6C	; 108
    d866:	20 e4       	ldi	r18, 0x40	; 64
    d868:	30 e0       	ldi	r19, 0x00	; 0
    d86a:	61 e0       	ldi	r22, 0x01	; 1
    d86c:	0e 94 b6 55 	call	0xab6c	; 0xab6c <udd_ep_run>
    d870:	0b c0       	rjmp	.+22     	; 0xd888 <udi_cdc_data_received+0x5a>
    d872:	f0 e0       	ldi	r31, 0x00	; 0
    d874:	ee 0f       	add	r30, r30
    d876:	ff 1f       	adc	r31, r31
    d878:	e2 5f       	subi	r30, 0xF2	; 242
    d87a:	f7 4d       	sbci	r31, 0xD7	; 215
    d87c:	60 83       	st	Z, r22
    d87e:	71 83       	std	Z+1, r23	; 0x01
    d880:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <udi_cdc_rx_trans_ongoing>
    d884:	80 e0       	ldi	r24, 0x00	; 0
    d886:	4f df       	rcall	.-354    	; 0xd726 <udi_cdc_rx_start>
    d888:	1f 91       	pop	r17
    d88a:	0f 91       	pop	r16
    d88c:	08 95       	ret

0000d88e <udi_cdc_multi_getc>:
    d88e:	ef 92       	push	r14
    d890:	ff 92       	push	r15
    d892:	1f 93       	push	r17
    d894:	cf 93       	push	r28
    d896:	df 93       	push	r29
    d898:	1f 92       	push	r1
    d89a:	cd b7       	in	r28, 0x3d	; 61
    d89c:	de b7       	in	r29, 0x3e	; 62
    d89e:	11 e0       	ldi	r17, 0x01	; 1
    d8a0:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <udi_cdc_line_coding+0x6>
    d8a4:	89 30       	cpi	r24, 0x09	; 9
    d8a6:	09 f0       	breq	.+2      	; 0xd8aa <udi_cdc_multi_getc+0x1c>
    d8a8:	10 e0       	ldi	r17, 0x00	; 0
    d8aa:	40 e0       	ldi	r20, 0x00	; 0
    d8ac:	50 e0       	ldi	r21, 0x00	; 0
    d8ae:	8f b7       	in	r24, 0x3f	; 63
    d8b0:	89 83       	std	Y+1, r24	; 0x01
    d8b2:	f8 94       	cli
    d8b4:	a9 81       	ldd	r26, Y+1	; 0x01
    d8b6:	20 91 0b 28 	lds	r18, 0x280B	; 0x80280b <udi_cdc_rx_pos>
    d8ba:	30 91 0c 28 	lds	r19, 0x280C	; 0x80280c <udi_cdc_rx_pos+0x1>
    d8be:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <udi_cdc_rx_buf_sel>
    d8c2:	90 e0       	ldi	r25, 0x00	; 0
    d8c4:	fc 01       	movw	r30, r24
    d8c6:	ee 0f       	add	r30, r30
    d8c8:	ff 1f       	adc	r31, r31
    d8ca:	e2 5f       	subi	r30, 0xF2	; 242
    d8cc:	f7 4d       	sbci	r31, 0xD7	; 215
    d8ce:	60 81       	ld	r22, Z
    d8d0:	71 81       	ldd	r23, Z+1	; 0x01
    d8d2:	af bf       	out	0x3f, r26	; 63
    d8d4:	26 17       	cp	r18, r22
    d8d6:	37 07       	cpc	r19, r23
    d8d8:	30 f0       	brcs	.+12     	; 0xd8e6 <udi_cdc_multi_getc+0x58>
    d8da:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <udi_cdc_data_running>
    d8de:	81 11       	cpse	r24, r1
    d8e0:	e6 cf       	rjmp	.-52     	; 0xd8ae <udi_cdc_multi_getc+0x20>
    d8e2:	90 e0       	ldi	r25, 0x00	; 0
    d8e4:	21 c0       	rjmp	.+66     	; 0xd928 <udi_cdc_multi_getc+0x9a>
    d8e6:	fc 01       	movw	r30, r24
    d8e8:	00 24       	eor	r0, r0
    d8ea:	f6 95       	lsr	r31
    d8ec:	e7 95       	ror	r30
    d8ee:	07 94       	ror	r0
    d8f0:	f6 95       	lsr	r31
    d8f2:	e7 95       	ror	r30
    d8f4:	07 94       	ror	r0
    d8f6:	fe 2f       	mov	r31, r30
    d8f8:	e0 2d       	mov	r30, r0
    d8fa:	ee 5e       	subi	r30, 0xEE	; 238
    d8fc:	f7 4d       	sbci	r31, 0xD7	; 215
    d8fe:	e2 0f       	add	r30, r18
    d900:	f3 1f       	adc	r31, r19
    d902:	80 81       	ld	r24, Z
    d904:	7a 01       	movw	r14, r20
    d906:	e8 2a       	or	r14, r24
    d908:	2f 5f       	subi	r18, 0xFF	; 255
    d90a:	3f 4f       	sbci	r19, 0xFF	; 255
    d90c:	20 93 0b 28 	sts	0x280B, r18	; 0x80280b <udi_cdc_rx_pos>
    d910:	30 93 0c 28 	sts	0x280C, r19	; 0x80280c <udi_cdc_rx_pos+0x1>
    d914:	80 e0       	ldi	r24, 0x00	; 0
    d916:	07 df       	rcall	.-498    	; 0xd726 <udi_cdc_rx_start>
    d918:	11 23       	and	r17, r17
    d91a:	21 f0       	breq	.+8      	; 0xd924 <udi_cdc_multi_getc+0x96>
    d91c:	5e 2d       	mov	r21, r14
    d91e:	44 27       	eor	r20, r20
    d920:	10 e0       	ldi	r17, 0x00	; 0
    d922:	c5 cf       	rjmp	.-118    	; 0xd8ae <udi_cdc_multi_getc+0x20>
    d924:	8e 2d       	mov	r24, r14
    d926:	9f 2d       	mov	r25, r15
    d928:	0f 90       	pop	r0
    d92a:	df 91       	pop	r29
    d92c:	cf 91       	pop	r28
    d92e:	1f 91       	pop	r17
    d930:	ff 90       	pop	r15
    d932:	ef 90       	pop	r14
    d934:	08 95       	ret

0000d936 <udi_cdc_getc>:
    d936:	80 e0       	ldi	r24, 0x00	; 0
    d938:	aa cf       	rjmp	.-172    	; 0xd88e <udi_cdc_multi_getc>
    d93a:	08 95       	ret

0000d93c <udi_cdc_read_no_polling>:
    d93c:	ef 92       	push	r14
    d93e:	ff 92       	push	r15
    d940:	0f 93       	push	r16
    d942:	1f 93       	push	r17
    d944:	cf 93       	push	r28
    d946:	df 93       	push	r29
    d948:	1f 92       	push	r1
    d94a:	1f 92       	push	r1
    d94c:	cd b7       	in	r28, 0x3d	; 61
    d94e:	de b7       	in	r29, 0x3e	; 62
    d950:	dc 01       	movw	r26, r24
    d952:	90 91 92 28 	lds	r25, 0x2892	; 0x802892 <udi_cdc_data_running>
    d956:	99 23       	and	r25, r25
    d958:	09 f4       	brne	.+2      	; 0xd95c <udi_cdc_read_no_polling+0x20>
    d95a:	44 c0       	rjmp	.+136    	; 0xd9e4 <udi_cdc_read_no_polling+0xa8>
    d95c:	8f b7       	in	r24, 0x3f	; 63
    d95e:	89 83       	std	Y+1, r24	; 0x01
    d960:	f8 94       	cli
    d962:	89 81       	ldd	r24, Y+1	; 0x01
    d964:	40 91 0b 28 	lds	r20, 0x280B	; 0x80280b <udi_cdc_rx_pos>
    d968:	50 91 0c 28 	lds	r21, 0x280C	; 0x80280c <udi_cdc_rx_pos+0x1>
    d96c:	20 91 0d 28 	lds	r18, 0x280D	; 0x80280d <udi_cdc_rx_buf_sel>
    d970:	30 e0       	ldi	r19, 0x00	; 0
    d972:	f9 01       	movw	r30, r18
    d974:	ee 0f       	add	r30, r30
    d976:	ff 1f       	adc	r31, r31
    d978:	e2 5f       	subi	r30, 0xF2	; 242
    d97a:	f7 4d       	sbci	r31, 0xD7	; 215
    d97c:	e0 80       	ld	r14, Z
    d97e:	f1 80       	ldd	r15, Z+1	; 0x01
    d980:	e4 1a       	sub	r14, r20
    d982:	f5 0a       	sbc	r15, r21
    d984:	8f bf       	out	0x3f, r24	; 63
    d986:	06 2f       	mov	r16, r22
    d988:	17 2f       	mov	r17, r23
    d98a:	e0 16       	cp	r14, r16
    d98c:	f1 06       	cpc	r15, r17
    d98e:	08 f4       	brcc	.+2      	; 0xd992 <udi_cdc_read_no_polling+0x56>
    d990:	87 01       	movw	r16, r14
    d992:	01 15       	cp	r16, r1
    d994:	11 05       	cpc	r17, r1
    d996:	49 f1       	breq	.+82     	; 0xd9ea <udi_cdc_read_no_polling+0xae>
    d998:	cd 01       	movw	r24, r26
    d99a:	00 24       	eor	r0, r0
    d99c:	36 95       	lsr	r19
    d99e:	27 95       	ror	r18
    d9a0:	07 94       	ror	r0
    d9a2:	36 95       	lsr	r19
    d9a4:	27 95       	ror	r18
    d9a6:	07 94       	ror	r0
    d9a8:	32 2f       	mov	r19, r18
    d9aa:	20 2d       	mov	r18, r0
    d9ac:	b9 01       	movw	r22, r18
    d9ae:	64 0f       	add	r22, r20
    d9b0:	75 1f       	adc	r23, r21
    d9b2:	6e 5e       	subi	r22, 0xEE	; 238
    d9b4:	77 4d       	sbci	r23, 0xD7	; 215
    d9b6:	a8 01       	movw	r20, r16
    d9b8:	0e 94 f7 7c 	call	0xf9ee	; 0xf9ee <memcpy>
    d9bc:	8f b7       	in	r24, 0x3f	; 63
    d9be:	8a 83       	std	Y+2, r24	; 0x02
    d9c0:	f8 94       	cli
    d9c2:	8a 81       	ldd	r24, Y+2	; 0x02
    d9c4:	20 91 0b 28 	lds	r18, 0x280B	; 0x80280b <udi_cdc_rx_pos>
    d9c8:	30 91 0c 28 	lds	r19, 0x280C	; 0x80280c <udi_cdc_rx_pos+0x1>
    d9cc:	02 0f       	add	r16, r18
    d9ce:	13 1f       	adc	r17, r19
    d9d0:	00 93 0b 28 	sts	0x280B, r16	; 0x80280b <udi_cdc_rx_pos>
    d9d4:	10 93 0c 28 	sts	0x280C, r17	; 0x80280c <udi_cdc_rx_pos+0x1>
    d9d8:	8f bf       	out	0x3f, r24	; 63
    d9da:	80 e0       	ldi	r24, 0x00	; 0
    d9dc:	a4 de       	rcall	.-696    	; 0xd726 <udi_cdc_rx_start>
    d9de:	8e 2d       	mov	r24, r14
    d9e0:	9f 2d       	mov	r25, r15
    d9e2:	05 c0       	rjmp	.+10     	; 0xd9ee <udi_cdc_read_no_polling+0xb2>
    d9e4:	80 e0       	ldi	r24, 0x00	; 0
    d9e6:	90 e0       	ldi	r25, 0x00	; 0
    d9e8:	02 c0       	rjmp	.+4      	; 0xd9ee <udi_cdc_read_no_polling+0xb2>
    d9ea:	8e 2d       	mov	r24, r14
    d9ec:	9f 2d       	mov	r25, r15
    d9ee:	0f 90       	pop	r0
    d9f0:	0f 90       	pop	r0
    d9f2:	df 91       	pop	r29
    d9f4:	cf 91       	pop	r28
    d9f6:	1f 91       	pop	r17
    d9f8:	0f 91       	pop	r16
    d9fa:	ff 90       	pop	r15
    d9fc:	ef 90       	pop	r14
    d9fe:	08 95       	ret

0000da00 <udi_cdc_multi_get_free_tx_buffer>:
    da00:	cf 93       	push	r28
    da02:	df 93       	push	r29
    da04:	1f 92       	push	r1
    da06:	cd b7       	in	r28, 0x3d	; 61
    da08:	de b7       	in	r29, 0x3e	; 62
    da0a:	8f b7       	in	r24, 0x3f	; 63
    da0c:	89 83       	std	Y+1, r24	; 0x01
    da0e:	f8 94       	cli
    da10:	99 81       	ldd	r25, Y+1	; 0x01
    da12:	80 91 84 27 	lds	r24, 0x2784	; 0x802784 <udi_cdc_tx_buf_sel>
    da16:	e8 2f       	mov	r30, r24
    da18:	f0 e0       	ldi	r31, 0x00	; 0
    da1a:	ee 0f       	add	r30, r30
    da1c:	ff 1f       	adc	r31, r31
    da1e:	eb 57       	subi	r30, 0x7B	; 123
    da20:	f8 4d       	sbci	r31, 0xD8	; 216
    da22:	20 81       	ld	r18, Z
    da24:	31 81       	ldd	r19, Z+1	; 0x01
    da26:	20 34       	cpi	r18, 0x40	; 64
    da28:	31 05       	cpc	r19, r1
    da2a:	89 f4       	brne	.+34     	; 0xda4e <udi_cdc_multi_get_free_tx_buffer+0x4e>
    da2c:	40 91 81 27 	lds	r20, 0x2781	; 0x802781 <udi_cdc_tx_trans_ongoing>
    da30:	41 11       	cpse	r20, r1
    da32:	0d c0       	rjmp	.+26     	; 0xda4e <udi_cdc_multi_get_free_tx_buffer+0x4e>
    da34:	40 91 80 27 	lds	r20, 0x2780	; 0x802780 <udi_cdc_tx_both_buf_to_send>
    da38:	41 11       	cpse	r20, r1
    da3a:	09 c0       	rjmp	.+18     	; 0xda4e <udi_cdc_multi_get_free_tx_buffer+0x4e>
    da3c:	21 e0       	ldi	r18, 0x01	; 1
    da3e:	20 93 80 27 	sts	0x2780, r18	; 0x802780 <udi_cdc_tx_both_buf_to_send>
    da42:	81 11       	cpse	r24, r1
    da44:	20 e0       	ldi	r18, 0x00	; 0
    da46:	20 93 84 27 	sts	0x2784, r18	; 0x802784 <udi_cdc_tx_buf_sel>
    da4a:	20 e0       	ldi	r18, 0x00	; 0
    da4c:	30 e0       	ldi	r19, 0x00	; 0
    da4e:	9f bf       	out	0x3f, r25	; 63
    da50:	80 e4       	ldi	r24, 0x40	; 64
    da52:	90 e0       	ldi	r25, 0x00	; 0
    da54:	82 1b       	sub	r24, r18
    da56:	93 0b       	sbc	r25, r19
    da58:	0f 90       	pop	r0
    da5a:	df 91       	pop	r29
    da5c:	cf 91       	pop	r28
    da5e:	08 95       	ret

0000da60 <udi_cdc_multi_is_tx_ready>:
    da60:	cf df       	rcall	.-98     	; 0xda00 <udi_cdc_multi_get_free_tx_buffer>
    da62:	21 e0       	ldi	r18, 0x01	; 1
    da64:	89 2b       	or	r24, r25
    da66:	09 f4       	brne	.+2      	; 0xda6a <udi_cdc_multi_is_tx_ready+0xa>
    da68:	20 e0       	ldi	r18, 0x00	; 0
    da6a:	82 2f       	mov	r24, r18
    da6c:	08 95       	ret

0000da6e <udi_cdc_is_tx_ready>:
    da6e:	80 e0       	ldi	r24, 0x00	; 0
    da70:	f7 cf       	rjmp	.-18     	; 0xda60 <udi_cdc_multi_is_tx_ready>
    da72:	08 95       	ret

0000da74 <udi_cdc_multi_putc>:
    da74:	ff 92       	push	r15
    da76:	0f 93       	push	r16
    da78:	1f 93       	push	r17
    da7a:	cf 93       	push	r28
    da7c:	df 93       	push	r29
    da7e:	1f 92       	push	r1
    da80:	cd b7       	in	r28, 0x3d	; 61
    da82:	de b7       	in	r29, 0x3e	; 62
    da84:	f6 2e       	mov	r15, r22
    da86:	17 2f       	mov	r17, r23
    da88:	01 e0       	ldi	r16, 0x01	; 1
    da8a:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <udi_cdc_line_coding+0x6>
    da8e:	89 30       	cpi	r24, 0x09	; 9
    da90:	09 f0       	breq	.+2      	; 0xda94 <udi_cdc_multi_putc+0x20>
    da92:	00 e0       	ldi	r16, 0x00	; 0
    da94:	80 e0       	ldi	r24, 0x00	; 0
    da96:	e4 df       	rcall	.-56     	; 0xda60 <udi_cdc_multi_is_tx_ready>
    da98:	81 11       	cpse	r24, r1
    da9a:	07 c0       	rjmp	.+14     	; 0xdaaa <udi_cdc_multi_putc+0x36>
    da9c:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <udi_cdc_data_running>
    daa0:	81 11       	cpse	r24, r1
    daa2:	f8 cf       	rjmp	.-16     	; 0xda94 <udi_cdc_multi_putc+0x20>
    daa4:	80 e0       	ldi	r24, 0x00	; 0
    daa6:	90 e0       	ldi	r25, 0x00	; 0
    daa8:	2c c0       	rjmp	.+88     	; 0xdb02 <udi_cdc_multi_putc+0x8e>
    daaa:	8f b7       	in	r24, 0x3f	; 63
    daac:	89 83       	std	Y+1, r24	; 0x01
    daae:	f8 94       	cli
    dab0:	49 81       	ldd	r20, Y+1	; 0x01
    dab2:	80 91 84 27 	lds	r24, 0x2784	; 0x802784 <udi_cdc_tx_buf_sel>
    dab6:	90 e0       	ldi	r25, 0x00	; 0
    dab8:	fc 01       	movw	r30, r24
    daba:	ee 0f       	add	r30, r30
    dabc:	ff 1f       	adc	r31, r31
    dabe:	eb 57       	subi	r30, 0x7B	; 123
    dac0:	f8 4d       	sbci	r31, 0xD8	; 216
    dac2:	20 81       	ld	r18, Z
    dac4:	31 81       	ldd	r19, Z+1	; 0x01
    dac6:	b9 01       	movw	r22, r18
    dac8:	6f 5f       	subi	r22, 0xFF	; 255
    daca:	7f 4f       	sbci	r23, 0xFF	; 255
    dacc:	60 83       	st	Z, r22
    dace:	71 83       	std	Z+1, r23	; 0x01
    dad0:	00 24       	eor	r0, r0
    dad2:	96 95       	lsr	r25
    dad4:	87 95       	ror	r24
    dad6:	07 94       	ror	r0
    dad8:	96 95       	lsr	r25
    dada:	87 95       	ror	r24
    dadc:	07 94       	ror	r0
    dade:	98 2f       	mov	r25, r24
    dae0:	80 2d       	mov	r24, r0
    dae2:	86 57       	subi	r24, 0x76	; 118
    dae4:	98 4d       	sbci	r25, 0xD8	; 216
    dae6:	fc 01       	movw	r30, r24
    dae8:	e2 0f       	add	r30, r18
    daea:	f3 1f       	adc	r31, r19
    daec:	f0 82       	st	Z, r15
    daee:	4f bf       	out	0x3f, r20	; 63
    daf0:	00 23       	and	r16, r16
    daf2:	29 f0       	breq	.+10     	; 0xdafe <udi_cdc_multi_putc+0x8a>
    daf4:	f1 2e       	mov	r15, r17
    daf6:	11 0f       	add	r17, r17
    daf8:	11 0b       	sbc	r17, r17
    dafa:	00 e0       	ldi	r16, 0x00	; 0
    dafc:	cb cf       	rjmp	.-106    	; 0xda94 <udi_cdc_multi_putc+0x20>
    dafe:	81 e0       	ldi	r24, 0x01	; 1
    db00:	90 e0       	ldi	r25, 0x00	; 0
    db02:	0f 90       	pop	r0
    db04:	df 91       	pop	r29
    db06:	cf 91       	pop	r28
    db08:	1f 91       	pop	r17
    db0a:	0f 91       	pop	r16
    db0c:	ff 90       	pop	r15
    db0e:	08 95       	ret

0000db10 <udi_cdc_putc>:
    db10:	bc 01       	movw	r22, r24
    db12:	80 e0       	ldi	r24, 0x00	; 0
    db14:	af cf       	rjmp	.-162    	; 0xda74 <udi_cdc_multi_putc>
    db16:	08 95       	ret

0000db18 <udc_next_desc_in_iface>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
    db18:	e0 91 ae 28 	lds	r30, 0x28AE	; 0x8028ae <udc_ptr_conf>
    db1c:	f0 91 af 28 	lds	r31, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    db20:	01 90       	ld	r0, Z+
    db22:	f0 81       	ld	r31, Z
    db24:	e0 2d       	mov	r30, r0
    db26:	22 81       	ldd	r18, Z+2	; 0x02
    db28:	33 81       	ldd	r19, Z+3	; 0x03
    db2a:	2e 0f       	add	r18, r30
    db2c:	3f 1f       	adc	r19, r31
    db2e:	fc 01       	movw	r30, r24
    db30:	40 81       	ld	r20, Z
    db32:	e4 0f       	add	r30, r20
    db34:	f1 1d       	adc	r31, r1
    db36:	e2 17       	cp	r30, r18
    db38:	f3 07       	cpc	r31, r19
    db3a:	a0 f4       	brcc	.+40     	; 0xdb64 <udc_next_desc_in_iface+0x4c>
    db3c:	81 81       	ldd	r24, Z+1	; 0x01
    db3e:	84 30       	cpi	r24, 0x04	; 4
    db40:	a1 f0       	breq	.+40     	; 0xdb6a <udc_next_desc_in_iface+0x52>
    db42:	86 13       	cpse	r24, r22
    db44:	06 c0       	rjmp	.+12     	; 0xdb52 <udc_next_desc_in_iface+0x3a>
    db46:	14 c0       	rjmp	.+40     	; 0xdb70 <udc_next_desc_in_iface+0x58>
    db48:	81 81       	ldd	r24, Z+1	; 0x01
    db4a:	84 30       	cpi	r24, 0x04	; 4
    db4c:	a1 f0       	breq	.+40     	; 0xdb76 <udc_next_desc_in_iface+0x5e>
    db4e:	86 17       	cp	r24, r22
    db50:	a9 f0       	breq	.+42     	; 0xdb7c <udc_next_desc_in_iface+0x64>
    db52:	80 81       	ld	r24, Z
    db54:	e8 0f       	add	r30, r24
    db56:	f1 1d       	adc	r31, r1
    db58:	e2 17       	cp	r30, r18
    db5a:	f3 07       	cpc	r31, r19
    db5c:	a8 f3       	brcs	.-22     	; 0xdb48 <udc_next_desc_in_iface+0x30>
    db5e:	80 e0       	ldi	r24, 0x00	; 0
    db60:	90 e0       	ldi	r25, 0x00	; 0
    db62:	08 95       	ret
    db64:	80 e0       	ldi	r24, 0x00	; 0
    db66:	90 e0       	ldi	r25, 0x00	; 0
    db68:	08 95       	ret
    db6a:	80 e0       	ldi	r24, 0x00	; 0
    db6c:	90 e0       	ldi	r25, 0x00	; 0
    db6e:	08 95       	ret
    db70:	8e 2f       	mov	r24, r30
    db72:	9f 2f       	mov	r25, r31
    db74:	08 95       	ret
    db76:	80 e0       	ldi	r24, 0x00	; 0
    db78:	90 e0       	ldi	r25, 0x00	; 0
    db7a:	08 95       	ret
    db7c:	8e 2f       	mov	r24, r30
    db7e:	9f 2f       	mov	r25, r31
    db80:	08 95       	ret

0000db82 <udc_valid_address>:
    db82:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <udd_g_ctrlreq+0x2>
    db86:	8f 77       	andi	r24, 0x7F	; 127
    db88:	0c 94 c7 54 	jmp	0xa98e	; 0xa98e <udd_set_address>
    db8c:	08 95       	ret

0000db8e <udc_update_iface_desc>:
    db8e:	90 91 b0 28 	lds	r25, 0x28B0	; 0x8028b0 <udc_num_configuration>
    db92:	99 23       	and	r25, r25
    db94:	81 f1       	breq	.+96     	; 0xdbf6 <udc_update_iface_desc+0x68>
    db96:	e0 91 ae 28 	lds	r30, 0x28AE	; 0x8028ae <udc_ptr_conf>
    db9a:	f0 91 af 28 	lds	r31, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    db9e:	01 90       	ld	r0, Z+
    dba0:	f0 81       	ld	r31, Z
    dba2:	e0 2d       	mov	r30, r0
    dba4:	94 81       	ldd	r25, Z+4	; 0x04
    dba6:	89 17       	cp	r24, r25
    dba8:	40 f5       	brcc	.+80     	; 0xdbfa <udc_update_iface_desc+0x6c>
    dbaa:	e0 93 ac 28 	sts	0x28AC, r30	; 0x8028ac <udc_ptr_iface>
    dbae:	f0 93 ad 28 	sts	0x28AD, r31	; 0x8028ad <udc_ptr_iface+0x1>
    dbb2:	22 81       	ldd	r18, Z+2	; 0x02
    dbb4:	33 81       	ldd	r19, Z+3	; 0x03
    dbb6:	2e 0f       	add	r18, r30
    dbb8:	3f 1f       	adc	r19, r31
    dbba:	e2 17       	cp	r30, r18
    dbbc:	f3 07       	cpc	r31, r19
    dbbe:	f8 f4       	brcc	.+62     	; 0xdbfe <udc_update_iface_desc+0x70>
    dbc0:	91 81       	ldd	r25, Z+1	; 0x01
    dbc2:	94 30       	cpi	r25, 0x04	; 4
    dbc4:	61 f4       	brne	.+24     	; 0xdbde <udc_update_iface_desc+0x50>
    dbc6:	92 81       	ldd	r25, Z+2	; 0x02
    dbc8:	89 13       	cpse	r24, r25
    dbca:	09 c0       	rjmp	.+18     	; 0xdbde <udc_update_iface_desc+0x50>
    dbcc:	93 81       	ldd	r25, Z+3	; 0x03
    dbce:	96 13       	cpse	r25, r22
    dbd0:	06 c0       	rjmp	.+12     	; 0xdbde <udc_update_iface_desc+0x50>
    dbd2:	e0 93 ac 28 	sts	0x28AC, r30	; 0x8028ac <udc_ptr_iface>
    dbd6:	f0 93 ad 28 	sts	0x28AD, r31	; 0x8028ad <udc_ptr_iface+0x1>
    dbda:	81 e0       	ldi	r24, 0x01	; 1
    dbdc:	08 95       	ret
    dbde:	90 81       	ld	r25, Z
    dbe0:	e9 0f       	add	r30, r25
    dbe2:	f1 1d       	adc	r31, r1
    dbe4:	e2 17       	cp	r30, r18
    dbe6:	f3 07       	cpc	r31, r19
    dbe8:	58 f3       	brcs	.-42     	; 0xdbc0 <udc_update_iface_desc+0x32>
    dbea:	e0 93 ac 28 	sts	0x28AC, r30	; 0x8028ac <udc_ptr_iface>
    dbee:	f0 93 ad 28 	sts	0x28AD, r31	; 0x8028ad <udc_ptr_iface+0x1>
    dbf2:	80 e0       	ldi	r24, 0x00	; 0
    dbf4:	08 95       	ret
    dbf6:	80 e0       	ldi	r24, 0x00	; 0
    dbf8:	08 95       	ret
    dbfa:	80 e0       	ldi	r24, 0x00	; 0
    dbfc:	08 95       	ret
    dbfe:	80 e0       	ldi	r24, 0x00	; 0
    dc00:	08 95       	ret

0000dc02 <udc_iface_disable>:
    dc02:	ef 92       	push	r14
    dc04:	ff 92       	push	r15
    dc06:	1f 93       	push	r17
    dc08:	cf 93       	push	r28
    dc0a:	df 93       	push	r29
    dc0c:	c8 2f       	mov	r28, r24
    dc0e:	60 e0       	ldi	r22, 0x00	; 0
    dc10:	be df       	rcall	.-132    	; 0xdb8e <udc_update_iface_desc>
    dc12:	18 2f       	mov	r17, r24
    dc14:	88 23       	and	r24, r24
    dc16:	81 f1       	breq	.+96     	; 0xdc78 <udc_iface_disable+0x76>
    dc18:	a0 91 ae 28 	lds	r26, 0x28AE	; 0x8028ae <udc_ptr_conf>
    dc1c:	b0 91 af 28 	lds	r27, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    dc20:	ec 2f       	mov	r30, r28
    dc22:	f0 e0       	ldi	r31, 0x00	; 0
    dc24:	ee 0f       	add	r30, r30
    dc26:	ff 1f       	adc	r31, r31
    dc28:	12 96       	adiw	r26, 0x02	; 2
    dc2a:	8d 91       	ld	r24, X+
    dc2c:	9c 91       	ld	r25, X
    dc2e:	13 97       	sbiw	r26, 0x03	; 3
    dc30:	e8 0f       	add	r30, r24
    dc32:	f9 1f       	adc	r31, r25
    dc34:	e0 80       	ld	r14, Z
    dc36:	f1 80       	ldd	r15, Z+1	; 0x01
    dc38:	d7 01       	movw	r26, r14
    dc3a:	16 96       	adiw	r26, 0x06	; 6
    dc3c:	ed 91       	ld	r30, X+
    dc3e:	fc 91       	ld	r31, X
    dc40:	17 97       	sbiw	r26, 0x07	; 7
    dc42:	19 95       	eicall
    dc44:	68 2f       	mov	r22, r24
    dc46:	8c 2f       	mov	r24, r28
    dc48:	a2 df       	rcall	.-188    	; 0xdb8e <udc_update_iface_desc>
    dc4a:	18 2f       	mov	r17, r24
    dc4c:	88 23       	and	r24, r24
    dc4e:	a1 f0       	breq	.+40     	; 0xdc78 <udc_iface_disable+0x76>
    dc50:	c0 91 ac 28 	lds	r28, 0x28AC	; 0x8028ac <udc_ptr_iface>
    dc54:	d0 91 ad 28 	lds	r29, 0x28AD	; 0x8028ad <udc_ptr_iface+0x1>
    dc58:	65 e0       	ldi	r22, 0x05	; 5
    dc5a:	ce 01       	movw	r24, r28
    dc5c:	5d df       	rcall	.-326    	; 0xdb18 <udc_next_desc_in_iface>
    dc5e:	ec 01       	movw	r28, r24
    dc60:	89 2b       	or	r24, r25
    dc62:	21 f0       	breq	.+8      	; 0xdc6c <udc_iface_disable+0x6a>
    dc64:	8a 81       	ldd	r24, Y+2	; 0x02
    dc66:	0e 94 d0 56 	call	0xada0	; 0xada0 <udd_ep_free>
    dc6a:	f6 cf       	rjmp	.-20     	; 0xdc58 <udc_iface_disable+0x56>
    dc6c:	d7 01       	movw	r26, r14
    dc6e:	12 96       	adiw	r26, 0x02	; 2
    dc70:	ed 91       	ld	r30, X+
    dc72:	fc 91       	ld	r31, X
    dc74:	13 97       	sbiw	r26, 0x03	; 3
    dc76:	19 95       	eicall
    dc78:	81 2f       	mov	r24, r17
    dc7a:	df 91       	pop	r29
    dc7c:	cf 91       	pop	r28
    dc7e:	1f 91       	pop	r17
    dc80:	ff 90       	pop	r15
    dc82:	ef 90       	pop	r14
    dc84:	08 95       	ret

0000dc86 <udc_iface_enable>:
    dc86:	1f 93       	push	r17
    dc88:	cf 93       	push	r28
    dc8a:	df 93       	push	r29
    dc8c:	18 2f       	mov	r17, r24
    dc8e:	7f df       	rcall	.-258    	; 0xdb8e <udc_update_iface_desc>
    dc90:	88 23       	and	r24, r24
    dc92:	41 f1       	breq	.+80     	; 0xdce4 <udc_iface_enable+0x5e>
    dc94:	c0 91 ac 28 	lds	r28, 0x28AC	; 0x8028ac <udc_ptr_iface>
    dc98:	d0 91 ad 28 	lds	r29, 0x28AD	; 0x8028ad <udc_ptr_iface+0x1>
    dc9c:	65 e0       	ldi	r22, 0x05	; 5
    dc9e:	ce 01       	movw	r24, r28
    dca0:	3b df       	rcall	.-394    	; 0xdb18 <udc_next_desc_in_iface>
    dca2:	ec 01       	movw	r28, r24
    dca4:	89 2b       	or	r24, r25
    dca6:	49 f0       	breq	.+18     	; 0xdcba <udc_iface_enable+0x34>
    dca8:	4c 81       	ldd	r20, Y+4	; 0x04
    dcaa:	5d 81       	ldd	r21, Y+5	; 0x05
    dcac:	6b 81       	ldd	r22, Y+3	; 0x03
    dcae:	8a 81       	ldd	r24, Y+2	; 0x02
    dcb0:	0e 94 dc 54 	call	0xa9b8	; 0xa9b8 <udd_ep_alloc>
    dcb4:	81 11       	cpse	r24, r1
    dcb6:	f2 cf       	rjmp	.-28     	; 0xdc9c <udc_iface_enable+0x16>
    dcb8:	15 c0       	rjmp	.+42     	; 0xdce4 <udc_iface_enable+0x5e>
    dcba:	a0 91 ae 28 	lds	r26, 0x28AE	; 0x8028ae <udc_ptr_conf>
    dcbe:	b0 91 af 28 	lds	r27, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    dcc2:	e1 2f       	mov	r30, r17
    dcc4:	f0 e0       	ldi	r31, 0x00	; 0
    dcc6:	ee 0f       	add	r30, r30
    dcc8:	ff 1f       	adc	r31, r31
    dcca:	12 96       	adiw	r26, 0x02	; 2
    dccc:	8d 91       	ld	r24, X+
    dcce:	9c 91       	ld	r25, X
    dcd0:	13 97       	sbiw	r26, 0x03	; 3
    dcd2:	e8 0f       	add	r30, r24
    dcd4:	f9 1f       	adc	r31, r25
    dcd6:	01 90       	ld	r0, Z+
    dcd8:	f0 81       	ld	r31, Z
    dcda:	e0 2d       	mov	r30, r0
    dcdc:	01 90       	ld	r0, Z+
    dcde:	f0 81       	ld	r31, Z
    dce0:	e0 2d       	mov	r30, r0
    dce2:	19 95       	eicall
    dce4:	df 91       	pop	r29
    dce6:	cf 91       	pop	r28
    dce8:	1f 91       	pop	r17
    dcea:	08 95       	ret

0000dcec <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
    dcec:	0c 94 40 54 	jmp	0xa880	; 0xa880 <udd_enable>
    dcf0:	08 95       	ret

0000dcf2 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    dcf2:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    dcf4:	80 91 b0 28 	lds	r24, 0x28B0	; 0x8028b0 <udc_num_configuration>
    dcf8:	88 23       	and	r24, r24
    dcfa:	c1 f0       	breq	.+48     	; 0xdd2c <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    dcfc:	e0 91 ae 28 	lds	r30, 0x28AE	; 0x8028ae <udc_ptr_conf>
    dd00:	f0 91 af 28 	lds	r31, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    dd04:	01 90       	ld	r0, Z+
    dd06:	f0 81       	ld	r31, Z
    dd08:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    dd0a:	84 81       	ldd	r24, Z+4	; 0x04
    dd0c:	88 23       	and	r24, r24
    dd0e:	71 f0       	breq	.+28     	; 0xdd2c <udc_reset+0x3a>
    dd10:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    dd12:	8c 2f       	mov	r24, r28
    dd14:	76 df       	rcall	.-276    	; 0xdc02 <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    dd16:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    dd18:	e0 91 ae 28 	lds	r30, 0x28AE	; 0x8028ae <udc_ptr_conf>
    dd1c:	f0 91 af 28 	lds	r31, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    dd20:	01 90       	ld	r0, Z+
    dd22:	f0 81       	ld	r31, Z
    dd24:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    dd26:	84 81       	ldd	r24, Z+4	; 0x04
    dd28:	c8 17       	cp	r28, r24
    dd2a:	98 f3       	brcs	.-26     	; 0xdd12 <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    dd2c:	10 92 b0 28 	sts	0x28B0, r1	; 0x8028b0 <udc_num_configuration>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    dd30:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <udc_device_status>
    dd34:	81 fd       	sbrc	r24, 1
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    dd36:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <usb_callback_remotewakeup_disable>
	}
#endif
	udc_device_status =
    dd3a:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <udc_device_status>
    dd3e:	10 92 b5 28 	sts	0x28B5, r1	; 0x8028b5 <udc_device_status+0x1>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    dd42:	cf 91       	pop	r28
    dd44:	08 95       	ret

0000dd46 <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    dd46:	0e 94 e6 53 	call	0xa7cc	; 0xa7cc <udd_disable>
	udc_reset();
    dd4a:	d3 cf       	rjmp	.-90     	; 0xdcf2 <udc_reset>
    dd4c:	08 95       	ret

0000dd4e <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    dd4e:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    dd50:	80 91 b0 28 	lds	r24, 0x28B0	; 0x8028b0 <udc_num_configuration>
    dd54:	88 23       	and	r24, r24
    dd56:	49 f1       	breq	.+82     	; 0xddaa <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    dd58:	a0 91 ae 28 	lds	r26, 0x28AE	; 0x8028ae <udc_ptr_conf>
    dd5c:	b0 91 af 28 	lds	r27, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    dd60:	ed 91       	ld	r30, X+
    dd62:	fc 91       	ld	r31, X
    dd64:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    dd66:	84 81       	ldd	r24, Z+4	; 0x04
    dd68:	88 23       	and	r24, r24
    dd6a:	f9 f0       	breq	.+62     	; 0xddaa <udc_sof_notify+0x5c>
    dd6c:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    dd6e:	ec 2f       	mov	r30, r28
    dd70:	f0 e0       	ldi	r31, 0x00	; 0
    dd72:	ee 0f       	add	r30, r30
    dd74:	ff 1f       	adc	r31, r31
    dd76:	12 96       	adiw	r26, 0x02	; 2
    dd78:	8d 91       	ld	r24, X+
    dd7a:	9c 91       	ld	r25, X
    dd7c:	13 97       	sbiw	r26, 0x03	; 3
    dd7e:	e8 0f       	add	r30, r24
    dd80:	f9 1f       	adc	r31, r25
    dd82:	01 90       	ld	r0, Z+
    dd84:	f0 81       	ld	r31, Z
    dd86:	e0 2d       	mov	r30, r0
    dd88:	00 84       	ldd	r0, Z+8	; 0x08
    dd8a:	f1 85       	ldd	r31, Z+9	; 0x09
    dd8c:	e0 2d       	mov	r30, r0
    dd8e:	30 97       	sbiw	r30, 0x00	; 0
    dd90:	09 f0       	breq	.+2      	; 0xdd94 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    dd92:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    dd94:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    dd96:	a0 91 ae 28 	lds	r26, 0x28AE	; 0x8028ae <udc_ptr_conf>
    dd9a:	b0 91 af 28 	lds	r27, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    dd9e:	ed 91       	ld	r30, X+
    dda0:	fc 91       	ld	r31, X
    dda2:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    dda4:	84 81       	ldd	r24, Z+4	; 0x04
    dda6:	c8 17       	cp	r28, r24
    dda8:	10 f3       	brcs	.-60     	; 0xdd6e <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    ddaa:	cf 91       	pop	r28
    ddac:	08 95       	ret

0000ddae <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    ddae:	0f 93       	push	r16
    ddb0:	1f 93       	push	r17
    ddb2:	cf 93       	push	r28
    ddb4:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    ddb6:	e5 ec       	ldi	r30, 0xC5	; 197
    ddb8:	f8 e2       	ldi	r31, 0x28	; 40
    ddba:	12 86       	std	Z+10, r1	; 0x0a
    ddbc:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    ddbe:	14 86       	std	Z+12, r1	; 0x0c
    ddc0:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    ddc2:	16 86       	std	Z+14, r1	; 0x0e
    ddc4:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    ddc6:	80 81       	ld	r24, Z
    ddc8:	88 23       	and	r24, r24
    ddca:	0c f0       	brlt	.+2      	; 0xddce <udc_process_setup+0x20>
    ddcc:	95 c2       	rjmp	.+1322   	; 0xe2f8 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    ddce:	20 91 cb 28 	lds	r18, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    ddd2:	30 91 cc 28 	lds	r19, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    ddd6:	21 15       	cp	r18, r1
    ddd8:	31 05       	cpc	r19, r1
    ddda:	09 f0       	breq	.+2      	; 0xddde <udc_process_setup+0x30>
    dddc:	88 c2       	rjmp	.+1296   	; 0xe2ee <udc_process_setup+0x540>
    ddde:	7f c2       	rjmp	.+1278   	; 0xe2de <udc_process_setup+0x530>
    dde0:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    dde2:	09 f0       	breq	.+2      	; 0xdde6 <udc_process_setup+0x38>
    dde4:	ab c0       	rjmp	.+342    	; 0xdf3c <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    dde6:	90 91 c6 28 	lds	r25, 0x28C6	; 0x8028c6 <udd_g_ctrlreq+0x1>
    ddea:	96 30       	cpi	r25, 0x06	; 6
    ddec:	81 f0       	breq	.+32     	; 0xde0e <udc_process_setup+0x60>
    ddee:	98 30       	cpi	r25, 0x08	; 8
    ddf0:	09 f4       	brne	.+2      	; 0xddf4 <udc_process_setup+0x46>
    ddf2:	99 c0       	rjmp	.+306    	; 0xdf26 <udc_process_setup+0x178>
    ddf4:	91 11       	cpse	r25, r1
    ddf6:	a2 c0       	rjmp	.+324    	; 0xdf3c <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    ddf8:	22 30       	cpi	r18, 0x02	; 2
    ddfa:	31 05       	cpc	r19, r1
    ddfc:	09 f0       	breq	.+2      	; 0xde00 <udc_process_setup+0x52>
    ddfe:	2b c2       	rjmp	.+1110   	; 0xe256 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    de00:	62 e0       	ldi	r22, 0x02	; 2
    de02:	70 e0       	ldi	r23, 0x00	; 0
    de04:	84 eb       	ldi	r24, 0xB4	; 180
    de06:	98 e2       	ldi	r25, 0x28	; 40
    de08:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <udd_set_setup_payload>
    de0c:	7e c2       	rjmp	.+1276   	; 0xe30a <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    de0e:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <udd_g_ctrlreq+0x2>
    de12:	90 91 c8 28 	lds	r25, 0x28C8	; 0x8028c8 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    de16:	29 2f       	mov	r18, r25
    de18:	33 27       	eor	r19, r19
    de1a:	22 30       	cpi	r18, 0x02	; 2
    de1c:	31 05       	cpc	r19, r1
    de1e:	b1 f0       	breq	.+44     	; 0xde4c <udc_process_setup+0x9e>
    de20:	20 f4       	brcc	.+8      	; 0xde2a <udc_process_setup+0x7c>
    de22:	21 30       	cpi	r18, 0x01	; 1
    de24:	31 05       	cpc	r19, r1
    de26:	41 f0       	breq	.+16     	; 0xde38 <udc_process_setup+0x8a>
    de28:	d8 c1       	rjmp	.+944    	; 0xe1da <udc_process_setup+0x42c>
    de2a:	23 30       	cpi	r18, 0x03	; 3
    de2c:	31 05       	cpc	r19, r1
    de2e:	f1 f1       	breq	.+124    	; 0xdeac <udc_process_setup+0xfe>
    de30:	2f 30       	cpi	r18, 0x0F	; 15
    de32:	31 05       	cpc	r19, r1
    de34:	61 f1       	breq	.+88     	; 0xde8e <udc_process_setup+0xe0>
    de36:	d1 c1       	rjmp	.+930    	; 0xe1da <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    de38:	80 91 7f 20 	lds	r24, 0x207F	; 0x80207f <udc_config>
    de3c:	90 91 80 20 	lds	r25, 0x2080	; 0x802080 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    de40:	dc 01       	movw	r26, r24
    de42:	6c 91       	ld	r22, X
    de44:	70 e0       	ldi	r23, 0x00	; 0
    de46:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <udd_set_setup_payload>
    de4a:	5e c0       	rjmp	.+188    	; 0xdf08 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    de4c:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <udc_config>
    de50:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <udc_config+0x1>
    de54:	21 89       	ldd	r18, Z+17	; 0x11
    de56:	82 17       	cp	r24, r18
    de58:	08 f0       	brcs	.+2      	; 0xde5c <udc_process_setup+0xae>
    de5a:	fd c1       	rjmp	.+1018   	; 0xe256 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    de5c:	99 27       	eor	r25, r25
    de5e:	88 0f       	add	r24, r24
    de60:	99 1f       	adc	r25, r25
    de62:	88 0f       	add	r24, r24
    de64:	99 1f       	adc	r25, r25
    de66:	e0 91 81 20 	lds	r30, 0x2081	; 0x802081 <udc_config+0x2>
    de6a:	f0 91 82 20 	lds	r31, 0x2082	; 0x802082 <udc_config+0x3>
    de6e:	e8 0f       	add	r30, r24
    de70:	f9 1f       	adc	r31, r25
    de72:	80 81       	ld	r24, Z
    de74:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    de76:	fc 01       	movw	r30, r24
    de78:	62 81       	ldd	r22, Z+2	; 0x02
    de7a:	73 81       	ldd	r23, Z+3	; 0x03
    de7c:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    de80:	e0 91 cd 28 	lds	r30, 0x28CD	; 0x8028cd <udd_g_ctrlreq+0x8>
    de84:	f0 91 ce 28 	lds	r31, 0x28CE	; 0x8028ce <udd_g_ctrlreq+0x9>
    de88:	82 e0       	ldi	r24, 0x02	; 2
    de8a:	81 83       	std	Z+1, r24	; 0x01
    de8c:	3d c0       	rjmp	.+122    	; 0xdf08 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    de8e:	80 91 83 20 	lds	r24, 0x2083	; 0x802083 <udc_config+0x4>
    de92:	90 91 84 20 	lds	r25, 0x2084	; 0x802084 <udc_config+0x5>
    de96:	00 97       	sbiw	r24, 0x00	; 0
    de98:	09 f4       	brne	.+2      	; 0xde9c <udc_process_setup+0xee>
    de9a:	dd c1       	rjmp	.+954    	; 0xe256 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    de9c:	dc 01       	movw	r26, r24
    de9e:	12 96       	adiw	r26, 0x02	; 2
    dea0:	6d 91       	ld	r22, X+
    dea2:	7c 91       	ld	r23, X
    dea4:	13 97       	sbiw	r26, 0x03	; 3
    dea6:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <udd_set_setup_payload>
    deaa:	2e c0       	rjmp	.+92     	; 0xdf08 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    deac:	99 27       	eor	r25, r25
    deae:	81 30       	cpi	r24, 0x01	; 1
    deb0:	91 05       	cpc	r25, r1
    deb2:	99 f0       	breq	.+38     	; 0xdeda <udc_process_setup+0x12c>
    deb4:	58 f0       	brcs	.+22     	; 0xdecc <udc_process_setup+0x11e>
    deb6:	82 30       	cpi	r24, 0x02	; 2
    deb8:	91 05       	cpc	r25, r1
    deba:	09 f4       	brne	.+2      	; 0xdebe <udc_process_setup+0x110>
    debc:	22 c2       	rjmp	.+1092   	; 0xe302 <udc_process_setup+0x554>
    debe:	03 97       	sbiw	r24, 0x03	; 3
    dec0:	09 f0       	breq	.+2      	; 0xdec4 <udc_process_setup+0x116>
    dec2:	94 c1       	rjmp	.+808    	; 0xe1ec <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    dec4:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    dec6:	ee ec       	ldi	r30, 0xCE	; 206
    dec8:	f1 e2       	ldi	r31, 0x21	; 33
    deca:	0a c0       	rjmp	.+20     	; 0xdee0 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    decc:	64 e0       	ldi	r22, 0x04	; 4
    dece:	70 e0       	ldi	r23, 0x00	; 0
    ded0:	84 e2       	ldi	r24, 0x24	; 36
    ded2:	91 e2       	ldi	r25, 0x21	; 33
    ded4:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <udd_set_setup_payload>
    ded8:	17 c0       	rjmp	.+46     	; 0xdf08 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    deda:	e3 e1       	ldi	r30, 0x13	; 19
    dedc:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    dede:	30 e1       	ldi	r19, 0x10	; 16
    dee0:	a6 ee       	ldi	r26, 0xE6	; 230
    dee2:	b0 e2       	ldi	r27, 0x20	; 32
    dee4:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    dee6:	81 91       	ld	r24, Z+
    dee8:	90 e0       	ldi	r25, 0x00	; 0
    deea:	8d 93       	st	X+, r24
    deec:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    deee:	2f 5f       	subi	r18, 0xFF	; 255
    def0:	23 17       	cp	r18, r19
    def2:	c8 f3       	brcs	.-14     	; 0xdee6 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    def4:	63 2f       	mov	r22, r19
    def6:	66 0f       	add	r22, r22
    def8:	6e 5f       	subi	r22, 0xFE	; 254
    defa:	60 93 e4 20 	sts	0x20E4, r22	; 0x8020e4 <udc_string_desc>
		udd_set_setup_payload(
    defe:	70 e0       	ldi	r23, 0x00	; 0
    df00:	84 ee       	ldi	r24, 0xE4	; 228
    df02:	90 e2       	ldi	r25, 0x20	; 32
    df04:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    df08:	e5 ec       	ldi	r30, 0xC5	; 197
    df0a:	f8 e2       	ldi	r31, 0x28	; 40
    df0c:	86 81       	ldd	r24, Z+6	; 0x06
    df0e:	97 81       	ldd	r25, Z+7	; 0x07
    df10:	22 85       	ldd	r18, Z+10	; 0x0a
    df12:	33 85       	ldd	r19, Z+11	; 0x0b
    df14:	82 17       	cp	r24, r18
    df16:	93 07       	cpc	r25, r19
    df18:	08 f0       	brcs	.+2      	; 0xdf1c <udc_process_setup+0x16e>
    df1a:	f7 c1       	rjmp	.+1006   	; 0xe30a <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    df1c:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <udd_g_ctrlreq+0xa>
    df20:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <udd_g_ctrlreq+0xb>
    df24:	f2 c1       	rjmp	.+996    	; 0xe30a <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    df26:	21 30       	cpi	r18, 0x01	; 1
    df28:	31 05       	cpc	r19, r1
    df2a:	09 f0       	breq	.+2      	; 0xdf2e <udc_process_setup+0x180>
    df2c:	94 c1       	rjmp	.+808    	; 0xe256 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    df2e:	61 e0       	ldi	r22, 0x01	; 1
    df30:	70 e0       	ldi	r23, 0x00	; 0
    df32:	80 eb       	ldi	r24, 0xB0	; 176
    df34:	98 e2       	ldi	r25, 0x28	; 40
    df36:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <udd_set_setup_payload>
    df3a:	e7 c1       	rjmp	.+974    	; 0xe30a <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    df3c:	81 30       	cpi	r24, 0x01	; 1
    df3e:	e9 f5       	brne	.+122    	; 0xdfba <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    df40:	90 91 c6 28 	lds	r25, 0x28C6	; 0x8028c6 <udd_g_ctrlreq+0x1>
    df44:	9a 30       	cpi	r25, 0x0A	; 10
    df46:	c9 f5       	brne	.+114    	; 0xdfba <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    df48:	21 30       	cpi	r18, 0x01	; 1
    df4a:	31 05       	cpc	r19, r1
    df4c:	09 f0       	breq	.+2      	; 0xdf50 <udc_process_setup+0x1a2>
    df4e:	53 c1       	rjmp	.+678    	; 0xe1f6 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    df50:	80 91 b0 28 	lds	r24, 0x28B0	; 0x8028b0 <udc_num_configuration>
    df54:	88 23       	and	r24, r24
    df56:	09 f4       	brne	.+2      	; 0xdf5a <udc_process_setup+0x1ac>
    df58:	4e c1       	rjmp	.+668    	; 0xe1f6 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    df5a:	c0 91 c9 28 	lds	r28, 0x28C9	; 0x8028c9 <udd_g_ctrlreq+0x4>
    df5e:	d0 91 ca 28 	lds	r29, 0x28CA	; 0x8028ca <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    df62:	00 91 ae 28 	lds	r16, 0x28AE	; 0x8028ae <udc_ptr_conf>
    df66:	10 91 af 28 	lds	r17, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    df6a:	d8 01       	movw	r26, r16
    df6c:	ed 91       	ld	r30, X+
    df6e:	fc 91       	ld	r31, X
    df70:	84 81       	ldd	r24, Z+4	; 0x04
    df72:	c8 17       	cp	r28, r24
    df74:	08 f0       	brcs	.+2      	; 0xdf78 <udc_process_setup+0x1ca>
    df76:	3f c1       	rjmp	.+638    	; 0xe1f6 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    df78:	60 e0       	ldi	r22, 0x00	; 0
    df7a:	8c 2f       	mov	r24, r28
    df7c:	08 de       	rcall	.-1008   	; 0xdb8e <udc_update_iface_desc>
    df7e:	88 23       	and	r24, r24
    df80:	09 f4       	brne	.+2      	; 0xdf84 <udc_process_setup+0x1d6>
    df82:	34 c1       	rjmp	.+616    	; 0xe1ec <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    df84:	ce 01       	movw	r24, r28
    df86:	99 27       	eor	r25, r25
    df88:	88 0f       	add	r24, r24
    df8a:	99 1f       	adc	r25, r25
    df8c:	d8 01       	movw	r26, r16
    df8e:	12 96       	adiw	r26, 0x02	; 2
    df90:	ed 91       	ld	r30, X+
    df92:	fc 91       	ld	r31, X
    df94:	13 97       	sbiw	r26, 0x03	; 3
    df96:	e8 0f       	add	r30, r24
    df98:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    df9a:	01 90       	ld	r0, Z+
    df9c:	f0 81       	ld	r31, Z
    df9e:	e0 2d       	mov	r30, r0
    dfa0:	86 81       	ldd	r24, Z+6	; 0x06
    dfa2:	97 81       	ldd	r25, Z+7	; 0x07
    dfa4:	fc 01       	movw	r30, r24
    dfa6:	19 95       	eicall
    dfa8:	80 93 b2 28 	sts	0x28B2, r24	; 0x8028b2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    dfac:	61 e0       	ldi	r22, 0x01	; 1
    dfae:	70 e0       	ldi	r23, 0x00	; 0
    dfb0:	82 eb       	ldi	r24, 0xB2	; 178
    dfb2:	98 e2       	ldi	r25, 0x28	; 40
    dfb4:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <udd_set_setup_payload>
    dfb8:	a8 c1       	rjmp	.+848    	; 0xe30a <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    dfba:	82 30       	cpi	r24, 0x02	; 2
    dfbc:	09 f0       	breq	.+2      	; 0xdfc0 <udc_process_setup+0x212>
    dfbe:	16 c1       	rjmp	.+556    	; 0xe1ec <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    dfc0:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <udd_g_ctrlreq+0x1>
    dfc4:	81 11       	cpse	r24, r1
    dfc6:	0b c1       	rjmp	.+534    	; 0xe1de <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    dfc8:	22 30       	cpi	r18, 0x02	; 2
    dfca:	31 05       	cpc	r19, r1
    dfcc:	09 f0       	breq	.+2      	; 0xdfd0 <udc_process_setup+0x222>
    dfce:	43 c1       	rjmp	.+646    	; 0xe256 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    dfd0:	80 91 c9 28 	lds	r24, 0x28C9	; 0x8028c9 <udd_g_ctrlreq+0x4>
    dfd4:	0e 94 64 55 	call	0xaac8	; 0xaac8 <udd_ep_is_halted>
    dfd8:	90 e0       	ldi	r25, 0x00	; 0
    dfda:	80 93 aa 28 	sts	0x28AA, r24	; 0x8028aa <udc_ep_status.4757>
    dfde:	90 93 ab 28 	sts	0x28AB, r25	; 0x8028ab <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    dfe2:	62 e0       	ldi	r22, 0x02	; 2
    dfe4:	70 e0       	ldi	r23, 0x00	; 0
    dfe6:	8a ea       	ldi	r24, 0xAA	; 170
    dfe8:	98 e2       	ldi	r25, 0x28	; 40
    dfea:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <udd_set_setup_payload>
    dfee:	8d c1       	rjmp	.+794    	; 0xe30a <udc_process_setup+0x55c>
    dff0:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    dff2:	09 f0       	breq	.+2      	; 0xdff6 <udc_process_setup+0x248>
    dff4:	a0 c0       	rjmp	.+320    	; 0xe136 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    dff6:	90 91 c6 28 	lds	r25, 0x28C6	; 0x8028c6 <udd_g_ctrlreq+0x1>
    dffa:	93 30       	cpi	r25, 0x03	; 3
    dffc:	91 f1       	breq	.+100    	; 0xe062 <udc_process_setup+0x2b4>
    dffe:	18 f4       	brcc	.+6      	; 0xe006 <udc_process_setup+0x258>
    e000:	91 30       	cpi	r25, 0x01	; 1
    e002:	a9 f0       	breq	.+42     	; 0xe02e <udc_process_setup+0x280>
    e004:	98 c0       	rjmp	.+304    	; 0xe136 <udc_process_setup+0x388>
    e006:	95 30       	cpi	r25, 0x05	; 5
    e008:	21 f0       	breq	.+8      	; 0xe012 <udc_process_setup+0x264>
    e00a:	99 30       	cpi	r25, 0x09	; 9
    e00c:	09 f4       	brne	.+2      	; 0xe010 <udc_process_setup+0x262>
    e00e:	43 c0       	rjmp	.+134    	; 0xe096 <udc_process_setup+0x2e8>
    e010:	92 c0       	rjmp	.+292    	; 0xe136 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    e012:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    e016:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    e01a:	89 2b       	or	r24, r25
    e01c:	09 f0       	breq	.+2      	; 0xe020 <udc_process_setup+0x272>
    e01e:	1b c1       	rjmp	.+566    	; 0xe256 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    e020:	81 ec       	ldi	r24, 0xC1	; 193
    e022:	9d e6       	ldi	r25, 0x6D	; 109
    e024:	80 93 d1 28 	sts	0x28D1, r24	; 0x8028d1 <udd_g_ctrlreq+0xc>
    e028:	90 93 d2 28 	sts	0x28D2, r25	; 0x8028d2 <udd_g_ctrlreq+0xd>
    e02c:	6e c1       	rjmp	.+732    	; 0xe30a <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    e02e:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    e032:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    e036:	89 2b       	or	r24, r25
    e038:	09 f0       	breq	.+2      	; 0xe03c <udc_process_setup+0x28e>
    e03a:	0d c1       	rjmp	.+538    	; 0xe256 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    e03c:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <udd_g_ctrlreq+0x2>
    e040:	90 91 c8 28 	lds	r25, 0x28C8	; 0x8028c8 <udd_g_ctrlreq+0x3>
    e044:	01 97       	sbiw	r24, 0x01	; 1
    e046:	09 f0       	breq	.+2      	; 0xe04a <udc_process_setup+0x29c>
    e048:	06 c1       	rjmp	.+524    	; 0xe256 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    e04a:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <udc_device_status>
    e04e:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <udc_device_status+0x1>
    e052:	8d 7f       	andi	r24, 0xFD	; 253
    e054:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <udc_device_status>
    e058:	90 93 b5 28 	sts	0x28B5, r25	; 0x8028b5 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    e05c:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <usb_callback_remotewakeup_disable>
    e060:	54 c1       	rjmp	.+680    	; 0xe30a <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    e062:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    e066:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    e06a:	89 2b       	or	r24, r25
    e06c:	09 f0       	breq	.+2      	; 0xe070 <udc_process_setup+0x2c2>
    e06e:	f3 c0       	rjmp	.+486    	; 0xe256 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    e070:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <udd_g_ctrlreq+0x2>
    e074:	90 91 c8 28 	lds	r25, 0x28C8	; 0x8028c8 <udd_g_ctrlreq+0x3>
    e078:	01 97       	sbiw	r24, 0x01	; 1
    e07a:	09 f0       	breq	.+2      	; 0xe07e <udc_process_setup+0x2d0>
    e07c:	b2 c0       	rjmp	.+356    	; 0xe1e2 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    e07e:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <udc_device_status>
    e082:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <udc_device_status+0x1>
    e086:	82 60       	ori	r24, 0x02	; 2
    e088:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <udc_device_status>
    e08c:	90 93 b5 28 	sts	0x28B5, r25	; 0x8028b5 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    e090:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <usb_callback_remotewakeup_enable>
    e094:	3a c1       	rjmp	.+628    	; 0xe30a <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    e096:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    e09a:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    e09e:	89 2b       	or	r24, r25
    e0a0:	09 f0       	breq	.+2      	; 0xe0a4 <udc_process_setup+0x2f6>
    e0a2:	d9 c0       	rjmp	.+434    	; 0xe256 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    e0a4:	0e 94 ca 54 	call	0xa994	; 0xa994 <udd_getaddress>
    e0a8:	88 23       	and	r24, r24
    e0aa:	09 f4       	brne	.+2      	; 0xe0ae <udc_process_setup+0x300>
    e0ac:	9f c0       	rjmp	.+318    	; 0xe1ec <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    e0ae:	20 91 c7 28 	lds	r18, 0x28C7	; 0x8028c7 <udd_g_ctrlreq+0x2>
    e0b2:	30 91 c8 28 	lds	r19, 0x28C8	; 0x8028c8 <udd_g_ctrlreq+0x3>
    e0b6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    e0b8:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <udc_config>
    e0bc:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    e0c0:	81 89       	ldd	r24, Z+17	; 0x11
    e0c2:	90 e0       	ldi	r25, 0x00	; 0
    e0c4:	82 17       	cp	r24, r18
    e0c6:	93 07       	cpc	r25, r19
    e0c8:	08 f4       	brcc	.+2      	; 0xe0cc <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    e0ca:	90 c0       	rjmp	.+288    	; 0xe1ec <udc_process_setup+0x43e>
    e0cc:	12 de       	rcall	.-988    	; 0xdcf2 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    e0ce:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <udd_g_ctrlreq+0x2>
    e0d2:	90 91 c8 28 	lds	r25, 0x28C8	; 0x8028c8 <udd_g_ctrlreq+0x3>
    e0d6:	80 93 b0 28 	sts	0x28B0, r24	; 0x8028b0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    e0da:	88 23       	and	r24, r24
    e0dc:	09 f4       	brne	.+2      	; 0xe0e0 <udc_process_setup+0x332>
    e0de:	15 c1       	rjmp	.+554    	; 0xe30a <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    e0e0:	99 27       	eor	r25, r25
    e0e2:	81 50       	subi	r24, 0x01	; 1
    e0e4:	90 4c       	sbci	r25, 0xC0	; 192
    e0e6:	88 0f       	add	r24, r24
    e0e8:	99 1f       	adc	r25, r25
    e0ea:	88 0f       	add	r24, r24
    e0ec:	99 1f       	adc	r25, r25
    e0ee:	e0 91 81 20 	lds	r30, 0x2081	; 0x802081 <udc_config+0x2>
    e0f2:	f0 91 82 20 	lds	r31, 0x2082	; 0x802082 <udc_config+0x3>
    e0f6:	e8 0f       	add	r30, r24
    e0f8:	f9 1f       	adc	r31, r25
    e0fa:	e0 93 ae 28 	sts	0x28AE, r30	; 0x8028ae <udc_ptr_conf>
    e0fe:	f0 93 af 28 	sts	0x28AF, r31	; 0x8028af <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e102:	01 90       	ld	r0, Z+
    e104:	f0 81       	ld	r31, Z
    e106:	e0 2d       	mov	r30, r0
    e108:	84 81       	ldd	r24, Z+4	; 0x04
    e10a:	88 23       	and	r24, r24
    e10c:	09 f4       	brne	.+2      	; 0xe110 <udc_process_setup+0x362>
    e10e:	fd c0       	rjmp	.+506    	; 0xe30a <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    e110:	c0 e0       	ldi	r28, 0x00	; 0
    e112:	60 e0       	ldi	r22, 0x00	; 0
    e114:	8c 2f       	mov	r24, r28
    e116:	b7 dd       	rcall	.-1170   	; 0xdc86 <udc_iface_enable>
    e118:	88 23       	and	r24, r24
    e11a:	09 f4       	brne	.+2      	; 0xe11e <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    e11c:	67 c0       	rjmp	.+206    	; 0xe1ec <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e11e:	cf 5f       	subi	r28, 0xFF	; 255
    e120:	e0 91 ae 28 	lds	r30, 0x28AE	; 0x8028ae <udc_ptr_conf>
    e124:	f0 91 af 28 	lds	r31, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    e128:	01 90       	ld	r0, Z+
    e12a:	f0 81       	ld	r31, Z
    e12c:	e0 2d       	mov	r30, r0
    e12e:	84 81       	ldd	r24, Z+4	; 0x04
    e130:	c8 17       	cp	r28, r24
    e132:	78 f3       	brcs	.-34     	; 0xe112 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    e134:	ea c0       	rjmp	.+468    	; 0xe30a <udc_process_setup+0x55c>
    e136:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    e138:	e9 f4       	brne	.+58     	; 0xe174 <udc_process_setup+0x3c6>
    e13a:	90 91 c6 28 	lds	r25, 0x28C6	; 0x8028c6 <udd_g_ctrlreq+0x1>
    e13e:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    e140:	c9 f4       	brne	.+50     	; 0xe174 <udc_process_setup+0x3c6>
    e142:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    e146:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    e14a:	89 2b       	or	r24, r25
    e14c:	09 f0       	breq	.+2      	; 0xe150 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    e14e:	53 c0       	rjmp	.+166    	; 0xe1f6 <udc_process_setup+0x448>
    e150:	80 91 b0 28 	lds	r24, 0x28B0	; 0x8028b0 <udc_num_configuration>
    e154:	88 23       	and	r24, r24
    e156:	09 f4       	brne	.+2      	; 0xe15a <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    e158:	4e c0       	rjmp	.+156    	; 0xe1f6 <udc_process_setup+0x448>
    e15a:	e5 ec       	ldi	r30, 0xC5	; 197
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    e15c:	f8 e2       	ldi	r31, 0x28	; 40

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    e15e:	c4 81       	ldd	r28, Z+4	; 0x04
    e160:	d2 81       	ldd	r29, Z+2	; 0x02
    e162:	8c 2f       	mov	r24, r28
    e164:	4e dd       	rcall	.-1380   	; 0xdc02 <udc_iface_disable>
    e166:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    e168:	09 f4       	brne	.+2      	; 0xe16c <udc_process_setup+0x3be>
    e16a:	40 c0       	rjmp	.+128    	; 0xe1ec <udc_process_setup+0x43e>
    e16c:	6d 2f       	mov	r22, r29
    e16e:	8c 2f       	mov	r24, r28
    e170:	8a dd       	rcall	.-1260   	; 0xdc86 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    e172:	3a c0       	rjmp	.+116    	; 0xe1e8 <udc_process_setup+0x43a>
    e174:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    e176:	d1 f5       	brne	.+116    	; 0xe1ec <udc_process_setup+0x43e>
    e178:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <udd_g_ctrlreq+0x1>
    e17c:	81 30       	cpi	r24, 0x01	; 1
    e17e:	19 f0       	breq	.+6      	; 0xe186 <udc_process_setup+0x3d8>
    e180:	83 30       	cpi	r24, 0x03	; 3
    e182:	a1 f0       	breq	.+40     	; 0xe1ac <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    e184:	30 c0       	rjmp	.+96     	; 0xe1e6 <udc_process_setup+0x438>
    e186:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    e18a:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    e18e:	89 2b       	or	r24, r25
    e190:	09 f0       	breq	.+2      	; 0xe194 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    e192:	61 c0       	rjmp	.+194    	; 0xe256 <udc_process_setup+0x4a8>
    e194:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <udd_g_ctrlreq+0x2>
    e198:	90 91 c8 28 	lds	r25, 0x28C8	; 0x8028c8 <udd_g_ctrlreq+0x3>
    e19c:	89 2b       	or	r24, r25
    e19e:	09 f0       	breq	.+2      	; 0xe1a2 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    e1a0:	5a c0       	rjmp	.+180    	; 0xe256 <udc_process_setup+0x4a8>
    e1a2:	80 91 c9 28 	lds	r24, 0x28C9	; 0x8028c9 <udd_g_ctrlreq+0x4>
    e1a6:	0e 94 7f 55 	call	0xaafe	; 0xaafe <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    e1aa:	1e c0       	rjmp	.+60     	; 0xe1e8 <udc_process_setup+0x43a>
    e1ac:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <udd_g_ctrlreq+0x6>
    e1b0:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <udd_g_ctrlreq+0x7>
    e1b4:	89 2b       	or	r24, r25
    e1b6:	09 f0       	breq	.+2      	; 0xe1ba <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    e1b8:	4e c0       	rjmp	.+156    	; 0xe256 <udc_process_setup+0x4a8>
    e1ba:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <udd_g_ctrlreq+0x2>
    e1be:	90 91 c8 28 	lds	r25, 0x28C8	; 0x8028c8 <udd_g_ctrlreq+0x3>
    e1c2:	89 2b       	or	r24, r25
    e1c4:	09 f0       	breq	.+2      	; 0xe1c8 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    e1c6:	47 c0       	rjmp	.+142    	; 0xe256 <udc_process_setup+0x4a8>
    e1c8:	c5 ec       	ldi	r28, 0xC5	; 197
    e1ca:	d8 e2       	ldi	r29, 0x28	; 40
    e1cc:	8c 81       	ldd	r24, Y+4	; 0x04
    e1ce:	0e 94 81 56 	call	0xad02	; 0xad02 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    e1d2:	8c 81       	ldd	r24, Y+4	; 0x04
    e1d4:	0e 94 ec 56 	call	0xadd8	; 0xadd8 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    e1d8:	07 c0       	rjmp	.+14     	; 0xe1e8 <udc_process_setup+0x43a>
    e1da:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    e1dc:	05 c0       	rjmp	.+10     	; 0xe1e8 <udc_process_setup+0x43a>
    e1de:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    e1e0:	03 c0       	rjmp	.+6      	; 0xe1e8 <udc_process_setup+0x43a>
    e1e2:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    e1e4:	01 c0       	rjmp	.+2      	; 0xe1e8 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    e1e6:	80 e0       	ldi	r24, 0x00	; 0
    e1e8:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    e1ea:	90 c0       	rjmp	.+288    	; 0xe30c <udc_process_setup+0x55e>
    e1ec:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <udd_g_ctrlreq>
    e1f0:	8f 71       	andi	r24, 0x1F	; 31
    e1f2:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    e1f4:	81 f5       	brne	.+96     	; 0xe256 <udc_process_setup+0x4a8>
    e1f6:	80 91 b0 28 	lds	r24, 0x28B0	; 0x8028b0 <udc_num_configuration>
    e1fa:	88 23       	and	r24, r24
    e1fc:	09 f4       	brne	.+2      	; 0xe200 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    e1fe:	71 c0       	rjmp	.+226    	; 0xe2e2 <udc_process_setup+0x534>
    e200:	00 91 c9 28 	lds	r16, 0x28C9	; 0x8028c9 <udd_g_ctrlreq+0x4>
    e204:	10 91 ca 28 	lds	r17, 0x28CA	; 0x8028ca <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    e208:	c0 91 ae 28 	lds	r28, 0x28AE	; 0x8028ae <udc_ptr_conf>
    e20c:	d0 91 af 28 	lds	r29, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    e210:	e8 81       	ld	r30, Y
    e212:	f9 81       	ldd	r31, Y+1	; 0x01
    e214:	84 81       	ldd	r24, Z+4	; 0x04
    e216:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    e218:	08 f0       	brcs	.+2      	; 0xe21c <udc_process_setup+0x46e>
    e21a:	65 c0       	rjmp	.+202    	; 0xe2e6 <udc_process_setup+0x538>
    e21c:	60 e0       	ldi	r22, 0x00	; 0
    e21e:	80 2f       	mov	r24, r16
    e220:	b6 dc       	rcall	.-1684   	; 0xdb8e <udc_update_iface_desc>
    e222:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    e224:	c1 f0       	breq	.+48     	; 0xe256 <udc_process_setup+0x4a8>
    e226:	f8 01       	movw	r30, r16
    e228:	ff 27       	eor	r31, r31
    e22a:	cf 01       	movw	r24, r30
    e22c:	88 0f       	add	r24, r24
    e22e:	99 1f       	adc	r25, r25
    e230:	ea 81       	ldd	r30, Y+2	; 0x02
    e232:	fb 81       	ldd	r31, Y+3	; 0x03
    e234:	e8 0f       	add	r30, r24
    e236:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    e238:	c0 81       	ld	r28, Z
    e23a:	d1 81       	ldd	r29, Z+1	; 0x01
    e23c:	ee 81       	ldd	r30, Y+6	; 0x06
    e23e:	ff 81       	ldd	r31, Y+7	; 0x07
    e240:	19 95       	eicall
    e242:	68 2f       	mov	r22, r24
    e244:	80 2f       	mov	r24, r16
    e246:	a3 dc       	rcall	.-1722   	; 0xdb8e <udc_update_iface_desc>
    e248:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    e24a:	29 f0       	breq	.+10     	; 0xe256 <udc_process_setup+0x4a8>
    e24c:	ec 81       	ldd	r30, Y+4	; 0x04
    e24e:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    e250:	19 95       	eicall
    e252:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    e254:	5b c0       	rjmp	.+182    	; 0xe30c <udc_process_setup+0x55e>
    e256:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <udd_g_ctrlreq>
    e25a:	8f 71       	andi	r24, 0x1F	; 31
    e25c:	82 30       	cpi	r24, 0x02	; 2
    e25e:	09 f0       	breq	.+2      	; 0xe262 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    e260:	44 c0       	rjmp	.+136    	; 0xe2ea <udc_process_setup+0x53c>
    e262:	80 91 b0 28 	lds	r24, 0x28B0	; 0x8028b0 <udc_num_configuration>
    e266:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e268:	b1 f1       	breq	.+108    	; 0xe2d6 <udc_process_setup+0x528>
    e26a:	a0 91 ae 28 	lds	r26, 0x28AE	; 0x8028ae <udc_ptr_conf>
    e26e:	b0 91 af 28 	lds	r27, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    e272:	ed 91       	ld	r30, X+
    e274:	fc 91       	ld	r31, X
    e276:	11 97       	sbiw	r26, 0x01	; 1
    e278:	84 81       	ldd	r24, Z+4	; 0x04
    e27a:	88 23       	and	r24, r24
    e27c:	71 f1       	breq	.+92     	; 0xe2da <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    e27e:	c0 e0       	ldi	r28, 0x00	; 0
    e280:	ec 2f       	mov	r30, r28
    e282:	f0 e0       	ldi	r31, 0x00	; 0
    e284:	ee 0f       	add	r30, r30
    e286:	ff 1f       	adc	r31, r31
    e288:	12 96       	adiw	r26, 0x02	; 2
    e28a:	8d 91       	ld	r24, X+
    e28c:	9c 91       	ld	r25, X
    e28e:	13 97       	sbiw	r26, 0x03	; 3
    e290:	e8 0f       	add	r30, r24
    e292:	f9 1f       	adc	r31, r25
    e294:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    e296:	11 81       	ldd	r17, Z+1	; 0x01
    e298:	d8 01       	movw	r26, r16
    e29a:	16 96       	adiw	r26, 0x06	; 6
    e29c:	ed 91       	ld	r30, X+
    e29e:	fc 91       	ld	r31, X
    e2a0:	17 97       	sbiw	r26, 0x07	; 7
    e2a2:	19 95       	eicall
    e2a4:	68 2f       	mov	r22, r24
    e2a6:	8c 2f       	mov	r24, r28
    e2a8:	72 dc       	rcall	.-1820   	; 0xdb8e <udc_update_iface_desc>
    e2aa:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    e2ac:	79 f1       	breq	.+94     	; 0xe30c <udc_process_setup+0x55e>
    e2ae:	d8 01       	movw	r26, r16
    e2b0:	14 96       	adiw	r26, 0x04	; 4
    e2b2:	ed 91       	ld	r30, X+
    e2b4:	fc 91       	ld	r31, X
    e2b6:	15 97       	sbiw	r26, 0x05	; 5
    e2b8:	19 95       	eicall
    e2ba:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    e2bc:	27 c0       	rjmp	.+78     	; 0xe30c <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e2be:	cf 5f       	subi	r28, 0xFF	; 255
    e2c0:	a0 91 ae 28 	lds	r26, 0x28AE	; 0x8028ae <udc_ptr_conf>
    e2c4:	b0 91 af 28 	lds	r27, 0x28AF	; 0x8028af <udc_ptr_conf+0x1>
    e2c8:	ed 91       	ld	r30, X+
    e2ca:	fc 91       	ld	r31, X
    e2cc:	11 97       	sbiw	r26, 0x01	; 1
    e2ce:	94 81       	ldd	r25, Z+4	; 0x04
    e2d0:	c9 17       	cp	r28, r25
    e2d2:	b0 f2       	brcs	.-84     	; 0xe280 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    e2d4:	1b c0       	rjmp	.+54     	; 0xe30c <udc_process_setup+0x55e>
    e2d6:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    e2d8:	19 c0       	rjmp	.+50     	; 0xe30c <udc_process_setup+0x55e>
    e2da:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    e2dc:	17 c0       	rjmp	.+46     	; 0xe30c <udc_process_setup+0x55e>
    e2de:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    e2e0:	15 c0       	rjmp	.+42     	; 0xe30c <udc_process_setup+0x55e>
    e2e2:	80 e0       	ldi	r24, 0x00	; 0
    e2e4:	13 c0       	rjmp	.+38     	; 0xe30c <udc_process_setup+0x55e>
    e2e6:	80 e0       	ldi	r24, 0x00	; 0
    e2e8:	11 c0       	rjmp	.+34     	; 0xe30c <udc_process_setup+0x55e>
    e2ea:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    e2ec:	0f c0       	rjmp	.+30     	; 0xe30c <udc_process_setup+0x55e>
    e2ee:	98 2f       	mov	r25, r24
    e2f0:	90 76       	andi	r25, 0x60	; 96
    e2f2:	09 f0       	breq	.+2      	; 0xe2f6 <udc_process_setup+0x548>
    e2f4:	7b cf       	rjmp	.-266    	; 0xe1ec <udc_process_setup+0x43e>
    e2f6:	74 cd       	rjmp	.-1304   	; 0xdde0 <udc_process_setup+0x32>
    e2f8:	98 2f       	mov	r25, r24
    e2fa:	90 76       	andi	r25, 0x60	; 96
    e2fc:	09 f0       	breq	.+2      	; 0xe300 <udc_process_setup+0x552>
    e2fe:	76 cf       	rjmp	.-276    	; 0xe1ec <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    e300:	77 ce       	rjmp	.-786    	; 0xdff0 <udc_process_setup+0x242>
		str = udc_string_product_name;
    e302:	3c e0       	ldi	r19, 0x0C	; 12
    e304:	e6 e0       	ldi	r30, 0x06	; 6
    e306:	f1 e2       	ldi	r31, 0x21	; 33
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    e308:	eb cd       	rjmp	.-1066   	; 0xdee0 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    e30a:	81 e0       	ldi	r24, 0x01	; 1
    e30c:	df 91       	pop	r29
    e30e:	cf 91       	pop	r28
    e310:	1f 91       	pop	r17
    e312:	0f 91       	pop	r16
    e314:	08 95       	ret

0000e316 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    e316:	cf 93       	push	r28
    e318:	df 93       	push	r29
    e31a:	1f 92       	push	r1
    e31c:	cd b7       	in	r28, 0x3d	; 61
    e31e:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    e320:	80 91 65 29 	lds	r24, 0x2965	; 0x802965 <stdio_base>
    e324:	90 91 66 29 	lds	r25, 0x2966	; 0x802966 <stdio_base+0x1>
    e328:	e0 91 61 29 	lds	r30, 0x2961	; 0x802961 <ptr_get>
    e32c:	f0 91 62 29 	lds	r31, 0x2962	; 0x802962 <ptr_get+0x1>
    e330:	be 01       	movw	r22, r28
    e332:	6f 5f       	subi	r22, 0xFF	; 255
    e334:	7f 4f       	sbci	r23, 0xFF	; 255
    e336:	19 95       	eicall
	return c;
    e338:	89 81       	ldd	r24, Y+1	; 0x01
}
    e33a:	08 2e       	mov	r0, r24
    e33c:	00 0c       	add	r0, r0
    e33e:	99 0b       	sbc	r25, r25
    e340:	0f 90       	pop	r0
    e342:	df 91       	pop	r29
    e344:	cf 91       	pop	r28
    e346:	08 95       	ret

0000e348 <stdio_usb_putchar>:
int stdio_usb_putchar (volatile void * unused, char data)
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    e348:	80 91 b6 28 	lds	r24, 0x28B6	; 0x8028b6 <stdio_usb_interface_enable>
    e34c:	88 23       	and	r24, r24
    e34e:	81 f0       	breq	.+32     	; 0xe370 <stdio_usb_putchar+0x28>
    e350:	86 2f       	mov	r24, r22
		return 0;  // -1
	}

	return udi_cdc_putc(data) ? 0 : -1;
    e352:	08 2e       	mov	r0, r24
    e354:	00 0c       	add	r0, r0
    e356:	99 0b       	sbc	r25, r25
    e358:	db db       	rcall	.-2122   	; 0xdb10 <udi_cdc_putc>
    e35a:	21 e0       	ldi	r18, 0x01	; 1
    e35c:	30 e0       	ldi	r19, 0x00	; 0
    e35e:	89 2b       	or	r24, r25
    e360:	11 f0       	breq	.+4      	; 0xe366 <stdio_usb_putchar+0x1e>
    e362:	20 e0       	ldi	r18, 0x00	; 0
    e364:	30 e0       	ldi	r19, 0x00	; 0
    e366:	88 27       	eor	r24, r24
    e368:	99 27       	eor	r25, r25
    e36a:	82 1b       	sub	r24, r18
    e36c:	93 0b       	sbc	r25, r19
    e36e:	08 95       	ret
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
		return 0;  // -1
    e370:	80 e0       	ldi	r24, 0x00	; 0
    e372:	90 e0       	ldi	r25, 0x00	; 0
	}

	return udi_cdc_putc(data) ? 0 : -1;
}
    e374:	08 95       	ret

0000e376 <stdio_usb_getchar>:

void stdio_usb_getchar (void volatile * unused, char *data)
{
    e376:	cf 93       	push	r28
    e378:	df 93       	push	r29
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    e37a:	80 91 b6 28 	lds	r24, 0x28B6	; 0x8028b6 <stdio_usb_interface_enable>
    e37e:	81 11       	cpse	r24, r1
    e380:	03 c0       	rjmp	.+6      	; 0xe388 <stdio_usb_getchar+0x12>
		*data = 0;  // -1
    e382:	fb 01       	movw	r30, r22
    e384:	10 82       	st	Z, r1
		return;
    e386:	03 c0       	rjmp	.+6      	; 0xe38e <stdio_usb_getchar+0x18>
	}

	*data = (char)udi_cdc_getc();
    e388:	eb 01       	movw	r28, r22
    e38a:	d5 da       	rcall	.-2646   	; 0xd936 <udi_cdc_getc>
}
    e38c:	88 83       	st	Y, r24
    e38e:	df 91       	pop	r29
    e390:	cf 91       	pop	r28
    e392:	08 95       	ret

0000e394 <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
    e394:	81 e0       	ldi	r24, 0x01	; 1
    e396:	80 93 b6 28 	sts	0x28B6, r24	; 0x8028b6 <stdio_usb_interface_enable>
	return true;
}
    e39a:	08 95       	ret

0000e39c <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    e39c:	10 92 b6 28 	sts	0x28B6, r1	; 0x8028b6 <stdio_usb_interface_enable>
    e3a0:	08 95       	ret

0000e3a2 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    e3a2:	10 92 65 29 	sts	0x2965, r1	; 0x802965 <stdio_base>
    e3a6:	10 92 66 29 	sts	0x2966, r1	; 0x802966 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    e3aa:	84 ea       	ldi	r24, 0xA4	; 164
    e3ac:	91 e7       	ldi	r25, 0x71	; 113
    e3ae:	80 93 63 29 	sts	0x2963, r24	; 0x802963 <ptr_put>
    e3b2:	90 93 64 29 	sts	0x2964, r25	; 0x802964 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    e3b6:	8b eb       	ldi	r24, 0xBB	; 187
    e3b8:	91 e7       	ldi	r25, 0x71	; 113
    e3ba:	80 93 61 29 	sts	0x2961, r24	; 0x802961 <ptr_get>
    e3be:	90 93 62 29 	sts	0x2962, r25	; 0x802962 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    e3c2:	94 dc       	rcall	.-1752   	; 0xdcec <udc_start>
    e3c4:	6b e8       	ldi	r22, 0x8B	; 139
    e3c6:	71 e7       	ldi	r23, 0x71	; 113
    e3c8:	89 ee       	ldi	r24, 0xE9	; 233
    e3ca:	91 e7       	ldi	r25, 0x71	; 113
    e3cc:	0c 94 33 7d 	jmp	0xfa66	; 0xfa66 <fdevopen>
    e3d0:	08 95       	ret

0000e3d2 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    e3d2:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    e3d4:	80 91 65 29 	lds	r24, 0x2965	; 0x802965 <stdio_base>
    e3d8:	90 91 66 29 	lds	r25, 0x2966	; 0x802966 <stdio_base+0x1>
    e3dc:	e0 91 63 29 	lds	r30, 0x2963	; 0x802963 <ptr_put>
    e3e0:	f0 91 64 29 	lds	r31, 0x2964	; 0x802964 <ptr_put+0x1>
    e3e4:	19 95       	eicall
    e3e6:	99 23       	and	r25, r25
    e3e8:	1c f0       	brlt	.+6      	; 0xe3f0 <_write+0x1e>
		return -1;
	}
	return 1;
    e3ea:	81 e0       	ldi	r24, 0x01	; 1
    e3ec:	90 e0       	ldi	r25, 0x00	; 0
    e3ee:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    e3f0:	8f ef       	ldi	r24, 0xFF	; 255
    e3f2:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    e3f4:	08 95       	ret

0000e3f6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    e3f6:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    e3fa:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    e3fc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    e3fe:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    e402:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    e404:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    e408:	08 95       	ret

0000e40a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    e40a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    e40c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    e40e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    e410:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    e412:	60 83       	st	Z, r22
	ret                             // Return to caller
    e414:	08 95       	ret

0000e416 <vfprintf>:
    e416:	2f 92       	push	r2
    e418:	3f 92       	push	r3
    e41a:	4f 92       	push	r4
    e41c:	5f 92       	push	r5
    e41e:	6f 92       	push	r6
    e420:	7f 92       	push	r7
    e422:	8f 92       	push	r8
    e424:	9f 92       	push	r9
    e426:	af 92       	push	r10
    e428:	bf 92       	push	r11
    e42a:	cf 92       	push	r12
    e42c:	df 92       	push	r13
    e42e:	ef 92       	push	r14
    e430:	ff 92       	push	r15
    e432:	0f 93       	push	r16
    e434:	1f 93       	push	r17
    e436:	cf 93       	push	r28
    e438:	df 93       	push	r29
    e43a:	cd b7       	in	r28, 0x3d	; 61
    e43c:	de b7       	in	r29, 0x3e	; 62
    e43e:	60 97       	sbiw	r28, 0x10	; 16
    e440:	cd bf       	out	0x3d, r28	; 61
    e442:	de bf       	out	0x3e, r29	; 62
    e444:	7c 01       	movw	r14, r24
    e446:	1b 01       	movw	r2, r22
    e448:	6a 01       	movw	r12, r20
    e44a:	fc 01       	movw	r30, r24
    e44c:	16 82       	std	Z+6, r1	; 0x06
    e44e:	17 82       	std	Z+7, r1	; 0x07
    e450:	83 81       	ldd	r24, Z+3	; 0x03
    e452:	81 ff       	sbrs	r24, 1
    e454:	44 c3       	rjmp	.+1672   	; 0xeade <vfprintf+0x6c8>
    e456:	9e 01       	movw	r18, r28
    e458:	2f 5f       	subi	r18, 0xFF	; 255
    e45a:	3f 4f       	sbci	r19, 0xFF	; 255
    e45c:	39 01       	movw	r6, r18
    e45e:	f7 01       	movw	r30, r14
    e460:	93 81       	ldd	r25, Z+3	; 0x03
    e462:	f1 01       	movw	r30, r2
    e464:	93 fd       	sbrc	r25, 3
    e466:	85 91       	lpm	r24, Z+
    e468:	93 ff       	sbrs	r25, 3
    e46a:	81 91       	ld	r24, Z+
    e46c:	1f 01       	movw	r2, r30
    e46e:	88 23       	and	r24, r24
    e470:	09 f4       	brne	.+2      	; 0xe474 <vfprintf+0x5e>
    e472:	31 c3       	rjmp	.+1634   	; 0xead6 <vfprintf+0x6c0>
    e474:	85 32       	cpi	r24, 0x25	; 37
    e476:	39 f4       	brne	.+14     	; 0xe486 <vfprintf+0x70>
    e478:	93 fd       	sbrc	r25, 3
    e47a:	85 91       	lpm	r24, Z+
    e47c:	93 ff       	sbrs	r25, 3
    e47e:	81 91       	ld	r24, Z+
    e480:	1f 01       	movw	r2, r30
    e482:	85 32       	cpi	r24, 0x25	; 37
    e484:	39 f4       	brne	.+14     	; 0xe494 <vfprintf+0x7e>
    e486:	b7 01       	movw	r22, r14
    e488:	90 e0       	ldi	r25, 0x00	; 0
    e48a:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e48e:	56 01       	movw	r10, r12
    e490:	65 01       	movw	r12, r10
    e492:	e5 cf       	rjmp	.-54     	; 0xe45e <vfprintf+0x48>
    e494:	10 e0       	ldi	r17, 0x00	; 0
    e496:	51 2c       	mov	r5, r1
    e498:	91 2c       	mov	r9, r1
    e49a:	ff e1       	ldi	r31, 0x1F	; 31
    e49c:	f9 15       	cp	r31, r9
    e49e:	d8 f0       	brcs	.+54     	; 0xe4d6 <vfprintf+0xc0>
    e4a0:	8b 32       	cpi	r24, 0x2B	; 43
    e4a2:	79 f0       	breq	.+30     	; 0xe4c2 <vfprintf+0xac>
    e4a4:	38 f4       	brcc	.+14     	; 0xe4b4 <vfprintf+0x9e>
    e4a6:	80 32       	cpi	r24, 0x20	; 32
    e4a8:	79 f0       	breq	.+30     	; 0xe4c8 <vfprintf+0xb2>
    e4aa:	83 32       	cpi	r24, 0x23	; 35
    e4ac:	a1 f4       	brne	.+40     	; 0xe4d6 <vfprintf+0xc0>
    e4ae:	f9 2d       	mov	r31, r9
    e4b0:	f0 61       	ori	r31, 0x10	; 16
    e4b2:	2e c0       	rjmp	.+92     	; 0xe510 <vfprintf+0xfa>
    e4b4:	8d 32       	cpi	r24, 0x2D	; 45
    e4b6:	61 f0       	breq	.+24     	; 0xe4d0 <vfprintf+0xba>
    e4b8:	80 33       	cpi	r24, 0x30	; 48
    e4ba:	69 f4       	brne	.+26     	; 0xe4d6 <vfprintf+0xc0>
    e4bc:	29 2d       	mov	r18, r9
    e4be:	21 60       	ori	r18, 0x01	; 1
    e4c0:	2d c0       	rjmp	.+90     	; 0xe51c <vfprintf+0x106>
    e4c2:	39 2d       	mov	r19, r9
    e4c4:	32 60       	ori	r19, 0x02	; 2
    e4c6:	93 2e       	mov	r9, r19
    e4c8:	89 2d       	mov	r24, r9
    e4ca:	84 60       	ori	r24, 0x04	; 4
    e4cc:	98 2e       	mov	r9, r24
    e4ce:	2a c0       	rjmp	.+84     	; 0xe524 <vfprintf+0x10e>
    e4d0:	e9 2d       	mov	r30, r9
    e4d2:	e8 60       	ori	r30, 0x08	; 8
    e4d4:	15 c0       	rjmp	.+42     	; 0xe500 <vfprintf+0xea>
    e4d6:	97 fc       	sbrc	r9, 7
    e4d8:	2d c0       	rjmp	.+90     	; 0xe534 <vfprintf+0x11e>
    e4da:	20 ed       	ldi	r18, 0xD0	; 208
    e4dc:	28 0f       	add	r18, r24
    e4de:	2a 30       	cpi	r18, 0x0A	; 10
    e4e0:	88 f4       	brcc	.+34     	; 0xe504 <vfprintf+0xee>
    e4e2:	96 fe       	sbrs	r9, 6
    e4e4:	06 c0       	rjmp	.+12     	; 0xe4f2 <vfprintf+0xdc>
    e4e6:	3a e0       	ldi	r19, 0x0A	; 10
    e4e8:	13 9f       	mul	r17, r19
    e4ea:	20 0d       	add	r18, r0
    e4ec:	11 24       	eor	r1, r1
    e4ee:	12 2f       	mov	r17, r18
    e4f0:	19 c0       	rjmp	.+50     	; 0xe524 <vfprintf+0x10e>
    e4f2:	8a e0       	ldi	r24, 0x0A	; 10
    e4f4:	58 9e       	mul	r5, r24
    e4f6:	20 0d       	add	r18, r0
    e4f8:	11 24       	eor	r1, r1
    e4fa:	52 2e       	mov	r5, r18
    e4fc:	e9 2d       	mov	r30, r9
    e4fe:	e0 62       	ori	r30, 0x20	; 32
    e500:	9e 2e       	mov	r9, r30
    e502:	10 c0       	rjmp	.+32     	; 0xe524 <vfprintf+0x10e>
    e504:	8e 32       	cpi	r24, 0x2E	; 46
    e506:	31 f4       	brne	.+12     	; 0xe514 <vfprintf+0xfe>
    e508:	96 fc       	sbrc	r9, 6
    e50a:	e5 c2       	rjmp	.+1482   	; 0xead6 <vfprintf+0x6c0>
    e50c:	f9 2d       	mov	r31, r9
    e50e:	f0 64       	ori	r31, 0x40	; 64
    e510:	9f 2e       	mov	r9, r31
    e512:	08 c0       	rjmp	.+16     	; 0xe524 <vfprintf+0x10e>
    e514:	8c 36       	cpi	r24, 0x6C	; 108
    e516:	21 f4       	brne	.+8      	; 0xe520 <vfprintf+0x10a>
    e518:	29 2d       	mov	r18, r9
    e51a:	20 68       	ori	r18, 0x80	; 128
    e51c:	92 2e       	mov	r9, r18
    e51e:	02 c0       	rjmp	.+4      	; 0xe524 <vfprintf+0x10e>
    e520:	88 36       	cpi	r24, 0x68	; 104
    e522:	41 f4       	brne	.+16     	; 0xe534 <vfprintf+0x11e>
    e524:	f1 01       	movw	r30, r2
    e526:	93 fd       	sbrc	r25, 3
    e528:	85 91       	lpm	r24, Z+
    e52a:	93 ff       	sbrs	r25, 3
    e52c:	81 91       	ld	r24, Z+
    e52e:	1f 01       	movw	r2, r30
    e530:	81 11       	cpse	r24, r1
    e532:	b3 cf       	rjmp	.-154    	; 0xe49a <vfprintf+0x84>
    e534:	9b eb       	ldi	r25, 0xBB	; 187
    e536:	98 0f       	add	r25, r24
    e538:	93 30       	cpi	r25, 0x03	; 3
    e53a:	20 f4       	brcc	.+8      	; 0xe544 <vfprintf+0x12e>
    e53c:	99 2d       	mov	r25, r9
    e53e:	90 61       	ori	r25, 0x10	; 16
    e540:	80 5e       	subi	r24, 0xE0	; 224
    e542:	07 c0       	rjmp	.+14     	; 0xe552 <vfprintf+0x13c>
    e544:	9b e9       	ldi	r25, 0x9B	; 155
    e546:	98 0f       	add	r25, r24
    e548:	93 30       	cpi	r25, 0x03	; 3
    e54a:	08 f0       	brcs	.+2      	; 0xe54e <vfprintf+0x138>
    e54c:	66 c1       	rjmp	.+716    	; 0xe81a <vfprintf+0x404>
    e54e:	99 2d       	mov	r25, r9
    e550:	9f 7e       	andi	r25, 0xEF	; 239
    e552:	96 ff       	sbrs	r25, 6
    e554:	16 e0       	ldi	r17, 0x06	; 6
    e556:	9f 73       	andi	r25, 0x3F	; 63
    e558:	99 2e       	mov	r9, r25
    e55a:	85 36       	cpi	r24, 0x65	; 101
    e55c:	19 f4       	brne	.+6      	; 0xe564 <vfprintf+0x14e>
    e55e:	90 64       	ori	r25, 0x40	; 64
    e560:	99 2e       	mov	r9, r25
    e562:	08 c0       	rjmp	.+16     	; 0xe574 <vfprintf+0x15e>
    e564:	86 36       	cpi	r24, 0x66	; 102
    e566:	21 f4       	brne	.+8      	; 0xe570 <vfprintf+0x15a>
    e568:	39 2f       	mov	r19, r25
    e56a:	30 68       	ori	r19, 0x80	; 128
    e56c:	93 2e       	mov	r9, r19
    e56e:	02 c0       	rjmp	.+4      	; 0xe574 <vfprintf+0x15e>
    e570:	11 11       	cpse	r17, r1
    e572:	11 50       	subi	r17, 0x01	; 1
    e574:	97 fe       	sbrs	r9, 7
    e576:	07 c0       	rjmp	.+14     	; 0xe586 <vfprintf+0x170>
    e578:	1c 33       	cpi	r17, 0x3C	; 60
    e57a:	50 f4       	brcc	.+20     	; 0xe590 <vfprintf+0x17a>
    e57c:	44 24       	eor	r4, r4
    e57e:	43 94       	inc	r4
    e580:	41 0e       	add	r4, r17
    e582:	27 e0       	ldi	r18, 0x07	; 7
    e584:	0b c0       	rjmp	.+22     	; 0xe59c <vfprintf+0x186>
    e586:	18 30       	cpi	r17, 0x08	; 8
    e588:	38 f0       	brcs	.+14     	; 0xe598 <vfprintf+0x182>
    e58a:	27 e0       	ldi	r18, 0x07	; 7
    e58c:	17 e0       	ldi	r17, 0x07	; 7
    e58e:	05 c0       	rjmp	.+10     	; 0xe59a <vfprintf+0x184>
    e590:	27 e0       	ldi	r18, 0x07	; 7
    e592:	9c e3       	ldi	r25, 0x3C	; 60
    e594:	49 2e       	mov	r4, r25
    e596:	02 c0       	rjmp	.+4      	; 0xe59c <vfprintf+0x186>
    e598:	21 2f       	mov	r18, r17
    e59a:	41 2c       	mov	r4, r1
    e59c:	56 01       	movw	r10, r12
    e59e:	84 e0       	ldi	r24, 0x04	; 4
    e5a0:	a8 0e       	add	r10, r24
    e5a2:	b1 1c       	adc	r11, r1
    e5a4:	f6 01       	movw	r30, r12
    e5a6:	60 81       	ld	r22, Z
    e5a8:	71 81       	ldd	r23, Z+1	; 0x01
    e5aa:	82 81       	ldd	r24, Z+2	; 0x02
    e5ac:	93 81       	ldd	r25, Z+3	; 0x03
    e5ae:	04 2d       	mov	r16, r4
    e5b0:	a3 01       	movw	r20, r6
    e5b2:	0e 94 c7 7b 	call	0xf78e	; 0xf78e <__ftoa_engine>
    e5b6:	6c 01       	movw	r12, r24
    e5b8:	f9 81       	ldd	r31, Y+1	; 0x01
    e5ba:	fc 87       	std	Y+12, r31	; 0x0c
    e5bc:	f0 ff       	sbrs	r31, 0
    e5be:	02 c0       	rjmp	.+4      	; 0xe5c4 <vfprintf+0x1ae>
    e5c0:	f3 ff       	sbrs	r31, 3
    e5c2:	06 c0       	rjmp	.+12     	; 0xe5d0 <vfprintf+0x1ba>
    e5c4:	91 fc       	sbrc	r9, 1
    e5c6:	06 c0       	rjmp	.+12     	; 0xe5d4 <vfprintf+0x1be>
    e5c8:	92 fe       	sbrs	r9, 2
    e5ca:	06 c0       	rjmp	.+12     	; 0xe5d8 <vfprintf+0x1c2>
    e5cc:	00 e2       	ldi	r16, 0x20	; 32
    e5ce:	05 c0       	rjmp	.+10     	; 0xe5da <vfprintf+0x1c4>
    e5d0:	0d e2       	ldi	r16, 0x2D	; 45
    e5d2:	03 c0       	rjmp	.+6      	; 0xe5da <vfprintf+0x1c4>
    e5d4:	0b e2       	ldi	r16, 0x2B	; 43
    e5d6:	01 c0       	rjmp	.+2      	; 0xe5da <vfprintf+0x1c4>
    e5d8:	00 e0       	ldi	r16, 0x00	; 0
    e5da:	8c 85       	ldd	r24, Y+12	; 0x0c
    e5dc:	8c 70       	andi	r24, 0x0C	; 12
    e5de:	19 f0       	breq	.+6      	; 0xe5e6 <vfprintf+0x1d0>
    e5e0:	01 11       	cpse	r16, r1
    e5e2:	5a c2       	rjmp	.+1204   	; 0xea98 <vfprintf+0x682>
    e5e4:	99 c2       	rjmp	.+1330   	; 0xeb18 <vfprintf+0x702>
    e5e6:	97 fe       	sbrs	r9, 7
    e5e8:	10 c0       	rjmp	.+32     	; 0xe60a <vfprintf+0x1f4>
    e5ea:	4c 0c       	add	r4, r12
    e5ec:	fc 85       	ldd	r31, Y+12	; 0x0c
    e5ee:	f4 ff       	sbrs	r31, 4
    e5f0:	04 c0       	rjmp	.+8      	; 0xe5fa <vfprintf+0x1e4>
    e5f2:	8a 81       	ldd	r24, Y+2	; 0x02
    e5f4:	81 33       	cpi	r24, 0x31	; 49
    e5f6:	09 f4       	brne	.+2      	; 0xe5fa <vfprintf+0x1e4>
    e5f8:	4a 94       	dec	r4
    e5fa:	14 14       	cp	r1, r4
    e5fc:	74 f5       	brge	.+92     	; 0xe65a <vfprintf+0x244>
    e5fe:	28 e0       	ldi	r18, 0x08	; 8
    e600:	24 15       	cp	r18, r4
    e602:	78 f5       	brcc	.+94     	; 0xe662 <vfprintf+0x24c>
    e604:	88 e0       	ldi	r24, 0x08	; 8
    e606:	48 2e       	mov	r4, r24
    e608:	2c c0       	rjmp	.+88     	; 0xe662 <vfprintf+0x24c>
    e60a:	96 fc       	sbrc	r9, 6
    e60c:	2a c0       	rjmp	.+84     	; 0xe662 <vfprintf+0x24c>
    e60e:	81 2f       	mov	r24, r17
    e610:	90 e0       	ldi	r25, 0x00	; 0
    e612:	8c 15       	cp	r24, r12
    e614:	9d 05       	cpc	r25, r13
    e616:	9c f0       	brlt	.+38     	; 0xe63e <vfprintf+0x228>
    e618:	3c ef       	ldi	r19, 0xFC	; 252
    e61a:	c3 16       	cp	r12, r19
    e61c:	3f ef       	ldi	r19, 0xFF	; 255
    e61e:	d3 06       	cpc	r13, r19
    e620:	74 f0       	brlt	.+28     	; 0xe63e <vfprintf+0x228>
    e622:	89 2d       	mov	r24, r9
    e624:	80 68       	ori	r24, 0x80	; 128
    e626:	98 2e       	mov	r9, r24
    e628:	0a c0       	rjmp	.+20     	; 0xe63e <vfprintf+0x228>
    e62a:	e2 e0       	ldi	r30, 0x02	; 2
    e62c:	f0 e0       	ldi	r31, 0x00	; 0
    e62e:	ec 0f       	add	r30, r28
    e630:	fd 1f       	adc	r31, r29
    e632:	e1 0f       	add	r30, r17
    e634:	f1 1d       	adc	r31, r1
    e636:	80 81       	ld	r24, Z
    e638:	80 33       	cpi	r24, 0x30	; 48
    e63a:	19 f4       	brne	.+6      	; 0xe642 <vfprintf+0x22c>
    e63c:	11 50       	subi	r17, 0x01	; 1
    e63e:	11 11       	cpse	r17, r1
    e640:	f4 cf       	rjmp	.-24     	; 0xe62a <vfprintf+0x214>
    e642:	97 fe       	sbrs	r9, 7
    e644:	0e c0       	rjmp	.+28     	; 0xe662 <vfprintf+0x24c>
    e646:	44 24       	eor	r4, r4
    e648:	43 94       	inc	r4
    e64a:	41 0e       	add	r4, r17
    e64c:	81 2f       	mov	r24, r17
    e64e:	90 e0       	ldi	r25, 0x00	; 0
    e650:	c8 16       	cp	r12, r24
    e652:	d9 06       	cpc	r13, r25
    e654:	2c f4       	brge	.+10     	; 0xe660 <vfprintf+0x24a>
    e656:	1c 19       	sub	r17, r12
    e658:	04 c0       	rjmp	.+8      	; 0xe662 <vfprintf+0x24c>
    e65a:	44 24       	eor	r4, r4
    e65c:	43 94       	inc	r4
    e65e:	01 c0       	rjmp	.+2      	; 0xe662 <vfprintf+0x24c>
    e660:	10 e0       	ldi	r17, 0x00	; 0
    e662:	97 fe       	sbrs	r9, 7
    e664:	06 c0       	rjmp	.+12     	; 0xe672 <vfprintf+0x25c>
    e666:	1c 14       	cp	r1, r12
    e668:	1d 04       	cpc	r1, r13
    e66a:	34 f4       	brge	.+12     	; 0xe678 <vfprintf+0x262>
    e66c:	c6 01       	movw	r24, r12
    e66e:	01 96       	adiw	r24, 0x01	; 1
    e670:	05 c0       	rjmp	.+10     	; 0xe67c <vfprintf+0x266>
    e672:	85 e0       	ldi	r24, 0x05	; 5
    e674:	90 e0       	ldi	r25, 0x00	; 0
    e676:	02 c0       	rjmp	.+4      	; 0xe67c <vfprintf+0x266>
    e678:	81 e0       	ldi	r24, 0x01	; 1
    e67a:	90 e0       	ldi	r25, 0x00	; 0
    e67c:	01 11       	cpse	r16, r1
    e67e:	01 96       	adiw	r24, 0x01	; 1
    e680:	11 23       	and	r17, r17
    e682:	31 f0       	breq	.+12     	; 0xe690 <vfprintf+0x27a>
    e684:	21 2f       	mov	r18, r17
    e686:	30 e0       	ldi	r19, 0x00	; 0
    e688:	2f 5f       	subi	r18, 0xFF	; 255
    e68a:	3f 4f       	sbci	r19, 0xFF	; 255
    e68c:	82 0f       	add	r24, r18
    e68e:	93 1f       	adc	r25, r19
    e690:	25 2d       	mov	r18, r5
    e692:	30 e0       	ldi	r19, 0x00	; 0
    e694:	82 17       	cp	r24, r18
    e696:	93 07       	cpc	r25, r19
    e698:	14 f4       	brge	.+4      	; 0xe69e <vfprintf+0x288>
    e69a:	58 1a       	sub	r5, r24
    e69c:	01 c0       	rjmp	.+2      	; 0xe6a0 <vfprintf+0x28a>
    e69e:	51 2c       	mov	r5, r1
    e6a0:	89 2d       	mov	r24, r9
    e6a2:	89 70       	andi	r24, 0x09	; 9
    e6a4:	49 f4       	brne	.+18     	; 0xe6b8 <vfprintf+0x2a2>
    e6a6:	55 20       	and	r5, r5
    e6a8:	39 f0       	breq	.+14     	; 0xe6b8 <vfprintf+0x2a2>
    e6aa:	b7 01       	movw	r22, r14
    e6ac:	80 e2       	ldi	r24, 0x20	; 32
    e6ae:	90 e0       	ldi	r25, 0x00	; 0
    e6b0:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e6b4:	5a 94       	dec	r5
    e6b6:	f7 cf       	rjmp	.-18     	; 0xe6a6 <vfprintf+0x290>
    e6b8:	00 23       	and	r16, r16
    e6ba:	29 f0       	breq	.+10     	; 0xe6c6 <vfprintf+0x2b0>
    e6bc:	b7 01       	movw	r22, r14
    e6be:	80 2f       	mov	r24, r16
    e6c0:	90 e0       	ldi	r25, 0x00	; 0
    e6c2:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e6c6:	93 fc       	sbrc	r9, 3
    e6c8:	09 c0       	rjmp	.+18     	; 0xe6dc <vfprintf+0x2c6>
    e6ca:	55 20       	and	r5, r5
    e6cc:	39 f0       	breq	.+14     	; 0xe6dc <vfprintf+0x2c6>
    e6ce:	b7 01       	movw	r22, r14
    e6d0:	80 e3       	ldi	r24, 0x30	; 48
    e6d2:	90 e0       	ldi	r25, 0x00	; 0
    e6d4:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e6d8:	5a 94       	dec	r5
    e6da:	f7 cf       	rjmp	.-18     	; 0xe6ca <vfprintf+0x2b4>
    e6dc:	97 fe       	sbrs	r9, 7
    e6de:	4c c0       	rjmp	.+152    	; 0xe778 <vfprintf+0x362>
    e6e0:	46 01       	movw	r8, r12
    e6e2:	d7 fe       	sbrs	r13, 7
    e6e4:	02 c0       	rjmp	.+4      	; 0xe6ea <vfprintf+0x2d4>
    e6e6:	81 2c       	mov	r8, r1
    e6e8:	91 2c       	mov	r9, r1
    e6ea:	c6 01       	movw	r24, r12
    e6ec:	88 19       	sub	r24, r8
    e6ee:	99 09       	sbc	r25, r9
    e6f0:	f3 01       	movw	r30, r6
    e6f2:	e8 0f       	add	r30, r24
    e6f4:	f9 1f       	adc	r31, r25
    e6f6:	ed 87       	std	Y+13, r30	; 0x0d
    e6f8:	fe 87       	std	Y+14, r31	; 0x0e
    e6fa:	96 01       	movw	r18, r12
    e6fc:	24 19       	sub	r18, r4
    e6fe:	31 09       	sbc	r19, r1
    e700:	2f 87       	std	Y+15, r18	; 0x0f
    e702:	38 8b       	std	Y+16, r19	; 0x10
    e704:	01 2f       	mov	r16, r17
    e706:	10 e0       	ldi	r17, 0x00	; 0
    e708:	11 95       	neg	r17
    e70a:	01 95       	neg	r16
    e70c:	11 09       	sbc	r17, r1
    e70e:	3f ef       	ldi	r19, 0xFF	; 255
    e710:	83 16       	cp	r8, r19
    e712:	93 06       	cpc	r9, r19
    e714:	29 f4       	brne	.+10     	; 0xe720 <vfprintf+0x30a>
    e716:	b7 01       	movw	r22, r14
    e718:	8e e2       	ldi	r24, 0x2E	; 46
    e71a:	90 e0       	ldi	r25, 0x00	; 0
    e71c:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e720:	c8 14       	cp	r12, r8
    e722:	d9 04       	cpc	r13, r9
    e724:	4c f0       	brlt	.+18     	; 0xe738 <vfprintf+0x322>
    e726:	8f 85       	ldd	r24, Y+15	; 0x0f
    e728:	98 89       	ldd	r25, Y+16	; 0x10
    e72a:	88 15       	cp	r24, r8
    e72c:	99 05       	cpc	r25, r9
    e72e:	24 f4       	brge	.+8      	; 0xe738 <vfprintf+0x322>
    e730:	ed 85       	ldd	r30, Y+13	; 0x0d
    e732:	fe 85       	ldd	r31, Y+14	; 0x0e
    e734:	81 81       	ldd	r24, Z+1	; 0x01
    e736:	01 c0       	rjmp	.+2      	; 0xe73a <vfprintf+0x324>
    e738:	80 e3       	ldi	r24, 0x30	; 48
    e73a:	f1 e0       	ldi	r31, 0x01	; 1
    e73c:	8f 1a       	sub	r8, r31
    e73e:	91 08       	sbc	r9, r1
    e740:	2d 85       	ldd	r18, Y+13	; 0x0d
    e742:	3e 85       	ldd	r19, Y+14	; 0x0e
    e744:	2f 5f       	subi	r18, 0xFF	; 255
    e746:	3f 4f       	sbci	r19, 0xFF	; 255
    e748:	2d 87       	std	Y+13, r18	; 0x0d
    e74a:	3e 87       	std	Y+14, r19	; 0x0e
    e74c:	80 16       	cp	r8, r16
    e74e:	91 06       	cpc	r9, r17
    e750:	2c f0       	brlt	.+10     	; 0xe75c <vfprintf+0x346>
    e752:	b7 01       	movw	r22, r14
    e754:	90 e0       	ldi	r25, 0x00	; 0
    e756:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e75a:	d9 cf       	rjmp	.-78     	; 0xe70e <vfprintf+0x2f8>
    e75c:	c8 14       	cp	r12, r8
    e75e:	d9 04       	cpc	r13, r9
    e760:	41 f4       	brne	.+16     	; 0xe772 <vfprintf+0x35c>
    e762:	9a 81       	ldd	r25, Y+2	; 0x02
    e764:	96 33       	cpi	r25, 0x36	; 54
    e766:	20 f4       	brcc	.+8      	; 0xe770 <vfprintf+0x35a>
    e768:	95 33       	cpi	r25, 0x35	; 53
    e76a:	19 f4       	brne	.+6      	; 0xe772 <vfprintf+0x35c>
    e76c:	3c 85       	ldd	r19, Y+12	; 0x0c
    e76e:	34 ff       	sbrs	r19, 4
    e770:	81 e3       	ldi	r24, 0x31	; 49
    e772:	b7 01       	movw	r22, r14
    e774:	90 e0       	ldi	r25, 0x00	; 0
    e776:	4e c0       	rjmp	.+156    	; 0xe814 <vfprintf+0x3fe>
    e778:	8a 81       	ldd	r24, Y+2	; 0x02
    e77a:	81 33       	cpi	r24, 0x31	; 49
    e77c:	19 f0       	breq	.+6      	; 0xe784 <vfprintf+0x36e>
    e77e:	9c 85       	ldd	r25, Y+12	; 0x0c
    e780:	9f 7e       	andi	r25, 0xEF	; 239
    e782:	9c 87       	std	Y+12, r25	; 0x0c
    e784:	b7 01       	movw	r22, r14
    e786:	90 e0       	ldi	r25, 0x00	; 0
    e788:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e78c:	11 11       	cpse	r17, r1
    e78e:	05 c0       	rjmp	.+10     	; 0xe79a <vfprintf+0x384>
    e790:	94 fc       	sbrc	r9, 4
    e792:	18 c0       	rjmp	.+48     	; 0xe7c4 <vfprintf+0x3ae>
    e794:	85 e6       	ldi	r24, 0x65	; 101
    e796:	90 e0       	ldi	r25, 0x00	; 0
    e798:	17 c0       	rjmp	.+46     	; 0xe7c8 <vfprintf+0x3b2>
    e79a:	b7 01       	movw	r22, r14
    e79c:	8e e2       	ldi	r24, 0x2E	; 46
    e79e:	90 e0       	ldi	r25, 0x00	; 0
    e7a0:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e7a4:	1e 5f       	subi	r17, 0xFE	; 254
    e7a6:	82 e0       	ldi	r24, 0x02	; 2
    e7a8:	01 e0       	ldi	r16, 0x01	; 1
    e7aa:	08 0f       	add	r16, r24
    e7ac:	f3 01       	movw	r30, r6
    e7ae:	e8 0f       	add	r30, r24
    e7b0:	f1 1d       	adc	r31, r1
    e7b2:	80 81       	ld	r24, Z
    e7b4:	b7 01       	movw	r22, r14
    e7b6:	90 e0       	ldi	r25, 0x00	; 0
    e7b8:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e7bc:	80 2f       	mov	r24, r16
    e7be:	01 13       	cpse	r16, r17
    e7c0:	f3 cf       	rjmp	.-26     	; 0xe7a8 <vfprintf+0x392>
    e7c2:	e6 cf       	rjmp	.-52     	; 0xe790 <vfprintf+0x37a>
    e7c4:	85 e4       	ldi	r24, 0x45	; 69
    e7c6:	90 e0       	ldi	r25, 0x00	; 0
    e7c8:	b7 01       	movw	r22, r14
    e7ca:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e7ce:	d7 fc       	sbrc	r13, 7
    e7d0:	06 c0       	rjmp	.+12     	; 0xe7de <vfprintf+0x3c8>
    e7d2:	c1 14       	cp	r12, r1
    e7d4:	d1 04       	cpc	r13, r1
    e7d6:	41 f4       	brne	.+16     	; 0xe7e8 <vfprintf+0x3d2>
    e7d8:	ec 85       	ldd	r30, Y+12	; 0x0c
    e7da:	e4 ff       	sbrs	r30, 4
    e7dc:	05 c0       	rjmp	.+10     	; 0xe7e8 <vfprintf+0x3d2>
    e7de:	d1 94       	neg	r13
    e7e0:	c1 94       	neg	r12
    e7e2:	d1 08       	sbc	r13, r1
    e7e4:	8d e2       	ldi	r24, 0x2D	; 45
    e7e6:	01 c0       	rjmp	.+2      	; 0xe7ea <vfprintf+0x3d4>
    e7e8:	8b e2       	ldi	r24, 0x2B	; 43
    e7ea:	b7 01       	movw	r22, r14
    e7ec:	90 e0       	ldi	r25, 0x00	; 0
    e7ee:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e7f2:	80 e3       	ldi	r24, 0x30	; 48
    e7f4:	2a e0       	ldi	r18, 0x0A	; 10
    e7f6:	c2 16       	cp	r12, r18
    e7f8:	d1 04       	cpc	r13, r1
    e7fa:	2c f0       	brlt	.+10     	; 0xe806 <vfprintf+0x3f0>
    e7fc:	8f 5f       	subi	r24, 0xFF	; 255
    e7fe:	fa e0       	ldi	r31, 0x0A	; 10
    e800:	cf 1a       	sub	r12, r31
    e802:	d1 08       	sbc	r13, r1
    e804:	f7 cf       	rjmp	.-18     	; 0xe7f4 <vfprintf+0x3de>
    e806:	b7 01       	movw	r22, r14
    e808:	90 e0       	ldi	r25, 0x00	; 0
    e80a:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e80e:	b7 01       	movw	r22, r14
    e810:	c6 01       	movw	r24, r12
    e812:	c0 96       	adiw	r24, 0x30	; 48
    e814:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e818:	54 c1       	rjmp	.+680    	; 0xeac2 <vfprintf+0x6ac>
    e81a:	83 36       	cpi	r24, 0x63	; 99
    e81c:	31 f0       	breq	.+12     	; 0xe82a <vfprintf+0x414>
    e81e:	83 37       	cpi	r24, 0x73	; 115
    e820:	79 f0       	breq	.+30     	; 0xe840 <vfprintf+0x42a>
    e822:	83 35       	cpi	r24, 0x53	; 83
    e824:	09 f0       	breq	.+2      	; 0xe828 <vfprintf+0x412>
    e826:	56 c0       	rjmp	.+172    	; 0xe8d4 <vfprintf+0x4be>
    e828:	20 c0       	rjmp	.+64     	; 0xe86a <vfprintf+0x454>
    e82a:	56 01       	movw	r10, r12
    e82c:	32 e0       	ldi	r19, 0x02	; 2
    e82e:	a3 0e       	add	r10, r19
    e830:	b1 1c       	adc	r11, r1
    e832:	f6 01       	movw	r30, r12
    e834:	80 81       	ld	r24, Z
    e836:	89 83       	std	Y+1, r24	; 0x01
    e838:	01 e0       	ldi	r16, 0x01	; 1
    e83a:	10 e0       	ldi	r17, 0x00	; 0
    e83c:	63 01       	movw	r12, r6
    e83e:	12 c0       	rjmp	.+36     	; 0xe864 <vfprintf+0x44e>
    e840:	56 01       	movw	r10, r12
    e842:	f2 e0       	ldi	r31, 0x02	; 2
    e844:	af 0e       	add	r10, r31
    e846:	b1 1c       	adc	r11, r1
    e848:	f6 01       	movw	r30, r12
    e84a:	c0 80       	ld	r12, Z
    e84c:	d1 80       	ldd	r13, Z+1	; 0x01
    e84e:	96 fe       	sbrs	r9, 6
    e850:	03 c0       	rjmp	.+6      	; 0xe858 <vfprintf+0x442>
    e852:	61 2f       	mov	r22, r17
    e854:	70 e0       	ldi	r23, 0x00	; 0
    e856:	02 c0       	rjmp	.+4      	; 0xe85c <vfprintf+0x446>
    e858:	6f ef       	ldi	r22, 0xFF	; 255
    e85a:	7f ef       	ldi	r23, 0xFF	; 255
    e85c:	c6 01       	movw	r24, r12
    e85e:	0e 94 0b 7d 	call	0xfa16	; 0xfa16 <strnlen>
    e862:	8c 01       	movw	r16, r24
    e864:	f9 2d       	mov	r31, r9
    e866:	ff 77       	andi	r31, 0x7F	; 127
    e868:	14 c0       	rjmp	.+40     	; 0xe892 <vfprintf+0x47c>
    e86a:	56 01       	movw	r10, r12
    e86c:	22 e0       	ldi	r18, 0x02	; 2
    e86e:	a2 0e       	add	r10, r18
    e870:	b1 1c       	adc	r11, r1
    e872:	f6 01       	movw	r30, r12
    e874:	c0 80       	ld	r12, Z
    e876:	d1 80       	ldd	r13, Z+1	; 0x01
    e878:	96 fe       	sbrs	r9, 6
    e87a:	03 c0       	rjmp	.+6      	; 0xe882 <vfprintf+0x46c>
    e87c:	61 2f       	mov	r22, r17
    e87e:	70 e0       	ldi	r23, 0x00	; 0
    e880:	02 c0       	rjmp	.+4      	; 0xe886 <vfprintf+0x470>
    e882:	6f ef       	ldi	r22, 0xFF	; 255
    e884:	7f ef       	ldi	r23, 0xFF	; 255
    e886:	c6 01       	movw	r24, r12
    e888:	0e 94 c5 7c 	call	0xf98a	; 0xf98a <strnlen_P>
    e88c:	8c 01       	movw	r16, r24
    e88e:	f9 2d       	mov	r31, r9
    e890:	f0 68       	ori	r31, 0x80	; 128
    e892:	9f 2e       	mov	r9, r31
    e894:	f3 fd       	sbrc	r31, 3
    e896:	1a c0       	rjmp	.+52     	; 0xe8cc <vfprintf+0x4b6>
    e898:	85 2d       	mov	r24, r5
    e89a:	90 e0       	ldi	r25, 0x00	; 0
    e89c:	08 17       	cp	r16, r24
    e89e:	19 07       	cpc	r17, r25
    e8a0:	a8 f4       	brcc	.+42     	; 0xe8cc <vfprintf+0x4b6>
    e8a2:	b7 01       	movw	r22, r14
    e8a4:	80 e2       	ldi	r24, 0x20	; 32
    e8a6:	90 e0       	ldi	r25, 0x00	; 0
    e8a8:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e8ac:	5a 94       	dec	r5
    e8ae:	f4 cf       	rjmp	.-24     	; 0xe898 <vfprintf+0x482>
    e8b0:	f6 01       	movw	r30, r12
    e8b2:	97 fc       	sbrc	r9, 7
    e8b4:	85 91       	lpm	r24, Z+
    e8b6:	97 fe       	sbrs	r9, 7
    e8b8:	81 91       	ld	r24, Z+
    e8ba:	6f 01       	movw	r12, r30
    e8bc:	b7 01       	movw	r22, r14
    e8be:	90 e0       	ldi	r25, 0x00	; 0
    e8c0:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    e8c4:	51 10       	cpse	r5, r1
    e8c6:	5a 94       	dec	r5
    e8c8:	01 50       	subi	r16, 0x01	; 1
    e8ca:	11 09       	sbc	r17, r1
    e8cc:	01 15       	cp	r16, r1
    e8ce:	11 05       	cpc	r17, r1
    e8d0:	79 f7       	brne	.-34     	; 0xe8b0 <vfprintf+0x49a>
    e8d2:	f7 c0       	rjmp	.+494    	; 0xeac2 <vfprintf+0x6ac>
    e8d4:	84 36       	cpi	r24, 0x64	; 100
    e8d6:	11 f0       	breq	.+4      	; 0xe8dc <vfprintf+0x4c6>
    e8d8:	89 36       	cpi	r24, 0x69	; 105
    e8da:	61 f5       	brne	.+88     	; 0xe934 <vfprintf+0x51e>
    e8dc:	56 01       	movw	r10, r12
    e8de:	97 fe       	sbrs	r9, 7
    e8e0:	09 c0       	rjmp	.+18     	; 0xe8f4 <vfprintf+0x4de>
    e8e2:	24 e0       	ldi	r18, 0x04	; 4
    e8e4:	a2 0e       	add	r10, r18
    e8e6:	b1 1c       	adc	r11, r1
    e8e8:	f6 01       	movw	r30, r12
    e8ea:	60 81       	ld	r22, Z
    e8ec:	71 81       	ldd	r23, Z+1	; 0x01
    e8ee:	82 81       	ldd	r24, Z+2	; 0x02
    e8f0:	93 81       	ldd	r25, Z+3	; 0x03
    e8f2:	0a c0       	rjmp	.+20     	; 0xe908 <vfprintf+0x4f2>
    e8f4:	f2 e0       	ldi	r31, 0x02	; 2
    e8f6:	af 0e       	add	r10, r31
    e8f8:	b1 1c       	adc	r11, r1
    e8fa:	f6 01       	movw	r30, r12
    e8fc:	60 81       	ld	r22, Z
    e8fe:	71 81       	ldd	r23, Z+1	; 0x01
    e900:	07 2e       	mov	r0, r23
    e902:	00 0c       	add	r0, r0
    e904:	88 0b       	sbc	r24, r24
    e906:	99 0b       	sbc	r25, r25
    e908:	f9 2d       	mov	r31, r9
    e90a:	ff 76       	andi	r31, 0x6F	; 111
    e90c:	9f 2e       	mov	r9, r31
    e90e:	97 ff       	sbrs	r25, 7
    e910:	09 c0       	rjmp	.+18     	; 0xe924 <vfprintf+0x50e>
    e912:	90 95       	com	r25
    e914:	80 95       	com	r24
    e916:	70 95       	com	r23
    e918:	61 95       	neg	r22
    e91a:	7f 4f       	sbci	r23, 0xFF	; 255
    e91c:	8f 4f       	sbci	r24, 0xFF	; 255
    e91e:	9f 4f       	sbci	r25, 0xFF	; 255
    e920:	f0 68       	ori	r31, 0x80	; 128
    e922:	9f 2e       	mov	r9, r31
    e924:	2a e0       	ldi	r18, 0x0A	; 10
    e926:	30 e0       	ldi	r19, 0x00	; 0
    e928:	a3 01       	movw	r20, r6
    e92a:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ultoa_invert>
    e92e:	c8 2e       	mov	r12, r24
    e930:	c6 18       	sub	r12, r6
    e932:	3f c0       	rjmp	.+126    	; 0xe9b2 <vfprintf+0x59c>
    e934:	09 2d       	mov	r16, r9
    e936:	85 37       	cpi	r24, 0x75	; 117
    e938:	21 f4       	brne	.+8      	; 0xe942 <vfprintf+0x52c>
    e93a:	0f 7e       	andi	r16, 0xEF	; 239
    e93c:	2a e0       	ldi	r18, 0x0A	; 10
    e93e:	30 e0       	ldi	r19, 0x00	; 0
    e940:	1d c0       	rjmp	.+58     	; 0xe97c <vfprintf+0x566>
    e942:	09 7f       	andi	r16, 0xF9	; 249
    e944:	8f 36       	cpi	r24, 0x6F	; 111
    e946:	91 f0       	breq	.+36     	; 0xe96c <vfprintf+0x556>
    e948:	18 f4       	brcc	.+6      	; 0xe950 <vfprintf+0x53a>
    e94a:	88 35       	cpi	r24, 0x58	; 88
    e94c:	59 f0       	breq	.+22     	; 0xe964 <vfprintf+0x54e>
    e94e:	c3 c0       	rjmp	.+390    	; 0xead6 <vfprintf+0x6c0>
    e950:	80 37       	cpi	r24, 0x70	; 112
    e952:	19 f0       	breq	.+6      	; 0xe95a <vfprintf+0x544>
    e954:	88 37       	cpi	r24, 0x78	; 120
    e956:	11 f0       	breq	.+4      	; 0xe95c <vfprintf+0x546>
    e958:	be c0       	rjmp	.+380    	; 0xead6 <vfprintf+0x6c0>
    e95a:	00 61       	ori	r16, 0x10	; 16
    e95c:	04 ff       	sbrs	r16, 4
    e95e:	09 c0       	rjmp	.+18     	; 0xe972 <vfprintf+0x55c>
    e960:	04 60       	ori	r16, 0x04	; 4
    e962:	07 c0       	rjmp	.+14     	; 0xe972 <vfprintf+0x55c>
    e964:	94 fe       	sbrs	r9, 4
    e966:	08 c0       	rjmp	.+16     	; 0xe978 <vfprintf+0x562>
    e968:	06 60       	ori	r16, 0x06	; 6
    e96a:	06 c0       	rjmp	.+12     	; 0xe978 <vfprintf+0x562>
    e96c:	28 e0       	ldi	r18, 0x08	; 8
    e96e:	30 e0       	ldi	r19, 0x00	; 0
    e970:	05 c0       	rjmp	.+10     	; 0xe97c <vfprintf+0x566>
    e972:	20 e1       	ldi	r18, 0x10	; 16
    e974:	30 e0       	ldi	r19, 0x00	; 0
    e976:	02 c0       	rjmp	.+4      	; 0xe97c <vfprintf+0x566>
    e978:	20 e1       	ldi	r18, 0x10	; 16
    e97a:	32 e0       	ldi	r19, 0x02	; 2
    e97c:	56 01       	movw	r10, r12
    e97e:	07 ff       	sbrs	r16, 7
    e980:	09 c0       	rjmp	.+18     	; 0xe994 <vfprintf+0x57e>
    e982:	84 e0       	ldi	r24, 0x04	; 4
    e984:	a8 0e       	add	r10, r24
    e986:	b1 1c       	adc	r11, r1
    e988:	f6 01       	movw	r30, r12
    e98a:	60 81       	ld	r22, Z
    e98c:	71 81       	ldd	r23, Z+1	; 0x01
    e98e:	82 81       	ldd	r24, Z+2	; 0x02
    e990:	93 81       	ldd	r25, Z+3	; 0x03
    e992:	08 c0       	rjmp	.+16     	; 0xe9a4 <vfprintf+0x58e>
    e994:	f2 e0       	ldi	r31, 0x02	; 2
    e996:	af 0e       	add	r10, r31
    e998:	b1 1c       	adc	r11, r1
    e99a:	f6 01       	movw	r30, r12
    e99c:	60 81       	ld	r22, Z
    e99e:	71 81       	ldd	r23, Z+1	; 0x01
    e9a0:	80 e0       	ldi	r24, 0x00	; 0
    e9a2:	90 e0       	ldi	r25, 0x00	; 0
    e9a4:	a3 01       	movw	r20, r6
    e9a6:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ultoa_invert>
    e9aa:	c8 2e       	mov	r12, r24
    e9ac:	c6 18       	sub	r12, r6
    e9ae:	0f 77       	andi	r16, 0x7F	; 127
    e9b0:	90 2e       	mov	r9, r16
    e9b2:	96 fe       	sbrs	r9, 6
    e9b4:	0b c0       	rjmp	.+22     	; 0xe9cc <vfprintf+0x5b6>
    e9b6:	09 2d       	mov	r16, r9
    e9b8:	0e 7f       	andi	r16, 0xFE	; 254
    e9ba:	c1 16       	cp	r12, r17
    e9bc:	50 f4       	brcc	.+20     	; 0xe9d2 <vfprintf+0x5bc>
    e9be:	94 fe       	sbrs	r9, 4
    e9c0:	0a c0       	rjmp	.+20     	; 0xe9d6 <vfprintf+0x5c0>
    e9c2:	92 fc       	sbrc	r9, 2
    e9c4:	08 c0       	rjmp	.+16     	; 0xe9d6 <vfprintf+0x5c0>
    e9c6:	09 2d       	mov	r16, r9
    e9c8:	0e 7e       	andi	r16, 0xEE	; 238
    e9ca:	05 c0       	rjmp	.+10     	; 0xe9d6 <vfprintf+0x5c0>
    e9cc:	dc 2c       	mov	r13, r12
    e9ce:	09 2d       	mov	r16, r9
    e9d0:	03 c0       	rjmp	.+6      	; 0xe9d8 <vfprintf+0x5c2>
    e9d2:	dc 2c       	mov	r13, r12
    e9d4:	01 c0       	rjmp	.+2      	; 0xe9d8 <vfprintf+0x5c2>
    e9d6:	d1 2e       	mov	r13, r17
    e9d8:	04 ff       	sbrs	r16, 4
    e9da:	0d c0       	rjmp	.+26     	; 0xe9f6 <vfprintf+0x5e0>
    e9dc:	fe 01       	movw	r30, r28
    e9de:	ec 0d       	add	r30, r12
    e9e0:	f1 1d       	adc	r31, r1
    e9e2:	80 81       	ld	r24, Z
    e9e4:	80 33       	cpi	r24, 0x30	; 48
    e9e6:	11 f4       	brne	.+4      	; 0xe9ec <vfprintf+0x5d6>
    e9e8:	09 7e       	andi	r16, 0xE9	; 233
    e9ea:	09 c0       	rjmp	.+18     	; 0xe9fe <vfprintf+0x5e8>
    e9ec:	02 ff       	sbrs	r16, 2
    e9ee:	06 c0       	rjmp	.+12     	; 0xe9fc <vfprintf+0x5e6>
    e9f0:	d3 94       	inc	r13
    e9f2:	d3 94       	inc	r13
    e9f4:	04 c0       	rjmp	.+8      	; 0xe9fe <vfprintf+0x5e8>
    e9f6:	80 2f       	mov	r24, r16
    e9f8:	86 78       	andi	r24, 0x86	; 134
    e9fa:	09 f0       	breq	.+2      	; 0xe9fe <vfprintf+0x5e8>
    e9fc:	d3 94       	inc	r13
    e9fe:	03 fd       	sbrc	r16, 3
    ea00:	11 c0       	rjmp	.+34     	; 0xea24 <vfprintf+0x60e>
    ea02:	00 ff       	sbrs	r16, 0
    ea04:	06 c0       	rjmp	.+12     	; 0xea12 <vfprintf+0x5fc>
    ea06:	1c 2d       	mov	r17, r12
    ea08:	d5 14       	cp	r13, r5
    ea0a:	80 f4       	brcc	.+32     	; 0xea2c <vfprintf+0x616>
    ea0c:	15 0d       	add	r17, r5
    ea0e:	1d 19       	sub	r17, r13
    ea10:	0d c0       	rjmp	.+26     	; 0xea2c <vfprintf+0x616>
    ea12:	d5 14       	cp	r13, r5
    ea14:	58 f4       	brcc	.+22     	; 0xea2c <vfprintf+0x616>
    ea16:	b7 01       	movw	r22, r14
    ea18:	80 e2       	ldi	r24, 0x20	; 32
    ea1a:	90 e0       	ldi	r25, 0x00	; 0
    ea1c:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    ea20:	d3 94       	inc	r13
    ea22:	f7 cf       	rjmp	.-18     	; 0xea12 <vfprintf+0x5fc>
    ea24:	d5 14       	cp	r13, r5
    ea26:	10 f4       	brcc	.+4      	; 0xea2c <vfprintf+0x616>
    ea28:	5d 18       	sub	r5, r13
    ea2a:	01 c0       	rjmp	.+2      	; 0xea2e <vfprintf+0x618>
    ea2c:	51 2c       	mov	r5, r1
    ea2e:	04 ff       	sbrs	r16, 4
    ea30:	10 c0       	rjmp	.+32     	; 0xea52 <vfprintf+0x63c>
    ea32:	b7 01       	movw	r22, r14
    ea34:	80 e3       	ldi	r24, 0x30	; 48
    ea36:	90 e0       	ldi	r25, 0x00	; 0
    ea38:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    ea3c:	02 ff       	sbrs	r16, 2
    ea3e:	17 c0       	rjmp	.+46     	; 0xea6e <vfprintf+0x658>
    ea40:	01 fd       	sbrc	r16, 1
    ea42:	03 c0       	rjmp	.+6      	; 0xea4a <vfprintf+0x634>
    ea44:	88 e7       	ldi	r24, 0x78	; 120
    ea46:	90 e0       	ldi	r25, 0x00	; 0
    ea48:	02 c0       	rjmp	.+4      	; 0xea4e <vfprintf+0x638>
    ea4a:	88 e5       	ldi	r24, 0x58	; 88
    ea4c:	90 e0       	ldi	r25, 0x00	; 0
    ea4e:	b7 01       	movw	r22, r14
    ea50:	0c c0       	rjmp	.+24     	; 0xea6a <vfprintf+0x654>
    ea52:	80 2f       	mov	r24, r16
    ea54:	86 78       	andi	r24, 0x86	; 134
    ea56:	59 f0       	breq	.+22     	; 0xea6e <vfprintf+0x658>
    ea58:	01 ff       	sbrs	r16, 1
    ea5a:	02 c0       	rjmp	.+4      	; 0xea60 <vfprintf+0x64a>
    ea5c:	8b e2       	ldi	r24, 0x2B	; 43
    ea5e:	01 c0       	rjmp	.+2      	; 0xea62 <vfprintf+0x64c>
    ea60:	80 e2       	ldi	r24, 0x20	; 32
    ea62:	07 fd       	sbrc	r16, 7
    ea64:	8d e2       	ldi	r24, 0x2D	; 45
    ea66:	b7 01       	movw	r22, r14
    ea68:	90 e0       	ldi	r25, 0x00	; 0
    ea6a:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    ea6e:	c1 16       	cp	r12, r17
    ea70:	38 f4       	brcc	.+14     	; 0xea80 <vfprintf+0x66a>
    ea72:	b7 01       	movw	r22, r14
    ea74:	80 e3       	ldi	r24, 0x30	; 48
    ea76:	90 e0       	ldi	r25, 0x00	; 0
    ea78:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    ea7c:	11 50       	subi	r17, 0x01	; 1
    ea7e:	f7 cf       	rjmp	.-18     	; 0xea6e <vfprintf+0x658>
    ea80:	ca 94       	dec	r12
    ea82:	f3 01       	movw	r30, r6
    ea84:	ec 0d       	add	r30, r12
    ea86:	f1 1d       	adc	r31, r1
    ea88:	80 81       	ld	r24, Z
    ea8a:	b7 01       	movw	r22, r14
    ea8c:	90 e0       	ldi	r25, 0x00	; 0
    ea8e:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    ea92:	c1 10       	cpse	r12, r1
    ea94:	f5 cf       	rjmp	.-22     	; 0xea80 <vfprintf+0x66a>
    ea96:	15 c0       	rjmp	.+42     	; 0xeac2 <vfprintf+0x6ac>
    ea98:	f4 e0       	ldi	r31, 0x04	; 4
    ea9a:	f5 15       	cp	r31, r5
    ea9c:	60 f5       	brcc	.+88     	; 0xeaf6 <vfprintf+0x6e0>
    ea9e:	84 e0       	ldi	r24, 0x04	; 4
    eaa0:	58 1a       	sub	r5, r24
    eaa2:	93 fe       	sbrs	r9, 3
    eaa4:	1f c0       	rjmp	.+62     	; 0xeae4 <vfprintf+0x6ce>
    eaa6:	01 11       	cpse	r16, r1
    eaa8:	27 c0       	rjmp	.+78     	; 0xeaf8 <vfprintf+0x6e2>
    eaaa:	2c 85       	ldd	r18, Y+12	; 0x0c
    eaac:	23 ff       	sbrs	r18, 3
    eaae:	29 c0       	rjmp	.+82     	; 0xeb02 <vfprintf+0x6ec>
    eab0:	08 eb       	ldi	r16, 0xB8	; 184
    eab2:	12 e0       	ldi	r17, 0x02	; 2
    eab4:	39 2d       	mov	r19, r9
    eab6:	30 71       	andi	r19, 0x10	; 16
    eab8:	93 2e       	mov	r9, r19
    eaba:	f8 01       	movw	r30, r16
    eabc:	84 91       	lpm	r24, Z
    eabe:	81 11       	cpse	r24, r1
    eac0:	23 c0       	rjmp	.+70     	; 0xeb08 <vfprintf+0x6f2>
    eac2:	55 20       	and	r5, r5
    eac4:	09 f4       	brne	.+2      	; 0xeac8 <vfprintf+0x6b2>
    eac6:	e4 cc       	rjmp	.-1592   	; 0xe490 <vfprintf+0x7a>
    eac8:	b7 01       	movw	r22, r14
    eaca:	80 e2       	ldi	r24, 0x20	; 32
    eacc:	90 e0       	ldi	r25, 0x00	; 0
    eace:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    ead2:	5a 94       	dec	r5
    ead4:	f6 cf       	rjmp	.-20     	; 0xeac2 <vfprintf+0x6ac>
    ead6:	f7 01       	movw	r30, r14
    ead8:	86 81       	ldd	r24, Z+6	; 0x06
    eada:	97 81       	ldd	r25, Z+7	; 0x07
    eadc:	24 c0       	rjmp	.+72     	; 0xeb26 <vfprintf+0x710>
    eade:	8f ef       	ldi	r24, 0xFF	; 255
    eae0:	9f ef       	ldi	r25, 0xFF	; 255
    eae2:	21 c0       	rjmp	.+66     	; 0xeb26 <vfprintf+0x710>
    eae4:	b7 01       	movw	r22, r14
    eae6:	80 e2       	ldi	r24, 0x20	; 32
    eae8:	90 e0       	ldi	r25, 0x00	; 0
    eaea:	0e 94 7d 7d 	call	0xfafa	; 0xfafa <fputc>
    eaee:	5a 94       	dec	r5
    eaf0:	51 10       	cpse	r5, r1
    eaf2:	f8 cf       	rjmp	.-16     	; 0xeae4 <vfprintf+0x6ce>
    eaf4:	d8 cf       	rjmp	.-80     	; 0xeaa6 <vfprintf+0x690>
    eaf6:	51 2c       	mov	r5, r1
    eaf8:	b7 01       	movw	r22, r14
    eafa:	80 2f       	mov	r24, r16
    eafc:	90 e0       	ldi	r25, 0x00	; 0
    eafe:	fd d7       	rcall	.+4090   	; 0xfafa <fputc>
    eb00:	d4 cf       	rjmp	.-88     	; 0xeaaa <vfprintf+0x694>
    eb02:	0c eb       	ldi	r16, 0xBC	; 188
    eb04:	12 e0       	ldi	r17, 0x02	; 2
    eb06:	d6 cf       	rjmp	.-84     	; 0xeab4 <vfprintf+0x69e>
    eb08:	91 10       	cpse	r9, r1
    eb0a:	80 52       	subi	r24, 0x20	; 32
    eb0c:	b7 01       	movw	r22, r14
    eb0e:	90 e0       	ldi	r25, 0x00	; 0
    eb10:	f4 d7       	rcall	.+4072   	; 0xfafa <fputc>
    eb12:	0f 5f       	subi	r16, 0xFF	; 255
    eb14:	1f 4f       	sbci	r17, 0xFF	; 255
    eb16:	d1 cf       	rjmp	.-94     	; 0xeaba <vfprintf+0x6a4>
    eb18:	23 e0       	ldi	r18, 0x03	; 3
    eb1a:	25 15       	cp	r18, r5
    eb1c:	10 f4       	brcc	.+4      	; 0xeb22 <vfprintf+0x70c>
    eb1e:	83 e0       	ldi	r24, 0x03	; 3
    eb20:	bf cf       	rjmp	.-130    	; 0xeaa0 <vfprintf+0x68a>
    eb22:	51 2c       	mov	r5, r1
    eb24:	c2 cf       	rjmp	.-124    	; 0xeaaa <vfprintf+0x694>
    eb26:	60 96       	adiw	r28, 0x10	; 16
    eb28:	cd bf       	out	0x3d, r28	; 61
    eb2a:	de bf       	out	0x3e, r29	; 62
    eb2c:	df 91       	pop	r29
    eb2e:	cf 91       	pop	r28
    eb30:	1f 91       	pop	r17
    eb32:	0f 91       	pop	r16
    eb34:	ff 90       	pop	r15
    eb36:	ef 90       	pop	r14
    eb38:	df 90       	pop	r13
    eb3a:	cf 90       	pop	r12
    eb3c:	bf 90       	pop	r11
    eb3e:	af 90       	pop	r10
    eb40:	9f 90       	pop	r9
    eb42:	8f 90       	pop	r8
    eb44:	7f 90       	pop	r7
    eb46:	6f 90       	pop	r6
    eb48:	5f 90       	pop	r5
    eb4a:	4f 90       	pop	r4
    eb4c:	3f 90       	pop	r3
    eb4e:	2f 90       	pop	r2
    eb50:	08 95       	ret

0000eb52 <__subsf3>:
    eb52:	50 58       	subi	r21, 0x80	; 128

0000eb54 <__addsf3>:
    eb54:	bb 27       	eor	r27, r27
    eb56:	aa 27       	eor	r26, r26
    eb58:	0e d0       	rcall	.+28     	; 0xeb76 <__addsf3x>
    eb5a:	a0 c1       	rjmp	.+832    	; 0xee9c <__fp_round>
    eb5c:	69 d1       	rcall	.+722    	; 0xee30 <__fp_pscA>
    eb5e:	30 f0       	brcs	.+12     	; 0xeb6c <__addsf3+0x18>
    eb60:	6e d1       	rcall	.+732    	; 0xee3e <__fp_pscB>
    eb62:	20 f0       	brcs	.+8      	; 0xeb6c <__addsf3+0x18>
    eb64:	31 f4       	brne	.+12     	; 0xeb72 <__addsf3+0x1e>
    eb66:	9f 3f       	cpi	r25, 0xFF	; 255
    eb68:	11 f4       	brne	.+4      	; 0xeb6e <__addsf3+0x1a>
    eb6a:	1e f4       	brtc	.+6      	; 0xeb72 <__addsf3+0x1e>
    eb6c:	5e c1       	rjmp	.+700    	; 0xee2a <__fp_nan>
    eb6e:	0e f4       	brtc	.+2      	; 0xeb72 <__addsf3+0x1e>
    eb70:	e0 95       	com	r30
    eb72:	e7 fb       	bst	r30, 7
    eb74:	54 c1       	rjmp	.+680    	; 0xee1e <__fp_inf>

0000eb76 <__addsf3x>:
    eb76:	e9 2f       	mov	r30, r25
    eb78:	b3 d1       	rcall	.+870    	; 0xeee0 <__fp_split3>
    eb7a:	80 f3       	brcs	.-32     	; 0xeb5c <__addsf3+0x8>
    eb7c:	ba 17       	cp	r27, r26
    eb7e:	62 07       	cpc	r22, r18
    eb80:	73 07       	cpc	r23, r19
    eb82:	84 07       	cpc	r24, r20
    eb84:	95 07       	cpc	r25, r21
    eb86:	18 f0       	brcs	.+6      	; 0xeb8e <__addsf3x+0x18>
    eb88:	71 f4       	brne	.+28     	; 0xeba6 <__addsf3x+0x30>
    eb8a:	9e f5       	brtc	.+102    	; 0xebf2 <__addsf3x+0x7c>
    eb8c:	cb c1       	rjmp	.+918    	; 0xef24 <__fp_zero>
    eb8e:	0e f4       	brtc	.+2      	; 0xeb92 <__addsf3x+0x1c>
    eb90:	e0 95       	com	r30
    eb92:	0b 2e       	mov	r0, r27
    eb94:	ba 2f       	mov	r27, r26
    eb96:	a0 2d       	mov	r26, r0
    eb98:	0b 01       	movw	r0, r22
    eb9a:	b9 01       	movw	r22, r18
    eb9c:	90 01       	movw	r18, r0
    eb9e:	0c 01       	movw	r0, r24
    eba0:	ca 01       	movw	r24, r20
    eba2:	a0 01       	movw	r20, r0
    eba4:	11 24       	eor	r1, r1
    eba6:	ff 27       	eor	r31, r31
    eba8:	59 1b       	sub	r21, r25
    ebaa:	99 f0       	breq	.+38     	; 0xebd2 <__addsf3x+0x5c>
    ebac:	59 3f       	cpi	r21, 0xF9	; 249
    ebae:	50 f4       	brcc	.+20     	; 0xebc4 <__addsf3x+0x4e>
    ebb0:	50 3e       	cpi	r21, 0xE0	; 224
    ebb2:	68 f1       	brcs	.+90     	; 0xec0e <__addsf3x+0x98>
    ebb4:	1a 16       	cp	r1, r26
    ebb6:	f0 40       	sbci	r31, 0x00	; 0
    ebb8:	a2 2f       	mov	r26, r18
    ebba:	23 2f       	mov	r18, r19
    ebbc:	34 2f       	mov	r19, r20
    ebbe:	44 27       	eor	r20, r20
    ebc0:	58 5f       	subi	r21, 0xF8	; 248
    ebc2:	f3 cf       	rjmp	.-26     	; 0xebaa <__addsf3x+0x34>
    ebc4:	46 95       	lsr	r20
    ebc6:	37 95       	ror	r19
    ebc8:	27 95       	ror	r18
    ebca:	a7 95       	ror	r26
    ebcc:	f0 40       	sbci	r31, 0x00	; 0
    ebce:	53 95       	inc	r21
    ebd0:	c9 f7       	brne	.-14     	; 0xebc4 <__addsf3x+0x4e>
    ebd2:	7e f4       	brtc	.+30     	; 0xebf2 <__addsf3x+0x7c>
    ebd4:	1f 16       	cp	r1, r31
    ebd6:	ba 0b       	sbc	r27, r26
    ebd8:	62 0b       	sbc	r22, r18
    ebda:	73 0b       	sbc	r23, r19
    ebdc:	84 0b       	sbc	r24, r20
    ebde:	ba f0       	brmi	.+46     	; 0xec0e <__addsf3x+0x98>
    ebe0:	91 50       	subi	r25, 0x01	; 1
    ebe2:	a1 f0       	breq	.+40     	; 0xec0c <__addsf3x+0x96>
    ebe4:	ff 0f       	add	r31, r31
    ebe6:	bb 1f       	adc	r27, r27
    ebe8:	66 1f       	adc	r22, r22
    ebea:	77 1f       	adc	r23, r23
    ebec:	88 1f       	adc	r24, r24
    ebee:	c2 f7       	brpl	.-16     	; 0xebe0 <__addsf3x+0x6a>
    ebf0:	0e c0       	rjmp	.+28     	; 0xec0e <__addsf3x+0x98>
    ebf2:	ba 0f       	add	r27, r26
    ebf4:	62 1f       	adc	r22, r18
    ebf6:	73 1f       	adc	r23, r19
    ebf8:	84 1f       	adc	r24, r20
    ebfa:	48 f4       	brcc	.+18     	; 0xec0e <__addsf3x+0x98>
    ebfc:	87 95       	ror	r24
    ebfe:	77 95       	ror	r23
    ec00:	67 95       	ror	r22
    ec02:	b7 95       	ror	r27
    ec04:	f7 95       	ror	r31
    ec06:	9e 3f       	cpi	r25, 0xFE	; 254
    ec08:	08 f0       	brcs	.+2      	; 0xec0c <__addsf3x+0x96>
    ec0a:	b3 cf       	rjmp	.-154    	; 0xeb72 <__addsf3+0x1e>
    ec0c:	93 95       	inc	r25
    ec0e:	88 0f       	add	r24, r24
    ec10:	08 f0       	brcs	.+2      	; 0xec14 <__addsf3x+0x9e>
    ec12:	99 27       	eor	r25, r25
    ec14:	ee 0f       	add	r30, r30
    ec16:	97 95       	ror	r25
    ec18:	87 95       	ror	r24
    ec1a:	08 95       	ret

0000ec1c <__cmpsf2>:
    ec1c:	dc d0       	rcall	.+440    	; 0xedd6 <__fp_cmp>
    ec1e:	08 f4       	brcc	.+2      	; 0xec22 <__cmpsf2+0x6>
    ec20:	81 e0       	ldi	r24, 0x01	; 1
    ec22:	08 95       	ret

0000ec24 <cos>:
    ec24:	14 d1       	rcall	.+552    	; 0xee4e <__fp_rempio2>
    ec26:	e3 95       	inc	r30
    ec28:	4a c1       	rjmp	.+660    	; 0xeebe <__fp_sinus>

0000ec2a <__divsf3>:
    ec2a:	0c d0       	rcall	.+24     	; 0xec44 <__divsf3x>
    ec2c:	37 c1       	rjmp	.+622    	; 0xee9c <__fp_round>
    ec2e:	07 d1       	rcall	.+526    	; 0xee3e <__fp_pscB>
    ec30:	40 f0       	brcs	.+16     	; 0xec42 <__divsf3+0x18>
    ec32:	fe d0       	rcall	.+508    	; 0xee30 <__fp_pscA>
    ec34:	30 f0       	brcs	.+12     	; 0xec42 <__divsf3+0x18>
    ec36:	21 f4       	brne	.+8      	; 0xec40 <__divsf3+0x16>
    ec38:	5f 3f       	cpi	r21, 0xFF	; 255
    ec3a:	19 f0       	breq	.+6      	; 0xec42 <__divsf3+0x18>
    ec3c:	f0 c0       	rjmp	.+480    	; 0xee1e <__fp_inf>
    ec3e:	51 11       	cpse	r21, r1
    ec40:	72 c1       	rjmp	.+740    	; 0xef26 <__fp_szero>
    ec42:	f3 c0       	rjmp	.+486    	; 0xee2a <__fp_nan>

0000ec44 <__divsf3x>:
    ec44:	4d d1       	rcall	.+666    	; 0xeee0 <__fp_split3>
    ec46:	98 f3       	brcs	.-26     	; 0xec2e <__divsf3+0x4>

0000ec48 <__divsf3_pse>:
    ec48:	99 23       	and	r25, r25
    ec4a:	c9 f3       	breq	.-14     	; 0xec3e <__divsf3+0x14>
    ec4c:	55 23       	and	r21, r21
    ec4e:	b1 f3       	breq	.-20     	; 0xec3c <__divsf3+0x12>
    ec50:	95 1b       	sub	r25, r21
    ec52:	55 0b       	sbc	r21, r21
    ec54:	bb 27       	eor	r27, r27
    ec56:	aa 27       	eor	r26, r26
    ec58:	62 17       	cp	r22, r18
    ec5a:	73 07       	cpc	r23, r19
    ec5c:	84 07       	cpc	r24, r20
    ec5e:	38 f0       	brcs	.+14     	; 0xec6e <__divsf3_pse+0x26>
    ec60:	9f 5f       	subi	r25, 0xFF	; 255
    ec62:	5f 4f       	sbci	r21, 0xFF	; 255
    ec64:	22 0f       	add	r18, r18
    ec66:	33 1f       	adc	r19, r19
    ec68:	44 1f       	adc	r20, r20
    ec6a:	aa 1f       	adc	r26, r26
    ec6c:	a9 f3       	breq	.-22     	; 0xec58 <__divsf3_pse+0x10>
    ec6e:	33 d0       	rcall	.+102    	; 0xecd6 <__divsf3_pse+0x8e>
    ec70:	0e 2e       	mov	r0, r30
    ec72:	3a f0       	brmi	.+14     	; 0xec82 <__divsf3_pse+0x3a>
    ec74:	e0 e8       	ldi	r30, 0x80	; 128
    ec76:	30 d0       	rcall	.+96     	; 0xecd8 <__divsf3_pse+0x90>
    ec78:	91 50       	subi	r25, 0x01	; 1
    ec7a:	50 40       	sbci	r21, 0x00	; 0
    ec7c:	e6 95       	lsr	r30
    ec7e:	00 1c       	adc	r0, r0
    ec80:	ca f7       	brpl	.-14     	; 0xec74 <__divsf3_pse+0x2c>
    ec82:	29 d0       	rcall	.+82     	; 0xecd6 <__divsf3_pse+0x8e>
    ec84:	fe 2f       	mov	r31, r30
    ec86:	27 d0       	rcall	.+78     	; 0xecd6 <__divsf3_pse+0x8e>
    ec88:	66 0f       	add	r22, r22
    ec8a:	77 1f       	adc	r23, r23
    ec8c:	88 1f       	adc	r24, r24
    ec8e:	bb 1f       	adc	r27, r27
    ec90:	26 17       	cp	r18, r22
    ec92:	37 07       	cpc	r19, r23
    ec94:	48 07       	cpc	r20, r24
    ec96:	ab 07       	cpc	r26, r27
    ec98:	b0 e8       	ldi	r27, 0x80	; 128
    ec9a:	09 f0       	breq	.+2      	; 0xec9e <__divsf3_pse+0x56>
    ec9c:	bb 0b       	sbc	r27, r27
    ec9e:	80 2d       	mov	r24, r0
    eca0:	bf 01       	movw	r22, r30
    eca2:	ff 27       	eor	r31, r31
    eca4:	93 58       	subi	r25, 0x83	; 131
    eca6:	5f 4f       	sbci	r21, 0xFF	; 255
    eca8:	2a f0       	brmi	.+10     	; 0xecb4 <__divsf3_pse+0x6c>
    ecaa:	9e 3f       	cpi	r25, 0xFE	; 254
    ecac:	51 05       	cpc	r21, r1
    ecae:	68 f0       	brcs	.+26     	; 0xecca <__divsf3_pse+0x82>
    ecb0:	b6 c0       	rjmp	.+364    	; 0xee1e <__fp_inf>
    ecb2:	39 c1       	rjmp	.+626    	; 0xef26 <__fp_szero>
    ecb4:	5f 3f       	cpi	r21, 0xFF	; 255
    ecb6:	ec f3       	brlt	.-6      	; 0xecb2 <__divsf3_pse+0x6a>
    ecb8:	98 3e       	cpi	r25, 0xE8	; 232
    ecba:	dc f3       	brlt	.-10     	; 0xecb2 <__divsf3_pse+0x6a>
    ecbc:	86 95       	lsr	r24
    ecbe:	77 95       	ror	r23
    ecc0:	67 95       	ror	r22
    ecc2:	b7 95       	ror	r27
    ecc4:	f7 95       	ror	r31
    ecc6:	9f 5f       	subi	r25, 0xFF	; 255
    ecc8:	c9 f7       	brne	.-14     	; 0xecbc <__divsf3_pse+0x74>
    ecca:	88 0f       	add	r24, r24
    eccc:	91 1d       	adc	r25, r1
    ecce:	96 95       	lsr	r25
    ecd0:	87 95       	ror	r24
    ecd2:	97 f9       	bld	r25, 7
    ecd4:	08 95       	ret
    ecd6:	e1 e0       	ldi	r30, 0x01	; 1
    ecd8:	66 0f       	add	r22, r22
    ecda:	77 1f       	adc	r23, r23
    ecdc:	88 1f       	adc	r24, r24
    ecde:	bb 1f       	adc	r27, r27
    ece0:	62 17       	cp	r22, r18
    ece2:	73 07       	cpc	r23, r19
    ece4:	84 07       	cpc	r24, r20
    ece6:	ba 07       	cpc	r27, r26
    ece8:	20 f0       	brcs	.+8      	; 0xecf2 <__divsf3_pse+0xaa>
    ecea:	62 1b       	sub	r22, r18
    ecec:	73 0b       	sbc	r23, r19
    ecee:	84 0b       	sbc	r24, r20
    ecf0:	ba 0b       	sbc	r27, r26
    ecf2:	ee 1f       	adc	r30, r30
    ecf4:	88 f7       	brcc	.-30     	; 0xecd8 <__divsf3_pse+0x90>
    ecf6:	e0 95       	com	r30
    ecf8:	08 95       	ret

0000ecfa <__fixsfsi>:
    ecfa:	04 d0       	rcall	.+8      	; 0xed04 <__fixunssfsi>
    ecfc:	68 94       	set
    ecfe:	b1 11       	cpse	r27, r1
    ed00:	12 c1       	rjmp	.+548    	; 0xef26 <__fp_szero>
    ed02:	08 95       	ret

0000ed04 <__fixunssfsi>:
    ed04:	f5 d0       	rcall	.+490    	; 0xeef0 <__fp_splitA>
    ed06:	88 f0       	brcs	.+34     	; 0xed2a <__fixunssfsi+0x26>
    ed08:	9f 57       	subi	r25, 0x7F	; 127
    ed0a:	90 f0       	brcs	.+36     	; 0xed30 <__fixunssfsi+0x2c>
    ed0c:	b9 2f       	mov	r27, r25
    ed0e:	99 27       	eor	r25, r25
    ed10:	b7 51       	subi	r27, 0x17	; 23
    ed12:	a0 f0       	brcs	.+40     	; 0xed3c <__fixunssfsi+0x38>
    ed14:	d1 f0       	breq	.+52     	; 0xed4a <__fixunssfsi+0x46>
    ed16:	66 0f       	add	r22, r22
    ed18:	77 1f       	adc	r23, r23
    ed1a:	88 1f       	adc	r24, r24
    ed1c:	99 1f       	adc	r25, r25
    ed1e:	1a f0       	brmi	.+6      	; 0xed26 <__fixunssfsi+0x22>
    ed20:	ba 95       	dec	r27
    ed22:	c9 f7       	brne	.-14     	; 0xed16 <__fixunssfsi+0x12>
    ed24:	12 c0       	rjmp	.+36     	; 0xed4a <__fixunssfsi+0x46>
    ed26:	b1 30       	cpi	r27, 0x01	; 1
    ed28:	81 f0       	breq	.+32     	; 0xed4a <__fixunssfsi+0x46>
    ed2a:	fc d0       	rcall	.+504    	; 0xef24 <__fp_zero>
    ed2c:	b1 e0       	ldi	r27, 0x01	; 1
    ed2e:	08 95       	ret
    ed30:	f9 c0       	rjmp	.+498    	; 0xef24 <__fp_zero>
    ed32:	67 2f       	mov	r22, r23
    ed34:	78 2f       	mov	r23, r24
    ed36:	88 27       	eor	r24, r24
    ed38:	b8 5f       	subi	r27, 0xF8	; 248
    ed3a:	39 f0       	breq	.+14     	; 0xed4a <__fixunssfsi+0x46>
    ed3c:	b9 3f       	cpi	r27, 0xF9	; 249
    ed3e:	cc f3       	brlt	.-14     	; 0xed32 <__fixunssfsi+0x2e>
    ed40:	86 95       	lsr	r24
    ed42:	77 95       	ror	r23
    ed44:	67 95       	ror	r22
    ed46:	b3 95       	inc	r27
    ed48:	d9 f7       	brne	.-10     	; 0xed40 <__fixunssfsi+0x3c>
    ed4a:	3e f4       	brtc	.+14     	; 0xed5a <__fixunssfsi+0x56>
    ed4c:	90 95       	com	r25
    ed4e:	80 95       	com	r24
    ed50:	70 95       	com	r23
    ed52:	61 95       	neg	r22
    ed54:	7f 4f       	sbci	r23, 0xFF	; 255
    ed56:	8f 4f       	sbci	r24, 0xFF	; 255
    ed58:	9f 4f       	sbci	r25, 0xFF	; 255
    ed5a:	08 95       	ret

0000ed5c <__floatunsisf>:
    ed5c:	e8 94       	clt
    ed5e:	09 c0       	rjmp	.+18     	; 0xed72 <__floatsisf+0x12>

0000ed60 <__floatsisf>:
    ed60:	97 fb       	bst	r25, 7
    ed62:	3e f4       	brtc	.+14     	; 0xed72 <__floatsisf+0x12>
    ed64:	90 95       	com	r25
    ed66:	80 95       	com	r24
    ed68:	70 95       	com	r23
    ed6a:	61 95       	neg	r22
    ed6c:	7f 4f       	sbci	r23, 0xFF	; 255
    ed6e:	8f 4f       	sbci	r24, 0xFF	; 255
    ed70:	9f 4f       	sbci	r25, 0xFF	; 255
    ed72:	99 23       	and	r25, r25
    ed74:	a9 f0       	breq	.+42     	; 0xeda0 <__floatsisf+0x40>
    ed76:	f9 2f       	mov	r31, r25
    ed78:	96 e9       	ldi	r25, 0x96	; 150
    ed7a:	bb 27       	eor	r27, r27
    ed7c:	93 95       	inc	r25
    ed7e:	f6 95       	lsr	r31
    ed80:	87 95       	ror	r24
    ed82:	77 95       	ror	r23
    ed84:	67 95       	ror	r22
    ed86:	b7 95       	ror	r27
    ed88:	f1 11       	cpse	r31, r1
    ed8a:	f8 cf       	rjmp	.-16     	; 0xed7c <__floatsisf+0x1c>
    ed8c:	fa f4       	brpl	.+62     	; 0xedcc <__floatsisf+0x6c>
    ed8e:	bb 0f       	add	r27, r27
    ed90:	11 f4       	brne	.+4      	; 0xed96 <__floatsisf+0x36>
    ed92:	60 ff       	sbrs	r22, 0
    ed94:	1b c0       	rjmp	.+54     	; 0xedcc <__floatsisf+0x6c>
    ed96:	6f 5f       	subi	r22, 0xFF	; 255
    ed98:	7f 4f       	sbci	r23, 0xFF	; 255
    ed9a:	8f 4f       	sbci	r24, 0xFF	; 255
    ed9c:	9f 4f       	sbci	r25, 0xFF	; 255
    ed9e:	16 c0       	rjmp	.+44     	; 0xedcc <__floatsisf+0x6c>
    eda0:	88 23       	and	r24, r24
    eda2:	11 f0       	breq	.+4      	; 0xeda8 <__floatsisf+0x48>
    eda4:	96 e9       	ldi	r25, 0x96	; 150
    eda6:	11 c0       	rjmp	.+34     	; 0xedca <__floatsisf+0x6a>
    eda8:	77 23       	and	r23, r23
    edaa:	21 f0       	breq	.+8      	; 0xedb4 <__floatsisf+0x54>
    edac:	9e e8       	ldi	r25, 0x8E	; 142
    edae:	87 2f       	mov	r24, r23
    edb0:	76 2f       	mov	r23, r22
    edb2:	05 c0       	rjmp	.+10     	; 0xedbe <__floatsisf+0x5e>
    edb4:	66 23       	and	r22, r22
    edb6:	71 f0       	breq	.+28     	; 0xedd4 <__floatsisf+0x74>
    edb8:	96 e8       	ldi	r25, 0x86	; 134
    edba:	86 2f       	mov	r24, r22
    edbc:	70 e0       	ldi	r23, 0x00	; 0
    edbe:	60 e0       	ldi	r22, 0x00	; 0
    edc0:	2a f0       	brmi	.+10     	; 0xedcc <__floatsisf+0x6c>
    edc2:	9a 95       	dec	r25
    edc4:	66 0f       	add	r22, r22
    edc6:	77 1f       	adc	r23, r23
    edc8:	88 1f       	adc	r24, r24
    edca:	da f7       	brpl	.-10     	; 0xedc2 <__floatsisf+0x62>
    edcc:	88 0f       	add	r24, r24
    edce:	96 95       	lsr	r25
    edd0:	87 95       	ror	r24
    edd2:	97 f9       	bld	r25, 7
    edd4:	08 95       	ret

0000edd6 <__fp_cmp>:
    edd6:	99 0f       	add	r25, r25
    edd8:	00 08       	sbc	r0, r0
    edda:	55 0f       	add	r21, r21
    eddc:	aa 0b       	sbc	r26, r26
    edde:	e0 e8       	ldi	r30, 0x80	; 128
    ede0:	fe ef       	ldi	r31, 0xFE	; 254
    ede2:	16 16       	cp	r1, r22
    ede4:	17 06       	cpc	r1, r23
    ede6:	e8 07       	cpc	r30, r24
    ede8:	f9 07       	cpc	r31, r25
    edea:	c0 f0       	brcs	.+48     	; 0xee1c <__fp_cmp+0x46>
    edec:	12 16       	cp	r1, r18
    edee:	13 06       	cpc	r1, r19
    edf0:	e4 07       	cpc	r30, r20
    edf2:	f5 07       	cpc	r31, r21
    edf4:	98 f0       	brcs	.+38     	; 0xee1c <__fp_cmp+0x46>
    edf6:	62 1b       	sub	r22, r18
    edf8:	73 0b       	sbc	r23, r19
    edfa:	84 0b       	sbc	r24, r20
    edfc:	95 0b       	sbc	r25, r21
    edfe:	39 f4       	brne	.+14     	; 0xee0e <__fp_cmp+0x38>
    ee00:	0a 26       	eor	r0, r26
    ee02:	61 f0       	breq	.+24     	; 0xee1c <__fp_cmp+0x46>
    ee04:	23 2b       	or	r18, r19
    ee06:	24 2b       	or	r18, r20
    ee08:	25 2b       	or	r18, r21
    ee0a:	21 f4       	brne	.+8      	; 0xee14 <__fp_cmp+0x3e>
    ee0c:	08 95       	ret
    ee0e:	0a 26       	eor	r0, r26
    ee10:	09 f4       	brne	.+2      	; 0xee14 <__fp_cmp+0x3e>
    ee12:	a1 40       	sbci	r26, 0x01	; 1
    ee14:	a6 95       	lsr	r26
    ee16:	8f ef       	ldi	r24, 0xFF	; 255
    ee18:	81 1d       	adc	r24, r1
    ee1a:	81 1d       	adc	r24, r1
    ee1c:	08 95       	ret

0000ee1e <__fp_inf>:
    ee1e:	97 f9       	bld	r25, 7
    ee20:	9f 67       	ori	r25, 0x7F	; 127
    ee22:	80 e8       	ldi	r24, 0x80	; 128
    ee24:	70 e0       	ldi	r23, 0x00	; 0
    ee26:	60 e0       	ldi	r22, 0x00	; 0
    ee28:	08 95       	ret

0000ee2a <__fp_nan>:
    ee2a:	9f ef       	ldi	r25, 0xFF	; 255
    ee2c:	80 ec       	ldi	r24, 0xC0	; 192
    ee2e:	08 95       	ret

0000ee30 <__fp_pscA>:
    ee30:	00 24       	eor	r0, r0
    ee32:	0a 94       	dec	r0
    ee34:	16 16       	cp	r1, r22
    ee36:	17 06       	cpc	r1, r23
    ee38:	18 06       	cpc	r1, r24
    ee3a:	09 06       	cpc	r0, r25
    ee3c:	08 95       	ret

0000ee3e <__fp_pscB>:
    ee3e:	00 24       	eor	r0, r0
    ee40:	0a 94       	dec	r0
    ee42:	12 16       	cp	r1, r18
    ee44:	13 06       	cpc	r1, r19
    ee46:	14 06       	cpc	r1, r20
    ee48:	05 06       	cpc	r0, r21
    ee4a:	08 95       	ret
    ee4c:	ee cf       	rjmp	.-36     	; 0xee2a <__fp_nan>

0000ee4e <__fp_rempio2>:
    ee4e:	50 d0       	rcall	.+160    	; 0xeef0 <__fp_splitA>
    ee50:	e8 f3       	brcs	.-6      	; 0xee4c <__fp_pscB+0xe>
    ee52:	e8 94       	clt
    ee54:	e0 e0       	ldi	r30, 0x00	; 0
    ee56:	bb 27       	eor	r27, r27
    ee58:	9f 57       	subi	r25, 0x7F	; 127
    ee5a:	f0 f0       	brcs	.+60     	; 0xee98 <__fp_rempio2+0x4a>
    ee5c:	2a ed       	ldi	r18, 0xDA	; 218
    ee5e:	3f e0       	ldi	r19, 0x0F	; 15
    ee60:	49 ec       	ldi	r20, 0xC9	; 201
    ee62:	06 c0       	rjmp	.+12     	; 0xee70 <__fp_rempio2+0x22>
    ee64:	ee 0f       	add	r30, r30
    ee66:	bb 0f       	add	r27, r27
    ee68:	66 1f       	adc	r22, r22
    ee6a:	77 1f       	adc	r23, r23
    ee6c:	88 1f       	adc	r24, r24
    ee6e:	28 f0       	brcs	.+10     	; 0xee7a <__fp_rempio2+0x2c>
    ee70:	b2 3a       	cpi	r27, 0xA2	; 162
    ee72:	62 07       	cpc	r22, r18
    ee74:	73 07       	cpc	r23, r19
    ee76:	84 07       	cpc	r24, r20
    ee78:	28 f0       	brcs	.+10     	; 0xee84 <__fp_rempio2+0x36>
    ee7a:	b2 5a       	subi	r27, 0xA2	; 162
    ee7c:	62 0b       	sbc	r22, r18
    ee7e:	73 0b       	sbc	r23, r19
    ee80:	84 0b       	sbc	r24, r20
    ee82:	e3 95       	inc	r30
    ee84:	9a 95       	dec	r25
    ee86:	72 f7       	brpl	.-36     	; 0xee64 <__fp_rempio2+0x16>
    ee88:	80 38       	cpi	r24, 0x80	; 128
    ee8a:	30 f4       	brcc	.+12     	; 0xee98 <__fp_rempio2+0x4a>
    ee8c:	9a 95       	dec	r25
    ee8e:	bb 0f       	add	r27, r27
    ee90:	66 1f       	adc	r22, r22
    ee92:	77 1f       	adc	r23, r23
    ee94:	88 1f       	adc	r24, r24
    ee96:	d2 f7       	brpl	.-12     	; 0xee8c <__fp_rempio2+0x3e>
    ee98:	90 48       	sbci	r25, 0x80	; 128
    ee9a:	37 c1       	rjmp	.+622    	; 0xf10a <__fp_mpack_finite>

0000ee9c <__fp_round>:
    ee9c:	09 2e       	mov	r0, r25
    ee9e:	03 94       	inc	r0
    eea0:	00 0c       	add	r0, r0
    eea2:	11 f4       	brne	.+4      	; 0xeea8 <__fp_round+0xc>
    eea4:	88 23       	and	r24, r24
    eea6:	52 f0       	brmi	.+20     	; 0xeebc <__fp_round+0x20>
    eea8:	bb 0f       	add	r27, r27
    eeaa:	40 f4       	brcc	.+16     	; 0xeebc <__fp_round+0x20>
    eeac:	bf 2b       	or	r27, r31
    eeae:	11 f4       	brne	.+4      	; 0xeeb4 <__fp_round+0x18>
    eeb0:	60 ff       	sbrs	r22, 0
    eeb2:	04 c0       	rjmp	.+8      	; 0xeebc <__fp_round+0x20>
    eeb4:	6f 5f       	subi	r22, 0xFF	; 255
    eeb6:	7f 4f       	sbci	r23, 0xFF	; 255
    eeb8:	8f 4f       	sbci	r24, 0xFF	; 255
    eeba:	9f 4f       	sbci	r25, 0xFF	; 255
    eebc:	08 95       	ret

0000eebe <__fp_sinus>:
    eebe:	ef 93       	push	r30
    eec0:	e0 ff       	sbrs	r30, 0
    eec2:	06 c0       	rjmp	.+12     	; 0xeed0 <__fp_sinus+0x12>
    eec4:	a2 ea       	ldi	r26, 0xA2	; 162
    eec6:	2a ed       	ldi	r18, 0xDA	; 218
    eec8:	3f e0       	ldi	r19, 0x0F	; 15
    eeca:	49 ec       	ldi	r20, 0xC9	; 201
    eecc:	5f eb       	ldi	r21, 0xBF	; 191
    eece:	53 de       	rcall	.-858    	; 0xeb76 <__addsf3x>
    eed0:	e5 df       	rcall	.-54     	; 0xee9c <__fp_round>
    eed2:	0f 90       	pop	r0
    eed4:	03 94       	inc	r0
    eed6:	01 fc       	sbrc	r0, 1
    eed8:	90 58       	subi	r25, 0x80	; 128
    eeda:	e8 e1       	ldi	r30, 0x18	; 24
    eedc:	f2 e0       	ldi	r31, 0x02	; 2
    eede:	46 c1       	rjmp	.+652    	; 0xf16c <__fp_powsodd>

0000eee0 <__fp_split3>:
    eee0:	57 fd       	sbrc	r21, 7
    eee2:	90 58       	subi	r25, 0x80	; 128
    eee4:	44 0f       	add	r20, r20
    eee6:	55 1f       	adc	r21, r21
    eee8:	59 f0       	breq	.+22     	; 0xef00 <__fp_splitA+0x10>
    eeea:	5f 3f       	cpi	r21, 0xFF	; 255
    eeec:	71 f0       	breq	.+28     	; 0xef0a <__fp_splitA+0x1a>
    eeee:	47 95       	ror	r20

0000eef0 <__fp_splitA>:
    eef0:	88 0f       	add	r24, r24
    eef2:	97 fb       	bst	r25, 7
    eef4:	99 1f       	adc	r25, r25
    eef6:	61 f0       	breq	.+24     	; 0xef10 <__fp_splitA+0x20>
    eef8:	9f 3f       	cpi	r25, 0xFF	; 255
    eefa:	79 f0       	breq	.+30     	; 0xef1a <__fp_splitA+0x2a>
    eefc:	87 95       	ror	r24
    eefe:	08 95       	ret
    ef00:	12 16       	cp	r1, r18
    ef02:	13 06       	cpc	r1, r19
    ef04:	14 06       	cpc	r1, r20
    ef06:	55 1f       	adc	r21, r21
    ef08:	f2 cf       	rjmp	.-28     	; 0xeeee <__fp_split3+0xe>
    ef0a:	46 95       	lsr	r20
    ef0c:	f1 df       	rcall	.-30     	; 0xeef0 <__fp_splitA>
    ef0e:	08 c0       	rjmp	.+16     	; 0xef20 <__fp_splitA+0x30>
    ef10:	16 16       	cp	r1, r22
    ef12:	17 06       	cpc	r1, r23
    ef14:	18 06       	cpc	r1, r24
    ef16:	99 1f       	adc	r25, r25
    ef18:	f1 cf       	rjmp	.-30     	; 0xeefc <__fp_splitA+0xc>
    ef1a:	86 95       	lsr	r24
    ef1c:	71 05       	cpc	r23, r1
    ef1e:	61 05       	cpc	r22, r1
    ef20:	08 94       	sec
    ef22:	08 95       	ret

0000ef24 <__fp_zero>:
    ef24:	e8 94       	clt

0000ef26 <__fp_szero>:
    ef26:	bb 27       	eor	r27, r27
    ef28:	66 27       	eor	r22, r22
    ef2a:	77 27       	eor	r23, r23
    ef2c:	cb 01       	movw	r24, r22
    ef2e:	97 f9       	bld	r25, 7
    ef30:	08 95       	ret

0000ef32 <__gesf2>:
    ef32:	51 df       	rcall	.-350    	; 0xedd6 <__fp_cmp>
    ef34:	08 f4       	brcc	.+2      	; 0xef38 <__gesf2+0x6>
    ef36:	8f ef       	ldi	r24, 0xFF	; 255
    ef38:	08 95       	ret

0000ef3a <__mulsf3>:
    ef3a:	0b d0       	rcall	.+22     	; 0xef52 <__mulsf3x>
    ef3c:	af cf       	rjmp	.-162    	; 0xee9c <__fp_round>
    ef3e:	78 df       	rcall	.-272    	; 0xee30 <__fp_pscA>
    ef40:	28 f0       	brcs	.+10     	; 0xef4c <__mulsf3+0x12>
    ef42:	7d df       	rcall	.-262    	; 0xee3e <__fp_pscB>
    ef44:	18 f0       	brcs	.+6      	; 0xef4c <__mulsf3+0x12>
    ef46:	95 23       	and	r25, r21
    ef48:	09 f0       	breq	.+2      	; 0xef4c <__mulsf3+0x12>
    ef4a:	69 cf       	rjmp	.-302    	; 0xee1e <__fp_inf>
    ef4c:	6e cf       	rjmp	.-292    	; 0xee2a <__fp_nan>
    ef4e:	11 24       	eor	r1, r1
    ef50:	ea cf       	rjmp	.-44     	; 0xef26 <__fp_szero>

0000ef52 <__mulsf3x>:
    ef52:	c6 df       	rcall	.-116    	; 0xeee0 <__fp_split3>
    ef54:	a0 f3       	brcs	.-24     	; 0xef3e <__mulsf3+0x4>

0000ef56 <__mulsf3_pse>:
    ef56:	95 9f       	mul	r25, r21
    ef58:	d1 f3       	breq	.-12     	; 0xef4e <__mulsf3+0x14>
    ef5a:	95 0f       	add	r25, r21
    ef5c:	50 e0       	ldi	r21, 0x00	; 0
    ef5e:	55 1f       	adc	r21, r21
    ef60:	62 9f       	mul	r22, r18
    ef62:	f0 01       	movw	r30, r0
    ef64:	72 9f       	mul	r23, r18
    ef66:	bb 27       	eor	r27, r27
    ef68:	f0 0d       	add	r31, r0
    ef6a:	b1 1d       	adc	r27, r1
    ef6c:	63 9f       	mul	r22, r19
    ef6e:	aa 27       	eor	r26, r26
    ef70:	f0 0d       	add	r31, r0
    ef72:	b1 1d       	adc	r27, r1
    ef74:	aa 1f       	adc	r26, r26
    ef76:	64 9f       	mul	r22, r20
    ef78:	66 27       	eor	r22, r22
    ef7a:	b0 0d       	add	r27, r0
    ef7c:	a1 1d       	adc	r26, r1
    ef7e:	66 1f       	adc	r22, r22
    ef80:	82 9f       	mul	r24, r18
    ef82:	22 27       	eor	r18, r18
    ef84:	b0 0d       	add	r27, r0
    ef86:	a1 1d       	adc	r26, r1
    ef88:	62 1f       	adc	r22, r18
    ef8a:	73 9f       	mul	r23, r19
    ef8c:	b0 0d       	add	r27, r0
    ef8e:	a1 1d       	adc	r26, r1
    ef90:	62 1f       	adc	r22, r18
    ef92:	83 9f       	mul	r24, r19
    ef94:	a0 0d       	add	r26, r0
    ef96:	61 1d       	adc	r22, r1
    ef98:	22 1f       	adc	r18, r18
    ef9a:	74 9f       	mul	r23, r20
    ef9c:	33 27       	eor	r19, r19
    ef9e:	a0 0d       	add	r26, r0
    efa0:	61 1d       	adc	r22, r1
    efa2:	23 1f       	adc	r18, r19
    efa4:	84 9f       	mul	r24, r20
    efa6:	60 0d       	add	r22, r0
    efa8:	21 1d       	adc	r18, r1
    efaa:	82 2f       	mov	r24, r18
    efac:	76 2f       	mov	r23, r22
    efae:	6a 2f       	mov	r22, r26
    efb0:	11 24       	eor	r1, r1
    efb2:	9f 57       	subi	r25, 0x7F	; 127
    efb4:	50 40       	sbci	r21, 0x00	; 0
    efb6:	8a f0       	brmi	.+34     	; 0xefda <__mulsf3_pse+0x84>
    efb8:	e1 f0       	breq	.+56     	; 0xeff2 <__mulsf3_pse+0x9c>
    efba:	88 23       	and	r24, r24
    efbc:	4a f0       	brmi	.+18     	; 0xefd0 <__mulsf3_pse+0x7a>
    efbe:	ee 0f       	add	r30, r30
    efc0:	ff 1f       	adc	r31, r31
    efc2:	bb 1f       	adc	r27, r27
    efc4:	66 1f       	adc	r22, r22
    efc6:	77 1f       	adc	r23, r23
    efc8:	88 1f       	adc	r24, r24
    efca:	91 50       	subi	r25, 0x01	; 1
    efcc:	50 40       	sbci	r21, 0x00	; 0
    efce:	a9 f7       	brne	.-22     	; 0xefba <__mulsf3_pse+0x64>
    efd0:	9e 3f       	cpi	r25, 0xFE	; 254
    efd2:	51 05       	cpc	r21, r1
    efd4:	70 f0       	brcs	.+28     	; 0xeff2 <__mulsf3_pse+0x9c>
    efd6:	23 cf       	rjmp	.-442    	; 0xee1e <__fp_inf>
    efd8:	a6 cf       	rjmp	.-180    	; 0xef26 <__fp_szero>
    efda:	5f 3f       	cpi	r21, 0xFF	; 255
    efdc:	ec f3       	brlt	.-6      	; 0xefd8 <__mulsf3_pse+0x82>
    efde:	98 3e       	cpi	r25, 0xE8	; 232
    efe0:	dc f3       	brlt	.-10     	; 0xefd8 <__mulsf3_pse+0x82>
    efe2:	86 95       	lsr	r24
    efe4:	77 95       	ror	r23
    efe6:	67 95       	ror	r22
    efe8:	b7 95       	ror	r27
    efea:	f7 95       	ror	r31
    efec:	e7 95       	ror	r30
    efee:	9f 5f       	subi	r25, 0xFF	; 255
    eff0:	c1 f7       	brne	.-16     	; 0xefe2 <__mulsf3_pse+0x8c>
    eff2:	fe 2b       	or	r31, r30
    eff4:	88 0f       	add	r24, r24
    eff6:	91 1d       	adc	r25, r1
    eff8:	96 95       	lsr	r25
    effa:	87 95       	ror	r24
    effc:	97 f9       	bld	r25, 7
    effe:	08 95       	ret

0000f000 <pow>:
    f000:	fa 01       	movw	r30, r20
    f002:	ee 0f       	add	r30, r30
    f004:	ff 1f       	adc	r31, r31
    f006:	30 96       	adiw	r30, 0x00	; 0
    f008:	21 05       	cpc	r18, r1
    f00a:	31 05       	cpc	r19, r1
    f00c:	99 f1       	breq	.+102    	; 0xf074 <pow+0x74>
    f00e:	61 15       	cp	r22, r1
    f010:	71 05       	cpc	r23, r1
    f012:	61 f4       	brne	.+24     	; 0xf02c <pow+0x2c>
    f014:	80 38       	cpi	r24, 0x80	; 128
    f016:	bf e3       	ldi	r27, 0x3F	; 63
    f018:	9b 07       	cpc	r25, r27
    f01a:	49 f1       	breq	.+82     	; 0xf06e <pow+0x6e>
    f01c:	68 94       	set
    f01e:	90 38       	cpi	r25, 0x80	; 128
    f020:	81 05       	cpc	r24, r1
    f022:	61 f0       	breq	.+24     	; 0xf03c <pow+0x3c>
    f024:	80 38       	cpi	r24, 0x80	; 128
    f026:	bf ef       	ldi	r27, 0xFF	; 255
    f028:	9b 07       	cpc	r25, r27
    f02a:	41 f0       	breq	.+16     	; 0xf03c <pow+0x3c>
    f02c:	99 23       	and	r25, r25
    f02e:	42 f5       	brpl	.+80     	; 0xf080 <pow+0x80>
    f030:	ff 3f       	cpi	r31, 0xFF	; 255
    f032:	e1 05       	cpc	r30, r1
    f034:	31 05       	cpc	r19, r1
    f036:	21 05       	cpc	r18, r1
    f038:	11 f1       	breq	.+68     	; 0xf07e <pow+0x7e>
    f03a:	e8 94       	clt
    f03c:	08 94       	sec
    f03e:	e7 95       	ror	r30
    f040:	d9 01       	movw	r26, r18
    f042:	aa 23       	and	r26, r26
    f044:	29 f4       	brne	.+10     	; 0xf050 <pow+0x50>
    f046:	ab 2f       	mov	r26, r27
    f048:	be 2f       	mov	r27, r30
    f04a:	f8 5f       	subi	r31, 0xF8	; 248
    f04c:	d0 f3       	brcs	.-12     	; 0xf042 <pow+0x42>
    f04e:	10 c0       	rjmp	.+32     	; 0xf070 <pow+0x70>
    f050:	ff 5f       	subi	r31, 0xFF	; 255
    f052:	70 f4       	brcc	.+28     	; 0xf070 <pow+0x70>
    f054:	a6 95       	lsr	r26
    f056:	e0 f7       	brcc	.-8      	; 0xf050 <pow+0x50>
    f058:	f7 39       	cpi	r31, 0x97	; 151
    f05a:	50 f0       	brcs	.+20     	; 0xf070 <pow+0x70>
    f05c:	19 f0       	breq	.+6      	; 0xf064 <pow+0x64>
    f05e:	ff 3a       	cpi	r31, 0xAF	; 175
    f060:	38 f4       	brcc	.+14     	; 0xf070 <pow+0x70>
    f062:	9f 77       	andi	r25, 0x7F	; 127
    f064:	9f 93       	push	r25
    f066:	0c d0       	rcall	.+24     	; 0xf080 <pow+0x80>
    f068:	0f 90       	pop	r0
    f06a:	07 fc       	sbrc	r0, 7
    f06c:	90 58       	subi	r25, 0x80	; 128
    f06e:	08 95       	ret
    f070:	3e f0       	brts	.+14     	; 0xf080 <pow+0x80>
    f072:	db ce       	rjmp	.-586    	; 0xee2a <__fp_nan>
    f074:	60 e0       	ldi	r22, 0x00	; 0
    f076:	70 e0       	ldi	r23, 0x00	; 0
    f078:	80 e8       	ldi	r24, 0x80	; 128
    f07a:	9f e3       	ldi	r25, 0x3F	; 63
    f07c:	08 95       	ret
    f07e:	4f e7       	ldi	r20, 0x7F	; 127
    f080:	9f 77       	andi	r25, 0x7F	; 127
    f082:	5f 93       	push	r21
    f084:	4f 93       	push	r20
    f086:	3f 93       	push	r19
    f088:	2f 93       	push	r18
    f08a:	c3 d0       	rcall	.+390    	; 0xf212 <log>
    f08c:	2f 91       	pop	r18
    f08e:	3f 91       	pop	r19
    f090:	4f 91       	pop	r20
    f092:	5f 91       	pop	r21
    f094:	52 df       	rcall	.-348    	; 0xef3a <__mulsf3>
    f096:	0b c0       	rjmp	.+22     	; 0xf0ae <exp>

0000f098 <sin>:
    f098:	9f 93       	push	r25
    f09a:	d9 de       	rcall	.-590    	; 0xee4e <__fp_rempio2>
    f09c:	0f 90       	pop	r0
    f09e:	07 fc       	sbrc	r0, 7
    f0a0:	ee 5f       	subi	r30, 0xFE	; 254
    f0a2:	0d cf       	rjmp	.-486    	; 0xeebe <__fp_sinus>
    f0a4:	19 f4       	brne	.+6      	; 0xf0ac <sin+0x14>
    f0a6:	0e f0       	brts	.+2      	; 0xf0aa <sin+0x12>
    f0a8:	ba ce       	rjmp	.-652    	; 0xee1e <__fp_inf>
    f0aa:	3c cf       	rjmp	.-392    	; 0xef24 <__fp_zero>
    f0ac:	be ce       	rjmp	.-644    	; 0xee2a <__fp_nan>

0000f0ae <exp>:
    f0ae:	20 df       	rcall	.-448    	; 0xeef0 <__fp_splitA>
    f0b0:	c8 f3       	brcs	.-14     	; 0xf0a4 <sin+0xc>
    f0b2:	96 38       	cpi	r25, 0x86	; 134
    f0b4:	c0 f7       	brcc	.-16     	; 0xf0a6 <sin+0xe>
    f0b6:	07 f8       	bld	r0, 7
    f0b8:	0f 92       	push	r0
    f0ba:	e8 94       	clt
    f0bc:	2b e3       	ldi	r18, 0x3B	; 59
    f0be:	3a ea       	ldi	r19, 0xAA	; 170
    f0c0:	48 eb       	ldi	r20, 0xB8	; 184
    f0c2:	5f e7       	ldi	r21, 0x7F	; 127
    f0c4:	48 df       	rcall	.-368    	; 0xef56 <__mulsf3_pse>
    f0c6:	0f 92       	push	r0
    f0c8:	0f 92       	push	r0
    f0ca:	0f 92       	push	r0
    f0cc:	4d b7       	in	r20, 0x3d	; 61
    f0ce:	5e b7       	in	r21, 0x3e	; 62
    f0d0:	0f 92       	push	r0
    f0d2:	df d0       	rcall	.+446    	; 0xf292 <modf>
    f0d4:	e6 e3       	ldi	r30, 0x36	; 54
    f0d6:	f2 e0       	ldi	r31, 0x02	; 2
    f0d8:	24 d0       	rcall	.+72     	; 0xf122 <__fp_powser>
    f0da:	4f 91       	pop	r20
    f0dc:	5f 91       	pop	r21
    f0de:	ef 91       	pop	r30
    f0e0:	ff 91       	pop	r31
    f0e2:	e5 95       	asr	r30
    f0e4:	ee 1f       	adc	r30, r30
    f0e6:	ff 1f       	adc	r31, r31
    f0e8:	49 f0       	breq	.+18     	; 0xf0fc <exp+0x4e>
    f0ea:	fe 57       	subi	r31, 0x7E	; 126
    f0ec:	e0 68       	ori	r30, 0x80	; 128
    f0ee:	44 27       	eor	r20, r20
    f0f0:	ee 0f       	add	r30, r30
    f0f2:	44 1f       	adc	r20, r20
    f0f4:	fa 95       	dec	r31
    f0f6:	e1 f7       	brne	.-8      	; 0xf0f0 <exp+0x42>
    f0f8:	41 95       	neg	r20
    f0fa:	55 0b       	sbc	r21, r21
    f0fc:	51 d0       	rcall	.+162    	; 0xf1a0 <ldexp>
    f0fe:	0f 90       	pop	r0
    f100:	07 fe       	sbrs	r0, 7
    f102:	45 c0       	rjmp	.+138    	; 0xf18e <inverse>
    f104:	08 95       	ret

0000f106 <__fp_mpack>:
    f106:	9f 3f       	cpi	r25, 0xFF	; 255
    f108:	31 f0       	breq	.+12     	; 0xf116 <__fp_mpack_finite+0xc>

0000f10a <__fp_mpack_finite>:
    f10a:	91 50       	subi	r25, 0x01	; 1
    f10c:	20 f4       	brcc	.+8      	; 0xf116 <__fp_mpack_finite+0xc>
    f10e:	87 95       	ror	r24
    f110:	77 95       	ror	r23
    f112:	67 95       	ror	r22
    f114:	b7 95       	ror	r27
    f116:	88 0f       	add	r24, r24
    f118:	91 1d       	adc	r25, r1
    f11a:	96 95       	lsr	r25
    f11c:	87 95       	ror	r24
    f11e:	97 f9       	bld	r25, 7
    f120:	08 95       	ret

0000f122 <__fp_powser>:
    f122:	df 93       	push	r29
    f124:	cf 93       	push	r28
    f126:	1f 93       	push	r17
    f128:	0f 93       	push	r16
    f12a:	ff 92       	push	r15
    f12c:	ef 92       	push	r14
    f12e:	df 92       	push	r13
    f130:	7b 01       	movw	r14, r22
    f132:	8c 01       	movw	r16, r24
    f134:	68 94       	set
    f136:	05 c0       	rjmp	.+10     	; 0xf142 <__fp_powser+0x20>
    f138:	da 2e       	mov	r13, r26
    f13a:	ef 01       	movw	r28, r30
    f13c:	0a df       	rcall	.-492    	; 0xef52 <__mulsf3x>
    f13e:	fe 01       	movw	r30, r28
    f140:	e8 94       	clt
    f142:	a5 91       	lpm	r26, Z+
    f144:	25 91       	lpm	r18, Z+
    f146:	35 91       	lpm	r19, Z+
    f148:	45 91       	lpm	r20, Z+
    f14a:	55 91       	lpm	r21, Z+
    f14c:	ae f3       	brts	.-22     	; 0xf138 <__fp_powser+0x16>
    f14e:	ef 01       	movw	r28, r30
    f150:	12 dd       	rcall	.-1500   	; 0xeb76 <__addsf3x>
    f152:	fe 01       	movw	r30, r28
    f154:	97 01       	movw	r18, r14
    f156:	a8 01       	movw	r20, r16
    f158:	da 94       	dec	r13
    f15a:	79 f7       	brne	.-34     	; 0xf13a <__fp_powser+0x18>
    f15c:	df 90       	pop	r13
    f15e:	ef 90       	pop	r14
    f160:	ff 90       	pop	r15
    f162:	0f 91       	pop	r16
    f164:	1f 91       	pop	r17
    f166:	cf 91       	pop	r28
    f168:	df 91       	pop	r29
    f16a:	08 95       	ret

0000f16c <__fp_powsodd>:
    f16c:	9f 93       	push	r25
    f16e:	8f 93       	push	r24
    f170:	7f 93       	push	r23
    f172:	6f 93       	push	r22
    f174:	ff 93       	push	r31
    f176:	ef 93       	push	r30
    f178:	9b 01       	movw	r18, r22
    f17a:	ac 01       	movw	r20, r24
    f17c:	de de       	rcall	.-580    	; 0xef3a <__mulsf3>
    f17e:	ef 91       	pop	r30
    f180:	ff 91       	pop	r31
    f182:	cf df       	rcall	.-98     	; 0xf122 <__fp_powser>
    f184:	2f 91       	pop	r18
    f186:	3f 91       	pop	r19
    f188:	4f 91       	pop	r20
    f18a:	5f 91       	pop	r21
    f18c:	d6 ce       	rjmp	.-596    	; 0xef3a <__mulsf3>

0000f18e <inverse>:
    f18e:	9b 01       	movw	r18, r22
    f190:	ac 01       	movw	r20, r24
    f192:	60 e0       	ldi	r22, 0x00	; 0
    f194:	70 e0       	ldi	r23, 0x00	; 0
    f196:	80 e8       	ldi	r24, 0x80	; 128
    f198:	9f e3       	ldi	r25, 0x3F	; 63
    f19a:	47 cd       	rjmp	.-1394   	; 0xec2a <__divsf3>
    f19c:	40 ce       	rjmp	.-896    	; 0xee1e <__fp_inf>
    f19e:	b3 cf       	rjmp	.-154    	; 0xf106 <__fp_mpack>

0000f1a0 <ldexp>:
    f1a0:	a7 de       	rcall	.-690    	; 0xeef0 <__fp_splitA>
    f1a2:	e8 f3       	brcs	.-6      	; 0xf19e <inverse+0x10>
    f1a4:	99 23       	and	r25, r25
    f1a6:	d9 f3       	breq	.-10     	; 0xf19e <inverse+0x10>
    f1a8:	94 0f       	add	r25, r20
    f1aa:	51 1d       	adc	r21, r1
    f1ac:	bb f3       	brvs	.-18     	; 0xf19c <inverse+0xe>
    f1ae:	91 50       	subi	r25, 0x01	; 1
    f1b0:	50 40       	sbci	r21, 0x00	; 0
    f1b2:	94 f0       	brlt	.+36     	; 0xf1d8 <ldexp+0x38>
    f1b4:	59 f0       	breq	.+22     	; 0xf1cc <ldexp+0x2c>
    f1b6:	88 23       	and	r24, r24
    f1b8:	32 f0       	brmi	.+12     	; 0xf1c6 <ldexp+0x26>
    f1ba:	66 0f       	add	r22, r22
    f1bc:	77 1f       	adc	r23, r23
    f1be:	88 1f       	adc	r24, r24
    f1c0:	91 50       	subi	r25, 0x01	; 1
    f1c2:	50 40       	sbci	r21, 0x00	; 0
    f1c4:	c1 f7       	brne	.-16     	; 0xf1b6 <ldexp+0x16>
    f1c6:	9e 3f       	cpi	r25, 0xFE	; 254
    f1c8:	51 05       	cpc	r21, r1
    f1ca:	44 f7       	brge	.-48     	; 0xf19c <inverse+0xe>
    f1cc:	88 0f       	add	r24, r24
    f1ce:	91 1d       	adc	r25, r1
    f1d0:	96 95       	lsr	r25
    f1d2:	87 95       	ror	r24
    f1d4:	97 f9       	bld	r25, 7
    f1d6:	08 95       	ret
    f1d8:	5f 3f       	cpi	r21, 0xFF	; 255
    f1da:	ac f0       	brlt	.+42     	; 0xf206 <ldexp+0x66>
    f1dc:	98 3e       	cpi	r25, 0xE8	; 232
    f1de:	9c f0       	brlt	.+38     	; 0xf206 <ldexp+0x66>
    f1e0:	bb 27       	eor	r27, r27
    f1e2:	86 95       	lsr	r24
    f1e4:	77 95       	ror	r23
    f1e6:	67 95       	ror	r22
    f1e8:	b7 95       	ror	r27
    f1ea:	08 f4       	brcc	.+2      	; 0xf1ee <ldexp+0x4e>
    f1ec:	b1 60       	ori	r27, 0x01	; 1
    f1ee:	93 95       	inc	r25
    f1f0:	c1 f7       	brne	.-16     	; 0xf1e2 <ldexp+0x42>
    f1f2:	bb 0f       	add	r27, r27
    f1f4:	58 f7       	brcc	.-42     	; 0xf1cc <ldexp+0x2c>
    f1f6:	11 f4       	brne	.+4      	; 0xf1fc <ldexp+0x5c>
    f1f8:	60 ff       	sbrs	r22, 0
    f1fa:	e8 cf       	rjmp	.-48     	; 0xf1cc <ldexp+0x2c>
    f1fc:	6f 5f       	subi	r22, 0xFF	; 255
    f1fe:	7f 4f       	sbci	r23, 0xFF	; 255
    f200:	8f 4f       	sbci	r24, 0xFF	; 255
    f202:	9f 4f       	sbci	r25, 0xFF	; 255
    f204:	e3 cf       	rjmp	.-58     	; 0xf1cc <ldexp+0x2c>
    f206:	8f ce       	rjmp	.-738    	; 0xef26 <__fp_szero>
    f208:	0e f0       	brts	.+2      	; 0xf20c <ldexp+0x6c>
    f20a:	7d cf       	rjmp	.-262    	; 0xf106 <__fp_mpack>
    f20c:	0e ce       	rjmp	.-996    	; 0xee2a <__fp_nan>
    f20e:	68 94       	set
    f210:	06 ce       	rjmp	.-1012   	; 0xee1e <__fp_inf>

0000f212 <log>:
    f212:	6e de       	rcall	.-804    	; 0xeef0 <__fp_splitA>
    f214:	c8 f3       	brcs	.-14     	; 0xf208 <ldexp+0x68>
    f216:	99 23       	and	r25, r25
    f218:	d1 f3       	breq	.-12     	; 0xf20e <ldexp+0x6e>
    f21a:	c6 f3       	brts	.-16     	; 0xf20c <ldexp+0x6c>
    f21c:	df 93       	push	r29
    f21e:	cf 93       	push	r28
    f220:	1f 93       	push	r17
    f222:	0f 93       	push	r16
    f224:	ff 92       	push	r15
    f226:	c9 2f       	mov	r28, r25
    f228:	dd 27       	eor	r29, r29
    f22a:	88 23       	and	r24, r24
    f22c:	2a f0       	brmi	.+10     	; 0xf238 <log+0x26>
    f22e:	21 97       	sbiw	r28, 0x01	; 1
    f230:	66 0f       	add	r22, r22
    f232:	77 1f       	adc	r23, r23
    f234:	88 1f       	adc	r24, r24
    f236:	da f7       	brpl	.-10     	; 0xf22e <log+0x1c>
    f238:	20 e0       	ldi	r18, 0x00	; 0
    f23a:	30 e0       	ldi	r19, 0x00	; 0
    f23c:	40 e8       	ldi	r20, 0x80	; 128
    f23e:	5f eb       	ldi	r21, 0xBF	; 191
    f240:	9f e3       	ldi	r25, 0x3F	; 63
    f242:	88 39       	cpi	r24, 0x98	; 152
    f244:	20 f0       	brcs	.+8      	; 0xf24e <log+0x3c>
    f246:	80 3e       	cpi	r24, 0xE0	; 224
    f248:	30 f0       	brcs	.+12     	; 0xf256 <log+0x44>
    f24a:	21 96       	adiw	r28, 0x01	; 1
    f24c:	8f 77       	andi	r24, 0x7F	; 127
    f24e:	82 dc       	rcall	.-1788   	; 0xeb54 <__addsf3>
    f250:	ee e5       	ldi	r30, 0x5E	; 94
    f252:	f2 e0       	ldi	r31, 0x02	; 2
    f254:	03 c0       	rjmp	.+6      	; 0xf25c <log+0x4a>
    f256:	7e dc       	rcall	.-1796   	; 0xeb54 <__addsf3>
    f258:	eb e8       	ldi	r30, 0x8B	; 139
    f25a:	f2 e0       	ldi	r31, 0x02	; 2
    f25c:	62 df       	rcall	.-316    	; 0xf122 <__fp_powser>
    f25e:	8b 01       	movw	r16, r22
    f260:	be 01       	movw	r22, r28
    f262:	ec 01       	movw	r28, r24
    f264:	fb 2e       	mov	r15, r27
    f266:	6f 57       	subi	r22, 0x7F	; 127
    f268:	71 09       	sbc	r23, r1
    f26a:	75 95       	asr	r23
    f26c:	77 1f       	adc	r23, r23
    f26e:	88 0b       	sbc	r24, r24
    f270:	99 0b       	sbc	r25, r25
    f272:	76 dd       	rcall	.-1300   	; 0xed60 <__floatsisf>
    f274:	28 e1       	ldi	r18, 0x18	; 24
    f276:	32 e7       	ldi	r19, 0x72	; 114
    f278:	41 e3       	ldi	r20, 0x31	; 49
    f27a:	5f e3       	ldi	r21, 0x3F	; 63
    f27c:	6a de       	rcall	.-812    	; 0xef52 <__mulsf3x>
    f27e:	af 2d       	mov	r26, r15
    f280:	98 01       	movw	r18, r16
    f282:	ae 01       	movw	r20, r28
    f284:	ff 90       	pop	r15
    f286:	0f 91       	pop	r16
    f288:	1f 91       	pop	r17
    f28a:	cf 91       	pop	r28
    f28c:	df 91       	pop	r29
    f28e:	73 dc       	rcall	.-1818   	; 0xeb76 <__addsf3x>
    f290:	05 ce       	rjmp	.-1014   	; 0xee9c <__fp_round>

0000f292 <modf>:
    f292:	fa 01       	movw	r30, r20
    f294:	dc 01       	movw	r26, r24
    f296:	aa 0f       	add	r26, r26
    f298:	bb 1f       	adc	r27, r27
    f29a:	9b 01       	movw	r18, r22
    f29c:	ac 01       	movw	r20, r24
    f29e:	bf 57       	subi	r27, 0x7F	; 127
    f2a0:	28 f4       	brcc	.+10     	; 0xf2ac <modf+0x1a>
    f2a2:	22 27       	eor	r18, r18
    f2a4:	33 27       	eor	r19, r19
    f2a6:	44 27       	eor	r20, r20
    f2a8:	50 78       	andi	r21, 0x80	; 128
    f2aa:	1f c0       	rjmp	.+62     	; 0xf2ea <modf+0x58>
    f2ac:	b7 51       	subi	r27, 0x17	; 23
    f2ae:	88 f4       	brcc	.+34     	; 0xf2d2 <modf+0x40>
    f2b0:	ab 2f       	mov	r26, r27
    f2b2:	00 24       	eor	r0, r0
    f2b4:	46 95       	lsr	r20
    f2b6:	37 95       	ror	r19
    f2b8:	27 95       	ror	r18
    f2ba:	01 1c       	adc	r0, r1
    f2bc:	a3 95       	inc	r26
    f2be:	d2 f3       	brmi	.-12     	; 0xf2b4 <modf+0x22>
    f2c0:	00 20       	and	r0, r0
    f2c2:	69 f0       	breq	.+26     	; 0xf2de <modf+0x4c>
    f2c4:	22 0f       	add	r18, r18
    f2c6:	33 1f       	adc	r19, r19
    f2c8:	44 1f       	adc	r20, r20
    f2ca:	b3 95       	inc	r27
    f2cc:	da f3       	brmi	.-10     	; 0xf2c4 <modf+0x32>
    f2ce:	0d d0       	rcall	.+26     	; 0xf2ea <modf+0x58>
    f2d0:	40 cc       	rjmp	.-1920   	; 0xeb52 <__subsf3>
    f2d2:	61 30       	cpi	r22, 0x01	; 1
    f2d4:	71 05       	cpc	r23, r1
    f2d6:	a0 e8       	ldi	r26, 0x80	; 128
    f2d8:	8a 07       	cpc	r24, r26
    f2da:	b9 46       	sbci	r27, 0x69	; 105
    f2dc:	30 f4       	brcc	.+12     	; 0xf2ea <modf+0x58>
    f2de:	9b 01       	movw	r18, r22
    f2e0:	ac 01       	movw	r20, r24
    f2e2:	66 27       	eor	r22, r22
    f2e4:	77 27       	eor	r23, r23
    f2e6:	88 27       	eor	r24, r24
    f2e8:	90 78       	andi	r25, 0x80	; 128
    f2ea:	30 96       	adiw	r30, 0x00	; 0
    f2ec:	21 f0       	breq	.+8      	; 0xf2f6 <modf+0x64>
    f2ee:	20 83       	st	Z, r18
    f2f0:	31 83       	std	Z+1, r19	; 0x01
    f2f2:	42 83       	std	Z+2, r20	; 0x02
    f2f4:	53 83       	std	Z+3, r21	; 0x03
    f2f6:	08 95       	ret

0000f2f8 <__mulsi3>:
    f2f8:	db 01       	movw	r26, r22
    f2fa:	8f 93       	push	r24
    f2fc:	9f 93       	push	r25
    f2fe:	93 d0       	rcall	.+294    	; 0xf426 <__muluhisi3>
    f300:	bf 91       	pop	r27
    f302:	af 91       	pop	r26
    f304:	a2 9f       	mul	r26, r18
    f306:	80 0d       	add	r24, r0
    f308:	91 1d       	adc	r25, r1
    f30a:	a3 9f       	mul	r26, r19
    f30c:	90 0d       	add	r25, r0
    f30e:	b2 9f       	mul	r27, r18
    f310:	90 0d       	add	r25, r0
    f312:	11 24       	eor	r1, r1
    f314:	08 95       	ret

0000f316 <__udivmodhi4>:
    f316:	aa 1b       	sub	r26, r26
    f318:	bb 1b       	sub	r27, r27
    f31a:	51 e1       	ldi	r21, 0x11	; 17
    f31c:	07 c0       	rjmp	.+14     	; 0xf32c <__udivmodhi4_ep>

0000f31e <__udivmodhi4_loop>:
    f31e:	aa 1f       	adc	r26, r26
    f320:	bb 1f       	adc	r27, r27
    f322:	a6 17       	cp	r26, r22
    f324:	b7 07       	cpc	r27, r23
    f326:	10 f0       	brcs	.+4      	; 0xf32c <__udivmodhi4_ep>
    f328:	a6 1b       	sub	r26, r22
    f32a:	b7 0b       	sbc	r27, r23

0000f32c <__udivmodhi4_ep>:
    f32c:	88 1f       	adc	r24, r24
    f32e:	99 1f       	adc	r25, r25
    f330:	5a 95       	dec	r21
    f332:	a9 f7       	brne	.-22     	; 0xf31e <__udivmodhi4_loop>
    f334:	80 95       	com	r24
    f336:	90 95       	com	r25
    f338:	bc 01       	movw	r22, r24
    f33a:	cd 01       	movw	r24, r26
    f33c:	08 95       	ret

0000f33e <__divmodhi4>:
    f33e:	97 fb       	bst	r25, 7
    f340:	07 2e       	mov	r0, r23
    f342:	16 f4       	brtc	.+4      	; 0xf348 <__divmodhi4+0xa>
    f344:	00 94       	com	r0
    f346:	06 d0       	rcall	.+12     	; 0xf354 <__divmodhi4_neg1>
    f348:	77 fd       	sbrc	r23, 7
    f34a:	08 d0       	rcall	.+16     	; 0xf35c <__divmodhi4_neg2>
    f34c:	e4 df       	rcall	.-56     	; 0xf316 <__udivmodhi4>
    f34e:	07 fc       	sbrc	r0, 7
    f350:	05 d0       	rcall	.+10     	; 0xf35c <__divmodhi4_neg2>
    f352:	3e f4       	brtc	.+14     	; 0xf362 <__divmodhi4_exit>

0000f354 <__divmodhi4_neg1>:
    f354:	90 95       	com	r25
    f356:	81 95       	neg	r24
    f358:	9f 4f       	sbci	r25, 0xFF	; 255
    f35a:	08 95       	ret

0000f35c <__divmodhi4_neg2>:
    f35c:	70 95       	com	r23
    f35e:	61 95       	neg	r22
    f360:	7f 4f       	sbci	r23, 0xFF	; 255

0000f362 <__divmodhi4_exit>:
    f362:	08 95       	ret

0000f364 <__udivmodsi4>:
    f364:	a1 e2       	ldi	r26, 0x21	; 33
    f366:	1a 2e       	mov	r1, r26
    f368:	aa 1b       	sub	r26, r26
    f36a:	bb 1b       	sub	r27, r27
    f36c:	fd 01       	movw	r30, r26
    f36e:	0d c0       	rjmp	.+26     	; 0xf38a <__udivmodsi4_ep>

0000f370 <__udivmodsi4_loop>:
    f370:	aa 1f       	adc	r26, r26
    f372:	bb 1f       	adc	r27, r27
    f374:	ee 1f       	adc	r30, r30
    f376:	ff 1f       	adc	r31, r31
    f378:	a2 17       	cp	r26, r18
    f37a:	b3 07       	cpc	r27, r19
    f37c:	e4 07       	cpc	r30, r20
    f37e:	f5 07       	cpc	r31, r21
    f380:	20 f0       	brcs	.+8      	; 0xf38a <__udivmodsi4_ep>
    f382:	a2 1b       	sub	r26, r18
    f384:	b3 0b       	sbc	r27, r19
    f386:	e4 0b       	sbc	r30, r20
    f388:	f5 0b       	sbc	r31, r21

0000f38a <__udivmodsi4_ep>:
    f38a:	66 1f       	adc	r22, r22
    f38c:	77 1f       	adc	r23, r23
    f38e:	88 1f       	adc	r24, r24
    f390:	99 1f       	adc	r25, r25
    f392:	1a 94       	dec	r1
    f394:	69 f7       	brne	.-38     	; 0xf370 <__udivmodsi4_loop>
    f396:	60 95       	com	r22
    f398:	70 95       	com	r23
    f39a:	80 95       	com	r24
    f39c:	90 95       	com	r25
    f39e:	9b 01       	movw	r18, r22
    f3a0:	ac 01       	movw	r20, r24
    f3a2:	bd 01       	movw	r22, r26
    f3a4:	cf 01       	movw	r24, r30
    f3a6:	08 95       	ret

0000f3a8 <__divmodsi4>:
    f3a8:	05 2e       	mov	r0, r21
    f3aa:	97 fb       	bst	r25, 7
    f3ac:	16 f4       	brtc	.+4      	; 0xf3b2 <__divmodsi4+0xa>
    f3ae:	00 94       	com	r0
    f3b0:	0f d0       	rcall	.+30     	; 0xf3d0 <__negsi2>
    f3b2:	57 fd       	sbrc	r21, 7
    f3b4:	05 d0       	rcall	.+10     	; 0xf3c0 <__divmodsi4_neg2>
    f3b6:	d6 df       	rcall	.-84     	; 0xf364 <__udivmodsi4>
    f3b8:	07 fc       	sbrc	r0, 7
    f3ba:	02 d0       	rcall	.+4      	; 0xf3c0 <__divmodsi4_neg2>
    f3bc:	46 f4       	brtc	.+16     	; 0xf3ce <__divmodsi4_exit>
    f3be:	08 c0       	rjmp	.+16     	; 0xf3d0 <__negsi2>

0000f3c0 <__divmodsi4_neg2>:
    f3c0:	50 95       	com	r21
    f3c2:	40 95       	com	r20
    f3c4:	30 95       	com	r19
    f3c6:	21 95       	neg	r18
    f3c8:	3f 4f       	sbci	r19, 0xFF	; 255
    f3ca:	4f 4f       	sbci	r20, 0xFF	; 255
    f3cc:	5f 4f       	sbci	r21, 0xFF	; 255

0000f3ce <__divmodsi4_exit>:
    f3ce:	08 95       	ret

0000f3d0 <__negsi2>:
    f3d0:	90 95       	com	r25
    f3d2:	80 95       	com	r24
    f3d4:	70 95       	com	r23
    f3d6:	61 95       	neg	r22
    f3d8:	7f 4f       	sbci	r23, 0xFF	; 255
    f3da:	8f 4f       	sbci	r24, 0xFF	; 255
    f3dc:	9f 4f       	sbci	r25, 0xFF	; 255
    f3de:	08 95       	ret

0000f3e0 <__tablejump2__>:
    f3e0:	ee 0f       	add	r30, r30
    f3e2:	ff 1f       	adc	r31, r31
    f3e4:	88 1f       	adc	r24, r24
    f3e6:	8b bf       	out	0x3b, r24	; 59
    f3e8:	07 90       	elpm	r0, Z+
    f3ea:	f6 91       	elpm	r31, Z
    f3ec:	e0 2d       	mov	r30, r0
    f3ee:	19 94       	eijmp

0000f3f0 <__mulhisi3>:
    f3f0:	05 d0       	rcall	.+10     	; 0xf3fc <__umulhisi3>
    f3f2:	33 23       	and	r19, r19
    f3f4:	12 f4       	brpl	.+4      	; 0xf3fa <__mulhisi3+0xa>
    f3f6:	8a 1b       	sub	r24, r26
    f3f8:	9b 0b       	sbc	r25, r27
    f3fa:	10 c0       	rjmp	.+32     	; 0xf41c <__usmulhisi3_tail>

0000f3fc <__umulhisi3>:
    f3fc:	a2 9f       	mul	r26, r18
    f3fe:	b0 01       	movw	r22, r0
    f400:	b3 9f       	mul	r27, r19
    f402:	c0 01       	movw	r24, r0
    f404:	a3 9f       	mul	r26, r19
    f406:	70 0d       	add	r23, r0
    f408:	81 1d       	adc	r24, r1
    f40a:	11 24       	eor	r1, r1
    f40c:	91 1d       	adc	r25, r1
    f40e:	b2 9f       	mul	r27, r18
    f410:	70 0d       	add	r23, r0
    f412:	81 1d       	adc	r24, r1
    f414:	11 24       	eor	r1, r1
    f416:	91 1d       	adc	r25, r1
    f418:	08 95       	ret

0000f41a <__usmulhisi3>:
    f41a:	f0 df       	rcall	.-32     	; 0xf3fc <__umulhisi3>

0000f41c <__usmulhisi3_tail>:
    f41c:	b7 ff       	sbrs	r27, 7
    f41e:	08 95       	ret
    f420:	82 1b       	sub	r24, r18
    f422:	93 0b       	sbc	r25, r19
    f424:	08 95       	ret

0000f426 <__muluhisi3>:
    f426:	ea df       	rcall	.-44     	; 0xf3fc <__umulhisi3>
    f428:	a5 9f       	mul	r26, r21
    f42a:	90 0d       	add	r25, r0
    f42c:	b4 9f       	mul	r27, r20
    f42e:	90 0d       	add	r25, r0
    f430:	a4 9f       	mul	r26, r20
    f432:	80 0d       	add	r24, r0
    f434:	91 1d       	adc	r25, r1
    f436:	11 24       	eor	r1, r1
    f438:	08 95       	ret

0000f43a <__muldi3>:
    f43a:	df 93       	push	r29
    f43c:	cf 93       	push	r28
    f43e:	1f 93       	push	r17
    f440:	0f 93       	push	r16
    f442:	9a 9d       	mul	r25, r10
    f444:	f0 2d       	mov	r31, r0
    f446:	21 9f       	mul	r18, r17
    f448:	f0 0d       	add	r31, r0
    f44a:	8b 9d       	mul	r24, r11
    f44c:	f0 0d       	add	r31, r0
    f44e:	8a 9d       	mul	r24, r10
    f450:	e0 2d       	mov	r30, r0
    f452:	f1 0d       	add	r31, r1
    f454:	03 9f       	mul	r16, r19
    f456:	f0 0d       	add	r31, r0
    f458:	02 9f       	mul	r16, r18
    f45a:	e0 0d       	add	r30, r0
    f45c:	f1 1d       	adc	r31, r1
    f45e:	4e 9d       	mul	r20, r14
    f460:	e0 0d       	add	r30, r0
    f462:	f1 1d       	adc	r31, r1
    f464:	5e 9d       	mul	r21, r14
    f466:	f0 0d       	add	r31, r0
    f468:	4f 9d       	mul	r20, r15
    f46a:	f0 0d       	add	r31, r0
    f46c:	7f 93       	push	r23
    f46e:	6f 93       	push	r22
    f470:	bf 92       	push	r11
    f472:	af 92       	push	r10
    f474:	5f 93       	push	r21
    f476:	4f 93       	push	r20
    f478:	d5 01       	movw	r26, r10
    f47a:	c0 df       	rcall	.-128    	; 0xf3fc <__umulhisi3>
    f47c:	8b 01       	movw	r16, r22
    f47e:	ac 01       	movw	r20, r24
    f480:	d7 01       	movw	r26, r14
    f482:	bc df       	rcall	.-136    	; 0xf3fc <__umulhisi3>
    f484:	eb 01       	movw	r28, r22
    f486:	e8 0f       	add	r30, r24
    f488:	f9 1f       	adc	r31, r25
    f48a:	d6 01       	movw	r26, r12
    f48c:	1f d0       	rcall	.+62     	; 0xf4cc <__muldi3_6>
    f48e:	2f 91       	pop	r18
    f490:	3f 91       	pop	r19
    f492:	d6 01       	movw	r26, r12
    f494:	b3 df       	rcall	.-154    	; 0xf3fc <__umulhisi3>
    f496:	c6 0f       	add	r28, r22
    f498:	d7 1f       	adc	r29, r23
    f49a:	e8 1f       	adc	r30, r24
    f49c:	f9 1f       	adc	r31, r25
    f49e:	af 91       	pop	r26
    f4a0:	bf 91       	pop	r27
    f4a2:	14 d0       	rcall	.+40     	; 0xf4cc <__muldi3_6>
    f4a4:	2f 91       	pop	r18
    f4a6:	3f 91       	pop	r19
    f4a8:	a9 df       	rcall	.-174    	; 0xf3fc <__umulhisi3>
    f4aa:	c6 0f       	add	r28, r22
    f4ac:	d7 1f       	adc	r29, r23
    f4ae:	e8 1f       	adc	r30, r24
    f4b0:	f9 1f       	adc	r31, r25
    f4b2:	d6 01       	movw	r26, r12
    f4b4:	a3 df       	rcall	.-186    	; 0xf3fc <__umulhisi3>
    f4b6:	e6 0f       	add	r30, r22
    f4b8:	f7 1f       	adc	r31, r23
    f4ba:	98 01       	movw	r18, r16
    f4bc:	be 01       	movw	r22, r28
    f4be:	cf 01       	movw	r24, r30
    f4c0:	11 24       	eor	r1, r1
    f4c2:	0f 91       	pop	r16
    f4c4:	1f 91       	pop	r17
    f4c6:	cf 91       	pop	r28
    f4c8:	df 91       	pop	r29
    f4ca:	08 95       	ret

0000f4cc <__muldi3_6>:
    f4cc:	97 df       	rcall	.-210    	; 0xf3fc <__umulhisi3>
    f4ce:	46 0f       	add	r20, r22
    f4d0:	57 1f       	adc	r21, r23
    f4d2:	c8 1f       	adc	r28, r24
    f4d4:	d9 1f       	adc	r29, r25
    f4d6:	08 f4       	brcc	.+2      	; 0xf4da <__muldi3_6+0xe>
    f4d8:	31 96       	adiw	r30, 0x01	; 1
    f4da:	08 95       	ret

0000f4dc <__moddi3>:
    f4dc:	68 94       	set
    f4de:	01 c0       	rjmp	.+2      	; 0xf4e2 <__divdi3_moddi3>

0000f4e0 <__divdi3>:
    f4e0:	e8 94       	clt

0000f4e2 <__divdi3_moddi3>:
    f4e2:	f9 2f       	mov	r31, r25
    f4e4:	f1 2b       	or	r31, r17
    f4e6:	0a f0       	brmi	.+2      	; 0xf4ea <__divdi3_moddi3+0x8>
    f4e8:	27 c0       	rjmp	.+78     	; 0xf538 <__udivdi3_umoddi3>
    f4ea:	a0 e0       	ldi	r26, 0x00	; 0
    f4ec:	b0 e0       	ldi	r27, 0x00	; 0
    f4ee:	ea e7       	ldi	r30, 0x7A	; 122
    f4f0:	fa e7       	ldi	r31, 0x7A	; 122
    f4f2:	93 c0       	rjmp	.+294    	; 0xf61a <__prologue_saves__+0xc>
    f4f4:	09 2e       	mov	r0, r25
    f4f6:	05 94       	asr	r0
    f4f8:	1a f4       	brpl	.+6      	; 0xf500 <__divdi3_moddi3+0x1e>
    f4fa:	79 d0       	rcall	.+242    	; 0xf5ee <__negdi2>
    f4fc:	11 23       	and	r17, r17
    f4fe:	92 f4       	brpl	.+36     	; 0xf524 <__divdi3_moddi3+0x42>
    f500:	f0 e8       	ldi	r31, 0x80	; 128
    f502:	0f 26       	eor	r0, r31
    f504:	ff ef       	ldi	r31, 0xFF	; 255
    f506:	e0 94       	com	r14
    f508:	f0 94       	com	r15
    f50a:	00 95       	com	r16
    f50c:	10 95       	com	r17
    f50e:	b0 94       	com	r11
    f510:	c0 94       	com	r12
    f512:	d0 94       	com	r13
    f514:	a1 94       	neg	r10
    f516:	bf 0a       	sbc	r11, r31
    f518:	cf 0a       	sbc	r12, r31
    f51a:	df 0a       	sbc	r13, r31
    f51c:	ef 0a       	sbc	r14, r31
    f51e:	ff 0a       	sbc	r15, r31
    f520:	0f 0b       	sbc	r16, r31
    f522:	1f 0b       	sbc	r17, r31
    f524:	13 d0       	rcall	.+38     	; 0xf54c <__udivmod64>
    f526:	07 fc       	sbrc	r0, 7
    f528:	62 d0       	rcall	.+196    	; 0xf5ee <__negdi2>
    f52a:	cd b7       	in	r28, 0x3d	; 61
    f52c:	de b7       	in	r29, 0x3e	; 62
    f52e:	ec e0       	ldi	r30, 0x0C	; 12
    f530:	8d c0       	rjmp	.+282    	; 0xf64c <__epilogue_restores__+0xc>

0000f532 <__umoddi3>:
    f532:	68 94       	set
    f534:	01 c0       	rjmp	.+2      	; 0xf538 <__udivdi3_umoddi3>

0000f536 <__udivdi3>:
    f536:	e8 94       	clt

0000f538 <__udivdi3_umoddi3>:
    f538:	8f 92       	push	r8
    f53a:	9f 92       	push	r9
    f53c:	cf 93       	push	r28
    f53e:	df 93       	push	r29
    f540:	05 d0       	rcall	.+10     	; 0xf54c <__udivmod64>
    f542:	df 91       	pop	r29
    f544:	cf 91       	pop	r28
    f546:	9f 90       	pop	r9
    f548:	8f 90       	pop	r8
    f54a:	08 95       	ret

0000f54c <__udivmod64>:
    f54c:	88 24       	eor	r8, r8
    f54e:	99 24       	eor	r9, r9
    f550:	f4 01       	movw	r30, r8
    f552:	e4 01       	movw	r28, r8
    f554:	b0 e4       	ldi	r27, 0x40	; 64
    f556:	9f 93       	push	r25
    f558:	aa 27       	eor	r26, r26
    f55a:	9a 15       	cp	r25, r10
    f55c:	8b 04       	cpc	r8, r11
    f55e:	9c 04       	cpc	r9, r12
    f560:	ed 05       	cpc	r30, r13
    f562:	fe 05       	cpc	r31, r14
    f564:	cf 05       	cpc	r28, r15
    f566:	d0 07       	cpc	r29, r16
    f568:	a1 07       	cpc	r26, r17
    f56a:	98 f4       	brcc	.+38     	; 0xf592 <__udivmod64+0x46>
    f56c:	ad 2f       	mov	r26, r29
    f56e:	dc 2f       	mov	r29, r28
    f570:	cf 2f       	mov	r28, r31
    f572:	fe 2f       	mov	r31, r30
    f574:	e9 2d       	mov	r30, r9
    f576:	98 2c       	mov	r9, r8
    f578:	89 2e       	mov	r8, r25
    f57a:	98 2f       	mov	r25, r24
    f57c:	87 2f       	mov	r24, r23
    f57e:	76 2f       	mov	r23, r22
    f580:	65 2f       	mov	r22, r21
    f582:	54 2f       	mov	r21, r20
    f584:	43 2f       	mov	r20, r19
    f586:	32 2f       	mov	r19, r18
    f588:	22 27       	eor	r18, r18
    f58a:	b8 50       	subi	r27, 0x08	; 8
    f58c:	31 f7       	brne	.-52     	; 0xf55a <__udivmod64+0xe>
    f58e:	bf 91       	pop	r27
    f590:	27 c0       	rjmp	.+78     	; 0xf5e0 <__udivmod64+0x94>
    f592:	1b 2e       	mov	r1, r27
    f594:	bf 91       	pop	r27
    f596:	bb 27       	eor	r27, r27
    f598:	22 0f       	add	r18, r18
    f59a:	33 1f       	adc	r19, r19
    f59c:	44 1f       	adc	r20, r20
    f59e:	55 1f       	adc	r21, r21
    f5a0:	66 1f       	adc	r22, r22
    f5a2:	77 1f       	adc	r23, r23
    f5a4:	88 1f       	adc	r24, r24
    f5a6:	99 1f       	adc	r25, r25
    f5a8:	88 1c       	adc	r8, r8
    f5aa:	99 1c       	adc	r9, r9
    f5ac:	ee 1f       	adc	r30, r30
    f5ae:	ff 1f       	adc	r31, r31
    f5b0:	cc 1f       	adc	r28, r28
    f5b2:	dd 1f       	adc	r29, r29
    f5b4:	aa 1f       	adc	r26, r26
    f5b6:	bb 1f       	adc	r27, r27
    f5b8:	8a 14       	cp	r8, r10
    f5ba:	9b 04       	cpc	r9, r11
    f5bc:	ec 05       	cpc	r30, r12
    f5be:	fd 05       	cpc	r31, r13
    f5c0:	ce 05       	cpc	r28, r14
    f5c2:	df 05       	cpc	r29, r15
    f5c4:	a0 07       	cpc	r26, r16
    f5c6:	b1 07       	cpc	r27, r17
    f5c8:	48 f0       	brcs	.+18     	; 0xf5dc <__udivmod64+0x90>
    f5ca:	8a 18       	sub	r8, r10
    f5cc:	9b 08       	sbc	r9, r11
    f5ce:	ec 09       	sbc	r30, r12
    f5d0:	fd 09       	sbc	r31, r13
    f5d2:	ce 09       	sbc	r28, r14
    f5d4:	df 09       	sbc	r29, r15
    f5d6:	a0 0b       	sbc	r26, r16
    f5d8:	b1 0b       	sbc	r27, r17
    f5da:	21 60       	ori	r18, 0x01	; 1
    f5dc:	1a 94       	dec	r1
    f5de:	e1 f6       	brne	.-72     	; 0xf598 <__udivmod64+0x4c>
    f5e0:	2e f4       	brtc	.+10     	; 0xf5ec <__udivmod64+0xa0>
    f5e2:	94 01       	movw	r18, r8
    f5e4:	af 01       	movw	r20, r30
    f5e6:	be 01       	movw	r22, r28
    f5e8:	cd 01       	movw	r24, r26
    f5ea:	00 0c       	add	r0, r0
    f5ec:	08 95       	ret

0000f5ee <__negdi2>:
    f5ee:	60 95       	com	r22
    f5f0:	70 95       	com	r23
    f5f2:	80 95       	com	r24
    f5f4:	90 95       	com	r25
    f5f6:	30 95       	com	r19
    f5f8:	40 95       	com	r20
    f5fa:	50 95       	com	r21
    f5fc:	21 95       	neg	r18
    f5fe:	3f 4f       	sbci	r19, 0xFF	; 255
    f600:	4f 4f       	sbci	r20, 0xFF	; 255
    f602:	5f 4f       	sbci	r21, 0xFF	; 255
    f604:	6f 4f       	sbci	r22, 0xFF	; 255
    f606:	7f 4f       	sbci	r23, 0xFF	; 255
    f608:	8f 4f       	sbci	r24, 0xFF	; 255
    f60a:	9f 4f       	sbci	r25, 0xFF	; 255
    f60c:	08 95       	ret

0000f60e <__prologue_saves__>:
    f60e:	2f 92       	push	r2
    f610:	3f 92       	push	r3
    f612:	4f 92       	push	r4
    f614:	5f 92       	push	r5
    f616:	6f 92       	push	r6
    f618:	7f 92       	push	r7
    f61a:	8f 92       	push	r8
    f61c:	9f 92       	push	r9
    f61e:	af 92       	push	r10
    f620:	bf 92       	push	r11
    f622:	cf 92       	push	r12
    f624:	df 92       	push	r13
    f626:	ef 92       	push	r14
    f628:	ff 92       	push	r15
    f62a:	0f 93       	push	r16
    f62c:	1f 93       	push	r17
    f62e:	cf 93       	push	r28
    f630:	df 93       	push	r29
    f632:	cd b7       	in	r28, 0x3d	; 61
    f634:	de b7       	in	r29, 0x3e	; 62
    f636:	ca 1b       	sub	r28, r26
    f638:	db 0b       	sbc	r29, r27
    f63a:	cd bf       	out	0x3d, r28	; 61
    f63c:	de bf       	out	0x3e, r29	; 62
    f63e:	19 94       	eijmp

0000f640 <__epilogue_restores__>:
    f640:	2a 88       	ldd	r2, Y+18	; 0x12
    f642:	39 88       	ldd	r3, Y+17	; 0x11
    f644:	48 88       	ldd	r4, Y+16	; 0x10
    f646:	5f 84       	ldd	r5, Y+15	; 0x0f
    f648:	6e 84       	ldd	r6, Y+14	; 0x0e
    f64a:	7d 84       	ldd	r7, Y+13	; 0x0d
    f64c:	8c 84       	ldd	r8, Y+12	; 0x0c
    f64e:	9b 84       	ldd	r9, Y+11	; 0x0b
    f650:	aa 84       	ldd	r10, Y+10	; 0x0a
    f652:	b9 84       	ldd	r11, Y+9	; 0x09
    f654:	c8 84       	ldd	r12, Y+8	; 0x08
    f656:	df 80       	ldd	r13, Y+7	; 0x07
    f658:	ee 80       	ldd	r14, Y+6	; 0x06
    f65a:	fd 80       	ldd	r15, Y+5	; 0x05
    f65c:	0c 81       	ldd	r16, Y+4	; 0x04
    f65e:	1b 81       	ldd	r17, Y+3	; 0x03
    f660:	aa 81       	ldd	r26, Y+2	; 0x02
    f662:	b9 81       	ldd	r27, Y+1	; 0x01
    f664:	ce 0f       	add	r28, r30
    f666:	d1 1d       	adc	r29, r1
    f668:	cd bf       	out	0x3d, r28	; 61
    f66a:	de bf       	out	0x3e, r29	; 62
    f66c:	ed 01       	movw	r28, r26
    f66e:	08 95       	ret

0000f670 <__ashldi3>:
    f670:	0f 93       	push	r16
    f672:	08 30       	cpi	r16, 0x08	; 8
    f674:	90 f0       	brcs	.+36     	; 0xf69a <__ashldi3+0x2a>
    f676:	98 2f       	mov	r25, r24
    f678:	87 2f       	mov	r24, r23
    f67a:	76 2f       	mov	r23, r22
    f67c:	65 2f       	mov	r22, r21
    f67e:	54 2f       	mov	r21, r20
    f680:	43 2f       	mov	r20, r19
    f682:	32 2f       	mov	r19, r18
    f684:	22 27       	eor	r18, r18
    f686:	08 50       	subi	r16, 0x08	; 8
    f688:	f4 cf       	rjmp	.-24     	; 0xf672 <__ashldi3+0x2>
    f68a:	22 0f       	add	r18, r18
    f68c:	33 1f       	adc	r19, r19
    f68e:	44 1f       	adc	r20, r20
    f690:	55 1f       	adc	r21, r21
    f692:	66 1f       	adc	r22, r22
    f694:	77 1f       	adc	r23, r23
    f696:	88 1f       	adc	r24, r24
    f698:	99 1f       	adc	r25, r25
    f69a:	0a 95       	dec	r16
    f69c:	b2 f7       	brpl	.-20     	; 0xf68a <__ashldi3+0x1a>
    f69e:	0f 91       	pop	r16
    f6a0:	08 95       	ret

0000f6a2 <__ashrdi3>:
    f6a2:	97 fb       	bst	r25, 7
    f6a4:	10 f8       	bld	r1, 0

0000f6a6 <__lshrdi3>:
    f6a6:	16 94       	lsr	r1
    f6a8:	00 08       	sbc	r0, r0
    f6aa:	0f 93       	push	r16
    f6ac:	08 30       	cpi	r16, 0x08	; 8
    f6ae:	98 f0       	brcs	.+38     	; 0xf6d6 <__lshrdi3+0x30>
    f6b0:	08 50       	subi	r16, 0x08	; 8
    f6b2:	23 2f       	mov	r18, r19
    f6b4:	34 2f       	mov	r19, r20
    f6b6:	45 2f       	mov	r20, r21
    f6b8:	56 2f       	mov	r21, r22
    f6ba:	67 2f       	mov	r22, r23
    f6bc:	78 2f       	mov	r23, r24
    f6be:	89 2f       	mov	r24, r25
    f6c0:	90 2d       	mov	r25, r0
    f6c2:	f4 cf       	rjmp	.-24     	; 0xf6ac <__lshrdi3+0x6>
    f6c4:	05 94       	asr	r0
    f6c6:	97 95       	ror	r25
    f6c8:	87 95       	ror	r24
    f6ca:	77 95       	ror	r23
    f6cc:	67 95       	ror	r22
    f6ce:	57 95       	ror	r21
    f6d0:	47 95       	ror	r20
    f6d2:	37 95       	ror	r19
    f6d4:	27 95       	ror	r18
    f6d6:	0a 95       	dec	r16
    f6d8:	aa f7       	brpl	.-22     	; 0xf6c4 <__lshrdi3+0x1e>
    f6da:	0f 91       	pop	r16
    f6dc:	08 95       	ret

0000f6de <__adddi3>:
    f6de:	2a 0d       	add	r18, r10
    f6e0:	3b 1d       	adc	r19, r11
    f6e2:	4c 1d       	adc	r20, r12
    f6e4:	5d 1d       	adc	r21, r13
    f6e6:	6e 1d       	adc	r22, r14
    f6e8:	7f 1d       	adc	r23, r15
    f6ea:	80 1f       	adc	r24, r16
    f6ec:	91 1f       	adc	r25, r17
    f6ee:	08 95       	ret

0000f6f0 <__subdi3>:
    f6f0:	2a 19       	sub	r18, r10
    f6f2:	3b 09       	sbc	r19, r11
    f6f4:	4c 09       	sbc	r20, r12
    f6f6:	5d 09       	sbc	r21, r13
    f6f8:	6e 09       	sbc	r22, r14
    f6fa:	7f 09       	sbc	r23, r15
    f6fc:	80 0b       	sbc	r24, r16
    f6fe:	91 0b       	sbc	r25, r17
    f700:	08 95       	ret

0000f702 <atof>:
    f702:	66 27       	eor	r22, r22
    f704:	77 27       	eor	r23, r23
    f706:	2e c4       	rjmp	.+2140   	; 0xff64 <strtod>

0000f708 <atoi>:
    f708:	fc 01       	movw	r30, r24
    f70a:	88 27       	eor	r24, r24
    f70c:	99 27       	eor	r25, r25
    f70e:	e8 94       	clt
    f710:	21 91       	ld	r18, Z+
    f712:	20 32       	cpi	r18, 0x20	; 32
    f714:	e9 f3       	breq	.-6      	; 0xf710 <atoi+0x8>
    f716:	29 30       	cpi	r18, 0x09	; 9
    f718:	10 f0       	brcs	.+4      	; 0xf71e <atoi+0x16>
    f71a:	2e 30       	cpi	r18, 0x0E	; 14
    f71c:	c8 f3       	brcs	.-14     	; 0xf710 <atoi+0x8>
    f71e:	2b 32       	cpi	r18, 0x2B	; 43
    f720:	39 f0       	breq	.+14     	; 0xf730 <atoi+0x28>
    f722:	2d 32       	cpi	r18, 0x2D	; 45
    f724:	31 f4       	brne	.+12     	; 0xf732 <atoi+0x2a>
    f726:	68 94       	set
    f728:	03 c0       	rjmp	.+6      	; 0xf730 <atoi+0x28>
    f72a:	95 d1       	rcall	.+810    	; 0xfa56 <__mulhi_const_10>
    f72c:	82 0f       	add	r24, r18
    f72e:	91 1d       	adc	r25, r1
    f730:	21 91       	ld	r18, Z+
    f732:	20 53       	subi	r18, 0x30	; 48
    f734:	2a 30       	cpi	r18, 0x0A	; 10
    f736:	c8 f3       	brcs	.-14     	; 0xf72a <atoi+0x22>
    f738:	1e f4       	brtc	.+6      	; 0xf740 <atoi+0x38>
    f73a:	90 95       	com	r25
    f73c:	81 95       	neg	r24
    f73e:	9f 4f       	sbci	r25, 0xFF	; 255
    f740:	08 95       	ret

0000f742 <atol>:
    f742:	1f 93       	push	r17
    f744:	fc 01       	movw	r30, r24
    f746:	99 27       	eor	r25, r25
    f748:	88 27       	eor	r24, r24
    f74a:	bc 01       	movw	r22, r24
    f74c:	e8 94       	clt
    f74e:	11 91       	ld	r17, Z+
    f750:	10 32       	cpi	r17, 0x20	; 32
    f752:	e9 f3       	breq	.-6      	; 0xf74e <atol+0xc>
    f754:	19 30       	cpi	r17, 0x09	; 9
    f756:	10 f0       	brcs	.+4      	; 0xf75c <atol+0x1a>
    f758:	1e 30       	cpi	r17, 0x0E	; 14
    f75a:	c8 f3       	brcs	.-14     	; 0xf74e <atol+0xc>
    f75c:	1b 32       	cpi	r17, 0x2B	; 43
    f75e:	49 f0       	breq	.+18     	; 0xf772 <atol+0x30>
    f760:	1d 32       	cpi	r17, 0x2D	; 45
    f762:	41 f4       	brne	.+16     	; 0xf774 <atol+0x32>
    f764:	68 94       	set
    f766:	05 c0       	rjmp	.+10     	; 0xf772 <atol+0x30>
    f768:	61 d1       	rcall	.+706    	; 0xfa2c <__mulsi_const_10>
    f76a:	61 0f       	add	r22, r17
    f76c:	71 1d       	adc	r23, r1
    f76e:	81 1d       	adc	r24, r1
    f770:	91 1d       	adc	r25, r1
    f772:	11 91       	ld	r17, Z+
    f774:	10 53       	subi	r17, 0x30	; 48
    f776:	1a 30       	cpi	r17, 0x0A	; 10
    f778:	b8 f3       	brcs	.-18     	; 0xf768 <atol+0x26>
    f77a:	3e f4       	brtc	.+14     	; 0xf78a <atol+0x48>
    f77c:	90 95       	com	r25
    f77e:	80 95       	com	r24
    f780:	70 95       	com	r23
    f782:	61 95       	neg	r22
    f784:	7f 4f       	sbci	r23, 0xFF	; 255
    f786:	8f 4f       	sbci	r24, 0xFF	; 255
    f788:	9f 4f       	sbci	r25, 0xFF	; 255
    f78a:	1f 91       	pop	r17
    f78c:	08 95       	ret

0000f78e <__ftoa_engine>:
    f78e:	28 30       	cpi	r18, 0x08	; 8
    f790:	08 f0       	brcs	.+2      	; 0xf794 <__ftoa_engine+0x6>
    f792:	27 e0       	ldi	r18, 0x07	; 7
    f794:	33 27       	eor	r19, r19
    f796:	da 01       	movw	r26, r20
    f798:	99 0f       	add	r25, r25
    f79a:	31 1d       	adc	r19, r1
    f79c:	87 fd       	sbrc	r24, 7
    f79e:	91 60       	ori	r25, 0x01	; 1
    f7a0:	00 96       	adiw	r24, 0x00	; 0
    f7a2:	61 05       	cpc	r22, r1
    f7a4:	71 05       	cpc	r23, r1
    f7a6:	39 f4       	brne	.+14     	; 0xf7b6 <__ftoa_engine+0x28>
    f7a8:	32 60       	ori	r19, 0x02	; 2
    f7aa:	2e 5f       	subi	r18, 0xFE	; 254
    f7ac:	3d 93       	st	X+, r19
    f7ae:	30 e3       	ldi	r19, 0x30	; 48
    f7b0:	2a 95       	dec	r18
    f7b2:	e1 f7       	brne	.-8      	; 0xf7ac <__ftoa_engine+0x1e>
    f7b4:	08 95       	ret
    f7b6:	9f 3f       	cpi	r25, 0xFF	; 255
    f7b8:	30 f0       	brcs	.+12     	; 0xf7c6 <__ftoa_engine+0x38>
    f7ba:	80 38       	cpi	r24, 0x80	; 128
    f7bc:	71 05       	cpc	r23, r1
    f7be:	61 05       	cpc	r22, r1
    f7c0:	09 f0       	breq	.+2      	; 0xf7c4 <__ftoa_engine+0x36>
    f7c2:	3c 5f       	subi	r19, 0xFC	; 252
    f7c4:	3c 5f       	subi	r19, 0xFC	; 252
    f7c6:	3d 93       	st	X+, r19
    f7c8:	91 30       	cpi	r25, 0x01	; 1
    f7ca:	08 f0       	brcs	.+2      	; 0xf7ce <__ftoa_engine+0x40>
    f7cc:	80 68       	ori	r24, 0x80	; 128
    f7ce:	91 1d       	adc	r25, r1
    f7d0:	df 93       	push	r29
    f7d2:	cf 93       	push	r28
    f7d4:	1f 93       	push	r17
    f7d6:	0f 93       	push	r16
    f7d8:	ff 92       	push	r15
    f7da:	ef 92       	push	r14
    f7dc:	19 2f       	mov	r17, r25
    f7de:	98 7f       	andi	r25, 0xF8	; 248
    f7e0:	96 95       	lsr	r25
    f7e2:	e9 2f       	mov	r30, r25
    f7e4:	96 95       	lsr	r25
    f7e6:	96 95       	lsr	r25
    f7e8:	e9 0f       	add	r30, r25
    f7ea:	ff 27       	eor	r31, r31
    f7ec:	e6 5e       	subi	r30, 0xE6	; 230
    f7ee:	fc 4f       	sbci	r31, 0xFC	; 252
    f7f0:	99 27       	eor	r25, r25
    f7f2:	33 27       	eor	r19, r19
    f7f4:	ee 24       	eor	r14, r14
    f7f6:	ff 24       	eor	r15, r15
    f7f8:	a7 01       	movw	r20, r14
    f7fa:	e7 01       	movw	r28, r14
    f7fc:	05 90       	lpm	r0, Z+
    f7fe:	08 94       	sec
    f800:	07 94       	ror	r0
    f802:	28 f4       	brcc	.+10     	; 0xf80e <__ftoa_engine+0x80>
    f804:	36 0f       	add	r19, r22
    f806:	e7 1e       	adc	r14, r23
    f808:	f8 1e       	adc	r15, r24
    f80a:	49 1f       	adc	r20, r25
    f80c:	51 1d       	adc	r21, r1
    f80e:	66 0f       	add	r22, r22
    f810:	77 1f       	adc	r23, r23
    f812:	88 1f       	adc	r24, r24
    f814:	99 1f       	adc	r25, r25
    f816:	06 94       	lsr	r0
    f818:	a1 f7       	brne	.-24     	; 0xf802 <__ftoa_engine+0x74>
    f81a:	05 90       	lpm	r0, Z+
    f81c:	07 94       	ror	r0
    f81e:	28 f4       	brcc	.+10     	; 0xf82a <__ftoa_engine+0x9c>
    f820:	e7 0e       	add	r14, r23
    f822:	f8 1e       	adc	r15, r24
    f824:	49 1f       	adc	r20, r25
    f826:	56 1f       	adc	r21, r22
    f828:	c1 1d       	adc	r28, r1
    f82a:	77 0f       	add	r23, r23
    f82c:	88 1f       	adc	r24, r24
    f82e:	99 1f       	adc	r25, r25
    f830:	66 1f       	adc	r22, r22
    f832:	06 94       	lsr	r0
    f834:	a1 f7       	brne	.-24     	; 0xf81e <__ftoa_engine+0x90>
    f836:	05 90       	lpm	r0, Z+
    f838:	07 94       	ror	r0
    f83a:	28 f4       	brcc	.+10     	; 0xf846 <__ftoa_engine+0xb8>
    f83c:	f8 0e       	add	r15, r24
    f83e:	49 1f       	adc	r20, r25
    f840:	56 1f       	adc	r21, r22
    f842:	c7 1f       	adc	r28, r23
    f844:	d1 1d       	adc	r29, r1
    f846:	88 0f       	add	r24, r24
    f848:	99 1f       	adc	r25, r25
    f84a:	66 1f       	adc	r22, r22
    f84c:	77 1f       	adc	r23, r23
    f84e:	06 94       	lsr	r0
    f850:	a1 f7       	brne	.-24     	; 0xf83a <__ftoa_engine+0xac>
    f852:	05 90       	lpm	r0, Z+
    f854:	07 94       	ror	r0
    f856:	20 f4       	brcc	.+8      	; 0xf860 <__ftoa_engine+0xd2>
    f858:	49 0f       	add	r20, r25
    f85a:	56 1f       	adc	r21, r22
    f85c:	c7 1f       	adc	r28, r23
    f85e:	d8 1f       	adc	r29, r24
    f860:	99 0f       	add	r25, r25
    f862:	66 1f       	adc	r22, r22
    f864:	77 1f       	adc	r23, r23
    f866:	88 1f       	adc	r24, r24
    f868:	06 94       	lsr	r0
    f86a:	a9 f7       	brne	.-22     	; 0xf856 <__ftoa_engine+0xc8>
    f86c:	84 91       	lpm	r24, Z
    f86e:	10 95       	com	r17
    f870:	17 70       	andi	r17, 0x07	; 7
    f872:	41 f0       	breq	.+16     	; 0xf884 <__ftoa_engine+0xf6>
    f874:	d6 95       	lsr	r29
    f876:	c7 95       	ror	r28
    f878:	57 95       	ror	r21
    f87a:	47 95       	ror	r20
    f87c:	f7 94       	ror	r15
    f87e:	e7 94       	ror	r14
    f880:	1a 95       	dec	r17
    f882:	c1 f7       	brne	.-16     	; 0xf874 <__ftoa_engine+0xe6>
    f884:	e0 ec       	ldi	r30, 0xC0	; 192
    f886:	f2 e0       	ldi	r31, 0x02	; 2
    f888:	68 94       	set
    f88a:	15 90       	lpm	r1, Z+
    f88c:	15 91       	lpm	r17, Z+
    f88e:	35 91       	lpm	r19, Z+
    f890:	65 91       	lpm	r22, Z+
    f892:	95 91       	lpm	r25, Z+
    f894:	05 90       	lpm	r0, Z+
    f896:	7f e2       	ldi	r23, 0x2F	; 47
    f898:	73 95       	inc	r23
    f89a:	e1 18       	sub	r14, r1
    f89c:	f1 0a       	sbc	r15, r17
    f89e:	43 0b       	sbc	r20, r19
    f8a0:	56 0b       	sbc	r21, r22
    f8a2:	c9 0b       	sbc	r28, r25
    f8a4:	d0 09       	sbc	r29, r0
    f8a6:	c0 f7       	brcc	.-16     	; 0xf898 <__ftoa_engine+0x10a>
    f8a8:	e1 0c       	add	r14, r1
    f8aa:	f1 1e       	adc	r15, r17
    f8ac:	43 1f       	adc	r20, r19
    f8ae:	56 1f       	adc	r21, r22
    f8b0:	c9 1f       	adc	r28, r25
    f8b2:	d0 1d       	adc	r29, r0
    f8b4:	7e f4       	brtc	.+30     	; 0xf8d4 <__ftoa_engine+0x146>
    f8b6:	70 33       	cpi	r23, 0x30	; 48
    f8b8:	11 f4       	brne	.+4      	; 0xf8be <__ftoa_engine+0x130>
    f8ba:	8a 95       	dec	r24
    f8bc:	e6 cf       	rjmp	.-52     	; 0xf88a <__ftoa_engine+0xfc>
    f8be:	e8 94       	clt
    f8c0:	01 50       	subi	r16, 0x01	; 1
    f8c2:	30 f0       	brcs	.+12     	; 0xf8d0 <__ftoa_engine+0x142>
    f8c4:	08 0f       	add	r16, r24
    f8c6:	0a f4       	brpl	.+2      	; 0xf8ca <__ftoa_engine+0x13c>
    f8c8:	00 27       	eor	r16, r16
    f8ca:	02 17       	cp	r16, r18
    f8cc:	08 f4       	brcc	.+2      	; 0xf8d0 <__ftoa_engine+0x142>
    f8ce:	20 2f       	mov	r18, r16
    f8d0:	23 95       	inc	r18
    f8d2:	02 2f       	mov	r16, r18
    f8d4:	7a 33       	cpi	r23, 0x3A	; 58
    f8d6:	28 f0       	brcs	.+10     	; 0xf8e2 <__ftoa_engine+0x154>
    f8d8:	79 e3       	ldi	r23, 0x39	; 57
    f8da:	7d 93       	st	X+, r23
    f8dc:	2a 95       	dec	r18
    f8de:	e9 f7       	brne	.-6      	; 0xf8da <__ftoa_engine+0x14c>
    f8e0:	10 c0       	rjmp	.+32     	; 0xf902 <__ftoa_engine+0x174>
    f8e2:	7d 93       	st	X+, r23
    f8e4:	2a 95       	dec	r18
    f8e6:	89 f6       	brne	.-94     	; 0xf88a <__ftoa_engine+0xfc>
    f8e8:	06 94       	lsr	r0
    f8ea:	97 95       	ror	r25
    f8ec:	67 95       	ror	r22
    f8ee:	37 95       	ror	r19
    f8f0:	17 95       	ror	r17
    f8f2:	17 94       	ror	r1
    f8f4:	e1 18       	sub	r14, r1
    f8f6:	f1 0a       	sbc	r15, r17
    f8f8:	43 0b       	sbc	r20, r19
    f8fa:	56 0b       	sbc	r21, r22
    f8fc:	c9 0b       	sbc	r28, r25
    f8fe:	d0 09       	sbc	r29, r0
    f900:	98 f0       	brcs	.+38     	; 0xf928 <__ftoa_engine+0x19a>
    f902:	23 95       	inc	r18
    f904:	7e 91       	ld	r23, -X
    f906:	73 95       	inc	r23
    f908:	7a 33       	cpi	r23, 0x3A	; 58
    f90a:	08 f0       	brcs	.+2      	; 0xf90e <__ftoa_engine+0x180>
    f90c:	70 e3       	ldi	r23, 0x30	; 48
    f90e:	7c 93       	st	X, r23
    f910:	20 13       	cpse	r18, r16
    f912:	b8 f7       	brcc	.-18     	; 0xf902 <__ftoa_engine+0x174>
    f914:	7e 91       	ld	r23, -X
    f916:	70 61       	ori	r23, 0x10	; 16
    f918:	7d 93       	st	X+, r23
    f91a:	30 f0       	brcs	.+12     	; 0xf928 <__ftoa_engine+0x19a>
    f91c:	83 95       	inc	r24
    f91e:	71 e3       	ldi	r23, 0x31	; 49
    f920:	7d 93       	st	X+, r23
    f922:	70 e3       	ldi	r23, 0x30	; 48
    f924:	2a 95       	dec	r18
    f926:	e1 f7       	brne	.-8      	; 0xf920 <__ftoa_engine+0x192>
    f928:	11 24       	eor	r1, r1
    f92a:	ef 90       	pop	r14
    f92c:	ff 90       	pop	r15
    f92e:	0f 91       	pop	r16
    f930:	1f 91       	pop	r17
    f932:	cf 91       	pop	r28
    f934:	df 91       	pop	r29
    f936:	99 27       	eor	r25, r25
    f938:	87 fd       	sbrc	r24, 7
    f93a:	90 95       	com	r25
    f93c:	08 95       	ret

0000f93e <strncasecmp_P>:
    f93e:	fb 01       	movw	r30, r22
    f940:	dc 01       	movw	r26, r24
    f942:	41 50       	subi	r20, 0x01	; 1
    f944:	50 40       	sbci	r21, 0x00	; 0
    f946:	88 f0       	brcs	.+34     	; 0xf96a <strncasecmp_P+0x2c>
    f948:	8d 91       	ld	r24, X+
    f94a:	81 34       	cpi	r24, 0x41	; 65
    f94c:	1c f0       	brlt	.+6      	; 0xf954 <strncasecmp_P+0x16>
    f94e:	8b 35       	cpi	r24, 0x5B	; 91
    f950:	0c f4       	brge	.+2      	; 0xf954 <strncasecmp_P+0x16>
    f952:	80 5e       	subi	r24, 0xE0	; 224
    f954:	65 91       	lpm	r22, Z+
    f956:	61 34       	cpi	r22, 0x41	; 65
    f958:	1c f0       	brlt	.+6      	; 0xf960 <strncasecmp_P+0x22>
    f95a:	6b 35       	cpi	r22, 0x5B	; 91
    f95c:	0c f4       	brge	.+2      	; 0xf960 <strncasecmp_P+0x22>
    f95e:	60 5e       	subi	r22, 0xE0	; 224
    f960:	86 1b       	sub	r24, r22
    f962:	61 11       	cpse	r22, r1
    f964:	71 f3       	breq	.-36     	; 0xf942 <strncasecmp_P+0x4>
    f966:	99 0b       	sbc	r25, r25
    f968:	08 95       	ret
    f96a:	88 1b       	sub	r24, r24
    f96c:	fc cf       	rjmp	.-8      	; 0xf966 <strncasecmp_P+0x28>

0000f96e <strncmp_P>:
    f96e:	fb 01       	movw	r30, r22
    f970:	dc 01       	movw	r26, r24
    f972:	41 50       	subi	r20, 0x01	; 1
    f974:	50 40       	sbci	r21, 0x00	; 0
    f976:	30 f0       	brcs	.+12     	; 0xf984 <strncmp_P+0x16>
    f978:	8d 91       	ld	r24, X+
    f97a:	05 90       	lpm	r0, Z+
    f97c:	80 19       	sub	r24, r0
    f97e:	19 f4       	brne	.+6      	; 0xf986 <strncmp_P+0x18>
    f980:	00 20       	and	r0, r0
    f982:	b9 f7       	brne	.-18     	; 0xf972 <strncmp_P+0x4>
    f984:	88 1b       	sub	r24, r24
    f986:	99 0b       	sbc	r25, r25
    f988:	08 95       	ret

0000f98a <strnlen_P>:
    f98a:	fc 01       	movw	r30, r24
    f98c:	05 90       	lpm	r0, Z+
    f98e:	61 50       	subi	r22, 0x01	; 1
    f990:	70 40       	sbci	r23, 0x00	; 0
    f992:	01 10       	cpse	r0, r1
    f994:	d8 f7       	brcc	.-10     	; 0xf98c <strnlen_P+0x2>
    f996:	80 95       	com	r24
    f998:	90 95       	com	r25
    f99a:	8e 0f       	add	r24, r30
    f99c:	9f 1f       	adc	r25, r31
    f99e:	08 95       	ret

0000f9a0 <strstr_P>:
    f9a0:	fb 01       	movw	r30, r22
    f9a2:	55 91       	lpm	r21, Z+
    f9a4:	55 23       	and	r21, r21
    f9a6:	a9 f0       	breq	.+42     	; 0xf9d2 <strstr_P+0x32>
    f9a8:	bf 01       	movw	r22, r30
    f9aa:	dc 01       	movw	r26, r24
    f9ac:	4d 91       	ld	r20, X+
    f9ae:	45 17       	cp	r20, r21
    f9b0:	41 11       	cpse	r20, r1
    f9b2:	e1 f7       	brne	.-8      	; 0xf9ac <strstr_P+0xc>
    f9b4:	59 f4       	brne	.+22     	; 0xf9cc <strstr_P+0x2c>
    f9b6:	cd 01       	movw	r24, r26
    f9b8:	05 90       	lpm	r0, Z+
    f9ba:	00 20       	and	r0, r0
    f9bc:	49 f0       	breq	.+18     	; 0xf9d0 <strstr_P+0x30>
    f9be:	4d 91       	ld	r20, X+
    f9c0:	40 15       	cp	r20, r0
    f9c2:	41 11       	cpse	r20, r1
    f9c4:	c9 f3       	breq	.-14     	; 0xf9b8 <strstr_P+0x18>
    f9c6:	fb 01       	movw	r30, r22
    f9c8:	41 11       	cpse	r20, r1
    f9ca:	ef cf       	rjmp	.-34     	; 0xf9aa <strstr_P+0xa>
    f9cc:	81 e0       	ldi	r24, 0x01	; 1
    f9ce:	90 e0       	ldi	r25, 0x00	; 0
    f9d0:	01 97       	sbiw	r24, 0x01	; 1
    f9d2:	08 95       	ret

0000f9d4 <memchr>:
    f9d4:	fc 01       	movw	r30, r24
    f9d6:	41 50       	subi	r20, 0x01	; 1
    f9d8:	50 40       	sbci	r21, 0x00	; 0
    f9da:	30 f0       	brcs	.+12     	; 0xf9e8 <memchr+0x14>
    f9dc:	01 90       	ld	r0, Z+
    f9de:	06 16       	cp	r0, r22
    f9e0:	d1 f7       	brne	.-12     	; 0xf9d6 <memchr+0x2>
    f9e2:	31 97       	sbiw	r30, 0x01	; 1
    f9e4:	cf 01       	movw	r24, r30
    f9e6:	08 95       	ret
    f9e8:	88 27       	eor	r24, r24
    f9ea:	99 27       	eor	r25, r25
    f9ec:	08 95       	ret

0000f9ee <memcpy>:
    f9ee:	fb 01       	movw	r30, r22
    f9f0:	dc 01       	movw	r26, r24
    f9f2:	02 c0       	rjmp	.+4      	; 0xf9f8 <memcpy+0xa>
    f9f4:	01 90       	ld	r0, Z+
    f9f6:	0d 92       	st	X+, r0
    f9f8:	41 50       	subi	r20, 0x01	; 1
    f9fa:	50 40       	sbci	r21, 0x00	; 0
    f9fc:	d8 f7       	brcc	.-10     	; 0xf9f4 <memcpy+0x6>
    f9fe:	08 95       	ret

0000fa00 <strchr>:
    fa00:	fc 01       	movw	r30, r24
    fa02:	81 91       	ld	r24, Z+
    fa04:	86 17       	cp	r24, r22
    fa06:	21 f0       	breq	.+8      	; 0xfa10 <strchr+0x10>
    fa08:	88 23       	and	r24, r24
    fa0a:	d9 f7       	brne	.-10     	; 0xfa02 <strchr+0x2>
    fa0c:	99 27       	eor	r25, r25
    fa0e:	08 95       	ret
    fa10:	31 97       	sbiw	r30, 0x01	; 1
    fa12:	cf 01       	movw	r24, r30
    fa14:	08 95       	ret

0000fa16 <strnlen>:
    fa16:	fc 01       	movw	r30, r24
    fa18:	61 50       	subi	r22, 0x01	; 1
    fa1a:	70 40       	sbci	r23, 0x00	; 0
    fa1c:	01 90       	ld	r0, Z+
    fa1e:	01 10       	cpse	r0, r1
    fa20:	d8 f7       	brcc	.-10     	; 0xfa18 <strnlen+0x2>
    fa22:	80 95       	com	r24
    fa24:	90 95       	com	r25
    fa26:	8e 0f       	add	r24, r30
    fa28:	9f 1f       	adc	r25, r31
    fa2a:	08 95       	ret

0000fa2c <__mulsi_const_10>:
    fa2c:	59 2f       	mov	r21, r25
    fa2e:	48 2f       	mov	r20, r24
    fa30:	37 2f       	mov	r19, r23
    fa32:	26 2f       	mov	r18, r22
    fa34:	66 0f       	add	r22, r22
    fa36:	77 1f       	adc	r23, r23
    fa38:	88 1f       	adc	r24, r24
    fa3a:	99 1f       	adc	r25, r25
    fa3c:	66 0f       	add	r22, r22
    fa3e:	77 1f       	adc	r23, r23
    fa40:	88 1f       	adc	r24, r24
    fa42:	99 1f       	adc	r25, r25
    fa44:	62 0f       	add	r22, r18
    fa46:	73 1f       	adc	r23, r19
    fa48:	84 1f       	adc	r24, r20
    fa4a:	95 1f       	adc	r25, r21
    fa4c:	66 0f       	add	r22, r22
    fa4e:	77 1f       	adc	r23, r23
    fa50:	88 1f       	adc	r24, r24
    fa52:	99 1f       	adc	r25, r25
    fa54:	08 95       	ret

0000fa56 <__mulhi_const_10>:
    fa56:	7a e0       	ldi	r23, 0x0A	; 10
    fa58:	97 9f       	mul	r25, r23
    fa5a:	90 2d       	mov	r25, r0
    fa5c:	87 9f       	mul	r24, r23
    fa5e:	80 2d       	mov	r24, r0
    fa60:	91 0d       	add	r25, r1
    fa62:	11 24       	eor	r1, r1
    fa64:	08 95       	ret

0000fa66 <fdevopen>:
    fa66:	0f 93       	push	r16
    fa68:	1f 93       	push	r17
    fa6a:	cf 93       	push	r28
    fa6c:	df 93       	push	r29
    fa6e:	00 97       	sbiw	r24, 0x00	; 0
    fa70:	31 f4       	brne	.+12     	; 0xfa7e <fdevopen+0x18>
    fa72:	61 15       	cp	r22, r1
    fa74:	71 05       	cpc	r23, r1
    fa76:	19 f4       	brne	.+6      	; 0xfa7e <fdevopen+0x18>
    fa78:	80 e0       	ldi	r24, 0x00	; 0
    fa7a:	90 e0       	ldi	r25, 0x00	; 0
    fa7c:	39 c0       	rjmp	.+114    	; 0xfaf0 <fdevopen+0x8a>
    fa7e:	8b 01       	movw	r16, r22
    fa80:	ec 01       	movw	r28, r24
    fa82:	6e e0       	ldi	r22, 0x0E	; 14
    fa84:	70 e0       	ldi	r23, 0x00	; 0
    fa86:	81 e0       	ldi	r24, 0x01	; 1
    fa88:	90 e0       	ldi	r25, 0x00	; 0
    fa8a:	31 d1       	rcall	.+610    	; 0xfcee <calloc>
    fa8c:	fc 01       	movw	r30, r24
    fa8e:	89 2b       	or	r24, r25
    fa90:	99 f3       	breq	.-26     	; 0xfa78 <fdevopen+0x12>
    fa92:	80 e8       	ldi	r24, 0x80	; 128
    fa94:	83 83       	std	Z+3, r24	; 0x03
    fa96:	01 15       	cp	r16, r1
    fa98:	11 05       	cpc	r17, r1
    fa9a:	71 f0       	breq	.+28     	; 0xfab8 <fdevopen+0x52>
    fa9c:	02 87       	std	Z+10, r16	; 0x0a
    fa9e:	13 87       	std	Z+11, r17	; 0x0b
    faa0:	81 e8       	ldi	r24, 0x81	; 129
    faa2:	83 83       	std	Z+3, r24	; 0x03
    faa4:	80 91 67 29 	lds	r24, 0x2967	; 0x802967 <__iob>
    faa8:	90 91 68 29 	lds	r25, 0x2968	; 0x802968 <__iob+0x1>
    faac:	89 2b       	or	r24, r25
    faae:	21 f4       	brne	.+8      	; 0xfab8 <fdevopen+0x52>
    fab0:	e0 93 67 29 	sts	0x2967, r30	; 0x802967 <__iob>
    fab4:	f0 93 68 29 	sts	0x2968, r31	; 0x802968 <__iob+0x1>
    fab8:	20 97       	sbiw	r28, 0x00	; 0
    faba:	c9 f0       	breq	.+50     	; 0xfaee <fdevopen+0x88>
    fabc:	c0 87       	std	Z+8, r28	; 0x08
    fabe:	d1 87       	std	Z+9, r29	; 0x09
    fac0:	83 81       	ldd	r24, Z+3	; 0x03
    fac2:	82 60       	ori	r24, 0x02	; 2
    fac4:	83 83       	std	Z+3, r24	; 0x03
    fac6:	80 91 69 29 	lds	r24, 0x2969	; 0x802969 <__iob+0x2>
    faca:	90 91 6a 29 	lds	r25, 0x296A	; 0x80296a <__iob+0x3>
    face:	89 2b       	or	r24, r25
    fad0:	71 f4       	brne	.+28     	; 0xfaee <fdevopen+0x88>
    fad2:	e0 93 69 29 	sts	0x2969, r30	; 0x802969 <__iob+0x2>
    fad6:	f0 93 6a 29 	sts	0x296A, r31	; 0x80296a <__iob+0x3>
    fada:	80 91 6b 29 	lds	r24, 0x296B	; 0x80296b <__iob+0x4>
    fade:	90 91 6c 29 	lds	r25, 0x296C	; 0x80296c <__iob+0x5>
    fae2:	89 2b       	or	r24, r25
    fae4:	21 f4       	brne	.+8      	; 0xfaee <fdevopen+0x88>
    fae6:	e0 93 6b 29 	sts	0x296B, r30	; 0x80296b <__iob+0x4>
    faea:	f0 93 6c 29 	sts	0x296C, r31	; 0x80296c <__iob+0x5>
    faee:	cf 01       	movw	r24, r30
    faf0:	df 91       	pop	r29
    faf2:	cf 91       	pop	r28
    faf4:	1f 91       	pop	r17
    faf6:	0f 91       	pop	r16
    faf8:	08 95       	ret

0000fafa <fputc>:
    fafa:	0f 93       	push	r16
    fafc:	1f 93       	push	r17
    fafe:	cf 93       	push	r28
    fb00:	df 93       	push	r29
    fb02:	fb 01       	movw	r30, r22
    fb04:	23 81       	ldd	r18, Z+3	; 0x03
    fb06:	21 fd       	sbrc	r18, 1
    fb08:	03 c0       	rjmp	.+6      	; 0xfb10 <fputc+0x16>
    fb0a:	8f ef       	ldi	r24, 0xFF	; 255
    fb0c:	9f ef       	ldi	r25, 0xFF	; 255
    fb0e:	2c c0       	rjmp	.+88     	; 0xfb68 <fputc+0x6e>
    fb10:	22 ff       	sbrs	r18, 2
    fb12:	16 c0       	rjmp	.+44     	; 0xfb40 <fputc+0x46>
    fb14:	46 81       	ldd	r20, Z+6	; 0x06
    fb16:	57 81       	ldd	r21, Z+7	; 0x07
    fb18:	24 81       	ldd	r18, Z+4	; 0x04
    fb1a:	35 81       	ldd	r19, Z+5	; 0x05
    fb1c:	42 17       	cp	r20, r18
    fb1e:	53 07       	cpc	r21, r19
    fb20:	44 f4       	brge	.+16     	; 0xfb32 <fputc+0x38>
    fb22:	a0 81       	ld	r26, Z
    fb24:	b1 81       	ldd	r27, Z+1	; 0x01
    fb26:	9d 01       	movw	r18, r26
    fb28:	2f 5f       	subi	r18, 0xFF	; 255
    fb2a:	3f 4f       	sbci	r19, 0xFF	; 255
    fb2c:	20 83       	st	Z, r18
    fb2e:	31 83       	std	Z+1, r19	; 0x01
    fb30:	8c 93       	st	X, r24
    fb32:	26 81       	ldd	r18, Z+6	; 0x06
    fb34:	37 81       	ldd	r19, Z+7	; 0x07
    fb36:	2f 5f       	subi	r18, 0xFF	; 255
    fb38:	3f 4f       	sbci	r19, 0xFF	; 255
    fb3a:	26 83       	std	Z+6, r18	; 0x06
    fb3c:	37 83       	std	Z+7, r19	; 0x07
    fb3e:	14 c0       	rjmp	.+40     	; 0xfb68 <fputc+0x6e>
    fb40:	8b 01       	movw	r16, r22
    fb42:	ec 01       	movw	r28, r24
    fb44:	fb 01       	movw	r30, r22
    fb46:	00 84       	ldd	r0, Z+8	; 0x08
    fb48:	f1 85       	ldd	r31, Z+9	; 0x09
    fb4a:	e0 2d       	mov	r30, r0
    fb4c:	19 95       	eicall
    fb4e:	89 2b       	or	r24, r25
    fb50:	e1 f6       	brne	.-72     	; 0xfb0a <fputc+0x10>
    fb52:	d8 01       	movw	r26, r16
    fb54:	16 96       	adiw	r26, 0x06	; 6
    fb56:	8d 91       	ld	r24, X+
    fb58:	9c 91       	ld	r25, X
    fb5a:	17 97       	sbiw	r26, 0x07	; 7
    fb5c:	01 96       	adiw	r24, 0x01	; 1
    fb5e:	16 96       	adiw	r26, 0x06	; 6
    fb60:	8d 93       	st	X+, r24
    fb62:	9c 93       	st	X, r25
    fb64:	17 97       	sbiw	r26, 0x07	; 7
    fb66:	ce 01       	movw	r24, r28
    fb68:	df 91       	pop	r29
    fb6a:	cf 91       	pop	r28
    fb6c:	1f 91       	pop	r17
    fb6e:	0f 91       	pop	r16
    fb70:	08 95       	ret

0000fb72 <snprintf_P>:
    fb72:	0f 93       	push	r16
    fb74:	1f 93       	push	r17
    fb76:	cf 93       	push	r28
    fb78:	df 93       	push	r29
    fb7a:	cd b7       	in	r28, 0x3d	; 61
    fb7c:	de b7       	in	r29, 0x3e	; 62
    fb7e:	2e 97       	sbiw	r28, 0x0e	; 14
    fb80:	cd bf       	out	0x3d, r28	; 61
    fb82:	de bf       	out	0x3e, r29	; 62
    fb84:	0e 89       	ldd	r16, Y+22	; 0x16
    fb86:	1f 89       	ldd	r17, Y+23	; 0x17
    fb88:	88 8d       	ldd	r24, Y+24	; 0x18
    fb8a:	99 8d       	ldd	r25, Y+25	; 0x19
    fb8c:	2e e0       	ldi	r18, 0x0E	; 14
    fb8e:	2c 83       	std	Y+4, r18	; 0x04
    fb90:	09 83       	std	Y+1, r16	; 0x01
    fb92:	1a 83       	std	Y+2, r17	; 0x02
    fb94:	97 ff       	sbrs	r25, 7
    fb96:	02 c0       	rjmp	.+4      	; 0xfb9c <snprintf_P+0x2a>
    fb98:	80 e0       	ldi	r24, 0x00	; 0
    fb9a:	90 e8       	ldi	r25, 0x80	; 128
    fb9c:	01 97       	sbiw	r24, 0x01	; 1
    fb9e:	8d 83       	std	Y+5, r24	; 0x05
    fba0:	9e 83       	std	Y+6, r25	; 0x06
    fba2:	ae 01       	movw	r20, r28
    fba4:	44 5e       	subi	r20, 0xE4	; 228
    fba6:	5f 4f       	sbci	r21, 0xFF	; 255
    fba8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    fbaa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    fbac:	ce 01       	movw	r24, r28
    fbae:	01 96       	adiw	r24, 0x01	; 1
    fbb0:	0e 94 0b 72 	call	0xe416	; 0xe416 <vfprintf>
    fbb4:	4d 81       	ldd	r20, Y+5	; 0x05
    fbb6:	5e 81       	ldd	r21, Y+6	; 0x06
    fbb8:	57 fd       	sbrc	r21, 7
    fbba:	0a c0       	rjmp	.+20     	; 0xfbd0 <snprintf_P+0x5e>
    fbbc:	2f 81       	ldd	r18, Y+7	; 0x07
    fbbe:	38 85       	ldd	r19, Y+8	; 0x08
    fbc0:	42 17       	cp	r20, r18
    fbc2:	53 07       	cpc	r21, r19
    fbc4:	0c f4       	brge	.+2      	; 0xfbc8 <snprintf_P+0x56>
    fbc6:	9a 01       	movw	r18, r20
    fbc8:	f8 01       	movw	r30, r16
    fbca:	e2 0f       	add	r30, r18
    fbcc:	f3 1f       	adc	r31, r19
    fbce:	10 82       	st	Z, r1
    fbd0:	2e 96       	adiw	r28, 0x0e	; 14
    fbd2:	cd bf       	out	0x3d, r28	; 61
    fbd4:	de bf       	out	0x3e, r29	; 62
    fbd6:	df 91       	pop	r29
    fbd8:	cf 91       	pop	r28
    fbda:	1f 91       	pop	r17
    fbdc:	0f 91       	pop	r16
    fbde:	08 95       	ret

0000fbe0 <sprintf_P>:
    fbe0:	0f 93       	push	r16
    fbe2:	1f 93       	push	r17
    fbe4:	cf 93       	push	r28
    fbe6:	df 93       	push	r29
    fbe8:	cd b7       	in	r28, 0x3d	; 61
    fbea:	de b7       	in	r29, 0x3e	; 62
    fbec:	2e 97       	sbiw	r28, 0x0e	; 14
    fbee:	cd bf       	out	0x3d, r28	; 61
    fbf0:	de bf       	out	0x3e, r29	; 62
    fbf2:	0e 89       	ldd	r16, Y+22	; 0x16
    fbf4:	1f 89       	ldd	r17, Y+23	; 0x17
    fbf6:	8e e0       	ldi	r24, 0x0E	; 14
    fbf8:	8c 83       	std	Y+4, r24	; 0x04
    fbfa:	09 83       	std	Y+1, r16	; 0x01
    fbfc:	1a 83       	std	Y+2, r17	; 0x02
    fbfe:	8f ef       	ldi	r24, 0xFF	; 255
    fc00:	9f e7       	ldi	r25, 0x7F	; 127
    fc02:	8d 83       	std	Y+5, r24	; 0x05
    fc04:	9e 83       	std	Y+6, r25	; 0x06
    fc06:	ae 01       	movw	r20, r28
    fc08:	46 5e       	subi	r20, 0xE6	; 230
    fc0a:	5f 4f       	sbci	r21, 0xFF	; 255
    fc0c:	68 8d       	ldd	r22, Y+24	; 0x18
    fc0e:	79 8d       	ldd	r23, Y+25	; 0x19
    fc10:	ce 01       	movw	r24, r28
    fc12:	01 96       	adiw	r24, 0x01	; 1
    fc14:	0e 94 0b 72 	call	0xe416	; 0xe416 <vfprintf>
    fc18:	ef 81       	ldd	r30, Y+7	; 0x07
    fc1a:	f8 85       	ldd	r31, Y+8	; 0x08
    fc1c:	e0 0f       	add	r30, r16
    fc1e:	f1 1f       	adc	r31, r17
    fc20:	10 82       	st	Z, r1
    fc22:	2e 96       	adiw	r28, 0x0e	; 14
    fc24:	cd bf       	out	0x3d, r28	; 61
    fc26:	de bf       	out	0x3e, r29	; 62
    fc28:	df 91       	pop	r29
    fc2a:	cf 91       	pop	r28
    fc2c:	1f 91       	pop	r17
    fc2e:	0f 91       	pop	r16
    fc30:	08 95       	ret

0000fc32 <__ultoa_invert>:
    fc32:	fa 01       	movw	r30, r20
    fc34:	aa 27       	eor	r26, r26
    fc36:	28 30       	cpi	r18, 0x08	; 8
    fc38:	51 f1       	breq	.+84     	; 0xfc8e <__ultoa_invert+0x5c>
    fc3a:	20 31       	cpi	r18, 0x10	; 16
    fc3c:	81 f1       	breq	.+96     	; 0xfc9e <__ultoa_invert+0x6c>
    fc3e:	e8 94       	clt
    fc40:	6f 93       	push	r22
    fc42:	6e 7f       	andi	r22, 0xFE	; 254
    fc44:	6e 5f       	subi	r22, 0xFE	; 254
    fc46:	7f 4f       	sbci	r23, 0xFF	; 255
    fc48:	8f 4f       	sbci	r24, 0xFF	; 255
    fc4a:	9f 4f       	sbci	r25, 0xFF	; 255
    fc4c:	af 4f       	sbci	r26, 0xFF	; 255
    fc4e:	b1 e0       	ldi	r27, 0x01	; 1
    fc50:	3e d0       	rcall	.+124    	; 0xfcce <__ultoa_invert+0x9c>
    fc52:	b4 e0       	ldi	r27, 0x04	; 4
    fc54:	3c d0       	rcall	.+120    	; 0xfcce <__ultoa_invert+0x9c>
    fc56:	67 0f       	add	r22, r23
    fc58:	78 1f       	adc	r23, r24
    fc5a:	89 1f       	adc	r24, r25
    fc5c:	9a 1f       	adc	r25, r26
    fc5e:	a1 1d       	adc	r26, r1
    fc60:	68 0f       	add	r22, r24
    fc62:	79 1f       	adc	r23, r25
    fc64:	8a 1f       	adc	r24, r26
    fc66:	91 1d       	adc	r25, r1
    fc68:	a1 1d       	adc	r26, r1
    fc6a:	6a 0f       	add	r22, r26
    fc6c:	71 1d       	adc	r23, r1
    fc6e:	81 1d       	adc	r24, r1
    fc70:	91 1d       	adc	r25, r1
    fc72:	a1 1d       	adc	r26, r1
    fc74:	20 d0       	rcall	.+64     	; 0xfcb6 <__ultoa_invert+0x84>
    fc76:	09 f4       	brne	.+2      	; 0xfc7a <__ultoa_invert+0x48>
    fc78:	68 94       	set
    fc7a:	3f 91       	pop	r19
    fc7c:	2a e0       	ldi	r18, 0x0A	; 10
    fc7e:	26 9f       	mul	r18, r22
    fc80:	11 24       	eor	r1, r1
    fc82:	30 19       	sub	r19, r0
    fc84:	30 5d       	subi	r19, 0xD0	; 208
    fc86:	31 93       	st	Z+, r19
    fc88:	de f6       	brtc	.-74     	; 0xfc40 <__ultoa_invert+0xe>
    fc8a:	cf 01       	movw	r24, r30
    fc8c:	08 95       	ret
    fc8e:	46 2f       	mov	r20, r22
    fc90:	47 70       	andi	r20, 0x07	; 7
    fc92:	40 5d       	subi	r20, 0xD0	; 208
    fc94:	41 93       	st	Z+, r20
    fc96:	b3 e0       	ldi	r27, 0x03	; 3
    fc98:	0f d0       	rcall	.+30     	; 0xfcb8 <__ultoa_invert+0x86>
    fc9a:	c9 f7       	brne	.-14     	; 0xfc8e <__ultoa_invert+0x5c>
    fc9c:	f6 cf       	rjmp	.-20     	; 0xfc8a <__ultoa_invert+0x58>
    fc9e:	46 2f       	mov	r20, r22
    fca0:	4f 70       	andi	r20, 0x0F	; 15
    fca2:	40 5d       	subi	r20, 0xD0	; 208
    fca4:	4a 33       	cpi	r20, 0x3A	; 58
    fca6:	18 f0       	brcs	.+6      	; 0xfcae <__ultoa_invert+0x7c>
    fca8:	49 5d       	subi	r20, 0xD9	; 217
    fcaa:	31 fd       	sbrc	r19, 1
    fcac:	40 52       	subi	r20, 0x20	; 32
    fcae:	41 93       	st	Z+, r20
    fcb0:	02 d0       	rcall	.+4      	; 0xfcb6 <__ultoa_invert+0x84>
    fcb2:	a9 f7       	brne	.-22     	; 0xfc9e <__ultoa_invert+0x6c>
    fcb4:	ea cf       	rjmp	.-44     	; 0xfc8a <__ultoa_invert+0x58>
    fcb6:	b4 e0       	ldi	r27, 0x04	; 4
    fcb8:	a6 95       	lsr	r26
    fcba:	97 95       	ror	r25
    fcbc:	87 95       	ror	r24
    fcbe:	77 95       	ror	r23
    fcc0:	67 95       	ror	r22
    fcc2:	ba 95       	dec	r27
    fcc4:	c9 f7       	brne	.-14     	; 0xfcb8 <__ultoa_invert+0x86>
    fcc6:	00 97       	sbiw	r24, 0x00	; 0
    fcc8:	61 05       	cpc	r22, r1
    fcca:	71 05       	cpc	r23, r1
    fccc:	08 95       	ret
    fcce:	9b 01       	movw	r18, r22
    fcd0:	ac 01       	movw	r20, r24
    fcd2:	0a 2e       	mov	r0, r26
    fcd4:	06 94       	lsr	r0
    fcd6:	57 95       	ror	r21
    fcd8:	47 95       	ror	r20
    fcda:	37 95       	ror	r19
    fcdc:	27 95       	ror	r18
    fcde:	ba 95       	dec	r27
    fce0:	c9 f7       	brne	.-14     	; 0xfcd4 <__ultoa_invert+0xa2>
    fce2:	62 0f       	add	r22, r18
    fce4:	73 1f       	adc	r23, r19
    fce6:	84 1f       	adc	r24, r20
    fce8:	95 1f       	adc	r25, r21
    fcea:	a0 1d       	adc	r26, r0
    fcec:	08 95       	ret

0000fcee <calloc>:
    fcee:	0f 93       	push	r16
    fcf0:	1f 93       	push	r17
    fcf2:	cf 93       	push	r28
    fcf4:	df 93       	push	r29
    fcf6:	86 9f       	mul	r24, r22
    fcf8:	80 01       	movw	r16, r0
    fcfa:	87 9f       	mul	r24, r23
    fcfc:	10 0d       	add	r17, r0
    fcfe:	96 9f       	mul	r25, r22
    fd00:	10 0d       	add	r17, r0
    fd02:	11 24       	eor	r1, r1
    fd04:	c8 01       	movw	r24, r16
    fd06:	0d d0       	rcall	.+26     	; 0xfd22 <malloc>
    fd08:	ec 01       	movw	r28, r24
    fd0a:	00 97       	sbiw	r24, 0x00	; 0
    fd0c:	21 f0       	breq	.+8      	; 0xfd16 <calloc+0x28>
    fd0e:	a8 01       	movw	r20, r16
    fd10:	60 e0       	ldi	r22, 0x00	; 0
    fd12:	70 e0       	ldi	r23, 0x00	; 0
    fd14:	86 d2       	rcall	.+1292   	; 0x10222 <memset>
    fd16:	ce 01       	movw	r24, r28
    fd18:	df 91       	pop	r29
    fd1a:	cf 91       	pop	r28
    fd1c:	1f 91       	pop	r17
    fd1e:	0f 91       	pop	r16
    fd20:	08 95       	ret

0000fd22 <malloc>:
    fd22:	0f 93       	push	r16
    fd24:	1f 93       	push	r17
    fd26:	cf 93       	push	r28
    fd28:	df 93       	push	r29
    fd2a:	82 30       	cpi	r24, 0x02	; 2
    fd2c:	91 05       	cpc	r25, r1
    fd2e:	10 f4       	brcc	.+4      	; 0xfd34 <malloc+0x12>
    fd30:	82 e0       	ldi	r24, 0x02	; 2
    fd32:	90 e0       	ldi	r25, 0x00	; 0
    fd34:	e0 91 6f 29 	lds	r30, 0x296F	; 0x80296f <__flp>
    fd38:	f0 91 70 29 	lds	r31, 0x2970	; 0x802970 <__flp+0x1>
    fd3c:	20 e0       	ldi	r18, 0x00	; 0
    fd3e:	30 e0       	ldi	r19, 0x00	; 0
    fd40:	a0 e0       	ldi	r26, 0x00	; 0
    fd42:	b0 e0       	ldi	r27, 0x00	; 0
    fd44:	30 97       	sbiw	r30, 0x00	; 0
    fd46:	19 f1       	breq	.+70     	; 0xfd8e <malloc+0x6c>
    fd48:	40 81       	ld	r20, Z
    fd4a:	51 81       	ldd	r21, Z+1	; 0x01
    fd4c:	02 81       	ldd	r16, Z+2	; 0x02
    fd4e:	13 81       	ldd	r17, Z+3	; 0x03
    fd50:	48 17       	cp	r20, r24
    fd52:	59 07       	cpc	r21, r25
    fd54:	c8 f0       	brcs	.+50     	; 0xfd88 <malloc+0x66>
    fd56:	84 17       	cp	r24, r20
    fd58:	95 07       	cpc	r25, r21
    fd5a:	69 f4       	brne	.+26     	; 0xfd76 <malloc+0x54>
    fd5c:	10 97       	sbiw	r26, 0x00	; 0
    fd5e:	31 f0       	breq	.+12     	; 0xfd6c <malloc+0x4a>
    fd60:	12 96       	adiw	r26, 0x02	; 2
    fd62:	0c 93       	st	X, r16
    fd64:	12 97       	sbiw	r26, 0x02	; 2
    fd66:	13 96       	adiw	r26, 0x03	; 3
    fd68:	1c 93       	st	X, r17
    fd6a:	27 c0       	rjmp	.+78     	; 0xfdba <malloc+0x98>
    fd6c:	00 93 6f 29 	sts	0x296F, r16	; 0x80296f <__flp>
    fd70:	10 93 70 29 	sts	0x2970, r17	; 0x802970 <__flp+0x1>
    fd74:	22 c0       	rjmp	.+68     	; 0xfdba <malloc+0x98>
    fd76:	21 15       	cp	r18, r1
    fd78:	31 05       	cpc	r19, r1
    fd7a:	19 f0       	breq	.+6      	; 0xfd82 <malloc+0x60>
    fd7c:	42 17       	cp	r20, r18
    fd7e:	53 07       	cpc	r21, r19
    fd80:	18 f4       	brcc	.+6      	; 0xfd88 <malloc+0x66>
    fd82:	9a 01       	movw	r18, r20
    fd84:	bd 01       	movw	r22, r26
    fd86:	ef 01       	movw	r28, r30
    fd88:	df 01       	movw	r26, r30
    fd8a:	f8 01       	movw	r30, r16
    fd8c:	db cf       	rjmp	.-74     	; 0xfd44 <malloc+0x22>
    fd8e:	21 15       	cp	r18, r1
    fd90:	31 05       	cpc	r19, r1
    fd92:	f9 f0       	breq	.+62     	; 0xfdd2 <malloc+0xb0>
    fd94:	28 1b       	sub	r18, r24
    fd96:	39 0b       	sbc	r19, r25
    fd98:	24 30       	cpi	r18, 0x04	; 4
    fd9a:	31 05       	cpc	r19, r1
    fd9c:	80 f4       	brcc	.+32     	; 0xfdbe <malloc+0x9c>
    fd9e:	8a 81       	ldd	r24, Y+2	; 0x02
    fda0:	9b 81       	ldd	r25, Y+3	; 0x03
    fda2:	61 15       	cp	r22, r1
    fda4:	71 05       	cpc	r23, r1
    fda6:	21 f0       	breq	.+8      	; 0xfdb0 <malloc+0x8e>
    fda8:	fb 01       	movw	r30, r22
    fdaa:	82 83       	std	Z+2, r24	; 0x02
    fdac:	93 83       	std	Z+3, r25	; 0x03
    fdae:	04 c0       	rjmp	.+8      	; 0xfdb8 <malloc+0x96>
    fdb0:	80 93 6f 29 	sts	0x296F, r24	; 0x80296f <__flp>
    fdb4:	90 93 70 29 	sts	0x2970, r25	; 0x802970 <__flp+0x1>
    fdb8:	fe 01       	movw	r30, r28
    fdba:	32 96       	adiw	r30, 0x02	; 2
    fdbc:	44 c0       	rjmp	.+136    	; 0xfe46 <malloc+0x124>
    fdbe:	fe 01       	movw	r30, r28
    fdc0:	e2 0f       	add	r30, r18
    fdc2:	f3 1f       	adc	r31, r19
    fdc4:	81 93       	st	Z+, r24
    fdc6:	91 93       	st	Z+, r25
    fdc8:	22 50       	subi	r18, 0x02	; 2
    fdca:	31 09       	sbc	r19, r1
    fdcc:	28 83       	st	Y, r18
    fdce:	39 83       	std	Y+1, r19	; 0x01
    fdd0:	3a c0       	rjmp	.+116    	; 0xfe46 <malloc+0x124>
    fdd2:	20 91 6d 29 	lds	r18, 0x296D	; 0x80296d <__brkval>
    fdd6:	30 91 6e 29 	lds	r19, 0x296E	; 0x80296e <__brkval+0x1>
    fdda:	23 2b       	or	r18, r19
    fddc:	41 f4       	brne	.+16     	; 0xfdee <malloc+0xcc>
    fdde:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    fde2:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    fde6:	20 93 6d 29 	sts	0x296D, r18	; 0x80296d <__brkval>
    fdea:	30 93 6e 29 	sts	0x296E, r19	; 0x80296e <__brkval+0x1>
    fdee:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    fdf2:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    fdf6:	21 15       	cp	r18, r1
    fdf8:	31 05       	cpc	r19, r1
    fdfa:	41 f4       	brne	.+16     	; 0xfe0c <malloc+0xea>
    fdfc:	2d b7       	in	r18, 0x3d	; 61
    fdfe:	3e b7       	in	r19, 0x3e	; 62
    fe00:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    fe04:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    fe08:	24 1b       	sub	r18, r20
    fe0a:	35 0b       	sbc	r19, r21
    fe0c:	e0 91 6d 29 	lds	r30, 0x296D	; 0x80296d <__brkval>
    fe10:	f0 91 6e 29 	lds	r31, 0x296E	; 0x80296e <__brkval+0x1>
    fe14:	e2 17       	cp	r30, r18
    fe16:	f3 07       	cpc	r31, r19
    fe18:	a0 f4       	brcc	.+40     	; 0xfe42 <malloc+0x120>
    fe1a:	2e 1b       	sub	r18, r30
    fe1c:	3f 0b       	sbc	r19, r31
    fe1e:	28 17       	cp	r18, r24
    fe20:	39 07       	cpc	r19, r25
    fe22:	78 f0       	brcs	.+30     	; 0xfe42 <malloc+0x120>
    fe24:	ac 01       	movw	r20, r24
    fe26:	4e 5f       	subi	r20, 0xFE	; 254
    fe28:	5f 4f       	sbci	r21, 0xFF	; 255
    fe2a:	24 17       	cp	r18, r20
    fe2c:	35 07       	cpc	r19, r21
    fe2e:	48 f0       	brcs	.+18     	; 0xfe42 <malloc+0x120>
    fe30:	4e 0f       	add	r20, r30
    fe32:	5f 1f       	adc	r21, r31
    fe34:	40 93 6d 29 	sts	0x296D, r20	; 0x80296d <__brkval>
    fe38:	50 93 6e 29 	sts	0x296E, r21	; 0x80296e <__brkval+0x1>
    fe3c:	81 93       	st	Z+, r24
    fe3e:	91 93       	st	Z+, r25
    fe40:	02 c0       	rjmp	.+4      	; 0xfe46 <malloc+0x124>
    fe42:	e0 e0       	ldi	r30, 0x00	; 0
    fe44:	f0 e0       	ldi	r31, 0x00	; 0
    fe46:	cf 01       	movw	r24, r30
    fe48:	df 91       	pop	r29
    fe4a:	cf 91       	pop	r28
    fe4c:	1f 91       	pop	r17
    fe4e:	0f 91       	pop	r16
    fe50:	08 95       	ret

0000fe52 <free>:
    fe52:	cf 93       	push	r28
    fe54:	df 93       	push	r29
    fe56:	00 97       	sbiw	r24, 0x00	; 0
    fe58:	09 f4       	brne	.+2      	; 0xfe5c <free+0xa>
    fe5a:	81 c0       	rjmp	.+258    	; 0xff5e <free+0x10c>
    fe5c:	fc 01       	movw	r30, r24
    fe5e:	32 97       	sbiw	r30, 0x02	; 2
    fe60:	12 82       	std	Z+2, r1	; 0x02
    fe62:	13 82       	std	Z+3, r1	; 0x03
    fe64:	a0 91 6f 29 	lds	r26, 0x296F	; 0x80296f <__flp>
    fe68:	b0 91 70 29 	lds	r27, 0x2970	; 0x802970 <__flp+0x1>
    fe6c:	10 97       	sbiw	r26, 0x00	; 0
    fe6e:	81 f4       	brne	.+32     	; 0xfe90 <free+0x3e>
    fe70:	20 81       	ld	r18, Z
    fe72:	31 81       	ldd	r19, Z+1	; 0x01
    fe74:	82 0f       	add	r24, r18
    fe76:	93 1f       	adc	r25, r19
    fe78:	20 91 6d 29 	lds	r18, 0x296D	; 0x80296d <__brkval>
    fe7c:	30 91 6e 29 	lds	r19, 0x296E	; 0x80296e <__brkval+0x1>
    fe80:	28 17       	cp	r18, r24
    fe82:	39 07       	cpc	r19, r25
    fe84:	51 f5       	brne	.+84     	; 0xfeda <free+0x88>
    fe86:	e0 93 6d 29 	sts	0x296D, r30	; 0x80296d <__brkval>
    fe8a:	f0 93 6e 29 	sts	0x296E, r31	; 0x80296e <__brkval+0x1>
    fe8e:	67 c0       	rjmp	.+206    	; 0xff5e <free+0x10c>
    fe90:	ed 01       	movw	r28, r26
    fe92:	20 e0       	ldi	r18, 0x00	; 0
    fe94:	30 e0       	ldi	r19, 0x00	; 0
    fe96:	ce 17       	cp	r28, r30
    fe98:	df 07       	cpc	r29, r31
    fe9a:	40 f4       	brcc	.+16     	; 0xfeac <free+0x5a>
    fe9c:	4a 81       	ldd	r20, Y+2	; 0x02
    fe9e:	5b 81       	ldd	r21, Y+3	; 0x03
    fea0:	9e 01       	movw	r18, r28
    fea2:	41 15       	cp	r20, r1
    fea4:	51 05       	cpc	r21, r1
    fea6:	f1 f0       	breq	.+60     	; 0xfee4 <free+0x92>
    fea8:	ea 01       	movw	r28, r20
    feaa:	f5 cf       	rjmp	.-22     	; 0xfe96 <free+0x44>
    feac:	c2 83       	std	Z+2, r28	; 0x02
    feae:	d3 83       	std	Z+3, r29	; 0x03
    feb0:	40 81       	ld	r20, Z
    feb2:	51 81       	ldd	r21, Z+1	; 0x01
    feb4:	84 0f       	add	r24, r20
    feb6:	95 1f       	adc	r25, r21
    feb8:	c8 17       	cp	r28, r24
    feba:	d9 07       	cpc	r29, r25
    febc:	59 f4       	brne	.+22     	; 0xfed4 <free+0x82>
    febe:	88 81       	ld	r24, Y
    fec0:	99 81       	ldd	r25, Y+1	; 0x01
    fec2:	84 0f       	add	r24, r20
    fec4:	95 1f       	adc	r25, r21
    fec6:	02 96       	adiw	r24, 0x02	; 2
    fec8:	80 83       	st	Z, r24
    feca:	91 83       	std	Z+1, r25	; 0x01
    fecc:	8a 81       	ldd	r24, Y+2	; 0x02
    fece:	9b 81       	ldd	r25, Y+3	; 0x03
    fed0:	82 83       	std	Z+2, r24	; 0x02
    fed2:	93 83       	std	Z+3, r25	; 0x03
    fed4:	21 15       	cp	r18, r1
    fed6:	31 05       	cpc	r19, r1
    fed8:	29 f4       	brne	.+10     	; 0xfee4 <free+0x92>
    feda:	e0 93 6f 29 	sts	0x296F, r30	; 0x80296f <__flp>
    fede:	f0 93 70 29 	sts	0x2970, r31	; 0x802970 <__flp+0x1>
    fee2:	3d c0       	rjmp	.+122    	; 0xff5e <free+0x10c>
    fee4:	e9 01       	movw	r28, r18
    fee6:	ea 83       	std	Y+2, r30	; 0x02
    fee8:	fb 83       	std	Y+3, r31	; 0x03
    feea:	49 91       	ld	r20, Y+
    feec:	59 91       	ld	r21, Y+
    feee:	c4 0f       	add	r28, r20
    fef0:	d5 1f       	adc	r29, r21
    fef2:	ec 17       	cp	r30, r28
    fef4:	fd 07       	cpc	r31, r29
    fef6:	61 f4       	brne	.+24     	; 0xff10 <free+0xbe>
    fef8:	80 81       	ld	r24, Z
    fefa:	91 81       	ldd	r25, Z+1	; 0x01
    fefc:	84 0f       	add	r24, r20
    fefe:	95 1f       	adc	r25, r21
    ff00:	02 96       	adiw	r24, 0x02	; 2
    ff02:	e9 01       	movw	r28, r18
    ff04:	88 83       	st	Y, r24
    ff06:	99 83       	std	Y+1, r25	; 0x01
    ff08:	82 81       	ldd	r24, Z+2	; 0x02
    ff0a:	93 81       	ldd	r25, Z+3	; 0x03
    ff0c:	8a 83       	std	Y+2, r24	; 0x02
    ff0e:	9b 83       	std	Y+3, r25	; 0x03
    ff10:	e0 e0       	ldi	r30, 0x00	; 0
    ff12:	f0 e0       	ldi	r31, 0x00	; 0
    ff14:	12 96       	adiw	r26, 0x02	; 2
    ff16:	8d 91       	ld	r24, X+
    ff18:	9c 91       	ld	r25, X
    ff1a:	13 97       	sbiw	r26, 0x03	; 3
    ff1c:	00 97       	sbiw	r24, 0x00	; 0
    ff1e:	19 f0       	breq	.+6      	; 0xff26 <free+0xd4>
    ff20:	fd 01       	movw	r30, r26
    ff22:	dc 01       	movw	r26, r24
    ff24:	f7 cf       	rjmp	.-18     	; 0xff14 <free+0xc2>
    ff26:	8d 91       	ld	r24, X+
    ff28:	9c 91       	ld	r25, X
    ff2a:	11 97       	sbiw	r26, 0x01	; 1
    ff2c:	9d 01       	movw	r18, r26
    ff2e:	2e 5f       	subi	r18, 0xFE	; 254
    ff30:	3f 4f       	sbci	r19, 0xFF	; 255
    ff32:	82 0f       	add	r24, r18
    ff34:	93 1f       	adc	r25, r19
    ff36:	20 91 6d 29 	lds	r18, 0x296D	; 0x80296d <__brkval>
    ff3a:	30 91 6e 29 	lds	r19, 0x296E	; 0x80296e <__brkval+0x1>
    ff3e:	28 17       	cp	r18, r24
    ff40:	39 07       	cpc	r19, r25
    ff42:	69 f4       	brne	.+26     	; 0xff5e <free+0x10c>
    ff44:	30 97       	sbiw	r30, 0x00	; 0
    ff46:	29 f4       	brne	.+10     	; 0xff52 <free+0x100>
    ff48:	10 92 6f 29 	sts	0x296F, r1	; 0x80296f <__flp>
    ff4c:	10 92 70 29 	sts	0x2970, r1	; 0x802970 <__flp+0x1>
    ff50:	02 c0       	rjmp	.+4      	; 0xff56 <free+0x104>
    ff52:	12 82       	std	Z+2, r1	; 0x02
    ff54:	13 82       	std	Z+3, r1	; 0x03
    ff56:	a0 93 6d 29 	sts	0x296D, r26	; 0x80296d <__brkval>
    ff5a:	b0 93 6e 29 	sts	0x296E, r27	; 0x80296e <__brkval+0x1>
    ff5e:	df 91       	pop	r29
    ff60:	cf 91       	pop	r28
    ff62:	08 95       	ret

0000ff64 <strtod>:
    ff64:	8f 92       	push	r8
    ff66:	9f 92       	push	r9
    ff68:	af 92       	push	r10
    ff6a:	bf 92       	push	r11
    ff6c:	cf 92       	push	r12
    ff6e:	df 92       	push	r13
    ff70:	ef 92       	push	r14
    ff72:	ff 92       	push	r15
    ff74:	0f 93       	push	r16
    ff76:	1f 93       	push	r17
    ff78:	cf 93       	push	r28
    ff7a:	df 93       	push	r29
    ff7c:	ec 01       	movw	r28, r24
    ff7e:	6b 01       	movw	r12, r22
    ff80:	61 15       	cp	r22, r1
    ff82:	71 05       	cpc	r23, r1
    ff84:	19 f0       	breq	.+6      	; 0xff8c <strtod+0x28>
    ff86:	fb 01       	movw	r30, r22
    ff88:	80 83       	st	Z, r24
    ff8a:	91 83       	std	Z+1, r25	; 0x01
    ff8c:	7e 01       	movw	r14, r28
    ff8e:	ff ef       	ldi	r31, 0xFF	; 255
    ff90:	ef 1a       	sub	r14, r31
    ff92:	ff 0a       	sbc	r15, r31
    ff94:	08 81       	ld	r16, Y
    ff96:	80 2f       	mov	r24, r16
    ff98:	90 e0       	ldi	r25, 0x00	; 0
    ff9a:	3b d1       	rcall	.+630    	; 0x10212 <isspace>
    ff9c:	89 2b       	or	r24, r25
    ff9e:	11 f0       	breq	.+4      	; 0xffa4 <__DATA_REGION_LENGTH__+0x4>
    ffa0:	e7 01       	movw	r28, r14
    ffa2:	f4 cf       	rjmp	.-24     	; 0xff8c <strtod+0x28>
    ffa4:	0d 32       	cpi	r16, 0x2D	; 45
    ffa6:	39 f4       	brne	.+14     	; 0xffb6 <__DATA_REGION_LENGTH__+0x16>
    ffa8:	7e 01       	movw	r14, r28
    ffaa:	82 e0       	ldi	r24, 0x02	; 2
    ffac:	e8 0e       	add	r14, r24
    ffae:	f1 1c       	adc	r15, r1
    ffb0:	09 81       	ldd	r16, Y+1	; 0x01
    ffb2:	11 e0       	ldi	r17, 0x01	; 1
    ffb4:	08 c0       	rjmp	.+16     	; 0xffc6 <__DATA_REGION_LENGTH__+0x26>
    ffb6:	0b 32       	cpi	r16, 0x2B	; 43
    ffb8:	29 f4       	brne	.+10     	; 0xffc4 <__DATA_REGION_LENGTH__+0x24>
    ffba:	7e 01       	movw	r14, r28
    ffbc:	92 e0       	ldi	r25, 0x02	; 2
    ffbe:	e9 0e       	add	r14, r25
    ffc0:	f1 1c       	adc	r15, r1
    ffc2:	09 81       	ldd	r16, Y+1	; 0x01
    ffc4:	10 e0       	ldi	r17, 0x00	; 0
    ffc6:	e7 01       	movw	r28, r14
    ffc8:	21 97       	sbiw	r28, 0x01	; 1
    ffca:	43 e0       	ldi	r20, 0x03	; 3
    ffcc:	50 e0       	ldi	r21, 0x00	; 0
    ffce:	62 ec       	ldi	r22, 0xC2	; 194
    ffd0:	73 e0       	ldi	r23, 0x03	; 3
    ffd2:	ce 01       	movw	r24, r28
    ffd4:	b4 dc       	rcall	.-1688   	; 0xf93e <strncasecmp_P>
    ffd6:	89 2b       	or	r24, r25
    ffd8:	b9 f4       	brne	.+46     	; 0x10008 <__EEPROM_REGION_LENGTH__+0x8>
    ffda:	23 96       	adiw	r28, 0x03	; 3
    ffdc:	45 e0       	ldi	r20, 0x05	; 5
    ffde:	50 e0       	ldi	r21, 0x00	; 0
    ffe0:	6d eb       	ldi	r22, 0xBD	; 189
    ffe2:	73 e0       	ldi	r23, 0x03	; 3
    ffe4:	ce 01       	movw	r24, r28
    ffe6:	ab dc       	rcall	.-1706   	; 0xf93e <strncasecmp_P>
    ffe8:	89 2b       	or	r24, r25
    ffea:	09 f4       	brne	.+2      	; 0xffee <__DATA_REGION_LENGTH__+0x4e>
    ffec:	25 96       	adiw	r28, 0x05	; 5
    ffee:	c1 14       	cp	r12, r1
    fff0:	d1 04       	cpc	r13, r1
    fff2:	19 f0       	breq	.+6      	; 0xfffa <__DATA_REGION_LENGTH__+0x5a>
    fff4:	f6 01       	movw	r30, r12
    fff6:	c0 83       	st	Z, r28
    fff8:	d1 83       	std	Z+1, r29	; 0x01
    fffa:	11 11       	cpse	r17, r1
    fffc:	f4 c0       	rjmp	.+488    	; 0x101e6 <__EEPROM_REGION_LENGTH__+0x1e6>
    fffe:	60 e0       	ldi	r22, 0x00	; 0
   10000:	70 e0       	ldi	r23, 0x00	; 0
   10002:	80 e8       	ldi	r24, 0x80	; 128
   10004:	9f e7       	ldi	r25, 0x7F	; 127
   10006:	f8 c0       	rjmp	.+496    	; 0x101f8 <__EEPROM_REGION_LENGTH__+0x1f8>
   10008:	43 e0       	ldi	r20, 0x03	; 3
   1000a:	50 e0       	ldi	r21, 0x00	; 0
   1000c:	6a eb       	ldi	r22, 0xBA	; 186
   1000e:	73 e0       	ldi	r23, 0x03	; 3
   10010:	ce 01       	movw	r24, r28
   10012:	95 dc       	rcall	.-1750   	; 0xf93e <strncasecmp_P>
   10014:	89 2b       	or	r24, r25
   10016:	59 f4       	brne	.+22     	; 0x1002e <__EEPROM_REGION_LENGTH__+0x2e>
   10018:	c1 14       	cp	r12, r1
   1001a:	d1 04       	cpc	r13, r1
   1001c:	09 f4       	brne	.+2      	; 0x10020 <__EEPROM_REGION_LENGTH__+0x20>
   1001e:	e8 c0       	rjmp	.+464    	; 0x101f0 <__EEPROM_REGION_LENGTH__+0x1f0>
   10020:	f2 e0       	ldi	r31, 0x02	; 2
   10022:	ef 0e       	add	r14, r31
   10024:	f1 1c       	adc	r15, r1
   10026:	f6 01       	movw	r30, r12
   10028:	e0 82       	st	Z, r14
   1002a:	f1 82       	std	Z+1, r15	; 0x01
   1002c:	e1 c0       	rjmp	.+450    	; 0x101f0 <__EEPROM_REGION_LENGTH__+0x1f0>
   1002e:	20 e0       	ldi	r18, 0x00	; 0
   10030:	30 e0       	ldi	r19, 0x00	; 0
   10032:	a9 01       	movw	r20, r18
   10034:	c0 e0       	ldi	r28, 0x00	; 0
   10036:	d0 e0       	ldi	r29, 0x00	; 0
   10038:	f7 01       	movw	r30, r14
   1003a:	60 ed       	ldi	r22, 0xD0	; 208
   1003c:	a6 2e       	mov	r10, r22
   1003e:	a0 0e       	add	r10, r16
   10040:	89 e0       	ldi	r24, 0x09	; 9
   10042:	8a 15       	cp	r24, r10
   10044:	28 f1       	brcs	.+74     	; 0x10090 <__EEPROM_REGION_LENGTH__+0x90>
   10046:	91 2f       	mov	r25, r17
   10048:	92 60       	ori	r25, 0x02	; 2
   1004a:	b9 2e       	mov	r11, r25
   1004c:	81 2f       	mov	r24, r17
   1004e:	88 70       	andi	r24, 0x08	; 8
   10050:	12 ff       	sbrs	r17, 2
   10052:	04 c0       	rjmp	.+8      	; 0x1005c <__EEPROM_REGION_LENGTH__+0x5c>
   10054:	81 11       	cpse	r24, r1
   10056:	23 c0       	rjmp	.+70     	; 0x1009e <__EEPROM_REGION_LENGTH__+0x9e>
   10058:	21 96       	adiw	r28, 0x01	; 1
   1005a:	21 c0       	rjmp	.+66     	; 0x1009e <__EEPROM_REGION_LENGTH__+0x9e>
   1005c:	81 11       	cpse	r24, r1
   1005e:	21 97       	sbiw	r28, 0x01	; 1
   10060:	a5 e0       	ldi	r26, 0x05	; 5
   10062:	b0 e0       	ldi	r27, 0x00	; 0
   10064:	e0 d9       	rcall	.-3136   	; 0xf426 <__muluhisi3>
   10066:	dc 01       	movw	r26, r24
   10068:	cb 01       	movw	r24, r22
   1006a:	88 0f       	add	r24, r24
   1006c:	99 1f       	adc	r25, r25
   1006e:	aa 1f       	adc	r26, r26
   10070:	bb 1f       	adc	r27, r27
   10072:	9c 01       	movw	r18, r24
   10074:	ad 01       	movw	r20, r26
   10076:	2a 0d       	add	r18, r10
   10078:	31 1d       	adc	r19, r1
   1007a:	41 1d       	adc	r20, r1
   1007c:	51 1d       	adc	r21, r1
   1007e:	28 39       	cpi	r18, 0x98	; 152
   10080:	89 e9       	ldi	r24, 0x99	; 153
   10082:	38 07       	cpc	r19, r24
   10084:	48 07       	cpc	r20, r24
   10086:	89 e1       	ldi	r24, 0x19	; 25
   10088:	58 07       	cpc	r21, r24
   1008a:	48 f0       	brcs	.+18     	; 0x1009e <__EEPROM_REGION_LENGTH__+0x9e>
   1008c:	16 60       	ori	r17, 0x06	; 6
   1008e:	06 c0       	rjmp	.+12     	; 0x1009c <__EEPROM_REGION_LENGTH__+0x9c>
   10090:	9e ef       	ldi	r25, 0xFE	; 254
   10092:	a9 12       	cpse	r10, r25
   10094:	0a c0       	rjmp	.+20     	; 0x100aa <__EEPROM_REGION_LENGTH__+0xaa>
   10096:	13 fd       	sbrc	r17, 3
   10098:	40 c0       	rjmp	.+128    	; 0x1011a <__EEPROM_REGION_LENGTH__+0x11a>
   1009a:	18 60       	ori	r17, 0x08	; 8
   1009c:	b1 2e       	mov	r11, r17
   1009e:	8f ef       	ldi	r24, 0xFF	; 255
   100a0:	e8 1a       	sub	r14, r24
   100a2:	f8 0a       	sbc	r15, r24
   100a4:	00 81       	ld	r16, Z
   100a6:	1b 2d       	mov	r17, r11
   100a8:	c7 cf       	rjmp	.-114    	; 0x10038 <__EEPROM_REGION_LENGTH__+0x38>
   100aa:	80 2f       	mov	r24, r16
   100ac:	8f 7d       	andi	r24, 0xDF	; 223
   100ae:	85 34       	cpi	r24, 0x45	; 69
   100b0:	a1 f5       	brne	.+104    	; 0x1011a <__EEPROM_REGION_LENGTH__+0x11a>
   100b2:	80 81       	ld	r24, Z
   100b4:	8d 32       	cpi	r24, 0x2D	; 45
   100b6:	11 f4       	brne	.+4      	; 0x100bc <__EEPROM_REGION_LENGTH__+0xbc>
   100b8:	10 61       	ori	r17, 0x10	; 16
   100ba:	06 c0       	rjmp	.+12     	; 0x100c8 <__EEPROM_REGION_LENGTH__+0xc8>
   100bc:	8b 32       	cpi	r24, 0x2B	; 43
   100be:	21 f0       	breq	.+8      	; 0x100c8 <__EEPROM_REGION_LENGTH__+0xc8>
   100c0:	31 96       	adiw	r30, 0x01	; 1
   100c2:	61 e0       	ldi	r22, 0x01	; 1
   100c4:	70 e0       	ldi	r23, 0x00	; 0
   100c6:	04 c0       	rjmp	.+8      	; 0x100d0 <__EEPROM_REGION_LENGTH__+0xd0>
   100c8:	81 81       	ldd	r24, Z+1	; 0x01
   100ca:	32 96       	adiw	r30, 0x02	; 2
   100cc:	62 e0       	ldi	r22, 0x02	; 2
   100ce:	70 e0       	ldi	r23, 0x00	; 0
   100d0:	80 53       	subi	r24, 0x30	; 48
   100d2:	8a 30       	cpi	r24, 0x0A	; 10
   100d4:	18 f0       	brcs	.+6      	; 0x100dc <__EEPROM_REGION_LENGTH__+0xdc>
   100d6:	e6 1b       	sub	r30, r22
   100d8:	f7 0b       	sbc	r31, r23
   100da:	1f c0       	rjmp	.+62     	; 0x1011a <__EEPROM_REGION_LENGTH__+0x11a>
   100dc:	60 e0       	ldi	r22, 0x00	; 0
   100de:	70 e0       	ldi	r23, 0x00	; 0
   100e0:	60 38       	cpi	r22, 0x80	; 128
   100e2:	9c e0       	ldi	r25, 0x0C	; 12
   100e4:	79 07       	cpc	r23, r25
   100e6:	5c f4       	brge	.+22     	; 0x100fe <__EEPROM_REGION_LENGTH__+0xfe>
   100e8:	db 01       	movw	r26, r22
   100ea:	aa 0f       	add	r26, r26
   100ec:	bb 1f       	adc	r27, r27
   100ee:	aa 0f       	add	r26, r26
   100f0:	bb 1f       	adc	r27, r27
   100f2:	6a 0f       	add	r22, r26
   100f4:	7b 1f       	adc	r23, r27
   100f6:	66 0f       	add	r22, r22
   100f8:	77 1f       	adc	r23, r23
   100fa:	68 0f       	add	r22, r24
   100fc:	71 1d       	adc	r23, r1
   100fe:	31 96       	adiw	r30, 0x01	; 1
   10100:	df 01       	movw	r26, r30
   10102:	11 97       	sbiw	r26, 0x01	; 1
   10104:	8c 91       	ld	r24, X
   10106:	80 53       	subi	r24, 0x30	; 48
   10108:	8a 30       	cpi	r24, 0x0A	; 10
   1010a:	50 f3       	brcs	.-44     	; 0x100e0 <__EEPROM_REGION_LENGTH__+0xe0>
   1010c:	14 ff       	sbrs	r17, 4
   1010e:	03 c0       	rjmp	.+6      	; 0x10116 <__EEPROM_REGION_LENGTH__+0x116>
   10110:	71 95       	neg	r23
   10112:	61 95       	neg	r22
   10114:	71 09       	sbc	r23, r1
   10116:	c6 0f       	add	r28, r22
   10118:	d7 1f       	adc	r29, r23
   1011a:	11 ff       	sbrs	r17, 1
   1011c:	08 c0       	rjmp	.+16     	; 0x1012e <__EEPROM_REGION_LENGTH__+0x12e>
   1011e:	c1 14       	cp	r12, r1
   10120:	d1 04       	cpc	r13, r1
   10122:	29 f0       	breq	.+10     	; 0x1012e <__EEPROM_REGION_LENGTH__+0x12e>
   10124:	cf 01       	movw	r24, r30
   10126:	01 97       	sbiw	r24, 0x01	; 1
   10128:	f6 01       	movw	r30, r12
   1012a:	80 83       	st	Z, r24
   1012c:	91 83       	std	Z+1, r25	; 0x01
   1012e:	ca 01       	movw	r24, r20
   10130:	b9 01       	movw	r22, r18
   10132:	0e 94 ae 76 	call	0xed5c	; 0xed5c <__floatunsisf>
   10136:	21 2f       	mov	r18, r17
   10138:	23 70       	andi	r18, 0x03	; 3
   1013a:	23 30       	cpi	r18, 0x03	; 3
   1013c:	19 f0       	breq	.+6      	; 0x10144 <__EEPROM_REGION_LENGTH__+0x144>
   1013e:	4b 01       	movw	r8, r22
   10140:	5c 01       	movw	r10, r24
   10142:	06 c0       	rjmp	.+12     	; 0x10150 <__EEPROM_REGION_LENGTH__+0x150>
   10144:	4b 01       	movw	r8, r22
   10146:	5c 01       	movw	r10, r24
   10148:	b7 fa       	bst	r11, 7
   1014a:	b0 94       	com	r11
   1014c:	b7 f8       	bld	r11, 7
   1014e:	b0 94       	com	r11
   10150:	20 e0       	ldi	r18, 0x00	; 0
   10152:	30 e0       	ldi	r19, 0x00	; 0
   10154:	a9 01       	movw	r20, r18
   10156:	c5 01       	movw	r24, r10
   10158:	b4 01       	movw	r22, r8
   1015a:	0e 94 0e 76 	call	0xec1c	; 0xec1c <__cmpsf2>
   1015e:	88 23       	and	r24, r24
   10160:	09 f4       	brne	.+2      	; 0x10164 <__EEPROM_REGION_LENGTH__+0x164>
   10162:	3e c0       	rjmp	.+124    	; 0x101e0 <__EEPROM_REGION_LENGTH__+0x1e0>
   10164:	d7 ff       	sbrs	r29, 7
   10166:	06 c0       	rjmp	.+12     	; 0x10174 <__EEPROM_REGION_LENGTH__+0x174>
   10168:	d1 95       	neg	r29
   1016a:	c1 95       	neg	r28
   1016c:	d1 09       	sbc	r29, r1
   1016e:	09 ed       	ldi	r16, 0xD9	; 217
   10170:	13 e0       	ldi	r17, 0x03	; 3
   10172:	02 c0       	rjmp	.+4      	; 0x10178 <__EEPROM_REGION_LENGTH__+0x178>
   10174:	01 ef       	ldi	r16, 0xF1	; 241
   10176:	13 e0       	ldi	r17, 0x03	; 3
   10178:	68 01       	movw	r12, r16
   1017a:	f8 e1       	ldi	r31, 0x18	; 24
   1017c:	cf 1a       	sub	r12, r31
   1017e:	d1 08       	sbc	r13, r1
   10180:	90 e2       	ldi	r25, 0x20	; 32
   10182:	e9 2e       	mov	r14, r25
   10184:	f1 2c       	mov	r15, r1
   10186:	ce 15       	cp	r28, r14
   10188:	df 05       	cpc	r29, r15
   1018a:	74 f0       	brlt	.+28     	; 0x101a8 <__EEPROM_REGION_LENGTH__+0x1a8>
   1018c:	f8 01       	movw	r30, r16
   1018e:	25 91       	lpm	r18, Z+
   10190:	35 91       	lpm	r19, Z+
   10192:	45 91       	lpm	r20, Z+
   10194:	54 91       	lpm	r21, Z
   10196:	c5 01       	movw	r24, r10
   10198:	b4 01       	movw	r22, r8
   1019a:	0e 94 9d 77 	call	0xef3a	; 0xef3a <__mulsf3>
   1019e:	4b 01       	movw	r8, r22
   101a0:	5c 01       	movw	r10, r24
   101a2:	ce 19       	sub	r28, r14
   101a4:	df 09       	sbc	r29, r15
   101a6:	ef cf       	rjmp	.-34     	; 0x10186 <__EEPROM_REGION_LENGTH__+0x186>
   101a8:	04 50       	subi	r16, 0x04	; 4
   101aa:	11 09       	sbc	r17, r1
   101ac:	f5 94       	asr	r15
   101ae:	e7 94       	ror	r14
   101b0:	0c 15       	cp	r16, r12
   101b2:	1d 05       	cpc	r17, r13
   101b4:	41 f7       	brne	.-48     	; 0x10186 <__EEPROM_REGION_LENGTH__+0x186>
   101b6:	8a 2d       	mov	r24, r10
   101b8:	88 0f       	add	r24, r24
   101ba:	8b 2d       	mov	r24, r11
   101bc:	88 1f       	adc	r24, r24
   101be:	8f 3f       	cpi	r24, 0xFF	; 255
   101c0:	49 f0       	breq	.+18     	; 0x101d4 <__EEPROM_REGION_LENGTH__+0x1d4>
   101c2:	20 e0       	ldi	r18, 0x00	; 0
   101c4:	30 e0       	ldi	r19, 0x00	; 0
   101c6:	a9 01       	movw	r20, r18
   101c8:	c5 01       	movw	r24, r10
   101ca:	b4 01       	movw	r22, r8
   101cc:	0e 94 0e 76 	call	0xec1c	; 0xec1c <__cmpsf2>
   101d0:	81 11       	cpse	r24, r1
   101d2:	06 c0       	rjmp	.+12     	; 0x101e0 <__EEPROM_REGION_LENGTH__+0x1e0>
   101d4:	82 e2       	ldi	r24, 0x22	; 34
   101d6:	90 e0       	ldi	r25, 0x00	; 0
   101d8:	80 93 71 29 	sts	0x2971, r24	; 0x802971 <errno>
   101dc:	90 93 72 29 	sts	0x2972, r25	; 0x802972 <errno+0x1>
   101e0:	c5 01       	movw	r24, r10
   101e2:	b4 01       	movw	r22, r8
   101e4:	09 c0       	rjmp	.+18     	; 0x101f8 <__EEPROM_REGION_LENGTH__+0x1f8>
   101e6:	60 e0       	ldi	r22, 0x00	; 0
   101e8:	70 e0       	ldi	r23, 0x00	; 0
   101ea:	80 e8       	ldi	r24, 0x80	; 128
   101ec:	9f ef       	ldi	r25, 0xFF	; 255
   101ee:	04 c0       	rjmp	.+8      	; 0x101f8 <__EEPROM_REGION_LENGTH__+0x1f8>
   101f0:	60 e0       	ldi	r22, 0x00	; 0
   101f2:	70 e0       	ldi	r23, 0x00	; 0
   101f4:	80 ec       	ldi	r24, 0xC0	; 192
   101f6:	9f e7       	ldi	r25, 0x7F	; 127
   101f8:	df 91       	pop	r29
   101fa:	cf 91       	pop	r28
   101fc:	1f 91       	pop	r17
   101fe:	0f 91       	pop	r16
   10200:	ff 90       	pop	r15
   10202:	ef 90       	pop	r14
   10204:	df 90       	pop	r13
   10206:	cf 90       	pop	r12
   10208:	bf 90       	pop	r11
   1020a:	af 90       	pop	r10
   1020c:	9f 90       	pop	r9
   1020e:	8f 90       	pop	r8
   10210:	08 95       	ret

00010212 <isspace>:
   10212:	91 11       	cpse	r25, r1
   10214:	0d c0       	rjmp	.+26     	; 0x10230 <__ctype_isfalse>
   10216:	80 32       	cpi	r24, 0x20	; 32
   10218:	19 f0       	breq	.+6      	; 0x10220 <isspace+0xe>
   1021a:	89 50       	subi	r24, 0x09	; 9
   1021c:	85 50       	subi	r24, 0x05	; 5
   1021e:	d0 f7       	brcc	.-12     	; 0x10214 <isspace+0x2>
   10220:	08 95       	ret

00010222 <memset>:
   10222:	dc 01       	movw	r26, r24
   10224:	01 c0       	rjmp	.+2      	; 0x10228 <memset+0x6>
   10226:	6d 93       	st	X+, r22
   10228:	41 50       	subi	r20, 0x01	; 1
   1022a:	50 40       	sbci	r21, 0x00	; 0
   1022c:	e0 f7       	brcc	.-8      	; 0x10226 <memset+0x4>
   1022e:	08 95       	ret

00010230 <__ctype_isfalse>:
   10230:	99 27       	eor	r25, r25
   10232:	88 27       	eor	r24, r24

00010234 <__ctype_istrue>:
   10234:	08 95       	ret

00010236 <_exit>:
   10236:	f8 94       	cli

00010238 <__stop_program>:
   10238:	ff cf       	rjmp	.-2      	; 0x10238 <__stop_program>
