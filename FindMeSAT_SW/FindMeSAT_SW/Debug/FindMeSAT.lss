
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000422e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00802000  0000422e  000042c2  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002da  0080211e  0080211e  000043e2  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000043e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00004410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f0  00000000  00000000  00004458  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015758  00000000  00000000  00004c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005cea  00000000  00000000  0001a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ac5f  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002160  00000000  00000000  0002acec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003c8e9  00000000  00000000  0002ce4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007851  00000000  00000000  00069735  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000848  00000000  00000000  00070f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d2cd  00000000  00000000  000717d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	2a c1       	rjmp	.+596    	; 0x25a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c1       	rjmp	.+592    	; 0x25a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c1       	rjmp	.+588    	; 0x25a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c1       	rjmp	.+584    	; 0x25a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c1       	rjmp	.+576    	; 0x25a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c1       	rjmp	.+572    	; 0x25a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c1       	rjmp	.+568    	; 0x25a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__vector_10>
      2c:	7a c1       	rjmp	.+756    	; 0x322 <__vector_11>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__vector_13>
      38:	86 c5       	rjmp	.+2828   	; 0xb46 <__vector_14>
      3a:	00 00       	nop
      3c:	b1 c5       	rjmp	.+2914   	; 0xba0 <__vector_15>
      3e:	00 00       	nop
      40:	dc c5       	rjmp	.+3000   	; 0xbfa <__vector_16>
      42:	00 00       	nop
      44:	07 c6       	rjmp	.+3086   	; 0xc54 <__vector_17>
      46:	00 00       	nop
      48:	32 c6       	rjmp	.+3172   	; 0xcae <__vector_18>
      4a:	00 00       	nop
      4c:	5d c6       	rjmp	.+3258   	; 0xd08 <__vector_19>
      4e:	00 00       	nop
      50:	88 c6       	rjmp	.+3344   	; 0xd62 <__vector_20>
      52:	00 00       	nop
      54:	b3 c6       	rjmp	.+3430   	; 0xdbc <__vector_21>
      56:	00 00       	nop
      58:	de c6       	rjmp	.+3516   	; 0xe16 <__vector_22>
      5a:	00 00       	nop
      5c:	09 c7       	rjmp	.+3602   	; 0xe70 <__vector_23>
      5e:	00 00       	nop
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	f8 c0       	rjmp	.+496    	; 0x25a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c0       	rjmp	.+460    	; 0x25a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c0       	rjmp	.+456    	; 0x25a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c0       	rjmp	.+452    	; 0x25a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c0       	rjmp	.+448    	; 0x25a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	a9 c2       	rjmp	.+1362   	; 0x5f0 <__vector_39>
      9e:	00 00       	nop
      a0:	d9 c2       	rjmp	.+1458   	; 0x654 <__vector_40>
      a2:	00 00       	nop
      a4:	09 c3       	rjmp	.+1554   	; 0x6b8 <__vector_41>
      a6:	00 00       	nop
      a8:	39 c3       	rjmp	.+1650   	; 0x71c <__vector_42>
      aa:	00 00       	nop
      ac:	d6 c0       	rjmp	.+428    	; 0x25a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c0       	rjmp	.+424    	; 0x25a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c0       	rjmp	.+420    	; 0x25a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__vector_46>
      bc:	0c 94 27 09 	jmp	0x124e	; 0x124e <__vector_47>
      c0:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_48>
      c4:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__vector_49>
      c8:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__vector_50>
      cc:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__vector_51>
      d0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__vector_52>
      d4:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_53>
      d8:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__vector_54>
      dc:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_55>
      e0:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__vector_56>
      e4:	ba c0       	rjmp	.+372    	; 0x25a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b6 c0       	rjmp	.+364    	; 0x25a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b4 c0       	rjmp	.+360    	; 0x25a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b2 c0       	rjmp	.+356    	; 0x25a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b0 c0       	rjmp	.+352    	; 0x25a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ae c0       	rjmp	.+348    	; 0x25a <__bad_interrupt>
      fe:	00 00       	nop
     100:	ac c0       	rjmp	.+344    	; 0x25a <__bad_interrupt>
     102:	00 00       	nop
     104:	aa c0       	rjmp	.+340    	; 0x25a <__bad_interrupt>
     106:	00 00       	nop
     108:	a8 c0       	rjmp	.+336    	; 0x25a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a6 c0       	rjmp	.+332    	; 0x25a <__bad_interrupt>
     10e:	00 00       	nop
     110:	a4 c0       	rjmp	.+328    	; 0x25a <__bad_interrupt>
     112:	00 00       	nop
     114:	a2 c0       	rjmp	.+324    	; 0x25a <__bad_interrupt>
     116:	00 00       	nop
     118:	a0 c0       	rjmp	.+320    	; 0x25a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a1 c1       	rjmp	.+834    	; 0x460 <__vector_71>
     11e:	00 00       	nop
     120:	d1 c1       	rjmp	.+930    	; 0x4c4 <__vector_72>
     122:	00 00       	nop
     124:	01 c2       	rjmp	.+1026   	; 0x528 <__vector_73>
     126:	00 00       	nop
     128:	31 c2       	rjmp	.+1122   	; 0x58c <__vector_74>
     12a:	00 00       	nop
     12c:	96 c0       	rjmp	.+300    	; 0x25a <__bad_interrupt>
     12e:	00 00       	nop
     130:	94 c0       	rjmp	.+296    	; 0x25a <__bad_interrupt>
     132:	00 00       	nop
     134:	ca c6       	rjmp	.+3476   	; 0xeca <__vector_77>
     136:	00 00       	nop
     138:	f5 c6       	rjmp	.+3562   	; 0xf24 <__vector_78>
     13a:	00 00       	nop
     13c:	20 c7       	rjmp	.+3648   	; 0xf7e <__vector_79>
     13e:	00 00       	nop
     140:	4b c7       	rjmp	.+3734   	; 0xfd8 <__vector_80>
     142:	00 00       	nop
     144:	76 c7       	rjmp	.+3820   	; 0x1032 <__vector_81>
     146:	00 00       	nop
     148:	a1 c7       	rjmp	.+3906   	; 0x108c <__vector_82>
     14a:	00 00       	nop
     14c:	cc c7       	rjmp	.+3992   	; 0x10e6 <__vector_83>
     14e:	00 00       	nop
     150:	f7 c7       	rjmp	.+4078   	; 0x1140 <__vector_84>
     152:	00 00       	nop
     154:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__vector_85>
     158:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__vector_86>
     15c:	7e c0       	rjmp	.+252    	; 0x25a <__bad_interrupt>
     15e:	00 00       	nop
     160:	7c c0       	rjmp	.+248    	; 0x25a <__bad_interrupt>
     162:	00 00       	nop
     164:	7a c0       	rjmp	.+244    	; 0x25a <__bad_interrupt>
     166:	00 00       	nop
     168:	78 c0       	rjmp	.+240    	; 0x25a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	76 c0       	rjmp	.+236    	; 0x25a <__bad_interrupt>
     16e:	00 00       	nop
     170:	74 c0       	rjmp	.+232    	; 0x25a <__bad_interrupt>
     172:	00 00       	nop
     174:	72 c0       	rjmp	.+228    	; 0x25a <__bad_interrupt>
     176:	00 00       	nop
     178:	70 c0       	rjmp	.+224    	; 0x25a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6e c0       	rjmp	.+220    	; 0x25a <__bad_interrupt>
     17e:	00 00       	nop
     180:	6c c0       	rjmp	.+216    	; 0x25a <__bad_interrupt>
     182:	00 00       	nop
     184:	6a c0       	rjmp	.+212    	; 0x25a <__bad_interrupt>
     186:	00 00       	nop
     188:	68 c0       	rjmp	.+208    	; 0x25a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	66 c0       	rjmp	.+204    	; 0x25a <__bad_interrupt>
     18e:	00 00       	nop
     190:	64 c0       	rjmp	.+200    	; 0x25a <__bad_interrupt>
     192:	00 00       	nop
     194:	62 c0       	rjmp	.+196    	; 0x25a <__bad_interrupt>
     196:	00 00       	nop
     198:	60 c0       	rjmp	.+192    	; 0x25a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5e c0       	rjmp	.+188    	; 0x25a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5c c0       	rjmp	.+184    	; 0x25a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5a c0       	rjmp	.+180    	; 0x25a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	58 c0       	rjmp	.+176    	; 0x25a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	56 c0       	rjmp	.+172    	; 0x25a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__vector_108>
     1b4:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_109>
     1b8:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_110>
     1bc:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__vector_111>
     1c0:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__vector_112>
     1c4:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__vector_113>
     1c8:	48 c0       	rjmp	.+144    	; 0x25a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	46 c0       	rjmp	.+140    	; 0x25a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	44 c0       	rjmp	.+136    	; 0x25a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	42 c0       	rjmp	.+132    	; 0x25a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	40 c0       	rjmp	.+128    	; 0x25a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3e c0       	rjmp	.+124    	; 0x25a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3c c0       	rjmp	.+120    	; 0x25a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3a c0       	rjmp	.+116    	; 0x25a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	38 c0       	rjmp	.+112    	; 0x25a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	36 c0       	rjmp	.+108    	; 0x25a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__vector_125>
     1f8:	0c 94 47 14 	jmp	0x288e	; 0x288e <__vector_126>
     1fc:	6e 0e       	add	r6, r30
     1fe:	71 0e       	add	r7, r17
     200:	74 0e       	add	r7, r20
     202:	77 0e       	add	r7, r23
     204:	7a 0e       	add	r7, r26
     206:	7d 0e       	add	r7, r29
     208:	80 0e       	add	r8, r16
     20a:	bf 15       	cp	r27, r15
     20c:	d2 15       	cp	r29, r2
     20e:	e5 15       	cp	r30, r5
     210:	f8 15       	cp	r31, r8
     212:	0b 16       	cp	r0, r27
     214:	1e 16       	cp	r1, r30
     216:	31 16       	cp	r3, r17

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df e5       	ldi	r29, 0x5F	; 95
     222:	de bf       	out	0x3e, r29	; 62
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	ee e2       	ldi	r30, 0x2E	; 46
     230:	f2 e4       	ldi	r31, 0x42	; 66
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	ae 31       	cpi	r26, 0x1E	; 30
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	23 e2       	ldi	r18, 0x23	; 35
     244:	ae e1       	ldi	r26, 0x1E	; 30
     246:	b1 e2       	ldi	r27, 0x21	; 33
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a8 3f       	cpi	r26, 0xF8	; 248
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <main>
     256:	0c 94 15 21 	jmp	0x422a	; 0x422a <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
     25c:	04 c0       	rjmp	.+8      	; 0x266 <__portable_avr_delay_cycles+0xa>
     25e:	61 50       	subi	r22, 0x01	; 1
     260:	71 09       	sbc	r23, r1
     262:	81 09       	sbc	r24, r1
     264:	91 09       	sbc	r25, r1
     266:	61 15       	cp	r22, r1
     268:	71 05       	cpc	r23, r1
     26a:	81 05       	cpc	r24, r1
     26c:	91 05       	cpc	r25, r1
     26e:	b9 f7       	brne	.-18     	; 0x25e <__portable_avr_delay_cycles+0x2>
     270:	08 95       	ret

00000272 <rtc_get_time>:
     272:	80 e1       	ldi	r24, 0x10	; 16
     274:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     278:	e0 e2       	ldi	r30, 0x20	; 32
     27a:	f4 e0       	ldi	r31, 0x04	; 4
     27c:	81 81       	ldd	r24, Z+1	; 0x01
     27e:	84 fd       	sbrc	r24, 4
     280:	fd cf       	rjmp	.-6      	; 0x27c <rtc_get_time+0xa>
     282:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
     286:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     28a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     28e:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     292:	08 95       	ret

00000294 <rtc_set_callback>:
     294:	80 93 dc 23 	sts	0x23DC, r24	; 0x8023dc <rtc_data>
     298:	90 93 dd 23 	sts	0x23DD, r25	; 0x8023dd <rtc_data+0x1>
     29c:	08 95       	ret

0000029e <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
     2aa:	c0 ef       	ldi	r28, 0xF0	; 240
     2ac:	d0 e0       	ldi	r29, 0x00	; 0
     2ae:	88 81       	ld	r24, Y
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	80 ef       	ldi	r24, 0xF0	; 240
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 b9 20 	call	0x4172	; 0x4172 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
     2be:	88 81       	ld	r24, Y
     2c0:	84 60       	ori	r24, 0x04	; 4
     2c2:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
     2c4:	69 ee       	ldi	r22, 0xE9	; 233
     2c6:	73 e0       	ldi	r23, 0x03	; 3
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	c7 df       	rcall	.-114    	; 0x25c <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
     2ce:	88 81       	ld	r24, Y
     2d0:	88 61       	ori	r24, 0x18	; 24
     2d2:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
     2d4:	e0 ef       	ldi	r30, 0xF0	; 240
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	83 ff       	sbrs	r24, 3
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
     2de:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     2e2:	e0 e2       	ldi	r30, 0x20	; 32
     2e4:	f4 e0       	ldi	r31, 0x04	; 4
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
     2e8:	80 fd       	sbrc	r24, 0
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
     2ec:	e0 e2       	ldi	r30, 0x20	; 32
     2ee:	f4 e0       	ldi	r31, 0x04	; 4
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	9f ef       	ldi	r25, 0xFF	; 255
     2f4:	dc 01       	movw	r26, r24
     2f6:	80 87       	std	Z+8, r24	; 0x08
     2f8:	91 87       	std	Z+9, r25	; 0x09
     2fa:	a2 87       	std	Z+10, r26	; 0x0a
     2fc:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
     2fe:	14 82       	std	Z+4, r1	; 0x04
     300:	15 82       	std	Z+5, r1	; 0x05
     302:	16 82       	std	Z+6, r1	; 0x06
     304:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     306:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
     308:	80 fd       	sbrc	r24, 0
     30a:	fd cf       	rjmp	.-6      	; 0x306 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
     30c:	e0 e2       	ldi	r30, 0x20	; 32
     30e:	f4 e0       	ldi	r31, 0x04	; 4
     310:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     316:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
     318:	80 fd       	sbrc	r24, 0
     31a:	fd cf       	rjmp	.-6      	; 0x316 <rtc_init+0x78>
}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	0b b6       	in	r0, 0x3b	; 59
     32e:	0f 92       	push	r0
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ef 93       	push	r30
     34a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
     34c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
     350:	c0 91 dc 23 	lds	r28, 0x23DC	; 0x8023dc <rtc_data>
     354:	d0 91 dd 23 	lds	r29, 0x23DD	; 0x8023dd <rtc_data+0x1>
     358:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
     35a:	19 f0       	breq	.+6      	; 0x362 <__vector_11+0x40>
     35c:	8a df       	rcall	.-236    	; 0x272 <rtc_get_time>
     35e:	fe 01       	movw	r30, r28
}
     360:	19 95       	eicall
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <twi_init>:
#endif


void twi_init(void) {
#ifdef TWI1_MASTER
	TWI1_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA1
     38c:	e0 e8       	ldi	r30, 0x80	; 128
     38e:	f6 e0       	ldi	r31, 0x06	; 6
     390:	88 e3       	ldi	r24, 0x38	; 56
     392:	80 8b       	std	Z+16, r24	; 0x10
	TWI1_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL1
     394:	81 8b       	std	Z+17, r24	; 0x11
#endif
	
#ifdef TWI2_MASTER
	TWI2_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA2
     396:	e0 e4       	ldi	r30, 0x40	; 64
     398:	f6 e0       	ldi	r31, 0x06	; 6
     39a:	80 8b       	std	Z+16, r24	; 0x10
	TWI2_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL2
     39c:	81 8b       	std	Z+17, r24	; 0x11
     39e:	08 95       	ret

000003a0 <twi_start>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     3a0:	60 e4       	ldi	r22, 0x40	; 64
     3a2:	85 e0       	ldi	r24, 0x05	; 5
     3a4:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
#else
#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
     3a8:	69 e0       	ldi	r22, 0x09	; 9
     3aa:	70 e2       	ldi	r23, 0x20	; 32
     3ac:	80 ea       	ldi	r24, 0xA0	; 160
     3ae:	94 e0       	ldi	r25, 0x04	; 4
     3b0:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
     3b4:	e0 ea       	ldi	r30, 0xA0	; 160
     3b6:	f4 e0       	ldi	r31, 0x04	; 4
     3b8:	81 81       	ldd	r24, Z+1	; 0x01
     3ba:	88 60       	ori	r24, 0x08	; 8
     3bc:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     3be:	60 e4       	ldi	r22, 0x40	; 64
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
#else
#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	70 e2       	ldi	r23, 0x20	; 32
     3ca:	80 e8       	ldi	r24, 0x80	; 128
     3cc:	94 e0       	ldi	r25, 0x04	; 4
     3ce:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <twi_master_init>
     3d2:	e0 e8       	ldi	r30, 0x80	; 128
     3d4:	f4 e0       	ldi	r31, 0x04	; 4
     3d6:	81 81       	ldd	r24, Z+1	; 0x01
     3d8:	88 60       	ori	r24, 0x08	; 8
     3da:	81 83       	std	Z+1, r24	; 0x01
     3dc:	08 95       	ret

000003de <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     3de:	08 95       	ret

000003e0 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     3e0:	81 15       	cp	r24, r1
     3e2:	22 e0       	ldi	r18, 0x02	; 2
     3e4:	92 07       	cpc	r25, r18
     3e6:	69 f4       	brne	.+26     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     3e8:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <adca_enable_count>
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	98 0f       	add	r25, r24
     3f0:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <adca_enable_count>
     3f4:	81 11       	cpse	r24, r1
     3f6:	14 c0       	rjmp	.+40     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     3f8:	62 e0       	ldi	r22, 0x02	; 2
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <sysclk_enable_module>
     400:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     402:	80 34       	cpi	r24, 0x40	; 64
     404:	92 40       	sbci	r25, 0x02	; 2
     406:	61 f4       	brne	.+24     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     408:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <__data_end>
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	98 0f       	add	r25, r24
     410:	90 93 1e 21 	sts	0x211E, r25	; 0x80211e <__data_end>
     414:	81 11       	cpse	r24, r1
     416:	04 c0       	rjmp	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     418:	62 e0       	ldi	r22, 0x02	; 2
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <sysclk_enable_module>
     420:	08 95       	ret

00000422 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     422:	81 15       	cp	r24, r1
     424:	22 e0       	ldi	r18, 0x02	; 2
     426:	92 07       	cpc	r25, r18
     428:	61 f4       	brne	.+24     	; 0x442 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     42a:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <adca_enable_count>
     42e:	81 50       	subi	r24, 0x01	; 1
     430:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <adca_enable_count>
     434:	81 11       	cpse	r24, r1
     436:	13 c0       	rjmp	.+38     	; 0x45e <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     438:	62 e0       	ldi	r22, 0x02	; 2
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <sysclk_disable_module>
     440:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     442:	80 34       	cpi	r24, 0x40	; 64
     444:	92 40       	sbci	r25, 0x02	; 2
     446:	59 f4       	brne	.+22     	; 0x45e <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     448:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <__data_end>
     44c:	81 50       	subi	r24, 0x01	; 1
     44e:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <__data_end>
     452:	81 11       	cpse	r24, r1
     454:	04 c0       	rjmp	.+8      	; 0x45e <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     456:	62 e0       	ldi	r22, 0x02	; 2
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <sysclk_disable_module>
     45e:	08 95       	ret

00000460 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     460:	1f 92       	push	r1
     462:	0f 92       	push	r0
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	0f 92       	push	r0
     468:	11 24       	eor	r1, r1
     46a:	0b b6       	in	r0, 0x3b	; 59
     46c:	0f 92       	push	r0
     46e:	2f 93       	push	r18
     470:	3f 93       	push	r19
     472:	4f 93       	push	r20
     474:	5f 93       	push	r21
     476:	6f 93       	push	r22
     478:	7f 93       	push	r23
     47a:	8f 93       	push	r24
     47c:	9f 93       	push	r25
     47e:	af 93       	push	r26
     480:	bf 93       	push	r27
     482:	ef 93       	push	r30
     484:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     486:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     48a:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     48e:	e0 91 e0 23 	lds	r30, 0x23E0	; 0x8023e0 <adca_callback>
     492:	f0 91 e1 23 	lds	r31, 0x23E1	; 0x8023e1 <adca_callback+0x1>
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	19 95       	eicall
}
     49e:	ff 91       	pop	r31
     4a0:	ef 91       	pop	r30
     4a2:	bf 91       	pop	r27
     4a4:	af 91       	pop	r26
     4a6:	9f 91       	pop	r25
     4a8:	8f 91       	pop	r24
     4aa:	7f 91       	pop	r23
     4ac:	6f 91       	pop	r22
     4ae:	5f 91       	pop	r21
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0b be       	out	0x3b, r0	; 59
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	0b b6       	in	r0, 0x3b	; 59
     4d0:	0f 92       	push	r0
     4d2:	2f 93       	push	r18
     4d4:	3f 93       	push	r19
     4d6:	4f 93       	push	r20
     4d8:	5f 93       	push	r21
     4da:	6f 93       	push	r22
     4dc:	7f 93       	push	r23
     4de:	8f 93       	push	r24
     4e0:	9f 93       	push	r25
     4e2:	af 93       	push	r26
     4e4:	bf 93       	push	r27
     4e6:	ef 93       	push	r30
     4e8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     4ea:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     4ee:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     4f2:	e0 91 e0 23 	lds	r30, 0x23E0	; 0x8023e0 <adca_callback>
     4f6:	f0 91 e1 23 	lds	r31, 0x23E1	; 0x8023e1 <adca_callback+0x1>
     4fa:	62 e0       	ldi	r22, 0x02	; 2
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	19 95       	eicall
}
     502:	ff 91       	pop	r31
     504:	ef 91       	pop	r30
     506:	bf 91       	pop	r27
     508:	af 91       	pop	r26
     50a:	9f 91       	pop	r25
     50c:	8f 91       	pop	r24
     50e:	7f 91       	pop	r23
     510:	6f 91       	pop	r22
     512:	5f 91       	pop	r21
     514:	4f 91       	pop	r20
     516:	3f 91       	pop	r19
     518:	2f 91       	pop	r18
     51a:	0f 90       	pop	r0
     51c:	0b be       	out	0x3b, r0	; 59
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0
     524:	1f 90       	pop	r1
     526:	18 95       	reti

00000528 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     528:	1f 92       	push	r1
     52a:	0f 92       	push	r0
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	0f 92       	push	r0
     530:	11 24       	eor	r1, r1
     532:	0b b6       	in	r0, 0x3b	; 59
     534:	0f 92       	push	r0
     536:	2f 93       	push	r18
     538:	3f 93       	push	r19
     53a:	4f 93       	push	r20
     53c:	5f 93       	push	r21
     53e:	6f 93       	push	r22
     540:	7f 93       	push	r23
     542:	8f 93       	push	r24
     544:	9f 93       	push	r25
     546:	af 93       	push	r26
     548:	bf 93       	push	r27
     54a:	ef 93       	push	r30
     54c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     54e:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     552:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     556:	e0 91 e0 23 	lds	r30, 0x23E0	; 0x8023e0 <adca_callback>
     55a:	f0 91 e1 23 	lds	r31, 0x23E1	; 0x8023e1 <adca_callback+0x1>
     55e:	64 e0       	ldi	r22, 0x04	; 4
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	19 95       	eicall
}
     566:	ff 91       	pop	r31
     568:	ef 91       	pop	r30
     56a:	bf 91       	pop	r27
     56c:	af 91       	pop	r26
     56e:	9f 91       	pop	r25
     570:	8f 91       	pop	r24
     572:	7f 91       	pop	r23
     574:	6f 91       	pop	r22
     576:	5f 91       	pop	r21
     578:	4f 91       	pop	r20
     57a:	3f 91       	pop	r19
     57c:	2f 91       	pop	r18
     57e:	0f 90       	pop	r0
     580:	0b be       	out	0x3b, r0	; 59
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     58c:	1f 92       	push	r1
     58e:	0f 92       	push	r0
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	0f 92       	push	r0
     594:	11 24       	eor	r1, r1
     596:	0b b6       	in	r0, 0x3b	; 59
     598:	0f 92       	push	r0
     59a:	2f 93       	push	r18
     59c:	3f 93       	push	r19
     59e:	4f 93       	push	r20
     5a0:	5f 93       	push	r21
     5a2:	6f 93       	push	r22
     5a4:	7f 93       	push	r23
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
     5aa:	af 93       	push	r26
     5ac:	bf 93       	push	r27
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     5b2:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     5b6:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     5ba:	e0 91 e0 23 	lds	r30, 0x23E0	; 0x8023e0 <adca_callback>
     5be:	f0 91 e1 23 	lds	r31, 0x23E1	; 0x8023e1 <adca_callback+0x1>
     5c2:	68 e0       	ldi	r22, 0x08	; 8
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	19 95       	eicall
}
     5ca:	ff 91       	pop	r31
     5cc:	ef 91       	pop	r30
     5ce:	bf 91       	pop	r27
     5d0:	af 91       	pop	r26
     5d2:	9f 91       	pop	r25
     5d4:	8f 91       	pop	r24
     5d6:	7f 91       	pop	r23
     5d8:	6f 91       	pop	r22
     5da:	5f 91       	pop	r21
     5dc:	4f 91       	pop	r20
     5de:	3f 91       	pop	r19
     5e0:	2f 91       	pop	r18
     5e2:	0f 90       	pop	r0
     5e4:	0b be       	out	0x3b, r0	; 59
     5e6:	0f 90       	pop	r0
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	0f 90       	pop	r0
     5ec:	1f 90       	pop	r1
     5ee:	18 95       	reti

000005f0 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     5f0:	1f 92       	push	r1
     5f2:	0f 92       	push	r0
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	0f 92       	push	r0
     5f8:	11 24       	eor	r1, r1
     5fa:	0b b6       	in	r0, 0x3b	; 59
     5fc:	0f 92       	push	r0
     5fe:	2f 93       	push	r18
     600:	3f 93       	push	r19
     602:	4f 93       	push	r20
     604:	5f 93       	push	r21
     606:	6f 93       	push	r22
     608:	7f 93       	push	r23
     60a:	8f 93       	push	r24
     60c:	9f 93       	push	r25
     60e:	af 93       	push	r26
     610:	bf 93       	push	r27
     612:	ef 93       	push	r30
     614:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     616:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     61a:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     61e:	e0 91 de 23 	lds	r30, 0x23DE	; 0x8023de <adcb_callback>
     622:	f0 91 df 23 	lds	r31, 0x23DF	; 0x8023df <adcb_callback+0x1>
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	80 e4       	ldi	r24, 0x40	; 64
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	19 95       	eicall
}
     62e:	ff 91       	pop	r31
     630:	ef 91       	pop	r30
     632:	bf 91       	pop	r27
     634:	af 91       	pop	r26
     636:	9f 91       	pop	r25
     638:	8f 91       	pop	r24
     63a:	7f 91       	pop	r23
     63c:	6f 91       	pop	r22
     63e:	5f 91       	pop	r21
     640:	4f 91       	pop	r20
     642:	3f 91       	pop	r19
     644:	2f 91       	pop	r18
     646:	0f 90       	pop	r0
     648:	0b be       	out	0x3b, r0	; 59
     64a:	0f 90       	pop	r0
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	0f 90       	pop	r0
     650:	1f 90       	pop	r1
     652:	18 95       	reti

00000654 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     654:	1f 92       	push	r1
     656:	0f 92       	push	r0
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	0f 92       	push	r0
     65c:	11 24       	eor	r1, r1
     65e:	0b b6       	in	r0, 0x3b	; 59
     660:	0f 92       	push	r0
     662:	2f 93       	push	r18
     664:	3f 93       	push	r19
     666:	4f 93       	push	r20
     668:	5f 93       	push	r21
     66a:	6f 93       	push	r22
     66c:	7f 93       	push	r23
     66e:	8f 93       	push	r24
     670:	9f 93       	push	r25
     672:	af 93       	push	r26
     674:	bf 93       	push	r27
     676:	ef 93       	push	r30
     678:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     67a:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     67e:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     682:	e0 91 de 23 	lds	r30, 0x23DE	; 0x8023de <adcb_callback>
     686:	f0 91 df 23 	lds	r31, 0x23DF	; 0x8023df <adcb_callback+0x1>
     68a:	62 e0       	ldi	r22, 0x02	; 2
     68c:	80 e4       	ldi	r24, 0x40	; 64
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	19 95       	eicall
}
     692:	ff 91       	pop	r31
     694:	ef 91       	pop	r30
     696:	bf 91       	pop	r27
     698:	af 91       	pop	r26
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	7f 91       	pop	r23
     6a0:	6f 91       	pop	r22
     6a2:	5f 91       	pop	r21
     6a4:	4f 91       	pop	r20
     6a6:	3f 91       	pop	r19
     6a8:	2f 91       	pop	r18
     6aa:	0f 90       	pop	r0
     6ac:	0b be       	out	0x3b, r0	; 59
     6ae:	0f 90       	pop	r0
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	0f 90       	pop	r0
     6b4:	1f 90       	pop	r1
     6b6:	18 95       	reti

000006b8 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     6b8:	1f 92       	push	r1
     6ba:	0f 92       	push	r0
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	0f 92       	push	r0
     6c0:	11 24       	eor	r1, r1
     6c2:	0b b6       	in	r0, 0x3b	; 59
     6c4:	0f 92       	push	r0
     6c6:	2f 93       	push	r18
     6c8:	3f 93       	push	r19
     6ca:	4f 93       	push	r20
     6cc:	5f 93       	push	r21
     6ce:	6f 93       	push	r22
     6d0:	7f 93       	push	r23
     6d2:	8f 93       	push	r24
     6d4:	9f 93       	push	r25
     6d6:	af 93       	push	r26
     6d8:	bf 93       	push	r27
     6da:	ef 93       	push	r30
     6dc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     6de:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     6e2:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     6e6:	e0 91 de 23 	lds	r30, 0x23DE	; 0x8023de <adcb_callback>
     6ea:	f0 91 df 23 	lds	r31, 0x23DF	; 0x8023df <adcb_callback+0x1>
     6ee:	64 e0       	ldi	r22, 0x04	; 4
     6f0:	80 e4       	ldi	r24, 0x40	; 64
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	19 95       	eicall
}
     6f6:	ff 91       	pop	r31
     6f8:	ef 91       	pop	r30
     6fa:	bf 91       	pop	r27
     6fc:	af 91       	pop	r26
     6fe:	9f 91       	pop	r25
     700:	8f 91       	pop	r24
     702:	7f 91       	pop	r23
     704:	6f 91       	pop	r22
     706:	5f 91       	pop	r21
     708:	4f 91       	pop	r20
     70a:	3f 91       	pop	r19
     70c:	2f 91       	pop	r18
     70e:	0f 90       	pop	r0
     710:	0b be       	out	0x3b, r0	; 59
     712:	0f 90       	pop	r0
     714:	0f be       	out	0x3f, r0	; 63
     716:	0f 90       	pop	r0
     718:	1f 90       	pop	r1
     71a:	18 95       	reti

0000071c <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     71c:	1f 92       	push	r1
     71e:	0f 92       	push	r0
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	0f 92       	push	r0
     724:	11 24       	eor	r1, r1
     726:	0b b6       	in	r0, 0x3b	; 59
     728:	0f 92       	push	r0
     72a:	2f 93       	push	r18
     72c:	3f 93       	push	r19
     72e:	4f 93       	push	r20
     730:	5f 93       	push	r21
     732:	6f 93       	push	r22
     734:	7f 93       	push	r23
     736:	8f 93       	push	r24
     738:	9f 93       	push	r25
     73a:	af 93       	push	r26
     73c:	bf 93       	push	r27
     73e:	ef 93       	push	r30
     740:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     742:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     746:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     74a:	e0 91 de 23 	lds	r30, 0x23DE	; 0x8023de <adcb_callback>
     74e:	f0 91 df 23 	lds	r31, 0x23DF	; 0x8023df <adcb_callback+0x1>
     752:	68 e0       	ldi	r22, 0x08	; 8
     754:	80 e4       	ldi	r24, 0x40	; 64
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	19 95       	eicall
}
     75a:	ff 91       	pop	r31
     75c:	ef 91       	pop	r30
     75e:	bf 91       	pop	r27
     760:	af 91       	pop	r26
     762:	9f 91       	pop	r25
     764:	8f 91       	pop	r24
     766:	7f 91       	pop	r23
     768:	6f 91       	pop	r22
     76a:	5f 91       	pop	r21
     76c:	4f 91       	pop	r20
     76e:	3f 91       	pop	r19
     770:	2f 91       	pop	r18
     772:	0f 90       	pop	r0
     774:	0b be       	out	0x3b, r0	; 59
     776:	0f 90       	pop	r0
     778:	0f be       	out	0x3f, r0	; 63
     77a:	0f 90       	pop	r0
     77c:	1f 90       	pop	r1
     77e:	18 95       	reti

00000780 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     780:	bf 92       	push	r11
     782:	cf 92       	push	r12
     784:	df 92       	push	r13
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	1f 92       	push	r1
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	8c 01       	movw	r16, r24
     79a:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     79c:	81 15       	cp	r24, r1
     79e:	22 e0       	ldi	r18, 0x02	; 2
     7a0:	92 07       	cpc	r25, r18
     7a2:	81 f4       	brne	.+32     	; 0x7c4 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     7a4:	61 e2       	ldi	r22, 0x21	; 33
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	0e 94 af 20 	call	0x415e	; 0x415e <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     7ae:	c8 2e       	mov	r12, r24
     7b0:	d1 2c       	mov	r13, r1
     7b2:	60 e2       	ldi	r22, 0x20	; 32
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	0e 94 af 20 	call	0x415e	; 0x415e <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     7bc:	dc 2c       	mov	r13, r12
     7be:	cc 24       	eor	r12, r12
     7c0:	c8 2a       	or	r12, r24
     7c2:	12 c0       	rjmp	.+36     	; 0x7e8 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     7c4:	80 34       	cpi	r24, 0x40	; 64
     7c6:	92 40       	sbci	r25, 0x02	; 2
     7c8:	d1 f5       	brne	.+116    	; 0x83e <adc_write_configuration+0xbe>
     7ca:	65 e2       	ldi	r22, 0x25	; 37
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	0e 94 af 20 	call	0x415e	; 0x415e <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     7d4:	c8 2e       	mov	r12, r24
     7d6:	d1 2c       	mov	r13, r1
     7d8:	64 e2       	ldi	r22, 0x24	; 36
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	0e 94 af 20 	call	0x415e	; 0x415e <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     7e2:	dc 2c       	mov	r13, r12
     7e4:	cc 24       	eor	r12, r12
     7e6:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7e8:	8f b7       	in	r24, 0x3f	; 63
     7ea:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     7ec:	f8 94       	cli
	return flags;
     7ee:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     7f0:	c8 01       	movw	r24, r16
     7f2:	f6 dd       	rcall	.-1044   	; 0x3e0 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     7f4:	f8 01       	movw	r30, r16
     7f6:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	90 83       	st	Z, r25
	adc->CAL = cal;
     7fc:	c4 86       	std	Z+12, r12	; 0x0c
     7fe:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     800:	f7 01       	movw	r30, r14
     802:	25 81       	ldd	r18, Z+5	; 0x05
     804:	36 81       	ldd	r19, Z+6	; 0x06
     806:	f8 01       	movw	r30, r16
     808:	20 8f       	std	Z+24, r18	; 0x18
     80a:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     80c:	f7 01       	movw	r30, r14
     80e:	92 81       	ldd	r25, Z+2	; 0x02
     810:	f8 01       	movw	r30, r16
     812:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     814:	f7 01       	movw	r30, r14
     816:	94 81       	ldd	r25, Z+4	; 0x04
     818:	f8 01       	movw	r30, r16
     81a:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     81c:	f7 01       	movw	r30, r14
     81e:	93 81       	ldd	r25, Z+3	; 0x03
     820:	f8 01       	movw	r30, r16
     822:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     824:	f7 01       	movw	r30, r14
     826:	91 81       	ldd	r25, Z+1	; 0x01
     828:	f8 01       	movw	r30, r16
     82a:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     82c:	81 70       	andi	r24, 0x01	; 1
     82e:	f7 01       	movw	r30, r14
     830:	90 81       	ld	r25, Z
     832:	89 2b       	or	r24, r25
     834:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     836:	80 83       	st	Z, r24
     838:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     83a:	f3 dd       	rcall	.-1050   	; 0x422 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     83c:	bf be       	out	0x3f, r11	; 63
     83e:	0f 90       	pop	r0
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	bf 90       	pop	r11
     852:	08 95       	ret

00000854 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	1f 92       	push	r1
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	8c 01       	movw	r16, r24
     86a:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     86c:	8f b7       	in	r24, 0x3f	; 63
     86e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     870:	f8 94       	cli
	return flags;
     872:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     874:	c8 01       	movw	r24, r16
     876:	b4 dd       	rcall	.-1176   	; 0x3e0 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     878:	f8 01       	movw	r30, r16
     87a:	80 81       	ld	r24, Z
     87c:	80 7c       	andi	r24, 0xC0	; 192
     87e:	f7 01       	movw	r30, r14
     880:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     882:	f8 01       	movw	r30, r16
     884:	80 8d       	ldd	r24, Z+24	; 0x18
     886:	91 8d       	ldd	r25, Z+25	; 0x19
     888:	f7 01       	movw	r30, r14
     88a:	85 83       	std	Z+5, r24	; 0x05
     88c:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     88e:	f8 01       	movw	r30, r16
     890:	82 81       	ldd	r24, Z+2	; 0x02
     892:	f7 01       	movw	r30, r14
     894:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     896:	f8 01       	movw	r30, r16
     898:	84 81       	ldd	r24, Z+4	; 0x04
     89a:	f7 01       	movw	r30, r14
     89c:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     89e:	f8 01       	movw	r30, r16
     8a0:	83 81       	ldd	r24, Z+3	; 0x03
     8a2:	f7 01       	movw	r30, r14
     8a4:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     8a6:	f8 01       	movw	r30, r16
     8a8:	81 81       	ldd	r24, Z+1	; 0x01
     8aa:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     8ac:	81 83       	std	Z+1, r24	; 0x01
     8ae:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8b0:	b8 dd       	rcall	.-1168   	; 0x422 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     8b2:	df be       	out	0x3f, r13	; 63
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	08 95       	ret

000008c6 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	1f 92       	push	r1
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	6c 01       	movw	r12, r24
     8e2:	b6 2e       	mov	r11, r22
     8e4:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8e6:	86 2f       	mov	r24, r22
     8e8:	83 70       	andi	r24, 0x03	; 3
     8ea:	29 f4       	brne	.+10     	; 0x8f6 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     8ec:	96 2f       	mov	r25, r22
     8ee:	96 95       	lsr	r25
     8f0:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8f6:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     8f8:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     8fa:	90 ff       	sbrs	r25, 0
		index++;
     8fc:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     8fe:	86 01       	movw	r16, r12
     900:	00 5e       	subi	r16, 0xE0	; 224
     902:	1f 4f       	sbci	r17, 0xFF	; 255
     904:	98 e0       	ldi	r25, 0x08	; 8
     906:	89 9f       	mul	r24, r25
     908:	00 0d       	add	r16, r0
     90a:	11 1d       	adc	r17, r1
     90c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     90e:	8f b7       	in	r24, 0x3f	; 63
     910:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     912:	f8 94       	cli
	return flags;
     914:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     916:	c6 01       	movw	r24, r12
     918:	63 dd       	rcall	.-1338   	; 0x3e0 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     91a:	f7 01       	movw	r30, r14
     91c:	80 81       	ld	r24, Z
     91e:	f8 01       	movw	r30, r16
     920:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     922:	f7 01       	movw	r30, r14
     924:	82 81       	ldd	r24, Z+2	; 0x02
     926:	f8 01       	movw	r30, r16
     928:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     92a:	f7 01       	movw	r30, r14
     92c:	81 81       	ldd	r24, Z+1	; 0x01
     92e:	f8 01       	movw	r30, r16
     930:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     932:	b0 fe       	sbrs	r11, 0
     934:	04 c0       	rjmp	.+8      	; 0x93e <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     936:	f7 01       	movw	r30, r14
     938:	83 81       	ldd	r24, Z+3	; 0x03
     93a:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     93c:	86 83       	std	Z+6, r24	; 0x06
     93e:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     940:	70 dd       	rcall	.-1312   	; 0x422 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     942:	af be       	out	0x3f, r10	; 63
     944:	0f 90       	pop	r0
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	bf 90       	pop	r11
     958:	af 90       	pop	r10
     95a:	08 95       	ret

0000095c <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     95c:	af 92       	push	r10
     95e:	bf 92       	push	r11
     960:	cf 92       	push	r12
     962:	df 92       	push	r13
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	1f 92       	push	r1
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	6c 01       	movw	r12, r24
     978:	b6 2e       	mov	r11, r22
     97a:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     97c:	86 2f       	mov	r24, r22
     97e:	83 70       	andi	r24, 0x03	; 3
     980:	29 f4       	brne	.+10     	; 0x98c <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     982:	96 2f       	mov	r25, r22
     984:	96 95       	lsr	r25
     986:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	02 c0       	rjmp	.+4      	; 0x990 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     98c:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     98e:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     990:	90 ff       	sbrs	r25, 0
		index++;
     992:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     994:	86 01       	movw	r16, r12
     996:	00 5e       	subi	r16, 0xE0	; 224
     998:	1f 4f       	sbci	r17, 0xFF	; 255
     99a:	98 e0       	ldi	r25, 0x08	; 8
     99c:	89 9f       	mul	r24, r25
     99e:	00 0d       	add	r16, r0
     9a0:	11 1d       	adc	r17, r1
     9a2:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     9a4:	8f b7       	in	r24, 0x3f	; 63
     9a6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     9a8:	f8 94       	cli
	return flags;
     9aa:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     9ac:	c6 01       	movw	r24, r12
     9ae:	18 dd       	rcall	.-1488   	; 0x3e0 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     9b0:	f8 01       	movw	r30, r16
     9b2:	80 81       	ld	r24, Z
     9b4:	f7 01       	movw	r30, r14
     9b6:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     9b8:	f8 01       	movw	r30, r16
     9ba:	82 81       	ldd	r24, Z+2	; 0x02
     9bc:	f7 01       	movw	r30, r14
     9be:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     9c0:	f8 01       	movw	r30, r16
     9c2:	81 81       	ldd	r24, Z+1	; 0x01
     9c4:	f7 01       	movw	r30, r14
     9c6:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     9c8:	b0 fe       	sbrs	r11, 0
     9ca:	04 c0       	rjmp	.+8      	; 0x9d4 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     9cc:	f8 01       	movw	r30, r16
     9ce:	86 81       	ldd	r24, Z+6	; 0x06
     9d0:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     9d2:	83 83       	std	Z+3, r24	; 0x03
     9d4:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9d6:	25 dd       	rcall	.-1462   	; 0x422 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     9d8:	af be       	out	0x3f, r10	; 63
     9da:	0f 90       	pop	r0
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	af 90       	pop	r10
     9f0:	08 95       	ret

000009f2 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
     9f2:	80 32       	cpi	r24, 0x20	; 32
     9f4:	93 40       	sbci	r25, 0x03	; 3
     9f6:	61 f4       	brne	.+24     	; 0xa10 <dac_enable_clock+0x1e>
     9f8:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <dacb_enable_count>
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	98 0f       	add	r25, r24
     a00:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <dacb_enable_count>
     a04:	81 11       	cpse	r24, r1
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <dac_enable_clock+0x1e>
     a08:	64 e0       	ldi	r22, 0x04	; 4
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <sysclk_enable_module>
     a10:	08 95       	ret

00000a12 <dac_disable_clock>:
     a12:	80 32       	cpi	r24, 0x20	; 32
     a14:	93 40       	sbci	r25, 0x03	; 3
     a16:	59 f4       	brne	.+22     	; 0xa2e <dac_disable_clock+0x1c>
     a18:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <dacb_enable_count>
     a1c:	81 50       	subi	r24, 0x01	; 1
     a1e:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <dacb_enable_count>
     a22:	81 11       	cpse	r24, r1
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <dac_disable_clock+0x1c>
     a26:	64 e0       	ldi	r22, 0x04	; 4
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <sysclk_disable_module>
     a2e:	08 95       	ret

00000a30 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
     a30:	9f 92       	push	r9
     a32:	af 92       	push	r10
     a34:	bf 92       	push	r11
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	1f 92       	push	r1
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
     a4c:	80 32       	cpi	r24, 0x20	; 32
     a4e:	23 e0       	ldi	r18, 0x03	; 3
     a50:	92 07       	cpc	r25, r18
     a52:	09 f0       	breq	.+2      	; 0xa56 <dac_write_configuration+0x26>
     a54:	3c c0       	rjmp	.+120    	; 0xace <dac_write_configuration+0x9e>
     a56:	7b 01       	movw	r14, r22
     a58:	8c 01       	movw	r16, r24
     a5a:	63 e3       	ldi	r22, 0x33	; 51
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	0e 94 af 20 	call	0x415e	; 0x415e <nvm_read_byte>
     a64:	98 2e       	mov	r9, r24
     a66:	62 e3       	ldi	r22, 0x32	; 50
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	0e 94 af 20 	call	0x415e	; 0x415e <nvm_read_byte>
     a70:	a8 2e       	mov	r10, r24
     a72:	67 e3       	ldi	r22, 0x37	; 55
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	0e 94 af 20 	call	0x415e	; 0x415e <nvm_read_byte>
     a7c:	b8 2e       	mov	r11, r24
     a7e:	66 e3       	ldi	r22, 0x36	; 54
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	0e 94 af 20 	call	0x415e	; 0x415e <nvm_read_byte>
     a88:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a8a:	8f b7       	in	r24, 0x3f	; 63
     a8c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     a8e:	f8 94       	cli
	return flags;
     a90:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     a92:	c8 01       	movw	r24, r16
     a94:	ae df       	rcall	.-164    	; 0x9f2 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
     a96:	f8 01       	movw	r30, r16
     a98:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
     a9a:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
     a9c:	f7 01       	movw	r30, r14
     a9e:	91 81       	ldd	r25, Z+1	; 0x01
     aa0:	f8 01       	movw	r30, r16
     aa2:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
     aa4:	f7 01       	movw	r30, r14
     aa6:	92 81       	ldd	r25, Z+2	; 0x02
     aa8:	f8 01       	movw	r30, r16
     aaa:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
     aac:	f7 01       	movw	r30, r14
     aae:	93 81       	ldd	r25, Z+3	; 0x03
     ab0:	f8 01       	movw	r30, r16
     ab2:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
     ab4:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
     ab6:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
     ab8:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
     aba:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
     abc:	81 70       	andi	r24, 0x01	; 1
     abe:	f7 01       	movw	r30, r14
     ac0:	90 81       	ld	r25, Z
     ac2:	89 2b       	or	r24, r25
     ac4:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
     ac6:	80 83       	st	Z, r24
     ac8:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     aca:	a3 df       	rcall	.-186    	; 0xa12 <dac_disable_clock>
	cpu_irq_restore(flags);
}
     acc:	df be       	out	0x3f, r13	; 63
     ace:	0f 90       	pop	r0
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	bf 90       	pop	r11
     ae2:	af 90       	pop	r10
     ae4:	9f 90       	pop	r9
     ae6:	08 95       	ret

00000ae8 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	1f 92       	push	r1
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	8c 01       	movw	r16, r24
     afe:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b00:	8f b7       	in	r24, 0x3f	; 63
     b02:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b04:	f8 94       	cli
	return flags;
     b06:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     b08:	c8 01       	movw	r24, r16
     b0a:	73 df       	rcall	.-282    	; 0x9f2 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
     b0c:	f8 01       	movw	r30, r16
     b0e:	80 81       	ld	r24, Z
     b10:	8e 7f       	andi	r24, 0xFE	; 254
     b12:	f7 01       	movw	r30, r14
     b14:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
     b16:	f8 01       	movw	r30, r16
     b18:	81 81       	ldd	r24, Z+1	; 0x01
     b1a:	f7 01       	movw	r30, r14
     b1c:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
     b1e:	f8 01       	movw	r30, r16
     b20:	82 81       	ldd	r24, Z+2	; 0x02
     b22:	f7 01       	movw	r30, r14
     b24:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
     b26:	f8 01       	movw	r30, r16
     b28:	83 81       	ldd	r24, Z+3	; 0x03
     b2a:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
     b2c:	83 83       	std	Z+3, r24	; 0x03
     b2e:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b30:	70 df       	rcall	.-288    	; 0xa12 <dac_disable_clock>
	cpu_irq_restore(flags);
}
     b32:	df be       	out	0x3f, r13	; 63
     b34:	0f 90       	pop	r0
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	08 95       	ret

00000b46 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	0b b6       	in	r0, 0x3b	; 59
     b52:	0f 92       	push	r0
     b54:	2f 93       	push	r18
     b56:	3f 93       	push	r19
     b58:	4f 93       	push	r20
     b5a:	5f 93       	push	r21
     b5c:	6f 93       	push	r22
     b5e:	7f 93       	push	r23
     b60:	8f 93       	push	r24
     b62:	9f 93       	push	r25
     b64:	af 93       	push	r26
     b66:	bf 93       	push	r27
     b68:	ef 93       	push	r30
     b6a:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     b6c:	e0 91 67 21 	lds	r30, 0x2167	; 0x802167 <tc_tcc0_ovf_callback>
     b70:	f0 91 68 21 	lds	r31, 0x2168	; 0x802168 <tc_tcc0_ovf_callback+0x1>
     b74:	30 97       	sbiw	r30, 0x00	; 0
     b76:	09 f0       	breq	.+2      	; 0xb7a <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     b78:	19 95       	eicall
	}
}
     b7a:	ff 91       	pop	r31
     b7c:	ef 91       	pop	r30
     b7e:	bf 91       	pop	r27
     b80:	af 91       	pop	r26
     b82:	9f 91       	pop	r25
     b84:	8f 91       	pop	r24
     b86:	7f 91       	pop	r23
     b88:	6f 91       	pop	r22
     b8a:	5f 91       	pop	r21
     b8c:	4f 91       	pop	r20
     b8e:	3f 91       	pop	r19
     b90:	2f 91       	pop	r18
     b92:	0f 90       	pop	r0
     b94:	0b be       	out	0x3b, r0	; 59
     b96:	0f 90       	pop	r0
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	0f 90       	pop	r0
     b9c:	1f 90       	pop	r1
     b9e:	18 95       	reti

00000ba0 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	0b b6       	in	r0, 0x3b	; 59
     bac:	0f 92       	push	r0
     bae:	2f 93       	push	r18
     bb0:	3f 93       	push	r19
     bb2:	4f 93       	push	r20
     bb4:	5f 93       	push	r21
     bb6:	6f 93       	push	r22
     bb8:	7f 93       	push	r23
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	af 93       	push	r26
     bc0:	bf 93       	push	r27
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     bc6:	e0 91 65 21 	lds	r30, 0x2165	; 0x802165 <tc_tcc0_err_callback>
     bca:	f0 91 66 21 	lds	r31, 0x2166	; 0x802166 <tc_tcc0_err_callback+0x1>
     bce:	30 97       	sbiw	r30, 0x00	; 0
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <__vector_15+0x34>
		tc_tcc0_err_callback();
     bd2:	19 95       	eicall
	}
}
     bd4:	ff 91       	pop	r31
     bd6:	ef 91       	pop	r30
     bd8:	bf 91       	pop	r27
     bda:	af 91       	pop	r26
     bdc:	9f 91       	pop	r25
     bde:	8f 91       	pop	r24
     be0:	7f 91       	pop	r23
     be2:	6f 91       	pop	r22
     be4:	5f 91       	pop	r21
     be6:	4f 91       	pop	r20
     be8:	3f 91       	pop	r19
     bea:	2f 91       	pop	r18
     bec:	0f 90       	pop	r0
     bee:	0b be       	out	0x3b, r0	; 59
     bf0:	0f 90       	pop	r0
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	0f 90       	pop	r0
     bf6:	1f 90       	pop	r1
     bf8:	18 95       	reti

00000bfa <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     bfa:	1f 92       	push	r1
     bfc:	0f 92       	push	r0
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	0f 92       	push	r0
     c02:	11 24       	eor	r1, r1
     c04:	0b b6       	in	r0, 0x3b	; 59
     c06:	0f 92       	push	r0
     c08:	2f 93       	push	r18
     c0a:	3f 93       	push	r19
     c0c:	4f 93       	push	r20
     c0e:	5f 93       	push	r21
     c10:	6f 93       	push	r22
     c12:	7f 93       	push	r23
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	af 93       	push	r26
     c1a:	bf 93       	push	r27
     c1c:	ef 93       	push	r30
     c1e:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     c20:	e0 91 63 21 	lds	r30, 0x2163	; 0x802163 <tc_tcc0_cca_callback>
     c24:	f0 91 64 21 	lds	r31, 0x2164	; 0x802164 <tc_tcc0_cca_callback+0x1>
     c28:	30 97       	sbiw	r30, 0x00	; 0
     c2a:	09 f0       	breq	.+2      	; 0xc2e <__vector_16+0x34>
		tc_tcc0_cca_callback();
     c2c:	19 95       	eicall
	}
}
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0b be       	out	0x3b, r0	; 59
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	0b b6       	in	r0, 0x3b	; 59
     c60:	0f 92       	push	r0
     c62:	2f 93       	push	r18
     c64:	3f 93       	push	r19
     c66:	4f 93       	push	r20
     c68:	5f 93       	push	r21
     c6a:	6f 93       	push	r22
     c6c:	7f 93       	push	r23
     c6e:	8f 93       	push	r24
     c70:	9f 93       	push	r25
     c72:	af 93       	push	r26
     c74:	bf 93       	push	r27
     c76:	ef 93       	push	r30
     c78:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     c7a:	e0 91 61 21 	lds	r30, 0x2161	; 0x802161 <tc_tcc0_ccb_callback>
     c7e:	f0 91 62 21 	lds	r31, 0x2162	; 0x802162 <tc_tcc0_ccb_callback+0x1>
     c82:	30 97       	sbiw	r30, 0x00	; 0
     c84:	09 f0       	breq	.+2      	; 0xc88 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     c86:	19 95       	eicall
	}
}
     c88:	ff 91       	pop	r31
     c8a:	ef 91       	pop	r30
     c8c:	bf 91       	pop	r27
     c8e:	af 91       	pop	r26
     c90:	9f 91       	pop	r25
     c92:	8f 91       	pop	r24
     c94:	7f 91       	pop	r23
     c96:	6f 91       	pop	r22
     c98:	5f 91       	pop	r21
     c9a:	4f 91       	pop	r20
     c9c:	3f 91       	pop	r19
     c9e:	2f 91       	pop	r18
     ca0:	0f 90       	pop	r0
     ca2:	0b be       	out	0x3b, r0	; 59
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	0f 90       	pop	r0
     caa:	1f 90       	pop	r1
     cac:	18 95       	reti

00000cae <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     cae:	1f 92       	push	r1
     cb0:	0f 92       	push	r0
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	0f 92       	push	r0
     cb6:	11 24       	eor	r1, r1
     cb8:	0b b6       	in	r0, 0x3b	; 59
     cba:	0f 92       	push	r0
     cbc:	2f 93       	push	r18
     cbe:	3f 93       	push	r19
     cc0:	4f 93       	push	r20
     cc2:	5f 93       	push	r21
     cc4:	6f 93       	push	r22
     cc6:	7f 93       	push	r23
     cc8:	8f 93       	push	r24
     cca:	9f 93       	push	r25
     ccc:	af 93       	push	r26
     cce:	bf 93       	push	r27
     cd0:	ef 93       	push	r30
     cd2:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     cd4:	e0 91 5f 21 	lds	r30, 0x215F	; 0x80215f <tc_tcc0_ccc_callback>
     cd8:	f0 91 60 21 	lds	r31, 0x2160	; 0x802160 <tc_tcc0_ccc_callback+0x1>
     cdc:	30 97       	sbiw	r30, 0x00	; 0
     cde:	09 f0       	breq	.+2      	; 0xce2 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     ce0:	19 95       	eicall
	}
}
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	bf 91       	pop	r27
     ce8:	af 91       	pop	r26
     cea:	9f 91       	pop	r25
     cec:	8f 91       	pop	r24
     cee:	7f 91       	pop	r23
     cf0:	6f 91       	pop	r22
     cf2:	5f 91       	pop	r21
     cf4:	4f 91       	pop	r20
     cf6:	3f 91       	pop	r19
     cf8:	2f 91       	pop	r18
     cfa:	0f 90       	pop	r0
     cfc:	0b be       	out	0x3b, r0	; 59
     cfe:	0f 90       	pop	r0
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	0f 90       	pop	r0
     d04:	1f 90       	pop	r1
     d06:	18 95       	reti

00000d08 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     d08:	1f 92       	push	r1
     d0a:	0f 92       	push	r0
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	0f 92       	push	r0
     d10:	11 24       	eor	r1, r1
     d12:	0b b6       	in	r0, 0x3b	; 59
     d14:	0f 92       	push	r0
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	5f 93       	push	r21
     d1e:	6f 93       	push	r22
     d20:	7f 93       	push	r23
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	af 93       	push	r26
     d28:	bf 93       	push	r27
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     d2e:	e0 91 5d 21 	lds	r30, 0x215D	; 0x80215d <tc_tcc0_ccd_callback>
     d32:	f0 91 5e 21 	lds	r31, 0x215E	; 0x80215e <tc_tcc0_ccd_callback+0x1>
     d36:	30 97       	sbiw	r30, 0x00	; 0
     d38:	09 f0       	breq	.+2      	; 0xd3c <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     d3a:	19 95       	eicall
	}
}
     d3c:	ff 91       	pop	r31
     d3e:	ef 91       	pop	r30
     d40:	bf 91       	pop	r27
     d42:	af 91       	pop	r26
     d44:	9f 91       	pop	r25
     d46:	8f 91       	pop	r24
     d48:	7f 91       	pop	r23
     d4a:	6f 91       	pop	r22
     d4c:	5f 91       	pop	r21
     d4e:	4f 91       	pop	r20
     d50:	3f 91       	pop	r19
     d52:	2f 91       	pop	r18
     d54:	0f 90       	pop	r0
     d56:	0b be       	out	0x3b, r0	; 59
     d58:	0f 90       	pop	r0
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	0f 90       	pop	r0
     d5e:	1f 90       	pop	r1
     d60:	18 95       	reti

00000d62 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     d62:	1f 92       	push	r1
     d64:	0f 92       	push	r0
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	0f 92       	push	r0
     d6a:	11 24       	eor	r1, r1
     d6c:	0b b6       	in	r0, 0x3b	; 59
     d6e:	0f 92       	push	r0
     d70:	2f 93       	push	r18
     d72:	3f 93       	push	r19
     d74:	4f 93       	push	r20
     d76:	5f 93       	push	r21
     d78:	6f 93       	push	r22
     d7a:	7f 93       	push	r23
     d7c:	8f 93       	push	r24
     d7e:	9f 93       	push	r25
     d80:	af 93       	push	r26
     d82:	bf 93       	push	r27
     d84:	ef 93       	push	r30
     d86:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     d88:	e0 91 5b 21 	lds	r30, 0x215B	; 0x80215b <tc_tcc1_ovf_callback>
     d8c:	f0 91 5c 21 	lds	r31, 0x215C	; 0x80215c <tc_tcc1_ovf_callback+0x1>
     d90:	30 97       	sbiw	r30, 0x00	; 0
     d92:	09 f0       	breq	.+2      	; 0xd96 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     d94:	19 95       	eicall
	}
}
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	bf 91       	pop	r27
     d9c:	af 91       	pop	r26
     d9e:	9f 91       	pop	r25
     da0:	8f 91       	pop	r24
     da2:	7f 91       	pop	r23
     da4:	6f 91       	pop	r22
     da6:	5f 91       	pop	r21
     da8:	4f 91       	pop	r20
     daa:	3f 91       	pop	r19
     dac:	2f 91       	pop	r18
     dae:	0f 90       	pop	r0
     db0:	0b be       	out	0x3b, r0	; 59
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	0b b6       	in	r0, 0x3b	; 59
     dc8:	0f 92       	push	r0
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     de2:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <tc_tcc1_err_callback>
     de6:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <tc_tcc1_err_callback+0x1>
     dea:	30 97       	sbiw	r30, 0x00	; 0
     dec:	09 f0       	breq	.+2      	; 0xdf0 <__vector_21+0x34>
		tc_tcc1_err_callback();
     dee:	19 95       	eicall
	}
}
     df0:	ff 91       	pop	r31
     df2:	ef 91       	pop	r30
     df4:	bf 91       	pop	r27
     df6:	af 91       	pop	r26
     df8:	9f 91       	pop	r25
     dfa:	8f 91       	pop	r24
     dfc:	7f 91       	pop	r23
     dfe:	6f 91       	pop	r22
     e00:	5f 91       	pop	r21
     e02:	4f 91       	pop	r20
     e04:	3f 91       	pop	r19
     e06:	2f 91       	pop	r18
     e08:	0f 90       	pop	r0
     e0a:	0b be       	out	0x3b, r0	; 59
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     e16:	1f 92       	push	r1
     e18:	0f 92       	push	r0
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	0f 92       	push	r0
     e1e:	11 24       	eor	r1, r1
     e20:	0b b6       	in	r0, 0x3b	; 59
     e22:	0f 92       	push	r0
     e24:	2f 93       	push	r18
     e26:	3f 93       	push	r19
     e28:	4f 93       	push	r20
     e2a:	5f 93       	push	r21
     e2c:	6f 93       	push	r22
     e2e:	7f 93       	push	r23
     e30:	8f 93       	push	r24
     e32:	9f 93       	push	r25
     e34:	af 93       	push	r26
     e36:	bf 93       	push	r27
     e38:	ef 93       	push	r30
     e3a:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     e3c:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <tc_tcc1_cca_callback>
     e40:	f0 91 58 21 	lds	r31, 0x2158	; 0x802158 <tc_tcc1_cca_callback+0x1>
     e44:	30 97       	sbiw	r30, 0x00	; 0
     e46:	09 f0       	breq	.+2      	; 0xe4a <__vector_22+0x34>
		tc_tcc1_cca_callback();
     e48:	19 95       	eicall
	}
}
     e4a:	ff 91       	pop	r31
     e4c:	ef 91       	pop	r30
     e4e:	bf 91       	pop	r27
     e50:	af 91       	pop	r26
     e52:	9f 91       	pop	r25
     e54:	8f 91       	pop	r24
     e56:	7f 91       	pop	r23
     e58:	6f 91       	pop	r22
     e5a:	5f 91       	pop	r21
     e5c:	4f 91       	pop	r20
     e5e:	3f 91       	pop	r19
     e60:	2f 91       	pop	r18
     e62:	0f 90       	pop	r0
     e64:	0b be       	out	0x3b, r0	; 59
     e66:	0f 90       	pop	r0
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	0f 90       	pop	r0
     e6c:	1f 90       	pop	r1
     e6e:	18 95       	reti

00000e70 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	11 24       	eor	r1, r1
     e7a:	0b b6       	in	r0, 0x3b	; 59
     e7c:	0f 92       	push	r0
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	6f 93       	push	r22
     e88:	7f 93       	push	r23
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     e96:	e0 91 55 21 	lds	r30, 0x2155	; 0x802155 <tc_tcc1_ccb_callback>
     e9a:	f0 91 56 21 	lds	r31, 0x2156	; 0x802156 <tc_tcc1_ccb_callback+0x1>
     e9e:	30 97       	sbiw	r30, 0x00	; 0
     ea0:	09 f0       	breq	.+2      	; 0xea4 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     ea2:	19 95       	eicall
	}
}
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	bf 91       	pop	r27
     eaa:	af 91       	pop	r26
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	7f 91       	pop	r23
     eb2:	6f 91       	pop	r22
     eb4:	5f 91       	pop	r21
     eb6:	4f 91       	pop	r20
     eb8:	3f 91       	pop	r19
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0b be       	out	0x3b, r0	; 59
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     eca:	1f 92       	push	r1
     ecc:	0f 92       	push	r0
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	0b b6       	in	r0, 0x3b	; 59
     ed6:	0f 92       	push	r0
     ed8:	2f 93       	push	r18
     eda:	3f 93       	push	r19
     edc:	4f 93       	push	r20
     ede:	5f 93       	push	r21
     ee0:	6f 93       	push	r22
     ee2:	7f 93       	push	r23
     ee4:	8f 93       	push	r24
     ee6:	9f 93       	push	r25
     ee8:	af 93       	push	r26
     eea:	bf 93       	push	r27
     eec:	ef 93       	push	r30
     eee:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     ef0:	e0 91 53 21 	lds	r30, 0x2153	; 0x802153 <tc_tcd0_ovf_callback>
     ef4:	f0 91 54 21 	lds	r31, 0x2154	; 0x802154 <tc_tcd0_ovf_callback+0x1>
     ef8:	30 97       	sbiw	r30, 0x00	; 0
     efa:	09 f0       	breq	.+2      	; 0xefe <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     efc:	19 95       	eicall
	}
}
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0b be       	out	0x3b, r0	; 59
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	0b b6       	in	r0, 0x3b	; 59
     f30:	0f 92       	push	r0
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     f4a:	e0 91 51 21 	lds	r30, 0x2151	; 0x802151 <tc_tcd0_err_callback>
     f4e:	f0 91 52 21 	lds	r31, 0x2152	; 0x802152 <tc_tcd0_err_callback+0x1>
     f52:	30 97       	sbiw	r30, 0x00	; 0
     f54:	09 f0       	breq	.+2      	; 0xf58 <__vector_78+0x34>
		tc_tcd0_err_callback();
     f56:	19 95       	eicall
	}
}
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	0f 90       	pop	r0
     f72:	0b be       	out	0x3b, r0	; 59
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     f7e:	1f 92       	push	r1
     f80:	0f 92       	push	r0
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	0f 92       	push	r0
     f86:	11 24       	eor	r1, r1
     f88:	0b b6       	in	r0, 0x3b	; 59
     f8a:	0f 92       	push	r0
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	4f 93       	push	r20
     f92:	5f 93       	push	r21
     f94:	6f 93       	push	r22
     f96:	7f 93       	push	r23
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	af 93       	push	r26
     f9e:	bf 93       	push	r27
     fa0:	ef 93       	push	r30
     fa2:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     fa4:	e0 91 4f 21 	lds	r30, 0x214F	; 0x80214f <tc_tcd0_cca_callback>
     fa8:	f0 91 50 21 	lds	r31, 0x2150	; 0x802150 <tc_tcd0_cca_callback+0x1>
     fac:	30 97       	sbiw	r30, 0x00	; 0
     fae:	09 f0       	breq	.+2      	; 0xfb2 <__vector_79+0x34>
		tc_tcd0_cca_callback();
     fb0:	19 95       	eicall
	}
}
     fb2:	ff 91       	pop	r31
     fb4:	ef 91       	pop	r30
     fb6:	bf 91       	pop	r27
     fb8:	af 91       	pop	r26
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	7f 91       	pop	r23
     fc0:	6f 91       	pop	r22
     fc2:	5f 91       	pop	r21
     fc4:	4f 91       	pop	r20
     fc6:	3f 91       	pop	r19
     fc8:	2f 91       	pop	r18
     fca:	0f 90       	pop	r0
     fcc:	0b be       	out	0x3b, r0	; 59
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	0b b6       	in	r0, 0x3b	; 59
     fe4:	0f 92       	push	r0
     fe6:	2f 93       	push	r18
     fe8:	3f 93       	push	r19
     fea:	4f 93       	push	r20
     fec:	5f 93       	push	r21
     fee:	6f 93       	push	r22
     ff0:	7f 93       	push	r23
     ff2:	8f 93       	push	r24
     ff4:	9f 93       	push	r25
     ff6:	af 93       	push	r26
     ff8:	bf 93       	push	r27
     ffa:	ef 93       	push	r30
     ffc:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     ffe:	e0 91 4d 21 	lds	r30, 0x214D	; 0x80214d <tc_tcd0_ccb_callback>
    1002:	f0 91 4e 21 	lds	r31, 0x214E	; 0x80214e <tc_tcd0_ccb_callback+0x1>
    1006:	30 97       	sbiw	r30, 0x00	; 0
    1008:	09 f0       	breq	.+2      	; 0x100c <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    100a:	19 95       	eicall
	}
}
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	0f 90       	pop	r0
    1026:	0b be       	out	0x3b, r0	; 59
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	0b b6       	in	r0, 0x3b	; 59
    103e:	0f 92       	push	r0
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	6f 93       	push	r22
    104a:	7f 93       	push	r23
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    1050:	af 93       	push	r26
    1052:	bf 93       	push	r27
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1058:	e0 91 4b 21 	lds	r30, 0x214B	; 0x80214b <tc_tcd0_ccc_callback>
    105c:	f0 91 4c 21 	lds	r31, 0x214C	; 0x80214c <tc_tcd0_ccc_callback+0x1>
    1060:	30 97       	sbiw	r30, 0x00	; 0
    1062:	09 f0       	breq	.+2      	; 0x1066 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    1064:	19 95       	eicall
	}
}
    1066:	ff 91       	pop	r31
    1068:	ef 91       	pop	r30
    106a:	bf 91       	pop	r27
    106c:	af 91       	pop	r26
    106e:	9f 91       	pop	r25
    1070:	8f 91       	pop	r24
    1072:	7f 91       	pop	r23
    1074:	6f 91       	pop	r22
    1076:	5f 91       	pop	r21
    1078:	4f 91       	pop	r20
    107a:	3f 91       	pop	r19
    107c:	2f 91       	pop	r18
    107e:	0f 90       	pop	r0
    1080:	0b be       	out	0x3b, r0	; 59
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    108c:	1f 92       	push	r1
    108e:	0f 92       	push	r0
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	0f 92       	push	r0
    1094:	11 24       	eor	r1, r1
    1096:	0b b6       	in	r0, 0x3b	; 59
    1098:	0f 92       	push	r0
    109a:	2f 93       	push	r18
    109c:	3f 93       	push	r19
    109e:	4f 93       	push	r20
    10a0:	5f 93       	push	r21
    10a2:	6f 93       	push	r22
    10a4:	7f 93       	push	r23
    10a6:	8f 93       	push	r24
    10a8:	9f 93       	push	r25
    10aa:	af 93       	push	r26
    10ac:	bf 93       	push	r27
    10ae:	ef 93       	push	r30
    10b0:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    10b2:	e0 91 49 21 	lds	r30, 0x2149	; 0x802149 <tc_tcd0_ccd_callback>
    10b6:	f0 91 4a 21 	lds	r31, 0x214A	; 0x80214a <tc_tcd0_ccd_callback+0x1>
    10ba:	30 97       	sbiw	r30, 0x00	; 0
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    10be:	19 95       	eicall
	}
}
    10c0:	ff 91       	pop	r31
    10c2:	ef 91       	pop	r30
    10c4:	bf 91       	pop	r27
    10c6:	af 91       	pop	r26
    10c8:	9f 91       	pop	r25
    10ca:	8f 91       	pop	r24
    10cc:	7f 91       	pop	r23
    10ce:	6f 91       	pop	r22
    10d0:	5f 91       	pop	r21
    10d2:	4f 91       	pop	r20
    10d4:	3f 91       	pop	r19
    10d6:	2f 91       	pop	r18
    10d8:	0f 90       	pop	r0
    10da:	0b be       	out	0x3b, r0	; 59
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	0b b6       	in	r0, 0x3b	; 59
    10f2:	0f 92       	push	r0
    10f4:	2f 93       	push	r18
    10f6:	3f 93       	push	r19
    10f8:	4f 93       	push	r20
    10fa:	5f 93       	push	r21
    10fc:	6f 93       	push	r22
    10fe:	7f 93       	push	r23
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	af 93       	push	r26
    1106:	bf 93       	push	r27
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    110c:	e0 91 47 21 	lds	r30, 0x2147	; 0x802147 <tc_tcd1_ovf_callback>
    1110:	f0 91 48 21 	lds	r31, 0x2148	; 0x802148 <tc_tcd1_ovf_callback+0x1>
    1114:	30 97       	sbiw	r30, 0x00	; 0
    1116:	09 f0       	breq	.+2      	; 0x111a <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    1118:	19 95       	eicall
	}
}
    111a:	ff 91       	pop	r31
    111c:	ef 91       	pop	r30
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	7f 91       	pop	r23
    1128:	6f 91       	pop	r22
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	0f 90       	pop	r0
    1134:	0b be       	out	0x3b, r0	; 59
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti

00001140 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1140:	1f 92       	push	r1
    1142:	0f 92       	push	r0
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	0f 92       	push	r0
    1148:	11 24       	eor	r1, r1
    114a:	0b b6       	in	r0, 0x3b	; 59
    114c:	0f 92       	push	r0
    114e:	2f 93       	push	r18
    1150:	3f 93       	push	r19
    1152:	4f 93       	push	r20
    1154:	5f 93       	push	r21
    1156:	6f 93       	push	r22
    1158:	7f 93       	push	r23
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    115e:	af 93       	push	r26
    1160:	bf 93       	push	r27
    1162:	ef 93       	push	r30
    1164:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1166:	e0 91 45 21 	lds	r30, 0x2145	; 0x802145 <tc_tcd1_err_callback>
    116a:	f0 91 46 21 	lds	r31, 0x2146	; 0x802146 <tc_tcd1_err_callback+0x1>
    116e:	30 97       	sbiw	r30, 0x00	; 0
    1170:	09 f0       	breq	.+2      	; 0x1174 <__vector_84+0x34>
		tc_tcd1_err_callback();
    1172:	19 95       	eicall
	}
}
    1174:	ff 91       	pop	r31
    1176:	ef 91       	pop	r30
    1178:	bf 91       	pop	r27
    117a:	af 91       	pop	r26
    117c:	9f 91       	pop	r25
    117e:	8f 91       	pop	r24
    1180:	7f 91       	pop	r23
    1182:	6f 91       	pop	r22
    1184:	5f 91       	pop	r21
    1186:	4f 91       	pop	r20
    1188:	3f 91       	pop	r19
    118a:	2f 91       	pop	r18
    118c:	0f 90       	pop	r0
    118e:	0b be       	out	0x3b, r0	; 59
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	0f 90       	pop	r0
    1196:	1f 90       	pop	r1
    1198:	18 95       	reti

0000119a <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    119a:	1f 92       	push	r1
    119c:	0f 92       	push	r0
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	0f 92       	push	r0
    11a2:	11 24       	eor	r1, r1
    11a4:	0b b6       	in	r0, 0x3b	; 59
    11a6:	0f 92       	push	r0
    11a8:	2f 93       	push	r18
    11aa:	3f 93       	push	r19
    11ac:	4f 93       	push	r20
    11ae:	5f 93       	push	r21
    11b0:	6f 93       	push	r22
    11b2:	7f 93       	push	r23
    11b4:	8f 93       	push	r24
    11b6:	9f 93       	push	r25
    11b8:	af 93       	push	r26
    11ba:	bf 93       	push	r27
    11bc:	ef 93       	push	r30
    11be:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    11c0:	e0 91 43 21 	lds	r30, 0x2143	; 0x802143 <tc_tcd1_cca_callback>
    11c4:	f0 91 44 21 	lds	r31, 0x2144	; 0x802144 <tc_tcd1_cca_callback+0x1>
    11c8:	30 97       	sbiw	r30, 0x00	; 0
    11ca:	09 f0       	breq	.+2      	; 0x11ce <__vector_85+0x34>
		tc_tcd1_cca_callback();
    11cc:	19 95       	eicall
	}
}
    11ce:	ff 91       	pop	r31
    11d0:	ef 91       	pop	r30
    11d2:	bf 91       	pop	r27
    11d4:	af 91       	pop	r26
    11d6:	9f 91       	pop	r25
    11d8:	8f 91       	pop	r24
    11da:	7f 91       	pop	r23
    11dc:	6f 91       	pop	r22
    11de:	5f 91       	pop	r21
    11e0:	4f 91       	pop	r20
    11e2:	3f 91       	pop	r19
    11e4:	2f 91       	pop	r18
    11e6:	0f 90       	pop	r0
    11e8:	0b be       	out	0x3b, r0	; 59
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    11f4:	1f 92       	push	r1
    11f6:	0f 92       	push	r0
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	0f 92       	push	r0
    11fc:	11 24       	eor	r1, r1
    11fe:	0b b6       	in	r0, 0x3b	; 59
    1200:	0f 92       	push	r0
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    121a:	e0 91 41 21 	lds	r30, 0x2141	; 0x802141 <tc_tcd1_ccb_callback>
    121e:	f0 91 42 21 	lds	r31, 0x2142	; 0x802142 <tc_tcd1_ccb_callback+0x1>
    1222:	30 97       	sbiw	r30, 0x00	; 0
    1224:	09 f0       	breq	.+2      	; 0x1228 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    1226:	19 95       	eicall
	}
}
    1228:	ff 91       	pop	r31
    122a:	ef 91       	pop	r30
    122c:	bf 91       	pop	r27
    122e:	af 91       	pop	r26
    1230:	9f 91       	pop	r25
    1232:	8f 91       	pop	r24
    1234:	7f 91       	pop	r23
    1236:	6f 91       	pop	r22
    1238:	5f 91       	pop	r21
    123a:	4f 91       	pop	r20
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	0f 90       	pop	r0
    1242:	0b be       	out	0x3b, r0	; 59
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    124e:	1f 92       	push	r1
    1250:	0f 92       	push	r0
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	0f 92       	push	r0
    1256:	11 24       	eor	r1, r1
    1258:	0b b6       	in	r0, 0x3b	; 59
    125a:	0f 92       	push	r0
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	4f 93       	push	r20
    1262:	5f 93       	push	r21
    1264:	6f 93       	push	r22
    1266:	7f 93       	push	r23
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
    126c:	af 93       	push	r26
    126e:	bf 93       	push	r27
    1270:	ef 93       	push	r30
    1272:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1274:	e0 91 3f 21 	lds	r30, 0x213F	; 0x80213f <tc_tce0_ovf_callback>
    1278:	f0 91 40 21 	lds	r31, 0x2140	; 0x802140 <tc_tce0_ovf_callback+0x1>
    127c:	30 97       	sbiw	r30, 0x00	; 0
    127e:	09 f0       	breq	.+2      	; 0x1282 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    1280:	19 95       	eicall
	}
}
    1282:	ff 91       	pop	r31
    1284:	ef 91       	pop	r30
    1286:	bf 91       	pop	r27
    1288:	af 91       	pop	r26
    128a:	9f 91       	pop	r25
    128c:	8f 91       	pop	r24
    128e:	7f 91       	pop	r23
    1290:	6f 91       	pop	r22
    1292:	5f 91       	pop	r21
    1294:	4f 91       	pop	r20
    1296:	3f 91       	pop	r19
    1298:	2f 91       	pop	r18
    129a:	0f 90       	pop	r0
    129c:	0b be       	out	0x3b, r0	; 59
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	0f 90       	pop	r0
    12a4:	1f 90       	pop	r1
    12a6:	18 95       	reti

000012a8 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	11 24       	eor	r1, r1
    12b2:	0b b6       	in	r0, 0x3b	; 59
    12b4:	0f 92       	push	r0
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    12ce:	e0 91 3d 21 	lds	r30, 0x213D	; 0x80213d <tc_tce0_err_callback>
    12d2:	f0 91 3e 21 	lds	r31, 0x213E	; 0x80213e <tc_tce0_err_callback+0x1>
    12d6:	30 97       	sbiw	r30, 0x00	; 0
    12d8:	09 f0       	breq	.+2      	; 0x12dc <__vector_48+0x34>
		tc_tce0_err_callback();
    12da:	19 95       	eicall
	}
}
    12dc:	ff 91       	pop	r31
    12de:	ef 91       	pop	r30
    12e0:	bf 91       	pop	r27
    12e2:	af 91       	pop	r26
    12e4:	9f 91       	pop	r25
    12e6:	8f 91       	pop	r24
    12e8:	7f 91       	pop	r23
    12ea:	6f 91       	pop	r22
    12ec:	5f 91       	pop	r21
    12ee:	4f 91       	pop	r20
    12f0:	3f 91       	pop	r19
    12f2:	2f 91       	pop	r18
    12f4:	0f 90       	pop	r0
    12f6:	0b be       	out	0x3b, r0	; 59
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1302:	1f 92       	push	r1
    1304:	0f 92       	push	r0
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	0f 92       	push	r0
    130a:	11 24       	eor	r1, r1
    130c:	0b b6       	in	r0, 0x3b	; 59
    130e:	0f 92       	push	r0
    1310:	2f 93       	push	r18
    1312:	3f 93       	push	r19
    1314:	4f 93       	push	r20
    1316:	5f 93       	push	r21
    1318:	6f 93       	push	r22
    131a:	7f 93       	push	r23
    131c:	8f 93       	push	r24
    131e:	9f 93       	push	r25
    1320:	af 93       	push	r26
    1322:	bf 93       	push	r27
    1324:	ef 93       	push	r30
    1326:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1328:	e0 91 3b 21 	lds	r30, 0x213B	; 0x80213b <tc_tce0_cca_callback>
    132c:	f0 91 3c 21 	lds	r31, 0x213C	; 0x80213c <tc_tce0_cca_callback+0x1>
    1330:	30 97       	sbiw	r30, 0x00	; 0
    1332:	09 f0       	breq	.+2      	; 0x1336 <__vector_49+0x34>
		tc_tce0_cca_callback();
    1334:	19 95       	eicall
	}
}
    1336:	ff 91       	pop	r31
    1338:	ef 91       	pop	r30
    133a:	bf 91       	pop	r27
    133c:	af 91       	pop	r26
    133e:	9f 91       	pop	r25
    1340:	8f 91       	pop	r24
    1342:	7f 91       	pop	r23
    1344:	6f 91       	pop	r22
    1346:	5f 91       	pop	r21
    1348:	4f 91       	pop	r20
    134a:	3f 91       	pop	r19
    134c:	2f 91       	pop	r18
    134e:	0f 90       	pop	r0
    1350:	0b be       	out	0x3b, r0	; 59
    1352:	0f 90       	pop	r0
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	0f 90       	pop	r0
    1358:	1f 90       	pop	r1
    135a:	18 95       	reti

0000135c <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    135c:	1f 92       	push	r1
    135e:	0f 92       	push	r0
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	0f 92       	push	r0
    1364:	11 24       	eor	r1, r1
    1366:	0b b6       	in	r0, 0x3b	; 59
    1368:	0f 92       	push	r0
    136a:	2f 93       	push	r18
    136c:	3f 93       	push	r19
    136e:	4f 93       	push	r20
    1370:	5f 93       	push	r21
    1372:	6f 93       	push	r22
    1374:	7f 93       	push	r23
    1376:	8f 93       	push	r24
    1378:	9f 93       	push	r25
    137a:	af 93       	push	r26
    137c:	bf 93       	push	r27
    137e:	ef 93       	push	r30
    1380:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1382:	e0 91 39 21 	lds	r30, 0x2139	; 0x802139 <tc_tce0_ccb_callback>
    1386:	f0 91 3a 21 	lds	r31, 0x213A	; 0x80213a <tc_tce0_ccb_callback+0x1>
    138a:	30 97       	sbiw	r30, 0x00	; 0
    138c:	09 f0       	breq	.+2      	; 0x1390 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    138e:	19 95       	eicall
	}
}
    1390:	ff 91       	pop	r31
    1392:	ef 91       	pop	r30
    1394:	bf 91       	pop	r27
    1396:	af 91       	pop	r26
    1398:	9f 91       	pop	r25
    139a:	8f 91       	pop	r24
    139c:	7f 91       	pop	r23
    139e:	6f 91       	pop	r22
    13a0:	5f 91       	pop	r21
    13a2:	4f 91       	pop	r20
    13a4:	3f 91       	pop	r19
    13a6:	2f 91       	pop	r18
    13a8:	0f 90       	pop	r0
    13aa:	0b be       	out	0x3b, r0	; 59
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	0f 90       	pop	r0
    13b2:	1f 90       	pop	r1
    13b4:	18 95       	reti

000013b6 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    13b6:	1f 92       	push	r1
    13b8:	0f 92       	push	r0
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	0f 92       	push	r0
    13be:	11 24       	eor	r1, r1
    13c0:	0b b6       	in	r0, 0x3b	; 59
    13c2:	0f 92       	push	r0
    13c4:	2f 93       	push	r18
    13c6:	3f 93       	push	r19
    13c8:	4f 93       	push	r20
    13ca:	5f 93       	push	r21
    13cc:	6f 93       	push	r22
    13ce:	7f 93       	push	r23
    13d0:	8f 93       	push	r24
    13d2:	9f 93       	push	r25
    13d4:	af 93       	push	r26
    13d6:	bf 93       	push	r27
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    13dc:	e0 91 37 21 	lds	r30, 0x2137	; 0x802137 <tc_tce0_ccc_callback>
    13e0:	f0 91 38 21 	lds	r31, 0x2138	; 0x802138 <tc_tce0_ccc_callback+0x1>
    13e4:	30 97       	sbiw	r30, 0x00	; 0
    13e6:	09 f0       	breq	.+2      	; 0x13ea <__vector_51+0x34>
		tc_tce0_ccc_callback();
    13e8:	19 95       	eicall
	}
}
    13ea:	ff 91       	pop	r31
    13ec:	ef 91       	pop	r30
    13ee:	bf 91       	pop	r27
    13f0:	af 91       	pop	r26
    13f2:	9f 91       	pop	r25
    13f4:	8f 91       	pop	r24
    13f6:	7f 91       	pop	r23
    13f8:	6f 91       	pop	r22
    13fa:	5f 91       	pop	r21
    13fc:	4f 91       	pop	r20
    13fe:	3f 91       	pop	r19
    1400:	2f 91       	pop	r18
    1402:	0f 90       	pop	r0
    1404:	0b be       	out	0x3b, r0	; 59
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1410:	1f 92       	push	r1
    1412:	0f 92       	push	r0
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	0f 92       	push	r0
    1418:	11 24       	eor	r1, r1
    141a:	0b b6       	in	r0, 0x3b	; 59
    141c:	0f 92       	push	r0
    141e:	2f 93       	push	r18
    1420:	3f 93       	push	r19
    1422:	4f 93       	push	r20
    1424:	5f 93       	push	r21
    1426:	6f 93       	push	r22
    1428:	7f 93       	push	r23
    142a:	8f 93       	push	r24
    142c:	9f 93       	push	r25
    142e:	af 93       	push	r26
    1430:	bf 93       	push	r27
    1432:	ef 93       	push	r30
    1434:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1436:	e0 91 35 21 	lds	r30, 0x2135	; 0x802135 <tc_tce0_ccd_callback>
    143a:	f0 91 36 21 	lds	r31, 0x2136	; 0x802136 <tc_tce0_ccd_callback+0x1>
    143e:	30 97       	sbiw	r30, 0x00	; 0
    1440:	09 f0       	breq	.+2      	; 0x1444 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    1442:	19 95       	eicall
	}
}
    1444:	ff 91       	pop	r31
    1446:	ef 91       	pop	r30
    1448:	bf 91       	pop	r27
    144a:	af 91       	pop	r26
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	7f 91       	pop	r23
    1452:	6f 91       	pop	r22
    1454:	5f 91       	pop	r21
    1456:	4f 91       	pop	r20
    1458:	3f 91       	pop	r19
    145a:	2f 91       	pop	r18
    145c:	0f 90       	pop	r0
    145e:	0b be       	out	0x3b, r0	; 59
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	0b b6       	in	r0, 0x3b	; 59
    1476:	0f 92       	push	r0
    1478:	2f 93       	push	r18
    147a:	3f 93       	push	r19
    147c:	4f 93       	push	r20
    147e:	5f 93       	push	r21
    1480:	6f 93       	push	r22
    1482:	7f 93       	push	r23
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	af 93       	push	r26
    148a:	bf 93       	push	r27
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1490:	e0 91 33 21 	lds	r30, 0x2133	; 0x802133 <tc_tce1_ovf_callback>
    1494:	f0 91 34 21 	lds	r31, 0x2134	; 0x802134 <tc_tce1_ovf_callback+0x1>
    1498:	30 97       	sbiw	r30, 0x00	; 0
    149a:	09 f0       	breq	.+2      	; 0x149e <__vector_53+0x34>
		tc_tce1_ovf_callback();
    149c:	19 95       	eicall
	}
}
    149e:	ff 91       	pop	r31
    14a0:	ef 91       	pop	r30
    14a2:	bf 91       	pop	r27
    14a4:	af 91       	pop	r26
    14a6:	9f 91       	pop	r25
    14a8:	8f 91       	pop	r24
    14aa:	7f 91       	pop	r23
    14ac:	6f 91       	pop	r22
    14ae:	5f 91       	pop	r21
    14b0:	4f 91       	pop	r20
    14b2:	3f 91       	pop	r19
    14b4:	2f 91       	pop	r18
    14b6:	0f 90       	pop	r0
    14b8:	0b be       	out	0x3b, r0	; 59
    14ba:	0f 90       	pop	r0
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	0f 90       	pop	r0
    14c0:	1f 90       	pop	r1
    14c2:	18 95       	reti

000014c4 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    14c4:	1f 92       	push	r1
    14c6:	0f 92       	push	r0
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	0f 92       	push	r0
    14cc:	11 24       	eor	r1, r1
    14ce:	0b b6       	in	r0, 0x3b	; 59
    14d0:	0f 92       	push	r0
    14d2:	2f 93       	push	r18
    14d4:	3f 93       	push	r19
    14d6:	4f 93       	push	r20
    14d8:	5f 93       	push	r21
    14da:	6f 93       	push	r22
    14dc:	7f 93       	push	r23
    14de:	8f 93       	push	r24
    14e0:	9f 93       	push	r25
    14e2:	af 93       	push	r26
    14e4:	bf 93       	push	r27
    14e6:	ef 93       	push	r30
    14e8:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    14ea:	e0 91 31 21 	lds	r30, 0x2131	; 0x802131 <tc_tce1_err_callback>
    14ee:	f0 91 32 21 	lds	r31, 0x2132	; 0x802132 <tc_tce1_err_callback+0x1>
    14f2:	30 97       	sbiw	r30, 0x00	; 0
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <__vector_54+0x34>
		tc_tce1_err_callback();
    14f6:	19 95       	eicall
	}
}
    14f8:	ff 91       	pop	r31
    14fa:	ef 91       	pop	r30
    14fc:	bf 91       	pop	r27
    14fe:	af 91       	pop	r26
    1500:	9f 91       	pop	r25
    1502:	8f 91       	pop	r24
    1504:	7f 91       	pop	r23
    1506:	6f 91       	pop	r22
    1508:	5f 91       	pop	r21
    150a:	4f 91       	pop	r20
    150c:	3f 91       	pop	r19
    150e:	2f 91       	pop	r18
    1510:	0f 90       	pop	r0
    1512:	0b be       	out	0x3b, r0	; 59
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	0f 90       	pop	r0
    151a:	1f 90       	pop	r1
    151c:	18 95       	reti

0000151e <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	0b b6       	in	r0, 0x3b	; 59
    152a:	0f 92       	push	r0
    152c:	2f 93       	push	r18
    152e:	3f 93       	push	r19
    1530:	4f 93       	push	r20
    1532:	5f 93       	push	r21
    1534:	6f 93       	push	r22
    1536:	7f 93       	push	r23
    1538:	8f 93       	push	r24
    153a:	9f 93       	push	r25
    153c:	af 93       	push	r26
    153e:	bf 93       	push	r27
    1540:	ef 93       	push	r30
    1542:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1544:	e0 91 2f 21 	lds	r30, 0x212F	; 0x80212f <tc_tce1_cca_callback>
    1548:	f0 91 30 21 	lds	r31, 0x2130	; 0x802130 <tc_tce1_cca_callback+0x1>
    154c:	30 97       	sbiw	r30, 0x00	; 0
    154e:	09 f0       	breq	.+2      	; 0x1552 <__vector_55+0x34>
		tc_tce1_cca_callback();
    1550:	19 95       	eicall
	}
}
    1552:	ff 91       	pop	r31
    1554:	ef 91       	pop	r30
    1556:	bf 91       	pop	r27
    1558:	af 91       	pop	r26
    155a:	9f 91       	pop	r25
    155c:	8f 91       	pop	r24
    155e:	7f 91       	pop	r23
    1560:	6f 91       	pop	r22
    1562:	5f 91       	pop	r21
    1564:	4f 91       	pop	r20
    1566:	3f 91       	pop	r19
    1568:	2f 91       	pop	r18
    156a:	0f 90       	pop	r0
    156c:	0b be       	out	0x3b, r0	; 59
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	0f 90       	pop	r0
    1574:	1f 90       	pop	r1
    1576:	18 95       	reti

00001578 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1578:	1f 92       	push	r1
    157a:	0f 92       	push	r0
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	0f 92       	push	r0
    1580:	11 24       	eor	r1, r1
    1582:	0b b6       	in	r0, 0x3b	; 59
    1584:	0f 92       	push	r0
    1586:	2f 93       	push	r18
    1588:	3f 93       	push	r19
    158a:	4f 93       	push	r20
    158c:	5f 93       	push	r21
    158e:	6f 93       	push	r22
    1590:	7f 93       	push	r23
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
    1596:	af 93       	push	r26
    1598:	bf 93       	push	r27
    159a:	ef 93       	push	r30
    159c:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    159e:	e0 91 2d 21 	lds	r30, 0x212D	; 0x80212d <tc_tce1_ccb_callback>
    15a2:	f0 91 2e 21 	lds	r31, 0x212E	; 0x80212e <tc_tce1_ccb_callback+0x1>
    15a6:	30 97       	sbiw	r30, 0x00	; 0
    15a8:	09 f0       	breq	.+2      	; 0x15ac <__vector_56+0x34>
		tc_tce1_ccb_callback();
    15aa:	19 95       	eicall
	}
}
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	0b be       	out	0x3b, r0	; 59
    15c8:	0f 90       	pop	r0
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	0f 90       	pop	r0
    15ce:	1f 90       	pop	r1
    15d0:	18 95       	reti

000015d2 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    15d2:	1f 92       	push	r1
    15d4:	0f 92       	push	r0
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	0f 92       	push	r0
    15da:	11 24       	eor	r1, r1
    15dc:	0b b6       	in	r0, 0x3b	; 59
    15de:	0f 92       	push	r0
    15e0:	2f 93       	push	r18
    15e2:	3f 93       	push	r19
    15e4:	4f 93       	push	r20
    15e6:	5f 93       	push	r21
    15e8:	6f 93       	push	r22
    15ea:	7f 93       	push	r23
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	af 93       	push	r26
    15f2:	bf 93       	push	r27
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    15f8:	e0 91 2b 21 	lds	r30, 0x212B	; 0x80212b <tc_tcf0_ovf_callback>
    15fc:	f0 91 2c 21 	lds	r31, 0x212C	; 0x80212c <tc_tcf0_ovf_callback+0x1>
    1600:	30 97       	sbiw	r30, 0x00	; 0
    1602:	09 f0       	breq	.+2      	; 0x1606 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1604:	19 95       	eicall
	}
}
    1606:	ff 91       	pop	r31
    1608:	ef 91       	pop	r30
    160a:	bf 91       	pop	r27
    160c:	af 91       	pop	r26
    160e:	9f 91       	pop	r25
    1610:	8f 91       	pop	r24
    1612:	7f 91       	pop	r23
    1614:	6f 91       	pop	r22
    1616:	5f 91       	pop	r21
    1618:	4f 91       	pop	r20
    161a:	3f 91       	pop	r19
    161c:	2f 91       	pop	r18
    161e:	0f 90       	pop	r0
    1620:	0b be       	out	0x3b, r0	; 59
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	0f 90       	pop	r0
    1628:	1f 90       	pop	r1
    162a:	18 95       	reti

0000162c <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	0b b6       	in	r0, 0x3b	; 59
    1638:	0f 92       	push	r0
    163a:	2f 93       	push	r18
    163c:	3f 93       	push	r19
    163e:	4f 93       	push	r20
    1640:	5f 93       	push	r21
    1642:	6f 93       	push	r22
    1644:	7f 93       	push	r23
    1646:	8f 93       	push	r24
    1648:	9f 93       	push	r25
    164a:	af 93       	push	r26
    164c:	bf 93       	push	r27
    164e:	ef 93       	push	r30
    1650:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1652:	e0 91 29 21 	lds	r30, 0x2129	; 0x802129 <tc_tcf0_err_callback>
    1656:	f0 91 2a 21 	lds	r31, 0x212A	; 0x80212a <tc_tcf0_err_callback+0x1>
    165a:	30 97       	sbiw	r30, 0x00	; 0
    165c:	09 f0       	breq	.+2      	; 0x1660 <__vector_109+0x34>
		tc_tcf0_err_callback();
    165e:	19 95       	eicall
	}
}
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0b be       	out	0x3b, r0	; 59
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	0f 90       	pop	r0
    1682:	1f 90       	pop	r1
    1684:	18 95       	reti

00001686 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	0b b6       	in	r0, 0x3b	; 59
    1692:	0f 92       	push	r0
    1694:	2f 93       	push	r18
    1696:	3f 93       	push	r19
    1698:	4f 93       	push	r20
    169a:	5f 93       	push	r21
    169c:	6f 93       	push	r22
    169e:	7f 93       	push	r23
    16a0:	8f 93       	push	r24
    16a2:	9f 93       	push	r25
    16a4:	af 93       	push	r26
    16a6:	bf 93       	push	r27
    16a8:	ef 93       	push	r30
    16aa:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    16ac:	e0 91 27 21 	lds	r30, 0x2127	; 0x802127 <tc_tcf0_cca_callback>
    16b0:	f0 91 28 21 	lds	r31, 0x2128	; 0x802128 <tc_tcf0_cca_callback+0x1>
    16b4:	30 97       	sbiw	r30, 0x00	; 0
    16b6:	09 f0       	breq	.+2      	; 0x16ba <__vector_110+0x34>
		tc_tcf0_cca_callback();
    16b8:	19 95       	eicall
	}
}
    16ba:	ff 91       	pop	r31
    16bc:	ef 91       	pop	r30
    16be:	bf 91       	pop	r27
    16c0:	af 91       	pop	r26
    16c2:	9f 91       	pop	r25
    16c4:	8f 91       	pop	r24
    16c6:	7f 91       	pop	r23
    16c8:	6f 91       	pop	r22
    16ca:	5f 91       	pop	r21
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	0f 90       	pop	r0
    16d4:	0b be       	out	0x3b, r0	; 59
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	1f 90       	pop	r1
    16de:	18 95       	reti

000016e0 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    16e0:	1f 92       	push	r1
    16e2:	0f 92       	push	r0
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	0f 92       	push	r0
    16e8:	11 24       	eor	r1, r1
    16ea:	0b b6       	in	r0, 0x3b	; 59
    16ec:	0f 92       	push	r0
    16ee:	2f 93       	push	r18
    16f0:	3f 93       	push	r19
    16f2:	4f 93       	push	r20
    16f4:	5f 93       	push	r21
    16f6:	6f 93       	push	r22
    16f8:	7f 93       	push	r23
    16fa:	8f 93       	push	r24
    16fc:	9f 93       	push	r25
    16fe:	af 93       	push	r26
    1700:	bf 93       	push	r27
    1702:	ef 93       	push	r30
    1704:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1706:	e0 91 25 21 	lds	r30, 0x2125	; 0x802125 <tc_tcf0_ccb_callback>
    170a:	f0 91 26 21 	lds	r31, 0x2126	; 0x802126 <tc_tcf0_ccb_callback+0x1>
    170e:	30 97       	sbiw	r30, 0x00	; 0
    1710:	09 f0       	breq	.+2      	; 0x1714 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1712:	19 95       	eicall
	}
}
    1714:	ff 91       	pop	r31
    1716:	ef 91       	pop	r30
    1718:	bf 91       	pop	r27
    171a:	af 91       	pop	r26
    171c:	9f 91       	pop	r25
    171e:	8f 91       	pop	r24
    1720:	7f 91       	pop	r23
    1722:	6f 91       	pop	r22
    1724:	5f 91       	pop	r21
    1726:	4f 91       	pop	r20
    1728:	3f 91       	pop	r19
    172a:	2f 91       	pop	r18
    172c:	0f 90       	pop	r0
    172e:	0b be       	out	0x3b, r0	; 59
    1730:	0f 90       	pop	r0
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	0f 90       	pop	r0
    1736:	1f 90       	pop	r1
    1738:	18 95       	reti

0000173a <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    173a:	1f 92       	push	r1
    173c:	0f 92       	push	r0
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	11 24       	eor	r1, r1
    1744:	0b b6       	in	r0, 0x3b	; 59
    1746:	0f 92       	push	r0
    1748:	2f 93       	push	r18
    174a:	3f 93       	push	r19
    174c:	4f 93       	push	r20
    174e:	5f 93       	push	r21
    1750:	6f 93       	push	r22
    1752:	7f 93       	push	r23
    1754:	8f 93       	push	r24
    1756:	9f 93       	push	r25
    1758:	af 93       	push	r26
    175a:	bf 93       	push	r27
    175c:	ef 93       	push	r30
    175e:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1760:	e0 91 23 21 	lds	r30, 0x2123	; 0x802123 <tc_tcf0_ccc_callback>
    1764:	f0 91 24 21 	lds	r31, 0x2124	; 0x802124 <tc_tcf0_ccc_callback+0x1>
    1768:	30 97       	sbiw	r30, 0x00	; 0
    176a:	09 f0       	breq	.+2      	; 0x176e <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    176c:	19 95       	eicall
	}
}
    176e:	ff 91       	pop	r31
    1770:	ef 91       	pop	r30
    1772:	bf 91       	pop	r27
    1774:	af 91       	pop	r26
    1776:	9f 91       	pop	r25
    1778:	8f 91       	pop	r24
    177a:	7f 91       	pop	r23
    177c:	6f 91       	pop	r22
    177e:	5f 91       	pop	r21
    1780:	4f 91       	pop	r20
    1782:	3f 91       	pop	r19
    1784:	2f 91       	pop	r18
    1786:	0f 90       	pop	r0
    1788:	0b be       	out	0x3b, r0	; 59
    178a:	0f 90       	pop	r0
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	0f 90       	pop	r0
    1790:	1f 90       	pop	r1
    1792:	18 95       	reti

00001794 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1794:	1f 92       	push	r1
    1796:	0f 92       	push	r0
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	0f 92       	push	r0
    179c:	11 24       	eor	r1, r1
    179e:	0b b6       	in	r0, 0x3b	; 59
    17a0:	0f 92       	push	r0
    17a2:	2f 93       	push	r18
    17a4:	3f 93       	push	r19
    17a6:	4f 93       	push	r20
    17a8:	5f 93       	push	r21
    17aa:	6f 93       	push	r22
    17ac:	7f 93       	push	r23
    17ae:	8f 93       	push	r24
    17b0:	9f 93       	push	r25
    17b2:	af 93       	push	r26
    17b4:	bf 93       	push	r27
    17b6:	ef 93       	push	r30
    17b8:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    17ba:	e0 91 21 21 	lds	r30, 0x2121	; 0x802121 <tc_tcf0_ccd_callback>
    17be:	f0 91 22 21 	lds	r31, 0x2122	; 0x802122 <tc_tcf0_ccd_callback+0x1>
    17c2:	30 97       	sbiw	r30, 0x00	; 0
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    17c6:	19 95       	eicall
	}
}
    17c8:	ff 91       	pop	r31
    17ca:	ef 91       	pop	r30
    17cc:	bf 91       	pop	r27
    17ce:	af 91       	pop	r26
    17d0:	9f 91       	pop	r25
    17d2:	8f 91       	pop	r24
    17d4:	7f 91       	pop	r23
    17d6:	6f 91       	pop	r22
    17d8:	5f 91       	pop	r21
    17da:	4f 91       	pop	r20
    17dc:	3f 91       	pop	r19
    17de:	2f 91       	pop	r18
    17e0:	0f 90       	pop	r0
    17e2:	0b be       	out	0x3b, r0	; 59
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

000017ee <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	1f 92       	push	r1
    17f6:	1f 92       	push	r1
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    17fc:	2f b7       	in	r18, 0x3f	; 63
    17fe:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    1800:	f8 94       	cli
	return flags;
    1802:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1804:	28 2f       	mov	r18, r24
    1806:	39 2f       	mov	r19, r25
    1808:	21 15       	cp	r18, r1
    180a:	88 e0       	ldi	r24, 0x08	; 8
    180c:	38 07       	cpc	r19, r24
    180e:	49 f4       	brne	.+18     	; 0x1822 <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1818:	64 e0       	ldi	r22, 0x04	; 4
    181a:	83 e0       	ldi	r24, 0x03	; 3
    181c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
    1820:	4f c0       	rjmp	.+158    	; 0x18c0 <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1822:	20 34       	cpi	r18, 0x40	; 64
    1824:	88 e0       	ldi	r24, 0x08	; 8
    1826:	38 07       	cpc	r19, r24
    1828:	49 f4       	brne	.+18     	; 0x183c <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    182a:	62 e0       	ldi	r22, 0x02	; 2
    182c:	83 e0       	ldi	r24, 0x03	; 3
    182e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1832:	64 e0       	ldi	r22, 0x04	; 4
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
    183a:	42 c0       	rjmp	.+132    	; 0x18c0 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    183c:	21 15       	cp	r18, r1
    183e:	89 e0       	ldi	r24, 0x09	; 9
    1840:	38 07       	cpc	r19, r24
    1842:	49 f4       	brne	.+18     	; 0x1856 <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	84 e0       	ldi	r24, 0x04	; 4
    1848:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    184c:	64 e0       	ldi	r22, 0x04	; 4
    184e:	84 e0       	ldi	r24, 0x04	; 4
    1850:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
    1854:	35 c0       	rjmp	.+106    	; 0x18c0 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1856:	20 34       	cpi	r18, 0x40	; 64
    1858:	89 e0       	ldi	r24, 0x09	; 9
    185a:	38 07       	cpc	r19, r24
    185c:	49 f4       	brne	.+18     	; 0x1870 <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    185e:	62 e0       	ldi	r22, 0x02	; 2
    1860:	84 e0       	ldi	r24, 0x04	; 4
    1862:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1866:	64 e0       	ldi	r22, 0x04	; 4
    1868:	84 e0       	ldi	r24, 0x04	; 4
    186a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
    186e:	28 c0       	rjmp	.+80     	; 0x18c0 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1870:	21 15       	cp	r18, r1
    1872:	8a e0       	ldi	r24, 0x0A	; 10
    1874:	38 07       	cpc	r19, r24
    1876:	49 f4       	brne	.+18     	; 0x188a <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	85 e0       	ldi	r24, 0x05	; 5
    187c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1880:	64 e0       	ldi	r22, 0x04	; 4
    1882:	85 e0       	ldi	r24, 0x05	; 5
    1884:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
    1888:	1b c0       	rjmp	.+54     	; 0x18c0 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    188a:	20 34       	cpi	r18, 0x40	; 64
    188c:	8a e0       	ldi	r24, 0x0A	; 10
    188e:	38 07       	cpc	r19, r24
    1890:	49 f4       	brne	.+18     	; 0x18a4 <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1892:	62 e0       	ldi	r22, 0x02	; 2
    1894:	85 e0       	ldi	r24, 0x05	; 5
    1896:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    189a:	64 e0       	ldi	r22, 0x04	; 4
    189c:	85 e0       	ldi	r24, 0x05	; 5
    189e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
    18a2:	0e c0       	rjmp	.+28     	; 0x18c0 <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    18a4:	21 15       	cp	r18, r1
    18a6:	3b 40       	sbci	r19, 0x0B	; 11
    18a8:	49 f4       	brne	.+18     	; 0x18bc <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	86 e0       	ldi	r24, 0x06	; 6
    18ae:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    18b2:	64 e0       	ldi	r22, 0x04	; 4
    18b4:	86 e0       	ldi	r24, 0x06	; 6
    18b6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sysclk_enable_module>
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18bc:	1f bf       	out	0x3f, r17	; 63
    18be:	10 c0       	rjmp	.+32     	; 0x18e0 <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    18c0:	80 91 f3 23 	lds	r24, 0x23F3	; 0x8023f3 <sleepmgr_locks+0x1>
    18c4:	8f 3f       	cpi	r24, 0xFF	; 255
    18c6:	09 f4       	brne	.+2      	; 0x18ca <tc_enable+0xdc>
    18c8:	ff cf       	rjmp	.-2      	; 0x18c8 <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    18ca:	8f b7       	in	r24, 0x3f	; 63
    18cc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    18ce:	f8 94       	cli
	return flags;
    18d0:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    18d2:	e2 ef       	ldi	r30, 0xF2	; 242
    18d4:	f3 e2       	ldi	r31, 0x23	; 35
    18d6:	81 81       	ldd	r24, Z+1	; 0x01
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18dc:	9f bf       	out	0x3f, r25	; 63
    18de:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	08 95       	ret

000018ec <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    18f0:	e0 91 69 21 	lds	r30, 0x2169	; 0x802169 <transfer>
    18f4:	f0 91 6a 21 	lds	r31, 0x216A	; 0x80216a <transfer+0x1>
    18f8:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    18fa:	83 ff       	sbrs	r24, 3
    18fc:	08 c0       	rjmp	.+16     	; 0x190e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    18fe:	88 60       	ori	r24, 0x08	; 8
    1900:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1906:	86 ef       	ldi	r24, 0xF6	; 246
    1908:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <transfer+0xa>
    190c:	83 c0       	rjmp	.+262    	; 0x1a14 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    190e:	98 2f       	mov	r25, r24
    1910:	94 71       	andi	r25, 0x14	; 20
    1912:	31 f0       	breq	.+12     	; 0x1920 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <transfer+0xa>
    191e:	7a c0       	rjmp	.+244    	; 0x1a14 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1920:	86 ff       	sbrs	r24, 6
    1922:	43 c0       	rjmp	.+134    	; 0x19aa <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1924:	c9 e6       	ldi	r28, 0x69	; 105
    1926:	d1 e2       	ldi	r29, 0x21	; 33
    1928:	aa 81       	ldd	r26, Y+2	; 0x02
    192a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    192c:	8c 81       	ldd	r24, Y+4	; 0x04
    192e:	9d 81       	ldd	r25, Y+5	; 0x05
    1930:	14 96       	adiw	r26, 0x04	; 4
    1932:	2d 91       	ld	r18, X+
    1934:	3c 91       	ld	r19, X
    1936:	15 97       	sbiw	r26, 0x05	; 5
    1938:	82 17       	cp	r24, r18
    193a:	93 07       	cpc	r25, r19
    193c:	6c f4       	brge	.+26     	; 0x1958 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    193e:	9c 01       	movw	r18, r24
    1940:	2f 5f       	subi	r18, 0xFF	; 255
    1942:	3f 4f       	sbci	r19, 0xFF	; 255
    1944:	20 93 6d 21 	sts	0x216D, r18	; 0x80216d <transfer+0x4>
    1948:	30 93 6e 21 	sts	0x216E, r19	; 0x80216e <transfer+0x5>
    194c:	a8 0f       	add	r26, r24
    194e:	b9 1f       	adc	r27, r25
    1950:	11 96       	adiw	r26, 0x01	; 1
    1952:	8c 91       	ld	r24, X
    1954:	87 83       	std	Z+7, r24	; 0x07
    1956:	5e c0       	rjmp	.+188    	; 0x1a14 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1958:	80 91 6f 21 	lds	r24, 0x216F	; 0x80216f <transfer+0x6>
    195c:	90 91 70 21 	lds	r25, 0x2170	; 0x802170 <transfer+0x7>
    1960:	18 96       	adiw	r26, 0x08	; 8
    1962:	2d 91       	ld	r18, X+
    1964:	3c 91       	ld	r19, X
    1966:	19 97       	sbiw	r26, 0x09	; 9
    1968:	82 17       	cp	r24, r18
    196a:	93 07       	cpc	r25, r19
    196c:	c8 f4       	brcc	.+50     	; 0x19a0 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    196e:	20 91 71 21 	lds	r18, 0x2171	; 0x802171 <transfer+0x8>
    1972:	22 23       	and	r18, r18
    1974:	21 f0       	breq	.+8      	; 0x197e <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1976:	86 81       	ldd	r24, Z+6	; 0x06
    1978:	81 60       	ori	r24, 0x01	; 1
    197a:	86 83       	std	Z+6, r24	; 0x06
    197c:	4b c0       	rjmp	.+150    	; 0x1a14 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    197e:	16 96       	adiw	r26, 0x06	; 6
    1980:	2d 91       	ld	r18, X+
    1982:	3c 91       	ld	r19, X
    1984:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1986:	ac 01       	movw	r20, r24
    1988:	4f 5f       	subi	r20, 0xFF	; 255
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
    198c:	40 93 6f 21 	sts	0x216F, r20	; 0x80216f <transfer+0x6>
    1990:	50 93 70 21 	sts	0x2170, r21	; 0x802170 <transfer+0x7>
    1994:	d9 01       	movw	r26, r18
    1996:	a8 0f       	add	r26, r24
    1998:	b9 1f       	adc	r27, r25
    199a:	8c 91       	ld	r24, X
    199c:	87 83       	std	Z+7, r24	; 0x07
    199e:	3a c0       	rjmp	.+116    	; 0x1a14 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    19a0:	83 e0       	ldi	r24, 0x03	; 3
    19a2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    19a4:	10 92 73 21 	sts	0x2173, r1	; 0x802173 <transfer+0xa>
    19a8:	35 c0       	rjmp	.+106    	; 0x1a14 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    19aa:	88 23       	and	r24, r24
    19ac:	84 f5       	brge	.+96     	; 0x1a0e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    19ae:	a9 e6       	ldi	r26, 0x69	; 105
    19b0:	b1 e2       	ldi	r27, 0x21	; 33
    19b2:	12 96       	adiw	r26, 0x02	; 2
    19b4:	cd 91       	ld	r28, X+
    19b6:	dc 91       	ld	r29, X
    19b8:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    19ba:	16 96       	adiw	r26, 0x06	; 6
    19bc:	8d 91       	ld	r24, X+
    19be:	9c 91       	ld	r25, X
    19c0:	17 97       	sbiw	r26, 0x07	; 7
    19c2:	28 85       	ldd	r18, Y+8	; 0x08
    19c4:	39 85       	ldd	r19, Y+9	; 0x09
    19c6:	82 17       	cp	r24, r18
    19c8:	93 07       	cpc	r25, r19
    19ca:	d8 f4       	brcc	.+54     	; 0x1a02 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    19cc:	6e 81       	ldd	r22, Y+6	; 0x06
    19ce:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    19d0:	9c 01       	movw	r18, r24
    19d2:	2f 5f       	subi	r18, 0xFF	; 255
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	20 93 6f 21 	sts	0x216F, r18	; 0x80216f <transfer+0x6>
    19da:	30 93 70 21 	sts	0x2170, r19	; 0x802170 <transfer+0x7>
    19de:	47 81       	ldd	r20, Z+7	; 0x07
    19e0:	db 01       	movw	r26, r22
    19e2:	a8 0f       	add	r26, r24
    19e4:	b9 1f       	adc	r27, r25
    19e6:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    19e8:	88 85       	ldd	r24, Y+8	; 0x08
    19ea:	99 85       	ldd	r25, Y+9	; 0x09
    19ec:	28 17       	cp	r18, r24
    19ee:	39 07       	cpc	r19, r25
    19f0:	18 f4       	brcc	.+6      	; 0x19f8 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	83 83       	std	Z+3, r24	; 0x03
    19f6:	0e c0       	rjmp	.+28     	; 0x1a14 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    19f8:	87 e0       	ldi	r24, 0x07	; 7
    19fa:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    19fc:	10 92 73 21 	sts	0x2173, r1	; 0x802173 <transfer+0xa>
    1a00:	09 c0       	rjmp	.+18     	; 0x1a14 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1a02:	83 e0       	ldi	r24, 0x03	; 3
    1a04:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1a06:	89 ef       	ldi	r24, 0xF9	; 249
    1a08:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <transfer+0xa>
    1a0c:	03 c0       	rjmp	.+6      	; 0x1a14 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1a0e:	8b ef       	ldi	r24, 0xFB	; 251
    1a10:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <transfer+0xa>
	}
}
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1a1a:	1f 92       	push	r1
    1a1c:	0f 92       	push	r0
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	0f 92       	push	r0
    1a22:	11 24       	eor	r1, r1
    1a24:	0b b6       	in	r0, 0x3b	; 59
    1a26:	0f 92       	push	r0
    1a28:	2f 93       	push	r18
    1a2a:	3f 93       	push	r19
    1a2c:	4f 93       	push	r20
    1a2e:	5f 93       	push	r21
    1a30:	6f 93       	push	r22
    1a32:	7f 93       	push	r23
    1a34:	8f 93       	push	r24
    1a36:	9f 93       	push	r25
    1a38:	af 93       	push	r26
    1a3a:	bf 93       	push	r27
    1a3c:	ef 93       	push	r30
    1a3e:	ff 93       	push	r31
    1a40:	55 df       	rcall	.-342    	; 0x18ec <twim_interrupt_handler>
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	bf 91       	pop	r27
    1a48:	af 91       	pop	r26
    1a4a:	9f 91       	pop	r25
    1a4c:	8f 91       	pop	r24
    1a4e:	7f 91       	pop	r23
    1a50:	6f 91       	pop	r22
    1a52:	5f 91       	pop	r21
    1a54:	4f 91       	pop	r20
    1a56:	3f 91       	pop	r19
    1a58:	2f 91       	pop	r18
    1a5a:	0f 90       	pop	r0
    1a5c:	0b be       	out	0x3b, r0	; 59
    1a5e:	0f 90       	pop	r0
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	0f 90       	pop	r0
    1a64:	1f 90       	pop	r1
    1a66:	18 95       	reti

00001a68 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1a68:	1f 92       	push	r1
    1a6a:	0f 92       	push	r0
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	0f 92       	push	r0
    1a70:	11 24       	eor	r1, r1
    1a72:	0b b6       	in	r0, 0x3b	; 59
    1a74:	0f 92       	push	r0
    1a76:	2f 93       	push	r18
    1a78:	3f 93       	push	r19
    1a7a:	4f 93       	push	r20
    1a7c:	5f 93       	push	r21
    1a7e:	6f 93       	push	r22
    1a80:	7f 93       	push	r23
    1a82:	8f 93       	push	r24
    1a84:	9f 93       	push	r25
    1a86:	af 93       	push	r26
    1a88:	bf 93       	push	r27
    1a8a:	ef 93       	push	r30
    1a8c:	ff 93       	push	r31
    1a8e:	2e df       	rcall	.-420    	; 0x18ec <twim_interrupt_handler>
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	7f 91       	pop	r23
    1a9e:	6f 91       	pop	r22
    1aa0:	5f 91       	pop	r21
    1aa2:	4f 91       	pop	r20
    1aa4:	3f 91       	pop	r19
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0b be       	out	0x3b, r0	; 59
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	0f 90       	pop	r0
    1ab2:	1f 90       	pop	r1
    1ab4:	18 95       	reti

00001ab6 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    1ab6:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    1ab8:	db 01       	movw	r26, r22
    1aba:	14 96       	adiw	r26, 0x04	; 4
    1abc:	8c 91       	ld	r24, X
    1abe:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    1ac0:	88 eb       	ldi	r24, 0xB8	; 184
    1ac2:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    1ac8:	e9 e6       	ldi	r30, 0x69	; 105
    1aca:	f1 e2       	ldi	r31, 0x21	; 33
    1acc:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    1ace:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    1ad0:	e0 ea       	ldi	r30, 0xA0	; 160
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	82 60       	ori	r24, 0x02	; 2
    1ad8:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    1ada:	78 94       	sei

	return STATUS_OK;
}
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	08 95       	ret

00001ae0 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	1f 92       	push	r1
    1ae6:	1f 92       	push	r1
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	81 11       	cpse	r24, r1
    1aee:	26 c0       	rjmp	.+76     	; 0x1b3c <udd_sleep_mode+0x5c>
    1af0:	90 91 a0 22 	lds	r25, 0x22A0	; 0x8022a0 <udd_b_idle>
    1af4:	99 23       	and	r25, r25
    1af6:	f9 f0       	breq	.+62     	; 0x1b36 <udd_sleep_mode+0x56>
    1af8:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <sleepmgr_locks+0x1>
    1afc:	91 11       	cpse	r25, r1
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <udd_sleep_mode+0x22>
    1b00:	ff cf       	rjmp	.-2      	; 0x1b00 <udd_sleep_mode+0x20>
    1b02:	9f b7       	in	r25, 0x3f	; 63
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	f8 94       	cli
    1b08:	2a 81       	ldd	r18, Y+2	; 0x02
    1b0a:	e2 ef       	ldi	r30, 0xF2	; 242
    1b0c:	f3 e2       	ldi	r31, 0x23	; 35
    1b0e:	91 81       	ldd	r25, Z+1	; 0x01
    1b10:	91 50       	subi	r25, 0x01	; 1
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	2f bf       	out	0x3f, r18	; 63
    1b16:	0f c0       	rjmp	.+30     	; 0x1b36 <udd_sleep_mode+0x56>
    1b18:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <sleepmgr_locks+0x1>
    1b1c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <udd_sleep_mode+0x42>
    1b20:	ff cf       	rjmp	.-2      	; 0x1b20 <udd_sleep_mode+0x40>
    1b22:	9f b7       	in	r25, 0x3f	; 63
    1b24:	99 83       	std	Y+1, r25	; 0x01
    1b26:	f8 94       	cli
    1b28:	29 81       	ldd	r18, Y+1	; 0x01
    1b2a:	e2 ef       	ldi	r30, 0xF2	; 242
    1b2c:	f3 e2       	ldi	r31, 0x23	; 35
    1b2e:	91 81       	ldd	r25, Z+1	; 0x01
    1b30:	9f 5f       	subi	r25, 0xFF	; 255
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	2f bf       	out	0x3f, r18	; 63
    1b36:	80 93 a0 22 	sts	0x22A0, r24	; 0x8022a0 <udd_b_idle>
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <udd_sleep_mode+0x66>
    1b3c:	90 91 a0 22 	lds	r25, 0x22A0	; 0x8022a0 <udd_b_idle>
    1b40:	99 23       	and	r25, r25
    1b42:	51 f3       	breq	.-44     	; 0x1b18 <udd_sleep_mode+0x38>
    1b44:	f8 cf       	rjmp	.-16     	; 0x1b36 <udd_sleep_mode+0x56>
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	08 95       	ret

00001b50 <udd_ctrl_init>:
    1b50:	0f 93       	push	r16
    1b52:	e8 ec       	ldi	r30, 0xC8	; 200
    1b54:	f4 e0       	ldi	r31, 0x04	; 4
    1b56:	80 81       	ld	r24, Z
    1b58:	8f 7d       	andi	r24, 0xDF	; 223
    1b5a:	80 83       	st	Z, r24
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8f 7d       	andi	r24, 0xDF	; 223
    1b60:	80 83       	st	Z, r24
    1b62:	e4 e7       	ldi	r30, 0x74	; 116
    1b64:	f2 e2       	ldi	r31, 0x22	; 34
    1b66:	02 e0       	ldi	r16, 0x02	; 2
    1b68:	05 93       	las	Z, r16
    1b6a:	10 92 76 22 	sts	0x2276, r1	; 0x802276 <udd_sram+0x16>
    1b6e:	10 92 77 22 	sts	0x2277, r1	; 0x802277 <udd_sram+0x17>
    1b72:	00 e2       	ldi	r16, 0x20	; 32
    1b74:	06 93       	lac	Z, r16
    1b76:	00 e4       	ldi	r16, 0x40	; 64
    1b78:	06 93       	lac	Z, r16
    1b7a:	ec e6       	ldi	r30, 0x6C	; 108
    1b7c:	f2 e2       	ldi	r31, 0x22	; 34
    1b7e:	00 e4       	ldi	r16, 0x40	; 64
    1b80:	06 93       	lac	Z, r16
    1b82:	e2 ee       	ldi	r30, 0xE2	; 226
    1b84:	f3 e2       	ldi	r31, 0x23	; 35
    1b86:	14 86       	std	Z+12, r1	; 0x0c
    1b88:	15 86       	std	Z+13, r1	; 0x0d
    1b8a:	16 86       	std	Z+14, r1	; 0x0e
    1b8c:	17 86       	std	Z+15, r1	; 0x0f
    1b8e:	12 86       	std	Z+10, r1	; 0x0a
    1b90:	13 86       	std	Z+11, r1	; 0x0b
    1b92:	10 92 5d 22 	sts	0x225D, r1	; 0x80225d <udd_ep_control_state>
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <udd_ctrl_stall_data>:
    1b9a:	0f 93       	push	r16
    1b9c:	85 e0       	ldi	r24, 0x05	; 5
    1b9e:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <udd_ep_control_state>
    1ba2:	e5 e7       	ldi	r30, 0x75	; 117
    1ba4:	f2 e2       	ldi	r31, 0x22	; 34
    1ba6:	04 e0       	ldi	r16, 0x04	; 4
    1ba8:	05 93       	las	Z, r16
    1baa:	ed e6       	ldi	r30, 0x6D	; 109
    1bac:	f2 e2       	ldi	r31, 0x22	; 34
    1bae:	04 e0       	ldi	r16, 0x04	; 4
    1bb0:	05 93       	las	Z, r16
    1bb2:	0f 91       	pop	r16
    1bb4:	08 95       	ret

00001bb6 <udd_ctrl_send_zlp_in>:
    1bb6:	0f 93       	push	r16
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <udd_ep_control_state>
    1bbe:	10 92 76 22 	sts	0x2276, r1	; 0x802276 <udd_sram+0x16>
    1bc2:	10 92 77 22 	sts	0x2277, r1	; 0x802277 <udd_sram+0x17>
    1bc6:	e4 e7       	ldi	r30, 0x74	; 116
    1bc8:	f2 e2       	ldi	r31, 0x22	; 34
    1bca:	02 e0       	ldi	r16, 0x02	; 2
    1bcc:	06 93       	lac	Z, r16
    1bce:	0f 91       	pop	r16
    1bd0:	08 95       	ret

00001bd2 <udd_ctrl_endofrequest>:
    1bd2:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0xc>
    1bd6:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udd_g_ctrlreq+0xd>
    1bda:	30 97       	sbiw	r30, 0x00	; 0
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <udd_ctrl_endofrequest+0xe>
    1bde:	19 95       	eicall
    1be0:	08 95       	ret

00001be2 <udd_ctrl_in_sent>:
    1be2:	0f 93       	push	r16
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <udd_ep_control_state>
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	19 f4       	brne	.+6      	; 0x1bf6 <udd_ctrl_in_sent+0x14>
    1bf0:	f0 df       	rcall	.-32     	; 0x1bd2 <udd_ctrl_endofrequest>
    1bf2:	ae df       	rcall	.-164    	; 0x1b50 <udd_ctrl_init>
    1bf4:	5e c0       	rjmp	.+188    	; 0x1cb2 <udd_ctrl_in_sent+0xd0>
    1bf6:	80 91 59 22 	lds	r24, 0x2259	; 0x802259 <udd_ctrl_payload_nb_trans>
    1bfa:	90 91 5a 22 	lds	r25, 0x225A	; 0x80225a <udd_ctrl_payload_nb_trans+0x1>
    1bfe:	c0 91 ec 23 	lds	r28, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0xa>
    1c02:	d0 91 ed 23 	lds	r29, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0xb>
    1c06:	c8 1b       	sub	r28, r24
    1c08:	d9 0b       	sbc	r29, r25
    1c0a:	71 f5       	brne	.+92     	; 0x1c68 <udd_ctrl_in_sent+0x86>
    1c0c:	20 91 5b 22 	lds	r18, 0x225B	; 0x80225b <udd_ctrl_prev_payload_nb_trans>
    1c10:	30 91 5c 22 	lds	r19, 0x225C	; 0x80225c <udd_ctrl_prev_payload_nb_trans+0x1>
    1c14:	82 0f       	add	r24, r18
    1c16:	93 1f       	adc	r25, r19
    1c18:	80 93 5b 22 	sts	0x225B, r24	; 0x80225b <udd_ctrl_prev_payload_nb_trans>
    1c1c:	90 93 5c 22 	sts	0x225C, r25	; 0x80225c <udd_ctrl_prev_payload_nb_trans+0x1>
    1c20:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1c24:	30 91 e9 23 	lds	r19, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	21 f0       	breq	.+8      	; 0x1c36 <udd_ctrl_in_sent+0x54>
    1c2e:	80 91 74 21 	lds	r24, 0x2174	; 0x802174 <b_shortpacket.5472>
    1c32:	88 23       	and	r24, r24
    1c34:	41 f0       	breq	.+16     	; 0x1c46 <udd_ctrl_in_sent+0x64>
    1c36:	84 e0       	ldi	r24, 0x04	; 4
    1c38:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <udd_ep_control_state>
    1c3c:	ec e6       	ldi	r30, 0x6C	; 108
    1c3e:	f2 e2       	ldi	r31, 0x22	; 34
    1c40:	02 e0       	ldi	r16, 0x02	; 2
    1c42:	06 93       	lac	Z, r16
    1c44:	36 c0       	rjmp	.+108    	; 0x1cb2 <udd_ctrl_in_sent+0xd0>
    1c46:	e0 91 f0 23 	lds	r30, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xe>
    1c4a:	f0 91 f1 23 	lds	r31, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xf>
    1c4e:	30 97       	sbiw	r30, 0x00	; 0
    1c50:	99 f0       	breq	.+38     	; 0x1c78 <udd_ctrl_in_sent+0x96>
    1c52:	19 95       	eicall
    1c54:	88 23       	and	r24, r24
    1c56:	81 f0       	breq	.+32     	; 0x1c78 <udd_ctrl_in_sent+0x96>
    1c58:	10 92 59 22 	sts	0x2259, r1	; 0x802259 <udd_ctrl_payload_nb_trans>
    1c5c:	10 92 5a 22 	sts	0x225A, r1	; 0x80225a <udd_ctrl_payload_nb_trans+0x1>
    1c60:	c0 91 ec 23 	lds	r28, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0xa>
    1c64:	d0 91 ed 23 	lds	r29, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0xb>
    1c68:	c0 34       	cpi	r28, 0x40	; 64
    1c6a:	d1 05       	cpc	r29, r1
    1c6c:	28 f0       	brcs	.+10     	; 0x1c78 <udd_ctrl_in_sent+0x96>
    1c6e:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <b_shortpacket.5472>
    1c72:	c0 e4       	ldi	r28, 0x40	; 64
    1c74:	d0 e0       	ldi	r29, 0x00	; 0
    1c76:	03 c0       	rjmp	.+6      	; 0x1c7e <udd_ctrl_in_sent+0x9c>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	80 93 74 21 	sts	0x2174, r24	; 0x802174 <b_shortpacket.5472>
    1c7e:	e0 e6       	ldi	r30, 0x60	; 96
    1c80:	f2 e2       	ldi	r31, 0x22	; 34
    1c82:	c6 8b       	std	Z+22, r28	; 0x16
    1c84:	d7 8b       	std	Z+23, r29	; 0x17
    1c86:	80 91 59 22 	lds	r24, 0x2259	; 0x802259 <udd_ctrl_payload_nb_trans>
    1c8a:	90 91 5a 22 	lds	r25, 0x225A	; 0x80225a <udd_ctrl_payload_nb_trans+0x1>
    1c8e:	20 91 ea 23 	lds	r18, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x8>
    1c92:	30 91 eb 23 	lds	r19, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x9>
    1c96:	28 0f       	add	r18, r24
    1c98:	39 1f       	adc	r19, r25
    1c9a:	20 8f       	std	Z+24, r18	; 0x18
    1c9c:	31 8f       	std	Z+25, r19	; 0x19
    1c9e:	c8 0f       	add	r28, r24
    1ca0:	d9 1f       	adc	r29, r25
    1ca2:	c0 93 59 22 	sts	0x2259, r28	; 0x802259 <udd_ctrl_payload_nb_trans>
    1ca6:	d0 93 5a 22 	sts	0x225A, r29	; 0x80225a <udd_ctrl_payload_nb_trans+0x1>
    1caa:	e4 e7       	ldi	r30, 0x74	; 116
    1cac:	f2 e2       	ldi	r31, 0x22	; 34
    1cae:	02 e0       	ldi	r16, 0x02	; 2
    1cb0:	06 93       	lac	Z, r16
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	0f 91       	pop	r16
    1cb8:	08 95       	ret

00001cba <udd_ep_get_size>:
    1cba:	fc 01       	movw	r30, r24
    1cbc:	81 81       	ldd	r24, Z+1	; 0x01
    1cbe:	e8 2f       	mov	r30, r24
    1cc0:	e7 70       	andi	r30, 0x07	; 7
    1cc2:	8e 2f       	mov	r24, r30
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	31 97       	sbiw	r30, 0x01	; 1
    1cca:	e7 30       	cpi	r30, 0x07	; 7
    1ccc:	f1 05       	cpc	r31, r1
    1cce:	d8 f4       	brcc	.+54     	; 0x1d06 <udd_ep_get_size+0x4c>
    1cd0:	88 27       	eor	r24, r24
    1cd2:	e2 50       	subi	r30, 0x02	; 2
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd8:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__tablejump2__>
    1cdc:	80 e1       	ldi	r24, 0x10	; 16
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	08 95       	ret
    1ce2:	80 e2       	ldi	r24, 0x20	; 32
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	08 95       	ret
    1ce8:	80 e4       	ldi	r24, 0x40	; 64
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	08 95       	ret
    1cee:	80 e8       	ldi	r24, 0x80	; 128
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	08 95       	ret
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	91 e0       	ldi	r25, 0x01	; 1
    1cf8:	08 95       	ret
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	92 e0       	ldi	r25, 0x02	; 2
    1cfe:	08 95       	ret
    1d00:	8f ef       	ldi	r24, 0xFF	; 255
    1d02:	93 e0       	ldi	r25, 0x03	; 3
    1d04:	08 95       	ret
    1d06:	88 e0       	ldi	r24, 0x08	; 8
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	08 95       	ret

00001d0c <udd_ep_get_job>:
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	2f 70       	andi	r18, 0x0F	; 15
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	22 0f       	add	r18, r18
    1d14:	33 1f       	adc	r19, r19
    1d16:	08 2e       	mov	r0, r24
    1d18:	00 0c       	add	r0, r0
    1d1a:	99 0b       	sbc	r25, r25
    1d1c:	88 27       	eor	r24, r24
    1d1e:	99 0f       	add	r25, r25
    1d20:	88 1f       	adc	r24, r24
    1d22:	99 27       	eor	r25, r25
    1d24:	82 0f       	add	r24, r18
    1d26:	93 1f       	adc	r25, r19
    1d28:	02 97       	sbiw	r24, 0x02	; 2
    1d2a:	9c 01       	movw	r18, r24
    1d2c:	22 0f       	add	r18, r18
    1d2e:	33 1f       	adc	r19, r19
    1d30:	22 0f       	add	r18, r18
    1d32:	33 1f       	adc	r19, r19
    1d34:	22 0f       	add	r18, r18
    1d36:	33 1f       	adc	r19, r19
    1d38:	82 0f       	add	r24, r18
    1d3a:	93 1f       	adc	r25, r19
    1d3c:	8b 50       	subi	r24, 0x0B	; 11
    1d3e:	9e 4d       	sbci	r25, 0xDE	; 222
    1d40:	08 95       	ret

00001d42 <udd_ctrl_interrupt_tc_setup>:
    1d42:	0f 93       	push	r16
    1d44:	cf 93       	push	r28
    1d46:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1d4a:	80 ff       	sbrs	r24, 0
    1d4c:	65 c0       	rjmp	.+202    	; 0x1e18 <udd_ctrl_interrupt_tc_setup+0xd6>
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1d54:	ec e6       	ldi	r30, 0x6C	; 108
    1d56:	f2 e2       	ldi	r31, 0x22	; 34
    1d58:	00 e8       	ldi	r16, 0x80	; 128
    1d5a:	06 93       	lac	Z, r16
    1d5c:	e4 e7       	ldi	r30, 0x74	; 116
    1d5e:	f2 e2       	ldi	r31, 0x22	; 34
    1d60:	00 e8       	ldi	r16, 0x80	; 128
    1d62:	06 93       	lac	Z, r16
    1d64:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1d68:	ec e6       	ldi	r30, 0x6C	; 108
    1d6a:	f2 e2       	ldi	r31, 0x22	; 34
    1d6c:	00 e1       	ldi	r16, 0x10	; 16
    1d6e:	06 93       	lac	Z, r16
    1d70:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <udd_ep_control_state>
    1d74:	88 23       	and	r24, r24
    1d76:	29 f0       	breq	.+10     	; 0x1d82 <udd_ctrl_interrupt_tc_setup+0x40>
    1d78:	83 50       	subi	r24, 0x03	; 3
    1d7a:	82 30       	cpi	r24, 0x02	; 2
    1d7c:	08 f4       	brcc	.+2      	; 0x1d80 <udd_ctrl_interrupt_tc_setup+0x3e>
    1d7e:	29 df       	rcall	.-430    	; 0x1bd2 <udd_ctrl_endofrequest>
    1d80:	e7 de       	rcall	.-562    	; 0x1b50 <udd_ctrl_init>
    1d82:	80 91 6e 22 	lds	r24, 0x226E	; 0x80226e <udd_sram+0xe>
    1d86:	90 91 6f 22 	lds	r25, 0x226F	; 0x80226f <udd_sram+0xf>
    1d8a:	08 97       	sbiw	r24, 0x08	; 8
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <udd_ctrl_interrupt_tc_setup+0x4e>
    1d8e:	46 c0       	rjmp	.+140    	; 0x1e1c <udd_ctrl_interrupt_tc_setup+0xda>
    1d90:	88 e0       	ldi	r24, 0x08	; 8
    1d92:	e9 e1       	ldi	r30, 0x19	; 25
    1d94:	f2 e2       	ldi	r31, 0x22	; 34
    1d96:	a2 ee       	ldi	r26, 0xE2	; 226
    1d98:	b3 e2       	ldi	r27, 0x23	; 35
    1d9a:	01 90       	ld	r0, Z+
    1d9c:	0d 92       	st	X+, r0
    1d9e:	8a 95       	dec	r24
    1da0:	e1 f7       	brne	.-8      	; 0x1d9a <udd_ctrl_interrupt_tc_setup+0x58>
    1da2:	e8 ec       	ldi	r30, 0xC8	; 200
    1da4:	f4 e0       	ldi	r31, 0x04	; 4
    1da6:	80 81       	ld	r24, Z
    1da8:	80 62       	ori	r24, 0x20	; 32
    1daa:	80 83       	st	Z, r24
    1dac:	80 81       	ld	r24, Z
    1dae:	80 62       	ori	r24, 0x20	; 32
    1db0:	80 83       	st	Z, r24
    1db2:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <udc_process_setup>
    1db6:	c8 2f       	mov	r28, r24
    1db8:	81 11       	cpse	r24, r1
    1dba:	03 c0       	rjmp	.+6      	; 0x1dc2 <udd_ctrl_interrupt_tc_setup+0x80>
    1dbc:	ee de       	rcall	.-548    	; 0x1b9a <udd_ctrl_stall_data>
    1dbe:	c1 e0       	ldi	r28, 0x01	; 1
    1dc0:	2e c0       	rjmp	.+92     	; 0x1e1e <udd_ctrl_interrupt_tc_setup+0xdc>
    1dc2:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udd_g_ctrlreq>
    1dc6:	88 23       	and	r24, r24
    1dc8:	6c f4       	brge	.+26     	; 0x1de4 <udd_ctrl_interrupt_tc_setup+0xa2>
    1dca:	10 92 5b 22 	sts	0x225B, r1	; 0x80225b <udd_ctrl_prev_payload_nb_trans>
    1dce:	10 92 5c 22 	sts	0x225C, r1	; 0x80225c <udd_ctrl_prev_payload_nb_trans+0x1>
    1dd2:	10 92 59 22 	sts	0x2259, r1	; 0x802259 <udd_ctrl_payload_nb_trans>
    1dd6:	10 92 5a 22 	sts	0x225A, r1	; 0x80225a <udd_ctrl_payload_nb_trans+0x1>
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <udd_ep_control_state>
    1de0:	00 df       	rcall	.-512    	; 0x1be2 <udd_ctrl_in_sent>
    1de2:	1d c0       	rjmp	.+58     	; 0x1e1e <udd_ctrl_interrupt_tc_setup+0xdc>
    1de4:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1de8:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1dec:	89 2b       	or	r24, r25
    1dee:	11 f4       	brne	.+4      	; 0x1df4 <udd_ctrl_interrupt_tc_setup+0xb2>
    1df0:	e2 de       	rcall	.-572    	; 0x1bb6 <udd_ctrl_send_zlp_in>
    1df2:	15 c0       	rjmp	.+42     	; 0x1e1e <udd_ctrl_interrupt_tc_setup+0xdc>
    1df4:	10 92 5b 22 	sts	0x225B, r1	; 0x80225b <udd_ctrl_prev_payload_nb_trans>
    1df8:	10 92 5c 22 	sts	0x225C, r1	; 0x80225c <udd_ctrl_prev_payload_nb_trans+0x1>
    1dfc:	10 92 59 22 	sts	0x2259, r1	; 0x802259 <udd_ctrl_payload_nb_trans>
    1e00:	10 92 5a 22 	sts	0x225A, r1	; 0x80225a <udd_ctrl_payload_nb_trans+0x1>
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <udd_ep_control_state>
    1e0a:	ec e6       	ldi	r30, 0x6C	; 108
    1e0c:	f2 e2       	ldi	r31, 0x22	; 34
    1e0e:	02 e0       	ldi	r16, 0x02	; 2
    1e10:	06 93       	lac	Z, r16
    1e12:	00 e2       	ldi	r16, 0x20	; 32
    1e14:	06 93       	lac	Z, r16
    1e16:	03 c0       	rjmp	.+6      	; 0x1e1e <udd_ctrl_interrupt_tc_setup+0xdc>
    1e18:	c0 e0       	ldi	r28, 0x00	; 0
    1e1a:	01 c0       	rjmp	.+2      	; 0x1e1e <udd_ctrl_interrupt_tc_setup+0xdc>
    1e1c:	c1 e0       	ldi	r28, 0x01	; 1
    1e1e:	8c 2f       	mov	r24, r28
    1e20:	cf 91       	pop	r28
    1e22:	0f 91       	pop	r16
    1e24:	08 95       	ret

00001e26 <udd_ep_trans_complet>:
    1e26:	8f 92       	push	r8
    1e28:	9f 92       	push	r9
    1e2a:	af 92       	push	r10
    1e2c:	bf 92       	push	r11
    1e2e:	df 92       	push	r13
    1e30:	ef 92       	push	r14
    1e32:	ff 92       	push	r15
    1e34:	0f 93       	push	r16
    1e36:	1f 93       	push	r17
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	d8 2e       	mov	r13, r24
    1e3e:	66 df       	rcall	.-308    	; 0x1d0c <udd_ep_get_job>
    1e40:	8c 01       	movw	r16, r24
    1e42:	cd 2d       	mov	r28, r13
    1e44:	cf 70       	andi	r28, 0x0F	; 15
    1e46:	d0 e0       	ldi	r29, 0x00	; 0
    1e48:	ce 01       	movw	r24, r28
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	cd 2d       	mov	r28, r13
    1e50:	0d 2c       	mov	r0, r13
    1e52:	00 0c       	add	r0, r0
    1e54:	dd 0b       	sbc	r29, r29
    1e56:	cc 27       	eor	r28, r28
    1e58:	dd 0f       	add	r29, r29
    1e5a:	cc 1f       	adc	r28, r28
    1e5c:	dd 27       	eor	r29, r29
    1e5e:	c8 0f       	add	r28, r24
    1e60:	d9 1f       	adc	r29, r25
    1e62:	ce 01       	movw	r24, r28
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	9c 01       	movw	r18, r24
    1e72:	24 59       	subi	r18, 0x94	; 148
    1e74:	3d 4d       	sbci	r19, 0xDD	; 221
    1e76:	79 01       	movw	r14, r18
    1e78:	c9 01       	movw	r24, r18
    1e7a:	1f df       	rcall	.-450    	; 0x1cba <udd_ep_get_size>
    1e7c:	4c 01       	movw	r8, r24
    1e7e:	dd 20       	and	r13, r13
    1e80:	0c f0       	brlt	.+2      	; 0x1e84 <udd_ep_trans_complet+0x5e>
    1e82:	7b c0       	rjmp	.+246    	; 0x1f7a <udd_ep_trans_complet+0x154>
    1e84:	fe 01       	movw	r30, r28
    1e86:	ee 0f       	add	r30, r30
    1e88:	ff 1f       	adc	r31, r31
    1e8a:	ee 0f       	add	r30, r30
    1e8c:	ff 1f       	adc	r31, r31
    1e8e:	ee 0f       	add	r30, r30
    1e90:	ff 1f       	adc	r31, r31
    1e92:	e0 5a       	subi	r30, 0xA0	; 160
    1e94:	fd 4d       	sbci	r31, 0xDD	; 221
    1e96:	22 89       	ldd	r18, Z+18	; 0x12
    1e98:	33 89       	ldd	r19, Z+19	; 0x13
    1e9a:	d8 01       	movw	r26, r16
    1e9c:	15 96       	adiw	r26, 0x05	; 5
    1e9e:	8d 91       	ld	r24, X+
    1ea0:	9c 91       	ld	r25, X
    1ea2:	16 97       	sbiw	r26, 0x06	; 6
    1ea4:	82 0f       	add	r24, r18
    1ea6:	93 1f       	adc	r25, r19
    1ea8:	15 96       	adiw	r26, 0x05	; 5
    1eaa:	8d 93       	st	X+, r24
    1eac:	9c 93       	st	X, r25
    1eae:	16 97       	sbiw	r26, 0x06	; 6
    1eb0:	13 96       	adiw	r26, 0x03	; 3
    1eb2:	2d 91       	ld	r18, X+
    1eb4:	3c 91       	ld	r19, X
    1eb6:	14 97       	sbiw	r26, 0x04	; 4
    1eb8:	82 17       	cp	r24, r18
    1eba:	93 07       	cpc	r25, r19
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <udd_ep_trans_complet+0x9a>
    1ebe:	47 c0       	rjmp	.+142    	; 0x1f4e <udd_ep_trans_complet+0x128>
    1ec0:	28 1b       	sub	r18, r24
    1ec2:	39 0b       	sbc	r19, r25
    1ec4:	21 15       	cp	r18, r1
    1ec6:	b4 e0       	ldi	r27, 0x04	; 4
    1ec8:	3b 07       	cpc	r19, r27
    1eca:	40 f0       	brcs	.+16     	; 0x1edc <udd_ep_trans_complet+0xb6>
    1ecc:	2f ef       	ldi	r18, 0xFF	; 255
    1ece:	33 e0       	ldi	r19, 0x03	; 3
    1ed0:	c9 01       	movw	r24, r18
    1ed2:	b4 01       	movw	r22, r8
    1ed4:	0e 94 bf 20 	call	0x417e	; 0x417e <__udivmodhi4>
    1ed8:	28 1b       	sub	r18, r24
    1eda:	39 0b       	sbc	r19, r25
    1edc:	f8 01       	movw	r30, r16
    1ede:	80 81       	ld	r24, Z
    1ee0:	81 ff       	sbrs	r24, 1
    1ee2:	0a c0       	rjmp	.+20     	; 0x1ef8 <udd_ep_trans_complet+0xd2>
    1ee4:	c9 01       	movw	r24, r18
    1ee6:	b4 01       	movw	r22, r8
    1ee8:	0e 94 bf 20 	call	0x417e	; 0x417e <__udivmodhi4>
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	89 2b       	or	r24, r25
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <udd_ep_trans_complet+0xce>
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	84 2f       	mov	r24, r20
    1ef6:	01 c0       	rjmp	.+2      	; 0x1efa <udd_ep_trans_complet+0xd4>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	d8 01       	movw	r26, r16
    1efc:	9c 91       	ld	r25, X
    1efe:	80 fb       	bst	r24, 0
    1f00:	91 f9       	bld	r25, 1
    1f02:	9c 93       	st	X, r25
    1f04:	fe 01       	movw	r30, r28
    1f06:	ee 0f       	add	r30, r30
    1f08:	ff 1f       	adc	r31, r31
    1f0a:	ee 0f       	add	r30, r30
    1f0c:	ff 1f       	adc	r31, r31
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	e0 5a       	subi	r30, 0xA0	; 160
    1f14:	fd 4d       	sbci	r31, 0xDD	; 221
    1f16:	12 8a       	std	Z+18, r1	; 0x12
    1f18:	13 8a       	std	Z+19, r1	; 0x13
    1f1a:	26 87       	std	Z+14, r18	; 0x0e
    1f1c:	37 87       	std	Z+15, r19	; 0x0f
    1f1e:	11 96       	adiw	r26, 0x01	; 1
    1f20:	2d 91       	ld	r18, X+
    1f22:	3c 91       	ld	r19, X
    1f24:	12 97       	sbiw	r26, 0x02	; 2
    1f26:	15 96       	adiw	r26, 0x05	; 5
    1f28:	8d 91       	ld	r24, X+
    1f2a:	9c 91       	ld	r25, X
    1f2c:	16 97       	sbiw	r26, 0x06	; 6
    1f2e:	82 0f       	add	r24, r18
    1f30:	93 1f       	adc	r25, r19
    1f32:	cc 0f       	add	r28, r28
    1f34:	dd 1f       	adc	r29, r29
    1f36:	cc 0f       	add	r28, r28
    1f38:	dd 1f       	adc	r29, r29
    1f3a:	cc 0f       	add	r28, r28
    1f3c:	dd 1f       	adc	r29, r29
    1f3e:	c0 59       	subi	r28, 0x90	; 144
    1f40:	dd 4d       	sbci	r29, 0xDD	; 221
    1f42:	88 83       	st	Y, r24
    1f44:	99 83       	std	Y+1, r25	; 0x01
    1f46:	f7 01       	movw	r30, r14
    1f48:	02 e0       	ldi	r16, 0x02	; 2
    1f4a:	06 93       	lac	Z, r16
    1f4c:	e4 c0       	rjmp	.+456    	; 0x2116 <udd_ep_trans_complet+0x2f0>
    1f4e:	d8 01       	movw	r26, r16
    1f50:	8c 91       	ld	r24, X
    1f52:	81 ff       	sbrs	r24, 1
    1f54:	cd c0       	rjmp	.+410    	; 0x20f0 <udd_ep_trans_complet+0x2ca>
    1f56:	8d 7f       	andi	r24, 0xFD	; 253
    1f58:	8c 93       	st	X, r24
    1f5a:	cc 0f       	add	r28, r28
    1f5c:	dd 1f       	adc	r29, r29
    1f5e:	cc 0f       	add	r28, r28
    1f60:	dd 1f       	adc	r29, r29
    1f62:	cc 0f       	add	r28, r28
    1f64:	dd 1f       	adc	r29, r29
    1f66:	c0 5a       	subi	r28, 0xA0	; 160
    1f68:	dd 4d       	sbci	r29, 0xDD	; 221
    1f6a:	1a 8a       	std	Y+18, r1	; 0x12
    1f6c:	1b 8a       	std	Y+19, r1	; 0x13
    1f6e:	1e 86       	std	Y+14, r1	; 0x0e
    1f70:	1f 86       	std	Y+15, r1	; 0x0f
    1f72:	f7 01       	movw	r30, r14
    1f74:	02 e0       	ldi	r16, 0x02	; 2
    1f76:	06 93       	lac	Z, r16
    1f78:	ce c0       	rjmp	.+412    	; 0x2116 <udd_ep_trans_complet+0x2f0>
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	ee 0f       	add	r30, r30
    1f82:	ff 1f       	adc	r31, r31
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	e0 5a       	subi	r30, 0xA0	; 160
    1f8a:	fd 4d       	sbci	r31, 0xDD	; 221
    1f8c:	a6 84       	ldd	r10, Z+14	; 0x0e
    1f8e:	b7 84       	ldd	r11, Z+15	; 0x0f
    1f90:	d8 01       	movw	r26, r16
    1f92:	8c 91       	ld	r24, X
    1f94:	82 ff       	sbrs	r24, 2
    1f96:	1b c0       	rjmp	.+54     	; 0x1fce <udd_ep_trans_complet+0x1a8>
    1f98:	11 96       	adiw	r26, 0x01	; 1
    1f9a:	ed 91       	ld	r30, X+
    1f9c:	fc 91       	ld	r31, X
    1f9e:	12 97       	sbiw	r26, 0x02	; 2
    1fa0:	15 96       	adiw	r26, 0x05	; 5
    1fa2:	2d 91       	ld	r18, X+
    1fa4:	3c 91       	ld	r19, X
    1fa6:	16 97       	sbiw	r26, 0x06	; 6
    1fa8:	13 96       	adiw	r26, 0x03	; 3
    1faa:	8d 91       	ld	r24, X+
    1fac:	9c 91       	ld	r25, X
    1fae:	14 97       	sbiw	r26, 0x04	; 4
    1fb0:	b4 01       	movw	r22, r8
    1fb2:	0e 94 bf 20 	call	0x417e	; 0x417e <__udivmodhi4>
    1fb6:	b0 e4       	ldi	r27, 0x40	; 64
    1fb8:	db 9e       	mul	r13, r27
    1fba:	b0 01       	movw	r22, r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	6b 5c       	subi	r22, 0xCB	; 203
    1fc0:	7e 4d       	sbci	r23, 0xDE	; 222
    1fc2:	ac 01       	movw	r20, r24
    1fc4:	cf 01       	movw	r24, r30
    1fc6:	82 0f       	add	r24, r18
    1fc8:	93 1f       	adc	r25, r19
    1fca:	0e 94 0c 21 	call	0x4218	; 0x4218 <memcpy>
    1fce:	f8 01       	movw	r30, r16
    1fd0:	25 81       	ldd	r18, Z+5	; 0x05
    1fd2:	36 81       	ldd	r19, Z+6	; 0x06
    1fd4:	2a 0d       	add	r18, r10
    1fd6:	3b 1d       	adc	r19, r11
    1fd8:	25 83       	std	Z+5, r18	; 0x05
    1fda:	36 83       	std	Z+6, r19	; 0x06
    1fdc:	83 81       	ldd	r24, Z+3	; 0x03
    1fde:	94 81       	ldd	r25, Z+4	; 0x04
    1fe0:	82 17       	cp	r24, r18
    1fe2:	93 07       	cpc	r25, r19
    1fe4:	68 f4       	brcc	.+26     	; 0x2000 <udd_ep_trans_complet+0x1da>
    1fe6:	85 83       	std	Z+5, r24	; 0x05
    1fe8:	96 83       	std	Z+6, r25	; 0x06
    1fea:	cc 0f       	add	r28, r28
    1fec:	dd 1f       	adc	r29, r29
    1fee:	cc 0f       	add	r28, r28
    1ff0:	dd 1f       	adc	r29, r29
    1ff2:	cc 0f       	add	r28, r28
    1ff4:	dd 1f       	adc	r29, r29
    1ff6:	c0 5a       	subi	r28, 0xA0	; 160
    1ff8:	dd 4d       	sbci	r29, 0xDD	; 221
    1ffa:	8a 89       	ldd	r24, Y+18	; 0x12
    1ffc:	9b 89       	ldd	r25, Y+19	; 0x13
    1ffe:	78 c0       	rjmp	.+240    	; 0x20f0 <udd_ep_trans_complet+0x2ca>
    2000:	fe 01       	movw	r30, r28
    2002:	ee 0f       	add	r30, r30
    2004:	ff 1f       	adc	r31, r31
    2006:	ee 0f       	add	r30, r30
    2008:	ff 1f       	adc	r31, r31
    200a:	ee 0f       	add	r30, r30
    200c:	ff 1f       	adc	r31, r31
    200e:	e0 5a       	subi	r30, 0xA0	; 160
    2010:	fd 4d       	sbci	r31, 0xDD	; 221
    2012:	42 89       	ldd	r20, Z+18	; 0x12
    2014:	53 89       	ldd	r21, Z+19	; 0x13
    2016:	a4 16       	cp	r10, r20
    2018:	b5 06       	cpc	r11, r21
    201a:	09 f0       	breq	.+2      	; 0x201e <udd_ep_trans_complet+0x1f8>
    201c:	69 c0       	rjmp	.+210    	; 0x20f0 <udd_ep_trans_complet+0x2ca>
    201e:	28 17       	cp	r18, r24
    2020:	39 07       	cpc	r19, r25
    2022:	09 f4       	brne	.+2      	; 0x2026 <udd_ep_trans_complet+0x200>
    2024:	65 c0       	rjmp	.+202    	; 0x20f0 <udd_ep_trans_complet+0x2ca>
    2026:	ac 01       	movw	r20, r24
    2028:	42 1b       	sub	r20, r18
    202a:	53 0b       	sbc	r21, r19
    202c:	9a 01       	movw	r18, r20
    202e:	21 15       	cp	r18, r1
    2030:	54 e0       	ldi	r21, 0x04	; 4
    2032:	35 07       	cpc	r19, r21
    2034:	48 f0       	brcs	.+18     	; 0x2048 <udd_ep_trans_complet+0x222>
    2036:	2f ef       	ldi	r18, 0xFF	; 255
    2038:	33 e0       	ldi	r19, 0x03	; 3
    203a:	c9 01       	movw	r24, r18
    203c:	b4 01       	movw	r22, r8
    203e:	0e 94 bf 20 	call	0x417e	; 0x417e <__udivmodhi4>
    2042:	28 1b       	sub	r18, r24
    2044:	39 0b       	sbc	r19, r25
    2046:	06 c0       	rjmp	.+12     	; 0x2054 <udd_ep_trans_complet+0x22e>
    2048:	c9 01       	movw	r24, r18
    204a:	b4 01       	movw	r22, r8
    204c:	0e 94 bf 20 	call	0x417e	; 0x417e <__udivmodhi4>
    2050:	28 1b       	sub	r18, r24
    2052:	39 0b       	sbc	r19, r25
    2054:	fe 01       	movw	r30, r28
    2056:	ee 0f       	add	r30, r30
    2058:	ff 1f       	adc	r31, r31
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	ee 0f       	add	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	e0 5a       	subi	r30, 0xA0	; 160
    2064:	fd 4d       	sbci	r31, 0xDD	; 221
    2066:	16 86       	std	Z+14, r1	; 0x0e
    2068:	17 86       	std	Z+15, r1	; 0x0f
    206a:	28 15       	cp	r18, r8
    206c:	39 05       	cpc	r19, r9
    206e:	00 f5       	brcc	.+64     	; 0x20b0 <udd_ep_trans_complet+0x28a>
    2070:	d8 01       	movw	r26, r16
    2072:	8c 91       	ld	r24, X
    2074:	84 60       	ori	r24, 0x04	; 4
    2076:	8c 93       	st	X, r24
    2078:	b0 e4       	ldi	r27, 0x40	; 64
    207a:	db 9e       	mul	r13, r27
    207c:	c0 01       	movw	r24, r0
    207e:	11 24       	eor	r1, r1
    2080:	8b 5c       	subi	r24, 0xCB	; 203
    2082:	9e 4d       	sbci	r25, 0xDE	; 222
    2084:	fe 01       	movw	r30, r28
    2086:	ee 0f       	add	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	ee 0f       	add	r30, r30
    208c:	ff 1f       	adc	r31, r31
    208e:	ee 0f       	add	r30, r30
    2090:	ff 1f       	adc	r31, r31
    2092:	e0 59       	subi	r30, 0x90	; 144
    2094:	fd 4d       	sbci	r31, 0xDD	; 221
    2096:	80 83       	st	Z, r24
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	cc 0f       	add	r28, r28
    209c:	dd 1f       	adc	r29, r29
    209e:	cc 0f       	add	r28, r28
    20a0:	dd 1f       	adc	r29, r29
    20a2:	cc 0f       	add	r28, r28
    20a4:	dd 1f       	adc	r29, r29
    20a6:	c0 5a       	subi	r28, 0xA0	; 160
    20a8:	dd 4d       	sbci	r29, 0xDD	; 221
    20aa:	8a 8a       	std	Y+18, r8	; 0x12
    20ac:	9b 8a       	std	Y+19, r9	; 0x13
    20ae:	1c c0       	rjmp	.+56     	; 0x20e8 <udd_ep_trans_complet+0x2c2>
    20b0:	f8 01       	movw	r30, r16
    20b2:	41 81       	ldd	r20, Z+1	; 0x01
    20b4:	52 81       	ldd	r21, Z+2	; 0x02
    20b6:	85 81       	ldd	r24, Z+5	; 0x05
    20b8:	96 81       	ldd	r25, Z+6	; 0x06
    20ba:	84 0f       	add	r24, r20
    20bc:	95 1f       	adc	r25, r21
    20be:	fe 01       	movw	r30, r28
    20c0:	ee 0f       	add	r30, r30
    20c2:	ff 1f       	adc	r31, r31
    20c4:	ee 0f       	add	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	ee 0f       	add	r30, r30
    20ca:	ff 1f       	adc	r31, r31
    20cc:	e0 59       	subi	r30, 0x90	; 144
    20ce:	fd 4d       	sbci	r31, 0xDD	; 221
    20d0:	80 83       	st	Z, r24
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	cc 0f       	add	r28, r28
    20d6:	dd 1f       	adc	r29, r29
    20d8:	cc 0f       	add	r28, r28
    20da:	dd 1f       	adc	r29, r29
    20dc:	cc 0f       	add	r28, r28
    20de:	dd 1f       	adc	r29, r29
    20e0:	c0 5a       	subi	r28, 0xA0	; 160
    20e2:	dd 4d       	sbci	r29, 0xDD	; 221
    20e4:	2a 8b       	std	Y+18, r18	; 0x12
    20e6:	3b 8b       	std	Y+19, r19	; 0x13
    20e8:	f7 01       	movw	r30, r14
    20ea:	02 e0       	ldi	r16, 0x02	; 2
    20ec:	06 93       	lac	Z, r16
    20ee:	13 c0       	rjmp	.+38     	; 0x2116 <udd_ep_trans_complet+0x2f0>
    20f0:	d8 01       	movw	r26, r16
    20f2:	8c 91       	ld	r24, X
    20f4:	80 ff       	sbrs	r24, 0
    20f6:	0f c0       	rjmp	.+30     	; 0x2116 <udd_ep_trans_complet+0x2f0>
    20f8:	8e 7f       	andi	r24, 0xFE	; 254
    20fa:	8c 93       	st	X, r24
    20fc:	17 96       	adiw	r26, 0x07	; 7
    20fe:	ed 91       	ld	r30, X+
    2100:	fc 91       	ld	r31, X
    2102:	18 97       	sbiw	r26, 0x08	; 8
    2104:	30 97       	sbiw	r30, 0x00	; 0
    2106:	39 f0       	breq	.+14     	; 0x2116 <udd_ep_trans_complet+0x2f0>
    2108:	15 96       	adiw	r26, 0x05	; 5
    210a:	6d 91       	ld	r22, X+
    210c:	7c 91       	ld	r23, X
    210e:	16 97       	sbiw	r26, 0x06	; 6
    2110:	4d 2d       	mov	r20, r13
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	19 95       	eicall
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	df 90       	pop	r13
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	9f 90       	pop	r9
    212a:	8f 90       	pop	r8
    212c:	08 95       	ret

0000212e <udd_attach>:
    212e:	1f 93       	push	r17
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
    2134:	1f 92       	push	r1
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	8f b7       	in	r24, 0x3f	; 63
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	f8 94       	cli
    2140:	19 81       	ldd	r17, Y+1	; 0x01
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	cd dc       	rcall	.-1638   	; 0x1ae0 <udd_sleep_mode>
    2146:	ea ec       	ldi	r30, 0xCA	; 202
    2148:	f4 e0       	ldi	r31, 0x04	; 4
    214a:	80 e4       	ldi	r24, 0x40	; 64
    214c:	80 83       	st	Z, r24
    214e:	80 e2       	ldi	r24, 0x20	; 32
    2150:	80 83       	st	Z, r24
    2152:	e1 ec       	ldi	r30, 0xC1	; 193
    2154:	f4 e0       	ldi	r31, 0x04	; 4
    2156:	80 81       	ld	r24, Z
    2158:	81 60       	ori	r24, 0x01	; 1
    215a:	80 83       	st	Z, r24
    215c:	a9 ec       	ldi	r26, 0xC9	; 201
    215e:	b4 e0       	ldi	r27, 0x04	; 4
    2160:	8c 91       	ld	r24, X
    2162:	82 60       	ori	r24, 0x02	; 2
    2164:	8c 93       	st	X, r24
    2166:	e8 ec       	ldi	r30, 0xC8	; 200
    2168:	f4 e0       	ldi	r31, 0x04	; 4
    216a:	80 81       	ld	r24, Z
    216c:	80 64       	ori	r24, 0x40	; 64
    216e:	80 83       	st	Z, r24
    2170:	8c 91       	ld	r24, X
    2172:	81 60       	ori	r24, 0x01	; 1
    2174:	8c 93       	st	X, r24
    2176:	80 81       	ld	r24, Z
    2178:	80 68       	ori	r24, 0x80	; 128
    217a:	80 83       	st	Z, r24
    217c:	1f bf       	out	0x3f, r17	; 63
    217e:	0f 90       	pop	r0
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	1f 91       	pop	r17
    2186:	08 95       	ret

00002188 <udd_enable>:
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	1f 92       	push	r1
    2192:	1f 92       	push	r1
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	00 e6       	ldi	r16, 0x60	; 96
    219a:	10 e0       	ldi	r17, 0x00	; 0
    219c:	f8 01       	movw	r30, r16
    219e:	10 82       	st	Z, r1
    21a0:	80 e3       	ldi	r24, 0x30	; 48
    21a2:	0e 94 1f 1a 	call	0x343e	; 0x343e <sysclk_enable_usb>
    21a6:	e0 ec       	ldi	r30, 0xC0	; 192
    21a8:	f4 e0       	ldi	r31, 0x04	; 4
    21aa:	80 81       	ld	r24, Z
    21ac:	80 64       	ori	r24, 0x40	; 64
    21ae:	80 83       	st	Z, r24
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	f8 01       	movw	r30, r16
    21b4:	80 83       	st	Z, r24
    21b6:	8f b7       	in	r24, 0x3f	; 63
    21b8:	8a 83       	std	Y+2, r24	; 0x02
    21ba:	f8 94       	cli
    21bc:	1a 81       	ldd	r17, Y+2	; 0x02
    21be:	e0 e6       	ldi	r30, 0x60	; 96
    21c0:	f2 e2       	ldi	r31, 0x22	; 34
    21c2:	15 86       	std	Z+13, r1	; 0x0d
    21c4:	15 8a       	std	Z+21, r1	; 0x15
    21c6:	15 8e       	std	Z+29, r1	; 0x1d
    21c8:	15 a2       	std	Z+37, r1	; 0x25
    21ca:	15 a6       	std	Z+45, r1	; 0x2d
    21cc:	15 aa       	std	Z+53, r1	; 0x35
    21ce:	e5 ef       	ldi	r30, 0xF5	; 245
    21d0:	f1 e2       	ldi	r31, 0x21	; 33
    21d2:	80 81       	ld	r24, Z
    21d4:	8e 7f       	andi	r24, 0xFE	; 254
    21d6:	80 83       	st	Z, r24
    21d8:	ee ef       	ldi	r30, 0xFE	; 254
    21da:	f1 e2       	ldi	r31, 0x21	; 33
    21dc:	80 81       	ld	r24, Z
    21de:	8e 7f       	andi	r24, 0xFE	; 254
    21e0:	80 83       	st	Z, r24
    21e2:	e7 e0       	ldi	r30, 0x07	; 7
    21e4:	f2 e2       	ldi	r31, 0x22	; 34
    21e6:	80 81       	ld	r24, Z
    21e8:	8e 7f       	andi	r24, 0xFE	; 254
    21ea:	80 83       	st	Z, r24
    21ec:	e0 e1       	ldi	r30, 0x10	; 16
    21ee:	f2 e2       	ldi	r31, 0x22	; 34
    21f0:	80 81       	ld	r24, Z
    21f2:	8e 7f       	andi	r24, 0xFE	; 254
    21f4:	80 83       	st	Z, r24
    21f6:	6a e1       	ldi	r22, 0x1A	; 26
    21f8:	70 e0       	ldi	r23, 0x00	; 0
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	0e 94 af 20 	call	0x415e	; 0x415e <nvm_read_byte>
    2200:	8f 3f       	cpi	r24, 0xFF	; 255
    2202:	19 f0       	breq	.+6      	; 0x220a <udd_enable+0x82>
    2204:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2208:	03 c0       	rjmp	.+6      	; 0x2210 <udd_enable+0x88>
    220a:	8f e1       	ldi	r24, 0x1F	; 31
    220c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2210:	6b e1       	ldi	r22, 0x1B	; 27
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	0e 94 af 20 	call	0x415e	; 0x415e <nvm_read_byte>
    221a:	8f 3f       	cpi	r24, 0xFF	; 255
    221c:	19 f0       	breq	.+6      	; 0x2224 <udd_enable+0x9c>
    221e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2222:	03 c0       	rjmp	.+6      	; 0x222a <udd_enable+0xa2>
    2224:	8f e1       	ldi	r24, 0x1F	; 31
    2226:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    222a:	e0 ec       	ldi	r30, 0xC0	; 192
    222c:	f4 e0       	ldi	r31, 0x04	; 4
    222e:	80 81       	ld	r24, Z
    2230:	82 60       	ori	r24, 0x02	; 2
    2232:	80 83       	st	Z, r24
    2234:	80 81       	ld	r24, Z
    2236:	80 68       	ori	r24, 0x80	; 128
    2238:	80 83       	st	Z, r24
    223a:	80 81       	ld	r24, Z
    223c:	80 61       	ori	r24, 0x10	; 16
    223e:	80 83       	st	Z, r24
    2240:	8c e6       	ldi	r24, 0x6C	; 108
    2242:	92 e2       	ldi	r25, 0x22	; 34
    2244:	86 83       	std	Z+6, r24	; 0x06
    2246:	97 83       	std	Z+7, r25	; 0x07
    2248:	80 81       	ld	r24, Z
    224a:	80 62       	ori	r24, 0x20	; 32
    224c:	80 83       	st	Z, r24
    224e:	8f ef       	ldi	r24, 0xFF	; 255
    2250:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2254:	e8 ec       	ldi	r30, 0xC8	; 200
    2256:	f4 e0       	ldi	r31, 0x04	; 4
    2258:	80 81       	ld	r24, Z
    225a:	81 60       	ori	r24, 0x01	; 1
    225c:	80 83       	st	Z, r24
    225e:	10 92 a0 22 	sts	0x22A0, r1	; 0x8022a0 <udd_b_idle>
    2262:	80 91 f7 23 	lds	r24, 0x23F7	; 0x8023f7 <sleepmgr_locks+0x5>
    2266:	8f 3f       	cpi	r24, 0xFF	; 255
    2268:	09 f4       	brne	.+2      	; 0x226c <udd_enable+0xe4>
    226a:	ff cf       	rjmp	.-2      	; 0x226a <udd_enable+0xe2>
    226c:	8f b7       	in	r24, 0x3f	; 63
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	f8 94       	cli
    2272:	99 81       	ldd	r25, Y+1	; 0x01
    2274:	e2 ef       	ldi	r30, 0xF2	; 242
    2276:	f3 e2       	ldi	r31, 0x23	; 35
    2278:	85 81       	ldd	r24, Z+5	; 0x05
    227a:	8f 5f       	subi	r24, 0xFF	; 255
    227c:	85 83       	std	Z+5, r24	; 0x05
    227e:	9f bf       	out	0x3f, r25	; 63
    2280:	56 df       	rcall	.-340    	; 0x212e <udd_attach>
    2282:	1f bf       	out	0x3f, r17	; 63
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	08 95       	ret

00002292 <udd_is_high_speed>:
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	08 95       	ret

00002296 <udd_set_address>:
    2296:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    229a:	08 95       	ret

0000229c <udd_getaddress>:
    229c:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    22a0:	08 95       	ret

000022a2 <udd_get_frame_number>:
    22a2:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <udd_sram+0x3c>
    22a6:	90 91 9d 22 	lds	r25, 0x229D	; 0x80229d <udd_sram+0x3d>
    22aa:	08 95       	ret

000022ac <udd_get_micro_frame_number>:
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	08 95       	ret

000022b2 <udd_set_setup_payload>:
    22b2:	e2 ee       	ldi	r30, 0xE2	; 226
    22b4:	f3 e2       	ldi	r31, 0x23	; 35
    22b6:	80 87       	std	Z+8, r24	; 0x08
    22b8:	91 87       	std	Z+9, r25	; 0x09
    22ba:	62 87       	std	Z+10, r22	; 0x0a
    22bc:	73 87       	std	Z+11, r23	; 0x0b
    22be:	08 95       	ret

000022c0 <udd_ep_alloc>:
    22c0:	28 2f       	mov	r18, r24
    22c2:	2f 70       	andi	r18, 0x0F	; 15
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	22 0f       	add	r18, r18
    22c8:	33 1f       	adc	r19, r19
    22ca:	08 2e       	mov	r0, r24
    22cc:	00 0c       	add	r0, r0
    22ce:	99 0b       	sbc	r25, r25
    22d0:	88 27       	eor	r24, r24
    22d2:	99 0f       	add	r25, r25
    22d4:	88 1f       	adc	r24, r24
    22d6:	99 27       	eor	r25, r25
    22d8:	82 0f       	add	r24, r18
    22da:	93 1f       	adc	r25, r19
    22dc:	fc 01       	movw	r30, r24
    22de:	ee 0f       	add	r30, r30
    22e0:	ff 1f       	adc	r31, r31
    22e2:	ee 0f       	add	r30, r30
    22e4:	ff 1f       	adc	r31, r31
    22e6:	ee 0f       	add	r30, r30
    22e8:	ff 1f       	adc	r31, r31
    22ea:	e0 5a       	subi	r30, 0xA0	; 160
    22ec:	fd 4d       	sbci	r31, 0xDD	; 221
    22ee:	25 85       	ldd	r18, Z+13	; 0x0d
    22f0:	20 7c       	andi	r18, 0xC0	; 192
    22f2:	09 f0       	breq	.+2      	; 0x22f6 <udd_ep_alloc+0x36>
    22f4:	69 c0       	rjmp	.+210    	; 0x23c8 <udd_ep_alloc+0x108>
    22f6:	63 70       	andi	r22, 0x03	; 3
    22f8:	61 30       	cpi	r22, 0x01	; 1
    22fa:	11 f0       	breq	.+4      	; 0x2300 <udd_ep_alloc+0x40>
    22fc:	18 f4       	brcc	.+6      	; 0x2304 <udd_ep_alloc+0x44>
    22fe:	04 c0       	rjmp	.+8      	; 0x2308 <udd_ep_alloc+0x48>
    2300:	60 ec       	ldi	r22, 0xC0	; 192
    2302:	03 c0       	rjmp	.+6      	; 0x230a <udd_ep_alloc+0x4a>
    2304:	60 e8       	ldi	r22, 0x80	; 128
    2306:	01 c0       	rjmp	.+2      	; 0x230a <udd_ep_alloc+0x4a>
    2308:	60 e4       	ldi	r22, 0x40	; 64
    230a:	40 38       	cpi	r20, 0x80	; 128
    230c:	51 05       	cpc	r21, r1
    230e:	e9 f0       	breq	.+58     	; 0x234a <udd_ep_alloc+0x8a>
    2310:	50 f4       	brcc	.+20     	; 0x2326 <udd_ep_alloc+0x66>
    2312:	40 32       	cpi	r20, 0x20	; 32
    2314:	51 05       	cpc	r21, r1
    2316:	a9 f0       	breq	.+42     	; 0x2342 <udd_ep_alloc+0x82>
    2318:	40 34       	cpi	r20, 0x40	; 64
    231a:	51 05       	cpc	r21, r1
    231c:	a1 f0       	breq	.+40     	; 0x2346 <udd_ep_alloc+0x86>
    231e:	40 31       	cpi	r20, 0x10	; 16
    2320:	51 05       	cpc	r21, r1
    2322:	d9 f4       	brne	.+54     	; 0x235a <udd_ep_alloc+0x9a>
    2324:	0c c0       	rjmp	.+24     	; 0x233e <udd_ep_alloc+0x7e>
    2326:	41 15       	cp	r20, r1
    2328:	22 e0       	ldi	r18, 0x02	; 2
    232a:	52 07       	cpc	r21, r18
    232c:	91 f0       	breq	.+36     	; 0x2352 <udd_ep_alloc+0x92>
    232e:	4f 3f       	cpi	r20, 0xFF	; 255
    2330:	23 e0       	ldi	r18, 0x03	; 3
    2332:	52 07       	cpc	r21, r18
    2334:	81 f0       	breq	.+32     	; 0x2356 <udd_ep_alloc+0x96>
    2336:	41 15       	cp	r20, r1
    2338:	51 40       	sbci	r21, 0x01	; 1
    233a:	79 f4       	brne	.+30     	; 0x235a <udd_ep_alloc+0x9a>
    233c:	08 c0       	rjmp	.+16     	; 0x234e <udd_ep_alloc+0x8e>
    233e:	21 e0       	ldi	r18, 0x01	; 1
    2340:	0d c0       	rjmp	.+26     	; 0x235c <udd_ep_alloc+0x9c>
    2342:	22 e0       	ldi	r18, 0x02	; 2
    2344:	0b c0       	rjmp	.+22     	; 0x235c <udd_ep_alloc+0x9c>
    2346:	23 e0       	ldi	r18, 0x03	; 3
    2348:	09 c0       	rjmp	.+18     	; 0x235c <udd_ep_alloc+0x9c>
    234a:	24 e0       	ldi	r18, 0x04	; 4
    234c:	07 c0       	rjmp	.+14     	; 0x235c <udd_ep_alloc+0x9c>
    234e:	25 e0       	ldi	r18, 0x05	; 5
    2350:	05 c0       	rjmp	.+10     	; 0x235c <udd_ep_alloc+0x9c>
    2352:	26 e0       	ldi	r18, 0x06	; 6
    2354:	03 c0       	rjmp	.+6      	; 0x235c <udd_ep_alloc+0x9c>
    2356:	27 e0       	ldi	r18, 0x07	; 7
    2358:	01 c0       	rjmp	.+2      	; 0x235c <udd_ep_alloc+0x9c>
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	fc 01       	movw	r30, r24
    235e:	ee 0f       	add	r30, r30
    2360:	ff 1f       	adc	r31, r31
    2362:	ee 0f       	add	r30, r30
    2364:	ff 1f       	adc	r31, r31
    2366:	ee 0f       	add	r30, r30
    2368:	ff 1f       	adc	r31, r31
    236a:	e0 5a       	subi	r30, 0xA0	; 160
    236c:	fd 4d       	sbci	r31, 0xDD	; 221
    236e:	15 86       	std	Z+13, r1	; 0x0d
    2370:	36 e0       	ldi	r19, 0x06	; 6
    2372:	34 87       	std	Z+12, r19	; 0x0c
    2374:	26 2b       	or	r18, r22
    2376:	25 87       	std	Z+13, r18	; 0x0d
    2378:	fc 01       	movw	r30, r24
    237a:	ee 0f       	add	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	ee 0f       	add	r30, r30
    2380:	ff 1f       	adc	r31, r31
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	e0 5a       	subi	r30, 0xA0	; 160
    2388:	fd 4d       	sbci	r31, 0xDD	; 221
    238a:	25 85       	ldd	r18, Z+13	; 0x0d
    238c:	20 7c       	andi	r18, 0xC0	; 192
    238e:	20 3c       	cpi	r18, 0xC0	; 192
    2390:	69 f4       	brne	.+26     	; 0x23ac <udd_ep_alloc+0xec>
    2392:	fc 01       	movw	r30, r24
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	ee 0f       	add	r30, r30
    239e:	ff 1f       	adc	r31, r31
    23a0:	e0 5a       	subi	r30, 0xA0	; 160
    23a2:	fd 4d       	sbci	r31, 0xDD	; 221
    23a4:	25 85       	ldd	r18, Z+13	; 0x0d
    23a6:	27 70       	andi	r18, 0x07	; 7
    23a8:	27 30       	cpi	r18, 0x07	; 7
    23aa:	81 f0       	breq	.+32     	; 0x23cc <udd_ep_alloc+0x10c>
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	fc 01       	movw	r30, r24
    23ba:	e0 5a       	subi	r30, 0xA0	; 160
    23bc:	fd 4d       	sbci	r31, 0xDD	; 221
    23be:	85 85       	ldd	r24, Z+13	; 0x0d
    23c0:	80 62       	ori	r24, 0x20	; 32
    23c2:	85 87       	std	Z+13, r24	; 0x0d
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	08 95       	ret
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	08 95       	ret
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	08 95       	ret

000023d0 <udd_ep_is_halted>:
    23d0:	e8 2f       	mov	r30, r24
    23d2:	ef 70       	andi	r30, 0x0F	; 15
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	ee 0f       	add	r30, r30
    23d8:	ff 1f       	adc	r31, r31
    23da:	08 2e       	mov	r0, r24
    23dc:	00 0c       	add	r0, r0
    23de:	99 0b       	sbc	r25, r25
    23e0:	88 27       	eor	r24, r24
    23e2:	99 0f       	add	r25, r25
    23e4:	88 1f       	adc	r24, r24
    23e6:	99 27       	eor	r25, r25
    23e8:	e8 0f       	add	r30, r24
    23ea:	f9 1f       	adc	r31, r25
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	ee 0f       	add	r30, r30
    23f2:	ff 1f       	adc	r31, r31
    23f4:	ee 0f       	add	r30, r30
    23f6:	ff 1f       	adc	r31, r31
    23f8:	e0 5a       	subi	r30, 0xA0	; 160
    23fa:	fd 4d       	sbci	r31, 0xDD	; 221
    23fc:	85 85       	ldd	r24, Z+13	; 0x0d
    23fe:	82 fb       	bst	r24, 2
    2400:	88 27       	eor	r24, r24
    2402:	80 f9       	bld	r24, 0
    2404:	08 95       	ret

00002406 <udd_ep_clear_halt>:
    2406:	0f 93       	push	r16
    2408:	28 2f       	mov	r18, r24
    240a:	2f 70       	andi	r18, 0x0F	; 15
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	a9 01       	movw	r20, r18
    2410:	44 0f       	add	r20, r20
    2412:	55 1f       	adc	r21, r21
    2414:	28 2f       	mov	r18, r24
    2416:	08 2e       	mov	r0, r24
    2418:	00 0c       	add	r0, r0
    241a:	33 0b       	sbc	r19, r19
    241c:	22 27       	eor	r18, r18
    241e:	33 0f       	add	r19, r19
    2420:	22 1f       	adc	r18, r18
    2422:	33 27       	eor	r19, r19
    2424:	24 0f       	add	r18, r20
    2426:	35 1f       	adc	r19, r21
    2428:	a9 01       	movw	r20, r18
    242a:	44 0f       	add	r20, r20
    242c:	55 1f       	adc	r21, r21
    242e:	44 0f       	add	r20, r20
    2430:	55 1f       	adc	r21, r21
    2432:	44 0f       	add	r20, r20
    2434:	55 1f       	adc	r21, r21
    2436:	fa 01       	movw	r30, r20
    2438:	e4 59       	subi	r30, 0x94	; 148
    243a:	fd 4d       	sbci	r31, 0xDD	; 221
    243c:	01 e0       	ldi	r16, 0x01	; 1
    243e:	06 93       	lac	Z, r16
    2440:	fa 01       	movw	r30, r20
    2442:	e0 5a       	subi	r30, 0xA0	; 160
    2444:	fd 4d       	sbci	r31, 0xDD	; 221
    2446:	95 85       	ldd	r25, Z+13	; 0x0d
    2448:	92 ff       	sbrs	r25, 2
    244a:	11 c0       	rjmp	.+34     	; 0x246e <udd_ep_clear_halt+0x68>
    244c:	fa 01       	movw	r30, r20
    244e:	e0 5a       	subi	r30, 0xA0	; 160
    2450:	fd 4d       	sbci	r31, 0xDD	; 221
    2452:	95 85       	ldd	r25, Z+13	; 0x0d
    2454:	9b 7f       	andi	r25, 0xFB	; 251
    2456:	95 87       	std	Z+13, r25	; 0x0d
    2458:	59 dc       	rcall	.-1870   	; 0x1d0c <udd_ep_get_job>
    245a:	fc 01       	movw	r30, r24
    245c:	80 81       	ld	r24, Z
    245e:	80 ff       	sbrs	r24, 0
    2460:	06 c0       	rjmp	.+12     	; 0x246e <udd_ep_clear_halt+0x68>
    2462:	8e 7f       	andi	r24, 0xFE	; 254
    2464:	80 83       	st	Z, r24
    2466:	07 80       	ldd	r0, Z+7	; 0x07
    2468:	f0 85       	ldd	r31, Z+8	; 0x08
    246a:	e0 2d       	mov	r30, r0
    246c:	19 95       	eicall
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	0f 91       	pop	r16
    2472:	08 95       	ret

00002474 <udd_ep_run>:
    2474:	6f 92       	push	r6
    2476:	7f 92       	push	r7
    2478:	8f 92       	push	r8
    247a:	9f 92       	push	r9
    247c:	af 92       	push	r10
    247e:	bf 92       	push	r11
    2480:	cf 92       	push	r12
    2482:	df 92       	push	r13
    2484:	ef 92       	push	r14
    2486:	ff 92       	push	r15
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	1f 92       	push	r1
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	78 2e       	mov	r7, r24
    2498:	66 2e       	mov	r6, r22
    249a:	4a 01       	movw	r8, r20
    249c:	59 01       	movw	r10, r18
    249e:	36 dc       	rcall	.-1940   	; 0x1d0c <udd_ep_get_job>
    24a0:	6c 01       	movw	r12, r24
    24a2:	27 2d       	mov	r18, r7
    24a4:	87 2d       	mov	r24, r7
    24a6:	8f 70       	andi	r24, 0x0F	; 15
    24a8:	e8 2e       	mov	r14, r24
    24aa:	f1 2c       	mov	r15, r1
    24ac:	c7 01       	movw	r24, r14
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	e7 2c       	mov	r14, r7
    24b4:	07 2c       	mov	r0, r7
    24b6:	00 0c       	add	r0, r0
    24b8:	ff 08       	sbc	r15, r15
    24ba:	ee 24       	eor	r14, r14
    24bc:	ff 0c       	add	r15, r15
    24be:	ee 1c       	adc	r14, r14
    24c0:	ff 24       	eor	r15, r15
    24c2:	e8 0e       	add	r14, r24
    24c4:	f9 1e       	adc	r15, r25
    24c6:	f7 01       	movw	r30, r14
    24c8:	ee 0f       	add	r30, r30
    24ca:	ff 1f       	adc	r31, r31
    24cc:	ee 0f       	add	r30, r30
    24ce:	ff 1f       	adc	r31, r31
    24d0:	ee 0f       	add	r30, r30
    24d2:	ff 1f       	adc	r31, r31
    24d4:	e0 5a       	subi	r30, 0xA0	; 160
    24d6:	fd 4d       	sbci	r31, 0xDD	; 221
    24d8:	85 85       	ldd	r24, Z+13	; 0x0d
    24da:	80 7c       	andi	r24, 0xC0	; 192
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <udd_ep_run+0x6c>
    24de:	82 c0       	rjmp	.+260    	; 0x25e4 <udd_ep_run+0x170>
    24e0:	f7 01       	movw	r30, r14
    24e2:	ee 0f       	add	r30, r30
    24e4:	ff 1f       	adc	r31, r31
    24e6:	ee 0f       	add	r30, r30
    24e8:	ff 1f       	adc	r31, r31
    24ea:	ee 0f       	add	r30, r30
    24ec:	ff 1f       	adc	r31, r31
    24ee:	e0 5a       	subi	r30, 0xA0	; 160
    24f0:	fd 4d       	sbci	r31, 0xDD	; 221
    24f2:	85 85       	ldd	r24, Z+13	; 0x0d
    24f4:	80 7c       	andi	r24, 0xC0	; 192
    24f6:	80 3c       	cpi	r24, 0xC0	; 192
    24f8:	61 f0       	breq	.+24     	; 0x2512 <udd_ep_run+0x9e>
    24fa:	f7 01       	movw	r30, r14
    24fc:	ee 0f       	add	r30, r30
    24fe:	ff 1f       	adc	r31, r31
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	ee 0f       	add	r30, r30
    2506:	ff 1f       	adc	r31, r31
    2508:	e0 5a       	subi	r30, 0xA0	; 160
    250a:	fd 4d       	sbci	r31, 0xDD	; 221
    250c:	85 85       	ldd	r24, Z+13	; 0x0d
    250e:	82 fd       	sbrc	r24, 2
    2510:	6b c0       	rjmp	.+214    	; 0x25e8 <udd_ep_run+0x174>
    2512:	8f b7       	in	r24, 0x3f	; 63
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	f8 94       	cli
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	f6 01       	movw	r30, r12
    251c:	90 81       	ld	r25, Z
    251e:	90 ff       	sbrs	r25, 0
    2520:	03 c0       	rjmp	.+6      	; 0x2528 <udd_ep_run+0xb4>
    2522:	8f bf       	out	0x3f, r24	; 63
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	61 c0       	rjmp	.+194    	; 0x25ea <udd_ep_run+0x176>
    2528:	f6 01       	movw	r30, r12
    252a:	90 81       	ld	r25, Z
    252c:	91 60       	ori	r25, 0x01	; 1
    252e:	90 83       	st	Z, r25
    2530:	8f bf       	out	0x3f, r24	; 63
    2532:	81 82       	std	Z+1, r8	; 0x01
    2534:	92 82       	std	Z+2, r9	; 0x02
    2536:	a3 82       	std	Z+3, r10	; 0x03
    2538:	b4 82       	std	Z+4, r11	; 0x04
    253a:	15 82       	std	Z+5, r1	; 0x05
    253c:	16 82       	std	Z+6, r1	; 0x06
    253e:	07 83       	std	Z+7, r16	; 0x07
    2540:	10 87       	std	Z+8, r17	; 0x08
    2542:	61 10       	cpse	r6, r1
    2544:	06 c0       	rjmp	.+12     	; 0x2552 <udd_ep_run+0xde>
    2546:	91 e0       	ldi	r25, 0x01	; 1
    2548:	a1 14       	cp	r10, r1
    254a:	b1 04       	cpc	r11, r1
    254c:	19 f0       	breq	.+6      	; 0x2554 <udd_ep_run+0xe0>
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	01 c0       	rjmp	.+2      	; 0x2554 <udd_ep_run+0xe0>
    2552:	91 e0       	ldi	r25, 0x01	; 1
    2554:	f6 01       	movw	r30, r12
    2556:	80 81       	ld	r24, Z
    2558:	90 fb       	bst	r25, 0
    255a:	81 f9       	bld	r24, 1
    255c:	8b 7f       	andi	r24, 0xFB	; 251
    255e:	80 83       	st	Z, r24
    2560:	22 23       	and	r18, r18
    2562:	64 f4       	brge	.+24     	; 0x257c <udd_ep_run+0x108>
    2564:	f7 01       	movw	r30, r14
    2566:	ee 0f       	add	r30, r30
    2568:	ff 1f       	adc	r31, r31
    256a:	ee 0f       	add	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	ee 0f       	add	r30, r30
    2570:	ff 1f       	adc	r31, r31
    2572:	e0 5a       	subi	r30, 0xA0	; 160
    2574:	fd 4d       	sbci	r31, 0xDD	; 221
    2576:	12 8a       	std	Z+18, r1	; 0x12
    2578:	13 8a       	std	Z+19, r1	; 0x13
    257a:	30 c0       	rjmp	.+96     	; 0x25dc <udd_ep_run+0x168>
    257c:	f7 01       	movw	r30, r14
    257e:	ee 0f       	add	r30, r30
    2580:	ff 1f       	adc	r31, r31
    2582:	ee 0f       	add	r30, r30
    2584:	ff 1f       	adc	r31, r31
    2586:	ee 0f       	add	r30, r30
    2588:	ff 1f       	adc	r31, r31
    258a:	e0 5a       	subi	r30, 0xA0	; 160
    258c:	fd 4d       	sbci	r31, 0xDD	; 221
    258e:	85 85       	ldd	r24, Z+13	; 0x0d
    2590:	80 7c       	andi	r24, 0xC0	; 192
    2592:	80 3c       	cpi	r24, 0xC0	; 192
    2594:	b1 f4       	brne	.+44     	; 0x25c2 <udd_ep_run+0x14e>
    2596:	c7 01       	movw	r24, r14
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	84 59       	subi	r24, 0x94	; 148
    25a6:	9d 4d       	sbci	r25, 0xDD	; 221
    25a8:	88 db       	rcall	.-2288   	; 0x1cba <udd_ep_get_size>
    25aa:	bc 01       	movw	r22, r24
    25ac:	c5 01       	movw	r24, r10
    25ae:	0e 94 bf 20 	call	0x417e	; 0x417e <__udivmodhi4>
    25b2:	89 2b       	or	r24, r25
    25b4:	31 f0       	breq	.+12     	; 0x25c2 <udd_ep_run+0x14e>
    25b6:	f6 01       	movw	r30, r12
    25b8:	80 81       	ld	r24, Z
    25ba:	8e 7f       	andi	r24, 0xFE	; 254
    25bc:	80 83       	st	Z, r24
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	14 c0       	rjmp	.+40     	; 0x25ea <udd_ep_run+0x176>
    25c2:	f7 01       	movw	r30, r14
    25c4:	ee 0f       	add	r30, r30
    25c6:	ff 1f       	adc	r31, r31
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	ee 0f       	add	r30, r30
    25ce:	ff 1f       	adc	r31, r31
    25d0:	e0 5a       	subi	r30, 0xA0	; 160
    25d2:	fd 4d       	sbci	r31, 0xDD	; 221
    25d4:	16 86       	std	Z+14, r1	; 0x0e
    25d6:	17 86       	std	Z+15, r1	; 0x0f
    25d8:	12 8a       	std	Z+18, r1	; 0x12
    25da:	13 8a       	std	Z+19, r1	; 0x13
    25dc:	87 2d       	mov	r24, r7
    25de:	23 dc       	rcall	.-1978   	; 0x1e26 <udd_ep_trans_complet>
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	03 c0       	rjmp	.+6      	; 0x25ea <udd_ep_run+0x176>
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	01 c0       	rjmp	.+2      	; 0x25ea <udd_ep_run+0x176>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	0f 90       	pop	r0
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	1f 91       	pop	r17
    25f2:	0f 91       	pop	r16
    25f4:	ff 90       	pop	r15
    25f6:	ef 90       	pop	r14
    25f8:	df 90       	pop	r13
    25fa:	cf 90       	pop	r12
    25fc:	bf 90       	pop	r11
    25fe:	af 90       	pop	r10
    2600:	9f 90       	pop	r9
    2602:	8f 90       	pop	r8
    2604:	7f 90       	pop	r7
    2606:	6f 90       	pop	r6
    2608:	08 95       	ret

0000260a <udd_ep_abort>:
    260a:	ff 92       	push	r15
    260c:	0f 93       	push	r16
    260e:	1f 93       	push	r17
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	18 2f       	mov	r17, r24
    2616:	c8 2f       	mov	r28, r24
    2618:	cf 70       	andi	r28, 0x0F	; 15
    261a:	d0 e0       	ldi	r29, 0x00	; 0
    261c:	ce 01       	movw	r24, r28
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	c1 2f       	mov	r28, r17
    2624:	01 2e       	mov	r0, r17
    2626:	00 0c       	add	r0, r0
    2628:	dd 0b       	sbc	r29, r29
    262a:	cc 27       	eor	r28, r28
    262c:	dd 0f       	add	r29, r29
    262e:	cc 1f       	adc	r28, r28
    2630:	dd 27       	eor	r29, r29
    2632:	c8 0f       	add	r28, r24
    2634:	d9 1f       	adc	r29, r25
    2636:	81 2f       	mov	r24, r17
    2638:	69 db       	rcall	.-2350   	; 0x1d0c <udd_ep_get_job>
    263a:	dc 01       	movw	r26, r24
    263c:	fe 01       	movw	r30, r28
    263e:	ee 0f       	add	r30, r30
    2640:	ff 1f       	adc	r31, r31
    2642:	ee 0f       	add	r30, r30
    2644:	ff 1f       	adc	r31, r31
    2646:	ee 0f       	add	r30, r30
    2648:	ff 1f       	adc	r31, r31
    264a:	e4 59       	subi	r30, 0x94	; 148
    264c:	fd 4d       	sbci	r31, 0xDD	; 221
    264e:	02 e0       	ldi	r16, 0x02	; 2
    2650:	05 93       	las	Z, r16
    2652:	8c 91       	ld	r24, X
    2654:	80 ff       	sbrs	r24, 0
    2656:	22 c0       	rjmp	.+68     	; 0x269c <udd_ep_abort+0x92>
    2658:	8e 7f       	andi	r24, 0xFE	; 254
    265a:	8c 93       	st	X, r24
    265c:	17 96       	adiw	r26, 0x07	; 7
    265e:	ed 91       	ld	r30, X+
    2660:	fc 91       	ld	r31, X
    2662:	18 97       	sbiw	r26, 0x08	; 8
    2664:	30 97       	sbiw	r30, 0x00	; 0
    2666:	d1 f0       	breq	.+52     	; 0x269c <udd_ep_abort+0x92>
    2668:	11 23       	and	r17, r17
    266a:	5c f4       	brge	.+22     	; 0x2682 <udd_ep_abort+0x78>
    266c:	cc 0f       	add	r28, r28
    266e:	dd 1f       	adc	r29, r29
    2670:	cc 0f       	add	r28, r28
    2672:	dd 1f       	adc	r29, r29
    2674:	cc 0f       	add	r28, r28
    2676:	dd 1f       	adc	r29, r29
    2678:	c0 5a       	subi	r28, 0xA0	; 160
    267a:	dd 4d       	sbci	r29, 0xDD	; 221
    267c:	6a 89       	ldd	r22, Y+18	; 0x12
    267e:	7b 89       	ldd	r23, Y+19	; 0x13
    2680:	0a c0       	rjmp	.+20     	; 0x2696 <udd_ep_abort+0x8c>
    2682:	cc 0f       	add	r28, r28
    2684:	dd 1f       	adc	r29, r29
    2686:	cc 0f       	add	r28, r28
    2688:	dd 1f       	adc	r29, r29
    268a:	cc 0f       	add	r28, r28
    268c:	dd 1f       	adc	r29, r29
    268e:	c0 5a       	subi	r28, 0xA0	; 160
    2690:	dd 4d       	sbci	r29, 0xDD	; 221
    2692:	6e 85       	ldd	r22, Y+14	; 0x0e
    2694:	7f 85       	ldd	r23, Y+15	; 0x0f
    2696:	41 2f       	mov	r20, r17
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	19 95       	eicall
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	ff 90       	pop	r15
    26a6:	08 95       	ret

000026a8 <udd_ep_free>:
    26a8:	cf 93       	push	r28
    26aa:	c8 2f       	mov	r28, r24
    26ac:	ae df       	rcall	.-164    	; 0x260a <udd_ep_abort>
    26ae:	ec 2f       	mov	r30, r28
    26b0:	ef 70       	andi	r30, 0x0F	; 15
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	ee 0f       	add	r30, r30
    26b6:	ff 1f       	adc	r31, r31
    26b8:	8c 2f       	mov	r24, r28
    26ba:	cc 0f       	add	r28, r28
    26bc:	99 0b       	sbc	r25, r25
    26be:	88 27       	eor	r24, r24
    26c0:	99 0f       	add	r25, r25
    26c2:	88 1f       	adc	r24, r24
    26c4:	99 27       	eor	r25, r25
    26c6:	e8 0f       	add	r30, r24
    26c8:	f9 1f       	adc	r31, r25
    26ca:	ee 0f       	add	r30, r30
    26cc:	ff 1f       	adc	r31, r31
    26ce:	ee 0f       	add	r30, r30
    26d0:	ff 1f       	adc	r31, r31
    26d2:	ee 0f       	add	r30, r30
    26d4:	ff 1f       	adc	r31, r31
    26d6:	e0 5a       	subi	r30, 0xA0	; 160
    26d8:	fd 4d       	sbci	r31, 0xDD	; 221
    26da:	15 86       	std	Z+13, r1	; 0x0d
    26dc:	cf 91       	pop	r28
    26de:	08 95       	ret

000026e0 <udd_ep_set_halt>:
    26e0:	e8 2f       	mov	r30, r24
    26e2:	ef 70       	andi	r30, 0x0F	; 15
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31
    26ea:	28 2f       	mov	r18, r24
    26ec:	08 2e       	mov	r0, r24
    26ee:	00 0c       	add	r0, r0
    26f0:	33 0b       	sbc	r19, r19
    26f2:	22 27       	eor	r18, r18
    26f4:	33 0f       	add	r19, r19
    26f6:	22 1f       	adc	r18, r18
    26f8:	33 27       	eor	r19, r19
    26fa:	e2 0f       	add	r30, r18
    26fc:	f3 1f       	adc	r31, r19
    26fe:	ee 0f       	add	r30, r30
    2700:	ff 1f       	adc	r31, r31
    2702:	ee 0f       	add	r30, r30
    2704:	ff 1f       	adc	r31, r31
    2706:	ee 0f       	add	r30, r30
    2708:	ff 1f       	adc	r31, r31
    270a:	e0 5a       	subi	r30, 0xA0	; 160
    270c:	fd 4d       	sbci	r31, 0xDD	; 221
    270e:	95 85       	ldd	r25, Z+13	; 0x0d
    2710:	94 60       	ori	r25, 0x04	; 4
    2712:	95 87       	std	Z+13, r25	; 0x0d
    2714:	7a df       	rcall	.-268    	; 0x260a <udd_ep_abort>
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	08 95       	ret

0000271a <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    271a:	1f 92       	push	r1
    271c:	0f 92       	push	r0
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	0f 92       	push	r0
    2722:	11 24       	eor	r1, r1
    2724:	0b b6       	in	r0, 0x3b	; 59
    2726:	0f 92       	push	r0
    2728:	0f 93       	push	r16
    272a:	2f 93       	push	r18
    272c:	3f 93       	push	r19
    272e:	4f 93       	push	r20
    2730:	5f 93       	push	r21
    2732:	6f 93       	push	r22
    2734:	7f 93       	push	r23
    2736:	8f 93       	push	r24
    2738:	9f 93       	push	r25
    273a:	af 93       	push	r26
    273c:	bf 93       	push	r27
    273e:	ef 93       	push	r30
    2740:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2742:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2746:	88 23       	and	r24, r24
    2748:	34 f4       	brge	.+12     	; 0x2756 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    274a:	80 e8       	ldi	r24, 0x80	; 128
    274c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2750:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2754:	88 c0       	rjmp	.+272    	; 0x2866 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2756:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    275a:	82 ff       	sbrs	r24, 2
    275c:	20 c0       	rjmp	.+64     	; 0x279e <__vector_125+0x84>
		udd_ack_underflow_event();
    275e:	84 e0       	ldi	r24, 0x04	; 4
    2760:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2764:	80 91 74 22 	lds	r24, 0x2274	; 0x802274 <udd_sram+0x14>
    2768:	86 ff       	sbrs	r24, 6
    276a:	7d c0       	rjmp	.+250    	; 0x2866 <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    276c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2770:	81 fd       	sbrc	r24, 1
    2772:	79 c0       	rjmp	.+242    	; 0x2866 <__vector_125+0x14c>
    2774:	e6 da       	rcall	.-2612   	; 0x1d42 <udd_ctrl_interrupt_tc_setup>
    2776:	81 11       	cpse	r24, r1
    2778:	76 c0       	rjmp	.+236    	; 0x2866 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    277a:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <udd_ep_control_state>
    277e:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2780:	11 f4       	brne	.+4      	; 0x2786 <__vector_125+0x6c>
    2782:	19 da       	rcall	.-3022   	; 0x1bb6 <udd_ctrl_send_zlp_in>
    2784:	70 c0       	rjmp	.+224    	; 0x2866 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2786:	84 30       	cpi	r24, 0x04	; 4
    2788:	09 f0       	breq	.+2      	; 0x278c <__vector_125+0x72>
    278a:	6d c0       	rjmp	.+218    	; 0x2866 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    278c:	e5 e7       	ldi	r30, 0x75	; 117
    278e:	f2 e2       	ldi	r31, 0x22	; 34
    2790:	04 e0       	ldi	r16, 0x04	; 4
    2792:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2794:	ed e6       	ldi	r30, 0x6D	; 109
    2796:	f2 e2       	ldi	r31, 0x22	; 34
    2798:	04 e0       	ldi	r16, 0x04	; 4
    279a:	05 93       	las	Z, r16
    279c:	64 c0       	rjmp	.+200    	; 0x2866 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    279e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27a2:	81 ff       	sbrs	r24, 1
    27a4:	5b c0       	rjmp	.+182    	; 0x285c <__vector_125+0x142>
		udd_ack_overflow_event();
    27a6:	82 e0       	ldi	r24, 0x02	; 2
    27a8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    27ac:	80 91 6c 22 	lds	r24, 0x226C	; 0x80226c <udd_sram+0xc>
    27b0:	86 ff       	sbrs	r24, 6
    27b2:	59 c0       	rjmp	.+178    	; 0x2866 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    27b4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    27b8:	81 fd       	sbrc	r24, 1
    27ba:	55 c0       	rjmp	.+170    	; 0x2866 <__vector_125+0x14c>
    27bc:	c2 da       	rcall	.-2684   	; 0x1d42 <udd_ctrl_interrupt_tc_setup>
    27be:	81 11       	cpse	r24, r1
    27c0:	52 c0       	rjmp	.+164    	; 0x2866 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    27c2:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <udd_ep_control_state>
    27c6:	82 30       	cpi	r24, 0x02	; 2
    27c8:	41 f4       	brne	.+16     	; 0x27da <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    27ca:	84 e0       	ldi	r24, 0x04	; 4
    27cc:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    27d0:	ec e6       	ldi	r30, 0x6C	; 108
    27d2:	f2 e2       	ldi	r31, 0x22	; 34
    27d4:	02 e0       	ldi	r16, 0x02	; 2
    27d6:	06 93       	lac	Z, r16
    27d8:	46 c0       	rjmp	.+140    	; 0x2866 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    27da:	83 30       	cpi	r24, 0x03	; 3
    27dc:	09 f0       	breq	.+2      	; 0x27e0 <__vector_125+0xc6>
    27de:	43 c0       	rjmp	.+134    	; 0x2866 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    27e0:	e5 e7       	ldi	r30, 0x75	; 117
    27e2:	f2 e2       	ldi	r31, 0x22	; 34
    27e4:	04 e0       	ldi	r16, 0x04	; 4
    27e6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    27e8:	ed e6       	ldi	r30, 0x6D	; 109
    27ea:	f2 e2       	ldi	r31, 0x22	; 34
    27ec:	04 e0       	ldi	r16, 0x04	; 4
    27ee:	05 93       	las	Z, r16
    27f0:	3a c0       	rjmp	.+116    	; 0x2866 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    27f2:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    27f4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    27f8:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    27fa:	07 df       	rcall	.-498    	; 0x260a <udd_ep_abort>
    27fc:	81 e8       	ldi	r24, 0x81	; 129
    27fe:	05 df       	rcall	.-502    	; 0x260a <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2800:	82 e0       	ldi	r24, 0x02	; 2
    2802:	03 df       	rcall	.-506    	; 0x260a <udd_ep_abort>
    2804:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    2806:	01 df       	rcall	.-510    	; 0x260a <udd_ep_abort>
    2808:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    280c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2810:	e0 e6       	ldi	r30, 0x60	; 96
    2812:	f2 e2       	ldi	r31, 0x22	; 34
	udd_endpoint_clear_status(ep_ctrl);
    2814:	15 86       	std	Z+13, r1	; 0x0d
    2816:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2818:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    281a:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    281c:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    281e:	15 8a       	std	Z+21, r1	; 0x15
    2820:	94 8b       	std	Z+20, r25	; 0x14
    2822:	85 8b       	std	Z+21, r24	; 0x15
    2824:	89 e1       	ldi	r24, 0x19	; 25
		// Reset endpoint control management
		udd_ctrl_init();
    2826:	92 e2       	ldi	r25, 0x22	; 34
    2828:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    282a:	91 8b       	std	Z+17, r25	; 0x11
    282c:	91 d9       	rcall	.-3294   	; 0x1b50 <udd_ctrl_init>
		udd_ack_suspend_event();
    282e:	1b c0       	rjmp	.+54     	; 0x2866 <__vector_125+0x14c>
    2830:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2834:	86 ff       	sbrs	r24, 6
    2836:	07 c0       	rjmp	.+14     	; 0x2846 <__vector_125+0x12c>
    2838:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    283a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	4f d9       	rcall	.-3426   	; 0x1ae0 <udd_sleep_mode>
		udd_ack_resume_event();
    2842:	b4 d2       	rcall	.+1384   	; 0x2dac <usb_callback_suspend_action>
    2844:	10 c0       	rjmp	.+32     	; 0x2866 <__vector_125+0x14c>
    2846:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    284a:	85 ff       	sbrs	r24, 5
    284c:	0c c0       	rjmp	.+24     	; 0x2866 <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    284e:	80 e2       	ldi	r24, 0x20	; 32
    2850:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	44 d9       	rcall	.-3448   	; 0x1ae0 <udd_sleep_mode>
    2858:	aa d2       	rcall	.+1364   	; 0x2dae <usb_callback_resume_action>
    285a:	05 c0       	rjmp	.+10     	; 0x2866 <__vector_125+0x14c>
    285c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2860:	84 fd       	sbrc	r24, 4
    2862:	c7 cf       	rjmp	.-114    	; 0x27f2 <__vector_125+0xd8>
    2864:	e5 cf       	rjmp	.-54     	; 0x2830 <__vector_125+0x116>
    2866:	ff 91       	pop	r31
    2868:	ef 91       	pop	r30
    286a:	bf 91       	pop	r27
    286c:	af 91       	pop	r26
    286e:	9f 91       	pop	r25
    2870:	8f 91       	pop	r24
    2872:	7f 91       	pop	r23
    2874:	6f 91       	pop	r22
    2876:	5f 91       	pop	r21
    2878:	4f 91       	pop	r20
    287a:	3f 91       	pop	r19
    287c:	2f 91       	pop	r18
    287e:	0f 91       	pop	r16
    2880:	0f 90       	pop	r0
    2882:	0b be       	out	0x3b, r0	; 59
    2884:	0f 90       	pop	r0
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	0f 90       	pop	r0
    288a:	1f 90       	pop	r1
    288c:	18 95       	reti

0000288e <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    288e:	1f 92       	push	r1
    2890:	0f 92       	push	r0
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	0f 92       	push	r0
    2896:	11 24       	eor	r1, r1
    2898:	0b b6       	in	r0, 0x3b	; 59
    289a:	0f 92       	push	r0
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	2f 93       	push	r18
    28a2:	3f 93       	push	r19
    28a4:	4f 93       	push	r20
    28a6:	5f 93       	push	r21
    28a8:	6f 93       	push	r22
    28aa:	7f 93       	push	r23
    28ac:	8f 93       	push	r24
    28ae:	9f 93       	push	r25
    28b0:	af 93       	push	r26
    28b2:	bf 93       	push	r27
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	ef 93       	push	r30
    28ba:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    28bc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    28c0:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    28c2:	03 c0       	rjmp	.+6      	; 0x28ca <__vector_126+0x3c>
    28c4:	3e da       	rcall	.-2948   	; 0x1d42 <udd_ctrl_interrupt_tc_setup>
    28c6:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    28c8:	c4 c0       	rjmp	.+392    	; 0x2a52 <__vector_126+0x1c4>
    28ca:	82 e0       	ldi	r24, 0x02	; 2
    28cc:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    28d0:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    28d4:	81 95       	neg	r24
    28d6:	88 0f       	add	r24, r24
    28d8:	ec e6       	ldi	r30, 0x6C	; 108
    28da:	f2 e2       	ldi	r31, 0x22	; 34
    28dc:	e8 1b       	sub	r30, r24
    28de:	f1 09       	sbc	r31, r1
    28e0:	20 81       	ld	r18, Z
    28e2:	31 81       	ldd	r19, Z+1	; 0x01
    28e4:	2c 56       	subi	r18, 0x6C	; 108
    28e6:	32 42       	sbci	r19, 0x22	; 34
    28e8:	36 95       	lsr	r19
    28ea:	27 95       	ror	r18
    28ec:	36 95       	lsr	r19
    28ee:	27 95       	ror	r18
    28f0:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    28f2:	27 95       	ror	r18
    28f4:	82 2f       	mov	r24, r18
    28f6:	86 95       	lsr	r24
    28f8:	20 fd       	sbrc	r18, 0
    28fa:	02 c0       	rjmp	.+4      	; 0x2900 <__vector_126+0x72>
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	01 c0       	rjmp	.+2      	; 0x2902 <__vector_126+0x74>
    2900:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2902:	89 0f       	add	r24, r25
    2904:	e8 2f       	mov	r30, r24
    2906:	ef 70       	andi	r30, 0x0F	; 15
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	ee 0f       	add	r30, r30
    290c:	ff 1f       	adc	r31, r31
    290e:	28 2f       	mov	r18, r24
    2910:	08 2e       	mov	r0, r24
    2912:	00 0c       	add	r0, r0
    2914:	33 0b       	sbc	r19, r19
    2916:	22 27       	eor	r18, r18
    2918:	33 0f       	add	r19, r19
    291a:	22 1f       	adc	r18, r18
    291c:	33 27       	eor	r19, r19
    291e:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2920:	f3 1f       	adc	r31, r19
    2922:	df 01       	movw	r26, r30
    2924:	aa 0f       	add	r26, r26
    2926:	bb 1f       	adc	r27, r27
    2928:	aa 0f       	add	r26, r26
    292a:	bb 1f       	adc	r27, r27
    292c:	aa 0f       	add	r26, r26
    292e:	bb 1f       	adc	r27, r27
    2930:	a0 5a       	subi	r26, 0xA0	; 160
    2932:	bd 4d       	sbci	r27, 0xDD	; 221
    2934:	1c 96       	adiw	r26, 0x0c	; 12
    2936:	9c 91       	ld	r25, X
    2938:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    293a:	8b c0       	rjmp	.+278    	; 0x2a52 <__vector_126+0x1c4>
    293c:	ee 0f       	add	r30, r30
    293e:	ff 1f       	adc	r31, r31
    2940:	ee 0f       	add	r30, r30
    2942:	ff 1f       	adc	r31, r31
    2944:	ee 0f       	add	r30, r30
    2946:	ff 1f       	adc	r31, r31
    2948:	e4 59       	subi	r30, 0x94	; 148
    294a:	fd 4d       	sbci	r31, 0xDD	; 221
    294c:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    294e:	06 93       	lac	Z, r16
    2950:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2952:	7a c0       	rjmp	.+244    	; 0x2a48 <__vector_126+0x1ba>
    2954:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2958:	84 30       	cpi	r24, 0x04	; 4
    295a:	19 f4       	brne	.+6      	; 0x2962 <__vector_126+0xd4>
    295c:	3a d9       	rcall	.-3468   	; 0x1bd2 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    295e:	f8 d8       	rcall	.-3600   	; 0x1b50 <udd_ctrl_init>
    2960:	78 c0       	rjmp	.+240    	; 0x2a52 <__vector_126+0x1c4>
    2962:	00 91 6e 22 	lds	r16, 0x226E	; 0x80226e <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2966:	10 91 6f 22 	lds	r17, 0x226F	; 0x80226f <udd_sram+0xf>
    296a:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0xa>
    296e:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0xb>
    2972:	c0 91 59 22 	lds	r28, 0x2259	; 0x802259 <udd_ctrl_payload_nb_trans>
    2976:	d0 91 5a 22 	lds	r29, 0x225A	; 0x80225a <udd_ctrl_payload_nb_trans+0x1>
    297a:	98 01       	movw	r18, r16
    297c:	2c 0f       	add	r18, r28
    297e:	3d 1f       	adc	r19, r29
    2980:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2982:	93 07       	cpc	r25, r19
    2984:	18 f4       	brcc	.+6      	; 0x298c <__vector_126+0xfe>
    2986:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2988:	0c 1b       	sub	r16, r28
    298a:	1d 0b       	sbc	r17, r29
    298c:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x8>
    2990:	90 91 eb 23 	lds	r25, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x9>
    2994:	a8 01       	movw	r20, r16
    2996:	69 e1       	ldi	r22, 0x19	; 25
    2998:	72 e2       	ldi	r23, 0x22	; 34
    299a:	8c 0f       	add	r24, r28
    299c:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    299e:	0e 94 0c 21 	call	0x4218	; 0x4218 <memcpy>
    29a2:	c0 0f       	add	r28, r16
    29a4:	d1 1f       	adc	r29, r17
    29a6:	c0 93 59 22 	sts	0x2259, r28	; 0x802259 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    29aa:	d0 93 5a 22 	sts	0x225A, r29	; 0x80225a <udd_ctrl_payload_nb_trans+0x1>
    29ae:	00 34       	cpi	r16, 0x40	; 64
    29b0:	11 05       	cpc	r17, r1
    29b2:	69 f4       	brne	.+26     	; 0x29ce <__vector_126+0x140>
    29b4:	80 91 5b 22 	lds	r24, 0x225B	; 0x80225b <udd_ctrl_prev_payload_nb_trans>
    29b8:	90 91 5c 22 	lds	r25, 0x225C	; 0x80225c <udd_ctrl_prev_payload_nb_trans+0x1>
    29bc:	8c 0f       	add	r24, r28
    29be:	9d 1f       	adc	r25, r29
    29c0:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    29c4:	30 91 e9 23 	lds	r19, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    29c8:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    29ca:	93 07       	cpc	r25, r19
    29cc:	80 f0       	brcs	.+32     	; 0x29ee <__vector_126+0x160>
    29ce:	e2 ee       	ldi	r30, 0xE2	; 226
    29d0:	f3 e2       	ldi	r31, 0x23	; 35
		if (NULL != udd_g_ctrlreq.over_under_run) {
    29d2:	c2 87       	std	Z+10, r28	; 0x0a
    29d4:	d3 87       	std	Z+11, r29	; 0x0b
    29d6:	06 84       	ldd	r0, Z+14	; 0x0e
    29d8:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    29da:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    29dc:	30 97       	sbiw	r30, 0x00	; 0
    29de:	29 f0       	breq	.+10     	; 0x29ea <__vector_126+0x15c>
    29e0:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    29e2:	81 11       	cpse	r24, r1
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <__vector_126+0x15c>
    29e6:	d9 d8       	rcall	.-3662   	; 0x1b9a <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    29e8:	34 c0       	rjmp	.+104    	; 0x2a52 <__vector_126+0x1c4>
    29ea:	e5 d8       	rcall	.-3638   	; 0x1bb6 <udd_ctrl_send_zlp_in>
    29ec:	32 c0       	rjmp	.+100    	; 0x2a52 <__vector_126+0x1c4>
    29ee:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0xa>
    29f2:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    29f6:	c8 17       	cp	r28, r24
    29f8:	d9 07       	cpc	r29, r25
    29fa:	f9 f4       	brne	.+62     	; 0x2a3a <__vector_126+0x1ac>
    29fc:	e0 91 f0 23 	lds	r30, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2a00:	f0 91 f1 23 	lds	r31, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2a04:	30 97       	sbiw	r30, 0x00	; 0
    2a06:	11 f4       	brne	.+4      	; 0x2a0c <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2a08:	c8 d8       	rcall	.-3696   	; 0x1b9a <udd_ctrl_stall_data>
    2a0a:	23 c0       	rjmp	.+70     	; 0x2a52 <__vector_126+0x1c4>
    2a0c:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2a0e:	81 11       	cpse	r24, r1
    2a10:	02 c0       	rjmp	.+4      	; 0x2a16 <__vector_126+0x188>
    2a12:	c3 d8       	rcall	.-3706   	; 0x1b9a <udd_ctrl_stall_data>
    2a14:	1e c0       	rjmp	.+60     	; 0x2a52 <__vector_126+0x1c4>
    2a16:	20 91 5b 22 	lds	r18, 0x225B	; 0x80225b <udd_ctrl_prev_payload_nb_trans>
    2a1a:	30 91 5c 22 	lds	r19, 0x225C	; 0x80225c <udd_ctrl_prev_payload_nb_trans+0x1>
    2a1e:	80 91 59 22 	lds	r24, 0x2259	; 0x802259 <udd_ctrl_payload_nb_trans>
    2a22:	90 91 5a 22 	lds	r25, 0x225A	; 0x80225a <udd_ctrl_payload_nb_trans+0x1>
    2a26:	82 0f       	add	r24, r18
    2a28:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2a2a:	80 93 5b 22 	sts	0x225B, r24	; 0x80225b <udd_ctrl_prev_payload_nb_trans>
    2a2e:	90 93 5c 22 	sts	0x225C, r25	; 0x80225c <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2a32:	10 92 59 22 	sts	0x2259, r1	; 0x802259 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    2a36:	10 92 5a 22 	sts	0x225A, r1	; 0x80225a <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2a3a:	ec e6       	ldi	r30, 0x6C	; 108
    2a3c:	f2 e2       	ldi	r31, 0x22	; 34
		udd_ctrl_in_sent();
    2a3e:	02 e0       	ldi	r16, 0x02	; 2
    2a40:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2a42:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2a44:	06 93       	lac	Z, r16
    2a46:	05 c0       	rjmp	.+10     	; 0x2a52 <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2a48:	80 38       	cpi	r24, 0x80	; 128
    2a4a:	11 f4       	brne	.+4      	; 0x2a50 <__vector_126+0x1c2>
    2a4c:	ca d8       	rcall	.-3692   	; 0x1be2 <udd_ctrl_in_sent>
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <__vector_126+0x1c4>
    2a50:	ea d9       	rcall	.-3116   	; 0x1e26 <udd_ep_trans_complet>
    2a52:	ff 91       	pop	r31
    2a54:	ef 91       	pop	r30
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	bf 91       	pop	r27
    2a5c:	af 91       	pop	r26
    2a5e:	9f 91       	pop	r25
    2a60:	8f 91       	pop	r24
    2a62:	7f 91       	pop	r23
    2a64:	6f 91       	pop	r22
    2a66:	5f 91       	pop	r21
    2a68:	4f 91       	pop	r20
    2a6a:	3f 91       	pop	r19
    2a6c:	2f 91       	pop	r18
    2a6e:	1f 91       	pop	r17
    2a70:	0f 91       	pop	r16
    2a72:	0f 90       	pop	r0
    2a74:	0b be       	out	0x3b, r0	; 59
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	0f 90       	pop	r0
    2a7c:	1f 90       	pop	r1
    2a7e:	18 95       	reti

00002a80 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    2a80:	cf 92       	push	r12
    2a82:	df 92       	push	r13
    2a84:	ef 92       	push	r14
    2a86:	ff 92       	push	r15
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    2a8e:	6b 01       	movw	r12, r22
    2a90:	e1 2c       	mov	r14, r1
    2a92:	f1 2c       	mov	r15, r1
    2a94:	60 e8       	ldi	r22, 0x80	; 128
    2a96:	73 ec       	ldi	r23, 0xC3	; 195
    2a98:	89 ec       	ldi	r24, 0xC9	; 201
    2a9a:	91 e0       	ldi	r25, 0x01	; 1
    2a9c:	a7 01       	movw	r20, r14
    2a9e:	96 01       	movw	r18, r12
    2aa0:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__udivmodsi4>
    2aa4:	ca 01       	movw	r24, r20
    2aa6:	b9 01       	movw	r22, r18
    2aa8:	2f ef       	ldi	r18, 0xFF	; 255
    2aaa:	3f ef       	ldi	r19, 0xFF	; 255
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	50 e0       	ldi	r21, 0x00	; 0
    2ab0:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__udivmodsi4>
	if (smallest_div < 1) {
    2ab4:	21 15       	cp	r18, r1
    2ab6:	31 05       	cpc	r19, r1
    2ab8:	29 f4       	brne	.+10     	; 0x2ac4 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    2abe:	21 e0       	ldi	r18, 0x01	; 1
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	2d c0       	rjmp	.+90     	; 0x2b1e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    2ac4:	22 30       	cpi	r18, 0x02	; 2
    2ac6:	31 05       	cpc	r19, r1
    2ac8:	28 f4       	brcc	.+10     	; 0x2ad4 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    2ace:	22 e0       	ldi	r18, 0x02	; 2
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	25 c0       	rjmp	.+74     	; 0x2b1e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    2ad4:	24 30       	cpi	r18, 0x04	; 4
    2ad6:	31 05       	cpc	r19, r1
    2ad8:	28 f4       	brcc	.+10     	; 0x2ae4 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    2ada:	83 e0       	ldi	r24, 0x03	; 3
    2adc:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    2ade:	24 e0       	ldi	r18, 0x04	; 4
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	1d c0       	rjmp	.+58     	; 0x2b1e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    2ae4:	28 30       	cpi	r18, 0x08	; 8
    2ae6:	31 05       	cpc	r19, r1
    2ae8:	28 f4       	brcc	.+10     	; 0x2af4 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    2aea:	84 e0       	ldi	r24, 0x04	; 4
    2aec:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    2aee:	28 e0       	ldi	r18, 0x08	; 8
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	15 c0       	rjmp	.+42     	; 0x2b1e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    2af4:	20 34       	cpi	r18, 0x40	; 64
    2af6:	31 05       	cpc	r19, r1
    2af8:	28 f4       	brcc	.+10     	; 0x2b04 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2afa:	85 e0       	ldi	r24, 0x05	; 5
    2afc:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    2afe:	20 e4       	ldi	r18, 0x40	; 64
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	0d c0       	rjmp	.+26     	; 0x2b1e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    2b04:	2f 3f       	cpi	r18, 0xFF	; 255
    2b06:	31 05       	cpc	r19, r1
    2b08:	09 f0       	breq	.+2      	; 0x2b0c <pwm_set_frequency+0x8c>
    2b0a:	28 f4       	brcc	.+10     	; 0x2b16 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    2b0c:	86 e0       	ldi	r24, 0x06	; 6
    2b0e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	31 e0       	ldi	r19, 0x01	; 1
    2b14:	04 c0       	rjmp	.+8      	; 0x2b1e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    2b16:	87 e0       	ldi	r24, 0x07	; 7
    2b18:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    2b1e:	40 e0       	ldi	r20, 0x00	; 0
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	60 e8       	ldi	r22, 0x80	; 128
    2b24:	73 ec       	ldi	r23, 0xC3	; 195
    2b26:	89 ec       	ldi	r24, 0xC9	; 201
    2b28:	91 e0       	ldi	r25, 0x01	; 1
    2b2a:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__udivmodsi4>
    2b2e:	ca 01       	movw	r24, r20
    2b30:	b9 01       	movw	r22, r18
    2b32:	a7 01       	movw	r20, r14
    2b34:	96 01       	movw	r18, r12
    2b36:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__udivmodsi4>
    2b3a:	2d 83       	std	Y+5, r18	; 0x05
    2b3c:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    2b3e:	24 36       	cpi	r18, 0x64	; 100
    2b40:	31 05       	cpc	r19, r1
    2b42:	18 f4       	brcc	.+6      	; 0x2b4a <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    2b44:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    2b46:	1d 82       	std	Y+5, r1	; 0x05
    2b48:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	ff 90       	pop	r15
    2b50:	ef 90       	pop	r14
    2b52:	df 90       	pop	r13
    2b54:	cf 90       	pop	r12
    2b56:	08 95       	ret

00002b58 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2b58:	0f 93       	push	r16
    2b5a:	1f 93       	push	r17
    2b5c:	cf 93       	push	r28
    2b5e:	df 93       	push	r29
    2b60:	ec 01       	movw	r28, r24
    2b62:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    2b64:	86 2f       	mov	r24, r22
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	87 30       	cpi	r24, 0x07	; 7
    2b6a:	91 05       	cpc	r25, r1
    2b6c:	08 f0       	brcs	.+2      	; 0x2b70 <pwm_init+0x18>
    2b6e:	8b c0       	rjmp	.+278    	; 0x2c86 <pwm_init+0x12e>
    2b70:	fc 01       	movw	r30, r24
    2b72:	88 27       	eor	r24, r24
    2b74:	eb 5f       	subi	r30, 0xFB	; 251
    2b76:	fe 4f       	sbci	r31, 0xFE	; 254
    2b78:	8f 4f       	sbci	r24, 0xFF	; 255
    2b7a:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	98 e0       	ldi	r25, 0x08	; 8
    2b82:	88 83       	st	Y, r24
    2b84:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    2b86:	e0 e4       	ldi	r30, 0x40	; 64
    2b88:	f6 e0       	ldi	r31, 0x06	; 6
    2b8a:	30 81       	ld	r19, Z
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	2f ef       	ldi	r18, 0xFF	; 255
    2b92:	24 0f       	add	r18, r20
    2b94:	02 c0       	rjmp	.+4      	; 0x2b9a <pwm_init+0x42>
    2b96:	88 0f       	add	r24, r24
    2b98:	99 1f       	adc	r25, r25
    2b9a:	2a 95       	dec	r18
    2b9c:	e2 f7       	brpl	.-8      	; 0x2b96 <pwm_init+0x3e>
    2b9e:	83 2b       	or	r24, r19
    2ba0:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2ba2:	71 c0       	rjmp	.+226    	; 0x2c86 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    2ba4:	80 e4       	ldi	r24, 0x40	; 64
    2ba6:	98 e0       	ldi	r25, 0x08	; 8
    2ba8:	88 83       	st	Y, r24
    2baa:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2bac:	e0 e4       	ldi	r30, 0x40	; 64
    2bae:	f6 e0       	ldi	r31, 0x06	; 6
    2bb0:	30 81       	ld	r19, Z
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	23 e0       	ldi	r18, 0x03	; 3
    2bb8:	24 0f       	add	r18, r20
    2bba:	02 c0       	rjmp	.+4      	; 0x2bc0 <pwm_init+0x68>
    2bbc:	88 0f       	add	r24, r24
    2bbe:	99 1f       	adc	r25, r25
    2bc0:	2a 95       	dec	r18
    2bc2:	e2 f7       	brpl	.-8      	; 0x2bbc <pwm_init+0x64>
    2bc4:	83 2b       	or	r24, r19
    2bc6:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2bc8:	5e c0       	rjmp	.+188    	; 0x2c86 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	99 e0       	ldi	r25, 0x09	; 9
    2bce:	88 83       	st	Y, r24
    2bd0:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    2bd2:	e0 e6       	ldi	r30, 0x60	; 96
    2bd4:	f6 e0       	ldi	r31, 0x06	; 6
    2bd6:	30 81       	ld	r19, Z
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	2f ef       	ldi	r18, 0xFF	; 255
    2bde:	24 0f       	add	r18, r20
    2be0:	02 c0       	rjmp	.+4      	; 0x2be6 <pwm_init+0x8e>
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	2a 95       	dec	r18
    2be8:	e2 f7       	brpl	.-8      	; 0x2be2 <pwm_init+0x8a>
    2bea:	83 2b       	or	r24, r19
    2bec:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2bee:	4b c0       	rjmp	.+150    	; 0x2c86 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2bf0:	80 e4       	ldi	r24, 0x40	; 64
    2bf2:	99 e0       	ldi	r25, 0x09	; 9
    2bf4:	88 83       	st	Y, r24
    2bf6:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2bf8:	e0 e6       	ldi	r30, 0x60	; 96
    2bfa:	f6 e0       	ldi	r31, 0x06	; 6
    2bfc:	30 81       	ld	r19, Z
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	23 e0       	ldi	r18, 0x03	; 3
    2c04:	24 0f       	add	r18, r20
    2c06:	02 c0       	rjmp	.+4      	; 0x2c0c <pwm_init+0xb4>
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	2a 95       	dec	r18
    2c0e:	e2 f7       	brpl	.-8      	; 0x2c08 <pwm_init+0xb0>
    2c10:	83 2b       	or	r24, r19
    2c12:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2c14:	38 c0       	rjmp	.+112    	; 0x2c86 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	9a e0       	ldi	r25, 0x0A	; 10
    2c1a:	88 83       	st	Y, r24
    2c1c:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    2c1e:	e0 e8       	ldi	r30, 0x80	; 128
    2c20:	f6 e0       	ldi	r31, 0x06	; 6
    2c22:	30 81       	ld	r19, Z
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	2f ef       	ldi	r18, 0xFF	; 255
    2c2a:	24 0f       	add	r18, r20
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <pwm_init+0xda>
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	2a 95       	dec	r18
    2c34:	e2 f7       	brpl	.-8      	; 0x2c2e <pwm_init+0xd6>
    2c36:	83 2b       	or	r24, r19
    2c38:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2c3a:	25 c0       	rjmp	.+74     	; 0x2c86 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    2c3c:	80 e4       	ldi	r24, 0x40	; 64
    2c3e:	9a e0       	ldi	r25, 0x0A	; 10
    2c40:	88 83       	st	Y, r24
    2c42:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    2c44:	e0 e8       	ldi	r30, 0x80	; 128
    2c46:	f6 e0       	ldi	r31, 0x06	; 6
    2c48:	30 81       	ld	r19, Z
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	23 e0       	ldi	r18, 0x03	; 3
    2c50:	24 0f       	add	r18, r20
    2c52:	02 c0       	rjmp	.+4      	; 0x2c58 <pwm_init+0x100>
    2c54:	88 0f       	add	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	2a 95       	dec	r18
    2c5a:	e2 f7       	brpl	.-8      	; 0x2c54 <pwm_init+0xfc>
    2c5c:	83 2b       	or	r24, r19
    2c5e:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2c60:	12 c0       	rjmp	.+36     	; 0x2c86 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	9b e0       	ldi	r25, 0x0B	; 11
    2c66:	88 83       	st	Y, r24
    2c68:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    2c6a:	e0 ea       	ldi	r30, 0xA0	; 160
    2c6c:	f6 e0       	ldi	r31, 0x06	; 6
    2c6e:	30 81       	ld	r19, Z
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	2f ef       	ldi	r18, 0xFF	; 255
    2c76:	24 0f       	add	r18, r20
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <pwm_init+0x126>
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	2a 95       	dec	r18
    2c80:	e2 f7       	brpl	.-8      	; 0x2c7a <pwm_init+0x122>
    2c82:	83 2b       	or	r24, r19
    2c84:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    2c86:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    2c88:	42 30       	cpi	r20, 0x02	; 2
    2c8a:	61 f0       	breq	.+24     	; 0x2ca4 <pwm_init+0x14c>
    2c8c:	18 f4       	brcc	.+6      	; 0x2c94 <pwm_init+0x13c>
    2c8e:	41 30       	cpi	r20, 0x01	; 1
    2c90:	31 f0       	breq	.+12     	; 0x2c9e <pwm_init+0x146>
    2c92:	10 c0       	rjmp	.+32     	; 0x2cb4 <pwm_init+0x15c>
    2c94:	43 30       	cpi	r20, 0x03	; 3
    2c96:	49 f0       	breq	.+18     	; 0x2caa <pwm_init+0x152>
    2c98:	44 30       	cpi	r20, 0x04	; 4
    2c9a:	51 f0       	breq	.+20     	; 0x2cb0 <pwm_init+0x158>
    2c9c:	0b c0       	rjmp	.+22     	; 0x2cb4 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    2c9e:	80 e1       	ldi	r24, 0x10	; 16
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2ca2:	08 c0       	rjmp	.+16     	; 0x2cb4 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    2ca4:	80 e2       	ldi	r24, 0x20	; 32
    2ca6:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2ca8:	05 c0       	rjmp	.+10     	; 0x2cb4 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    2caa:	80 e4       	ldi	r24, 0x40	; 64
    2cac:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    2cb0:	80 e8       	ldi	r24, 0x80	; 128
    2cb2:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    2cb4:	88 81       	ld	r24, Y
    2cb6:	99 81       	ldd	r25, Y+1	; 0x01
    2cb8:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    2cbc:	e8 81       	ld	r30, Y
    2cbe:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2cc0:	81 81       	ldd	r24, Z+1	; 0x01
    2cc2:	88 7f       	andi	r24, 0xF8	; 248
    2cc4:	83 60       	ori	r24, 0x03	; 3
    2cc6:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    2cc8:	1d 82       	std	Y+5, r1	; 0x05
    2cca:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    2ccc:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    2cce:	e8 81       	ld	r30, Y
    2cd0:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2cd2:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2cd4:	80 7f       	andi	r24, 0xF0	; 240
    2cd6:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    2cd8:	b8 01       	movw	r22, r16
    2cda:	ce 01       	movw	r24, r28
    2cdc:	d1 de       	rcall	.-606    	; 0x2a80 <pwm_set_frequency>
}
    2cde:	df 91       	pop	r29
    2ce0:	cf 91       	pop	r28
    2ce2:	1f 91       	pop	r17
    2ce4:	0f 91       	pop	r16
    2ce6:	08 95       	ret

00002ce8 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    2ce8:	cf 93       	push	r28
    2cea:	df 93       	push	r29
    2cec:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    2cee:	2d 81       	ldd	r18, Y+5	; 0x05
    2cf0:	3e 81       	ldd	r19, Y+6	; 0x06
    2cf2:	a6 2f       	mov	r26, r22
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	0e 94 fd 20 	call	0x41fa	; 0x41fa <__umulhisi3>
    2cfa:	24 e6       	ldi	r18, 0x64	; 100
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	50 e0       	ldi	r21, 0x00	; 0
    2d02:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__udivmodsi4>
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	e8 81       	ld	r30, Y
    2d0a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2d0c:	e6 fd       	sbrc	r30, 6
    2d0e:	17 c0       	rjmp	.+46     	; 0x2d3e <pwm_start+0x56>
		switch (channel_index) {
    2d10:	82 30       	cpi	r24, 0x02	; 2
    2d12:	61 f0       	breq	.+24     	; 0x2d2c <pwm_start+0x44>
    2d14:	18 f4       	brcc	.+6      	; 0x2d1c <pwm_start+0x34>
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	31 f0       	breq	.+12     	; 0x2d26 <pwm_start+0x3e>
    2d1a:	1b c0       	rjmp	.+54     	; 0x2d52 <pwm_start+0x6a>
    2d1c:	83 30       	cpi	r24, 0x03	; 3
    2d1e:	49 f0       	breq	.+18     	; 0x2d32 <pwm_start+0x4a>
    2d20:	84 30       	cpi	r24, 0x04	; 4
    2d22:	51 f0       	breq	.+20     	; 0x2d38 <pwm_start+0x50>
    2d24:	16 c0       	rjmp	.+44     	; 0x2d52 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    2d26:	20 af       	std	Z+56, r18	; 0x38
    2d28:	31 af       	std	Z+57, r19	; 0x39
    2d2a:	13 c0       	rjmp	.+38     	; 0x2d52 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2d2c:	22 af       	std	Z+58, r18	; 0x3a
    2d2e:	33 af       	std	Z+59, r19	; 0x3b
    2d30:	10 c0       	rjmp	.+32     	; 0x2d52 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    2d32:	24 af       	std	Z+60, r18	; 0x3c
    2d34:	35 af       	std	Z+61, r19	; 0x3d
    2d36:	0d c0       	rjmp	.+26     	; 0x2d52 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2d38:	26 af       	std	Z+62, r18	; 0x3e
    2d3a:	37 af       	std	Z+63, r19	; 0x3f
    2d3c:	0a c0       	rjmp	.+20     	; 0x2d52 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    2d3e:	81 30       	cpi	r24, 0x01	; 1
    2d40:	19 f0       	breq	.+6      	; 0x2d48 <pwm_start+0x60>
    2d42:	82 30       	cpi	r24, 0x02	; 2
    2d44:	21 f0       	breq	.+8      	; 0x2d4e <pwm_start+0x66>
    2d46:	05 c0       	rjmp	.+10     	; 0x2d52 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    2d48:	20 af       	std	Z+56, r18	; 0x38
    2d4a:	31 af       	std	Z+57, r19	; 0x39
    2d4c:	02 c0       	rjmp	.+4      	; 0x2d52 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    2d4e:	22 af       	std	Z+58, r18	; 0x3a
    2d50:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    2d52:	8d 81       	ldd	r24, Y+5	; 0x05
    2d54:	9e 81       	ldd	r25, Y+6	; 0x06
    2d56:	e8 81       	ld	r30, Y
    2d58:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2d5a:	86 a3       	std	Z+38, r24	; 0x26
    2d5c:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    2d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d60:	e8 81       	ld	r30, Y
    2d62:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    2d64:	e6 fd       	sbrc	r30, 6
    2d66:	04 c0       	rjmp	.+8      	; 0x2d70 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    2d68:	91 81       	ldd	r25, Z+1	; 0x01
    2d6a:	89 2b       	or	r24, r25
    2d6c:	81 83       	std	Z+1, r24	; 0x01
    2d6e:	04 c0       	rjmp	.+8      	; 0x2d78 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    2d70:	91 81       	ldd	r25, Z+1	; 0x01
    2d72:	80 73       	andi	r24, 0x30	; 48
    2d74:	89 2b       	or	r24, r25
    2d76:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    2d78:	e8 81       	ld	r30, Y
    2d7a:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2d7c:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2d7e:	80 7f       	andi	r24, 0xF0	; 240
    2d80:	9c 81       	ldd	r25, Y+4	; 0x04
    2d82:	89 2b       	or	r24, r25
    2d84:	80 83       	st	Z, r24
}
    2d86:	df 91       	pop	r29
    2d88:	cf 91       	pop	r28
    2d8a:	08 95       	ret

00002d8c <cb_rtc_alarm>:

void halt(void)
{
	/* MAIN Loop Shutdown */

	runmode = 0;
    2d8c:	08 95       	ret

00002d8e <__vector_10>:
    2d8e:	1f 92       	push	r1
    2d90:	0f 92       	push	r0
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	0f 92       	push	r0
    2d96:	11 24       	eor	r1, r1
    2d98:	8f 93       	push	r24
    2d9a:	80 e2       	ldi	r24, 0x20	; 32
    2d9c:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>
    2da0:	8f 91       	pop	r24
    2da2:	0f 90       	pop	r0
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	0f 90       	pop	r0
    2da8:	1f 90       	pop	r1
    2daa:	18 95       	reti

00002dac <usb_callback_suspend_action>:
    2dac:	08 95       	ret

00002dae <usb_callback_resume_action>:
    2dae:	08 95       	ret

00002db0 <usb_callback_remotewakeup_enable>:
    2db0:	08 95       	ret

00002db2 <usb_callback_remotewakeup_disable>:
    2db2:	08 95       	ret

00002db4 <usb_callback_cdc_enable>:
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	80 93 a3 22 	sts	0x22A3, r24	; 0x8022a3 <usb_cdc_transfers_autorized>
    2dba:	08 95       	ret

00002dbc <usb_callback_cdc_disable>:
    2dbc:	10 92 a3 22 	sts	0x22A3, r1	; 0x8022a3 <usb_cdc_transfers_autorized>
    2dc0:	08 95       	ret

00002dc2 <usb_callback_config>:
    2dc2:	08 95       	ret

00002dc4 <usb_callback_cdc_set_dtr>:
    2dc4:	08 95       	ret

00002dc6 <usb_callback_cdc_set_rts>:
    2dc6:	08 95       	ret

00002dc8 <usb_callback_rx_notify>:
    2dc8:	08 95       	ret

00002dca <usb_callback_tx_empty_notify>:
    2dca:	08 95       	ret

00002dcc <main>:
}


int main(void)
{
    2dcc:	8f 92       	push	r8
    2dce:	9f 92       	push	r9
    2dd0:	af 92       	push	r10
    2dd2:	bf 92       	push	r11
    2dd4:	cf 92       	push	r12
    2dd6:	df 92       	push	r13
    2dd8:	ef 92       	push	r14
    2dda:	ff 92       	push	r15
    2ddc:	0f 93       	push	r16
    2dde:	1f 93       	push	r17
    2de0:	cf 93       	push	r28
    2de2:	df 93       	push	r29
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	c2 54       	subi	r28, 0x42	; 66
    2dea:	d1 09       	sbc	r29, r1
    2dec:	cd bf       	out	0x3d, r28	; 61
    2dee:	de bf       	out	0x3e, r29	; 62
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2df0:	0f 2e       	mov	r0, r31
    2df2:	f0 ea       	ldi	r31, 0xA0	; 160
    2df4:	af 2e       	mov	r10, r31
    2df6:	b1 2c       	mov	r11, r1
    2df8:	f0 2d       	mov	r31, r0
    2dfa:	0f 2e       	mov	r0, r31
    2dfc:	f7 e0       	ldi	r31, 0x07	; 7
    2dfe:	9f 2e       	mov	r9, r31
    2e00:	f0 2d       	mov	r31, r0
    2e02:	d5 01       	movw	r26, r10
    2e04:	12 96       	adiw	r26, 0x02	; 2
	uint8_t retcode = 0;
	
	/* Init of sub-modules */
	pmic_init();
	sysclk_init();
    2e06:	9c 92       	st	X, r9
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2e08:	72 d2       	rcall	.+1252   	; 0x32ee <sysclk_init>
    2e0a:	e2 ef       	ldi	r30, 0xF2	; 242
    2e0c:	f3 e2       	ldi	r31, 0x23	; 35
    2e0e:	10 82       	st	Z, r1
    2e10:	11 82       	std	Z+1, r1	; 0x01
    2e12:	12 82       	std	Z+2, r1	; 0x02
    2e14:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2e16:	14 82       	std	Z+4, r1	; 0x04
    2e18:	11 e0       	ldi	r17, 0x01	; 1
	sleepmgr_init();	// Unlocks all sleep mode levels
	rtc_init();
    2e1a:	15 83       	std	Z+5, r17	; 0x05
    2e1c:	0e 94 4f 01 	call	0x29e	; 0x29e <rtc_init>
	rtc_set_callback(cb_rtc_alarm);
    2e20:	86 ec       	ldi	r24, 0xC6	; 198
    2e22:	96 e1       	ldi	r25, 0x16	; 22
    2e24:	0e 94 4a 01 	call	0x294	; 0x294 <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2e28:	62 e0       	ldi	r22, 0x02	; 2
    2e2a:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event 7 */
	EVSYS.CH7MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    2e2c:	dd d2       	rcall	.+1466   	; 0x33e8 <sysclk_enable_module>
    2e2e:	e0 e8       	ldi	r30, 0x80	; 128
    2e30:	f1 e0       	ldi	r31, 0x01	; 1
    2e32:	80 ec       	ldi	r24, 0xC0	; 192

	/* DAC - event 6 */
	EVSYS.CH6MUX = EVSYS_CHMUX_TCE1_OVF_gc;
    2e34:	87 83       	std	Z+7, r24	; 0x07
    2e36:	88 ee       	ldi	r24, 0xE8	; 232


static void tc_init(void)
{
	/* DAC clock */
	tc_enable(&TCE1);
    2e38:	86 83       	std	Z+6, r24	; 0x06
    2e3a:	80 e4       	ldi	r24, 0x40	; 64
    2e3c:	9a e0       	ldi	r25, 0x0A	; 10
    2e3e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2e42:	0f 2e       	mov	r0, r31
    2e44:	f0 e4       	ldi	r31, 0x40	; 64
    2e46:	ef 2e       	mov	r14, r31
    2e48:	fa e0       	ldi	r31, 0x0A	; 10
    2e4a:	ff 2e       	mov	r15, r31
    2e4c:	f0 2d       	mov	r31, r0
    2e4e:	f7 01       	movw	r30, r14
    2e50:	81 81       	ldd	r24, Z+1	; 0x01
    2e52:	88 7f       	andi	r24, 0xF8	; 248
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2e54:	81 83       	std	Z+1, r24	; 0x01
    2e56:	80 e7       	ldi	r24, 0x70	; 112
    2e58:	92 e0       	ldi	r25, 0x02	; 2
    2e5a:	86 a3       	std	Z+38, r24	; 0x26
	tc_set_wgm(&TCE1, TC_WG_NORMAL);											// Internal clock for DAC convertion
	tc_write_period(&TCE1, (sysclk_get_per_hz() / DAC_RATE_OF_CONV) - 1);		// DAC clock 48 kHz for audio play-back

	/* VCTCXO PWM signal generation */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 500);							// Init PWM structure and enable timer
    2e5c:	97 a3       	std	Z+39, r25	; 0x27
    2e5e:	24 ef       	ldi	r18, 0xF4	; 244
    2e60:	31 e0       	ldi	r19, 0x01	; 1
    2e62:	43 e0       	ldi	r20, 0x03	; 3
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    2e68:	01 96       	adiw	r24, 0x01	; 1
    2e6a:	76 de       	rcall	.-788    	; 0x2b58 <pwm_init>
    2e6c:	6d e2       	ldi	r22, 0x2D	; 45
    2e6e:	ce 01       	movw	r24, r28
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    2e70:	01 96       	adiw	r24, 0x01	; 1
    2e72:	3a df       	rcall	.-396    	; 0x2ce8 <pwm_start>
    2e74:	c1 2c       	mov	r12, r1
    2e76:	68 94       	set
    2e78:	dd 24       	eor	r13, r13
    2e7a:	d3 f8       	bld	r13, 3
    2e7c:	8d e5       	ldi	r24, 0x5D	; 93
    2e7e:	94 e7       	ldi	r25, 0x74	; 116
    2e80:	d6 01       	movw	r26, r12
    2e82:	dc 96       	adiw	r26, 0x3c	; 60
    2e84:	8d 93       	st	X+, r24
	struct adc_channel_config			adcch_vctcxo_conf;
	struct adc_channel_config			adcch_io_adc4_conf;
	struct adc_channel_config			adcch_io_adc5_conf;

	/* Prepare the structures */
	adc_read_configuration(&ADC_5V0,						&adc_5v0_conf);
    2e86:	9c 93       	st	X, r25
    2e88:	dd 97       	sbiw	r26, 0x3d	; 61
    2e8a:	be 01       	movw	r22, r28
    2e8c:	6c 5d       	subi	r22, 0xDC	; 220
    2e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    2e94:	0e 94 2a 04 	call	0x854	; 0x854 <adc_read_configuration>
    2e98:	ae 01       	movw	r20, r28
    2e9a:	41 5c       	subi	r20, 0xC1	; 193
    2e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e9e:	61 e0       	ldi	r22, 0x01	; 1
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_3V0,						&adc_3v0_conf);
    2ea4:	0e 94 ae 04 	call	0x95c	; 0x95c <adcch_read_configuration>
    2ea8:	be 01       	movw	r22, r28
    2eaa:	63 5e       	subi	r22, 0xE3	; 227
    2eac:	7f 4f       	sbci	r23, 0xFF	; 255
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    2eb2:	0e 94 2a 04 	call	0x854	; 0x854 <adc_read_configuration>
    2eb6:	ae 01       	movw	r20, r28
    2eb8:	45 5c       	subi	r20, 0xC5	; 197
    2eba:	5f 4f       	sbci	r21, 0xFF	; 255
    2ebc:	61 e0       	ldi	r22, 0x01	; 1
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VBAT,						&adc_vbat_conf);
    2ec2:	0e 94 ae 04 	call	0x95c	; 0x95c <adcch_read_configuration>
    2ec6:	be 01       	movw	r22, r28
    2ec8:	6a 5e       	subi	r22, 0xEA	; 234
    2eca:	7f 4f       	sbci	r23, 0xFF	; 255
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    2ed0:	0e 94 2a 04 	call	0x854	; 0x854 <adc_read_configuration>
    2ed4:	ae 01       	movw	r20, r28
    2ed6:	49 5c       	subi	r20, 0xC9	; 201
    2ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eda:	61 e0       	ldi	r22, 0x01	; 1
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VCTCXO,						&adc_vctcxo_conf);
    2ee0:	0e 94 ae 04 	call	0x95c	; 0x95c <adcch_read_configuration>
    2ee4:	be 01       	movw	r22, r28
    2ee6:	61 5f       	subi	r22, 0xF1	; 241
    2ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    2eee:	0e 94 2a 04 	call	0x854	; 0x854 <adc_read_configuration>
    2ef2:	ae 01       	movw	r20, r28
    2ef4:	4d 5c       	subi	r20, 0xCD	; 205
    2ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef8:	62 e0       	ldi	r22, 0x02	; 2
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC4,					&adc_io_adc4_conf);
    2efe:	0e 94 ae 04 	call	0x95c	; 0x95c <adcch_read_configuration>
    2f02:	be 01       	movw	r22, r28
    2f04:	68 5f       	subi	r22, 0xF8	; 248
    2f06:	7f 4f       	sbci	r23, 0xFF	; 255
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_io_adc4_conf);
    2f0c:	0e 94 2a 04 	call	0x854	; 0x854 <adc_read_configuration>
    2f10:	ae 01       	movw	r20, r28
    2f12:	41 5d       	subi	r20, 0xD1	; 209
    2f14:	5f 4f       	sbci	r21, 0xFF	; 255
    2f16:	64 e0       	ldi	r22, 0x04	; 4
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC5,					&adc_io_adc5_conf);
    2f1c:	0e 94 ae 04 	call	0x95c	; 0x95c <adcch_read_configuration>
    2f20:	be 01       	movw	r22, r28
    2f22:	6f 5f       	subi	r22, 0xFF	; 255
    2f24:	7f 4f       	sbci	r23, 0xFF	; 255
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_io_adc5_conf);
    2f2a:	0e 94 2a 04 	call	0x854	; 0x854 <adc_read_configuration>
    2f2e:	ae 01       	movw	r20, r28
    2f30:	45 5d       	subi	r20, 0xD5	; 213
    2f32:	5f 4f       	sbci	r21, 0xFF	; 255
    2f34:	68 e0       	ldi	r22, 0x08	; 8
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	92 e0       	ldi	r25, 0x02	; 2
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2f3a:	0e 94 ae 04 	call	0x95c	; 0x95c <adcch_read_configuration>
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2f3e:	6d a1       	ldd	r22, Y+37	; 0x25
    2f40:	8e a1       	ldd	r24, Y+38	; 0x26
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2f42:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2f44:	8e a3       	std	Y+38, r24	; 0x26
    2f46:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2f48:	8f 8d       	ldd	r24, Y+31	; 0x1f
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2f4a:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2f4c:	8f 8f       	std	Y+31, r24	; 0x1f
    2f4e:	4f 89       	ldd	r20, Y+23	; 0x17
    2f50:	88 8d       	ldd	r24, Y+24	; 0x18
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2f52:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2f54:	88 8f       	std	Y+24, r24	; 0x18
    2f56:	38 89       	ldd	r19, Y+16	; 0x10
    2f58:	89 89       	ldd	r24, Y+17	; 0x11
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2f5a:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2f5c:	89 8b       	std	Y+17, r24	; 0x11
    2f5e:	29 85       	ldd	r18, Y+9	; 0x09
    2f60:	8a 85       	ldd	r24, Y+10	; 0x0a
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2f62:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2f64:	8a 87       	std	Y+10, r24	; 0x0a
    2f66:	9a 81       	ldd	r25, Y+2	; 0x02
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    2f6a:	8f 78       	andi	r24, 0x8F	; 143
    2f6c:	8b 83       	std	Y+3, r24	; 0x03
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    2f6e:	86 ec       	ldi	r24, 0xC6	; 198
    2f70:	8f a3       	std	Y+39, r24	; 0x27
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    2f72:	1b 87       	std	Y+11, r17	; 0x0b
    2f74:	1c 83       	std	Y+4, r17	; 0x04
    2f76:	83 e0       	ldi	r24, 0x03	; 3
    2f78:	88 a7       	std	Y+40, r24	; 0x28
    2f7a:	89 a3       	std	Y+33, r24	; 0x21
    2f7c:	8a 8f       	std	Y+26, r24	; 0x1a
    2f7e:	8b 8b       	std	Y+19, r24	; 0x13
static inline void adc_set_gain_impedance_mode(struct adc_config *conf,
		enum adc_gainstage_impmode impmode)
{
	switch (impmode) {
	case ADC_GAIN_HIGHIMPEDANCE:
		conf->ctrlb &= ~ADC_IMPMODE_bm;
    2f80:	8c 87       	std	Y+12, r24	; 0x0c
    2f82:	8d 83       	std	Y+5, r24	; 0x05
    2f84:	61 70       	andi	r22, 0x01	; 1
    2f86:	60 64       	ori	r22, 0x40	; 64
    2f88:	6d a3       	std	Y+37, r22	; 0x25
    2f8a:	59 70       	andi	r21, 0x09	; 9
    2f8c:	50 64       	ori	r21, 0x40	; 64
    2f8e:	5e 8f       	std	Y+30, r21	; 0x1e
    2f90:	49 70       	andi	r20, 0x09	; 9
    2f92:	40 64       	ori	r20, 0x40	; 64
    2f94:	4f 8b       	std	Y+23, r20	; 0x17
    2f96:	39 70       	andi	r19, 0x09	; 9
    2f98:	30 64       	ori	r19, 0x40	; 64
    2f9a:	38 8b       	std	Y+16, r19	; 0x10
    2f9c:	21 70       	andi	r18, 0x01	; 1
    2f9e:	20 64       	ori	r18, 0x40	; 64
    2fa0:	29 87       	std	Y+9, r18	; 0x09
    2fa2:	91 70       	andi	r25, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2fa4:	90 64       	ori	r25, 0x40	; 64
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2fa6:	9a 83       	std	Y+2, r25	; 0x02
    2fa8:	1f af       	std	Y+63, r17	; 0x3f
    2faa:	90 e1       	ldi	r25, 0x10	; 16
    2fac:	21 96       	adiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2fae:	9f af       	std	Y+63, r25	; 0x3f
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2fb0:	21 97       	sbiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2fb2:	1b af       	std	Y+59, r17	; 0x3b
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2fb4:	1c ae       	std	Y+60, r1	; 0x3c
    2fb6:	1f ab       	std	Y+55, r17	; 0x37
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2fb8:	98 e1       	ldi	r25, 0x18	; 24
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2fba:	98 af       	std	Y+56, r25	; 0x38
    2fbc:	1b ab       	std	Y+51, r17	; 0x33
    2fbe:	68 94       	set
    2fc0:	88 24       	eor	r8, r8
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2fc2:	83 f8       	bld	r8, 3
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2fc4:	8c aa       	std	Y+52, r8	; 0x34
    2fc6:	1f a7       	std	Y+47, r17	; 0x2f
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2fc8:	00 e2       	ldi	r16, 0x20	; 32
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2fca:	08 ab       	std	Y+48, r16	; 0x30
    2fcc:	1b a7       	std	Y+43, r17	; 0x2b
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    2fce:	98 e2       	ldi	r25, 0x28	; 40
    2fd0:	9c a7       	std	Y+44, r25	; 0x2c
    2fd2:	22 96       	adiw	r28, 0x02	; 2
    2fd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fd6:	22 97       	sbiw	r28, 0x02	; 2
    2fd8:	93 7f       	andi	r25, 0xF3	; 243
    2fda:	22 96       	adiw	r28, 0x02	; 2
    2fdc:	9f af       	std	Y+63, r25	; 0x3f
    2fde:	22 97       	sbiw	r28, 0x02	; 2
    2fe0:	9d ad       	ldd	r25, Y+61	; 0x3d
    2fe2:	93 7f       	andi	r25, 0xF3	; 243
    2fe4:	9d af       	std	Y+61, r25	; 0x3d
    2fe6:	99 ad       	ldd	r25, Y+57	; 0x39
    2fe8:	93 7f       	andi	r25, 0xF3	; 243
    2fea:	99 af       	std	Y+57, r25	; 0x39
    2fec:	9d a9       	ldd	r25, Y+53	; 0x35
    2fee:	93 7f       	andi	r25, 0xF3	; 243
    2ff0:	9d ab       	std	Y+53, r25	; 0x35
    2ff2:	99 a9       	ldd	r25, Y+49	; 0x31
    2ff4:	93 7f       	andi	r25, 0xF3	; 243
    2ff6:	99 ab       	std	Y+49, r25	; 0x31
    2ff8:	9d a5       	ldd	r25, Y+45	; 0x2d
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    2ffa:	93 7f       	andi	r25, 0xF3	; 243
    2ffc:	9d a7       	std	Y+45, r25	; 0x2d
    2ffe:	23 96       	adiw	r28, 0x03	; 3
    3000:	8f af       	std	Y+63, r24	; 0x3f
    3002:	23 97       	sbiw	r28, 0x03	; 3
	adcch_set_pin_scan(&adcch_5v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_3v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_vbat_conf,	0, 3);

	/* Execute the new settings */
	adc_write_configuration(&ADC_5V0,						&adc_5v0_conf);
    3004:	8e af       	std	Y+62, r24	; 0x3e
    3006:	8a af       	std	Y+58, r24	; 0x3a
    3008:	be 01       	movw	r22, r28
    300a:	6c 5d       	subi	r22, 0xDC	; 220
    300c:	7f 4f       	sbci	r23, 0xFF	; 255
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    3012:	0e 94 c0 03 	call	0x780	; 0x780 <adc_write_configuration>
    3016:	ae 01       	movw	r20, r28
    3018:	41 5c       	subi	r20, 0xC1	; 193
    301a:	5f 4f       	sbci	r21, 0xFF	; 255
    301c:	61 e0       	ldi	r22, 0x01	; 1
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_3V0,						&adc_3v0_conf);
    3022:	0e 94 63 04 	call	0x8c6	; 0x8c6 <adcch_write_configuration>
    3026:	be 01       	movw	r22, r28
    3028:	63 5e       	subi	r22, 0xE3	; 227
    302a:	7f 4f       	sbci	r23, 0xFF	; 255
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    3030:	0e 94 c0 03 	call	0x780	; 0x780 <adc_write_configuration>
    3034:	ae 01       	movw	r20, r28
    3036:	45 5c       	subi	r20, 0xC5	; 197
    3038:	5f 4f       	sbci	r21, 0xFF	; 255
    303a:	61 e0       	ldi	r22, 0x01	; 1
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VBAT,						&adc_vbat_conf);
    3040:	0e 94 63 04 	call	0x8c6	; 0x8c6 <adcch_write_configuration>
    3044:	be 01       	movw	r22, r28
    3046:	6a 5e       	subi	r22, 0xEA	; 234
    3048:	7f 4f       	sbci	r23, 0xFF	; 255
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    304e:	0e 94 c0 03 	call	0x780	; 0x780 <adc_write_configuration>
    3052:	ae 01       	movw	r20, r28
    3054:	49 5c       	subi	r20, 0xC9	; 201
    3056:	5f 4f       	sbci	r21, 0xFF	; 255
    3058:	61 e0       	ldi	r22, 0x01	; 1
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VCTCXO,					&adc_vctcxo_conf);
    305e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <adcch_write_configuration>
    3062:	be 01       	movw	r22, r28
    3064:	61 5f       	subi	r22, 0xF1	; 241
    3066:	7f 4f       	sbci	r23, 0xFF	; 255
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    306c:	0e 94 c0 03 	call	0x780	; 0x780 <adc_write_configuration>
    3070:	ae 01       	movw	r20, r28
    3072:	4d 5c       	subi	r20, 0xCD	; 205
    3074:	5f 4f       	sbci	r21, 0xFF	; 255
    3076:	62 e0       	ldi	r22, 0x02	; 2
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC4,					&adc_vctcxo_conf);
    307c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <adcch_write_configuration>
    3080:	be 01       	movw	r22, r28
    3082:	61 5f       	subi	r22, 0xF1	; 241
    3084:	7f 4f       	sbci	r23, 0xFF	; 255
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_vctcxo_conf);
    308a:	0e 94 c0 03 	call	0x780	; 0x780 <adc_write_configuration>
    308e:	ae 01       	movw	r20, r28
    3090:	4d 5c       	subi	r20, 0xCD	; 205
    3092:	5f 4f       	sbci	r21, 0xFF	; 255
    3094:	64 e0       	ldi	r22, 0x04	; 4
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC5,					&adc_vctcxo_conf);
    309a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <adcch_write_configuration>
    309e:	be 01       	movw	r22, r28
    30a0:	61 5f       	subi	r22, 0xF1	; 241
    30a2:	7f 4f       	sbci	r23, 0xFF	; 255
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_vctcxo_conf);
    30a8:	0e 94 c0 03 	call	0x780	; 0x780 <adc_write_configuration>
    30ac:	ae 01       	movw	r20, r28
    30ae:	4d 5c       	subi	r20, 0xCD	; 205
    30b0:	5f 4f       	sbci	r21, 0xFF	; 255
    30b2:	68 e0       	ldi	r22, 0x08	; 8
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	92 e0       	ldi	r25, 0x02	; 2
static void dac_init(void)
{
    struct dac_config dac_io_dac0_conf;
    struct dac_config dac_io_dac1_conf;

    dac_read_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    30b8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <adcch_write_configuration>
    30bc:	be 01       	movw	r22, r28
    30be:	68 5f       	subi	r22, 0xF8	; 248
    30c0:	7f 4f       	sbci	r23, 0xFF	; 255
    30c2:	80 e2       	ldi	r24, 0x20	; 32
    30c4:	93 e0       	ldi	r25, 0x03	; 3
    dac_read_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    30c6:	0e 94 74 05 	call	0xae8	; 0xae8 <dac_read_configuration>
    30ca:	be 01       	movw	r22, r28
    30cc:	6f 5f       	subi	r22, 0xFF	; 255
    30ce:	7f 4f       	sbci	r23, 0xFF	; 255
    30d0:	80 e2       	ldi	r24, 0x20	; 32
    30d2:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    30d4:	0e 94 74 05 	call	0xae8	; 0xae8 <dac_read_configuration>
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    30d8:	1a 87       	std	Y+10, r17	; 0x0a
    30da:	1b 83       	std	Y+3, r17	; 0x03
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    30dc:	84 e0       	ldi	r24, 0x04	; 4
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    30de:	88 87       	std	Y+8, r24	; 0x08
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    30e0:	99 85       	ldd	r25, Y+9	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    30e2:	89 82       	std	Y+1, r8	; 0x01
    30e4:	8a 81       	ldd	r24, Y+2	; 0x02
    30e6:	9c 79       	andi	r25, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    30e8:	91 60       	ori	r25, 0x01	; 1
    30ea:	99 87       	std	Y+9, r25	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    30ec:	96 e0       	ldi	r25, 0x06	; 6
    30ee:	9b 87       	std	Y+11, r25	; 0x0b
    30f0:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    30f2:	82 60       	ori	r24, 0x02	; 2
    #ifdef XMEGA_DAC_VERSION_1
    dac_set_conversion_interval(&dac_io_dac0_conf, 2);
    dac_set_conversion_interval(&dac_io_dac1_conf, 2);
    #endif

    dac_write_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    30f4:	8a 83       	std	Y+2, r24	; 0x02
    30f6:	9c 83       	std	Y+4, r25	; 0x04
    30f8:	be 01       	movw	r22, r28
    30fa:	68 5f       	subi	r22, 0xF8	; 248
    30fc:	7f 4f       	sbci	r23, 0xFF	; 255
    30fe:	80 e2       	ldi	r24, 0x20	; 32
    3100:	93 e0       	ldi	r25, 0x03	; 3
    dac_write_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    3102:	0e 94 18 05 	call	0xa30	; 0xa30 <dac_write_configuration>
    3106:	be 01       	movw	r22, r28
    3108:	6f 5f       	subi	r22, 0xFF	; 255
    310a:	7f 4f       	sbci	r23, 0xFF	; 255
    310c:	80 e2       	ldi	r24, 0x20	; 32
    310e:	93 e0       	ldi	r25, 0x03	; 3
	rtc_set_callback(cb_rtc_alarm);
	evsys_init();
	tc_init();
	adc_init();
	dac_init();
	twi_init();
    3110:	0e 94 18 05 	call	0xa30	; 0xa30 <dac_write_configuration>
	
	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    3114:	0e 94 c6 01 	call	0x38c	; 0x38c <twi_init>
	
	/* All interrupt sources prepared here - IRQ activation */
	irq_initialize_vectors();
    3118:	0e 94 ef 01 	call	0x3de	; 0x3de <board_init>
	cpu_irq_enable();
    311c:	f5 01       	movw	r30, r10
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    311e:	92 82       	std	Z+2, r9	; 0x02
    3120:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3122:	d6 01       	movw	r26, r12
    3124:	8c 91       	ld	r24, X
    3126:	80 7f       	andi	r24, 0xF0	; 240
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3128:	81 60       	ori	r24, 0x01	; 1
    312a:	8c 93       	st	X, r24
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    312c:	f7 01       	movw	r30, r14
    312e:	80 81       	ld	r24, Z
    3130:	80 7f       	andi	r24, 0xF0	; 240
	
	/* Start of sub-modules */
	tc_start();			// All clocks and PWM timers start here
	twi_start();
    3132:	81 60       	ori	r24, 0x01	; 1
    3134:	80 83       	st	Z, r24
}


static void rtc_start(void)
{
	PORTC_OUTSET	= 0b00100000;
    3136:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <twi_start>
	PORTC_DIRSET	= 0b00100000;
    313a:	00 93 45 06 	sts	0x0645, r16	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	
	RTC32_CTRL		= 0;				// RTC32 disabled
    313e:	00 93 41 06 	sts	0x0641, r16	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm);
    3142:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    3146:	e0 e2       	ldi	r30, 0x20	; 32
    3148:	f4 e0       	ldi	r31, 0x04	; 4
    314a:	81 81       	ldd	r24, Z+1	; 0x01
	
	RTC32.PER		= 0x00000003;		// overflowing every 1024 Hz / (PER + 1)
    314c:	80 fd       	sbrc	r24, 0
    314e:	fd cf       	rjmp	.-6      	; 0x314a <main+0x37e>
    3150:	e0 e2       	ldi	r30, 0x20	; 32
    3152:	f4 e0       	ldi	r31, 0x04	; 4
    3154:	83 e0       	ldi	r24, 0x03	; 3
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	a0 e0       	ldi	r26, 0x00	; 0
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	80 87       	std	Z+8, r24	; 0x08
    315e:	91 87       	std	Z+9, r25	; 0x09
	RTC32.CNT		= 0;				// from the beginning
    3160:	a2 87       	std	Z+10, r26	; 0x0a
    3162:	b3 87       	std	Z+11, r27	; 0x0b
    3164:	14 82       	std	Z+4, r1	; 0x04
    3166:	15 82       	std	Z+5, r1	; 0x05
	RTC32.COMP		= 0xffffffff;		// no compare
    3168:	16 82       	std	Z+6, r1	; 0x06
    316a:	17 82       	std	Z+7, r1	; 0x07
    316c:	8f ef       	ldi	r24, 0xFF	; 255
    316e:	9f ef       	ldi	r25, 0xFF	; 255
    3170:	dc 01       	movw	r26, r24
    3172:	84 87       	std	Z+12, r24	; 0x0c
    3174:	95 87       	std	Z+13, r25	; 0x0d
	RTC32.INTCTRL	= 0x01;				// enable overflow interrupt of low priority
    3176:	a6 87       	std	Z+14, r26	; 0x0e
    3178:	b7 87       	std	Z+15, r27	; 0x0f
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm);
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	82 83       	std	Z+2, r24	; 0x02
    317e:	81 81       	ldd	r24, Z+1	; 0x01
	
	RTC32.CTRL		= RTC32_ENABLE_bm;	// RTC32 enabled
    3180:	80 fd       	sbrc	r24, 0
    3182:	fd cf       	rjmp	.-6      	; 0x317e <main+0x3b2>
    3184:	81 e0       	ldi	r24, 0x01	; 1
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm);
    3186:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    318a:	e0 e2       	ldi	r30, 0x20	; 32
    318c:	f4 e0       	ldi	r31, 0x04	; 4
    318e:	81 81       	ldd	r24, Z+1	; 0x01
	
	/* PMIC */
	PMIC_CTRL |= PMIC_LOLVLEN_bm;
    3190:	80 fd       	sbrc	r24, 0
    3192:	fd cf       	rjmp	.-6      	; 0x318e <main+0x3c2>
    3194:	e2 ea       	ldi	r30, 0xA2	; 162
    3196:	f0 e0       	ldi	r31, 0x00	; 0
}


static void usb_init(void)
{
	udc_start();
    3198:	80 81       	ld	r24, Z
    319a:	81 60       	ori	r24, 0x01	; 1
	
	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB
	
	/* The application code */
	runmode = (uint8_t) 1;
    319c:	80 83       	st	Z, r24
    319e:	cf d4       	rcall	.+2462   	; 0x3b3e <udc_start>
    31a0:	81 e0       	ldi	r24, 0x01	; 1
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    31a2:	80 93 a4 22 	sts	0x22A4, r24	; 0x8022a4 <runmode>
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    31a6:	40 e2       	ldi	r20, 0x20	; 32
    31a8:	53 e0       	ldi	r21, 0x03	; 3

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    31aa:	0a e3       	ldi	r16, 0x3A	; 58
    31ac:	13 e0       	ldi	r17, 0x03	; 3
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    31ae:	62 ef       	ldi	r22, 0xF2	; 242
    31b0:	73 e2       	ldi	r23, 0x23	; 35
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    31b2:	28 e4       	ldi	r18, 0x48	; 72
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	da 01       	movw	r26, r20
    31b8:	15 96       	adiw	r26, 0x05	; 5

static void task_dac(void)
{
	static int idx_dacX = 0;
	
	if (dac_channel_is_ready(&DAC_IO_DAC0, DAC_CH0 | DAC_CH1)) {
    31ba:	8c 91       	ld	r24, X
    31bc:	15 97       	sbiw	r26, 0x05	; 5
    31be:	83 70       	andi	r24, 0x03	; 3
		dac_set_channel_value(&DAC_IO_DAC0, DAC_IO_DAC0_CHANNEL, dac_io_dac0_buf[idx_dacX]);
    31c0:	83 30       	cpi	r24, 0x03	; 3
    31c2:	c1 f5       	brne	.+112    	; 0x3234 <main+0x468>
    31c4:	e0 91 a1 22 	lds	r30, 0x22A1	; 0x8022a1 <idx_dacX.6920>
    31c8:	f0 91 a2 22 	lds	r31, 0x22A2	; 0x8022a2 <idx_dacX.6920+0x1>
    31cc:	ee 0f       	add	r30, r30
    31ce:	ff 1f       	adc	r31, r31
    31d0:	ea 52       	subi	r30, 0x2A	; 42
    31d2:	ff 4d       	sbci	r31, 0xDF	; 223
    31d4:	01 90       	ld	r0, Z+

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    31d6:	f0 81       	ld	r31, Z
    31d8:	e0 2d       	mov	r30, r0
	cpu_irq_disable();
    31da:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    31dc:	88 87       	std	Y+8, r24	; 0x08
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    31de:	f8 94       	cli
    31e0:	88 85       	ldd	r24, Y+8	; 0x08
    31e2:	58 96       	adiw	r26, 0x18	; 24
    31e4:	ed 93       	st	X+, r30
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    31e6:	fc 93       	st	X, r31
		dac_set_channel_value(&DAC_IO_DAC1, DAC_IO_DAC1_CHANNEL, dac_io_dac1_buf[idx_dacX]);
    31e8:	59 97       	sbiw	r26, 0x19	; 25
    31ea:	8f bf       	out	0x3f, r24	; 63
    31ec:	e0 91 a1 22 	lds	r30, 0x22A1	; 0x8022a1 <idx_dacX.6920>
    31f0:	f0 91 a2 22 	lds	r31, 0x22A2	; 0x8022a2 <idx_dacX.6920+0x1>
    31f4:	ee 0f       	add	r30, r30
    31f6:	ff 1f       	adc	r31, r31
    31f8:	ea 52       	subi	r30, 0x2A	; 42
    31fa:	ff 4d       	sbci	r31, 0xDF	; 223
    31fc:	01 90       	ld	r0, Z+

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    31fe:	f0 81       	ld	r31, Z
    3200:	e0 2d       	mov	r30, r0
	cpu_irq_disable();
    3202:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    3204:	89 83       	std	Y+1, r24	; 0x01
    3206:	f8 94       	cli
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	d8 01       	movw	r26, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    320c:	ed 93       	st	X+, r30
		
		idx_dacX++;
		idx_dacX %= DAC_NR_OF_SAMPLES;
    320e:	fc 93       	st	X, r31
    3210:	8f bf       	out	0x3f, r24	; 63
    3212:	80 91 a1 22 	lds	r24, 0x22A1	; 0x8022a1 <idx_dacX.6920>
    3216:	90 91 a2 22 	lds	r25, 0x22A2	; 0x8022a2 <idx_dacX.6920+0x1>
    321a:	01 96       	adiw	r24, 0x01	; 1
    321c:	8f 71       	andi	r24, 0x1F	; 31
    321e:	90 78       	andi	r25, 0x80	; 128
    3220:	99 23       	and	r25, r25
    3222:	24 f4       	brge	.+8      	; 0x322c <main+0x460>
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	80 6e       	ori	r24, 0xE0	; 224
    3228:	9f 6f       	ori	r25, 0xFF	; 255
    322a:	01 96       	adiw	r24, 0x01	; 1
    322c:	80 93 a1 22 	sts	0x22A1, r24	; 0x8022a1 <idx_dacX.6920>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    3230:	90 93 a2 22 	sts	0x22A2, r25	; 0x8022a2 <idx_dacX.6920+0x1>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3234:	f8 94       	cli
    3236:	fb 01       	movw	r30, r22
    3238:	80 81       	ld	r24, Z
    323a:	81 11       	cpse	r24, r1
    323c:	09 c0       	rjmp	.+18     	; 0x3250 <main+0x484>
    323e:	a3 ef       	ldi	r26, 0xF3	; 243
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3240:	b3 e2       	ldi	r27, 0x23	; 35

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3242:	e0 e0       	ldi	r30, 0x00	; 0
    3244:	ef 5f       	subi	r30, 0xFF	; 255
    3246:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3248:	88 23       	and	r24, r24
    324a:	e1 f3       	breq	.-8      	; 0x3244 <main+0x478>
		cpu_irq_enable();
    324c:	e1 11       	cpse	r30, r1
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <main+0x488>
    3250:	78 94       	sei
    3252:	12 c0       	rjmp	.+36     	; 0x3278 <main+0x4ac>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    3254:	d9 01       	movw	r26, r18
    3256:	8c 91       	ld	r24, X
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	ef 5e       	subi	r30, 0xEF	; 239
    325c:	ff 4d       	sbci	r31, 0xDF	; 223
    325e:	81 7f       	andi	r24, 0xF1	; 241
    3260:	90 81       	ld	r25, Z
	sleep_enable();
    3262:	89 2b       	or	r24, r25
    3264:	8c 93       	st	X, r24
    3266:	8c 91       	ld	r24, X

	cpu_irq_enable();
    3268:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    326a:	8c 93       	st	X, r24

	sleep_disable();
    326c:	78 94       	sei
    326e:	88 95       	sleep
    3270:	f9 01       	movw	r30, r18
    3272:	80 81       	ld	r24, Z
	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB
	
	/* The application code */
	runmode = (uint8_t) 1;
    while (runmode) {
    3274:	8e 7f       	andi	r24, 0xFE	; 254
    3276:	80 83       	st	Z, r24
    3278:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <runmode>
		task();
		sleepmgr_enter_sleep();
    }
	
	cpu_irq_disable();
    327c:	81 11       	cpse	r24, r1
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    327e:	9b cf       	rjmp	.-202    	; 0x31b6 <main+0x3ea>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3280:	f8 94       	cli
    3282:	f8 94       	cli
    3284:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <sleepmgr_locks>
    3288:	81 11       	cpse	r24, r1
    328a:	09 c0       	rjmp	.+18     	; 0x329e <main+0x4d2>
    328c:	a3 ef       	ldi	r26, 0xF3	; 243
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    328e:	b3 e2       	ldi	r27, 0x23	; 35

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3290:	e0 e0       	ldi	r30, 0x00	; 0
    3292:	ef 5f       	subi	r30, 0xFF	; 255
    3294:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3296:	88 23       	and	r24, r24
    3298:	e1 f3       	breq	.-8      	; 0x3292 <main+0x4c6>
		cpu_irq_enable();
    329a:	e1 11       	cpse	r30, r1
    329c:	02 c0       	rjmp	.+4      	; 0x32a2 <main+0x4d6>
    329e:	78 94       	sei
    32a0:	13 c0       	rjmp	.+38     	; 0x32c8 <main+0x4fc>
    32a2:	a8 e4       	ldi	r26, 0x48	; 72

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	8c 91       	ld	r24, X
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	ef 5e       	subi	r30, 0xEF	; 239
    32ac:	ff 4d       	sbci	r31, 0xDF	; 223
    32ae:	98 2f       	mov	r25, r24
    32b0:	91 7f       	andi	r25, 0xF1	; 241
    32b2:	80 81       	ld	r24, Z
	sleep_enable();
    32b4:	89 2b       	or	r24, r25
    32b6:	8c 93       	st	X, r24
    32b8:	8c 91       	ld	r24, X

	cpu_irq_enable();
    32ba:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    32bc:	8c 93       	st	X, r24

	sleep_disable();
    32be:	78 94       	sei
    32c0:	88 95       	sleep
    32c2:	8c 91       	ld	r24, X
	sleepmgr_enter_sleep();
	
	return retcode;
}
    32c4:	8e 7f       	andi	r24, 0xFE	; 254
    32c6:	8c 93       	st	X, r24
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	ce 5b       	subi	r28, 0xBE	; 190
    32ce:	df 4f       	sbci	r29, 0xFF	; 255
    32d0:	cd bf       	out	0x3d, r28	; 61
    32d2:	de bf       	out	0x3e, r29	; 62
    32d4:	df 91       	pop	r29
    32d6:	cf 91       	pop	r28
    32d8:	1f 91       	pop	r17
    32da:	0f 91       	pop	r16
    32dc:	ff 90       	pop	r15
    32de:	ef 90       	pop	r14
    32e0:	df 90       	pop	r13
    32e2:	cf 90       	pop	r12
    32e4:	bf 90       	pop	r11
    32e6:	af 90       	pop	r10
    32e8:	9f 90       	pop	r9
    32ea:	8f 90       	pop	r8
    32ec:	08 95       	ret

000032ee <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    32ee:	cf 93       	push	r28
    32f0:	df 93       	push	r29
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
    32f6:	28 97       	sbiw	r28, 0x08	; 8
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    32fc:	8f ef       	ldi	r24, 0xFF	; 255
    32fe:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    3302:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    3306:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    330a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    330e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    3312:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    3316:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    331a:	61 e0       	ldi	r22, 0x01	; 1
    331c:	81 e4       	ldi	r24, 0x41	; 65
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	28 d7       	rcall	.+3664   	; 0x4172 <ccp_write_io>
    3322:	6c e1       	ldi	r22, 0x1C	; 28
    3324:	70 e0       	ldi	r23, 0x00	; 0
    3326:	82 e0       	ldi	r24, 0x02	; 2
    3328:	1a d7       	rcall	.+3636   	; 0x415e <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    332a:	8a 83       	std	Y+2, r24	; 0x02
    332c:	6d e1       	ldi	r22, 0x1D	; 29
    332e:	70 e0       	ldi	r23, 0x00	; 0
    3330:	82 e0       	ldi	r24, 0x02	; 2
    3332:	15 d7       	rcall	.+3626   	; 0x415e <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    3334:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	9a 81       	ldd	r25, Y+2	; 0x02
    333a:	01 96       	adiw	r24, 0x01	; 1
    333c:	21 f4       	brne	.+8      	; 0x3346 <sysclk_init+0x58>
		cal = 0x2340;
    333e:	80 e4       	ldi	r24, 0x40	; 64
    3340:	93 e2       	ldi	r25, 0x23	; 35
    3342:	89 83       	std	Y+1, r24	; 0x01
    3344:	9a 83       	std	Y+2, r25	; 0x02
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	9a 81       	ldd	r25, Y+2	; 0x02
    334a:	8b 83       	std	Y+3, r24	; 0x03
    334c:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    334e:	e0 e6       	ldi	r30, 0x60	; 96
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    3354:	8c 81       	ldd	r24, Y+4	; 0x04
    3356:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    3358:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    335c:	84 fd       	sbrc	r24, 4
    335e:	21 c0       	rjmp	.+66     	; 0x33a2 <sysclk_init+0xb4>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3360:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    3364:	83 fd       	sbrc	r24, 3
    3366:	0e c0       	rjmp	.+28     	; 0x3384 <sysclk_init+0x96>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    3368:	e0 e5       	ldi	r30, 0x50	; 80
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    336e:	8f b7       	in	r24, 0x3f	; 63
    3370:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    3372:	f8 94       	cli
	return flags;
    3374:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3376:	80 81       	ld	r24, Z
    3378:	88 60       	ori	r24, 0x08	; 8
    337a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    337c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    337e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    3380:	83 ff       	sbrs	r24, 3
    3382:	fd cf       	rjmp	.-6      	; 0x337e <sysclk_init+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3384:	8f b7       	in	r24, 0x3f	; 63
    3386:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    3388:	f8 94       	cli
	return flags;
    338a:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    338c:	e0 e5       	ldi	r30, 0x50	; 80
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	83 ec       	ldi	r24, 0xC3	; 195
    3392:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    3394:	80 81       	ld	r24, Z
    3396:	80 61       	ori	r24, 0x10	; 16
    3398:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    339a:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    339c:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    339e:	84 ff       	sbrs	r24, 4
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    33a0:	fd cf       	rjmp	.-6      	; 0x339c <sysclk_init+0xae>
    33a2:	64 e0       	ldi	r22, 0x04	; 4
    33a4:	80 e4       	ldi	r24, 0x40	; 64
    33a6:	90 e0       	ldi	r25, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    33a8:	e4 d6       	rcall	.+3528   	; 0x4172 <ccp_write_io>
    33aa:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    33ac:	88 87       	std	Y+8, r24	; 0x08
	return flags;
    33ae:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    33b0:	98 85       	ldd	r25, Y+8	; 0x08
    33b2:	e0 e5       	ldi	r30, 0x50	; 80
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	80 81       	ld	r24, Z
    33b8:	8e 7f       	andi	r24, 0xFE	; 254
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    33ba:	80 83       	st	Z, r24

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    33bc:	9f bf       	out	0x3f, r25	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    33be:	12 82       	std	Z+2, r1	; 0x02
    33c0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    33c2:	8f 83       	std	Y+7, r24	; 0x07
	return flags;
    33c4:	f8 94       	cli
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    33c6:	9f 81       	ldd	r25, Y+7	; 0x07
    33c8:	80 81       	ld	r24, Z
    33ca:	88 60       	ori	r24, 0x08	; 8
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    33cc:	80 83       	st	Z, r24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    33ce:	9f bf       	out	0x3f, r25	; 63
    33d0:	81 81       	ldd	r24, Z+1	; 0x01
    33d2:	83 ff       	sbrs	r24, 3
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    33d4:	fd cf       	rjmp	.-6      	; 0x33d0 <sysclk_init+0xe2>
    33d6:	8b e0       	ldi	r24, 0x0B	; 11
    33d8:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    33dc:	28 96       	adiw	r28, 0x08	; 8
    33de:	cd bf       	out	0x3d, r28	; 61
    33e0:	de bf       	out	0x3e, r29	; 62
    33e2:	df 91       	pop	r29
    33e4:	cf 91       	pop	r28
    33e6:	08 95       	ret

000033e8 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
    33ec:	1f 92       	push	r1
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    33f2:	9f b7       	in	r25, 0x3f	; 63
    33f4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    33f6:	f8 94       	cli
	return flags;
    33f8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    33fa:	e8 2f       	mov	r30, r24
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	e0 59       	subi	r30, 0x90	; 144
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	60 95       	com	r22
    3404:	80 81       	ld	r24, Z
    3406:	68 23       	and	r22, r24
    3408:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    340a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    340c:	0f 90       	pop	r0
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	08 95       	ret

00003414 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    3414:	cf 93       	push	r28
    3416:	df 93       	push	r29
    3418:	1f 92       	push	r1
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    341e:	9f b7       	in	r25, 0x3f	; 63
    3420:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    3422:	f8 94       	cli
	return flags;
    3424:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    3426:	e8 2f       	mov	r30, r24
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	e0 59       	subi	r30, 0x90	; 144
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	80 81       	ld	r24, Z
    3430:	68 2b       	or	r22, r24
    3432:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3434:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    3436:	0f 90       	pop	r0
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	08 95       	ret

0000343e <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    343e:	cf 93       	push	r28
    3440:	df 93       	push	r29
    3442:	1f 92       	push	r1
    3444:	1f 92       	push	r1
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    344a:	86 30       	cpi	r24, 0x06	; 6
    344c:	11 f0       	breq	.+4      	; 0x3452 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    344e:	60 e0       	ldi	r22, 0x00	; 0
    3450:	01 c0       	rjmp	.+2      	; 0x3454 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    3452:	68 e1       	ldi	r22, 0x18	; 24
    3454:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    3458:	81 fd       	sbrc	r24, 1
    345a:	2a c0       	rjmp	.+84     	; 0x34b0 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    345c:	8f b7       	in	r24, 0x3f	; 63
    345e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3460:	f8 94       	cli
	return flags;
    3462:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3464:	e0 e5       	ldi	r30, 0x50	; 80
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	80 81       	ld	r24, Z
    346a:	82 60       	ori	r24, 0x02	; 2
    346c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    346e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3470:	81 81       	ldd	r24, Z+1	; 0x01
    3472:	81 ff       	sbrs	r24, 1
    3474:	fd cf       	rjmp	.-6      	; 0x3470 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3476:	8f b7       	in	r24, 0x3f	; 63
    3478:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    347a:	f8 94       	cli
	return flags;
    347c:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    347e:	a0 e5       	ldi	r26, 0x50	; 80
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	16 96       	adiw	r26, 0x06	; 6
    3484:	8c 91       	ld	r24, X
    3486:	16 97       	sbiw	r26, 0x06	; 6
    3488:	89 7f       	andi	r24, 0xF9	; 249
    348a:	16 96       	adiw	r26, 0x06	; 6
    348c:	8c 93       	st	X, r24
    348e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    3490:	e0 e6       	ldi	r30, 0x60	; 96
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 e8       	ldi	r24, 0x80	; 128
    3496:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    3498:	8b eb       	ldi	r24, 0xBB	; 187
    349a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    349c:	16 96       	adiw	r26, 0x06	; 6
    349e:	8c 91       	ld	r24, X
    34a0:	16 97       	sbiw	r26, 0x06	; 6
    34a2:	84 60       	ori	r24, 0x04	; 4
    34a4:	16 96       	adiw	r26, 0x06	; 6
    34a6:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    34a8:	80 81       	ld	r24, Z
    34aa:	81 60       	ori	r24, 0x01	; 1
    34ac:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    34ae:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    34b0:	63 60       	ori	r22, 0x03	; 3
    34b2:	84 e4       	ldi	r24, 0x44	; 68
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	5d d6       	rcall	.+3258   	; 0x4172 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    34b8:	60 e4       	ldi	r22, 0x40	; 64
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	95 df       	rcall	.-214    	; 0x33e8 <sysclk_enable_module>
}
    34be:	0f 90       	pop	r0
    34c0:	0f 90       	pop	r0
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	08 95       	ret

000034c8 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
    34c8:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udi_cdc_nb_comm_enabled>
    34cc:	81 50       	subi	r24, 0x01	; 1
    34ce:	80 93 ba 23 	sts	0x23BA, r24	; 0x8023ba <udi_cdc_nb_comm_enabled>
    34d2:	08 95       	ret

000034d4 <udi_cdc_data_setup>:
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	08 95       	ret

000034d8 <udi_cdc_getsetting>:
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	08 95       	ret

000034dc <udi_cdc_line_coding_received>:
    34dc:	68 ec       	ldi	r22, 0xC8	; 200
    34de:	73 e2       	ldi	r23, 0x23	; 35
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	6f cc       	rjmp	.-1826   	; 0x2dc2 <usb_callback_config>
    34e4:	08 95       	ret

000034e6 <udi_cdc_comm_enable>:
    34e6:	10 92 ba 23 	sts	0x23BA, r1	; 0x8023ba <udi_cdc_nb_comm_enabled>
    34ea:	10 92 c6 23 	sts	0x23C6, r1	; 0x8023c6 <udi_cdc_state>
    34ee:	10 92 c7 23 	sts	0x23C7, r1	; 0x8023c7 <udi_cdc_state+0x1>
    34f2:	ec eb       	ldi	r30, 0xBC	; 188
    34f4:	f3 e2       	ldi	r31, 0x23	; 35
    34f6:	81 ea       	ldi	r24, 0xA1	; 161
    34f8:	80 83       	st	Z, r24
    34fa:	80 e2       	ldi	r24, 0x20	; 32
    34fc:	81 83       	std	Z+1, r24	; 0x01
    34fe:	12 82       	std	Z+2, r1	; 0x02
    3500:	13 82       	std	Z+3, r1	; 0x03
    3502:	14 82       	std	Z+4, r1	; 0x04
    3504:	15 82       	std	Z+5, r1	; 0x05
    3506:	82 e0       	ldi	r24, 0x02	; 2
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	86 83       	std	Z+6, r24	; 0x06
    350c:	97 83       	std	Z+7, r25	; 0x07
    350e:	10 86       	std	Z+8, r1	; 0x08
    3510:	11 86       	std	Z+9, r1	; 0x09
    3512:	e8 ec       	ldi	r30, 0xC8	; 200
    3514:	f3 e2       	ldi	r31, 0x23	; 35
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	92 ec       	ldi	r25, 0xC2	; 194
    351a:	a1 e0       	ldi	r26, 0x01	; 1
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	80 83       	st	Z, r24
    3520:	91 83       	std	Z+1, r25	; 0x01
    3522:	a2 83       	std	Z+2, r26	; 0x02
    3524:	b3 83       	std	Z+3, r27	; 0x03
    3526:	14 82       	std	Z+4, r1	; 0x04
    3528:	15 82       	std	Z+5, r1	; 0x05
    352a:	88 e0       	ldi	r24, 0x08	; 8
    352c:	86 83       	std	Z+6, r24	; 0x06
    352e:	bf 01       	movw	r22, r30
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	47 dc       	rcall	.-1906   	; 0x2dc2 <usb_callback_config>
    3534:	3f dc       	rcall	.-1922   	; 0x2db4 <usb_callback_cdc_enable>
    3536:	88 23       	and	r24, r24
    3538:	29 f0       	breq	.+10     	; 0x3544 <udi_cdc_comm_enable+0x5e>
    353a:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udi_cdc_nb_comm_enabled>
    353e:	9f 5f       	subi	r25, 0xFF	; 255
    3540:	90 93 ba 23 	sts	0x23BA, r25	; 0x8023ba <udi_cdc_nb_comm_enabled>
    3544:	08 95       	ret

00003546 <udi_cdc_tx_send>:
    3546:	ff 92       	push	r15
    3548:	0f 93       	push	r16
    354a:	1f 93       	push	r17
    354c:	cf 93       	push	r28
    354e:	df 93       	push	r29
    3550:	1f 92       	push	r1
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <udi_cdc_tx_trans_ongoing>
    355a:	81 11       	cpse	r24, r1
    355c:	9f c0       	rjmp	.+318    	; 0x369c <udi_cdc_tx_send+0x156>
    355e:	0e 94 49 11 	call	0x2292	; 0x2292 <udd_is_high_speed>
    3562:	88 23       	and	r24, r24
    3564:	51 f0       	breq	.+20     	; 0x357a <udi_cdc_tx_send+0x34>
    3566:	00 91 a9 22 	lds	r16, 0x22A9	; 0x8022a9 <udi_cdc_tx_sof_num>
    356a:	10 91 aa 22 	lds	r17, 0x22AA	; 0x8022aa <udi_cdc_tx_sof_num+0x1>
    356e:	0e 94 56 11 	call	0x22ac	; 0x22ac <udd_get_micro_frame_number>
    3572:	08 17       	cp	r16, r24
    3574:	19 07       	cpc	r17, r25
    3576:	59 f4       	brne	.+22     	; 0x358e <udi_cdc_tx_send+0x48>
    3578:	91 c0       	rjmp	.+290    	; 0x369c <udi_cdc_tx_send+0x156>
    357a:	00 91 a9 22 	lds	r16, 0x22A9	; 0x8022a9 <udi_cdc_tx_sof_num>
    357e:	10 91 aa 22 	lds	r17, 0x22AA	; 0x8022aa <udi_cdc_tx_sof_num+0x1>
    3582:	0e 94 51 11 	call	0x22a2	; 0x22a2 <udd_get_frame_number>
    3586:	08 17       	cp	r16, r24
    3588:	19 07       	cpc	r17, r25
    358a:	09 f4       	brne	.+2      	; 0x358e <udi_cdc_tx_send+0x48>
    358c:	87 c0       	rjmp	.+270    	; 0x369c <udi_cdc_tx_send+0x156>
    358e:	8f b7       	in	r24, 0x3f	; 63
    3590:	89 83       	std	Y+1, r24	; 0x01
    3592:	f8 94       	cli
    3594:	19 81       	ldd	r17, Y+1	; 0x01
    3596:	00 91 ab 22 	lds	r16, 0x22AB	; 0x8022ab <udi_cdc_tx_buf_sel>
    359a:	e0 2f       	mov	r30, r16
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	ee 0f       	add	r30, r30
    35a0:	ff 1f       	adc	r31, r31
    35a2:	e4 55       	subi	r30, 0x54	; 84
    35a4:	fd 4d       	sbci	r31, 0xDD	; 221
    35a6:	80 81       	ld	r24, Z
    35a8:	91 81       	ldd	r25, Z+1	; 0x01
    35aa:	89 2b       	or	r24, r25
    35ac:	09 f5       	brne	.+66     	; 0x35f0 <udi_cdc_tx_send+0xaa>
    35ae:	80 91 a5 22 	lds	r24, 0x22A5	; 0x8022a5 <sof_zlp_counter.5059>
    35b2:	90 91 a6 22 	lds	r25, 0x22A6	; 0x8022a6 <sof_zlp_counter.5059+0x1>
    35b6:	01 96       	adiw	r24, 0x01	; 1
    35b8:	80 93 a5 22 	sts	0x22A5, r24	; 0x8022a5 <sof_zlp_counter.5059>
    35bc:	90 93 a6 22 	sts	0x22A6, r25	; 0x8022a6 <sof_zlp_counter.5059+0x1>
    35c0:	0e 94 49 11 	call	0x2292	; 0x2292 <udd_is_high_speed>
    35c4:	81 11       	cpse	r24, r1
    35c6:	07 c0       	rjmp	.+14     	; 0x35d6 <udi_cdc_tx_send+0x90>
    35c8:	80 91 a5 22 	lds	r24, 0x22A5	; 0x8022a5 <sof_zlp_counter.5059>
    35cc:	90 91 a6 22 	lds	r25, 0x22A6	; 0x8022a6 <sof_zlp_counter.5059+0x1>
    35d0:	84 36       	cpi	r24, 0x64	; 100
    35d2:	91 05       	cpc	r25, r1
    35d4:	58 f0       	brcs	.+22     	; 0x35ec <udi_cdc_tx_send+0xa6>
    35d6:	0e 94 49 11 	call	0x2292	; 0x2292 <udd_is_high_speed>
    35da:	88 23       	and	r24, r24
    35dc:	49 f0       	breq	.+18     	; 0x35f0 <udi_cdc_tx_send+0xaa>
    35de:	80 91 a5 22 	lds	r24, 0x22A5	; 0x8022a5 <sof_zlp_counter.5059>
    35e2:	90 91 a6 22 	lds	r25, 0x22A6	; 0x8022a6 <sof_zlp_counter.5059+0x1>
    35e6:	80 32       	cpi	r24, 0x20	; 32
    35e8:	93 40       	sbci	r25, 0x03	; 3
    35ea:	10 f4       	brcc	.+4      	; 0x35f0 <udi_cdc_tx_send+0xaa>
    35ec:	1f bf       	out	0x3f, r17	; 63
    35ee:	56 c0       	rjmp	.+172    	; 0x369c <udi_cdc_tx_send+0x156>
    35f0:	10 92 a5 22 	sts	0x22A5, r1	; 0x8022a5 <sof_zlp_counter.5059>
    35f4:	10 92 a6 22 	sts	0x22A6, r1	; 0x8022a6 <sof_zlp_counter.5059+0x1>
    35f8:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <udi_cdc_tx_both_buf_to_send>
    35fc:	81 11       	cpse	r24, r1
    35fe:	06 c0       	rjmp	.+12     	; 0x360c <udi_cdc_tx_send+0xc6>
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	01 11       	cpse	r16, r1
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	80 93 ab 22 	sts	0x22AB, r24	; 0x8022ab <udi_cdc_tx_buf_sel>
    360a:	04 c0       	rjmp	.+8      	; 0x3614 <udi_cdc_tx_send+0xce>
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	01 11       	cpse	r16, r1
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	08 2f       	mov	r16, r24
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	80 93 a8 22 	sts	0x22A8, r24	; 0x8022a8 <udi_cdc_tx_trans_ongoing>
    361a:	1f bf       	out	0x3f, r17	; 63
    361c:	10 e0       	ldi	r17, 0x00	; 0
    361e:	f8 01       	movw	r30, r16
    3620:	ee 0f       	add	r30, r30
    3622:	ff 1f       	adc	r31, r31
    3624:	e4 55       	subi	r30, 0x54	; 84
    3626:	fd 4d       	sbci	r31, 0xDD	; 221
    3628:	80 81       	ld	r24, Z
    362a:	91 81       	ldd	r25, Z+1	; 0x01
    362c:	ff 24       	eor	r15, r15
    362e:	f3 94       	inc	r15
    3630:	80 34       	cpi	r24, 0x40	; 64
    3632:	91 05       	cpc	r25, r1
    3634:	09 f4       	brne	.+2      	; 0x3638 <udi_cdc_tx_send+0xf2>
    3636:	f1 2c       	mov	r15, r1
    3638:	80 34       	cpi	r24, 0x40	; 64
    363a:	91 05       	cpc	r25, r1
    363c:	91 f0       	breq	.+36     	; 0x3662 <udi_cdc_tx_send+0x11c>
    363e:	0e 94 49 11 	call	0x2292	; 0x2292 <udd_is_high_speed>
    3642:	88 23       	and	r24, r24
    3644:	39 f0       	breq	.+14     	; 0x3654 <udi_cdc_tx_send+0x10e>
    3646:	0e 94 56 11 	call	0x22ac	; 0x22ac <udd_get_micro_frame_number>
    364a:	80 93 a9 22 	sts	0x22A9, r24	; 0x8022a9 <udi_cdc_tx_sof_num>
    364e:	90 93 aa 22 	sts	0x22AA, r25	; 0x8022aa <udi_cdc_tx_sof_num+0x1>
    3652:	0b c0       	rjmp	.+22     	; 0x366a <udi_cdc_tx_send+0x124>
    3654:	0e 94 51 11 	call	0x22a2	; 0x22a2 <udd_get_frame_number>
    3658:	80 93 a9 22 	sts	0x22A9, r24	; 0x8022a9 <udi_cdc_tx_sof_num>
    365c:	90 93 aa 22 	sts	0x22AA, r25	; 0x8022aa <udi_cdc_tx_sof_num+0x1>
    3660:	04 c0       	rjmp	.+8      	; 0x366a <udi_cdc_tx_send+0x124>
    3662:	10 92 a9 22 	sts	0x22A9, r1	; 0x8022a9 <udi_cdc_tx_sof_num>
    3666:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <udi_cdc_tx_sof_num+0x1>
    366a:	f8 01       	movw	r30, r16
    366c:	ee 0f       	add	r30, r30
    366e:	ff 1f       	adc	r31, r31
    3670:	e4 55       	subi	r30, 0x54	; 84
    3672:	fd 4d       	sbci	r31, 0xDD	; 221
    3674:	20 81       	ld	r18, Z
    3676:	31 81       	ldd	r19, Z+1	; 0x01
    3678:	a8 01       	movw	r20, r16
    367a:	00 24       	eor	r0, r0
    367c:	56 95       	lsr	r21
    367e:	47 95       	ror	r20
    3680:	07 94       	ror	r0
    3682:	56 95       	lsr	r21
    3684:	47 95       	ror	r20
    3686:	07 94       	ror	r0
    3688:	54 2f       	mov	r21, r20
    368a:	40 2d       	mov	r20, r0
    368c:	40 55       	subi	r20, 0x50	; 80
    368e:	5d 4d       	sbci	r21, 0xDD	; 221
    3690:	08 e5       	ldi	r16, 0x58	; 88
    3692:	1b e1       	ldi	r17, 0x1B	; 27
    3694:	6f 2d       	mov	r22, r15
    3696:	81 e8       	ldi	r24, 0x81	; 129
    3698:	0e 94 3a 12 	call	0x2474	; 0x2474 <udd_ep_run>
    369c:	0f 90       	pop	r0
    369e:	df 91       	pop	r29
    36a0:	cf 91       	pop	r28
    36a2:	1f 91       	pop	r17
    36a4:	0f 91       	pop	r16
    36a6:	ff 90       	pop	r15
    36a8:	08 95       	ret

000036aa <udi_cdc_data_sof_notify>:
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	4c cf       	rjmp	.-360    	; 0x3546 <udi_cdc_tx_send>
    36ae:	08 95       	ret

000036b0 <udi_cdc_data_sent>:
    36b0:	81 11       	cpse	r24, r1
    36b2:	19 c0       	rjmp	.+50     	; 0x36e6 <udi_cdc_data_sent+0x36>
    36b4:	20 91 ab 22 	lds	r18, 0x22AB	; 0x8022ab <udi_cdc_tx_buf_sel>
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	22 23       	and	r18, r18
    36be:	11 f0       	breq	.+4      	; 0x36c4 <udi_cdc_data_sent+0x14>
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	88 0f       	add	r24, r24
    36c6:	99 1f       	adc	r25, r25
    36c8:	fc 01       	movw	r30, r24
    36ca:	e4 55       	subi	r30, 0x54	; 84
    36cc:	fd 4d       	sbci	r31, 0xDD	; 221
    36ce:	10 82       	st	Z, r1
    36d0:	11 82       	std	Z+1, r1	; 0x01
    36d2:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <udi_cdc_tx_both_buf_to_send>
    36d6:	10 92 a8 22 	sts	0x22A8, r1	; 0x8022a8 <udi_cdc_tx_trans_ongoing>
    36da:	67 2b       	or	r22, r23
    36dc:	11 f0       	breq	.+4      	; 0x36e2 <udi_cdc_data_sent+0x32>
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	74 db       	rcall	.-2328   	; 0x2dca <usb_callback_tx_empty_notify>
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	30 cf       	rjmp	.-416    	; 0x3546 <udi_cdc_tx_send>
    36e6:	08 95       	ret

000036e8 <udi_cdc_data_disable>:
    36e8:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udi_cdc_nb_data_enabled>
    36ec:	81 50       	subi	r24, 0x01	; 1
    36ee:	80 93 b9 23 	sts	0x23B9, r24	; 0x8023b9 <udi_cdc_nb_data_enabled>
    36f2:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udi_cdc_nb_data_enabled>
    36f6:	62 db       	rcall	.-2364   	; 0x2dbc <usb_callback_cdc_disable>
    36f8:	10 92 b8 23 	sts	0x23B8, r1	; 0x8023b8 <udi_cdc_data_running>
    36fc:	08 95       	ret

000036fe <udi_cdc_comm_setup>:
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udd_g_ctrlreq>
    3706:	88 23       	and	r24, r24
    3708:	e4 f4       	brge	.+56     	; 0x3742 <udi_cdc_comm_setup+0x44>
    370a:	80 76       	andi	r24, 0x60	; 96
    370c:	80 32       	cpi	r24, 0x20	; 32
    370e:	09 f0       	breq	.+2      	; 0x3712 <udi_cdc_comm_setup+0x14>
    3710:	47 c0       	rjmp	.+142    	; 0x37a0 <udi_cdc_comm_setup+0xa2>
    3712:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    3716:	81 32       	cpi	r24, 0x21	; 33
    3718:	09 f0       	breq	.+2      	; 0x371c <udi_cdc_comm_setup+0x1e>
    371a:	44 c0       	rjmp	.+136    	; 0x37a4 <udi_cdc_comm_setup+0xa6>
    371c:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    3720:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    3724:	07 97       	sbiw	r24, 0x07	; 7
    3726:	09 f0       	breq	.+2      	; 0x372a <udi_cdc_comm_setup+0x2c>
    3728:	3f c0       	rjmp	.+126    	; 0x37a8 <udi_cdc_comm_setup+0xaa>
    372a:	e2 ee       	ldi	r30, 0xE2	; 226
    372c:	f3 e2       	ldi	r31, 0x23	; 35
    372e:	88 ec       	ldi	r24, 0xC8	; 200
    3730:	93 e2       	ldi	r25, 0x23	; 35
    3732:	80 87       	std	Z+8, r24	; 0x08
    3734:	91 87       	std	Z+9, r25	; 0x09
    3736:	87 e0       	ldi	r24, 0x07	; 7
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	82 87       	std	Z+10, r24	; 0x0a
    373c:	93 87       	std	Z+11, r25	; 0x0b
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	3a c0       	rjmp	.+116    	; 0x37b6 <udi_cdc_comm_setup+0xb8>
    3742:	80 76       	andi	r24, 0x60	; 96
    3744:	80 32       	cpi	r24, 0x20	; 32
    3746:	91 f5       	brne	.+100    	; 0x37ac <udi_cdc_comm_setup+0xae>
    3748:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    374c:	80 32       	cpi	r24, 0x20	; 32
    374e:	19 f0       	breq	.+6      	; 0x3756 <udi_cdc_comm_setup+0x58>
    3750:	82 32       	cpi	r24, 0x22	; 34
    3752:	b9 f0       	breq	.+46     	; 0x3782 <udi_cdc_comm_setup+0x84>
    3754:	2d c0       	rjmp	.+90     	; 0x37b0 <udi_cdc_comm_setup+0xb2>
    3756:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    375a:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    375e:	07 97       	sbiw	r24, 0x07	; 7
    3760:	49 f5       	brne	.+82     	; 0x37b4 <udi_cdc_comm_setup+0xb6>
    3762:	e2 ee       	ldi	r30, 0xE2	; 226
    3764:	f3 e2       	ldi	r31, 0x23	; 35
    3766:	8e e6       	ldi	r24, 0x6E	; 110
    3768:	9a e1       	ldi	r25, 0x1A	; 26
    376a:	84 87       	std	Z+12, r24	; 0x0c
    376c:	95 87       	std	Z+13, r25	; 0x0d
    376e:	88 ec       	ldi	r24, 0xC8	; 200
    3770:	93 e2       	ldi	r25, 0x23	; 35
    3772:	80 87       	std	Z+8, r24	; 0x08
    3774:	91 87       	std	Z+9, r25	; 0x09
    3776:	87 e0       	ldi	r24, 0x07	; 7
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	82 87       	std	Z+10, r24	; 0x0a
    377c:	93 87       	std	Z+11, r25	; 0x0b
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	1a c0       	rjmp	.+52     	; 0x37b6 <udi_cdc_comm_setup+0xb8>
    3782:	c2 ee       	ldi	r28, 0xE2	; 226
    3784:	d3 e2       	ldi	r29, 0x23	; 35
    3786:	6a 81       	ldd	r22, Y+2	; 0x02
    3788:	61 70       	andi	r22, 0x01	; 1
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	1b db       	rcall	.-2506   	; 0x2dc4 <usb_callback_cdc_set_dtr>
    378e:	6a 81       	ldd	r22, Y+2	; 0x02
    3790:	7b 81       	ldd	r23, Y+3	; 0x03
    3792:	76 95       	lsr	r23
    3794:	67 95       	ror	r22
    3796:	61 70       	andi	r22, 0x01	; 1
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	15 db       	rcall	.-2518   	; 0x2dc6 <usb_callback_cdc_set_rts>
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	0b c0       	rjmp	.+22     	; 0x37b6 <udi_cdc_comm_setup+0xb8>
    37a0:	80 e0       	ldi	r24, 0x00	; 0
    37a2:	09 c0       	rjmp	.+18     	; 0x37b6 <udi_cdc_comm_setup+0xb8>
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	07 c0       	rjmp	.+14     	; 0x37b6 <udi_cdc_comm_setup+0xb8>
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	05 c0       	rjmp	.+10     	; 0x37b6 <udi_cdc_comm_setup+0xb8>
    37ac:	80 e0       	ldi	r24, 0x00	; 0
    37ae:	03 c0       	rjmp	.+6      	; 0x37b6 <udi_cdc_comm_setup+0xb8>
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	01 c0       	rjmp	.+2      	; 0x37b6 <udi_cdc_comm_setup+0xb8>
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	df 91       	pop	r29
    37b8:	cf 91       	pop	r28
    37ba:	08 95       	ret

000037bc <udi_cdc_multi_get_nb_received_data>:
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	1f 92       	push	r1
    37c2:	cd b7       	in	r28, 0x3d	; 61
    37c4:	de b7       	in	r29, 0x3e	; 62
    37c6:	8f b7       	in	r24, 0x3f	; 63
    37c8:	89 83       	std	Y+1, r24	; 0x01
    37ca:	f8 94       	cli
    37cc:	49 81       	ldd	r20, Y+1	; 0x01
    37ce:	20 91 31 23 	lds	r18, 0x2331	; 0x802331 <udi_cdc_rx_pos>
    37d2:	30 91 32 23 	lds	r19, 0x2332	; 0x802332 <udi_cdc_rx_pos+0x1>
    37d6:	e0 91 33 23 	lds	r30, 0x2333	; 0x802333 <udi_cdc_rx_buf_sel>
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	ee 0f       	add	r30, r30
    37de:	ff 1f       	adc	r31, r31
    37e0:	ec 5c       	subi	r30, 0xCC	; 204
    37e2:	fc 4d       	sbci	r31, 0xDC	; 220
    37e4:	80 81       	ld	r24, Z
    37e6:	91 81       	ldd	r25, Z+1	; 0x01
    37e8:	4f bf       	out	0x3f, r20	; 63
    37ea:	82 1b       	sub	r24, r18
    37ec:	93 0b       	sbc	r25, r19
    37ee:	0f 90       	pop	r0
    37f0:	df 91       	pop	r29
    37f2:	cf 91       	pop	r28
    37f4:	08 95       	ret

000037f6 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    37f6:	e2 df       	rcall	.-60     	; 0x37bc <udi_cdc_multi_get_nb_received_data>
    37f8:	21 e0       	ldi	r18, 0x01	; 1
    37fa:	89 2b       	or	r24, r25
    37fc:	09 f4       	brne	.+2      	; 0x3800 <udi_cdc_multi_is_rx_ready+0xa>
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	82 2f       	mov	r24, r18
    3802:	08 95       	ret

00003804 <udi_cdc_rx_start>:
    3804:	0f 93       	push	r16
    3806:	1f 93       	push	r17
    3808:	cf 93       	push	r28
    380a:	df 93       	push	r29
    380c:	1f 92       	push	r1
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	8f b7       	in	r24, 0x3f	; 63
    3814:	89 83       	std	Y+1, r24	; 0x01
    3816:	f8 94       	cli
    3818:	99 81       	ldd	r25, Y+1	; 0x01
    381a:	20 91 33 23 	lds	r18, 0x2333	; 0x802333 <udi_cdc_rx_buf_sel>
    381e:	80 91 30 23 	lds	r24, 0x2330	; 0x802330 <udi_cdc_rx_trans_ongoing>
    3822:	81 11       	cpse	r24, r1
    3824:	10 c0       	rjmp	.+32     	; 0x3846 <udi_cdc_rx_start+0x42>
    3826:	60 91 31 23 	lds	r22, 0x2331	; 0x802331 <udi_cdc_rx_pos>
    382a:	70 91 32 23 	lds	r23, 0x2332	; 0x802332 <udi_cdc_rx_pos+0x1>
    382e:	02 2f       	mov	r16, r18
    3830:	10 e0       	ldi	r17, 0x00	; 0
    3832:	f8 01       	movw	r30, r16
    3834:	ee 0f       	add	r30, r30
    3836:	ff 1f       	adc	r31, r31
    3838:	ec 5c       	subi	r30, 0xCC	; 204
    383a:	fc 4d       	sbci	r31, 0xDC	; 220
    383c:	40 81       	ld	r20, Z
    383e:	51 81       	ldd	r21, Z+1	; 0x01
    3840:	64 17       	cp	r22, r20
    3842:	75 07       	cpc	r23, r21
    3844:	18 f4       	brcc	.+6      	; 0x384c <udi_cdc_rx_start+0x48>
    3846:	9f bf       	out	0x3f, r25	; 63
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	27 c0       	rjmp	.+78     	; 0x389a <udi_cdc_rx_start+0x96>
    384c:	10 92 31 23 	sts	0x2331, r1	; 0x802331 <udi_cdc_rx_pos>
    3850:	10 92 32 23 	sts	0x2332, r1	; 0x802332 <udi_cdc_rx_pos+0x1>
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	21 11       	cpse	r18, r1
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	80 93 33 23 	sts	0x2333, r24	; 0x802333 <udi_cdc_rx_buf_sel>
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	80 93 30 23 	sts	0x2330, r24	; 0x802330 <udi_cdc_rx_trans_ongoing>
    3864:	9f bf       	out	0x3f, r25	; 63
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	c6 df       	rcall	.-116    	; 0x37f6 <udi_cdc_multi_is_rx_ready>
    386a:	88 23       	and	r24, r24
    386c:	11 f0       	breq	.+4      	; 0x3872 <udi_cdc_rx_start+0x6e>
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	ab da       	rcall	.-2730   	; 0x2dc8 <usb_callback_rx_notify>
    3872:	a8 01       	movw	r20, r16
    3874:	00 24       	eor	r0, r0
    3876:	56 95       	lsr	r21
    3878:	47 95       	ror	r20
    387a:	07 94       	ror	r0
    387c:	56 95       	lsr	r21
    387e:	47 95       	ror	r20
    3880:	07 94       	ror	r0
    3882:	54 2f       	mov	r21, r20
    3884:	40 2d       	mov	r20, r0
    3886:	48 5c       	subi	r20, 0xC8	; 200
    3888:	5c 4d       	sbci	r21, 0xDC	; 220
    388a:	05 e8       	ldi	r16, 0x85	; 133
    388c:	1c e1       	ldi	r17, 0x1C	; 28
    388e:	20 e4       	ldi	r18, 0x40	; 64
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	61 e0       	ldi	r22, 0x01	; 1
    3894:	82 e0       	ldi	r24, 0x02	; 2
    3896:	0e 94 3a 12 	call	0x2474	; 0x2474 <udd_ep_run>
    389a:	0f 90       	pop	r0
    389c:	df 91       	pop	r29
    389e:	cf 91       	pop	r28
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	08 95       	ret

000038a6 <udi_cdc_data_enable>:
    38a6:	10 92 b9 23 	sts	0x23B9, r1	; 0x8023b9 <udi_cdc_nb_data_enabled>
    38aa:	10 92 a8 22 	sts	0x22A8, r1	; 0x8022a8 <udi_cdc_tx_trans_ongoing>
    38ae:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <udi_cdc_tx_both_buf_to_send>
    38b2:	10 92 ab 22 	sts	0x22AB, r1	; 0x8022ab <udi_cdc_tx_buf_sel>
    38b6:	ec ea       	ldi	r30, 0xAC	; 172
    38b8:	f2 e2       	ldi	r31, 0x22	; 34
    38ba:	10 82       	st	Z, r1
    38bc:	11 82       	std	Z+1, r1	; 0x01
    38be:	12 82       	std	Z+2, r1	; 0x02
    38c0:	13 82       	std	Z+3, r1	; 0x03
    38c2:	10 92 a9 22 	sts	0x22A9, r1	; 0x8022a9 <udi_cdc_tx_sof_num>
    38c6:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <udi_cdc_tx_sof_num+0x1>
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	3c de       	rcall	.-904    	; 0x3546 <udi_cdc_tx_send>
    38ce:	10 92 30 23 	sts	0x2330, r1	; 0x802330 <udi_cdc_rx_trans_ongoing>
    38d2:	10 92 33 23 	sts	0x2333, r1	; 0x802333 <udi_cdc_rx_buf_sel>
    38d6:	e4 e3       	ldi	r30, 0x34	; 52
    38d8:	f3 e2       	ldi	r31, 0x23	; 35
    38da:	10 82       	st	Z, r1
    38dc:	11 82       	std	Z+1, r1	; 0x01
    38de:	12 82       	std	Z+2, r1	; 0x02
    38e0:	13 82       	std	Z+3, r1	; 0x03
    38e2:	10 92 31 23 	sts	0x2331, r1	; 0x802331 <udi_cdc_rx_pos>
    38e6:	10 92 32 23 	sts	0x2332, r1	; 0x802332 <udi_cdc_rx_pos+0x1>
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	8b df       	rcall	.-234    	; 0x3804 <udi_cdc_rx_start>
    38ee:	88 23       	and	r24, r24
    38f0:	59 f0       	breq	.+22     	; 0x3908 <udi_cdc_data_enable+0x62>
    38f2:	90 91 b9 23 	lds	r25, 0x23B9	; 0x8023b9 <udi_cdc_nb_data_enabled>
    38f6:	9f 5f       	subi	r25, 0xFF	; 255
    38f8:	90 93 b9 23 	sts	0x23B9, r25	; 0x8023b9 <udi_cdc_nb_data_enabled>
    38fc:	90 91 b9 23 	lds	r25, 0x23B9	; 0x8023b9 <udi_cdc_nb_data_enabled>
    3900:	91 30       	cpi	r25, 0x01	; 1
    3902:	11 f4       	brne	.+4      	; 0x3908 <udi_cdc_data_enable+0x62>
    3904:	90 93 b8 23 	sts	0x23B8, r25	; 0x8023b8 <udi_cdc_data_running>
    3908:	08 95       	ret

0000390a <udi_cdc_data_received>:
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    390e:	81 11       	cpse	r24, r1
    3910:	29 c0       	rjmp	.+82     	; 0x3964 <udi_cdc_data_received+0x5a>
    3912:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <udi_cdc_rx_buf_sel>
    3916:	e1 e0       	ldi	r30, 0x01	; 1
    3918:	81 11       	cpse	r24, r1
    391a:	e0 e0       	ldi	r30, 0x00	; 0
    391c:	84 2f       	mov	r24, r20
    391e:	61 15       	cp	r22, r1
    3920:	71 05       	cpc	r23, r1
    3922:	a9 f4       	brne	.+42     	; 0x394e <udi_cdc_data_received+0x44>
    3924:	4e 2f       	mov	r20, r30
    3926:	50 e0       	ldi	r21, 0x00	; 0
    3928:	00 24       	eor	r0, r0
    392a:	56 95       	lsr	r21
    392c:	47 95       	ror	r20
    392e:	07 94       	ror	r0
    3930:	56 95       	lsr	r21
    3932:	47 95       	ror	r20
    3934:	07 94       	ror	r0
    3936:	54 2f       	mov	r21, r20
    3938:	40 2d       	mov	r20, r0
    393a:	48 5c       	subi	r20, 0xC8	; 200
    393c:	5c 4d       	sbci	r21, 0xDC	; 220
    393e:	05 e8       	ldi	r16, 0x85	; 133
    3940:	1c e1       	ldi	r17, 0x1C	; 28
    3942:	20 e4       	ldi	r18, 0x40	; 64
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	61 e0       	ldi	r22, 0x01	; 1
    3948:	0e 94 3a 12 	call	0x2474	; 0x2474 <udd_ep_run>
    394c:	0b c0       	rjmp	.+22     	; 0x3964 <udi_cdc_data_received+0x5a>
    394e:	f0 e0       	ldi	r31, 0x00	; 0
    3950:	ee 0f       	add	r30, r30
    3952:	ff 1f       	adc	r31, r31
    3954:	ec 5c       	subi	r30, 0xCC	; 204
    3956:	fc 4d       	sbci	r31, 0xDC	; 220
    3958:	60 83       	st	Z, r22
    395a:	71 83       	std	Z+1, r23	; 0x01
    395c:	10 92 30 23 	sts	0x2330, r1	; 0x802330 <udi_cdc_rx_trans_ongoing>
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	50 df       	rcall	.-352    	; 0x3804 <udi_cdc_rx_start>
    3964:	1f 91       	pop	r17
    3966:	0f 91       	pop	r16
    3968:	08 95       	ret

0000396a <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    396a:	e0 91 d4 23 	lds	r30, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    396e:	f0 91 d5 23 	lds	r31, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    3972:	01 90       	ld	r0, Z+
    3974:	f0 81       	ld	r31, Z
    3976:	e0 2d       	mov	r30, r0
    3978:	22 81       	ldd	r18, Z+2	; 0x02
    397a:	33 81       	ldd	r19, Z+3	; 0x03
    397c:	2e 0f       	add	r18, r30
    397e:	3f 1f       	adc	r19, r31
    3980:	fc 01       	movw	r30, r24
    3982:	40 81       	ld	r20, Z
    3984:	e4 0f       	add	r30, r20
    3986:	f1 1d       	adc	r31, r1
    3988:	e2 17       	cp	r30, r18
    398a:	f3 07       	cpc	r31, r19
    398c:	a0 f4       	brcc	.+40     	; 0x39b6 <udc_next_desc_in_iface+0x4c>
    398e:	81 81       	ldd	r24, Z+1	; 0x01
    3990:	84 30       	cpi	r24, 0x04	; 4
    3992:	a1 f0       	breq	.+40     	; 0x39bc <udc_next_desc_in_iface+0x52>
    3994:	86 13       	cpse	r24, r22
    3996:	06 c0       	rjmp	.+12     	; 0x39a4 <udc_next_desc_in_iface+0x3a>
    3998:	14 c0       	rjmp	.+40     	; 0x39c2 <udc_next_desc_in_iface+0x58>
    399a:	81 81       	ldd	r24, Z+1	; 0x01
    399c:	84 30       	cpi	r24, 0x04	; 4
    399e:	a1 f0       	breq	.+40     	; 0x39c8 <udc_next_desc_in_iface+0x5e>
    39a0:	86 17       	cp	r24, r22
    39a2:	a9 f0       	breq	.+42     	; 0x39ce <udc_next_desc_in_iface+0x64>
    39a4:	80 81       	ld	r24, Z
    39a6:	e8 0f       	add	r30, r24
    39a8:	f1 1d       	adc	r31, r1
    39aa:	e2 17       	cp	r30, r18
    39ac:	f3 07       	cpc	r31, r19
    39ae:	a8 f3       	brcs	.-22     	; 0x399a <udc_next_desc_in_iface+0x30>
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	08 95       	ret
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	08 95       	ret
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	08 95       	ret
    39c2:	8e 2f       	mov	r24, r30
    39c4:	9f 2f       	mov	r25, r31
    39c6:	08 95       	ret
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	08 95       	ret
    39ce:	8e 2f       	mov	r24, r30
    39d0:	9f 2f       	mov	r25, r31
    39d2:	08 95       	ret

000039d4 <udc_valid_address>:
    39d4:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    39d8:	8f 77       	andi	r24, 0x7F	; 127
    39da:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <udd_set_address>
    39de:	08 95       	ret

000039e0 <udc_update_iface_desc>:
    39e0:	90 91 d6 23 	lds	r25, 0x23D6	; 0x8023d6 <udc_num_configuration>
    39e4:	99 23       	and	r25, r25
    39e6:	81 f1       	breq	.+96     	; 0x3a48 <udc_update_iface_desc+0x68>
    39e8:	e0 91 d4 23 	lds	r30, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    39ec:	f0 91 d5 23 	lds	r31, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    39f0:	01 90       	ld	r0, Z+
    39f2:	f0 81       	ld	r31, Z
    39f4:	e0 2d       	mov	r30, r0
    39f6:	94 81       	ldd	r25, Z+4	; 0x04
    39f8:	89 17       	cp	r24, r25
    39fa:	40 f5       	brcc	.+80     	; 0x3a4c <udc_update_iface_desc+0x6c>
    39fc:	e0 93 d2 23 	sts	0x23D2, r30	; 0x8023d2 <udc_ptr_iface>
    3a00:	f0 93 d3 23 	sts	0x23D3, r31	; 0x8023d3 <udc_ptr_iface+0x1>
    3a04:	22 81       	ldd	r18, Z+2	; 0x02
    3a06:	33 81       	ldd	r19, Z+3	; 0x03
    3a08:	2e 0f       	add	r18, r30
    3a0a:	3f 1f       	adc	r19, r31
    3a0c:	e2 17       	cp	r30, r18
    3a0e:	f3 07       	cpc	r31, r19
    3a10:	f8 f4       	brcc	.+62     	; 0x3a50 <udc_update_iface_desc+0x70>
    3a12:	91 81       	ldd	r25, Z+1	; 0x01
    3a14:	94 30       	cpi	r25, 0x04	; 4
    3a16:	61 f4       	brne	.+24     	; 0x3a30 <udc_update_iface_desc+0x50>
    3a18:	92 81       	ldd	r25, Z+2	; 0x02
    3a1a:	89 13       	cpse	r24, r25
    3a1c:	09 c0       	rjmp	.+18     	; 0x3a30 <udc_update_iface_desc+0x50>
    3a1e:	93 81       	ldd	r25, Z+3	; 0x03
    3a20:	96 13       	cpse	r25, r22
    3a22:	06 c0       	rjmp	.+12     	; 0x3a30 <udc_update_iface_desc+0x50>
    3a24:	e0 93 d2 23 	sts	0x23D2, r30	; 0x8023d2 <udc_ptr_iface>
    3a28:	f0 93 d3 23 	sts	0x23D3, r31	; 0x8023d3 <udc_ptr_iface+0x1>
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	08 95       	ret
    3a30:	90 81       	ld	r25, Z
    3a32:	e9 0f       	add	r30, r25
    3a34:	f1 1d       	adc	r31, r1
    3a36:	e2 17       	cp	r30, r18
    3a38:	f3 07       	cpc	r31, r19
    3a3a:	58 f3       	brcs	.-42     	; 0x3a12 <udc_update_iface_desc+0x32>
    3a3c:	e0 93 d2 23 	sts	0x23D2, r30	; 0x8023d2 <udc_ptr_iface>
    3a40:	f0 93 d3 23 	sts	0x23D3, r31	; 0x8023d3 <udc_ptr_iface+0x1>
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	08 95       	ret
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	08 95       	ret
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	08 95       	ret
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	08 95       	ret

00003a54 <udc_iface_disable>:
    3a54:	ef 92       	push	r14
    3a56:	ff 92       	push	r15
    3a58:	1f 93       	push	r17
    3a5a:	cf 93       	push	r28
    3a5c:	df 93       	push	r29
    3a5e:	c8 2f       	mov	r28, r24
    3a60:	60 e0       	ldi	r22, 0x00	; 0
    3a62:	be df       	rcall	.-132    	; 0x39e0 <udc_update_iface_desc>
    3a64:	18 2f       	mov	r17, r24
    3a66:	88 23       	and	r24, r24
    3a68:	81 f1       	breq	.+96     	; 0x3aca <udc_iface_disable+0x76>
    3a6a:	a0 91 d4 23 	lds	r26, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    3a6e:	b0 91 d5 23 	lds	r27, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    3a72:	ec 2f       	mov	r30, r28
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	ee 0f       	add	r30, r30
    3a78:	ff 1f       	adc	r31, r31
    3a7a:	12 96       	adiw	r26, 0x02	; 2
    3a7c:	8d 91       	ld	r24, X+
    3a7e:	9c 91       	ld	r25, X
    3a80:	13 97       	sbiw	r26, 0x03	; 3
    3a82:	e8 0f       	add	r30, r24
    3a84:	f9 1f       	adc	r31, r25
    3a86:	e0 80       	ld	r14, Z
    3a88:	f1 80       	ldd	r15, Z+1	; 0x01
    3a8a:	d7 01       	movw	r26, r14
    3a8c:	16 96       	adiw	r26, 0x06	; 6
    3a8e:	ed 91       	ld	r30, X+
    3a90:	fc 91       	ld	r31, X
    3a92:	17 97       	sbiw	r26, 0x07	; 7
    3a94:	19 95       	eicall
    3a96:	68 2f       	mov	r22, r24
    3a98:	8c 2f       	mov	r24, r28
    3a9a:	a2 df       	rcall	.-188    	; 0x39e0 <udc_update_iface_desc>
    3a9c:	18 2f       	mov	r17, r24
    3a9e:	88 23       	and	r24, r24
    3aa0:	a1 f0       	breq	.+40     	; 0x3aca <udc_iface_disable+0x76>
    3aa2:	c0 91 d2 23 	lds	r28, 0x23D2	; 0x8023d2 <udc_ptr_iface>
    3aa6:	d0 91 d3 23 	lds	r29, 0x23D3	; 0x8023d3 <udc_ptr_iface+0x1>
    3aaa:	65 e0       	ldi	r22, 0x05	; 5
    3aac:	ce 01       	movw	r24, r28
    3aae:	5d df       	rcall	.-326    	; 0x396a <udc_next_desc_in_iface>
    3ab0:	ec 01       	movw	r28, r24
    3ab2:	89 2b       	or	r24, r25
    3ab4:	21 f0       	breq	.+8      	; 0x3abe <udc_iface_disable+0x6a>
    3ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab8:	0e 94 54 13 	call	0x26a8	; 0x26a8 <udd_ep_free>
    3abc:	f6 cf       	rjmp	.-20     	; 0x3aaa <udc_iface_disable+0x56>
    3abe:	d7 01       	movw	r26, r14
    3ac0:	12 96       	adiw	r26, 0x02	; 2
    3ac2:	ed 91       	ld	r30, X+
    3ac4:	fc 91       	ld	r31, X
    3ac6:	13 97       	sbiw	r26, 0x03	; 3
    3ac8:	19 95       	eicall
    3aca:	81 2f       	mov	r24, r17
    3acc:	df 91       	pop	r29
    3ace:	cf 91       	pop	r28
    3ad0:	1f 91       	pop	r17
    3ad2:	ff 90       	pop	r15
    3ad4:	ef 90       	pop	r14
    3ad6:	08 95       	ret

00003ad8 <udc_iface_enable>:
    3ad8:	1f 93       	push	r17
    3ada:	cf 93       	push	r28
    3adc:	df 93       	push	r29
    3ade:	18 2f       	mov	r17, r24
    3ae0:	7f df       	rcall	.-258    	; 0x39e0 <udc_update_iface_desc>
    3ae2:	88 23       	and	r24, r24
    3ae4:	41 f1       	breq	.+80     	; 0x3b36 <udc_iface_enable+0x5e>
    3ae6:	c0 91 d2 23 	lds	r28, 0x23D2	; 0x8023d2 <udc_ptr_iface>
    3aea:	d0 91 d3 23 	lds	r29, 0x23D3	; 0x8023d3 <udc_ptr_iface+0x1>
    3aee:	65 e0       	ldi	r22, 0x05	; 5
    3af0:	ce 01       	movw	r24, r28
    3af2:	3b df       	rcall	.-394    	; 0x396a <udc_next_desc_in_iface>
    3af4:	ec 01       	movw	r28, r24
    3af6:	89 2b       	or	r24, r25
    3af8:	49 f0       	breq	.+18     	; 0x3b0c <udc_iface_enable+0x34>
    3afa:	4c 81       	ldd	r20, Y+4	; 0x04
    3afc:	5d 81       	ldd	r21, Y+5	; 0x05
    3afe:	6b 81       	ldd	r22, Y+3	; 0x03
    3b00:	8a 81       	ldd	r24, Y+2	; 0x02
    3b02:	0e 94 60 11 	call	0x22c0	; 0x22c0 <udd_ep_alloc>
    3b06:	81 11       	cpse	r24, r1
    3b08:	f2 cf       	rjmp	.-28     	; 0x3aee <udc_iface_enable+0x16>
    3b0a:	15 c0       	rjmp	.+42     	; 0x3b36 <udc_iface_enable+0x5e>
    3b0c:	a0 91 d4 23 	lds	r26, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    3b10:	b0 91 d5 23 	lds	r27, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    3b14:	e1 2f       	mov	r30, r17
    3b16:	f0 e0       	ldi	r31, 0x00	; 0
    3b18:	ee 0f       	add	r30, r30
    3b1a:	ff 1f       	adc	r31, r31
    3b1c:	12 96       	adiw	r26, 0x02	; 2
    3b1e:	8d 91       	ld	r24, X+
    3b20:	9c 91       	ld	r25, X
    3b22:	13 97       	sbiw	r26, 0x03	; 3
    3b24:	e8 0f       	add	r30, r24
    3b26:	f9 1f       	adc	r31, r25
    3b28:	01 90       	ld	r0, Z+
    3b2a:	f0 81       	ld	r31, Z
    3b2c:	e0 2d       	mov	r30, r0
    3b2e:	01 90       	ld	r0, Z+
    3b30:	f0 81       	ld	r31, Z
    3b32:	e0 2d       	mov	r30, r0
    3b34:	19 95       	eicall
    3b36:	df 91       	pop	r29
    3b38:	cf 91       	pop	r28
    3b3a:	1f 91       	pop	r17
    3b3c:	08 95       	ret

00003b3e <udc_start>:
    3b3e:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <udd_enable>
    3b42:	08 95       	ret

00003b44 <udc_reset>:
    3b44:	cf 93       	push	r28
    3b46:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    3b4a:	88 23       	and	r24, r24
    3b4c:	c1 f0       	breq	.+48     	; 0x3b7e <udc_reset+0x3a>
    3b4e:	e0 91 d4 23 	lds	r30, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    3b52:	f0 91 d5 23 	lds	r31, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    3b56:	01 90       	ld	r0, Z+
    3b58:	f0 81       	ld	r31, Z
    3b5a:	e0 2d       	mov	r30, r0
    3b5c:	84 81       	ldd	r24, Z+4	; 0x04
    3b5e:	88 23       	and	r24, r24
    3b60:	71 f0       	breq	.+28     	; 0x3b7e <udc_reset+0x3a>
    3b62:	c0 e0       	ldi	r28, 0x00	; 0
    3b64:	8c 2f       	mov	r24, r28
    3b66:	76 df       	rcall	.-276    	; 0x3a54 <udc_iface_disable>
    3b68:	cf 5f       	subi	r28, 0xFF	; 255
    3b6a:	e0 91 d4 23 	lds	r30, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    3b6e:	f0 91 d5 23 	lds	r31, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    3b72:	01 90       	ld	r0, Z+
    3b74:	f0 81       	ld	r31, Z
    3b76:	e0 2d       	mov	r30, r0
    3b78:	84 81       	ldd	r24, Z+4	; 0x04
    3b7a:	c8 17       	cp	r28, r24
    3b7c:	98 f3       	brcs	.-26     	; 0x3b64 <udc_reset+0x20>
    3b7e:	10 92 d6 23 	sts	0x23D6, r1	; 0x8023d6 <udc_num_configuration>
    3b82:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_device_status>
    3b86:	81 fd       	sbrc	r24, 1
    3b88:	14 d9       	rcall	.-3544   	; 0x2db2 <usb_callback_remotewakeup_disable>
    3b8a:	10 92 da 23 	sts	0x23DA, r1	; 0x8023da <udc_device_status>
    3b8e:	10 92 db 23 	sts	0x23DB, r1	; 0x8023db <udc_device_status+0x1>
    3b92:	cf 91       	pop	r28
    3b94:	08 95       	ret

00003b96 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    3b96:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    3b98:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    3b9c:	88 23       	and	r24, r24
    3b9e:	49 f1       	breq	.+82     	; 0x3bf2 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3ba0:	a0 91 d4 23 	lds	r26, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    3ba4:	b0 91 d5 23 	lds	r27, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    3ba8:	ed 91       	ld	r30, X+
    3baa:	fc 91       	ld	r31, X
    3bac:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3bae:	84 81       	ldd	r24, Z+4	; 0x04
    3bb0:	88 23       	and	r24, r24
    3bb2:	f9 f0       	breq	.+62     	; 0x3bf2 <udc_sof_notify+0x5c>
    3bb4:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3bb6:	ec 2f       	mov	r30, r28
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	ee 0f       	add	r30, r30
    3bbc:	ff 1f       	adc	r31, r31
    3bbe:	12 96       	adiw	r26, 0x02	; 2
    3bc0:	8d 91       	ld	r24, X+
    3bc2:	9c 91       	ld	r25, X
    3bc4:	13 97       	sbiw	r26, 0x03	; 3
    3bc6:	e8 0f       	add	r30, r24
    3bc8:	f9 1f       	adc	r31, r25
    3bca:	01 90       	ld	r0, Z+
    3bcc:	f0 81       	ld	r31, Z
    3bce:	e0 2d       	mov	r30, r0
    3bd0:	00 84       	ldd	r0, Z+8	; 0x08
    3bd2:	f1 85       	ldd	r31, Z+9	; 0x09
    3bd4:	e0 2d       	mov	r30, r0
    3bd6:	30 97       	sbiw	r30, 0x00	; 0
    3bd8:	09 f0       	breq	.+2      	; 0x3bdc <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3bda:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3bdc:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3bde:	a0 91 d4 23 	lds	r26, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    3be2:	b0 91 d5 23 	lds	r27, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    3be6:	ed 91       	ld	r30, X+
    3be8:	fc 91       	ld	r31, X
    3bea:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3bec:	84 81       	ldd	r24, Z+4	; 0x04
    3bee:	c8 17       	cp	r28, r24
    3bf0:	10 f3       	brcs	.-60     	; 0x3bb6 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    3bf2:	cf 91       	pop	r28
    3bf4:	08 95       	ret

00003bf6 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    3bf6:	0f 93       	push	r16
    3bf8:	1f 93       	push	r17
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3bfe:	e2 ee       	ldi	r30, 0xE2	; 226
    3c00:	f3 e2       	ldi	r31, 0x23	; 35
    3c02:	12 86       	std	Z+10, r1	; 0x0a
    3c04:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    3c06:	14 86       	std	Z+12, r1	; 0x0c
    3c08:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    3c0a:	16 86       	std	Z+14, r1	; 0x0e
    3c0c:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    3c0e:	80 81       	ld	r24, Z
    3c10:	88 23       	and	r24, r24
    3c12:	0c f0       	brlt	.+2      	; 0x3c16 <udc_process_setup+0x20>
    3c14:	95 c2       	rjmp	.+1322   	; 0x4140 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    3c16:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    3c1a:	30 91 e9 23 	lds	r19, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    3c1e:	21 15       	cp	r18, r1
    3c20:	31 05       	cpc	r19, r1
    3c22:	09 f0       	breq	.+2      	; 0x3c26 <udc_process_setup+0x30>
    3c24:	88 c2       	rjmp	.+1296   	; 0x4136 <udc_process_setup+0x540>
    3c26:	7f c2       	rjmp	.+1278   	; 0x4126 <udc_process_setup+0x530>
    3c28:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3c2a:	09 f0       	breq	.+2      	; 0x3c2e <udc_process_setup+0x38>
    3c2c:	ab c0       	rjmp	.+342    	; 0x3d84 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3c2e:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    3c32:	96 30       	cpi	r25, 0x06	; 6
    3c34:	81 f0       	breq	.+32     	; 0x3c56 <udc_process_setup+0x60>
    3c36:	98 30       	cpi	r25, 0x08	; 8
    3c38:	09 f4       	brne	.+2      	; 0x3c3c <udc_process_setup+0x46>
    3c3a:	99 c0       	rjmp	.+306    	; 0x3d6e <udc_process_setup+0x178>
    3c3c:	91 11       	cpse	r25, r1
    3c3e:	a2 c0       	rjmp	.+324    	; 0x3d84 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    3c40:	22 30       	cpi	r18, 0x02	; 2
    3c42:	31 05       	cpc	r19, r1
    3c44:	09 f0       	breq	.+2      	; 0x3c48 <udc_process_setup+0x52>
    3c46:	2b c2       	rjmp	.+1110   	; 0x409e <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    3c48:	62 e0       	ldi	r22, 0x02	; 2
    3c4a:	70 e0       	ldi	r23, 0x00	; 0
    3c4c:	8a ed       	ldi	r24, 0xDA	; 218
    3c4e:	93 e2       	ldi	r25, 0x23	; 35
    3c50:	0e 94 59 11 	call	0x22b2	; 0x22b2 <udd_set_setup_payload>
    3c54:	7e c2       	rjmp	.+1276   	; 0x4152 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    3c56:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    3c5a:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    3c5e:	29 2f       	mov	r18, r25
    3c60:	33 27       	eor	r19, r19
    3c62:	22 30       	cpi	r18, 0x02	; 2
    3c64:	31 05       	cpc	r19, r1
    3c66:	b1 f0       	breq	.+44     	; 0x3c94 <udc_process_setup+0x9e>
    3c68:	20 f4       	brcc	.+8      	; 0x3c72 <udc_process_setup+0x7c>
    3c6a:	21 30       	cpi	r18, 0x01	; 1
    3c6c:	31 05       	cpc	r19, r1
    3c6e:	41 f0       	breq	.+16     	; 0x3c80 <udc_process_setup+0x8a>
    3c70:	d8 c1       	rjmp	.+944    	; 0x4022 <udc_process_setup+0x42c>
    3c72:	23 30       	cpi	r18, 0x03	; 3
    3c74:	31 05       	cpc	r19, r1
    3c76:	f1 f1       	breq	.+124    	; 0x3cf4 <udc_process_setup+0xfe>
    3c78:	2f 30       	cpi	r18, 0x0F	; 15
    3c7a:	31 05       	cpc	r19, r1
    3c7c:	61 f1       	breq	.+88     	; 0x3cd6 <udc_process_setup+0xe0>
    3c7e:	d1 c1       	rjmp	.+930    	; 0x4022 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    3c80:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config>
    3c84:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    3c88:	dc 01       	movw	r26, r24
    3c8a:	6c 91       	ld	r22, X
    3c8c:	70 e0       	ldi	r23, 0x00	; 0
    3c8e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <udd_set_setup_payload>
    3c92:	5e c0       	rjmp	.+188    	; 0x3d50 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    3c94:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <udc_config>
    3c98:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <udc_config+0x1>
    3c9c:	21 89       	ldd	r18, Z+17	; 0x11
    3c9e:	82 17       	cp	r24, r18
    3ca0:	08 f0       	brcs	.+2      	; 0x3ca4 <udc_process_setup+0xae>
    3ca2:	fd c1       	rjmp	.+1018   	; 0x409e <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    3ca4:	99 27       	eor	r25, r25
    3ca6:	88 0f       	add	r24, r24
    3ca8:	99 1f       	adc	r25, r25
    3caa:	88 0f       	add	r24, r24
    3cac:	99 1f       	adc	r25, r25
    3cae:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <udc_config+0x2>
    3cb2:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <udc_config+0x3>
    3cb6:	e8 0f       	add	r30, r24
    3cb8:	f9 1f       	adc	r31, r25
    3cba:	80 81       	ld	r24, Z
    3cbc:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	62 81       	ldd	r22, Z+2	; 0x02
    3cc2:	73 81       	ldd	r23, Z+3	; 0x03
    3cc4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    3cc8:	e0 91 ea 23 	lds	r30, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x8>
    3ccc:	f0 91 eb 23 	lds	r31, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x9>
    3cd0:	82 e0       	ldi	r24, 0x02	; 2
    3cd2:	81 83       	std	Z+1, r24	; 0x01
    3cd4:	3d c0       	rjmp	.+122    	; 0x3d50 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    3cd6:	80 91 30 20 	lds	r24, 0x2030	; 0x802030 <udc_config+0x4>
    3cda:	90 91 31 20 	lds	r25, 0x2031	; 0x802031 <udc_config+0x5>
    3cde:	00 97       	sbiw	r24, 0x00	; 0
    3ce0:	09 f4       	brne	.+2      	; 0x3ce4 <udc_process_setup+0xee>
    3ce2:	dd c1       	rjmp	.+954    	; 0x409e <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	12 96       	adiw	r26, 0x02	; 2
    3ce8:	6d 91       	ld	r22, X+
    3cea:	7c 91       	ld	r23, X
    3cec:	13 97       	sbiw	r26, 0x03	; 3
    3cee:	0e 94 59 11 	call	0x22b2	; 0x22b2 <udd_set_setup_payload>
    3cf2:	2e c0       	rjmp	.+92     	; 0x3d50 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    3cf4:	99 27       	eor	r25, r25
    3cf6:	81 30       	cpi	r24, 0x01	; 1
    3cf8:	91 05       	cpc	r25, r1
    3cfa:	99 f0       	breq	.+38     	; 0x3d22 <udc_process_setup+0x12c>
    3cfc:	58 f0       	brcs	.+22     	; 0x3d14 <udc_process_setup+0x11e>
    3cfe:	82 30       	cpi	r24, 0x02	; 2
    3d00:	91 05       	cpc	r25, r1
    3d02:	09 f4       	brne	.+2      	; 0x3d06 <udc_process_setup+0x110>
    3d04:	22 c2       	rjmp	.+1092   	; 0x414a <udc_process_setup+0x554>
    3d06:	03 97       	sbiw	r24, 0x03	; 3
    3d08:	09 f0       	breq	.+2      	; 0x3d0c <udc_process_setup+0x116>
    3d0a:	94 c1       	rjmp	.+808    	; 0x4034 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    3d0c:	36 e0       	ldi	r19, 0x06	; 6
		str = udc_get_string_serial_name();
    3d0e:	e6 e1       	ldi	r30, 0x16	; 22
    3d10:	f1 e2       	ldi	r31, 0x21	; 33
    3d12:	0a c0       	rjmp	.+20     	; 0x3d28 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    3d14:	64 e0       	ldi	r22, 0x04	; 4
    3d16:	70 e0       	ldi	r23, 0x00	; 0
    3d18:	82 ed       	ldi	r24, 0xD2	; 210
    3d1a:	90 e2       	ldi	r25, 0x20	; 32
    3d1c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <udd_set_setup_payload>
    3d20:	17 c0       	rjmp	.+46     	; 0x3d50 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    3d22:	e1 ec       	ldi	r30, 0xC1	; 193
    3d24:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    3d26:	30 e1       	ldi	r19, 0x10	; 16
    3d28:	a2 e9       	ldi	r26, 0x92	; 146
    3d2a:	b0 e2       	ldi	r27, 0x20	; 32
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    3d2e:	81 91       	ld	r24, Z+
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	8d 93       	st	X+, r24
    3d34:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    3d36:	2f 5f       	subi	r18, 0xFF	; 255
    3d38:	23 17       	cp	r18, r19
    3d3a:	c8 f3       	brcs	.-14     	; 0x3d2e <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    3d3c:	63 2f       	mov	r22, r19
    3d3e:	66 0f       	add	r22, r22
    3d40:	6e 5f       	subi	r22, 0xFE	; 254
    3d42:	60 93 90 20 	sts	0x2090, r22	; 0x802090 <udc_string_desc>
		udd_set_setup_payload(
    3d46:	70 e0       	ldi	r23, 0x00	; 0
    3d48:	80 e9       	ldi	r24, 0x90	; 144
    3d4a:	90 e2       	ldi	r25, 0x20	; 32
    3d4c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    3d50:	e2 ee       	ldi	r30, 0xE2	; 226
    3d52:	f3 e2       	ldi	r31, 0x23	; 35
    3d54:	86 81       	ldd	r24, Z+6	; 0x06
    3d56:	97 81       	ldd	r25, Z+7	; 0x07
    3d58:	22 85       	ldd	r18, Z+10	; 0x0a
    3d5a:	33 85       	ldd	r19, Z+11	; 0x0b
    3d5c:	82 17       	cp	r24, r18
    3d5e:	93 07       	cpc	r25, r19
    3d60:	08 f0       	brcs	.+2      	; 0x3d64 <udc_process_setup+0x16e>
    3d62:	f7 c1       	rjmp	.+1006   	; 0x4152 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    3d64:	80 93 ec 23 	sts	0x23EC, r24	; 0x8023ec <udd_g_ctrlreq+0xa>
    3d68:	90 93 ed 23 	sts	0x23ED, r25	; 0x8023ed <udd_g_ctrlreq+0xb>
    3d6c:	f2 c1       	rjmp	.+996    	; 0x4152 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    3d6e:	21 30       	cpi	r18, 0x01	; 1
    3d70:	31 05       	cpc	r19, r1
    3d72:	09 f0       	breq	.+2      	; 0x3d76 <udc_process_setup+0x180>
    3d74:	94 c1       	rjmp	.+808    	; 0x409e <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    3d76:	61 e0       	ldi	r22, 0x01	; 1
    3d78:	70 e0       	ldi	r23, 0x00	; 0
    3d7a:	86 ed       	ldi	r24, 0xD6	; 214
    3d7c:	93 e2       	ldi	r25, 0x23	; 35
    3d7e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <udd_set_setup_payload>
    3d82:	e7 c1       	rjmp	.+974    	; 0x4152 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3d84:	81 30       	cpi	r24, 0x01	; 1
    3d86:	e9 f5       	brne	.+122    	; 0x3e02 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3d88:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    3d8c:	9a 30       	cpi	r25, 0x0A	; 10
    3d8e:	c9 f5       	brne	.+114    	; 0x3e02 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    3d90:	21 30       	cpi	r18, 0x01	; 1
    3d92:	31 05       	cpc	r19, r1
    3d94:	09 f0       	breq	.+2      	; 0x3d98 <udc_process_setup+0x1a2>
    3d96:	53 c1       	rjmp	.+678    	; 0x403e <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    3d98:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    3d9c:	88 23       	and	r24, r24
    3d9e:	09 f4       	brne	.+2      	; 0x3da2 <udc_process_setup+0x1ac>
    3da0:	4e c1       	rjmp	.+668    	; 0x403e <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3da2:	c0 91 e6 23 	lds	r28, 0x23E6	; 0x8023e6 <udd_g_ctrlreq+0x4>
    3da6:	d0 91 e7 23 	lds	r29, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3daa:	00 91 d4 23 	lds	r16, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    3dae:	10 91 d5 23 	lds	r17, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    3db2:	d8 01       	movw	r26, r16
    3db4:	ed 91       	ld	r30, X+
    3db6:	fc 91       	ld	r31, X
    3db8:	84 81       	ldd	r24, Z+4	; 0x04
    3dba:	c8 17       	cp	r28, r24
    3dbc:	08 f0       	brcs	.+2      	; 0x3dc0 <udc_process_setup+0x1ca>
    3dbe:	3f c1       	rjmp	.+638    	; 0x403e <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3dc0:	60 e0       	ldi	r22, 0x00	; 0
    3dc2:	8c 2f       	mov	r24, r28
    3dc4:	0d de       	rcall	.-998    	; 0x39e0 <udc_update_iface_desc>
    3dc6:	88 23       	and	r24, r24
    3dc8:	09 f4       	brne	.+2      	; 0x3dcc <udc_process_setup+0x1d6>
    3dca:	34 c1       	rjmp	.+616    	; 0x4034 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3dcc:	ce 01       	movw	r24, r28
    3dce:	99 27       	eor	r25, r25
    3dd0:	88 0f       	add	r24, r24
    3dd2:	99 1f       	adc	r25, r25
    3dd4:	d8 01       	movw	r26, r16
    3dd6:	12 96       	adiw	r26, 0x02	; 2
    3dd8:	ed 91       	ld	r30, X+
    3dda:	fc 91       	ld	r31, X
    3ddc:	13 97       	sbiw	r26, 0x03	; 3
    3dde:	e8 0f       	add	r30, r24
    3de0:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    3de2:	01 90       	ld	r0, Z+
    3de4:	f0 81       	ld	r31, Z
    3de6:	e0 2d       	mov	r30, r0
    3de8:	86 81       	ldd	r24, Z+6	; 0x06
    3dea:	97 81       	ldd	r25, Z+7	; 0x07
    3dec:	fc 01       	movw	r30, r24
    3dee:	19 95       	eicall
    3df0:	80 93 d8 23 	sts	0x23D8, r24	; 0x8023d8 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    3df4:	61 e0       	ldi	r22, 0x01	; 1
    3df6:	70 e0       	ldi	r23, 0x00	; 0
    3df8:	88 ed       	ldi	r24, 0xD8	; 216
    3dfa:	93 e2       	ldi	r25, 0x23	; 35
    3dfc:	0e 94 59 11 	call	0x22b2	; 0x22b2 <udd_set_setup_payload>
    3e00:	a8 c1       	rjmp	.+848    	; 0x4152 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3e02:	82 30       	cpi	r24, 0x02	; 2
    3e04:	09 f0       	breq	.+2      	; 0x3e08 <udc_process_setup+0x212>
    3e06:	16 c1       	rjmp	.+556    	; 0x4034 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3e08:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    3e0c:	81 11       	cpse	r24, r1
    3e0e:	0b c1       	rjmp	.+534    	; 0x4026 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    3e10:	22 30       	cpi	r18, 0x02	; 2
    3e12:	31 05       	cpc	r19, r1
    3e14:	09 f0       	breq	.+2      	; 0x3e18 <udc_process_setup+0x222>
    3e16:	43 c1       	rjmp	.+646    	; 0x409e <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    3e18:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <udd_g_ctrlreq+0x4>
    3e1c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <udd_ep_is_halted>
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	80 93 d0 23 	sts	0x23D0, r24	; 0x8023d0 <udc_ep_status.4757>
    3e26:	90 93 d1 23 	sts	0x23D1, r25	; 0x8023d1 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    3e2a:	62 e0       	ldi	r22, 0x02	; 2
    3e2c:	70 e0       	ldi	r23, 0x00	; 0
    3e2e:	80 ed       	ldi	r24, 0xD0	; 208
    3e30:	93 e2       	ldi	r25, 0x23	; 35
    3e32:	0e 94 59 11 	call	0x22b2	; 0x22b2 <udd_set_setup_payload>
    3e36:	8d c1       	rjmp	.+794    	; 0x4152 <udc_process_setup+0x55c>
    3e38:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3e3a:	09 f0       	breq	.+2      	; 0x3e3e <udc_process_setup+0x248>
    3e3c:	a0 c0       	rjmp	.+320    	; 0x3f7e <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3e3e:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    3e42:	93 30       	cpi	r25, 0x03	; 3
    3e44:	91 f1       	breq	.+100    	; 0x3eaa <udc_process_setup+0x2b4>
    3e46:	18 f4       	brcc	.+6      	; 0x3e4e <udc_process_setup+0x258>
    3e48:	91 30       	cpi	r25, 0x01	; 1
    3e4a:	a9 f0       	breq	.+42     	; 0x3e76 <udc_process_setup+0x280>
    3e4c:	98 c0       	rjmp	.+304    	; 0x3f7e <udc_process_setup+0x388>
    3e4e:	95 30       	cpi	r25, 0x05	; 5
    3e50:	21 f0       	breq	.+8      	; 0x3e5a <udc_process_setup+0x264>
    3e52:	99 30       	cpi	r25, 0x09	; 9
    3e54:	09 f4       	brne	.+2      	; 0x3e58 <udc_process_setup+0x262>
    3e56:	43 c0       	rjmp	.+134    	; 0x3ede <udc_process_setup+0x2e8>
    3e58:	92 c0       	rjmp	.+292    	; 0x3f7e <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3e5a:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    3e5e:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    3e62:	89 2b       	or	r24, r25
    3e64:	09 f0       	breq	.+2      	; 0x3e68 <udc_process_setup+0x272>
    3e66:	1b c1       	rjmp	.+566    	; 0x409e <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    3e68:	8a ee       	ldi	r24, 0xEA	; 234
    3e6a:	9c e1       	ldi	r25, 0x1C	; 28
    3e6c:	80 93 ee 23 	sts	0x23EE, r24	; 0x8023ee <udd_g_ctrlreq+0xc>
    3e70:	90 93 ef 23 	sts	0x23EF, r25	; 0x8023ef <udd_g_ctrlreq+0xd>
    3e74:	6e c1       	rjmp	.+732    	; 0x4152 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3e76:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    3e7a:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    3e7e:	89 2b       	or	r24, r25
    3e80:	09 f0       	breq	.+2      	; 0x3e84 <udc_process_setup+0x28e>
    3e82:	0d c1       	rjmp	.+538    	; 0x409e <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    3e84:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    3e88:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    3e8c:	01 97       	sbiw	r24, 0x01	; 1
    3e8e:	09 f0       	breq	.+2      	; 0x3e92 <udc_process_setup+0x29c>
    3e90:	06 c1       	rjmp	.+524    	; 0x409e <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    3e92:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_device_status>
    3e96:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <udc_device_status+0x1>
    3e9a:	8d 7f       	andi	r24, 0xFD	; 253
    3e9c:	80 93 da 23 	sts	0x23DA, r24	; 0x8023da <udc_device_status>
    3ea0:	90 93 db 23 	sts	0x23DB, r25	; 0x8023db <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    3ea4:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <usb_callback_remotewakeup_disable>
    3ea8:	54 c1       	rjmp	.+680    	; 0x4152 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3eaa:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    3eae:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    3eb2:	89 2b       	or	r24, r25
    3eb4:	09 f0       	breq	.+2      	; 0x3eb8 <udc_process_setup+0x2c2>
    3eb6:	f3 c0       	rjmp	.+486    	; 0x409e <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    3eb8:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    3ebc:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	09 f0       	breq	.+2      	; 0x3ec6 <udc_process_setup+0x2d0>
    3ec4:	b2 c0       	rjmp	.+356    	; 0x402a <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    3ec6:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_device_status>
    3eca:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <udc_device_status+0x1>
    3ece:	82 60       	ori	r24, 0x02	; 2
    3ed0:	80 93 da 23 	sts	0x23DA, r24	; 0x8023da <udc_device_status>
    3ed4:	90 93 db 23 	sts	0x23DB, r25	; 0x8023db <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    3ed8:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <usb_callback_remotewakeup_enable>
    3edc:	3a c1       	rjmp	.+628    	; 0x4152 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    3ede:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    3ee2:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    3ee6:	89 2b       	or	r24, r25
    3ee8:	09 f0       	breq	.+2      	; 0x3eec <udc_process_setup+0x2f6>
    3eea:	d9 c0       	rjmp	.+434    	; 0x409e <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    3eec:	0e 94 4e 11 	call	0x229c	; 0x229c <udd_getaddress>
    3ef0:	88 23       	and	r24, r24
    3ef2:	09 f4       	brne	.+2      	; 0x3ef6 <udc_process_setup+0x300>
    3ef4:	9f c0       	rjmp	.+318    	; 0x4034 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3ef6:	20 91 e4 23 	lds	r18, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    3efa:	30 91 e5 23 	lds	r19, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    3efe:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    3f00:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <udc_config>
    3f04:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3f08:	81 89       	ldd	r24, Z+17	; 0x11
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	82 17       	cp	r24, r18
    3f0e:	93 07       	cpc	r25, r19
    3f10:	08 f4       	brcc	.+2      	; 0x3f14 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    3f12:	90 c0       	rjmp	.+288    	; 0x4034 <udc_process_setup+0x43e>
    3f14:	17 de       	rcall	.-978    	; 0x3b44 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    3f16:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    3f1a:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    3f1e:	80 93 d6 23 	sts	0x23D6, r24	; 0x8023d6 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    3f22:	88 23       	and	r24, r24
    3f24:	09 f4       	brne	.+2      	; 0x3f28 <udc_process_setup+0x332>
    3f26:	15 c1       	rjmp	.+554    	; 0x4152 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    3f28:	99 27       	eor	r25, r25
    3f2a:	81 50       	subi	r24, 0x01	; 1
    3f2c:	90 4c       	sbci	r25, 0xC0	; 192
    3f2e:	88 0f       	add	r24, r24
    3f30:	99 1f       	adc	r25, r25
    3f32:	88 0f       	add	r24, r24
    3f34:	99 1f       	adc	r25, r25
    3f36:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <udc_config+0x2>
    3f3a:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <udc_config+0x3>
    3f3e:	e8 0f       	add	r30, r24
    3f40:	f9 1f       	adc	r31, r25
    3f42:	e0 93 d4 23 	sts	0x23D4, r30	; 0x8023d4 <udc_ptr_conf>
    3f46:	f0 93 d5 23 	sts	0x23D5, r31	; 0x8023d5 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3f4a:	01 90       	ld	r0, Z+
    3f4c:	f0 81       	ld	r31, Z
    3f4e:	e0 2d       	mov	r30, r0
    3f50:	84 81       	ldd	r24, Z+4	; 0x04
    3f52:	88 23       	and	r24, r24
    3f54:	09 f4       	brne	.+2      	; 0x3f58 <udc_process_setup+0x362>
    3f56:	fd c0       	rjmp	.+506    	; 0x4152 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    3f58:	c0 e0       	ldi	r28, 0x00	; 0
    3f5a:	60 e0       	ldi	r22, 0x00	; 0
    3f5c:	8c 2f       	mov	r24, r28
    3f5e:	bc dd       	rcall	.-1160   	; 0x3ad8 <udc_iface_enable>
    3f60:	88 23       	and	r24, r24
    3f62:	09 f4       	brne	.+2      	; 0x3f66 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3f64:	67 c0       	rjmp	.+206    	; 0x4034 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3f66:	cf 5f       	subi	r28, 0xFF	; 255
    3f68:	e0 91 d4 23 	lds	r30, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    3f6c:	f0 91 d5 23 	lds	r31, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    3f70:	01 90       	ld	r0, Z+
    3f72:	f0 81       	ld	r31, Z
    3f74:	e0 2d       	mov	r30, r0
    3f76:	84 81       	ldd	r24, Z+4	; 0x04
    3f78:	c8 17       	cp	r28, r24
    3f7a:	78 f3       	brcs	.-34     	; 0x3f5a <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3f7c:	ea c0       	rjmp	.+468    	; 0x4152 <udc_process_setup+0x55c>
    3f7e:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3f80:	e9 f4       	brne	.+58     	; 0x3fbc <udc_process_setup+0x3c6>
    3f82:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    3f86:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    3f88:	c9 f4       	brne	.+50     	; 0x3fbc <udc_process_setup+0x3c6>
    3f8a:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    3f8e:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    3f92:	89 2b       	or	r24, r25
    3f94:	09 f0       	breq	.+2      	; 0x3f98 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    3f96:	53 c0       	rjmp	.+166    	; 0x403e <udc_process_setup+0x448>
    3f98:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    3f9c:	88 23       	and	r24, r24
    3f9e:	09 f4       	brne	.+2      	; 0x3fa2 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3fa0:	4e c0       	rjmp	.+156    	; 0x403e <udc_process_setup+0x448>
    3fa2:	e2 ee       	ldi	r30, 0xE2	; 226
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    3fa4:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    3fa6:	c4 81       	ldd	r28, Z+4	; 0x04
    3fa8:	d2 81       	ldd	r29, Z+2	; 0x02
    3faa:	8c 2f       	mov	r24, r28
    3fac:	53 dd       	rcall	.-1370   	; 0x3a54 <udc_iface_disable>
    3fae:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    3fb0:	09 f4       	brne	.+2      	; 0x3fb4 <udc_process_setup+0x3be>
    3fb2:	40 c0       	rjmp	.+128    	; 0x4034 <udc_process_setup+0x43e>
    3fb4:	6d 2f       	mov	r22, r29
    3fb6:	8c 2f       	mov	r24, r28
    3fb8:	8f dd       	rcall	.-1250   	; 0x3ad8 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3fba:	3a c0       	rjmp	.+116    	; 0x4030 <udc_process_setup+0x43a>
    3fbc:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3fbe:	d1 f5       	brne	.+116    	; 0x4034 <udc_process_setup+0x43e>
    3fc0:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    3fc4:	81 30       	cpi	r24, 0x01	; 1
    3fc6:	19 f0       	breq	.+6      	; 0x3fce <udc_process_setup+0x3d8>
    3fc8:	83 30       	cpi	r24, 0x03	; 3
    3fca:	a1 f0       	breq	.+40     	; 0x3ff4 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3fcc:	30 c0       	rjmp	.+96     	; 0x402e <udc_process_setup+0x438>
    3fce:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    3fd2:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    3fd6:	89 2b       	or	r24, r25
    3fd8:	09 f0       	breq	.+2      	; 0x3fdc <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3fda:	61 c0       	rjmp	.+194    	; 0x409e <udc_process_setup+0x4a8>
    3fdc:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    3fe0:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    3fe4:	89 2b       	or	r24, r25
    3fe6:	09 f0       	breq	.+2      	; 0x3fea <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3fe8:	5a c0       	rjmp	.+180    	; 0x409e <udc_process_setup+0x4a8>
    3fea:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <udd_g_ctrlreq+0x4>
    3fee:	0e 94 03 12 	call	0x2406	; 0x2406 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3ff2:	1e c0       	rjmp	.+60     	; 0x4030 <udc_process_setup+0x43a>
    3ff4:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    3ff8:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    3ffc:	89 2b       	or	r24, r25
    3ffe:	09 f0       	breq	.+2      	; 0x4002 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4000:	4e c0       	rjmp	.+156    	; 0x409e <udc_process_setup+0x4a8>
    4002:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    4006:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    400a:	89 2b       	or	r24, r25
    400c:	09 f0       	breq	.+2      	; 0x4010 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    400e:	47 c0       	rjmp	.+142    	; 0x409e <udc_process_setup+0x4a8>
    4010:	c2 ee       	ldi	r28, 0xE2	; 226
    4012:	d3 e2       	ldi	r29, 0x23	; 35
    4014:	8c 81       	ldd	r24, Y+4	; 0x04
    4016:	0e 94 05 13 	call	0x260a	; 0x260a <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    401a:	8c 81       	ldd	r24, Y+4	; 0x04
    401c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    4020:	07 c0       	rjmp	.+14     	; 0x4030 <udc_process_setup+0x43a>
    4022:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    4024:	05 c0       	rjmp	.+10     	; 0x4030 <udc_process_setup+0x43a>
    4026:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    4028:	03 c0       	rjmp	.+6      	; 0x4030 <udc_process_setup+0x43a>
    402a:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    402c:	01 c0       	rjmp	.+2      	; 0x4030 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    4032:	90 c0       	rjmp	.+288    	; 0x4154 <udc_process_setup+0x55e>
    4034:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udd_g_ctrlreq>
    4038:	8f 71       	andi	r24, 0x1F	; 31
    403a:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    403c:	81 f5       	brne	.+96     	; 0x409e <udc_process_setup+0x4a8>
    403e:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    4042:	88 23       	and	r24, r24
    4044:	09 f4       	brne	.+2      	; 0x4048 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4046:	71 c0       	rjmp	.+226    	; 0x412a <udc_process_setup+0x534>
    4048:	00 91 e6 23 	lds	r16, 0x23E6	; 0x8023e6 <udd_g_ctrlreq+0x4>
    404c:	10 91 e7 23 	lds	r17, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4050:	c0 91 d4 23 	lds	r28, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    4054:	d0 91 d5 23 	lds	r29, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    4058:	e8 81       	ld	r30, Y
    405a:	f9 81       	ldd	r31, Y+1	; 0x01
    405c:	84 81       	ldd	r24, Z+4	; 0x04
    405e:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4060:	08 f0       	brcs	.+2      	; 0x4064 <udc_process_setup+0x46e>
    4062:	65 c0       	rjmp	.+202    	; 0x412e <udc_process_setup+0x538>
    4064:	60 e0       	ldi	r22, 0x00	; 0
    4066:	80 2f       	mov	r24, r16
    4068:	bb dc       	rcall	.-1674   	; 0x39e0 <udc_update_iface_desc>
    406a:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    406c:	c1 f0       	breq	.+48     	; 0x409e <udc_process_setup+0x4a8>
    406e:	f8 01       	movw	r30, r16
    4070:	ff 27       	eor	r31, r31
    4072:	cf 01       	movw	r24, r30
    4074:	88 0f       	add	r24, r24
    4076:	99 1f       	adc	r25, r25
    4078:	ea 81       	ldd	r30, Y+2	; 0x02
    407a:	fb 81       	ldd	r31, Y+3	; 0x03
    407c:	e8 0f       	add	r30, r24
    407e:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4080:	c0 81       	ld	r28, Z
    4082:	d1 81       	ldd	r29, Z+1	; 0x01
    4084:	ee 81       	ldd	r30, Y+6	; 0x06
    4086:	ff 81       	ldd	r31, Y+7	; 0x07
    4088:	19 95       	eicall
    408a:	68 2f       	mov	r22, r24
    408c:	80 2f       	mov	r24, r16
    408e:	a8 dc       	rcall	.-1712   	; 0x39e0 <udc_update_iface_desc>
    4090:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    4092:	29 f0       	breq	.+10     	; 0x409e <udc_process_setup+0x4a8>
    4094:	ec 81       	ldd	r30, Y+4	; 0x04
    4096:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    4098:	19 95       	eicall
    409a:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    409c:	5b c0       	rjmp	.+182    	; 0x4154 <udc_process_setup+0x55e>
    409e:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udd_g_ctrlreq>
    40a2:	8f 71       	andi	r24, 0x1F	; 31
    40a4:	82 30       	cpi	r24, 0x02	; 2
    40a6:	09 f0       	breq	.+2      	; 0x40aa <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    40a8:	44 c0       	rjmp	.+136    	; 0x4132 <udc_process_setup+0x53c>
    40aa:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    40ae:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    40b0:	b1 f1       	breq	.+108    	; 0x411e <udc_process_setup+0x528>
    40b2:	a0 91 d4 23 	lds	r26, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    40b6:	b0 91 d5 23 	lds	r27, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    40ba:	ed 91       	ld	r30, X+
    40bc:	fc 91       	ld	r31, X
    40be:	11 97       	sbiw	r26, 0x01	; 1
    40c0:	84 81       	ldd	r24, Z+4	; 0x04
    40c2:	88 23       	and	r24, r24
    40c4:	71 f1       	breq	.+92     	; 0x4122 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    40c6:	c0 e0       	ldi	r28, 0x00	; 0
    40c8:	ec 2f       	mov	r30, r28
    40ca:	f0 e0       	ldi	r31, 0x00	; 0
    40cc:	ee 0f       	add	r30, r30
    40ce:	ff 1f       	adc	r31, r31
    40d0:	12 96       	adiw	r26, 0x02	; 2
    40d2:	8d 91       	ld	r24, X+
    40d4:	9c 91       	ld	r25, X
    40d6:	13 97       	sbiw	r26, 0x03	; 3
    40d8:	e8 0f       	add	r30, r24
    40da:	f9 1f       	adc	r31, r25
    40dc:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    40de:	11 81       	ldd	r17, Z+1	; 0x01
    40e0:	d8 01       	movw	r26, r16
    40e2:	16 96       	adiw	r26, 0x06	; 6
    40e4:	ed 91       	ld	r30, X+
    40e6:	fc 91       	ld	r31, X
    40e8:	17 97       	sbiw	r26, 0x07	; 7
    40ea:	19 95       	eicall
    40ec:	68 2f       	mov	r22, r24
    40ee:	8c 2f       	mov	r24, r28
    40f0:	77 dc       	rcall	.-1810   	; 0x39e0 <udc_update_iface_desc>
    40f2:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    40f4:	79 f1       	breq	.+94     	; 0x4154 <udc_process_setup+0x55e>
    40f6:	d8 01       	movw	r26, r16
    40f8:	14 96       	adiw	r26, 0x04	; 4
    40fa:	ed 91       	ld	r30, X+
    40fc:	fc 91       	ld	r31, X
    40fe:	15 97       	sbiw	r26, 0x05	; 5
    4100:	19 95       	eicall
    4102:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    4104:	27 c0       	rjmp	.+78     	; 0x4154 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4106:	cf 5f       	subi	r28, 0xFF	; 255
    4108:	a0 91 d4 23 	lds	r26, 0x23D4	; 0x8023d4 <udc_ptr_conf>
    410c:	b0 91 d5 23 	lds	r27, 0x23D5	; 0x8023d5 <udc_ptr_conf+0x1>
    4110:	ed 91       	ld	r30, X+
    4112:	fc 91       	ld	r31, X
    4114:	11 97       	sbiw	r26, 0x01	; 1
    4116:	94 81       	ldd	r25, Z+4	; 0x04
    4118:	c9 17       	cp	r28, r25
    411a:	b0 f2       	brcs	.-84     	; 0x40c8 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    411c:	1b c0       	rjmp	.+54     	; 0x4154 <udc_process_setup+0x55e>
    411e:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    4120:	19 c0       	rjmp	.+50     	; 0x4154 <udc_process_setup+0x55e>
    4122:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    4124:	17 c0       	rjmp	.+46     	; 0x4154 <udc_process_setup+0x55e>
    4126:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    4128:	15 c0       	rjmp	.+42     	; 0x4154 <udc_process_setup+0x55e>
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	13 c0       	rjmp	.+38     	; 0x4154 <udc_process_setup+0x55e>
    412e:	80 e0       	ldi	r24, 0x00	; 0
    4130:	11 c0       	rjmp	.+34     	; 0x4154 <udc_process_setup+0x55e>
    4132:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    4134:	0f c0       	rjmp	.+30     	; 0x4154 <udc_process_setup+0x55e>
    4136:	98 2f       	mov	r25, r24
    4138:	90 76       	andi	r25, 0x60	; 96
    413a:	09 f0       	breq	.+2      	; 0x413e <udc_process_setup+0x548>
    413c:	7b cf       	rjmp	.-266    	; 0x4034 <udc_process_setup+0x43e>
    413e:	74 cd       	rjmp	.-1304   	; 0x3c28 <udc_process_setup+0x32>
    4140:	98 2f       	mov	r25, r24
    4142:	90 76       	andi	r25, 0x60	; 96
    4144:	09 f0       	breq	.+2      	; 0x4148 <udc_process_setup+0x552>
    4146:	76 cf       	rjmp	.-276    	; 0x4034 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    4148:	77 ce       	rjmp	.-786    	; 0x3e38 <udc_process_setup+0x242>
		str = udc_string_product_name;
    414a:	3e e0       	ldi	r19, 0x0E	; 14
    414c:	e2 eb       	ldi	r30, 0xB2	; 178
    414e:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    4150:	eb cd       	rjmp	.-1066   	; 0x3d28 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    4152:	81 e0       	ldi	r24, 0x01	; 1
    4154:	df 91       	pop	r29
    4156:	cf 91       	pop	r28
    4158:	1f 91       	pop	r17
    415a:	0f 91       	pop	r16
    415c:	08 95       	ret

0000415e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    415e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    4162:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    4164:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    4166:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    416a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    416c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    4170:	08 95       	ret

00004172 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    4172:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    4174:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    4176:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    4178:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    417a:	60 83       	st	Z, r22
	ret                             // Return to caller
    417c:	08 95       	ret

0000417e <__udivmodhi4>:
    417e:	aa 1b       	sub	r26, r26
    4180:	bb 1b       	sub	r27, r27
    4182:	51 e1       	ldi	r21, 0x11	; 17
    4184:	07 c0       	rjmp	.+14     	; 0x4194 <__udivmodhi4_ep>

00004186 <__udivmodhi4_loop>:
    4186:	aa 1f       	adc	r26, r26
    4188:	bb 1f       	adc	r27, r27
    418a:	a6 17       	cp	r26, r22
    418c:	b7 07       	cpc	r27, r23
    418e:	10 f0       	brcs	.+4      	; 0x4194 <__udivmodhi4_ep>
    4190:	a6 1b       	sub	r26, r22
    4192:	b7 0b       	sbc	r27, r23

00004194 <__udivmodhi4_ep>:
    4194:	88 1f       	adc	r24, r24
    4196:	99 1f       	adc	r25, r25
    4198:	5a 95       	dec	r21
    419a:	a9 f7       	brne	.-22     	; 0x4186 <__udivmodhi4_loop>
    419c:	80 95       	com	r24
    419e:	90 95       	com	r25
    41a0:	bc 01       	movw	r22, r24
    41a2:	cd 01       	movw	r24, r26
    41a4:	08 95       	ret

000041a6 <__udivmodsi4>:
    41a6:	a1 e2       	ldi	r26, 0x21	; 33
    41a8:	1a 2e       	mov	r1, r26
    41aa:	aa 1b       	sub	r26, r26
    41ac:	bb 1b       	sub	r27, r27
    41ae:	fd 01       	movw	r30, r26
    41b0:	0d c0       	rjmp	.+26     	; 0x41cc <__udivmodsi4_ep>

000041b2 <__udivmodsi4_loop>:
    41b2:	aa 1f       	adc	r26, r26
    41b4:	bb 1f       	adc	r27, r27
    41b6:	ee 1f       	adc	r30, r30
    41b8:	ff 1f       	adc	r31, r31
    41ba:	a2 17       	cp	r26, r18
    41bc:	b3 07       	cpc	r27, r19
    41be:	e4 07       	cpc	r30, r20
    41c0:	f5 07       	cpc	r31, r21
    41c2:	20 f0       	brcs	.+8      	; 0x41cc <__udivmodsi4_ep>
    41c4:	a2 1b       	sub	r26, r18
    41c6:	b3 0b       	sbc	r27, r19
    41c8:	e4 0b       	sbc	r30, r20
    41ca:	f5 0b       	sbc	r31, r21

000041cc <__udivmodsi4_ep>:
    41cc:	66 1f       	adc	r22, r22
    41ce:	77 1f       	adc	r23, r23
    41d0:	88 1f       	adc	r24, r24
    41d2:	99 1f       	adc	r25, r25
    41d4:	1a 94       	dec	r1
    41d6:	69 f7       	brne	.-38     	; 0x41b2 <__udivmodsi4_loop>
    41d8:	60 95       	com	r22
    41da:	70 95       	com	r23
    41dc:	80 95       	com	r24
    41de:	90 95       	com	r25
    41e0:	9b 01       	movw	r18, r22
    41e2:	ac 01       	movw	r20, r24
    41e4:	bd 01       	movw	r22, r26
    41e6:	cf 01       	movw	r24, r30
    41e8:	08 95       	ret

000041ea <__tablejump2__>:
    41ea:	ee 0f       	add	r30, r30
    41ec:	ff 1f       	adc	r31, r31
    41ee:	88 1f       	adc	r24, r24
    41f0:	8b bf       	out	0x3b, r24	; 59
    41f2:	07 90       	elpm	r0, Z+
    41f4:	f6 91       	elpm	r31, Z
    41f6:	e0 2d       	mov	r30, r0
    41f8:	19 94       	eijmp

000041fa <__umulhisi3>:
    41fa:	a2 9f       	mul	r26, r18
    41fc:	b0 01       	movw	r22, r0
    41fe:	b3 9f       	mul	r27, r19
    4200:	c0 01       	movw	r24, r0
    4202:	a3 9f       	mul	r26, r19
    4204:	70 0d       	add	r23, r0
    4206:	81 1d       	adc	r24, r1
    4208:	11 24       	eor	r1, r1
    420a:	91 1d       	adc	r25, r1
    420c:	b2 9f       	mul	r27, r18
    420e:	70 0d       	add	r23, r0
    4210:	81 1d       	adc	r24, r1
    4212:	11 24       	eor	r1, r1
    4214:	91 1d       	adc	r25, r1
    4216:	08 95       	ret

00004218 <memcpy>:
    4218:	fb 01       	movw	r30, r22
    421a:	dc 01       	movw	r26, r24
    421c:	02 c0       	rjmp	.+4      	; 0x4222 <memcpy+0xa>
    421e:	01 90       	ld	r0, Z+
    4220:	0d 92       	st	X+, r0
    4222:	41 50       	subi	r20, 0x01	; 1
    4224:	50 40       	sbci	r21, 0x00	; 0
    4226:	d8 f7       	brcc	.-10     	; 0x421e <memcpy+0x6>
    4228:	08 95       	ret

0000422a <_exit>:
    422a:	f8 94       	cli

0000422c <__stop_program>:
    422c:	ff cf       	rjmp	.-2      	; 0x422c <__stop_program>
