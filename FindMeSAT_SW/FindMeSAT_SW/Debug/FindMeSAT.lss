
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000107e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d0  00802000  000107e2  00010876  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000caf  008021d0  008021d0  00010a48  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00010a46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00010aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ca0  00000000  00000000  00010ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00026831  00000000  00000000  00011788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007a0d  00000000  00000000  00037fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001507f  00000000  00000000  0003f9c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003a68  00000000  00000000  00054a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000444ab  00000000  00000000  000584b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000111f0  00000000  00000000  0009c95b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d40  00000000  00000000  000adb50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00010490  00000000  00000000  000ae890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__ctors_end>
       4:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
       8:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
       c:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      10:	0c 94 a2 6a 	jmp	0xd544	; 0xd544 <__vector_4>
      14:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      18:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <__vector_6>
      1c:	0c 94 05 26 	jmp	0x4c0a	; 0x4c0a <__vector_7>
      20:	0c 94 2d 26 	jmp	0x4c5a	; 0x4c5a <__vector_8>
      24:	0c 94 55 26 	jmp	0x4caa	; 0x4caa <__vector_9>
      28:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      2c:	0c 94 2e 27 	jmp	0x4e5c	; 0x4e5c <__vector_11>
      30:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      34:	0c 94 11 52 	jmp	0xa422	; 0xa422 <__vector_13>
      38:	0c 94 69 4a 	jmp	0x94d2	; 0x94d2 <__vector_14>
      3c:	0c 94 96 4a 	jmp	0x952c	; 0x952c <__vector_15>
      40:	0c 94 c3 4a 	jmp	0x9586	; 0x9586 <__vector_16>
      44:	0c 94 f0 4a 	jmp	0x95e0	; 0x95e0 <__vector_17>
      48:	0c 94 1d 4b 	jmp	0x963a	; 0x963a <__vector_18>
      4c:	0c 94 4a 4b 	jmp	0x9694	; 0x9694 <__vector_19>
      50:	0c 94 77 4b 	jmp	0x96ee	; 0x96ee <__vector_20>
      54:	0c 94 a4 4b 	jmp	0x9748	; 0x9748 <__vector_21>
      58:	0c 94 d1 4b 	jmp	0x97a2	; 0x97a2 <__vector_22>
      5c:	0c 94 fe 4b 	jmp	0x97fc	; 0x97fc <__vector_23>
      60:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      64:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      68:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      6c:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      70:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      74:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      78:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      7c:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      80:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      84:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      88:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      8c:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      90:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      94:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      98:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      9c:	0c 94 6c 47 	jmp	0x8ed8	; 0x8ed8 <__vector_39>
      a0:	0c 94 9e 47 	jmp	0x8f3c	; 0x8f3c <__vector_40>
      a4:	0c 94 d0 47 	jmp	0x8fa0	; 0x8fa0 <__vector_41>
      a8:	0c 94 02 48 	jmp	0x9004	; 0x9004 <__vector_42>
      ac:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      b0:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      b4:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      b8:	0c 94 38 52 	jmp	0xa470	; 0xa470 <__vector_46>
      bc:	0c 94 ed 4d 	jmp	0x9bda	; 0x9bda <__vector_47>
      c0:	0c 94 1a 4e 	jmp	0x9c34	; 0x9c34 <__vector_48>
      c4:	0c 94 47 4e 	jmp	0x9c8e	; 0x9c8e <__vector_49>
      c8:	0c 94 74 4e 	jmp	0x9ce8	; 0x9ce8 <__vector_50>
      cc:	0c 94 a1 4e 	jmp	0x9d42	; 0x9d42 <__vector_51>
      d0:	0c 94 ce 4e 	jmp	0x9d9c	; 0x9d9c <__vector_52>
      d4:	0c 94 fb 4e 	jmp	0x9df6	; 0x9df6 <__vector_53>
      d8:	0c 94 28 4f 	jmp	0x9e50	; 0x9e50 <__vector_54>
      dc:	0c 94 55 4f 	jmp	0x9eaa	; 0x9eaa <__vector_55>
      e0:	0c 94 82 4f 	jmp	0x9f04	; 0x9f04 <__vector_56>
      e4:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      e8:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      ec:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      f0:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      f4:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      f8:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
      fc:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     100:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     104:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     108:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     10c:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     110:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     114:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     118:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     11c:	0c 94 a4 46 	jmp	0x8d48	; 0x8d48 <__vector_71>
     120:	0c 94 d6 46 	jmp	0x8dac	; 0x8dac <__vector_72>
     124:	0c 94 08 47 	jmp	0x8e10	; 0x8e10 <__vector_73>
     128:	0c 94 3a 47 	jmp	0x8e74	; 0x8e74 <__vector_74>
     12c:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     130:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     134:	0c 94 2b 4c 	jmp	0x9856	; 0x9856 <__vector_77>
     138:	0c 94 58 4c 	jmp	0x98b0	; 0x98b0 <__vector_78>
     13c:	0c 94 85 4c 	jmp	0x990a	; 0x990a <__vector_79>
     140:	0c 94 b2 4c 	jmp	0x9964	; 0x9964 <__vector_80>
     144:	0c 94 df 4c 	jmp	0x99be	; 0x99be <__vector_81>
     148:	0c 94 0c 4d 	jmp	0x9a18	; 0x9a18 <__vector_82>
     14c:	0c 94 39 4d 	jmp	0x9a72	; 0x9a72 <__vector_83>
     150:	0c 94 66 4d 	jmp	0x9acc	; 0x9acc <__vector_84>
     154:	0c 94 93 4d 	jmp	0x9b26	; 0x9b26 <__vector_85>
     158:	0c 94 c0 4d 	jmp	0x9b80	; 0x9b80 <__vector_86>
     15c:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     160:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     164:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     168:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     16c:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     170:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     174:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     178:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     17c:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     180:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     184:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     188:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     18c:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     190:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     194:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     198:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     19c:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1a0:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1a4:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1a8:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1ac:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1b0:	0c 94 af 4f 	jmp	0x9f5e	; 0x9f5e <__vector_108>
     1b4:	0c 94 dc 4f 	jmp	0x9fb8	; 0x9fb8 <__vector_109>
     1b8:	0c 94 09 50 	jmp	0xa012	; 0xa012 <__vector_110>
     1bc:	0c 94 36 50 	jmp	0xa06c	; 0xa06c <__vector_111>
     1c0:	0c 94 63 50 	jmp	0xa0c6	; 0xa0c6 <__vector_112>
     1c4:	0c 94 90 50 	jmp	0xa120	; 0xa120 <__vector_113>
     1c8:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1cc:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1d0:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1d4:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1d8:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1dc:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <__vector_119>
     1e0:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1e4:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1e8:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1ec:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1f0:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__bad_interrupt>
     1f4:	0c 94 22 59 	jmp	0xb244	; 0xb244 <__vector_125>
     1f8:	0c 94 de 59 	jmp	0xb3bc	; 0xb3bc <__vector_126>
     1fc:	d6 53       	subi	r29, 0x36	; 54
     1fe:	d9 53       	subi	r29, 0x39	; 57
     200:	dc 53       	subi	r29, 0x3C	; 60
     202:	df 53       	subi	r29, 0x3F	; 63
     204:	e2 53       	subi	r30, 0x32	; 50
     206:	e5 53       	subi	r30, 0x35	; 53
     208:	e8 53       	subi	r30, 0x38	; 56
     20a:	56 5b       	subi	r21, 0xB6	; 182
     20c:	69 5b       	subi	r22, 0xB9	; 185
     20e:	7c 5b       	subi	r23, 0xBC	; 188
     210:	8f 5b       	subi	r24, 0xBF	; 191
     212:	a2 5b       	subi	r26, 0xB2	; 178
     214:	b5 5b       	subi	r27, 0xB5	; 181
     216:	c8 5b       	subi	r28, 0xB8	; 184
     218:	05 a8       	ldd	r0, Z+53	; 0x35
     21a:	4c cd       	rjmp	.-1384   	; 0xfffffcb4 <__eeprom_end+0xff7efcb4>
     21c:	b2 d4       	rcall	.+2404   	; 0xb82 <PM_SINE_IP+0x446>
     21e:	4e b9       	out	0x0e, r20	; 14
     220:	38 36       	cpi	r19, 0x68	; 104
     222:	a9 02       	muls	r26, r25
     224:	0c 50       	subi	r16, 0x0C	; 12
     226:	b9 91       	ld	r27, Y+
     228:	86 88       	ldd	r8, Z+22	; 0x16
     22a:	08 3c       	cpi	r16, 0xC8	; 200
     22c:	a6 aa       	std	Z+54, r10	; 0x36
     22e:	aa 2a       	or	r10, r26
     230:	be 00       	.word	0x00be	; ????
     232:	00 00       	nop
     234:	80 3f       	cpi	r24, 0xF0	; 240
     236:	07 63       	ori	r16, 0x37	; 55
     238:	42 36       	cpi	r20, 0x62	; 98
     23a:	b7 9b       	sbis	0x16, 7	; 22
     23c:	d8 a7       	std	Y+40, r29	; 0x28
     23e:	1a 39       	cpi	r17, 0x9A	; 154
     240:	68 56       	subi	r22, 0x68	; 104
     242:	18 ae       	std	Y+56, r1	; 0x38
     244:	ba ab       	std	Y+50, r27	; 0x32
     246:	55 8c       	ldd	r5, Z+29	; 0x1d
     248:	1d 3c       	cpi	r17, 0xCD	; 205
     24a:	b7 cc       	rjmp	.-1682   	; 0xfffffbba <__eeprom_end+0xff7efbba>
     24c:	57 63       	ori	r21, 0x37	; 55
     24e:	bd 6d       	ori	r27, 0xDD	; 221
     250:	ed fd       	.word	0xfded	; ????
     252:	75 3e       	cpi	r23, 0xE5	; 229
     254:	f6 17       	cp	r31, r22
     256:	72 31       	cpi	r23, 0x12	; 18
     258:	bf 00       	.word	0x00bf	; ????
     25a:	00 00       	nop
     25c:	80 3f       	cpi	r24, 0xF0	; 240
     25e:	08 00       	.word	0x0008	; ????
     260:	00 00       	nop
     262:	be 92       	st	-X, r11
     264:	24 49       	sbci	r18, 0x94	; 148
     266:	12 3e       	cpi	r17, 0xE2	; 226
     268:	ab aa       	std	Y+51, r10	; 0x33
     26a:	aa 2a       	or	r10, r26
     26c:	be cd       	rjmp	.-1156   	; 0xfffffdea <__eeprom_end+0xff7efdea>
     26e:	cc cc       	rjmp	.-1640   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
     270:	4c 3e       	cpi	r20, 0xEC	; 236
     272:	00 00       	nop
     274:	00 80       	ld	r0, Z
     276:	be ab       	std	Y+54, r27	; 0x36
     278:	aa aa       	std	Y+50, r10	; 0x32
     27a:	aa 3e       	cpi	r26, 0xEA	; 234
     27c:	00 00       	nop
     27e:	00 00       	nop
     280:	bf 00       	.word	0x00bf	; ????
     282:	00 00       	nop
     284:	80 3f       	cpi	r24, 0xF0	; 240
     286:	00 00       	nop
     288:	00 00       	nop
     28a:	00 08       	sbc	r0, r0
     28c:	41 78       	andi	r20, 0x81	; 129
     28e:	d3 bb       	out	0x13, r29	; 19
     290:	43 87       	std	Z+11, r20	; 0x0b
     292:	d1 13       	cpse	r29, r17
     294:	3d 19       	sub	r19, r13
     296:	0e 3c       	cpi	r16, 0xCE	; 206
     298:	c3 bd       	out	0x23, r28	; 35
     29a:	42 82       	std	Z+2, r4	; 0x02
     29c:	ad 2b       	or	r26, r29
     29e:	3e 68       	ori	r19, 0x8E	; 142
     2a0:	ec 82       	std	Y+4, r14	; 0x04
     2a2:	76 be       	out	0x36, r7	; 54
     2a4:	d9 8f       	std	Y+25, r29	; 0x19
     2a6:	e1 a9       	ldd	r30, Z+49	; 0x31
     2a8:	3e 4c       	sbci	r19, 0xCE	; 206
     2aa:	80 ef       	ldi	r24, 0xF0	; 240
     2ac:	ff be       	out	0x3f, r15	; 63
     2ae:	01 c4       	rjmp	.+2050   	; 0xab2 <PM_SINE_IP+0x376>
     2b0:	ff 7f       	andi	r31, 0xFF	; 255
     2b2:	3f 00       	.word	0x003f	; ????
     2b4:	00 00       	nop
	...

000002b8 <__trampolines_end>:
     2b8:	6e 61       	ori	r22, 0x1E	; 30
     2ba:	6e 00       	.word	0x006e	; ????

000002bc <__c.2332>:
     2bc:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2cc:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2dc:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2ec:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2fc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     30c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     31c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     32c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     33c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     34c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     35c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     36c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     37c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     38c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     39c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3ac:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003ba <pstr_nan>:
     3ba:	4e 41 4e                                            NAN

000003bd <pstr_inity>:
     3bd:	49 4e 49 54 59                                      INITY

000003c2 <pstr_inf>:
     3c2:	49 4e 46                                            INF

000003c5 <pwr_m10>:
     3c5:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     3d5:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000003dd <pwr_p10>:
     3dd:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     3ed:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000003f5 <PM_TWI1_INIT_ONBOARD_SIM808_GPS_02>:
     3f5:	41 54 2b 43 47 4e 53 49 4e 46 0d 0a 00              AT+CGNSINF...

00000402 <PM_TWI1_INIT_ONBOARD_SIM808_GPS_01>:
     402:	41 54 2b 43 47 4e 53 50 57 52 3d 25 64 0d 0a 00     AT+CGNSPWR=%d...

00000412 <PM_TWI1_INIT_ONBOARD_SIM808_INFO_01>:
     412:	41 54 49 0d 0a 00                                   ATI...

00000418 <PM_TWI1_INIT_ONBOARD_SIM808_CFUN0>:
     418:	41 54 2b 43 46 55 4e 3d 30 0d 0a 00                 AT+CFUN=0...

00000424 <PM_TWI1_INIT_ONBOARD_SIM808_IPR>:
     424:	41 54 2b 49 50 52 3d 25 6c 64 0d 0a 00              AT+IPR=%ld...

00000431 <PM_TWI1_INIT_ONBOARD_SIM808_OK>:
     431:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 73 75 63     Init: SIM808 suc
     441:	63 65 73 73 00                                      cess.

00000446 <PM_TWI1_INIT_ONBOARD_SIM808_RESTART>:
     446:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 72 65 73     Init: SIM808 res
     456:	74 61 72 74 69 6e 67 20 2e 2e 2e 00                 tarting ....

00000462 <PM_TWI1_INIT_ONBOARD_SIM808_START>:
     462:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 73 74 61     Init: SIM808 sta
     472:	72 74 69 6e 67 20 2e 2e 2e 00                       rting ....

0000047c <PM_SIM808_INFO_SYNCED>:
     47c:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 20 62     SIM808 ser1:   b
     48c:	61 75 64 20 72 61 74 65 20 73 79 6e 63 65 64 0d     aud rate synced.
     49c:	0a 00                                               ..

0000049e <PM_SIM808_INFO_RESTART>:
     49e:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 53 74     SIM808 ser1:  St
     4ae:	61 72 74 69 6e 67 20 74 68 65 20 64 65 76 69 63     arting the devic
     4be:	65 20 2e 2e 2e 0d 0a 00                             e ......

000004c6 <PM_SIM808_INFO_START>:
     4c6:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 53 74     SIM808 ser1:  St
     4d6:	61 72 74 69 6e 67 20 74 68 65 20 64 65 76 69 63     arting the devic
     4e6:	65 20 2e 2e 2e 0d 0a 00                             e ......

000004ee <PM_SIM808_OK>:
     4ee:	4f 4b 00                                            OK.

000004f1 <PM_INFO_PART_PLL1>:
     4f1:	50 4c 4c 3a 20 25 38 6c 64 2e 25 30 33 6c 64 20     PLL: %8ld.%03ld 
     501:	2b 20 25 30 33 64 2f 33 30 45 2b 36 20 73 65 63     + %03d/30E+6 sec
     511:	0d 0a 0d 0a 00                                      .....

00000516 <PM_INFO_PART_L2P4>:
     516:	47 79 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e 32     Gyro_Temp=%+06.2
     526:	66 43 20 28 25 2b 30 36 64 29 0d 0a 0d 0a 00        fC (%+06d).....

00000535 <PM_INFO_PART_L2P3B>:
     535:	4d 7a 3d 25 2b 30 37 2e 33 66 75 54 20 28 25 2b     Mz=%+07.3fuT (%+
     545:	30 36 64 29 09 20 09 00                             06d). ..

0000054d <PM_INFO_PART_L2P3A>:
     54d:	4d 78 3d 25 2b 30 37 2e 33 66 75 54 20 28 25 2b     Mx=%+07.3fuT (%+
     55d:	30 36 64 29 2c 20 4d 79 3d 25 2b 30 37 2e 33 66     06d), My=%+07.3f
     56d:	75 54 20 28 25 2b 30 36 64 29 2c 20 00              uT (%+06d), .

0000057a <PM_INFO_PART_L2P2B>:
     57a:	47 7a 3d 25 2b 30 37 2e 32 66 64 70 73 20 28 25     Gz=%+07.2fdps (%
     58a:	30 36 64 29 09 20 09 00                             06d). ..

00000592 <PM_INFO_PART_L2P2A>:
     592:	47 78 3d 25 2b 30 37 2e 32 66 64 70 73 20 28 25     Gx=%+07.2fdps (%
     5a2:	2b 30 36 64 29 2c 20 47 79 3d 25 2b 30 37 2e 32     +06d), Gy=%+07.2
     5b2:	66 64 70 73 20 28 25 2b 30 36 64 29 2c 20 00        fdps (%+06d), .

000005c1 <PM_INFO_PART_L2P1B>:
     5c1:	41 7a 3d 25 2b 30 35 2e 33 66 67 20 28 25 2b 30     Az=%+05.3fg (%+0
     5d1:	36 64 29 09 20 09 00                                6d). ..

000005d8 <PM_INFO_PART_L2P1A>:
     5d8:	09 41 78 3d 25 2b 30 35 2e 33 66 67 20 28 25 2b     .Ax=%+05.3fg (%+
     5e8:	30 36 64 29 2c 20 41 79 3d 25 2b 30 35 2e 33 66     06d), Ay=%+05.3f
     5f8:	67 20 28 25 2b 30 36 64 29 2c 20 00                 g (%+06d), .

00000604 <PM_INFO_PART_L1P3>:
     604:	48 79 67 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e     Hygro_Temp=%+06.
     614:	32 66 43 2c 20 48 79 67 72 6f 5f 52 65 6c 48 3d     2fC, Hygro_RelH=
     624:	25 30 35 2e 32 66 25 25 0d 0a 00                    %05.2f%%...

0000062f <PM_INFO_PART_L1P2>:
     62f:	42 61 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e 32     Baro_Temp=%+06.2
     63f:	66 43 2c 20 42 61 72 6f 5f 50 3d 25 37 2e 32 66     fC, Baro_P=%7.2f
     64f:	68 50 61 09 20 09 00                                hPa. ..

00000656 <PM_INFO_PART_L1P1C>:
     656:	6d 50 5f 54 65 6d 70 3d 25 2b 30 36 2e 32 66 43     mP_Temp=%+06.2fC
     666:	09 20 09 00                                         . ..

0000066a <PM_INFO_PART_L1P1B>:
     66a:	55 61 64 63 34 3d 25 34 64 20 6d 56 2c 20 55 61     Uadc4=%4d mV, Ua
     67a:	64 63 35 3d 25 34 64 20 6d 56 2c 20 55 73 69 6c     dc5=%4d mV, Usil
     68a:	3d 25 34 64 20 6d 56 2c 20 00                       =%4d mV, .

00000694 <PM_INFO_PART_L1P1A>:
     694:	54 69 6d 65 20 3d 20 25 30 36 6c 64 3a 20 55 76     Time = %06ld: Uv
     6a4:	63 6f 3d 25 34 64 20 6d 56 2c 20 55 35 76 3d 25     co=%4d mV, U5v=%
     6b4:	34 64 20 6d 56 2c 20 55 62 61 74 3d 25 34 64 20     4d mV, Ubat=%4d 
     6c4:	6d 56 2c 20 00                                      mV, .

000006c9 <PM_USBINIT_HEADER_4>:
     6c9:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     6d9:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0d     ===============.
     6e9:	0a 0d 0a 00                                         ....

000006ed <PM_USBINIT_HEADER_3>:
     6ed:	46 69 6e 64 4d 65 53 41 54 20 2d 20 55 53 42 20     FindMeSAT - USB 
     6fd:	6c 6f 67 67 69 6e 67 20 73 74 61 72 74 65 64 0d     logging started.
     70d:	0a 00                                               ..

0000070f <PM_USBINIT_HEADER_2>:
     70f:	25 63 0d 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     %c..============
     71f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     72f:	3d 3d 3d 0d 0a 00                                   ===...

00000735 <PM_USBINIT_HEADER_1>:
     735:	0d 0a 0d 0a 0d 0a 00                                .......

0000073c <PM_SINE_IP>:
     73c:	00 fd f9 f6 f3 f0 ec e9 e6 e3 df dc d9 d6 d2 cf     ................
     74c:	00 fd fa f6 f3 f0 ed ea e6 e3 e0 dd da d7 d3 d0     ................
     75c:	00 fd fa f7 f3 f0 ed ea e7 e4 e1 de da d7 d4 d1     ................
     76c:	00 fd fa f7 f4 f1 ee eb e7 e4 e1 de db d8 d5 d2     ................
     77c:	00 fd fa f7 f4 f1 ee eb e8 e5 e2 df dc d9 d6 d3     ................
     78c:	00 fd fa f7 f4 f1 ee eb e8 e6 e3 e0 dd da d7 d4     ................
     79c:	00 fd fa f7 f4 f2 ef ec e9 e6 e3 e0 dd db d8 d5     ................
     7ac:	00 fd fa f8 f5 f2 ef ec e9 e7 e4 e1 de db d9 d6     ................
     7bc:	00 fd fa f8 f5 f2 ef ed ea e7 e4 e2 df dc d9 d7     ................
     7cc:	00 fd fb f8 f5 f3 f0 ed ea e8 e5 e2 e0 dd da d8     ................
     7dc:	00 fd fb f8 f5 f3 f0 ee eb e8 e6 e3 e0 de db d9     ................
     7ec:	00 fd fb f8 f6 f3 f1 ee eb e9 e6 e4 e1 df dc da     ................
     7fc:	00 fd fb f8 f6 f3 f1 ee ec e9 e7 e4 e2 df dd da     ................
     80c:	00 fe fb f9 f6 f4 f1 ef ec ea e8 e5 e3 e0 de db     ................
     81c:	00 fe fb f9 f6 f4 f2 ef ed eb e8 e6 e3 e1 df dc     ................
     82c:	00 fe fb f9 f7 f4 f2 f0 ed eb e9 e7 e4 e2 e0 dd     ................
     83c:	00 fe fb f9 f7 f5 f2 f0 ee ec e9 e7 e5 e3 e0 de     ................
     84c:	00 fe fc f9 f7 f5 f3 f1 ee ec ea e8 e6 e4 e1 df     ................
     85c:	00 fe fc fa f7 f5 f3 f1 ef ed eb e9 e6 e4 e2 e0     ................
     86c:	00 fe fc fa f8 f6 f4 f2 ef ed eb e9 e7 e5 e3 e1     ................
     87c:	00 fe fc fa f8 f6 f4 f2 f0 ee ec ea e8 e6 e4 e2     ................
     88c:	00 fe fc fa f8 f6 f4 f2 f0 ef ed eb e9 e7 e5 e3     ................
     89c:	00 fe fc fa f8 f7 f5 f3 f1 ef ed eb e9 e8 e6 e4     ................
     8ac:	00 fe fc fb f9 f7 f5 f3 f1 f0 ee ec ea e8 e7 e5     ................
     8bc:	00 fe fc fb f9 f7 f5 f4 f2 f0 ee ed eb e9 e7 e6     ................
     8cc:	00 fe fd fb f9 f8 f6 f4 f2 f1 ef ed ec ea e8 e7     ................
     8dc:	00 fe fd fb f9 f8 f6 f5 f3 f1 f0 ee ec eb e9 e8     ................
     8ec:	00 fe fd fb fa f8 f7 f5 f3 f2 f0 ef ed ec ea e9     ................
     8fc:	00 fe fd fb fa f8 f7 f5 f4 f2 f1 ef ee ec eb e9     ................
     90c:	00 ff fd fc fa f9 f7 f6 f4 f3 f2 f0 ef ed ec ea     ................
     91c:	00 ff fd fc fa f9 f8 f6 f5 f4 f2 f1 ef ee ed eb     ................
     92c:	00 ff fd fc fb f9 f8 f7 f5 f4 f3 f2 f0 ef ee ec     ................
     93c:	00 ff fd fc fb fa f8 f7 f6 f5 f3 f2 f1 f0 ee ed     ................
     94c:	00 ff fe fc fb fa f9 f8 f6 f5 f4 f3 f2 f1 ef ee     ................
     95c:	00 ff fe fd fb fa f9 f8 f7 f6 f5 f4 f2 f1 f0 ef     ................
     96c:	00 ff fe fd fc fb fa f9 f7 f6 f5 f4 f3 f2 f1 f0     ................
     97c:	00 ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1     ................
     98c:	00 ff fe fd fc fb fa f9 f8 f8 f7 f6 f5 f4 f3 f2     ................
     99c:	00 ff fe fd fc fc fb fa f9 f8 f7 f6 f5 f5 f4 f3     ................
     9ac:	00 ff fe fe fd fc fb fa f9 f9 f8 f7 f6 f5 f5 f4     ................
     9bc:	00 ff fe fe fd fc fb fb fa f9 f8 f8 f7 f6 f5 f5     ................
     9cc:	00 ff ff fe fd fd fc fb fa fa f9 f8 f8 f7 f6 f6     ................
     9dc:	00 ff ff fe fd fd fc fc fb fa fa f9 f8 f8 f7 f7     ................
     9ec:	00 ff ff fe fe fd fd fc fb fb fa fa f9 f9 f8 f8     ................
     9fc:	00 ff ff fe fe fd fd fc fc fb fb fa fa f9 f9 f8     ................
     a0c:	00 00 ff ff fe fe fd fd fc fc fc fb fb fa fa f9     ................
     a1c:	00 00 ff ff fe fe fe fd fd fd fc fc fb fb fb fa     ................
     a2c:	00 00 ff ff ff fe fe fe fd fd fd fd fc fc fc fb     ................
     a3c:	00 00 ff ff ff ff fe fe fe fe fd fd fd fd fc fc     ................
     a4c:	00 00 00 ff ff ff ff ff fe fe fe fe fe fe fd fd     ................
     a5c:	00 00 00 00 ff ff ff ff ff ff ff ff fe fe fe fe     ................
	...
     a74:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     a94:	01 01 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
     aa4:	01 01 01 01 02 02 02 02 00 00 00 01 01 01 01 01     ................
     ab4:	02 02 02 02 02 02 03 03 00 00 01 01 01 01 02 02     ................
     ac4:	02 02 03 03 03 03 04 04 00 00 01 01 01 02 02 02     ................
     ad4:	03 03 03 03 04 04 04 05 00 00 01 01 02 02 02 03     ................
     ae4:	03 03 04 04 05 05 05 06 00 00 01 01 02 02 03 03     ................
     af4:	04 04 04 05 05 06 06 07 00 01 01 02 02 03 03 04     ................
     b04:	04 05 05 06 06 07 07 08 00 01 01 02 02 03 03 04     ................
     b14:	05 05 06 06 07 07 08 08 00 01 01 02 03 03 04 04     ................
     b24:	05 06 06 07 08 08 09 09 00 01 01 02 03 03 04 05     ................
     b34:	06 06 07 08 08 09 0a 0a 00 01 02 02 03 04 05 05     ................
     b44:	06 07 08 08 09 0a 0b 0b 00 01 02 02 03 04 05 06     ................
     b54:	07 07 08 09 0a 0b 0b 0c 00 01 02 03 04 04 05 06     ................
     b64:	07 08 09 0a 0b 0b 0c 0d 00 01 02 03 04 05 06 07     ................
     b74:	08 08 09 0a 0b 0c 0d 0e 00 01 02 03 04 05 06 07     ................
     b84:	08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 04 05 06 07     ................
     b94:	09 0a 0b 0c 0d 0e 0f 10 00 01 02 03 05 06 07 08     ................
     ba4:	09 0a 0b 0c 0e 0f 10 11 00 01 02 04 05 06 07 08     ................
     bb4:	0a 0b 0c 0d 0e 0f 11 12 00 01 03 04 05 06 08 09     ................
     bc4:	0a 0b 0d 0e 0f 10 12 13 00 01 03 04 05 07 08 09     ................
     bd4:	0b 0c 0d 0e 10 11 12 14 00 01 03 04 06 07 08 0a     ................
     be4:	0b 0c 0e 0f 11 12 13 15 00 01 03 04 06 07 09 0a     ................
     bf4:	0c 0d 0e 10 11 13 14 16 00 02 03 05 06 08 09 0b     ................
     c04:	0c 0e 0f 11 12 14 15 17 00 02 03 05 06 08 09 0b     ................
     c14:	0d 0e 10 11 13 14 16 17 00 02 03 05 07 08 0a 0b     ................
     c24:	0d 0f 10 12 14 15 17 18 00 02 03 05 07 08 0a 0c     ................
     c34:	0e 0f 11 13 14 16 18 19 00 02 04 05 07 09 0b 0c     ................
     c44:	0e 10 12 13 15 17 19 1a 00 02 04 05 07 09 0b 0d     ................
     c54:	0f 10 12 14 16 18 19 1b 00 02 04 06 08 09 0b 0d     ................
     c64:	0f 11 13 15 17 18 1a 1c 00 02 04 06 08 0a 0c 0e     ................
     c74:	10 11 13 15 17 19 1b 1d 00 02 04 06 08 0a 0c 0e     ................
     c84:	10 12 14 16 18 1a 1c 1e 00 02 04 06 08 0a 0c 0e     ................
     c94:	11 13 15 17 19 1b 1d 1f 00 02 04 06 09 0b 0d 0f     ................
     ca4:	11 13 15 17 1a 1c 1e 20 00 02 04 07 09 0b 0d 0f     ....... ........
     cb4:	12 14 16 18 1a 1c 1f 21 00 02 05 07 09 0b 0e 10     .......!........
     cc4:	12 14 17 19 1b 1d 20 22 00 02 05 07 09 0c 0e 10     ...... "........
     cd4:	13 15 17 19 1c 1e 20 23 00 02 05 07 0a 0c 0e 11     ...... #........
     ce4:	13 15 18 1a 1d 1f 21 24 00 02 05 07 0a 0c 0f 11     ......!$........
     cf4:	14 16 18 1b 1d 20 22 25 00 03 05 08 0a 0d 0f 12     ..... "%........
     d04:	14 17 19 1c 1e 21 23 26 00 03 05 08 0a 0d 0f 12     .....!#&........
     d14:	15 17 1a 1c 1f 21 24 26 00 03 05 08 0b 0d 10 12     .....!$&........
     d24:	15 18 1a 1d 20 22 25 27 00 03 05 08 0b 0d 10 13     .... "%'........
     d34:	16 18 1b 1e 20 23 26 28 00 03 06 08 0b 0e 11 13     .... #&(........
     d44:	16 19 1c 1e 21 24 27 29 00 03 06 08 0b 0e 11 14     ....!$')........
     d54:	17 19 1c 1f 22 25 27 2a 00 03 06 09 0c 0e 11 14     ...."%'*........
     d64:	17 1a 1d 20 23 25 28 2b 00 03 06 09 0c 0f 12 15     ... #%(+........
     d74:	18 1a 1d 20 23 26 29 2c 00 03 06 09 0c 0f 12 15     ... #&),........
     d84:	18 1b 1e 21 24 27 2a 2d 00 03 06 09 0c 0f 12 15     ...!$'*-........
     d94:	19 1c 1f 22 25 28 2b 2e 00 03 06 09 0d 10 13 16     ..."%(+.........
     da4:	19 1c 1f 22 26 29 2c 2f 00 03 06 0a 0d 10 13 16     ..."&),/........
     db4:	1a 1d 20 23 26 29 2d 30                             .. #&)-0

00000dbc <PM_SINE>:
     dbc:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     dcc:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     ddc:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     dec:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     dfc:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     e0c:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     e1c:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     e2c:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     e3c:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     e4c:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     e5c:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     e6c:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     e7c:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     e8c:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     e9c:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     eac:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     ebc:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     ecc:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     edc:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     eec:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     efc:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     f0c:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     f1c:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     f2c:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     f3c:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     f4c:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     f5c:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     f6c:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     f7c:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     f8c:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     f9c:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     fac:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     fbc:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     fcc:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     fdc:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     fec:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     ffc:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
    100c:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
    101c:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
    102c:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
    103c:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
    104c:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
    105c:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
    106c:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
    107c:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
    108c:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
    109c:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
    10ac:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
    10bc:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
    10cc:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
    10dc:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
    10ec:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
    10fc:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
    110c:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
    111c:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
    112c:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
    113c:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
    114c:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
    115c:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
    116c:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
    117c:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
    118c:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
    119c:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
    11ac:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
    11bc:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
    11cc:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
    11dc:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
    11ec:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
    11fc:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
    120c:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
    121c:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
    122c:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
    123c:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
    124c:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
    125c:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
    126c:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
    127c:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
    128c:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
    129c:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
    12ac:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
    12bc:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
    12cc:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
    12dc:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
    12ec:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
    12fc:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
    130c:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
    131c:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
    132c:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
    133c:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
    134c:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
    135c:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
    136c:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
    137c:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
    138c:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
    139c:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
    13ac:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
    13bc:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
    13cc:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
    13dc:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
    13ec:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
    13fc:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
    140c:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
    141c:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
    142c:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
    143c:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
    144c:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
    145c:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
    146c:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
    147c:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
    148c:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
    149c:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
    14ac:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
    14bc:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
    14cc:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
    14dc:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
    14ec:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
    14fc:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
    150c:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
    151c:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
    152c:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
    153c:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
    154c:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
    155c:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
    156c:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
    157c:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
    158c:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
    159c:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
    15ac:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
    15bc:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
    15cc:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
    15dc:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
    15ec:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
    15fc:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
    160c:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
    161c:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
    162c:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
    163c:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
    164c:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
    165c:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
    166c:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
    167c:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
    168c:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
    169c:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
    16ac:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
    16bc:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
    16cc:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
    16dc:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
    16ec:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
    16fc:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
    170c:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
    171c:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
    172c:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
    173c:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
    174c:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
    175c:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
    176c:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
    177c:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
    178c:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
    179c:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
    17ac:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
    17bc:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
    17cc:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
    17dc:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
    17ec:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
    17fc:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
    180c:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
    181c:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
    182c:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
    183c:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
    184c:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
    185c:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
    186c:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
    187c:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
    188c:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
    189c:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
    18ac:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
    18bc:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
    18cc:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
    18dc:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
    18ec:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
    18fc:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
    190c:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
    191c:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
    192c:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
    193c:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
    194c:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
    195c:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
    196c:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
    197c:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
    198c:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
    199c:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
    19ac:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
    19bc:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
    19cc:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
    19dc:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
    19ec:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
    19fc:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
    1a0c:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
    1a1c:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
    1a2c:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
    1a3c:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
    1a4c:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
    1a5c:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
    1a6c:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
    1a7c:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
    1a8c:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
    1a9c:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
    1aac:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
    1abc:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
    1acc:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
    1adc:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
    1aec:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
    1afc:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
    1b0c:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
    1b1c:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
    1b2c:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
    1b3c:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
    1b4c:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
    1b5c:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
    1b6c:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
    1b7c:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
    1b8c:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
    1b9c:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1bac:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1bbc:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    1bcc:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    1bdc:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    1bec:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    1bfc:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    1c0c:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    1c1c:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1c2c:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1c3c:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    1c4c:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    1c5c:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    1c6c:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    1c7c:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    1c8c:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    1c9c:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1cac:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1cbc:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    1ccc:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    1cdc:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    1cec:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    1cfc:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    1d0c:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    1d1c:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1d2c:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1d3c:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    1d4c:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    1d5c:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    1d6c:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    1d7c:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    1d8c:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    1d9c:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1dac:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1dbc:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    1dcc:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    1ddc:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    1dec:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    1dfc:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    1e0c:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    1e1c:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1e2c:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1e3c:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    1e4c:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    1e5c:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    1e6c:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    1e7c:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    1e8c:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    1e9c:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1eac:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1ebc:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    1ecc:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    1edc:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    1eec:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    1efc:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    1f0c:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    1f1c:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1f2c:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1f3c:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    1f4c:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    1f5c:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    1f6c:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    1f7c:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    1f8c:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    1f9c:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1fac:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1fbc:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1fcc:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1fdc:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1fec:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1ffc:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    200c:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    201c:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    202c:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    203c:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    204c:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    205c:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    206c:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    207c:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    208c:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    209c:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    20ac:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    20bc:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    20cc:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    20dc:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    20ec:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    20fc:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    210c:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    211c:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    212c:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    213c:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    214c:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    215c:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    216c:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    217c:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    218c:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    219c:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    21ac:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    21bc:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    21cc:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    21dc:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    21ec:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    21fc:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    220c:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    221c:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    222c:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    223c:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    224c:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    225c:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    226c:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    227c:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    228c:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    229c:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    22ac:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    22bc:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    22cc:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    22dc:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    22ec:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    22fc:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    230c:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    231c:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    232c:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    233c:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    234c:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    235c:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    236c:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    237c:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    238c:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    239c:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    23ac:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    23bc:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    23cc:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    23dc:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    23ec:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    23fc:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    240c:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    241c:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    242c:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    243c:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    244c:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    245c:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    246c:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    247c:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    248c:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    249c:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    24ac:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    24bc:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    24cc:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    24dc:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    24ec:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    24fc:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    250c:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    251c:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    252c:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    253c:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    254c:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    255c:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    256c:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    257c:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    258c:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    259c:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    25ac:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    25bc:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    25cc:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    25dc:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    25ec:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    25fc:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    260c:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    261c:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    262c:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    263c:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    264c:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    265c:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    266c:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    267c:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    268c:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    269c:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    26ac:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    26bc:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    26cc:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    26dc:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    26ec:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    26fc:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    270c:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    271c:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    272c:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    273c:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    274c:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    275c:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    276c:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    277c:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    278c:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    279c:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    27ac:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    27bc:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    27cc:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    27dc:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    27ec:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    27fc:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    280c:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    281c:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    282c:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    283c:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    284c:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    285c:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    286c:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    287c:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    288c:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    289c:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    28ac:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    28bc:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    28cc:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    28dc:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    28ec:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    28fc:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    290c:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    291c:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    292c:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    293c:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    294c:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    295c:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    296c:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    297c:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    298c:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    299c:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    29ac:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    29bc:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    29cc:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    29dc:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    29ec:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    29fc:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    2a0c:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    2a1c:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    2a2c:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    2a3c:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    2a4c:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    2a5c:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    2a6c:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    2a7c:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    2a8c:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    2a9c:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    2aac:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    2abc:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    2acc:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    2adc:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    2aec:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    2afc:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    2b0c:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    2b1c:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    2b2c:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    2b3c:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    2b4c:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    2b5c:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    2b6c:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    2b7c:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    2b8c:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    2b9c:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2bac:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2bbc:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    2bcc:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    2bdc:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    2bec:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    2bfc:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    2c0c:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    2c1c:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2c2c:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2c3c:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    2c4c:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    2c5c:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    2c6c:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    2c7c:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    2c8c:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    2c9c:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2cac:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2cbc:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    2ccc:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    2cdc:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    2cec:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    2cfc:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    2d0c:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    2d1c:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2d2c:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2d3c:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    2d4c:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    2d5c:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    2d6c:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    2d7c:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    2d8c:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    2d9c:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2dac:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002dbc <PM_UNKNOWN_01>:
    2dbc:	0d 0a 3f 3f 3f 20 75 6e 6b 6e 6f 77 6e 20 63 6f     ..??? unknown co
    2dcc:	6d 6d 61 6e 64 20 2d 20 66 6f 72 20 61 73 73 69     mmand - for assi
    2ddc:	73 74 61 6e 63 65 20 65 6e 74 65 72 20 20 68 65     stance enter  he
    2dec:	6c 70 0d 0a 00                                      lp...

00002df1 <PM_IP_CMD_reset>:
    2df1:	72 65 73 65 74 3d 00                                reset=.

00002df8 <PM_IP_CMD_pt>:
    2df8:	70 74 3d 00                                         pt=.

00002dfc <PM_IP_CMD_kb>:
    2dfc:	6b 62 3d 00                                         kb=.

00002e00 <PM_IP_CMD_help>:
    2e00:	68 65 6c 70 00                                      help.

00002e05 <PM_IP_CMD_info>:
    2e05:	69 6e 66 6f 3d 00                                   info=.

00002e0b <PM_IP_CMD_eb>:
    2e0b:	65 62 3d 00                                         eb=.

00002e0f <PM_IP_CMD_dds>:
    2e0f:	64 64 73 3d 00                                      dds=.

00002e14 <PM_IP_CMD_dac>:
    2e14:	64 61 63 3d 00                                      dac=.

00002e19 <PM_IP_CMD_bl>:
    2e19:	62 6c 3d 00                                         bl=.

00002e1d <PM_IP_CMD_bias>:
    2e1d:	62 69 61 73 3d 00                                   bias=.

00002e23 <PM_IP_CMD_AT>:
    2e23:	41 54 00                                            AT.

00002e26 <PM_IP_CMD_adc>:
    2e26:	61 64 63 3d 00                                      adc=.

00002e2b <PM_IP_CMD_CmdLine>:
    2e2b:	0d 0a 3e 20 00                                      ..> .

00002e30 <PM_IP_CMD_NewLine>:
    2e30:	0d 0a 00                                            ...

00002e33 <PM_HELP_RESET_1>:
    2e33:	72 65 73 65 74 3d 09 09 31 3a 20 72 65 62 6f 6f     reset=..1: reboo
    2e43:	74 20 41 4c 4c 0d 0a 00                             t ALL...

00002e4b <PM_HELP_PT_2>:
    2e4b:	31 3a 20 74 75 72 6e 20 73 70 65 65 64 2c 20 32     1: turn speed, 2
    2e5b:	3a 20 76 61 72 69 6f 6d 65 74 65 72 0d 0a 00        : variometer...

00002e6a <PM_HELP_PT_1>:
    2e6a:	70 74 3d 09 09 30 3a 20 70 69 74 63 68 20 74 6f     pt=..0: pitch to
    2e7a:	6e 65 20 4f 46 46 2c 20 00                          ne OFF, .

00002e83 <PM_HELP_KB_1>:
    2e83:	6b 62 3d 09 09 30 3a 20 6b 65 79 20 62 65 65 70     kb=..0: key beep
    2e93:	20 4f 46 46 2c 20 31 3a 20 4f 4e 0d 0a 00            OFF, 1: ON...

00002ea1 <PM_HELP_INFO_1>:
    2ea1:	69 6e 66 6f 3d 09 09 30 3a 20 4f 46 46 2c 20 31     info=..0: OFF, 1
    2eb1:	3a 20 4f 4e 0d 0a 00                                : ON...

00002eb8 <PM_HELP_HELP_2>:
    2eb8:	61 62 6f 75 74 20 61 6c 6c 20 61 76 61 69 6c 61     about all availa
    2ec8:	62 6c 65 20 63 6f 6d 6d 61 6e 64 73 0d 0a 00        ble commands...

00002ed7 <PM_HELP_HELP_1>:
    2ed7:	68 65 6c 70 09 09 54 68 69 73 20 69 6e 66 6f 72     help..This infor
    2ee7:	6d 61 74 69 6f 6e 20 70 61 67 65 20 00              mation page .

00002ef4 <PM_HELP_EB_1>:
    2ef4:	65 62 3d 09 09 30 3a 20 65 72 72 6f 72 20 62 65     eb=..0: error be
    2f04:	65 70 20 4f 46 46 2c 20 31 3a 20 4f 4e 0d 0a 00     ep OFF, 1: ON...

00002f14 <PM_HELP_DDS_3>:
    2f14:	63 3a 20 73 74 61 72 74 69 6e 67 20 70 68 61 73     c: starting phas
    2f24:	65 20 6f 66 20 44 44 53 31 2d 44 44 53 30 20 64     e of DDS1-DDS0 d
    2f34:	65 67 0d 0a 00                                      eg...

00002f39 <PM_HELP_DDS_2>:
    2f39:	62 3a 20 44 44 53 31 20 6d 48 7a 2c 20 00           b: DDS1 mHz, .

00002f47 <PM_HELP_DDS_1>:
    2f47:	64 64 73 3d 61 2c 62 2c 63 09 61 3a 20 44 44 53     dds=a,b,c.a: DDS
    2f57:	30 20 66 72 65 71 75 65 6e 63 79 20 6d 48 7a 2c     0 frequency mHz,
    2f67:	20 00                                                .

00002f69 <PM_HELP_DAC_2>:
    2f69:	31 3a 20 74 75 72 6e 20 44 41 43 42 20 6f 6e 0d     1: turn DACB on.
    2f79:	0a 00                                               ..

00002f7b <PM_HELP_DAC_1>:
    2f7b:	64 61 63 3d 09 09 30 3a 20 74 75 72 6e 20 44 41     dac=..0: turn DA
    2f8b:	43 42 20 6f 66 66 2c 20 00                          CB off, .

00002f94 <PM_HELP_BL_2>:
    2f94:	2d 31 3a 20 41 55 54 4f 2c 20 2d 32 3a 20 53 50     -1: AUTO, -2: SP
    2fa4:	45 43 49 41 4c 0d 0a 00                             ECIAL...

00002fac <PM_HELP_BL_1>:
    2fac:	62 6c 3d 09 09 30 2d 32 35 35 3a 20 62 61 63 6b     bl=..0-255: back
    2fbc:	6c 69 67 68 74 20 50 57 4d 2c 20 00                 light PWM, .

00002fc8 <PM_HELP_BIAS_2>:
    2fc8:	66 6f 72 20 4c 43 44 20 63 6f 6e 74 72 61 73 74     for LCD contrast
    2fd8:	0d 0a 00                                            ...

00002fdb <PM_HELP_BIAS_1>:
    2fdb:	62 69 61 73 3d 09 09 30 2d 36 33 3a 20 62 69 61     bias=..0-63: bia
    2feb:	73 20 76 6f 6c 74 61 67 65 20 00                    s voltage .

00002ff6 <PM_HELP_AT_1>:
    2ff6:	41 54 09 09 43 4d 44 20 74 6f 20 73 65 6e 64 20     AT..CMD to send 
    3006:	74 6f 20 74 68 65 20 53 49 4d 38 30 38 0d 0a 00     to the SIM808...

00003016 <PM_HELP_ADC_2>:
    3016:	31 3a 20 74 75 72 6e 20 41 44 43 41 20 61 6e 64     1: turn ADCA and
    3026:	20 41 44 43 42 20 6f 6e 0d 0a 00                     ADCB on...

00003031 <PM_HELP_ADC_1>:
    3031:	61 64 63 3d 09 09 30 3a 20 74 75 72 6e 20 41 44     adc=..0: turn AD
    3041:	43 41 20 61 6e 64 20 41 44 43 42 20 6f 66 66 2c     CA and ADCB off,
    3051:	20 00                                                .

00003053 <PM_HELP_HDR_2>:
    3053:	2a 20 43 4f 4d 4d 41 4e 44 53 20 2a 0d 0a 2a 2a     * COMMANDS *..**
    3063:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0d 0a 0d 0a 00        **********.....

00003072 <PM_HELP_HDR_1>:
    3072:	0d 0a 0d 0a 0d 0a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ......**********
    3082:	2a 2a 0d 0a 00                                      **...

00003087 <PM_FORMAT_5F3>:
    3087:	25 35 2e 33 66 00                                   %5.3f.

0000308d <PM_FORMAT_4F1>:
    308d:	25 34 2e 31 66 00                                   %4.1f.

00003093 <PM_FORMAT_07F2>:
    3093:	25 30 37 2e 32 66 00                                %07.2f.

0000309a <PM_FORMAT_05F2>:
    309a:	25 30 35 2e 32 66 00                                %05.2f.

000030a1 <PM_TWI1_INIT_ONBOARD_01>:
    30a1:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d 0a 0d 0a 00     -----------.....

000030b1 <PM_TWI1_INIT_ONBOARD_BARO_OK>:
    30b1:	49 6e 69 74 3a 20 42 61 72 6f 20 20 73 75 63 63     Init: Baro  succ
    30c1:	65 73 73 00                                         ess.

000030c5 <PM_TWI1_INIT_BARO_06>:
    30c5:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    30d5:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    30e5:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

000030f6 <PM_TWI1_INIT_BARO_05>:
    30f6:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    3106:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

00003114 <PM_TWI1_INIT_BARO_04>:
    3114:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 42 41     TWI-onboard:  BA
    3124:	44 20 72 65 61 64 69 6e 67 20 50 52 4f 4d 20 61     D reading PROM a
    3134:	64 64 72 65 73 73 20 25 64 2e 20 28 73 63 3d 25     ddress %d. (sc=%
    3144:	64 29 0d 0a 00                                      d)...

00003149 <PM_TWI1_INIT_BARO_03>:
    3149:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 42 61 72     TWI-onboard: Bar
    3159:	6f 20 4d 53 35 36 30 37 30 32 42 41 30 33 2d 35     o MS560702BA03-5
    3169:	30 20 2d 20 20 20 20 20 73 65 72 69 61 6c 23 3a     0 -     serial#:
    3179:	20 25 64 0d 0a 00                                    %d...

0000317f <PM_TWI1_INIT_BARO_02>:
    317f:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 42 41     TWI-onboard:  BA
    318f:	44 20 72 65 61 64 69 6e 67 20 73 65 72 69 61 6c     D reading serial
    319f:	2f 43 52 43 20 77 6f 72 64 2e 20 28 73 63 3d 25     /CRC word. (sc=%
    31af:	64 29 0d 0a 00                                      d)...

000031b4 <PM_TWI1_INIT_BARO_01>:
    31b4:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 42     ..TWI-onboard: B
    31c4:	61 72 6f 20 4d 53 35 36 30 37 30 32 42 41 30 33     aro MS560702BA03
    31d4:	2d 35 30 20 2d 20 49 32 43 20 61 64 64 72 65 73     -50 - I2C addres
    31e4:	73 3a 20 30 78 25 30 32 58 0d 0a 00                 s: 0x%02X...

000031f0 <PM_TWI1_INIT_ONBOARD_GYRO_OK>:
    31f0:	49 6e 69 74 3a 20 47 79 72 6f 20 20 73 75 63 63     Init: Gyro  succ
    3200:	65 73 73 00                                         ess.

00003204 <PM_TWI1_INIT_GYRO_05>:
    3204:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    3214:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    3224:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

00003235 <PM_TWI1_INIT_GYRO_04>:
    3235:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    3245:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

00003253 <PM_TWI1_INIT_GYRO_03>:
    3253:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47 79 72     TWI-onboard: Gyr
    3263:	6f 20 4d 50 55 2d 39 32 35 30 20 2d 20 20 20 20     o MPU-9250 -    
    3273:	20 76 65 72 73 69 6f 6e 3a 20 30 78 25 30 32 58      version: 0x%02X
    3283:	2c 20 30 78 25 30 32 58 0d 0a 00                    , 0x%02X...

0000328e <PM_TWI1_INIT_GYRO_02>:
    328e:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47 79 72     TWI-onboard: Gyr
    329e:	6f 20 4d 50 55 2d 39 32 35 30 20 20 20 2d 20 20     o MPU-9250   -  
    32ae:	20 27 72 65 73 65 74 20 31 27 20 62 61 64 20 72      'reset 1' bad r
    32be:	65 73 70 6f 6e 73 65 0d 0a 00                       esponse...

000032c8 <PM_TWI1_INIT_GYRO_01>:
    32c8:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47     ..TWI-onboard: G
    32d8:	79 72 6f 20 4d 50 55 2d 39 32 35 30 20 2d 20 49     yro MPU-9250 - I
    32e8:	32 43 20 61 64 64 72 65 73 73 3a 20 30 78 25 30     2C address: 0x%0
    32f8:	32 58 2c 20 30 78 25 30 32 58 0d 0a 00              2X, 0x%02X...

00003305 <PM_TWI1_INIT_ONBOARD_HYGRO_OK>:
    3305:	49 6e 69 74 3a 20 48 79 67 72 6f 20 73 75 63 63     Init: Hygro succ
    3315:	65 73 73 00                                         ess.

00003319 <PM_TWI1_INIT_HYGRO_05>:
    3319:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    3329:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    3339:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

0000334a <PM_TWI1_INIT_HYGRO_04>:
    334a:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    335a:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

00003368 <PM_TWI1_INIT_HYGRO_03>:
    3368:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48 79 67     TWI-onboard: Hyg
    3378:	72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d 20 20     ro SHT31-DIS -  
    3388:	20 73 74 61 74 75 73 3a 20 30 78 25 30 32 58 0d      status: 0x%02X.
    3398:	0a 00                                               ..

0000339a <PM_TWI1_INIT_HYGRO_02>:
    339a:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48 79 67     TWI-onboard: Hyg
    33aa:	72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d 20 20     ro SHT31-DIS -  
    33ba:	20 61 64 64 72 65 73 73 20 4e 41 43 4b 20 2f 20      address NACK / 
    33ca:	27 62 72 65 61 6b 27 20 62 61 64 20 72 65 73 70     'break' bad resp
    33da:	6f 6e 73 65 0d 0a 00                                onse...

000033e1 <PM_TWI1_INIT_HYGRO_01>:
    33e1:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48     ..TWI-onboard: H
    33f1:	79 67 72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d     ygro SHT31-DIS -
    3401:	20 49 32 43 20 61 64 64 72 65 73 73 3a 20 30 78      I2C address: 0x
    3411:	25 30 32 58 0d 0a 00                                %02X...

00003418 <__ctors_end>:
    3418:	11 24       	eor	r1, r1
    341a:	1f be       	out	0x3f, r1	; 63
    341c:	cf ef       	ldi	r28, 0xFF	; 255
    341e:	cd bf       	out	0x3d, r28	; 61
    3420:	df e5       	ldi	r29, 0x5F	; 95
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	00 e0       	ldi	r16, 0x00	; 0
    3426:	0c bf       	out	0x3c, r16	; 60

00003428 <__do_copy_data>:
    3428:	11 e2       	ldi	r17, 0x21	; 33
    342a:	a0 e0       	ldi	r26, 0x00	; 0
    342c:	b0 e2       	ldi	r27, 0x20	; 32
    342e:	e2 ee       	ldi	r30, 0xE2	; 226
    3430:	f7 e0       	ldi	r31, 0x07	; 7
    3432:	01 e0       	ldi	r16, 0x01	; 1
    3434:	0b bf       	out	0x3b, r16	; 59
    3436:	02 c0       	rjmp	.+4      	; 0x343c <__do_copy_data+0x14>
    3438:	07 90       	elpm	r0, Z+
    343a:	0d 92       	st	X+, r0
    343c:	a0 3d       	cpi	r26, 0xD0	; 208
    343e:	b1 07       	cpc	r27, r17
    3440:	d9 f7       	brne	.-10     	; 0x3438 <__do_copy_data+0x10>

00003442 <__do_clear_bss>:
    3442:	2e e2       	ldi	r18, 0x2E	; 46
    3444:	a0 ed       	ldi	r26, 0xD0	; 208
    3446:	b1 e2       	ldi	r27, 0x21	; 33
    3448:	01 c0       	rjmp	.+2      	; 0x344c <.do_clear_bss_start>

0000344a <.do_clear_bss_loop>:
    344a:	1d 92       	st	X+, r1

0000344c <.do_clear_bss_start>:
    344c:	af 37       	cpi	r26, 0x7F	; 127
    344e:	b2 07       	cpc	r27, r18
    3450:	e1 f7       	brne	.-8      	; 0x344a <.do_clear_bss_loop>
    3452:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <main>
    3456:	0c 94 ef 83 	jmp	0x107de	; 0x107de <_exit>

0000345a <__bad_interrupt>:
    345a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000345e <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    345e:	ef 92       	push	r14
    3460:	ff 92       	push	r15
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	cf 93       	push	r28
    3468:	df 93       	push	r29
    346a:	7c 01       	movw	r14, r24
    346c:	8b 01       	movw	r16, r22
    346e:	ea 01       	movw	r28, r20
	while (len) {
    3470:	20 97       	sbiw	r28, 0x00	; 0
    3472:	39 f0       	breq	.+14     	; 0x3482 <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    3474:	f8 01       	movw	r30, r16
    3476:	61 91       	ld	r22, Z+
    3478:	8f 01       	movw	r16, r30
    347a:	c7 01       	movw	r24, r14
    347c:	0a d0       	rcall	.+20     	; 0x3492 <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
    347e:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    3480:	c9 f7       	brne	.-14     	; 0x3474 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	1f 91       	pop	r17
    348a:	0f 91       	pop	r16
    348c:	ff 90       	pop	r15
    348e:	ef 90       	pop	r14
    3490:	08 95       	ret

00003492 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    3492:	fc 01       	movw	r30, r24
    3494:	91 81       	ldd	r25, Z+1	; 0x01
    3496:	95 ff       	sbrs	r25, 5
    3498:	fd cf       	rjmp	.-6      	; 0x3494 <usart_putchar+0x2>
    349a:	60 83       	st	Z, r22
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	08 95       	ret

000034a2 <usart_getchar>:
    34a2:	fc 01       	movw	r30, r24
    34a4:	91 81       	ldd	r25, Z+1	; 0x01
    34a6:	99 23       	and	r25, r25
    34a8:	ec f7       	brge	.-6      	; 0x34a4 <usart_getchar+0x2>
    34aa:	80 81       	ld	r24, Z
    34ac:	08 95       	ret

000034ae <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    34ae:	4f 92       	push	r4
    34b0:	5f 92       	push	r5
    34b2:	6f 92       	push	r6
    34b4:	7f 92       	push	r7
    34b6:	8f 92       	push	r8
    34b8:	9f 92       	push	r9
    34ba:	af 92       	push	r10
    34bc:	bf 92       	push	r11
    34be:	ef 92       	push	r14
    34c0:	ff 92       	push	r15
    34c2:	0f 93       	push	r16
    34c4:	1f 93       	push	r17
    34c6:	cf 93       	push	r28
    34c8:	7c 01       	movw	r14, r24
    34ca:	4a 01       	movw	r8, r20
    34cc:	5b 01       	movw	r10, r22
    34ce:	28 01       	movw	r4, r16
    34d0:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    34d2:	fc 01       	movw	r30, r24
    34d4:	84 81       	ldd	r24, Z+4	; 0x04
    34d6:	82 ff       	sbrs	r24, 2
    34d8:	16 c0       	rjmp	.+44     	; 0x3506 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    34da:	d9 01       	movw	r26, r18
    34dc:	c8 01       	movw	r24, r16
    34de:	68 94       	set
    34e0:	12 f8       	bld	r1, 2
    34e2:	b6 95       	lsr	r27
    34e4:	a7 95       	ror	r26
    34e6:	97 95       	ror	r25
    34e8:	87 95       	ror	r24
    34ea:	16 94       	lsr	r1
    34ec:	d1 f7       	brne	.-12     	; 0x34e2 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    34ee:	b9 01       	movw	r22, r18
    34f0:	a8 01       	movw	r20, r16
    34f2:	03 2e       	mov	r0, r19
    34f4:	36 e1       	ldi	r19, 0x16	; 22
    34f6:	76 95       	lsr	r23
    34f8:	67 95       	ror	r22
    34fa:	57 95       	ror	r21
    34fc:	47 95       	ror	r20
    34fe:	3a 95       	dec	r19
    3500:	d1 f7       	brne	.-12     	; 0x34f6 <usart_set_baudrate+0x48>
    3502:	30 2d       	mov	r19, r0
    3504:	15 c0       	rjmp	.+42     	; 0x3530 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    3506:	d9 01       	movw	r26, r18
    3508:	c8 01       	movw	r24, r16
    350a:	68 94       	set
    350c:	13 f8       	bld	r1, 3
    350e:	b6 95       	lsr	r27
    3510:	a7 95       	ror	r26
    3512:	97 95       	ror	r25
    3514:	87 95       	ror	r24
    3516:	16 94       	lsr	r1
    3518:	d1 f7       	brne	.-12     	; 0x350e <usart_set_baudrate+0x60>
		min_rate /= 2;
    351a:	b9 01       	movw	r22, r18
    351c:	a8 01       	movw	r20, r16
    351e:	03 2e       	mov	r0, r19
    3520:	37 e1       	ldi	r19, 0x17	; 23
    3522:	76 95       	lsr	r23
    3524:	67 95       	ror	r22
    3526:	57 95       	ror	r21
    3528:	47 95       	ror	r20
    352a:	3a 95       	dec	r19
    352c:	d1 f7       	brne	.-12     	; 0x3522 <usart_set_baudrate+0x74>
    352e:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    3530:	88 15       	cp	r24, r8
    3532:	99 05       	cpc	r25, r9
    3534:	aa 05       	cpc	r26, r10
    3536:	bb 05       	cpc	r27, r11
    3538:	08 f4       	brcc	.+2      	; 0x353c <usart_set_baudrate+0x8e>
    353a:	a6 c0       	rjmp	.+332    	; 0x3688 <usart_set_baudrate+0x1da>
    353c:	84 16       	cp	r8, r20
    353e:	95 06       	cpc	r9, r21
    3540:	a6 06       	cpc	r10, r22
    3542:	b7 06       	cpc	r11, r23
    3544:	08 f4       	brcc	.+2      	; 0x3548 <usart_set_baudrate+0x9a>
    3546:	a2 c0       	rjmp	.+324    	; 0x368c <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    3548:	f7 01       	movw	r30, r14
    354a:	84 81       	ldd	r24, Z+4	; 0x04
    354c:	82 fd       	sbrc	r24, 2
    354e:	04 c0       	rjmp	.+8      	; 0x3558 <usart_set_baudrate+0xaa>
		baud *= 2;
    3550:	88 0c       	add	r8, r8
    3552:	99 1c       	adc	r9, r9
    3554:	aa 1c       	adc	r10, r10
    3556:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    3558:	c3 01       	movw	r24, r6
    355a:	b2 01       	movw	r22, r4
    355c:	a5 01       	movw	r20, r10
    355e:	94 01       	movw	r18, r8
    3560:	0e 94 7a 7c 	call	0xf8f4	; 0xf8f4 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    3564:	2f 3f       	cpi	r18, 0xFF	; 255
    3566:	31 05       	cpc	r19, r1
    3568:	41 05       	cpc	r20, r1
    356a:	51 05       	cpc	r21, r1
    356c:	08 f4       	brcc	.+2      	; 0x3570 <usart_set_baudrate+0xc2>
    356e:	90 c0       	rjmp	.+288    	; 0x3690 <usart_set_baudrate+0x1e2>
    3570:	8f ef       	ldi	r24, 0xFF	; 255
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	a0 e0       	ldi	r26, 0x00	; 0
    3576:	b0 e0       	ldi	r27, 0x00	; 0
    3578:	c9 ef       	ldi	r28, 0xF9	; 249
    357a:	05 c0       	rjmp	.+10     	; 0x3586 <usart_set_baudrate+0xd8>
    357c:	28 17       	cp	r18, r24
    357e:	39 07       	cpc	r19, r25
    3580:	4a 07       	cpc	r20, r26
    3582:	5b 07       	cpc	r21, r27
    3584:	58 f0       	brcs	.+22     	; 0x359c <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    3586:	88 0f       	add	r24, r24
    3588:	99 1f       	adc	r25, r25
    358a:	aa 1f       	adc	r26, r26
    358c:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    358e:	cd 3f       	cpi	r28, 0xFD	; 253
    3590:	0c f4       	brge	.+2      	; 0x3594 <usart_set_baudrate+0xe6>
			limit |= 1;
    3592:	81 60       	ori	r24, 0x01	; 1
    3594:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3596:	c7 30       	cpi	r28, 0x07	; 7
    3598:	89 f7       	brne	.-30     	; 0x357c <usart_set_baudrate+0xce>
    359a:	4f c0       	rjmp	.+158    	; 0x363a <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    359c:	cc 23       	and	r28, r28
    359e:	0c f0       	brlt	.+2      	; 0x35a2 <usart_set_baudrate+0xf4>
    35a0:	4c c0       	rjmp	.+152    	; 0x363a <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    35a2:	d5 01       	movw	r26, r10
    35a4:	c4 01       	movw	r24, r8
    35a6:	88 0f       	add	r24, r24
    35a8:	99 1f       	adc	r25, r25
    35aa:	aa 1f       	adc	r26, r26
    35ac:	bb 1f       	adc	r27, r27
    35ae:	88 0f       	add	r24, r24
    35b0:	99 1f       	adc	r25, r25
    35b2:	aa 1f       	adc	r26, r26
    35b4:	bb 1f       	adc	r27, r27
    35b6:	88 0f       	add	r24, r24
    35b8:	99 1f       	adc	r25, r25
    35ba:	aa 1f       	adc	r26, r26
    35bc:	bb 1f       	adc	r27, r27
    35be:	48 1a       	sub	r4, r24
    35c0:	59 0a       	sbc	r5, r25
    35c2:	6a 0a       	sbc	r6, r26
    35c4:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    35c6:	ce 3f       	cpi	r28, 0xFE	; 254
    35c8:	f4 f4       	brge	.+60     	; 0x3606 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    35ca:	8d ef       	ldi	r24, 0xFD	; 253
    35cc:	9f ef       	ldi	r25, 0xFF	; 255
    35ce:	8c 1b       	sub	r24, r28
    35d0:	91 09       	sbc	r25, r1
    35d2:	c7 fd       	sbrc	r28, 7
    35d4:	93 95       	inc	r25
    35d6:	04 c0       	rjmp	.+8      	; 0x35e0 <usart_set_baudrate+0x132>
    35d8:	44 0c       	add	r4, r4
    35da:	55 1c       	adc	r5, r5
    35dc:	66 1c       	adc	r6, r6
    35de:	77 1c       	adc	r7, r7
    35e0:	8a 95       	dec	r24
    35e2:	d2 f7       	brpl	.-12     	; 0x35d8 <usart_set_baudrate+0x12a>
    35e4:	d5 01       	movw	r26, r10
    35e6:	c4 01       	movw	r24, r8
    35e8:	b6 95       	lsr	r27
    35ea:	a7 95       	ror	r26
    35ec:	97 95       	ror	r25
    35ee:	87 95       	ror	r24
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	64 0d       	add	r22, r4
    35f6:	75 1d       	adc	r23, r5
    35f8:	86 1d       	adc	r24, r6
    35fa:	97 1d       	adc	r25, r7
    35fc:	a5 01       	movw	r20, r10
    35fe:	94 01       	movw	r18, r8
    3600:	0e 94 7a 7c 	call	0xf8f4	; 0xf8f4 <__udivmodsi4>
    3604:	37 c0       	rjmp	.+110    	; 0x3674 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    3606:	83 e0       	ldi	r24, 0x03	; 3
    3608:	8c 0f       	add	r24, r28
    360a:	a5 01       	movw	r20, r10
    360c:	94 01       	movw	r18, r8
    360e:	04 c0       	rjmp	.+8      	; 0x3618 <usart_set_baudrate+0x16a>
    3610:	22 0f       	add	r18, r18
    3612:	33 1f       	adc	r19, r19
    3614:	44 1f       	adc	r20, r20
    3616:	55 1f       	adc	r21, r21
    3618:	8a 95       	dec	r24
    361a:	d2 f7       	brpl	.-12     	; 0x3610 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    361c:	da 01       	movw	r26, r20
    361e:	c9 01       	movw	r24, r18
    3620:	b6 95       	lsr	r27
    3622:	a7 95       	ror	r26
    3624:	97 95       	ror	r25
    3626:	87 95       	ror	r24
    3628:	bc 01       	movw	r22, r24
    362a:	cd 01       	movw	r24, r26
    362c:	64 0d       	add	r22, r4
    362e:	75 1d       	adc	r23, r5
    3630:	86 1d       	adc	r24, r6
    3632:	97 1d       	adc	r25, r7
    3634:	0e 94 7a 7c 	call	0xf8f4	; 0xf8f4 <__udivmodsi4>
    3638:	1d c0       	rjmp	.+58     	; 0x3674 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    363a:	83 e0       	ldi	r24, 0x03	; 3
    363c:	8c 0f       	add	r24, r28
    363e:	a5 01       	movw	r20, r10
    3640:	94 01       	movw	r18, r8
    3642:	04 c0       	rjmp	.+8      	; 0x364c <usart_set_baudrate+0x19e>
    3644:	22 0f       	add	r18, r18
    3646:	33 1f       	adc	r19, r19
    3648:	44 1f       	adc	r20, r20
    364a:	55 1f       	adc	r21, r21
    364c:	8a 95       	dec	r24
    364e:	d2 f7       	brpl	.-12     	; 0x3644 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    3650:	da 01       	movw	r26, r20
    3652:	c9 01       	movw	r24, r18
    3654:	b6 95       	lsr	r27
    3656:	a7 95       	ror	r26
    3658:	97 95       	ror	r25
    365a:	87 95       	ror	r24
    365c:	bc 01       	movw	r22, r24
    365e:	cd 01       	movw	r24, r26
    3660:	64 0d       	add	r22, r4
    3662:	75 1d       	adc	r23, r5
    3664:	86 1d       	adc	r24, r6
    3666:	97 1d       	adc	r25, r7
    3668:	0e 94 7a 7c 	call	0xf8f4	; 0xf8f4 <__udivmodsi4>
    366c:	21 50       	subi	r18, 0x01	; 1
    366e:	31 09       	sbc	r19, r1
    3670:	41 09       	sbc	r20, r1
    3672:	51 09       	sbc	r21, r1
	volatile uint8_t reg_b = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	volatile uint8_t reg_a = (uint8_t)div;
	volatile uint16_t pre  = ((uint16_t)reg_b) | ((uint16_t)reg_a << 8);
#endif

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    3674:	83 2f       	mov	r24, r19
    3676:	8f 70       	andi	r24, 0x0F	; 15
    3678:	c2 95       	swap	r28
    367a:	c0 7f       	andi	r28, 0xF0	; 240
    367c:	c8 2b       	or	r28, r24
    367e:	f7 01       	movw	r30, r14
    3680:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    3682:	26 83       	std	Z+6, r18	; 0x06

	return true;
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	18 c0       	rjmp	.+48     	; 0x36b8 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	16 c0       	rjmp	.+44     	; 0x36b8 <usart_set_baudrate+0x20a>
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	14 c0       	rjmp	.+40     	; 0x36b8 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3690:	d5 01       	movw	r26, r10
    3692:	c4 01       	movw	r24, r8
    3694:	88 0f       	add	r24, r24
    3696:	99 1f       	adc	r25, r25
    3698:	aa 1f       	adc	r26, r26
    369a:	bb 1f       	adc	r27, r27
    369c:	88 0f       	add	r24, r24
    369e:	99 1f       	adc	r25, r25
    36a0:	aa 1f       	adc	r26, r26
    36a2:	bb 1f       	adc	r27, r27
    36a4:	88 0f       	add	r24, r24
    36a6:	99 1f       	adc	r25, r25
    36a8:	aa 1f       	adc	r26, r26
    36aa:	bb 1f       	adc	r27, r27
    36ac:	48 1a       	sub	r4, r24
    36ae:	59 0a       	sbc	r5, r25
    36b0:	6a 0a       	sbc	r6, r26
    36b2:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    36b4:	c9 ef       	ldi	r28, 0xF9	; 249
    36b6:	89 cf       	rjmp	.-238    	; 0x35ca <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    36b8:	cf 91       	pop	r28
    36ba:	1f 91       	pop	r17
    36bc:	0f 91       	pop	r16
    36be:	ff 90       	pop	r15
    36c0:	ef 90       	pop	r14
    36c2:	bf 90       	pop	r11
    36c4:	af 90       	pop	r10
    36c6:	9f 90       	pop	r9
    36c8:	8f 90       	pop	r8
    36ca:	7f 90       	pop	r7
    36cc:	6f 90       	pop	r6
    36ce:	5f 90       	pop	r5
    36d0:	4f 90       	pop	r4
    36d2:	08 95       	ret

000036d4 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    36d4:	0f 93       	push	r16
    36d6:	1f 93       	push	r17
    36d8:	cf 93       	push	r28
    36da:	df 93       	push	r29
    36dc:	ec 01       	movw	r28, r24
    36de:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    36e0:	00 97       	sbiw	r24, 0x00	; 0
    36e2:	09 f4       	brne	.+2      	; 0x36e6 <usart_init_rs232+0x12>
    36e4:	03 c1       	rjmp	.+518    	; 0x38ec <usart_init_rs232+0x218>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    36e6:	80 3c       	cpi	r24, 0xC0	; 192
    36e8:	91 05       	cpc	r25, r1
    36ea:	29 f4       	brne	.+10     	; 0x36f6 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    36ec:	60 e1       	ldi	r22, 0x10	; 16
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    36f4:	fb c0       	rjmp	.+502    	; 0x38ec <usart_init_rs232+0x218>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    36f6:	c0 38       	cpi	r28, 0x80	; 128
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	d8 07       	cpc	r29, r24
    36fc:	29 f4       	brne	.+10     	; 0x3708 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    36fe:	62 e0       	ldi	r22, 0x02	; 2
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    3706:	f2 c0       	rjmp	.+484    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    3708:	c1 15       	cp	r28, r1
    370a:	e1 e0       	ldi	r30, 0x01	; 1
    370c:	de 07       	cpc	r29, r30
    370e:	29 f4       	brne	.+10     	; 0x371a <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    3710:	61 e0       	ldi	r22, 0x01	; 1
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    3718:	e9 c0       	rjmp	.+466    	; 0x38ec <usart_init_rs232+0x218>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    371a:	c0 38       	cpi	r28, 0x80	; 128
    371c:	f3 e0       	ldi	r31, 0x03	; 3
    371e:	df 07       	cpc	r29, r31
    3720:	29 f4       	brne	.+10     	; 0x372c <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    3722:	61 e0       	ldi	r22, 0x01	; 1
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    372a:	e0 c0       	rjmp	.+448    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    372c:	c0 39       	cpi	r28, 0x90	; 144
    372e:	83 e0       	ldi	r24, 0x03	; 3
    3730:	d8 07       	cpc	r29, r24
    3732:	29 f4       	brne	.+10     	; 0x373e <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    3734:	61 e0       	ldi	r22, 0x01	; 1
    3736:	82 e0       	ldi	r24, 0x02	; 2
    3738:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    373c:	d7 c0       	rjmp	.+430    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    373e:	c1 15       	cp	r28, r1
    3740:	e2 e0       	ldi	r30, 0x02	; 2
    3742:	de 07       	cpc	r29, r30
    3744:	29 f4       	brne	.+10     	; 0x3750 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3746:	62 e0       	ldi	r22, 0x02	; 2
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    374e:	ce c0       	rjmp	.+412    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    3750:	c0 34       	cpi	r28, 0x40	; 64
    3752:	f2 e0       	ldi	r31, 0x02	; 2
    3754:	df 07       	cpc	r29, r31
    3756:	29 f4       	brne	.+10     	; 0x3762 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    3758:	62 e0       	ldi	r22, 0x02	; 2
    375a:	82 e0       	ldi	r24, 0x02	; 2
    375c:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    3760:	c5 c0       	rjmp	.+394    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    3762:	c0 32       	cpi	r28, 0x20	; 32
    3764:	83 e0       	ldi	r24, 0x03	; 3
    3766:	d8 07       	cpc	r29, r24
    3768:	29 f4       	brne	.+10     	; 0x3774 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    376a:	64 e0       	ldi	r22, 0x04	; 4
    376c:	82 e0       	ldi	r24, 0x02	; 2
    376e:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    3772:	bc c0       	rjmp	.+376    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    3774:	c1 15       	cp	r28, r1
    3776:	e8 e0       	ldi	r30, 0x08	; 8
    3778:	de 07       	cpc	r29, r30
    377a:	29 f4       	brne	.+10     	; 0x3786 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    377c:	61 e0       	ldi	r22, 0x01	; 1
    377e:	83 e0       	ldi	r24, 0x03	; 3
    3780:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    3784:	b3 c0       	rjmp	.+358    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    3786:	c1 15       	cp	r28, r1
    3788:	f9 e0       	ldi	r31, 0x09	; 9
    378a:	df 07       	cpc	r29, r31
    378c:	29 f4       	brne	.+10     	; 0x3798 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    378e:	61 e0       	ldi	r22, 0x01	; 1
    3790:	84 e0       	ldi	r24, 0x04	; 4
    3792:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    3796:	aa c0       	rjmp	.+340    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    3798:	c1 15       	cp	r28, r1
    379a:	8a e0       	ldi	r24, 0x0A	; 10
    379c:	d8 07       	cpc	r29, r24
    379e:	29 f4       	brne	.+10     	; 0x37aa <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    37a0:	61 e0       	ldi	r22, 0x01	; 1
    37a2:	85 e0       	ldi	r24, 0x05	; 5
    37a4:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    37a8:	a1 c0       	rjmp	.+322    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    37aa:	c1 15       	cp	r28, r1
    37ac:	eb e0       	ldi	r30, 0x0B	; 11
    37ae:	de 07       	cpc	r29, r30
    37b0:	29 f4       	brne	.+10     	; 0x37bc <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    37b2:	61 e0       	ldi	r22, 0x01	; 1
    37b4:	86 e0       	ldi	r24, 0x06	; 6
    37b6:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    37ba:	98 c0       	rjmp	.+304    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    37bc:	c0 34       	cpi	r28, 0x40	; 64
    37be:	f8 e0       	ldi	r31, 0x08	; 8
    37c0:	df 07       	cpc	r29, r31
    37c2:	29 f4       	brne	.+10     	; 0x37ce <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    37c4:	62 e0       	ldi	r22, 0x02	; 2
    37c6:	83 e0       	ldi	r24, 0x03	; 3
    37c8:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    37cc:	8f c0       	rjmp	.+286    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    37ce:	c0 34       	cpi	r28, 0x40	; 64
    37d0:	89 e0       	ldi	r24, 0x09	; 9
    37d2:	d8 07       	cpc	r29, r24
    37d4:	29 f4       	brne	.+10     	; 0x37e0 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    37d6:	62 e0       	ldi	r22, 0x02	; 2
    37d8:	84 e0       	ldi	r24, 0x04	; 4
    37da:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    37de:	86 c0       	rjmp	.+268    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    37e0:	c0 34       	cpi	r28, 0x40	; 64
    37e2:	ea e0       	ldi	r30, 0x0A	; 10
    37e4:	de 07       	cpc	r29, r30
    37e6:	29 f4       	brne	.+10     	; 0x37f2 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    37e8:	62 e0       	ldi	r22, 0x02	; 2
    37ea:	85 e0       	ldi	r24, 0x05	; 5
    37ec:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    37f0:	7d c0       	rjmp	.+250    	; 0x38ec <usart_init_rs232+0x218>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    37f2:	c0 39       	cpi	r28, 0x90	; 144
    37f4:	f8 e0       	ldi	r31, 0x08	; 8
    37f6:	df 07       	cpc	r29, r31
    37f8:	29 f4       	brne	.+10     	; 0x3804 <usart_init_rs232+0x130>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    37fa:	64 e0       	ldi	r22, 0x04	; 4
    37fc:	83 e0       	ldi	r24, 0x03	; 3
    37fe:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    3802:	74 c0       	rjmp	.+232    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    3804:	c0 39       	cpi	r28, 0x90	; 144
    3806:	89 e0       	ldi	r24, 0x09	; 9
    3808:	d8 07       	cpc	r29, r24
    380a:	29 f4       	brne	.+10     	; 0x3816 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    380c:	64 e0       	ldi	r22, 0x04	; 4
    380e:	84 e0       	ldi	r24, 0x04	; 4
    3810:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    3814:	6b c0       	rjmp	.+214    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    3816:	c0 39       	cpi	r28, 0x90	; 144
    3818:	ea e0       	ldi	r30, 0x0A	; 10
    381a:	de 07       	cpc	r29, r30
    381c:	29 f4       	brne	.+10     	; 0x3828 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    381e:	64 e0       	ldi	r22, 0x04	; 4
    3820:	85 e0       	ldi	r24, 0x05	; 5
    3822:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    3826:	62 c0       	rjmp	.+196    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    3828:	c0 39       	cpi	r28, 0x90	; 144
    382a:	fb e0       	ldi	r31, 0x0B	; 11
    382c:	df 07       	cpc	r29, r31
    382e:	29 f4       	brne	.+10     	; 0x383a <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    3830:	64 e0       	ldi	r22, 0x04	; 4
    3832:	86 e0       	ldi	r24, 0x06	; 6
    3834:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    3838:	59 c0       	rjmp	.+178    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    383a:	c0 3c       	cpi	r28, 0xC0	; 192
    383c:	88 e0       	ldi	r24, 0x08	; 8
    383e:	d8 07       	cpc	r29, r24
    3840:	29 f4       	brne	.+10     	; 0x384c <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    3842:	68 e0       	ldi	r22, 0x08	; 8
    3844:	83 e0       	ldi	r24, 0x03	; 3
    3846:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    384a:	50 c0       	rjmp	.+160    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    384c:	c0 3c       	cpi	r28, 0xC0	; 192
    384e:	e9 e0       	ldi	r30, 0x09	; 9
    3850:	de 07       	cpc	r29, r30
    3852:	29 f4       	brne	.+10     	; 0x385e <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    3854:	68 e0       	ldi	r22, 0x08	; 8
    3856:	84 e0       	ldi	r24, 0x04	; 4
    3858:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    385c:	47 c0       	rjmp	.+142    	; 0x38ec <usart_init_rs232+0x218>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    385e:	c0 3a       	cpi	r28, 0xA0	; 160
    3860:	f8 e0       	ldi	r31, 0x08	; 8
    3862:	df 07       	cpc	r29, r31
    3864:	29 f4       	brne	.+10     	; 0x3870 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    3866:	60 e1       	ldi	r22, 0x10	; 16
    3868:	83 e0       	ldi	r24, 0x03	; 3
    386a:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    386e:	3e c0       	rjmp	.+124    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    3870:	c0 3a       	cpi	r28, 0xA0	; 160
    3872:	89 e0       	ldi	r24, 0x09	; 9
    3874:	d8 07       	cpc	r29, r24
    3876:	29 f4       	brne	.+10     	; 0x3882 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    3878:	60 e1       	ldi	r22, 0x10	; 16
    387a:	84 e0       	ldi	r24, 0x04	; 4
    387c:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    3880:	35 c0       	rjmp	.+106    	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    3882:	c0 3a       	cpi	r28, 0xA0	; 160
    3884:	ea e0       	ldi	r30, 0x0A	; 10
    3886:	de 07       	cpc	r29, r30
    3888:	29 f4       	brne	.+10     	; 0x3894 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    388a:	60 e1       	ldi	r22, 0x10	; 16
    388c:	85 e0       	ldi	r24, 0x05	; 5
    388e:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    3892:	2c c0       	rjmp	.+88     	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    3894:	c0 3a       	cpi	r28, 0xA0	; 160
    3896:	fb e0       	ldi	r31, 0x0B	; 11
    3898:	df 07       	cpc	r29, r31
    389a:	29 f4       	brne	.+10     	; 0x38a6 <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    389c:	60 e1       	ldi	r22, 0x10	; 16
    389e:	86 e0       	ldi	r24, 0x06	; 6
    38a0:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    38a4:	23 c0       	rjmp	.+70     	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    38a6:	c0 3b       	cpi	r28, 0xB0	; 176
    38a8:	88 e0       	ldi	r24, 0x08	; 8
    38aa:	d8 07       	cpc	r29, r24
    38ac:	29 f4       	brne	.+10     	; 0x38b8 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    38ae:	60 e2       	ldi	r22, 0x20	; 32
    38b0:	83 e0       	ldi	r24, 0x03	; 3
    38b2:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    38b6:	1a c0       	rjmp	.+52     	; 0x38ec <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    38b8:	c0 3b       	cpi	r28, 0xB0	; 176
    38ba:	e9 e0       	ldi	r30, 0x09	; 9
    38bc:	de 07       	cpc	r29, r30
    38be:	29 f4       	brne	.+10     	; 0x38ca <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    38c0:	60 e2       	ldi	r22, 0x20	; 32
    38c2:	84 e0       	ldi	r24, 0x04	; 4
    38c4:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    38c8:	11 c0       	rjmp	.+34     	; 0x38ec <usart_init_rs232+0x218>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    38ca:	c0 38       	cpi	r28, 0x80	; 128
    38cc:	f4 e0       	ldi	r31, 0x04	; 4
    38ce:	df 07       	cpc	r29, r31
    38d0:	29 f4       	brne	.+10     	; 0x38dc <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    38d2:	60 e4       	ldi	r22, 0x40	; 64
    38d4:	83 e0       	ldi	r24, 0x03	; 3
    38d6:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    38da:	08 c0       	rjmp	.+16     	; 0x38ec <usart_init_rs232+0x218>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    38dc:	c0 3a       	cpi	r28, 0xA0	; 160
    38de:	84 e0       	ldi	r24, 0x04	; 4
    38e0:	d8 07       	cpc	r29, r24
    38e2:	21 f4       	brne	.+8      	; 0x38ec <usart_init_rs232+0x218>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    38e4:	60 e4       	ldi	r22, 0x40	; 64
    38e6:	85 e0       	ldi	r24, 0x05	; 5
    38e8:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    38ec:	8d 81       	ldd	r24, Y+5	; 0x05
    38ee:	8f 73       	andi	r24, 0x3F	; 63
    38f0:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    38f2:	f8 01       	movw	r30, r16
    38f4:	95 81       	ldd	r25, Z+5	; 0x05
    38f6:	84 81       	ldd	r24, Z+4	; 0x04
    38f8:	89 2b       	or	r24, r25
    38fa:	96 81       	ldd	r25, Z+6	; 0x06
    38fc:	91 11       	cpse	r25, r1
    38fe:	98 e0       	ldi	r25, 0x08	; 8
    3900:	89 2b       	or	r24, r25
    3902:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    3904:	f8 01       	movw	r30, r16
    3906:	40 81       	ld	r20, Z
    3908:	51 81       	ldd	r21, Z+1	; 0x01
    390a:	62 81       	ldd	r22, Z+2	; 0x02
    390c:	73 81       	ldd	r23, Z+3	; 0x03
    390e:	00 e8       	ldi	r16, 0x80	; 128
    3910:	13 ec       	ldi	r17, 0xC3	; 195
    3912:	29 ec       	ldi	r18, 0xC9	; 201
    3914:	31 e0       	ldi	r19, 0x01	; 1
    3916:	ce 01       	movw	r24, r28
    3918:	ca dd       	rcall	.-1132   	; 0x34ae <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    391a:	9c 81       	ldd	r25, Y+4	; 0x04
    391c:	98 60       	ori	r25, 0x08	; 8
    391e:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    3920:	9c 81       	ldd	r25, Y+4	; 0x04
    3922:	90 61       	ori	r25, 0x10	; 16
    3924:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    3926:	df 91       	pop	r29
    3928:	cf 91       	pop	r28
    392a:	1f 91       	pop	r17
    392c:	0f 91       	pop	r16
    392e:	08 95       	ret

00003930 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    3930:	04 c0       	rjmp	.+8      	; 0x393a <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    3932:	61 50       	subi	r22, 0x01	; 1
    3934:	71 09       	sbc	r23, r1
    3936:	81 09       	sbc	r24, r1
    3938:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    393a:	61 15       	cp	r22, r1
    393c:	71 05       	cpc	r23, r1
    393e:	81 05       	cpc	r24, r1
    3940:	91 05       	cpc	r25, r1
    3942:	b9 f7       	brne	.-18     	; 0x3932 <__portable_avr_delay_cycles+0x2>
    3944:	08 95       	ret

00003946 <__vector_119>:

/* ISR routines */

/* Serial data received */
ISR(USARTF0_RXC_vect)
{
    3946:	1f 92       	push	r1
    3948:	0f 92       	push	r0
    394a:	0f b6       	in	r0, 0x3f	; 63
    394c:	0f 92       	push	r0
    394e:	11 24       	eor	r1, r1
    3950:	0b b6       	in	r0, 0x3b	; 59
    3952:	0f 92       	push	r0
    3954:	2f 93       	push	r18
    3956:	3f 93       	push	r19
    3958:	4f 93       	push	r20
    395a:	5f 93       	push	r21
    395c:	6f 93       	push	r22
    395e:	7f 93       	push	r23
    3960:	8f 93       	push	r24
    3962:	9f 93       	push	r25
    3964:	af 93       	push	r26
    3966:	bf 93       	push	r27
    3968:	ef 93       	push	r30
    396a:	ff 93       	push	r31
	/* Byte received */
	uint8_t ser1_rxd = usart_getchar(USART_SERIAL1);
    396c:	80 ea       	ldi	r24, 0xA0	; 160
    396e:	9b e0       	ldi	r25, 0x0B	; 11
    3970:	98 dd       	rcall	.-1232   	; 0x34a2 <usart_getchar>

	if (g_usart1_rx_idx < C_USART1_RX_BUF_LEN) {
    3972:	20 91 65 28 	lds	r18, 0x2865	; 0x802865 <g_usart1_rx_idx>
    3976:	30 91 66 28 	lds	r19, 0x2866	; 0x802866 <g_usart1_rx_idx+0x1>
    397a:	2f 3f       	cpi	r18, 0xFF	; 255
    397c:	31 05       	cpc	r19, r1
    397e:	09 f0       	breq	.+2      	; 0x3982 <__vector_119+0x3c>
    3980:	58 f4       	brcc	.+22     	; 0x3998 <__vector_119+0x52>
		g_usart1_rx_buf[g_usart1_rx_idx++] = ser1_rxd;
    3982:	a9 01       	movw	r20, r18
    3984:	4f 5f       	subi	r20, 0xFF	; 255
    3986:	5f 4f       	sbci	r21, 0xFF	; 255
    3988:	40 93 65 28 	sts	0x2865, r20	; 0x802865 <g_usart1_rx_idx>
    398c:	50 93 66 28 	sts	0x2866, r21	; 0x802866 <g_usart1_rx_idx+0x1>
    3990:	f9 01       	movw	r30, r18
    3992:	eb 59       	subi	r30, 0x9B	; 155
    3994:	f8 4d       	sbci	r31, 0xD8	; 216
    3996:	80 83       	st	Z, r24
	}

	/* Input string ready to read */
	g_usart1_rx_ready = true;
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	80 93 67 28 	sts	0x2867, r24	; 0x802867 <g_usart1_rx_ready>
}
    399e:	ff 91       	pop	r31
    39a0:	ef 91       	pop	r30
    39a2:	bf 91       	pop	r27
    39a4:	af 91       	pop	r26
    39a6:	9f 91       	pop	r25
    39a8:	8f 91       	pop	r24
    39aa:	7f 91       	pop	r23
    39ac:	6f 91       	pop	r22
    39ae:	5f 91       	pop	r21
    39b0:	4f 91       	pop	r20
    39b2:	3f 91       	pop	r19
    39b4:	2f 91       	pop	r18
    39b6:	0f 90       	pop	r0
    39b8:	0b be       	out	0x3b, r0	; 59
    39ba:	0f 90       	pop	r0
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	0f 90       	pop	r0
    39c0:	1f 90       	pop	r1
    39c2:	18 95       	reti

000039c4 <serial_sim808_send>:


/* Functions */

void serial_sim808_send(const char* cmd, uint8_t len)
{
    39c4:	dc 01       	movw	r26, r24
	/* Make a copy */
	for (uint8_t cnt = len, idx = len - 1; cnt; --cnt, --idx) {
    39c6:	9f ef       	ldi	r25, 0xFF	; 255
    39c8:	96 0f       	add	r25, r22
    39ca:	66 23       	and	r22, r22
    39cc:	61 f0       	breq	.+24     	; 0x39e6 <serial_sim808_send+0x22>
		g_prepare_buf[idx] = cmd[idx];
    39ce:	29 2f       	mov	r18, r25
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	fd 01       	movw	r30, r26
    39d4:	e2 0f       	add	r30, r18
    39d6:	f3 1f       	adc	r31, r19
    39d8:	50 81       	ld	r21, Z
    39da:	f9 01       	movw	r30, r18
    39dc:	e1 5c       	subi	r30, 0xC1	; 193
    39de:	fa 4d       	sbci	r31, 0xDA	; 218
    39e0:	50 83       	st	Z, r21
/* Functions */

void serial_sim808_send(const char* cmd, uint8_t len)
{
	/* Make a copy */
	for (uint8_t cnt = len, idx = len - 1; cnt; --cnt, --idx) {
    39e2:	91 50       	subi	r25, 0x01	; 1
    39e4:	a0 f7       	brcc	.-24     	; 0x39ce <serial_sim808_send+0xa>
		g_prepare_buf[idx] = cmd[idx];
	}
	g_prepare_buf[len]		= '\r';
    39e6:	46 2f       	mov	r20, r22
    39e8:	50 e0       	ldi	r21, 0x00	; 0
    39ea:	fa 01       	movw	r30, r20
    39ec:	e1 5c       	subi	r30, 0xC1	; 193
    39ee:	fa 4d       	sbci	r31, 0xDA	; 218
    39f0:	8d e0       	ldi	r24, 0x0D	; 13
    39f2:	80 83       	st	Z, r24
	g_prepare_buf[len + 1]	= 0;
    39f4:	11 82       	std	Z+1, r1	; 0x01

	/* Send the string to the SIM808 */
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    39f6:	6f e3       	ldi	r22, 0x3F	; 63
    39f8:	75 e2       	ldi	r23, 0x25	; 37
    39fa:	80 ea       	ldi	r24, 0xA0	; 160
    39fc:	9b e0       	ldi	r25, 0x0B	; 11
    39fe:	2f cd       	rjmp	.-1442   	; 0x345e <usart_serial_write_packet>
    3a00:	08 95       	ret

00003a02 <serial_init>:
}

/* Set up serial connection to the SIM808 */
void serial_init(void)
{
    3a02:	cf 92       	push	r12
    3a04:	df 92       	push	r13
    3a06:	ff 92       	push	r15
    3a08:	0f 93       	push	r16
    3a0a:	1f 93       	push	r17
    3a0c:	cf 93       	push	r28
    3a0e:	df 93       	push	r29
    3a10:	cd b7       	in	r28, 0x3d	; 61
    3a12:	de b7       	in	r29, 0x3e	; 62
    3a14:	27 97       	sbiw	r28, 0x07	; 7
    3a16:	cd bf       	out	0x3d, r28	; 61
    3a18:	de bf       	out	0x3e, r29	; 62
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3a1a:	e0 ea       	ldi	r30, 0xA0	; 160
    3a1c:	f6 e0       	ldi	r31, 0x06	; 6
    3a1e:	92 e0       	ldi	r25, 0x02	; 2
    3a20:	95 83       	std	Z+5, r25	; 0x05
    3a22:	88 e0       	ldi	r24, 0x08	; 8
    3a24:	85 83       	std	Z+5, r24	; 0x05
    3a26:	60 e8       	ldi	r22, 0x80	; 128
    3a28:	65 83       	std	Z+5, r22	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3a2a:	20 e8       	ldi	r18, 0x80	; 128
    3a2c:	36 e0       	ldi	r19, 0x06	; 6
    3a2e:	00 e2       	ldi	r16, 0x20	; 32
    3a30:	d9 01       	movw	r26, r18
    3a32:	16 96       	adiw	r26, 0x06	; 6
    3a34:	0c 93       	st	X, r16
    3a36:	16 97       	sbiw	r26, 0x06	; 6
    3a38:	70 e1       	ldi	r23, 0x10	; 16
    3a3a:	16 96       	adiw	r26, 0x06	; 6
    3a3c:	7c 93       	st	X, r23
    3a3e:	0f 2e       	mov	r0, r31
    3a40:	f0 e6       	ldi	r31, 0x60	; 96
    3a42:	cf 2e       	mov	r12, r31
    3a44:	f6 e0       	ldi	r31, 0x06	; 6
    3a46:	df 2e       	mov	r13, r31
    3a48:	f0 2d       	mov	r31, r0
    3a4a:	d6 01       	movw	r26, r12
    3a4c:	16 96       	adiw	r26, 0x06	; 6
    3a4e:	9c 93       	st	X, r25
    3a50:	16 97       	sbiw	r26, 0x06	; 6
    3a52:	16 96       	adiw	r26, 0x06	; 6
    3a54:	8c 93       	st	X, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3a56:	4f b7       	in	r20, 0x3f	; 63
    3a58:	49 83       	std	Y+1, r20	; 0x01
	cpu_irq_disable();
    3a5a:	f8 94       	cli
	return flags;
    3a5c:	f9 80       	ldd	r15, Y+1	; 0x01
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3a5e:	41 eb       	ldi	r20, 0xB1	; 177
    3a60:	56 e0       	ldi	r21, 0x06	; 6
    3a62:	da 01       	movw	r26, r20
    3a64:	1c 91       	ld	r17, X
    3a66:	17 70       	andi	r17, 0x07	; 7
    3a68:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3a6a:	1c 91       	ld	r17, X
    3a6c:	10 68       	ori	r17, 0x80	; 128
    3a6e:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a70:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3a72:	4f b7       	in	r20, 0x3f	; 63
    3a74:	4a 83       	std	Y+2, r20	; 0x02
	cpu_irq_disable();
    3a76:	f8 94       	cli
	return flags;
    3a78:	fa 80       	ldd	r15, Y+2	; 0x02
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3a7a:	43 eb       	ldi	r20, 0xB3	; 179
    3a7c:	56 e0       	ldi	r21, 0x06	; 6
    3a7e:	da 01       	movw	r26, r20
    3a80:	1c 91       	ld	r17, X
    3a82:	17 70       	andi	r17, 0x07	; 7
    3a84:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3a86:	1c 91       	ld	r17, X
    3a88:	10 68       	ori	r17, 0x80	; 128
    3a8a:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a8c:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3a8e:	4f b7       	in	r20, 0x3f	; 63
    3a90:	4b 83       	std	Y+3, r20	; 0x03
	cpu_irq_disable();
    3a92:	f8 94       	cli
	return flags;
    3a94:	fb 80       	ldd	r15, Y+3	; 0x03
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3a96:	47 eb       	ldi	r20, 0xB7	; 183
    3a98:	56 e0       	ldi	r21, 0x06	; 6
    3a9a:	da 01       	movw	r26, r20
    3a9c:	1c 91       	ld	r17, X
    3a9e:	17 70       	andi	r17, 0x07	; 7
    3aa0:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3aa2:	1c 91       	ld	r17, X
    3aa4:	10 68       	ori	r17, 0x80	; 128
    3aa6:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3aa8:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3aaa:	4f b7       	in	r20, 0x3f	; 63
    3aac:	4c 83       	std	Y+4, r20	; 0x04
	cpu_irq_disable();
    3aae:	f8 94       	cli
	return flags;
    3ab0:	fc 80       	ldd	r15, Y+4	; 0x04
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3ab2:	45 e9       	ldi	r20, 0x95	; 149
    3ab4:	56 e0       	ldi	r21, 0x06	; 6
    3ab6:	da 01       	movw	r26, r20
    3ab8:	1c 91       	ld	r17, X
    3aba:	17 70       	andi	r17, 0x07	; 7
    3abc:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3abe:	1c 91       	ld	r17, X
    3ac0:	10 69       	ori	r17, 0x90	; 144
    3ac2:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3ac4:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3ac6:	4f b7       	in	r20, 0x3f	; 63
    3ac8:	4d 83       	std	Y+5, r20	; 0x05
	cpu_irq_disable();
    3aca:	f8 94       	cli
	return flags;
    3acc:	fd 80       	ldd	r15, Y+5	; 0x05
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3ace:	44 e9       	ldi	r20, 0x94	; 148
    3ad0:	56 e0       	ldi	r21, 0x06	; 6
    3ad2:	da 01       	movw	r26, r20
    3ad4:	1c 91       	ld	r17, X
    3ad6:	17 70       	andi	r17, 0x07	; 7
    3ad8:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3ada:	1c 91       	ld	r17, X
    3adc:	10 69       	ori	r17, 0x90	; 144
    3ade:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3ae0:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3ae2:	4f b7       	in	r20, 0x3f	; 63
    3ae4:	4e 83       	std	Y+6, r20	; 0x06
	cpu_irq_disable();
    3ae6:	f8 94       	cli
	return flags;
    3ae8:	fe 80       	ldd	r15, Y+6	; 0x06
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3aea:	41 e7       	ldi	r20, 0x71	; 113
    3aec:	56 e0       	ldi	r21, 0x06	; 6
    3aee:	da 01       	movw	r26, r20
    3af0:	1c 91       	ld	r17, X
    3af2:	17 70       	andi	r17, 0x07	; 7
    3af4:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3af6:	1c 91       	ld	r17, X
    3af8:	10 69       	ori	r17, 0x90	; 144
    3afa:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3afc:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3afe:	4f b7       	in	r20, 0x3f	; 63
    3b00:	4f 83       	std	Y+7, r20	; 0x07
	cpu_irq_disable();
    3b02:	f8 94       	cli
	return flags;
    3b04:	ff 80       	ldd	r15, Y+7	; 0x07
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3b06:	43 e7       	ldi	r20, 0x73	; 115
    3b08:	56 e0       	ldi	r21, 0x06	; 6
    3b0a:	da 01       	movw	r26, r20
    3b0c:	1c 91       	ld	r17, X
    3b0e:	17 70       	andi	r17, 0x07	; 7
    3b10:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3b12:	1c 91       	ld	r17, X
    3b14:	10 69       	ori	r17, 0x90	; 144
    3b16:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b18:	ff be       	out	0x3f, r15	; 63
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3b1a:	91 83       	std	Z+1, r25	; 0x01
    3b1c:	81 83       	std	Z+1, r24	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3b1e:	54 e0       	ldi	r21, 0x04	; 4
    3b20:	52 83       	std	Z+2, r21	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3b22:	61 83       	std	Z+1, r22	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3b24:	10 e4       	ldi	r17, 0x40	; 64
    3b26:	12 83       	std	Z+2, r17	; 0x02
    3b28:	72 83       	std	Z+2, r23	; 0x02
    3b2a:	41 e0       	ldi	r20, 0x01	; 1
    3b2c:	42 83       	std	Z+2, r20	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3b2e:	f9 01       	movw	r30, r18
    3b30:	01 83       	std	Z+1, r16	; 0x01
    3b32:	71 83       	std	Z+1, r23	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3b34:	82 83       	std	Z+2, r24	; 0x02
    3b36:	e0 e0       	ldi	r30, 0x00	; 0
    3b38:	f6 e0       	ldi	r31, 0x06	; 6
    3b3a:	62 83       	std	Z+2, r22	; 0x02
    3b3c:	12 83       	std	Z+2, r17	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3b3e:	d6 01       	movw	r26, r12
    3b40:	11 96       	adiw	r26, 0x01	; 1
    3b42:	9c 93       	st	X, r25
    3b44:	11 97       	sbiw	r26, 0x01	; 1
    3b46:	11 96       	adiw	r26, 0x01	; 1
    3b48:	8c 93       	st	X, r24
    3b4a:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3b4c:	12 96       	adiw	r26, 0x02	; 2
    3b4e:	5c 93       	st	X, r21
    3b50:	12 97       	sbiw	r26, 0x02	; 2
    3b52:	12 96       	adiw	r26, 0x02	; 2
    3b54:	4c 93       	st	X, r20
    3b56:	40 93 e2 07 	sts	0x07E2, r20	; 0x8007e2 <__TEXT_REGION_LENGTH__+0x7007e2>

	ioport_set_pin_dir(GPS_GSM_1PPS_GPIO,			IOPORT_DIR_INPUT);


	/* Prepare to use ASF USART service */
	g_usart1_options.baudrate	= USART_SERIAL1_BAUDRATE;
    3b5a:	e8 e6       	ldi	r30, 0x68	; 104
    3b5c:	f8 e2       	ldi	r31, 0x28	; 40
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	96 e9       	ldi	r25, 0x96	; 150
    3b62:	a0 e0       	ldi	r26, 0x00	; 0
    3b64:	b0 e0       	ldi	r27, 0x00	; 0
    3b66:	80 83       	st	Z, r24
    3b68:	91 83       	std	Z+1, r25	; 0x01
    3b6a:	a2 83       	std	Z+2, r26	; 0x02
    3b6c:	b3 83       	std	Z+3, r27	; 0x03
	g_usart1_options.charlength	= USART_SERIAL1_CHAR_LENGTH;
    3b6e:	83 e0       	ldi	r24, 0x03	; 3
    3b70:	84 83       	std	Z+4, r24	; 0x04
	g_usart1_options.paritytype	= USART_SERIAL1_PARITY;
    3b72:	15 82       	std	Z+5, r1	; 0x05
	g_usart1_options.stopbits	= USART_SERIAL1_STOP_BIT;
    3b74:	16 82       	std	Z+6, r1	; 0x06
}
    3b76:	27 96       	adiw	r28, 0x07	; 7
    3b78:	cd bf       	out	0x3d, r28	; 61
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	1f 91       	pop	r17
    3b82:	0f 91       	pop	r16
    3b84:	ff 90       	pop	r15
    3b86:	df 90       	pop	r13
    3b88:	cf 90       	pop	r12
    3b8a:	08 95       	ret

00003b8c <serial_start>:
PROGMEM_DECLARE(const char, PM_TWI1_INIT_ONBOARD_SIM808_GPS_01[]);
PROGMEM_DECLARE(const char, PM_TWI1_INIT_ONBOARD_SIM808_GPS_02[]);

/* USB device stack start function to enable stack and start USB */
void serial_start(void)
{
    3b8c:	2f 92       	push	r2
    3b8e:	3f 92       	push	r3
    3b90:	4f 92       	push	r4
    3b92:	5f 92       	push	r5
    3b94:	6f 92       	push	r6
    3b96:	7f 92       	push	r7
    3b98:	8f 92       	push	r8
    3b9a:	9f 92       	push	r9
    3b9c:	af 92       	push	r10
    3b9e:	bf 92       	push	r11
    3ba0:	cf 92       	push	r12
    3ba2:	df 92       	push	r13
    3ba4:	ef 92       	push	r14
    3ba6:	ff 92       	push	r15
    3ba8:	0f 93       	push	r16
    3baa:	1f 93       	push	r17
    3bac:	cf 93       	push	r28
    3bae:	df 93       	push	r29
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
    3bb4:	27 97       	sbiw	r28, 0x07	; 7
    3bb6:	cd bf       	out	0x3d, r28	; 61
    3bb8:	de bf       	out	0x3e, r29	; 62
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    3bba:	e8 e6       	ldi	r30, 0x68	; 104
    3bbc:	f8 e2       	ldi	r31, 0x28	; 40
    3bbe:	84 81       	ldd	r24, Z+4	; 0x04
    3bc0:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    3bc2:	85 81       	ldd	r24, Z+5	; 0x05
    3bc4:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    3bc6:	86 81       	ldd	r24, Z+6	; 0x06
    3bc8:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    3bca:	80 81       	ld	r24, Z
    3bcc:	91 81       	ldd	r25, Z+1	; 0x01
    3bce:	a2 81       	ldd	r26, Z+2	; 0x02
    3bd0:	b3 81       	ldd	r27, Z+3	; 0x03
    3bd2:	89 83       	std	Y+1, r24	; 0x01
    3bd4:	9a 83       	std	Y+2, r25	; 0x02
    3bd6:	ab 83       	std	Y+3, r26	; 0x03
    3bd8:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
	}
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    3bda:	60 e1       	ldi	r22, 0x10	; 16
    3bdc:	86 e0       	ldi	r24, 0x06	; 6
    3bde:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    3be2:	be 01       	movw	r22, r28
    3be4:	6f 5f       	subi	r22, 0xFF	; 255
    3be6:	7f 4f       	sbci	r23, 0xFF	; 255
    3be8:	80 ea       	ldi	r24, 0xA0	; 160
    3bea:	9b e0       	ldi	r25, 0x0B	; 11
    3bec:	73 dd       	rcall	.-1306   	; 0x36d4 <usart_init_rs232>

	/* Init and start of the ASF USART service/device */
	usart_serial_init(USART_SERIAL1, &g_usart1_options);

	/* ISR interrupt levels */
	((USART_t*)USART_SERIAL1)->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    3bee:	80 e1       	ldi	r24, 0x10	; 16
    3bf0:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>

	/* Inform about to start the SIM808 - LCD */
	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_START);
    3bf4:	82 e6       	ldi	r24, 0x62	; 98
    3bf6:	94 e0       	ldi	r25, 0x04	; 4
    3bf8:	9f 93       	push	r25
    3bfa:	8f 93       	push	r24
    3bfc:	1f 92       	push	r1
    3bfe:	68 94       	set
    3c00:	ff 24       	eor	r15, r15
    3c02:	f6 f8       	bld	r15, 6
    3c04:	ff 92       	push	r15
    3c06:	0f e3       	ldi	r16, 0x3F	; 63
    3c08:	15 e2       	ldi	r17, 0x25	; 37
    3c0a:	1f 93       	push	r17
    3c0c:	0f 93       	push	r16
    3c0e:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3c12:	a8 01       	movw	r20, r16
    3c14:	66 e4       	ldi	r22, 0x46	; 70
    3c16:	88 e0       	ldi	r24, 0x08	; 8
    3c18:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>

	/* Inform about to start the SIM808 - USB */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_START);
    3c1c:	86 ec       	ldi	r24, 0xC6	; 198
    3c1e:	94 e0       	ldi	r25, 0x04	; 4
    3c20:	9f 93       	push	r25
    3c22:	8f 93       	push	r24
    3c24:	1f 92       	push	r1
    3c26:	ff 92       	push	r15
    3c28:	1f 93       	push	r17
    3c2a:	0f 93       	push	r16
    3c2c:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, len, false);
    3c30:	40 e0       	ldi	r20, 0x00	; 0
    3c32:	68 2f       	mov	r22, r24
    3c34:	c8 01       	movw	r24, r16
    3c36:	d0 d1       	rcall	.+928    	; 0x3fd8 <udi_write_tx_buf>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3c38:	80 e2       	ldi	r24, 0x20	; 32
    3c3a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

	/* Release the GSM_RESETn */
	ioport_set_pin_level(GSM_RESET_DRV_GPIO, HIGH);
	delay_ms(500);
    3c3e:	61 ea       	ldi	r22, 0xA1	; 161
    3c40:	75 e2       	ldi	r23, 0x25	; 37
    3c42:	86 e2       	ldi	r24, 0x26	; 38
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	74 de       	rcall	.-792    	; 0x3930 <__portable_avr_delay_cycles>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3c48:	00 ea       	ldi	r16, 0xA0	; 160
    3c4a:	16 e0       	ldi	r17, 0x06	; 6
    3c4c:	82 e0       	ldi	r24, 0x02	; 2
    3c4e:	f8 01       	movw	r30, r16
    3c50:	86 83       	std	Z+6, r24	; 0x06

	/* Data Terminal Ready is true */
	ioport_set_pin_level(GSM_DTR1_DRV, LOW);	// Activate SIM808 (non SLEEP mode)
	delay_ms(100);
    3c52:	61 e2       	ldi	r22, 0x21	; 33
    3c54:	71 ea       	ldi	r23, 0xA1	; 161
    3c56:	87 e0       	ldi	r24, 0x07	; 7
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	6a de       	rcall	.-812    	; 0x3930 <__portable_avr_delay_cycles>
    3c5c:	80 e8       	ldi	r24, 0x80	; 128
    3c5e:	f8 01       	movw	r30, r16
	ioport_set_pin_level(GSM_RTS1_DRV, LOW);	// Serial line ready
	delay_ms(1);
    3c60:	86 83       	std	Z+6, r24	; 0x06
    3c62:	68 e8       	ldi	r22, 0x88	; 136
    3c64:	73 e1       	ldi	r23, 0x13	; 19
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	62 de       	rcall	.-828    	; 0x3930 <__portable_avr_delay_cycles>
    3c6c:	cd bf       	out	0x3d, r28	; 61
	/* ISR interrupt levels */
	((USART_t*)USART_SERIAL1)->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;

	/* Inform about to start the SIM808 - LCD */
	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_START);
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	68 94       	set
    3c72:	bb 24       	eor	r11, r11
				g_usart1_rx_ready = false;
				cpu_irq_restore(flags);
			}

			/* Leave loop when SIM808 responds */
			if (g_prepare_buf[0] && strstr_P(g_prepare_buf, PM_SIM808_OK))
    3c74:	b3 f8       	bld	r11, 3
    3c76:	0f 2e       	mov	r0, r31
    3c78:	ff e3       	ldi	r31, 0x3F	; 63
    3c7a:	ef 2e       	mov	r14, r31
    3c7c:	f5 e2       	ldi	r31, 0x25	; 37
    3c7e:	ff 2e       	mov	r15, r31
    3c80:	f0 2d       	mov	r31, r0
    3c82:	9e 2c       	mov	r9, r14
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3c84:	af 2c       	mov	r10, r15
    3c86:	0f 2e       	mov	r0, r31
    3c88:	f0 ea       	ldi	r31, 0xA0	; 160
    3c8a:	cf 2e       	mov	r12, r31
    3c8c:	f6 e0       	ldi	r31, 0x06	; 6
    3c8e:	df 2e       	mov	r13, r31
    3c90:	f0 2d       	mov	r31, r0
    3c92:	68 94       	set
    3c94:	88 24       	eor	r8, r8
    3c96:	87 f8       	bld	r8, 7
    3c98:	68 94       	set
    3c9a:	77 24       	eor	r7, r7
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3c9c:	71 f8       	bld	r7, 1
    3c9e:	68 94       	set
    3ca0:	66 24       	eor	r6, r6
				/* Inform about restart - LCD */
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
    3ca2:	65 f8       	bld	r6, 5
    3ca4:	0f 2e       	mov	r0, r31
    3ca6:	f6 e4       	ldi	r31, 0x46	; 70
    3ca8:	4f 2e       	mov	r4, r31
    3caa:	f4 e0       	ldi	r31, 0x04	; 4
    3cac:	5f 2e       	mov	r5, r31
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);

				/* Inform about restart - USB */
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_RESTART);
    3cae:	f0 2d       	mov	r31, r0
    3cb0:	0f 2e       	mov	r0, r31
    3cb2:	fe e9       	ldi	r31, 0x9E	; 158
    3cb4:	2f 2e       	mov	r2, r31
    3cb6:	f4 e0       	ldi	r31, 0x04	; 4
    3cb8:	3f 2e       	mov	r3, r31
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3cba:	f0 2d       	mov	r31, r0
    3cbc:	0c e0       	ldi	r16, 0x0C	; 12
	ioport_set_pin_level(GSM_RTS1_DRV, LOW);	// Serial line ready
	delay_ms(1);

	/* Synchronize with SIM808 */
	while (true) {
		usart_serial_write_packet(USART_SERIAL1, (const uint8_t*)"AT\r", 3);
    3cbe:	10 e0       	ldi	r17, 0x00	; 0
    3cc0:	43 e0       	ldi	r20, 0x03	; 3
    3cc2:	50 e0       	ldi	r21, 0x00	; 0
    3cc4:	64 e3       	ldi	r22, 0x34	; 52
    3cc6:	71 e2       	ldi	r23, 0x21	; 33
    3cc8:	80 ea       	ldi	r24, 0xA0	; 160
		delay_ms(100);
    3cca:	9b e0       	ldi	r25, 0x0B	; 11
    3ccc:	c8 db       	rcall	.-2160   	; 0x345e <usart_serial_write_packet>
    3cce:	61 e2       	ldi	r22, 0x21	; 33
    3cd0:	71 ea       	ldi	r23, 0xA1	; 161
    3cd2:	87 e0       	ldi	r24, 0x07	; 7
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
		if (g_usart1_rx_ready) {
    3cd6:	2c de       	rcall	.-936    	; 0x3930 <__portable_avr_delay_cycles>
    3cd8:	80 91 67 28 	lds	r24, 0x2867	; 0x802867 <g_usart1_rx_ready>
    3cdc:	88 23       	and	r24, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3cde:	81 f3       	breq	.-32     	; 0x3cc0 <serial_start+0x134>
    3ce0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    3ce2:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    3ce4:	f8 94       	cli
			{
				irqflags_t flags = cpu_irq_save();
				for (int16_t idx = g_usart1_rx_idx - 1; idx >= 0; --idx) {
    3ce6:	39 81       	ldd	r19, Y+1	; 0x01
    3ce8:	e0 91 65 28 	lds	r30, 0x2865	; 0x802865 <g_usart1_rx_idx>
    3cec:	f0 91 66 28 	lds	r31, 0x2866	; 0x802866 <g_usart1_rx_idx+0x1>
    3cf0:	cf 01       	movw	r24, r30
    3cf2:	01 97       	sbiw	r24, 0x01	; 1
    3cf4:	4a f0       	brmi	.+18     	; 0x3d08 <serial_start+0x17c>
    3cf6:	df 01       	movw	r26, r30
    3cf8:	ab 59       	subi	r26, 0x9B	; 155
    3cfa:	b8 4d       	sbci	r27, 0xD8	; 216
    3cfc:	e1 5c       	subi	r30, 0xC1	; 193
					g_prepare_buf[idx] = g_usart1_rx_buf[idx];
    3cfe:	fa 4d       	sbci	r31, 0xDA	; 218
    3d00:	2e 91       	ld	r18, -X
		usart_serial_write_packet(USART_SERIAL1, (const uint8_t*)"AT\r", 3);
		delay_ms(100);
		if (g_usart1_rx_ready) {
			{
				irqflags_t flags = cpu_irq_save();
				for (int16_t idx = g_usart1_rx_idx - 1; idx >= 0; --idx) {
    3d02:	22 93       	st	-Z, r18
    3d04:	01 97       	sbiw	r24, 0x01	; 1
					g_prepare_buf[idx] = g_usart1_rx_buf[idx];
				}
				g_usart1_rx_idx = 0;
    3d06:	e2 f7       	brpl	.-8      	; 0x3d00 <serial_start+0x174>
    3d08:	10 92 65 28 	sts	0x2865, r1	; 0x802865 <g_usart1_rx_idx>
    3d0c:	10 92 66 28 	sts	0x2866, r1	; 0x802866 <g_usart1_rx_idx+0x1>
				g_usart1_rx_ready = false;
    3d10:	10 92 67 28 	sts	0x2867, r1	; 0x802867 <g_usart1_rx_ready>
				cpu_irq_restore(flags);
			}

			/* Leave loop when SIM808 responds */
			if (g_prepare_buf[0] && strstr_P(g_prepare_buf, PM_SIM808_OK))
    3d14:	3f bf       	out	0x3f, r19	; 63
    3d16:	f7 01       	movw	r30, r14
    3d18:	80 81       	ld	r24, Z
    3d1a:	88 23       	and	r24, r24
    3d1c:	49 f0       	breq	.+18     	; 0x3d30 <serial_start+0x1a4>
    3d1e:	6e ee       	ldi	r22, 0xEE	; 238
    3d20:	74 e0       	ldi	r23, 0x04	; 4
    3d22:	89 2d       	mov	r24, r9
    3d24:	9a 2d       	mov	r25, r10
    3d26:	0e 94 a4 7f 	call	0xff48	; 0xff48 <strstr_P>
    3d2a:	89 2b       	or	r24, r25
    3d2c:	09 f0       	breq	.+2      	; 0x3d30 <serial_start+0x1a4>
    3d2e:	52 c0       	rjmp	.+164    	; 0x3dd4 <serial_start+0x248>
    3d30:	01 50       	subi	r16, 0x01	; 1
				break;

			if (loop_ctr++ > 10) {
    3d32:	11 09       	sbc	r17, r1
    3d34:	09 f0       	breq	.+2      	; 0x3d38 <serial_start+0x1ac>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3d36:	c4 cf       	rjmp	.-120    	; 0x3cc0 <serial_start+0x134>
    3d38:	f6 01       	movw	r30, r12
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3d3a:	85 82       	std	Z+5, r8	; 0x05
    3d3c:	75 82       	std	Z+5, r7	; 0x05

				/* Turn off SIM808 */
				ioport_set_pin_level(GSM_RTS1_DRV,			HIGH);	// Serial line NOT ready
				ioport_set_pin_level(GSM_DTR1_DRV,			HIGH);	// DTR inactive
				ioport_set_pin_level(GSM_RESET_DRV_GPIO,	LOW);	// RESETn active
				delay_ms(150);
    3d3e:	60 92 86 06 	sts	0x0686, r6	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    3d42:	61 eb       	ldi	r22, 0xB1	; 177
    3d44:	71 e7       	ldi	r23, 0x71	; 113
    3d46:	8b e0       	ldi	r24, 0x0B	; 11
    3d48:	90 e0       	ldi	r25, 0x00	; 0

				/* Inform about restart - LCD */
				if (line > 12) {
    3d4a:	f2 dd       	rcall	.-1052   	; 0x3930 <__portable_avr_delay_cycles>
    3d4c:	fc e0       	ldi	r31, 0x0C	; 12
    3d4e:	fb 15       	cp	r31, r11
					task_twi2_lcd_header();
    3d50:	30 f4       	brcc	.+12     	; 0x3d5e <serial_start+0x1d2>
    3d52:	0e 94 66 36 	call	0x6ccc	; 0x6ccc <task_twi2_lcd_header>
					line = 3;
    3d56:	0f 2e       	mov	r0, r31
    3d58:	f3 e0       	ldi	r31, 0x03	; 3
    3d5a:	bf 2e       	mov	r11, r31
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
    3d5c:	f0 2d       	mov	r31, r0
    3d5e:	5f 92       	push	r5
    3d60:	4f 92       	push	r4
    3d62:	1f 92       	push	r1
    3d64:	20 e4       	ldi	r18, 0x40	; 64
    3d66:	2f 93       	push	r18
    3d68:	ff 92       	push	r15
    3d6a:	ef 92       	push	r14
    3d6c:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3d70:	11 e0       	ldi	r17, 0x01	; 1
    3d72:	1b 0d       	add	r17, r11
    3d74:	6b 2d       	mov	r22, r11
    3d76:	66 0f       	add	r22, r22
    3d78:	86 2f       	mov	r24, r22
    3d7a:	88 0f       	add	r24, r24
    3d7c:	88 0f       	add	r24, r24
    3d7e:	68 0f       	add	r22, r24
    3d80:	a7 01       	movw	r20, r14
    3d82:	88 e0       	ldi	r24, 0x08	; 8
    3d84:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>

				/* Inform about restart - USB */
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_RESTART);
    3d88:	3f 92       	push	r3
    3d8a:	2f 92       	push	r2
    3d8c:	1f 92       	push	r1
    3d8e:	30 e4       	ldi	r19, 0x40	; 64
    3d90:	3f 93       	push	r19
    3d92:	ff 92       	push	r15
    3d94:	ef 92       	push	r14
				udi_write_tx_buf(g_prepare_buf, len, false);
    3d96:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    3d9a:	40 e0       	ldi	r20, 0x00	; 0
    3d9c:	68 2f       	mov	r22, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3d9e:	c7 01       	movw	r24, r14
    3da0:	1b d1       	rcall	.+566    	; 0x3fd8 <udi_write_tx_buf>

				/* Restart SIM808 */
				ioport_set_pin_level(GSM_RESET_DRV_GPIO,	HIGH);	// Release the RESETn line
				delay_ms(500);
    3da2:	60 92 85 06 	sts	0x0685, r6	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    3da6:	61 ea       	ldi	r22, 0xA1	; 161
    3da8:	75 e2       	ldi	r23, 0x25	; 37
    3daa:	86 e2       	ldi	r24, 0x26	; 38
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	c0 dd       	rcall	.-1152   	; 0x3930 <__portable_avr_delay_cycles>
				ioport_set_pin_level(GSM_DTR1_DRV,			LOW);	// DTR active
				delay_ms(100);
    3db0:	f6 01       	movw	r30, r12
    3db2:	76 82       	std	Z+6, r7	; 0x06
    3db4:	61 e2       	ldi	r22, 0x21	; 33
    3db6:	71 ea       	ldi	r23, 0xA1	; 161
    3db8:	87 e0       	ldi	r24, 0x07	; 7
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	b9 dd       	rcall	.-1166   	; 0x3930 <__portable_avr_delay_cycles>
				ioport_set_pin_level(GSM_RTS1_DRV,			LOW);	// Serial line ready
				delay_ms(1);
    3dbe:	f6 01       	movw	r30, r12
    3dc0:	86 82       	std	Z+6, r8	; 0x06
    3dc2:	68 e8       	ldi	r22, 0x88	; 136
    3dc4:	73 e1       	ldi	r23, 0x13	; 19
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	b2 dd       	rcall	.-1180   	; 0x3930 <__portable_avr_delay_cycles>
    3dcc:	cd bf       	out	0x3d, r28	; 61
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	b1 2e       	mov	r11, r17
			}
		}
	}

	/* Set the auto baud rate to fix rate */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_IPR, USART_SERIAL1_BAUDRATE);
    3dd2:	74 cf       	rjmp	.-280    	; 0x3cbc <serial_start+0x130>
    3dd4:	1f 92       	push	r1
    3dd6:	1f 92       	push	r1
    3dd8:	86 e9       	ldi	r24, 0x96	; 150
    3dda:	8f 93       	push	r24
    3ddc:	1f 92       	push	r1
    3dde:	84 e2       	ldi	r24, 0x24	; 36
    3de0:	94 e0       	ldi	r25, 0x04	; 4
    3de2:	9f 93       	push	r25
    3de4:	8f 93       	push	r24
    3de6:	1f 92       	push	r1
    3de8:	68 94       	set
    3dea:	ff 24       	eor	r15, r15
    3dec:	f6 f8       	bld	r15, 6
    3dee:	ff 92       	push	r15
    3df0:	0f e3       	ldi	r16, 0x3F	; 63
    3df2:	15 e2       	ldi	r17, 0x25	; 37
    3df4:	1f 93       	push	r17
    3df6:	0f 93       	push	r16
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3df8:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    3dfc:	ac 01       	movw	r20, r24
    3dfe:	b8 01       	movw	r22, r16
    3e00:	80 ea       	ldi	r24, 0xA0	; 160
    3e02:	9b e0       	ldi	r25, 0x0B	; 11
	yield_ms(500);
    3e04:	2c db       	rcall	.-2472   	; 0x345e <usart_serial_write_packet>
    3e06:	84 ef       	ldi	r24, 0xF4	; 244
    3e08:	91 e0       	ldi	r25, 0x01	; 1
    3e0a:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>

#if 1
	/* Request the version number of the firmware */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_INFO_01);
    3e0e:	82 e1       	ldi	r24, 0x12	; 18
    3e10:	94 e0       	ldi	r25, 0x04	; 4
    3e12:	9f 93       	push	r25
    3e14:	8f 93       	push	r24
    3e16:	1f 92       	push	r1
    3e18:	ff 92       	push	r15
    3e1a:	1f 93       	push	r17
    3e1c:	0f 93       	push	r16
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3e1e:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    3e22:	ac 01       	movw	r20, r24
    3e24:	b8 01       	movw	r22, r16
    3e26:	80 ea       	ldi	r24, 0xA0	; 160
    3e28:	9b e0       	ldi	r25, 0x0B	; 11
	yield_ms(1000);
    3e2a:	19 db       	rcall	.-2510   	; 0x345e <usart_serial_write_packet>
    3e2c:	88 ee       	ldi	r24, 0xE8	; 232
    3e2e:	93 e0       	ldi	r25, 0x03	; 3
	yield_ms(1000);
#endif

#if 1
	/* Minimize functionality - do not do GSM */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_CFUN0);
    3e30:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
    3e34:	88 e1       	ldi	r24, 0x18	; 24
    3e36:	94 e0       	ldi	r25, 0x04	; 4
    3e38:	9f 93       	push	r25
    3e3a:	8f 93       	push	r24
    3e3c:	1f 92       	push	r1
    3e3e:	ff 92       	push	r15
    3e40:	1f 93       	push	r17
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3e42:	0f 93       	push	r16
    3e44:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    3e48:	ac 01       	movw	r20, r24
    3e4a:	b8 01       	movw	r22, r16
    3e4c:	80 ea       	ldi	r24, 0xA0	; 160
	yield_ms(500);
    3e4e:	9b e0       	ldi	r25, 0x0B	; 11
    3e50:	06 db       	rcall	.-2548   	; 0x345e <usart_serial_write_packet>
    3e52:	84 ef       	ldi	r24, 0xF4	; 244
    3e54:	91 e0       	ldi	r25, 0x01	; 1
#endif

#if 1
	/* Enable GNSS (GPS, Glonass, ...) */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_GPS_01, 1);
    3e56:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
    3e5a:	1f 92       	push	r1
    3e5c:	ee 24       	eor	r14, r14
    3e5e:	e3 94       	inc	r14
    3e60:	ef 92       	push	r14
    3e62:	82 e0       	ldi	r24, 0x02	; 2
    3e64:	94 e0       	ldi	r25, 0x04	; 4
    3e66:	9f 93       	push	r25
    3e68:	8f 93       	push	r24
    3e6a:	1f 92       	push	r1
    3e6c:	ff 92       	push	r15
    3e6e:	1f 93       	push	r17
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3e70:	0f 93       	push	r16
    3e72:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    3e76:	ac 01       	movw	r20, r24
    3e78:	b8 01       	movw	r22, r16
    3e7a:	80 ea       	ldi	r24, 0xA0	; 160
	yield_ms(500);
    3e7c:	9b e0       	ldi	r25, 0x0B	; 11
    3e7e:	ef da       	rcall	.-2594   	; 0x345e <usart_serial_write_packet>
    3e80:	84 ef       	ldi	r24, 0xF4	; 244
    3e82:	91 e0       	ldi	r25, 0x01	; 1
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_GPS_02, 1);
    3e84:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
    3e88:	1f 92       	push	r1
    3e8a:	ef 92       	push	r14
    3e8c:	85 ef       	ldi	r24, 0xF5	; 245
    3e8e:	93 e0       	ldi	r25, 0x03	; 3
    3e90:	9f 93       	push	r25
    3e92:	8f 93       	push	r24
    3e94:	1f 92       	push	r1
    3e96:	ff 92       	push	r15
    3e98:	1f 93       	push	r17
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3e9a:	0f 93       	push	r16
    3e9c:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    3ea0:	cd bf       	out	0x3d, r28	; 61
    3ea2:	de bf       	out	0x3e, r29	; 62
    3ea4:	ac 01       	movw	r20, r24
    3ea6:	b8 01       	movw	r22, r16
    3ea8:	80 ea       	ldi	r24, 0xA0	; 160
	yield_ms(500);
    3eaa:	9b e0       	ldi	r25, 0x0B	; 11
    3eac:	d8 da       	rcall	.-2640   	; 0x345e <usart_serial_write_packet>
    3eae:	84 ef       	ldi	r24, 0xF4	; 244
    3eb0:	91 e0       	ldi	r25, 0x01	; 1
#endif

	/* Inform about baud rate match - LCD */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_OK);
    3eb2:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
    3eb6:	81 e3       	ldi	r24, 0x31	; 49
    3eb8:	94 e0       	ldi	r25, 0x04	; 4
    3eba:	9f 93       	push	r25
    3ebc:	8f 93       	push	r24
    3ebe:	1f 92       	push	r1
    3ec0:	ff 92       	push	r15
    3ec2:	1f 93       	push	r17
    3ec4:	0f 93       	push	r16
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3ec6:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    3eca:	bb 0c       	add	r11, r11
    3ecc:	6b 2d       	mov	r22, r11
    3ece:	66 0f       	add	r22, r22
    3ed0:	66 0f       	add	r22, r22
    3ed2:	6b 0d       	add	r22, r11
    3ed4:	a8 01       	movw	r20, r16

	/* Inform about baud rate match - USB */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_SYNCED);
    3ed6:	88 e0       	ldi	r24, 0x08	; 8
    3ed8:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    3edc:	8c e7       	ldi	r24, 0x7C	; 124
    3ede:	94 e0       	ldi	r25, 0x04	; 4
    3ee0:	9f 93       	push	r25
    3ee2:	8f 93       	push	r24
    3ee4:	1f 92       	push	r1
    3ee6:	ff 92       	push	r15
    3ee8:	1f 93       	push	r17
	udi_write_tx_buf(g_prepare_buf, len, false);
    3eea:	0f 93       	push	r16
    3eec:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    3ef0:	40 e0       	ldi	r20, 0x00	; 0
    3ef2:	68 2f       	mov	r22, r24
}
    3ef4:	c8 01       	movw	r24, r16
    3ef6:	70 d0       	rcall	.+224    	; 0x3fd8 <udi_write_tx_buf>
    3ef8:	cd bf       	out	0x3d, r28	; 61
    3efa:	de bf       	out	0x3e, r29	; 62
    3efc:	27 96       	adiw	r28, 0x07	; 7
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	df 91       	pop	r29
    3f04:	cf 91       	pop	r28
    3f06:	1f 91       	pop	r17
    3f08:	0f 91       	pop	r16
    3f0a:	ff 90       	pop	r15
    3f0c:	ef 90       	pop	r14
    3f0e:	df 90       	pop	r13
    3f10:	cf 90       	pop	r12
    3f12:	bf 90       	pop	r11
    3f14:	af 90       	pop	r10
    3f16:	9f 90       	pop	r9
    3f18:	8f 90       	pop	r8
    3f1a:	7f 90       	pop	r7
    3f1c:	6f 90       	pop	r6
    3f1e:	5f 90       	pop	r5
    3f20:	4f 90       	pop	r4
    3f22:	3f 90       	pop	r3
    3f24:	2f 90       	pop	r2
    3f26:	08 95       	ret

00003f28 <task_serial>:


void task_serial(uint32_t now)
{
    3f28:	1f 93       	push	r17
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	1f 92       	push	r1
    3f30:	cd b7       	in	r28, 0x3d	; 61
    3f32:	de b7       	in	r29, 0x3e	; 62
	uint16_t len = 0;
	uint16_t move = 0;

	/* Leave when nothing to do */
	if (!g_usart1_rx_ready) {
    3f34:	80 91 67 28 	lds	r24, 0x2867	; 0x802867 <g_usart1_rx_ready>
    3f38:	88 23       	and	r24, r24
    3f3a:	09 f4       	brne	.+2      	; 0x3f3e <task_serial+0x16>
    3f3c:	48 c0       	rjmp	.+144    	; 0x3fce <task_serial+0xa6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3f3e:	8f b7       	in	r24, 0x3f	; 63
    3f40:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3f42:	f8 94       	cli
	return flags;
    3f44:	19 81       	ldd	r17, Y+1	; 0x01
	}

	/* Take out own copy and reset */
	{
		irqflags_t flags = cpu_irq_save();
		if (g_usart1_rx_idx) {
    3f46:	60 91 65 28 	lds	r22, 0x2865	; 0x802865 <g_usart1_rx_idx>
    3f4a:	70 91 66 28 	lds	r23, 0x2866	; 0x802866 <g_usart1_rx_idx+0x1>
    3f4e:	61 15       	cp	r22, r1
    3f50:	71 05       	cpc	r23, r1
    3f52:	a9 f1       	breq	.+106    	; 0x3fbe <task_serial+0x96>
			/* Do a chunk each time */
			len = g_usart1_rx_idx;
			if (len > C_USART1_RX_BUF_CHUNK) {
    3f54:	61 34       	cpi	r22, 0x41	; 65
    3f56:	71 05       	cpc	r23, r1
    3f58:	40 f0       	brcs	.+16     	; 0x3f6a <task_serial+0x42>
				move = len - C_USART1_RX_BUF_CHUNK;
    3f5a:	ab 01       	movw	r20, r22
    3f5c:	40 54       	subi	r20, 0x40	; 64
    3f5e:	51 09       	sbc	r21, r1
				len = C_USART1_RX_BUF_CHUNK;
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
    3f60:	8f e3       	ldi	r24, 0x3F	; 63
    3f62:	90 e0       	ldi	r25, 0x00	; 0
		if (g_usart1_rx_idx) {
			/* Do a chunk each time */
			len = g_usart1_rx_idx;
			if (len > C_USART1_RX_BUF_CHUNK) {
				move = len - C_USART1_RX_BUF_CHUNK;
				len = C_USART1_RX_BUF_CHUNK;
    3f64:	60 e4       	ldi	r22, 0x40	; 64
    3f66:	70 e0       	ldi	r23, 0x00	; 0
    3f68:	05 c0       	rjmp	.+10     	; 0x3f74 <task_serial+0x4c>
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	01 97       	sbiw	r24, 0x01	; 1
    3f6e:	0a f1       	brmi	.+66     	; 0x3fb2 <task_serial+0x8a>


void task_serial(uint32_t now)
{
	uint16_t len = 0;
	uint16_t move = 0;
    3f70:	40 e0       	ldi	r20, 0x00	; 0
    3f72:	50 e0       	ldi	r21, 0x00	; 0
    3f74:	fc 01       	movw	r30, r24
    3f76:	31 96       	adiw	r30, 0x01	; 1
    3f78:	df 01       	movw	r26, r30
    3f7a:	ab 59       	subi	r26, 0x9B	; 155
    3f7c:	b8 4d       	sbci	r27, 0xD8	; 216
    3f7e:	e1 5c       	subi	r30, 0xC1	; 193
    3f80:	fa 4d       	sbci	r31, 0xDA	; 218
				len = C_USART1_RX_BUF_CHUNK;
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
    3f82:	2e 91       	ld	r18, -X
    3f84:	22 93       	st	-Z, r18
				move = len - C_USART1_RX_BUF_CHUNK;
				len = C_USART1_RX_BUF_CHUNK;
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
    3f86:	01 97       	sbiw	r24, 0x01	; 1
    3f88:	e2 f7       	brpl	.-8      	; 0x3f82 <task_serial+0x5a>
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
			}

			/* If more data is available move that part down */
			if (move) {
    3f8a:	41 15       	cp	r20, r1
    3f8c:	51 05       	cpc	r21, r1
    3f8e:	89 f0       	breq	.+34     	; 0x3fb2 <task_serial+0x8a>
    3f90:	e5 ea       	ldi	r30, 0xA5	; 165
    3f92:	f7 e2       	ldi	r31, 0x27	; 39
    3f94:	a5 e6       	ldi	r26, 0x65	; 101
    3f96:	b7 e2       	ldi	r27, 0x27	; 39
    3f98:	9a 01       	movw	r18, r20
    3f9a:	2b 55       	subi	r18, 0x5B	; 91
    3f9c:	38 4d       	sbci	r19, 0xD8	; 216
				for (int16_t mov_idx = 0; mov_idx < move; ++mov_idx) {
					g_usart1_rx_buf[mov_idx] = g_usart1_rx_buf[mov_idx + C_USART1_RX_BUF_CHUNK];
    3f9e:	81 91       	ld	r24, Z+
    3fa0:	8d 93       	st	X+, r24
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
			}

			/* If more data is available move that part down */
			if (move) {
				for (int16_t mov_idx = 0; mov_idx < move; ++mov_idx) {
    3fa2:	2e 17       	cp	r18, r30
    3fa4:	3f 07       	cpc	r19, r31
    3fa6:	d9 f7       	brne	.-10     	; 0x3f9e <task_serial+0x76>
					g_usart1_rx_buf[mov_idx] = g_usart1_rx_buf[mov_idx + C_USART1_RX_BUF_CHUNK];
				}
				g_usart1_rx_idx = move;
    3fa8:	40 93 65 28 	sts	0x2865, r20	; 0x802865 <g_usart1_rx_idx>
    3fac:	50 93 66 28 	sts	0x2866, r21	; 0x802866 <g_usart1_rx_idx+0x1>
    3fb0:	06 c0       	rjmp	.+12     	; 0x3fbe <task_serial+0x96>

			} else {
				/* Buffer empty */
				g_usart1_rx_idx = 0;
    3fb2:	10 92 65 28 	sts	0x2865, r1	; 0x802865 <g_usart1_rx_idx>
    3fb6:	10 92 66 28 	sts	0x2866, r1	; 0x802866 <g_usart1_rx_idx+0x1>
				g_usart1_rx_ready = false;
    3fba:	10 92 67 28 	sts	0x2867, r1	; 0x802867 <g_usart1_rx_ready>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3fbe:	1f bf       	out	0x3f, r17	; 63
		}
		cpu_irq_restore(flags);
	}

	/* Copy chunk of data to USB_CDC */
	if (len) {
    3fc0:	61 15       	cp	r22, r1
    3fc2:	71 05       	cpc	r23, r1
    3fc4:	21 f0       	breq	.+8      	; 0x3fce <task_serial+0xa6>
		udi_write_tx_buf(g_prepare_buf, (uint8_t)len, false);
    3fc6:	40 e0       	ldi	r20, 0x00	; 0
    3fc8:	8f e3       	ldi	r24, 0x3F	; 63
    3fca:	95 e2       	ldi	r25, 0x25	; 37
    3fcc:	05 d0       	rcall	.+10     	; 0x3fd8 <udi_write_tx_buf>
	}
}
    3fce:	0f 90       	pop	r0
    3fd0:	df 91       	pop	r29
    3fd2:	cf 91       	pop	r28
    3fd4:	1f 91       	pop	r17
    3fd6:	08 95       	ret

00003fd8 <udi_write_tx_buf>:
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    3fd8:	ef 92       	push	r14
    3fda:	ff 92       	push	r15
    3fdc:	0f 93       	push	r16
    3fde:	1f 93       	push	r17
    3fe0:	cf 93       	push	r28
    3fe2:	df 93       	push	r29
    3fe4:	20 91 71 28 	lds	r18, 0x2871	; 0x802871 <g_usb_cdc_transfers_authorized>
    3fe8:	21 11       	cpse	r18, r1
    3fea:	3a c0       	rjmp	.+116    	; 0x4060 <udi_write_tx_buf+0x88>
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	3f c0       	rjmp	.+126    	; 0x406e <udi_write_tx_buf+0x96>
    3ff0:	04 2f       	mov	r16, r20
    3ff2:	16 2f       	mov	r17, r22
    3ff4:	7c 01       	movw	r14, r24
    3ff6:	d0 e0       	ldi	r29, 0x00	; 0
    3ff8:	c0 e0       	ldi	r28, 0x00	; 0
    3ffa:	0e 94 f7 6f 	call	0xdfee	; 0xdfee <udi_cdc_is_tx_ready>
    3ffe:	81 11       	cpse	r24, r1
    4000:	06 c0       	rjmp	.+12     	; 0x400e <udi_write_tx_buf+0x36>
    4002:	df 5f       	subi	r29, 0xFF	; 255
    4004:	89 e1       	ldi	r24, 0x19	; 25
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
    400c:	23 c0       	rjmp	.+70     	; 0x4054 <udi_write_tx_buf+0x7c>
    400e:	f7 01       	movw	r30, r14
    4010:	ec 0f       	add	r30, r28
    4012:	f1 1d       	adc	r31, r1
    4014:	80 81       	ld	r24, Z
    4016:	00 23       	and	r16, r16
    4018:	49 f0       	breq	.+18     	; 0x402c <udi_write_tx_buf+0x54>
    401a:	28 2f       	mov	r18, r24
    401c:	08 2e       	mov	r0, r24
    401e:	00 0c       	add	r0, r0
    4020:	33 0b       	sbc	r19, r19
    4022:	20 52       	subi	r18, 0x20	; 32
    4024:	31 09       	sbc	r19, r1
    4026:	20 36       	cpi	r18, 0x60	; 96
    4028:	31 05       	cpc	r19, r1
    402a:	88 f4       	brcc	.+34     	; 0x404e <udi_write_tx_buf+0x76>
    402c:	90 91 70 28 	lds	r25, 0x2870	; 0x802870 <g_usb_cdc_access_blocked>
    4030:	91 11       	cpse	r25, r1
    4032:	0d c0       	rjmp	.+26     	; 0x404e <udi_write_tx_buf+0x76>
    4034:	08 2e       	mov	r0, r24
    4036:	00 0c       	add	r0, r0
    4038:	99 0b       	sbc	r25, r25
    403a:	0e 94 4e 70 	call	0xe09c	; 0xe09c <udi_cdc_putc>
    403e:	89 2b       	or	r24, r25
    4040:	31 f4       	brne	.+12     	; 0x404e <udi_write_tx_buf+0x76>
    4042:	df 5f       	subi	r29, 0xFF	; 255
    4044:	89 e1       	ldi	r24, 0x19	; 25
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
    404c:	03 c0       	rjmp	.+6      	; 0x4054 <udi_write_tx_buf+0x7c>
    404e:	cf 5f       	subi	r28, 0xFF	; 255
    4050:	d0 e0       	ldi	r29, 0x00	; 0
    4052:	0a c0       	rjmp	.+20     	; 0x4068 <udi_write_tx_buf+0x90>
    4054:	d9 3c       	cpi	r29, 0xC9	; 201
    4056:	40 f0       	brcs	.+16     	; 0x4068 <udi_write_tx_buf+0x90>
    4058:	10 92 71 28 	sts	0x2871, r1	; 0x802871 <g_usb_cdc_transfers_authorized>
    405c:	8c 2f       	mov	r24, r28
    405e:	07 c0       	rjmp	.+14     	; 0x406e <udi_write_tx_buf+0x96>
    4060:	61 11       	cpse	r22, r1
    4062:	c6 cf       	rjmp	.-116    	; 0x3ff0 <udi_write_tx_buf+0x18>
    4064:	80 e0       	ldi	r24, 0x00	; 0
    4066:	03 c0       	rjmp	.+6      	; 0x406e <udi_write_tx_buf+0x96>
    4068:	c1 17       	cp	r28, r17
    406a:	38 f2       	brcs	.-114    	; 0x3ffa <udi_write_tx_buf+0x22>
    406c:	8c 2f       	mov	r24, r28
    406e:	df 91       	pop	r29
    4070:	cf 91       	pop	r28
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	ff 90       	pop	r15
    4078:	ef 90       	pop	r14
    407a:	08 95       	ret

0000407c <usb_init>:
    407c:	0e 94 97 74 	call	0xe92e	; 0xe92e <stdio_usb_init>
    4080:	80 91 74 28 	lds	r24, 0x2874	; 0x802874 <g_usb_cdc_stdout_enabled>
    4084:	81 11       	cpse	r24, r1
    4086:	0e 94 90 74 	call	0xe920	; 0xe920 <stdio_usb_enable>
    408a:	88 ee       	ldi	r24, 0xE8	; 232
    408c:	93 e0       	ldi	r25, 0x03	; 3
    408e:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
    4092:	85 e3       	ldi	r24, 0x35	; 53
    4094:	97 e0       	ldi	r25, 0x07	; 7
    4096:	9f 93       	push	r25
    4098:	8f 93       	push	r24
    409a:	1f 92       	push	r1
    409c:	80 e4       	ldi	r24, 0x40	; 64
    409e:	8f 93       	push	r24
    40a0:	8f e3       	ldi	r24, 0x3F	; 63
    40a2:	95 e2       	ldi	r25, 0x25	; 37
    40a4:	9f 93       	push	r25
    40a6:	8f 93       	push	r24
    40a8:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    40ac:	81 34       	cpi	r24, 0x41	; 65
    40ae:	91 05       	cpc	r25, r1
    40b0:	10 f0       	brcs	.+4      	; 0x40b6 <usb_init+0x3a>
    40b2:	80 e4       	ldi	r24, 0x40	; 64
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	40 e0       	ldi	r20, 0x00	; 0
    40b8:	68 2f       	mov	r22, r24
    40ba:	8f e3       	ldi	r24, 0x3F	; 63
    40bc:	95 e2       	ldi	r25, 0x25	; 37
    40be:	8c df       	rcall	.-232    	; 0x3fd8 <udi_write_tx_buf>
    40c0:	84 ef       	ldi	r24, 0xF4	; 244
    40c2:	91 e0       	ldi	r25, 0x01	; 1
    40c4:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
    40c8:	1f 92       	push	r1
    40ca:	8c e0       	ldi	r24, 0x0C	; 12
    40cc:	8f 93       	push	r24
    40ce:	8f e0       	ldi	r24, 0x0F	; 15
    40d0:	97 e0       	ldi	r25, 0x07	; 7
    40d2:	9f 93       	push	r25
    40d4:	8f 93       	push	r24
    40d6:	1f 92       	push	r1
    40d8:	80 e4       	ldi	r24, 0x40	; 64
    40da:	8f 93       	push	r24
    40dc:	8f e3       	ldi	r24, 0x3F	; 63
    40de:	95 e2       	ldi	r25, 0x25	; 37
    40e0:	9f 93       	push	r25
    40e2:	8f 93       	push	r24
    40e4:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    40e8:	81 34       	cpi	r24, 0x41	; 65
    40ea:	91 05       	cpc	r25, r1
    40ec:	10 f0       	brcs	.+4      	; 0x40f2 <usb_init+0x76>
    40ee:	80 e4       	ldi	r24, 0x40	; 64
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	40 e0       	ldi	r20, 0x00	; 0
    40f4:	68 2f       	mov	r22, r24
    40f6:	8f e3       	ldi	r24, 0x3F	; 63
    40f8:	95 e2       	ldi	r25, 0x25	; 37
    40fa:	6e df       	rcall	.-292    	; 0x3fd8 <udi_write_tx_buf>
    40fc:	8a ef       	ldi	r24, 0xFA	; 250
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
    4104:	8d ee       	ldi	r24, 0xED	; 237
    4106:	96 e0       	ldi	r25, 0x06	; 6
    4108:	9f 93       	push	r25
    410a:	8f 93       	push	r24
    410c:	1f 92       	push	r1
    410e:	80 e4       	ldi	r24, 0x40	; 64
    4110:	8f 93       	push	r24
    4112:	8f e3       	ldi	r24, 0x3F	; 63
    4114:	95 e2       	ldi	r25, 0x25	; 37
    4116:	9f 93       	push	r25
    4118:	8f 93       	push	r24
    411a:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    411e:	81 34       	cpi	r24, 0x41	; 65
    4120:	91 05       	cpc	r25, r1
    4122:	10 f0       	brcs	.+4      	; 0x4128 <usb_init+0xac>
    4124:	80 e4       	ldi	r24, 0x40	; 64
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	40 e0       	ldi	r20, 0x00	; 0
    412a:	68 2f       	mov	r22, r24
    412c:	8f e3       	ldi	r24, 0x3F	; 63
    412e:	95 e2       	ldi	r25, 0x25	; 37
    4130:	53 df       	rcall	.-346    	; 0x3fd8 <udi_write_tx_buf>
    4132:	8a ef       	ldi	r24, 0xFA	; 250
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
    413a:	89 ec       	ldi	r24, 0xC9	; 201
    413c:	96 e0       	ldi	r25, 0x06	; 6
    413e:	9f 93       	push	r25
    4140:	8f 93       	push	r24
    4142:	1f 92       	push	r1
    4144:	80 e4       	ldi	r24, 0x40	; 64
    4146:	8f 93       	push	r24
    4148:	8f e3       	ldi	r24, 0x3F	; 63
    414a:	95 e2       	ldi	r25, 0x25	; 37
    414c:	9f 93       	push	r25
    414e:	8f 93       	push	r24
    4150:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    4154:	81 34       	cpi	r24, 0x41	; 65
    4156:	91 05       	cpc	r25, r1
    4158:	10 f0       	brcs	.+4      	; 0x415e <usb_init+0xe2>
    415a:	80 e4       	ldi	r24, 0x40	; 64
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	40 e0       	ldi	r20, 0x00	; 0
    4160:	68 2f       	mov	r22, r24
    4162:	8f e3       	ldi	r24, 0x3F	; 63
    4164:	95 e2       	ldi	r25, 0x25	; 37
    4166:	38 df       	rcall	.-400    	; 0x3fd8 <udi_write_tx_buf>
    4168:	8d b7       	in	r24, 0x3d	; 61
    416a:	9e b7       	in	r25, 0x3e	; 62
    416c:	4a 96       	adiw	r24, 0x1a	; 26
    416e:	8d bf       	out	0x3d, r24	; 61
    4170:	9e bf       	out	0x3e, r25	; 62
    4172:	08 95       	ret

00004174 <usb_callback_suspend_action>:
    4174:	83 e0       	ldi	r24, 0x03	; 3
    4176:	80 93 6f 28 	sts	0x286F, r24	; 0x80286f <g_workmode>
    417a:	08 95       	ret

0000417c <usb_callback_resume_action>:
    417c:	82 e0       	ldi	r24, 0x02	; 2
    417e:	80 93 6f 28 	sts	0x286F, r24	; 0x80286f <g_workmode>
    4182:	08 95       	ret

00004184 <usb_callback_remotewakeup_enable>:
    4184:	08 95       	ret

00004186 <usb_callback_remotewakeup_disable>:
    4186:	08 95       	ret

00004188 <usb_callback_cdc_enable>:
}

bool usb_callback_cdc_enable(void)
{
	/* USB CDC feature for serial communication */
	g_usb_cdc_transfers_authorized = true;
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	80 93 71 28 	sts	0x2871, r24	; 0x802871 <g_usb_cdc_transfers_authorized>
	return true;
}
    418e:	08 95       	ret

00004190 <usb_callback_cdc_disable>:

void usb_callback_cdc_disable(void)
{
	/* USB CDC feature for serial communication */
	g_usb_cdc_transfers_authorized = false;
    4190:	10 92 71 28 	sts	0x2871, r1	; 0x802871 <g_usb_cdc_transfers_authorized>
    4194:	08 95       	ret

00004196 <usb_callback_config>:
}

void usb_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    4196:	08 95       	ret

00004198 <usb_callback_cdc_set_dtr>:

}

void usb_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
    4198:	08 95       	ret

0000419a <usb_callback_cdc_set_rts>:

}

void usb_callback_cdc_set_rts(uint8_t port, bool b_enable)
{
    419a:	08 95       	ret

0000419c <usb_callback_rx_notify>:

}

void usb_callback_rx_notify(uint8_t port)
{
	g_usb_cdc_rx_received = true;
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	80 93 72 28 	sts	0x2872, r24	; 0x802872 <g_usb_cdc_rx_received>
    41a2:	08 95       	ret

000041a4 <usb_callback_tx_empty_notify>:
}

void usb_callback_tx_empty_notify(uint8_t port)
{
	g_usb_cdc_access_blocked = false;
    41a4:	10 92 70 28 	sts	0x2870, r1	; 0x802870 <g_usb_cdc_access_blocked>
    41a8:	08 95       	ret

000041aa <task_usb>:
PROGMEM_DECLARE(const char, PM_INFO_PART_L2P3B[]);
PROGMEM_DECLARE(const char, PM_INFO_PART_L2P4[]);
PROGMEM_DECLARE(const char, PM_INFO_PART_PLL1[]);

void task_usb(uint32_t now)
{
    41aa:	2f 92       	push	r2
    41ac:	3f 92       	push	r3
    41ae:	4f 92       	push	r4
    41b0:	5f 92       	push	r5
    41b2:	6f 92       	push	r6
    41b4:	7f 92       	push	r7
    41b6:	8f 92       	push	r8
    41b8:	9f 92       	push	r9
    41ba:	af 92       	push	r10
    41bc:	bf 92       	push	r11
    41be:	cf 92       	push	r12
    41c0:	df 92       	push	r13
    41c2:	ef 92       	push	r14
    41c4:	ff 92       	push	r15
    41c6:	0f 93       	push	r16
    41c8:	1f 93       	push	r17
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	cd b7       	in	r28, 0x3d	; 61
    41d0:	de b7       	in	r29, 0x3e	; 62
    41d2:	c3 54       	subi	r28, 0x43	; 67
    41d4:	d1 09       	sbc	r29, r1
    41d6:	cd bf       	out	0x3d, r28	; 61
    41d8:	de bf       	out	0x3e, r29	; 62
	/* Monitoring at the USB serial terminal */
	if (g_usb_cdc_transfers_authorized) {
    41da:	20 91 71 28 	lds	r18, 0x2871	; 0x802871 <g_usb_cdc_transfers_authorized>
    41de:	22 23       	and	r18, r18
    41e0:	09 f4       	brne	.+2      	; 0x41e4 <task_usb+0x3a>
    41e2:	19 c4       	rjmp	.+2098   	; 0x4a16 <task_usb+0x86c>
    41e4:	2b 01       	movw	r4, r22
    41e6:	3c 01       	movw	r6, r24
		static uint32_t usb_last = 0UL;

		/* Get command lines from the USB host */
		if (g_usb_cdc_rx_received) {
    41e8:	80 91 72 28 	lds	r24, 0x2872	; 0x802872 <g_usb_cdc_rx_received>
    41ec:	88 23       	and	r24, r24
    41ee:	d1 f1       	breq	.+116    	; 0x4264 <task_usb+0xba>
			g_usb_cdc_rx_received = false;
    41f0:	10 92 72 28 	sts	0x2872, r1	; 0x802872 <g_usb_cdc_rx_received>
	if (!g_usb_cdc_transfers_authorized) {
		return;
	}

	/* Single thread only */
	if (!sched_getLock(&g_interpreter_lock)) {
    41f4:	82 e8       	ldi	r24, 0x82	; 130
    41f6:	96 e2       	ldi	r25, 0x26	; 38
    41f8:	0e 94 67 65 	call	0xcace	; 0xcace <sched_getLock>
    41fc:	88 23       	and	r24, r24
    41fe:	91 f1       	breq	.+100    	; 0x4264 <task_usb+0xba>
		return;
	}

	/* Get command lines from the USB host */
	iram_size_t cdc_rx_len = udi_cdc_get_nb_received_data();
    4200:	0e 94 49 6e 	call	0xdc92	; 0xdc92 <udi_cdc_get_nb_received_data>
    4204:	8c 01       	movw	r16, r24
	cdc_rx_len = min(cdc_rx_len, sizeof(cdc_rx_buf));
    4206:	05 97       	sbiw	r24, 0x05	; 5
    4208:	10 f0       	brcs	.+4      	; 0x420e <task_usb+0x64>
    420a:	04 e0       	ldi	r16, 0x04	; 4
    420c:	10 e0       	ldi	r17, 0x00	; 0
	while (cdc_rx_len) {
    420e:	01 15       	cp	r16, r1
    4210:	11 05       	cpc	r17, r1
    4212:	21 f1       	breq	.+72     	; 0x425c <task_usb+0xb2>
		if (g_keyBeep_enable) {
    4214:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <g_keyBeep_enable>
    4218:	88 23       	and	r24, r24
    421a:	41 f0       	breq	.+16     	; 0x422c <task_usb+0x82>
			twi2_set_beep(176, 1);  // Click sound
    421c:	61 e0       	ldi	r22, 0x01	; 1
    421e:	80 eb       	ldi	r24, 0xB0	; 176
    4220:	0e 94 41 33 	call	0x6682	; 0x6682 <twi2_set_beep>
			yield_ms(10);
    4224:	8a e0       	ldi	r24, 0x0A	; 10
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
		}

		/* Read the data block */
		udi_cdc_read_no_polling(cdc_rx_buf, cdc_rx_len);
    422c:	b8 01       	movw	r22, r16
    422e:	ce 01       	movw	r24, r28
    4230:	01 96       	adiw	r24, 0x01	; 1
    4232:	0e 94 5e 6f 	call	0xdebc	; 0xdebc <udi_cdc_read_no_polling>

		/* Echo back when not monitoring information are enabled */
		if (!g_usb_cdc_printStatusLines) {
    4236:	80 91 73 28 	lds	r24, 0x2873	; 0x802873 <g_usb_cdc_printStatusLines>
    423a:	81 11       	cpse	r24, r1
    423c:	05 c0       	rjmp	.+10     	; 0x4248 <task_usb+0x9e>
			udi_write_tx_buf(cdc_rx_buf, cdc_rx_len, true);
    423e:	41 e0       	ldi	r20, 0x01	; 1
    4240:	60 2f       	mov	r22, r16
    4242:	ce 01       	movw	r24, r28
    4244:	01 96       	adiw	r24, 0x01	; 1
    4246:	c8 de       	rcall	.-624    	; 0x3fd8 <udi_write_tx_buf>
		}

		/* Call the interpreter */
		interpreter_doProcess(cdc_rx_buf, cdc_rx_len);
    4248:	b8 01       	movw	r22, r16
    424a:	ce 01       	movw	r24, r28
    424c:	01 96       	adiw	r24, 0x01	; 1
    424e:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <interpreter_doProcess>

		/* Check for more available data */
		cdc_rx_len = udi_cdc_get_nb_received_data();
    4252:	0e 94 49 6e 	call	0xdc92	; 0xdc92 <udi_cdc_get_nb_received_data>
    4256:	8c 01       	movw	r16, r24
	}

	/* Get command lines from the USB host */
	iram_size_t cdc_rx_len = udi_cdc_get_nb_received_data();
	cdc_rx_len = min(cdc_rx_len, sizeof(cdc_rx_buf));
	while (cdc_rx_len) {
    4258:	89 2b       	or	r24, r25
    425a:	e1 f6       	brne	.-72     	; 0x4214 <task_usb+0x6a>
		/* Check for more available data */
		cdc_rx_len = udi_cdc_get_nb_received_data();
	}

	/* Release this lock */
	sched_freeLock(&g_interpreter_lock);
    425c:	82 e8       	ldi	r24, 0x82	; 130
    425e:	96 e2       	ldi	r25, 0x26	; 38
    4260:	0e 94 7f 65 	call	0xcafe	; 0xcafe <sched_freeLock>
			g_usb_cdc_rx_received = false;
			usb_rx_process(now);
		}

		/* Status of the PLL unit */
		if (g_1pps_last_new) {
    4264:	80 91 75 28 	lds	r24, 0x2875	; 0x802875 <g_1pps_last_new>
    4268:	88 23       	and	r24, r24
    426a:	09 f4       	brne	.+2      	; 0x426e <task_usb+0xc4>
    426c:	62 c0       	rjmp	.+196    	; 0x4332 <task_usb+0x188>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    426e:	8f b7       	in	r24, 0x3f	; 63
    4270:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    4272:	f8 94       	cli
	return flags;
    4274:	2d 81       	ldd	r18, Y+5	; 0x05
			uint16_t l_pll_lo;
			uint64_t l_pll_hi;
			{
				irqflags_t flags = cpu_irq_save();
				l_pll_lo = g_1pps_last_lo;
    4276:	80 91 7e 28 	lds	r24, 0x287E	; 0x80287e <g_1pps_last_lo>
    427a:	90 91 7f 28 	lds	r25, 0x287F	; 0x80287f <g_1pps_last_lo+0x1>
				l_pll_hi = g_1pps_last_hi;
    427e:	20 90 76 28 	lds	r2, 0x2876	; 0x802876 <g_1pps_last_hi>
    4282:	30 90 77 28 	lds	r3, 0x2877	; 0x802877 <g_1pps_last_hi+0x1>
    4286:	c0 90 78 28 	lds	r12, 0x2878	; 0x802878 <g_1pps_last_hi+0x2>
    428a:	ce 82       	std	Y+6, r12	; 0x06
    428c:	d0 90 79 28 	lds	r13, 0x2879	; 0x802879 <g_1pps_last_hi+0x3>
    4290:	d8 86       	std	Y+8, r13	; 0x08
    4292:	e0 90 7a 28 	lds	r14, 0x287A	; 0x80287a <g_1pps_last_hi+0x4>
    4296:	ec 86       	std	Y+12, r14	; 0x0c
    4298:	f0 90 7b 28 	lds	r15, 0x287B	; 0x80287b <g_1pps_last_hi+0x5>
    429c:	fe 86       	std	Y+14, r15	; 0x0e
    429e:	80 90 7c 28 	lds	r8, 0x287C	; 0x80287c <g_1pps_last_hi+0x6>
    42a2:	90 90 7d 28 	lds	r9, 0x287D	; 0x80287d <g_1pps_last_hi+0x7>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    42a6:	2f bf       	out	0x3f, r18	; 63
				cpu_irq_restore(flags);
			}

			int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_PLL1, (uint32_t)(l_pll_hi / 1000U), (uint32_t) (l_pll_hi % 1000), l_pll_lo);
    42a8:	9f 93       	push	r25
    42aa:	8f 93       	push	r24
    42ac:	0f 2e       	mov	r0, r31
    42ae:	f8 ee       	ldi	r31, 0xE8	; 232
    42b0:	af 2e       	mov	r10, r31
    42b2:	f0 2d       	mov	r31, r0
    42b4:	0f 2e       	mov	r0, r31
    42b6:	f3 e0       	ldi	r31, 0x03	; 3
    42b8:	bf 2e       	mov	r11, r31
    42ba:	f0 2d       	mov	r31, r0
    42bc:	c1 2c       	mov	r12, r1
    42be:	d1 2c       	mov	r13, r1
    42c0:	e1 2c       	mov	r14, r1
    42c2:	f1 2c       	mov	r15, r1
    42c4:	00 e0       	ldi	r16, 0x00	; 0
    42c6:	10 e0       	ldi	r17, 0x00	; 0
    42c8:	22 2d       	mov	r18, r2
    42ca:	33 2d       	mov	r19, r3
    42cc:	4e 81       	ldd	r20, Y+6	; 0x06
    42ce:	58 85       	ldd	r21, Y+8	; 0x08
    42d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    42d2:	7e 85       	ldd	r23, Y+14	; 0x0e
    42d4:	88 2d       	mov	r24, r8
    42d6:	99 2d       	mov	r25, r9
    42d8:	0e 94 61 7d 	call	0xfac2	; 0xfac2 <__umoddi3>
    42dc:	5f 93       	push	r21
    42de:	4f 93       	push	r20
    42e0:	3f 93       	push	r19
    42e2:	2f 93       	push	r18
    42e4:	22 2d       	mov	r18, r2
    42e6:	33 2d       	mov	r19, r3
    42e8:	4e 81       	ldd	r20, Y+6	; 0x06
    42ea:	58 85       	ldd	r21, Y+8	; 0x08
    42ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    42ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    42f0:	88 2d       	mov	r24, r8
    42f2:	99 2d       	mov	r25, r9
    42f4:	0e 94 63 7d 	call	0xfac6	; 0xfac6 <__udivdi3>
    42f8:	5f 93       	push	r21
    42fa:	4f 93       	push	r20
    42fc:	3f 93       	push	r19
    42fe:	2f 93       	push	r18
    4300:	81 ef       	ldi	r24, 0xF1	; 241
    4302:	94 e0       	ldi	r25, 0x04	; 4
    4304:	9f 93       	push	r25
    4306:	8f 93       	push	r24
    4308:	1f 92       	push	r1
    430a:	80 e4       	ldi	r24, 0x40	; 64
    430c:	8f 93       	push	r24
    430e:	8f e3       	ldi	r24, 0x3F	; 63
    4310:	95 e2       	ldi	r25, 0x25	; 37
    4312:	9f 93       	push	r25
    4314:	8f 93       	push	r24
    4316:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
			udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    431a:	81 34       	cpi	r24, 0x41	; 65
    431c:	91 05       	cpc	r25, r1
    431e:	10 f0       	brcs	.+4      	; 0x4324 <task_usb+0x17a>
    4320:	80 e4       	ldi	r24, 0x40	; 64
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	40 e0       	ldi	r20, 0x00	; 0
    4326:	68 2f       	mov	r22, r24
    4328:	8f e3       	ldi	r24, 0x3F	; 63
    432a:	95 e2       	ldi	r25, 0x25	; 37
    432c:	55 de       	rcall	.-854    	; 0x3fd8 <udi_write_tx_buf>
    432e:	cd bf       	out	0x3d, r28	; 61
    4330:	de bf       	out	0x3e, r29	; 62
		}

		/* Status output when requested */
		if (g_usb_cdc_printStatusLines) {
    4332:	80 91 73 28 	lds	r24, 0x2873	; 0x802873 <g_usb_cdc_printStatusLines>
    4336:	88 23       	and	r24, r24
    4338:	09 f4       	brne	.+2      	; 0x433c <task_usb+0x192>
    433a:	6d c3       	rjmp	.+1754   	; 0x4a16 <task_usb+0x86c>
			if (((now - usb_last) >= 512) || (now < usb_last)) {
    433c:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <__data_end>
    4340:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <__data_end+0x1>
    4344:	a0 91 d2 21 	lds	r26, 0x21D2	; 0x8021d2 <__data_end+0x2>
    4348:	b0 91 d3 21 	lds	r27, 0x21D3	; 0x8021d3 <__data_end+0x3>
    434c:	b3 01       	movw	r22, r6
    434e:	a2 01       	movw	r20, r4
    4350:	48 1b       	sub	r20, r24
    4352:	59 0b       	sbc	r21, r25
    4354:	6a 0b       	sbc	r22, r26
    4356:	7b 0b       	sbc	r23, r27
    4358:	41 15       	cp	r20, r1
    435a:	52 40       	sbci	r21, 0x02	; 2
    435c:	61 05       	cpc	r22, r1
    435e:	71 05       	cpc	r23, r1
    4360:	30 f4       	brcc	.+12     	; 0x436e <task_usb+0x1c4>
    4362:	48 16       	cp	r4, r24
    4364:	59 06       	cpc	r5, r25
    4366:	6a 06       	cpc	r6, r26
    4368:	7b 06       	cpc	r7, r27
    436a:	08 f0       	brcs	.+2      	; 0x436e <task_usb+0x1c4>
    436c:	54 c3       	rjmp	.+1704   	; 0x4a16 <task_usb+0x86c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    436e:	8f b7       	in	r24, 0x3f	; 63
    4370:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4372:	f8 94       	cli
	return flags;
    4374:	69 81       	ldd	r22, Y+1	; 0x01
				int32_t	l_twi1_gyro_2_mag_z_nT;

				/* Getting a copy of the values */
				{
					irqflags_t flags			= cpu_irq_save();
					l_adc_vctcxo_volt_1000		= g_adc_vctcxo_volt_1000;
    4376:	70 91 90 26 	lds	r23, 0x2690	; 0x802690 <g_adc_vctcxo_volt_1000>
    437a:	23 96       	adiw	r28, 0x03	; 3
    437c:	7f af       	std	Y+63, r23	; 0x3f
    437e:	23 97       	sbiw	r28, 0x03	; 3
    4380:	80 91 91 26 	lds	r24, 0x2691	; 0x802691 <g_adc_vctcxo_volt_1000+0x1>
    4384:	24 96       	adiw	r28, 0x04	; 4
    4386:	8f af       	std	Y+63, r24	; 0x3f
    4388:	24 97       	sbiw	r28, 0x04	; 4
					l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    438a:	20 91 8e 26 	lds	r18, 0x268E	; 0x80268e <g_adc_5v0_volt_1000>
    438e:	30 91 8f 26 	lds	r19, 0x268F	; 0x80268f <g_adc_5v0_volt_1000+0x1>
					l_adc_vbat_volt_1000		= g_adc_vbat_volt_1000;
    4392:	40 91 8c 26 	lds	r20, 0x268C	; 0x80268c <g_adc_vbat_volt_1000>
    4396:	50 91 8d 26 	lds	r21, 0x268D	; 0x80268d <g_adc_vbat_volt_1000+0x1>
					l_adc_io_adc4_volt_1000		= g_adc_io_adc4_volt_1000;
    439a:	c0 90 8a 26 	lds	r12, 0x268A	; 0x80268a <g_adc_io_adc4_volt_1000>
    439e:	cc a6       	std	Y+44, r12	; 0x2c
    43a0:	d0 90 8b 26 	lds	r13, 0x268B	; 0x80268b <g_adc_io_adc4_volt_1000+0x1>
    43a4:	dd a6       	std	Y+45, r13	; 0x2d
					l_adc_io_adc5_volt_1000		= g_adc_io_adc5_volt_1000;
    43a6:	20 90 88 26 	lds	r2, 0x2688	; 0x802688 <g_adc_io_adc5_volt_1000>
    43aa:	30 90 89 26 	lds	r3, 0x2689	; 0x802689 <g_adc_io_adc5_volt_1000+0x1>
					l_adc_silence_volt_1000		= g_adc_silence_volt_1000;
    43ae:	00 91 86 26 	lds	r16, 0x2686	; 0x802686 <g_adc_silence_volt_1000>
    43b2:	10 91 87 26 	lds	r17, 0x2687	; 0x802687 <g_adc_silence_volt_1000+0x1>
					l_adc_temp_deg_100			= g_adc_temp_deg_100;
    43b6:	e0 90 84 26 	lds	r14, 0x2684	; 0x802684 <g_adc_temp_deg_100>
    43ba:	f0 90 85 26 	lds	r15, 0x2685	; 0x802685 <g_adc_temp_deg_100+0x1>
    43be:	ee 82       	std	Y+6, r14	; 0x06
    43c0:	ff 82       	std	Y+7, r15	; 0x07
					l_twi1_baro_temp_100		= g_twi1_baro_temp_100;
    43c2:	80 90 0a 27 	lds	r8, 0x270A	; 0x80270a <g_twi1_baro_temp_100>
    43c6:	90 90 0b 27 	lds	r9, 0x270B	; 0x80270b <g_twi1_baro_temp_100+0x1>
    43ca:	a0 90 0c 27 	lds	r10, 0x270C	; 0x80270c <g_twi1_baro_temp_100+0x2>
    43ce:	b0 90 0d 27 	lds	r11, 0x270D	; 0x80270d <g_twi1_baro_temp_100+0x3>
					l_twi1_baro_p_100			= g_twi1_baro_p_100;
    43d2:	c0 90 06 27 	lds	r12, 0x2706	; 0x802706 <g_twi1_baro_p_100>
    43d6:	d0 90 07 27 	lds	r13, 0x2707	; 0x802707 <g_twi1_baro_p_100+0x1>
    43da:	e0 90 08 27 	lds	r14, 0x2708	; 0x802708 <g_twi1_baro_p_100+0x2>
    43de:	f0 90 09 27 	lds	r15, 0x2709	; 0x802709 <g_twi1_baro_p_100+0x3>
    43e2:	c8 86       	std	Y+8, r12	; 0x08
    43e4:	d9 86       	std	Y+9, r13	; 0x09
    43e6:	ea 86       	std	Y+10, r14	; 0x0a
    43e8:	fb 86       	std	Y+11, r15	; 0x0b
					l_twi1_hygro_T_100			= g_twi1_hygro_T_100;
    43ea:	e0 90 fe 26 	lds	r14, 0x26FE	; 0x8026fe <g_twi1_hygro_T_100>
    43ee:	f0 90 ff 26 	lds	r15, 0x26FF	; 0x8026ff <g_twi1_hygro_T_100+0x1>
    43f2:	ec 86       	std	Y+12, r14	; 0x0c
    43f4:	fd 86       	std	Y+13, r15	; 0x0d
					l_twi1_hygro_RH_100			= g_twi1_hygro_RH_100;
    43f6:	c0 90 fc 26 	lds	r12, 0x26FC	; 0x8026fc <g_twi1_hygro_RH_100>
    43fa:	d0 90 fd 26 	lds	r13, 0x26FD	; 0x8026fd <g_twi1_hygro_RH_100+0x1>
    43fe:	ce 86       	std	Y+14, r12	; 0x0e
    4400:	df 86       	std	Y+15, r13	; 0x0f
					l_twi1_gyro_1_accel_x		= g_twi1_gyro_1_accel_x;
    4402:	d0 90 5b 27 	lds	r13, 0x275B	; 0x80275b <g_twi1_gyro_1_accel_x>
    4406:	de a6       	std	Y+46, r13	; 0x2e
    4408:	e0 90 5c 27 	lds	r14, 0x275C	; 0x80275c <g_twi1_gyro_1_accel_x+0x1>
    440c:	ef a6       	std	Y+47, r14	; 0x2f
					l_twi1_gyro_1_accel_y		= g_twi1_gyro_1_accel_y;
    440e:	f0 90 59 27 	lds	r15, 0x2759	; 0x802759 <g_twi1_gyro_1_accel_y>
    4412:	f8 aa       	std	Y+48, r15	; 0x30
    4414:	c0 90 5a 27 	lds	r12, 0x275A	; 0x80275a <g_twi1_gyro_1_accel_y+0x1>
    4418:	c9 aa       	std	Y+49, r12	; 0x31
					l_twi1_gyro_1_accel_z		= g_twi1_gyro_1_accel_z;
    441a:	d0 90 57 27 	lds	r13, 0x2757	; 0x802757 <g_twi1_gyro_1_accel_z>
    441e:	da aa       	std	Y+50, r13	; 0x32
    4420:	e0 90 58 27 	lds	r14, 0x2758	; 0x802758 <g_twi1_gyro_1_accel_z+0x1>
    4424:	eb aa       	std	Y+51, r14	; 0x33
					l_twi1_gyro_1_accel_x_mg	= g_twi1_gyro_1_accel_x_mg;
    4426:	c0 90 55 27 	lds	r12, 0x2755	; 0x802755 <g_twi1_gyro_1_accel_x_mg>
    442a:	d0 90 56 27 	lds	r13, 0x2756	; 0x802756 <g_twi1_gyro_1_accel_x_mg+0x1>
    442e:	c8 8a       	std	Y+16, r12	; 0x10
    4430:	d9 8a       	std	Y+17, r13	; 0x11
					l_twi1_gyro_1_accel_y_mg	= g_twi1_gyro_1_accel_y_mg;
    4432:	e0 90 53 27 	lds	r14, 0x2753	; 0x802753 <g_twi1_gyro_1_accel_y_mg>
    4436:	f0 90 54 27 	lds	r15, 0x2754	; 0x802754 <g_twi1_gyro_1_accel_y_mg+0x1>
    443a:	ea 8a       	std	Y+18, r14	; 0x12
    443c:	fb 8a       	std	Y+19, r15	; 0x13
					l_twi1_gyro_1_accel_z_mg	= g_twi1_gyro_1_accel_z_mg;
    443e:	c0 90 51 27 	lds	r12, 0x2751	; 0x802751 <g_twi1_gyro_1_accel_z_mg>
    4442:	d0 90 52 27 	lds	r13, 0x2752	; 0x802752 <g_twi1_gyro_1_accel_z_mg+0x1>
    4446:	cc 8a       	std	Y+20, r12	; 0x14
    4448:	dd 8a       	std	Y+21, r13	; 0x15
					l_twi1_gyro_1_gyro_x		= g_twi1_gyro_1_gyro_x;
    444a:	d0 90 4f 27 	lds	r13, 0x274F	; 0x80274f <g_twi1_gyro_1_gyro_x>
    444e:	dc aa       	std	Y+52, r13	; 0x34
    4450:	e0 90 50 27 	lds	r14, 0x2750	; 0x802750 <g_twi1_gyro_1_gyro_x+0x1>
    4454:	ed aa       	std	Y+53, r14	; 0x35
					l_twi1_gyro_1_gyro_y		= g_twi1_gyro_1_gyro_y;
    4456:	f0 90 4d 27 	lds	r15, 0x274D	; 0x80274d <g_twi1_gyro_1_gyro_y>
    445a:	fe aa       	std	Y+54, r15	; 0x36
    445c:	c0 90 4e 27 	lds	r12, 0x274E	; 0x80274e <g_twi1_gyro_1_gyro_y+0x1>
    4460:	cf aa       	std	Y+55, r12	; 0x37
					l_twi1_gyro_1_gyro_z		= g_twi1_gyro_1_gyro_z;
    4462:	d0 90 4b 27 	lds	r13, 0x274B	; 0x80274b <g_twi1_gyro_1_gyro_z>
    4466:	d8 ae       	std	Y+56, r13	; 0x38
    4468:	e0 90 4c 27 	lds	r14, 0x274C	; 0x80274c <g_twi1_gyro_1_gyro_z+0x1>
    446c:	e9 ae       	std	Y+57, r14	; 0x39
					l_twi1_gyro_1_gyro_x_mdps	= g_twi1_gyro_1_gyro_x_mdps;
    446e:	c0 90 47 27 	lds	r12, 0x2747	; 0x802747 <g_twi1_gyro_1_gyro_x_mdps>
    4472:	d0 90 48 27 	lds	r13, 0x2748	; 0x802748 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    4476:	e0 90 49 27 	lds	r14, 0x2749	; 0x802749 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    447a:	f0 90 4a 27 	lds	r15, 0x274A	; 0x80274a <g_twi1_gyro_1_gyro_x_mdps+0x3>
    447e:	ce 8a       	std	Y+22, r12	; 0x16
    4480:	df 8a       	std	Y+23, r13	; 0x17
    4482:	e8 8e       	std	Y+24, r14	; 0x18
    4484:	f9 8e       	std	Y+25, r15	; 0x19
					l_twi1_gyro_1_gyro_y_mdps	= g_twi1_gyro_1_gyro_y_mdps;
    4486:	c0 90 43 27 	lds	r12, 0x2743	; 0x802743 <g_twi1_gyro_1_gyro_y_mdps>
    448a:	d0 90 44 27 	lds	r13, 0x2744	; 0x802744 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    448e:	e0 90 45 27 	lds	r14, 0x2745	; 0x802745 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    4492:	f0 90 46 27 	lds	r15, 0x2746	; 0x802746 <g_twi1_gyro_1_gyro_y_mdps+0x3>
					l_twi1_gyro_1_gyro_z_mdps	= g_twi1_gyro_1_gyro_z_mdps;
    4496:	80 91 3f 27 	lds	r24, 0x273F	; 0x80273f <g_twi1_gyro_1_gyro_z_mdps>
    449a:	90 91 40 27 	lds	r25, 0x2740	; 0x802740 <g_twi1_gyro_1_gyro_z_mdps+0x1>
    449e:	a0 91 41 27 	lds	r26, 0x2741	; 0x802741 <g_twi1_gyro_1_gyro_z_mdps+0x2>
    44a2:	b0 91 42 27 	lds	r27, 0x2742	; 0x802742 <g_twi1_gyro_1_gyro_z_mdps+0x3>
    44a6:	8a 8f       	std	Y+26, r24	; 0x1a
    44a8:	9b 8f       	std	Y+27, r25	; 0x1b
    44aa:	ac 8f       	std	Y+28, r26	; 0x1c
    44ac:	bd 8f       	std	Y+29, r27	; 0x1d
					l_twi1_gyro_1_temp			= g_twi1_gyro_1_temp;
    44ae:	90 91 61 27 	lds	r25, 0x2761	; 0x802761 <g_twi1_gyro_1_temp>
    44b2:	9a af       	std	Y+58, r25	; 0x3a
    44b4:	a0 91 62 27 	lds	r26, 0x2762	; 0x802762 <g_twi1_gyro_1_temp+0x1>
    44b8:	ab af       	std	Y+59, r26	; 0x3b
					l_twi1_gyro_1_temp_deg_100	= g_twi1_gyro_1_temp_deg_100;
    44ba:	e0 91 5d 27 	lds	r30, 0x275D	; 0x80275d <g_twi1_gyro_1_temp_deg_100>
    44be:	f0 91 5e 27 	lds	r31, 0x275E	; 0x80275e <g_twi1_gyro_1_temp_deg_100+0x1>
    44c2:	ee 8f       	std	Y+30, r30	; 0x1e
    44c4:	ff 8f       	std	Y+31, r31	; 0x1f
					l_twi1_gyro_2_mag_x			= g_twi1_gyro_2_mag_x;
    44c6:	f0 91 39 27 	lds	r31, 0x2739	; 0x802739 <g_twi1_gyro_2_mag_x>
    44ca:	fc af       	std	Y+60, r31	; 0x3c
    44cc:	70 91 3a 27 	lds	r23, 0x273A	; 0x80273a <g_twi1_gyro_2_mag_x+0x1>
    44d0:	7d af       	std	Y+61, r23	; 0x3d
					l_twi1_gyro_2_mag_y			= g_twi1_gyro_2_mag_y;
    44d2:	80 91 37 27 	lds	r24, 0x2737	; 0x802737 <g_twi1_gyro_2_mag_y>
    44d6:	8e af       	std	Y+62, r24	; 0x3e
    44d8:	90 91 38 27 	lds	r25, 0x2738	; 0x802738 <g_twi1_gyro_2_mag_y+0x1>
    44dc:	9f af       	std	Y+63, r25	; 0x3f
					l_twi1_gyro_2_mag_z			= g_twi1_gyro_2_mag_z;
    44de:	a0 91 35 27 	lds	r26, 0x2735	; 0x802735 <g_twi1_gyro_2_mag_z>
    44e2:	21 96       	adiw	r28, 0x01	; 1
    44e4:	af af       	std	Y+63, r26	; 0x3f
    44e6:	21 97       	sbiw	r28, 0x01	; 1
    44e8:	b0 91 36 27 	lds	r27, 0x2736	; 0x802736 <g_twi1_gyro_2_mag_z+0x1>
    44ec:	22 96       	adiw	r28, 0x02	; 2
    44ee:	bf af       	std	Y+63, r27	; 0x3f
    44f0:	22 97       	sbiw	r28, 0x02	; 2
					l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
    44f2:	80 91 31 27 	lds	r24, 0x2731	; 0x802731 <g_twi1_gyro_2_mag_x_nT>
    44f6:	90 91 32 27 	lds	r25, 0x2732	; 0x802732 <g_twi1_gyro_2_mag_x_nT+0x1>
    44fa:	a0 91 33 27 	lds	r26, 0x2733	; 0x802733 <g_twi1_gyro_2_mag_x_nT+0x2>
    44fe:	b0 91 34 27 	lds	r27, 0x2734	; 0x802734 <g_twi1_gyro_2_mag_x_nT+0x3>
    4502:	88 a3       	std	Y+32, r24	; 0x20
    4504:	99 a3       	std	Y+33, r25	; 0x21
    4506:	aa a3       	std	Y+34, r26	; 0x22
    4508:	bb a3       	std	Y+35, r27	; 0x23
					l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
    450a:	80 91 2d 27 	lds	r24, 0x272D	; 0x80272d <g_twi1_gyro_2_mag_y_nT>
    450e:	90 91 2e 27 	lds	r25, 0x272E	; 0x80272e <g_twi1_gyro_2_mag_y_nT+0x1>
    4512:	a0 91 2f 27 	lds	r26, 0x272F	; 0x80272f <g_twi1_gyro_2_mag_y_nT+0x2>
    4516:	b0 91 30 27 	lds	r27, 0x2730	; 0x802730 <g_twi1_gyro_2_mag_y_nT+0x3>
    451a:	8c a3       	std	Y+36, r24	; 0x24
    451c:	9d a3       	std	Y+37, r25	; 0x25
    451e:	ae a3       	std	Y+38, r26	; 0x26
    4520:	bf a3       	std	Y+39, r27	; 0x27
					l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
    4522:	80 91 29 27 	lds	r24, 0x2729	; 0x802729 <g_twi1_gyro_2_mag_z_nT>
    4526:	90 91 2a 27 	lds	r25, 0x272A	; 0x80272a <g_twi1_gyro_2_mag_z_nT+0x1>
    452a:	a0 91 2b 27 	lds	r26, 0x272B	; 0x80272b <g_twi1_gyro_2_mag_z_nT+0x2>
    452e:	b0 91 2c 27 	lds	r27, 0x272C	; 0x80272c <g_twi1_gyro_2_mag_z_nT+0x3>
    4532:	88 a7       	std	Y+40, r24	; 0x28
    4534:	99 a7       	std	Y+41, r25	; 0x29
    4536:	aa a7       	std	Y+42, r26	; 0x2a
    4538:	bb a7       	std	Y+43, r27	; 0x2b
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    453a:	6f bf       	out	0x3f, r22	; 63
					cpu_irq_restore(flags);
				}

				int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1A,
    453c:	5f 93       	push	r21
    453e:	4f 93       	push	r20
    4540:	3f 93       	push	r19
    4542:	2f 93       	push	r18
    4544:	24 96       	adiw	r28, 0x04	; 4
    4546:	9f ad       	ldd	r25, Y+63	; 0x3f
    4548:	24 97       	sbiw	r28, 0x04	; 4
    454a:	9f 93       	push	r25
    454c:	23 96       	adiw	r28, 0x03	; 3
    454e:	af ad       	ldd	r26, Y+63	; 0x3f
    4550:	23 97       	sbiw	r28, 0x03	; 3
    4552:	af 93       	push	r26
    4554:	d3 01       	movw	r26, r6
    4556:	c2 01       	movw	r24, r4
    4558:	07 2e       	mov	r0, r23
    455a:	7a e0       	ldi	r23, 0x0A	; 10
    455c:	b6 95       	lsr	r27
    455e:	a7 95       	ror	r26
    4560:	97 95       	ror	r25
    4562:	87 95       	ror	r24
    4564:	7a 95       	dec	r23
    4566:	d1 f7       	brne	.-12     	; 0x455c <task_usb+0x3b2>
    4568:	70 2d       	mov	r23, r0
    456a:	bf 93       	push	r27
    456c:	af 93       	push	r26
    456e:	9f 93       	push	r25
    4570:	8f 93       	push	r24
    4572:	84 e9       	ldi	r24, 0x94	; 148
    4574:	96 e0       	ldi	r25, 0x06	; 6
    4576:	9f 93       	push	r25
    4578:	8f 93       	push	r24
    457a:	1f 92       	push	r1
    457c:	80 e4       	ldi	r24, 0x40	; 64
    457e:	8f 93       	push	r24
    4580:	8f e3       	ldi	r24, 0x3F	; 63
    4582:	95 e2       	ldi	r25, 0x25	; 37
    4584:	9f 93       	push	r25
    4586:	8f 93       	push	r24
    4588:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
				now >> 10,
				l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    458c:	81 34       	cpi	r24, 0x41	; 65
    458e:	91 05       	cpc	r25, r1
    4590:	10 f0       	brcs	.+4      	; 0x4596 <task_usb+0x3ec>
    4592:	80 e4       	ldi	r24, 0x40	; 64
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	40 e0       	ldi	r20, 0x00	; 0
    4598:	68 2f       	mov	r22, r24
    459a:	8f e3       	ldi	r24, 0x3F	; 63
    459c:	95 e2       	ldi	r25, 0x25	; 37
    459e:	1c dd       	rcall	.-1480   	; 0x3fd8 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1B,
    45a0:	1f 93       	push	r17
    45a2:	0f 93       	push	r16
    45a4:	3f 92       	push	r3
    45a6:	2f 92       	push	r2
    45a8:	bd a5       	ldd	r27, Y+45	; 0x2d
    45aa:	bf 93       	push	r27
    45ac:	ec a5       	ldd	r30, Y+44	; 0x2c
    45ae:	ef 93       	push	r30
    45b0:	8a e6       	ldi	r24, 0x6A	; 106
    45b2:	96 e0       	ldi	r25, 0x06	; 6
    45b4:	9f 93       	push	r25
    45b6:	8f 93       	push	r24
    45b8:	1f 92       	push	r1
    45ba:	80 e4       	ldi	r24, 0x40	; 64
    45bc:	8f 93       	push	r24
    45be:	8f e3       	ldi	r24, 0x3F	; 63
    45c0:	95 e2       	ldi	r25, 0x25	; 37
    45c2:	9f 93       	push	r25
    45c4:	8f 93       	push	r24
    45c6:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
				l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    45ca:	81 34       	cpi	r24, 0x41	; 65
    45cc:	91 05       	cpc	r25, r1
    45ce:	10 f0       	brcs	.+4      	; 0x45d4 <task_usb+0x42a>
    45d0:	80 e4       	ldi	r24, 0x40	; 64
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	40 e0       	ldi	r20, 0x00	; 0
    45d6:	68 2f       	mov	r22, r24
    45d8:	8f e3       	ldi	r24, 0x3F	; 63
    45da:	95 e2       	ldi	r25, 0x25	; 37
    45dc:	fd dc       	rcall	.-1542   	; 0x3fd8 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1C,
    45de:	2e 81       	ldd	r18, Y+6	; 0x06
    45e0:	3f 81       	ldd	r19, Y+7	; 0x07
    45e2:	b9 01       	movw	r22, r18
    45e4:	33 0f       	add	r19, r19
    45e6:	88 0b       	sbc	r24, r24
    45e8:	99 0b       	sbc	r25, r25
    45ea:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	48 ec       	ldi	r20, 0xC8	; 200
    45f4:	52 e4       	ldi	r21, 0x42	; 66
    45f6:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    45fa:	9f 93       	push	r25
    45fc:	8f 93       	push	r24
    45fe:	7f 93       	push	r23
    4600:	6f 93       	push	r22
    4602:	86 e5       	ldi	r24, 0x56	; 86
    4604:	96 e0       	ldi	r25, 0x06	; 6
    4606:	9f 93       	push	r25
    4608:	8f 93       	push	r24
    460a:	1f 92       	push	r1
    460c:	80 e4       	ldi	r24, 0x40	; 64
    460e:	8f 93       	push	r24
    4610:	8f e3       	ldi	r24, 0x3F	; 63
    4612:	95 e2       	ldi	r25, 0x25	; 37
    4614:	9f 93       	push	r25
    4616:	8f 93       	push	r24
    4618:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
				l_adc_temp_deg_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    461c:	cd bf       	out	0x3d, r28	; 61
    461e:	de bf       	out	0x3e, r29	; 62
    4620:	81 34       	cpi	r24, 0x41	; 65
    4622:	91 05       	cpc	r25, r1
    4624:	10 f0       	brcs	.+4      	; 0x462a <task_usb+0x480>
    4626:	80 e4       	ldi	r24, 0x40	; 64
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	40 e0       	ldi	r20, 0x00	; 0
    462c:	68 2f       	mov	r22, r24
    462e:	8f e3       	ldi	r24, 0x3F	; 63
    4630:	95 e2       	ldi	r25, 0x25	; 37
    4632:	d2 dc       	rcall	.-1628   	; 0x3fd8 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P2,
    4634:	68 85       	ldd	r22, Y+8	; 0x08
    4636:	79 85       	ldd	r23, Y+9	; 0x09
    4638:	8a 85       	ldd	r24, Y+10	; 0x0a
    463a:	9b 85       	ldd	r25, Y+11	; 0x0b
    463c:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	48 ec       	ldi	r20, 0xC8	; 200
    4646:	52 e4       	ldi	r21, 0x42	; 66
    4648:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    464c:	9f 93       	push	r25
    464e:	8f 93       	push	r24
    4650:	7f 93       	push	r23
    4652:	6f 93       	push	r22
    4654:	c5 01       	movw	r24, r10
    4656:	b4 01       	movw	r22, r8
    4658:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	48 ec       	ldi	r20, 0xC8	; 200
    4662:	52 e4       	ldi	r21, 0x42	; 66
    4664:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    4668:	9f 93       	push	r25
    466a:	8f 93       	push	r24
    466c:	7f 93       	push	r23
    466e:	6f 93       	push	r22
    4670:	8f e2       	ldi	r24, 0x2F	; 47
    4672:	96 e0       	ldi	r25, 0x06	; 6
    4674:	9f 93       	push	r25
    4676:	8f 93       	push	r24
    4678:	1f 92       	push	r1
    467a:	80 e4       	ldi	r24, 0x40	; 64
    467c:	8f 93       	push	r24
    467e:	8f e3       	ldi	r24, 0x3F	; 63
    4680:	95 e2       	ldi	r25, 0x25	; 37
    4682:	9f 93       	push	r25
    4684:	8f 93       	push	r24
    4686:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
				l_twi1_baro_temp_100 / 100.f, l_twi1_baro_p_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    468a:	81 34       	cpi	r24, 0x41	; 65
    468c:	91 05       	cpc	r25, r1
    468e:	10 f0       	brcs	.+4      	; 0x4694 <task_usb+0x4ea>
    4690:	80 e4       	ldi	r24, 0x40	; 64
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	40 e0       	ldi	r20, 0x00	; 0
    4696:	68 2f       	mov	r22, r24
    4698:	8f e3       	ldi	r24, 0x3F	; 63
    469a:	95 e2       	ldi	r25, 0x25	; 37
    469c:	9d dc       	rcall	.-1734   	; 0x3fd8 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P3,
    469e:	ee 85       	ldd	r30, Y+14	; 0x0e
    46a0:	ff 85       	ldd	r31, Y+15	; 0x0f
    46a2:	bf 01       	movw	r22, r30
    46a4:	ff 0f       	add	r31, r31
    46a6:	88 0b       	sbc	r24, r24
    46a8:	99 0b       	sbc	r25, r25
    46aa:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	48 ec       	ldi	r20, 0xC8	; 200
    46b4:	52 e4       	ldi	r21, 0x42	; 66
    46b6:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    46ba:	9f 93       	push	r25
    46bc:	8f 93       	push	r24
    46be:	7f 93       	push	r23
    46c0:	6f 93       	push	r22
    46c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    46c4:	3d 85       	ldd	r19, Y+13	; 0x0d
    46c6:	b9 01       	movw	r22, r18
    46c8:	33 0f       	add	r19, r19
    46ca:	88 0b       	sbc	r24, r24
    46cc:	99 0b       	sbc	r25, r25
    46ce:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	48 ec       	ldi	r20, 0xC8	; 200
    46d8:	52 e4       	ldi	r21, 0x42	; 66
    46da:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    46de:	9f 93       	push	r25
    46e0:	8f 93       	push	r24
    46e2:	7f 93       	push	r23
    46e4:	6f 93       	push	r22
    46e6:	84 e0       	ldi	r24, 0x04	; 4
    46e8:	96 e0       	ldi	r25, 0x06	; 6
    46ea:	9f 93       	push	r25
    46ec:	8f 93       	push	r24
    46ee:	1f 92       	push	r1
    46f0:	80 e4       	ldi	r24, 0x40	; 64
    46f2:	8f 93       	push	r24
    46f4:	8f e3       	ldi	r24, 0x3F	; 63
    46f6:	95 e2       	ldi	r25, 0x25	; 37
    46f8:	9f 93       	push	r25
    46fa:	8f 93       	push	r24
    46fc:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
				l_twi1_hygro_T_100 / 100.f, l_twi1_hygro_RH_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4700:	81 34       	cpi	r24, 0x41	; 65
    4702:	91 05       	cpc	r25, r1
    4704:	10 f0       	brcs	.+4      	; 0x470a <task_usb+0x560>
    4706:	80 e4       	ldi	r24, 0x40	; 64
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	40 e0       	ldi	r20, 0x00	; 0
    470c:	68 2f       	mov	r22, r24
    470e:	8f e3       	ldi	r24, 0x3F	; 63
    4710:	95 e2       	ldi	r25, 0x25	; 37
    4712:	62 dc       	rcall	.-1852   	; 0x3fd8 <udi_write_tx_buf>


				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P1A,
    4714:	39 a9       	ldd	r19, Y+49	; 0x31
    4716:	3f 93       	push	r19
    4718:	78 a9       	ldd	r23, Y+48	; 0x30
    471a:	7f 93       	push	r23
    471c:	aa 89       	ldd	r26, Y+18	; 0x12
    471e:	bb 89       	ldd	r27, Y+19	; 0x13
    4720:	bd 01       	movw	r22, r26
    4722:	bb 0f       	add	r27, r27
    4724:	88 0b       	sbc	r24, r24
    4726:	99 0b       	sbc	r25, r25
    4728:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	4a e7       	ldi	r20, 0x7A	; 122
    4732:	54 e4       	ldi	r21, 0x44	; 68
    4734:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    4738:	9f 93       	push	r25
    473a:	8f 93       	push	r24
    473c:	7f 93       	push	r23
    473e:	6f 93       	push	r22
    4740:	bf a5       	ldd	r27, Y+47	; 0x2f
    4742:	bf 93       	push	r27
    4744:	ee a5       	ldd	r30, Y+46	; 0x2e
    4746:	ef 93       	push	r30
    4748:	28 89       	ldd	r18, Y+16	; 0x10
    474a:	39 89       	ldd	r19, Y+17	; 0x11
    474c:	b9 01       	movw	r22, r18
    474e:	33 0f       	add	r19, r19
    4750:	88 0b       	sbc	r24, r24
    4752:	99 0b       	sbc	r25, r25
    4754:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    4758:	20 e0       	ldi	r18, 0x00	; 0
    475a:	30 e0       	ldi	r19, 0x00	; 0
    475c:	4a e7       	ldi	r20, 0x7A	; 122
    475e:	54 e4       	ldi	r21, 0x44	; 68
    4760:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    4764:	9f 93       	push	r25
    4766:	8f 93       	push	r24
    4768:	7f 93       	push	r23
    476a:	6f 93       	push	r22
    476c:	88 ed       	ldi	r24, 0xD8	; 216
    476e:	95 e0       	ldi	r25, 0x05	; 5
    4770:	9f 93       	push	r25
    4772:	8f 93       	push	r24
    4774:	1f 92       	push	r1
    4776:	80 e4       	ldi	r24, 0x40	; 64
    4778:	8f 93       	push	r24
    477a:	8f e3       	ldi	r24, 0x3F	; 63
    477c:	95 e2       	ldi	r25, 0x25	; 37
    477e:	9f 93       	push	r25
    4780:	8f 93       	push	r24
    4782:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
				l_twi1_gyro_1_accel_x_mg / 1000.f, l_twi1_gyro_1_accel_x,
				l_twi1_gyro_1_accel_y_mg / 1000.f, l_twi1_gyro_1_accel_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4786:	cd bf       	out	0x3d, r28	; 61
    4788:	de bf       	out	0x3e, r29	; 62
    478a:	81 34       	cpi	r24, 0x41	; 65
    478c:	91 05       	cpc	r25, r1
    478e:	10 f0       	brcs	.+4      	; 0x4794 <task_usb+0x5ea>
    4790:	80 e4       	ldi	r24, 0x40	; 64
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	40 e0       	ldi	r20, 0x00	; 0
    4796:	68 2f       	mov	r22, r24
    4798:	8f e3       	ldi	r24, 0x3F	; 63
    479a:	95 e2       	ldi	r25, 0x25	; 37
    479c:	1d dc       	rcall	.-1990   	; 0x3fd8 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P1B,
    479e:	bb a9       	ldd	r27, Y+51	; 0x33
    47a0:	bf 93       	push	r27
    47a2:	ea a9       	ldd	r30, Y+50	; 0x32
    47a4:	ef 93       	push	r30
    47a6:	2c 89       	ldd	r18, Y+20	; 0x14
    47a8:	3d 89       	ldd	r19, Y+21	; 0x15
    47aa:	b9 01       	movw	r22, r18
    47ac:	33 0f       	add	r19, r19
    47ae:	88 0b       	sbc	r24, r24
    47b0:	99 0b       	sbc	r25, r25
    47b2:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    47b6:	20 e0       	ldi	r18, 0x00	; 0
    47b8:	30 e0       	ldi	r19, 0x00	; 0
    47ba:	4a e7       	ldi	r20, 0x7A	; 122
    47bc:	54 e4       	ldi	r21, 0x44	; 68
    47be:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    47c2:	9f 93       	push	r25
    47c4:	8f 93       	push	r24
    47c6:	7f 93       	push	r23
    47c8:	6f 93       	push	r22
    47ca:	81 ec       	ldi	r24, 0xC1	; 193
    47cc:	95 e0       	ldi	r25, 0x05	; 5
    47ce:	9f 93       	push	r25
    47d0:	8f 93       	push	r24
    47d2:	1f 92       	push	r1
    47d4:	80 e4       	ldi	r24, 0x40	; 64
    47d6:	8f 93       	push	r24
    47d8:	8f e3       	ldi	r24, 0x3F	; 63
    47da:	95 e2       	ldi	r25, 0x25	; 37
    47dc:	9f 93       	push	r25
    47de:	8f 93       	push	r24
    47e0:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
				l_twi1_gyro_1_accel_z_mg / 1000.f, l_twi1_gyro_1_accel_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    47e4:	81 34       	cpi	r24, 0x41	; 65
    47e6:	91 05       	cpc	r25, r1
    47e8:	10 f0       	brcs	.+4      	; 0x47ee <task_usb+0x644>
    47ea:	80 e4       	ldi	r24, 0x40	; 64
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	40 e0       	ldi	r20, 0x00	; 0
    47f0:	68 2f       	mov	r22, r24
    47f2:	8f e3       	ldi	r24, 0x3F	; 63
    47f4:	95 e2       	ldi	r25, 0x25	; 37
    47f6:	f0 db       	rcall	.-2080   	; 0x3fd8 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P2A,
    47f8:	3f a9       	ldd	r19, Y+55	; 0x37
    47fa:	3f 93       	push	r19
    47fc:	7e a9       	ldd	r23, Y+54	; 0x36
    47fe:	7f 93       	push	r23
    4800:	c7 01       	movw	r24, r14
    4802:	b6 01       	movw	r22, r12
    4804:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    4808:	20 e0       	ldi	r18, 0x00	; 0
    480a:	30 e0       	ldi	r19, 0x00	; 0
    480c:	4a e7       	ldi	r20, 0x7A	; 122
    480e:	54 e4       	ldi	r21, 0x44	; 68
    4810:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    4814:	9f 93       	push	r25
    4816:	8f 93       	push	r24
    4818:	7f 93       	push	r23
    481a:	6f 93       	push	r22
    481c:	cd a8       	ldd	r12, Y+53	; 0x35
    481e:	cf 92       	push	r12
    4820:	dc a8       	ldd	r13, Y+52	; 0x34
    4822:	df 92       	push	r13
    4824:	6e 89       	ldd	r22, Y+22	; 0x16
    4826:	7f 89       	ldd	r23, Y+23	; 0x17
    4828:	88 8d       	ldd	r24, Y+24	; 0x18
    482a:	99 8d       	ldd	r25, Y+25	; 0x19
    482c:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    4830:	20 e0       	ldi	r18, 0x00	; 0
    4832:	30 e0       	ldi	r19, 0x00	; 0
    4834:	4a e7       	ldi	r20, 0x7A	; 122
    4836:	54 e4       	ldi	r21, 0x44	; 68
    4838:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    483c:	9f 93       	push	r25
    483e:	8f 93       	push	r24
    4840:	7f 93       	push	r23
    4842:	6f 93       	push	r22
    4844:	82 e9       	ldi	r24, 0x92	; 146
    4846:	95 e0       	ldi	r25, 0x05	; 5
    4848:	9f 93       	push	r25
    484a:	8f 93       	push	r24
    484c:	1f 92       	push	r1
    484e:	80 e4       	ldi	r24, 0x40	; 64
    4850:	8f 93       	push	r24
    4852:	8f e3       	ldi	r24, 0x3F	; 63
    4854:	95 e2       	ldi	r25, 0x25	; 37
    4856:	9f 93       	push	r25
    4858:	8f 93       	push	r24
    485a:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
				l_twi1_gyro_1_gyro_x_mdps / 1000.f, l_twi1_gyro_1_gyro_x,
				l_twi1_gyro_1_gyro_y_mdps / 1000.f, l_twi1_gyro_1_gyro_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    485e:	81 34       	cpi	r24, 0x41	; 65
    4860:	91 05       	cpc	r25, r1
    4862:	10 f0       	brcs	.+4      	; 0x4868 <task_usb+0x6be>
    4864:	80 e4       	ldi	r24, 0x40	; 64
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	40 e0       	ldi	r20, 0x00	; 0
    486a:	68 2f       	mov	r22, r24
    486c:	8f e3       	ldi	r24, 0x3F	; 63
    486e:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P2B,
    4870:	b3 db       	rcall	.-2202   	; 0x3fd8 <udi_write_tx_buf>
    4872:	e9 ac       	ldd	r14, Y+57	; 0x39
    4874:	ef 92       	push	r14
    4876:	f8 ac       	ldd	r15, Y+56	; 0x38
    4878:	ff 92       	push	r15
    487a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    487c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    487e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4880:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4882:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    4886:	20 e0       	ldi	r18, 0x00	; 0
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	4a e7       	ldi	r20, 0x7A	; 122
    488c:	54 e4       	ldi	r21, 0x44	; 68
    488e:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    4892:	9f 93       	push	r25
    4894:	8f 93       	push	r24
    4896:	7f 93       	push	r23
    4898:	6f 93       	push	r22
    489a:	8a e7       	ldi	r24, 0x7A	; 122
    489c:	95 e0       	ldi	r25, 0x05	; 5
    489e:	9f 93       	push	r25
    48a0:	8f 93       	push	r24
    48a2:	1f 92       	push	r1
    48a4:	80 e4       	ldi	r24, 0x40	; 64
    48a6:	8f 93       	push	r24
    48a8:	8f e3       	ldi	r24, 0x3F	; 63
    48aa:	95 e2       	ldi	r25, 0x25	; 37
    48ac:	9f 93       	push	r25
    48ae:	8f 93       	push	r24
    48b0:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
				l_twi1_gyro_1_gyro_z_mdps / 1000.f, l_twi1_gyro_1_gyro_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    48b4:	cd bf       	out	0x3d, r28	; 61
    48b6:	de bf       	out	0x3e, r29	; 62
    48b8:	81 34       	cpi	r24, 0x41	; 65
    48ba:	91 05       	cpc	r25, r1
    48bc:	10 f0       	brcs	.+4      	; 0x48c2 <task_usb+0x718>
    48be:	80 e4       	ldi	r24, 0x40	; 64
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	40 e0       	ldi	r20, 0x00	; 0
    48c4:	68 2f       	mov	r22, r24
    48c6:	8f e3       	ldi	r24, 0x3F	; 63
    48c8:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P3A,
    48ca:	86 db       	rcall	.-2292   	; 0x3fd8 <udi_write_tx_buf>
    48cc:	cf ac       	ldd	r12, Y+63	; 0x3f
    48ce:	cf 92       	push	r12
    48d0:	de ac       	ldd	r13, Y+62	; 0x3e
    48d2:	df 92       	push	r13
    48d4:	6c a1       	ldd	r22, Y+36	; 0x24
    48d6:	7d a1       	ldd	r23, Y+37	; 0x25
    48d8:	8e a1       	ldd	r24, Y+38	; 0x26
    48da:	9f a1       	ldd	r25, Y+39	; 0x27
    48dc:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	4a e7       	ldi	r20, 0x7A	; 122
    48e6:	54 e4       	ldi	r21, 0x44	; 68
    48e8:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    48ec:	9f 93       	push	r25
    48ee:	8f 93       	push	r24
    48f0:	7f 93       	push	r23
    48f2:	6f 93       	push	r22
    48f4:	ed ac       	ldd	r14, Y+61	; 0x3d
    48f6:	ef 92       	push	r14
    48f8:	fc ac       	ldd	r15, Y+60	; 0x3c
    48fa:	ff 92       	push	r15
    48fc:	68 a1       	ldd	r22, Y+32	; 0x20
    48fe:	79 a1       	ldd	r23, Y+33	; 0x21
    4900:	8a a1       	ldd	r24, Y+34	; 0x22
    4902:	9b a1       	ldd	r25, Y+35	; 0x23
    4904:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    4908:	20 e0       	ldi	r18, 0x00	; 0
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	4a e7       	ldi	r20, 0x7A	; 122
    490e:	54 e4       	ldi	r21, 0x44	; 68
    4910:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    4914:	9f 93       	push	r25
    4916:	8f 93       	push	r24
    4918:	7f 93       	push	r23
    491a:	6f 93       	push	r22
    491c:	8d e4       	ldi	r24, 0x4D	; 77
    491e:	95 e0       	ldi	r25, 0x05	; 5
    4920:	9f 93       	push	r25
    4922:	8f 93       	push	r24
    4924:	1f 92       	push	r1
    4926:	80 e4       	ldi	r24, 0x40	; 64
    4928:	8f 93       	push	r24
    492a:	8f e3       	ldi	r24, 0x3F	; 63
    492c:	95 e2       	ldi	r25, 0x25	; 37
    492e:	9f 93       	push	r25
    4930:	8f 93       	push	r24
				l_twi1_gyro_2_mag_x_nT / 1000.f, l_twi1_gyro_2_mag_x,
				l_twi1_gyro_2_mag_y_nT / 1000.f, l_twi1_gyro_2_mag_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4932:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    4936:	81 34       	cpi	r24, 0x41	; 65
    4938:	91 05       	cpc	r25, r1
    493a:	10 f0       	brcs	.+4      	; 0x4940 <task_usb+0x796>
    493c:	80 e4       	ldi	r24, 0x40	; 64
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	40 e0       	ldi	r20, 0x00	; 0
    4942:	68 2f       	mov	r22, r24
    4944:	8f e3       	ldi	r24, 0x3F	; 63
    4946:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P3B,
    4948:	47 db       	rcall	.-2418   	; 0x3fd8 <udi_write_tx_buf>
    494a:	22 96       	adiw	r28, 0x02	; 2
    494c:	cf ac       	ldd	r12, Y+63	; 0x3f
    494e:	22 97       	sbiw	r28, 0x02	; 2
    4950:	cf 92       	push	r12
    4952:	21 96       	adiw	r28, 0x01	; 1
    4954:	df ac       	ldd	r13, Y+63	; 0x3f
    4956:	21 97       	sbiw	r28, 0x01	; 1
    4958:	df 92       	push	r13
    495a:	68 a5       	ldd	r22, Y+40	; 0x28
    495c:	79 a5       	ldd	r23, Y+41	; 0x29
    495e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4960:	9b a5       	ldd	r25, Y+43	; 0x2b
    4962:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    4966:	20 e0       	ldi	r18, 0x00	; 0
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	4a e7       	ldi	r20, 0x7A	; 122
    496c:	54 e4       	ldi	r21, 0x44	; 68
    496e:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    4972:	9f 93       	push	r25
    4974:	8f 93       	push	r24
    4976:	7f 93       	push	r23
    4978:	6f 93       	push	r22
    497a:	85 e3       	ldi	r24, 0x35	; 53
    497c:	95 e0       	ldi	r25, 0x05	; 5
    497e:	9f 93       	push	r25
    4980:	8f 93       	push	r24
    4982:	1f 92       	push	r1
    4984:	80 e4       	ldi	r24, 0x40	; 64
    4986:	8f 93       	push	r24
    4988:	8f e3       	ldi	r24, 0x3F	; 63
    498a:	95 e2       	ldi	r25, 0x25	; 37
    498c:	9f 93       	push	r25
    498e:	8f 93       	push	r24
				l_twi1_gyro_2_mag_z_nT / 1000.f, l_twi1_gyro_2_mag_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4990:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    4994:	81 34       	cpi	r24, 0x41	; 65
    4996:	91 05       	cpc	r25, r1
    4998:	10 f0       	brcs	.+4      	; 0x499e <task_usb+0x7f4>
    499a:	80 e4       	ldi	r24, 0x40	; 64
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	40 e0       	ldi	r20, 0x00	; 0
    49a0:	68 2f       	mov	r22, r24
    49a2:	8f e3       	ldi	r24, 0x3F	; 63
    49a4:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P4,
    49a6:	18 db       	rcall	.-2512   	; 0x3fd8 <udi_write_tx_buf>
    49a8:	eb ac       	ldd	r14, Y+59	; 0x3b
    49aa:	ef 92       	push	r14
    49ac:	fa ac       	ldd	r15, Y+58	; 0x3a
    49ae:	ff 92       	push	r15
    49b0:	ce 8c       	ldd	r12, Y+30	; 0x1e
    49b2:	df 8c       	ldd	r13, Y+31	; 0x1f
    49b4:	b6 01       	movw	r22, r12
    49b6:	dd 0c       	add	r13, r13
    49b8:	88 0b       	sbc	r24, r24
    49ba:	99 0b       	sbc	r25, r25
    49bc:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    49c0:	20 e0       	ldi	r18, 0x00	; 0
    49c2:	30 e0       	ldi	r19, 0x00	; 0
    49c4:	48 ec       	ldi	r20, 0xC8	; 200
    49c6:	52 e4       	ldi	r21, 0x42	; 66
    49c8:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    49cc:	9f 93       	push	r25
    49ce:	8f 93       	push	r24
    49d0:	7f 93       	push	r23
    49d2:	6f 93       	push	r22
    49d4:	86 e1       	ldi	r24, 0x16	; 22
    49d6:	95 e0       	ldi	r25, 0x05	; 5
    49d8:	9f 93       	push	r25
    49da:	8f 93       	push	r24
    49dc:	1f 92       	push	r1
    49de:	80 e4       	ldi	r24, 0x40	; 64
    49e0:	8f 93       	push	r24
    49e2:	8f e3       	ldi	r24, 0x3F	; 63
    49e4:	95 e2       	ldi	r25, 0x25	; 37
    49e6:	9f 93       	push	r25
    49e8:	8f 93       	push	r24
				l_twi1_gyro_1_temp_deg_100 / 100.f, l_twi1_gyro_1_temp);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    49ea:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    49ee:	cd bf       	out	0x3d, r28	; 61
    49f0:	de bf       	out	0x3e, r29	; 62
    49f2:	81 34       	cpi	r24, 0x41	; 65
    49f4:	91 05       	cpc	r25, r1
    49f6:	10 f0       	brcs	.+4      	; 0x49fc <task_usb+0x852>
    49f8:	80 e4       	ldi	r24, 0x40	; 64
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	40 e0       	ldi	r20, 0x00	; 0
    49fe:	68 2f       	mov	r22, r24
    4a00:	8f e3       	ldi	r24, 0x3F	; 63
    4a02:	95 e2       	ldi	r25, 0x25	; 37

				/* Store last time of status line */
				usb_last = now;
    4a04:	e9 da       	rcall	.-2606   	; 0x3fd8 <udi_write_tx_buf>
    4a06:	40 92 d0 21 	sts	0x21D0, r4	; 0x8021d0 <__data_end>
    4a0a:	50 92 d1 21 	sts	0x21D1, r5	; 0x8021d1 <__data_end+0x1>
    4a0e:	60 92 d2 21 	sts	0x21D2, r6	; 0x8021d2 <__data_end+0x2>
    4a12:	70 92 d3 21 	sts	0x21D3, r7	; 0x8021d3 <__data_end+0x3>
			}
		}
	}
}
    4a16:	cd 5b       	subi	r28, 0xBD	; 189
    4a18:	df 4f       	sbci	r29, 0xFF	; 255
    4a1a:	cd bf       	out	0x3d, r28	; 61
    4a1c:	de bf       	out	0x3e, r29	; 62
    4a1e:	df 91       	pop	r29
    4a20:	cf 91       	pop	r28
    4a22:	1f 91       	pop	r17
    4a24:	0f 91       	pop	r16
    4a26:	ff 90       	pop	r15
    4a28:	ef 90       	pop	r14
    4a2a:	df 90       	pop	r13
    4a2c:	cf 90       	pop	r12
    4a2e:	bf 90       	pop	r11
    4a30:	af 90       	pop	r10
    4a32:	9f 90       	pop	r9
    4a34:	8f 90       	pop	r8
    4a36:	7f 90       	pop	r7
    4a38:	6f 90       	pop	r6
    4a3a:	5f 90       	pop	r5
    4a3c:	4f 90       	pop	r4
    4a3e:	3f 90       	pop	r3
    4a40:	2f 90       	pop	r2
    4a42:	08 95       	ret

00004a44 <nvm_init>:
#include "conf_nvm.h"
#include "nvm.h"

status_code_t nvm_init(mem_type_t mem)
{
	switch (mem) {
    4a44:	83 30       	cpi	r24, 0x03	; 3
    4a46:	10 f4       	brcc	.+4      	; 0x4a4c <nvm_init+0x8>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4a48:	80 e0       	ldi	r24, 0x00	; 0
    4a4a:	08 95       	ret
		}
		break;
#endif

	default:
		return ERR_INVALID_ARG;
    4a4c:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    4a4e:	08 95       	ret

00004a50 <fifo_init>:
 */

#include "fifo.h"

int fifo_init(fifo_desc_t *fifo_desc, void *buffer, uint8_t size)
{
    4a50:	fc 01       	movw	r30, r24
	// ... and must fit in a uint8_t. Since the read and write indexes are using a
	// double-index range implementation, the max FIFO size is thus 128 items.
	Assert (size <= 128);

	// Fifo starts empty.
	fifo_desc->read_index  = 0;
    4a52:	12 82       	std	Z+2, r1	; 0x02
	fifo_desc->write_index = 0;
    4a54:	13 82       	std	Z+3, r1	; 0x03

	// Save the size parameter.
	fifo_desc->size = size;
    4a56:	44 83       	std	Z+4, r20	; 0x04

	// Create a mask to speed up the FIFO management (index swapping).
	fifo_desc->mask = (2 * (uint16_t)size) - 1;
    4a58:	44 0f       	add	r20, r20
    4a5a:	41 50       	subi	r20, 0x01	; 1
    4a5c:	45 83       	std	Z+5, r20	; 0x05

	// Save the buffer pointer.
	fifo_desc->buffer.u8ptr = buffer;
    4a5e:	60 83       	st	Z, r22
    4a60:	71 83       	std	Z+1, r23	; 0x01

	return FIFO_OK;
}
    4a62:	80 e0       	ldi	r24, 0x00	; 0
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	08 95       	ret

00004a68 <dma_interrupt>:
 * dma_set_callback() function.
 *
 * \param num DMA channel number to handle interrupt for
 */
static void dma_interrupt(const dma_channel_num_t num)
{
    4a68:	cf 93       	push	r28
    4a6a:	df 93       	push	r29
	enum dma_channel_status status;
	DMA_CH_t *channel;

	channel = dma_get_channel_address_from_num(num);
    4a6c:	48 2f       	mov	r20, r24
    4a6e:	50 e0       	ldi	r21, 0x00	; 0
    4a70:	fa 01       	movw	r30, r20
    4a72:	71 96       	adiw	r30, 0x11	; 17
    4a74:	e2 95       	swap	r30
    4a76:	f2 95       	swap	r31
    4a78:	f0 7f       	andi	r31, 0xF0	; 240
    4a7a:	fe 27       	eor	r31, r30
    4a7c:	e0 7f       	andi	r30, 0xF0	; 240
    4a7e:	fe 27       	eor	r31, r30
 * \return Channel status given by a \ref dma_channel_status
 */
static inline enum dma_channel_status dma_get_channel_status(
		dma_channel_num_t num)
{
	uint8_t busy_pending    = DMA.STATUS;
    4a80:	a0 e0       	ldi	r26, 0x00	; 0
    4a82:	b1 e0       	ldi	r27, 0x01	; 1
    4a84:	14 96       	adiw	r26, 0x04	; 4
    4a86:	9c 91       	ld	r25, X
    4a88:	14 97       	sbiw	r26, 0x04	; 4
	uint8_t error_completed = DMA.INTFLAGS;
    4a8a:	13 96       	adiw	r26, 0x03	; 3
    4a8c:	6c 91       	ld	r22, X

	/*
	 * Check lower and upper nibble of INTFLAGS register to find possible
	 * error or transfer completed status.
	 */
	error_completed &= (1 << num) | (1 << (num + 4));
    4a8e:	da 01       	movw	r26, r20
    4a90:	14 96       	adiw	r26, 0x04	; 4
    4a92:	21 e0       	ldi	r18, 0x01	; 1
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	e9 01       	movw	r28, r18
    4a98:	08 2e       	mov	r0, r24
    4a9a:	02 c0       	rjmp	.+4      	; 0x4aa0 <dma_interrupt+0x38>
    4a9c:	cc 0f       	add	r28, r28
    4a9e:	dd 1f       	adc	r29, r29
    4aa0:	0a 94       	dec	r0
    4aa2:	e2 f7       	brpl	.-8      	; 0x4a9c <dma_interrupt+0x34>
    4aa4:	0a 2e       	mov	r0, r26
    4aa6:	02 c0       	rjmp	.+4      	; 0x4aac <dma_interrupt+0x44>
    4aa8:	22 0f       	add	r18, r18
    4aaa:	33 1f       	adc	r19, r19
    4aac:	0a 94       	dec	r0
    4aae:	e2 f7       	brpl	.-8      	; 0x4aa8 <dma_interrupt+0x40>
    4ab0:	2c 2b       	or	r18, r28
    4ab2:	62 23       	and	r22, r18
	if (error_completed & (1 << (num + 4))) {
    4ab4:	70 e0       	ldi	r23, 0x00	; 0
    4ab6:	eb 01       	movw	r28, r22
    4ab8:	0a 2e       	mov	r0, r26
    4aba:	02 c0       	rjmp	.+4      	; 0x4ac0 <dma_interrupt+0x58>
    4abc:	d5 95       	asr	r29
    4abe:	c7 95       	ror	r28
    4ac0:	0a 94       	dec	r0
    4ac2:	e2 f7       	brpl	.-8      	; 0x4abc <dma_interrupt+0x54>
    4ac4:	c0 fd       	sbrc	r28, 0
    4ac6:	1a c0       	rjmp	.+52     	; 0x4afc <dma_interrupt+0x94>
		return DMA_CH_TRANSFER_ERROR;
	} else if (error_completed & (1 << num)) {
    4ac8:	08 2e       	mov	r0, r24
    4aca:	02 c0       	rjmp	.+4      	; 0x4ad0 <dma_interrupt+0x68>
    4acc:	75 95       	asr	r23
    4ace:	67 95       	ror	r22
    4ad0:	0a 94       	dec	r0
    4ad2:	e2 f7       	brpl	.-8      	; 0x4acc <dma_interrupt+0x64>
    4ad4:	60 fd       	sbrc	r22, 0
    4ad6:	14 c0       	rjmp	.+40     	; 0x4b00 <dma_interrupt+0x98>

	/*
	 * Check lower and upper nibble of STATUS register to find possible
	 * busy or pending completed status.
	 */
	busy_pending &= (1 << num) | (1 << (num + 4));
    4ad8:	29 23       	and	r18, r25
	if (busy_pending & (1 << (num + 4))) {
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	b9 01       	movw	r22, r18
    4ade:	02 c0       	rjmp	.+4      	; 0x4ae4 <dma_interrupt+0x7c>
    4ae0:	75 95       	asr	r23
    4ae2:	67 95       	ror	r22
    4ae4:	aa 95       	dec	r26
    4ae6:	e2 f7       	brpl	.-8      	; 0x4ae0 <dma_interrupt+0x78>
    4ae8:	60 fd       	sbrc	r22, 0
    4aea:	0c c0       	rjmp	.+24     	; 0x4b04 <dma_interrupt+0x9c>
	 * Check lower and upper nibble of INTFLAGS register to find possible
	 * error or transfer completed status.
	 */
	error_completed &= (1 << num) | (1 << (num + 4));
	if (error_completed & (1 << (num + 4))) {
		return DMA_CH_TRANSFER_ERROR;
    4aec:	02 c0       	rjmp	.+4      	; 0x4af2 <dma_interrupt+0x8a>
    4aee:	35 95       	asr	r19
    4af0:	27 95       	ror	r18
    4af2:	8a 95       	dec	r24
    4af4:	e2 f7       	brpl	.-8      	; 0x4aee <dma_interrupt+0x86>
    4af6:	82 2f       	mov	r24, r18
    4af8:	81 70       	andi	r24, 0x01	; 1
    4afa:	05 c0       	rjmp	.+10     	; 0x4b06 <dma_interrupt+0x9e>
    4afc:	84 e0       	ldi	r24, 0x04	; 4
    4afe:	03 c0       	rjmp	.+6      	; 0x4b06 <dma_interrupt+0x9e>
	} else if (error_completed & (1 << num)) {
		return DMA_CH_TRANSFER_COMPLETED;
    4b00:	83 e0       	ldi	r24, 0x03	; 3
    4b02:	01 c0       	rjmp	.+2      	; 0x4b06 <dma_interrupt+0x9e>
	 * Check lower and upper nibble of STATUS register to find possible
	 * busy or pending completed status.
	 */
	busy_pending &= (1 << num) | (1 << (num + 4));
	if (busy_pending & (1 << (num + 4))) {
		return DMA_CH_BUSY;
    4b04:	82 e0       	ldi	r24, 0x02	; 2
	status  = dma_get_channel_status(num);

	/* Clear all interrupt flags to be sure */
	channel->CTRLB |= DMA_CH_TRNIF_bm | DMA_CH_ERRIF_bm;
    4b06:	91 81       	ldd	r25, Z+1	; 0x01
    4b08:	90 63       	ori	r25, 0x30	; 48
    4b0a:	91 83       	std	Z+1, r25	; 0x01

	if (dma_data[num].callback) {
    4b0c:	44 0f       	add	r20, r20
    4b0e:	55 1f       	adc	r21, r21
    4b10:	fa 01       	movw	r30, r20
    4b12:	ed 53       	subi	r30, 0x3D	; 61
    4b14:	f2 4d       	sbci	r31, 0xD2	; 210
    4b16:	01 90       	ld	r0, Z+
    4b18:	f0 81       	ld	r31, Z
    4b1a:	e0 2d       	mov	r30, r0
    4b1c:	30 97       	sbiw	r30, 0x00	; 0
    4b1e:	09 f0       	breq	.+2      	; 0x4b22 <dma_interrupt+0xba>
		dma_data[num].callback(status);
    4b20:	19 95       	eicall
	}
}
    4b22:	df 91       	pop	r29
    4b24:	cf 91       	pop	r28
    4b26:	08 95       	ret

00004b28 <dma_enable>:
 *
 * \note This function will do a soft reset of the DMA controller, clearing all
 * previous configuration.
 */
void dma_enable(void)
{
    4b28:	cf 93       	push	r28
    4b2a:	df 93       	push	r29
    4b2c:	1f 92       	push	r1
    4b2e:	cd b7       	in	r28, 0x3d	; 61
    4b30:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4b32:	61 e0       	ldi	r22, 0x01	; 1
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4b3a:	80 91 68 2e 	lds	r24, 0x2E68	; 0x802e68 <sleepmgr_locks+0x1>
    4b3e:	8f 3f       	cpi	r24, 0xFF	; 255
    4b40:	09 f4       	brne	.+2      	; 0x4b44 <dma_enable+0x1c>
    4b42:	ff cf       	rjmp	.-2      	; 0x4b42 <dma_enable+0x1a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4b44:	8f b7       	in	r24, 0x3f	; 63
    4b46:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4b48:	f8 94       	cli
	return flags;
    4b4a:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4b4c:	e7 e6       	ldi	r30, 0x67	; 103
    4b4e:	fe e2       	ldi	r31, 0x2E	; 46
    4b50:	81 81       	ldd	r24, Z+1	; 0x01
    4b52:	8f 5f       	subi	r24, 0xFF	; 255
    4b54:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4b56:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_lock_mode(SLEEPMGR_IDLE);

	/* Reset DMA controller just to make sure everything is from scratch */
	DMA.CTRL = DMA_RESET_bm;
    4b58:	e0 e0       	ldi	r30, 0x00	; 0
    4b5a:	f1 e0       	ldi	r31, 0x01	; 1
    4b5c:	80 e4       	ldi	r24, 0x40	; 64
    4b5e:	80 83       	st	Z, r24
	DMA.CTRL = DMA_ENABLE_bm;
    4b60:	80 e8       	ldi	r24, 0x80	; 128
    4b62:	80 83       	st	Z, r24
}
    4b64:	0f 90       	pop	r0
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	08 95       	ret

00004b6c <dma_disable>:

/**
 * \brief Disable DMA controller
 */
void dma_disable(void)
{
    4b6c:	cf 93       	push	r28
    4b6e:	df 93       	push	r29
    4b70:	1f 92       	push	r1
    4b72:	cd b7       	in	r28, 0x3d	; 61
    4b74:	de b7       	in	r29, 0x3e	; 62
	DMA.CTRL = 0;
    4b76:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4b7a:	61 e0       	ldi	r22, 0x01	; 1
    4b7c:	80 e0       	ldi	r24, 0x00	; 0
    4b7e:	0e 94 47 6c 	call	0xd88e	; 0xd88e <sysclk_disable_module>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4b82:	80 91 68 2e 	lds	r24, 0x2E68	; 0x802e68 <sleepmgr_locks+0x1>
    4b86:	81 11       	cpse	r24, r1
    4b88:	01 c0       	rjmp	.+2      	; 0x4b8c <dma_disable+0x20>
    4b8a:	ff cf       	rjmp	.-2      	; 0x4b8a <dma_disable+0x1e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4b8c:	8f b7       	in	r24, 0x3f	; 63
    4b8e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4b90:	f8 94       	cli
	return flags;
    4b92:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    4b94:	e7 e6       	ldi	r30, 0x67	; 103
    4b96:	fe e2       	ldi	r31, 0x2E	; 46
    4b98:	81 81       	ldd	r24, Z+1	; 0x01
    4b9a:	81 50       	subi	r24, 0x01	; 1
    4b9c:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4b9e:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    4ba0:	0f 90       	pop	r0
    4ba2:	df 91       	pop	r29
    4ba4:	cf 91       	pop	r28
    4ba6:	08 95       	ret

00004ba8 <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    4ba8:	e8 2f       	mov	r30, r24
    4baa:	f0 e0       	ldi	r31, 0x00	; 0
    4bac:	ee 0f       	add	r30, r30
    4bae:	ff 1f       	adc	r31, r31
    4bb0:	ed 53       	subi	r30, 0x3D	; 61
    4bb2:	f2 4d       	sbci	r31, 0xD2	; 210
    4bb4:	60 83       	st	Z, r22
    4bb6:	71 83       	std	Z+1, r23	; 0x01
    4bb8:	08 95       	ret

00004bba <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    4bba:	1f 92       	push	r1
    4bbc:	0f 92       	push	r0
    4bbe:	0f b6       	in	r0, 0x3f	; 63
    4bc0:	0f 92       	push	r0
    4bc2:	11 24       	eor	r1, r1
    4bc4:	0b b6       	in	r0, 0x3b	; 59
    4bc6:	0f 92       	push	r0
    4bc8:	2f 93       	push	r18
    4bca:	3f 93       	push	r19
    4bcc:	4f 93       	push	r20
    4bce:	5f 93       	push	r21
    4bd0:	6f 93       	push	r22
    4bd2:	7f 93       	push	r23
    4bd4:	8f 93       	push	r24
    4bd6:	9f 93       	push	r25
    4bd8:	af 93       	push	r26
    4bda:	bf 93       	push	r27
    4bdc:	ef 93       	push	r30
    4bde:	ff 93       	push	r31
	dma_interrupt(0);
    4be0:	80 e0       	ldi	r24, 0x00	; 0
    4be2:	42 df       	rcall	.-380    	; 0x4a68 <dma_interrupt>
}
    4be4:	ff 91       	pop	r31
    4be6:	ef 91       	pop	r30
    4be8:	bf 91       	pop	r27
    4bea:	af 91       	pop	r26
    4bec:	9f 91       	pop	r25
    4bee:	8f 91       	pop	r24
    4bf0:	7f 91       	pop	r23
    4bf2:	6f 91       	pop	r22
    4bf4:	5f 91       	pop	r21
    4bf6:	4f 91       	pop	r20
    4bf8:	3f 91       	pop	r19
    4bfa:	2f 91       	pop	r18
    4bfc:	0f 90       	pop	r0
    4bfe:	0b be       	out	0x3b, r0	; 59
    4c00:	0f 90       	pop	r0
    4c02:	0f be       	out	0x3f, r0	; 63
    4c04:	0f 90       	pop	r0
    4c06:	1f 90       	pop	r1
    4c08:	18 95       	reti

00004c0a <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    4c0a:	1f 92       	push	r1
    4c0c:	0f 92       	push	r0
    4c0e:	0f b6       	in	r0, 0x3f	; 63
    4c10:	0f 92       	push	r0
    4c12:	11 24       	eor	r1, r1
    4c14:	0b b6       	in	r0, 0x3b	; 59
    4c16:	0f 92       	push	r0
    4c18:	2f 93       	push	r18
    4c1a:	3f 93       	push	r19
    4c1c:	4f 93       	push	r20
    4c1e:	5f 93       	push	r21
    4c20:	6f 93       	push	r22
    4c22:	7f 93       	push	r23
    4c24:	8f 93       	push	r24
    4c26:	9f 93       	push	r25
    4c28:	af 93       	push	r26
    4c2a:	bf 93       	push	r27
    4c2c:	ef 93       	push	r30
    4c2e:	ff 93       	push	r31
	dma_interrupt(1);
    4c30:	81 e0       	ldi	r24, 0x01	; 1
    4c32:	1a df       	rcall	.-460    	; 0x4a68 <dma_interrupt>
}
    4c34:	ff 91       	pop	r31
    4c36:	ef 91       	pop	r30
    4c38:	bf 91       	pop	r27
    4c3a:	af 91       	pop	r26
    4c3c:	9f 91       	pop	r25
    4c3e:	8f 91       	pop	r24
    4c40:	7f 91       	pop	r23
    4c42:	6f 91       	pop	r22
    4c44:	5f 91       	pop	r21
    4c46:	4f 91       	pop	r20
    4c48:	3f 91       	pop	r19
    4c4a:	2f 91       	pop	r18
    4c4c:	0f 90       	pop	r0
    4c4e:	0b be       	out	0x3b, r0	; 59
    4c50:	0f 90       	pop	r0
    4c52:	0f be       	out	0x3f, r0	; 63
    4c54:	0f 90       	pop	r0
    4c56:	1f 90       	pop	r1
    4c58:	18 95       	reti

00004c5a <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    4c5a:	1f 92       	push	r1
    4c5c:	0f 92       	push	r0
    4c5e:	0f b6       	in	r0, 0x3f	; 63
    4c60:	0f 92       	push	r0
    4c62:	11 24       	eor	r1, r1
    4c64:	0b b6       	in	r0, 0x3b	; 59
    4c66:	0f 92       	push	r0
    4c68:	2f 93       	push	r18
    4c6a:	3f 93       	push	r19
    4c6c:	4f 93       	push	r20
    4c6e:	5f 93       	push	r21
    4c70:	6f 93       	push	r22
    4c72:	7f 93       	push	r23
    4c74:	8f 93       	push	r24
    4c76:	9f 93       	push	r25
    4c78:	af 93       	push	r26
    4c7a:	bf 93       	push	r27
    4c7c:	ef 93       	push	r30
    4c7e:	ff 93       	push	r31
	dma_interrupt(2);
    4c80:	82 e0       	ldi	r24, 0x02	; 2
    4c82:	f2 de       	rcall	.-540    	; 0x4a68 <dma_interrupt>
}
    4c84:	ff 91       	pop	r31
    4c86:	ef 91       	pop	r30
    4c88:	bf 91       	pop	r27
    4c8a:	af 91       	pop	r26
    4c8c:	9f 91       	pop	r25
    4c8e:	8f 91       	pop	r24
    4c90:	7f 91       	pop	r23
    4c92:	6f 91       	pop	r22
    4c94:	5f 91       	pop	r21
    4c96:	4f 91       	pop	r20
    4c98:	3f 91       	pop	r19
    4c9a:	2f 91       	pop	r18
    4c9c:	0f 90       	pop	r0
    4c9e:	0b be       	out	0x3b, r0	; 59
    4ca0:	0f 90       	pop	r0
    4ca2:	0f be       	out	0x3f, r0	; 63
    4ca4:	0f 90       	pop	r0
    4ca6:	1f 90       	pop	r1
    4ca8:	18 95       	reti

00004caa <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    4caa:	1f 92       	push	r1
    4cac:	0f 92       	push	r0
    4cae:	0f b6       	in	r0, 0x3f	; 63
    4cb0:	0f 92       	push	r0
    4cb2:	11 24       	eor	r1, r1
    4cb4:	0b b6       	in	r0, 0x3b	; 59
    4cb6:	0f 92       	push	r0
    4cb8:	2f 93       	push	r18
    4cba:	3f 93       	push	r19
    4cbc:	4f 93       	push	r20
    4cbe:	5f 93       	push	r21
    4cc0:	6f 93       	push	r22
    4cc2:	7f 93       	push	r23
    4cc4:	8f 93       	push	r24
    4cc6:	9f 93       	push	r25
    4cc8:	af 93       	push	r26
    4cca:	bf 93       	push	r27
    4ccc:	ef 93       	push	r30
    4cce:	ff 93       	push	r31
	dma_interrupt(3);
    4cd0:	83 e0       	ldi	r24, 0x03	; 3
    4cd2:	ca de       	rcall	.-620    	; 0x4a68 <dma_interrupt>
}
    4cd4:	ff 91       	pop	r31
    4cd6:	ef 91       	pop	r30
    4cd8:	bf 91       	pop	r27
    4cda:	af 91       	pop	r26
    4cdc:	9f 91       	pop	r25
    4cde:	8f 91       	pop	r24
    4ce0:	7f 91       	pop	r23
    4ce2:	6f 91       	pop	r22
    4ce4:	5f 91       	pop	r21
    4ce6:	4f 91       	pop	r20
    4ce8:	3f 91       	pop	r19
    4cea:	2f 91       	pop	r18
    4cec:	0f 90       	pop	r0
    4cee:	0b be       	out	0x3b, r0	; 59
    4cf0:	0f 90       	pop	r0
    4cf2:	0f be       	out	0x3f, r0	; 63
    4cf4:	0f 90       	pop	r0
    4cf6:	1f 90       	pop	r1
    4cf8:	18 95       	reti

00004cfa <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    4cfa:	cf 93       	push	r28
    4cfc:	df 93       	push	r29
    4cfe:	1f 92       	push	r1
    4d00:	cd b7       	in	r28, 0x3d	; 61
    4d02:	de b7       	in	r29, 0x3e	; 62
    4d04:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    4d06:	e8 2f       	mov	r30, r24
    4d08:	f0 e0       	ldi	r31, 0x00	; 0
    4d0a:	71 96       	adiw	r30, 0x11	; 17
    4d0c:	e2 95       	swap	r30
    4d0e:	f2 95       	swap	r31
    4d10:	f0 7f       	andi	r31, 0xF0	; 240
    4d12:	fe 27       	eor	r31, r30
    4d14:	e0 7f       	andi	r30, 0xF0	; 240
    4d16:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4d18:	8f b7       	in	r24, 0x3f	; 63
    4d1a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4d1c:	f8 94       	cli
	return flags;
    4d1e:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    4d20:	19 96       	adiw	r26, 0x09	; 9
    4d22:	8c 91       	ld	r24, X
    4d24:	19 97       	sbiw	r26, 0x09	; 9
    4d26:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    4d28:	1a 96       	adiw	r26, 0x0a	; 10
    4d2a:	8c 91       	ld	r24, X
    4d2c:	1a 97       	sbiw	r26, 0x0a	; 10
    4d2e:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    4d30:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    4d32:	17 96       	adiw	r26, 0x07	; 7
    4d34:	8c 91       	ld	r24, X
    4d36:	17 97       	sbiw	r26, 0x07	; 7
    4d38:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    4d3a:	18 96       	adiw	r26, 0x08	; 8
    4d3c:	8c 91       	ld	r24, X
    4d3e:	18 97       	sbiw	r26, 0x08	; 8
    4d40:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    4d42:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    4d44:	12 96       	adiw	r26, 0x02	; 2
    4d46:	8c 91       	ld	r24, X
    4d48:	12 97       	sbiw	r26, 0x02	; 2
    4d4a:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    4d4c:	13 96       	adiw	r26, 0x03	; 3
    4d4e:	8c 91       	ld	r24, X
    4d50:	13 97       	sbiw	r26, 0x03	; 3
    4d52:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    4d54:	14 96       	adiw	r26, 0x04	; 4
    4d56:	2d 91       	ld	r18, X+
    4d58:	3c 91       	ld	r19, X
    4d5a:	15 97       	sbiw	r26, 0x05	; 5
    4d5c:	24 83       	std	Z+4, r18	; 0x04
    4d5e:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    4d60:	16 96       	adiw	r26, 0x06	; 6
    4d62:	8c 91       	ld	r24, X
    4d64:	16 97       	sbiw	r26, 0x06	; 6
    4d66:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    4d68:	11 96       	adiw	r26, 0x01	; 1
    4d6a:	8c 91       	ld	r24, X
    4d6c:	11 97       	sbiw	r26, 0x01	; 1
    4d6e:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    4d70:	8c 91       	ld	r24, X
    4d72:	8f 77       	andi	r24, 0x7F	; 127
    4d74:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4d76:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    4d78:	0f 90       	pop	r0
    4d7a:	df 91       	pop	r29
    4d7c:	cf 91       	pop	r28
    4d7e:	08 95       	ret

00004d80 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    4d80:	04 c0       	rjmp	.+8      	; 0x4d8a <__portable_avr_delay_cycles+0xa>
    4d82:	61 50       	subi	r22, 0x01	; 1
    4d84:	71 09       	sbc	r23, r1
    4d86:	81 09       	sbc	r24, r1
    4d88:	91 09       	sbc	r25, r1
    4d8a:	61 15       	cp	r22, r1
    4d8c:	71 05       	cpc	r23, r1
    4d8e:	81 05       	cpc	r24, r1
    4d90:	91 05       	cpc	r25, r1
    4d92:	b9 f7       	brne	.-18     	; 0x4d82 <__portable_avr_delay_cycles+0x2>
    4d94:	08 95       	ret

00004d96 <rtc_get_time>:
    4d96:	80 e1       	ldi	r24, 0x10	; 16
    4d98:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    4d9c:	e0 e2       	ldi	r30, 0x20	; 32
    4d9e:	f4 e0       	ldi	r31, 0x04	; 4
    4da0:	81 81       	ldd	r24, Z+1	; 0x01
    4da2:	84 fd       	sbrc	r24, 4
    4da4:	fd cf       	rjmp	.-6      	; 0x4da0 <rtc_get_time+0xa>
    4da6:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    4daa:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    4dae:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    4db2:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    4db6:	08 95       	ret

00004db8 <rtc_set_alarm>:
    4db8:	e0 e2       	ldi	r30, 0x20	; 32
    4dba:	f4 e0       	ldi	r31, 0x04	; 4
    4dbc:	24 e0       	ldi	r18, 0x04	; 4
    4dbe:	22 83       	std	Z+2, r18	; 0x02
    4dc0:	64 87       	std	Z+12, r22	; 0x0c
    4dc2:	75 87       	std	Z+13, r23	; 0x0d
    4dc4:	86 87       	std	Z+14, r24	; 0x0e
    4dc6:	97 87       	std	Z+15, r25	; 0x0f
    4dc8:	82 e0       	ldi	r24, 0x02	; 2
    4dca:	83 83       	std	Z+3, r24	; 0x03
    4dcc:	08 95       	ret

00004dce <rtc_set_callback>:
    4dce:	80 93 cb 2d 	sts	0x2DCB, r24	; 0x802dcb <rtc_data>
    4dd2:	90 93 cc 2d 	sts	0x2DCC, r25	; 0x802dcc <rtc_data+0x1>
    4dd6:	08 95       	ret

00004dd8 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    4dd8:	cf 93       	push	r28
    4dda:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    4ddc:	64 e0       	ldi	r22, 0x04	; 4
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    4de4:	c0 ef       	ldi	r28, 0xF0	; 240
    4de6:	d0 e0       	ldi	r29, 0x00	; 0
    4de8:	88 81       	ld	r24, Y
    4dea:	82 60       	ori	r24, 0x02	; 2
    4dec:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    4dee:	61 e0       	ldi	r22, 0x01	; 1
    4df0:	80 ef       	ldi	r24, 0xF0	; 240
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	0e 94 cb 74 	call	0xe996	; 0xe996 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    4df8:	88 81       	ld	r24, Y
    4dfa:	84 60       	ori	r24, 0x04	; 4
    4dfc:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    4dfe:	69 ee       	ldi	r22, 0xE9	; 233
    4e00:	73 e0       	ldi	r23, 0x03	; 3
    4e02:	80 e0       	ldi	r24, 0x00	; 0
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	bc df       	rcall	.-136    	; 0x4d80 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    4e08:	88 81       	ld	r24, Y
    4e0a:	88 61       	ori	r24, 0x18	; 24
    4e0c:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    4e0e:	e0 ef       	ldi	r30, 0xF0	; 240
    4e10:	f0 e0       	ldi	r31, 0x00	; 0
    4e12:	81 81       	ldd	r24, Z+1	; 0x01
    4e14:	83 ff       	sbrs	r24, 3
    4e16:	fd cf       	rjmp	.-6      	; 0x4e12 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    4e18:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4e1c:	e0 e2       	ldi	r30, 0x20	; 32
    4e1e:	f4 e0       	ldi	r31, 0x04	; 4
    4e20:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    4e22:	80 fd       	sbrc	r24, 0
    4e24:	fd cf       	rjmp	.-6      	; 0x4e20 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    4e26:	e0 e2       	ldi	r30, 0x20	; 32
    4e28:	f4 e0       	ldi	r31, 0x04	; 4
    4e2a:	8f ef       	ldi	r24, 0xFF	; 255
    4e2c:	9f ef       	ldi	r25, 0xFF	; 255
    4e2e:	dc 01       	movw	r26, r24
    4e30:	80 87       	std	Z+8, r24	; 0x08
    4e32:	91 87       	std	Z+9, r25	; 0x09
    4e34:	a2 87       	std	Z+10, r26	; 0x0a
    4e36:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    4e38:	14 82       	std	Z+4, r1	; 0x04
    4e3a:	15 82       	std	Z+5, r1	; 0x05
    4e3c:	16 82       	std	Z+6, r1	; 0x06
    4e3e:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4e40:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    4e42:	80 fd       	sbrc	r24, 0
    4e44:	fd cf       	rjmp	.-6      	; 0x4e40 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    4e46:	e0 e2       	ldi	r30, 0x20	; 32
    4e48:	f4 e0       	ldi	r31, 0x04	; 4
    4e4a:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    4e4c:	81 e0       	ldi	r24, 0x01	; 1
    4e4e:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4e50:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    4e52:	80 fd       	sbrc	r24, 0
    4e54:	fd cf       	rjmp	.-6      	; 0x4e50 <rtc_init+0x78>
}
    4e56:	df 91       	pop	r29
    4e58:	cf 91       	pop	r28
    4e5a:	08 95       	ret

00004e5c <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    4e5c:	1f 92       	push	r1
    4e5e:	0f 92       	push	r0
    4e60:	0f b6       	in	r0, 0x3f	; 63
    4e62:	0f 92       	push	r0
    4e64:	11 24       	eor	r1, r1
    4e66:	0b b6       	in	r0, 0x3b	; 59
    4e68:	0f 92       	push	r0
    4e6a:	2f 93       	push	r18
    4e6c:	3f 93       	push	r19
    4e6e:	4f 93       	push	r20
    4e70:	5f 93       	push	r21
    4e72:	6f 93       	push	r22
    4e74:	7f 93       	push	r23
    4e76:	8f 93       	push	r24
    4e78:	9f 93       	push	r25
    4e7a:	af 93       	push	r26
    4e7c:	bf 93       	push	r27
    4e7e:	cf 93       	push	r28
    4e80:	df 93       	push	r29
    4e82:	ef 93       	push	r30
    4e84:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    4e86:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    4e8a:	c0 91 cb 2d 	lds	r28, 0x2DCB	; 0x802dcb <rtc_data>
    4e8e:	d0 91 cc 2d 	lds	r29, 0x2DCC	; 0x802dcc <rtc_data+0x1>
    4e92:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    4e94:	19 f0       	breq	.+6      	; 0x4e9c <__vector_11+0x40>
    4e96:	7f df       	rcall	.-258    	; 0x4d96 <rtc_get_time>
    4e98:	fe 01       	movw	r30, r28
}
    4e9a:	19 95       	eicall
    4e9c:	ff 91       	pop	r31
    4e9e:	ef 91       	pop	r30
    4ea0:	df 91       	pop	r29
    4ea2:	cf 91       	pop	r28
    4ea4:	bf 91       	pop	r27
    4ea6:	af 91       	pop	r26
    4ea8:	9f 91       	pop	r25
    4eaa:	8f 91       	pop	r24
    4eac:	7f 91       	pop	r23
    4eae:	6f 91       	pop	r22
    4eb0:	5f 91       	pop	r21
    4eb2:	4f 91       	pop	r20
    4eb4:	3f 91       	pop	r19
    4eb6:	2f 91       	pop	r18
    4eb8:	0f 90       	pop	r0
    4eba:	0b be       	out	0x3b, r0	; 59
    4ebc:	0f 90       	pop	r0
    4ebe:	0f be       	out	0x3f, r0	; 63
    4ec0:	0f 90       	pop	r0
    4ec2:	1f 90       	pop	r1
    4ec4:	18 95       	reti

00004ec6 <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* SINE LUT */
	uint16_t left_x, rght_x, left_y, rght_y;
	rght_x = left_x = phase >> 4;
    4ec6:	fc 01       	movw	r30, r24
    4ec8:	f2 95       	swap	r31
    4eca:	e2 95       	swap	r30
    4ecc:	ef 70       	andi	r30, 0x0F	; 15
    4ece:	ef 27       	eor	r30, r31
    4ed0:	ff 70       	andi	r31, 0x0F	; 15
    4ed2:	ef 27       	eor	r30, r31
	if (++rght_x >= PM_SINE_COUNT) {
    4ed4:	9f 01       	movw	r18, r30
    4ed6:	2f 5f       	subi	r18, 0xFF	; 255
    4ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    4eda:	21 15       	cp	r18, r1
    4edc:	40 e1       	ldi	r20, 0x10	; 16
    4ede:	34 07       	cpc	r19, r20
    4ee0:	08 f0       	brcs	.+2      	; 0x4ee4 <get_interpolated_sine+0x1e>
		rght_x -= PM_SINE_COUNT;
    4ee2:	30 51       	subi	r19, 0x10	; 16
	}
	left_y = PGM_READ_WORD(&(PM_SINE[left_x]));
    4ee4:	ee 0f       	add	r30, r30
    4ee6:	ff 1f       	adc	r31, r31
    4ee8:	e4 54       	subi	r30, 0x44	; 68
    4eea:	f2 4f       	sbci	r31, 0xF2	; 242
    4eec:	45 91       	lpm	r20, Z+
    4eee:	54 91       	lpm	r21, Z
	rght_y = PGM_READ_WORD(&(PM_SINE[rght_x]));
    4ef0:	f9 01       	movw	r30, r18
    4ef2:	ee 0f       	add	r30, r30
    4ef4:	ff 1f       	adc	r31, r31
    4ef6:	e4 54       	subi	r30, 0x44	; 68
    4ef8:	f2 4f       	sbci	r31, 0xF2	; 242
    4efa:	25 91       	lpm	r18, Z+
    4efc:	34 91       	lpm	r19, Z

	/* INTERPOLATION LUT */
	uint16_t idx_y	= (uint16_t)((uint32_t)PM_SINE_MAX_STEP + rght_y - left_y);		// PM_SINE_MAX_STEP = +/-50
	uint16_t idx	= (idx_y << 4) | (phase & 0x0f);
	return left_y + (int8_t)PGM_READ_BYTE(&(PM_SINE_IP[idx]));
    4efe:	f9 01       	movw	r30, r18
    4f00:	f4 96       	adiw	r30, 0x34	; 52
    4f02:	e4 1b       	sub	r30, r20
    4f04:	f5 0b       	sbc	r31, r21
    4f06:	e2 95       	swap	r30
    4f08:	f2 95       	swap	r31
    4f0a:	f0 7f       	andi	r31, 0xF0	; 240
    4f0c:	fe 27       	eor	r31, r30
    4f0e:	e0 7f       	andi	r30, 0xF0	; 240
    4f10:	fe 27       	eor	r31, r30
    4f12:	8f 70       	andi	r24, 0x0F	; 15
    4f14:	99 27       	eor	r25, r25
    4f16:	e8 2b       	or	r30, r24
    4f18:	f9 2b       	or	r31, r25
    4f1a:	e4 5c       	subi	r30, 0xC4	; 196
    4f1c:	f8 4f       	sbci	r31, 0xF8	; 248
    4f1e:	e4 91       	lpm	r30, Z
}
    4f20:	ca 01       	movw	r24, r20
    4f22:	8e 0f       	add	r24, r30
    4f24:	91 1d       	adc	r25, r1
    4f26:	e7 fd       	sbrc	r30, 7
    4f28:	9a 95       	dec	r25
    4f2a:	08 95       	ret

00004f2c <printHelp>:

void printHelp(void)
{
	static bool s_again = false;

	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HDR_1);
    4f2c:	82 e7       	ldi	r24, 0x72	; 114
    4f2e:	90 e3       	ldi	r25, 0x30	; 48
    4f30:	9f 93       	push	r25
    4f32:	8f 93       	push	r24
    4f34:	1f 92       	push	r1
    4f36:	80 e4       	ldi	r24, 0x40	; 64
    4f38:	8f 93       	push	r24
    4f3a:	8f e3       	ldi	r24, 0x3F	; 63
    4f3c:	95 e2       	ldi	r25, 0x25	; 37
    4f3e:	9f 93       	push	r25
    4f40:	8f 93       	push	r24
    4f42:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4f46:	81 34       	cpi	r24, 0x41	; 65
    4f48:	91 05       	cpc	r25, r1
    4f4a:	10 f0       	brcs	.+4      	; 0x4f50 <printHelp+0x24>
    4f4c:	80 e4       	ldi	r24, 0x40	; 64
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	40 e0       	ldi	r20, 0x00	; 0
    4f52:	68 2f       	mov	r22, r24
    4f54:	8f e3       	ldi	r24, 0x3F	; 63
    4f56:	95 e2       	ldi	r25, 0x25	; 37
    4f58:	3f d8       	rcall	.-3970   	; 0x3fd8 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HDR_2);
    4f5a:	83 e5       	ldi	r24, 0x53	; 83
    4f5c:	90 e3       	ldi	r25, 0x30	; 48
    4f5e:	9f 93       	push	r25
    4f60:	8f 93       	push	r24
    4f62:	1f 92       	push	r1
    4f64:	80 e4       	ldi	r24, 0x40	; 64
    4f66:	8f 93       	push	r24
    4f68:	8f e3       	ldi	r24, 0x3F	; 63
    4f6a:	95 e2       	ldi	r25, 0x25	; 37
    4f6c:	9f 93       	push	r25
    4f6e:	8f 93       	push	r24
    4f70:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4f74:	81 34       	cpi	r24, 0x41	; 65
    4f76:	91 05       	cpc	r25, r1
    4f78:	10 f0       	brcs	.+4      	; 0x4f7e <printHelp+0x52>
    4f7a:	80 e4       	ldi	r24, 0x40	; 64
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	40 e0       	ldi	r20, 0x00	; 0
    4f80:	68 2f       	mov	r22, r24
    4f82:	8f e3       	ldi	r24, 0x3F	; 63
    4f84:	95 e2       	ldi	r25, 0x25	; 37
    4f86:	28 d8       	rcall	.-4016   	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_ADC_1);
    4f88:	81 e3       	ldi	r24, 0x31	; 49
    4f8a:	90 e3       	ldi	r25, 0x30	; 48
    4f8c:	9f 93       	push	r25
    4f8e:	8f 93       	push	r24
    4f90:	1f 92       	push	r1
    4f92:	80 e4       	ldi	r24, 0x40	; 64
    4f94:	8f 93       	push	r24
    4f96:	8f e3       	ldi	r24, 0x3F	; 63
    4f98:	95 e2       	ldi	r25, 0x25	; 37
    4f9a:	9f 93       	push	r25
    4f9c:	8f 93       	push	r24
    4f9e:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4fa2:	81 34       	cpi	r24, 0x41	; 65
    4fa4:	91 05       	cpc	r25, r1
    4fa6:	10 f0       	brcs	.+4      	; 0x4fac <printHelp+0x80>
    4fa8:	80 e4       	ldi	r24, 0x40	; 64
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	40 e0       	ldi	r20, 0x00	; 0
    4fae:	68 2f       	mov	r22, r24
    4fb0:	8f e3       	ldi	r24, 0x3F	; 63
    4fb2:	95 e2       	ldi	r25, 0x25	; 37
    4fb4:	11 d8       	rcall	.-4062   	; 0x3fd8 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_ADC_2);
    4fb6:	86 e1       	ldi	r24, 0x16	; 22
    4fb8:	90 e3       	ldi	r25, 0x30	; 48
    4fba:	9f 93       	push	r25
    4fbc:	8f 93       	push	r24
    4fbe:	1f 92       	push	r1
    4fc0:	80 e4       	ldi	r24, 0x40	; 64
    4fc2:	8f 93       	push	r24
    4fc4:	8f e3       	ldi	r24, 0x3F	; 63
    4fc6:	95 e2       	ldi	r25, 0x25	; 37
    4fc8:	9f 93       	push	r25
    4fca:	8f 93       	push	r24
    4fcc:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4fd0:	81 34       	cpi	r24, 0x41	; 65
    4fd2:	91 05       	cpc	r25, r1
    4fd4:	10 f0       	brcs	.+4      	; 0x4fda <printHelp+0xae>
    4fd6:	80 e4       	ldi	r24, 0x40	; 64
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	40 e0       	ldi	r20, 0x00	; 0
    4fdc:	68 2f       	mov	r22, r24
    4fde:	8f e3       	ldi	r24, 0x3F	; 63
    4fe0:	95 e2       	ldi	r25, 0x25	; 37
    4fe2:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_AT_1);
    4fe6:	86 ef       	ldi	r24, 0xF6	; 246
    4fe8:	9f e2       	ldi	r25, 0x2F	; 47
    4fea:	9f 93       	push	r25
    4fec:	8f 93       	push	r24
    4fee:	1f 92       	push	r1
    4ff0:	80 e4       	ldi	r24, 0x40	; 64
    4ff2:	8f 93       	push	r24
    4ff4:	8f e3       	ldi	r24, 0x3F	; 63
    4ff6:	95 e2       	ldi	r25, 0x25	; 37
    4ff8:	9f 93       	push	r25
    4ffa:	8f 93       	push	r24
    4ffc:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5000:	81 34       	cpi	r24, 0x41	; 65
    5002:	91 05       	cpc	r25, r1
    5004:	10 f0       	brcs	.+4      	; 0x500a <printHelp+0xde>
    5006:	80 e4       	ldi	r24, 0x40	; 64
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	40 e0       	ldi	r20, 0x00	; 0
    500c:	68 2f       	mov	r22, r24
    500e:	8f e3       	ldi	r24, 0x3F	; 63
    5010:	95 e2       	ldi	r25, 0x25	; 37
    5012:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BIAS_1);
    5016:	8b ed       	ldi	r24, 0xDB	; 219
    5018:	9f e2       	ldi	r25, 0x2F	; 47
    501a:	9f 93       	push	r25
    501c:	8f 93       	push	r24
    501e:	1f 92       	push	r1
    5020:	80 e4       	ldi	r24, 0x40	; 64
    5022:	8f 93       	push	r24
    5024:	8f e3       	ldi	r24, 0x3F	; 63
    5026:	95 e2       	ldi	r25, 0x25	; 37
    5028:	9f 93       	push	r25
    502a:	8f 93       	push	r24
    502c:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5030:	2d b7       	in	r18, 0x3d	; 61
    5032:	3e b7       	in	r19, 0x3e	; 62
    5034:	2c 5d       	subi	r18, 0xDC	; 220
    5036:	3f 4f       	sbci	r19, 0xFF	; 255
    5038:	2d bf       	out	0x3d, r18	; 61
    503a:	3e bf       	out	0x3e, r19	; 62
    503c:	81 34       	cpi	r24, 0x41	; 65
    503e:	91 05       	cpc	r25, r1
    5040:	10 f0       	brcs	.+4      	; 0x5046 <printHelp+0x11a>
    5042:	80 e4       	ldi	r24, 0x40	; 64
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	40 e0       	ldi	r20, 0x00	; 0
    5048:	68 2f       	mov	r22, r24
    504a:	8f e3       	ldi	r24, 0x3F	; 63
    504c:	95 e2       	ldi	r25, 0x25	; 37
    504e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BIAS_2);
    5052:	88 ec       	ldi	r24, 0xC8	; 200
    5054:	9f e2       	ldi	r25, 0x2F	; 47
    5056:	9f 93       	push	r25
    5058:	8f 93       	push	r24
    505a:	1f 92       	push	r1
    505c:	80 e4       	ldi	r24, 0x40	; 64
    505e:	8f 93       	push	r24
    5060:	8f e3       	ldi	r24, 0x3F	; 63
    5062:	95 e2       	ldi	r25, 0x25	; 37
    5064:	9f 93       	push	r25
    5066:	8f 93       	push	r24
    5068:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    506c:	81 34       	cpi	r24, 0x41	; 65
    506e:	91 05       	cpc	r25, r1
    5070:	10 f0       	brcs	.+4      	; 0x5076 <printHelp+0x14a>
    5072:	80 e4       	ldi	r24, 0x40	; 64
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	40 e0       	ldi	r20, 0x00	; 0
    5078:	68 2f       	mov	r22, r24
    507a:	8f e3       	ldi	r24, 0x3F	; 63
    507c:	95 e2       	ldi	r25, 0x25	; 37
    507e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BL_1);
    5082:	8c ea       	ldi	r24, 0xAC	; 172
    5084:	9f e2       	ldi	r25, 0x2F	; 47
    5086:	9f 93       	push	r25
    5088:	8f 93       	push	r24
    508a:	1f 92       	push	r1
    508c:	80 e4       	ldi	r24, 0x40	; 64
    508e:	8f 93       	push	r24
    5090:	8f e3       	ldi	r24, 0x3F	; 63
    5092:	95 e2       	ldi	r25, 0x25	; 37
    5094:	9f 93       	push	r25
    5096:	8f 93       	push	r24
    5098:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    509c:	81 34       	cpi	r24, 0x41	; 65
    509e:	91 05       	cpc	r25, r1
    50a0:	10 f0       	brcs	.+4      	; 0x50a6 <printHelp+0x17a>
    50a2:	80 e4       	ldi	r24, 0x40	; 64
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	40 e0       	ldi	r20, 0x00	; 0
    50a8:	68 2f       	mov	r22, r24
    50aa:	8f e3       	ldi	r24, 0x3F	; 63
    50ac:	95 e2       	ldi	r25, 0x25	; 37
    50ae:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BL_2);
    50b2:	84 e9       	ldi	r24, 0x94	; 148
    50b4:	9f e2       	ldi	r25, 0x2F	; 47
    50b6:	9f 93       	push	r25
    50b8:	8f 93       	push	r24
    50ba:	1f 92       	push	r1
    50bc:	80 e4       	ldi	r24, 0x40	; 64
    50be:	8f 93       	push	r24
    50c0:	8f e3       	ldi	r24, 0x3F	; 63
    50c2:	95 e2       	ldi	r25, 0x25	; 37
    50c4:	9f 93       	push	r25
    50c6:	8f 93       	push	r24
    50c8:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    50cc:	81 34       	cpi	r24, 0x41	; 65
    50ce:	91 05       	cpc	r25, r1
    50d0:	10 f0       	brcs	.+4      	; 0x50d6 <printHelp+0x1aa>
    50d2:	80 e4       	ldi	r24, 0x40	; 64
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	40 e0       	ldi	r20, 0x00	; 0
    50d8:	68 2f       	mov	r22, r24
    50da:	8f e3       	ldi	r24, 0x3F	; 63
    50dc:	95 e2       	ldi	r25, 0x25	; 37
    50de:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DAC_1);
    50e2:	8b e7       	ldi	r24, 0x7B	; 123
    50e4:	9f e2       	ldi	r25, 0x2F	; 47
    50e6:	9f 93       	push	r25
    50e8:	8f 93       	push	r24
    50ea:	1f 92       	push	r1
    50ec:	80 e4       	ldi	r24, 0x40	; 64
    50ee:	8f 93       	push	r24
    50f0:	8f e3       	ldi	r24, 0x3F	; 63
    50f2:	95 e2       	ldi	r25, 0x25	; 37
    50f4:	9f 93       	push	r25
    50f6:	8f 93       	push	r24
    50f8:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    50fc:	81 34       	cpi	r24, 0x41	; 65
    50fe:	91 05       	cpc	r25, r1
    5100:	10 f0       	brcs	.+4      	; 0x5106 <printHelp+0x1da>
    5102:	80 e4       	ldi	r24, 0x40	; 64
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	40 e0       	ldi	r20, 0x00	; 0
    5108:	68 2f       	mov	r22, r24
    510a:	8f e3       	ldi	r24, 0x3F	; 63
    510c:	95 e2       	ldi	r25, 0x25	; 37
    510e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DAC_2);
    5112:	89 e6       	ldi	r24, 0x69	; 105
    5114:	9f e2       	ldi	r25, 0x2F	; 47
    5116:	9f 93       	push	r25
    5118:	8f 93       	push	r24
    511a:	1f 92       	push	r1
    511c:	80 e4       	ldi	r24, 0x40	; 64
    511e:	8f 93       	push	r24
    5120:	8f e3       	ldi	r24, 0x3F	; 63
    5122:	95 e2       	ldi	r25, 0x25	; 37
    5124:	9f 93       	push	r25
    5126:	8f 93       	push	r24
    5128:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    512c:	81 34       	cpi	r24, 0x41	; 65
    512e:	91 05       	cpc	r25, r1
    5130:	10 f0       	brcs	.+4      	; 0x5136 <printHelp+0x20a>
    5132:	80 e4       	ldi	r24, 0x40	; 64
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	40 e0       	ldi	r20, 0x00	; 0
    5138:	68 2f       	mov	r22, r24
    513a:	8f e3       	ldi	r24, 0x3F	; 63
    513c:	95 e2       	ldi	r25, 0x25	; 37
    513e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_1);
    5142:	87 e4       	ldi	r24, 0x47	; 71
    5144:	9f e2       	ldi	r25, 0x2F	; 47
    5146:	9f 93       	push	r25
    5148:	8f 93       	push	r24
    514a:	1f 92       	push	r1
    514c:	80 e4       	ldi	r24, 0x40	; 64
    514e:	8f 93       	push	r24
    5150:	8f e3       	ldi	r24, 0x3F	; 63
    5152:	95 e2       	ldi	r25, 0x25	; 37
    5154:	9f 93       	push	r25
    5156:	8f 93       	push	r24
    5158:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    515c:	2d b7       	in	r18, 0x3d	; 61
    515e:	3e b7       	in	r19, 0x3e	; 62
    5160:	2c 5d       	subi	r18, 0xDC	; 220
    5162:	3f 4f       	sbci	r19, 0xFF	; 255
    5164:	2d bf       	out	0x3d, r18	; 61
    5166:	3e bf       	out	0x3e, r19	; 62
    5168:	81 34       	cpi	r24, 0x41	; 65
    516a:	91 05       	cpc	r25, r1
    516c:	10 f0       	brcs	.+4      	; 0x5172 <printHelp+0x246>
    516e:	80 e4       	ldi	r24, 0x40	; 64
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	40 e0       	ldi	r20, 0x00	; 0
    5174:	68 2f       	mov	r22, r24
    5176:	8f e3       	ldi	r24, 0x3F	; 63
    5178:	95 e2       	ldi	r25, 0x25	; 37
    517a:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_2);
    517e:	89 e3       	ldi	r24, 0x39	; 57
    5180:	9f e2       	ldi	r25, 0x2F	; 47
    5182:	9f 93       	push	r25
    5184:	8f 93       	push	r24
    5186:	1f 92       	push	r1
    5188:	80 e4       	ldi	r24, 0x40	; 64
    518a:	8f 93       	push	r24
    518c:	8f e3       	ldi	r24, 0x3F	; 63
    518e:	95 e2       	ldi	r25, 0x25	; 37
    5190:	9f 93       	push	r25
    5192:	8f 93       	push	r24
    5194:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5198:	81 34       	cpi	r24, 0x41	; 65
    519a:	91 05       	cpc	r25, r1
    519c:	10 f0       	brcs	.+4      	; 0x51a2 <printHelp+0x276>
    519e:	80 e4       	ldi	r24, 0x40	; 64
    51a0:	90 e0       	ldi	r25, 0x00	; 0
    51a2:	40 e0       	ldi	r20, 0x00	; 0
    51a4:	68 2f       	mov	r22, r24
    51a6:	8f e3       	ldi	r24, 0x3F	; 63
    51a8:	95 e2       	ldi	r25, 0x25	; 37
    51aa:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_3);
    51ae:	84 e1       	ldi	r24, 0x14	; 20
    51b0:	9f e2       	ldi	r25, 0x2F	; 47
    51b2:	9f 93       	push	r25
    51b4:	8f 93       	push	r24
    51b6:	1f 92       	push	r1
    51b8:	80 e4       	ldi	r24, 0x40	; 64
    51ba:	8f 93       	push	r24
    51bc:	8f e3       	ldi	r24, 0x3F	; 63
    51be:	95 e2       	ldi	r25, 0x25	; 37
    51c0:	9f 93       	push	r25
    51c2:	8f 93       	push	r24
    51c4:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    51c8:	81 34       	cpi	r24, 0x41	; 65
    51ca:	91 05       	cpc	r25, r1
    51cc:	10 f0       	brcs	.+4      	; 0x51d2 <printHelp+0x2a6>
    51ce:	80 e4       	ldi	r24, 0x40	; 64
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	40 e0       	ldi	r20, 0x00	; 0
    51d4:	68 2f       	mov	r22, r24
    51d6:	8f e3       	ldi	r24, 0x3F	; 63
    51d8:	95 e2       	ldi	r25, 0x25	; 37
    51da:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_EB_1);
    51de:	84 ef       	ldi	r24, 0xF4	; 244
    51e0:	9e e2       	ldi	r25, 0x2E	; 46
    51e2:	9f 93       	push	r25
    51e4:	8f 93       	push	r24
    51e6:	1f 92       	push	r1
    51e8:	80 e4       	ldi	r24, 0x40	; 64
    51ea:	8f 93       	push	r24
    51ec:	8f e3       	ldi	r24, 0x3F	; 63
    51ee:	95 e2       	ldi	r25, 0x25	; 37
    51f0:	9f 93       	push	r25
    51f2:	8f 93       	push	r24
    51f4:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    51f8:	81 34       	cpi	r24, 0x41	; 65
    51fa:	91 05       	cpc	r25, r1
    51fc:	10 f0       	brcs	.+4      	; 0x5202 <printHelp+0x2d6>
    51fe:	80 e4       	ldi	r24, 0x40	; 64
    5200:	90 e0       	ldi	r25, 0x00	; 0
    5202:	40 e0       	ldi	r20, 0x00	; 0
    5204:	68 2f       	mov	r22, r24
    5206:	8f e3       	ldi	r24, 0x3F	; 63
    5208:	95 e2       	ldi	r25, 0x25	; 37
    520a:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HELP_1);
    520e:	87 ed       	ldi	r24, 0xD7	; 215
    5210:	9e e2       	ldi	r25, 0x2E	; 46
    5212:	9f 93       	push	r25
    5214:	8f 93       	push	r24
    5216:	1f 92       	push	r1
    5218:	80 e4       	ldi	r24, 0x40	; 64
    521a:	8f 93       	push	r24
    521c:	8f e3       	ldi	r24, 0x3F	; 63
    521e:	95 e2       	ldi	r25, 0x25	; 37
    5220:	9f 93       	push	r25
    5222:	8f 93       	push	r24
    5224:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5228:	81 34       	cpi	r24, 0x41	; 65
    522a:	91 05       	cpc	r25, r1
    522c:	10 f0       	brcs	.+4      	; 0x5232 <printHelp+0x306>
    522e:	80 e4       	ldi	r24, 0x40	; 64
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	40 e0       	ldi	r20, 0x00	; 0
    5234:	68 2f       	mov	r22, r24
    5236:	8f e3       	ldi	r24, 0x3F	; 63
    5238:	95 e2       	ldi	r25, 0x25	; 37
    523a:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HELP_2);
    523e:	88 eb       	ldi	r24, 0xB8	; 184
    5240:	9e e2       	ldi	r25, 0x2E	; 46
    5242:	9f 93       	push	r25
    5244:	8f 93       	push	r24
    5246:	1f 92       	push	r1
    5248:	80 e4       	ldi	r24, 0x40	; 64
    524a:	8f 93       	push	r24
    524c:	8f e3       	ldi	r24, 0x3F	; 63
    524e:	95 e2       	ldi	r25, 0x25	; 37
    5250:	9f 93       	push	r25
    5252:	8f 93       	push	r24
    5254:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5258:	81 34       	cpi	r24, 0x41	; 65
    525a:	91 05       	cpc	r25, r1
    525c:	10 f0       	brcs	.+4      	; 0x5262 <printHelp+0x336>
    525e:	80 e4       	ldi	r24, 0x40	; 64
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	40 e0       	ldi	r20, 0x00	; 0
    5264:	68 2f       	mov	r22, r24
    5266:	8f e3       	ldi	r24, 0x3F	; 63
    5268:	95 e2       	ldi	r25, 0x25	; 37
    526a:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_INFO_1);
    526e:	81 ea       	ldi	r24, 0xA1	; 161
    5270:	9e e2       	ldi	r25, 0x2E	; 46
    5272:	9f 93       	push	r25
    5274:	8f 93       	push	r24
    5276:	1f 92       	push	r1
    5278:	80 e4       	ldi	r24, 0x40	; 64
    527a:	8f 93       	push	r24
    527c:	8f e3       	ldi	r24, 0x3F	; 63
    527e:	95 e2       	ldi	r25, 0x25	; 37
    5280:	9f 93       	push	r25
    5282:	8f 93       	push	r24
    5284:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5288:	2d b7       	in	r18, 0x3d	; 61
    528a:	3e b7       	in	r19, 0x3e	; 62
    528c:	2c 5d       	subi	r18, 0xDC	; 220
    528e:	3f 4f       	sbci	r19, 0xFF	; 255
    5290:	2d bf       	out	0x3d, r18	; 61
    5292:	3e bf       	out	0x3e, r19	; 62
    5294:	81 34       	cpi	r24, 0x41	; 65
    5296:	91 05       	cpc	r25, r1
    5298:	10 f0       	brcs	.+4      	; 0x529e <printHelp+0x372>
    529a:	80 e4       	ldi	r24, 0x40	; 64
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	40 e0       	ldi	r20, 0x00	; 0
    52a0:	68 2f       	mov	r22, r24
    52a2:	8f e3       	ldi	r24, 0x3F	; 63
    52a4:	95 e2       	ldi	r25, 0x25	; 37
    52a6:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_KB_1);
    52aa:	83 e8       	ldi	r24, 0x83	; 131
    52ac:	9e e2       	ldi	r25, 0x2E	; 46
    52ae:	9f 93       	push	r25
    52b0:	8f 93       	push	r24
    52b2:	1f 92       	push	r1
    52b4:	80 e4       	ldi	r24, 0x40	; 64
    52b6:	8f 93       	push	r24
    52b8:	8f e3       	ldi	r24, 0x3F	; 63
    52ba:	95 e2       	ldi	r25, 0x25	; 37
    52bc:	9f 93       	push	r25
    52be:	8f 93       	push	r24
    52c0:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    52c4:	81 34       	cpi	r24, 0x41	; 65
    52c6:	91 05       	cpc	r25, r1
    52c8:	10 f0       	brcs	.+4      	; 0x52ce <printHelp+0x3a2>
    52ca:	80 e4       	ldi	r24, 0x40	; 64
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	40 e0       	ldi	r20, 0x00	; 0
    52d0:	68 2f       	mov	r22, r24
    52d2:	8f e3       	ldi	r24, 0x3F	; 63
    52d4:	95 e2       	ldi	r25, 0x25	; 37
    52d6:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_PT_1);
    52da:	8a e6       	ldi	r24, 0x6A	; 106
    52dc:	9e e2       	ldi	r25, 0x2E	; 46
    52de:	9f 93       	push	r25
    52e0:	8f 93       	push	r24
    52e2:	1f 92       	push	r1
    52e4:	80 e4       	ldi	r24, 0x40	; 64
    52e6:	8f 93       	push	r24
    52e8:	8f e3       	ldi	r24, 0x3F	; 63
    52ea:	95 e2       	ldi	r25, 0x25	; 37
    52ec:	9f 93       	push	r25
    52ee:	8f 93       	push	r24
    52f0:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    52f4:	81 34       	cpi	r24, 0x41	; 65
    52f6:	91 05       	cpc	r25, r1
    52f8:	10 f0       	brcs	.+4      	; 0x52fe <printHelp+0x3d2>
    52fa:	80 e4       	ldi	r24, 0x40	; 64
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	40 e0       	ldi	r20, 0x00	; 0
    5300:	68 2f       	mov	r22, r24
    5302:	8f e3       	ldi	r24, 0x3F	; 63
    5304:	95 e2       	ldi	r25, 0x25	; 37
    5306:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_PT_2);
    530a:	8b e4       	ldi	r24, 0x4B	; 75
    530c:	9e e2       	ldi	r25, 0x2E	; 46
    530e:	9f 93       	push	r25
    5310:	8f 93       	push	r24
    5312:	1f 92       	push	r1
    5314:	80 e4       	ldi	r24, 0x40	; 64
    5316:	8f 93       	push	r24
    5318:	8f e3       	ldi	r24, 0x3F	; 63
    531a:	95 e2       	ldi	r25, 0x25	; 37
    531c:	9f 93       	push	r25
    531e:	8f 93       	push	r24
    5320:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5324:	81 34       	cpi	r24, 0x41	; 65
    5326:	91 05       	cpc	r25, r1
    5328:	10 f0       	brcs	.+4      	; 0x532e <printHelp+0x402>
    532a:	80 e4       	ldi	r24, 0x40	; 64
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	40 e0       	ldi	r20, 0x00	; 0
    5330:	68 2f       	mov	r22, r24
    5332:	8f e3       	ldi	r24, 0x3F	; 63
    5334:	95 e2       	ldi	r25, 0x25	; 37
    5336:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_RESET_1);
    533a:	83 e3       	ldi	r24, 0x33	; 51
    533c:	9e e2       	ldi	r25, 0x2E	; 46
    533e:	9f 93       	push	r25
    5340:	8f 93       	push	r24
    5342:	1f 92       	push	r1
    5344:	80 e4       	ldi	r24, 0x40	; 64
    5346:	8f 93       	push	r24
    5348:	8f e3       	ldi	r24, 0x3F	; 63
    534a:	95 e2       	ldi	r25, 0x25	; 37
    534c:	9f 93       	push	r25
    534e:	8f 93       	push	r24
    5350:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5354:	81 34       	cpi	r24, 0x41	; 65
    5356:	91 05       	cpc	r25, r1
    5358:	10 f0       	brcs	.+4      	; 0x535e <printHelp+0x432>
    535a:	80 e4       	ldi	r24, 0x40	; 64
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	40 e0       	ldi	r20, 0x00	; 0
    5360:	68 2f       	mov	r22, r24
    5362:	8f e3       	ldi	r24, 0x3F	; 63
    5364:	95 e2       	ldi	r25, 0x25	; 37
    5366:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_NewLine);
    536a:	80 e3       	ldi	r24, 0x30	; 48
    536c:	9e e2       	ldi	r25, 0x2E	; 46
    536e:	9f 93       	push	r25
    5370:	8f 93       	push	r24
    5372:	1f 92       	push	r1
    5374:	80 e4       	ldi	r24, 0x40	; 64
    5376:	8f 93       	push	r24
    5378:	8f e3       	ldi	r24, 0x3F	; 63
    537a:	95 e2       	ldi	r25, 0x25	; 37
    537c:	9f 93       	push	r25
    537e:	8f 93       	push	r24
    5380:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5384:	81 34       	cpi	r24, 0x41	; 65
    5386:	91 05       	cpc	r25, r1
    5388:	10 f0       	brcs	.+4      	; 0x538e <printHelp+0x462>
    538a:	80 e4       	ldi	r24, 0x40	; 64
    538c:	90 e0       	ldi	r25, 0x00	; 0
    538e:	40 e0       	ldi	r20, 0x00	; 0
    5390:	68 2f       	mov	r22, r24
    5392:	8f e3       	ldi	r24, 0x3F	; 63
    5394:	95 e2       	ldi	r25, 0x25	; 37
    5396:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	if (!s_again) {
    539a:	8d b7       	in	r24, 0x3d	; 61
    539c:	9e b7       	in	r25, 0x3e	; 62
    539e:	4e 96       	adiw	r24, 0x1e	; 30
    53a0:	8d bf       	out	0x3d, r24	; 61
    53a2:	9e bf       	out	0x3e, r25	; 62
    53a4:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <s_again.7690>
    53a8:	81 11       	cpse	r24, r1
    53aa:	21 c0       	rjmp	.+66     	; 0x53ee <printHelp+0x4c2>
		s_again = true;
    53ac:	81 e0       	ldi	r24, 0x01	; 1
    53ae:	80 93 d4 21 	sts	0x21D4, r24	; 0x8021d4 <s_again.7690>
		len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_CmdLine);
    53b2:	8b e2       	ldi	r24, 0x2B	; 43
    53b4:	9e e2       	ldi	r25, 0x2E	; 46
    53b6:	9f 93       	push	r25
    53b8:	8f 93       	push	r24
    53ba:	1f 92       	push	r1
    53bc:	80 e4       	ldi	r24, 0x40	; 64
    53be:	8f 93       	push	r24
    53c0:	8f e3       	ldi	r24, 0x3F	; 63
    53c2:	95 e2       	ldi	r25, 0x25	; 37
    53c4:	9f 93       	push	r25
    53c6:	8f 93       	push	r24
    53c8:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
		udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    53cc:	81 34       	cpi	r24, 0x41	; 65
    53ce:	91 05       	cpc	r25, r1
    53d0:	10 f0       	brcs	.+4      	; 0x53d6 <printHelp+0x4aa>
    53d2:	80 e4       	ldi	r24, 0x40	; 64
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	40 e0       	ldi	r20, 0x00	; 0
    53d8:	68 2f       	mov	r22, r24
    53da:	8f e3       	ldi	r24, 0x3F	; 63
    53dc:	95 e2       	ldi	r25, 0x25	; 37
    53de:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    53e2:	0f 90       	pop	r0
    53e4:	0f 90       	pop	r0
    53e6:	0f 90       	pop	r0
    53e8:	0f 90       	pop	r0
    53ea:	0f 90       	pop	r0
    53ec:	0f 90       	pop	r0
    53ee:	08 95       	ret

000053f0 <interpreter_doProcess>:
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
}


void interpreter_doProcess(char rx_buf[], iram_size_t rx_len)
{
    53f0:	df 92       	push	r13
    53f2:	ef 92       	push	r14
    53f4:	ff 92       	push	r15
    53f6:	0f 93       	push	r16
    53f8:	1f 93       	push	r17
    53fa:	cf 93       	push	r28
    53fc:	df 93       	push	r29
    53fe:	cd b7       	in	r28, 0x3d	; 61
    5400:	de b7       	in	r29, 0x3e	; 62
    5402:	2c 97       	sbiw	r28, 0x0c	; 12
    5404:	cd bf       	out	0x3d, r28	; 61
    5406:	de bf       	out	0x3e, r29	; 62
    5408:	7c 01       	movw	r14, r24
    540a:	8b 01       	movw	r16, r22
	/* Sanity checks */
	if (!rx_buf || !rx_len || (rx_len >= (C_RX_CMDLINE_BUF_SIZE - 1))) {
    540c:	89 2b       	or	r24, r25
    540e:	09 f4       	brne	.+2      	; 0x5412 <interpreter_doProcess+0x22>
    5410:	29 c2       	rjmp	.+1106   	; 0x5864 <interpreter_doProcess+0x474>
    5412:	cb 01       	movw	r24, r22
    5414:	01 97       	sbiw	r24, 0x01	; 1
    5416:	8e 3f       	cpi	r24, 0xFE	; 254
    5418:	91 05       	cpc	r25, r1
    541a:	08 f0       	brcs	.+2      	; 0x541e <interpreter_doProcess+0x2e>
    541c:	23 c2       	rjmp	.+1094   	; 0x5864 <interpreter_doProcess+0x474>
		return;
	}

	/* Look for line termination */
	char* pos = memchr(rx_buf, '\r', rx_len);
    541e:	ab 01       	movw	r20, r22
    5420:	6d e0       	ldi	r22, 0x0D	; 13
    5422:	70 e0       	ldi	r23, 0x00	; 0
    5424:	c7 01       	movw	r24, r14
    5426:	0e 94 be 7f 	call	0xff7c	; 0xff7c <memchr>

	/* Clipping */
	if ((s_rx_cmdLine_idx + rx_len) >= C_RX_CMDLINE_BUF_SIZE) {
    542a:	d0 90 d5 21 	lds	r13, 0x21D5	; 0x8021d5 <s_rx_cmdLine_idx>
    542e:	2d 2d       	mov	r18, r13
    5430:	30 e0       	ldi	r19, 0x00	; 0
    5432:	a8 01       	movw	r20, r16
    5434:	42 0f       	add	r20, r18
    5436:	53 1f       	adc	r21, r19
    5438:	4f 3f       	cpi	r20, 0xFF	; 255
    543a:	51 05       	cpc	r21, r1
    543c:	51 f0       	breq	.+20     	; 0x5452 <interpreter_doProcess+0x62>
    543e:	48 f0       	brcs	.+18     	; 0x5452 <interpreter_doProcess+0x62>
		/* Over sized - clip incoming data on the buffer size limit */
		rx_len = (C_RX_CMDLINE_BUF_SIZE - 1) - s_rx_cmdLine_idx;
    5440:	0f ef       	ldi	r16, 0xFF	; 255
    5442:	10 e0       	ldi	r17, 0x00	; 0
    5444:	0d 19       	sub	r16, r13
    5446:	11 09       	sbc	r17, r1

		/* Adjust pos if the line ending exists */
		if (pos) {
    5448:	89 2b       	or	r24, r25
    544a:	f9 f0       	breq	.+62     	; 0x548a <interpreter_doProcess+0x9a>
			pos = rx_buf + rx_len;
    544c:	c7 01       	movw	r24, r14
    544e:	80 0f       	add	r24, r16
    5450:	91 1f       	adc	r25, r17
		}
	}

	/* Add new chunk to buffer */
	uint8_t pos_len = pos ?  ((pos - rx_buf) + 1) : rx_len;
    5452:	00 97       	sbiw	r24, 0x00	; 0
    5454:	d1 f0       	breq	.+52     	; 0x548a <interpreter_doProcess+0x9a>
    5456:	8e 19       	sub	r24, r14
    5458:	9f 09       	sbc	r25, r15
    545a:	11 e0       	ldi	r17, 0x01	; 1
    545c:	18 0f       	add	r17, r24
	memcpy(s_rx_cmdLine_buf + s_rx_cmdLine_idx, rx_buf, pos_len);
    545e:	41 2f       	mov	r20, r17
    5460:	50 e0       	ldi	r21, 0x00	; 0
    5462:	b7 01       	movw	r22, r14
    5464:	c9 01       	movw	r24, r18
    5466:	8a 52       	subi	r24, 0x2A	; 42
    5468:	9e 4d       	sbci	r25, 0xDE	; 222
    546a:	0e 94 cb 7f 	call	0xff96	; 0xff96 <memcpy>
	s_rx_cmdLine_idx += pos_len;
    546e:	1d 0d       	add	r17, r13
    5470:	10 93 d5 21 	sts	0x21D5, r17	; 0x8021d5 <s_rx_cmdLine_idx>

static void executeCmdLine(char* cmdLine_buf, uint8_t cmdLine_len)
{
	/* Process command */
	{
		if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_adc, sizeof(PM_IP_CMD_adc) - 1)) {
    5474:	44 e0       	ldi	r20, 0x04	; 4
    5476:	50 e0       	ldi	r21, 0x00	; 0
    5478:	66 e2       	ldi	r22, 0x26	; 38
    547a:	7e e2       	ldi	r23, 0x2E	; 46
    547c:	86 ed       	ldi	r24, 0xD6	; 214
    547e:	91 e2       	ldi	r25, 0x21	; 33
    5480:	0e 94 8b 7f 	call	0xff16	; 0xff16 <strncmp_P>
    5484:	89 2b       	or	r24, r25
    5486:	51 f5       	brne	.+84     	; 0x54dc <interpreter_doProcess+0xec>
    5488:	0c c0       	rjmp	.+24     	; 0x54a2 <interpreter_doProcess+0xb2>
		}
	}

	/* Add new chunk to buffer */
	uint8_t pos_len = pos ?  ((pos - rx_buf) + 1) : rx_len;
	memcpy(s_rx_cmdLine_buf + s_rx_cmdLine_idx, rx_buf, pos_len);
    548a:	a8 01       	movw	r20, r16
    548c:	55 27       	eor	r21, r21
    548e:	b7 01       	movw	r22, r14
    5490:	c9 01       	movw	r24, r18
    5492:	8a 52       	subi	r24, 0x2A	; 42
    5494:	9e 4d       	sbci	r25, 0xDE	; 222
    5496:	0e 94 cb 7f 	call	0xff96	; 0xff96 <memcpy>
	s_rx_cmdLine_idx += pos_len;
    549a:	0d 0d       	add	r16, r13
    549c:	00 93 d5 21 	sts	0x21D5, r16	; 0x8021d5 <s_rx_cmdLine_idx>
    54a0:	e1 c1       	rjmp	.+962    	; 0x5864 <interpreter_doProcess+0x474>
static void executeCmdLine(char* cmdLine_buf, uint8_t cmdLine_len)
{
	/* Process command */
	{
		if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_adc, sizeof(PM_IP_CMD_adc) - 1)) {
			int val[1] = { 0 };
    54a2:	19 82       	std	Y+1, r1	; 0x01
    54a4:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_adc) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    54a6:	ce 01       	movw	r24, r28
    54a8:	01 96       	adiw	r24, 0x01	; 1
    54aa:	7c 01       	movw	r14, r24
    54ac:	00 e0       	ldi	r16, 0x00	; 0
    54ae:	10 e0       	ldi	r17, 0x00	; 0
    54b0:	20 e0       	ldi	r18, 0x00	; 0
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	43 e0       	ldi	r20, 0x03	; 3
    54b6:	50 e0       	ldi	r21, 0x00	; 0
    54b8:	60 e0       	ldi	r22, 0x00	; 0
    54ba:	70 e0       	ldi	r23, 0x00	; 0
    54bc:	8a ed       	ldi	r24, 0xDA	; 218
    54be:	91 e2       	ldi	r25, 0x21	; 33
    54c0:	0e 94 2c 64 	call	0xc858	; 0xc858 <myStringToVar>
    54c4:	89 2b       	or	r24, r25
    54c6:	09 f4       	brne	.+2      	; 0x54ca <interpreter_doProcess+0xda>
    54c8:	ad c1       	rjmp	.+858    	; 0x5824 <interpreter_doProcess+0x434>
				adc_app_enable(val[0]);
    54ca:	81 e0       	ldi	r24, 0x01	; 1
    54cc:	29 81       	ldd	r18, Y+1	; 0x01
    54ce:	3a 81       	ldd	r19, Y+2	; 0x02
    54d0:	23 2b       	or	r18, r19
    54d2:	09 f4       	brne	.+2      	; 0x54d6 <interpreter_doProcess+0xe6>
    54d4:	80 e0       	ldi	r24, 0x00	; 0
    54d6:	0e 94 cc 64 	call	0xc998	; 0xc998 <adc_app_enable>
    54da:	a4 c1       	rjmp	.+840    	; 0x5824 <interpreter_doProcess+0x434>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_AT, sizeof(PM_IP_CMD_AT) - 1)) {
    54dc:	42 e0       	ldi	r20, 0x02	; 2
    54de:	50 e0       	ldi	r21, 0x00	; 0
    54e0:	63 e2       	ldi	r22, 0x23	; 35
    54e2:	7e e2       	ldi	r23, 0x2E	; 46
    54e4:	86 ed       	ldi	r24, 0xD6	; 214
    54e6:	91 e2       	ldi	r25, 0x21	; 33
    54e8:	0e 94 8b 7f 	call	0xff16	; 0xff16 <strncmp_P>
    54ec:	89 2b       	or	r24, r25
    54ee:	31 f4       	brne	.+12     	; 0x54fc <interpreter_doProcess+0x10c>
				serial_sim808_send(cmdLine_buf, cmdLine_len);
    54f0:	61 2f       	mov	r22, r17
    54f2:	86 ed       	ldi	r24, 0xD6	; 214
    54f4:	91 e2       	ldi	r25, 0x21	; 33
    54f6:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <serial_sim808_send>
    54fa:	94 c1       	rjmp	.+808    	; 0x5824 <interpreter_doProcess+0x434>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_bias, sizeof(PM_IP_CMD_bias) - 1)) {
    54fc:	45 e0       	ldi	r20, 0x05	; 5
    54fe:	50 e0       	ldi	r21, 0x00	; 0
    5500:	6d e1       	ldi	r22, 0x1D	; 29
    5502:	7e e2       	ldi	r23, 0x2E	; 46
    5504:	86 ed       	ldi	r24, 0xD6	; 214
    5506:	91 e2       	ldi	r25, 0x21	; 33
    5508:	0e 94 8b 7f 	call	0xff16	; 0xff16 <strncmp_P>
    550c:	89 2b       	or	r24, r25
    550e:	c1 f4       	brne	.+48     	; 0x5540 <interpreter_doProcess+0x150>
			int val[1] = { 0 };
    5510:	19 82       	std	Y+1, r1	; 0x01
    5512:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_bias) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5514:	ce 01       	movw	r24, r28
    5516:	01 96       	adiw	r24, 0x01	; 1
    5518:	7c 01       	movw	r14, r24
    551a:	00 e0       	ldi	r16, 0x00	; 0
    551c:	10 e0       	ldi	r17, 0x00	; 0
    551e:	20 e0       	ldi	r18, 0x00	; 0
    5520:	30 e0       	ldi	r19, 0x00	; 0
    5522:	43 e0       	ldi	r20, 0x03	; 3
    5524:	50 e0       	ldi	r21, 0x00	; 0
    5526:	60 e0       	ldi	r22, 0x00	; 0
    5528:	70 e0       	ldi	r23, 0x00	; 0
    552a:	8b ed       	ldi	r24, 0xDB	; 219
    552c:	91 e2       	ldi	r25, 0x21	; 33
    552e:	0e 94 2c 64 	call	0xc858	; 0xc858 <myStringToVar>
    5532:	89 2b       	or	r24, r25
    5534:	09 f4       	brne	.+2      	; 0x5538 <interpreter_doProcess+0x148>
    5536:	76 c1       	rjmp	.+748    	; 0x5824 <interpreter_doProcess+0x434>
				bias_update(val[0]);
    5538:	89 81       	ldd	r24, Y+1	; 0x01
    553a:	0e 94 05 65 	call	0xca0a	; 0xca0a <bias_update>
    553e:	72 c1       	rjmp	.+740    	; 0x5824 <interpreter_doProcess+0x434>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_bl, sizeof(PM_IP_CMD_bl) - 1)) {
    5540:	43 e0       	ldi	r20, 0x03	; 3
    5542:	50 e0       	ldi	r21, 0x00	; 0
    5544:	69 e1       	ldi	r22, 0x19	; 25
    5546:	7e e2       	ldi	r23, 0x2E	; 46
    5548:	86 ed       	ldi	r24, 0xD6	; 214
    554a:	91 e2       	ldi	r25, 0x21	; 33
    554c:	0e 94 8b 7f 	call	0xff16	; 0xff16 <strncmp_P>
    5550:	89 2b       	or	r24, r25
    5552:	c9 f4       	brne	.+50     	; 0x5586 <interpreter_doProcess+0x196>
			int val[1] = { 0 };
    5554:	19 82       	std	Y+1, r1	; 0x01
    5556:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_bl) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5558:	ce 01       	movw	r24, r28
    555a:	01 96       	adiw	r24, 0x01	; 1
    555c:	7c 01       	movw	r14, r24
    555e:	00 e0       	ldi	r16, 0x00	; 0
    5560:	10 e0       	ldi	r17, 0x00	; 0
    5562:	20 e0       	ldi	r18, 0x00	; 0
    5564:	30 e0       	ldi	r19, 0x00	; 0
    5566:	43 e0       	ldi	r20, 0x03	; 3
    5568:	50 e0       	ldi	r21, 0x00	; 0
    556a:	60 e0       	ldi	r22, 0x00	; 0
    556c:	70 e0       	ldi	r23, 0x00	; 0
    556e:	89 ed       	ldi	r24, 0xD9	; 217
    5570:	91 e2       	ldi	r25, 0x21	; 33
    5572:	0e 94 2c 64 	call	0xc858	; 0xc858 <myStringToVar>
    5576:	89 2b       	or	r24, r25
    5578:	09 f4       	brne	.+2      	; 0x557c <interpreter_doProcess+0x18c>
    557a:	54 c1       	rjmp	.+680    	; 0x5824 <interpreter_doProcess+0x434>
				backlight_mode_pwm(val[0]);
    557c:	89 81       	ldd	r24, Y+1	; 0x01
    557e:	9a 81       	ldd	r25, Y+2	; 0x02
    5580:	0e 94 ef 64 	call	0xc9de	; 0xc9de <backlight_mode_pwm>
    5584:	4f c1       	rjmp	.+670    	; 0x5824 <interpreter_doProcess+0x434>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_dac, sizeof(PM_IP_CMD_dac) - 1)) {
    5586:	44 e0       	ldi	r20, 0x04	; 4
    5588:	50 e0       	ldi	r21, 0x00	; 0
    558a:	64 e1       	ldi	r22, 0x14	; 20
    558c:	7e e2       	ldi	r23, 0x2E	; 46
    558e:	86 ed       	ldi	r24, 0xD6	; 214
    5590:	91 e2       	ldi	r25, 0x21	; 33
    5592:	0e 94 8b 7f 	call	0xff16	; 0xff16 <strncmp_P>
    5596:	89 2b       	or	r24, r25
    5598:	e9 f4       	brne	.+58     	; 0x55d4 <interpreter_doProcess+0x1e4>
			int val[1] = { 0 };
    559a:	19 82       	std	Y+1, r1	; 0x01
    559c:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_dac) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    559e:	ce 01       	movw	r24, r28
    55a0:	01 96       	adiw	r24, 0x01	; 1
    55a2:	7c 01       	movw	r14, r24
    55a4:	00 e0       	ldi	r16, 0x00	; 0
    55a6:	10 e0       	ldi	r17, 0x00	; 0
    55a8:	20 e0       	ldi	r18, 0x00	; 0
    55aa:	30 e0       	ldi	r19, 0x00	; 0
    55ac:	43 e0       	ldi	r20, 0x03	; 3
    55ae:	50 e0       	ldi	r21, 0x00	; 0
    55b0:	60 e0       	ldi	r22, 0x00	; 0
    55b2:	70 e0       	ldi	r23, 0x00	; 0
    55b4:	8a ed       	ldi	r24, 0xDA	; 218
    55b6:	91 e2       	ldi	r25, 0x21	; 33
    55b8:	0e 94 2c 64 	call	0xc858	; 0xc858 <myStringToVar>
    55bc:	89 2b       	or	r24, r25
    55be:	09 f4       	brne	.+2      	; 0x55c2 <interpreter_doProcess+0x1d2>
    55c0:	31 c1       	rjmp	.+610    	; 0x5824 <interpreter_doProcess+0x434>
				dac_app_enable(val[0]);
    55c2:	81 e0       	ldi	r24, 0x01	; 1
    55c4:	29 81       	ldd	r18, Y+1	; 0x01
    55c6:	3a 81       	ldd	r19, Y+2	; 0x02
    55c8:	23 2b       	or	r18, r19
    55ca:	09 f4       	brne	.+2      	; 0x55ce <interpreter_doProcess+0x1de>
    55cc:	80 e0       	ldi	r24, 0x00	; 0
    55ce:	0e 94 0b 65 	call	0xca16	; 0xca16 <dac_app_enable>
    55d2:	28 c1       	rjmp	.+592    	; 0x5824 <interpreter_doProcess+0x434>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_dds, sizeof(PM_IP_CMD_dds) - 1)) {
    55d4:	44 e0       	ldi	r20, 0x04	; 4
    55d6:	50 e0       	ldi	r21, 0x00	; 0
    55d8:	6f e0       	ldi	r22, 0x0F	; 15
    55da:	7e e2       	ldi	r23, 0x2E	; 46
    55dc:	86 ed       	ldi	r24, 0xD6	; 214
    55de:	91 e2       	ldi	r25, 0x21	; 33
    55e0:	0e 94 8b 7f 	call	0xff16	; 0xff16 <strncmp_P>
    55e4:	89 2b       	or	r24, r25
    55e6:	51 f5       	brne	.+84     	; 0x563c <interpreter_doProcess+0x24c>
			float val[3] = { -1.f, -1.f, -1.f };
    55e8:	8c e0       	ldi	r24, 0x0C	; 12
    55ea:	e8 e2       	ldi	r30, 0x28	; 40
    55ec:	f1 e2       	ldi	r31, 0x21	; 33
    55ee:	de 01       	movw	r26, r28
    55f0:	11 96       	adiw	r26, 0x01	; 1
    55f2:	01 90       	ld	r0, Z+
    55f4:	0d 92       	st	X+, r0
    55f6:	8a 95       	dec	r24
    55f8:	e1 f7       	brne	.-8      	; 0x55f2 <interpreter_doProcess+0x202>
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_dds) - 1), MY_STRING_TO_VAR_FLOAT | (MY_STRING_TO_VAR_FLOAT << 2) | (MY_STRING_TO_VAR_FLOAT << 4), &(val[0]), NULL, NULL)) {
    55fa:	e1 2c       	mov	r14, r1
    55fc:	f1 2c       	mov	r15, r1
    55fe:	00 e0       	ldi	r16, 0x00	; 0
    5600:	10 e0       	ldi	r17, 0x00	; 0
    5602:	9e 01       	movw	r18, r28
    5604:	2f 5f       	subi	r18, 0xFF	; 255
    5606:	3f 4f       	sbci	r19, 0xFF	; 255
    5608:	45 e1       	ldi	r20, 0x15	; 21
    560a:	50 e0       	ldi	r21, 0x00	; 0
    560c:	60 e0       	ldi	r22, 0x00	; 0
    560e:	70 e0       	ldi	r23, 0x00	; 0
    5610:	8a ed       	ldi	r24, 0xDA	; 218
    5612:	91 e2       	ldi	r25, 0x21	; 33
    5614:	0e 94 2c 64 	call	0xc858	; 0xc858 <myStringToVar>
    5618:	89 2b       	or	r24, r25
    561a:	09 f4       	brne	.+2      	; 0x561e <interpreter_doProcess+0x22e>
    561c:	03 c1       	rjmp	.+518    	; 0x5824 <interpreter_doProcess+0x434>
				dds_update(val[0], val[1], val[2]);
    561e:	e9 84       	ldd	r14, Y+9	; 0x09
    5620:	fa 84       	ldd	r15, Y+10	; 0x0a
    5622:	0b 85       	ldd	r16, Y+11	; 0x0b
    5624:	1c 85       	ldd	r17, Y+12	; 0x0c
    5626:	2d 81       	ldd	r18, Y+5	; 0x05
    5628:	3e 81       	ldd	r19, Y+6	; 0x06
    562a:	4f 81       	ldd	r20, Y+7	; 0x07
    562c:	58 85       	ldd	r21, Y+8	; 0x08
    562e:	69 81       	ldd	r22, Y+1	; 0x01
    5630:	7a 81       	ldd	r23, Y+2	; 0x02
    5632:	8b 81       	ldd	r24, Y+3	; 0x03
    5634:	9c 81       	ldd	r25, Y+4	; 0x04
    5636:	0e 94 24 68 	call	0xd048	; 0xd048 <dds_update>
    563a:	f4 c0       	rjmp	.+488    	; 0x5824 <interpreter_doProcess+0x434>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_eb, sizeof(PM_IP_CMD_eb) - 1)) {
    563c:	43 e0       	ldi	r20, 0x03	; 3
    563e:	50 e0       	ldi	r21, 0x00	; 0
    5640:	6b e0       	ldi	r22, 0x0B	; 11
    5642:	7e e2       	ldi	r23, 0x2E	; 46
    5644:	86 ed       	ldi	r24, 0xD6	; 214
    5646:	91 e2       	ldi	r25, 0x21	; 33
    5648:	0e 94 8b 7f 	call	0xff16	; 0xff16 <strncmp_P>
    564c:	89 2b       	or	r24, r25
    564e:	e9 f4       	brne	.+58     	; 0x568a <interpreter_doProcess+0x29a>
			int val[1] = { 0 };
    5650:	19 82       	std	Y+1, r1	; 0x01
    5652:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_eb) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5654:	ce 01       	movw	r24, r28
    5656:	01 96       	adiw	r24, 0x01	; 1
    5658:	7c 01       	movw	r14, r24
    565a:	00 e0       	ldi	r16, 0x00	; 0
    565c:	10 e0       	ldi	r17, 0x00	; 0
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	43 e0       	ldi	r20, 0x03	; 3
    5664:	50 e0       	ldi	r21, 0x00	; 0
    5666:	60 e0       	ldi	r22, 0x00	; 0
    5668:	70 e0       	ldi	r23, 0x00	; 0
    566a:	89 ed       	ldi	r24, 0xD9	; 217
    566c:	91 e2       	ldi	r25, 0x21	; 33
    566e:	0e 94 2c 64 	call	0xc858	; 0xc858 <myStringToVar>
    5672:	89 2b       	or	r24, r25
    5674:	09 f4       	brne	.+2      	; 0x5678 <interpreter_doProcess+0x288>
    5676:	d6 c0       	rjmp	.+428    	; 0x5824 <interpreter_doProcess+0x434>
				errorBeep_enable(val[0]);
    5678:	81 e0       	ldi	r24, 0x01	; 1
    567a:	29 81       	ldd	r18, Y+1	; 0x01
    567c:	3a 81       	ldd	r19, Y+2	; 0x02
    567e:	23 2b       	or	r18, r19
    5680:	09 f4       	brne	.+2      	; 0x5684 <interpreter_doProcess+0x294>
    5682:	80 e0       	ldi	r24, 0x00	; 0
    5684:	0e 94 5b 65 	call	0xcab6	; 0xcab6 <errorBeep_enable>
    5688:	cd c0       	rjmp	.+410    	; 0x5824 <interpreter_doProcess+0x434>
			}

		} else if (!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_help, sizeof(PM_IP_CMD_help) - 1)) {
    568a:	44 e0       	ldi	r20, 0x04	; 4
    568c:	50 e0       	ldi	r21, 0x00	; 0
    568e:	60 e0       	ldi	r22, 0x00	; 0
    5690:	7e e2       	ldi	r23, 0x2E	; 46
    5692:	86 ed       	ldi	r24, 0xD6	; 214
    5694:	91 e2       	ldi	r25, 0x21	; 33
    5696:	0e 94 73 7f 	call	0xfee6	; 0xfee6 <strncasecmp_P>
    569a:	89 2b       	or	r24, r25
			printHelp();
    569c:	11 f4       	brne	.+4      	; 0x56a2 <interpreter_doProcess+0x2b2>
    569e:	46 dc       	rcall	.-1908   	; 0x4f2c <printHelp>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_info, sizeof(PM_IP_CMD_info) - 1)) {
    56a0:	c1 c0       	rjmp	.+386    	; 0x5824 <interpreter_doProcess+0x434>
    56a2:	45 e0       	ldi	r20, 0x05	; 5
    56a4:	50 e0       	ldi	r21, 0x00	; 0
    56a6:	65 e0       	ldi	r22, 0x05	; 5
    56a8:	7e e2       	ldi	r23, 0x2E	; 46
    56aa:	86 ed       	ldi	r24, 0xD6	; 214
    56ac:	91 e2       	ldi	r25, 0x21	; 33
    56ae:	0e 94 8b 7f 	call	0xff16	; 0xff16 <strncmp_P>
    56b2:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    56b4:	e9 f4       	brne	.+58     	; 0x56f0 <interpreter_doProcess+0x300>
    56b6:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_info) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    56b8:	1a 82       	std	Y+2, r1	; 0x02
    56ba:	ce 01       	movw	r24, r28
    56bc:	01 96       	adiw	r24, 0x01	; 1
    56be:	7c 01       	movw	r14, r24
    56c0:	00 e0       	ldi	r16, 0x00	; 0
    56c2:	10 e0       	ldi	r17, 0x00	; 0
    56c4:	20 e0       	ldi	r18, 0x00	; 0
    56c6:	30 e0       	ldi	r19, 0x00	; 0
    56c8:	43 e0       	ldi	r20, 0x03	; 3
    56ca:	50 e0       	ldi	r21, 0x00	; 0
    56cc:	60 e0       	ldi	r22, 0x00	; 0
    56ce:	70 e0       	ldi	r23, 0x00	; 0
    56d0:	8b ed       	ldi	r24, 0xDB	; 219
    56d2:	91 e2       	ldi	r25, 0x21	; 33
    56d4:	0e 94 2c 64 	call	0xc858	; 0xc858 <myStringToVar>
    56d8:	89 2b       	or	r24, r25
    56da:	09 f4       	brne	.+2      	; 0x56de <interpreter_doProcess+0x2ee>
				printStatusLines_enable(val[0]);
    56dc:	a3 c0       	rjmp	.+326    	; 0x5824 <interpreter_doProcess+0x434>
    56de:	81 e0       	ldi	r24, 0x01	; 1
    56e0:	29 81       	ldd	r18, Y+1	; 0x01
    56e2:	3a 81       	ldd	r19, Y+2	; 0x02
    56e4:	23 2b       	or	r18, r19
    56e6:	09 f4       	brne	.+2      	; 0x56ea <interpreter_doProcess+0x2fa>
    56e8:	80 e0       	ldi	r24, 0x00	; 0
    56ea:	0e 94 5e 65 	call	0xcabc	; 0xcabc <printStatusLines_enable>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_kb, sizeof(PM_IP_CMD_kb) - 1)) {
    56ee:	9a c0       	rjmp	.+308    	; 0x5824 <interpreter_doProcess+0x434>
    56f0:	43 e0       	ldi	r20, 0x03	; 3
    56f2:	50 e0       	ldi	r21, 0x00	; 0
    56f4:	6c ef       	ldi	r22, 0xFC	; 252
    56f6:	7d e2       	ldi	r23, 0x2D	; 45
    56f8:	86 ed       	ldi	r24, 0xD6	; 214
    56fa:	91 e2       	ldi	r25, 0x21	; 33
    56fc:	0e 94 8b 7f 	call	0xff16	; 0xff16 <strncmp_P>
    5700:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5702:	e9 f4       	brne	.+58     	; 0x573e <interpreter_doProcess+0x34e>
    5704:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_kb) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5706:	1a 82       	std	Y+2, r1	; 0x02
    5708:	ce 01       	movw	r24, r28
    570a:	01 96       	adiw	r24, 0x01	; 1
    570c:	7c 01       	movw	r14, r24
    570e:	00 e0       	ldi	r16, 0x00	; 0
    5710:	10 e0       	ldi	r17, 0x00	; 0
    5712:	20 e0       	ldi	r18, 0x00	; 0
    5714:	30 e0       	ldi	r19, 0x00	; 0
    5716:	43 e0       	ldi	r20, 0x03	; 3
    5718:	50 e0       	ldi	r21, 0x00	; 0
    571a:	60 e0       	ldi	r22, 0x00	; 0
    571c:	70 e0       	ldi	r23, 0x00	; 0
    571e:	89 ed       	ldi	r24, 0xD9	; 217
    5720:	91 e2       	ldi	r25, 0x21	; 33
    5722:	0e 94 2c 64 	call	0xc858	; 0xc858 <myStringToVar>
    5726:	89 2b       	or	r24, r25
    5728:	09 f4       	brne	.+2      	; 0x572c <interpreter_doProcess+0x33c>
				keyBeep_enable(val[0]);
    572a:	7c c0       	rjmp	.+248    	; 0x5824 <interpreter_doProcess+0x434>
    572c:	81 e0       	ldi	r24, 0x01	; 1
    572e:	29 81       	ldd	r18, Y+1	; 0x01
    5730:	3a 81       	ldd	r19, Y+2	; 0x02
    5732:	23 2b       	or	r18, r19
    5734:	09 f4       	brne	.+2      	; 0x5738 <interpreter_doProcess+0x348>
    5736:	80 e0       	ldi	r24, 0x00	; 0
    5738:	0e 94 61 65 	call	0xcac2	; 0xcac2 <keyBeep_enable>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_pt, sizeof(PM_IP_CMD_pt) - 1)) {
    573c:	73 c0       	rjmp	.+230    	; 0x5824 <interpreter_doProcess+0x434>
    573e:	43 e0       	ldi	r20, 0x03	; 3
    5740:	50 e0       	ldi	r21, 0x00	; 0
    5742:	68 ef       	ldi	r22, 0xF8	; 248
    5744:	7d e2       	ldi	r23, 0x2D	; 45
    5746:	86 ed       	ldi	r24, 0xD6	; 214
    5748:	91 e2       	ldi	r25, 0x21	; 33
    574a:	0e 94 8b 7f 	call	0xff16	; 0xff16 <strncmp_P>
    574e:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5750:	c1 f4       	brne	.+48     	; 0x5782 <interpreter_doProcess+0x392>
    5752:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_pt) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5754:	1a 82       	std	Y+2, r1	; 0x02
    5756:	ce 01       	movw	r24, r28
    5758:	01 96       	adiw	r24, 0x01	; 1
    575a:	7c 01       	movw	r14, r24
    575c:	00 e0       	ldi	r16, 0x00	; 0
    575e:	10 e0       	ldi	r17, 0x00	; 0
    5760:	20 e0       	ldi	r18, 0x00	; 0
    5762:	30 e0       	ldi	r19, 0x00	; 0
    5764:	43 e0       	ldi	r20, 0x03	; 3
    5766:	50 e0       	ldi	r21, 0x00	; 0
    5768:	60 e0       	ldi	r22, 0x00	; 0
    576a:	70 e0       	ldi	r23, 0x00	; 0
    576c:	89 ed       	ldi	r24, 0xD9	; 217
    576e:	91 e2       	ldi	r25, 0x21	; 33
    5770:	0e 94 2c 64 	call	0xc858	; 0xc858 <myStringToVar>
    5774:	89 2b       	or	r24, r25
    5776:	09 f4       	brne	.+2      	; 0x577a <interpreter_doProcess+0x38a>
				pitchTone_mode(val[0]);
    5778:	55 c0       	rjmp	.+170    	; 0x5824 <interpreter_doProcess+0x434>
    577a:	89 81       	ldd	r24, Y+1	; 0x01
    577c:	0e 94 64 65 	call	0xcac8	; 0xcac8 <pitchTone_mode>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_reset, sizeof(PM_IP_CMD_reset) - 1)) {
    5780:	51 c0       	rjmp	.+162    	; 0x5824 <interpreter_doProcess+0x434>
    5782:	46 e0       	ldi	r20, 0x06	; 6
    5784:	50 e0       	ldi	r21, 0x00	; 0
    5786:	61 ef       	ldi	r22, 0xF1	; 241
    5788:	7d e2       	ldi	r23, 0x2D	; 45
    578a:	86 ed       	ldi	r24, 0xD6	; 214
    578c:	91 e2       	ldi	r25, 0x21	; 33
    578e:	0e 94 8b 7f 	call	0xff16	; 0xff16 <strncmp_P>
    5792:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5794:	f1 f4       	brne	.+60     	; 0x57d2 <interpreter_doProcess+0x3e2>
    5796:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_reset) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5798:	1a 82       	std	Y+2, r1	; 0x02
    579a:	ce 01       	movw	r24, r28
    579c:	01 96       	adiw	r24, 0x01	; 1
    579e:	7c 01       	movw	r14, r24
    57a0:	00 e0       	ldi	r16, 0x00	; 0
    57a2:	10 e0       	ldi	r17, 0x00	; 0
    57a4:	20 e0       	ldi	r18, 0x00	; 0
    57a6:	30 e0       	ldi	r19, 0x00	; 0
    57a8:	43 e0       	ldi	r20, 0x03	; 3
    57aa:	50 e0       	ldi	r21, 0x00	; 0
    57ac:	60 e0       	ldi	r22, 0x00	; 0
    57ae:	70 e0       	ldi	r23, 0x00	; 0
    57b0:	8c ed       	ldi	r24, 0xDC	; 220
    57b2:	91 e2       	ldi	r25, 0x21	; 33
    57b4:	0e 94 2c 64 	call	0xc858	; 0xc858 <myStringToVar>
    57b8:	89 2b       	or	r24, r25
				if (val[0] == 1) {
    57ba:	a1 f1       	breq	.+104    	; 0x5824 <interpreter_doProcess+0x434>
    57bc:	89 81       	ldd	r24, Y+1	; 0x01
    57be:	9a 81       	ldd	r25, Y+2	; 0x02
    57c0:	01 97       	sbiw	r24, 0x01	; 1
					/* Terminate the USB connection */
					stdio_usb_disable();
    57c2:	81 f5       	brne	.+96     	; 0x5824 <interpreter_doProcess+0x434>
    57c4:	0e 94 94 74 	call	0xe928	; 0xe928 <stdio_usb_disable>
					udc_stop();
    57c8:	0e 94 69 71 	call	0xe2d2	; 0xe2d2 <udc_stop>

					asm volatile(
    57cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
					);
				}
			}

		} else {
			int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_UNKNOWN_01);
    57d0:	29 c0       	rjmp	.+82     	; 0x5824 <interpreter_doProcess+0x434>
    57d2:	8c eb       	ldi	r24, 0xBC	; 188
    57d4:	9d e2       	ldi	r25, 0x2D	; 45
    57d6:	9f 93       	push	r25
    57d8:	8f 93       	push	r24
    57da:	1f 92       	push	r1
    57dc:	80 e4       	ldi	r24, 0x40	; 64
    57de:	8f 93       	push	r24
    57e0:	8f e3       	ldi	r24, 0x3F	; 63
    57e2:	95 e2       	ldi	r25, 0x25	; 37
    57e4:	9f 93       	push	r25
    57e6:	8f 93       	push	r24
    57e8:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
			udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    57ec:	81 34       	cpi	r24, 0x41	; 65
    57ee:	91 05       	cpc	r25, r1
    57f0:	10 f0       	brcs	.+4      	; 0x57f6 <interpreter_doProcess+0x406>
    57f2:	80 e4       	ldi	r24, 0x40	; 64
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	40 e0       	ldi	r20, 0x00	; 0
    57f8:	68 2f       	mov	r22, r24
    57fa:	8f e3       	ldi	r24, 0x3F	; 63
    57fc:	95 e2       	ldi	r25, 0x25	; 37
    57fe:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

			if (g_errorBeep_enable) {
    5802:	0f 90       	pop	r0
    5804:	0f 90       	pop	r0
    5806:	0f 90       	pop	r0
    5808:	0f 90       	pop	r0
    580a:	0f 90       	pop	r0
    580c:	0f 90       	pop	r0
    580e:	80 91 5f 20 	lds	r24, 0x205F	; 0x80205f <g_errorBeep_enable>
    5812:	88 23       	and	r24, r24
				twi2_set_beep(100, 10);  // Bad sound
    5814:	39 f0       	breq	.+14     	; 0x5824 <interpreter_doProcess+0x434>
    5816:	6a e0       	ldi	r22, 0x0A	; 10
    5818:	84 e6       	ldi	r24, 0x64	; 100
				yield_ms(125);
    581a:	33 d7       	rcall	.+3686   	; 0x6682 <twi2_set_beep>
    581c:	8d e7       	ldi	r24, 0x7D	; 125
    581e:	90 e0       	ldi	r25, 0x00	; 0
    5820:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
			}
		}
	}

	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_CmdLine);
    5824:	8b e2       	ldi	r24, 0x2B	; 43
    5826:	9e e2       	ldi	r25, 0x2E	; 46
    5828:	9f 93       	push	r25
    582a:	8f 93       	push	r24
    582c:	1f 92       	push	r1
    582e:	80 e4       	ldi	r24, 0x40	; 64
    5830:	8f 93       	push	r24
    5832:	8f e3       	ldi	r24, 0x3F	; 63
    5834:	95 e2       	ldi	r25, 0x25	; 37
    5836:	9f 93       	push	r25
    5838:	8f 93       	push	r24
    583a:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    583e:	81 34       	cpi	r24, 0x41	; 65
    5840:	91 05       	cpc	r25, r1
    5842:	10 f0       	brcs	.+4      	; 0x5848 <interpreter_doProcess+0x458>
    5844:	80 e4       	ldi	r24, 0x40	; 64
    5846:	90 e0       	ldi	r25, 0x00	; 0
    5848:	40 e0       	ldi	r20, 0x00	; 0
    584a:	68 2f       	mov	r22, r24
    584c:	8f e3       	ldi	r24, 0x3F	; 63
    584e:	95 e2       	ldi	r25, 0x25	; 37
    5850:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>

	/* Execute line */
	if (pos) {
		/* Feed interpreter with line data */
		executeCmdLine(s_rx_cmdLine_buf, s_rx_cmdLine_idx);
		s_rx_cmdLine_idx = 0;
    5854:	10 92 d5 21 	sts	0x21D5, r1	; 0x8021d5 <s_rx_cmdLine_idx>
    5858:	0f 90       	pop	r0
    585a:	0f 90       	pop	r0
    585c:	0f 90       	pop	r0
    585e:	0f 90       	pop	r0
    5860:	0f 90       	pop	r0
	}
}
    5862:	0f 90       	pop	r0
    5864:	2c 96       	adiw	r28, 0x0c	; 12
    5866:	cd bf       	out	0x3d, r28	; 61
    5868:	de bf       	out	0x3e, r29	; 62
    586a:	df 91       	pop	r29
    586c:	cf 91       	pop	r28
    586e:	1f 91       	pop	r17
    5870:	0f 91       	pop	r16
    5872:	ff 90       	pop	r15
    5874:	ef 90       	pop	r14
    5876:	df 90       	pop	r13
    5878:	08 95       	ret

0000587a <__portable_avr_delay_cycles>:
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
	twi2_m_data[0] = sprintf_P((char*)&(twi2_m_data[1]), fmt_P);
	twi2_packet.length = twi2_m_data[0] + 1;
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}
    587a:	04 c0       	rjmp	.+8      	; 0x5884 <__portable_avr_delay_cycles+0xa>
    587c:	61 50       	subi	r22, 0x01	; 1
    587e:	71 09       	sbc	r23, r1
    5880:	81 09       	sbc	r24, r1
    5882:	91 09       	sbc	r25, r1
    5884:	61 15       	cp	r22, r1
    5886:	71 05       	cpc	r23, r1
    5888:	81 05       	cpc	r24, r1
    588a:	91 05       	cpc	r25, r1
    588c:	b9 f7       	brne	.-18     	; 0x587c <__portable_avr_delay_cycles+0x2>
    588e:	08 95       	ret

00005890 <task_twi1_hygro>:
    5890:	ff 92       	push	r15
    5892:	0f 93       	push	r16
    5894:	1f 93       	push	r17
    5896:	cf 93       	push	r28
    5898:	df 93       	push	r29
    589a:	00 d0       	rcall	.+0      	; 0x589c <task_twi1_hygro+0xc>
    589c:	cd b7       	in	r28, 0x3d	; 61
    589e:	de b7       	in	r29, 0x3e	; 62
    58a0:	8f b7       	in	r24, 0x3f	; 63
    58a2:	8b 83       	std	Y+3, r24	; 0x03
    58a4:	f8 94       	cli
    58a6:	8b 81       	ldd	r24, Y+3	; 0x03
    58a8:	20 91 02 27 	lds	r18, 0x2702	; 0x802702 <g_twi1_hygro_S_T>
    58ac:	30 91 03 27 	lds	r19, 0x2703	; 0x802703 <g_twi1_hygro_S_T+0x1>
    58b0:	00 91 00 27 	lds	r16, 0x2700	; 0x802700 <g_twi1_hygro_S_RH>
    58b4:	10 91 01 27 	lds	r17, 0x2701	; 0x802701 <g_twi1_hygro_S_RH+0x1>
    58b8:	8f bf       	out	0x3f, r24	; 63
    58ba:	21 15       	cp	r18, r1
    58bc:	31 05       	cpc	r19, r1
    58be:	a9 f0       	breq	.+42     	; 0x58ea <task_twi1_hygro+0x5a>
    58c0:	8f b7       	in	r24, 0x3f	; 63
    58c2:	8a 83       	std	Y+2, r24	; 0x02
    58c4:	f8 94       	cli
    58c6:	fa 80       	ldd	r15, Y+2	; 0x02
    58c8:	ac e5       	ldi	r26, 0x5C	; 92
    58ca:	b4 e4       	ldi	r27, 0x44	; 68
    58cc:	0e 94 c6 7c 	call	0xf98c	; 0xf98c <__umulhisi3>
    58d0:	2f ef       	ldi	r18, 0xFF	; 255
    58d2:	3f ef       	ldi	r19, 0xFF	; 255
    58d4:	40 e0       	ldi	r20, 0x00	; 0
    58d6:	50 e0       	ldi	r21, 0x00	; 0
    58d8:	0e 94 9c 7c 	call	0xf938	; 0xf938 <__divmodsi4>
    58dc:	24 59       	subi	r18, 0x94	; 148
    58de:	31 41       	sbci	r19, 0x11	; 17
    58e0:	20 93 fe 26 	sts	0x26FE, r18	; 0x8026fe <g_twi1_hygro_T_100>
    58e4:	30 93 ff 26 	sts	0x26FF, r19	; 0x8026ff <g_twi1_hygro_T_100+0x1>
    58e8:	ff be       	out	0x3f, r15	; 63
    58ea:	01 15       	cp	r16, r1
    58ec:	11 05       	cpc	r17, r1
    58ee:	a1 f0       	breq	.+40     	; 0x5918 <task_twi1_hygro+0x88>
    58f0:	8f b7       	in	r24, 0x3f	; 63
    58f2:	89 83       	std	Y+1, r24	; 0x01
    58f4:	f8 94       	cli
    58f6:	f9 80       	ldd	r15, Y+1	; 0x01
    58f8:	98 01       	movw	r18, r16
    58fa:	a0 e1       	ldi	r26, 0x10	; 16
    58fc:	b7 e2       	ldi	r27, 0x27	; 39
    58fe:	0e 94 c6 7c 	call	0xf98c	; 0xf98c <__umulhisi3>
    5902:	2f ef       	ldi	r18, 0xFF	; 255
    5904:	3f ef       	ldi	r19, 0xFF	; 255
    5906:	40 e0       	ldi	r20, 0x00	; 0
    5908:	50 e0       	ldi	r21, 0x00	; 0
    590a:	0e 94 9c 7c 	call	0xf938	; 0xf938 <__divmodsi4>
    590e:	20 93 fc 26 	sts	0x26FC, r18	; 0x8026fc <g_twi1_hygro_RH_100>
    5912:	30 93 fd 26 	sts	0x26FD, r19	; 0x8026fd <g_twi1_hygro_RH_100+0x1>
    5916:	ff be       	out	0x3f, r15	; 63
    5918:	23 96       	adiw	r28, 0x03	; 3
    591a:	cd bf       	out	0x3d, r28	; 61
    591c:	de bf       	out	0x3e, r29	; 62
    591e:	df 91       	pop	r29
    5920:	cf 91       	pop	r28
    5922:	1f 91       	pop	r17
    5924:	0f 91       	pop	r16
    5926:	ff 90       	pop	r15
    5928:	08 95       	ret

0000592a <task_twi1_gyro>:
    592a:	4f 92       	push	r4
    592c:	5f 92       	push	r5
    592e:	6f 92       	push	r6
    5930:	7f 92       	push	r7
    5932:	8f 92       	push	r8
    5934:	9f 92       	push	r9
    5936:	af 92       	push	r10
    5938:	bf 92       	push	r11
    593a:	cf 92       	push	r12
    593c:	df 92       	push	r13
    593e:	ef 92       	push	r14
    5940:	ff 92       	push	r15
    5942:	0f 93       	push	r16
    5944:	1f 93       	push	r17
    5946:	cf 93       	push	r28
    5948:	df 93       	push	r29
    594a:	00 d0       	rcall	.+0      	; 0x594c <task_twi1_gyro+0x22>
    594c:	00 d0       	rcall	.+0      	; 0x594e <task_twi1_gyro+0x24>
    594e:	cd b7       	in	r28, 0x3d	; 61
    5950:	de b7       	in	r29, 0x3e	; 62
    5952:	8f b7       	in	r24, 0x3f	; 63
    5954:	89 83       	std	Y+1, r24	; 0x01
    5956:	f8 94       	cli
    5958:	99 81       	ldd	r25, Y+1	; 0x01
    595a:	80 91 5b 27 	lds	r24, 0x275B	; 0x80275b <g_twi1_gyro_1_accel_x>
    595e:	f0 91 5c 27 	lds	r31, 0x275C	; 0x80275c <g_twi1_gyro_1_accel_x+0x1>
    5962:	40 90 59 27 	lds	r4, 0x2759	; 0x802759 <g_twi1_gyro_1_accel_y>
    5966:	50 90 5a 27 	lds	r5, 0x275A	; 0x80275a <g_twi1_gyro_1_accel_y+0x1>
    596a:	60 90 57 27 	lds	r6, 0x2757	; 0x802757 <g_twi1_gyro_1_accel_z>
    596e:	90 90 58 27 	lds	r9, 0x2758	; 0x802758 <g_twi1_gyro_1_accel_z+0x1>
    5972:	9f bf       	out	0x3f, r25	; 63
    5974:	a8 2f       	mov	r26, r24
    5976:	ef 2f       	mov	r30, r31
    5978:	ee 0f       	add	r30, r30
    597a:	ee 0b       	sbc	r30, r30
    597c:	28 2f       	mov	r18, r24
    597e:	3f 2f       	mov	r19, r31
    5980:	4e 2f       	mov	r20, r30
    5982:	5e 2f       	mov	r21, r30
    5984:	6e 2f       	mov	r22, r30
    5986:	7e 2f       	mov	r23, r30
    5988:	8e 2f       	mov	r24, r30
    598a:	9e 2f       	mov	r25, r30
    598c:	02 e0       	ldi	r16, 0x02	; 2
    598e:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <__ashldi3>
    5992:	a2 2e       	mov	r10, r18
    5994:	b3 2e       	mov	r11, r19
    5996:	c4 2e       	mov	r12, r20
    5998:	d5 2e       	mov	r13, r21
    599a:	e6 2e       	mov	r14, r22
    599c:	f7 2e       	mov	r15, r23
    599e:	b8 2f       	mov	r27, r24
    59a0:	19 2f       	mov	r17, r25
    59a2:	05 e0       	ldi	r16, 0x05	; 5
    59a4:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <__ashldi3>
    59a8:	0b 2f       	mov	r16, r27
    59aa:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__subdi3>
    59ae:	aa 2e       	mov	r10, r26
    59b0:	bf 2e       	mov	r11, r31
    59b2:	ce 2e       	mov	r12, r30
    59b4:	de 2e       	mov	r13, r30
    59b6:	ee 2e       	mov	r14, r30
    59b8:	fe 2e       	mov	r15, r30
    59ba:	0e 2f       	mov	r16, r30
    59bc:	1e 2f       	mov	r17, r30
    59be:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__adddi3>
    59c2:	04 e0       	ldi	r16, 0x04	; 4
    59c4:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <__ashldi3>
    59c8:	b0 90 56 20 	lds	r11, 0x2056	; 0x802056 <g_twi1_gyro_1_accel_factx+0x1>
    59cc:	a0 90 55 20 	lds	r10, 0x2055	; 0x802055 <g_twi1_gyro_1_accel_factx>
    59d0:	1b 2d       	mov	r17, r11
    59d2:	11 0f       	add	r17, r17
    59d4:	11 0b       	sbc	r17, r17
    59d6:	c1 2e       	mov	r12, r17
    59d8:	d1 2e       	mov	r13, r17
    59da:	e1 2e       	mov	r14, r17
    59dc:	f1 2e       	mov	r15, r17
    59de:	01 2f       	mov	r16, r17
    59e0:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    59e4:	68 94       	set
    59e6:	aa 24       	eor	r10, r10
    59e8:	a4 f8       	bld	r10, 4
    59ea:	0f 2e       	mov	r0, r31
    59ec:	f7 e2       	ldi	r31, 0x27	; 39
    59ee:	bf 2e       	mov	r11, r31
    59f0:	f0 2d       	mov	r31, r0
    59f2:	c1 2c       	mov	r12, r1
    59f4:	d1 2c       	mov	r13, r1
    59f6:	e1 2c       	mov	r14, r1
    59f8:	f1 2c       	mov	r15, r1
    59fa:	00 e0       	ldi	r16, 0x00	; 0
    59fc:	10 e0       	ldi	r17, 0x00	; 0
    59fe:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <__divdi3>
    5a02:	0f e0       	ldi	r16, 0x0F	; 15
    5a04:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ashrdi3>
    5a08:	72 2e       	mov	r7, r18
    5a0a:	83 2e       	mov	r8, r19
    5a0c:	e5 2d       	mov	r30, r5
    5a0e:	ee 0f       	add	r30, r30
    5a10:	ee 0b       	sbc	r30, r30
    5a12:	24 2d       	mov	r18, r4
    5a14:	35 2d       	mov	r19, r5
    5a16:	4e 2f       	mov	r20, r30
    5a18:	5e 2f       	mov	r21, r30
    5a1a:	6e 2f       	mov	r22, r30
    5a1c:	7e 2f       	mov	r23, r30
    5a1e:	8e 2f       	mov	r24, r30
    5a20:	9e 2f       	mov	r25, r30
    5a22:	02 e0       	ldi	r16, 0x02	; 2
    5a24:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <__ashldi3>
    5a28:	a2 2e       	mov	r10, r18
    5a2a:	b3 2e       	mov	r11, r19
    5a2c:	c4 2e       	mov	r12, r20
    5a2e:	d5 2e       	mov	r13, r21
    5a30:	e6 2e       	mov	r14, r22
    5a32:	f7 2e       	mov	r15, r23
    5a34:	a8 2f       	mov	r26, r24
    5a36:	19 2f       	mov	r17, r25
    5a38:	05 e0       	ldi	r16, 0x05	; 5
    5a3a:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <__ashldi3>
    5a3e:	0a 2f       	mov	r16, r26
    5a40:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__subdi3>
    5a44:	a4 2c       	mov	r10, r4
    5a46:	b5 2c       	mov	r11, r5
    5a48:	ce 2e       	mov	r12, r30
    5a4a:	de 2e       	mov	r13, r30
    5a4c:	ee 2e       	mov	r14, r30
    5a4e:	fe 2e       	mov	r15, r30
    5a50:	0e 2f       	mov	r16, r30
    5a52:	1e 2f       	mov	r17, r30
    5a54:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__adddi3>
    5a58:	04 e0       	ldi	r16, 0x04	; 4
    5a5a:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <__ashldi3>
    5a5e:	b0 90 54 20 	lds	r11, 0x2054	; 0x802054 <g_twi1_gyro_1_accel_facty+0x1>
    5a62:	a0 90 53 20 	lds	r10, 0x2053	; 0x802053 <g_twi1_gyro_1_accel_facty>
    5a66:	1b 2d       	mov	r17, r11
    5a68:	11 0f       	add	r17, r17
    5a6a:	11 0b       	sbc	r17, r17
    5a6c:	c1 2e       	mov	r12, r17
    5a6e:	d1 2e       	mov	r13, r17
    5a70:	e1 2e       	mov	r14, r17
    5a72:	f1 2e       	mov	r15, r17
    5a74:	01 2f       	mov	r16, r17
    5a76:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    5a7a:	68 94       	set
    5a7c:	aa 24       	eor	r10, r10
    5a7e:	a4 f8       	bld	r10, 4
    5a80:	0f 2e       	mov	r0, r31
    5a82:	f7 e2       	ldi	r31, 0x27	; 39
    5a84:	bf 2e       	mov	r11, r31
    5a86:	f0 2d       	mov	r31, r0
    5a88:	c1 2c       	mov	r12, r1
    5a8a:	d1 2c       	mov	r13, r1
    5a8c:	e1 2c       	mov	r14, r1
    5a8e:	f1 2c       	mov	r15, r1
    5a90:	00 e0       	ldi	r16, 0x00	; 0
    5a92:	10 e0       	ldi	r17, 0x00	; 0
    5a94:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <__divdi3>
    5a98:	0f e0       	ldi	r16, 0x0F	; 15
    5a9a:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ashrdi3>
    5a9e:	42 2e       	mov	r4, r18
    5aa0:	53 2e       	mov	r5, r19
    5aa2:	e9 2d       	mov	r30, r9
    5aa4:	ee 0f       	add	r30, r30
    5aa6:	ee 0b       	sbc	r30, r30
    5aa8:	26 2d       	mov	r18, r6
    5aaa:	39 2d       	mov	r19, r9
    5aac:	4e 2f       	mov	r20, r30
    5aae:	5e 2f       	mov	r21, r30
    5ab0:	6e 2f       	mov	r22, r30
    5ab2:	7e 2f       	mov	r23, r30
    5ab4:	8e 2f       	mov	r24, r30
    5ab6:	9e 2f       	mov	r25, r30
    5ab8:	02 e0       	ldi	r16, 0x02	; 2
    5aba:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <__ashldi3>
    5abe:	a2 2e       	mov	r10, r18
    5ac0:	b3 2e       	mov	r11, r19
    5ac2:	c4 2e       	mov	r12, r20
    5ac4:	d5 2e       	mov	r13, r21
    5ac6:	e6 2e       	mov	r14, r22
    5ac8:	f7 2e       	mov	r15, r23
    5aca:	a8 2f       	mov	r26, r24
    5acc:	19 2f       	mov	r17, r25
    5ace:	05 e0       	ldi	r16, 0x05	; 5
    5ad0:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <__ashldi3>
    5ad4:	0a 2f       	mov	r16, r26
    5ad6:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__subdi3>
    5ada:	a6 2c       	mov	r10, r6
    5adc:	b9 2c       	mov	r11, r9
    5ade:	ce 2e       	mov	r12, r30
    5ae0:	de 2e       	mov	r13, r30
    5ae2:	ee 2e       	mov	r14, r30
    5ae4:	fe 2e       	mov	r15, r30
    5ae6:	0e 2f       	mov	r16, r30
    5ae8:	1e 2f       	mov	r17, r30
    5aea:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__adddi3>
    5aee:	04 e0       	ldi	r16, 0x04	; 4
    5af0:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <__ashldi3>
    5af4:	b0 90 52 20 	lds	r11, 0x2052	; 0x802052 <g_twi1_gyro_1_accel_factz+0x1>
    5af8:	a0 90 51 20 	lds	r10, 0x2051	; 0x802051 <g_twi1_gyro_1_accel_factz>
    5afc:	1b 2d       	mov	r17, r11
    5afe:	11 0f       	add	r17, r17
    5b00:	11 0b       	sbc	r17, r17
    5b02:	c1 2e       	mov	r12, r17
    5b04:	d1 2e       	mov	r13, r17
    5b06:	e1 2e       	mov	r14, r17
    5b08:	f1 2e       	mov	r15, r17
    5b0a:	01 2f       	mov	r16, r17
    5b0c:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    5b10:	68 94       	set
    5b12:	aa 24       	eor	r10, r10
    5b14:	a4 f8       	bld	r10, 4
    5b16:	0f 2e       	mov	r0, r31
    5b18:	f7 e2       	ldi	r31, 0x27	; 39
    5b1a:	bf 2e       	mov	r11, r31
    5b1c:	f0 2d       	mov	r31, r0
    5b1e:	c1 2c       	mov	r12, r1
    5b20:	d1 2c       	mov	r13, r1
    5b22:	e1 2c       	mov	r14, r1
    5b24:	f1 2c       	mov	r15, r1
    5b26:	00 e0       	ldi	r16, 0x00	; 0
    5b28:	10 e0       	ldi	r17, 0x00	; 0
    5b2a:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <__divdi3>
    5b2e:	0f e0       	ldi	r16, 0x0F	; 15
    5b30:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ashrdi3>
    5b34:	92 2f       	mov	r25, r18
    5b36:	2f b7       	in	r18, 0x3f	; 63
    5b38:	2a 83       	std	Y+2, r18	; 0x02
    5b3a:	f8 94       	cli
    5b3c:	2a 81       	ldd	r18, Y+2	; 0x02
    5b3e:	70 92 55 27 	sts	0x2755, r7	; 0x802755 <g_twi1_gyro_1_accel_x_mg>
    5b42:	80 92 56 27 	sts	0x2756, r8	; 0x802756 <g_twi1_gyro_1_accel_x_mg+0x1>
    5b46:	40 92 53 27 	sts	0x2753, r4	; 0x802753 <g_twi1_gyro_1_accel_y_mg>
    5b4a:	50 92 54 27 	sts	0x2754, r5	; 0x802754 <g_twi1_gyro_1_accel_y_mg+0x1>
    5b4e:	90 93 51 27 	sts	0x2751, r25	; 0x802751 <g_twi1_gyro_1_accel_z_mg>
    5b52:	30 93 52 27 	sts	0x2752, r19	; 0x802752 <g_twi1_gyro_1_accel_z_mg+0x1>
    5b56:	2f bf       	out	0x3f, r18	; 63
    5b58:	8f b7       	in	r24, 0x3f	; 63
    5b5a:	8b 83       	std	Y+3, r24	; 0x03
    5b5c:	f8 94       	cli
    5b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5b60:	80 91 4f 27 	lds	r24, 0x274F	; 0x80274f <g_twi1_gyro_1_gyro_x>
    5b64:	30 91 50 27 	lds	r19, 0x2750	; 0x802750 <g_twi1_gyro_1_gyro_x+0x1>
    5b68:	50 90 4d 27 	lds	r5, 0x274D	; 0x80274d <g_twi1_gyro_1_gyro_y>
    5b6c:	60 90 4e 27 	lds	r6, 0x274E	; 0x80274e <g_twi1_gyro_1_gyro_y+0x1>
    5b70:	70 90 4b 27 	lds	r7, 0x274B	; 0x80274b <g_twi1_gyro_1_gyro_z>
    5b74:	80 90 4c 27 	lds	r8, 0x274C	; 0x80274c <g_twi1_gyro_1_gyro_z+0x1>
    5b78:	9f bf       	out	0x3f, r25	; 63
    5b7a:	9f b7       	in	r25, 0x3f	; 63
    5b7c:	9c 83       	std	Y+4, r25	; 0x04
    5b7e:	f8 94       	cli
    5b80:	9c 80       	ldd	r9, Y+4	; 0x04
    5b82:	28 2f       	mov	r18, r24
    5b84:	93 2f       	mov	r25, r19
    5b86:	99 0f       	add	r25, r25
    5b88:	99 0b       	sbc	r25, r25
    5b8a:	0f 2e       	mov	r0, r31
    5b8c:	f0 e9       	ldi	r31, 0x90	; 144
    5b8e:	af 2e       	mov	r10, r31
    5b90:	f0 2d       	mov	r31, r0
    5b92:	0f 2e       	mov	r0, r31
    5b94:	f0 ed       	ldi	r31, 0xD0	; 208
    5b96:	bf 2e       	mov	r11, r31
    5b98:	f0 2d       	mov	r31, r0
    5b9a:	0f 2e       	mov	r0, r31
    5b9c:	f3 e0       	ldi	r31, 0x03	; 3
    5b9e:	cf 2e       	mov	r12, r31
    5ba0:	f0 2d       	mov	r31, r0
    5ba2:	00 e0       	ldi	r16, 0x00	; 0
    5ba4:	49 2f       	mov	r20, r25
    5ba6:	59 2f       	mov	r21, r25
    5ba8:	69 2f       	mov	r22, r25
    5baa:	79 2f       	mov	r23, r25
    5bac:	89 2f       	mov	r24, r25
    5bae:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    5bb2:	0f e0       	ldi	r16, 0x0F	; 15
    5bb4:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ashrdi3>
    5bb8:	20 93 47 27 	sts	0x2747, r18	; 0x802747 <g_twi1_gyro_1_gyro_x_mdps>
    5bbc:	30 93 48 27 	sts	0x2748, r19	; 0x802748 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    5bc0:	40 93 49 27 	sts	0x2749, r20	; 0x802749 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    5bc4:	50 93 4a 27 	sts	0x274A, r21	; 0x80274a <g_twi1_gyro_1_gyro_x_mdps+0x3>
    5bc8:	25 2d       	mov	r18, r5
    5bca:	96 2d       	mov	r25, r6
    5bcc:	99 0f       	add	r25, r25
    5bce:	99 0b       	sbc	r25, r25
    5bd0:	00 e0       	ldi	r16, 0x00	; 0
    5bd2:	36 2d       	mov	r19, r6
    5bd4:	49 2f       	mov	r20, r25
    5bd6:	59 2f       	mov	r21, r25
    5bd8:	69 2f       	mov	r22, r25
    5bda:	79 2f       	mov	r23, r25
    5bdc:	89 2f       	mov	r24, r25
    5bde:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    5be2:	0f e0       	ldi	r16, 0x0F	; 15
    5be4:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ashrdi3>
    5be8:	20 93 43 27 	sts	0x2743, r18	; 0x802743 <g_twi1_gyro_1_gyro_y_mdps>
    5bec:	30 93 44 27 	sts	0x2744, r19	; 0x802744 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    5bf0:	40 93 45 27 	sts	0x2745, r20	; 0x802745 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    5bf4:	50 93 46 27 	sts	0x2746, r21	; 0x802746 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    5bf8:	27 2d       	mov	r18, r7
    5bfa:	98 2d       	mov	r25, r8
    5bfc:	99 0f       	add	r25, r25
    5bfe:	99 0b       	sbc	r25, r25
    5c00:	00 e0       	ldi	r16, 0x00	; 0
    5c02:	38 2d       	mov	r19, r8
    5c04:	49 2f       	mov	r20, r25
    5c06:	59 2f       	mov	r21, r25
    5c08:	69 2f       	mov	r22, r25
    5c0a:	79 2f       	mov	r23, r25
    5c0c:	89 2f       	mov	r24, r25
    5c0e:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    5c12:	0f e0       	ldi	r16, 0x0F	; 15
    5c14:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ashrdi3>
    5c18:	20 93 3f 27 	sts	0x273F, r18	; 0x80273f <g_twi1_gyro_1_gyro_z_mdps>
    5c1c:	30 93 40 27 	sts	0x2740, r19	; 0x802740 <g_twi1_gyro_1_gyro_z_mdps+0x1>
    5c20:	40 93 41 27 	sts	0x2741, r20	; 0x802741 <g_twi1_gyro_1_gyro_z_mdps+0x2>
    5c24:	50 93 42 27 	sts	0x2742, r21	; 0x802742 <g_twi1_gyro_1_gyro_z_mdps+0x3>
    5c28:	9f be       	out	0x3f, r9	; 63
    5c2a:	8f b7       	in	r24, 0x3f	; 63
    5c2c:	8d 83       	std	Y+5, r24	; 0x05
    5c2e:	f8 94       	cli
    5c30:	8d 81       	ldd	r24, Y+5	; 0x05
    5c32:	20 91 39 27 	lds	r18, 0x2739	; 0x802739 <g_twi1_gyro_2_mag_x>
    5c36:	30 91 3a 27 	lds	r19, 0x273A	; 0x80273a <g_twi1_gyro_2_mag_x+0x1>
    5c3a:	e0 90 37 27 	lds	r14, 0x2737	; 0x802737 <g_twi1_gyro_2_mag_y>
    5c3e:	f0 90 38 27 	lds	r15, 0x2738	; 0x802738 <g_twi1_gyro_2_mag_y+0x1>
    5c42:	a0 90 35 27 	lds	r10, 0x2735	; 0x802735 <g_twi1_gyro_2_mag_z>
    5c46:	b0 90 36 27 	lds	r11, 0x2736	; 0x802736 <g_twi1_gyro_2_mag_z+0x1>
    5c4a:	00 91 61 27 	lds	r16, 0x2761	; 0x802761 <g_twi1_gyro_1_temp>
    5c4e:	10 91 62 27 	lds	r17, 0x2762	; 0x802762 <g_twi1_gyro_1_temp+0x1>
    5c52:	8f bf       	out	0x3f, r24	; 63
    5c54:	a0 91 43 20 	lds	r26, 0x2043	; 0x802043 <g_twi1_gyro_2_mag_factx>
    5c58:	b0 91 44 20 	lds	r27, 0x2044	; 0x802044 <g_twi1_gyro_2_mag_factx+0x1>
    5c5c:	e0 91 3d 27 	lds	r30, 0x273D	; 0x80273d <g_twi1_gyro_2_asax>
    5c60:	33 23       	and	r19, r19
    5c62:	2c f1       	brlt	.+74     	; 0x5cae <task_twi1_gyro+0x384>
    5c64:	0e 94 c0 7c 	call	0xf980	; 0xf980 <__mulhisi3>
    5c68:	9b 01       	movw	r18, r22
    5c6a:	ac 01       	movw	r20, r24
    5c6c:	8e 2f       	mov	r24, r30
    5c6e:	ee 0f       	add	r30, r30
    5c70:	99 0b       	sbc	r25, r25
    5c72:	aa 0b       	sbc	r26, r26
    5c74:	bb 0b       	sbc	r27, r27
    5c76:	bc 01       	movw	r22, r24
    5c78:	cd 01       	movw	r24, r26
    5c7a:	60 58       	subi	r22, 0x80	; 128
    5c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c7e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c80:	9f 4f       	sbci	r25, 0xFF	; 255
    5c82:	0e 94 44 7c 	call	0xf888	; 0xf888 <__mulsi3>
    5c86:	2a e0       	ldi	r18, 0x0A	; 10
    5c88:	30 e0       	ldi	r19, 0x00	; 0
    5c8a:	40 e0       	ldi	r20, 0x00	; 0
    5c8c:	50 e0       	ldi	r21, 0x00	; 0
    5c8e:	0e 94 9c 7c 	call	0xf938	; 0xf938 <__divmodsi4>
    5c92:	29 01       	movw	r4, r18
    5c94:	3a 01       	movw	r6, r20
    5c96:	80 e8       	ldi	r24, 0x80	; 128
    5c98:	48 0e       	add	r4, r24
    5c9a:	51 1c       	adc	r5, r1
    5c9c:	61 1c       	adc	r6, r1
    5c9e:	71 1c       	adc	r7, r1
    5ca0:	45 2c       	mov	r4, r5
    5ca2:	56 2c       	mov	r5, r6
    5ca4:	67 2c       	mov	r6, r7
    5ca6:	77 24       	eor	r7, r7
    5ca8:	67 fc       	sbrc	r6, 7
    5caa:	7a 94       	dec	r7
    5cac:	24 c0       	rjmp	.+72     	; 0x5cf6 <task_twi1_gyro+0x3cc>
    5cae:	0e 94 c0 7c 	call	0xf980	; 0xf980 <__mulhisi3>
    5cb2:	9b 01       	movw	r18, r22
    5cb4:	ac 01       	movw	r20, r24
    5cb6:	8e 2f       	mov	r24, r30
    5cb8:	ee 0f       	add	r30, r30
    5cba:	99 0b       	sbc	r25, r25
    5cbc:	aa 0b       	sbc	r26, r26
    5cbe:	bb 0b       	sbc	r27, r27
    5cc0:	bc 01       	movw	r22, r24
    5cc2:	cd 01       	movw	r24, r26
    5cc4:	60 58       	subi	r22, 0x80	; 128
    5cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    5cc8:	8f 4f       	sbci	r24, 0xFF	; 255
    5cca:	9f 4f       	sbci	r25, 0xFF	; 255
    5ccc:	0e 94 44 7c 	call	0xf888	; 0xf888 <__mulsi3>
    5cd0:	2a e0       	ldi	r18, 0x0A	; 10
    5cd2:	30 e0       	ldi	r19, 0x00	; 0
    5cd4:	40 e0       	ldi	r20, 0x00	; 0
    5cd6:	50 e0       	ldi	r21, 0x00	; 0
    5cd8:	0e 94 9c 7c 	call	0xf938	; 0xf938 <__divmodsi4>
    5cdc:	29 01       	movw	r4, r18
    5cde:	3a 01       	movw	r6, r20
    5ce0:	80 e8       	ldi	r24, 0x80	; 128
    5ce2:	48 1a       	sub	r4, r24
    5ce4:	51 08       	sbc	r5, r1
    5ce6:	61 08       	sbc	r6, r1
    5ce8:	71 08       	sbc	r7, r1
    5cea:	45 2c       	mov	r4, r5
    5cec:	56 2c       	mov	r5, r6
    5cee:	67 2c       	mov	r6, r7
    5cf0:	77 24       	eor	r7, r7
    5cf2:	67 fc       	sbrc	r6, 7
    5cf4:	7a 94       	dec	r7
    5cf6:	a0 91 41 20 	lds	r26, 0x2041	; 0x802041 <g_twi1_gyro_2_mag_facty>
    5cfa:	b0 91 42 20 	lds	r27, 0x2042	; 0x802042 <g_twi1_gyro_2_mag_facty+0x1>
    5cfe:	e0 91 3c 27 	lds	r30, 0x273C	; 0x80273c <g_twi1_gyro_2_asay>
    5d02:	ff 20       	and	r15, r15
    5d04:	34 f1       	brlt	.+76     	; 0x5d52 <task_twi1_gyro+0x428>
    5d06:	97 01       	movw	r18, r14
    5d08:	0e 94 c0 7c 	call	0xf980	; 0xf980 <__mulhisi3>
    5d0c:	9b 01       	movw	r18, r22
    5d0e:	ac 01       	movw	r20, r24
    5d10:	8e 2f       	mov	r24, r30
    5d12:	ee 0f       	add	r30, r30
    5d14:	99 0b       	sbc	r25, r25
    5d16:	aa 0b       	sbc	r26, r26
    5d18:	bb 0b       	sbc	r27, r27
    5d1a:	bc 01       	movw	r22, r24
    5d1c:	cd 01       	movw	r24, r26
    5d1e:	60 58       	subi	r22, 0x80	; 128
    5d20:	7f 4f       	sbci	r23, 0xFF	; 255
    5d22:	8f 4f       	sbci	r24, 0xFF	; 255
    5d24:	9f 4f       	sbci	r25, 0xFF	; 255
    5d26:	0e 94 44 7c 	call	0xf888	; 0xf888 <__mulsi3>
    5d2a:	2a e0       	ldi	r18, 0x0A	; 10
    5d2c:	30 e0       	ldi	r19, 0x00	; 0
    5d2e:	40 e0       	ldi	r20, 0x00	; 0
    5d30:	50 e0       	ldi	r21, 0x00	; 0
    5d32:	0e 94 9c 7c 	call	0xf938	; 0xf938 <__divmodsi4>
    5d36:	69 01       	movw	r12, r18
    5d38:	7a 01       	movw	r14, r20
    5d3a:	80 e8       	ldi	r24, 0x80	; 128
    5d3c:	c8 0e       	add	r12, r24
    5d3e:	d1 1c       	adc	r13, r1
    5d40:	e1 1c       	adc	r14, r1
    5d42:	f1 1c       	adc	r15, r1
    5d44:	cd 2c       	mov	r12, r13
    5d46:	de 2c       	mov	r13, r14
    5d48:	ef 2c       	mov	r14, r15
    5d4a:	ff 24       	eor	r15, r15
    5d4c:	e7 fc       	sbrc	r14, 7
    5d4e:	fa 94       	dec	r15
    5d50:	25 c0       	rjmp	.+74     	; 0x5d9c <task_twi1_gyro+0x472>
    5d52:	97 01       	movw	r18, r14
    5d54:	0e 94 c0 7c 	call	0xf980	; 0xf980 <__mulhisi3>
    5d58:	9b 01       	movw	r18, r22
    5d5a:	ac 01       	movw	r20, r24
    5d5c:	8e 2f       	mov	r24, r30
    5d5e:	ee 0f       	add	r30, r30
    5d60:	99 0b       	sbc	r25, r25
    5d62:	aa 0b       	sbc	r26, r26
    5d64:	bb 0b       	sbc	r27, r27
    5d66:	bc 01       	movw	r22, r24
    5d68:	cd 01       	movw	r24, r26
    5d6a:	60 58       	subi	r22, 0x80	; 128
    5d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    5d70:	9f 4f       	sbci	r25, 0xFF	; 255
    5d72:	0e 94 44 7c 	call	0xf888	; 0xf888 <__mulsi3>
    5d76:	2a e0       	ldi	r18, 0x0A	; 10
    5d78:	30 e0       	ldi	r19, 0x00	; 0
    5d7a:	40 e0       	ldi	r20, 0x00	; 0
    5d7c:	50 e0       	ldi	r21, 0x00	; 0
    5d7e:	0e 94 9c 7c 	call	0xf938	; 0xf938 <__divmodsi4>
    5d82:	69 01       	movw	r12, r18
    5d84:	7a 01       	movw	r14, r20
    5d86:	80 e8       	ldi	r24, 0x80	; 128
    5d88:	c8 1a       	sub	r12, r24
    5d8a:	d1 08       	sbc	r13, r1
    5d8c:	e1 08       	sbc	r14, r1
    5d8e:	f1 08       	sbc	r15, r1
    5d90:	cd 2c       	mov	r12, r13
    5d92:	de 2c       	mov	r13, r14
    5d94:	ef 2c       	mov	r14, r15
    5d96:	ff 24       	eor	r15, r15
    5d98:	e7 fc       	sbrc	r14, 7
    5d9a:	fa 94       	dec	r15
    5d9c:	a0 91 3f 20 	lds	r26, 0x203F	; 0x80203f <g_twi1_gyro_2_mag_factz>
    5da0:	b0 91 40 20 	lds	r27, 0x2040	; 0x802040 <g_twi1_gyro_2_mag_factz+0x1>
    5da4:	e0 91 3b 27 	lds	r30, 0x273B	; 0x80273b <g_twi1_gyro_2_asaz>
    5da8:	bb 20       	and	r11, r11
    5daa:	34 f1       	brlt	.+76     	; 0x5df8 <task_twi1_gyro+0x4ce>
    5dac:	95 01       	movw	r18, r10
    5dae:	0e 94 c0 7c 	call	0xf980	; 0xf980 <__mulhisi3>
    5db2:	9b 01       	movw	r18, r22
    5db4:	ac 01       	movw	r20, r24
    5db6:	8e 2f       	mov	r24, r30
    5db8:	ee 0f       	add	r30, r30
    5dba:	99 0b       	sbc	r25, r25
    5dbc:	aa 0b       	sbc	r26, r26
    5dbe:	bb 0b       	sbc	r27, r27
    5dc0:	bc 01       	movw	r22, r24
    5dc2:	cd 01       	movw	r24, r26
    5dc4:	60 58       	subi	r22, 0x80	; 128
    5dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    5dc8:	8f 4f       	sbci	r24, 0xFF	; 255
    5dca:	9f 4f       	sbci	r25, 0xFF	; 255
    5dcc:	0e 94 44 7c 	call	0xf888	; 0xf888 <__mulsi3>
    5dd0:	2a e0       	ldi	r18, 0x0A	; 10
    5dd2:	30 e0       	ldi	r19, 0x00	; 0
    5dd4:	40 e0       	ldi	r20, 0x00	; 0
    5dd6:	50 e0       	ldi	r21, 0x00	; 0
    5dd8:	0e 94 9c 7c 	call	0xf938	; 0xf938 <__divmodsi4>
    5ddc:	49 01       	movw	r8, r18
    5dde:	5a 01       	movw	r10, r20
    5de0:	80 e8       	ldi	r24, 0x80	; 128
    5de2:	88 0e       	add	r8, r24
    5de4:	91 1c       	adc	r9, r1
    5de6:	a1 1c       	adc	r10, r1
    5de8:	b1 1c       	adc	r11, r1
    5dea:	89 2c       	mov	r8, r9
    5dec:	9a 2c       	mov	r9, r10
    5dee:	ab 2c       	mov	r10, r11
    5df0:	bb 24       	eor	r11, r11
    5df2:	a7 fc       	sbrc	r10, 7
    5df4:	ba 94       	dec	r11
    5df6:	25 c0       	rjmp	.+74     	; 0x5e42 <task_twi1_gyro+0x518>
    5df8:	95 01       	movw	r18, r10
    5dfa:	0e 94 c0 7c 	call	0xf980	; 0xf980 <__mulhisi3>
    5dfe:	9b 01       	movw	r18, r22
    5e00:	ac 01       	movw	r20, r24
    5e02:	8e 2f       	mov	r24, r30
    5e04:	ee 0f       	add	r30, r30
    5e06:	99 0b       	sbc	r25, r25
    5e08:	aa 0b       	sbc	r26, r26
    5e0a:	bb 0b       	sbc	r27, r27
    5e0c:	bc 01       	movw	r22, r24
    5e0e:	cd 01       	movw	r24, r26
    5e10:	60 58       	subi	r22, 0x80	; 128
    5e12:	7f 4f       	sbci	r23, 0xFF	; 255
    5e14:	8f 4f       	sbci	r24, 0xFF	; 255
    5e16:	9f 4f       	sbci	r25, 0xFF	; 255
    5e18:	0e 94 44 7c 	call	0xf888	; 0xf888 <__mulsi3>
    5e1c:	2a e0       	ldi	r18, 0x0A	; 10
    5e1e:	30 e0       	ldi	r19, 0x00	; 0
    5e20:	40 e0       	ldi	r20, 0x00	; 0
    5e22:	50 e0       	ldi	r21, 0x00	; 0
    5e24:	0e 94 9c 7c 	call	0xf938	; 0xf938 <__divmodsi4>
    5e28:	49 01       	movw	r8, r18
    5e2a:	5a 01       	movw	r10, r20
    5e2c:	80 e8       	ldi	r24, 0x80	; 128
    5e2e:	88 1a       	sub	r8, r24
    5e30:	91 08       	sbc	r9, r1
    5e32:	a1 08       	sbc	r10, r1
    5e34:	b1 08       	sbc	r11, r1
    5e36:	89 2c       	mov	r8, r9
    5e38:	9a 2c       	mov	r9, r10
    5e3a:	ab 2c       	mov	r10, r11
    5e3c:	bb 24       	eor	r11, r11
    5e3e:	a7 fc       	sbrc	r10, 7
    5e40:	ba 94       	dec	r11
    5e42:	80 91 5f 27 	lds	r24, 0x275F	; 0x80275f <g_twi1_gyro_1_temp_RTofs>
    5e46:	90 91 60 27 	lds	r25, 0x2760	; 0x802760 <g_twi1_gyro_1_temp_RTofs+0x1>
    5e4a:	d8 01       	movw	r26, r16
    5e4c:	a8 1b       	sub	r26, r24
    5e4e:	b9 0b       	sbc	r27, r25
    5e50:	24 e6       	ldi	r18, 0x64	; 100
    5e52:	30 e0       	ldi	r19, 0x00	; 0
    5e54:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <__usmulhisi3>
    5e58:	20 91 5d 20 	lds	r18, 0x205D	; 0x80205d <g_twi1_gyro_1_temp_sens>
    5e5c:	30 91 5e 20 	lds	r19, 0x205E	; 0x80205e <g_twi1_gyro_1_temp_sens+0x1>
    5e60:	03 2e       	mov	r0, r19
    5e62:	00 0c       	add	r0, r0
    5e64:	44 0b       	sbc	r20, r20
    5e66:	55 0b       	sbc	r21, r21
    5e68:	0e 94 9c 7c 	call	0xf938	; 0xf938 <__divmodsi4>
    5e6c:	2c 5c       	subi	r18, 0xCC	; 204
    5e6e:	37 4f       	sbci	r19, 0xF7	; 247
    5e70:	8f b7       	in	r24, 0x3f	; 63
    5e72:	8e 83       	std	Y+6, r24	; 0x06
    5e74:	f8 94       	cli
    5e76:	8e 81       	ldd	r24, Y+6	; 0x06
    5e78:	40 92 31 27 	sts	0x2731, r4	; 0x802731 <g_twi1_gyro_2_mag_x_nT>
    5e7c:	50 92 32 27 	sts	0x2732, r5	; 0x802732 <g_twi1_gyro_2_mag_x_nT+0x1>
    5e80:	60 92 33 27 	sts	0x2733, r6	; 0x802733 <g_twi1_gyro_2_mag_x_nT+0x2>
    5e84:	70 92 34 27 	sts	0x2734, r7	; 0x802734 <g_twi1_gyro_2_mag_x_nT+0x3>
    5e88:	c0 92 2d 27 	sts	0x272D, r12	; 0x80272d <g_twi1_gyro_2_mag_y_nT>
    5e8c:	d0 92 2e 27 	sts	0x272E, r13	; 0x80272e <g_twi1_gyro_2_mag_y_nT+0x1>
    5e90:	e0 92 2f 27 	sts	0x272F, r14	; 0x80272f <g_twi1_gyro_2_mag_y_nT+0x2>
    5e94:	f0 92 30 27 	sts	0x2730, r15	; 0x802730 <g_twi1_gyro_2_mag_y_nT+0x3>
    5e98:	80 92 29 27 	sts	0x2729, r8	; 0x802729 <g_twi1_gyro_2_mag_z_nT>
    5e9c:	90 92 2a 27 	sts	0x272A, r9	; 0x80272a <g_twi1_gyro_2_mag_z_nT+0x1>
    5ea0:	a0 92 2b 27 	sts	0x272B, r10	; 0x80272b <g_twi1_gyro_2_mag_z_nT+0x2>
    5ea4:	b0 92 2c 27 	sts	0x272C, r11	; 0x80272c <g_twi1_gyro_2_mag_z_nT+0x3>
    5ea8:	20 93 5d 27 	sts	0x275D, r18	; 0x80275d <g_twi1_gyro_1_temp_deg_100>
    5eac:	30 93 5e 27 	sts	0x275E, r19	; 0x80275e <g_twi1_gyro_1_temp_deg_100+0x1>
    5eb0:	8f bf       	out	0x3f, r24	; 63
    5eb2:	26 96       	adiw	r28, 0x06	; 6
    5eb4:	cd bf       	out	0x3d, r28	; 61
    5eb6:	de bf       	out	0x3e, r29	; 62
    5eb8:	df 91       	pop	r29
    5eba:	cf 91       	pop	r28
    5ebc:	1f 91       	pop	r17
    5ebe:	0f 91       	pop	r16
    5ec0:	ff 90       	pop	r15
    5ec2:	ef 90       	pop	r14
    5ec4:	df 90       	pop	r13
    5ec6:	cf 90       	pop	r12
    5ec8:	bf 90       	pop	r11
    5eca:	af 90       	pop	r10
    5ecc:	9f 90       	pop	r9
    5ece:	8f 90       	pop	r8
    5ed0:	7f 90       	pop	r7
    5ed2:	6f 90       	pop	r6
    5ed4:	5f 90       	pop	r5
    5ed6:	4f 90       	pop	r4
    5ed8:	08 95       	ret

00005eda <task_twi1_baro>:
    5eda:	2f 92       	push	r2
    5edc:	3f 92       	push	r3
    5ede:	4f 92       	push	r4
    5ee0:	5f 92       	push	r5
    5ee2:	6f 92       	push	r6
    5ee4:	7f 92       	push	r7
    5ee6:	8f 92       	push	r8
    5ee8:	9f 92       	push	r9
    5eea:	af 92       	push	r10
    5eec:	bf 92       	push	r11
    5eee:	cf 92       	push	r12
    5ef0:	df 92       	push	r13
    5ef2:	ef 92       	push	r14
    5ef4:	ff 92       	push	r15
    5ef6:	0f 93       	push	r16
    5ef8:	1f 93       	push	r17
    5efa:	cf 93       	push	r28
    5efc:	df 93       	push	r29
    5efe:	cd b7       	in	r28, 0x3d	; 61
    5f00:	de b7       	in	r29, 0x3e	; 62
    5f02:	a6 97       	sbiw	r28, 0x26	; 38
    5f04:	cd bf       	out	0x3d, r28	; 61
    5f06:	de bf       	out	0x3e, r29	; 62
    5f08:	8f b7       	in	r24, 0x3f	; 63
    5f0a:	8a 83       	std	Y+2, r24	; 0x02
    5f0c:	f8 94       	cli
    5f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    5f10:	20 91 12 27 	lds	r18, 0x2712	; 0x802712 <g_twi1_baro_d1>
    5f14:	30 91 13 27 	lds	r19, 0x2713	; 0x802713 <g_twi1_baro_d1+0x1>
    5f18:	40 91 14 27 	lds	r20, 0x2714	; 0x802714 <g_twi1_baro_d1+0x2>
    5f1c:	50 91 15 27 	lds	r21, 0x2715	; 0x802715 <g_twi1_baro_d1+0x3>
    5f20:	2f 8b       	std	Y+23, r18	; 0x17
    5f22:	38 8f       	std	Y+24, r19	; 0x18
    5f24:	49 8f       	std	Y+25, r20	; 0x19
    5f26:	5a 8f       	std	Y+26, r21	; 0x1a
    5f28:	40 91 0e 27 	lds	r20, 0x270E	; 0x80270e <g_twi1_baro_d2>
    5f2c:	50 91 0f 27 	lds	r21, 0x270F	; 0x80270f <g_twi1_baro_d2+0x1>
    5f30:	60 91 10 27 	lds	r22, 0x2710	; 0x802710 <g_twi1_baro_d2+0x2>
    5f34:	70 91 11 27 	lds	r23, 0x2711	; 0x802711 <g_twi1_baro_d2+0x3>
    5f38:	8f bf       	out	0x3f, r24	; 63
    5f3a:	8f 89       	ldd	r24, Y+23	; 0x17
    5f3c:	98 8d       	ldd	r25, Y+24	; 0x18
    5f3e:	a9 8d       	ldd	r26, Y+25	; 0x19
    5f40:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5f42:	89 2b       	or	r24, r25
    5f44:	8a 2b       	or	r24, r26
    5f46:	8b 2b       	or	r24, r27
    5f48:	31 f4       	brne	.+12     	; 0x5f56 <task_twi1_baro+0x7c>
    5f4a:	41 15       	cp	r20, r1
    5f4c:	51 05       	cpc	r21, r1
    5f4e:	61 05       	cpc	r22, r1
    5f50:	71 05       	cpc	r23, r1
    5f52:	09 f4       	brne	.+2      	; 0x5f56 <task_twi1_baro+0x7c>
    5f54:	fe c1       	rjmp	.+1020   	; 0x6352 <__stack+0x353>
    5f56:	0f 2e       	mov	r0, r31
    5f58:	f6 e1       	ldi	r31, 0x16	; 22
    5f5a:	2f 2e       	mov	r2, r31
    5f5c:	f7 e2       	ldi	r31, 0x27	; 39
    5f5e:	3f 2e       	mov	r3, r31
    5f60:	f0 2d       	mov	r31, r0
    5f62:	d1 01       	movw	r26, r2
    5f64:	1a 96       	adiw	r26, 0x0a	; 10
    5f66:	8d 91       	ld	r24, X+
    5f68:	9c 91       	ld	r25, X
    5f6a:	1b 97       	sbiw	r26, 0x0b	; 11
    5f6c:	a0 e0       	ldi	r26, 0x00	; 0
    5f6e:	b0 e0       	ldi	r27, 0x00	; 0
    5f70:	ba 2f       	mov	r27, r26
    5f72:	a9 2f       	mov	r26, r25
    5f74:	98 2f       	mov	r25, r24
    5f76:	88 27       	eor	r24, r24
    5f78:	2a 01       	movw	r4, r20
    5f7a:	3b 01       	movw	r6, r22
    5f7c:	48 1a       	sub	r4, r24
    5f7e:	59 0a       	sbc	r5, r25
    5f80:	6a 0a       	sbc	r6, r26
    5f82:	7b 0a       	sbc	r7, r27
    5f84:	a3 01       	movw	r20, r6
    5f86:	92 01       	movw	r18, r4
    5f88:	55 0f       	add	r21, r21
    5f8a:	22 0b       	sbc	r18, r18
    5f8c:	32 2f       	mov	r19, r18
    5f8e:	a9 01       	movw	r20, r18
    5f90:	2b 83       	std	Y+3, r18	; 0x03
    5f92:	3c 83       	std	Y+4, r19	; 0x04
    5f94:	4d 83       	std	Y+5, r20	; 0x05
    5f96:	5e 83       	std	Y+6, r21	; 0x06
    5f98:	d1 01       	movw	r26, r2
    5f9a:	1c 96       	adiw	r26, 0x0c	; 12
    5f9c:	4d 91       	ld	r20, X+
    5f9e:	5c 91       	ld	r21, X
    5fa0:	1d 97       	sbiw	r26, 0x0d	; 13
    5fa2:	a4 2c       	mov	r10, r4
    5fa4:	b5 2c       	mov	r11, r5
    5fa6:	c6 2c       	mov	r12, r6
    5fa8:	d7 2c       	mov	r13, r7
    5faa:	eb 80       	ldd	r14, Y+3	; 0x03
    5fac:	fe 2c       	mov	r15, r14
    5fae:	0e 2d       	mov	r16, r14
    5fb0:	1e 2d       	mov	r17, r14
    5fb2:	24 2f       	mov	r18, r20
    5fb4:	35 2f       	mov	r19, r21
    5fb6:	40 e0       	ldi	r20, 0x00	; 0
    5fb8:	50 e0       	ldi	r21, 0x00	; 0
    5fba:	60 e0       	ldi	r22, 0x00	; 0
    5fbc:	70 e0       	ldi	r23, 0x00	; 0
    5fbe:	80 e0       	ldi	r24, 0x00	; 0
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    5fc6:	07 e1       	ldi	r16, 0x17	; 23
    5fc8:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ashrdi3>
    5fcc:	2b 87       	std	Y+11, r18	; 0x0b
    5fce:	3c 87       	std	Y+12, r19	; 0x0c
    5fd0:	4d 87       	std	Y+13, r20	; 0x0d
    5fd2:	5e 87       	std	Y+14, r21	; 0x0e
    5fd4:	2b 85       	ldd	r18, Y+11	; 0x0b
    5fd6:	3c 85       	ldd	r19, Y+12	; 0x0c
    5fd8:	4d 85       	ldd	r20, Y+13	; 0x0d
    5fda:	5e 85       	ldd	r21, Y+14	; 0x0e
    5fdc:	2b a3       	std	Y+35, r18	; 0x23
    5fde:	3c a3       	std	Y+36, r19	; 0x24
    5fe0:	4d a3       	std	Y+37, r20	; 0x25
    5fe2:	5e a3       	std	Y+38, r21	; 0x26
    5fe4:	ba 01       	movw	r22, r20
    5fe6:	a9 01       	movw	r20, r18
    5fe8:	40 53       	subi	r20, 0x30	; 48
    5fea:	58 4f       	sbci	r21, 0xF8	; 248
    5fec:	6f 4f       	sbci	r22, 0xFF	; 255
    5fee:	7f 4f       	sbci	r23, 0xFF	; 255
    5ff0:	4b 8b       	std	Y+19, r20	; 0x13
    5ff2:	5c 8b       	std	Y+20, r21	; 0x14
    5ff4:	6d 8b       	std	Y+21, r22	; 0x15
    5ff6:	7e 8b       	std	Y+22, r23	; 0x16
    5ff8:	d1 01       	movw	r26, r2
    5ffa:	18 96       	adiw	r26, 0x08	; 8
    5ffc:	4d 91       	ld	r20, X+
    5ffe:	5c 91       	ld	r21, X
    6000:	19 97       	sbiw	r26, 0x09	; 9
    6002:	fe 2c       	mov	r15, r14
    6004:	0e 2d       	mov	r16, r14
    6006:	24 2f       	mov	r18, r20
    6008:	35 2f       	mov	r19, r21
    600a:	40 e0       	ldi	r20, 0x00	; 0
    600c:	50 e0       	ldi	r21, 0x00	; 0
    600e:	60 e0       	ldi	r22, 0x00	; 0
    6010:	70 e0       	ldi	r23, 0x00	; 0
    6012:	80 e0       	ldi	r24, 0x00	; 0
    6014:	90 e0       	ldi	r25, 0x00	; 0
    6016:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    601a:	06 e0       	ldi	r16, 0x06	; 6
    601c:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ashrdi3>
    6020:	2f 87       	std	Y+15, r18	; 0x0f
    6022:	38 8b       	std	Y+16, r19	; 0x10
    6024:	84 2e       	mov	r8, r20
    6026:	95 2e       	mov	r9, r21
    6028:	b6 2f       	mov	r27, r22
    602a:	a7 2f       	mov	r26, r23
    602c:	89 8b       	std	Y+17, r24	; 0x11
    602e:	9a 8b       	std	Y+18, r25	; 0x12
    6030:	f1 01       	movw	r30, r2
    6032:	a4 80       	ldd	r10, Z+4	; 0x04
    6034:	b5 80       	ldd	r11, Z+5	; 0x05
    6036:	2a 2d       	mov	r18, r10
    6038:	3b 2d       	mov	r19, r11
    603a:	40 e0       	ldi	r20, 0x00	; 0
    603c:	50 e0       	ldi	r21, 0x00	; 0
    603e:	60 e0       	ldi	r22, 0x00	; 0
    6040:	70 e0       	ldi	r23, 0x00	; 0
    6042:	80 e0       	ldi	r24, 0x00	; 0
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	01 e1       	ldi	r16, 0x11	; 17
    6048:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <__ashldi3>
    604c:	a2 2e       	mov	r10, r18
    604e:	b3 2e       	mov	r11, r19
    6050:	c4 2e       	mov	r12, r20
    6052:	d5 2e       	mov	r13, r21
    6054:	e6 2e       	mov	r14, r22
    6056:	f7 2e       	mov	r15, r23
    6058:	08 2f       	mov	r16, r24
    605a:	19 2f       	mov	r17, r25
    605c:	2f 85       	ldd	r18, Y+15	; 0x0f
    605e:	38 89       	ldd	r19, Y+16	; 0x10
    6060:	48 2d       	mov	r20, r8
    6062:	59 2d       	mov	r21, r9
    6064:	6b 2f       	mov	r22, r27
    6066:	7a 2f       	mov	r23, r26
    6068:	89 89       	ldd	r24, Y+17	; 0x11
    606a:	9a 89       	ldd	r25, Y+18	; 0x12
    606c:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__adddi3>
    6070:	2f 87       	std	Y+15, r18	; 0x0f
    6072:	38 8b       	std	Y+16, r19	; 0x10
    6074:	4b 8f       	std	Y+27, r20	; 0x1b
    6076:	5c 8f       	std	Y+28, r21	; 0x1c
    6078:	6d 8f       	std	Y+29, r22	; 0x1d
    607a:	7e 8f       	std	Y+30, r23	; 0x1e
    607c:	8f 8f       	std	Y+31, r24	; 0x1f
    607e:	98 a3       	std	Y+32, r25	; 0x20
    6080:	46 81       	ldd	r20, Z+6	; 0x06
    6082:	57 81       	ldd	r21, Z+7	; 0x07
    6084:	a4 2c       	mov	r10, r4
    6086:	b5 2c       	mov	r11, r5
    6088:	c6 2c       	mov	r12, r6
    608a:	d7 2c       	mov	r13, r7
    608c:	eb 80       	ldd	r14, Y+3	; 0x03
    608e:	fe 2c       	mov	r15, r14
    6090:	0e 2d       	mov	r16, r14
    6092:	1e 2d       	mov	r17, r14
    6094:	24 2f       	mov	r18, r20
    6096:	35 2f       	mov	r19, r21
    6098:	40 e0       	ldi	r20, 0x00	; 0
    609a:	50 e0       	ldi	r21, 0x00	; 0
    609c:	60 e0       	ldi	r22, 0x00	; 0
    609e:	70 e0       	ldi	r23, 0x00	; 0
    60a0:	80 e0       	ldi	r24, 0x00	; 0
    60a2:	90 e0       	ldi	r25, 0x00	; 0
    60a4:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    60a8:	07 e0       	ldi	r16, 0x07	; 7
    60aa:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ashrdi3>
    60ae:	29 8b       	std	Y+17, r18	; 0x11
    60b0:	3a 8b       	std	Y+18, r19	; 0x12
    60b2:	84 2e       	mov	r8, r20
    60b4:	95 2e       	mov	r9, r21
    60b6:	b6 2f       	mov	r27, r22
    60b8:	a7 2f       	mov	r26, r23
    60ba:	89 a3       	std	Y+33, r24	; 0x21
    60bc:	9a a3       	std	Y+34, r25	; 0x22
    60be:	f1 01       	movw	r30, r2
    60c0:	a2 80       	ldd	r10, Z+2	; 0x02
    60c2:	b3 80       	ldd	r11, Z+3	; 0x03
    60c4:	2a 2d       	mov	r18, r10
    60c6:	3b 2d       	mov	r19, r11
    60c8:	40 e0       	ldi	r20, 0x00	; 0
    60ca:	50 e0       	ldi	r21, 0x00	; 0
    60cc:	60 e0       	ldi	r22, 0x00	; 0
    60ce:	70 e0       	ldi	r23, 0x00	; 0
    60d0:	80 e0       	ldi	r24, 0x00	; 0
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	00 e1       	ldi	r16, 0x10	; 16
    60d6:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <__ashldi3>
    60da:	a2 2e       	mov	r10, r18
    60dc:	b3 2e       	mov	r11, r19
    60de:	c4 2e       	mov	r12, r20
    60e0:	d5 2e       	mov	r13, r21
    60e2:	e6 2e       	mov	r14, r22
    60e4:	f7 2e       	mov	r15, r23
    60e6:	08 2f       	mov	r16, r24
    60e8:	19 2f       	mov	r17, r25
    60ea:	29 89       	ldd	r18, Y+17	; 0x11
    60ec:	3a 89       	ldd	r19, Y+18	; 0x12
    60ee:	48 2d       	mov	r20, r8
    60f0:	59 2d       	mov	r21, r9
    60f2:	6b 2f       	mov	r22, r27
    60f4:	7a 2f       	mov	r23, r26
    60f6:	89 a1       	ldd	r24, Y+33	; 0x21
    60f8:	9a a1       	ldd	r25, Y+34	; 0x22
    60fa:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__adddi3>
    60fe:	32 2e       	mov	r3, r18
    6100:	23 2e       	mov	r2, r19
    6102:	49 8b       	std	Y+17, r20	; 0x11
    6104:	5a 8b       	std	Y+18, r21	; 0x12
    6106:	69 a3       	std	Y+33, r22	; 0x21
    6108:	7a a3       	std	Y+34, r23	; 0x22
    610a:	98 2e       	mov	r9, r24
    610c:	89 2e       	mov	r8, r25
    610e:	2b 89       	ldd	r18, Y+19	; 0x13
    6110:	3c 89       	ldd	r19, Y+20	; 0x14
    6112:	4d 89       	ldd	r20, Y+21	; 0x15
    6114:	5e 89       	ldd	r21, Y+22	; 0x16
    6116:	20 3d       	cpi	r18, 0xD0	; 208
    6118:	37 40       	sbci	r19, 0x07	; 7
    611a:	41 05       	cpc	r20, r1
    611c:	51 05       	cpc	r21, r1
    611e:	0c f0       	brlt	.+2      	; 0x6122 <__stack+0x123>
    6120:	d0 c0       	rjmp	.+416    	; 0x62c2 <__stack+0x2c3>
    6122:	a4 2c       	mov	r10, r4
    6124:	b5 2c       	mov	r11, r5
    6126:	c6 2c       	mov	r12, r6
    6128:	d7 2c       	mov	r13, r7
    612a:	eb 80       	ldd	r14, Y+3	; 0x03
    612c:	fe 2c       	mov	r15, r14
    612e:	0e 2d       	mov	r16, r14
    6130:	1e 2d       	mov	r17, r14
    6132:	24 2d       	mov	r18, r4
    6134:	35 2d       	mov	r19, r5
    6136:	46 2d       	mov	r20, r6
    6138:	57 2d       	mov	r21, r7
    613a:	60 2f       	mov	r22, r16
    613c:	70 2f       	mov	r23, r16
    613e:	80 2f       	mov	r24, r16
    6140:	9e 2d       	mov	r25, r14
    6142:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    6146:	0f e1       	ldi	r16, 0x1F	; 31
    6148:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ashrdi3>
    614c:	2b 83       	std	Y+3, r18	; 0x03
    614e:	3c 83       	std	Y+4, r19	; 0x04
    6150:	4d 83       	std	Y+5, r20	; 0x05
    6152:	5e 83       	std	Y+6, r21	; 0x06
    6154:	2b 85       	ldd	r18, Y+11	; 0x0b
    6156:	3c 85       	ldd	r19, Y+12	; 0x0c
    6158:	4d 85       	ldd	r20, Y+13	; 0x0d
    615a:	5e 85       	ldd	r21, Y+14	; 0x0e
    615c:	ca 01       	movw	r24, r20
    615e:	b9 01       	movw	r22, r18
    6160:	0e 94 44 7c 	call	0xf888	; 0xf888 <__mulsi3>
    6164:	2b 01       	movw	r4, r22
    6166:	3c 01       	movw	r6, r24
    6168:	ad e3       	ldi	r26, 0x3D	; 61
    616a:	b0 e0       	ldi	r27, 0x00	; 0
    616c:	9b 01       	movw	r18, r22
    616e:	ac 01       	movw	r20, r24
    6170:	0e 94 db 7c 	call	0xf9b6	; 0xf9b6 <__muluhisi3>
    6174:	7b 01       	movw	r14, r22
    6176:	8c 01       	movw	r16, r24
    6178:	68 94       	set
    617a:	13 f8       	bld	r1, 3
    617c:	15 95       	asr	r17
    617e:	07 95       	ror	r16
    6180:	f7 94       	ror	r15
    6182:	e7 94       	ror	r14
    6184:	16 94       	lsr	r1
    6186:	d1 f7       	brne	.-12     	; 0x617c <__stack+0x17d>
    6188:	44 0c       	add	r4, r4
    618a:	55 1c       	adc	r5, r5
    618c:	66 1c       	adc	r6, r6
    618e:	77 1c       	adc	r7, r7
    6190:	8b 89       	ldd	r24, Y+19	; 0x13
    6192:	9c 89       	ldd	r25, Y+20	; 0x14
    6194:	ad 89       	ldd	r26, Y+21	; 0x15
    6196:	be 89       	ldd	r27, Y+22	; 0x16
    6198:	84 32       	cpi	r24, 0x24	; 36
    619a:	9a 4f       	sbci	r25, 0xFA	; 250
    619c:	af 4f       	sbci	r26, 0xFF	; 255
    619e:	bf 4f       	sbci	r27, 0xFF	; 255
    61a0:	c4 f5       	brge	.+112    	; 0x6212 <__stack+0x213>
    61a2:	6b a1       	ldd	r22, Y+35	; 0x23
    61a4:	7c a1       	ldd	r23, Y+36	; 0x24
    61a6:	8d a1       	ldd	r24, Y+37	; 0x25
    61a8:	9e a1       	ldd	r25, Y+38	; 0x26
    61aa:	64 55       	subi	r22, 0x54	; 84
    61ac:	72 4f       	sbci	r23, 0xF2	; 242
    61ae:	8f 4f       	sbci	r24, 0xFF	; 255
    61b0:	9f 4f       	sbci	r25, 0xFF	; 255
    61b2:	9b 01       	movw	r18, r22
    61b4:	ac 01       	movw	r20, r24
    61b6:	0e 94 44 7c 	call	0xf888	; 0xf888 <__mulsi3>
    61ba:	9b 01       	movw	r18, r22
    61bc:	ac 01       	movw	r20, r24
    61be:	22 0f       	add	r18, r18
    61c0:	33 1f       	adc	r19, r19
    61c2:	44 1f       	adc	r20, r20
    61c4:	55 1f       	adc	r21, r21
    61c6:	dc 01       	movw	r26, r24
    61c8:	cb 01       	movw	r24, r22
    61ca:	82 0f       	add	r24, r18
    61cc:	93 1f       	adc	r25, r19
    61ce:	a4 1f       	adc	r26, r20
    61d0:	b5 1f       	adc	r27, r21
    61d2:	5c 01       	movw	r10, r24
    61d4:	6d 01       	movw	r12, r26
    61d6:	aa 0c       	add	r10, r10
    61d8:	bb 1c       	adc	r11, r11
    61da:	cc 1c       	adc	r12, r12
    61dc:	dd 1c       	adc	r13, r13
    61de:	aa 0c       	add	r10, r10
    61e0:	bb 1c       	adc	r11, r11
    61e2:	cc 1c       	adc	r12, r12
    61e4:	dd 1c       	adc	r13, r13
    61e6:	8a 0d       	add	r24, r10
    61e8:	9b 1d       	adc	r25, r11
    61ea:	ac 1d       	adc	r26, r12
    61ec:	bd 1d       	adc	r27, r13
    61ee:	e8 0e       	add	r14, r24
    61f0:	f9 1e       	adc	r15, r25
    61f2:	0a 1f       	adc	r16, r26
    61f4:	1b 1f       	adc	r17, r27
    61f6:	da 01       	movw	r26, r20
    61f8:	c9 01       	movw	r24, r18
    61fa:	88 0f       	add	r24, r24
    61fc:	99 1f       	adc	r25, r25
    61fe:	aa 1f       	adc	r26, r26
    6200:	bb 1f       	adc	r27, r27
    6202:	88 0f       	add	r24, r24
    6204:	99 1f       	adc	r25, r25
    6206:	aa 1f       	adc	r26, r26
    6208:	bb 1f       	adc	r27, r27
    620a:	48 0e       	add	r4, r24
    620c:	59 1e       	adc	r5, r25
    620e:	6a 1e       	adc	r6, r26
    6210:	7b 1e       	adc	r7, r27
    6212:	2b 89       	ldd	r18, Y+19	; 0x13
    6214:	3c 89       	ldd	r19, Y+20	; 0x14
    6216:	4d 89       	ldd	r20, Y+21	; 0x15
    6218:	5e 89       	ldd	r21, Y+22	; 0x16
    621a:	6b 81       	ldd	r22, Y+3	; 0x03
    621c:	7c 81       	ldd	r23, Y+4	; 0x04
    621e:	8d 81       	ldd	r24, Y+5	; 0x05
    6220:	9e 81       	ldd	r25, Y+6	; 0x06
    6222:	26 1b       	sub	r18, r22
    6224:	37 0b       	sbc	r19, r23
    6226:	48 0b       	sbc	r20, r24
    6228:	59 0b       	sbc	r21, r25
    622a:	2b 8b       	std	Y+19, r18	; 0x13
    622c:	3c 8b       	std	Y+20, r19	; 0x14
    622e:	4d 8b       	std	Y+21, r20	; 0x15
    6230:	5e 8b       	std	Y+22, r21	; 0x16
    6232:	d8 01       	movw	r26, r16
    6234:	c7 01       	movw	r24, r14
    6236:	bb 0f       	add	r27, r27
    6238:	88 0b       	sbc	r24, r24
    623a:	98 2f       	mov	r25, r24
    623c:	dc 01       	movw	r26, r24
    623e:	8b 83       	std	Y+3, r24	; 0x03
    6240:	9c 83       	std	Y+4, r25	; 0x04
    6242:	ad 83       	std	Y+5, r26	; 0x05
    6244:	be 83       	std	Y+6, r27	; 0x06
    6246:	2f 85       	ldd	r18, Y+15	; 0x0f
    6248:	38 89       	ldd	r19, Y+16	; 0x10
    624a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    624c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    624e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6250:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6252:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6254:	98 a1       	ldd	r25, Y+32	; 0x20
    6256:	ae 2c       	mov	r10, r14
    6258:	bf 2c       	mov	r11, r15
    625a:	c0 2e       	mov	r12, r16
    625c:	d1 2e       	mov	r13, r17
    625e:	eb 80       	ldd	r14, Y+3	; 0x03
    6260:	fe 2c       	mov	r15, r14
    6262:	0e 2d       	mov	r16, r14
    6264:	1e 2d       	mov	r17, r14
    6266:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__subdi3>
    626a:	2f 87       	std	Y+15, r18	; 0x0f
    626c:	38 8b       	std	Y+16, r19	; 0x10
    626e:	4b 8f       	std	Y+27, r20	; 0x1b
    6270:	5c 8f       	std	Y+28, r21	; 0x1c
    6272:	6d 8f       	std	Y+29, r22	; 0x1d
    6274:	7e 8f       	std	Y+30, r23	; 0x1e
    6276:	8f 8f       	std	Y+31, r24	; 0x1f
    6278:	98 a3       	std	Y+32, r25	; 0x20
    627a:	a3 01       	movw	r20, r6
    627c:	92 01       	movw	r18, r4
    627e:	55 0f       	add	r21, r21
    6280:	22 0b       	sbc	r18, r18
    6282:	32 2f       	mov	r19, r18
    6284:	a9 01       	movw	r20, r18
    6286:	2b 83       	std	Y+3, r18	; 0x03
    6288:	3c 83       	std	Y+4, r19	; 0x04
    628a:	4d 83       	std	Y+5, r20	; 0x05
    628c:	5e 83       	std	Y+6, r21	; 0x06
    628e:	23 2d       	mov	r18, r3
    6290:	32 2d       	mov	r19, r2
    6292:	49 89       	ldd	r20, Y+17	; 0x11
    6294:	5a 89       	ldd	r21, Y+18	; 0x12
    6296:	69 a1       	ldd	r22, Y+33	; 0x21
    6298:	7a a1       	ldd	r23, Y+34	; 0x22
    629a:	89 2d       	mov	r24, r9
    629c:	98 2d       	mov	r25, r8
    629e:	a4 2c       	mov	r10, r4
    62a0:	b5 2c       	mov	r11, r5
    62a2:	c6 2c       	mov	r12, r6
    62a4:	d7 2c       	mov	r13, r7
    62a6:	eb 80       	ldd	r14, Y+3	; 0x03
    62a8:	fe 2c       	mov	r15, r14
    62aa:	0e 2d       	mov	r16, r14
    62ac:	1e 2d       	mov	r17, r14
    62ae:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__subdi3>
    62b2:	32 2e       	mov	r3, r18
    62b4:	23 2e       	mov	r2, r19
    62b6:	49 8b       	std	Y+17, r20	; 0x11
    62b8:	5a 8b       	std	Y+18, r21	; 0x12
    62ba:	69 a3       	std	Y+33, r22	; 0x21
    62bc:	7a a3       	std	Y+34, r23	; 0x22
    62be:	98 2e       	mov	r9, r24
    62c0:	89 2e       	mov	r8, r25
    62c2:	8f b7       	in	r24, 0x3f	; 63
    62c4:	89 83       	std	Y+1, r24	; 0x01
    62c6:	f8 94       	cli
    62c8:	79 80       	ldd	r7, Y+1	; 0x01
    62ca:	4b 89       	ldd	r20, Y+19	; 0x13
    62cc:	5c 89       	ldd	r21, Y+20	; 0x14
    62ce:	6d 89       	ldd	r22, Y+21	; 0x15
    62d0:	7e 89       	ldd	r23, Y+22	; 0x16
    62d2:	40 93 0a 27 	sts	0x270A, r20	; 0x80270a <g_twi1_baro_temp_100>
    62d6:	50 93 0b 27 	sts	0x270B, r21	; 0x80270b <g_twi1_baro_temp_100+0x1>
    62da:	60 93 0c 27 	sts	0x270C, r22	; 0x80270c <g_twi1_baro_temp_100+0x2>
    62de:	70 93 0d 27 	sts	0x270D, r23	; 0x80270d <g_twi1_baro_temp_100+0x3>
    62e2:	4f 89       	ldd	r20, Y+23	; 0x17
    62e4:	58 8d       	ldd	r21, Y+24	; 0x18
    62e6:	69 8d       	ldd	r22, Y+25	; 0x19
    62e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    62ea:	9a 01       	movw	r18, r20
    62ec:	ab 01       	movw	r20, r22
    62ee:	60 e0       	ldi	r22, 0x00	; 0
    62f0:	70 e0       	ldi	r23, 0x00	; 0
    62f2:	cb 01       	movw	r24, r22
    62f4:	2b 83       	std	Y+3, r18	; 0x03
    62f6:	3c 83       	std	Y+4, r19	; 0x04
    62f8:	4d 83       	std	Y+5, r20	; 0x05
    62fa:	5e 83       	std	Y+6, r21	; 0x06
    62fc:	6f 83       	std	Y+7, r22	; 0x07
    62fe:	78 87       	std	Y+8, r23	; 0x08
    6300:	89 87       	std	Y+9, r24	; 0x09
    6302:	9a 87       	std	Y+10, r25	; 0x0a
    6304:	a3 2c       	mov	r10, r3
    6306:	b2 2c       	mov	r11, r2
    6308:	c9 88       	ldd	r12, Y+17	; 0x11
    630a:	da 88       	ldd	r13, Y+18	; 0x12
    630c:	e9 a0       	ldd	r14, Y+33	; 0x21
    630e:	fa a0       	ldd	r15, Y+34	; 0x22
    6310:	09 2d       	mov	r16, r9
    6312:	18 2d       	mov	r17, r8
    6314:	60 e0       	ldi	r22, 0x00	; 0
    6316:	70 e0       	ldi	r23, 0x00	; 0
    6318:	80 e0       	ldi	r24, 0x00	; 0
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    6320:	05 e1       	ldi	r16, 0x15	; 21
    6322:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ashrdi3>
    6326:	af 84       	ldd	r10, Y+15	; 0x0f
    6328:	b8 88       	ldd	r11, Y+16	; 0x10
    632a:	cb 8c       	ldd	r12, Y+27	; 0x1b
    632c:	dc 8c       	ldd	r13, Y+28	; 0x1c
    632e:	ed 8c       	ldd	r14, Y+29	; 0x1d
    6330:	fe 8c       	ldd	r15, Y+30	; 0x1e
    6332:	0f 8d       	ldd	r16, Y+31	; 0x1f
    6334:	18 a1       	ldd	r17, Y+32	; 0x20
    6336:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__subdi3>
    633a:	0f e0       	ldi	r16, 0x0F	; 15
    633c:	0e 94 19 7e 	call	0xfc32	; 0xfc32 <__ashrdi3>
    6340:	20 93 06 27 	sts	0x2706, r18	; 0x802706 <g_twi1_baro_p_100>
    6344:	30 93 07 27 	sts	0x2707, r19	; 0x802707 <g_twi1_baro_p_100+0x1>
    6348:	40 93 08 27 	sts	0x2708, r20	; 0x802708 <g_twi1_baro_p_100+0x2>
    634c:	50 93 09 27 	sts	0x2709, r21	; 0x802709 <g_twi1_baro_p_100+0x3>
    6350:	7f be       	out	0x3f, r7	; 63
    6352:	a6 96       	adiw	r28, 0x26	; 38
    6354:	cd bf       	out	0x3d, r28	; 61
    6356:	de bf       	out	0x3e, r29	; 62
    6358:	df 91       	pop	r29
    635a:	cf 91       	pop	r28
    635c:	1f 91       	pop	r17
    635e:	0f 91       	pop	r16
    6360:	ff 90       	pop	r15
    6362:	ef 90       	pop	r14
    6364:	df 90       	pop	r13
    6366:	cf 90       	pop	r12
    6368:	bf 90       	pop	r11
    636a:	af 90       	pop	r10
    636c:	9f 90       	pop	r9
    636e:	8f 90       	pop	r8
    6370:	7f 90       	pop	r7
    6372:	6f 90       	pop	r6
    6374:	5f 90       	pop	r5
    6376:	4f 90       	pop	r4
    6378:	3f 90       	pop	r3
    637a:	2f 90       	pop	r2
    637c:	08 95       	ret

0000637e <service_twi1_baro>:
    637e:	cf 93       	push	r28
    6380:	df 93       	push	r29
    6382:	1f 92       	push	r1
    6384:	cd b7       	in	r28, 0x3d	; 61
    6386:	de b7       	in	r29, 0x3e	; 62
    6388:	44 23       	and	r20, r20
    638a:	59 f0       	breq	.+22     	; 0x63a2 <service_twi1_baro+0x24>
    638c:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <s_step.7949>
    6390:	84 36       	cpi	r24, 0x64	; 100
    6392:	08 f4       	brcc	.+2      	; 0x6396 <service_twi1_baro+0x18>
    6394:	cb c0       	rjmp	.+406    	; 0x652c <service_twi1_baro+0x1ae>
    6396:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <s_step.7949>
    639a:	81 e0       	ldi	r24, 0x01	; 1
    639c:	80 93 81 26 	sts	0x2681, r24	; 0x802681 <g_twi1_lock>
    63a0:	09 c0       	rjmp	.+18     	; 0x63b4 <service_twi1_baro+0x36>
    63a2:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <s_step.7949>
    63a6:	85 31       	cpi	r24, 0x15	; 21
    63a8:	19 f1       	breq	.+70     	; 0x63f0 <service_twi1_baro+0x72>
    63aa:	8b 32       	cpi	r24, 0x2B	; 43
    63ac:	09 f4       	brne	.+2      	; 0x63b0 <service_twi1_baro+0x32>
    63ae:	5d c0       	rjmp	.+186    	; 0x646a <service_twi1_baro+0xec>
    63b0:	81 11       	cpse	r24, r1
    63b2:	b1 c0       	rjmp	.+354    	; 0x6516 <service_twi1_baro+0x198>
    63b4:	eb e2       	ldi	r30, 0x2B	; 43
    63b6:	f0 e2       	ldi	r31, 0x20	; 32
    63b8:	86 e7       	ldi	r24, 0x76	; 118
    63ba:	80 83       	st	Z, r24
    63bc:	88 e4       	ldi	r24, 0x48	; 72
    63be:	81 83       	std	Z+1, r24	; 0x01
    63c0:	81 e0       	ldi	r24, 0x01	; 1
    63c2:	90 e0       	ldi	r25, 0x00	; 0
    63c4:	84 83       	std	Z+4, r24	; 0x04
    63c6:	95 83       	std	Z+5, r25	; 0x05
    63c8:	10 86       	std	Z+8, r1	; 0x08
    63ca:	11 86       	std	Z+9, r1	; 0x09
    63cc:	40 e0       	ldi	r20, 0x00	; 0
    63ce:	bf 01       	movw	r22, r30
    63d0:	80 ea       	ldi	r24, 0xA0	; 160
    63d2:	94 e0       	ldi	r25, 0x04	; 4
    63d4:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    63d8:	81 11       	cpse	r24, r1
    63da:	05 c0       	rjmp	.+10     	; 0x63e6 <service_twi1_baro+0x68>
    63dc:	81 e0       	ldi	r24, 0x01	; 1
    63de:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7949>
    63e2:	80 e0       	ldi	r24, 0x00	; 0
    63e4:	ac c0       	rjmp	.+344    	; 0x653e <service_twi1_baro+0x1c0>
    63e6:	88 ec       	ldi	r24, 0xC8	; 200
    63e8:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7949>
    63ec:	80 e0       	ldi	r24, 0x00	; 0
    63ee:	a7 c0       	rjmp	.+334    	; 0x653e <service_twi1_baro+0x1c0>
    63f0:	eb e2       	ldi	r30, 0x2B	; 43
    63f2:	f0 e2       	ldi	r31, 0x20	; 32
    63f4:	11 82       	std	Z+1, r1	; 0x01
    63f6:	83 e0       	ldi	r24, 0x03	; 3
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	80 87       	std	Z+8, r24	; 0x08
    63fc:	91 87       	std	Z+9, r25	; 0x09
    63fe:	41 e0       	ldi	r20, 0x01	; 1
    6400:	bf 01       	movw	r22, r30
    6402:	80 ea       	ldi	r24, 0xA0	; 160
    6404:	94 e0       	ldi	r25, 0x04	; 4
    6406:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    640a:	81 11       	cpse	r24, r1
    640c:	29 c0       	rjmp	.+82     	; 0x6460 <service_twi1_baro+0xe2>
    640e:	e7 e3       	ldi	r30, 0x37	; 55
    6410:	f5 e2       	ldi	r31, 0x25	; 37
    6412:	20 81       	ld	r18, Z
    6414:	81 81       	ldd	r24, Z+1	; 0x01
    6416:	90 e0       	ldi	r25, 0x00	; 0
    6418:	a0 e0       	ldi	r26, 0x00	; 0
    641a:	b0 e0       	ldi	r27, 0x00	; 0
    641c:	ba 2f       	mov	r27, r26
    641e:	a9 2f       	mov	r26, r25
    6420:	98 2f       	mov	r25, r24
    6422:	88 27       	eor	r24, r24
    6424:	a2 2b       	or	r26, r18
    6426:	22 81       	ldd	r18, Z+2	; 0x02
    6428:	82 2b       	or	r24, r18
    642a:	80 93 2d 23 	sts	0x232D, r24	; 0x80232d <s_twi1_baro_d1.7950>
    642e:	90 93 2e 23 	sts	0x232E, r25	; 0x80232e <s_twi1_baro_d1.7950+0x1>
    6432:	a0 93 2f 23 	sts	0x232F, r26	; 0x80232f <s_twi1_baro_d1.7950+0x2>
    6436:	b0 93 30 23 	sts	0x2330, r27	; 0x802330 <s_twi1_baro_d1.7950+0x3>
    643a:	eb e2       	ldi	r30, 0x2B	; 43
    643c:	f0 e2       	ldi	r31, 0x20	; 32
    643e:	88 e5       	ldi	r24, 0x58	; 88
    6440:	81 83       	std	Z+1, r24	; 0x01
    6442:	10 86       	std	Z+8, r1	; 0x08
    6444:	11 86       	std	Z+9, r1	; 0x09
    6446:	40 e0       	ldi	r20, 0x00	; 0
    6448:	bf 01       	movw	r22, r30
    644a:	80 ea       	ldi	r24, 0xA0	; 160
    644c:	94 e0       	ldi	r25, 0x04	; 4
    644e:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6452:	81 11       	cpse	r24, r1
    6454:	05 c0       	rjmp	.+10     	; 0x6460 <service_twi1_baro+0xe2>
    6456:	86 e1       	ldi	r24, 0x16	; 22
    6458:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7949>
    645c:	80 e0       	ldi	r24, 0x00	; 0
    645e:	6f c0       	rjmp	.+222    	; 0x653e <service_twi1_baro+0x1c0>
    6460:	83 ed       	ldi	r24, 0xD3	; 211
    6462:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7949>
    6466:	80 e0       	ldi	r24, 0x00	; 0
    6468:	6a c0       	rjmp	.+212    	; 0x653e <service_twi1_baro+0x1c0>
    646a:	eb e2       	ldi	r30, 0x2B	; 43
    646c:	f0 e2       	ldi	r31, 0x20	; 32
    646e:	11 82       	std	Z+1, r1	; 0x01
    6470:	83 e0       	ldi	r24, 0x03	; 3
    6472:	90 e0       	ldi	r25, 0x00	; 0
    6474:	80 87       	std	Z+8, r24	; 0x08
    6476:	91 87       	std	Z+9, r25	; 0x09
    6478:	41 e0       	ldi	r20, 0x01	; 1
    647a:	bf 01       	movw	r22, r30
    647c:	80 ea       	ldi	r24, 0xA0	; 160
    647e:	94 e0       	ldi	r25, 0x04	; 4
    6480:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6484:	81 11       	cpse	r24, r1
    6486:	42 c0       	rjmp	.+132    	; 0x650c <service_twi1_baro+0x18e>
    6488:	e7 e3       	ldi	r30, 0x37	; 55
    648a:	f5 e2       	ldi	r31, 0x25	; 37
    648c:	20 81       	ld	r18, Z
    648e:	81 81       	ldd	r24, Z+1	; 0x01
    6490:	90 e0       	ldi	r25, 0x00	; 0
    6492:	a0 e0       	ldi	r26, 0x00	; 0
    6494:	b0 e0       	ldi	r27, 0x00	; 0
    6496:	ba 2f       	mov	r27, r26
    6498:	a9 2f       	mov	r26, r25
    649a:	98 2f       	mov	r25, r24
    649c:	88 27       	eor	r24, r24
    649e:	a2 2b       	or	r26, r18
    64a0:	22 81       	ldd	r18, Z+2	; 0x02
    64a2:	82 2b       	or	r24, r18
    64a4:	80 93 29 23 	sts	0x2329, r24	; 0x802329 <s_twi1_baro_d2.7951>
    64a8:	90 93 2a 23 	sts	0x232A, r25	; 0x80232a <s_twi1_baro_d2.7951+0x1>
    64ac:	a0 93 2b 23 	sts	0x232B, r26	; 0x80232b <s_twi1_baro_d2.7951+0x2>
    64b0:	b0 93 2c 23 	sts	0x232C, r27	; 0x80232c <s_twi1_baro_d2.7951+0x3>
    64b4:	8f b7       	in	r24, 0x3f	; 63
    64b6:	89 83       	std	Y+1, r24	; 0x01
    64b8:	f8 94       	cli
    64ba:	89 81       	ldd	r24, Y+1	; 0x01
    64bc:	40 91 2d 23 	lds	r20, 0x232D	; 0x80232d <s_twi1_baro_d1.7950>
    64c0:	50 91 2e 23 	lds	r21, 0x232E	; 0x80232e <s_twi1_baro_d1.7950+0x1>
    64c4:	60 91 2f 23 	lds	r22, 0x232F	; 0x80232f <s_twi1_baro_d1.7950+0x2>
    64c8:	70 91 30 23 	lds	r23, 0x2330	; 0x802330 <s_twi1_baro_d1.7950+0x3>
    64cc:	40 93 12 27 	sts	0x2712, r20	; 0x802712 <g_twi1_baro_d1>
    64d0:	50 93 13 27 	sts	0x2713, r21	; 0x802713 <g_twi1_baro_d1+0x1>
    64d4:	60 93 14 27 	sts	0x2714, r22	; 0x802714 <g_twi1_baro_d1+0x2>
    64d8:	70 93 15 27 	sts	0x2715, r23	; 0x802715 <g_twi1_baro_d1+0x3>
    64dc:	40 91 29 23 	lds	r20, 0x2329	; 0x802329 <s_twi1_baro_d2.7951>
    64e0:	50 91 2a 23 	lds	r21, 0x232A	; 0x80232a <s_twi1_baro_d2.7951+0x1>
    64e4:	60 91 2b 23 	lds	r22, 0x232B	; 0x80232b <s_twi1_baro_d2.7951+0x2>
    64e8:	70 91 2c 23 	lds	r23, 0x232C	; 0x80232c <s_twi1_baro_d2.7951+0x3>
    64ec:	40 93 0e 27 	sts	0x270E, r20	; 0x80270e <g_twi1_baro_d2>
    64f0:	50 93 0f 27 	sts	0x270F, r21	; 0x80270f <g_twi1_baro_d2+0x1>
    64f4:	60 93 10 27 	sts	0x2710, r22	; 0x802710 <g_twi1_baro_d2+0x2>
    64f8:	70 93 11 27 	sts	0x2711, r23	; 0x802711 <g_twi1_baro_d2+0x3>
    64fc:	8f bf       	out	0x3f, r24	; 63
    64fe:	8b e7       	ldi	r24, 0x7B	; 123
    6500:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7949>
    6504:	10 92 81 26 	sts	0x2681, r1	; 0x802681 <g_twi1_lock>
    6508:	81 e0       	ldi	r24, 0x01	; 1
    650a:	19 c0       	rjmp	.+50     	; 0x653e <service_twi1_baro+0x1c0>
    650c:	8f ed       	ldi	r24, 0xDF	; 223
    650e:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7949>
    6512:	80 e0       	ldi	r24, 0x00	; 0
    6514:	14 c0       	rjmp	.+40     	; 0x653e <service_twi1_baro+0x1c0>
    6516:	84 36       	cpi	r24, 0x64	; 100
    6518:	28 f4       	brcc	.+10     	; 0x6524 <service_twi1_baro+0x1a6>
    651a:	8f 5f       	subi	r24, 0xFF	; 255
    651c:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7949>
    6520:	80 e0       	ldi	r24, 0x00	; 0
    6522:	0d c0       	rjmp	.+26     	; 0x653e <service_twi1_baro+0x1c0>
    6524:	10 92 81 26 	sts	0x2681, r1	; 0x802681 <g_twi1_lock>
    6528:	80 e0       	ldi	r24, 0x00	; 0
    652a:	09 c0       	rjmp	.+18     	; 0x653e <service_twi1_baro+0x1c0>
    652c:	85 31       	cpi	r24, 0x15	; 21
    652e:	09 f4       	brne	.+2      	; 0x6532 <service_twi1_baro+0x1b4>
    6530:	5f cf       	rjmp	.-322    	; 0x63f0 <service_twi1_baro+0x72>
    6532:	8b 32       	cpi	r24, 0x2B	; 43
    6534:	09 f4       	brne	.+2      	; 0x6538 <service_twi1_baro+0x1ba>
    6536:	99 cf       	rjmp	.-206    	; 0x646a <service_twi1_baro+0xec>
    6538:	81 11       	cpse	r24, r1
    653a:	ef cf       	rjmp	.-34     	; 0x651a <service_twi1_baro+0x19c>
    653c:	3b cf       	rjmp	.-394    	; 0x63b4 <service_twi1_baro+0x36>
    653e:	0f 90       	pop	r0
    6540:	df 91       	pop	r29
    6542:	cf 91       	pop	r28
    6544:	08 95       	ret

00006546 <twi2_waitUntilReady>:
    6546:	cf 92       	push	r12
    6548:	df 92       	push	r13
    654a:	ef 92       	push	r14
    654c:	ff 92       	push	r15
    654e:	0f 93       	push	r16
    6550:	1f 93       	push	r17
    6552:	cf 93       	push	r28
    6554:	e7 e1       	ldi	r30, 0x17	; 23
    6556:	f0 e2       	ldi	r31, 0x20	; 32
    6558:	83 e0       	ldi	r24, 0x03	; 3
    655a:	81 83       	std	Z+1, r24	; 0x01
    655c:	81 e0       	ldi	r24, 0x01	; 1
    655e:	90 e0       	ldi	r25, 0x00	; 0
    6560:	84 83       	std	Z+4, r24	; 0x04
    6562:	95 83       	std	Z+5, r25	; 0x05
    6564:	8f 01       	movw	r16, r30
    6566:	cc 24       	eor	r12, r12
    6568:	c3 94       	inc	r12
    656a:	d1 2c       	mov	r13, r1
    656c:	0f 2e       	mov	r0, r31
    656e:	ff e2       	ldi	r31, 0x2F	; 47
    6570:	ef 2e       	mov	r14, r31
    6572:	f5 e2       	ldi	r31, 0x25	; 37
    6574:	ff 2e       	mov	r15, r31
    6576:	f0 2d       	mov	r31, r0
    6578:	f8 01       	movw	r30, r16
    657a:	c0 86       	std	Z+8, r12	; 0x08
    657c:	d1 86       	std	Z+9, r13	; 0x09
    657e:	41 e0       	ldi	r20, 0x01	; 1
    6580:	b8 01       	movw	r22, r16
    6582:	80 e8       	ldi	r24, 0x80	; 128
    6584:	94 e0       	ldi	r25, 0x04	; 4
    6586:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    658a:	f7 01       	movw	r30, r14
    658c:	c0 81       	ld	r28, Z
    658e:	9c 2f       	mov	r25, r28
    6590:	90 78       	andi	r25, 0x80	; 128
    6592:	81 11       	cpse	r24, r1
    6594:	0d c0       	rjmp	.+26     	; 0x65b0 <twi2_waitUntilReady+0x6a>
    6596:	91 f0       	breq	.+36     	; 0x65bc <twi2_waitUntilReady+0x76>
    6598:	8c 2f       	mov	r24, r28
    659a:	81 78       	andi	r24, 0x81	; 129
    659c:	81 38       	cpi	r24, 0x81	; 129
    659e:	29 f4       	brne	.+10     	; 0x65aa <twi2_waitUntilReady+0x64>
    65a0:	65 ef       	ldi	r22, 0xF5	; 245
    65a2:	71 e0       	ldi	r23, 0x01	; 1
    65a4:	80 e0       	ldi	r24, 0x00	; 0
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	68 d9       	rcall	.-3376   	; 0x587a <__portable_avr_delay_cycles>
    65aa:	c0 fd       	sbrc	r28, 0
    65ac:	e5 cf       	rjmp	.-54     	; 0x6578 <twi2_waitUntilReady+0x32>
    65ae:	0c c0       	rjmp	.+24     	; 0x65c8 <twi2_waitUntilReady+0x82>
    65b0:	65 e0       	ldi	r22, 0x05	; 5
    65b2:	70 e0       	ldi	r23, 0x00	; 0
    65b4:	80 e0       	ldi	r24, 0x00	; 0
    65b6:	90 e0       	ldi	r25, 0x00	; 0
    65b8:	60 d9       	rcall	.-3392   	; 0x587a <__portable_avr_delay_cycles>
    65ba:	de cf       	rjmp	.-68     	; 0x6578 <twi2_waitUntilReady+0x32>
    65bc:	65 e0       	ldi	r22, 0x05	; 5
    65be:	70 e0       	ldi	r23, 0x00	; 0
    65c0:	80 e0       	ldi	r24, 0x00	; 0
    65c2:	90 e0       	ldi	r25, 0x00	; 0
    65c4:	5a d9       	rcall	.-3404   	; 0x587a <__portable_avr_delay_cycles>
    65c6:	d8 cf       	rjmp	.-80     	; 0x6578 <twi2_waitUntilReady+0x32>
    65c8:	cf 91       	pop	r28
    65ca:	1f 91       	pop	r17
    65cc:	0f 91       	pop	r16
    65ce:	ff 90       	pop	r15
    65d0:	ef 90       	pop	r14
    65d2:	df 90       	pop	r13
    65d4:	cf 90       	pop	r12
    65d6:	08 95       	ret

000065d8 <twi2_set_leds>:
    65d8:	cf 93       	push	r28
    65da:	c8 2f       	mov	r28, r24
    65dc:	b4 df       	rcall	.-152    	; 0x6546 <twi2_waitUntilReady>
    65de:	e7 e1       	ldi	r30, 0x17	; 23
    65e0:	f0 e2       	ldi	r31, 0x20	; 32
    65e2:	80 e7       	ldi	r24, 0x70	; 112
    65e4:	81 83       	std	Z+1, r24	; 0x01
    65e6:	c3 70       	andi	r28, 0x03	; 3
    65e8:	c0 93 2f 25 	sts	0x252F, r28	; 0x80252f <twi2_m_data>
    65ec:	81 e0       	ldi	r24, 0x01	; 1
    65ee:	90 e0       	ldi	r25, 0x00	; 0
    65f0:	80 87       	std	Z+8, r24	; 0x08
    65f2:	91 87       	std	Z+9, r25	; 0x09
    65f4:	40 e0       	ldi	r20, 0x00	; 0
    65f6:	bf 01       	movw	r22, r30
    65f8:	80 e8       	ldi	r24, 0x80	; 128
    65fa:	94 e0       	ldi	r25, 0x04	; 4
    65fc:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6600:	65 e0       	ldi	r22, 0x05	; 5
    6602:	70 e0       	ldi	r23, 0x00	; 0
    6604:	80 e0       	ldi	r24, 0x00	; 0
    6606:	90 e0       	ldi	r25, 0x00	; 0
    6608:	38 d9       	rcall	.-3472   	; 0x587a <__portable_avr_delay_cycles>
    660a:	cf 91       	pop	r28
    660c:	08 95       	ret

0000660e <twi2_set_ledbl>:
    660e:	cf 93       	push	r28
    6610:	df 93       	push	r29
    6612:	d8 2f       	mov	r29, r24
    6614:	c6 2f       	mov	r28, r22
    6616:	97 df       	rcall	.-210    	; 0x6546 <twi2_waitUntilReady>
    6618:	e7 e1       	ldi	r30, 0x17	; 23
    661a:	f0 e2       	ldi	r31, 0x20	; 32
    661c:	84 e7       	ldi	r24, 0x74	; 116
    661e:	81 83       	std	Z+1, r24	; 0x01
    6620:	af e2       	ldi	r26, 0x2F	; 47
    6622:	b5 e2       	ldi	r27, 0x25	; 37
    6624:	dc 93       	st	X, r29
    6626:	11 96       	adiw	r26, 0x01	; 1
    6628:	cc 93       	st	X, r28
    662a:	82 e0       	ldi	r24, 0x02	; 2
    662c:	90 e0       	ldi	r25, 0x00	; 0
    662e:	80 87       	std	Z+8, r24	; 0x08
    6630:	91 87       	std	Z+9, r25	; 0x09
    6632:	40 e0       	ldi	r20, 0x00	; 0
    6634:	bf 01       	movw	r22, r30
    6636:	80 e8       	ldi	r24, 0x80	; 128
    6638:	94 e0       	ldi	r25, 0x04	; 4
    663a:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    663e:	65 e0       	ldi	r22, 0x05	; 5
    6640:	70 e0       	ldi	r23, 0x00	; 0
    6642:	80 e0       	ldi	r24, 0x00	; 0
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	19 d9       	rcall	.-3534   	; 0x587a <__portable_avr_delay_cycles>
    6648:	df 91       	pop	r29
    664a:	cf 91       	pop	r28
    664c:	08 95       	ret

0000664e <twi2_set_bias>:
    664e:	cf 93       	push	r28
    6650:	c8 2f       	mov	r28, r24
    6652:	79 df       	rcall	.-270    	; 0x6546 <twi2_waitUntilReady>
    6654:	e7 e1       	ldi	r30, 0x17	; 23
    6656:	f0 e2       	ldi	r31, 0x20	; 32
    6658:	85 e7       	ldi	r24, 0x75	; 117
    665a:	81 83       	std	Z+1, r24	; 0x01
    665c:	c0 93 2f 25 	sts	0x252F, r28	; 0x80252f <twi2_m_data>
    6660:	81 e0       	ldi	r24, 0x01	; 1
    6662:	90 e0       	ldi	r25, 0x00	; 0
    6664:	80 87       	std	Z+8, r24	; 0x08
    6666:	91 87       	std	Z+9, r25	; 0x09
    6668:	40 e0       	ldi	r20, 0x00	; 0
    666a:	bf 01       	movw	r22, r30
    666c:	80 e8       	ldi	r24, 0x80	; 128
    666e:	94 e0       	ldi	r25, 0x04	; 4
    6670:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6674:	65 e0       	ldi	r22, 0x05	; 5
    6676:	70 e0       	ldi	r23, 0x00	; 0
    6678:	80 e0       	ldi	r24, 0x00	; 0
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	fe d8       	rcall	.-3588   	; 0x587a <__portable_avr_delay_cycles>
    667e:	cf 91       	pop	r28
    6680:	08 95       	ret

00006682 <twi2_set_beep>:
    6682:	cf 93       	push	r28
    6684:	df 93       	push	r29
    6686:	c8 2f       	mov	r28, r24
    6688:	d6 2f       	mov	r29, r22
    668a:	5d df       	rcall	.-326    	; 0x6546 <twi2_waitUntilReady>
    668c:	e7 e1       	ldi	r30, 0x17	; 23
    668e:	f0 e2       	ldi	r31, 0x20	; 32
    6690:	81 e7       	ldi	r24, 0x71	; 113
    6692:	81 83       	std	Z+1, r24	; 0x01
    6694:	af e2       	ldi	r26, 0x2F	; 47
    6696:	b5 e2       	ldi	r27, 0x25	; 37
    6698:	dc 93       	st	X, r29
    669a:	11 96       	adiw	r26, 0x01	; 1
    669c:	cc 93       	st	X, r28
    669e:	82 e0       	ldi	r24, 0x02	; 2
    66a0:	90 e0       	ldi	r25, 0x00	; 0
    66a2:	80 87       	std	Z+8, r24	; 0x08
    66a4:	91 87       	std	Z+9, r25	; 0x09
    66a6:	40 e0       	ldi	r20, 0x00	; 0
    66a8:	bf 01       	movw	r22, r30
    66aa:	80 e8       	ldi	r24, 0x80	; 128
    66ac:	94 e0       	ldi	r25, 0x04	; 4
    66ae:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    66b2:	65 e0       	ldi	r22, 0x05	; 5
    66b4:	70 e0       	ldi	r23, 0x00	; 0
    66b6:	80 e0       	ldi	r24, 0x00	; 0
    66b8:	90 e0       	ldi	r25, 0x00	; 0
    66ba:	df d8       	rcall	.-3650   	; 0x587a <__portable_avr_delay_cycles>
    66bc:	df 91       	pop	r29
    66be:	cf 91       	pop	r28
    66c0:	08 95       	ret

000066c2 <twi_init>:
    66c2:	e0 e8       	ldi	r30, 0x80	; 128
    66c4:	f6 e0       	ldi	r31, 0x06	; 6
    66c6:	88 e3       	ldi	r24, 0x38	; 56
    66c8:	80 8b       	std	Z+16, r24	; 0x10
    66ca:	81 8b       	std	Z+17, r24	; 0x11
    66cc:	e0 e4       	ldi	r30, 0x40	; 64
    66ce:	f6 e0       	ldi	r31, 0x06	; 6
    66d0:	80 8b       	std	Z+16, r24	; 0x10
    66d2:	81 8b       	std	Z+17, r24	; 0x11
    66d4:	08 95       	ret

000066d6 <isr_100ms_twi1_onboard>:
    66d6:	cf 92       	push	r12
    66d8:	ef 92       	push	r14
    66da:	0f 93       	push	r16
    66dc:	78 94       	sei
    66de:	80 91 64 27 	lds	r24, 0x2764	; 0x802764 <g_twi1_gyro_valid>
    66e2:	88 23       	and	r24, r24
    66e4:	09 f4       	brne	.+2      	; 0x66e8 <isr_100ms_twi1_onboard+0x12>
    66e6:	09 c1       	rjmp	.+530    	; 0x68fa <isr_100ms_twi1_onboard+0x224>
    66e8:	80 91 81 26 	lds	r24, 0x2681	; 0x802681 <g_twi1_lock>
    66ec:	81 11       	cpse	r24, r1
    66ee:	05 c1       	rjmp	.+522    	; 0x68fa <isr_100ms_twi1_onboard+0x224>
    66f0:	eb e2       	ldi	r30, 0x2B	; 43
    66f2:	f0 e2       	ldi	r31, 0x20	; 32
    66f4:	88 e6       	ldi	r24, 0x68	; 104
    66f6:	80 83       	st	Z, r24
    66f8:	8b e3       	ldi	r24, 0x3B	; 59
    66fa:	81 83       	std	Z+1, r24	; 0x01
    66fc:	81 e0       	ldi	r24, 0x01	; 1
    66fe:	90 e0       	ldi	r25, 0x00	; 0
    6700:	84 83       	std	Z+4, r24	; 0x04
    6702:	95 83       	std	Z+5, r25	; 0x05
    6704:	88 e0       	ldi	r24, 0x08	; 8
    6706:	90 e0       	ldi	r25, 0x00	; 0
    6708:	80 87       	std	Z+8, r24	; 0x08
    670a:	91 87       	std	Z+9, r25	; 0x09
    670c:	41 e0       	ldi	r20, 0x01	; 1
    670e:	bf 01       	movw	r22, r30
    6710:	80 ea       	ldi	r24, 0xA0	; 160
    6712:	94 e0       	ldi	r25, 0x04	; 4
    6714:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6718:	81 11       	cpse	r24, r1
    671a:	ef c0       	rjmp	.+478    	; 0x68fa <isr_100ms_twi1_onboard+0x224>
    671c:	e7 e3       	ldi	r30, 0x37	; 55
    671e:	f5 e2       	ldi	r31, 0x25	; 37
    6720:	80 81       	ld	r24, Z
    6722:	90 e0       	ldi	r25, 0x00	; 0
    6724:	98 2f       	mov	r25, r24
    6726:	88 27       	eor	r24, r24
    6728:	21 81       	ldd	r18, Z+1	; 0x01
    672a:	82 2b       	or	r24, r18
    672c:	80 93 5b 27 	sts	0x275B, r24	; 0x80275b <g_twi1_gyro_1_accel_x>
    6730:	90 93 5c 27 	sts	0x275C, r25	; 0x80275c <g_twi1_gyro_1_accel_x+0x1>
    6734:	82 81       	ldd	r24, Z+2	; 0x02
    6736:	90 e0       	ldi	r25, 0x00	; 0
    6738:	98 2f       	mov	r25, r24
    673a:	88 27       	eor	r24, r24
    673c:	23 81       	ldd	r18, Z+3	; 0x03
    673e:	82 2b       	or	r24, r18
    6740:	80 93 59 27 	sts	0x2759, r24	; 0x802759 <g_twi1_gyro_1_accel_y>
    6744:	90 93 5a 27 	sts	0x275A, r25	; 0x80275a <g_twi1_gyro_1_accel_y+0x1>
    6748:	84 81       	ldd	r24, Z+4	; 0x04
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	98 2f       	mov	r25, r24
    674e:	88 27       	eor	r24, r24
    6750:	25 81       	ldd	r18, Z+5	; 0x05
    6752:	82 2b       	or	r24, r18
    6754:	80 93 57 27 	sts	0x2757, r24	; 0x802757 <g_twi1_gyro_1_accel_z>
    6758:	90 93 58 27 	sts	0x2758, r25	; 0x802758 <g_twi1_gyro_1_accel_z+0x1>
    675c:	86 81       	ldd	r24, Z+6	; 0x06
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	98 2f       	mov	r25, r24
    6762:	88 27       	eor	r24, r24
    6764:	27 81       	ldd	r18, Z+7	; 0x07
    6766:	82 2b       	or	r24, r18
    6768:	80 93 61 27 	sts	0x2761, r24	; 0x802761 <g_twi1_gyro_1_temp>
    676c:	90 93 62 27 	sts	0x2762, r25	; 0x802762 <g_twi1_gyro_1_temp+0x1>
    6770:	eb e2       	ldi	r30, 0x2B	; 43
    6772:	f0 e2       	ldi	r31, 0x20	; 32
    6774:	88 e6       	ldi	r24, 0x68	; 104
    6776:	80 83       	st	Z, r24
    6778:	83 e4       	ldi	r24, 0x43	; 67
    677a:	81 83       	std	Z+1, r24	; 0x01
    677c:	81 e0       	ldi	r24, 0x01	; 1
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	84 83       	std	Z+4, r24	; 0x04
    6782:	95 83       	std	Z+5, r25	; 0x05
    6784:	86 e0       	ldi	r24, 0x06	; 6
    6786:	90 e0       	ldi	r25, 0x00	; 0
    6788:	80 87       	std	Z+8, r24	; 0x08
    678a:	91 87       	std	Z+9, r25	; 0x09
    678c:	41 e0       	ldi	r20, 0x01	; 1
    678e:	bf 01       	movw	r22, r30
    6790:	80 ea       	ldi	r24, 0xA0	; 160
    6792:	94 e0       	ldi	r25, 0x04	; 4
    6794:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6798:	81 11       	cpse	r24, r1
    679a:	af c0       	rjmp	.+350    	; 0x68fa <isr_100ms_twi1_onboard+0x224>
    679c:	e7 e3       	ldi	r30, 0x37	; 55
    679e:	f5 e2       	ldi	r31, 0x25	; 37
    67a0:	80 81       	ld	r24, Z
    67a2:	90 e0       	ldi	r25, 0x00	; 0
    67a4:	98 2f       	mov	r25, r24
    67a6:	88 27       	eor	r24, r24
    67a8:	21 81       	ldd	r18, Z+1	; 0x01
    67aa:	82 2b       	or	r24, r18
    67ac:	80 93 4f 27 	sts	0x274F, r24	; 0x80274f <g_twi1_gyro_1_gyro_x>
    67b0:	90 93 50 27 	sts	0x2750, r25	; 0x802750 <g_twi1_gyro_1_gyro_x+0x1>
    67b4:	82 81       	ldd	r24, Z+2	; 0x02
    67b6:	90 e0       	ldi	r25, 0x00	; 0
    67b8:	98 2f       	mov	r25, r24
    67ba:	88 27       	eor	r24, r24
    67bc:	23 81       	ldd	r18, Z+3	; 0x03
    67be:	82 2b       	or	r24, r18
    67c0:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <g_twi1_gyro_1_gyro_y>
    67c4:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <g_twi1_gyro_1_gyro_y+0x1>
    67c8:	84 81       	ldd	r24, Z+4	; 0x04
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    67cc:	98 2f       	mov	r25, r24
    67ce:	88 27       	eor	r24, r24
    67d0:	25 81       	ldd	r18, Z+5	; 0x05
    67d2:	82 2b       	or	r24, r18
    67d4:	80 93 4b 27 	sts	0x274B, r24	; 0x80274b <g_twi1_gyro_1_gyro_z>
    67d8:	90 93 4c 27 	sts	0x274C, r25	; 0x80274c <g_twi1_gyro_1_gyro_z+0x1>
    67dc:	eb e2       	ldi	r30, 0x2B	; 43
    67de:	f0 e2       	ldi	r31, 0x20	; 32
    67e0:	8c e0       	ldi	r24, 0x0C	; 12
    67e2:	80 83       	st	Z, r24
    67e4:	82 e0       	ldi	r24, 0x02	; 2
    67e6:	81 83       	std	Z+1, r24	; 0x01
    67e8:	81 e0       	ldi	r24, 0x01	; 1
    67ea:	90 e0       	ldi	r25, 0x00	; 0
    67ec:	84 83       	std	Z+4, r24	; 0x04
    67ee:	95 83       	std	Z+5, r25	; 0x05
    67f0:	80 87       	std	Z+8, r24	; 0x08
    67f2:	91 87       	std	Z+9, r25	; 0x09
    67f4:	41 e0       	ldi	r20, 0x01	; 1
    67f6:	bf 01       	movw	r22, r30
    67f8:	80 ea       	ldi	r24, 0xA0	; 160
    67fa:	94 e0       	ldi	r25, 0x04	; 4
    67fc:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6800:	81 11       	cpse	r24, r1
    6802:	7b c0       	rjmp	.+246    	; 0x68fa <isr_100ms_twi1_onboard+0x224>
    6804:	80 91 37 25 	lds	r24, 0x2537	; 0x802537 <twi1_m_data>
    6808:	80 ff       	sbrs	r24, 0
    680a:	77 c0       	rjmp	.+238    	; 0x68fa <isr_100ms_twi1_onboard+0x224>
    680c:	eb e2       	ldi	r30, 0x2B	; 43
    680e:	f0 e2       	ldi	r31, 0x20	; 32
    6810:	8c e0       	ldi	r24, 0x0C	; 12
    6812:	80 83       	st	Z, r24
    6814:	83 e0       	ldi	r24, 0x03	; 3
    6816:	81 83       	std	Z+1, r24	; 0x01
    6818:	81 e0       	ldi	r24, 0x01	; 1
    681a:	90 e0       	ldi	r25, 0x00	; 0
    681c:	84 83       	std	Z+4, r24	; 0x04
    681e:	95 83       	std	Z+5, r25	; 0x05
    6820:	86 e0       	ldi	r24, 0x06	; 6
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	80 87       	std	Z+8, r24	; 0x08
    6826:	91 87       	std	Z+9, r25	; 0x09
    6828:	41 e0       	ldi	r20, 0x01	; 1
    682a:	bf 01       	movw	r22, r30
    682c:	80 ea       	ldi	r24, 0xA0	; 160
    682e:	94 e0       	ldi	r25, 0x04	; 4
    6830:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6834:	81 11       	cpse	r24, r1
    6836:	61 c0       	rjmp	.+194    	; 0x68fa <isr_100ms_twi1_onboard+0x224>
    6838:	e7 e3       	ldi	r30, 0x37	; 55
    683a:	f5 e2       	ldi	r31, 0x25	; 37
    683c:	81 81       	ldd	r24, Z+1	; 0x01
    683e:	90 e0       	ldi	r25, 0x00	; 0
    6840:	98 2f       	mov	r25, r24
    6842:	88 27       	eor	r24, r24
    6844:	20 81       	ld	r18, Z
    6846:	82 2b       	or	r24, r18
    6848:	20 91 49 20 	lds	r18, 0x2049	; 0x802049 <g_twi1_gyro_2_ofsx>
    684c:	30 91 4a 20 	lds	r19, 0x204A	; 0x80204a <g_twi1_gyro_2_ofsx+0x1>
    6850:	82 0f       	add	r24, r18
    6852:	93 1f       	adc	r25, r19
    6854:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <g_twi1_gyro_2_mag_x>
    6858:	90 93 3a 27 	sts	0x273A, r25	; 0x80273a <g_twi1_gyro_2_mag_x+0x1>
    685c:	83 81       	ldd	r24, Z+3	; 0x03
    685e:	90 e0       	ldi	r25, 0x00	; 0
    6860:	98 2f       	mov	r25, r24
    6862:	88 27       	eor	r24, r24
    6864:	22 81       	ldd	r18, Z+2	; 0x02
    6866:	82 2b       	or	r24, r18
    6868:	20 91 47 20 	lds	r18, 0x2047	; 0x802047 <g_twi1_gyro_2_ofsy>
    686c:	30 91 48 20 	lds	r19, 0x2048	; 0x802048 <g_twi1_gyro_2_ofsy+0x1>
    6870:	82 0f       	add	r24, r18
    6872:	93 1f       	adc	r25, r19
    6874:	80 93 37 27 	sts	0x2737, r24	; 0x802737 <g_twi1_gyro_2_mag_y>
    6878:	90 93 38 27 	sts	0x2738, r25	; 0x802738 <g_twi1_gyro_2_mag_y+0x1>
    687c:	85 81       	ldd	r24, Z+5	; 0x05
    687e:	90 e0       	ldi	r25, 0x00	; 0
    6880:	98 2f       	mov	r25, r24
    6882:	88 27       	eor	r24, r24
    6884:	24 81       	ldd	r18, Z+4	; 0x04
    6886:	82 2b       	or	r24, r18
    6888:	20 91 45 20 	lds	r18, 0x2045	; 0x802045 <g_twi1_gyro_2_ofsz>
    688c:	30 91 46 20 	lds	r19, 0x2046	; 0x802046 <g_twi1_gyro_2_ofsz+0x1>
    6890:	82 0f       	add	r24, r18
    6892:	93 1f       	adc	r25, r19
    6894:	80 93 35 27 	sts	0x2735, r24	; 0x802735 <g_twi1_gyro_2_mag_z>
    6898:	90 93 36 27 	sts	0x2736, r25	; 0x802736 <g_twi1_gyro_2_mag_z+0x1>
    689c:	eb e2       	ldi	r30, 0x2B	; 43
    689e:	f0 e2       	ldi	r31, 0x20	; 32
    68a0:	8c e0       	ldi	r24, 0x0C	; 12
    68a2:	80 83       	st	Z, r24
    68a4:	89 e0       	ldi	r24, 0x09	; 9
    68a6:	81 83       	std	Z+1, r24	; 0x01
    68a8:	81 e0       	ldi	r24, 0x01	; 1
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	84 83       	std	Z+4, r24	; 0x04
    68ae:	95 83       	std	Z+5, r25	; 0x05
    68b0:	80 87       	std	Z+8, r24	; 0x08
    68b2:	91 87       	std	Z+9, r25	; 0x09
    68b4:	41 e0       	ldi	r20, 0x01	; 1
    68b6:	bf 01       	movw	r22, r30
    68b8:	80 ea       	ldi	r24, 0xA0	; 160
    68ba:	94 e0       	ldi	r25, 0x04	; 4
    68bc:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    68c0:	81 11       	cpse	r24, r1
    68c2:	1b c0       	rjmp	.+54     	; 0x68fa <isr_100ms_twi1_onboard+0x224>
    68c4:	80 91 37 25 	lds	r24, 0x2537	; 0x802537 <twi1_m_data>
    68c8:	83 ff       	sbrs	r24, 3
    68ca:	0c c0       	rjmp	.+24     	; 0x68e4 <isr_100ms_twi1_onboard+0x20e>
    68cc:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <g_twi1_gyro_2_mag_x>
    68d0:	10 92 3a 27 	sts	0x273A, r1	; 0x80273a <g_twi1_gyro_2_mag_x+0x1>
    68d4:	10 92 37 27 	sts	0x2737, r1	; 0x802737 <g_twi1_gyro_2_mag_y>
    68d8:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <g_twi1_gyro_2_mag_y+0x1>
    68dc:	10 92 35 27 	sts	0x2735, r1	; 0x802735 <g_twi1_gyro_2_mag_z>
    68e0:	10 92 36 27 	sts	0x2736, r1	; 0x802736 <g_twi1_gyro_2_mag_z+0x1>
    68e4:	c1 2c       	mov	r12, r1
    68e6:	e1 2c       	mov	r14, r1
    68e8:	01 e0       	ldi	r16, 0x01	; 1
    68ea:	20 e0       	ldi	r18, 0x00	; 0
    68ec:	30 e0       	ldi	r19, 0x00	; 0
    68ee:	a9 01       	movw	r20, r18
    68f0:	60 e0       	ldi	r22, 0x00	; 0
    68f2:	85 e9       	ldi	r24, 0x95	; 149
    68f4:	9c e2       	ldi	r25, 0x2C	; 44
    68f6:	0e 94 b2 65 	call	0xcb64	; 0xcb64 <sched_push>
    68fa:	0f 91       	pop	r16
    68fc:	ef 90       	pop	r14
    68fe:	cf 90       	pop	r12
    6900:	08 95       	ret

00006902 <isr_500ms_twi1_onboard>:
    6902:	8f 92       	push	r8
    6904:	9f 92       	push	r9
    6906:	af 92       	push	r10
    6908:	bf 92       	push	r11
    690a:	cf 92       	push	r12
    690c:	ef 92       	push	r14
    690e:	0f 93       	push	r16
    6910:	4b 01       	movw	r8, r22
    6912:	5c 01       	movw	r10, r24
    6914:	78 94       	sei
    6916:	80 91 05 27 	lds	r24, 0x2705	; 0x802705 <g_twi1_hygro_valid>
    691a:	88 23       	and	r24, r24
    691c:	09 f4       	brne	.+2      	; 0x6920 <isr_500ms_twi1_onboard+0x1e>
    691e:	52 c0       	rjmp	.+164    	; 0x69c4 <isr_500ms_twi1_onboard+0xc2>
    6920:	80 91 81 26 	lds	r24, 0x2681	; 0x802681 <g_twi1_lock>
    6924:	81 11       	cpse	r24, r1
    6926:	4e c0       	rjmp	.+156    	; 0x69c4 <isr_500ms_twi1_onboard+0xc2>
    6928:	eb e2       	ldi	r30, 0x2B	; 43
    692a:	f0 e2       	ldi	r31, 0x20	; 32
    692c:	84 e4       	ldi	r24, 0x44	; 68
    692e:	80 83       	st	Z, r24
    6930:	80 ee       	ldi	r24, 0xE0	; 224
    6932:	81 83       	std	Z+1, r24	; 0x01
    6934:	12 82       	std	Z+2, r1	; 0x02
    6936:	82 e0       	ldi	r24, 0x02	; 2
    6938:	90 e0       	ldi	r25, 0x00	; 0
    693a:	84 83       	std	Z+4, r24	; 0x04
    693c:	95 83       	std	Z+5, r25	; 0x05
    693e:	85 e0       	ldi	r24, 0x05	; 5
    6940:	90 e0       	ldi	r25, 0x00	; 0
    6942:	80 87       	std	Z+8, r24	; 0x08
    6944:	91 87       	std	Z+9, r25	; 0x09
    6946:	41 e0       	ldi	r20, 0x01	; 1
    6948:	bf 01       	movw	r22, r30
    694a:	80 ea       	ldi	r24, 0xA0	; 160
    694c:	94 e0       	ldi	r25, 0x04	; 4
    694e:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6952:	81 11       	cpse	r24, r1
    6954:	16 c0       	rjmp	.+44     	; 0x6982 <isr_500ms_twi1_onboard+0x80>
    6956:	e7 e3       	ldi	r30, 0x37	; 55
    6958:	f5 e2       	ldi	r31, 0x25	; 37
    695a:	80 81       	ld	r24, Z
    695c:	90 e0       	ldi	r25, 0x00	; 0
    695e:	98 2f       	mov	r25, r24
    6960:	88 27       	eor	r24, r24
    6962:	21 81       	ldd	r18, Z+1	; 0x01
    6964:	82 2b       	or	r24, r18
    6966:	80 93 02 27 	sts	0x2702, r24	; 0x802702 <g_twi1_hygro_S_T>
    696a:	90 93 03 27 	sts	0x2703, r25	; 0x802703 <g_twi1_hygro_S_T+0x1>
    696e:	83 81       	ldd	r24, Z+3	; 0x03
    6970:	90 e0       	ldi	r25, 0x00	; 0
    6972:	98 2f       	mov	r25, r24
    6974:	88 27       	eor	r24, r24
    6976:	24 81       	ldd	r18, Z+4	; 0x04
    6978:	82 2b       	or	r24, r18
    697a:	80 93 00 27 	sts	0x2700, r24	; 0x802700 <g_twi1_hygro_S_RH>
    697e:	90 93 01 27 	sts	0x2701, r25	; 0x802701 <g_twi1_hygro_S_RH+0x1>
    6982:	eb e2       	ldi	r30, 0x2B	; 43
    6984:	f0 e2       	ldi	r31, 0x20	; 32
    6986:	84 e4       	ldi	r24, 0x44	; 68
    6988:	80 83       	st	Z, r24
    698a:	84 e2       	ldi	r24, 0x24	; 36
    698c:	81 83       	std	Z+1, r24	; 0x01
    698e:	12 82       	std	Z+2, r1	; 0x02
    6990:	82 e0       	ldi	r24, 0x02	; 2
    6992:	90 e0       	ldi	r25, 0x00	; 0
    6994:	84 83       	std	Z+4, r24	; 0x04
    6996:	95 83       	std	Z+5, r25	; 0x05
    6998:	10 86       	std	Z+8, r1	; 0x08
    699a:	11 86       	std	Z+9, r1	; 0x09
    699c:	40 e0       	ldi	r20, 0x00	; 0
    699e:	bf 01       	movw	r22, r30
    69a0:	80 ea       	ldi	r24, 0xA0	; 160
    69a2:	94 e0       	ldi	r25, 0x04	; 4
    69a4:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    69a8:	81 11       	cpse	r24, r1
    69aa:	0c c0       	rjmp	.+24     	; 0x69c4 <isr_500ms_twi1_onboard+0xc2>
    69ac:	c1 2c       	mov	r12, r1
    69ae:	e1 2c       	mov	r14, r1
    69b0:	01 e0       	ldi	r16, 0x01	; 1
    69b2:	26 e4       	ldi	r18, 0x46	; 70
    69b4:	30 e0       	ldi	r19, 0x00	; 0
    69b6:	40 e0       	ldi	r20, 0x00	; 0
    69b8:	50 e0       	ldi	r21, 0x00	; 0
    69ba:	60 e0       	ldi	r22, 0x00	; 0
    69bc:	88 e4       	ldi	r24, 0x48	; 72
    69be:	9c e2       	ldi	r25, 0x2C	; 44
    69c0:	0e 94 b2 65 	call	0xcb64	; 0xcb64 <sched_push>
    69c4:	80 91 28 27 	lds	r24, 0x2728	; 0x802728 <g_twi1_baro_valid>
    69c8:	88 23       	and	r24, r24
    69ca:	21 f0       	breq	.+8      	; 0x69d4 <isr_500ms_twi1_onboard+0xd2>
    69cc:	41 e0       	ldi	r20, 0x01	; 1
    69ce:	c5 01       	movw	r24, r10
    69d0:	b4 01       	movw	r22, r8
    69d2:	d5 dc       	rcall	.-1622   	; 0x637e <service_twi1_baro>
    69d4:	0f 91       	pop	r16
    69d6:	ef 90       	pop	r14
    69d8:	cf 90       	pop	r12
    69da:	bf 90       	pop	r11
    69dc:	af 90       	pop	r10
    69de:	9f 90       	pop	r9
    69e0:	8f 90       	pop	r8
    69e2:	08 95       	ret

000069e4 <isr_sparetime_twi1_onboard>:
    69e4:	cf 92       	push	r12
    69e6:	ef 92       	push	r14
    69e8:	0f 93       	push	r16
    69ea:	78 94       	sei
    69ec:	20 91 28 27 	lds	r18, 0x2728	; 0x802728 <g_twi1_baro_valid>
    69f0:	22 23       	and	r18, r18
    69f2:	81 f0       	breq	.+32     	; 0x6a14 <isr_sparetime_twi1_onboard+0x30>
    69f4:	40 e0       	ldi	r20, 0x00	; 0
    69f6:	c3 dc       	rcall	.-1658   	; 0x637e <service_twi1_baro>
    69f8:	88 23       	and	r24, r24
    69fa:	61 f0       	breq	.+24     	; 0x6a14 <isr_sparetime_twi1_onboard+0x30>
    69fc:	c1 2c       	mov	r12, r1
    69fe:	e1 2c       	mov	r14, r1
    6a00:	01 e0       	ldi	r16, 0x01	; 1
    6a02:	26 e4       	ldi	r18, 0x46	; 70
    6a04:	30 e0       	ldi	r19, 0x00	; 0
    6a06:	40 e0       	ldi	r20, 0x00	; 0
    6a08:	50 e0       	ldi	r21, 0x00	; 0
    6a0a:	60 e0       	ldi	r22, 0x00	; 0
    6a0c:	8d e6       	ldi	r24, 0x6D	; 109
    6a0e:	9f e2       	ldi	r25, 0x2F	; 47
    6a10:	0e 94 b2 65 	call	0xcb64	; 0xcb64 <sched_push>
    6a14:	0f 91       	pop	r16
    6a16:	ef 90       	pop	r14
    6a18:	cf 90       	pop	r12
    6a1a:	08 95       	ret

00006a1c <task_twi2_lcd_cls>:
    6a1c:	94 dd       	rcall	.-1240   	; 0x6546 <twi2_waitUntilReady>
    6a1e:	e7 e1       	ldi	r30, 0x17	; 23
    6a20:	f0 e2       	ldi	r31, 0x20	; 32
    6a22:	81 e1       	ldi	r24, 0x11	; 17
    6a24:	81 83       	std	Z+1, r24	; 0x01
    6a26:	10 86       	std	Z+8, r1	; 0x08
    6a28:	11 86       	std	Z+9, r1	; 0x09
    6a2a:	40 e0       	ldi	r20, 0x00	; 0
    6a2c:	bf 01       	movw	r22, r30
    6a2e:	80 e8       	ldi	r24, 0x80	; 128
    6a30:	94 e0       	ldi	r25, 0x04	; 4
    6a32:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6a36:	65 e0       	ldi	r22, 0x05	; 5
    6a38:	70 e0       	ldi	r23, 0x00	; 0
    6a3a:	80 e0       	ldi	r24, 0x00	; 0
    6a3c:	90 e0       	ldi	r25, 0x00	; 0
    6a3e:	0c 94 3d 2c 	jmp	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6a42:	08 95       	ret

00006a44 <task_twi2_lcd_pos_xy>:
    6a44:	cf 93       	push	r28
    6a46:	df 93       	push	r29
    6a48:	d8 2f       	mov	r29, r24
    6a4a:	c6 2f       	mov	r28, r22
    6a4c:	7c dd       	rcall	.-1288   	; 0x6546 <twi2_waitUntilReady>
    6a4e:	e7 e1       	ldi	r30, 0x17	; 23
    6a50:	f0 e2       	ldi	r31, 0x20	; 32
    6a52:	80 e2       	ldi	r24, 0x20	; 32
    6a54:	81 83       	std	Z+1, r24	; 0x01
    6a56:	af e2       	ldi	r26, 0x2F	; 47
    6a58:	b5 e2       	ldi	r27, 0x25	; 37
    6a5a:	dc 93       	st	X, r29
    6a5c:	11 96       	adiw	r26, 0x01	; 1
    6a5e:	cc 93       	st	X, r28
    6a60:	82 e0       	ldi	r24, 0x02	; 2
    6a62:	90 e0       	ldi	r25, 0x00	; 0
    6a64:	80 87       	std	Z+8, r24	; 0x08
    6a66:	91 87       	std	Z+9, r25	; 0x09
    6a68:	40 e0       	ldi	r20, 0x00	; 0
    6a6a:	bf 01       	movw	r22, r30
    6a6c:	80 e8       	ldi	r24, 0x80	; 128
    6a6e:	94 e0       	ldi	r25, 0x04	; 4
    6a70:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6a74:	65 e0       	ldi	r22, 0x05	; 5
    6a76:	70 e0       	ldi	r23, 0x00	; 0
    6a78:	80 e0       	ldi	r24, 0x00	; 0
    6a7a:	90 e0       	ldi	r25, 0x00	; 0
    6a7c:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6a80:	df 91       	pop	r29
    6a82:	cf 91       	pop	r28
    6a84:	08 95       	ret

00006a86 <task_twi2_lcd_print_format_float_P>:
    6a86:	cf 92       	push	r12
    6a88:	df 92       	push	r13
    6a8a:	ef 92       	push	r14
    6a8c:	ff 92       	push	r15
    6a8e:	0f 93       	push	r16
    6a90:	1f 93       	push	r17
    6a92:	cf 93       	push	r28
    6a94:	df 93       	push	r29
    6a96:	f2 2e       	mov	r15, r18
    6a98:	e3 2e       	mov	r14, r19
    6a9a:	d4 2e       	mov	r13, r20
    6a9c:	c5 2e       	mov	r12, r21
    6a9e:	d2 df       	rcall	.-92     	; 0x6a44 <task_twi2_lcd_pos_xy>
    6aa0:	52 dd       	rcall	.-1372   	; 0x6546 <twi2_waitUntilReady>
    6aa2:	c7 e1       	ldi	r28, 0x17	; 23
    6aa4:	d0 e2       	ldi	r29, 0x20	; 32
    6aa6:	80 e3       	ldi	r24, 0x30	; 48
    6aa8:	89 83       	std	Y+1, r24	; 0x01
    6aaa:	cf 92       	push	r12
    6aac:	df 92       	push	r13
    6aae:	ef 92       	push	r14
    6ab0:	ff 92       	push	r15
    6ab2:	1f 93       	push	r17
    6ab4:	0f 93       	push	r16
    6ab6:	80 e3       	ldi	r24, 0x30	; 48
    6ab8:	95 e2       	ldi	r25, 0x25	; 37
    6aba:	9f 93       	push	r25
    6abc:	8f 93       	push	r24
    6abe:	0e 94 c4 80 	call	0x10188	; 0x10188 <sprintf_P>
    6ac2:	80 93 2f 25 	sts	0x252F, r24	; 0x80252f <twi2_m_data>
    6ac6:	99 27       	eor	r25, r25
    6ac8:	01 96       	adiw	r24, 0x01	; 1
    6aca:	88 87       	std	Y+8, r24	; 0x08
    6acc:	99 87       	std	Y+9, r25	; 0x09
    6ace:	40 e0       	ldi	r20, 0x00	; 0
    6ad0:	be 01       	movw	r22, r28
    6ad2:	80 e8       	ldi	r24, 0x80	; 128
    6ad4:	94 e0       	ldi	r25, 0x04	; 4
    6ad6:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6ada:	65 e0       	ldi	r22, 0x05	; 5
    6adc:	70 e0       	ldi	r23, 0x00	; 0
    6ade:	80 e0       	ldi	r24, 0x00	; 0
    6ae0:	90 e0       	ldi	r25, 0x00	; 0
    6ae2:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6ae6:	8d b7       	in	r24, 0x3d	; 61
    6ae8:	9e b7       	in	r25, 0x3e	; 62
    6aea:	08 96       	adiw	r24, 0x08	; 8
    6aec:	8d bf       	out	0x3d, r24	; 61
    6aee:	9e bf       	out	0x3e, r25	; 62
    6af0:	df 91       	pop	r29
    6af2:	cf 91       	pop	r28
    6af4:	1f 91       	pop	r17
    6af6:	0f 91       	pop	r16
    6af8:	ff 90       	pop	r15
    6afa:	ef 90       	pop	r14
    6afc:	df 90       	pop	r13
    6afe:	cf 90       	pop	r12
    6b00:	08 95       	ret

00006b02 <task_twi2_lcd_str>:
    6b02:	9f 92       	push	r9
    6b04:	af 92       	push	r10
    6b06:	bf 92       	push	r11
    6b08:	cf 92       	push	r12
    6b0a:	df 92       	push	r13
    6b0c:	ef 92       	push	r14
    6b0e:	ff 92       	push	r15
    6b10:	0f 93       	push	r16
    6b12:	1f 93       	push	r17
    6b14:	cf 93       	push	r28
    6b16:	df 93       	push	r29
    6b18:	b8 2e       	mov	r11, r24
    6b1a:	a6 2e       	mov	r10, r22
    6b1c:	ea 01       	movw	r28, r20
    6b1e:	fa 01       	movw	r30, r20
    6b20:	01 90       	ld	r0, Z+
    6b22:	00 20       	and	r0, r0
    6b24:	e9 f7       	brne	.-6      	; 0x6b20 <task_twi2_lcd_str+0x1e>
    6b26:	31 97       	sbiw	r30, 0x01	; 1
    6b28:	ce 2e       	mov	r12, r30
    6b2a:	c4 1a       	sub	r12, r20
    6b2c:	09 f4       	brne	.+2      	; 0x6b30 <task_twi2_lcd_str+0x2e>
    6b2e:	44 c0       	rjmp	.+136    	; 0x6bb8 <task_twi2_lcd_str+0xb6>
    6b30:	07 e1       	ldi	r16, 0x17	; 23
    6b32:	10 e2       	ldi	r17, 0x20	; 32
    6b34:	0f 2e       	mov	r0, r31
    6b36:	f0 e3       	ldi	r31, 0x30	; 48
    6b38:	9f 2e       	mov	r9, r31
    6b3a:	f0 2d       	mov	r31, r0
    6b3c:	0f 2e       	mov	r0, r31
    6b3e:	ff e2       	ldi	r31, 0x2F	; 47
    6b40:	ef 2e       	mov	r14, r31
    6b42:	f5 e2       	ldi	r31, 0x25	; 37
    6b44:	ff 2e       	mov	r15, r31
    6b46:	f0 2d       	mov	r31, r0
    6b48:	dc 2c       	mov	r13, r12
    6b4a:	e6 e0       	ldi	r30, 0x06	; 6
    6b4c:	ec 15       	cp	r30, r12
    6b4e:	20 f4       	brcc	.+8      	; 0x6b58 <task_twi2_lcd_str+0x56>
    6b50:	0f 2e       	mov	r0, r31
    6b52:	f6 e0       	ldi	r31, 0x06	; 6
    6b54:	df 2e       	mov	r13, r31
    6b56:	f0 2d       	mov	r31, r0
    6b58:	6a 2d       	mov	r22, r10
    6b5a:	8b 2d       	mov	r24, r11
    6b5c:	73 df       	rcall	.-282    	; 0x6a44 <task_twi2_lcd_pos_xy>
    6b5e:	f3 dc       	rcall	.-1562   	; 0x6546 <twi2_waitUntilReady>
    6b60:	f8 01       	movw	r30, r16
    6b62:	91 82       	std	Z+1, r9	; 0x01
    6b64:	f7 01       	movw	r30, r14
    6b66:	d0 82       	st	Z, r13
    6b68:	dd 20       	and	r13, r13
    6b6a:	69 f0       	breq	.+26     	; 0x6b86 <task_twi2_lcd_str+0x84>
    6b6c:	81 e0       	ldi	r24, 0x01	; 1
    6b6e:	21 96       	adiw	r28, 0x01	; 1
    6b70:	e8 2f       	mov	r30, r24
    6b72:	f0 e0       	ldi	r31, 0x00	; 0
    6b74:	e1 5d       	subi	r30, 0xD1	; 209
    6b76:	fa 4d       	sbci	r31, 0xDA	; 218
    6b78:	de 01       	movw	r26, r28
    6b7a:	11 97       	sbiw	r26, 0x01	; 1
    6b7c:	9c 91       	ld	r25, X
    6b7e:	90 83       	st	Z, r25
    6b80:	8f 5f       	subi	r24, 0xFF	; 255
    6b82:	d8 16       	cp	r13, r24
    6b84:	a0 f7       	brcc	.-24     	; 0x6b6e <task_twi2_lcd_str+0x6c>
    6b86:	8d 2d       	mov	r24, r13
    6b88:	90 e0       	ldi	r25, 0x00	; 0
    6b8a:	01 96       	adiw	r24, 0x01	; 1
    6b8c:	f8 01       	movw	r30, r16
    6b8e:	80 87       	std	Z+8, r24	; 0x08
    6b90:	91 87       	std	Z+9, r25	; 0x09
    6b92:	40 e0       	ldi	r20, 0x00	; 0
    6b94:	b8 01       	movw	r22, r16
    6b96:	80 e8       	ldi	r24, 0x80	; 128
    6b98:	94 e0       	ldi	r25, 0x04	; 4
    6b9a:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6b9e:	65 e0       	ldi	r22, 0x05	; 5
    6ba0:	70 e0       	ldi	r23, 0x00	; 0
    6ba2:	80 e0       	ldi	r24, 0x00	; 0
    6ba4:	90 e0       	ldi	r25, 0x00	; 0
    6ba6:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6baa:	8d 2d       	mov	r24, r13
    6bac:	88 0f       	add	r24, r24
    6bae:	8d 0d       	add	r24, r13
    6bb0:	88 0f       	add	r24, r24
    6bb2:	b8 0e       	add	r11, r24
    6bb4:	cd 18       	sub	r12, r13
    6bb6:	41 f6       	brne	.-112    	; 0x6b48 <task_twi2_lcd_str+0x46>
    6bb8:	df 91       	pop	r29
    6bba:	cf 91       	pop	r28
    6bbc:	1f 91       	pop	r17
    6bbe:	0f 91       	pop	r16
    6bc0:	ff 90       	pop	r15
    6bc2:	ef 90       	pop	r14
    6bc4:	df 90       	pop	r13
    6bc6:	cf 90       	pop	r12
    6bc8:	bf 90       	pop	r11
    6bca:	af 90       	pop	r10
    6bcc:	9f 90       	pop	r9
    6bce:	08 95       	ret

00006bd0 <task_twi2_lcd_line>:
    6bd0:	0f 93       	push	r16
    6bd2:	cf 93       	push	r28
    6bd4:	df 93       	push	r29
    6bd6:	d4 2f       	mov	r29, r20
    6bd8:	c2 2f       	mov	r28, r18
    6bda:	34 df       	rcall	.-408    	; 0x6a44 <task_twi2_lcd_pos_xy>
    6bdc:	b4 dc       	rcall	.-1688   	; 0x6546 <twi2_waitUntilReady>
    6bde:	a7 e1       	ldi	r26, 0x17	; 23
    6be0:	b0 e2       	ldi	r27, 0x20	; 32
    6be2:	82 e3       	ldi	r24, 0x32	; 50
    6be4:	11 96       	adiw	r26, 0x01	; 1
    6be6:	8c 93       	st	X, r24
    6be8:	11 97       	sbiw	r26, 0x01	; 1
    6bea:	ef e2       	ldi	r30, 0x2F	; 47
    6bec:	f5 e2       	ldi	r31, 0x25	; 37
    6bee:	d0 83       	st	Z, r29
    6bf0:	c1 83       	std	Z+1, r28	; 0x01
    6bf2:	02 83       	std	Z+2, r16	; 0x02
    6bf4:	83 e0       	ldi	r24, 0x03	; 3
    6bf6:	90 e0       	ldi	r25, 0x00	; 0
    6bf8:	18 96       	adiw	r26, 0x08	; 8
    6bfa:	8d 93       	st	X+, r24
    6bfc:	9c 93       	st	X, r25
    6bfe:	19 97       	sbiw	r26, 0x09	; 9
    6c00:	40 e0       	ldi	r20, 0x00	; 0
    6c02:	bd 01       	movw	r22, r26
    6c04:	80 e8       	ldi	r24, 0x80	; 128
    6c06:	94 e0       	ldi	r25, 0x04	; 4
    6c08:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6c0c:	65 e0       	ldi	r22, 0x05	; 5
    6c0e:	70 e0       	ldi	r23, 0x00	; 0
    6c10:	80 e0       	ldi	r24, 0x00	; 0
    6c12:	90 e0       	ldi	r25, 0x00	; 0
    6c14:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6c18:	df 91       	pop	r29
    6c1a:	cf 91       	pop	r28
    6c1c:	0f 91       	pop	r16
    6c1e:	08 95       	ret

00006c20 <task_twi2_lcd_rect>:
    6c20:	ef 92       	push	r14
    6c22:	0f 93       	push	r16
    6c24:	cf 93       	push	r28
    6c26:	df 93       	push	r29
    6c28:	d4 2f       	mov	r29, r20
    6c2a:	c2 2f       	mov	r28, r18
    6c2c:	0b df       	rcall	.-490    	; 0x6a44 <task_twi2_lcd_pos_xy>
    6c2e:	8b dc       	rcall	.-1770   	; 0x6546 <twi2_waitUntilReady>
    6c30:	01 11       	cpse	r16, r1
    6c32:	02 c0       	rjmp	.+4      	; 0x6c38 <task_twi2_lcd_rect+0x18>
    6c34:	84 e3       	ldi	r24, 0x34	; 52
    6c36:	01 c0       	rjmp	.+2      	; 0x6c3a <task_twi2_lcd_rect+0x1a>
    6c38:	86 e3       	ldi	r24, 0x36	; 54
    6c3a:	a7 e1       	ldi	r26, 0x17	; 23
    6c3c:	b0 e2       	ldi	r27, 0x20	; 32
    6c3e:	11 96       	adiw	r26, 0x01	; 1
    6c40:	8c 93       	st	X, r24
    6c42:	11 97       	sbiw	r26, 0x01	; 1
    6c44:	ef e2       	ldi	r30, 0x2F	; 47
    6c46:	f5 e2       	ldi	r31, 0x25	; 37
    6c48:	d0 83       	st	Z, r29
    6c4a:	c1 83       	std	Z+1, r28	; 0x01
    6c4c:	e2 82       	std	Z+2, r14	; 0x02
    6c4e:	83 e0       	ldi	r24, 0x03	; 3
    6c50:	90 e0       	ldi	r25, 0x00	; 0
    6c52:	18 96       	adiw	r26, 0x08	; 8
    6c54:	8d 93       	st	X+, r24
    6c56:	9c 93       	st	X, r25
    6c58:	19 97       	sbiw	r26, 0x09	; 9
    6c5a:	40 e0       	ldi	r20, 0x00	; 0
    6c5c:	bd 01       	movw	r22, r26
    6c5e:	80 e8       	ldi	r24, 0x80	; 128
    6c60:	94 e0       	ldi	r25, 0x04	; 4
    6c62:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6c66:	65 e0       	ldi	r22, 0x05	; 5
    6c68:	70 e0       	ldi	r23, 0x00	; 0
    6c6a:	80 e0       	ldi	r24, 0x00	; 0
    6c6c:	90 e0       	ldi	r25, 0x00	; 0
    6c6e:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6c72:	df 91       	pop	r29
    6c74:	cf 91       	pop	r28
    6c76:	0f 91       	pop	r16
    6c78:	ef 90       	pop	r14
    6c7a:	08 95       	ret

00006c7c <task_twi2_lcd_circ>:
    6c7c:	0f 93       	push	r16
    6c7e:	cf 93       	push	r28
    6c80:	df 93       	push	r29
    6c82:	c4 2f       	mov	r28, r20
    6c84:	d2 2f       	mov	r29, r18
    6c86:	de de       	rcall	.-580    	; 0x6a44 <task_twi2_lcd_pos_xy>
    6c88:	5e dc       	rcall	.-1860   	; 0x6546 <twi2_waitUntilReady>
    6c8a:	d1 11       	cpse	r29, r1
    6c8c:	02 c0       	rjmp	.+4      	; 0x6c92 <task_twi2_lcd_circ+0x16>
    6c8e:	88 e3       	ldi	r24, 0x38	; 56
    6c90:	01 c0       	rjmp	.+2      	; 0x6c94 <task_twi2_lcd_circ+0x18>
    6c92:	8a e3       	ldi	r24, 0x3A	; 58
    6c94:	e7 e1       	ldi	r30, 0x17	; 23
    6c96:	f0 e2       	ldi	r31, 0x20	; 32
    6c98:	81 83       	std	Z+1, r24	; 0x01
    6c9a:	af e2       	ldi	r26, 0x2F	; 47
    6c9c:	b5 e2       	ldi	r27, 0x25	; 37
    6c9e:	cc 93       	st	X, r28
    6ca0:	11 96       	adiw	r26, 0x01	; 1
    6ca2:	0c 93       	st	X, r16
    6ca4:	82 e0       	ldi	r24, 0x02	; 2
    6ca6:	90 e0       	ldi	r25, 0x00	; 0
    6ca8:	80 87       	std	Z+8, r24	; 0x08
    6caa:	91 87       	std	Z+9, r25	; 0x09
    6cac:	40 e0       	ldi	r20, 0x00	; 0
    6cae:	bf 01       	movw	r22, r30
    6cb0:	80 e8       	ldi	r24, 0x80	; 128
    6cb2:	94 e0       	ldi	r25, 0x04	; 4
    6cb4:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6cb8:	65 e0       	ldi	r22, 0x05	; 5
    6cba:	70 e0       	ldi	r23, 0x00	; 0
    6cbc:	80 e0       	ldi	r24, 0x00	; 0
    6cbe:	90 e0       	ldi	r25, 0x00	; 0
    6cc0:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6cc4:	df 91       	pop	r29
    6cc6:	cf 91       	pop	r28
    6cc8:	0f 91       	pop	r16
    6cca:	08 95       	ret

00006ccc <task_twi2_lcd_header>:
    6ccc:	ef 92       	push	r14
    6cce:	0f 93       	push	r16
    6cd0:	a5 de       	rcall	.-694    	; 0x6a1c <task_twi2_lcd_cls>
    6cd2:	48 e3       	ldi	r20, 0x38	; 56
    6cd4:	51 e2       	ldi	r21, 0x21	; 33
    6cd6:	62 e0       	ldi	r22, 0x02	; 2
    6cd8:	8c e3       	ldi	r24, 0x3C	; 60
    6cda:	13 df       	rcall	.-474    	; 0x6b02 <task_twi2_lcd_str>
    6cdc:	42 e4       	ldi	r20, 0x42	; 66
    6cde:	51 e2       	ldi	r21, 0x21	; 33
    6ce0:	62 e0       	ldi	r22, 0x02	; 2
    6ce2:	84 eb       	ldi	r24, 0xB4	; 180
    6ce4:	0e df       	rcall	.-484    	; 0x6b02 <task_twi2_lcd_str>
    6ce6:	01 e0       	ldi	r16, 0x01	; 1
    6ce8:	21 e0       	ldi	r18, 0x01	; 1
    6cea:	43 e0       	ldi	r20, 0x03	; 3
    6cec:	64 e0       	ldi	r22, 0x04	; 4
    6cee:	89 e0       	ldi	r24, 0x09	; 9
    6cf0:	c5 df       	rcall	.-118    	; 0x6c7c <task_twi2_lcd_circ>
    6cf2:	ee 24       	eor	r14, r14
    6cf4:	e3 94       	inc	r14
    6cf6:	00 e0       	ldi	r16, 0x00	; 0
    6cf8:	24 e0       	ldi	r18, 0x04	; 4
    6cfa:	46 e0       	ldi	r20, 0x06	; 6
    6cfc:	62 e0       	ldi	r22, 0x02	; 2
    6cfe:	81 e0       	ldi	r24, 0x01	; 1
    6d00:	8f df       	rcall	.-226    	; 0x6c20 <task_twi2_lcd_rect>
    6d02:	24 e0       	ldi	r18, 0x04	; 4
    6d04:	46 e0       	ldi	r20, 0x06	; 6
    6d06:	62 e0       	ldi	r22, 0x02	; 2
    6d08:	8c e0       	ldi	r24, 0x0C	; 12
    6d0a:	8a df       	rcall	.-236    	; 0x6c20 <task_twi2_lcd_rect>
    6d0c:	01 e0       	ldi	r16, 0x01	; 1
    6d0e:	2b e0       	ldi	r18, 0x0B	; 11
    6d10:	4f ee       	ldi	r20, 0xEF	; 239
    6d12:	6b e0       	ldi	r22, 0x0B	; 11
    6d14:	80 e0       	ldi	r24, 0x00	; 0
    6d16:	5c df       	rcall	.-328    	; 0x6bd0 <task_twi2_lcd_line>
    6d18:	0f 91       	pop	r16
    6d1a:	ef 90       	pop	r14
    6d1c:	08 95       	ret

00006d1e <twi_start>:
    6d1e:	7f 92       	push	r7
    6d20:	8f 92       	push	r8
    6d22:	9f 92       	push	r9
    6d24:	af 92       	push	r10
    6d26:	bf 92       	push	r11
    6d28:	cf 92       	push	r12
    6d2a:	df 92       	push	r13
    6d2c:	ef 92       	push	r14
    6d2e:	ff 92       	push	r15
    6d30:	0f 93       	push	r16
    6d32:	1f 93       	push	r17
    6d34:	cf 93       	push	r28
    6d36:	df 93       	push	r29
    6d38:	60 e4       	ldi	r22, 0x40	; 64
    6d3a:	85 e0       	ldi	r24, 0x05	; 5
    6d3c:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    6d40:	66 e3       	ldi	r22, 0x36	; 54
    6d42:	70 e2       	ldi	r23, 0x20	; 32
    6d44:	80 ea       	ldi	r24, 0xA0	; 160
    6d46:	94 e0       	ldi	r25, 0x04	; 4
    6d48:	0e 94 5f 52 	call	0xa4be	; 0xa4be <twi_master_init>
    6d4c:	e0 ea       	ldi	r30, 0xA0	; 160
    6d4e:	f4 e0       	ldi	r31, 0x04	; 4
    6d50:	81 81       	ldd	r24, Z+1	; 0x01
    6d52:	88 60       	ori	r24, 0x08	; 8
    6d54:	81 83       	std	Z+1, r24	; 0x01
    6d56:	60 e4       	ldi	r22, 0x40	; 64
    6d58:	83 e0       	ldi	r24, 0x03	; 3
    6d5a:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    6d5e:	62 e2       	ldi	r22, 0x22	; 34
    6d60:	70 e2       	ldi	r23, 0x20	; 32
    6d62:	80 e8       	ldi	r24, 0x80	; 128
    6d64:	94 e0       	ldi	r25, 0x04	; 4
    6d66:	0e 94 5f 52 	call	0xa4be	; 0xa4be <twi_master_init>
    6d6a:	e0 e8       	ldi	r30, 0x80	; 128
    6d6c:	f4 e0       	ldi	r31, 0x04	; 4
    6d6e:	81 81       	ldd	r24, Z+1	; 0x01
    6d70:	88 60       	ori	r24, 0x08	; 8
    6d72:	81 83       	std	Z+1, r24	; 0x01
    6d74:	61 e4       	ldi	r22, 0x41	; 65
    6d76:	7b e4       	ldi	r23, 0x4B	; 75
    6d78:	8c e4       	ldi	r24, 0x4C	; 76
    6d7a:	90 e0       	ldi	r25, 0x00	; 0
    6d7c:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6d80:	e7 e1       	ldi	r30, 0x17	; 23
    6d82:	f0 e2       	ldi	r31, 0x20	; 32
    6d84:	81 e0       	ldi	r24, 0x01	; 1
    6d86:	81 83       	std	Z+1, r24	; 0x01
    6d88:	81 e0       	ldi	r24, 0x01	; 1
    6d8a:	90 e0       	ldi	r25, 0x00	; 0
    6d8c:	84 83       	std	Z+4, r24	; 0x04
    6d8e:	95 83       	std	Z+5, r25	; 0x05
    6d90:	80 87       	std	Z+8, r24	; 0x08
    6d92:	91 87       	std	Z+9, r25	; 0x09
    6d94:	41 e0       	ldi	r20, 0x01	; 1
    6d96:	bf 01       	movw	r22, r30
    6d98:	80 e8       	ldi	r24, 0x80	; 128
    6d9a:	94 e0       	ldi	r25, 0x04	; 4
    6d9c:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6da0:	80 91 2f 25 	lds	r24, 0x252F	; 0x80252f <twi2_m_data>
    6da4:	80 93 fb 26 	sts	0x26FB, r24	; 0x8026fb <g_twi2_lcd_version>
    6da8:	81 31       	cpi	r24, 0x11	; 17
    6daa:	08 f4       	brcc	.+2      	; 0x6dae <twi_start+0x90>
    6dac:	78 c0       	rjmp	.+240    	; 0x6e9e <twi_start+0x180>
    6dae:	c7 e1       	ldi	r28, 0x17	; 23
    6db0:	d0 e2       	ldi	r29, 0x20	; 32
    6db2:	82 e0       	ldi	r24, 0x02	; 2
    6db4:	89 83       	std	Y+1, r24	; 0x01
    6db6:	0f 2e       	mov	r0, r31
    6db8:	ff e2       	ldi	r31, 0x2F	; 47
    6dba:	ef 2e       	mov	r14, r31
    6dbc:	f5 e2       	ldi	r31, 0x25	; 37
    6dbe:	ff 2e       	mov	r15, r31
    6dc0:	f0 2d       	mov	r31, r0
    6dc2:	68 94       	set
    6dc4:	dd 24       	eor	r13, r13
    6dc6:	d4 f8       	bld	r13, 4
    6dc8:	f7 01       	movw	r30, r14
    6dca:	d0 82       	st	Z, r13
    6dcc:	01 e0       	ldi	r16, 0x01	; 1
    6dce:	10 e0       	ldi	r17, 0x00	; 0
    6dd0:	08 87       	std	Y+8, r16	; 0x08
    6dd2:	19 87       	std	Y+9, r17	; 0x09
    6dd4:	40 e0       	ldi	r20, 0x00	; 0
    6dd6:	be 01       	movw	r22, r28
    6dd8:	80 e8       	ldi	r24, 0x80	; 128
    6dda:	94 e0       	ldi	r25, 0x04	; 4
    6ddc:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6de0:	65 e0       	ldi	r22, 0x05	; 5
    6de2:	70 e0       	ldi	r23, 0x00	; 0
    6de4:	80 e0       	ldi	r24, 0x00	; 0
    6de6:	90 e0       	ldi	r25, 0x00	; 0
    6de8:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6dec:	ac db       	rcall	.-2216   	; 0x6546 <twi2_waitUntilReady>
    6dee:	d9 82       	std	Y+1, r13	; 0x01
    6df0:	18 86       	std	Y+8, r1	; 0x08
    6df2:	19 86       	std	Y+9, r1	; 0x09
    6df4:	40 e0       	ldi	r20, 0x00	; 0
    6df6:	be 01       	movw	r22, r28
    6df8:	80 e8       	ldi	r24, 0x80	; 128
    6dfa:	94 e0       	ldi	r25, 0x04	; 4
    6dfc:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6e00:	60 e9       	ldi	r22, 0x90	; 144
    6e02:	70 ed       	ldi	r23, 0xD0	; 208
    6e04:	83 e0       	ldi	r24, 0x03	; 3
    6e06:	90 e0       	ldi	r25, 0x00	; 0
    6e08:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6e0c:	81 e0       	ldi	r24, 0x01	; 1
    6e0e:	e4 db       	rcall	.-2104   	; 0x65d8 <twi2_set_leds>
    6e10:	9a db       	rcall	.-2252   	; 0x6546 <twi2_waitUntilReady>
    6e12:	84 e1       	ldi	r24, 0x14	; 20
    6e14:	89 83       	std	Y+1, r24	; 0x01
    6e16:	81 e0       	ldi	r24, 0x01	; 1
    6e18:	f7 01       	movw	r30, r14
    6e1a:	80 83       	st	Z, r24
    6e1c:	08 87       	std	Y+8, r16	; 0x08
    6e1e:	19 87       	std	Y+9, r17	; 0x09
    6e20:	40 e0       	ldi	r20, 0x00	; 0
    6e22:	be 01       	movw	r22, r28
    6e24:	80 e8       	ldi	r24, 0x80	; 128
    6e26:	94 e0       	ldi	r25, 0x04	; 4
    6e28:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6e2c:	65 e0       	ldi	r22, 0x05	; 5
    6e2e:	70 e0       	ldi	r23, 0x00	; 0
    6e30:	80 e0       	ldi	r24, 0x00	; 0
    6e32:	90 e0       	ldi	r25, 0x00	; 0
    6e34:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6e38:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <g_bias_pm>
    6e3c:	08 dc       	rcall	.-2032   	; 0x664e <twi2_set_bias>
    6e3e:	69 e1       	ldi	r22, 0x19	; 25
    6e40:	8c e2       	ldi	r24, 0x2C	; 44
    6e42:	1f dc       	rcall	.-1986   	; 0x6682 <twi2_set_beep>
    6e44:	61 e6       	ldi	r22, 0x61	; 97
    6e46:	73 ee       	ldi	r23, 0xE3	; 227
    6e48:	86 e1       	ldi	r24, 0x16	; 22
    6e4a:	90 e0       	ldi	r25, 0x00	; 0
    6e4c:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6e50:	c0 e8       	ldi	r28, 0x80	; 128
    6e52:	6c 2f       	mov	r22, r28
    6e54:	80 e0       	ldi	r24, 0x00	; 0
    6e56:	db db       	rcall	.-2122   	; 0x660e <twi2_set_ledbl>
    6e58:	68 e8       	ldi	r22, 0x88	; 136
    6e5a:	73 e1       	ldi	r23, 0x13	; 19
    6e5c:	80 e0       	ldi	r24, 0x00	; 0
    6e5e:	90 e0       	ldi	r25, 0x00	; 0
    6e60:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6e64:	c2 50       	subi	r28, 0x02	; 2
    6e66:	a9 f7       	brne	.-22     	; 0x6e52 <twi_start+0x134>
    6e68:	69 e1       	ldi	r22, 0x19	; 25
    6e6a:	88 e5       	ldi	r24, 0x58	; 88
    6e6c:	0a dc       	rcall	.-2028   	; 0x6682 <twi2_set_beep>
    6e6e:	61 e6       	ldi	r22, 0x61	; 97
    6e70:	73 ee       	ldi	r23, 0xE3	; 227
    6e72:	86 e1       	ldi	r24, 0x16	; 22
    6e74:	90 e0       	ldi	r25, 0x00	; 0
    6e76:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6e7a:	6c 2f       	mov	r22, r28
    6e7c:	80 e0       	ldi	r24, 0x00	; 0
    6e7e:	c7 db       	rcall	.-2162   	; 0x660e <twi2_set_ledbl>
    6e80:	68 e8       	ldi	r22, 0x88	; 136
    6e82:	73 e1       	ldi	r23, 0x13	; 19
    6e84:	80 e0       	ldi	r24, 0x00	; 0
    6e86:	90 e0       	ldi	r25, 0x00	; 0
    6e88:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6e8c:	ce 5f       	subi	r28, 0xFE	; 254
    6e8e:	c2 38       	cpi	r28, 0x82	; 130
    6e90:	a1 f7       	brne	.-24     	; 0x6e7a <twi_start+0x15c>
    6e92:	60 91 62 20 	lds	r22, 0x2062	; 0x802062 <g_backlight_mode_pwm>
    6e96:	80 e0       	ldi	r24, 0x00	; 0
    6e98:	ba db       	rcall	.-2188   	; 0x660e <twi2_set_ledbl>
    6e9a:	83 e0       	ldi	r24, 0x03	; 3
    6e9c:	9d db       	rcall	.-2246   	; 0x65d8 <twi2_set_leds>
    6e9e:	16 df       	rcall	.-468    	; 0x6ccc <task_twi2_lcd_header>
    6ea0:	1f 92       	push	r1
    6ea2:	84 e4       	ldi	r24, 0x44	; 68
    6ea4:	8f 93       	push	r24
    6ea6:	81 ee       	ldi	r24, 0xE1	; 225
    6ea8:	93 e3       	ldi	r25, 0x33	; 51
    6eaa:	9f 93       	push	r25
    6eac:	8f 93       	push	r24
    6eae:	1f 92       	push	r1
    6eb0:	80 e4       	ldi	r24, 0x40	; 64
    6eb2:	8f 93       	push	r24
    6eb4:	8f e3       	ldi	r24, 0x3F	; 63
    6eb6:	95 e2       	ldi	r25, 0x25	; 37
    6eb8:	9f 93       	push	r25
    6eba:	8f 93       	push	r24
    6ebc:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    6ec0:	81 34       	cpi	r24, 0x41	; 65
    6ec2:	91 05       	cpc	r25, r1
    6ec4:	10 f0       	brcs	.+4      	; 0x6eca <twi_start+0x1ac>
    6ec6:	80 e4       	ldi	r24, 0x40	; 64
    6ec8:	90 e0       	ldi	r25, 0x00	; 0
    6eca:	40 e0       	ldi	r20, 0x00	; 0
    6ecc:	68 2f       	mov	r22, r24
    6ece:	8f e3       	ldi	r24, 0x3F	; 63
    6ed0:	95 e2       	ldi	r25, 0x25	; 37
    6ed2:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    6ed6:	10 92 04 27 	sts	0x2704, r1	; 0x802704 <g_twi1_hygro_status>
    6eda:	eb e2       	ldi	r30, 0x2B	; 43
    6edc:	f0 e2       	ldi	r31, 0x20	; 32
    6ede:	84 e4       	ldi	r24, 0x44	; 68
    6ee0:	80 83       	st	Z, r24
    6ee2:	80 e3       	ldi	r24, 0x30	; 48
    6ee4:	81 83       	std	Z+1, r24	; 0x01
    6ee6:	83 e9       	ldi	r24, 0x93	; 147
    6ee8:	82 83       	std	Z+2, r24	; 0x02
    6eea:	82 e0       	ldi	r24, 0x02	; 2
    6eec:	90 e0       	ldi	r25, 0x00	; 0
    6eee:	84 83       	std	Z+4, r24	; 0x04
    6ef0:	95 83       	std	Z+5, r25	; 0x05
    6ef2:	10 86       	std	Z+8, r1	; 0x08
    6ef4:	11 86       	std	Z+9, r1	; 0x09
    6ef6:	40 e0       	ldi	r20, 0x00	; 0
    6ef8:	bf 01       	movw	r22, r30
    6efa:	80 ea       	ldi	r24, 0xA0	; 160
    6efc:	94 e0       	ldi	r25, 0x04	; 4
    6efe:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6f02:	c8 2f       	mov	r28, r24
    6f04:	8d b7       	in	r24, 0x3d	; 61
    6f06:	9e b7       	in	r25, 0x3e	; 62
    6f08:	08 96       	adiw	r24, 0x08	; 8
    6f0a:	8d bf       	out	0x3d, r24	; 61
    6f0c:	9e bf       	out	0x3e, r25	; 62
    6f0e:	cc 23       	and	r28, r28
    6f10:	f9 f0       	breq	.+62     	; 0x6f50 <twi_start+0x232>
    6f12:	8a e9       	ldi	r24, 0x9A	; 154
    6f14:	93 e3       	ldi	r25, 0x33	; 51
    6f16:	9f 93       	push	r25
    6f18:	8f 93       	push	r24
    6f1a:	1f 92       	push	r1
    6f1c:	80 e4       	ldi	r24, 0x40	; 64
    6f1e:	8f 93       	push	r24
    6f20:	8f e3       	ldi	r24, 0x3F	; 63
    6f22:	95 e2       	ldi	r25, 0x25	; 37
    6f24:	9f 93       	push	r25
    6f26:	8f 93       	push	r24
    6f28:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    6f2c:	81 34       	cpi	r24, 0x41	; 65
    6f2e:	91 05       	cpc	r25, r1
    6f30:	10 f0       	brcs	.+4      	; 0x6f36 <twi_start+0x218>
    6f32:	80 e4       	ldi	r24, 0x40	; 64
    6f34:	90 e0       	ldi	r25, 0x00	; 0
    6f36:	40 e0       	ldi	r20, 0x00	; 0
    6f38:	68 2f       	mov	r22, r24
    6f3a:	8f e3       	ldi	r24, 0x3F	; 63
    6f3c:	95 e2       	ldi	r25, 0x25	; 37
    6f3e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    6f42:	0f 90       	pop	r0
    6f44:	0f 90       	pop	r0
    6f46:	0f 90       	pop	r0
    6f48:	0f 90       	pop	r0
    6f4a:	0f 90       	pop	r0
    6f4c:	0f 90       	pop	r0
    6f4e:	a2 c0       	rjmp	.+324    	; 0x7094 <twi_start+0x376>
    6f50:	60 e1       	ldi	r22, 0x10	; 16
    6f52:	77 e2       	ldi	r23, 0x27	; 39
    6f54:	80 e0       	ldi	r24, 0x00	; 0
    6f56:	90 e0       	ldi	r25, 0x00	; 0
    6f58:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6f5c:	eb e2       	ldi	r30, 0x2B	; 43
    6f5e:	f0 e2       	ldi	r31, 0x20	; 32
    6f60:	84 e4       	ldi	r24, 0x44	; 68
    6f62:	80 83       	st	Z, r24
    6f64:	80 e3       	ldi	r24, 0x30	; 48
    6f66:	81 83       	std	Z+1, r24	; 0x01
    6f68:	82 ea       	ldi	r24, 0xA2	; 162
    6f6a:	82 83       	std	Z+2, r24	; 0x02
    6f6c:	82 e0       	ldi	r24, 0x02	; 2
    6f6e:	90 e0       	ldi	r25, 0x00	; 0
    6f70:	84 83       	std	Z+4, r24	; 0x04
    6f72:	95 83       	std	Z+5, r25	; 0x05
    6f74:	10 86       	std	Z+8, r1	; 0x08
    6f76:	11 86       	std	Z+9, r1	; 0x09
    6f78:	40 e0       	ldi	r20, 0x00	; 0
    6f7a:	bf 01       	movw	r22, r30
    6f7c:	80 ea       	ldi	r24, 0xA0	; 160
    6f7e:	94 e0       	ldi	r25, 0x04	; 4
    6f80:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6f84:	c8 2f       	mov	r28, r24
    6f86:	81 11       	cpse	r24, r1
    6f88:	85 c0       	rjmp	.+266    	; 0x7094 <twi_start+0x376>
    6f8a:	60 e1       	ldi	r22, 0x10	; 16
    6f8c:	77 e2       	ldi	r23, 0x27	; 39
    6f8e:	80 e0       	ldi	r24, 0x00	; 0
    6f90:	90 e0       	ldi	r25, 0x00	; 0
    6f92:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    6f96:	eb e2       	ldi	r30, 0x2B	; 43
    6f98:	f0 e2       	ldi	r31, 0x20	; 32
    6f9a:	84 e4       	ldi	r24, 0x44	; 68
    6f9c:	80 83       	st	Z, r24
    6f9e:	83 ef       	ldi	r24, 0xF3	; 243
    6fa0:	81 83       	std	Z+1, r24	; 0x01
    6fa2:	8d e2       	ldi	r24, 0x2D	; 45
    6fa4:	82 83       	std	Z+2, r24	; 0x02
    6fa6:	82 e0       	ldi	r24, 0x02	; 2
    6fa8:	90 e0       	ldi	r25, 0x00	; 0
    6faa:	84 83       	std	Z+4, r24	; 0x04
    6fac:	95 83       	std	Z+5, r25	; 0x05
    6fae:	80 87       	std	Z+8, r24	; 0x08
    6fb0:	91 87       	std	Z+9, r25	; 0x09
    6fb2:	41 e0       	ldi	r20, 0x01	; 1
    6fb4:	bf 01       	movw	r22, r30
    6fb6:	80 ea       	ldi	r24, 0xA0	; 160
    6fb8:	94 e0       	ldi	r25, 0x04	; 4
    6fba:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    6fbe:	c8 2f       	mov	r28, r24
    6fc0:	81 11       	cpse	r24, r1
    6fc2:	68 c0       	rjmp	.+208    	; 0x7094 <twi_start+0x376>
    6fc4:	80 91 38 25 	lds	r24, 0x2538	; 0x802538 <twi1_m_data+0x1>
    6fc8:	80 93 04 27 	sts	0x2704, r24	; 0x802704 <g_twi1_hygro_status>
    6fcc:	1f 92       	push	r1
    6fce:	8f 93       	push	r24
    6fd0:	88 e6       	ldi	r24, 0x68	; 104
    6fd2:	93 e3       	ldi	r25, 0x33	; 51
    6fd4:	9f 93       	push	r25
    6fd6:	8f 93       	push	r24
    6fd8:	1f 92       	push	r1
    6fda:	80 e4       	ldi	r24, 0x40	; 64
    6fdc:	8f 93       	push	r24
    6fde:	8f e3       	ldi	r24, 0x3F	; 63
    6fe0:	95 e2       	ldi	r25, 0x25	; 37
    6fe2:	9f 93       	push	r25
    6fe4:	8f 93       	push	r24
    6fe6:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    6fea:	81 34       	cpi	r24, 0x41	; 65
    6fec:	91 05       	cpc	r25, r1
    6fee:	10 f0       	brcs	.+4      	; 0x6ff4 <twi_start+0x2d6>
    6ff0:	80 e4       	ldi	r24, 0x40	; 64
    6ff2:	90 e0       	ldi	r25, 0x00	; 0
    6ff4:	40 e0       	ldi	r20, 0x00	; 0
    6ff6:	68 2f       	mov	r22, r24
    6ff8:	8f e3       	ldi	r24, 0x3F	; 63
    6ffa:	95 e2       	ldi	r25, 0x25	; 37
    6ffc:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    7000:	eb e2       	ldi	r30, 0x2B	; 43
    7002:	f0 e2       	ldi	r31, 0x20	; 32
    7004:	84 e4       	ldi	r24, 0x44	; 68
    7006:	80 83       	st	Z, r24
    7008:	84 e2       	ldi	r24, 0x24	; 36
    700a:	81 83       	std	Z+1, r24	; 0x01
    700c:	12 82       	std	Z+2, r1	; 0x02
    700e:	82 e0       	ldi	r24, 0x02	; 2
    7010:	90 e0       	ldi	r25, 0x00	; 0
    7012:	84 83       	std	Z+4, r24	; 0x04
    7014:	95 83       	std	Z+5, r25	; 0x05
    7016:	10 86       	std	Z+8, r1	; 0x08
    7018:	11 86       	std	Z+9, r1	; 0x09
    701a:	40 e0       	ldi	r20, 0x00	; 0
    701c:	bf 01       	movw	r22, r30
    701e:	80 ea       	ldi	r24, 0xA0	; 160
    7020:	94 e0       	ldi	r25, 0x04	; 4
    7022:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    7026:	c8 2f       	mov	r28, r24
    7028:	ed b7       	in	r30, 0x3d	; 61
    702a:	fe b7       	in	r31, 0x3e	; 62
    702c:	38 96       	adiw	r30, 0x08	; 8
    702e:	ed bf       	out	0x3d, r30	; 61
    7030:	fe bf       	out	0x3e, r31	; 62
    7032:	81 11       	cpse	r24, r1
    7034:	2f c0       	rjmp	.+94     	; 0x7094 <twi_start+0x376>
    7036:	81 e0       	ldi	r24, 0x01	; 1
    7038:	80 93 05 27 	sts	0x2705, r24	; 0x802705 <g_twi1_hygro_valid>
    703c:	85 e0       	ldi	r24, 0x05	; 5
    703e:	93 e3       	ldi	r25, 0x33	; 51
    7040:	9f 93       	push	r25
    7042:	8f 93       	push	r24
    7044:	1f 92       	push	r1
    7046:	10 e4       	ldi	r17, 0x40	; 64
    7048:	1f 93       	push	r17
    704a:	cf e3       	ldi	r28, 0x3F	; 63
    704c:	d5 e2       	ldi	r29, 0x25	; 37
    704e:	df 93       	push	r29
    7050:	cf 93       	push	r28
    7052:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    7056:	ae 01       	movw	r20, r28
    7058:	6e e1       	ldi	r22, 0x1E	; 30
    705a:	88 e0       	ldi	r24, 0x08	; 8
    705c:	52 dd       	rcall	.-1372   	; 0x6b02 <task_twi2_lcd_str>
    705e:	8a e4       	ldi	r24, 0x4A	; 74
    7060:	93 e3       	ldi	r25, 0x33	; 51
    7062:	9f 93       	push	r25
    7064:	8f 93       	push	r24
    7066:	1f 92       	push	r1
    7068:	1f 93       	push	r17
    706a:	df 93       	push	r29
    706c:	cf 93       	push	r28
    706e:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    7072:	81 34       	cpi	r24, 0x41	; 65
    7074:	91 05       	cpc	r25, r1
    7076:	10 f0       	brcs	.+4      	; 0x707c <twi_start+0x35e>
    7078:	80 e4       	ldi	r24, 0x40	; 64
    707a:	90 e0       	ldi	r25, 0x00	; 0
    707c:	40 e0       	ldi	r20, 0x00	; 0
    707e:	68 2f       	mov	r22, r24
    7080:	8f e3       	ldi	r24, 0x3F	; 63
    7082:	95 e2       	ldi	r25, 0x25	; 37
    7084:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    7088:	8d b7       	in	r24, 0x3d	; 61
    708a:	9e b7       	in	r25, 0x3e	; 62
    708c:	0c 96       	adiw	r24, 0x0c	; 12
    708e:	8d bf       	out	0x3d, r24	; 61
    7090:	9e bf       	out	0x3e, r25	; 62
    7092:	23 c0       	rjmp	.+70     	; 0x70da <twi_start+0x3bc>
    7094:	8c 2f       	mov	r24, r28
    7096:	0c 2e       	mov	r0, r28
    7098:	00 0c       	add	r0, r0
    709a:	99 0b       	sbc	r25, r25
    709c:	9f 93       	push	r25
    709e:	cf 93       	push	r28
    70a0:	89 e1       	ldi	r24, 0x19	; 25
    70a2:	93 e3       	ldi	r25, 0x33	; 51
    70a4:	9f 93       	push	r25
    70a6:	8f 93       	push	r24
    70a8:	1f 92       	push	r1
    70aa:	80 e4       	ldi	r24, 0x40	; 64
    70ac:	8f 93       	push	r24
    70ae:	8f e3       	ldi	r24, 0x3F	; 63
    70b0:	95 e2       	ldi	r25, 0x25	; 37
    70b2:	9f 93       	push	r25
    70b4:	8f 93       	push	r24
    70b6:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    70ba:	81 34       	cpi	r24, 0x41	; 65
    70bc:	91 05       	cpc	r25, r1
    70be:	10 f0       	brcs	.+4      	; 0x70c4 <twi_start+0x3a6>
    70c0:	80 e4       	ldi	r24, 0x40	; 64
    70c2:	90 e0       	ldi	r25, 0x00	; 0
    70c4:	40 e0       	ldi	r20, 0x00	; 0
    70c6:	68 2f       	mov	r22, r24
    70c8:	8f e3       	ldi	r24, 0x3F	; 63
    70ca:	95 e2       	ldi	r25, 0x25	; 37
    70cc:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    70d0:	ed b7       	in	r30, 0x3d	; 61
    70d2:	fe b7       	in	r31, 0x3e	; 62
    70d4:	38 96       	adiw	r30, 0x08	; 8
    70d6:	ed bf       	out	0x3d, r30	; 61
    70d8:	fe bf       	out	0x3e, r31	; 62
    70da:	1f 92       	push	r1
    70dc:	8c e0       	ldi	r24, 0x0C	; 12
    70de:	8f 93       	push	r24
    70e0:	1f 92       	push	r1
    70e2:	88 e6       	ldi	r24, 0x68	; 104
    70e4:	8f 93       	push	r24
    70e6:	88 ec       	ldi	r24, 0xC8	; 200
    70e8:	92 e3       	ldi	r25, 0x32	; 50
    70ea:	9f 93       	push	r25
    70ec:	8f 93       	push	r24
    70ee:	1f 92       	push	r1
    70f0:	80 e4       	ldi	r24, 0x40	; 64
    70f2:	8f 93       	push	r24
    70f4:	8f e3       	ldi	r24, 0x3F	; 63
    70f6:	95 e2       	ldi	r25, 0x25	; 37
    70f8:	9f 93       	push	r25
    70fa:	8f 93       	push	r24
    70fc:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    7100:	81 34       	cpi	r24, 0x41	; 65
    7102:	91 05       	cpc	r25, r1
    7104:	10 f0       	brcs	.+4      	; 0x710a <twi_start+0x3ec>
    7106:	80 e4       	ldi	r24, 0x40	; 64
    7108:	90 e0       	ldi	r25, 0x00	; 0
    710a:	40 e0       	ldi	r20, 0x00	; 0
    710c:	68 2f       	mov	r22, r24
    710e:	8f e3       	ldi	r24, 0x3F	; 63
    7110:	95 e2       	ldi	r25, 0x25	; 37
    7112:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    7116:	10 92 63 27 	sts	0x2763, r1	; 0x802763 <g_twi1_gyro_1_version>
    711a:	10 92 3e 27 	sts	0x273E, r1	; 0x80273e <g_twi1_gyro_2_version>
    711e:	eb e2       	ldi	r30, 0x2B	; 43
    7120:	f0 e2       	ldi	r31, 0x20	; 32
    7122:	88 e6       	ldi	r24, 0x68	; 104
    7124:	80 83       	st	Z, r24
    7126:	8b e6       	ldi	r24, 0x6B	; 107
    7128:	81 83       	std	Z+1, r24	; 0x01
    712a:	81 e0       	ldi	r24, 0x01	; 1
    712c:	90 e0       	ldi	r25, 0x00	; 0
    712e:	84 83       	std	Z+4, r24	; 0x04
    7130:	95 83       	std	Z+5, r25	; 0x05
    7132:	21 e8       	ldi	r18, 0x81	; 129
    7134:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    7138:	80 87       	std	Z+8, r24	; 0x08
    713a:	91 87       	std	Z+9, r25	; 0x09
    713c:	40 e0       	ldi	r20, 0x00	; 0
    713e:	bf 01       	movw	r22, r30
    7140:	80 ea       	ldi	r24, 0xA0	; 160
    7142:	94 e0       	ldi	r25, 0x04	; 4
    7144:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    7148:	c8 2f       	mov	r28, r24
    714a:	8d b7       	in	r24, 0x3d	; 61
    714c:	9e b7       	in	r25, 0x3e	; 62
    714e:	0a 96       	adiw	r24, 0x0a	; 10
    7150:	8d bf       	out	0x3d, r24	; 61
    7152:	9e bf       	out	0x3e, r25	; 62
    7154:	cc 23       	and	r28, r28
    7156:	f9 f0       	breq	.+62     	; 0x7196 <twi_start+0x478>
    7158:	8e e8       	ldi	r24, 0x8E	; 142
    715a:	92 e3       	ldi	r25, 0x32	; 50
    715c:	9f 93       	push	r25
    715e:	8f 93       	push	r24
    7160:	1f 92       	push	r1
    7162:	80 e4       	ldi	r24, 0x40	; 64
    7164:	8f 93       	push	r24
    7166:	8f e3       	ldi	r24, 0x3F	; 63
    7168:	95 e2       	ldi	r25, 0x25	; 37
    716a:	9f 93       	push	r25
    716c:	8f 93       	push	r24
    716e:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    7172:	81 34       	cpi	r24, 0x41	; 65
    7174:	91 05       	cpc	r25, r1
    7176:	10 f0       	brcs	.+4      	; 0x717c <twi_start+0x45e>
    7178:	80 e4       	ldi	r24, 0x40	; 64
    717a:	90 e0       	ldi	r25, 0x00	; 0
    717c:	40 e0       	ldi	r20, 0x00	; 0
    717e:	68 2f       	mov	r22, r24
    7180:	8f e3       	ldi	r24, 0x3F	; 63
    7182:	95 e2       	ldi	r25, 0x25	; 37
    7184:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    7188:	0f 90       	pop	r0
    718a:	0f 90       	pop	r0
    718c:	0f 90       	pop	r0
    718e:	0f 90       	pop	r0
    7190:	0f 90       	pop	r0
    7192:	0f 90       	pop	r0
    7194:	40 c2       	rjmp	.+1152   	; 0x7616 <twi_start+0x8f8>
    7196:	61 e5       	ldi	r22, 0x51	; 81
    7198:	73 ec       	ldi	r23, 0xC3	; 195
    719a:	80 e0       	ldi	r24, 0x00	; 0
    719c:	90 e0       	ldi	r25, 0x00	; 0
    719e:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    71a2:	eb e2       	ldi	r30, 0x2B	; 43
    71a4:	f0 e2       	ldi	r31, 0x20	; 32
    71a6:	88 e6       	ldi	r24, 0x68	; 104
    71a8:	80 83       	st	Z, r24
    71aa:	85 e7       	ldi	r24, 0x75	; 117
    71ac:	81 83       	std	Z+1, r24	; 0x01
    71ae:	81 e0       	ldi	r24, 0x01	; 1
    71b0:	90 e0       	ldi	r25, 0x00	; 0
    71b2:	84 83       	std	Z+4, r24	; 0x04
    71b4:	95 83       	std	Z+5, r25	; 0x05
    71b6:	80 87       	std	Z+8, r24	; 0x08
    71b8:	91 87       	std	Z+9, r25	; 0x09
    71ba:	41 e0       	ldi	r20, 0x01	; 1
    71bc:	bf 01       	movw	r22, r30
    71be:	80 ea       	ldi	r24, 0xA0	; 160
    71c0:	94 e0       	ldi	r25, 0x04	; 4
    71c2:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    71c6:	c8 2f       	mov	r28, r24
    71c8:	81 11       	cpse	r24, r1
    71ca:	25 c2       	rjmp	.+1098   	; 0x7616 <twi_start+0x8f8>
    71cc:	a7 e3       	ldi	r26, 0x37	; 55
    71ce:	b5 e2       	ldi	r27, 0x25	; 37
    71d0:	8c 91       	ld	r24, X
    71d2:	80 93 63 27 	sts	0x2763, r24	; 0x802763 <g_twi1_gyro_1_version>
    71d6:	eb e2       	ldi	r30, 0x2B	; 43
    71d8:	f0 e2       	ldi	r31, 0x20	; 32
    71da:	88 e6       	ldi	r24, 0x68	; 104
    71dc:	80 83       	st	Z, r24
    71de:	87 e3       	ldi	r24, 0x37	; 55
    71e0:	81 83       	std	Z+1, r24	; 0x01
    71e2:	81 e0       	ldi	r24, 0x01	; 1
    71e4:	90 e0       	ldi	r25, 0x00	; 0
    71e6:	84 83       	std	Z+4, r24	; 0x04
    71e8:	95 83       	std	Z+5, r25	; 0x05
    71ea:	22 e0       	ldi	r18, 0x02	; 2
    71ec:	2c 93       	st	X, r18
    71ee:	80 87       	std	Z+8, r24	; 0x08
    71f0:	91 87       	std	Z+9, r25	; 0x09
    71f2:	40 e0       	ldi	r20, 0x00	; 0
    71f4:	bf 01       	movw	r22, r30
    71f6:	80 ea       	ldi	r24, 0xA0	; 160
    71f8:	94 e0       	ldi	r25, 0x04	; 4
    71fa:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    71fe:	c8 2f       	mov	r28, r24
    7200:	81 11       	cpse	r24, r1
    7202:	09 c2       	rjmp	.+1042   	; 0x7616 <twi_start+0x8f8>
    7204:	eb e2       	ldi	r30, 0x2B	; 43
    7206:	f0 e2       	ldi	r31, 0x20	; 32
    7208:	8c e0       	ldi	r24, 0x0C	; 12
    720a:	80 83       	st	Z, r24
    720c:	8b e0       	ldi	r24, 0x0B	; 11
    720e:	81 83       	std	Z+1, r24	; 0x01
    7210:	81 e0       	ldi	r24, 0x01	; 1
    7212:	90 e0       	ldi	r25, 0x00	; 0
    7214:	84 83       	std	Z+4, r24	; 0x04
    7216:	95 83       	std	Z+5, r25	; 0x05
    7218:	21 e0       	ldi	r18, 0x01	; 1
    721a:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    721e:	80 87       	std	Z+8, r24	; 0x08
    7220:	91 87       	std	Z+9, r25	; 0x09
    7222:	40 e0       	ldi	r20, 0x00	; 0
    7224:	bf 01       	movw	r22, r30
    7226:	80 ea       	ldi	r24, 0xA0	; 160
    7228:	94 e0       	ldi	r25, 0x04	; 4
    722a:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    722e:	c8 2f       	mov	r28, r24
    7230:	81 11       	cpse	r24, r1
    7232:	f1 c1       	rjmp	.+994    	; 0x7616 <twi_start+0x8f8>
    7234:	61 e5       	ldi	r22, 0x51	; 81
    7236:	73 ec       	ldi	r23, 0xC3	; 195
    7238:	80 e0       	ldi	r24, 0x00	; 0
    723a:	90 e0       	ldi	r25, 0x00	; 0
    723c:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    7240:	eb e2       	ldi	r30, 0x2B	; 43
    7242:	f0 e2       	ldi	r31, 0x20	; 32
    7244:	8c e0       	ldi	r24, 0x0C	; 12
    7246:	80 83       	st	Z, r24
    7248:	11 82       	std	Z+1, r1	; 0x01
    724a:	81 e0       	ldi	r24, 0x01	; 1
    724c:	90 e0       	ldi	r25, 0x00	; 0
    724e:	84 83       	std	Z+4, r24	; 0x04
    7250:	95 83       	std	Z+5, r25	; 0x05
    7252:	80 87       	std	Z+8, r24	; 0x08
    7254:	91 87       	std	Z+9, r25	; 0x09
    7256:	41 e0       	ldi	r20, 0x01	; 1
    7258:	bf 01       	movw	r22, r30
    725a:	80 ea       	ldi	r24, 0xA0	; 160
    725c:	94 e0       	ldi	r25, 0x04	; 4
    725e:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    7262:	c8 2f       	mov	r28, r24
    7264:	81 11       	cpse	r24, r1
    7266:	d7 c1       	rjmp	.+942    	; 0x7616 <twi_start+0x8f8>
    7268:	80 91 37 25 	lds	r24, 0x2537	; 0x802537 <twi1_m_data>
    726c:	80 93 3e 27 	sts	0x273E, r24	; 0x80273e <g_twi1_gyro_2_version>
    7270:	1f 92       	push	r1
    7272:	8f 93       	push	r24
    7274:	80 91 63 27 	lds	r24, 0x2763	; 0x802763 <g_twi1_gyro_1_version>
    7278:	1f 92       	push	r1
    727a:	8f 93       	push	r24
    727c:	83 e5       	ldi	r24, 0x53	; 83
    727e:	92 e3       	ldi	r25, 0x32	; 50
    7280:	9f 93       	push	r25
    7282:	8f 93       	push	r24
    7284:	1f 92       	push	r1
    7286:	80 e4       	ldi	r24, 0x40	; 64
    7288:	8f 93       	push	r24
    728a:	8f e3       	ldi	r24, 0x3F	; 63
    728c:	95 e2       	ldi	r25, 0x25	; 37
    728e:	9f 93       	push	r25
    7290:	8f 93       	push	r24
    7292:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    7296:	81 34       	cpi	r24, 0x41	; 65
    7298:	91 05       	cpc	r25, r1
    729a:	10 f0       	brcs	.+4      	; 0x72a0 <twi_start+0x582>
    729c:	80 e4       	ldi	r24, 0x40	; 64
    729e:	90 e0       	ldi	r25, 0x00	; 0
    72a0:	40 e0       	ldi	r20, 0x00	; 0
    72a2:	68 2f       	mov	r22, r24
    72a4:	8f e3       	ldi	r24, 0x3F	; 63
    72a6:	95 e2       	ldi	r25, 0x25	; 37
    72a8:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    72ac:	eb e2       	ldi	r30, 0x2B	; 43
    72ae:	f0 e2       	ldi	r31, 0x20	; 32
    72b0:	8c e0       	ldi	r24, 0x0C	; 12
    72b2:	80 83       	st	Z, r24
    72b4:	8a e0       	ldi	r24, 0x0A	; 10
    72b6:	81 83       	std	Z+1, r24	; 0x01
    72b8:	81 e0       	ldi	r24, 0x01	; 1
    72ba:	90 e0       	ldi	r25, 0x00	; 0
    72bc:	84 83       	std	Z+4, r24	; 0x04
    72be:	95 83       	std	Z+5, r25	; 0x05
    72c0:	2f e1       	ldi	r18, 0x1F	; 31
    72c2:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    72c6:	80 87       	std	Z+8, r24	; 0x08
    72c8:	91 87       	std	Z+9, r25	; 0x09
    72ca:	40 e0       	ldi	r20, 0x00	; 0
    72cc:	bf 01       	movw	r22, r30
    72ce:	80 ea       	ldi	r24, 0xA0	; 160
    72d0:	94 e0       	ldi	r25, 0x04	; 4
    72d2:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    72d6:	c8 2f       	mov	r28, r24
    72d8:	ed b7       	in	r30, 0x3d	; 61
    72da:	fe b7       	in	r31, 0x3e	; 62
    72dc:	3a 96       	adiw	r30, 0x0a	; 10
    72de:	ed bf       	out	0x3d, r30	; 61
    72e0:	fe bf       	out	0x3e, r31	; 62
    72e2:	81 11       	cpse	r24, r1
    72e4:	98 c1       	rjmp	.+816    	; 0x7616 <twi_start+0x8f8>
    72e6:	eb e2       	ldi	r30, 0x2B	; 43
    72e8:	f0 e2       	ldi	r31, 0x20	; 32
    72ea:	8c e0       	ldi	r24, 0x0C	; 12
    72ec:	80 83       	st	Z, r24
    72ee:	80 e1       	ldi	r24, 0x10	; 16
    72f0:	81 83       	std	Z+1, r24	; 0x01
    72f2:	81 e0       	ldi	r24, 0x01	; 1
    72f4:	90 e0       	ldi	r25, 0x00	; 0
    72f6:	84 83       	std	Z+4, r24	; 0x04
    72f8:	95 83       	std	Z+5, r25	; 0x05
    72fa:	83 e0       	ldi	r24, 0x03	; 3
    72fc:	90 e0       	ldi	r25, 0x00	; 0
    72fe:	80 87       	std	Z+8, r24	; 0x08
    7300:	91 87       	std	Z+9, r25	; 0x09
    7302:	41 e0       	ldi	r20, 0x01	; 1
    7304:	bf 01       	movw	r22, r30
    7306:	80 ea       	ldi	r24, 0xA0	; 160
    7308:	94 e0       	ldi	r25, 0x04	; 4
    730a:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    730e:	c8 2f       	mov	r28, r24
    7310:	81 11       	cpse	r24, r1
    7312:	81 c1       	rjmp	.+770    	; 0x7616 <twi_start+0x8f8>
    7314:	a7 e3       	ldi	r26, 0x37	; 55
    7316:	b5 e2       	ldi	r27, 0x25	; 37
    7318:	8c 91       	ld	r24, X
    731a:	80 93 3d 27 	sts	0x273D, r24	; 0x80273d <g_twi1_gyro_2_asax>
    731e:	11 96       	adiw	r26, 0x01	; 1
    7320:	8c 91       	ld	r24, X
    7322:	11 97       	sbiw	r26, 0x01	; 1
    7324:	80 93 3c 27 	sts	0x273C, r24	; 0x80273c <g_twi1_gyro_2_asay>
    7328:	12 96       	adiw	r26, 0x02	; 2
    732a:	8c 91       	ld	r24, X
    732c:	12 97       	sbiw	r26, 0x02	; 2
    732e:	80 93 3b 27 	sts	0x273B, r24	; 0x80273b <g_twi1_gyro_2_asaz>
    7332:	eb e2       	ldi	r30, 0x2B	; 43
    7334:	f0 e2       	ldi	r31, 0x20	; 32
    7336:	8c e0       	ldi	r24, 0x0C	; 12
    7338:	80 83       	st	Z, r24
    733a:	8a e0       	ldi	r24, 0x0A	; 10
    733c:	81 83       	std	Z+1, r24	; 0x01
    733e:	81 e0       	ldi	r24, 0x01	; 1
    7340:	90 e0       	ldi	r25, 0x00	; 0
    7342:	84 83       	std	Z+4, r24	; 0x04
    7344:	95 83       	std	Z+5, r25	; 0x05
    7346:	20 e1       	ldi	r18, 0x10	; 16
    7348:	2c 93       	st	X, r18
    734a:	80 87       	std	Z+8, r24	; 0x08
    734c:	91 87       	std	Z+9, r25	; 0x09
    734e:	40 e0       	ldi	r20, 0x00	; 0
    7350:	bf 01       	movw	r22, r30
    7352:	80 ea       	ldi	r24, 0xA0	; 160
    7354:	94 e0       	ldi	r25, 0x04	; 4
    7356:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    735a:	c8 2f       	mov	r28, r24
    735c:	81 11       	cpse	r24, r1
    735e:	5b c1       	rjmp	.+694    	; 0x7616 <twi_start+0x8f8>
    7360:	61 e5       	ldi	r22, 0x51	; 81
    7362:	73 ec       	ldi	r23, 0xC3	; 195
    7364:	80 e0       	ldi	r24, 0x00	; 0
    7366:	90 e0       	ldi	r25, 0x00	; 0
    7368:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    736c:	eb e2       	ldi	r30, 0x2B	; 43
    736e:	f0 e2       	ldi	r31, 0x20	; 32
    7370:	8c e0       	ldi	r24, 0x0C	; 12
    7372:	80 83       	st	Z, r24
    7374:	8a e0       	ldi	r24, 0x0A	; 10
    7376:	81 83       	std	Z+1, r24	; 0x01
    7378:	81 e0       	ldi	r24, 0x01	; 1
    737a:	90 e0       	ldi	r25, 0x00	; 0
    737c:	84 83       	std	Z+4, r24	; 0x04
    737e:	95 83       	std	Z+5, r25	; 0x05
    7380:	22 e1       	ldi	r18, 0x12	; 18
    7382:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    7386:	80 87       	std	Z+8, r24	; 0x08
    7388:	91 87       	std	Z+9, r25	; 0x09
    738a:	40 e0       	ldi	r20, 0x00	; 0
    738c:	bf 01       	movw	r22, r30
    738e:	80 ea       	ldi	r24, 0xA0	; 160
    7390:	94 e0       	ldi	r25, 0x04	; 4
    7392:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    7396:	c8 2f       	mov	r28, r24
    7398:	81 11       	cpse	r24, r1
    739a:	3d c1       	rjmp	.+634    	; 0x7616 <twi_start+0x8f8>
    739c:	ab e2       	ldi	r26, 0x2B	; 43
    739e:	b0 e2       	ldi	r27, 0x20	; 32
    73a0:	88 e6       	ldi	r24, 0x68	; 104
    73a2:	8c 93       	st	X, r24
    73a4:	83 e1       	ldi	r24, 0x13	; 19
    73a6:	11 96       	adiw	r26, 0x01	; 1
    73a8:	8c 93       	st	X, r24
    73aa:	11 97       	sbiw	r26, 0x01	; 1
    73ac:	81 e0       	ldi	r24, 0x01	; 1
    73ae:	90 e0       	ldi	r25, 0x00	; 0
    73b0:	14 96       	adiw	r26, 0x04	; 4
    73b2:	8d 93       	st	X+, r24
    73b4:	9c 93       	st	X, r25
    73b6:	15 97       	sbiw	r26, 0x05	; 5
    73b8:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <g_twi1_gyro_1_gyro_ofsx>
    73bc:	90 91 50 20 	lds	r25, 0x2050	; 0x802050 <g_twi1_gyro_1_gyro_ofsx+0x1>
    73c0:	e7 e3       	ldi	r30, 0x37	; 55
    73c2:	f5 e2       	ldi	r31, 0x25	; 37
    73c4:	90 83       	st	Z, r25
    73c6:	81 83       	std	Z+1, r24	; 0x01
    73c8:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <g_twi1_gyro_1_gyro_ofsy>
    73cc:	90 91 4e 20 	lds	r25, 0x204E	; 0x80204e <g_twi1_gyro_1_gyro_ofsy+0x1>
    73d0:	92 83       	std	Z+2, r25	; 0x02
    73d2:	83 83       	std	Z+3, r24	; 0x03
    73d4:	80 91 4b 20 	lds	r24, 0x204B	; 0x80204b <g_twi1_gyro_1_gyro_ofsz>
    73d8:	90 91 4c 20 	lds	r25, 0x204C	; 0x80204c <g_twi1_gyro_1_gyro_ofsz+0x1>
    73dc:	94 83       	std	Z+4, r25	; 0x04
    73de:	85 83       	std	Z+5, r24	; 0x05
    73e0:	86 e0       	ldi	r24, 0x06	; 6
    73e2:	90 e0       	ldi	r25, 0x00	; 0
    73e4:	18 96       	adiw	r26, 0x08	; 8
    73e6:	8d 93       	st	X+, r24
    73e8:	9c 93       	st	X, r25
    73ea:	19 97       	sbiw	r26, 0x09	; 9
    73ec:	40 e0       	ldi	r20, 0x00	; 0
    73ee:	bd 01       	movw	r22, r26
    73f0:	80 ea       	ldi	r24, 0xA0	; 160
    73f2:	94 e0       	ldi	r25, 0x04	; 4
    73f4:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    73f8:	c8 2f       	mov	r28, r24
    73fa:	81 11       	cpse	r24, r1
    73fc:	0c c1       	rjmp	.+536    	; 0x7616 <twi_start+0x8f8>
    73fe:	eb e2       	ldi	r30, 0x2B	; 43
    7400:	f0 e2       	ldi	r31, 0x20	; 32
    7402:	88 e6       	ldi	r24, 0x68	; 104
    7404:	80 83       	st	Z, r24
    7406:	87 e7       	ldi	r24, 0x77	; 119
    7408:	81 83       	std	Z+1, r24	; 0x01
    740a:	81 e0       	ldi	r24, 0x01	; 1
    740c:	90 e0       	ldi	r25, 0x00	; 0
    740e:	84 83       	std	Z+4, r24	; 0x04
    7410:	95 83       	std	Z+5, r25	; 0x05
    7412:	80 91 5b 20 	lds	r24, 0x205B	; 0x80205b <g_twi1_gyro_1_accel_ofsx>
    7416:	90 91 5c 20 	lds	r25, 0x205C	; 0x80205c <g_twi1_gyro_1_accel_ofsx+0x1>
    741a:	a7 e3       	ldi	r26, 0x37	; 55
    741c:	b5 e2       	ldi	r27, 0x25	; 37
    741e:	9c 01       	movw	r18, r24
    7420:	22 0f       	add	r18, r18
    7422:	23 2f       	mov	r18, r19
    7424:	22 1f       	adc	r18, r18
    7426:	33 0b       	sbc	r19, r19
    7428:	31 95       	neg	r19
    742a:	2c 93       	st	X, r18
    742c:	88 0f       	add	r24, r24
    742e:	11 96       	adiw	r26, 0x01	; 1
    7430:	8c 93       	st	X, r24
    7432:	82 e0       	ldi	r24, 0x02	; 2
    7434:	90 e0       	ldi	r25, 0x00	; 0
    7436:	80 87       	std	Z+8, r24	; 0x08
    7438:	91 87       	std	Z+9, r25	; 0x09
    743a:	40 e0       	ldi	r20, 0x00	; 0
    743c:	bf 01       	movw	r22, r30
    743e:	80 ea       	ldi	r24, 0xA0	; 160
    7440:	94 e0       	ldi	r25, 0x04	; 4
    7442:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    7446:	c8 2f       	mov	r28, r24
    7448:	81 11       	cpse	r24, r1
    744a:	e5 c0       	rjmp	.+458    	; 0x7616 <twi_start+0x8f8>
    744c:	8a e7       	ldi	r24, 0x7A	; 122
    744e:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <twi1_packet+0x1>
    7452:	80 91 59 20 	lds	r24, 0x2059	; 0x802059 <g_twi1_gyro_1_accel_ofsy>
    7456:	90 91 5a 20 	lds	r25, 0x205A	; 0x80205a <g_twi1_gyro_1_accel_ofsy+0x1>
    745a:	e7 e3       	ldi	r30, 0x37	; 55
    745c:	f5 e2       	ldi	r31, 0x25	; 37
    745e:	9c 01       	movw	r18, r24
    7460:	22 0f       	add	r18, r18
    7462:	23 2f       	mov	r18, r19
    7464:	22 1f       	adc	r18, r18
    7466:	33 0b       	sbc	r19, r19
    7468:	31 95       	neg	r19
    746a:	20 83       	st	Z, r18
    746c:	88 0f       	add	r24, r24
    746e:	81 83       	std	Z+1, r24	; 0x01
    7470:	40 e0       	ldi	r20, 0x00	; 0
    7472:	6b e2       	ldi	r22, 0x2B	; 43
    7474:	70 e2       	ldi	r23, 0x20	; 32
    7476:	80 ea       	ldi	r24, 0xA0	; 160
    7478:	94 e0       	ldi	r25, 0x04	; 4
    747a:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    747e:	c8 2f       	mov	r28, r24
    7480:	81 11       	cpse	r24, r1
    7482:	c9 c0       	rjmp	.+402    	; 0x7616 <twi_start+0x8f8>
    7484:	8d e7       	ldi	r24, 0x7D	; 125
    7486:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <twi1_packet+0x1>
    748a:	80 91 57 20 	lds	r24, 0x2057	; 0x802057 <g_twi1_gyro_1_accel_ofsz>
    748e:	90 91 58 20 	lds	r25, 0x2058	; 0x802058 <g_twi1_gyro_1_accel_ofsz+0x1>
    7492:	e7 e3       	ldi	r30, 0x37	; 55
    7494:	f5 e2       	ldi	r31, 0x25	; 37
    7496:	9c 01       	movw	r18, r24
    7498:	22 0f       	add	r18, r18
    749a:	23 2f       	mov	r18, r19
    749c:	22 1f       	adc	r18, r18
    749e:	33 0b       	sbc	r19, r19
    74a0:	31 95       	neg	r19
    74a2:	20 83       	st	Z, r18
    74a4:	88 0f       	add	r24, r24
    74a6:	81 83       	std	Z+1, r24	; 0x01
    74a8:	40 e0       	ldi	r20, 0x00	; 0
    74aa:	6b e2       	ldi	r22, 0x2B	; 43
    74ac:	70 e2       	ldi	r23, 0x20	; 32
    74ae:	80 ea       	ldi	r24, 0xA0	; 160
    74b0:	94 e0       	ldi	r25, 0x04	; 4
    74b2:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    74b6:	c8 2f       	mov	r28, r24
    74b8:	81 11       	cpse	r24, r1
    74ba:	ad c0       	rjmp	.+346    	; 0x7616 <twi_start+0x8f8>
    74bc:	eb e2       	ldi	r30, 0x2B	; 43
    74be:	f0 e2       	ldi	r31, 0x20	; 32
    74c0:	88 e6       	ldi	r24, 0x68	; 104
    74c2:	80 83       	st	Z, r24
    74c4:	89 e1       	ldi	r24, 0x19	; 25
    74c6:	81 83       	std	Z+1, r24	; 0x01
    74c8:	81 e0       	ldi	r24, 0x01	; 1
    74ca:	90 e0       	ldi	r25, 0x00	; 0
    74cc:	84 83       	std	Z+4, r24	; 0x04
    74ce:	95 83       	std	Z+5, r25	; 0x05
    74d0:	23 e6       	ldi	r18, 0x63	; 99
    74d2:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    74d6:	80 87       	std	Z+8, r24	; 0x08
    74d8:	91 87       	std	Z+9, r25	; 0x09
    74da:	40 e0       	ldi	r20, 0x00	; 0
    74dc:	bf 01       	movw	r22, r30
    74de:	80 ea       	ldi	r24, 0xA0	; 160
    74e0:	94 e0       	ldi	r25, 0x04	; 4
    74e2:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    74e6:	c8 2f       	mov	r28, r24
    74e8:	81 11       	cpse	r24, r1
    74ea:	95 c0       	rjmp	.+298    	; 0x7616 <twi_start+0x8f8>
    74ec:	eb e2       	ldi	r30, 0x2B	; 43
    74ee:	f0 e2       	ldi	r31, 0x20	; 32
    74f0:	88 e6       	ldi	r24, 0x68	; 104
    74f2:	80 83       	st	Z, r24
    74f4:	8a e1       	ldi	r24, 0x1A	; 26
    74f6:	81 83       	std	Z+1, r24	; 0x01
    74f8:	81 e0       	ldi	r24, 0x01	; 1
    74fa:	90 e0       	ldi	r25, 0x00	; 0
    74fc:	84 83       	std	Z+4, r24	; 0x04
    74fe:	95 83       	std	Z+5, r25	; 0x05
    7500:	26 e0       	ldi	r18, 0x06	; 6
    7502:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    7506:	80 87       	std	Z+8, r24	; 0x08
    7508:	91 87       	std	Z+9, r25	; 0x09
    750a:	40 e0       	ldi	r20, 0x00	; 0
    750c:	bf 01       	movw	r22, r30
    750e:	80 ea       	ldi	r24, 0xA0	; 160
    7510:	94 e0       	ldi	r25, 0x04	; 4
    7512:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    7516:	c8 2f       	mov	r28, r24
    7518:	81 11       	cpse	r24, r1
    751a:	7d c0       	rjmp	.+250    	; 0x7616 <twi_start+0x8f8>
    751c:	eb e2       	ldi	r30, 0x2B	; 43
    751e:	f0 e2       	ldi	r31, 0x20	; 32
    7520:	88 e6       	ldi	r24, 0x68	; 104
    7522:	80 83       	st	Z, r24
    7524:	8d e1       	ldi	r24, 0x1D	; 29
    7526:	81 83       	std	Z+1, r24	; 0x01
    7528:	81 e0       	ldi	r24, 0x01	; 1
    752a:	90 e0       	ldi	r25, 0x00	; 0
    752c:	84 83       	std	Z+4, r24	; 0x04
    752e:	95 83       	std	Z+5, r25	; 0x05
    7530:	26 e0       	ldi	r18, 0x06	; 6
    7532:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    7536:	80 87       	std	Z+8, r24	; 0x08
    7538:	91 87       	std	Z+9, r25	; 0x09
    753a:	40 e0       	ldi	r20, 0x00	; 0
    753c:	bf 01       	movw	r22, r30
    753e:	80 ea       	ldi	r24, 0xA0	; 160
    7540:	94 e0       	ldi	r25, 0x04	; 4
    7542:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    7546:	c8 2f       	mov	r28, r24
    7548:	81 11       	cpse	r24, r1
    754a:	65 c0       	rjmp	.+202    	; 0x7616 <twi_start+0x8f8>
    754c:	eb e2       	ldi	r30, 0x2B	; 43
    754e:	f0 e2       	ldi	r31, 0x20	; 32
    7550:	88 e6       	ldi	r24, 0x68	; 104
    7552:	80 83       	st	Z, r24
    7554:	8f e1       	ldi	r24, 0x1F	; 31
    7556:	81 83       	std	Z+1, r24	; 0x01
    7558:	81 e0       	ldi	r24, 0x01	; 1
    755a:	90 e0       	ldi	r25, 0x00	; 0
    755c:	84 83       	std	Z+4, r24	; 0x04
    755e:	95 83       	std	Z+5, r25	; 0x05
    7560:	29 e1       	ldi	r18, 0x19	; 25
    7562:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    7566:	80 87       	std	Z+8, r24	; 0x08
    7568:	91 87       	std	Z+9, r25	; 0x09
    756a:	40 e0       	ldi	r20, 0x00	; 0
    756c:	bf 01       	movw	r22, r30
    756e:	80 ea       	ldi	r24, 0xA0	; 160
    7570:	94 e0       	ldi	r25, 0x04	; 4
    7572:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    7576:	c8 2f       	mov	r28, r24
    7578:	81 11       	cpse	r24, r1
    757a:	4d c0       	rjmp	.+154    	; 0x7616 <twi_start+0x8f8>
    757c:	eb e2       	ldi	r30, 0x2B	; 43
    757e:	f0 e2       	ldi	r31, 0x20	; 32
    7580:	88 e6       	ldi	r24, 0x68	; 104
    7582:	80 83       	st	Z, r24
    7584:	8a e6       	ldi	r24, 0x6A	; 106
    7586:	81 83       	std	Z+1, r24	; 0x01
    7588:	81 e0       	ldi	r24, 0x01	; 1
    758a:	90 e0       	ldi	r25, 0x00	; 0
    758c:	84 83       	std	Z+4, r24	; 0x04
    758e:	95 83       	std	Z+5, r25	; 0x05
    7590:	21 e0       	ldi	r18, 0x01	; 1
    7592:	20 93 37 25 	sts	0x2537, r18	; 0x802537 <twi1_m_data>
    7596:	80 87       	std	Z+8, r24	; 0x08
    7598:	91 87       	std	Z+9, r25	; 0x09
    759a:	40 e0       	ldi	r20, 0x00	; 0
    759c:	bf 01       	movw	r22, r30
    759e:	80 ea       	ldi	r24, 0xA0	; 160
    75a0:	94 e0       	ldi	r25, 0x04	; 4
    75a2:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    75a6:	c8 2f       	mov	r28, r24
    75a8:	81 11       	cpse	r24, r1
    75aa:	35 c0       	rjmp	.+106    	; 0x7616 <twi_start+0x8f8>
    75ac:	61 e5       	ldi	r22, 0x51	; 81
    75ae:	73 ec       	ldi	r23, 0xC3	; 195
    75b0:	80 e0       	ldi	r24, 0x00	; 0
    75b2:	90 e0       	ldi	r25, 0x00	; 0
    75b4:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    75b8:	81 e0       	ldi	r24, 0x01	; 1
    75ba:	80 93 64 27 	sts	0x2764, r24	; 0x802764 <g_twi1_gyro_valid>
    75be:	80 ef       	ldi	r24, 0xF0	; 240
    75c0:	91 e3       	ldi	r25, 0x31	; 49
    75c2:	9f 93       	push	r25
    75c4:	8f 93       	push	r24
    75c6:	1f 92       	push	r1
    75c8:	10 e4       	ldi	r17, 0x40	; 64
    75ca:	1f 93       	push	r17
    75cc:	cf e3       	ldi	r28, 0x3F	; 63
    75ce:	d5 e2       	ldi	r29, 0x25	; 37
    75d0:	df 93       	push	r29
    75d2:	cf 93       	push	r28
    75d4:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    75d8:	ae 01       	movw	r20, r28
    75da:	68 e2       	ldi	r22, 0x28	; 40
    75dc:	88 e0       	ldi	r24, 0x08	; 8
    75de:	91 da       	rcall	.-2782   	; 0x6b02 <task_twi2_lcd_str>
    75e0:	85 e3       	ldi	r24, 0x35	; 53
    75e2:	92 e3       	ldi	r25, 0x32	; 50
    75e4:	9f 93       	push	r25
    75e6:	8f 93       	push	r24
    75e8:	1f 92       	push	r1
    75ea:	1f 93       	push	r17
    75ec:	df 93       	push	r29
    75ee:	cf 93       	push	r28
    75f0:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    75f4:	81 34       	cpi	r24, 0x41	; 65
    75f6:	91 05       	cpc	r25, r1
    75f8:	10 f0       	brcs	.+4      	; 0x75fe <twi_start+0x8e0>
    75fa:	80 e4       	ldi	r24, 0x40	; 64
    75fc:	90 e0       	ldi	r25, 0x00	; 0
    75fe:	40 e0       	ldi	r20, 0x00	; 0
    7600:	68 2f       	mov	r22, r24
    7602:	8f e3       	ldi	r24, 0x3F	; 63
    7604:	95 e2       	ldi	r25, 0x25	; 37
    7606:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    760a:	8d b7       	in	r24, 0x3d	; 61
    760c:	9e b7       	in	r25, 0x3e	; 62
    760e:	0c 96       	adiw	r24, 0x0c	; 12
    7610:	8d bf       	out	0x3d, r24	; 61
    7612:	9e bf       	out	0x3e, r25	; 62
    7614:	23 c0       	rjmp	.+70     	; 0x765c <twi_start+0x93e>
    7616:	8c 2f       	mov	r24, r28
    7618:	0c 2e       	mov	r0, r28
    761a:	00 0c       	add	r0, r0
    761c:	99 0b       	sbc	r25, r25
    761e:	9f 93       	push	r25
    7620:	cf 93       	push	r28
    7622:	84 e0       	ldi	r24, 0x04	; 4
    7624:	92 e3       	ldi	r25, 0x32	; 50
    7626:	9f 93       	push	r25
    7628:	8f 93       	push	r24
    762a:	1f 92       	push	r1
    762c:	80 e4       	ldi	r24, 0x40	; 64
    762e:	8f 93       	push	r24
    7630:	8f e3       	ldi	r24, 0x3F	; 63
    7632:	95 e2       	ldi	r25, 0x25	; 37
    7634:	9f 93       	push	r25
    7636:	8f 93       	push	r24
    7638:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    763c:	81 34       	cpi	r24, 0x41	; 65
    763e:	91 05       	cpc	r25, r1
    7640:	10 f0       	brcs	.+4      	; 0x7646 <twi_start+0x928>
    7642:	80 e4       	ldi	r24, 0x40	; 64
    7644:	90 e0       	ldi	r25, 0x00	; 0
    7646:	40 e0       	ldi	r20, 0x00	; 0
    7648:	68 2f       	mov	r22, r24
    764a:	8f e3       	ldi	r24, 0x3F	; 63
    764c:	95 e2       	ldi	r25, 0x25	; 37
    764e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    7652:	ed b7       	in	r30, 0x3d	; 61
    7654:	fe b7       	in	r31, 0x3e	; 62
    7656:	38 96       	adiw	r30, 0x08	; 8
    7658:	ed bf       	out	0x3d, r30	; 61
    765a:	fe bf       	out	0x3e, r31	; 62
    765c:	1f 92       	push	r1
    765e:	86 e7       	ldi	r24, 0x76	; 118
    7660:	8f 93       	push	r24
    7662:	84 eb       	ldi	r24, 0xB4	; 180
    7664:	91 e3       	ldi	r25, 0x31	; 49
    7666:	9f 93       	push	r25
    7668:	8f 93       	push	r24
    766a:	1f 92       	push	r1
    766c:	80 e4       	ldi	r24, 0x40	; 64
    766e:	8f 93       	push	r24
    7670:	8f e3       	ldi	r24, 0x3F	; 63
    7672:	95 e2       	ldi	r25, 0x25	; 37
    7674:	9f 93       	push	r25
    7676:	8f 93       	push	r24
    7678:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    767c:	81 34       	cpi	r24, 0x41	; 65
    767e:	91 05       	cpc	r25, r1
    7680:	10 f0       	brcs	.+4      	; 0x7686 <twi_start+0x968>
    7682:	80 e4       	ldi	r24, 0x40	; 64
    7684:	90 e0       	ldi	r25, 0x00	; 0
    7686:	40 e0       	ldi	r20, 0x00	; 0
    7688:	68 2f       	mov	r22, r24
    768a:	8f e3       	ldi	r24, 0x3F	; 63
    768c:	95 e2       	ldi	r25, 0x25	; 37
    768e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    7692:	eb e2       	ldi	r30, 0x2B	; 43
    7694:	f0 e2       	ldi	r31, 0x20	; 32
    7696:	86 e7       	ldi	r24, 0x76	; 118
    7698:	80 83       	st	Z, r24
    769a:	8e e1       	ldi	r24, 0x1E	; 30
    769c:	81 83       	std	Z+1, r24	; 0x01
    769e:	81 e0       	ldi	r24, 0x01	; 1
    76a0:	90 e0       	ldi	r25, 0x00	; 0
    76a2:	84 83       	std	Z+4, r24	; 0x04
    76a4:	95 83       	std	Z+5, r25	; 0x05
    76a6:	10 86       	std	Z+8, r1	; 0x08
    76a8:	11 86       	std	Z+9, r1	; 0x09
    76aa:	40 e0       	ldi	r20, 0x00	; 0
    76ac:	bf 01       	movw	r22, r30
    76ae:	80 ea       	ldi	r24, 0xA0	; 160
    76b0:	94 e0       	ldi	r25, 0x04	; 4
    76b2:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    76b6:	c8 2f       	mov	r28, r24
    76b8:	8d b7       	in	r24, 0x3d	; 61
    76ba:	9e b7       	in	r25, 0x3e	; 62
    76bc:	08 96       	adiw	r24, 0x08	; 8
    76be:	8d bf       	out	0x3d, r24	; 61
    76c0:	9e bf       	out	0x3e, r25	; 62
    76c2:	c1 11       	cpse	r28, r1
    76c4:	04 c1       	rjmp	.+520    	; 0x78ce <twi_start+0xbb0>
    76c6:	68 e9       	ldi	r22, 0x98	; 152
    76c8:	7a e3       	ldi	r23, 0x3A	; 58
    76ca:	80 e0       	ldi	r24, 0x00	; 0
    76cc:	90 e0       	ldi	r25, 0x00	; 0
    76ce:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    76d2:	eb e2       	ldi	r30, 0x2B	; 43
    76d4:	f0 e2       	ldi	r31, 0x20	; 32
    76d6:	86 e7       	ldi	r24, 0x76	; 118
    76d8:	80 83       	st	Z, r24
    76da:	8e ea       	ldi	r24, 0xAE	; 174
    76dc:	81 83       	std	Z+1, r24	; 0x01
    76de:	81 e0       	ldi	r24, 0x01	; 1
    76e0:	90 e0       	ldi	r25, 0x00	; 0
    76e2:	84 83       	std	Z+4, r24	; 0x04
    76e4:	95 83       	std	Z+5, r25	; 0x05
    76e6:	82 e0       	ldi	r24, 0x02	; 2
    76e8:	90 e0       	ldi	r25, 0x00	; 0
    76ea:	80 87       	std	Z+8, r24	; 0x08
    76ec:	91 87       	std	Z+9, r25	; 0x09
    76ee:	41 e0       	ldi	r20, 0x01	; 1
    76f0:	bf 01       	movw	r22, r30
    76f2:	80 ea       	ldi	r24, 0xA0	; 160
    76f4:	94 e0       	ldi	r25, 0x04	; 4
    76f6:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    76fa:	c8 2f       	mov	r28, r24
    76fc:	88 23       	and	r24, r24
    76fe:	21 f1       	breq	.+72     	; 0x7748 <twi_start+0xa2a>
    7700:	8c 2f       	mov	r24, r28
    7702:	0c 2e       	mov	r0, r28
    7704:	00 0c       	add	r0, r0
    7706:	99 0b       	sbc	r25, r25
    7708:	9f 93       	push	r25
    770a:	cf 93       	push	r28
    770c:	8f e7       	ldi	r24, 0x7F	; 127
    770e:	91 e3       	ldi	r25, 0x31	; 49
    7710:	9f 93       	push	r25
    7712:	8f 93       	push	r24
    7714:	1f 92       	push	r1
    7716:	80 e4       	ldi	r24, 0x40	; 64
    7718:	8f 93       	push	r24
    771a:	8f e3       	ldi	r24, 0x3F	; 63
    771c:	95 e2       	ldi	r25, 0x25	; 37
    771e:	9f 93       	push	r25
    7720:	8f 93       	push	r24
    7722:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    7726:	81 34       	cpi	r24, 0x41	; 65
    7728:	91 05       	cpc	r25, r1
    772a:	10 f0       	brcs	.+4      	; 0x7730 <twi_start+0xa12>
    772c:	80 e4       	ldi	r24, 0x40	; 64
    772e:	90 e0       	ldi	r25, 0x00	; 0
    7730:	40 e0       	ldi	r20, 0x00	; 0
    7732:	68 2f       	mov	r22, r24
    7734:	8f e3       	ldi	r24, 0x3F	; 63
    7736:	95 e2       	ldi	r25, 0x25	; 37
    7738:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    773c:	ed b7       	in	r30, 0x3d	; 61
    773e:	fe b7       	in	r31, 0x3e	; 62
    7740:	38 96       	adiw	r30, 0x08	; 8
    7742:	ed bf       	out	0x3d, r30	; 61
    7744:	fe bf       	out	0x3e, r31	; 62
    7746:	c3 c0       	rjmp	.+390    	; 0x78ce <twi_start+0xbb0>
    7748:	e7 e3       	ldi	r30, 0x37	; 55
    774a:	f5 e2       	ldi	r31, 0x25	; 37
    774c:	80 81       	ld	r24, Z
    774e:	90 e0       	ldi	r25, 0x00	; 0
    7750:	98 2f       	mov	r25, r24
    7752:	88 27       	eor	r24, r24
    7754:	21 81       	ldd	r18, Z+1	; 0x01
    7756:	82 2b       	or	r24, r18
    7758:	92 95       	swap	r25
    775a:	82 95       	swap	r24
    775c:	8f 70       	andi	r24, 0x0F	; 15
    775e:	89 27       	eor	r24, r25
    7760:	9f 70       	andi	r25, 0x0F	; 15
    7762:	89 27       	eor	r24, r25
    7764:	80 93 26 27 	sts	0x2726, r24	; 0x802726 <g_twi1_baro_version>
    7768:	90 93 27 27 	sts	0x2727, r25	; 0x802727 <g_twi1_baro_version+0x1>
    776c:	9f 93       	push	r25
    776e:	8f 93       	push	r24
    7770:	89 e4       	ldi	r24, 0x49	; 73
    7772:	91 e3       	ldi	r25, 0x31	; 49
    7774:	9f 93       	push	r25
    7776:	8f 93       	push	r24
    7778:	1f 92       	push	r1
    777a:	80 e4       	ldi	r24, 0x40	; 64
    777c:	8f 93       	push	r24
    777e:	8f e3       	ldi	r24, 0x3F	; 63
    7780:	95 e2       	ldi	r25, 0x25	; 37
    7782:	9f 93       	push	r25
    7784:	8f 93       	push	r24
    7786:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    778a:	81 34       	cpi	r24, 0x41	; 65
    778c:	91 05       	cpc	r25, r1
    778e:	10 f0       	brcs	.+4      	; 0x7794 <twi_start+0xa76>
    7790:	80 e4       	ldi	r24, 0x40	; 64
    7792:	90 e0       	ldi	r25, 0x00	; 0
    7794:	40 e0       	ldi	r20, 0x00	; 0
    7796:	68 2f       	mov	r22, r24
    7798:	8f e3       	ldi	r24, 0x3F	; 63
    779a:	95 e2       	ldi	r25, 0x25	; 37
    779c:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    77a0:	0f 2e       	mov	r0, r31
    77a2:	f8 e1       	ldi	r31, 0x18	; 24
    77a4:	ef 2e       	mov	r14, r31
    77a6:	f7 e2       	ldi	r31, 0x27	; 39
    77a8:	ff 2e       	mov	r15, r31
    77aa:	f0 2d       	mov	r31, r0
    77ac:	8d b7       	in	r24, 0x3d	; 61
    77ae:	9e b7       	in	r25, 0x3e	; 62
    77b0:	08 96       	adiw	r24, 0x08	; 8
    77b2:	8d bf       	out	0x3d, r24	; 61
    77b4:	9e bf       	out	0x3e, r25	; 62
    77b6:	88 24       	eor	r8, r8
    77b8:	83 94       	inc	r8
    77ba:	91 2c       	mov	r9, r1
    77bc:	cb e2       	ldi	r28, 0x2B	; 43
    77be:	d0 e2       	ldi	r29, 0x20	; 32
    77c0:	0f 2e       	mov	r0, r31
    77c2:	f6 e7       	ldi	r31, 0x76	; 118
    77c4:	7f 2e       	mov	r7, r31
    77c6:	f0 2d       	mov	r31, r0
    77c8:	aa 24       	eor	r10, r10
    77ca:	a3 94       	inc	r10
    77cc:	b1 2c       	mov	r11, r1
    77ce:	68 94       	set
    77d0:	cc 24       	eor	r12, r12
    77d2:	c1 f8       	bld	r12, 1
    77d4:	d1 2c       	mov	r13, r1
    77d6:	07 e3       	ldi	r16, 0x37	; 55
    77d8:	15 e2       	ldi	r17, 0x25	; 37
    77da:	78 82       	st	Y, r7
    77dc:	c4 01       	movw	r24, r8
    77de:	88 0f       	add	r24, r24
    77e0:	99 1f       	adc	r25, r25
    77e2:	80 6a       	ori	r24, 0xA0	; 160
    77e4:	89 83       	std	Y+1, r24	; 0x01
    77e6:	ac 82       	std	Y+4, r10	; 0x04
    77e8:	bd 82       	std	Y+5, r11	; 0x05
    77ea:	c8 86       	std	Y+8, r12	; 0x08
    77ec:	d9 86       	std	Y+9, r13	; 0x09
    77ee:	41 e0       	ldi	r20, 0x01	; 1
    77f0:	be 01       	movw	r22, r28
    77f2:	80 ea       	ldi	r24, 0xA0	; 160
    77f4:	94 e0       	ldi	r25, 0x04	; 4
    77f6:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    77fa:	88 23       	and	r24, r24
    77fc:	31 f1       	breq	.+76     	; 0x784a <twi_start+0xb2c>
    77fe:	28 2f       	mov	r18, r24
    7800:	08 2e       	mov	r0, r24
    7802:	00 0c       	add	r0, r0
    7804:	33 0b       	sbc	r19, r19
    7806:	3f 93       	push	r19
    7808:	8f 93       	push	r24
    780a:	9f 92       	push	r9
    780c:	8f 92       	push	r8
    780e:	84 e1       	ldi	r24, 0x14	; 20
    7810:	91 e3       	ldi	r25, 0x31	; 49
    7812:	9f 93       	push	r25
    7814:	8f 93       	push	r24
    7816:	1f 92       	push	r1
    7818:	80 e4       	ldi	r24, 0x40	; 64
    781a:	8f 93       	push	r24
    781c:	8f e3       	ldi	r24, 0x3F	; 63
    781e:	95 e2       	ldi	r25, 0x25	; 37
    7820:	9f 93       	push	r25
    7822:	8f 93       	push	r24
    7824:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    7828:	81 34       	cpi	r24, 0x41	; 65
    782a:	91 05       	cpc	r25, r1
    782c:	10 f0       	brcs	.+4      	; 0x7832 <twi_start+0xb14>
    782e:	80 e4       	ldi	r24, 0x40	; 64
    7830:	90 e0       	ldi	r25, 0x00	; 0
    7832:	40 e0       	ldi	r20, 0x00	; 0
    7834:	68 2f       	mov	r22, r24
    7836:	8f e3       	ldi	r24, 0x3F	; 63
    7838:	95 e2       	ldi	r25, 0x25	; 37
    783a:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    783e:	ed b7       	in	r30, 0x3d	; 61
    7840:	fe b7       	in	r31, 0x3e	; 62
    7842:	3a 96       	adiw	r30, 0x0a	; 10
    7844:	ed bf       	out	0x3d, r30	; 61
    7846:	fe bf       	out	0x3e, r31	; 62
    7848:	13 c0       	rjmp	.+38     	; 0x7870 <twi_start+0xb52>
    784a:	f8 01       	movw	r30, r16
    784c:	80 81       	ld	r24, Z
    784e:	90 e0       	ldi	r25, 0x00	; 0
    7850:	98 2f       	mov	r25, r24
    7852:	88 27       	eor	r24, r24
    7854:	21 81       	ldd	r18, Z+1	; 0x01
    7856:	82 2b       	or	r24, r18
    7858:	f7 01       	movw	r30, r14
    785a:	81 93       	st	Z+, r24
    785c:	91 93       	st	Z+, r25
    785e:	7f 01       	movw	r14, r30
    7860:	ff ef       	ldi	r31, 0xFF	; 255
    7862:	8f 1a       	sub	r8, r31
    7864:	9f 0a       	sbc	r9, r31
    7866:	88 e0       	ldi	r24, 0x08	; 8
    7868:	88 16       	cp	r8, r24
    786a:	91 04       	cpc	r9, r1
    786c:	09 f0       	breq	.+2      	; 0x7870 <twi_start+0xb52>
    786e:	b5 cf       	rjmp	.-150    	; 0x77da <twi_start+0xabc>
    7870:	81 e0       	ldi	r24, 0x01	; 1
    7872:	80 93 28 27 	sts	0x2728, r24	; 0x802728 <g_twi1_baro_valid>
    7876:	81 eb       	ldi	r24, 0xB1	; 177
    7878:	90 e3       	ldi	r25, 0x30	; 48
    787a:	9f 93       	push	r25
    787c:	8f 93       	push	r24
    787e:	1f 92       	push	r1
    7880:	10 e4       	ldi	r17, 0x40	; 64
    7882:	1f 93       	push	r17
    7884:	cf e3       	ldi	r28, 0x3F	; 63
    7886:	d5 e2       	ldi	r29, 0x25	; 37
    7888:	df 93       	push	r29
    788a:	cf 93       	push	r28
    788c:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    7890:	ae 01       	movw	r20, r28
    7892:	62 e3       	ldi	r22, 0x32	; 50
    7894:	88 e0       	ldi	r24, 0x08	; 8
    7896:	35 d9       	rcall	.-3478   	; 0x6b02 <task_twi2_lcd_str>
    7898:	86 ef       	ldi	r24, 0xF6	; 246
    789a:	90 e3       	ldi	r25, 0x30	; 48
    789c:	9f 93       	push	r25
    789e:	8f 93       	push	r24
    78a0:	1f 92       	push	r1
    78a2:	1f 93       	push	r17
    78a4:	df 93       	push	r29
    78a6:	cf 93       	push	r28
    78a8:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    78ac:	81 34       	cpi	r24, 0x41	; 65
    78ae:	91 05       	cpc	r25, r1
    78b0:	10 f0       	brcs	.+4      	; 0x78b6 <twi_start+0xb98>
    78b2:	80 e4       	ldi	r24, 0x40	; 64
    78b4:	90 e0       	ldi	r25, 0x00	; 0
    78b6:	40 e0       	ldi	r20, 0x00	; 0
    78b8:	68 2f       	mov	r22, r24
    78ba:	8f e3       	ldi	r24, 0x3F	; 63
    78bc:	95 e2       	ldi	r25, 0x25	; 37
    78be:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    78c2:	ed b7       	in	r30, 0x3d	; 61
    78c4:	fe b7       	in	r31, 0x3e	; 62
    78c6:	3c 96       	adiw	r30, 0x0c	; 12
    78c8:	ed bf       	out	0x3d, r30	; 61
    78ca:	fe bf       	out	0x3e, r31	; 62
    78cc:	23 c0       	rjmp	.+70     	; 0x7914 <twi_start+0xbf6>
    78ce:	8c 2f       	mov	r24, r28
    78d0:	0c 2e       	mov	r0, r28
    78d2:	00 0c       	add	r0, r0
    78d4:	99 0b       	sbc	r25, r25
    78d6:	9f 93       	push	r25
    78d8:	cf 93       	push	r28
    78da:	85 ec       	ldi	r24, 0xC5	; 197
    78dc:	90 e3       	ldi	r25, 0x30	; 48
    78de:	9f 93       	push	r25
    78e0:	8f 93       	push	r24
    78e2:	1f 92       	push	r1
    78e4:	80 e4       	ldi	r24, 0x40	; 64
    78e6:	8f 93       	push	r24
    78e8:	8f e3       	ldi	r24, 0x3F	; 63
    78ea:	95 e2       	ldi	r25, 0x25	; 37
    78ec:	9f 93       	push	r25
    78ee:	8f 93       	push	r24
    78f0:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    78f4:	81 34       	cpi	r24, 0x41	; 65
    78f6:	91 05       	cpc	r25, r1
    78f8:	10 f0       	brcs	.+4      	; 0x78fe <twi_start+0xbe0>
    78fa:	80 e4       	ldi	r24, 0x40	; 64
    78fc:	90 e0       	ldi	r25, 0x00	; 0
    78fe:	40 e0       	ldi	r20, 0x00	; 0
    7900:	68 2f       	mov	r22, r24
    7902:	8f e3       	ldi	r24, 0x3F	; 63
    7904:	95 e2       	ldi	r25, 0x25	; 37
    7906:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    790a:	8d b7       	in	r24, 0x3d	; 61
    790c:	9e b7       	in	r25, 0x3e	; 62
    790e:	08 96       	adiw	r24, 0x08	; 8
    7910:	8d bf       	out	0x3d, r24	; 61
    7912:	9e bf       	out	0x3e, r25	; 62
    7914:	81 ea       	ldi	r24, 0xA1	; 161
    7916:	90 e3       	ldi	r25, 0x30	; 48
    7918:	9f 93       	push	r25
    791a:	8f 93       	push	r24
    791c:	1f 92       	push	r1
    791e:	80 e4       	ldi	r24, 0x40	; 64
    7920:	8f 93       	push	r24
    7922:	8f e3       	ldi	r24, 0x3F	; 63
    7924:	95 e2       	ldi	r25, 0x25	; 37
    7926:	9f 93       	push	r25
    7928:	8f 93       	push	r24
    792a:	0e 94 8d 80 	call	0x1011a	; 0x1011a <snprintf_P>
    792e:	81 34       	cpi	r24, 0x41	; 65
    7930:	91 05       	cpc	r25, r1
    7932:	10 f0       	brcs	.+4      	; 0x7938 <twi_start+0xc1a>
    7934:	80 e4       	ldi	r24, 0x40	; 64
    7936:	90 e0       	ldi	r25, 0x00	; 0
    7938:	40 e0       	ldi	r20, 0x00	; 0
    793a:	68 2f       	mov	r22, r24
    793c:	8f e3       	ldi	r24, 0x3F	; 63
    793e:	95 e2       	ldi	r25, 0x25	; 37
    7940:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udi_write_tx_buf>
    7944:	0f 90       	pop	r0
    7946:	0f 90       	pop	r0
    7948:	0f 90       	pop	r0
    794a:	0f 90       	pop	r0
    794c:	0f 90       	pop	r0
    794e:	0f 90       	pop	r0
    7950:	df 91       	pop	r29
    7952:	cf 91       	pop	r28
    7954:	1f 91       	pop	r17
    7956:	0f 91       	pop	r16
    7958:	ff 90       	pop	r15
    795a:	ef 90       	pop	r14
    795c:	df 90       	pop	r13
    795e:	cf 90       	pop	r12
    7960:	bf 90       	pop	r11
    7962:	af 90       	pop	r10
    7964:	9f 90       	pop	r9
    7966:	8f 90       	pop	r8
    7968:	7f 90       	pop	r7
    796a:	08 95       	ret

0000796c <task_twi2_lcd__cpu1>:
PROGMEM_DECLARE(const char, PM_FORMAT_4F1[]);
PROGMEM_DECLARE(const char, PM_FORMAT_5F3[]);

/* TWI2 - LCD Port */
void task_twi2_lcd__cpu1(uint8_t col_left)
{
    796c:	df 92       	push	r13
    796e:	ef 92       	push	r14
    7970:	ff 92       	push	r15
    7972:	0f 93       	push	r16
    7974:	1f 93       	push	r17
    7976:	cf 93       	push	r28
    7978:	df 93       	push	r29
    797a:	1f 92       	push	r1
    797c:	cd b7       	in	r28, 0x3d	; 61
    797e:	de b7       	in	r29, 0x3e	; 62
    7980:	d8 2e       	mov	r13, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7982:	8f b7       	in	r24, 0x3f	; 63
    7984:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    7986:	f8 94       	cli
	return flags;
    7988:	89 81       	ldd	r24, Y+1	; 0x01
	int16_t l_adc_5v0_volt_1000;

	/* Get up-to-date global data */
	{
		irqflags_t flags			= cpu_irq_save();
		l_adc_temp_deg_100			= g_adc_temp_deg_100;
    798a:	60 91 84 26 	lds	r22, 0x2684	; 0x802684 <g_adc_temp_deg_100>
    798e:	70 91 85 26 	lds	r23, 0x2685	; 0x802685 <g_adc_temp_deg_100+0x1>
		l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    7992:	e0 90 8e 26 	lds	r14, 0x268E	; 0x80268e <g_adc_5v0_volt_1000>
    7996:	f0 90 8f 26 	lds	r15, 0x268F	; 0x80268f <g_adc_5v0_volt_1000+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    799a:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
	}

	if (s_adc_temp_deg_100 != l_adc_temp_deg_100) {
    799c:	80 91 27 23 	lds	r24, 0x2327	; 0x802327 <s_adc_temp_deg_100.8122>
    79a0:	90 91 28 23 	lds	r25, 0x2328	; 0x802328 <s_adc_temp_deg_100.8122+0x1>
    79a4:	68 17       	cp	r22, r24
    79a6:	79 07       	cpc	r23, r25
    79a8:	b9 f0       	breq	.+46     	; 0x79d8 <task_twi2_lcd__cpu1+0x6c>
		s_adc_temp_deg_100 = l_adc_temp_deg_100;
    79aa:	60 93 27 23 	sts	0x2327, r22	; 0x802327 <s_adc_temp_deg_100.8122>
    79ae:	70 93 28 23 	sts	0x2328, r23	; 0x802328 <s_adc_temp_deg_100.8122+0x1>

		/* ADC_TEMP */
		task_twi2_lcd_print_format_float_P(col_left,  2 * 10, l_adc_temp_deg_100 / 100.f, PM_FORMAT_4F1);
    79b2:	07 2e       	mov	r0, r23
    79b4:	00 0c       	add	r0, r0
    79b6:	88 0b       	sbc	r24, r24
    79b8:	99 0b       	sbc	r25, r25
    79ba:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    79be:	20 e0       	ldi	r18, 0x00	; 0
    79c0:	30 e0       	ldi	r19, 0x00	; 0
    79c2:	48 ec       	ldi	r20, 0xC8	; 200
    79c4:	52 e4       	ldi	r21, 0x42	; 66
    79c6:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    79ca:	9b 01       	movw	r18, r22
    79cc:	ac 01       	movw	r20, r24
    79ce:	0d e8       	ldi	r16, 0x8D	; 141
    79d0:	10 e3       	ldi	r17, 0x30	; 48
    79d2:	64 e1       	ldi	r22, 0x14	; 20
    79d4:	8d 2d       	mov	r24, r13
    79d6:	57 d8       	rcall	.-3922   	; 0x6a86 <task_twi2_lcd_print_format_float_P>
	}

	if (s_adc_5v0_volt_1000 != l_adc_5v0_volt_1000) {
    79d8:	80 91 25 23 	lds	r24, 0x2325	; 0x802325 <s_adc_5v0_volt_1000.8123>
    79dc:	90 91 26 23 	lds	r25, 0x2326	; 0x802326 <s_adc_5v0_volt_1000.8123+0x1>
    79e0:	e8 16       	cp	r14, r24
    79e2:	f9 06       	cpc	r15, r25
    79e4:	b9 f0       	breq	.+46     	; 0x7a14 <task_twi2_lcd__cpu1+0xa8>
		s_adc_5v0_volt_1000 = l_adc_5v0_volt_1000;
    79e6:	e0 92 25 23 	sts	0x2325, r14	; 0x802325 <s_adc_5v0_volt_1000.8123>
    79ea:	f0 92 26 23 	sts	0x2326, r15	; 0x802326 <s_adc_5v0_volt_1000.8123+0x1>

		/* ADC_5V0 */
		task_twi2_lcd_print_format_float_P(col_left,  3 * 10, l_adc_5v0_volt_1000 / 1000.f, PM_FORMAT_5F3);
    79ee:	b7 01       	movw	r22, r14
    79f0:	ff 0c       	add	r15, r15
    79f2:	88 0b       	sbc	r24, r24
    79f4:	99 0b       	sbc	r25, r25
    79f6:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    79fa:	20 e0       	ldi	r18, 0x00	; 0
    79fc:	30 e0       	ldi	r19, 0x00	; 0
    79fe:	4a e7       	ldi	r20, 0x7A	; 122
    7a00:	54 e4       	ldi	r21, 0x44	; 68
    7a02:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    7a06:	9b 01       	movw	r18, r22
    7a08:	ac 01       	movw	r20, r24
    7a0a:	07 e8       	ldi	r16, 0x87	; 135
    7a0c:	10 e3       	ldi	r17, 0x30	; 48
    7a0e:	6e e1       	ldi	r22, 0x1E	; 30
    7a10:	8d 2d       	mov	r24, r13
    7a12:	39 d8       	rcall	.-3982   	; 0x6a86 <task_twi2_lcd_print_format_float_P>
	}
}
    7a14:	0f 90       	pop	r0
    7a16:	df 91       	pop	r29
    7a18:	cf 91       	pop	r28
    7a1a:	1f 91       	pop	r17
    7a1c:	0f 91       	pop	r16
    7a1e:	ff 90       	pop	r15
    7a20:	ef 90       	pop	r14
    7a22:	df 90       	pop	r13
    7a24:	08 95       	ret

00007a26 <task_twi2_lcd__cpu2>:
	delay_ms(50);
}
#endif

void task_twi2_lcd_cls(void)
{
    7a26:	df 92       	push	r13
    7a28:	ef 92       	push	r14
    7a2a:	ff 92       	push	r15
    7a2c:	0f 93       	push	r16
    7a2e:	1f 93       	push	r17
    7a30:	cf 93       	push	r28
    7a32:	df 93       	push	r29
    7a34:	1f 92       	push	r1
    7a36:	cd b7       	in	r28, 0x3d	; 61
    7a38:	de b7       	in	r29, 0x3e	; 62
    7a3a:	d8 2e       	mov	r13, r24
    7a3c:	8f b7       	in	r24, 0x3f	; 63
    7a3e:	89 83       	std	Y+1, r24	; 0x01
    7a40:	f8 94       	cli
    7a42:	89 81       	ldd	r24, Y+1	; 0x01
    7a44:	60 91 8c 26 	lds	r22, 0x268C	; 0x80268c <g_adc_vbat_volt_1000>
    7a48:	70 91 8d 26 	lds	r23, 0x268D	; 0x80268d <g_adc_vbat_volt_1000+0x1>
    7a4c:	e0 90 90 26 	lds	r14, 0x2690	; 0x802690 <g_adc_vctcxo_volt_1000>
    7a50:	f0 90 91 26 	lds	r15, 0x2691	; 0x802691 <g_adc_vctcxo_volt_1000+0x1>
    7a54:	8f bf       	out	0x3f, r24	; 63
    7a56:	80 91 23 23 	lds	r24, 0x2323	; 0x802323 <s_adc_vbat_volt_1000.8130>
    7a5a:	90 91 24 23 	lds	r25, 0x2324	; 0x802324 <s_adc_vbat_volt_1000.8130+0x1>
    7a5e:	68 17       	cp	r22, r24
    7a60:	79 07       	cpc	r23, r25
    7a62:	c1 f0       	breq	.+48     	; 0x7a94 <task_twi2_lcd__cpu2+0x6e>
    7a64:	60 93 23 23 	sts	0x2323, r22	; 0x802323 <s_adc_vbat_volt_1000.8130>
    7a68:	70 93 24 23 	sts	0x2324, r23	; 0x802324 <s_adc_vbat_volt_1000.8130+0x1>
    7a6c:	07 2e       	mov	r0, r23
    7a6e:	00 0c       	add	r0, r0
    7a70:	88 0b       	sbc	r24, r24
    7a72:	99 0b       	sbc	r25, r25
    7a74:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    7a78:	20 e0       	ldi	r18, 0x00	; 0
    7a7a:	30 e0       	ldi	r19, 0x00	; 0
    7a7c:	4a e7       	ldi	r20, 0x7A	; 122
    7a7e:	54 e4       	ldi	r21, 0x44	; 68
    7a80:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    7a84:	9b 01       	movw	r18, r22
    7a86:	ac 01       	movw	r20, r24
    7a88:	07 e8       	ldi	r16, 0x87	; 135
    7a8a:	10 e3       	ldi	r17, 0x30	; 48
    7a8c:	68 e2       	ldi	r22, 0x28	; 40
    7a8e:	8d 2d       	mov	r24, r13
    7a90:	0e 94 43 35 	call	0x6a86	; 0x6a86 <task_twi2_lcd_print_format_float_P>
    7a94:	80 91 21 23 	lds	r24, 0x2321	; 0x802321 <s_adc_vctcxo_volt_1000.8131>
    7a98:	90 91 22 23 	lds	r25, 0x2322	; 0x802322 <s_adc_vctcxo_volt_1000.8131+0x1>
    7a9c:	e8 16       	cp	r14, r24
    7a9e:	f9 06       	cpc	r15, r25
    7aa0:	c1 f0       	breq	.+48     	; 0x7ad2 <task_twi2_lcd__cpu2+0xac>
    7aa2:	e0 92 21 23 	sts	0x2321, r14	; 0x802321 <s_adc_vctcxo_volt_1000.8131>
    7aa6:	f0 92 22 23 	sts	0x2322, r15	; 0x802322 <s_adc_vctcxo_volt_1000.8131+0x1>
    7aaa:	b7 01       	movw	r22, r14
    7aac:	ff 0c       	add	r15, r15
    7aae:	88 0b       	sbc	r24, r24
    7ab0:	99 0b       	sbc	r25, r25
    7ab2:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    7ab6:	20 e0       	ldi	r18, 0x00	; 0
    7ab8:	30 e0       	ldi	r19, 0x00	; 0
    7aba:	4a e7       	ldi	r20, 0x7A	; 122
    7abc:	54 e4       	ldi	r21, 0x44	; 68
    7abe:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    7ac2:	9b 01       	movw	r18, r22
    7ac4:	ac 01       	movw	r20, r24
    7ac6:	07 e8       	ldi	r16, 0x87	; 135
    7ac8:	10 e3       	ldi	r17, 0x30	; 48
    7aca:	62 e3       	ldi	r22, 0x32	; 50
    7acc:	8d 2d       	mov	r24, r13
    7ace:	0e 94 43 35 	call	0x6a86	; 0x6a86 <task_twi2_lcd_print_format_float_P>
    7ad2:	0f 90       	pop	r0
    7ad4:	df 91       	pop	r29
    7ad6:	cf 91       	pop	r28
    7ad8:	1f 91       	pop	r17
    7ada:	0f 91       	pop	r16
    7adc:	ff 90       	pop	r15
    7ade:	ef 90       	pop	r14
    7ae0:	df 90       	pop	r13
    7ae2:	08 95       	ret

00007ae4 <task_twi2_lcd__cpu3>:
    7ae4:	df 92       	push	r13
    7ae6:	ef 92       	push	r14
    7ae8:	ff 92       	push	r15
    7aea:	0f 93       	push	r16
    7aec:	1f 93       	push	r17
    7aee:	cf 93       	push	r28
    7af0:	df 93       	push	r29
    7af2:	1f 92       	push	r1
    7af4:	cd b7       	in	r28, 0x3d	; 61
    7af6:	de b7       	in	r29, 0x3e	; 62
    7af8:	d8 2e       	mov	r13, r24
    7afa:	8f b7       	in	r24, 0x3f	; 63
    7afc:	89 83       	std	Y+1, r24	; 0x01
    7afe:	f8 94       	cli
    7b00:	89 81       	ldd	r24, Y+1	; 0x01
    7b02:	60 91 8a 26 	lds	r22, 0x268A	; 0x80268a <g_adc_io_adc4_volt_1000>
    7b06:	70 91 8b 26 	lds	r23, 0x268B	; 0x80268b <g_adc_io_adc4_volt_1000+0x1>
    7b0a:	e0 90 88 26 	lds	r14, 0x2688	; 0x802688 <g_adc_io_adc5_volt_1000>
    7b0e:	f0 90 89 26 	lds	r15, 0x2689	; 0x802689 <g_adc_io_adc5_volt_1000+0x1>
    7b12:	8f bf       	out	0x3f, r24	; 63
    7b14:	80 91 1f 23 	lds	r24, 0x231F	; 0x80231f <s_adc_io_adc4_volt_1000.8138>
    7b18:	90 91 20 23 	lds	r25, 0x2320	; 0x802320 <s_adc_io_adc4_volt_1000.8138+0x1>
    7b1c:	68 17       	cp	r22, r24
    7b1e:	79 07       	cpc	r23, r25
    7b20:	c1 f0       	breq	.+48     	; 0x7b52 <task_twi2_lcd__cpu3+0x6e>
    7b22:	60 93 1f 23 	sts	0x231F, r22	; 0x80231f <s_adc_io_adc4_volt_1000.8138>
    7b26:	70 93 20 23 	sts	0x2320, r23	; 0x802320 <s_adc_io_adc4_volt_1000.8138+0x1>
    7b2a:	07 2e       	mov	r0, r23
    7b2c:	00 0c       	add	r0, r0
    7b2e:	88 0b       	sbc	r24, r24
    7b30:	99 0b       	sbc	r25, r25
    7b32:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    7b36:	20 e0       	ldi	r18, 0x00	; 0
    7b38:	30 e0       	ldi	r19, 0x00	; 0
    7b3a:	4a e7       	ldi	r20, 0x7A	; 122
    7b3c:	54 e4       	ldi	r21, 0x44	; 68
    7b3e:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    7b42:	9b 01       	movw	r18, r22
    7b44:	ac 01       	movw	r20, r24
    7b46:	07 e8       	ldi	r16, 0x87	; 135
    7b48:	10 e3       	ldi	r17, 0x30	; 48
    7b4a:	6c e3       	ldi	r22, 0x3C	; 60
    7b4c:	8d 2d       	mov	r24, r13
    7b4e:	0e 94 43 35 	call	0x6a86	; 0x6a86 <task_twi2_lcd_print_format_float_P>
    7b52:	80 91 1d 23 	lds	r24, 0x231D	; 0x80231d <s_adc_io_adc5_volt_1000.8139>
    7b56:	90 91 1e 23 	lds	r25, 0x231E	; 0x80231e <s_adc_io_adc5_volt_1000.8139+0x1>
    7b5a:	e8 16       	cp	r14, r24
    7b5c:	f9 06       	cpc	r15, r25
    7b5e:	c1 f0       	breq	.+48     	; 0x7b90 <task_twi2_lcd__cpu3+0xac>
    7b60:	e0 92 1d 23 	sts	0x231D, r14	; 0x80231d <s_adc_io_adc5_volt_1000.8139>
    7b64:	f0 92 1e 23 	sts	0x231E, r15	; 0x80231e <s_adc_io_adc5_volt_1000.8139+0x1>
    7b68:	b7 01       	movw	r22, r14
    7b6a:	ff 0c       	add	r15, r15
    7b6c:	88 0b       	sbc	r24, r24
    7b6e:	99 0b       	sbc	r25, r25
    7b70:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    7b74:	20 e0       	ldi	r18, 0x00	; 0
    7b76:	30 e0       	ldi	r19, 0x00	; 0
    7b78:	4a e7       	ldi	r20, 0x7A	; 122
    7b7a:	54 e4       	ldi	r21, 0x44	; 68
    7b7c:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    7b80:	9b 01       	movw	r18, r22
    7b82:	ac 01       	movw	r20, r24
    7b84:	07 e8       	ldi	r16, 0x87	; 135
    7b86:	10 e3       	ldi	r17, 0x30	; 48
    7b88:	66 e4       	ldi	r22, 0x46	; 70
    7b8a:	8d 2d       	mov	r24, r13
    7b8c:	0e 94 43 35 	call	0x6a86	; 0x6a86 <task_twi2_lcd_print_format_float_P>
    7b90:	0f 90       	pop	r0
    7b92:	df 91       	pop	r29
    7b94:	cf 91       	pop	r28
    7b96:	1f 91       	pop	r17
    7b98:	0f 91       	pop	r16
    7b9a:	ff 90       	pop	r15
    7b9c:	ef 90       	pop	r14
    7b9e:	df 90       	pop	r13
    7ba0:	08 95       	ret

00007ba2 <task_twi2_lcd__hygro>:
    7ba2:	df 92       	push	r13
    7ba4:	ef 92       	push	r14
    7ba6:	ff 92       	push	r15
    7ba8:	0f 93       	push	r16
    7baa:	1f 93       	push	r17
    7bac:	cf 93       	push	r28
    7bae:	df 93       	push	r29
    7bb0:	1f 92       	push	r1
    7bb2:	cd b7       	in	r28, 0x3d	; 61
    7bb4:	de b7       	in	r29, 0x3e	; 62
    7bb6:	d8 2e       	mov	r13, r24
    7bb8:	8f b7       	in	r24, 0x3f	; 63
    7bba:	89 83       	std	Y+1, r24	; 0x01
    7bbc:	f8 94       	cli
    7bbe:	89 81       	ldd	r24, Y+1	; 0x01
    7bc0:	60 91 fe 26 	lds	r22, 0x26FE	; 0x8026fe <g_twi1_hygro_T_100>
    7bc4:	70 91 ff 26 	lds	r23, 0x26FF	; 0x8026ff <g_twi1_hygro_T_100+0x1>
    7bc8:	e0 90 fc 26 	lds	r14, 0x26FC	; 0x8026fc <g_twi1_hygro_RH_100>
    7bcc:	f0 90 fd 26 	lds	r15, 0x26FD	; 0x8026fd <g_twi1_hygro_RH_100+0x1>
    7bd0:	8f bf       	out	0x3f, r24	; 63
    7bd2:	80 91 1b 23 	lds	r24, 0x231B	; 0x80231b <s_twi1_hygro_T_100.8146>
    7bd6:	90 91 1c 23 	lds	r25, 0x231C	; 0x80231c <s_twi1_hygro_T_100.8146+0x1>
    7bda:	68 17       	cp	r22, r24
    7bdc:	79 07       	cpc	r23, r25
    7bde:	c1 f0       	breq	.+48     	; 0x7c10 <task_twi2_lcd__hygro+0x6e>
    7be0:	60 93 1b 23 	sts	0x231B, r22	; 0x80231b <s_twi1_hygro_T_100.8146>
    7be4:	70 93 1c 23 	sts	0x231C, r23	; 0x80231c <s_twi1_hygro_T_100.8146+0x1>
    7be8:	07 2e       	mov	r0, r23
    7bea:	00 0c       	add	r0, r0
    7bec:	88 0b       	sbc	r24, r24
    7bee:	99 0b       	sbc	r25, r25
    7bf0:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    7bf4:	20 e0       	ldi	r18, 0x00	; 0
    7bf6:	30 e0       	ldi	r19, 0x00	; 0
    7bf8:	48 ec       	ldi	r20, 0xC8	; 200
    7bfa:	52 e4       	ldi	r21, 0x42	; 66
    7bfc:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    7c00:	9b 01       	movw	r18, r22
    7c02:	ac 01       	movw	r20, r24
    7c04:	0a e9       	ldi	r16, 0x9A	; 154
    7c06:	10 e3       	ldi	r17, 0x30	; 48
    7c08:	6e e6       	ldi	r22, 0x6E	; 110
    7c0a:	8d 2d       	mov	r24, r13
    7c0c:	0e 94 43 35 	call	0x6a86	; 0x6a86 <task_twi2_lcd_print_format_float_P>
    7c10:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <s_twi1_hygro_RH_100.8147>
    7c14:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <s_twi1_hygro_RH_100.8147+0x1>
    7c18:	e8 16       	cp	r14, r24
    7c1a:	f9 06       	cpc	r15, r25
    7c1c:	c1 f0       	breq	.+48     	; 0x7c4e <task_twi2_lcd__hygro+0xac>
    7c1e:	e0 92 19 23 	sts	0x2319, r14	; 0x802319 <s_twi1_hygro_RH_100.8147>
    7c22:	f0 92 1a 23 	sts	0x231A, r15	; 0x80231a <s_twi1_hygro_RH_100.8147+0x1>
    7c26:	b7 01       	movw	r22, r14
    7c28:	ff 0c       	add	r15, r15
    7c2a:	88 0b       	sbc	r24, r24
    7c2c:	99 0b       	sbc	r25, r25
    7c2e:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    7c32:	20 e0       	ldi	r18, 0x00	; 0
    7c34:	30 e0       	ldi	r19, 0x00	; 0
    7c36:	48 ec       	ldi	r20, 0xC8	; 200
    7c38:	52 e4       	ldi	r21, 0x42	; 66
    7c3a:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    7c3e:	9b 01       	movw	r18, r22
    7c40:	ac 01       	movw	r20, r24
    7c42:	0a e9       	ldi	r16, 0x9A	; 154
    7c44:	10 e3       	ldi	r17, 0x30	; 48
    7c46:	68 e7       	ldi	r22, 0x78	; 120
    7c48:	8d 2d       	mov	r24, r13
    7c4a:	0e 94 43 35 	call	0x6a86	; 0x6a86 <task_twi2_lcd_print_format_float_P>
    7c4e:	0f 90       	pop	r0
    7c50:	df 91       	pop	r29
    7c52:	cf 91       	pop	r28
    7c54:	1f 91       	pop	r17
    7c56:	0f 91       	pop	r16
    7c58:	ff 90       	pop	r15
    7c5a:	ef 90       	pop	r14
    7c5c:	df 90       	pop	r13
    7c5e:	08 95       	ret

00007c60 <task_twi2_lcd__gyro_gfxmag>:
    7c60:	2f 92       	push	r2
    7c62:	3f 92       	push	r3
    7c64:	4f 92       	push	r4
    7c66:	5f 92       	push	r5
    7c68:	6f 92       	push	r6
    7c6a:	7f 92       	push	r7
    7c6c:	8f 92       	push	r8
    7c6e:	9f 92       	push	r9
    7c70:	af 92       	push	r10
    7c72:	bf 92       	push	r11
    7c74:	cf 92       	push	r12
    7c76:	df 92       	push	r13
    7c78:	ef 92       	push	r14
    7c7a:	ff 92       	push	r15
    7c7c:	0f 93       	push	r16
    7c7e:	1f 93       	push	r17
    7c80:	cf 93       	push	r28
    7c82:	df 93       	push	r29
    7c84:	cd b7       	in	r28, 0x3d	; 61
    7c86:	de b7       	in	r29, 0x3e	; 62
    7c88:	2d 97       	sbiw	r28, 0x0d	; 13
    7c8a:	cd bf       	out	0x3d, r28	; 61
    7c8c:	de bf       	out	0x3e, r29	; 62
    7c8e:	8f b7       	in	r24, 0x3f	; 63
    7c90:	89 83       	std	Y+1, r24	; 0x01
    7c92:	f8 94       	cli
    7c94:	89 81       	ldd	r24, Y+1	; 0x01
    7c96:	80 90 31 27 	lds	r8, 0x2731	; 0x802731 <g_twi1_gyro_2_mag_x_nT>
    7c9a:	90 90 32 27 	lds	r9, 0x2732	; 0x802732 <g_twi1_gyro_2_mag_x_nT+0x1>
    7c9e:	a0 90 33 27 	lds	r10, 0x2733	; 0x802733 <g_twi1_gyro_2_mag_x_nT+0x2>
    7ca2:	b0 90 34 27 	lds	r11, 0x2734	; 0x802734 <g_twi1_gyro_2_mag_x_nT+0x3>
    7ca6:	40 90 2d 27 	lds	r4, 0x272D	; 0x80272d <g_twi1_gyro_2_mag_y_nT>
    7caa:	50 90 2e 27 	lds	r5, 0x272E	; 0x80272e <g_twi1_gyro_2_mag_y_nT+0x1>
    7cae:	60 90 2f 27 	lds	r6, 0x272F	; 0x80272f <g_twi1_gyro_2_mag_y_nT+0x2>
    7cb2:	70 90 30 27 	lds	r7, 0x2730	; 0x802730 <g_twi1_gyro_2_mag_y_nT+0x3>
    7cb6:	20 91 29 27 	lds	r18, 0x2729	; 0x802729 <g_twi1_gyro_2_mag_z_nT>
    7cba:	30 91 2a 27 	lds	r19, 0x272A	; 0x80272a <g_twi1_gyro_2_mag_z_nT+0x1>
    7cbe:	40 91 2b 27 	lds	r20, 0x272B	; 0x80272b <g_twi1_gyro_2_mag_z_nT+0x2>
    7cc2:	50 91 2c 27 	lds	r21, 0x272C	; 0x80272c <g_twi1_gyro_2_mag_z_nT+0x3>
    7cc6:	2a 87       	std	Y+10, r18	; 0x0a
    7cc8:	3b 87       	std	Y+11, r19	; 0x0b
    7cca:	4c 87       	std	Y+12, r20	; 0x0c
    7ccc:	5d 87       	std	Y+13, r21	; 0x0d
    7cce:	8f bf       	out	0x3f, r24	; 63
    7cd0:	80 91 15 23 	lds	r24, 0x2315	; 0x802315 <s_twi1_gyro_2_mag_x_nT.8158>
    7cd4:	90 91 16 23 	lds	r25, 0x2316	; 0x802316 <s_twi1_gyro_2_mag_x_nT.8158+0x1>
    7cd8:	a0 91 17 23 	lds	r26, 0x2317	; 0x802317 <s_twi1_gyro_2_mag_x_nT.8158+0x2>
    7cdc:	b0 91 18 23 	lds	r27, 0x2318	; 0x802318 <s_twi1_gyro_2_mag_x_nT.8158+0x3>
    7ce0:	88 16       	cp	r8, r24
    7ce2:	99 06       	cpc	r9, r25
    7ce4:	aa 06       	cpc	r10, r26
    7ce6:	bb 06       	cpc	r11, r27
    7ce8:	d9 f4       	brne	.+54     	; 0x7d20 <task_twi2_lcd__gyro_gfxmag+0xc0>
    7cea:	80 91 11 23 	lds	r24, 0x2311	; 0x802311 <s_twi1_gyro_2_mag_y_nT.8159>
    7cee:	90 91 12 23 	lds	r25, 0x2312	; 0x802312 <s_twi1_gyro_2_mag_y_nT.8159+0x1>
    7cf2:	a0 91 13 23 	lds	r26, 0x2313	; 0x802313 <s_twi1_gyro_2_mag_y_nT.8159+0x2>
    7cf6:	b0 91 14 23 	lds	r27, 0x2314	; 0x802314 <s_twi1_gyro_2_mag_y_nT.8159+0x3>
    7cfa:	48 16       	cp	r4, r24
    7cfc:	59 06       	cpc	r5, r25
    7cfe:	6a 06       	cpc	r6, r26
    7d00:	7b 06       	cpc	r7, r27
    7d02:	71 f4       	brne	.+28     	; 0x7d20 <task_twi2_lcd__gyro_gfxmag+0xc0>
    7d04:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <s_twi1_gyro_2_mag_z_nT.8160>
    7d08:	90 91 0e 23 	lds	r25, 0x230E	; 0x80230e <s_twi1_gyro_2_mag_z_nT.8160+0x1>
    7d0c:	a0 91 0f 23 	lds	r26, 0x230F	; 0x80230f <s_twi1_gyro_2_mag_z_nT.8160+0x2>
    7d10:	b0 91 10 23 	lds	r27, 0x2310	; 0x802310 <s_twi1_gyro_2_mag_z_nT.8160+0x3>
    7d14:	28 17       	cp	r18, r24
    7d16:	39 07       	cpc	r19, r25
    7d18:	4a 07       	cpc	r20, r26
    7d1a:	5b 07       	cpc	r21, r27
    7d1c:	09 f4       	brne	.+2      	; 0x7d20 <task_twi2_lcd__gyro_gfxmag+0xc0>
    7d1e:	9b c1       	rjmp	.+822    	; 0x8056 <task_twi2_lcd__gyro_gfxmag+0x3f6>
    7d20:	80 92 15 23 	sts	0x2315, r8	; 0x802315 <s_twi1_gyro_2_mag_x_nT.8158>
    7d24:	90 92 16 23 	sts	0x2316, r9	; 0x802316 <s_twi1_gyro_2_mag_x_nT.8158+0x1>
    7d28:	a0 92 17 23 	sts	0x2317, r10	; 0x802317 <s_twi1_gyro_2_mag_x_nT.8158+0x2>
    7d2c:	b0 92 18 23 	sts	0x2318, r11	; 0x802318 <s_twi1_gyro_2_mag_x_nT.8158+0x3>
    7d30:	40 92 11 23 	sts	0x2311, r4	; 0x802311 <s_twi1_gyro_2_mag_y_nT.8159>
    7d34:	50 92 12 23 	sts	0x2312, r5	; 0x802312 <s_twi1_gyro_2_mag_y_nT.8159+0x1>
    7d38:	60 92 13 23 	sts	0x2313, r6	; 0x802313 <s_twi1_gyro_2_mag_y_nT.8159+0x2>
    7d3c:	70 92 14 23 	sts	0x2314, r7	; 0x802314 <s_twi1_gyro_2_mag_y_nT.8159+0x3>
    7d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    7d44:	ac 85       	ldd	r26, Y+12	; 0x0c
    7d46:	bd 85       	ldd	r27, Y+13	; 0x0d
    7d48:	80 93 0d 23 	sts	0x230D, r24	; 0x80230d <s_twi1_gyro_2_mag_z_nT.8160>
    7d4c:	90 93 0e 23 	sts	0x230E, r25	; 0x80230e <s_twi1_gyro_2_mag_z_nT.8160+0x1>
    7d50:	a0 93 0f 23 	sts	0x230F, r26	; 0x80230f <s_twi1_gyro_2_mag_z_nT.8160+0x2>
    7d54:	b0 93 10 23 	sts	0x2310, r27	; 0x802310 <s_twi1_gyro_2_mag_z_nT.8160+0x3>
    7d58:	20 e0       	ldi	r18, 0x00	; 0
    7d5a:	30 e8       	ldi	r19, 0x80	; 128
    7d5c:	4b e3       	ldi	r20, 0x3B	; 59
    7d5e:	55 e4       	ldi	r21, 0x45	; 69
    7d60:	60 91 09 23 	lds	r22, 0x2309	; 0x802309 <s_length.8161>
    7d64:	70 91 0a 23 	lds	r23, 0x230A	; 0x80230a <s_length.8161+0x1>
    7d68:	80 91 0b 23 	lds	r24, 0x230B	; 0x80230b <s_length.8161+0x2>
    7d6c:	90 91 0c 23 	lds	r25, 0x230C	; 0x80230c <s_length.8161+0x3>
    7d70:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    7d74:	6b 01       	movw	r12, r22
    7d76:	7c 01       	movw	r14, r24
    7d78:	0e 94 4a 79 	call	0xf294	; 0xf294 <__fixunssfsi>
    7d7c:	16 2f       	mov	r17, r22
    7d7e:	a7 01       	movw	r20, r14
    7d80:	96 01       	movw	r18, r12
    7d82:	60 e0       	ldi	r22, 0x00	; 0
    7d84:	70 e0       	ldi	r23, 0x00	; 0
    7d86:	80 e8       	ldi	r24, 0x80	; 128
    7d88:	92 e4       	ldi	r25, 0x42	; 66
    7d8a:	0e 94 71 78 	call	0xf0e2	; 0xf0e2 <__subsf3>
    7d8e:	0e 94 4a 79 	call	0xf294	; 0xf294 <__fixunssfsi>
    7d92:	e1 2c       	mov	r14, r1
    7d94:	01 e0       	ldi	r16, 0x01	; 1
    7d96:	21 2f       	mov	r18, r17
    7d98:	43 e0       	ldi	r20, 0x03	; 3
    7d9a:	82 e7       	ldi	r24, 0x72	; 114
    7d9c:	0e 94 10 36 	call	0x6c20	; 0x6c20 <task_twi2_lcd_rect>
    7da0:	20 91 08 23 	lds	r18, 0x2308	; 0x802308 <s_p1y.8163>
    7da4:	28 5d       	subi	r18, 0xD8	; 216
    7da6:	40 91 07 23 	lds	r20, 0x2307	; 0x802307 <s_p1x.8162>
    7daa:	4a 56       	subi	r20, 0x6A	; 106
    7dac:	00 e0       	ldi	r16, 0x00	; 0
    7dae:	68 e2       	ldi	r22, 0x28	; 40
    7db0:	86 e9       	ldi	r24, 0x96	; 150
    7db2:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    7db6:	20 91 06 23 	lds	r18, 0x2306	; 0x802306 <s_p2y.8165>
    7dba:	28 5d       	subi	r18, 0xD8	; 216
    7dbc:	40 91 05 23 	lds	r20, 0x2305	; 0x802305 <s_p2x.8164>
    7dc0:	4a 56       	subi	r20, 0x6A	; 106
    7dc2:	60 91 08 23 	lds	r22, 0x2308	; 0x802308 <s_p1y.8163>
    7dc6:	68 5d       	subi	r22, 0xD8	; 216
    7dc8:	80 91 07 23 	lds	r24, 0x2307	; 0x802307 <s_p1x.8162>
    7dcc:	8a 56       	subi	r24, 0x6A	; 106
    7dce:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    7dd2:	20 91 04 23 	lds	r18, 0x2304	; 0x802304 <s_p3y.8167>
    7dd6:	28 5d       	subi	r18, 0xD8	; 216
    7dd8:	40 91 03 23 	lds	r20, 0x2303	; 0x802303 <s_p3x.8166>
    7ddc:	4a 56       	subi	r20, 0x6A	; 106
    7dde:	60 91 06 23 	lds	r22, 0x2306	; 0x802306 <s_p2y.8165>
    7de2:	68 5d       	subi	r22, 0xD8	; 216
    7de4:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <s_p2x.8164>
    7de8:	8a 56       	subi	r24, 0x6A	; 106
    7dea:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    7dee:	01 e0       	ldi	r16, 0x01	; 1
    7df0:	21 e0       	ldi	r18, 0x01	; 1
    7df2:	41 e0       	ldi	r20, 0x01	; 1
    7df4:	68 e2       	ldi	r22, 0x28	; 40
    7df6:	86 e9       	ldi	r24, 0x96	; 150
    7df8:	0e 94 3e 36 	call	0x6c7c	; 0x6c7c <task_twi2_lcd_circ>
    7dfc:	c5 01       	movw	r24, r10
    7dfe:	b4 01       	movw	r22, r8
    7e00:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    7e04:	6a 83       	std	Y+2, r22	; 0x02
    7e06:	7b 83       	std	Y+3, r23	; 0x03
    7e08:	8c 83       	std	Y+4, r24	; 0x04
    7e0a:	9d 83       	std	Y+5, r25	; 0x05
    7e0c:	c3 01       	movw	r24, r6
    7e0e:	b2 01       	movw	r22, r4
    7e10:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    7e14:	6e 83       	std	Y+6, r22	; 0x06
    7e16:	7f 83       	std	Y+7, r23	; 0x07
    7e18:	88 87       	std	Y+8, r24	; 0x08
    7e1a:	99 87       	std	Y+9, r25	; 0x09
    7e1c:	6a 85       	ldd	r22, Y+10	; 0x0a
    7e1e:	7b 85       	ldd	r23, Y+11	; 0x0b
    7e20:	8c 85       	ldd	r24, Y+12	; 0x0c
    7e22:	9d 85       	ldd	r25, Y+13	; 0x0d
    7e24:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    7e28:	6b 01       	movw	r12, r22
    7e2a:	7c 01       	movw	r14, r24
    7e2c:	2a 81       	ldd	r18, Y+2	; 0x02
    7e2e:	3b 81       	ldd	r19, Y+3	; 0x03
    7e30:	4c 81       	ldd	r20, Y+4	; 0x04
    7e32:	5d 81       	ldd	r21, Y+5	; 0x05
    7e34:	ca 01       	movw	r24, r20
    7e36:	b9 01       	movw	r22, r18
    7e38:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    7e3c:	4b 01       	movw	r8, r22
    7e3e:	5c 01       	movw	r10, r24
    7e40:	2e 81       	ldd	r18, Y+6	; 0x06
    7e42:	3f 81       	ldd	r19, Y+7	; 0x07
    7e44:	48 85       	ldd	r20, Y+8	; 0x08
    7e46:	59 85       	ldd	r21, Y+9	; 0x09
    7e48:	ca 01       	movw	r24, r20
    7e4a:	b9 01       	movw	r22, r18
    7e4c:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    7e50:	9b 01       	movw	r18, r22
    7e52:	ac 01       	movw	r20, r24
    7e54:	c5 01       	movw	r24, r10
    7e56:	b4 01       	movw	r22, r8
    7e58:	0e 94 72 78 	call	0xf0e4	; 0xf0e4 <__addsf3>
    7e5c:	4b 01       	movw	r8, r22
    7e5e:	5c 01       	movw	r10, r24
    7e60:	a7 01       	movw	r20, r14
    7e62:	96 01       	movw	r18, r12
    7e64:	c7 01       	movw	r24, r14
    7e66:	b6 01       	movw	r22, r12
    7e68:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    7e6c:	9b 01       	movw	r18, r22
    7e6e:	ac 01       	movw	r20, r24
    7e70:	c5 01       	movw	r24, r10
    7e72:	b4 01       	movw	r22, r8
    7e74:	0e 94 72 78 	call	0xf0e4	; 0xf0e4 <__addsf3>
    7e78:	20 e0       	ldi	r18, 0x00	; 0
    7e7a:	30 e0       	ldi	r19, 0x00	; 0
    7e7c:	40 e0       	ldi	r20, 0x00	; 0
    7e7e:	5f e3       	ldi	r21, 0x3F	; 63
    7e80:	0e 94 c8 7a 	call	0xf590	; 0xf590 <pow>
    7e84:	96 2e       	mov	r9, r22
    7e86:	a7 2e       	mov	r10, r23
    7e88:	78 2e       	mov	r7, r24
    7e8a:	69 2e       	mov	r6, r25
    7e8c:	20 e0       	ldi	r18, 0x00	; 0
    7e8e:	30 e0       	ldi	r19, 0x00	; 0
    7e90:	a9 01       	movw	r20, r18
    7e92:	0e 94 d6 78 	call	0xf1ac	; 0xf1ac <__cmpsf2>
    7e96:	81 11       	cpse	r24, r1
    7e98:	09 c0       	rjmp	.+18     	; 0x7eac <task_twi2_lcd__gyro_gfxmag+0x24c>
    7e9a:	91 2c       	mov	r9, r1
    7e9c:	a1 2c       	mov	r10, r1
    7e9e:	68 94       	set
    7ea0:	77 24       	eor	r7, r7
    7ea2:	77 f8       	bld	r7, 7
    7ea4:	0f 2e       	mov	r0, r31
    7ea6:	ff e3       	ldi	r31, 0x3F	; 63
    7ea8:	6f 2e       	mov	r6, r31
    7eaa:	f0 2d       	mov	r31, r0
    7eac:	29 2d       	mov	r18, r9
    7eae:	3a 2d       	mov	r19, r10
    7eb0:	47 2d       	mov	r20, r7
    7eb2:	56 2d       	mov	r21, r6
    7eb4:	6a 81       	ldd	r22, Y+2	; 0x02
    7eb6:	7b 81       	ldd	r23, Y+3	; 0x03
    7eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    7eba:	9d 81       	ldd	r25, Y+5	; 0x05
    7ebc:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    7ec0:	20 e0       	ldi	r18, 0x00	; 0
    7ec2:	30 e0       	ldi	r19, 0x00	; 0
    7ec4:	48 e4       	ldi	r20, 0x48	; 72
    7ec6:	51 e4       	ldi	r21, 0x41	; 65
    7ec8:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    7ecc:	1b 01       	movw	r2, r22
    7ece:	2c 01       	movw	r4, r24
    7ed0:	0e 94 4a 79 	call	0xf294	; 0xf294 <__fixunssfsi>
    7ed4:	86 2e       	mov	r8, r22
    7ed6:	c2 01       	movw	r24, r4
    7ed8:	b1 01       	movw	r22, r2
    7eda:	90 58       	subi	r25, 0x80	; 128
    7edc:	0e 94 4a 79 	call	0xf294	; 0xf294 <__fixunssfsi>
    7ee0:	16 2f       	mov	r17, r22
    7ee2:	29 2d       	mov	r18, r9
    7ee4:	3a 2d       	mov	r19, r10
    7ee6:	47 2d       	mov	r20, r7
    7ee8:	56 2d       	mov	r21, r6
    7eea:	6e 81       	ldd	r22, Y+6	; 0x06
    7eec:	7f 81       	ldd	r23, Y+7	; 0x07
    7eee:	88 85       	ldd	r24, Y+8	; 0x08
    7ef0:	99 85       	ldd	r25, Y+9	; 0x09
    7ef2:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    7ef6:	20 e0       	ldi	r18, 0x00	; 0
    7ef8:	30 e0       	ldi	r19, 0x00	; 0
    7efa:	48 ec       	ldi	r20, 0xC8	; 200
    7efc:	51 e4       	ldi	r21, 0x41	; 65
    7efe:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    7f02:	1b 01       	movw	r2, r22
    7f04:	2c 01       	movw	r4, r24
    7f06:	68 2d       	mov	r22, r8
    7f08:	70 e0       	ldi	r23, 0x00	; 0
    7f0a:	80 e0       	ldi	r24, 0x00	; 0
    7f0c:	90 e0       	ldi	r25, 0x00	; 0
    7f0e:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    7f12:	9b 01       	movw	r18, r22
    7f14:	ac 01       	movw	r20, r24
    7f16:	c2 01       	movw	r24, r4
    7f18:	b1 01       	movw	r22, r2
    7f1a:	0e 94 72 78 	call	0xf0e4	; 0xf0e4 <__addsf3>
    7f1e:	0e 94 4a 79 	call	0xf294	; 0xf294 <__fixunssfsi>
    7f22:	b6 2e       	mov	r11, r22
    7f24:	29 2d       	mov	r18, r9
    7f26:	3a 2d       	mov	r19, r10
    7f28:	47 2d       	mov	r20, r7
    7f2a:	56 2d       	mov	r21, r6
    7f2c:	c7 01       	movw	r24, r14
    7f2e:	b6 01       	movw	r22, r12
    7f30:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    7f34:	20 e0       	ldi	r18, 0x00	; 0
    7f36:	30 e0       	ldi	r19, 0x00	; 0
    7f38:	48 ec       	ldi	r20, 0xC8	; 200
    7f3a:	51 e4       	ldi	r21, 0x41	; 65
    7f3c:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    7f40:	6b 01       	movw	r12, r22
    7f42:	7c 01       	movw	r14, r24
    7f44:	61 2f       	mov	r22, r17
    7f46:	70 e0       	ldi	r23, 0x00	; 0
    7f48:	80 e0       	ldi	r24, 0x00	; 0
    7f4a:	90 e0       	ldi	r25, 0x00	; 0
    7f4c:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    7f50:	9b 01       	movw	r18, r22
    7f52:	ac 01       	movw	r20, r24
    7f54:	c7 01       	movw	r24, r14
    7f56:	b6 01       	movw	r22, r12
    7f58:	0e 94 72 78 	call	0xf0e4	; 0xf0e4 <__addsf3>
    7f5c:	0e 94 4a 79 	call	0xf294	; 0xf294 <__fixunssfsi>
    7f60:	f6 2e       	mov	r15, r22
    7f62:	20 e0       	ldi	r18, 0x00	; 0
    7f64:	30 e5       	ldi	r19, 0x50	; 80
    7f66:	43 ec       	ldi	r20, 0xC3	; 195
    7f68:	57 e4       	ldi	r21, 0x47	; 71
    7f6a:	69 2d       	mov	r22, r9
    7f6c:	7a 2d       	mov	r23, r10
    7f6e:	87 2d       	mov	r24, r7
    7f70:	96 2d       	mov	r25, r6
    7f72:	0e 94 61 7a 	call	0xf4c2	; 0xf4c2 <__gesf2>
    7f76:	18 16       	cp	r1, r24
    7f78:	6c f4       	brge	.+26     	; 0x7f94 <task_twi2_lcd__gyro_gfxmag+0x334>
    7f7a:	91 2c       	mov	r9, r1
    7f7c:	0f 2e       	mov	r0, r31
    7f7e:	f0 e5       	ldi	r31, 0x50	; 80
    7f80:	af 2e       	mov	r10, r31
    7f82:	f0 2d       	mov	r31, r0
    7f84:	0f 2e       	mov	r0, r31
    7f86:	f3 ec       	ldi	r31, 0xC3	; 195
    7f88:	7f 2e       	mov	r7, r31
    7f8a:	f0 2d       	mov	r31, r0
    7f8c:	0f 2e       	mov	r0, r31
    7f8e:	f7 e4       	ldi	r31, 0x47	; 71
    7f90:	6f 2e       	mov	r6, r31
    7f92:	f0 2d       	mov	r31, r0
    7f94:	01 e0       	ldi	r16, 0x01	; 1
    7f96:	20 e0       	ldi	r18, 0x00	; 0
    7f98:	42 e0       	ldi	r20, 0x02	; 2
    7f9a:	60 e4       	ldi	r22, 0x40	; 64
    7f9c:	83 e7       	ldi	r24, 0x73	; 115
    7f9e:	0e 94 3e 36 	call	0x6c7c	; 0x6c7c <task_twi2_lcd_circ>
    7fa2:	20 e0       	ldi	r18, 0x00	; 0
    7fa4:	30 e8       	ldi	r19, 0x80	; 128
    7fa6:	4b e3       	ldi	r20, 0x3B	; 59
    7fa8:	55 e4       	ldi	r21, 0x45	; 69
    7faa:	69 2d       	mov	r22, r9
    7fac:	7a 2d       	mov	r23, r10
    7fae:	87 2d       	mov	r24, r7
    7fb0:	96 2d       	mov	r25, r6
    7fb2:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    7fb6:	1b 01       	movw	r2, r22
    7fb8:	2c 01       	movw	r4, r24
    7fba:	0e 94 4a 79 	call	0xf294	; 0xf294 <__fixunssfsi>
    7fbe:	d6 2e       	mov	r13, r22
    7fc0:	a2 01       	movw	r20, r4
    7fc2:	91 01       	movw	r18, r2
    7fc4:	60 e0       	ldi	r22, 0x00	; 0
    7fc6:	70 e0       	ldi	r23, 0x00	; 0
    7fc8:	80 e8       	ldi	r24, 0x80	; 128
    7fca:	92 e4       	ldi	r25, 0x42	; 66
    7fcc:	0e 94 71 78 	call	0xf0e2	; 0xf0e2 <__subsf3>
    7fd0:	0e 94 4a 79 	call	0xf294	; 0xf294 <__fixunssfsi>
    7fd4:	ee 24       	eor	r14, r14
    7fd6:	e3 94       	inc	r14
    7fd8:	2d 2d       	mov	r18, r13
    7fda:	43 e0       	ldi	r20, 0x03	; 3
    7fdc:	82 e7       	ldi	r24, 0x72	; 114
    7fde:	0e 94 10 36 	call	0x6c20	; 0x6c20 <task_twi2_lcd_rect>
    7fe2:	0f 2e       	mov	r0, r31
    7fe4:	f8 e2       	ldi	r31, 0x28	; 40
    7fe6:	ef 2e       	mov	r14, r31
    7fe8:	f0 2d       	mov	r31, r0
    7fea:	e1 0e       	add	r14, r17
    7fec:	0f 2e       	mov	r0, r31
    7fee:	f6 e9       	ldi	r31, 0x96	; 150
    7ff0:	cf 2e       	mov	r12, r31
    7ff2:	f0 2d       	mov	r31, r0
    7ff4:	c8 0c       	add	r12, r8
    7ff6:	2e 2d       	mov	r18, r14
    7ff8:	4c 2d       	mov	r20, r12
    7ffa:	68 e2       	ldi	r22, 0x28	; 40
    7ffc:	86 e9       	ldi	r24, 0x96	; 150
    7ffe:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    8002:	0f 2e       	mov	r0, r31
    8004:	f6 e9       	ldi	r31, 0x96	; 150
    8006:	df 2e       	mov	r13, r31
    8008:	f0 2d       	mov	r31, r0
    800a:	db 0c       	add	r13, r11
    800c:	2e 2d       	mov	r18, r14
    800e:	4d 2d       	mov	r20, r13
    8010:	6e 2d       	mov	r22, r14
    8012:	8c 2d       	mov	r24, r12
    8014:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    8018:	28 e2       	ldi	r18, 0x28	; 40
    801a:	2f 0d       	add	r18, r15
    801c:	4d 2d       	mov	r20, r13
    801e:	6e 2d       	mov	r22, r14
    8020:	8d 2d       	mov	r24, r13
    8022:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    8026:	89 2d       	mov	r24, r9
    8028:	9a 2d       	mov	r25, r10
    802a:	a7 2d       	mov	r26, r7
    802c:	b6 2d       	mov	r27, r6
    802e:	80 93 09 23 	sts	0x2309, r24	; 0x802309 <s_length.8161>
    8032:	90 93 0a 23 	sts	0x230A, r25	; 0x80230a <s_length.8161+0x1>
    8036:	a0 93 0b 23 	sts	0x230B, r26	; 0x80230b <s_length.8161+0x2>
    803a:	b0 93 0c 23 	sts	0x230C, r27	; 0x80230c <s_length.8161+0x3>
    803e:	80 92 07 23 	sts	0x2307, r8	; 0x802307 <s_p1x.8162>
    8042:	10 93 08 23 	sts	0x2308, r17	; 0x802308 <s_p1y.8163>
    8046:	b0 92 05 23 	sts	0x2305, r11	; 0x802305 <s_p2x.8164>
    804a:	10 93 06 23 	sts	0x2306, r17	; 0x802306 <s_p2y.8165>
    804e:	b0 92 03 23 	sts	0x2303, r11	; 0x802303 <s_p3x.8166>
    8052:	f0 92 04 23 	sts	0x2304, r15	; 0x802304 <s_p3y.8167>
    8056:	2d 96       	adiw	r28, 0x0d	; 13
    8058:	cd bf       	out	0x3d, r28	; 61
    805a:	de bf       	out	0x3e, r29	; 62
    805c:	df 91       	pop	r29
    805e:	cf 91       	pop	r28
    8060:	1f 91       	pop	r17
    8062:	0f 91       	pop	r16
    8064:	ff 90       	pop	r15
    8066:	ef 90       	pop	r14
    8068:	df 90       	pop	r13
    806a:	cf 90       	pop	r12
    806c:	bf 90       	pop	r11
    806e:	af 90       	pop	r10
    8070:	9f 90       	pop	r9
    8072:	8f 90       	pop	r8
    8074:	7f 90       	pop	r7
    8076:	6f 90       	pop	r6
    8078:	5f 90       	pop	r5
    807a:	4f 90       	pop	r4
    807c:	3f 90       	pop	r3
    807e:	2f 90       	pop	r2
    8080:	08 95       	ret

00008082 <task_twi2_lcd__gyro_gfxaccel>:
    8082:	6f 92       	push	r6
    8084:	7f 92       	push	r7
    8086:	8f 92       	push	r8
    8088:	9f 92       	push	r9
    808a:	af 92       	push	r10
    808c:	bf 92       	push	r11
    808e:	cf 92       	push	r12
    8090:	df 92       	push	r13
    8092:	ef 92       	push	r14
    8094:	ff 92       	push	r15
    8096:	0f 93       	push	r16
    8098:	1f 93       	push	r17
    809a:	cf 93       	push	r28
    809c:	df 93       	push	r29
    809e:	1f 92       	push	r1
    80a0:	cd b7       	in	r28, 0x3d	; 61
    80a2:	de b7       	in	r29, 0x3e	; 62
    80a4:	8f b7       	in	r24, 0x3f	; 63
    80a6:	89 83       	std	Y+1, r24	; 0x01
    80a8:	f8 94       	cli
    80aa:	89 81       	ldd	r24, Y+1	; 0x01
    80ac:	c0 90 55 27 	lds	r12, 0x2755	; 0x802755 <g_twi1_gyro_1_accel_x_mg>
    80b0:	d0 90 56 27 	lds	r13, 0x2756	; 0x802756 <g_twi1_gyro_1_accel_x_mg+0x1>
    80b4:	a0 90 53 27 	lds	r10, 0x2753	; 0x802753 <g_twi1_gyro_1_accel_y_mg>
    80b8:	b0 90 54 27 	lds	r11, 0x2754	; 0x802754 <g_twi1_gyro_1_accel_y_mg+0x1>
    80bc:	e0 90 51 27 	lds	r14, 0x2751	; 0x802751 <g_twi1_gyro_1_accel_z_mg>
    80c0:	f0 90 52 27 	lds	r15, 0x2752	; 0x802752 <g_twi1_gyro_1_accel_z_mg+0x1>
    80c4:	80 90 62 20 	lds	r8, 0x2062	; 0x802062 <g_backlight_mode_pwm>
    80c8:	90 90 63 20 	lds	r9, 0x2063	; 0x802063 <g_backlight_mode_pwm+0x1>
    80cc:	8f bf       	out	0x3f, r24	; 63
    80ce:	80 91 01 23 	lds	r24, 0x2301	; 0x802301 <s_twi1_gyro_1_accel_x_mg.8187>
    80d2:	90 91 02 23 	lds	r25, 0x2302	; 0x802302 <s_twi1_gyro_1_accel_x_mg.8187+0x1>
    80d6:	c8 16       	cp	r12, r24
    80d8:	d9 06       	cpc	r13, r25
    80da:	79 f4       	brne	.+30     	; 0x80fa <task_twi2_lcd__gyro_gfxaccel+0x78>
    80dc:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <s_twi1_gyro_1_accel_y_mg.8188>
    80e0:	90 91 00 23 	lds	r25, 0x2300	; 0x802300 <s_twi1_gyro_1_accel_y_mg.8188+0x1>
    80e4:	a8 16       	cp	r10, r24
    80e6:	b9 06       	cpc	r11, r25
    80e8:	41 f4       	brne	.+16     	; 0x80fa <task_twi2_lcd__gyro_gfxaccel+0x78>
    80ea:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <s_twi1_gyro_1_accel_z_mg.8189>
    80ee:	90 91 fe 22 	lds	r25, 0x22FE	; 0x8022fe <s_twi1_gyro_1_accel_z_mg.8189+0x1>
    80f2:	e8 16       	cp	r14, r24
    80f4:	f9 06       	cpc	r15, r25
    80f6:	09 f4       	brne	.+2      	; 0x80fa <task_twi2_lcd__gyro_gfxaccel+0x78>
    80f8:	a6 c0       	rjmp	.+332    	; 0x8246 <task_twi2_lcd__gyro_gfxaccel+0x1c4>
    80fa:	c0 92 01 23 	sts	0x2301, r12	; 0x802301 <s_twi1_gyro_1_accel_x_mg.8187>
    80fe:	d0 92 02 23 	sts	0x2302, r13	; 0x802302 <s_twi1_gyro_1_accel_x_mg.8187+0x1>
    8102:	a0 92 ff 22 	sts	0x22FF, r10	; 0x8022ff <s_twi1_gyro_1_accel_y_mg.8188>
    8106:	b0 92 00 23 	sts	0x2300, r11	; 0x802300 <s_twi1_gyro_1_accel_y_mg.8188+0x1>
    810a:	e0 92 fd 22 	sts	0x22FD, r14	; 0x8022fd <s_twi1_gyro_1_accel_z_mg.8189>
    810e:	f0 92 fe 22 	sts	0x22FE, r15	; 0x8022fe <s_twi1_gyro_1_accel_z_mg.8189+0x1>
    8112:	20 91 fc 22 	lds	r18, 0x22FC	; 0x8022fc <s_p1y.8191>
    8116:	28 5d       	subi	r18, 0xD8	; 216
    8118:	40 91 fb 22 	lds	r20, 0x22FB	; 0x8022fb <s_p1x.8190>
    811c:	4e 52       	subi	r20, 0x2E	; 46
    811e:	00 e0       	ldi	r16, 0x00	; 0
    8120:	68 e2       	ldi	r22, 0x28	; 40
    8122:	82 ed       	ldi	r24, 0xD2	; 210
    8124:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    8128:	20 91 fa 22 	lds	r18, 0x22FA	; 0x8022fa <s_p2y.8193>
    812c:	28 5d       	subi	r18, 0xD8	; 216
    812e:	40 91 f9 22 	lds	r20, 0x22F9	; 0x8022f9 <s_p2x.8192>
    8132:	4e 52       	subi	r20, 0x2E	; 46
    8134:	60 91 fc 22 	lds	r22, 0x22FC	; 0x8022fc <s_p1y.8191>
    8138:	68 5d       	subi	r22, 0xD8	; 216
    813a:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <s_p1x.8190>
    813e:	8e 52       	subi	r24, 0x2E	; 46
    8140:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    8144:	20 91 f8 22 	lds	r18, 0x22F8	; 0x8022f8 <s_p3y.8195>
    8148:	28 5d       	subi	r18, 0xD8	; 216
    814a:	40 91 f7 22 	lds	r20, 0x22F7	; 0x8022f7 <s_p3x.8194>
    814e:	4e 52       	subi	r20, 0x2E	; 46
    8150:	60 91 fa 22 	lds	r22, 0x22FA	; 0x8022fa <s_p2y.8193>
    8154:	68 5d       	subi	r22, 0xD8	; 216
    8156:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <s_p2x.8192>
    815a:	8e 52       	subi	r24, 0x2E	; 46
    815c:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    8160:	01 e0       	ldi	r16, 0x01	; 1
    8162:	21 e0       	ldi	r18, 0x01	; 1
    8164:	41 e0       	ldi	r20, 0x01	; 1
    8166:	68 e2       	ldi	r22, 0x28	; 40
    8168:	82 ed       	ldi	r24, 0xD2	; 210
    816a:	0e 94 3e 36 	call	0x6c7c	; 0x6c7c <task_twi2_lcd_circ>
    816e:	c5 01       	movw	r24, r10
    8170:	60 e5       	ldi	r22, 0x50	; 80
    8172:	70 e0       	ldi	r23, 0x00	; 0
    8174:	0e 94 67 7c 	call	0xf8ce	; 0xf8ce <__divmodhi4>
    8178:	16 2f       	mov	r17, r22
    817a:	66 2e       	mov	r6, r22
    817c:	61 94       	neg	r6
    817e:	28 e2       	ldi	r18, 0x28	; 40
    8180:	30 e0       	ldi	r19, 0x00	; 0
    8182:	c6 01       	movw	r24, r12
    8184:	b9 01       	movw	r22, r18
    8186:	0e 94 67 7c 	call	0xf8ce	; 0xf8ce <__divmodhi4>
    818a:	a6 2c       	mov	r10, r6
    818c:	a6 1a       	sub	r10, r22
    818e:	c7 01       	movw	r24, r14
    8190:	b9 01       	movw	r22, r18
    8192:	0e 94 67 7c 	call	0xf8ce	; 0xf8ce <__divmodhi4>
    8196:	d1 2e       	mov	r13, r17
    8198:	d6 0e       	add	r13, r22
    819a:	0f 2e       	mov	r0, r31
    819c:	f8 e2       	ldi	r31, 0x28	; 40
    819e:	cf 2e       	mov	r12, r31
    81a0:	f0 2d       	mov	r31, r0
    81a2:	c1 0e       	add	r12, r17
    81a4:	82 ed       	ldi	r24, 0xD2	; 210
    81a6:	b8 2e       	mov	r11, r24
    81a8:	b1 1a       	sub	r11, r17
    81aa:	2c 2d       	mov	r18, r12
    81ac:	4b 2d       	mov	r20, r11
    81ae:	68 e2       	ldi	r22, 0x28	; 40
    81b0:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    81b4:	0f 2e       	mov	r0, r31
    81b6:	f2 ed       	ldi	r31, 0xD2	; 210
    81b8:	7f 2e       	mov	r7, r31
    81ba:	f0 2d       	mov	r31, r0
    81bc:	7a 0c       	add	r7, r10
    81be:	2c 2d       	mov	r18, r12
    81c0:	47 2d       	mov	r20, r7
    81c2:	6c 2d       	mov	r22, r12
    81c4:	8b 2d       	mov	r24, r11
    81c6:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    81ca:	28 e2       	ldi	r18, 0x28	; 40
    81cc:	2d 0d       	add	r18, r13
    81ce:	47 2d       	mov	r20, r7
    81d0:	6c 2d       	mov	r22, r12
    81d2:	87 2d       	mov	r24, r7
    81d4:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    81d8:	60 92 fb 22 	sts	0x22FB, r6	; 0x8022fb <s_p1x.8190>
    81dc:	10 93 fc 22 	sts	0x22FC, r17	; 0x8022fc <s_p1y.8191>
    81e0:	a0 92 f9 22 	sts	0x22F9, r10	; 0x8022f9 <s_p2x.8192>
    81e4:	10 93 fa 22 	sts	0x22FA, r17	; 0x8022fa <s_p2y.8193>
    81e8:	a0 92 f7 22 	sts	0x22F7, r10	; 0x8022f7 <s_p3x.8194>
    81ec:	d0 92 f8 22 	sts	0x22F8, r13	; 0x8022f8 <s_p3y.8195>
    81f0:	2e ef       	ldi	r18, 0xFE	; 254
    81f2:	82 16       	cp	r8, r18
    81f4:	2f ef       	ldi	r18, 0xFF	; 255
    81f6:	92 06       	cpc	r9, r18
    81f8:	31 f5       	brne	.+76     	; 0x8246 <task_twi2_lcd__gyro_gfxaccel+0x1c4>
    81fa:	97 01       	movw	r18, r14
    81fc:	28 51       	subi	r18, 0x18	; 24
    81fe:	3c 4f       	sbci	r19, 0xFC	; 252
    8200:	c9 01       	movw	r24, r18
    8202:	33 0f       	add	r19, r19
    8204:	aa 0b       	sbc	r26, r26
    8206:	bb 0b       	sbc	r27, r27
    8208:	81 3d       	cpi	r24, 0xD1	; 209
    820a:	27 e0       	ldi	r18, 0x07	; 7
    820c:	92 07       	cpc	r25, r18
    820e:	a1 05       	cpc	r26, r1
    8210:	b1 05       	cpc	r27, r1
    8212:	24 f0       	brlt	.+8      	; 0x821c <task_twi2_lcd__gyro_gfxaccel+0x19a>
    8214:	80 ed       	ldi	r24, 0xD0	; 208
    8216:	97 e0       	ldi	r25, 0x07	; 7
    8218:	a0 e0       	ldi	r26, 0x00	; 0
    821a:	b0 e0       	ldi	r27, 0x00	; 0
    821c:	9c 01       	movw	r18, r24
    821e:	ad 01       	movw	r20, r26
    8220:	bb 23       	and	r27, r27
    8222:	1c f4       	brge	.+6      	; 0x822a <task_twi2_lcd__gyro_gfxaccel+0x1a8>
    8224:	20 e0       	ldi	r18, 0x00	; 0
    8226:	30 e0       	ldi	r19, 0x00	; 0
    8228:	a9 01       	movw	r20, r18
    822a:	af ef       	ldi	r26, 0xFF	; 255
    822c:	b0 e0       	ldi	r27, 0x00	; 0
    822e:	0e 94 db 7c 	call	0xf9b6	; 0xf9b6 <__muluhisi3>
    8232:	20 ed       	ldi	r18, 0xD0	; 208
    8234:	37 e0       	ldi	r19, 0x07	; 7
    8236:	40 e0       	ldi	r20, 0x00	; 0
    8238:	50 e0       	ldi	r21, 0x00	; 0
    823a:	0e 94 9c 7c 	call	0xf938	; 0xf938 <__divmodsi4>
    823e:	62 2f       	mov	r22, r18
    8240:	80 e0       	ldi	r24, 0x00	; 0
    8242:	0e 94 07 33 	call	0x660e	; 0x660e <twi2_set_ledbl>
    8246:	0f 90       	pop	r0
    8248:	df 91       	pop	r29
    824a:	cf 91       	pop	r28
    824c:	1f 91       	pop	r17
    824e:	0f 91       	pop	r16
    8250:	ff 90       	pop	r15
    8252:	ef 90       	pop	r14
    8254:	df 90       	pop	r13
    8256:	cf 90       	pop	r12
    8258:	bf 90       	pop	r11
    825a:	af 90       	pop	r10
    825c:	9f 90       	pop	r9
    825e:	8f 90       	pop	r8
    8260:	7f 90       	pop	r7
    8262:	6f 90       	pop	r6
    8264:	08 95       	ret

00008266 <task_twi2_lcd__gyro_gfxgyro>:
    8266:	2f 92       	push	r2
    8268:	3f 92       	push	r3
    826a:	4f 92       	push	r4
    826c:	5f 92       	push	r5
    826e:	6f 92       	push	r6
    8270:	7f 92       	push	r7
    8272:	8f 92       	push	r8
    8274:	9f 92       	push	r9
    8276:	af 92       	push	r10
    8278:	bf 92       	push	r11
    827a:	cf 92       	push	r12
    827c:	df 92       	push	r13
    827e:	ef 92       	push	r14
    8280:	ff 92       	push	r15
    8282:	0f 93       	push	r16
    8284:	1f 93       	push	r17
    8286:	cf 93       	push	r28
    8288:	df 93       	push	r29
    828a:	cd b7       	in	r28, 0x3d	; 61
    828c:	de b7       	in	r29, 0x3e	; 62
    828e:	65 97       	sbiw	r28, 0x15	; 21
    8290:	cd bf       	out	0x3d, r28	; 61
    8292:	de bf       	out	0x3e, r29	; 62
    8294:	8f b7       	in	r24, 0x3f	; 63
    8296:	89 83       	std	Y+1, r24	; 0x01
    8298:	f8 94       	cli
    829a:	89 81       	ldd	r24, Y+1	; 0x01
    829c:	20 90 47 27 	lds	r2, 0x2747	; 0x802747 <g_twi1_gyro_1_gyro_x_mdps>
    82a0:	30 90 48 27 	lds	r3, 0x2748	; 0x802748 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    82a4:	40 90 49 27 	lds	r4, 0x2749	; 0x802749 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    82a8:	50 90 4a 27 	lds	r5, 0x274A	; 0x80274a <g_twi1_gyro_1_gyro_x_mdps+0x3>
    82ac:	c0 90 43 27 	lds	r12, 0x2743	; 0x802743 <g_twi1_gyro_1_gyro_y_mdps>
    82b0:	d0 90 44 27 	lds	r13, 0x2744	; 0x802744 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    82b4:	e0 90 45 27 	lds	r14, 0x2745	; 0x802745 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    82b8:	f0 90 46 27 	lds	r15, 0x2746	; 0x802746 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    82bc:	20 91 3f 27 	lds	r18, 0x273F	; 0x80273f <g_twi1_gyro_1_gyro_z_mdps>
    82c0:	30 91 40 27 	lds	r19, 0x2740	; 0x802740 <g_twi1_gyro_1_gyro_z_mdps+0x1>
    82c4:	40 91 41 27 	lds	r20, 0x2741	; 0x802741 <g_twi1_gyro_1_gyro_z_mdps+0x2>
    82c8:	50 91 42 27 	lds	r21, 0x2742	; 0x802742 <g_twi1_gyro_1_gyro_z_mdps+0x3>
    82cc:	2a 8b       	std	Y+18, r18	; 0x12
    82ce:	3b 8b       	std	Y+19, r19	; 0x13
    82d0:	4c 8b       	std	Y+20, r20	; 0x14
    82d2:	5d 8b       	std	Y+21, r21	; 0x15
    82d4:	8f bf       	out	0x3f, r24	; 63
    82d6:	80 91 f3 22 	lds	r24, 0x22F3	; 0x8022f3 <s_twi1_gyro_1_gyro_x_mdps.8219>
    82da:	90 91 f4 22 	lds	r25, 0x22F4	; 0x8022f4 <s_twi1_gyro_1_gyro_x_mdps.8219+0x1>
    82de:	a0 91 f5 22 	lds	r26, 0x22F5	; 0x8022f5 <s_twi1_gyro_1_gyro_x_mdps.8219+0x2>
    82e2:	b0 91 f6 22 	lds	r27, 0x22F6	; 0x8022f6 <s_twi1_gyro_1_gyro_x_mdps.8219+0x3>
    82e6:	28 16       	cp	r2, r24
    82e8:	39 06       	cpc	r3, r25
    82ea:	4a 06       	cpc	r4, r26
    82ec:	5b 06       	cpc	r5, r27
    82ee:	d9 f4       	brne	.+54     	; 0x8326 <task_twi2_lcd__gyro_gfxgyro+0xc0>
    82f0:	80 91 ef 22 	lds	r24, 0x22EF	; 0x8022ef <s_twi1_gyro_1_gyro_y_mdps.8220>
    82f4:	90 91 f0 22 	lds	r25, 0x22F0	; 0x8022f0 <s_twi1_gyro_1_gyro_y_mdps.8220+0x1>
    82f8:	a0 91 f1 22 	lds	r26, 0x22F1	; 0x8022f1 <s_twi1_gyro_1_gyro_y_mdps.8220+0x2>
    82fc:	b0 91 f2 22 	lds	r27, 0x22F2	; 0x8022f2 <s_twi1_gyro_1_gyro_y_mdps.8220+0x3>
    8300:	c8 16       	cp	r12, r24
    8302:	d9 06       	cpc	r13, r25
    8304:	ea 06       	cpc	r14, r26
    8306:	fb 06       	cpc	r15, r27
    8308:	71 f4       	brne	.+28     	; 0x8326 <task_twi2_lcd__gyro_gfxgyro+0xc0>
    830a:	80 91 eb 22 	lds	r24, 0x22EB	; 0x8022eb <s_twi1_gyro_1_gyro_z_mdps.8221>
    830e:	90 91 ec 22 	lds	r25, 0x22EC	; 0x8022ec <s_twi1_gyro_1_gyro_z_mdps.8221+0x1>
    8312:	a0 91 ed 22 	lds	r26, 0x22ED	; 0x8022ed <s_twi1_gyro_1_gyro_z_mdps.8221+0x2>
    8316:	b0 91 ee 22 	lds	r27, 0x22EE	; 0x8022ee <s_twi1_gyro_1_gyro_z_mdps.8221+0x3>
    831a:	28 17       	cp	r18, r24
    831c:	39 07       	cpc	r19, r25
    831e:	4a 07       	cpc	r20, r26
    8320:	5b 07       	cpc	r21, r27
    8322:	09 f4       	brne	.+2      	; 0x8326 <task_twi2_lcd__gyro_gfxgyro+0xc0>
    8324:	b7 c1       	rjmp	.+878    	; 0x8694 <task_twi2_lcd__gyro_gfxgyro+0x42e>
    8326:	20 92 f3 22 	sts	0x22F3, r2	; 0x8022f3 <s_twi1_gyro_1_gyro_x_mdps.8219>
    832a:	30 92 f4 22 	sts	0x22F4, r3	; 0x8022f4 <s_twi1_gyro_1_gyro_x_mdps.8219+0x1>
    832e:	40 92 f5 22 	sts	0x22F5, r4	; 0x8022f5 <s_twi1_gyro_1_gyro_x_mdps.8219+0x2>
    8332:	50 92 f6 22 	sts	0x22F6, r5	; 0x8022f6 <s_twi1_gyro_1_gyro_x_mdps.8219+0x3>
    8336:	c0 92 ef 22 	sts	0x22EF, r12	; 0x8022ef <s_twi1_gyro_1_gyro_y_mdps.8220>
    833a:	d0 92 f0 22 	sts	0x22F0, r13	; 0x8022f0 <s_twi1_gyro_1_gyro_y_mdps.8220+0x1>
    833e:	e0 92 f1 22 	sts	0x22F1, r14	; 0x8022f1 <s_twi1_gyro_1_gyro_y_mdps.8220+0x2>
    8342:	f0 92 f2 22 	sts	0x22F2, r15	; 0x8022f2 <s_twi1_gyro_1_gyro_y_mdps.8220+0x3>
    8346:	8a 89       	ldd	r24, Y+18	; 0x12
    8348:	9b 89       	ldd	r25, Y+19	; 0x13
    834a:	ac 89       	ldd	r26, Y+20	; 0x14
    834c:	bd 89       	ldd	r27, Y+21	; 0x15
    834e:	80 93 eb 22 	sts	0x22EB, r24	; 0x8022eb <s_twi1_gyro_1_gyro_z_mdps.8221>
    8352:	90 93 ec 22 	sts	0x22EC, r25	; 0x8022ec <s_twi1_gyro_1_gyro_z_mdps.8221+0x1>
    8356:	a0 93 ed 22 	sts	0x22ED, r26	; 0x8022ed <s_twi1_gyro_1_gyro_z_mdps.8221+0x2>
    835a:	b0 93 ee 22 	sts	0x22EE, r27	; 0x8022ee <s_twi1_gyro_1_gyro_z_mdps.8221+0x3>
    835e:	c2 01       	movw	r24, r4
    8360:	b1 01       	movw	r22, r2
    8362:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    8366:	2b ed       	ldi	r18, 0xDB	; 219
    8368:	3f e0       	ldi	r19, 0x0F	; 15
    836a:	49 e4       	ldi	r20, 0x49	; 73
    836c:	50 e4       	ldi	r21, 0x40	; 64
    836e:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    8372:	20 e0       	ldi	r18, 0x00	; 0
    8374:	38 ec       	ldi	r19, 0xC8	; 200
    8376:	4f e2       	ldi	r20, 0x2F	; 47
    8378:	58 e4       	ldi	r21, 0x48	; 72
    837a:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    837e:	6e 83       	std	Y+6, r22	; 0x06
    8380:	7f 83       	std	Y+7, r23	; 0x07
    8382:	88 87       	std	Y+8, r24	; 0x08
    8384:	99 87       	std	Y+9, r25	; 0x09
    8386:	c7 01       	movw	r24, r14
    8388:	b6 01       	movw	r22, r12
    838a:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    838e:	2b ed       	ldi	r18, 0xDB	; 219
    8390:	3f e0       	ldi	r19, 0x0F	; 15
    8392:	49 e4       	ldi	r20, 0x49	; 73
    8394:	50 e4       	ldi	r21, 0x40	; 64
    8396:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    839a:	20 e0       	ldi	r18, 0x00	; 0
    839c:	38 ec       	ldi	r19, 0xC8	; 200
    839e:	4f e2       	ldi	r20, 0x2F	; 47
    83a0:	58 e4       	ldi	r21, 0x48	; 72
    83a2:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    83a6:	6a 87       	std	Y+10, r22	; 0x0a
    83a8:	7b 87       	std	Y+11, r23	; 0x0b
    83aa:	8c 87       	std	Y+12, r24	; 0x0c
    83ac:	9d 87       	std	Y+13, r25	; 0x0d
    83ae:	6a 89       	ldd	r22, Y+18	; 0x12
    83b0:	7b 89       	ldd	r23, Y+19	; 0x13
    83b2:	8c 89       	ldd	r24, Y+20	; 0x14
    83b4:	9d 89       	ldd	r25, Y+21	; 0x15
    83b6:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    83ba:	2b ed       	ldi	r18, 0xDB	; 219
    83bc:	3f e0       	ldi	r19, 0x0F	; 15
    83be:	49 e4       	ldi	r20, 0x49	; 73
    83c0:	50 e4       	ldi	r21, 0x40	; 64
    83c2:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    83c6:	20 e0       	ldi	r18, 0x00	; 0
    83c8:	38 ec       	ldi	r19, 0xC8	; 200
    83ca:	4f e2       	ldi	r20, 0x2F	; 47
    83cc:	58 e4       	ldi	r21, 0x48	; 72
    83ce:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    83d2:	6e 87       	std	Y+14, r22	; 0x0e
    83d4:	7f 87       	std	Y+15, r23	; 0x0f
    83d6:	88 8b       	std	Y+16, r24	; 0x10
    83d8:	99 8b       	std	Y+17, r25	; 0x11
    83da:	80 90 e7 22 	lds	r8, 0x22E7	; 0x8022e7 <s_rads_x.8216>
    83de:	90 90 e8 22 	lds	r9, 0x22E8	; 0x8022e8 <s_rads_x.8216+0x1>
    83e2:	a0 90 e9 22 	lds	r10, 0x22E9	; 0x8022e9 <s_rads_x.8216+0x2>
    83e6:	b0 90 ea 22 	lds	r11, 0x22EA	; 0x8022ea <s_rads_x.8216+0x3>
    83ea:	c5 01       	movw	r24, r10
    83ec:	b4 01       	movw	r22, r8
    83ee:	0e 94 da 78 	call	0xf1b4	; 0xf1b4 <cos>
    83f2:	6a 83       	std	Y+2, r22	; 0x02
    83f4:	7b 83       	std	Y+3, r23	; 0x03
    83f6:	8c 83       	std	Y+4, r24	; 0x04
    83f8:	9d 83       	std	Y+5, r25	; 0x05
    83fa:	c5 01       	movw	r24, r10
    83fc:	b4 01       	movw	r22, r8
    83fe:	0e 94 14 7b 	call	0xf628	; 0xf628 <sin>
    8402:	4b 01       	movw	r8, r22
    8404:	5c 01       	movw	r10, r24
    8406:	20 e0       	ldi	r18, 0x00	; 0
    8408:	30 e0       	ldi	r19, 0x00	; 0
    840a:	40 e4       	ldi	r20, 0x40	; 64
    840c:	51 e4       	ldi	r21, 0x41	; 65
    840e:	6a 81       	ldd	r22, Y+2	; 0x02
    8410:	7b 81       	ldd	r23, Y+3	; 0x03
    8412:	8c 81       	ldd	r24, Y+4	; 0x04
    8414:	9d 81       	ldd	r25, Y+5	; 0x05
    8416:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    841a:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    841e:	14 e6       	ldi	r17, 0x64	; 100
    8420:	71 2e       	mov	r7, r17
    8422:	76 1a       	sub	r7, r22
    8424:	20 e0       	ldi	r18, 0x00	; 0
    8426:	30 e0       	ldi	r19, 0x00	; 0
    8428:	40 e4       	ldi	r20, 0x40	; 64
    842a:	51 e4       	ldi	r21, 0x41	; 65
    842c:	c5 01       	movw	r24, r10
    842e:	b4 01       	movw	r22, r8
    8430:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    8434:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    8438:	46 e9       	ldi	r20, 0x96	; 150
    843a:	46 1b       	sub	r20, r22
    843c:	00 e0       	ldi	r16, 0x00	; 0
    843e:	27 2d       	mov	r18, r7
    8440:	64 e6       	ldi	r22, 0x64	; 100
    8442:	86 e9       	ldi	r24, 0x96	; 150
    8444:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    8448:	80 90 e3 22 	lds	r8, 0x22E3	; 0x8022e3 <s_rads_y.8217>
    844c:	90 90 e4 22 	lds	r9, 0x22E4	; 0x8022e4 <s_rads_y.8217+0x1>
    8450:	a0 90 e5 22 	lds	r10, 0x22E5	; 0x8022e5 <s_rads_y.8217+0x2>
    8454:	b0 90 e6 22 	lds	r11, 0x22E6	; 0x8022e6 <s_rads_y.8217+0x3>
    8458:	c5 01       	movw	r24, r10
    845a:	b4 01       	movw	r22, r8
    845c:	0e 94 da 78 	call	0xf1b4	; 0xf1b4 <cos>
    8460:	6a 83       	std	Y+2, r22	; 0x02
    8462:	7b 83       	std	Y+3, r23	; 0x03
    8464:	8c 83       	std	Y+4, r24	; 0x04
    8466:	9d 83       	std	Y+5, r25	; 0x05
    8468:	c5 01       	movw	r24, r10
    846a:	b4 01       	movw	r22, r8
    846c:	0e 94 14 7b 	call	0xf628	; 0xf628 <sin>
    8470:	4b 01       	movw	r8, r22
    8472:	5c 01       	movw	r10, r24
    8474:	20 e0       	ldi	r18, 0x00	; 0
    8476:	30 e0       	ldi	r19, 0x00	; 0
    8478:	40 e4       	ldi	r20, 0x40	; 64
    847a:	51 e4       	ldi	r21, 0x41	; 65
    847c:	6a 81       	ldd	r22, Y+2	; 0x02
    847e:	7b 81       	ldd	r23, Y+3	; 0x03
    8480:	8c 81       	ldd	r24, Y+4	; 0x04
    8482:	9d 81       	ldd	r25, Y+5	; 0x05
    8484:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    8488:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    848c:	71 2e       	mov	r7, r17
    848e:	76 1a       	sub	r7, r22
    8490:	20 e0       	ldi	r18, 0x00	; 0
    8492:	30 e0       	ldi	r19, 0x00	; 0
    8494:	40 e4       	ldi	r20, 0x40	; 64
    8496:	51 e4       	ldi	r21, 0x41	; 65
    8498:	c5 01       	movw	r24, r10
    849a:	b4 01       	movw	r22, r8
    849c:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    84a0:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    84a4:	44 eb       	ldi	r20, 0xB4	; 180
    84a6:	46 0f       	add	r20, r22
    84a8:	27 2d       	mov	r18, r7
    84aa:	64 e6       	ldi	r22, 0x64	; 100
    84ac:	84 eb       	ldi	r24, 0xB4	; 180
    84ae:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    84b2:	80 90 df 22 	lds	r8, 0x22DF	; 0x8022df <s_rads_z.8218>
    84b6:	90 90 e0 22 	lds	r9, 0x22E0	; 0x8022e0 <s_rads_z.8218+0x1>
    84ba:	a0 90 e1 22 	lds	r10, 0x22E1	; 0x8022e1 <s_rads_z.8218+0x2>
    84be:	b0 90 e2 22 	lds	r11, 0x22E2	; 0x8022e2 <s_rads_z.8218+0x3>
    84c2:	c5 01       	movw	r24, r10
    84c4:	b4 01       	movw	r22, r8
    84c6:	0e 94 da 78 	call	0xf1b4	; 0xf1b4 <cos>
    84ca:	6a 83       	std	Y+2, r22	; 0x02
    84cc:	7b 83       	std	Y+3, r23	; 0x03
    84ce:	8c 83       	std	Y+4, r24	; 0x04
    84d0:	9d 83       	std	Y+5, r25	; 0x05
    84d2:	c5 01       	movw	r24, r10
    84d4:	b4 01       	movw	r22, r8
    84d6:	0e 94 14 7b 	call	0xf628	; 0xf628 <sin>
    84da:	4b 01       	movw	r8, r22
    84dc:	5c 01       	movw	r10, r24
    84de:	20 e0       	ldi	r18, 0x00	; 0
    84e0:	30 e0       	ldi	r19, 0x00	; 0
    84e2:	40 e4       	ldi	r20, 0x40	; 64
    84e4:	51 e4       	ldi	r21, 0x41	; 65
    84e6:	6a 81       	ldd	r22, Y+2	; 0x02
    84e8:	7b 81       	ldd	r23, Y+3	; 0x03
    84ea:	8c 81       	ldd	r24, Y+4	; 0x04
    84ec:	9d 81       	ldd	r25, Y+5	; 0x05
    84ee:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    84f2:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    84f6:	71 2e       	mov	r7, r17
    84f8:	76 1a       	sub	r7, r22
    84fa:	20 e0       	ldi	r18, 0x00	; 0
    84fc:	30 e0       	ldi	r19, 0x00	; 0
    84fe:	40 e4       	ldi	r20, 0x40	; 64
    8500:	51 e4       	ldi	r21, 0x41	; 65
    8502:	c5 01       	movw	r24, r10
    8504:	b4 01       	movw	r22, r8
    8506:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    850a:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    850e:	0f 2e       	mov	r0, r31
    8510:	f2 ed       	ldi	r31, 0xD2	; 210
    8512:	6f 2e       	mov	r6, r31
    8514:	f0 2d       	mov	r31, r0
    8516:	46 2d       	mov	r20, r6
    8518:	46 1b       	sub	r20, r22
    851a:	27 2d       	mov	r18, r7
    851c:	64 e6       	ldi	r22, 0x64	; 100
    851e:	82 ed       	ldi	r24, 0xD2	; 210
    8520:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    8524:	6e 81       	ldd	r22, Y+6	; 0x06
    8526:	7f 81       	ldd	r23, Y+7	; 0x07
    8528:	88 85       	ldd	r24, Y+8	; 0x08
    852a:	99 85       	ldd	r25, Y+9	; 0x09
    852c:	0e 94 da 78 	call	0xf1b4	; 0xf1b4 <cos>
    8530:	6a 83       	std	Y+2, r22	; 0x02
    8532:	7b 83       	std	Y+3, r23	; 0x03
    8534:	8c 83       	std	Y+4, r24	; 0x04
    8536:	9d 83       	std	Y+5, r25	; 0x05
    8538:	6e 81       	ldd	r22, Y+6	; 0x06
    853a:	7f 81       	ldd	r23, Y+7	; 0x07
    853c:	88 85       	ldd	r24, Y+8	; 0x08
    853e:	99 85       	ldd	r25, Y+9	; 0x09
    8540:	0e 94 14 7b 	call	0xf628	; 0xf628 <sin>
    8544:	4b 01       	movw	r8, r22
    8546:	5c 01       	movw	r10, r24
    8548:	20 e0       	ldi	r18, 0x00	; 0
    854a:	30 e0       	ldi	r19, 0x00	; 0
    854c:	40 e4       	ldi	r20, 0x40	; 64
    854e:	51 e4       	ldi	r21, 0x41	; 65
    8550:	6a 81       	ldd	r22, Y+2	; 0x02
    8552:	7b 81       	ldd	r23, Y+3	; 0x03
    8554:	8c 81       	ldd	r24, Y+4	; 0x04
    8556:	9d 81       	ldd	r25, Y+5	; 0x05
    8558:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    855c:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    8560:	71 2e       	mov	r7, r17
    8562:	76 1a       	sub	r7, r22
    8564:	20 e0       	ldi	r18, 0x00	; 0
    8566:	30 e0       	ldi	r19, 0x00	; 0
    8568:	40 e4       	ldi	r20, 0x40	; 64
    856a:	51 e4       	ldi	r21, 0x41	; 65
    856c:	c5 01       	movw	r24, r10
    856e:	b4 01       	movw	r22, r8
    8570:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    8574:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    8578:	46 e9       	ldi	r20, 0x96	; 150
    857a:	46 1b       	sub	r20, r22
    857c:	01 e0       	ldi	r16, 0x01	; 1
    857e:	27 2d       	mov	r18, r7
    8580:	64 e6       	ldi	r22, 0x64	; 100
    8582:	86 e9       	ldi	r24, 0x96	; 150
    8584:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    8588:	6a 85       	ldd	r22, Y+10	; 0x0a
    858a:	7b 85       	ldd	r23, Y+11	; 0x0b
    858c:	8c 85       	ldd	r24, Y+12	; 0x0c
    858e:	9d 85       	ldd	r25, Y+13	; 0x0d
    8590:	0e 94 da 78 	call	0xf1b4	; 0xf1b4 <cos>
    8594:	6a 83       	std	Y+2, r22	; 0x02
    8596:	7b 83       	std	Y+3, r23	; 0x03
    8598:	8c 83       	std	Y+4, r24	; 0x04
    859a:	9d 83       	std	Y+5, r25	; 0x05
    859c:	6a 85       	ldd	r22, Y+10	; 0x0a
    859e:	7b 85       	ldd	r23, Y+11	; 0x0b
    85a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    85a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    85a4:	0e 94 14 7b 	call	0xf628	; 0xf628 <sin>
    85a8:	4b 01       	movw	r8, r22
    85aa:	5c 01       	movw	r10, r24
    85ac:	20 e0       	ldi	r18, 0x00	; 0
    85ae:	30 e0       	ldi	r19, 0x00	; 0
    85b0:	40 e4       	ldi	r20, 0x40	; 64
    85b2:	51 e4       	ldi	r21, 0x41	; 65
    85b4:	6a 81       	ldd	r22, Y+2	; 0x02
    85b6:	7b 81       	ldd	r23, Y+3	; 0x03
    85b8:	8c 81       	ldd	r24, Y+4	; 0x04
    85ba:	9d 81       	ldd	r25, Y+5	; 0x05
    85bc:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    85c0:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    85c4:	71 2e       	mov	r7, r17
    85c6:	76 1a       	sub	r7, r22
    85c8:	20 e0       	ldi	r18, 0x00	; 0
    85ca:	30 e0       	ldi	r19, 0x00	; 0
    85cc:	40 e4       	ldi	r20, 0x40	; 64
    85ce:	51 e4       	ldi	r21, 0x41	; 65
    85d0:	c5 01       	movw	r24, r10
    85d2:	b4 01       	movw	r22, r8
    85d4:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    85d8:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    85dc:	44 eb       	ldi	r20, 0xB4	; 180
    85de:	46 0f       	add	r20, r22
    85e0:	27 2d       	mov	r18, r7
    85e2:	64 e6       	ldi	r22, 0x64	; 100
    85e4:	84 eb       	ldi	r24, 0xB4	; 180
    85e6:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    85ea:	6e 85       	ldd	r22, Y+14	; 0x0e
    85ec:	7f 85       	ldd	r23, Y+15	; 0x0f
    85ee:	88 89       	ldd	r24, Y+16	; 0x10
    85f0:	99 89       	ldd	r25, Y+17	; 0x11
    85f2:	0e 94 da 78 	call	0xf1b4	; 0xf1b4 <cos>
    85f6:	6a 83       	std	Y+2, r22	; 0x02
    85f8:	7b 83       	std	Y+3, r23	; 0x03
    85fa:	8c 83       	std	Y+4, r24	; 0x04
    85fc:	9d 83       	std	Y+5, r25	; 0x05
    85fe:	6e 85       	ldd	r22, Y+14	; 0x0e
    8600:	7f 85       	ldd	r23, Y+15	; 0x0f
    8602:	88 89       	ldd	r24, Y+16	; 0x10
    8604:	99 89       	ldd	r25, Y+17	; 0x11
    8606:	0e 94 14 7b 	call	0xf628	; 0xf628 <sin>
    860a:	4b 01       	movw	r8, r22
    860c:	5c 01       	movw	r10, r24
    860e:	20 e0       	ldi	r18, 0x00	; 0
    8610:	30 e0       	ldi	r19, 0x00	; 0
    8612:	40 e4       	ldi	r20, 0x40	; 64
    8614:	51 e4       	ldi	r21, 0x41	; 65
    8616:	6a 81       	ldd	r22, Y+2	; 0x02
    8618:	7b 81       	ldd	r23, Y+3	; 0x03
    861a:	8c 81       	ldd	r24, Y+4	; 0x04
    861c:	9d 81       	ldd	r25, Y+5	; 0x05
    861e:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    8622:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    8626:	71 2e       	mov	r7, r17
    8628:	76 1a       	sub	r7, r22
    862a:	20 e0       	ldi	r18, 0x00	; 0
    862c:	30 e0       	ldi	r19, 0x00	; 0
    862e:	40 e4       	ldi	r20, 0x40	; 64
    8630:	51 e4       	ldi	r21, 0x41	; 65
    8632:	c5 01       	movw	r24, r10
    8634:	b4 01       	movw	r22, r8
    8636:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    863a:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    863e:	46 2d       	mov	r20, r6
    8640:	46 1b       	sub	r20, r22
    8642:	27 2d       	mov	r18, r7
    8644:	64 e6       	ldi	r22, 0x64	; 100
    8646:	82 ed       	ldi	r24, 0xD2	; 210
    8648:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <task_twi2_lcd_line>
    864c:	2e 81       	ldd	r18, Y+6	; 0x06
    864e:	3f 81       	ldd	r19, Y+7	; 0x07
    8650:	48 85       	ldd	r20, Y+8	; 0x08
    8652:	59 85       	ldd	r21, Y+9	; 0x09
    8654:	20 93 e7 22 	sts	0x22E7, r18	; 0x8022e7 <s_rads_x.8216>
    8658:	30 93 e8 22 	sts	0x22E8, r19	; 0x8022e8 <s_rads_x.8216+0x1>
    865c:	40 93 e9 22 	sts	0x22E9, r20	; 0x8022e9 <s_rads_x.8216+0x2>
    8660:	50 93 ea 22 	sts	0x22EA, r21	; 0x8022ea <s_rads_x.8216+0x3>
    8664:	8a 85       	ldd	r24, Y+10	; 0x0a
    8666:	9b 85       	ldd	r25, Y+11	; 0x0b
    8668:	ac 85       	ldd	r26, Y+12	; 0x0c
    866a:	bd 85       	ldd	r27, Y+13	; 0x0d
    866c:	80 93 e3 22 	sts	0x22E3, r24	; 0x8022e3 <s_rads_y.8217>
    8670:	90 93 e4 22 	sts	0x22E4, r25	; 0x8022e4 <s_rads_y.8217+0x1>
    8674:	a0 93 e5 22 	sts	0x22E5, r26	; 0x8022e5 <s_rads_y.8217+0x2>
    8678:	b0 93 e6 22 	sts	0x22E6, r27	; 0x8022e6 <s_rads_y.8217+0x3>
    867c:	2e 85       	ldd	r18, Y+14	; 0x0e
    867e:	3f 85       	ldd	r19, Y+15	; 0x0f
    8680:	48 89       	ldd	r20, Y+16	; 0x10
    8682:	59 89       	ldd	r21, Y+17	; 0x11
    8684:	20 93 df 22 	sts	0x22DF, r18	; 0x8022df <s_rads_z.8218>
    8688:	30 93 e0 22 	sts	0x22E0, r19	; 0x8022e0 <s_rads_z.8218+0x1>
    868c:	40 93 e1 22 	sts	0x22E1, r20	; 0x8022e1 <s_rads_z.8218+0x2>
    8690:	50 93 e2 22 	sts	0x22E2, r21	; 0x8022e2 <s_rads_z.8218+0x3>
    8694:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <g_pitch_tone_mode>
    8698:	81 30       	cpi	r24, 0x01	; 1
    869a:	81 f5       	brne	.+96     	; 0x86fc <task_twi2_lcd__gyro_gfxgyro+0x496>
    869c:	d2 01       	movw	r26, r4
    869e:	c1 01       	movw	r24, r2
    86a0:	8c 0d       	add	r24, r12
    86a2:	9d 1d       	adc	r25, r13
    86a4:	ae 1d       	adc	r26, r14
    86a6:	bf 1d       	adc	r27, r15
    86a8:	2a 89       	ldd	r18, Y+18	; 0x12
    86aa:	3b 89       	ldd	r19, Y+19	; 0x13
    86ac:	4c 89       	ldd	r20, Y+20	; 0x14
    86ae:	5d 89       	ldd	r21, Y+21	; 0x15
    86b0:	82 0f       	add	r24, r18
    86b2:	93 1f       	adc	r25, r19
    86b4:	a4 1f       	adc	r26, r20
    86b6:	b5 1f       	adc	r27, r21
    86b8:	ac 01       	movw	r20, r24
    86ba:	bd 01       	movw	r22, r26
    86bc:	bb 23       	and	r27, r27
    86be:	3c f4       	brge	.+14     	; 0x86ce <task_twi2_lcd__gyro_gfxgyro+0x468>
    86c0:	44 27       	eor	r20, r20
    86c2:	55 27       	eor	r21, r21
    86c4:	ba 01       	movw	r22, r20
    86c6:	48 1b       	sub	r20, r24
    86c8:	59 0b       	sbc	r21, r25
    86ca:	6a 0b       	sbc	r22, r26
    86cc:	7b 0b       	sbc	r23, r27
    86ce:	cb 01       	movw	r24, r22
    86d0:	ba 01       	movw	r22, r20
    86d2:	61 39       	cpi	r22, 0x91	; 145
    86d4:	31 e0       	ldi	r19, 0x01	; 1
    86d6:	73 07       	cpc	r23, r19
    86d8:	81 05       	cpc	r24, r1
    86da:	91 05       	cpc	r25, r1
    86dc:	7c f0       	brlt	.+30     	; 0x86fc <task_twi2_lcd__gyro_gfxgyro+0x496>
    86de:	2c eb       	ldi	r18, 0xBC	; 188
    86e0:	32 e0       	ldi	r19, 0x02	; 2
    86e2:	40 e0       	ldi	r20, 0x00	; 0
    86e4:	50 e0       	ldi	r21, 0x00	; 0
    86e6:	0e 94 9c 7c 	call	0xf938	; 0xf938 <__divmodsi4>
    86ea:	6a e0       	ldi	r22, 0x0A	; 10
    86ec:	82 e1       	ldi	r24, 0x12	; 18
    86ee:	82 0f       	add	r24, r18
    86f0:	0e 94 41 33 	call	0x6682	; 0x6682 <twi2_set_beep>
    86f4:	8d e7       	ldi	r24, 0x7D	; 125
    86f6:	90 e0       	ldi	r25, 0x00	; 0
    86f8:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
    86fc:	65 96       	adiw	r28, 0x15	; 21
    86fe:	cd bf       	out	0x3d, r28	; 61
    8700:	de bf       	out	0x3e, r29	; 62
    8702:	df 91       	pop	r29
    8704:	cf 91       	pop	r28
    8706:	1f 91       	pop	r17
    8708:	0f 91       	pop	r16
    870a:	ff 90       	pop	r15
    870c:	ef 90       	pop	r14
    870e:	df 90       	pop	r13
    8710:	cf 90       	pop	r12
    8712:	bf 90       	pop	r11
    8714:	af 90       	pop	r10
    8716:	9f 90       	pop	r9
    8718:	8f 90       	pop	r8
    871a:	7f 90       	pop	r7
    871c:	6f 90       	pop	r6
    871e:	5f 90       	pop	r5
    8720:	4f 90       	pop	r4
    8722:	3f 90       	pop	r3
    8724:	2f 90       	pop	r2
    8726:	08 95       	ret

00008728 <task_twi2_lcd__gyro_beepvario>:
    8728:	cf 92       	push	r12
    872a:	df 92       	push	r13
    872c:	ef 92       	push	r14
    872e:	ff 92       	push	r15
    8730:	cf 93       	push	r28
    8732:	df 93       	push	r29
    8734:	1f 92       	push	r1
    8736:	cd b7       	in	r28, 0x3d	; 61
    8738:	de b7       	in	r29, 0x3e	; 62
    873a:	8f b7       	in	r24, 0x3f	; 63
    873c:	89 83       	std	Y+1, r24	; 0x01
    873e:	f8 94       	cli
    8740:	89 81       	ldd	r24, Y+1	; 0x01
    8742:	c0 90 06 27 	lds	r12, 0x2706	; 0x802706 <g_twi1_baro_p_100>
    8746:	d0 90 07 27 	lds	r13, 0x2707	; 0x802707 <g_twi1_baro_p_100+0x1>
    874a:	e0 90 08 27 	lds	r14, 0x2708	; 0x802708 <g_twi1_baro_p_100+0x2>
    874e:	f0 90 09 27 	lds	r15, 0x2709	; 0x802709 <g_twi1_baro_p_100+0x3>
    8752:	8f bf       	out	0x3f, r24	; 63
    8754:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <g_pitch_tone_mode>
    8758:	82 30       	cpi	r24, 0x02	; 2
    875a:	99 f5       	brne	.+102    	; 0x87c2 <task_twi2_lcd__gyro_beepvario+0x9a>
    875c:	40 91 06 27 	lds	r20, 0x2706	; 0x802706 <g_twi1_baro_p_100>
    8760:	50 91 07 27 	lds	r21, 0x2707	; 0x802707 <g_twi1_baro_p_100+0x1>
    8764:	60 91 08 27 	lds	r22, 0x2708	; 0x802708 <g_twi1_baro_p_100+0x2>
    8768:	70 91 09 27 	lds	r23, 0x2709	; 0x802709 <g_twi1_baro_p_100+0x3>
    876c:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_twi1_baro_p_100.8233>
    8770:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <s_twi1_baro_p_100.8233+0x1>
    8774:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <s_twi1_baro_p_100.8233+0x2>
    8778:	b0 91 09 20 	lds	r27, 0x2009	; 0x802009 <s_twi1_baro_p_100.8233+0x3>
    877c:	84 1b       	sub	r24, r20
    877e:	95 0b       	sbc	r25, r21
    8780:	a6 0b       	sbc	r26, r22
    8782:	b7 0b       	sbc	r27, r23
    8784:	8c 59       	subi	r24, 0x9C	; 156
    8786:	9f 4f       	sbci	r25, 0xFF	; 255
    8788:	af 4f       	sbci	r26, 0xFF	; 255
    878a:	bf 4f       	sbci	r27, 0xFF	; 255
    878c:	8a 30       	cpi	r24, 0x0A	; 10
    878e:	91 05       	cpc	r25, r1
    8790:	a1 05       	cpc	r26, r1
    8792:	b1 05       	cpc	r27, r1
    8794:	58 f0       	brcs	.+22     	; 0x87ac <task_twi2_lcd__gyro_beepvario+0x84>
    8796:	8f 3f       	cpi	r24, 0xFF	; 255
    8798:	91 05       	cpc	r25, r1
    879a:	a1 05       	cpc	r26, r1
    879c:	b1 05       	cpc	r27, r1
    879e:	51 f0       	breq	.+20     	; 0x87b4 <task_twi2_lcd__gyro_beepvario+0x8c>
    87a0:	48 f0       	brcs	.+18     	; 0x87b4 <task_twi2_lcd__gyro_beepvario+0x8c>
    87a2:	8f ef       	ldi	r24, 0xFF	; 255
    87a4:	90 e0       	ldi	r25, 0x00	; 0
    87a6:	a0 e0       	ldi	r26, 0x00	; 0
    87a8:	b0 e0       	ldi	r27, 0x00	; 0
    87aa:	04 c0       	rjmp	.+8      	; 0x87b4 <task_twi2_lcd__gyro_beepvario+0x8c>
    87ac:	8a e0       	ldi	r24, 0x0A	; 10
    87ae:	90 e0       	ldi	r25, 0x00	; 0
    87b0:	a0 e0       	ldi	r26, 0x00	; 0
    87b2:	b0 e0       	ldi	r27, 0x00	; 0
    87b4:	6a e0       	ldi	r22, 0x0A	; 10
    87b6:	0e 94 41 33 	call	0x6682	; 0x6682 <twi2_set_beep>
    87ba:	8d e7       	ldi	r24, 0x7D	; 125
    87bc:	90 e0       	ldi	r25, 0x00	; 0
    87be:	0e 94 79 6a 	call	0xd4f2	; 0xd4f2 <yield_ms>
    87c2:	c0 92 06 20 	sts	0x2006, r12	; 0x802006 <s_twi1_baro_p_100.8233>
    87c6:	d0 92 07 20 	sts	0x2007, r13	; 0x802007 <s_twi1_baro_p_100.8233+0x1>
    87ca:	e0 92 08 20 	sts	0x2008, r14	; 0x802008 <s_twi1_baro_p_100.8233+0x2>
    87ce:	f0 92 09 20 	sts	0x2009, r15	; 0x802009 <s_twi1_baro_p_100.8233+0x3>
    87d2:	0f 90       	pop	r0
    87d4:	df 91       	pop	r29
    87d6:	cf 91       	pop	r28
    87d8:	ff 90       	pop	r15
    87da:	ef 90       	pop	r14
    87dc:	df 90       	pop	r13
    87de:	cf 90       	pop	r12
    87e0:	08 95       	ret

000087e2 <task_twi2_lcd__baro>:
    87e2:	bf 92       	push	r11
    87e4:	cf 92       	push	r12
    87e6:	df 92       	push	r13
    87e8:	ef 92       	push	r14
    87ea:	ff 92       	push	r15
    87ec:	0f 93       	push	r16
    87ee:	1f 93       	push	r17
    87f0:	cf 93       	push	r28
    87f2:	df 93       	push	r29
    87f4:	1f 92       	push	r1
    87f6:	cd b7       	in	r28, 0x3d	; 61
    87f8:	de b7       	in	r29, 0x3e	; 62
    87fa:	b8 2e       	mov	r11, r24
    87fc:	8f b7       	in	r24, 0x3f	; 63
    87fe:	89 83       	std	Y+1, r24	; 0x01
    8800:	f8 94       	cli
    8802:	29 81       	ldd	r18, Y+1	; 0x01
    8804:	60 91 0a 27 	lds	r22, 0x270A	; 0x80270a <g_twi1_baro_temp_100>
    8808:	70 91 0b 27 	lds	r23, 0x270B	; 0x80270b <g_twi1_baro_temp_100+0x1>
    880c:	80 91 0c 27 	lds	r24, 0x270C	; 0x80270c <g_twi1_baro_temp_100+0x2>
    8810:	90 91 0d 27 	lds	r25, 0x270D	; 0x80270d <g_twi1_baro_temp_100+0x3>
    8814:	c0 90 06 27 	lds	r12, 0x2706	; 0x802706 <g_twi1_baro_p_100>
    8818:	d0 90 07 27 	lds	r13, 0x2707	; 0x802707 <g_twi1_baro_p_100+0x1>
    881c:	e0 90 08 27 	lds	r14, 0x2708	; 0x802708 <g_twi1_baro_p_100+0x2>
    8820:	f0 90 09 27 	lds	r15, 0x2709	; 0x802709 <g_twi1_baro_p_100+0x3>
    8824:	2f bf       	out	0x3f, r18	; 63
    8826:	00 91 db 22 	lds	r16, 0x22DB	; 0x8022db <s_twi1_baro_temp_100.8244>
    882a:	10 91 dc 22 	lds	r17, 0x22DC	; 0x8022dc <s_twi1_baro_temp_100.8244+0x1>
    882e:	20 91 dd 22 	lds	r18, 0x22DD	; 0x8022dd <s_twi1_baro_temp_100.8244+0x2>
    8832:	30 91 de 22 	lds	r19, 0x22DE	; 0x8022de <s_twi1_baro_temp_100.8244+0x3>
    8836:	60 17       	cp	r22, r16
    8838:	71 07       	cpc	r23, r17
    883a:	82 07       	cpc	r24, r18
    883c:	93 07       	cpc	r25, r19
    883e:	c1 f0       	breq	.+48     	; 0x8870 <task_twi2_lcd__baro+0x8e>
    8840:	60 93 db 22 	sts	0x22DB, r22	; 0x8022db <s_twi1_baro_temp_100.8244>
    8844:	70 93 dc 22 	sts	0x22DC, r23	; 0x8022dc <s_twi1_baro_temp_100.8244+0x1>
    8848:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <s_twi1_baro_temp_100.8244+0x2>
    884c:	90 93 de 22 	sts	0x22DE, r25	; 0x8022de <s_twi1_baro_temp_100.8244+0x3>
    8850:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    8854:	20 e0       	ldi	r18, 0x00	; 0
    8856:	30 e0       	ldi	r19, 0x00	; 0
    8858:	48 ec       	ldi	r20, 0xC8	; 200
    885a:	52 e4       	ldi	r21, 0x42	; 66
    885c:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    8860:	9b 01       	movw	r18, r22
    8862:	ac 01       	movw	r20, r24
    8864:	0a e9       	ldi	r16, 0x9A	; 154
    8866:	10 e3       	ldi	r17, 0x30	; 48
    8868:	6a e5       	ldi	r22, 0x5A	; 90
    886a:	8b 2d       	mov	r24, r11
    886c:	0e 94 43 35 	call	0x6a86	; 0x6a86 <task_twi2_lcd_print_format_float_P>
    8870:	80 91 d7 22 	lds	r24, 0x22D7	; 0x8022d7 <s_twi1_baro_p_100.8245>
    8874:	90 91 d8 22 	lds	r25, 0x22D8	; 0x8022d8 <s_twi1_baro_p_100.8245+0x1>
    8878:	a0 91 d9 22 	lds	r26, 0x22D9	; 0x8022d9 <s_twi1_baro_p_100.8245+0x2>
    887c:	b0 91 da 22 	lds	r27, 0x22DA	; 0x8022da <s_twi1_baro_p_100.8245+0x3>
    8880:	c8 16       	cp	r12, r24
    8882:	d9 06       	cpc	r13, r25
    8884:	ea 06       	cpc	r14, r26
    8886:	fb 06       	cpc	r15, r27
    8888:	d1 f0       	breq	.+52     	; 0x88be <task_twi2_lcd__baro+0xdc>
    888a:	c0 92 d7 22 	sts	0x22D7, r12	; 0x8022d7 <s_twi1_baro_p_100.8245>
    888e:	d0 92 d8 22 	sts	0x22D8, r13	; 0x8022d8 <s_twi1_baro_p_100.8245+0x1>
    8892:	e0 92 d9 22 	sts	0x22D9, r14	; 0x8022d9 <s_twi1_baro_p_100.8245+0x2>
    8896:	f0 92 da 22 	sts	0x22DA, r15	; 0x8022da <s_twi1_baro_p_100.8245+0x3>
    889a:	c7 01       	movw	r24, r14
    889c:	b6 01       	movw	r22, r12
    889e:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <__floatsisf>
    88a2:	20 e0       	ldi	r18, 0x00	; 0
    88a4:	30 e0       	ldi	r19, 0x00	; 0
    88a6:	48 ec       	ldi	r20, 0xC8	; 200
    88a8:	52 e4       	ldi	r21, 0x42	; 66
    88aa:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    88ae:	9b 01       	movw	r18, r22
    88b0:	ac 01       	movw	r20, r24
    88b2:	03 e9       	ldi	r16, 0x93	; 147
    88b4:	10 e3       	ldi	r17, 0x30	; 48
    88b6:	64 e6       	ldi	r22, 0x64	; 100
    88b8:	8b 2d       	mov	r24, r11
    88ba:	0e 94 43 35 	call	0x6a86	; 0x6a86 <task_twi2_lcd_print_format_float_P>
    88be:	0f 90       	pop	r0
    88c0:	df 91       	pop	r29
    88c2:	cf 91       	pop	r28
    88c4:	1f 91       	pop	r17
    88c6:	0f 91       	pop	r16
    88c8:	ff 90       	pop	r15
    88ca:	ef 90       	pop	r14
    88cc:	df 90       	pop	r13
    88ce:	cf 90       	pop	r12
    88d0:	bf 90       	pop	r11
    88d2:	08 95       	ret

000088d4 <task_twi>:
    88d4:	cf 92       	push	r12
    88d6:	df 92       	push	r13
    88d8:	ef 92       	push	r14
    88da:	0f 93       	push	r16
    88dc:	cf 93       	push	r28
    88de:	df 93       	push	r29
    88e0:	1f 92       	push	r1
    88e2:	cd b7       	in	r28, 0x3d	; 61
    88e4:	de b7       	in	r29, 0x3e	; 62
    88e6:	80 91 fb 26 	lds	r24, 0x26FB	; 0x8026fb <g_twi2_lcd_version>
    88ea:	81 31       	cpi	r24, 0x11	; 17
    88ec:	08 f4       	brcc	.+2      	; 0x88f0 <task_twi+0x1c>
    88ee:	4f c1       	rjmp	.+670    	; 0x8b8e <task_twi+0x2ba>
    88f0:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <g_twi2_lcd_repaint>
    88f4:	88 23       	and	r24, r24
    88f6:	09 f4       	brne	.+2      	; 0x88fa <task_twi+0x26>
    88f8:	b5 c0       	rjmp	.+362    	; 0x8a64 <task_twi+0x190>
    88fa:	10 92 fa 26 	sts	0x26FA, r1	; 0x8026fa <g_twi2_lcd_repaint>
    88fe:	0e 94 66 36 	call	0x6ccc	; 0x6ccc <task_twi2_lcd_header>
    8902:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    8906:	88 23       	and	r24, r24
    8908:	21 f1       	breq	.+72     	; 0x8952 <task_twi+0x7e>
    890a:	4c e4       	ldi	r20, 0x4C	; 76
    890c:	51 e2       	ldi	r21, 0x21	; 33
    890e:	64 e1       	ldi	r22, 0x14	; 20
    8910:	80 e0       	ldi	r24, 0x00	; 0
    8912:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8916:	46 e5       	ldi	r20, 0x56	; 86
    8918:	51 e2       	ldi	r21, 0x21	; 33
    891a:	6e e1       	ldi	r22, 0x1E	; 30
    891c:	82 e1       	ldi	r24, 0x12	; 18
    891e:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8922:	4d e5       	ldi	r20, 0x5D	; 93
    8924:	51 e2       	ldi	r21, 0x21	; 33
    8926:	68 e2       	ldi	r22, 0x28	; 40
    8928:	82 e1       	ldi	r24, 0x12	; 18
    892a:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    892e:	44 e6       	ldi	r20, 0x64	; 100
    8930:	51 e2       	ldi	r21, 0x21	; 33
    8932:	62 e3       	ldi	r22, 0x32	; 50
    8934:	80 e0       	ldi	r24, 0x00	; 0
    8936:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    893a:	4e e6       	ldi	r20, 0x6E	; 110
    893c:	51 e2       	ldi	r21, 0x21	; 33
    893e:	6c e3       	ldi	r22, 0x3C	; 60
    8940:	80 e0       	ldi	r24, 0x00	; 0
    8942:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8946:	48 e7       	ldi	r20, 0x78	; 120
    8948:	51 e2       	ldi	r21, 0x21	; 33
    894a:	66 e4       	ldi	r22, 0x46	; 70
    894c:	80 e0       	ldi	r24, 0x00	; 0
    894e:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8952:	42 e8       	ldi	r20, 0x82	; 130
    8954:	51 e2       	ldi	r21, 0x21	; 33
    8956:	6a e5       	ldi	r22, 0x5A	; 90
    8958:	80 e0       	ldi	r24, 0x00	; 0
    895a:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    895e:	4c e8       	ldi	r20, 0x8C	; 140
    8960:	51 e2       	ldi	r21, 0x21	; 33
    8962:	64 e6       	ldi	r22, 0x64	; 100
    8964:	80 e0       	ldi	r24, 0x00	; 0
    8966:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    896a:	46 e9       	ldi	r20, 0x96	; 150
    896c:	51 e2       	ldi	r21, 0x21	; 33
    896e:	6e e6       	ldi	r22, 0x6E	; 110
    8970:	80 e0       	ldi	r24, 0x00	; 0
    8972:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8976:	40 ea       	ldi	r20, 0xA0	; 160
    8978:	51 e2       	ldi	r21, 0x21	; 33
    897a:	68 e7       	ldi	r22, 0x78	; 120
    897c:	80 e0       	ldi	r24, 0x00	; 0
    897e:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8982:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    8986:	88 23       	and	r24, r24
    8988:	21 f1       	breq	.+72     	; 0x89d2 <task_twi+0xfe>
    898a:	4a ea       	ldi	r20, 0xAA	; 170
    898c:	51 e2       	ldi	r21, 0x21	; 33
    898e:	64 e1       	ldi	r22, 0x14	; 20
    8990:	80 e6       	ldi	r24, 0x60	; 96
    8992:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8996:	4c ea       	ldi	r20, 0xAC	; 172
    8998:	51 e2       	ldi	r21, 0x21	; 33
    899a:	6e e1       	ldi	r22, 0x1E	; 30
    899c:	80 e6       	ldi	r24, 0x60	; 96
    899e:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    89a2:	4c ea       	ldi	r20, 0xAC	; 172
    89a4:	51 e2       	ldi	r21, 0x21	; 33
    89a6:	68 e2       	ldi	r22, 0x28	; 40
    89a8:	80 e6       	ldi	r24, 0x60	; 96
    89aa:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    89ae:	4c ea       	ldi	r20, 0xAC	; 172
    89b0:	51 e2       	ldi	r21, 0x21	; 33
    89b2:	62 e3       	ldi	r22, 0x32	; 50
    89b4:	80 e6       	ldi	r24, 0x60	; 96
    89b6:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    89ba:	4c ea       	ldi	r20, 0xAC	; 172
    89bc:	51 e2       	ldi	r21, 0x21	; 33
    89be:	6c e3       	ldi	r22, 0x3C	; 60
    89c0:	80 e6       	ldi	r24, 0x60	; 96
    89c2:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    89c6:	4c ea       	ldi	r20, 0xAC	; 172
    89c8:	51 e2       	ldi	r21, 0x21	; 33
    89ca:	66 e4       	ldi	r22, 0x46	; 70
    89cc:	80 e6       	ldi	r24, 0x60	; 96
    89ce:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    89d2:	4a ea       	ldi	r20, 0xAA	; 170
    89d4:	51 e2       	ldi	r21, 0x21	; 33
    89d6:	6a e5       	ldi	r22, 0x5A	; 90
    89d8:	80 e6       	ldi	r24, 0x60	; 96
    89da:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    89de:	4e ea       	ldi	r20, 0xAE	; 174
    89e0:	51 e2       	ldi	r21, 0x21	; 33
    89e2:	64 e6       	ldi	r22, 0x64	; 100
    89e4:	8c e6       	ldi	r24, 0x6C	; 108
    89e6:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    89ea:	4a ea       	ldi	r20, 0xAA	; 170
    89ec:	51 e2       	ldi	r21, 0x21	; 33
    89ee:	6e e6       	ldi	r22, 0x6E	; 110
    89f0:	80 e6       	ldi	r24, 0x60	; 96
    89f2:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    89f6:	42 eb       	ldi	r20, 0xB2	; 178
    89f8:	51 e2       	ldi	r21, 0x21	; 33
    89fa:	68 e7       	ldi	r22, 0x78	; 120
    89fc:	80 e6       	ldi	r24, 0x60	; 96
    89fe:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8a02:	01 e0       	ldi	r16, 0x01	; 1
    8a04:	20 e0       	ldi	r18, 0x00	; 0
    8a06:	4e e0       	ldi	r20, 0x0E	; 14
    8a08:	64 e6       	ldi	r22, 0x64	; 100
    8a0a:	86 e9       	ldi	r24, 0x96	; 150
    8a0c:	0e 94 3e 36 	call	0x6c7c	; 0x6c7c <task_twi2_lcd_circ>
    8a10:	20 e0       	ldi	r18, 0x00	; 0
    8a12:	4e e0       	ldi	r20, 0x0E	; 14
    8a14:	64 e6       	ldi	r22, 0x64	; 100
    8a16:	84 eb       	ldi	r24, 0xB4	; 180
    8a18:	0e 94 3e 36 	call	0x6c7c	; 0x6c7c <task_twi2_lcd_circ>
    8a1c:	20 e0       	ldi	r18, 0x00	; 0
    8a1e:	4e e0       	ldi	r20, 0x0E	; 14
    8a20:	64 e6       	ldi	r22, 0x64	; 100
    8a22:	82 ed       	ldi	r24, 0xD2	; 210
    8a24:	0e 94 3e 36 	call	0x6c7c	; 0x6c7c <task_twi2_lcd_circ>
    8a28:	44 eb       	ldi	r20, 0xB4	; 180
    8a2a:	51 e2       	ldi	r21, 0x21	; 33
    8a2c:	66 e7       	ldi	r22, 0x76	; 118
    8a2e:	82 e9       	ldi	r24, 0x92	; 146
    8a30:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8a34:	47 eb       	ldi	r20, 0xB7	; 183
    8a36:	51 e2       	ldi	r21, 0x21	; 33
    8a38:	66 e7       	ldi	r22, 0x76	; 118
    8a3a:	80 eb       	ldi	r24, 0xB0	; 176
    8a3c:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8a40:	4a eb       	ldi	r20, 0xBA	; 186
    8a42:	51 e2       	ldi	r21, 0x21	; 33
    8a44:	66 e7       	ldi	r22, 0x76	; 118
    8a46:	8e ec       	ldi	r24, 0xCE	; 206
    8a48:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8a4c:	4d eb       	ldi	r20, 0xBD	; 189
    8a4e:	51 e2       	ldi	r21, 0x21	; 33
    8a50:	68 e4       	ldi	r22, 0x48	; 72
    8a52:	81 e7       	ldi	r24, 0x71	; 113
    8a54:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8a58:	47 ec       	ldi	r20, 0xC7	; 199
    8a5a:	51 e2       	ldi	r21, 0x21	; 33
    8a5c:	68 e4       	ldi	r22, 0x48	; 72
    8a5e:	84 ec       	ldi	r24, 0xC4	; 196
    8a60:	0e 94 81 35 	call	0x6b02	; 0x6b02 <task_twi2_lcd_str>
    8a64:	fd d8       	rcall	.-3590   	; 0x7c60 <task_twi2_lcd__gyro_gfxmag>
    8a66:	0d db       	rcall	.-2534   	; 0x8082 <task_twi2_lcd__gyro_gfxaccel>
    8a68:	fe db       	rcall	.-2052   	; 0x8266 <task_twi2_lcd__gyro_gfxgyro>
    8a6a:	5e de       	rcall	.-836    	; 0x8728 <task_twi2_lcd__gyro_beepvario>
    8a6c:	80 91 75 28 	lds	r24, 0x2875	; 0x802875 <g_1pps_last_new>
    8a70:	88 23       	and	r24, r24
    8a72:	09 f4       	brne	.+2      	; 0x8a76 <task_twi+0x1a2>
    8a74:	46 c0       	rjmp	.+140    	; 0x8b02 <task_twi+0x22e>
    8a76:	8f b7       	in	r24, 0x3f	; 63
    8a78:	89 83       	std	Y+1, r24	; 0x01
    8a7a:	f8 94       	cli
    8a7c:	89 81       	ldd	r24, Y+1	; 0x01
    8a7e:	c0 90 7e 28 	lds	r12, 0x287E	; 0x80287e <g_1pps_last_lo>
    8a82:	d0 90 7f 28 	lds	r13, 0x287F	; 0x80287f <g_1pps_last_lo+0x1>
    8a86:	10 92 75 28 	sts	0x2875, r1	; 0x802875 <g_1pps_last_new>
    8a8a:	8f bf       	out	0x3f, r24	; 63
    8a8c:	81 e0       	ldi	r24, 0x01	; 1
    8a8e:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <twi2_set_leds>
    8a92:	e1 2c       	mov	r14, r1
    8a94:	01 e0       	ldi	r16, 0x01	; 1
    8a96:	23 e7       	ldi	r18, 0x73	; 115
    8a98:	43 e0       	ldi	r20, 0x03	; 3
    8a9a:	6d e0       	ldi	r22, 0x0D	; 13
    8a9c:	8d ee       	ldi	r24, 0xED	; 237
    8a9e:	0e 94 10 36 	call	0x6c20	; 0x6c20 <task_twi2_lcd_rect>
    8aa2:	88 e9       	ldi	r24, 0x98	; 152
    8aa4:	c8 16       	cp	r12, r24
    8aa6:	8a e3       	ldi	r24, 0x3A	; 58
    8aa8:	d8 06       	cpc	r13, r24
    8aaa:	a8 f4       	brcc	.+42     	; 0x8ad6 <task_twi+0x202>
    8aac:	96 01       	movw	r18, r12
    8aae:	a9 e3       	ldi	r26, 0x39	; 57
    8ab0:	b0 e0       	ldi	r27, 0x00	; 0
    8ab2:	0e 94 c6 7c 	call	0xf98c	; 0xf98c <__umulhisi3>
    8ab6:	20 e3       	ldi	r18, 0x30	; 48
    8ab8:	35 e7       	ldi	r19, 0x75	; 117
    8aba:	40 e0       	ldi	r20, 0x00	; 0
    8abc:	50 e0       	ldi	r21, 0x00	; 0
    8abe:	0e 94 7a 7c 	call	0xf8f4	; 0xf8f4 <__udivmodsi4>
    8ac2:	66 e4       	ldi	r22, 0x46	; 70
    8ac4:	62 1b       	sub	r22, r18
    8ac6:	ee 24       	eor	r14, r14
    8ac8:	e3 94       	inc	r14
    8aca:	00 e0       	ldi	r16, 0x00	; 0
    8acc:	43 e0       	ldi	r20, 0x03	; 3
    8ace:	8d ee       	ldi	r24, 0xED	; 237
    8ad0:	0e 94 10 36 	call	0x6c20	; 0x6c20 <task_twi2_lcd_rect>
    8ad4:	16 c0       	rjmp	.+44     	; 0x8b02 <task_twi+0x22e>
    8ad6:	20 e3       	ldi	r18, 0x30	; 48
    8ad8:	35 e7       	ldi	r19, 0x75	; 117
    8ada:	2c 19       	sub	r18, r12
    8adc:	3d 09       	sbc	r19, r13
    8ade:	a9 e3       	ldi	r26, 0x39	; 57
    8ae0:	b0 e0       	ldi	r27, 0x00	; 0
    8ae2:	0e 94 c6 7c 	call	0xf98c	; 0xf98c <__umulhisi3>
    8ae6:	20 e3       	ldi	r18, 0x30	; 48
    8ae8:	35 e7       	ldi	r19, 0x75	; 117
    8aea:	40 e0       	ldi	r20, 0x00	; 0
    8aec:	50 e0       	ldi	r21, 0x00	; 0
    8aee:	0e 94 7a 7c 	call	0xf8f4	; 0xf8f4 <__udivmodsi4>
    8af2:	ee 24       	eor	r14, r14
    8af4:	e3 94       	inc	r14
    8af6:	00 e0       	ldi	r16, 0x00	; 0
    8af8:	43 e0       	ldi	r20, 0x03	; 3
    8afa:	66 e4       	ldi	r22, 0x46	; 70
    8afc:	8d ee       	ldi	r24, 0xED	; 237
    8afe:	0e 94 10 36 	call	0x6c20	; 0x6c20 <task_twi2_lcd_rect>
    8b02:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <s_lcd_entry_state.8252>
    8b06:	82 30       	cpi	r24, 0x02	; 2
    8b08:	29 f1       	breq	.+74     	; 0x8b54 <task_twi+0x280>
    8b0a:	28 f4       	brcc	.+10     	; 0x8b16 <task_twi+0x242>
    8b0c:	88 23       	and	r24, r24
    8b0e:	41 f0       	breq	.+16     	; 0x8b20 <task_twi+0x24c>
    8b10:	81 30       	cpi	r24, 0x01	; 1
    8b12:	99 f0       	breq	.+38     	; 0x8b3a <task_twi+0x266>
    8b14:	39 c0       	rjmp	.+114    	; 0x8b88 <task_twi+0x2b4>
    8b16:	83 30       	cpi	r24, 0x03	; 3
    8b18:	51 f1       	breq	.+84     	; 0x8b6e <task_twi+0x29a>
    8b1a:	84 30       	cpi	r24, 0x04	; 4
    8b1c:	81 f1       	breq	.+96     	; 0x8b7e <task_twi+0x2aa>
    8b1e:	34 c0       	rjmp	.+104    	; 0x8b88 <task_twi+0x2b4>
    8b20:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    8b24:	88 23       	and	r24, r24
    8b26:	19 f0       	breq	.+6      	; 0x8b2e <task_twi+0x25a>
    8b28:	8c e3       	ldi	r24, 0x3C	; 60
    8b2a:	0e 94 b6 3c 	call	0x796c	; 0x796c <task_twi2_lcd__cpu1>
    8b2e:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <s_lcd_entry_state.8252>
    8b32:	8f 5f       	subi	r24, 0xFF	; 255
    8b34:	80 93 d6 22 	sts	0x22D6, r24	; 0x8022d6 <s_lcd_entry_state.8252>
    8b38:	49 c0       	rjmp	.+146    	; 0x8bcc <task_twi+0x2f8>
    8b3a:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    8b3e:	88 23       	and	r24, r24
    8b40:	19 f0       	breq	.+6      	; 0x8b48 <task_twi+0x274>
    8b42:	8c e3       	ldi	r24, 0x3C	; 60
    8b44:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <task_twi2_lcd__cpu2>
    8b48:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <s_lcd_entry_state.8252>
    8b4c:	8f 5f       	subi	r24, 0xFF	; 255
    8b4e:	80 93 d6 22 	sts	0x22D6, r24	; 0x8022d6 <s_lcd_entry_state.8252>
    8b52:	3c c0       	rjmp	.+120    	; 0x8bcc <task_twi+0x2f8>
    8b54:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    8b58:	88 23       	and	r24, r24
    8b5a:	19 f0       	breq	.+6      	; 0x8b62 <task_twi+0x28e>
    8b5c:	8c e3       	ldi	r24, 0x3C	; 60
    8b5e:	0e 94 72 3d 	call	0x7ae4	; 0x7ae4 <task_twi2_lcd__cpu3>
    8b62:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <s_lcd_entry_state.8252>
    8b66:	8f 5f       	subi	r24, 0xFF	; 255
    8b68:	80 93 d6 22 	sts	0x22D6, r24	; 0x8022d6 <s_lcd_entry_state.8252>
    8b6c:	2f c0       	rjmp	.+94     	; 0x8bcc <task_twi+0x2f8>
    8b6e:	8c e3       	ldi	r24, 0x3C	; 60
    8b70:	38 de       	rcall	.-912    	; 0x87e2 <task_twi2_lcd__baro>
    8b72:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <s_lcd_entry_state.8252>
    8b76:	8f 5f       	subi	r24, 0xFF	; 255
    8b78:	80 93 d6 22 	sts	0x22D6, r24	; 0x8022d6 <s_lcd_entry_state.8252>
    8b7c:	27 c0       	rjmp	.+78     	; 0x8bcc <task_twi+0x2f8>
    8b7e:	8c e3       	ldi	r24, 0x3C	; 60
    8b80:	10 d8       	rcall	.-4064   	; 0x7ba2 <task_twi2_lcd__hygro>
    8b82:	10 92 d6 22 	sts	0x22D6, r1	; 0x8022d6 <s_lcd_entry_state.8252>
    8b86:	22 c0       	rjmp	.+68     	; 0x8bcc <task_twi+0x2f8>
    8b88:	10 92 d6 22 	sts	0x22D6, r1	; 0x8022d6 <s_lcd_entry_state.8252>
    8b8c:	1f c0       	rjmp	.+62     	; 0x8bcc <task_twi+0x2f8>
    8b8e:	80 31       	cpi	r24, 0x10	; 16
    8b90:	e9 f4       	brne	.+58     	; 0x8bcc <task_twi+0x2f8>
    8b92:	0e 94 a3 32 	call	0x6546	; 0x6546 <twi2_waitUntilReady>
    8b96:	e7 e1       	ldi	r30, 0x17	; 23
    8b98:	f0 e2       	ldi	r31, 0x20	; 32
    8b9a:	84 e8       	ldi	r24, 0x84	; 132
    8b9c:	81 83       	std	Z+1, r24	; 0x01
    8b9e:	af e2       	ldi	r26, 0x2F	; 47
    8ba0:	b5 e2       	ldi	r27, 0x25	; 37
    8ba2:	81 e0       	ldi	r24, 0x01	; 1
    8ba4:	8c 93       	st	X, r24
    8ba6:	80 e8       	ldi	r24, 0x80	; 128
    8ba8:	11 96       	adiw	r26, 0x01	; 1
    8baa:	8c 93       	st	X, r24
    8bac:	82 e0       	ldi	r24, 0x02	; 2
    8bae:	90 e0       	ldi	r25, 0x00	; 0
    8bb0:	80 87       	std	Z+8, r24	; 0x08
    8bb2:	91 87       	std	Z+9, r25	; 0x09
    8bb4:	40 e0       	ldi	r20, 0x00	; 0
    8bb6:	bf 01       	movw	r22, r30
    8bb8:	80 e8       	ldi	r24, 0x80	; 128
    8bba:	94 e0       	ldi	r25, 0x04	; 4
    8bbc:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <twi_master_transfer>
    8bc0:	69 e8       	ldi	r22, 0x89	; 137
    8bc2:	73 e1       	ldi	r23, 0x13	; 19
    8bc4:	80 e0       	ldi	r24, 0x00	; 0
    8bc6:	90 e0       	ldi	r25, 0x00	; 0
    8bc8:	0e 94 3d 2c 	call	0x587a	; 0x587a <__portable_avr_delay_cycles>
    8bcc:	80 e0       	ldi	r24, 0x00	; 0
    8bce:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <twi2_set_leds>
    8bd2:	0f 90       	pop	r0
    8bd4:	df 91       	pop	r29
    8bd6:	cf 91       	pop	r28
    8bd8:	0f 91       	pop	r16
    8bda:	ef 90       	pop	r14
    8bdc:	df 90       	pop	r13
    8bde:	cf 90       	pop	r12
    8be0:	08 95       	ret

00008be2 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    8be2:	08 95       	ret

00008be4 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    8be4:	cf 93       	push	r28
    8be6:	df 93       	push	r29
    8be8:	1f 92       	push	r1
    8bea:	cd b7       	in	r28, 0x3d	; 61
    8bec:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8bee:	2f b7       	in	r18, 0x3f	; 63
    8bf0:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    8bf2:	f8 94       	cli
	return flags;
    8bf4:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    8bf6:	28 2f       	mov	r18, r24
    8bf8:	39 2f       	mov	r19, r25
    8bfa:	21 15       	cp	r18, r1
    8bfc:	82 e0       	ldi	r24, 0x02	; 2
    8bfe:	38 07       	cpc	r19, r24
    8c00:	29 f4       	brne	.+10     	; 0x8c0c <adc_set_callback+0x28>
		adca_callback = callback;
    8c02:	60 93 cf 2d 	sts	0x2DCF, r22	; 0x802dcf <adca_callback>
    8c06:	70 93 d0 2d 	sts	0x2DD0, r23	; 0x802dd0 <adca_callback+0x1>
    8c0a:	07 c0       	rjmp	.+14     	; 0x8c1a <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    8c0c:	20 34       	cpi	r18, 0x40	; 64
    8c0e:	32 40       	sbci	r19, 0x02	; 2
    8c10:	21 f4       	brne	.+8      	; 0x8c1a <adc_set_callback+0x36>
		adcb_callback = callback;
    8c12:	60 93 cd 2d 	sts	0x2DCD, r22	; 0x802dcd <adcb_callback>
    8c16:	70 93 ce 2d 	sts	0x2DCE, r23	; 0x802dce <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8c1a:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    8c1c:	0f 90       	pop	r0
    8c1e:	df 91       	pop	r29
    8c20:	cf 91       	pop	r28
    8c22:	08 95       	ret

00008c24 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    8c24:	81 15       	cp	r24, r1
    8c26:	22 e0       	ldi	r18, 0x02	; 2
    8c28:	92 07       	cpc	r25, r18
    8c2a:	69 f4       	brne	.+26     	; 0x8c46 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    8c2c:	80 91 32 23 	lds	r24, 0x2332	; 0x802332 <adca_enable_count>
    8c30:	91 e0       	ldi	r25, 0x01	; 1
    8c32:	98 0f       	add	r25, r24
    8c34:	90 93 32 23 	sts	0x2332, r25	; 0x802332 <adca_enable_count>
    8c38:	81 11       	cpse	r24, r1
    8c3a:	14 c0       	rjmp	.+40     	; 0x8c64 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    8c3c:	62 e0       	ldi	r22, 0x02	; 2
    8c3e:	81 e0       	ldi	r24, 0x01	; 1
    8c40:	0c 94 31 6c 	jmp	0xd862	; 0xd862 <sysclk_enable_module>
    8c44:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    8c46:	80 34       	cpi	r24, 0x40	; 64
    8c48:	92 40       	sbci	r25, 0x02	; 2
    8c4a:	61 f4       	brne	.+24     	; 0x8c64 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    8c4c:	80 91 31 23 	lds	r24, 0x2331	; 0x802331 <adcb_enable_count>
    8c50:	91 e0       	ldi	r25, 0x01	; 1
    8c52:	98 0f       	add	r25, r24
    8c54:	90 93 31 23 	sts	0x2331, r25	; 0x802331 <adcb_enable_count>
    8c58:	81 11       	cpse	r24, r1
    8c5a:	04 c0       	rjmp	.+8      	; 0x8c64 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    8c5c:	62 e0       	ldi	r22, 0x02	; 2
    8c5e:	82 e0       	ldi	r24, 0x02	; 2
    8c60:	0c 94 31 6c 	jmp	0xd862	; 0xd862 <sysclk_enable_module>
    8c64:	08 95       	ret

00008c66 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    8c66:	81 15       	cp	r24, r1
    8c68:	22 e0       	ldi	r18, 0x02	; 2
    8c6a:	92 07       	cpc	r25, r18
    8c6c:	61 f4       	brne	.+24     	; 0x8c86 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    8c6e:	80 91 32 23 	lds	r24, 0x2332	; 0x802332 <adca_enable_count>
    8c72:	81 50       	subi	r24, 0x01	; 1
    8c74:	80 93 32 23 	sts	0x2332, r24	; 0x802332 <adca_enable_count>
    8c78:	81 11       	cpse	r24, r1
    8c7a:	13 c0       	rjmp	.+38     	; 0x8ca2 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    8c7c:	62 e0       	ldi	r22, 0x02	; 2
    8c7e:	81 e0       	ldi	r24, 0x01	; 1
    8c80:	0c 94 47 6c 	jmp	0xd88e	; 0xd88e <sysclk_disable_module>
    8c84:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    8c86:	80 34       	cpi	r24, 0x40	; 64
    8c88:	92 40       	sbci	r25, 0x02	; 2
    8c8a:	59 f4       	brne	.+22     	; 0x8ca2 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    8c8c:	80 91 31 23 	lds	r24, 0x2331	; 0x802331 <adcb_enable_count>
    8c90:	81 50       	subi	r24, 0x01	; 1
    8c92:	80 93 31 23 	sts	0x2331, r24	; 0x802331 <adcb_enable_count>
    8c96:	81 11       	cpse	r24, r1
    8c98:	04 c0       	rjmp	.+8      	; 0x8ca2 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    8c9a:	62 e0       	ldi	r22, 0x02	; 2
    8c9c:	82 e0       	ldi	r24, 0x02	; 2
    8c9e:	0c 94 47 6c 	jmp	0xd88e	; 0xd88e <sysclk_disable_module>
    8ca2:	08 95       	ret

00008ca4 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    8ca4:	ef 92       	push	r14
    8ca6:	ff 92       	push	r15
    8ca8:	1f 93       	push	r17
    8caa:	cf 93       	push	r28
    8cac:	df 93       	push	r29
    8cae:	1f 92       	push	r1
    8cb0:	1f 92       	push	r1
    8cb2:	cd b7       	in	r28, 0x3d	; 61
    8cb4:	de b7       	in	r29, 0x3e	; 62
    8cb6:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8cb8:	8f b7       	in	r24, 0x3f	; 63
    8cba:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    8cbc:	f8 94       	cli
	return flags;
    8cbe:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    8cc0:	c7 01       	movw	r24, r14
    8cc2:	b0 df       	rcall	.-160    	; 0x8c24 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    8cc4:	f7 01       	movw	r30, r14
    8cc6:	80 81       	ld	r24, Z
    8cc8:	81 60       	ori	r24, 0x01	; 1
    8cca:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8ccc:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    8cce:	80 91 68 2e 	lds	r24, 0x2E68	; 0x802e68 <sleepmgr_locks+0x1>
    8cd2:	8f 3f       	cpi	r24, 0xFF	; 255
    8cd4:	09 f4       	brne	.+2      	; 0x8cd8 <adc_enable+0x34>
    8cd6:	ff cf       	rjmp	.-2      	; 0x8cd6 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8cd8:	8f b7       	in	r24, 0x3f	; 63
    8cda:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    8cdc:	f8 94       	cli
	return flags;
    8cde:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    8ce0:	e7 e6       	ldi	r30, 0x67	; 103
    8ce2:	fe e2       	ldi	r31, 0x2E	; 46
    8ce4:	81 81       	ldd	r24, Z+1	; 0x01
    8ce6:	8f 5f       	subi	r24, 0xFF	; 255
    8ce8:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8cea:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    8cec:	0f 90       	pop	r0
    8cee:	0f 90       	pop	r0
    8cf0:	df 91       	pop	r29
    8cf2:	cf 91       	pop	r28
    8cf4:	1f 91       	pop	r17
    8cf6:	ff 90       	pop	r15
    8cf8:	ef 90       	pop	r14
    8cfa:	08 95       	ret

00008cfc <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
    8cfc:	1f 93       	push	r17
    8cfe:	cf 93       	push	r28
    8d00:	df 93       	push	r29
    8d02:	1f 92       	push	r1
    8d04:	1f 92       	push	r1
    8d06:	cd b7       	in	r28, 0x3d	; 61
    8d08:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8d0a:	2f b7       	in	r18, 0x3f	; 63
    8d0c:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    8d0e:	f8 94       	cli
	return flags;
    8d10:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
    8d12:	fc 01       	movw	r30, r24
    8d14:	20 81       	ld	r18, Z
    8d16:	2e 7f       	andi	r18, 0xFE	; 254
	adc_disable_clock(adc);
    8d18:	20 83       	st	Z, r18
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8d1a:	a5 df       	rcall	.-182    	; 0x8c66 <adc_disable_clock>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    8d1c:	1f bf       	out	0x3f, r17	; 63
    8d1e:	80 91 68 2e 	lds	r24, 0x2E68	; 0x802e68 <sleepmgr_locks+0x1>
    8d22:	81 11       	cpse	r24, r1
    8d24:	01 c0       	rjmp	.+2      	; 0x8d28 <adc_disable+0x2c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8d26:	ff cf       	rjmp	.-2      	; 0x8d26 <adc_disable+0x2a>
    8d28:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    8d2a:	8a 83       	std	Y+2, r24	; 0x02
	return flags;
    8d2c:	f8 94       	cli
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    8d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    8d30:	e7 e6       	ldi	r30, 0x67	; 103
    8d32:	fe e2       	ldi	r31, 0x2E	; 46
    8d34:	81 81       	ldd	r24, Z+1	; 0x01
    8d36:	81 50       	subi	r24, 0x01	; 1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8d38:	81 83       	std	Z+1, r24	; 0x01
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    8d3a:	9f bf       	out	0x3f, r25	; 63
    8d3c:	0f 90       	pop	r0
    8d3e:	0f 90       	pop	r0
    8d40:	df 91       	pop	r29
    8d42:	cf 91       	pop	r28
    8d44:	1f 91       	pop	r17
    8d46:	08 95       	ret

00008d48 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    8d48:	1f 92       	push	r1
    8d4a:	0f 92       	push	r0
    8d4c:	0f b6       	in	r0, 0x3f	; 63
    8d4e:	0f 92       	push	r0
    8d50:	11 24       	eor	r1, r1
    8d52:	0b b6       	in	r0, 0x3b	; 59
    8d54:	0f 92       	push	r0
    8d56:	2f 93       	push	r18
    8d58:	3f 93       	push	r19
    8d5a:	4f 93       	push	r20
    8d5c:	5f 93       	push	r21
    8d5e:	6f 93       	push	r22
    8d60:	7f 93       	push	r23
    8d62:	8f 93       	push	r24
    8d64:	9f 93       	push	r25
    8d66:	af 93       	push	r26
    8d68:	bf 93       	push	r27
    8d6a:	ef 93       	push	r30
    8d6c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    8d6e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    8d72:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    8d76:	e0 91 cf 2d 	lds	r30, 0x2DCF	; 0x802dcf <adca_callback>
    8d7a:	f0 91 d0 2d 	lds	r31, 0x2DD0	; 0x802dd0 <adca_callback+0x1>
    8d7e:	61 e0       	ldi	r22, 0x01	; 1
    8d80:	80 e0       	ldi	r24, 0x00	; 0
    8d82:	92 e0       	ldi	r25, 0x02	; 2
    8d84:	19 95       	eicall
}
    8d86:	ff 91       	pop	r31
    8d88:	ef 91       	pop	r30
    8d8a:	bf 91       	pop	r27
    8d8c:	af 91       	pop	r26
    8d8e:	9f 91       	pop	r25
    8d90:	8f 91       	pop	r24
    8d92:	7f 91       	pop	r23
    8d94:	6f 91       	pop	r22
    8d96:	5f 91       	pop	r21
    8d98:	4f 91       	pop	r20
    8d9a:	3f 91       	pop	r19
    8d9c:	2f 91       	pop	r18
    8d9e:	0f 90       	pop	r0
    8da0:	0b be       	out	0x3b, r0	; 59
    8da2:	0f 90       	pop	r0
    8da4:	0f be       	out	0x3f, r0	; 63
    8da6:	0f 90       	pop	r0
    8da8:	1f 90       	pop	r1
    8daa:	18 95       	reti

00008dac <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    8dac:	1f 92       	push	r1
    8dae:	0f 92       	push	r0
    8db0:	0f b6       	in	r0, 0x3f	; 63
    8db2:	0f 92       	push	r0
    8db4:	11 24       	eor	r1, r1
    8db6:	0b b6       	in	r0, 0x3b	; 59
    8db8:	0f 92       	push	r0
    8dba:	2f 93       	push	r18
    8dbc:	3f 93       	push	r19
    8dbe:	4f 93       	push	r20
    8dc0:	5f 93       	push	r21
    8dc2:	6f 93       	push	r22
    8dc4:	7f 93       	push	r23
    8dc6:	8f 93       	push	r24
    8dc8:	9f 93       	push	r25
    8dca:	af 93       	push	r26
    8dcc:	bf 93       	push	r27
    8dce:	ef 93       	push	r30
    8dd0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    8dd2:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    8dd6:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    8dda:	e0 91 cf 2d 	lds	r30, 0x2DCF	; 0x802dcf <adca_callback>
    8dde:	f0 91 d0 2d 	lds	r31, 0x2DD0	; 0x802dd0 <adca_callback+0x1>
    8de2:	62 e0       	ldi	r22, 0x02	; 2
    8de4:	80 e0       	ldi	r24, 0x00	; 0
    8de6:	92 e0       	ldi	r25, 0x02	; 2
    8de8:	19 95       	eicall
}
    8dea:	ff 91       	pop	r31
    8dec:	ef 91       	pop	r30
    8dee:	bf 91       	pop	r27
    8df0:	af 91       	pop	r26
    8df2:	9f 91       	pop	r25
    8df4:	8f 91       	pop	r24
    8df6:	7f 91       	pop	r23
    8df8:	6f 91       	pop	r22
    8dfa:	5f 91       	pop	r21
    8dfc:	4f 91       	pop	r20
    8dfe:	3f 91       	pop	r19
    8e00:	2f 91       	pop	r18
    8e02:	0f 90       	pop	r0
    8e04:	0b be       	out	0x3b, r0	; 59
    8e06:	0f 90       	pop	r0
    8e08:	0f be       	out	0x3f, r0	; 63
    8e0a:	0f 90       	pop	r0
    8e0c:	1f 90       	pop	r1
    8e0e:	18 95       	reti

00008e10 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    8e10:	1f 92       	push	r1
    8e12:	0f 92       	push	r0
    8e14:	0f b6       	in	r0, 0x3f	; 63
    8e16:	0f 92       	push	r0
    8e18:	11 24       	eor	r1, r1
    8e1a:	0b b6       	in	r0, 0x3b	; 59
    8e1c:	0f 92       	push	r0
    8e1e:	2f 93       	push	r18
    8e20:	3f 93       	push	r19
    8e22:	4f 93       	push	r20
    8e24:	5f 93       	push	r21
    8e26:	6f 93       	push	r22
    8e28:	7f 93       	push	r23
    8e2a:	8f 93       	push	r24
    8e2c:	9f 93       	push	r25
    8e2e:	af 93       	push	r26
    8e30:	bf 93       	push	r27
    8e32:	ef 93       	push	r30
    8e34:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    8e36:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    8e3a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    8e3e:	e0 91 cf 2d 	lds	r30, 0x2DCF	; 0x802dcf <adca_callback>
    8e42:	f0 91 d0 2d 	lds	r31, 0x2DD0	; 0x802dd0 <adca_callback+0x1>
    8e46:	64 e0       	ldi	r22, 0x04	; 4
    8e48:	80 e0       	ldi	r24, 0x00	; 0
    8e4a:	92 e0       	ldi	r25, 0x02	; 2
    8e4c:	19 95       	eicall
}
    8e4e:	ff 91       	pop	r31
    8e50:	ef 91       	pop	r30
    8e52:	bf 91       	pop	r27
    8e54:	af 91       	pop	r26
    8e56:	9f 91       	pop	r25
    8e58:	8f 91       	pop	r24
    8e5a:	7f 91       	pop	r23
    8e5c:	6f 91       	pop	r22
    8e5e:	5f 91       	pop	r21
    8e60:	4f 91       	pop	r20
    8e62:	3f 91       	pop	r19
    8e64:	2f 91       	pop	r18
    8e66:	0f 90       	pop	r0
    8e68:	0b be       	out	0x3b, r0	; 59
    8e6a:	0f 90       	pop	r0
    8e6c:	0f be       	out	0x3f, r0	; 63
    8e6e:	0f 90       	pop	r0
    8e70:	1f 90       	pop	r1
    8e72:	18 95       	reti

00008e74 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    8e74:	1f 92       	push	r1
    8e76:	0f 92       	push	r0
    8e78:	0f b6       	in	r0, 0x3f	; 63
    8e7a:	0f 92       	push	r0
    8e7c:	11 24       	eor	r1, r1
    8e7e:	0b b6       	in	r0, 0x3b	; 59
    8e80:	0f 92       	push	r0
    8e82:	2f 93       	push	r18
    8e84:	3f 93       	push	r19
    8e86:	4f 93       	push	r20
    8e88:	5f 93       	push	r21
    8e8a:	6f 93       	push	r22
    8e8c:	7f 93       	push	r23
    8e8e:	8f 93       	push	r24
    8e90:	9f 93       	push	r25
    8e92:	af 93       	push	r26
    8e94:	bf 93       	push	r27
    8e96:	ef 93       	push	r30
    8e98:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    8e9a:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    8e9e:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    8ea2:	e0 91 cf 2d 	lds	r30, 0x2DCF	; 0x802dcf <adca_callback>
    8ea6:	f0 91 d0 2d 	lds	r31, 0x2DD0	; 0x802dd0 <adca_callback+0x1>
    8eaa:	68 e0       	ldi	r22, 0x08	; 8
    8eac:	80 e0       	ldi	r24, 0x00	; 0
    8eae:	92 e0       	ldi	r25, 0x02	; 2
    8eb0:	19 95       	eicall
}
    8eb2:	ff 91       	pop	r31
    8eb4:	ef 91       	pop	r30
    8eb6:	bf 91       	pop	r27
    8eb8:	af 91       	pop	r26
    8eba:	9f 91       	pop	r25
    8ebc:	8f 91       	pop	r24
    8ebe:	7f 91       	pop	r23
    8ec0:	6f 91       	pop	r22
    8ec2:	5f 91       	pop	r21
    8ec4:	4f 91       	pop	r20
    8ec6:	3f 91       	pop	r19
    8ec8:	2f 91       	pop	r18
    8eca:	0f 90       	pop	r0
    8ecc:	0b be       	out	0x3b, r0	; 59
    8ece:	0f 90       	pop	r0
    8ed0:	0f be       	out	0x3f, r0	; 63
    8ed2:	0f 90       	pop	r0
    8ed4:	1f 90       	pop	r1
    8ed6:	18 95       	reti

00008ed8 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    8ed8:	1f 92       	push	r1
    8eda:	0f 92       	push	r0
    8edc:	0f b6       	in	r0, 0x3f	; 63
    8ede:	0f 92       	push	r0
    8ee0:	11 24       	eor	r1, r1
    8ee2:	0b b6       	in	r0, 0x3b	; 59
    8ee4:	0f 92       	push	r0
    8ee6:	2f 93       	push	r18
    8ee8:	3f 93       	push	r19
    8eea:	4f 93       	push	r20
    8eec:	5f 93       	push	r21
    8eee:	6f 93       	push	r22
    8ef0:	7f 93       	push	r23
    8ef2:	8f 93       	push	r24
    8ef4:	9f 93       	push	r25
    8ef6:	af 93       	push	r26
    8ef8:	bf 93       	push	r27
    8efa:	ef 93       	push	r30
    8efc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    8efe:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    8f02:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    8f06:	e0 91 cd 2d 	lds	r30, 0x2DCD	; 0x802dcd <adcb_callback>
    8f0a:	f0 91 ce 2d 	lds	r31, 0x2DCE	; 0x802dce <adcb_callback+0x1>
    8f0e:	61 e0       	ldi	r22, 0x01	; 1
    8f10:	80 e4       	ldi	r24, 0x40	; 64
    8f12:	92 e0       	ldi	r25, 0x02	; 2
    8f14:	19 95       	eicall
}
    8f16:	ff 91       	pop	r31
    8f18:	ef 91       	pop	r30
    8f1a:	bf 91       	pop	r27
    8f1c:	af 91       	pop	r26
    8f1e:	9f 91       	pop	r25
    8f20:	8f 91       	pop	r24
    8f22:	7f 91       	pop	r23
    8f24:	6f 91       	pop	r22
    8f26:	5f 91       	pop	r21
    8f28:	4f 91       	pop	r20
    8f2a:	3f 91       	pop	r19
    8f2c:	2f 91       	pop	r18
    8f2e:	0f 90       	pop	r0
    8f30:	0b be       	out	0x3b, r0	; 59
    8f32:	0f 90       	pop	r0
    8f34:	0f be       	out	0x3f, r0	; 63
    8f36:	0f 90       	pop	r0
    8f38:	1f 90       	pop	r1
    8f3a:	18 95       	reti

00008f3c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    8f3c:	1f 92       	push	r1
    8f3e:	0f 92       	push	r0
    8f40:	0f b6       	in	r0, 0x3f	; 63
    8f42:	0f 92       	push	r0
    8f44:	11 24       	eor	r1, r1
    8f46:	0b b6       	in	r0, 0x3b	; 59
    8f48:	0f 92       	push	r0
    8f4a:	2f 93       	push	r18
    8f4c:	3f 93       	push	r19
    8f4e:	4f 93       	push	r20
    8f50:	5f 93       	push	r21
    8f52:	6f 93       	push	r22
    8f54:	7f 93       	push	r23
    8f56:	8f 93       	push	r24
    8f58:	9f 93       	push	r25
    8f5a:	af 93       	push	r26
    8f5c:	bf 93       	push	r27
    8f5e:	ef 93       	push	r30
    8f60:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    8f62:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    8f66:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    8f6a:	e0 91 cd 2d 	lds	r30, 0x2DCD	; 0x802dcd <adcb_callback>
    8f6e:	f0 91 ce 2d 	lds	r31, 0x2DCE	; 0x802dce <adcb_callback+0x1>
    8f72:	62 e0       	ldi	r22, 0x02	; 2
    8f74:	80 e4       	ldi	r24, 0x40	; 64
    8f76:	92 e0       	ldi	r25, 0x02	; 2
    8f78:	19 95       	eicall
}
    8f7a:	ff 91       	pop	r31
    8f7c:	ef 91       	pop	r30
    8f7e:	bf 91       	pop	r27
    8f80:	af 91       	pop	r26
    8f82:	9f 91       	pop	r25
    8f84:	8f 91       	pop	r24
    8f86:	7f 91       	pop	r23
    8f88:	6f 91       	pop	r22
    8f8a:	5f 91       	pop	r21
    8f8c:	4f 91       	pop	r20
    8f8e:	3f 91       	pop	r19
    8f90:	2f 91       	pop	r18
    8f92:	0f 90       	pop	r0
    8f94:	0b be       	out	0x3b, r0	; 59
    8f96:	0f 90       	pop	r0
    8f98:	0f be       	out	0x3f, r0	; 63
    8f9a:	0f 90       	pop	r0
    8f9c:	1f 90       	pop	r1
    8f9e:	18 95       	reti

00008fa0 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    8fa0:	1f 92       	push	r1
    8fa2:	0f 92       	push	r0
    8fa4:	0f b6       	in	r0, 0x3f	; 63
    8fa6:	0f 92       	push	r0
    8fa8:	11 24       	eor	r1, r1
    8faa:	0b b6       	in	r0, 0x3b	; 59
    8fac:	0f 92       	push	r0
    8fae:	2f 93       	push	r18
    8fb0:	3f 93       	push	r19
    8fb2:	4f 93       	push	r20
    8fb4:	5f 93       	push	r21
    8fb6:	6f 93       	push	r22
    8fb8:	7f 93       	push	r23
    8fba:	8f 93       	push	r24
    8fbc:	9f 93       	push	r25
    8fbe:	af 93       	push	r26
    8fc0:	bf 93       	push	r27
    8fc2:	ef 93       	push	r30
    8fc4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    8fc6:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    8fca:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    8fce:	e0 91 cd 2d 	lds	r30, 0x2DCD	; 0x802dcd <adcb_callback>
    8fd2:	f0 91 ce 2d 	lds	r31, 0x2DCE	; 0x802dce <adcb_callback+0x1>
    8fd6:	64 e0       	ldi	r22, 0x04	; 4
    8fd8:	80 e4       	ldi	r24, 0x40	; 64
    8fda:	92 e0       	ldi	r25, 0x02	; 2
    8fdc:	19 95       	eicall
}
    8fde:	ff 91       	pop	r31
    8fe0:	ef 91       	pop	r30
    8fe2:	bf 91       	pop	r27
    8fe4:	af 91       	pop	r26
    8fe6:	9f 91       	pop	r25
    8fe8:	8f 91       	pop	r24
    8fea:	7f 91       	pop	r23
    8fec:	6f 91       	pop	r22
    8fee:	5f 91       	pop	r21
    8ff0:	4f 91       	pop	r20
    8ff2:	3f 91       	pop	r19
    8ff4:	2f 91       	pop	r18
    8ff6:	0f 90       	pop	r0
    8ff8:	0b be       	out	0x3b, r0	; 59
    8ffa:	0f 90       	pop	r0
    8ffc:	0f be       	out	0x3f, r0	; 63
    8ffe:	0f 90       	pop	r0
    9000:	1f 90       	pop	r1
    9002:	18 95       	reti

00009004 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    9004:	1f 92       	push	r1
    9006:	0f 92       	push	r0
    9008:	0f b6       	in	r0, 0x3f	; 63
    900a:	0f 92       	push	r0
    900c:	11 24       	eor	r1, r1
    900e:	0b b6       	in	r0, 0x3b	; 59
    9010:	0f 92       	push	r0
    9012:	2f 93       	push	r18
    9014:	3f 93       	push	r19
    9016:	4f 93       	push	r20
    9018:	5f 93       	push	r21
    901a:	6f 93       	push	r22
    901c:	7f 93       	push	r23
    901e:	8f 93       	push	r24
    9020:	9f 93       	push	r25
    9022:	af 93       	push	r26
    9024:	bf 93       	push	r27
    9026:	ef 93       	push	r30
    9028:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    902a:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    902e:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    9032:	e0 91 cd 2d 	lds	r30, 0x2DCD	; 0x802dcd <adcb_callback>
    9036:	f0 91 ce 2d 	lds	r31, 0x2DCE	; 0x802dce <adcb_callback+0x1>
    903a:	68 e0       	ldi	r22, 0x08	; 8
    903c:	80 e4       	ldi	r24, 0x40	; 64
    903e:	92 e0       	ldi	r25, 0x02	; 2
    9040:	19 95       	eicall
}
    9042:	ff 91       	pop	r31
    9044:	ef 91       	pop	r30
    9046:	bf 91       	pop	r27
    9048:	af 91       	pop	r26
    904a:	9f 91       	pop	r25
    904c:	8f 91       	pop	r24
    904e:	7f 91       	pop	r23
    9050:	6f 91       	pop	r22
    9052:	5f 91       	pop	r21
    9054:	4f 91       	pop	r20
    9056:	3f 91       	pop	r19
    9058:	2f 91       	pop	r18
    905a:	0f 90       	pop	r0
    905c:	0b be       	out	0x3b, r0	; 59
    905e:	0f 90       	pop	r0
    9060:	0f be       	out	0x3f, r0	; 63
    9062:	0f 90       	pop	r0
    9064:	1f 90       	pop	r1
    9066:	18 95       	reti

00009068 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    9068:	bf 92       	push	r11
    906a:	cf 92       	push	r12
    906c:	df 92       	push	r13
    906e:	ef 92       	push	r14
    9070:	ff 92       	push	r15
    9072:	0f 93       	push	r16
    9074:	1f 93       	push	r17
    9076:	cf 93       	push	r28
    9078:	df 93       	push	r29
    907a:	1f 92       	push	r1
    907c:	cd b7       	in	r28, 0x3d	; 61
    907e:	de b7       	in	r29, 0x3e	; 62
    9080:	8c 01       	movw	r16, r24
    9082:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    9084:	81 15       	cp	r24, r1
    9086:	22 e0       	ldi	r18, 0x02	; 2
    9088:	92 07       	cpc	r25, r18
    908a:	81 f4       	brne	.+32     	; 0x90ac <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    908c:	61 e2       	ldi	r22, 0x21	; 33
    908e:	70 e0       	ldi	r23, 0x00	; 0
    9090:	82 e0       	ldi	r24, 0x02	; 2
    9092:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    9096:	c8 2e       	mov	r12, r24
    9098:	d1 2c       	mov	r13, r1
    909a:	60 e2       	ldi	r22, 0x20	; 32
    909c:	70 e0       	ldi	r23, 0x00	; 0
    909e:	82 e0       	ldi	r24, 0x02	; 2
    90a0:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    90a4:	dc 2c       	mov	r13, r12
    90a6:	cc 24       	eor	r12, r12
    90a8:	c8 2a       	or	r12, r24
    90aa:	12 c0       	rjmp	.+36     	; 0x90d0 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    90ac:	80 34       	cpi	r24, 0x40	; 64
    90ae:	92 40       	sbci	r25, 0x02	; 2
    90b0:	d1 f5       	brne	.+116    	; 0x9126 <adc_write_configuration+0xbe>
    90b2:	65 e2       	ldi	r22, 0x25	; 37
    90b4:	70 e0       	ldi	r23, 0x00	; 0
    90b6:	82 e0       	ldi	r24, 0x02	; 2
    90b8:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    90bc:	c8 2e       	mov	r12, r24
    90be:	d1 2c       	mov	r13, r1
    90c0:	64 e2       	ldi	r22, 0x24	; 36
    90c2:	70 e0       	ldi	r23, 0x00	; 0
    90c4:	82 e0       	ldi	r24, 0x02	; 2
    90c6:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    90ca:	dc 2c       	mov	r13, r12
    90cc:	cc 24       	eor	r12, r12
    90ce:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    90d0:	8f b7       	in	r24, 0x3f	; 63
    90d2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    90d4:	f8 94       	cli
	return flags;
    90d6:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    90d8:	c8 01       	movw	r24, r16
    90da:	a4 dd       	rcall	.-1208   	; 0x8c24 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    90dc:	f8 01       	movw	r30, r16
    90de:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    90e0:	92 e0       	ldi	r25, 0x02	; 2
    90e2:	90 83       	st	Z, r25
	adc->CAL = cal;
    90e4:	c4 86       	std	Z+12, r12	; 0x0c
    90e6:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    90e8:	f7 01       	movw	r30, r14
    90ea:	25 81       	ldd	r18, Z+5	; 0x05
    90ec:	36 81       	ldd	r19, Z+6	; 0x06
    90ee:	f8 01       	movw	r30, r16
    90f0:	20 8f       	std	Z+24, r18	; 0x18
    90f2:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    90f4:	f7 01       	movw	r30, r14
    90f6:	92 81       	ldd	r25, Z+2	; 0x02
    90f8:	f8 01       	movw	r30, r16
    90fa:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    90fc:	f7 01       	movw	r30, r14
    90fe:	94 81       	ldd	r25, Z+4	; 0x04
    9100:	f8 01       	movw	r30, r16
    9102:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    9104:	f7 01       	movw	r30, r14
    9106:	93 81       	ldd	r25, Z+3	; 0x03
    9108:	f8 01       	movw	r30, r16
    910a:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    910c:	f7 01       	movw	r30, r14
    910e:	91 81       	ldd	r25, Z+1	; 0x01
    9110:	f8 01       	movw	r30, r16
    9112:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    9114:	81 70       	andi	r24, 0x01	; 1
    9116:	f7 01       	movw	r30, r14
    9118:	90 81       	ld	r25, Z
    911a:	89 2b       	or	r24, r25
    911c:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    911e:	80 83       	st	Z, r24
    9120:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9122:	a1 dd       	rcall	.-1214   	; 0x8c66 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    9124:	bf be       	out	0x3f, r11	; 63
    9126:	0f 90       	pop	r0
    9128:	df 91       	pop	r29
    912a:	cf 91       	pop	r28
    912c:	1f 91       	pop	r17
    912e:	0f 91       	pop	r16
    9130:	ff 90       	pop	r15
    9132:	ef 90       	pop	r14
    9134:	df 90       	pop	r13
    9136:	cf 90       	pop	r12
    9138:	bf 90       	pop	r11
    913a:	08 95       	ret

0000913c <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    913c:	df 92       	push	r13
    913e:	ef 92       	push	r14
    9140:	ff 92       	push	r15
    9142:	0f 93       	push	r16
    9144:	1f 93       	push	r17
    9146:	cf 93       	push	r28
    9148:	df 93       	push	r29
    914a:	1f 92       	push	r1
    914c:	cd b7       	in	r28, 0x3d	; 61
    914e:	de b7       	in	r29, 0x3e	; 62
    9150:	8c 01       	movw	r16, r24
    9152:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9154:	8f b7       	in	r24, 0x3f	; 63
    9156:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9158:	f8 94       	cli
	return flags;
    915a:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    915c:	c8 01       	movw	r24, r16
    915e:	62 dd       	rcall	.-1340   	; 0x8c24 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    9160:	f8 01       	movw	r30, r16
    9162:	80 81       	ld	r24, Z
    9164:	80 7c       	andi	r24, 0xC0	; 192
    9166:	f7 01       	movw	r30, r14
    9168:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    916a:	f8 01       	movw	r30, r16
    916c:	80 8d       	ldd	r24, Z+24	; 0x18
    916e:	91 8d       	ldd	r25, Z+25	; 0x19
    9170:	f7 01       	movw	r30, r14
    9172:	85 83       	std	Z+5, r24	; 0x05
    9174:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    9176:	f8 01       	movw	r30, r16
    9178:	82 81       	ldd	r24, Z+2	; 0x02
    917a:	f7 01       	movw	r30, r14
    917c:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    917e:	f8 01       	movw	r30, r16
    9180:	84 81       	ldd	r24, Z+4	; 0x04
    9182:	f7 01       	movw	r30, r14
    9184:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    9186:	f8 01       	movw	r30, r16
    9188:	83 81       	ldd	r24, Z+3	; 0x03
    918a:	f7 01       	movw	r30, r14
    918c:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    918e:	f8 01       	movw	r30, r16
    9190:	81 81       	ldd	r24, Z+1	; 0x01
    9192:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    9194:	81 83       	std	Z+1, r24	; 0x01
    9196:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9198:	66 dd       	rcall	.-1332   	; 0x8c66 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    919a:	df be       	out	0x3f, r13	; 63
    919c:	0f 90       	pop	r0
    919e:	df 91       	pop	r29
    91a0:	cf 91       	pop	r28
    91a2:	1f 91       	pop	r17
    91a4:	0f 91       	pop	r16
    91a6:	ff 90       	pop	r15
    91a8:	ef 90       	pop	r14
    91aa:	df 90       	pop	r13
    91ac:	08 95       	ret

000091ae <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    91ae:	af 92       	push	r10
    91b0:	bf 92       	push	r11
    91b2:	cf 92       	push	r12
    91b4:	df 92       	push	r13
    91b6:	ef 92       	push	r14
    91b8:	ff 92       	push	r15
    91ba:	0f 93       	push	r16
    91bc:	1f 93       	push	r17
    91be:	cf 93       	push	r28
    91c0:	df 93       	push	r29
    91c2:	1f 92       	push	r1
    91c4:	cd b7       	in	r28, 0x3d	; 61
    91c6:	de b7       	in	r29, 0x3e	; 62
    91c8:	6c 01       	movw	r12, r24
    91ca:	b6 2e       	mov	r11, r22
    91cc:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    91ce:	86 2f       	mov	r24, r22
    91d0:	83 70       	andi	r24, 0x03	; 3
    91d2:	29 f4       	brne	.+10     	; 0x91de <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    91d4:	96 2f       	mov	r25, r22
    91d6:	96 95       	lsr	r25
    91d8:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    91da:	82 e0       	ldi	r24, 0x02	; 2
    91dc:	02 c0       	rjmp	.+4      	; 0x91e2 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    91de:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    91e0:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    91e2:	90 ff       	sbrs	r25, 0
		index++;
    91e4:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    91e6:	86 01       	movw	r16, r12
    91e8:	00 5e       	subi	r16, 0xE0	; 224
    91ea:	1f 4f       	sbci	r17, 0xFF	; 255
    91ec:	98 e0       	ldi	r25, 0x08	; 8
    91ee:	89 9f       	mul	r24, r25
    91f0:	00 0d       	add	r16, r0
    91f2:	11 1d       	adc	r17, r1
    91f4:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    91f6:	8f b7       	in	r24, 0x3f	; 63
    91f8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    91fa:	f8 94       	cli
	return flags;
    91fc:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    91fe:	c6 01       	movw	r24, r12
    9200:	11 dd       	rcall	.-1502   	; 0x8c24 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    9202:	f7 01       	movw	r30, r14
    9204:	80 81       	ld	r24, Z
    9206:	f8 01       	movw	r30, r16
    9208:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    920a:	f7 01       	movw	r30, r14
    920c:	82 81       	ldd	r24, Z+2	; 0x02
    920e:	f8 01       	movw	r30, r16
    9210:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    9212:	f7 01       	movw	r30, r14
    9214:	81 81       	ldd	r24, Z+1	; 0x01
    9216:	f8 01       	movw	r30, r16
    9218:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    921a:	b0 fe       	sbrs	r11, 0
    921c:	04 c0       	rjmp	.+8      	; 0x9226 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    921e:	f7 01       	movw	r30, r14
    9220:	83 81       	ldd	r24, Z+3	; 0x03
    9222:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    9224:	86 83       	std	Z+6, r24	; 0x06
    9226:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9228:	1e dd       	rcall	.-1476   	; 0x8c66 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    922a:	af be       	out	0x3f, r10	; 63
    922c:	0f 90       	pop	r0
    922e:	df 91       	pop	r29
    9230:	cf 91       	pop	r28
    9232:	1f 91       	pop	r17
    9234:	0f 91       	pop	r16
    9236:	ff 90       	pop	r15
    9238:	ef 90       	pop	r14
    923a:	df 90       	pop	r13
    923c:	cf 90       	pop	r12
    923e:	bf 90       	pop	r11
    9240:	af 90       	pop	r10
    9242:	08 95       	ret

00009244 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    9244:	af 92       	push	r10
    9246:	bf 92       	push	r11
    9248:	cf 92       	push	r12
    924a:	df 92       	push	r13
    924c:	ef 92       	push	r14
    924e:	ff 92       	push	r15
    9250:	0f 93       	push	r16
    9252:	1f 93       	push	r17
    9254:	cf 93       	push	r28
    9256:	df 93       	push	r29
    9258:	1f 92       	push	r1
    925a:	cd b7       	in	r28, 0x3d	; 61
    925c:	de b7       	in	r29, 0x3e	; 62
    925e:	6c 01       	movw	r12, r24
    9260:	b6 2e       	mov	r11, r22
    9262:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    9264:	86 2f       	mov	r24, r22
    9266:	83 70       	andi	r24, 0x03	; 3
    9268:	29 f4       	brne	.+10     	; 0x9274 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    926a:	96 2f       	mov	r25, r22
    926c:	96 95       	lsr	r25
    926e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    9270:	82 e0       	ldi	r24, 0x02	; 2
    9272:	02 c0       	rjmp	.+4      	; 0x9278 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    9274:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    9276:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    9278:	90 ff       	sbrs	r25, 0
		index++;
    927a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    927c:	86 01       	movw	r16, r12
    927e:	00 5e       	subi	r16, 0xE0	; 224
    9280:	1f 4f       	sbci	r17, 0xFF	; 255
    9282:	98 e0       	ldi	r25, 0x08	; 8
    9284:	89 9f       	mul	r24, r25
    9286:	00 0d       	add	r16, r0
    9288:	11 1d       	adc	r17, r1
    928a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    928c:	8f b7       	in	r24, 0x3f	; 63
    928e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9290:	f8 94       	cli
	return flags;
    9292:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    9294:	c6 01       	movw	r24, r12
    9296:	c6 dc       	rcall	.-1652   	; 0x8c24 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    9298:	f8 01       	movw	r30, r16
    929a:	80 81       	ld	r24, Z
    929c:	f7 01       	movw	r30, r14
    929e:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    92a0:	f8 01       	movw	r30, r16
    92a2:	82 81       	ldd	r24, Z+2	; 0x02
    92a4:	f7 01       	movw	r30, r14
    92a6:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    92a8:	f8 01       	movw	r30, r16
    92aa:	81 81       	ldd	r24, Z+1	; 0x01
    92ac:	f7 01       	movw	r30, r14
    92ae:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    92b0:	b0 fe       	sbrs	r11, 0
    92b2:	04 c0       	rjmp	.+8      	; 0x92bc <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    92b4:	f8 01       	movw	r30, r16
    92b6:	86 81       	ldd	r24, Z+6	; 0x06
    92b8:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    92ba:	83 83       	std	Z+3, r24	; 0x03
    92bc:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    92be:	d3 dc       	rcall	.-1626   	; 0x8c66 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    92c0:	af be       	out	0x3f, r10	; 63
    92c2:	0f 90       	pop	r0
    92c4:	df 91       	pop	r29
    92c6:	cf 91       	pop	r28
    92c8:	1f 91       	pop	r17
    92ca:	0f 91       	pop	r16
    92cc:	ff 90       	pop	r15
    92ce:	ef 90       	pop	r14
    92d0:	df 90       	pop	r13
    92d2:	cf 90       	pop	r12
    92d4:	bf 90       	pop	r11
    92d6:	af 90       	pop	r10
    92d8:	08 95       	ret

000092da <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    92da:	80 32       	cpi	r24, 0x20	; 32
    92dc:	93 40       	sbci	r25, 0x03	; 3
    92de:	61 f4       	brne	.+24     	; 0x92f8 <dac_enable_clock+0x1e>
    92e0:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <dacb_enable_count>
    92e4:	91 e0       	ldi	r25, 0x01	; 1
    92e6:	98 0f       	add	r25, r24
    92e8:	90 93 33 23 	sts	0x2333, r25	; 0x802333 <dacb_enable_count>
    92ec:	81 11       	cpse	r24, r1
    92ee:	04 c0       	rjmp	.+8      	; 0x92f8 <dac_enable_clock+0x1e>
    92f0:	64 e0       	ldi	r22, 0x04	; 4
    92f2:	82 e0       	ldi	r24, 0x02	; 2
    92f4:	0c 94 31 6c 	jmp	0xd862	; 0xd862 <sysclk_enable_module>
    92f8:	08 95       	ret

000092fa <dac_disable_clock>:
    92fa:	80 32       	cpi	r24, 0x20	; 32
    92fc:	93 40       	sbci	r25, 0x03	; 3
    92fe:	59 f4       	brne	.+22     	; 0x9316 <dac_disable_clock+0x1c>
    9300:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <dacb_enable_count>
    9304:	81 50       	subi	r24, 0x01	; 1
    9306:	80 93 33 23 	sts	0x2333, r24	; 0x802333 <dacb_enable_count>
    930a:	81 11       	cpse	r24, r1
    930c:	04 c0       	rjmp	.+8      	; 0x9316 <dac_disable_clock+0x1c>
    930e:	64 e0       	ldi	r22, 0x04	; 4
    9310:	82 e0       	ldi	r24, 0x02	; 2
    9312:	0c 94 47 6c 	jmp	0xd88e	; 0xd88e <sysclk_disable_module>
    9316:	08 95       	ret

00009318 <dac_enable>:
    9318:	ef 92       	push	r14
    931a:	ff 92       	push	r15
    931c:	1f 93       	push	r17
    931e:	cf 93       	push	r28
    9320:	df 93       	push	r29
    9322:	1f 92       	push	r1
    9324:	1f 92       	push	r1
    9326:	cd b7       	in	r28, 0x3d	; 61
    9328:	de b7       	in	r29, 0x3e	; 62
    932a:	2f b7       	in	r18, 0x3f	; 63
    932c:	29 83       	std	Y+1, r18	; 0x01
    932e:	f8 94       	cli
    9330:	19 81       	ldd	r17, Y+1	; 0x01
    9332:	20 91 68 2e 	lds	r18, 0x2E68	; 0x802e68 <sleepmgr_locks+0x1>
    9336:	2f 3f       	cpi	r18, 0xFF	; 255
    9338:	09 f4       	brne	.+2      	; 0x933c <dac_enable+0x24>
    933a:	ff cf       	rjmp	.-2      	; 0x933a <dac_enable+0x22>
    933c:	7c 01       	movw	r14, r24
    933e:	8f b7       	in	r24, 0x3f	; 63
    9340:	8a 83       	std	Y+2, r24	; 0x02
    9342:	f8 94       	cli
    9344:	9a 81       	ldd	r25, Y+2	; 0x02
    9346:	e7 e6       	ldi	r30, 0x67	; 103
    9348:	fe e2       	ldi	r31, 0x2E	; 46
    934a:	81 81       	ldd	r24, Z+1	; 0x01
    934c:	8f 5f       	subi	r24, 0xFF	; 255
    934e:	81 83       	std	Z+1, r24	; 0x01
    9350:	9f bf       	out	0x3f, r25	; 63
    9352:	c7 01       	movw	r24, r14
    9354:	c2 df       	rcall	.-124    	; 0x92da <dac_enable_clock>
    9356:	f7 01       	movw	r30, r14
    9358:	80 81       	ld	r24, Z
    935a:	81 60       	ori	r24, 0x01	; 1
    935c:	80 83       	st	Z, r24
    935e:	1f bf       	out	0x3f, r17	; 63
    9360:	0f 90       	pop	r0
    9362:	0f 90       	pop	r0
    9364:	df 91       	pop	r29
    9366:	cf 91       	pop	r28
    9368:	1f 91       	pop	r17
    936a:	ff 90       	pop	r15
    936c:	ef 90       	pop	r14
    936e:	08 95       	ret

00009370 <dac_disable>:
    9370:	1f 93       	push	r17
    9372:	cf 93       	push	r28
    9374:	df 93       	push	r29
    9376:	1f 92       	push	r1
    9378:	1f 92       	push	r1
    937a:	cd b7       	in	r28, 0x3d	; 61
    937c:	de b7       	in	r29, 0x3e	; 62
    937e:	2f b7       	in	r18, 0x3f	; 63
    9380:	29 83       	std	Y+1, r18	; 0x01
    9382:	f8 94       	cli
    9384:	19 81       	ldd	r17, Y+1	; 0x01
    9386:	fc 01       	movw	r30, r24
    9388:	20 81       	ld	r18, Z
    938a:	2e 7f       	andi	r18, 0xFE	; 254
    938c:	20 83       	st	Z, r18
    938e:	b5 df       	rcall	.-150    	; 0x92fa <dac_disable_clock>
    9390:	80 91 68 2e 	lds	r24, 0x2E68	; 0x802e68 <sleepmgr_locks+0x1>
    9394:	81 11       	cpse	r24, r1
    9396:	01 c0       	rjmp	.+2      	; 0x939a <dac_disable+0x2a>
    9398:	ff cf       	rjmp	.-2      	; 0x9398 <dac_disable+0x28>
    939a:	8f b7       	in	r24, 0x3f	; 63
    939c:	8a 83       	std	Y+2, r24	; 0x02
    939e:	f8 94       	cli
    93a0:	9a 81       	ldd	r25, Y+2	; 0x02
    93a2:	e7 e6       	ldi	r30, 0x67	; 103
    93a4:	fe e2       	ldi	r31, 0x2E	; 46
    93a6:	81 81       	ldd	r24, Z+1	; 0x01
    93a8:	81 50       	subi	r24, 0x01	; 1
    93aa:	81 83       	std	Z+1, r24	; 0x01
    93ac:	9f bf       	out	0x3f, r25	; 63
    93ae:	1f bf       	out	0x3f, r17	; 63
    93b0:	0f 90       	pop	r0
    93b2:	0f 90       	pop	r0
    93b4:	df 91       	pop	r29
    93b6:	cf 91       	pop	r28
    93b8:	1f 91       	pop	r17
    93ba:	08 95       	ret

000093bc <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    93bc:	9f 92       	push	r9
    93be:	af 92       	push	r10
    93c0:	bf 92       	push	r11
    93c2:	cf 92       	push	r12
    93c4:	df 92       	push	r13
    93c6:	ef 92       	push	r14
    93c8:	ff 92       	push	r15
    93ca:	0f 93       	push	r16
    93cc:	1f 93       	push	r17
    93ce:	cf 93       	push	r28
    93d0:	df 93       	push	r29
    93d2:	1f 92       	push	r1
    93d4:	cd b7       	in	r28, 0x3d	; 61
    93d6:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    93d8:	80 32       	cpi	r24, 0x20	; 32
    93da:	23 e0       	ldi	r18, 0x03	; 3
    93dc:	92 07       	cpc	r25, r18
    93de:	09 f0       	breq	.+2      	; 0x93e2 <dac_write_configuration+0x26>
    93e0:	3c c0       	rjmp	.+120    	; 0x945a <dac_write_configuration+0x9e>
    93e2:	7b 01       	movw	r14, r22
    93e4:	8c 01       	movw	r16, r24
    93e6:	63 e3       	ldi	r22, 0x33	; 51
    93e8:	70 e0       	ldi	r23, 0x00	; 0
    93ea:	82 e0       	ldi	r24, 0x02	; 2
    93ec:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    93f0:	98 2e       	mov	r9, r24
    93f2:	62 e3       	ldi	r22, 0x32	; 50
    93f4:	70 e0       	ldi	r23, 0x00	; 0
    93f6:	82 e0       	ldi	r24, 0x02	; 2
    93f8:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    93fc:	a8 2e       	mov	r10, r24
    93fe:	67 e3       	ldi	r22, 0x37	; 55
    9400:	70 e0       	ldi	r23, 0x00	; 0
    9402:	82 e0       	ldi	r24, 0x02	; 2
    9404:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    9408:	b8 2e       	mov	r11, r24
    940a:	66 e3       	ldi	r22, 0x36	; 54
    940c:	70 e0       	ldi	r23, 0x00	; 0
    940e:	82 e0       	ldi	r24, 0x02	; 2
    9410:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    9414:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9416:	8f b7       	in	r24, 0x3f	; 63
    9418:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    941a:	f8 94       	cli
	return flags;
    941c:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    941e:	c8 01       	movw	r24, r16
    9420:	5c df       	rcall	.-328    	; 0x92da <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    9422:	f8 01       	movw	r30, r16
    9424:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    9426:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    9428:	f7 01       	movw	r30, r14
    942a:	91 81       	ldd	r25, Z+1	; 0x01
    942c:	f8 01       	movw	r30, r16
    942e:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    9430:	f7 01       	movw	r30, r14
    9432:	92 81       	ldd	r25, Z+2	; 0x02
    9434:	f8 01       	movw	r30, r16
    9436:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    9438:	f7 01       	movw	r30, r14
    943a:	93 81       	ldd	r25, Z+3	; 0x03
    943c:	f8 01       	movw	r30, r16
    943e:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    9440:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    9442:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    9444:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    9446:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    9448:	81 70       	andi	r24, 0x01	; 1
    944a:	f7 01       	movw	r30, r14
    944c:	90 81       	ld	r25, Z
    944e:	89 2b       	or	r24, r25
    9450:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    9452:	80 83       	st	Z, r24
    9454:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9456:	51 df       	rcall	.-350    	; 0x92fa <dac_disable_clock>
	cpu_irq_restore(flags);
}
    9458:	df be       	out	0x3f, r13	; 63
    945a:	0f 90       	pop	r0
    945c:	df 91       	pop	r29
    945e:	cf 91       	pop	r28
    9460:	1f 91       	pop	r17
    9462:	0f 91       	pop	r16
    9464:	ff 90       	pop	r15
    9466:	ef 90       	pop	r14
    9468:	df 90       	pop	r13
    946a:	cf 90       	pop	r12
    946c:	bf 90       	pop	r11
    946e:	af 90       	pop	r10
    9470:	9f 90       	pop	r9
    9472:	08 95       	ret

00009474 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    9474:	df 92       	push	r13
    9476:	ef 92       	push	r14
    9478:	ff 92       	push	r15
    947a:	0f 93       	push	r16
    947c:	1f 93       	push	r17
    947e:	cf 93       	push	r28
    9480:	df 93       	push	r29
    9482:	1f 92       	push	r1
    9484:	cd b7       	in	r28, 0x3d	; 61
    9486:	de b7       	in	r29, 0x3e	; 62
    9488:	8c 01       	movw	r16, r24
    948a:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    948c:	8f b7       	in	r24, 0x3f	; 63
    948e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9490:	f8 94       	cli
	return flags;
    9492:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    9494:	c8 01       	movw	r24, r16
    9496:	21 df       	rcall	.-446    	; 0x92da <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    9498:	f8 01       	movw	r30, r16
    949a:	80 81       	ld	r24, Z
    949c:	8e 7f       	andi	r24, 0xFE	; 254
    949e:	f7 01       	movw	r30, r14
    94a0:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    94a2:	f8 01       	movw	r30, r16
    94a4:	81 81       	ldd	r24, Z+1	; 0x01
    94a6:	f7 01       	movw	r30, r14
    94a8:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    94aa:	f8 01       	movw	r30, r16
    94ac:	82 81       	ldd	r24, Z+2	; 0x02
    94ae:	f7 01       	movw	r30, r14
    94b0:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    94b2:	f8 01       	movw	r30, r16
    94b4:	83 81       	ldd	r24, Z+3	; 0x03
    94b6:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    94b8:	83 83       	std	Z+3, r24	; 0x03
    94ba:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    94bc:	1e df       	rcall	.-452    	; 0x92fa <dac_disable_clock>
	cpu_irq_restore(flags);
}
    94be:	df be       	out	0x3f, r13	; 63
    94c0:	0f 90       	pop	r0
    94c2:	df 91       	pop	r29
    94c4:	cf 91       	pop	r28
    94c6:	1f 91       	pop	r17
    94c8:	0f 91       	pop	r16
    94ca:	ff 90       	pop	r15
    94cc:	ef 90       	pop	r14
    94ce:	df 90       	pop	r13
    94d0:	08 95       	ret

000094d2 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    94d2:	1f 92       	push	r1
    94d4:	0f 92       	push	r0
    94d6:	0f b6       	in	r0, 0x3f	; 63
    94d8:	0f 92       	push	r0
    94da:	11 24       	eor	r1, r1
    94dc:	0b b6       	in	r0, 0x3b	; 59
    94de:	0f 92       	push	r0
    94e0:	2f 93       	push	r18
    94e2:	3f 93       	push	r19
    94e4:	4f 93       	push	r20
    94e6:	5f 93       	push	r21
    94e8:	6f 93       	push	r22
    94ea:	7f 93       	push	r23
    94ec:	8f 93       	push	r24
    94ee:	9f 93       	push	r25
    94f0:	af 93       	push	r26
    94f2:	bf 93       	push	r27
    94f4:	ef 93       	push	r30
    94f6:	ff 93       	push	r31
    94f8:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <tc_tcc0_ovf_callback>
    94fc:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <tc_tcc0_ovf_callback+0x1>
    9500:	30 97       	sbiw	r30, 0x00	; 0
    9502:	09 f0       	breq	.+2      	; 0x9506 <__vector_14+0x34>
    9504:	19 95       	eicall
    9506:	ff 91       	pop	r31
    9508:	ef 91       	pop	r30
    950a:	bf 91       	pop	r27
    950c:	af 91       	pop	r26
    950e:	9f 91       	pop	r25
    9510:	8f 91       	pop	r24
    9512:	7f 91       	pop	r23
    9514:	6f 91       	pop	r22
    9516:	5f 91       	pop	r21
    9518:	4f 91       	pop	r20
    951a:	3f 91       	pop	r19
    951c:	2f 91       	pop	r18
    951e:	0f 90       	pop	r0
    9520:	0b be       	out	0x3b, r0	; 59
    9522:	0f 90       	pop	r0
    9524:	0f be       	out	0x3f, r0	; 63
    9526:	0f 90       	pop	r0
    9528:	1f 90       	pop	r1
    952a:	18 95       	reti

0000952c <__vector_15>:
    952c:	1f 92       	push	r1
    952e:	0f 92       	push	r0
    9530:	0f b6       	in	r0, 0x3f	; 63
    9532:	0f 92       	push	r0
    9534:	11 24       	eor	r1, r1
    9536:	0b b6       	in	r0, 0x3b	; 59
    9538:	0f 92       	push	r0
    953a:	2f 93       	push	r18
    953c:	3f 93       	push	r19
    953e:	4f 93       	push	r20
    9540:	5f 93       	push	r21
    9542:	6f 93       	push	r22
    9544:	7f 93       	push	r23
    9546:	8f 93       	push	r24
    9548:	9f 93       	push	r25
    954a:	af 93       	push	r26
    954c:	bf 93       	push	r27
    954e:	ef 93       	push	r30
    9550:	ff 93       	push	r31
    9552:	e0 91 78 23 	lds	r30, 0x2378	; 0x802378 <tc_tcc0_err_callback>
    9556:	f0 91 79 23 	lds	r31, 0x2379	; 0x802379 <tc_tcc0_err_callback+0x1>
    955a:	30 97       	sbiw	r30, 0x00	; 0
    955c:	09 f0       	breq	.+2      	; 0x9560 <__vector_15+0x34>
    955e:	19 95       	eicall
    9560:	ff 91       	pop	r31
    9562:	ef 91       	pop	r30
    9564:	bf 91       	pop	r27
    9566:	af 91       	pop	r26
    9568:	9f 91       	pop	r25
    956a:	8f 91       	pop	r24
    956c:	7f 91       	pop	r23
    956e:	6f 91       	pop	r22
    9570:	5f 91       	pop	r21
    9572:	4f 91       	pop	r20
    9574:	3f 91       	pop	r19
    9576:	2f 91       	pop	r18
    9578:	0f 90       	pop	r0
    957a:	0b be       	out	0x3b, r0	; 59
    957c:	0f 90       	pop	r0
    957e:	0f be       	out	0x3f, r0	; 63
    9580:	0f 90       	pop	r0
    9582:	1f 90       	pop	r1
    9584:	18 95       	reti

00009586 <__vector_16>:
    9586:	1f 92       	push	r1
    9588:	0f 92       	push	r0
    958a:	0f b6       	in	r0, 0x3f	; 63
    958c:	0f 92       	push	r0
    958e:	11 24       	eor	r1, r1
    9590:	0b b6       	in	r0, 0x3b	; 59
    9592:	0f 92       	push	r0
    9594:	2f 93       	push	r18
    9596:	3f 93       	push	r19
    9598:	4f 93       	push	r20
    959a:	5f 93       	push	r21
    959c:	6f 93       	push	r22
    959e:	7f 93       	push	r23
    95a0:	8f 93       	push	r24
    95a2:	9f 93       	push	r25
    95a4:	af 93       	push	r26
    95a6:	bf 93       	push	r27
    95a8:	ef 93       	push	r30
    95aa:	ff 93       	push	r31
    95ac:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <tc_tcc0_cca_callback>
    95b0:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <tc_tcc0_cca_callback+0x1>
    95b4:	30 97       	sbiw	r30, 0x00	; 0
    95b6:	09 f0       	breq	.+2      	; 0x95ba <__vector_16+0x34>
    95b8:	19 95       	eicall
    95ba:	ff 91       	pop	r31
    95bc:	ef 91       	pop	r30
    95be:	bf 91       	pop	r27
    95c0:	af 91       	pop	r26
    95c2:	9f 91       	pop	r25
    95c4:	8f 91       	pop	r24
    95c6:	7f 91       	pop	r23
    95c8:	6f 91       	pop	r22
    95ca:	5f 91       	pop	r21
    95cc:	4f 91       	pop	r20
    95ce:	3f 91       	pop	r19
    95d0:	2f 91       	pop	r18
    95d2:	0f 90       	pop	r0
    95d4:	0b be       	out	0x3b, r0	; 59
    95d6:	0f 90       	pop	r0
    95d8:	0f be       	out	0x3f, r0	; 63
    95da:	0f 90       	pop	r0
    95dc:	1f 90       	pop	r1
    95de:	18 95       	reti

000095e0 <__vector_17>:
    95e0:	1f 92       	push	r1
    95e2:	0f 92       	push	r0
    95e4:	0f b6       	in	r0, 0x3f	; 63
    95e6:	0f 92       	push	r0
    95e8:	11 24       	eor	r1, r1
    95ea:	0b b6       	in	r0, 0x3b	; 59
    95ec:	0f 92       	push	r0
    95ee:	2f 93       	push	r18
    95f0:	3f 93       	push	r19
    95f2:	4f 93       	push	r20
    95f4:	5f 93       	push	r21
    95f6:	6f 93       	push	r22
    95f8:	7f 93       	push	r23
    95fa:	8f 93       	push	r24
    95fc:	9f 93       	push	r25
    95fe:	af 93       	push	r26
    9600:	bf 93       	push	r27
    9602:	ef 93       	push	r30
    9604:	ff 93       	push	r31
    9606:	e0 91 74 23 	lds	r30, 0x2374	; 0x802374 <tc_tcc0_ccb_callback>
    960a:	f0 91 75 23 	lds	r31, 0x2375	; 0x802375 <tc_tcc0_ccb_callback+0x1>
    960e:	30 97       	sbiw	r30, 0x00	; 0
    9610:	09 f0       	breq	.+2      	; 0x9614 <__vector_17+0x34>
    9612:	19 95       	eicall
    9614:	ff 91       	pop	r31
    9616:	ef 91       	pop	r30
    9618:	bf 91       	pop	r27
    961a:	af 91       	pop	r26
    961c:	9f 91       	pop	r25
    961e:	8f 91       	pop	r24
    9620:	7f 91       	pop	r23
    9622:	6f 91       	pop	r22
    9624:	5f 91       	pop	r21
    9626:	4f 91       	pop	r20
    9628:	3f 91       	pop	r19
    962a:	2f 91       	pop	r18
    962c:	0f 90       	pop	r0
    962e:	0b be       	out	0x3b, r0	; 59
    9630:	0f 90       	pop	r0
    9632:	0f be       	out	0x3f, r0	; 63
    9634:	0f 90       	pop	r0
    9636:	1f 90       	pop	r1
    9638:	18 95       	reti

0000963a <__vector_18>:
    963a:	1f 92       	push	r1
    963c:	0f 92       	push	r0
    963e:	0f b6       	in	r0, 0x3f	; 63
    9640:	0f 92       	push	r0
    9642:	11 24       	eor	r1, r1
    9644:	0b b6       	in	r0, 0x3b	; 59
    9646:	0f 92       	push	r0
    9648:	2f 93       	push	r18
    964a:	3f 93       	push	r19
    964c:	4f 93       	push	r20
    964e:	5f 93       	push	r21
    9650:	6f 93       	push	r22
    9652:	7f 93       	push	r23
    9654:	8f 93       	push	r24
    9656:	9f 93       	push	r25
    9658:	af 93       	push	r26
    965a:	bf 93       	push	r27
    965c:	ef 93       	push	r30
    965e:	ff 93       	push	r31
    9660:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <tc_tcc0_ccc_callback>
    9664:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <tc_tcc0_ccc_callback+0x1>
    9668:	30 97       	sbiw	r30, 0x00	; 0
    966a:	09 f0       	breq	.+2      	; 0x966e <__vector_18+0x34>
    966c:	19 95       	eicall
    966e:	ff 91       	pop	r31
    9670:	ef 91       	pop	r30
    9672:	bf 91       	pop	r27
    9674:	af 91       	pop	r26
    9676:	9f 91       	pop	r25
    9678:	8f 91       	pop	r24
    967a:	7f 91       	pop	r23
    967c:	6f 91       	pop	r22
    967e:	5f 91       	pop	r21
    9680:	4f 91       	pop	r20
    9682:	3f 91       	pop	r19
    9684:	2f 91       	pop	r18
    9686:	0f 90       	pop	r0
    9688:	0b be       	out	0x3b, r0	; 59
    968a:	0f 90       	pop	r0
    968c:	0f be       	out	0x3f, r0	; 63
    968e:	0f 90       	pop	r0
    9690:	1f 90       	pop	r1
    9692:	18 95       	reti

00009694 <__vector_19>:
    9694:	1f 92       	push	r1
    9696:	0f 92       	push	r0
    9698:	0f b6       	in	r0, 0x3f	; 63
    969a:	0f 92       	push	r0
    969c:	11 24       	eor	r1, r1
    969e:	0b b6       	in	r0, 0x3b	; 59
    96a0:	0f 92       	push	r0
    96a2:	2f 93       	push	r18
    96a4:	3f 93       	push	r19
    96a6:	4f 93       	push	r20
    96a8:	5f 93       	push	r21
    96aa:	6f 93       	push	r22
    96ac:	7f 93       	push	r23
    96ae:	8f 93       	push	r24
    96b0:	9f 93       	push	r25
    96b2:	af 93       	push	r26
    96b4:	bf 93       	push	r27
    96b6:	ef 93       	push	r30
    96b8:	ff 93       	push	r31
    96ba:	e0 91 70 23 	lds	r30, 0x2370	; 0x802370 <tc_tcc0_ccd_callback>
    96be:	f0 91 71 23 	lds	r31, 0x2371	; 0x802371 <tc_tcc0_ccd_callback+0x1>
    96c2:	30 97       	sbiw	r30, 0x00	; 0
    96c4:	09 f0       	breq	.+2      	; 0x96c8 <__vector_19+0x34>
    96c6:	19 95       	eicall
    96c8:	ff 91       	pop	r31
    96ca:	ef 91       	pop	r30
    96cc:	bf 91       	pop	r27
    96ce:	af 91       	pop	r26
    96d0:	9f 91       	pop	r25
    96d2:	8f 91       	pop	r24
    96d4:	7f 91       	pop	r23
    96d6:	6f 91       	pop	r22
    96d8:	5f 91       	pop	r21
    96da:	4f 91       	pop	r20
    96dc:	3f 91       	pop	r19
    96de:	2f 91       	pop	r18
    96e0:	0f 90       	pop	r0
    96e2:	0b be       	out	0x3b, r0	; 59
    96e4:	0f 90       	pop	r0
    96e6:	0f be       	out	0x3f, r0	; 63
    96e8:	0f 90       	pop	r0
    96ea:	1f 90       	pop	r1
    96ec:	18 95       	reti

000096ee <__vector_20>:
    96ee:	1f 92       	push	r1
    96f0:	0f 92       	push	r0
    96f2:	0f b6       	in	r0, 0x3f	; 63
    96f4:	0f 92       	push	r0
    96f6:	11 24       	eor	r1, r1
    96f8:	0b b6       	in	r0, 0x3b	; 59
    96fa:	0f 92       	push	r0
    96fc:	2f 93       	push	r18
    96fe:	3f 93       	push	r19
    9700:	4f 93       	push	r20
    9702:	5f 93       	push	r21
    9704:	6f 93       	push	r22
    9706:	7f 93       	push	r23
    9708:	8f 93       	push	r24
    970a:	9f 93       	push	r25
    970c:	af 93       	push	r26
    970e:	bf 93       	push	r27
    9710:	ef 93       	push	r30
    9712:	ff 93       	push	r31
    9714:	e0 91 6e 23 	lds	r30, 0x236E	; 0x80236e <tc_tcc1_ovf_callback>
    9718:	f0 91 6f 23 	lds	r31, 0x236F	; 0x80236f <tc_tcc1_ovf_callback+0x1>
    971c:	30 97       	sbiw	r30, 0x00	; 0
    971e:	09 f0       	breq	.+2      	; 0x9722 <__vector_20+0x34>
    9720:	19 95       	eicall
    9722:	ff 91       	pop	r31
    9724:	ef 91       	pop	r30
    9726:	bf 91       	pop	r27
    9728:	af 91       	pop	r26
    972a:	9f 91       	pop	r25
    972c:	8f 91       	pop	r24
    972e:	7f 91       	pop	r23
    9730:	6f 91       	pop	r22
    9732:	5f 91       	pop	r21
    9734:	4f 91       	pop	r20
    9736:	3f 91       	pop	r19
    9738:	2f 91       	pop	r18
    973a:	0f 90       	pop	r0
    973c:	0b be       	out	0x3b, r0	; 59
    973e:	0f 90       	pop	r0
    9740:	0f be       	out	0x3f, r0	; 63
    9742:	0f 90       	pop	r0
    9744:	1f 90       	pop	r1
    9746:	18 95       	reti

00009748 <__vector_21>:
    9748:	1f 92       	push	r1
    974a:	0f 92       	push	r0
    974c:	0f b6       	in	r0, 0x3f	; 63
    974e:	0f 92       	push	r0
    9750:	11 24       	eor	r1, r1
    9752:	0b b6       	in	r0, 0x3b	; 59
    9754:	0f 92       	push	r0
    9756:	2f 93       	push	r18
    9758:	3f 93       	push	r19
    975a:	4f 93       	push	r20
    975c:	5f 93       	push	r21
    975e:	6f 93       	push	r22
    9760:	7f 93       	push	r23
    9762:	8f 93       	push	r24
    9764:	9f 93       	push	r25
    9766:	af 93       	push	r26
    9768:	bf 93       	push	r27
    976a:	ef 93       	push	r30
    976c:	ff 93       	push	r31
    976e:	e0 91 6c 23 	lds	r30, 0x236C	; 0x80236c <tc_tcc1_err_callback>
    9772:	f0 91 6d 23 	lds	r31, 0x236D	; 0x80236d <tc_tcc1_err_callback+0x1>
    9776:	30 97       	sbiw	r30, 0x00	; 0
    9778:	09 f0       	breq	.+2      	; 0x977c <__vector_21+0x34>
    977a:	19 95       	eicall
    977c:	ff 91       	pop	r31
    977e:	ef 91       	pop	r30
    9780:	bf 91       	pop	r27
    9782:	af 91       	pop	r26
    9784:	9f 91       	pop	r25
    9786:	8f 91       	pop	r24
    9788:	7f 91       	pop	r23
    978a:	6f 91       	pop	r22
    978c:	5f 91       	pop	r21
    978e:	4f 91       	pop	r20
    9790:	3f 91       	pop	r19
    9792:	2f 91       	pop	r18
    9794:	0f 90       	pop	r0
    9796:	0b be       	out	0x3b, r0	; 59
    9798:	0f 90       	pop	r0
    979a:	0f be       	out	0x3f, r0	; 63
    979c:	0f 90       	pop	r0
    979e:	1f 90       	pop	r1
    97a0:	18 95       	reti

000097a2 <__vector_22>:
    97a2:	1f 92       	push	r1
    97a4:	0f 92       	push	r0
    97a6:	0f b6       	in	r0, 0x3f	; 63
    97a8:	0f 92       	push	r0
    97aa:	11 24       	eor	r1, r1
    97ac:	0b b6       	in	r0, 0x3b	; 59
    97ae:	0f 92       	push	r0
    97b0:	2f 93       	push	r18
    97b2:	3f 93       	push	r19
    97b4:	4f 93       	push	r20
    97b6:	5f 93       	push	r21
    97b8:	6f 93       	push	r22
    97ba:	7f 93       	push	r23
    97bc:	8f 93       	push	r24
    97be:	9f 93       	push	r25
    97c0:	af 93       	push	r26
    97c2:	bf 93       	push	r27
    97c4:	ef 93       	push	r30
    97c6:	ff 93       	push	r31
    97c8:	e0 91 6a 23 	lds	r30, 0x236A	; 0x80236a <tc_tcc1_cca_callback>
    97cc:	f0 91 6b 23 	lds	r31, 0x236B	; 0x80236b <tc_tcc1_cca_callback+0x1>
    97d0:	30 97       	sbiw	r30, 0x00	; 0
    97d2:	09 f0       	breq	.+2      	; 0x97d6 <__vector_22+0x34>
    97d4:	19 95       	eicall
    97d6:	ff 91       	pop	r31
    97d8:	ef 91       	pop	r30
    97da:	bf 91       	pop	r27
    97dc:	af 91       	pop	r26
    97de:	9f 91       	pop	r25
    97e0:	8f 91       	pop	r24
    97e2:	7f 91       	pop	r23
    97e4:	6f 91       	pop	r22
    97e6:	5f 91       	pop	r21
    97e8:	4f 91       	pop	r20
    97ea:	3f 91       	pop	r19
    97ec:	2f 91       	pop	r18
    97ee:	0f 90       	pop	r0
    97f0:	0b be       	out	0x3b, r0	; 59
    97f2:	0f 90       	pop	r0
    97f4:	0f be       	out	0x3f, r0	; 63
    97f6:	0f 90       	pop	r0
    97f8:	1f 90       	pop	r1
    97fa:	18 95       	reti

000097fc <__vector_23>:
    97fc:	1f 92       	push	r1
    97fe:	0f 92       	push	r0
    9800:	0f b6       	in	r0, 0x3f	; 63
    9802:	0f 92       	push	r0
    9804:	11 24       	eor	r1, r1
    9806:	0b b6       	in	r0, 0x3b	; 59
    9808:	0f 92       	push	r0
    980a:	2f 93       	push	r18
    980c:	3f 93       	push	r19
    980e:	4f 93       	push	r20
    9810:	5f 93       	push	r21
    9812:	6f 93       	push	r22
    9814:	7f 93       	push	r23
    9816:	8f 93       	push	r24
    9818:	9f 93       	push	r25
    981a:	af 93       	push	r26
    981c:	bf 93       	push	r27
    981e:	ef 93       	push	r30
    9820:	ff 93       	push	r31
    9822:	e0 91 68 23 	lds	r30, 0x2368	; 0x802368 <tc_tcc1_ccb_callback>
    9826:	f0 91 69 23 	lds	r31, 0x2369	; 0x802369 <tc_tcc1_ccb_callback+0x1>
    982a:	30 97       	sbiw	r30, 0x00	; 0
    982c:	09 f0       	breq	.+2      	; 0x9830 <__vector_23+0x34>
    982e:	19 95       	eicall
    9830:	ff 91       	pop	r31
    9832:	ef 91       	pop	r30
    9834:	bf 91       	pop	r27
    9836:	af 91       	pop	r26
    9838:	9f 91       	pop	r25
    983a:	8f 91       	pop	r24
    983c:	7f 91       	pop	r23
    983e:	6f 91       	pop	r22
    9840:	5f 91       	pop	r21
    9842:	4f 91       	pop	r20
    9844:	3f 91       	pop	r19
    9846:	2f 91       	pop	r18
    9848:	0f 90       	pop	r0
    984a:	0b be       	out	0x3b, r0	; 59
    984c:	0f 90       	pop	r0
    984e:	0f be       	out	0x3f, r0	; 63
    9850:	0f 90       	pop	r0
    9852:	1f 90       	pop	r1
    9854:	18 95       	reti

00009856 <__vector_77>:
    9856:	1f 92       	push	r1
    9858:	0f 92       	push	r0
    985a:	0f b6       	in	r0, 0x3f	; 63
    985c:	0f 92       	push	r0
    985e:	11 24       	eor	r1, r1
    9860:	0b b6       	in	r0, 0x3b	; 59
    9862:	0f 92       	push	r0
    9864:	2f 93       	push	r18
    9866:	3f 93       	push	r19
    9868:	4f 93       	push	r20
    986a:	5f 93       	push	r21
    986c:	6f 93       	push	r22
    986e:	7f 93       	push	r23
    9870:	8f 93       	push	r24
    9872:	9f 93       	push	r25
    9874:	af 93       	push	r26
    9876:	bf 93       	push	r27
    9878:	ef 93       	push	r30
    987a:	ff 93       	push	r31
    987c:	e0 91 66 23 	lds	r30, 0x2366	; 0x802366 <tc_tcd0_ovf_callback>
    9880:	f0 91 67 23 	lds	r31, 0x2367	; 0x802367 <tc_tcd0_ovf_callback+0x1>
    9884:	30 97       	sbiw	r30, 0x00	; 0
    9886:	09 f0       	breq	.+2      	; 0x988a <__vector_77+0x34>
    9888:	19 95       	eicall
    988a:	ff 91       	pop	r31
    988c:	ef 91       	pop	r30
    988e:	bf 91       	pop	r27
    9890:	af 91       	pop	r26
    9892:	9f 91       	pop	r25
    9894:	8f 91       	pop	r24
    9896:	7f 91       	pop	r23
    9898:	6f 91       	pop	r22
    989a:	5f 91       	pop	r21
    989c:	4f 91       	pop	r20
    989e:	3f 91       	pop	r19
    98a0:	2f 91       	pop	r18
    98a2:	0f 90       	pop	r0
    98a4:	0b be       	out	0x3b, r0	; 59
    98a6:	0f 90       	pop	r0
    98a8:	0f be       	out	0x3f, r0	; 63
    98aa:	0f 90       	pop	r0
    98ac:	1f 90       	pop	r1
    98ae:	18 95       	reti

000098b0 <__vector_78>:
    98b0:	1f 92       	push	r1
    98b2:	0f 92       	push	r0
    98b4:	0f b6       	in	r0, 0x3f	; 63
    98b6:	0f 92       	push	r0
    98b8:	11 24       	eor	r1, r1
    98ba:	0b b6       	in	r0, 0x3b	; 59
    98bc:	0f 92       	push	r0
    98be:	2f 93       	push	r18
    98c0:	3f 93       	push	r19
    98c2:	4f 93       	push	r20
    98c4:	5f 93       	push	r21
    98c6:	6f 93       	push	r22
    98c8:	7f 93       	push	r23
    98ca:	8f 93       	push	r24
    98cc:	9f 93       	push	r25
    98ce:	af 93       	push	r26
    98d0:	bf 93       	push	r27
    98d2:	ef 93       	push	r30
    98d4:	ff 93       	push	r31
    98d6:	e0 91 64 23 	lds	r30, 0x2364	; 0x802364 <tc_tcd0_err_callback>
    98da:	f0 91 65 23 	lds	r31, 0x2365	; 0x802365 <tc_tcd0_err_callback+0x1>
    98de:	30 97       	sbiw	r30, 0x00	; 0
    98e0:	09 f0       	breq	.+2      	; 0x98e4 <__vector_78+0x34>
    98e2:	19 95       	eicall
    98e4:	ff 91       	pop	r31
    98e6:	ef 91       	pop	r30
    98e8:	bf 91       	pop	r27
    98ea:	af 91       	pop	r26
    98ec:	9f 91       	pop	r25
    98ee:	8f 91       	pop	r24
    98f0:	7f 91       	pop	r23
    98f2:	6f 91       	pop	r22
    98f4:	5f 91       	pop	r21
    98f6:	4f 91       	pop	r20
    98f8:	3f 91       	pop	r19
    98fa:	2f 91       	pop	r18
    98fc:	0f 90       	pop	r0
    98fe:	0b be       	out	0x3b, r0	; 59
    9900:	0f 90       	pop	r0
    9902:	0f be       	out	0x3f, r0	; 63
    9904:	0f 90       	pop	r0
    9906:	1f 90       	pop	r1
    9908:	18 95       	reti

0000990a <__vector_79>:
    990a:	1f 92       	push	r1
    990c:	0f 92       	push	r0
    990e:	0f b6       	in	r0, 0x3f	; 63
    9910:	0f 92       	push	r0
    9912:	11 24       	eor	r1, r1
    9914:	0b b6       	in	r0, 0x3b	; 59
    9916:	0f 92       	push	r0
    9918:	2f 93       	push	r18
    991a:	3f 93       	push	r19
    991c:	4f 93       	push	r20
    991e:	5f 93       	push	r21
    9920:	6f 93       	push	r22
    9922:	7f 93       	push	r23
    9924:	8f 93       	push	r24
    9926:	9f 93       	push	r25
    9928:	af 93       	push	r26
    992a:	bf 93       	push	r27
    992c:	ef 93       	push	r30
    992e:	ff 93       	push	r31
    9930:	e0 91 62 23 	lds	r30, 0x2362	; 0x802362 <tc_tcd0_cca_callback>
    9934:	f0 91 63 23 	lds	r31, 0x2363	; 0x802363 <tc_tcd0_cca_callback+0x1>
    9938:	30 97       	sbiw	r30, 0x00	; 0
    993a:	09 f0       	breq	.+2      	; 0x993e <__vector_79+0x34>
    993c:	19 95       	eicall
    993e:	ff 91       	pop	r31
    9940:	ef 91       	pop	r30
    9942:	bf 91       	pop	r27
    9944:	af 91       	pop	r26
    9946:	9f 91       	pop	r25
    9948:	8f 91       	pop	r24
    994a:	7f 91       	pop	r23
    994c:	6f 91       	pop	r22
    994e:	5f 91       	pop	r21
    9950:	4f 91       	pop	r20
    9952:	3f 91       	pop	r19
    9954:	2f 91       	pop	r18
    9956:	0f 90       	pop	r0
    9958:	0b be       	out	0x3b, r0	; 59
    995a:	0f 90       	pop	r0
    995c:	0f be       	out	0x3f, r0	; 63
    995e:	0f 90       	pop	r0
    9960:	1f 90       	pop	r1
    9962:	18 95       	reti

00009964 <__vector_80>:
    9964:	1f 92       	push	r1
    9966:	0f 92       	push	r0
    9968:	0f b6       	in	r0, 0x3f	; 63
    996a:	0f 92       	push	r0
    996c:	11 24       	eor	r1, r1
    996e:	0b b6       	in	r0, 0x3b	; 59
    9970:	0f 92       	push	r0
    9972:	2f 93       	push	r18
    9974:	3f 93       	push	r19
    9976:	4f 93       	push	r20
    9978:	5f 93       	push	r21
    997a:	6f 93       	push	r22
    997c:	7f 93       	push	r23
    997e:	8f 93       	push	r24
    9980:	9f 93       	push	r25
    9982:	af 93       	push	r26
    9984:	bf 93       	push	r27
    9986:	ef 93       	push	r30
    9988:	ff 93       	push	r31
    998a:	e0 91 60 23 	lds	r30, 0x2360	; 0x802360 <tc_tcd0_ccb_callback>
    998e:	f0 91 61 23 	lds	r31, 0x2361	; 0x802361 <tc_tcd0_ccb_callback+0x1>
    9992:	30 97       	sbiw	r30, 0x00	; 0
    9994:	09 f0       	breq	.+2      	; 0x9998 <__vector_80+0x34>
    9996:	19 95       	eicall
    9998:	ff 91       	pop	r31
    999a:	ef 91       	pop	r30
    999c:	bf 91       	pop	r27
    999e:	af 91       	pop	r26
    99a0:	9f 91       	pop	r25
    99a2:	8f 91       	pop	r24
    99a4:	7f 91       	pop	r23
    99a6:	6f 91       	pop	r22
    99a8:	5f 91       	pop	r21
    99aa:	4f 91       	pop	r20
    99ac:	3f 91       	pop	r19
    99ae:	2f 91       	pop	r18
    99b0:	0f 90       	pop	r0
    99b2:	0b be       	out	0x3b, r0	; 59
    99b4:	0f 90       	pop	r0
    99b6:	0f be       	out	0x3f, r0	; 63
    99b8:	0f 90       	pop	r0
    99ba:	1f 90       	pop	r1
    99bc:	18 95       	reti

000099be <__vector_81>:
    99be:	1f 92       	push	r1
    99c0:	0f 92       	push	r0
    99c2:	0f b6       	in	r0, 0x3f	; 63
    99c4:	0f 92       	push	r0
    99c6:	11 24       	eor	r1, r1
    99c8:	0b b6       	in	r0, 0x3b	; 59
    99ca:	0f 92       	push	r0
    99cc:	2f 93       	push	r18
    99ce:	3f 93       	push	r19
    99d0:	4f 93       	push	r20
    99d2:	5f 93       	push	r21
    99d4:	6f 93       	push	r22
    99d6:	7f 93       	push	r23
    99d8:	8f 93       	push	r24
    99da:	9f 93       	push	r25
    99dc:	af 93       	push	r26
    99de:	bf 93       	push	r27
    99e0:	ef 93       	push	r30
    99e2:	ff 93       	push	r31
    99e4:	e0 91 5e 23 	lds	r30, 0x235E	; 0x80235e <tc_tcd0_ccc_callback>
    99e8:	f0 91 5f 23 	lds	r31, 0x235F	; 0x80235f <tc_tcd0_ccc_callback+0x1>
    99ec:	30 97       	sbiw	r30, 0x00	; 0
    99ee:	09 f0       	breq	.+2      	; 0x99f2 <__vector_81+0x34>
    99f0:	19 95       	eicall
    99f2:	ff 91       	pop	r31
    99f4:	ef 91       	pop	r30
    99f6:	bf 91       	pop	r27
    99f8:	af 91       	pop	r26
    99fa:	9f 91       	pop	r25
    99fc:	8f 91       	pop	r24
    99fe:	7f 91       	pop	r23
    9a00:	6f 91       	pop	r22
    9a02:	5f 91       	pop	r21
    9a04:	4f 91       	pop	r20
    9a06:	3f 91       	pop	r19
    9a08:	2f 91       	pop	r18
    9a0a:	0f 90       	pop	r0
    9a0c:	0b be       	out	0x3b, r0	; 59
    9a0e:	0f 90       	pop	r0
    9a10:	0f be       	out	0x3f, r0	; 63
    9a12:	0f 90       	pop	r0
    9a14:	1f 90       	pop	r1
    9a16:	18 95       	reti

00009a18 <__vector_82>:
    9a18:	1f 92       	push	r1
    9a1a:	0f 92       	push	r0
    9a1c:	0f b6       	in	r0, 0x3f	; 63
    9a1e:	0f 92       	push	r0
    9a20:	11 24       	eor	r1, r1
    9a22:	0b b6       	in	r0, 0x3b	; 59
    9a24:	0f 92       	push	r0
    9a26:	2f 93       	push	r18
    9a28:	3f 93       	push	r19
    9a2a:	4f 93       	push	r20
    9a2c:	5f 93       	push	r21
    9a2e:	6f 93       	push	r22
    9a30:	7f 93       	push	r23
    9a32:	8f 93       	push	r24
    9a34:	9f 93       	push	r25
    9a36:	af 93       	push	r26
    9a38:	bf 93       	push	r27
    9a3a:	ef 93       	push	r30
    9a3c:	ff 93       	push	r31
    9a3e:	e0 91 5c 23 	lds	r30, 0x235C	; 0x80235c <tc_tcd0_ccd_callback>
    9a42:	f0 91 5d 23 	lds	r31, 0x235D	; 0x80235d <tc_tcd0_ccd_callback+0x1>
    9a46:	30 97       	sbiw	r30, 0x00	; 0
    9a48:	09 f0       	breq	.+2      	; 0x9a4c <__vector_82+0x34>
    9a4a:	19 95       	eicall
    9a4c:	ff 91       	pop	r31
    9a4e:	ef 91       	pop	r30
    9a50:	bf 91       	pop	r27
    9a52:	af 91       	pop	r26
    9a54:	9f 91       	pop	r25
    9a56:	8f 91       	pop	r24
    9a58:	7f 91       	pop	r23
    9a5a:	6f 91       	pop	r22
    9a5c:	5f 91       	pop	r21
    9a5e:	4f 91       	pop	r20
    9a60:	3f 91       	pop	r19
    9a62:	2f 91       	pop	r18
    9a64:	0f 90       	pop	r0
    9a66:	0b be       	out	0x3b, r0	; 59
    9a68:	0f 90       	pop	r0
    9a6a:	0f be       	out	0x3f, r0	; 63
    9a6c:	0f 90       	pop	r0
    9a6e:	1f 90       	pop	r1
    9a70:	18 95       	reti

00009a72 <__vector_83>:
    9a72:	1f 92       	push	r1
    9a74:	0f 92       	push	r0
    9a76:	0f b6       	in	r0, 0x3f	; 63
    9a78:	0f 92       	push	r0
    9a7a:	11 24       	eor	r1, r1
    9a7c:	0b b6       	in	r0, 0x3b	; 59
    9a7e:	0f 92       	push	r0
    9a80:	2f 93       	push	r18
    9a82:	3f 93       	push	r19
    9a84:	4f 93       	push	r20
    9a86:	5f 93       	push	r21
    9a88:	6f 93       	push	r22
    9a8a:	7f 93       	push	r23
    9a8c:	8f 93       	push	r24
    9a8e:	9f 93       	push	r25
    9a90:	af 93       	push	r26
    9a92:	bf 93       	push	r27
    9a94:	ef 93       	push	r30
    9a96:	ff 93       	push	r31
    9a98:	e0 91 5a 23 	lds	r30, 0x235A	; 0x80235a <tc_tcd1_ovf_callback>
    9a9c:	f0 91 5b 23 	lds	r31, 0x235B	; 0x80235b <tc_tcd1_ovf_callback+0x1>
    9aa0:	30 97       	sbiw	r30, 0x00	; 0
    9aa2:	09 f0       	breq	.+2      	; 0x9aa6 <__vector_83+0x34>
    9aa4:	19 95       	eicall
    9aa6:	ff 91       	pop	r31
    9aa8:	ef 91       	pop	r30
    9aaa:	bf 91       	pop	r27
    9aac:	af 91       	pop	r26
    9aae:	9f 91       	pop	r25
    9ab0:	8f 91       	pop	r24
    9ab2:	7f 91       	pop	r23
    9ab4:	6f 91       	pop	r22
    9ab6:	5f 91       	pop	r21
    9ab8:	4f 91       	pop	r20
    9aba:	3f 91       	pop	r19
    9abc:	2f 91       	pop	r18
    9abe:	0f 90       	pop	r0
    9ac0:	0b be       	out	0x3b, r0	; 59
    9ac2:	0f 90       	pop	r0
    9ac4:	0f be       	out	0x3f, r0	; 63
    9ac6:	0f 90       	pop	r0
    9ac8:	1f 90       	pop	r1
    9aca:	18 95       	reti

00009acc <__vector_84>:
    9acc:	1f 92       	push	r1
    9ace:	0f 92       	push	r0
    9ad0:	0f b6       	in	r0, 0x3f	; 63
    9ad2:	0f 92       	push	r0
    9ad4:	11 24       	eor	r1, r1
    9ad6:	0b b6       	in	r0, 0x3b	; 59
    9ad8:	0f 92       	push	r0
    9ada:	2f 93       	push	r18
    9adc:	3f 93       	push	r19
    9ade:	4f 93       	push	r20
    9ae0:	5f 93       	push	r21
    9ae2:	6f 93       	push	r22
    9ae4:	7f 93       	push	r23
    9ae6:	8f 93       	push	r24
    9ae8:	9f 93       	push	r25
    9aea:	af 93       	push	r26
    9aec:	bf 93       	push	r27
    9aee:	ef 93       	push	r30
    9af0:	ff 93       	push	r31
    9af2:	e0 91 58 23 	lds	r30, 0x2358	; 0x802358 <tc_tcd1_err_callback>
    9af6:	f0 91 59 23 	lds	r31, 0x2359	; 0x802359 <tc_tcd1_err_callback+0x1>
    9afa:	30 97       	sbiw	r30, 0x00	; 0
    9afc:	09 f0       	breq	.+2      	; 0x9b00 <__vector_84+0x34>
    9afe:	19 95       	eicall
    9b00:	ff 91       	pop	r31
    9b02:	ef 91       	pop	r30
    9b04:	bf 91       	pop	r27
    9b06:	af 91       	pop	r26
    9b08:	9f 91       	pop	r25
    9b0a:	8f 91       	pop	r24
    9b0c:	7f 91       	pop	r23
    9b0e:	6f 91       	pop	r22
    9b10:	5f 91       	pop	r21
    9b12:	4f 91       	pop	r20
    9b14:	3f 91       	pop	r19
    9b16:	2f 91       	pop	r18
    9b18:	0f 90       	pop	r0
    9b1a:	0b be       	out	0x3b, r0	; 59
    9b1c:	0f 90       	pop	r0
    9b1e:	0f be       	out	0x3f, r0	; 63
    9b20:	0f 90       	pop	r0
    9b22:	1f 90       	pop	r1
    9b24:	18 95       	reti

00009b26 <__vector_85>:
    9b26:	1f 92       	push	r1
    9b28:	0f 92       	push	r0
    9b2a:	0f b6       	in	r0, 0x3f	; 63
    9b2c:	0f 92       	push	r0
    9b2e:	11 24       	eor	r1, r1
    9b30:	0b b6       	in	r0, 0x3b	; 59
    9b32:	0f 92       	push	r0
    9b34:	2f 93       	push	r18
    9b36:	3f 93       	push	r19
    9b38:	4f 93       	push	r20
    9b3a:	5f 93       	push	r21
    9b3c:	6f 93       	push	r22
    9b3e:	7f 93       	push	r23
    9b40:	8f 93       	push	r24
    9b42:	9f 93       	push	r25
    9b44:	af 93       	push	r26
    9b46:	bf 93       	push	r27
    9b48:	ef 93       	push	r30
    9b4a:	ff 93       	push	r31
    9b4c:	e0 91 56 23 	lds	r30, 0x2356	; 0x802356 <tc_tcd1_cca_callback>
    9b50:	f0 91 57 23 	lds	r31, 0x2357	; 0x802357 <tc_tcd1_cca_callback+0x1>
    9b54:	30 97       	sbiw	r30, 0x00	; 0
    9b56:	09 f0       	breq	.+2      	; 0x9b5a <__vector_85+0x34>
    9b58:	19 95       	eicall
    9b5a:	ff 91       	pop	r31
    9b5c:	ef 91       	pop	r30
    9b5e:	bf 91       	pop	r27
    9b60:	af 91       	pop	r26
    9b62:	9f 91       	pop	r25
    9b64:	8f 91       	pop	r24
    9b66:	7f 91       	pop	r23
    9b68:	6f 91       	pop	r22
    9b6a:	5f 91       	pop	r21
    9b6c:	4f 91       	pop	r20
    9b6e:	3f 91       	pop	r19
    9b70:	2f 91       	pop	r18
    9b72:	0f 90       	pop	r0
    9b74:	0b be       	out	0x3b, r0	; 59
    9b76:	0f 90       	pop	r0
    9b78:	0f be       	out	0x3f, r0	; 63
    9b7a:	0f 90       	pop	r0
    9b7c:	1f 90       	pop	r1
    9b7e:	18 95       	reti

00009b80 <__vector_86>:
    9b80:	1f 92       	push	r1
    9b82:	0f 92       	push	r0
    9b84:	0f b6       	in	r0, 0x3f	; 63
    9b86:	0f 92       	push	r0
    9b88:	11 24       	eor	r1, r1
    9b8a:	0b b6       	in	r0, 0x3b	; 59
    9b8c:	0f 92       	push	r0
    9b8e:	2f 93       	push	r18
    9b90:	3f 93       	push	r19
    9b92:	4f 93       	push	r20
    9b94:	5f 93       	push	r21
    9b96:	6f 93       	push	r22
    9b98:	7f 93       	push	r23
    9b9a:	8f 93       	push	r24
    9b9c:	9f 93       	push	r25
    9b9e:	af 93       	push	r26
    9ba0:	bf 93       	push	r27
    9ba2:	ef 93       	push	r30
    9ba4:	ff 93       	push	r31
    9ba6:	e0 91 54 23 	lds	r30, 0x2354	; 0x802354 <tc_tcd1_ccb_callback>
    9baa:	f0 91 55 23 	lds	r31, 0x2355	; 0x802355 <tc_tcd1_ccb_callback+0x1>
    9bae:	30 97       	sbiw	r30, 0x00	; 0
    9bb0:	09 f0       	breq	.+2      	; 0x9bb4 <__vector_86+0x34>
    9bb2:	19 95       	eicall
    9bb4:	ff 91       	pop	r31
    9bb6:	ef 91       	pop	r30
    9bb8:	bf 91       	pop	r27
    9bba:	af 91       	pop	r26
    9bbc:	9f 91       	pop	r25
    9bbe:	8f 91       	pop	r24
    9bc0:	7f 91       	pop	r23
    9bc2:	6f 91       	pop	r22
    9bc4:	5f 91       	pop	r21
    9bc6:	4f 91       	pop	r20
    9bc8:	3f 91       	pop	r19
    9bca:	2f 91       	pop	r18
    9bcc:	0f 90       	pop	r0
    9bce:	0b be       	out	0x3b, r0	; 59
    9bd0:	0f 90       	pop	r0
    9bd2:	0f be       	out	0x3f, r0	; 63
    9bd4:	0f 90       	pop	r0
    9bd6:	1f 90       	pop	r1
    9bd8:	18 95       	reti

00009bda <__vector_47>:
    9bda:	1f 92       	push	r1
    9bdc:	0f 92       	push	r0
    9bde:	0f b6       	in	r0, 0x3f	; 63
    9be0:	0f 92       	push	r0
    9be2:	11 24       	eor	r1, r1
    9be4:	0b b6       	in	r0, 0x3b	; 59
    9be6:	0f 92       	push	r0
    9be8:	2f 93       	push	r18
    9bea:	3f 93       	push	r19
    9bec:	4f 93       	push	r20
    9bee:	5f 93       	push	r21
    9bf0:	6f 93       	push	r22
    9bf2:	7f 93       	push	r23
    9bf4:	8f 93       	push	r24
    9bf6:	9f 93       	push	r25
    9bf8:	af 93       	push	r26
    9bfa:	bf 93       	push	r27
    9bfc:	ef 93       	push	r30
    9bfe:	ff 93       	push	r31
    9c00:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <tc_tce0_ovf_callback>
    9c04:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <tc_tce0_ovf_callback+0x1>
    9c08:	30 97       	sbiw	r30, 0x00	; 0
    9c0a:	09 f0       	breq	.+2      	; 0x9c0e <__vector_47+0x34>
    9c0c:	19 95       	eicall
    9c0e:	ff 91       	pop	r31
    9c10:	ef 91       	pop	r30
    9c12:	bf 91       	pop	r27
    9c14:	af 91       	pop	r26
    9c16:	9f 91       	pop	r25
    9c18:	8f 91       	pop	r24
    9c1a:	7f 91       	pop	r23
    9c1c:	6f 91       	pop	r22
    9c1e:	5f 91       	pop	r21
    9c20:	4f 91       	pop	r20
    9c22:	3f 91       	pop	r19
    9c24:	2f 91       	pop	r18
    9c26:	0f 90       	pop	r0
    9c28:	0b be       	out	0x3b, r0	; 59
    9c2a:	0f 90       	pop	r0
    9c2c:	0f be       	out	0x3f, r0	; 63
    9c2e:	0f 90       	pop	r0
    9c30:	1f 90       	pop	r1
    9c32:	18 95       	reti

00009c34 <__vector_48>:
    9c34:	1f 92       	push	r1
    9c36:	0f 92       	push	r0
    9c38:	0f b6       	in	r0, 0x3f	; 63
    9c3a:	0f 92       	push	r0
    9c3c:	11 24       	eor	r1, r1
    9c3e:	0b b6       	in	r0, 0x3b	; 59
    9c40:	0f 92       	push	r0
    9c42:	2f 93       	push	r18
    9c44:	3f 93       	push	r19
    9c46:	4f 93       	push	r20
    9c48:	5f 93       	push	r21
    9c4a:	6f 93       	push	r22
    9c4c:	7f 93       	push	r23
    9c4e:	8f 93       	push	r24
    9c50:	9f 93       	push	r25
    9c52:	af 93       	push	r26
    9c54:	bf 93       	push	r27
    9c56:	ef 93       	push	r30
    9c58:	ff 93       	push	r31
    9c5a:	e0 91 50 23 	lds	r30, 0x2350	; 0x802350 <tc_tce0_err_callback>
    9c5e:	f0 91 51 23 	lds	r31, 0x2351	; 0x802351 <tc_tce0_err_callback+0x1>
    9c62:	30 97       	sbiw	r30, 0x00	; 0
    9c64:	09 f0       	breq	.+2      	; 0x9c68 <__vector_48+0x34>
    9c66:	19 95       	eicall
    9c68:	ff 91       	pop	r31
    9c6a:	ef 91       	pop	r30
    9c6c:	bf 91       	pop	r27
    9c6e:	af 91       	pop	r26
    9c70:	9f 91       	pop	r25
    9c72:	8f 91       	pop	r24
    9c74:	7f 91       	pop	r23
    9c76:	6f 91       	pop	r22
    9c78:	5f 91       	pop	r21
    9c7a:	4f 91       	pop	r20
    9c7c:	3f 91       	pop	r19
    9c7e:	2f 91       	pop	r18
    9c80:	0f 90       	pop	r0
    9c82:	0b be       	out	0x3b, r0	; 59
    9c84:	0f 90       	pop	r0
    9c86:	0f be       	out	0x3f, r0	; 63
    9c88:	0f 90       	pop	r0
    9c8a:	1f 90       	pop	r1
    9c8c:	18 95       	reti

00009c8e <__vector_49>:
    9c8e:	1f 92       	push	r1
    9c90:	0f 92       	push	r0
    9c92:	0f b6       	in	r0, 0x3f	; 63
    9c94:	0f 92       	push	r0
    9c96:	11 24       	eor	r1, r1
    9c98:	0b b6       	in	r0, 0x3b	; 59
    9c9a:	0f 92       	push	r0
    9c9c:	2f 93       	push	r18
    9c9e:	3f 93       	push	r19
    9ca0:	4f 93       	push	r20
    9ca2:	5f 93       	push	r21
    9ca4:	6f 93       	push	r22
    9ca6:	7f 93       	push	r23
    9ca8:	8f 93       	push	r24
    9caa:	9f 93       	push	r25
    9cac:	af 93       	push	r26
    9cae:	bf 93       	push	r27
    9cb0:	ef 93       	push	r30
    9cb2:	ff 93       	push	r31
    9cb4:	e0 91 4e 23 	lds	r30, 0x234E	; 0x80234e <tc_tce0_cca_callback>
    9cb8:	f0 91 4f 23 	lds	r31, 0x234F	; 0x80234f <tc_tce0_cca_callback+0x1>
    9cbc:	30 97       	sbiw	r30, 0x00	; 0
    9cbe:	09 f0       	breq	.+2      	; 0x9cc2 <__vector_49+0x34>
    9cc0:	19 95       	eicall
    9cc2:	ff 91       	pop	r31
    9cc4:	ef 91       	pop	r30
    9cc6:	bf 91       	pop	r27
    9cc8:	af 91       	pop	r26
    9cca:	9f 91       	pop	r25
    9ccc:	8f 91       	pop	r24
    9cce:	7f 91       	pop	r23
    9cd0:	6f 91       	pop	r22
    9cd2:	5f 91       	pop	r21
    9cd4:	4f 91       	pop	r20
    9cd6:	3f 91       	pop	r19
    9cd8:	2f 91       	pop	r18
    9cda:	0f 90       	pop	r0
    9cdc:	0b be       	out	0x3b, r0	; 59
    9cde:	0f 90       	pop	r0
    9ce0:	0f be       	out	0x3f, r0	; 63
    9ce2:	0f 90       	pop	r0
    9ce4:	1f 90       	pop	r1
    9ce6:	18 95       	reti

00009ce8 <__vector_50>:
    9ce8:	1f 92       	push	r1
    9cea:	0f 92       	push	r0
    9cec:	0f b6       	in	r0, 0x3f	; 63
    9cee:	0f 92       	push	r0
    9cf0:	11 24       	eor	r1, r1
    9cf2:	0b b6       	in	r0, 0x3b	; 59
    9cf4:	0f 92       	push	r0
    9cf6:	2f 93       	push	r18
    9cf8:	3f 93       	push	r19
    9cfa:	4f 93       	push	r20
    9cfc:	5f 93       	push	r21
    9cfe:	6f 93       	push	r22
    9d00:	7f 93       	push	r23
    9d02:	8f 93       	push	r24
    9d04:	9f 93       	push	r25
    9d06:	af 93       	push	r26
    9d08:	bf 93       	push	r27
    9d0a:	ef 93       	push	r30
    9d0c:	ff 93       	push	r31
    9d0e:	e0 91 4c 23 	lds	r30, 0x234C	; 0x80234c <tc_tce0_ccb_callback>
    9d12:	f0 91 4d 23 	lds	r31, 0x234D	; 0x80234d <tc_tce0_ccb_callback+0x1>
    9d16:	30 97       	sbiw	r30, 0x00	; 0
    9d18:	09 f0       	breq	.+2      	; 0x9d1c <__vector_50+0x34>
    9d1a:	19 95       	eicall
    9d1c:	ff 91       	pop	r31
    9d1e:	ef 91       	pop	r30
    9d20:	bf 91       	pop	r27
    9d22:	af 91       	pop	r26
    9d24:	9f 91       	pop	r25
    9d26:	8f 91       	pop	r24
    9d28:	7f 91       	pop	r23
    9d2a:	6f 91       	pop	r22
    9d2c:	5f 91       	pop	r21
    9d2e:	4f 91       	pop	r20
    9d30:	3f 91       	pop	r19
    9d32:	2f 91       	pop	r18
    9d34:	0f 90       	pop	r0
    9d36:	0b be       	out	0x3b, r0	; 59
    9d38:	0f 90       	pop	r0
    9d3a:	0f be       	out	0x3f, r0	; 63
    9d3c:	0f 90       	pop	r0
    9d3e:	1f 90       	pop	r1
    9d40:	18 95       	reti

00009d42 <__vector_51>:
    9d42:	1f 92       	push	r1
    9d44:	0f 92       	push	r0
    9d46:	0f b6       	in	r0, 0x3f	; 63
    9d48:	0f 92       	push	r0
    9d4a:	11 24       	eor	r1, r1
    9d4c:	0b b6       	in	r0, 0x3b	; 59
    9d4e:	0f 92       	push	r0
    9d50:	2f 93       	push	r18
    9d52:	3f 93       	push	r19
    9d54:	4f 93       	push	r20
    9d56:	5f 93       	push	r21
    9d58:	6f 93       	push	r22
    9d5a:	7f 93       	push	r23
    9d5c:	8f 93       	push	r24
    9d5e:	9f 93       	push	r25
    9d60:	af 93       	push	r26
    9d62:	bf 93       	push	r27
    9d64:	ef 93       	push	r30
    9d66:	ff 93       	push	r31
    9d68:	e0 91 4a 23 	lds	r30, 0x234A	; 0x80234a <tc_tce0_ccc_callback>
    9d6c:	f0 91 4b 23 	lds	r31, 0x234B	; 0x80234b <tc_tce0_ccc_callback+0x1>
    9d70:	30 97       	sbiw	r30, 0x00	; 0
    9d72:	09 f0       	breq	.+2      	; 0x9d76 <__vector_51+0x34>
    9d74:	19 95       	eicall
    9d76:	ff 91       	pop	r31
    9d78:	ef 91       	pop	r30
    9d7a:	bf 91       	pop	r27
    9d7c:	af 91       	pop	r26
    9d7e:	9f 91       	pop	r25
    9d80:	8f 91       	pop	r24
    9d82:	7f 91       	pop	r23
    9d84:	6f 91       	pop	r22
    9d86:	5f 91       	pop	r21
    9d88:	4f 91       	pop	r20
    9d8a:	3f 91       	pop	r19
    9d8c:	2f 91       	pop	r18
    9d8e:	0f 90       	pop	r0
    9d90:	0b be       	out	0x3b, r0	; 59
    9d92:	0f 90       	pop	r0
    9d94:	0f be       	out	0x3f, r0	; 63
    9d96:	0f 90       	pop	r0
    9d98:	1f 90       	pop	r1
    9d9a:	18 95       	reti

00009d9c <__vector_52>:
    9d9c:	1f 92       	push	r1
    9d9e:	0f 92       	push	r0
    9da0:	0f b6       	in	r0, 0x3f	; 63
    9da2:	0f 92       	push	r0
    9da4:	11 24       	eor	r1, r1
    9da6:	0b b6       	in	r0, 0x3b	; 59
    9da8:	0f 92       	push	r0
    9daa:	2f 93       	push	r18
    9dac:	3f 93       	push	r19
    9dae:	4f 93       	push	r20
    9db0:	5f 93       	push	r21
    9db2:	6f 93       	push	r22
    9db4:	7f 93       	push	r23
    9db6:	8f 93       	push	r24
    9db8:	9f 93       	push	r25
    9dba:	af 93       	push	r26
    9dbc:	bf 93       	push	r27
    9dbe:	ef 93       	push	r30
    9dc0:	ff 93       	push	r31
    9dc2:	e0 91 48 23 	lds	r30, 0x2348	; 0x802348 <tc_tce0_ccd_callback>
    9dc6:	f0 91 49 23 	lds	r31, 0x2349	; 0x802349 <tc_tce0_ccd_callback+0x1>
    9dca:	30 97       	sbiw	r30, 0x00	; 0
    9dcc:	09 f0       	breq	.+2      	; 0x9dd0 <__vector_52+0x34>
    9dce:	19 95       	eicall
    9dd0:	ff 91       	pop	r31
    9dd2:	ef 91       	pop	r30
    9dd4:	bf 91       	pop	r27
    9dd6:	af 91       	pop	r26
    9dd8:	9f 91       	pop	r25
    9dda:	8f 91       	pop	r24
    9ddc:	7f 91       	pop	r23
    9dde:	6f 91       	pop	r22
    9de0:	5f 91       	pop	r21
    9de2:	4f 91       	pop	r20
    9de4:	3f 91       	pop	r19
    9de6:	2f 91       	pop	r18
    9de8:	0f 90       	pop	r0
    9dea:	0b be       	out	0x3b, r0	; 59
    9dec:	0f 90       	pop	r0
    9dee:	0f be       	out	0x3f, r0	; 63
    9df0:	0f 90       	pop	r0
    9df2:	1f 90       	pop	r1
    9df4:	18 95       	reti

00009df6 <__vector_53>:
    9df6:	1f 92       	push	r1
    9df8:	0f 92       	push	r0
    9dfa:	0f b6       	in	r0, 0x3f	; 63
    9dfc:	0f 92       	push	r0
    9dfe:	11 24       	eor	r1, r1
    9e00:	0b b6       	in	r0, 0x3b	; 59
    9e02:	0f 92       	push	r0
    9e04:	2f 93       	push	r18
    9e06:	3f 93       	push	r19
    9e08:	4f 93       	push	r20
    9e0a:	5f 93       	push	r21
    9e0c:	6f 93       	push	r22
    9e0e:	7f 93       	push	r23
    9e10:	8f 93       	push	r24
    9e12:	9f 93       	push	r25
    9e14:	af 93       	push	r26
    9e16:	bf 93       	push	r27
    9e18:	ef 93       	push	r30
    9e1a:	ff 93       	push	r31
    9e1c:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <tc_tce1_ovf_callback>
    9e20:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <tc_tce1_ovf_callback+0x1>
    9e24:	30 97       	sbiw	r30, 0x00	; 0
    9e26:	09 f0       	breq	.+2      	; 0x9e2a <__vector_53+0x34>
    9e28:	19 95       	eicall
    9e2a:	ff 91       	pop	r31
    9e2c:	ef 91       	pop	r30
    9e2e:	bf 91       	pop	r27
    9e30:	af 91       	pop	r26
    9e32:	9f 91       	pop	r25
    9e34:	8f 91       	pop	r24
    9e36:	7f 91       	pop	r23
    9e38:	6f 91       	pop	r22
    9e3a:	5f 91       	pop	r21
    9e3c:	4f 91       	pop	r20
    9e3e:	3f 91       	pop	r19
    9e40:	2f 91       	pop	r18
    9e42:	0f 90       	pop	r0
    9e44:	0b be       	out	0x3b, r0	; 59
    9e46:	0f 90       	pop	r0
    9e48:	0f be       	out	0x3f, r0	; 63
    9e4a:	0f 90       	pop	r0
    9e4c:	1f 90       	pop	r1
    9e4e:	18 95       	reti

00009e50 <__vector_54>:
    9e50:	1f 92       	push	r1
    9e52:	0f 92       	push	r0
    9e54:	0f b6       	in	r0, 0x3f	; 63
    9e56:	0f 92       	push	r0
    9e58:	11 24       	eor	r1, r1
    9e5a:	0b b6       	in	r0, 0x3b	; 59
    9e5c:	0f 92       	push	r0
    9e5e:	2f 93       	push	r18
    9e60:	3f 93       	push	r19
    9e62:	4f 93       	push	r20
    9e64:	5f 93       	push	r21
    9e66:	6f 93       	push	r22
    9e68:	7f 93       	push	r23
    9e6a:	8f 93       	push	r24
    9e6c:	9f 93       	push	r25
    9e6e:	af 93       	push	r26
    9e70:	bf 93       	push	r27
    9e72:	ef 93       	push	r30
    9e74:	ff 93       	push	r31
    9e76:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <tc_tce1_err_callback>
    9e7a:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <tc_tce1_err_callback+0x1>
    9e7e:	30 97       	sbiw	r30, 0x00	; 0
    9e80:	09 f0       	breq	.+2      	; 0x9e84 <__vector_54+0x34>
    9e82:	19 95       	eicall
    9e84:	ff 91       	pop	r31
    9e86:	ef 91       	pop	r30
    9e88:	bf 91       	pop	r27
    9e8a:	af 91       	pop	r26
    9e8c:	9f 91       	pop	r25
    9e8e:	8f 91       	pop	r24
    9e90:	7f 91       	pop	r23
    9e92:	6f 91       	pop	r22
    9e94:	5f 91       	pop	r21
    9e96:	4f 91       	pop	r20
    9e98:	3f 91       	pop	r19
    9e9a:	2f 91       	pop	r18
    9e9c:	0f 90       	pop	r0
    9e9e:	0b be       	out	0x3b, r0	; 59
    9ea0:	0f 90       	pop	r0
    9ea2:	0f be       	out	0x3f, r0	; 63
    9ea4:	0f 90       	pop	r0
    9ea6:	1f 90       	pop	r1
    9ea8:	18 95       	reti

00009eaa <__vector_55>:
    9eaa:	1f 92       	push	r1
    9eac:	0f 92       	push	r0
    9eae:	0f b6       	in	r0, 0x3f	; 63
    9eb0:	0f 92       	push	r0
    9eb2:	11 24       	eor	r1, r1
    9eb4:	0b b6       	in	r0, 0x3b	; 59
    9eb6:	0f 92       	push	r0
    9eb8:	2f 93       	push	r18
    9eba:	3f 93       	push	r19
    9ebc:	4f 93       	push	r20
    9ebe:	5f 93       	push	r21
    9ec0:	6f 93       	push	r22
    9ec2:	7f 93       	push	r23
    9ec4:	8f 93       	push	r24
    9ec6:	9f 93       	push	r25
    9ec8:	af 93       	push	r26
    9eca:	bf 93       	push	r27
    9ecc:	ef 93       	push	r30
    9ece:	ff 93       	push	r31
    9ed0:	e0 91 42 23 	lds	r30, 0x2342	; 0x802342 <tc_tce1_cca_callback>
    9ed4:	f0 91 43 23 	lds	r31, 0x2343	; 0x802343 <tc_tce1_cca_callback+0x1>
    9ed8:	30 97       	sbiw	r30, 0x00	; 0
    9eda:	09 f0       	breq	.+2      	; 0x9ede <__vector_55+0x34>
    9edc:	19 95       	eicall
    9ede:	ff 91       	pop	r31
    9ee0:	ef 91       	pop	r30
    9ee2:	bf 91       	pop	r27
    9ee4:	af 91       	pop	r26
    9ee6:	9f 91       	pop	r25
    9ee8:	8f 91       	pop	r24
    9eea:	7f 91       	pop	r23
    9eec:	6f 91       	pop	r22
    9eee:	5f 91       	pop	r21
    9ef0:	4f 91       	pop	r20
    9ef2:	3f 91       	pop	r19
    9ef4:	2f 91       	pop	r18
    9ef6:	0f 90       	pop	r0
    9ef8:	0b be       	out	0x3b, r0	; 59
    9efa:	0f 90       	pop	r0
    9efc:	0f be       	out	0x3f, r0	; 63
    9efe:	0f 90       	pop	r0
    9f00:	1f 90       	pop	r1
    9f02:	18 95       	reti

00009f04 <__vector_56>:
    9f04:	1f 92       	push	r1
    9f06:	0f 92       	push	r0
    9f08:	0f b6       	in	r0, 0x3f	; 63
    9f0a:	0f 92       	push	r0
    9f0c:	11 24       	eor	r1, r1
    9f0e:	0b b6       	in	r0, 0x3b	; 59
    9f10:	0f 92       	push	r0
    9f12:	2f 93       	push	r18
    9f14:	3f 93       	push	r19
    9f16:	4f 93       	push	r20
    9f18:	5f 93       	push	r21
    9f1a:	6f 93       	push	r22
    9f1c:	7f 93       	push	r23
    9f1e:	8f 93       	push	r24
    9f20:	9f 93       	push	r25
    9f22:	af 93       	push	r26
    9f24:	bf 93       	push	r27
    9f26:	ef 93       	push	r30
    9f28:	ff 93       	push	r31
    9f2a:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <tc_tce1_ccb_callback>
    9f2e:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <tc_tce1_ccb_callback+0x1>
    9f32:	30 97       	sbiw	r30, 0x00	; 0
    9f34:	09 f0       	breq	.+2      	; 0x9f38 <__vector_56+0x34>
    9f36:	19 95       	eicall
    9f38:	ff 91       	pop	r31
    9f3a:	ef 91       	pop	r30
    9f3c:	bf 91       	pop	r27
    9f3e:	af 91       	pop	r26
    9f40:	9f 91       	pop	r25
    9f42:	8f 91       	pop	r24
    9f44:	7f 91       	pop	r23
    9f46:	6f 91       	pop	r22
    9f48:	5f 91       	pop	r21
    9f4a:	4f 91       	pop	r20
    9f4c:	3f 91       	pop	r19
    9f4e:	2f 91       	pop	r18
    9f50:	0f 90       	pop	r0
    9f52:	0b be       	out	0x3b, r0	; 59
    9f54:	0f 90       	pop	r0
    9f56:	0f be       	out	0x3f, r0	; 63
    9f58:	0f 90       	pop	r0
    9f5a:	1f 90       	pop	r1
    9f5c:	18 95       	reti

00009f5e <__vector_108>:
    9f5e:	1f 92       	push	r1
    9f60:	0f 92       	push	r0
    9f62:	0f b6       	in	r0, 0x3f	; 63
    9f64:	0f 92       	push	r0
    9f66:	11 24       	eor	r1, r1
    9f68:	0b b6       	in	r0, 0x3b	; 59
    9f6a:	0f 92       	push	r0
    9f6c:	2f 93       	push	r18
    9f6e:	3f 93       	push	r19
    9f70:	4f 93       	push	r20
    9f72:	5f 93       	push	r21
    9f74:	6f 93       	push	r22
    9f76:	7f 93       	push	r23
    9f78:	8f 93       	push	r24
    9f7a:	9f 93       	push	r25
    9f7c:	af 93       	push	r26
    9f7e:	bf 93       	push	r27
    9f80:	ef 93       	push	r30
    9f82:	ff 93       	push	r31
    9f84:	e0 91 3e 23 	lds	r30, 0x233E	; 0x80233e <tc_tcf0_ovf_callback>
    9f88:	f0 91 3f 23 	lds	r31, 0x233F	; 0x80233f <tc_tcf0_ovf_callback+0x1>
    9f8c:	30 97       	sbiw	r30, 0x00	; 0
    9f8e:	09 f0       	breq	.+2      	; 0x9f92 <__vector_108+0x34>
    9f90:	19 95       	eicall
    9f92:	ff 91       	pop	r31
    9f94:	ef 91       	pop	r30
    9f96:	bf 91       	pop	r27
    9f98:	af 91       	pop	r26
    9f9a:	9f 91       	pop	r25
    9f9c:	8f 91       	pop	r24
    9f9e:	7f 91       	pop	r23
    9fa0:	6f 91       	pop	r22
    9fa2:	5f 91       	pop	r21
    9fa4:	4f 91       	pop	r20
    9fa6:	3f 91       	pop	r19
    9fa8:	2f 91       	pop	r18
    9faa:	0f 90       	pop	r0
    9fac:	0b be       	out	0x3b, r0	; 59
    9fae:	0f 90       	pop	r0
    9fb0:	0f be       	out	0x3f, r0	; 63
    9fb2:	0f 90       	pop	r0
    9fb4:	1f 90       	pop	r1
    9fb6:	18 95       	reti

00009fb8 <__vector_109>:
    9fb8:	1f 92       	push	r1
    9fba:	0f 92       	push	r0
    9fbc:	0f b6       	in	r0, 0x3f	; 63
    9fbe:	0f 92       	push	r0
    9fc0:	11 24       	eor	r1, r1
    9fc2:	0b b6       	in	r0, 0x3b	; 59
    9fc4:	0f 92       	push	r0
    9fc6:	2f 93       	push	r18
    9fc8:	3f 93       	push	r19
    9fca:	4f 93       	push	r20
    9fcc:	5f 93       	push	r21
    9fce:	6f 93       	push	r22
    9fd0:	7f 93       	push	r23
    9fd2:	8f 93       	push	r24
    9fd4:	9f 93       	push	r25
    9fd6:	af 93       	push	r26
    9fd8:	bf 93       	push	r27
    9fda:	ef 93       	push	r30
    9fdc:	ff 93       	push	r31
    9fde:	e0 91 3c 23 	lds	r30, 0x233C	; 0x80233c <tc_tcf0_err_callback>
    9fe2:	f0 91 3d 23 	lds	r31, 0x233D	; 0x80233d <tc_tcf0_err_callback+0x1>
    9fe6:	30 97       	sbiw	r30, 0x00	; 0
    9fe8:	09 f0       	breq	.+2      	; 0x9fec <__vector_109+0x34>
    9fea:	19 95       	eicall
    9fec:	ff 91       	pop	r31
    9fee:	ef 91       	pop	r30
    9ff0:	bf 91       	pop	r27
    9ff2:	af 91       	pop	r26
    9ff4:	9f 91       	pop	r25
    9ff6:	8f 91       	pop	r24
    9ff8:	7f 91       	pop	r23
    9ffa:	6f 91       	pop	r22
    9ffc:	5f 91       	pop	r21
    9ffe:	4f 91       	pop	r20
    a000:	3f 91       	pop	r19
    a002:	2f 91       	pop	r18
    a004:	0f 90       	pop	r0
    a006:	0b be       	out	0x3b, r0	; 59
    a008:	0f 90       	pop	r0
    a00a:	0f be       	out	0x3f, r0	; 63
    a00c:	0f 90       	pop	r0
    a00e:	1f 90       	pop	r1
    a010:	18 95       	reti

0000a012 <__vector_110>:
    a012:	1f 92       	push	r1
    a014:	0f 92       	push	r0
    a016:	0f b6       	in	r0, 0x3f	; 63
    a018:	0f 92       	push	r0
    a01a:	11 24       	eor	r1, r1
    a01c:	0b b6       	in	r0, 0x3b	; 59
    a01e:	0f 92       	push	r0
    a020:	2f 93       	push	r18
    a022:	3f 93       	push	r19
    a024:	4f 93       	push	r20
    a026:	5f 93       	push	r21
    a028:	6f 93       	push	r22
    a02a:	7f 93       	push	r23
    a02c:	8f 93       	push	r24
    a02e:	9f 93       	push	r25
    a030:	af 93       	push	r26
    a032:	bf 93       	push	r27
    a034:	ef 93       	push	r30
    a036:	ff 93       	push	r31
    a038:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <tc_tcf0_cca_callback>
    a03c:	f0 91 3b 23 	lds	r31, 0x233B	; 0x80233b <tc_tcf0_cca_callback+0x1>
    a040:	30 97       	sbiw	r30, 0x00	; 0
    a042:	09 f0       	breq	.+2      	; 0xa046 <__vector_110+0x34>
    a044:	19 95       	eicall
    a046:	ff 91       	pop	r31
    a048:	ef 91       	pop	r30
    a04a:	bf 91       	pop	r27
    a04c:	af 91       	pop	r26
    a04e:	9f 91       	pop	r25
    a050:	8f 91       	pop	r24
    a052:	7f 91       	pop	r23
    a054:	6f 91       	pop	r22
    a056:	5f 91       	pop	r21
    a058:	4f 91       	pop	r20
    a05a:	3f 91       	pop	r19
    a05c:	2f 91       	pop	r18
    a05e:	0f 90       	pop	r0
    a060:	0b be       	out	0x3b, r0	; 59
    a062:	0f 90       	pop	r0
    a064:	0f be       	out	0x3f, r0	; 63
    a066:	0f 90       	pop	r0
    a068:	1f 90       	pop	r1
    a06a:	18 95       	reti

0000a06c <__vector_111>:
    a06c:	1f 92       	push	r1
    a06e:	0f 92       	push	r0
    a070:	0f b6       	in	r0, 0x3f	; 63
    a072:	0f 92       	push	r0
    a074:	11 24       	eor	r1, r1
    a076:	0b b6       	in	r0, 0x3b	; 59
    a078:	0f 92       	push	r0
    a07a:	2f 93       	push	r18
    a07c:	3f 93       	push	r19
    a07e:	4f 93       	push	r20
    a080:	5f 93       	push	r21
    a082:	6f 93       	push	r22
    a084:	7f 93       	push	r23
    a086:	8f 93       	push	r24
    a088:	9f 93       	push	r25
    a08a:	af 93       	push	r26
    a08c:	bf 93       	push	r27
    a08e:	ef 93       	push	r30
    a090:	ff 93       	push	r31
    a092:	e0 91 38 23 	lds	r30, 0x2338	; 0x802338 <tc_tcf0_ccb_callback>
    a096:	f0 91 39 23 	lds	r31, 0x2339	; 0x802339 <tc_tcf0_ccb_callback+0x1>
    a09a:	30 97       	sbiw	r30, 0x00	; 0
    a09c:	09 f0       	breq	.+2      	; 0xa0a0 <__vector_111+0x34>
    a09e:	19 95       	eicall
    a0a0:	ff 91       	pop	r31
    a0a2:	ef 91       	pop	r30
    a0a4:	bf 91       	pop	r27
    a0a6:	af 91       	pop	r26
    a0a8:	9f 91       	pop	r25
    a0aa:	8f 91       	pop	r24
    a0ac:	7f 91       	pop	r23
    a0ae:	6f 91       	pop	r22
    a0b0:	5f 91       	pop	r21
    a0b2:	4f 91       	pop	r20
    a0b4:	3f 91       	pop	r19
    a0b6:	2f 91       	pop	r18
    a0b8:	0f 90       	pop	r0
    a0ba:	0b be       	out	0x3b, r0	; 59
    a0bc:	0f 90       	pop	r0
    a0be:	0f be       	out	0x3f, r0	; 63
    a0c0:	0f 90       	pop	r0
    a0c2:	1f 90       	pop	r1
    a0c4:	18 95       	reti

0000a0c6 <__vector_112>:
    a0c6:	1f 92       	push	r1
    a0c8:	0f 92       	push	r0
    a0ca:	0f b6       	in	r0, 0x3f	; 63
    a0cc:	0f 92       	push	r0
    a0ce:	11 24       	eor	r1, r1
    a0d0:	0b b6       	in	r0, 0x3b	; 59
    a0d2:	0f 92       	push	r0
    a0d4:	2f 93       	push	r18
    a0d6:	3f 93       	push	r19
    a0d8:	4f 93       	push	r20
    a0da:	5f 93       	push	r21
    a0dc:	6f 93       	push	r22
    a0de:	7f 93       	push	r23
    a0e0:	8f 93       	push	r24
    a0e2:	9f 93       	push	r25
    a0e4:	af 93       	push	r26
    a0e6:	bf 93       	push	r27
    a0e8:	ef 93       	push	r30
    a0ea:	ff 93       	push	r31
    a0ec:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <tc_tcf0_ccc_callback>
    a0f0:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <tc_tcf0_ccc_callback+0x1>
    a0f4:	30 97       	sbiw	r30, 0x00	; 0
    a0f6:	09 f0       	breq	.+2      	; 0xa0fa <__vector_112+0x34>
    a0f8:	19 95       	eicall
    a0fa:	ff 91       	pop	r31
    a0fc:	ef 91       	pop	r30
    a0fe:	bf 91       	pop	r27
    a100:	af 91       	pop	r26
    a102:	9f 91       	pop	r25
    a104:	8f 91       	pop	r24
    a106:	7f 91       	pop	r23
    a108:	6f 91       	pop	r22
    a10a:	5f 91       	pop	r21
    a10c:	4f 91       	pop	r20
    a10e:	3f 91       	pop	r19
    a110:	2f 91       	pop	r18
    a112:	0f 90       	pop	r0
    a114:	0b be       	out	0x3b, r0	; 59
    a116:	0f 90       	pop	r0
    a118:	0f be       	out	0x3f, r0	; 63
    a11a:	0f 90       	pop	r0
    a11c:	1f 90       	pop	r1
    a11e:	18 95       	reti

0000a120 <__vector_113>:
    a120:	1f 92       	push	r1
    a122:	0f 92       	push	r0
    a124:	0f b6       	in	r0, 0x3f	; 63
    a126:	0f 92       	push	r0
    a128:	11 24       	eor	r1, r1
    a12a:	0b b6       	in	r0, 0x3b	; 59
    a12c:	0f 92       	push	r0
    a12e:	2f 93       	push	r18
    a130:	3f 93       	push	r19
    a132:	4f 93       	push	r20
    a134:	5f 93       	push	r21
    a136:	6f 93       	push	r22
    a138:	7f 93       	push	r23
    a13a:	8f 93       	push	r24
    a13c:	9f 93       	push	r25
    a13e:	af 93       	push	r26
    a140:	bf 93       	push	r27
    a142:	ef 93       	push	r30
    a144:	ff 93       	push	r31
    a146:	e0 91 34 23 	lds	r30, 0x2334	; 0x802334 <tc_tcf0_ccd_callback>
    a14a:	f0 91 35 23 	lds	r31, 0x2335	; 0x802335 <tc_tcf0_ccd_callback+0x1>
    a14e:	30 97       	sbiw	r30, 0x00	; 0
    a150:	09 f0       	breq	.+2      	; 0xa154 <__vector_113+0x34>
    a152:	19 95       	eicall
    a154:	ff 91       	pop	r31
    a156:	ef 91       	pop	r30
    a158:	bf 91       	pop	r27
    a15a:	af 91       	pop	r26
    a15c:	9f 91       	pop	r25
    a15e:	8f 91       	pop	r24
    a160:	7f 91       	pop	r23
    a162:	6f 91       	pop	r22
    a164:	5f 91       	pop	r21
    a166:	4f 91       	pop	r20
    a168:	3f 91       	pop	r19
    a16a:	2f 91       	pop	r18
    a16c:	0f 90       	pop	r0
    a16e:	0b be       	out	0x3b, r0	; 59
    a170:	0f 90       	pop	r0
    a172:	0f be       	out	0x3f, r0	; 63
    a174:	0f 90       	pop	r0
    a176:	1f 90       	pop	r1
    a178:	18 95       	reti

0000a17a <tc_enable>:
    a17a:	1f 93       	push	r17
    a17c:	cf 93       	push	r28
    a17e:	df 93       	push	r29
    a180:	1f 92       	push	r1
    a182:	1f 92       	push	r1
    a184:	cd b7       	in	r28, 0x3d	; 61
    a186:	de b7       	in	r29, 0x3e	; 62
    a188:	2f b7       	in	r18, 0x3f	; 63
    a18a:	2a 83       	std	Y+2, r18	; 0x02
    a18c:	f8 94       	cli
    a18e:	1a 81       	ldd	r17, Y+2	; 0x02
    a190:	28 2f       	mov	r18, r24
    a192:	39 2f       	mov	r19, r25
    a194:	21 15       	cp	r18, r1
    a196:	88 e0       	ldi	r24, 0x08	; 8
    a198:	38 07       	cpc	r19, r24
    a19a:	49 f4       	brne	.+18     	; 0xa1ae <tc_enable+0x34>
    a19c:	61 e0       	ldi	r22, 0x01	; 1
    a19e:	83 e0       	ldi	r24, 0x03	; 3
    a1a0:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a1a4:	64 e0       	ldi	r22, 0x04	; 4
    a1a6:	83 e0       	ldi	r24, 0x03	; 3
    a1a8:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a1ac:	4f c0       	rjmp	.+158    	; 0xa24c <tc_enable+0xd2>
    a1ae:	20 34       	cpi	r18, 0x40	; 64
    a1b0:	88 e0       	ldi	r24, 0x08	; 8
    a1b2:	38 07       	cpc	r19, r24
    a1b4:	49 f4       	brne	.+18     	; 0xa1c8 <tc_enable+0x4e>
    a1b6:	62 e0       	ldi	r22, 0x02	; 2
    a1b8:	83 e0       	ldi	r24, 0x03	; 3
    a1ba:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a1be:	64 e0       	ldi	r22, 0x04	; 4
    a1c0:	83 e0       	ldi	r24, 0x03	; 3
    a1c2:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a1c6:	42 c0       	rjmp	.+132    	; 0xa24c <tc_enable+0xd2>
    a1c8:	21 15       	cp	r18, r1
    a1ca:	89 e0       	ldi	r24, 0x09	; 9
    a1cc:	38 07       	cpc	r19, r24
    a1ce:	49 f4       	brne	.+18     	; 0xa1e2 <tc_enable+0x68>
    a1d0:	61 e0       	ldi	r22, 0x01	; 1
    a1d2:	84 e0       	ldi	r24, 0x04	; 4
    a1d4:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a1d8:	64 e0       	ldi	r22, 0x04	; 4
    a1da:	84 e0       	ldi	r24, 0x04	; 4
    a1dc:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a1e0:	35 c0       	rjmp	.+106    	; 0xa24c <tc_enable+0xd2>
    a1e2:	20 34       	cpi	r18, 0x40	; 64
    a1e4:	89 e0       	ldi	r24, 0x09	; 9
    a1e6:	38 07       	cpc	r19, r24
    a1e8:	49 f4       	brne	.+18     	; 0xa1fc <tc_enable+0x82>
    a1ea:	62 e0       	ldi	r22, 0x02	; 2
    a1ec:	84 e0       	ldi	r24, 0x04	; 4
    a1ee:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a1f2:	64 e0       	ldi	r22, 0x04	; 4
    a1f4:	84 e0       	ldi	r24, 0x04	; 4
    a1f6:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a1fa:	28 c0       	rjmp	.+80     	; 0xa24c <tc_enable+0xd2>
    a1fc:	21 15       	cp	r18, r1
    a1fe:	8a e0       	ldi	r24, 0x0A	; 10
    a200:	38 07       	cpc	r19, r24
    a202:	49 f4       	brne	.+18     	; 0xa216 <tc_enable+0x9c>
    a204:	61 e0       	ldi	r22, 0x01	; 1
    a206:	85 e0       	ldi	r24, 0x05	; 5
    a208:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a20c:	64 e0       	ldi	r22, 0x04	; 4
    a20e:	85 e0       	ldi	r24, 0x05	; 5
    a210:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a214:	1b c0       	rjmp	.+54     	; 0xa24c <tc_enable+0xd2>
    a216:	20 34       	cpi	r18, 0x40	; 64
    a218:	8a e0       	ldi	r24, 0x0A	; 10
    a21a:	38 07       	cpc	r19, r24
    a21c:	49 f4       	brne	.+18     	; 0xa230 <tc_enable+0xb6>
    a21e:	62 e0       	ldi	r22, 0x02	; 2
    a220:	85 e0       	ldi	r24, 0x05	; 5
    a222:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a226:	64 e0       	ldi	r22, 0x04	; 4
    a228:	85 e0       	ldi	r24, 0x05	; 5
    a22a:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a22e:	0e c0       	rjmp	.+28     	; 0xa24c <tc_enable+0xd2>
    a230:	21 15       	cp	r18, r1
    a232:	3b 40       	sbci	r19, 0x0B	; 11
    a234:	49 f4       	brne	.+18     	; 0xa248 <tc_enable+0xce>
    a236:	61 e0       	ldi	r22, 0x01	; 1
    a238:	86 e0       	ldi	r24, 0x06	; 6
    a23a:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a23e:	64 e0       	ldi	r22, 0x04	; 4
    a240:	86 e0       	ldi	r24, 0x06	; 6
    a242:	0e 94 31 6c 	call	0xd862	; 0xd862 <sysclk_enable_module>
    a246:	02 c0       	rjmp	.+4      	; 0xa24c <tc_enable+0xd2>
    a248:	1f bf       	out	0x3f, r17	; 63
    a24a:	10 c0       	rjmp	.+32     	; 0xa26c <tc_enable+0xf2>
    a24c:	80 91 68 2e 	lds	r24, 0x2E68	; 0x802e68 <sleepmgr_locks+0x1>
    a250:	8f 3f       	cpi	r24, 0xFF	; 255
    a252:	09 f4       	brne	.+2      	; 0xa256 <tc_enable+0xdc>
    a254:	ff cf       	rjmp	.-2      	; 0xa254 <tc_enable+0xda>
    a256:	8f b7       	in	r24, 0x3f	; 63
    a258:	89 83       	std	Y+1, r24	; 0x01
    a25a:	f8 94       	cli
    a25c:	99 81       	ldd	r25, Y+1	; 0x01
    a25e:	e7 e6       	ldi	r30, 0x67	; 103
    a260:	fe e2       	ldi	r31, 0x2E	; 46
    a262:	81 81       	ldd	r24, Z+1	; 0x01
    a264:	8f 5f       	subi	r24, 0xFF	; 255
    a266:	81 83       	std	Z+1, r24	; 0x01
    a268:	9f bf       	out	0x3f, r25	; 63
    a26a:	1f bf       	out	0x3f, r17	; 63
    a26c:	0f 90       	pop	r0
    a26e:	0f 90       	pop	r0
    a270:	df 91       	pop	r29
    a272:	cf 91       	pop	r28
    a274:	1f 91       	pop	r17
    a276:	08 95       	ret

0000a278 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    a278:	81 15       	cp	r24, r1
    a27a:	28 e0       	ldi	r18, 0x08	; 8
    a27c:	92 07       	cpc	r25, r18
    a27e:	29 f4       	brne	.+10     	; 0xa28a <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    a280:	60 93 7a 23 	sts	0x237A, r22	; 0x80237a <tc_tcc0_ovf_callback>
    a284:	70 93 7b 23 	sts	0x237B, r23	; 0x80237b <tc_tcc0_ovf_callback+0x1>
    a288:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    a28a:	80 34       	cpi	r24, 0x40	; 64
    a28c:	28 e0       	ldi	r18, 0x08	; 8
    a28e:	92 07       	cpc	r25, r18
    a290:	29 f4       	brne	.+10     	; 0xa29c <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    a292:	60 93 6e 23 	sts	0x236E, r22	; 0x80236e <tc_tcc1_ovf_callback>
    a296:	70 93 6f 23 	sts	0x236F, r23	; 0x80236f <tc_tcc1_ovf_callback+0x1>
    a29a:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    a29c:	81 15       	cp	r24, r1
    a29e:	29 e0       	ldi	r18, 0x09	; 9
    a2a0:	92 07       	cpc	r25, r18
    a2a2:	29 f4       	brne	.+10     	; 0xa2ae <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    a2a4:	60 93 66 23 	sts	0x2366, r22	; 0x802366 <tc_tcd0_ovf_callback>
    a2a8:	70 93 67 23 	sts	0x2367, r23	; 0x802367 <tc_tcd0_ovf_callback+0x1>
    a2ac:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    a2ae:	80 34       	cpi	r24, 0x40	; 64
    a2b0:	29 e0       	ldi	r18, 0x09	; 9
    a2b2:	92 07       	cpc	r25, r18
    a2b4:	29 f4       	brne	.+10     	; 0xa2c0 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    a2b6:	60 93 5a 23 	sts	0x235A, r22	; 0x80235a <tc_tcd1_ovf_callback>
    a2ba:	70 93 5b 23 	sts	0x235B, r23	; 0x80235b <tc_tcd1_ovf_callback+0x1>
    a2be:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    a2c0:	81 15       	cp	r24, r1
    a2c2:	2a e0       	ldi	r18, 0x0A	; 10
    a2c4:	92 07       	cpc	r25, r18
    a2c6:	29 f4       	brne	.+10     	; 0xa2d2 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    a2c8:	60 93 52 23 	sts	0x2352, r22	; 0x802352 <tc_tce0_ovf_callback>
    a2cc:	70 93 53 23 	sts	0x2353, r23	; 0x802353 <tc_tce0_ovf_callback+0x1>
    a2d0:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    a2d2:	80 34       	cpi	r24, 0x40	; 64
    a2d4:	2a e0       	ldi	r18, 0x0A	; 10
    a2d6:	92 07       	cpc	r25, r18
    a2d8:	29 f4       	brne	.+10     	; 0xa2e4 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    a2da:	60 93 46 23 	sts	0x2346, r22	; 0x802346 <tc_tce1_ovf_callback>
    a2de:	70 93 47 23 	sts	0x2347, r23	; 0x802347 <tc_tce1_ovf_callback+0x1>
    a2e2:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    a2e4:	81 15       	cp	r24, r1
    a2e6:	9b 40       	sbci	r25, 0x0B	; 11
    a2e8:	21 f4       	brne	.+8      	; 0xa2f2 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    a2ea:	60 93 3e 23 	sts	0x233E, r22	; 0x80233e <tc_tcf0_ovf_callback>
    a2ee:	70 93 3f 23 	sts	0x233F, r23	; 0x80233f <tc_tcf0_ovf_callback+0x1>
    a2f2:	08 95       	ret

0000a2f4 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    a2f4:	cf 93       	push	r28
    a2f6:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    a2f8:	e0 91 7c 23 	lds	r30, 0x237C	; 0x80237c <transfer>
    a2fc:	f0 91 7d 23 	lds	r31, 0x237D	; 0x80237d <transfer+0x1>
    a300:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    a302:	83 ff       	sbrs	r24, 3
    a304:	08 c0       	rjmp	.+16     	; 0xa316 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    a306:	88 60       	ori	r24, 0x08	; 8
    a308:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    a30a:	83 e0       	ldi	r24, 0x03	; 3
    a30c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    a30e:	86 ef       	ldi	r24, 0xF6	; 246
    a310:	80 93 86 23 	sts	0x2386, r24	; 0x802386 <transfer+0xa>
    a314:	83 c0       	rjmp	.+262    	; 0xa41c <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    a316:	98 2f       	mov	r25, r24
    a318:	94 71       	andi	r25, 0x14	; 20
    a31a:	31 f0       	breq	.+12     	; 0xa328 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    a31c:	83 e0       	ldi	r24, 0x03	; 3
    a31e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    a320:	8f ef       	ldi	r24, 0xFF	; 255
    a322:	80 93 86 23 	sts	0x2386, r24	; 0x802386 <transfer+0xa>
    a326:	7a c0       	rjmp	.+244    	; 0xa41c <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    a328:	86 ff       	sbrs	r24, 6
    a32a:	43 c0       	rjmp	.+134    	; 0xa3b2 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    a32c:	cc e7       	ldi	r28, 0x7C	; 124
    a32e:	d3 e2       	ldi	r29, 0x23	; 35
    a330:	aa 81       	ldd	r26, Y+2	; 0x02
    a332:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    a334:	8c 81       	ldd	r24, Y+4	; 0x04
    a336:	9d 81       	ldd	r25, Y+5	; 0x05
    a338:	14 96       	adiw	r26, 0x04	; 4
    a33a:	2d 91       	ld	r18, X+
    a33c:	3c 91       	ld	r19, X
    a33e:	15 97       	sbiw	r26, 0x05	; 5
    a340:	82 17       	cp	r24, r18
    a342:	93 07       	cpc	r25, r19
    a344:	6c f4       	brge	.+26     	; 0xa360 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    a346:	9c 01       	movw	r18, r24
    a348:	2f 5f       	subi	r18, 0xFF	; 255
    a34a:	3f 4f       	sbci	r19, 0xFF	; 255
    a34c:	20 93 80 23 	sts	0x2380, r18	; 0x802380 <transfer+0x4>
    a350:	30 93 81 23 	sts	0x2381, r19	; 0x802381 <transfer+0x5>
    a354:	a8 0f       	add	r26, r24
    a356:	b9 1f       	adc	r27, r25
    a358:	11 96       	adiw	r26, 0x01	; 1
    a35a:	8c 91       	ld	r24, X
    a35c:	87 83       	std	Z+7, r24	; 0x07
    a35e:	5e c0       	rjmp	.+188    	; 0xa41c <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    a360:	80 91 82 23 	lds	r24, 0x2382	; 0x802382 <transfer+0x6>
    a364:	90 91 83 23 	lds	r25, 0x2383	; 0x802383 <transfer+0x7>
    a368:	18 96       	adiw	r26, 0x08	; 8
    a36a:	2d 91       	ld	r18, X+
    a36c:	3c 91       	ld	r19, X
    a36e:	19 97       	sbiw	r26, 0x09	; 9
    a370:	82 17       	cp	r24, r18
    a372:	93 07       	cpc	r25, r19
    a374:	c8 f4       	brcc	.+50     	; 0xa3a8 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    a376:	20 91 84 23 	lds	r18, 0x2384	; 0x802384 <transfer+0x8>
    a37a:	22 23       	and	r18, r18
    a37c:	21 f0       	breq	.+8      	; 0xa386 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    a37e:	86 81       	ldd	r24, Z+6	; 0x06
    a380:	81 60       	ori	r24, 0x01	; 1
    a382:	86 83       	std	Z+6, r24	; 0x06
    a384:	4b c0       	rjmp	.+150    	; 0xa41c <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    a386:	16 96       	adiw	r26, 0x06	; 6
    a388:	2d 91       	ld	r18, X+
    a38a:	3c 91       	ld	r19, X
    a38c:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    a38e:	ac 01       	movw	r20, r24
    a390:	4f 5f       	subi	r20, 0xFF	; 255
    a392:	5f 4f       	sbci	r21, 0xFF	; 255
    a394:	40 93 82 23 	sts	0x2382, r20	; 0x802382 <transfer+0x6>
    a398:	50 93 83 23 	sts	0x2383, r21	; 0x802383 <transfer+0x7>
    a39c:	d9 01       	movw	r26, r18
    a39e:	a8 0f       	add	r26, r24
    a3a0:	b9 1f       	adc	r27, r25
    a3a2:	8c 91       	ld	r24, X
    a3a4:	87 83       	std	Z+7, r24	; 0x07
    a3a6:	3a c0       	rjmp	.+116    	; 0xa41c <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    a3a8:	83 e0       	ldi	r24, 0x03	; 3
    a3aa:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    a3ac:	10 92 86 23 	sts	0x2386, r1	; 0x802386 <transfer+0xa>
    a3b0:	35 c0       	rjmp	.+106    	; 0xa41c <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    a3b2:	88 23       	and	r24, r24
    a3b4:	84 f5       	brge	.+96     	; 0xa416 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    a3b6:	ac e7       	ldi	r26, 0x7C	; 124
    a3b8:	b3 e2       	ldi	r27, 0x23	; 35
    a3ba:	12 96       	adiw	r26, 0x02	; 2
    a3bc:	cd 91       	ld	r28, X+
    a3be:	dc 91       	ld	r29, X
    a3c0:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    a3c2:	16 96       	adiw	r26, 0x06	; 6
    a3c4:	8d 91       	ld	r24, X+
    a3c6:	9c 91       	ld	r25, X
    a3c8:	17 97       	sbiw	r26, 0x07	; 7
    a3ca:	28 85       	ldd	r18, Y+8	; 0x08
    a3cc:	39 85       	ldd	r19, Y+9	; 0x09
    a3ce:	82 17       	cp	r24, r18
    a3d0:	93 07       	cpc	r25, r19
    a3d2:	d8 f4       	brcc	.+54     	; 0xa40a <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    a3d4:	6e 81       	ldd	r22, Y+6	; 0x06
    a3d6:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    a3d8:	9c 01       	movw	r18, r24
    a3da:	2f 5f       	subi	r18, 0xFF	; 255
    a3dc:	3f 4f       	sbci	r19, 0xFF	; 255
    a3de:	20 93 82 23 	sts	0x2382, r18	; 0x802382 <transfer+0x6>
    a3e2:	30 93 83 23 	sts	0x2383, r19	; 0x802383 <transfer+0x7>
    a3e6:	47 81       	ldd	r20, Z+7	; 0x07
    a3e8:	db 01       	movw	r26, r22
    a3ea:	a8 0f       	add	r26, r24
    a3ec:	b9 1f       	adc	r27, r25
    a3ee:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    a3f0:	88 85       	ldd	r24, Y+8	; 0x08
    a3f2:	99 85       	ldd	r25, Y+9	; 0x09
    a3f4:	28 17       	cp	r18, r24
    a3f6:	39 07       	cpc	r19, r25
    a3f8:	18 f4       	brcc	.+6      	; 0xa400 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    a3fa:	82 e0       	ldi	r24, 0x02	; 2
    a3fc:	83 83       	std	Z+3, r24	; 0x03
    a3fe:	0e c0       	rjmp	.+28     	; 0xa41c <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    a400:	87 e0       	ldi	r24, 0x07	; 7
    a402:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    a404:	10 92 86 23 	sts	0x2386, r1	; 0x802386 <transfer+0xa>
    a408:	09 c0       	rjmp	.+18     	; 0xa41c <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    a40a:	83 e0       	ldi	r24, 0x03	; 3
    a40c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    a40e:	89 ef       	ldi	r24, 0xF9	; 249
    a410:	80 93 86 23 	sts	0x2386, r24	; 0x802386 <transfer+0xa>
    a414:	03 c0       	rjmp	.+6      	; 0xa41c <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    a416:	8b ef       	ldi	r24, 0xFB	; 251
    a418:	80 93 86 23 	sts	0x2386, r24	; 0x802386 <transfer+0xa>
	}
}
    a41c:	df 91       	pop	r29
    a41e:	cf 91       	pop	r28
    a420:	08 95       	ret

0000a422 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    a422:	1f 92       	push	r1
    a424:	0f 92       	push	r0
    a426:	0f b6       	in	r0, 0x3f	; 63
    a428:	0f 92       	push	r0
    a42a:	11 24       	eor	r1, r1
    a42c:	0b b6       	in	r0, 0x3b	; 59
    a42e:	0f 92       	push	r0
    a430:	2f 93       	push	r18
    a432:	3f 93       	push	r19
    a434:	4f 93       	push	r20
    a436:	5f 93       	push	r21
    a438:	6f 93       	push	r22
    a43a:	7f 93       	push	r23
    a43c:	8f 93       	push	r24
    a43e:	9f 93       	push	r25
    a440:	af 93       	push	r26
    a442:	bf 93       	push	r27
    a444:	ef 93       	push	r30
    a446:	ff 93       	push	r31
    a448:	55 df       	rcall	.-342    	; 0xa2f4 <twim_interrupt_handler>
    a44a:	ff 91       	pop	r31
    a44c:	ef 91       	pop	r30
    a44e:	bf 91       	pop	r27
    a450:	af 91       	pop	r26
    a452:	9f 91       	pop	r25
    a454:	8f 91       	pop	r24
    a456:	7f 91       	pop	r23
    a458:	6f 91       	pop	r22
    a45a:	5f 91       	pop	r21
    a45c:	4f 91       	pop	r20
    a45e:	3f 91       	pop	r19
    a460:	2f 91       	pop	r18
    a462:	0f 90       	pop	r0
    a464:	0b be       	out	0x3b, r0	; 59
    a466:	0f 90       	pop	r0
    a468:	0f be       	out	0x3f, r0	; 63
    a46a:	0f 90       	pop	r0
    a46c:	1f 90       	pop	r1
    a46e:	18 95       	reti

0000a470 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    a470:	1f 92       	push	r1
    a472:	0f 92       	push	r0
    a474:	0f b6       	in	r0, 0x3f	; 63
    a476:	0f 92       	push	r0
    a478:	11 24       	eor	r1, r1
    a47a:	0b b6       	in	r0, 0x3b	; 59
    a47c:	0f 92       	push	r0
    a47e:	2f 93       	push	r18
    a480:	3f 93       	push	r19
    a482:	4f 93       	push	r20
    a484:	5f 93       	push	r21
    a486:	6f 93       	push	r22
    a488:	7f 93       	push	r23
    a48a:	8f 93       	push	r24
    a48c:	9f 93       	push	r25
    a48e:	af 93       	push	r26
    a490:	bf 93       	push	r27
    a492:	ef 93       	push	r30
    a494:	ff 93       	push	r31
    a496:	2e df       	rcall	.-420    	; 0xa2f4 <twim_interrupt_handler>
    a498:	ff 91       	pop	r31
    a49a:	ef 91       	pop	r30
    a49c:	bf 91       	pop	r27
    a49e:	af 91       	pop	r26
    a4a0:	9f 91       	pop	r25
    a4a2:	8f 91       	pop	r24
    a4a4:	7f 91       	pop	r23
    a4a6:	6f 91       	pop	r22
    a4a8:	5f 91       	pop	r21
    a4aa:	4f 91       	pop	r20
    a4ac:	3f 91       	pop	r19
    a4ae:	2f 91       	pop	r18
    a4b0:	0f 90       	pop	r0
    a4b2:	0b be       	out	0x3b, r0	; 59
    a4b4:	0f 90       	pop	r0
    a4b6:	0f be       	out	0x3f, r0	; 63
    a4b8:	0f 90       	pop	r0
    a4ba:	1f 90       	pop	r1
    a4bc:	18 95       	reti

0000a4be <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    a4be:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    a4c0:	db 01       	movw	r26, r22
    a4c2:	14 96       	adiw	r26, 0x04	; 4
    a4c4:	8c 91       	ld	r24, X
    a4c6:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    a4c8:	88 eb       	ldi	r24, 0xB8	; 184
    a4ca:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    a4cc:	81 e0       	ldi	r24, 0x01	; 1
    a4ce:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    a4d0:	ec e7       	ldi	r30, 0x7C	; 124
    a4d2:	f3 e2       	ldi	r31, 0x23	; 35
    a4d4:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    a4d6:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    a4d8:	e0 ea       	ldi	r30, 0xA0	; 160
    a4da:	f0 e0       	ldi	r31, 0x00	; 0
    a4dc:	82 81       	ldd	r24, Z+2	; 0x02
    a4de:	82 60       	ori	r24, 0x02	; 2
    a4e0:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    a4e2:	78 94       	sei

	return STATUS_OK;
}
    a4e4:	80 e0       	ldi	r24, 0x00	; 0
    a4e6:	08 95       	ret

0000a4e8 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    a4e8:	cf 93       	push	r28
    a4ea:	df 93       	push	r29
    a4ec:	1f 92       	push	r1
    a4ee:	cd b7       	in	r28, 0x3d	; 61
    a4f0:	de b7       	in	r29, 0x3e	; 62
    a4f2:	9c 01       	movw	r18, r24
    a4f4:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    a4f6:	89 2b       	or	r24, r25
    a4f8:	09 f4       	brne	.+2      	; 0xa4fc <twi_master_transfer+0x14>
    a4fa:	51 c0       	rjmp	.+162    	; 0xa59e <twi_master_transfer+0xb6>
    a4fc:	30 97       	sbiw	r30, 0x00	; 0
    a4fe:	09 f4       	brne	.+2      	; 0xa502 <twi_master_transfer+0x1a>
    a500:	50 c0       	rjmp	.+160    	; 0xa5a2 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    a502:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    a504:	80 91 85 23 	lds	r24, 0x2385	; 0x802385 <transfer+0x9>
    a508:	88 23       	and	r24, r24
    a50a:	19 f0       	breq	.+6      	; 0xa512 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    a50c:	99 23       	and	r25, r25
    a50e:	f1 f3       	breq	.-4      	; 0xa50c <twi_master_transfer+0x24>
    a510:	4a c0       	rjmp	.+148    	; 0xa5a6 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    a512:	8f b7       	in	r24, 0x3f	; 63
    a514:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    a516:	f8 94       	cli
	return flags;
    a518:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    a51a:	ac e7       	ldi	r26, 0x7C	; 124
    a51c:	b3 e2       	ldi	r27, 0x23	; 35
    a51e:	91 e0       	ldi	r25, 0x01	; 1
    a520:	19 96       	adiw	r26, 0x09	; 9
    a522:	9c 93       	st	X, r25
    a524:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    a526:	90 e8       	ldi	r25, 0x80	; 128
    a528:	1a 96       	adiw	r26, 0x0a	; 10
    a52a:	9c 93       	st	X, r25
    a52c:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    a52e:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    a530:	2d 93       	st	X+, r18
    a532:	3c 93       	st	X, r19
    a534:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    a536:	12 96       	adiw	r26, 0x02	; 2
    a538:	6d 93       	st	X+, r22
    a53a:	7c 93       	st	X, r23
    a53c:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    a53e:	14 96       	adiw	r26, 0x04	; 4
    a540:	1d 92       	st	X+, r1
    a542:	1c 92       	st	X, r1
    a544:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    a546:	16 96       	adiw	r26, 0x06	; 6
    a548:	1d 92       	st	X+, r1
    a54a:	1c 92       	st	X, r1
    a54c:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    a54e:	18 96       	adiw	r26, 0x08	; 8
    a550:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    a552:	80 81       	ld	r24, Z
    a554:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    a556:	64 81       	ldd	r22, Z+4	; 0x04
    a558:	75 81       	ldd	r23, Z+5	; 0x05
    a55a:	67 2b       	or	r22, r23
    a55c:	11 f4       	brne	.+4      	; 0xa562 <twi_master_transfer+0x7a>
    a55e:	41 11       	cpse	r20, r1
    a560:	03 c0       	rjmp	.+6      	; 0xa568 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    a562:	f9 01       	movw	r30, r18
    a564:	86 83       	std	Z+6, r24	; 0x06
    a566:	03 c0       	rjmp	.+6      	; 0xa56e <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    a568:	81 60       	ori	r24, 0x01	; 1
    a56a:	f9 01       	movw	r30, r18
    a56c:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    a56e:	ec e7       	ldi	r30, 0x7C	; 124
    a570:	f3 e2       	ldi	r31, 0x23	; 35
    a572:	92 85       	ldd	r25, Z+10	; 0x0a
    a574:	90 38       	cpi	r25, 0x80	; 128
    a576:	e9 f3       	breq	.-6      	; 0xa572 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    a578:	f9 01       	movw	r30, r18
    a57a:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    a57c:	83 70       	andi	r24, 0x03	; 3
    a57e:	81 30       	cpi	r24, 0x01	; 1
    a580:	49 f0       	breq	.+18     	; 0xa594 <twi_master_transfer+0xac>
    a582:	ac e7       	ldi	r26, 0x7C	; 124
    a584:	b3 e2       	ldi	r27, 0x23	; 35
    a586:	ed 91       	ld	r30, X+
    a588:	fc 91       	ld	r31, X
    a58a:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    a58c:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    a58e:	83 70       	andi	r24, 0x03	; 3
    a590:	81 30       	cpi	r24, 0x01	; 1
    a592:	c9 f7       	brne	.-14     	; 0xa586 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    a594:	ec e7       	ldi	r30, 0x7C	; 124
    a596:	f3 e2       	ldi	r31, 0x23	; 35
    a598:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    a59a:	11 86       	std	Z+9, r1	; 0x09
    a59c:	05 c0       	rjmp	.+10     	; 0xa5a8 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    a59e:	88 ef       	ldi	r24, 0xF8	; 248
    a5a0:	03 c0       	rjmp	.+6      	; 0xa5a8 <twi_master_transfer+0xc0>
    a5a2:	88 ef       	ldi	r24, 0xF8	; 248
    a5a4:	01 c0       	rjmp	.+2      	; 0xa5a8 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    a5a6:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    a5a8:	0f 90       	pop	r0
    a5aa:	df 91       	pop	r29
    a5ac:	cf 91       	pop	r28
    a5ae:	08 95       	ret

0000a5b0 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    a5b0:	cf 93       	push	r28
    a5b2:	df 93       	push	r29
    a5b4:	1f 92       	push	r1
    a5b6:	1f 92       	push	r1
    a5b8:	cd b7       	in	r28, 0x3d	; 61
    a5ba:	de b7       	in	r29, 0x3e	; 62
    a5bc:	81 11       	cpse	r24, r1
    a5be:	26 c0       	rjmp	.+76     	; 0xa60c <udd_sleep_mode+0x5c>
    a5c0:	90 91 b4 24 	lds	r25, 0x24B4	; 0x8024b4 <udd_b_idle>
    a5c4:	99 23       	and	r25, r25
    a5c6:	f9 f0       	breq	.+62     	; 0xa606 <udd_sleep_mode+0x56>
    a5c8:	90 91 68 2e 	lds	r25, 0x2E68	; 0x802e68 <sleepmgr_locks+0x1>
    a5cc:	91 11       	cpse	r25, r1
    a5ce:	01 c0       	rjmp	.+2      	; 0xa5d2 <udd_sleep_mode+0x22>
    a5d0:	ff cf       	rjmp	.-2      	; 0xa5d0 <udd_sleep_mode+0x20>
    a5d2:	9f b7       	in	r25, 0x3f	; 63
    a5d4:	9a 83       	std	Y+2, r25	; 0x02
    a5d6:	f8 94       	cli
    a5d8:	2a 81       	ldd	r18, Y+2	; 0x02
    a5da:	e7 e6       	ldi	r30, 0x67	; 103
    a5dc:	fe e2       	ldi	r31, 0x2E	; 46
    a5de:	91 81       	ldd	r25, Z+1	; 0x01
    a5e0:	91 50       	subi	r25, 0x01	; 1
    a5e2:	91 83       	std	Z+1, r25	; 0x01
    a5e4:	2f bf       	out	0x3f, r18	; 63
    a5e6:	0f c0       	rjmp	.+30     	; 0xa606 <udd_sleep_mode+0x56>
    a5e8:	90 91 68 2e 	lds	r25, 0x2E68	; 0x802e68 <sleepmgr_locks+0x1>
    a5ec:	9f 3f       	cpi	r25, 0xFF	; 255
    a5ee:	09 f4       	brne	.+2      	; 0xa5f2 <udd_sleep_mode+0x42>
    a5f0:	ff cf       	rjmp	.-2      	; 0xa5f0 <udd_sleep_mode+0x40>
    a5f2:	9f b7       	in	r25, 0x3f	; 63
    a5f4:	99 83       	std	Y+1, r25	; 0x01
    a5f6:	f8 94       	cli
    a5f8:	29 81       	ldd	r18, Y+1	; 0x01
    a5fa:	e7 e6       	ldi	r30, 0x67	; 103
    a5fc:	fe e2       	ldi	r31, 0x2E	; 46
    a5fe:	91 81       	ldd	r25, Z+1	; 0x01
    a600:	9f 5f       	subi	r25, 0xFF	; 255
    a602:	91 83       	std	Z+1, r25	; 0x01
    a604:	2f bf       	out	0x3f, r18	; 63
    a606:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <udd_b_idle>
    a60a:	05 c0       	rjmp	.+10     	; 0xa616 <udd_sleep_mode+0x66>
    a60c:	90 91 b4 24 	lds	r25, 0x24B4	; 0x8024b4 <udd_b_idle>
    a610:	99 23       	and	r25, r25
    a612:	51 f3       	breq	.-44     	; 0xa5e8 <udd_sleep_mode+0x38>
    a614:	f8 cf       	rjmp	.-16     	; 0xa606 <udd_sleep_mode+0x56>
    a616:	0f 90       	pop	r0
    a618:	0f 90       	pop	r0
    a61a:	df 91       	pop	r29
    a61c:	cf 91       	pop	r28
    a61e:	08 95       	ret

0000a620 <udd_ctrl_init>:
    a620:	0f 93       	push	r16
    a622:	e8 ec       	ldi	r30, 0xC8	; 200
    a624:	f4 e0       	ldi	r31, 0x04	; 4
    a626:	80 81       	ld	r24, Z
    a628:	8f 7d       	andi	r24, 0xDF	; 223
    a62a:	80 83       	st	Z, r24
    a62c:	80 81       	ld	r24, Z
    a62e:	8f 7d       	andi	r24, 0xDF	; 223
    a630:	80 83       	st	Z, r24
    a632:	e8 e8       	ldi	r30, 0x88	; 136
    a634:	f4 e2       	ldi	r31, 0x24	; 36
    a636:	02 e0       	ldi	r16, 0x02	; 2
    a638:	05 93       	las	Z, r16
    a63a:	10 92 8a 24 	sts	0x248A, r1	; 0x80248a <udd_sram+0x16>
    a63e:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <udd_sram+0x17>
    a642:	00 e2       	ldi	r16, 0x20	; 32
    a644:	06 93       	lac	Z, r16
    a646:	00 e4       	ldi	r16, 0x40	; 64
    a648:	06 93       	lac	Z, r16
    a64a:	e0 e8       	ldi	r30, 0x80	; 128
    a64c:	f4 e2       	ldi	r31, 0x24	; 36
    a64e:	00 e4       	ldi	r16, 0x40	; 64
    a650:	06 93       	lac	Z, r16
    a652:	e1 ed       	ldi	r30, 0xD1	; 209
    a654:	fd e2       	ldi	r31, 0x2D	; 45
    a656:	14 86       	std	Z+12, r1	; 0x0c
    a658:	15 86       	std	Z+13, r1	; 0x0d
    a65a:	16 86       	std	Z+14, r1	; 0x0e
    a65c:	17 86       	std	Z+15, r1	; 0x0f
    a65e:	12 86       	std	Z+10, r1	; 0x0a
    a660:	13 86       	std	Z+11, r1	; 0x0b
    a662:	10 92 70 24 	sts	0x2470, r1	; 0x802470 <udd_ep_control_state>
    a666:	0f 91       	pop	r16
    a668:	08 95       	ret

0000a66a <udd_ctrl_stall_data>:
    a66a:	0f 93       	push	r16
    a66c:	85 e0       	ldi	r24, 0x05	; 5
    a66e:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udd_ep_control_state>
    a672:	e9 e8       	ldi	r30, 0x89	; 137
    a674:	f4 e2       	ldi	r31, 0x24	; 36
    a676:	04 e0       	ldi	r16, 0x04	; 4
    a678:	05 93       	las	Z, r16
    a67a:	e1 e8       	ldi	r30, 0x81	; 129
    a67c:	f4 e2       	ldi	r31, 0x24	; 36
    a67e:	04 e0       	ldi	r16, 0x04	; 4
    a680:	05 93       	las	Z, r16
    a682:	0f 91       	pop	r16
    a684:	08 95       	ret

0000a686 <udd_ctrl_send_zlp_in>:
    a686:	0f 93       	push	r16
    a688:	83 e0       	ldi	r24, 0x03	; 3
    a68a:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udd_ep_control_state>
    a68e:	10 92 8a 24 	sts	0x248A, r1	; 0x80248a <udd_sram+0x16>
    a692:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <udd_sram+0x17>
    a696:	e8 e8       	ldi	r30, 0x88	; 136
    a698:	f4 e2       	ldi	r31, 0x24	; 36
    a69a:	02 e0       	ldi	r16, 0x02	; 2
    a69c:	06 93       	lac	Z, r16
    a69e:	0f 91       	pop	r16
    a6a0:	08 95       	ret

0000a6a2 <udd_ctrl_endofrequest>:
    a6a2:	e0 91 dd 2d 	lds	r30, 0x2DDD	; 0x802ddd <udd_g_ctrlreq+0xc>
    a6a6:	f0 91 de 2d 	lds	r31, 0x2DDE	; 0x802dde <udd_g_ctrlreq+0xd>
    a6aa:	30 97       	sbiw	r30, 0x00	; 0
    a6ac:	09 f0       	breq	.+2      	; 0xa6b0 <udd_ctrl_endofrequest+0xe>
    a6ae:	19 95       	eicall
    a6b0:	08 95       	ret

0000a6b2 <udd_ctrl_in_sent>:
    a6b2:	0f 93       	push	r16
    a6b4:	cf 93       	push	r28
    a6b6:	df 93       	push	r29
    a6b8:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_ep_control_state>
    a6bc:	83 30       	cpi	r24, 0x03	; 3
    a6be:	19 f4       	brne	.+6      	; 0xa6c6 <udd_ctrl_in_sent+0x14>
    a6c0:	f0 df       	rcall	.-32     	; 0xa6a2 <udd_ctrl_endofrequest>
    a6c2:	ae df       	rcall	.-164    	; 0xa620 <udd_ctrl_init>
    a6c4:	5e c0       	rjmp	.+188    	; 0xa782 <udd_ctrl_in_sent+0xd0>
    a6c6:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_ctrl_payload_nb_trans>
    a6ca:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    a6ce:	c0 91 db 2d 	lds	r28, 0x2DDB	; 0x802ddb <udd_g_ctrlreq+0xa>
    a6d2:	d0 91 dc 2d 	lds	r29, 0x2DDC	; 0x802ddc <udd_g_ctrlreq+0xb>
    a6d6:	c8 1b       	sub	r28, r24
    a6d8:	d9 0b       	sbc	r29, r25
    a6da:	71 f5       	brne	.+92     	; 0xa738 <udd_ctrl_in_sent+0x86>
    a6dc:	20 91 6e 24 	lds	r18, 0x246E	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    a6e0:	30 91 6f 24 	lds	r19, 0x246F	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
    a6e4:	82 0f       	add	r24, r18
    a6e6:	93 1f       	adc	r25, r19
    a6e8:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    a6ec:	90 93 6f 24 	sts	0x246F, r25	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
    a6f0:	20 91 d7 2d 	lds	r18, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    a6f4:	30 91 d8 2d 	lds	r19, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    a6f8:	82 17       	cp	r24, r18
    a6fa:	93 07       	cpc	r25, r19
    a6fc:	21 f0       	breq	.+8      	; 0xa706 <udd_ctrl_in_sent+0x54>
    a6fe:	80 91 87 23 	lds	r24, 0x2387	; 0x802387 <b_shortpacket.5472>
    a702:	88 23       	and	r24, r24
    a704:	41 f0       	breq	.+16     	; 0xa716 <udd_ctrl_in_sent+0x64>
    a706:	84 e0       	ldi	r24, 0x04	; 4
    a708:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udd_ep_control_state>
    a70c:	e0 e8       	ldi	r30, 0x80	; 128
    a70e:	f4 e2       	ldi	r31, 0x24	; 36
    a710:	02 e0       	ldi	r16, 0x02	; 2
    a712:	06 93       	lac	Z, r16
    a714:	36 c0       	rjmp	.+108    	; 0xa782 <udd_ctrl_in_sent+0xd0>
    a716:	e0 91 df 2d 	lds	r30, 0x2DDF	; 0x802ddf <udd_g_ctrlreq+0xe>
    a71a:	f0 91 e0 2d 	lds	r31, 0x2DE0	; 0x802de0 <udd_g_ctrlreq+0xf>
    a71e:	30 97       	sbiw	r30, 0x00	; 0
    a720:	99 f0       	breq	.+38     	; 0xa748 <udd_ctrl_in_sent+0x96>
    a722:	19 95       	eicall
    a724:	88 23       	and	r24, r24
    a726:	81 f0       	breq	.+32     	; 0xa748 <udd_ctrl_in_sent+0x96>
    a728:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udd_ctrl_payload_nb_trans>
    a72c:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    a730:	c0 91 db 2d 	lds	r28, 0x2DDB	; 0x802ddb <udd_g_ctrlreq+0xa>
    a734:	d0 91 dc 2d 	lds	r29, 0x2DDC	; 0x802ddc <udd_g_ctrlreq+0xb>
    a738:	c0 34       	cpi	r28, 0x40	; 64
    a73a:	d1 05       	cpc	r29, r1
    a73c:	28 f0       	brcs	.+10     	; 0xa748 <udd_ctrl_in_sent+0x96>
    a73e:	10 92 87 23 	sts	0x2387, r1	; 0x802387 <b_shortpacket.5472>
    a742:	c0 e4       	ldi	r28, 0x40	; 64
    a744:	d0 e0       	ldi	r29, 0x00	; 0
    a746:	03 c0       	rjmp	.+6      	; 0xa74e <udd_ctrl_in_sent+0x9c>
    a748:	81 e0       	ldi	r24, 0x01	; 1
    a74a:	80 93 87 23 	sts	0x2387, r24	; 0x802387 <b_shortpacket.5472>
    a74e:	e4 e7       	ldi	r30, 0x74	; 116
    a750:	f4 e2       	ldi	r31, 0x24	; 36
    a752:	c6 8b       	std	Z+22, r28	; 0x16
    a754:	d7 8b       	std	Z+23, r29	; 0x17
    a756:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_ctrl_payload_nb_trans>
    a75a:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    a75e:	20 91 d9 2d 	lds	r18, 0x2DD9	; 0x802dd9 <udd_g_ctrlreq+0x8>
    a762:	30 91 da 2d 	lds	r19, 0x2DDA	; 0x802dda <udd_g_ctrlreq+0x9>
    a766:	28 0f       	add	r18, r24
    a768:	39 1f       	adc	r19, r25
    a76a:	20 8f       	std	Z+24, r18	; 0x18
    a76c:	31 8f       	std	Z+25, r19	; 0x19
    a76e:	c8 0f       	add	r28, r24
    a770:	d9 1f       	adc	r29, r25
    a772:	c0 93 6c 24 	sts	0x246C, r28	; 0x80246c <udd_ctrl_payload_nb_trans>
    a776:	d0 93 6d 24 	sts	0x246D, r29	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    a77a:	e8 e8       	ldi	r30, 0x88	; 136
    a77c:	f4 e2       	ldi	r31, 0x24	; 36
    a77e:	02 e0       	ldi	r16, 0x02	; 2
    a780:	06 93       	lac	Z, r16
    a782:	df 91       	pop	r29
    a784:	cf 91       	pop	r28
    a786:	0f 91       	pop	r16
    a788:	08 95       	ret

0000a78a <udd_ep_get_size>:
    a78a:	fc 01       	movw	r30, r24
    a78c:	81 81       	ldd	r24, Z+1	; 0x01
    a78e:	e8 2f       	mov	r30, r24
    a790:	e7 70       	andi	r30, 0x07	; 7
    a792:	8e 2f       	mov	r24, r30
    a794:	90 e0       	ldi	r25, 0x00	; 0
    a796:	fc 01       	movw	r30, r24
    a798:	31 97       	sbiw	r30, 0x01	; 1
    a79a:	e7 30       	cpi	r30, 0x07	; 7
    a79c:	f1 05       	cpc	r31, r1
    a79e:	d8 f4       	brcc	.+54     	; 0xa7d6 <udd_ep_get_size+0x4c>
    a7a0:	88 27       	eor	r24, r24
    a7a2:	e2 50       	subi	r30, 0x02	; 2
    a7a4:	ff 4f       	sbci	r31, 0xFF	; 255
    a7a6:	8f 4f       	sbci	r24, 0xFF	; 255
    a7a8:	0c 94 b8 7c 	jmp	0xf970	; 0xf970 <__tablejump2__>
    a7ac:	80 e1       	ldi	r24, 0x10	; 16
    a7ae:	90 e0       	ldi	r25, 0x00	; 0
    a7b0:	08 95       	ret
    a7b2:	80 e2       	ldi	r24, 0x20	; 32
    a7b4:	90 e0       	ldi	r25, 0x00	; 0
    a7b6:	08 95       	ret
    a7b8:	80 e4       	ldi	r24, 0x40	; 64
    a7ba:	90 e0       	ldi	r25, 0x00	; 0
    a7bc:	08 95       	ret
    a7be:	80 e8       	ldi	r24, 0x80	; 128
    a7c0:	90 e0       	ldi	r25, 0x00	; 0
    a7c2:	08 95       	ret
    a7c4:	80 e0       	ldi	r24, 0x00	; 0
    a7c6:	91 e0       	ldi	r25, 0x01	; 1
    a7c8:	08 95       	ret
    a7ca:	80 e0       	ldi	r24, 0x00	; 0
    a7cc:	92 e0       	ldi	r25, 0x02	; 2
    a7ce:	08 95       	ret
    a7d0:	8f ef       	ldi	r24, 0xFF	; 255
    a7d2:	93 e0       	ldi	r25, 0x03	; 3
    a7d4:	08 95       	ret
    a7d6:	88 e0       	ldi	r24, 0x08	; 8
    a7d8:	90 e0       	ldi	r25, 0x00	; 0
    a7da:	08 95       	ret

0000a7dc <udd_ep_get_job>:
    a7dc:	28 2f       	mov	r18, r24
    a7de:	2f 70       	andi	r18, 0x0F	; 15
    a7e0:	30 e0       	ldi	r19, 0x00	; 0
    a7e2:	22 0f       	add	r18, r18
    a7e4:	33 1f       	adc	r19, r19
    a7e6:	08 2e       	mov	r0, r24
    a7e8:	00 0c       	add	r0, r0
    a7ea:	99 0b       	sbc	r25, r25
    a7ec:	88 27       	eor	r24, r24
    a7ee:	99 0f       	add	r25, r25
    a7f0:	88 1f       	adc	r24, r24
    a7f2:	99 27       	eor	r25, r25
    a7f4:	82 0f       	add	r24, r18
    a7f6:	93 1f       	adc	r25, r19
    a7f8:	02 97       	sbiw	r24, 0x02	; 2
    a7fa:	9c 01       	movw	r18, r24
    a7fc:	22 0f       	add	r18, r18
    a7fe:	33 1f       	adc	r19, r19
    a800:	22 0f       	add	r18, r18
    a802:	33 1f       	adc	r19, r19
    a804:	22 0f       	add	r18, r18
    a806:	33 1f       	adc	r19, r19
    a808:	82 0f       	add	r24, r18
    a80a:	93 1f       	adc	r25, r19
    a80c:	88 5f       	subi	r24, 0xF8	; 248
    a80e:	9b 4d       	sbci	r25, 0xDB	; 219
    a810:	08 95       	ret

0000a812 <udd_ctrl_interrupt_tc_setup>:
    a812:	0f 93       	push	r16
    a814:	cf 93       	push	r28
    a816:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    a81a:	80 ff       	sbrs	r24, 0
    a81c:	65 c0       	rjmp	.+202    	; 0xa8e8 <udd_ctrl_interrupt_tc_setup+0xd6>
    a81e:	81 e0       	ldi	r24, 0x01	; 1
    a820:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    a824:	e0 e8       	ldi	r30, 0x80	; 128
    a826:	f4 e2       	ldi	r31, 0x24	; 36
    a828:	00 e8       	ldi	r16, 0x80	; 128
    a82a:	06 93       	lac	Z, r16
    a82c:	e8 e8       	ldi	r30, 0x88	; 136
    a82e:	f4 e2       	ldi	r31, 0x24	; 36
    a830:	00 e8       	ldi	r16, 0x80	; 128
    a832:	06 93       	lac	Z, r16
    a834:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    a838:	e0 e8       	ldi	r30, 0x80	; 128
    a83a:	f4 e2       	ldi	r31, 0x24	; 36
    a83c:	00 e1       	ldi	r16, 0x10	; 16
    a83e:	06 93       	lac	Z, r16
    a840:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_ep_control_state>
    a844:	88 23       	and	r24, r24
    a846:	29 f0       	breq	.+10     	; 0xa852 <udd_ctrl_interrupt_tc_setup+0x40>
    a848:	83 50       	subi	r24, 0x03	; 3
    a84a:	82 30       	cpi	r24, 0x02	; 2
    a84c:	08 f4       	brcc	.+2      	; 0xa850 <udd_ctrl_interrupt_tc_setup+0x3e>
    a84e:	29 df       	rcall	.-430    	; 0xa6a2 <udd_ctrl_endofrequest>
    a850:	e7 de       	rcall	.-562    	; 0xa620 <udd_ctrl_init>
    a852:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udd_sram+0xe>
    a856:	90 91 83 24 	lds	r25, 0x2483	; 0x802483 <udd_sram+0xf>
    a85a:	08 97       	sbiw	r24, 0x08	; 8
    a85c:	09 f0       	breq	.+2      	; 0xa860 <udd_ctrl_interrupt_tc_setup+0x4e>
    a85e:	46 c0       	rjmp	.+140    	; 0xa8ec <udd_ctrl_interrupt_tc_setup+0xda>
    a860:	88 e0       	ldi	r24, 0x08	; 8
    a862:	ec e2       	ldi	r30, 0x2C	; 44
    a864:	f4 e2       	ldi	r31, 0x24	; 36
    a866:	a1 ed       	ldi	r26, 0xD1	; 209
    a868:	bd e2       	ldi	r27, 0x2D	; 45
    a86a:	01 90       	ld	r0, Z+
    a86c:	0d 92       	st	X+, r0
    a86e:	8a 95       	dec	r24
    a870:	e1 f7       	brne	.-8      	; 0xa86a <udd_ctrl_interrupt_tc_setup+0x58>
    a872:	e8 ec       	ldi	r30, 0xC8	; 200
    a874:	f4 e0       	ldi	r31, 0x04	; 4
    a876:	80 81       	ld	r24, Z
    a878:	80 62       	ori	r24, 0x20	; 32
    a87a:	80 83       	st	Z, r24
    a87c:	80 81       	ld	r24, Z
    a87e:	80 62       	ori	r24, 0x20	; 32
    a880:	80 83       	st	Z, r24
    a882:	0e 94 9d 71 	call	0xe33a	; 0xe33a <udc_process_setup>
    a886:	c8 2f       	mov	r28, r24
    a888:	81 11       	cpse	r24, r1
    a88a:	03 c0       	rjmp	.+6      	; 0xa892 <udd_ctrl_interrupt_tc_setup+0x80>
    a88c:	ee de       	rcall	.-548    	; 0xa66a <udd_ctrl_stall_data>
    a88e:	c1 e0       	ldi	r28, 0x01	; 1
    a890:	2e c0       	rjmp	.+92     	; 0xa8ee <udd_ctrl_interrupt_tc_setup+0xdc>
    a892:	80 91 d1 2d 	lds	r24, 0x2DD1	; 0x802dd1 <udd_g_ctrlreq>
    a896:	88 23       	and	r24, r24
    a898:	6c f4       	brge	.+26     	; 0xa8b4 <udd_ctrl_interrupt_tc_setup+0xa2>
    a89a:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    a89e:	10 92 6f 24 	sts	0x246F, r1	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
    a8a2:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udd_ctrl_payload_nb_trans>
    a8a6:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    a8aa:	82 e0       	ldi	r24, 0x02	; 2
    a8ac:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udd_ep_control_state>
    a8b0:	00 df       	rcall	.-512    	; 0xa6b2 <udd_ctrl_in_sent>
    a8b2:	1d c0       	rjmp	.+58     	; 0xa8ee <udd_ctrl_interrupt_tc_setup+0xdc>
    a8b4:	80 91 d7 2d 	lds	r24, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    a8b8:	90 91 d8 2d 	lds	r25, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    a8bc:	89 2b       	or	r24, r25
    a8be:	11 f4       	brne	.+4      	; 0xa8c4 <udd_ctrl_interrupt_tc_setup+0xb2>
    a8c0:	e2 de       	rcall	.-572    	; 0xa686 <udd_ctrl_send_zlp_in>
    a8c2:	15 c0       	rjmp	.+42     	; 0xa8ee <udd_ctrl_interrupt_tc_setup+0xdc>
    a8c4:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    a8c8:	10 92 6f 24 	sts	0x246F, r1	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
    a8cc:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udd_ctrl_payload_nb_trans>
    a8d0:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    a8d4:	81 e0       	ldi	r24, 0x01	; 1
    a8d6:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udd_ep_control_state>
    a8da:	e0 e8       	ldi	r30, 0x80	; 128
    a8dc:	f4 e2       	ldi	r31, 0x24	; 36
    a8de:	02 e0       	ldi	r16, 0x02	; 2
    a8e0:	06 93       	lac	Z, r16
    a8e2:	00 e2       	ldi	r16, 0x20	; 32
    a8e4:	06 93       	lac	Z, r16
    a8e6:	03 c0       	rjmp	.+6      	; 0xa8ee <udd_ctrl_interrupt_tc_setup+0xdc>
    a8e8:	c0 e0       	ldi	r28, 0x00	; 0
    a8ea:	01 c0       	rjmp	.+2      	; 0xa8ee <udd_ctrl_interrupt_tc_setup+0xdc>
    a8ec:	c1 e0       	ldi	r28, 0x01	; 1
    a8ee:	8c 2f       	mov	r24, r28
    a8f0:	cf 91       	pop	r28
    a8f2:	0f 91       	pop	r16
    a8f4:	08 95       	ret

0000a8f6 <udd_ep_trans_complet>:
    a8f6:	8f 92       	push	r8
    a8f8:	9f 92       	push	r9
    a8fa:	af 92       	push	r10
    a8fc:	bf 92       	push	r11
    a8fe:	df 92       	push	r13
    a900:	ef 92       	push	r14
    a902:	ff 92       	push	r15
    a904:	0f 93       	push	r16
    a906:	1f 93       	push	r17
    a908:	cf 93       	push	r28
    a90a:	df 93       	push	r29
    a90c:	d8 2e       	mov	r13, r24
    a90e:	66 df       	rcall	.-308    	; 0xa7dc <udd_ep_get_job>
    a910:	8c 01       	movw	r16, r24
    a912:	cd 2d       	mov	r28, r13
    a914:	cf 70       	andi	r28, 0x0F	; 15
    a916:	d0 e0       	ldi	r29, 0x00	; 0
    a918:	ce 01       	movw	r24, r28
    a91a:	88 0f       	add	r24, r24
    a91c:	99 1f       	adc	r25, r25
    a91e:	cd 2d       	mov	r28, r13
    a920:	0d 2c       	mov	r0, r13
    a922:	00 0c       	add	r0, r0
    a924:	dd 0b       	sbc	r29, r29
    a926:	cc 27       	eor	r28, r28
    a928:	dd 0f       	add	r29, r29
    a92a:	cc 1f       	adc	r28, r28
    a92c:	dd 27       	eor	r29, r29
    a92e:	c8 0f       	add	r28, r24
    a930:	d9 1f       	adc	r29, r25
    a932:	ce 01       	movw	r24, r28
    a934:	88 0f       	add	r24, r24
    a936:	99 1f       	adc	r25, r25
    a938:	88 0f       	add	r24, r24
    a93a:	99 1f       	adc	r25, r25
    a93c:	88 0f       	add	r24, r24
    a93e:	99 1f       	adc	r25, r25
    a940:	9c 01       	movw	r18, r24
    a942:	20 58       	subi	r18, 0x80	; 128
    a944:	3b 4d       	sbci	r19, 0xDB	; 219
    a946:	79 01       	movw	r14, r18
    a948:	c9 01       	movw	r24, r18
    a94a:	1f df       	rcall	.-450    	; 0xa78a <udd_ep_get_size>
    a94c:	4c 01       	movw	r8, r24
    a94e:	dd 20       	and	r13, r13
    a950:	0c f0       	brlt	.+2      	; 0xa954 <udd_ep_trans_complet+0x5e>
    a952:	7b c0       	rjmp	.+246    	; 0xaa4a <udd_ep_trans_complet+0x154>
    a954:	fe 01       	movw	r30, r28
    a956:	ee 0f       	add	r30, r30
    a958:	ff 1f       	adc	r31, r31
    a95a:	ee 0f       	add	r30, r30
    a95c:	ff 1f       	adc	r31, r31
    a95e:	ee 0f       	add	r30, r30
    a960:	ff 1f       	adc	r31, r31
    a962:	ec 58       	subi	r30, 0x8C	; 140
    a964:	fb 4d       	sbci	r31, 0xDB	; 219
    a966:	22 89       	ldd	r18, Z+18	; 0x12
    a968:	33 89       	ldd	r19, Z+19	; 0x13
    a96a:	d8 01       	movw	r26, r16
    a96c:	15 96       	adiw	r26, 0x05	; 5
    a96e:	8d 91       	ld	r24, X+
    a970:	9c 91       	ld	r25, X
    a972:	16 97       	sbiw	r26, 0x06	; 6
    a974:	82 0f       	add	r24, r18
    a976:	93 1f       	adc	r25, r19
    a978:	15 96       	adiw	r26, 0x05	; 5
    a97a:	8d 93       	st	X+, r24
    a97c:	9c 93       	st	X, r25
    a97e:	16 97       	sbiw	r26, 0x06	; 6
    a980:	13 96       	adiw	r26, 0x03	; 3
    a982:	2d 91       	ld	r18, X+
    a984:	3c 91       	ld	r19, X
    a986:	14 97       	sbiw	r26, 0x04	; 4
    a988:	82 17       	cp	r24, r18
    a98a:	93 07       	cpc	r25, r19
    a98c:	09 f4       	brne	.+2      	; 0xa990 <udd_ep_trans_complet+0x9a>
    a98e:	47 c0       	rjmp	.+142    	; 0xaa1e <udd_ep_trans_complet+0x128>
    a990:	28 1b       	sub	r18, r24
    a992:	39 0b       	sbc	r19, r25
    a994:	21 15       	cp	r18, r1
    a996:	b4 e0       	ldi	r27, 0x04	; 4
    a998:	3b 07       	cpc	r19, r27
    a99a:	40 f0       	brcs	.+16     	; 0xa9ac <udd_ep_trans_complet+0xb6>
    a99c:	2f ef       	ldi	r18, 0xFF	; 255
    a99e:	33 e0       	ldi	r19, 0x03	; 3
    a9a0:	c9 01       	movw	r24, r18
    a9a2:	b4 01       	movw	r22, r8
    a9a4:	0e 94 53 7c 	call	0xf8a6	; 0xf8a6 <__udivmodhi4>
    a9a8:	28 1b       	sub	r18, r24
    a9aa:	39 0b       	sbc	r19, r25
    a9ac:	f8 01       	movw	r30, r16
    a9ae:	80 81       	ld	r24, Z
    a9b0:	81 ff       	sbrs	r24, 1
    a9b2:	0a c0       	rjmp	.+20     	; 0xa9c8 <udd_ep_trans_complet+0xd2>
    a9b4:	c9 01       	movw	r24, r18
    a9b6:	b4 01       	movw	r22, r8
    a9b8:	0e 94 53 7c 	call	0xf8a6	; 0xf8a6 <__udivmodhi4>
    a9bc:	41 e0       	ldi	r20, 0x01	; 1
    a9be:	89 2b       	or	r24, r25
    a9c0:	09 f0       	breq	.+2      	; 0xa9c4 <udd_ep_trans_complet+0xce>
    a9c2:	40 e0       	ldi	r20, 0x00	; 0
    a9c4:	84 2f       	mov	r24, r20
    a9c6:	01 c0       	rjmp	.+2      	; 0xa9ca <udd_ep_trans_complet+0xd4>
    a9c8:	80 e0       	ldi	r24, 0x00	; 0
    a9ca:	d8 01       	movw	r26, r16
    a9cc:	9c 91       	ld	r25, X
    a9ce:	80 fb       	bst	r24, 0
    a9d0:	91 f9       	bld	r25, 1
    a9d2:	9c 93       	st	X, r25
    a9d4:	fe 01       	movw	r30, r28
    a9d6:	ee 0f       	add	r30, r30
    a9d8:	ff 1f       	adc	r31, r31
    a9da:	ee 0f       	add	r30, r30
    a9dc:	ff 1f       	adc	r31, r31
    a9de:	ee 0f       	add	r30, r30
    a9e0:	ff 1f       	adc	r31, r31
    a9e2:	ec 58       	subi	r30, 0x8C	; 140
    a9e4:	fb 4d       	sbci	r31, 0xDB	; 219
    a9e6:	12 8a       	std	Z+18, r1	; 0x12
    a9e8:	13 8a       	std	Z+19, r1	; 0x13
    a9ea:	26 87       	std	Z+14, r18	; 0x0e
    a9ec:	37 87       	std	Z+15, r19	; 0x0f
    a9ee:	11 96       	adiw	r26, 0x01	; 1
    a9f0:	2d 91       	ld	r18, X+
    a9f2:	3c 91       	ld	r19, X
    a9f4:	12 97       	sbiw	r26, 0x02	; 2
    a9f6:	15 96       	adiw	r26, 0x05	; 5
    a9f8:	8d 91       	ld	r24, X+
    a9fa:	9c 91       	ld	r25, X
    a9fc:	16 97       	sbiw	r26, 0x06	; 6
    a9fe:	82 0f       	add	r24, r18
    aa00:	93 1f       	adc	r25, r19
    aa02:	cc 0f       	add	r28, r28
    aa04:	dd 1f       	adc	r29, r29
    aa06:	cc 0f       	add	r28, r28
    aa08:	dd 1f       	adc	r29, r29
    aa0a:	cc 0f       	add	r28, r28
    aa0c:	dd 1f       	adc	r29, r29
    aa0e:	cc 57       	subi	r28, 0x7C	; 124
    aa10:	db 4d       	sbci	r29, 0xDB	; 219
    aa12:	88 83       	st	Y, r24
    aa14:	99 83       	std	Y+1, r25	; 0x01
    aa16:	f7 01       	movw	r30, r14
    aa18:	02 e0       	ldi	r16, 0x02	; 2
    aa1a:	06 93       	lac	Z, r16
    aa1c:	e4 c0       	rjmp	.+456    	; 0xabe6 <udd_ep_trans_complet+0x2f0>
    aa1e:	d8 01       	movw	r26, r16
    aa20:	8c 91       	ld	r24, X
    aa22:	81 ff       	sbrs	r24, 1
    aa24:	cd c0       	rjmp	.+410    	; 0xabc0 <udd_ep_trans_complet+0x2ca>
    aa26:	8d 7f       	andi	r24, 0xFD	; 253
    aa28:	8c 93       	st	X, r24
    aa2a:	cc 0f       	add	r28, r28
    aa2c:	dd 1f       	adc	r29, r29
    aa2e:	cc 0f       	add	r28, r28
    aa30:	dd 1f       	adc	r29, r29
    aa32:	cc 0f       	add	r28, r28
    aa34:	dd 1f       	adc	r29, r29
    aa36:	cc 58       	subi	r28, 0x8C	; 140
    aa38:	db 4d       	sbci	r29, 0xDB	; 219
    aa3a:	1a 8a       	std	Y+18, r1	; 0x12
    aa3c:	1b 8a       	std	Y+19, r1	; 0x13
    aa3e:	1e 86       	std	Y+14, r1	; 0x0e
    aa40:	1f 86       	std	Y+15, r1	; 0x0f
    aa42:	f7 01       	movw	r30, r14
    aa44:	02 e0       	ldi	r16, 0x02	; 2
    aa46:	06 93       	lac	Z, r16
    aa48:	ce c0       	rjmp	.+412    	; 0xabe6 <udd_ep_trans_complet+0x2f0>
    aa4a:	fe 01       	movw	r30, r28
    aa4c:	ee 0f       	add	r30, r30
    aa4e:	ff 1f       	adc	r31, r31
    aa50:	ee 0f       	add	r30, r30
    aa52:	ff 1f       	adc	r31, r31
    aa54:	ee 0f       	add	r30, r30
    aa56:	ff 1f       	adc	r31, r31
    aa58:	ec 58       	subi	r30, 0x8C	; 140
    aa5a:	fb 4d       	sbci	r31, 0xDB	; 219
    aa5c:	a6 84       	ldd	r10, Z+14	; 0x0e
    aa5e:	b7 84       	ldd	r11, Z+15	; 0x0f
    aa60:	d8 01       	movw	r26, r16
    aa62:	8c 91       	ld	r24, X
    aa64:	82 ff       	sbrs	r24, 2
    aa66:	1b c0       	rjmp	.+54     	; 0xaa9e <udd_ep_trans_complet+0x1a8>
    aa68:	11 96       	adiw	r26, 0x01	; 1
    aa6a:	ed 91       	ld	r30, X+
    aa6c:	fc 91       	ld	r31, X
    aa6e:	12 97       	sbiw	r26, 0x02	; 2
    aa70:	15 96       	adiw	r26, 0x05	; 5
    aa72:	2d 91       	ld	r18, X+
    aa74:	3c 91       	ld	r19, X
    aa76:	16 97       	sbiw	r26, 0x06	; 6
    aa78:	13 96       	adiw	r26, 0x03	; 3
    aa7a:	8d 91       	ld	r24, X+
    aa7c:	9c 91       	ld	r25, X
    aa7e:	14 97       	sbiw	r26, 0x04	; 4
    aa80:	b4 01       	movw	r22, r8
    aa82:	0e 94 53 7c 	call	0xf8a6	; 0xf8a6 <__udivmodhi4>
    aa86:	b0 e4       	ldi	r27, 0x40	; 64
    aa88:	db 9e       	mul	r13, r27
    aa8a:	b0 01       	movw	r22, r0
    aa8c:	11 24       	eor	r1, r1
    aa8e:	68 5b       	subi	r22, 0xB8	; 184
    aa90:	7c 4d       	sbci	r23, 0xDC	; 220
    aa92:	ac 01       	movw	r20, r24
    aa94:	cf 01       	movw	r24, r30
    aa96:	82 0f       	add	r24, r18
    aa98:	93 1f       	adc	r25, r19
    aa9a:	0e 94 cb 7f 	call	0xff96	; 0xff96 <memcpy>
    aa9e:	f8 01       	movw	r30, r16
    aaa0:	25 81       	ldd	r18, Z+5	; 0x05
    aaa2:	36 81       	ldd	r19, Z+6	; 0x06
    aaa4:	2a 0d       	add	r18, r10
    aaa6:	3b 1d       	adc	r19, r11
    aaa8:	25 83       	std	Z+5, r18	; 0x05
    aaaa:	36 83       	std	Z+6, r19	; 0x06
    aaac:	83 81       	ldd	r24, Z+3	; 0x03
    aaae:	94 81       	ldd	r25, Z+4	; 0x04
    aab0:	82 17       	cp	r24, r18
    aab2:	93 07       	cpc	r25, r19
    aab4:	68 f4       	brcc	.+26     	; 0xaad0 <udd_ep_trans_complet+0x1da>
    aab6:	85 83       	std	Z+5, r24	; 0x05
    aab8:	96 83       	std	Z+6, r25	; 0x06
    aaba:	cc 0f       	add	r28, r28
    aabc:	dd 1f       	adc	r29, r29
    aabe:	cc 0f       	add	r28, r28
    aac0:	dd 1f       	adc	r29, r29
    aac2:	cc 0f       	add	r28, r28
    aac4:	dd 1f       	adc	r29, r29
    aac6:	cc 58       	subi	r28, 0x8C	; 140
    aac8:	db 4d       	sbci	r29, 0xDB	; 219
    aaca:	8a 89       	ldd	r24, Y+18	; 0x12
    aacc:	9b 89       	ldd	r25, Y+19	; 0x13
    aace:	78 c0       	rjmp	.+240    	; 0xabc0 <udd_ep_trans_complet+0x2ca>
    aad0:	fe 01       	movw	r30, r28
    aad2:	ee 0f       	add	r30, r30
    aad4:	ff 1f       	adc	r31, r31
    aad6:	ee 0f       	add	r30, r30
    aad8:	ff 1f       	adc	r31, r31
    aada:	ee 0f       	add	r30, r30
    aadc:	ff 1f       	adc	r31, r31
    aade:	ec 58       	subi	r30, 0x8C	; 140
    aae0:	fb 4d       	sbci	r31, 0xDB	; 219
    aae2:	42 89       	ldd	r20, Z+18	; 0x12
    aae4:	53 89       	ldd	r21, Z+19	; 0x13
    aae6:	a4 16       	cp	r10, r20
    aae8:	b5 06       	cpc	r11, r21
    aaea:	09 f0       	breq	.+2      	; 0xaaee <udd_ep_trans_complet+0x1f8>
    aaec:	69 c0       	rjmp	.+210    	; 0xabc0 <udd_ep_trans_complet+0x2ca>
    aaee:	28 17       	cp	r18, r24
    aaf0:	39 07       	cpc	r19, r25
    aaf2:	09 f4       	brne	.+2      	; 0xaaf6 <udd_ep_trans_complet+0x200>
    aaf4:	65 c0       	rjmp	.+202    	; 0xabc0 <udd_ep_trans_complet+0x2ca>
    aaf6:	ac 01       	movw	r20, r24
    aaf8:	42 1b       	sub	r20, r18
    aafa:	53 0b       	sbc	r21, r19
    aafc:	9a 01       	movw	r18, r20
    aafe:	21 15       	cp	r18, r1
    ab00:	54 e0       	ldi	r21, 0x04	; 4
    ab02:	35 07       	cpc	r19, r21
    ab04:	48 f0       	brcs	.+18     	; 0xab18 <udd_ep_trans_complet+0x222>
    ab06:	2f ef       	ldi	r18, 0xFF	; 255
    ab08:	33 e0       	ldi	r19, 0x03	; 3
    ab0a:	c9 01       	movw	r24, r18
    ab0c:	b4 01       	movw	r22, r8
    ab0e:	0e 94 53 7c 	call	0xf8a6	; 0xf8a6 <__udivmodhi4>
    ab12:	28 1b       	sub	r18, r24
    ab14:	39 0b       	sbc	r19, r25
    ab16:	06 c0       	rjmp	.+12     	; 0xab24 <udd_ep_trans_complet+0x22e>
    ab18:	c9 01       	movw	r24, r18
    ab1a:	b4 01       	movw	r22, r8
    ab1c:	0e 94 53 7c 	call	0xf8a6	; 0xf8a6 <__udivmodhi4>
    ab20:	28 1b       	sub	r18, r24
    ab22:	39 0b       	sbc	r19, r25
    ab24:	fe 01       	movw	r30, r28
    ab26:	ee 0f       	add	r30, r30
    ab28:	ff 1f       	adc	r31, r31
    ab2a:	ee 0f       	add	r30, r30
    ab2c:	ff 1f       	adc	r31, r31
    ab2e:	ee 0f       	add	r30, r30
    ab30:	ff 1f       	adc	r31, r31
    ab32:	ec 58       	subi	r30, 0x8C	; 140
    ab34:	fb 4d       	sbci	r31, 0xDB	; 219
    ab36:	16 86       	std	Z+14, r1	; 0x0e
    ab38:	17 86       	std	Z+15, r1	; 0x0f
    ab3a:	28 15       	cp	r18, r8
    ab3c:	39 05       	cpc	r19, r9
    ab3e:	00 f5       	brcc	.+64     	; 0xab80 <udd_ep_trans_complet+0x28a>
    ab40:	d8 01       	movw	r26, r16
    ab42:	8c 91       	ld	r24, X
    ab44:	84 60       	ori	r24, 0x04	; 4
    ab46:	8c 93       	st	X, r24
    ab48:	b0 e4       	ldi	r27, 0x40	; 64
    ab4a:	db 9e       	mul	r13, r27
    ab4c:	c0 01       	movw	r24, r0
    ab4e:	11 24       	eor	r1, r1
    ab50:	88 5b       	subi	r24, 0xB8	; 184
    ab52:	9c 4d       	sbci	r25, 0xDC	; 220
    ab54:	fe 01       	movw	r30, r28
    ab56:	ee 0f       	add	r30, r30
    ab58:	ff 1f       	adc	r31, r31
    ab5a:	ee 0f       	add	r30, r30
    ab5c:	ff 1f       	adc	r31, r31
    ab5e:	ee 0f       	add	r30, r30
    ab60:	ff 1f       	adc	r31, r31
    ab62:	ec 57       	subi	r30, 0x7C	; 124
    ab64:	fb 4d       	sbci	r31, 0xDB	; 219
    ab66:	80 83       	st	Z, r24
    ab68:	91 83       	std	Z+1, r25	; 0x01
    ab6a:	cc 0f       	add	r28, r28
    ab6c:	dd 1f       	adc	r29, r29
    ab6e:	cc 0f       	add	r28, r28
    ab70:	dd 1f       	adc	r29, r29
    ab72:	cc 0f       	add	r28, r28
    ab74:	dd 1f       	adc	r29, r29
    ab76:	cc 58       	subi	r28, 0x8C	; 140
    ab78:	db 4d       	sbci	r29, 0xDB	; 219
    ab7a:	8a 8a       	std	Y+18, r8	; 0x12
    ab7c:	9b 8a       	std	Y+19, r9	; 0x13
    ab7e:	1c c0       	rjmp	.+56     	; 0xabb8 <udd_ep_trans_complet+0x2c2>
    ab80:	f8 01       	movw	r30, r16
    ab82:	41 81       	ldd	r20, Z+1	; 0x01
    ab84:	52 81       	ldd	r21, Z+2	; 0x02
    ab86:	85 81       	ldd	r24, Z+5	; 0x05
    ab88:	96 81       	ldd	r25, Z+6	; 0x06
    ab8a:	84 0f       	add	r24, r20
    ab8c:	95 1f       	adc	r25, r21
    ab8e:	fe 01       	movw	r30, r28
    ab90:	ee 0f       	add	r30, r30
    ab92:	ff 1f       	adc	r31, r31
    ab94:	ee 0f       	add	r30, r30
    ab96:	ff 1f       	adc	r31, r31
    ab98:	ee 0f       	add	r30, r30
    ab9a:	ff 1f       	adc	r31, r31
    ab9c:	ec 57       	subi	r30, 0x7C	; 124
    ab9e:	fb 4d       	sbci	r31, 0xDB	; 219
    aba0:	80 83       	st	Z, r24
    aba2:	91 83       	std	Z+1, r25	; 0x01
    aba4:	cc 0f       	add	r28, r28
    aba6:	dd 1f       	adc	r29, r29
    aba8:	cc 0f       	add	r28, r28
    abaa:	dd 1f       	adc	r29, r29
    abac:	cc 0f       	add	r28, r28
    abae:	dd 1f       	adc	r29, r29
    abb0:	cc 58       	subi	r28, 0x8C	; 140
    abb2:	db 4d       	sbci	r29, 0xDB	; 219
    abb4:	2a 8b       	std	Y+18, r18	; 0x12
    abb6:	3b 8b       	std	Y+19, r19	; 0x13
    abb8:	f7 01       	movw	r30, r14
    abba:	02 e0       	ldi	r16, 0x02	; 2
    abbc:	06 93       	lac	Z, r16
    abbe:	13 c0       	rjmp	.+38     	; 0xabe6 <udd_ep_trans_complet+0x2f0>
    abc0:	d8 01       	movw	r26, r16
    abc2:	8c 91       	ld	r24, X
    abc4:	80 ff       	sbrs	r24, 0
    abc6:	0f c0       	rjmp	.+30     	; 0xabe6 <udd_ep_trans_complet+0x2f0>
    abc8:	8e 7f       	andi	r24, 0xFE	; 254
    abca:	8c 93       	st	X, r24
    abcc:	17 96       	adiw	r26, 0x07	; 7
    abce:	ed 91       	ld	r30, X+
    abd0:	fc 91       	ld	r31, X
    abd2:	18 97       	sbiw	r26, 0x08	; 8
    abd4:	30 97       	sbiw	r30, 0x00	; 0
    abd6:	39 f0       	breq	.+14     	; 0xabe6 <udd_ep_trans_complet+0x2f0>
    abd8:	15 96       	adiw	r26, 0x05	; 5
    abda:	6d 91       	ld	r22, X+
    abdc:	7c 91       	ld	r23, X
    abde:	16 97       	sbiw	r26, 0x06	; 6
    abe0:	4d 2d       	mov	r20, r13
    abe2:	80 e0       	ldi	r24, 0x00	; 0
    abe4:	19 95       	eicall
    abe6:	df 91       	pop	r29
    abe8:	cf 91       	pop	r28
    abea:	1f 91       	pop	r17
    abec:	0f 91       	pop	r16
    abee:	ff 90       	pop	r15
    abf0:	ef 90       	pop	r14
    abf2:	df 90       	pop	r13
    abf4:	bf 90       	pop	r11
    abf6:	af 90       	pop	r10
    abf8:	9f 90       	pop	r9
    abfa:	8f 90       	pop	r8
    abfc:	08 95       	ret

0000abfe <udd_disable>:
    abfe:	1f 93       	push	r17
    ac00:	cf 93       	push	r28
    ac02:	df 93       	push	r29
    ac04:	1f 92       	push	r1
    ac06:	1f 92       	push	r1
    ac08:	cd b7       	in	r28, 0x3d	; 61
    ac0a:	de b7       	in	r29, 0x3e	; 62
    ac0c:	8f b7       	in	r24, 0x3f	; 63
    ac0e:	89 83       	std	Y+1, r24	; 0x01
    ac10:	f8 94       	cli
    ac12:	19 81       	ldd	r17, Y+1	; 0x01
    ac14:	e1 ec       	ldi	r30, 0xC1	; 193
    ac16:	f4 e0       	ldi	r31, 0x04	; 4
    ac18:	80 81       	ld	r24, Z
    ac1a:	8e 7f       	andi	r24, 0xFE	; 254
    ac1c:	80 83       	st	Z, r24
    ac1e:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    ac22:	10 82       	st	Z, r1
    ac24:	0e 94 a2 6c 	call	0xd944	; 0xd944 <sysclk_disable_usb>
    ac28:	80 e0       	ldi	r24, 0x00	; 0
    ac2a:	c2 dc       	rcall	.-1660   	; 0xa5b0 <udd_sleep_mode>
    ac2c:	80 91 6c 2e 	lds	r24, 0x2E6C	; 0x802e6c <sleepmgr_locks+0x5>
    ac30:	81 11       	cpse	r24, r1
    ac32:	01 c0       	rjmp	.+2      	; 0xac36 <udd_disable+0x38>
    ac34:	ff cf       	rjmp	.-2      	; 0xac34 <udd_disable+0x36>
    ac36:	8f b7       	in	r24, 0x3f	; 63
    ac38:	8a 83       	std	Y+2, r24	; 0x02
    ac3a:	f8 94       	cli
    ac3c:	9a 81       	ldd	r25, Y+2	; 0x02
    ac3e:	e7 e6       	ldi	r30, 0x67	; 103
    ac40:	fe e2       	ldi	r31, 0x2E	; 46
    ac42:	85 81       	ldd	r24, Z+5	; 0x05
    ac44:	81 50       	subi	r24, 0x01	; 1
    ac46:	85 83       	std	Z+5, r24	; 0x05
    ac48:	9f bf       	out	0x3f, r25	; 63
    ac4a:	1f bf       	out	0x3f, r17	; 63
    ac4c:	0f 90       	pop	r0
    ac4e:	0f 90       	pop	r0
    ac50:	df 91       	pop	r29
    ac52:	cf 91       	pop	r28
    ac54:	1f 91       	pop	r17
    ac56:	08 95       	ret

0000ac58 <udd_attach>:
    ac58:	1f 93       	push	r17
    ac5a:	cf 93       	push	r28
    ac5c:	df 93       	push	r29
    ac5e:	1f 92       	push	r1
    ac60:	cd b7       	in	r28, 0x3d	; 61
    ac62:	de b7       	in	r29, 0x3e	; 62
    ac64:	8f b7       	in	r24, 0x3f	; 63
    ac66:	89 83       	std	Y+1, r24	; 0x01
    ac68:	f8 94       	cli
    ac6a:	19 81       	ldd	r17, Y+1	; 0x01
    ac6c:	81 e0       	ldi	r24, 0x01	; 1
    ac6e:	a0 dc       	rcall	.-1728   	; 0xa5b0 <udd_sleep_mode>
    ac70:	ea ec       	ldi	r30, 0xCA	; 202
    ac72:	f4 e0       	ldi	r31, 0x04	; 4
    ac74:	80 e4       	ldi	r24, 0x40	; 64
    ac76:	80 83       	st	Z, r24
    ac78:	80 e2       	ldi	r24, 0x20	; 32
    ac7a:	80 83       	st	Z, r24
    ac7c:	e1 ec       	ldi	r30, 0xC1	; 193
    ac7e:	f4 e0       	ldi	r31, 0x04	; 4
    ac80:	80 81       	ld	r24, Z
    ac82:	81 60       	ori	r24, 0x01	; 1
    ac84:	80 83       	st	Z, r24
    ac86:	a9 ec       	ldi	r26, 0xC9	; 201
    ac88:	b4 e0       	ldi	r27, 0x04	; 4
    ac8a:	8c 91       	ld	r24, X
    ac8c:	82 60       	ori	r24, 0x02	; 2
    ac8e:	8c 93       	st	X, r24
    ac90:	e8 ec       	ldi	r30, 0xC8	; 200
    ac92:	f4 e0       	ldi	r31, 0x04	; 4
    ac94:	80 81       	ld	r24, Z
    ac96:	80 64       	ori	r24, 0x40	; 64
    ac98:	80 83       	st	Z, r24
    ac9a:	8c 91       	ld	r24, X
    ac9c:	81 60       	ori	r24, 0x01	; 1
    ac9e:	8c 93       	st	X, r24
    aca0:	80 81       	ld	r24, Z
    aca2:	80 68       	ori	r24, 0x80	; 128
    aca4:	80 83       	st	Z, r24
    aca6:	1f bf       	out	0x3f, r17	; 63
    aca8:	0f 90       	pop	r0
    acaa:	df 91       	pop	r29
    acac:	cf 91       	pop	r28
    acae:	1f 91       	pop	r17
    acb0:	08 95       	ret

0000acb2 <udd_enable>:
    acb2:	0f 93       	push	r16
    acb4:	1f 93       	push	r17
    acb6:	cf 93       	push	r28
    acb8:	df 93       	push	r29
    acba:	1f 92       	push	r1
    acbc:	1f 92       	push	r1
    acbe:	cd b7       	in	r28, 0x3d	; 61
    acc0:	de b7       	in	r29, 0x3e	; 62
    acc2:	00 e6       	ldi	r16, 0x60	; 96
    acc4:	10 e0       	ldi	r17, 0x00	; 0
    acc6:	f8 01       	movw	r30, r16
    acc8:	10 82       	st	Z, r1
    acca:	80 e3       	ldi	r24, 0x30	; 48
    accc:	0e 94 5c 6c 	call	0xd8b8	; 0xd8b8 <sysclk_enable_usb>
    acd0:	e0 ec       	ldi	r30, 0xC0	; 192
    acd2:	f4 e0       	ldi	r31, 0x04	; 4
    acd4:	80 81       	ld	r24, Z
    acd6:	80 64       	ori	r24, 0x40	; 64
    acd8:	80 83       	st	Z, r24
    acda:	81 e0       	ldi	r24, 0x01	; 1
    acdc:	f8 01       	movw	r30, r16
    acde:	80 83       	st	Z, r24
    ace0:	8f b7       	in	r24, 0x3f	; 63
    ace2:	8a 83       	std	Y+2, r24	; 0x02
    ace4:	f8 94       	cli
    ace6:	1a 81       	ldd	r17, Y+2	; 0x02
    ace8:	e4 e7       	ldi	r30, 0x74	; 116
    acea:	f4 e2       	ldi	r31, 0x24	; 36
    acec:	15 86       	std	Z+13, r1	; 0x0d
    acee:	15 8a       	std	Z+21, r1	; 0x15
    acf0:	15 8e       	std	Z+29, r1	; 0x1d
    acf2:	15 a2       	std	Z+37, r1	; 0x25
    acf4:	15 a6       	std	Z+45, r1	; 0x2d
    acf6:	15 aa       	std	Z+53, r1	; 0x35
    acf8:	e8 e0       	ldi	r30, 0x08	; 8
    acfa:	f4 e2       	ldi	r31, 0x24	; 36
    acfc:	80 81       	ld	r24, Z
    acfe:	8e 7f       	andi	r24, 0xFE	; 254
    ad00:	80 83       	st	Z, r24
    ad02:	e1 e1       	ldi	r30, 0x11	; 17
    ad04:	f4 e2       	ldi	r31, 0x24	; 36
    ad06:	80 81       	ld	r24, Z
    ad08:	8e 7f       	andi	r24, 0xFE	; 254
    ad0a:	80 83       	st	Z, r24
    ad0c:	ea e1       	ldi	r30, 0x1A	; 26
    ad0e:	f4 e2       	ldi	r31, 0x24	; 36
    ad10:	80 81       	ld	r24, Z
    ad12:	8e 7f       	andi	r24, 0xFE	; 254
    ad14:	80 83       	st	Z, r24
    ad16:	e3 e2       	ldi	r30, 0x23	; 35
    ad18:	f4 e2       	ldi	r31, 0x24	; 36
    ad1a:	80 81       	ld	r24, Z
    ad1c:	8e 7f       	andi	r24, 0xFE	; 254
    ad1e:	80 83       	st	Z, r24
    ad20:	6a e1       	ldi	r22, 0x1A	; 26
    ad22:	70 e0       	ldi	r23, 0x00	; 0
    ad24:	82 e0       	ldi	r24, 0x02	; 2
    ad26:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    ad2a:	8f 3f       	cpi	r24, 0xFF	; 255
    ad2c:	19 f0       	breq	.+6      	; 0xad34 <udd_enable+0x82>
    ad2e:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    ad32:	03 c0       	rjmp	.+6      	; 0xad3a <udd_enable+0x88>
    ad34:	8f e1       	ldi	r24, 0x1F	; 31
    ad36:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    ad3a:	6b e1       	ldi	r22, 0x1B	; 27
    ad3c:	70 e0       	ldi	r23, 0x00	; 0
    ad3e:	82 e0       	ldi	r24, 0x02	; 2
    ad40:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    ad44:	8f 3f       	cpi	r24, 0xFF	; 255
    ad46:	19 f0       	breq	.+6      	; 0xad4e <udd_enable+0x9c>
    ad48:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    ad4c:	03 c0       	rjmp	.+6      	; 0xad54 <udd_enable+0xa2>
    ad4e:	8f e1       	ldi	r24, 0x1F	; 31
    ad50:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    ad54:	e0 ec       	ldi	r30, 0xC0	; 192
    ad56:	f4 e0       	ldi	r31, 0x04	; 4
    ad58:	80 81       	ld	r24, Z
    ad5a:	82 60       	ori	r24, 0x02	; 2
    ad5c:	80 83       	st	Z, r24
    ad5e:	80 81       	ld	r24, Z
    ad60:	80 68       	ori	r24, 0x80	; 128
    ad62:	80 83       	st	Z, r24
    ad64:	80 81       	ld	r24, Z
    ad66:	80 61       	ori	r24, 0x10	; 16
    ad68:	80 83       	st	Z, r24
    ad6a:	80 e8       	ldi	r24, 0x80	; 128
    ad6c:	94 e2       	ldi	r25, 0x24	; 36
    ad6e:	86 83       	std	Z+6, r24	; 0x06
    ad70:	97 83       	std	Z+7, r25	; 0x07
    ad72:	80 81       	ld	r24, Z
    ad74:	80 62       	ori	r24, 0x20	; 32
    ad76:	80 83       	st	Z, r24
    ad78:	8f ef       	ldi	r24, 0xFF	; 255
    ad7a:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    ad7e:	e8 ec       	ldi	r30, 0xC8	; 200
    ad80:	f4 e0       	ldi	r31, 0x04	; 4
    ad82:	80 81       	ld	r24, Z
    ad84:	82 60       	ori	r24, 0x02	; 2
    ad86:	80 83       	st	Z, r24
    ad88:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <udd_b_idle>
    ad8c:	80 91 6c 2e 	lds	r24, 0x2E6C	; 0x802e6c <sleepmgr_locks+0x5>
    ad90:	8f 3f       	cpi	r24, 0xFF	; 255
    ad92:	09 f4       	brne	.+2      	; 0xad96 <udd_enable+0xe4>
    ad94:	ff cf       	rjmp	.-2      	; 0xad94 <udd_enable+0xe2>
    ad96:	8f b7       	in	r24, 0x3f	; 63
    ad98:	89 83       	std	Y+1, r24	; 0x01
    ad9a:	f8 94       	cli
    ad9c:	99 81       	ldd	r25, Y+1	; 0x01
    ad9e:	e7 e6       	ldi	r30, 0x67	; 103
    ada0:	fe e2       	ldi	r31, 0x2E	; 46
    ada2:	85 81       	ldd	r24, Z+5	; 0x05
    ada4:	8f 5f       	subi	r24, 0xFF	; 255
    ada6:	85 83       	std	Z+5, r24	; 0x05
    ada8:	9f bf       	out	0x3f, r25	; 63
    adaa:	56 df       	rcall	.-340    	; 0xac58 <udd_attach>
    adac:	1f bf       	out	0x3f, r17	; 63
    adae:	0f 90       	pop	r0
    adb0:	0f 90       	pop	r0
    adb2:	df 91       	pop	r29
    adb4:	cf 91       	pop	r28
    adb6:	1f 91       	pop	r17
    adb8:	0f 91       	pop	r16
    adba:	08 95       	ret

0000adbc <udd_is_high_speed>:
    adbc:	80 e0       	ldi	r24, 0x00	; 0
    adbe:	08 95       	ret

0000adc0 <udd_set_address>:
    adc0:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    adc4:	08 95       	ret

0000adc6 <udd_getaddress>:
    adc6:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    adca:	08 95       	ret

0000adcc <udd_get_frame_number>:
    adcc:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <udd_sram+0x3c>
    add0:	90 91 b1 24 	lds	r25, 0x24B1	; 0x8024b1 <udd_sram+0x3d>
    add4:	08 95       	ret

0000add6 <udd_get_micro_frame_number>:
    add6:	80 e0       	ldi	r24, 0x00	; 0
    add8:	90 e0       	ldi	r25, 0x00	; 0
    adda:	08 95       	ret

0000addc <udd_set_setup_payload>:
    addc:	e1 ed       	ldi	r30, 0xD1	; 209
    adde:	fd e2       	ldi	r31, 0x2D	; 45
    ade0:	80 87       	std	Z+8, r24	; 0x08
    ade2:	91 87       	std	Z+9, r25	; 0x09
    ade4:	62 87       	std	Z+10, r22	; 0x0a
    ade6:	73 87       	std	Z+11, r23	; 0x0b
    ade8:	08 95       	ret

0000adea <udd_ep_alloc>:
    adea:	28 2f       	mov	r18, r24
    adec:	2f 70       	andi	r18, 0x0F	; 15
    adee:	30 e0       	ldi	r19, 0x00	; 0
    adf0:	22 0f       	add	r18, r18
    adf2:	33 1f       	adc	r19, r19
    adf4:	08 2e       	mov	r0, r24
    adf6:	00 0c       	add	r0, r0
    adf8:	99 0b       	sbc	r25, r25
    adfa:	88 27       	eor	r24, r24
    adfc:	99 0f       	add	r25, r25
    adfe:	88 1f       	adc	r24, r24
    ae00:	99 27       	eor	r25, r25
    ae02:	82 0f       	add	r24, r18
    ae04:	93 1f       	adc	r25, r19
    ae06:	fc 01       	movw	r30, r24
    ae08:	ee 0f       	add	r30, r30
    ae0a:	ff 1f       	adc	r31, r31
    ae0c:	ee 0f       	add	r30, r30
    ae0e:	ff 1f       	adc	r31, r31
    ae10:	ee 0f       	add	r30, r30
    ae12:	ff 1f       	adc	r31, r31
    ae14:	ec 58       	subi	r30, 0x8C	; 140
    ae16:	fb 4d       	sbci	r31, 0xDB	; 219
    ae18:	25 85       	ldd	r18, Z+13	; 0x0d
    ae1a:	20 7c       	andi	r18, 0xC0	; 192
    ae1c:	09 f0       	breq	.+2      	; 0xae20 <udd_ep_alloc+0x36>
    ae1e:	69 c0       	rjmp	.+210    	; 0xaef2 <udd_ep_alloc+0x108>
    ae20:	63 70       	andi	r22, 0x03	; 3
    ae22:	61 30       	cpi	r22, 0x01	; 1
    ae24:	11 f0       	breq	.+4      	; 0xae2a <udd_ep_alloc+0x40>
    ae26:	18 f4       	brcc	.+6      	; 0xae2e <udd_ep_alloc+0x44>
    ae28:	04 c0       	rjmp	.+8      	; 0xae32 <udd_ep_alloc+0x48>
    ae2a:	60 ec       	ldi	r22, 0xC0	; 192
    ae2c:	03 c0       	rjmp	.+6      	; 0xae34 <udd_ep_alloc+0x4a>
    ae2e:	60 e8       	ldi	r22, 0x80	; 128
    ae30:	01 c0       	rjmp	.+2      	; 0xae34 <udd_ep_alloc+0x4a>
    ae32:	60 e4       	ldi	r22, 0x40	; 64
    ae34:	40 38       	cpi	r20, 0x80	; 128
    ae36:	51 05       	cpc	r21, r1
    ae38:	e9 f0       	breq	.+58     	; 0xae74 <udd_ep_alloc+0x8a>
    ae3a:	50 f4       	brcc	.+20     	; 0xae50 <udd_ep_alloc+0x66>
    ae3c:	40 32       	cpi	r20, 0x20	; 32
    ae3e:	51 05       	cpc	r21, r1
    ae40:	a9 f0       	breq	.+42     	; 0xae6c <udd_ep_alloc+0x82>
    ae42:	40 34       	cpi	r20, 0x40	; 64
    ae44:	51 05       	cpc	r21, r1
    ae46:	a1 f0       	breq	.+40     	; 0xae70 <udd_ep_alloc+0x86>
    ae48:	40 31       	cpi	r20, 0x10	; 16
    ae4a:	51 05       	cpc	r21, r1
    ae4c:	d9 f4       	brne	.+54     	; 0xae84 <udd_ep_alloc+0x9a>
    ae4e:	0c c0       	rjmp	.+24     	; 0xae68 <udd_ep_alloc+0x7e>
    ae50:	41 15       	cp	r20, r1
    ae52:	22 e0       	ldi	r18, 0x02	; 2
    ae54:	52 07       	cpc	r21, r18
    ae56:	91 f0       	breq	.+36     	; 0xae7c <udd_ep_alloc+0x92>
    ae58:	4f 3f       	cpi	r20, 0xFF	; 255
    ae5a:	23 e0       	ldi	r18, 0x03	; 3
    ae5c:	52 07       	cpc	r21, r18
    ae5e:	81 f0       	breq	.+32     	; 0xae80 <udd_ep_alloc+0x96>
    ae60:	41 15       	cp	r20, r1
    ae62:	51 40       	sbci	r21, 0x01	; 1
    ae64:	79 f4       	brne	.+30     	; 0xae84 <udd_ep_alloc+0x9a>
    ae66:	08 c0       	rjmp	.+16     	; 0xae78 <udd_ep_alloc+0x8e>
    ae68:	21 e0       	ldi	r18, 0x01	; 1
    ae6a:	0d c0       	rjmp	.+26     	; 0xae86 <udd_ep_alloc+0x9c>
    ae6c:	22 e0       	ldi	r18, 0x02	; 2
    ae6e:	0b c0       	rjmp	.+22     	; 0xae86 <udd_ep_alloc+0x9c>
    ae70:	23 e0       	ldi	r18, 0x03	; 3
    ae72:	09 c0       	rjmp	.+18     	; 0xae86 <udd_ep_alloc+0x9c>
    ae74:	24 e0       	ldi	r18, 0x04	; 4
    ae76:	07 c0       	rjmp	.+14     	; 0xae86 <udd_ep_alloc+0x9c>
    ae78:	25 e0       	ldi	r18, 0x05	; 5
    ae7a:	05 c0       	rjmp	.+10     	; 0xae86 <udd_ep_alloc+0x9c>
    ae7c:	26 e0       	ldi	r18, 0x06	; 6
    ae7e:	03 c0       	rjmp	.+6      	; 0xae86 <udd_ep_alloc+0x9c>
    ae80:	27 e0       	ldi	r18, 0x07	; 7
    ae82:	01 c0       	rjmp	.+2      	; 0xae86 <udd_ep_alloc+0x9c>
    ae84:	20 e0       	ldi	r18, 0x00	; 0
    ae86:	fc 01       	movw	r30, r24
    ae88:	ee 0f       	add	r30, r30
    ae8a:	ff 1f       	adc	r31, r31
    ae8c:	ee 0f       	add	r30, r30
    ae8e:	ff 1f       	adc	r31, r31
    ae90:	ee 0f       	add	r30, r30
    ae92:	ff 1f       	adc	r31, r31
    ae94:	ec 58       	subi	r30, 0x8C	; 140
    ae96:	fb 4d       	sbci	r31, 0xDB	; 219
    ae98:	15 86       	std	Z+13, r1	; 0x0d
    ae9a:	36 e0       	ldi	r19, 0x06	; 6
    ae9c:	34 87       	std	Z+12, r19	; 0x0c
    ae9e:	26 2b       	or	r18, r22
    aea0:	25 87       	std	Z+13, r18	; 0x0d
    aea2:	fc 01       	movw	r30, r24
    aea4:	ee 0f       	add	r30, r30
    aea6:	ff 1f       	adc	r31, r31
    aea8:	ee 0f       	add	r30, r30
    aeaa:	ff 1f       	adc	r31, r31
    aeac:	ee 0f       	add	r30, r30
    aeae:	ff 1f       	adc	r31, r31
    aeb0:	ec 58       	subi	r30, 0x8C	; 140
    aeb2:	fb 4d       	sbci	r31, 0xDB	; 219
    aeb4:	25 85       	ldd	r18, Z+13	; 0x0d
    aeb6:	20 7c       	andi	r18, 0xC0	; 192
    aeb8:	20 3c       	cpi	r18, 0xC0	; 192
    aeba:	69 f4       	brne	.+26     	; 0xaed6 <udd_ep_alloc+0xec>
    aebc:	fc 01       	movw	r30, r24
    aebe:	ee 0f       	add	r30, r30
    aec0:	ff 1f       	adc	r31, r31
    aec2:	ee 0f       	add	r30, r30
    aec4:	ff 1f       	adc	r31, r31
    aec6:	ee 0f       	add	r30, r30
    aec8:	ff 1f       	adc	r31, r31
    aeca:	ec 58       	subi	r30, 0x8C	; 140
    aecc:	fb 4d       	sbci	r31, 0xDB	; 219
    aece:	25 85       	ldd	r18, Z+13	; 0x0d
    aed0:	27 70       	andi	r18, 0x07	; 7
    aed2:	27 30       	cpi	r18, 0x07	; 7
    aed4:	81 f0       	breq	.+32     	; 0xaef6 <udd_ep_alloc+0x10c>
    aed6:	88 0f       	add	r24, r24
    aed8:	99 1f       	adc	r25, r25
    aeda:	88 0f       	add	r24, r24
    aedc:	99 1f       	adc	r25, r25
    aede:	88 0f       	add	r24, r24
    aee0:	99 1f       	adc	r25, r25
    aee2:	fc 01       	movw	r30, r24
    aee4:	ec 58       	subi	r30, 0x8C	; 140
    aee6:	fb 4d       	sbci	r31, 0xDB	; 219
    aee8:	85 85       	ldd	r24, Z+13	; 0x0d
    aeea:	80 62       	ori	r24, 0x20	; 32
    aeec:	85 87       	std	Z+13, r24	; 0x0d
    aeee:	81 e0       	ldi	r24, 0x01	; 1
    aef0:	08 95       	ret
    aef2:	80 e0       	ldi	r24, 0x00	; 0
    aef4:	08 95       	ret
    aef6:	81 e0       	ldi	r24, 0x01	; 1
    aef8:	08 95       	ret

0000aefa <udd_ep_is_halted>:
    aefa:	e8 2f       	mov	r30, r24
    aefc:	ef 70       	andi	r30, 0x0F	; 15
    aefe:	f0 e0       	ldi	r31, 0x00	; 0
    af00:	ee 0f       	add	r30, r30
    af02:	ff 1f       	adc	r31, r31
    af04:	08 2e       	mov	r0, r24
    af06:	00 0c       	add	r0, r0
    af08:	99 0b       	sbc	r25, r25
    af0a:	88 27       	eor	r24, r24
    af0c:	99 0f       	add	r25, r25
    af0e:	88 1f       	adc	r24, r24
    af10:	99 27       	eor	r25, r25
    af12:	e8 0f       	add	r30, r24
    af14:	f9 1f       	adc	r31, r25
    af16:	ee 0f       	add	r30, r30
    af18:	ff 1f       	adc	r31, r31
    af1a:	ee 0f       	add	r30, r30
    af1c:	ff 1f       	adc	r31, r31
    af1e:	ee 0f       	add	r30, r30
    af20:	ff 1f       	adc	r31, r31
    af22:	ec 58       	subi	r30, 0x8C	; 140
    af24:	fb 4d       	sbci	r31, 0xDB	; 219
    af26:	85 85       	ldd	r24, Z+13	; 0x0d
    af28:	82 fb       	bst	r24, 2
    af2a:	88 27       	eor	r24, r24
    af2c:	80 f9       	bld	r24, 0
    af2e:	08 95       	ret

0000af30 <udd_ep_clear_halt>:
    af30:	0f 93       	push	r16
    af32:	28 2f       	mov	r18, r24
    af34:	2f 70       	andi	r18, 0x0F	; 15
    af36:	30 e0       	ldi	r19, 0x00	; 0
    af38:	a9 01       	movw	r20, r18
    af3a:	44 0f       	add	r20, r20
    af3c:	55 1f       	adc	r21, r21
    af3e:	28 2f       	mov	r18, r24
    af40:	08 2e       	mov	r0, r24
    af42:	00 0c       	add	r0, r0
    af44:	33 0b       	sbc	r19, r19
    af46:	22 27       	eor	r18, r18
    af48:	33 0f       	add	r19, r19
    af4a:	22 1f       	adc	r18, r18
    af4c:	33 27       	eor	r19, r19
    af4e:	24 0f       	add	r18, r20
    af50:	35 1f       	adc	r19, r21
    af52:	a9 01       	movw	r20, r18
    af54:	44 0f       	add	r20, r20
    af56:	55 1f       	adc	r21, r21
    af58:	44 0f       	add	r20, r20
    af5a:	55 1f       	adc	r21, r21
    af5c:	44 0f       	add	r20, r20
    af5e:	55 1f       	adc	r21, r21
    af60:	fa 01       	movw	r30, r20
    af62:	e0 58       	subi	r30, 0x80	; 128
    af64:	fb 4d       	sbci	r31, 0xDB	; 219
    af66:	01 e0       	ldi	r16, 0x01	; 1
    af68:	06 93       	lac	Z, r16
    af6a:	fa 01       	movw	r30, r20
    af6c:	ec 58       	subi	r30, 0x8C	; 140
    af6e:	fb 4d       	sbci	r31, 0xDB	; 219
    af70:	95 85       	ldd	r25, Z+13	; 0x0d
    af72:	92 ff       	sbrs	r25, 2
    af74:	11 c0       	rjmp	.+34     	; 0xaf98 <udd_ep_clear_halt+0x68>
    af76:	fa 01       	movw	r30, r20
    af78:	ec 58       	subi	r30, 0x8C	; 140
    af7a:	fb 4d       	sbci	r31, 0xDB	; 219
    af7c:	95 85       	ldd	r25, Z+13	; 0x0d
    af7e:	9b 7f       	andi	r25, 0xFB	; 251
    af80:	95 87       	std	Z+13, r25	; 0x0d
    af82:	2c dc       	rcall	.-1960   	; 0xa7dc <udd_ep_get_job>
    af84:	fc 01       	movw	r30, r24
    af86:	80 81       	ld	r24, Z
    af88:	80 ff       	sbrs	r24, 0
    af8a:	06 c0       	rjmp	.+12     	; 0xaf98 <udd_ep_clear_halt+0x68>
    af8c:	8e 7f       	andi	r24, 0xFE	; 254
    af8e:	80 83       	st	Z, r24
    af90:	07 80       	ldd	r0, Z+7	; 0x07
    af92:	f0 85       	ldd	r31, Z+8	; 0x08
    af94:	e0 2d       	mov	r30, r0
    af96:	19 95       	eicall
    af98:	81 e0       	ldi	r24, 0x01	; 1
    af9a:	0f 91       	pop	r16
    af9c:	08 95       	ret

0000af9e <udd_ep_run>:
    af9e:	6f 92       	push	r6
    afa0:	7f 92       	push	r7
    afa2:	8f 92       	push	r8
    afa4:	9f 92       	push	r9
    afa6:	af 92       	push	r10
    afa8:	bf 92       	push	r11
    afaa:	cf 92       	push	r12
    afac:	df 92       	push	r13
    afae:	ef 92       	push	r14
    afb0:	ff 92       	push	r15
    afb2:	0f 93       	push	r16
    afb4:	1f 93       	push	r17
    afb6:	cf 93       	push	r28
    afb8:	df 93       	push	r29
    afba:	1f 92       	push	r1
    afbc:	cd b7       	in	r28, 0x3d	; 61
    afbe:	de b7       	in	r29, 0x3e	; 62
    afc0:	78 2e       	mov	r7, r24
    afc2:	66 2e       	mov	r6, r22
    afc4:	4a 01       	movw	r8, r20
    afc6:	59 01       	movw	r10, r18
    afc8:	09 dc       	rcall	.-2030   	; 0xa7dc <udd_ep_get_job>
    afca:	6c 01       	movw	r12, r24
    afcc:	27 2d       	mov	r18, r7
    afce:	87 2d       	mov	r24, r7
    afd0:	8f 70       	andi	r24, 0x0F	; 15
    afd2:	e8 2e       	mov	r14, r24
    afd4:	f1 2c       	mov	r15, r1
    afd6:	c7 01       	movw	r24, r14
    afd8:	88 0f       	add	r24, r24
    afda:	99 1f       	adc	r25, r25
    afdc:	e7 2c       	mov	r14, r7
    afde:	07 2c       	mov	r0, r7
    afe0:	00 0c       	add	r0, r0
    afe2:	ff 08       	sbc	r15, r15
    afe4:	ee 24       	eor	r14, r14
    afe6:	ff 0c       	add	r15, r15
    afe8:	ee 1c       	adc	r14, r14
    afea:	ff 24       	eor	r15, r15
    afec:	e8 0e       	add	r14, r24
    afee:	f9 1e       	adc	r15, r25
    aff0:	f7 01       	movw	r30, r14
    aff2:	ee 0f       	add	r30, r30
    aff4:	ff 1f       	adc	r31, r31
    aff6:	ee 0f       	add	r30, r30
    aff8:	ff 1f       	adc	r31, r31
    affa:	ee 0f       	add	r30, r30
    affc:	ff 1f       	adc	r31, r31
    affe:	ec 58       	subi	r30, 0x8C	; 140
    b000:	fb 4d       	sbci	r31, 0xDB	; 219
    b002:	85 85       	ldd	r24, Z+13	; 0x0d
    b004:	80 7c       	andi	r24, 0xC0	; 192
    b006:	09 f4       	brne	.+2      	; 0xb00a <udd_ep_run+0x6c>
    b008:	82 c0       	rjmp	.+260    	; 0xb10e <udd_ep_run+0x170>
    b00a:	f7 01       	movw	r30, r14
    b00c:	ee 0f       	add	r30, r30
    b00e:	ff 1f       	adc	r31, r31
    b010:	ee 0f       	add	r30, r30
    b012:	ff 1f       	adc	r31, r31
    b014:	ee 0f       	add	r30, r30
    b016:	ff 1f       	adc	r31, r31
    b018:	ec 58       	subi	r30, 0x8C	; 140
    b01a:	fb 4d       	sbci	r31, 0xDB	; 219
    b01c:	85 85       	ldd	r24, Z+13	; 0x0d
    b01e:	80 7c       	andi	r24, 0xC0	; 192
    b020:	80 3c       	cpi	r24, 0xC0	; 192
    b022:	61 f0       	breq	.+24     	; 0xb03c <udd_ep_run+0x9e>
    b024:	f7 01       	movw	r30, r14
    b026:	ee 0f       	add	r30, r30
    b028:	ff 1f       	adc	r31, r31
    b02a:	ee 0f       	add	r30, r30
    b02c:	ff 1f       	adc	r31, r31
    b02e:	ee 0f       	add	r30, r30
    b030:	ff 1f       	adc	r31, r31
    b032:	ec 58       	subi	r30, 0x8C	; 140
    b034:	fb 4d       	sbci	r31, 0xDB	; 219
    b036:	85 85       	ldd	r24, Z+13	; 0x0d
    b038:	82 fd       	sbrc	r24, 2
    b03a:	6b c0       	rjmp	.+214    	; 0xb112 <udd_ep_run+0x174>
    b03c:	8f b7       	in	r24, 0x3f	; 63
    b03e:	89 83       	std	Y+1, r24	; 0x01
    b040:	f8 94       	cli
    b042:	89 81       	ldd	r24, Y+1	; 0x01
    b044:	f6 01       	movw	r30, r12
    b046:	90 81       	ld	r25, Z
    b048:	90 ff       	sbrs	r25, 0
    b04a:	03 c0       	rjmp	.+6      	; 0xb052 <udd_ep_run+0xb4>
    b04c:	8f bf       	out	0x3f, r24	; 63
    b04e:	80 e0       	ldi	r24, 0x00	; 0
    b050:	61 c0       	rjmp	.+194    	; 0xb114 <udd_ep_run+0x176>
    b052:	f6 01       	movw	r30, r12
    b054:	90 81       	ld	r25, Z
    b056:	91 60       	ori	r25, 0x01	; 1
    b058:	90 83       	st	Z, r25
    b05a:	8f bf       	out	0x3f, r24	; 63
    b05c:	81 82       	std	Z+1, r8	; 0x01
    b05e:	92 82       	std	Z+2, r9	; 0x02
    b060:	a3 82       	std	Z+3, r10	; 0x03
    b062:	b4 82       	std	Z+4, r11	; 0x04
    b064:	15 82       	std	Z+5, r1	; 0x05
    b066:	16 82       	std	Z+6, r1	; 0x06
    b068:	07 83       	std	Z+7, r16	; 0x07
    b06a:	10 87       	std	Z+8, r17	; 0x08
    b06c:	61 10       	cpse	r6, r1
    b06e:	06 c0       	rjmp	.+12     	; 0xb07c <udd_ep_run+0xde>
    b070:	91 e0       	ldi	r25, 0x01	; 1
    b072:	a1 14       	cp	r10, r1
    b074:	b1 04       	cpc	r11, r1
    b076:	19 f0       	breq	.+6      	; 0xb07e <udd_ep_run+0xe0>
    b078:	90 e0       	ldi	r25, 0x00	; 0
    b07a:	01 c0       	rjmp	.+2      	; 0xb07e <udd_ep_run+0xe0>
    b07c:	91 e0       	ldi	r25, 0x01	; 1
    b07e:	f6 01       	movw	r30, r12
    b080:	80 81       	ld	r24, Z
    b082:	90 fb       	bst	r25, 0
    b084:	81 f9       	bld	r24, 1
    b086:	8b 7f       	andi	r24, 0xFB	; 251
    b088:	80 83       	st	Z, r24
    b08a:	22 23       	and	r18, r18
    b08c:	64 f4       	brge	.+24     	; 0xb0a6 <udd_ep_run+0x108>
    b08e:	f7 01       	movw	r30, r14
    b090:	ee 0f       	add	r30, r30
    b092:	ff 1f       	adc	r31, r31
    b094:	ee 0f       	add	r30, r30
    b096:	ff 1f       	adc	r31, r31
    b098:	ee 0f       	add	r30, r30
    b09a:	ff 1f       	adc	r31, r31
    b09c:	ec 58       	subi	r30, 0x8C	; 140
    b09e:	fb 4d       	sbci	r31, 0xDB	; 219
    b0a0:	12 8a       	std	Z+18, r1	; 0x12
    b0a2:	13 8a       	std	Z+19, r1	; 0x13
    b0a4:	30 c0       	rjmp	.+96     	; 0xb106 <udd_ep_run+0x168>
    b0a6:	f7 01       	movw	r30, r14
    b0a8:	ee 0f       	add	r30, r30
    b0aa:	ff 1f       	adc	r31, r31
    b0ac:	ee 0f       	add	r30, r30
    b0ae:	ff 1f       	adc	r31, r31
    b0b0:	ee 0f       	add	r30, r30
    b0b2:	ff 1f       	adc	r31, r31
    b0b4:	ec 58       	subi	r30, 0x8C	; 140
    b0b6:	fb 4d       	sbci	r31, 0xDB	; 219
    b0b8:	85 85       	ldd	r24, Z+13	; 0x0d
    b0ba:	80 7c       	andi	r24, 0xC0	; 192
    b0bc:	80 3c       	cpi	r24, 0xC0	; 192
    b0be:	b1 f4       	brne	.+44     	; 0xb0ec <udd_ep_run+0x14e>
    b0c0:	c7 01       	movw	r24, r14
    b0c2:	88 0f       	add	r24, r24
    b0c4:	99 1f       	adc	r25, r25
    b0c6:	88 0f       	add	r24, r24
    b0c8:	99 1f       	adc	r25, r25
    b0ca:	88 0f       	add	r24, r24
    b0cc:	99 1f       	adc	r25, r25
    b0ce:	80 58       	subi	r24, 0x80	; 128
    b0d0:	9b 4d       	sbci	r25, 0xDB	; 219
    b0d2:	5b db       	rcall	.-2378   	; 0xa78a <udd_ep_get_size>
    b0d4:	bc 01       	movw	r22, r24
    b0d6:	c5 01       	movw	r24, r10
    b0d8:	0e 94 53 7c 	call	0xf8a6	; 0xf8a6 <__udivmodhi4>
    b0dc:	89 2b       	or	r24, r25
    b0de:	31 f0       	breq	.+12     	; 0xb0ec <udd_ep_run+0x14e>
    b0e0:	f6 01       	movw	r30, r12
    b0e2:	80 81       	ld	r24, Z
    b0e4:	8e 7f       	andi	r24, 0xFE	; 254
    b0e6:	80 83       	st	Z, r24
    b0e8:	80 e0       	ldi	r24, 0x00	; 0
    b0ea:	14 c0       	rjmp	.+40     	; 0xb114 <udd_ep_run+0x176>
    b0ec:	f7 01       	movw	r30, r14
    b0ee:	ee 0f       	add	r30, r30
    b0f0:	ff 1f       	adc	r31, r31
    b0f2:	ee 0f       	add	r30, r30
    b0f4:	ff 1f       	adc	r31, r31
    b0f6:	ee 0f       	add	r30, r30
    b0f8:	ff 1f       	adc	r31, r31
    b0fa:	ec 58       	subi	r30, 0x8C	; 140
    b0fc:	fb 4d       	sbci	r31, 0xDB	; 219
    b0fe:	16 86       	std	Z+14, r1	; 0x0e
    b100:	17 86       	std	Z+15, r1	; 0x0f
    b102:	12 8a       	std	Z+18, r1	; 0x12
    b104:	13 8a       	std	Z+19, r1	; 0x13
    b106:	87 2d       	mov	r24, r7
    b108:	f6 db       	rcall	.-2068   	; 0xa8f6 <udd_ep_trans_complet>
    b10a:	81 e0       	ldi	r24, 0x01	; 1
    b10c:	03 c0       	rjmp	.+6      	; 0xb114 <udd_ep_run+0x176>
    b10e:	80 e0       	ldi	r24, 0x00	; 0
    b110:	01 c0       	rjmp	.+2      	; 0xb114 <udd_ep_run+0x176>
    b112:	80 e0       	ldi	r24, 0x00	; 0
    b114:	0f 90       	pop	r0
    b116:	df 91       	pop	r29
    b118:	cf 91       	pop	r28
    b11a:	1f 91       	pop	r17
    b11c:	0f 91       	pop	r16
    b11e:	ff 90       	pop	r15
    b120:	ef 90       	pop	r14
    b122:	df 90       	pop	r13
    b124:	cf 90       	pop	r12
    b126:	bf 90       	pop	r11
    b128:	af 90       	pop	r10
    b12a:	9f 90       	pop	r9
    b12c:	8f 90       	pop	r8
    b12e:	7f 90       	pop	r7
    b130:	6f 90       	pop	r6
    b132:	08 95       	ret

0000b134 <udd_ep_abort>:
    b134:	ff 92       	push	r15
    b136:	0f 93       	push	r16
    b138:	1f 93       	push	r17
    b13a:	cf 93       	push	r28
    b13c:	df 93       	push	r29
    b13e:	18 2f       	mov	r17, r24
    b140:	c8 2f       	mov	r28, r24
    b142:	cf 70       	andi	r28, 0x0F	; 15
    b144:	d0 e0       	ldi	r29, 0x00	; 0
    b146:	ce 01       	movw	r24, r28
    b148:	88 0f       	add	r24, r24
    b14a:	99 1f       	adc	r25, r25
    b14c:	c1 2f       	mov	r28, r17
    b14e:	01 2e       	mov	r0, r17
    b150:	00 0c       	add	r0, r0
    b152:	dd 0b       	sbc	r29, r29
    b154:	cc 27       	eor	r28, r28
    b156:	dd 0f       	add	r29, r29
    b158:	cc 1f       	adc	r28, r28
    b15a:	dd 27       	eor	r29, r29
    b15c:	c8 0f       	add	r28, r24
    b15e:	d9 1f       	adc	r29, r25
    b160:	81 2f       	mov	r24, r17
    b162:	3c db       	rcall	.-2440   	; 0xa7dc <udd_ep_get_job>
    b164:	dc 01       	movw	r26, r24
    b166:	fe 01       	movw	r30, r28
    b168:	ee 0f       	add	r30, r30
    b16a:	ff 1f       	adc	r31, r31
    b16c:	ee 0f       	add	r30, r30
    b16e:	ff 1f       	adc	r31, r31
    b170:	ee 0f       	add	r30, r30
    b172:	ff 1f       	adc	r31, r31
    b174:	e0 58       	subi	r30, 0x80	; 128
    b176:	fb 4d       	sbci	r31, 0xDB	; 219
    b178:	02 e0       	ldi	r16, 0x02	; 2
    b17a:	05 93       	las	Z, r16
    b17c:	8c 91       	ld	r24, X
    b17e:	80 ff       	sbrs	r24, 0
    b180:	22 c0       	rjmp	.+68     	; 0xb1c6 <udd_ep_abort+0x92>
    b182:	8e 7f       	andi	r24, 0xFE	; 254
    b184:	8c 93       	st	X, r24
    b186:	17 96       	adiw	r26, 0x07	; 7
    b188:	ed 91       	ld	r30, X+
    b18a:	fc 91       	ld	r31, X
    b18c:	18 97       	sbiw	r26, 0x08	; 8
    b18e:	30 97       	sbiw	r30, 0x00	; 0
    b190:	d1 f0       	breq	.+52     	; 0xb1c6 <udd_ep_abort+0x92>
    b192:	11 23       	and	r17, r17
    b194:	5c f4       	brge	.+22     	; 0xb1ac <udd_ep_abort+0x78>
    b196:	cc 0f       	add	r28, r28
    b198:	dd 1f       	adc	r29, r29
    b19a:	cc 0f       	add	r28, r28
    b19c:	dd 1f       	adc	r29, r29
    b19e:	cc 0f       	add	r28, r28
    b1a0:	dd 1f       	adc	r29, r29
    b1a2:	cc 58       	subi	r28, 0x8C	; 140
    b1a4:	db 4d       	sbci	r29, 0xDB	; 219
    b1a6:	6a 89       	ldd	r22, Y+18	; 0x12
    b1a8:	7b 89       	ldd	r23, Y+19	; 0x13
    b1aa:	0a c0       	rjmp	.+20     	; 0xb1c0 <udd_ep_abort+0x8c>
    b1ac:	cc 0f       	add	r28, r28
    b1ae:	dd 1f       	adc	r29, r29
    b1b0:	cc 0f       	add	r28, r28
    b1b2:	dd 1f       	adc	r29, r29
    b1b4:	cc 0f       	add	r28, r28
    b1b6:	dd 1f       	adc	r29, r29
    b1b8:	cc 58       	subi	r28, 0x8C	; 140
    b1ba:	db 4d       	sbci	r29, 0xDB	; 219
    b1bc:	6e 85       	ldd	r22, Y+14	; 0x0e
    b1be:	7f 85       	ldd	r23, Y+15	; 0x0f
    b1c0:	41 2f       	mov	r20, r17
    b1c2:	81 e0       	ldi	r24, 0x01	; 1
    b1c4:	19 95       	eicall
    b1c6:	df 91       	pop	r29
    b1c8:	cf 91       	pop	r28
    b1ca:	1f 91       	pop	r17
    b1cc:	0f 91       	pop	r16
    b1ce:	ff 90       	pop	r15
    b1d0:	08 95       	ret

0000b1d2 <udd_ep_free>:
    b1d2:	cf 93       	push	r28
    b1d4:	c8 2f       	mov	r28, r24
    b1d6:	ae df       	rcall	.-164    	; 0xb134 <udd_ep_abort>
    b1d8:	ec 2f       	mov	r30, r28
    b1da:	ef 70       	andi	r30, 0x0F	; 15
    b1dc:	f0 e0       	ldi	r31, 0x00	; 0
    b1de:	ee 0f       	add	r30, r30
    b1e0:	ff 1f       	adc	r31, r31
    b1e2:	8c 2f       	mov	r24, r28
    b1e4:	cc 0f       	add	r28, r28
    b1e6:	99 0b       	sbc	r25, r25
    b1e8:	88 27       	eor	r24, r24
    b1ea:	99 0f       	add	r25, r25
    b1ec:	88 1f       	adc	r24, r24
    b1ee:	99 27       	eor	r25, r25
    b1f0:	e8 0f       	add	r30, r24
    b1f2:	f9 1f       	adc	r31, r25
    b1f4:	ee 0f       	add	r30, r30
    b1f6:	ff 1f       	adc	r31, r31
    b1f8:	ee 0f       	add	r30, r30
    b1fa:	ff 1f       	adc	r31, r31
    b1fc:	ee 0f       	add	r30, r30
    b1fe:	ff 1f       	adc	r31, r31
    b200:	ec 58       	subi	r30, 0x8C	; 140
    b202:	fb 4d       	sbci	r31, 0xDB	; 219
    b204:	15 86       	std	Z+13, r1	; 0x0d
    b206:	cf 91       	pop	r28
    b208:	08 95       	ret

0000b20a <udd_ep_set_halt>:
    b20a:	e8 2f       	mov	r30, r24
    b20c:	ef 70       	andi	r30, 0x0F	; 15
    b20e:	f0 e0       	ldi	r31, 0x00	; 0
    b210:	ee 0f       	add	r30, r30
    b212:	ff 1f       	adc	r31, r31
    b214:	28 2f       	mov	r18, r24
    b216:	08 2e       	mov	r0, r24
    b218:	00 0c       	add	r0, r0
    b21a:	33 0b       	sbc	r19, r19
    b21c:	22 27       	eor	r18, r18
    b21e:	33 0f       	add	r19, r19
    b220:	22 1f       	adc	r18, r18
    b222:	33 27       	eor	r19, r19
    b224:	e2 0f       	add	r30, r18
    b226:	f3 1f       	adc	r31, r19
    b228:	ee 0f       	add	r30, r30
    b22a:	ff 1f       	adc	r31, r31
    b22c:	ee 0f       	add	r30, r30
    b22e:	ff 1f       	adc	r31, r31
    b230:	ee 0f       	add	r30, r30
    b232:	ff 1f       	adc	r31, r31
    b234:	ec 58       	subi	r30, 0x8C	; 140
    b236:	fb 4d       	sbci	r31, 0xDB	; 219
    b238:	95 85       	ldd	r25, Z+13	; 0x0d
    b23a:	94 60       	ori	r25, 0x04	; 4
    b23c:	95 87       	std	Z+13, r25	; 0x0d
    b23e:	7a df       	rcall	.-268    	; 0xb134 <udd_ep_abort>
    b240:	81 e0       	ldi	r24, 0x01	; 1
    b242:	08 95       	ret

0000b244 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    b244:	1f 92       	push	r1
    b246:	0f 92       	push	r0
    b248:	0f b6       	in	r0, 0x3f	; 63
    b24a:	0f 92       	push	r0
    b24c:	11 24       	eor	r1, r1
    b24e:	0b b6       	in	r0, 0x3b	; 59
    b250:	0f 92       	push	r0
    b252:	0f 93       	push	r16
    b254:	2f 93       	push	r18
    b256:	3f 93       	push	r19
    b258:	4f 93       	push	r20
    b25a:	5f 93       	push	r21
    b25c:	6f 93       	push	r22
    b25e:	7f 93       	push	r23
    b260:	8f 93       	push	r24
    b262:	9f 93       	push	r25
    b264:	af 93       	push	r26
    b266:	bf 93       	push	r27
    b268:	ef 93       	push	r30
    b26a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    b26c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b270:	88 23       	and	r24, r24
    b272:	34 f4       	brge	.+12     	; 0xb280 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    b274:	80 e8       	ldi	r24, 0x80	; 128
    b276:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    b27a:	0e 94 6d 71 	call	0xe2da	; 0xe2da <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    b27e:	8a c0       	rjmp	.+276    	; 0xb394 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    b280:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b284:	82 ff       	sbrs	r24, 2
    b286:	20 c0       	rjmp	.+64     	; 0xb2c8 <__vector_125+0x84>
		udd_ack_underflow_event();
    b288:	84 e0       	ldi	r24, 0x04	; 4
    b28a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    b28e:	80 91 88 24 	lds	r24, 0x2488	; 0x802488 <udd_sram+0x14>
    b292:	86 ff       	sbrs	r24, 6
    b294:	7f c0       	rjmp	.+254    	; 0xb394 <__vector_125+0x150>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    b296:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    b29a:	81 fd       	sbrc	r24, 1
    b29c:	7b c0       	rjmp	.+246    	; 0xb394 <__vector_125+0x150>
    b29e:	b9 da       	rcall	.-2702   	; 0xa812 <udd_ctrl_interrupt_tc_setup>
    b2a0:	81 11       	cpse	r24, r1
    b2a2:	78 c0       	rjmp	.+240    	; 0xb394 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    b2a4:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_ep_control_state>
    b2a8:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    b2aa:	11 f4       	brne	.+4      	; 0xb2b0 <__vector_125+0x6c>
    b2ac:	ec d9       	rcall	.-3112   	; 0xa686 <udd_ctrl_send_zlp_in>
    b2ae:	72 c0       	rjmp	.+228    	; 0xb394 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    b2b0:	84 30       	cpi	r24, 0x04	; 4
    b2b2:	09 f0       	breq	.+2      	; 0xb2b6 <__vector_125+0x72>
    b2b4:	6f c0       	rjmp	.+222    	; 0xb394 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    b2b6:	e9 e8       	ldi	r30, 0x89	; 137
    b2b8:	f4 e2       	ldi	r31, 0x24	; 36
    b2ba:	04 e0       	ldi	r16, 0x04	; 4
    b2bc:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    b2be:	e1 e8       	ldi	r30, 0x81	; 129
    b2c0:	f4 e2       	ldi	r31, 0x24	; 36
    b2c2:	04 e0       	ldi	r16, 0x04	; 4
    b2c4:	05 93       	las	Z, r16
    b2c6:	66 c0       	rjmp	.+204    	; 0xb394 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    b2c8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b2cc:	81 ff       	sbrs	r24, 1
    b2ce:	5d c0       	rjmp	.+186    	; 0xb38a <__vector_125+0x146>
		udd_ack_overflow_event();
    b2d0:	82 e0       	ldi	r24, 0x02	; 2
    b2d2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    b2d6:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_sram+0xc>
    b2da:	86 ff       	sbrs	r24, 6
    b2dc:	5b c0       	rjmp	.+182    	; 0xb394 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    b2de:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    b2e2:	81 fd       	sbrc	r24, 1
    b2e4:	57 c0       	rjmp	.+174    	; 0xb394 <__vector_125+0x150>
    b2e6:	95 da       	rcall	.-2774   	; 0xa812 <udd_ctrl_interrupt_tc_setup>
    b2e8:	81 11       	cpse	r24, r1
    b2ea:	54 c0       	rjmp	.+168    	; 0xb394 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    b2ec:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_ep_control_state>
    b2f0:	82 30       	cpi	r24, 0x02	; 2
    b2f2:	41 f4       	brne	.+16     	; 0xb304 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    b2f4:	84 e0       	ldi	r24, 0x04	; 4
    b2f6:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    b2fa:	e0 e8       	ldi	r30, 0x80	; 128
    b2fc:	f4 e2       	ldi	r31, 0x24	; 36
    b2fe:	02 e0       	ldi	r16, 0x02	; 2
    b300:	06 93       	lac	Z, r16
    b302:	48 c0       	rjmp	.+144    	; 0xb394 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    b304:	83 30       	cpi	r24, 0x03	; 3
    b306:	09 f0       	breq	.+2      	; 0xb30a <__vector_125+0xc6>
    b308:	45 c0       	rjmp	.+138    	; 0xb394 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    b30a:	e9 e8       	ldi	r30, 0x89	; 137
    b30c:	f4 e2       	ldi	r31, 0x24	; 36
    b30e:	04 e0       	ldi	r16, 0x04	; 4
    b310:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    b312:	e1 e8       	ldi	r30, 0x81	; 129
    b314:	f4 e2       	ldi	r31, 0x24	; 36
    b316:	04 e0       	ldi	r16, 0x04	; 4
    b318:	05 93       	las	Z, r16
    b31a:	3c c0       	rjmp	.+120    	; 0xb394 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    b31c:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    b31e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    b322:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    b324:	07 df       	rcall	.-498    	; 0xb134 <udd_ep_abort>
    b326:	81 e8       	ldi	r24, 0x81	; 129
    b328:	05 df       	rcall	.-502    	; 0xb134 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    b32a:	82 e0       	ldi	r24, 0x02	; 2
    b32c:	03 df       	rcall	.-506    	; 0xb134 <udd_ep_abort>
    b32e:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    b330:	01 df       	rcall	.-510    	; 0xb134 <udd_ep_abort>
    b332:	0e 94 3f 71 	call	0xe27e	; 0xe27e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    b336:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    b33a:	e4 e7       	ldi	r30, 0x74	; 116
    b33c:	f4 e2       	ldi	r31, 0x24	; 36
	udd_endpoint_clear_status(ep_ctrl);
    b33e:	15 86       	std	Z+13, r1	; 0x0d
    b340:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    b342:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    b344:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    b346:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    b348:	15 8a       	std	Z+21, r1	; 0x15
    b34a:	94 8b       	std	Z+20, r25	; 0x14
    b34c:	85 8b       	std	Z+21, r24	; 0x15
    b34e:	8c e2       	ldi	r24, 0x2C	; 44
		// Reset endpoint control management
		udd_ctrl_init();
    b350:	94 e2       	ldi	r25, 0x24	; 36
    b352:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    b354:	91 8b       	std	Z+17, r25	; 0x11
    b356:	64 d9       	rcall	.-3384   	; 0xa620 <udd_ctrl_init>
    b358:	1d c0       	rjmp	.+58     	; 0xb394 <__vector_125+0x150>
		udd_ack_suspend_event();
    b35a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b35e:	86 ff       	sbrs	r24, 6
		udd_sleep_mode(false); // Enter in SUSPEND mode
    b360:	08 c0       	rjmp	.+16     	; 0xb372 <__vector_125+0x12e>
    b362:	80 e4       	ldi	r24, 0x40	; 64
    b364:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    b368:	80 e0       	ldi	r24, 0x00	; 0
    b36a:	22 d9       	rcall	.-3516   	; 0xa5b0 <udd_sleep_mode>
    b36c:	0e 94 ba 20 	call	0x4174	; 0x4174 <usb_callback_suspend_action>
		udd_ack_resume_event();
    b370:	11 c0       	rjmp	.+34     	; 0xb394 <__vector_125+0x150>
    b372:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    b376:	85 ff       	sbrs	r24, 5
    b378:	0d c0       	rjmp	.+26     	; 0xb394 <__vector_125+0x150>
    b37a:	80 e2       	ldi	r24, 0x20	; 32
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    b37c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    b380:	81 e0       	ldi	r24, 0x01	; 1
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    b382:	16 d9       	rcall	.-3540   	; 0xa5b0 <udd_sleep_mode>
    b384:	0e 94 be 20 	call	0x417c	; 0x417c <usb_callback_resume_action>
    b388:	05 c0       	rjmp	.+10     	; 0xb394 <__vector_125+0x150>
    b38a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    b38e:	84 fd       	sbrc	r24, 4
    b390:	c5 cf       	rjmp	.-118    	; 0xb31c <__vector_125+0xd8>
    b392:	e3 cf       	rjmp	.-58     	; 0xb35a <__vector_125+0x116>
    b394:	ff 91       	pop	r31
    b396:	ef 91       	pop	r30
    b398:	bf 91       	pop	r27
    b39a:	af 91       	pop	r26
    b39c:	9f 91       	pop	r25
    b39e:	8f 91       	pop	r24
    b3a0:	7f 91       	pop	r23
    b3a2:	6f 91       	pop	r22
    b3a4:	5f 91       	pop	r21
    b3a6:	4f 91       	pop	r20
    b3a8:	3f 91       	pop	r19
    b3aa:	2f 91       	pop	r18
    b3ac:	0f 91       	pop	r16
    b3ae:	0f 90       	pop	r0
    b3b0:	0b be       	out	0x3b, r0	; 59
    b3b2:	0f 90       	pop	r0
    b3b4:	0f be       	out	0x3f, r0	; 63
    b3b6:	0f 90       	pop	r0
    b3b8:	1f 90       	pop	r1
    b3ba:	18 95       	reti

0000b3bc <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    b3bc:	1f 92       	push	r1
    b3be:	0f 92       	push	r0
    b3c0:	0f b6       	in	r0, 0x3f	; 63
    b3c2:	0f 92       	push	r0
    b3c4:	11 24       	eor	r1, r1
    b3c6:	0b b6       	in	r0, 0x3b	; 59
    b3c8:	0f 92       	push	r0
    b3ca:	0f 93       	push	r16
    b3cc:	1f 93       	push	r17
    b3ce:	2f 93       	push	r18
    b3d0:	3f 93       	push	r19
    b3d2:	4f 93       	push	r20
    b3d4:	5f 93       	push	r21
    b3d6:	6f 93       	push	r22
    b3d8:	7f 93       	push	r23
    b3da:	8f 93       	push	r24
    b3dc:	9f 93       	push	r25
    b3de:	af 93       	push	r26
    b3e0:	bf 93       	push	r27
    b3e2:	cf 93       	push	r28
    b3e4:	df 93       	push	r29
    b3e6:	ef 93       	push	r30
    b3e8:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    b3ea:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    b3ee:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    b3f0:	03 c0       	rjmp	.+6      	; 0xb3f8 <__vector_126+0x3c>
    b3f2:	0f da       	rcall	.-3042   	; 0xa812 <udd_ctrl_interrupt_tc_setup>
    b3f4:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    b3f6:	c4 c0       	rjmp	.+392    	; 0xb580 <__vector_126+0x1c4>
    b3f8:	82 e0       	ldi	r24, 0x02	; 2
    b3fa:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    b3fe:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    b402:	81 95       	neg	r24
    b404:	88 0f       	add	r24, r24
    b406:	e0 e8       	ldi	r30, 0x80	; 128
    b408:	f4 e2       	ldi	r31, 0x24	; 36
    b40a:	e8 1b       	sub	r30, r24
    b40c:	f1 09       	sbc	r31, r1
    b40e:	20 81       	ld	r18, Z
    b410:	31 81       	ldd	r19, Z+1	; 0x01
    b412:	20 58       	subi	r18, 0x80	; 128
    b414:	34 42       	sbci	r19, 0x24	; 36
    b416:	36 95       	lsr	r19
    b418:	27 95       	ror	r18
    b41a:	36 95       	lsr	r19
    b41c:	27 95       	ror	r18
    b41e:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    b420:	27 95       	ror	r18
    b422:	82 2f       	mov	r24, r18
    b424:	86 95       	lsr	r24
    b426:	20 fd       	sbrc	r18, 0
    b428:	02 c0       	rjmp	.+4      	; 0xb42e <__vector_126+0x72>
    b42a:	90 e0       	ldi	r25, 0x00	; 0
    b42c:	01 c0       	rjmp	.+2      	; 0xb430 <__vector_126+0x74>
    b42e:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    b430:	89 0f       	add	r24, r25
    b432:	e8 2f       	mov	r30, r24
    b434:	ef 70       	andi	r30, 0x0F	; 15
    b436:	f0 e0       	ldi	r31, 0x00	; 0
    b438:	ee 0f       	add	r30, r30
    b43a:	ff 1f       	adc	r31, r31
    b43c:	28 2f       	mov	r18, r24
    b43e:	08 2e       	mov	r0, r24
    b440:	00 0c       	add	r0, r0
    b442:	33 0b       	sbc	r19, r19
    b444:	22 27       	eor	r18, r18
    b446:	33 0f       	add	r19, r19
    b448:	22 1f       	adc	r18, r18
    b44a:	33 27       	eor	r19, r19
    b44c:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    b44e:	f3 1f       	adc	r31, r19
    b450:	df 01       	movw	r26, r30
    b452:	aa 0f       	add	r26, r26
    b454:	bb 1f       	adc	r27, r27
    b456:	aa 0f       	add	r26, r26
    b458:	bb 1f       	adc	r27, r27
    b45a:	aa 0f       	add	r26, r26
    b45c:	bb 1f       	adc	r27, r27
    b45e:	ac 58       	subi	r26, 0x8C	; 140
    b460:	bb 4d       	sbci	r27, 0xDB	; 219
    b462:	1c 96       	adiw	r26, 0x0c	; 12
    b464:	9c 91       	ld	r25, X
    b466:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    b468:	8b c0       	rjmp	.+278    	; 0xb580 <__vector_126+0x1c4>
    b46a:	ee 0f       	add	r30, r30
    b46c:	ff 1f       	adc	r31, r31
    b46e:	ee 0f       	add	r30, r30
    b470:	ff 1f       	adc	r31, r31
    b472:	ee 0f       	add	r30, r30
    b474:	ff 1f       	adc	r31, r31
    b476:	e0 58       	subi	r30, 0x80	; 128
    b478:	fb 4d       	sbci	r31, 0xDB	; 219
    b47a:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    b47c:	06 93       	lac	Z, r16
    b47e:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    b480:	7a c0       	rjmp	.+244    	; 0xb576 <__vector_126+0x1ba>
    b482:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    b486:	84 30       	cpi	r24, 0x04	; 4
    b488:	19 f4       	brne	.+6      	; 0xb490 <__vector_126+0xd4>
    b48a:	0b d9       	rcall	.-3562   	; 0xa6a2 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    b48c:	c9 d8       	rcall	.-3694   	; 0xa620 <udd_ctrl_init>
    b48e:	78 c0       	rjmp	.+240    	; 0xb580 <__vector_126+0x1c4>
    b490:	00 91 82 24 	lds	r16, 0x2482	; 0x802482 <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    b494:	10 91 83 24 	lds	r17, 0x2483	; 0x802483 <udd_sram+0xf>
    b498:	80 91 db 2d 	lds	r24, 0x2DDB	; 0x802ddb <udd_g_ctrlreq+0xa>
    b49c:	90 91 dc 2d 	lds	r25, 0x2DDC	; 0x802ddc <udd_g_ctrlreq+0xb>
    b4a0:	c0 91 6c 24 	lds	r28, 0x246C	; 0x80246c <udd_ctrl_payload_nb_trans>
    b4a4:	d0 91 6d 24 	lds	r29, 0x246D	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    b4a8:	98 01       	movw	r18, r16
    b4aa:	2c 0f       	add	r18, r28
    b4ac:	3d 1f       	adc	r19, r29
    b4ae:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    b4b0:	93 07       	cpc	r25, r19
    b4b2:	18 f4       	brcc	.+6      	; 0xb4ba <__vector_126+0xfe>
    b4b4:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    b4b6:	0c 1b       	sub	r16, r28
    b4b8:	1d 0b       	sbc	r17, r29
    b4ba:	80 91 d9 2d 	lds	r24, 0x2DD9	; 0x802dd9 <udd_g_ctrlreq+0x8>
    b4be:	90 91 da 2d 	lds	r25, 0x2DDA	; 0x802dda <udd_g_ctrlreq+0x9>
    b4c2:	a8 01       	movw	r20, r16
    b4c4:	6c e2       	ldi	r22, 0x2C	; 44
    b4c6:	74 e2       	ldi	r23, 0x24	; 36
    b4c8:	8c 0f       	add	r24, r28
    b4ca:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    b4cc:	0e 94 cb 7f 	call	0xff96	; 0xff96 <memcpy>
    b4d0:	c0 0f       	add	r28, r16
    b4d2:	d1 1f       	adc	r29, r17
    b4d4:	c0 93 6c 24 	sts	0x246C, r28	; 0x80246c <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    b4d8:	d0 93 6d 24 	sts	0x246D, r29	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    b4dc:	00 34       	cpi	r16, 0x40	; 64
    b4de:	11 05       	cpc	r17, r1
    b4e0:	69 f4       	brne	.+26     	; 0xb4fc <__vector_126+0x140>
    b4e2:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    b4e6:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
    b4ea:	8c 0f       	add	r24, r28
    b4ec:	9d 1f       	adc	r25, r29
    b4ee:	20 91 d7 2d 	lds	r18, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    b4f2:	30 91 d8 2d 	lds	r19, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    b4f6:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    b4f8:	93 07       	cpc	r25, r19
    b4fa:	80 f0       	brcs	.+32     	; 0xb51c <__vector_126+0x160>
    b4fc:	e1 ed       	ldi	r30, 0xD1	; 209
    b4fe:	fd e2       	ldi	r31, 0x2D	; 45
		if (NULL != udd_g_ctrlreq.over_under_run) {
    b500:	c2 87       	std	Z+10, r28	; 0x0a
    b502:	d3 87       	std	Z+11, r29	; 0x0b
    b504:	06 84       	ldd	r0, Z+14	; 0x0e
    b506:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    b508:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    b50a:	30 97       	sbiw	r30, 0x00	; 0
    b50c:	29 f0       	breq	.+10     	; 0xb518 <__vector_126+0x15c>
    b50e:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    b510:	81 11       	cpse	r24, r1
    b512:	02 c0       	rjmp	.+4      	; 0xb518 <__vector_126+0x15c>
    b514:	aa d8       	rcall	.-3756   	; 0xa66a <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    b516:	34 c0       	rjmp	.+104    	; 0xb580 <__vector_126+0x1c4>
    b518:	b6 d8       	rcall	.-3732   	; 0xa686 <udd_ctrl_send_zlp_in>
    b51a:	32 c0       	rjmp	.+100    	; 0xb580 <__vector_126+0x1c4>
    b51c:	80 91 db 2d 	lds	r24, 0x2DDB	; 0x802ddb <udd_g_ctrlreq+0xa>
    b520:	90 91 dc 2d 	lds	r25, 0x2DDC	; 0x802ddc <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    b524:	c8 17       	cp	r28, r24
    b526:	d9 07       	cpc	r29, r25
    b528:	f9 f4       	brne	.+62     	; 0xb568 <__vector_126+0x1ac>
    b52a:	e0 91 df 2d 	lds	r30, 0x2DDF	; 0x802ddf <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    b52e:	f0 91 e0 2d 	lds	r31, 0x2DE0	; 0x802de0 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    b532:	30 97       	sbiw	r30, 0x00	; 0
    b534:	11 f4       	brne	.+4      	; 0xb53a <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    b536:	99 d8       	rcall	.-3790   	; 0xa66a <udd_ctrl_stall_data>
    b538:	23 c0       	rjmp	.+70     	; 0xb580 <__vector_126+0x1c4>
    b53a:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    b53c:	81 11       	cpse	r24, r1
    b53e:	02 c0       	rjmp	.+4      	; 0xb544 <__vector_126+0x188>
    b540:	94 d8       	rcall	.-3800   	; 0xa66a <udd_ctrl_stall_data>
    b542:	1e c0       	rjmp	.+60     	; 0xb580 <__vector_126+0x1c4>
    b544:	20 91 6e 24 	lds	r18, 0x246E	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    b548:	30 91 6f 24 	lds	r19, 0x246F	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
    b54c:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_ctrl_payload_nb_trans>
    b550:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
    b554:	82 0f       	add	r24, r18
    b556:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    b558:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <udd_ctrl_prev_payload_nb_trans>
    b55c:	90 93 6f 24 	sts	0x246F, r25	; 0x80246f <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    b560:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udd_ctrl_payload_nb_trans>
    b564:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <udd_ctrl_payload_nb_trans+0x1>
	udd_control_out_ack_tc();
    b568:	e0 e8       	ldi	r30, 0x80	; 128
    b56a:	f4 e2       	ldi	r31, 0x24	; 36
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    b56c:	02 e0       	ldi	r16, 0x02	; 2
    b56e:	06 93       	lac	Z, r16
		udd_ctrl_in_sent();
    b570:	00 e2       	ldi	r16, 0x20	; 32
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    b572:	06 93       	lac	Z, r16
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    b574:	05 c0       	rjmp	.+10     	; 0xb580 <__vector_126+0x1c4>
    b576:	80 38       	cpi	r24, 0x80	; 128
	}
#endif

udd_interrupt_tc_end:
	return;
}
    b578:	11 f4       	brne	.+4      	; 0xb57e <__vector_126+0x1c2>
    b57a:	9b d8       	rcall	.-3786   	; 0xa6b2 <udd_ctrl_in_sent>
    b57c:	01 c0       	rjmp	.+2      	; 0xb580 <__vector_126+0x1c4>
    b57e:	bb d9       	rcall	.-3210   	; 0xa8f6 <udd_ep_trans_complet>
    b580:	ff 91       	pop	r31
    b582:	ef 91       	pop	r30
    b584:	df 91       	pop	r29
    b586:	cf 91       	pop	r28
    b588:	bf 91       	pop	r27
    b58a:	af 91       	pop	r26
    b58c:	9f 91       	pop	r25
    b58e:	8f 91       	pop	r24
    b590:	7f 91       	pop	r23
    b592:	6f 91       	pop	r22
    b594:	5f 91       	pop	r21
    b596:	4f 91       	pop	r20
    b598:	3f 91       	pop	r19
    b59a:	2f 91       	pop	r18
    b59c:	1f 91       	pop	r17
    b59e:	0f 91       	pop	r16
    b5a0:	0f 90       	pop	r0
    b5a2:	0b be       	out	0x3b, r0	; 59
    b5a4:	0f 90       	pop	r0
    b5a6:	0f be       	out	0x3f, r0	; 63
    b5a8:	0f 90       	pop	r0
    b5aa:	1f 90       	pop	r1
    b5ac:	18 95       	reti

0000b5ae <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    b5ae:	cf 92       	push	r12
    b5b0:	df 92       	push	r13
    b5b2:	ef 92       	push	r14
    b5b4:	ff 92       	push	r15
    b5b6:	cf 93       	push	r28
    b5b8:	df 93       	push	r29
    b5ba:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    b5bc:	6b 01       	movw	r12, r22
    b5be:	e1 2c       	mov	r14, r1
    b5c0:	f1 2c       	mov	r15, r1
    b5c2:	60 e8       	ldi	r22, 0x80	; 128
    b5c4:	73 ec       	ldi	r23, 0xC3	; 195
    b5c6:	89 ec       	ldi	r24, 0xC9	; 201
    b5c8:	91 e0       	ldi	r25, 0x01	; 1
    b5ca:	a7 01       	movw	r20, r14
    b5cc:	96 01       	movw	r18, r12
    b5ce:	0e 94 7a 7c 	call	0xf8f4	; 0xf8f4 <__udivmodsi4>
    b5d2:	ca 01       	movw	r24, r20
    b5d4:	b9 01       	movw	r22, r18
    b5d6:	2f ef       	ldi	r18, 0xFF	; 255
    b5d8:	3f ef       	ldi	r19, 0xFF	; 255
    b5da:	40 e0       	ldi	r20, 0x00	; 0
    b5dc:	50 e0       	ldi	r21, 0x00	; 0
    b5de:	0e 94 7a 7c 	call	0xf8f4	; 0xf8f4 <__udivmodsi4>
	if (smallest_div < 1) {
    b5e2:	21 15       	cp	r18, r1
    b5e4:	31 05       	cpc	r19, r1
    b5e6:	29 f4       	brne	.+10     	; 0xb5f2 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    b5e8:	81 e0       	ldi	r24, 0x01	; 1
    b5ea:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    b5ec:	21 e0       	ldi	r18, 0x01	; 1
    b5ee:	30 e0       	ldi	r19, 0x00	; 0
    b5f0:	2d c0       	rjmp	.+90     	; 0xb64c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    b5f2:	22 30       	cpi	r18, 0x02	; 2
    b5f4:	31 05       	cpc	r19, r1
    b5f6:	28 f4       	brcc	.+10     	; 0xb602 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    b5f8:	82 e0       	ldi	r24, 0x02	; 2
    b5fa:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    b5fc:	22 e0       	ldi	r18, 0x02	; 2
    b5fe:	30 e0       	ldi	r19, 0x00	; 0
    b600:	25 c0       	rjmp	.+74     	; 0xb64c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    b602:	24 30       	cpi	r18, 0x04	; 4
    b604:	31 05       	cpc	r19, r1
    b606:	28 f4       	brcc	.+10     	; 0xb612 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    b608:	83 e0       	ldi	r24, 0x03	; 3
    b60a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    b60c:	24 e0       	ldi	r18, 0x04	; 4
    b60e:	30 e0       	ldi	r19, 0x00	; 0
    b610:	1d c0       	rjmp	.+58     	; 0xb64c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    b612:	28 30       	cpi	r18, 0x08	; 8
    b614:	31 05       	cpc	r19, r1
    b616:	28 f4       	brcc	.+10     	; 0xb622 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    b618:	84 e0       	ldi	r24, 0x04	; 4
    b61a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    b61c:	28 e0       	ldi	r18, 0x08	; 8
    b61e:	30 e0       	ldi	r19, 0x00	; 0
    b620:	15 c0       	rjmp	.+42     	; 0xb64c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    b622:	20 34       	cpi	r18, 0x40	; 64
    b624:	31 05       	cpc	r19, r1
    b626:	28 f4       	brcc	.+10     	; 0xb632 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    b628:	85 e0       	ldi	r24, 0x05	; 5
    b62a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    b62c:	20 e4       	ldi	r18, 0x40	; 64
    b62e:	30 e0       	ldi	r19, 0x00	; 0
    b630:	0d c0       	rjmp	.+26     	; 0xb64c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    b632:	2f 3f       	cpi	r18, 0xFF	; 255
    b634:	31 05       	cpc	r19, r1
    b636:	09 f0       	breq	.+2      	; 0xb63a <pwm_set_frequency+0x8c>
    b638:	28 f4       	brcc	.+10     	; 0xb644 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    b63a:	86 e0       	ldi	r24, 0x06	; 6
    b63c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    b63e:	20 e0       	ldi	r18, 0x00	; 0
    b640:	31 e0       	ldi	r19, 0x01	; 1
    b642:	04 c0       	rjmp	.+8      	; 0xb64c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    b644:	87 e0       	ldi	r24, 0x07	; 7
    b646:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    b648:	20 e0       	ldi	r18, 0x00	; 0
    b64a:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    b64c:	40 e0       	ldi	r20, 0x00	; 0
    b64e:	50 e0       	ldi	r21, 0x00	; 0
    b650:	60 e8       	ldi	r22, 0x80	; 128
    b652:	73 ec       	ldi	r23, 0xC3	; 195
    b654:	89 ec       	ldi	r24, 0xC9	; 201
    b656:	91 e0       	ldi	r25, 0x01	; 1
    b658:	0e 94 7a 7c 	call	0xf8f4	; 0xf8f4 <__udivmodsi4>
    b65c:	ca 01       	movw	r24, r20
    b65e:	b9 01       	movw	r22, r18
    b660:	a7 01       	movw	r20, r14
    b662:	96 01       	movw	r18, r12
    b664:	0e 94 7a 7c 	call	0xf8f4	; 0xf8f4 <__udivmodsi4>
    b668:	2d 83       	std	Y+5, r18	; 0x05
    b66a:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    b66c:	24 36       	cpi	r18, 0x64	; 100
    b66e:	31 05       	cpc	r19, r1
    b670:	18 f4       	brcc	.+6      	; 0xb678 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    b672:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    b674:	1d 82       	std	Y+5, r1	; 0x05
    b676:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    b678:	df 91       	pop	r29
    b67a:	cf 91       	pop	r28
    b67c:	ff 90       	pop	r15
    b67e:	ef 90       	pop	r14
    b680:	df 90       	pop	r13
    b682:	cf 90       	pop	r12
    b684:	08 95       	ret

0000b686 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    b686:	0f 93       	push	r16
    b688:	1f 93       	push	r17
    b68a:	cf 93       	push	r28
    b68c:	df 93       	push	r29
    b68e:	ec 01       	movw	r28, r24
    b690:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    b692:	86 2f       	mov	r24, r22
    b694:	90 e0       	ldi	r25, 0x00	; 0
    b696:	87 30       	cpi	r24, 0x07	; 7
    b698:	91 05       	cpc	r25, r1
    b69a:	08 f0       	brcs	.+2      	; 0xb69e <pwm_init+0x18>
    b69c:	8b c0       	rjmp	.+278    	; 0xb7b4 <pwm_init+0x12e>
    b69e:	fc 01       	movw	r30, r24
    b6a0:	88 27       	eor	r24, r24
    b6a2:	eb 5f       	subi	r30, 0xFB	; 251
    b6a4:	fe 4f       	sbci	r31, 0xFE	; 254
    b6a6:	8f 4f       	sbci	r24, 0xFF	; 255
    b6a8:	0c 94 b8 7c 	jmp	0xf970	; 0xf970 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    b6ac:	80 e0       	ldi	r24, 0x00	; 0
    b6ae:	98 e0       	ldi	r25, 0x08	; 8
    b6b0:	88 83       	st	Y, r24
    b6b2:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    b6b4:	e0 e4       	ldi	r30, 0x40	; 64
    b6b6:	f6 e0       	ldi	r31, 0x06	; 6
    b6b8:	30 81       	ld	r19, Z
    b6ba:	81 e0       	ldi	r24, 0x01	; 1
    b6bc:	90 e0       	ldi	r25, 0x00	; 0
    b6be:	2f ef       	ldi	r18, 0xFF	; 255
    b6c0:	24 0f       	add	r18, r20
    b6c2:	02 c0       	rjmp	.+4      	; 0xb6c8 <pwm_init+0x42>
    b6c4:	88 0f       	add	r24, r24
    b6c6:	99 1f       	adc	r25, r25
    b6c8:	2a 95       	dec	r18
    b6ca:	e2 f7       	brpl	.-8      	; 0xb6c4 <pwm_init+0x3e>
    b6cc:	83 2b       	or	r24, r19
    b6ce:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    b6d0:	71 c0       	rjmp	.+226    	; 0xb7b4 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    b6d2:	80 e4       	ldi	r24, 0x40	; 64
    b6d4:	98 e0       	ldi	r25, 0x08	; 8
    b6d6:	88 83       	st	Y, r24
    b6d8:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    b6da:	e0 e4       	ldi	r30, 0x40	; 64
    b6dc:	f6 e0       	ldi	r31, 0x06	; 6
    b6de:	30 81       	ld	r19, Z
    b6e0:	81 e0       	ldi	r24, 0x01	; 1
    b6e2:	90 e0       	ldi	r25, 0x00	; 0
    b6e4:	23 e0       	ldi	r18, 0x03	; 3
    b6e6:	24 0f       	add	r18, r20
    b6e8:	02 c0       	rjmp	.+4      	; 0xb6ee <pwm_init+0x68>
    b6ea:	88 0f       	add	r24, r24
    b6ec:	99 1f       	adc	r25, r25
    b6ee:	2a 95       	dec	r18
    b6f0:	e2 f7       	brpl	.-8      	; 0xb6ea <pwm_init+0x64>
    b6f2:	83 2b       	or	r24, r19
    b6f4:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    b6f6:	5e c0       	rjmp	.+188    	; 0xb7b4 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    b6f8:	80 e0       	ldi	r24, 0x00	; 0
    b6fa:	99 e0       	ldi	r25, 0x09	; 9
    b6fc:	88 83       	st	Y, r24
    b6fe:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    b700:	e0 e6       	ldi	r30, 0x60	; 96
    b702:	f6 e0       	ldi	r31, 0x06	; 6
    b704:	30 81       	ld	r19, Z
    b706:	81 e0       	ldi	r24, 0x01	; 1
    b708:	90 e0       	ldi	r25, 0x00	; 0
    b70a:	2f ef       	ldi	r18, 0xFF	; 255
    b70c:	24 0f       	add	r18, r20
    b70e:	02 c0       	rjmp	.+4      	; 0xb714 <pwm_init+0x8e>
    b710:	88 0f       	add	r24, r24
    b712:	99 1f       	adc	r25, r25
    b714:	2a 95       	dec	r18
    b716:	e2 f7       	brpl	.-8      	; 0xb710 <pwm_init+0x8a>
    b718:	83 2b       	or	r24, r19
    b71a:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    b71c:	4b c0       	rjmp	.+150    	; 0xb7b4 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    b71e:	80 e4       	ldi	r24, 0x40	; 64
    b720:	99 e0       	ldi	r25, 0x09	; 9
    b722:	88 83       	st	Y, r24
    b724:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    b726:	e0 e6       	ldi	r30, 0x60	; 96
    b728:	f6 e0       	ldi	r31, 0x06	; 6
    b72a:	30 81       	ld	r19, Z
    b72c:	81 e0       	ldi	r24, 0x01	; 1
    b72e:	90 e0       	ldi	r25, 0x00	; 0
    b730:	23 e0       	ldi	r18, 0x03	; 3
    b732:	24 0f       	add	r18, r20
    b734:	02 c0       	rjmp	.+4      	; 0xb73a <pwm_init+0xb4>
    b736:	88 0f       	add	r24, r24
    b738:	99 1f       	adc	r25, r25
    b73a:	2a 95       	dec	r18
    b73c:	e2 f7       	brpl	.-8      	; 0xb736 <pwm_init+0xb0>
    b73e:	83 2b       	or	r24, r19
    b740:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    b742:	38 c0       	rjmp	.+112    	; 0xb7b4 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    b744:	80 e0       	ldi	r24, 0x00	; 0
    b746:	9a e0       	ldi	r25, 0x0A	; 10
    b748:	88 83       	st	Y, r24
    b74a:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    b74c:	e0 e8       	ldi	r30, 0x80	; 128
    b74e:	f6 e0       	ldi	r31, 0x06	; 6
    b750:	30 81       	ld	r19, Z
    b752:	81 e0       	ldi	r24, 0x01	; 1
    b754:	90 e0       	ldi	r25, 0x00	; 0
    b756:	2f ef       	ldi	r18, 0xFF	; 255
    b758:	24 0f       	add	r18, r20
    b75a:	02 c0       	rjmp	.+4      	; 0xb760 <pwm_init+0xda>
    b75c:	88 0f       	add	r24, r24
    b75e:	99 1f       	adc	r25, r25
    b760:	2a 95       	dec	r18
    b762:	e2 f7       	brpl	.-8      	; 0xb75c <pwm_init+0xd6>
    b764:	83 2b       	or	r24, r19
    b766:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    b768:	25 c0       	rjmp	.+74     	; 0xb7b4 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    b76a:	80 e4       	ldi	r24, 0x40	; 64
    b76c:	9a e0       	ldi	r25, 0x0A	; 10
    b76e:	88 83       	st	Y, r24
    b770:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    b772:	e0 e8       	ldi	r30, 0x80	; 128
    b774:	f6 e0       	ldi	r31, 0x06	; 6
    b776:	30 81       	ld	r19, Z
    b778:	81 e0       	ldi	r24, 0x01	; 1
    b77a:	90 e0       	ldi	r25, 0x00	; 0
    b77c:	23 e0       	ldi	r18, 0x03	; 3
    b77e:	24 0f       	add	r18, r20
    b780:	02 c0       	rjmp	.+4      	; 0xb786 <pwm_init+0x100>
    b782:	88 0f       	add	r24, r24
    b784:	99 1f       	adc	r25, r25
    b786:	2a 95       	dec	r18
    b788:	e2 f7       	brpl	.-8      	; 0xb782 <pwm_init+0xfc>
    b78a:	83 2b       	or	r24, r19
    b78c:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    b78e:	12 c0       	rjmp	.+36     	; 0xb7b4 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    b790:	80 e0       	ldi	r24, 0x00	; 0
    b792:	9b e0       	ldi	r25, 0x0B	; 11
    b794:	88 83       	st	Y, r24
    b796:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    b798:	e0 ea       	ldi	r30, 0xA0	; 160
    b79a:	f6 e0       	ldi	r31, 0x06	; 6
    b79c:	30 81       	ld	r19, Z
    b79e:	81 e0       	ldi	r24, 0x01	; 1
    b7a0:	90 e0       	ldi	r25, 0x00	; 0
    b7a2:	2f ef       	ldi	r18, 0xFF	; 255
    b7a4:	24 0f       	add	r18, r20
    b7a6:	02 c0       	rjmp	.+4      	; 0xb7ac <pwm_init+0x126>
    b7a8:	88 0f       	add	r24, r24
    b7aa:	99 1f       	adc	r25, r25
    b7ac:	2a 95       	dec	r18
    b7ae:	e2 f7       	brpl	.-8      	; 0xb7a8 <pwm_init+0x122>
    b7b0:	83 2b       	or	r24, r19
    b7b2:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    b7b4:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    b7b6:	42 30       	cpi	r20, 0x02	; 2
    b7b8:	61 f0       	breq	.+24     	; 0xb7d2 <pwm_init+0x14c>
    b7ba:	18 f4       	brcc	.+6      	; 0xb7c2 <pwm_init+0x13c>
    b7bc:	41 30       	cpi	r20, 0x01	; 1
    b7be:	31 f0       	breq	.+12     	; 0xb7cc <pwm_init+0x146>
    b7c0:	10 c0       	rjmp	.+32     	; 0xb7e2 <pwm_init+0x15c>
    b7c2:	43 30       	cpi	r20, 0x03	; 3
    b7c4:	49 f0       	breq	.+18     	; 0xb7d8 <pwm_init+0x152>
    b7c6:	44 30       	cpi	r20, 0x04	; 4
    b7c8:	51 f0       	breq	.+20     	; 0xb7de <pwm_init+0x158>
    b7ca:	0b c0       	rjmp	.+22     	; 0xb7e2 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    b7cc:	80 e1       	ldi	r24, 0x10	; 16
    b7ce:	8b 83       	std	Y+3, r24	; 0x03
		break;
    b7d0:	08 c0       	rjmp	.+16     	; 0xb7e2 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    b7d2:	80 e2       	ldi	r24, 0x20	; 32
    b7d4:	8b 83       	std	Y+3, r24	; 0x03
		break;
    b7d6:	05 c0       	rjmp	.+10     	; 0xb7e2 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    b7d8:	80 e4       	ldi	r24, 0x40	; 64
    b7da:	8b 83       	std	Y+3, r24	; 0x03
		break;
    b7dc:	02 c0       	rjmp	.+4      	; 0xb7e2 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    b7de:	80 e8       	ldi	r24, 0x80	; 128
    b7e0:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    b7e2:	88 81       	ld	r24, Y
    b7e4:	99 81       	ldd	r25, Y+1	; 0x01
    b7e6:	0e 94 bd 50 	call	0xa17a	; 0xa17a <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    b7ea:	e8 81       	ld	r30, Y
    b7ec:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    b7ee:	81 81       	ldd	r24, Z+1	; 0x01
    b7f0:	88 7f       	andi	r24, 0xF8	; 248
    b7f2:	83 60       	ori	r24, 0x03	; 3
    b7f4:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    b7f6:	1d 82       	std	Y+5, r1	; 0x05
    b7f8:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    b7fa:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    b7fc:	e8 81       	ld	r30, Y
    b7fe:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    b800:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    b802:	80 7f       	andi	r24, 0xF0	; 240
    b804:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    b806:	b8 01       	movw	r22, r16
    b808:	ce 01       	movw	r24, r28
    b80a:	d1 de       	rcall	.-606    	; 0xb5ae <pwm_set_frequency>
}
    b80c:	df 91       	pop	r29
    b80e:	cf 91       	pop	r28
    b810:	1f 91       	pop	r17
    b812:	0f 91       	pop	r16
    b814:	08 95       	ret

0000b816 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    b816:	cf 93       	push	r28
    b818:	df 93       	push	r29
    b81a:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    b81c:	2d 81       	ldd	r18, Y+5	; 0x05
    b81e:	3e 81       	ldd	r19, Y+6	; 0x06
    b820:	a6 2f       	mov	r26, r22
    b822:	b0 e0       	ldi	r27, 0x00	; 0
    b824:	0e 94 c6 7c 	call	0xf98c	; 0xf98c <__umulhisi3>
    b828:	24 e6       	ldi	r18, 0x64	; 100
    b82a:	30 e0       	ldi	r19, 0x00	; 0
    b82c:	40 e0       	ldi	r20, 0x00	; 0
    b82e:	50 e0       	ldi	r21, 0x00	; 0
    b830:	0e 94 7a 7c 	call	0xf8f4	; 0xf8f4 <__udivmodsi4>
    b834:	8a 81       	ldd	r24, Y+2	; 0x02
    b836:	e8 81       	ld	r30, Y
    b838:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    b83a:	e6 fd       	sbrc	r30, 6
    b83c:	17 c0       	rjmp	.+46     	; 0xb86c <pwm_start+0x56>
		switch (channel_index) {
    b83e:	82 30       	cpi	r24, 0x02	; 2
    b840:	61 f0       	breq	.+24     	; 0xb85a <pwm_start+0x44>
    b842:	18 f4       	brcc	.+6      	; 0xb84a <pwm_start+0x34>
    b844:	81 30       	cpi	r24, 0x01	; 1
    b846:	31 f0       	breq	.+12     	; 0xb854 <pwm_start+0x3e>
    b848:	1b c0       	rjmp	.+54     	; 0xb880 <pwm_start+0x6a>
    b84a:	83 30       	cpi	r24, 0x03	; 3
    b84c:	49 f0       	breq	.+18     	; 0xb860 <pwm_start+0x4a>
    b84e:	84 30       	cpi	r24, 0x04	; 4
    b850:	51 f0       	breq	.+20     	; 0xb866 <pwm_start+0x50>
    b852:	16 c0       	rjmp	.+44     	; 0xb880 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    b854:	20 af       	std	Z+56, r18	; 0x38
    b856:	31 af       	std	Z+57, r19	; 0x39
    b858:	13 c0       	rjmp	.+38     	; 0xb880 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    b85a:	22 af       	std	Z+58, r18	; 0x3a
    b85c:	33 af       	std	Z+59, r19	; 0x3b
    b85e:	10 c0       	rjmp	.+32     	; 0xb880 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    b860:	24 af       	std	Z+60, r18	; 0x3c
    b862:	35 af       	std	Z+61, r19	; 0x3d
    b864:	0d c0       	rjmp	.+26     	; 0xb880 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    b866:	26 af       	std	Z+62, r18	; 0x3e
    b868:	37 af       	std	Z+63, r19	; 0x3f
    b86a:	0a c0       	rjmp	.+20     	; 0xb880 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    b86c:	81 30       	cpi	r24, 0x01	; 1
    b86e:	19 f0       	breq	.+6      	; 0xb876 <pwm_start+0x60>
    b870:	82 30       	cpi	r24, 0x02	; 2
    b872:	21 f0       	breq	.+8      	; 0xb87c <pwm_start+0x66>
    b874:	05 c0       	rjmp	.+10     	; 0xb880 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    b876:	20 af       	std	Z+56, r18	; 0x38
    b878:	31 af       	std	Z+57, r19	; 0x39
    b87a:	02 c0       	rjmp	.+4      	; 0xb880 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    b87c:	22 af       	std	Z+58, r18	; 0x3a
    b87e:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    b880:	8d 81       	ldd	r24, Y+5	; 0x05
    b882:	9e 81       	ldd	r25, Y+6	; 0x06
    b884:	e8 81       	ld	r30, Y
    b886:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    b888:	86 a3       	std	Z+38, r24	; 0x26
    b88a:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    b88c:	8b 81       	ldd	r24, Y+3	; 0x03
    b88e:	e8 81       	ld	r30, Y
    b890:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    b892:	e6 fd       	sbrc	r30, 6
    b894:	04 c0       	rjmp	.+8      	; 0xb89e <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    b896:	91 81       	ldd	r25, Z+1	; 0x01
    b898:	89 2b       	or	r24, r25
    b89a:	81 83       	std	Z+1, r24	; 0x01
    b89c:	04 c0       	rjmp	.+8      	; 0xb8a6 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    b89e:	91 81       	ldd	r25, Z+1	; 0x01
    b8a0:	80 73       	andi	r24, 0x30	; 48
    b8a2:	89 2b       	or	r24, r25
    b8a4:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    b8a6:	e8 81       	ld	r30, Y
    b8a8:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    b8aa:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    b8ac:	80 7f       	andi	r24, 0xF0	; 240
    b8ae:	9c 81       	ldd	r25, Y+4	; 0x04
    b8b0:	89 2b       	or	r24, r25
    b8b2:	80 83       	st	Z, r24
}
    b8b4:	df 91       	pop	r29
    b8b6:	cf 91       	pop	r28
    b8b8:	08 95       	ret

0000b8ba <yield_ms_cb>:
void halt(void)
{
	/* MAIN Loop Shutdown */
	/* atomic */
	{
		g_workmode = WORKMODE_END;
    b8ba:	10 92 80 26 	sts	0x2680, r1	; 0x802680 <g_sched_yield>
    b8be:	08 95       	ret

0000b8c0 <isr_tcc1_ovfl>:
    b8c0:	20 91 80 28 	lds	r18, 0x2880	; 0x802880 <g_milliseconds_cnt64>
    b8c4:	30 91 81 28 	lds	r19, 0x2881	; 0x802881 <g_milliseconds_cnt64+0x1>
    b8c8:	40 91 82 28 	lds	r20, 0x2882	; 0x802882 <g_milliseconds_cnt64+0x2>
    b8cc:	50 91 83 28 	lds	r21, 0x2883	; 0x802883 <g_milliseconds_cnt64+0x3>
    b8d0:	60 91 84 28 	lds	r22, 0x2884	; 0x802884 <g_milliseconds_cnt64+0x4>
    b8d4:	70 91 85 28 	lds	r23, 0x2885	; 0x802885 <g_milliseconds_cnt64+0x5>
    b8d8:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <g_milliseconds_cnt64+0x6>
    b8dc:	90 91 87 28 	lds	r25, 0x2887	; 0x802887 <g_milliseconds_cnt64+0x7>
    b8e0:	a1 e0       	ldi	r26, 0x01	; 1
    b8e2:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <__adddi3_s8>
    b8e6:	20 93 80 28 	sts	0x2880, r18	; 0x802880 <g_milliseconds_cnt64>
    b8ea:	30 93 81 28 	sts	0x2881, r19	; 0x802881 <g_milliseconds_cnt64+0x1>
    b8ee:	40 93 82 28 	sts	0x2882, r20	; 0x802882 <g_milliseconds_cnt64+0x2>
    b8f2:	50 93 83 28 	sts	0x2883, r21	; 0x802883 <g_milliseconds_cnt64+0x3>
    b8f6:	60 93 84 28 	sts	0x2884, r22	; 0x802884 <g_milliseconds_cnt64+0x4>
    b8fa:	70 93 85 28 	sts	0x2885, r23	; 0x802885 <g_milliseconds_cnt64+0x5>
    b8fe:	80 93 86 28 	sts	0x2886, r24	; 0x802886 <g_milliseconds_cnt64+0x6>
    b902:	90 93 87 28 	sts	0x2887, r25	; 0x802887 <g_milliseconds_cnt64+0x7>
    b906:	08 95       	ret

0000b908 <isr_adc_a>:
    b908:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    b90c:	4e 5b       	subi	r20, 0xBE	; 190
    b90e:	51 09       	sbc	r21, r1
    b910:	60 ff       	sbrs	r22, 0
    b912:	d3 c0       	rjmp	.+422    	; 0xbaba <isr_adc_a+0x1b2>
    b914:	82 95       	swap	r24
    b916:	8f 70       	andi	r24, 0x0F	; 15
    b918:	81 30       	cpi	r24, 0x01	; 1
    b91a:	31 f0       	breq	.+12     	; 0xb928 <isr_adc_a+0x20>
    b91c:	08 f4       	brcc	.+2      	; 0xb920 <isr_adc_a+0x18>
    b91e:	8a c0       	rjmp	.+276    	; 0xba34 <isr_adc_a+0x12c>
    b920:	82 30       	cpi	r24, 0x02	; 2
    b922:	09 f4       	brne	.+2      	; 0xb926 <isr_adc_a+0x1e>
    b924:	44 c0       	rjmp	.+136    	; 0xb9ae <isr_adc_a+0xa6>
    b926:	08 95       	ret
    b928:	80 91 d0 26 	lds	r24, 0x26D0	; 0x8026d0 <g_adc_vctcxo_sum>
    b92c:	90 91 d1 26 	lds	r25, 0x26D1	; 0x8026d1 <g_adc_vctcxo_sum+0x1>
    b930:	a0 91 d2 26 	lds	r26, 0x26D2	; 0x8026d2 <g_adc_vctcxo_sum+0x2>
    b934:	b0 91 d3 26 	lds	r27, 0x26D3	; 0x8026d3 <g_adc_vctcxo_sum+0x3>
    b938:	05 2e       	mov	r0, r21
    b93a:	00 0c       	add	r0, r0
    b93c:	66 0b       	sbc	r22, r22
    b93e:	77 0b       	sbc	r23, r23
    b940:	48 0f       	add	r20, r24
    b942:	59 1f       	adc	r21, r25
    b944:	6a 1f       	adc	r22, r26
    b946:	7b 1f       	adc	r23, r27
    b948:	40 93 d0 26 	sts	0x26D0, r20	; 0x8026d0 <g_adc_vctcxo_sum>
    b94c:	50 93 d1 26 	sts	0x26D1, r21	; 0x8026d1 <g_adc_vctcxo_sum+0x1>
    b950:	60 93 d2 26 	sts	0x26D2, r22	; 0x8026d2 <g_adc_vctcxo_sum+0x2>
    b954:	70 93 d3 26 	sts	0x26D3, r23	; 0x8026d3 <g_adc_vctcxo_sum+0x3>
    b958:	80 91 ce 26 	lds	r24, 0x26CE	; 0x8026ce <g_adc_vctcxo_cnt>
    b95c:	90 91 cf 26 	lds	r25, 0x26CF	; 0x8026cf <g_adc_vctcxo_cnt+0x1>
    b960:	01 96       	adiw	r24, 0x01	; 1
    b962:	80 93 ce 26 	sts	0x26CE, r24	; 0x8026ce <g_adc_vctcxo_cnt>
    b966:	90 93 cf 26 	sts	0x26CF, r25	; 0x8026cf <g_adc_vctcxo_cnt+0x1>
    b96a:	8f 3f       	cpi	r24, 0xFF	; 255
    b96c:	91 05       	cpc	r25, r1
    b96e:	09 f0       	breq	.+2      	; 0xb972 <isr_adc_a+0x6a>
    b970:	08 f4       	brcc	.+2      	; 0xb974 <isr_adc_a+0x6c>
    b972:	70 c1       	rjmp	.+736    	; 0xbc54 <isr_adc_a+0x34c>
    b974:	80 91 d0 26 	lds	r24, 0x26D0	; 0x8026d0 <g_adc_vctcxo_sum>
    b978:	90 91 d1 26 	lds	r25, 0x26D1	; 0x8026d1 <g_adc_vctcxo_sum+0x1>
    b97c:	a0 91 d2 26 	lds	r26, 0x26D2	; 0x8026d2 <g_adc_vctcxo_sum+0x2>
    b980:	b0 91 d3 26 	lds	r27, 0x26D3	; 0x8026d3 <g_adc_vctcxo_sum+0x3>
    b984:	80 93 d4 26 	sts	0x26D4, r24	; 0x8026d4 <g_adc_vctcxo_cur>
    b988:	90 93 d5 26 	sts	0x26D5, r25	; 0x8026d5 <g_adc_vctcxo_cur+0x1>
    b98c:	a0 93 d6 26 	sts	0x26D6, r26	; 0x8026d6 <g_adc_vctcxo_cur+0x2>
    b990:	b0 93 d7 26 	sts	0x26D7, r27	; 0x8026d7 <g_adc_vctcxo_cur+0x3>
    b994:	10 92 ce 26 	sts	0x26CE, r1	; 0x8026ce <g_adc_vctcxo_cnt>
    b998:	10 92 cf 26 	sts	0x26CF, r1	; 0x8026cf <g_adc_vctcxo_cnt+0x1>
    b99c:	10 92 d0 26 	sts	0x26D0, r1	; 0x8026d0 <g_adc_vctcxo_sum>
    b9a0:	10 92 d1 26 	sts	0x26D1, r1	; 0x8026d1 <g_adc_vctcxo_sum+0x1>
    b9a4:	10 92 d2 26 	sts	0x26D2, r1	; 0x8026d2 <g_adc_vctcxo_sum+0x2>
    b9a8:	10 92 d3 26 	sts	0x26D3, r1	; 0x8026d3 <g_adc_vctcxo_sum+0x3>
    b9ac:	08 95       	ret
    b9ae:	80 91 c6 26 	lds	r24, 0x26C6	; 0x8026c6 <g_adc_5v0_sum>
    b9b2:	90 91 c7 26 	lds	r25, 0x26C7	; 0x8026c7 <g_adc_5v0_sum+0x1>
    b9b6:	a0 91 c8 26 	lds	r26, 0x26C8	; 0x8026c8 <g_adc_5v0_sum+0x2>
    b9ba:	b0 91 c9 26 	lds	r27, 0x26C9	; 0x8026c9 <g_adc_5v0_sum+0x3>
    b9be:	05 2e       	mov	r0, r21
    b9c0:	00 0c       	add	r0, r0
    b9c2:	66 0b       	sbc	r22, r22
    b9c4:	77 0b       	sbc	r23, r23
    b9c6:	48 0f       	add	r20, r24
    b9c8:	59 1f       	adc	r21, r25
    b9ca:	6a 1f       	adc	r22, r26
    b9cc:	7b 1f       	adc	r23, r27
    b9ce:	40 93 c6 26 	sts	0x26C6, r20	; 0x8026c6 <g_adc_5v0_sum>
    b9d2:	50 93 c7 26 	sts	0x26C7, r21	; 0x8026c7 <g_adc_5v0_sum+0x1>
    b9d6:	60 93 c8 26 	sts	0x26C8, r22	; 0x8026c8 <g_adc_5v0_sum+0x2>
    b9da:	70 93 c9 26 	sts	0x26C9, r23	; 0x8026c9 <g_adc_5v0_sum+0x3>
    b9de:	80 91 c4 26 	lds	r24, 0x26C4	; 0x8026c4 <g_adc_5v0_cnt>
    b9e2:	90 91 c5 26 	lds	r25, 0x26C5	; 0x8026c5 <g_adc_5v0_cnt+0x1>
    b9e6:	01 96       	adiw	r24, 0x01	; 1
    b9e8:	80 93 c4 26 	sts	0x26C4, r24	; 0x8026c4 <g_adc_5v0_cnt>
    b9ec:	90 93 c5 26 	sts	0x26C5, r25	; 0x8026c5 <g_adc_5v0_cnt+0x1>
    b9f0:	8f 3f       	cpi	r24, 0xFF	; 255
    b9f2:	91 05       	cpc	r25, r1
    b9f4:	09 f0       	breq	.+2      	; 0xb9f8 <isr_adc_a+0xf0>
    b9f6:	08 f4       	brcc	.+2      	; 0xb9fa <isr_adc_a+0xf2>
    b9f8:	2d c1       	rjmp	.+602    	; 0xbc54 <isr_adc_a+0x34c>
    b9fa:	80 91 c6 26 	lds	r24, 0x26C6	; 0x8026c6 <g_adc_5v0_sum>
    b9fe:	90 91 c7 26 	lds	r25, 0x26C7	; 0x8026c7 <g_adc_5v0_sum+0x1>
    ba02:	a0 91 c8 26 	lds	r26, 0x26C8	; 0x8026c8 <g_adc_5v0_sum+0x2>
    ba06:	b0 91 c9 26 	lds	r27, 0x26C9	; 0x8026c9 <g_adc_5v0_sum+0x3>
    ba0a:	80 93 ca 26 	sts	0x26CA, r24	; 0x8026ca <g_adc_5v0_cur>
    ba0e:	90 93 cb 26 	sts	0x26CB, r25	; 0x8026cb <g_adc_5v0_cur+0x1>
    ba12:	a0 93 cc 26 	sts	0x26CC, r26	; 0x8026cc <g_adc_5v0_cur+0x2>
    ba16:	b0 93 cd 26 	sts	0x26CD, r27	; 0x8026cd <g_adc_5v0_cur+0x3>
    ba1a:	10 92 c4 26 	sts	0x26C4, r1	; 0x8026c4 <g_adc_5v0_cnt>
    ba1e:	10 92 c5 26 	sts	0x26C5, r1	; 0x8026c5 <g_adc_5v0_cnt+0x1>
    ba22:	10 92 c6 26 	sts	0x26C6, r1	; 0x8026c6 <g_adc_5v0_sum>
    ba26:	10 92 c7 26 	sts	0x26C7, r1	; 0x8026c7 <g_adc_5v0_sum+0x1>
    ba2a:	10 92 c8 26 	sts	0x26C8, r1	; 0x8026c8 <g_adc_5v0_sum+0x2>
    ba2e:	10 92 c9 26 	sts	0x26C9, r1	; 0x8026c9 <g_adc_5v0_sum+0x3>
    ba32:	08 95       	ret
    ba34:	80 91 bc 26 	lds	r24, 0x26BC	; 0x8026bc <g_adc_vbat_sum>
    ba38:	90 91 bd 26 	lds	r25, 0x26BD	; 0x8026bd <g_adc_vbat_sum+0x1>
    ba3c:	a0 91 be 26 	lds	r26, 0x26BE	; 0x8026be <g_adc_vbat_sum+0x2>
    ba40:	b0 91 bf 26 	lds	r27, 0x26BF	; 0x8026bf <g_adc_vbat_sum+0x3>
    ba44:	05 2e       	mov	r0, r21
    ba46:	00 0c       	add	r0, r0
    ba48:	66 0b       	sbc	r22, r22
    ba4a:	77 0b       	sbc	r23, r23
    ba4c:	48 0f       	add	r20, r24
    ba4e:	59 1f       	adc	r21, r25
    ba50:	6a 1f       	adc	r22, r26
    ba52:	7b 1f       	adc	r23, r27
    ba54:	40 93 bc 26 	sts	0x26BC, r20	; 0x8026bc <g_adc_vbat_sum>
    ba58:	50 93 bd 26 	sts	0x26BD, r21	; 0x8026bd <g_adc_vbat_sum+0x1>
    ba5c:	60 93 be 26 	sts	0x26BE, r22	; 0x8026be <g_adc_vbat_sum+0x2>
    ba60:	70 93 bf 26 	sts	0x26BF, r23	; 0x8026bf <g_adc_vbat_sum+0x3>
    ba64:	80 91 ba 26 	lds	r24, 0x26BA	; 0x8026ba <g_adc_vbat_cnt>
    ba68:	90 91 bb 26 	lds	r25, 0x26BB	; 0x8026bb <g_adc_vbat_cnt+0x1>
    ba6c:	01 96       	adiw	r24, 0x01	; 1
    ba6e:	80 93 ba 26 	sts	0x26BA, r24	; 0x8026ba <g_adc_vbat_cnt>
    ba72:	90 93 bb 26 	sts	0x26BB, r25	; 0x8026bb <g_adc_vbat_cnt+0x1>
    ba76:	8f 3f       	cpi	r24, 0xFF	; 255
    ba78:	91 05       	cpc	r25, r1
    ba7a:	09 f0       	breq	.+2      	; 0xba7e <isr_adc_a+0x176>
    ba7c:	08 f4       	brcc	.+2      	; 0xba80 <isr_adc_a+0x178>
    ba7e:	ea c0       	rjmp	.+468    	; 0xbc54 <isr_adc_a+0x34c>
    ba80:	80 91 bc 26 	lds	r24, 0x26BC	; 0x8026bc <g_adc_vbat_sum>
    ba84:	90 91 bd 26 	lds	r25, 0x26BD	; 0x8026bd <g_adc_vbat_sum+0x1>
    ba88:	a0 91 be 26 	lds	r26, 0x26BE	; 0x8026be <g_adc_vbat_sum+0x2>
    ba8c:	b0 91 bf 26 	lds	r27, 0x26BF	; 0x8026bf <g_adc_vbat_sum+0x3>
    ba90:	80 93 c0 26 	sts	0x26C0, r24	; 0x8026c0 <g_adc_vbat_cur>
    ba94:	90 93 c1 26 	sts	0x26C1, r25	; 0x8026c1 <g_adc_vbat_cur+0x1>
    ba98:	a0 93 c2 26 	sts	0x26C2, r26	; 0x8026c2 <g_adc_vbat_cur+0x2>
    ba9c:	b0 93 c3 26 	sts	0x26C3, r27	; 0x8026c3 <g_adc_vbat_cur+0x3>
    baa0:	10 92 ba 26 	sts	0x26BA, r1	; 0x8026ba <g_adc_vbat_cnt>
    baa4:	10 92 bb 26 	sts	0x26BB, r1	; 0x8026bb <g_adc_vbat_cnt+0x1>
    baa8:	10 92 bc 26 	sts	0x26BC, r1	; 0x8026bc <g_adc_vbat_sum>
    baac:	10 92 bd 26 	sts	0x26BD, r1	; 0x8026bd <g_adc_vbat_sum+0x1>
    bab0:	10 92 be 26 	sts	0x26BE, r1	; 0x8026be <g_adc_vbat_sum+0x2>
    bab4:	10 92 bf 26 	sts	0x26BF, r1	; 0x8026bf <g_adc_vbat_sum+0x3>
    bab8:	08 95       	ret
    baba:	61 ff       	sbrs	r22, 1
    babc:	43 c0       	rjmp	.+134    	; 0xbb44 <isr_adc_a+0x23c>
    babe:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <g_adc_io_adc4_sum>
    bac2:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <g_adc_io_adc4_sum+0x1>
    bac6:	a0 91 b4 26 	lds	r26, 0x26B4	; 0x8026b4 <g_adc_io_adc4_sum+0x2>
    baca:	b0 91 b5 26 	lds	r27, 0x26B5	; 0x8026b5 <g_adc_io_adc4_sum+0x3>
    bace:	05 2e       	mov	r0, r21
    bad0:	00 0c       	add	r0, r0
    bad2:	66 0b       	sbc	r22, r22
    bad4:	77 0b       	sbc	r23, r23
    bad6:	48 0f       	add	r20, r24
    bad8:	59 1f       	adc	r21, r25
    bada:	6a 1f       	adc	r22, r26
    badc:	7b 1f       	adc	r23, r27
    bade:	40 93 b2 26 	sts	0x26B2, r20	; 0x8026b2 <g_adc_io_adc4_sum>
    bae2:	50 93 b3 26 	sts	0x26B3, r21	; 0x8026b3 <g_adc_io_adc4_sum+0x1>
    bae6:	60 93 b4 26 	sts	0x26B4, r22	; 0x8026b4 <g_adc_io_adc4_sum+0x2>
    baea:	70 93 b5 26 	sts	0x26B5, r23	; 0x8026b5 <g_adc_io_adc4_sum+0x3>
    baee:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <g_adc_io_adc4_cnt>
    baf2:	90 91 b1 26 	lds	r25, 0x26B1	; 0x8026b1 <g_adc_io_adc4_cnt+0x1>
    baf6:	01 96       	adiw	r24, 0x01	; 1
    baf8:	80 93 b0 26 	sts	0x26B0, r24	; 0x8026b0 <g_adc_io_adc4_cnt>
    bafc:	90 93 b1 26 	sts	0x26B1, r25	; 0x8026b1 <g_adc_io_adc4_cnt+0x1>
    bb00:	8f 3f       	cpi	r24, 0xFF	; 255
    bb02:	91 05       	cpc	r25, r1
    bb04:	09 f0       	breq	.+2      	; 0xbb08 <isr_adc_a+0x200>
    bb06:	08 f4       	brcc	.+2      	; 0xbb0a <isr_adc_a+0x202>
    bb08:	a5 c0       	rjmp	.+330    	; 0xbc54 <isr_adc_a+0x34c>
    bb0a:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <g_adc_io_adc4_sum>
    bb0e:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <g_adc_io_adc4_sum+0x1>
    bb12:	a0 91 b4 26 	lds	r26, 0x26B4	; 0x8026b4 <g_adc_io_adc4_sum+0x2>
    bb16:	b0 91 b5 26 	lds	r27, 0x26B5	; 0x8026b5 <g_adc_io_adc4_sum+0x3>
    bb1a:	80 93 b6 26 	sts	0x26B6, r24	; 0x8026b6 <g_adc_io_adc4_cur>
    bb1e:	90 93 b7 26 	sts	0x26B7, r25	; 0x8026b7 <g_adc_io_adc4_cur+0x1>
    bb22:	a0 93 b8 26 	sts	0x26B8, r26	; 0x8026b8 <g_adc_io_adc4_cur+0x2>
    bb26:	b0 93 b9 26 	sts	0x26B9, r27	; 0x8026b9 <g_adc_io_adc4_cur+0x3>
    bb2a:	10 92 b0 26 	sts	0x26B0, r1	; 0x8026b0 <g_adc_io_adc4_cnt>
    bb2e:	10 92 b1 26 	sts	0x26B1, r1	; 0x8026b1 <g_adc_io_adc4_cnt+0x1>
    bb32:	10 92 b2 26 	sts	0x26B2, r1	; 0x8026b2 <g_adc_io_adc4_sum>
    bb36:	10 92 b3 26 	sts	0x26B3, r1	; 0x8026b3 <g_adc_io_adc4_sum+0x1>
    bb3a:	10 92 b4 26 	sts	0x26B4, r1	; 0x8026b4 <g_adc_io_adc4_sum+0x2>
    bb3e:	10 92 b5 26 	sts	0x26B5, r1	; 0x8026b5 <g_adc_io_adc4_sum+0x3>
    bb42:	08 95       	ret
    bb44:	62 ff       	sbrs	r22, 2
    bb46:	43 c0       	rjmp	.+134    	; 0xbbce <isr_adc_a+0x2c6>
    bb48:	80 91 a8 26 	lds	r24, 0x26A8	; 0x8026a8 <g_adc_io_adc5_sum>
    bb4c:	90 91 a9 26 	lds	r25, 0x26A9	; 0x8026a9 <g_adc_io_adc5_sum+0x1>
    bb50:	a0 91 aa 26 	lds	r26, 0x26AA	; 0x8026aa <g_adc_io_adc5_sum+0x2>
    bb54:	b0 91 ab 26 	lds	r27, 0x26AB	; 0x8026ab <g_adc_io_adc5_sum+0x3>
    bb58:	05 2e       	mov	r0, r21
    bb5a:	00 0c       	add	r0, r0
    bb5c:	66 0b       	sbc	r22, r22
    bb5e:	77 0b       	sbc	r23, r23
    bb60:	48 0f       	add	r20, r24
    bb62:	59 1f       	adc	r21, r25
    bb64:	6a 1f       	adc	r22, r26
    bb66:	7b 1f       	adc	r23, r27
    bb68:	40 93 a8 26 	sts	0x26A8, r20	; 0x8026a8 <g_adc_io_adc5_sum>
    bb6c:	50 93 a9 26 	sts	0x26A9, r21	; 0x8026a9 <g_adc_io_adc5_sum+0x1>
    bb70:	60 93 aa 26 	sts	0x26AA, r22	; 0x8026aa <g_adc_io_adc5_sum+0x2>
    bb74:	70 93 ab 26 	sts	0x26AB, r23	; 0x8026ab <g_adc_io_adc5_sum+0x3>
    bb78:	80 91 a6 26 	lds	r24, 0x26A6	; 0x8026a6 <g_adc_io_adc5_cnt>
    bb7c:	90 91 a7 26 	lds	r25, 0x26A7	; 0x8026a7 <g_adc_io_adc5_cnt+0x1>
    bb80:	01 96       	adiw	r24, 0x01	; 1
    bb82:	80 93 a6 26 	sts	0x26A6, r24	; 0x8026a6 <g_adc_io_adc5_cnt>
    bb86:	90 93 a7 26 	sts	0x26A7, r25	; 0x8026a7 <g_adc_io_adc5_cnt+0x1>
    bb8a:	8f 3f       	cpi	r24, 0xFF	; 255
    bb8c:	91 05       	cpc	r25, r1
    bb8e:	09 f0       	breq	.+2      	; 0xbb92 <isr_adc_a+0x28a>
    bb90:	08 f4       	brcc	.+2      	; 0xbb94 <isr_adc_a+0x28c>
    bb92:	60 c0       	rjmp	.+192    	; 0xbc54 <isr_adc_a+0x34c>
    bb94:	80 91 a8 26 	lds	r24, 0x26A8	; 0x8026a8 <g_adc_io_adc5_sum>
    bb98:	90 91 a9 26 	lds	r25, 0x26A9	; 0x8026a9 <g_adc_io_adc5_sum+0x1>
    bb9c:	a0 91 aa 26 	lds	r26, 0x26AA	; 0x8026aa <g_adc_io_adc5_sum+0x2>
    bba0:	b0 91 ab 26 	lds	r27, 0x26AB	; 0x8026ab <g_adc_io_adc5_sum+0x3>
    bba4:	80 93 ac 26 	sts	0x26AC, r24	; 0x8026ac <g_adc_io_adc5_cur>
    bba8:	90 93 ad 26 	sts	0x26AD, r25	; 0x8026ad <g_adc_io_adc5_cur+0x1>
    bbac:	a0 93 ae 26 	sts	0x26AE, r26	; 0x8026ae <g_adc_io_adc5_cur+0x2>
    bbb0:	b0 93 af 26 	sts	0x26AF, r27	; 0x8026af <g_adc_io_adc5_cur+0x3>
    bbb4:	10 92 a6 26 	sts	0x26A6, r1	; 0x8026a6 <g_adc_io_adc5_cnt>
    bbb8:	10 92 a7 26 	sts	0x26A7, r1	; 0x8026a7 <g_adc_io_adc5_cnt+0x1>
    bbbc:	10 92 a8 26 	sts	0x26A8, r1	; 0x8026a8 <g_adc_io_adc5_sum>
    bbc0:	10 92 a9 26 	sts	0x26A9, r1	; 0x8026a9 <g_adc_io_adc5_sum+0x1>
    bbc4:	10 92 aa 26 	sts	0x26AA, r1	; 0x8026aa <g_adc_io_adc5_sum+0x2>
    bbc8:	10 92 ab 26 	sts	0x26AB, r1	; 0x8026ab <g_adc_io_adc5_sum+0x3>
    bbcc:	08 95       	ret
    bbce:	63 ff       	sbrs	r22, 3
    bbd0:	41 c0       	rjmp	.+130    	; 0xbc54 <isr_adc_a+0x34c>
    bbd2:	80 91 9e 26 	lds	r24, 0x269E	; 0x80269e <g_adc_silence_sum>
    bbd6:	90 91 9f 26 	lds	r25, 0x269F	; 0x80269f <g_adc_silence_sum+0x1>
    bbda:	a0 91 a0 26 	lds	r26, 0x26A0	; 0x8026a0 <g_adc_silence_sum+0x2>
    bbde:	b0 91 a1 26 	lds	r27, 0x26A1	; 0x8026a1 <g_adc_silence_sum+0x3>
    bbe2:	05 2e       	mov	r0, r21
    bbe4:	00 0c       	add	r0, r0
    bbe6:	66 0b       	sbc	r22, r22
    bbe8:	77 0b       	sbc	r23, r23
    bbea:	48 0f       	add	r20, r24
    bbec:	59 1f       	adc	r21, r25
    bbee:	6a 1f       	adc	r22, r26
    bbf0:	7b 1f       	adc	r23, r27
    bbf2:	40 93 9e 26 	sts	0x269E, r20	; 0x80269e <g_adc_silence_sum>
    bbf6:	50 93 9f 26 	sts	0x269F, r21	; 0x80269f <g_adc_silence_sum+0x1>
    bbfa:	60 93 a0 26 	sts	0x26A0, r22	; 0x8026a0 <g_adc_silence_sum+0x2>
    bbfe:	70 93 a1 26 	sts	0x26A1, r23	; 0x8026a1 <g_adc_silence_sum+0x3>
    bc02:	80 91 9c 26 	lds	r24, 0x269C	; 0x80269c <g_adc_silence_cnt>
    bc06:	90 91 9d 26 	lds	r25, 0x269D	; 0x80269d <g_adc_silence_cnt+0x1>
    bc0a:	01 96       	adiw	r24, 0x01	; 1
    bc0c:	80 93 9c 26 	sts	0x269C, r24	; 0x80269c <g_adc_silence_cnt>
    bc10:	90 93 9d 26 	sts	0x269D, r25	; 0x80269d <g_adc_silence_cnt+0x1>
    bc14:	8f 3f       	cpi	r24, 0xFF	; 255
    bc16:	91 05       	cpc	r25, r1
    bc18:	e9 f0       	breq	.+58     	; 0xbc54 <isr_adc_a+0x34c>
    bc1a:	e0 f0       	brcs	.+56     	; 0xbc54 <isr_adc_a+0x34c>
    bc1c:	80 91 9e 26 	lds	r24, 0x269E	; 0x80269e <g_adc_silence_sum>
    bc20:	90 91 9f 26 	lds	r25, 0x269F	; 0x80269f <g_adc_silence_sum+0x1>
    bc24:	a0 91 a0 26 	lds	r26, 0x26A0	; 0x8026a0 <g_adc_silence_sum+0x2>
    bc28:	b0 91 a1 26 	lds	r27, 0x26A1	; 0x8026a1 <g_adc_silence_sum+0x3>
    bc2c:	80 93 a2 26 	sts	0x26A2, r24	; 0x8026a2 <g_adc_silence_cur>
    bc30:	90 93 a3 26 	sts	0x26A3, r25	; 0x8026a3 <g_adc_silence_cur+0x1>
    bc34:	a0 93 a4 26 	sts	0x26A4, r26	; 0x8026a4 <g_adc_silence_cur+0x2>
    bc38:	b0 93 a5 26 	sts	0x26A5, r27	; 0x8026a5 <g_adc_silence_cur+0x3>
    bc3c:	10 92 9c 26 	sts	0x269C, r1	; 0x80269c <g_adc_silence_cnt>
    bc40:	10 92 9d 26 	sts	0x269D, r1	; 0x80269d <g_adc_silence_cnt+0x1>
    bc44:	10 92 9e 26 	sts	0x269E, r1	; 0x80269e <g_adc_silence_sum>
    bc48:	10 92 9f 26 	sts	0x269F, r1	; 0x80269f <g_adc_silence_sum+0x1>
    bc4c:	10 92 a0 26 	sts	0x26A0, r1	; 0x8026a0 <g_adc_silence_sum+0x2>
    bc50:	10 92 a1 26 	sts	0x26A1, r1	; 0x8026a1 <g_adc_silence_sum+0x3>
    bc54:	08 95       	ret

0000bc56 <isr_adc_b>:
    bc56:	0f 93       	push	r16
    bc58:	1f 93       	push	r17
    bc5a:	60 ff       	sbrs	r22, 0
    bc5c:	43 c0       	rjmp	.+134    	; 0xbce4 <isr_adc_b+0x8e>
    bc5e:	00 91 94 26 	lds	r16, 0x2694	; 0x802694 <g_adc_temp_sum>
    bc62:	10 91 95 26 	lds	r17, 0x2695	; 0x802695 <g_adc_temp_sum+0x1>
    bc66:	20 91 96 26 	lds	r18, 0x2696	; 0x802696 <g_adc_temp_sum+0x2>
    bc6a:	30 91 97 26 	lds	r19, 0x2697	; 0x802697 <g_adc_temp_sum+0x3>
    bc6e:	4e 5b       	subi	r20, 0xBE	; 190
    bc70:	51 09       	sbc	r21, r1
    bc72:	05 2e       	mov	r0, r21
    bc74:	00 0c       	add	r0, r0
    bc76:	66 0b       	sbc	r22, r22
    bc78:	77 0b       	sbc	r23, r23
    bc7a:	40 0f       	add	r20, r16
    bc7c:	51 1f       	adc	r21, r17
    bc7e:	62 1f       	adc	r22, r18
    bc80:	73 1f       	adc	r23, r19
    bc82:	40 93 94 26 	sts	0x2694, r20	; 0x802694 <g_adc_temp_sum>
    bc86:	50 93 95 26 	sts	0x2695, r21	; 0x802695 <g_adc_temp_sum+0x1>
    bc8a:	60 93 96 26 	sts	0x2696, r22	; 0x802696 <g_adc_temp_sum+0x2>
    bc8e:	70 93 97 26 	sts	0x2697, r23	; 0x802697 <g_adc_temp_sum+0x3>
    bc92:	80 91 92 26 	lds	r24, 0x2692	; 0x802692 <g_adc_temp_cnt>
    bc96:	90 91 93 26 	lds	r25, 0x2693	; 0x802693 <g_adc_temp_cnt+0x1>
    bc9a:	01 96       	adiw	r24, 0x01	; 1
    bc9c:	80 93 92 26 	sts	0x2692, r24	; 0x802692 <g_adc_temp_cnt>
    bca0:	90 93 93 26 	sts	0x2693, r25	; 0x802693 <g_adc_temp_cnt+0x1>
    bca4:	8f 3f       	cpi	r24, 0xFF	; 255
    bca6:	91 05       	cpc	r25, r1
    bca8:	e9 f0       	breq	.+58     	; 0xbce4 <isr_adc_b+0x8e>
    bcaa:	e0 f0       	brcs	.+56     	; 0xbce4 <isr_adc_b+0x8e>
    bcac:	80 91 94 26 	lds	r24, 0x2694	; 0x802694 <g_adc_temp_sum>
    bcb0:	90 91 95 26 	lds	r25, 0x2695	; 0x802695 <g_adc_temp_sum+0x1>
    bcb4:	a0 91 96 26 	lds	r26, 0x2696	; 0x802696 <g_adc_temp_sum+0x2>
    bcb8:	b0 91 97 26 	lds	r27, 0x2697	; 0x802697 <g_adc_temp_sum+0x3>
    bcbc:	80 93 98 26 	sts	0x2698, r24	; 0x802698 <g_adc_temp_cur>
    bcc0:	90 93 99 26 	sts	0x2699, r25	; 0x802699 <g_adc_temp_cur+0x1>
    bcc4:	a0 93 9a 26 	sts	0x269A, r26	; 0x80269a <g_adc_temp_cur+0x2>
    bcc8:	b0 93 9b 26 	sts	0x269B, r27	; 0x80269b <g_adc_temp_cur+0x3>
    bccc:	10 92 92 26 	sts	0x2692, r1	; 0x802692 <g_adc_temp_cnt>
    bcd0:	10 92 93 26 	sts	0x2693, r1	; 0x802693 <g_adc_temp_cnt+0x1>
    bcd4:	10 92 94 26 	sts	0x2694, r1	; 0x802694 <g_adc_temp_sum>
    bcd8:	10 92 95 26 	sts	0x2695, r1	; 0x802695 <g_adc_temp_sum+0x1>
    bcdc:	10 92 96 26 	sts	0x2696, r1	; 0x802696 <g_adc_temp_sum+0x2>
    bce0:	10 92 97 26 	sts	0x2697, r1	; 0x802697 <g_adc_temp_sum+0x3>
    bce4:	1f 91       	pop	r17
    bce6:	0f 91       	pop	r16
    bce8:	08 95       	ret

0000bcea <task_dac>:
    bcea:	2f 92       	push	r2
    bcec:	3f 92       	push	r3
    bcee:	4f 92       	push	r4
    bcf0:	5f 92       	push	r5
    bcf2:	6f 92       	push	r6
    bcf4:	7f 92       	push	r7
    bcf6:	8f 92       	push	r8
    bcf8:	9f 92       	push	r9
    bcfa:	af 92       	push	r10
    bcfc:	bf 92       	push	r11
    bcfe:	cf 92       	push	r12
    bd00:	df 92       	push	r13
    bd02:	ef 92       	push	r14
    bd04:	ff 92       	push	r15
    bd06:	0f 93       	push	r16
    bd08:	1f 93       	push	r17
    bd0a:	cf 93       	push	r28
    bd0c:	df 93       	push	r29
    bd0e:	cd b7       	in	r28, 0x3d	; 61
    bd10:	de b7       	in	r29, 0x3e	; 62
    bd12:	2e 97       	sbiw	r28, 0x0e	; 14
    bd14:	cd bf       	out	0x3d, r28	; 61
    bd16:	de bf       	out	0x3e, r29	; 62
    bd18:	8f b7       	in	r24, 0x3f	; 63
    bd1a:	8a 83       	std	Y+2, r24	; 0x02
    bd1c:	f8 94       	cli
    bd1e:	8a 81       	ldd	r24, Y+2	; 0x02
    bd20:	40 90 13 20 	lds	r4, 0x2013	; 0x802013 <dds0_freq_mHz>
    bd24:	50 90 14 20 	lds	r5, 0x2014	; 0x802014 <dds0_freq_mHz+0x1>
    bd28:	60 90 15 20 	lds	r6, 0x2015	; 0x802015 <dds0_freq_mHz+0x2>
    bd2c:	70 90 16 20 	lds	r7, 0x2016	; 0x802016 <dds0_freq_mHz+0x3>
    bd30:	00 91 0f 20 	lds	r16, 0x200F	; 0x80200f <dds1_freq_mHz>
    bd34:	10 91 10 20 	lds	r17, 0x2010	; 0x802010 <dds1_freq_mHz+0x1>
    bd38:	20 91 11 20 	lds	r18, 0x2011	; 0x802011 <dds1_freq_mHz+0x2>
    bd3c:	30 91 12 20 	lds	r19, 0x2012	; 0x802012 <dds1_freq_mHz+0x3>
    bd40:	0b 87       	std	Y+11, r16	; 0x0b
    bd42:	1c 87       	std	Y+12, r17	; 0x0c
    bd44:	2d 87       	std	Y+13, r18	; 0x0d
    bd46:	3e 87       	std	Y+14, r19	; 0x0e
    bd48:	8f bf       	out	0x3f, r24	; 63
    bd4a:	80 91 c5 24 	lds	r24, 0x24C5	; 0x8024c5 <s_dds0_freq_mHz.8084>
    bd4e:	90 91 c6 24 	lds	r25, 0x24C6	; 0x8024c6 <s_dds0_freq_mHz.8084+0x1>
    bd52:	a0 91 c7 24 	lds	r26, 0x24C7	; 0x8024c7 <s_dds0_freq_mHz.8084+0x2>
    bd56:	b0 91 c8 24 	lds	r27, 0x24C8	; 0x8024c8 <s_dds0_freq_mHz.8084+0x3>
    bd5a:	48 16       	cp	r4, r24
    bd5c:	59 06       	cpc	r5, r25
    bd5e:	6a 06       	cpc	r6, r26
    bd60:	7b 06       	cpc	r7, r27
    bd62:	71 f4       	brne	.+28     	; 0xbd80 <task_dac+0x96>
    bd64:	80 91 c1 24 	lds	r24, 0x24C1	; 0x8024c1 <s_dds1_freq_mHz.8085>
    bd68:	90 91 c2 24 	lds	r25, 0x24C2	; 0x8024c2 <s_dds1_freq_mHz.8085+0x1>
    bd6c:	a0 91 c3 24 	lds	r26, 0x24C3	; 0x8024c3 <s_dds1_freq_mHz.8085+0x2>
    bd70:	b0 91 c4 24 	lds	r27, 0x24C4	; 0x8024c4 <s_dds1_freq_mHz.8085+0x3>
    bd74:	08 17       	cp	r16, r24
    bd76:	19 07       	cpc	r17, r25
    bd78:	2a 07       	cpc	r18, r26
    bd7a:	3b 07       	cpc	r19, r27
    bd7c:	09 f4       	brne	.+2      	; 0xbd80 <task_dac+0x96>
    bd7e:	a1 c0       	rjmp	.+322    	; 0xbec2 <task_dac+0x1d8>
    bd80:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <dds0_freq_mHz>
    bd84:	90 91 14 20 	lds	r25, 0x2014	; 0x802014 <dds0_freq_mHz+0x1>
    bd88:	a0 91 15 20 	lds	r26, 0x2015	; 0x802015 <dds0_freq_mHz+0x2>
    bd8c:	b0 91 16 20 	lds	r27, 0x2016	; 0x802016 <dds0_freq_mHz+0x3>
    bd90:	8c 01       	movw	r16, r24
    bd92:	9d 01       	movw	r18, r26
    bd94:	40 e0       	ldi	r20, 0x00	; 0
    bd96:	50 e0       	ldi	r21, 0x00	; 0
    bd98:	ba 01       	movw	r22, r20
    bd9a:	8b 83       	std	Y+3, r24	; 0x03
    bd9c:	1c 83       	std	Y+4, r17	; 0x04
    bd9e:	2d 83       	std	Y+5, r18	; 0x05
    bda0:	3e 83       	std	Y+6, r19	; 0x06
    bda2:	4f 83       	std	Y+7, r20	; 0x07
    bda4:	58 87       	std	Y+8, r21	; 0x08
    bda6:	69 87       	std	Y+9, r22	; 0x09
    bda8:	7a 87       	std	Y+10, r23	; 0x0a
    bdaa:	aa 24       	eor	r10, r10
    bdac:	aa 94       	dec	r10
    bdae:	bb 24       	eor	r11, r11
    bdb0:	ba 94       	dec	r11
    bdb2:	cc 24       	eor	r12, r12
    bdb4:	ca 94       	dec	r12
    bdb6:	dd 24       	eor	r13, r13
    bdb8:	da 94       	dec	r13
    bdba:	e1 2c       	mov	r14, r1
    bdbc:	f1 2c       	mov	r15, r1
    bdbe:	00 e0       	ldi	r16, 0x00	; 0
    bdc0:	10 e0       	ldi	r17, 0x00	; 0
    bdc2:	2b 81       	ldd	r18, Y+3	; 0x03
    bdc4:	3c 81       	ldd	r19, Y+4	; 0x04
    bdc6:	4d 81       	ldd	r20, Y+5	; 0x05
    bdc8:	5e 81       	ldd	r21, Y+6	; 0x06
    bdca:	60 e0       	ldi	r22, 0x00	; 0
    bdcc:	70 e0       	ldi	r23, 0x00	; 0
    bdce:	80 e0       	ldi	r24, 0x00	; 0
    bdd0:	90 e0       	ldi	r25, 0x00	; 0
    bdd2:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    bdd6:	a1 2c       	mov	r10, r1
    bdd8:	0f 2e       	mov	r0, r31
    bdda:	fc e6       	ldi	r31, 0x6C	; 108
    bddc:	bf 2e       	mov	r11, r31
    bdde:	f0 2d       	mov	r31, r0
    bde0:	0f 2e       	mov	r0, r31
    bde2:	fc ed       	ldi	r31, 0xDC	; 220
    bde4:	cf 2e       	mov	r12, r31
    bde6:	f0 2d       	mov	r31, r0
    bde8:	68 94       	set
    bdea:	dd 24       	eor	r13, r13
    bdec:	d1 f8       	bld	r13, 1
    bdee:	0e 94 63 7d 	call	0xfac6	; 0xfac6 <__udivdi3>
    bdf2:	92 2e       	mov	r9, r18
    bdf4:	83 2e       	mov	r8, r19
    bdf6:	34 2e       	mov	r3, r20
    bdf8:	25 2e       	mov	r2, r21
    bdfa:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <dds1_freq_mHz>
    bdfe:	90 91 10 20 	lds	r25, 0x2010	; 0x802010 <dds1_freq_mHz+0x1>
    be02:	a0 91 11 20 	lds	r26, 0x2011	; 0x802011 <dds1_freq_mHz+0x2>
    be06:	b0 91 12 20 	lds	r27, 0x2012	; 0x802012 <dds1_freq_mHz+0x3>
    be0a:	8c 01       	movw	r16, r24
    be0c:	9d 01       	movw	r18, r26
    be0e:	40 e0       	ldi	r20, 0x00	; 0
    be10:	50 e0       	ldi	r21, 0x00	; 0
    be12:	ba 01       	movw	r22, r20
    be14:	8b 83       	std	Y+3, r24	; 0x03
    be16:	1c 83       	std	Y+4, r17	; 0x04
    be18:	2d 83       	std	Y+5, r18	; 0x05
    be1a:	3e 83       	std	Y+6, r19	; 0x06
    be1c:	4f 83       	std	Y+7, r20	; 0x07
    be1e:	58 87       	std	Y+8, r21	; 0x08
    be20:	69 87       	std	Y+9, r22	; 0x09
    be22:	7a 87       	std	Y+10, r23	; 0x0a
    be24:	aa 24       	eor	r10, r10
    be26:	aa 94       	dec	r10
    be28:	bb 24       	eor	r11, r11
    be2a:	ba 94       	dec	r11
    be2c:	cc 24       	eor	r12, r12
    be2e:	ca 94       	dec	r12
    be30:	dd 24       	eor	r13, r13
    be32:	da 94       	dec	r13
    be34:	00 e0       	ldi	r16, 0x00	; 0
    be36:	10 e0       	ldi	r17, 0x00	; 0
    be38:	2b 81       	ldd	r18, Y+3	; 0x03
    be3a:	3c 81       	ldd	r19, Y+4	; 0x04
    be3c:	4d 81       	ldd	r20, Y+5	; 0x05
    be3e:	5e 81       	ldd	r21, Y+6	; 0x06
    be40:	60 e0       	ldi	r22, 0x00	; 0
    be42:	70 e0       	ldi	r23, 0x00	; 0
    be44:	80 e0       	ldi	r24, 0x00	; 0
    be46:	90 e0       	ldi	r25, 0x00	; 0
    be48:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <__muldi3>
    be4c:	a1 2c       	mov	r10, r1
    be4e:	0f 2e       	mov	r0, r31
    be50:	fc e6       	ldi	r31, 0x6C	; 108
    be52:	bf 2e       	mov	r11, r31
    be54:	f0 2d       	mov	r31, r0
    be56:	0f 2e       	mov	r0, r31
    be58:	fc ed       	ldi	r31, 0xDC	; 220
    be5a:	cf 2e       	mov	r12, r31
    be5c:	f0 2d       	mov	r31, r0
    be5e:	68 94       	set
    be60:	dd 24       	eor	r13, r13
    be62:	d1 f8       	bld	r13, 1
    be64:	0e 94 63 7d 	call	0xfac6	; 0xfac6 <__udivdi3>
    be68:	72 2f       	mov	r23, r18
    be6a:	63 2f       	mov	r22, r19
    be6c:	94 2f       	mov	r25, r20
    be6e:	85 2f       	mov	r24, r21
    be70:	40 92 c5 24 	sts	0x24C5, r4	; 0x8024c5 <s_dds0_freq_mHz.8084>
    be74:	50 92 c6 24 	sts	0x24C6, r5	; 0x8024c6 <s_dds0_freq_mHz.8084+0x1>
    be78:	60 92 c7 24 	sts	0x24C7, r6	; 0x8024c7 <s_dds0_freq_mHz.8084+0x2>
    be7c:	70 92 c8 24 	sts	0x24C8, r7	; 0x8024c8 <s_dds0_freq_mHz.8084+0x3>
    be80:	2b 85       	ldd	r18, Y+11	; 0x0b
    be82:	3c 85       	ldd	r19, Y+12	; 0x0c
    be84:	4d 85       	ldd	r20, Y+13	; 0x0d
    be86:	5e 85       	ldd	r21, Y+14	; 0x0e
    be88:	20 93 c1 24 	sts	0x24C1, r18	; 0x8024c1 <s_dds1_freq_mHz.8085>
    be8c:	30 93 c2 24 	sts	0x24C2, r19	; 0x8024c2 <s_dds1_freq_mHz.8085+0x1>
    be90:	40 93 c3 24 	sts	0x24C3, r20	; 0x8024c3 <s_dds1_freq_mHz.8085+0x2>
    be94:	50 93 c4 24 	sts	0x24C4, r21	; 0x8024c4 <s_dds1_freq_mHz.8085+0x3>
    be98:	2f b7       	in	r18, 0x3f	; 63
    be9a:	29 83       	std	Y+1, r18	; 0x01
    be9c:	f8 94       	cli
    be9e:	29 81       	ldd	r18, Y+1	; 0x01
    bea0:	90 92 11 25 	sts	0x2511, r9	; 0x802511 <dds0_inc>
    bea4:	80 92 12 25 	sts	0x2512, r8	; 0x802512 <dds0_inc+0x1>
    bea8:	30 92 13 25 	sts	0x2513, r3	; 0x802513 <dds0_inc+0x2>
    beac:	20 92 14 25 	sts	0x2514, r2	; 0x802514 <dds0_inc+0x3>
    beb0:	70 93 09 25 	sts	0x2509, r23	; 0x802509 <dds1_inc>
    beb4:	60 93 0a 25 	sts	0x250A, r22	; 0x80250a <dds1_inc+0x1>
    beb8:	90 93 0b 25 	sts	0x250B, r25	; 0x80250b <dds1_inc+0x2>
    bebc:	80 93 0c 25 	sts	0x250C, r24	; 0x80250c <dds1_inc+0x3>
    bec0:	2f bf       	out	0x3f, r18	; 63
    bec2:	2e 96       	adiw	r28, 0x0e	; 14
    bec4:	cd bf       	out	0x3d, r28	; 61
    bec6:	de bf       	out	0x3e, r29	; 62
    bec8:	df 91       	pop	r29
    beca:	cf 91       	pop	r28
    becc:	1f 91       	pop	r17
    bece:	0f 91       	pop	r16
    bed0:	ff 90       	pop	r15
    bed2:	ef 90       	pop	r14
    bed4:	df 90       	pop	r13
    bed6:	cf 90       	pop	r12
    bed8:	bf 90       	pop	r11
    beda:	af 90       	pop	r10
    bedc:	9f 90       	pop	r9
    bede:	8f 90       	pop	r8
    bee0:	7f 90       	pop	r7
    bee2:	6f 90       	pop	r6
    bee4:	5f 90       	pop	r5
    bee6:	4f 90       	pop	r4
    bee8:	3f 90       	pop	r3
    beea:	2f 90       	pop	r2
    beec:	08 95       	ret

0000beee <task_adc>:
    beee:	4f 92       	push	r4
    bef0:	5f 92       	push	r5
    bef2:	6f 92       	push	r6
    bef4:	7f 92       	push	r7
    bef6:	8f 92       	push	r8
    bef8:	9f 92       	push	r9
    befa:	af 92       	push	r10
    befc:	bf 92       	push	r11
    befe:	cf 92       	push	r12
    bf00:	df 92       	push	r13
    bf02:	ef 92       	push	r14
    bf04:	ff 92       	push	r15
    bf06:	cf 93       	push	r28
    bf08:	df 93       	push	r29
    bf0a:	cd b7       	in	r28, 0x3d	; 61
    bf0c:	de b7       	in	r29, 0x3e	; 62
    bf0e:	6a 97       	sbiw	r28, 0x1a	; 26
    bf10:	cd bf       	out	0x3d, r28	; 61
    bf12:	de bf       	out	0x3e, r29	; 62
    bf14:	c0 90 b5 24 	lds	r12, 0x24B5	; 0x8024b5 <adc_last.8095>
    bf18:	d0 90 b6 24 	lds	r13, 0x24B6	; 0x8024b6 <adc_last.8095+0x1>
    bf1c:	e0 90 b7 24 	lds	r14, 0x24B7	; 0x8024b7 <adc_last.8095+0x2>
    bf20:	f0 90 b8 24 	lds	r15, 0x24B8	; 0x8024b8 <adc_last.8095+0x3>
    bf24:	4b 01       	movw	r8, r22
    bf26:	5c 01       	movw	r10, r24
    bf28:	8c 18       	sub	r8, r12
    bf2a:	9d 08       	sbc	r9, r13
    bf2c:	ae 08       	sbc	r10, r14
    bf2e:	bf 08       	sbc	r11, r15
    bf30:	81 14       	cp	r8, r1
    bf32:	22 e0       	ldi	r18, 0x02	; 2
    bf34:	92 06       	cpc	r9, r18
    bf36:	a1 04       	cpc	r10, r1
    bf38:	b1 04       	cpc	r11, r1
    bf3a:	30 f4       	brcc	.+12     	; 0xbf48 <task_adc+0x5a>
    bf3c:	6c 15       	cp	r22, r12
    bf3e:	7d 05       	cpc	r23, r13
    bf40:	8e 05       	cpc	r24, r14
    bf42:	9f 05       	cpc	r25, r15
    bf44:	08 f0       	brcs	.+2      	; 0xbf48 <task_adc+0x5a>
    bf46:	1a c1       	rjmp	.+564    	; 0xc17c <task_adc+0x28e>
    bf48:	dc 01       	movw	r26, r24
    bf4a:	cb 01       	movw	r24, r22
    bf4c:	80 93 b5 24 	sts	0x24B5, r24	; 0x8024b5 <adc_last.8095>
    bf50:	90 93 b6 24 	sts	0x24B6, r25	; 0x8024b6 <adc_last.8095+0x1>
    bf54:	a0 93 b7 24 	sts	0x24B7, r26	; 0x8024b7 <adc_last.8095+0x2>
    bf58:	b0 93 b8 24 	sts	0x24B8, r27	; 0x8024b8 <adc_last.8095+0x3>
    bf5c:	8f b7       	in	r24, 0x3f	; 63
    bf5e:	89 83       	std	Y+1, r24	; 0x01
    bf60:	f8 94       	cli
    bf62:	69 81       	ldd	r22, Y+1	; 0x01
    bf64:	20 91 d4 26 	lds	r18, 0x26D4	; 0x8026d4 <g_adc_vctcxo_cur>
    bf68:	30 91 d5 26 	lds	r19, 0x26D5	; 0x8026d5 <g_adc_vctcxo_cur+0x1>
    bf6c:	40 91 d6 26 	lds	r20, 0x26D6	; 0x8026d6 <g_adc_vctcxo_cur+0x2>
    bf70:	50 91 d7 26 	lds	r21, 0x26D7	; 0x8026d7 <g_adc_vctcxo_cur+0x3>
    bf74:	40 90 ca 26 	lds	r4, 0x26CA	; 0x8026ca <g_adc_5v0_cur>
    bf78:	50 90 cb 26 	lds	r5, 0x26CB	; 0x8026cb <g_adc_5v0_cur+0x1>
    bf7c:	60 90 cc 26 	lds	r6, 0x26CC	; 0x8026cc <g_adc_5v0_cur+0x2>
    bf80:	70 90 cd 26 	lds	r7, 0x26CD	; 0x8026cd <g_adc_5v0_cur+0x3>
    bf84:	80 90 c0 26 	lds	r8, 0x26C0	; 0x8026c0 <g_adc_vbat_cur>
    bf88:	90 90 c1 26 	lds	r9, 0x26C1	; 0x8026c1 <g_adc_vbat_cur+0x1>
    bf8c:	a0 90 c2 26 	lds	r10, 0x26C2	; 0x8026c2 <g_adc_vbat_cur+0x2>
    bf90:	b0 90 c3 26 	lds	r11, 0x26C3	; 0x8026c3 <g_adc_vbat_cur+0x3>
    bf94:	c0 90 b6 26 	lds	r12, 0x26B6	; 0x8026b6 <g_adc_io_adc4_cur>
    bf98:	d0 90 b7 26 	lds	r13, 0x26B7	; 0x8026b7 <g_adc_io_adc4_cur+0x1>
    bf9c:	e0 90 b8 26 	lds	r14, 0x26B8	; 0x8026b8 <g_adc_io_adc4_cur+0x2>
    bfa0:	f0 90 b9 26 	lds	r15, 0x26B9	; 0x8026b9 <g_adc_io_adc4_cur+0x3>
    bfa4:	80 91 ac 26 	lds	r24, 0x26AC	; 0x8026ac <g_adc_io_adc5_cur>
    bfa8:	90 91 ad 26 	lds	r25, 0x26AD	; 0x8026ad <g_adc_io_adc5_cur+0x1>
    bfac:	a0 91 ae 26 	lds	r26, 0x26AE	; 0x8026ae <g_adc_io_adc5_cur+0x2>
    bfb0:	b0 91 af 26 	lds	r27, 0x26AF	; 0x8026af <g_adc_io_adc5_cur+0x3>
    bfb4:	8b 83       	std	Y+3, r24	; 0x03
    bfb6:	9c 83       	std	Y+4, r25	; 0x04
    bfb8:	ad 83       	std	Y+5, r26	; 0x05
    bfba:	be 83       	std	Y+6, r27	; 0x06
    bfbc:	80 91 a2 26 	lds	r24, 0x26A2	; 0x8026a2 <g_adc_silence_cur>
    bfc0:	90 91 a3 26 	lds	r25, 0x26A3	; 0x8026a3 <g_adc_silence_cur+0x1>
    bfc4:	a0 91 a4 26 	lds	r26, 0x26A4	; 0x8026a4 <g_adc_silence_cur+0x2>
    bfc8:	b0 91 a5 26 	lds	r27, 0x26A5	; 0x8026a5 <g_adc_silence_cur+0x3>
    bfcc:	8f 83       	std	Y+7, r24	; 0x07
    bfce:	98 87       	std	Y+8, r25	; 0x08
    bfd0:	a9 87       	std	Y+9, r26	; 0x09
    bfd2:	ba 87       	std	Y+10, r27	; 0x0a
    bfd4:	80 91 98 26 	lds	r24, 0x2698	; 0x802698 <g_adc_temp_cur>
    bfd8:	90 91 99 26 	lds	r25, 0x2699	; 0x802699 <g_adc_temp_cur+0x1>
    bfdc:	a0 91 9a 26 	lds	r26, 0x269A	; 0x80269a <g_adc_temp_cur+0x2>
    bfe0:	b0 91 9b 26 	lds	r27, 0x269B	; 0x80269b <g_adc_temp_cur+0x3>
    bfe4:	8b 87       	std	Y+11, r24	; 0x0b
    bfe6:	9c 87       	std	Y+12, r25	; 0x0c
    bfe8:	ad 87       	std	Y+13, r26	; 0x0d
    bfea:	be 87       	std	Y+14, r27	; 0x0e
    bfec:	6f bf       	out	0x3f, r22	; 63
    bfee:	a8 eb       	ldi	r26, 0xB8	; 184
    bff0:	bb e0       	ldi	r27, 0x0B	; 11
    bff2:	0e 94 db 7c 	call	0xf9b6	; 0xf9b6 <__muluhisi3>
    bff6:	05 2e       	mov	r0, r21
    bff8:	54 e1       	ldi	r21, 0x14	; 20
    bffa:	96 95       	lsr	r25
    bffc:	87 95       	ror	r24
    bffe:	77 95       	ror	r23
    c000:	67 95       	ror	r22
    c002:	5a 95       	dec	r21
    c004:	d1 f7       	brne	.-12     	; 0xbffa <task_adc+0x10c>
    c006:	50 2d       	mov	r21, r0
    c008:	0e 94 76 79 	call	0xf2ec	; 0xf2ec <__floatunsisf>
    c00c:	20 e0       	ldi	r18, 0x00	; 0
    c00e:	30 e0       	ldi	r19, 0x00	; 0
    c010:	4c e3       	ldi	r20, 0x3C	; 60
    c012:	52 e4       	ldi	r21, 0x42	; 66
    c014:	0e 94 71 78 	call	0xf0e2	; 0xf0e2 <__subsf3>
    c018:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    c01c:	6f 87       	std	Y+15, r22	; 0x0f
    c01e:	78 8b       	std	Y+16, r23	; 0x10
    c020:	89 8b       	std	Y+17, r24	; 0x11
    c022:	9a 8b       	std	Y+18, r25	; 0x12
    c024:	a8 eb       	ldi	r26, 0xB8	; 184
    c026:	bb e0       	ldi	r27, 0x0B	; 11
    c028:	a3 01       	movw	r20, r6
    c02a:	92 01       	movw	r18, r4
    c02c:	0e 94 db 7c 	call	0xf9b6	; 0xf9b6 <__muluhisi3>
    c030:	0e 94 76 79 	call	0xf2ec	; 0xf2ec <__floatunsisf>
    c034:	29 ed       	ldi	r18, 0xD9	; 217
    c036:	38 ed       	ldi	r19, 0xD8	; 216
    c038:	4a e1       	ldi	r20, 0x1A	; 26
    c03a:	50 e4       	ldi	r21, 0x40	; 64
    c03c:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    c040:	20 e0       	ldi	r18, 0x00	; 0
    c042:	30 e0       	ldi	r19, 0x00	; 0
    c044:	40 e8       	ldi	r20, 0x80	; 128
    c046:	55 e3       	ldi	r21, 0x35	; 53
    c048:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    c04c:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    c050:	6b 8b       	std	Y+19, r22	; 0x13
    c052:	7c 8b       	std	Y+20, r23	; 0x14
    c054:	8d 8b       	std	Y+21, r24	; 0x15
    c056:	9e 8b       	std	Y+22, r25	; 0x16
    c058:	a8 eb       	ldi	r26, 0xB8	; 184
    c05a:	bb e0       	ldi	r27, 0x0B	; 11
    c05c:	a5 01       	movw	r20, r10
    c05e:	94 01       	movw	r18, r8
    c060:	0e 94 db 7c 	call	0xf9b6	; 0xf9b6 <__muluhisi3>
    c064:	0e 94 76 79 	call	0xf2ec	; 0xf2ec <__floatunsisf>
    c068:	23 ee       	ldi	r18, 0xE3	; 227
    c06a:	35 e4       	ldi	r19, 0x45	; 69
    c06c:	4b e1       	ldi	r20, 0x1B	; 27
    c06e:	50 e4       	ldi	r21, 0x40	; 64
    c070:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    c074:	20 e0       	ldi	r18, 0x00	; 0
    c076:	30 e0       	ldi	r19, 0x00	; 0
    c078:	40 e8       	ldi	r20, 0x80	; 128
    c07a:	55 e3       	ldi	r21, 0x35	; 53
    c07c:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    c080:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    c084:	6f 8b       	std	Y+23, r22	; 0x17
    c086:	78 8f       	std	Y+24, r23	; 0x18
    c088:	89 8f       	std	Y+25, r24	; 0x19
    c08a:	9a 8f       	std	Y+26, r25	; 0x1a
    c08c:	a8 eb       	ldi	r26, 0xB8	; 184
    c08e:	bb e0       	ldi	r27, 0x0B	; 11
    c090:	a7 01       	movw	r20, r14
    c092:	96 01       	movw	r18, r12
    c094:	0e 94 db 7c 	call	0xf9b6	; 0xf9b6 <__muluhisi3>
    c098:	6b 01       	movw	r12, r22
    c09a:	7c 01       	movw	r14, r24
    c09c:	0b 2e       	mov	r0, r27
    c09e:	b4 e1       	ldi	r27, 0x14	; 20
    c0a0:	f6 94       	lsr	r15
    c0a2:	e7 94       	ror	r14
    c0a4:	d7 94       	ror	r13
    c0a6:	c7 94       	ror	r12
    c0a8:	ba 95       	dec	r27
    c0aa:	d1 f7       	brne	.-12     	; 0xc0a0 <task_adc+0x1b2>
    c0ac:	b0 2d       	mov	r27, r0
    c0ae:	2b 81       	ldd	r18, Y+3	; 0x03
    c0b0:	3c 81       	ldd	r19, Y+4	; 0x04
    c0b2:	4d 81       	ldd	r20, Y+5	; 0x05
    c0b4:	5e 81       	ldd	r21, Y+6	; 0x06
    c0b6:	0e 94 db 7c 	call	0xf9b6	; 0xf9b6 <__muluhisi3>
    c0ba:	2b 01       	movw	r4, r22
    c0bc:	3c 01       	movw	r6, r24
    c0be:	03 2e       	mov	r0, r19
    c0c0:	34 e1       	ldi	r19, 0x14	; 20
    c0c2:	76 94       	lsr	r7
    c0c4:	67 94       	ror	r6
    c0c6:	57 94       	ror	r5
    c0c8:	47 94       	ror	r4
    c0ca:	3a 95       	dec	r19
    c0cc:	d1 f7       	brne	.-12     	; 0xc0c2 <task_adc+0x1d4>
    c0ce:	30 2d       	mov	r19, r0
    c0d0:	2f 81       	ldd	r18, Y+7	; 0x07
    c0d2:	38 85       	ldd	r19, Y+8	; 0x08
    c0d4:	49 85       	ldd	r20, Y+9	; 0x09
    c0d6:	5a 85       	ldd	r21, Y+10	; 0x0a
    c0d8:	0e 94 db 7c 	call	0xf9b6	; 0xf9b6 <__muluhisi3>
    c0dc:	4b 01       	movw	r8, r22
    c0de:	5c 01       	movw	r10, r24
    c0e0:	07 2e       	mov	r0, r23
    c0e2:	74 e1       	ldi	r23, 0x14	; 20
    c0e4:	b6 94       	lsr	r11
    c0e6:	a7 94       	ror	r10
    c0e8:	97 94       	ror	r9
    c0ea:	87 94       	ror	r8
    c0ec:	7a 95       	dec	r23
    c0ee:	d1 f7       	brne	.-12     	; 0xc0e4 <task_adc+0x1f6>
    c0f0:	70 2d       	mov	r23, r0
    c0f2:	a4 e6       	ldi	r26, 0x64	; 100
    c0f4:	b0 e0       	ldi	r27, 0x00	; 0
    c0f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    c0f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    c0fa:	4d 85       	ldd	r20, Y+13	; 0x0d
    c0fc:	5e 85       	ldd	r21, Y+14	; 0x0e
    c0fe:	0e 94 db 7c 	call	0xf9b6	; 0xf9b6 <__muluhisi3>
    c102:	0e 94 76 79 	call	0xf2ec	; 0xf2ec <__floatunsisf>
    c106:	2d ec       	ldi	r18, 0xCD	; 205
    c108:	3c e4       	ldi	r19, 0x4C	; 76
    c10a:	4d e1       	ldi	r20, 0x1D	; 29
    c10c:	54 e4       	ldi	r21, 0x44	; 68
    c10e:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    c112:	20 e0       	ldi	r18, 0x00	; 0
    c114:	30 e0       	ldi	r19, 0x00	; 0
    c116:	40 e8       	ldi	r20, 0x80	; 128
    c118:	55 e3       	ldi	r21, 0x35	; 53
    c11a:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    c11e:	20 e0       	ldi	r18, 0x00	; 0
    c120:	36 e6       	ldi	r19, 0x66	; 102
    c122:	45 ed       	ldi	r20, 0xD5	; 213
    c124:	56 e4       	ldi	r21, 0x46	; 70
    c126:	0e 94 71 78 	call	0xf0e2	; 0xf0e2 <__subsf3>
    c12a:	0e 94 45 79 	call	0xf28a	; 0xf28a <__fixsfsi>
    c12e:	2f b7       	in	r18, 0x3f	; 63
    c130:	2a 83       	std	Y+2, r18	; 0x02
    c132:	f8 94       	cli
    c134:	2a 81       	ldd	r18, Y+2	; 0x02
    c136:	af 85       	ldd	r26, Y+15	; 0x0f
    c138:	b8 89       	ldd	r27, Y+16	; 0x10
    c13a:	a0 93 90 26 	sts	0x2690, r26	; 0x802690 <g_adc_vctcxo_volt_1000>
    c13e:	b0 93 91 26 	sts	0x2691, r27	; 0x802691 <g_adc_vctcxo_volt_1000+0x1>
    c142:	4b 89       	ldd	r20, Y+19	; 0x13
    c144:	5c 89       	ldd	r21, Y+20	; 0x14
    c146:	40 93 8e 26 	sts	0x268E, r20	; 0x80268e <g_adc_5v0_volt_1000>
    c14a:	50 93 8f 26 	sts	0x268F, r21	; 0x80268f <g_adc_5v0_volt_1000+0x1>
    c14e:	af 89       	ldd	r26, Y+23	; 0x17
    c150:	b8 8d       	ldd	r27, Y+24	; 0x18
    c152:	a0 93 8c 26 	sts	0x268C, r26	; 0x80268c <g_adc_vbat_volt_1000>
    c156:	b0 93 8d 26 	sts	0x268D, r27	; 0x80268d <g_adc_vbat_volt_1000+0x1>
    c15a:	c0 92 8a 26 	sts	0x268A, r12	; 0x80268a <g_adc_io_adc4_volt_1000>
    c15e:	d0 92 8b 26 	sts	0x268B, r13	; 0x80268b <g_adc_io_adc4_volt_1000+0x1>
    c162:	40 92 88 26 	sts	0x2688, r4	; 0x802688 <g_adc_io_adc5_volt_1000>
    c166:	50 92 89 26 	sts	0x2689, r5	; 0x802689 <g_adc_io_adc5_volt_1000+0x1>
    c16a:	80 92 86 26 	sts	0x2686, r8	; 0x802686 <g_adc_silence_volt_1000>
    c16e:	90 92 87 26 	sts	0x2687, r9	; 0x802687 <g_adc_silence_volt_1000+0x1>
    c172:	60 93 84 26 	sts	0x2684, r22	; 0x802684 <g_adc_temp_deg_100>
    c176:	70 93 85 26 	sts	0x2685, r23	; 0x802685 <g_adc_temp_deg_100+0x1>
    c17a:	2f bf       	out	0x3f, r18	; 63
    c17c:	6a 96       	adiw	r28, 0x1a	; 26
    c17e:	cd bf       	out	0x3d, r28	; 61
    c180:	de bf       	out	0x3e, r29	; 62
    c182:	df 91       	pop	r29
    c184:	cf 91       	pop	r28
    c186:	ff 90       	pop	r15
    c188:	ef 90       	pop	r14
    c18a:	df 90       	pop	r13
    c18c:	cf 90       	pop	r12
    c18e:	bf 90       	pop	r11
    c190:	af 90       	pop	r10
    c192:	9f 90       	pop	r9
    c194:	8f 90       	pop	r8
    c196:	7f 90       	pop	r7
    c198:	6f 90       	pop	r6
    c19a:	5f 90       	pop	r5
    c19c:	4f 90       	pop	r4
    c19e:	08 95       	ret

0000c1a0 <tc_init>:
    c1a0:	ef 92       	push	r14
    c1a2:	ff 92       	push	r15
    c1a4:	0f 93       	push	r16
    c1a6:	1f 93       	push	r17
    c1a8:	cf 93       	push	r28
    c1aa:	df 93       	push	r29
    c1ac:	cd b7       	in	r28, 0x3d	; 61
    c1ae:	de b7       	in	r29, 0x3e	; 62
    c1b0:	2e 97       	sbiw	r28, 0x0e	; 14
    c1b2:	cd bf       	out	0x3d, r28	; 61
    c1b4:	de bf       	out	0x3e, r29	; 62
    c1b6:	20 e0       	ldi	r18, 0x00	; 0
    c1b8:	38 e0       	ldi	r19, 0x08	; 8
    c1ba:	43 e0       	ldi	r20, 0x03	; 3
    c1bc:	60 e0       	ldi	r22, 0x00	; 0
    c1be:	ce 01       	movw	r24, r28
    c1c0:	01 96       	adiw	r24, 0x01	; 1
    c1c2:	61 da       	rcall	.-2878   	; 0xb686 <pwm_init>
    c1c4:	6d e2       	ldi	r22, 0x2D	; 45
    c1c6:	ce 01       	movw	r24, r28
    c1c8:	01 96       	adiw	r24, 0x01	; 1
    c1ca:	25 db       	rcall	.-2486   	; 0xb816 <pwm_start>
    c1cc:	6e 81       	ldd	r22, Y+6	; 0x06
    c1ce:	7f 81       	ldd	r23, Y+7	; 0x07
    c1d0:	80 e0       	ldi	r24, 0x00	; 0
    c1d2:	90 e0       	ldi	r25, 0x00	; 0
    c1d4:	0e 94 76 79 	call	0xf2ec	; 0xf2ec <__floatunsisf>
    c1d8:	20 e0       	ldi	r18, 0x00	; 0
    c1da:	30 e0       	ldi	r19, 0x00	; 0
    c1dc:	40 ec       	ldi	r20, 0xC0	; 192
    c1de:	5f e3       	ldi	r21, 0x3F	; 63
    c1e0:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    c1e4:	27 e2       	ldi	r18, 0x27	; 39
    c1e6:	31 e3       	ldi	r19, 0x31	; 49
    c1e8:	40 e5       	ldi	r20, 0x50	; 80
    c1ea:	50 e4       	ldi	r21, 0x40	; 64
    c1ec:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    c1f0:	20 e0       	ldi	r18, 0x00	; 0
    c1f2:	30 e0       	ldi	r19, 0x00	; 0
    c1f4:	40 e0       	ldi	r20, 0x00	; 0
    c1f6:	5f e3       	ldi	r21, 0x3F	; 63
    c1f8:	0e 94 72 78 	call	0xf0e4	; 0xf0e4 <__addsf3>
    c1fc:	0e 94 4a 79 	call	0xf294	; 0xf294 <__fixunssfsi>
    c200:	60 93 3c 08 	sts	0x083C, r22	; 0x80083c <__TEXT_REGION_LENGTH__+0x70083c>
    c204:	70 93 3d 08 	sts	0x083D, r23	; 0x80083d <__TEXT_REGION_LENGTH__+0x70083d>
    c208:	7e 01       	movw	r14, r28
    c20a:	88 e0       	ldi	r24, 0x08	; 8
    c20c:	e8 0e       	add	r14, r24
    c20e:	f1 1c       	adc	r15, r1
    c210:	87 e0       	ldi	r24, 0x07	; 7
    c212:	f7 01       	movw	r30, r14
    c214:	11 92       	st	Z+, r1
    c216:	8a 95       	dec	r24
    c218:	e9 f7       	brne	.-6      	; 0xc214 <tc_init+0x74>
    c21a:	00 e4       	ldi	r16, 0x40	; 64
    c21c:	18 e0       	ldi	r17, 0x08	; 8
    c21e:	08 87       	std	Y+8, r16	; 0x08
    c220:	19 87       	std	Y+9, r17	; 0x09
    c222:	80 e4       	ldi	r24, 0x40	; 64
    c224:	98 e0       	ldi	r25, 0x08	; 8
    c226:	0e 94 bd 50 	call	0xa17a	; 0xa17a <tc_enable>
    c22a:	f8 01       	movw	r30, r16
    c22c:	81 81       	ldd	r24, Z+1	; 0x01
    c22e:	88 7f       	andi	r24, 0xF8	; 248
    c230:	81 83       	std	Z+1, r24	; 0x01
    c232:	80 81       	ld	r24, Z
    c234:	80 7f       	andi	r24, 0xF0	; 240
    c236:	80 83       	st	Z, r24
    c238:	68 ee       	ldi	r22, 0xE8	; 232
    c23a:	73 e0       	ldi	r23, 0x03	; 3
    c23c:	c7 01       	movw	r24, r14
    c23e:	b7 d9       	rcall	.-3218   	; 0xb5ae <pwm_set_frequency>
    c240:	8d 85       	ldd	r24, Y+13	; 0x0d
    c242:	9e 85       	ldd	r25, Y+14	; 0x0e
    c244:	f8 01       	movw	r30, r16
    c246:	86 a3       	std	Z+38, r24	; 0x26
    c248:	97 a3       	std	Z+39, r25	; 0x27
    c24a:	8f e2       	ldi	r24, 0x2F	; 47
    c24c:	95 e7       	ldi	r25, 0x75	; 117
    c24e:	86 ab       	std	Z+54, r24	; 0x36
    c250:	97 ab       	std	Z+55, r25	; 0x37
    c252:	80 e4       	ldi	r24, 0x40	; 64
    c254:	9a e0       	ldi	r25, 0x0A	; 10
    c256:	0e 94 bd 50 	call	0xa17a	; 0xa17a <tc_enable>
    c25a:	e0 e4       	ldi	r30, 0x40	; 64
    c25c:	fa e0       	ldi	r31, 0x0A	; 10
    c25e:	81 81       	ldd	r24, Z+1	; 0x01
    c260:	88 7f       	andi	r24, 0xF8	; 248
    c262:	81 83       	std	Z+1, r24	; 0x01
    c264:	80 e7       	ldi	r24, 0x70	; 112
    c266:	92 e0       	ldi	r25, 0x02	; 2
    c268:	86 a3       	std	Z+38, r24	; 0x26
    c26a:	97 a3       	std	Z+39, r25	; 0x27
    c26c:	2e 96       	adiw	r28, 0x0e	; 14
    c26e:	cd bf       	out	0x3d, r28	; 61
    c270:	de bf       	out	0x3e, r29	; 62
    c272:	df 91       	pop	r29
    c274:	cf 91       	pop	r28
    c276:	1f 91       	pop	r17
    c278:	0f 91       	pop	r16
    c27a:	ff 90       	pop	r15
    c27c:	ef 90       	pop	r14
    c27e:	08 95       	ret

0000c280 <tc_start>:
    c280:	cf 93       	push	r28
    c282:	df 93       	push	r29
    c284:	c0 e0       	ldi	r28, 0x00	; 0
    c286:	d8 e0       	ldi	r29, 0x08	; 8
    c288:	88 81       	ld	r24, Y
    c28a:	80 7f       	andi	r24, 0xF0	; 240
    c28c:	81 60       	ori	r24, 0x01	; 1
    c28e:	88 83       	st	Y, r24
    c290:	63 e0       	ldi	r22, 0x03	; 3
    c292:	79 e6       	ldi	r23, 0x69	; 105
    c294:	80 e0       	ldi	r24, 0x00	; 0
    c296:	98 e0       	ldi	r25, 0x08	; 8
    c298:	0e 94 3c 51 	call	0xa278	; 0xa278 <tc_set_overflow_interrupt_callback>
    c29c:	8e 81       	ldd	r24, Y+6	; 0x06
    c29e:	8c 7f       	andi	r24, 0xFC	; 252
    c2a0:	8e 83       	std	Y+6, r24	; 0x06
    c2a2:	8e 81       	ldd	r24, Y+6	; 0x06
    c2a4:	81 60       	ori	r24, 0x01	; 1
    c2a6:	8e 83       	std	Y+6, r24	; 0x06
    c2a8:	c0 e4       	ldi	r28, 0x40	; 64
    c2aa:	d8 e0       	ldi	r29, 0x08	; 8
    c2ac:	88 81       	ld	r24, Y
    c2ae:	80 7f       	andi	r24, 0xF0	; 240
    c2b0:	81 60       	ori	r24, 0x01	; 1
    c2b2:	88 83       	st	Y, r24
    c2b4:	60 e6       	ldi	r22, 0x60	; 96
    c2b6:	7c e5       	ldi	r23, 0x5C	; 92
    c2b8:	80 e4       	ldi	r24, 0x40	; 64
    c2ba:	98 e0       	ldi	r25, 0x08	; 8
    c2bc:	0e 94 3c 51 	call	0xa278	; 0xa278 <tc_set_overflow_interrupt_callback>
    c2c0:	8e 81       	ldd	r24, Y+6	; 0x06
    c2c2:	8c 7f       	andi	r24, 0xFC	; 252
    c2c4:	8e 83       	std	Y+6, r24	; 0x06
    c2c6:	8e 81       	ldd	r24, Y+6	; 0x06
    c2c8:	83 60       	ori	r24, 0x03	; 3
    c2ca:	8e 83       	std	Y+6, r24	; 0x06
    c2cc:	e0 e4       	ldi	r30, 0x40	; 64
    c2ce:	fa e0       	ldi	r31, 0x0A	; 10
    c2d0:	80 81       	ld	r24, Z
    c2d2:	80 7f       	andi	r24, 0xF0	; 240
    c2d4:	81 60       	ori	r24, 0x01	; 1
    c2d6:	80 83       	st	Z, r24
    c2d8:	df 91       	pop	r29
    c2da:	cf 91       	pop	r28
    c2dc:	08 95       	ret

0000c2de <dac_init>:
    c2de:	cf 93       	push	r28
    c2e0:	df 93       	push	r29
    c2e2:	6b e2       	ldi	r22, 0x2B	; 43
    c2e4:	75 e2       	ldi	r23, 0x25	; 37
    c2e6:	80 e2       	ldi	r24, 0x20	; 32
    c2e8:	93 e0       	ldi	r25, 0x03	; 3
    c2ea:	0e 94 3a 4a 	call	0x9474	; 0x9474 <dac_read_configuration>
    c2ee:	eb e2       	ldi	r30, 0x2B	; 43
    c2f0:	f5 e2       	ldi	r31, 0x25	; 37
    c2f2:	81 e0       	ldi	r24, 0x01	; 1
    c2f4:	82 83       	std	Z+2, r24	; 0x02
    c2f6:	8c e0       	ldi	r24, 0x0C	; 12
    c2f8:	80 83       	st	Z, r24
    c2fa:	81 81       	ldd	r24, Z+1	; 0x01
    c2fc:	8c 79       	andi	r24, 0x9C	; 156
    c2fe:	83 64       	ori	r24, 0x43	; 67
    c300:	81 83       	std	Z+1, r24	; 0x01
    c302:	84 e0       	ldi	r24, 0x04	; 4
    c304:	83 83       	std	Z+3, r24	; 0x03
    c306:	bf 01       	movw	r22, r30
    c308:	80 e2       	ldi	r24, 0x20	; 32
    c30a:	93 e0       	ldi	r25, 0x03	; 3
    c30c:	0e 94 de 49 	call	0x93bc	; 0x93bc <dac_write_configuration>
    c310:	62 e3       	ldi	r22, 0x32	; 50
    c312:	70 e0       	ldi	r23, 0x00	; 0
    c314:	82 e0       	ldi	r24, 0x02	; 2
    c316:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    c31a:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    c31e:	63 e3       	ldi	r22, 0x33	; 51
    c320:	70 e0       	ldi	r23, 0x00	; 0
    c322:	82 e0       	ldi	r24, 0x02	; 2
    c324:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    c328:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    c32c:	66 e3       	ldi	r22, 0x36	; 54
    c32e:	70 e0       	ldi	r23, 0x00	; 0
    c330:	82 e0       	ldi	r24, 0x02	; 2
    c332:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    c336:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    c33a:	67 e3       	ldi	r22, 0x37	; 55
    c33c:	70 e0       	ldi	r23, 0x00	; 0
    c33e:	82 e0       	ldi	r24, 0x02	; 2
    c340:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    c344:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
    c348:	a0 e2       	ldi	r26, 0x20	; 32
    c34a:	b5 e2       	ldi	r27, 0x25	; 37
    c34c:	8b e0       	ldi	r24, 0x0B	; 11
    c34e:	ed 01       	movw	r28, r26
    c350:	e8 2f       	mov	r30, r24
    c352:	19 92       	st	Y+, r1
    c354:	ea 95       	dec	r30
    c356:	e9 f7       	brne	.-6      	; 0xc352 <dac_init+0x74>
    c358:	e5 e1       	ldi	r30, 0x15	; 21
    c35a:	f5 e2       	ldi	r31, 0x25	; 37
    c35c:	ef 01       	movw	r28, r30
    c35e:	19 92       	st	Y+, r1
    c360:	8a 95       	dec	r24
    c362:	e9 f7       	brne	.-6      	; 0xc35e <dac_init+0x80>
    c364:	80 e2       	ldi	r24, 0x20	; 32
    c366:	90 e0       	ldi	r25, 0x00	; 0
    c368:	14 96       	adiw	r26, 0x04	; 4
    c36a:	8d 93       	st	X+, r24
    c36c:	9c 93       	st	X, r25
    c36e:	15 97       	sbiw	r26, 0x05	; 5
    c370:	84 83       	std	Z+4, r24	; 0x04
    c372:	95 83       	std	Z+5, r25	; 0x05
    c374:	89 ec       	ldi	r24, 0xC9	; 201
    c376:	94 e2       	ldi	r25, 0x24	; 36
    c378:	17 96       	adiw	r26, 0x07	; 7
    c37a:	8d 93       	st	X+, r24
    c37c:	9c 93       	st	X, r25
    c37e:	18 97       	sbiw	r26, 0x08	; 8
    c380:	29 ed       	ldi	r18, 0xD9	; 217
    c382:	12 96       	adiw	r26, 0x02	; 2
    c384:	2c 93       	st	X, r18
    c386:	12 97       	sbiw	r26, 0x02	; 2
    c388:	88 e3       	ldi	r24, 0x38	; 56
    c38a:	93 e0       	ldi	r25, 0x03	; 3
    c38c:	19 96       	adiw	r26, 0x09	; 9
    c38e:	8d 93       	st	X+, r24
    c390:	9c 93       	st	X, r25
    c392:	1a 97       	sbiw	r26, 0x0a	; 10
    c394:	49 ee       	ldi	r20, 0xE9	; 233
    c396:	54 e2       	ldi	r21, 0x24	; 36
    c398:	47 83       	std	Z+7, r20	; 0x07
    c39a:	50 87       	std	Z+8, r21	; 0x08
    c39c:	22 83       	std	Z+2, r18	; 0x02
    c39e:	81 87       	std	Z+9, r24	; 0x09
    c3a0:	92 87       	std	Z+10, r25	; 0x0a
    c3a2:	95 e2       	ldi	r25, 0x25	; 37
    c3a4:	13 96       	adiw	r26, 0x03	; 3
    c3a6:	9c 93       	st	X, r25
    c3a8:	13 97       	sbiw	r26, 0x03	; 3
    c3aa:	86 e0       	ldi	r24, 0x06	; 6
    c3ac:	8c 93       	st	X, r24
    c3ae:	93 83       	std	Z+3, r25	; 0x03
    c3b0:	80 83       	st	Z, r24
    c3b2:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <rtc_get_time>
    c3b6:	99 dc       	rcall	.-1742   	; 0xbcea <task_dac>
    c3b8:	df 91       	pop	r29
    c3ba:	cf 91       	pop	r28
    c3bc:	08 95       	ret

0000c3be <calc_next_frame>:
    c3be:	8f 92       	push	r8
    c3c0:	9f 92       	push	r9
    c3c2:	af 92       	push	r10
    c3c4:	bf 92       	push	r11
    c3c6:	cf 92       	push	r12
    c3c8:	df 92       	push	r13
    c3ca:	ef 92       	push	r14
    c3cc:	ff 92       	push	r15
    c3ce:	0f 93       	push	r16
    c3d0:	1f 93       	push	r17
    c3d2:	cf 93       	push	r28
    c3d4:	df 93       	push	r29
    c3d6:	6b 01       	movw	r12, r22
    c3d8:	5a 01       	movw	r10, r20
    c3da:	79 01       	movw	r14, r18
    c3dc:	48 01       	movw	r8, r16
    c3de:	ec 01       	movw	r28, r24
    c3e0:	8c 01       	movw	r16, r24
    c3e2:	00 5e       	subi	r16, 0xE0	; 224
    c3e4:	1f 4f       	sbci	r17, 0xFF	; 255
    c3e6:	f6 01       	movw	r30, r12
    c3e8:	82 81       	ldd	r24, Z+2	; 0x02
    c3ea:	93 81       	ldd	r25, Z+3	; 0x03
    c3ec:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <get_interpolated_sine>
    c3f0:	88 83       	st	Y, r24
    c3f2:	99 83       	std	Y+1, r25	; 0x01
    c3f4:	f7 01       	movw	r30, r14
    c3f6:	82 81       	ldd	r24, Z+2	; 0x02
    c3f8:	93 81       	ldd	r25, Z+3	; 0x03
    c3fa:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <get_interpolated_sine>
    c3fe:	8a 83       	std	Y+2, r24	; 0x02
    c400:	9b 83       	std	Y+3, r25	; 0x03
    c402:	f6 01       	movw	r30, r12
    c404:	40 81       	ld	r20, Z
    c406:	51 81       	ldd	r21, Z+1	; 0x01
    c408:	62 81       	ldd	r22, Z+2	; 0x02
    c40a:	73 81       	ldd	r23, Z+3	; 0x03
    c40c:	f5 01       	movw	r30, r10
    c40e:	80 81       	ld	r24, Z
    c410:	91 81       	ldd	r25, Z+1	; 0x01
    c412:	a2 81       	ldd	r26, Z+2	; 0x02
    c414:	b3 81       	ldd	r27, Z+3	; 0x03
    c416:	84 0f       	add	r24, r20
    c418:	95 1f       	adc	r25, r21
    c41a:	a6 1f       	adc	r26, r22
    c41c:	b7 1f       	adc	r27, r23
    c41e:	f6 01       	movw	r30, r12
    c420:	80 83       	st	Z, r24
    c422:	91 83       	std	Z+1, r25	; 0x01
    c424:	a2 83       	std	Z+2, r26	; 0x02
    c426:	b3 83       	std	Z+3, r27	; 0x03
    c428:	f7 01       	movw	r30, r14
    c42a:	40 81       	ld	r20, Z
    c42c:	51 81       	ldd	r21, Z+1	; 0x01
    c42e:	62 81       	ldd	r22, Z+2	; 0x02
    c430:	73 81       	ldd	r23, Z+3	; 0x03
    c432:	f4 01       	movw	r30, r8
    c434:	80 81       	ld	r24, Z
    c436:	91 81       	ldd	r25, Z+1	; 0x01
    c438:	a2 81       	ldd	r26, Z+2	; 0x02
    c43a:	b3 81       	ldd	r27, Z+3	; 0x03
    c43c:	84 0f       	add	r24, r20
    c43e:	95 1f       	adc	r25, r21
    c440:	a6 1f       	adc	r26, r22
    c442:	b7 1f       	adc	r27, r23
    c444:	f7 01       	movw	r30, r14
    c446:	80 83       	st	Z, r24
    c448:	91 83       	std	Z+1, r25	; 0x01
    c44a:	a2 83       	std	Z+2, r26	; 0x02
    c44c:	b3 83       	std	Z+3, r27	; 0x03
    c44e:	24 96       	adiw	r28, 0x04	; 4
    c450:	c0 17       	cp	r28, r16
    c452:	d1 07       	cpc	r29, r17
    c454:	41 f6       	brne	.-112    	; 0xc3e6 <calc_next_frame+0x28>
    c456:	df 91       	pop	r29
    c458:	cf 91       	pop	r28
    c45a:	1f 91       	pop	r17
    c45c:	0f 91       	pop	r16
    c45e:	ff 90       	pop	r15
    c460:	ef 90       	pop	r14
    c462:	df 90       	pop	r13
    c464:	cf 90       	pop	r12
    c466:	bf 90       	pop	r11
    c468:	af 90       	pop	r10
    c46a:	9f 90       	pop	r9
    c46c:	8f 90       	pop	r8
    c46e:	08 95       	ret

0000c470 <dac_start>:
    c470:	ff 92       	push	r15
    c472:	0f 93       	push	r16
    c474:	1f 93       	push	r17
    c476:	cf 93       	push	r28
    c478:	df 93       	push	r29
    c47a:	00 d0       	rcall	.+0      	; 0xc47c <dac_start+0xc>
    c47c:	1f 92       	push	r1
    c47e:	cd b7       	in	r28, 0x3d	; 61
    c480:	de b7       	in	r29, 0x3e	; 62
    c482:	80 e2       	ldi	r24, 0x20	; 32
    c484:	93 e0       	ldi	r25, 0x03	; 3
    c486:	0e 94 8c 49 	call	0x9318	; 0x9318 <dac_enable>
    c48a:	0e 94 94 25 	call	0x4b28	; 0x4b28 <dma_enable>
    c48e:	6a ec       	ldi	r22, 0xCA	; 202
    c490:	72 e6       	ldi	r23, 0x62	; 98
    c492:	80 e0       	ldi	r24, 0x00	; 0
    c494:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <dma_set_callback>
    c498:	e0 e2       	ldi	r30, 0x20	; 32
    c49a:	f5 e2       	ldi	r31, 0x25	; 37
    c49c:	81 81       	ldd	r24, Z+1	; 0x01
    c49e:	80 7f       	andi	r24, 0xF0	; 240
    c4a0:	8a 60       	ori	r24, 0x0A	; 10
    c4a2:	81 83       	std	Z+1, r24	; 0x01
    c4a4:	67 ea       	ldi	r22, 0xA7	; 167
    c4a6:	72 e6       	ldi	r23, 0x62	; 98
    c4a8:	81 e0       	ldi	r24, 0x01	; 1
    c4aa:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <dma_set_callback>
    c4ae:	e5 e1       	ldi	r30, 0x15	; 21
    c4b0:	f5 e2       	ldi	r31, 0x25	; 37
    c4b2:	81 81       	ldd	r24, Z+1	; 0x01
    c4b4:	80 7f       	andi	r24, 0xF0	; 240
    c4b6:	8a 60       	ori	r24, 0x0A	; 10
    c4b8:	81 83       	std	Z+1, r24	; 0x01
    c4ba:	8f b7       	in	r24, 0x3f	; 63
    c4bc:	8a 83       	std	Y+2, r24	; 0x02
    c4be:	f8 94       	cli
    c4c0:	9a 81       	ldd	r25, Y+2	; 0x02
    c4c2:	e0 e0       	ldi	r30, 0x00	; 0
    c4c4:	f1 e0       	ldi	r31, 0x01	; 1
    c4c6:	80 81       	ld	r24, Z
    c4c8:	8c 7f       	andi	r24, 0xFC	; 252
    c4ca:	82 60       	ori	r24, 0x02	; 2
    c4cc:	80 83       	st	Z, r24
    c4ce:	9f bf       	out	0x3f, r25	; 63
    c4d0:	8f b7       	in	r24, 0x3f	; 63
    c4d2:	89 83       	std	Y+1, r24	; 0x01
    c4d4:	f8 94       	cli
    c4d6:	99 81       	ldd	r25, Y+1	; 0x01
    c4d8:	80 81       	ld	r24, Z
    c4da:	83 7f       	andi	r24, 0xF3	; 243
    c4dc:	84 60       	ori	r24, 0x04	; 4
    c4de:	80 83       	st	Z, r24
    c4e0:	9f bf       	out	0x3f, r25	; 63
    c4e2:	60 e2       	ldi	r22, 0x20	; 32
    c4e4:	75 e2       	ldi	r23, 0x25	; 37
    c4e6:	80 e0       	ldi	r24, 0x00	; 0
    c4e8:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <dma_channel_write_config>
    c4ec:	65 e1       	ldi	r22, 0x15	; 21
    c4ee:	75 e2       	ldi	r23, 0x25	; 37
    c4f0:	81 e0       	ldi	r24, 0x01	; 1
    c4f2:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <dma_channel_write_config>
    c4f6:	8f b7       	in	r24, 0x3f	; 63
    c4f8:	8b 83       	std	Y+3, r24	; 0x03
    c4fa:	f8 94       	cli
    c4fc:	fb 80       	ldd	r15, Y+3	; 0x03
    c4fe:	09 e0       	ldi	r16, 0x09	; 9
    c500:	15 e2       	ldi	r17, 0x25	; 37
    c502:	2b e0       	ldi	r18, 0x0B	; 11
    c504:	30 e2       	ldi	r19, 0x20	; 32
    c506:	41 e1       	ldi	r20, 0x11	; 17
    c508:	55 e2       	ldi	r21, 0x25	; 37
    c50a:	6d e0       	ldi	r22, 0x0D	; 13
    c50c:	75 e2       	ldi	r23, 0x25	; 37
    c50e:	89 ec       	ldi	r24, 0xC9	; 201
    c510:	94 e2       	ldi	r25, 0x24	; 36
    c512:	55 df       	rcall	.-342    	; 0xc3be <calc_next_frame>
    c514:	2b e0       	ldi	r18, 0x0B	; 11
    c516:	30 e2       	ldi	r19, 0x20	; 32
    c518:	41 e1       	ldi	r20, 0x11	; 17
    c51a:	55 e2       	ldi	r21, 0x25	; 37
    c51c:	6d e0       	ldi	r22, 0x0D	; 13
    c51e:	75 e2       	ldi	r23, 0x25	; 37
    c520:	89 ee       	ldi	r24, 0xE9	; 233
    c522:	94 e2       	ldi	r25, 0x24	; 36
    c524:	4c df       	rcall	.-360    	; 0xc3be <calc_next_frame>
    c526:	8f b7       	in	r24, 0x3f	; 63
    c528:	8c 83       	std	Y+4, r24	; 0x04
    c52a:	f8 94       	cli
    c52c:	9c 81       	ldd	r25, Y+4	; 0x04
    c52e:	e0 e1       	ldi	r30, 0x10	; 16
    c530:	f1 e0       	ldi	r31, 0x01	; 1
    c532:	80 81       	ld	r24, Z
    c534:	80 68       	ori	r24, 0x80	; 128
    c536:	80 83       	st	Z, r24
    c538:	9f bf       	out	0x3f, r25	; 63
    c53a:	ff be       	out	0x3f, r15	; 63
    c53c:	24 96       	adiw	r28, 0x04	; 4
    c53e:	cd bf       	out	0x3d, r28	; 61
    c540:	de bf       	out	0x3e, r29	; 62
    c542:	df 91       	pop	r29
    c544:	cf 91       	pop	r28
    c546:	1f 91       	pop	r17
    c548:	0f 91       	pop	r16
    c54a:	ff 90       	pop	r15
    c54c:	08 95       	ret

0000c54e <isr_dma_dac_ch0_B>:
    c54e:	0f 93       	push	r16
    c550:	1f 93       	push	r17
    c552:	cf 93       	push	r28
    c554:	df 93       	push	r29
    c556:	1f 92       	push	r1
    c558:	cd b7       	in	r28, 0x3d	; 61
    c55a:	de b7       	in	r29, 0x3e	; 62
    c55c:	8f b7       	in	r24, 0x3f	; 63
    c55e:	89 83       	std	Y+1, r24	; 0x01
    c560:	f8 94       	cli
    c562:	99 81       	ldd	r25, Y+1	; 0x01
    c564:	e0 e1       	ldi	r30, 0x10	; 16
    c566:	f1 e0       	ldi	r31, 0x01	; 1
    c568:	80 81       	ld	r24, Z
    c56a:	80 68       	ori	r24, 0x80	; 128
    c56c:	80 83       	st	Z, r24
    c56e:	9f bf       	out	0x3f, r25	; 63
    c570:	78 94       	sei
    c572:	09 e0       	ldi	r16, 0x09	; 9
    c574:	15 e2       	ldi	r17, 0x25	; 37
    c576:	2b e0       	ldi	r18, 0x0B	; 11
    c578:	30 e2       	ldi	r19, 0x20	; 32
    c57a:	41 e1       	ldi	r20, 0x11	; 17
    c57c:	55 e2       	ldi	r21, 0x25	; 37
    c57e:	6d e0       	ldi	r22, 0x0D	; 13
    c580:	75 e2       	ldi	r23, 0x25	; 37
    c582:	89 ee       	ldi	r24, 0xE9	; 233
    c584:	94 e2       	ldi	r25, 0x24	; 36
    c586:	1b df       	rcall	.-458    	; 0xc3be <calc_next_frame>
    c588:	0f 90       	pop	r0
    c58a:	df 91       	pop	r29
    c58c:	cf 91       	pop	r28
    c58e:	1f 91       	pop	r17
    c590:	0f 91       	pop	r16
    c592:	08 95       	ret

0000c594 <isr_dma_dac_ch0_A>:
    c594:	0f 93       	push	r16
    c596:	1f 93       	push	r17
    c598:	cf 93       	push	r28
    c59a:	df 93       	push	r29
    c59c:	1f 92       	push	r1
    c59e:	cd b7       	in	r28, 0x3d	; 61
    c5a0:	de b7       	in	r29, 0x3e	; 62
    c5a2:	8f b7       	in	r24, 0x3f	; 63
    c5a4:	89 83       	std	Y+1, r24	; 0x01
    c5a6:	f8 94       	cli
    c5a8:	99 81       	ldd	r25, Y+1	; 0x01
    c5aa:	e0 e2       	ldi	r30, 0x20	; 32
    c5ac:	f1 e0       	ldi	r31, 0x01	; 1
    c5ae:	80 81       	ld	r24, Z
    c5b0:	80 68       	ori	r24, 0x80	; 128
    c5b2:	80 83       	st	Z, r24
    c5b4:	9f bf       	out	0x3f, r25	; 63
    c5b6:	78 94       	sei
    c5b8:	09 e0       	ldi	r16, 0x09	; 9
    c5ba:	15 e2       	ldi	r17, 0x25	; 37
    c5bc:	2b e0       	ldi	r18, 0x0B	; 11
    c5be:	30 e2       	ldi	r19, 0x20	; 32
    c5c0:	41 e1       	ldi	r20, 0x11	; 17
    c5c2:	55 e2       	ldi	r21, 0x25	; 37
    c5c4:	6d e0       	ldi	r22, 0x0D	; 13
    c5c6:	75 e2       	ldi	r23, 0x25	; 37
    c5c8:	89 ec       	ldi	r24, 0xC9	; 201
    c5ca:	94 e2       	ldi	r25, 0x24	; 36
    c5cc:	f8 de       	rcall	.-528    	; 0xc3be <calc_next_frame>
    c5ce:	0f 90       	pop	r0
    c5d0:	df 91       	pop	r29
    c5d2:	cf 91       	pop	r28
    c5d4:	1f 91       	pop	r17
    c5d6:	0f 91       	pop	r16
    c5d8:	08 95       	ret

0000c5da <adc_init>:
    c5da:	8f 92       	push	r8
    c5dc:	9f 92       	push	r9
    c5de:	af 92       	push	r10
    c5e0:	bf 92       	push	r11
    c5e2:	cf 92       	push	r12
    c5e4:	df 92       	push	r13
    c5e6:	ef 92       	push	r14
    c5e8:	ff 92       	push	r15
    c5ea:	0f 93       	push	r16
    c5ec:	1f 93       	push	r17
    c5ee:	cf 93       	push	r28
    c5f0:	df 93       	push	r29
    c5f2:	e0 e1       	ldi	r30, 0x10	; 16
    c5f4:	f6 e0       	ldi	r31, 0x06	; 6
    c5f6:	80 81       	ld	r24, Z
    c5f8:	87 60       	ori	r24, 0x07	; 7
    c5fa:	80 83       	st	Z, r24
    c5fc:	e1 e1       	ldi	r30, 0x11	; 17
    c5fe:	f6 e0       	ldi	r31, 0x06	; 6
    c600:	80 81       	ld	r24, Z
    c602:	87 60       	ori	r24, 0x07	; 7
    c604:	80 83       	st	Z, r24
    c606:	e2 e1       	ldi	r30, 0x12	; 18
    c608:	f6 e0       	ldi	r31, 0x06	; 6
    c60a:	80 81       	ld	r24, Z
    c60c:	87 60       	ori	r24, 0x07	; 7
    c60e:	80 83       	st	Z, r24
    c610:	e3 e1       	ldi	r30, 0x13	; 19
    c612:	f6 e0       	ldi	r31, 0x06	; 6
    c614:	80 81       	ld	r24, Z
    c616:	87 60       	ori	r24, 0x07	; 7
    c618:	80 83       	st	Z, r24
    c61a:	e4 e1       	ldi	r30, 0x14	; 20
    c61c:	f6 e0       	ldi	r31, 0x06	; 6
    c61e:	80 81       	ld	r24, Z
    c620:	87 60       	ori	r24, 0x07	; 7
    c622:	80 83       	st	Z, r24
    c624:	e5 e1       	ldi	r30, 0x15	; 21
    c626:	f6 e0       	ldi	r31, 0x06	; 6
    c628:	80 81       	ld	r24, Z
    c62a:	87 60       	ori	r24, 0x07	; 7
    c62c:	80 83       	st	Z, r24
    c62e:	e2 e3       	ldi	r30, 0x32	; 50
    c630:	f6 e0       	ldi	r31, 0x06	; 6
    c632:	80 81       	ld	r24, Z
    c634:	87 60       	ori	r24, 0x07	; 7
    c636:	80 83       	st	Z, r24
    c638:	e3 e3       	ldi	r30, 0x33	; 51
    c63a:	f6 e0       	ldi	r31, 0x06	; 6
    c63c:	80 81       	ld	r24, Z
    c63e:	87 60       	ori	r24, 0x07	; 7
    c640:	80 83       	st	Z, r24
    c642:	63 ef       	ldi	r22, 0xF3	; 243
    c644:	76 e2       	ldi	r23, 0x26	; 38
    c646:	80 e0       	ldi	r24, 0x00	; 0
    c648:	92 e0       	ldi	r25, 0x02	; 2
    c64a:	0e 94 9e 48 	call	0x913c	; 0x913c <adc_read_configuration>
    c64e:	4f ee       	ldi	r20, 0xEF	; 239
    c650:	56 e2       	ldi	r21, 0x26	; 38
    c652:	61 e0       	ldi	r22, 0x01	; 1
    c654:	80 e0       	ldi	r24, 0x00	; 0
    c656:	92 e0       	ldi	r25, 0x02	; 2
    c658:	0e 94 22 49 	call	0x9244	; 0x9244 <adcch_read_configuration>
    c65c:	4b ee       	ldi	r20, 0xEB	; 235
    c65e:	56 e2       	ldi	r21, 0x26	; 38
    c660:	62 e0       	ldi	r22, 0x02	; 2
    c662:	80 e0       	ldi	r24, 0x00	; 0
    c664:	92 e0       	ldi	r25, 0x02	; 2
    c666:	0e 94 22 49 	call	0x9244	; 0x9244 <adcch_read_configuration>
    c66a:	47 ee       	ldi	r20, 0xE7	; 231
    c66c:	56 e2       	ldi	r21, 0x26	; 38
    c66e:	64 e0       	ldi	r22, 0x04	; 4
    c670:	80 e0       	ldi	r24, 0x00	; 0
    c672:	92 e0       	ldi	r25, 0x02	; 2
    c674:	0e 94 22 49 	call	0x9244	; 0x9244 <adcch_read_configuration>
    c678:	43 ee       	ldi	r20, 0xE3	; 227
    c67a:	56 e2       	ldi	r21, 0x26	; 38
    c67c:	68 e0       	ldi	r22, 0x08	; 8
    c67e:	80 e0       	ldi	r24, 0x00	; 0
    c680:	92 e0       	ldi	r25, 0x02	; 2
    c682:	0e 94 22 49 	call	0x9244	; 0x9244 <adcch_read_configuration>
    c686:	6c ed       	ldi	r22, 0xDC	; 220
    c688:	76 e2       	ldi	r23, 0x26	; 38
    c68a:	80 e4       	ldi	r24, 0x40	; 64
    c68c:	92 e0       	ldi	r25, 0x02	; 2
    c68e:	0e 94 9e 48 	call	0x913c	; 0x913c <adc_read_configuration>
    c692:	48 ed       	ldi	r20, 0xD8	; 216
    c694:	56 e2       	ldi	r21, 0x26	; 38
    c696:	61 e0       	ldi	r22, 0x01	; 1
    c698:	80 e4       	ldi	r24, 0x40	; 64
    c69a:	92 e0       	ldi	r25, 0x02	; 2
    c69c:	0e 94 22 49 	call	0x9244	; 0x9244 <adcch_read_configuration>
    c6a0:	a3 ef       	ldi	r26, 0xF3	; 243
    c6a2:	b6 e2       	ldi	r27, 0x26	; 38
    c6a4:	83 e0       	ldi	r24, 0x03	; 3
    c6a6:	14 96       	adiw	r26, 0x04	; 4
    c6a8:	8c 93       	st	X, r24
    c6aa:	14 97       	sbiw	r26, 0x04	; 4
    c6ac:	ec ed       	ldi	r30, 0xDC	; 220
    c6ae:	f6 e2       	ldi	r31, 0x26	; 38
    c6b0:	87 e0       	ldi	r24, 0x07	; 7
    c6b2:	84 83       	std	Z+4, r24	; 0x04
    c6b4:	12 96       	adiw	r26, 0x02	; 2
    c6b6:	3c 91       	ld	r19, X
    c6b8:	12 97       	sbiw	r26, 0x02	; 2
    c6ba:	22 81       	ldd	r18, Z+2	; 0x02
    c6bc:	11 96       	adiw	r26, 0x01	; 1
    c6be:	9c 91       	ld	r25, X
    c6c0:	11 97       	sbiw	r26, 0x01	; 1
    c6c2:	81 81       	ldd	r24, Z+1	; 0x01
    c6c4:	0f 2e       	mov	r0, r31
    c6c6:	ff ee       	ldi	r31, 0xEF	; 239
    c6c8:	8f 2e       	mov	r8, r31
    c6ca:	f6 e2       	ldi	r31, 0x26	; 38
    c6cc:	9f 2e       	mov	r9, r31
    c6ce:	f0 2d       	mov	r31, r0
    c6d0:	41 e0       	ldi	r20, 0x01	; 1
    c6d2:	e4 01       	movw	r28, r8
    c6d4:	48 83       	st	Y, r20
    c6d6:	58 e0       	ldi	r21, 0x08	; 8
    c6d8:	59 83       	std	Y+1, r21	; 0x01
    c6da:	0f 2e       	mov	r0, r31
    c6dc:	fb ee       	ldi	r31, 0xEB	; 235
    c6de:	af 2e       	mov	r10, r31
    c6e0:	f6 e2       	ldi	r31, 0x26	; 38
    c6e2:	bf 2e       	mov	r11, r31
    c6e4:	f0 2d       	mov	r31, r0
    c6e6:	e5 01       	movw	r28, r10
    c6e8:	48 83       	st	Y, r20
    c6ea:	60 e2       	ldi	r22, 0x20	; 32
    c6ec:	69 83       	std	Y+1, r22	; 0x01
    c6ee:	0f 2e       	mov	r0, r31
    c6f0:	f7 ee       	ldi	r31, 0xE7	; 231
    c6f2:	cf 2e       	mov	r12, r31
    c6f4:	f6 e2       	ldi	r31, 0x26	; 38
    c6f6:	df 2e       	mov	r13, r31
    c6f8:	f0 2d       	mov	r31, r0
    c6fa:	e6 01       	movw	r28, r12
    c6fc:	48 83       	st	Y, r20
    c6fe:	68 e2       	ldi	r22, 0x28	; 40
    c700:	69 83       	std	Y+1, r22	; 0x01
    c702:	0f 2e       	mov	r0, r31
    c704:	f3 ee       	ldi	r31, 0xE3	; 227
    c706:	ef 2e       	mov	r14, r31
    c708:	f6 e2       	ldi	r31, 0x26	; 38
    c70a:	ff 2e       	mov	r15, r31
    c70c:	f0 2d       	mov	r31, r0
    c70e:	e7 01       	movw	r28, r14
    c710:	18 82       	st	Y, r1
    c712:	59 83       	std	Y+1, r21	; 0x01
    c714:	08 ed       	ldi	r16, 0xD8	; 216
    c716:	16 e2       	ldi	r17, 0x26	; 38
    c718:	e8 01       	movw	r28, r16
    c71a:	18 82       	st	Y, r1
    c71c:	19 82       	std	Y+1, r1	; 0x01
    c71e:	3e 78       	andi	r19, 0x8E	; 142
    c720:	32 62       	ori	r19, 0x22	; 34
    c722:	12 96       	adiw	r26, 0x02	; 2
    c724:	3c 93       	st	X, r19
    c726:	12 97       	sbiw	r26, 0x02	; 2
    c728:	2f 78       	andi	r18, 0x8F	; 143
    c72a:	23 60       	ori	r18, 0x03	; 3
    c72c:	22 83       	std	Z+2, r18	; 0x02
    c72e:	22 e0       	ldi	r18, 0x02	; 2
    c730:	e4 01       	movw	r28, r8
    c732:	2b 83       	std	Y+3, r18	; 0x03
    c734:	91 70       	andi	r25, 0x01	; 1
    c736:	90 64       	ori	r25, 0x40	; 64
    c738:	11 96       	adiw	r26, 0x01	; 1
    c73a:	9c 93       	st	X, r25
    c73c:	11 97       	sbiw	r26, 0x01	; 1
    c73e:	9c e0       	ldi	r25, 0x0C	; 12
    c740:	13 96       	adiw	r26, 0x03	; 3
    c742:	9c 93       	st	X, r25
    c744:	81 70       	andi	r24, 0x01	; 1
    c746:	80 66       	ori	r24, 0x60	; 96
    c748:	81 83       	std	Z+1, r24	; 0x01
    c74a:	43 83       	std	Z+3, r20	; 0x03
    c74c:	64 e8       	ldi	r22, 0x84	; 132
    c74e:	7c e5       	ldi	r23, 0x5C	; 92
    c750:	80 e0       	ldi	r24, 0x00	; 0
    c752:	92 e0       	ldi	r25, 0x02	; 2
    c754:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <adc_set_callback>
    c758:	6b e2       	ldi	r22, 0x2B	; 43
    c75a:	7e e5       	ldi	r23, 0x5E	; 94
    c75c:	80 e4       	ldi	r24, 0x40	; 64
    c75e:	92 e0       	ldi	r25, 0x02	; 2
    c760:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <adc_set_callback>
    c764:	f5 01       	movw	r30, r10
    c766:	32 81       	ldd	r19, Z+2	; 0x02
    c768:	e6 01       	movw	r28, r12
    c76a:	2a 81       	ldd	r18, Y+2	; 0x02
    c76c:	f7 01       	movw	r30, r14
    c76e:	92 81       	ldd	r25, Z+2	; 0x02
    c770:	e8 01       	movw	r28, r16
    c772:	8a 81       	ldd	r24, Y+2	; 0x02
    c774:	f4 01       	movw	r30, r8
    c776:	42 81       	ldd	r20, Z+2	; 0x02
    c778:	40 7f       	andi	r20, 0xF0	; 240
    c77a:	41 60       	ori	r20, 0x01	; 1
    c77c:	42 83       	std	Z+2, r20	; 0x02
    c77e:	30 7f       	andi	r19, 0xF0	; 240
    c780:	31 60       	ori	r19, 0x01	; 1
    c782:	e5 01       	movw	r28, r10
    c784:	3a 83       	std	Y+2, r19	; 0x02
    c786:	20 7f       	andi	r18, 0xF0	; 240
    c788:	21 60       	ori	r18, 0x01	; 1
    c78a:	f6 01       	movw	r30, r12
    c78c:	22 83       	std	Z+2, r18	; 0x02
    c78e:	90 7f       	andi	r25, 0xF0	; 240
    c790:	91 60       	ori	r25, 0x01	; 1
    c792:	e7 01       	movw	r28, r14
    c794:	9a 83       	std	Y+2, r25	; 0x02
    c796:	80 7f       	andi	r24, 0xF0	; 240
    c798:	81 60       	ori	r24, 0x01	; 1
    c79a:	f8 01       	movw	r30, r16
    c79c:	82 83       	std	Z+2, r24	; 0x02
    c79e:	63 ef       	ldi	r22, 0xF3	; 243
    c7a0:	76 e2       	ldi	r23, 0x26	; 38
    c7a2:	80 e0       	ldi	r24, 0x00	; 0
    c7a4:	92 e0       	ldi	r25, 0x02	; 2
    c7a6:	0e 94 34 48 	call	0x9068	; 0x9068 <adc_write_configuration>
    c7aa:	a4 01       	movw	r20, r8
    c7ac:	61 e0       	ldi	r22, 0x01	; 1
    c7ae:	80 e0       	ldi	r24, 0x00	; 0
    c7b0:	92 e0       	ldi	r25, 0x02	; 2
    c7b2:	0e 94 d7 48 	call	0x91ae	; 0x91ae <adcch_write_configuration>
    c7b6:	a5 01       	movw	r20, r10
    c7b8:	62 e0       	ldi	r22, 0x02	; 2
    c7ba:	80 e0       	ldi	r24, 0x00	; 0
    c7bc:	92 e0       	ldi	r25, 0x02	; 2
    c7be:	0e 94 d7 48 	call	0x91ae	; 0x91ae <adcch_write_configuration>
    c7c2:	a6 01       	movw	r20, r12
    c7c4:	64 e0       	ldi	r22, 0x04	; 4
    c7c6:	80 e0       	ldi	r24, 0x00	; 0
    c7c8:	92 e0       	ldi	r25, 0x02	; 2
    c7ca:	0e 94 d7 48 	call	0x91ae	; 0x91ae <adcch_write_configuration>
    c7ce:	a7 01       	movw	r20, r14
    c7d0:	68 e0       	ldi	r22, 0x08	; 8
    c7d2:	80 e0       	ldi	r24, 0x00	; 0
    c7d4:	92 e0       	ldi	r25, 0x02	; 2
    c7d6:	0e 94 d7 48 	call	0x91ae	; 0x91ae <adcch_write_configuration>
    c7da:	6c ed       	ldi	r22, 0xDC	; 220
    c7dc:	76 e2       	ldi	r23, 0x26	; 38
    c7de:	80 e4       	ldi	r24, 0x40	; 64
    c7e0:	92 e0       	ldi	r25, 0x02	; 2
    c7e2:	0e 94 34 48 	call	0x9068	; 0x9068 <adc_write_configuration>
    c7e6:	a8 01       	movw	r20, r16
    c7e8:	61 e0       	ldi	r22, 0x01	; 1
    c7ea:	80 e4       	ldi	r24, 0x40	; 64
    c7ec:	92 e0       	ldi	r25, 0x02	; 2
    c7ee:	0e 94 d7 48 	call	0x91ae	; 0x91ae <adcch_write_configuration>
    c7f2:	61 e2       	ldi	r22, 0x21	; 33
    c7f4:	70 e0       	ldi	r23, 0x00	; 0
    c7f6:	82 e0       	ldi	r24, 0x02	; 2
    c7f8:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    c7fc:	c8 2f       	mov	r28, r24
    c7fe:	d0 e0       	ldi	r29, 0x00	; 0
    c800:	dc 2f       	mov	r29, r28
    c802:	cc 27       	eor	r28, r28
    c804:	60 e2       	ldi	r22, 0x20	; 32
    c806:	70 e0       	ldi	r23, 0x00	; 0
    c808:	82 e0       	ldi	r24, 0x02	; 2
    c80a:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    c80e:	c8 2b       	or	r28, r24
    c810:	c0 93 0c 02 	sts	0x020C, r28	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    c814:	d0 93 0d 02 	sts	0x020D, r29	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    c818:	65 e2       	ldi	r22, 0x25	; 37
    c81a:	70 e0       	ldi	r23, 0x00	; 0
    c81c:	82 e0       	ldi	r24, 0x02	; 2
    c81e:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    c822:	c8 2f       	mov	r28, r24
    c824:	d0 e0       	ldi	r29, 0x00	; 0
    c826:	dc 2f       	mov	r29, r28
    c828:	cc 27       	eor	r28, r28
    c82a:	64 e2       	ldi	r22, 0x24	; 36
    c82c:	70 e0       	ldi	r23, 0x00	; 0
    c82e:	82 e0       	ldi	r24, 0x02	; 2
    c830:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
    c834:	c8 2b       	or	r28, r24
    c836:	c0 93 4c 02 	sts	0x024C, r28	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
    c83a:	d0 93 4d 02 	sts	0x024D, r29	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
    c83e:	df 91       	pop	r29
    c840:	cf 91       	pop	r28
    c842:	1f 91       	pop	r17
    c844:	0f 91       	pop	r16
    c846:	ff 90       	pop	r15
    c848:	ef 90       	pop	r14
    c84a:	df 90       	pop	r13
    c84c:	cf 90       	pop	r12
    c84e:	bf 90       	pop	r11
    c850:	af 90       	pop	r10
    c852:	9f 90       	pop	r9
    c854:	8f 90       	pop	r8
    c856:	08 95       	ret

0000c858 <myStringToVar>:
    c858:	2f 92       	push	r2
    c85a:	3f 92       	push	r3
    c85c:	4f 92       	push	r4
    c85e:	5f 92       	push	r5
    c860:	6f 92       	push	r6
    c862:	7f 92       	push	r7
    c864:	8f 92       	push	r8
    c866:	9f 92       	push	r9
    c868:	af 92       	push	r10
    c86a:	bf 92       	push	r11
    c86c:	cf 92       	push	r12
    c86e:	df 92       	push	r13
    c870:	ef 92       	push	r14
    c872:	ff 92       	push	r15
    c874:	0f 93       	push	r16
    c876:	1f 93       	push	r17
    c878:	cf 93       	push	r28
    c87a:	df 93       	push	r29
    c87c:	00 d0       	rcall	.+0      	; 0xc87e <myStringToVar+0x26>
    c87e:	1f 92       	push	r1
    c880:	cd b7       	in	r28, 0x3d	; 61
    c882:	de b7       	in	r29, 0x3e	; 62
    c884:	6c 01       	movw	r12, r24
    c886:	4a 01       	movw	r8, r20
    c888:	5b 01       	movw	r10, r22
    c88a:	29 83       	std	Y+1, r18	; 0x01
    c88c:	3a 83       	std	Y+2, r19	; 0x02
    c88e:	18 01       	movw	r2, r16
    c890:	27 01       	movw	r4, r14
    c892:	84 2f       	mov	r24, r20
    c894:	83 70       	andi	r24, 0x03	; 3
    c896:	09 f4       	brne	.+2      	; 0xc89a <myStringToVar+0x42>
    c898:	66 c0       	rjmp	.+204    	; 0xc966 <myStringToVar+0x10e>
    c89a:	1b 82       	std	Y+3, r1	; 0x03
    c89c:	1c 82       	std	Y+4, r1	; 0x04
    c89e:	61 2c       	mov	r6, r1
    c8a0:	71 2c       	mov	r7, r1
    c8a2:	eb 80       	ldd	r14, Y+3	; 0x03
    c8a4:	fc 80       	ldd	r15, Y+4	; 0x04
    c8a6:	ec 0c       	add	r14, r12
    c8a8:	fd 1c       	adc	r15, r13
    c8aa:	82 30       	cpi	r24, 0x02	; 2
    c8ac:	e1 f0       	breq	.+56     	; 0xc8e6 <myStringToVar+0x8e>
    c8ae:	83 30       	cpi	r24, 0x03	; 3
    c8b0:	69 f1       	breq	.+90     	; 0xc90c <myStringToVar+0xb4>
    c8b2:	81 30       	cpi	r24, 0x01	; 1
    c8b4:	09 f0       	breq	.+2      	; 0xc8b8 <myStringToVar+0x60>
    c8b6:	59 c0       	rjmp	.+178    	; 0xc96a <myStringToVar+0x112>
    c8b8:	29 81       	ldd	r18, Y+1	; 0x01
    c8ba:	3a 81       	ldd	r19, Y+2	; 0x02
    c8bc:	21 15       	cp	r18, r1
    c8be:	31 05       	cpc	r19, r1
    c8c0:	a9 f1       	breq	.+106    	; 0xc92c <myStringToVar+0xd4>
    c8c2:	89 01       	movw	r16, r18
    c8c4:	0c 5f       	subi	r16, 0xFC	; 252
    c8c6:	1f 4f       	sbci	r17, 0xFF	; 255
    c8c8:	c7 01       	movw	r24, r14
    c8ca:	0e 94 55 7e 	call	0xfcaa	; 0xfcaa <atof>
    c8ce:	e9 81       	ldd	r30, Y+1	; 0x01
    c8d0:	fa 81       	ldd	r31, Y+2	; 0x02
    c8d2:	60 83       	st	Z, r22
    c8d4:	71 83       	std	Z+1, r23	; 0x01
    c8d6:	82 83       	std	Z+2, r24	; 0x02
    c8d8:	93 83       	std	Z+3, r25	; 0x03
    c8da:	ff ef       	ldi	r31, 0xFF	; 255
    c8dc:	6f 1a       	sub	r6, r31
    c8de:	7f 0a       	sbc	r7, r31
    c8e0:	09 83       	std	Y+1, r16	; 0x01
    c8e2:	1a 83       	std	Y+2, r17	; 0x02
    c8e4:	23 c0       	rjmp	.+70     	; 0xc92c <myStringToVar+0xd4>
    c8e6:	21 14       	cp	r2, r1
    c8e8:	31 04       	cpc	r3, r1
    c8ea:	01 f1       	breq	.+64     	; 0xc92c <myStringToVar+0xd4>
    c8ec:	81 01       	movw	r16, r2
    c8ee:	0c 5f       	subi	r16, 0xFC	; 252
    c8f0:	1f 4f       	sbci	r17, 0xFF	; 255
    c8f2:	c7 01       	movw	r24, r14
    c8f4:	0e 94 75 7e 	call	0xfcea	; 0xfcea <atol>
    c8f8:	f1 01       	movw	r30, r2
    c8fa:	60 83       	st	Z, r22
    c8fc:	71 83       	std	Z+1, r23	; 0x01
    c8fe:	82 83       	std	Z+2, r24	; 0x02
    c900:	93 83       	std	Z+3, r25	; 0x03
    c902:	ff ef       	ldi	r31, 0xFF	; 255
    c904:	6f 1a       	sub	r6, r31
    c906:	7f 0a       	sbc	r7, r31
    c908:	18 01       	movw	r2, r16
    c90a:	10 c0       	rjmp	.+32     	; 0xc92c <myStringToVar+0xd4>
    c90c:	41 14       	cp	r4, r1
    c90e:	51 04       	cpc	r5, r1
    c910:	69 f0       	breq	.+26     	; 0xc92c <myStringToVar+0xd4>
    c912:	82 01       	movw	r16, r4
    c914:	0e 5f       	subi	r16, 0xFE	; 254
    c916:	1f 4f       	sbci	r17, 0xFF	; 255
    c918:	c7 01       	movw	r24, r14
    c91a:	0e 94 58 7e 	call	0xfcb0	; 0xfcb0 <atoi>
    c91e:	f2 01       	movw	r30, r4
    c920:	80 83       	st	Z, r24
    c922:	91 83       	std	Z+1, r25	; 0x01
    c924:	ff ef       	ldi	r31, 0xFF	; 255
    c926:	6f 1a       	sub	r6, r31
    c928:	7f 0a       	sbc	r7, r31
    c92a:	28 01       	movw	r4, r16
    c92c:	6c e2       	ldi	r22, 0x2C	; 44
    c92e:	70 e0       	ldi	r23, 0x00	; 0
    c930:	c7 01       	movw	r24, r14
    c932:	0e 94 d4 7f 	call	0xffa8	; 0xffa8 <strchr>
    c936:	00 97       	sbiw	r24, 0x00	; 0
    c938:	c1 f0       	breq	.+48     	; 0xc96a <myStringToVar+0x112>
    c93a:	01 96       	adiw	r24, 0x01	; 1
    c93c:	8e 19       	sub	r24, r14
    c93e:	9f 09       	sbc	r25, r15
    c940:	2b 81       	ldd	r18, Y+3	; 0x03
    c942:	3c 81       	ldd	r19, Y+4	; 0x04
    c944:	28 0f       	add	r18, r24
    c946:	39 1f       	adc	r19, r25
    c948:	2b 83       	std	Y+3, r18	; 0x03
    c94a:	3c 83       	std	Y+4, r19	; 0x04
    c94c:	b6 94       	lsr	r11
    c94e:	a7 94       	ror	r10
    c950:	97 94       	ror	r9
    c952:	87 94       	ror	r8
    c954:	b6 94       	lsr	r11
    c956:	a7 94       	ror	r10
    c958:	97 94       	ror	r9
    c95a:	87 94       	ror	r8
    c95c:	88 2d       	mov	r24, r8
    c95e:	83 70       	andi	r24, 0x03	; 3
    c960:	09 f0       	breq	.+2      	; 0xc964 <myStringToVar+0x10c>
    c962:	9f cf       	rjmp	.-194    	; 0xc8a2 <myStringToVar+0x4a>
    c964:	02 c0       	rjmp	.+4      	; 0xc96a <myStringToVar+0x112>
    c966:	61 2c       	mov	r6, r1
    c968:	71 2c       	mov	r7, r1
    c96a:	c3 01       	movw	r24, r6
    c96c:	24 96       	adiw	r28, 0x04	; 4
    c96e:	cd bf       	out	0x3d, r28	; 61
    c970:	de bf       	out	0x3e, r29	; 62
    c972:	df 91       	pop	r29
    c974:	cf 91       	pop	r28
    c976:	1f 91       	pop	r17
    c978:	0f 91       	pop	r16
    c97a:	ff 90       	pop	r15
    c97c:	ef 90       	pop	r14
    c97e:	df 90       	pop	r13
    c980:	cf 90       	pop	r12
    c982:	bf 90       	pop	r11
    c984:	af 90       	pop	r10
    c986:	9f 90       	pop	r9
    c988:	8f 90       	pop	r8
    c98a:	7f 90       	pop	r7
    c98c:	6f 90       	pop	r6
    c98e:	5f 90       	pop	r5
    c990:	4f 90       	pop	r4
    c992:	3f 90       	pop	r3
    c994:	2f 90       	pop	r2
    c996:	08 95       	ret

0000c998 <adc_app_enable>:
    c998:	cf 93       	push	r28
    c99a:	90 91 64 20 	lds	r25, 0x2064	; 0x802064 <g_adc_enabled>
    c99e:	98 17       	cp	r25, r24
    c9a0:	e1 f0       	breq	.+56     	; 0xc9da <adc_app_enable+0x42>
    c9a2:	c8 2f       	mov	r28, r24
    c9a4:	88 23       	and	r24, r24
    c9a6:	61 f0       	breq	.+24     	; 0xc9c0 <adc_app_enable+0x28>
    c9a8:	fb db       	rcall	.-2058   	; 0xc1a0 <tc_init>
    c9aa:	17 de       	rcall	.-978    	; 0xc5da <adc_init>
    c9ac:	69 dc       	rcall	.-1838   	; 0xc280 <tc_start>
    c9ae:	80 e0       	ldi	r24, 0x00	; 0
    c9b0:	92 e0       	ldi	r25, 0x02	; 2
    c9b2:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <adc_enable>
    c9b6:	80 e4       	ldi	r24, 0x40	; 64
    c9b8:	92 e0       	ldi	r25, 0x02	; 2
    c9ba:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <adc_enable>
    c9be:	08 c0       	rjmp	.+16     	; 0xc9d0 <adc_app_enable+0x38>
    c9c0:	80 e0       	ldi	r24, 0x00	; 0
    c9c2:	92 e0       	ldi	r25, 0x02	; 2
    c9c4:	0e 94 7e 46 	call	0x8cfc	; 0x8cfc <adc_disable>
    c9c8:	80 e4       	ldi	r24, 0x40	; 64
    c9ca:	92 e0       	ldi	r25, 0x02	; 2
    c9cc:	0e 94 7e 46 	call	0x8cfc	; 0x8cfc <adc_disable>
    c9d0:	c0 93 64 20 	sts	0x2064, r28	; 0x802064 <g_adc_enabled>
    c9d4:	81 e0       	ldi	r24, 0x01	; 1
    c9d6:	80 93 fa 26 	sts	0x26FA, r24	; 0x8026fa <g_twi2_lcd_repaint>
    c9da:	cf 91       	pop	r28
    c9dc:	08 95       	ret

0000c9de <backlight_mode_pwm>:
    c9de:	80 93 62 20 	sts	0x2062, r24	; 0x802062 <g_backlight_mode_pwm>
    c9e2:	90 93 63 20 	sts	0x2063, r25	; 0x802063 <g_backlight_mode_pwm+0x1>
    c9e6:	8e 3f       	cpi	r24, 0xFE	; 254
    c9e8:	2f ef       	ldi	r18, 0xFF	; 255
    c9ea:	92 07       	cpc	r25, r18
    c9ec:	69 f0       	breq	.+26     	; 0xca08 <backlight_mode_pwm+0x2a>
    c9ee:	bc 01       	movw	r22, r24
    c9f0:	6f 3f       	cpi	r22, 0xFF	; 255
    c9f2:	8f ef       	ldi	r24, 0xFF	; 255
    c9f4:	78 07       	cpc	r23, r24
    c9f6:	29 f4       	brne	.+10     	; 0xca02 <backlight_mode_pwm+0x24>
    c9f8:	60 e0       	ldi	r22, 0x00	; 0
    c9fa:	81 e0       	ldi	r24, 0x01	; 1
    c9fc:	0c 94 07 33 	jmp	0x660e	; 0x660e <twi2_set_ledbl>
    ca00:	08 95       	ret
    ca02:	80 e0       	ldi	r24, 0x00	; 0
    ca04:	0c 94 07 33 	jmp	0x660e	; 0x660e <twi2_set_ledbl>
    ca08:	08 95       	ret

0000ca0a <bias_update>:
    ca0a:	8f 73       	andi	r24, 0x3F	; 63
    ca0c:	80 93 61 20 	sts	0x2061, r24	; 0x802061 <g_bias_pm>
    ca10:	0c 94 27 33 	jmp	0x664e	; 0x664e <twi2_set_bias>
    ca14:	08 95       	ret

0000ca16 <dac_app_enable>:
    ca16:	1f 93       	push	r17
    ca18:	cf 93       	push	r28
    ca1a:	df 93       	push	r29
    ca1c:	1f 92       	push	r1
    ca1e:	cd b7       	in	r28, 0x3d	; 61
    ca20:	de b7       	in	r29, 0x3e	; 62
    ca22:	90 91 89 28 	lds	r25, 0x2889	; 0x802889 <g_dac_enabled>
    ca26:	98 17       	cp	r25, r24
    ca28:	09 f4       	brne	.+2      	; 0xca2c <dac_app_enable+0x16>
    ca2a:	40 c0       	rjmp	.+128    	; 0xcaac <dac_app_enable+0x96>
    ca2c:	18 2f       	mov	r17, r24
    ca2e:	88 23       	and	r24, r24
    ca30:	a9 f1       	breq	.+106    	; 0xca9c <dac_app_enable+0x86>
    ca32:	8f b7       	in	r24, 0x3f	; 63
    ca34:	89 83       	std	Y+1, r24	; 0x01
    ca36:	f8 94       	cli
    ca38:	89 81       	ldd	r24, Y+1	; 0x01
    ca3a:	40 e8       	ldi	r20, 0x80	; 128
    ca3c:	54 e8       	ldi	r21, 0x84	; 132
    ca3e:	6e e1       	ldi	r22, 0x1E	; 30
    ca40:	70 e0       	ldi	r23, 0x00	; 0
    ca42:	40 93 13 20 	sts	0x2013, r20	; 0x802013 <dds0_freq_mHz>
    ca46:	50 93 14 20 	sts	0x2014, r21	; 0x802014 <dds0_freq_mHz+0x1>
    ca4a:	60 93 15 20 	sts	0x2015, r22	; 0x802015 <dds0_freq_mHz+0x2>
    ca4e:	70 93 16 20 	sts	0x2016, r23	; 0x802016 <dds0_freq_mHz+0x3>
    ca52:	10 92 0d 25 	sts	0x250D, r1	; 0x80250d <dds0_reg>
    ca56:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <dds0_reg+0x1>
    ca5a:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <dds0_reg+0x2>
    ca5e:	10 92 10 25 	sts	0x2510, r1	; 0x802510 <dds0_reg+0x3>
    ca62:	4a e0       	ldi	r20, 0x0A	; 10
    ca64:	59 e0       	ldi	r21, 0x09	; 9
    ca66:	6d e3       	ldi	r22, 0x3D	; 61
    ca68:	70 e0       	ldi	r23, 0x00	; 0
    ca6a:	40 93 0f 20 	sts	0x200F, r20	; 0x80200f <dds1_freq_mHz>
    ca6e:	50 93 10 20 	sts	0x2010, r21	; 0x802010 <dds1_freq_mHz+0x1>
    ca72:	60 93 11 20 	sts	0x2011, r22	; 0x802011 <dds1_freq_mHz+0x2>
    ca76:	70 93 12 20 	sts	0x2012, r23	; 0x802012 <dds1_freq_mHz+0x3>
    ca7a:	40 e0       	ldi	r20, 0x00	; 0
    ca7c:	50 e0       	ldi	r21, 0x00	; 0
    ca7e:	60 e0       	ldi	r22, 0x00	; 0
    ca80:	70 e4       	ldi	r23, 0x40	; 64
    ca82:	40 93 0b 20 	sts	0x200B, r20	; 0x80200b <dds1_reg>
    ca86:	50 93 0c 20 	sts	0x200C, r21	; 0x80200c <dds1_reg+0x1>
    ca8a:	60 93 0d 20 	sts	0x200D, r22	; 0x80200d <dds1_reg+0x2>
    ca8e:	70 93 0e 20 	sts	0x200E, r23	; 0x80200e <dds1_reg+0x3>
    ca92:	8f bf       	out	0x3f, r24	; 63
    ca94:	24 dc       	rcall	.-1976   	; 0xc2de <dac_init>
    ca96:	f4 db       	rcall	.-2072   	; 0xc280 <tc_start>
    ca98:	eb dc       	rcall	.-1578   	; 0xc470 <dac_start>
    ca9a:	06 c0       	rjmp	.+12     	; 0xcaa8 <dac_app_enable+0x92>
    ca9c:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <dma_disable>
    caa0:	80 e2       	ldi	r24, 0x20	; 32
    caa2:	93 e0       	ldi	r25, 0x03	; 3
    caa4:	0e 94 b8 49 	call	0x9370	; 0x9370 <dac_disable>
    caa8:	10 93 89 28 	sts	0x2889, r17	; 0x802889 <g_dac_enabled>
    caac:	0f 90       	pop	r0
    caae:	df 91       	pop	r29
    cab0:	cf 91       	pop	r28
    cab2:	1f 91       	pop	r17
    cab4:	08 95       	ret

0000cab6 <errorBeep_enable>:
    cab6:	80 93 5f 20 	sts	0x205F, r24	; 0x80205f <g_errorBeep_enable>
    caba:	08 95       	ret

0000cabc <printStatusLines_enable>:
    cabc:	80 93 73 28 	sts	0x2873, r24	; 0x802873 <g_usb_cdc_printStatusLines>
    cac0:	08 95       	ret

0000cac2 <keyBeep_enable>:
    cac2:	80 93 88 28 	sts	0x2888, r24	; 0x802888 <g_keyBeep_enable>
    cac6:	08 95       	ret

0000cac8 <pitchTone_mode>:
    cac8:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <g_pitch_tone_mode>
    cacc:	08 95       	ret

0000cace <sched_getLock>:


/* Simple scheduler concept */

bool sched_getLock(volatile uint8_t* lockVar)
{
    cace:	cf 93       	push	r28
    cad0:	df 93       	push	r29
    cad2:	1f 92       	push	r1
    cad4:	cd b7       	in	r28, 0x3d	; 61
    cad6:	de b7       	in	r29, 0x3e	; 62
    cad8:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    cada:	8f b7       	in	r24, 0x3f	; 63
    cadc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    cade:	f8 94       	cli
	return flags;
    cae0:	99 81       	ldd	r25, Y+1	; 0x01

	/* IRQ secured access */	
	{
		irqflags_t flags = cpu_irq_save();
		barrier();
		if (!*lockVar) {	// No use before
    cae2:	80 81       	ld	r24, Z
    cae4:	81 11       	cpse	r24, r1
    cae6:	05 c0       	rjmp	.+10     	; 0xcaf2 <sched_getLock+0x24>
			++*lockVar;
    cae8:	80 81       	ld	r24, Z
    caea:	8f 5f       	subi	r24, 0xFF	; 255
    caec:	80 83       	st	Z, r24
			barrier();
			status = true;
    caee:	81 e0       	ldi	r24, 0x01	; 1
    caf0:	01 c0       	rjmp	.+2      	; 0xcaf4 <sched_getLock+0x26>

/* Simple scheduler concept */

bool sched_getLock(volatile uint8_t* lockVar)
{
	bool status = false;
    caf2:	80 e0       	ldi	r24, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    caf4:	9f bf       	out	0x3f, r25	; 63
			status = true;
		}
		cpu_irq_restore(flags);
	}
	return status;
}
    caf6:	0f 90       	pop	r0
    caf8:	df 91       	pop	r29
    cafa:	cf 91       	pop	r28
    cafc:	08 95       	ret

0000cafe <sched_freeLock>:
    cafe:	cf 93       	push	r28
    cb00:	df 93       	push	r29
    cb02:	1f 92       	push	r1
    cb04:	cd b7       	in	r28, 0x3d	; 61
    cb06:	de b7       	in	r29, 0x3e	; 62
    cb08:	fc 01       	movw	r30, r24
    cb0a:	8f b7       	in	r24, 0x3f	; 63
    cb0c:	89 83       	std	Y+1, r24	; 0x01
    cb0e:	f8 94       	cli
    cb10:	99 81       	ldd	r25, Y+1	; 0x01
    cb12:	10 82       	st	Z, r1
    cb14:	9f bf       	out	0x3f, r25	; 63
    cb16:	0f 90       	pop	r0
    cb18:	df 91       	pop	r29
    cb1a:	cf 91       	pop	r28
    cb1c:	08 95       	ret

0000cb1e <sched_doSleep>:
    cb1e:	f8 94       	cli
    cb20:	80 91 67 2e 	lds	r24, 0x2E67	; 0x802e67 <sleepmgr_locks>
    cb24:	81 11       	cpse	r24, r1
    cb26:	09 c0       	rjmp	.+18     	; 0xcb3a <sched_doSleep+0x1c>
    cb28:	a8 e6       	ldi	r26, 0x68	; 104
    cb2a:	be e2       	ldi	r27, 0x2E	; 46
    cb2c:	e0 e0       	ldi	r30, 0x00	; 0
    cb2e:	ef 5f       	subi	r30, 0xFF	; 255
    cb30:	8d 91       	ld	r24, X+
    cb32:	88 23       	and	r24, r24
    cb34:	e1 f3       	breq	.-8      	; 0xcb2e <sched_doSleep+0x10>
    cb36:	e1 11       	cpse	r30, r1
    cb38:	02 c0       	rjmp	.+4      	; 0xcb3e <sched_doSleep+0x20>
    cb3a:	78 94       	sei
    cb3c:	08 95       	ret
    cb3e:	a8 e4       	ldi	r26, 0x48	; 72
    cb40:	b0 e0       	ldi	r27, 0x00	; 0
    cb42:	8c 91       	ld	r24, X
    cb44:	f0 e0       	ldi	r31, 0x00	; 0
    cb46:	ec 59       	subi	r30, 0x9C	; 156
    cb48:	ff 4d       	sbci	r31, 0xDF	; 223
    cb4a:	81 7f       	andi	r24, 0xF1	; 241
    cb4c:	90 81       	ld	r25, Z
    cb4e:	89 2b       	or	r24, r25
    cb50:	8c 93       	st	X, r24
    cb52:	8c 91       	ld	r24, X
    cb54:	81 60       	ori	r24, 0x01	; 1
    cb56:	8c 93       	st	X, r24
    cb58:	78 94       	sei
    cb5a:	88 95       	sleep
    cb5c:	8c 91       	ld	r24, X
    cb5e:	8e 7f       	andi	r24, 0xFE	; 254
    cb60:	8c 93       	st	X, r24
    cb62:	08 95       	ret

0000cb64 <sched_push>:
    cb64:	2f 92       	push	r2
    cb66:	3f 92       	push	r3
    cb68:	4f 92       	push	r4
    cb6a:	5f 92       	push	r5
    cb6c:	6f 92       	push	r6
    cb6e:	7f 92       	push	r7
    cb70:	8f 92       	push	r8
    cb72:	9f 92       	push	r9
    cb74:	af 92       	push	r10
    cb76:	bf 92       	push	r11
    cb78:	cf 92       	push	r12
    cb7a:	ef 92       	push	r14
    cb7c:	ff 92       	push	r15
    cb7e:	0f 93       	push	r16
    cb80:	1f 93       	push	r17
    cb82:	cf 93       	push	r28
    cb84:	df 93       	push	r29
    cb86:	cd b7       	in	r28, 0x3d	; 61
    cb88:	de b7       	in	r29, 0x3e	; 62
    cb8a:	2b 97       	sbiw	r28, 0x0b	; 11
    cb8c:	cd bf       	out	0x3d, r28	; 61
    cb8e:	de bf       	out	0x3e, r29	; 62
    cb90:	3c 01       	movw	r6, r24
    cb92:	16 2f       	mov	r17, r22
    cb94:	49 01       	movw	r8, r18
    cb96:	5a 01       	movw	r10, r20
    cb98:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <rtc_get_time>
    cb9c:	6c 83       	std	Y+4, r22	; 0x04
    cb9e:	7d 83       	std	Y+5, r23	; 0x05
    cba0:	8e 83       	std	Y+6, r24	; 0x06
    cba2:	9f 83       	std	Y+7, r25	; 0x07
    cba4:	e1 10       	cpse	r14, r1
    cba6:	08 c0       	rjmp	.+16     	; 0xcbb8 <sched_push+0x54>
    cba8:	0f 2e       	mov	r0, r31
    cbaa:	21 2c       	mov	r2, r1
    cbac:	31 2c       	mov	r3, r1
    cbae:	f0 ef       	ldi	r31, 0xF0	; 240
    cbb0:	4f 2e       	mov	r4, r31
    cbb2:	51 2c       	mov	r5, r1
    cbb4:	f0 2d       	mov	r31, r0
    cbb6:	07 c0       	rjmp	.+14     	; 0xcbc6 <sched_push+0x62>
    cbb8:	0f 2e       	mov	r0, r31
    cbba:	21 2c       	mov	r2, r1
    cbbc:	31 2c       	mov	r3, r1
    cbbe:	41 2c       	mov	r4, r1
    cbc0:	ff e8       	ldi	r31, 0x8F	; 143
    cbc2:	5f 2e       	mov	r5, r31
    cbc4:	f0 2d       	mov	r31, r0
    cbc6:	c1 10       	cpse	r12, r1
    cbc8:	05 c0       	rjmp	.+10     	; 0xcbd4 <sched_push+0x70>
    cbca:	18 86       	std	Y+8, r1	; 0x08
    cbcc:	19 86       	std	Y+9, r1	; 0x09
    cbce:	1a 86       	std	Y+10, r1	; 0x0a
    cbd0:	1b 86       	std	Y+11, r1	; 0x0b
    cbd2:	08 c0       	rjmp	.+16     	; 0xcbe4 <sched_push+0x80>
    cbd4:	80 e0       	ldi	r24, 0x00	; 0
    cbd6:	90 e0       	ldi	r25, 0x00	; 0
    cbd8:	a0 e0       	ldi	r26, 0x00	; 0
    cbda:	b0 e4       	ldi	r27, 0x40	; 64
    cbdc:	88 87       	std	Y+8, r24	; 0x08
    cbde:	99 87       	std	Y+9, r25	; 0x09
    cbe0:	aa 87       	std	Y+10, r26	; 0x0a
    cbe2:	bb 87       	std	Y+11, r27	; 0x0b
    cbe4:	00 23       	and	r16, r16
    cbe6:	09 f4       	brne	.+2      	; 0xcbea <sched_push+0x86>
    cbe8:	13 c2       	rjmp	.+1062   	; 0xd010 <sched_push+0x4ac>
    cbea:	92 e0       	ldi	r25, 0x02	; 2
    cbec:	89 16       	cp	r8, r25
    cbee:	91 04       	cpc	r9, r1
    cbf0:	a1 04       	cpc	r10, r1
    cbf2:	b1 04       	cpc	r11, r1
    cbf4:	c8 f0       	brcs	.+50     	; 0xcc28 <sched_push+0xc4>
    cbf6:	a1 e3       	ldi	r26, 0x31	; 49
    cbf8:	8a 16       	cp	r8, r26
    cbfa:	a5 e7       	ldi	r26, 0x75	; 117
    cbfc:	9a 06       	cpc	r9, r26
    cbfe:	a1 04       	cpc	r10, r1
    cc00:	b1 04       	cpc	r11, r1
    cc02:	b8 f4       	brcc	.+46     	; 0xcc32 <sched_push+0xce>
    cc04:	c5 01       	movw	r24, r10
    cc06:	b4 01       	movw	r22, r8
    cc08:	05 2e       	mov	r0, r21
    cc0a:	5a e0       	ldi	r21, 0x0A	; 10
    cc0c:	66 0f       	add	r22, r22
    cc0e:	77 1f       	adc	r23, r23
    cc10:	88 1f       	adc	r24, r24
    cc12:	99 1f       	adc	r25, r25
    cc14:	5a 95       	dec	r21
    cc16:	d1 f7       	brne	.-12     	; 0xcc0c <sched_push+0xa8>
    cc18:	50 2d       	mov	r21, r0
    cc1a:	28 ee       	ldi	r18, 0xE8	; 232
    cc1c:	33 e0       	ldi	r19, 0x03	; 3
    cc1e:	40 e0       	ldi	r20, 0x00	; 0
    cc20:	50 e0       	ldi	r21, 0x00	; 0
    cc22:	0e 94 7a 7c 	call	0xf8f4	; 0xf8f4 <__udivmodsi4>
    cc26:	09 c0       	rjmp	.+18     	; 0xcc3a <sched_push+0xd6>
    cc28:	22 e0       	ldi	r18, 0x02	; 2
    cc2a:	30 e0       	ldi	r19, 0x00	; 0
    cc2c:	40 e0       	ldi	r20, 0x00	; 0
    cc2e:	50 e0       	ldi	r21, 0x00	; 0
    cc30:	04 c0       	rjmp	.+8      	; 0xcc3a <sched_push+0xd6>
    cc32:	21 e3       	ldi	r18, 0x31	; 49
    cc34:	30 e0       	ldi	r19, 0x00	; 0
    cc36:	40 e0       	ldi	r20, 0x00	; 0
    cc38:	50 e0       	ldi	r21, 0x00	; 0
    cc3a:	8c 80       	ldd	r8, Y+4	; 0x04
    cc3c:	9d 80       	ldd	r9, Y+5	; 0x05
    cc3e:	ae 80       	ldd	r10, Y+6	; 0x06
    cc40:	bf 80       	ldd	r11, Y+7	; 0x07
    cc42:	82 0e       	add	r8, r18
    cc44:	93 1e       	adc	r9, r19
    cc46:	a4 1e       	adc	r10, r20
    cc48:	b5 1e       	adc	r11, r21
    cc4a:	e2 c1       	rjmp	.+964    	; 0xd010 <sched_push+0x4ac>
    cc4c:	e1 ee       	ldi	r30, 0xE1	; 225
    cc4e:	fd e2       	ldi	r31, 0x2D	; 45
    cc50:	83 81       	ldd	r24, Z+3	; 0x03
    cc52:	92 81       	ldd	r25, Z+2	; 0x02
    cc54:	89 1b       	sub	r24, r25
    cc56:	98 2f       	mov	r25, r24
    cc58:	85 81       	ldd	r24, Z+5	; 0x05
    cc5a:	89 23       	and	r24, r25
    cc5c:	94 81       	ldd	r25, Z+4	; 0x04
    cc5e:	89 17       	cp	r24, r25
    cc60:	09 f4       	brne	.+2      	; 0xcc64 <sched_push+0x100>
    cc62:	dd c1       	rjmp	.+954    	; 0xd01e <sched_push+0x4ba>
    cc64:	8f b7       	in	r24, 0x3f	; 63
    cc66:	8b 83       	std	Y+3, r24	; 0x03
    cc68:	f8 94       	cli
    cc6a:	8b 81       	ldd	r24, Y+3	; 0x03
    cc6c:	93 81       	ldd	r25, Z+3	; 0x03
    cc6e:	32 81       	ldd	r19, Z+2	; 0x02
    cc70:	25 81       	ldd	r18, Z+5	; 0x05
    cc72:	93 1b       	sub	r25, r19
    cc74:	92 23       	and	r25, r18
    cc76:	34 81       	ldd	r19, Z+4	; 0x04
    cc78:	93 17       	cp	r25, r19
    cc7a:	99 f0       	breq	.+38     	; 0xcca2 <sched_push+0x13e>
    cc7c:	93 81       	ldd	r25, Z+3	; 0x03
    cc7e:	26 95       	lsr	r18
    cc80:	29 23       	and	r18, r25
    cc82:	a0 81       	ld	r26, Z
    cc84:	b1 81       	ldd	r27, Z+1	; 0x01
    cc86:	04 e0       	ldi	r16, 0x04	; 4
    cc88:	20 9f       	mul	r18, r16
    cc8a:	a0 0d       	add	r26, r0
    cc8c:	b1 1d       	adc	r27, r1
    cc8e:	11 24       	eor	r1, r1
    cc90:	8d 92       	st	X+, r8
    cc92:	9d 92       	st	X+, r9
    cc94:	ad 92       	st	X+, r10
    cc96:	bc 92       	st	X, r11
    cc98:	13 97       	sbiw	r26, 0x03	; 3
    cc9a:	9f 5f       	subi	r25, 0xFF	; 255
    cc9c:	25 81       	ldd	r18, Z+5	; 0x05
    cc9e:	92 23       	and	r25, r18
    cca0:	93 83       	std	Z+3, r25	; 0x03
    cca2:	e1 ee       	ldi	r30, 0xE1	; 225
    cca4:	fd e2       	ldi	r31, 0x2D	; 45
    cca6:	93 81       	ldd	r25, Z+3	; 0x03
    cca8:	32 81       	ldd	r19, Z+2	; 0x02
    ccaa:	25 81       	ldd	r18, Z+5	; 0x05
    ccac:	93 1b       	sub	r25, r19
    ccae:	92 23       	and	r25, r18
    ccb0:	34 81       	ldd	r19, Z+4	; 0x04
    ccb2:	93 17       	cp	r25, r19
    ccb4:	19 f1       	breq	.+70     	; 0xccfc <sched_push+0x198>
    ccb6:	93 81       	ldd	r25, Z+3	; 0x03
    ccb8:	26 95       	lsr	r18
    ccba:	29 23       	and	r18, r25
    ccbc:	a0 81       	ld	r26, Z
    ccbe:	b1 81       	ldd	r27, Z+1	; 0x01
    ccc0:	34 e0       	ldi	r19, 0x04	; 4
    ccc2:	23 9f       	mul	r18, r19
    ccc4:	a0 0d       	add	r26, r0
    ccc6:	b1 1d       	adc	r27, r1
    ccc8:	11 24       	eor	r1, r1
    ccca:	a3 01       	movw	r20, r6
    cccc:	60 e0       	ldi	r22, 0x00	; 0
    ccce:	70 e0       	ldi	r23, 0x00	; 0
    ccd0:	71 2b       	or	r23, r17
    ccd2:	42 29       	or	r20, r2
    ccd4:	53 29       	or	r21, r3
    ccd6:	64 29       	or	r22, r4
    ccd8:	75 29       	or	r23, r5
    ccda:	08 85       	ldd	r16, Y+8	; 0x08
    ccdc:	19 85       	ldd	r17, Y+9	; 0x09
    ccde:	2a 85       	ldd	r18, Y+10	; 0x0a
    cce0:	3b 85       	ldd	r19, Y+11	; 0x0b
    cce2:	40 2b       	or	r20, r16
    cce4:	51 2b       	or	r21, r17
    cce6:	62 2b       	or	r22, r18
    cce8:	73 2b       	or	r23, r19
    ccea:	4d 93       	st	X+, r20
    ccec:	5d 93       	st	X+, r21
    ccee:	6d 93       	st	X+, r22
    ccf0:	7c 93       	st	X, r23
    ccf2:	13 97       	sbiw	r26, 0x03	; 3
    ccf4:	9f 5f       	subi	r25, 0xFF	; 255
    ccf6:	25 81       	ldd	r18, Z+5	; 0x05
    ccf8:	92 23       	and	r25, r18
    ccfa:	93 83       	std	Z+3, r25	; 0x03
    ccfc:	8f bf       	out	0x3f, r24	; 63
    ccfe:	8f c1       	rjmp	.+798    	; 0xd01e <sched_push+0x4ba>
    cd00:	81 e0       	ldi	r24, 0x01	; 1
    cd02:	90 e0       	ldi	r25, 0x00	; 0
    cd04:	fc 01       	movw	r30, r24
    cd06:	ee 0f       	add	r30, r30
    cd08:	ff 1f       	adc	r31, r31
    cd0a:	ee 0f       	add	r30, r30
    cd0c:	ff 1f       	adc	r31, r31
    cd0e:	ee 0f       	add	r30, r30
    cd10:	ff 1f       	adc	r31, r31
    cd12:	e8 1b       	sub	r30, r24
    cd14:	f9 0b       	sbc	r31, r25
    cd16:	eb 55       	subi	r30, 0x5B	; 91
    cd18:	fa 4d       	sbci	r31, 0xDA	; 218
    cd1a:	20 81       	ld	r18, Z
    cd1c:	20 fd       	sbrc	r18, 0
    cd1e:	32 c0       	rjmp	.+100    	; 0xcd84 <sched_push+0x220>
    cd20:	dc 01       	movw	r26, r24
    cd22:	aa 0f       	add	r26, r26
    cd24:	bb 1f       	adc	r27, r27
    cd26:	aa 0f       	add	r26, r26
    cd28:	bb 1f       	adc	r27, r27
    cd2a:	aa 0f       	add	r26, r26
    cd2c:	bb 1f       	adc	r27, r27
    cd2e:	a8 1b       	sub	r26, r24
    cd30:	b9 0b       	sbc	r27, r25
    cd32:	fd 01       	movw	r30, r26
    cd34:	eb 55       	subi	r30, 0x5B	; 91
    cd36:	fa 4d       	sbci	r31, 0xDA	; 218
    cd38:	90 81       	ld	r25, Z
    cd3a:	91 60       	ori	r25, 0x01	; 1
    cd3c:	90 83       	st	Z, r25
    cd3e:	a1 56       	subi	r26, 0x61	; 97
    cd40:	ba 4d       	sbci	r27, 0xDA	; 218
    cd42:	14 96       	adiw	r26, 0x04	; 4
    cd44:	6d 92       	st	X+, r6
    cd46:	7c 92       	st	X, r7
    cd48:	15 97       	sbiw	r26, 0x05	; 5
    cd4a:	13 70       	andi	r17, 0x03	; 3
    cd4c:	11 0f       	add	r17, r17
    cd4e:	11 0f       	add	r17, r17
    cd50:	11 0f       	add	r17, r17
    cd52:	90 81       	ld	r25, Z
    cd54:	97 7e       	andi	r25, 0xE7	; 231
    cd56:	91 2b       	or	r25, r17
    cd58:	90 83       	st	Z, r25
    cd5a:	90 81       	ld	r25, Z
    cd5c:	e0 fa       	bst	r14, 0
    cd5e:	91 f9       	bld	r25, 1
    cd60:	90 83       	st	Z, r25
    cd62:	90 81       	ld	r25, Z
    cd64:	c0 fa       	bst	r12, 0
    cd66:	92 f9       	bld	r25, 2
    cd68:	90 83       	st	Z, r25
    cd6a:	8d 92       	st	X+, r8
    cd6c:	9d 92       	st	X+, r9
    cd6e:	ad 92       	st	X+, r10
    cd70:	bc 92       	st	X, r11
    cd72:	13 97       	sbiw	r26, 0x03	; 3
    cd74:	8f 5f       	subi	r24, 0xFF	; 255
    cd76:	e0 91 7f 25 	lds	r30, 0x257F	; 0x80257f <g_sched_sort>
    cd7a:	ee 23       	and	r30, r30
    cd7c:	a1 f0       	breq	.+40     	; 0xcda6 <sched_push+0x242>
    cd7e:	20 e0       	ldi	r18, 0x00	; 0
    cd80:	30 e0       	ldi	r19, 0x00	; 0
    cd82:	18 c0       	rjmp	.+48     	; 0xcdb4 <sched_push+0x250>
    cd84:	01 96       	adiw	r24, 0x01	; 1
    cd86:	80 32       	cpi	r24, 0x20	; 32
    cd88:	91 05       	cpc	r25, r1
    cd8a:	09 f0       	breq	.+2      	; 0xcd8e <sched_push+0x22a>
    cd8c:	bb cf       	rjmp	.-138    	; 0xcd04 <sched_push+0x1a0>
    cd8e:	1c 82       	std	Y+4, r1	; 0x04
    cd90:	1d 82       	std	Y+5, r1	; 0x05
    cd92:	1e 82       	std	Y+6, r1	; 0x06
    cd94:	1f 82       	std	Y+7, r1	; 0x07
    cd96:	62 c0       	rjmp	.+196    	; 0xce5c <sched_push+0x2f8>
    cd98:	f9 01       	movw	r30, r18
    cd9a:	e1 58       	subi	r30, 0x81	; 129
    cd9c:	fa 4d       	sbci	r31, 0xDA	; 218
    cd9e:	e0 81       	ld	r30, Z
    cda0:	e1 11       	cpse	r30, r1
    cda2:	08 c0       	rjmp	.+16     	; 0xcdb4 <sched_push+0x250>
    cda4:	02 c0       	rjmp	.+4      	; 0xcdaa <sched_push+0x246>
    cda6:	20 e0       	ldi	r18, 0x00	; 0
    cda8:	30 e0       	ldi	r19, 0x00	; 0
    cdaa:	f9 01       	movw	r30, r18
    cdac:	e1 58       	subi	r30, 0x81	; 129
    cdae:	fa 4d       	sbci	r31, 0xDA	; 218
    cdb0:	80 83       	st	Z, r24
    cdb2:	3d c0       	rjmp	.+122    	; 0xce2e <sched_push+0x2ca>
    cdb4:	e1 50       	subi	r30, 0x01	; 1
    cdb6:	4e 2f       	mov	r20, r30
    cdb8:	50 e0       	ldi	r21, 0x00	; 0
    cdba:	17 e0       	ldi	r17, 0x07	; 7
    cdbc:	e1 9f       	mul	r30, r17
    cdbe:	f0 01       	movw	r30, r0
    cdc0:	11 24       	eor	r1, r1
    cdc2:	eb 55       	subi	r30, 0x5B	; 91
    cdc4:	fa 4d       	sbci	r31, 0xDA	; 218
    cdc6:	90 81       	ld	r25, Z
    cdc8:	90 ff       	sbrs	r25, 0
    cdca:	2b c0       	rjmp	.+86     	; 0xce22 <sched_push+0x2be>
    cdcc:	fa 01       	movw	r30, r20
    cdce:	ee 0f       	add	r30, r30
    cdd0:	ff 1f       	adc	r31, r31
    cdd2:	ee 0f       	add	r30, r30
    cdd4:	ff 1f       	adc	r31, r31
    cdd6:	ee 0f       	add	r30, r30
    cdd8:	ff 1f       	adc	r31, r31
    cdda:	e4 1b       	sub	r30, r20
    cddc:	f5 0b       	sbc	r31, r21
    cdde:	e1 56       	subi	r30, 0x61	; 97
    cde0:	fa 4d       	sbci	r31, 0xDA	; 218
    cde2:	40 81       	ld	r20, Z
    cde4:	51 81       	ldd	r21, Z+1	; 0x01
    cde6:	62 81       	ldd	r22, Z+2	; 0x02
    cde8:	73 81       	ldd	r23, Z+3	; 0x03
    cdea:	84 16       	cp	r8, r20
    cdec:	95 06       	cpc	r9, r21
    cdee:	a6 06       	cpc	r10, r22
    cdf0:	b7 06       	cpc	r11, r23
    cdf2:	b8 f4       	brcc	.+46     	; 0xce22 <sched_push+0x2be>
    cdf4:	2f 31       	cpi	r18, 0x1F	; 31
    cdf6:	31 05       	cpc	r19, r1
    cdf8:	7c f4       	brge	.+30     	; 0xce18 <sched_push+0x2b4>
    cdfa:	4e e1       	ldi	r20, 0x1E	; 30
    cdfc:	50 e0       	ldi	r21, 0x00	; 0
    cdfe:	fa 01       	movw	r30, r20
    ce00:	e1 58       	subi	r30, 0x81	; 129
    ce02:	fa 4d       	sbci	r31, 0xDA	; 218
    ce04:	90 81       	ld	r25, Z
    ce06:	fa 01       	movw	r30, r20
    ce08:	e0 58       	subi	r30, 0x80	; 128
    ce0a:	fa 4d       	sbci	r31, 0xDA	; 218
    ce0c:	90 83       	st	Z, r25
    ce0e:	41 50       	subi	r20, 0x01	; 1
    ce10:	51 09       	sbc	r21, r1
    ce12:	42 17       	cp	r20, r18
    ce14:	53 07       	cpc	r21, r19
    ce16:	9c f7       	brge	.-26     	; 0xcdfe <sched_push+0x29a>
    ce18:	f9 01       	movw	r30, r18
    ce1a:	e1 58       	subi	r30, 0x81	; 129
    ce1c:	fa 4d       	sbci	r31, 0xDA	; 218
    ce1e:	80 83       	st	Z, r24
    ce20:	06 c0       	rjmp	.+12     	; 0xce2e <sched_push+0x2ca>
    ce22:	2f 5f       	subi	r18, 0xFF	; 255
    ce24:	3f 4f       	sbci	r19, 0xFF	; 255
    ce26:	20 32       	cpi	r18, 0x20	; 32
    ce28:	31 05       	cpc	r19, r1
    ce2a:	09 f0       	breq	.+2      	; 0xce2e <sched_push+0x2ca>
    ce2c:	b5 cf       	rjmp	.-150    	; 0xcd98 <sched_push+0x234>
    ce2e:	80 91 7f 25 	lds	r24, 0x257F	; 0x80257f <g_sched_sort>
    ce32:	90 e0       	ldi	r25, 0x00	; 0
    ce34:	01 97       	sbiw	r24, 0x01	; 1
    ce36:	fc 01       	movw	r30, r24
    ce38:	ee 0f       	add	r30, r30
    ce3a:	ff 1f       	adc	r31, r31
    ce3c:	ee 0f       	add	r30, r30
    ce3e:	ff 1f       	adc	r31, r31
    ce40:	ee 0f       	add	r30, r30
    ce42:	ff 1f       	adc	r31, r31
    ce44:	e8 1b       	sub	r30, r24
    ce46:	f9 0b       	sbc	r31, r25
    ce48:	e1 56       	subi	r30, 0x61	; 97
    ce4a:	fa 4d       	sbci	r31, 0xDA	; 218
    ce4c:	80 81       	ld	r24, Z
    ce4e:	91 81       	ldd	r25, Z+1	; 0x01
    ce50:	a2 81       	ldd	r26, Z+2	; 0x02
    ce52:	b3 81       	ldd	r27, Z+3	; 0x03
    ce54:	8c 83       	std	Y+4, r24	; 0x04
    ce56:	9d 83       	std	Y+5, r25	; 0x05
    ce58:	ae 83       	std	Y+6, r26	; 0x06
    ce5a:	bf 83       	std	Y+7, r27	; 0x07
    ce5c:	83 e8       	ldi	r24, 0x83	; 131
    ce5e:	96 e2       	ldi	r25, 0x26	; 38
    ce60:	4e de       	rcall	.-868    	; 0xcafe <sched_freeLock>
    ce62:	0f 2e       	mov	r0, r31
    ce64:	f1 ee       	ldi	r31, 0xE1	; 225
    ce66:	af 2e       	mov	r10, r31
    ce68:	fd e2       	ldi	r31, 0x2D	; 45
    ce6a:	bf 2e       	mov	r11, r31
    ce6c:	f0 2d       	mov	r31, r0
    ce6e:	a3 c0       	rjmp	.+326    	; 0xcfb6 <sched_push+0x452>
    ce70:	8f b7       	in	r24, 0x3f	; 63
    ce72:	8a 83       	std	Y+2, r24	; 0x02
    ce74:	f8 94       	cli
    ce76:	2a 81       	ldd	r18, Y+2	; 0x02
    ce78:	d5 01       	movw	r26, r10
    ce7a:	13 96       	adiw	r26, 0x03	; 3
    ce7c:	9c 91       	ld	r25, X
    ce7e:	13 97       	sbiw	r26, 0x03	; 3
    ce80:	12 96       	adiw	r26, 0x02	; 2
    ce82:	8c 91       	ld	r24, X
    ce84:	12 97       	sbiw	r26, 0x02	; 2
    ce86:	98 17       	cp	r25, r24
    ce88:	c9 f0       	breq	.+50     	; 0xcebc <sched_push+0x358>
    ce8a:	12 96       	adiw	r26, 0x02	; 2
    ce8c:	9c 91       	ld	r25, X
    ce8e:	12 97       	sbiw	r26, 0x02	; 2
    ce90:	15 96       	adiw	r26, 0x05	; 5
    ce92:	8c 91       	ld	r24, X
    ce94:	15 97       	sbiw	r26, 0x05	; 5
    ce96:	38 2f       	mov	r19, r24
    ce98:	36 95       	lsr	r19
    ce9a:	39 23       	and	r19, r25
    ce9c:	ed 91       	ld	r30, X+
    ce9e:	fc 91       	ld	r31, X
    cea0:	b4 e0       	ldi	r27, 0x04	; 4
    cea2:	3b 9f       	mul	r19, r27
    cea4:	e0 0d       	add	r30, r0
    cea6:	f1 1d       	adc	r31, r1
    cea8:	11 24       	eor	r1, r1
    ceaa:	40 81       	ld	r20, Z
    ceac:	51 81       	ldd	r21, Z+1	; 0x01
    ceae:	62 81       	ldd	r22, Z+2	; 0x02
    ceb0:	73 81       	ldd	r23, Z+3	; 0x03
    ceb2:	9f 5f       	subi	r25, 0xFF	; 255
    ceb4:	89 23       	and	r24, r25
    ceb6:	f5 01       	movw	r30, r10
    ceb8:	82 83       	std	Z+2, r24	; 0x02
    ceba:	03 c0       	rjmp	.+6      	; 0xcec2 <sched_push+0x35e>
    cebc:	40 e0       	ldi	r20, 0x00	; 0
    cebe:	50 e0       	ldi	r21, 0x00	; 0
    cec0:	ba 01       	movw	r22, r20
    cec2:	d5 01       	movw	r26, r10
    cec4:	13 96       	adiw	r26, 0x03	; 3
    cec6:	8c 91       	ld	r24, X
    cec8:	13 97       	sbiw	r26, 0x03	; 3
    ceca:	12 96       	adiw	r26, 0x02	; 2
    cecc:	9c 91       	ld	r25, X
    cece:	12 97       	sbiw	r26, 0x02	; 2
    ced0:	98 17       	cp	r25, r24
    ced2:	c9 f0       	breq	.+50     	; 0xcf06 <sched_push+0x3a2>
    ced4:	12 96       	adiw	r26, 0x02	; 2
    ced6:	3c 91       	ld	r19, X
    ced8:	12 97       	sbiw	r26, 0x02	; 2
    ceda:	15 96       	adiw	r26, 0x05	; 5
    cedc:	9c 91       	ld	r25, X
    cede:	15 97       	sbiw	r26, 0x05	; 5
    cee0:	89 2f       	mov	r24, r25
    cee2:	86 95       	lsr	r24
    cee4:	83 23       	and	r24, r19
    cee6:	ed 91       	ld	r30, X+
    cee8:	fc 91       	ld	r31, X
    ceea:	b4 e0       	ldi	r27, 0x04	; 4
    ceec:	8b 9f       	mul	r24, r27
    ceee:	e0 0d       	add	r30, r0
    cef0:	f1 1d       	adc	r31, r1
    cef2:	11 24       	eor	r1, r1
    cef4:	40 80       	ld	r4, Z
    cef6:	51 80       	ldd	r5, Z+1	; 0x01
    cef8:	62 80       	ldd	r6, Z+2	; 0x02
    cefa:	73 80       	ldd	r7, Z+3	; 0x03
    cefc:	3f 5f       	subi	r19, 0xFF	; 255
    cefe:	93 23       	and	r25, r19
    cf00:	f5 01       	movw	r30, r10
    cf02:	92 83       	std	Z+2, r25	; 0x02
    cf04:	03 c0       	rjmp	.+6      	; 0xcf0c <sched_push+0x3a8>
    cf06:	41 2c       	mov	r4, r1
    cf08:	51 2c       	mov	r5, r1
    cf0a:	32 01       	movw	r6, r4
    cf0c:	2f bf       	out	0x3f, r18	; 63
    cf0e:	d3 01       	movw	r26, r6
    cf10:	c2 01       	movw	r24, r4
    cf12:	88 27       	eor	r24, r24
    cf14:	99 27       	eor	r25, r25
    cf16:	aa 27       	eor	r26, r26
    cf18:	bf 70       	andi	r27, 0x0F	; 15
    cf1a:	00 97       	sbiw	r24, 0x00	; 0
    cf1c:	a1 05       	cpc	r26, r1
    cf1e:	bf 40       	sbci	r27, 0x0F	; 15
    cf20:	09 f1       	breq	.+66     	; 0xcf64 <sched_push+0x400>
    cf22:	8f b7       	in	r24, 0x3f	; 63
    cf24:	89 83       	std	Y+1, r24	; 0x01
    cf26:	f8 94       	cli
    cf28:	29 81       	ldd	r18, Y+1	; 0x01
    cf2a:	12 c0       	rjmp	.+36     	; 0xcf50 <sched_push+0x3ec>
    cf2c:	d5 01       	movw	r26, r10
    cf2e:	13 96       	adiw	r26, 0x03	; 3
    cf30:	9c 91       	ld	r25, X
    cf32:	13 97       	sbiw	r26, 0x03	; 3
    cf34:	12 96       	adiw	r26, 0x02	; 2
    cf36:	8c 91       	ld	r24, X
    cf38:	12 97       	sbiw	r26, 0x02	; 2
    cf3a:	98 17       	cp	r25, r24
    cf3c:	49 f0       	breq	.+18     	; 0xcf50 <sched_push+0x3ec>
    cf3e:	12 96       	adiw	r26, 0x02	; 2
    cf40:	8c 91       	ld	r24, X
    cf42:	12 97       	sbiw	r26, 0x02	; 2
    cf44:	8f 5f       	subi	r24, 0xFF	; 255
    cf46:	15 96       	adiw	r26, 0x05	; 5
    cf48:	9c 91       	ld	r25, X
    cf4a:	89 23       	and	r24, r25
    cf4c:	f5 01       	movw	r30, r10
    cf4e:	82 83       	std	Z+2, r24	; 0x02
    cf50:	d5 01       	movw	r26, r10
    cf52:	13 96       	adiw	r26, 0x03	; 3
    cf54:	9c 91       	ld	r25, X
    cf56:	13 97       	sbiw	r26, 0x03	; 3
    cf58:	12 96       	adiw	r26, 0x02	; 2
    cf5a:	8c 91       	ld	r24, X
    cf5c:	98 13       	cpse	r25, r24
    cf5e:	e6 cf       	rjmp	.-52     	; 0xcf2c <sched_push+0x3c8>
    cf60:	2f bf       	out	0x3f, r18	; 63
    cf62:	29 c0       	rjmp	.+82     	; 0xcfb6 <sched_push+0x452>
    cf64:	d3 01       	movw	r26, r6
    cf66:	c2 01       	movw	r24, r4
    cf68:	aa 27       	eor	r26, r26
    cf6a:	bb 27       	eor	r27, r27
    cf6c:	89 2b       	or	r24, r25
    cf6e:	8a 2b       	or	r24, r26
    cf70:	8b 2b       	or	r24, r27
    cf72:	09 f1       	breq	.+66     	; 0xcfb6 <sched_push+0x452>
    cf74:	41 15       	cp	r20, r1
    cf76:	51 05       	cpc	r21, r1
    cf78:	61 05       	cpc	r22, r1
    cf7a:	71 05       	cpc	r23, r1
    cf7c:	e1 f0       	breq	.+56     	; 0xcfb6 <sched_push+0x452>
    cf7e:	d3 01       	movw	r26, r6
    cf80:	c2 01       	movw	r24, r4
    cf82:	07 2e       	mov	r0, r23
    cf84:	7e e1       	ldi	r23, 0x1E	; 30
    cf86:	b6 95       	lsr	r27
    cf88:	a7 95       	ror	r26
    cf8a:	97 95       	ror	r25
    cf8c:	87 95       	ror	r24
    cf8e:	7a 95       	dec	r23
    cf90:	d1 f7       	brne	.-12     	; 0xcf86 <sched_push+0x422>
    cf92:	70 2d       	mov	r23, r0
    cf94:	e8 2f       	mov	r30, r24
    cf96:	e1 70       	andi	r30, 0x01	; 1
    cf98:	ce 2e       	mov	r12, r30
    cf9a:	83 01       	movw	r16, r6
    cf9c:	72 01       	movw	r14, r4
    cf9e:	ee 24       	eor	r14, r14
    cfa0:	17 fd       	sbrc	r17, 7
    cfa2:	e3 94       	inc	r14
    cfa4:	ff 24       	eor	r15, r15
    cfa6:	00 27       	eor	r16, r16
    cfa8:	11 27       	eor	r17, r17
    cfaa:	00 e0       	ldi	r16, 0x00	; 0
    cfac:	9a 01       	movw	r18, r20
    cfae:	ab 01       	movw	r20, r22
    cfb0:	60 e0       	ldi	r22, 0x00	; 0
    cfb2:	c2 01       	movw	r24, r4
    cfb4:	d7 dd       	rcall	.-1106   	; 0xcb64 <sched_push>
    cfb6:	d5 01       	movw	r26, r10
    cfb8:	13 96       	adiw	r26, 0x03	; 3
    cfba:	8c 91       	ld	r24, X
    cfbc:	13 97       	sbiw	r26, 0x03	; 3
    cfbe:	12 96       	adiw	r26, 0x02	; 2
    cfc0:	9c 91       	ld	r25, X
    cfc2:	98 13       	cpse	r25, r24
    cfc4:	55 cf       	rjmp	.-342    	; 0xce70 <sched_push+0x30c>
    cfc6:	0c 81       	ldd	r16, Y+4	; 0x04
    cfc8:	1d 81       	ldd	r17, Y+5	; 0x05
    cfca:	2e 81       	ldd	r18, Y+6	; 0x06
    cfcc:	3f 81       	ldd	r19, Y+7	; 0x07
    cfce:	01 2b       	or	r16, r17
    cfd0:	02 2b       	or	r16, r18
    cfd2:	03 2b       	or	r16, r19
    cfd4:	21 f1       	breq	.+72     	; 0xd01e <sched_push+0x4ba>
    cfd6:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <rtc_get_time>
    cfda:	8b 01       	movw	r16, r22
    cfdc:	9c 01       	movw	r18, r24
    cfde:	0e 5f       	subi	r16, 0xFE	; 254
    cfe0:	1f 4f       	sbci	r17, 0xFF	; 255
    cfe2:	2f 4f       	sbci	r18, 0xFF	; 255
    cfe4:	3f 4f       	sbci	r19, 0xFF	; 255
    cfe6:	6c 81       	ldd	r22, Y+4	; 0x04
    cfe8:	7d 81       	ldd	r23, Y+5	; 0x05
    cfea:	8e 81       	ldd	r24, Y+6	; 0x06
    cfec:	9f 81       	ldd	r25, Y+7	; 0x07
    cfee:	60 17       	cp	r22, r16
    cff0:	71 07       	cpc	r23, r17
    cff2:	82 07       	cpc	r24, r18
    cff4:	93 07       	cpc	r25, r19
    cff6:	10 f4       	brcc	.+4      	; 0xcffc <sched_push+0x498>
    cff8:	c9 01       	movw	r24, r18
    cffa:	b8 01       	movw	r22, r16
    cffc:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <rtc_set_alarm>
    d000:	0e c0       	rjmp	.+28     	; 0xd01e <sched_push+0x4ba>
    d002:	80 91 a5 25 	lds	r24, 0x25A5	; 0x8025a5 <g_sched_data+0x6>
    d006:	80 fd       	sbrc	r24, 0
    d008:	7b ce       	rjmp	.-778    	; 0xcd00 <sched_push+0x19c>
    d00a:	80 e0       	ldi	r24, 0x00	; 0
    d00c:	90 e0       	ldi	r25, 0x00	; 0
    d00e:	88 ce       	rjmp	.-752    	; 0xcd20 <sched_push+0x1bc>
    d010:	83 e8       	ldi	r24, 0x83	; 131
    d012:	96 e2       	ldi	r25, 0x26	; 38
    d014:	5c dd       	rcall	.-1352   	; 0xcace <sched_getLock>
    d016:	88 23       	and	r24, r24
    d018:	09 f4       	brne	.+2      	; 0xd01c <sched_push+0x4b8>
    d01a:	18 ce       	rjmp	.-976    	; 0xcc4c <sched_push+0xe8>
    d01c:	f2 cf       	rjmp	.-28     	; 0xd002 <sched_push+0x49e>
    d01e:	2b 96       	adiw	r28, 0x0b	; 11
    d020:	cd bf       	out	0x3d, r28	; 61
    d022:	de bf       	out	0x3e, r29	; 62
    d024:	df 91       	pop	r29
    d026:	cf 91       	pop	r28
    d028:	1f 91       	pop	r17
    d02a:	0f 91       	pop	r16
    d02c:	ff 90       	pop	r15
    d02e:	ef 90       	pop	r14
    d030:	cf 90       	pop	r12
    d032:	bf 90       	pop	r11
    d034:	af 90       	pop	r10
    d036:	9f 90       	pop	r9
    d038:	8f 90       	pop	r8
    d03a:	7f 90       	pop	r7
    d03c:	6f 90       	pop	r6
    d03e:	5f 90       	pop	r5
    d040:	4f 90       	pop	r4
    d042:	3f 90       	pop	r3
    d044:	2f 90       	pop	r2
    d046:	08 95       	ret

0000d048 <dds_update>:
    d048:	4f 92       	push	r4
    d04a:	5f 92       	push	r5
    d04c:	6f 92       	push	r6
    d04e:	7f 92       	push	r7
    d050:	8f 92       	push	r8
    d052:	9f 92       	push	r9
    d054:	af 92       	push	r10
    d056:	bf 92       	push	r11
    d058:	cf 92       	push	r12
    d05a:	df 92       	push	r13
    d05c:	ef 92       	push	r14
    d05e:	ff 92       	push	r15
    d060:	0f 93       	push	r16
    d062:	1f 93       	push	r17
    d064:	cf 93       	push	r28
    d066:	df 93       	push	r29
    d068:	cd b7       	in	r28, 0x3d	; 61
    d06a:	de b7       	in	r29, 0x3e	; 62
    d06c:	2d 97       	sbiw	r28, 0x0d	; 13
    d06e:	cd bf       	out	0x3d, r28	; 61
    d070:	de bf       	out	0x3e, r29	; 62
    d072:	6a 83       	std	Y+2, r22	; 0x02
    d074:	7b 83       	std	Y+3, r23	; 0x03
    d076:	8c 83       	std	Y+4, r24	; 0x04
    d078:	9d 83       	std	Y+5, r25	; 0x05
    d07a:	2e 83       	std	Y+6, r18	; 0x06
    d07c:	3f 83       	std	Y+7, r19	; 0x07
    d07e:	48 87       	std	Y+8, r20	; 0x08
    d080:	59 87       	std	Y+9, r21	; 0x09
    d082:	ea 86       	std	Y+10, r14	; 0x0a
    d084:	fb 86       	std	Y+11, r15	; 0x0b
    d086:	0c 87       	std	Y+12, r16	; 0x0c
    d088:	1d 87       	std	Y+13, r17	; 0x0d
    d08a:	20 e0       	ldi	r18, 0x00	; 0
    d08c:	30 e0       	ldi	r19, 0x00	; 0
    d08e:	a9 01       	movw	r20, r18
    d090:	0e 94 61 7a 	call	0xf4c2	; 0xf4c2 <__gesf2>
    d094:	88 23       	and	r24, r24
    d096:	7c f0       	brlt	.+30     	; 0xd0b6 <dds_update+0x6e>
    d098:	20 e0       	ldi	r18, 0x00	; 0
    d09a:	30 e0       	ldi	r19, 0x00	; 0
    d09c:	4a e7       	ldi	r20, 0x7A	; 122
    d09e:	54 e4       	ldi	r21, 0x44	; 68
    d0a0:	6a 81       	ldd	r22, Y+2	; 0x02
    d0a2:	7b 81       	ldd	r23, Y+3	; 0x03
    d0a4:	8c 81       	ldd	r24, Y+4	; 0x04
    d0a6:	9d 81       	ldd	r25, Y+5	; 0x05
    d0a8:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    d0ac:	0e 94 4a 79 	call	0xf294	; 0xf294 <__fixunssfsi>
    d0b0:	2b 01       	movw	r4, r22
    d0b2:	3c 01       	movw	r6, r24
    d0b4:	03 c0       	rjmp	.+6      	; 0xd0bc <dds_update+0x74>
    d0b6:	41 2c       	mov	r4, r1
    d0b8:	51 2c       	mov	r5, r1
    d0ba:	32 01       	movw	r6, r4
    d0bc:	20 e0       	ldi	r18, 0x00	; 0
    d0be:	30 e0       	ldi	r19, 0x00	; 0
    d0c0:	a9 01       	movw	r20, r18
    d0c2:	6e 81       	ldd	r22, Y+6	; 0x06
    d0c4:	7f 81       	ldd	r23, Y+7	; 0x07
    d0c6:	88 85       	ldd	r24, Y+8	; 0x08
    d0c8:	99 85       	ldd	r25, Y+9	; 0x09
    d0ca:	0e 94 61 7a 	call	0xf4c2	; 0xf4c2 <__gesf2>
    d0ce:	88 23       	and	r24, r24
    d0d0:	7c f0       	brlt	.+30     	; 0xd0f0 <dds_update+0xa8>
    d0d2:	20 e0       	ldi	r18, 0x00	; 0
    d0d4:	30 e0       	ldi	r19, 0x00	; 0
    d0d6:	4a e7       	ldi	r20, 0x7A	; 122
    d0d8:	54 e4       	ldi	r21, 0x44	; 68
    d0da:	6e 81       	ldd	r22, Y+6	; 0x06
    d0dc:	7f 81       	ldd	r23, Y+7	; 0x07
    d0de:	88 85       	ldd	r24, Y+8	; 0x08
    d0e0:	99 85       	ldd	r25, Y+9	; 0x09
    d0e2:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    d0e6:	0e 94 4a 79 	call	0xf294	; 0xf294 <__fixunssfsi>
    d0ea:	4b 01       	movw	r8, r22
    d0ec:	5c 01       	movw	r10, r24
    d0ee:	03 c0       	rjmp	.+6      	; 0xd0f6 <dds_update+0xae>
    d0f0:	81 2c       	mov	r8, r1
    d0f2:	91 2c       	mov	r9, r1
    d0f4:	54 01       	movw	r10, r8
    d0f6:	20 e0       	ldi	r18, 0x00	; 0
    d0f8:	30 e0       	ldi	r19, 0x00	; 0
    d0fa:	a9 01       	movw	r20, r18
    d0fc:	6a 85       	ldd	r22, Y+10	; 0x0a
    d0fe:	7b 85       	ldd	r23, Y+11	; 0x0b
    d100:	8c 85       	ldd	r24, Y+12	; 0x0c
    d102:	9d 85       	ldd	r25, Y+13	; 0x0d
    d104:	0e 94 61 7a 	call	0xf4c2	; 0xf4c2 <__gesf2>
    d108:	88 23       	and	r24, r24
    d10a:	ac f0       	brlt	.+42     	; 0xd136 <dds_update+0xee>
    d10c:	20 e0       	ldi	r18, 0x00	; 0
    d10e:	30 e0       	ldi	r19, 0x00	; 0
    d110:	44 eb       	ldi	r20, 0xB4	; 180
    d112:	52 e4       	ldi	r21, 0x42	; 66
    d114:	6a 85       	ldd	r22, Y+10	; 0x0a
    d116:	7b 85       	ldd	r23, Y+11	; 0x0b
    d118:	8c 85       	ldd	r24, Y+12	; 0x0c
    d11a:	9d 85       	ldd	r25, Y+13	; 0x0d
    d11c:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__divsf3>
    d120:	20 e0       	ldi	r18, 0x00	; 0
    d122:	30 e0       	ldi	r19, 0x00	; 0
    d124:	40 e8       	ldi	r20, 0x80	; 128
    d126:	5e e4       	ldi	r21, 0x4E	; 78
    d128:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
    d12c:	0e 94 4a 79 	call	0xf294	; 0xf294 <__fixunssfsi>
    d130:	6b 01       	movw	r12, r22
    d132:	7c 01       	movw	r14, r24
    d134:	03 c0       	rjmp	.+6      	; 0xd13c <dds_update+0xf4>
    d136:	c1 2c       	mov	r12, r1
    d138:	d1 2c       	mov	r13, r1
    d13a:	76 01       	movw	r14, r12
    d13c:	8f b7       	in	r24, 0x3f	; 63
    d13e:	89 83       	std	Y+1, r24	; 0x01
    d140:	f8 94       	cli
    d142:	19 81       	ldd	r17, Y+1	; 0x01
    d144:	20 e0       	ldi	r18, 0x00	; 0
    d146:	30 e0       	ldi	r19, 0x00	; 0
    d148:	a9 01       	movw	r20, r18
    d14a:	6a 81       	ldd	r22, Y+2	; 0x02
    d14c:	7b 81       	ldd	r23, Y+3	; 0x03
    d14e:	8c 81       	ldd	r24, Y+4	; 0x04
    d150:	9d 81       	ldd	r25, Y+5	; 0x05
    d152:	0e 94 61 7a 	call	0xf4c2	; 0xf4c2 <__gesf2>
    d156:	88 23       	and	r24, r24
    d158:	44 f0       	brlt	.+16     	; 0xd16a <dds_update+0x122>
    d15a:	40 92 13 20 	sts	0x2013, r4	; 0x802013 <dds0_freq_mHz>
    d15e:	50 92 14 20 	sts	0x2014, r5	; 0x802014 <dds0_freq_mHz+0x1>
    d162:	60 92 15 20 	sts	0x2015, r6	; 0x802015 <dds0_freq_mHz+0x2>
    d166:	70 92 16 20 	sts	0x2016, r7	; 0x802016 <dds0_freq_mHz+0x3>
    d16a:	20 e0       	ldi	r18, 0x00	; 0
    d16c:	30 e0       	ldi	r19, 0x00	; 0
    d16e:	a9 01       	movw	r20, r18
    d170:	6e 81       	ldd	r22, Y+6	; 0x06
    d172:	7f 81       	ldd	r23, Y+7	; 0x07
    d174:	88 85       	ldd	r24, Y+8	; 0x08
    d176:	99 85       	ldd	r25, Y+9	; 0x09
    d178:	0e 94 61 7a 	call	0xf4c2	; 0xf4c2 <__gesf2>
    d17c:	88 23       	and	r24, r24
    d17e:	44 f0       	brlt	.+16     	; 0xd190 <dds_update+0x148>
    d180:	80 92 0f 20 	sts	0x200F, r8	; 0x80200f <dds1_freq_mHz>
    d184:	90 92 10 20 	sts	0x2010, r9	; 0x802010 <dds1_freq_mHz+0x1>
    d188:	a0 92 11 20 	sts	0x2011, r10	; 0x802011 <dds1_freq_mHz+0x2>
    d18c:	b0 92 12 20 	sts	0x2012, r11	; 0x802012 <dds1_freq_mHz+0x3>
    d190:	20 e0       	ldi	r18, 0x00	; 0
    d192:	30 e0       	ldi	r19, 0x00	; 0
    d194:	a9 01       	movw	r20, r18
    d196:	6a 85       	ldd	r22, Y+10	; 0x0a
    d198:	7b 85       	ldd	r23, Y+11	; 0x0b
    d19a:	8c 85       	ldd	r24, Y+12	; 0x0c
    d19c:	9d 85       	ldd	r25, Y+13	; 0x0d
    d19e:	0e 94 61 7a 	call	0xf4c2	; 0xf4c2 <__gesf2>
    d1a2:	88 23       	and	r24, r24
    d1a4:	84 f0       	brlt	.+32     	; 0xd1c6 <dds_update+0x17e>
    d1a6:	10 92 0d 25 	sts	0x250D, r1	; 0x80250d <dds0_reg>
    d1aa:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <dds0_reg+0x1>
    d1ae:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <dds0_reg+0x2>
    d1b2:	10 92 10 25 	sts	0x2510, r1	; 0x802510 <dds0_reg+0x3>
    d1b6:	c0 92 0b 20 	sts	0x200B, r12	; 0x80200b <dds1_reg>
    d1ba:	d0 92 0c 20 	sts	0x200C, r13	; 0x80200c <dds1_reg+0x1>
    d1be:	e0 92 0d 20 	sts	0x200D, r14	; 0x80200d <dds1_reg+0x2>
    d1c2:	f0 92 0e 20 	sts	0x200E, r15	; 0x80200e <dds1_reg+0x3>
    d1c6:	1f bf       	out	0x3f, r17	; 63
    d1c8:	c1 2c       	mov	r12, r1
    d1ca:	e1 2c       	mov	r14, r1
    d1cc:	01 e0       	ldi	r16, 0x01	; 1
    d1ce:	2a e0       	ldi	r18, 0x0A	; 10
    d1d0:	30 e0       	ldi	r19, 0x00	; 0
    d1d2:	40 e0       	ldi	r20, 0x00	; 0
    d1d4:	50 e0       	ldi	r21, 0x00	; 0
    d1d6:	60 e0       	ldi	r22, 0x00	; 0
    d1d8:	85 e7       	ldi	r24, 0x75	; 117
    d1da:	9e e5       	ldi	r25, 0x5E	; 94
    d1dc:	c3 dc       	rcall	.-1658   	; 0xcb64 <sched_push>
    d1de:	2d 96       	adiw	r28, 0x0d	; 13
    d1e0:	cd bf       	out	0x3d, r28	; 61
    d1e2:	de bf       	out	0x3e, r29	; 62
    d1e4:	df 91       	pop	r29
    d1e6:	cf 91       	pop	r28
    d1e8:	1f 91       	pop	r17
    d1ea:	0f 91       	pop	r16
    d1ec:	ff 90       	pop	r15
    d1ee:	ef 90       	pop	r14
    d1f0:	df 90       	pop	r13
    d1f2:	cf 90       	pop	r12
    d1f4:	bf 90       	pop	r11
    d1f6:	af 90       	pop	r10
    d1f8:	9f 90       	pop	r9
    d1fa:	8f 90       	pop	r8
    d1fc:	7f 90       	pop	r7
    d1fe:	6f 90       	pop	r6
    d200:	5f 90       	pop	r5
    d202:	4f 90       	pop	r4
    d204:	08 95       	ret

0000d206 <isr_tcc0_ovfl>:
    d206:	cf 92       	push	r12
    d208:	df 92       	push	r13
    d20a:	ef 92       	push	r14
    d20c:	ff 92       	push	r15
    d20e:	0f 93       	push	r16
    d210:	1f 93       	push	r17
    d212:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <rtc_get_time>
    d216:	21 e0       	ldi	r18, 0x01	; 1
    d218:	20 93 0c 08 	sts	0x080C, r18	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    d21c:	20 91 6f 28 	lds	r18, 0x286F	; 0x80286f <g_workmode>
    d220:	22 30       	cpi	r18, 0x02	; 2
    d222:	09 f0       	breq	.+2      	; 0xd226 <isr_tcc0_ovfl+0x20>
    d224:	65 c0       	rjmp	.+202    	; 0xd2f0 <isr_tcc0_ovfl+0xea>
    d226:	00 91 bd 24 	lds	r16, 0x24BD	; 0x8024bd <last_100ms.8012>
    d22a:	10 91 be 24 	lds	r17, 0x24BE	; 0x8024be <last_100ms.8012+0x1>
    d22e:	20 91 bf 24 	lds	r18, 0x24BF	; 0x8024bf <last_100ms.8012+0x2>
    d232:	30 91 c0 24 	lds	r19, 0x24C0	; 0x8024c0 <last_100ms.8012+0x3>
    d236:	6b 01       	movw	r12, r22
    d238:	7c 01       	movw	r14, r24
    d23a:	c0 1a       	sub	r12, r16
    d23c:	d1 0a       	sbc	r13, r17
    d23e:	e2 0a       	sbc	r14, r18
    d240:	f3 0a       	sbc	r15, r19
    d242:	46 e6       	ldi	r20, 0x66	; 102
    d244:	c4 16       	cp	r12, r20
    d246:	d1 04       	cpc	r13, r1
    d248:	e1 04       	cpc	r14, r1
    d24a:	f1 04       	cpc	r15, r1
    d24c:	28 f4       	brcc	.+10     	; 0xd258 <isr_tcc0_ovfl+0x52>
    d24e:	60 17       	cp	r22, r16
    d250:	71 07       	cpc	r23, r17
    d252:	82 07       	cpc	r24, r18
    d254:	93 07       	cpc	r25, r19
    d256:	58 f4       	brcc	.+22     	; 0xd26e <isr_tcc0_ovfl+0x68>
    d258:	60 93 bd 24 	sts	0x24BD, r22	; 0x8024bd <last_100ms.8012>
    d25c:	70 93 be 24 	sts	0x24BE, r23	; 0x8024be <last_100ms.8012+0x1>
    d260:	80 93 bf 24 	sts	0x24BF, r24	; 0x8024bf <last_100ms.8012+0x2>
    d264:	90 93 c0 24 	sts	0x24C0, r25	; 0x8024c0 <last_100ms.8012+0x3>
    d268:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <isr_100ms_twi1_onboard>
    d26c:	41 c0       	rjmp	.+130    	; 0xd2f0 <isr_tcc0_ovfl+0xea>
    d26e:	00 91 b9 24 	lds	r16, 0x24B9	; 0x8024b9 <last_500ms.8013>
    d272:	10 91 ba 24 	lds	r17, 0x24BA	; 0x8024ba <last_500ms.8013+0x1>
    d276:	20 91 bb 24 	lds	r18, 0x24BB	; 0x8024bb <last_500ms.8013+0x2>
    d27a:	30 91 bc 24 	lds	r19, 0x24BC	; 0x8024bc <last_500ms.8013+0x3>
    d27e:	6b 01       	movw	r12, r22
    d280:	7c 01       	movw	r14, r24
    d282:	c0 1a       	sub	r12, r16
    d284:	d1 0a       	sbc	r13, r17
    d286:	e2 0a       	sbc	r14, r18
    d288:	f3 0a       	sbc	r15, r19
    d28a:	c1 14       	cp	r12, r1
    d28c:	42 e0       	ldi	r20, 0x02	; 2
    d28e:	d4 06       	cpc	r13, r20
    d290:	e1 04       	cpc	r14, r1
    d292:	f1 04       	cpc	r15, r1
    d294:	28 f4       	brcc	.+10     	; 0xd2a0 <isr_tcc0_ovfl+0x9a>
    d296:	60 17       	cp	r22, r16
    d298:	71 07       	cpc	r23, r17
    d29a:	82 07       	cpc	r24, r18
    d29c:	93 07       	cpc	r25, r19
    d29e:	30 f5       	brcc	.+76     	; 0xd2ec <isr_tcc0_ovfl+0xe6>
    d2a0:	60 93 b9 24 	sts	0x24B9, r22	; 0x8024b9 <last_500ms.8013>
    d2a4:	70 93 ba 24 	sts	0x24BA, r23	; 0x8024ba <last_500ms.8013+0x1>
    d2a8:	80 93 bb 24 	sts	0x24BB, r24	; 0x8024bb <last_500ms.8013+0x2>
    d2ac:	90 93 bc 24 	sts	0x24BC, r25	; 0x8024bc <last_500ms.8013+0x3>
    d2b0:	0e 94 81 34 	call	0x6902	; 0x6902 <isr_500ms_twi1_onboard>
    d2b4:	c1 2c       	mov	r12, r1
    d2b6:	e1 2c       	mov	r14, r1
    d2b8:	01 e0       	ldi	r16, 0x01	; 1
    d2ba:	24 e6       	ldi	r18, 0x64	; 100
    d2bc:	30 e0       	ldi	r19, 0x00	; 0
    d2be:	40 e0       	ldi	r20, 0x00	; 0
    d2c0:	50 e0       	ldi	r21, 0x00	; 0
    d2c2:	60 e0       	ldi	r22, 0x00	; 0
    d2c4:	87 e7       	ldi	r24, 0x77	; 119
    d2c6:	9f e5       	ldi	r25, 0x5F	; 95
    d2c8:	4d dc       	rcall	.-1894   	; 0xcb64 <sched_push>
    d2ca:	24 e6       	ldi	r18, 0x64	; 100
    d2cc:	30 e0       	ldi	r19, 0x00	; 0
    d2ce:	40 e0       	ldi	r20, 0x00	; 0
    d2d0:	50 e0       	ldi	r21, 0x00	; 0
    d2d2:	60 e0       	ldi	r22, 0x00	; 0
    d2d4:	85 e7       	ldi	r24, 0x75	; 117
    d2d6:	9e e5       	ldi	r25, 0x5E	; 94
    d2d8:	45 dc       	rcall	.-1910   	; 0xcb64 <sched_push>
    d2da:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <rtc_get_time>
    d2de:	6e 5f       	subi	r22, 0xFE	; 254
    d2e0:	7f 4f       	sbci	r23, 0xFF	; 255
    d2e2:	8f 4f       	sbci	r24, 0xFF	; 255
    d2e4:	9f 4f       	sbci	r25, 0xFF	; 255
    d2e6:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <rtc_set_alarm>
    d2ea:	02 c0       	rjmp	.+4      	; 0xd2f0 <isr_tcc0_ovfl+0xea>
    d2ec:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <isr_sparetime_twi1_onboard>
    d2f0:	1f 91       	pop	r17
    d2f2:	0f 91       	pop	r16
    d2f4:	ff 90       	pop	r15
    d2f6:	ef 90       	pop	r14
    d2f8:	df 90       	pop	r13
    d2fa:	cf 90       	pop	r12
    d2fc:	08 95       	ret

0000d2fe <sched_pop>:
    d2fe:	7f 92       	push	r7
    d300:	8f 92       	push	r8
    d302:	9f 92       	push	r9
    d304:	af 92       	push	r10
    d306:	bf 92       	push	r11
    d308:	cf 92       	push	r12
    d30a:	df 92       	push	r13
    d30c:	ef 92       	push	r14
    d30e:	ff 92       	push	r15
    d310:	0f 93       	push	r16
    d312:	1f 93       	push	r17
    d314:	cf 93       	push	r28
    d316:	df 93       	push	r29
    d318:	1f 92       	push	r1
    d31a:	cd b7       	in	r28, 0x3d	; 61
    d31c:	de b7       	in	r29, 0x3e	; 62
    d31e:	4b 01       	movw	r8, r22
    d320:	5c 01       	movw	r10, r24
    d322:	83 e8       	ldi	r24, 0x83	; 131
    d324:	96 e2       	ldi	r25, 0x26	; 38
    d326:	d3 db       	rcall	.-2138   	; 0xcace <sched_getLock>
    d328:	81 11       	cpse	r24, r1
    d32a:	04 c0       	rjmp	.+8      	; 0xd334 <sched_pop+0x36>
    d32c:	81 e0       	ldi	r24, 0x01	; 1
    d32e:	80 93 7f 26 	sts	0x267F, r24	; 0x80267f <g_sched_pop_again>
    d332:	cd c0       	rjmp	.+410    	; 0xd4ce <sched_pop+0x1d0>
    d334:	70 90 7f 25 	lds	r7, 0x257F	; 0x80257f <g_sched_sort>
    d338:	77 20       	and	r7, r7
    d33a:	09 f4       	brne	.+2      	; 0xd33e <sched_pop+0x40>
    d33c:	c4 c0       	rjmp	.+392    	; 0xd4c6 <sched_pop+0x1c8>
    d33e:	87 2d       	mov	r24, r7
    d340:	90 e0       	ldi	r25, 0x00	; 0
    d342:	01 97       	sbiw	r24, 0x01	; 1
    d344:	fc 01       	movw	r30, r24
    d346:	ee 0f       	add	r30, r30
    d348:	ff 1f       	adc	r31, r31
    d34a:	ee 0f       	add	r30, r30
    d34c:	ff 1f       	adc	r31, r31
    d34e:	ee 0f       	add	r30, r30
    d350:	ff 1f       	adc	r31, r31
    d352:	e8 1b       	sub	r30, r24
    d354:	f9 0b       	sbc	r31, r25
    d356:	eb 55       	subi	r30, 0x5B	; 91
    d358:	fa 4d       	sbci	r31, 0xDA	; 218
    d35a:	20 81       	ld	r18, Z
    d35c:	20 ff       	sbrs	r18, 0
    d35e:	b3 c0       	rjmp	.+358    	; 0xd4c6 <sched_pop+0x1c8>
    d360:	fc 01       	movw	r30, r24
    d362:	ee 0f       	add	r30, r30
    d364:	ff 1f       	adc	r31, r31
    d366:	ee 0f       	add	r30, r30
    d368:	ff 1f       	adc	r31, r31
    d36a:	ee 0f       	add	r30, r30
    d36c:	ff 1f       	adc	r31, r31
    d36e:	e8 1b       	sub	r30, r24
    d370:	f9 0b       	sbc	r31, r25
    d372:	e1 56       	subi	r30, 0x61	; 97
    d374:	fa 4d       	sbci	r31, 0xDA	; 218
    d376:	c0 80       	ld	r12, Z
    d378:	d1 80       	ldd	r13, Z+1	; 0x01
    d37a:	e2 80       	ldd	r14, Z+2	; 0x02
    d37c:	f3 80       	ldd	r15, Z+3	; 0x03
    d37e:	0f e7       	ldi	r16, 0x7F	; 127
    d380:	15 e2       	ldi	r17, 0x25	; 37
    d382:	74 c0       	rjmp	.+232    	; 0xd46c <sched_pop+0x16e>
    d384:	87 2d       	mov	r24, r7
    d386:	90 e0       	ldi	r25, 0x00	; 0
    d388:	01 97       	sbiw	r24, 0x01	; 1
    d38a:	dc 01       	movw	r26, r24
    d38c:	aa 0f       	add	r26, r26
    d38e:	bb 1f       	adc	r27, r27
    d390:	aa 0f       	add	r26, r26
    d392:	bb 1f       	adc	r27, r27
    d394:	aa 0f       	add	r26, r26
    d396:	bb 1f       	adc	r27, r27
    d398:	a8 1b       	sub	r26, r24
    d39a:	b9 0b       	sbc	r27, r25
    d39c:	fd 01       	movw	r30, r26
    d39e:	e1 56       	subi	r30, 0x61	; 97
    d3a0:	fa 4d       	sbci	r31, 0xDA	; 218
    d3a2:	04 80       	ldd	r0, Z+4	; 0x04
    d3a4:	f5 81       	ldd	r31, Z+5	; 0x05
    d3a6:	e0 2d       	mov	r30, r0
    d3a8:	ab 55       	subi	r26, 0x5B	; 91
    d3aa:	ba 4d       	sbci	r27, 0xDA	; 218
    d3ac:	6c 91       	ld	r22, X
    d3ae:	66 95       	lsr	r22
    d3b0:	66 95       	lsr	r22
    d3b2:	66 95       	lsr	r22
    d3b4:	63 70       	andi	r22, 0x03	; 3
    d3b6:	8c 91       	ld	r24, X
    d3b8:	81 fb       	bst	r24, 1
    d3ba:	77 27       	eor	r23, r23
    d3bc:	70 f9       	bld	r23, 0
    d3be:	4c 91       	ld	r20, X
    d3c0:	42 fb       	bst	r20, 2
    d3c2:	44 27       	eor	r20, r20
    d3c4:	40 f9       	bld	r20, 0
    d3c6:	8c 91       	ld	r24, X
    d3c8:	8e 7f       	andi	r24, 0xFE	; 254
    d3ca:	8c 93       	st	X, r24
    d3cc:	80 e0       	ldi	r24, 0x00	; 0
    d3ce:	90 e0       	ldi	r25, 0x00	; 0
    d3d0:	9c 01       	movw	r18, r24
    d3d2:	2f 5f       	subi	r18, 0xFF	; 255
    d3d4:	3f 4f       	sbci	r19, 0xFF	; 255
    d3d6:	d9 01       	movw	r26, r18
    d3d8:	a1 58       	subi	r26, 0x81	; 129
    d3da:	ba 4d       	sbci	r27, 0xDA	; 218
    d3dc:	5c 91       	ld	r21, X
    d3de:	dc 01       	movw	r26, r24
    d3e0:	a1 58       	subi	r26, 0x81	; 129
    d3e2:	ba 4d       	sbci	r27, 0xDA	; 218
    d3e4:	5c 93       	st	X, r21
    d3e6:	c9 01       	movw	r24, r18
    d3e8:	2f 31       	cpi	r18, 0x1F	; 31
    d3ea:	31 05       	cpc	r19, r1
    d3ec:	89 f7       	brne	.-30     	; 0xd3d0 <sched_pop+0xd2>
    d3ee:	d8 01       	movw	r26, r16
    d3f0:	5f 96       	adiw	r26, 0x1f	; 31
    d3f2:	1c 92       	st	X, r1
    d3f4:	30 97       	sbiw	r30, 0x00	; 0
    d3f6:	b1 f0       	breq	.+44     	; 0xd424 <sched_pop+0x126>
    d3f8:	8f b7       	in	r24, 0x3f	; 63
    d3fa:	89 83       	std	Y+1, r24	; 0x01
    d3fc:	f8 94       	cli
    d3fe:	79 80       	ldd	r7, Y+1	; 0x01
    d400:	77 23       	and	r23, r23
    d402:	11 f0       	breq	.+4      	; 0xd408 <sched_pop+0x10a>
    d404:	f8 94       	cli
    d406:	01 c0       	rjmp	.+2      	; 0xd40a <sched_pop+0x10c>
    d408:	78 94       	sei
    d40a:	66 23       	and	r22, r22
    d40c:	19 f0       	breq	.+6      	; 0xd414 <sched_pop+0x116>
    d40e:	61 30       	cpi	r22, 0x01	; 1
    d410:	29 f0       	breq	.+10     	; 0xd41c <sched_pop+0x11e>
    d412:	07 c0       	rjmp	.+14     	; 0xd422 <sched_pop+0x124>
    d414:	c7 01       	movw	r24, r14
    d416:	b6 01       	movw	r22, r12
    d418:	19 95       	eicall
    d41a:	03 c0       	rjmp	.+6      	; 0xd422 <sched_pop+0x124>
    d41c:	c7 01       	movw	r24, r14
    d41e:	b6 01       	movw	r22, r12
    d420:	19 95       	eicall
    d422:	7f be       	out	0x3f, r7	; 63
    d424:	f8 01       	movw	r30, r16
    d426:	70 80       	ld	r7, Z
    d428:	77 20       	and	r7, r7
    d42a:	41 f1       	breq	.+80     	; 0xd47c <sched_pop+0x17e>
    d42c:	87 2d       	mov	r24, r7
    d42e:	90 e0       	ldi	r25, 0x00	; 0
    d430:	01 97       	sbiw	r24, 0x01	; 1
    d432:	fc 01       	movw	r30, r24
    d434:	ee 0f       	add	r30, r30
    d436:	ff 1f       	adc	r31, r31
    d438:	ee 0f       	add	r30, r30
    d43a:	ff 1f       	adc	r31, r31
    d43c:	ee 0f       	add	r30, r30
    d43e:	ff 1f       	adc	r31, r31
    d440:	e8 1b       	sub	r30, r24
    d442:	f9 0b       	sbc	r31, r25
    d444:	eb 55       	subi	r30, 0x5B	; 91
    d446:	fa 4d       	sbci	r31, 0xDA	; 218
    d448:	20 81       	ld	r18, Z
    d44a:	20 ff       	sbrs	r18, 0
    d44c:	17 c0       	rjmp	.+46     	; 0xd47c <sched_pop+0x17e>
    d44e:	fc 01       	movw	r30, r24
    d450:	ee 0f       	add	r30, r30
    d452:	ff 1f       	adc	r31, r31
    d454:	ee 0f       	add	r30, r30
    d456:	ff 1f       	adc	r31, r31
    d458:	ee 0f       	add	r30, r30
    d45a:	ff 1f       	adc	r31, r31
    d45c:	e8 1b       	sub	r30, r24
    d45e:	f9 0b       	sbc	r31, r25
    d460:	e1 56       	subi	r30, 0x61	; 97
    d462:	fa 4d       	sbci	r31, 0xDA	; 218
    d464:	c0 80       	ld	r12, Z
    d466:	d1 80       	ldd	r13, Z+1	; 0x01
    d468:	e2 80       	ldd	r14, Z+2	; 0x02
    d46a:	f3 80       	ldd	r15, Z+3	; 0x03
    d46c:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <rtc_get_time>
    d470:	6c 15       	cp	r22, r12
    d472:	7d 05       	cpc	r23, r13
    d474:	8e 05       	cpc	r24, r14
    d476:	9f 05       	cpc	r25, r15
    d478:	08 f0       	brcs	.+2      	; 0xd47c <sched_pop+0x17e>
    d47a:	84 cf       	rjmp	.-248    	; 0xd384 <sched_pop+0x86>
    d47c:	83 e8       	ldi	r24, 0x83	; 131
    d47e:	96 e2       	ldi	r25, 0x26	; 38
    d480:	3e db       	rcall	.-2436   	; 0xcafe <sched_freeLock>
    d482:	c1 14       	cp	r12, r1
    d484:	d1 04       	cpc	r13, r1
    d486:	e1 04       	cpc	r14, r1
    d488:	f1 04       	cpc	r15, r1
    d48a:	99 f0       	breq	.+38     	; 0xd4b2 <sched_pop+0x1b4>
    d48c:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <rtc_get_time>
    d490:	8b 01       	movw	r16, r22
    d492:	9c 01       	movw	r18, r24
    d494:	0e 5f       	subi	r16, 0xFE	; 254
    d496:	1f 4f       	sbci	r17, 0xFF	; 255
    d498:	2f 4f       	sbci	r18, 0xFF	; 255
    d49a:	3f 4f       	sbci	r19, 0xFF	; 255
    d49c:	c7 01       	movw	r24, r14
    d49e:	b6 01       	movw	r22, r12
    d4a0:	c0 16       	cp	r12, r16
    d4a2:	d1 06       	cpc	r13, r17
    d4a4:	e2 06       	cpc	r14, r18
    d4a6:	f3 06       	cpc	r15, r19
    d4a8:	10 f4       	brcc	.+4      	; 0xd4ae <sched_pop+0x1b0>
    d4aa:	c9 01       	movw	r24, r18
    d4ac:	b8 01       	movw	r22, r16
    d4ae:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <rtc_set_alarm>
    d4b2:	80 91 7f 26 	lds	r24, 0x267F	; 0x80267f <g_sched_pop_again>
    d4b6:	88 23       	and	r24, r24
    d4b8:	51 f0       	breq	.+20     	; 0xd4ce <sched_pop+0x1d0>
    d4ba:	10 92 7f 26 	sts	0x267F, r1	; 0x80267f <g_sched_pop_again>
    d4be:	c5 01       	movw	r24, r10
    d4c0:	b4 01       	movw	r22, r8
    d4c2:	1d df       	rcall	.-454    	; 0xd2fe <sched_pop>
    d4c4:	04 c0       	rjmp	.+8      	; 0xd4ce <sched_pop+0x1d0>
    d4c6:	83 e8       	ldi	r24, 0x83	; 131
    d4c8:	96 e2       	ldi	r25, 0x26	; 38
    d4ca:	19 db       	rcall	.-2510   	; 0xcafe <sched_freeLock>
    d4cc:	f2 cf       	rjmp	.-28     	; 0xd4b2 <sched_pop+0x1b4>
    d4ce:	0f 90       	pop	r0
    d4d0:	df 91       	pop	r29
    d4d2:	cf 91       	pop	r28
    d4d4:	1f 91       	pop	r17
    d4d6:	0f 91       	pop	r16
    d4d8:	ff 90       	pop	r15
    d4da:	ef 90       	pop	r14
    d4dc:	df 90       	pop	r13
    d4de:	cf 90       	pop	r12
    d4e0:	bf 90       	pop	r11
    d4e2:	af 90       	pop	r10
    d4e4:	9f 90       	pop	r9
    d4e6:	8f 90       	pop	r8
    d4e8:	7f 90       	pop	r7
    d4ea:	08 95       	ret

0000d4ec <isr_rtc_alarm>:
    d4ec:	78 94       	sei
    d4ee:	07 cf       	rjmp	.-498    	; 0xd2fe <sched_pop>
    d4f0:	08 95       	ret

0000d4f2 <yield_ms>:
    d4f2:	cf 92       	push	r12
    d4f4:	ef 92       	push	r14
    d4f6:	0f 93       	push	r16
    d4f8:	1f 93       	push	r17
    d4fa:	cf 93       	push	r28
    d4fc:	df 93       	push	r29
    d4fe:	1f 92       	push	r1
    d500:	cd b7       	in	r28, 0x3d	; 61
    d502:	de b7       	in	r29, 0x3e	; 62
    d504:	2f b7       	in	r18, 0x3f	; 63
    d506:	29 83       	std	Y+1, r18	; 0x01
    d508:	f8 94       	cli
    d50a:	19 81       	ldd	r17, Y+1	; 0x01
    d50c:	78 94       	sei
    d50e:	21 e0       	ldi	r18, 0x01	; 1
    d510:	20 93 80 26 	sts	0x2680, r18	; 0x802680 <g_sched_yield>
    d514:	9c 01       	movw	r18, r24
    d516:	40 e0       	ldi	r20, 0x00	; 0
    d518:	50 e0       	ldi	r21, 0x00	; 0
    d51a:	c1 2c       	mov	r12, r1
    d51c:	e1 2c       	mov	r14, r1
    d51e:	01 e0       	ldi	r16, 0x01	; 1
    d520:	60 e0       	ldi	r22, 0x00	; 0
    d522:	8d e5       	ldi	r24, 0x5D	; 93
    d524:	9c e5       	ldi	r25, 0x5C	; 92
    d526:	1e db       	rcall	.-2500   	; 0xcb64 <sched_push>
    d528:	fa da       	rcall	.-2572   	; 0xcb1e <sched_doSleep>
    d52a:	80 91 80 26 	lds	r24, 0x2680	; 0x802680 <g_sched_yield>
    d52e:	81 11       	cpse	r24, r1
    d530:	fb cf       	rjmp	.-10     	; 0xd528 <yield_ms+0x36>
    d532:	1f bf       	out	0x3f, r17	; 63
    d534:	0f 90       	pop	r0
    d536:	df 91       	pop	r29
    d538:	cf 91       	pop	r28
    d53a:	1f 91       	pop	r17
    d53c:	0f 91       	pop	r16
    d53e:	ef 90       	pop	r14
    d540:	cf 90       	pop	r12
    d542:	08 95       	ret

0000d544 <__vector_4>:
    d544:	1f 92       	push	r1
    d546:	0f 92       	push	r0
    d548:	0f b6       	in	r0, 0x3f	; 63
    d54a:	0f 92       	push	r0
    d54c:	11 24       	eor	r1, r1
    d54e:	8f 93       	push	r24
    d550:	9f 93       	push	r25
    d552:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    d556:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    d55a:	80 93 7e 28 	sts	0x287E, r24	; 0x80287e <g_1pps_last_lo>
    d55e:	90 93 7f 28 	sts	0x287F, r25	; 0x80287f <g_1pps_last_lo+0x1>
    d562:	80 91 80 28 	lds	r24, 0x2880	; 0x802880 <g_milliseconds_cnt64>
    d566:	80 93 76 28 	sts	0x2876, r24	; 0x802876 <g_1pps_last_hi>
    d56a:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <g_milliseconds_cnt64+0x1>
    d56e:	80 93 77 28 	sts	0x2877, r24	; 0x802877 <g_1pps_last_hi+0x1>
    d572:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <g_milliseconds_cnt64+0x2>
    d576:	80 93 78 28 	sts	0x2878, r24	; 0x802878 <g_1pps_last_hi+0x2>
    d57a:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <g_milliseconds_cnt64+0x3>
    d57e:	80 93 79 28 	sts	0x2879, r24	; 0x802879 <g_1pps_last_hi+0x3>
    d582:	80 91 84 28 	lds	r24, 0x2884	; 0x802884 <g_milliseconds_cnt64+0x4>
    d586:	80 93 7a 28 	sts	0x287A, r24	; 0x80287a <g_1pps_last_hi+0x4>
    d58a:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <g_milliseconds_cnt64+0x5>
    d58e:	80 93 7b 28 	sts	0x287B, r24	; 0x80287b <g_1pps_last_hi+0x5>
    d592:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <g_milliseconds_cnt64+0x6>
    d596:	80 93 7c 28 	sts	0x287C, r24	; 0x80287c <g_1pps_last_hi+0x6>
    d59a:	80 91 87 28 	lds	r24, 0x2887	; 0x802887 <g_milliseconds_cnt64+0x7>
    d59e:	80 93 7d 28 	sts	0x287D, r24	; 0x80287d <g_1pps_last_hi+0x7>
    d5a2:	81 e0       	ldi	r24, 0x01	; 1
    d5a4:	80 93 75 28 	sts	0x2875, r24	; 0x802875 <g_1pps_last_new>
    d5a8:	9f 91       	pop	r25
    d5aa:	8f 91       	pop	r24
    d5ac:	0f 90       	pop	r0
    d5ae:	0f be       	out	0x3f, r0	; 63
    d5b0:	0f 90       	pop	r0
    d5b2:	1f 90       	pop	r1
    d5b4:	18 95       	reti

0000d5b6 <main>:
    d5b6:	cf 92       	push	r12
    d5b8:	df 92       	push	r13
    d5ba:	ef 92       	push	r14
    d5bc:	ff 92       	push	r15
    d5be:	cf 93       	push	r28
    d5c0:	40 e2       	ldi	r20, 0x20	; 32
    d5c2:	67 ee       	ldi	r22, 0xE7	; 231
    d5c4:	7d e2       	ldi	r23, 0x2D	; 45
    d5c6:	81 ee       	ldi	r24, 0xE1	; 225
    d5c8:	9d e2       	ldi	r25, 0x2D	; 45
    d5ca:	0e 94 28 25 	call	0x4a50	; 0x4a50 <fifo_init>
    d5ce:	c1 e0       	ldi	r28, 0x01	; 1
    d5d0:	c0 93 6f 28 	sts	0x286F, r28	; 0x80286f <g_workmode>
    d5d4:	e0 ea       	ldi	r30, 0xA0	; 160
    d5d6:	f0 e0       	ldi	r31, 0x00	; 0
    d5d8:	87 e0       	ldi	r24, 0x07	; 7
    d5da:	82 83       	std	Z+2, r24	; 0x02
    d5dc:	82 83       	std	Z+2, r24	; 0x02
    d5de:	82 81       	ldd	r24, Z+2	; 0x02
    d5e0:	8f 77       	andi	r24, 0x7F	; 127
    d5e2:	82 83       	std	Z+2, r24	; 0x02
    d5e4:	11 82       	std	Z+1, r1	; 0x01
    d5e6:	bc d0       	rcall	.+376    	; 0xd760 <sysclk_init>
    d5e8:	e7 e6       	ldi	r30, 0x67	; 103
    d5ea:	fe e2       	ldi	r31, 0x2E	; 46
    d5ec:	10 82       	st	Z, r1
    d5ee:	11 82       	std	Z+1, r1	; 0x01
    d5f0:	12 82       	std	Z+2, r1	; 0x02
    d5f2:	13 82       	std	Z+3, r1	; 0x03
    d5f4:	14 82       	std	Z+4, r1	; 0x04
    d5f6:	c5 83       	std	Z+5, r28	; 0x05
    d5f8:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <rtc_init>
    d5fc:	86 e7       	ldi	r24, 0x76	; 118
    d5fe:	9a e6       	ldi	r25, 0x6A	; 106
    d600:	0e 94 e7 26 	call	0x4dce	; 0x4dce <rtc_set_callback>
    d604:	c0 93 e2 07 	sts	0x07E2, r28	; 0x8007e2 <__TEXT_REGION_LENGTH__+0x7007e2>
    d608:	c0 93 f0 07 	sts	0x07F0, r28	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7007f0>
    d60c:	c0 93 ea 07 	sts	0x07EA, r28	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7007ea>
    d610:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7007eb>
    d614:	c0 93 e9 07 	sts	0x07E9, r28	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7007e9>
    d618:	62 e0       	ldi	r22, 0x02	; 2
    d61a:	80 e0       	ldi	r24, 0x00	; 0
    d61c:	22 d1       	rcall	.+580    	; 0xd862 <sysclk_enable_module>
    d61e:	e0 e8       	ldi	r30, 0x80	; 128
    d620:	f1 e0       	ldi	r31, 0x01	; 1
    d622:	86 ec       	ldi	r24, 0xC6	; 198
    d624:	80 83       	st	Z, r24
    d626:	10 86       	std	Z+8, r1	; 0x08
    d628:	81 83       	std	Z+1, r24	; 0x01
    d62a:	11 86       	std	Z+9, r1	; 0x09
    d62c:	82 83       	std	Z+2, r24	; 0x02
    d62e:	12 86       	std	Z+10, r1	; 0x0a
    d630:	83 83       	std	Z+3, r24	; 0x03
    d632:	13 86       	std	Z+11, r1	; 0x0b
    d634:	88 ee       	ldi	r24, 0xE8	; 232
    d636:	84 83       	std	Z+4, r24	; 0x04
    d638:	14 86       	std	Z+12, r1	; 0x0c
    d63a:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <tc_init>
    d63e:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <serial_init>
    d642:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    d646:	81 11       	cpse	r24, r1
    d648:	0e 94 ed 62 	call	0xc5da	; 0xc5da <adc_init>
    d64c:	80 91 89 28 	lds	r24, 0x2889	; 0x802889 <g_dac_enabled>
    d650:	81 11       	cpse	r24, r1
    d652:	0e 94 6f 61 	call	0xc2de	; 0xc2de <dac_init>
    d656:	0e 94 61 33 	call	0x66c2	; 0x66c2 <twi_init>
    d65a:	0e 94 f1 45 	call	0x8be2	; 0x8be2 <board_init>
    d65e:	80 e0       	ldi	r24, 0x00	; 0
    d660:	0e 94 22 25 	call	0x4a44	; 0x4a44 <nvm_init>
    d664:	78 94       	sei
    d666:	0e 94 40 61 	call	0xc280	; 0xc280 <tc_start>
    d66a:	80 91 89 28 	lds	r24, 0x2889	; 0x802889 <g_dac_enabled>
    d66e:	81 11       	cpse	r24, r1
    d670:	0e 94 38 62 	call	0xc470	; 0xc470 <dac_start>
    d674:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <g_adc_enabled>
    d678:	88 23       	and	r24, r24
    d67a:	09 f4       	brne	.+2      	; 0xd67e <main+0xc8>
    d67c:	57 c0       	rjmp	.+174    	; 0xd72c <main+0x176>
    d67e:	80 e0       	ldi	r24, 0x00	; 0
    d680:	92 e0       	ldi	r25, 0x02	; 2
    d682:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <adc_enable>
    d686:	80 e4       	ldi	r24, 0x40	; 64
    d688:	92 e0       	ldi	r25, 0x02	; 2
    d68a:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <adc_enable>
    d68e:	0e 94 3e 20 	call	0x407c	; 0x407c <usb_init>
    d692:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <twi_start>
    d696:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <serial_start>
    d69a:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <printHelp>
    d69e:	82 e0       	ldi	r24, 0x02	; 2
    d6a0:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <twi2_set_leds>
    d6a4:	81 e0       	ldi	r24, 0x01	; 1
    d6a6:	80 93 fa 26 	sts	0x26FA, r24	; 0x8026fa <g_twi2_lcd_repaint>
    d6aa:	82 e0       	ldi	r24, 0x02	; 2
    d6ac:	80 93 6f 28 	sts	0x286F, r24	; 0x80286f <g_workmode>
    d6b0:	82 e0       	ldi	r24, 0x02	; 2
    d6b2:	82 30       	cpi	r24, 0x02	; 2
    d6b4:	71 f4       	brne	.+28     	; 0xd6d2 <main+0x11c>
    d6b6:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <rtc_get_time>
    d6ba:	6b 01       	movw	r12, r22
    d6bc:	7c 01       	movw	r14, r24
    d6be:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <task_serial>
    d6c2:	c7 01       	movw	r24, r14
    d6c4:	b6 01       	movw	r22, r12
    d6c6:	0e 94 6a 44 	call	0x88d4	; 0x88d4 <task_twi>
    d6ca:	c7 01       	movw	r24, r14
    d6cc:	b6 01       	movw	r22, r12
    d6ce:	0e 94 d5 20 	call	0x41aa	; 0x41aa <task_usb>
    d6d2:	80 e0       	ldi	r24, 0x00	; 0
    d6d4:	90 e0       	ldi	r25, 0x00	; 0
    d6d6:	0d df       	rcall	.-486    	; 0xd4f2 <yield_ms>
    d6d8:	80 91 6f 28 	lds	r24, 0x286F	; 0x80286f <g_workmode>
    d6dc:	81 11       	cpse	r24, r1
    d6de:	e9 cf       	rjmp	.-46     	; 0xd6b2 <main+0xfc>
    d6e0:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <twi2_set_leds>
    d6e4:	f8 94       	cli
    d6e6:	f8 94       	cli
    d6e8:	80 91 67 2e 	lds	r24, 0x2E67	; 0x802e67 <sleepmgr_locks>
    d6ec:	81 11       	cpse	r24, r1
    d6ee:	09 c0       	rjmp	.+18     	; 0xd702 <main+0x14c>
    d6f0:	a8 e6       	ldi	r26, 0x68	; 104
    d6f2:	be e2       	ldi	r27, 0x2E	; 46
    d6f4:	e0 e0       	ldi	r30, 0x00	; 0
    d6f6:	ef 5f       	subi	r30, 0xFF	; 255
    d6f8:	8d 91       	ld	r24, X+
    d6fa:	88 23       	and	r24, r24
    d6fc:	e1 f3       	breq	.-8      	; 0xd6f6 <main+0x140>
    d6fe:	e1 11       	cpse	r30, r1
    d700:	02 c0       	rjmp	.+4      	; 0xd706 <main+0x150>
    d702:	78 94       	sei
    d704:	25 c0       	rjmp	.+74     	; 0xd750 <main+0x19a>
    d706:	a8 e4       	ldi	r26, 0x48	; 72
    d708:	b0 e0       	ldi	r27, 0x00	; 0
    d70a:	8c 91       	ld	r24, X
    d70c:	f0 e0       	ldi	r31, 0x00	; 0
    d70e:	ec 59       	subi	r30, 0x9C	; 156
    d710:	ff 4d       	sbci	r31, 0xDF	; 223
    d712:	81 7f       	andi	r24, 0xF1	; 241
    d714:	90 81       	ld	r25, Z
    d716:	89 2b       	or	r24, r25
    d718:	8c 93       	st	X, r24
    d71a:	8c 91       	ld	r24, X
    d71c:	81 60       	ori	r24, 0x01	; 1
    d71e:	8c 93       	st	X, r24
    d720:	78 94       	sei
    d722:	88 95       	sleep
    d724:	8c 91       	ld	r24, X
    d726:	8e 7f       	andi	r24, 0xFE	; 254
    d728:	8c 93       	st	X, r24
    d72a:	12 c0       	rjmp	.+36     	; 0xd750 <main+0x19a>
    d72c:	0e 94 3e 20 	call	0x407c	; 0x407c <usb_init>
    d730:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <twi_start>
    d734:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <serial_start>
    d738:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <printHelp>
    d73c:	82 e0       	ldi	r24, 0x02	; 2
    d73e:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <twi2_set_leds>
    d742:	81 e0       	ldi	r24, 0x01	; 1
    d744:	80 93 fa 26 	sts	0x26FA, r24	; 0x8026fa <g_twi2_lcd_repaint>
    d748:	82 e0       	ldi	r24, 0x02	; 2
    d74a:	80 93 6f 28 	sts	0x286F, r24	; 0x80286f <g_workmode>
    d74e:	b0 cf       	rjmp	.-160    	; 0xd6b0 <main+0xfa>
    d750:	80 e0       	ldi	r24, 0x00	; 0
    d752:	90 e0       	ldi	r25, 0x00	; 0
    d754:	cf 91       	pop	r28
    d756:	ff 90       	pop	r15
    d758:	ef 90       	pop	r14
    d75a:	df 90       	pop	r13
    d75c:	cf 90       	pop	r12
    d75e:	08 95       	ret

0000d760 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    d760:	cf 93       	push	r28
    d762:	df 93       	push	r29
    d764:	cd b7       	in	r28, 0x3d	; 61
    d766:	de b7       	in	r29, 0x3e	; 62
    d768:	28 97       	sbiw	r28, 0x08	; 8
    d76a:	cd bf       	out	0x3d, r28	; 61
    d76c:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    d76e:	8f ef       	ldi	r24, 0xFF	; 255
    d770:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    d774:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    d778:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    d77c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    d780:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    d784:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    d788:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    d78c:	61 e0       	ldi	r22, 0x01	; 1
    d78e:	81 e4       	ldi	r24, 0x41	; 65
    d790:	90 e0       	ldi	r25, 0x00	; 0
    d792:	0e 94 cb 74 	call	0xe996	; 0xe996 <ccp_write_io>
    d796:	6c e1       	ldi	r22, 0x1C	; 28
    d798:	70 e0       	ldi	r23, 0x00	; 0
    d79a:	82 e0       	ldi	r24, 0x02	; 2
    d79c:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    d7a0:	8a 83       	std	Y+2, r24	; 0x02
    d7a2:	6d e1       	ldi	r22, 0x1D	; 29
    d7a4:	70 e0       	ldi	r23, 0x00	; 0
    d7a6:	82 e0       	ldi	r24, 0x02	; 2
    d7a8:	0e 94 c1 74 	call	0xe982	; 0xe982 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    d7ac:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    d7ae:	89 81       	ldd	r24, Y+1	; 0x01
    d7b0:	9a 81       	ldd	r25, Y+2	; 0x02
    d7b2:	01 96       	adiw	r24, 0x01	; 1
    d7b4:	21 f4       	brne	.+8      	; 0xd7be <sysclk_init+0x5e>
		cal = 0x2340;
    d7b6:	80 e4       	ldi	r24, 0x40	; 64
    d7b8:	93 e2       	ldi	r25, 0x23	; 35
    d7ba:	89 83       	std	Y+1, r24	; 0x01
    d7bc:	9a 83       	std	Y+2, r25	; 0x02
    d7be:	89 81       	ldd	r24, Y+1	; 0x01
    d7c0:	9a 81       	ldd	r25, Y+2	; 0x02
    d7c2:	8b 83       	std	Y+3, r24	; 0x03
    d7c4:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    d7c6:	e0 e6       	ldi	r30, 0x60	; 96
    d7c8:	f0 e0       	ldi	r31, 0x00	; 0
    d7ca:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    d7cc:	8c 81       	ldd	r24, Y+4	; 0x04
    d7ce:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    d7d0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    d7d4:	84 fd       	sbrc	r24, 4
    d7d6:	21 c0       	rjmp	.+66     	; 0xd81a <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    d7d8:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    d7dc:	83 fd       	sbrc	r24, 3
    d7de:	0e c0       	rjmp	.+28     	; 0xd7fc <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    d7e0:	e0 e5       	ldi	r30, 0x50	; 80
    d7e2:	f0 e0       	ldi	r31, 0x00	; 0
    d7e4:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d7e6:	8f b7       	in	r24, 0x3f	; 63
    d7e8:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    d7ea:	f8 94       	cli
	return flags;
    d7ec:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    d7ee:	80 81       	ld	r24, Z
    d7f0:	88 60       	ori	r24, 0x08	; 8
    d7f2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d7f4:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    d7f6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    d7f8:	83 ff       	sbrs	r24, 3
    d7fa:	fd cf       	rjmp	.-6      	; 0xd7f6 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d7fc:	8f b7       	in	r24, 0x3f	; 63
    d7fe:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    d800:	f8 94       	cli
	return flags;
    d802:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    d804:	e0 e5       	ldi	r30, 0x50	; 80
    d806:	f0 e0       	ldi	r31, 0x00	; 0
    d808:	83 ec       	ldi	r24, 0xC3	; 195
    d80a:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    d80c:	80 81       	ld	r24, Z
    d80e:	80 61       	ori	r24, 0x10	; 16
    d810:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d812:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    d814:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    d816:	84 ff       	sbrs	r24, 4
    d818:	fd cf       	rjmp	.-6      	; 0xd814 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    d81a:	64 e0       	ldi	r22, 0x04	; 4
    d81c:	80 e4       	ldi	r24, 0x40	; 64
    d81e:	90 e0       	ldi	r25, 0x00	; 0
    d820:	0e 94 cb 74 	call	0xe996	; 0xe996 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d824:	8f b7       	in	r24, 0x3f	; 63
    d826:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    d828:	f8 94       	cli
	return flags;
    d82a:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    d82c:	e0 e5       	ldi	r30, 0x50	; 80
    d82e:	f0 e0       	ldi	r31, 0x00	; 0
    d830:	80 81       	ld	r24, Z
    d832:	8e 7f       	andi	r24, 0xFE	; 254
    d834:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d836:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    d838:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d83a:	8f b7       	in	r24, 0x3f	; 63
    d83c:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    d83e:	f8 94       	cli
	return flags;
    d840:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    d842:	80 81       	ld	r24, Z
    d844:	88 60       	ori	r24, 0x08	; 8
    d846:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d848:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    d84a:	81 81       	ldd	r24, Z+1	; 0x01
    d84c:	83 ff       	sbrs	r24, 3
    d84e:	fd cf       	rjmp	.-6      	; 0xd84a <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    d850:	8b e0       	ldi	r24, 0x0B	; 11
    d852:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    d856:	28 96       	adiw	r28, 0x08	; 8
    d858:	cd bf       	out	0x3d, r28	; 61
    d85a:	de bf       	out	0x3e, r29	; 62
    d85c:	df 91       	pop	r29
    d85e:	cf 91       	pop	r28
    d860:	08 95       	ret

0000d862 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    d862:	cf 93       	push	r28
    d864:	df 93       	push	r29
    d866:	1f 92       	push	r1
    d868:	cd b7       	in	r28, 0x3d	; 61
    d86a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d86c:	9f b7       	in	r25, 0x3f	; 63
    d86e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    d870:	f8 94       	cli
	return flags;
    d872:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    d874:	e8 2f       	mov	r30, r24
    d876:	f0 e0       	ldi	r31, 0x00	; 0
    d878:	e0 59       	subi	r30, 0x90	; 144
    d87a:	ff 4f       	sbci	r31, 0xFF	; 255
    d87c:	60 95       	com	r22
    d87e:	80 81       	ld	r24, Z
    d880:	68 23       	and	r22, r24
    d882:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d884:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    d886:	0f 90       	pop	r0
    d888:	df 91       	pop	r29
    d88a:	cf 91       	pop	r28
    d88c:	08 95       	ret

0000d88e <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    d88e:	cf 93       	push	r28
    d890:	df 93       	push	r29
    d892:	1f 92       	push	r1
    d894:	cd b7       	in	r28, 0x3d	; 61
    d896:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d898:	9f b7       	in	r25, 0x3f	; 63
    d89a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    d89c:	f8 94       	cli
	return flags;
    d89e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    d8a0:	e8 2f       	mov	r30, r24
    d8a2:	f0 e0       	ldi	r31, 0x00	; 0
    d8a4:	e0 59       	subi	r30, 0x90	; 144
    d8a6:	ff 4f       	sbci	r31, 0xFF	; 255
    d8a8:	80 81       	ld	r24, Z
    d8aa:	68 2b       	or	r22, r24
    d8ac:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d8ae:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    d8b0:	0f 90       	pop	r0
    d8b2:	df 91       	pop	r29
    d8b4:	cf 91       	pop	r28
    d8b6:	08 95       	ret

0000d8b8 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    d8b8:	cf 93       	push	r28
    d8ba:	df 93       	push	r29
    d8bc:	1f 92       	push	r1
    d8be:	1f 92       	push	r1
    d8c0:	cd b7       	in	r28, 0x3d	; 61
    d8c2:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    d8c4:	86 30       	cpi	r24, 0x06	; 6
    d8c6:	11 f0       	breq	.+4      	; 0xd8cc <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    d8c8:	60 e0       	ldi	r22, 0x00	; 0
    d8ca:	01 c0       	rjmp	.+2      	; 0xd8ce <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    d8cc:	68 e1       	ldi	r22, 0x18	; 24
    d8ce:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    d8d2:	81 fd       	sbrc	r24, 1
    d8d4:	2a c0       	rjmp	.+84     	; 0xd92a <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d8d6:	8f b7       	in	r24, 0x3f	; 63
    d8d8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    d8da:	f8 94       	cli
	return flags;
    d8dc:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    d8de:	e0 e5       	ldi	r30, 0x50	; 80
    d8e0:	f0 e0       	ldi	r31, 0x00	; 0
    d8e2:	80 81       	ld	r24, Z
    d8e4:	82 60       	ori	r24, 0x02	; 2
    d8e6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d8e8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    d8ea:	81 81       	ldd	r24, Z+1	; 0x01
    d8ec:	81 ff       	sbrs	r24, 1
    d8ee:	fd cf       	rjmp	.-6      	; 0xd8ea <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d8f0:	8f b7       	in	r24, 0x3f	; 63
    d8f2:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    d8f4:	f8 94       	cli
	return flags;
    d8f6:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    d8f8:	a0 e5       	ldi	r26, 0x50	; 80
    d8fa:	b0 e0       	ldi	r27, 0x00	; 0
    d8fc:	16 96       	adiw	r26, 0x06	; 6
    d8fe:	8c 91       	ld	r24, X
    d900:	16 97       	sbiw	r26, 0x06	; 6
    d902:	89 7f       	andi	r24, 0xF9	; 249
    d904:	16 96       	adiw	r26, 0x06	; 6
    d906:	8c 93       	st	X, r24
    d908:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    d90a:	e0 e6       	ldi	r30, 0x60	; 96
    d90c:	f0 e0       	ldi	r31, 0x00	; 0
    d90e:	80 e8       	ldi	r24, 0x80	; 128
    d910:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    d912:	8b eb       	ldi	r24, 0xBB	; 187
    d914:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    d916:	16 96       	adiw	r26, 0x06	; 6
    d918:	8c 91       	ld	r24, X
    d91a:	16 97       	sbiw	r26, 0x06	; 6
    d91c:	84 60       	ori	r24, 0x04	; 4
    d91e:	16 96       	adiw	r26, 0x06	; 6
    d920:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    d922:	80 81       	ld	r24, Z
    d924:	81 60       	ori	r24, 0x01	; 1
    d926:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d928:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    d92a:	63 60       	ori	r22, 0x03	; 3
    d92c:	84 e4       	ldi	r24, 0x44	; 68
    d92e:	90 e0       	ldi	r25, 0x00	; 0
    d930:	0e 94 cb 74 	call	0xe996	; 0xe996 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    d934:	60 e4       	ldi	r22, 0x40	; 64
    d936:	80 e0       	ldi	r24, 0x00	; 0
    d938:	94 df       	rcall	.-216    	; 0xd862 <sysclk_enable_module>
}
    d93a:	0f 90       	pop	r0
    d93c:	0f 90       	pop	r0
    d93e:	df 91       	pop	r29
    d940:	cf 91       	pop	r28
    d942:	08 95       	ret

0000d944 <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    d944:	60 e4       	ldi	r22, 0x40	; 64
    d946:	80 e0       	ldi	r24, 0x00	; 0
    d948:	a2 df       	rcall	.-188    	; 0xd88e <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    d94a:	60 e0       	ldi	r22, 0x00	; 0
    d94c:	84 e4       	ldi	r24, 0x44	; 68
    d94e:	90 e0       	ldi	r25, 0x00	; 0
    d950:	0c 94 cb 74 	jmp	0xe996	; 0xe996 <ccp_write_io>
    d954:	08 95       	ret

0000d956 <udi_cdc_comm_disable>:
    d956:	80 91 a0 2d 	lds	r24, 0x2DA0	; 0x802da0 <udi_cdc_nb_comm_enabled>
    d95a:	81 50       	subi	r24, 0x01	; 1
    d95c:	80 93 a0 2d 	sts	0x2DA0, r24	; 0x802da0 <udi_cdc_nb_comm_enabled>
    d960:	08 95       	ret

0000d962 <udi_cdc_data_setup>:
    d962:	80 e0       	ldi	r24, 0x00	; 0
    d964:	08 95       	ret

0000d966 <udi_cdc_getsetting>:
    d966:	80 e0       	ldi	r24, 0x00	; 0
    d968:	08 95       	ret

0000d96a <udi_cdc_line_coding_received>:
    d96a:	6e ea       	ldi	r22, 0xAE	; 174
    d96c:	7d e2       	ldi	r23, 0x2D	; 45
    d96e:	80 e0       	ldi	r24, 0x00	; 0
    d970:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <usb_callback_config>
    d974:	08 95       	ret

0000d976 <udi_cdc_comm_enable>:
    d976:	10 92 a0 2d 	sts	0x2DA0, r1	; 0x802da0 <udi_cdc_nb_comm_enabled>
    d97a:	10 92 ac 2d 	sts	0x2DAC, r1	; 0x802dac <udi_cdc_state>
    d97e:	10 92 ad 2d 	sts	0x2DAD, r1	; 0x802dad <udi_cdc_state+0x1>
    d982:	e2 ea       	ldi	r30, 0xA2	; 162
    d984:	fd e2       	ldi	r31, 0x2D	; 45
    d986:	81 ea       	ldi	r24, 0xA1	; 161
    d988:	80 83       	st	Z, r24
    d98a:	80 e2       	ldi	r24, 0x20	; 32
    d98c:	81 83       	std	Z+1, r24	; 0x01
    d98e:	12 82       	std	Z+2, r1	; 0x02
    d990:	13 82       	std	Z+3, r1	; 0x03
    d992:	14 82       	std	Z+4, r1	; 0x04
    d994:	15 82       	std	Z+5, r1	; 0x05
    d996:	82 e0       	ldi	r24, 0x02	; 2
    d998:	90 e0       	ldi	r25, 0x00	; 0
    d99a:	86 83       	std	Z+6, r24	; 0x06
    d99c:	97 83       	std	Z+7, r25	; 0x07
    d99e:	10 86       	std	Z+8, r1	; 0x08
    d9a0:	11 86       	std	Z+9, r1	; 0x09
    d9a2:	ee ea       	ldi	r30, 0xAE	; 174
    d9a4:	fd e2       	ldi	r31, 0x2D	; 45
    d9a6:	80 e0       	ldi	r24, 0x00	; 0
    d9a8:	92 ec       	ldi	r25, 0xC2	; 194
    d9aa:	a1 e0       	ldi	r26, 0x01	; 1
    d9ac:	b0 e0       	ldi	r27, 0x00	; 0
    d9ae:	80 83       	st	Z, r24
    d9b0:	91 83       	std	Z+1, r25	; 0x01
    d9b2:	a2 83       	std	Z+2, r26	; 0x02
    d9b4:	b3 83       	std	Z+3, r27	; 0x03
    d9b6:	14 82       	std	Z+4, r1	; 0x04
    d9b8:	15 82       	std	Z+5, r1	; 0x05
    d9ba:	88 e0       	ldi	r24, 0x08	; 8
    d9bc:	86 83       	std	Z+6, r24	; 0x06
    d9be:	bf 01       	movw	r22, r30
    d9c0:	80 e0       	ldi	r24, 0x00	; 0
    d9c2:	0e 94 cb 20 	call	0x4196	; 0x4196 <usb_callback_config>
    d9c6:	0e 94 c4 20 	call	0x4188	; 0x4188 <usb_callback_cdc_enable>
    d9ca:	88 23       	and	r24, r24
    d9cc:	29 f0       	breq	.+10     	; 0xd9d8 <udi_cdc_comm_enable+0x62>
    d9ce:	90 91 a0 2d 	lds	r25, 0x2DA0	; 0x802da0 <udi_cdc_nb_comm_enabled>
    d9d2:	9f 5f       	subi	r25, 0xFF	; 255
    d9d4:	90 93 a0 2d 	sts	0x2DA0, r25	; 0x802da0 <udi_cdc_nb_comm_enabled>
    d9d8:	08 95       	ret

0000d9da <udi_cdc_tx_send>:
    d9da:	ff 92       	push	r15
    d9dc:	0f 93       	push	r16
    d9de:	1f 93       	push	r17
    d9e0:	cf 93       	push	r28
    d9e2:	df 93       	push	r29
    d9e4:	1f 92       	push	r1
    d9e6:	cd b7       	in	r28, 0x3d	; 61
    d9e8:	de b7       	in	r29, 0x3e	; 62
    d9ea:	80 91 8d 28 	lds	r24, 0x288D	; 0x80288d <udi_cdc_tx_trans_ongoing>
    d9ee:	81 11       	cpse	r24, r1
    d9f0:	9f c0       	rjmp	.+318    	; 0xdb30 <udi_cdc_tx_send+0x156>
    d9f2:	0e 94 de 56 	call	0xadbc	; 0xadbc <udd_is_high_speed>
    d9f6:	88 23       	and	r24, r24
    d9f8:	51 f0       	breq	.+20     	; 0xda0e <udi_cdc_tx_send+0x34>
    d9fa:	00 91 8e 28 	lds	r16, 0x288E	; 0x80288e <udi_cdc_tx_sof_num>
    d9fe:	10 91 8f 28 	lds	r17, 0x288F	; 0x80288f <udi_cdc_tx_sof_num+0x1>
    da02:	0e 94 eb 56 	call	0xadd6	; 0xadd6 <udd_get_micro_frame_number>
    da06:	08 17       	cp	r16, r24
    da08:	19 07       	cpc	r17, r25
    da0a:	59 f4       	brne	.+22     	; 0xda22 <udi_cdc_tx_send+0x48>
    da0c:	91 c0       	rjmp	.+290    	; 0xdb30 <udi_cdc_tx_send+0x156>
    da0e:	00 91 8e 28 	lds	r16, 0x288E	; 0x80288e <udi_cdc_tx_sof_num>
    da12:	10 91 8f 28 	lds	r17, 0x288F	; 0x80288f <udi_cdc_tx_sof_num+0x1>
    da16:	0e 94 e6 56 	call	0xadcc	; 0xadcc <udd_get_frame_number>
    da1a:	08 17       	cp	r16, r24
    da1c:	19 07       	cpc	r17, r25
    da1e:	09 f4       	brne	.+2      	; 0xda22 <udi_cdc_tx_send+0x48>
    da20:	87 c0       	rjmp	.+270    	; 0xdb30 <udi_cdc_tx_send+0x156>
    da22:	8f b7       	in	r24, 0x3f	; 63
    da24:	89 83       	std	Y+1, r24	; 0x01
    da26:	f8 94       	cli
    da28:	19 81       	ldd	r17, Y+1	; 0x01
    da2a:	00 91 90 28 	lds	r16, 0x2890	; 0x802890 <udi_cdc_tx_buf_sel>
    da2e:	e0 2f       	mov	r30, r16
    da30:	f0 e0       	ldi	r31, 0x00	; 0
    da32:	ee 0f       	add	r30, r30
    da34:	ff 1f       	adc	r31, r31
    da36:	ef 56       	subi	r30, 0x6F	; 111
    da38:	f7 4d       	sbci	r31, 0xD7	; 215
    da3a:	80 81       	ld	r24, Z
    da3c:	91 81       	ldd	r25, Z+1	; 0x01
    da3e:	89 2b       	or	r24, r25
    da40:	09 f5       	brne	.+66     	; 0xda84 <udi_cdc_tx_send+0xaa>
    da42:	80 91 8a 28 	lds	r24, 0x288A	; 0x80288a <sof_zlp_counter.5059>
    da46:	90 91 8b 28 	lds	r25, 0x288B	; 0x80288b <sof_zlp_counter.5059+0x1>
    da4a:	01 96       	adiw	r24, 0x01	; 1
    da4c:	80 93 8a 28 	sts	0x288A, r24	; 0x80288a <sof_zlp_counter.5059>
    da50:	90 93 8b 28 	sts	0x288B, r25	; 0x80288b <sof_zlp_counter.5059+0x1>
    da54:	0e 94 de 56 	call	0xadbc	; 0xadbc <udd_is_high_speed>
    da58:	81 11       	cpse	r24, r1
    da5a:	07 c0       	rjmp	.+14     	; 0xda6a <udi_cdc_tx_send+0x90>
    da5c:	80 91 8a 28 	lds	r24, 0x288A	; 0x80288a <sof_zlp_counter.5059>
    da60:	90 91 8b 28 	lds	r25, 0x288B	; 0x80288b <sof_zlp_counter.5059+0x1>
    da64:	84 36       	cpi	r24, 0x64	; 100
    da66:	91 05       	cpc	r25, r1
    da68:	58 f0       	brcs	.+22     	; 0xda80 <udi_cdc_tx_send+0xa6>
    da6a:	0e 94 de 56 	call	0xadbc	; 0xadbc <udd_is_high_speed>
    da6e:	88 23       	and	r24, r24
    da70:	49 f0       	breq	.+18     	; 0xda84 <udi_cdc_tx_send+0xaa>
    da72:	80 91 8a 28 	lds	r24, 0x288A	; 0x80288a <sof_zlp_counter.5059>
    da76:	90 91 8b 28 	lds	r25, 0x288B	; 0x80288b <sof_zlp_counter.5059+0x1>
    da7a:	80 32       	cpi	r24, 0x20	; 32
    da7c:	93 40       	sbci	r25, 0x03	; 3
    da7e:	10 f4       	brcc	.+4      	; 0xda84 <udi_cdc_tx_send+0xaa>
    da80:	1f bf       	out	0x3f, r17	; 63
    da82:	56 c0       	rjmp	.+172    	; 0xdb30 <udi_cdc_tx_send+0x156>
    da84:	10 92 8a 28 	sts	0x288A, r1	; 0x80288a <sof_zlp_counter.5059>
    da88:	10 92 8b 28 	sts	0x288B, r1	; 0x80288b <sof_zlp_counter.5059+0x1>
    da8c:	80 91 8c 28 	lds	r24, 0x288C	; 0x80288c <udi_cdc_tx_both_buf_to_send>
    da90:	81 11       	cpse	r24, r1
    da92:	06 c0       	rjmp	.+12     	; 0xdaa0 <udi_cdc_tx_send+0xc6>
    da94:	81 e0       	ldi	r24, 0x01	; 1
    da96:	01 11       	cpse	r16, r1
    da98:	80 e0       	ldi	r24, 0x00	; 0
    da9a:	80 93 90 28 	sts	0x2890, r24	; 0x802890 <udi_cdc_tx_buf_sel>
    da9e:	04 c0       	rjmp	.+8      	; 0xdaa8 <udi_cdc_tx_send+0xce>
    daa0:	81 e0       	ldi	r24, 0x01	; 1
    daa2:	01 11       	cpse	r16, r1
    daa4:	80 e0       	ldi	r24, 0x00	; 0
    daa6:	08 2f       	mov	r16, r24
    daa8:	81 e0       	ldi	r24, 0x01	; 1
    daaa:	80 93 8d 28 	sts	0x288D, r24	; 0x80288d <udi_cdc_tx_trans_ongoing>
    daae:	1f bf       	out	0x3f, r17	; 63
    dab0:	10 e0       	ldi	r17, 0x00	; 0
    dab2:	f8 01       	movw	r30, r16
    dab4:	ee 0f       	add	r30, r30
    dab6:	ff 1f       	adc	r31, r31
    dab8:	ef 56       	subi	r30, 0x6F	; 111
    daba:	f7 4d       	sbci	r31, 0xD7	; 215
    dabc:	80 81       	ld	r24, Z
    dabe:	91 81       	ldd	r25, Z+1	; 0x01
    dac0:	ff 24       	eor	r15, r15
    dac2:	f3 94       	inc	r15
    dac4:	80 34       	cpi	r24, 0x40	; 64
    dac6:	21 e0       	ldi	r18, 0x01	; 1
    dac8:	92 07       	cpc	r25, r18
    daca:	09 f4       	brne	.+2      	; 0xdace <udi_cdc_tx_send+0xf4>
    dacc:	f1 2c       	mov	r15, r1
    dace:	80 34       	cpi	r24, 0x40	; 64
    dad0:	91 40       	sbci	r25, 0x01	; 1
    dad2:	91 f0       	breq	.+36     	; 0xdaf8 <udi_cdc_tx_send+0x11e>
    dad4:	0e 94 de 56 	call	0xadbc	; 0xadbc <udd_is_high_speed>
    dad8:	88 23       	and	r24, r24
    dada:	39 f0       	breq	.+14     	; 0xdaea <udi_cdc_tx_send+0x110>
    dadc:	0e 94 eb 56 	call	0xadd6	; 0xadd6 <udd_get_micro_frame_number>
    dae0:	80 93 8e 28 	sts	0x288E, r24	; 0x80288e <udi_cdc_tx_sof_num>
    dae4:	90 93 8f 28 	sts	0x288F, r25	; 0x80288f <udi_cdc_tx_sof_num+0x1>
    dae8:	0b c0       	rjmp	.+22     	; 0xdb00 <udi_cdc_tx_send+0x126>
    daea:	0e 94 e6 56 	call	0xadcc	; 0xadcc <udd_get_frame_number>
    daee:	80 93 8e 28 	sts	0x288E, r24	; 0x80288e <udi_cdc_tx_sof_num>
    daf2:	90 93 8f 28 	sts	0x288F, r25	; 0x80288f <udi_cdc_tx_sof_num+0x1>
    daf6:	04 c0       	rjmp	.+8      	; 0xdb00 <udi_cdc_tx_send+0x126>
    daf8:	10 92 8e 28 	sts	0x288E, r1	; 0x80288e <udi_cdc_tx_sof_num>
    dafc:	10 92 8f 28 	sts	0x288F, r1	; 0x80288f <udi_cdc_tx_sof_num+0x1>
    db00:	f8 01       	movw	r30, r16
    db02:	ee 0f       	add	r30, r30
    db04:	ff 1f       	adc	r31, r31
    db06:	ef 56       	subi	r30, 0x6F	; 111
    db08:	f7 4d       	sbci	r31, 0xD7	; 215
    db0a:	20 81       	ld	r18, Z
    db0c:	31 81       	ldd	r19, Z+1	; 0x01
    db0e:	80 e4       	ldi	r24, 0x40	; 64
    db10:	91 e0       	ldi	r25, 0x01	; 1
    db12:	08 9f       	mul	r16, r24
    db14:	a0 01       	movw	r20, r0
    db16:	09 9f       	mul	r16, r25
    db18:	50 0d       	add	r21, r0
    db1a:	18 9f       	mul	r17, r24
    db1c:	50 0d       	add	r21, r0
    db1e:	11 24       	eor	r1, r1
    db20:	4a 56       	subi	r20, 0x6A	; 106
    db22:	57 4d       	sbci	r21, 0xD7	; 215
    db24:	02 ea       	ldi	r16, 0xA2	; 162
    db26:	1d e6       	ldi	r17, 0x6D	; 109
    db28:	6f 2d       	mov	r22, r15
    db2a:	81 e8       	ldi	r24, 0x81	; 129
    db2c:	0e 94 cf 57 	call	0xaf9e	; 0xaf9e <udd_ep_run>
    db30:	0f 90       	pop	r0
    db32:	df 91       	pop	r29
    db34:	cf 91       	pop	r28
    db36:	1f 91       	pop	r17
    db38:	0f 91       	pop	r16
    db3a:	ff 90       	pop	r15
    db3c:	08 95       	ret

0000db3e <udi_cdc_data_sof_notify>:
    db3e:	80 e0       	ldi	r24, 0x00	; 0
    db40:	4c cf       	rjmp	.-360    	; 0xd9da <udi_cdc_tx_send>
    db42:	08 95       	ret

0000db44 <udi_cdc_data_sent>:
    db44:	81 11       	cpse	r24, r1
    db46:	1a c0       	rjmp	.+52     	; 0xdb7c <udi_cdc_data_sent+0x38>
    db48:	20 91 90 28 	lds	r18, 0x2890	; 0x802890 <udi_cdc_tx_buf_sel>
    db4c:	81 e0       	ldi	r24, 0x01	; 1
    db4e:	90 e0       	ldi	r25, 0x00	; 0
    db50:	22 23       	and	r18, r18
    db52:	11 f0       	breq	.+4      	; 0xdb58 <udi_cdc_data_sent+0x14>
    db54:	80 e0       	ldi	r24, 0x00	; 0
    db56:	90 e0       	ldi	r25, 0x00	; 0
    db58:	88 0f       	add	r24, r24
    db5a:	99 1f       	adc	r25, r25
    db5c:	fc 01       	movw	r30, r24
    db5e:	ef 56       	subi	r30, 0x6F	; 111
    db60:	f7 4d       	sbci	r31, 0xD7	; 215
    db62:	10 82       	st	Z, r1
    db64:	11 82       	std	Z+1, r1	; 0x01
    db66:	10 92 8c 28 	sts	0x288C, r1	; 0x80288c <udi_cdc_tx_both_buf_to_send>
    db6a:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <udi_cdc_tx_trans_ongoing>
    db6e:	67 2b       	or	r22, r23
    db70:	19 f0       	breq	.+6      	; 0xdb78 <udi_cdc_data_sent+0x34>
    db72:	80 e0       	ldi	r24, 0x00	; 0
    db74:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <usb_callback_tx_empty_notify>
    db78:	80 e0       	ldi	r24, 0x00	; 0
    db7a:	2f cf       	rjmp	.-418    	; 0xd9da <udi_cdc_tx_send>
    db7c:	08 95       	ret

0000db7e <udi_cdc_data_disable>:
    db7e:	80 91 9f 2d 	lds	r24, 0x2D9F	; 0x802d9f <udi_cdc_nb_data_enabled>
    db82:	81 50       	subi	r24, 0x01	; 1
    db84:	80 93 9f 2d 	sts	0x2D9F, r24	; 0x802d9f <udi_cdc_nb_data_enabled>
    db88:	80 91 9f 2d 	lds	r24, 0x2D9F	; 0x802d9f <udi_cdc_nb_data_enabled>
    db8c:	0e 94 c8 20 	call	0x4190	; 0x4190 <usb_callback_cdc_disable>
    db90:	10 92 9e 2d 	sts	0x2D9E, r1	; 0x802d9e <udi_cdc_data_running>
    db94:	08 95       	ret

0000db96 <udi_cdc_comm_setup>:
    db96:	cf 93       	push	r28
    db98:	df 93       	push	r29
    db9a:	80 91 d1 2d 	lds	r24, 0x2DD1	; 0x802dd1 <udd_g_ctrlreq>
    db9e:	88 23       	and	r24, r24
    dba0:	e4 f4       	brge	.+56     	; 0xdbda <udi_cdc_comm_setup+0x44>
    dba2:	80 76       	andi	r24, 0x60	; 96
    dba4:	80 32       	cpi	r24, 0x20	; 32
    dba6:	09 f0       	breq	.+2      	; 0xdbaa <udi_cdc_comm_setup+0x14>
    dba8:	49 c0       	rjmp	.+146    	; 0xdc3c <udi_cdc_comm_setup+0xa6>
    dbaa:	80 91 d2 2d 	lds	r24, 0x2DD2	; 0x802dd2 <udd_g_ctrlreq+0x1>
    dbae:	81 32       	cpi	r24, 0x21	; 33
    dbb0:	09 f0       	breq	.+2      	; 0xdbb4 <udi_cdc_comm_setup+0x1e>
    dbb2:	46 c0       	rjmp	.+140    	; 0xdc40 <udi_cdc_comm_setup+0xaa>
    dbb4:	80 91 d7 2d 	lds	r24, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    dbb8:	90 91 d8 2d 	lds	r25, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    dbbc:	07 97       	sbiw	r24, 0x07	; 7
    dbbe:	09 f0       	breq	.+2      	; 0xdbc2 <udi_cdc_comm_setup+0x2c>
    dbc0:	41 c0       	rjmp	.+130    	; 0xdc44 <udi_cdc_comm_setup+0xae>
    dbc2:	e1 ed       	ldi	r30, 0xD1	; 209
    dbc4:	fd e2       	ldi	r31, 0x2D	; 45
    dbc6:	8e ea       	ldi	r24, 0xAE	; 174
    dbc8:	9d e2       	ldi	r25, 0x2D	; 45
    dbca:	80 87       	std	Z+8, r24	; 0x08
    dbcc:	91 87       	std	Z+9, r25	; 0x09
    dbce:	87 e0       	ldi	r24, 0x07	; 7
    dbd0:	90 e0       	ldi	r25, 0x00	; 0
    dbd2:	82 87       	std	Z+10, r24	; 0x0a
    dbd4:	93 87       	std	Z+11, r25	; 0x0b
    dbd6:	81 e0       	ldi	r24, 0x01	; 1
    dbd8:	3c c0       	rjmp	.+120    	; 0xdc52 <udi_cdc_comm_setup+0xbc>
    dbda:	80 76       	andi	r24, 0x60	; 96
    dbdc:	80 32       	cpi	r24, 0x20	; 32
    dbde:	a1 f5       	brne	.+104    	; 0xdc48 <udi_cdc_comm_setup+0xb2>
    dbe0:	80 91 d2 2d 	lds	r24, 0x2DD2	; 0x802dd2 <udd_g_ctrlreq+0x1>
    dbe4:	80 32       	cpi	r24, 0x20	; 32
    dbe6:	19 f0       	breq	.+6      	; 0xdbee <udi_cdc_comm_setup+0x58>
    dbe8:	82 32       	cpi	r24, 0x22	; 34
    dbea:	b9 f0       	breq	.+46     	; 0xdc1a <udi_cdc_comm_setup+0x84>
    dbec:	2f c0       	rjmp	.+94     	; 0xdc4c <udi_cdc_comm_setup+0xb6>
    dbee:	80 91 d7 2d 	lds	r24, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    dbf2:	90 91 d8 2d 	lds	r25, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    dbf6:	07 97       	sbiw	r24, 0x07	; 7
    dbf8:	59 f5       	brne	.+86     	; 0xdc50 <udi_cdc_comm_setup+0xba>
    dbfa:	e1 ed       	ldi	r30, 0xD1	; 209
    dbfc:	fd e2       	ldi	r31, 0x2D	; 45
    dbfe:	85 eb       	ldi	r24, 0xB5	; 181
    dc00:	9c e6       	ldi	r25, 0x6C	; 108
    dc02:	84 87       	std	Z+12, r24	; 0x0c
    dc04:	95 87       	std	Z+13, r25	; 0x0d
    dc06:	8e ea       	ldi	r24, 0xAE	; 174
    dc08:	9d e2       	ldi	r25, 0x2D	; 45
    dc0a:	80 87       	std	Z+8, r24	; 0x08
    dc0c:	91 87       	std	Z+9, r25	; 0x09
    dc0e:	87 e0       	ldi	r24, 0x07	; 7
    dc10:	90 e0       	ldi	r25, 0x00	; 0
    dc12:	82 87       	std	Z+10, r24	; 0x0a
    dc14:	93 87       	std	Z+11, r25	; 0x0b
    dc16:	81 e0       	ldi	r24, 0x01	; 1
    dc18:	1c c0       	rjmp	.+56     	; 0xdc52 <udi_cdc_comm_setup+0xbc>
    dc1a:	c1 ed       	ldi	r28, 0xD1	; 209
    dc1c:	dd e2       	ldi	r29, 0x2D	; 45
    dc1e:	6a 81       	ldd	r22, Y+2	; 0x02
    dc20:	61 70       	andi	r22, 0x01	; 1
    dc22:	80 e0       	ldi	r24, 0x00	; 0
    dc24:	0e 94 cc 20 	call	0x4198	; 0x4198 <usb_callback_cdc_set_dtr>
    dc28:	6a 81       	ldd	r22, Y+2	; 0x02
    dc2a:	7b 81       	ldd	r23, Y+3	; 0x03
    dc2c:	76 95       	lsr	r23
    dc2e:	67 95       	ror	r22
    dc30:	61 70       	andi	r22, 0x01	; 1
    dc32:	80 e0       	ldi	r24, 0x00	; 0
    dc34:	0e 94 cd 20 	call	0x419a	; 0x419a <usb_callback_cdc_set_rts>
    dc38:	81 e0       	ldi	r24, 0x01	; 1
    dc3a:	0b c0       	rjmp	.+22     	; 0xdc52 <udi_cdc_comm_setup+0xbc>
    dc3c:	80 e0       	ldi	r24, 0x00	; 0
    dc3e:	09 c0       	rjmp	.+18     	; 0xdc52 <udi_cdc_comm_setup+0xbc>
    dc40:	80 e0       	ldi	r24, 0x00	; 0
    dc42:	07 c0       	rjmp	.+14     	; 0xdc52 <udi_cdc_comm_setup+0xbc>
    dc44:	80 e0       	ldi	r24, 0x00	; 0
    dc46:	05 c0       	rjmp	.+10     	; 0xdc52 <udi_cdc_comm_setup+0xbc>
    dc48:	80 e0       	ldi	r24, 0x00	; 0
    dc4a:	03 c0       	rjmp	.+6      	; 0xdc52 <udi_cdc_comm_setup+0xbc>
    dc4c:	80 e0       	ldi	r24, 0x00	; 0
    dc4e:	01 c0       	rjmp	.+2      	; 0xdc52 <udi_cdc_comm_setup+0xbc>
    dc50:	80 e0       	ldi	r24, 0x00	; 0
    dc52:	df 91       	pop	r29
    dc54:	cf 91       	pop	r28
    dc56:	08 95       	ret

0000dc58 <udi_cdc_multi_get_nb_received_data>:
    dc58:	cf 93       	push	r28
    dc5a:	df 93       	push	r29
    dc5c:	1f 92       	push	r1
    dc5e:	cd b7       	in	r28, 0x3d	; 61
    dc60:	de b7       	in	r29, 0x3e	; 62
    dc62:	8f b7       	in	r24, 0x3f	; 63
    dc64:	89 83       	std	Y+1, r24	; 0x01
    dc66:	f8 94       	cli
    dc68:	49 81       	ldd	r20, Y+1	; 0x01
    dc6a:	20 91 17 2b 	lds	r18, 0x2B17	; 0x802b17 <udi_cdc_rx_pos>
    dc6e:	30 91 18 2b 	lds	r19, 0x2B18	; 0x802b18 <udi_cdc_rx_pos+0x1>
    dc72:	e0 91 19 2b 	lds	r30, 0x2B19	; 0x802b19 <udi_cdc_rx_buf_sel>
    dc76:	f0 e0       	ldi	r31, 0x00	; 0
    dc78:	ee 0f       	add	r30, r30
    dc7a:	ff 1f       	adc	r31, r31
    dc7c:	e6 5e       	subi	r30, 0xE6	; 230
    dc7e:	f4 4d       	sbci	r31, 0xD4	; 212
    dc80:	80 81       	ld	r24, Z
    dc82:	91 81       	ldd	r25, Z+1	; 0x01
    dc84:	4f bf       	out	0x3f, r20	; 63
    dc86:	82 1b       	sub	r24, r18
    dc88:	93 0b       	sbc	r25, r19
    dc8a:	0f 90       	pop	r0
    dc8c:	df 91       	pop	r29
    dc8e:	cf 91       	pop	r28
    dc90:	08 95       	ret

0000dc92 <udi_cdc_get_nb_received_data>:
    dc92:	80 e0       	ldi	r24, 0x00	; 0
    dc94:	e1 cf       	rjmp	.-62     	; 0xdc58 <udi_cdc_multi_get_nb_received_data>
    dc96:	08 95       	ret

0000dc98 <udi_cdc_multi_is_rx_ready>:
    dc98:	df df       	rcall	.-66     	; 0xdc58 <udi_cdc_multi_get_nb_received_data>
    dc9a:	21 e0       	ldi	r18, 0x01	; 1
    dc9c:	89 2b       	or	r24, r25
    dc9e:	09 f4       	brne	.+2      	; 0xdca2 <udi_cdc_multi_is_rx_ready+0xa>
    dca0:	20 e0       	ldi	r18, 0x00	; 0
    dca2:	82 2f       	mov	r24, r18
    dca4:	08 95       	ret

0000dca6 <udi_cdc_rx_start>:
    dca6:	0f 93       	push	r16
    dca8:	1f 93       	push	r17
    dcaa:	cf 93       	push	r28
    dcac:	df 93       	push	r29
    dcae:	1f 92       	push	r1
    dcb0:	cd b7       	in	r28, 0x3d	; 61
    dcb2:	de b7       	in	r29, 0x3e	; 62
    dcb4:	8f b7       	in	r24, 0x3f	; 63
    dcb6:	89 83       	std	Y+1, r24	; 0x01
    dcb8:	f8 94       	cli
    dcba:	99 81       	ldd	r25, Y+1	; 0x01
    dcbc:	20 91 19 2b 	lds	r18, 0x2B19	; 0x802b19 <udi_cdc_rx_buf_sel>
    dcc0:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <udi_cdc_rx_trans_ongoing>
    dcc4:	81 11       	cpse	r24, r1
    dcc6:	10 c0       	rjmp	.+32     	; 0xdce8 <udi_cdc_rx_start+0x42>
    dcc8:	60 91 17 2b 	lds	r22, 0x2B17	; 0x802b17 <udi_cdc_rx_pos>
    dccc:	70 91 18 2b 	lds	r23, 0x2B18	; 0x802b18 <udi_cdc_rx_pos+0x1>
    dcd0:	02 2f       	mov	r16, r18
    dcd2:	10 e0       	ldi	r17, 0x00	; 0
    dcd4:	f8 01       	movw	r30, r16
    dcd6:	ee 0f       	add	r30, r30
    dcd8:	ff 1f       	adc	r31, r31
    dcda:	e6 5e       	subi	r30, 0xE6	; 230
    dcdc:	f4 4d       	sbci	r31, 0xD4	; 212
    dcde:	40 81       	ld	r20, Z
    dce0:	51 81       	ldd	r21, Z+1	; 0x01
    dce2:	64 17       	cp	r22, r20
    dce4:	75 07       	cpc	r23, r21
    dce6:	18 f4       	brcc	.+6      	; 0xdcee <udi_cdc_rx_start+0x48>
    dce8:	9f bf       	out	0x3f, r25	; 63
    dcea:	80 e0       	ldi	r24, 0x00	; 0
    dcec:	27 c0       	rjmp	.+78     	; 0xdd3c <udi_cdc_rx_start+0x96>
    dcee:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <udi_cdc_rx_pos>
    dcf2:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <udi_cdc_rx_pos+0x1>
    dcf6:	81 e0       	ldi	r24, 0x01	; 1
    dcf8:	21 11       	cpse	r18, r1
    dcfa:	80 e0       	ldi	r24, 0x00	; 0
    dcfc:	80 93 19 2b 	sts	0x2B19, r24	; 0x802b19 <udi_cdc_rx_buf_sel>
    dd00:	81 e0       	ldi	r24, 0x01	; 1
    dd02:	80 93 16 2b 	sts	0x2B16, r24	; 0x802b16 <udi_cdc_rx_trans_ongoing>
    dd06:	9f bf       	out	0x3f, r25	; 63
    dd08:	80 e0       	ldi	r24, 0x00	; 0
    dd0a:	c6 df       	rcall	.-116    	; 0xdc98 <udi_cdc_multi_is_rx_ready>
    dd0c:	88 23       	and	r24, r24
    dd0e:	19 f0       	breq	.+6      	; 0xdd16 <udi_cdc_rx_start+0x70>
    dd10:	80 e0       	ldi	r24, 0x00	; 0
    dd12:	0e 94 ce 20 	call	0x419c	; 0x419c <usb_callback_rx_notify>
    dd16:	80 e4       	ldi	r24, 0x40	; 64
    dd18:	91 e0       	ldi	r25, 0x01	; 1
    dd1a:	08 9f       	mul	r16, r24
    dd1c:	a0 01       	movw	r20, r0
    dd1e:	09 9f       	mul	r16, r25
    dd20:	50 0d       	add	r21, r0
    dd22:	18 9f       	mul	r17, r24
    dd24:	50 0d       	add	r21, r0
    dd26:	11 24       	eor	r1, r1
    dd28:	42 5e       	subi	r20, 0xE2	; 226
    dd2a:	54 4d       	sbci	r21, 0xD4	; 212
    dd2c:	06 ed       	ldi	r16, 0xD6	; 214
    dd2e:	1e e6       	ldi	r17, 0x6E	; 110
    dd30:	20 e4       	ldi	r18, 0x40	; 64
    dd32:	31 e0       	ldi	r19, 0x01	; 1
    dd34:	61 e0       	ldi	r22, 0x01	; 1
    dd36:	82 e0       	ldi	r24, 0x02	; 2
    dd38:	0e 94 cf 57 	call	0xaf9e	; 0xaf9e <udd_ep_run>
    dd3c:	0f 90       	pop	r0
    dd3e:	df 91       	pop	r29
    dd40:	cf 91       	pop	r28
    dd42:	1f 91       	pop	r17
    dd44:	0f 91       	pop	r16
    dd46:	08 95       	ret

0000dd48 <udi_cdc_data_enable>:
    dd48:	10 92 9f 2d 	sts	0x2D9F, r1	; 0x802d9f <udi_cdc_nb_data_enabled>
    dd4c:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <udi_cdc_tx_trans_ongoing>
    dd50:	10 92 8c 28 	sts	0x288C, r1	; 0x80288c <udi_cdc_tx_both_buf_to_send>
    dd54:	10 92 90 28 	sts	0x2890, r1	; 0x802890 <udi_cdc_tx_buf_sel>
    dd58:	e1 e9       	ldi	r30, 0x91	; 145
    dd5a:	f8 e2       	ldi	r31, 0x28	; 40
    dd5c:	10 82       	st	Z, r1
    dd5e:	11 82       	std	Z+1, r1	; 0x01
    dd60:	12 82       	std	Z+2, r1	; 0x02
    dd62:	13 82       	std	Z+3, r1	; 0x03
    dd64:	10 92 8e 28 	sts	0x288E, r1	; 0x80288e <udi_cdc_tx_sof_num>
    dd68:	10 92 8f 28 	sts	0x288F, r1	; 0x80288f <udi_cdc_tx_sof_num+0x1>
    dd6c:	80 e0       	ldi	r24, 0x00	; 0
    dd6e:	35 de       	rcall	.-918    	; 0xd9da <udi_cdc_tx_send>
    dd70:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <udi_cdc_rx_trans_ongoing>
    dd74:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <udi_cdc_rx_buf_sel>
    dd78:	ea e1       	ldi	r30, 0x1A	; 26
    dd7a:	fb e2       	ldi	r31, 0x2B	; 43
    dd7c:	10 82       	st	Z, r1
    dd7e:	11 82       	std	Z+1, r1	; 0x01
    dd80:	12 82       	std	Z+2, r1	; 0x02
    dd82:	13 82       	std	Z+3, r1	; 0x03
    dd84:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <udi_cdc_rx_pos>
    dd88:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <udi_cdc_rx_pos+0x1>
    dd8c:	80 e0       	ldi	r24, 0x00	; 0
    dd8e:	8b df       	rcall	.-234    	; 0xdca6 <udi_cdc_rx_start>
    dd90:	88 23       	and	r24, r24
    dd92:	59 f0       	breq	.+22     	; 0xddaa <udi_cdc_data_enable+0x62>
    dd94:	90 91 9f 2d 	lds	r25, 0x2D9F	; 0x802d9f <udi_cdc_nb_data_enabled>
    dd98:	9f 5f       	subi	r25, 0xFF	; 255
    dd9a:	90 93 9f 2d 	sts	0x2D9F, r25	; 0x802d9f <udi_cdc_nb_data_enabled>
    dd9e:	90 91 9f 2d 	lds	r25, 0x2D9F	; 0x802d9f <udi_cdc_nb_data_enabled>
    dda2:	91 30       	cpi	r25, 0x01	; 1
    dda4:	11 f4       	brne	.+4      	; 0xddaa <udi_cdc_data_enable+0x62>
    dda6:	90 93 9e 2d 	sts	0x2D9E, r25	; 0x802d9e <udi_cdc_data_running>
    ddaa:	08 95       	ret

0000ddac <udi_cdc_data_received>:
    ddac:	0f 93       	push	r16
    ddae:	1f 93       	push	r17
    ddb0:	81 11       	cpse	r24, r1
    ddb2:	26 c0       	rjmp	.+76     	; 0xde00 <udi_cdc_data_received+0x54>
    ddb4:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <udi_cdc_rx_buf_sel>
    ddb8:	e1 e0       	ldi	r30, 0x01	; 1
    ddba:	81 11       	cpse	r24, r1
    ddbc:	e0 e0       	ldi	r30, 0x00	; 0
    ddbe:	84 2f       	mov	r24, r20
    ddc0:	61 15       	cp	r22, r1
    ddc2:	71 05       	cpc	r23, r1
    ddc4:	91 f4       	brne	.+36     	; 0xddea <udi_cdc_data_received+0x3e>
    ddc6:	f0 e0       	ldi	r31, 0x00	; 0
    ddc8:	20 e4       	ldi	r18, 0x40	; 64
    ddca:	31 e0       	ldi	r19, 0x01	; 1
    ddcc:	e2 9f       	mul	r30, r18
    ddce:	a0 01       	movw	r20, r0
    ddd0:	e3 9f       	mul	r30, r19
    ddd2:	50 0d       	add	r21, r0
    ddd4:	f2 9f       	mul	r31, r18
    ddd6:	50 0d       	add	r21, r0
    ddd8:	11 24       	eor	r1, r1
    ddda:	42 5e       	subi	r20, 0xE2	; 226
    dddc:	54 4d       	sbci	r21, 0xD4	; 212
    ddde:	06 ed       	ldi	r16, 0xD6	; 214
    dde0:	1e e6       	ldi	r17, 0x6E	; 110
    dde2:	61 e0       	ldi	r22, 0x01	; 1
    dde4:	0e 94 cf 57 	call	0xaf9e	; 0xaf9e <udd_ep_run>
    dde8:	0b c0       	rjmp	.+22     	; 0xde00 <udi_cdc_data_received+0x54>
    ddea:	f0 e0       	ldi	r31, 0x00	; 0
    ddec:	ee 0f       	add	r30, r30
    ddee:	ff 1f       	adc	r31, r31
    ddf0:	e6 5e       	subi	r30, 0xE6	; 230
    ddf2:	f4 4d       	sbci	r31, 0xD4	; 212
    ddf4:	60 83       	st	Z, r22
    ddf6:	71 83       	std	Z+1, r23	; 0x01
    ddf8:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <udi_cdc_rx_trans_ongoing>
    ddfc:	80 e0       	ldi	r24, 0x00	; 0
    ddfe:	53 df       	rcall	.-346    	; 0xdca6 <udi_cdc_rx_start>
    de00:	1f 91       	pop	r17
    de02:	0f 91       	pop	r16
    de04:	08 95       	ret

0000de06 <udi_cdc_multi_getc>:
    de06:	cf 92       	push	r12
    de08:	df 92       	push	r13
    de0a:	ff 92       	push	r15
    de0c:	0f 93       	push	r16
    de0e:	1f 93       	push	r17
    de10:	cf 93       	push	r28
    de12:	df 93       	push	r29
    de14:	1f 92       	push	r1
    de16:	cd b7       	in	r28, 0x3d	; 61
    de18:	de b7       	in	r29, 0x3e	; 62
    de1a:	ff 24       	eor	r15, r15
    de1c:	f3 94       	inc	r15
    de1e:	80 91 b4 2d 	lds	r24, 0x2DB4	; 0x802db4 <udi_cdc_line_coding+0x6>
    de22:	89 30       	cpi	r24, 0x09	; 9
    de24:	09 f0       	breq	.+2      	; 0xde28 <udi_cdc_multi_getc+0x22>
    de26:	f1 2c       	mov	r15, r1
    de28:	a0 e0       	ldi	r26, 0x00	; 0
    de2a:	b0 e0       	ldi	r27, 0x00	; 0
    de2c:	00 e4       	ldi	r16, 0x40	; 64
    de2e:	11 e0       	ldi	r17, 0x01	; 1
    de30:	8f b7       	in	r24, 0x3f	; 63
    de32:	89 83       	std	Y+1, r24	; 0x01
    de34:	f8 94       	cli
    de36:	69 81       	ldd	r22, Y+1	; 0x01
    de38:	20 91 17 2b 	lds	r18, 0x2B17	; 0x802b17 <udi_cdc_rx_pos>
    de3c:	30 91 18 2b 	lds	r19, 0x2B18	; 0x802b18 <udi_cdc_rx_pos+0x1>
    de40:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <udi_cdc_rx_buf_sel>
    de44:	90 e0       	ldi	r25, 0x00	; 0
    de46:	fc 01       	movw	r30, r24
    de48:	ee 0f       	add	r30, r30
    de4a:	ff 1f       	adc	r31, r31
    de4c:	e6 5e       	subi	r30, 0xE6	; 230
    de4e:	f4 4d       	sbci	r31, 0xD4	; 212
    de50:	40 81       	ld	r20, Z
    de52:	51 81       	ldd	r21, Z+1	; 0x01
    de54:	6f bf       	out	0x3f, r22	; 63
    de56:	24 17       	cp	r18, r20
    de58:	35 07       	cpc	r19, r21
    de5a:	30 f0       	brcs	.+12     	; 0xde68 <udi_cdc_multi_getc+0x62>
    de5c:	80 91 9e 2d 	lds	r24, 0x2D9E	; 0x802d9e <udi_cdc_data_running>
    de60:	81 11       	cpse	r24, r1
    de62:	e6 cf       	rjmp	.-52     	; 0xde30 <udi_cdc_multi_getc+0x2a>
    de64:	90 e0       	ldi	r25, 0x00	; 0
    de66:	1e c0       	rjmp	.+60     	; 0xdea4 <udi_cdc_multi_getc+0x9e>
    de68:	80 9f       	mul	r24, r16
    de6a:	f0 01       	movw	r30, r0
    de6c:	81 9f       	mul	r24, r17
    de6e:	f0 0d       	add	r31, r0
    de70:	90 9f       	mul	r25, r16
    de72:	f0 0d       	add	r31, r0
    de74:	11 24       	eor	r1, r1
    de76:	e2 5e       	subi	r30, 0xE2	; 226
    de78:	f4 4d       	sbci	r31, 0xD4	; 212
    de7a:	e2 0f       	add	r30, r18
    de7c:	f3 1f       	adc	r31, r19
    de7e:	80 81       	ld	r24, Z
    de80:	6d 01       	movw	r12, r26
    de82:	c8 2a       	or	r12, r24
    de84:	2f 5f       	subi	r18, 0xFF	; 255
    de86:	3f 4f       	sbci	r19, 0xFF	; 255
    de88:	20 93 17 2b 	sts	0x2B17, r18	; 0x802b17 <udi_cdc_rx_pos>
    de8c:	30 93 18 2b 	sts	0x2B18, r19	; 0x802b18 <udi_cdc_rx_pos+0x1>
    de90:	80 e0       	ldi	r24, 0x00	; 0
    de92:	09 df       	rcall	.-494    	; 0xdca6 <udi_cdc_rx_start>
    de94:	ff 20       	and	r15, r15
    de96:	21 f0       	breq	.+8      	; 0xdea0 <udi_cdc_multi_getc+0x9a>
    de98:	bc 2d       	mov	r27, r12
    de9a:	aa 27       	eor	r26, r26
    de9c:	f1 2c       	mov	r15, r1
    de9e:	c8 cf       	rjmp	.-112    	; 0xde30 <udi_cdc_multi_getc+0x2a>
    dea0:	8c 2d       	mov	r24, r12
    dea2:	9d 2d       	mov	r25, r13
    dea4:	0f 90       	pop	r0
    dea6:	df 91       	pop	r29
    dea8:	cf 91       	pop	r28
    deaa:	1f 91       	pop	r17
    deac:	0f 91       	pop	r16
    deae:	ff 90       	pop	r15
    deb0:	df 90       	pop	r13
    deb2:	cf 90       	pop	r12
    deb4:	08 95       	ret

0000deb6 <udi_cdc_getc>:
    deb6:	80 e0       	ldi	r24, 0x00	; 0
    deb8:	a6 cf       	rjmp	.-180    	; 0xde06 <udi_cdc_multi_getc>
    deba:	08 95       	ret

0000debc <udi_cdc_read_no_polling>:
    debc:	ef 92       	push	r14
    debe:	ff 92       	push	r15
    dec0:	0f 93       	push	r16
    dec2:	1f 93       	push	r17
    dec4:	cf 93       	push	r28
    dec6:	df 93       	push	r29
    dec8:	1f 92       	push	r1
    deca:	1f 92       	push	r1
    decc:	cd b7       	in	r28, 0x3d	; 61
    dece:	de b7       	in	r29, 0x3e	; 62
    ded0:	dc 01       	movw	r26, r24
    ded2:	90 91 9e 2d 	lds	r25, 0x2D9E	; 0x802d9e <udi_cdc_data_running>
    ded6:	99 23       	and	r25, r25
    ded8:	09 f4       	brne	.+2      	; 0xdedc <udi_cdc_read_no_polling+0x20>
    deda:	43 c0       	rjmp	.+134    	; 0xdf62 <udi_cdc_read_no_polling+0xa6>
    dedc:	8f b7       	in	r24, 0x3f	; 63
    dede:	89 83       	std	Y+1, r24	; 0x01
    dee0:	f8 94       	cli
    dee2:	89 81       	ldd	r24, Y+1	; 0x01
    dee4:	40 91 17 2b 	lds	r20, 0x2B17	; 0x802b17 <udi_cdc_rx_pos>
    dee8:	50 91 18 2b 	lds	r21, 0x2B18	; 0x802b18 <udi_cdc_rx_pos+0x1>
    deec:	20 91 19 2b 	lds	r18, 0x2B19	; 0x802b19 <udi_cdc_rx_buf_sel>
    def0:	30 e0       	ldi	r19, 0x00	; 0
    def2:	f9 01       	movw	r30, r18
    def4:	ee 0f       	add	r30, r30
    def6:	ff 1f       	adc	r31, r31
    def8:	e6 5e       	subi	r30, 0xE6	; 230
    defa:	f4 4d       	sbci	r31, 0xD4	; 212
    defc:	e0 80       	ld	r14, Z
    defe:	f1 80       	ldd	r15, Z+1	; 0x01
    df00:	e4 1a       	sub	r14, r20
    df02:	f5 0a       	sbc	r15, r21
    df04:	8f bf       	out	0x3f, r24	; 63
    df06:	06 2f       	mov	r16, r22
    df08:	17 2f       	mov	r17, r23
    df0a:	e0 16       	cp	r14, r16
    df0c:	f1 06       	cpc	r15, r17
    df0e:	08 f4       	brcc	.+2      	; 0xdf12 <udi_cdc_read_no_polling+0x56>
    df10:	87 01       	movw	r16, r14
    df12:	01 15       	cp	r16, r1
    df14:	11 05       	cpc	r17, r1
    df16:	41 f1       	breq	.+80     	; 0xdf68 <udi_cdc_read_no_polling+0xac>
    df18:	cd 01       	movw	r24, r26
    df1a:	e0 e4       	ldi	r30, 0x40	; 64
    df1c:	f1 e0       	ldi	r31, 0x01	; 1
    df1e:	2e 9f       	mul	r18, r30
    df20:	b0 01       	movw	r22, r0
    df22:	2f 9f       	mul	r18, r31
    df24:	70 0d       	add	r23, r0
    df26:	3e 9f       	mul	r19, r30
    df28:	70 0d       	add	r23, r0
    df2a:	11 24       	eor	r1, r1
    df2c:	64 0f       	add	r22, r20
    df2e:	75 1f       	adc	r23, r21
    df30:	62 5e       	subi	r22, 0xE2	; 226
    df32:	74 4d       	sbci	r23, 0xD4	; 212
    df34:	a8 01       	movw	r20, r16
    df36:	0e 94 cb 7f 	call	0xff96	; 0xff96 <memcpy>
    df3a:	8f b7       	in	r24, 0x3f	; 63
    df3c:	8a 83       	std	Y+2, r24	; 0x02
    df3e:	f8 94       	cli
    df40:	8a 81       	ldd	r24, Y+2	; 0x02
    df42:	20 91 17 2b 	lds	r18, 0x2B17	; 0x802b17 <udi_cdc_rx_pos>
    df46:	30 91 18 2b 	lds	r19, 0x2B18	; 0x802b18 <udi_cdc_rx_pos+0x1>
    df4a:	02 0f       	add	r16, r18
    df4c:	13 1f       	adc	r17, r19
    df4e:	00 93 17 2b 	sts	0x2B17, r16	; 0x802b17 <udi_cdc_rx_pos>
    df52:	10 93 18 2b 	sts	0x2B18, r17	; 0x802b18 <udi_cdc_rx_pos+0x1>
    df56:	8f bf       	out	0x3f, r24	; 63
    df58:	80 e0       	ldi	r24, 0x00	; 0
    df5a:	a5 de       	rcall	.-694    	; 0xdca6 <udi_cdc_rx_start>
    df5c:	8e 2d       	mov	r24, r14
    df5e:	9f 2d       	mov	r25, r15
    df60:	05 c0       	rjmp	.+10     	; 0xdf6c <udi_cdc_read_no_polling+0xb0>
    df62:	80 e0       	ldi	r24, 0x00	; 0
    df64:	90 e0       	ldi	r25, 0x00	; 0
    df66:	02 c0       	rjmp	.+4      	; 0xdf6c <udi_cdc_read_no_polling+0xb0>
    df68:	8e 2d       	mov	r24, r14
    df6a:	9f 2d       	mov	r25, r15
    df6c:	0f 90       	pop	r0
    df6e:	0f 90       	pop	r0
    df70:	df 91       	pop	r29
    df72:	cf 91       	pop	r28
    df74:	1f 91       	pop	r17
    df76:	0f 91       	pop	r16
    df78:	ff 90       	pop	r15
    df7a:	ef 90       	pop	r14
    df7c:	08 95       	ret

0000df7e <udi_cdc_multi_get_free_tx_buffer>:
    df7e:	cf 93       	push	r28
    df80:	df 93       	push	r29
    df82:	1f 92       	push	r1
    df84:	cd b7       	in	r28, 0x3d	; 61
    df86:	de b7       	in	r29, 0x3e	; 62
    df88:	8f b7       	in	r24, 0x3f	; 63
    df8a:	89 83       	std	Y+1, r24	; 0x01
    df8c:	f8 94       	cli
    df8e:	99 81       	ldd	r25, Y+1	; 0x01
    df90:	80 91 90 28 	lds	r24, 0x2890	; 0x802890 <udi_cdc_tx_buf_sel>
    df94:	e8 2f       	mov	r30, r24
    df96:	f0 e0       	ldi	r31, 0x00	; 0
    df98:	ee 0f       	add	r30, r30
    df9a:	ff 1f       	adc	r31, r31
    df9c:	ef 56       	subi	r30, 0x6F	; 111
    df9e:	f7 4d       	sbci	r31, 0xD7	; 215
    dfa0:	20 81       	ld	r18, Z
    dfa2:	31 81       	ldd	r19, Z+1	; 0x01
    dfa4:	20 34       	cpi	r18, 0x40	; 64
    dfa6:	41 e0       	ldi	r20, 0x01	; 1
    dfa8:	34 07       	cpc	r19, r20
    dfaa:	89 f4       	brne	.+34     	; 0xdfce <udi_cdc_multi_get_free_tx_buffer+0x50>
    dfac:	40 91 8d 28 	lds	r20, 0x288D	; 0x80288d <udi_cdc_tx_trans_ongoing>
    dfb0:	41 11       	cpse	r20, r1
    dfb2:	0d c0       	rjmp	.+26     	; 0xdfce <udi_cdc_multi_get_free_tx_buffer+0x50>
    dfb4:	40 91 8c 28 	lds	r20, 0x288C	; 0x80288c <udi_cdc_tx_both_buf_to_send>
    dfb8:	41 11       	cpse	r20, r1
    dfba:	09 c0       	rjmp	.+18     	; 0xdfce <udi_cdc_multi_get_free_tx_buffer+0x50>
    dfbc:	21 e0       	ldi	r18, 0x01	; 1
    dfbe:	20 93 8c 28 	sts	0x288C, r18	; 0x80288c <udi_cdc_tx_both_buf_to_send>
    dfc2:	81 11       	cpse	r24, r1
    dfc4:	20 e0       	ldi	r18, 0x00	; 0
    dfc6:	20 93 90 28 	sts	0x2890, r18	; 0x802890 <udi_cdc_tx_buf_sel>
    dfca:	20 e0       	ldi	r18, 0x00	; 0
    dfcc:	30 e0       	ldi	r19, 0x00	; 0
    dfce:	9f bf       	out	0x3f, r25	; 63
    dfd0:	80 e4       	ldi	r24, 0x40	; 64
    dfd2:	91 e0       	ldi	r25, 0x01	; 1
    dfd4:	82 1b       	sub	r24, r18
    dfd6:	93 0b       	sbc	r25, r19
    dfd8:	0f 90       	pop	r0
    dfda:	df 91       	pop	r29
    dfdc:	cf 91       	pop	r28
    dfde:	08 95       	ret

0000dfe0 <udi_cdc_multi_is_tx_ready>:
    dfe0:	ce df       	rcall	.-100    	; 0xdf7e <udi_cdc_multi_get_free_tx_buffer>
    dfe2:	21 e0       	ldi	r18, 0x01	; 1
    dfe4:	89 2b       	or	r24, r25
    dfe6:	09 f4       	brne	.+2      	; 0xdfea <udi_cdc_multi_is_tx_ready+0xa>
    dfe8:	20 e0       	ldi	r18, 0x00	; 0
    dfea:	82 2f       	mov	r24, r18
    dfec:	08 95       	ret

0000dfee <udi_cdc_is_tx_ready>:
    dfee:	80 e0       	ldi	r24, 0x00	; 0
    dff0:	f7 cf       	rjmp	.-18     	; 0xdfe0 <udi_cdc_multi_is_tx_ready>
    dff2:	08 95       	ret

0000dff4 <udi_cdc_multi_putc>:
    dff4:	df 92       	push	r13
    dff6:	ef 92       	push	r14
    dff8:	ff 92       	push	r15
    dffa:	0f 93       	push	r16
    dffc:	1f 93       	push	r17
    dffe:	cf 93       	push	r28
    e000:	df 93       	push	r29
    e002:	1f 92       	push	r1
    e004:	cd b7       	in	r28, 0x3d	; 61
    e006:	de b7       	in	r29, 0x3e	; 62
    e008:	d6 2e       	mov	r13, r22
    e00a:	f7 2e       	mov	r15, r23
    e00c:	ee 24       	eor	r14, r14
    e00e:	e3 94       	inc	r14
    e010:	80 91 b4 2d 	lds	r24, 0x2DB4	; 0x802db4 <udi_cdc_line_coding+0x6>
    e014:	89 30       	cpi	r24, 0x09	; 9
    e016:	09 f0       	breq	.+2      	; 0xe01a <udi_cdc_multi_putc+0x26>
    e018:	e1 2c       	mov	r14, r1
    e01a:	00 e4       	ldi	r16, 0x40	; 64
    e01c:	11 e0       	ldi	r17, 0x01	; 1
    e01e:	80 e0       	ldi	r24, 0x00	; 0
    e020:	df df       	rcall	.-66     	; 0xdfe0 <udi_cdc_multi_is_tx_ready>
    e022:	81 11       	cpse	r24, r1
    e024:	07 c0       	rjmp	.+14     	; 0xe034 <udi_cdc_multi_putc+0x40>
    e026:	80 91 9e 2d 	lds	r24, 0x2D9E	; 0x802d9e <udi_cdc_data_running>
    e02a:	81 11       	cpse	r24, r1
    e02c:	f8 cf       	rjmp	.-16     	; 0xe01e <udi_cdc_multi_putc+0x2a>
    e02e:	80 e0       	ldi	r24, 0x00	; 0
    e030:	90 e0       	ldi	r25, 0x00	; 0
    e032:	2b c0       	rjmp	.+86     	; 0xe08a <udi_cdc_multi_putc+0x96>
    e034:	8f b7       	in	r24, 0x3f	; 63
    e036:	89 83       	std	Y+1, r24	; 0x01
    e038:	f8 94       	cli
    e03a:	69 81       	ldd	r22, Y+1	; 0x01
    e03c:	20 91 90 28 	lds	r18, 0x2890	; 0x802890 <udi_cdc_tx_buf_sel>
    e040:	30 e0       	ldi	r19, 0x00	; 0
    e042:	f9 01       	movw	r30, r18
    e044:	ee 0f       	add	r30, r30
    e046:	ff 1f       	adc	r31, r31
    e048:	ef 56       	subi	r30, 0x6F	; 111
    e04a:	f7 4d       	sbci	r31, 0xD7	; 215
    e04c:	80 81       	ld	r24, Z
    e04e:	91 81       	ldd	r25, Z+1	; 0x01
    e050:	ac 01       	movw	r20, r24
    e052:	4f 5f       	subi	r20, 0xFF	; 255
    e054:	5f 4f       	sbci	r21, 0xFF	; 255
    e056:	40 83       	st	Z, r20
    e058:	51 83       	std	Z+1, r21	; 0x01
    e05a:	20 9f       	mul	r18, r16
    e05c:	a0 01       	movw	r20, r0
    e05e:	21 9f       	mul	r18, r17
    e060:	50 0d       	add	r21, r0
    e062:	30 9f       	mul	r19, r16
    e064:	50 0d       	add	r21, r0
    e066:	11 24       	eor	r1, r1
    e068:	9a 01       	movw	r18, r20
    e06a:	2a 56       	subi	r18, 0x6A	; 106
    e06c:	37 4d       	sbci	r19, 0xD7	; 215
    e06e:	f9 01       	movw	r30, r18
    e070:	e8 0f       	add	r30, r24
    e072:	f9 1f       	adc	r31, r25
    e074:	d0 82       	st	Z, r13
    e076:	6f bf       	out	0x3f, r22	; 63
    e078:	ee 20       	and	r14, r14
    e07a:	29 f0       	breq	.+10     	; 0xe086 <udi_cdc_multi_putc+0x92>
    e07c:	df 2c       	mov	r13, r15
    e07e:	ff 0c       	add	r15, r15
    e080:	ff 08       	sbc	r15, r15
    e082:	e1 2c       	mov	r14, r1
    e084:	cc cf       	rjmp	.-104    	; 0xe01e <udi_cdc_multi_putc+0x2a>
    e086:	81 e0       	ldi	r24, 0x01	; 1
    e088:	90 e0       	ldi	r25, 0x00	; 0
    e08a:	0f 90       	pop	r0
    e08c:	df 91       	pop	r29
    e08e:	cf 91       	pop	r28
    e090:	1f 91       	pop	r17
    e092:	0f 91       	pop	r16
    e094:	ff 90       	pop	r15
    e096:	ef 90       	pop	r14
    e098:	df 90       	pop	r13
    e09a:	08 95       	ret

0000e09c <udi_cdc_putc>:
    e09c:	bc 01       	movw	r22, r24
    e09e:	80 e0       	ldi	r24, 0x00	; 0
    e0a0:	a9 cf       	rjmp	.-174    	; 0xdff4 <udi_cdc_multi_putc>
    e0a2:	08 95       	ret

0000e0a4 <udc_next_desc_in_iface>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
    e0a4:	e0 91 ba 2d 	lds	r30, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e0a8:	f0 91 bb 2d 	lds	r31, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e0ac:	01 90       	ld	r0, Z+
    e0ae:	f0 81       	ld	r31, Z
    e0b0:	e0 2d       	mov	r30, r0
    e0b2:	22 81       	ldd	r18, Z+2	; 0x02
    e0b4:	33 81       	ldd	r19, Z+3	; 0x03
    e0b6:	2e 0f       	add	r18, r30
    e0b8:	3f 1f       	adc	r19, r31
    e0ba:	fc 01       	movw	r30, r24
    e0bc:	40 81       	ld	r20, Z
    e0be:	e4 0f       	add	r30, r20
    e0c0:	f1 1d       	adc	r31, r1
    e0c2:	e2 17       	cp	r30, r18
    e0c4:	f3 07       	cpc	r31, r19
    e0c6:	a0 f4       	brcc	.+40     	; 0xe0f0 <udc_next_desc_in_iface+0x4c>
    e0c8:	81 81       	ldd	r24, Z+1	; 0x01
    e0ca:	84 30       	cpi	r24, 0x04	; 4
    e0cc:	a1 f0       	breq	.+40     	; 0xe0f6 <udc_next_desc_in_iface+0x52>
    e0ce:	86 13       	cpse	r24, r22
    e0d0:	06 c0       	rjmp	.+12     	; 0xe0de <udc_next_desc_in_iface+0x3a>
    e0d2:	14 c0       	rjmp	.+40     	; 0xe0fc <udc_next_desc_in_iface+0x58>
    e0d4:	81 81       	ldd	r24, Z+1	; 0x01
    e0d6:	84 30       	cpi	r24, 0x04	; 4
    e0d8:	a1 f0       	breq	.+40     	; 0xe102 <udc_next_desc_in_iface+0x5e>
    e0da:	86 17       	cp	r24, r22
    e0dc:	a9 f0       	breq	.+42     	; 0xe108 <udc_next_desc_in_iface+0x64>
    e0de:	80 81       	ld	r24, Z
    e0e0:	e8 0f       	add	r30, r24
    e0e2:	f1 1d       	adc	r31, r1
    e0e4:	e2 17       	cp	r30, r18
    e0e6:	f3 07       	cpc	r31, r19
    e0e8:	a8 f3       	brcs	.-22     	; 0xe0d4 <udc_next_desc_in_iface+0x30>
    e0ea:	80 e0       	ldi	r24, 0x00	; 0
    e0ec:	90 e0       	ldi	r25, 0x00	; 0
    e0ee:	08 95       	ret
    e0f0:	80 e0       	ldi	r24, 0x00	; 0
    e0f2:	90 e0       	ldi	r25, 0x00	; 0
    e0f4:	08 95       	ret
    e0f6:	80 e0       	ldi	r24, 0x00	; 0
    e0f8:	90 e0       	ldi	r25, 0x00	; 0
    e0fa:	08 95       	ret
    e0fc:	8e 2f       	mov	r24, r30
    e0fe:	9f 2f       	mov	r25, r31
    e100:	08 95       	ret
    e102:	80 e0       	ldi	r24, 0x00	; 0
    e104:	90 e0       	ldi	r25, 0x00	; 0
    e106:	08 95       	ret
    e108:	8e 2f       	mov	r24, r30
    e10a:	9f 2f       	mov	r25, r31
    e10c:	08 95       	ret

0000e10e <udc_valid_address>:
    e10e:	80 91 d3 2d 	lds	r24, 0x2DD3	; 0x802dd3 <udd_g_ctrlreq+0x2>
    e112:	8f 77       	andi	r24, 0x7F	; 127
    e114:	0c 94 e0 56 	jmp	0xadc0	; 0xadc0 <udd_set_address>
    e118:	08 95       	ret

0000e11a <udc_update_iface_desc>:
    e11a:	90 91 bc 2d 	lds	r25, 0x2DBC	; 0x802dbc <udc_num_configuration>
    e11e:	99 23       	and	r25, r25
    e120:	81 f1       	breq	.+96     	; 0xe182 <udc_update_iface_desc+0x68>
    e122:	e0 91 ba 2d 	lds	r30, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e126:	f0 91 bb 2d 	lds	r31, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e12a:	01 90       	ld	r0, Z+
    e12c:	f0 81       	ld	r31, Z
    e12e:	e0 2d       	mov	r30, r0
    e130:	94 81       	ldd	r25, Z+4	; 0x04
    e132:	89 17       	cp	r24, r25
    e134:	40 f5       	brcc	.+80     	; 0xe186 <udc_update_iface_desc+0x6c>
    e136:	e0 93 b8 2d 	sts	0x2DB8, r30	; 0x802db8 <udc_ptr_iface>
    e13a:	f0 93 b9 2d 	sts	0x2DB9, r31	; 0x802db9 <udc_ptr_iface+0x1>
    e13e:	22 81       	ldd	r18, Z+2	; 0x02
    e140:	33 81       	ldd	r19, Z+3	; 0x03
    e142:	2e 0f       	add	r18, r30
    e144:	3f 1f       	adc	r19, r31
    e146:	e2 17       	cp	r30, r18
    e148:	f3 07       	cpc	r31, r19
    e14a:	f8 f4       	brcc	.+62     	; 0xe18a <udc_update_iface_desc+0x70>
    e14c:	91 81       	ldd	r25, Z+1	; 0x01
    e14e:	94 30       	cpi	r25, 0x04	; 4
    e150:	61 f4       	brne	.+24     	; 0xe16a <udc_update_iface_desc+0x50>
    e152:	92 81       	ldd	r25, Z+2	; 0x02
    e154:	89 13       	cpse	r24, r25
    e156:	09 c0       	rjmp	.+18     	; 0xe16a <udc_update_iface_desc+0x50>
    e158:	93 81       	ldd	r25, Z+3	; 0x03
    e15a:	96 13       	cpse	r25, r22
    e15c:	06 c0       	rjmp	.+12     	; 0xe16a <udc_update_iface_desc+0x50>
    e15e:	e0 93 b8 2d 	sts	0x2DB8, r30	; 0x802db8 <udc_ptr_iface>
    e162:	f0 93 b9 2d 	sts	0x2DB9, r31	; 0x802db9 <udc_ptr_iface+0x1>
    e166:	81 e0       	ldi	r24, 0x01	; 1
    e168:	08 95       	ret
    e16a:	90 81       	ld	r25, Z
    e16c:	e9 0f       	add	r30, r25
    e16e:	f1 1d       	adc	r31, r1
    e170:	e2 17       	cp	r30, r18
    e172:	f3 07       	cpc	r31, r19
    e174:	58 f3       	brcs	.-42     	; 0xe14c <udc_update_iface_desc+0x32>
    e176:	e0 93 b8 2d 	sts	0x2DB8, r30	; 0x802db8 <udc_ptr_iface>
    e17a:	f0 93 b9 2d 	sts	0x2DB9, r31	; 0x802db9 <udc_ptr_iface+0x1>
    e17e:	80 e0       	ldi	r24, 0x00	; 0
    e180:	08 95       	ret
    e182:	80 e0       	ldi	r24, 0x00	; 0
    e184:	08 95       	ret
    e186:	80 e0       	ldi	r24, 0x00	; 0
    e188:	08 95       	ret
    e18a:	80 e0       	ldi	r24, 0x00	; 0
    e18c:	08 95       	ret

0000e18e <udc_iface_disable>:
    e18e:	ef 92       	push	r14
    e190:	ff 92       	push	r15
    e192:	1f 93       	push	r17
    e194:	cf 93       	push	r28
    e196:	df 93       	push	r29
    e198:	c8 2f       	mov	r28, r24
    e19a:	60 e0       	ldi	r22, 0x00	; 0
    e19c:	be df       	rcall	.-132    	; 0xe11a <udc_update_iface_desc>
    e19e:	18 2f       	mov	r17, r24
    e1a0:	88 23       	and	r24, r24
    e1a2:	81 f1       	breq	.+96     	; 0xe204 <udc_iface_disable+0x76>
    e1a4:	a0 91 ba 2d 	lds	r26, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e1a8:	b0 91 bb 2d 	lds	r27, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e1ac:	ec 2f       	mov	r30, r28
    e1ae:	f0 e0       	ldi	r31, 0x00	; 0
    e1b0:	ee 0f       	add	r30, r30
    e1b2:	ff 1f       	adc	r31, r31
    e1b4:	12 96       	adiw	r26, 0x02	; 2
    e1b6:	8d 91       	ld	r24, X+
    e1b8:	9c 91       	ld	r25, X
    e1ba:	13 97       	sbiw	r26, 0x03	; 3
    e1bc:	e8 0f       	add	r30, r24
    e1be:	f9 1f       	adc	r31, r25
    e1c0:	e0 80       	ld	r14, Z
    e1c2:	f1 80       	ldd	r15, Z+1	; 0x01
    e1c4:	d7 01       	movw	r26, r14
    e1c6:	16 96       	adiw	r26, 0x06	; 6
    e1c8:	ed 91       	ld	r30, X+
    e1ca:	fc 91       	ld	r31, X
    e1cc:	17 97       	sbiw	r26, 0x07	; 7
    e1ce:	19 95       	eicall
    e1d0:	68 2f       	mov	r22, r24
    e1d2:	8c 2f       	mov	r24, r28
    e1d4:	a2 df       	rcall	.-188    	; 0xe11a <udc_update_iface_desc>
    e1d6:	18 2f       	mov	r17, r24
    e1d8:	88 23       	and	r24, r24
    e1da:	a1 f0       	breq	.+40     	; 0xe204 <udc_iface_disable+0x76>
    e1dc:	c0 91 b8 2d 	lds	r28, 0x2DB8	; 0x802db8 <udc_ptr_iface>
    e1e0:	d0 91 b9 2d 	lds	r29, 0x2DB9	; 0x802db9 <udc_ptr_iface+0x1>
    e1e4:	65 e0       	ldi	r22, 0x05	; 5
    e1e6:	ce 01       	movw	r24, r28
    e1e8:	5d df       	rcall	.-326    	; 0xe0a4 <udc_next_desc_in_iface>
    e1ea:	ec 01       	movw	r28, r24
    e1ec:	89 2b       	or	r24, r25
    e1ee:	21 f0       	breq	.+8      	; 0xe1f8 <udc_iface_disable+0x6a>
    e1f0:	8a 81       	ldd	r24, Y+2	; 0x02
    e1f2:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <udd_ep_free>
    e1f6:	f6 cf       	rjmp	.-20     	; 0xe1e4 <udc_iface_disable+0x56>
    e1f8:	d7 01       	movw	r26, r14
    e1fa:	12 96       	adiw	r26, 0x02	; 2
    e1fc:	ed 91       	ld	r30, X+
    e1fe:	fc 91       	ld	r31, X
    e200:	13 97       	sbiw	r26, 0x03	; 3
    e202:	19 95       	eicall
    e204:	81 2f       	mov	r24, r17
    e206:	df 91       	pop	r29
    e208:	cf 91       	pop	r28
    e20a:	1f 91       	pop	r17
    e20c:	ff 90       	pop	r15
    e20e:	ef 90       	pop	r14
    e210:	08 95       	ret

0000e212 <udc_iface_enable>:
    e212:	1f 93       	push	r17
    e214:	cf 93       	push	r28
    e216:	df 93       	push	r29
    e218:	18 2f       	mov	r17, r24
    e21a:	7f df       	rcall	.-258    	; 0xe11a <udc_update_iface_desc>
    e21c:	88 23       	and	r24, r24
    e21e:	41 f1       	breq	.+80     	; 0xe270 <udc_iface_enable+0x5e>
    e220:	c0 91 b8 2d 	lds	r28, 0x2DB8	; 0x802db8 <udc_ptr_iface>
    e224:	d0 91 b9 2d 	lds	r29, 0x2DB9	; 0x802db9 <udc_ptr_iface+0x1>
    e228:	65 e0       	ldi	r22, 0x05	; 5
    e22a:	ce 01       	movw	r24, r28
    e22c:	3b df       	rcall	.-394    	; 0xe0a4 <udc_next_desc_in_iface>
    e22e:	ec 01       	movw	r28, r24
    e230:	89 2b       	or	r24, r25
    e232:	49 f0       	breq	.+18     	; 0xe246 <udc_iface_enable+0x34>
    e234:	4c 81       	ldd	r20, Y+4	; 0x04
    e236:	5d 81       	ldd	r21, Y+5	; 0x05
    e238:	6b 81       	ldd	r22, Y+3	; 0x03
    e23a:	8a 81       	ldd	r24, Y+2	; 0x02
    e23c:	0e 94 f5 56 	call	0xadea	; 0xadea <udd_ep_alloc>
    e240:	81 11       	cpse	r24, r1
    e242:	f2 cf       	rjmp	.-28     	; 0xe228 <udc_iface_enable+0x16>
    e244:	15 c0       	rjmp	.+42     	; 0xe270 <udc_iface_enable+0x5e>
    e246:	a0 91 ba 2d 	lds	r26, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e24a:	b0 91 bb 2d 	lds	r27, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e24e:	e1 2f       	mov	r30, r17
    e250:	f0 e0       	ldi	r31, 0x00	; 0
    e252:	ee 0f       	add	r30, r30
    e254:	ff 1f       	adc	r31, r31
    e256:	12 96       	adiw	r26, 0x02	; 2
    e258:	8d 91       	ld	r24, X+
    e25a:	9c 91       	ld	r25, X
    e25c:	13 97       	sbiw	r26, 0x03	; 3
    e25e:	e8 0f       	add	r30, r24
    e260:	f9 1f       	adc	r31, r25
    e262:	01 90       	ld	r0, Z+
    e264:	f0 81       	ld	r31, Z
    e266:	e0 2d       	mov	r30, r0
    e268:	01 90       	ld	r0, Z+
    e26a:	f0 81       	ld	r31, Z
    e26c:	e0 2d       	mov	r30, r0
    e26e:	19 95       	eicall
    e270:	df 91       	pop	r29
    e272:	cf 91       	pop	r28
    e274:	1f 91       	pop	r17
    e276:	08 95       	ret

0000e278 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
    e278:	0c 94 59 56 	jmp	0xacb2	; 0xacb2 <udd_enable>
    e27c:	08 95       	ret

0000e27e <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    e27e:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    e280:	80 91 bc 2d 	lds	r24, 0x2DBC	; 0x802dbc <udc_num_configuration>
    e284:	88 23       	and	r24, r24
    e286:	c1 f0       	breq	.+48     	; 0xe2b8 <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e288:	e0 91 ba 2d 	lds	r30, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e28c:	f0 91 bb 2d 	lds	r31, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e290:	01 90       	ld	r0, Z+
    e292:	f0 81       	ld	r31, Z
    e294:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    e296:	84 81       	ldd	r24, Z+4	; 0x04
    e298:	88 23       	and	r24, r24
    e29a:	71 f0       	breq	.+28     	; 0xe2b8 <udc_reset+0x3a>
    e29c:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    e29e:	8c 2f       	mov	r24, r28
    e2a0:	76 df       	rcall	.-276    	; 0xe18e <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    e2a2:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e2a4:	e0 91 ba 2d 	lds	r30, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e2a8:	f0 91 bb 2d 	lds	r31, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e2ac:	01 90       	ld	r0, Z+
    e2ae:	f0 81       	ld	r31, Z
    e2b0:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    e2b2:	84 81       	ldd	r24, Z+4	; 0x04
    e2b4:	c8 17       	cp	r28, r24
    e2b6:	98 f3       	brcs	.-26     	; 0xe29e <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    e2b8:	10 92 bc 2d 	sts	0x2DBC, r1	; 0x802dbc <udc_num_configuration>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    e2bc:	80 91 c0 2d 	lds	r24, 0x2DC0	; 0x802dc0 <udc_device_status>
    e2c0:	81 fd       	sbrc	r24, 1
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    e2c2:	0e 94 c3 20 	call	0x4186	; 0x4186 <usb_callback_remotewakeup_disable>
	}
#endif
	udc_device_status =
    e2c6:	10 92 c0 2d 	sts	0x2DC0, r1	; 0x802dc0 <udc_device_status>
    e2ca:	10 92 c1 2d 	sts	0x2DC1, r1	; 0x802dc1 <udc_device_status+0x1>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    e2ce:	cf 91       	pop	r28
    e2d0:	08 95       	ret

0000e2d2 <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    e2d2:	0e 94 ff 55 	call	0xabfe	; 0xabfe <udd_disable>
	udc_reset();
    e2d6:	d3 cf       	rjmp	.-90     	; 0xe27e <udc_reset>
    e2d8:	08 95       	ret

0000e2da <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    e2da:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    e2dc:	80 91 bc 2d 	lds	r24, 0x2DBC	; 0x802dbc <udc_num_configuration>
    e2e0:	88 23       	and	r24, r24
    e2e2:	49 f1       	breq	.+82     	; 0xe336 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e2e4:	a0 91 ba 2d 	lds	r26, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e2e8:	b0 91 bb 2d 	lds	r27, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e2ec:	ed 91       	ld	r30, X+
    e2ee:	fc 91       	ld	r31, X
    e2f0:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    e2f2:	84 81       	ldd	r24, Z+4	; 0x04
    e2f4:	88 23       	and	r24, r24
    e2f6:	f9 f0       	breq	.+62     	; 0xe336 <udc_sof_notify+0x5c>
    e2f8:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    e2fa:	ec 2f       	mov	r30, r28
    e2fc:	f0 e0       	ldi	r31, 0x00	; 0
    e2fe:	ee 0f       	add	r30, r30
    e300:	ff 1f       	adc	r31, r31
    e302:	12 96       	adiw	r26, 0x02	; 2
    e304:	8d 91       	ld	r24, X+
    e306:	9c 91       	ld	r25, X
    e308:	13 97       	sbiw	r26, 0x03	; 3
    e30a:	e8 0f       	add	r30, r24
    e30c:	f9 1f       	adc	r31, r25
    e30e:	01 90       	ld	r0, Z+
    e310:	f0 81       	ld	r31, Z
    e312:	e0 2d       	mov	r30, r0
    e314:	00 84       	ldd	r0, Z+8	; 0x08
    e316:	f1 85       	ldd	r31, Z+9	; 0x09
    e318:	e0 2d       	mov	r30, r0
    e31a:	30 97       	sbiw	r30, 0x00	; 0
    e31c:	09 f0       	breq	.+2      	; 0xe320 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    e31e:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    e320:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e322:	a0 91 ba 2d 	lds	r26, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e326:	b0 91 bb 2d 	lds	r27, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e32a:	ed 91       	ld	r30, X+
    e32c:	fc 91       	ld	r31, X
    e32e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    e330:	84 81       	ldd	r24, Z+4	; 0x04
    e332:	c8 17       	cp	r28, r24
    e334:	10 f3       	brcs	.-60     	; 0xe2fa <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    e336:	cf 91       	pop	r28
    e338:	08 95       	ret

0000e33a <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    e33a:	0f 93       	push	r16
    e33c:	1f 93       	push	r17
    e33e:	cf 93       	push	r28
    e340:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    e342:	e1 ed       	ldi	r30, 0xD1	; 209
    e344:	fd e2       	ldi	r31, 0x2D	; 45
    e346:	12 86       	std	Z+10, r1	; 0x0a
    e348:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    e34a:	14 86       	std	Z+12, r1	; 0x0c
    e34c:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    e34e:	16 86       	std	Z+14, r1	; 0x0e
    e350:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    e352:	80 81       	ld	r24, Z
    e354:	88 23       	and	r24, r24
    e356:	0c f0       	brlt	.+2      	; 0xe35a <udc_process_setup+0x20>
    e358:	95 c2       	rjmp	.+1322   	; 0xe884 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    e35a:	20 91 d7 2d 	lds	r18, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    e35e:	30 91 d8 2d 	lds	r19, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    e362:	21 15       	cp	r18, r1
    e364:	31 05       	cpc	r19, r1
    e366:	09 f0       	breq	.+2      	; 0xe36a <udc_process_setup+0x30>
    e368:	88 c2       	rjmp	.+1296   	; 0xe87a <udc_process_setup+0x540>
    e36a:	7f c2       	rjmp	.+1278   	; 0xe86a <udc_process_setup+0x530>
    e36c:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    e36e:	09 f0       	breq	.+2      	; 0xe372 <udc_process_setup+0x38>
    e370:	ab c0       	rjmp	.+342    	; 0xe4c8 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    e372:	90 91 d2 2d 	lds	r25, 0x2DD2	; 0x802dd2 <udd_g_ctrlreq+0x1>
    e376:	96 30       	cpi	r25, 0x06	; 6
    e378:	81 f0       	breq	.+32     	; 0xe39a <udc_process_setup+0x60>
    e37a:	98 30       	cpi	r25, 0x08	; 8
    e37c:	09 f4       	brne	.+2      	; 0xe380 <udc_process_setup+0x46>
    e37e:	99 c0       	rjmp	.+306    	; 0xe4b2 <udc_process_setup+0x178>
    e380:	91 11       	cpse	r25, r1
    e382:	a2 c0       	rjmp	.+324    	; 0xe4c8 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    e384:	22 30       	cpi	r18, 0x02	; 2
    e386:	31 05       	cpc	r19, r1
    e388:	09 f0       	breq	.+2      	; 0xe38c <udc_process_setup+0x52>
    e38a:	2b c2       	rjmp	.+1110   	; 0xe7e2 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    e38c:	62 e0       	ldi	r22, 0x02	; 2
    e38e:	70 e0       	ldi	r23, 0x00	; 0
    e390:	80 ec       	ldi	r24, 0xC0	; 192
    e392:	9d e2       	ldi	r25, 0x2D	; 45
    e394:	0e 94 ee 56 	call	0xaddc	; 0xaddc <udd_set_setup_payload>
    e398:	7e c2       	rjmp	.+1276   	; 0xe896 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    e39a:	80 91 d3 2d 	lds	r24, 0x2DD3	; 0x802dd3 <udd_g_ctrlreq+0x2>
    e39e:	90 91 d4 2d 	lds	r25, 0x2DD4	; 0x802dd4 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    e3a2:	29 2f       	mov	r18, r25
    e3a4:	33 27       	eor	r19, r19
    e3a6:	22 30       	cpi	r18, 0x02	; 2
    e3a8:	31 05       	cpc	r19, r1
    e3aa:	b1 f0       	breq	.+44     	; 0xe3d8 <udc_process_setup+0x9e>
    e3ac:	20 f4       	brcc	.+8      	; 0xe3b6 <udc_process_setup+0x7c>
    e3ae:	21 30       	cpi	r18, 0x01	; 1
    e3b0:	31 05       	cpc	r19, r1
    e3b2:	41 f0       	breq	.+16     	; 0xe3c4 <udc_process_setup+0x8a>
    e3b4:	d8 c1       	rjmp	.+944    	; 0xe766 <udc_process_setup+0x42c>
    e3b6:	23 30       	cpi	r18, 0x03	; 3
    e3b8:	31 05       	cpc	r19, r1
    e3ba:	f1 f1       	breq	.+124    	; 0xe438 <udc_process_setup+0xfe>
    e3bc:	2f 30       	cpi	r18, 0x0F	; 15
    e3be:	31 05       	cpc	r19, r1
    e3c0:	61 f1       	breq	.+88     	; 0xe41a <udc_process_setup+0xe0>
    e3c2:	d1 c1       	rjmp	.+930    	; 0xe766 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    e3c4:	80 91 7f 20 	lds	r24, 0x207F	; 0x80207f <udc_config>
    e3c8:	90 91 80 20 	lds	r25, 0x2080	; 0x802080 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    e3cc:	dc 01       	movw	r26, r24
    e3ce:	6c 91       	ld	r22, X
    e3d0:	70 e0       	ldi	r23, 0x00	; 0
    e3d2:	0e 94 ee 56 	call	0xaddc	; 0xaddc <udd_set_setup_payload>
    e3d6:	5e c0       	rjmp	.+188    	; 0xe494 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    e3d8:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <udc_config>
    e3dc:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <udc_config+0x1>
    e3e0:	21 89       	ldd	r18, Z+17	; 0x11
    e3e2:	82 17       	cp	r24, r18
    e3e4:	08 f0       	brcs	.+2      	; 0xe3e8 <udc_process_setup+0xae>
    e3e6:	fd c1       	rjmp	.+1018   	; 0xe7e2 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    e3e8:	99 27       	eor	r25, r25
    e3ea:	88 0f       	add	r24, r24
    e3ec:	99 1f       	adc	r25, r25
    e3ee:	88 0f       	add	r24, r24
    e3f0:	99 1f       	adc	r25, r25
    e3f2:	e0 91 81 20 	lds	r30, 0x2081	; 0x802081 <udc_config+0x2>
    e3f6:	f0 91 82 20 	lds	r31, 0x2082	; 0x802082 <udc_config+0x3>
    e3fa:	e8 0f       	add	r30, r24
    e3fc:	f9 1f       	adc	r31, r25
    e3fe:	80 81       	ld	r24, Z
    e400:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    e402:	fc 01       	movw	r30, r24
    e404:	62 81       	ldd	r22, Z+2	; 0x02
    e406:	73 81       	ldd	r23, Z+3	; 0x03
    e408:	0e 94 ee 56 	call	0xaddc	; 0xaddc <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    e40c:	e0 91 d9 2d 	lds	r30, 0x2DD9	; 0x802dd9 <udd_g_ctrlreq+0x8>
    e410:	f0 91 da 2d 	lds	r31, 0x2DDA	; 0x802dda <udd_g_ctrlreq+0x9>
    e414:	82 e0       	ldi	r24, 0x02	; 2
    e416:	81 83       	std	Z+1, r24	; 0x01
    e418:	3d c0       	rjmp	.+122    	; 0xe494 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    e41a:	80 91 83 20 	lds	r24, 0x2083	; 0x802083 <udc_config+0x4>
    e41e:	90 91 84 20 	lds	r25, 0x2084	; 0x802084 <udc_config+0x5>
    e422:	00 97       	sbiw	r24, 0x00	; 0
    e424:	09 f4       	brne	.+2      	; 0xe428 <udc_process_setup+0xee>
    e426:	dd c1       	rjmp	.+954    	; 0xe7e2 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    e428:	dc 01       	movw	r26, r24
    e42a:	12 96       	adiw	r26, 0x02	; 2
    e42c:	6d 91       	ld	r22, X+
    e42e:	7c 91       	ld	r23, X
    e430:	13 97       	sbiw	r26, 0x03	; 3
    e432:	0e 94 ee 56 	call	0xaddc	; 0xaddc <udd_set_setup_payload>
    e436:	2e c0       	rjmp	.+92     	; 0xe494 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    e438:	99 27       	eor	r25, r25
    e43a:	81 30       	cpi	r24, 0x01	; 1
    e43c:	91 05       	cpc	r25, r1
    e43e:	99 f0       	breq	.+38     	; 0xe466 <udc_process_setup+0x12c>
    e440:	58 f0       	brcs	.+22     	; 0xe458 <udc_process_setup+0x11e>
    e442:	82 30       	cpi	r24, 0x02	; 2
    e444:	91 05       	cpc	r25, r1
    e446:	09 f4       	brne	.+2      	; 0xe44a <udc_process_setup+0x110>
    e448:	22 c2       	rjmp	.+1092   	; 0xe88e <udc_process_setup+0x554>
    e44a:	03 97       	sbiw	r24, 0x03	; 3
    e44c:	09 f0       	breq	.+2      	; 0xe450 <udc_process_setup+0x116>
    e44e:	94 c1       	rjmp	.+808    	; 0xe778 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    e450:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    e452:	ee ec       	ldi	r30, 0xCE	; 206
    e454:	f1 e2       	ldi	r31, 0x21	; 33
    e456:	0a c0       	rjmp	.+20     	; 0xe46c <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    e458:	64 e0       	ldi	r22, 0x04	; 4
    e45a:	70 e0       	ldi	r23, 0x00	; 0
    e45c:	84 e2       	ldi	r24, 0x24	; 36
    e45e:	91 e2       	ldi	r25, 0x21	; 33
    e460:	0e 94 ee 56 	call	0xaddc	; 0xaddc <udd_set_setup_payload>
    e464:	17 c0       	rjmp	.+46     	; 0xe494 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    e466:	e3 e1       	ldi	r30, 0x13	; 19
    e468:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    e46a:	30 e1       	ldi	r19, 0x10	; 16
    e46c:	a6 ee       	ldi	r26, 0xE6	; 230
    e46e:	b0 e2       	ldi	r27, 0x20	; 32
    e470:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    e472:	81 91       	ld	r24, Z+
    e474:	90 e0       	ldi	r25, 0x00	; 0
    e476:	8d 93       	st	X+, r24
    e478:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    e47a:	2f 5f       	subi	r18, 0xFF	; 255
    e47c:	23 17       	cp	r18, r19
    e47e:	c8 f3       	brcs	.-14     	; 0xe472 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    e480:	63 2f       	mov	r22, r19
    e482:	66 0f       	add	r22, r22
    e484:	6e 5f       	subi	r22, 0xFE	; 254
    e486:	60 93 e4 20 	sts	0x20E4, r22	; 0x8020e4 <udc_string_desc>
		udd_set_setup_payload(
    e48a:	70 e0       	ldi	r23, 0x00	; 0
    e48c:	84 ee       	ldi	r24, 0xE4	; 228
    e48e:	90 e2       	ldi	r25, 0x20	; 32
    e490:	0e 94 ee 56 	call	0xaddc	; 0xaddc <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    e494:	e1 ed       	ldi	r30, 0xD1	; 209
    e496:	fd e2       	ldi	r31, 0x2D	; 45
    e498:	86 81       	ldd	r24, Z+6	; 0x06
    e49a:	97 81       	ldd	r25, Z+7	; 0x07
    e49c:	22 85       	ldd	r18, Z+10	; 0x0a
    e49e:	33 85       	ldd	r19, Z+11	; 0x0b
    e4a0:	82 17       	cp	r24, r18
    e4a2:	93 07       	cpc	r25, r19
    e4a4:	08 f0       	brcs	.+2      	; 0xe4a8 <udc_process_setup+0x16e>
    e4a6:	f7 c1       	rjmp	.+1006   	; 0xe896 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    e4a8:	80 93 db 2d 	sts	0x2DDB, r24	; 0x802ddb <udd_g_ctrlreq+0xa>
    e4ac:	90 93 dc 2d 	sts	0x2DDC, r25	; 0x802ddc <udd_g_ctrlreq+0xb>
    e4b0:	f2 c1       	rjmp	.+996    	; 0xe896 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    e4b2:	21 30       	cpi	r18, 0x01	; 1
    e4b4:	31 05       	cpc	r19, r1
    e4b6:	09 f0       	breq	.+2      	; 0xe4ba <udc_process_setup+0x180>
    e4b8:	94 c1       	rjmp	.+808    	; 0xe7e2 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    e4ba:	61 e0       	ldi	r22, 0x01	; 1
    e4bc:	70 e0       	ldi	r23, 0x00	; 0
    e4be:	8c eb       	ldi	r24, 0xBC	; 188
    e4c0:	9d e2       	ldi	r25, 0x2D	; 45
    e4c2:	0e 94 ee 56 	call	0xaddc	; 0xaddc <udd_set_setup_payload>
    e4c6:	e7 c1       	rjmp	.+974    	; 0xe896 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    e4c8:	81 30       	cpi	r24, 0x01	; 1
    e4ca:	e9 f5       	brne	.+122    	; 0xe546 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    e4cc:	90 91 d2 2d 	lds	r25, 0x2DD2	; 0x802dd2 <udd_g_ctrlreq+0x1>
    e4d0:	9a 30       	cpi	r25, 0x0A	; 10
    e4d2:	c9 f5       	brne	.+114    	; 0xe546 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    e4d4:	21 30       	cpi	r18, 0x01	; 1
    e4d6:	31 05       	cpc	r19, r1
    e4d8:	09 f0       	breq	.+2      	; 0xe4dc <udc_process_setup+0x1a2>
    e4da:	53 c1       	rjmp	.+678    	; 0xe782 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    e4dc:	80 91 bc 2d 	lds	r24, 0x2DBC	; 0x802dbc <udc_num_configuration>
    e4e0:	88 23       	and	r24, r24
    e4e2:	09 f4       	brne	.+2      	; 0xe4e6 <udc_process_setup+0x1ac>
    e4e4:	4e c1       	rjmp	.+668    	; 0xe782 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    e4e6:	c0 91 d5 2d 	lds	r28, 0x2DD5	; 0x802dd5 <udd_g_ctrlreq+0x4>
    e4ea:	d0 91 d6 2d 	lds	r29, 0x2DD6	; 0x802dd6 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    e4ee:	00 91 ba 2d 	lds	r16, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e4f2:	10 91 bb 2d 	lds	r17, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e4f6:	d8 01       	movw	r26, r16
    e4f8:	ed 91       	ld	r30, X+
    e4fa:	fc 91       	ld	r31, X
    e4fc:	84 81       	ldd	r24, Z+4	; 0x04
    e4fe:	c8 17       	cp	r28, r24
    e500:	08 f0       	brcs	.+2      	; 0xe504 <udc_process_setup+0x1ca>
    e502:	3f c1       	rjmp	.+638    	; 0xe782 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    e504:	60 e0       	ldi	r22, 0x00	; 0
    e506:	8c 2f       	mov	r24, r28
    e508:	08 de       	rcall	.-1008   	; 0xe11a <udc_update_iface_desc>
    e50a:	88 23       	and	r24, r24
    e50c:	09 f4       	brne	.+2      	; 0xe510 <udc_process_setup+0x1d6>
    e50e:	34 c1       	rjmp	.+616    	; 0xe778 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    e510:	ce 01       	movw	r24, r28
    e512:	99 27       	eor	r25, r25
    e514:	88 0f       	add	r24, r24
    e516:	99 1f       	adc	r25, r25
    e518:	d8 01       	movw	r26, r16
    e51a:	12 96       	adiw	r26, 0x02	; 2
    e51c:	ed 91       	ld	r30, X+
    e51e:	fc 91       	ld	r31, X
    e520:	13 97       	sbiw	r26, 0x03	; 3
    e522:	e8 0f       	add	r30, r24
    e524:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    e526:	01 90       	ld	r0, Z+
    e528:	f0 81       	ld	r31, Z
    e52a:	e0 2d       	mov	r30, r0
    e52c:	86 81       	ldd	r24, Z+6	; 0x06
    e52e:	97 81       	ldd	r25, Z+7	; 0x07
    e530:	fc 01       	movw	r30, r24
    e532:	19 95       	eicall
    e534:	80 93 be 2d 	sts	0x2DBE, r24	; 0x802dbe <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    e538:	61 e0       	ldi	r22, 0x01	; 1
    e53a:	70 e0       	ldi	r23, 0x00	; 0
    e53c:	8e eb       	ldi	r24, 0xBE	; 190
    e53e:	9d e2       	ldi	r25, 0x2D	; 45
    e540:	0e 94 ee 56 	call	0xaddc	; 0xaddc <udd_set_setup_payload>
    e544:	a8 c1       	rjmp	.+848    	; 0xe896 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    e546:	82 30       	cpi	r24, 0x02	; 2
    e548:	09 f0       	breq	.+2      	; 0xe54c <udc_process_setup+0x212>
    e54a:	16 c1       	rjmp	.+556    	; 0xe778 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    e54c:	80 91 d2 2d 	lds	r24, 0x2DD2	; 0x802dd2 <udd_g_ctrlreq+0x1>
    e550:	81 11       	cpse	r24, r1
    e552:	0b c1       	rjmp	.+534    	; 0xe76a <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    e554:	22 30       	cpi	r18, 0x02	; 2
    e556:	31 05       	cpc	r19, r1
    e558:	09 f0       	breq	.+2      	; 0xe55c <udc_process_setup+0x222>
    e55a:	43 c1       	rjmp	.+646    	; 0xe7e2 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    e55c:	80 91 d5 2d 	lds	r24, 0x2DD5	; 0x802dd5 <udd_g_ctrlreq+0x4>
    e560:	0e 94 7d 57 	call	0xaefa	; 0xaefa <udd_ep_is_halted>
    e564:	90 e0       	ldi	r25, 0x00	; 0
    e566:	80 93 b6 2d 	sts	0x2DB6, r24	; 0x802db6 <udc_ep_status.4757>
    e56a:	90 93 b7 2d 	sts	0x2DB7, r25	; 0x802db7 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    e56e:	62 e0       	ldi	r22, 0x02	; 2
    e570:	70 e0       	ldi	r23, 0x00	; 0
    e572:	86 eb       	ldi	r24, 0xB6	; 182
    e574:	9d e2       	ldi	r25, 0x2D	; 45
    e576:	0e 94 ee 56 	call	0xaddc	; 0xaddc <udd_set_setup_payload>
    e57a:	8d c1       	rjmp	.+794    	; 0xe896 <udc_process_setup+0x55c>
    e57c:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    e57e:	09 f0       	breq	.+2      	; 0xe582 <udc_process_setup+0x248>
    e580:	a0 c0       	rjmp	.+320    	; 0xe6c2 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    e582:	90 91 d2 2d 	lds	r25, 0x2DD2	; 0x802dd2 <udd_g_ctrlreq+0x1>
    e586:	93 30       	cpi	r25, 0x03	; 3
    e588:	91 f1       	breq	.+100    	; 0xe5ee <udc_process_setup+0x2b4>
    e58a:	18 f4       	brcc	.+6      	; 0xe592 <udc_process_setup+0x258>
    e58c:	91 30       	cpi	r25, 0x01	; 1
    e58e:	a9 f0       	breq	.+42     	; 0xe5ba <udc_process_setup+0x280>
    e590:	98 c0       	rjmp	.+304    	; 0xe6c2 <udc_process_setup+0x388>
    e592:	95 30       	cpi	r25, 0x05	; 5
    e594:	21 f0       	breq	.+8      	; 0xe59e <udc_process_setup+0x264>
    e596:	99 30       	cpi	r25, 0x09	; 9
    e598:	09 f4       	brne	.+2      	; 0xe59c <udc_process_setup+0x262>
    e59a:	43 c0       	rjmp	.+134    	; 0xe622 <udc_process_setup+0x2e8>
    e59c:	92 c0       	rjmp	.+292    	; 0xe6c2 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    e59e:	80 91 d7 2d 	lds	r24, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    e5a2:	90 91 d8 2d 	lds	r25, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    e5a6:	89 2b       	or	r24, r25
    e5a8:	09 f0       	breq	.+2      	; 0xe5ac <udc_process_setup+0x272>
    e5aa:	1b c1       	rjmp	.+566    	; 0xe7e2 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    e5ac:	87 e8       	ldi	r24, 0x87	; 135
    e5ae:	90 e7       	ldi	r25, 0x70	; 112
    e5b0:	80 93 dd 2d 	sts	0x2DDD, r24	; 0x802ddd <udd_g_ctrlreq+0xc>
    e5b4:	90 93 de 2d 	sts	0x2DDE, r25	; 0x802dde <udd_g_ctrlreq+0xd>
    e5b8:	6e c1       	rjmp	.+732    	; 0xe896 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    e5ba:	80 91 d7 2d 	lds	r24, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    e5be:	90 91 d8 2d 	lds	r25, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    e5c2:	89 2b       	or	r24, r25
    e5c4:	09 f0       	breq	.+2      	; 0xe5c8 <udc_process_setup+0x28e>
    e5c6:	0d c1       	rjmp	.+538    	; 0xe7e2 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    e5c8:	80 91 d3 2d 	lds	r24, 0x2DD3	; 0x802dd3 <udd_g_ctrlreq+0x2>
    e5cc:	90 91 d4 2d 	lds	r25, 0x2DD4	; 0x802dd4 <udd_g_ctrlreq+0x3>
    e5d0:	01 97       	sbiw	r24, 0x01	; 1
    e5d2:	09 f0       	breq	.+2      	; 0xe5d6 <udc_process_setup+0x29c>
    e5d4:	06 c1       	rjmp	.+524    	; 0xe7e2 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    e5d6:	80 91 c0 2d 	lds	r24, 0x2DC0	; 0x802dc0 <udc_device_status>
    e5da:	90 91 c1 2d 	lds	r25, 0x2DC1	; 0x802dc1 <udc_device_status+0x1>
    e5de:	8d 7f       	andi	r24, 0xFD	; 253
    e5e0:	80 93 c0 2d 	sts	0x2DC0, r24	; 0x802dc0 <udc_device_status>
    e5e4:	90 93 c1 2d 	sts	0x2DC1, r25	; 0x802dc1 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    e5e8:	0e 94 c3 20 	call	0x4186	; 0x4186 <usb_callback_remotewakeup_disable>
    e5ec:	54 c1       	rjmp	.+680    	; 0xe896 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    e5ee:	80 91 d7 2d 	lds	r24, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    e5f2:	90 91 d8 2d 	lds	r25, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    e5f6:	89 2b       	or	r24, r25
    e5f8:	09 f0       	breq	.+2      	; 0xe5fc <udc_process_setup+0x2c2>
    e5fa:	f3 c0       	rjmp	.+486    	; 0xe7e2 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    e5fc:	80 91 d3 2d 	lds	r24, 0x2DD3	; 0x802dd3 <udd_g_ctrlreq+0x2>
    e600:	90 91 d4 2d 	lds	r25, 0x2DD4	; 0x802dd4 <udd_g_ctrlreq+0x3>
    e604:	01 97       	sbiw	r24, 0x01	; 1
    e606:	09 f0       	breq	.+2      	; 0xe60a <udc_process_setup+0x2d0>
    e608:	b2 c0       	rjmp	.+356    	; 0xe76e <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    e60a:	80 91 c0 2d 	lds	r24, 0x2DC0	; 0x802dc0 <udc_device_status>
    e60e:	90 91 c1 2d 	lds	r25, 0x2DC1	; 0x802dc1 <udc_device_status+0x1>
    e612:	82 60       	ori	r24, 0x02	; 2
    e614:	80 93 c0 2d 	sts	0x2DC0, r24	; 0x802dc0 <udc_device_status>
    e618:	90 93 c1 2d 	sts	0x2DC1, r25	; 0x802dc1 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    e61c:	0e 94 c2 20 	call	0x4184	; 0x4184 <usb_callback_remotewakeup_enable>
    e620:	3a c1       	rjmp	.+628    	; 0xe896 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    e622:	80 91 d7 2d 	lds	r24, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    e626:	90 91 d8 2d 	lds	r25, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    e62a:	89 2b       	or	r24, r25
    e62c:	09 f0       	breq	.+2      	; 0xe630 <udc_process_setup+0x2f6>
    e62e:	d9 c0       	rjmp	.+434    	; 0xe7e2 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    e630:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <udd_getaddress>
    e634:	88 23       	and	r24, r24
    e636:	09 f4       	brne	.+2      	; 0xe63a <udc_process_setup+0x300>
    e638:	9f c0       	rjmp	.+318    	; 0xe778 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    e63a:	20 91 d3 2d 	lds	r18, 0x2DD3	; 0x802dd3 <udd_g_ctrlreq+0x2>
    e63e:	30 91 d4 2d 	lds	r19, 0x2DD4	; 0x802dd4 <udd_g_ctrlreq+0x3>
    e642:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    e644:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <udc_config>
    e648:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    e64c:	81 89       	ldd	r24, Z+17	; 0x11
    e64e:	90 e0       	ldi	r25, 0x00	; 0
    e650:	82 17       	cp	r24, r18
    e652:	93 07       	cpc	r25, r19
    e654:	08 f4       	brcc	.+2      	; 0xe658 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    e656:	90 c0       	rjmp	.+288    	; 0xe778 <udc_process_setup+0x43e>
    e658:	12 de       	rcall	.-988    	; 0xe27e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    e65a:	80 91 d3 2d 	lds	r24, 0x2DD3	; 0x802dd3 <udd_g_ctrlreq+0x2>
    e65e:	90 91 d4 2d 	lds	r25, 0x2DD4	; 0x802dd4 <udd_g_ctrlreq+0x3>
    e662:	80 93 bc 2d 	sts	0x2DBC, r24	; 0x802dbc <udc_num_configuration>
	if (udc_num_configuration == 0) {
    e666:	88 23       	and	r24, r24
    e668:	09 f4       	brne	.+2      	; 0xe66c <udc_process_setup+0x332>
    e66a:	15 c1       	rjmp	.+554    	; 0xe896 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    e66c:	99 27       	eor	r25, r25
    e66e:	81 50       	subi	r24, 0x01	; 1
    e670:	90 4c       	sbci	r25, 0xC0	; 192
    e672:	88 0f       	add	r24, r24
    e674:	99 1f       	adc	r25, r25
    e676:	88 0f       	add	r24, r24
    e678:	99 1f       	adc	r25, r25
    e67a:	e0 91 81 20 	lds	r30, 0x2081	; 0x802081 <udc_config+0x2>
    e67e:	f0 91 82 20 	lds	r31, 0x2082	; 0x802082 <udc_config+0x3>
    e682:	e8 0f       	add	r30, r24
    e684:	f9 1f       	adc	r31, r25
    e686:	e0 93 ba 2d 	sts	0x2DBA, r30	; 0x802dba <udc_ptr_conf>
    e68a:	f0 93 bb 2d 	sts	0x2DBB, r31	; 0x802dbb <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e68e:	01 90       	ld	r0, Z+
    e690:	f0 81       	ld	r31, Z
    e692:	e0 2d       	mov	r30, r0
    e694:	84 81       	ldd	r24, Z+4	; 0x04
    e696:	88 23       	and	r24, r24
    e698:	09 f4       	brne	.+2      	; 0xe69c <udc_process_setup+0x362>
    e69a:	fd c0       	rjmp	.+506    	; 0xe896 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    e69c:	c0 e0       	ldi	r28, 0x00	; 0
    e69e:	60 e0       	ldi	r22, 0x00	; 0
    e6a0:	8c 2f       	mov	r24, r28
    e6a2:	b7 dd       	rcall	.-1170   	; 0xe212 <udc_iface_enable>
    e6a4:	88 23       	and	r24, r24
    e6a6:	09 f4       	brne	.+2      	; 0xe6aa <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    e6a8:	67 c0       	rjmp	.+206    	; 0xe778 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e6aa:	cf 5f       	subi	r28, 0xFF	; 255
    e6ac:	e0 91 ba 2d 	lds	r30, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e6b0:	f0 91 bb 2d 	lds	r31, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e6b4:	01 90       	ld	r0, Z+
    e6b6:	f0 81       	ld	r31, Z
    e6b8:	e0 2d       	mov	r30, r0
    e6ba:	84 81       	ldd	r24, Z+4	; 0x04
    e6bc:	c8 17       	cp	r28, r24
    e6be:	78 f3       	brcs	.-34     	; 0xe69e <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    e6c0:	ea c0       	rjmp	.+468    	; 0xe896 <udc_process_setup+0x55c>
    e6c2:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    e6c4:	e9 f4       	brne	.+58     	; 0xe700 <udc_process_setup+0x3c6>
    e6c6:	90 91 d2 2d 	lds	r25, 0x2DD2	; 0x802dd2 <udd_g_ctrlreq+0x1>
    e6ca:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    e6cc:	c9 f4       	brne	.+50     	; 0xe700 <udc_process_setup+0x3c6>
    e6ce:	80 91 d7 2d 	lds	r24, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    e6d2:	90 91 d8 2d 	lds	r25, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    e6d6:	89 2b       	or	r24, r25
    e6d8:	09 f0       	breq	.+2      	; 0xe6dc <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    e6da:	53 c0       	rjmp	.+166    	; 0xe782 <udc_process_setup+0x448>
    e6dc:	80 91 bc 2d 	lds	r24, 0x2DBC	; 0x802dbc <udc_num_configuration>
    e6e0:	88 23       	and	r24, r24
    e6e2:	09 f4       	brne	.+2      	; 0xe6e6 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    e6e4:	4e c0       	rjmp	.+156    	; 0xe782 <udc_process_setup+0x448>
    e6e6:	e1 ed       	ldi	r30, 0xD1	; 209
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    e6e8:	fd e2       	ldi	r31, 0x2D	; 45

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    e6ea:	c4 81       	ldd	r28, Z+4	; 0x04
    e6ec:	d2 81       	ldd	r29, Z+2	; 0x02
    e6ee:	8c 2f       	mov	r24, r28
    e6f0:	4e dd       	rcall	.-1380   	; 0xe18e <udc_iface_disable>
    e6f2:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    e6f4:	09 f4       	brne	.+2      	; 0xe6f8 <udc_process_setup+0x3be>
    e6f6:	40 c0       	rjmp	.+128    	; 0xe778 <udc_process_setup+0x43e>
    e6f8:	6d 2f       	mov	r22, r29
    e6fa:	8c 2f       	mov	r24, r28
    e6fc:	8a dd       	rcall	.-1260   	; 0xe212 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    e6fe:	3a c0       	rjmp	.+116    	; 0xe774 <udc_process_setup+0x43a>
    e700:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    e702:	d1 f5       	brne	.+116    	; 0xe778 <udc_process_setup+0x43e>
    e704:	80 91 d2 2d 	lds	r24, 0x2DD2	; 0x802dd2 <udd_g_ctrlreq+0x1>
    e708:	81 30       	cpi	r24, 0x01	; 1
    e70a:	19 f0       	breq	.+6      	; 0xe712 <udc_process_setup+0x3d8>
    e70c:	83 30       	cpi	r24, 0x03	; 3
    e70e:	a1 f0       	breq	.+40     	; 0xe738 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    e710:	30 c0       	rjmp	.+96     	; 0xe772 <udc_process_setup+0x438>
    e712:	80 91 d7 2d 	lds	r24, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    e716:	90 91 d8 2d 	lds	r25, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    e71a:	89 2b       	or	r24, r25
    e71c:	09 f0       	breq	.+2      	; 0xe720 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    e71e:	61 c0       	rjmp	.+194    	; 0xe7e2 <udc_process_setup+0x4a8>
    e720:	80 91 d3 2d 	lds	r24, 0x2DD3	; 0x802dd3 <udd_g_ctrlreq+0x2>
    e724:	90 91 d4 2d 	lds	r25, 0x2DD4	; 0x802dd4 <udd_g_ctrlreq+0x3>
    e728:	89 2b       	or	r24, r25
    e72a:	09 f0       	breq	.+2      	; 0xe72e <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    e72c:	5a c0       	rjmp	.+180    	; 0xe7e2 <udc_process_setup+0x4a8>
    e72e:	80 91 d5 2d 	lds	r24, 0x2DD5	; 0x802dd5 <udd_g_ctrlreq+0x4>
    e732:	0e 94 98 57 	call	0xaf30	; 0xaf30 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    e736:	1e c0       	rjmp	.+60     	; 0xe774 <udc_process_setup+0x43a>
    e738:	80 91 d7 2d 	lds	r24, 0x2DD7	; 0x802dd7 <udd_g_ctrlreq+0x6>
    e73c:	90 91 d8 2d 	lds	r25, 0x2DD8	; 0x802dd8 <udd_g_ctrlreq+0x7>
    e740:	89 2b       	or	r24, r25
    e742:	09 f0       	breq	.+2      	; 0xe746 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    e744:	4e c0       	rjmp	.+156    	; 0xe7e2 <udc_process_setup+0x4a8>
    e746:	80 91 d3 2d 	lds	r24, 0x2DD3	; 0x802dd3 <udd_g_ctrlreq+0x2>
    e74a:	90 91 d4 2d 	lds	r25, 0x2DD4	; 0x802dd4 <udd_g_ctrlreq+0x3>
    e74e:	89 2b       	or	r24, r25
    e750:	09 f0       	breq	.+2      	; 0xe754 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    e752:	47 c0       	rjmp	.+142    	; 0xe7e2 <udc_process_setup+0x4a8>
    e754:	c1 ed       	ldi	r28, 0xD1	; 209
    e756:	dd e2       	ldi	r29, 0x2D	; 45
    e758:	8c 81       	ldd	r24, Y+4	; 0x04
    e75a:	0e 94 9a 58 	call	0xb134	; 0xb134 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    e75e:	8c 81       	ldd	r24, Y+4	; 0x04
    e760:	0e 94 05 59 	call	0xb20a	; 0xb20a <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    e764:	07 c0       	rjmp	.+14     	; 0xe774 <udc_process_setup+0x43a>
    e766:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    e768:	05 c0       	rjmp	.+10     	; 0xe774 <udc_process_setup+0x43a>
    e76a:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    e76c:	03 c0       	rjmp	.+6      	; 0xe774 <udc_process_setup+0x43a>
    e76e:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    e770:	01 c0       	rjmp	.+2      	; 0xe774 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    e772:	80 e0       	ldi	r24, 0x00	; 0
    e774:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    e776:	90 c0       	rjmp	.+288    	; 0xe898 <udc_process_setup+0x55e>
    e778:	80 91 d1 2d 	lds	r24, 0x2DD1	; 0x802dd1 <udd_g_ctrlreq>
    e77c:	8f 71       	andi	r24, 0x1F	; 31
    e77e:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    e780:	81 f5       	brne	.+96     	; 0xe7e2 <udc_process_setup+0x4a8>
    e782:	80 91 bc 2d 	lds	r24, 0x2DBC	; 0x802dbc <udc_num_configuration>
    e786:	88 23       	and	r24, r24
    e788:	09 f4       	brne	.+2      	; 0xe78c <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    e78a:	71 c0       	rjmp	.+226    	; 0xe86e <udc_process_setup+0x534>
    e78c:	00 91 d5 2d 	lds	r16, 0x2DD5	; 0x802dd5 <udd_g_ctrlreq+0x4>
    e790:	10 91 d6 2d 	lds	r17, 0x2DD6	; 0x802dd6 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    e794:	c0 91 ba 2d 	lds	r28, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e798:	d0 91 bb 2d 	lds	r29, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e79c:	e8 81       	ld	r30, Y
    e79e:	f9 81       	ldd	r31, Y+1	; 0x01
    e7a0:	84 81       	ldd	r24, Z+4	; 0x04
    e7a2:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    e7a4:	08 f0       	brcs	.+2      	; 0xe7a8 <udc_process_setup+0x46e>
    e7a6:	65 c0       	rjmp	.+202    	; 0xe872 <udc_process_setup+0x538>
    e7a8:	60 e0       	ldi	r22, 0x00	; 0
    e7aa:	80 2f       	mov	r24, r16
    e7ac:	b6 dc       	rcall	.-1684   	; 0xe11a <udc_update_iface_desc>
    e7ae:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    e7b0:	c1 f0       	breq	.+48     	; 0xe7e2 <udc_process_setup+0x4a8>
    e7b2:	f8 01       	movw	r30, r16
    e7b4:	ff 27       	eor	r31, r31
    e7b6:	cf 01       	movw	r24, r30
    e7b8:	88 0f       	add	r24, r24
    e7ba:	99 1f       	adc	r25, r25
    e7bc:	ea 81       	ldd	r30, Y+2	; 0x02
    e7be:	fb 81       	ldd	r31, Y+3	; 0x03
    e7c0:	e8 0f       	add	r30, r24
    e7c2:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    e7c4:	c0 81       	ld	r28, Z
    e7c6:	d1 81       	ldd	r29, Z+1	; 0x01
    e7c8:	ee 81       	ldd	r30, Y+6	; 0x06
    e7ca:	ff 81       	ldd	r31, Y+7	; 0x07
    e7cc:	19 95       	eicall
    e7ce:	68 2f       	mov	r22, r24
    e7d0:	80 2f       	mov	r24, r16
    e7d2:	a3 dc       	rcall	.-1722   	; 0xe11a <udc_update_iface_desc>
    e7d4:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    e7d6:	29 f0       	breq	.+10     	; 0xe7e2 <udc_process_setup+0x4a8>
    e7d8:	ec 81       	ldd	r30, Y+4	; 0x04
    e7da:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    e7dc:	19 95       	eicall
    e7de:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    e7e0:	5b c0       	rjmp	.+182    	; 0xe898 <udc_process_setup+0x55e>
    e7e2:	80 91 d1 2d 	lds	r24, 0x2DD1	; 0x802dd1 <udd_g_ctrlreq>
    e7e6:	8f 71       	andi	r24, 0x1F	; 31
    e7e8:	82 30       	cpi	r24, 0x02	; 2
    e7ea:	09 f0       	breq	.+2      	; 0xe7ee <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    e7ec:	44 c0       	rjmp	.+136    	; 0xe876 <udc_process_setup+0x53c>
    e7ee:	80 91 bc 2d 	lds	r24, 0x2DBC	; 0x802dbc <udc_num_configuration>
    e7f2:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e7f4:	b1 f1       	breq	.+108    	; 0xe862 <udc_process_setup+0x528>
    e7f6:	a0 91 ba 2d 	lds	r26, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e7fa:	b0 91 bb 2d 	lds	r27, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e7fe:	ed 91       	ld	r30, X+
    e800:	fc 91       	ld	r31, X
    e802:	11 97       	sbiw	r26, 0x01	; 1
    e804:	84 81       	ldd	r24, Z+4	; 0x04
    e806:	88 23       	and	r24, r24
    e808:	71 f1       	breq	.+92     	; 0xe866 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    e80a:	c0 e0       	ldi	r28, 0x00	; 0
    e80c:	ec 2f       	mov	r30, r28
    e80e:	f0 e0       	ldi	r31, 0x00	; 0
    e810:	ee 0f       	add	r30, r30
    e812:	ff 1f       	adc	r31, r31
    e814:	12 96       	adiw	r26, 0x02	; 2
    e816:	8d 91       	ld	r24, X+
    e818:	9c 91       	ld	r25, X
    e81a:	13 97       	sbiw	r26, 0x03	; 3
    e81c:	e8 0f       	add	r30, r24
    e81e:	f9 1f       	adc	r31, r25
    e820:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    e822:	11 81       	ldd	r17, Z+1	; 0x01
    e824:	d8 01       	movw	r26, r16
    e826:	16 96       	adiw	r26, 0x06	; 6
    e828:	ed 91       	ld	r30, X+
    e82a:	fc 91       	ld	r31, X
    e82c:	17 97       	sbiw	r26, 0x07	; 7
    e82e:	19 95       	eicall
    e830:	68 2f       	mov	r22, r24
    e832:	8c 2f       	mov	r24, r28
    e834:	72 dc       	rcall	.-1820   	; 0xe11a <udc_update_iface_desc>
    e836:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    e838:	79 f1       	breq	.+94     	; 0xe898 <udc_process_setup+0x55e>
    e83a:	d8 01       	movw	r26, r16
    e83c:	14 96       	adiw	r26, 0x04	; 4
    e83e:	ed 91       	ld	r30, X+
    e840:	fc 91       	ld	r31, X
    e842:	15 97       	sbiw	r26, 0x05	; 5
    e844:	19 95       	eicall
    e846:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    e848:	27 c0       	rjmp	.+78     	; 0xe898 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e84a:	cf 5f       	subi	r28, 0xFF	; 255
    e84c:	a0 91 ba 2d 	lds	r26, 0x2DBA	; 0x802dba <udc_ptr_conf>
    e850:	b0 91 bb 2d 	lds	r27, 0x2DBB	; 0x802dbb <udc_ptr_conf+0x1>
    e854:	ed 91       	ld	r30, X+
    e856:	fc 91       	ld	r31, X
    e858:	11 97       	sbiw	r26, 0x01	; 1
    e85a:	94 81       	ldd	r25, Z+4	; 0x04
    e85c:	c9 17       	cp	r28, r25
    e85e:	b0 f2       	brcs	.-84     	; 0xe80c <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    e860:	1b c0       	rjmp	.+54     	; 0xe898 <udc_process_setup+0x55e>
    e862:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    e864:	19 c0       	rjmp	.+50     	; 0xe898 <udc_process_setup+0x55e>
    e866:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    e868:	17 c0       	rjmp	.+46     	; 0xe898 <udc_process_setup+0x55e>
    e86a:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    e86c:	15 c0       	rjmp	.+42     	; 0xe898 <udc_process_setup+0x55e>
    e86e:	80 e0       	ldi	r24, 0x00	; 0
    e870:	13 c0       	rjmp	.+38     	; 0xe898 <udc_process_setup+0x55e>
    e872:	80 e0       	ldi	r24, 0x00	; 0
    e874:	11 c0       	rjmp	.+34     	; 0xe898 <udc_process_setup+0x55e>
    e876:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    e878:	0f c0       	rjmp	.+30     	; 0xe898 <udc_process_setup+0x55e>
    e87a:	98 2f       	mov	r25, r24
    e87c:	90 76       	andi	r25, 0x60	; 96
    e87e:	09 f0       	breq	.+2      	; 0xe882 <udc_process_setup+0x548>
    e880:	7b cf       	rjmp	.-266    	; 0xe778 <udc_process_setup+0x43e>
    e882:	74 cd       	rjmp	.-1304   	; 0xe36c <udc_process_setup+0x32>
    e884:	98 2f       	mov	r25, r24
    e886:	90 76       	andi	r25, 0x60	; 96
    e888:	09 f0       	breq	.+2      	; 0xe88c <udc_process_setup+0x552>
    e88a:	76 cf       	rjmp	.-276    	; 0xe778 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    e88c:	77 ce       	rjmp	.-786    	; 0xe57c <udc_process_setup+0x242>
		str = udc_string_product_name;
    e88e:	3c e0       	ldi	r19, 0x0C	; 12
    e890:	e6 e0       	ldi	r30, 0x06	; 6
    e892:	f1 e2       	ldi	r31, 0x21	; 33
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    e894:	eb cd       	rjmp	.-1066   	; 0xe46c <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    e896:	81 e0       	ldi	r24, 0x01	; 1
    e898:	df 91       	pop	r29
    e89a:	cf 91       	pop	r28
    e89c:	1f 91       	pop	r17
    e89e:	0f 91       	pop	r16
    e8a0:	08 95       	ret

0000e8a2 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    e8a2:	cf 93       	push	r28
    e8a4:	df 93       	push	r29
    e8a6:	1f 92       	push	r1
    e8a8:	cd b7       	in	r28, 0x3d	; 61
    e8aa:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    e8ac:	80 91 71 2e 	lds	r24, 0x2E71	; 0x802e71 <stdio_base>
    e8b0:	90 91 72 2e 	lds	r25, 0x2E72	; 0x802e72 <stdio_base+0x1>
    e8b4:	e0 91 6d 2e 	lds	r30, 0x2E6D	; 0x802e6d <ptr_get>
    e8b8:	f0 91 6e 2e 	lds	r31, 0x2E6E	; 0x802e6e <ptr_get+0x1>
    e8bc:	be 01       	movw	r22, r28
    e8be:	6f 5f       	subi	r22, 0xFF	; 255
    e8c0:	7f 4f       	sbci	r23, 0xFF	; 255
    e8c2:	19 95       	eicall
	return c;
    e8c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    e8c6:	08 2e       	mov	r0, r24
    e8c8:	00 0c       	add	r0, r0
    e8ca:	99 0b       	sbc	r25, r25
    e8cc:	0f 90       	pop	r0
    e8ce:	df 91       	pop	r29
    e8d0:	cf 91       	pop	r28
    e8d2:	08 95       	ret

0000e8d4 <stdio_usb_putchar>:
int stdio_usb_putchar (volatile void * unused, char data)
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    e8d4:	80 91 c2 2d 	lds	r24, 0x2DC2	; 0x802dc2 <stdio_usb_interface_enable>
    e8d8:	88 23       	and	r24, r24
    e8da:	81 f0       	breq	.+32     	; 0xe8fc <stdio_usb_putchar+0x28>
    e8dc:	86 2f       	mov	r24, r22
		return 0;  // -1
	}

	return udi_cdc_putc(data) ? 0 : -1;
    e8de:	08 2e       	mov	r0, r24
    e8e0:	00 0c       	add	r0, r0
    e8e2:	99 0b       	sbc	r25, r25
    e8e4:	db db       	rcall	.-2122   	; 0xe09c <udi_cdc_putc>
    e8e6:	21 e0       	ldi	r18, 0x01	; 1
    e8e8:	30 e0       	ldi	r19, 0x00	; 0
    e8ea:	89 2b       	or	r24, r25
    e8ec:	11 f0       	breq	.+4      	; 0xe8f2 <stdio_usb_putchar+0x1e>
    e8ee:	20 e0       	ldi	r18, 0x00	; 0
    e8f0:	30 e0       	ldi	r19, 0x00	; 0
    e8f2:	88 27       	eor	r24, r24
    e8f4:	99 27       	eor	r25, r25
    e8f6:	82 1b       	sub	r24, r18
    e8f8:	93 0b       	sbc	r25, r19
    e8fa:	08 95       	ret
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
		return 0;  // -1
    e8fc:	80 e0       	ldi	r24, 0x00	; 0
    e8fe:	90 e0       	ldi	r25, 0x00	; 0
	}

	return udi_cdc_putc(data) ? 0 : -1;
}
    e900:	08 95       	ret

0000e902 <stdio_usb_getchar>:

void stdio_usb_getchar (void volatile * unused, char *data)
{
    e902:	cf 93       	push	r28
    e904:	df 93       	push	r29
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    e906:	80 91 c2 2d 	lds	r24, 0x2DC2	; 0x802dc2 <stdio_usb_interface_enable>
    e90a:	81 11       	cpse	r24, r1
    e90c:	03 c0       	rjmp	.+6      	; 0xe914 <stdio_usb_getchar+0x12>
		*data = 0;  // -1
    e90e:	fb 01       	movw	r30, r22
    e910:	10 82       	st	Z, r1
		return;
    e912:	03 c0       	rjmp	.+6      	; 0xe91a <stdio_usb_getchar+0x18>
	}

	*data = (char)udi_cdc_getc();
    e914:	eb 01       	movw	r28, r22
    e916:	cf da       	rcall	.-2658   	; 0xdeb6 <udi_cdc_getc>
}
    e918:	88 83       	st	Y, r24
    e91a:	df 91       	pop	r29
    e91c:	cf 91       	pop	r28
    e91e:	08 95       	ret

0000e920 <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
    e920:	81 e0       	ldi	r24, 0x01	; 1
    e922:	80 93 c2 2d 	sts	0x2DC2, r24	; 0x802dc2 <stdio_usb_interface_enable>
	return true;
}
    e926:	08 95       	ret

0000e928 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    e928:	10 92 c2 2d 	sts	0x2DC2, r1	; 0x802dc2 <stdio_usb_interface_enable>
    e92c:	08 95       	ret

0000e92e <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    e92e:	10 92 71 2e 	sts	0x2E71, r1	; 0x802e71 <stdio_base>
    e932:	10 92 72 2e 	sts	0x2E72, r1	; 0x802e72 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    e936:	8a e6       	ldi	r24, 0x6A	; 106
    e938:	94 e7       	ldi	r25, 0x74	; 116
    e93a:	80 93 6f 2e 	sts	0x2E6F, r24	; 0x802e6f <ptr_put>
    e93e:	90 93 70 2e 	sts	0x2E70, r25	; 0x802e70 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    e942:	81 e8       	ldi	r24, 0x81	; 129
    e944:	94 e7       	ldi	r25, 0x74	; 116
    e946:	80 93 6d 2e 	sts	0x2E6D, r24	; 0x802e6d <ptr_get>
    e94a:	90 93 6e 2e 	sts	0x2E6E, r25	; 0x802e6e <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    e94e:	94 dc       	rcall	.-1752   	; 0xe278 <udc_start>
    e950:	61 e5       	ldi	r22, 0x51	; 81
    e952:	74 e7       	ldi	r23, 0x74	; 116
    e954:	8f ea       	ldi	r24, 0xAF	; 175
    e956:	94 e7       	ldi	r25, 0x74	; 116
    e958:	0c 94 07 80 	jmp	0x1000e	; 0x1000e <fdevopen>
    e95c:	08 95       	ret

0000e95e <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    e95e:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    e960:	80 91 71 2e 	lds	r24, 0x2E71	; 0x802e71 <stdio_base>
    e964:	90 91 72 2e 	lds	r25, 0x2E72	; 0x802e72 <stdio_base+0x1>
    e968:	e0 91 6f 2e 	lds	r30, 0x2E6F	; 0x802e6f <ptr_put>
    e96c:	f0 91 70 2e 	lds	r31, 0x2E70	; 0x802e70 <ptr_put+0x1>
    e970:	19 95       	eicall
    e972:	99 23       	and	r25, r25
    e974:	1c f0       	brlt	.+6      	; 0xe97c <_write+0x1e>
		return -1;
	}
	return 1;
    e976:	81 e0       	ldi	r24, 0x01	; 1
    e978:	90 e0       	ldi	r25, 0x00	; 0
    e97a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    e97c:	8f ef       	ldi	r24, 0xFF	; 255
    e97e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    e980:	08 95       	ret

0000e982 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    e982:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    e986:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    e988:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    e98a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    e98e:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    e990:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    e994:	08 95       	ret

0000e996 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    e996:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    e998:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    e99a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    e99c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    e99e:	60 83       	st	Z, r22
	ret                             // Return to caller
    e9a0:	08 95       	ret

0000e9a2 <vfprintf>:
    e9a2:	2f 92       	push	r2
    e9a4:	3f 92       	push	r3
    e9a6:	4f 92       	push	r4
    e9a8:	5f 92       	push	r5
    e9aa:	6f 92       	push	r6
    e9ac:	7f 92       	push	r7
    e9ae:	8f 92       	push	r8
    e9b0:	9f 92       	push	r9
    e9b2:	af 92       	push	r10
    e9b4:	bf 92       	push	r11
    e9b6:	cf 92       	push	r12
    e9b8:	df 92       	push	r13
    e9ba:	ef 92       	push	r14
    e9bc:	ff 92       	push	r15
    e9be:	0f 93       	push	r16
    e9c0:	1f 93       	push	r17
    e9c2:	cf 93       	push	r28
    e9c4:	df 93       	push	r29
    e9c6:	cd b7       	in	r28, 0x3d	; 61
    e9c8:	de b7       	in	r29, 0x3e	; 62
    e9ca:	60 97       	sbiw	r28, 0x10	; 16
    e9cc:	cd bf       	out	0x3d, r28	; 61
    e9ce:	de bf       	out	0x3e, r29	; 62
    e9d0:	7c 01       	movw	r14, r24
    e9d2:	1b 01       	movw	r2, r22
    e9d4:	6a 01       	movw	r12, r20
    e9d6:	fc 01       	movw	r30, r24
    e9d8:	16 82       	std	Z+6, r1	; 0x06
    e9da:	17 82       	std	Z+7, r1	; 0x07
    e9dc:	83 81       	ldd	r24, Z+3	; 0x03
    e9de:	81 ff       	sbrs	r24, 1
    e9e0:	44 c3       	rjmp	.+1672   	; 0xf06a <vfprintf+0x6c8>
    e9e2:	9e 01       	movw	r18, r28
    e9e4:	2f 5f       	subi	r18, 0xFF	; 255
    e9e6:	3f 4f       	sbci	r19, 0xFF	; 255
    e9e8:	39 01       	movw	r6, r18
    e9ea:	f7 01       	movw	r30, r14
    e9ec:	93 81       	ldd	r25, Z+3	; 0x03
    e9ee:	f1 01       	movw	r30, r2
    e9f0:	93 fd       	sbrc	r25, 3
    e9f2:	85 91       	lpm	r24, Z+
    e9f4:	93 ff       	sbrs	r25, 3
    e9f6:	81 91       	ld	r24, Z+
    e9f8:	1f 01       	movw	r2, r30
    e9fa:	88 23       	and	r24, r24
    e9fc:	09 f4       	brne	.+2      	; 0xea00 <vfprintf+0x5e>
    e9fe:	31 c3       	rjmp	.+1634   	; 0xf062 <vfprintf+0x6c0>
    ea00:	85 32       	cpi	r24, 0x25	; 37
    ea02:	39 f4       	brne	.+14     	; 0xea12 <vfprintf+0x70>
    ea04:	93 fd       	sbrc	r25, 3
    ea06:	85 91       	lpm	r24, Z+
    ea08:	93 ff       	sbrs	r25, 3
    ea0a:	81 91       	ld	r24, Z+
    ea0c:	1f 01       	movw	r2, r30
    ea0e:	85 32       	cpi	r24, 0x25	; 37
    ea10:	39 f4       	brne	.+14     	; 0xea20 <vfprintf+0x7e>
    ea12:	b7 01       	movw	r22, r14
    ea14:	90 e0       	ldi	r25, 0x00	; 0
    ea16:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ea1a:	56 01       	movw	r10, r12
    ea1c:	65 01       	movw	r12, r10
    ea1e:	e5 cf       	rjmp	.-54     	; 0xe9ea <vfprintf+0x48>
    ea20:	10 e0       	ldi	r17, 0x00	; 0
    ea22:	51 2c       	mov	r5, r1
    ea24:	91 2c       	mov	r9, r1
    ea26:	ff e1       	ldi	r31, 0x1F	; 31
    ea28:	f9 15       	cp	r31, r9
    ea2a:	d8 f0       	brcs	.+54     	; 0xea62 <vfprintf+0xc0>
    ea2c:	8b 32       	cpi	r24, 0x2B	; 43
    ea2e:	79 f0       	breq	.+30     	; 0xea4e <vfprintf+0xac>
    ea30:	38 f4       	brcc	.+14     	; 0xea40 <vfprintf+0x9e>
    ea32:	80 32       	cpi	r24, 0x20	; 32
    ea34:	79 f0       	breq	.+30     	; 0xea54 <vfprintf+0xb2>
    ea36:	83 32       	cpi	r24, 0x23	; 35
    ea38:	a1 f4       	brne	.+40     	; 0xea62 <vfprintf+0xc0>
    ea3a:	f9 2d       	mov	r31, r9
    ea3c:	f0 61       	ori	r31, 0x10	; 16
    ea3e:	2e c0       	rjmp	.+92     	; 0xea9c <vfprintf+0xfa>
    ea40:	8d 32       	cpi	r24, 0x2D	; 45
    ea42:	61 f0       	breq	.+24     	; 0xea5c <vfprintf+0xba>
    ea44:	80 33       	cpi	r24, 0x30	; 48
    ea46:	69 f4       	brne	.+26     	; 0xea62 <vfprintf+0xc0>
    ea48:	29 2d       	mov	r18, r9
    ea4a:	21 60       	ori	r18, 0x01	; 1
    ea4c:	2d c0       	rjmp	.+90     	; 0xeaa8 <vfprintf+0x106>
    ea4e:	39 2d       	mov	r19, r9
    ea50:	32 60       	ori	r19, 0x02	; 2
    ea52:	93 2e       	mov	r9, r19
    ea54:	89 2d       	mov	r24, r9
    ea56:	84 60       	ori	r24, 0x04	; 4
    ea58:	98 2e       	mov	r9, r24
    ea5a:	2a c0       	rjmp	.+84     	; 0xeab0 <vfprintf+0x10e>
    ea5c:	e9 2d       	mov	r30, r9
    ea5e:	e8 60       	ori	r30, 0x08	; 8
    ea60:	15 c0       	rjmp	.+42     	; 0xea8c <vfprintf+0xea>
    ea62:	97 fc       	sbrc	r9, 7
    ea64:	2d c0       	rjmp	.+90     	; 0xeac0 <vfprintf+0x11e>
    ea66:	20 ed       	ldi	r18, 0xD0	; 208
    ea68:	28 0f       	add	r18, r24
    ea6a:	2a 30       	cpi	r18, 0x0A	; 10
    ea6c:	88 f4       	brcc	.+34     	; 0xea90 <vfprintf+0xee>
    ea6e:	96 fe       	sbrs	r9, 6
    ea70:	06 c0       	rjmp	.+12     	; 0xea7e <vfprintf+0xdc>
    ea72:	3a e0       	ldi	r19, 0x0A	; 10
    ea74:	13 9f       	mul	r17, r19
    ea76:	20 0d       	add	r18, r0
    ea78:	11 24       	eor	r1, r1
    ea7a:	12 2f       	mov	r17, r18
    ea7c:	19 c0       	rjmp	.+50     	; 0xeab0 <vfprintf+0x10e>
    ea7e:	8a e0       	ldi	r24, 0x0A	; 10
    ea80:	58 9e       	mul	r5, r24
    ea82:	20 0d       	add	r18, r0
    ea84:	11 24       	eor	r1, r1
    ea86:	52 2e       	mov	r5, r18
    ea88:	e9 2d       	mov	r30, r9
    ea8a:	e0 62       	ori	r30, 0x20	; 32
    ea8c:	9e 2e       	mov	r9, r30
    ea8e:	10 c0       	rjmp	.+32     	; 0xeab0 <vfprintf+0x10e>
    ea90:	8e 32       	cpi	r24, 0x2E	; 46
    ea92:	31 f4       	brne	.+12     	; 0xeaa0 <vfprintf+0xfe>
    ea94:	96 fc       	sbrc	r9, 6
    ea96:	e5 c2       	rjmp	.+1482   	; 0xf062 <vfprintf+0x6c0>
    ea98:	f9 2d       	mov	r31, r9
    ea9a:	f0 64       	ori	r31, 0x40	; 64
    ea9c:	9f 2e       	mov	r9, r31
    ea9e:	08 c0       	rjmp	.+16     	; 0xeab0 <vfprintf+0x10e>
    eaa0:	8c 36       	cpi	r24, 0x6C	; 108
    eaa2:	21 f4       	brne	.+8      	; 0xeaac <vfprintf+0x10a>
    eaa4:	29 2d       	mov	r18, r9
    eaa6:	20 68       	ori	r18, 0x80	; 128
    eaa8:	92 2e       	mov	r9, r18
    eaaa:	02 c0       	rjmp	.+4      	; 0xeab0 <vfprintf+0x10e>
    eaac:	88 36       	cpi	r24, 0x68	; 104
    eaae:	41 f4       	brne	.+16     	; 0xeac0 <vfprintf+0x11e>
    eab0:	f1 01       	movw	r30, r2
    eab2:	93 fd       	sbrc	r25, 3
    eab4:	85 91       	lpm	r24, Z+
    eab6:	93 ff       	sbrs	r25, 3
    eab8:	81 91       	ld	r24, Z+
    eaba:	1f 01       	movw	r2, r30
    eabc:	81 11       	cpse	r24, r1
    eabe:	b3 cf       	rjmp	.-154    	; 0xea26 <vfprintf+0x84>
    eac0:	9b eb       	ldi	r25, 0xBB	; 187
    eac2:	98 0f       	add	r25, r24
    eac4:	93 30       	cpi	r25, 0x03	; 3
    eac6:	20 f4       	brcc	.+8      	; 0xead0 <vfprintf+0x12e>
    eac8:	99 2d       	mov	r25, r9
    eaca:	90 61       	ori	r25, 0x10	; 16
    eacc:	80 5e       	subi	r24, 0xE0	; 224
    eace:	07 c0       	rjmp	.+14     	; 0xeade <vfprintf+0x13c>
    ead0:	9b e9       	ldi	r25, 0x9B	; 155
    ead2:	98 0f       	add	r25, r24
    ead4:	93 30       	cpi	r25, 0x03	; 3
    ead6:	08 f0       	brcs	.+2      	; 0xeada <vfprintf+0x138>
    ead8:	66 c1       	rjmp	.+716    	; 0xeda6 <vfprintf+0x404>
    eada:	99 2d       	mov	r25, r9
    eadc:	9f 7e       	andi	r25, 0xEF	; 239
    eade:	96 ff       	sbrs	r25, 6
    eae0:	16 e0       	ldi	r17, 0x06	; 6
    eae2:	9f 73       	andi	r25, 0x3F	; 63
    eae4:	99 2e       	mov	r9, r25
    eae6:	85 36       	cpi	r24, 0x65	; 101
    eae8:	19 f4       	brne	.+6      	; 0xeaf0 <vfprintf+0x14e>
    eaea:	90 64       	ori	r25, 0x40	; 64
    eaec:	99 2e       	mov	r9, r25
    eaee:	08 c0       	rjmp	.+16     	; 0xeb00 <vfprintf+0x15e>
    eaf0:	86 36       	cpi	r24, 0x66	; 102
    eaf2:	21 f4       	brne	.+8      	; 0xeafc <vfprintf+0x15a>
    eaf4:	39 2f       	mov	r19, r25
    eaf6:	30 68       	ori	r19, 0x80	; 128
    eaf8:	93 2e       	mov	r9, r19
    eafa:	02 c0       	rjmp	.+4      	; 0xeb00 <vfprintf+0x15e>
    eafc:	11 11       	cpse	r17, r1
    eafe:	11 50       	subi	r17, 0x01	; 1
    eb00:	97 fe       	sbrs	r9, 7
    eb02:	07 c0       	rjmp	.+14     	; 0xeb12 <vfprintf+0x170>
    eb04:	1c 33       	cpi	r17, 0x3C	; 60
    eb06:	50 f4       	brcc	.+20     	; 0xeb1c <vfprintf+0x17a>
    eb08:	44 24       	eor	r4, r4
    eb0a:	43 94       	inc	r4
    eb0c:	41 0e       	add	r4, r17
    eb0e:	27 e0       	ldi	r18, 0x07	; 7
    eb10:	0b c0       	rjmp	.+22     	; 0xeb28 <vfprintf+0x186>
    eb12:	18 30       	cpi	r17, 0x08	; 8
    eb14:	38 f0       	brcs	.+14     	; 0xeb24 <vfprintf+0x182>
    eb16:	27 e0       	ldi	r18, 0x07	; 7
    eb18:	17 e0       	ldi	r17, 0x07	; 7
    eb1a:	05 c0       	rjmp	.+10     	; 0xeb26 <vfprintf+0x184>
    eb1c:	27 e0       	ldi	r18, 0x07	; 7
    eb1e:	9c e3       	ldi	r25, 0x3C	; 60
    eb20:	49 2e       	mov	r4, r25
    eb22:	02 c0       	rjmp	.+4      	; 0xeb28 <vfprintf+0x186>
    eb24:	21 2f       	mov	r18, r17
    eb26:	41 2c       	mov	r4, r1
    eb28:	56 01       	movw	r10, r12
    eb2a:	84 e0       	ldi	r24, 0x04	; 4
    eb2c:	a8 0e       	add	r10, r24
    eb2e:	b1 1c       	adc	r11, r1
    eb30:	f6 01       	movw	r30, r12
    eb32:	60 81       	ld	r22, Z
    eb34:	71 81       	ldd	r23, Z+1	; 0x01
    eb36:	82 81       	ldd	r24, Z+2	; 0x02
    eb38:	93 81       	ldd	r25, Z+3	; 0x03
    eb3a:	04 2d       	mov	r16, r4
    eb3c:	a3 01       	movw	r20, r6
    eb3e:	0e 94 9b 7e 	call	0xfd36	; 0xfd36 <__ftoa_engine>
    eb42:	6c 01       	movw	r12, r24
    eb44:	f9 81       	ldd	r31, Y+1	; 0x01
    eb46:	fc 87       	std	Y+12, r31	; 0x0c
    eb48:	f0 ff       	sbrs	r31, 0
    eb4a:	02 c0       	rjmp	.+4      	; 0xeb50 <vfprintf+0x1ae>
    eb4c:	f3 ff       	sbrs	r31, 3
    eb4e:	06 c0       	rjmp	.+12     	; 0xeb5c <vfprintf+0x1ba>
    eb50:	91 fc       	sbrc	r9, 1
    eb52:	06 c0       	rjmp	.+12     	; 0xeb60 <vfprintf+0x1be>
    eb54:	92 fe       	sbrs	r9, 2
    eb56:	06 c0       	rjmp	.+12     	; 0xeb64 <vfprintf+0x1c2>
    eb58:	00 e2       	ldi	r16, 0x20	; 32
    eb5a:	05 c0       	rjmp	.+10     	; 0xeb66 <vfprintf+0x1c4>
    eb5c:	0d e2       	ldi	r16, 0x2D	; 45
    eb5e:	03 c0       	rjmp	.+6      	; 0xeb66 <vfprintf+0x1c4>
    eb60:	0b e2       	ldi	r16, 0x2B	; 43
    eb62:	01 c0       	rjmp	.+2      	; 0xeb66 <vfprintf+0x1c4>
    eb64:	00 e0       	ldi	r16, 0x00	; 0
    eb66:	8c 85       	ldd	r24, Y+12	; 0x0c
    eb68:	8c 70       	andi	r24, 0x0C	; 12
    eb6a:	19 f0       	breq	.+6      	; 0xeb72 <vfprintf+0x1d0>
    eb6c:	01 11       	cpse	r16, r1
    eb6e:	5a c2       	rjmp	.+1204   	; 0xf024 <vfprintf+0x682>
    eb70:	9b c2       	rjmp	.+1334   	; 0xf0a8 <vfprintf+0x706>
    eb72:	97 fe       	sbrs	r9, 7
    eb74:	10 c0       	rjmp	.+32     	; 0xeb96 <vfprintf+0x1f4>
    eb76:	4c 0c       	add	r4, r12
    eb78:	fc 85       	ldd	r31, Y+12	; 0x0c
    eb7a:	f4 ff       	sbrs	r31, 4
    eb7c:	04 c0       	rjmp	.+8      	; 0xeb86 <vfprintf+0x1e4>
    eb7e:	8a 81       	ldd	r24, Y+2	; 0x02
    eb80:	81 33       	cpi	r24, 0x31	; 49
    eb82:	09 f4       	brne	.+2      	; 0xeb86 <vfprintf+0x1e4>
    eb84:	4a 94       	dec	r4
    eb86:	14 14       	cp	r1, r4
    eb88:	74 f5       	brge	.+92     	; 0xebe6 <vfprintf+0x244>
    eb8a:	28 e0       	ldi	r18, 0x08	; 8
    eb8c:	24 15       	cp	r18, r4
    eb8e:	78 f5       	brcc	.+94     	; 0xebee <vfprintf+0x24c>
    eb90:	88 e0       	ldi	r24, 0x08	; 8
    eb92:	48 2e       	mov	r4, r24
    eb94:	2c c0       	rjmp	.+88     	; 0xebee <vfprintf+0x24c>
    eb96:	96 fc       	sbrc	r9, 6
    eb98:	2a c0       	rjmp	.+84     	; 0xebee <vfprintf+0x24c>
    eb9a:	81 2f       	mov	r24, r17
    eb9c:	90 e0       	ldi	r25, 0x00	; 0
    eb9e:	8c 15       	cp	r24, r12
    eba0:	9d 05       	cpc	r25, r13
    eba2:	9c f0       	brlt	.+38     	; 0xebca <vfprintf+0x228>
    eba4:	3c ef       	ldi	r19, 0xFC	; 252
    eba6:	c3 16       	cp	r12, r19
    eba8:	3f ef       	ldi	r19, 0xFF	; 255
    ebaa:	d3 06       	cpc	r13, r19
    ebac:	74 f0       	brlt	.+28     	; 0xebca <vfprintf+0x228>
    ebae:	89 2d       	mov	r24, r9
    ebb0:	80 68       	ori	r24, 0x80	; 128
    ebb2:	98 2e       	mov	r9, r24
    ebb4:	0a c0       	rjmp	.+20     	; 0xebca <vfprintf+0x228>
    ebb6:	e2 e0       	ldi	r30, 0x02	; 2
    ebb8:	f0 e0       	ldi	r31, 0x00	; 0
    ebba:	ec 0f       	add	r30, r28
    ebbc:	fd 1f       	adc	r31, r29
    ebbe:	e1 0f       	add	r30, r17
    ebc0:	f1 1d       	adc	r31, r1
    ebc2:	80 81       	ld	r24, Z
    ebc4:	80 33       	cpi	r24, 0x30	; 48
    ebc6:	19 f4       	brne	.+6      	; 0xebce <vfprintf+0x22c>
    ebc8:	11 50       	subi	r17, 0x01	; 1
    ebca:	11 11       	cpse	r17, r1
    ebcc:	f4 cf       	rjmp	.-24     	; 0xebb6 <vfprintf+0x214>
    ebce:	97 fe       	sbrs	r9, 7
    ebd0:	0e c0       	rjmp	.+28     	; 0xebee <vfprintf+0x24c>
    ebd2:	44 24       	eor	r4, r4
    ebd4:	43 94       	inc	r4
    ebd6:	41 0e       	add	r4, r17
    ebd8:	81 2f       	mov	r24, r17
    ebda:	90 e0       	ldi	r25, 0x00	; 0
    ebdc:	c8 16       	cp	r12, r24
    ebde:	d9 06       	cpc	r13, r25
    ebe0:	2c f4       	brge	.+10     	; 0xebec <vfprintf+0x24a>
    ebe2:	1c 19       	sub	r17, r12
    ebe4:	04 c0       	rjmp	.+8      	; 0xebee <vfprintf+0x24c>
    ebe6:	44 24       	eor	r4, r4
    ebe8:	43 94       	inc	r4
    ebea:	01 c0       	rjmp	.+2      	; 0xebee <vfprintf+0x24c>
    ebec:	10 e0       	ldi	r17, 0x00	; 0
    ebee:	97 fe       	sbrs	r9, 7
    ebf0:	06 c0       	rjmp	.+12     	; 0xebfe <vfprintf+0x25c>
    ebf2:	1c 14       	cp	r1, r12
    ebf4:	1d 04       	cpc	r1, r13
    ebf6:	34 f4       	brge	.+12     	; 0xec04 <vfprintf+0x262>
    ebf8:	c6 01       	movw	r24, r12
    ebfa:	01 96       	adiw	r24, 0x01	; 1
    ebfc:	05 c0       	rjmp	.+10     	; 0xec08 <vfprintf+0x266>
    ebfe:	85 e0       	ldi	r24, 0x05	; 5
    ec00:	90 e0       	ldi	r25, 0x00	; 0
    ec02:	02 c0       	rjmp	.+4      	; 0xec08 <vfprintf+0x266>
    ec04:	81 e0       	ldi	r24, 0x01	; 1
    ec06:	90 e0       	ldi	r25, 0x00	; 0
    ec08:	01 11       	cpse	r16, r1
    ec0a:	01 96       	adiw	r24, 0x01	; 1
    ec0c:	11 23       	and	r17, r17
    ec0e:	31 f0       	breq	.+12     	; 0xec1c <vfprintf+0x27a>
    ec10:	21 2f       	mov	r18, r17
    ec12:	30 e0       	ldi	r19, 0x00	; 0
    ec14:	2f 5f       	subi	r18, 0xFF	; 255
    ec16:	3f 4f       	sbci	r19, 0xFF	; 255
    ec18:	82 0f       	add	r24, r18
    ec1a:	93 1f       	adc	r25, r19
    ec1c:	25 2d       	mov	r18, r5
    ec1e:	30 e0       	ldi	r19, 0x00	; 0
    ec20:	82 17       	cp	r24, r18
    ec22:	93 07       	cpc	r25, r19
    ec24:	14 f4       	brge	.+4      	; 0xec2a <vfprintf+0x288>
    ec26:	58 1a       	sub	r5, r24
    ec28:	01 c0       	rjmp	.+2      	; 0xec2c <vfprintf+0x28a>
    ec2a:	51 2c       	mov	r5, r1
    ec2c:	89 2d       	mov	r24, r9
    ec2e:	89 70       	andi	r24, 0x09	; 9
    ec30:	49 f4       	brne	.+18     	; 0xec44 <vfprintf+0x2a2>
    ec32:	55 20       	and	r5, r5
    ec34:	39 f0       	breq	.+14     	; 0xec44 <vfprintf+0x2a2>
    ec36:	b7 01       	movw	r22, r14
    ec38:	80 e2       	ldi	r24, 0x20	; 32
    ec3a:	90 e0       	ldi	r25, 0x00	; 0
    ec3c:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ec40:	5a 94       	dec	r5
    ec42:	f7 cf       	rjmp	.-18     	; 0xec32 <vfprintf+0x290>
    ec44:	00 23       	and	r16, r16
    ec46:	29 f0       	breq	.+10     	; 0xec52 <vfprintf+0x2b0>
    ec48:	b7 01       	movw	r22, r14
    ec4a:	80 2f       	mov	r24, r16
    ec4c:	90 e0       	ldi	r25, 0x00	; 0
    ec4e:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ec52:	93 fc       	sbrc	r9, 3
    ec54:	09 c0       	rjmp	.+18     	; 0xec68 <vfprintf+0x2c6>
    ec56:	55 20       	and	r5, r5
    ec58:	39 f0       	breq	.+14     	; 0xec68 <vfprintf+0x2c6>
    ec5a:	b7 01       	movw	r22, r14
    ec5c:	80 e3       	ldi	r24, 0x30	; 48
    ec5e:	90 e0       	ldi	r25, 0x00	; 0
    ec60:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ec64:	5a 94       	dec	r5
    ec66:	f7 cf       	rjmp	.-18     	; 0xec56 <vfprintf+0x2b4>
    ec68:	97 fe       	sbrs	r9, 7
    ec6a:	4c c0       	rjmp	.+152    	; 0xed04 <vfprintf+0x362>
    ec6c:	46 01       	movw	r8, r12
    ec6e:	d7 fe       	sbrs	r13, 7
    ec70:	02 c0       	rjmp	.+4      	; 0xec76 <vfprintf+0x2d4>
    ec72:	81 2c       	mov	r8, r1
    ec74:	91 2c       	mov	r9, r1
    ec76:	c6 01       	movw	r24, r12
    ec78:	88 19       	sub	r24, r8
    ec7a:	99 09       	sbc	r25, r9
    ec7c:	f3 01       	movw	r30, r6
    ec7e:	e8 0f       	add	r30, r24
    ec80:	f9 1f       	adc	r31, r25
    ec82:	ed 87       	std	Y+13, r30	; 0x0d
    ec84:	fe 87       	std	Y+14, r31	; 0x0e
    ec86:	96 01       	movw	r18, r12
    ec88:	24 19       	sub	r18, r4
    ec8a:	31 09       	sbc	r19, r1
    ec8c:	2f 87       	std	Y+15, r18	; 0x0f
    ec8e:	38 8b       	std	Y+16, r19	; 0x10
    ec90:	01 2f       	mov	r16, r17
    ec92:	10 e0       	ldi	r17, 0x00	; 0
    ec94:	11 95       	neg	r17
    ec96:	01 95       	neg	r16
    ec98:	11 09       	sbc	r17, r1
    ec9a:	3f ef       	ldi	r19, 0xFF	; 255
    ec9c:	83 16       	cp	r8, r19
    ec9e:	93 06       	cpc	r9, r19
    eca0:	29 f4       	brne	.+10     	; 0xecac <vfprintf+0x30a>
    eca2:	b7 01       	movw	r22, r14
    eca4:	8e e2       	ldi	r24, 0x2E	; 46
    eca6:	90 e0       	ldi	r25, 0x00	; 0
    eca8:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ecac:	c8 14       	cp	r12, r8
    ecae:	d9 04       	cpc	r13, r9
    ecb0:	4c f0       	brlt	.+18     	; 0xecc4 <vfprintf+0x322>
    ecb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    ecb4:	98 89       	ldd	r25, Y+16	; 0x10
    ecb6:	88 15       	cp	r24, r8
    ecb8:	99 05       	cpc	r25, r9
    ecba:	24 f4       	brge	.+8      	; 0xecc4 <vfprintf+0x322>
    ecbc:	ed 85       	ldd	r30, Y+13	; 0x0d
    ecbe:	fe 85       	ldd	r31, Y+14	; 0x0e
    ecc0:	81 81       	ldd	r24, Z+1	; 0x01
    ecc2:	01 c0       	rjmp	.+2      	; 0xecc6 <vfprintf+0x324>
    ecc4:	80 e3       	ldi	r24, 0x30	; 48
    ecc6:	f1 e0       	ldi	r31, 0x01	; 1
    ecc8:	8f 1a       	sub	r8, r31
    ecca:	91 08       	sbc	r9, r1
    eccc:	2d 85       	ldd	r18, Y+13	; 0x0d
    ecce:	3e 85       	ldd	r19, Y+14	; 0x0e
    ecd0:	2f 5f       	subi	r18, 0xFF	; 255
    ecd2:	3f 4f       	sbci	r19, 0xFF	; 255
    ecd4:	2d 87       	std	Y+13, r18	; 0x0d
    ecd6:	3e 87       	std	Y+14, r19	; 0x0e
    ecd8:	80 16       	cp	r8, r16
    ecda:	91 06       	cpc	r9, r17
    ecdc:	2c f0       	brlt	.+10     	; 0xece8 <vfprintf+0x346>
    ecde:	b7 01       	movw	r22, r14
    ece0:	90 e0       	ldi	r25, 0x00	; 0
    ece2:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ece6:	d9 cf       	rjmp	.-78     	; 0xec9a <vfprintf+0x2f8>
    ece8:	c8 14       	cp	r12, r8
    ecea:	d9 04       	cpc	r13, r9
    ecec:	41 f4       	brne	.+16     	; 0xecfe <vfprintf+0x35c>
    ecee:	9a 81       	ldd	r25, Y+2	; 0x02
    ecf0:	96 33       	cpi	r25, 0x36	; 54
    ecf2:	20 f4       	brcc	.+8      	; 0xecfc <vfprintf+0x35a>
    ecf4:	95 33       	cpi	r25, 0x35	; 53
    ecf6:	19 f4       	brne	.+6      	; 0xecfe <vfprintf+0x35c>
    ecf8:	3c 85       	ldd	r19, Y+12	; 0x0c
    ecfa:	34 ff       	sbrs	r19, 4
    ecfc:	81 e3       	ldi	r24, 0x31	; 49
    ecfe:	b7 01       	movw	r22, r14
    ed00:	90 e0       	ldi	r25, 0x00	; 0
    ed02:	4e c0       	rjmp	.+156    	; 0xeda0 <vfprintf+0x3fe>
    ed04:	8a 81       	ldd	r24, Y+2	; 0x02
    ed06:	81 33       	cpi	r24, 0x31	; 49
    ed08:	19 f0       	breq	.+6      	; 0xed10 <vfprintf+0x36e>
    ed0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    ed0c:	9f 7e       	andi	r25, 0xEF	; 239
    ed0e:	9c 87       	std	Y+12, r25	; 0x0c
    ed10:	b7 01       	movw	r22, r14
    ed12:	90 e0       	ldi	r25, 0x00	; 0
    ed14:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ed18:	11 11       	cpse	r17, r1
    ed1a:	05 c0       	rjmp	.+10     	; 0xed26 <vfprintf+0x384>
    ed1c:	94 fc       	sbrc	r9, 4
    ed1e:	18 c0       	rjmp	.+48     	; 0xed50 <vfprintf+0x3ae>
    ed20:	85 e6       	ldi	r24, 0x65	; 101
    ed22:	90 e0       	ldi	r25, 0x00	; 0
    ed24:	17 c0       	rjmp	.+46     	; 0xed54 <vfprintf+0x3b2>
    ed26:	b7 01       	movw	r22, r14
    ed28:	8e e2       	ldi	r24, 0x2E	; 46
    ed2a:	90 e0       	ldi	r25, 0x00	; 0
    ed2c:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ed30:	1e 5f       	subi	r17, 0xFE	; 254
    ed32:	82 e0       	ldi	r24, 0x02	; 2
    ed34:	01 e0       	ldi	r16, 0x01	; 1
    ed36:	08 0f       	add	r16, r24
    ed38:	f3 01       	movw	r30, r6
    ed3a:	e8 0f       	add	r30, r24
    ed3c:	f1 1d       	adc	r31, r1
    ed3e:	80 81       	ld	r24, Z
    ed40:	b7 01       	movw	r22, r14
    ed42:	90 e0       	ldi	r25, 0x00	; 0
    ed44:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ed48:	80 2f       	mov	r24, r16
    ed4a:	01 13       	cpse	r16, r17
    ed4c:	f3 cf       	rjmp	.-26     	; 0xed34 <vfprintf+0x392>
    ed4e:	e6 cf       	rjmp	.-52     	; 0xed1c <vfprintf+0x37a>
    ed50:	85 e4       	ldi	r24, 0x45	; 69
    ed52:	90 e0       	ldi	r25, 0x00	; 0
    ed54:	b7 01       	movw	r22, r14
    ed56:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ed5a:	d7 fc       	sbrc	r13, 7
    ed5c:	06 c0       	rjmp	.+12     	; 0xed6a <vfprintf+0x3c8>
    ed5e:	c1 14       	cp	r12, r1
    ed60:	d1 04       	cpc	r13, r1
    ed62:	41 f4       	brne	.+16     	; 0xed74 <vfprintf+0x3d2>
    ed64:	ec 85       	ldd	r30, Y+12	; 0x0c
    ed66:	e4 ff       	sbrs	r30, 4
    ed68:	05 c0       	rjmp	.+10     	; 0xed74 <vfprintf+0x3d2>
    ed6a:	d1 94       	neg	r13
    ed6c:	c1 94       	neg	r12
    ed6e:	d1 08       	sbc	r13, r1
    ed70:	8d e2       	ldi	r24, 0x2D	; 45
    ed72:	01 c0       	rjmp	.+2      	; 0xed76 <vfprintf+0x3d4>
    ed74:	8b e2       	ldi	r24, 0x2B	; 43
    ed76:	b7 01       	movw	r22, r14
    ed78:	90 e0       	ldi	r25, 0x00	; 0
    ed7a:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ed7e:	80 e3       	ldi	r24, 0x30	; 48
    ed80:	2a e0       	ldi	r18, 0x0A	; 10
    ed82:	c2 16       	cp	r12, r18
    ed84:	d1 04       	cpc	r13, r1
    ed86:	2c f0       	brlt	.+10     	; 0xed92 <vfprintf+0x3f0>
    ed88:	8f 5f       	subi	r24, 0xFF	; 255
    ed8a:	fa e0       	ldi	r31, 0x0A	; 10
    ed8c:	cf 1a       	sub	r12, r31
    ed8e:	d1 08       	sbc	r13, r1
    ed90:	f7 cf       	rjmp	.-18     	; 0xed80 <vfprintf+0x3de>
    ed92:	b7 01       	movw	r22, r14
    ed94:	90 e0       	ldi	r25, 0x00	; 0
    ed96:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ed9a:	b7 01       	movw	r22, r14
    ed9c:	c6 01       	movw	r24, r12
    ed9e:	c0 96       	adiw	r24, 0x30	; 48
    eda0:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    eda4:	54 c1       	rjmp	.+680    	; 0xf04e <vfprintf+0x6ac>
    eda6:	83 36       	cpi	r24, 0x63	; 99
    eda8:	31 f0       	breq	.+12     	; 0xedb6 <vfprintf+0x414>
    edaa:	83 37       	cpi	r24, 0x73	; 115
    edac:	79 f0       	breq	.+30     	; 0xedcc <vfprintf+0x42a>
    edae:	83 35       	cpi	r24, 0x53	; 83
    edb0:	09 f0       	breq	.+2      	; 0xedb4 <vfprintf+0x412>
    edb2:	56 c0       	rjmp	.+172    	; 0xee60 <vfprintf+0x4be>
    edb4:	20 c0       	rjmp	.+64     	; 0xedf6 <vfprintf+0x454>
    edb6:	56 01       	movw	r10, r12
    edb8:	32 e0       	ldi	r19, 0x02	; 2
    edba:	a3 0e       	add	r10, r19
    edbc:	b1 1c       	adc	r11, r1
    edbe:	f6 01       	movw	r30, r12
    edc0:	80 81       	ld	r24, Z
    edc2:	89 83       	std	Y+1, r24	; 0x01
    edc4:	01 e0       	ldi	r16, 0x01	; 1
    edc6:	10 e0       	ldi	r17, 0x00	; 0
    edc8:	63 01       	movw	r12, r6
    edca:	12 c0       	rjmp	.+36     	; 0xedf0 <vfprintf+0x44e>
    edcc:	56 01       	movw	r10, r12
    edce:	f2 e0       	ldi	r31, 0x02	; 2
    edd0:	af 0e       	add	r10, r31
    edd2:	b1 1c       	adc	r11, r1
    edd4:	f6 01       	movw	r30, r12
    edd6:	c0 80       	ld	r12, Z
    edd8:	d1 80       	ldd	r13, Z+1	; 0x01
    edda:	96 fe       	sbrs	r9, 6
    eddc:	03 c0       	rjmp	.+6      	; 0xede4 <vfprintf+0x442>
    edde:	61 2f       	mov	r22, r17
    ede0:	70 e0       	ldi	r23, 0x00	; 0
    ede2:	02 c0       	rjmp	.+4      	; 0xede8 <vfprintf+0x446>
    ede4:	6f ef       	ldi	r22, 0xFF	; 255
    ede6:	7f ef       	ldi	r23, 0xFF	; 255
    ede8:	c6 01       	movw	r24, r12
    edea:	0e 94 df 7f 	call	0xffbe	; 0xffbe <strnlen>
    edee:	8c 01       	movw	r16, r24
    edf0:	f9 2d       	mov	r31, r9
    edf2:	ff 77       	andi	r31, 0x7F	; 127
    edf4:	14 c0       	rjmp	.+40     	; 0xee1e <vfprintf+0x47c>
    edf6:	56 01       	movw	r10, r12
    edf8:	22 e0       	ldi	r18, 0x02	; 2
    edfa:	a2 0e       	add	r10, r18
    edfc:	b1 1c       	adc	r11, r1
    edfe:	f6 01       	movw	r30, r12
    ee00:	c0 80       	ld	r12, Z
    ee02:	d1 80       	ldd	r13, Z+1	; 0x01
    ee04:	96 fe       	sbrs	r9, 6
    ee06:	03 c0       	rjmp	.+6      	; 0xee0e <vfprintf+0x46c>
    ee08:	61 2f       	mov	r22, r17
    ee0a:	70 e0       	ldi	r23, 0x00	; 0
    ee0c:	02 c0       	rjmp	.+4      	; 0xee12 <vfprintf+0x470>
    ee0e:	6f ef       	ldi	r22, 0xFF	; 255
    ee10:	7f ef       	ldi	r23, 0xFF	; 255
    ee12:	c6 01       	movw	r24, r12
    ee14:	0e 94 99 7f 	call	0xff32	; 0xff32 <strnlen_P>
    ee18:	8c 01       	movw	r16, r24
    ee1a:	f9 2d       	mov	r31, r9
    ee1c:	f0 68       	ori	r31, 0x80	; 128
    ee1e:	9f 2e       	mov	r9, r31
    ee20:	f3 fd       	sbrc	r31, 3
    ee22:	1a c0       	rjmp	.+52     	; 0xee58 <vfprintf+0x4b6>
    ee24:	85 2d       	mov	r24, r5
    ee26:	90 e0       	ldi	r25, 0x00	; 0
    ee28:	08 17       	cp	r16, r24
    ee2a:	19 07       	cpc	r17, r25
    ee2c:	a8 f4       	brcc	.+42     	; 0xee58 <vfprintf+0x4b6>
    ee2e:	b7 01       	movw	r22, r14
    ee30:	80 e2       	ldi	r24, 0x20	; 32
    ee32:	90 e0       	ldi	r25, 0x00	; 0
    ee34:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ee38:	5a 94       	dec	r5
    ee3a:	f4 cf       	rjmp	.-24     	; 0xee24 <vfprintf+0x482>
    ee3c:	f6 01       	movw	r30, r12
    ee3e:	97 fc       	sbrc	r9, 7
    ee40:	85 91       	lpm	r24, Z+
    ee42:	97 fe       	sbrs	r9, 7
    ee44:	81 91       	ld	r24, Z+
    ee46:	6f 01       	movw	r12, r30
    ee48:	b7 01       	movw	r22, r14
    ee4a:	90 e0       	ldi	r25, 0x00	; 0
    ee4c:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    ee50:	51 10       	cpse	r5, r1
    ee52:	5a 94       	dec	r5
    ee54:	01 50       	subi	r16, 0x01	; 1
    ee56:	11 09       	sbc	r17, r1
    ee58:	01 15       	cp	r16, r1
    ee5a:	11 05       	cpc	r17, r1
    ee5c:	79 f7       	brne	.-34     	; 0xee3c <vfprintf+0x49a>
    ee5e:	f7 c0       	rjmp	.+494    	; 0xf04e <vfprintf+0x6ac>
    ee60:	84 36       	cpi	r24, 0x64	; 100
    ee62:	11 f0       	breq	.+4      	; 0xee68 <vfprintf+0x4c6>
    ee64:	89 36       	cpi	r24, 0x69	; 105
    ee66:	61 f5       	brne	.+88     	; 0xeec0 <vfprintf+0x51e>
    ee68:	56 01       	movw	r10, r12
    ee6a:	97 fe       	sbrs	r9, 7
    ee6c:	09 c0       	rjmp	.+18     	; 0xee80 <vfprintf+0x4de>
    ee6e:	24 e0       	ldi	r18, 0x04	; 4
    ee70:	a2 0e       	add	r10, r18
    ee72:	b1 1c       	adc	r11, r1
    ee74:	f6 01       	movw	r30, r12
    ee76:	60 81       	ld	r22, Z
    ee78:	71 81       	ldd	r23, Z+1	; 0x01
    ee7a:	82 81       	ldd	r24, Z+2	; 0x02
    ee7c:	93 81       	ldd	r25, Z+3	; 0x03
    ee7e:	0a c0       	rjmp	.+20     	; 0xee94 <vfprintf+0x4f2>
    ee80:	f2 e0       	ldi	r31, 0x02	; 2
    ee82:	af 0e       	add	r10, r31
    ee84:	b1 1c       	adc	r11, r1
    ee86:	f6 01       	movw	r30, r12
    ee88:	60 81       	ld	r22, Z
    ee8a:	71 81       	ldd	r23, Z+1	; 0x01
    ee8c:	07 2e       	mov	r0, r23
    ee8e:	00 0c       	add	r0, r0
    ee90:	88 0b       	sbc	r24, r24
    ee92:	99 0b       	sbc	r25, r25
    ee94:	f9 2d       	mov	r31, r9
    ee96:	ff 76       	andi	r31, 0x6F	; 111
    ee98:	9f 2e       	mov	r9, r31
    ee9a:	97 ff       	sbrs	r25, 7
    ee9c:	09 c0       	rjmp	.+18     	; 0xeeb0 <vfprintf+0x50e>
    ee9e:	90 95       	com	r25
    eea0:	80 95       	com	r24
    eea2:	70 95       	com	r23
    eea4:	61 95       	neg	r22
    eea6:	7f 4f       	sbci	r23, 0xFF	; 255
    eea8:	8f 4f       	sbci	r24, 0xFF	; 255
    eeaa:	9f 4f       	sbci	r25, 0xFF	; 255
    eeac:	f0 68       	ori	r31, 0x80	; 128
    eeae:	9f 2e       	mov	r9, r31
    eeb0:	2a e0       	ldi	r18, 0x0A	; 10
    eeb2:	30 e0       	ldi	r19, 0x00	; 0
    eeb4:	a3 01       	movw	r20, r6
    eeb6:	0e 94 ed 80 	call	0x101da	; 0x101da <__ultoa_invert>
    eeba:	c8 2e       	mov	r12, r24
    eebc:	c6 18       	sub	r12, r6
    eebe:	3f c0       	rjmp	.+126    	; 0xef3e <vfprintf+0x59c>
    eec0:	09 2d       	mov	r16, r9
    eec2:	85 37       	cpi	r24, 0x75	; 117
    eec4:	21 f4       	brne	.+8      	; 0xeece <vfprintf+0x52c>
    eec6:	0f 7e       	andi	r16, 0xEF	; 239
    eec8:	2a e0       	ldi	r18, 0x0A	; 10
    eeca:	30 e0       	ldi	r19, 0x00	; 0
    eecc:	1d c0       	rjmp	.+58     	; 0xef08 <vfprintf+0x566>
    eece:	09 7f       	andi	r16, 0xF9	; 249
    eed0:	8f 36       	cpi	r24, 0x6F	; 111
    eed2:	91 f0       	breq	.+36     	; 0xeef8 <vfprintf+0x556>
    eed4:	18 f4       	brcc	.+6      	; 0xeedc <vfprintf+0x53a>
    eed6:	88 35       	cpi	r24, 0x58	; 88
    eed8:	59 f0       	breq	.+22     	; 0xeef0 <vfprintf+0x54e>
    eeda:	c3 c0       	rjmp	.+390    	; 0xf062 <vfprintf+0x6c0>
    eedc:	80 37       	cpi	r24, 0x70	; 112
    eede:	19 f0       	breq	.+6      	; 0xeee6 <vfprintf+0x544>
    eee0:	88 37       	cpi	r24, 0x78	; 120
    eee2:	11 f0       	breq	.+4      	; 0xeee8 <vfprintf+0x546>
    eee4:	be c0       	rjmp	.+380    	; 0xf062 <vfprintf+0x6c0>
    eee6:	00 61       	ori	r16, 0x10	; 16
    eee8:	04 ff       	sbrs	r16, 4
    eeea:	09 c0       	rjmp	.+18     	; 0xeefe <vfprintf+0x55c>
    eeec:	04 60       	ori	r16, 0x04	; 4
    eeee:	07 c0       	rjmp	.+14     	; 0xeefe <vfprintf+0x55c>
    eef0:	94 fe       	sbrs	r9, 4
    eef2:	08 c0       	rjmp	.+16     	; 0xef04 <vfprintf+0x562>
    eef4:	06 60       	ori	r16, 0x06	; 6
    eef6:	06 c0       	rjmp	.+12     	; 0xef04 <vfprintf+0x562>
    eef8:	28 e0       	ldi	r18, 0x08	; 8
    eefa:	30 e0       	ldi	r19, 0x00	; 0
    eefc:	05 c0       	rjmp	.+10     	; 0xef08 <vfprintf+0x566>
    eefe:	20 e1       	ldi	r18, 0x10	; 16
    ef00:	30 e0       	ldi	r19, 0x00	; 0
    ef02:	02 c0       	rjmp	.+4      	; 0xef08 <vfprintf+0x566>
    ef04:	20 e1       	ldi	r18, 0x10	; 16
    ef06:	32 e0       	ldi	r19, 0x02	; 2
    ef08:	56 01       	movw	r10, r12
    ef0a:	07 ff       	sbrs	r16, 7
    ef0c:	09 c0       	rjmp	.+18     	; 0xef20 <vfprintf+0x57e>
    ef0e:	84 e0       	ldi	r24, 0x04	; 4
    ef10:	a8 0e       	add	r10, r24
    ef12:	b1 1c       	adc	r11, r1
    ef14:	f6 01       	movw	r30, r12
    ef16:	60 81       	ld	r22, Z
    ef18:	71 81       	ldd	r23, Z+1	; 0x01
    ef1a:	82 81       	ldd	r24, Z+2	; 0x02
    ef1c:	93 81       	ldd	r25, Z+3	; 0x03
    ef1e:	08 c0       	rjmp	.+16     	; 0xef30 <vfprintf+0x58e>
    ef20:	f2 e0       	ldi	r31, 0x02	; 2
    ef22:	af 0e       	add	r10, r31
    ef24:	b1 1c       	adc	r11, r1
    ef26:	f6 01       	movw	r30, r12
    ef28:	60 81       	ld	r22, Z
    ef2a:	71 81       	ldd	r23, Z+1	; 0x01
    ef2c:	80 e0       	ldi	r24, 0x00	; 0
    ef2e:	90 e0       	ldi	r25, 0x00	; 0
    ef30:	a3 01       	movw	r20, r6
    ef32:	0e 94 ed 80 	call	0x101da	; 0x101da <__ultoa_invert>
    ef36:	c8 2e       	mov	r12, r24
    ef38:	c6 18       	sub	r12, r6
    ef3a:	0f 77       	andi	r16, 0x7F	; 127
    ef3c:	90 2e       	mov	r9, r16
    ef3e:	96 fe       	sbrs	r9, 6
    ef40:	0b c0       	rjmp	.+22     	; 0xef58 <vfprintf+0x5b6>
    ef42:	09 2d       	mov	r16, r9
    ef44:	0e 7f       	andi	r16, 0xFE	; 254
    ef46:	c1 16       	cp	r12, r17
    ef48:	50 f4       	brcc	.+20     	; 0xef5e <vfprintf+0x5bc>
    ef4a:	94 fe       	sbrs	r9, 4
    ef4c:	0a c0       	rjmp	.+20     	; 0xef62 <vfprintf+0x5c0>
    ef4e:	92 fc       	sbrc	r9, 2
    ef50:	08 c0       	rjmp	.+16     	; 0xef62 <vfprintf+0x5c0>
    ef52:	09 2d       	mov	r16, r9
    ef54:	0e 7e       	andi	r16, 0xEE	; 238
    ef56:	05 c0       	rjmp	.+10     	; 0xef62 <vfprintf+0x5c0>
    ef58:	dc 2c       	mov	r13, r12
    ef5a:	09 2d       	mov	r16, r9
    ef5c:	03 c0       	rjmp	.+6      	; 0xef64 <vfprintf+0x5c2>
    ef5e:	dc 2c       	mov	r13, r12
    ef60:	01 c0       	rjmp	.+2      	; 0xef64 <vfprintf+0x5c2>
    ef62:	d1 2e       	mov	r13, r17
    ef64:	04 ff       	sbrs	r16, 4
    ef66:	0d c0       	rjmp	.+26     	; 0xef82 <vfprintf+0x5e0>
    ef68:	fe 01       	movw	r30, r28
    ef6a:	ec 0d       	add	r30, r12
    ef6c:	f1 1d       	adc	r31, r1
    ef6e:	80 81       	ld	r24, Z
    ef70:	80 33       	cpi	r24, 0x30	; 48
    ef72:	11 f4       	brne	.+4      	; 0xef78 <vfprintf+0x5d6>
    ef74:	09 7e       	andi	r16, 0xE9	; 233
    ef76:	09 c0       	rjmp	.+18     	; 0xef8a <vfprintf+0x5e8>
    ef78:	02 ff       	sbrs	r16, 2
    ef7a:	06 c0       	rjmp	.+12     	; 0xef88 <vfprintf+0x5e6>
    ef7c:	d3 94       	inc	r13
    ef7e:	d3 94       	inc	r13
    ef80:	04 c0       	rjmp	.+8      	; 0xef8a <vfprintf+0x5e8>
    ef82:	80 2f       	mov	r24, r16
    ef84:	86 78       	andi	r24, 0x86	; 134
    ef86:	09 f0       	breq	.+2      	; 0xef8a <vfprintf+0x5e8>
    ef88:	d3 94       	inc	r13
    ef8a:	03 fd       	sbrc	r16, 3
    ef8c:	11 c0       	rjmp	.+34     	; 0xefb0 <vfprintf+0x60e>
    ef8e:	00 ff       	sbrs	r16, 0
    ef90:	06 c0       	rjmp	.+12     	; 0xef9e <vfprintf+0x5fc>
    ef92:	1c 2d       	mov	r17, r12
    ef94:	d5 14       	cp	r13, r5
    ef96:	80 f4       	brcc	.+32     	; 0xefb8 <vfprintf+0x616>
    ef98:	15 0d       	add	r17, r5
    ef9a:	1d 19       	sub	r17, r13
    ef9c:	0d c0       	rjmp	.+26     	; 0xefb8 <vfprintf+0x616>
    ef9e:	d5 14       	cp	r13, r5
    efa0:	58 f4       	brcc	.+22     	; 0xefb8 <vfprintf+0x616>
    efa2:	b7 01       	movw	r22, r14
    efa4:	80 e2       	ldi	r24, 0x20	; 32
    efa6:	90 e0       	ldi	r25, 0x00	; 0
    efa8:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    efac:	d3 94       	inc	r13
    efae:	f7 cf       	rjmp	.-18     	; 0xef9e <vfprintf+0x5fc>
    efb0:	d5 14       	cp	r13, r5
    efb2:	10 f4       	brcc	.+4      	; 0xefb8 <vfprintf+0x616>
    efb4:	5d 18       	sub	r5, r13
    efb6:	01 c0       	rjmp	.+2      	; 0xefba <vfprintf+0x618>
    efb8:	51 2c       	mov	r5, r1
    efba:	04 ff       	sbrs	r16, 4
    efbc:	10 c0       	rjmp	.+32     	; 0xefde <vfprintf+0x63c>
    efbe:	b7 01       	movw	r22, r14
    efc0:	80 e3       	ldi	r24, 0x30	; 48
    efc2:	90 e0       	ldi	r25, 0x00	; 0
    efc4:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    efc8:	02 ff       	sbrs	r16, 2
    efca:	17 c0       	rjmp	.+46     	; 0xeffa <vfprintf+0x658>
    efcc:	01 fd       	sbrc	r16, 1
    efce:	03 c0       	rjmp	.+6      	; 0xefd6 <vfprintf+0x634>
    efd0:	88 e7       	ldi	r24, 0x78	; 120
    efd2:	90 e0       	ldi	r25, 0x00	; 0
    efd4:	02 c0       	rjmp	.+4      	; 0xefda <vfprintf+0x638>
    efd6:	88 e5       	ldi	r24, 0x58	; 88
    efd8:	90 e0       	ldi	r25, 0x00	; 0
    efda:	b7 01       	movw	r22, r14
    efdc:	0c c0       	rjmp	.+24     	; 0xeff6 <vfprintf+0x654>
    efde:	80 2f       	mov	r24, r16
    efe0:	86 78       	andi	r24, 0x86	; 134
    efe2:	59 f0       	breq	.+22     	; 0xeffa <vfprintf+0x658>
    efe4:	01 ff       	sbrs	r16, 1
    efe6:	02 c0       	rjmp	.+4      	; 0xefec <vfprintf+0x64a>
    efe8:	8b e2       	ldi	r24, 0x2B	; 43
    efea:	01 c0       	rjmp	.+2      	; 0xefee <vfprintf+0x64c>
    efec:	80 e2       	ldi	r24, 0x20	; 32
    efee:	07 fd       	sbrc	r16, 7
    eff0:	8d e2       	ldi	r24, 0x2D	; 45
    eff2:	b7 01       	movw	r22, r14
    eff4:	90 e0       	ldi	r25, 0x00	; 0
    eff6:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    effa:	c1 16       	cp	r12, r17
    effc:	38 f4       	brcc	.+14     	; 0xf00c <vfprintf+0x66a>
    effe:	b7 01       	movw	r22, r14
    f000:	80 e3       	ldi	r24, 0x30	; 48
    f002:	90 e0       	ldi	r25, 0x00	; 0
    f004:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    f008:	11 50       	subi	r17, 0x01	; 1
    f00a:	f7 cf       	rjmp	.-18     	; 0xeffa <vfprintf+0x658>
    f00c:	ca 94       	dec	r12
    f00e:	f3 01       	movw	r30, r6
    f010:	ec 0d       	add	r30, r12
    f012:	f1 1d       	adc	r31, r1
    f014:	80 81       	ld	r24, Z
    f016:	b7 01       	movw	r22, r14
    f018:	90 e0       	ldi	r25, 0x00	; 0
    f01a:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    f01e:	c1 10       	cpse	r12, r1
    f020:	f5 cf       	rjmp	.-22     	; 0xf00c <vfprintf+0x66a>
    f022:	15 c0       	rjmp	.+42     	; 0xf04e <vfprintf+0x6ac>
    f024:	f4 e0       	ldi	r31, 0x04	; 4
    f026:	f5 15       	cp	r31, r5
    f028:	60 f5       	brcc	.+88     	; 0xf082 <vfprintf+0x6e0>
    f02a:	84 e0       	ldi	r24, 0x04	; 4
    f02c:	58 1a       	sub	r5, r24
    f02e:	93 fe       	sbrs	r9, 3
    f030:	1f c0       	rjmp	.+62     	; 0xf070 <vfprintf+0x6ce>
    f032:	01 11       	cpse	r16, r1
    f034:	27 c0       	rjmp	.+78     	; 0xf084 <vfprintf+0x6e2>
    f036:	2c 85       	ldd	r18, Y+12	; 0x0c
    f038:	23 ff       	sbrs	r18, 3
    f03a:	2a c0       	rjmp	.+84     	; 0xf090 <vfprintf+0x6ee>
    f03c:	08 eb       	ldi	r16, 0xB8	; 184
    f03e:	12 e0       	ldi	r17, 0x02	; 2
    f040:	39 2d       	mov	r19, r9
    f042:	30 71       	andi	r19, 0x10	; 16
    f044:	93 2e       	mov	r9, r19
    f046:	f8 01       	movw	r30, r16
    f048:	84 91       	lpm	r24, Z
    f04a:	81 11       	cpse	r24, r1
    f04c:	24 c0       	rjmp	.+72     	; 0xf096 <vfprintf+0x6f4>
    f04e:	55 20       	and	r5, r5
    f050:	09 f4       	brne	.+2      	; 0xf054 <vfprintf+0x6b2>
    f052:	e4 cc       	rjmp	.-1592   	; 0xea1c <vfprintf+0x7a>
    f054:	b7 01       	movw	r22, r14
    f056:	80 e2       	ldi	r24, 0x20	; 32
    f058:	90 e0       	ldi	r25, 0x00	; 0
    f05a:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    f05e:	5a 94       	dec	r5
    f060:	f6 cf       	rjmp	.-20     	; 0xf04e <vfprintf+0x6ac>
    f062:	f7 01       	movw	r30, r14
    f064:	86 81       	ldd	r24, Z+6	; 0x06
    f066:	97 81       	ldd	r25, Z+7	; 0x07
    f068:	26 c0       	rjmp	.+76     	; 0xf0b6 <vfprintf+0x714>
    f06a:	8f ef       	ldi	r24, 0xFF	; 255
    f06c:	9f ef       	ldi	r25, 0xFF	; 255
    f06e:	23 c0       	rjmp	.+70     	; 0xf0b6 <vfprintf+0x714>
    f070:	b7 01       	movw	r22, r14
    f072:	80 e2       	ldi	r24, 0x20	; 32
    f074:	90 e0       	ldi	r25, 0x00	; 0
    f076:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    f07a:	5a 94       	dec	r5
    f07c:	51 10       	cpse	r5, r1
    f07e:	f8 cf       	rjmp	.-16     	; 0xf070 <vfprintf+0x6ce>
    f080:	d8 cf       	rjmp	.-80     	; 0xf032 <vfprintf+0x690>
    f082:	51 2c       	mov	r5, r1
    f084:	b7 01       	movw	r22, r14
    f086:	80 2f       	mov	r24, r16
    f088:	90 e0       	ldi	r25, 0x00	; 0
    f08a:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    f08e:	d3 cf       	rjmp	.-90     	; 0xf036 <vfprintf+0x694>
    f090:	0c eb       	ldi	r16, 0xBC	; 188
    f092:	12 e0       	ldi	r17, 0x02	; 2
    f094:	d5 cf       	rjmp	.-86     	; 0xf040 <vfprintf+0x69e>
    f096:	91 10       	cpse	r9, r1
    f098:	80 52       	subi	r24, 0x20	; 32
    f09a:	b7 01       	movw	r22, r14
    f09c:	90 e0       	ldi	r25, 0x00	; 0
    f09e:	0e 94 51 80 	call	0x100a2	; 0x100a2 <fputc>
    f0a2:	0f 5f       	subi	r16, 0xFF	; 255
    f0a4:	1f 4f       	sbci	r17, 0xFF	; 255
    f0a6:	cf cf       	rjmp	.-98     	; 0xf046 <vfprintf+0x6a4>
    f0a8:	23 e0       	ldi	r18, 0x03	; 3
    f0aa:	25 15       	cp	r18, r5
    f0ac:	10 f4       	brcc	.+4      	; 0xf0b2 <vfprintf+0x710>
    f0ae:	83 e0       	ldi	r24, 0x03	; 3
    f0b0:	bd cf       	rjmp	.-134    	; 0xf02c <vfprintf+0x68a>
    f0b2:	51 2c       	mov	r5, r1
    f0b4:	c0 cf       	rjmp	.-128    	; 0xf036 <vfprintf+0x694>
    f0b6:	60 96       	adiw	r28, 0x10	; 16
    f0b8:	cd bf       	out	0x3d, r28	; 61
    f0ba:	de bf       	out	0x3e, r29	; 62
    f0bc:	df 91       	pop	r29
    f0be:	cf 91       	pop	r28
    f0c0:	1f 91       	pop	r17
    f0c2:	0f 91       	pop	r16
    f0c4:	ff 90       	pop	r15
    f0c6:	ef 90       	pop	r14
    f0c8:	df 90       	pop	r13
    f0ca:	cf 90       	pop	r12
    f0cc:	bf 90       	pop	r11
    f0ce:	af 90       	pop	r10
    f0d0:	9f 90       	pop	r9
    f0d2:	8f 90       	pop	r8
    f0d4:	7f 90       	pop	r7
    f0d6:	6f 90       	pop	r6
    f0d8:	5f 90       	pop	r5
    f0da:	4f 90       	pop	r4
    f0dc:	3f 90       	pop	r3
    f0de:	2f 90       	pop	r2
    f0e0:	08 95       	ret

0000f0e2 <__subsf3>:
    f0e2:	50 58       	subi	r21, 0x80	; 128

0000f0e4 <__addsf3>:
    f0e4:	bb 27       	eor	r27, r27
    f0e6:	aa 27       	eor	r26, r26
    f0e8:	0e d0       	rcall	.+28     	; 0xf106 <__addsf3x>
    f0ea:	a0 c1       	rjmp	.+832    	; 0xf42c <__fp_round>
    f0ec:	69 d1       	rcall	.+722    	; 0xf3c0 <__fp_pscA>
    f0ee:	30 f0       	brcs	.+12     	; 0xf0fc <__addsf3+0x18>
    f0f0:	6e d1       	rcall	.+732    	; 0xf3ce <__fp_pscB>
    f0f2:	20 f0       	brcs	.+8      	; 0xf0fc <__addsf3+0x18>
    f0f4:	31 f4       	brne	.+12     	; 0xf102 <__addsf3+0x1e>
    f0f6:	9f 3f       	cpi	r25, 0xFF	; 255
    f0f8:	11 f4       	brne	.+4      	; 0xf0fe <__addsf3+0x1a>
    f0fa:	1e f4       	brtc	.+6      	; 0xf102 <__addsf3+0x1e>
    f0fc:	5e c1       	rjmp	.+700    	; 0xf3ba <__fp_nan>
    f0fe:	0e f4       	brtc	.+2      	; 0xf102 <__addsf3+0x1e>
    f100:	e0 95       	com	r30
    f102:	e7 fb       	bst	r30, 7
    f104:	54 c1       	rjmp	.+680    	; 0xf3ae <__fp_inf>

0000f106 <__addsf3x>:
    f106:	e9 2f       	mov	r30, r25
    f108:	b3 d1       	rcall	.+870    	; 0xf470 <__fp_split3>
    f10a:	80 f3       	brcs	.-32     	; 0xf0ec <__addsf3+0x8>
    f10c:	ba 17       	cp	r27, r26
    f10e:	62 07       	cpc	r22, r18
    f110:	73 07       	cpc	r23, r19
    f112:	84 07       	cpc	r24, r20
    f114:	95 07       	cpc	r25, r21
    f116:	18 f0       	brcs	.+6      	; 0xf11e <__addsf3x+0x18>
    f118:	71 f4       	brne	.+28     	; 0xf136 <__addsf3x+0x30>
    f11a:	9e f5       	brtc	.+102    	; 0xf182 <__addsf3x+0x7c>
    f11c:	cb c1       	rjmp	.+918    	; 0xf4b4 <__fp_zero>
    f11e:	0e f4       	brtc	.+2      	; 0xf122 <__addsf3x+0x1c>
    f120:	e0 95       	com	r30
    f122:	0b 2e       	mov	r0, r27
    f124:	ba 2f       	mov	r27, r26
    f126:	a0 2d       	mov	r26, r0
    f128:	0b 01       	movw	r0, r22
    f12a:	b9 01       	movw	r22, r18
    f12c:	90 01       	movw	r18, r0
    f12e:	0c 01       	movw	r0, r24
    f130:	ca 01       	movw	r24, r20
    f132:	a0 01       	movw	r20, r0
    f134:	11 24       	eor	r1, r1
    f136:	ff 27       	eor	r31, r31
    f138:	59 1b       	sub	r21, r25
    f13a:	99 f0       	breq	.+38     	; 0xf162 <__addsf3x+0x5c>
    f13c:	59 3f       	cpi	r21, 0xF9	; 249
    f13e:	50 f4       	brcc	.+20     	; 0xf154 <__addsf3x+0x4e>
    f140:	50 3e       	cpi	r21, 0xE0	; 224
    f142:	68 f1       	brcs	.+90     	; 0xf19e <__addsf3x+0x98>
    f144:	1a 16       	cp	r1, r26
    f146:	f0 40       	sbci	r31, 0x00	; 0
    f148:	a2 2f       	mov	r26, r18
    f14a:	23 2f       	mov	r18, r19
    f14c:	34 2f       	mov	r19, r20
    f14e:	44 27       	eor	r20, r20
    f150:	58 5f       	subi	r21, 0xF8	; 248
    f152:	f3 cf       	rjmp	.-26     	; 0xf13a <__addsf3x+0x34>
    f154:	46 95       	lsr	r20
    f156:	37 95       	ror	r19
    f158:	27 95       	ror	r18
    f15a:	a7 95       	ror	r26
    f15c:	f0 40       	sbci	r31, 0x00	; 0
    f15e:	53 95       	inc	r21
    f160:	c9 f7       	brne	.-14     	; 0xf154 <__addsf3x+0x4e>
    f162:	7e f4       	brtc	.+30     	; 0xf182 <__addsf3x+0x7c>
    f164:	1f 16       	cp	r1, r31
    f166:	ba 0b       	sbc	r27, r26
    f168:	62 0b       	sbc	r22, r18
    f16a:	73 0b       	sbc	r23, r19
    f16c:	84 0b       	sbc	r24, r20
    f16e:	ba f0       	brmi	.+46     	; 0xf19e <__addsf3x+0x98>
    f170:	91 50       	subi	r25, 0x01	; 1
    f172:	a1 f0       	breq	.+40     	; 0xf19c <__addsf3x+0x96>
    f174:	ff 0f       	add	r31, r31
    f176:	bb 1f       	adc	r27, r27
    f178:	66 1f       	adc	r22, r22
    f17a:	77 1f       	adc	r23, r23
    f17c:	88 1f       	adc	r24, r24
    f17e:	c2 f7       	brpl	.-16     	; 0xf170 <__addsf3x+0x6a>
    f180:	0e c0       	rjmp	.+28     	; 0xf19e <__addsf3x+0x98>
    f182:	ba 0f       	add	r27, r26
    f184:	62 1f       	adc	r22, r18
    f186:	73 1f       	adc	r23, r19
    f188:	84 1f       	adc	r24, r20
    f18a:	48 f4       	brcc	.+18     	; 0xf19e <__addsf3x+0x98>
    f18c:	87 95       	ror	r24
    f18e:	77 95       	ror	r23
    f190:	67 95       	ror	r22
    f192:	b7 95       	ror	r27
    f194:	f7 95       	ror	r31
    f196:	9e 3f       	cpi	r25, 0xFE	; 254
    f198:	08 f0       	brcs	.+2      	; 0xf19c <__addsf3x+0x96>
    f19a:	b3 cf       	rjmp	.-154    	; 0xf102 <__addsf3+0x1e>
    f19c:	93 95       	inc	r25
    f19e:	88 0f       	add	r24, r24
    f1a0:	08 f0       	brcs	.+2      	; 0xf1a4 <__addsf3x+0x9e>
    f1a2:	99 27       	eor	r25, r25
    f1a4:	ee 0f       	add	r30, r30
    f1a6:	97 95       	ror	r25
    f1a8:	87 95       	ror	r24
    f1aa:	08 95       	ret

0000f1ac <__cmpsf2>:
    f1ac:	dc d0       	rcall	.+440    	; 0xf366 <__fp_cmp>
    f1ae:	08 f4       	brcc	.+2      	; 0xf1b2 <__cmpsf2+0x6>
    f1b0:	81 e0       	ldi	r24, 0x01	; 1
    f1b2:	08 95       	ret

0000f1b4 <cos>:
    f1b4:	14 d1       	rcall	.+552    	; 0xf3de <__fp_rempio2>
    f1b6:	e3 95       	inc	r30
    f1b8:	4a c1       	rjmp	.+660    	; 0xf44e <__fp_sinus>

0000f1ba <__divsf3>:
    f1ba:	0c d0       	rcall	.+24     	; 0xf1d4 <__divsf3x>
    f1bc:	37 c1       	rjmp	.+622    	; 0xf42c <__fp_round>
    f1be:	07 d1       	rcall	.+526    	; 0xf3ce <__fp_pscB>
    f1c0:	40 f0       	brcs	.+16     	; 0xf1d2 <__divsf3+0x18>
    f1c2:	fe d0       	rcall	.+508    	; 0xf3c0 <__fp_pscA>
    f1c4:	30 f0       	brcs	.+12     	; 0xf1d2 <__divsf3+0x18>
    f1c6:	21 f4       	brne	.+8      	; 0xf1d0 <__divsf3+0x16>
    f1c8:	5f 3f       	cpi	r21, 0xFF	; 255
    f1ca:	19 f0       	breq	.+6      	; 0xf1d2 <__divsf3+0x18>
    f1cc:	f0 c0       	rjmp	.+480    	; 0xf3ae <__fp_inf>
    f1ce:	51 11       	cpse	r21, r1
    f1d0:	72 c1       	rjmp	.+740    	; 0xf4b6 <__fp_szero>
    f1d2:	f3 c0       	rjmp	.+486    	; 0xf3ba <__fp_nan>

0000f1d4 <__divsf3x>:
    f1d4:	4d d1       	rcall	.+666    	; 0xf470 <__fp_split3>
    f1d6:	98 f3       	brcs	.-26     	; 0xf1be <__divsf3+0x4>

0000f1d8 <__divsf3_pse>:
    f1d8:	99 23       	and	r25, r25
    f1da:	c9 f3       	breq	.-14     	; 0xf1ce <__divsf3+0x14>
    f1dc:	55 23       	and	r21, r21
    f1de:	b1 f3       	breq	.-20     	; 0xf1cc <__divsf3+0x12>
    f1e0:	95 1b       	sub	r25, r21
    f1e2:	55 0b       	sbc	r21, r21
    f1e4:	bb 27       	eor	r27, r27
    f1e6:	aa 27       	eor	r26, r26
    f1e8:	62 17       	cp	r22, r18
    f1ea:	73 07       	cpc	r23, r19
    f1ec:	84 07       	cpc	r24, r20
    f1ee:	38 f0       	brcs	.+14     	; 0xf1fe <__divsf3_pse+0x26>
    f1f0:	9f 5f       	subi	r25, 0xFF	; 255
    f1f2:	5f 4f       	sbci	r21, 0xFF	; 255
    f1f4:	22 0f       	add	r18, r18
    f1f6:	33 1f       	adc	r19, r19
    f1f8:	44 1f       	adc	r20, r20
    f1fa:	aa 1f       	adc	r26, r26
    f1fc:	a9 f3       	breq	.-22     	; 0xf1e8 <__divsf3_pse+0x10>
    f1fe:	33 d0       	rcall	.+102    	; 0xf266 <__divsf3_pse+0x8e>
    f200:	0e 2e       	mov	r0, r30
    f202:	3a f0       	brmi	.+14     	; 0xf212 <__divsf3_pse+0x3a>
    f204:	e0 e8       	ldi	r30, 0x80	; 128
    f206:	30 d0       	rcall	.+96     	; 0xf268 <__divsf3_pse+0x90>
    f208:	91 50       	subi	r25, 0x01	; 1
    f20a:	50 40       	sbci	r21, 0x00	; 0
    f20c:	e6 95       	lsr	r30
    f20e:	00 1c       	adc	r0, r0
    f210:	ca f7       	brpl	.-14     	; 0xf204 <__divsf3_pse+0x2c>
    f212:	29 d0       	rcall	.+82     	; 0xf266 <__divsf3_pse+0x8e>
    f214:	fe 2f       	mov	r31, r30
    f216:	27 d0       	rcall	.+78     	; 0xf266 <__divsf3_pse+0x8e>
    f218:	66 0f       	add	r22, r22
    f21a:	77 1f       	adc	r23, r23
    f21c:	88 1f       	adc	r24, r24
    f21e:	bb 1f       	adc	r27, r27
    f220:	26 17       	cp	r18, r22
    f222:	37 07       	cpc	r19, r23
    f224:	48 07       	cpc	r20, r24
    f226:	ab 07       	cpc	r26, r27
    f228:	b0 e8       	ldi	r27, 0x80	; 128
    f22a:	09 f0       	breq	.+2      	; 0xf22e <__divsf3_pse+0x56>
    f22c:	bb 0b       	sbc	r27, r27
    f22e:	80 2d       	mov	r24, r0
    f230:	bf 01       	movw	r22, r30
    f232:	ff 27       	eor	r31, r31
    f234:	93 58       	subi	r25, 0x83	; 131
    f236:	5f 4f       	sbci	r21, 0xFF	; 255
    f238:	2a f0       	brmi	.+10     	; 0xf244 <__divsf3_pse+0x6c>
    f23a:	9e 3f       	cpi	r25, 0xFE	; 254
    f23c:	51 05       	cpc	r21, r1
    f23e:	68 f0       	brcs	.+26     	; 0xf25a <__divsf3_pse+0x82>
    f240:	b6 c0       	rjmp	.+364    	; 0xf3ae <__fp_inf>
    f242:	39 c1       	rjmp	.+626    	; 0xf4b6 <__fp_szero>
    f244:	5f 3f       	cpi	r21, 0xFF	; 255
    f246:	ec f3       	brlt	.-6      	; 0xf242 <__divsf3_pse+0x6a>
    f248:	98 3e       	cpi	r25, 0xE8	; 232
    f24a:	dc f3       	brlt	.-10     	; 0xf242 <__divsf3_pse+0x6a>
    f24c:	86 95       	lsr	r24
    f24e:	77 95       	ror	r23
    f250:	67 95       	ror	r22
    f252:	b7 95       	ror	r27
    f254:	f7 95       	ror	r31
    f256:	9f 5f       	subi	r25, 0xFF	; 255
    f258:	c9 f7       	brne	.-14     	; 0xf24c <__divsf3_pse+0x74>
    f25a:	88 0f       	add	r24, r24
    f25c:	91 1d       	adc	r25, r1
    f25e:	96 95       	lsr	r25
    f260:	87 95       	ror	r24
    f262:	97 f9       	bld	r25, 7
    f264:	08 95       	ret
    f266:	e1 e0       	ldi	r30, 0x01	; 1
    f268:	66 0f       	add	r22, r22
    f26a:	77 1f       	adc	r23, r23
    f26c:	88 1f       	adc	r24, r24
    f26e:	bb 1f       	adc	r27, r27
    f270:	62 17       	cp	r22, r18
    f272:	73 07       	cpc	r23, r19
    f274:	84 07       	cpc	r24, r20
    f276:	ba 07       	cpc	r27, r26
    f278:	20 f0       	brcs	.+8      	; 0xf282 <__divsf3_pse+0xaa>
    f27a:	62 1b       	sub	r22, r18
    f27c:	73 0b       	sbc	r23, r19
    f27e:	84 0b       	sbc	r24, r20
    f280:	ba 0b       	sbc	r27, r26
    f282:	ee 1f       	adc	r30, r30
    f284:	88 f7       	brcc	.-30     	; 0xf268 <__divsf3_pse+0x90>
    f286:	e0 95       	com	r30
    f288:	08 95       	ret

0000f28a <__fixsfsi>:
    f28a:	04 d0       	rcall	.+8      	; 0xf294 <__fixunssfsi>
    f28c:	68 94       	set
    f28e:	b1 11       	cpse	r27, r1
    f290:	12 c1       	rjmp	.+548    	; 0xf4b6 <__fp_szero>
    f292:	08 95       	ret

0000f294 <__fixunssfsi>:
    f294:	f5 d0       	rcall	.+490    	; 0xf480 <__fp_splitA>
    f296:	88 f0       	brcs	.+34     	; 0xf2ba <__fixunssfsi+0x26>
    f298:	9f 57       	subi	r25, 0x7F	; 127
    f29a:	90 f0       	brcs	.+36     	; 0xf2c0 <__fixunssfsi+0x2c>
    f29c:	b9 2f       	mov	r27, r25
    f29e:	99 27       	eor	r25, r25
    f2a0:	b7 51       	subi	r27, 0x17	; 23
    f2a2:	a0 f0       	brcs	.+40     	; 0xf2cc <__fixunssfsi+0x38>
    f2a4:	d1 f0       	breq	.+52     	; 0xf2da <__fixunssfsi+0x46>
    f2a6:	66 0f       	add	r22, r22
    f2a8:	77 1f       	adc	r23, r23
    f2aa:	88 1f       	adc	r24, r24
    f2ac:	99 1f       	adc	r25, r25
    f2ae:	1a f0       	brmi	.+6      	; 0xf2b6 <__fixunssfsi+0x22>
    f2b0:	ba 95       	dec	r27
    f2b2:	c9 f7       	brne	.-14     	; 0xf2a6 <__fixunssfsi+0x12>
    f2b4:	12 c0       	rjmp	.+36     	; 0xf2da <__fixunssfsi+0x46>
    f2b6:	b1 30       	cpi	r27, 0x01	; 1
    f2b8:	81 f0       	breq	.+32     	; 0xf2da <__fixunssfsi+0x46>
    f2ba:	fc d0       	rcall	.+504    	; 0xf4b4 <__fp_zero>
    f2bc:	b1 e0       	ldi	r27, 0x01	; 1
    f2be:	08 95       	ret
    f2c0:	f9 c0       	rjmp	.+498    	; 0xf4b4 <__fp_zero>
    f2c2:	67 2f       	mov	r22, r23
    f2c4:	78 2f       	mov	r23, r24
    f2c6:	88 27       	eor	r24, r24
    f2c8:	b8 5f       	subi	r27, 0xF8	; 248
    f2ca:	39 f0       	breq	.+14     	; 0xf2da <__fixunssfsi+0x46>
    f2cc:	b9 3f       	cpi	r27, 0xF9	; 249
    f2ce:	cc f3       	brlt	.-14     	; 0xf2c2 <__fixunssfsi+0x2e>
    f2d0:	86 95       	lsr	r24
    f2d2:	77 95       	ror	r23
    f2d4:	67 95       	ror	r22
    f2d6:	b3 95       	inc	r27
    f2d8:	d9 f7       	brne	.-10     	; 0xf2d0 <__fixunssfsi+0x3c>
    f2da:	3e f4       	brtc	.+14     	; 0xf2ea <__fixunssfsi+0x56>
    f2dc:	90 95       	com	r25
    f2de:	80 95       	com	r24
    f2e0:	70 95       	com	r23
    f2e2:	61 95       	neg	r22
    f2e4:	7f 4f       	sbci	r23, 0xFF	; 255
    f2e6:	8f 4f       	sbci	r24, 0xFF	; 255
    f2e8:	9f 4f       	sbci	r25, 0xFF	; 255
    f2ea:	08 95       	ret

0000f2ec <__floatunsisf>:
    f2ec:	e8 94       	clt
    f2ee:	09 c0       	rjmp	.+18     	; 0xf302 <__floatsisf+0x12>

0000f2f0 <__floatsisf>:
    f2f0:	97 fb       	bst	r25, 7
    f2f2:	3e f4       	brtc	.+14     	; 0xf302 <__floatsisf+0x12>
    f2f4:	90 95       	com	r25
    f2f6:	80 95       	com	r24
    f2f8:	70 95       	com	r23
    f2fa:	61 95       	neg	r22
    f2fc:	7f 4f       	sbci	r23, 0xFF	; 255
    f2fe:	8f 4f       	sbci	r24, 0xFF	; 255
    f300:	9f 4f       	sbci	r25, 0xFF	; 255
    f302:	99 23       	and	r25, r25
    f304:	a9 f0       	breq	.+42     	; 0xf330 <__floatsisf+0x40>
    f306:	f9 2f       	mov	r31, r25
    f308:	96 e9       	ldi	r25, 0x96	; 150
    f30a:	bb 27       	eor	r27, r27
    f30c:	93 95       	inc	r25
    f30e:	f6 95       	lsr	r31
    f310:	87 95       	ror	r24
    f312:	77 95       	ror	r23
    f314:	67 95       	ror	r22
    f316:	b7 95       	ror	r27
    f318:	f1 11       	cpse	r31, r1
    f31a:	f8 cf       	rjmp	.-16     	; 0xf30c <__floatsisf+0x1c>
    f31c:	fa f4       	brpl	.+62     	; 0xf35c <__floatsisf+0x6c>
    f31e:	bb 0f       	add	r27, r27
    f320:	11 f4       	brne	.+4      	; 0xf326 <__floatsisf+0x36>
    f322:	60 ff       	sbrs	r22, 0
    f324:	1b c0       	rjmp	.+54     	; 0xf35c <__floatsisf+0x6c>
    f326:	6f 5f       	subi	r22, 0xFF	; 255
    f328:	7f 4f       	sbci	r23, 0xFF	; 255
    f32a:	8f 4f       	sbci	r24, 0xFF	; 255
    f32c:	9f 4f       	sbci	r25, 0xFF	; 255
    f32e:	16 c0       	rjmp	.+44     	; 0xf35c <__floatsisf+0x6c>
    f330:	88 23       	and	r24, r24
    f332:	11 f0       	breq	.+4      	; 0xf338 <__floatsisf+0x48>
    f334:	96 e9       	ldi	r25, 0x96	; 150
    f336:	11 c0       	rjmp	.+34     	; 0xf35a <__floatsisf+0x6a>
    f338:	77 23       	and	r23, r23
    f33a:	21 f0       	breq	.+8      	; 0xf344 <__floatsisf+0x54>
    f33c:	9e e8       	ldi	r25, 0x8E	; 142
    f33e:	87 2f       	mov	r24, r23
    f340:	76 2f       	mov	r23, r22
    f342:	05 c0       	rjmp	.+10     	; 0xf34e <__floatsisf+0x5e>
    f344:	66 23       	and	r22, r22
    f346:	71 f0       	breq	.+28     	; 0xf364 <__floatsisf+0x74>
    f348:	96 e8       	ldi	r25, 0x86	; 134
    f34a:	86 2f       	mov	r24, r22
    f34c:	70 e0       	ldi	r23, 0x00	; 0
    f34e:	60 e0       	ldi	r22, 0x00	; 0
    f350:	2a f0       	brmi	.+10     	; 0xf35c <__floatsisf+0x6c>
    f352:	9a 95       	dec	r25
    f354:	66 0f       	add	r22, r22
    f356:	77 1f       	adc	r23, r23
    f358:	88 1f       	adc	r24, r24
    f35a:	da f7       	brpl	.-10     	; 0xf352 <__floatsisf+0x62>
    f35c:	88 0f       	add	r24, r24
    f35e:	96 95       	lsr	r25
    f360:	87 95       	ror	r24
    f362:	97 f9       	bld	r25, 7
    f364:	08 95       	ret

0000f366 <__fp_cmp>:
    f366:	99 0f       	add	r25, r25
    f368:	00 08       	sbc	r0, r0
    f36a:	55 0f       	add	r21, r21
    f36c:	aa 0b       	sbc	r26, r26
    f36e:	e0 e8       	ldi	r30, 0x80	; 128
    f370:	fe ef       	ldi	r31, 0xFE	; 254
    f372:	16 16       	cp	r1, r22
    f374:	17 06       	cpc	r1, r23
    f376:	e8 07       	cpc	r30, r24
    f378:	f9 07       	cpc	r31, r25
    f37a:	c0 f0       	brcs	.+48     	; 0xf3ac <__fp_cmp+0x46>
    f37c:	12 16       	cp	r1, r18
    f37e:	13 06       	cpc	r1, r19
    f380:	e4 07       	cpc	r30, r20
    f382:	f5 07       	cpc	r31, r21
    f384:	98 f0       	brcs	.+38     	; 0xf3ac <__fp_cmp+0x46>
    f386:	62 1b       	sub	r22, r18
    f388:	73 0b       	sbc	r23, r19
    f38a:	84 0b       	sbc	r24, r20
    f38c:	95 0b       	sbc	r25, r21
    f38e:	39 f4       	brne	.+14     	; 0xf39e <__fp_cmp+0x38>
    f390:	0a 26       	eor	r0, r26
    f392:	61 f0       	breq	.+24     	; 0xf3ac <__fp_cmp+0x46>
    f394:	23 2b       	or	r18, r19
    f396:	24 2b       	or	r18, r20
    f398:	25 2b       	or	r18, r21
    f39a:	21 f4       	brne	.+8      	; 0xf3a4 <__fp_cmp+0x3e>
    f39c:	08 95       	ret
    f39e:	0a 26       	eor	r0, r26
    f3a0:	09 f4       	brne	.+2      	; 0xf3a4 <__fp_cmp+0x3e>
    f3a2:	a1 40       	sbci	r26, 0x01	; 1
    f3a4:	a6 95       	lsr	r26
    f3a6:	8f ef       	ldi	r24, 0xFF	; 255
    f3a8:	81 1d       	adc	r24, r1
    f3aa:	81 1d       	adc	r24, r1
    f3ac:	08 95       	ret

0000f3ae <__fp_inf>:
    f3ae:	97 f9       	bld	r25, 7
    f3b0:	9f 67       	ori	r25, 0x7F	; 127
    f3b2:	80 e8       	ldi	r24, 0x80	; 128
    f3b4:	70 e0       	ldi	r23, 0x00	; 0
    f3b6:	60 e0       	ldi	r22, 0x00	; 0
    f3b8:	08 95       	ret

0000f3ba <__fp_nan>:
    f3ba:	9f ef       	ldi	r25, 0xFF	; 255
    f3bc:	80 ec       	ldi	r24, 0xC0	; 192
    f3be:	08 95       	ret

0000f3c0 <__fp_pscA>:
    f3c0:	00 24       	eor	r0, r0
    f3c2:	0a 94       	dec	r0
    f3c4:	16 16       	cp	r1, r22
    f3c6:	17 06       	cpc	r1, r23
    f3c8:	18 06       	cpc	r1, r24
    f3ca:	09 06       	cpc	r0, r25
    f3cc:	08 95       	ret

0000f3ce <__fp_pscB>:
    f3ce:	00 24       	eor	r0, r0
    f3d0:	0a 94       	dec	r0
    f3d2:	12 16       	cp	r1, r18
    f3d4:	13 06       	cpc	r1, r19
    f3d6:	14 06       	cpc	r1, r20
    f3d8:	05 06       	cpc	r0, r21
    f3da:	08 95       	ret
    f3dc:	ee cf       	rjmp	.-36     	; 0xf3ba <__fp_nan>

0000f3de <__fp_rempio2>:
    f3de:	50 d0       	rcall	.+160    	; 0xf480 <__fp_splitA>
    f3e0:	e8 f3       	brcs	.-6      	; 0xf3dc <__fp_pscB+0xe>
    f3e2:	e8 94       	clt
    f3e4:	e0 e0       	ldi	r30, 0x00	; 0
    f3e6:	bb 27       	eor	r27, r27
    f3e8:	9f 57       	subi	r25, 0x7F	; 127
    f3ea:	f0 f0       	brcs	.+60     	; 0xf428 <__fp_rempio2+0x4a>
    f3ec:	2a ed       	ldi	r18, 0xDA	; 218
    f3ee:	3f e0       	ldi	r19, 0x0F	; 15
    f3f0:	49 ec       	ldi	r20, 0xC9	; 201
    f3f2:	06 c0       	rjmp	.+12     	; 0xf400 <__fp_rempio2+0x22>
    f3f4:	ee 0f       	add	r30, r30
    f3f6:	bb 0f       	add	r27, r27
    f3f8:	66 1f       	adc	r22, r22
    f3fa:	77 1f       	adc	r23, r23
    f3fc:	88 1f       	adc	r24, r24
    f3fe:	28 f0       	brcs	.+10     	; 0xf40a <__fp_rempio2+0x2c>
    f400:	b2 3a       	cpi	r27, 0xA2	; 162
    f402:	62 07       	cpc	r22, r18
    f404:	73 07       	cpc	r23, r19
    f406:	84 07       	cpc	r24, r20
    f408:	28 f0       	brcs	.+10     	; 0xf414 <__fp_rempio2+0x36>
    f40a:	b2 5a       	subi	r27, 0xA2	; 162
    f40c:	62 0b       	sbc	r22, r18
    f40e:	73 0b       	sbc	r23, r19
    f410:	84 0b       	sbc	r24, r20
    f412:	e3 95       	inc	r30
    f414:	9a 95       	dec	r25
    f416:	72 f7       	brpl	.-36     	; 0xf3f4 <__fp_rempio2+0x16>
    f418:	80 38       	cpi	r24, 0x80	; 128
    f41a:	30 f4       	brcc	.+12     	; 0xf428 <__fp_rempio2+0x4a>
    f41c:	9a 95       	dec	r25
    f41e:	bb 0f       	add	r27, r27
    f420:	66 1f       	adc	r22, r22
    f422:	77 1f       	adc	r23, r23
    f424:	88 1f       	adc	r24, r24
    f426:	d2 f7       	brpl	.-12     	; 0xf41c <__fp_rempio2+0x3e>
    f428:	90 48       	sbci	r25, 0x80	; 128
    f42a:	37 c1       	rjmp	.+622    	; 0xf69a <__fp_mpack_finite>

0000f42c <__fp_round>:
    f42c:	09 2e       	mov	r0, r25
    f42e:	03 94       	inc	r0
    f430:	00 0c       	add	r0, r0
    f432:	11 f4       	brne	.+4      	; 0xf438 <__fp_round+0xc>
    f434:	88 23       	and	r24, r24
    f436:	52 f0       	brmi	.+20     	; 0xf44c <__fp_round+0x20>
    f438:	bb 0f       	add	r27, r27
    f43a:	40 f4       	brcc	.+16     	; 0xf44c <__fp_round+0x20>
    f43c:	bf 2b       	or	r27, r31
    f43e:	11 f4       	brne	.+4      	; 0xf444 <__fp_round+0x18>
    f440:	60 ff       	sbrs	r22, 0
    f442:	04 c0       	rjmp	.+8      	; 0xf44c <__fp_round+0x20>
    f444:	6f 5f       	subi	r22, 0xFF	; 255
    f446:	7f 4f       	sbci	r23, 0xFF	; 255
    f448:	8f 4f       	sbci	r24, 0xFF	; 255
    f44a:	9f 4f       	sbci	r25, 0xFF	; 255
    f44c:	08 95       	ret

0000f44e <__fp_sinus>:
    f44e:	ef 93       	push	r30
    f450:	e0 ff       	sbrs	r30, 0
    f452:	06 c0       	rjmp	.+12     	; 0xf460 <__fp_sinus+0x12>
    f454:	a2 ea       	ldi	r26, 0xA2	; 162
    f456:	2a ed       	ldi	r18, 0xDA	; 218
    f458:	3f e0       	ldi	r19, 0x0F	; 15
    f45a:	49 ec       	ldi	r20, 0xC9	; 201
    f45c:	5f eb       	ldi	r21, 0xBF	; 191
    f45e:	53 de       	rcall	.-858    	; 0xf106 <__addsf3x>
    f460:	e5 df       	rcall	.-54     	; 0xf42c <__fp_round>
    f462:	0f 90       	pop	r0
    f464:	03 94       	inc	r0
    f466:	01 fc       	sbrc	r0, 1
    f468:	90 58       	subi	r25, 0x80	; 128
    f46a:	e8 e1       	ldi	r30, 0x18	; 24
    f46c:	f2 e0       	ldi	r31, 0x02	; 2
    f46e:	46 c1       	rjmp	.+652    	; 0xf6fc <__fp_powsodd>

0000f470 <__fp_split3>:
    f470:	57 fd       	sbrc	r21, 7
    f472:	90 58       	subi	r25, 0x80	; 128
    f474:	44 0f       	add	r20, r20
    f476:	55 1f       	adc	r21, r21
    f478:	59 f0       	breq	.+22     	; 0xf490 <__fp_splitA+0x10>
    f47a:	5f 3f       	cpi	r21, 0xFF	; 255
    f47c:	71 f0       	breq	.+28     	; 0xf49a <__fp_splitA+0x1a>
    f47e:	47 95       	ror	r20

0000f480 <__fp_splitA>:
    f480:	88 0f       	add	r24, r24
    f482:	97 fb       	bst	r25, 7
    f484:	99 1f       	adc	r25, r25
    f486:	61 f0       	breq	.+24     	; 0xf4a0 <__fp_splitA+0x20>
    f488:	9f 3f       	cpi	r25, 0xFF	; 255
    f48a:	79 f0       	breq	.+30     	; 0xf4aa <__fp_splitA+0x2a>
    f48c:	87 95       	ror	r24
    f48e:	08 95       	ret
    f490:	12 16       	cp	r1, r18
    f492:	13 06       	cpc	r1, r19
    f494:	14 06       	cpc	r1, r20
    f496:	55 1f       	adc	r21, r21
    f498:	f2 cf       	rjmp	.-28     	; 0xf47e <__fp_split3+0xe>
    f49a:	46 95       	lsr	r20
    f49c:	f1 df       	rcall	.-30     	; 0xf480 <__fp_splitA>
    f49e:	08 c0       	rjmp	.+16     	; 0xf4b0 <__fp_splitA+0x30>
    f4a0:	16 16       	cp	r1, r22
    f4a2:	17 06       	cpc	r1, r23
    f4a4:	18 06       	cpc	r1, r24
    f4a6:	99 1f       	adc	r25, r25
    f4a8:	f1 cf       	rjmp	.-30     	; 0xf48c <__fp_splitA+0xc>
    f4aa:	86 95       	lsr	r24
    f4ac:	71 05       	cpc	r23, r1
    f4ae:	61 05       	cpc	r22, r1
    f4b0:	08 94       	sec
    f4b2:	08 95       	ret

0000f4b4 <__fp_zero>:
    f4b4:	e8 94       	clt

0000f4b6 <__fp_szero>:
    f4b6:	bb 27       	eor	r27, r27
    f4b8:	66 27       	eor	r22, r22
    f4ba:	77 27       	eor	r23, r23
    f4bc:	cb 01       	movw	r24, r22
    f4be:	97 f9       	bld	r25, 7
    f4c0:	08 95       	ret

0000f4c2 <__gesf2>:
    f4c2:	51 df       	rcall	.-350    	; 0xf366 <__fp_cmp>
    f4c4:	08 f4       	brcc	.+2      	; 0xf4c8 <__gesf2+0x6>
    f4c6:	8f ef       	ldi	r24, 0xFF	; 255
    f4c8:	08 95       	ret

0000f4ca <__mulsf3>:
    f4ca:	0b d0       	rcall	.+22     	; 0xf4e2 <__mulsf3x>
    f4cc:	af cf       	rjmp	.-162    	; 0xf42c <__fp_round>
    f4ce:	78 df       	rcall	.-272    	; 0xf3c0 <__fp_pscA>
    f4d0:	28 f0       	brcs	.+10     	; 0xf4dc <__mulsf3+0x12>
    f4d2:	7d df       	rcall	.-262    	; 0xf3ce <__fp_pscB>
    f4d4:	18 f0       	brcs	.+6      	; 0xf4dc <__mulsf3+0x12>
    f4d6:	95 23       	and	r25, r21
    f4d8:	09 f0       	breq	.+2      	; 0xf4dc <__mulsf3+0x12>
    f4da:	69 cf       	rjmp	.-302    	; 0xf3ae <__fp_inf>
    f4dc:	6e cf       	rjmp	.-292    	; 0xf3ba <__fp_nan>
    f4de:	11 24       	eor	r1, r1
    f4e0:	ea cf       	rjmp	.-44     	; 0xf4b6 <__fp_szero>

0000f4e2 <__mulsf3x>:
    f4e2:	c6 df       	rcall	.-116    	; 0xf470 <__fp_split3>
    f4e4:	a0 f3       	brcs	.-24     	; 0xf4ce <__mulsf3+0x4>

0000f4e6 <__mulsf3_pse>:
    f4e6:	95 9f       	mul	r25, r21
    f4e8:	d1 f3       	breq	.-12     	; 0xf4de <__mulsf3+0x14>
    f4ea:	95 0f       	add	r25, r21
    f4ec:	50 e0       	ldi	r21, 0x00	; 0
    f4ee:	55 1f       	adc	r21, r21
    f4f0:	62 9f       	mul	r22, r18
    f4f2:	f0 01       	movw	r30, r0
    f4f4:	72 9f       	mul	r23, r18
    f4f6:	bb 27       	eor	r27, r27
    f4f8:	f0 0d       	add	r31, r0
    f4fa:	b1 1d       	adc	r27, r1
    f4fc:	63 9f       	mul	r22, r19
    f4fe:	aa 27       	eor	r26, r26
    f500:	f0 0d       	add	r31, r0
    f502:	b1 1d       	adc	r27, r1
    f504:	aa 1f       	adc	r26, r26
    f506:	64 9f       	mul	r22, r20
    f508:	66 27       	eor	r22, r22
    f50a:	b0 0d       	add	r27, r0
    f50c:	a1 1d       	adc	r26, r1
    f50e:	66 1f       	adc	r22, r22
    f510:	82 9f       	mul	r24, r18
    f512:	22 27       	eor	r18, r18
    f514:	b0 0d       	add	r27, r0
    f516:	a1 1d       	adc	r26, r1
    f518:	62 1f       	adc	r22, r18
    f51a:	73 9f       	mul	r23, r19
    f51c:	b0 0d       	add	r27, r0
    f51e:	a1 1d       	adc	r26, r1
    f520:	62 1f       	adc	r22, r18
    f522:	83 9f       	mul	r24, r19
    f524:	a0 0d       	add	r26, r0
    f526:	61 1d       	adc	r22, r1
    f528:	22 1f       	adc	r18, r18
    f52a:	74 9f       	mul	r23, r20
    f52c:	33 27       	eor	r19, r19
    f52e:	a0 0d       	add	r26, r0
    f530:	61 1d       	adc	r22, r1
    f532:	23 1f       	adc	r18, r19
    f534:	84 9f       	mul	r24, r20
    f536:	60 0d       	add	r22, r0
    f538:	21 1d       	adc	r18, r1
    f53a:	82 2f       	mov	r24, r18
    f53c:	76 2f       	mov	r23, r22
    f53e:	6a 2f       	mov	r22, r26
    f540:	11 24       	eor	r1, r1
    f542:	9f 57       	subi	r25, 0x7F	; 127
    f544:	50 40       	sbci	r21, 0x00	; 0
    f546:	8a f0       	brmi	.+34     	; 0xf56a <__mulsf3_pse+0x84>
    f548:	e1 f0       	breq	.+56     	; 0xf582 <__mulsf3_pse+0x9c>
    f54a:	88 23       	and	r24, r24
    f54c:	4a f0       	brmi	.+18     	; 0xf560 <__mulsf3_pse+0x7a>
    f54e:	ee 0f       	add	r30, r30
    f550:	ff 1f       	adc	r31, r31
    f552:	bb 1f       	adc	r27, r27
    f554:	66 1f       	adc	r22, r22
    f556:	77 1f       	adc	r23, r23
    f558:	88 1f       	adc	r24, r24
    f55a:	91 50       	subi	r25, 0x01	; 1
    f55c:	50 40       	sbci	r21, 0x00	; 0
    f55e:	a9 f7       	brne	.-22     	; 0xf54a <__mulsf3_pse+0x64>
    f560:	9e 3f       	cpi	r25, 0xFE	; 254
    f562:	51 05       	cpc	r21, r1
    f564:	70 f0       	brcs	.+28     	; 0xf582 <__mulsf3_pse+0x9c>
    f566:	23 cf       	rjmp	.-442    	; 0xf3ae <__fp_inf>
    f568:	a6 cf       	rjmp	.-180    	; 0xf4b6 <__fp_szero>
    f56a:	5f 3f       	cpi	r21, 0xFF	; 255
    f56c:	ec f3       	brlt	.-6      	; 0xf568 <__mulsf3_pse+0x82>
    f56e:	98 3e       	cpi	r25, 0xE8	; 232
    f570:	dc f3       	brlt	.-10     	; 0xf568 <__mulsf3_pse+0x82>
    f572:	86 95       	lsr	r24
    f574:	77 95       	ror	r23
    f576:	67 95       	ror	r22
    f578:	b7 95       	ror	r27
    f57a:	f7 95       	ror	r31
    f57c:	e7 95       	ror	r30
    f57e:	9f 5f       	subi	r25, 0xFF	; 255
    f580:	c1 f7       	brne	.-16     	; 0xf572 <__mulsf3_pse+0x8c>
    f582:	fe 2b       	or	r31, r30
    f584:	88 0f       	add	r24, r24
    f586:	91 1d       	adc	r25, r1
    f588:	96 95       	lsr	r25
    f58a:	87 95       	ror	r24
    f58c:	97 f9       	bld	r25, 7
    f58e:	08 95       	ret

0000f590 <pow>:
    f590:	fa 01       	movw	r30, r20
    f592:	ee 0f       	add	r30, r30
    f594:	ff 1f       	adc	r31, r31
    f596:	30 96       	adiw	r30, 0x00	; 0
    f598:	21 05       	cpc	r18, r1
    f59a:	31 05       	cpc	r19, r1
    f59c:	99 f1       	breq	.+102    	; 0xf604 <pow+0x74>
    f59e:	61 15       	cp	r22, r1
    f5a0:	71 05       	cpc	r23, r1
    f5a2:	61 f4       	brne	.+24     	; 0xf5bc <pow+0x2c>
    f5a4:	80 38       	cpi	r24, 0x80	; 128
    f5a6:	bf e3       	ldi	r27, 0x3F	; 63
    f5a8:	9b 07       	cpc	r25, r27
    f5aa:	49 f1       	breq	.+82     	; 0xf5fe <pow+0x6e>
    f5ac:	68 94       	set
    f5ae:	90 38       	cpi	r25, 0x80	; 128
    f5b0:	81 05       	cpc	r24, r1
    f5b2:	61 f0       	breq	.+24     	; 0xf5cc <pow+0x3c>
    f5b4:	80 38       	cpi	r24, 0x80	; 128
    f5b6:	bf ef       	ldi	r27, 0xFF	; 255
    f5b8:	9b 07       	cpc	r25, r27
    f5ba:	41 f0       	breq	.+16     	; 0xf5cc <pow+0x3c>
    f5bc:	99 23       	and	r25, r25
    f5be:	42 f5       	brpl	.+80     	; 0xf610 <pow+0x80>
    f5c0:	ff 3f       	cpi	r31, 0xFF	; 255
    f5c2:	e1 05       	cpc	r30, r1
    f5c4:	31 05       	cpc	r19, r1
    f5c6:	21 05       	cpc	r18, r1
    f5c8:	11 f1       	breq	.+68     	; 0xf60e <pow+0x7e>
    f5ca:	e8 94       	clt
    f5cc:	08 94       	sec
    f5ce:	e7 95       	ror	r30
    f5d0:	d9 01       	movw	r26, r18
    f5d2:	aa 23       	and	r26, r26
    f5d4:	29 f4       	brne	.+10     	; 0xf5e0 <pow+0x50>
    f5d6:	ab 2f       	mov	r26, r27
    f5d8:	be 2f       	mov	r27, r30
    f5da:	f8 5f       	subi	r31, 0xF8	; 248
    f5dc:	d0 f3       	brcs	.-12     	; 0xf5d2 <pow+0x42>
    f5de:	10 c0       	rjmp	.+32     	; 0xf600 <pow+0x70>
    f5e0:	ff 5f       	subi	r31, 0xFF	; 255
    f5e2:	70 f4       	brcc	.+28     	; 0xf600 <pow+0x70>
    f5e4:	a6 95       	lsr	r26
    f5e6:	e0 f7       	brcc	.-8      	; 0xf5e0 <pow+0x50>
    f5e8:	f7 39       	cpi	r31, 0x97	; 151
    f5ea:	50 f0       	brcs	.+20     	; 0xf600 <pow+0x70>
    f5ec:	19 f0       	breq	.+6      	; 0xf5f4 <pow+0x64>
    f5ee:	ff 3a       	cpi	r31, 0xAF	; 175
    f5f0:	38 f4       	brcc	.+14     	; 0xf600 <pow+0x70>
    f5f2:	9f 77       	andi	r25, 0x7F	; 127
    f5f4:	9f 93       	push	r25
    f5f6:	0c d0       	rcall	.+24     	; 0xf610 <pow+0x80>
    f5f8:	0f 90       	pop	r0
    f5fa:	07 fc       	sbrc	r0, 7
    f5fc:	90 58       	subi	r25, 0x80	; 128
    f5fe:	08 95       	ret
    f600:	3e f0       	brts	.+14     	; 0xf610 <pow+0x80>
    f602:	db ce       	rjmp	.-586    	; 0xf3ba <__fp_nan>
    f604:	60 e0       	ldi	r22, 0x00	; 0
    f606:	70 e0       	ldi	r23, 0x00	; 0
    f608:	80 e8       	ldi	r24, 0x80	; 128
    f60a:	9f e3       	ldi	r25, 0x3F	; 63
    f60c:	08 95       	ret
    f60e:	4f e7       	ldi	r20, 0x7F	; 127
    f610:	9f 77       	andi	r25, 0x7F	; 127
    f612:	5f 93       	push	r21
    f614:	4f 93       	push	r20
    f616:	3f 93       	push	r19
    f618:	2f 93       	push	r18
    f61a:	c3 d0       	rcall	.+390    	; 0xf7a2 <log>
    f61c:	2f 91       	pop	r18
    f61e:	3f 91       	pop	r19
    f620:	4f 91       	pop	r20
    f622:	5f 91       	pop	r21
    f624:	52 df       	rcall	.-348    	; 0xf4ca <__mulsf3>
    f626:	0b c0       	rjmp	.+22     	; 0xf63e <exp>

0000f628 <sin>:
    f628:	9f 93       	push	r25
    f62a:	d9 de       	rcall	.-590    	; 0xf3de <__fp_rempio2>
    f62c:	0f 90       	pop	r0
    f62e:	07 fc       	sbrc	r0, 7
    f630:	ee 5f       	subi	r30, 0xFE	; 254
    f632:	0d cf       	rjmp	.-486    	; 0xf44e <__fp_sinus>
    f634:	19 f4       	brne	.+6      	; 0xf63c <sin+0x14>
    f636:	0e f0       	brts	.+2      	; 0xf63a <sin+0x12>
    f638:	ba ce       	rjmp	.-652    	; 0xf3ae <__fp_inf>
    f63a:	3c cf       	rjmp	.-392    	; 0xf4b4 <__fp_zero>
    f63c:	be ce       	rjmp	.-644    	; 0xf3ba <__fp_nan>

0000f63e <exp>:
    f63e:	20 df       	rcall	.-448    	; 0xf480 <__fp_splitA>
    f640:	c8 f3       	brcs	.-14     	; 0xf634 <sin+0xc>
    f642:	96 38       	cpi	r25, 0x86	; 134
    f644:	c0 f7       	brcc	.-16     	; 0xf636 <sin+0xe>
    f646:	07 f8       	bld	r0, 7
    f648:	0f 92       	push	r0
    f64a:	e8 94       	clt
    f64c:	2b e3       	ldi	r18, 0x3B	; 59
    f64e:	3a ea       	ldi	r19, 0xAA	; 170
    f650:	48 eb       	ldi	r20, 0xB8	; 184
    f652:	5f e7       	ldi	r21, 0x7F	; 127
    f654:	48 df       	rcall	.-368    	; 0xf4e6 <__mulsf3_pse>
    f656:	0f 92       	push	r0
    f658:	0f 92       	push	r0
    f65a:	0f 92       	push	r0
    f65c:	4d b7       	in	r20, 0x3d	; 61
    f65e:	5e b7       	in	r21, 0x3e	; 62
    f660:	0f 92       	push	r0
    f662:	df d0       	rcall	.+446    	; 0xf822 <modf>
    f664:	e6 e3       	ldi	r30, 0x36	; 54
    f666:	f2 e0       	ldi	r31, 0x02	; 2
    f668:	24 d0       	rcall	.+72     	; 0xf6b2 <__fp_powser>
    f66a:	4f 91       	pop	r20
    f66c:	5f 91       	pop	r21
    f66e:	ef 91       	pop	r30
    f670:	ff 91       	pop	r31
    f672:	e5 95       	asr	r30
    f674:	ee 1f       	adc	r30, r30
    f676:	ff 1f       	adc	r31, r31
    f678:	49 f0       	breq	.+18     	; 0xf68c <exp+0x4e>
    f67a:	fe 57       	subi	r31, 0x7E	; 126
    f67c:	e0 68       	ori	r30, 0x80	; 128
    f67e:	44 27       	eor	r20, r20
    f680:	ee 0f       	add	r30, r30
    f682:	44 1f       	adc	r20, r20
    f684:	fa 95       	dec	r31
    f686:	e1 f7       	brne	.-8      	; 0xf680 <exp+0x42>
    f688:	41 95       	neg	r20
    f68a:	55 0b       	sbc	r21, r21
    f68c:	51 d0       	rcall	.+162    	; 0xf730 <ldexp>
    f68e:	0f 90       	pop	r0
    f690:	07 fe       	sbrs	r0, 7
    f692:	45 c0       	rjmp	.+138    	; 0xf71e <inverse>
    f694:	08 95       	ret

0000f696 <__fp_mpack>:
    f696:	9f 3f       	cpi	r25, 0xFF	; 255
    f698:	31 f0       	breq	.+12     	; 0xf6a6 <__fp_mpack_finite+0xc>

0000f69a <__fp_mpack_finite>:
    f69a:	91 50       	subi	r25, 0x01	; 1
    f69c:	20 f4       	brcc	.+8      	; 0xf6a6 <__fp_mpack_finite+0xc>
    f69e:	87 95       	ror	r24
    f6a0:	77 95       	ror	r23
    f6a2:	67 95       	ror	r22
    f6a4:	b7 95       	ror	r27
    f6a6:	88 0f       	add	r24, r24
    f6a8:	91 1d       	adc	r25, r1
    f6aa:	96 95       	lsr	r25
    f6ac:	87 95       	ror	r24
    f6ae:	97 f9       	bld	r25, 7
    f6b0:	08 95       	ret

0000f6b2 <__fp_powser>:
    f6b2:	df 93       	push	r29
    f6b4:	cf 93       	push	r28
    f6b6:	1f 93       	push	r17
    f6b8:	0f 93       	push	r16
    f6ba:	ff 92       	push	r15
    f6bc:	ef 92       	push	r14
    f6be:	df 92       	push	r13
    f6c0:	7b 01       	movw	r14, r22
    f6c2:	8c 01       	movw	r16, r24
    f6c4:	68 94       	set
    f6c6:	05 c0       	rjmp	.+10     	; 0xf6d2 <__fp_powser+0x20>
    f6c8:	da 2e       	mov	r13, r26
    f6ca:	ef 01       	movw	r28, r30
    f6cc:	0a df       	rcall	.-492    	; 0xf4e2 <__mulsf3x>
    f6ce:	fe 01       	movw	r30, r28
    f6d0:	e8 94       	clt
    f6d2:	a5 91       	lpm	r26, Z+
    f6d4:	25 91       	lpm	r18, Z+
    f6d6:	35 91       	lpm	r19, Z+
    f6d8:	45 91       	lpm	r20, Z+
    f6da:	55 91       	lpm	r21, Z+
    f6dc:	ae f3       	brts	.-22     	; 0xf6c8 <__fp_powser+0x16>
    f6de:	ef 01       	movw	r28, r30
    f6e0:	12 dd       	rcall	.-1500   	; 0xf106 <__addsf3x>
    f6e2:	fe 01       	movw	r30, r28
    f6e4:	97 01       	movw	r18, r14
    f6e6:	a8 01       	movw	r20, r16
    f6e8:	da 94       	dec	r13
    f6ea:	79 f7       	brne	.-34     	; 0xf6ca <__fp_powser+0x18>
    f6ec:	df 90       	pop	r13
    f6ee:	ef 90       	pop	r14
    f6f0:	ff 90       	pop	r15
    f6f2:	0f 91       	pop	r16
    f6f4:	1f 91       	pop	r17
    f6f6:	cf 91       	pop	r28
    f6f8:	df 91       	pop	r29
    f6fa:	08 95       	ret

0000f6fc <__fp_powsodd>:
    f6fc:	9f 93       	push	r25
    f6fe:	8f 93       	push	r24
    f700:	7f 93       	push	r23
    f702:	6f 93       	push	r22
    f704:	ff 93       	push	r31
    f706:	ef 93       	push	r30
    f708:	9b 01       	movw	r18, r22
    f70a:	ac 01       	movw	r20, r24
    f70c:	de de       	rcall	.-580    	; 0xf4ca <__mulsf3>
    f70e:	ef 91       	pop	r30
    f710:	ff 91       	pop	r31
    f712:	cf df       	rcall	.-98     	; 0xf6b2 <__fp_powser>
    f714:	2f 91       	pop	r18
    f716:	3f 91       	pop	r19
    f718:	4f 91       	pop	r20
    f71a:	5f 91       	pop	r21
    f71c:	d6 ce       	rjmp	.-596    	; 0xf4ca <__mulsf3>

0000f71e <inverse>:
    f71e:	9b 01       	movw	r18, r22
    f720:	ac 01       	movw	r20, r24
    f722:	60 e0       	ldi	r22, 0x00	; 0
    f724:	70 e0       	ldi	r23, 0x00	; 0
    f726:	80 e8       	ldi	r24, 0x80	; 128
    f728:	9f e3       	ldi	r25, 0x3F	; 63
    f72a:	47 cd       	rjmp	.-1394   	; 0xf1ba <__divsf3>
    f72c:	40 ce       	rjmp	.-896    	; 0xf3ae <__fp_inf>
    f72e:	b3 cf       	rjmp	.-154    	; 0xf696 <__fp_mpack>

0000f730 <ldexp>:
    f730:	a7 de       	rcall	.-690    	; 0xf480 <__fp_splitA>
    f732:	e8 f3       	brcs	.-6      	; 0xf72e <inverse+0x10>
    f734:	99 23       	and	r25, r25
    f736:	d9 f3       	breq	.-10     	; 0xf72e <inverse+0x10>
    f738:	94 0f       	add	r25, r20
    f73a:	51 1d       	adc	r21, r1
    f73c:	bb f3       	brvs	.-18     	; 0xf72c <inverse+0xe>
    f73e:	91 50       	subi	r25, 0x01	; 1
    f740:	50 40       	sbci	r21, 0x00	; 0
    f742:	94 f0       	brlt	.+36     	; 0xf768 <ldexp+0x38>
    f744:	59 f0       	breq	.+22     	; 0xf75c <ldexp+0x2c>
    f746:	88 23       	and	r24, r24
    f748:	32 f0       	brmi	.+12     	; 0xf756 <ldexp+0x26>
    f74a:	66 0f       	add	r22, r22
    f74c:	77 1f       	adc	r23, r23
    f74e:	88 1f       	adc	r24, r24
    f750:	91 50       	subi	r25, 0x01	; 1
    f752:	50 40       	sbci	r21, 0x00	; 0
    f754:	c1 f7       	brne	.-16     	; 0xf746 <ldexp+0x16>
    f756:	9e 3f       	cpi	r25, 0xFE	; 254
    f758:	51 05       	cpc	r21, r1
    f75a:	44 f7       	brge	.-48     	; 0xf72c <inverse+0xe>
    f75c:	88 0f       	add	r24, r24
    f75e:	91 1d       	adc	r25, r1
    f760:	96 95       	lsr	r25
    f762:	87 95       	ror	r24
    f764:	97 f9       	bld	r25, 7
    f766:	08 95       	ret
    f768:	5f 3f       	cpi	r21, 0xFF	; 255
    f76a:	ac f0       	brlt	.+42     	; 0xf796 <ldexp+0x66>
    f76c:	98 3e       	cpi	r25, 0xE8	; 232
    f76e:	9c f0       	brlt	.+38     	; 0xf796 <ldexp+0x66>
    f770:	bb 27       	eor	r27, r27
    f772:	86 95       	lsr	r24
    f774:	77 95       	ror	r23
    f776:	67 95       	ror	r22
    f778:	b7 95       	ror	r27
    f77a:	08 f4       	brcc	.+2      	; 0xf77e <ldexp+0x4e>
    f77c:	b1 60       	ori	r27, 0x01	; 1
    f77e:	93 95       	inc	r25
    f780:	c1 f7       	brne	.-16     	; 0xf772 <ldexp+0x42>
    f782:	bb 0f       	add	r27, r27
    f784:	58 f7       	brcc	.-42     	; 0xf75c <ldexp+0x2c>
    f786:	11 f4       	brne	.+4      	; 0xf78c <ldexp+0x5c>
    f788:	60 ff       	sbrs	r22, 0
    f78a:	e8 cf       	rjmp	.-48     	; 0xf75c <ldexp+0x2c>
    f78c:	6f 5f       	subi	r22, 0xFF	; 255
    f78e:	7f 4f       	sbci	r23, 0xFF	; 255
    f790:	8f 4f       	sbci	r24, 0xFF	; 255
    f792:	9f 4f       	sbci	r25, 0xFF	; 255
    f794:	e3 cf       	rjmp	.-58     	; 0xf75c <ldexp+0x2c>
    f796:	8f ce       	rjmp	.-738    	; 0xf4b6 <__fp_szero>
    f798:	0e f0       	brts	.+2      	; 0xf79c <ldexp+0x6c>
    f79a:	7d cf       	rjmp	.-262    	; 0xf696 <__fp_mpack>
    f79c:	0e ce       	rjmp	.-996    	; 0xf3ba <__fp_nan>
    f79e:	68 94       	set
    f7a0:	06 ce       	rjmp	.-1012   	; 0xf3ae <__fp_inf>

0000f7a2 <log>:
    f7a2:	6e de       	rcall	.-804    	; 0xf480 <__fp_splitA>
    f7a4:	c8 f3       	brcs	.-14     	; 0xf798 <ldexp+0x68>
    f7a6:	99 23       	and	r25, r25
    f7a8:	d1 f3       	breq	.-12     	; 0xf79e <ldexp+0x6e>
    f7aa:	c6 f3       	brts	.-16     	; 0xf79c <ldexp+0x6c>
    f7ac:	df 93       	push	r29
    f7ae:	cf 93       	push	r28
    f7b0:	1f 93       	push	r17
    f7b2:	0f 93       	push	r16
    f7b4:	ff 92       	push	r15
    f7b6:	c9 2f       	mov	r28, r25
    f7b8:	dd 27       	eor	r29, r29
    f7ba:	88 23       	and	r24, r24
    f7bc:	2a f0       	brmi	.+10     	; 0xf7c8 <log+0x26>
    f7be:	21 97       	sbiw	r28, 0x01	; 1
    f7c0:	66 0f       	add	r22, r22
    f7c2:	77 1f       	adc	r23, r23
    f7c4:	88 1f       	adc	r24, r24
    f7c6:	da f7       	brpl	.-10     	; 0xf7be <log+0x1c>
    f7c8:	20 e0       	ldi	r18, 0x00	; 0
    f7ca:	30 e0       	ldi	r19, 0x00	; 0
    f7cc:	40 e8       	ldi	r20, 0x80	; 128
    f7ce:	5f eb       	ldi	r21, 0xBF	; 191
    f7d0:	9f e3       	ldi	r25, 0x3F	; 63
    f7d2:	88 39       	cpi	r24, 0x98	; 152
    f7d4:	20 f0       	brcs	.+8      	; 0xf7de <log+0x3c>
    f7d6:	80 3e       	cpi	r24, 0xE0	; 224
    f7d8:	30 f0       	brcs	.+12     	; 0xf7e6 <log+0x44>
    f7da:	21 96       	adiw	r28, 0x01	; 1
    f7dc:	8f 77       	andi	r24, 0x7F	; 127
    f7de:	82 dc       	rcall	.-1788   	; 0xf0e4 <__addsf3>
    f7e0:	ee e5       	ldi	r30, 0x5E	; 94
    f7e2:	f2 e0       	ldi	r31, 0x02	; 2
    f7e4:	03 c0       	rjmp	.+6      	; 0xf7ec <log+0x4a>
    f7e6:	7e dc       	rcall	.-1796   	; 0xf0e4 <__addsf3>
    f7e8:	eb e8       	ldi	r30, 0x8B	; 139
    f7ea:	f2 e0       	ldi	r31, 0x02	; 2
    f7ec:	62 df       	rcall	.-316    	; 0xf6b2 <__fp_powser>
    f7ee:	8b 01       	movw	r16, r22
    f7f0:	be 01       	movw	r22, r28
    f7f2:	ec 01       	movw	r28, r24
    f7f4:	fb 2e       	mov	r15, r27
    f7f6:	6f 57       	subi	r22, 0x7F	; 127
    f7f8:	71 09       	sbc	r23, r1
    f7fa:	75 95       	asr	r23
    f7fc:	77 1f       	adc	r23, r23
    f7fe:	88 0b       	sbc	r24, r24
    f800:	99 0b       	sbc	r25, r25
    f802:	76 dd       	rcall	.-1300   	; 0xf2f0 <__floatsisf>
    f804:	28 e1       	ldi	r18, 0x18	; 24
    f806:	32 e7       	ldi	r19, 0x72	; 114
    f808:	41 e3       	ldi	r20, 0x31	; 49
    f80a:	5f e3       	ldi	r21, 0x3F	; 63
    f80c:	6a de       	rcall	.-812    	; 0xf4e2 <__mulsf3x>
    f80e:	af 2d       	mov	r26, r15
    f810:	98 01       	movw	r18, r16
    f812:	ae 01       	movw	r20, r28
    f814:	ff 90       	pop	r15
    f816:	0f 91       	pop	r16
    f818:	1f 91       	pop	r17
    f81a:	cf 91       	pop	r28
    f81c:	df 91       	pop	r29
    f81e:	73 dc       	rcall	.-1818   	; 0xf106 <__addsf3x>
    f820:	05 ce       	rjmp	.-1014   	; 0xf42c <__fp_round>

0000f822 <modf>:
    f822:	fa 01       	movw	r30, r20
    f824:	dc 01       	movw	r26, r24
    f826:	aa 0f       	add	r26, r26
    f828:	bb 1f       	adc	r27, r27
    f82a:	9b 01       	movw	r18, r22
    f82c:	ac 01       	movw	r20, r24
    f82e:	bf 57       	subi	r27, 0x7F	; 127
    f830:	28 f4       	brcc	.+10     	; 0xf83c <modf+0x1a>
    f832:	22 27       	eor	r18, r18
    f834:	33 27       	eor	r19, r19
    f836:	44 27       	eor	r20, r20
    f838:	50 78       	andi	r21, 0x80	; 128
    f83a:	1f c0       	rjmp	.+62     	; 0xf87a <modf+0x58>
    f83c:	b7 51       	subi	r27, 0x17	; 23
    f83e:	88 f4       	brcc	.+34     	; 0xf862 <modf+0x40>
    f840:	ab 2f       	mov	r26, r27
    f842:	00 24       	eor	r0, r0
    f844:	46 95       	lsr	r20
    f846:	37 95       	ror	r19
    f848:	27 95       	ror	r18
    f84a:	01 1c       	adc	r0, r1
    f84c:	a3 95       	inc	r26
    f84e:	d2 f3       	brmi	.-12     	; 0xf844 <modf+0x22>
    f850:	00 20       	and	r0, r0
    f852:	69 f0       	breq	.+26     	; 0xf86e <modf+0x4c>
    f854:	22 0f       	add	r18, r18
    f856:	33 1f       	adc	r19, r19
    f858:	44 1f       	adc	r20, r20
    f85a:	b3 95       	inc	r27
    f85c:	da f3       	brmi	.-10     	; 0xf854 <modf+0x32>
    f85e:	0d d0       	rcall	.+26     	; 0xf87a <modf+0x58>
    f860:	40 cc       	rjmp	.-1920   	; 0xf0e2 <__subsf3>
    f862:	61 30       	cpi	r22, 0x01	; 1
    f864:	71 05       	cpc	r23, r1
    f866:	a0 e8       	ldi	r26, 0x80	; 128
    f868:	8a 07       	cpc	r24, r26
    f86a:	b9 46       	sbci	r27, 0x69	; 105
    f86c:	30 f4       	brcc	.+12     	; 0xf87a <modf+0x58>
    f86e:	9b 01       	movw	r18, r22
    f870:	ac 01       	movw	r20, r24
    f872:	66 27       	eor	r22, r22
    f874:	77 27       	eor	r23, r23
    f876:	88 27       	eor	r24, r24
    f878:	90 78       	andi	r25, 0x80	; 128
    f87a:	30 96       	adiw	r30, 0x00	; 0
    f87c:	21 f0       	breq	.+8      	; 0xf886 <modf+0x64>
    f87e:	20 83       	st	Z, r18
    f880:	31 83       	std	Z+1, r19	; 0x01
    f882:	42 83       	std	Z+2, r20	; 0x02
    f884:	53 83       	std	Z+3, r21	; 0x03
    f886:	08 95       	ret

0000f888 <__mulsi3>:
    f888:	db 01       	movw	r26, r22
    f88a:	8f 93       	push	r24
    f88c:	9f 93       	push	r25
    f88e:	93 d0       	rcall	.+294    	; 0xf9b6 <__muluhisi3>
    f890:	bf 91       	pop	r27
    f892:	af 91       	pop	r26
    f894:	a2 9f       	mul	r26, r18
    f896:	80 0d       	add	r24, r0
    f898:	91 1d       	adc	r25, r1
    f89a:	a3 9f       	mul	r26, r19
    f89c:	90 0d       	add	r25, r0
    f89e:	b2 9f       	mul	r27, r18
    f8a0:	90 0d       	add	r25, r0
    f8a2:	11 24       	eor	r1, r1
    f8a4:	08 95       	ret

0000f8a6 <__udivmodhi4>:
    f8a6:	aa 1b       	sub	r26, r26
    f8a8:	bb 1b       	sub	r27, r27
    f8aa:	51 e1       	ldi	r21, 0x11	; 17
    f8ac:	07 c0       	rjmp	.+14     	; 0xf8bc <__udivmodhi4_ep>

0000f8ae <__udivmodhi4_loop>:
    f8ae:	aa 1f       	adc	r26, r26
    f8b0:	bb 1f       	adc	r27, r27
    f8b2:	a6 17       	cp	r26, r22
    f8b4:	b7 07       	cpc	r27, r23
    f8b6:	10 f0       	brcs	.+4      	; 0xf8bc <__udivmodhi4_ep>
    f8b8:	a6 1b       	sub	r26, r22
    f8ba:	b7 0b       	sbc	r27, r23

0000f8bc <__udivmodhi4_ep>:
    f8bc:	88 1f       	adc	r24, r24
    f8be:	99 1f       	adc	r25, r25
    f8c0:	5a 95       	dec	r21
    f8c2:	a9 f7       	brne	.-22     	; 0xf8ae <__udivmodhi4_loop>
    f8c4:	80 95       	com	r24
    f8c6:	90 95       	com	r25
    f8c8:	bc 01       	movw	r22, r24
    f8ca:	cd 01       	movw	r24, r26
    f8cc:	08 95       	ret

0000f8ce <__divmodhi4>:
    f8ce:	97 fb       	bst	r25, 7
    f8d0:	07 2e       	mov	r0, r23
    f8d2:	16 f4       	brtc	.+4      	; 0xf8d8 <__divmodhi4+0xa>
    f8d4:	00 94       	com	r0
    f8d6:	06 d0       	rcall	.+12     	; 0xf8e4 <__divmodhi4_neg1>
    f8d8:	77 fd       	sbrc	r23, 7
    f8da:	08 d0       	rcall	.+16     	; 0xf8ec <__divmodhi4_neg2>
    f8dc:	e4 df       	rcall	.-56     	; 0xf8a6 <__udivmodhi4>
    f8de:	07 fc       	sbrc	r0, 7
    f8e0:	05 d0       	rcall	.+10     	; 0xf8ec <__divmodhi4_neg2>
    f8e2:	3e f4       	brtc	.+14     	; 0xf8f2 <__divmodhi4_exit>

0000f8e4 <__divmodhi4_neg1>:
    f8e4:	90 95       	com	r25
    f8e6:	81 95       	neg	r24
    f8e8:	9f 4f       	sbci	r25, 0xFF	; 255
    f8ea:	08 95       	ret

0000f8ec <__divmodhi4_neg2>:
    f8ec:	70 95       	com	r23
    f8ee:	61 95       	neg	r22
    f8f0:	7f 4f       	sbci	r23, 0xFF	; 255

0000f8f2 <__divmodhi4_exit>:
    f8f2:	08 95       	ret

0000f8f4 <__udivmodsi4>:
    f8f4:	a1 e2       	ldi	r26, 0x21	; 33
    f8f6:	1a 2e       	mov	r1, r26
    f8f8:	aa 1b       	sub	r26, r26
    f8fa:	bb 1b       	sub	r27, r27
    f8fc:	fd 01       	movw	r30, r26
    f8fe:	0d c0       	rjmp	.+26     	; 0xf91a <__udivmodsi4_ep>

0000f900 <__udivmodsi4_loop>:
    f900:	aa 1f       	adc	r26, r26
    f902:	bb 1f       	adc	r27, r27
    f904:	ee 1f       	adc	r30, r30
    f906:	ff 1f       	adc	r31, r31
    f908:	a2 17       	cp	r26, r18
    f90a:	b3 07       	cpc	r27, r19
    f90c:	e4 07       	cpc	r30, r20
    f90e:	f5 07       	cpc	r31, r21
    f910:	20 f0       	brcs	.+8      	; 0xf91a <__udivmodsi4_ep>
    f912:	a2 1b       	sub	r26, r18
    f914:	b3 0b       	sbc	r27, r19
    f916:	e4 0b       	sbc	r30, r20
    f918:	f5 0b       	sbc	r31, r21

0000f91a <__udivmodsi4_ep>:
    f91a:	66 1f       	adc	r22, r22
    f91c:	77 1f       	adc	r23, r23
    f91e:	88 1f       	adc	r24, r24
    f920:	99 1f       	adc	r25, r25
    f922:	1a 94       	dec	r1
    f924:	69 f7       	brne	.-38     	; 0xf900 <__udivmodsi4_loop>
    f926:	60 95       	com	r22
    f928:	70 95       	com	r23
    f92a:	80 95       	com	r24
    f92c:	90 95       	com	r25
    f92e:	9b 01       	movw	r18, r22
    f930:	ac 01       	movw	r20, r24
    f932:	bd 01       	movw	r22, r26
    f934:	cf 01       	movw	r24, r30
    f936:	08 95       	ret

0000f938 <__divmodsi4>:
    f938:	05 2e       	mov	r0, r21
    f93a:	97 fb       	bst	r25, 7
    f93c:	16 f4       	brtc	.+4      	; 0xf942 <__divmodsi4+0xa>
    f93e:	00 94       	com	r0
    f940:	0f d0       	rcall	.+30     	; 0xf960 <__negsi2>
    f942:	57 fd       	sbrc	r21, 7
    f944:	05 d0       	rcall	.+10     	; 0xf950 <__divmodsi4_neg2>
    f946:	d6 df       	rcall	.-84     	; 0xf8f4 <__udivmodsi4>
    f948:	07 fc       	sbrc	r0, 7
    f94a:	02 d0       	rcall	.+4      	; 0xf950 <__divmodsi4_neg2>
    f94c:	46 f4       	brtc	.+16     	; 0xf95e <__divmodsi4_exit>
    f94e:	08 c0       	rjmp	.+16     	; 0xf960 <__negsi2>

0000f950 <__divmodsi4_neg2>:
    f950:	50 95       	com	r21
    f952:	40 95       	com	r20
    f954:	30 95       	com	r19
    f956:	21 95       	neg	r18
    f958:	3f 4f       	sbci	r19, 0xFF	; 255
    f95a:	4f 4f       	sbci	r20, 0xFF	; 255
    f95c:	5f 4f       	sbci	r21, 0xFF	; 255

0000f95e <__divmodsi4_exit>:
    f95e:	08 95       	ret

0000f960 <__negsi2>:
    f960:	90 95       	com	r25
    f962:	80 95       	com	r24
    f964:	70 95       	com	r23
    f966:	61 95       	neg	r22
    f968:	7f 4f       	sbci	r23, 0xFF	; 255
    f96a:	8f 4f       	sbci	r24, 0xFF	; 255
    f96c:	9f 4f       	sbci	r25, 0xFF	; 255
    f96e:	08 95       	ret

0000f970 <__tablejump2__>:
    f970:	ee 0f       	add	r30, r30
    f972:	ff 1f       	adc	r31, r31
    f974:	88 1f       	adc	r24, r24
    f976:	8b bf       	out	0x3b, r24	; 59
    f978:	07 90       	elpm	r0, Z+
    f97a:	f6 91       	elpm	r31, Z
    f97c:	e0 2d       	mov	r30, r0
    f97e:	19 94       	eijmp

0000f980 <__mulhisi3>:
    f980:	05 d0       	rcall	.+10     	; 0xf98c <__umulhisi3>
    f982:	33 23       	and	r19, r19
    f984:	12 f4       	brpl	.+4      	; 0xf98a <__mulhisi3+0xa>
    f986:	8a 1b       	sub	r24, r26
    f988:	9b 0b       	sbc	r25, r27
    f98a:	10 c0       	rjmp	.+32     	; 0xf9ac <__usmulhisi3_tail>

0000f98c <__umulhisi3>:
    f98c:	a2 9f       	mul	r26, r18
    f98e:	b0 01       	movw	r22, r0
    f990:	b3 9f       	mul	r27, r19
    f992:	c0 01       	movw	r24, r0
    f994:	a3 9f       	mul	r26, r19
    f996:	70 0d       	add	r23, r0
    f998:	81 1d       	adc	r24, r1
    f99a:	11 24       	eor	r1, r1
    f99c:	91 1d       	adc	r25, r1
    f99e:	b2 9f       	mul	r27, r18
    f9a0:	70 0d       	add	r23, r0
    f9a2:	81 1d       	adc	r24, r1
    f9a4:	11 24       	eor	r1, r1
    f9a6:	91 1d       	adc	r25, r1
    f9a8:	08 95       	ret

0000f9aa <__usmulhisi3>:
    f9aa:	f0 df       	rcall	.-32     	; 0xf98c <__umulhisi3>

0000f9ac <__usmulhisi3_tail>:
    f9ac:	b7 ff       	sbrs	r27, 7
    f9ae:	08 95       	ret
    f9b0:	82 1b       	sub	r24, r18
    f9b2:	93 0b       	sbc	r25, r19
    f9b4:	08 95       	ret

0000f9b6 <__muluhisi3>:
    f9b6:	ea df       	rcall	.-44     	; 0xf98c <__umulhisi3>
    f9b8:	a5 9f       	mul	r26, r21
    f9ba:	90 0d       	add	r25, r0
    f9bc:	b4 9f       	mul	r27, r20
    f9be:	90 0d       	add	r25, r0
    f9c0:	a4 9f       	mul	r26, r20
    f9c2:	80 0d       	add	r24, r0
    f9c4:	91 1d       	adc	r25, r1
    f9c6:	11 24       	eor	r1, r1
    f9c8:	08 95       	ret

0000f9ca <__muldi3>:
    f9ca:	df 93       	push	r29
    f9cc:	cf 93       	push	r28
    f9ce:	1f 93       	push	r17
    f9d0:	0f 93       	push	r16
    f9d2:	9a 9d       	mul	r25, r10
    f9d4:	f0 2d       	mov	r31, r0
    f9d6:	21 9f       	mul	r18, r17
    f9d8:	f0 0d       	add	r31, r0
    f9da:	8b 9d       	mul	r24, r11
    f9dc:	f0 0d       	add	r31, r0
    f9de:	8a 9d       	mul	r24, r10
    f9e0:	e0 2d       	mov	r30, r0
    f9e2:	f1 0d       	add	r31, r1
    f9e4:	03 9f       	mul	r16, r19
    f9e6:	f0 0d       	add	r31, r0
    f9e8:	02 9f       	mul	r16, r18
    f9ea:	e0 0d       	add	r30, r0
    f9ec:	f1 1d       	adc	r31, r1
    f9ee:	4e 9d       	mul	r20, r14
    f9f0:	e0 0d       	add	r30, r0
    f9f2:	f1 1d       	adc	r31, r1
    f9f4:	5e 9d       	mul	r21, r14
    f9f6:	f0 0d       	add	r31, r0
    f9f8:	4f 9d       	mul	r20, r15
    f9fa:	f0 0d       	add	r31, r0
    f9fc:	7f 93       	push	r23
    f9fe:	6f 93       	push	r22
    fa00:	bf 92       	push	r11
    fa02:	af 92       	push	r10
    fa04:	5f 93       	push	r21
    fa06:	4f 93       	push	r20
    fa08:	d5 01       	movw	r26, r10
    fa0a:	c0 df       	rcall	.-128    	; 0xf98c <__umulhisi3>
    fa0c:	8b 01       	movw	r16, r22
    fa0e:	ac 01       	movw	r20, r24
    fa10:	d7 01       	movw	r26, r14
    fa12:	bc df       	rcall	.-136    	; 0xf98c <__umulhisi3>
    fa14:	eb 01       	movw	r28, r22
    fa16:	e8 0f       	add	r30, r24
    fa18:	f9 1f       	adc	r31, r25
    fa1a:	d6 01       	movw	r26, r12
    fa1c:	1f d0       	rcall	.+62     	; 0xfa5c <__muldi3_6>
    fa1e:	2f 91       	pop	r18
    fa20:	3f 91       	pop	r19
    fa22:	d6 01       	movw	r26, r12
    fa24:	b3 df       	rcall	.-154    	; 0xf98c <__umulhisi3>
    fa26:	c6 0f       	add	r28, r22
    fa28:	d7 1f       	adc	r29, r23
    fa2a:	e8 1f       	adc	r30, r24
    fa2c:	f9 1f       	adc	r31, r25
    fa2e:	af 91       	pop	r26
    fa30:	bf 91       	pop	r27
    fa32:	14 d0       	rcall	.+40     	; 0xfa5c <__muldi3_6>
    fa34:	2f 91       	pop	r18
    fa36:	3f 91       	pop	r19
    fa38:	a9 df       	rcall	.-174    	; 0xf98c <__umulhisi3>
    fa3a:	c6 0f       	add	r28, r22
    fa3c:	d7 1f       	adc	r29, r23
    fa3e:	e8 1f       	adc	r30, r24
    fa40:	f9 1f       	adc	r31, r25
    fa42:	d6 01       	movw	r26, r12
    fa44:	a3 df       	rcall	.-186    	; 0xf98c <__umulhisi3>
    fa46:	e6 0f       	add	r30, r22
    fa48:	f7 1f       	adc	r31, r23
    fa4a:	98 01       	movw	r18, r16
    fa4c:	be 01       	movw	r22, r28
    fa4e:	cf 01       	movw	r24, r30
    fa50:	11 24       	eor	r1, r1
    fa52:	0f 91       	pop	r16
    fa54:	1f 91       	pop	r17
    fa56:	cf 91       	pop	r28
    fa58:	df 91       	pop	r29
    fa5a:	08 95       	ret

0000fa5c <__muldi3_6>:
    fa5c:	97 df       	rcall	.-210    	; 0xf98c <__umulhisi3>
    fa5e:	46 0f       	add	r20, r22
    fa60:	57 1f       	adc	r21, r23
    fa62:	c8 1f       	adc	r28, r24
    fa64:	d9 1f       	adc	r29, r25
    fa66:	08 f4       	brcc	.+2      	; 0xfa6a <__muldi3_6+0xe>
    fa68:	31 96       	adiw	r30, 0x01	; 1
    fa6a:	08 95       	ret

0000fa6c <__moddi3>:
    fa6c:	68 94       	set
    fa6e:	01 c0       	rjmp	.+2      	; 0xfa72 <__divdi3_moddi3>

0000fa70 <__divdi3>:
    fa70:	e8 94       	clt

0000fa72 <__divdi3_moddi3>:
    fa72:	f9 2f       	mov	r31, r25
    fa74:	f1 2b       	or	r31, r17
    fa76:	0a f0       	brmi	.+2      	; 0xfa7a <__divdi3_moddi3+0x8>
    fa78:	27 c0       	rjmp	.+78     	; 0xfac8 <__udivdi3_umoddi3>
    fa7a:	a0 e0       	ldi	r26, 0x00	; 0
    fa7c:	b0 e0       	ldi	r27, 0x00	; 0
    fa7e:	e2 e4       	ldi	r30, 0x42	; 66
    fa80:	fd e7       	ldi	r31, 0x7D	; 125
    fa82:	93 c0       	rjmp	.+294    	; 0xfbaa <__prologue_saves__+0xc>
    fa84:	09 2e       	mov	r0, r25
    fa86:	05 94       	asr	r0
    fa88:	1a f4       	brpl	.+6      	; 0xfa90 <__divdi3_moddi3+0x1e>
    fa8a:	79 d0       	rcall	.+242    	; 0xfb7e <__negdi2>
    fa8c:	11 23       	and	r17, r17
    fa8e:	92 f4       	brpl	.+36     	; 0xfab4 <__divdi3_moddi3+0x42>
    fa90:	f0 e8       	ldi	r31, 0x80	; 128
    fa92:	0f 26       	eor	r0, r31
    fa94:	ff ef       	ldi	r31, 0xFF	; 255
    fa96:	e0 94       	com	r14
    fa98:	f0 94       	com	r15
    fa9a:	00 95       	com	r16
    fa9c:	10 95       	com	r17
    fa9e:	b0 94       	com	r11
    faa0:	c0 94       	com	r12
    faa2:	d0 94       	com	r13
    faa4:	a1 94       	neg	r10
    faa6:	bf 0a       	sbc	r11, r31
    faa8:	cf 0a       	sbc	r12, r31
    faaa:	df 0a       	sbc	r13, r31
    faac:	ef 0a       	sbc	r14, r31
    faae:	ff 0a       	sbc	r15, r31
    fab0:	0f 0b       	sbc	r16, r31
    fab2:	1f 0b       	sbc	r17, r31
    fab4:	13 d0       	rcall	.+38     	; 0xfadc <__udivmod64>
    fab6:	07 fc       	sbrc	r0, 7
    fab8:	62 d0       	rcall	.+196    	; 0xfb7e <__negdi2>
    faba:	cd b7       	in	r28, 0x3d	; 61
    fabc:	de b7       	in	r29, 0x3e	; 62
    fabe:	ec e0       	ldi	r30, 0x0C	; 12
    fac0:	8d c0       	rjmp	.+282    	; 0xfbdc <__epilogue_restores__+0xc>

0000fac2 <__umoddi3>:
    fac2:	68 94       	set
    fac4:	01 c0       	rjmp	.+2      	; 0xfac8 <__udivdi3_umoddi3>

0000fac6 <__udivdi3>:
    fac6:	e8 94       	clt

0000fac8 <__udivdi3_umoddi3>:
    fac8:	8f 92       	push	r8
    faca:	9f 92       	push	r9
    facc:	cf 93       	push	r28
    face:	df 93       	push	r29
    fad0:	05 d0       	rcall	.+10     	; 0xfadc <__udivmod64>
    fad2:	df 91       	pop	r29
    fad4:	cf 91       	pop	r28
    fad6:	9f 90       	pop	r9
    fad8:	8f 90       	pop	r8
    fada:	08 95       	ret

0000fadc <__udivmod64>:
    fadc:	88 24       	eor	r8, r8
    fade:	99 24       	eor	r9, r9
    fae0:	f4 01       	movw	r30, r8
    fae2:	e4 01       	movw	r28, r8
    fae4:	b0 e4       	ldi	r27, 0x40	; 64
    fae6:	9f 93       	push	r25
    fae8:	aa 27       	eor	r26, r26
    faea:	9a 15       	cp	r25, r10
    faec:	8b 04       	cpc	r8, r11
    faee:	9c 04       	cpc	r9, r12
    faf0:	ed 05       	cpc	r30, r13
    faf2:	fe 05       	cpc	r31, r14
    faf4:	cf 05       	cpc	r28, r15
    faf6:	d0 07       	cpc	r29, r16
    faf8:	a1 07       	cpc	r26, r17
    fafa:	98 f4       	brcc	.+38     	; 0xfb22 <__udivmod64+0x46>
    fafc:	ad 2f       	mov	r26, r29
    fafe:	dc 2f       	mov	r29, r28
    fb00:	cf 2f       	mov	r28, r31
    fb02:	fe 2f       	mov	r31, r30
    fb04:	e9 2d       	mov	r30, r9
    fb06:	98 2c       	mov	r9, r8
    fb08:	89 2e       	mov	r8, r25
    fb0a:	98 2f       	mov	r25, r24
    fb0c:	87 2f       	mov	r24, r23
    fb0e:	76 2f       	mov	r23, r22
    fb10:	65 2f       	mov	r22, r21
    fb12:	54 2f       	mov	r21, r20
    fb14:	43 2f       	mov	r20, r19
    fb16:	32 2f       	mov	r19, r18
    fb18:	22 27       	eor	r18, r18
    fb1a:	b8 50       	subi	r27, 0x08	; 8
    fb1c:	31 f7       	brne	.-52     	; 0xfaea <__udivmod64+0xe>
    fb1e:	bf 91       	pop	r27
    fb20:	27 c0       	rjmp	.+78     	; 0xfb70 <__udivmod64+0x94>
    fb22:	1b 2e       	mov	r1, r27
    fb24:	bf 91       	pop	r27
    fb26:	bb 27       	eor	r27, r27
    fb28:	22 0f       	add	r18, r18
    fb2a:	33 1f       	adc	r19, r19
    fb2c:	44 1f       	adc	r20, r20
    fb2e:	55 1f       	adc	r21, r21
    fb30:	66 1f       	adc	r22, r22
    fb32:	77 1f       	adc	r23, r23
    fb34:	88 1f       	adc	r24, r24
    fb36:	99 1f       	adc	r25, r25
    fb38:	88 1c       	adc	r8, r8
    fb3a:	99 1c       	adc	r9, r9
    fb3c:	ee 1f       	adc	r30, r30
    fb3e:	ff 1f       	adc	r31, r31
    fb40:	cc 1f       	adc	r28, r28
    fb42:	dd 1f       	adc	r29, r29
    fb44:	aa 1f       	adc	r26, r26
    fb46:	bb 1f       	adc	r27, r27
    fb48:	8a 14       	cp	r8, r10
    fb4a:	9b 04       	cpc	r9, r11
    fb4c:	ec 05       	cpc	r30, r12
    fb4e:	fd 05       	cpc	r31, r13
    fb50:	ce 05       	cpc	r28, r14
    fb52:	df 05       	cpc	r29, r15
    fb54:	a0 07       	cpc	r26, r16
    fb56:	b1 07       	cpc	r27, r17
    fb58:	48 f0       	brcs	.+18     	; 0xfb6c <__udivmod64+0x90>
    fb5a:	8a 18       	sub	r8, r10
    fb5c:	9b 08       	sbc	r9, r11
    fb5e:	ec 09       	sbc	r30, r12
    fb60:	fd 09       	sbc	r31, r13
    fb62:	ce 09       	sbc	r28, r14
    fb64:	df 09       	sbc	r29, r15
    fb66:	a0 0b       	sbc	r26, r16
    fb68:	b1 0b       	sbc	r27, r17
    fb6a:	21 60       	ori	r18, 0x01	; 1
    fb6c:	1a 94       	dec	r1
    fb6e:	e1 f6       	brne	.-72     	; 0xfb28 <__udivmod64+0x4c>
    fb70:	2e f4       	brtc	.+10     	; 0xfb7c <__udivmod64+0xa0>
    fb72:	94 01       	movw	r18, r8
    fb74:	af 01       	movw	r20, r30
    fb76:	be 01       	movw	r22, r28
    fb78:	cd 01       	movw	r24, r26
    fb7a:	00 0c       	add	r0, r0
    fb7c:	08 95       	ret

0000fb7e <__negdi2>:
    fb7e:	60 95       	com	r22
    fb80:	70 95       	com	r23
    fb82:	80 95       	com	r24
    fb84:	90 95       	com	r25
    fb86:	30 95       	com	r19
    fb88:	40 95       	com	r20
    fb8a:	50 95       	com	r21
    fb8c:	21 95       	neg	r18
    fb8e:	3f 4f       	sbci	r19, 0xFF	; 255
    fb90:	4f 4f       	sbci	r20, 0xFF	; 255
    fb92:	5f 4f       	sbci	r21, 0xFF	; 255
    fb94:	6f 4f       	sbci	r22, 0xFF	; 255
    fb96:	7f 4f       	sbci	r23, 0xFF	; 255
    fb98:	8f 4f       	sbci	r24, 0xFF	; 255
    fb9a:	9f 4f       	sbci	r25, 0xFF	; 255
    fb9c:	08 95       	ret

0000fb9e <__prologue_saves__>:
    fb9e:	2f 92       	push	r2
    fba0:	3f 92       	push	r3
    fba2:	4f 92       	push	r4
    fba4:	5f 92       	push	r5
    fba6:	6f 92       	push	r6
    fba8:	7f 92       	push	r7
    fbaa:	8f 92       	push	r8
    fbac:	9f 92       	push	r9
    fbae:	af 92       	push	r10
    fbb0:	bf 92       	push	r11
    fbb2:	cf 92       	push	r12
    fbb4:	df 92       	push	r13
    fbb6:	ef 92       	push	r14
    fbb8:	ff 92       	push	r15
    fbba:	0f 93       	push	r16
    fbbc:	1f 93       	push	r17
    fbbe:	cf 93       	push	r28
    fbc0:	df 93       	push	r29
    fbc2:	cd b7       	in	r28, 0x3d	; 61
    fbc4:	de b7       	in	r29, 0x3e	; 62
    fbc6:	ca 1b       	sub	r28, r26
    fbc8:	db 0b       	sbc	r29, r27
    fbca:	cd bf       	out	0x3d, r28	; 61
    fbcc:	de bf       	out	0x3e, r29	; 62
    fbce:	19 94       	eijmp

0000fbd0 <__epilogue_restores__>:
    fbd0:	2a 88       	ldd	r2, Y+18	; 0x12
    fbd2:	39 88       	ldd	r3, Y+17	; 0x11
    fbd4:	48 88       	ldd	r4, Y+16	; 0x10
    fbd6:	5f 84       	ldd	r5, Y+15	; 0x0f
    fbd8:	6e 84       	ldd	r6, Y+14	; 0x0e
    fbda:	7d 84       	ldd	r7, Y+13	; 0x0d
    fbdc:	8c 84       	ldd	r8, Y+12	; 0x0c
    fbde:	9b 84       	ldd	r9, Y+11	; 0x0b
    fbe0:	aa 84       	ldd	r10, Y+10	; 0x0a
    fbe2:	b9 84       	ldd	r11, Y+9	; 0x09
    fbe4:	c8 84       	ldd	r12, Y+8	; 0x08
    fbe6:	df 80       	ldd	r13, Y+7	; 0x07
    fbe8:	ee 80       	ldd	r14, Y+6	; 0x06
    fbea:	fd 80       	ldd	r15, Y+5	; 0x05
    fbec:	0c 81       	ldd	r16, Y+4	; 0x04
    fbee:	1b 81       	ldd	r17, Y+3	; 0x03
    fbf0:	aa 81       	ldd	r26, Y+2	; 0x02
    fbf2:	b9 81       	ldd	r27, Y+1	; 0x01
    fbf4:	ce 0f       	add	r28, r30
    fbf6:	d1 1d       	adc	r29, r1
    fbf8:	cd bf       	out	0x3d, r28	; 61
    fbfa:	de bf       	out	0x3e, r29	; 62
    fbfc:	ed 01       	movw	r28, r26
    fbfe:	08 95       	ret

0000fc00 <__ashldi3>:
    fc00:	0f 93       	push	r16
    fc02:	08 30       	cpi	r16, 0x08	; 8
    fc04:	90 f0       	brcs	.+36     	; 0xfc2a <__ashldi3+0x2a>
    fc06:	98 2f       	mov	r25, r24
    fc08:	87 2f       	mov	r24, r23
    fc0a:	76 2f       	mov	r23, r22
    fc0c:	65 2f       	mov	r22, r21
    fc0e:	54 2f       	mov	r21, r20
    fc10:	43 2f       	mov	r20, r19
    fc12:	32 2f       	mov	r19, r18
    fc14:	22 27       	eor	r18, r18
    fc16:	08 50       	subi	r16, 0x08	; 8
    fc18:	f4 cf       	rjmp	.-24     	; 0xfc02 <__ashldi3+0x2>
    fc1a:	22 0f       	add	r18, r18
    fc1c:	33 1f       	adc	r19, r19
    fc1e:	44 1f       	adc	r20, r20
    fc20:	55 1f       	adc	r21, r21
    fc22:	66 1f       	adc	r22, r22
    fc24:	77 1f       	adc	r23, r23
    fc26:	88 1f       	adc	r24, r24
    fc28:	99 1f       	adc	r25, r25
    fc2a:	0a 95       	dec	r16
    fc2c:	b2 f7       	brpl	.-20     	; 0xfc1a <__ashldi3+0x1a>
    fc2e:	0f 91       	pop	r16
    fc30:	08 95       	ret

0000fc32 <__ashrdi3>:
    fc32:	97 fb       	bst	r25, 7
    fc34:	10 f8       	bld	r1, 0

0000fc36 <__lshrdi3>:
    fc36:	16 94       	lsr	r1
    fc38:	00 08       	sbc	r0, r0
    fc3a:	0f 93       	push	r16
    fc3c:	08 30       	cpi	r16, 0x08	; 8
    fc3e:	98 f0       	brcs	.+38     	; 0xfc66 <__lshrdi3+0x30>
    fc40:	08 50       	subi	r16, 0x08	; 8
    fc42:	23 2f       	mov	r18, r19
    fc44:	34 2f       	mov	r19, r20
    fc46:	45 2f       	mov	r20, r21
    fc48:	56 2f       	mov	r21, r22
    fc4a:	67 2f       	mov	r22, r23
    fc4c:	78 2f       	mov	r23, r24
    fc4e:	89 2f       	mov	r24, r25
    fc50:	90 2d       	mov	r25, r0
    fc52:	f4 cf       	rjmp	.-24     	; 0xfc3c <__lshrdi3+0x6>
    fc54:	05 94       	asr	r0
    fc56:	97 95       	ror	r25
    fc58:	87 95       	ror	r24
    fc5a:	77 95       	ror	r23
    fc5c:	67 95       	ror	r22
    fc5e:	57 95       	ror	r21
    fc60:	47 95       	ror	r20
    fc62:	37 95       	ror	r19
    fc64:	27 95       	ror	r18
    fc66:	0a 95       	dec	r16
    fc68:	aa f7       	brpl	.-22     	; 0xfc54 <__lshrdi3+0x1e>
    fc6a:	0f 91       	pop	r16
    fc6c:	08 95       	ret

0000fc6e <__adddi3>:
    fc6e:	2a 0d       	add	r18, r10
    fc70:	3b 1d       	adc	r19, r11
    fc72:	4c 1d       	adc	r20, r12
    fc74:	5d 1d       	adc	r21, r13
    fc76:	6e 1d       	adc	r22, r14
    fc78:	7f 1d       	adc	r23, r15
    fc7a:	80 1f       	adc	r24, r16
    fc7c:	91 1f       	adc	r25, r17
    fc7e:	08 95       	ret

0000fc80 <__adddi3_s8>:
    fc80:	00 24       	eor	r0, r0
    fc82:	a7 fd       	sbrc	r26, 7
    fc84:	00 94       	com	r0
    fc86:	2a 0f       	add	r18, r26
    fc88:	30 1d       	adc	r19, r0
    fc8a:	40 1d       	adc	r20, r0
    fc8c:	50 1d       	adc	r21, r0
    fc8e:	60 1d       	adc	r22, r0
    fc90:	70 1d       	adc	r23, r0
    fc92:	80 1d       	adc	r24, r0
    fc94:	90 1d       	adc	r25, r0
    fc96:	08 95       	ret

0000fc98 <__subdi3>:
    fc98:	2a 19       	sub	r18, r10
    fc9a:	3b 09       	sbc	r19, r11
    fc9c:	4c 09       	sbc	r20, r12
    fc9e:	5d 09       	sbc	r21, r13
    fca0:	6e 09       	sbc	r22, r14
    fca2:	7f 09       	sbc	r23, r15
    fca4:	80 0b       	sbc	r24, r16
    fca6:	91 0b       	sbc	r25, r17
    fca8:	08 95       	ret

0000fcaa <atof>:
    fcaa:	66 27       	eor	r22, r22
    fcac:	77 27       	eor	r23, r23
    fcae:	2e c4       	rjmp	.+2140   	; 0x1050c <strtod>

0000fcb0 <atoi>:
    fcb0:	fc 01       	movw	r30, r24
    fcb2:	88 27       	eor	r24, r24
    fcb4:	99 27       	eor	r25, r25
    fcb6:	e8 94       	clt
    fcb8:	21 91       	ld	r18, Z+
    fcba:	20 32       	cpi	r18, 0x20	; 32
    fcbc:	e9 f3       	breq	.-6      	; 0xfcb8 <atoi+0x8>
    fcbe:	29 30       	cpi	r18, 0x09	; 9
    fcc0:	10 f0       	brcs	.+4      	; 0xfcc6 <atoi+0x16>
    fcc2:	2e 30       	cpi	r18, 0x0E	; 14
    fcc4:	c8 f3       	brcs	.-14     	; 0xfcb8 <atoi+0x8>
    fcc6:	2b 32       	cpi	r18, 0x2B	; 43
    fcc8:	39 f0       	breq	.+14     	; 0xfcd8 <atoi+0x28>
    fcca:	2d 32       	cpi	r18, 0x2D	; 45
    fccc:	31 f4       	brne	.+12     	; 0xfcda <atoi+0x2a>
    fcce:	68 94       	set
    fcd0:	03 c0       	rjmp	.+6      	; 0xfcd8 <atoi+0x28>
    fcd2:	95 d1       	rcall	.+810    	; 0xfffe <__mulhi_const_10>
    fcd4:	82 0f       	add	r24, r18
    fcd6:	91 1d       	adc	r25, r1
    fcd8:	21 91       	ld	r18, Z+
    fcda:	20 53       	subi	r18, 0x30	; 48
    fcdc:	2a 30       	cpi	r18, 0x0A	; 10
    fcde:	c8 f3       	brcs	.-14     	; 0xfcd2 <atoi+0x22>
    fce0:	1e f4       	brtc	.+6      	; 0xfce8 <atoi+0x38>
    fce2:	90 95       	com	r25
    fce4:	81 95       	neg	r24
    fce6:	9f 4f       	sbci	r25, 0xFF	; 255
    fce8:	08 95       	ret

0000fcea <atol>:
    fcea:	1f 93       	push	r17
    fcec:	fc 01       	movw	r30, r24
    fcee:	99 27       	eor	r25, r25
    fcf0:	88 27       	eor	r24, r24
    fcf2:	bc 01       	movw	r22, r24
    fcf4:	e8 94       	clt
    fcf6:	11 91       	ld	r17, Z+
    fcf8:	10 32       	cpi	r17, 0x20	; 32
    fcfa:	e9 f3       	breq	.-6      	; 0xfcf6 <atol+0xc>
    fcfc:	19 30       	cpi	r17, 0x09	; 9
    fcfe:	10 f0       	brcs	.+4      	; 0xfd04 <atol+0x1a>
    fd00:	1e 30       	cpi	r17, 0x0E	; 14
    fd02:	c8 f3       	brcs	.-14     	; 0xfcf6 <atol+0xc>
    fd04:	1b 32       	cpi	r17, 0x2B	; 43
    fd06:	49 f0       	breq	.+18     	; 0xfd1a <atol+0x30>
    fd08:	1d 32       	cpi	r17, 0x2D	; 45
    fd0a:	41 f4       	brne	.+16     	; 0xfd1c <atol+0x32>
    fd0c:	68 94       	set
    fd0e:	05 c0       	rjmp	.+10     	; 0xfd1a <atol+0x30>
    fd10:	61 d1       	rcall	.+706    	; 0xffd4 <__mulsi_const_10>
    fd12:	61 0f       	add	r22, r17
    fd14:	71 1d       	adc	r23, r1
    fd16:	81 1d       	adc	r24, r1
    fd18:	91 1d       	adc	r25, r1
    fd1a:	11 91       	ld	r17, Z+
    fd1c:	10 53       	subi	r17, 0x30	; 48
    fd1e:	1a 30       	cpi	r17, 0x0A	; 10
    fd20:	b8 f3       	brcs	.-18     	; 0xfd10 <atol+0x26>
    fd22:	3e f4       	brtc	.+14     	; 0xfd32 <atol+0x48>
    fd24:	90 95       	com	r25
    fd26:	80 95       	com	r24
    fd28:	70 95       	com	r23
    fd2a:	61 95       	neg	r22
    fd2c:	7f 4f       	sbci	r23, 0xFF	; 255
    fd2e:	8f 4f       	sbci	r24, 0xFF	; 255
    fd30:	9f 4f       	sbci	r25, 0xFF	; 255
    fd32:	1f 91       	pop	r17
    fd34:	08 95       	ret

0000fd36 <__ftoa_engine>:
    fd36:	28 30       	cpi	r18, 0x08	; 8
    fd38:	08 f0       	brcs	.+2      	; 0xfd3c <__ftoa_engine+0x6>
    fd3a:	27 e0       	ldi	r18, 0x07	; 7
    fd3c:	33 27       	eor	r19, r19
    fd3e:	da 01       	movw	r26, r20
    fd40:	99 0f       	add	r25, r25
    fd42:	31 1d       	adc	r19, r1
    fd44:	87 fd       	sbrc	r24, 7
    fd46:	91 60       	ori	r25, 0x01	; 1
    fd48:	00 96       	adiw	r24, 0x00	; 0
    fd4a:	61 05       	cpc	r22, r1
    fd4c:	71 05       	cpc	r23, r1
    fd4e:	39 f4       	brne	.+14     	; 0xfd5e <__ftoa_engine+0x28>
    fd50:	32 60       	ori	r19, 0x02	; 2
    fd52:	2e 5f       	subi	r18, 0xFE	; 254
    fd54:	3d 93       	st	X+, r19
    fd56:	30 e3       	ldi	r19, 0x30	; 48
    fd58:	2a 95       	dec	r18
    fd5a:	e1 f7       	brne	.-8      	; 0xfd54 <__ftoa_engine+0x1e>
    fd5c:	08 95       	ret
    fd5e:	9f 3f       	cpi	r25, 0xFF	; 255
    fd60:	30 f0       	brcs	.+12     	; 0xfd6e <__ftoa_engine+0x38>
    fd62:	80 38       	cpi	r24, 0x80	; 128
    fd64:	71 05       	cpc	r23, r1
    fd66:	61 05       	cpc	r22, r1
    fd68:	09 f0       	breq	.+2      	; 0xfd6c <__ftoa_engine+0x36>
    fd6a:	3c 5f       	subi	r19, 0xFC	; 252
    fd6c:	3c 5f       	subi	r19, 0xFC	; 252
    fd6e:	3d 93       	st	X+, r19
    fd70:	91 30       	cpi	r25, 0x01	; 1
    fd72:	08 f0       	brcs	.+2      	; 0xfd76 <__ftoa_engine+0x40>
    fd74:	80 68       	ori	r24, 0x80	; 128
    fd76:	91 1d       	adc	r25, r1
    fd78:	df 93       	push	r29
    fd7a:	cf 93       	push	r28
    fd7c:	1f 93       	push	r17
    fd7e:	0f 93       	push	r16
    fd80:	ff 92       	push	r15
    fd82:	ef 92       	push	r14
    fd84:	19 2f       	mov	r17, r25
    fd86:	98 7f       	andi	r25, 0xF8	; 248
    fd88:	96 95       	lsr	r25
    fd8a:	e9 2f       	mov	r30, r25
    fd8c:	96 95       	lsr	r25
    fd8e:	96 95       	lsr	r25
    fd90:	e9 0f       	add	r30, r25
    fd92:	ff 27       	eor	r31, r31
    fd94:	e6 5e       	subi	r30, 0xE6	; 230
    fd96:	fc 4f       	sbci	r31, 0xFC	; 252
    fd98:	99 27       	eor	r25, r25
    fd9a:	33 27       	eor	r19, r19
    fd9c:	ee 24       	eor	r14, r14
    fd9e:	ff 24       	eor	r15, r15
    fda0:	a7 01       	movw	r20, r14
    fda2:	e7 01       	movw	r28, r14
    fda4:	05 90       	lpm	r0, Z+
    fda6:	08 94       	sec
    fda8:	07 94       	ror	r0
    fdaa:	28 f4       	brcc	.+10     	; 0xfdb6 <__ftoa_engine+0x80>
    fdac:	36 0f       	add	r19, r22
    fdae:	e7 1e       	adc	r14, r23
    fdb0:	f8 1e       	adc	r15, r24
    fdb2:	49 1f       	adc	r20, r25
    fdb4:	51 1d       	adc	r21, r1
    fdb6:	66 0f       	add	r22, r22
    fdb8:	77 1f       	adc	r23, r23
    fdba:	88 1f       	adc	r24, r24
    fdbc:	99 1f       	adc	r25, r25
    fdbe:	06 94       	lsr	r0
    fdc0:	a1 f7       	brne	.-24     	; 0xfdaa <__ftoa_engine+0x74>
    fdc2:	05 90       	lpm	r0, Z+
    fdc4:	07 94       	ror	r0
    fdc6:	28 f4       	brcc	.+10     	; 0xfdd2 <__ftoa_engine+0x9c>
    fdc8:	e7 0e       	add	r14, r23
    fdca:	f8 1e       	adc	r15, r24
    fdcc:	49 1f       	adc	r20, r25
    fdce:	56 1f       	adc	r21, r22
    fdd0:	c1 1d       	adc	r28, r1
    fdd2:	77 0f       	add	r23, r23
    fdd4:	88 1f       	adc	r24, r24
    fdd6:	99 1f       	adc	r25, r25
    fdd8:	66 1f       	adc	r22, r22
    fdda:	06 94       	lsr	r0
    fddc:	a1 f7       	brne	.-24     	; 0xfdc6 <__ftoa_engine+0x90>
    fdde:	05 90       	lpm	r0, Z+
    fde0:	07 94       	ror	r0
    fde2:	28 f4       	brcc	.+10     	; 0xfdee <__ftoa_engine+0xb8>
    fde4:	f8 0e       	add	r15, r24
    fde6:	49 1f       	adc	r20, r25
    fde8:	56 1f       	adc	r21, r22
    fdea:	c7 1f       	adc	r28, r23
    fdec:	d1 1d       	adc	r29, r1
    fdee:	88 0f       	add	r24, r24
    fdf0:	99 1f       	adc	r25, r25
    fdf2:	66 1f       	adc	r22, r22
    fdf4:	77 1f       	adc	r23, r23
    fdf6:	06 94       	lsr	r0
    fdf8:	a1 f7       	brne	.-24     	; 0xfde2 <__ftoa_engine+0xac>
    fdfa:	05 90       	lpm	r0, Z+
    fdfc:	07 94       	ror	r0
    fdfe:	20 f4       	brcc	.+8      	; 0xfe08 <__ftoa_engine+0xd2>
    fe00:	49 0f       	add	r20, r25
    fe02:	56 1f       	adc	r21, r22
    fe04:	c7 1f       	adc	r28, r23
    fe06:	d8 1f       	adc	r29, r24
    fe08:	99 0f       	add	r25, r25
    fe0a:	66 1f       	adc	r22, r22
    fe0c:	77 1f       	adc	r23, r23
    fe0e:	88 1f       	adc	r24, r24
    fe10:	06 94       	lsr	r0
    fe12:	a9 f7       	brne	.-22     	; 0xfdfe <__ftoa_engine+0xc8>
    fe14:	84 91       	lpm	r24, Z
    fe16:	10 95       	com	r17
    fe18:	17 70       	andi	r17, 0x07	; 7
    fe1a:	41 f0       	breq	.+16     	; 0xfe2c <__ftoa_engine+0xf6>
    fe1c:	d6 95       	lsr	r29
    fe1e:	c7 95       	ror	r28
    fe20:	57 95       	ror	r21
    fe22:	47 95       	ror	r20
    fe24:	f7 94       	ror	r15
    fe26:	e7 94       	ror	r14
    fe28:	1a 95       	dec	r17
    fe2a:	c1 f7       	brne	.-16     	; 0xfe1c <__ftoa_engine+0xe6>
    fe2c:	e0 ec       	ldi	r30, 0xC0	; 192
    fe2e:	f2 e0       	ldi	r31, 0x02	; 2
    fe30:	68 94       	set
    fe32:	15 90       	lpm	r1, Z+
    fe34:	15 91       	lpm	r17, Z+
    fe36:	35 91       	lpm	r19, Z+
    fe38:	65 91       	lpm	r22, Z+
    fe3a:	95 91       	lpm	r25, Z+
    fe3c:	05 90       	lpm	r0, Z+
    fe3e:	7f e2       	ldi	r23, 0x2F	; 47
    fe40:	73 95       	inc	r23
    fe42:	e1 18       	sub	r14, r1
    fe44:	f1 0a       	sbc	r15, r17
    fe46:	43 0b       	sbc	r20, r19
    fe48:	56 0b       	sbc	r21, r22
    fe4a:	c9 0b       	sbc	r28, r25
    fe4c:	d0 09       	sbc	r29, r0
    fe4e:	c0 f7       	brcc	.-16     	; 0xfe40 <__ftoa_engine+0x10a>
    fe50:	e1 0c       	add	r14, r1
    fe52:	f1 1e       	adc	r15, r17
    fe54:	43 1f       	adc	r20, r19
    fe56:	56 1f       	adc	r21, r22
    fe58:	c9 1f       	adc	r28, r25
    fe5a:	d0 1d       	adc	r29, r0
    fe5c:	7e f4       	brtc	.+30     	; 0xfe7c <__ftoa_engine+0x146>
    fe5e:	70 33       	cpi	r23, 0x30	; 48
    fe60:	11 f4       	brne	.+4      	; 0xfe66 <__ftoa_engine+0x130>
    fe62:	8a 95       	dec	r24
    fe64:	e6 cf       	rjmp	.-52     	; 0xfe32 <__ftoa_engine+0xfc>
    fe66:	e8 94       	clt
    fe68:	01 50       	subi	r16, 0x01	; 1
    fe6a:	30 f0       	brcs	.+12     	; 0xfe78 <__ftoa_engine+0x142>
    fe6c:	08 0f       	add	r16, r24
    fe6e:	0a f4       	brpl	.+2      	; 0xfe72 <__ftoa_engine+0x13c>
    fe70:	00 27       	eor	r16, r16
    fe72:	02 17       	cp	r16, r18
    fe74:	08 f4       	brcc	.+2      	; 0xfe78 <__ftoa_engine+0x142>
    fe76:	20 2f       	mov	r18, r16
    fe78:	23 95       	inc	r18
    fe7a:	02 2f       	mov	r16, r18
    fe7c:	7a 33       	cpi	r23, 0x3A	; 58
    fe7e:	28 f0       	brcs	.+10     	; 0xfe8a <__ftoa_engine+0x154>
    fe80:	79 e3       	ldi	r23, 0x39	; 57
    fe82:	7d 93       	st	X+, r23
    fe84:	2a 95       	dec	r18
    fe86:	e9 f7       	brne	.-6      	; 0xfe82 <__ftoa_engine+0x14c>
    fe88:	10 c0       	rjmp	.+32     	; 0xfeaa <__ftoa_engine+0x174>
    fe8a:	7d 93       	st	X+, r23
    fe8c:	2a 95       	dec	r18
    fe8e:	89 f6       	brne	.-94     	; 0xfe32 <__ftoa_engine+0xfc>
    fe90:	06 94       	lsr	r0
    fe92:	97 95       	ror	r25
    fe94:	67 95       	ror	r22
    fe96:	37 95       	ror	r19
    fe98:	17 95       	ror	r17
    fe9a:	17 94       	ror	r1
    fe9c:	e1 18       	sub	r14, r1
    fe9e:	f1 0a       	sbc	r15, r17
    fea0:	43 0b       	sbc	r20, r19
    fea2:	56 0b       	sbc	r21, r22
    fea4:	c9 0b       	sbc	r28, r25
    fea6:	d0 09       	sbc	r29, r0
    fea8:	98 f0       	brcs	.+38     	; 0xfed0 <__ftoa_engine+0x19a>
    feaa:	23 95       	inc	r18
    feac:	7e 91       	ld	r23, -X
    feae:	73 95       	inc	r23
    feb0:	7a 33       	cpi	r23, 0x3A	; 58
    feb2:	08 f0       	brcs	.+2      	; 0xfeb6 <__ftoa_engine+0x180>
    feb4:	70 e3       	ldi	r23, 0x30	; 48
    feb6:	7c 93       	st	X, r23
    feb8:	20 13       	cpse	r18, r16
    feba:	b8 f7       	brcc	.-18     	; 0xfeaa <__ftoa_engine+0x174>
    febc:	7e 91       	ld	r23, -X
    febe:	70 61       	ori	r23, 0x10	; 16
    fec0:	7d 93       	st	X+, r23
    fec2:	30 f0       	brcs	.+12     	; 0xfed0 <__ftoa_engine+0x19a>
    fec4:	83 95       	inc	r24
    fec6:	71 e3       	ldi	r23, 0x31	; 49
    fec8:	7d 93       	st	X+, r23
    feca:	70 e3       	ldi	r23, 0x30	; 48
    fecc:	2a 95       	dec	r18
    fece:	e1 f7       	brne	.-8      	; 0xfec8 <__ftoa_engine+0x192>
    fed0:	11 24       	eor	r1, r1
    fed2:	ef 90       	pop	r14
    fed4:	ff 90       	pop	r15
    fed6:	0f 91       	pop	r16
    fed8:	1f 91       	pop	r17
    feda:	cf 91       	pop	r28
    fedc:	df 91       	pop	r29
    fede:	99 27       	eor	r25, r25
    fee0:	87 fd       	sbrc	r24, 7
    fee2:	90 95       	com	r25
    fee4:	08 95       	ret

0000fee6 <strncasecmp_P>:
    fee6:	fb 01       	movw	r30, r22
    fee8:	dc 01       	movw	r26, r24
    feea:	41 50       	subi	r20, 0x01	; 1
    feec:	50 40       	sbci	r21, 0x00	; 0
    feee:	88 f0       	brcs	.+34     	; 0xff12 <strncasecmp_P+0x2c>
    fef0:	8d 91       	ld	r24, X+
    fef2:	81 34       	cpi	r24, 0x41	; 65
    fef4:	1c f0       	brlt	.+6      	; 0xfefc <strncasecmp_P+0x16>
    fef6:	8b 35       	cpi	r24, 0x5B	; 91
    fef8:	0c f4       	brge	.+2      	; 0xfefc <strncasecmp_P+0x16>
    fefa:	80 5e       	subi	r24, 0xE0	; 224
    fefc:	65 91       	lpm	r22, Z+
    fefe:	61 34       	cpi	r22, 0x41	; 65
    ff00:	1c f0       	brlt	.+6      	; 0xff08 <strncasecmp_P+0x22>
    ff02:	6b 35       	cpi	r22, 0x5B	; 91
    ff04:	0c f4       	brge	.+2      	; 0xff08 <strncasecmp_P+0x22>
    ff06:	60 5e       	subi	r22, 0xE0	; 224
    ff08:	86 1b       	sub	r24, r22
    ff0a:	61 11       	cpse	r22, r1
    ff0c:	71 f3       	breq	.-36     	; 0xfeea <strncasecmp_P+0x4>
    ff0e:	99 0b       	sbc	r25, r25
    ff10:	08 95       	ret
    ff12:	88 1b       	sub	r24, r24
    ff14:	fc cf       	rjmp	.-8      	; 0xff0e <strncasecmp_P+0x28>

0000ff16 <strncmp_P>:
    ff16:	fb 01       	movw	r30, r22
    ff18:	dc 01       	movw	r26, r24
    ff1a:	41 50       	subi	r20, 0x01	; 1
    ff1c:	50 40       	sbci	r21, 0x00	; 0
    ff1e:	30 f0       	brcs	.+12     	; 0xff2c <strncmp_P+0x16>
    ff20:	8d 91       	ld	r24, X+
    ff22:	05 90       	lpm	r0, Z+
    ff24:	80 19       	sub	r24, r0
    ff26:	19 f4       	brne	.+6      	; 0xff2e <strncmp_P+0x18>
    ff28:	00 20       	and	r0, r0
    ff2a:	b9 f7       	brne	.-18     	; 0xff1a <strncmp_P+0x4>
    ff2c:	88 1b       	sub	r24, r24
    ff2e:	99 0b       	sbc	r25, r25
    ff30:	08 95       	ret

0000ff32 <strnlen_P>:
    ff32:	fc 01       	movw	r30, r24
    ff34:	05 90       	lpm	r0, Z+
    ff36:	61 50       	subi	r22, 0x01	; 1
    ff38:	70 40       	sbci	r23, 0x00	; 0
    ff3a:	01 10       	cpse	r0, r1
    ff3c:	d8 f7       	brcc	.-10     	; 0xff34 <strnlen_P+0x2>
    ff3e:	80 95       	com	r24
    ff40:	90 95       	com	r25
    ff42:	8e 0f       	add	r24, r30
    ff44:	9f 1f       	adc	r25, r31
    ff46:	08 95       	ret

0000ff48 <strstr_P>:
    ff48:	fb 01       	movw	r30, r22
    ff4a:	55 91       	lpm	r21, Z+
    ff4c:	55 23       	and	r21, r21
    ff4e:	a9 f0       	breq	.+42     	; 0xff7a <strstr_P+0x32>
    ff50:	bf 01       	movw	r22, r30
    ff52:	dc 01       	movw	r26, r24
    ff54:	4d 91       	ld	r20, X+
    ff56:	45 17       	cp	r20, r21
    ff58:	41 11       	cpse	r20, r1
    ff5a:	e1 f7       	brne	.-8      	; 0xff54 <strstr_P+0xc>
    ff5c:	59 f4       	brne	.+22     	; 0xff74 <strstr_P+0x2c>
    ff5e:	cd 01       	movw	r24, r26
    ff60:	05 90       	lpm	r0, Z+
    ff62:	00 20       	and	r0, r0
    ff64:	49 f0       	breq	.+18     	; 0xff78 <strstr_P+0x30>
    ff66:	4d 91       	ld	r20, X+
    ff68:	40 15       	cp	r20, r0
    ff6a:	41 11       	cpse	r20, r1
    ff6c:	c9 f3       	breq	.-14     	; 0xff60 <strstr_P+0x18>
    ff6e:	fb 01       	movw	r30, r22
    ff70:	41 11       	cpse	r20, r1
    ff72:	ef cf       	rjmp	.-34     	; 0xff52 <strstr_P+0xa>
    ff74:	81 e0       	ldi	r24, 0x01	; 1
    ff76:	90 e0       	ldi	r25, 0x00	; 0
    ff78:	01 97       	sbiw	r24, 0x01	; 1
    ff7a:	08 95       	ret

0000ff7c <memchr>:
    ff7c:	fc 01       	movw	r30, r24
    ff7e:	41 50       	subi	r20, 0x01	; 1
    ff80:	50 40       	sbci	r21, 0x00	; 0
    ff82:	30 f0       	brcs	.+12     	; 0xff90 <memchr+0x14>
    ff84:	01 90       	ld	r0, Z+
    ff86:	06 16       	cp	r0, r22
    ff88:	d1 f7       	brne	.-12     	; 0xff7e <memchr+0x2>
    ff8a:	31 97       	sbiw	r30, 0x01	; 1
    ff8c:	cf 01       	movw	r24, r30
    ff8e:	08 95       	ret
    ff90:	88 27       	eor	r24, r24
    ff92:	99 27       	eor	r25, r25
    ff94:	08 95       	ret

0000ff96 <memcpy>:
    ff96:	fb 01       	movw	r30, r22
    ff98:	dc 01       	movw	r26, r24
    ff9a:	02 c0       	rjmp	.+4      	; 0xffa0 <__DATA_REGION_LENGTH__>
    ff9c:	01 90       	ld	r0, Z+
    ff9e:	0d 92       	st	X+, r0
    ffa0:	41 50       	subi	r20, 0x01	; 1
    ffa2:	50 40       	sbci	r21, 0x00	; 0
    ffa4:	d8 f7       	brcc	.-10     	; 0xff9c <memcpy+0x6>
    ffa6:	08 95       	ret

0000ffa8 <strchr>:
    ffa8:	fc 01       	movw	r30, r24
    ffaa:	81 91       	ld	r24, Z+
    ffac:	86 17       	cp	r24, r22
    ffae:	21 f0       	breq	.+8      	; 0xffb8 <strchr+0x10>
    ffb0:	88 23       	and	r24, r24
    ffb2:	d9 f7       	brne	.-10     	; 0xffaa <strchr+0x2>
    ffb4:	99 27       	eor	r25, r25
    ffb6:	08 95       	ret
    ffb8:	31 97       	sbiw	r30, 0x01	; 1
    ffba:	cf 01       	movw	r24, r30
    ffbc:	08 95       	ret

0000ffbe <strnlen>:
    ffbe:	fc 01       	movw	r30, r24
    ffc0:	61 50       	subi	r22, 0x01	; 1
    ffc2:	70 40       	sbci	r23, 0x00	; 0
    ffc4:	01 90       	ld	r0, Z+
    ffc6:	01 10       	cpse	r0, r1
    ffc8:	d8 f7       	brcc	.-10     	; 0xffc0 <strnlen+0x2>
    ffca:	80 95       	com	r24
    ffcc:	90 95       	com	r25
    ffce:	8e 0f       	add	r24, r30
    ffd0:	9f 1f       	adc	r25, r31
    ffd2:	08 95       	ret

0000ffd4 <__mulsi_const_10>:
    ffd4:	59 2f       	mov	r21, r25
    ffd6:	48 2f       	mov	r20, r24
    ffd8:	37 2f       	mov	r19, r23
    ffda:	26 2f       	mov	r18, r22
    ffdc:	66 0f       	add	r22, r22
    ffde:	77 1f       	adc	r23, r23
    ffe0:	88 1f       	adc	r24, r24
    ffe2:	99 1f       	adc	r25, r25
    ffe4:	66 0f       	add	r22, r22
    ffe6:	77 1f       	adc	r23, r23
    ffe8:	88 1f       	adc	r24, r24
    ffea:	99 1f       	adc	r25, r25
    ffec:	62 0f       	add	r22, r18
    ffee:	73 1f       	adc	r23, r19
    fff0:	84 1f       	adc	r24, r20
    fff2:	95 1f       	adc	r25, r21
    fff4:	66 0f       	add	r22, r22
    fff6:	77 1f       	adc	r23, r23
    fff8:	88 1f       	adc	r24, r24
    fffa:	99 1f       	adc	r25, r25
    fffc:	08 95       	ret

0000fffe <__mulhi_const_10>:
    fffe:	7a e0       	ldi	r23, 0x0A	; 10
   10000:	97 9f       	mul	r25, r23
   10002:	90 2d       	mov	r25, r0
   10004:	87 9f       	mul	r24, r23
   10006:	80 2d       	mov	r24, r0
   10008:	91 0d       	add	r25, r1
   1000a:	11 24       	eor	r1, r1
   1000c:	08 95       	ret

0001000e <fdevopen>:
   1000e:	0f 93       	push	r16
   10010:	1f 93       	push	r17
   10012:	cf 93       	push	r28
   10014:	df 93       	push	r29
   10016:	00 97       	sbiw	r24, 0x00	; 0
   10018:	31 f4       	brne	.+12     	; 0x10026 <fdevopen+0x18>
   1001a:	61 15       	cp	r22, r1
   1001c:	71 05       	cpc	r23, r1
   1001e:	19 f4       	brne	.+6      	; 0x10026 <fdevopen+0x18>
   10020:	80 e0       	ldi	r24, 0x00	; 0
   10022:	90 e0       	ldi	r25, 0x00	; 0
   10024:	39 c0       	rjmp	.+114    	; 0x10098 <fdevopen+0x8a>
   10026:	8b 01       	movw	r16, r22
   10028:	ec 01       	movw	r28, r24
   1002a:	6e e0       	ldi	r22, 0x0E	; 14
   1002c:	70 e0       	ldi	r23, 0x00	; 0
   1002e:	81 e0       	ldi	r24, 0x01	; 1
   10030:	90 e0       	ldi	r25, 0x00	; 0
   10032:	31 d1       	rcall	.+610    	; 0x10296 <calloc>
   10034:	fc 01       	movw	r30, r24
   10036:	89 2b       	or	r24, r25
   10038:	99 f3       	breq	.-26     	; 0x10020 <fdevopen+0x12>
   1003a:	80 e8       	ldi	r24, 0x80	; 128
   1003c:	83 83       	std	Z+3, r24	; 0x03
   1003e:	01 15       	cp	r16, r1
   10040:	11 05       	cpc	r17, r1
   10042:	71 f0       	breq	.+28     	; 0x10060 <fdevopen+0x52>
   10044:	02 87       	std	Z+10, r16	; 0x0a
   10046:	13 87       	std	Z+11, r17	; 0x0b
   10048:	81 e8       	ldi	r24, 0x81	; 129
   1004a:	83 83       	std	Z+3, r24	; 0x03
   1004c:	80 91 73 2e 	lds	r24, 0x2E73	; 0x802e73 <__iob>
   10050:	90 91 74 2e 	lds	r25, 0x2E74	; 0x802e74 <__iob+0x1>
   10054:	89 2b       	or	r24, r25
   10056:	21 f4       	brne	.+8      	; 0x10060 <fdevopen+0x52>
   10058:	e0 93 73 2e 	sts	0x2E73, r30	; 0x802e73 <__iob>
   1005c:	f0 93 74 2e 	sts	0x2E74, r31	; 0x802e74 <__iob+0x1>
   10060:	20 97       	sbiw	r28, 0x00	; 0
   10062:	c9 f0       	breq	.+50     	; 0x10096 <fdevopen+0x88>
   10064:	c0 87       	std	Z+8, r28	; 0x08
   10066:	d1 87       	std	Z+9, r29	; 0x09
   10068:	83 81       	ldd	r24, Z+3	; 0x03
   1006a:	82 60       	ori	r24, 0x02	; 2
   1006c:	83 83       	std	Z+3, r24	; 0x03
   1006e:	80 91 75 2e 	lds	r24, 0x2E75	; 0x802e75 <__iob+0x2>
   10072:	90 91 76 2e 	lds	r25, 0x2E76	; 0x802e76 <__iob+0x3>
   10076:	89 2b       	or	r24, r25
   10078:	71 f4       	brne	.+28     	; 0x10096 <fdevopen+0x88>
   1007a:	e0 93 75 2e 	sts	0x2E75, r30	; 0x802e75 <__iob+0x2>
   1007e:	f0 93 76 2e 	sts	0x2E76, r31	; 0x802e76 <__iob+0x3>
   10082:	80 91 77 2e 	lds	r24, 0x2E77	; 0x802e77 <__iob+0x4>
   10086:	90 91 78 2e 	lds	r25, 0x2E78	; 0x802e78 <__iob+0x5>
   1008a:	89 2b       	or	r24, r25
   1008c:	21 f4       	brne	.+8      	; 0x10096 <fdevopen+0x88>
   1008e:	e0 93 77 2e 	sts	0x2E77, r30	; 0x802e77 <__iob+0x4>
   10092:	f0 93 78 2e 	sts	0x2E78, r31	; 0x802e78 <__iob+0x5>
   10096:	cf 01       	movw	r24, r30
   10098:	df 91       	pop	r29
   1009a:	cf 91       	pop	r28
   1009c:	1f 91       	pop	r17
   1009e:	0f 91       	pop	r16
   100a0:	08 95       	ret

000100a2 <fputc>:
   100a2:	0f 93       	push	r16
   100a4:	1f 93       	push	r17
   100a6:	cf 93       	push	r28
   100a8:	df 93       	push	r29
   100aa:	fb 01       	movw	r30, r22
   100ac:	23 81       	ldd	r18, Z+3	; 0x03
   100ae:	21 fd       	sbrc	r18, 1
   100b0:	03 c0       	rjmp	.+6      	; 0x100b8 <fputc+0x16>
   100b2:	8f ef       	ldi	r24, 0xFF	; 255
   100b4:	9f ef       	ldi	r25, 0xFF	; 255
   100b6:	2c c0       	rjmp	.+88     	; 0x10110 <fputc+0x6e>
   100b8:	22 ff       	sbrs	r18, 2
   100ba:	16 c0       	rjmp	.+44     	; 0x100e8 <fputc+0x46>
   100bc:	46 81       	ldd	r20, Z+6	; 0x06
   100be:	57 81       	ldd	r21, Z+7	; 0x07
   100c0:	24 81       	ldd	r18, Z+4	; 0x04
   100c2:	35 81       	ldd	r19, Z+5	; 0x05
   100c4:	42 17       	cp	r20, r18
   100c6:	53 07       	cpc	r21, r19
   100c8:	44 f4       	brge	.+16     	; 0x100da <fputc+0x38>
   100ca:	a0 81       	ld	r26, Z
   100cc:	b1 81       	ldd	r27, Z+1	; 0x01
   100ce:	9d 01       	movw	r18, r26
   100d0:	2f 5f       	subi	r18, 0xFF	; 255
   100d2:	3f 4f       	sbci	r19, 0xFF	; 255
   100d4:	20 83       	st	Z, r18
   100d6:	31 83       	std	Z+1, r19	; 0x01
   100d8:	8c 93       	st	X, r24
   100da:	26 81       	ldd	r18, Z+6	; 0x06
   100dc:	37 81       	ldd	r19, Z+7	; 0x07
   100de:	2f 5f       	subi	r18, 0xFF	; 255
   100e0:	3f 4f       	sbci	r19, 0xFF	; 255
   100e2:	26 83       	std	Z+6, r18	; 0x06
   100e4:	37 83       	std	Z+7, r19	; 0x07
   100e6:	14 c0       	rjmp	.+40     	; 0x10110 <fputc+0x6e>
   100e8:	8b 01       	movw	r16, r22
   100ea:	ec 01       	movw	r28, r24
   100ec:	fb 01       	movw	r30, r22
   100ee:	00 84       	ldd	r0, Z+8	; 0x08
   100f0:	f1 85       	ldd	r31, Z+9	; 0x09
   100f2:	e0 2d       	mov	r30, r0
   100f4:	19 95       	eicall
   100f6:	89 2b       	or	r24, r25
   100f8:	e1 f6       	brne	.-72     	; 0x100b2 <fputc+0x10>
   100fa:	d8 01       	movw	r26, r16
   100fc:	16 96       	adiw	r26, 0x06	; 6
   100fe:	8d 91       	ld	r24, X+
   10100:	9c 91       	ld	r25, X
   10102:	17 97       	sbiw	r26, 0x07	; 7
   10104:	01 96       	adiw	r24, 0x01	; 1
   10106:	16 96       	adiw	r26, 0x06	; 6
   10108:	8d 93       	st	X+, r24
   1010a:	9c 93       	st	X, r25
   1010c:	17 97       	sbiw	r26, 0x07	; 7
   1010e:	ce 01       	movw	r24, r28
   10110:	df 91       	pop	r29
   10112:	cf 91       	pop	r28
   10114:	1f 91       	pop	r17
   10116:	0f 91       	pop	r16
   10118:	08 95       	ret

0001011a <snprintf_P>:
   1011a:	0f 93       	push	r16
   1011c:	1f 93       	push	r17
   1011e:	cf 93       	push	r28
   10120:	df 93       	push	r29
   10122:	cd b7       	in	r28, 0x3d	; 61
   10124:	de b7       	in	r29, 0x3e	; 62
   10126:	2e 97       	sbiw	r28, 0x0e	; 14
   10128:	cd bf       	out	0x3d, r28	; 61
   1012a:	de bf       	out	0x3e, r29	; 62
   1012c:	0e 89       	ldd	r16, Y+22	; 0x16
   1012e:	1f 89       	ldd	r17, Y+23	; 0x17
   10130:	88 8d       	ldd	r24, Y+24	; 0x18
   10132:	99 8d       	ldd	r25, Y+25	; 0x19
   10134:	2e e0       	ldi	r18, 0x0E	; 14
   10136:	2c 83       	std	Y+4, r18	; 0x04
   10138:	09 83       	std	Y+1, r16	; 0x01
   1013a:	1a 83       	std	Y+2, r17	; 0x02
   1013c:	97 ff       	sbrs	r25, 7
   1013e:	02 c0       	rjmp	.+4      	; 0x10144 <snprintf_P+0x2a>
   10140:	80 e0       	ldi	r24, 0x00	; 0
   10142:	90 e8       	ldi	r25, 0x80	; 128
   10144:	01 97       	sbiw	r24, 0x01	; 1
   10146:	8d 83       	std	Y+5, r24	; 0x05
   10148:	9e 83       	std	Y+6, r25	; 0x06
   1014a:	ae 01       	movw	r20, r28
   1014c:	44 5e       	subi	r20, 0xE4	; 228
   1014e:	5f 4f       	sbci	r21, 0xFF	; 255
   10150:	6a 8d       	ldd	r22, Y+26	; 0x1a
   10152:	7b 8d       	ldd	r23, Y+27	; 0x1b
   10154:	ce 01       	movw	r24, r28
   10156:	01 96       	adiw	r24, 0x01	; 1
   10158:	0e 94 d1 74 	call	0xe9a2	; 0xe9a2 <vfprintf>
   1015c:	4d 81       	ldd	r20, Y+5	; 0x05
   1015e:	5e 81       	ldd	r21, Y+6	; 0x06
   10160:	57 fd       	sbrc	r21, 7
   10162:	0a c0       	rjmp	.+20     	; 0x10178 <snprintf_P+0x5e>
   10164:	2f 81       	ldd	r18, Y+7	; 0x07
   10166:	38 85       	ldd	r19, Y+8	; 0x08
   10168:	42 17       	cp	r20, r18
   1016a:	53 07       	cpc	r21, r19
   1016c:	0c f4       	brge	.+2      	; 0x10170 <snprintf_P+0x56>
   1016e:	9a 01       	movw	r18, r20
   10170:	f8 01       	movw	r30, r16
   10172:	e2 0f       	add	r30, r18
   10174:	f3 1f       	adc	r31, r19
   10176:	10 82       	st	Z, r1
   10178:	2e 96       	adiw	r28, 0x0e	; 14
   1017a:	cd bf       	out	0x3d, r28	; 61
   1017c:	de bf       	out	0x3e, r29	; 62
   1017e:	df 91       	pop	r29
   10180:	cf 91       	pop	r28
   10182:	1f 91       	pop	r17
   10184:	0f 91       	pop	r16
   10186:	08 95       	ret

00010188 <sprintf_P>:
   10188:	0f 93       	push	r16
   1018a:	1f 93       	push	r17
   1018c:	cf 93       	push	r28
   1018e:	df 93       	push	r29
   10190:	cd b7       	in	r28, 0x3d	; 61
   10192:	de b7       	in	r29, 0x3e	; 62
   10194:	2e 97       	sbiw	r28, 0x0e	; 14
   10196:	cd bf       	out	0x3d, r28	; 61
   10198:	de bf       	out	0x3e, r29	; 62
   1019a:	0e 89       	ldd	r16, Y+22	; 0x16
   1019c:	1f 89       	ldd	r17, Y+23	; 0x17
   1019e:	8e e0       	ldi	r24, 0x0E	; 14
   101a0:	8c 83       	std	Y+4, r24	; 0x04
   101a2:	09 83       	std	Y+1, r16	; 0x01
   101a4:	1a 83       	std	Y+2, r17	; 0x02
   101a6:	8f ef       	ldi	r24, 0xFF	; 255
   101a8:	9f e7       	ldi	r25, 0x7F	; 127
   101aa:	8d 83       	std	Y+5, r24	; 0x05
   101ac:	9e 83       	std	Y+6, r25	; 0x06
   101ae:	ae 01       	movw	r20, r28
   101b0:	46 5e       	subi	r20, 0xE6	; 230
   101b2:	5f 4f       	sbci	r21, 0xFF	; 255
   101b4:	68 8d       	ldd	r22, Y+24	; 0x18
   101b6:	79 8d       	ldd	r23, Y+25	; 0x19
   101b8:	ce 01       	movw	r24, r28
   101ba:	01 96       	adiw	r24, 0x01	; 1
   101bc:	0e 94 d1 74 	call	0xe9a2	; 0xe9a2 <vfprintf>
   101c0:	ef 81       	ldd	r30, Y+7	; 0x07
   101c2:	f8 85       	ldd	r31, Y+8	; 0x08
   101c4:	e0 0f       	add	r30, r16
   101c6:	f1 1f       	adc	r31, r17
   101c8:	10 82       	st	Z, r1
   101ca:	2e 96       	adiw	r28, 0x0e	; 14
   101cc:	cd bf       	out	0x3d, r28	; 61
   101ce:	de bf       	out	0x3e, r29	; 62
   101d0:	df 91       	pop	r29
   101d2:	cf 91       	pop	r28
   101d4:	1f 91       	pop	r17
   101d6:	0f 91       	pop	r16
   101d8:	08 95       	ret

000101da <__ultoa_invert>:
   101da:	fa 01       	movw	r30, r20
   101dc:	aa 27       	eor	r26, r26
   101de:	28 30       	cpi	r18, 0x08	; 8
   101e0:	51 f1       	breq	.+84     	; 0x10236 <__ultoa_invert+0x5c>
   101e2:	20 31       	cpi	r18, 0x10	; 16
   101e4:	81 f1       	breq	.+96     	; 0x10246 <__ultoa_invert+0x6c>
   101e6:	e8 94       	clt
   101e8:	6f 93       	push	r22
   101ea:	6e 7f       	andi	r22, 0xFE	; 254
   101ec:	6e 5f       	subi	r22, 0xFE	; 254
   101ee:	7f 4f       	sbci	r23, 0xFF	; 255
   101f0:	8f 4f       	sbci	r24, 0xFF	; 255
   101f2:	9f 4f       	sbci	r25, 0xFF	; 255
   101f4:	af 4f       	sbci	r26, 0xFF	; 255
   101f6:	b1 e0       	ldi	r27, 0x01	; 1
   101f8:	3e d0       	rcall	.+124    	; 0x10276 <__ultoa_invert+0x9c>
   101fa:	b4 e0       	ldi	r27, 0x04	; 4
   101fc:	3c d0       	rcall	.+120    	; 0x10276 <__ultoa_invert+0x9c>
   101fe:	67 0f       	add	r22, r23
   10200:	78 1f       	adc	r23, r24
   10202:	89 1f       	adc	r24, r25
   10204:	9a 1f       	adc	r25, r26
   10206:	a1 1d       	adc	r26, r1
   10208:	68 0f       	add	r22, r24
   1020a:	79 1f       	adc	r23, r25
   1020c:	8a 1f       	adc	r24, r26
   1020e:	91 1d       	adc	r25, r1
   10210:	a1 1d       	adc	r26, r1
   10212:	6a 0f       	add	r22, r26
   10214:	71 1d       	adc	r23, r1
   10216:	81 1d       	adc	r24, r1
   10218:	91 1d       	adc	r25, r1
   1021a:	a1 1d       	adc	r26, r1
   1021c:	20 d0       	rcall	.+64     	; 0x1025e <__ultoa_invert+0x84>
   1021e:	09 f4       	brne	.+2      	; 0x10222 <__ultoa_invert+0x48>
   10220:	68 94       	set
   10222:	3f 91       	pop	r19
   10224:	2a e0       	ldi	r18, 0x0A	; 10
   10226:	26 9f       	mul	r18, r22
   10228:	11 24       	eor	r1, r1
   1022a:	30 19       	sub	r19, r0
   1022c:	30 5d       	subi	r19, 0xD0	; 208
   1022e:	31 93       	st	Z+, r19
   10230:	de f6       	brtc	.-74     	; 0x101e8 <__ultoa_invert+0xe>
   10232:	cf 01       	movw	r24, r30
   10234:	08 95       	ret
   10236:	46 2f       	mov	r20, r22
   10238:	47 70       	andi	r20, 0x07	; 7
   1023a:	40 5d       	subi	r20, 0xD0	; 208
   1023c:	41 93       	st	Z+, r20
   1023e:	b3 e0       	ldi	r27, 0x03	; 3
   10240:	0f d0       	rcall	.+30     	; 0x10260 <__ultoa_invert+0x86>
   10242:	c9 f7       	brne	.-14     	; 0x10236 <__ultoa_invert+0x5c>
   10244:	f6 cf       	rjmp	.-20     	; 0x10232 <__ultoa_invert+0x58>
   10246:	46 2f       	mov	r20, r22
   10248:	4f 70       	andi	r20, 0x0F	; 15
   1024a:	40 5d       	subi	r20, 0xD0	; 208
   1024c:	4a 33       	cpi	r20, 0x3A	; 58
   1024e:	18 f0       	brcs	.+6      	; 0x10256 <__ultoa_invert+0x7c>
   10250:	49 5d       	subi	r20, 0xD9	; 217
   10252:	31 fd       	sbrc	r19, 1
   10254:	40 52       	subi	r20, 0x20	; 32
   10256:	41 93       	st	Z+, r20
   10258:	02 d0       	rcall	.+4      	; 0x1025e <__ultoa_invert+0x84>
   1025a:	a9 f7       	brne	.-22     	; 0x10246 <__ultoa_invert+0x6c>
   1025c:	ea cf       	rjmp	.-44     	; 0x10232 <__ultoa_invert+0x58>
   1025e:	b4 e0       	ldi	r27, 0x04	; 4
   10260:	a6 95       	lsr	r26
   10262:	97 95       	ror	r25
   10264:	87 95       	ror	r24
   10266:	77 95       	ror	r23
   10268:	67 95       	ror	r22
   1026a:	ba 95       	dec	r27
   1026c:	c9 f7       	brne	.-14     	; 0x10260 <__ultoa_invert+0x86>
   1026e:	00 97       	sbiw	r24, 0x00	; 0
   10270:	61 05       	cpc	r22, r1
   10272:	71 05       	cpc	r23, r1
   10274:	08 95       	ret
   10276:	9b 01       	movw	r18, r22
   10278:	ac 01       	movw	r20, r24
   1027a:	0a 2e       	mov	r0, r26
   1027c:	06 94       	lsr	r0
   1027e:	57 95       	ror	r21
   10280:	47 95       	ror	r20
   10282:	37 95       	ror	r19
   10284:	27 95       	ror	r18
   10286:	ba 95       	dec	r27
   10288:	c9 f7       	brne	.-14     	; 0x1027c <__ultoa_invert+0xa2>
   1028a:	62 0f       	add	r22, r18
   1028c:	73 1f       	adc	r23, r19
   1028e:	84 1f       	adc	r24, r20
   10290:	95 1f       	adc	r25, r21
   10292:	a0 1d       	adc	r26, r0
   10294:	08 95       	ret

00010296 <calloc>:
   10296:	0f 93       	push	r16
   10298:	1f 93       	push	r17
   1029a:	cf 93       	push	r28
   1029c:	df 93       	push	r29
   1029e:	86 9f       	mul	r24, r22
   102a0:	80 01       	movw	r16, r0
   102a2:	87 9f       	mul	r24, r23
   102a4:	10 0d       	add	r17, r0
   102a6:	96 9f       	mul	r25, r22
   102a8:	10 0d       	add	r17, r0
   102aa:	11 24       	eor	r1, r1
   102ac:	c8 01       	movw	r24, r16
   102ae:	0d d0       	rcall	.+26     	; 0x102ca <malloc>
   102b0:	ec 01       	movw	r28, r24
   102b2:	00 97       	sbiw	r24, 0x00	; 0
   102b4:	21 f0       	breq	.+8      	; 0x102be <calloc+0x28>
   102b6:	a8 01       	movw	r20, r16
   102b8:	60 e0       	ldi	r22, 0x00	; 0
   102ba:	70 e0       	ldi	r23, 0x00	; 0
   102bc:	86 d2       	rcall	.+1292   	; 0x107ca <memset>
   102be:	ce 01       	movw	r24, r28
   102c0:	df 91       	pop	r29
   102c2:	cf 91       	pop	r28
   102c4:	1f 91       	pop	r17
   102c6:	0f 91       	pop	r16
   102c8:	08 95       	ret

000102ca <malloc>:
   102ca:	0f 93       	push	r16
   102cc:	1f 93       	push	r17
   102ce:	cf 93       	push	r28
   102d0:	df 93       	push	r29
   102d2:	82 30       	cpi	r24, 0x02	; 2
   102d4:	91 05       	cpc	r25, r1
   102d6:	10 f4       	brcc	.+4      	; 0x102dc <malloc+0x12>
   102d8:	82 e0       	ldi	r24, 0x02	; 2
   102da:	90 e0       	ldi	r25, 0x00	; 0
   102dc:	e0 91 7b 2e 	lds	r30, 0x2E7B	; 0x802e7b <__flp>
   102e0:	f0 91 7c 2e 	lds	r31, 0x2E7C	; 0x802e7c <__flp+0x1>
   102e4:	20 e0       	ldi	r18, 0x00	; 0
   102e6:	30 e0       	ldi	r19, 0x00	; 0
   102e8:	a0 e0       	ldi	r26, 0x00	; 0
   102ea:	b0 e0       	ldi	r27, 0x00	; 0
   102ec:	30 97       	sbiw	r30, 0x00	; 0
   102ee:	19 f1       	breq	.+70     	; 0x10336 <malloc+0x6c>
   102f0:	40 81       	ld	r20, Z
   102f2:	51 81       	ldd	r21, Z+1	; 0x01
   102f4:	02 81       	ldd	r16, Z+2	; 0x02
   102f6:	13 81       	ldd	r17, Z+3	; 0x03
   102f8:	48 17       	cp	r20, r24
   102fa:	59 07       	cpc	r21, r25
   102fc:	c8 f0       	brcs	.+50     	; 0x10330 <malloc+0x66>
   102fe:	84 17       	cp	r24, r20
   10300:	95 07       	cpc	r25, r21
   10302:	69 f4       	brne	.+26     	; 0x1031e <malloc+0x54>
   10304:	10 97       	sbiw	r26, 0x00	; 0
   10306:	31 f0       	breq	.+12     	; 0x10314 <malloc+0x4a>
   10308:	12 96       	adiw	r26, 0x02	; 2
   1030a:	0c 93       	st	X, r16
   1030c:	12 97       	sbiw	r26, 0x02	; 2
   1030e:	13 96       	adiw	r26, 0x03	; 3
   10310:	1c 93       	st	X, r17
   10312:	27 c0       	rjmp	.+78     	; 0x10362 <malloc+0x98>
   10314:	00 93 7b 2e 	sts	0x2E7B, r16	; 0x802e7b <__flp>
   10318:	10 93 7c 2e 	sts	0x2E7C, r17	; 0x802e7c <__flp+0x1>
   1031c:	22 c0       	rjmp	.+68     	; 0x10362 <malloc+0x98>
   1031e:	21 15       	cp	r18, r1
   10320:	31 05       	cpc	r19, r1
   10322:	19 f0       	breq	.+6      	; 0x1032a <malloc+0x60>
   10324:	42 17       	cp	r20, r18
   10326:	53 07       	cpc	r21, r19
   10328:	18 f4       	brcc	.+6      	; 0x10330 <malloc+0x66>
   1032a:	9a 01       	movw	r18, r20
   1032c:	bd 01       	movw	r22, r26
   1032e:	ef 01       	movw	r28, r30
   10330:	df 01       	movw	r26, r30
   10332:	f8 01       	movw	r30, r16
   10334:	db cf       	rjmp	.-74     	; 0x102ec <malloc+0x22>
   10336:	21 15       	cp	r18, r1
   10338:	31 05       	cpc	r19, r1
   1033a:	f9 f0       	breq	.+62     	; 0x1037a <malloc+0xb0>
   1033c:	28 1b       	sub	r18, r24
   1033e:	39 0b       	sbc	r19, r25
   10340:	24 30       	cpi	r18, 0x04	; 4
   10342:	31 05       	cpc	r19, r1
   10344:	80 f4       	brcc	.+32     	; 0x10366 <malloc+0x9c>
   10346:	8a 81       	ldd	r24, Y+2	; 0x02
   10348:	9b 81       	ldd	r25, Y+3	; 0x03
   1034a:	61 15       	cp	r22, r1
   1034c:	71 05       	cpc	r23, r1
   1034e:	21 f0       	breq	.+8      	; 0x10358 <malloc+0x8e>
   10350:	fb 01       	movw	r30, r22
   10352:	82 83       	std	Z+2, r24	; 0x02
   10354:	93 83       	std	Z+3, r25	; 0x03
   10356:	04 c0       	rjmp	.+8      	; 0x10360 <malloc+0x96>
   10358:	80 93 7b 2e 	sts	0x2E7B, r24	; 0x802e7b <__flp>
   1035c:	90 93 7c 2e 	sts	0x2E7C, r25	; 0x802e7c <__flp+0x1>
   10360:	fe 01       	movw	r30, r28
   10362:	32 96       	adiw	r30, 0x02	; 2
   10364:	44 c0       	rjmp	.+136    	; 0x103ee <malloc+0x124>
   10366:	fe 01       	movw	r30, r28
   10368:	e2 0f       	add	r30, r18
   1036a:	f3 1f       	adc	r31, r19
   1036c:	81 93       	st	Z+, r24
   1036e:	91 93       	st	Z+, r25
   10370:	22 50       	subi	r18, 0x02	; 2
   10372:	31 09       	sbc	r19, r1
   10374:	28 83       	st	Y, r18
   10376:	39 83       	std	Y+1, r19	; 0x01
   10378:	3a c0       	rjmp	.+116    	; 0x103ee <malloc+0x124>
   1037a:	20 91 79 2e 	lds	r18, 0x2E79	; 0x802e79 <__brkval>
   1037e:	30 91 7a 2e 	lds	r19, 0x2E7A	; 0x802e7a <__brkval+0x1>
   10382:	23 2b       	or	r18, r19
   10384:	41 f4       	brne	.+16     	; 0x10396 <malloc+0xcc>
   10386:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
   1038a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
   1038e:	20 93 79 2e 	sts	0x2E79, r18	; 0x802e79 <__brkval>
   10392:	30 93 7a 2e 	sts	0x2E7A, r19	; 0x802e7a <__brkval+0x1>
   10396:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
   1039a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
   1039e:	21 15       	cp	r18, r1
   103a0:	31 05       	cpc	r19, r1
   103a2:	41 f4       	brne	.+16     	; 0x103b4 <malloc+0xea>
   103a4:	2d b7       	in	r18, 0x3d	; 61
   103a6:	3e b7       	in	r19, 0x3e	; 62
   103a8:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
   103ac:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
   103b0:	24 1b       	sub	r18, r20
   103b2:	35 0b       	sbc	r19, r21
   103b4:	e0 91 79 2e 	lds	r30, 0x2E79	; 0x802e79 <__brkval>
   103b8:	f0 91 7a 2e 	lds	r31, 0x2E7A	; 0x802e7a <__brkval+0x1>
   103bc:	e2 17       	cp	r30, r18
   103be:	f3 07       	cpc	r31, r19
   103c0:	a0 f4       	brcc	.+40     	; 0x103ea <malloc+0x120>
   103c2:	2e 1b       	sub	r18, r30
   103c4:	3f 0b       	sbc	r19, r31
   103c6:	28 17       	cp	r18, r24
   103c8:	39 07       	cpc	r19, r25
   103ca:	78 f0       	brcs	.+30     	; 0x103ea <malloc+0x120>
   103cc:	ac 01       	movw	r20, r24
   103ce:	4e 5f       	subi	r20, 0xFE	; 254
   103d0:	5f 4f       	sbci	r21, 0xFF	; 255
   103d2:	24 17       	cp	r18, r20
   103d4:	35 07       	cpc	r19, r21
   103d6:	48 f0       	brcs	.+18     	; 0x103ea <malloc+0x120>
   103d8:	4e 0f       	add	r20, r30
   103da:	5f 1f       	adc	r21, r31
   103dc:	40 93 79 2e 	sts	0x2E79, r20	; 0x802e79 <__brkval>
   103e0:	50 93 7a 2e 	sts	0x2E7A, r21	; 0x802e7a <__brkval+0x1>
   103e4:	81 93       	st	Z+, r24
   103e6:	91 93       	st	Z+, r25
   103e8:	02 c0       	rjmp	.+4      	; 0x103ee <malloc+0x124>
   103ea:	e0 e0       	ldi	r30, 0x00	; 0
   103ec:	f0 e0       	ldi	r31, 0x00	; 0
   103ee:	cf 01       	movw	r24, r30
   103f0:	df 91       	pop	r29
   103f2:	cf 91       	pop	r28
   103f4:	1f 91       	pop	r17
   103f6:	0f 91       	pop	r16
   103f8:	08 95       	ret

000103fa <free>:
   103fa:	cf 93       	push	r28
   103fc:	df 93       	push	r29
   103fe:	00 97       	sbiw	r24, 0x00	; 0
   10400:	09 f4       	brne	.+2      	; 0x10404 <free+0xa>
   10402:	81 c0       	rjmp	.+258    	; 0x10506 <free+0x10c>
   10404:	fc 01       	movw	r30, r24
   10406:	32 97       	sbiw	r30, 0x02	; 2
   10408:	12 82       	std	Z+2, r1	; 0x02
   1040a:	13 82       	std	Z+3, r1	; 0x03
   1040c:	a0 91 7b 2e 	lds	r26, 0x2E7B	; 0x802e7b <__flp>
   10410:	b0 91 7c 2e 	lds	r27, 0x2E7C	; 0x802e7c <__flp+0x1>
   10414:	10 97       	sbiw	r26, 0x00	; 0
   10416:	81 f4       	brne	.+32     	; 0x10438 <free+0x3e>
   10418:	20 81       	ld	r18, Z
   1041a:	31 81       	ldd	r19, Z+1	; 0x01
   1041c:	82 0f       	add	r24, r18
   1041e:	93 1f       	adc	r25, r19
   10420:	20 91 79 2e 	lds	r18, 0x2E79	; 0x802e79 <__brkval>
   10424:	30 91 7a 2e 	lds	r19, 0x2E7A	; 0x802e7a <__brkval+0x1>
   10428:	28 17       	cp	r18, r24
   1042a:	39 07       	cpc	r19, r25
   1042c:	51 f5       	brne	.+84     	; 0x10482 <free+0x88>
   1042e:	e0 93 79 2e 	sts	0x2E79, r30	; 0x802e79 <__brkval>
   10432:	f0 93 7a 2e 	sts	0x2E7A, r31	; 0x802e7a <__brkval+0x1>
   10436:	67 c0       	rjmp	.+206    	; 0x10506 <free+0x10c>
   10438:	ed 01       	movw	r28, r26
   1043a:	20 e0       	ldi	r18, 0x00	; 0
   1043c:	30 e0       	ldi	r19, 0x00	; 0
   1043e:	ce 17       	cp	r28, r30
   10440:	df 07       	cpc	r29, r31
   10442:	40 f4       	brcc	.+16     	; 0x10454 <free+0x5a>
   10444:	4a 81       	ldd	r20, Y+2	; 0x02
   10446:	5b 81       	ldd	r21, Y+3	; 0x03
   10448:	9e 01       	movw	r18, r28
   1044a:	41 15       	cp	r20, r1
   1044c:	51 05       	cpc	r21, r1
   1044e:	f1 f0       	breq	.+60     	; 0x1048c <free+0x92>
   10450:	ea 01       	movw	r28, r20
   10452:	f5 cf       	rjmp	.-22     	; 0x1043e <free+0x44>
   10454:	c2 83       	std	Z+2, r28	; 0x02
   10456:	d3 83       	std	Z+3, r29	; 0x03
   10458:	40 81       	ld	r20, Z
   1045a:	51 81       	ldd	r21, Z+1	; 0x01
   1045c:	84 0f       	add	r24, r20
   1045e:	95 1f       	adc	r25, r21
   10460:	c8 17       	cp	r28, r24
   10462:	d9 07       	cpc	r29, r25
   10464:	59 f4       	brne	.+22     	; 0x1047c <free+0x82>
   10466:	88 81       	ld	r24, Y
   10468:	99 81       	ldd	r25, Y+1	; 0x01
   1046a:	84 0f       	add	r24, r20
   1046c:	95 1f       	adc	r25, r21
   1046e:	02 96       	adiw	r24, 0x02	; 2
   10470:	80 83       	st	Z, r24
   10472:	91 83       	std	Z+1, r25	; 0x01
   10474:	8a 81       	ldd	r24, Y+2	; 0x02
   10476:	9b 81       	ldd	r25, Y+3	; 0x03
   10478:	82 83       	std	Z+2, r24	; 0x02
   1047a:	93 83       	std	Z+3, r25	; 0x03
   1047c:	21 15       	cp	r18, r1
   1047e:	31 05       	cpc	r19, r1
   10480:	29 f4       	brne	.+10     	; 0x1048c <free+0x92>
   10482:	e0 93 7b 2e 	sts	0x2E7B, r30	; 0x802e7b <__flp>
   10486:	f0 93 7c 2e 	sts	0x2E7C, r31	; 0x802e7c <__flp+0x1>
   1048a:	3d c0       	rjmp	.+122    	; 0x10506 <free+0x10c>
   1048c:	e9 01       	movw	r28, r18
   1048e:	ea 83       	std	Y+2, r30	; 0x02
   10490:	fb 83       	std	Y+3, r31	; 0x03
   10492:	49 91       	ld	r20, Y+
   10494:	59 91       	ld	r21, Y+
   10496:	c4 0f       	add	r28, r20
   10498:	d5 1f       	adc	r29, r21
   1049a:	ec 17       	cp	r30, r28
   1049c:	fd 07       	cpc	r31, r29
   1049e:	61 f4       	brne	.+24     	; 0x104b8 <free+0xbe>
   104a0:	80 81       	ld	r24, Z
   104a2:	91 81       	ldd	r25, Z+1	; 0x01
   104a4:	84 0f       	add	r24, r20
   104a6:	95 1f       	adc	r25, r21
   104a8:	02 96       	adiw	r24, 0x02	; 2
   104aa:	e9 01       	movw	r28, r18
   104ac:	88 83       	st	Y, r24
   104ae:	99 83       	std	Y+1, r25	; 0x01
   104b0:	82 81       	ldd	r24, Z+2	; 0x02
   104b2:	93 81       	ldd	r25, Z+3	; 0x03
   104b4:	8a 83       	std	Y+2, r24	; 0x02
   104b6:	9b 83       	std	Y+3, r25	; 0x03
   104b8:	e0 e0       	ldi	r30, 0x00	; 0
   104ba:	f0 e0       	ldi	r31, 0x00	; 0
   104bc:	12 96       	adiw	r26, 0x02	; 2
   104be:	8d 91       	ld	r24, X+
   104c0:	9c 91       	ld	r25, X
   104c2:	13 97       	sbiw	r26, 0x03	; 3
   104c4:	00 97       	sbiw	r24, 0x00	; 0
   104c6:	19 f0       	breq	.+6      	; 0x104ce <free+0xd4>
   104c8:	fd 01       	movw	r30, r26
   104ca:	dc 01       	movw	r26, r24
   104cc:	f7 cf       	rjmp	.-18     	; 0x104bc <free+0xc2>
   104ce:	8d 91       	ld	r24, X+
   104d0:	9c 91       	ld	r25, X
   104d2:	11 97       	sbiw	r26, 0x01	; 1
   104d4:	9d 01       	movw	r18, r26
   104d6:	2e 5f       	subi	r18, 0xFE	; 254
   104d8:	3f 4f       	sbci	r19, 0xFF	; 255
   104da:	82 0f       	add	r24, r18
   104dc:	93 1f       	adc	r25, r19
   104de:	20 91 79 2e 	lds	r18, 0x2E79	; 0x802e79 <__brkval>
   104e2:	30 91 7a 2e 	lds	r19, 0x2E7A	; 0x802e7a <__brkval+0x1>
   104e6:	28 17       	cp	r18, r24
   104e8:	39 07       	cpc	r19, r25
   104ea:	69 f4       	brne	.+26     	; 0x10506 <free+0x10c>
   104ec:	30 97       	sbiw	r30, 0x00	; 0
   104ee:	29 f4       	brne	.+10     	; 0x104fa <free+0x100>
   104f0:	10 92 7b 2e 	sts	0x2E7B, r1	; 0x802e7b <__flp>
   104f4:	10 92 7c 2e 	sts	0x2E7C, r1	; 0x802e7c <__flp+0x1>
   104f8:	02 c0       	rjmp	.+4      	; 0x104fe <free+0x104>
   104fa:	12 82       	std	Z+2, r1	; 0x02
   104fc:	13 82       	std	Z+3, r1	; 0x03
   104fe:	a0 93 79 2e 	sts	0x2E79, r26	; 0x802e79 <__brkval>
   10502:	b0 93 7a 2e 	sts	0x2E7A, r27	; 0x802e7a <__brkval+0x1>
   10506:	df 91       	pop	r29
   10508:	cf 91       	pop	r28
   1050a:	08 95       	ret

0001050c <strtod>:
   1050c:	8f 92       	push	r8
   1050e:	9f 92       	push	r9
   10510:	af 92       	push	r10
   10512:	bf 92       	push	r11
   10514:	cf 92       	push	r12
   10516:	df 92       	push	r13
   10518:	ef 92       	push	r14
   1051a:	ff 92       	push	r15
   1051c:	0f 93       	push	r16
   1051e:	1f 93       	push	r17
   10520:	cf 93       	push	r28
   10522:	df 93       	push	r29
   10524:	ec 01       	movw	r28, r24
   10526:	6b 01       	movw	r12, r22
   10528:	61 15       	cp	r22, r1
   1052a:	71 05       	cpc	r23, r1
   1052c:	19 f0       	breq	.+6      	; 0x10534 <strtod+0x28>
   1052e:	fb 01       	movw	r30, r22
   10530:	80 83       	st	Z, r24
   10532:	91 83       	std	Z+1, r25	; 0x01
   10534:	7e 01       	movw	r14, r28
   10536:	ff ef       	ldi	r31, 0xFF	; 255
   10538:	ef 1a       	sub	r14, r31
   1053a:	ff 0a       	sbc	r15, r31
   1053c:	08 81       	ld	r16, Y
   1053e:	80 2f       	mov	r24, r16
   10540:	90 e0       	ldi	r25, 0x00	; 0
   10542:	3b d1       	rcall	.+630    	; 0x107ba <isspace>
   10544:	89 2b       	or	r24, r25
   10546:	11 f0       	breq	.+4      	; 0x1054c <strtod+0x40>
   10548:	e7 01       	movw	r28, r14
   1054a:	f4 cf       	rjmp	.-24     	; 0x10534 <strtod+0x28>
   1054c:	0d 32       	cpi	r16, 0x2D	; 45
   1054e:	39 f4       	brne	.+14     	; 0x1055e <strtod+0x52>
   10550:	7e 01       	movw	r14, r28
   10552:	82 e0       	ldi	r24, 0x02	; 2
   10554:	e8 0e       	add	r14, r24
   10556:	f1 1c       	adc	r15, r1
   10558:	09 81       	ldd	r16, Y+1	; 0x01
   1055a:	11 e0       	ldi	r17, 0x01	; 1
   1055c:	08 c0       	rjmp	.+16     	; 0x1056e <strtod+0x62>
   1055e:	0b 32       	cpi	r16, 0x2B	; 43
   10560:	29 f4       	brne	.+10     	; 0x1056c <strtod+0x60>
   10562:	7e 01       	movw	r14, r28
   10564:	92 e0       	ldi	r25, 0x02	; 2
   10566:	e9 0e       	add	r14, r25
   10568:	f1 1c       	adc	r15, r1
   1056a:	09 81       	ldd	r16, Y+1	; 0x01
   1056c:	10 e0       	ldi	r17, 0x00	; 0
   1056e:	e7 01       	movw	r28, r14
   10570:	21 97       	sbiw	r28, 0x01	; 1
   10572:	43 e0       	ldi	r20, 0x03	; 3
   10574:	50 e0       	ldi	r21, 0x00	; 0
   10576:	62 ec       	ldi	r22, 0xC2	; 194
   10578:	73 e0       	ldi	r23, 0x03	; 3
   1057a:	ce 01       	movw	r24, r28
   1057c:	b4 dc       	rcall	.-1688   	; 0xfee6 <strncasecmp_P>
   1057e:	89 2b       	or	r24, r25
   10580:	b9 f4       	brne	.+46     	; 0x105b0 <strtod+0xa4>
   10582:	23 96       	adiw	r28, 0x03	; 3
   10584:	45 e0       	ldi	r20, 0x05	; 5
   10586:	50 e0       	ldi	r21, 0x00	; 0
   10588:	6d eb       	ldi	r22, 0xBD	; 189
   1058a:	73 e0       	ldi	r23, 0x03	; 3
   1058c:	ce 01       	movw	r24, r28
   1058e:	ab dc       	rcall	.-1706   	; 0xfee6 <strncasecmp_P>
   10590:	89 2b       	or	r24, r25
   10592:	09 f4       	brne	.+2      	; 0x10596 <strtod+0x8a>
   10594:	25 96       	adiw	r28, 0x05	; 5
   10596:	c1 14       	cp	r12, r1
   10598:	d1 04       	cpc	r13, r1
   1059a:	19 f0       	breq	.+6      	; 0x105a2 <strtod+0x96>
   1059c:	f6 01       	movw	r30, r12
   1059e:	c0 83       	st	Z, r28
   105a0:	d1 83       	std	Z+1, r29	; 0x01
   105a2:	11 11       	cpse	r17, r1
   105a4:	f4 c0       	rjmp	.+488    	; 0x1078e <strtod+0x282>
   105a6:	60 e0       	ldi	r22, 0x00	; 0
   105a8:	70 e0       	ldi	r23, 0x00	; 0
   105aa:	80 e8       	ldi	r24, 0x80	; 128
   105ac:	9f e7       	ldi	r25, 0x7F	; 127
   105ae:	f8 c0       	rjmp	.+496    	; 0x107a0 <strtod+0x294>
   105b0:	43 e0       	ldi	r20, 0x03	; 3
   105b2:	50 e0       	ldi	r21, 0x00	; 0
   105b4:	6a eb       	ldi	r22, 0xBA	; 186
   105b6:	73 e0       	ldi	r23, 0x03	; 3
   105b8:	ce 01       	movw	r24, r28
   105ba:	95 dc       	rcall	.-1750   	; 0xfee6 <strncasecmp_P>
   105bc:	89 2b       	or	r24, r25
   105be:	59 f4       	brne	.+22     	; 0x105d6 <strtod+0xca>
   105c0:	c1 14       	cp	r12, r1
   105c2:	d1 04       	cpc	r13, r1
   105c4:	09 f4       	brne	.+2      	; 0x105c8 <strtod+0xbc>
   105c6:	e8 c0       	rjmp	.+464    	; 0x10798 <strtod+0x28c>
   105c8:	f2 e0       	ldi	r31, 0x02	; 2
   105ca:	ef 0e       	add	r14, r31
   105cc:	f1 1c       	adc	r15, r1
   105ce:	f6 01       	movw	r30, r12
   105d0:	e0 82       	st	Z, r14
   105d2:	f1 82       	std	Z+1, r15	; 0x01
   105d4:	e1 c0       	rjmp	.+450    	; 0x10798 <strtod+0x28c>
   105d6:	20 e0       	ldi	r18, 0x00	; 0
   105d8:	30 e0       	ldi	r19, 0x00	; 0
   105da:	a9 01       	movw	r20, r18
   105dc:	c0 e0       	ldi	r28, 0x00	; 0
   105de:	d0 e0       	ldi	r29, 0x00	; 0
   105e0:	f7 01       	movw	r30, r14
   105e2:	60 ed       	ldi	r22, 0xD0	; 208
   105e4:	a6 2e       	mov	r10, r22
   105e6:	a0 0e       	add	r10, r16
   105e8:	89 e0       	ldi	r24, 0x09	; 9
   105ea:	8a 15       	cp	r24, r10
   105ec:	28 f1       	brcs	.+74     	; 0x10638 <strtod+0x12c>
   105ee:	91 2f       	mov	r25, r17
   105f0:	92 60       	ori	r25, 0x02	; 2
   105f2:	b9 2e       	mov	r11, r25
   105f4:	81 2f       	mov	r24, r17
   105f6:	88 70       	andi	r24, 0x08	; 8
   105f8:	12 ff       	sbrs	r17, 2
   105fa:	04 c0       	rjmp	.+8      	; 0x10604 <strtod+0xf8>
   105fc:	81 11       	cpse	r24, r1
   105fe:	23 c0       	rjmp	.+70     	; 0x10646 <strtod+0x13a>
   10600:	21 96       	adiw	r28, 0x01	; 1
   10602:	21 c0       	rjmp	.+66     	; 0x10646 <strtod+0x13a>
   10604:	81 11       	cpse	r24, r1
   10606:	21 97       	sbiw	r28, 0x01	; 1
   10608:	a5 e0       	ldi	r26, 0x05	; 5
   1060a:	b0 e0       	ldi	r27, 0x00	; 0
   1060c:	d4 d9       	rcall	.-3160   	; 0xf9b6 <__muluhisi3>
   1060e:	dc 01       	movw	r26, r24
   10610:	cb 01       	movw	r24, r22
   10612:	88 0f       	add	r24, r24
   10614:	99 1f       	adc	r25, r25
   10616:	aa 1f       	adc	r26, r26
   10618:	bb 1f       	adc	r27, r27
   1061a:	9c 01       	movw	r18, r24
   1061c:	ad 01       	movw	r20, r26
   1061e:	2a 0d       	add	r18, r10
   10620:	31 1d       	adc	r19, r1
   10622:	41 1d       	adc	r20, r1
   10624:	51 1d       	adc	r21, r1
   10626:	28 39       	cpi	r18, 0x98	; 152
   10628:	89 e9       	ldi	r24, 0x99	; 153
   1062a:	38 07       	cpc	r19, r24
   1062c:	48 07       	cpc	r20, r24
   1062e:	89 e1       	ldi	r24, 0x19	; 25
   10630:	58 07       	cpc	r21, r24
   10632:	48 f0       	brcs	.+18     	; 0x10646 <strtod+0x13a>
   10634:	16 60       	ori	r17, 0x06	; 6
   10636:	06 c0       	rjmp	.+12     	; 0x10644 <strtod+0x138>
   10638:	9e ef       	ldi	r25, 0xFE	; 254
   1063a:	a9 12       	cpse	r10, r25
   1063c:	0a c0       	rjmp	.+20     	; 0x10652 <strtod+0x146>
   1063e:	13 fd       	sbrc	r17, 3
   10640:	40 c0       	rjmp	.+128    	; 0x106c2 <strtod+0x1b6>
   10642:	18 60       	ori	r17, 0x08	; 8
   10644:	b1 2e       	mov	r11, r17
   10646:	8f ef       	ldi	r24, 0xFF	; 255
   10648:	e8 1a       	sub	r14, r24
   1064a:	f8 0a       	sbc	r15, r24
   1064c:	00 81       	ld	r16, Z
   1064e:	1b 2d       	mov	r17, r11
   10650:	c7 cf       	rjmp	.-114    	; 0x105e0 <strtod+0xd4>
   10652:	80 2f       	mov	r24, r16
   10654:	8f 7d       	andi	r24, 0xDF	; 223
   10656:	85 34       	cpi	r24, 0x45	; 69
   10658:	a1 f5       	brne	.+104    	; 0x106c2 <strtod+0x1b6>
   1065a:	80 81       	ld	r24, Z
   1065c:	8d 32       	cpi	r24, 0x2D	; 45
   1065e:	11 f4       	brne	.+4      	; 0x10664 <strtod+0x158>
   10660:	10 61       	ori	r17, 0x10	; 16
   10662:	06 c0       	rjmp	.+12     	; 0x10670 <strtod+0x164>
   10664:	8b 32       	cpi	r24, 0x2B	; 43
   10666:	21 f0       	breq	.+8      	; 0x10670 <strtod+0x164>
   10668:	31 96       	adiw	r30, 0x01	; 1
   1066a:	61 e0       	ldi	r22, 0x01	; 1
   1066c:	70 e0       	ldi	r23, 0x00	; 0
   1066e:	04 c0       	rjmp	.+8      	; 0x10678 <strtod+0x16c>
   10670:	81 81       	ldd	r24, Z+1	; 0x01
   10672:	32 96       	adiw	r30, 0x02	; 2
   10674:	62 e0       	ldi	r22, 0x02	; 2
   10676:	70 e0       	ldi	r23, 0x00	; 0
   10678:	80 53       	subi	r24, 0x30	; 48
   1067a:	8a 30       	cpi	r24, 0x0A	; 10
   1067c:	18 f0       	brcs	.+6      	; 0x10684 <strtod+0x178>
   1067e:	e6 1b       	sub	r30, r22
   10680:	f7 0b       	sbc	r31, r23
   10682:	1f c0       	rjmp	.+62     	; 0x106c2 <strtod+0x1b6>
   10684:	60 e0       	ldi	r22, 0x00	; 0
   10686:	70 e0       	ldi	r23, 0x00	; 0
   10688:	60 38       	cpi	r22, 0x80	; 128
   1068a:	9c e0       	ldi	r25, 0x0C	; 12
   1068c:	79 07       	cpc	r23, r25
   1068e:	5c f4       	brge	.+22     	; 0x106a6 <strtod+0x19a>
   10690:	db 01       	movw	r26, r22
   10692:	aa 0f       	add	r26, r26
   10694:	bb 1f       	adc	r27, r27
   10696:	aa 0f       	add	r26, r26
   10698:	bb 1f       	adc	r27, r27
   1069a:	6a 0f       	add	r22, r26
   1069c:	7b 1f       	adc	r23, r27
   1069e:	66 0f       	add	r22, r22
   106a0:	77 1f       	adc	r23, r23
   106a2:	68 0f       	add	r22, r24
   106a4:	71 1d       	adc	r23, r1
   106a6:	31 96       	adiw	r30, 0x01	; 1
   106a8:	df 01       	movw	r26, r30
   106aa:	11 97       	sbiw	r26, 0x01	; 1
   106ac:	8c 91       	ld	r24, X
   106ae:	80 53       	subi	r24, 0x30	; 48
   106b0:	8a 30       	cpi	r24, 0x0A	; 10
   106b2:	50 f3       	brcs	.-44     	; 0x10688 <strtod+0x17c>
   106b4:	14 ff       	sbrs	r17, 4
   106b6:	03 c0       	rjmp	.+6      	; 0x106be <strtod+0x1b2>
   106b8:	71 95       	neg	r23
   106ba:	61 95       	neg	r22
   106bc:	71 09       	sbc	r23, r1
   106be:	c6 0f       	add	r28, r22
   106c0:	d7 1f       	adc	r29, r23
   106c2:	11 ff       	sbrs	r17, 1
   106c4:	08 c0       	rjmp	.+16     	; 0x106d6 <strtod+0x1ca>
   106c6:	c1 14       	cp	r12, r1
   106c8:	d1 04       	cpc	r13, r1
   106ca:	29 f0       	breq	.+10     	; 0x106d6 <strtod+0x1ca>
   106cc:	cf 01       	movw	r24, r30
   106ce:	01 97       	sbiw	r24, 0x01	; 1
   106d0:	f6 01       	movw	r30, r12
   106d2:	80 83       	st	Z, r24
   106d4:	91 83       	std	Z+1, r25	; 0x01
   106d6:	ca 01       	movw	r24, r20
   106d8:	b9 01       	movw	r22, r18
   106da:	0e 94 76 79 	call	0xf2ec	; 0xf2ec <__floatunsisf>
   106de:	21 2f       	mov	r18, r17
   106e0:	23 70       	andi	r18, 0x03	; 3
   106e2:	23 30       	cpi	r18, 0x03	; 3
   106e4:	19 f0       	breq	.+6      	; 0x106ec <strtod+0x1e0>
   106e6:	4b 01       	movw	r8, r22
   106e8:	5c 01       	movw	r10, r24
   106ea:	06 c0       	rjmp	.+12     	; 0x106f8 <strtod+0x1ec>
   106ec:	4b 01       	movw	r8, r22
   106ee:	5c 01       	movw	r10, r24
   106f0:	b7 fa       	bst	r11, 7
   106f2:	b0 94       	com	r11
   106f4:	b7 f8       	bld	r11, 7
   106f6:	b0 94       	com	r11
   106f8:	20 e0       	ldi	r18, 0x00	; 0
   106fa:	30 e0       	ldi	r19, 0x00	; 0
   106fc:	a9 01       	movw	r20, r18
   106fe:	c5 01       	movw	r24, r10
   10700:	b4 01       	movw	r22, r8
   10702:	0e 94 d6 78 	call	0xf1ac	; 0xf1ac <__cmpsf2>
   10706:	88 23       	and	r24, r24
   10708:	09 f4       	brne	.+2      	; 0x1070c <strtod+0x200>
   1070a:	3e c0       	rjmp	.+124    	; 0x10788 <strtod+0x27c>
   1070c:	d7 ff       	sbrs	r29, 7
   1070e:	06 c0       	rjmp	.+12     	; 0x1071c <strtod+0x210>
   10710:	d1 95       	neg	r29
   10712:	c1 95       	neg	r28
   10714:	d1 09       	sbc	r29, r1
   10716:	09 ed       	ldi	r16, 0xD9	; 217
   10718:	13 e0       	ldi	r17, 0x03	; 3
   1071a:	02 c0       	rjmp	.+4      	; 0x10720 <strtod+0x214>
   1071c:	01 ef       	ldi	r16, 0xF1	; 241
   1071e:	13 e0       	ldi	r17, 0x03	; 3
   10720:	68 01       	movw	r12, r16
   10722:	f8 e1       	ldi	r31, 0x18	; 24
   10724:	cf 1a       	sub	r12, r31
   10726:	d1 08       	sbc	r13, r1
   10728:	90 e2       	ldi	r25, 0x20	; 32
   1072a:	e9 2e       	mov	r14, r25
   1072c:	f1 2c       	mov	r15, r1
   1072e:	ce 15       	cp	r28, r14
   10730:	df 05       	cpc	r29, r15
   10732:	74 f0       	brlt	.+28     	; 0x10750 <strtod+0x244>
   10734:	f8 01       	movw	r30, r16
   10736:	25 91       	lpm	r18, Z+
   10738:	35 91       	lpm	r19, Z+
   1073a:	45 91       	lpm	r20, Z+
   1073c:	54 91       	lpm	r21, Z
   1073e:	c5 01       	movw	r24, r10
   10740:	b4 01       	movw	r22, r8
   10742:	0e 94 65 7a 	call	0xf4ca	; 0xf4ca <__mulsf3>
   10746:	4b 01       	movw	r8, r22
   10748:	5c 01       	movw	r10, r24
   1074a:	ce 19       	sub	r28, r14
   1074c:	df 09       	sbc	r29, r15
   1074e:	ef cf       	rjmp	.-34     	; 0x1072e <strtod+0x222>
   10750:	04 50       	subi	r16, 0x04	; 4
   10752:	11 09       	sbc	r17, r1
   10754:	f5 94       	asr	r15
   10756:	e7 94       	ror	r14
   10758:	0c 15       	cp	r16, r12
   1075a:	1d 05       	cpc	r17, r13
   1075c:	41 f7       	brne	.-48     	; 0x1072e <strtod+0x222>
   1075e:	8a 2d       	mov	r24, r10
   10760:	88 0f       	add	r24, r24
   10762:	8b 2d       	mov	r24, r11
   10764:	88 1f       	adc	r24, r24
   10766:	8f 3f       	cpi	r24, 0xFF	; 255
   10768:	49 f0       	breq	.+18     	; 0x1077c <strtod+0x270>
   1076a:	20 e0       	ldi	r18, 0x00	; 0
   1076c:	30 e0       	ldi	r19, 0x00	; 0
   1076e:	a9 01       	movw	r20, r18
   10770:	c5 01       	movw	r24, r10
   10772:	b4 01       	movw	r22, r8
   10774:	0e 94 d6 78 	call	0xf1ac	; 0xf1ac <__cmpsf2>
   10778:	81 11       	cpse	r24, r1
   1077a:	06 c0       	rjmp	.+12     	; 0x10788 <strtod+0x27c>
   1077c:	82 e2       	ldi	r24, 0x22	; 34
   1077e:	90 e0       	ldi	r25, 0x00	; 0
   10780:	80 93 7d 2e 	sts	0x2E7D, r24	; 0x802e7d <errno>
   10784:	90 93 7e 2e 	sts	0x2E7E, r25	; 0x802e7e <errno+0x1>
   10788:	c5 01       	movw	r24, r10
   1078a:	b4 01       	movw	r22, r8
   1078c:	09 c0       	rjmp	.+18     	; 0x107a0 <strtod+0x294>
   1078e:	60 e0       	ldi	r22, 0x00	; 0
   10790:	70 e0       	ldi	r23, 0x00	; 0
   10792:	80 e8       	ldi	r24, 0x80	; 128
   10794:	9f ef       	ldi	r25, 0xFF	; 255
   10796:	04 c0       	rjmp	.+8      	; 0x107a0 <strtod+0x294>
   10798:	60 e0       	ldi	r22, 0x00	; 0
   1079a:	70 e0       	ldi	r23, 0x00	; 0
   1079c:	80 ec       	ldi	r24, 0xC0	; 192
   1079e:	9f e7       	ldi	r25, 0x7F	; 127
   107a0:	df 91       	pop	r29
   107a2:	cf 91       	pop	r28
   107a4:	1f 91       	pop	r17
   107a6:	0f 91       	pop	r16
   107a8:	ff 90       	pop	r15
   107aa:	ef 90       	pop	r14
   107ac:	df 90       	pop	r13
   107ae:	cf 90       	pop	r12
   107b0:	bf 90       	pop	r11
   107b2:	af 90       	pop	r10
   107b4:	9f 90       	pop	r9
   107b6:	8f 90       	pop	r8
   107b8:	08 95       	ret

000107ba <isspace>:
   107ba:	91 11       	cpse	r25, r1
   107bc:	0d c0       	rjmp	.+26     	; 0x107d8 <__ctype_isfalse>
   107be:	80 32       	cpi	r24, 0x20	; 32
   107c0:	19 f0       	breq	.+6      	; 0x107c8 <isspace+0xe>
   107c2:	89 50       	subi	r24, 0x09	; 9
   107c4:	85 50       	subi	r24, 0x05	; 5
   107c6:	d0 f7       	brcc	.-12     	; 0x107bc <isspace+0x2>
   107c8:	08 95       	ret

000107ca <memset>:
   107ca:	dc 01       	movw	r26, r24
   107cc:	01 c0       	rjmp	.+2      	; 0x107d0 <memset+0x6>
   107ce:	6d 93       	st	X+, r22
   107d0:	41 50       	subi	r20, 0x01	; 1
   107d2:	50 40       	sbci	r21, 0x00	; 0
   107d4:	e0 f7       	brcc	.-8      	; 0x107ce <memset+0x4>
   107d6:	08 95       	ret

000107d8 <__ctype_isfalse>:
   107d8:	99 27       	eor	r25, r25
   107da:	88 27       	eor	r24, r24

000107dc <__ctype_istrue>:
   107dc:	08 95       	ret

000107de <_exit>:
   107de:	f8 94       	cli

000107e0 <__stop_program>:
   107e0:	ff cf       	rjmp	.-2      	; 0x107e0 <__stop_program>
