
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00802000  00003d10  00003da4  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002ce  0080214c  0080214c  00003ef0  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003f20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000718  00000000  00000000  00003f68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000124f2  00000000  00000000  00004680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000054bb  00000000  00000000  00016b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008cff  00000000  00000000  0001c02d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ebc  00000000  00000000  00024d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003a916  00000000  00000000  00026be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006e92  00000000  00000000  000614fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000770  00000000  00000000  00068390  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c4b6  00000000  00000000  00068b00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	2a c1       	rjmp	.+596    	; 0x25a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c1       	rjmp	.+592    	; 0x25a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c1       	rjmp	.+588    	; 0x25a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c1       	rjmp	.+584    	; 0x25a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c1       	rjmp	.+576    	; 0x25a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c1       	rjmp	.+572    	; 0x25a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c1       	rjmp	.+568    	; 0x25a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c1       	rjmp	.+560    	; 0x25a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	16 c1       	rjmp	.+556    	; 0x25a <__bad_interrupt>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	12 c1       	rjmp	.+548    	; 0x25a <__bad_interrupt>
      36:	00 00       	nop
      38:	c5 c4       	rjmp	.+2442   	; 0x9c4 <__vector_14>
      3a:	00 00       	nop
      3c:	f0 c4       	rjmp	.+2528   	; 0xa1e <__vector_15>
      3e:	00 00       	nop
      40:	1b c5       	rjmp	.+2614   	; 0xa78 <__vector_16>
      42:	00 00       	nop
      44:	46 c5       	rjmp	.+2700   	; 0xad2 <__vector_17>
      46:	00 00       	nop
      48:	71 c5       	rjmp	.+2786   	; 0xb2c <__vector_18>
      4a:	00 00       	nop
      4c:	9c c5       	rjmp	.+2872   	; 0xb86 <__vector_19>
      4e:	00 00       	nop
      50:	c7 c5       	rjmp	.+2958   	; 0xbe0 <__vector_20>
      52:	00 00       	nop
      54:	f2 c5       	rjmp	.+3044   	; 0xc3a <__vector_21>
      56:	00 00       	nop
      58:	1d c6       	rjmp	.+3130   	; 0xc94 <__vector_22>
      5a:	00 00       	nop
      5c:	48 c6       	rjmp	.+3216   	; 0xcee <__vector_23>
      5e:	00 00       	nop
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	f8 c0       	rjmp	.+496    	; 0x25a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c0       	rjmp	.+460    	; 0x25a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c0       	rjmp	.+456    	; 0x25a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c0       	rjmp	.+452    	; 0x25a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c0       	rjmp	.+448    	; 0x25a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e8 c1       	rjmp	.+976    	; 0x46e <__vector_39>
      9e:	00 00       	nop
      a0:	18 c2       	rjmp	.+1072   	; 0x4d2 <__vector_40>
      a2:	00 00       	nop
      a4:	48 c2       	rjmp	.+1168   	; 0x536 <__vector_41>
      a6:	00 00       	nop
      a8:	78 c2       	rjmp	.+1264   	; 0x59a <__vector_42>
      aa:	00 00       	nop
      ac:	d6 c0       	rjmp	.+428    	; 0x25a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c0       	rjmp	.+424    	; 0x25a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c0       	rjmp	.+420    	; 0x25a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d0 c0       	rjmp	.+416    	; 0x25a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__vector_47>
      c0:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__vector_48>
      c4:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_49>
      c8:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__vector_50>
      cc:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__vector_51>
      d0:	0c 94 47 09 	jmp	0x128e	; 0x128e <__vector_52>
      d4:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__vector_53>
      d8:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__vector_54>
      dc:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__vector_55>
      e0:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__vector_56>
      e4:	ba c0       	rjmp	.+372    	; 0x25a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b6 c0       	rjmp	.+364    	; 0x25a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b4 c0       	rjmp	.+360    	; 0x25a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b2 c0       	rjmp	.+356    	; 0x25a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b0 c0       	rjmp	.+352    	; 0x25a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ae c0       	rjmp	.+348    	; 0x25a <__bad_interrupt>
      fe:	00 00       	nop
     100:	ac c0       	rjmp	.+344    	; 0x25a <__bad_interrupt>
     102:	00 00       	nop
     104:	aa c0       	rjmp	.+340    	; 0x25a <__bad_interrupt>
     106:	00 00       	nop
     108:	a8 c0       	rjmp	.+336    	; 0x25a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a6 c0       	rjmp	.+332    	; 0x25a <__bad_interrupt>
     10e:	00 00       	nop
     110:	a4 c0       	rjmp	.+328    	; 0x25a <__bad_interrupt>
     112:	00 00       	nop
     114:	a2 c0       	rjmp	.+324    	; 0x25a <__bad_interrupt>
     116:	00 00       	nop
     118:	a0 c0       	rjmp	.+320    	; 0x25a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e0 c0       	rjmp	.+448    	; 0x2de <__vector_71>
     11e:	00 00       	nop
     120:	10 c1       	rjmp	.+544    	; 0x342 <__vector_72>
     122:	00 00       	nop
     124:	40 c1       	rjmp	.+640    	; 0x3a6 <__vector_73>
     126:	00 00       	nop
     128:	70 c1       	rjmp	.+736    	; 0x40a <__vector_74>
     12a:	00 00       	nop
     12c:	96 c0       	rjmp	.+300    	; 0x25a <__bad_interrupt>
     12e:	00 00       	nop
     130:	94 c0       	rjmp	.+296    	; 0x25a <__bad_interrupt>
     132:	00 00       	nop
     134:	09 c6       	rjmp	.+3090   	; 0xd48 <__vector_77>
     136:	00 00       	nop
     138:	34 c6       	rjmp	.+3176   	; 0xda2 <__vector_78>
     13a:	00 00       	nop
     13c:	5f c6       	rjmp	.+3262   	; 0xdfc <__vector_79>
     13e:	00 00       	nop
     140:	8a c6       	rjmp	.+3348   	; 0xe56 <__vector_80>
     142:	00 00       	nop
     144:	b5 c6       	rjmp	.+3434   	; 0xeb0 <__vector_81>
     146:	00 00       	nop
     148:	e0 c6       	rjmp	.+3520   	; 0xf0a <__vector_82>
     14a:	00 00       	nop
     14c:	0b c7       	rjmp	.+3606   	; 0xf64 <__vector_83>
     14e:	00 00       	nop
     150:	36 c7       	rjmp	.+3692   	; 0xfbe <__vector_84>
     152:	00 00       	nop
     154:	61 c7       	rjmp	.+3778   	; 0x1018 <__vector_85>
     156:	00 00       	nop
     158:	8c c7       	rjmp	.+3864   	; 0x1072 <__vector_86>
     15a:	00 00       	nop
     15c:	7e c0       	rjmp	.+252    	; 0x25a <__bad_interrupt>
     15e:	00 00       	nop
     160:	7c c0       	rjmp	.+248    	; 0x25a <__bad_interrupt>
     162:	00 00       	nop
     164:	7a c0       	rjmp	.+244    	; 0x25a <__bad_interrupt>
     166:	00 00       	nop
     168:	78 c0       	rjmp	.+240    	; 0x25a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	76 c0       	rjmp	.+236    	; 0x25a <__bad_interrupt>
     16e:	00 00       	nop
     170:	74 c0       	rjmp	.+232    	; 0x25a <__bad_interrupt>
     172:	00 00       	nop
     174:	72 c0       	rjmp	.+228    	; 0x25a <__bad_interrupt>
     176:	00 00       	nop
     178:	70 c0       	rjmp	.+224    	; 0x25a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6e c0       	rjmp	.+220    	; 0x25a <__bad_interrupt>
     17e:	00 00       	nop
     180:	6c c0       	rjmp	.+216    	; 0x25a <__bad_interrupt>
     182:	00 00       	nop
     184:	6a c0       	rjmp	.+212    	; 0x25a <__bad_interrupt>
     186:	00 00       	nop
     188:	68 c0       	rjmp	.+208    	; 0x25a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	66 c0       	rjmp	.+204    	; 0x25a <__bad_interrupt>
     18e:	00 00       	nop
     190:	64 c0       	rjmp	.+200    	; 0x25a <__bad_interrupt>
     192:	00 00       	nop
     194:	62 c0       	rjmp	.+196    	; 0x25a <__bad_interrupt>
     196:	00 00       	nop
     198:	60 c0       	rjmp	.+192    	; 0x25a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5e c0       	rjmp	.+188    	; 0x25a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5c c0       	rjmp	.+184    	; 0x25a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5a c0       	rjmp	.+180    	; 0x25a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	58 c0       	rjmp	.+176    	; 0x25a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	56 c0       	rjmp	.+172    	; 0x25a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__vector_108>
     1b4:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_109>
     1b8:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_110>
     1bc:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__vector_111>
     1c0:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <__vector_112>
     1c4:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_113>
     1c8:	48 c0       	rjmp	.+144    	; 0x25a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	46 c0       	rjmp	.+140    	; 0x25a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	44 c0       	rjmp	.+136    	; 0x25a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	42 c0       	rjmp	.+132    	; 0x25a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	40 c0       	rjmp	.+128    	; 0x25a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3e c0       	rjmp	.+124    	; 0x25a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3c c0       	rjmp	.+120    	; 0x25a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3a c0       	rjmp	.+116    	; 0x25a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	38 c0       	rjmp	.+112    	; 0x25a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	36 c0       	rjmp	.+108    	; 0x25a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__vector_125>
     1f8:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__vector_126>
     1fc:	b3 0c       	add	r11, r3
     1fe:	b6 0c       	add	r11, r6
     200:	b9 0c       	add	r11, r9
     202:	bc 0c       	add	r11, r12
     204:	bf 0c       	add	r11, r15
     206:	c2 0c       	add	r12, r2
     208:	c5 0c       	add	r12, r5
     20a:	9d 13       	cpse	r25, r29
     20c:	b0 13       	cpse	r27, r16
     20e:	c3 13       	cpse	r28, r19
     210:	d6 13       	cpse	r29, r22
     212:	e9 13       	cpse	r30, r25
     214:	fc 13       	cpse	r31, r28
     216:	0f 14       	cp	r0, r15

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df e5       	ldi	r29, 0x5F	; 95
     222:	de bf       	out	0x3e, r29	; 62
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e0 e1       	ldi	r30, 0x10	; 16
     230:	fd e3       	ldi	r31, 0x3D	; 61
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	ac 34       	cpi	r26, 0x4C	; 76
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	24 e2       	ldi	r18, 0x24	; 36
     244:	ac e4       	ldi	r26, 0x4C	; 76
     246:	b1 e2       	ldi	r27, 0x21	; 33
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	aa 31       	cpi	r26, 0x1A	; 26
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 b0 14 	call	0x2960	; 0x2960 <main>
     256:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     25c:	08 95       	ret

0000025e <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     25e:	81 15       	cp	r24, r1
     260:	22 e0       	ldi	r18, 0x02	; 2
     262:	92 07       	cpc	r25, r18
     264:	69 f4       	brne	.+26     	; 0x280 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     266:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <adca_enable_count>
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	98 0f       	add	r25, r24
     26e:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <adca_enable_count>
     272:	81 11       	cpse	r24, r1
     274:	14 c0       	rjmp	.+40     	; 0x29e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     276:	62 e0       	ldi	r22, 0x02	; 2
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <sysclk_enable_module>
     27e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     280:	80 34       	cpi	r24, 0x40	; 64
     282:	92 40       	sbci	r25, 0x02	; 2
     284:	61 f4       	brne	.+24     	; 0x29e <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     286:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <__data_end>
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	98 0f       	add	r25, r24
     28e:	90 93 4c 21 	sts	0x214C, r25	; 0x80214c <__data_end>
     292:	81 11       	cpse	r24, r1
     294:	04 c0       	rjmp	.+8      	; 0x29e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     296:	62 e0       	ldi	r22, 0x02	; 2
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <sysclk_enable_module>
     29e:	08 95       	ret

000002a0 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     2a0:	81 15       	cp	r24, r1
     2a2:	22 e0       	ldi	r18, 0x02	; 2
     2a4:	92 07       	cpc	r25, r18
     2a6:	61 f4       	brne	.+24     	; 0x2c0 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     2a8:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <adca_enable_count>
     2ac:	81 50       	subi	r24, 0x01	; 1
     2ae:	80 93 4d 21 	sts	0x214D, r24	; 0x80214d <adca_enable_count>
     2b2:	81 11       	cpse	r24, r1
     2b4:	13 c0       	rjmp	.+38     	; 0x2dc <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     2b6:	62 e0       	ldi	r22, 0x02	; 2
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <sysclk_disable_module>
     2be:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     2c0:	80 34       	cpi	r24, 0x40	; 64
     2c2:	92 40       	sbci	r25, 0x02	; 2
     2c4:	59 f4       	brne	.+22     	; 0x2dc <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     2c6:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <__data_end>
     2ca:	81 50       	subi	r24, 0x01	; 1
     2cc:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <__data_end>
     2d0:	81 11       	cpse	r24, r1
     2d2:	04 c0       	rjmp	.+8      	; 0x2dc <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     2d4:	62 e0       	ldi	r22, 0x02	; 2
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <sysclk_disable_module>
     2dc:	08 95       	ret

000002de <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	11 24       	eor	r1, r1
     2e8:	0b b6       	in	r0, 0x3b	; 59
     2ea:	0f 92       	push	r0
     2ec:	2f 93       	push	r18
     2ee:	3f 93       	push	r19
     2f0:	4f 93       	push	r20
     2f2:	5f 93       	push	r21
     2f4:	6f 93       	push	r22
     2f6:	7f 93       	push	r23
     2f8:	8f 93       	push	r24
     2fa:	9f 93       	push	r25
     2fc:	af 93       	push	r26
     2fe:	bf 93       	push	r27
     300:	ef 93       	push	r30
     302:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     304:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     308:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     30c:	e0 91 02 24 	lds	r30, 0x2402	; 0x802402 <adca_callback>
     310:	f0 91 03 24 	lds	r31, 0x2403	; 0x802403 <adca_callback+0x1>
     314:	61 e0       	ldi	r22, 0x01	; 1
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	19 95       	eicall
}
     31c:	ff 91       	pop	r31
     31e:	ef 91       	pop	r30
     320:	bf 91       	pop	r27
     322:	af 91       	pop	r26
     324:	9f 91       	pop	r25
     326:	8f 91       	pop	r24
     328:	7f 91       	pop	r23
     32a:	6f 91       	pop	r22
     32c:	5f 91       	pop	r21
     32e:	4f 91       	pop	r20
     330:	3f 91       	pop	r19
     332:	2f 91       	pop	r18
     334:	0f 90       	pop	r0
     336:	0b be       	out	0x3b, r0	; 59
     338:	0f 90       	pop	r0
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	0f 90       	pop	r0
     33e:	1f 90       	pop	r1
     340:	18 95       	reti

00000342 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     342:	1f 92       	push	r1
     344:	0f 92       	push	r0
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	0f 92       	push	r0
     34a:	11 24       	eor	r1, r1
     34c:	0b b6       	in	r0, 0x3b	; 59
     34e:	0f 92       	push	r0
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	ef 93       	push	r30
     366:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     368:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     36c:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     370:	e0 91 02 24 	lds	r30, 0x2402	; 0x802402 <adca_callback>
     374:	f0 91 03 24 	lds	r31, 0x2403	; 0x802403 <adca_callback+0x1>
     378:	62 e0       	ldi	r22, 0x02	; 2
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	19 95       	eicall
}
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	bf 91       	pop	r27
     386:	af 91       	pop	r26
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	7f 91       	pop	r23
     38e:	6f 91       	pop	r22
     390:	5f 91       	pop	r21
     392:	4f 91       	pop	r20
     394:	3f 91       	pop	r19
     396:	2f 91       	pop	r18
     398:	0f 90       	pop	r0
     39a:	0b be       	out	0x3b, r0	; 59
     39c:	0f 90       	pop	r0
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	0b b6       	in	r0, 0x3b	; 59
     3b2:	0f 92       	push	r0
     3b4:	2f 93       	push	r18
     3b6:	3f 93       	push	r19
     3b8:	4f 93       	push	r20
     3ba:	5f 93       	push	r21
     3bc:	6f 93       	push	r22
     3be:	7f 93       	push	r23
     3c0:	8f 93       	push	r24
     3c2:	9f 93       	push	r25
     3c4:	af 93       	push	r26
     3c6:	bf 93       	push	r27
     3c8:	ef 93       	push	r30
     3ca:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     3cc:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     3d0:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     3d4:	e0 91 02 24 	lds	r30, 0x2402	; 0x802402 <adca_callback>
     3d8:	f0 91 03 24 	lds	r31, 0x2403	; 0x802403 <adca_callback+0x1>
     3dc:	64 e0       	ldi	r22, 0x04	; 4
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	19 95       	eicall
}
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	bf 91       	pop	r27
     3ea:	af 91       	pop	r26
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	7f 91       	pop	r23
     3f2:	6f 91       	pop	r22
     3f4:	5f 91       	pop	r21
     3f6:	4f 91       	pop	r20
     3f8:	3f 91       	pop	r19
     3fa:	2f 91       	pop	r18
     3fc:	0f 90       	pop	r0
     3fe:	0b be       	out	0x3b, r0	; 59
     400:	0f 90       	pop	r0
     402:	0f be       	out	0x3f, r0	; 63
     404:	0f 90       	pop	r0
     406:	1f 90       	pop	r1
     408:	18 95       	reti

0000040a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	0b b6       	in	r0, 0x3b	; 59
     416:	0f 92       	push	r0
     418:	2f 93       	push	r18
     41a:	3f 93       	push	r19
     41c:	4f 93       	push	r20
     41e:	5f 93       	push	r21
     420:	6f 93       	push	r22
     422:	7f 93       	push	r23
     424:	8f 93       	push	r24
     426:	9f 93       	push	r25
     428:	af 93       	push	r26
     42a:	bf 93       	push	r27
     42c:	ef 93       	push	r30
     42e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     430:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     434:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     438:	e0 91 02 24 	lds	r30, 0x2402	; 0x802402 <adca_callback>
     43c:	f0 91 03 24 	lds	r31, 0x2403	; 0x802403 <adca_callback+0x1>
     440:	68 e0       	ldi	r22, 0x08	; 8
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	19 95       	eicall
}
     448:	ff 91       	pop	r31
     44a:	ef 91       	pop	r30
     44c:	bf 91       	pop	r27
     44e:	af 91       	pop	r26
     450:	9f 91       	pop	r25
     452:	8f 91       	pop	r24
     454:	7f 91       	pop	r23
     456:	6f 91       	pop	r22
     458:	5f 91       	pop	r21
     45a:	4f 91       	pop	r20
     45c:	3f 91       	pop	r19
     45e:	2f 91       	pop	r18
     460:	0f 90       	pop	r0
     462:	0b be       	out	0x3b, r0	; 59
     464:	0f 90       	pop	r0
     466:	0f be       	out	0x3f, r0	; 63
     468:	0f 90       	pop	r0
     46a:	1f 90       	pop	r1
     46c:	18 95       	reti

0000046e <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     46e:	1f 92       	push	r1
     470:	0f 92       	push	r0
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	0f 92       	push	r0
     476:	11 24       	eor	r1, r1
     478:	0b b6       	in	r0, 0x3b	; 59
     47a:	0f 92       	push	r0
     47c:	2f 93       	push	r18
     47e:	3f 93       	push	r19
     480:	4f 93       	push	r20
     482:	5f 93       	push	r21
     484:	6f 93       	push	r22
     486:	7f 93       	push	r23
     488:	8f 93       	push	r24
     48a:	9f 93       	push	r25
     48c:	af 93       	push	r26
     48e:	bf 93       	push	r27
     490:	ef 93       	push	r30
     492:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     494:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     498:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     49c:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <adcb_callback>
     4a0:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <adcb_callback+0x1>
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	80 e4       	ldi	r24, 0x40	; 64
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	19 95       	eicall
}
     4ac:	ff 91       	pop	r31
     4ae:	ef 91       	pop	r30
     4b0:	bf 91       	pop	r27
     4b2:	af 91       	pop	r26
     4b4:	9f 91       	pop	r25
     4b6:	8f 91       	pop	r24
     4b8:	7f 91       	pop	r23
     4ba:	6f 91       	pop	r22
     4bc:	5f 91       	pop	r21
     4be:	4f 91       	pop	r20
     4c0:	3f 91       	pop	r19
     4c2:	2f 91       	pop	r18
     4c4:	0f 90       	pop	r0
     4c6:	0b be       	out	0x3b, r0	; 59
     4c8:	0f 90       	pop	r0
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	0f 90       	pop	r0
     4ce:	1f 90       	pop	r1
     4d0:	18 95       	reti

000004d2 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	0b b6       	in	r0, 0x3b	; 59
     4de:	0f 92       	push	r0
     4e0:	2f 93       	push	r18
     4e2:	3f 93       	push	r19
     4e4:	4f 93       	push	r20
     4e6:	5f 93       	push	r21
     4e8:	6f 93       	push	r22
     4ea:	7f 93       	push	r23
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	af 93       	push	r26
     4f2:	bf 93       	push	r27
     4f4:	ef 93       	push	r30
     4f6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     4f8:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     4fc:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     500:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <adcb_callback>
     504:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <adcb_callback+0x1>
     508:	62 e0       	ldi	r22, 0x02	; 2
     50a:	80 e4       	ldi	r24, 0x40	; 64
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	19 95       	eicall
}
     510:	ff 91       	pop	r31
     512:	ef 91       	pop	r30
     514:	bf 91       	pop	r27
     516:	af 91       	pop	r26
     518:	9f 91       	pop	r25
     51a:	8f 91       	pop	r24
     51c:	7f 91       	pop	r23
     51e:	6f 91       	pop	r22
     520:	5f 91       	pop	r21
     522:	4f 91       	pop	r20
     524:	3f 91       	pop	r19
     526:	2f 91       	pop	r18
     528:	0f 90       	pop	r0
     52a:	0b be       	out	0x3b, r0	; 59
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0
     532:	1f 90       	pop	r1
     534:	18 95       	reti

00000536 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     536:	1f 92       	push	r1
     538:	0f 92       	push	r0
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	0f 92       	push	r0
     53e:	11 24       	eor	r1, r1
     540:	0b b6       	in	r0, 0x3b	; 59
     542:	0f 92       	push	r0
     544:	2f 93       	push	r18
     546:	3f 93       	push	r19
     548:	4f 93       	push	r20
     54a:	5f 93       	push	r21
     54c:	6f 93       	push	r22
     54e:	7f 93       	push	r23
     550:	8f 93       	push	r24
     552:	9f 93       	push	r25
     554:	af 93       	push	r26
     556:	bf 93       	push	r27
     558:	ef 93       	push	r30
     55a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     55c:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     560:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     564:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <adcb_callback>
     568:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <adcb_callback+0x1>
     56c:	64 e0       	ldi	r22, 0x04	; 4
     56e:	80 e4       	ldi	r24, 0x40	; 64
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	19 95       	eicall
}
     574:	ff 91       	pop	r31
     576:	ef 91       	pop	r30
     578:	bf 91       	pop	r27
     57a:	af 91       	pop	r26
     57c:	9f 91       	pop	r25
     57e:	8f 91       	pop	r24
     580:	7f 91       	pop	r23
     582:	6f 91       	pop	r22
     584:	5f 91       	pop	r21
     586:	4f 91       	pop	r20
     588:	3f 91       	pop	r19
     58a:	2f 91       	pop	r18
     58c:	0f 90       	pop	r0
     58e:	0b be       	out	0x3b, r0	; 59
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     59a:	1f 92       	push	r1
     59c:	0f 92       	push	r0
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	0f 92       	push	r0
     5a2:	11 24       	eor	r1, r1
     5a4:	0b b6       	in	r0, 0x3b	; 59
     5a6:	0f 92       	push	r0
     5a8:	2f 93       	push	r18
     5aa:	3f 93       	push	r19
     5ac:	4f 93       	push	r20
     5ae:	5f 93       	push	r21
     5b0:	6f 93       	push	r22
     5b2:	7f 93       	push	r23
     5b4:	8f 93       	push	r24
     5b6:	9f 93       	push	r25
     5b8:	af 93       	push	r26
     5ba:	bf 93       	push	r27
     5bc:	ef 93       	push	r30
     5be:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     5c0:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     5c4:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     5c8:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <adcb_callback>
     5cc:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <adcb_callback+0x1>
     5d0:	68 e0       	ldi	r22, 0x08	; 8
     5d2:	80 e4       	ldi	r24, 0x40	; 64
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	19 95       	eicall
}
     5d8:	ff 91       	pop	r31
     5da:	ef 91       	pop	r30
     5dc:	bf 91       	pop	r27
     5de:	af 91       	pop	r26
     5e0:	9f 91       	pop	r25
     5e2:	8f 91       	pop	r24
     5e4:	7f 91       	pop	r23
     5e6:	6f 91       	pop	r22
     5e8:	5f 91       	pop	r21
     5ea:	4f 91       	pop	r20
     5ec:	3f 91       	pop	r19
     5ee:	2f 91       	pop	r18
     5f0:	0f 90       	pop	r0
     5f2:	0b be       	out	0x3b, r0	; 59
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     5fe:	bf 92       	push	r11
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	1f 92       	push	r1
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	8c 01       	movw	r16, r24
     618:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     61a:	81 15       	cp	r24, r1
     61c:	22 e0       	ldi	r18, 0x02	; 2
     61e:	92 07       	cpc	r25, r18
     620:	81 f4       	brne	.+32     	; 0x642 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     622:	61 e2       	ldi	r22, 0x21	; 33
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     62c:	c8 2e       	mov	r12, r24
     62e:	d1 2c       	mov	r13, r1
     630:	60 e2       	ldi	r22, 0x20	; 32
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     63a:	dc 2c       	mov	r13, r12
     63c:	cc 24       	eor	r12, r12
     63e:	c8 2a       	or	r12, r24
     640:	12 c0       	rjmp	.+36     	; 0x666 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     642:	80 34       	cpi	r24, 0x40	; 64
     644:	92 40       	sbci	r25, 0x02	; 2
     646:	d1 f5       	brne	.+116    	; 0x6bc <adc_write_configuration+0xbe>
     648:	65 e2       	ldi	r22, 0x25	; 37
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     652:	c8 2e       	mov	r12, r24
     654:	d1 2c       	mov	r13, r1
     656:	64 e2       	ldi	r22, 0x24	; 36
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     660:	dc 2c       	mov	r13, r12
     662:	cc 24       	eor	r12, r12
     664:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     666:	8f b7       	in	r24, 0x3f	; 63
     668:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     66a:	f8 94       	cli
	return flags;
     66c:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     66e:	c8 01       	movw	r24, r16
     670:	f6 dd       	rcall	.-1044   	; 0x25e <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     672:	f8 01       	movw	r30, r16
     674:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     676:	92 e0       	ldi	r25, 0x02	; 2
     678:	90 83       	st	Z, r25
	adc->CAL = cal;
     67a:	c4 86       	std	Z+12, r12	; 0x0c
     67c:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     67e:	f7 01       	movw	r30, r14
     680:	25 81       	ldd	r18, Z+5	; 0x05
     682:	36 81       	ldd	r19, Z+6	; 0x06
     684:	f8 01       	movw	r30, r16
     686:	20 8f       	std	Z+24, r18	; 0x18
     688:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     68a:	f7 01       	movw	r30, r14
     68c:	92 81       	ldd	r25, Z+2	; 0x02
     68e:	f8 01       	movw	r30, r16
     690:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     692:	f7 01       	movw	r30, r14
     694:	94 81       	ldd	r25, Z+4	; 0x04
     696:	f8 01       	movw	r30, r16
     698:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     69a:	f7 01       	movw	r30, r14
     69c:	93 81       	ldd	r25, Z+3	; 0x03
     69e:	f8 01       	movw	r30, r16
     6a0:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     6a2:	f7 01       	movw	r30, r14
     6a4:	91 81       	ldd	r25, Z+1	; 0x01
     6a6:	f8 01       	movw	r30, r16
     6a8:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     6aa:	81 70       	andi	r24, 0x01	; 1
     6ac:	f7 01       	movw	r30, r14
     6ae:	90 81       	ld	r25, Z
     6b0:	89 2b       	or	r24, r25
     6b2:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     6b4:	80 83       	st	Z, r24
     6b6:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     6b8:	f3 dd       	rcall	.-1050   	; 0x2a0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     6ba:	bf be       	out	0x3f, r11	; 63
     6bc:	0f 90       	pop	r0
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	bf 90       	pop	r11
     6d0:	08 95       	ret

000006d2 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	1f 92       	push	r1
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	8c 01       	movw	r16, r24
     6e8:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     6ea:	8f b7       	in	r24, 0x3f	; 63
     6ec:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     6ee:	f8 94       	cli
	return flags;
     6f0:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     6f2:	c8 01       	movw	r24, r16
     6f4:	b4 dd       	rcall	.-1176   	; 0x25e <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     6f6:	f8 01       	movw	r30, r16
     6f8:	80 81       	ld	r24, Z
     6fa:	80 7c       	andi	r24, 0xC0	; 192
     6fc:	f7 01       	movw	r30, r14
     6fe:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     700:	f8 01       	movw	r30, r16
     702:	80 8d       	ldd	r24, Z+24	; 0x18
     704:	91 8d       	ldd	r25, Z+25	; 0x19
     706:	f7 01       	movw	r30, r14
     708:	85 83       	std	Z+5, r24	; 0x05
     70a:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     70c:	f8 01       	movw	r30, r16
     70e:	82 81       	ldd	r24, Z+2	; 0x02
     710:	f7 01       	movw	r30, r14
     712:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     714:	f8 01       	movw	r30, r16
     716:	84 81       	ldd	r24, Z+4	; 0x04
     718:	f7 01       	movw	r30, r14
     71a:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     71c:	f8 01       	movw	r30, r16
     71e:	83 81       	ldd	r24, Z+3	; 0x03
     720:	f7 01       	movw	r30, r14
     722:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     724:	f8 01       	movw	r30, r16
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     72a:	81 83       	std	Z+1, r24	; 0x01
     72c:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     72e:	b8 dd       	rcall	.-1168   	; 0x2a0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     730:	df be       	out	0x3f, r13	; 63
     732:	0f 90       	pop	r0
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	08 95       	ret

00000744 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	6c 01       	movw	r12, r24
     760:	b6 2e       	mov	r11, r22
     762:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     764:	86 2f       	mov	r24, r22
     766:	83 70       	andi	r24, 0x03	; 3
     768:	29 f4       	brne	.+10     	; 0x774 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     76a:	96 2f       	mov	r25, r22
     76c:	96 95       	lsr	r25
     76e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	02 c0       	rjmp	.+4      	; 0x778 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     774:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     776:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     778:	90 ff       	sbrs	r25, 0
		index++;
     77a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     77c:	86 01       	movw	r16, r12
     77e:	00 5e       	subi	r16, 0xE0	; 224
     780:	1f 4f       	sbci	r17, 0xFF	; 255
     782:	98 e0       	ldi	r25, 0x08	; 8
     784:	89 9f       	mul	r24, r25
     786:	00 0d       	add	r16, r0
     788:	11 1d       	adc	r17, r1
     78a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     78c:	8f b7       	in	r24, 0x3f	; 63
     78e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     790:	f8 94       	cli
	return flags;
     792:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     794:	c6 01       	movw	r24, r12
     796:	63 dd       	rcall	.-1338   	; 0x25e <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     798:	f7 01       	movw	r30, r14
     79a:	80 81       	ld	r24, Z
     79c:	f8 01       	movw	r30, r16
     79e:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     7a0:	f7 01       	movw	r30, r14
     7a2:	82 81       	ldd	r24, Z+2	; 0x02
     7a4:	f8 01       	movw	r30, r16
     7a6:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     7a8:	f7 01       	movw	r30, r14
     7aa:	81 81       	ldd	r24, Z+1	; 0x01
     7ac:	f8 01       	movw	r30, r16
     7ae:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     7b0:	b0 fe       	sbrs	r11, 0
     7b2:	04 c0       	rjmp	.+8      	; 0x7bc <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     7b4:	f7 01       	movw	r30, r14
     7b6:	83 81       	ldd	r24, Z+3	; 0x03
     7b8:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     7ba:	86 83       	std	Z+6, r24	; 0x06
     7bc:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7be:	70 dd       	rcall	.-1312   	; 0x2a0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     7c0:	af be       	out	0x3f, r10	; 63
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	df 90       	pop	r13
     7d2:	cf 90       	pop	r12
     7d4:	bf 90       	pop	r11
     7d6:	af 90       	pop	r10
     7d8:	08 95       	ret

000007da <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	1f 92       	push	r1
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	6c 01       	movw	r12, r24
     7f6:	b6 2e       	mov	r11, r22
     7f8:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     7fa:	86 2f       	mov	r24, r22
     7fc:	83 70       	andi	r24, 0x03	; 3
     7fe:	29 f4       	brne	.+10     	; 0x80a <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     800:	96 2f       	mov	r25, r22
     802:	96 95       	lsr	r25
     804:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	02 c0       	rjmp	.+4      	; 0x80e <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     80a:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     80c:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     80e:	90 ff       	sbrs	r25, 0
		index++;
     810:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     812:	86 01       	movw	r16, r12
     814:	00 5e       	subi	r16, 0xE0	; 224
     816:	1f 4f       	sbci	r17, 0xFF	; 255
     818:	98 e0       	ldi	r25, 0x08	; 8
     81a:	89 9f       	mul	r24, r25
     81c:	00 0d       	add	r16, r0
     81e:	11 1d       	adc	r17, r1
     820:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     822:	8f b7       	in	r24, 0x3f	; 63
     824:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     826:	f8 94       	cli
	return flags;
     828:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     82a:	c6 01       	movw	r24, r12
     82c:	18 dd       	rcall	.-1488   	; 0x25e <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     82e:	f8 01       	movw	r30, r16
     830:	80 81       	ld	r24, Z
     832:	f7 01       	movw	r30, r14
     834:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     836:	f8 01       	movw	r30, r16
     838:	82 81       	ldd	r24, Z+2	; 0x02
     83a:	f7 01       	movw	r30, r14
     83c:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     83e:	f8 01       	movw	r30, r16
     840:	81 81       	ldd	r24, Z+1	; 0x01
     842:	f7 01       	movw	r30, r14
     844:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     846:	b0 fe       	sbrs	r11, 0
     848:	04 c0       	rjmp	.+8      	; 0x852 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     84a:	f8 01       	movw	r30, r16
     84c:	86 81       	ldd	r24, Z+6	; 0x06
     84e:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     850:	83 83       	std	Z+3, r24	; 0x03
     852:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     854:	25 dd       	rcall	.-1462   	; 0x2a0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     856:	af be       	out	0x3f, r10	; 63
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	af 90       	pop	r10
     86e:	08 95       	ret

00000870 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
     870:	80 32       	cpi	r24, 0x20	; 32
     872:	93 40       	sbci	r25, 0x03	; 3
     874:	61 f4       	brne	.+24     	; 0x88e <dac_enable_clock+0x1e>
     876:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <dacb_enable_count>
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	98 0f       	add	r25, r24
     87e:	90 93 4e 21 	sts	0x214E, r25	; 0x80214e <dacb_enable_count>
     882:	81 11       	cpse	r24, r1
     884:	04 c0       	rjmp	.+8      	; 0x88e <dac_enable_clock+0x1e>
     886:	64 e0       	ldi	r22, 0x04	; 4
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <sysclk_enable_module>
     88e:	08 95       	ret

00000890 <dac_disable_clock>:
     890:	80 32       	cpi	r24, 0x20	; 32
     892:	93 40       	sbci	r25, 0x03	; 3
     894:	59 f4       	brne	.+22     	; 0x8ac <dac_disable_clock+0x1c>
     896:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <dacb_enable_count>
     89a:	81 50       	subi	r24, 0x01	; 1
     89c:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <dacb_enable_count>
     8a0:	81 11       	cpse	r24, r1
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <dac_disable_clock+0x1c>
     8a4:	64 e0       	ldi	r22, 0x04	; 4
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <sysclk_disable_module>
     8ac:	08 95       	ret

000008ae <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
     8ae:	9f 92       	push	r9
     8b0:	af 92       	push	r10
     8b2:	bf 92       	push	r11
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	1f 92       	push	r1
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
     8ca:	80 32       	cpi	r24, 0x20	; 32
     8cc:	23 e0       	ldi	r18, 0x03	; 3
     8ce:	92 07       	cpc	r25, r18
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <dac_write_configuration+0x26>
     8d2:	3c c0       	rjmp	.+120    	; 0x94c <dac_write_configuration+0x9e>
     8d4:	7b 01       	movw	r14, r22
     8d6:	8c 01       	movw	r16, r24
     8d8:	63 e3       	ldi	r22, 0x33	; 51
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <nvm_read_byte>
     8e2:	98 2e       	mov	r9, r24
     8e4:	62 e3       	ldi	r22, 0x32	; 50
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <nvm_read_byte>
     8ee:	a8 2e       	mov	r10, r24
     8f0:	67 e3       	ldi	r22, 0x37	; 55
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <nvm_read_byte>
     8fa:	b8 2e       	mov	r11, r24
     8fc:	66 e3       	ldi	r22, 0x36	; 54
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <nvm_read_byte>
     906:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     908:	8f b7       	in	r24, 0x3f	; 63
     90a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     90c:	f8 94       	cli
	return flags;
     90e:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     910:	c8 01       	movw	r24, r16
     912:	ae df       	rcall	.-164    	; 0x870 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
     914:	f8 01       	movw	r30, r16
     916:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
     918:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
     91a:	f7 01       	movw	r30, r14
     91c:	91 81       	ldd	r25, Z+1	; 0x01
     91e:	f8 01       	movw	r30, r16
     920:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
     922:	f7 01       	movw	r30, r14
     924:	92 81       	ldd	r25, Z+2	; 0x02
     926:	f8 01       	movw	r30, r16
     928:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
     92a:	f7 01       	movw	r30, r14
     92c:	93 81       	ldd	r25, Z+3	; 0x03
     92e:	f8 01       	movw	r30, r16
     930:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
     932:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
     934:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
     936:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
     938:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
     93a:	81 70       	andi	r24, 0x01	; 1
     93c:	f7 01       	movw	r30, r14
     93e:	90 81       	ld	r25, Z
     940:	89 2b       	or	r24, r25
     942:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
     944:	80 83       	st	Z, r24
     946:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     948:	a3 df       	rcall	.-186    	; 0x890 <dac_disable_clock>
	cpu_irq_restore(flags);
}
     94a:	df be       	out	0x3f, r13	; 63
     94c:	0f 90       	pop	r0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	df 90       	pop	r13
     95c:	cf 90       	pop	r12
     95e:	bf 90       	pop	r11
     960:	af 90       	pop	r10
     962:	9f 90       	pop	r9
     964:	08 95       	ret

00000966 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	1f 92       	push	r1
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	8c 01       	movw	r16, r24
     97c:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     97e:	8f b7       	in	r24, 0x3f	; 63
     980:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     982:	f8 94       	cli
	return flags;
     984:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     986:	c8 01       	movw	r24, r16
     988:	73 df       	rcall	.-282    	; 0x870 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
     98a:	f8 01       	movw	r30, r16
     98c:	80 81       	ld	r24, Z
     98e:	8e 7f       	andi	r24, 0xFE	; 254
     990:	f7 01       	movw	r30, r14
     992:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
     994:	f8 01       	movw	r30, r16
     996:	81 81       	ldd	r24, Z+1	; 0x01
     998:	f7 01       	movw	r30, r14
     99a:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
     99c:	f8 01       	movw	r30, r16
     99e:	82 81       	ldd	r24, Z+2	; 0x02
     9a0:	f7 01       	movw	r30, r14
     9a2:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
     9a4:	f8 01       	movw	r30, r16
     9a6:	83 81       	ldd	r24, Z+3	; 0x03
     9a8:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
     9aa:	83 83       	std	Z+3, r24	; 0x03
     9ac:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9ae:	70 df       	rcall	.-288    	; 0x890 <dac_disable_clock>
	cpu_irq_restore(flags);
}
     9b0:	df be       	out	0x3f, r13	; 63
     9b2:	0f 90       	pop	r0
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	08 95       	ret

000009c4 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
     9ce:	0b b6       	in	r0, 0x3b	; 59
     9d0:	0f 92       	push	r0
     9d2:	2f 93       	push	r18
     9d4:	3f 93       	push	r19
     9d6:	4f 93       	push	r20
     9d8:	5f 93       	push	r21
     9da:	6f 93       	push	r22
     9dc:	7f 93       	push	r23
     9de:	8f 93       	push	r24
     9e0:	9f 93       	push	r25
     9e2:	af 93       	push	r26
     9e4:	bf 93       	push	r27
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     9ea:	e0 91 95 21 	lds	r30, 0x2195	; 0x802195 <tc_tcc0_ovf_callback>
     9ee:	f0 91 96 21 	lds	r31, 0x2196	; 0x802196 <tc_tcc0_ovf_callback+0x1>
     9f2:	30 97       	sbiw	r30, 0x00	; 0
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     9f6:	19 95       	eicall
	}
}
     9f8:	ff 91       	pop	r31
     9fa:	ef 91       	pop	r30
     9fc:	bf 91       	pop	r27
     9fe:	af 91       	pop	r26
     a00:	9f 91       	pop	r25
     a02:	8f 91       	pop	r24
     a04:	7f 91       	pop	r23
     a06:	6f 91       	pop	r22
     a08:	5f 91       	pop	r21
     a0a:	4f 91       	pop	r20
     a0c:	3f 91       	pop	r19
     a0e:	2f 91       	pop	r18
     a10:	0f 90       	pop	r0
     a12:	0b be       	out	0x3b, r0	; 59
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	0f 90       	pop	r0
     a1a:	1f 90       	pop	r1
     a1c:	18 95       	reti

00000a1e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	0f 92       	push	r0
     a26:	11 24       	eor	r1, r1
     a28:	0b b6       	in	r0, 0x3b	; 59
     a2a:	0f 92       	push	r0
     a2c:	2f 93       	push	r18
     a2e:	3f 93       	push	r19
     a30:	4f 93       	push	r20
     a32:	5f 93       	push	r21
     a34:	6f 93       	push	r22
     a36:	7f 93       	push	r23
     a38:	8f 93       	push	r24
     a3a:	9f 93       	push	r25
     a3c:	af 93       	push	r26
     a3e:	bf 93       	push	r27
     a40:	ef 93       	push	r30
     a42:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     a44:	e0 91 93 21 	lds	r30, 0x2193	; 0x802193 <tc_tcc0_err_callback>
     a48:	f0 91 94 21 	lds	r31, 0x2194	; 0x802194 <tc_tcc0_err_callback+0x1>
     a4c:	30 97       	sbiw	r30, 0x00	; 0
     a4e:	09 f0       	breq	.+2      	; 0xa52 <__vector_15+0x34>
		tc_tcc0_err_callback();
     a50:	19 95       	eicall
	}
}
     a52:	ff 91       	pop	r31
     a54:	ef 91       	pop	r30
     a56:	bf 91       	pop	r27
     a58:	af 91       	pop	r26
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	7f 91       	pop	r23
     a60:	6f 91       	pop	r22
     a62:	5f 91       	pop	r21
     a64:	4f 91       	pop	r20
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	0f 90       	pop	r0
     a6c:	0b be       	out	0x3b, r0	; 59
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
     a82:	0b b6       	in	r0, 0x3b	; 59
     a84:	0f 92       	push	r0
     a86:	2f 93       	push	r18
     a88:	3f 93       	push	r19
     a8a:	4f 93       	push	r20
     a8c:	5f 93       	push	r21
     a8e:	6f 93       	push	r22
     a90:	7f 93       	push	r23
     a92:	8f 93       	push	r24
     a94:	9f 93       	push	r25
     a96:	af 93       	push	r26
     a98:	bf 93       	push	r27
     a9a:	ef 93       	push	r30
     a9c:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     a9e:	e0 91 91 21 	lds	r30, 0x2191	; 0x802191 <tc_tcc0_cca_callback>
     aa2:	f0 91 92 21 	lds	r31, 0x2192	; 0x802192 <tc_tcc0_cca_callback+0x1>
     aa6:	30 97       	sbiw	r30, 0x00	; 0
     aa8:	09 f0       	breq	.+2      	; 0xaac <__vector_16+0x34>
		tc_tcc0_cca_callback();
     aaa:	19 95       	eicall
	}
}
     aac:	ff 91       	pop	r31
     aae:	ef 91       	pop	r30
     ab0:	bf 91       	pop	r27
     ab2:	af 91       	pop	r26
     ab4:	9f 91       	pop	r25
     ab6:	8f 91       	pop	r24
     ab8:	7f 91       	pop	r23
     aba:	6f 91       	pop	r22
     abc:	5f 91       	pop	r21
     abe:	4f 91       	pop	r20
     ac0:	3f 91       	pop	r19
     ac2:	2f 91       	pop	r18
     ac4:	0f 90       	pop	r0
     ac6:	0b be       	out	0x3b, r0	; 59
     ac8:	0f 90       	pop	r0
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	0f 90       	pop	r0
     ace:	1f 90       	pop	r1
     ad0:	18 95       	reti

00000ad2 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     ad2:	1f 92       	push	r1
     ad4:	0f 92       	push	r0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	0f 92       	push	r0
     ada:	11 24       	eor	r1, r1
     adc:	0b b6       	in	r0, 0x3b	; 59
     ade:	0f 92       	push	r0
     ae0:	2f 93       	push	r18
     ae2:	3f 93       	push	r19
     ae4:	4f 93       	push	r20
     ae6:	5f 93       	push	r21
     ae8:	6f 93       	push	r22
     aea:	7f 93       	push	r23
     aec:	8f 93       	push	r24
     aee:	9f 93       	push	r25
     af0:	af 93       	push	r26
     af2:	bf 93       	push	r27
     af4:	ef 93       	push	r30
     af6:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     af8:	e0 91 8f 21 	lds	r30, 0x218F	; 0x80218f <tc_tcc0_ccb_callback>
     afc:	f0 91 90 21 	lds	r31, 0x2190	; 0x802190 <tc_tcc0_ccb_callback+0x1>
     b00:	30 97       	sbiw	r30, 0x00	; 0
     b02:	09 f0       	breq	.+2      	; 0xb06 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     b04:	19 95       	eicall
	}
}
     b06:	ff 91       	pop	r31
     b08:	ef 91       	pop	r30
     b0a:	bf 91       	pop	r27
     b0c:	af 91       	pop	r26
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	7f 91       	pop	r23
     b14:	6f 91       	pop	r22
     b16:	5f 91       	pop	r21
     b18:	4f 91       	pop	r20
     b1a:	3f 91       	pop	r19
     b1c:	2f 91       	pop	r18
     b1e:	0f 90       	pop	r0
     b20:	0b be       	out	0x3b, r0	; 59
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	0b b6       	in	r0, 0x3b	; 59
     b38:	0f 92       	push	r0
     b3a:	2f 93       	push	r18
     b3c:	3f 93       	push	r19
     b3e:	4f 93       	push	r20
     b40:	5f 93       	push	r21
     b42:	6f 93       	push	r22
     b44:	7f 93       	push	r23
     b46:	8f 93       	push	r24
     b48:	9f 93       	push	r25
     b4a:	af 93       	push	r26
     b4c:	bf 93       	push	r27
     b4e:	ef 93       	push	r30
     b50:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     b52:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <tc_tcc0_ccc_callback>
     b56:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <tc_tcc0_ccc_callback+0x1>
     b5a:	30 97       	sbiw	r30, 0x00	; 0
     b5c:	09 f0       	breq	.+2      	; 0xb60 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     b5e:	19 95       	eicall
	}
}
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	7f 91       	pop	r23
     b6e:	6f 91       	pop	r22
     b70:	5f 91       	pop	r21
     b72:	4f 91       	pop	r20
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	0b be       	out	0x3b, r0	; 59
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	0f 90       	pop	r0
     b82:	1f 90       	pop	r1
     b84:	18 95       	reti

00000b86 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     b86:	1f 92       	push	r1
     b88:	0f 92       	push	r0
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	0f 92       	push	r0
     b8e:	11 24       	eor	r1, r1
     b90:	0b b6       	in	r0, 0x3b	; 59
     b92:	0f 92       	push	r0
     b94:	2f 93       	push	r18
     b96:	3f 93       	push	r19
     b98:	4f 93       	push	r20
     b9a:	5f 93       	push	r21
     b9c:	6f 93       	push	r22
     b9e:	7f 93       	push	r23
     ba0:	8f 93       	push	r24
     ba2:	9f 93       	push	r25
     ba4:	af 93       	push	r26
     ba6:	bf 93       	push	r27
     ba8:	ef 93       	push	r30
     baa:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     bac:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <tc_tcc0_ccd_callback>
     bb0:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <tc_tcc0_ccd_callback+0x1>
     bb4:	30 97       	sbiw	r30, 0x00	; 0
     bb6:	09 f0       	breq	.+2      	; 0xbba <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     bb8:	19 95       	eicall
	}
}
     bba:	ff 91       	pop	r31
     bbc:	ef 91       	pop	r30
     bbe:	bf 91       	pop	r27
     bc0:	af 91       	pop	r26
     bc2:	9f 91       	pop	r25
     bc4:	8f 91       	pop	r24
     bc6:	7f 91       	pop	r23
     bc8:	6f 91       	pop	r22
     bca:	5f 91       	pop	r21
     bcc:	4f 91       	pop	r20
     bce:	3f 91       	pop	r19
     bd0:	2f 91       	pop	r18
     bd2:	0f 90       	pop	r0
     bd4:	0b be       	out	0x3b, r0	; 59
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     be0:	1f 92       	push	r1
     be2:	0f 92       	push	r0
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	0b b6       	in	r0, 0x3b	; 59
     bec:	0f 92       	push	r0
     bee:	2f 93       	push	r18
     bf0:	3f 93       	push	r19
     bf2:	4f 93       	push	r20
     bf4:	5f 93       	push	r21
     bf6:	6f 93       	push	r22
     bf8:	7f 93       	push	r23
     bfa:	8f 93       	push	r24
     bfc:	9f 93       	push	r25
     bfe:	af 93       	push	r26
     c00:	bf 93       	push	r27
     c02:	ef 93       	push	r30
     c04:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     c06:	e0 91 89 21 	lds	r30, 0x2189	; 0x802189 <tc_tcc1_ovf_callback>
     c0a:	f0 91 8a 21 	lds	r31, 0x218A	; 0x80218a <tc_tcc1_ovf_callback+0x1>
     c0e:	30 97       	sbiw	r30, 0x00	; 0
     c10:	09 f0       	breq	.+2      	; 0xc14 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     c12:	19 95       	eicall
	}
}
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0b be       	out	0x3b, r0	; 59
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1
     c44:	0b b6       	in	r0, 0x3b	; 59
     c46:	0f 92       	push	r0
     c48:	2f 93       	push	r18
     c4a:	3f 93       	push	r19
     c4c:	4f 93       	push	r20
     c4e:	5f 93       	push	r21
     c50:	6f 93       	push	r22
     c52:	7f 93       	push	r23
     c54:	8f 93       	push	r24
     c56:	9f 93       	push	r25
     c58:	af 93       	push	r26
     c5a:	bf 93       	push	r27
     c5c:	ef 93       	push	r30
     c5e:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     c60:	e0 91 87 21 	lds	r30, 0x2187	; 0x802187 <tc_tcc1_err_callback>
     c64:	f0 91 88 21 	lds	r31, 0x2188	; 0x802188 <tc_tcc1_err_callback+0x1>
     c68:	30 97       	sbiw	r30, 0x00	; 0
     c6a:	09 f0       	breq	.+2      	; 0xc6e <__vector_21+0x34>
		tc_tcc1_err_callback();
     c6c:	19 95       	eicall
	}
}
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0b be       	out	0x3b, r0	; 59
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	0f 90       	pop	r0
     c90:	1f 90       	pop	r1
     c92:	18 95       	reti

00000c94 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     c94:	1f 92       	push	r1
     c96:	0f 92       	push	r0
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	0b b6       	in	r0, 0x3b	; 59
     ca0:	0f 92       	push	r0
     ca2:	2f 93       	push	r18
     ca4:	3f 93       	push	r19
     ca6:	4f 93       	push	r20
     ca8:	5f 93       	push	r21
     caa:	6f 93       	push	r22
     cac:	7f 93       	push	r23
     cae:	8f 93       	push	r24
     cb0:	9f 93       	push	r25
     cb2:	af 93       	push	r26
     cb4:	bf 93       	push	r27
     cb6:	ef 93       	push	r30
     cb8:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     cba:	e0 91 85 21 	lds	r30, 0x2185	; 0x802185 <tc_tcc1_cca_callback>
     cbe:	f0 91 86 21 	lds	r31, 0x2186	; 0x802186 <tc_tcc1_cca_callback+0x1>
     cc2:	30 97       	sbiw	r30, 0x00	; 0
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <__vector_22+0x34>
		tc_tcc1_cca_callback();
     cc6:	19 95       	eicall
	}
}
     cc8:	ff 91       	pop	r31
     cca:	ef 91       	pop	r30
     ccc:	bf 91       	pop	r27
     cce:	af 91       	pop	r26
     cd0:	9f 91       	pop	r25
     cd2:	8f 91       	pop	r24
     cd4:	7f 91       	pop	r23
     cd6:	6f 91       	pop	r22
     cd8:	5f 91       	pop	r21
     cda:	4f 91       	pop	r20
     cdc:	3f 91       	pop	r19
     cde:	2f 91       	pop	r18
     ce0:	0f 90       	pop	r0
     ce2:	0b be       	out	0x3b, r0	; 59
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     cee:	1f 92       	push	r1
     cf0:	0f 92       	push	r0
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	0f 92       	push	r0
     cf6:	11 24       	eor	r1, r1
     cf8:	0b b6       	in	r0, 0x3b	; 59
     cfa:	0f 92       	push	r0
     cfc:	2f 93       	push	r18
     cfe:	3f 93       	push	r19
     d00:	4f 93       	push	r20
     d02:	5f 93       	push	r21
     d04:	6f 93       	push	r22
     d06:	7f 93       	push	r23
     d08:	8f 93       	push	r24
     d0a:	9f 93       	push	r25
     d0c:	af 93       	push	r26
     d0e:	bf 93       	push	r27
     d10:	ef 93       	push	r30
     d12:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     d14:	e0 91 83 21 	lds	r30, 0x2183	; 0x802183 <tc_tcc1_ccb_callback>
     d18:	f0 91 84 21 	lds	r31, 0x2184	; 0x802184 <tc_tcc1_ccb_callback+0x1>
     d1c:	30 97       	sbiw	r30, 0x00	; 0
     d1e:	09 f0       	breq	.+2      	; 0xd22 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     d20:	19 95       	eicall
	}
}
     d22:	ff 91       	pop	r31
     d24:	ef 91       	pop	r30
     d26:	bf 91       	pop	r27
     d28:	af 91       	pop	r26
     d2a:	9f 91       	pop	r25
     d2c:	8f 91       	pop	r24
     d2e:	7f 91       	pop	r23
     d30:	6f 91       	pop	r22
     d32:	5f 91       	pop	r21
     d34:	4f 91       	pop	r20
     d36:	3f 91       	pop	r19
     d38:	2f 91       	pop	r18
     d3a:	0f 90       	pop	r0
     d3c:	0b be       	out	0x3b, r0	; 59
     d3e:	0f 90       	pop	r0
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	0f 90       	pop	r0
     d44:	1f 90       	pop	r1
     d46:	18 95       	reti

00000d48 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     d48:	1f 92       	push	r1
     d4a:	0f 92       	push	r0
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	0f 92       	push	r0
     d50:	11 24       	eor	r1, r1
     d52:	0b b6       	in	r0, 0x3b	; 59
     d54:	0f 92       	push	r0
     d56:	2f 93       	push	r18
     d58:	3f 93       	push	r19
     d5a:	4f 93       	push	r20
     d5c:	5f 93       	push	r21
     d5e:	6f 93       	push	r22
     d60:	7f 93       	push	r23
     d62:	8f 93       	push	r24
     d64:	9f 93       	push	r25
     d66:	af 93       	push	r26
     d68:	bf 93       	push	r27
     d6a:	ef 93       	push	r30
     d6c:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     d6e:	e0 91 81 21 	lds	r30, 0x2181	; 0x802181 <tc_tcd0_ovf_callback>
     d72:	f0 91 82 21 	lds	r31, 0x2182	; 0x802182 <tc_tcd0_ovf_callback+0x1>
     d76:	30 97       	sbiw	r30, 0x00	; 0
     d78:	09 f0       	breq	.+2      	; 0xd7c <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     d7a:	19 95       	eicall
	}
}
     d7c:	ff 91       	pop	r31
     d7e:	ef 91       	pop	r30
     d80:	bf 91       	pop	r27
     d82:	af 91       	pop	r26
     d84:	9f 91       	pop	r25
     d86:	8f 91       	pop	r24
     d88:	7f 91       	pop	r23
     d8a:	6f 91       	pop	r22
     d8c:	5f 91       	pop	r21
     d8e:	4f 91       	pop	r20
     d90:	3f 91       	pop	r19
     d92:	2f 91       	pop	r18
     d94:	0f 90       	pop	r0
     d96:	0b be       	out	0x3b, r0	; 59
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	0f 90       	pop	r0
     d9e:	1f 90       	pop	r1
     da0:	18 95       	reti

00000da2 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	0b b6       	in	r0, 0x3b	; 59
     dae:	0f 92       	push	r0
     db0:	2f 93       	push	r18
     db2:	3f 93       	push	r19
     db4:	4f 93       	push	r20
     db6:	5f 93       	push	r21
     db8:	6f 93       	push	r22
     dba:	7f 93       	push	r23
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
     dc4:	ef 93       	push	r30
     dc6:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     dc8:	e0 91 7f 21 	lds	r30, 0x217F	; 0x80217f <tc_tcd0_err_callback>
     dcc:	f0 91 80 21 	lds	r31, 0x2180	; 0x802180 <tc_tcd0_err_callback+0x1>
     dd0:	30 97       	sbiw	r30, 0x00	; 0
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <__vector_78+0x34>
		tc_tcd0_err_callback();
     dd4:	19 95       	eicall
	}
}
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	0b be       	out	0x3b, r0	; 59
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     dfc:	1f 92       	push	r1
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	0b b6       	in	r0, 0x3b	; 59
     e08:	0f 92       	push	r0
     e0a:	2f 93       	push	r18
     e0c:	3f 93       	push	r19
     e0e:	4f 93       	push	r20
     e10:	5f 93       	push	r21
     e12:	6f 93       	push	r22
     e14:	7f 93       	push	r23
     e16:	8f 93       	push	r24
     e18:	9f 93       	push	r25
     e1a:	af 93       	push	r26
     e1c:	bf 93       	push	r27
     e1e:	ef 93       	push	r30
     e20:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     e22:	e0 91 7d 21 	lds	r30, 0x217D	; 0x80217d <tc_tcd0_cca_callback>
     e26:	f0 91 7e 21 	lds	r31, 0x217E	; 0x80217e <tc_tcd0_cca_callback+0x1>
     e2a:	30 97       	sbiw	r30, 0x00	; 0
     e2c:	09 f0       	breq	.+2      	; 0xe30 <__vector_79+0x34>
		tc_tcd0_cca_callback();
     e2e:	19 95       	eicall
	}
}
     e30:	ff 91       	pop	r31
     e32:	ef 91       	pop	r30
     e34:	bf 91       	pop	r27
     e36:	af 91       	pop	r26
     e38:	9f 91       	pop	r25
     e3a:	8f 91       	pop	r24
     e3c:	7f 91       	pop	r23
     e3e:	6f 91       	pop	r22
     e40:	5f 91       	pop	r21
     e42:	4f 91       	pop	r20
     e44:	3f 91       	pop	r19
     e46:	2f 91       	pop	r18
     e48:	0f 90       	pop	r0
     e4a:	0b be       	out	0x3b, r0	; 59
     e4c:	0f 90       	pop	r0
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	0b b6       	in	r0, 0x3b	; 59
     e62:	0f 92       	push	r0
     e64:	2f 93       	push	r18
     e66:	3f 93       	push	r19
     e68:	4f 93       	push	r20
     e6a:	5f 93       	push	r21
     e6c:	6f 93       	push	r22
     e6e:	7f 93       	push	r23
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     e7c:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <tc_tcd0_ccb_callback>
     e80:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <tc_tcd0_ccb_callback+0x1>
     e84:	30 97       	sbiw	r30, 0x00	; 0
     e86:	09 f0       	breq	.+2      	; 0xe8a <__vector_80+0x34>
		tc_tcd0_ccb_callback();
     e88:	19 95       	eicall
	}
}
     e8a:	ff 91       	pop	r31
     e8c:	ef 91       	pop	r30
     e8e:	bf 91       	pop	r27
     e90:	af 91       	pop	r26
     e92:	9f 91       	pop	r25
     e94:	8f 91       	pop	r24
     e96:	7f 91       	pop	r23
     e98:	6f 91       	pop	r22
     e9a:	5f 91       	pop	r21
     e9c:	4f 91       	pop	r20
     e9e:	3f 91       	pop	r19
     ea0:	2f 91       	pop	r18
     ea2:	0f 90       	pop	r0
     ea4:	0b be       	out	0x3b, r0	; 59
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	0f 90       	pop	r0
     eac:	1f 90       	pop	r1
     eae:	18 95       	reti

00000eb0 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     eb0:	1f 92       	push	r1
     eb2:	0f 92       	push	r0
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	0f 92       	push	r0
     eb8:	11 24       	eor	r1, r1
     eba:	0b b6       	in	r0, 0x3b	; 59
     ebc:	0f 92       	push	r0
     ebe:	2f 93       	push	r18
     ec0:	3f 93       	push	r19
     ec2:	4f 93       	push	r20
     ec4:	5f 93       	push	r21
     ec6:	6f 93       	push	r22
     ec8:	7f 93       	push	r23
     eca:	8f 93       	push	r24
     ecc:	9f 93       	push	r25
     ece:	af 93       	push	r26
     ed0:	bf 93       	push	r27
     ed2:	ef 93       	push	r30
     ed4:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     ed6:	e0 91 79 21 	lds	r30, 0x2179	; 0x802179 <tc_tcd0_ccc_callback>
     eda:	f0 91 7a 21 	lds	r31, 0x217A	; 0x80217a <tc_tcd0_ccc_callback+0x1>
     ede:	30 97       	sbiw	r30, 0x00	; 0
     ee0:	09 f0       	breq	.+2      	; 0xee4 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
     ee2:	19 95       	eicall
	}
}
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	bf 91       	pop	r27
     eea:	af 91       	pop	r26
     eec:	9f 91       	pop	r25
     eee:	8f 91       	pop	r24
     ef0:	7f 91       	pop	r23
     ef2:	6f 91       	pop	r22
     ef4:	5f 91       	pop	r21
     ef6:	4f 91       	pop	r20
     ef8:	3f 91       	pop	r19
     efa:	2f 91       	pop	r18
     efc:	0f 90       	pop	r0
     efe:	0b be       	out	0x3b, r0	; 59
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	1f 90       	pop	r1
     f08:	18 95       	reti

00000f0a <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     f0a:	1f 92       	push	r1
     f0c:	0f 92       	push	r0
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	0f 92       	push	r0
     f12:	11 24       	eor	r1, r1
     f14:	0b b6       	in	r0, 0x3b	; 59
     f16:	0f 92       	push	r0
     f18:	2f 93       	push	r18
     f1a:	3f 93       	push	r19
     f1c:	4f 93       	push	r20
     f1e:	5f 93       	push	r21
     f20:	6f 93       	push	r22
     f22:	7f 93       	push	r23
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	af 93       	push	r26
     f2a:	bf 93       	push	r27
     f2c:	ef 93       	push	r30
     f2e:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     f30:	e0 91 77 21 	lds	r30, 0x2177	; 0x802177 <tc_tcd0_ccd_callback>
     f34:	f0 91 78 21 	lds	r31, 0x2178	; 0x802178 <tc_tcd0_ccd_callback+0x1>
     f38:	30 97       	sbiw	r30, 0x00	; 0
     f3a:	09 f0       	breq	.+2      	; 0xf3e <__vector_82+0x34>
		tc_tcd0_ccd_callback();
     f3c:	19 95       	eicall
	}
}
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0b be       	out	0x3b, r0	; 59
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     f64:	1f 92       	push	r1
     f66:	0f 92       	push	r0
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	0f 92       	push	r0
     f6c:	11 24       	eor	r1, r1
     f6e:	0b b6       	in	r0, 0x3b	; 59
     f70:	0f 92       	push	r0
     f72:	2f 93       	push	r18
     f74:	3f 93       	push	r19
     f76:	4f 93       	push	r20
     f78:	5f 93       	push	r21
     f7a:	6f 93       	push	r22
     f7c:	7f 93       	push	r23
     f7e:	8f 93       	push	r24
     f80:	9f 93       	push	r25
     f82:	af 93       	push	r26
     f84:	bf 93       	push	r27
     f86:	ef 93       	push	r30
     f88:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     f8a:	e0 91 75 21 	lds	r30, 0x2175	; 0x802175 <tc_tcd1_ovf_callback>
     f8e:	f0 91 76 21 	lds	r31, 0x2176	; 0x802176 <tc_tcd1_ovf_callback+0x1>
     f92:	30 97       	sbiw	r30, 0x00	; 0
     f94:	09 f0       	breq	.+2      	; 0xf98 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
     f96:	19 95       	eicall
	}
}
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	bf 91       	pop	r27
     f9e:	af 91       	pop	r26
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	7f 91       	pop	r23
     fa6:	6f 91       	pop	r22
     fa8:	5f 91       	pop	r21
     faa:	4f 91       	pop	r20
     fac:	3f 91       	pop	r19
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0b be       	out	0x3b, r0	; 59
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	0f 90       	pop	r0
     fba:	1f 90       	pop	r1
     fbc:	18 95       	reti

00000fbe <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     fbe:	1f 92       	push	r1
     fc0:	0f 92       	push	r0
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	0f 92       	push	r0
     fc6:	11 24       	eor	r1, r1
     fc8:	0b b6       	in	r0, 0x3b	; 59
     fca:	0f 92       	push	r0
     fcc:	2f 93       	push	r18
     fce:	3f 93       	push	r19
     fd0:	4f 93       	push	r20
     fd2:	5f 93       	push	r21
     fd4:	6f 93       	push	r22
     fd6:	7f 93       	push	r23
     fd8:	8f 93       	push	r24
     fda:	9f 93       	push	r25
     fdc:	af 93       	push	r26
     fde:	bf 93       	push	r27
     fe0:	ef 93       	push	r30
     fe2:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     fe4:	e0 91 73 21 	lds	r30, 0x2173	; 0x802173 <tc_tcd1_err_callback>
     fe8:	f0 91 74 21 	lds	r31, 0x2174	; 0x802174 <tc_tcd1_err_callback+0x1>
     fec:	30 97       	sbiw	r30, 0x00	; 0
     fee:	09 f0       	breq	.+2      	; 0xff2 <__vector_84+0x34>
		tc_tcd1_err_callback();
     ff0:	19 95       	eicall
	}
}
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0b be       	out	0x3b, r0	; 59
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1018:	1f 92       	push	r1
    101a:	0f 92       	push	r0
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	0f 92       	push	r0
    1020:	11 24       	eor	r1, r1
    1022:	0b b6       	in	r0, 0x3b	; 59
    1024:	0f 92       	push	r0
    1026:	2f 93       	push	r18
    1028:	3f 93       	push	r19
    102a:	4f 93       	push	r20
    102c:	5f 93       	push	r21
    102e:	6f 93       	push	r22
    1030:	7f 93       	push	r23
    1032:	8f 93       	push	r24
    1034:	9f 93       	push	r25
    1036:	af 93       	push	r26
    1038:	bf 93       	push	r27
    103a:	ef 93       	push	r30
    103c:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    103e:	e0 91 71 21 	lds	r30, 0x2171	; 0x802171 <tc_tcd1_cca_callback>
    1042:	f0 91 72 21 	lds	r31, 0x2172	; 0x802172 <tc_tcd1_cca_callback+0x1>
    1046:	30 97       	sbiw	r30, 0x00	; 0
    1048:	09 f0       	breq	.+2      	; 0x104c <__vector_85+0x34>
		tc_tcd1_cca_callback();
    104a:	19 95       	eicall
	}
}
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	bf 91       	pop	r27
    1052:	af 91       	pop	r26
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	7f 91       	pop	r23
    105a:	6f 91       	pop	r22
    105c:	5f 91       	pop	r21
    105e:	4f 91       	pop	r20
    1060:	3f 91       	pop	r19
    1062:	2f 91       	pop	r18
    1064:	0f 90       	pop	r0
    1066:	0b be       	out	0x3b, r0	; 59
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	0f 90       	pop	r0
    106e:	1f 90       	pop	r1
    1070:	18 95       	reti

00001072 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1072:	1f 92       	push	r1
    1074:	0f 92       	push	r0
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	0f 92       	push	r0
    107a:	11 24       	eor	r1, r1
    107c:	0b b6       	in	r0, 0x3b	; 59
    107e:	0f 92       	push	r0
    1080:	2f 93       	push	r18
    1082:	3f 93       	push	r19
    1084:	4f 93       	push	r20
    1086:	5f 93       	push	r21
    1088:	6f 93       	push	r22
    108a:	7f 93       	push	r23
    108c:	8f 93       	push	r24
    108e:	9f 93       	push	r25
    1090:	af 93       	push	r26
    1092:	bf 93       	push	r27
    1094:	ef 93       	push	r30
    1096:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1098:	e0 91 6f 21 	lds	r30, 0x216F	; 0x80216f <tc_tcd1_ccb_callback>
    109c:	f0 91 70 21 	lds	r31, 0x2170	; 0x802170 <tc_tcd1_ccb_callback+0x1>
    10a0:	30 97       	sbiw	r30, 0x00	; 0
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    10a4:	19 95       	eicall
	}
}
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	7f 91       	pop	r23
    10b4:	6f 91       	pop	r22
    10b6:	5f 91       	pop	r21
    10b8:	4f 91       	pop	r20
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0b be       	out	0x3b, r0	; 59
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	0b b6       	in	r0, 0x3b	; 59
    10d8:	0f 92       	push	r0
    10da:	2f 93       	push	r18
    10dc:	3f 93       	push	r19
    10de:	4f 93       	push	r20
    10e0:	5f 93       	push	r21
    10e2:	6f 93       	push	r22
    10e4:	7f 93       	push	r23
    10e6:	8f 93       	push	r24
    10e8:	9f 93       	push	r25
    10ea:	af 93       	push	r26
    10ec:	bf 93       	push	r27
    10ee:	ef 93       	push	r30
    10f0:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    10f2:	e0 91 6d 21 	lds	r30, 0x216D	; 0x80216d <tc_tce0_ovf_callback>
    10f6:	f0 91 6e 21 	lds	r31, 0x216E	; 0x80216e <tc_tce0_ovf_callback+0x1>
    10fa:	30 97       	sbiw	r30, 0x00	; 0
    10fc:	09 f0       	breq	.+2      	; 0x1100 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    10fe:	19 95       	eicall
	}
}
    1100:	ff 91       	pop	r31
    1102:	ef 91       	pop	r30
    1104:	bf 91       	pop	r27
    1106:	af 91       	pop	r26
    1108:	9f 91       	pop	r25
    110a:	8f 91       	pop	r24
    110c:	7f 91       	pop	r23
    110e:	6f 91       	pop	r22
    1110:	5f 91       	pop	r21
    1112:	4f 91       	pop	r20
    1114:	3f 91       	pop	r19
    1116:	2f 91       	pop	r18
    1118:	0f 90       	pop	r0
    111a:	0b be       	out	0x3b, r0	; 59
    111c:	0f 90       	pop	r0
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	0f 90       	pop	r0
    1122:	1f 90       	pop	r1
    1124:	18 95       	reti

00001126 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1126:	1f 92       	push	r1
    1128:	0f 92       	push	r0
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	0f 92       	push	r0
    112e:	11 24       	eor	r1, r1
    1130:	0b b6       	in	r0, 0x3b	; 59
    1132:	0f 92       	push	r0
    1134:	2f 93       	push	r18
    1136:	3f 93       	push	r19
    1138:	4f 93       	push	r20
    113a:	5f 93       	push	r21
    113c:	6f 93       	push	r22
    113e:	7f 93       	push	r23
    1140:	8f 93       	push	r24
    1142:	9f 93       	push	r25
    1144:	af 93       	push	r26
    1146:	bf 93       	push	r27
    1148:	ef 93       	push	r30
    114a:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    114c:	e0 91 6b 21 	lds	r30, 0x216B	; 0x80216b <tc_tce0_err_callback>
    1150:	f0 91 6c 21 	lds	r31, 0x216C	; 0x80216c <tc_tce0_err_callback+0x1>
    1154:	30 97       	sbiw	r30, 0x00	; 0
    1156:	09 f0       	breq	.+2      	; 0x115a <__vector_48+0x34>
		tc_tce0_err_callback();
    1158:	19 95       	eicall
	}
}
    115a:	ff 91       	pop	r31
    115c:	ef 91       	pop	r30
    115e:	bf 91       	pop	r27
    1160:	af 91       	pop	r26
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	7f 91       	pop	r23
    1168:	6f 91       	pop	r22
    116a:	5f 91       	pop	r21
    116c:	4f 91       	pop	r20
    116e:	3f 91       	pop	r19
    1170:	2f 91       	pop	r18
    1172:	0f 90       	pop	r0
    1174:	0b be       	out	0x3b, r0	; 59
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	0b b6       	in	r0, 0x3b	; 59
    118c:	0f 92       	push	r0
    118e:	2f 93       	push	r18
    1190:	3f 93       	push	r19
    1192:	4f 93       	push	r20
    1194:	5f 93       	push	r21
    1196:	6f 93       	push	r22
    1198:	7f 93       	push	r23
    119a:	8f 93       	push	r24
    119c:	9f 93       	push	r25
    119e:	af 93       	push	r26
    11a0:	bf 93       	push	r27
    11a2:	ef 93       	push	r30
    11a4:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    11a6:	e0 91 69 21 	lds	r30, 0x2169	; 0x802169 <tc_tce0_cca_callback>
    11aa:	f0 91 6a 21 	lds	r31, 0x216A	; 0x80216a <tc_tce0_cca_callback+0x1>
    11ae:	30 97       	sbiw	r30, 0x00	; 0
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <__vector_49+0x34>
		tc_tce0_cca_callback();
    11b2:	19 95       	eicall
	}
}
    11b4:	ff 91       	pop	r31
    11b6:	ef 91       	pop	r30
    11b8:	bf 91       	pop	r27
    11ba:	af 91       	pop	r26
    11bc:	9f 91       	pop	r25
    11be:	8f 91       	pop	r24
    11c0:	7f 91       	pop	r23
    11c2:	6f 91       	pop	r22
    11c4:	5f 91       	pop	r21
    11c6:	4f 91       	pop	r20
    11c8:	3f 91       	pop	r19
    11ca:	2f 91       	pop	r18
    11cc:	0f 90       	pop	r0
    11ce:	0b be       	out	0x3b, r0	; 59
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    11da:	1f 92       	push	r1
    11dc:	0f 92       	push	r0
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	0f 92       	push	r0
    11e2:	11 24       	eor	r1, r1
    11e4:	0b b6       	in	r0, 0x3b	; 59
    11e6:	0f 92       	push	r0
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	4f 93       	push	r20
    11ee:	5f 93       	push	r21
    11f0:	6f 93       	push	r22
    11f2:	7f 93       	push	r23
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	af 93       	push	r26
    11fa:	bf 93       	push	r27
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1200:	e0 91 67 21 	lds	r30, 0x2167	; 0x802167 <tc_tce0_ccb_callback>
    1204:	f0 91 68 21 	lds	r31, 0x2168	; 0x802168 <tc_tce0_ccb_callback+0x1>
    1208:	30 97       	sbiw	r30, 0x00	; 0
    120a:	09 f0       	breq	.+2      	; 0x120e <__vector_50+0x34>
		tc_tce0_ccb_callback();
    120c:	19 95       	eicall
	}
}
    120e:	ff 91       	pop	r31
    1210:	ef 91       	pop	r30
    1212:	bf 91       	pop	r27
    1214:	af 91       	pop	r26
    1216:	9f 91       	pop	r25
    1218:	8f 91       	pop	r24
    121a:	7f 91       	pop	r23
    121c:	6f 91       	pop	r22
    121e:	5f 91       	pop	r21
    1220:	4f 91       	pop	r20
    1222:	3f 91       	pop	r19
    1224:	2f 91       	pop	r18
    1226:	0f 90       	pop	r0
    1228:	0b be       	out	0x3b, r0	; 59
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	1f 90       	pop	r1
    1232:	18 95       	reti

00001234 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1234:	1f 92       	push	r1
    1236:	0f 92       	push	r0
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	0f 92       	push	r0
    123c:	11 24       	eor	r1, r1
    123e:	0b b6       	in	r0, 0x3b	; 59
    1240:	0f 92       	push	r0
    1242:	2f 93       	push	r18
    1244:	3f 93       	push	r19
    1246:	4f 93       	push	r20
    1248:	5f 93       	push	r21
    124a:	6f 93       	push	r22
    124c:	7f 93       	push	r23
    124e:	8f 93       	push	r24
    1250:	9f 93       	push	r25
    1252:	af 93       	push	r26
    1254:	bf 93       	push	r27
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    125a:	e0 91 65 21 	lds	r30, 0x2165	; 0x802165 <tc_tce0_ccc_callback>
    125e:	f0 91 66 21 	lds	r31, 0x2166	; 0x802166 <tc_tce0_ccc_callback+0x1>
    1262:	30 97       	sbiw	r30, 0x00	; 0
    1264:	09 f0       	breq	.+2      	; 0x1268 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1266:	19 95       	eicall
	}
}
    1268:	ff 91       	pop	r31
    126a:	ef 91       	pop	r30
    126c:	bf 91       	pop	r27
    126e:	af 91       	pop	r26
    1270:	9f 91       	pop	r25
    1272:	8f 91       	pop	r24
    1274:	7f 91       	pop	r23
    1276:	6f 91       	pop	r22
    1278:	5f 91       	pop	r21
    127a:	4f 91       	pop	r20
    127c:	3f 91       	pop	r19
    127e:	2f 91       	pop	r18
    1280:	0f 90       	pop	r0
    1282:	0b be       	out	0x3b, r0	; 59
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	0f 90       	pop	r0
    128a:	1f 90       	pop	r1
    128c:	18 95       	reti

0000128e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    128e:	1f 92       	push	r1
    1290:	0f 92       	push	r0
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	0f 92       	push	r0
    1296:	11 24       	eor	r1, r1
    1298:	0b b6       	in	r0, 0x3b	; 59
    129a:	0f 92       	push	r0
    129c:	2f 93       	push	r18
    129e:	3f 93       	push	r19
    12a0:	4f 93       	push	r20
    12a2:	5f 93       	push	r21
    12a4:	6f 93       	push	r22
    12a6:	7f 93       	push	r23
    12a8:	8f 93       	push	r24
    12aa:	9f 93       	push	r25
    12ac:	af 93       	push	r26
    12ae:	bf 93       	push	r27
    12b0:	ef 93       	push	r30
    12b2:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    12b4:	e0 91 63 21 	lds	r30, 0x2163	; 0x802163 <tc_tce0_ccd_callback>
    12b8:	f0 91 64 21 	lds	r31, 0x2164	; 0x802164 <tc_tce0_ccd_callback+0x1>
    12bc:	30 97       	sbiw	r30, 0x00	; 0
    12be:	09 f0       	breq	.+2      	; 0x12c2 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    12c0:	19 95       	eicall
	}
}
    12c2:	ff 91       	pop	r31
    12c4:	ef 91       	pop	r30
    12c6:	bf 91       	pop	r27
    12c8:	af 91       	pop	r26
    12ca:	9f 91       	pop	r25
    12cc:	8f 91       	pop	r24
    12ce:	7f 91       	pop	r23
    12d0:	6f 91       	pop	r22
    12d2:	5f 91       	pop	r21
    12d4:	4f 91       	pop	r20
    12d6:	3f 91       	pop	r19
    12d8:	2f 91       	pop	r18
    12da:	0f 90       	pop	r0
    12dc:	0b be       	out	0x3b, r0	; 59
    12de:	0f 90       	pop	r0
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	0f 90       	pop	r0
    12e4:	1f 90       	pop	r1
    12e6:	18 95       	reti

000012e8 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    12e8:	1f 92       	push	r1
    12ea:	0f 92       	push	r0
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	0f 92       	push	r0
    12f0:	11 24       	eor	r1, r1
    12f2:	0b b6       	in	r0, 0x3b	; 59
    12f4:	0f 92       	push	r0
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    130e:	e0 91 61 21 	lds	r30, 0x2161	; 0x802161 <tc_tce1_ovf_callback>
    1312:	f0 91 62 21 	lds	r31, 0x2162	; 0x802162 <tc_tce1_ovf_callback+0x1>
    1316:	30 97       	sbiw	r30, 0x00	; 0
    1318:	09 f0       	breq	.+2      	; 0x131c <__vector_53+0x34>
		tc_tce1_ovf_callback();
    131a:	19 95       	eicall
	}
}
    131c:	ff 91       	pop	r31
    131e:	ef 91       	pop	r30
    1320:	bf 91       	pop	r27
    1322:	af 91       	pop	r26
    1324:	9f 91       	pop	r25
    1326:	8f 91       	pop	r24
    1328:	7f 91       	pop	r23
    132a:	6f 91       	pop	r22
    132c:	5f 91       	pop	r21
    132e:	4f 91       	pop	r20
    1330:	3f 91       	pop	r19
    1332:	2f 91       	pop	r18
    1334:	0f 90       	pop	r0
    1336:	0b be       	out	0x3b, r0	; 59
    1338:	0f 90       	pop	r0
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	0f 90       	pop	r0
    133e:	1f 90       	pop	r1
    1340:	18 95       	reti

00001342 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1342:	1f 92       	push	r1
    1344:	0f 92       	push	r0
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	0f 92       	push	r0
    134a:	11 24       	eor	r1, r1
    134c:	0b b6       	in	r0, 0x3b	; 59
    134e:	0f 92       	push	r0
    1350:	2f 93       	push	r18
    1352:	3f 93       	push	r19
    1354:	4f 93       	push	r20
    1356:	5f 93       	push	r21
    1358:	6f 93       	push	r22
    135a:	7f 93       	push	r23
    135c:	8f 93       	push	r24
    135e:	9f 93       	push	r25
    1360:	af 93       	push	r26
    1362:	bf 93       	push	r27
    1364:	ef 93       	push	r30
    1366:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1368:	e0 91 5f 21 	lds	r30, 0x215F	; 0x80215f <tc_tce1_err_callback>
    136c:	f0 91 60 21 	lds	r31, 0x2160	; 0x802160 <tc_tce1_err_callback+0x1>
    1370:	30 97       	sbiw	r30, 0x00	; 0
    1372:	09 f0       	breq	.+2      	; 0x1376 <__vector_54+0x34>
		tc_tce1_err_callback();
    1374:	19 95       	eicall
	}
}
    1376:	ff 91       	pop	r31
    1378:	ef 91       	pop	r30
    137a:	bf 91       	pop	r27
    137c:	af 91       	pop	r26
    137e:	9f 91       	pop	r25
    1380:	8f 91       	pop	r24
    1382:	7f 91       	pop	r23
    1384:	6f 91       	pop	r22
    1386:	5f 91       	pop	r21
    1388:	4f 91       	pop	r20
    138a:	3f 91       	pop	r19
    138c:	2f 91       	pop	r18
    138e:	0f 90       	pop	r0
    1390:	0b be       	out	0x3b, r0	; 59
    1392:	0f 90       	pop	r0
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	0f 90       	pop	r0
    1398:	1f 90       	pop	r1
    139a:	18 95       	reti

0000139c <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    139c:	1f 92       	push	r1
    139e:	0f 92       	push	r0
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	0f 92       	push	r0
    13a4:	11 24       	eor	r1, r1
    13a6:	0b b6       	in	r0, 0x3b	; 59
    13a8:	0f 92       	push	r0
    13aa:	2f 93       	push	r18
    13ac:	3f 93       	push	r19
    13ae:	4f 93       	push	r20
    13b0:	5f 93       	push	r21
    13b2:	6f 93       	push	r22
    13b4:	7f 93       	push	r23
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	af 93       	push	r26
    13bc:	bf 93       	push	r27
    13be:	ef 93       	push	r30
    13c0:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    13c2:	e0 91 5d 21 	lds	r30, 0x215D	; 0x80215d <tc_tce1_cca_callback>
    13c6:	f0 91 5e 21 	lds	r31, 0x215E	; 0x80215e <tc_tce1_cca_callback+0x1>
    13ca:	30 97       	sbiw	r30, 0x00	; 0
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <__vector_55+0x34>
		tc_tce1_cca_callback();
    13ce:	19 95       	eicall
	}
}
    13d0:	ff 91       	pop	r31
    13d2:	ef 91       	pop	r30
    13d4:	bf 91       	pop	r27
    13d6:	af 91       	pop	r26
    13d8:	9f 91       	pop	r25
    13da:	8f 91       	pop	r24
    13dc:	7f 91       	pop	r23
    13de:	6f 91       	pop	r22
    13e0:	5f 91       	pop	r21
    13e2:	4f 91       	pop	r20
    13e4:	3f 91       	pop	r19
    13e6:	2f 91       	pop	r18
    13e8:	0f 90       	pop	r0
    13ea:	0b be       	out	0x3b, r0	; 59
    13ec:	0f 90       	pop	r0
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	0f 90       	pop	r0
    13f2:	1f 90       	pop	r1
    13f4:	18 95       	reti

000013f6 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    13f6:	1f 92       	push	r1
    13f8:	0f 92       	push	r0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	0f 92       	push	r0
    13fe:	11 24       	eor	r1, r1
    1400:	0b b6       	in	r0, 0x3b	; 59
    1402:	0f 92       	push	r0
    1404:	2f 93       	push	r18
    1406:	3f 93       	push	r19
    1408:	4f 93       	push	r20
    140a:	5f 93       	push	r21
    140c:	6f 93       	push	r22
    140e:	7f 93       	push	r23
    1410:	8f 93       	push	r24
    1412:	9f 93       	push	r25
    1414:	af 93       	push	r26
    1416:	bf 93       	push	r27
    1418:	ef 93       	push	r30
    141a:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    141c:	e0 91 5b 21 	lds	r30, 0x215B	; 0x80215b <tc_tce1_ccb_callback>
    1420:	f0 91 5c 21 	lds	r31, 0x215C	; 0x80215c <tc_tce1_ccb_callback+0x1>
    1424:	30 97       	sbiw	r30, 0x00	; 0
    1426:	09 f0       	breq	.+2      	; 0x142a <__vector_56+0x34>
		tc_tce1_ccb_callback();
    1428:	19 95       	eicall
	}
}
    142a:	ff 91       	pop	r31
    142c:	ef 91       	pop	r30
    142e:	bf 91       	pop	r27
    1430:	af 91       	pop	r26
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	7f 91       	pop	r23
    1438:	6f 91       	pop	r22
    143a:	5f 91       	pop	r21
    143c:	4f 91       	pop	r20
    143e:	3f 91       	pop	r19
    1440:	2f 91       	pop	r18
    1442:	0f 90       	pop	r0
    1444:	0b be       	out	0x3b, r0	; 59
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0
    144c:	1f 90       	pop	r1
    144e:	18 95       	reti

00001450 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1450:	1f 92       	push	r1
    1452:	0f 92       	push	r0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    145a:	0b b6       	in	r0, 0x3b	; 59
    145c:	0f 92       	push	r0
    145e:	2f 93       	push	r18
    1460:	3f 93       	push	r19
    1462:	4f 93       	push	r20
    1464:	5f 93       	push	r21
    1466:	6f 93       	push	r22
    1468:	7f 93       	push	r23
    146a:	8f 93       	push	r24
    146c:	9f 93       	push	r25
    146e:	af 93       	push	r26
    1470:	bf 93       	push	r27
    1472:	ef 93       	push	r30
    1474:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1476:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <tc_tcf0_ovf_callback>
    147a:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <tc_tcf0_ovf_callback+0x1>
    147e:	30 97       	sbiw	r30, 0x00	; 0
    1480:	09 f0       	breq	.+2      	; 0x1484 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1482:	19 95       	eicall
	}
}
    1484:	ff 91       	pop	r31
    1486:	ef 91       	pop	r30
    1488:	bf 91       	pop	r27
    148a:	af 91       	pop	r26
    148c:	9f 91       	pop	r25
    148e:	8f 91       	pop	r24
    1490:	7f 91       	pop	r23
    1492:	6f 91       	pop	r22
    1494:	5f 91       	pop	r21
    1496:	4f 91       	pop	r20
    1498:	3f 91       	pop	r19
    149a:	2f 91       	pop	r18
    149c:	0f 90       	pop	r0
    149e:	0b be       	out	0x3b, r0	; 59
    14a0:	0f 90       	pop	r0
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	0f 90       	pop	r0
    14a6:	1f 90       	pop	r1
    14a8:	18 95       	reti

000014aa <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	0b b6       	in	r0, 0x3b	; 59
    14b6:	0f 92       	push	r0
    14b8:	2f 93       	push	r18
    14ba:	3f 93       	push	r19
    14bc:	4f 93       	push	r20
    14be:	5f 93       	push	r21
    14c0:	6f 93       	push	r22
    14c2:	7f 93       	push	r23
    14c4:	8f 93       	push	r24
    14c6:	9f 93       	push	r25
    14c8:	af 93       	push	r26
    14ca:	bf 93       	push	r27
    14cc:	ef 93       	push	r30
    14ce:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    14d0:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <tc_tcf0_err_callback>
    14d4:	f0 91 58 21 	lds	r31, 0x2158	; 0x802158 <tc_tcf0_err_callback+0x1>
    14d8:	30 97       	sbiw	r30, 0x00	; 0
    14da:	09 f0       	breq	.+2      	; 0x14de <__vector_109+0x34>
		tc_tcf0_err_callback();
    14dc:	19 95       	eicall
	}
}
    14de:	ff 91       	pop	r31
    14e0:	ef 91       	pop	r30
    14e2:	bf 91       	pop	r27
    14e4:	af 91       	pop	r26
    14e6:	9f 91       	pop	r25
    14e8:	8f 91       	pop	r24
    14ea:	7f 91       	pop	r23
    14ec:	6f 91       	pop	r22
    14ee:	5f 91       	pop	r21
    14f0:	4f 91       	pop	r20
    14f2:	3f 91       	pop	r19
    14f4:	2f 91       	pop	r18
    14f6:	0f 90       	pop	r0
    14f8:	0b be       	out	0x3b, r0	; 59
    14fa:	0f 90       	pop	r0
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	0f 90       	pop	r0
    1500:	1f 90       	pop	r1
    1502:	18 95       	reti

00001504 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1504:	1f 92       	push	r1
    1506:	0f 92       	push	r0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	0f 92       	push	r0
    150c:	11 24       	eor	r1, r1
    150e:	0b b6       	in	r0, 0x3b	; 59
    1510:	0f 92       	push	r0
    1512:	2f 93       	push	r18
    1514:	3f 93       	push	r19
    1516:	4f 93       	push	r20
    1518:	5f 93       	push	r21
    151a:	6f 93       	push	r22
    151c:	7f 93       	push	r23
    151e:	8f 93       	push	r24
    1520:	9f 93       	push	r25
    1522:	af 93       	push	r26
    1524:	bf 93       	push	r27
    1526:	ef 93       	push	r30
    1528:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    152a:	e0 91 55 21 	lds	r30, 0x2155	; 0x802155 <tc_tcf0_cca_callback>
    152e:	f0 91 56 21 	lds	r31, 0x2156	; 0x802156 <tc_tcf0_cca_callback+0x1>
    1532:	30 97       	sbiw	r30, 0x00	; 0
    1534:	09 f0       	breq	.+2      	; 0x1538 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    1536:	19 95       	eicall
	}
}
    1538:	ff 91       	pop	r31
    153a:	ef 91       	pop	r30
    153c:	bf 91       	pop	r27
    153e:	af 91       	pop	r26
    1540:	9f 91       	pop	r25
    1542:	8f 91       	pop	r24
    1544:	7f 91       	pop	r23
    1546:	6f 91       	pop	r22
    1548:	5f 91       	pop	r21
    154a:	4f 91       	pop	r20
    154c:	3f 91       	pop	r19
    154e:	2f 91       	pop	r18
    1550:	0f 90       	pop	r0
    1552:	0b be       	out	0x3b, r0	; 59
    1554:	0f 90       	pop	r0
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	0f 90       	pop	r0
    155a:	1f 90       	pop	r1
    155c:	18 95       	reti

0000155e <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    155e:	1f 92       	push	r1
    1560:	0f 92       	push	r0
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	0f 92       	push	r0
    1566:	11 24       	eor	r1, r1
    1568:	0b b6       	in	r0, 0x3b	; 59
    156a:	0f 92       	push	r0
    156c:	2f 93       	push	r18
    156e:	3f 93       	push	r19
    1570:	4f 93       	push	r20
    1572:	5f 93       	push	r21
    1574:	6f 93       	push	r22
    1576:	7f 93       	push	r23
    1578:	8f 93       	push	r24
    157a:	9f 93       	push	r25
    157c:	af 93       	push	r26
    157e:	bf 93       	push	r27
    1580:	ef 93       	push	r30
    1582:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1584:	e0 91 53 21 	lds	r30, 0x2153	; 0x802153 <tc_tcf0_ccb_callback>
    1588:	f0 91 54 21 	lds	r31, 0x2154	; 0x802154 <tc_tcf0_ccb_callback+0x1>
    158c:	30 97       	sbiw	r30, 0x00	; 0
    158e:	09 f0       	breq	.+2      	; 0x1592 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1590:	19 95       	eicall
	}
}
    1592:	ff 91       	pop	r31
    1594:	ef 91       	pop	r30
    1596:	bf 91       	pop	r27
    1598:	af 91       	pop	r26
    159a:	9f 91       	pop	r25
    159c:	8f 91       	pop	r24
    159e:	7f 91       	pop	r23
    15a0:	6f 91       	pop	r22
    15a2:	5f 91       	pop	r21
    15a4:	4f 91       	pop	r20
    15a6:	3f 91       	pop	r19
    15a8:	2f 91       	pop	r18
    15aa:	0f 90       	pop	r0
    15ac:	0b be       	out	0x3b, r0	; 59
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	0f 90       	pop	r0
    15b4:	1f 90       	pop	r1
    15b6:	18 95       	reti

000015b8 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    15b8:	1f 92       	push	r1
    15ba:	0f 92       	push	r0
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	0f 92       	push	r0
    15c0:	11 24       	eor	r1, r1
    15c2:	0b b6       	in	r0, 0x3b	; 59
    15c4:	0f 92       	push	r0
    15c6:	2f 93       	push	r18
    15c8:	3f 93       	push	r19
    15ca:	4f 93       	push	r20
    15cc:	5f 93       	push	r21
    15ce:	6f 93       	push	r22
    15d0:	7f 93       	push	r23
    15d2:	8f 93       	push	r24
    15d4:	9f 93       	push	r25
    15d6:	af 93       	push	r26
    15d8:	bf 93       	push	r27
    15da:	ef 93       	push	r30
    15dc:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    15de:	e0 91 51 21 	lds	r30, 0x2151	; 0x802151 <tc_tcf0_ccc_callback>
    15e2:	f0 91 52 21 	lds	r31, 0x2152	; 0x802152 <tc_tcf0_ccc_callback+0x1>
    15e6:	30 97       	sbiw	r30, 0x00	; 0
    15e8:	09 f0       	breq	.+2      	; 0x15ec <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    15ea:	19 95       	eicall
	}
}
    15ec:	ff 91       	pop	r31
    15ee:	ef 91       	pop	r30
    15f0:	bf 91       	pop	r27
    15f2:	af 91       	pop	r26
    15f4:	9f 91       	pop	r25
    15f6:	8f 91       	pop	r24
    15f8:	7f 91       	pop	r23
    15fa:	6f 91       	pop	r22
    15fc:	5f 91       	pop	r21
    15fe:	4f 91       	pop	r20
    1600:	3f 91       	pop	r19
    1602:	2f 91       	pop	r18
    1604:	0f 90       	pop	r0
    1606:	0b be       	out	0x3b, r0	; 59
    1608:	0f 90       	pop	r0
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	0f 90       	pop	r0
    160e:	1f 90       	pop	r1
    1610:	18 95       	reti

00001612 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	0b b6       	in	r0, 0x3b	; 59
    161e:	0f 92       	push	r0
    1620:	2f 93       	push	r18
    1622:	3f 93       	push	r19
    1624:	4f 93       	push	r20
    1626:	5f 93       	push	r21
    1628:	6f 93       	push	r22
    162a:	7f 93       	push	r23
    162c:	8f 93       	push	r24
    162e:	9f 93       	push	r25
    1630:	af 93       	push	r26
    1632:	bf 93       	push	r27
    1634:	ef 93       	push	r30
    1636:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1638:	e0 91 4f 21 	lds	r30, 0x214F	; 0x80214f <tc_tcf0_ccd_callback>
    163c:	f0 91 50 21 	lds	r31, 0x2150	; 0x802150 <tc_tcf0_ccd_callback+0x1>
    1640:	30 97       	sbiw	r30, 0x00	; 0
    1642:	09 f0       	breq	.+2      	; 0x1646 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    1644:	19 95       	eicall
	}
}
    1646:	ff 91       	pop	r31
    1648:	ef 91       	pop	r30
    164a:	bf 91       	pop	r27
    164c:	af 91       	pop	r26
    164e:	9f 91       	pop	r25
    1650:	8f 91       	pop	r24
    1652:	7f 91       	pop	r23
    1654:	6f 91       	pop	r22
    1656:	5f 91       	pop	r21
    1658:	4f 91       	pop	r20
    165a:	3f 91       	pop	r19
    165c:	2f 91       	pop	r18
    165e:	0f 90       	pop	r0
    1660:	0b be       	out	0x3b, r0	; 59
    1662:	0f 90       	pop	r0
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	0f 90       	pop	r0
    1668:	1f 90       	pop	r1
    166a:	18 95       	reti

0000166c <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	1f 92       	push	r1
    1674:	1f 92       	push	r1
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    167a:	2f b7       	in	r18, 0x3f	; 63
    167c:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    167e:	f8 94       	cli
	return flags;
    1680:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1682:	28 2f       	mov	r18, r24
    1684:	39 2f       	mov	r19, r25
    1686:	21 15       	cp	r18, r1
    1688:	88 e0       	ldi	r24, 0x08	; 8
    168a:	38 07       	cpc	r19, r24
    168c:	49 f4       	brne	.+18     	; 0x16a0 <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    168e:	61 e0       	ldi	r22, 0x01	; 1
    1690:	83 e0       	ldi	r24, 0x03	; 3
    1692:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1696:	64 e0       	ldi	r22, 0x04	; 4
    1698:	83 e0       	ldi	r24, 0x03	; 3
    169a:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
    169e:	4f c0       	rjmp	.+158    	; 0x173e <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    16a0:	20 34       	cpi	r18, 0x40	; 64
    16a2:	88 e0       	ldi	r24, 0x08	; 8
    16a4:	38 07       	cpc	r19, r24
    16a6:	49 f4       	brne	.+18     	; 0x16ba <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    16a8:	62 e0       	ldi	r22, 0x02	; 2
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    16b0:	64 e0       	ldi	r22, 0x04	; 4
    16b2:	83 e0       	ldi	r24, 0x03	; 3
    16b4:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
    16b8:	42 c0       	rjmp	.+132    	; 0x173e <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    16ba:	21 15       	cp	r18, r1
    16bc:	89 e0       	ldi	r24, 0x09	; 9
    16be:	38 07       	cpc	r19, r24
    16c0:	49 f4       	brne	.+18     	; 0x16d4 <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	84 e0       	ldi	r24, 0x04	; 4
    16c6:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    16ca:	64 e0       	ldi	r22, 0x04	; 4
    16cc:	84 e0       	ldi	r24, 0x04	; 4
    16ce:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
    16d2:	35 c0       	rjmp	.+106    	; 0x173e <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    16d4:	20 34       	cpi	r18, 0x40	; 64
    16d6:	89 e0       	ldi	r24, 0x09	; 9
    16d8:	38 07       	cpc	r19, r24
    16da:	49 f4       	brne	.+18     	; 0x16ee <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    16dc:	62 e0       	ldi	r22, 0x02	; 2
    16de:	84 e0       	ldi	r24, 0x04	; 4
    16e0:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    16e4:	64 e0       	ldi	r22, 0x04	; 4
    16e6:	84 e0       	ldi	r24, 0x04	; 4
    16e8:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
    16ec:	28 c0       	rjmp	.+80     	; 0x173e <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    16ee:	21 15       	cp	r18, r1
    16f0:	8a e0       	ldi	r24, 0x0A	; 10
    16f2:	38 07       	cpc	r19, r24
    16f4:	49 f4       	brne	.+18     	; 0x1708 <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	85 e0       	ldi	r24, 0x05	; 5
    16fa:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    16fe:	64 e0       	ldi	r22, 0x04	; 4
    1700:	85 e0       	ldi	r24, 0x05	; 5
    1702:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
    1706:	1b c0       	rjmp	.+54     	; 0x173e <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1708:	20 34       	cpi	r18, 0x40	; 64
    170a:	8a e0       	ldi	r24, 0x0A	; 10
    170c:	38 07       	cpc	r19, r24
    170e:	49 f4       	brne	.+18     	; 0x1722 <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1710:	62 e0       	ldi	r22, 0x02	; 2
    1712:	85 e0       	ldi	r24, 0x05	; 5
    1714:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1718:	64 e0       	ldi	r22, 0x04	; 4
    171a:	85 e0       	ldi	r24, 0x05	; 5
    171c:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
    1720:	0e c0       	rjmp	.+28     	; 0x173e <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1722:	21 15       	cp	r18, r1
    1724:	3b 40       	sbci	r19, 0x0B	; 11
    1726:	49 f4       	brne	.+18     	; 0x173a <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1728:	61 e0       	ldi	r22, 0x01	; 1
    172a:	86 e0       	ldi	r24, 0x06	; 6
    172c:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1730:	64 e0       	ldi	r22, 0x04	; 4
    1732:	86 e0       	ldi	r24, 0x06	; 6
    1734:	0e 94 65 17 	call	0x2eca	; 0x2eca <sysclk_enable_module>
    1738:	02 c0       	rjmp	.+4      	; 0x173e <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    173a:	1f bf       	out	0x3f, r17	; 63
    173c:	10 c0       	rjmp	.+32     	; 0x175e <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    173e:	80 91 15 24 	lds	r24, 0x2415	; 0x802415 <sleepmgr_locks+0x1>
    1742:	8f 3f       	cpi	r24, 0xFF	; 255
    1744:	09 f4       	brne	.+2      	; 0x1748 <tc_enable+0xdc>
    1746:	ff cf       	rjmp	.-2      	; 0x1746 <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1748:	8f b7       	in	r24, 0x3f	; 63
    174a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    174c:	f8 94       	cli
	return flags;
    174e:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1750:	e4 e1       	ldi	r30, 0x14	; 20
    1752:	f4 e2       	ldi	r31, 0x24	; 36
    1754:	81 81       	ldd	r24, Z+1	; 0x01
    1756:	8f 5f       	subi	r24, 0xFF	; 255
    1758:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    175a:	9f bf       	out	0x3f, r25	; 63
    175c:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	08 95       	ret

0000176a <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	1f 92       	push	r1
    1770:	1f 92       	push	r1
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	81 11       	cpse	r24, r1
    1778:	26 c0       	rjmp	.+76     	; 0x17c6 <udd_sleep_mode+0x5c>
    177a:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_b_idle>
    177e:	99 23       	and	r25, r25
    1780:	f9 f0       	breq	.+62     	; 0x17c0 <udd_sleep_mode+0x56>
    1782:	90 91 15 24 	lds	r25, 0x2415	; 0x802415 <sleepmgr_locks+0x1>
    1786:	91 11       	cpse	r25, r1
    1788:	01 c0       	rjmp	.+2      	; 0x178c <udd_sleep_mode+0x22>
    178a:	ff cf       	rjmp	.-2      	; 0x178a <udd_sleep_mode+0x20>
    178c:	9f b7       	in	r25, 0x3f	; 63
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	f8 94       	cli
    1792:	2a 81       	ldd	r18, Y+2	; 0x02
    1794:	e4 e1       	ldi	r30, 0x14	; 20
    1796:	f4 e2       	ldi	r31, 0x24	; 36
    1798:	91 81       	ldd	r25, Z+1	; 0x01
    179a:	91 50       	subi	r25, 0x01	; 1
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	2f bf       	out	0x3f, r18	; 63
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <udd_sleep_mode+0x56>
    17a2:	90 91 15 24 	lds	r25, 0x2415	; 0x802415 <sleepmgr_locks+0x1>
    17a6:	9f 3f       	cpi	r25, 0xFF	; 255
    17a8:	09 f4       	brne	.+2      	; 0x17ac <udd_sleep_mode+0x42>
    17aa:	ff cf       	rjmp	.-2      	; 0x17aa <udd_sleep_mode+0x40>
    17ac:	9f b7       	in	r25, 0x3f	; 63
    17ae:	99 83       	std	Y+1, r25	; 0x01
    17b0:	f8 94       	cli
    17b2:	29 81       	ldd	r18, Y+1	; 0x01
    17b4:	e4 e1       	ldi	r30, 0x14	; 20
    17b6:	f4 e2       	ldi	r31, 0x24	; 36
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	9f 5f       	subi	r25, 0xFF	; 255
    17bc:	91 83       	std	Z+1, r25	; 0x01
    17be:	2f bf       	out	0x3f, r18	; 63
    17c0:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <udd_b_idle>
    17c4:	05 c0       	rjmp	.+10     	; 0x17d0 <udd_sleep_mode+0x66>
    17c6:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_b_idle>
    17ca:	99 23       	and	r25, r25
    17cc:	51 f3       	breq	.-44     	; 0x17a2 <udd_sleep_mode+0x38>
    17ce:	f8 cf       	rjmp	.-16     	; 0x17c0 <udd_sleep_mode+0x56>
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	08 95       	ret

000017da <udd_ctrl_init>:
    17da:	0f 93       	push	r16
    17dc:	e8 ec       	ldi	r30, 0xC8	; 200
    17de:	f4 e0       	ldi	r31, 0x04	; 4
    17e0:	80 81       	ld	r24, Z
    17e2:	8f 7d       	andi	r24, 0xDF	; 223
    17e4:	80 83       	st	Z, r24
    17e6:	80 81       	ld	r24, Z
    17e8:	8f 7d       	andi	r24, 0xDF	; 223
    17ea:	80 83       	st	Z, r24
    17ec:	e8 e9       	ldi	r30, 0x98	; 152
    17ee:	f2 e2       	ldi	r31, 0x22	; 34
    17f0:	02 e0       	ldi	r16, 0x02	; 2
    17f2:	05 93       	las	Z, r16
    17f4:	10 92 9a 22 	sts	0x229A, r1	; 0x80229a <udd_sram+0x16>
    17f8:	10 92 9b 22 	sts	0x229B, r1	; 0x80229b <udd_sram+0x17>
    17fc:	00 e2       	ldi	r16, 0x20	; 32
    17fe:	06 93       	lac	Z, r16
    1800:	00 e4       	ldi	r16, 0x40	; 64
    1802:	06 93       	lac	Z, r16
    1804:	e0 e9       	ldi	r30, 0x90	; 144
    1806:	f2 e2       	ldi	r31, 0x22	; 34
    1808:	00 e4       	ldi	r16, 0x40	; 64
    180a:	06 93       	lac	Z, r16
    180c:	e4 e0       	ldi	r30, 0x04	; 4
    180e:	f4 e2       	ldi	r31, 0x24	; 36
    1810:	14 86       	std	Z+12, r1	; 0x0c
    1812:	15 86       	std	Z+13, r1	; 0x0d
    1814:	16 86       	std	Z+14, r1	; 0x0e
    1816:	17 86       	std	Z+15, r1	; 0x0f
    1818:	12 86       	std	Z+10, r1	; 0x0a
    181a:	13 86       	std	Z+11, r1	; 0x0b
    181c:	10 92 80 22 	sts	0x2280, r1	; 0x802280 <udd_ep_control_state>
    1820:	0f 91       	pop	r16
    1822:	08 95       	ret

00001824 <udd_ctrl_stall_data>:
    1824:	0f 93       	push	r16
    1826:	85 e0       	ldi	r24, 0x05	; 5
    1828:	80 93 80 22 	sts	0x2280, r24	; 0x802280 <udd_ep_control_state>
    182c:	e9 e9       	ldi	r30, 0x99	; 153
    182e:	f2 e2       	ldi	r31, 0x22	; 34
    1830:	04 e0       	ldi	r16, 0x04	; 4
    1832:	05 93       	las	Z, r16
    1834:	e1 e9       	ldi	r30, 0x91	; 145
    1836:	f2 e2       	ldi	r31, 0x22	; 34
    1838:	04 e0       	ldi	r16, 0x04	; 4
    183a:	05 93       	las	Z, r16
    183c:	0f 91       	pop	r16
    183e:	08 95       	ret

00001840 <udd_ctrl_send_zlp_in>:
    1840:	0f 93       	push	r16
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	80 93 80 22 	sts	0x2280, r24	; 0x802280 <udd_ep_control_state>
    1848:	10 92 9a 22 	sts	0x229A, r1	; 0x80229a <udd_sram+0x16>
    184c:	10 92 9b 22 	sts	0x229B, r1	; 0x80229b <udd_sram+0x17>
    1850:	e8 e9       	ldi	r30, 0x98	; 152
    1852:	f2 e2       	ldi	r31, 0x22	; 34
    1854:	02 e0       	ldi	r16, 0x02	; 2
    1856:	06 93       	lac	Z, r16
    1858:	0f 91       	pop	r16
    185a:	08 95       	ret

0000185c <udd_ctrl_endofrequest>:
    185c:	e0 91 10 24 	lds	r30, 0x2410	; 0x802410 <udd_g_ctrlreq+0xc>
    1860:	f0 91 11 24 	lds	r31, 0x2411	; 0x802411 <udd_g_ctrlreq+0xd>
    1864:	30 97       	sbiw	r30, 0x00	; 0
    1866:	09 f0       	breq	.+2      	; 0x186a <udd_ctrl_endofrequest+0xe>
    1868:	19 95       	eicall
    186a:	08 95       	ret

0000186c <udd_ctrl_in_sent>:
    186c:	0f 93       	push	r16
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_ep_control_state>
    1876:	83 30       	cpi	r24, 0x03	; 3
    1878:	19 f4       	brne	.+6      	; 0x1880 <udd_ctrl_in_sent+0x14>
    187a:	f0 df       	rcall	.-32     	; 0x185c <udd_ctrl_endofrequest>
    187c:	ae df       	rcall	.-164    	; 0x17da <udd_ctrl_init>
    187e:	5e c0       	rjmp	.+188    	; 0x193c <udd_ctrl_in_sent+0xd0>
    1880:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <udd_ctrl_payload_nb_trans>
    1884:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    1888:	c0 91 0e 24 	lds	r28, 0x240E	; 0x80240e <udd_g_ctrlreq+0xa>
    188c:	d0 91 0f 24 	lds	r29, 0x240F	; 0x80240f <udd_g_ctrlreq+0xb>
    1890:	c8 1b       	sub	r28, r24
    1892:	d9 0b       	sbc	r29, r25
    1894:	71 f5       	brne	.+92     	; 0x18f2 <udd_ctrl_in_sent+0x86>
    1896:	20 91 7e 22 	lds	r18, 0x227E	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    189a:	30 91 7f 22 	lds	r19, 0x227F	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
    189e:	82 0f       	add	r24, r18
    18a0:	93 1f       	adc	r25, r19
    18a2:	80 93 7e 22 	sts	0x227E, r24	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    18a6:	90 93 7f 22 	sts	0x227F, r25	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
    18aa:	20 91 0a 24 	lds	r18, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    18ae:	30 91 0b 24 	lds	r19, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    18b2:	82 17       	cp	r24, r18
    18b4:	93 07       	cpc	r25, r19
    18b6:	21 f0       	breq	.+8      	; 0x18c0 <udd_ctrl_in_sent+0x54>
    18b8:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <b_shortpacket.5469>
    18bc:	88 23       	and	r24, r24
    18be:	41 f0       	breq	.+16     	; 0x18d0 <udd_ctrl_in_sent+0x64>
    18c0:	84 e0       	ldi	r24, 0x04	; 4
    18c2:	80 93 80 22 	sts	0x2280, r24	; 0x802280 <udd_ep_control_state>
    18c6:	e0 e9       	ldi	r30, 0x90	; 144
    18c8:	f2 e2       	ldi	r31, 0x22	; 34
    18ca:	02 e0       	ldi	r16, 0x02	; 2
    18cc:	06 93       	lac	Z, r16
    18ce:	36 c0       	rjmp	.+108    	; 0x193c <udd_ctrl_in_sent+0xd0>
    18d0:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udd_g_ctrlreq+0xe>
    18d4:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udd_g_ctrlreq+0xf>
    18d8:	30 97       	sbiw	r30, 0x00	; 0
    18da:	99 f0       	breq	.+38     	; 0x1902 <udd_ctrl_in_sent+0x96>
    18dc:	19 95       	eicall
    18de:	88 23       	and	r24, r24
    18e0:	81 f0       	breq	.+32     	; 0x1902 <udd_ctrl_in_sent+0x96>
    18e2:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <udd_ctrl_payload_nb_trans>
    18e6:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    18ea:	c0 91 0e 24 	lds	r28, 0x240E	; 0x80240e <udd_g_ctrlreq+0xa>
    18ee:	d0 91 0f 24 	lds	r29, 0x240F	; 0x80240f <udd_g_ctrlreq+0xb>
    18f2:	c0 34       	cpi	r28, 0x40	; 64
    18f4:	d1 05       	cpc	r29, r1
    18f6:	28 f0       	brcs	.+10     	; 0x1902 <udd_ctrl_in_sent+0x96>
    18f8:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <b_shortpacket.5469>
    18fc:	c0 e4       	ldi	r28, 0x40	; 64
    18fe:	d0 e0       	ldi	r29, 0x00	; 0
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <udd_ctrl_in_sent+0x9c>
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <b_shortpacket.5469>
    1908:	e4 e8       	ldi	r30, 0x84	; 132
    190a:	f2 e2       	ldi	r31, 0x22	; 34
    190c:	c6 8b       	std	Z+22, r28	; 0x16
    190e:	d7 8b       	std	Z+23, r29	; 0x17
    1910:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <udd_ctrl_payload_nb_trans>
    1914:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    1918:	20 91 0c 24 	lds	r18, 0x240C	; 0x80240c <udd_g_ctrlreq+0x8>
    191c:	30 91 0d 24 	lds	r19, 0x240D	; 0x80240d <udd_g_ctrlreq+0x9>
    1920:	28 0f       	add	r18, r24
    1922:	39 1f       	adc	r19, r25
    1924:	20 8f       	std	Z+24, r18	; 0x18
    1926:	31 8f       	std	Z+25, r19	; 0x19
    1928:	c8 0f       	add	r28, r24
    192a:	d9 1f       	adc	r29, r25
    192c:	c0 93 7c 22 	sts	0x227C, r28	; 0x80227c <udd_ctrl_payload_nb_trans>
    1930:	d0 93 7d 22 	sts	0x227D, r29	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    1934:	e8 e9       	ldi	r30, 0x98	; 152
    1936:	f2 e2       	ldi	r31, 0x22	; 34
    1938:	02 e0       	ldi	r16, 0x02	; 2
    193a:	06 93       	lac	Z, r16
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	0f 91       	pop	r16
    1942:	08 95       	ret

00001944 <udd_ep_get_size>:
    1944:	fc 01       	movw	r30, r24
    1946:	81 81       	ldd	r24, Z+1	; 0x01
    1948:	e8 2f       	mov	r30, r24
    194a:	e7 70       	andi	r30, 0x07	; 7
    194c:	8e 2f       	mov	r24, r30
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	fc 01       	movw	r30, r24
    1952:	31 97       	sbiw	r30, 0x01	; 1
    1954:	e7 30       	cpi	r30, 0x07	; 7
    1956:	f1 05       	cpc	r31, r1
    1958:	d8 f4       	brcc	.+54     	; 0x1990 <udd_ep_get_size+0x4c>
    195a:	88 27       	eor	r24, r24
    195c:	e2 50       	subi	r30, 0x02	; 2
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	8f 4f       	sbci	r24, 0xFF	; 255
    1962:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__tablejump2__>
    1966:	80 e1       	ldi	r24, 0x10	; 16
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	08 95       	ret
    196c:	80 e2       	ldi	r24, 0x20	; 32
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	08 95       	ret
    1972:	80 e4       	ldi	r24, 0x40	; 64
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	08 95       	ret
    1978:	80 e8       	ldi	r24, 0x80	; 128
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	08 95       	ret
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	08 95       	ret
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	92 e0       	ldi	r25, 0x02	; 2
    1988:	08 95       	ret
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	93 e0       	ldi	r25, 0x03	; 3
    198e:	08 95       	ret
    1990:	88 e0       	ldi	r24, 0x08	; 8
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	08 95       	ret

00001996 <udd_ep_get_job>:
    1996:	28 2f       	mov	r18, r24
    1998:	2f 70       	andi	r18, 0x0F	; 15
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	22 0f       	add	r18, r18
    199e:	33 1f       	adc	r19, r19
    19a0:	08 2e       	mov	r0, r24
    19a2:	00 0c       	add	r0, r0
    19a4:	99 0b       	sbc	r25, r25
    19a6:	88 27       	eor	r24, r24
    19a8:	99 0f       	add	r25, r25
    19aa:	88 1f       	adc	r24, r24
    19ac:	99 27       	eor	r25, r25
    19ae:	82 0f       	add	r24, r18
    19b0:	93 1f       	adc	r25, r19
    19b2:	02 97       	sbiw	r24, 0x02	; 2
    19b4:	9c 01       	movw	r18, r24
    19b6:	22 0f       	add	r18, r18
    19b8:	33 1f       	adc	r19, r19
    19ba:	22 0f       	add	r18, r18
    19bc:	33 1f       	adc	r19, r19
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	82 0f       	add	r24, r18
    19c4:	93 1f       	adc	r25, r19
    19c6:	88 5e       	subi	r24, 0xE8	; 232
    19c8:	9d 4d       	sbci	r25, 0xDD	; 221
    19ca:	08 95       	ret

000019cc <udd_ctrl_interrupt_tc_setup>:
    19cc:	0f 93       	push	r16
    19ce:	cf 93       	push	r28
    19d0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    19d4:	80 ff       	sbrs	r24, 0
    19d6:	65 c0       	rjmp	.+202    	; 0x1aa2 <udd_ctrl_interrupt_tc_setup+0xd6>
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    19de:	e0 e9       	ldi	r30, 0x90	; 144
    19e0:	f2 e2       	ldi	r31, 0x22	; 34
    19e2:	00 e8       	ldi	r16, 0x80	; 128
    19e4:	06 93       	lac	Z, r16
    19e6:	e8 e9       	ldi	r30, 0x98	; 152
    19e8:	f2 e2       	ldi	r31, 0x22	; 34
    19ea:	00 e8       	ldi	r16, 0x80	; 128
    19ec:	06 93       	lac	Z, r16
    19ee:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    19f2:	e0 e9       	ldi	r30, 0x90	; 144
    19f4:	f2 e2       	ldi	r31, 0x22	; 34
    19f6:	00 e1       	ldi	r16, 0x10	; 16
    19f8:	06 93       	lac	Z, r16
    19fa:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_ep_control_state>
    19fe:	88 23       	and	r24, r24
    1a00:	29 f0       	breq	.+10     	; 0x1a0c <udd_ctrl_interrupt_tc_setup+0x40>
    1a02:	83 50       	subi	r24, 0x03	; 3
    1a04:	82 30       	cpi	r24, 0x02	; 2
    1a06:	08 f4       	brcc	.+2      	; 0x1a0a <udd_ctrl_interrupt_tc_setup+0x3e>
    1a08:	29 df       	rcall	.-430    	; 0x185c <udd_ctrl_endofrequest>
    1a0a:	e7 de       	rcall	.-562    	; 0x17da <udd_ctrl_init>
    1a0c:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <udd_sram+0xe>
    1a10:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <udd_sram+0xf>
    1a14:	08 97       	sbiw	r24, 0x08	; 8
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <udd_ctrl_interrupt_tc_setup+0x4e>
    1a18:	46 c0       	rjmp	.+140    	; 0x1aa6 <udd_ctrl_interrupt_tc_setup+0xda>
    1a1a:	88 e0       	ldi	r24, 0x08	; 8
    1a1c:	ec e3       	ldi	r30, 0x3C	; 60
    1a1e:	f2 e2       	ldi	r31, 0x22	; 34
    1a20:	a4 e0       	ldi	r26, 0x04	; 4
    1a22:	b4 e2       	ldi	r27, 0x24	; 36
    1a24:	01 90       	ld	r0, Z+
    1a26:	0d 92       	st	X+, r0
    1a28:	8a 95       	dec	r24
    1a2a:	e1 f7       	brne	.-8      	; 0x1a24 <udd_ctrl_interrupt_tc_setup+0x58>
    1a2c:	e8 ec       	ldi	r30, 0xC8	; 200
    1a2e:	f4 e0       	ldi	r31, 0x04	; 4
    1a30:	80 81       	ld	r24, Z
    1a32:	80 62       	ori	r24, 0x20	; 32
    1a34:	80 83       	st	Z, r24
    1a36:	80 81       	ld	r24, Z
    1a38:	80 62       	ori	r24, 0x20	; 32
    1a3a:	80 83       	st	Z, r24
    1a3c:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <udc_process_setup>
    1a40:	c8 2f       	mov	r28, r24
    1a42:	81 11       	cpse	r24, r1
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <udd_ctrl_interrupt_tc_setup+0x80>
    1a46:	ee de       	rcall	.-548    	; 0x1824 <udd_ctrl_stall_data>
    1a48:	c1 e0       	ldi	r28, 0x01	; 1
    1a4a:	2e c0       	rjmp	.+92     	; 0x1aa8 <udd_ctrl_interrupt_tc_setup+0xdc>
    1a4c:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <udd_g_ctrlreq>
    1a50:	88 23       	and	r24, r24
    1a52:	6c f4       	brge	.+26     	; 0x1a6e <udd_ctrl_interrupt_tc_setup+0xa2>
    1a54:	10 92 7e 22 	sts	0x227E, r1	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    1a58:	10 92 7f 22 	sts	0x227F, r1	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
    1a5c:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <udd_ctrl_payload_nb_trans>
    1a60:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	80 93 80 22 	sts	0x2280, r24	; 0x802280 <udd_ep_control_state>
    1a6a:	00 df       	rcall	.-512    	; 0x186c <udd_ctrl_in_sent>
    1a6c:	1d c0       	rjmp	.+58     	; 0x1aa8 <udd_ctrl_interrupt_tc_setup+0xdc>
    1a6e:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    1a72:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    1a76:	89 2b       	or	r24, r25
    1a78:	11 f4       	brne	.+4      	; 0x1a7e <udd_ctrl_interrupt_tc_setup+0xb2>
    1a7a:	e2 de       	rcall	.-572    	; 0x1840 <udd_ctrl_send_zlp_in>
    1a7c:	15 c0       	rjmp	.+42     	; 0x1aa8 <udd_ctrl_interrupt_tc_setup+0xdc>
    1a7e:	10 92 7e 22 	sts	0x227E, r1	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    1a82:	10 92 7f 22 	sts	0x227F, r1	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
    1a86:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <udd_ctrl_payload_nb_trans>
    1a8a:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	80 93 80 22 	sts	0x2280, r24	; 0x802280 <udd_ep_control_state>
    1a94:	e0 e9       	ldi	r30, 0x90	; 144
    1a96:	f2 e2       	ldi	r31, 0x22	; 34
    1a98:	02 e0       	ldi	r16, 0x02	; 2
    1a9a:	06 93       	lac	Z, r16
    1a9c:	00 e2       	ldi	r16, 0x20	; 32
    1a9e:	06 93       	lac	Z, r16
    1aa0:	03 c0       	rjmp	.+6      	; 0x1aa8 <udd_ctrl_interrupt_tc_setup+0xdc>
    1aa2:	c0 e0       	ldi	r28, 0x00	; 0
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8 <udd_ctrl_interrupt_tc_setup+0xdc>
    1aa6:	c1 e0       	ldi	r28, 0x01	; 1
    1aa8:	8c 2f       	mov	r24, r28
    1aaa:	cf 91       	pop	r28
    1aac:	0f 91       	pop	r16
    1aae:	08 95       	ret

00001ab0 <udd_ep_trans_complet>:
    1ab0:	8f 92       	push	r8
    1ab2:	9f 92       	push	r9
    1ab4:	af 92       	push	r10
    1ab6:	bf 92       	push	r11
    1ab8:	df 92       	push	r13
    1aba:	ef 92       	push	r14
    1abc:	ff 92       	push	r15
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	d8 2e       	mov	r13, r24
    1ac8:	66 df       	rcall	.-308    	; 0x1996 <udd_ep_get_job>
    1aca:	8c 01       	movw	r16, r24
    1acc:	cd 2d       	mov	r28, r13
    1ace:	cf 70       	andi	r28, 0x0F	; 15
    1ad0:	d0 e0       	ldi	r29, 0x00	; 0
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	cd 2d       	mov	r28, r13
    1ada:	0d 2c       	mov	r0, r13
    1adc:	00 0c       	add	r0, r0
    1ade:	dd 0b       	sbc	r29, r29
    1ae0:	cc 27       	eor	r28, r28
    1ae2:	dd 0f       	add	r29, r29
    1ae4:	cc 1f       	adc	r28, r28
    1ae6:	dd 27       	eor	r29, r29
    1ae8:	c8 0f       	add	r28, r24
    1aea:	d9 1f       	adc	r29, r25
    1aec:	ce 01       	movw	r24, r28
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	9c 01       	movw	r18, r24
    1afc:	20 57       	subi	r18, 0x70	; 112
    1afe:	3d 4d       	sbci	r19, 0xDD	; 221
    1b00:	79 01       	movw	r14, r18
    1b02:	c9 01       	movw	r24, r18
    1b04:	1f df       	rcall	.-450    	; 0x1944 <udd_ep_get_size>
    1b06:	4c 01       	movw	r8, r24
    1b08:	dd 20       	and	r13, r13
    1b0a:	0c f0       	brlt	.+2      	; 0x1b0e <udd_ep_trans_complet+0x5e>
    1b0c:	7b c0       	rjmp	.+246    	; 0x1c04 <udd_ep_trans_complet+0x154>
    1b0e:	fe 01       	movw	r30, r28
    1b10:	ee 0f       	add	r30, r30
    1b12:	ff 1f       	adc	r31, r31
    1b14:	ee 0f       	add	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	ee 0f       	add	r30, r30
    1b1a:	ff 1f       	adc	r31, r31
    1b1c:	ec 57       	subi	r30, 0x7C	; 124
    1b1e:	fd 4d       	sbci	r31, 0xDD	; 221
    1b20:	22 89       	ldd	r18, Z+18	; 0x12
    1b22:	33 89       	ldd	r19, Z+19	; 0x13
    1b24:	d8 01       	movw	r26, r16
    1b26:	15 96       	adiw	r26, 0x05	; 5
    1b28:	8d 91       	ld	r24, X+
    1b2a:	9c 91       	ld	r25, X
    1b2c:	16 97       	sbiw	r26, 0x06	; 6
    1b2e:	82 0f       	add	r24, r18
    1b30:	93 1f       	adc	r25, r19
    1b32:	15 96       	adiw	r26, 0x05	; 5
    1b34:	8d 93       	st	X+, r24
    1b36:	9c 93       	st	X, r25
    1b38:	16 97       	sbiw	r26, 0x06	; 6
    1b3a:	13 96       	adiw	r26, 0x03	; 3
    1b3c:	2d 91       	ld	r18, X+
    1b3e:	3c 91       	ld	r19, X
    1b40:	14 97       	sbiw	r26, 0x04	; 4
    1b42:	82 17       	cp	r24, r18
    1b44:	93 07       	cpc	r25, r19
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <udd_ep_trans_complet+0x9a>
    1b48:	47 c0       	rjmp	.+142    	; 0x1bd8 <udd_ep_trans_complet+0x128>
    1b4a:	28 1b       	sub	r18, r24
    1b4c:	39 0b       	sbc	r19, r25
    1b4e:	21 15       	cp	r18, r1
    1b50:	b4 e0       	ldi	r27, 0x04	; 4
    1b52:	3b 07       	cpc	r19, r27
    1b54:	40 f0       	brcs	.+16     	; 0x1b66 <udd_ep_trans_complet+0xb6>
    1b56:	2f ef       	ldi	r18, 0xFF	; 255
    1b58:	33 e0       	ldi	r19, 0x03	; 3
    1b5a:	c9 01       	movw	r24, r18
    1b5c:	b4 01       	movw	r22, r8
    1b5e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__udivmodhi4>
    1b62:	28 1b       	sub	r18, r24
    1b64:	39 0b       	sbc	r19, r25
    1b66:	f8 01       	movw	r30, r16
    1b68:	80 81       	ld	r24, Z
    1b6a:	81 ff       	sbrs	r24, 1
    1b6c:	0a c0       	rjmp	.+20     	; 0x1b82 <udd_ep_trans_complet+0xd2>
    1b6e:	c9 01       	movw	r24, r18
    1b70:	b4 01       	movw	r22, r8
    1b72:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__udivmodhi4>
    1b76:	41 e0       	ldi	r20, 0x01	; 1
    1b78:	89 2b       	or	r24, r25
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <udd_ep_trans_complet+0xce>
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	84 2f       	mov	r24, r20
    1b80:	01 c0       	rjmp	.+2      	; 0x1b84 <udd_ep_trans_complet+0xd4>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	d8 01       	movw	r26, r16
    1b86:	9c 91       	ld	r25, X
    1b88:	80 fb       	bst	r24, 0
    1b8a:	91 f9       	bld	r25, 1
    1b8c:	9c 93       	st	X, r25
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ee 0f       	add	r30, r30
    1b92:	ff 1f       	adc	r31, r31
    1b94:	ee 0f       	add	r30, r30
    1b96:	ff 1f       	adc	r31, r31
    1b98:	ee 0f       	add	r30, r30
    1b9a:	ff 1f       	adc	r31, r31
    1b9c:	ec 57       	subi	r30, 0x7C	; 124
    1b9e:	fd 4d       	sbci	r31, 0xDD	; 221
    1ba0:	12 8a       	std	Z+18, r1	; 0x12
    1ba2:	13 8a       	std	Z+19, r1	; 0x13
    1ba4:	26 87       	std	Z+14, r18	; 0x0e
    1ba6:	37 87       	std	Z+15, r19	; 0x0f
    1ba8:	11 96       	adiw	r26, 0x01	; 1
    1baa:	2d 91       	ld	r18, X+
    1bac:	3c 91       	ld	r19, X
    1bae:	12 97       	sbiw	r26, 0x02	; 2
    1bb0:	15 96       	adiw	r26, 0x05	; 5
    1bb2:	8d 91       	ld	r24, X+
    1bb4:	9c 91       	ld	r25, X
    1bb6:	16 97       	sbiw	r26, 0x06	; 6
    1bb8:	82 0f       	add	r24, r18
    1bba:	93 1f       	adc	r25, r19
    1bbc:	cc 0f       	add	r28, r28
    1bbe:	dd 1f       	adc	r29, r29
    1bc0:	cc 0f       	add	r28, r28
    1bc2:	dd 1f       	adc	r29, r29
    1bc4:	cc 0f       	add	r28, r28
    1bc6:	dd 1f       	adc	r29, r29
    1bc8:	cc 56       	subi	r28, 0x6C	; 108
    1bca:	dd 4d       	sbci	r29, 0xDD	; 221
    1bcc:	88 83       	st	Y, r24
    1bce:	99 83       	std	Y+1, r25	; 0x01
    1bd0:	f7 01       	movw	r30, r14
    1bd2:	02 e0       	ldi	r16, 0x02	; 2
    1bd4:	06 93       	lac	Z, r16
    1bd6:	e4 c0       	rjmp	.+456    	; 0x1da0 <udd_ep_trans_complet+0x2f0>
    1bd8:	d8 01       	movw	r26, r16
    1bda:	8c 91       	ld	r24, X
    1bdc:	81 ff       	sbrs	r24, 1
    1bde:	cd c0       	rjmp	.+410    	; 0x1d7a <udd_ep_trans_complet+0x2ca>
    1be0:	8d 7f       	andi	r24, 0xFD	; 253
    1be2:	8c 93       	st	X, r24
    1be4:	cc 0f       	add	r28, r28
    1be6:	dd 1f       	adc	r29, r29
    1be8:	cc 0f       	add	r28, r28
    1bea:	dd 1f       	adc	r29, r29
    1bec:	cc 0f       	add	r28, r28
    1bee:	dd 1f       	adc	r29, r29
    1bf0:	cc 57       	subi	r28, 0x7C	; 124
    1bf2:	dd 4d       	sbci	r29, 0xDD	; 221
    1bf4:	1a 8a       	std	Y+18, r1	; 0x12
    1bf6:	1b 8a       	std	Y+19, r1	; 0x13
    1bf8:	1e 86       	std	Y+14, r1	; 0x0e
    1bfa:	1f 86       	std	Y+15, r1	; 0x0f
    1bfc:	f7 01       	movw	r30, r14
    1bfe:	02 e0       	ldi	r16, 0x02	; 2
    1c00:	06 93       	lac	Z, r16
    1c02:	ce c0       	rjmp	.+412    	; 0x1da0 <udd_ep_trans_complet+0x2f0>
    1c04:	fe 01       	movw	r30, r28
    1c06:	ee 0f       	add	r30, r30
    1c08:	ff 1f       	adc	r31, r31
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	ee 0f       	add	r30, r30
    1c10:	ff 1f       	adc	r31, r31
    1c12:	ec 57       	subi	r30, 0x7C	; 124
    1c14:	fd 4d       	sbci	r31, 0xDD	; 221
    1c16:	a6 84       	ldd	r10, Z+14	; 0x0e
    1c18:	b7 84       	ldd	r11, Z+15	; 0x0f
    1c1a:	d8 01       	movw	r26, r16
    1c1c:	8c 91       	ld	r24, X
    1c1e:	82 ff       	sbrs	r24, 2
    1c20:	1b c0       	rjmp	.+54     	; 0x1c58 <udd_ep_trans_complet+0x1a8>
    1c22:	11 96       	adiw	r26, 0x01	; 1
    1c24:	ed 91       	ld	r30, X+
    1c26:	fc 91       	ld	r31, X
    1c28:	12 97       	sbiw	r26, 0x02	; 2
    1c2a:	15 96       	adiw	r26, 0x05	; 5
    1c2c:	2d 91       	ld	r18, X+
    1c2e:	3c 91       	ld	r19, X
    1c30:	16 97       	sbiw	r26, 0x06	; 6
    1c32:	13 96       	adiw	r26, 0x03	; 3
    1c34:	8d 91       	ld	r24, X+
    1c36:	9c 91       	ld	r25, X
    1c38:	14 97       	sbiw	r26, 0x04	; 4
    1c3a:	b4 01       	movw	r22, r8
    1c3c:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__udivmodhi4>
    1c40:	b0 e4       	ldi	r27, 0x40	; 64
    1c42:	db 9e       	mul	r13, r27
    1c44:	b0 01       	movw	r22, r0
    1c46:	11 24       	eor	r1, r1
    1c48:	68 5a       	subi	r22, 0xA8	; 168
    1c4a:	7e 4d       	sbci	r23, 0xDE	; 222
    1c4c:	ac 01       	movw	r20, r24
    1c4e:	cf 01       	movw	r24, r30
    1c50:	82 0f       	add	r24, r18
    1c52:	93 1f       	adc	r25, r19
    1c54:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <memcpy>
    1c58:	f8 01       	movw	r30, r16
    1c5a:	25 81       	ldd	r18, Z+5	; 0x05
    1c5c:	36 81       	ldd	r19, Z+6	; 0x06
    1c5e:	2a 0d       	add	r18, r10
    1c60:	3b 1d       	adc	r19, r11
    1c62:	25 83       	std	Z+5, r18	; 0x05
    1c64:	36 83       	std	Z+6, r19	; 0x06
    1c66:	83 81       	ldd	r24, Z+3	; 0x03
    1c68:	94 81       	ldd	r25, Z+4	; 0x04
    1c6a:	82 17       	cp	r24, r18
    1c6c:	93 07       	cpc	r25, r19
    1c6e:	68 f4       	brcc	.+26     	; 0x1c8a <udd_ep_trans_complet+0x1da>
    1c70:	85 83       	std	Z+5, r24	; 0x05
    1c72:	96 83       	std	Z+6, r25	; 0x06
    1c74:	cc 0f       	add	r28, r28
    1c76:	dd 1f       	adc	r29, r29
    1c78:	cc 0f       	add	r28, r28
    1c7a:	dd 1f       	adc	r29, r29
    1c7c:	cc 0f       	add	r28, r28
    1c7e:	dd 1f       	adc	r29, r29
    1c80:	cc 57       	subi	r28, 0x7C	; 124
    1c82:	dd 4d       	sbci	r29, 0xDD	; 221
    1c84:	8a 89       	ldd	r24, Y+18	; 0x12
    1c86:	9b 89       	ldd	r25, Y+19	; 0x13
    1c88:	78 c0       	rjmp	.+240    	; 0x1d7a <udd_ep_trans_complet+0x2ca>
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	ee 0f       	add	r30, r30
    1c8e:	ff 1f       	adc	r31, r31
    1c90:	ee 0f       	add	r30, r30
    1c92:	ff 1f       	adc	r31, r31
    1c94:	ee 0f       	add	r30, r30
    1c96:	ff 1f       	adc	r31, r31
    1c98:	ec 57       	subi	r30, 0x7C	; 124
    1c9a:	fd 4d       	sbci	r31, 0xDD	; 221
    1c9c:	42 89       	ldd	r20, Z+18	; 0x12
    1c9e:	53 89       	ldd	r21, Z+19	; 0x13
    1ca0:	a4 16       	cp	r10, r20
    1ca2:	b5 06       	cpc	r11, r21
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <udd_ep_trans_complet+0x1f8>
    1ca6:	69 c0       	rjmp	.+210    	; 0x1d7a <udd_ep_trans_complet+0x2ca>
    1ca8:	28 17       	cp	r18, r24
    1caa:	39 07       	cpc	r19, r25
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <udd_ep_trans_complet+0x200>
    1cae:	65 c0       	rjmp	.+202    	; 0x1d7a <udd_ep_trans_complet+0x2ca>
    1cb0:	ac 01       	movw	r20, r24
    1cb2:	42 1b       	sub	r20, r18
    1cb4:	53 0b       	sbc	r21, r19
    1cb6:	9a 01       	movw	r18, r20
    1cb8:	21 15       	cp	r18, r1
    1cba:	54 e0       	ldi	r21, 0x04	; 4
    1cbc:	35 07       	cpc	r19, r21
    1cbe:	48 f0       	brcs	.+18     	; 0x1cd2 <udd_ep_trans_complet+0x222>
    1cc0:	2f ef       	ldi	r18, 0xFF	; 255
    1cc2:	33 e0       	ldi	r19, 0x03	; 3
    1cc4:	c9 01       	movw	r24, r18
    1cc6:	b4 01       	movw	r22, r8
    1cc8:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__udivmodhi4>
    1ccc:	28 1b       	sub	r18, r24
    1cce:	39 0b       	sbc	r19, r25
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <udd_ep_trans_complet+0x22e>
    1cd2:	c9 01       	movw	r24, r18
    1cd4:	b4 01       	movw	r22, r8
    1cd6:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__udivmodhi4>
    1cda:	28 1b       	sub	r18, r24
    1cdc:	39 0b       	sbc	r19, r25
    1cde:	fe 01       	movw	r30, r28
    1ce0:	ee 0f       	add	r30, r30
    1ce2:	ff 1f       	adc	r31, r31
    1ce4:	ee 0f       	add	r30, r30
    1ce6:	ff 1f       	adc	r31, r31
    1ce8:	ee 0f       	add	r30, r30
    1cea:	ff 1f       	adc	r31, r31
    1cec:	ec 57       	subi	r30, 0x7C	; 124
    1cee:	fd 4d       	sbci	r31, 0xDD	; 221
    1cf0:	16 86       	std	Z+14, r1	; 0x0e
    1cf2:	17 86       	std	Z+15, r1	; 0x0f
    1cf4:	28 15       	cp	r18, r8
    1cf6:	39 05       	cpc	r19, r9
    1cf8:	00 f5       	brcc	.+64     	; 0x1d3a <udd_ep_trans_complet+0x28a>
    1cfa:	d8 01       	movw	r26, r16
    1cfc:	8c 91       	ld	r24, X
    1cfe:	84 60       	ori	r24, 0x04	; 4
    1d00:	8c 93       	st	X, r24
    1d02:	b0 e4       	ldi	r27, 0x40	; 64
    1d04:	db 9e       	mul	r13, r27
    1d06:	c0 01       	movw	r24, r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	88 5a       	subi	r24, 0xA8	; 168
    1d0c:	9e 4d       	sbci	r25, 0xDE	; 222
    1d0e:	fe 01       	movw	r30, r28
    1d10:	ee 0f       	add	r30, r30
    1d12:	ff 1f       	adc	r31, r31
    1d14:	ee 0f       	add	r30, r30
    1d16:	ff 1f       	adc	r31, r31
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	ec 56       	subi	r30, 0x6C	; 108
    1d1e:	fd 4d       	sbci	r31, 0xDD	; 221
    1d20:	80 83       	st	Z, r24
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	cc 0f       	add	r28, r28
    1d26:	dd 1f       	adc	r29, r29
    1d28:	cc 0f       	add	r28, r28
    1d2a:	dd 1f       	adc	r29, r29
    1d2c:	cc 0f       	add	r28, r28
    1d2e:	dd 1f       	adc	r29, r29
    1d30:	cc 57       	subi	r28, 0x7C	; 124
    1d32:	dd 4d       	sbci	r29, 0xDD	; 221
    1d34:	8a 8a       	std	Y+18, r8	; 0x12
    1d36:	9b 8a       	std	Y+19, r9	; 0x13
    1d38:	1c c0       	rjmp	.+56     	; 0x1d72 <udd_ep_trans_complet+0x2c2>
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	41 81       	ldd	r20, Z+1	; 0x01
    1d3e:	52 81       	ldd	r21, Z+2	; 0x02
    1d40:	85 81       	ldd	r24, Z+5	; 0x05
    1d42:	96 81       	ldd	r25, Z+6	; 0x06
    1d44:	84 0f       	add	r24, r20
    1d46:	95 1f       	adc	r25, r21
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ee 0f       	add	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	ee 0f       	add	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	ec 56       	subi	r30, 0x6C	; 108
    1d58:	fd 4d       	sbci	r31, 0xDD	; 221
    1d5a:	80 83       	st	Z, r24
    1d5c:	91 83       	std	Z+1, r25	; 0x01
    1d5e:	cc 0f       	add	r28, r28
    1d60:	dd 1f       	adc	r29, r29
    1d62:	cc 0f       	add	r28, r28
    1d64:	dd 1f       	adc	r29, r29
    1d66:	cc 0f       	add	r28, r28
    1d68:	dd 1f       	adc	r29, r29
    1d6a:	cc 57       	subi	r28, 0x7C	; 124
    1d6c:	dd 4d       	sbci	r29, 0xDD	; 221
    1d6e:	2a 8b       	std	Y+18, r18	; 0x12
    1d70:	3b 8b       	std	Y+19, r19	; 0x13
    1d72:	f7 01       	movw	r30, r14
    1d74:	02 e0       	ldi	r16, 0x02	; 2
    1d76:	06 93       	lac	Z, r16
    1d78:	13 c0       	rjmp	.+38     	; 0x1da0 <udd_ep_trans_complet+0x2f0>
    1d7a:	d8 01       	movw	r26, r16
    1d7c:	8c 91       	ld	r24, X
    1d7e:	80 ff       	sbrs	r24, 0
    1d80:	0f c0       	rjmp	.+30     	; 0x1da0 <udd_ep_trans_complet+0x2f0>
    1d82:	8e 7f       	andi	r24, 0xFE	; 254
    1d84:	8c 93       	st	X, r24
    1d86:	17 96       	adiw	r26, 0x07	; 7
    1d88:	ed 91       	ld	r30, X+
    1d8a:	fc 91       	ld	r31, X
    1d8c:	18 97       	sbiw	r26, 0x08	; 8
    1d8e:	30 97       	sbiw	r30, 0x00	; 0
    1d90:	39 f0       	breq	.+14     	; 0x1da0 <udd_ep_trans_complet+0x2f0>
    1d92:	15 96       	adiw	r26, 0x05	; 5
    1d94:	6d 91       	ld	r22, X+
    1d96:	7c 91       	ld	r23, X
    1d98:	16 97       	sbiw	r26, 0x06	; 6
    1d9a:	4d 2d       	mov	r20, r13
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	19 95       	eicall
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	df 90       	pop	r13
    1dae:	bf 90       	pop	r11
    1db0:	af 90       	pop	r10
    1db2:	9f 90       	pop	r9
    1db4:	8f 90       	pop	r8
    1db6:	08 95       	ret

00001db8 <udd_attach>:
    1db8:	1f 93       	push	r17
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	1f 92       	push	r1
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	8f b7       	in	r24, 0x3f	; 63
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	f8 94       	cli
    1dca:	19 81       	ldd	r17, Y+1	; 0x01
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	cd dc       	rcall	.-1638   	; 0x176a <udd_sleep_mode>
    1dd0:	ea ec       	ldi	r30, 0xCA	; 202
    1dd2:	f4 e0       	ldi	r31, 0x04	; 4
    1dd4:	80 e4       	ldi	r24, 0x40	; 64
    1dd6:	80 83       	st	Z, r24
    1dd8:	80 e2       	ldi	r24, 0x20	; 32
    1dda:	80 83       	st	Z, r24
    1ddc:	e1 ec       	ldi	r30, 0xC1	; 193
    1dde:	f4 e0       	ldi	r31, 0x04	; 4
    1de0:	80 81       	ld	r24, Z
    1de2:	81 60       	ori	r24, 0x01	; 1
    1de4:	80 83       	st	Z, r24
    1de6:	a9 ec       	ldi	r26, 0xC9	; 201
    1de8:	b4 e0       	ldi	r27, 0x04	; 4
    1dea:	8c 91       	ld	r24, X
    1dec:	82 60       	ori	r24, 0x02	; 2
    1dee:	8c 93       	st	X, r24
    1df0:	e8 ec       	ldi	r30, 0xC8	; 200
    1df2:	f4 e0       	ldi	r31, 0x04	; 4
    1df4:	80 81       	ld	r24, Z
    1df6:	80 64       	ori	r24, 0x40	; 64
    1df8:	80 83       	st	Z, r24
    1dfa:	8c 91       	ld	r24, X
    1dfc:	81 60       	ori	r24, 0x01	; 1
    1dfe:	8c 93       	st	X, r24
    1e00:	80 81       	ld	r24, Z
    1e02:	80 68       	ori	r24, 0x80	; 128
    1e04:	80 83       	st	Z, r24
    1e06:	1f bf       	out	0x3f, r17	; 63
    1e08:	0f 90       	pop	r0
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	08 95       	ret

00001e12 <udd_enable>:
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	1f 92       	push	r1
    1e1c:	1f 92       	push	r1
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	00 e6       	ldi	r16, 0x60	; 96
    1e24:	10 e0       	ldi	r17, 0x00	; 0
    1e26:	f8 01       	movw	r30, r16
    1e28:	10 82       	st	Z, r1
    1e2a:	80 e3       	ldi	r24, 0x30	; 48
    1e2c:	0e 94 90 17 	call	0x2f20	; 0x2f20 <sysclk_enable_usb>
    1e30:	e0 ec       	ldi	r30, 0xC0	; 192
    1e32:	f4 e0       	ldi	r31, 0x04	; 4
    1e34:	80 81       	ld	r24, Z
    1e36:	80 64       	ori	r24, 0x40	; 64
    1e38:	80 83       	st	Z, r24
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	80 83       	st	Z, r24
    1e40:	8f b7       	in	r24, 0x3f	; 63
    1e42:	8a 83       	std	Y+2, r24	; 0x02
    1e44:	f8 94       	cli
    1e46:	1a 81       	ldd	r17, Y+2	; 0x02
    1e48:	e4 e8       	ldi	r30, 0x84	; 132
    1e4a:	f2 e2       	ldi	r31, 0x22	; 34
    1e4c:	15 86       	std	Z+13, r1	; 0x0d
    1e4e:	15 8a       	std	Z+21, r1	; 0x15
    1e50:	15 8e       	std	Z+29, r1	; 0x1d
    1e52:	15 a2       	std	Z+37, r1	; 0x25
    1e54:	15 a6       	std	Z+45, r1	; 0x2d
    1e56:	15 aa       	std	Z+53, r1	; 0x35
    1e58:	e8 e1       	ldi	r30, 0x18	; 24
    1e5a:	f2 e2       	ldi	r31, 0x22	; 34
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8e 7f       	andi	r24, 0xFE	; 254
    1e60:	80 83       	st	Z, r24
    1e62:	e1 e2       	ldi	r30, 0x21	; 33
    1e64:	f2 e2       	ldi	r31, 0x22	; 34
    1e66:	80 81       	ld	r24, Z
    1e68:	8e 7f       	andi	r24, 0xFE	; 254
    1e6a:	80 83       	st	Z, r24
    1e6c:	ea e2       	ldi	r30, 0x2A	; 42
    1e6e:	f2 e2       	ldi	r31, 0x22	; 34
    1e70:	80 81       	ld	r24, Z
    1e72:	8e 7f       	andi	r24, 0xFE	; 254
    1e74:	80 83       	st	Z, r24
    1e76:	e3 e3       	ldi	r30, 0x33	; 51
    1e78:	f2 e2       	ldi	r31, 0x22	; 34
    1e7a:	80 81       	ld	r24, Z
    1e7c:	8e 7f       	andi	r24, 0xFE	; 254
    1e7e:	80 83       	st	Z, r24
    1e80:	6a e1       	ldi	r22, 0x1A	; 26
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <nvm_read_byte>
    1e8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e8c:	19 f0       	breq	.+6      	; 0x1e94 <udd_enable+0x82>
    1e8e:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1e92:	03 c0       	rjmp	.+6      	; 0x1e9a <udd_enable+0x88>
    1e94:	8f e1       	ldi	r24, 0x1F	; 31
    1e96:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1e9a:	6b e1       	ldi	r22, 0x1B	; 27
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <nvm_read_byte>
    1ea4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ea6:	19 f0       	breq	.+6      	; 0x1eae <udd_enable+0x9c>
    1ea8:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <udd_enable+0xa2>
    1eae:	8f e1       	ldi	r24, 0x1F	; 31
    1eb0:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1eb4:	e0 ec       	ldi	r30, 0xC0	; 192
    1eb6:	f4 e0       	ldi	r31, 0x04	; 4
    1eb8:	80 81       	ld	r24, Z
    1eba:	82 60       	ori	r24, 0x02	; 2
    1ebc:	80 83       	st	Z, r24
    1ebe:	80 81       	ld	r24, Z
    1ec0:	80 68       	ori	r24, 0x80	; 128
    1ec2:	80 83       	st	Z, r24
    1ec4:	80 81       	ld	r24, Z
    1ec6:	80 61       	ori	r24, 0x10	; 16
    1ec8:	80 83       	st	Z, r24
    1eca:	80 e9       	ldi	r24, 0x90	; 144
    1ecc:	92 e2       	ldi	r25, 0x22	; 34
    1ece:	86 83       	std	Z+6, r24	; 0x06
    1ed0:	97 83       	std	Z+7, r25	; 0x07
    1ed2:	80 81       	ld	r24, Z
    1ed4:	80 62       	ori	r24, 0x20	; 32
    1ed6:	80 83       	st	Z, r24
    1ed8:	8f ef       	ldi	r24, 0xFF	; 255
    1eda:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    1ede:	e8 ec       	ldi	r30, 0xC8	; 200
    1ee0:	f4 e0       	ldi	r31, 0x04	; 4
    1ee2:	80 81       	ld	r24, Z
    1ee4:	81 60       	ori	r24, 0x01	; 1
    1ee6:	80 83       	st	Z, r24
    1ee8:	10 92 c4 22 	sts	0x22C4, r1	; 0x8022c4 <udd_b_idle>
    1eec:	80 91 19 24 	lds	r24, 0x2419	; 0x802419 <sleepmgr_locks+0x5>
    1ef0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <udd_enable+0xe4>
    1ef4:	ff cf       	rjmp	.-2      	; 0x1ef4 <udd_enable+0xe2>
    1ef6:	8f b7       	in	r24, 0x3f	; 63
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	f8 94       	cli
    1efc:	99 81       	ldd	r25, Y+1	; 0x01
    1efe:	e4 e1       	ldi	r30, 0x14	; 20
    1f00:	f4 e2       	ldi	r31, 0x24	; 36
    1f02:	85 81       	ldd	r24, Z+5	; 0x05
    1f04:	8f 5f       	subi	r24, 0xFF	; 255
    1f06:	85 83       	std	Z+5, r24	; 0x05
    1f08:	9f bf       	out	0x3f, r25	; 63
    1f0a:	56 df       	rcall	.-340    	; 0x1db8 <udd_attach>
    1f0c:	1f bf       	out	0x3f, r17	; 63
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	08 95       	ret

00001f1c <udd_is_high_speed>:
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	08 95       	ret

00001f20 <udd_set_address>:
    1f20:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    1f24:	08 95       	ret

00001f26 <udd_getaddress>:
    1f26:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    1f2a:	08 95       	ret

00001f2c <udd_get_frame_number>:
    1f2c:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <udd_sram+0x3c>
    1f30:	90 91 c1 22 	lds	r25, 0x22C1	; 0x8022c1 <udd_sram+0x3d>
    1f34:	08 95       	ret

00001f36 <udd_get_micro_frame_number>:
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	08 95       	ret

00001f3c <udd_set_setup_payload>:
    1f3c:	e4 e0       	ldi	r30, 0x04	; 4
    1f3e:	f4 e2       	ldi	r31, 0x24	; 36
    1f40:	80 87       	std	Z+8, r24	; 0x08
    1f42:	91 87       	std	Z+9, r25	; 0x09
    1f44:	62 87       	std	Z+10, r22	; 0x0a
    1f46:	73 87       	std	Z+11, r23	; 0x0b
    1f48:	08 95       	ret

00001f4a <udd_ep_alloc>:
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	2f 70       	andi	r18, 0x0F	; 15
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	22 0f       	add	r18, r18
    1f52:	33 1f       	adc	r19, r19
    1f54:	08 2e       	mov	r0, r24
    1f56:	00 0c       	add	r0, r0
    1f58:	99 0b       	sbc	r25, r25
    1f5a:	88 27       	eor	r24, r24
    1f5c:	99 0f       	add	r25, r25
    1f5e:	88 1f       	adc	r24, r24
    1f60:	99 27       	eor	r25, r25
    1f62:	82 0f       	add	r24, r18
    1f64:	93 1f       	adc	r25, r19
    1f66:	fc 01       	movw	r30, r24
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	ee 0f       	add	r30, r30
    1f6e:	ff 1f       	adc	r31, r31
    1f70:	ee 0f       	add	r30, r30
    1f72:	ff 1f       	adc	r31, r31
    1f74:	ec 57       	subi	r30, 0x7C	; 124
    1f76:	fd 4d       	sbci	r31, 0xDD	; 221
    1f78:	25 85       	ldd	r18, Z+13	; 0x0d
    1f7a:	20 7c       	andi	r18, 0xC0	; 192
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <udd_ep_alloc+0x36>
    1f7e:	69 c0       	rjmp	.+210    	; 0x2052 <udd_ep_alloc+0x108>
    1f80:	63 70       	andi	r22, 0x03	; 3
    1f82:	61 30       	cpi	r22, 0x01	; 1
    1f84:	11 f0       	breq	.+4      	; 0x1f8a <udd_ep_alloc+0x40>
    1f86:	18 f4       	brcc	.+6      	; 0x1f8e <udd_ep_alloc+0x44>
    1f88:	04 c0       	rjmp	.+8      	; 0x1f92 <udd_ep_alloc+0x48>
    1f8a:	60 ec       	ldi	r22, 0xC0	; 192
    1f8c:	03 c0       	rjmp	.+6      	; 0x1f94 <udd_ep_alloc+0x4a>
    1f8e:	60 e8       	ldi	r22, 0x80	; 128
    1f90:	01 c0       	rjmp	.+2      	; 0x1f94 <udd_ep_alloc+0x4a>
    1f92:	60 e4       	ldi	r22, 0x40	; 64
    1f94:	40 38       	cpi	r20, 0x80	; 128
    1f96:	51 05       	cpc	r21, r1
    1f98:	e9 f0       	breq	.+58     	; 0x1fd4 <udd_ep_alloc+0x8a>
    1f9a:	50 f4       	brcc	.+20     	; 0x1fb0 <udd_ep_alloc+0x66>
    1f9c:	40 32       	cpi	r20, 0x20	; 32
    1f9e:	51 05       	cpc	r21, r1
    1fa0:	a9 f0       	breq	.+42     	; 0x1fcc <udd_ep_alloc+0x82>
    1fa2:	40 34       	cpi	r20, 0x40	; 64
    1fa4:	51 05       	cpc	r21, r1
    1fa6:	a1 f0       	breq	.+40     	; 0x1fd0 <udd_ep_alloc+0x86>
    1fa8:	40 31       	cpi	r20, 0x10	; 16
    1faa:	51 05       	cpc	r21, r1
    1fac:	d9 f4       	brne	.+54     	; 0x1fe4 <udd_ep_alloc+0x9a>
    1fae:	0c c0       	rjmp	.+24     	; 0x1fc8 <udd_ep_alloc+0x7e>
    1fb0:	41 15       	cp	r20, r1
    1fb2:	22 e0       	ldi	r18, 0x02	; 2
    1fb4:	52 07       	cpc	r21, r18
    1fb6:	91 f0       	breq	.+36     	; 0x1fdc <udd_ep_alloc+0x92>
    1fb8:	4f 3f       	cpi	r20, 0xFF	; 255
    1fba:	23 e0       	ldi	r18, 0x03	; 3
    1fbc:	52 07       	cpc	r21, r18
    1fbe:	81 f0       	breq	.+32     	; 0x1fe0 <udd_ep_alloc+0x96>
    1fc0:	41 15       	cp	r20, r1
    1fc2:	51 40       	sbci	r21, 0x01	; 1
    1fc4:	79 f4       	brne	.+30     	; 0x1fe4 <udd_ep_alloc+0x9a>
    1fc6:	08 c0       	rjmp	.+16     	; 0x1fd8 <udd_ep_alloc+0x8e>
    1fc8:	21 e0       	ldi	r18, 0x01	; 1
    1fca:	0d c0       	rjmp	.+26     	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fcc:	22 e0       	ldi	r18, 0x02	; 2
    1fce:	0b c0       	rjmp	.+22     	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fd0:	23 e0       	ldi	r18, 0x03	; 3
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fd4:	24 e0       	ldi	r18, 0x04	; 4
    1fd6:	07 c0       	rjmp	.+14     	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fd8:	25 e0       	ldi	r18, 0x05	; 5
    1fda:	05 c0       	rjmp	.+10     	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fdc:	26 e0       	ldi	r18, 0x06	; 6
    1fde:	03 c0       	rjmp	.+6      	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fe0:	27 e0       	ldi	r18, 0x07	; 7
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	ec 57       	subi	r30, 0x7C	; 124
    1ff6:	fd 4d       	sbci	r31, 0xDD	; 221
    1ff8:	15 86       	std	Z+13, r1	; 0x0d
    1ffa:	36 e0       	ldi	r19, 0x06	; 6
    1ffc:	34 87       	std	Z+12, r19	; 0x0c
    1ffe:	26 2b       	or	r18, r22
    2000:	25 87       	std	Z+13, r18	; 0x0d
    2002:	fc 01       	movw	r30, r24
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	ee 0f       	add	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	ee 0f       	add	r30, r30
    200e:	ff 1f       	adc	r31, r31
    2010:	ec 57       	subi	r30, 0x7C	; 124
    2012:	fd 4d       	sbci	r31, 0xDD	; 221
    2014:	25 85       	ldd	r18, Z+13	; 0x0d
    2016:	20 7c       	andi	r18, 0xC0	; 192
    2018:	20 3c       	cpi	r18, 0xC0	; 192
    201a:	69 f4       	brne	.+26     	; 0x2036 <udd_ep_alloc+0xec>
    201c:	fc 01       	movw	r30, r24
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	ee 0f       	add	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	ee 0f       	add	r30, r30
    2028:	ff 1f       	adc	r31, r31
    202a:	ec 57       	subi	r30, 0x7C	; 124
    202c:	fd 4d       	sbci	r31, 0xDD	; 221
    202e:	25 85       	ldd	r18, Z+13	; 0x0d
    2030:	27 70       	andi	r18, 0x07	; 7
    2032:	27 30       	cpi	r18, 0x07	; 7
    2034:	81 f0       	breq	.+32     	; 0x2056 <udd_ep_alloc+0x10c>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	fc 01       	movw	r30, r24
    2044:	ec 57       	subi	r30, 0x7C	; 124
    2046:	fd 4d       	sbci	r31, 0xDD	; 221
    2048:	85 85       	ldd	r24, Z+13	; 0x0d
    204a:	80 62       	ori	r24, 0x20	; 32
    204c:	85 87       	std	Z+13, r24	; 0x0d
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	08 95       	ret
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	08 95       	ret
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	08 95       	ret

0000205a <udd_ep_is_halted>:
    205a:	e8 2f       	mov	r30, r24
    205c:	ef 70       	andi	r30, 0x0F	; 15
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	ee 0f       	add	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	08 2e       	mov	r0, r24
    2066:	00 0c       	add	r0, r0
    2068:	99 0b       	sbc	r25, r25
    206a:	88 27       	eor	r24, r24
    206c:	99 0f       	add	r25, r25
    206e:	88 1f       	adc	r24, r24
    2070:	99 27       	eor	r25, r25
    2072:	e8 0f       	add	r30, r24
    2074:	f9 1f       	adc	r31, r25
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	ee 0f       	add	r30, r30
    207c:	ff 1f       	adc	r31, r31
    207e:	ee 0f       	add	r30, r30
    2080:	ff 1f       	adc	r31, r31
    2082:	ec 57       	subi	r30, 0x7C	; 124
    2084:	fd 4d       	sbci	r31, 0xDD	; 221
    2086:	85 85       	ldd	r24, Z+13	; 0x0d
    2088:	82 fb       	bst	r24, 2
    208a:	88 27       	eor	r24, r24
    208c:	80 f9       	bld	r24, 0
    208e:	08 95       	ret

00002090 <udd_ep_clear_halt>:
    2090:	0f 93       	push	r16
    2092:	28 2f       	mov	r18, r24
    2094:	2f 70       	andi	r18, 0x0F	; 15
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	a9 01       	movw	r20, r18
    209a:	44 0f       	add	r20, r20
    209c:	55 1f       	adc	r21, r21
    209e:	28 2f       	mov	r18, r24
    20a0:	08 2e       	mov	r0, r24
    20a2:	00 0c       	add	r0, r0
    20a4:	33 0b       	sbc	r19, r19
    20a6:	22 27       	eor	r18, r18
    20a8:	33 0f       	add	r19, r19
    20aa:	22 1f       	adc	r18, r18
    20ac:	33 27       	eor	r19, r19
    20ae:	24 0f       	add	r18, r20
    20b0:	35 1f       	adc	r19, r21
    20b2:	a9 01       	movw	r20, r18
    20b4:	44 0f       	add	r20, r20
    20b6:	55 1f       	adc	r21, r21
    20b8:	44 0f       	add	r20, r20
    20ba:	55 1f       	adc	r21, r21
    20bc:	44 0f       	add	r20, r20
    20be:	55 1f       	adc	r21, r21
    20c0:	fa 01       	movw	r30, r20
    20c2:	e0 57       	subi	r30, 0x70	; 112
    20c4:	fd 4d       	sbci	r31, 0xDD	; 221
    20c6:	01 e0       	ldi	r16, 0x01	; 1
    20c8:	06 93       	lac	Z, r16
    20ca:	fa 01       	movw	r30, r20
    20cc:	ec 57       	subi	r30, 0x7C	; 124
    20ce:	fd 4d       	sbci	r31, 0xDD	; 221
    20d0:	95 85       	ldd	r25, Z+13	; 0x0d
    20d2:	92 ff       	sbrs	r25, 2
    20d4:	11 c0       	rjmp	.+34     	; 0x20f8 <udd_ep_clear_halt+0x68>
    20d6:	fa 01       	movw	r30, r20
    20d8:	ec 57       	subi	r30, 0x7C	; 124
    20da:	fd 4d       	sbci	r31, 0xDD	; 221
    20dc:	95 85       	ldd	r25, Z+13	; 0x0d
    20de:	9b 7f       	andi	r25, 0xFB	; 251
    20e0:	95 87       	std	Z+13, r25	; 0x0d
    20e2:	59 dc       	rcall	.-1870   	; 0x1996 <udd_ep_get_job>
    20e4:	fc 01       	movw	r30, r24
    20e6:	80 81       	ld	r24, Z
    20e8:	80 ff       	sbrs	r24, 0
    20ea:	06 c0       	rjmp	.+12     	; 0x20f8 <udd_ep_clear_halt+0x68>
    20ec:	8e 7f       	andi	r24, 0xFE	; 254
    20ee:	80 83       	st	Z, r24
    20f0:	07 80       	ldd	r0, Z+7	; 0x07
    20f2:	f0 85       	ldd	r31, Z+8	; 0x08
    20f4:	e0 2d       	mov	r30, r0
    20f6:	19 95       	eicall
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	0f 91       	pop	r16
    20fc:	08 95       	ret

000020fe <udd_ep_run>:
    20fe:	6f 92       	push	r6
    2100:	7f 92       	push	r7
    2102:	8f 92       	push	r8
    2104:	9f 92       	push	r9
    2106:	af 92       	push	r10
    2108:	bf 92       	push	r11
    210a:	cf 92       	push	r12
    210c:	df 92       	push	r13
    210e:	ef 92       	push	r14
    2110:	ff 92       	push	r15
    2112:	0f 93       	push	r16
    2114:	1f 93       	push	r17
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	1f 92       	push	r1
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	78 2e       	mov	r7, r24
    2122:	66 2e       	mov	r6, r22
    2124:	4a 01       	movw	r8, r20
    2126:	59 01       	movw	r10, r18
    2128:	36 dc       	rcall	.-1940   	; 0x1996 <udd_ep_get_job>
    212a:	6c 01       	movw	r12, r24
    212c:	27 2d       	mov	r18, r7
    212e:	87 2d       	mov	r24, r7
    2130:	8f 70       	andi	r24, 0x0F	; 15
    2132:	e8 2e       	mov	r14, r24
    2134:	f1 2c       	mov	r15, r1
    2136:	c7 01       	movw	r24, r14
    2138:	88 0f       	add	r24, r24
    213a:	99 1f       	adc	r25, r25
    213c:	e7 2c       	mov	r14, r7
    213e:	07 2c       	mov	r0, r7
    2140:	00 0c       	add	r0, r0
    2142:	ff 08       	sbc	r15, r15
    2144:	ee 24       	eor	r14, r14
    2146:	ff 0c       	add	r15, r15
    2148:	ee 1c       	adc	r14, r14
    214a:	ff 24       	eor	r15, r15
    214c:	e8 0e       	add	r14, r24
    214e:	f9 1e       	adc	r15, r25
    2150:	f7 01       	movw	r30, r14
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	ee 0f       	add	r30, r30
    2158:	ff 1f       	adc	r31, r31
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	ec 57       	subi	r30, 0x7C	; 124
    2160:	fd 4d       	sbci	r31, 0xDD	; 221
    2162:	85 85       	ldd	r24, Z+13	; 0x0d
    2164:	80 7c       	andi	r24, 0xC0	; 192
    2166:	09 f4       	brne	.+2      	; 0x216a <udd_ep_run+0x6c>
    2168:	82 c0       	rjmp	.+260    	; 0x226e <udd_ep_run+0x170>
    216a:	f7 01       	movw	r30, r14
    216c:	ee 0f       	add	r30, r30
    216e:	ff 1f       	adc	r31, r31
    2170:	ee 0f       	add	r30, r30
    2172:	ff 1f       	adc	r31, r31
    2174:	ee 0f       	add	r30, r30
    2176:	ff 1f       	adc	r31, r31
    2178:	ec 57       	subi	r30, 0x7C	; 124
    217a:	fd 4d       	sbci	r31, 0xDD	; 221
    217c:	85 85       	ldd	r24, Z+13	; 0x0d
    217e:	80 7c       	andi	r24, 0xC0	; 192
    2180:	80 3c       	cpi	r24, 0xC0	; 192
    2182:	61 f0       	breq	.+24     	; 0x219c <udd_ep_run+0x9e>
    2184:	f7 01       	movw	r30, r14
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	ee 0f       	add	r30, r30
    218c:	ff 1f       	adc	r31, r31
    218e:	ee 0f       	add	r30, r30
    2190:	ff 1f       	adc	r31, r31
    2192:	ec 57       	subi	r30, 0x7C	; 124
    2194:	fd 4d       	sbci	r31, 0xDD	; 221
    2196:	85 85       	ldd	r24, Z+13	; 0x0d
    2198:	82 fd       	sbrc	r24, 2
    219a:	6b c0       	rjmp	.+214    	; 0x2272 <udd_ep_run+0x174>
    219c:	8f b7       	in	r24, 0x3f	; 63
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	f8 94       	cli
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	f6 01       	movw	r30, r12
    21a6:	90 81       	ld	r25, Z
    21a8:	90 ff       	sbrs	r25, 0
    21aa:	03 c0       	rjmp	.+6      	; 0x21b2 <udd_ep_run+0xb4>
    21ac:	8f bf       	out	0x3f, r24	; 63
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	61 c0       	rjmp	.+194    	; 0x2274 <udd_ep_run+0x176>
    21b2:	f6 01       	movw	r30, r12
    21b4:	90 81       	ld	r25, Z
    21b6:	91 60       	ori	r25, 0x01	; 1
    21b8:	90 83       	st	Z, r25
    21ba:	8f bf       	out	0x3f, r24	; 63
    21bc:	81 82       	std	Z+1, r8	; 0x01
    21be:	92 82       	std	Z+2, r9	; 0x02
    21c0:	a3 82       	std	Z+3, r10	; 0x03
    21c2:	b4 82       	std	Z+4, r11	; 0x04
    21c4:	15 82       	std	Z+5, r1	; 0x05
    21c6:	16 82       	std	Z+6, r1	; 0x06
    21c8:	07 83       	std	Z+7, r16	; 0x07
    21ca:	10 87       	std	Z+8, r17	; 0x08
    21cc:	61 10       	cpse	r6, r1
    21ce:	06 c0       	rjmp	.+12     	; 0x21dc <udd_ep_run+0xde>
    21d0:	91 e0       	ldi	r25, 0x01	; 1
    21d2:	a1 14       	cp	r10, r1
    21d4:	b1 04       	cpc	r11, r1
    21d6:	19 f0       	breq	.+6      	; 0x21de <udd_ep_run+0xe0>
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	01 c0       	rjmp	.+2      	; 0x21de <udd_ep_run+0xe0>
    21dc:	91 e0       	ldi	r25, 0x01	; 1
    21de:	f6 01       	movw	r30, r12
    21e0:	80 81       	ld	r24, Z
    21e2:	90 fb       	bst	r25, 0
    21e4:	81 f9       	bld	r24, 1
    21e6:	8b 7f       	andi	r24, 0xFB	; 251
    21e8:	80 83       	st	Z, r24
    21ea:	22 23       	and	r18, r18
    21ec:	64 f4       	brge	.+24     	; 0x2206 <udd_ep_run+0x108>
    21ee:	f7 01       	movw	r30, r14
    21f0:	ee 0f       	add	r30, r30
    21f2:	ff 1f       	adc	r31, r31
    21f4:	ee 0f       	add	r30, r30
    21f6:	ff 1f       	adc	r31, r31
    21f8:	ee 0f       	add	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	ec 57       	subi	r30, 0x7C	; 124
    21fe:	fd 4d       	sbci	r31, 0xDD	; 221
    2200:	12 8a       	std	Z+18, r1	; 0x12
    2202:	13 8a       	std	Z+19, r1	; 0x13
    2204:	30 c0       	rjmp	.+96     	; 0x2266 <udd_ep_run+0x168>
    2206:	f7 01       	movw	r30, r14
    2208:	ee 0f       	add	r30, r30
    220a:	ff 1f       	adc	r31, r31
    220c:	ee 0f       	add	r30, r30
    220e:	ff 1f       	adc	r31, r31
    2210:	ee 0f       	add	r30, r30
    2212:	ff 1f       	adc	r31, r31
    2214:	ec 57       	subi	r30, 0x7C	; 124
    2216:	fd 4d       	sbci	r31, 0xDD	; 221
    2218:	85 85       	ldd	r24, Z+13	; 0x0d
    221a:	80 7c       	andi	r24, 0xC0	; 192
    221c:	80 3c       	cpi	r24, 0xC0	; 192
    221e:	b1 f4       	brne	.+44     	; 0x224c <udd_ep_run+0x14e>
    2220:	c7 01       	movw	r24, r14
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	80 57       	subi	r24, 0x70	; 112
    2230:	9d 4d       	sbci	r25, 0xDD	; 221
    2232:	88 db       	rcall	.-2288   	; 0x1944 <udd_ep_get_size>
    2234:	bc 01       	movw	r22, r24
    2236:	c5 01       	movw	r24, r10
    2238:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__udivmodhi4>
    223c:	89 2b       	or	r24, r25
    223e:	31 f0       	breq	.+12     	; 0x224c <udd_ep_run+0x14e>
    2240:	f6 01       	movw	r30, r12
    2242:	80 81       	ld	r24, Z
    2244:	8e 7f       	andi	r24, 0xFE	; 254
    2246:	80 83       	st	Z, r24
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	14 c0       	rjmp	.+40     	; 0x2274 <udd_ep_run+0x176>
    224c:	f7 01       	movw	r30, r14
    224e:	ee 0f       	add	r30, r30
    2250:	ff 1f       	adc	r31, r31
    2252:	ee 0f       	add	r30, r30
    2254:	ff 1f       	adc	r31, r31
    2256:	ee 0f       	add	r30, r30
    2258:	ff 1f       	adc	r31, r31
    225a:	ec 57       	subi	r30, 0x7C	; 124
    225c:	fd 4d       	sbci	r31, 0xDD	; 221
    225e:	16 86       	std	Z+14, r1	; 0x0e
    2260:	17 86       	std	Z+15, r1	; 0x0f
    2262:	12 8a       	std	Z+18, r1	; 0x12
    2264:	13 8a       	std	Z+19, r1	; 0x13
    2266:	87 2d       	mov	r24, r7
    2268:	23 dc       	rcall	.-1978   	; 0x1ab0 <udd_ep_trans_complet>
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	03 c0       	rjmp	.+6      	; 0x2274 <udd_ep_run+0x176>
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	01 c0       	rjmp	.+2      	; 0x2274 <udd_ep_run+0x176>
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	0f 90       	pop	r0
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	ff 90       	pop	r15
    2280:	ef 90       	pop	r14
    2282:	df 90       	pop	r13
    2284:	cf 90       	pop	r12
    2286:	bf 90       	pop	r11
    2288:	af 90       	pop	r10
    228a:	9f 90       	pop	r9
    228c:	8f 90       	pop	r8
    228e:	7f 90       	pop	r7
    2290:	6f 90       	pop	r6
    2292:	08 95       	ret

00002294 <udd_ep_abort>:
    2294:	ff 92       	push	r15
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	18 2f       	mov	r17, r24
    22a0:	c8 2f       	mov	r28, r24
    22a2:	cf 70       	andi	r28, 0x0F	; 15
    22a4:	d0 e0       	ldi	r29, 0x00	; 0
    22a6:	ce 01       	movw	r24, r28
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	c1 2f       	mov	r28, r17
    22ae:	01 2e       	mov	r0, r17
    22b0:	00 0c       	add	r0, r0
    22b2:	dd 0b       	sbc	r29, r29
    22b4:	cc 27       	eor	r28, r28
    22b6:	dd 0f       	add	r29, r29
    22b8:	cc 1f       	adc	r28, r28
    22ba:	dd 27       	eor	r29, r29
    22bc:	c8 0f       	add	r28, r24
    22be:	d9 1f       	adc	r29, r25
    22c0:	81 2f       	mov	r24, r17
    22c2:	69 db       	rcall	.-2350   	; 0x1996 <udd_ep_get_job>
    22c4:	dc 01       	movw	r26, r24
    22c6:	fe 01       	movw	r30, r28
    22c8:	ee 0f       	add	r30, r30
    22ca:	ff 1f       	adc	r31, r31
    22cc:	ee 0f       	add	r30, r30
    22ce:	ff 1f       	adc	r31, r31
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	e0 57       	subi	r30, 0x70	; 112
    22d6:	fd 4d       	sbci	r31, 0xDD	; 221
    22d8:	02 e0       	ldi	r16, 0x02	; 2
    22da:	05 93       	las	Z, r16
    22dc:	8c 91       	ld	r24, X
    22de:	80 ff       	sbrs	r24, 0
    22e0:	22 c0       	rjmp	.+68     	; 0x2326 <udd_ep_abort+0x92>
    22e2:	8e 7f       	andi	r24, 0xFE	; 254
    22e4:	8c 93       	st	X, r24
    22e6:	17 96       	adiw	r26, 0x07	; 7
    22e8:	ed 91       	ld	r30, X+
    22ea:	fc 91       	ld	r31, X
    22ec:	18 97       	sbiw	r26, 0x08	; 8
    22ee:	30 97       	sbiw	r30, 0x00	; 0
    22f0:	d1 f0       	breq	.+52     	; 0x2326 <udd_ep_abort+0x92>
    22f2:	11 23       	and	r17, r17
    22f4:	5c f4       	brge	.+22     	; 0x230c <udd_ep_abort+0x78>
    22f6:	cc 0f       	add	r28, r28
    22f8:	dd 1f       	adc	r29, r29
    22fa:	cc 0f       	add	r28, r28
    22fc:	dd 1f       	adc	r29, r29
    22fe:	cc 0f       	add	r28, r28
    2300:	dd 1f       	adc	r29, r29
    2302:	cc 57       	subi	r28, 0x7C	; 124
    2304:	dd 4d       	sbci	r29, 0xDD	; 221
    2306:	6a 89       	ldd	r22, Y+18	; 0x12
    2308:	7b 89       	ldd	r23, Y+19	; 0x13
    230a:	0a c0       	rjmp	.+20     	; 0x2320 <udd_ep_abort+0x8c>
    230c:	cc 0f       	add	r28, r28
    230e:	dd 1f       	adc	r29, r29
    2310:	cc 0f       	add	r28, r28
    2312:	dd 1f       	adc	r29, r29
    2314:	cc 0f       	add	r28, r28
    2316:	dd 1f       	adc	r29, r29
    2318:	cc 57       	subi	r28, 0x7C	; 124
    231a:	dd 4d       	sbci	r29, 0xDD	; 221
    231c:	6e 85       	ldd	r22, Y+14	; 0x0e
    231e:	7f 85       	ldd	r23, Y+15	; 0x0f
    2320:	41 2f       	mov	r20, r17
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	19 95       	eicall
    2326:	df 91       	pop	r29
    2328:	cf 91       	pop	r28
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	ff 90       	pop	r15
    2330:	08 95       	ret

00002332 <udd_ep_free>:
    2332:	cf 93       	push	r28
    2334:	c8 2f       	mov	r28, r24
    2336:	ae df       	rcall	.-164    	; 0x2294 <udd_ep_abort>
    2338:	ec 2f       	mov	r30, r28
    233a:	ef 70       	andi	r30, 0x0F	; 15
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	ee 0f       	add	r30, r30
    2340:	ff 1f       	adc	r31, r31
    2342:	8c 2f       	mov	r24, r28
    2344:	cc 0f       	add	r28, r28
    2346:	99 0b       	sbc	r25, r25
    2348:	88 27       	eor	r24, r24
    234a:	99 0f       	add	r25, r25
    234c:	88 1f       	adc	r24, r24
    234e:	99 27       	eor	r25, r25
    2350:	e8 0f       	add	r30, r24
    2352:	f9 1f       	adc	r31, r25
    2354:	ee 0f       	add	r30, r30
    2356:	ff 1f       	adc	r31, r31
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	ee 0f       	add	r30, r30
    235e:	ff 1f       	adc	r31, r31
    2360:	ec 57       	subi	r30, 0x7C	; 124
    2362:	fd 4d       	sbci	r31, 0xDD	; 221
    2364:	15 86       	std	Z+13, r1	; 0x0d
    2366:	cf 91       	pop	r28
    2368:	08 95       	ret

0000236a <udd_ep_set_halt>:
    236a:	e8 2f       	mov	r30, r24
    236c:	ef 70       	andi	r30, 0x0F	; 15
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	28 2f       	mov	r18, r24
    2376:	08 2e       	mov	r0, r24
    2378:	00 0c       	add	r0, r0
    237a:	33 0b       	sbc	r19, r19
    237c:	22 27       	eor	r18, r18
    237e:	33 0f       	add	r19, r19
    2380:	22 1f       	adc	r18, r18
    2382:	33 27       	eor	r19, r19
    2384:	e2 0f       	add	r30, r18
    2386:	f3 1f       	adc	r31, r19
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	ec 57       	subi	r30, 0x7C	; 124
    2396:	fd 4d       	sbci	r31, 0xDD	; 221
    2398:	95 85       	ldd	r25, Z+13	; 0x0d
    239a:	94 60       	ori	r25, 0x04	; 4
    239c:	95 87       	std	Z+13, r25	; 0x0d
    239e:	7a df       	rcall	.-268    	; 0x2294 <udd_ep_abort>
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	08 95       	ret

000023a4 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    23a4:	1f 92       	push	r1
    23a6:	0f 92       	push	r0
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	0f 92       	push	r0
    23ac:	11 24       	eor	r1, r1
    23ae:	0b b6       	in	r0, 0x3b	; 59
    23b0:	0f 92       	push	r0
    23b2:	0f 93       	push	r16
    23b4:	2f 93       	push	r18
    23b6:	3f 93       	push	r19
    23b8:	4f 93       	push	r20
    23ba:	5f 93       	push	r21
    23bc:	6f 93       	push	r22
    23be:	7f 93       	push	r23
    23c0:	8f 93       	push	r24
    23c2:	9f 93       	push	r25
    23c4:	af 93       	push	r26
    23c6:	bf 93       	push	r27
    23c8:	ef 93       	push	r30
    23ca:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    23cc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    23d0:	88 23       	and	r24, r24
    23d2:	34 f4       	brge	.+12     	; 0x23e0 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    23d4:	80 e8       	ldi	r24, 0x80	; 128
    23d6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    23da:	0e 94 3c 1b 	call	0x3678	; 0x3678 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    23de:	88 c0       	rjmp	.+272    	; 0x24f0 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    23e0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    23e4:	82 ff       	sbrs	r24, 2
    23e6:	20 c0       	rjmp	.+64     	; 0x2428 <__vector_125+0x84>
		udd_ack_underflow_event();
    23e8:	84 e0       	ldi	r24, 0x04	; 4
    23ea:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    23ee:	80 91 98 22 	lds	r24, 0x2298	; 0x802298 <udd_sram+0x14>
    23f2:	86 ff       	sbrs	r24, 6
    23f4:	7d c0       	rjmp	.+250    	; 0x24f0 <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    23f6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    23fa:	81 fd       	sbrc	r24, 1
    23fc:	79 c0       	rjmp	.+242    	; 0x24f0 <__vector_125+0x14c>
    23fe:	e6 da       	rcall	.-2612   	; 0x19cc <udd_ctrl_interrupt_tc_setup>
    2400:	81 11       	cpse	r24, r1
    2402:	76 c0       	rjmp	.+236    	; 0x24f0 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2404:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_ep_control_state>
    2408:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    240a:	11 f4       	brne	.+4      	; 0x2410 <__vector_125+0x6c>
    240c:	19 da       	rcall	.-3022   	; 0x1840 <udd_ctrl_send_zlp_in>
    240e:	70 c0       	rjmp	.+224    	; 0x24f0 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2410:	84 30       	cpi	r24, 0x04	; 4
    2412:	09 f0       	breq	.+2      	; 0x2416 <__vector_125+0x72>
    2414:	6d c0       	rjmp	.+218    	; 0x24f0 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2416:	e9 e9       	ldi	r30, 0x99	; 153
    2418:	f2 e2       	ldi	r31, 0x22	; 34
    241a:	04 e0       	ldi	r16, 0x04	; 4
    241c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    241e:	e1 e9       	ldi	r30, 0x91	; 145
    2420:	f2 e2       	ldi	r31, 0x22	; 34
    2422:	04 e0       	ldi	r16, 0x04	; 4
    2424:	05 93       	las	Z, r16
    2426:	64 c0       	rjmp	.+200    	; 0x24f0 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2428:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    242c:	81 ff       	sbrs	r24, 1
    242e:	5b c0       	rjmp	.+182    	; 0x24e6 <__vector_125+0x142>
		udd_ack_overflow_event();
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2436:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <udd_sram+0xc>
    243a:	86 ff       	sbrs	r24, 6
    243c:	59 c0       	rjmp	.+178    	; 0x24f0 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    243e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2442:	81 fd       	sbrc	r24, 1
    2444:	55 c0       	rjmp	.+170    	; 0x24f0 <__vector_125+0x14c>
    2446:	c2 da       	rcall	.-2684   	; 0x19cc <udd_ctrl_interrupt_tc_setup>
    2448:	81 11       	cpse	r24, r1
    244a:	52 c0       	rjmp	.+164    	; 0x24f0 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    244c:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_ep_control_state>
    2450:	82 30       	cpi	r24, 0x02	; 2
    2452:	41 f4       	brne	.+16     	; 0x2464 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2454:	84 e0       	ldi	r24, 0x04	; 4
    2456:	80 93 80 22 	sts	0x2280, r24	; 0x802280 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    245a:	e0 e9       	ldi	r30, 0x90	; 144
    245c:	f2 e2       	ldi	r31, 0x22	; 34
    245e:	02 e0       	ldi	r16, 0x02	; 2
    2460:	06 93       	lac	Z, r16
    2462:	46 c0       	rjmp	.+140    	; 0x24f0 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2464:	83 30       	cpi	r24, 0x03	; 3
    2466:	09 f0       	breq	.+2      	; 0x246a <__vector_125+0xc6>
    2468:	43 c0       	rjmp	.+134    	; 0x24f0 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    246a:	e9 e9       	ldi	r30, 0x99	; 153
    246c:	f2 e2       	ldi	r31, 0x22	; 34
    246e:	04 e0       	ldi	r16, 0x04	; 4
    2470:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2472:	e1 e9       	ldi	r30, 0x91	; 145
    2474:	f2 e2       	ldi	r31, 0x22	; 34
    2476:	04 e0       	ldi	r16, 0x04	; 4
    2478:	05 93       	las	Z, r16
    247a:	3a c0       	rjmp	.+116    	; 0x24f0 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    247c:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    247e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2482:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2484:	07 df       	rcall	.-498    	; 0x2294 <udd_ep_abort>
    2486:	81 e8       	ldi	r24, 0x81	; 129
    2488:	05 df       	rcall	.-502    	; 0x2294 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    248a:	82 e0       	ldi	r24, 0x02	; 2
    248c:	03 df       	rcall	.-506    	; 0x2294 <udd_ep_abort>
    248e:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    2490:	01 df       	rcall	.-510    	; 0x2294 <udd_ep_abort>
    2492:	0e 94 13 1b 	call	0x3626	; 0x3626 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2496:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    249a:	e4 e8       	ldi	r30, 0x84	; 132
    249c:	f2 e2       	ldi	r31, 0x22	; 34
	udd_endpoint_clear_status(ep_ctrl);
    249e:	15 86       	std	Z+13, r1	; 0x0d
    24a0:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    24a2:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    24a4:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    24a6:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    24a8:	15 8a       	std	Z+21, r1	; 0x15
    24aa:	94 8b       	std	Z+20, r25	; 0x14
    24ac:	85 8b       	std	Z+21, r24	; 0x15
    24ae:	8c e3       	ldi	r24, 0x3C	; 60
		// Reset endpoint control management
		udd_ctrl_init();
    24b0:	92 e2       	ldi	r25, 0x22	; 34
    24b2:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    24b4:	91 8b       	std	Z+17, r25	; 0x11
    24b6:	91 d9       	rcall	.-3294   	; 0x17da <udd_ctrl_init>
		udd_ack_suspend_event();
    24b8:	1b c0       	rjmp	.+54     	; 0x24f0 <__vector_125+0x14c>
    24ba:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    24be:	86 ff       	sbrs	r24, 6
    24c0:	07 c0       	rjmp	.+14     	; 0x24d0 <__vector_125+0x12c>
    24c2:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    24c4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	4f d9       	rcall	.-3426   	; 0x176a <udd_sleep_mode>
		udd_ack_resume_event();
    24cc:	3d d2       	rcall	.+1146   	; 0x2948 <usb_callback_suspend_action>
    24ce:	10 c0       	rjmp	.+32     	; 0x24f0 <__vector_125+0x14c>
    24d0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    24d4:	85 ff       	sbrs	r24, 5
    24d6:	0c c0       	rjmp	.+24     	; 0x24f0 <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    24d8:	80 e2       	ldi	r24, 0x20	; 32
    24da:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	44 d9       	rcall	.-3448   	; 0x176a <udd_sleep_mode>
    24e2:	33 d2       	rcall	.+1126   	; 0x294a <usb_callback_resume_action>
    24e4:	05 c0       	rjmp	.+10     	; 0x24f0 <__vector_125+0x14c>
    24e6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    24ea:	84 fd       	sbrc	r24, 4
    24ec:	c7 cf       	rjmp	.-114    	; 0x247c <__vector_125+0xd8>
    24ee:	e5 cf       	rjmp	.-54     	; 0x24ba <__vector_125+0x116>
    24f0:	ff 91       	pop	r31
    24f2:	ef 91       	pop	r30
    24f4:	bf 91       	pop	r27
    24f6:	af 91       	pop	r26
    24f8:	9f 91       	pop	r25
    24fa:	8f 91       	pop	r24
    24fc:	7f 91       	pop	r23
    24fe:	6f 91       	pop	r22
    2500:	5f 91       	pop	r21
    2502:	4f 91       	pop	r20
    2504:	3f 91       	pop	r19
    2506:	2f 91       	pop	r18
    2508:	0f 91       	pop	r16
    250a:	0f 90       	pop	r0
    250c:	0b be       	out	0x3b, r0	; 59
    250e:	0f 90       	pop	r0
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	0f 90       	pop	r0
    2514:	1f 90       	pop	r1
    2516:	18 95       	reti

00002518 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2518:	1f 92       	push	r1
    251a:	0f 92       	push	r0
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	0f 92       	push	r0
    2520:	11 24       	eor	r1, r1
    2522:	0b b6       	in	r0, 0x3b	; 59
    2524:	0f 92       	push	r0
    2526:	0f 93       	push	r16
    2528:	1f 93       	push	r17
    252a:	2f 93       	push	r18
    252c:	3f 93       	push	r19
    252e:	4f 93       	push	r20
    2530:	5f 93       	push	r21
    2532:	6f 93       	push	r22
    2534:	7f 93       	push	r23
    2536:	8f 93       	push	r24
    2538:	9f 93       	push	r25
    253a:	af 93       	push	r26
    253c:	bf 93       	push	r27
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	ef 93       	push	r30
    2544:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2546:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    254a:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    254c:	03 c0       	rjmp	.+6      	; 0x2554 <__vector_126+0x3c>
    254e:	3e da       	rcall	.-2948   	; 0x19cc <udd_ctrl_interrupt_tc_setup>
    2550:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2552:	c4 c0       	rjmp	.+392    	; 0x26dc <__vector_126+0x1c4>
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    255a:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    255e:	81 95       	neg	r24
    2560:	88 0f       	add	r24, r24
    2562:	e0 e9       	ldi	r30, 0x90	; 144
    2564:	f2 e2       	ldi	r31, 0x22	; 34
    2566:	e8 1b       	sub	r30, r24
    2568:	f1 09       	sbc	r31, r1
    256a:	20 81       	ld	r18, Z
    256c:	31 81       	ldd	r19, Z+1	; 0x01
    256e:	20 59       	subi	r18, 0x90	; 144
    2570:	32 42       	sbci	r19, 0x22	; 34
    2572:	36 95       	lsr	r19
    2574:	27 95       	ror	r18
    2576:	36 95       	lsr	r19
    2578:	27 95       	ror	r18
    257a:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    257c:	27 95       	ror	r18
    257e:	82 2f       	mov	r24, r18
    2580:	86 95       	lsr	r24
    2582:	20 fd       	sbrc	r18, 0
    2584:	02 c0       	rjmp	.+4      	; 0x258a <__vector_126+0x72>
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	01 c0       	rjmp	.+2      	; 0x258c <__vector_126+0x74>
    258a:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    258c:	89 0f       	add	r24, r25
    258e:	e8 2f       	mov	r30, r24
    2590:	ef 70       	andi	r30, 0x0F	; 15
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	ee 0f       	add	r30, r30
    2596:	ff 1f       	adc	r31, r31
    2598:	28 2f       	mov	r18, r24
    259a:	08 2e       	mov	r0, r24
    259c:	00 0c       	add	r0, r0
    259e:	33 0b       	sbc	r19, r19
    25a0:	22 27       	eor	r18, r18
    25a2:	33 0f       	add	r19, r19
    25a4:	22 1f       	adc	r18, r18
    25a6:	33 27       	eor	r19, r19
    25a8:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    25aa:	f3 1f       	adc	r31, r19
    25ac:	df 01       	movw	r26, r30
    25ae:	aa 0f       	add	r26, r26
    25b0:	bb 1f       	adc	r27, r27
    25b2:	aa 0f       	add	r26, r26
    25b4:	bb 1f       	adc	r27, r27
    25b6:	aa 0f       	add	r26, r26
    25b8:	bb 1f       	adc	r27, r27
    25ba:	ac 57       	subi	r26, 0x7C	; 124
    25bc:	bd 4d       	sbci	r27, 0xDD	; 221
    25be:	1c 96       	adiw	r26, 0x0c	; 12
    25c0:	9c 91       	ld	r25, X
    25c2:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    25c4:	8b c0       	rjmp	.+278    	; 0x26dc <__vector_126+0x1c4>
    25c6:	ee 0f       	add	r30, r30
    25c8:	ff 1f       	adc	r31, r31
    25ca:	ee 0f       	add	r30, r30
    25cc:	ff 1f       	adc	r31, r31
    25ce:	ee 0f       	add	r30, r30
    25d0:	ff 1f       	adc	r31, r31
    25d2:	e0 57       	subi	r30, 0x70	; 112
    25d4:	fd 4d       	sbci	r31, 0xDD	; 221
    25d6:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    25d8:	06 93       	lac	Z, r16
    25da:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    25dc:	7a c0       	rjmp	.+244    	; 0x26d2 <__vector_126+0x1ba>
    25de:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    25e2:	84 30       	cpi	r24, 0x04	; 4
    25e4:	19 f4       	brne	.+6      	; 0x25ec <__vector_126+0xd4>
    25e6:	3a d9       	rcall	.-3468   	; 0x185c <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    25e8:	f8 d8       	rcall	.-3600   	; 0x17da <udd_ctrl_init>
    25ea:	78 c0       	rjmp	.+240    	; 0x26dc <__vector_126+0x1c4>
    25ec:	00 91 92 22 	lds	r16, 0x2292	; 0x802292 <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    25f0:	10 91 93 22 	lds	r17, 0x2293	; 0x802293 <udd_sram+0xf>
    25f4:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <udd_g_ctrlreq+0xa>
    25f8:	90 91 0f 24 	lds	r25, 0x240F	; 0x80240f <udd_g_ctrlreq+0xb>
    25fc:	c0 91 7c 22 	lds	r28, 0x227C	; 0x80227c <udd_ctrl_payload_nb_trans>
    2600:	d0 91 7d 22 	lds	r29, 0x227D	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    2604:	98 01       	movw	r18, r16
    2606:	2c 0f       	add	r18, r28
    2608:	3d 1f       	adc	r19, r29
    260a:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    260c:	93 07       	cpc	r25, r19
    260e:	18 f4       	brcc	.+6      	; 0x2616 <__vector_126+0xfe>
    2610:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2612:	0c 1b       	sub	r16, r28
    2614:	1d 0b       	sbc	r17, r29
    2616:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <udd_g_ctrlreq+0x8>
    261a:	90 91 0d 24 	lds	r25, 0x240D	; 0x80240d <udd_g_ctrlreq+0x9>
    261e:	a8 01       	movw	r20, r16
    2620:	6c e3       	ldi	r22, 0x3C	; 60
    2622:	72 e2       	ldi	r23, 0x22	; 34
    2624:	8c 0f       	add	r24, r28
    2626:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2628:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <memcpy>
    262c:	c0 0f       	add	r28, r16
    262e:	d1 1f       	adc	r29, r17
    2630:	c0 93 7c 22 	sts	0x227C, r28	; 0x80227c <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2634:	d0 93 7d 22 	sts	0x227D, r29	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    2638:	00 34       	cpi	r16, 0x40	; 64
    263a:	11 05       	cpc	r17, r1
    263c:	69 f4       	brne	.+26     	; 0x2658 <__vector_126+0x140>
    263e:	80 91 7e 22 	lds	r24, 0x227E	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    2642:	90 91 7f 22 	lds	r25, 0x227F	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
    2646:	8c 0f       	add	r24, r28
    2648:	9d 1f       	adc	r25, r29
    264a:	20 91 0a 24 	lds	r18, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    264e:	30 91 0b 24 	lds	r19, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    2652:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2654:	93 07       	cpc	r25, r19
    2656:	80 f0       	brcs	.+32     	; 0x2678 <__vector_126+0x160>
    2658:	e4 e0       	ldi	r30, 0x04	; 4
    265a:	f4 e2       	ldi	r31, 0x24	; 36
		if (NULL != udd_g_ctrlreq.over_under_run) {
    265c:	c2 87       	std	Z+10, r28	; 0x0a
    265e:	d3 87       	std	Z+11, r29	; 0x0b
    2660:	06 84       	ldd	r0, Z+14	; 0x0e
    2662:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    2664:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    2666:	30 97       	sbiw	r30, 0x00	; 0
    2668:	29 f0       	breq	.+10     	; 0x2674 <__vector_126+0x15c>
    266a:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    266c:	81 11       	cpse	r24, r1
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <__vector_126+0x15c>
    2670:	d9 d8       	rcall	.-3662   	; 0x1824 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2672:	34 c0       	rjmp	.+104    	; 0x26dc <__vector_126+0x1c4>
    2674:	e5 d8       	rcall	.-3638   	; 0x1840 <udd_ctrl_send_zlp_in>
    2676:	32 c0       	rjmp	.+100    	; 0x26dc <__vector_126+0x1c4>
    2678:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <udd_g_ctrlreq+0xa>
    267c:	90 91 0f 24 	lds	r25, 0x240F	; 0x80240f <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2680:	c8 17       	cp	r28, r24
    2682:	d9 07       	cpc	r29, r25
    2684:	f9 f4       	brne	.+62     	; 0x26c4 <__vector_126+0x1ac>
    2686:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    268a:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    268e:	30 97       	sbiw	r30, 0x00	; 0
    2690:	11 f4       	brne	.+4      	; 0x2696 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2692:	c8 d8       	rcall	.-3696   	; 0x1824 <udd_ctrl_stall_data>
    2694:	23 c0       	rjmp	.+70     	; 0x26dc <__vector_126+0x1c4>
    2696:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2698:	81 11       	cpse	r24, r1
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <__vector_126+0x188>
    269c:	c3 d8       	rcall	.-3706   	; 0x1824 <udd_ctrl_stall_data>
    269e:	1e c0       	rjmp	.+60     	; 0x26dc <__vector_126+0x1c4>
    26a0:	20 91 7e 22 	lds	r18, 0x227E	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    26a4:	30 91 7f 22 	lds	r19, 0x227F	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
    26a8:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <udd_ctrl_payload_nb_trans>
    26ac:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    26b0:	82 0f       	add	r24, r18
    26b2:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    26b4:	80 93 7e 22 	sts	0x227E, r24	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    26b8:	90 93 7f 22 	sts	0x227F, r25	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    26bc:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    26c0:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    26c4:	e0 e9       	ldi	r30, 0x90	; 144
    26c6:	f2 e2       	ldi	r31, 0x22	; 34
		udd_ctrl_in_sent();
    26c8:	02 e0       	ldi	r16, 0x02	; 2
    26ca:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    26cc:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    26ce:	06 93       	lac	Z, r16
    26d0:	05 c0       	rjmp	.+10     	; 0x26dc <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    26d2:	80 38       	cpi	r24, 0x80	; 128
    26d4:	11 f4       	brne	.+4      	; 0x26da <__vector_126+0x1c2>
    26d6:	ca d8       	rcall	.-3692   	; 0x186c <udd_ctrl_in_sent>
    26d8:	01 c0       	rjmp	.+2      	; 0x26dc <__vector_126+0x1c4>
    26da:	ea d9       	rcall	.-3116   	; 0x1ab0 <udd_ep_trans_complet>
    26dc:	ff 91       	pop	r31
    26de:	ef 91       	pop	r30
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	bf 91       	pop	r27
    26e6:	af 91       	pop	r26
    26e8:	9f 91       	pop	r25
    26ea:	8f 91       	pop	r24
    26ec:	7f 91       	pop	r23
    26ee:	6f 91       	pop	r22
    26f0:	5f 91       	pop	r21
    26f2:	4f 91       	pop	r20
    26f4:	3f 91       	pop	r19
    26f6:	2f 91       	pop	r18
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	0f 90       	pop	r0
    26fe:	0b be       	out	0x3b, r0	; 59
    2700:	0f 90       	pop	r0
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	0f 90       	pop	r0
    2706:	1f 90       	pop	r1
    2708:	18 95       	reti

0000270a <pwm_set_frequency>:

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    270a:	fc 01       	movw	r30, r24
    270c:	14 82       	std	Z+4, r1	; 0x04
		config->period = 0;
    270e:	15 82       	std	Z+5, r1	; 0x05
    2710:	16 82       	std	Z+6, r1	; 0x06
    2712:	08 95       	ret

00002714 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2714:	0f 93       	push	r16
    2716:	1f 93       	push	r17
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	ec 01       	movw	r28, r24
    271e:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    2720:	86 2f       	mov	r24, r22
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	87 30       	cpi	r24, 0x07	; 7
    2726:	91 05       	cpc	r25, r1
    2728:	08 f0       	brcs	.+2      	; 0x272c <pwm_init+0x18>
    272a:	8b c0       	rjmp	.+278    	; 0x2842 <pwm_init+0x12e>
    272c:	fc 01       	movw	r30, r24
    272e:	88 27       	eor	r24, r24
    2730:	eb 5f       	subi	r30, 0xFB	; 251
    2732:	fe 4f       	sbci	r31, 0xFE	; 254
    2734:	8f 4f       	sbci	r24, 0xFF	; 255
    2736:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	98 e0       	ldi	r25, 0x08	; 8
    273e:	88 83       	st	Y, r24
    2740:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    2742:	e0 e4       	ldi	r30, 0x40	; 64
    2744:	f6 e0       	ldi	r31, 0x06	; 6
    2746:	30 81       	ld	r19, Z
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	2f ef       	ldi	r18, 0xFF	; 255
    274e:	24 0f       	add	r18, r20
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <pwm_init+0x42>
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	2a 95       	dec	r18
    2758:	e2 f7       	brpl	.-8      	; 0x2752 <pwm_init+0x3e>
    275a:	83 2b       	or	r24, r19
    275c:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    275e:	71 c0       	rjmp	.+226    	; 0x2842 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    2760:	80 e4       	ldi	r24, 0x40	; 64
    2762:	98 e0       	ldi	r25, 0x08	; 8
    2764:	88 83       	st	Y, r24
    2766:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2768:	e0 e4       	ldi	r30, 0x40	; 64
    276a:	f6 e0       	ldi	r31, 0x06	; 6
    276c:	30 81       	ld	r19, Z
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	23 e0       	ldi	r18, 0x03	; 3
    2774:	24 0f       	add	r18, r20
    2776:	02 c0       	rjmp	.+4      	; 0x277c <pwm_init+0x68>
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	2a 95       	dec	r18
    277e:	e2 f7       	brpl	.-8      	; 0x2778 <pwm_init+0x64>
    2780:	83 2b       	or	r24, r19
    2782:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2784:	5e c0       	rjmp	.+188    	; 0x2842 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	99 e0       	ldi	r25, 0x09	; 9
    278a:	88 83       	st	Y, r24
    278c:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    278e:	e0 e6       	ldi	r30, 0x60	; 96
    2790:	f6 e0       	ldi	r31, 0x06	; 6
    2792:	30 81       	ld	r19, Z
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	2f ef       	ldi	r18, 0xFF	; 255
    279a:	24 0f       	add	r18, r20
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <pwm_init+0x8e>
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	2a 95       	dec	r18
    27a4:	e2 f7       	brpl	.-8      	; 0x279e <pwm_init+0x8a>
    27a6:	83 2b       	or	r24, r19
    27a8:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    27aa:	4b c0       	rjmp	.+150    	; 0x2842 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    27ac:	80 e4       	ldi	r24, 0x40	; 64
    27ae:	99 e0       	ldi	r25, 0x09	; 9
    27b0:	88 83       	st	Y, r24
    27b2:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    27b4:	e0 e6       	ldi	r30, 0x60	; 96
    27b6:	f6 e0       	ldi	r31, 0x06	; 6
    27b8:	30 81       	ld	r19, Z
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	23 e0       	ldi	r18, 0x03	; 3
    27c0:	24 0f       	add	r18, r20
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <pwm_init+0xb4>
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	2a 95       	dec	r18
    27ca:	e2 f7       	brpl	.-8      	; 0x27c4 <pwm_init+0xb0>
    27cc:	83 2b       	or	r24, r19
    27ce:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    27d0:	38 c0       	rjmp	.+112    	; 0x2842 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	9a e0       	ldi	r25, 0x0A	; 10
    27d6:	88 83       	st	Y, r24
    27d8:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    27da:	e0 e8       	ldi	r30, 0x80	; 128
    27dc:	f6 e0       	ldi	r31, 0x06	; 6
    27de:	30 81       	ld	r19, Z
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	2f ef       	ldi	r18, 0xFF	; 255
    27e6:	24 0f       	add	r18, r20
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <pwm_init+0xda>
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	2a 95       	dec	r18
    27f0:	e2 f7       	brpl	.-8      	; 0x27ea <pwm_init+0xd6>
    27f2:	83 2b       	or	r24, r19
    27f4:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    27f6:	25 c0       	rjmp	.+74     	; 0x2842 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    27f8:	80 e4       	ldi	r24, 0x40	; 64
    27fa:	9a e0       	ldi	r25, 0x0A	; 10
    27fc:	88 83       	st	Y, r24
    27fe:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    2800:	e0 e8       	ldi	r30, 0x80	; 128
    2802:	f6 e0       	ldi	r31, 0x06	; 6
    2804:	30 81       	ld	r19, Z
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	23 e0       	ldi	r18, 0x03	; 3
    280c:	24 0f       	add	r18, r20
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <pwm_init+0x100>
    2810:	88 0f       	add	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	2a 95       	dec	r18
    2816:	e2 f7       	brpl	.-8      	; 0x2810 <pwm_init+0xfc>
    2818:	83 2b       	or	r24, r19
    281a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    281c:	12 c0       	rjmp	.+36     	; 0x2842 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	9b e0       	ldi	r25, 0x0B	; 11
    2822:	88 83       	st	Y, r24
    2824:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    2826:	e0 ea       	ldi	r30, 0xA0	; 160
    2828:	f6 e0       	ldi	r31, 0x06	; 6
    282a:	30 81       	ld	r19, Z
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	2f ef       	ldi	r18, 0xFF	; 255
    2832:	24 0f       	add	r18, r20
    2834:	02 c0       	rjmp	.+4      	; 0x283a <pwm_init+0x126>
    2836:	88 0f       	add	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	2a 95       	dec	r18
    283c:	e2 f7       	brpl	.-8      	; 0x2836 <pwm_init+0x122>
    283e:	83 2b       	or	r24, r19
    2840:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    2842:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    2844:	42 30       	cpi	r20, 0x02	; 2
    2846:	61 f0       	breq	.+24     	; 0x2860 <pwm_init+0x14c>
    2848:	18 f4       	brcc	.+6      	; 0x2850 <pwm_init+0x13c>
    284a:	41 30       	cpi	r20, 0x01	; 1
    284c:	31 f0       	breq	.+12     	; 0x285a <pwm_init+0x146>
    284e:	10 c0       	rjmp	.+32     	; 0x2870 <pwm_init+0x15c>
    2850:	43 30       	cpi	r20, 0x03	; 3
    2852:	49 f0       	breq	.+18     	; 0x2866 <pwm_init+0x152>
    2854:	44 30       	cpi	r20, 0x04	; 4
    2856:	51 f0       	breq	.+20     	; 0x286c <pwm_init+0x158>
    2858:	0b c0       	rjmp	.+22     	; 0x2870 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    285a:	80 e1       	ldi	r24, 0x10	; 16
    285c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    285e:	08 c0       	rjmp	.+16     	; 0x2870 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    2860:	80 e2       	ldi	r24, 0x20	; 32
    2862:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2864:	05 c0       	rjmp	.+10     	; 0x2870 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    2866:	80 e4       	ldi	r24, 0x40	; 64
    2868:	8b 83       	std	Y+3, r24	; 0x03
		break;
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    286c:	80 e8       	ldi	r24, 0x80	; 128
    286e:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    2870:	88 81       	ld	r24, Y
    2872:	99 81       	ldd	r25, Y+1	; 0x01
    2874:	0e 94 36 0b 	call	0x166c	; 0x166c <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    2878:	e8 81       	ld	r30, Y
    287a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    287c:	81 81       	ldd	r24, Z+1	; 0x01
    287e:	88 7f       	andi	r24, 0xF8	; 248
    2880:	83 60       	ori	r24, 0x03	; 3
    2882:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    2884:	1d 82       	std	Y+5, r1	; 0x05
    2886:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    2888:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    288a:	e8 81       	ld	r30, Y
    288c:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    288e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2890:	80 7f       	andi	r24, 0xF0	; 240
    2892:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    2894:	b8 01       	movw	r22, r16
    2896:	ce 01       	movw	r24, r28
    2898:	38 df       	rcall	.-400    	; 0x270a <pwm_set_frequency>
}
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	1f 91       	pop	r17
    28a0:	0f 91       	pop	r16
    28a2:	08 95       	ret

000028a4 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    28aa:	2d 81       	ldd	r18, Y+5	; 0x05
    28ac:	3e 81       	ldd	r19, Y+6	; 0x06
    28ae:	a6 2f       	mov	r26, r22
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__umulhisi3>
    28b6:	24 e6       	ldi	r18, 0x64	; 100
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__udivmodsi4>
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	e8 81       	ld	r30, Y
    28c6:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    28c8:	e6 fd       	sbrc	r30, 6
    28ca:	17 c0       	rjmp	.+46     	; 0x28fa <pwm_start+0x56>
		switch (channel_index) {
    28cc:	82 30       	cpi	r24, 0x02	; 2
    28ce:	61 f0       	breq	.+24     	; 0x28e8 <pwm_start+0x44>
    28d0:	18 f4       	brcc	.+6      	; 0x28d8 <pwm_start+0x34>
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	31 f0       	breq	.+12     	; 0x28e2 <pwm_start+0x3e>
    28d6:	1b c0       	rjmp	.+54     	; 0x290e <pwm_start+0x6a>
    28d8:	83 30       	cpi	r24, 0x03	; 3
    28da:	49 f0       	breq	.+18     	; 0x28ee <pwm_start+0x4a>
    28dc:	84 30       	cpi	r24, 0x04	; 4
    28de:	51 f0       	breq	.+20     	; 0x28f4 <pwm_start+0x50>
    28e0:	16 c0       	rjmp	.+44     	; 0x290e <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    28e2:	20 af       	std	Z+56, r18	; 0x38
    28e4:	31 af       	std	Z+57, r19	; 0x39
    28e6:	13 c0       	rjmp	.+38     	; 0x290e <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    28e8:	22 af       	std	Z+58, r18	; 0x3a
    28ea:	33 af       	std	Z+59, r19	; 0x3b
    28ec:	10 c0       	rjmp	.+32     	; 0x290e <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    28ee:	24 af       	std	Z+60, r18	; 0x3c
    28f0:	35 af       	std	Z+61, r19	; 0x3d
    28f2:	0d c0       	rjmp	.+26     	; 0x290e <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    28f4:	26 af       	std	Z+62, r18	; 0x3e
    28f6:	37 af       	std	Z+63, r19	; 0x3f
    28f8:	0a c0       	rjmp	.+20     	; 0x290e <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    28fa:	81 30       	cpi	r24, 0x01	; 1
    28fc:	19 f0       	breq	.+6      	; 0x2904 <pwm_start+0x60>
    28fe:	82 30       	cpi	r24, 0x02	; 2
    2900:	21 f0       	breq	.+8      	; 0x290a <pwm_start+0x66>
    2902:	05 c0       	rjmp	.+10     	; 0x290e <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    2904:	20 af       	std	Z+56, r18	; 0x38
    2906:	31 af       	std	Z+57, r19	; 0x39
    2908:	02 c0       	rjmp	.+4      	; 0x290e <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    290a:	22 af       	std	Z+58, r18	; 0x3a
    290c:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    290e:	8d 81       	ldd	r24, Y+5	; 0x05
    2910:	9e 81       	ldd	r25, Y+6	; 0x06
    2912:	e8 81       	ld	r30, Y
    2914:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2916:	86 a3       	std	Z+38, r24	; 0x26
    2918:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    291a:	8b 81       	ldd	r24, Y+3	; 0x03
    291c:	e8 81       	ld	r30, Y
    291e:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    2920:	e6 fd       	sbrc	r30, 6
    2922:	04 c0       	rjmp	.+8      	; 0x292c <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    2924:	91 81       	ldd	r25, Z+1	; 0x01
    2926:	89 2b       	or	r24, r25
    2928:	81 83       	std	Z+1, r24	; 0x01
    292a:	04 c0       	rjmp	.+8      	; 0x2934 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    292c:	91 81       	ldd	r25, Z+1	; 0x01
    292e:	80 73       	andi	r24, 0x30	; 48
    2930:	89 2b       	or	r24, r25
    2932:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    2934:	e8 81       	ld	r30, Y
    2936:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2938:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    293a:	80 7f       	andi	r24, 0xF0	; 240
    293c:	9c 81       	ldd	r25, Y+4	; 0x04
    293e:	89 2b       	or	r24, r25
    2940:	80 83       	st	Z, r24
}
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	08 95       	ret

00002948 <usb_callback_suspend_action>:

void halt(void)
{
	/* MAIN Loop Shutdown */

	runmode = 0;
    2948:	08 95       	ret

0000294a <usb_callback_resume_action>:
    294a:	08 95       	ret

0000294c <usb_callback_remotewakeup_enable>:
    294c:	08 95       	ret

0000294e <usb_callback_remotewakeup_disable>:
    294e:	08 95       	ret

00002950 <usb_callback_cdc_enable>:
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	08 95       	ret

00002954 <usb_callback_cdc_disable>:
    2954:	08 95       	ret

00002956 <usb_callback_config>:
    2956:	08 95       	ret

00002958 <usb_callback_cdc_set_dtr>:
    2958:	08 95       	ret

0000295a <usb_callback_cdc_set_rts>:
    295a:	08 95       	ret

0000295c <usb_callback_rx_notify>:
    295c:	08 95       	ret

0000295e <usb_callback_tx_empty_notify>:
    295e:	08 95       	ret

00002960 <main>:
}

int main(void)
{
    2960:	9f 92       	push	r9
    2962:	af 92       	push	r10
    2964:	bf 92       	push	r11
    2966:	cf 92       	push	r12
    2968:	df 92       	push	r13
    296a:	ef 92       	push	r14
    296c:	ff 92       	push	r15
    296e:	0f 93       	push	r16
    2970:	1f 93       	push	r17
    2972:	cf 93       	push	r28
    2974:	df 93       	push	r29
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	c2 54       	subi	r28, 0x42	; 66
    297c:	d1 09       	sbc	r29, r1
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	de bf       	out	0x3e, r29	; 62
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2982:	0f 2e       	mov	r0, r31
    2984:	f0 ea       	ldi	r31, 0xA0	; 160
    2986:	af 2e       	mov	r10, r31
    2988:	b1 2c       	mov	r11, r1
    298a:	f0 2d       	mov	r31, r0
    298c:	07 e0       	ldi	r16, 0x07	; 7
    298e:	d5 01       	movw	r26, r10
    2990:	12 96       	adiw	r26, 0x02	; 2
	uint8_t retcode = 0;
	
	/* Init of sub-modules */
	pmic_init();
	sysclk_init();
    2992:	0c 93       	st	X, r16

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2994:	34 d2       	rcall	.+1128   	; 0x2dfe <sysclk_init>
    2996:	62 e0       	ldi	r22, 0x02	; 2
    2998:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event 7 */
	EVSYS.CH7MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    299a:	97 d2       	rcall	.+1326   	; 0x2eca <sysclk_enable_module>
    299c:	e0 e8       	ldi	r30, 0x80	; 128
    299e:	f1 e0       	ldi	r31, 0x01	; 1
    29a0:	80 ec       	ldi	r24, 0xC0	; 192

	/* DAC - event 6 */
	EVSYS.CH6MUX = EVSYS_CHMUX_TCE1_OVF_gc;
    29a2:	87 83       	std	Z+7, r24	; 0x07
    29a4:	88 ee       	ldi	r24, 0xE8	; 232


static void tc_init(void)
{
	/* DAC clock */
	tc_enable(&TCE1);
    29a6:	86 83       	std	Z+6, r24	; 0x06
    29a8:	80 e4       	ldi	r24, 0x40	; 64
    29aa:	9a e0       	ldi	r25, 0x0A	; 10
    29ac:	0e 94 36 0b 	call	0x166c	; 0x166c <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    29b0:	0f 2e       	mov	r0, r31
    29b2:	f0 e4       	ldi	r31, 0x40	; 64
    29b4:	ef 2e       	mov	r14, r31
    29b6:	fa e0       	ldi	r31, 0x0A	; 10
    29b8:	ff 2e       	mov	r15, r31
    29ba:	f0 2d       	mov	r31, r0
    29bc:	f7 01       	movw	r30, r14
    29be:	81 81       	ldd	r24, Z+1	; 0x01
    29c0:	88 7f       	andi	r24, 0xF8	; 248
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    29c2:	81 83       	std	Z+1, r24	; 0x01
    29c4:	8f ef       	ldi	r24, 0xFF	; 255
    29c6:	9f ef       	ldi	r25, 0xFF	; 255
    29c8:	86 a3       	std	Z+38, r24	; 0x26
	tc_set_wgm(&TCE1, TC_WG_NORMAL);											// Internal clock for DAC convertion
	tc_write_period(&TCE1, (sysclk_get_per_hz() / DAC_RATE_OF_CONV) - 1);		// DAC clock 48 kHz for audio play-back

	/* VCTCXO PWM signal generation */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_D, 500);							// Init PWM structure and enable timer
    29ca:	97 a3       	std	Z+39, r25	; 0x27
    29cc:	24 ef       	ldi	r18, 0xF4	; 244
    29ce:	31 e0       	ldi	r19, 0x01	; 1
    29d0:	44 e0       	ldi	r20, 0x04	; 4
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	9d de       	rcall	.-710    	; 0x2714 <pwm_init>
    29da:	6d e2       	ldi	r22, 0x2D	; 45
    29dc:	ce 01       	movw	r24, r28
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    29de:	01 96       	adiw	r24, 0x01	; 1
    29e0:	61 df       	rcall	.-318    	; 0x28a4 <pwm_start>
    29e2:	c1 2c       	mov	r12, r1
    29e4:	68 94       	set
    29e6:	dd 24       	eor	r13, r13
    29e8:	d3 f8       	bld	r13, 3
    29ea:	8d e5       	ldi	r24, 0x5D	; 93
    29ec:	94 e7       	ldi	r25, 0x74	; 116
    29ee:	d6 01       	movw	r26, r12
    29f0:	de 96       	adiw	r26, 0x3e	; 62
    29f2:	8d 93       	st	X+, r24
	struct adc_channel_config			adcch_vctcxo_conf;
	struct adc_channel_config			adcch_io_adc4_conf;
	struct adc_channel_config			adcch_io_adc5_conf;

	/* Prepare the structures */
	adc_read_configuration(&ADC_5V0,						&adc_5v0_conf);
    29f4:	9c 93       	st	X, r25
    29f6:	df 97       	sbiw	r26, 0x3f	; 63
    29f8:	be 01       	movw	r22, r28
    29fa:	6c 5d       	subi	r22, 0xDC	; 220
    29fc:	7f 4f       	sbci	r23, 0xFF	; 255
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    2a02:	0e 94 69 03 	call	0x6d2	; 0x6d2 <adc_read_configuration>
    2a06:	ae 01       	movw	r20, r28
    2a08:	41 5c       	subi	r20, 0xC1	; 193
    2a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0c:	61 e0       	ldi	r22, 0x01	; 1
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_3V0,						&adc_3v0_conf);
    2a12:	0e 94 ed 03 	call	0x7da	; 0x7da <adcch_read_configuration>
    2a16:	be 01       	movw	r22, r28
    2a18:	63 5e       	subi	r22, 0xE3	; 227
    2a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    2a20:	0e 94 69 03 	call	0x6d2	; 0x6d2 <adc_read_configuration>
    2a24:	ae 01       	movw	r20, r28
    2a26:	45 5c       	subi	r20, 0xC5	; 197
    2a28:	5f 4f       	sbci	r21, 0xFF	; 255
    2a2a:	61 e0       	ldi	r22, 0x01	; 1
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VBAT,						&adc_vbat_conf);
    2a30:	0e 94 ed 03 	call	0x7da	; 0x7da <adcch_read_configuration>
    2a34:	be 01       	movw	r22, r28
    2a36:	6a 5e       	subi	r22, 0xEA	; 234
    2a38:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    2a3e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <adc_read_configuration>
    2a42:	ae 01       	movw	r20, r28
    2a44:	49 5c       	subi	r20, 0xC9	; 201
    2a46:	5f 4f       	sbci	r21, 0xFF	; 255
    2a48:	61 e0       	ldi	r22, 0x01	; 1
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VCTCXO,						&adc_vctcxo_conf);
    2a4e:	0e 94 ed 03 	call	0x7da	; 0x7da <adcch_read_configuration>
    2a52:	be 01       	movw	r22, r28
    2a54:	61 5f       	subi	r22, 0xF1	; 241
    2a56:	7f 4f       	sbci	r23, 0xFF	; 255
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    2a5c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <adc_read_configuration>
    2a60:	ae 01       	movw	r20, r28
    2a62:	4d 5c       	subi	r20, 0xCD	; 205
    2a64:	5f 4f       	sbci	r21, 0xFF	; 255
    2a66:	62 e0       	ldi	r22, 0x02	; 2
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC4,					&adc_io_adc4_conf);
    2a6c:	0e 94 ed 03 	call	0x7da	; 0x7da <adcch_read_configuration>
    2a70:	be 01       	movw	r22, r28
    2a72:	68 5f       	subi	r22, 0xF8	; 248
    2a74:	7f 4f       	sbci	r23, 0xFF	; 255
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_io_adc4_conf);
    2a7a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <adc_read_configuration>
    2a7e:	ae 01       	movw	r20, r28
    2a80:	41 5d       	subi	r20, 0xD1	; 209
    2a82:	5f 4f       	sbci	r21, 0xFF	; 255
    2a84:	64 e0       	ldi	r22, 0x04	; 4
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC5,					&adc_io_adc5_conf);
    2a8a:	0e 94 ed 03 	call	0x7da	; 0x7da <adcch_read_configuration>
    2a8e:	be 01       	movw	r22, r28
    2a90:	6f 5f       	subi	r22, 0xFF	; 255
    2a92:	7f 4f       	sbci	r23, 0xFF	; 255
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_io_adc5_conf);
    2a98:	0e 94 69 03 	call	0x6d2	; 0x6d2 <adc_read_configuration>
    2a9c:	ae 01       	movw	r20, r28
    2a9e:	45 5d       	subi	r20, 0xD5	; 213
    2aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa2:	68 e0       	ldi	r22, 0x08	; 8
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	92 e0       	ldi	r25, 0x02	; 2
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2aa8:	0e 94 ed 03 	call	0x7da	; 0x7da <adcch_read_configuration>
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2aac:	5d a1       	ldd	r21, Y+37	; 0x25
    2aae:	8e a1       	ldd	r24, Y+38	; 0x26
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2ab0:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2ab2:	8e a3       	std	Y+38, r24	; 0x26
    2ab4:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2ab6:	8f 8d       	ldd	r24, Y+31	; 0x1f
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2ab8:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2aba:	8f 8f       	std	Y+31, r24	; 0x1f
    2abc:	3f 89       	ldd	r19, Y+23	; 0x17
    2abe:	88 8d       	ldd	r24, Y+24	; 0x18
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2ac0:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2ac2:	88 8f       	std	Y+24, r24	; 0x18
    2ac4:	28 89       	ldd	r18, Y+16	; 0x10
    2ac6:	89 89       	ldd	r24, Y+17	; 0x11
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2ac8:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2aca:	89 8b       	std	Y+17, r24	; 0x11
    2acc:	99 85       	ldd	r25, Y+9	; 0x09
    2ace:	8a 85       	ldd	r24, Y+10	; 0x0a
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2ad0:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2ad2:	8a 87       	std	Y+10, r24	; 0x0a
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	6b 81       	ldd	r22, Y+3	; 0x03
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    2ad8:	6f 78       	andi	r22, 0x8F	; 143
    2ada:	6b 83       	std	Y+3, r22	; 0x03
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    2adc:	66 ec       	ldi	r22, 0xC6	; 198
    2ade:	6f a3       	std	Y+39, r22	; 0x27
    2ae0:	11 e0       	ldi	r17, 0x01	; 1
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    2ae2:	1b 87       	std	Y+11, r17	; 0x0b
    2ae4:	1c 83       	std	Y+4, r17	; 0x04
    2ae6:	18 a6       	std	Y+40, r1	; 0x28
    2ae8:	19 a2       	std	Y+33, r1	; 0x21
    2aea:	1a 8e       	std	Y+26, r1	; 0x1a
    2aec:	1b 8a       	std	Y+19, r1	; 0x13
static inline void adc_set_gain_impedance_mode(struct adc_config *conf,
		enum adc_gainstage_impmode impmode)
{
	switch (impmode) {
	case ADC_GAIN_HIGHIMPEDANCE:
		conf->ctrlb &= ~ADC_IMPMODE_bm;
    2aee:	1c 86       	std	Y+12, r1	; 0x0c
    2af0:	1d 82       	std	Y+5, r1	; 0x05
    2af2:	51 70       	andi	r21, 0x01	; 1
    2af4:	50 64       	ori	r21, 0x40	; 64
    2af6:	5d a3       	std	Y+37, r21	; 0x25
    2af8:	49 70       	andi	r20, 0x09	; 9
    2afa:	40 64       	ori	r20, 0x40	; 64
    2afc:	4e 8f       	std	Y+30, r20	; 0x1e
    2afe:	39 70       	andi	r19, 0x09	; 9
    2b00:	30 64       	ori	r19, 0x40	; 64
    2b02:	3f 8b       	std	Y+23, r19	; 0x17
    2b04:	29 70       	andi	r18, 0x09	; 9
    2b06:	20 64       	ori	r18, 0x40	; 64
    2b08:	28 8b       	std	Y+16, r18	; 0x10
    2b0a:	91 70       	andi	r25, 0x01	; 1
    2b0c:	90 64       	ori	r25, 0x40	; 64
    2b0e:	99 87       	std	Y+9, r25	; 0x09
    2b10:	81 70       	andi	r24, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2b12:	80 64       	ori	r24, 0x40	; 64
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2b14:	8a 83       	std	Y+2, r24	; 0x02
    2b16:	1f af       	std	Y+63, r17	; 0x3f
    2b18:	80 e1       	ldi	r24, 0x10	; 16
    2b1a:	21 96       	adiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2b1c:	8f af       	std	Y+63, r24	; 0x3f
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2b1e:	21 97       	sbiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2b20:	1b af       	std	Y+59, r17	; 0x3b
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2b22:	1c ae       	std	Y+60, r1	; 0x3c
    2b24:	1f ab       	std	Y+55, r17	; 0x37
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2b26:	88 e1       	ldi	r24, 0x18	; 24
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2b28:	88 af       	std	Y+56, r24	; 0x38
    2b2a:	1b ab       	std	Y+51, r17	; 0x33
    2b2c:	68 94       	set
    2b2e:	99 24       	eor	r9, r9
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2b30:	93 f8       	bld	r9, 3
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2b32:	9c aa       	std	Y+52, r9	; 0x34
    2b34:	1f a7       	std	Y+47, r17	; 0x2f
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2b36:	80 e2       	ldi	r24, 0x20	; 32
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2b38:	88 ab       	std	Y+48, r24	; 0x30
    2b3a:	1b a7       	std	Y+43, r17	; 0x2b
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    2b3c:	88 e2       	ldi	r24, 0x28	; 40
    2b3e:	8c a7       	std	Y+44, r24	; 0x2c
    2b40:	22 96       	adiw	r28, 0x02	; 2
    2b42:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b44:	22 97       	sbiw	r28, 0x02	; 2
    2b46:	83 7f       	andi	r24, 0xF3	; 243
    2b48:	22 96       	adiw	r28, 0x02	; 2
    2b4a:	8f af       	std	Y+63, r24	; 0x3f
    2b4c:	22 97       	sbiw	r28, 0x02	; 2
    2b4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b50:	83 7f       	andi	r24, 0xF3	; 243
    2b52:	8d af       	std	Y+61, r24	; 0x3d
    2b54:	89 ad       	ldd	r24, Y+57	; 0x39
    2b56:	83 7f       	andi	r24, 0xF3	; 243
    2b58:	89 af       	std	Y+57, r24	; 0x39
    2b5a:	8d a9       	ldd	r24, Y+53	; 0x35
    2b5c:	83 7f       	andi	r24, 0xF3	; 243
    2b5e:	8d ab       	std	Y+53, r24	; 0x35
    2b60:	89 a9       	ldd	r24, Y+49	; 0x31
    2b62:	83 7f       	andi	r24, 0xF3	; 243
    2b64:	89 ab       	std	Y+49, r24	; 0x31
    2b66:	8d a5       	ldd	r24, Y+45	; 0x2d
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    2b68:	83 7f       	andi	r24, 0xF3	; 243
    2b6a:	8d a7       	std	Y+45, r24	; 0x2d
    2b6c:	83 e0       	ldi	r24, 0x03	; 3
    2b6e:	23 96       	adiw	r28, 0x03	; 3
    2b70:	8f af       	std	Y+63, r24	; 0x3f
    2b72:	23 97       	sbiw	r28, 0x03	; 3
	adcch_set_pin_scan(&adcch_5v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_3v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_vbat_conf,	0, 3);

	/* Execute the new settings */
	adc_write_configuration(&ADC_5V0,						&adc_5v0_conf);
    2b74:	8e af       	std	Y+62, r24	; 0x3e
    2b76:	8a af       	std	Y+58, r24	; 0x3a
    2b78:	be 01       	movw	r22, r28
    2b7a:	6c 5d       	subi	r22, 0xDC	; 220
    2b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    2b82:	0e 94 ff 02 	call	0x5fe	; 0x5fe <adc_write_configuration>
    2b86:	ae 01       	movw	r20, r28
    2b88:	41 5c       	subi	r20, 0xC1	; 193
    2b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b8c:	61 e0       	ldi	r22, 0x01	; 1
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_3V0,						&adc_3v0_conf);
    2b92:	0e 94 a2 03 	call	0x744	; 0x744 <adcch_write_configuration>
    2b96:	be 01       	movw	r22, r28
    2b98:	63 5e       	subi	r22, 0xE3	; 227
    2b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    2ba0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <adc_write_configuration>
    2ba4:	ae 01       	movw	r20, r28
    2ba6:	45 5c       	subi	r20, 0xC5	; 197
    2ba8:	5f 4f       	sbci	r21, 0xFF	; 255
    2baa:	61 e0       	ldi	r22, 0x01	; 1
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VBAT,						&adc_vbat_conf);
    2bb0:	0e 94 a2 03 	call	0x744	; 0x744 <adcch_write_configuration>
    2bb4:	be 01       	movw	r22, r28
    2bb6:	6a 5e       	subi	r22, 0xEA	; 234
    2bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    2bbe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <adc_write_configuration>
    2bc2:	ae 01       	movw	r20, r28
    2bc4:	49 5c       	subi	r20, 0xC9	; 201
    2bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bc8:	61 e0       	ldi	r22, 0x01	; 1
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VCTCXO,					&adc_vctcxo_conf);
    2bce:	0e 94 a2 03 	call	0x744	; 0x744 <adcch_write_configuration>
    2bd2:	be 01       	movw	r22, r28
    2bd4:	61 5f       	subi	r22, 0xF1	; 241
    2bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    2bdc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <adc_write_configuration>
    2be0:	ae 01       	movw	r20, r28
    2be2:	4d 5c       	subi	r20, 0xCD	; 205
    2be4:	5f 4f       	sbci	r21, 0xFF	; 255
    2be6:	62 e0       	ldi	r22, 0x02	; 2
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC4,					&adc_vctcxo_conf);
    2bec:	0e 94 a2 03 	call	0x744	; 0x744 <adcch_write_configuration>
    2bf0:	be 01       	movw	r22, r28
    2bf2:	61 5f       	subi	r22, 0xF1	; 241
    2bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_vctcxo_conf);
    2bfa:	0e 94 ff 02 	call	0x5fe	; 0x5fe <adc_write_configuration>
    2bfe:	ae 01       	movw	r20, r28
    2c00:	4d 5c       	subi	r20, 0xCD	; 205
    2c02:	5f 4f       	sbci	r21, 0xFF	; 255
    2c04:	64 e0       	ldi	r22, 0x04	; 4
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC5,					&adc_vctcxo_conf);
    2c0a:	0e 94 a2 03 	call	0x744	; 0x744 <adcch_write_configuration>
    2c0e:	be 01       	movw	r22, r28
    2c10:	61 5f       	subi	r22, 0xF1	; 241
    2c12:	7f 4f       	sbci	r23, 0xFF	; 255
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_vctcxo_conf);
    2c18:	0e 94 ff 02 	call	0x5fe	; 0x5fe <adc_write_configuration>
    2c1c:	ae 01       	movw	r20, r28
    2c1e:	4d 5c       	subi	r20, 0xCD	; 205
    2c20:	5f 4f       	sbci	r21, 0xFF	; 255
    2c22:	68 e0       	ldi	r22, 0x08	; 8
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	92 e0       	ldi	r25, 0x02	; 2
static void dac_init(void)
{
    struct dac_config dac_io_dac0_conf;
    struct dac_config dac_io_dac1_conf;

    dac_read_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    2c28:	0e 94 a2 03 	call	0x744	; 0x744 <adcch_write_configuration>
    2c2c:	be 01       	movw	r22, r28
    2c2e:	68 5f       	subi	r22, 0xF8	; 248
    2c30:	7f 4f       	sbci	r23, 0xFF	; 255
    2c32:	80 e2       	ldi	r24, 0x20	; 32
    2c34:	93 e0       	ldi	r25, 0x03	; 3
    dac_read_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    2c36:	0e 94 b3 04 	call	0x966	; 0x966 <dac_read_configuration>
    2c3a:	be 01       	movw	r22, r28
    2c3c:	6f 5f       	subi	r22, 0xFF	; 255
    2c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c40:	80 e2       	ldi	r24, 0x20	; 32
    2c42:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    2c44:	0e 94 b3 04 	call	0x966	; 0x966 <dac_read_configuration>
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    2c48:	1a 87       	std	Y+10, r17	; 0x0a
    2c4a:	1b 83       	std	Y+3, r17	; 0x03
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    2c4c:	84 e0       	ldi	r24, 0x04	; 4
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    2c4e:	88 87       	std	Y+8, r24	; 0x08
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    2c50:	99 85       	ldd	r25, Y+9	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    2c52:	99 82       	std	Y+1, r9	; 0x01
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	9c 79       	andi	r25, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    2c58:	91 60       	ori	r25, 0x01	; 1
    2c5a:	99 87       	std	Y+9, r25	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    2c5c:	96 e0       	ldi	r25, 0x06	; 6
    2c5e:	9b 87       	std	Y+11, r25	; 0x0b
    2c60:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    2c62:	82 60       	ori	r24, 0x02	; 2
    #ifdef XMEGA_DAC_VERSION_1
    dac_set_conversion_interval(&dac_io_dac0_conf, 2);
    dac_set_conversion_interval(&dac_io_dac1_conf, 2);
    #endif

    dac_write_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    2c64:	8a 83       	std	Y+2, r24	; 0x02
    2c66:	9c 83       	std	Y+4, r25	; 0x04
    2c68:	be 01       	movw	r22, r28
    2c6a:	68 5f       	subi	r22, 0xF8	; 248
    2c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c6e:	80 e2       	ldi	r24, 0x20	; 32
    2c70:	93 e0       	ldi	r25, 0x03	; 3
    dac_write_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    2c72:	0e 94 57 04 	call	0x8ae	; 0x8ae <dac_write_configuration>
    2c76:	be 01       	movw	r22, r28
    2c78:	6f 5f       	subi	r22, 0xFF	; 255
    2c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7c:	80 e2       	ldi	r24, 0x20	; 32
    2c7e:	93 e0       	ldi	r25, 0x03	; 3
	tc_init();
	adc_init();
	dac_init();
	
	/* All interrupt sources prepared here - IRQ activation */
	irq_initialize_vectors();
    2c80:	0e 94 57 04 	call	0x8ae	; 0x8ae <dac_write_configuration>
	cpu_irq_enable();
    2c84:	f5 01       	movw	r30, r10
	
	board_init();		// Activates all in/out pins - transitions from Z to dedicated states
    2c86:	02 83       	std	Z+2, r16	; 0x02
    2c88:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2c8a:	0e 94 2e 01 	call	0x25c	; 0x25c <board_init>
    2c8e:	e4 e1       	ldi	r30, 0x14	; 20
    2c90:	f4 e2       	ldi	r31, 0x24	; 36
    2c92:	10 82       	st	Z, r1
    2c94:	11 82       	std	Z+1, r1	; 0x01
    2c96:	12 82       	std	Z+2, r1	; 0x02
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2c98:	13 82       	std	Z+3, r1	; 0x03
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2c9a:	14 82       	std	Z+4, r1	; 0x04
    2c9c:	15 83       	std	Z+5, r17	; 0x05
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2c9e:	d6 01       	movw	r26, r12
    2ca0:	8c 91       	ld	r24, X
    2ca2:	80 7f       	andi	r24, 0xF0	; 240
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2ca4:	81 60       	ori	r24, 0x01	; 1
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2ca6:	8c 93       	st	X, r24
    2ca8:	f7 01       	movw	r30, r14
    2caa:	80 81       	ld	r24, Z
}


static void usb_init(void)
{
	udc_start();
    2cac:	80 7f       	andi	r24, 0xF0	; 240
    2cae:	81 60       	ori	r24, 0x01	; 1
	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB
	
	
	/* The application code */
	runmode = (uint8_t) 1;
    2cb0:	80 83       	st	Z, r24
    2cb2:	b6 d4       	rcall	.+2412   	; 0x3620 <udc_start>
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    2cb4:	10 93 c7 22 	sts	0x22C7, r17	; 0x8022c7 <runmode>
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	53 e0       	ldi	r21, 0x03	; 3

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2cbc:	0a e3       	ldi	r16, 0x3A	; 58
    2cbe:	13 e0       	ldi	r17, 0x03	; 3
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    2cc0:	64 e1       	ldi	r22, 0x14	; 20
    2cc2:	74 e2       	ldi	r23, 0x24	; 36
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    2cc4:	28 e4       	ldi	r18, 0x48	; 72
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	da 01       	movw	r26, r20
    2cca:	15 96       	adiw	r26, 0x05	; 5

static void task_dac(void)
{
	static int idx_dacX = 0;
	
	if (dac_channel_is_ready(&DAC_IO_DAC0, DAC_CH0 | DAC_CH1)) {
    2ccc:	8c 91       	ld	r24, X
    2cce:	15 97       	sbiw	r26, 0x05	; 5
    2cd0:	83 70       	andi	r24, 0x03	; 3
		dac_set_channel_value(&DAC_IO_DAC0, DAC_IO_DAC0_CHANNEL, dac_io_dac0_buf[idx_dacX]);
    2cd2:	83 30       	cpi	r24, 0x03	; 3
    2cd4:	c1 f5       	brne	.+112    	; 0x2d46 <main+0x3e6>
    2cd6:	e0 91 c5 22 	lds	r30, 0x22C5	; 0x8022c5 <idx_dacX.6542>
    2cda:	f0 91 c6 22 	lds	r31, 0x22C6	; 0x8022c6 <idx_dacX.6542+0x1>
    2cde:	ee 0f       	add	r30, r30
    2ce0:	ff 1f       	adc	r31, r31
    2ce2:	ec 5f       	subi	r30, 0xFC	; 252
    2ce4:	fe 4d       	sbci	r31, 0xDE	; 222
    2ce6:	01 90       	ld	r0, Z+

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2ce8:	f0 81       	ld	r31, Z
    2cea:	e0 2d       	mov	r30, r0
	cpu_irq_disable();
    2cec:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    2cee:	88 87       	std	Y+8, r24	; 0x08
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    2cf0:	f8 94       	cli
    2cf2:	88 85       	ldd	r24, Y+8	; 0x08
    2cf4:	58 96       	adiw	r26, 0x18	; 24
    2cf6:	ed 93       	st	X+, r30
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2cf8:	fc 93       	st	X, r31
		dac_set_channel_value(&DAC_IO_DAC1, DAC_IO_DAC1_CHANNEL, dac_io_dac1_buf[idx_dacX]);
    2cfa:	59 97       	sbiw	r26, 0x19	; 25
    2cfc:	8f bf       	out	0x3f, r24	; 63
    2cfe:	e0 91 c5 22 	lds	r30, 0x22C5	; 0x8022c5 <idx_dacX.6542>
    2d02:	f0 91 c6 22 	lds	r31, 0x22C6	; 0x8022c6 <idx_dacX.6542+0x1>
    2d06:	ee 0f       	add	r30, r30
    2d08:	ff 1f       	adc	r31, r31
    2d0a:	ec 53       	subi	r30, 0x3C	; 60
    2d0c:	ff 4d       	sbci	r31, 0xDF	; 223
    2d0e:	01 90       	ld	r0, Z+

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2d10:	f0 81       	ld	r31, Z
    2d12:	e0 2d       	mov	r30, r0
	cpu_irq_disable();
    2d14:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    2d16:	89 83       	std	Y+1, r24	; 0x01
    2d18:	f8 94       	cli
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	d8 01       	movw	r26, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d1e:	ed 93       	st	X+, r30
		
		idx_dacX++;
		idx_dacX %= DAC_NR_OF_SAMPLES;
    2d20:	fc 93       	st	X, r31
    2d22:	8f bf       	out	0x3f, r24	; 63
    2d24:	80 91 c5 22 	lds	r24, 0x22C5	; 0x8022c5 <idx_dacX.6542>
    2d28:	90 91 c6 22 	lds	r25, 0x22C6	; 0x8022c6 <idx_dacX.6542+0x1>
    2d2c:	01 96       	adiw	r24, 0x01	; 1
    2d2e:	8f 71       	andi	r24, 0x1F	; 31
    2d30:	90 78       	andi	r25, 0x80	; 128
    2d32:	99 23       	and	r25, r25
    2d34:	24 f4       	brge	.+8      	; 0x2d3e <main+0x3de>
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	80 6e       	ori	r24, 0xE0	; 224
    2d3a:	9f 6f       	ori	r25, 0xFF	; 255
    2d3c:	01 96       	adiw	r24, 0x01	; 1
    2d3e:	80 93 c5 22 	sts	0x22C5, r24	; 0x8022c5 <idx_dacX.6542>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    2d42:	90 93 c6 22 	sts	0x22C6, r25	; 0x8022c6 <idx_dacX.6542+0x1>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2d46:	f8 94       	cli
    2d48:	fb 01       	movw	r30, r22
    2d4a:	80 81       	ld	r24, Z
    2d4c:	81 11       	cpse	r24, r1
    2d4e:	09 c0       	rjmp	.+18     	; 0x2d62 <main+0x402>
    2d50:	a5 e1       	ldi	r26, 0x15	; 21
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    2d52:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2d54:	e0 e0       	ldi	r30, 0x00	; 0
    2d56:	ef 5f       	subi	r30, 0xFF	; 255
    2d58:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    2d5a:	88 23       	and	r24, r24
    2d5c:	e1 f3       	breq	.-8      	; 0x2d56 <main+0x3f6>
		cpu_irq_enable();
    2d5e:	e1 11       	cpse	r30, r1
    2d60:	02 c0       	rjmp	.+4      	; 0x2d66 <main+0x406>
    2d62:	78 94       	sei
    2d64:	12 c0       	rjmp	.+36     	; 0x2d8a <main+0x42a>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    2d66:	d9 01       	movw	r26, r18
    2d68:	8c 91       	ld	r24, X
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	e1 50       	subi	r30, 0x01	; 1
    2d6e:	f0 4e       	sbci	r31, 0xE0	; 224
    2d70:	81 7f       	andi	r24, 0xF1	; 241
    2d72:	90 81       	ld	r25, Z
	sleep_enable();
    2d74:	89 2b       	or	r24, r25
    2d76:	8c 93       	st	X, r24
    2d78:	8c 91       	ld	r24, X

	cpu_irq_enable();
    2d7a:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    2d7c:	8c 93       	st	X, r24

	sleep_disable();
    2d7e:	78 94       	sei
    2d80:	88 95       	sleep
    2d82:	f9 01       	movw	r30, r18
    2d84:	80 81       	ld	r24, Z
	usb_init();			// USB device stack start function to enable stack and start USB
	
	
	/* The application code */
	runmode = (uint8_t) 1;
    while (runmode) {
    2d86:	8e 7f       	andi	r24, 0xFE	; 254
    2d88:	80 83       	st	Z, r24
    2d8a:	80 91 c7 22 	lds	r24, 0x22C7	; 0x8022c7 <runmode>
		task();
		sleepmgr_enter_sleep();
    }
	
	cpu_irq_disable();
    2d8e:	81 11       	cpse	r24, r1
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    2d90:	9b cf       	rjmp	.-202    	; 0x2cc8 <main+0x368>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2d92:	f8 94       	cli
    2d94:	f8 94       	cli
    2d96:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <sleepmgr_locks>
    2d9a:	81 11       	cpse	r24, r1
    2d9c:	09 c0       	rjmp	.+18     	; 0x2db0 <main+0x450>
    2d9e:	a5 e1       	ldi	r26, 0x15	; 21
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    2da0:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2da2:	e0 e0       	ldi	r30, 0x00	; 0
    2da4:	ef 5f       	subi	r30, 0xFF	; 255
    2da6:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    2da8:	88 23       	and	r24, r24
    2daa:	e1 f3       	breq	.-8      	; 0x2da4 <main+0x444>
		cpu_irq_enable();
    2dac:	e1 11       	cpse	r30, r1
    2dae:	02 c0       	rjmp	.+4      	; 0x2db4 <main+0x454>
    2db0:	78 94       	sei
    2db2:	13 c0       	rjmp	.+38     	; 0x2dda <main+0x47a>
    2db4:	a8 e4       	ldi	r26, 0x48	; 72

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	8c 91       	ld	r24, X
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	e1 50       	subi	r30, 0x01	; 1
    2dbe:	f0 4e       	sbci	r31, 0xE0	; 224
    2dc0:	98 2f       	mov	r25, r24
    2dc2:	91 7f       	andi	r25, 0xF1	; 241
    2dc4:	80 81       	ld	r24, Z
	sleep_enable();
    2dc6:	89 2b       	or	r24, r25
    2dc8:	8c 93       	st	X, r24
    2dca:	8c 91       	ld	r24, X

	cpu_irq_enable();
    2dcc:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    2dce:	8c 93       	st	X, r24

	sleep_disable();
    2dd0:	78 94       	sei
    2dd2:	88 95       	sleep
    2dd4:	8c 91       	ld	r24, X
	sleepmgr_enter_sleep();
	
	return retcode;
}
    2dd6:	8e 7f       	andi	r24, 0xFE	; 254
    2dd8:	8c 93       	st	X, r24
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	ce 5b       	subi	r28, 0xBE	; 190
    2de0:	df 4f       	sbci	r29, 0xFF	; 255
    2de2:	cd bf       	out	0x3d, r28	; 61
    2de4:	de bf       	out	0x3e, r29	; 62
    2de6:	df 91       	pop	r29
    2de8:	cf 91       	pop	r28
    2dea:	1f 91       	pop	r17
    2dec:	0f 91       	pop	r16
    2dee:	ff 90       	pop	r15
    2df0:	ef 90       	pop	r14
    2df2:	df 90       	pop	r13
    2df4:	cf 90       	pop	r12
    2df6:	bf 90       	pop	r11
    2df8:	af 90       	pop	r10
    2dfa:	9f 90       	pop	r9
    2dfc:	08 95       	ret

00002dfe <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <sysclk_init+0x6>
    2e04:	00 d0       	rcall	.+0      	; 0x2e06 <sysclk_init+0x8>
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2e0a:	8f ef       	ldi	r24, 0xFF	; 255
    2e0c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2e10:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2e14:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2e18:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2e1c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    2e20:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    2e24:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    2e28:	6c e1       	ldi	r22, 0x1C	; 28
    2e2a:	70 e0       	ldi	r23, 0x00	; 0
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	08 d7       	rcall	.+3600   	; 0x3c40 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    2e30:	8a 83       	std	Y+2, r24	; 0x02
    2e32:	6d e1       	ldi	r22, 0x1D	; 29
    2e34:	70 e0       	ldi	r23, 0x00	; 0
    2e36:	82 e0       	ldi	r24, 0x02	; 2
    2e38:	03 d7       	rcall	.+3590   	; 0x3c40 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    2e3a:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	21 f4       	brne	.+8      	; 0x2e4c <sysclk_init+0x4e>
		cal = 0x2340;
    2e44:	80 e4       	ldi	r24, 0x40	; 64
    2e46:	93 e2       	ldi	r25, 0x23	; 35
    2e48:	89 83       	std	Y+1, r24	; 0x01
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e50:	8b 83       	std	Y+3, r24	; 0x03
    2e52:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    2e54:	e0 e6       	ldi	r30, 0x60	; 96
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    2e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e5c:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    2e5e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    2e62:	84 fd       	sbrc	r24, 4
    2e64:	18 c0       	rjmp	.+48     	; 0x2e96 <sysclk_init+0x98>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2e66:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    2e6a:	83 fd       	sbrc	r24, 3
    2e6c:	05 c0       	rjmp	.+10     	; 0x2e78 <sysclk_init+0x7a>
    2e6e:	e0 e5       	ldi	r30, 0x50	; 80
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2e74:	83 ff       	sbrs	r24, 3
    2e76:	fd cf       	rjmp	.-6      	; 0x2e72 <sysclk_init+0x74>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2e78:	8f b7       	in	r24, 0x3f	; 63
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    2e7c:	f8 94       	cli
	return flags;
    2e7e:	9d 81       	ldd	r25, Y+5	; 0x05
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    2e80:	e0 e5       	ldi	r30, 0x50	; 80
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	83 ec       	ldi	r24, 0xC3	; 195
    2e86:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    2e88:	80 81       	ld	r24, Z
    2e8a:	80 61       	ori	r24, 0x10	; 16
    2e8c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2e8e:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    2e90:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    2e92:	84 ff       	sbrs	r24, 4
    2e94:	fd cf       	rjmp	.-6      	; 0x2e90 <sysclk_init+0x92>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2e96:	64 e0       	ldi	r22, 0x04	; 4
    2e98:	80 e4       	ldi	r24, 0x40	; 64
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	db d6       	rcall	.+3510   	; 0x3c54 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2e9e:	8f b7       	in	r24, 0x3f	; 63
    2ea0:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    2ea2:	f8 94       	cli
	return flags;
    2ea4:	9e 81       	ldd	r25, Y+6	; 0x06
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2ea6:	e0 e5       	ldi	r30, 0x50	; 80
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	8e 7f       	andi	r24, 0xFE	; 254
    2eae:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2eb0:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2eb2:	81 81       	ldd	r24, Z+1	; 0x01
    2eb4:	83 ff       	sbrs	r24, 3
    2eb6:	fd cf       	rjmp	.-6      	; 0x2eb2 <sysclk_init+0xb4>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    2eb8:	8b e0       	ldi	r24, 0x0B	; 11
    2eba:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    2ebe:	26 96       	adiw	r28, 0x06	; 6
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	df 91       	pop	r29
    2ec6:	cf 91       	pop	r28
    2ec8:	08 95       	ret

00002eca <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    2eca:	cf 93       	push	r28
    2ecc:	df 93       	push	r29
    2ece:	1f 92       	push	r1
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2ed4:	9f b7       	in	r25, 0x3f	; 63
    2ed6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2ed8:	f8 94       	cli
	return flags;
    2eda:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2edc:	e8 2f       	mov	r30, r24
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	e0 59       	subi	r30, 0x90	; 144
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	60 95       	com	r22
    2ee6:	80 81       	ld	r24, Z
    2ee8:	68 23       	and	r22, r24
    2eea:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2eec:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2eee:	0f 90       	pop	r0
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	08 95       	ret

00002ef6 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    2ef6:	cf 93       	push	r28
    2ef8:	df 93       	push	r29
    2efa:	1f 92       	push	r1
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f00:	9f b7       	in	r25, 0x3f	; 63
    2f02:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2f04:	f8 94       	cli
	return flags;
    2f06:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    2f08:	e8 2f       	mov	r30, r24
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	e0 59       	subi	r30, 0x90	; 144
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	80 81       	ld	r24, Z
    2f12:	68 2b       	or	r22, r24
    2f14:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f16:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2f18:	0f 90       	pop	r0
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	08 95       	ret

00002f20 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	1f 92       	push	r1
    2f26:	1f 92       	push	r1
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    2f2c:	86 30       	cpi	r24, 0x06	; 6
    2f2e:	11 f0       	breq	.+4      	; 0x2f34 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	01 c0       	rjmp	.+2      	; 0x2f36 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    2f34:	68 e1       	ldi	r22, 0x18	; 24
    2f36:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    2f3a:	81 fd       	sbrc	r24, 1
    2f3c:	2a c0       	rjmp	.+84     	; 0x2f92 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f3e:	8f b7       	in	r24, 0x3f	; 63
    2f40:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2f42:	f8 94       	cli
	return flags;
    2f44:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2f46:	e0 e5       	ldi	r30, 0x50	; 80
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	82 60       	ori	r24, 0x02	; 2
    2f4e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f50:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2f52:	81 81       	ldd	r24, Z+1	; 0x01
    2f54:	81 ff       	sbrs	r24, 1
    2f56:	fd cf       	rjmp	.-6      	; 0x2f52 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f58:	8f b7       	in	r24, 0x3f	; 63
    2f5a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2f5c:	f8 94       	cli
	return flags;
    2f5e:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    2f60:	a0 e5       	ldi	r26, 0x50	; 80
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	16 96       	adiw	r26, 0x06	; 6
    2f66:	8c 91       	ld	r24, X
    2f68:	16 97       	sbiw	r26, 0x06	; 6
    2f6a:	89 7f       	andi	r24, 0xF9	; 249
    2f6c:	16 96       	adiw	r26, 0x06	; 6
    2f6e:	8c 93       	st	X, r24
    2f70:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    2f72:	e0 e6       	ldi	r30, 0x60	; 96
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 e8       	ldi	r24, 0x80	; 128
    2f78:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    2f7a:	8b eb       	ldi	r24, 0xBB	; 187
    2f7c:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    2f7e:	16 96       	adiw	r26, 0x06	; 6
    2f80:	8c 91       	ld	r24, X
    2f82:	16 97       	sbiw	r26, 0x06	; 6
    2f84:	84 60       	ori	r24, 0x04	; 4
    2f86:	16 96       	adiw	r26, 0x06	; 6
    2f88:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    2f8a:	80 81       	ld	r24, Z
    2f8c:	81 60       	ori	r24, 0x01	; 1
    2f8e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f90:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    2f92:	63 60       	ori	r22, 0x03	; 3
    2f94:	84 e4       	ldi	r24, 0x44	; 68
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	5d d6       	rcall	.+3258   	; 0x3c54 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    2f9a:	60 e4       	ldi	r22, 0x40	; 64
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	95 df       	rcall	.-214    	; 0x2eca <sysclk_enable_module>
}
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	08 95       	ret

00002faa <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
    2faa:	80 91 de 23 	lds	r24, 0x23DE	; 0x8023de <udi_cdc_nb_comm_enabled>
    2fae:	81 50       	subi	r24, 0x01	; 1
    2fb0:	80 93 de 23 	sts	0x23DE, r24	; 0x8023de <udi_cdc_nb_comm_enabled>
    2fb4:	08 95       	ret

00002fb6 <udi_cdc_data_setup>:
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	08 95       	ret

00002fba <udi_cdc_getsetting>:
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	08 95       	ret

00002fbe <udi_cdc_line_coding_received>:
    2fbe:	6c ee       	ldi	r22, 0xEC	; 236
    2fc0:	73 e2       	ldi	r23, 0x23	; 35
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	c8 cc       	rjmp	.-1648   	; 0x2956 <usb_callback_config>
    2fc6:	08 95       	ret

00002fc8 <udi_cdc_comm_enable>:
    2fc8:	10 92 de 23 	sts	0x23DE, r1	; 0x8023de <udi_cdc_nb_comm_enabled>
    2fcc:	10 92 ea 23 	sts	0x23EA, r1	; 0x8023ea <udi_cdc_state>
    2fd0:	10 92 eb 23 	sts	0x23EB, r1	; 0x8023eb <udi_cdc_state+0x1>
    2fd4:	e0 ee       	ldi	r30, 0xE0	; 224
    2fd6:	f3 e2       	ldi	r31, 0x23	; 35
    2fd8:	81 ea       	ldi	r24, 0xA1	; 161
    2fda:	80 83       	st	Z, r24
    2fdc:	80 e2       	ldi	r24, 0x20	; 32
    2fde:	81 83       	std	Z+1, r24	; 0x01
    2fe0:	12 82       	std	Z+2, r1	; 0x02
    2fe2:	13 82       	std	Z+3, r1	; 0x03
    2fe4:	14 82       	std	Z+4, r1	; 0x04
    2fe6:	15 82       	std	Z+5, r1	; 0x05
    2fe8:	82 e0       	ldi	r24, 0x02	; 2
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	86 83       	std	Z+6, r24	; 0x06
    2fee:	97 83       	std	Z+7, r25	; 0x07
    2ff0:	10 86       	std	Z+8, r1	; 0x08
    2ff2:	11 86       	std	Z+9, r1	; 0x09
    2ff4:	ec ee       	ldi	r30, 0xEC	; 236
    2ff6:	f3 e2       	ldi	r31, 0x23	; 35
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	92 ec       	ldi	r25, 0xC2	; 194
    2ffc:	a1 e0       	ldi	r26, 0x01	; 1
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	80 83       	st	Z, r24
    3002:	91 83       	std	Z+1, r25	; 0x01
    3004:	a2 83       	std	Z+2, r26	; 0x02
    3006:	b3 83       	std	Z+3, r27	; 0x03
    3008:	14 82       	std	Z+4, r1	; 0x04
    300a:	15 82       	std	Z+5, r1	; 0x05
    300c:	88 e0       	ldi	r24, 0x08	; 8
    300e:	86 83       	std	Z+6, r24	; 0x06
    3010:	bf 01       	movw	r22, r30
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	a0 dc       	rcall	.-1728   	; 0x2956 <usb_callback_config>
    3016:	9c dc       	rcall	.-1736   	; 0x2950 <usb_callback_cdc_enable>
    3018:	88 23       	and	r24, r24
    301a:	29 f0       	breq	.+10     	; 0x3026 <udi_cdc_comm_enable+0x5e>
    301c:	90 91 de 23 	lds	r25, 0x23DE	; 0x8023de <udi_cdc_nb_comm_enabled>
    3020:	9f 5f       	subi	r25, 0xFF	; 255
    3022:	90 93 de 23 	sts	0x23DE, r25	; 0x8023de <udi_cdc_nb_comm_enabled>
    3026:	08 95       	ret

00003028 <udi_cdc_tx_send>:
    3028:	ff 92       	push	r15
    302a:	0f 93       	push	r16
    302c:	1f 93       	push	r17
    302e:	cf 93       	push	r28
    3030:	df 93       	push	r29
    3032:	1f 92       	push	r1
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
    3038:	80 91 cb 22 	lds	r24, 0x22CB	; 0x8022cb <udi_cdc_tx_trans_ongoing>
    303c:	81 11       	cpse	r24, r1
    303e:	9f c0       	rjmp	.+318    	; 0x317e <udi_cdc_tx_send+0x156>
    3040:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <udd_is_high_speed>
    3044:	88 23       	and	r24, r24
    3046:	51 f0       	breq	.+20     	; 0x305c <udi_cdc_tx_send+0x34>
    3048:	00 91 cc 22 	lds	r16, 0x22CC	; 0x8022cc <udi_cdc_tx_sof_num>
    304c:	10 91 cd 22 	lds	r17, 0x22CD	; 0x8022cd <udi_cdc_tx_sof_num+0x1>
    3050:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <udd_get_micro_frame_number>
    3054:	08 17       	cp	r16, r24
    3056:	19 07       	cpc	r17, r25
    3058:	59 f4       	brne	.+22     	; 0x3070 <udi_cdc_tx_send+0x48>
    305a:	91 c0       	rjmp	.+290    	; 0x317e <udi_cdc_tx_send+0x156>
    305c:	00 91 cc 22 	lds	r16, 0x22CC	; 0x8022cc <udi_cdc_tx_sof_num>
    3060:	10 91 cd 22 	lds	r17, 0x22CD	; 0x8022cd <udi_cdc_tx_sof_num+0x1>
    3064:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <udd_get_frame_number>
    3068:	08 17       	cp	r16, r24
    306a:	19 07       	cpc	r17, r25
    306c:	09 f4       	brne	.+2      	; 0x3070 <udi_cdc_tx_send+0x48>
    306e:	87 c0       	rjmp	.+270    	; 0x317e <udi_cdc_tx_send+0x156>
    3070:	8f b7       	in	r24, 0x3f	; 63
    3072:	89 83       	std	Y+1, r24	; 0x01
    3074:	f8 94       	cli
    3076:	19 81       	ldd	r17, Y+1	; 0x01
    3078:	00 91 ce 22 	lds	r16, 0x22CE	; 0x8022ce <udi_cdc_tx_buf_sel>
    307c:	e0 2f       	mov	r30, r16
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	ee 0f       	add	r30, r30
    3082:	ff 1f       	adc	r31, r31
    3084:	e1 53       	subi	r30, 0x31	; 49
    3086:	fd 4d       	sbci	r31, 0xDD	; 221
    3088:	80 81       	ld	r24, Z
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	89 2b       	or	r24, r25
    308e:	09 f5       	brne	.+66     	; 0x30d2 <udi_cdc_tx_send+0xaa>
    3090:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <sof_zlp_counter.5059>
    3094:	90 91 c9 22 	lds	r25, 0x22C9	; 0x8022c9 <sof_zlp_counter.5059+0x1>
    3098:	01 96       	adiw	r24, 0x01	; 1
    309a:	80 93 c8 22 	sts	0x22C8, r24	; 0x8022c8 <sof_zlp_counter.5059>
    309e:	90 93 c9 22 	sts	0x22C9, r25	; 0x8022c9 <sof_zlp_counter.5059+0x1>
    30a2:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <udd_is_high_speed>
    30a6:	81 11       	cpse	r24, r1
    30a8:	07 c0       	rjmp	.+14     	; 0x30b8 <udi_cdc_tx_send+0x90>
    30aa:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <sof_zlp_counter.5059>
    30ae:	90 91 c9 22 	lds	r25, 0x22C9	; 0x8022c9 <sof_zlp_counter.5059+0x1>
    30b2:	84 36       	cpi	r24, 0x64	; 100
    30b4:	91 05       	cpc	r25, r1
    30b6:	58 f0       	brcs	.+22     	; 0x30ce <udi_cdc_tx_send+0xa6>
    30b8:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <udd_is_high_speed>
    30bc:	88 23       	and	r24, r24
    30be:	49 f0       	breq	.+18     	; 0x30d2 <udi_cdc_tx_send+0xaa>
    30c0:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <sof_zlp_counter.5059>
    30c4:	90 91 c9 22 	lds	r25, 0x22C9	; 0x8022c9 <sof_zlp_counter.5059+0x1>
    30c8:	80 32       	cpi	r24, 0x20	; 32
    30ca:	93 40       	sbci	r25, 0x03	; 3
    30cc:	10 f4       	brcc	.+4      	; 0x30d2 <udi_cdc_tx_send+0xaa>
    30ce:	1f bf       	out	0x3f, r17	; 63
    30d0:	56 c0       	rjmp	.+172    	; 0x317e <udi_cdc_tx_send+0x156>
    30d2:	10 92 c8 22 	sts	0x22C8, r1	; 0x8022c8 <sof_zlp_counter.5059>
    30d6:	10 92 c9 22 	sts	0x22C9, r1	; 0x8022c9 <sof_zlp_counter.5059+0x1>
    30da:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <udi_cdc_tx_both_buf_to_send>
    30de:	81 11       	cpse	r24, r1
    30e0:	06 c0       	rjmp	.+12     	; 0x30ee <udi_cdc_tx_send+0xc6>
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	01 11       	cpse	r16, r1
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	80 93 ce 22 	sts	0x22CE, r24	; 0x8022ce <udi_cdc_tx_buf_sel>
    30ec:	04 c0       	rjmp	.+8      	; 0x30f6 <udi_cdc_tx_send+0xce>
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	01 11       	cpse	r16, r1
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	08 2f       	mov	r16, r24
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	80 93 cb 22 	sts	0x22CB, r24	; 0x8022cb <udi_cdc_tx_trans_ongoing>
    30fc:	1f bf       	out	0x3f, r17	; 63
    30fe:	10 e0       	ldi	r17, 0x00	; 0
    3100:	f8 01       	movw	r30, r16
    3102:	ee 0f       	add	r30, r30
    3104:	ff 1f       	adc	r31, r31
    3106:	e1 53       	subi	r30, 0x31	; 49
    3108:	fd 4d       	sbci	r31, 0xDD	; 221
    310a:	80 81       	ld	r24, Z
    310c:	91 81       	ldd	r25, Z+1	; 0x01
    310e:	ff 24       	eor	r15, r15
    3110:	f3 94       	inc	r15
    3112:	80 34       	cpi	r24, 0x40	; 64
    3114:	91 05       	cpc	r25, r1
    3116:	09 f4       	brne	.+2      	; 0x311a <udi_cdc_tx_send+0xf2>
    3118:	f1 2c       	mov	r15, r1
    311a:	80 34       	cpi	r24, 0x40	; 64
    311c:	91 05       	cpc	r25, r1
    311e:	91 f0       	breq	.+36     	; 0x3144 <udi_cdc_tx_send+0x11c>
    3120:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <udd_is_high_speed>
    3124:	88 23       	and	r24, r24
    3126:	39 f0       	breq	.+14     	; 0x3136 <udi_cdc_tx_send+0x10e>
    3128:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <udd_get_micro_frame_number>
    312c:	80 93 cc 22 	sts	0x22CC, r24	; 0x8022cc <udi_cdc_tx_sof_num>
    3130:	90 93 cd 22 	sts	0x22CD, r25	; 0x8022cd <udi_cdc_tx_sof_num+0x1>
    3134:	0b c0       	rjmp	.+22     	; 0x314c <udi_cdc_tx_send+0x124>
    3136:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <udd_get_frame_number>
    313a:	80 93 cc 22 	sts	0x22CC, r24	; 0x8022cc <udi_cdc_tx_sof_num>
    313e:	90 93 cd 22 	sts	0x22CD, r25	; 0x8022cd <udi_cdc_tx_sof_num+0x1>
    3142:	04 c0       	rjmp	.+8      	; 0x314c <udi_cdc_tx_send+0x124>
    3144:	10 92 cc 22 	sts	0x22CC, r1	; 0x8022cc <udi_cdc_tx_sof_num>
    3148:	10 92 cd 22 	sts	0x22CD, r1	; 0x8022cd <udi_cdc_tx_sof_num+0x1>
    314c:	f8 01       	movw	r30, r16
    314e:	ee 0f       	add	r30, r30
    3150:	ff 1f       	adc	r31, r31
    3152:	e1 53       	subi	r30, 0x31	; 49
    3154:	fd 4d       	sbci	r31, 0xDD	; 221
    3156:	20 81       	ld	r18, Z
    3158:	31 81       	ldd	r19, Z+1	; 0x01
    315a:	a8 01       	movw	r20, r16
    315c:	00 24       	eor	r0, r0
    315e:	56 95       	lsr	r21
    3160:	47 95       	ror	r20
    3162:	07 94       	ror	r0
    3164:	56 95       	lsr	r21
    3166:	47 95       	ror	r20
    3168:	07 94       	ror	r0
    316a:	54 2f       	mov	r21, r20
    316c:	40 2d       	mov	r20, r0
    316e:	4c 52       	subi	r20, 0x2C	; 44
    3170:	5d 4d       	sbci	r21, 0xDD	; 221
    3172:	09 ec       	ldi	r16, 0xC9	; 201
    3174:	18 e1       	ldi	r17, 0x18	; 24
    3176:	6f 2d       	mov	r22, r15
    3178:	81 e8       	ldi	r24, 0x81	; 129
    317a:	0e 94 7f 10 	call	0x20fe	; 0x20fe <udd_ep_run>
    317e:	0f 90       	pop	r0
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	1f 91       	pop	r17
    3186:	0f 91       	pop	r16
    3188:	ff 90       	pop	r15
    318a:	08 95       	ret

0000318c <udi_cdc_data_sof_notify>:
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	4c cf       	rjmp	.-360    	; 0x3028 <udi_cdc_tx_send>
    3190:	08 95       	ret

00003192 <udi_cdc_data_sent>:
    3192:	81 11       	cpse	r24, r1
    3194:	19 c0       	rjmp	.+50     	; 0x31c8 <udi_cdc_data_sent+0x36>
    3196:	20 91 ce 22 	lds	r18, 0x22CE	; 0x8022ce <udi_cdc_tx_buf_sel>
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	22 23       	and	r18, r18
    31a0:	11 f0       	breq	.+4      	; 0x31a6 <udi_cdc_data_sent+0x14>
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	fc 01       	movw	r30, r24
    31ac:	e1 53       	subi	r30, 0x31	; 49
    31ae:	fd 4d       	sbci	r31, 0xDD	; 221
    31b0:	10 82       	st	Z, r1
    31b2:	11 82       	std	Z+1, r1	; 0x01
    31b4:	10 92 ca 22 	sts	0x22CA, r1	; 0x8022ca <udi_cdc_tx_both_buf_to_send>
    31b8:	10 92 cb 22 	sts	0x22CB, r1	; 0x8022cb <udi_cdc_tx_trans_ongoing>
    31bc:	67 2b       	or	r22, r23
    31be:	11 f0       	breq	.+4      	; 0x31c4 <udi_cdc_data_sent+0x32>
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	cd db       	rcall	.-2150   	; 0x295e <usb_callback_tx_empty_notify>
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	30 cf       	rjmp	.-416    	; 0x3028 <udi_cdc_tx_send>
    31c8:	08 95       	ret

000031ca <udi_cdc_data_disable>:
    31ca:	80 91 dd 23 	lds	r24, 0x23DD	; 0x8023dd <udi_cdc_nb_data_enabled>
    31ce:	81 50       	subi	r24, 0x01	; 1
    31d0:	80 93 dd 23 	sts	0x23DD, r24	; 0x8023dd <udi_cdc_nb_data_enabled>
    31d4:	80 91 dd 23 	lds	r24, 0x23DD	; 0x8023dd <udi_cdc_nb_data_enabled>
    31d8:	bd db       	rcall	.-2182   	; 0x2954 <usb_callback_cdc_disable>
    31da:	10 92 dc 23 	sts	0x23DC, r1	; 0x8023dc <udi_cdc_data_running>
    31de:	08 95       	ret

000031e0 <udi_cdc_comm_setup>:
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <udd_g_ctrlreq>
    31e8:	88 23       	and	r24, r24
    31ea:	e4 f4       	brge	.+56     	; 0x3224 <udi_cdc_comm_setup+0x44>
    31ec:	80 76       	andi	r24, 0x60	; 96
    31ee:	80 32       	cpi	r24, 0x20	; 32
    31f0:	09 f0       	breq	.+2      	; 0x31f4 <udi_cdc_comm_setup+0x14>
    31f2:	47 c0       	rjmp	.+142    	; 0x3282 <udi_cdc_comm_setup+0xa2>
    31f4:	80 91 05 24 	lds	r24, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    31f8:	81 32       	cpi	r24, 0x21	; 33
    31fa:	09 f0       	breq	.+2      	; 0x31fe <udi_cdc_comm_setup+0x1e>
    31fc:	44 c0       	rjmp	.+136    	; 0x3286 <udi_cdc_comm_setup+0xa6>
    31fe:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3202:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3206:	07 97       	sbiw	r24, 0x07	; 7
    3208:	09 f0       	breq	.+2      	; 0x320c <udi_cdc_comm_setup+0x2c>
    320a:	3f c0       	rjmp	.+126    	; 0x328a <udi_cdc_comm_setup+0xaa>
    320c:	e4 e0       	ldi	r30, 0x04	; 4
    320e:	f4 e2       	ldi	r31, 0x24	; 36
    3210:	8c ee       	ldi	r24, 0xEC	; 236
    3212:	93 e2       	ldi	r25, 0x23	; 35
    3214:	80 87       	std	Z+8, r24	; 0x08
    3216:	91 87       	std	Z+9, r25	; 0x09
    3218:	87 e0       	ldi	r24, 0x07	; 7
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	82 87       	std	Z+10, r24	; 0x0a
    321e:	93 87       	std	Z+11, r25	; 0x0b
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	3a c0       	rjmp	.+116    	; 0x3298 <udi_cdc_comm_setup+0xb8>
    3224:	80 76       	andi	r24, 0x60	; 96
    3226:	80 32       	cpi	r24, 0x20	; 32
    3228:	91 f5       	brne	.+100    	; 0x328e <udi_cdc_comm_setup+0xae>
    322a:	80 91 05 24 	lds	r24, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    322e:	80 32       	cpi	r24, 0x20	; 32
    3230:	19 f0       	breq	.+6      	; 0x3238 <udi_cdc_comm_setup+0x58>
    3232:	82 32       	cpi	r24, 0x22	; 34
    3234:	b9 f0       	breq	.+46     	; 0x3264 <udi_cdc_comm_setup+0x84>
    3236:	2d c0       	rjmp	.+90     	; 0x3292 <udi_cdc_comm_setup+0xb2>
    3238:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    323c:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3240:	07 97       	sbiw	r24, 0x07	; 7
    3242:	49 f5       	brne	.+82     	; 0x3296 <udi_cdc_comm_setup+0xb6>
    3244:	e4 e0       	ldi	r30, 0x04	; 4
    3246:	f4 e2       	ldi	r31, 0x24	; 36
    3248:	8f ed       	ldi	r24, 0xDF	; 223
    324a:	97 e1       	ldi	r25, 0x17	; 23
    324c:	84 87       	std	Z+12, r24	; 0x0c
    324e:	95 87       	std	Z+13, r25	; 0x0d
    3250:	8c ee       	ldi	r24, 0xEC	; 236
    3252:	93 e2       	ldi	r25, 0x23	; 35
    3254:	80 87       	std	Z+8, r24	; 0x08
    3256:	91 87       	std	Z+9, r25	; 0x09
    3258:	87 e0       	ldi	r24, 0x07	; 7
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	82 87       	std	Z+10, r24	; 0x0a
    325e:	93 87       	std	Z+11, r25	; 0x0b
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	1a c0       	rjmp	.+52     	; 0x3298 <udi_cdc_comm_setup+0xb8>
    3264:	c4 e0       	ldi	r28, 0x04	; 4
    3266:	d4 e2       	ldi	r29, 0x24	; 36
    3268:	6a 81       	ldd	r22, Y+2	; 0x02
    326a:	61 70       	andi	r22, 0x01	; 1
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	74 db       	rcall	.-2328   	; 0x2958 <usb_callback_cdc_set_dtr>
    3270:	6a 81       	ldd	r22, Y+2	; 0x02
    3272:	7b 81       	ldd	r23, Y+3	; 0x03
    3274:	76 95       	lsr	r23
    3276:	67 95       	ror	r22
    3278:	61 70       	andi	r22, 0x01	; 1
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	6e db       	rcall	.-2340   	; 0x295a <usb_callback_cdc_set_rts>
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	0b c0       	rjmp	.+22     	; 0x3298 <udi_cdc_comm_setup+0xb8>
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	09 c0       	rjmp	.+18     	; 0x3298 <udi_cdc_comm_setup+0xb8>
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	07 c0       	rjmp	.+14     	; 0x3298 <udi_cdc_comm_setup+0xb8>
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	05 c0       	rjmp	.+10     	; 0x3298 <udi_cdc_comm_setup+0xb8>
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	03 c0       	rjmp	.+6      	; 0x3298 <udi_cdc_comm_setup+0xb8>
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	01 c0       	rjmp	.+2      	; 0x3298 <udi_cdc_comm_setup+0xb8>
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	08 95       	ret

0000329e <udi_cdc_multi_get_nb_received_data>:
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    32a2:	1f 92       	push	r1
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	8f b7       	in	r24, 0x3f	; 63
    32aa:	89 83       	std	Y+1, r24	; 0x01
    32ac:	f8 94       	cli
    32ae:	49 81       	ldd	r20, Y+1	; 0x01
    32b0:	20 91 55 23 	lds	r18, 0x2355	; 0x802355 <udi_cdc_rx_pos>
    32b4:	30 91 56 23 	lds	r19, 0x2356	; 0x802356 <udi_cdc_rx_pos+0x1>
    32b8:	e0 91 57 23 	lds	r30, 0x2357	; 0x802357 <udi_cdc_rx_buf_sel>
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	ee 0f       	add	r30, r30
    32c0:	ff 1f       	adc	r31, r31
    32c2:	e8 5a       	subi	r30, 0xA8	; 168
    32c4:	fc 4d       	sbci	r31, 0xDC	; 220
    32c6:	80 81       	ld	r24, Z
    32c8:	91 81       	ldd	r25, Z+1	; 0x01
    32ca:	4f bf       	out	0x3f, r20	; 63
    32cc:	82 1b       	sub	r24, r18
    32ce:	93 0b       	sbc	r25, r19
    32d0:	0f 90       	pop	r0
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	08 95       	ret

000032d8 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    32d8:	e2 df       	rcall	.-60     	; 0x329e <udi_cdc_multi_get_nb_received_data>
    32da:	21 e0       	ldi	r18, 0x01	; 1
    32dc:	89 2b       	or	r24, r25
    32de:	09 f4       	brne	.+2      	; 0x32e2 <udi_cdc_multi_is_rx_ready+0xa>
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	82 2f       	mov	r24, r18
    32e4:	08 95       	ret

000032e6 <udi_cdc_rx_start>:
    32e6:	0f 93       	push	r16
    32e8:	1f 93       	push	r17
    32ea:	cf 93       	push	r28
    32ec:	df 93       	push	r29
    32ee:	1f 92       	push	r1
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	8f b7       	in	r24, 0x3f	; 63
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	f8 94       	cli
    32fa:	99 81       	ldd	r25, Y+1	; 0x01
    32fc:	20 91 57 23 	lds	r18, 0x2357	; 0x802357 <udi_cdc_rx_buf_sel>
    3300:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <udi_cdc_rx_trans_ongoing>
    3304:	81 11       	cpse	r24, r1
    3306:	10 c0       	rjmp	.+32     	; 0x3328 <udi_cdc_rx_start+0x42>
    3308:	60 91 55 23 	lds	r22, 0x2355	; 0x802355 <udi_cdc_rx_pos>
    330c:	70 91 56 23 	lds	r23, 0x2356	; 0x802356 <udi_cdc_rx_pos+0x1>
    3310:	02 2f       	mov	r16, r18
    3312:	10 e0       	ldi	r17, 0x00	; 0
    3314:	f8 01       	movw	r30, r16
    3316:	ee 0f       	add	r30, r30
    3318:	ff 1f       	adc	r31, r31
    331a:	e8 5a       	subi	r30, 0xA8	; 168
    331c:	fc 4d       	sbci	r31, 0xDC	; 220
    331e:	40 81       	ld	r20, Z
    3320:	51 81       	ldd	r21, Z+1	; 0x01
    3322:	64 17       	cp	r22, r20
    3324:	75 07       	cpc	r23, r21
    3326:	18 f4       	brcc	.+6      	; 0x332e <udi_cdc_rx_start+0x48>
    3328:	9f bf       	out	0x3f, r25	; 63
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	27 c0       	rjmp	.+78     	; 0x337c <udi_cdc_rx_start+0x96>
    332e:	10 92 55 23 	sts	0x2355, r1	; 0x802355 <udi_cdc_rx_pos>
    3332:	10 92 56 23 	sts	0x2356, r1	; 0x802356 <udi_cdc_rx_pos+0x1>
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	21 11       	cpse	r18, r1
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	80 93 57 23 	sts	0x2357, r24	; 0x802357 <udi_cdc_rx_buf_sel>
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	80 93 54 23 	sts	0x2354, r24	; 0x802354 <udi_cdc_rx_trans_ongoing>
    3346:	9f bf       	out	0x3f, r25	; 63
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	c6 df       	rcall	.-116    	; 0x32d8 <udi_cdc_multi_is_rx_ready>
    334c:	88 23       	and	r24, r24
    334e:	11 f0       	breq	.+4      	; 0x3354 <udi_cdc_rx_start+0x6e>
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	04 db       	rcall	.-2552   	; 0x295c <usb_callback_rx_notify>
    3354:	a8 01       	movw	r20, r16
    3356:	00 24       	eor	r0, r0
    3358:	56 95       	lsr	r21
    335a:	47 95       	ror	r20
    335c:	07 94       	ror	r0
    335e:	56 95       	lsr	r21
    3360:	47 95       	ror	r20
    3362:	07 94       	ror	r0
    3364:	54 2f       	mov	r21, r20
    3366:	40 2d       	mov	r20, r0
    3368:	44 5a       	subi	r20, 0xA4	; 164
    336a:	5c 4d       	sbci	r21, 0xDC	; 220
    336c:	06 ef       	ldi	r16, 0xF6	; 246
    336e:	19 e1       	ldi	r17, 0x19	; 25
    3370:	20 e4       	ldi	r18, 0x40	; 64
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	61 e0       	ldi	r22, 0x01	; 1
    3376:	82 e0       	ldi	r24, 0x02	; 2
    3378:	0e 94 7f 10 	call	0x20fe	; 0x20fe <udd_ep_run>
    337c:	0f 90       	pop	r0
    337e:	df 91       	pop	r29
    3380:	cf 91       	pop	r28
    3382:	1f 91       	pop	r17
    3384:	0f 91       	pop	r16
    3386:	08 95       	ret

00003388 <udi_cdc_data_enable>:
    3388:	10 92 dd 23 	sts	0x23DD, r1	; 0x8023dd <udi_cdc_nb_data_enabled>
    338c:	10 92 cb 22 	sts	0x22CB, r1	; 0x8022cb <udi_cdc_tx_trans_ongoing>
    3390:	10 92 ca 22 	sts	0x22CA, r1	; 0x8022ca <udi_cdc_tx_both_buf_to_send>
    3394:	10 92 ce 22 	sts	0x22CE, r1	; 0x8022ce <udi_cdc_tx_buf_sel>
    3398:	ef ec       	ldi	r30, 0xCF	; 207
    339a:	f2 e2       	ldi	r31, 0x22	; 34
    339c:	10 82       	st	Z, r1
    339e:	11 82       	std	Z+1, r1	; 0x01
    33a0:	12 82       	std	Z+2, r1	; 0x02
    33a2:	13 82       	std	Z+3, r1	; 0x03
    33a4:	10 92 cc 22 	sts	0x22CC, r1	; 0x8022cc <udi_cdc_tx_sof_num>
    33a8:	10 92 cd 22 	sts	0x22CD, r1	; 0x8022cd <udi_cdc_tx_sof_num+0x1>
    33ac:	80 e0       	ldi	r24, 0x00	; 0
    33ae:	3c de       	rcall	.-904    	; 0x3028 <udi_cdc_tx_send>
    33b0:	10 92 54 23 	sts	0x2354, r1	; 0x802354 <udi_cdc_rx_trans_ongoing>
    33b4:	10 92 57 23 	sts	0x2357, r1	; 0x802357 <udi_cdc_rx_buf_sel>
    33b8:	e8 e5       	ldi	r30, 0x58	; 88
    33ba:	f3 e2       	ldi	r31, 0x23	; 35
    33bc:	10 82       	st	Z, r1
    33be:	11 82       	std	Z+1, r1	; 0x01
    33c0:	12 82       	std	Z+2, r1	; 0x02
    33c2:	13 82       	std	Z+3, r1	; 0x03
    33c4:	10 92 55 23 	sts	0x2355, r1	; 0x802355 <udi_cdc_rx_pos>
    33c8:	10 92 56 23 	sts	0x2356, r1	; 0x802356 <udi_cdc_rx_pos+0x1>
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	8b df       	rcall	.-234    	; 0x32e6 <udi_cdc_rx_start>
    33d0:	88 23       	and	r24, r24
    33d2:	59 f0       	breq	.+22     	; 0x33ea <udi_cdc_data_enable+0x62>
    33d4:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <udi_cdc_nb_data_enabled>
    33d8:	9f 5f       	subi	r25, 0xFF	; 255
    33da:	90 93 dd 23 	sts	0x23DD, r25	; 0x8023dd <udi_cdc_nb_data_enabled>
    33de:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <udi_cdc_nb_data_enabled>
    33e2:	91 30       	cpi	r25, 0x01	; 1
    33e4:	11 f4       	brne	.+4      	; 0x33ea <udi_cdc_data_enable+0x62>
    33e6:	90 93 dc 23 	sts	0x23DC, r25	; 0x8023dc <udi_cdc_data_running>
    33ea:	08 95       	ret

000033ec <udi_cdc_data_received>:
    33ec:	0f 93       	push	r16
    33ee:	1f 93       	push	r17
    33f0:	81 11       	cpse	r24, r1
    33f2:	29 c0       	rjmp	.+82     	; 0x3446 <udi_cdc_data_received+0x5a>
    33f4:	80 91 57 23 	lds	r24, 0x2357	; 0x802357 <udi_cdc_rx_buf_sel>
    33f8:	e1 e0       	ldi	r30, 0x01	; 1
    33fa:	81 11       	cpse	r24, r1
    33fc:	e0 e0       	ldi	r30, 0x00	; 0
    33fe:	84 2f       	mov	r24, r20
    3400:	61 15       	cp	r22, r1
    3402:	71 05       	cpc	r23, r1
    3404:	a9 f4       	brne	.+42     	; 0x3430 <udi_cdc_data_received+0x44>
    3406:	4e 2f       	mov	r20, r30
    3408:	50 e0       	ldi	r21, 0x00	; 0
    340a:	00 24       	eor	r0, r0
    340c:	56 95       	lsr	r21
    340e:	47 95       	ror	r20
    3410:	07 94       	ror	r0
    3412:	56 95       	lsr	r21
    3414:	47 95       	ror	r20
    3416:	07 94       	ror	r0
    3418:	54 2f       	mov	r21, r20
    341a:	40 2d       	mov	r20, r0
    341c:	44 5a       	subi	r20, 0xA4	; 164
    341e:	5c 4d       	sbci	r21, 0xDC	; 220
    3420:	06 ef       	ldi	r16, 0xF6	; 246
    3422:	19 e1       	ldi	r17, 0x19	; 25
    3424:	20 e4       	ldi	r18, 0x40	; 64
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	61 e0       	ldi	r22, 0x01	; 1
    342a:	0e 94 7f 10 	call	0x20fe	; 0x20fe <udd_ep_run>
    342e:	0b c0       	rjmp	.+22     	; 0x3446 <udi_cdc_data_received+0x5a>
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	ee 0f       	add	r30, r30
    3434:	ff 1f       	adc	r31, r31
    3436:	e8 5a       	subi	r30, 0xA8	; 168
    3438:	fc 4d       	sbci	r31, 0xDC	; 220
    343a:	60 83       	st	Z, r22
    343c:	71 83       	std	Z+1, r23	; 0x01
    343e:	10 92 54 23 	sts	0x2354, r1	; 0x802354 <udi_cdc_rx_trans_ongoing>
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	50 df       	rcall	.-352    	; 0x32e6 <udi_cdc_rx_start>
    3446:	1f 91       	pop	r17
    3448:	0f 91       	pop	r16
    344a:	08 95       	ret

0000344c <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    344c:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3450:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3454:	01 90       	ld	r0, Z+
    3456:	f0 81       	ld	r31, Z
    3458:	e0 2d       	mov	r30, r0
    345a:	22 81       	ldd	r18, Z+2	; 0x02
    345c:	33 81       	ldd	r19, Z+3	; 0x03
    345e:	2e 0f       	add	r18, r30
    3460:	3f 1f       	adc	r19, r31
    3462:	fc 01       	movw	r30, r24
    3464:	40 81       	ld	r20, Z
    3466:	e4 0f       	add	r30, r20
    3468:	f1 1d       	adc	r31, r1
    346a:	e2 17       	cp	r30, r18
    346c:	f3 07       	cpc	r31, r19
    346e:	a0 f4       	brcc	.+40     	; 0x3498 <udc_next_desc_in_iface+0x4c>
    3470:	81 81       	ldd	r24, Z+1	; 0x01
    3472:	84 30       	cpi	r24, 0x04	; 4
    3474:	a1 f0       	breq	.+40     	; 0x349e <udc_next_desc_in_iface+0x52>
    3476:	86 13       	cpse	r24, r22
    3478:	06 c0       	rjmp	.+12     	; 0x3486 <udc_next_desc_in_iface+0x3a>
    347a:	14 c0       	rjmp	.+40     	; 0x34a4 <udc_next_desc_in_iface+0x58>
    347c:	81 81       	ldd	r24, Z+1	; 0x01
    347e:	84 30       	cpi	r24, 0x04	; 4
    3480:	a1 f0       	breq	.+40     	; 0x34aa <udc_next_desc_in_iface+0x5e>
    3482:	86 17       	cp	r24, r22
    3484:	a9 f0       	breq	.+42     	; 0x34b0 <udc_next_desc_in_iface+0x64>
    3486:	80 81       	ld	r24, Z
    3488:	e8 0f       	add	r30, r24
    348a:	f1 1d       	adc	r31, r1
    348c:	e2 17       	cp	r30, r18
    348e:	f3 07       	cpc	r31, r19
    3490:	a8 f3       	brcs	.-22     	; 0x347c <udc_next_desc_in_iface+0x30>
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	08 95       	ret
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	08 95       	ret
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	08 95       	ret
    34a4:	8e 2f       	mov	r24, r30
    34a6:	9f 2f       	mov	r25, r31
    34a8:	08 95       	ret
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	08 95       	ret
    34b0:	8e 2f       	mov	r24, r30
    34b2:	9f 2f       	mov	r25, r31
    34b4:	08 95       	ret

000034b6 <udc_valid_address>:
    34b6:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    34ba:	8f 77       	andi	r24, 0x7F	; 127
    34bc:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <udd_set_address>
    34c0:	08 95       	ret

000034c2 <udc_update_iface_desc>:
    34c2:	90 91 fa 23 	lds	r25, 0x23FA	; 0x8023fa <udc_num_configuration>
    34c6:	99 23       	and	r25, r25
    34c8:	81 f1       	breq	.+96     	; 0x352a <udc_update_iface_desc+0x68>
    34ca:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    34ce:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    34d2:	01 90       	ld	r0, Z+
    34d4:	f0 81       	ld	r31, Z
    34d6:	e0 2d       	mov	r30, r0
    34d8:	94 81       	ldd	r25, Z+4	; 0x04
    34da:	89 17       	cp	r24, r25
    34dc:	40 f5       	brcc	.+80     	; 0x352e <udc_update_iface_desc+0x6c>
    34de:	e0 93 f6 23 	sts	0x23F6, r30	; 0x8023f6 <udc_ptr_iface>
    34e2:	f0 93 f7 23 	sts	0x23F7, r31	; 0x8023f7 <udc_ptr_iface+0x1>
    34e6:	22 81       	ldd	r18, Z+2	; 0x02
    34e8:	33 81       	ldd	r19, Z+3	; 0x03
    34ea:	2e 0f       	add	r18, r30
    34ec:	3f 1f       	adc	r19, r31
    34ee:	e2 17       	cp	r30, r18
    34f0:	f3 07       	cpc	r31, r19
    34f2:	f8 f4       	brcc	.+62     	; 0x3532 <udc_update_iface_desc+0x70>
    34f4:	91 81       	ldd	r25, Z+1	; 0x01
    34f6:	94 30       	cpi	r25, 0x04	; 4
    34f8:	61 f4       	brne	.+24     	; 0x3512 <udc_update_iface_desc+0x50>
    34fa:	92 81       	ldd	r25, Z+2	; 0x02
    34fc:	89 13       	cpse	r24, r25
    34fe:	09 c0       	rjmp	.+18     	; 0x3512 <udc_update_iface_desc+0x50>
    3500:	93 81       	ldd	r25, Z+3	; 0x03
    3502:	96 13       	cpse	r25, r22
    3504:	06 c0       	rjmp	.+12     	; 0x3512 <udc_update_iface_desc+0x50>
    3506:	e0 93 f6 23 	sts	0x23F6, r30	; 0x8023f6 <udc_ptr_iface>
    350a:	f0 93 f7 23 	sts	0x23F7, r31	; 0x8023f7 <udc_ptr_iface+0x1>
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	08 95       	ret
    3512:	90 81       	ld	r25, Z
    3514:	e9 0f       	add	r30, r25
    3516:	f1 1d       	adc	r31, r1
    3518:	e2 17       	cp	r30, r18
    351a:	f3 07       	cpc	r31, r19
    351c:	58 f3       	brcs	.-42     	; 0x34f4 <udc_update_iface_desc+0x32>
    351e:	e0 93 f6 23 	sts	0x23F6, r30	; 0x8023f6 <udc_ptr_iface>
    3522:	f0 93 f7 23 	sts	0x23F7, r31	; 0x8023f7 <udc_ptr_iface+0x1>
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	08 95       	ret
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	08 95       	ret
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	08 95       	ret
    3532:	80 e0       	ldi	r24, 0x00	; 0
    3534:	08 95       	ret

00003536 <udc_iface_disable>:
    3536:	ef 92       	push	r14
    3538:	ff 92       	push	r15
    353a:	1f 93       	push	r17
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	c8 2f       	mov	r28, r24
    3542:	60 e0       	ldi	r22, 0x00	; 0
    3544:	be df       	rcall	.-132    	; 0x34c2 <udc_update_iface_desc>
    3546:	18 2f       	mov	r17, r24
    3548:	88 23       	and	r24, r24
    354a:	81 f1       	breq	.+96     	; 0x35ac <udc_iface_disable+0x76>
    354c:	a0 91 f8 23 	lds	r26, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3550:	b0 91 f9 23 	lds	r27, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3554:	ec 2f       	mov	r30, r28
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	ee 0f       	add	r30, r30
    355a:	ff 1f       	adc	r31, r31
    355c:	12 96       	adiw	r26, 0x02	; 2
    355e:	8d 91       	ld	r24, X+
    3560:	9c 91       	ld	r25, X
    3562:	13 97       	sbiw	r26, 0x03	; 3
    3564:	e8 0f       	add	r30, r24
    3566:	f9 1f       	adc	r31, r25
    3568:	e0 80       	ld	r14, Z
    356a:	f1 80       	ldd	r15, Z+1	; 0x01
    356c:	d7 01       	movw	r26, r14
    356e:	16 96       	adiw	r26, 0x06	; 6
    3570:	ed 91       	ld	r30, X+
    3572:	fc 91       	ld	r31, X
    3574:	17 97       	sbiw	r26, 0x07	; 7
    3576:	19 95       	eicall
    3578:	68 2f       	mov	r22, r24
    357a:	8c 2f       	mov	r24, r28
    357c:	a2 df       	rcall	.-188    	; 0x34c2 <udc_update_iface_desc>
    357e:	18 2f       	mov	r17, r24
    3580:	88 23       	and	r24, r24
    3582:	a1 f0       	breq	.+40     	; 0x35ac <udc_iface_disable+0x76>
    3584:	c0 91 f6 23 	lds	r28, 0x23F6	; 0x8023f6 <udc_ptr_iface>
    3588:	d0 91 f7 23 	lds	r29, 0x23F7	; 0x8023f7 <udc_ptr_iface+0x1>
    358c:	65 e0       	ldi	r22, 0x05	; 5
    358e:	ce 01       	movw	r24, r28
    3590:	5d df       	rcall	.-326    	; 0x344c <udc_next_desc_in_iface>
    3592:	ec 01       	movw	r28, r24
    3594:	89 2b       	or	r24, r25
    3596:	21 f0       	breq	.+8      	; 0x35a0 <udc_iface_disable+0x6a>
    3598:	8a 81       	ldd	r24, Y+2	; 0x02
    359a:	0e 94 99 11 	call	0x2332	; 0x2332 <udd_ep_free>
    359e:	f6 cf       	rjmp	.-20     	; 0x358c <udc_iface_disable+0x56>
    35a0:	d7 01       	movw	r26, r14
    35a2:	12 96       	adiw	r26, 0x02	; 2
    35a4:	ed 91       	ld	r30, X+
    35a6:	fc 91       	ld	r31, X
    35a8:	13 97       	sbiw	r26, 0x03	; 3
    35aa:	19 95       	eicall
    35ac:	81 2f       	mov	r24, r17
    35ae:	df 91       	pop	r29
    35b0:	cf 91       	pop	r28
    35b2:	1f 91       	pop	r17
    35b4:	ff 90       	pop	r15
    35b6:	ef 90       	pop	r14
    35b8:	08 95       	ret

000035ba <udc_iface_enable>:
    35ba:	1f 93       	push	r17
    35bc:	cf 93       	push	r28
    35be:	df 93       	push	r29
    35c0:	18 2f       	mov	r17, r24
    35c2:	7f df       	rcall	.-258    	; 0x34c2 <udc_update_iface_desc>
    35c4:	88 23       	and	r24, r24
    35c6:	41 f1       	breq	.+80     	; 0x3618 <udc_iface_enable+0x5e>
    35c8:	c0 91 f6 23 	lds	r28, 0x23F6	; 0x8023f6 <udc_ptr_iface>
    35cc:	d0 91 f7 23 	lds	r29, 0x23F7	; 0x8023f7 <udc_ptr_iface+0x1>
    35d0:	65 e0       	ldi	r22, 0x05	; 5
    35d2:	ce 01       	movw	r24, r28
    35d4:	3b df       	rcall	.-394    	; 0x344c <udc_next_desc_in_iface>
    35d6:	ec 01       	movw	r28, r24
    35d8:	89 2b       	or	r24, r25
    35da:	49 f0       	breq	.+18     	; 0x35ee <udc_iface_enable+0x34>
    35dc:	4c 81       	ldd	r20, Y+4	; 0x04
    35de:	5d 81       	ldd	r21, Y+5	; 0x05
    35e0:	6b 81       	ldd	r22, Y+3	; 0x03
    35e2:	8a 81       	ldd	r24, Y+2	; 0x02
    35e4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <udd_ep_alloc>
    35e8:	81 11       	cpse	r24, r1
    35ea:	f2 cf       	rjmp	.-28     	; 0x35d0 <udc_iface_enable+0x16>
    35ec:	15 c0       	rjmp	.+42     	; 0x3618 <udc_iface_enable+0x5e>
    35ee:	a0 91 f8 23 	lds	r26, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    35f2:	b0 91 f9 23 	lds	r27, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    35f6:	e1 2f       	mov	r30, r17
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	ee 0f       	add	r30, r30
    35fc:	ff 1f       	adc	r31, r31
    35fe:	12 96       	adiw	r26, 0x02	; 2
    3600:	8d 91       	ld	r24, X+
    3602:	9c 91       	ld	r25, X
    3604:	13 97       	sbiw	r26, 0x03	; 3
    3606:	e8 0f       	add	r30, r24
    3608:	f9 1f       	adc	r31, r25
    360a:	01 90       	ld	r0, Z+
    360c:	f0 81       	ld	r31, Z
    360e:	e0 2d       	mov	r30, r0
    3610:	01 90       	ld	r0, Z+
    3612:	f0 81       	ld	r31, Z
    3614:	e0 2d       	mov	r30, r0
    3616:	19 95       	eicall
    3618:	df 91       	pop	r29
    361a:	cf 91       	pop	r28
    361c:	1f 91       	pop	r17
    361e:	08 95       	ret

00003620 <udc_start>:
    3620:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <udd_enable>
    3624:	08 95       	ret

00003626 <udc_reset>:
    3626:	cf 93       	push	r28
    3628:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udc_num_configuration>
    362c:	88 23       	and	r24, r24
    362e:	c1 f0       	breq	.+48     	; 0x3660 <udc_reset+0x3a>
    3630:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3634:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3638:	01 90       	ld	r0, Z+
    363a:	f0 81       	ld	r31, Z
    363c:	e0 2d       	mov	r30, r0
    363e:	84 81       	ldd	r24, Z+4	; 0x04
    3640:	88 23       	and	r24, r24
    3642:	71 f0       	breq	.+28     	; 0x3660 <udc_reset+0x3a>
    3644:	c0 e0       	ldi	r28, 0x00	; 0
    3646:	8c 2f       	mov	r24, r28
    3648:	76 df       	rcall	.-276    	; 0x3536 <udc_iface_disable>
    364a:	cf 5f       	subi	r28, 0xFF	; 255
    364c:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3650:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3654:	01 90       	ld	r0, Z+
    3656:	f0 81       	ld	r31, Z
    3658:	e0 2d       	mov	r30, r0
    365a:	84 81       	ldd	r24, Z+4	; 0x04
    365c:	c8 17       	cp	r28, r24
    365e:	98 f3       	brcs	.-26     	; 0x3646 <udc_reset+0x20>
    3660:	10 92 fa 23 	sts	0x23FA, r1	; 0x8023fa <udc_num_configuration>
    3664:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udc_device_status>
    3668:	81 fd       	sbrc	r24, 1
    366a:	71 d9       	rcall	.-3358   	; 0x294e <usb_callback_remotewakeup_disable>
    366c:	10 92 fe 23 	sts	0x23FE, r1	; 0x8023fe <udc_device_status>
    3670:	10 92 ff 23 	sts	0x23FF, r1	; 0x8023ff <udc_device_status+0x1>
    3674:	cf 91       	pop	r28
    3676:	08 95       	ret

00003678 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    3678:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    367a:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udc_num_configuration>
    367e:	88 23       	and	r24, r24
    3680:	49 f1       	breq	.+82     	; 0x36d4 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3682:	a0 91 f8 23 	lds	r26, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3686:	b0 91 f9 23 	lds	r27, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    368a:	ed 91       	ld	r30, X+
    368c:	fc 91       	ld	r31, X
    368e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3690:	84 81       	ldd	r24, Z+4	; 0x04
    3692:	88 23       	and	r24, r24
    3694:	f9 f0       	breq	.+62     	; 0x36d4 <udc_sof_notify+0x5c>
    3696:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3698:	ec 2f       	mov	r30, r28
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	ee 0f       	add	r30, r30
    369e:	ff 1f       	adc	r31, r31
    36a0:	12 96       	adiw	r26, 0x02	; 2
    36a2:	8d 91       	ld	r24, X+
    36a4:	9c 91       	ld	r25, X
    36a6:	13 97       	sbiw	r26, 0x03	; 3
    36a8:	e8 0f       	add	r30, r24
    36aa:	f9 1f       	adc	r31, r25
    36ac:	01 90       	ld	r0, Z+
    36ae:	f0 81       	ld	r31, Z
    36b0:	e0 2d       	mov	r30, r0
    36b2:	00 84       	ldd	r0, Z+8	; 0x08
    36b4:	f1 85       	ldd	r31, Z+9	; 0x09
    36b6:	e0 2d       	mov	r30, r0
    36b8:	30 97       	sbiw	r30, 0x00	; 0
    36ba:	09 f0       	breq	.+2      	; 0x36be <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    36bc:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    36be:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    36c0:	a0 91 f8 23 	lds	r26, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    36c4:	b0 91 f9 23 	lds	r27, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    36c8:	ed 91       	ld	r30, X+
    36ca:	fc 91       	ld	r31, X
    36cc:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    36ce:	84 81       	ldd	r24, Z+4	; 0x04
    36d0:	c8 17       	cp	r28, r24
    36d2:	10 f3       	brcs	.-60     	; 0x3698 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    36d4:	cf 91       	pop	r28
    36d6:	08 95       	ret

000036d8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    36d8:	0f 93       	push	r16
    36da:	1f 93       	push	r17
    36dc:	cf 93       	push	r28
    36de:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    36e0:	e4 e0       	ldi	r30, 0x04	; 4
    36e2:	f4 e2       	ldi	r31, 0x24	; 36
    36e4:	12 86       	std	Z+10, r1	; 0x0a
    36e6:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    36e8:	14 86       	std	Z+12, r1	; 0x0c
    36ea:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    36ec:	16 86       	std	Z+14, r1	; 0x0e
    36ee:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    36f0:	80 81       	ld	r24, Z
    36f2:	88 23       	and	r24, r24
    36f4:	0c f0       	brlt	.+2      	; 0x36f8 <udc_process_setup+0x20>
    36f6:	95 c2       	rjmp	.+1322   	; 0x3c22 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    36f8:	20 91 0a 24 	lds	r18, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    36fc:	30 91 0b 24 	lds	r19, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3700:	21 15       	cp	r18, r1
    3702:	31 05       	cpc	r19, r1
    3704:	09 f0       	breq	.+2      	; 0x3708 <udc_process_setup+0x30>
    3706:	88 c2       	rjmp	.+1296   	; 0x3c18 <udc_process_setup+0x540>
    3708:	7f c2       	rjmp	.+1278   	; 0x3c08 <udc_process_setup+0x530>
    370a:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    370c:	09 f0       	breq	.+2      	; 0x3710 <udc_process_setup+0x38>
    370e:	ab c0       	rjmp	.+342    	; 0x3866 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3710:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    3714:	96 30       	cpi	r25, 0x06	; 6
    3716:	81 f0       	breq	.+32     	; 0x3738 <udc_process_setup+0x60>
    3718:	98 30       	cpi	r25, 0x08	; 8
    371a:	09 f4       	brne	.+2      	; 0x371e <udc_process_setup+0x46>
    371c:	99 c0       	rjmp	.+306    	; 0x3850 <udc_process_setup+0x178>
    371e:	91 11       	cpse	r25, r1
    3720:	a2 c0       	rjmp	.+324    	; 0x3866 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    3722:	22 30       	cpi	r18, 0x02	; 2
    3724:	31 05       	cpc	r19, r1
    3726:	09 f0       	breq	.+2      	; 0x372a <udc_process_setup+0x52>
    3728:	2b c2       	rjmp	.+1110   	; 0x3b80 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    372a:	62 e0       	ldi	r22, 0x02	; 2
    372c:	70 e0       	ldi	r23, 0x00	; 0
    372e:	8e ef       	ldi	r24, 0xFE	; 254
    3730:	93 e2       	ldi	r25, 0x23	; 35
    3732:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    3736:	7e c2       	rjmp	.+1276   	; 0x3c34 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    3738:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    373c:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    3740:	29 2f       	mov	r18, r25
    3742:	33 27       	eor	r19, r19
    3744:	22 30       	cpi	r18, 0x02	; 2
    3746:	31 05       	cpc	r19, r1
    3748:	b1 f0       	breq	.+44     	; 0x3776 <udc_process_setup+0x9e>
    374a:	20 f4       	brcc	.+8      	; 0x3754 <udc_process_setup+0x7c>
    374c:	21 30       	cpi	r18, 0x01	; 1
    374e:	31 05       	cpc	r19, r1
    3750:	41 f0       	breq	.+16     	; 0x3762 <udc_process_setup+0x8a>
    3752:	d8 c1       	rjmp	.+944    	; 0x3b04 <udc_process_setup+0x42c>
    3754:	23 30       	cpi	r18, 0x03	; 3
    3756:	31 05       	cpc	r19, r1
    3758:	f1 f1       	breq	.+124    	; 0x37d6 <udc_process_setup+0xfe>
    375a:	2f 30       	cpi	r18, 0x0F	; 15
    375c:	31 05       	cpc	r19, r1
    375e:	61 f1       	breq	.+88     	; 0x37b8 <udc_process_setup+0xe0>
    3760:	d1 c1       	rjmp	.+930    	; 0x3b04 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    3762:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <udc_config>
    3766:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    376a:	dc 01       	movw	r26, r24
    376c:	6c 91       	ld	r22, X
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    3774:	5e c0       	rjmp	.+188    	; 0x3832 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    3776:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <udc_config>
    377a:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <udc_config+0x1>
    377e:	21 89       	ldd	r18, Z+17	; 0x11
    3780:	82 17       	cp	r24, r18
    3782:	08 f0       	brcs	.+2      	; 0x3786 <udc_process_setup+0xae>
    3784:	fd c1       	rjmp	.+1018   	; 0x3b80 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    3786:	99 27       	eor	r25, r25
    3788:	88 0f       	add	r24, r24
    378a:	99 1f       	adc	r25, r25
    378c:	88 0f       	add	r24, r24
    378e:	99 1f       	adc	r25, r25
    3790:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config+0x2>
    3794:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x3>
    3798:	e8 0f       	add	r30, r24
    379a:	f9 1f       	adc	r31, r25
    379c:	80 81       	ld	r24, Z
    379e:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    37a0:	fc 01       	movw	r30, r24
    37a2:	62 81       	ldd	r22, Z+2	; 0x02
    37a4:	73 81       	ldd	r23, Z+3	; 0x03
    37a6:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    37aa:	e0 91 0c 24 	lds	r30, 0x240C	; 0x80240c <udd_g_ctrlreq+0x8>
    37ae:	f0 91 0d 24 	lds	r31, 0x240D	; 0x80240d <udd_g_ctrlreq+0x9>
    37b2:	82 e0       	ldi	r24, 0x02	; 2
    37b4:	81 83       	std	Z+1, r24	; 0x01
    37b6:	3d c0       	rjmp	.+122    	; 0x3832 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    37b8:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <udc_config+0x4>
    37bc:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <udc_config+0x5>
    37c0:	00 97       	sbiw	r24, 0x00	; 0
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <udc_process_setup+0xee>
    37c4:	dd c1       	rjmp	.+954    	; 0x3b80 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    37c6:	dc 01       	movw	r26, r24
    37c8:	12 96       	adiw	r26, 0x02	; 2
    37ca:	6d 91       	ld	r22, X+
    37cc:	7c 91       	ld	r23, X
    37ce:	13 97       	sbiw	r26, 0x03	; 3
    37d0:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    37d4:	2e c0       	rjmp	.+92     	; 0x3832 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    37d6:	99 27       	eor	r25, r25
    37d8:	81 30       	cpi	r24, 0x01	; 1
    37da:	91 05       	cpc	r25, r1
    37dc:	99 f0       	breq	.+38     	; 0x3804 <udc_process_setup+0x12c>
    37de:	58 f0       	brcs	.+22     	; 0x37f6 <udc_process_setup+0x11e>
    37e0:	82 30       	cpi	r24, 0x02	; 2
    37e2:	91 05       	cpc	r25, r1
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <udc_process_setup+0x110>
    37e6:	22 c2       	rjmp	.+1092   	; 0x3c2c <udc_process_setup+0x554>
    37e8:	03 97       	sbiw	r24, 0x03	; 3
    37ea:	09 f0       	breq	.+2      	; 0x37ee <udc_process_setup+0x116>
    37ec:	94 c1       	rjmp	.+808    	; 0x3b16 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    37ee:	36 e0       	ldi	r19, 0x06	; 6
		str = udc_get_string_serial_name();
    37f0:	e4 e4       	ldi	r30, 0x44	; 68
    37f2:	f1 e2       	ldi	r31, 0x21	; 33
    37f4:	0a c0       	rjmp	.+20     	; 0x380a <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    37f6:	64 e0       	ldi	r22, 0x04	; 4
    37f8:	70 e0       	ldi	r23, 0x00	; 0
    37fa:	80 ec       	ldi	r24, 0xC0	; 192
    37fc:	90 e2       	ldi	r25, 0x20	; 32
    37fe:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    3802:	17 c0       	rjmp	.+46     	; 0x3832 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    3804:	ef ea       	ldi	r30, 0xAF	; 175
    3806:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    3808:	30 e1       	ldi	r19, 0x10	; 16
    380a:	a0 e8       	ldi	r26, 0x80	; 128
    380c:	b0 e2       	ldi	r27, 0x20	; 32
    380e:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    3810:	81 91       	ld	r24, Z+
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	8d 93       	st	X+, r24
    3816:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    3818:	2f 5f       	subi	r18, 0xFF	; 255
    381a:	23 17       	cp	r18, r19
    381c:	c8 f3       	brcs	.-14     	; 0x3810 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    381e:	63 2f       	mov	r22, r19
    3820:	66 0f       	add	r22, r22
    3822:	6e 5f       	subi	r22, 0xFE	; 254
    3824:	60 93 7e 20 	sts	0x207E, r22	; 0x80207e <udc_string_desc>
		udd_set_setup_payload(
    3828:	70 e0       	ldi	r23, 0x00	; 0
    382a:	8e e7       	ldi	r24, 0x7E	; 126
    382c:	90 e2       	ldi	r25, 0x20	; 32
    382e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    3832:	e4 e0       	ldi	r30, 0x04	; 4
    3834:	f4 e2       	ldi	r31, 0x24	; 36
    3836:	86 81       	ldd	r24, Z+6	; 0x06
    3838:	97 81       	ldd	r25, Z+7	; 0x07
    383a:	22 85       	ldd	r18, Z+10	; 0x0a
    383c:	33 85       	ldd	r19, Z+11	; 0x0b
    383e:	82 17       	cp	r24, r18
    3840:	93 07       	cpc	r25, r19
    3842:	08 f0       	brcs	.+2      	; 0x3846 <udc_process_setup+0x16e>
    3844:	f7 c1       	rjmp	.+1006   	; 0x3c34 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    3846:	80 93 0e 24 	sts	0x240E, r24	; 0x80240e <udd_g_ctrlreq+0xa>
    384a:	90 93 0f 24 	sts	0x240F, r25	; 0x80240f <udd_g_ctrlreq+0xb>
    384e:	f2 c1       	rjmp	.+996    	; 0x3c34 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    3850:	21 30       	cpi	r18, 0x01	; 1
    3852:	31 05       	cpc	r19, r1
    3854:	09 f0       	breq	.+2      	; 0x3858 <udc_process_setup+0x180>
    3856:	94 c1       	rjmp	.+808    	; 0x3b80 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    3858:	61 e0       	ldi	r22, 0x01	; 1
    385a:	70 e0       	ldi	r23, 0x00	; 0
    385c:	8a ef       	ldi	r24, 0xFA	; 250
    385e:	93 e2       	ldi	r25, 0x23	; 35
    3860:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    3864:	e7 c1       	rjmp	.+974    	; 0x3c34 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3866:	81 30       	cpi	r24, 0x01	; 1
    3868:	e9 f5       	brne	.+122    	; 0x38e4 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    386a:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    386e:	9a 30       	cpi	r25, 0x0A	; 10
    3870:	c9 f5       	brne	.+114    	; 0x38e4 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    3872:	21 30       	cpi	r18, 0x01	; 1
    3874:	31 05       	cpc	r19, r1
    3876:	09 f0       	breq	.+2      	; 0x387a <udc_process_setup+0x1a2>
    3878:	53 c1       	rjmp	.+678    	; 0x3b20 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    387a:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udc_num_configuration>
    387e:	88 23       	and	r24, r24
    3880:	09 f4       	brne	.+2      	; 0x3884 <udc_process_setup+0x1ac>
    3882:	4e c1       	rjmp	.+668    	; 0x3b20 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3884:	c0 91 08 24 	lds	r28, 0x2408	; 0x802408 <udd_g_ctrlreq+0x4>
    3888:	d0 91 09 24 	lds	r29, 0x2409	; 0x802409 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    388c:	00 91 f8 23 	lds	r16, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3890:	10 91 f9 23 	lds	r17, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3894:	d8 01       	movw	r26, r16
    3896:	ed 91       	ld	r30, X+
    3898:	fc 91       	ld	r31, X
    389a:	84 81       	ldd	r24, Z+4	; 0x04
    389c:	c8 17       	cp	r28, r24
    389e:	08 f0       	brcs	.+2      	; 0x38a2 <udc_process_setup+0x1ca>
    38a0:	3f c1       	rjmp	.+638    	; 0x3b20 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    38a2:	60 e0       	ldi	r22, 0x00	; 0
    38a4:	8c 2f       	mov	r24, r28
    38a6:	0d de       	rcall	.-998    	; 0x34c2 <udc_update_iface_desc>
    38a8:	88 23       	and	r24, r24
    38aa:	09 f4       	brne	.+2      	; 0x38ae <udc_process_setup+0x1d6>
    38ac:	34 c1       	rjmp	.+616    	; 0x3b16 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    38ae:	ce 01       	movw	r24, r28
    38b0:	99 27       	eor	r25, r25
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	d8 01       	movw	r26, r16
    38b8:	12 96       	adiw	r26, 0x02	; 2
    38ba:	ed 91       	ld	r30, X+
    38bc:	fc 91       	ld	r31, X
    38be:	13 97       	sbiw	r26, 0x03	; 3
    38c0:	e8 0f       	add	r30, r24
    38c2:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    38c4:	01 90       	ld	r0, Z+
    38c6:	f0 81       	ld	r31, Z
    38c8:	e0 2d       	mov	r30, r0
    38ca:	86 81       	ldd	r24, Z+6	; 0x06
    38cc:	97 81       	ldd	r25, Z+7	; 0x07
    38ce:	fc 01       	movw	r30, r24
    38d0:	19 95       	eicall
    38d2:	80 93 fc 23 	sts	0x23FC, r24	; 0x8023fc <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    38d6:	61 e0       	ldi	r22, 0x01	; 1
    38d8:	70 e0       	ldi	r23, 0x00	; 0
    38da:	8c ef       	ldi	r24, 0xFC	; 252
    38dc:	93 e2       	ldi	r25, 0x23	; 35
    38de:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    38e2:	a8 c1       	rjmp	.+848    	; 0x3c34 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    38e4:	82 30       	cpi	r24, 0x02	; 2
    38e6:	09 f0       	breq	.+2      	; 0x38ea <udc_process_setup+0x212>
    38e8:	16 c1       	rjmp	.+556    	; 0x3b16 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    38ea:	80 91 05 24 	lds	r24, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    38ee:	81 11       	cpse	r24, r1
    38f0:	0b c1       	rjmp	.+534    	; 0x3b08 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    38f2:	22 30       	cpi	r18, 0x02	; 2
    38f4:	31 05       	cpc	r19, r1
    38f6:	09 f0       	breq	.+2      	; 0x38fa <udc_process_setup+0x222>
    38f8:	43 c1       	rjmp	.+646    	; 0x3b80 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    38fa:	80 91 08 24 	lds	r24, 0x2408	; 0x802408 <udd_g_ctrlreq+0x4>
    38fe:	0e 94 2d 10 	call	0x205a	; 0x205a <udd_ep_is_halted>
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	80 93 f4 23 	sts	0x23F4, r24	; 0x8023f4 <udc_ep_status.4757>
    3908:	90 93 f5 23 	sts	0x23F5, r25	; 0x8023f5 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    390c:	62 e0       	ldi	r22, 0x02	; 2
    390e:	70 e0       	ldi	r23, 0x00	; 0
    3910:	84 ef       	ldi	r24, 0xF4	; 244
    3912:	93 e2       	ldi	r25, 0x23	; 35
    3914:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    3918:	8d c1       	rjmp	.+794    	; 0x3c34 <udc_process_setup+0x55c>
    391a:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    391c:	09 f0       	breq	.+2      	; 0x3920 <udc_process_setup+0x248>
    391e:	a0 c0       	rjmp	.+320    	; 0x3a60 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3920:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    3924:	93 30       	cpi	r25, 0x03	; 3
    3926:	91 f1       	breq	.+100    	; 0x398c <udc_process_setup+0x2b4>
    3928:	18 f4       	brcc	.+6      	; 0x3930 <udc_process_setup+0x258>
    392a:	91 30       	cpi	r25, 0x01	; 1
    392c:	a9 f0       	breq	.+42     	; 0x3958 <udc_process_setup+0x280>
    392e:	98 c0       	rjmp	.+304    	; 0x3a60 <udc_process_setup+0x388>
    3930:	95 30       	cpi	r25, 0x05	; 5
    3932:	21 f0       	breq	.+8      	; 0x393c <udc_process_setup+0x264>
    3934:	99 30       	cpi	r25, 0x09	; 9
    3936:	09 f4       	brne	.+2      	; 0x393a <udc_process_setup+0x262>
    3938:	43 c0       	rjmp	.+134    	; 0x39c0 <udc_process_setup+0x2e8>
    393a:	92 c0       	rjmp	.+292    	; 0x3a60 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    393c:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3940:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3944:	89 2b       	or	r24, r25
    3946:	09 f0       	breq	.+2      	; 0x394a <udc_process_setup+0x272>
    3948:	1b c1       	rjmp	.+566    	; 0x3b80 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    394a:	8b e5       	ldi	r24, 0x5B	; 91
    394c:	9a e1       	ldi	r25, 0x1A	; 26
    394e:	80 93 10 24 	sts	0x2410, r24	; 0x802410 <udd_g_ctrlreq+0xc>
    3952:	90 93 11 24 	sts	0x2411, r25	; 0x802411 <udd_g_ctrlreq+0xd>
    3956:	6e c1       	rjmp	.+732    	; 0x3c34 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3958:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    395c:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3960:	89 2b       	or	r24, r25
    3962:	09 f0       	breq	.+2      	; 0x3966 <udc_process_setup+0x28e>
    3964:	0d c1       	rjmp	.+538    	; 0x3b80 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    3966:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    396a:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	09 f0       	breq	.+2      	; 0x3974 <udc_process_setup+0x29c>
    3972:	06 c1       	rjmp	.+524    	; 0x3b80 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    3974:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udc_device_status>
    3978:	90 91 ff 23 	lds	r25, 0x23FF	; 0x8023ff <udc_device_status+0x1>
    397c:	8d 7f       	andi	r24, 0xFD	; 253
    397e:	80 93 fe 23 	sts	0x23FE, r24	; 0x8023fe <udc_device_status>
    3982:	90 93 ff 23 	sts	0x23FF, r25	; 0x8023ff <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    3986:	0e 94 a7 14 	call	0x294e	; 0x294e <usb_callback_remotewakeup_disable>
    398a:	54 c1       	rjmp	.+680    	; 0x3c34 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    398c:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3990:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3994:	89 2b       	or	r24, r25
    3996:	09 f0       	breq	.+2      	; 0x399a <udc_process_setup+0x2c2>
    3998:	f3 c0       	rjmp	.+486    	; 0x3b80 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    399a:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    399e:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>
    39a2:	01 97       	sbiw	r24, 0x01	; 1
    39a4:	09 f0       	breq	.+2      	; 0x39a8 <udc_process_setup+0x2d0>
    39a6:	b2 c0       	rjmp	.+356    	; 0x3b0c <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    39a8:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udc_device_status>
    39ac:	90 91 ff 23 	lds	r25, 0x23FF	; 0x8023ff <udc_device_status+0x1>
    39b0:	82 60       	ori	r24, 0x02	; 2
    39b2:	80 93 fe 23 	sts	0x23FE, r24	; 0x8023fe <udc_device_status>
    39b6:	90 93 ff 23 	sts	0x23FF, r25	; 0x8023ff <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    39ba:	0e 94 a6 14 	call	0x294c	; 0x294c <usb_callback_remotewakeup_enable>
    39be:	3a c1       	rjmp	.+628    	; 0x3c34 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    39c0:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    39c4:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    39c8:	89 2b       	or	r24, r25
    39ca:	09 f0       	breq	.+2      	; 0x39ce <udc_process_setup+0x2f6>
    39cc:	d9 c0       	rjmp	.+434    	; 0x3b80 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    39ce:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <udd_getaddress>
    39d2:	88 23       	and	r24, r24
    39d4:	09 f4       	brne	.+2      	; 0x39d8 <udc_process_setup+0x300>
    39d6:	9f c0       	rjmp	.+318    	; 0x3b16 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    39d8:	20 91 06 24 	lds	r18, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    39dc:	30 91 07 24 	lds	r19, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>
    39e0:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    39e2:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <udc_config>
    39e6:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    39ea:	81 89       	ldd	r24, Z+17	; 0x11
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	82 17       	cp	r24, r18
    39f0:	93 07       	cpc	r25, r19
    39f2:	08 f4       	brcc	.+2      	; 0x39f6 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    39f4:	90 c0       	rjmp	.+288    	; 0x3b16 <udc_process_setup+0x43e>
    39f6:	17 de       	rcall	.-978    	; 0x3626 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    39f8:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    39fc:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>
    3a00:	80 93 fa 23 	sts	0x23FA, r24	; 0x8023fa <udc_num_configuration>
	if (udc_num_configuration == 0) {
    3a04:	88 23       	and	r24, r24
    3a06:	09 f4       	brne	.+2      	; 0x3a0a <udc_process_setup+0x332>
    3a08:	15 c1       	rjmp	.+554    	; 0x3c34 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    3a0a:	99 27       	eor	r25, r25
    3a0c:	81 50       	subi	r24, 0x01	; 1
    3a0e:	90 4c       	sbci	r25, 0xC0	; 192
    3a10:	88 0f       	add	r24, r24
    3a12:	99 1f       	adc	r25, r25
    3a14:	88 0f       	add	r24, r24
    3a16:	99 1f       	adc	r25, r25
    3a18:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config+0x2>
    3a1c:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x3>
    3a20:	e8 0f       	add	r30, r24
    3a22:	f9 1f       	adc	r31, r25
    3a24:	e0 93 f8 23 	sts	0x23F8, r30	; 0x8023f8 <udc_ptr_conf>
    3a28:	f0 93 f9 23 	sts	0x23F9, r31	; 0x8023f9 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3a2c:	01 90       	ld	r0, Z+
    3a2e:	f0 81       	ld	r31, Z
    3a30:	e0 2d       	mov	r30, r0
    3a32:	84 81       	ldd	r24, Z+4	; 0x04
    3a34:	88 23       	and	r24, r24
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <udc_process_setup+0x362>
    3a38:	fd c0       	rjmp	.+506    	; 0x3c34 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    3a3a:	c0 e0       	ldi	r28, 0x00	; 0
    3a3c:	60 e0       	ldi	r22, 0x00	; 0
    3a3e:	8c 2f       	mov	r24, r28
    3a40:	bc dd       	rcall	.-1160   	; 0x35ba <udc_iface_enable>
    3a42:	88 23       	and	r24, r24
    3a44:	09 f4       	brne	.+2      	; 0x3a48 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3a46:	67 c0       	rjmp	.+206    	; 0x3b16 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3a48:	cf 5f       	subi	r28, 0xFF	; 255
    3a4a:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3a4e:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3a52:	01 90       	ld	r0, Z+
    3a54:	f0 81       	ld	r31, Z
    3a56:	e0 2d       	mov	r30, r0
    3a58:	84 81       	ldd	r24, Z+4	; 0x04
    3a5a:	c8 17       	cp	r28, r24
    3a5c:	78 f3       	brcs	.-34     	; 0x3a3c <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3a5e:	ea c0       	rjmp	.+468    	; 0x3c34 <udc_process_setup+0x55c>
    3a60:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3a62:	e9 f4       	brne	.+58     	; 0x3a9e <udc_process_setup+0x3c6>
    3a64:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    3a68:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    3a6a:	c9 f4       	brne	.+50     	; 0x3a9e <udc_process_setup+0x3c6>
    3a6c:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3a70:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3a74:	89 2b       	or	r24, r25
    3a76:	09 f0       	breq	.+2      	; 0x3a7a <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    3a78:	53 c0       	rjmp	.+166    	; 0x3b20 <udc_process_setup+0x448>
    3a7a:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udc_num_configuration>
    3a7e:	88 23       	and	r24, r24
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3a82:	4e c0       	rjmp	.+156    	; 0x3b20 <udc_process_setup+0x448>
    3a84:	e4 e0       	ldi	r30, 0x04	; 4
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    3a86:	f4 e2       	ldi	r31, 0x24	; 36

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    3a88:	c4 81       	ldd	r28, Z+4	; 0x04
    3a8a:	d2 81       	ldd	r29, Z+2	; 0x02
    3a8c:	8c 2f       	mov	r24, r28
    3a8e:	53 dd       	rcall	.-1370   	; 0x3536 <udc_iface_disable>
    3a90:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    3a92:	09 f4       	brne	.+2      	; 0x3a96 <udc_process_setup+0x3be>
    3a94:	40 c0       	rjmp	.+128    	; 0x3b16 <udc_process_setup+0x43e>
    3a96:	6d 2f       	mov	r22, r29
    3a98:	8c 2f       	mov	r24, r28
    3a9a:	8f dd       	rcall	.-1250   	; 0x35ba <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3a9c:	3a c0       	rjmp	.+116    	; 0x3b12 <udc_process_setup+0x43a>
    3a9e:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3aa0:	d1 f5       	brne	.+116    	; 0x3b16 <udc_process_setup+0x43e>
    3aa2:	80 91 05 24 	lds	r24, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    3aa6:	81 30       	cpi	r24, 0x01	; 1
    3aa8:	19 f0       	breq	.+6      	; 0x3ab0 <udc_process_setup+0x3d8>
    3aaa:	83 30       	cpi	r24, 0x03	; 3
    3aac:	a1 f0       	breq	.+40     	; 0x3ad6 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3aae:	30 c0       	rjmp	.+96     	; 0x3b10 <udc_process_setup+0x438>
    3ab0:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3ab4:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3ab8:	89 2b       	or	r24, r25
    3aba:	09 f0       	breq	.+2      	; 0x3abe <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3abc:	61 c0       	rjmp	.+194    	; 0x3b80 <udc_process_setup+0x4a8>
    3abe:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    3ac2:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>
    3ac6:	89 2b       	or	r24, r25
    3ac8:	09 f0       	breq	.+2      	; 0x3acc <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3aca:	5a c0       	rjmp	.+180    	; 0x3b80 <udc_process_setup+0x4a8>
    3acc:	80 91 08 24 	lds	r24, 0x2408	; 0x802408 <udd_g_ctrlreq+0x4>
    3ad0:	0e 94 48 10 	call	0x2090	; 0x2090 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3ad4:	1e c0       	rjmp	.+60     	; 0x3b12 <udc_process_setup+0x43a>
    3ad6:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3ada:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3ade:	89 2b       	or	r24, r25
    3ae0:	09 f0       	breq	.+2      	; 0x3ae4 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3ae2:	4e c0       	rjmp	.+156    	; 0x3b80 <udc_process_setup+0x4a8>
    3ae4:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    3ae8:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>
    3aec:	89 2b       	or	r24, r25
    3aee:	09 f0       	breq	.+2      	; 0x3af2 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    3af0:	47 c0       	rjmp	.+142    	; 0x3b80 <udc_process_setup+0x4a8>
    3af2:	c4 e0       	ldi	r28, 0x04	; 4
    3af4:	d4 e2       	ldi	r29, 0x24	; 36
    3af6:	8c 81       	ldd	r24, Y+4	; 0x04
    3af8:	0e 94 4a 11 	call	0x2294	; 0x2294 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3afc:	8c 81       	ldd	r24, Y+4	; 0x04
    3afe:	0e 94 b5 11 	call	0x236a	; 0x236a <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    3b02:	07 c0       	rjmp	.+14     	; 0x3b12 <udc_process_setup+0x43a>
    3b04:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    3b06:	05 c0       	rjmp	.+10     	; 0x3b12 <udc_process_setup+0x43a>
    3b08:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    3b0a:	03 c0       	rjmp	.+6      	; 0x3b12 <udc_process_setup+0x43a>
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    3b0e:	01 c0       	rjmp	.+2      	; 0x3b12 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    3b14:	90 c0       	rjmp	.+288    	; 0x3c36 <udc_process_setup+0x55e>
    3b16:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <udd_g_ctrlreq>
    3b1a:	8f 71       	andi	r24, 0x1F	; 31
    3b1c:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3b1e:	81 f5       	brne	.+96     	; 0x3b80 <udc_process_setup+0x4a8>
    3b20:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udc_num_configuration>
    3b24:	88 23       	and	r24, r24
    3b26:	09 f4       	brne	.+2      	; 0x3b2a <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3b28:	71 c0       	rjmp	.+226    	; 0x3c0c <udc_process_setup+0x534>
    3b2a:	00 91 08 24 	lds	r16, 0x2408	; 0x802408 <udd_g_ctrlreq+0x4>
    3b2e:	10 91 09 24 	lds	r17, 0x2409	; 0x802409 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3b32:	c0 91 f8 23 	lds	r28, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3b36:	d0 91 f9 23 	lds	r29, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3b3a:	e8 81       	ld	r30, Y
    3b3c:	f9 81       	ldd	r31, Y+1	; 0x01
    3b3e:	84 81       	ldd	r24, Z+4	; 0x04
    3b40:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3b42:	08 f0       	brcs	.+2      	; 0x3b46 <udc_process_setup+0x46e>
    3b44:	65 c0       	rjmp	.+202    	; 0x3c10 <udc_process_setup+0x538>
    3b46:	60 e0       	ldi	r22, 0x00	; 0
    3b48:	80 2f       	mov	r24, r16
    3b4a:	bb dc       	rcall	.-1674   	; 0x34c2 <udc_update_iface_desc>
    3b4c:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3b4e:	c1 f0       	breq	.+48     	; 0x3b80 <udc_process_setup+0x4a8>
    3b50:	f8 01       	movw	r30, r16
    3b52:	ff 27       	eor	r31, r31
    3b54:	cf 01       	movw	r24, r30
    3b56:	88 0f       	add	r24, r24
    3b58:	99 1f       	adc	r25, r25
    3b5a:	ea 81       	ldd	r30, Y+2	; 0x02
    3b5c:	fb 81       	ldd	r31, Y+3	; 0x03
    3b5e:	e8 0f       	add	r30, r24
    3b60:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3b62:	c0 81       	ld	r28, Z
    3b64:	d1 81       	ldd	r29, Z+1	; 0x01
    3b66:	ee 81       	ldd	r30, Y+6	; 0x06
    3b68:	ff 81       	ldd	r31, Y+7	; 0x07
    3b6a:	19 95       	eicall
    3b6c:	68 2f       	mov	r22, r24
    3b6e:	80 2f       	mov	r24, r16
    3b70:	a8 dc       	rcall	.-1712   	; 0x34c2 <udc_update_iface_desc>
    3b72:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    3b74:	29 f0       	breq	.+10     	; 0x3b80 <udc_process_setup+0x4a8>
    3b76:	ec 81       	ldd	r30, Y+4	; 0x04
    3b78:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    3b7a:	19 95       	eicall
    3b7c:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    3b7e:	5b c0       	rjmp	.+182    	; 0x3c36 <udc_process_setup+0x55e>
    3b80:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <udd_g_ctrlreq>
    3b84:	8f 71       	andi	r24, 0x1F	; 31
    3b86:	82 30       	cpi	r24, 0x02	; 2
    3b88:	09 f0       	breq	.+2      	; 0x3b8c <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3b8a:	44 c0       	rjmp	.+136    	; 0x3c14 <udc_process_setup+0x53c>
    3b8c:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udc_num_configuration>
    3b90:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3b92:	b1 f1       	breq	.+108    	; 0x3c00 <udc_process_setup+0x528>
    3b94:	a0 91 f8 23 	lds	r26, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3b98:	b0 91 f9 23 	lds	r27, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3b9c:	ed 91       	ld	r30, X+
    3b9e:	fc 91       	ld	r31, X
    3ba0:	11 97       	sbiw	r26, 0x01	; 1
    3ba2:	84 81       	ldd	r24, Z+4	; 0x04
    3ba4:	88 23       	and	r24, r24
    3ba6:	71 f1       	breq	.+92     	; 0x3c04 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    3ba8:	c0 e0       	ldi	r28, 0x00	; 0
    3baa:	ec 2f       	mov	r30, r28
    3bac:	f0 e0       	ldi	r31, 0x00	; 0
    3bae:	ee 0f       	add	r30, r30
    3bb0:	ff 1f       	adc	r31, r31
    3bb2:	12 96       	adiw	r26, 0x02	; 2
    3bb4:	8d 91       	ld	r24, X+
    3bb6:	9c 91       	ld	r25, X
    3bb8:	13 97       	sbiw	r26, 0x03	; 3
    3bba:	e8 0f       	add	r30, r24
    3bbc:	f9 1f       	adc	r31, r25
    3bbe:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3bc0:	11 81       	ldd	r17, Z+1	; 0x01
    3bc2:	d8 01       	movw	r26, r16
    3bc4:	16 96       	adiw	r26, 0x06	; 6
    3bc6:	ed 91       	ld	r30, X+
    3bc8:	fc 91       	ld	r31, X
    3bca:	17 97       	sbiw	r26, 0x07	; 7
    3bcc:	19 95       	eicall
    3bce:	68 2f       	mov	r22, r24
    3bd0:	8c 2f       	mov	r24, r28
    3bd2:	77 dc       	rcall	.-1810   	; 0x34c2 <udc_update_iface_desc>
    3bd4:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    3bd6:	79 f1       	breq	.+94     	; 0x3c36 <udc_process_setup+0x55e>
    3bd8:	d8 01       	movw	r26, r16
    3bda:	14 96       	adiw	r26, 0x04	; 4
    3bdc:	ed 91       	ld	r30, X+
    3bde:	fc 91       	ld	r31, X
    3be0:	15 97       	sbiw	r26, 0x05	; 5
    3be2:	19 95       	eicall
    3be4:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3be6:	27 c0       	rjmp	.+78     	; 0x3c36 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3be8:	cf 5f       	subi	r28, 0xFF	; 255
    3bea:	a0 91 f8 23 	lds	r26, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3bee:	b0 91 f9 23 	lds	r27, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3bf2:	ed 91       	ld	r30, X+
    3bf4:	fc 91       	ld	r31, X
    3bf6:	11 97       	sbiw	r26, 0x01	; 1
    3bf8:	94 81       	ldd	r25, Z+4	; 0x04
    3bfa:	c9 17       	cp	r28, r25
    3bfc:	b0 f2       	brcs	.-84     	; 0x3baa <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    3bfe:	1b c0       	rjmp	.+54     	; 0x3c36 <udc_process_setup+0x55e>
    3c00:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    3c02:	19 c0       	rjmp	.+50     	; 0x3c36 <udc_process_setup+0x55e>
    3c04:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    3c06:	17 c0       	rjmp	.+46     	; 0x3c36 <udc_process_setup+0x55e>
    3c08:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    3c0a:	15 c0       	rjmp	.+42     	; 0x3c36 <udc_process_setup+0x55e>
    3c0c:	80 e0       	ldi	r24, 0x00	; 0
    3c0e:	13 c0       	rjmp	.+38     	; 0x3c36 <udc_process_setup+0x55e>
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	11 c0       	rjmp	.+34     	; 0x3c36 <udc_process_setup+0x55e>
    3c14:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    3c16:	0f c0       	rjmp	.+30     	; 0x3c36 <udc_process_setup+0x55e>
    3c18:	98 2f       	mov	r25, r24
    3c1a:	90 76       	andi	r25, 0x60	; 96
    3c1c:	09 f0       	breq	.+2      	; 0x3c20 <udc_process_setup+0x548>
    3c1e:	7b cf       	rjmp	.-266    	; 0x3b16 <udc_process_setup+0x43e>
    3c20:	74 cd       	rjmp	.-1304   	; 0x370a <udc_process_setup+0x32>
    3c22:	98 2f       	mov	r25, r24
    3c24:	90 76       	andi	r25, 0x60	; 96
    3c26:	09 f0       	breq	.+2      	; 0x3c2a <udc_process_setup+0x552>
    3c28:	76 cf       	rjmp	.-276    	; 0x3b16 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    3c2a:	77 ce       	rjmp	.-786    	; 0x391a <udc_process_setup+0x242>
		str = udc_string_product_name;
    3c2c:	3e e0       	ldi	r19, 0x0E	; 14
    3c2e:	e0 ea       	ldi	r30, 0xA0	; 160
    3c30:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    3c32:	eb cd       	rjmp	.-1066   	; 0x380a <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	df 91       	pop	r29
    3c38:	cf 91       	pop	r28
    3c3a:	1f 91       	pop	r17
    3c3c:	0f 91       	pop	r16
    3c3e:	08 95       	ret

00003c40 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3c40:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    3c44:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3c46:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3c48:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    3c4c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    3c4e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3c52:	08 95       	ret

00003c54 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3c54:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3c56:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3c58:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3c5a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    3c5c:	60 83       	st	Z, r22
	ret                             // Return to caller
    3c5e:	08 95       	ret

00003c60 <__udivmodhi4>:
    3c60:	aa 1b       	sub	r26, r26
    3c62:	bb 1b       	sub	r27, r27
    3c64:	51 e1       	ldi	r21, 0x11	; 17
    3c66:	07 c0       	rjmp	.+14     	; 0x3c76 <__udivmodhi4_ep>

00003c68 <__udivmodhi4_loop>:
    3c68:	aa 1f       	adc	r26, r26
    3c6a:	bb 1f       	adc	r27, r27
    3c6c:	a6 17       	cp	r26, r22
    3c6e:	b7 07       	cpc	r27, r23
    3c70:	10 f0       	brcs	.+4      	; 0x3c76 <__udivmodhi4_ep>
    3c72:	a6 1b       	sub	r26, r22
    3c74:	b7 0b       	sbc	r27, r23

00003c76 <__udivmodhi4_ep>:
    3c76:	88 1f       	adc	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	5a 95       	dec	r21
    3c7c:	a9 f7       	brne	.-22     	; 0x3c68 <__udivmodhi4_loop>
    3c7e:	80 95       	com	r24
    3c80:	90 95       	com	r25
    3c82:	bc 01       	movw	r22, r24
    3c84:	cd 01       	movw	r24, r26
    3c86:	08 95       	ret

00003c88 <__udivmodsi4>:
    3c88:	a1 e2       	ldi	r26, 0x21	; 33
    3c8a:	1a 2e       	mov	r1, r26
    3c8c:	aa 1b       	sub	r26, r26
    3c8e:	bb 1b       	sub	r27, r27
    3c90:	fd 01       	movw	r30, r26
    3c92:	0d c0       	rjmp	.+26     	; 0x3cae <__udivmodsi4_ep>

00003c94 <__udivmodsi4_loop>:
    3c94:	aa 1f       	adc	r26, r26
    3c96:	bb 1f       	adc	r27, r27
    3c98:	ee 1f       	adc	r30, r30
    3c9a:	ff 1f       	adc	r31, r31
    3c9c:	a2 17       	cp	r26, r18
    3c9e:	b3 07       	cpc	r27, r19
    3ca0:	e4 07       	cpc	r30, r20
    3ca2:	f5 07       	cpc	r31, r21
    3ca4:	20 f0       	brcs	.+8      	; 0x3cae <__udivmodsi4_ep>
    3ca6:	a2 1b       	sub	r26, r18
    3ca8:	b3 0b       	sbc	r27, r19
    3caa:	e4 0b       	sbc	r30, r20
    3cac:	f5 0b       	sbc	r31, r21

00003cae <__udivmodsi4_ep>:
    3cae:	66 1f       	adc	r22, r22
    3cb0:	77 1f       	adc	r23, r23
    3cb2:	88 1f       	adc	r24, r24
    3cb4:	99 1f       	adc	r25, r25
    3cb6:	1a 94       	dec	r1
    3cb8:	69 f7       	brne	.-38     	; 0x3c94 <__udivmodsi4_loop>
    3cba:	60 95       	com	r22
    3cbc:	70 95       	com	r23
    3cbe:	80 95       	com	r24
    3cc0:	90 95       	com	r25
    3cc2:	9b 01       	movw	r18, r22
    3cc4:	ac 01       	movw	r20, r24
    3cc6:	bd 01       	movw	r22, r26
    3cc8:	cf 01       	movw	r24, r30
    3cca:	08 95       	ret

00003ccc <__tablejump2__>:
    3ccc:	ee 0f       	add	r30, r30
    3cce:	ff 1f       	adc	r31, r31
    3cd0:	88 1f       	adc	r24, r24
    3cd2:	8b bf       	out	0x3b, r24	; 59
    3cd4:	07 90       	elpm	r0, Z+
    3cd6:	f6 91       	elpm	r31, Z
    3cd8:	e0 2d       	mov	r30, r0
    3cda:	19 94       	eijmp

00003cdc <__umulhisi3>:
    3cdc:	a2 9f       	mul	r26, r18
    3cde:	b0 01       	movw	r22, r0
    3ce0:	b3 9f       	mul	r27, r19
    3ce2:	c0 01       	movw	r24, r0
    3ce4:	a3 9f       	mul	r26, r19
    3ce6:	70 0d       	add	r23, r0
    3ce8:	81 1d       	adc	r24, r1
    3cea:	11 24       	eor	r1, r1
    3cec:	91 1d       	adc	r25, r1
    3cee:	b2 9f       	mul	r27, r18
    3cf0:	70 0d       	add	r23, r0
    3cf2:	81 1d       	adc	r24, r1
    3cf4:	11 24       	eor	r1, r1
    3cf6:	91 1d       	adc	r25, r1
    3cf8:	08 95       	ret

00003cfa <memcpy>:
    3cfa:	fb 01       	movw	r30, r22
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	02 c0       	rjmp	.+4      	; 0x3d04 <memcpy+0xa>
    3d00:	01 90       	ld	r0, Z+
    3d02:	0d 92       	st	X+, r0
    3d04:	41 50       	subi	r20, 0x01	; 1
    3d06:	50 40       	sbci	r21, 0x00	; 0
    3d08:	d8 f7       	brcc	.-10     	; 0x3d00 <memcpy+0x6>
    3d0a:	08 95       	ret

00003d0c <_exit>:
    3d0c:	f8 94       	cli

00003d0e <__stop_program>:
    3d0e:	ff cf       	rjmp	.-2      	; 0x3d0e <__stop_program>
