
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003df4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00802000  00003df4  00003e88  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002ce  0080214c  0080214c  00003fd4  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003fd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00004004  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000718  00000000  00000000  00004048  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012670  00000000  00000000  00004760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000566a  00000000  00000000  00016dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008c66  00000000  00000000  0001c43a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ee8  00000000  00000000  000250a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00039f43  00000000  00000000  00026f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006a54  00000000  00000000  00060ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000770  00000000  00000000  00067920  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c7db  00000000  00000000  00068090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	2a c1       	rjmp	.+596    	; 0x25a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c1       	rjmp	.+592    	; 0x25a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c1       	rjmp	.+588    	; 0x25a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c1       	rjmp	.+584    	; 0x25a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c1       	rjmp	.+576    	; 0x25a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c1       	rjmp	.+572    	; 0x25a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c1       	rjmp	.+568    	; 0x25a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c1       	rjmp	.+560    	; 0x25a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	16 c1       	rjmp	.+556    	; 0x25a <__bad_interrupt>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	12 c1       	rjmp	.+548    	; 0x25a <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c4       	rjmp	.+2444   	; 0x9c6 <__vector_14>
      3a:	00 00       	nop
      3c:	f1 c4       	rjmp	.+2530   	; 0xa20 <__vector_15>
      3e:	00 00       	nop
      40:	1c c5       	rjmp	.+2616   	; 0xa7a <__vector_16>
      42:	00 00       	nop
      44:	47 c5       	rjmp	.+2702   	; 0xad4 <__vector_17>
      46:	00 00       	nop
      48:	72 c5       	rjmp	.+2788   	; 0xb2e <__vector_18>
      4a:	00 00       	nop
      4c:	9d c5       	rjmp	.+2874   	; 0xb88 <__vector_19>
      4e:	00 00       	nop
      50:	c8 c5       	rjmp	.+2960   	; 0xbe2 <__vector_20>
      52:	00 00       	nop
      54:	f3 c5       	rjmp	.+3046   	; 0xc3c <__vector_21>
      56:	00 00       	nop
      58:	1e c6       	rjmp	.+3132   	; 0xc96 <__vector_22>
      5a:	00 00       	nop
      5c:	49 c6       	rjmp	.+3218   	; 0xcf0 <__vector_23>
      5e:	00 00       	nop
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	f8 c0       	rjmp	.+496    	; 0x25a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c0       	rjmp	.+460    	; 0x25a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c0       	rjmp	.+456    	; 0x25a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c0       	rjmp	.+452    	; 0x25a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c0       	rjmp	.+448    	; 0x25a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e8 c1       	rjmp	.+976    	; 0x46e <__vector_39>
      9e:	00 00       	nop
      a0:	18 c2       	rjmp	.+1072   	; 0x4d2 <__vector_40>
      a2:	00 00       	nop
      a4:	48 c2       	rjmp	.+1168   	; 0x536 <__vector_41>
      a6:	00 00       	nop
      a8:	78 c2       	rjmp	.+1264   	; 0x59a <__vector_42>
      aa:	00 00       	nop
      ac:	d6 c0       	rjmp	.+428    	; 0x25a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c0       	rjmp	.+424    	; 0x25a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c0       	rjmp	.+420    	; 0x25a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d0 c0       	rjmp	.+416    	; 0x25a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_47>
      c0:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_48>
      c4:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__vector_49>
      c8:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__vector_50>
      cc:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__vector_51>
      d0:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__vector_52>
      d4:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__vector_53>
      d8:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_54>
      dc:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__vector_55>
      e0:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_56>
      e4:	ba c0       	rjmp	.+372    	; 0x25a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b6 c0       	rjmp	.+364    	; 0x25a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b4 c0       	rjmp	.+360    	; 0x25a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b2 c0       	rjmp	.+356    	; 0x25a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b0 c0       	rjmp	.+352    	; 0x25a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ae c0       	rjmp	.+348    	; 0x25a <__bad_interrupt>
      fe:	00 00       	nop
     100:	ac c0       	rjmp	.+344    	; 0x25a <__bad_interrupt>
     102:	00 00       	nop
     104:	aa c0       	rjmp	.+340    	; 0x25a <__bad_interrupt>
     106:	00 00       	nop
     108:	a8 c0       	rjmp	.+336    	; 0x25a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a6 c0       	rjmp	.+332    	; 0x25a <__bad_interrupt>
     10e:	00 00       	nop
     110:	a4 c0       	rjmp	.+328    	; 0x25a <__bad_interrupt>
     112:	00 00       	nop
     114:	a2 c0       	rjmp	.+324    	; 0x25a <__bad_interrupt>
     116:	00 00       	nop
     118:	a0 c0       	rjmp	.+320    	; 0x25a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e0 c0       	rjmp	.+448    	; 0x2de <__vector_71>
     11e:	00 00       	nop
     120:	10 c1       	rjmp	.+544    	; 0x342 <__vector_72>
     122:	00 00       	nop
     124:	40 c1       	rjmp	.+640    	; 0x3a6 <__vector_73>
     126:	00 00       	nop
     128:	70 c1       	rjmp	.+736    	; 0x40a <__vector_74>
     12a:	00 00       	nop
     12c:	96 c0       	rjmp	.+300    	; 0x25a <__bad_interrupt>
     12e:	00 00       	nop
     130:	94 c0       	rjmp	.+296    	; 0x25a <__bad_interrupt>
     132:	00 00       	nop
     134:	0a c6       	rjmp	.+3092   	; 0xd4a <__vector_77>
     136:	00 00       	nop
     138:	35 c6       	rjmp	.+3178   	; 0xda4 <__vector_78>
     13a:	00 00       	nop
     13c:	60 c6       	rjmp	.+3264   	; 0xdfe <__vector_79>
     13e:	00 00       	nop
     140:	8b c6       	rjmp	.+3350   	; 0xe58 <__vector_80>
     142:	00 00       	nop
     144:	b6 c6       	rjmp	.+3436   	; 0xeb2 <__vector_81>
     146:	00 00       	nop
     148:	e1 c6       	rjmp	.+3522   	; 0xf0c <__vector_82>
     14a:	00 00       	nop
     14c:	0c c7       	rjmp	.+3608   	; 0xf66 <__vector_83>
     14e:	00 00       	nop
     150:	37 c7       	rjmp	.+3694   	; 0xfc0 <__vector_84>
     152:	00 00       	nop
     154:	62 c7       	rjmp	.+3780   	; 0x101a <__vector_85>
     156:	00 00       	nop
     158:	8d c7       	rjmp	.+3866   	; 0x1074 <__vector_86>
     15a:	00 00       	nop
     15c:	7e c0       	rjmp	.+252    	; 0x25a <__bad_interrupt>
     15e:	00 00       	nop
     160:	7c c0       	rjmp	.+248    	; 0x25a <__bad_interrupt>
     162:	00 00       	nop
     164:	7a c0       	rjmp	.+244    	; 0x25a <__bad_interrupt>
     166:	00 00       	nop
     168:	78 c0       	rjmp	.+240    	; 0x25a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	76 c0       	rjmp	.+236    	; 0x25a <__bad_interrupt>
     16e:	00 00       	nop
     170:	74 c0       	rjmp	.+232    	; 0x25a <__bad_interrupt>
     172:	00 00       	nop
     174:	72 c0       	rjmp	.+228    	; 0x25a <__bad_interrupt>
     176:	00 00       	nop
     178:	70 c0       	rjmp	.+224    	; 0x25a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6e c0       	rjmp	.+220    	; 0x25a <__bad_interrupt>
     17e:	00 00       	nop
     180:	6c c0       	rjmp	.+216    	; 0x25a <__bad_interrupt>
     182:	00 00       	nop
     184:	6a c0       	rjmp	.+212    	; 0x25a <__bad_interrupt>
     186:	00 00       	nop
     188:	68 c0       	rjmp	.+208    	; 0x25a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	66 c0       	rjmp	.+204    	; 0x25a <__bad_interrupt>
     18e:	00 00       	nop
     190:	64 c0       	rjmp	.+200    	; 0x25a <__bad_interrupt>
     192:	00 00       	nop
     194:	62 c0       	rjmp	.+196    	; 0x25a <__bad_interrupt>
     196:	00 00       	nop
     198:	60 c0       	rjmp	.+192    	; 0x25a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5e c0       	rjmp	.+188    	; 0x25a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5c c0       	rjmp	.+184    	; 0x25a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5a c0       	rjmp	.+180    	; 0x25a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	58 c0       	rjmp	.+176    	; 0x25a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	56 c0       	rjmp	.+172    	; 0x25a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__vector_108>
     1b4:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__vector_109>
     1b8:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__vector_110>
     1bc:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__vector_111>
     1c0:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_112>
     1c4:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__vector_113>
     1c8:	48 c0       	rjmp	.+144    	; 0x25a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	46 c0       	rjmp	.+140    	; 0x25a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	44 c0       	rjmp	.+136    	; 0x25a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	42 c0       	rjmp	.+132    	; 0x25a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	40 c0       	rjmp	.+128    	; 0x25a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3e c0       	rjmp	.+124    	; 0x25a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3c c0       	rjmp	.+120    	; 0x25a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3a c0       	rjmp	.+116    	; 0x25a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	38 c0       	rjmp	.+112    	; 0x25a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	36 c0       	rjmp	.+108    	; 0x25a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__vector_125>
     1f8:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__vector_126>
     1fc:	b4 0c       	add	r11, r4
     1fe:	b7 0c       	add	r11, r7
     200:	ba 0c       	add	r11, r10
     202:	bd 0c       	add	r11, r13
     204:	c0 0c       	add	r12, r0
     206:	c3 0c       	add	r12, r3
     208:	c6 0c       	add	r12, r6
     20a:	fb 13       	cpse	r31, r27
     20c:	0e 14       	cp	r0, r14
     20e:	21 14       	cp	r2, r1
     210:	34 14       	cp	r3, r4
     212:	47 14       	cp	r4, r7
     214:	5a 14       	cp	r5, r10
     216:	6d 14       	cp	r6, r13

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df e5       	ldi	r29, 0x5F	; 95
     222:	de bf       	out	0x3e, r29	; 62
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e4 ef       	ldi	r30, 0xF4	; 244
     230:	fd e3       	ldi	r31, 0x3D	; 61
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	ac 34       	cpi	r26, 0x4C	; 76
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	24 e2       	ldi	r18, 0x24	; 36
     244:	ac e4       	ldi	r26, 0x4C	; 76
     246:	b1 e2       	ldi	r27, 0x21	; 33
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	aa 31       	cpi	r26, 0x1A	; 26
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 12 15 	call	0x2a24	; 0x2a24 <main>
     256:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     25c:	08 95       	ret

0000025e <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     25e:	81 15       	cp	r24, r1
     260:	22 e0       	ldi	r18, 0x02	; 2
     262:	92 07       	cpc	r25, r18
     264:	69 f4       	brne	.+26     	; 0x280 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     266:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <adca_enable_count>
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	98 0f       	add	r25, r24
     26e:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <adca_enable_count>
     272:	81 11       	cpse	r24, r1
     274:	14 c0       	rjmp	.+40     	; 0x29e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     276:	62 e0       	ldi	r22, 0x02	; 2
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <sysclk_enable_module>
     27e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     280:	80 34       	cpi	r24, 0x40	; 64
     282:	92 40       	sbci	r25, 0x02	; 2
     284:	61 f4       	brne	.+24     	; 0x29e <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     286:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <__data_end>
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	98 0f       	add	r25, r24
     28e:	90 93 4c 21 	sts	0x214C, r25	; 0x80214c <__data_end>
     292:	81 11       	cpse	r24, r1
     294:	04 c0       	rjmp	.+8      	; 0x29e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     296:	62 e0       	ldi	r22, 0x02	; 2
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <sysclk_enable_module>
     29e:	08 95       	ret

000002a0 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     2a0:	81 15       	cp	r24, r1
     2a2:	22 e0       	ldi	r18, 0x02	; 2
     2a4:	92 07       	cpc	r25, r18
     2a6:	61 f4       	brne	.+24     	; 0x2c0 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     2a8:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <adca_enable_count>
     2ac:	81 50       	subi	r24, 0x01	; 1
     2ae:	80 93 4d 21 	sts	0x214D, r24	; 0x80214d <adca_enable_count>
     2b2:	81 11       	cpse	r24, r1
     2b4:	13 c0       	rjmp	.+38     	; 0x2dc <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     2b6:	62 e0       	ldi	r22, 0x02	; 2
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <sysclk_disable_module>
     2be:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     2c0:	80 34       	cpi	r24, 0x40	; 64
     2c2:	92 40       	sbci	r25, 0x02	; 2
     2c4:	59 f4       	brne	.+22     	; 0x2dc <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     2c6:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <__data_end>
     2ca:	81 50       	subi	r24, 0x01	; 1
     2cc:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <__data_end>
     2d0:	81 11       	cpse	r24, r1
     2d2:	04 c0       	rjmp	.+8      	; 0x2dc <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     2d4:	62 e0       	ldi	r22, 0x02	; 2
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <sysclk_disable_module>
     2dc:	08 95       	ret

000002de <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	11 24       	eor	r1, r1
     2e8:	0b b6       	in	r0, 0x3b	; 59
     2ea:	0f 92       	push	r0
     2ec:	2f 93       	push	r18
     2ee:	3f 93       	push	r19
     2f0:	4f 93       	push	r20
     2f2:	5f 93       	push	r21
     2f4:	6f 93       	push	r22
     2f6:	7f 93       	push	r23
     2f8:	8f 93       	push	r24
     2fa:	9f 93       	push	r25
     2fc:	af 93       	push	r26
     2fe:	bf 93       	push	r27
     300:	ef 93       	push	r30
     302:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     304:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     308:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     30c:	e0 91 02 24 	lds	r30, 0x2402	; 0x802402 <adca_callback>
     310:	f0 91 03 24 	lds	r31, 0x2403	; 0x802403 <adca_callback+0x1>
     314:	61 e0       	ldi	r22, 0x01	; 1
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	19 95       	eicall
}
     31c:	ff 91       	pop	r31
     31e:	ef 91       	pop	r30
     320:	bf 91       	pop	r27
     322:	af 91       	pop	r26
     324:	9f 91       	pop	r25
     326:	8f 91       	pop	r24
     328:	7f 91       	pop	r23
     32a:	6f 91       	pop	r22
     32c:	5f 91       	pop	r21
     32e:	4f 91       	pop	r20
     330:	3f 91       	pop	r19
     332:	2f 91       	pop	r18
     334:	0f 90       	pop	r0
     336:	0b be       	out	0x3b, r0	; 59
     338:	0f 90       	pop	r0
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	0f 90       	pop	r0
     33e:	1f 90       	pop	r1
     340:	18 95       	reti

00000342 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     342:	1f 92       	push	r1
     344:	0f 92       	push	r0
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	0f 92       	push	r0
     34a:	11 24       	eor	r1, r1
     34c:	0b b6       	in	r0, 0x3b	; 59
     34e:	0f 92       	push	r0
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	ef 93       	push	r30
     366:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     368:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     36c:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     370:	e0 91 02 24 	lds	r30, 0x2402	; 0x802402 <adca_callback>
     374:	f0 91 03 24 	lds	r31, 0x2403	; 0x802403 <adca_callback+0x1>
     378:	62 e0       	ldi	r22, 0x02	; 2
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	19 95       	eicall
}
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	bf 91       	pop	r27
     386:	af 91       	pop	r26
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	7f 91       	pop	r23
     38e:	6f 91       	pop	r22
     390:	5f 91       	pop	r21
     392:	4f 91       	pop	r20
     394:	3f 91       	pop	r19
     396:	2f 91       	pop	r18
     398:	0f 90       	pop	r0
     39a:	0b be       	out	0x3b, r0	; 59
     39c:	0f 90       	pop	r0
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	0b b6       	in	r0, 0x3b	; 59
     3b2:	0f 92       	push	r0
     3b4:	2f 93       	push	r18
     3b6:	3f 93       	push	r19
     3b8:	4f 93       	push	r20
     3ba:	5f 93       	push	r21
     3bc:	6f 93       	push	r22
     3be:	7f 93       	push	r23
     3c0:	8f 93       	push	r24
     3c2:	9f 93       	push	r25
     3c4:	af 93       	push	r26
     3c6:	bf 93       	push	r27
     3c8:	ef 93       	push	r30
     3ca:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     3cc:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     3d0:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     3d4:	e0 91 02 24 	lds	r30, 0x2402	; 0x802402 <adca_callback>
     3d8:	f0 91 03 24 	lds	r31, 0x2403	; 0x802403 <adca_callback+0x1>
     3dc:	64 e0       	ldi	r22, 0x04	; 4
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	19 95       	eicall
}
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	bf 91       	pop	r27
     3ea:	af 91       	pop	r26
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	7f 91       	pop	r23
     3f2:	6f 91       	pop	r22
     3f4:	5f 91       	pop	r21
     3f6:	4f 91       	pop	r20
     3f8:	3f 91       	pop	r19
     3fa:	2f 91       	pop	r18
     3fc:	0f 90       	pop	r0
     3fe:	0b be       	out	0x3b, r0	; 59
     400:	0f 90       	pop	r0
     402:	0f be       	out	0x3f, r0	; 63
     404:	0f 90       	pop	r0
     406:	1f 90       	pop	r1
     408:	18 95       	reti

0000040a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	0b b6       	in	r0, 0x3b	; 59
     416:	0f 92       	push	r0
     418:	2f 93       	push	r18
     41a:	3f 93       	push	r19
     41c:	4f 93       	push	r20
     41e:	5f 93       	push	r21
     420:	6f 93       	push	r22
     422:	7f 93       	push	r23
     424:	8f 93       	push	r24
     426:	9f 93       	push	r25
     428:	af 93       	push	r26
     42a:	bf 93       	push	r27
     42c:	ef 93       	push	r30
     42e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     430:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     434:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     438:	e0 91 02 24 	lds	r30, 0x2402	; 0x802402 <adca_callback>
     43c:	f0 91 03 24 	lds	r31, 0x2403	; 0x802403 <adca_callback+0x1>
     440:	68 e0       	ldi	r22, 0x08	; 8
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	19 95       	eicall
}
     448:	ff 91       	pop	r31
     44a:	ef 91       	pop	r30
     44c:	bf 91       	pop	r27
     44e:	af 91       	pop	r26
     450:	9f 91       	pop	r25
     452:	8f 91       	pop	r24
     454:	7f 91       	pop	r23
     456:	6f 91       	pop	r22
     458:	5f 91       	pop	r21
     45a:	4f 91       	pop	r20
     45c:	3f 91       	pop	r19
     45e:	2f 91       	pop	r18
     460:	0f 90       	pop	r0
     462:	0b be       	out	0x3b, r0	; 59
     464:	0f 90       	pop	r0
     466:	0f be       	out	0x3f, r0	; 63
     468:	0f 90       	pop	r0
     46a:	1f 90       	pop	r1
     46c:	18 95       	reti

0000046e <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     46e:	1f 92       	push	r1
     470:	0f 92       	push	r0
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	0f 92       	push	r0
     476:	11 24       	eor	r1, r1
     478:	0b b6       	in	r0, 0x3b	; 59
     47a:	0f 92       	push	r0
     47c:	2f 93       	push	r18
     47e:	3f 93       	push	r19
     480:	4f 93       	push	r20
     482:	5f 93       	push	r21
     484:	6f 93       	push	r22
     486:	7f 93       	push	r23
     488:	8f 93       	push	r24
     48a:	9f 93       	push	r25
     48c:	af 93       	push	r26
     48e:	bf 93       	push	r27
     490:	ef 93       	push	r30
     492:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     494:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     498:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     49c:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <adcb_callback>
     4a0:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <adcb_callback+0x1>
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	80 e4       	ldi	r24, 0x40	; 64
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	19 95       	eicall
}
     4ac:	ff 91       	pop	r31
     4ae:	ef 91       	pop	r30
     4b0:	bf 91       	pop	r27
     4b2:	af 91       	pop	r26
     4b4:	9f 91       	pop	r25
     4b6:	8f 91       	pop	r24
     4b8:	7f 91       	pop	r23
     4ba:	6f 91       	pop	r22
     4bc:	5f 91       	pop	r21
     4be:	4f 91       	pop	r20
     4c0:	3f 91       	pop	r19
     4c2:	2f 91       	pop	r18
     4c4:	0f 90       	pop	r0
     4c6:	0b be       	out	0x3b, r0	; 59
     4c8:	0f 90       	pop	r0
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	0f 90       	pop	r0
     4ce:	1f 90       	pop	r1
     4d0:	18 95       	reti

000004d2 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	0b b6       	in	r0, 0x3b	; 59
     4de:	0f 92       	push	r0
     4e0:	2f 93       	push	r18
     4e2:	3f 93       	push	r19
     4e4:	4f 93       	push	r20
     4e6:	5f 93       	push	r21
     4e8:	6f 93       	push	r22
     4ea:	7f 93       	push	r23
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	af 93       	push	r26
     4f2:	bf 93       	push	r27
     4f4:	ef 93       	push	r30
     4f6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     4f8:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     4fc:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     500:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <adcb_callback>
     504:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <adcb_callback+0x1>
     508:	62 e0       	ldi	r22, 0x02	; 2
     50a:	80 e4       	ldi	r24, 0x40	; 64
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	19 95       	eicall
}
     510:	ff 91       	pop	r31
     512:	ef 91       	pop	r30
     514:	bf 91       	pop	r27
     516:	af 91       	pop	r26
     518:	9f 91       	pop	r25
     51a:	8f 91       	pop	r24
     51c:	7f 91       	pop	r23
     51e:	6f 91       	pop	r22
     520:	5f 91       	pop	r21
     522:	4f 91       	pop	r20
     524:	3f 91       	pop	r19
     526:	2f 91       	pop	r18
     528:	0f 90       	pop	r0
     52a:	0b be       	out	0x3b, r0	; 59
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0
     532:	1f 90       	pop	r1
     534:	18 95       	reti

00000536 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     536:	1f 92       	push	r1
     538:	0f 92       	push	r0
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	0f 92       	push	r0
     53e:	11 24       	eor	r1, r1
     540:	0b b6       	in	r0, 0x3b	; 59
     542:	0f 92       	push	r0
     544:	2f 93       	push	r18
     546:	3f 93       	push	r19
     548:	4f 93       	push	r20
     54a:	5f 93       	push	r21
     54c:	6f 93       	push	r22
     54e:	7f 93       	push	r23
     550:	8f 93       	push	r24
     552:	9f 93       	push	r25
     554:	af 93       	push	r26
     556:	bf 93       	push	r27
     558:	ef 93       	push	r30
     55a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     55c:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     560:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     564:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <adcb_callback>
     568:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <adcb_callback+0x1>
     56c:	64 e0       	ldi	r22, 0x04	; 4
     56e:	80 e4       	ldi	r24, 0x40	; 64
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	19 95       	eicall
}
     574:	ff 91       	pop	r31
     576:	ef 91       	pop	r30
     578:	bf 91       	pop	r27
     57a:	af 91       	pop	r26
     57c:	9f 91       	pop	r25
     57e:	8f 91       	pop	r24
     580:	7f 91       	pop	r23
     582:	6f 91       	pop	r22
     584:	5f 91       	pop	r21
     586:	4f 91       	pop	r20
     588:	3f 91       	pop	r19
     58a:	2f 91       	pop	r18
     58c:	0f 90       	pop	r0
     58e:	0b be       	out	0x3b, r0	; 59
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     59a:	1f 92       	push	r1
     59c:	0f 92       	push	r0
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	0f 92       	push	r0
     5a2:	11 24       	eor	r1, r1
     5a4:	0b b6       	in	r0, 0x3b	; 59
     5a6:	0f 92       	push	r0
     5a8:	2f 93       	push	r18
     5aa:	3f 93       	push	r19
     5ac:	4f 93       	push	r20
     5ae:	5f 93       	push	r21
     5b0:	6f 93       	push	r22
     5b2:	7f 93       	push	r23
     5b4:	8f 93       	push	r24
     5b6:	9f 93       	push	r25
     5b8:	af 93       	push	r26
     5ba:	bf 93       	push	r27
     5bc:	ef 93       	push	r30
     5be:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     5c0:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     5c4:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     5c8:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <adcb_callback>
     5cc:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <adcb_callback+0x1>
     5d0:	68 e0       	ldi	r22, 0x08	; 8
     5d2:	80 e4       	ldi	r24, 0x40	; 64
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	19 95       	eicall
}
     5d8:	ff 91       	pop	r31
     5da:	ef 91       	pop	r30
     5dc:	bf 91       	pop	r27
     5de:	af 91       	pop	r26
     5e0:	9f 91       	pop	r25
     5e2:	8f 91       	pop	r24
     5e4:	7f 91       	pop	r23
     5e6:	6f 91       	pop	r22
     5e8:	5f 91       	pop	r21
     5ea:	4f 91       	pop	r20
     5ec:	3f 91       	pop	r19
     5ee:	2f 91       	pop	r18
     5f0:	0f 90       	pop	r0
     5f2:	0b be       	out	0x3b, r0	; 59
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     5fe:	bf 92       	push	r11
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	1f 92       	push	r1
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	8c 01       	movw	r16, r24
     618:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     61a:	01 15       	cp	r16, r1
     61c:	22 e0       	ldi	r18, 0x02	; 2
     61e:	12 07       	cpc	r17, r18
     620:	81 f4       	brne	.+32     	; 0x642 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     622:	61 e2       	ldi	r22, 0x21	; 33
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     62c:	c8 2e       	mov	r12, r24
     62e:	d1 2c       	mov	r13, r1
     630:	60 e2       	ldi	r22, 0x20	; 32
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <nvm_read_byte>
		data <<= 8;
     63a:	dc 2c       	mov	r13, r12
     63c:	cc 24       	eor	r12, r12
		data |= nvm_read_production_signature_row(ADCACAL0);
     63e:	c8 2a       	or	r12, r24
     640:	12 c0       	rjmp	.+36     	; 0x666 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     642:	80 34       	cpi	r24, 0x40	; 64
     644:	92 40       	sbci	r25, 0x02	; 2
     646:	d1 f5       	brne	.+116    	; 0x6bc <adc_write_configuration+0xbe>
     648:	65 e2       	ldi	r22, 0x25	; 37
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     652:	c8 2e       	mov	r12, r24
     654:	d1 2c       	mov	r13, r1
     656:	64 e2       	ldi	r22, 0x24	; 36
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <nvm_read_byte>
		data <<= 8;
     660:	dc 2c       	mov	r13, r12
     662:	cc 24       	eor	r12, r12
		data |= nvm_read_production_signature_row(ADCBCAL0);
     664:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     666:	8f b7       	in	r24, 0x3f	; 63
     668:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     66a:	f8 94       	cli
	return flags;
     66c:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     66e:	c8 01       	movw	r24, r16
     670:	f6 dd       	rcall	.-1044   	; 0x25e <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     672:	f8 01       	movw	r30, r16
     674:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     676:	92 e0       	ldi	r25, 0x02	; 2
     678:	90 83       	st	Z, r25
	adc->CAL = cal;
     67a:	c4 86       	std	Z+12, r12	; 0x0c
     67c:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     67e:	f7 01       	movw	r30, r14
     680:	25 81       	ldd	r18, Z+5	; 0x05
     682:	36 81       	ldd	r19, Z+6	; 0x06
     684:	f8 01       	movw	r30, r16
     686:	20 8f       	std	Z+24, r18	; 0x18
     688:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     68a:	f7 01       	movw	r30, r14
     68c:	92 81       	ldd	r25, Z+2	; 0x02
     68e:	f8 01       	movw	r30, r16
     690:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     692:	f7 01       	movw	r30, r14
     694:	94 81       	ldd	r25, Z+4	; 0x04
     696:	f8 01       	movw	r30, r16
     698:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     69a:	f7 01       	movw	r30, r14
     69c:	93 81       	ldd	r25, Z+3	; 0x03
     69e:	f8 01       	movw	r30, r16
     6a0:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     6a2:	f7 01       	movw	r30, r14
     6a4:	91 81       	ldd	r25, Z+1	; 0x01
     6a6:	f8 01       	movw	r30, r16
     6a8:	91 83       	std	Z+1, r25	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
     6aa:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
     6ac:	f7 01       	movw	r30, r14
     6ae:	90 81       	ld	r25, Z
     6b0:	89 2b       	or	r24, r25
     6b2:	f8 01       	movw	r30, r16
     6b4:	80 83       	st	Z, r24

	adc_disable_clock(adc);
     6b6:	c8 01       	movw	r24, r16
     6b8:	f3 dd       	rcall	.-1050   	; 0x2a0 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     6ba:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
     6bc:	0f 90       	pop	r0
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	bf 90       	pop	r11
     6d0:	08 95       	ret

000006d2 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	1f 92       	push	r1
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	8c 01       	movw	r16, r24
     6e8:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     6ea:	8f b7       	in	r24, 0x3f	; 63
     6ec:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     6ee:	f8 94       	cli
	return flags;
     6f0:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     6f2:	c8 01       	movw	r24, r16
     6f4:	b4 dd       	rcall	.-1176   	; 0x25e <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     6f6:	f8 01       	movw	r30, r16
     6f8:	80 81       	ld	r24, Z
     6fa:	80 7c       	andi	r24, 0xC0	; 192
     6fc:	f7 01       	movw	r30, r14
     6fe:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     700:	f8 01       	movw	r30, r16
     702:	80 8d       	ldd	r24, Z+24	; 0x18
     704:	91 8d       	ldd	r25, Z+25	; 0x19
     706:	f7 01       	movw	r30, r14
     708:	85 83       	std	Z+5, r24	; 0x05
     70a:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     70c:	f8 01       	movw	r30, r16
     70e:	82 81       	ldd	r24, Z+2	; 0x02
     710:	f7 01       	movw	r30, r14
     712:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     714:	f8 01       	movw	r30, r16
     716:	84 81       	ldd	r24, Z+4	; 0x04
     718:	f7 01       	movw	r30, r14
     71a:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     71c:	f8 01       	movw	r30, r16
     71e:	83 81       	ldd	r24, Z+3	; 0x03
     720:	f7 01       	movw	r30, r14
     722:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     724:	f8 01       	movw	r30, r16
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	f7 01       	movw	r30, r14
     72a:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
     72c:	c8 01       	movw	r24, r16
     72e:	b8 dd       	rcall	.-1168   	; 0x2a0 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     730:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     732:	0f 90       	pop	r0
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	08 95       	ret

00000744 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	6c 01       	movw	r12, r24
     760:	b6 2e       	mov	r11, r22
     762:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     764:	86 2f       	mov	r24, r22
     766:	83 70       	andi	r24, 0x03	; 3
     768:	29 f4       	brne	.+10     	; 0x774 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     76a:	96 2f       	mov	r25, r22
     76c:	96 95       	lsr	r25
     76e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	02 c0       	rjmp	.+4      	; 0x778 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     774:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     776:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     778:	90 ff       	sbrs	r25, 0
		index++;
     77a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     77c:	86 01       	movw	r16, r12
     77e:	00 5e       	subi	r16, 0xE0	; 224
     780:	1f 4f       	sbci	r17, 0xFF	; 255
     782:	98 e0       	ldi	r25, 0x08	; 8
     784:	89 9f       	mul	r24, r25
     786:	00 0d       	add	r16, r0
     788:	11 1d       	adc	r17, r1
     78a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     78c:	8f b7       	in	r24, 0x3f	; 63
     78e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     790:	f8 94       	cli
	return flags;
     792:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     794:	c6 01       	movw	r24, r12
     796:	63 dd       	rcall	.-1338   	; 0x25e <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     798:	f7 01       	movw	r30, r14
     79a:	80 81       	ld	r24, Z
     79c:	f8 01       	movw	r30, r16
     79e:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     7a0:	f7 01       	movw	r30, r14
     7a2:	82 81       	ldd	r24, Z+2	; 0x02
     7a4:	f8 01       	movw	r30, r16
     7a6:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     7a8:	f7 01       	movw	r30, r14
     7aa:	81 81       	ldd	r24, Z+1	; 0x01
     7ac:	f8 01       	movw	r30, r16
     7ae:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     7b0:	b0 fe       	sbrs	r11, 0
     7b2:	04 c0       	rjmp	.+8      	; 0x7bc <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     7b4:	f7 01       	movw	r30, r14
     7b6:	83 81       	ldd	r24, Z+3	; 0x03
     7b8:	f8 01       	movw	r30, r16
     7ba:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
     7bc:	c6 01       	movw	r24, r12
     7be:	70 dd       	rcall	.-1312   	; 0x2a0 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7c0:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	df 90       	pop	r13
     7d2:	cf 90       	pop	r12
     7d4:	bf 90       	pop	r11
     7d6:	af 90       	pop	r10
     7d8:	08 95       	ret

000007da <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	1f 92       	push	r1
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	6c 01       	movw	r12, r24
     7f6:	b6 2e       	mov	r11, r22
     7f8:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     7fa:	86 2f       	mov	r24, r22
     7fc:	83 70       	andi	r24, 0x03	; 3
     7fe:	29 f4       	brne	.+10     	; 0x80a <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     800:	96 2f       	mov	r25, r22
     802:	96 95       	lsr	r25
     804:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	02 c0       	rjmp	.+4      	; 0x80e <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     80a:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     80c:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     80e:	90 ff       	sbrs	r25, 0
		index++;
     810:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     812:	86 01       	movw	r16, r12
     814:	00 5e       	subi	r16, 0xE0	; 224
     816:	1f 4f       	sbci	r17, 0xFF	; 255
     818:	98 e0       	ldi	r25, 0x08	; 8
     81a:	89 9f       	mul	r24, r25
     81c:	00 0d       	add	r16, r0
     81e:	11 1d       	adc	r17, r1
     820:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     822:	8f b7       	in	r24, 0x3f	; 63
     824:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     826:	f8 94       	cli
	return flags;
     828:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     82a:	c6 01       	movw	r24, r12
     82c:	18 dd       	rcall	.-1488   	; 0x25e <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     82e:	f8 01       	movw	r30, r16
     830:	80 81       	ld	r24, Z
     832:	f7 01       	movw	r30, r14
     834:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     836:	f8 01       	movw	r30, r16
     838:	82 81       	ldd	r24, Z+2	; 0x02
     83a:	f7 01       	movw	r30, r14
     83c:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     83e:	f8 01       	movw	r30, r16
     840:	81 81       	ldd	r24, Z+1	; 0x01
     842:	f7 01       	movw	r30, r14
     844:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     846:	b0 fe       	sbrs	r11, 0
     848:	04 c0       	rjmp	.+8      	; 0x852 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     84a:	f8 01       	movw	r30, r16
     84c:	86 81       	ldd	r24, Z+6	; 0x06
     84e:	f7 01       	movw	r30, r14
     850:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
     852:	c6 01       	movw	r24, r12
     854:	25 dd       	rcall	.-1462   	; 0x2a0 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     856:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	af 90       	pop	r10
     86e:	08 95       	ret

00000870 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
     870:	80 32       	cpi	r24, 0x20	; 32
     872:	93 40       	sbci	r25, 0x03	; 3
     874:	61 f4       	brne	.+24     	; 0x88e <dac_enable_clock+0x1e>
     876:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <dacb_enable_count>
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	98 0f       	add	r25, r24
     87e:	90 93 4e 21 	sts	0x214E, r25	; 0x80214e <dacb_enable_count>
     882:	81 11       	cpse	r24, r1
     884:	04 c0       	rjmp	.+8      	; 0x88e <dac_enable_clock+0x1e>
     886:	64 e0       	ldi	r22, 0x04	; 4
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <sysclk_enable_module>
     88e:	08 95       	ret

00000890 <dac_disable_clock>:
     890:	80 32       	cpi	r24, 0x20	; 32
     892:	93 40       	sbci	r25, 0x03	; 3
     894:	59 f4       	brne	.+22     	; 0x8ac <dac_disable_clock+0x1c>
     896:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <dacb_enable_count>
     89a:	81 50       	subi	r24, 0x01	; 1
     89c:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <dacb_enable_count>
     8a0:	81 11       	cpse	r24, r1
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <dac_disable_clock+0x1c>
     8a4:	64 e0       	ldi	r22, 0x04	; 4
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <sysclk_disable_module>
     8ac:	08 95       	ret

000008ae <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
     8ae:	9f 92       	push	r9
     8b0:	af 92       	push	r10
     8b2:	bf 92       	push	r11
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	1f 92       	push	r1
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
     8ca:	80 32       	cpi	r24, 0x20	; 32
     8cc:	23 e0       	ldi	r18, 0x03	; 3
     8ce:	92 07       	cpc	r25, r18
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <dac_write_configuration+0x26>
     8d2:	3d c0       	rjmp	.+122    	; 0x94e <dac_write_configuration+0xa0>
     8d4:	7b 01       	movw	r14, r22
     8d6:	8c 01       	movw	r16, r24
     8d8:	63 e3       	ldi	r22, 0x33	; 51
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <nvm_read_byte>
     8e2:	98 2e       	mov	r9, r24
     8e4:	62 e3       	ldi	r22, 0x32	; 50
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <nvm_read_byte>
     8ee:	a8 2e       	mov	r10, r24
     8f0:	67 e3       	ldi	r22, 0x37	; 55
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <nvm_read_byte>
     8fa:	b8 2e       	mov	r11, r24
     8fc:	66 e3       	ldi	r22, 0x36	; 54
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <nvm_read_byte>
     906:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     908:	8f b7       	in	r24, 0x3f	; 63
     90a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     90c:	f8 94       	cli
	return flags;
     90e:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     910:	c8 01       	movw	r24, r16
     912:	ae df       	rcall	.-164    	; 0x870 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
     914:	f8 01       	movw	r30, r16
     916:	90 81       	ld	r25, Z
	dac->CTRLA = 0;
     918:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
     91a:	f7 01       	movw	r30, r14
     91c:	81 81       	ldd	r24, Z+1	; 0x01
     91e:	f8 01       	movw	r30, r16
     920:	81 83       	std	Z+1, r24	; 0x01
	dac->CTRLC = conf->ctrlc;
     922:	f7 01       	movw	r30, r14
     924:	82 81       	ldd	r24, Z+2	; 0x02
     926:	f8 01       	movw	r30, r16
     928:	82 83       	std	Z+2, r24	; 0x02
	dac->EVCTRL = conf->evctrl;
     92a:	f7 01       	movw	r30, r14
     92c:	83 81       	ldd	r24, Z+3	; 0x03
     92e:	f8 01       	movw	r30, r16
     930:	83 83       	std	Z+3, r24	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
     932:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
     934:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
     936:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
     938:	c3 86       	std	Z+11, r12	; 0x0b

	flags = cpu_irq_save();
	dac_enable_clock(dac);

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
     93a:	89 2f       	mov	r24, r25
     93c:	81 70       	andi	r24, 0x01	; 1
	dac->CH0OFFSETCAL = offsetcal0;
	dac->CH1GAINCAL = gaincal1;
	dac->CH1OFFSETCAL = offsetcal1;
#endif

	dac->CTRLA = conf->ctrla | enable;
     93e:	f7 01       	movw	r30, r14
     940:	90 81       	ld	r25, Z
     942:	89 2b       	or	r24, r25
     944:	f8 01       	movw	r30, r16
     946:	80 83       	st	Z, r24

	dac_disable_clock(dac);
     948:	c8 01       	movw	r24, r16
     94a:	a2 df       	rcall	.-188    	; 0x890 <dac_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     94c:	df be       	out	0x3f, r13	; 63
	cpu_irq_restore(flags);
}
     94e:	0f 90       	pop	r0
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	ff 90       	pop	r15
     95a:	ef 90       	pop	r14
     95c:	df 90       	pop	r13
     95e:	cf 90       	pop	r12
     960:	bf 90       	pop	r11
     962:	af 90       	pop	r10
     964:	9f 90       	pop	r9
     966:	08 95       	ret

00000968 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	1f 92       	push	r1
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	8c 01       	movw	r16, r24
     97e:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     980:	8f b7       	in	r24, 0x3f	; 63
     982:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     984:	f8 94       	cli
	return flags;
     986:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     988:	c8 01       	movw	r24, r16
     98a:	72 df       	rcall	.-284    	; 0x870 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
     98c:	f8 01       	movw	r30, r16
     98e:	80 81       	ld	r24, Z
     990:	8e 7f       	andi	r24, 0xFE	; 254
     992:	f7 01       	movw	r30, r14
     994:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
     996:	f8 01       	movw	r30, r16
     998:	81 81       	ldd	r24, Z+1	; 0x01
     99a:	f7 01       	movw	r30, r14
     99c:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
     99e:	f8 01       	movw	r30, r16
     9a0:	82 81       	ldd	r24, Z+2	; 0x02
     9a2:	f7 01       	movw	r30, r14
     9a4:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
     9a6:	f8 01       	movw	r30, r16
     9a8:	83 81       	ldd	r24, Z+3	; 0x03
     9aa:	f7 01       	movw	r30, r14
     9ac:	83 83       	std	Z+3, r24	; 0x03

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
     9ae:	c8 01       	movw	r24, r16
     9b0:	6f df       	rcall	.-290    	; 0x890 <dac_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9b2:	df be       	out	0x3f, r13	; 63
	cpu_irq_restore(flags);
}
     9b4:	0f 90       	pop	r0
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	df 90       	pop	r13
     9c4:	08 95       	ret

000009c6 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     9c6:	1f 92       	push	r1
     9c8:	0f 92       	push	r0
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	0f 92       	push	r0
     9ce:	11 24       	eor	r1, r1
     9d0:	0b b6       	in	r0, 0x3b	; 59
     9d2:	0f 92       	push	r0
     9d4:	2f 93       	push	r18
     9d6:	3f 93       	push	r19
     9d8:	4f 93       	push	r20
     9da:	5f 93       	push	r21
     9dc:	6f 93       	push	r22
     9de:	7f 93       	push	r23
     9e0:	8f 93       	push	r24
     9e2:	9f 93       	push	r25
     9e4:	af 93       	push	r26
     9e6:	bf 93       	push	r27
     9e8:	ef 93       	push	r30
     9ea:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     9ec:	e0 91 95 21 	lds	r30, 0x2195	; 0x802195 <tc_tcc0_ovf_callback>
     9f0:	f0 91 96 21 	lds	r31, 0x2196	; 0x802196 <tc_tcc0_ovf_callback+0x1>
     9f4:	30 97       	sbiw	r30, 0x00	; 0
     9f6:	09 f0       	breq	.+2      	; 0x9fa <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     9f8:	19 95       	eicall
	}
}
     9fa:	ff 91       	pop	r31
     9fc:	ef 91       	pop	r30
     9fe:	bf 91       	pop	r27
     a00:	af 91       	pop	r26
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	7f 91       	pop	r23
     a08:	6f 91       	pop	r22
     a0a:	5f 91       	pop	r21
     a0c:	4f 91       	pop	r20
     a0e:	3f 91       	pop	r19
     a10:	2f 91       	pop	r18
     a12:	0f 90       	pop	r0
     a14:	0b be       	out	0x3b, r0	; 59
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	0b b6       	in	r0, 0x3b	; 59
     a2c:	0f 92       	push	r0
     a2e:	2f 93       	push	r18
     a30:	3f 93       	push	r19
     a32:	4f 93       	push	r20
     a34:	5f 93       	push	r21
     a36:	6f 93       	push	r22
     a38:	7f 93       	push	r23
     a3a:	8f 93       	push	r24
     a3c:	9f 93       	push	r25
     a3e:	af 93       	push	r26
     a40:	bf 93       	push	r27
     a42:	ef 93       	push	r30
     a44:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     a46:	e0 91 93 21 	lds	r30, 0x2193	; 0x802193 <tc_tcc0_err_callback>
     a4a:	f0 91 94 21 	lds	r31, 0x2194	; 0x802194 <tc_tcc0_err_callback+0x1>
     a4e:	30 97       	sbiw	r30, 0x00	; 0
     a50:	09 f0       	breq	.+2      	; 0xa54 <__vector_15+0x34>
		tc_tcc0_err_callback();
     a52:	19 95       	eicall
	}
}
     a54:	ff 91       	pop	r31
     a56:	ef 91       	pop	r30
     a58:	bf 91       	pop	r27
     a5a:	af 91       	pop	r26
     a5c:	9f 91       	pop	r25
     a5e:	8f 91       	pop	r24
     a60:	7f 91       	pop	r23
     a62:	6f 91       	pop	r22
     a64:	5f 91       	pop	r21
     a66:	4f 91       	pop	r20
     a68:	3f 91       	pop	r19
     a6a:	2f 91       	pop	r18
     a6c:	0f 90       	pop	r0
     a6e:	0b be       	out	0x3b, r0	; 59
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	0f 90       	pop	r0
     a76:	1f 90       	pop	r1
     a78:	18 95       	reti

00000a7a <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     a7a:	1f 92       	push	r1
     a7c:	0f 92       	push	r0
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	0f 92       	push	r0
     a82:	11 24       	eor	r1, r1
     a84:	0b b6       	in	r0, 0x3b	; 59
     a86:	0f 92       	push	r0
     a88:	2f 93       	push	r18
     a8a:	3f 93       	push	r19
     a8c:	4f 93       	push	r20
     a8e:	5f 93       	push	r21
     a90:	6f 93       	push	r22
     a92:	7f 93       	push	r23
     a94:	8f 93       	push	r24
     a96:	9f 93       	push	r25
     a98:	af 93       	push	r26
     a9a:	bf 93       	push	r27
     a9c:	ef 93       	push	r30
     a9e:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     aa0:	e0 91 91 21 	lds	r30, 0x2191	; 0x802191 <tc_tcc0_cca_callback>
     aa4:	f0 91 92 21 	lds	r31, 0x2192	; 0x802192 <tc_tcc0_cca_callback+0x1>
     aa8:	30 97       	sbiw	r30, 0x00	; 0
     aaa:	09 f0       	breq	.+2      	; 0xaae <__vector_16+0x34>
		tc_tcc0_cca_callback();
     aac:	19 95       	eicall
	}
}
     aae:	ff 91       	pop	r31
     ab0:	ef 91       	pop	r30
     ab2:	bf 91       	pop	r27
     ab4:	af 91       	pop	r26
     ab6:	9f 91       	pop	r25
     ab8:	8f 91       	pop	r24
     aba:	7f 91       	pop	r23
     abc:	6f 91       	pop	r22
     abe:	5f 91       	pop	r21
     ac0:	4f 91       	pop	r20
     ac2:	3f 91       	pop	r19
     ac4:	2f 91       	pop	r18
     ac6:	0f 90       	pop	r0
     ac8:	0b be       	out	0x3b, r0	; 59
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	0b b6       	in	r0, 0x3b	; 59
     ae0:	0f 92       	push	r0
     ae2:	2f 93       	push	r18
     ae4:	3f 93       	push	r19
     ae6:	4f 93       	push	r20
     ae8:	5f 93       	push	r21
     aea:	6f 93       	push	r22
     aec:	7f 93       	push	r23
     aee:	8f 93       	push	r24
     af0:	9f 93       	push	r25
     af2:	af 93       	push	r26
     af4:	bf 93       	push	r27
     af6:	ef 93       	push	r30
     af8:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     afa:	e0 91 8f 21 	lds	r30, 0x218F	; 0x80218f <tc_tcc0_ccb_callback>
     afe:	f0 91 90 21 	lds	r31, 0x2190	; 0x802190 <tc_tcc0_ccb_callback+0x1>
     b02:	30 97       	sbiw	r30, 0x00	; 0
     b04:	09 f0       	breq	.+2      	; 0xb08 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     b06:	19 95       	eicall
	}
}
     b08:	ff 91       	pop	r31
     b0a:	ef 91       	pop	r30
     b0c:	bf 91       	pop	r27
     b0e:	af 91       	pop	r26
     b10:	9f 91       	pop	r25
     b12:	8f 91       	pop	r24
     b14:	7f 91       	pop	r23
     b16:	6f 91       	pop	r22
     b18:	5f 91       	pop	r21
     b1a:	4f 91       	pop	r20
     b1c:	3f 91       	pop	r19
     b1e:	2f 91       	pop	r18
     b20:	0f 90       	pop	r0
     b22:	0b be       	out	0x3b, r0	; 59
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	0b b6       	in	r0, 0x3b	; 59
     b3a:	0f 92       	push	r0
     b3c:	2f 93       	push	r18
     b3e:	3f 93       	push	r19
     b40:	4f 93       	push	r20
     b42:	5f 93       	push	r21
     b44:	6f 93       	push	r22
     b46:	7f 93       	push	r23
     b48:	8f 93       	push	r24
     b4a:	9f 93       	push	r25
     b4c:	af 93       	push	r26
     b4e:	bf 93       	push	r27
     b50:	ef 93       	push	r30
     b52:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     b54:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <tc_tcc0_ccc_callback>
     b58:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <tc_tcc0_ccc_callback+0x1>
     b5c:	30 97       	sbiw	r30, 0x00	; 0
     b5e:	09 f0       	breq	.+2      	; 0xb62 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     b60:	19 95       	eicall
	}
}
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	bf 91       	pop	r27
     b68:	af 91       	pop	r26
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	7f 91       	pop	r23
     b70:	6f 91       	pop	r22
     b72:	5f 91       	pop	r21
     b74:	4f 91       	pop	r20
     b76:	3f 91       	pop	r19
     b78:	2f 91       	pop	r18
     b7a:	0f 90       	pop	r0
     b7c:	0b be       	out	0x3b, r0	; 59
     b7e:	0f 90       	pop	r0
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	0f 90       	pop	r0
     b84:	1f 90       	pop	r1
     b86:	18 95       	reti

00000b88 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     b88:	1f 92       	push	r1
     b8a:	0f 92       	push	r0
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	0f 92       	push	r0
     b90:	11 24       	eor	r1, r1
     b92:	0b b6       	in	r0, 0x3b	; 59
     b94:	0f 92       	push	r0
     b96:	2f 93       	push	r18
     b98:	3f 93       	push	r19
     b9a:	4f 93       	push	r20
     b9c:	5f 93       	push	r21
     b9e:	6f 93       	push	r22
     ba0:	7f 93       	push	r23
     ba2:	8f 93       	push	r24
     ba4:	9f 93       	push	r25
     ba6:	af 93       	push	r26
     ba8:	bf 93       	push	r27
     baa:	ef 93       	push	r30
     bac:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     bae:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <tc_tcc0_ccd_callback>
     bb2:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <tc_tcc0_ccd_callback+0x1>
     bb6:	30 97       	sbiw	r30, 0x00	; 0
     bb8:	09 f0       	breq	.+2      	; 0xbbc <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     bba:	19 95       	eicall
	}
}
     bbc:	ff 91       	pop	r31
     bbe:	ef 91       	pop	r30
     bc0:	bf 91       	pop	r27
     bc2:	af 91       	pop	r26
     bc4:	9f 91       	pop	r25
     bc6:	8f 91       	pop	r24
     bc8:	7f 91       	pop	r23
     bca:	6f 91       	pop	r22
     bcc:	5f 91       	pop	r21
     bce:	4f 91       	pop	r20
     bd0:	3f 91       	pop	r19
     bd2:	2f 91       	pop	r18
     bd4:	0f 90       	pop	r0
     bd6:	0b be       	out	0x3b, r0	; 59
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	0f 90       	pop	r0
     bde:	1f 90       	pop	r1
     be0:	18 95       	reti

00000be2 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     be2:	1f 92       	push	r1
     be4:	0f 92       	push	r0
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	0f 92       	push	r0
     bea:	11 24       	eor	r1, r1
     bec:	0b b6       	in	r0, 0x3b	; 59
     bee:	0f 92       	push	r0
     bf0:	2f 93       	push	r18
     bf2:	3f 93       	push	r19
     bf4:	4f 93       	push	r20
     bf6:	5f 93       	push	r21
     bf8:	6f 93       	push	r22
     bfa:	7f 93       	push	r23
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
     c04:	ef 93       	push	r30
     c06:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     c08:	e0 91 89 21 	lds	r30, 0x2189	; 0x802189 <tc_tcc1_ovf_callback>
     c0c:	f0 91 8a 21 	lds	r31, 0x218A	; 0x80218a <tc_tcc1_ovf_callback+0x1>
     c10:	30 97       	sbiw	r30, 0x00	; 0
     c12:	09 f0       	breq	.+2      	; 0xc16 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     c14:	19 95       	eicall
	}
}
     c16:	ff 91       	pop	r31
     c18:	ef 91       	pop	r30
     c1a:	bf 91       	pop	r27
     c1c:	af 91       	pop	r26
     c1e:	9f 91       	pop	r25
     c20:	8f 91       	pop	r24
     c22:	7f 91       	pop	r23
     c24:	6f 91       	pop	r22
     c26:	5f 91       	pop	r21
     c28:	4f 91       	pop	r20
     c2a:	3f 91       	pop	r19
     c2c:	2f 91       	pop	r18
     c2e:	0f 90       	pop	r0
     c30:	0b be       	out	0x3b, r0	; 59
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	0b b6       	in	r0, 0x3b	; 59
     c48:	0f 92       	push	r0
     c4a:	2f 93       	push	r18
     c4c:	3f 93       	push	r19
     c4e:	4f 93       	push	r20
     c50:	5f 93       	push	r21
     c52:	6f 93       	push	r22
     c54:	7f 93       	push	r23
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
     c5a:	af 93       	push	r26
     c5c:	bf 93       	push	r27
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     c62:	e0 91 87 21 	lds	r30, 0x2187	; 0x802187 <tc_tcc1_err_callback>
     c66:	f0 91 88 21 	lds	r31, 0x2188	; 0x802188 <tc_tcc1_err_callback+0x1>
     c6a:	30 97       	sbiw	r30, 0x00	; 0
     c6c:	09 f0       	breq	.+2      	; 0xc70 <__vector_21+0x34>
		tc_tcc1_err_callback();
     c6e:	19 95       	eicall
	}
}
     c70:	ff 91       	pop	r31
     c72:	ef 91       	pop	r30
     c74:	bf 91       	pop	r27
     c76:	af 91       	pop	r26
     c78:	9f 91       	pop	r25
     c7a:	8f 91       	pop	r24
     c7c:	7f 91       	pop	r23
     c7e:	6f 91       	pop	r22
     c80:	5f 91       	pop	r21
     c82:	4f 91       	pop	r20
     c84:	3f 91       	pop	r19
     c86:	2f 91       	pop	r18
     c88:	0f 90       	pop	r0
     c8a:	0b be       	out	0x3b, r0	; 59
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	0f 90       	pop	r0
     c92:	1f 90       	pop	r1
     c94:	18 95       	reti

00000c96 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     c96:	1f 92       	push	r1
     c98:	0f 92       	push	r0
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	0f 92       	push	r0
     c9e:	11 24       	eor	r1, r1
     ca0:	0b b6       	in	r0, 0x3b	; 59
     ca2:	0f 92       	push	r0
     ca4:	2f 93       	push	r18
     ca6:	3f 93       	push	r19
     ca8:	4f 93       	push	r20
     caa:	5f 93       	push	r21
     cac:	6f 93       	push	r22
     cae:	7f 93       	push	r23
     cb0:	8f 93       	push	r24
     cb2:	9f 93       	push	r25
     cb4:	af 93       	push	r26
     cb6:	bf 93       	push	r27
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     cbc:	e0 91 85 21 	lds	r30, 0x2185	; 0x802185 <tc_tcc1_cca_callback>
     cc0:	f0 91 86 21 	lds	r31, 0x2186	; 0x802186 <tc_tcc1_cca_callback+0x1>
     cc4:	30 97       	sbiw	r30, 0x00	; 0
     cc6:	09 f0       	breq	.+2      	; 0xcca <__vector_22+0x34>
		tc_tcc1_cca_callback();
     cc8:	19 95       	eicall
	}
}
     cca:	ff 91       	pop	r31
     ccc:	ef 91       	pop	r30
     cce:	bf 91       	pop	r27
     cd0:	af 91       	pop	r26
     cd2:	9f 91       	pop	r25
     cd4:	8f 91       	pop	r24
     cd6:	7f 91       	pop	r23
     cd8:	6f 91       	pop	r22
     cda:	5f 91       	pop	r21
     cdc:	4f 91       	pop	r20
     cde:	3f 91       	pop	r19
     ce0:	2f 91       	pop	r18
     ce2:	0f 90       	pop	r0
     ce4:	0b be       	out	0x3b, r0	; 59
     ce6:	0f 90       	pop	r0
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	0f 90       	pop	r0
     cec:	1f 90       	pop	r1
     cee:	18 95       	reti

00000cf0 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	0b b6       	in	r0, 0x3b	; 59
     cfc:	0f 92       	push	r0
     cfe:	2f 93       	push	r18
     d00:	3f 93       	push	r19
     d02:	4f 93       	push	r20
     d04:	5f 93       	push	r21
     d06:	6f 93       	push	r22
     d08:	7f 93       	push	r23
     d0a:	8f 93       	push	r24
     d0c:	9f 93       	push	r25
     d0e:	af 93       	push	r26
     d10:	bf 93       	push	r27
     d12:	ef 93       	push	r30
     d14:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     d16:	e0 91 83 21 	lds	r30, 0x2183	; 0x802183 <tc_tcc1_ccb_callback>
     d1a:	f0 91 84 21 	lds	r31, 0x2184	; 0x802184 <tc_tcc1_ccb_callback+0x1>
     d1e:	30 97       	sbiw	r30, 0x00	; 0
     d20:	09 f0       	breq	.+2      	; 0xd24 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     d22:	19 95       	eicall
	}
}
     d24:	ff 91       	pop	r31
     d26:	ef 91       	pop	r30
     d28:	bf 91       	pop	r27
     d2a:	af 91       	pop	r26
     d2c:	9f 91       	pop	r25
     d2e:	8f 91       	pop	r24
     d30:	7f 91       	pop	r23
     d32:	6f 91       	pop	r22
     d34:	5f 91       	pop	r21
     d36:	4f 91       	pop	r20
     d38:	3f 91       	pop	r19
     d3a:	2f 91       	pop	r18
     d3c:	0f 90       	pop	r0
     d3e:	0b be       	out	0x3b, r0	; 59
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	0f 90       	pop	r0
     d46:	1f 90       	pop	r1
     d48:	18 95       	reti

00000d4a <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     d4a:	1f 92       	push	r1
     d4c:	0f 92       	push	r0
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	0f 92       	push	r0
     d52:	11 24       	eor	r1, r1
     d54:	0b b6       	in	r0, 0x3b	; 59
     d56:	0f 92       	push	r0
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     d70:	e0 91 81 21 	lds	r30, 0x2181	; 0x802181 <tc_tcd0_ovf_callback>
     d74:	f0 91 82 21 	lds	r31, 0x2182	; 0x802182 <tc_tcd0_ovf_callback+0x1>
     d78:	30 97       	sbiw	r30, 0x00	; 0
     d7a:	09 f0       	breq	.+2      	; 0xd7e <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     d7c:	19 95       	eicall
	}
}
     d7e:	ff 91       	pop	r31
     d80:	ef 91       	pop	r30
     d82:	bf 91       	pop	r27
     d84:	af 91       	pop	r26
     d86:	9f 91       	pop	r25
     d88:	8f 91       	pop	r24
     d8a:	7f 91       	pop	r23
     d8c:	6f 91       	pop	r22
     d8e:	5f 91       	pop	r21
     d90:	4f 91       	pop	r20
     d92:	3f 91       	pop	r19
     d94:	2f 91       	pop	r18
     d96:	0f 90       	pop	r0
     d98:	0b be       	out	0x3b, r0	; 59
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	0f 90       	pop	r0
     da0:	1f 90       	pop	r1
     da2:	18 95       	reti

00000da4 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     da4:	1f 92       	push	r1
     da6:	0f 92       	push	r0
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	0f 92       	push	r0
     dac:	11 24       	eor	r1, r1
     dae:	0b b6       	in	r0, 0x3b	; 59
     db0:	0f 92       	push	r0
     db2:	2f 93       	push	r18
     db4:	3f 93       	push	r19
     db6:	4f 93       	push	r20
     db8:	5f 93       	push	r21
     dba:	6f 93       	push	r22
     dbc:	7f 93       	push	r23
     dbe:	8f 93       	push	r24
     dc0:	9f 93       	push	r25
     dc2:	af 93       	push	r26
     dc4:	bf 93       	push	r27
     dc6:	ef 93       	push	r30
     dc8:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     dca:	e0 91 7f 21 	lds	r30, 0x217F	; 0x80217f <tc_tcd0_err_callback>
     dce:	f0 91 80 21 	lds	r31, 0x2180	; 0x802180 <tc_tcd0_err_callback+0x1>
     dd2:	30 97       	sbiw	r30, 0x00	; 0
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <__vector_78+0x34>
		tc_tcd0_err_callback();
     dd6:	19 95       	eicall
	}
}
     dd8:	ff 91       	pop	r31
     dda:	ef 91       	pop	r30
     ddc:	bf 91       	pop	r27
     dde:	af 91       	pop	r26
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	7f 91       	pop	r23
     de6:	6f 91       	pop	r22
     de8:	5f 91       	pop	r21
     dea:	4f 91       	pop	r20
     dec:	3f 91       	pop	r19
     dee:	2f 91       	pop	r18
     df0:	0f 90       	pop	r0
     df2:	0b be       	out	0x3b, r0	; 59
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	0b b6       	in	r0, 0x3b	; 59
     e0a:	0f 92       	push	r0
     e0c:	2f 93       	push	r18
     e0e:	3f 93       	push	r19
     e10:	4f 93       	push	r20
     e12:	5f 93       	push	r21
     e14:	6f 93       	push	r22
     e16:	7f 93       	push	r23
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	af 93       	push	r26
     e1e:	bf 93       	push	r27
     e20:	ef 93       	push	r30
     e22:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     e24:	e0 91 7d 21 	lds	r30, 0x217D	; 0x80217d <tc_tcd0_cca_callback>
     e28:	f0 91 7e 21 	lds	r31, 0x217E	; 0x80217e <tc_tcd0_cca_callback+0x1>
     e2c:	30 97       	sbiw	r30, 0x00	; 0
     e2e:	09 f0       	breq	.+2      	; 0xe32 <__vector_79+0x34>
		tc_tcd0_cca_callback();
     e30:	19 95       	eicall
	}
}
     e32:	ff 91       	pop	r31
     e34:	ef 91       	pop	r30
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	7f 91       	pop	r23
     e40:	6f 91       	pop	r22
     e42:	5f 91       	pop	r21
     e44:	4f 91       	pop	r20
     e46:	3f 91       	pop	r19
     e48:	2f 91       	pop	r18
     e4a:	0f 90       	pop	r0
     e4c:	0b be       	out	0x3b, r0	; 59
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0
     e54:	1f 90       	pop	r1
     e56:	18 95       	reti

00000e58 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     e58:	1f 92       	push	r1
     e5a:	0f 92       	push	r0
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	0f 92       	push	r0
     e60:	11 24       	eor	r1, r1
     e62:	0b b6       	in	r0, 0x3b	; 59
     e64:	0f 92       	push	r0
     e66:	2f 93       	push	r18
     e68:	3f 93       	push	r19
     e6a:	4f 93       	push	r20
     e6c:	5f 93       	push	r21
     e6e:	6f 93       	push	r22
     e70:	7f 93       	push	r23
     e72:	8f 93       	push	r24
     e74:	9f 93       	push	r25
     e76:	af 93       	push	r26
     e78:	bf 93       	push	r27
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     e7e:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <tc_tcd0_ccb_callback>
     e82:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <tc_tcd0_ccb_callback+0x1>
     e86:	30 97       	sbiw	r30, 0x00	; 0
     e88:	09 f0       	breq	.+2      	; 0xe8c <__vector_80+0x34>
		tc_tcd0_ccb_callback();
     e8a:	19 95       	eicall
	}
}
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0b be       	out	0x3b, r0	; 59
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	0f 90       	pop	r0
     eae:	1f 90       	pop	r1
     eb0:	18 95       	reti

00000eb2 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	0b b6       	in	r0, 0x3b	; 59
     ebe:	0f 92       	push	r0
     ec0:	2f 93       	push	r18
     ec2:	3f 93       	push	r19
     ec4:	4f 93       	push	r20
     ec6:	5f 93       	push	r21
     ec8:	6f 93       	push	r22
     eca:	7f 93       	push	r23
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
     ed4:	ef 93       	push	r30
     ed6:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     ed8:	e0 91 79 21 	lds	r30, 0x2179	; 0x802179 <tc_tcd0_ccc_callback>
     edc:	f0 91 7a 21 	lds	r31, 0x217A	; 0x80217a <tc_tcd0_ccc_callback+0x1>
     ee0:	30 97       	sbiw	r30, 0x00	; 0
     ee2:	09 f0       	breq	.+2      	; 0xee6 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
     ee4:	19 95       	eicall
	}
}
     ee6:	ff 91       	pop	r31
     ee8:	ef 91       	pop	r30
     eea:	bf 91       	pop	r27
     eec:	af 91       	pop	r26
     eee:	9f 91       	pop	r25
     ef0:	8f 91       	pop	r24
     ef2:	7f 91       	pop	r23
     ef4:	6f 91       	pop	r22
     ef6:	5f 91       	pop	r21
     ef8:	4f 91       	pop	r20
     efa:	3f 91       	pop	r19
     efc:	2f 91       	pop	r18
     efe:	0f 90       	pop	r0
     f00:	0b be       	out	0x3b, r0	; 59
     f02:	0f 90       	pop	r0
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	0f 90       	pop	r0
     f08:	1f 90       	pop	r1
     f0a:	18 95       	reti

00000f0c <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     f0c:	1f 92       	push	r1
     f0e:	0f 92       	push	r0
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	0f 92       	push	r0
     f14:	11 24       	eor	r1, r1
     f16:	0b b6       	in	r0, 0x3b	; 59
     f18:	0f 92       	push	r0
     f1a:	2f 93       	push	r18
     f1c:	3f 93       	push	r19
     f1e:	4f 93       	push	r20
     f20:	5f 93       	push	r21
     f22:	6f 93       	push	r22
     f24:	7f 93       	push	r23
     f26:	8f 93       	push	r24
     f28:	9f 93       	push	r25
     f2a:	af 93       	push	r26
     f2c:	bf 93       	push	r27
     f2e:	ef 93       	push	r30
     f30:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     f32:	e0 91 77 21 	lds	r30, 0x2177	; 0x802177 <tc_tcd0_ccd_callback>
     f36:	f0 91 78 21 	lds	r31, 0x2178	; 0x802178 <tc_tcd0_ccd_callback+0x1>
     f3a:	30 97       	sbiw	r30, 0x00	; 0
     f3c:	09 f0       	breq	.+2      	; 0xf40 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
     f3e:	19 95       	eicall
	}
}
     f40:	ff 91       	pop	r31
     f42:	ef 91       	pop	r30
     f44:	bf 91       	pop	r27
     f46:	af 91       	pop	r26
     f48:	9f 91       	pop	r25
     f4a:	8f 91       	pop	r24
     f4c:	7f 91       	pop	r23
     f4e:	6f 91       	pop	r22
     f50:	5f 91       	pop	r21
     f52:	4f 91       	pop	r20
     f54:	3f 91       	pop	r19
     f56:	2f 91       	pop	r18
     f58:	0f 90       	pop	r0
     f5a:	0b be       	out	0x3b, r0	; 59
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	0f 90       	pop	r0
     f62:	1f 90       	pop	r1
     f64:	18 95       	reti

00000f66 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     f66:	1f 92       	push	r1
     f68:	0f 92       	push	r0
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	0f 92       	push	r0
     f6e:	11 24       	eor	r1, r1
     f70:	0b b6       	in	r0, 0x3b	; 59
     f72:	0f 92       	push	r0
     f74:	2f 93       	push	r18
     f76:	3f 93       	push	r19
     f78:	4f 93       	push	r20
     f7a:	5f 93       	push	r21
     f7c:	6f 93       	push	r22
     f7e:	7f 93       	push	r23
     f80:	8f 93       	push	r24
     f82:	9f 93       	push	r25
     f84:	af 93       	push	r26
     f86:	bf 93       	push	r27
     f88:	ef 93       	push	r30
     f8a:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     f8c:	e0 91 75 21 	lds	r30, 0x2175	; 0x802175 <tc_tcd1_ovf_callback>
     f90:	f0 91 76 21 	lds	r31, 0x2176	; 0x802176 <tc_tcd1_ovf_callback+0x1>
     f94:	30 97       	sbiw	r30, 0x00	; 0
     f96:	09 f0       	breq	.+2      	; 0xf9a <__vector_83+0x34>
		tc_tcd1_ovf_callback();
     f98:	19 95       	eicall
	}
}
     f9a:	ff 91       	pop	r31
     f9c:	ef 91       	pop	r30
     f9e:	bf 91       	pop	r27
     fa0:	af 91       	pop	r26
     fa2:	9f 91       	pop	r25
     fa4:	8f 91       	pop	r24
     fa6:	7f 91       	pop	r23
     fa8:	6f 91       	pop	r22
     faa:	5f 91       	pop	r21
     fac:	4f 91       	pop	r20
     fae:	3f 91       	pop	r19
     fb0:	2f 91       	pop	r18
     fb2:	0f 90       	pop	r0
     fb4:	0b be       	out	0x3b, r0	; 59
     fb6:	0f 90       	pop	r0
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	0f 90       	pop	r0
     fbc:	1f 90       	pop	r1
     fbe:	18 95       	reti

00000fc0 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     fc0:	1f 92       	push	r1
     fc2:	0f 92       	push	r0
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	0f 92       	push	r0
     fc8:	11 24       	eor	r1, r1
     fca:	0b b6       	in	r0, 0x3b	; 59
     fcc:	0f 92       	push	r0
     fce:	2f 93       	push	r18
     fd0:	3f 93       	push	r19
     fd2:	4f 93       	push	r20
     fd4:	5f 93       	push	r21
     fd6:	6f 93       	push	r22
     fd8:	7f 93       	push	r23
     fda:	8f 93       	push	r24
     fdc:	9f 93       	push	r25
     fde:	af 93       	push	r26
     fe0:	bf 93       	push	r27
     fe2:	ef 93       	push	r30
     fe4:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     fe6:	e0 91 73 21 	lds	r30, 0x2173	; 0x802173 <tc_tcd1_err_callback>
     fea:	f0 91 74 21 	lds	r31, 0x2174	; 0x802174 <tc_tcd1_err_callback+0x1>
     fee:	30 97       	sbiw	r30, 0x00	; 0
     ff0:	09 f0       	breq	.+2      	; 0xff4 <__vector_84+0x34>
		tc_tcd1_err_callback();
     ff2:	19 95       	eicall
	}
}
     ff4:	ff 91       	pop	r31
     ff6:	ef 91       	pop	r30
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	7f 91       	pop	r23
    1002:	6f 91       	pop	r22
    1004:	5f 91       	pop	r21
    1006:	4f 91       	pop	r20
    1008:	3f 91       	pop	r19
    100a:	2f 91       	pop	r18
    100c:	0f 90       	pop	r0
    100e:	0b be       	out	0x3b, r0	; 59
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	0b b6       	in	r0, 0x3b	; 59
    1026:	0f 92       	push	r0
    1028:	2f 93       	push	r18
    102a:	3f 93       	push	r19
    102c:	4f 93       	push	r20
    102e:	5f 93       	push	r21
    1030:	6f 93       	push	r22
    1032:	7f 93       	push	r23
    1034:	8f 93       	push	r24
    1036:	9f 93       	push	r25
    1038:	af 93       	push	r26
    103a:	bf 93       	push	r27
    103c:	ef 93       	push	r30
    103e:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1040:	e0 91 71 21 	lds	r30, 0x2171	; 0x802171 <tc_tcd1_cca_callback>
    1044:	f0 91 72 21 	lds	r31, 0x2172	; 0x802172 <tc_tcd1_cca_callback+0x1>
    1048:	30 97       	sbiw	r30, 0x00	; 0
    104a:	09 f0       	breq	.+2      	; 0x104e <__vector_85+0x34>
		tc_tcd1_cca_callback();
    104c:	19 95       	eicall
	}
}
    104e:	ff 91       	pop	r31
    1050:	ef 91       	pop	r30
    1052:	bf 91       	pop	r27
    1054:	af 91       	pop	r26
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	7f 91       	pop	r23
    105c:	6f 91       	pop	r22
    105e:	5f 91       	pop	r21
    1060:	4f 91       	pop	r20
    1062:	3f 91       	pop	r19
    1064:	2f 91       	pop	r18
    1066:	0f 90       	pop	r0
    1068:	0b be       	out	0x3b, r0	; 59
    106a:	0f 90       	pop	r0
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	0f 90       	pop	r0
    1070:	1f 90       	pop	r1
    1072:	18 95       	reti

00001074 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1074:	1f 92       	push	r1
    1076:	0f 92       	push	r0
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	0f 92       	push	r0
    107c:	11 24       	eor	r1, r1
    107e:	0b b6       	in	r0, 0x3b	; 59
    1080:	0f 92       	push	r0
    1082:	2f 93       	push	r18
    1084:	3f 93       	push	r19
    1086:	4f 93       	push	r20
    1088:	5f 93       	push	r21
    108a:	6f 93       	push	r22
    108c:	7f 93       	push	r23
    108e:	8f 93       	push	r24
    1090:	9f 93       	push	r25
    1092:	af 93       	push	r26
    1094:	bf 93       	push	r27
    1096:	ef 93       	push	r30
    1098:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    109a:	e0 91 6f 21 	lds	r30, 0x216F	; 0x80216f <tc_tcd1_ccb_callback>
    109e:	f0 91 70 21 	lds	r31, 0x2170	; 0x802170 <tc_tcd1_ccb_callback+0x1>
    10a2:	30 97       	sbiw	r30, 0x00	; 0
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    10a6:	19 95       	eicall
	}
}
    10a8:	ff 91       	pop	r31
    10aa:	ef 91       	pop	r30
    10ac:	bf 91       	pop	r27
    10ae:	af 91       	pop	r26
    10b0:	9f 91       	pop	r25
    10b2:	8f 91       	pop	r24
    10b4:	7f 91       	pop	r23
    10b6:	6f 91       	pop	r22
    10b8:	5f 91       	pop	r21
    10ba:	4f 91       	pop	r20
    10bc:	3f 91       	pop	r19
    10be:	2f 91       	pop	r18
    10c0:	0f 90       	pop	r0
    10c2:	0b be       	out	0x3b, r0	; 59
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	0f 92       	push	r0
    10d6:	11 24       	eor	r1, r1
    10d8:	0b b6       	in	r0, 0x3b	; 59
    10da:	0f 92       	push	r0
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    10f4:	e0 91 6d 21 	lds	r30, 0x216D	; 0x80216d <tc_tce0_ovf_callback>
    10f8:	f0 91 6e 21 	lds	r31, 0x216E	; 0x80216e <tc_tce0_ovf_callback+0x1>
    10fc:	30 97       	sbiw	r30, 0x00	; 0
    10fe:	09 f0       	breq	.+2      	; 0x1102 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    1100:	19 95       	eicall
	}
}
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	0f 90       	pop	r0
    111c:	0b be       	out	0x3b, r0	; 59
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	0b b6       	in	r0, 0x3b	; 59
    1134:	0f 92       	push	r0
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    114e:	e0 91 6b 21 	lds	r30, 0x216B	; 0x80216b <tc_tce0_err_callback>
    1152:	f0 91 6c 21 	lds	r31, 0x216C	; 0x80216c <tc_tce0_err_callback+0x1>
    1156:	30 97       	sbiw	r30, 0x00	; 0
    1158:	09 f0       	breq	.+2      	; 0x115c <__vector_48+0x34>
		tc_tce0_err_callback();
    115a:	19 95       	eicall
	}
}
    115c:	ff 91       	pop	r31
    115e:	ef 91       	pop	r30
    1160:	bf 91       	pop	r27
    1162:	af 91       	pop	r26
    1164:	9f 91       	pop	r25
    1166:	8f 91       	pop	r24
    1168:	7f 91       	pop	r23
    116a:	6f 91       	pop	r22
    116c:	5f 91       	pop	r21
    116e:	4f 91       	pop	r20
    1170:	3f 91       	pop	r19
    1172:	2f 91       	pop	r18
    1174:	0f 90       	pop	r0
    1176:	0b be       	out	0x3b, r0	; 59
    1178:	0f 90       	pop	r0
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	0f 90       	pop	r0
    117e:	1f 90       	pop	r1
    1180:	18 95       	reti

00001182 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1182:	1f 92       	push	r1
    1184:	0f 92       	push	r0
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	0f 92       	push	r0
    118a:	11 24       	eor	r1, r1
    118c:	0b b6       	in	r0, 0x3b	; 59
    118e:	0f 92       	push	r0
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    11a8:	e0 91 69 21 	lds	r30, 0x2169	; 0x802169 <tc_tce0_cca_callback>
    11ac:	f0 91 6a 21 	lds	r31, 0x216A	; 0x80216a <tc_tce0_cca_callback+0x1>
    11b0:	30 97       	sbiw	r30, 0x00	; 0
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <__vector_49+0x34>
		tc_tce0_cca_callback();
    11b4:	19 95       	eicall
	}
}
    11b6:	ff 91       	pop	r31
    11b8:	ef 91       	pop	r30
    11ba:	bf 91       	pop	r27
    11bc:	af 91       	pop	r26
    11be:	9f 91       	pop	r25
    11c0:	8f 91       	pop	r24
    11c2:	7f 91       	pop	r23
    11c4:	6f 91       	pop	r22
    11c6:	5f 91       	pop	r21
    11c8:	4f 91       	pop	r20
    11ca:	3f 91       	pop	r19
    11cc:	2f 91       	pop	r18
    11ce:	0f 90       	pop	r0
    11d0:	0b be       	out	0x3b, r0	; 59
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	0f 90       	pop	r0
    11d8:	1f 90       	pop	r1
    11da:	18 95       	reti

000011dc <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    11dc:	1f 92       	push	r1
    11de:	0f 92       	push	r0
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	0f 92       	push	r0
    11e4:	11 24       	eor	r1, r1
    11e6:	0b b6       	in	r0, 0x3b	; 59
    11e8:	0f 92       	push	r0
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1202:	e0 91 67 21 	lds	r30, 0x2167	; 0x802167 <tc_tce0_ccb_callback>
    1206:	f0 91 68 21 	lds	r31, 0x2168	; 0x802168 <tc_tce0_ccb_callback+0x1>
    120a:	30 97       	sbiw	r30, 0x00	; 0
    120c:	09 f0       	breq	.+2      	; 0x1210 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    120e:	19 95       	eicall
	}
}
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	bf 91       	pop	r27
    1216:	af 91       	pop	r26
    1218:	9f 91       	pop	r25
    121a:	8f 91       	pop	r24
    121c:	7f 91       	pop	r23
    121e:	6f 91       	pop	r22
    1220:	5f 91       	pop	r21
    1222:	4f 91       	pop	r20
    1224:	3f 91       	pop	r19
    1226:	2f 91       	pop	r18
    1228:	0f 90       	pop	r0
    122a:	0b be       	out	0x3b, r0	; 59
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1236:	1f 92       	push	r1
    1238:	0f 92       	push	r0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	0f 92       	push	r0
    123e:	11 24       	eor	r1, r1
    1240:	0b b6       	in	r0, 0x3b	; 59
    1242:	0f 92       	push	r0
    1244:	2f 93       	push	r18
    1246:	3f 93       	push	r19
    1248:	4f 93       	push	r20
    124a:	5f 93       	push	r21
    124c:	6f 93       	push	r22
    124e:	7f 93       	push	r23
    1250:	8f 93       	push	r24
    1252:	9f 93       	push	r25
    1254:	af 93       	push	r26
    1256:	bf 93       	push	r27
    1258:	ef 93       	push	r30
    125a:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    125c:	e0 91 65 21 	lds	r30, 0x2165	; 0x802165 <tc_tce0_ccc_callback>
    1260:	f0 91 66 21 	lds	r31, 0x2166	; 0x802166 <tc_tce0_ccc_callback+0x1>
    1264:	30 97       	sbiw	r30, 0x00	; 0
    1266:	09 f0       	breq	.+2      	; 0x126a <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1268:	19 95       	eicall
	}
}
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	bf 91       	pop	r27
    1270:	af 91       	pop	r26
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	7f 91       	pop	r23
    1278:	6f 91       	pop	r22
    127a:	5f 91       	pop	r21
    127c:	4f 91       	pop	r20
    127e:	3f 91       	pop	r19
    1280:	2f 91       	pop	r18
    1282:	0f 90       	pop	r0
    1284:	0b be       	out	0x3b, r0	; 59
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1290:	1f 92       	push	r1
    1292:	0f 92       	push	r0
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	0f 92       	push	r0
    1298:	11 24       	eor	r1, r1
    129a:	0b b6       	in	r0, 0x3b	; 59
    129c:	0f 92       	push	r0
    129e:	2f 93       	push	r18
    12a0:	3f 93       	push	r19
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	af 93       	push	r26
    12b0:	bf 93       	push	r27
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    12b6:	e0 91 63 21 	lds	r30, 0x2163	; 0x802163 <tc_tce0_ccd_callback>
    12ba:	f0 91 64 21 	lds	r31, 0x2164	; 0x802164 <tc_tce0_ccd_callback+0x1>
    12be:	30 97       	sbiw	r30, 0x00	; 0
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    12c2:	19 95       	eicall
	}
}
    12c4:	ff 91       	pop	r31
    12c6:	ef 91       	pop	r30
    12c8:	bf 91       	pop	r27
    12ca:	af 91       	pop	r26
    12cc:	9f 91       	pop	r25
    12ce:	8f 91       	pop	r24
    12d0:	7f 91       	pop	r23
    12d2:	6f 91       	pop	r22
    12d4:	5f 91       	pop	r21
    12d6:	4f 91       	pop	r20
    12d8:	3f 91       	pop	r19
    12da:	2f 91       	pop	r18
    12dc:	0f 90       	pop	r0
    12de:	0b be       	out	0x3b, r0	; 59
    12e0:	0f 90       	pop	r0
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	0f 90       	pop	r0
    12e6:	1f 90       	pop	r1
    12e8:	18 95       	reti

000012ea <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    12ea:	1f 92       	push	r1
    12ec:	0f 92       	push	r0
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	0f 92       	push	r0
    12f2:	11 24       	eor	r1, r1
    12f4:	0b b6       	in	r0, 0x3b	; 59
    12f6:	0f 92       	push	r0
    12f8:	2f 93       	push	r18
    12fa:	3f 93       	push	r19
    12fc:	4f 93       	push	r20
    12fe:	5f 93       	push	r21
    1300:	6f 93       	push	r22
    1302:	7f 93       	push	r23
    1304:	8f 93       	push	r24
    1306:	9f 93       	push	r25
    1308:	af 93       	push	r26
    130a:	bf 93       	push	r27
    130c:	ef 93       	push	r30
    130e:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1310:	e0 91 61 21 	lds	r30, 0x2161	; 0x802161 <tc_tce1_ovf_callback>
    1314:	f0 91 62 21 	lds	r31, 0x2162	; 0x802162 <tc_tce1_ovf_callback+0x1>
    1318:	30 97       	sbiw	r30, 0x00	; 0
    131a:	09 f0       	breq	.+2      	; 0x131e <__vector_53+0x34>
		tc_tce1_ovf_callback();
    131c:	19 95       	eicall
	}
}
    131e:	ff 91       	pop	r31
    1320:	ef 91       	pop	r30
    1322:	bf 91       	pop	r27
    1324:	af 91       	pop	r26
    1326:	9f 91       	pop	r25
    1328:	8f 91       	pop	r24
    132a:	7f 91       	pop	r23
    132c:	6f 91       	pop	r22
    132e:	5f 91       	pop	r21
    1330:	4f 91       	pop	r20
    1332:	3f 91       	pop	r19
    1334:	2f 91       	pop	r18
    1336:	0f 90       	pop	r0
    1338:	0b be       	out	0x3b, r0	; 59
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	0b b6       	in	r0, 0x3b	; 59
    1350:	0f 92       	push	r0
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    136a:	e0 91 5f 21 	lds	r30, 0x215F	; 0x80215f <tc_tce1_err_callback>
    136e:	f0 91 60 21 	lds	r31, 0x2160	; 0x802160 <tc_tce1_err_callback+0x1>
    1372:	30 97       	sbiw	r30, 0x00	; 0
    1374:	09 f0       	breq	.+2      	; 0x1378 <__vector_54+0x34>
		tc_tce1_err_callback();
    1376:	19 95       	eicall
	}
}
    1378:	ff 91       	pop	r31
    137a:	ef 91       	pop	r30
    137c:	bf 91       	pop	r27
    137e:	af 91       	pop	r26
    1380:	9f 91       	pop	r25
    1382:	8f 91       	pop	r24
    1384:	7f 91       	pop	r23
    1386:	6f 91       	pop	r22
    1388:	5f 91       	pop	r21
    138a:	4f 91       	pop	r20
    138c:	3f 91       	pop	r19
    138e:	2f 91       	pop	r18
    1390:	0f 90       	pop	r0
    1392:	0b be       	out	0x3b, r0	; 59
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0f 90       	pop	r0
    139a:	1f 90       	pop	r1
    139c:	18 95       	reti

0000139e <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    139e:	1f 92       	push	r1
    13a0:	0f 92       	push	r0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	0f 92       	push	r0
    13a6:	11 24       	eor	r1, r1
    13a8:	0b b6       	in	r0, 0x3b	; 59
    13aa:	0f 92       	push	r0
    13ac:	2f 93       	push	r18
    13ae:	3f 93       	push	r19
    13b0:	4f 93       	push	r20
    13b2:	5f 93       	push	r21
    13b4:	6f 93       	push	r22
    13b6:	7f 93       	push	r23
    13b8:	8f 93       	push	r24
    13ba:	9f 93       	push	r25
    13bc:	af 93       	push	r26
    13be:	bf 93       	push	r27
    13c0:	ef 93       	push	r30
    13c2:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    13c4:	e0 91 5d 21 	lds	r30, 0x215D	; 0x80215d <tc_tce1_cca_callback>
    13c8:	f0 91 5e 21 	lds	r31, 0x215E	; 0x80215e <tc_tce1_cca_callback+0x1>
    13cc:	30 97       	sbiw	r30, 0x00	; 0
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <__vector_55+0x34>
		tc_tce1_cca_callback();
    13d0:	19 95       	eicall
	}
}
    13d2:	ff 91       	pop	r31
    13d4:	ef 91       	pop	r30
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	7f 91       	pop	r23
    13e0:	6f 91       	pop	r22
    13e2:	5f 91       	pop	r21
    13e4:	4f 91       	pop	r20
    13e6:	3f 91       	pop	r19
    13e8:	2f 91       	pop	r18
    13ea:	0f 90       	pop	r0
    13ec:	0b be       	out	0x3b, r0	; 59
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	0f 90       	pop	r0
    13f4:	1f 90       	pop	r1
    13f6:	18 95       	reti

000013f8 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	0f 92       	push	r0
    1400:	11 24       	eor	r1, r1
    1402:	0b b6       	in	r0, 0x3b	; 59
    1404:	0f 92       	push	r0
    1406:	2f 93       	push	r18
    1408:	3f 93       	push	r19
    140a:	4f 93       	push	r20
    140c:	5f 93       	push	r21
    140e:	6f 93       	push	r22
    1410:	7f 93       	push	r23
    1412:	8f 93       	push	r24
    1414:	9f 93       	push	r25
    1416:	af 93       	push	r26
    1418:	bf 93       	push	r27
    141a:	ef 93       	push	r30
    141c:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    141e:	e0 91 5b 21 	lds	r30, 0x215B	; 0x80215b <tc_tce1_ccb_callback>
    1422:	f0 91 5c 21 	lds	r31, 0x215C	; 0x80215c <tc_tce1_ccb_callback+0x1>
    1426:	30 97       	sbiw	r30, 0x00	; 0
    1428:	09 f0       	breq	.+2      	; 0x142c <__vector_56+0x34>
		tc_tce1_ccb_callback();
    142a:	19 95       	eicall
	}
}
    142c:	ff 91       	pop	r31
    142e:	ef 91       	pop	r30
    1430:	bf 91       	pop	r27
    1432:	af 91       	pop	r26
    1434:	9f 91       	pop	r25
    1436:	8f 91       	pop	r24
    1438:	7f 91       	pop	r23
    143a:	6f 91       	pop	r22
    143c:	5f 91       	pop	r21
    143e:	4f 91       	pop	r20
    1440:	3f 91       	pop	r19
    1442:	2f 91       	pop	r18
    1444:	0f 90       	pop	r0
    1446:	0b be       	out	0x3b, r0	; 59
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0
    144e:	1f 90       	pop	r1
    1450:	18 95       	reti

00001452 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1452:	1f 92       	push	r1
    1454:	0f 92       	push	r0
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	0f 92       	push	r0
    145a:	11 24       	eor	r1, r1
    145c:	0b b6       	in	r0, 0x3b	; 59
    145e:	0f 92       	push	r0
    1460:	2f 93       	push	r18
    1462:	3f 93       	push	r19
    1464:	4f 93       	push	r20
    1466:	5f 93       	push	r21
    1468:	6f 93       	push	r22
    146a:	7f 93       	push	r23
    146c:	8f 93       	push	r24
    146e:	9f 93       	push	r25
    1470:	af 93       	push	r26
    1472:	bf 93       	push	r27
    1474:	ef 93       	push	r30
    1476:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1478:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <tc_tcf0_ovf_callback>
    147c:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <tc_tcf0_ovf_callback+0x1>
    1480:	30 97       	sbiw	r30, 0x00	; 0
    1482:	09 f0       	breq	.+2      	; 0x1486 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1484:	19 95       	eicall
	}
}
    1486:	ff 91       	pop	r31
    1488:	ef 91       	pop	r30
    148a:	bf 91       	pop	r27
    148c:	af 91       	pop	r26
    148e:	9f 91       	pop	r25
    1490:	8f 91       	pop	r24
    1492:	7f 91       	pop	r23
    1494:	6f 91       	pop	r22
    1496:	5f 91       	pop	r21
    1498:	4f 91       	pop	r20
    149a:	3f 91       	pop	r19
    149c:	2f 91       	pop	r18
    149e:	0f 90       	pop	r0
    14a0:	0b be       	out	0x3b, r0	; 59
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	0f 90       	pop	r0
    14a8:	1f 90       	pop	r1
    14aa:	18 95       	reti

000014ac <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    14ac:	1f 92       	push	r1
    14ae:	0f 92       	push	r0
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	0f 92       	push	r0
    14b4:	11 24       	eor	r1, r1
    14b6:	0b b6       	in	r0, 0x3b	; 59
    14b8:	0f 92       	push	r0
    14ba:	2f 93       	push	r18
    14bc:	3f 93       	push	r19
    14be:	4f 93       	push	r20
    14c0:	5f 93       	push	r21
    14c2:	6f 93       	push	r22
    14c4:	7f 93       	push	r23
    14c6:	8f 93       	push	r24
    14c8:	9f 93       	push	r25
    14ca:	af 93       	push	r26
    14cc:	bf 93       	push	r27
    14ce:	ef 93       	push	r30
    14d0:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    14d2:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <tc_tcf0_err_callback>
    14d6:	f0 91 58 21 	lds	r31, 0x2158	; 0x802158 <tc_tcf0_err_callback+0x1>
    14da:	30 97       	sbiw	r30, 0x00	; 0
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <__vector_109+0x34>
		tc_tcf0_err_callback();
    14de:	19 95       	eicall
	}
}
    14e0:	ff 91       	pop	r31
    14e2:	ef 91       	pop	r30
    14e4:	bf 91       	pop	r27
    14e6:	af 91       	pop	r26
    14e8:	9f 91       	pop	r25
    14ea:	8f 91       	pop	r24
    14ec:	7f 91       	pop	r23
    14ee:	6f 91       	pop	r22
    14f0:	5f 91       	pop	r21
    14f2:	4f 91       	pop	r20
    14f4:	3f 91       	pop	r19
    14f6:	2f 91       	pop	r18
    14f8:	0f 90       	pop	r0
    14fa:	0b be       	out	0x3b, r0	; 59
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1506:	1f 92       	push	r1
    1508:	0f 92       	push	r0
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	0f 92       	push	r0
    150e:	11 24       	eor	r1, r1
    1510:	0b b6       	in	r0, 0x3b	; 59
    1512:	0f 92       	push	r0
    1514:	2f 93       	push	r18
    1516:	3f 93       	push	r19
    1518:	4f 93       	push	r20
    151a:	5f 93       	push	r21
    151c:	6f 93       	push	r22
    151e:	7f 93       	push	r23
    1520:	8f 93       	push	r24
    1522:	9f 93       	push	r25
    1524:	af 93       	push	r26
    1526:	bf 93       	push	r27
    1528:	ef 93       	push	r30
    152a:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    152c:	e0 91 55 21 	lds	r30, 0x2155	; 0x802155 <tc_tcf0_cca_callback>
    1530:	f0 91 56 21 	lds	r31, 0x2156	; 0x802156 <tc_tcf0_cca_callback+0x1>
    1534:	30 97       	sbiw	r30, 0x00	; 0
    1536:	09 f0       	breq	.+2      	; 0x153a <__vector_110+0x34>
		tc_tcf0_cca_callback();
    1538:	19 95       	eicall
	}
}
    153a:	ff 91       	pop	r31
    153c:	ef 91       	pop	r30
    153e:	bf 91       	pop	r27
    1540:	af 91       	pop	r26
    1542:	9f 91       	pop	r25
    1544:	8f 91       	pop	r24
    1546:	7f 91       	pop	r23
    1548:	6f 91       	pop	r22
    154a:	5f 91       	pop	r21
    154c:	4f 91       	pop	r20
    154e:	3f 91       	pop	r19
    1550:	2f 91       	pop	r18
    1552:	0f 90       	pop	r0
    1554:	0b be       	out	0x3b, r0	; 59
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	0f 90       	pop	r0
    155c:	1f 90       	pop	r1
    155e:	18 95       	reti

00001560 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1560:	1f 92       	push	r1
    1562:	0f 92       	push	r0
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	0f 92       	push	r0
    1568:	11 24       	eor	r1, r1
    156a:	0b b6       	in	r0, 0x3b	; 59
    156c:	0f 92       	push	r0
    156e:	2f 93       	push	r18
    1570:	3f 93       	push	r19
    1572:	4f 93       	push	r20
    1574:	5f 93       	push	r21
    1576:	6f 93       	push	r22
    1578:	7f 93       	push	r23
    157a:	8f 93       	push	r24
    157c:	9f 93       	push	r25
    157e:	af 93       	push	r26
    1580:	bf 93       	push	r27
    1582:	ef 93       	push	r30
    1584:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1586:	e0 91 53 21 	lds	r30, 0x2153	; 0x802153 <tc_tcf0_ccb_callback>
    158a:	f0 91 54 21 	lds	r31, 0x2154	; 0x802154 <tc_tcf0_ccb_callback+0x1>
    158e:	30 97       	sbiw	r30, 0x00	; 0
    1590:	09 f0       	breq	.+2      	; 0x1594 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1592:	19 95       	eicall
	}
}
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
    1598:	bf 91       	pop	r27
    159a:	af 91       	pop	r26
    159c:	9f 91       	pop	r25
    159e:	8f 91       	pop	r24
    15a0:	7f 91       	pop	r23
    15a2:	6f 91       	pop	r22
    15a4:	5f 91       	pop	r21
    15a6:	4f 91       	pop	r20
    15a8:	3f 91       	pop	r19
    15aa:	2f 91       	pop	r18
    15ac:	0f 90       	pop	r0
    15ae:	0b be       	out	0x3b, r0	; 59
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	0b b6       	in	r0, 0x3b	; 59
    15c6:	0f 92       	push	r0
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	ef 93       	push	r30
    15de:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    15e0:	e0 91 51 21 	lds	r30, 0x2151	; 0x802151 <tc_tcf0_ccc_callback>
    15e4:	f0 91 52 21 	lds	r31, 0x2152	; 0x802152 <tc_tcf0_ccc_callback+0x1>
    15e8:	30 97       	sbiw	r30, 0x00	; 0
    15ea:	09 f0       	breq	.+2      	; 0x15ee <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    15ec:	19 95       	eicall
	}
}
    15ee:	ff 91       	pop	r31
    15f0:	ef 91       	pop	r30
    15f2:	bf 91       	pop	r27
    15f4:	af 91       	pop	r26
    15f6:	9f 91       	pop	r25
    15f8:	8f 91       	pop	r24
    15fa:	7f 91       	pop	r23
    15fc:	6f 91       	pop	r22
    15fe:	5f 91       	pop	r21
    1600:	4f 91       	pop	r20
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0b be       	out	0x3b, r0	; 59
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	0f 90       	pop	r0
    1610:	1f 90       	pop	r1
    1612:	18 95       	reti

00001614 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1614:	1f 92       	push	r1
    1616:	0f 92       	push	r0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	0f 92       	push	r0
    161c:	11 24       	eor	r1, r1
    161e:	0b b6       	in	r0, 0x3b	; 59
    1620:	0f 92       	push	r0
    1622:	2f 93       	push	r18
    1624:	3f 93       	push	r19
    1626:	4f 93       	push	r20
    1628:	5f 93       	push	r21
    162a:	6f 93       	push	r22
    162c:	7f 93       	push	r23
    162e:	8f 93       	push	r24
    1630:	9f 93       	push	r25
    1632:	af 93       	push	r26
    1634:	bf 93       	push	r27
    1636:	ef 93       	push	r30
    1638:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    163a:	e0 91 4f 21 	lds	r30, 0x214F	; 0x80214f <tc_tcf0_ccd_callback>
    163e:	f0 91 50 21 	lds	r31, 0x2150	; 0x802150 <tc_tcf0_ccd_callback+0x1>
    1642:	30 97       	sbiw	r30, 0x00	; 0
    1644:	09 f0       	breq	.+2      	; 0x1648 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    1646:	19 95       	eicall
	}
}
    1648:	ff 91       	pop	r31
    164a:	ef 91       	pop	r30
    164c:	bf 91       	pop	r27
    164e:	af 91       	pop	r26
    1650:	9f 91       	pop	r25
    1652:	8f 91       	pop	r24
    1654:	7f 91       	pop	r23
    1656:	6f 91       	pop	r22
    1658:	5f 91       	pop	r21
    165a:	4f 91       	pop	r20
    165c:	3f 91       	pop	r19
    165e:	2f 91       	pop	r18
    1660:	0f 90       	pop	r0
    1662:	0b be       	out	0x3b, r0	; 59
    1664:	0f 90       	pop	r0
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	0f 90       	pop	r0
    166a:	1f 90       	pop	r1
    166c:	18 95       	reti

0000166e <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	1f 92       	push	r1
    1676:	1f 92       	push	r1
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    167c:	2f b7       	in	r18, 0x3f	; 63
    167e:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    1680:	f8 94       	cli
	return flags;
    1682:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1684:	28 2f       	mov	r18, r24
    1686:	39 2f       	mov	r19, r25
    1688:	21 15       	cp	r18, r1
    168a:	88 e0       	ldi	r24, 0x08	; 8
    168c:	38 07       	cpc	r19, r24
    168e:	49 f4       	brne	.+18     	; 0x16a2 <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1690:	61 e0       	ldi	r22, 0x01	; 1
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1698:	64 e0       	ldi	r22, 0x04	; 4
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
    16a0:	4f c0       	rjmp	.+158    	; 0x1740 <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    16a2:	20 34       	cpi	r18, 0x40	; 64
    16a4:	88 e0       	ldi	r24, 0x08	; 8
    16a6:	38 07       	cpc	r19, r24
    16a8:	49 f4       	brne	.+18     	; 0x16bc <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    16aa:	62 e0       	ldi	r22, 0x02	; 2
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    16b2:	64 e0       	ldi	r22, 0x04	; 4
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
    16ba:	42 c0       	rjmp	.+132    	; 0x1740 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    16bc:	21 15       	cp	r18, r1
    16be:	89 e0       	ldi	r24, 0x09	; 9
    16c0:	38 07       	cpc	r19, r24
    16c2:	49 f4       	brne	.+18     	; 0x16d6 <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	84 e0       	ldi	r24, 0x04	; 4
    16c8:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    16cc:	64 e0       	ldi	r22, 0x04	; 4
    16ce:	84 e0       	ldi	r24, 0x04	; 4
    16d0:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
    16d4:	35 c0       	rjmp	.+106    	; 0x1740 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    16d6:	20 34       	cpi	r18, 0x40	; 64
    16d8:	89 e0       	ldi	r24, 0x09	; 9
    16da:	38 07       	cpc	r19, r24
    16dc:	49 f4       	brne	.+18     	; 0x16f0 <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    16de:	62 e0       	ldi	r22, 0x02	; 2
    16e0:	84 e0       	ldi	r24, 0x04	; 4
    16e2:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    16e6:	64 e0       	ldi	r22, 0x04	; 4
    16e8:	84 e0       	ldi	r24, 0x04	; 4
    16ea:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
    16ee:	28 c0       	rjmp	.+80     	; 0x1740 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    16f0:	21 15       	cp	r18, r1
    16f2:	8a e0       	ldi	r24, 0x0A	; 10
    16f4:	38 07       	cpc	r19, r24
    16f6:	49 f4       	brne	.+18     	; 0x170a <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    16f8:	61 e0       	ldi	r22, 0x01	; 1
    16fa:	85 e0       	ldi	r24, 0x05	; 5
    16fc:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1700:	64 e0       	ldi	r22, 0x04	; 4
    1702:	85 e0       	ldi	r24, 0x05	; 5
    1704:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
    1708:	1b c0       	rjmp	.+54     	; 0x1740 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    170a:	20 34       	cpi	r18, 0x40	; 64
    170c:	8a e0       	ldi	r24, 0x0A	; 10
    170e:	38 07       	cpc	r19, r24
    1710:	49 f4       	brne	.+18     	; 0x1724 <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1712:	62 e0       	ldi	r22, 0x02	; 2
    1714:	85 e0       	ldi	r24, 0x05	; 5
    1716:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    171a:	64 e0       	ldi	r22, 0x04	; 4
    171c:	85 e0       	ldi	r24, 0x05	; 5
    171e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
    1722:	0e c0       	rjmp	.+28     	; 0x1740 <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1724:	21 15       	cp	r18, r1
    1726:	3b 40       	sbci	r19, 0x0B	; 11
    1728:	49 f4       	brne	.+18     	; 0x173c <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	86 e0       	ldi	r24, 0x06	; 6
    172e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1732:	64 e0       	ldi	r22, 0x04	; 4
    1734:	86 e0       	ldi	r24, 0x06	; 6
    1736:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <sysclk_enable_module>
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    173c:	1f bf       	out	0x3f, r17	; 63
    173e:	10 c0       	rjmp	.+32     	; 0x1760 <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1740:	80 91 15 24 	lds	r24, 0x2415	; 0x802415 <sleepmgr_locks+0x1>
    1744:	8f 3f       	cpi	r24, 0xFF	; 255
    1746:	09 f4       	brne	.+2      	; 0x174a <tc_enable+0xdc>
    1748:	ff cf       	rjmp	.-2      	; 0x1748 <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    174a:	8f b7       	in	r24, 0x3f	; 63
    174c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    174e:	f8 94       	cli
	return flags;
    1750:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1752:	e4 e1       	ldi	r30, 0x14	; 20
    1754:	f4 e2       	ldi	r31, 0x24	; 36
    1756:	81 81       	ldd	r24, Z+1	; 0x01
    1758:	8f 5f       	subi	r24, 0xFF	; 255
    175a:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    175c:	9f bf       	out	0x3f, r25	; 63
    175e:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	08 95       	ret

0000176c <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	1f 92       	push	r1
    1772:	1f 92       	push	r1
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	81 11       	cpse	r24, r1
    177a:	26 c0       	rjmp	.+76     	; 0x17c8 <udd_sleep_mode+0x5c>
    177c:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_b_idle>
    1780:	99 23       	and	r25, r25
    1782:	f9 f0       	breq	.+62     	; 0x17c2 <udd_sleep_mode+0x56>
    1784:	90 91 15 24 	lds	r25, 0x2415	; 0x802415 <sleepmgr_locks+0x1>
    1788:	91 11       	cpse	r25, r1
    178a:	01 c0       	rjmp	.+2      	; 0x178e <udd_sleep_mode+0x22>
    178c:	ff cf       	rjmp	.-2      	; 0x178c <udd_sleep_mode+0x20>
    178e:	9f b7       	in	r25, 0x3f	; 63
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	f8 94       	cli
    1794:	2a 81       	ldd	r18, Y+2	; 0x02
    1796:	e4 e1       	ldi	r30, 0x14	; 20
    1798:	f4 e2       	ldi	r31, 0x24	; 36
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	91 50       	subi	r25, 0x01	; 1
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	2f bf       	out	0x3f, r18	; 63
    17a2:	0f c0       	rjmp	.+30     	; 0x17c2 <udd_sleep_mode+0x56>
    17a4:	90 91 15 24 	lds	r25, 0x2415	; 0x802415 <sleepmgr_locks+0x1>
    17a8:	9f 3f       	cpi	r25, 0xFF	; 255
    17aa:	09 f4       	brne	.+2      	; 0x17ae <udd_sleep_mode+0x42>
    17ac:	ff cf       	rjmp	.-2      	; 0x17ac <udd_sleep_mode+0x40>
    17ae:	9f b7       	in	r25, 0x3f	; 63
    17b0:	99 83       	std	Y+1, r25	; 0x01
    17b2:	f8 94       	cli
    17b4:	29 81       	ldd	r18, Y+1	; 0x01
    17b6:	e4 e1       	ldi	r30, 0x14	; 20
    17b8:	f4 e2       	ldi	r31, 0x24	; 36
    17ba:	91 81       	ldd	r25, Z+1	; 0x01
    17bc:	9f 5f       	subi	r25, 0xFF	; 255
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	2f bf       	out	0x3f, r18	; 63
    17c2:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <udd_b_idle>
    17c6:	05 c0       	rjmp	.+10     	; 0x17d2 <udd_sleep_mode+0x66>
    17c8:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_b_idle>
    17cc:	99 23       	and	r25, r25
    17ce:	51 f3       	breq	.-44     	; 0x17a4 <udd_sleep_mode+0x38>
    17d0:	f8 cf       	rjmp	.-16     	; 0x17c2 <udd_sleep_mode+0x56>
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <udd_ctrl_init>:
    17dc:	0f 93       	push	r16
    17de:	e8 ec       	ldi	r30, 0xC8	; 200
    17e0:	f4 e0       	ldi	r31, 0x04	; 4
    17e2:	80 81       	ld	r24, Z
    17e4:	8f 7d       	andi	r24, 0xDF	; 223
    17e6:	80 83       	st	Z, r24
    17e8:	80 81       	ld	r24, Z
    17ea:	8f 7d       	andi	r24, 0xDF	; 223
    17ec:	80 83       	st	Z, r24
    17ee:	e8 e9       	ldi	r30, 0x98	; 152
    17f0:	f2 e2       	ldi	r31, 0x22	; 34
    17f2:	02 e0       	ldi	r16, 0x02	; 2
    17f4:	05 93       	las	Z, r16
    17f6:	10 92 9a 22 	sts	0x229A, r1	; 0x80229a <udd_sram+0x16>
    17fa:	10 92 9b 22 	sts	0x229B, r1	; 0x80229b <udd_sram+0x17>
    17fe:	00 e2       	ldi	r16, 0x20	; 32
    1800:	06 93       	lac	Z, r16
    1802:	00 e4       	ldi	r16, 0x40	; 64
    1804:	06 93       	lac	Z, r16
    1806:	e0 e9       	ldi	r30, 0x90	; 144
    1808:	f2 e2       	ldi	r31, 0x22	; 34
    180a:	00 e4       	ldi	r16, 0x40	; 64
    180c:	06 93       	lac	Z, r16
    180e:	e4 e0       	ldi	r30, 0x04	; 4
    1810:	f4 e2       	ldi	r31, 0x24	; 36
    1812:	14 86       	std	Z+12, r1	; 0x0c
    1814:	15 86       	std	Z+13, r1	; 0x0d
    1816:	16 86       	std	Z+14, r1	; 0x0e
    1818:	17 86       	std	Z+15, r1	; 0x0f
    181a:	12 86       	std	Z+10, r1	; 0x0a
    181c:	13 86       	std	Z+11, r1	; 0x0b
    181e:	10 92 80 22 	sts	0x2280, r1	; 0x802280 <udd_ep_control_state>
    1822:	0f 91       	pop	r16
    1824:	08 95       	ret

00001826 <udd_ctrl_stall_data>:
    1826:	0f 93       	push	r16
    1828:	85 e0       	ldi	r24, 0x05	; 5
    182a:	80 93 80 22 	sts	0x2280, r24	; 0x802280 <udd_ep_control_state>
    182e:	e9 e9       	ldi	r30, 0x99	; 153
    1830:	f2 e2       	ldi	r31, 0x22	; 34
    1832:	04 e0       	ldi	r16, 0x04	; 4
    1834:	05 93       	las	Z, r16
    1836:	e1 e9       	ldi	r30, 0x91	; 145
    1838:	f2 e2       	ldi	r31, 0x22	; 34
    183a:	04 e0       	ldi	r16, 0x04	; 4
    183c:	05 93       	las	Z, r16
    183e:	0f 91       	pop	r16
    1840:	08 95       	ret

00001842 <udd_ctrl_send_zlp_in>:
    1842:	0f 93       	push	r16
    1844:	83 e0       	ldi	r24, 0x03	; 3
    1846:	80 93 80 22 	sts	0x2280, r24	; 0x802280 <udd_ep_control_state>
    184a:	10 92 9a 22 	sts	0x229A, r1	; 0x80229a <udd_sram+0x16>
    184e:	10 92 9b 22 	sts	0x229B, r1	; 0x80229b <udd_sram+0x17>
    1852:	e8 e9       	ldi	r30, 0x98	; 152
    1854:	f2 e2       	ldi	r31, 0x22	; 34
    1856:	02 e0       	ldi	r16, 0x02	; 2
    1858:	06 93       	lac	Z, r16
    185a:	0f 91       	pop	r16
    185c:	08 95       	ret

0000185e <udd_ctrl_endofrequest>:
    185e:	e0 91 10 24 	lds	r30, 0x2410	; 0x802410 <udd_g_ctrlreq+0xc>
    1862:	f0 91 11 24 	lds	r31, 0x2411	; 0x802411 <udd_g_ctrlreq+0xd>
    1866:	30 97       	sbiw	r30, 0x00	; 0
    1868:	09 f0       	breq	.+2      	; 0x186c <udd_ctrl_endofrequest+0xe>
    186a:	19 95       	eicall
    186c:	08 95       	ret

0000186e <udd_ctrl_in_sent>:
    186e:	0f 93       	push	r16
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_ep_control_state>
    1878:	83 30       	cpi	r24, 0x03	; 3
    187a:	19 f4       	brne	.+6      	; 0x1882 <udd_ctrl_in_sent+0x14>
    187c:	f0 df       	rcall	.-32     	; 0x185e <udd_ctrl_endofrequest>
    187e:	ae df       	rcall	.-164    	; 0x17dc <udd_ctrl_init>
    1880:	5e c0       	rjmp	.+188    	; 0x193e <udd_ctrl_in_sent+0xd0>
    1882:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <udd_ctrl_payload_nb_trans>
    1886:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    188a:	c0 91 0e 24 	lds	r28, 0x240E	; 0x80240e <udd_g_ctrlreq+0xa>
    188e:	d0 91 0f 24 	lds	r29, 0x240F	; 0x80240f <udd_g_ctrlreq+0xb>
    1892:	c8 1b       	sub	r28, r24
    1894:	d9 0b       	sbc	r29, r25
    1896:	71 f5       	brne	.+92     	; 0x18f4 <udd_ctrl_in_sent+0x86>
    1898:	20 91 7e 22 	lds	r18, 0x227E	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    189c:	30 91 7f 22 	lds	r19, 0x227F	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
    18a0:	82 0f       	add	r24, r18
    18a2:	93 1f       	adc	r25, r19
    18a4:	80 93 7e 22 	sts	0x227E, r24	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    18a8:	90 93 7f 22 	sts	0x227F, r25	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
    18ac:	20 91 0a 24 	lds	r18, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    18b0:	30 91 0b 24 	lds	r19, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    18b4:	82 17       	cp	r24, r18
    18b6:	93 07       	cpc	r25, r19
    18b8:	21 f0       	breq	.+8      	; 0x18c2 <udd_ctrl_in_sent+0x54>
    18ba:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <b_shortpacket.5399>
    18be:	88 23       	and	r24, r24
    18c0:	41 f0       	breq	.+16     	; 0x18d2 <udd_ctrl_in_sent+0x64>
    18c2:	84 e0       	ldi	r24, 0x04	; 4
    18c4:	80 93 80 22 	sts	0x2280, r24	; 0x802280 <udd_ep_control_state>
    18c8:	e0 e9       	ldi	r30, 0x90	; 144
    18ca:	f2 e2       	ldi	r31, 0x22	; 34
    18cc:	02 e0       	ldi	r16, 0x02	; 2
    18ce:	06 93       	lac	Z, r16
    18d0:	36 c0       	rjmp	.+108    	; 0x193e <udd_ctrl_in_sent+0xd0>
    18d2:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udd_g_ctrlreq+0xe>
    18d6:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udd_g_ctrlreq+0xf>
    18da:	30 97       	sbiw	r30, 0x00	; 0
    18dc:	99 f0       	breq	.+38     	; 0x1904 <udd_ctrl_in_sent+0x96>
    18de:	19 95       	eicall
    18e0:	88 23       	and	r24, r24
    18e2:	81 f0       	breq	.+32     	; 0x1904 <udd_ctrl_in_sent+0x96>
    18e4:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <udd_ctrl_payload_nb_trans>
    18e8:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    18ec:	c0 91 0e 24 	lds	r28, 0x240E	; 0x80240e <udd_g_ctrlreq+0xa>
    18f0:	d0 91 0f 24 	lds	r29, 0x240F	; 0x80240f <udd_g_ctrlreq+0xb>
    18f4:	c0 34       	cpi	r28, 0x40	; 64
    18f6:	d1 05       	cpc	r29, r1
    18f8:	28 f0       	brcs	.+10     	; 0x1904 <udd_ctrl_in_sent+0x96>
    18fa:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <b_shortpacket.5399>
    18fe:	c0 e4       	ldi	r28, 0x40	; 64
    1900:	d0 e0       	ldi	r29, 0x00	; 0
    1902:	03 c0       	rjmp	.+6      	; 0x190a <udd_ctrl_in_sent+0x9c>
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <b_shortpacket.5399>
    190a:	e4 e8       	ldi	r30, 0x84	; 132
    190c:	f2 e2       	ldi	r31, 0x22	; 34
    190e:	c6 8b       	std	Z+22, r28	; 0x16
    1910:	d7 8b       	std	Z+23, r29	; 0x17
    1912:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <udd_ctrl_payload_nb_trans>
    1916:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    191a:	20 91 0c 24 	lds	r18, 0x240C	; 0x80240c <udd_g_ctrlreq+0x8>
    191e:	30 91 0d 24 	lds	r19, 0x240D	; 0x80240d <udd_g_ctrlreq+0x9>
    1922:	28 0f       	add	r18, r24
    1924:	39 1f       	adc	r19, r25
    1926:	20 8f       	std	Z+24, r18	; 0x18
    1928:	31 8f       	std	Z+25, r19	; 0x19
    192a:	c8 0f       	add	r28, r24
    192c:	d9 1f       	adc	r29, r25
    192e:	c0 93 7c 22 	sts	0x227C, r28	; 0x80227c <udd_ctrl_payload_nb_trans>
    1932:	d0 93 7d 22 	sts	0x227D, r29	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    1936:	e8 e9       	ldi	r30, 0x98	; 152
    1938:	f2 e2       	ldi	r31, 0x22	; 34
    193a:	02 e0       	ldi	r16, 0x02	; 2
    193c:	06 93       	lac	Z, r16
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	0f 91       	pop	r16
    1944:	08 95       	ret

00001946 <udd_ep_get_size>:
    1946:	fc 01       	movw	r30, r24
    1948:	81 81       	ldd	r24, Z+1	; 0x01
    194a:	e8 2f       	mov	r30, r24
    194c:	e7 70       	andi	r30, 0x07	; 7
    194e:	8e 2f       	mov	r24, r30
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	fc 01       	movw	r30, r24
    1954:	31 97       	sbiw	r30, 0x01	; 1
    1956:	e7 30       	cpi	r30, 0x07	; 7
    1958:	f1 05       	cpc	r31, r1
    195a:	d8 f4       	brcc	.+54     	; 0x1992 <udd_ep_get_size+0x4c>
    195c:	88 27       	eor	r24, r24
    195e:	e2 50       	subi	r30, 0x02	; 2
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	8f 4f       	sbci	r24, 0xFF	; 255
    1964:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__tablejump2__>
    1968:	80 e1       	ldi	r24, 0x10	; 16
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	08 95       	ret
    196e:	80 e2       	ldi	r24, 0x20	; 32
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	08 95       	ret
    1974:	80 e4       	ldi	r24, 0x40	; 64
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	08 95       	ret
    197a:	80 e8       	ldi	r24, 0x80	; 128
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	08 95       	ret
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	91 e0       	ldi	r25, 0x01	; 1
    1984:	08 95       	ret
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	92 e0       	ldi	r25, 0x02	; 2
    198a:	08 95       	ret
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	93 e0       	ldi	r25, 0x03	; 3
    1990:	08 95       	ret
    1992:	88 e0       	ldi	r24, 0x08	; 8
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	08 95       	ret

00001998 <udd_ep_get_job>:
    1998:	28 2f       	mov	r18, r24
    199a:	2f 70       	andi	r18, 0x0F	; 15
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	22 0f       	add	r18, r18
    19a0:	33 1f       	adc	r19, r19
    19a2:	08 2e       	mov	r0, r24
    19a4:	00 0c       	add	r0, r0
    19a6:	99 0b       	sbc	r25, r25
    19a8:	88 27       	eor	r24, r24
    19aa:	99 0f       	add	r25, r25
    19ac:	88 1f       	adc	r24, r24
    19ae:	99 27       	eor	r25, r25
    19b0:	82 0f       	add	r24, r18
    19b2:	93 1f       	adc	r25, r19
    19b4:	02 97       	sbiw	r24, 0x02	; 2
    19b6:	9c 01       	movw	r18, r24
    19b8:	22 0f       	add	r18, r18
    19ba:	33 1f       	adc	r19, r19
    19bc:	22 0f       	add	r18, r18
    19be:	33 1f       	adc	r19, r19
    19c0:	22 0f       	add	r18, r18
    19c2:	33 1f       	adc	r19, r19
    19c4:	82 0f       	add	r24, r18
    19c6:	93 1f       	adc	r25, r19
    19c8:	88 5e       	subi	r24, 0xE8	; 232
    19ca:	9d 4d       	sbci	r25, 0xDD	; 221
    19cc:	08 95       	ret

000019ce <udd_ctrl_interrupt_tc_setup>:
    19ce:	0f 93       	push	r16
    19d0:	cf 93       	push	r28
    19d2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    19d6:	80 ff       	sbrs	r24, 0
    19d8:	65 c0       	rjmp	.+202    	; 0x1aa4 <udd_ctrl_interrupt_tc_setup+0xd6>
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    19e0:	e0 e9       	ldi	r30, 0x90	; 144
    19e2:	f2 e2       	ldi	r31, 0x22	; 34
    19e4:	00 e8       	ldi	r16, 0x80	; 128
    19e6:	06 93       	lac	Z, r16
    19e8:	e8 e9       	ldi	r30, 0x98	; 152
    19ea:	f2 e2       	ldi	r31, 0x22	; 34
    19ec:	00 e8       	ldi	r16, 0x80	; 128
    19ee:	06 93       	lac	Z, r16
    19f0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    19f4:	e0 e9       	ldi	r30, 0x90	; 144
    19f6:	f2 e2       	ldi	r31, 0x22	; 34
    19f8:	00 e1       	ldi	r16, 0x10	; 16
    19fa:	06 93       	lac	Z, r16
    19fc:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_ep_control_state>
    1a00:	88 23       	and	r24, r24
    1a02:	29 f0       	breq	.+10     	; 0x1a0e <udd_ctrl_interrupt_tc_setup+0x40>
    1a04:	83 50       	subi	r24, 0x03	; 3
    1a06:	82 30       	cpi	r24, 0x02	; 2
    1a08:	08 f4       	brcc	.+2      	; 0x1a0c <udd_ctrl_interrupt_tc_setup+0x3e>
    1a0a:	29 df       	rcall	.-430    	; 0x185e <udd_ctrl_endofrequest>
    1a0c:	e7 de       	rcall	.-562    	; 0x17dc <udd_ctrl_init>
    1a0e:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <udd_sram+0xe>
    1a12:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <udd_sram+0xf>
    1a16:	08 97       	sbiw	r24, 0x08	; 8
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <udd_ctrl_interrupt_tc_setup+0x4e>
    1a1a:	46 c0       	rjmp	.+140    	; 0x1aa8 <udd_ctrl_interrupt_tc_setup+0xda>
    1a1c:	88 e0       	ldi	r24, 0x08	; 8
    1a1e:	ec e3       	ldi	r30, 0x3C	; 60
    1a20:	f2 e2       	ldi	r31, 0x22	; 34
    1a22:	a4 e0       	ldi	r26, 0x04	; 4
    1a24:	b4 e2       	ldi	r27, 0x24	; 36
    1a26:	01 90       	ld	r0, Z+
    1a28:	0d 92       	st	X+, r0
    1a2a:	8a 95       	dec	r24
    1a2c:	e1 f7       	brne	.-8      	; 0x1a26 <udd_ctrl_interrupt_tc_setup+0x58>
    1a2e:	e8 ec       	ldi	r30, 0xC8	; 200
    1a30:	f4 e0       	ldi	r31, 0x04	; 4
    1a32:	80 81       	ld	r24, Z
    1a34:	80 62       	ori	r24, 0x20	; 32
    1a36:	80 83       	st	Z, r24
    1a38:	80 81       	ld	r24, Z
    1a3a:	80 62       	ori	r24, 0x20	; 32
    1a3c:	80 83       	st	Z, r24
    1a3e:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <udc_process_setup>
    1a42:	c8 2f       	mov	r28, r24
    1a44:	81 11       	cpse	r24, r1
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <udd_ctrl_interrupt_tc_setup+0x80>
    1a48:	ee de       	rcall	.-548    	; 0x1826 <udd_ctrl_stall_data>
    1a4a:	c1 e0       	ldi	r28, 0x01	; 1
    1a4c:	2e c0       	rjmp	.+92     	; 0x1aaa <udd_ctrl_interrupt_tc_setup+0xdc>
    1a4e:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <udd_g_ctrlreq>
    1a52:	88 23       	and	r24, r24
    1a54:	6c f4       	brge	.+26     	; 0x1a70 <udd_ctrl_interrupt_tc_setup+0xa2>
    1a56:	10 92 7e 22 	sts	0x227E, r1	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    1a5a:	10 92 7f 22 	sts	0x227F, r1	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
    1a5e:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <udd_ctrl_payload_nb_trans>
    1a62:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    1a66:	82 e0       	ldi	r24, 0x02	; 2
    1a68:	80 93 80 22 	sts	0x2280, r24	; 0x802280 <udd_ep_control_state>
    1a6c:	00 df       	rcall	.-512    	; 0x186e <udd_ctrl_in_sent>
    1a6e:	1d c0       	rjmp	.+58     	; 0x1aaa <udd_ctrl_interrupt_tc_setup+0xdc>
    1a70:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    1a74:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    1a78:	89 2b       	or	r24, r25
    1a7a:	11 f4       	brne	.+4      	; 0x1a80 <udd_ctrl_interrupt_tc_setup+0xb2>
    1a7c:	e2 de       	rcall	.-572    	; 0x1842 <udd_ctrl_send_zlp_in>
    1a7e:	15 c0       	rjmp	.+42     	; 0x1aaa <udd_ctrl_interrupt_tc_setup+0xdc>
    1a80:	10 92 7e 22 	sts	0x227E, r1	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    1a84:	10 92 7f 22 	sts	0x227F, r1	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
    1a88:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <udd_ctrl_payload_nb_trans>
    1a8c:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	80 93 80 22 	sts	0x2280, r24	; 0x802280 <udd_ep_control_state>
    1a96:	e0 e9       	ldi	r30, 0x90	; 144
    1a98:	f2 e2       	ldi	r31, 0x22	; 34
    1a9a:	02 e0       	ldi	r16, 0x02	; 2
    1a9c:	06 93       	lac	Z, r16
    1a9e:	00 e2       	ldi	r16, 0x20	; 32
    1aa0:	06 93       	lac	Z, r16
    1aa2:	03 c0       	rjmp	.+6      	; 0x1aaa <udd_ctrl_interrupt_tc_setup+0xdc>
    1aa4:	c0 e0       	ldi	r28, 0x00	; 0
    1aa6:	01 c0       	rjmp	.+2      	; 0x1aaa <udd_ctrl_interrupt_tc_setup+0xdc>
    1aa8:	c1 e0       	ldi	r28, 0x01	; 1
    1aaa:	8c 2f       	mov	r24, r28
    1aac:	cf 91       	pop	r28
    1aae:	0f 91       	pop	r16
    1ab0:	08 95       	ret

00001ab2 <udd_ep_trans_complet>:
    1ab2:	8f 92       	push	r8
    1ab4:	9f 92       	push	r9
    1ab6:	af 92       	push	r10
    1ab8:	bf 92       	push	r11
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	d8 2e       	mov	r13, r24
    1aca:	66 df       	rcall	.-308    	; 0x1998 <udd_ep_get_job>
    1acc:	8c 01       	movw	r16, r24
    1ace:	bd 2c       	mov	r11, r13
    1ad0:	bb 1c       	adc	r11, r11
    1ad2:	bb 24       	eor	r11, r11
    1ad4:	bb 1c       	adc	r11, r11
    1ad6:	cd 2d       	mov	r28, r13
    1ad8:	cf 70       	andi	r28, 0x0F	; 15
    1ada:	d0 e0       	ldi	r29, 0x00	; 0
    1adc:	cc 0f       	add	r28, r28
    1ade:	dd 1f       	adc	r29, r29
    1ae0:	cb 0d       	add	r28, r11
    1ae2:	d1 1d       	adc	r29, r1
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	9c 01       	movw	r18, r24
    1af4:	20 57       	subi	r18, 0x70	; 112
    1af6:	3d 4d       	sbci	r19, 0xDD	; 221
    1af8:	79 01       	movw	r14, r18
    1afa:	c9 01       	movw	r24, r18
    1afc:	24 df       	rcall	.-440    	; 0x1946 <udd_ep_get_size>
    1afe:	4c 01       	movw	r8, r24
    1b00:	bb 20       	and	r11, r11
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <udd_ep_trans_complet+0x54>
    1b04:	7b c0       	rjmp	.+246    	; 0x1bfc <udd_ep_trans_complet+0x14a>
    1b06:	fe 01       	movw	r30, r28
    1b08:	ee 0f       	add	r30, r30
    1b0a:	ff 1f       	adc	r31, r31
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	ee 0f       	add	r30, r30
    1b12:	ff 1f       	adc	r31, r31
    1b14:	ec 57       	subi	r30, 0x7C	; 124
    1b16:	fd 4d       	sbci	r31, 0xDD	; 221
    1b18:	22 89       	ldd	r18, Z+18	; 0x12
    1b1a:	33 89       	ldd	r19, Z+19	; 0x13
    1b1c:	d8 01       	movw	r26, r16
    1b1e:	15 96       	adiw	r26, 0x05	; 5
    1b20:	8d 91       	ld	r24, X+
    1b22:	9c 91       	ld	r25, X
    1b24:	16 97       	sbiw	r26, 0x06	; 6
    1b26:	82 0f       	add	r24, r18
    1b28:	93 1f       	adc	r25, r19
    1b2a:	15 96       	adiw	r26, 0x05	; 5
    1b2c:	8d 93       	st	X+, r24
    1b2e:	9c 93       	st	X, r25
    1b30:	16 97       	sbiw	r26, 0x06	; 6
    1b32:	13 96       	adiw	r26, 0x03	; 3
    1b34:	2d 91       	ld	r18, X+
    1b36:	3c 91       	ld	r19, X
    1b38:	14 97       	sbiw	r26, 0x04	; 4
    1b3a:	82 17       	cp	r24, r18
    1b3c:	93 07       	cpc	r25, r19
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <udd_ep_trans_complet+0x90>
    1b40:	47 c0       	rjmp	.+142    	; 0x1bd0 <udd_ep_trans_complet+0x11e>
    1b42:	28 1b       	sub	r18, r24
    1b44:	39 0b       	sbc	r19, r25
    1b46:	21 15       	cp	r18, r1
    1b48:	b4 e0       	ldi	r27, 0x04	; 4
    1b4a:	3b 07       	cpc	r19, r27
    1b4c:	40 f0       	brcs	.+16     	; 0x1b5e <udd_ep_trans_complet+0xac>
    1b4e:	2f ef       	ldi	r18, 0xFF	; 255
    1b50:	33 e0       	ldi	r19, 0x03	; 3
    1b52:	c9 01       	movw	r24, r18
    1b54:	b4 01       	movw	r22, r8
    1b56:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__udivmodhi4>
    1b5a:	28 1b       	sub	r18, r24
    1b5c:	39 0b       	sbc	r19, r25
    1b5e:	f8 01       	movw	r30, r16
    1b60:	80 81       	ld	r24, Z
    1b62:	81 ff       	sbrs	r24, 1
    1b64:	0a c0       	rjmp	.+20     	; 0x1b7a <udd_ep_trans_complet+0xc8>
    1b66:	c9 01       	movw	r24, r18
    1b68:	b4 01       	movw	r22, r8
    1b6a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__udivmodhi4>
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	89 2b       	or	r24, r25
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <udd_ep_trans_complet+0xc4>
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	84 2f       	mov	r24, r20
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <udd_ep_trans_complet+0xca>
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	d8 01       	movw	r26, r16
    1b7e:	9c 91       	ld	r25, X
    1b80:	80 fb       	bst	r24, 0
    1b82:	91 f9       	bld	r25, 1
    1b84:	9c 93       	st	X, r25
    1b86:	fe 01       	movw	r30, r28
    1b88:	ee 0f       	add	r30, r30
    1b8a:	ff 1f       	adc	r31, r31
    1b8c:	ee 0f       	add	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	ee 0f       	add	r30, r30
    1b92:	ff 1f       	adc	r31, r31
    1b94:	ec 57       	subi	r30, 0x7C	; 124
    1b96:	fd 4d       	sbci	r31, 0xDD	; 221
    1b98:	12 8a       	std	Z+18, r1	; 0x12
    1b9a:	13 8a       	std	Z+19, r1	; 0x13
    1b9c:	26 87       	std	Z+14, r18	; 0x0e
    1b9e:	37 87       	std	Z+15, r19	; 0x0f
    1ba0:	11 96       	adiw	r26, 0x01	; 1
    1ba2:	2d 91       	ld	r18, X+
    1ba4:	3c 91       	ld	r19, X
    1ba6:	12 97       	sbiw	r26, 0x02	; 2
    1ba8:	15 96       	adiw	r26, 0x05	; 5
    1baa:	8d 91       	ld	r24, X+
    1bac:	9c 91       	ld	r25, X
    1bae:	16 97       	sbiw	r26, 0x06	; 6
    1bb0:	82 0f       	add	r24, r18
    1bb2:	93 1f       	adc	r25, r19
    1bb4:	cc 0f       	add	r28, r28
    1bb6:	dd 1f       	adc	r29, r29
    1bb8:	cc 0f       	add	r28, r28
    1bba:	dd 1f       	adc	r29, r29
    1bbc:	cc 0f       	add	r28, r28
    1bbe:	dd 1f       	adc	r29, r29
    1bc0:	cc 56       	subi	r28, 0x6C	; 108
    1bc2:	dd 4d       	sbci	r29, 0xDD	; 221
    1bc4:	88 83       	st	Y, r24
    1bc6:	99 83       	std	Y+1, r25	; 0x01
    1bc8:	f7 01       	movw	r30, r14
    1bca:	02 e0       	ldi	r16, 0x02	; 2
    1bcc:	06 93       	lac	Z, r16
    1bce:	e8 c0       	rjmp	.+464    	; 0x1da0 <udd_ep_trans_complet+0x2ee>
    1bd0:	d8 01       	movw	r26, r16
    1bd2:	8c 91       	ld	r24, X
    1bd4:	81 ff       	sbrs	r24, 1
    1bd6:	d1 c0       	rjmp	.+418    	; 0x1d7a <udd_ep_trans_complet+0x2c8>
    1bd8:	8d 7f       	andi	r24, 0xFD	; 253
    1bda:	8c 93       	st	X, r24
    1bdc:	cc 0f       	add	r28, r28
    1bde:	dd 1f       	adc	r29, r29
    1be0:	cc 0f       	add	r28, r28
    1be2:	dd 1f       	adc	r29, r29
    1be4:	cc 0f       	add	r28, r28
    1be6:	dd 1f       	adc	r29, r29
    1be8:	cc 57       	subi	r28, 0x7C	; 124
    1bea:	dd 4d       	sbci	r29, 0xDD	; 221
    1bec:	1a 8a       	std	Y+18, r1	; 0x12
    1bee:	1b 8a       	std	Y+19, r1	; 0x13
    1bf0:	1e 86       	std	Y+14, r1	; 0x0e
    1bf2:	1f 86       	std	Y+15, r1	; 0x0f
    1bf4:	f7 01       	movw	r30, r14
    1bf6:	02 e0       	ldi	r16, 0x02	; 2
    1bf8:	06 93       	lac	Z, r16
    1bfa:	d2 c0       	rjmp	.+420    	; 0x1da0 <udd_ep_trans_complet+0x2ee>
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	ee 0f       	add	r30, r30
    1c00:	ff 1f       	adc	r31, r31
    1c02:	ee 0f       	add	r30, r30
    1c04:	ff 1f       	adc	r31, r31
    1c06:	ee 0f       	add	r30, r30
    1c08:	ff 1f       	adc	r31, r31
    1c0a:	ec 57       	subi	r30, 0x7C	; 124
    1c0c:	fd 4d       	sbci	r31, 0xDD	; 221
    1c0e:	a6 84       	ldd	r10, Z+14	; 0x0e
    1c10:	b7 84       	ldd	r11, Z+15	; 0x0f
    1c12:	d8 01       	movw	r26, r16
    1c14:	8c 91       	ld	r24, X
    1c16:	82 ff       	sbrs	r24, 2
    1c18:	1b c0       	rjmp	.+54     	; 0x1c50 <udd_ep_trans_complet+0x19e>
    1c1a:	11 96       	adiw	r26, 0x01	; 1
    1c1c:	ed 91       	ld	r30, X+
    1c1e:	fc 91       	ld	r31, X
    1c20:	12 97       	sbiw	r26, 0x02	; 2
    1c22:	15 96       	adiw	r26, 0x05	; 5
    1c24:	2d 91       	ld	r18, X+
    1c26:	3c 91       	ld	r19, X
    1c28:	16 97       	sbiw	r26, 0x06	; 6
    1c2a:	13 96       	adiw	r26, 0x03	; 3
    1c2c:	8d 91       	ld	r24, X+
    1c2e:	9c 91       	ld	r25, X
    1c30:	14 97       	sbiw	r26, 0x04	; 4
    1c32:	b4 01       	movw	r22, r8
    1c34:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__udivmodhi4>
    1c38:	b0 e4       	ldi	r27, 0x40	; 64
    1c3a:	db 9e       	mul	r13, r27
    1c3c:	b0 01       	movw	r22, r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	68 5a       	subi	r22, 0xA8	; 168
    1c42:	7e 4d       	sbci	r23, 0xDE	; 222
    1c44:	ac 01       	movw	r20, r24
    1c46:	cf 01       	movw	r24, r30
    1c48:	82 0f       	add	r24, r18
    1c4a:	93 1f       	adc	r25, r19
    1c4c:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <memcpy>
    1c50:	f8 01       	movw	r30, r16
    1c52:	25 81       	ldd	r18, Z+5	; 0x05
    1c54:	36 81       	ldd	r19, Z+6	; 0x06
    1c56:	2a 0d       	add	r18, r10
    1c58:	3b 1d       	adc	r19, r11
    1c5a:	25 83       	std	Z+5, r18	; 0x05
    1c5c:	36 83       	std	Z+6, r19	; 0x06
    1c5e:	83 81       	ldd	r24, Z+3	; 0x03
    1c60:	94 81       	ldd	r25, Z+4	; 0x04
    1c62:	82 17       	cp	r24, r18
    1c64:	93 07       	cpc	r25, r19
    1c66:	68 f4       	brcc	.+26     	; 0x1c82 <udd_ep_trans_complet+0x1d0>
    1c68:	85 83       	std	Z+5, r24	; 0x05
    1c6a:	96 83       	std	Z+6, r25	; 0x06
    1c6c:	cc 0f       	add	r28, r28
    1c6e:	dd 1f       	adc	r29, r29
    1c70:	cc 0f       	add	r28, r28
    1c72:	dd 1f       	adc	r29, r29
    1c74:	cc 0f       	add	r28, r28
    1c76:	dd 1f       	adc	r29, r29
    1c78:	cc 57       	subi	r28, 0x7C	; 124
    1c7a:	dd 4d       	sbci	r29, 0xDD	; 221
    1c7c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c7e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c80:	7c c0       	rjmp	.+248    	; 0x1d7a <udd_ep_trans_complet+0x2c8>
    1c82:	fe 01       	movw	r30, r28
    1c84:	ee 0f       	add	r30, r30
    1c86:	ff 1f       	adc	r31, r31
    1c88:	ee 0f       	add	r30, r30
    1c8a:	ff 1f       	adc	r31, r31
    1c8c:	ee 0f       	add	r30, r30
    1c8e:	ff 1f       	adc	r31, r31
    1c90:	ec 57       	subi	r30, 0x7C	; 124
    1c92:	fd 4d       	sbci	r31, 0xDD	; 221
    1c94:	42 89       	ldd	r20, Z+18	; 0x12
    1c96:	53 89       	ldd	r21, Z+19	; 0x13
    1c98:	4a 15       	cp	r20, r10
    1c9a:	5b 05       	cpc	r21, r11
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <udd_ep_trans_complet+0x1ee>
    1c9e:	6d c0       	rjmp	.+218    	; 0x1d7a <udd_ep_trans_complet+0x2c8>
    1ca0:	28 17       	cp	r18, r24
    1ca2:	39 07       	cpc	r19, r25
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <udd_ep_trans_complet+0x1f6>
    1ca6:	69 c0       	rjmp	.+210    	; 0x1d7a <udd_ep_trans_complet+0x2c8>
    1ca8:	ac 01       	movw	r20, r24
    1caa:	42 1b       	sub	r20, r18
    1cac:	53 0b       	sbc	r21, r19
    1cae:	9a 01       	movw	r18, r20
    1cb0:	21 15       	cp	r18, r1
    1cb2:	54 e0       	ldi	r21, 0x04	; 4
    1cb4:	35 07       	cpc	r19, r21
    1cb6:	58 f0       	brcs	.+22     	; 0x1cce <udd_ep_trans_complet+0x21c>
    1cb8:	2f ef       	ldi	r18, 0xFF	; 255
    1cba:	33 e0       	ldi	r19, 0x03	; 3
    1cbc:	c9 01       	movw	r24, r18
    1cbe:	b4 01       	movw	r22, r8
    1cc0:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__udivmodhi4>
    1cc4:	d9 01       	movw	r26, r18
    1cc6:	a8 1b       	sub	r26, r24
    1cc8:	b9 0b       	sbc	r27, r25
    1cca:	cd 01       	movw	r24, r26
    1ccc:	08 c0       	rjmp	.+16     	; 0x1cde <udd_ep_trans_complet+0x22c>
    1cce:	c9 01       	movw	r24, r18
    1cd0:	b4 01       	movw	r22, r8
    1cd2:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__udivmodhi4>
    1cd6:	f9 01       	movw	r30, r18
    1cd8:	e8 1b       	sub	r30, r24
    1cda:	f9 0b       	sbc	r31, r25
    1cdc:	cf 01       	movw	r24, r30
    1cde:	fe 01       	movw	r30, r28
    1ce0:	ee 0f       	add	r30, r30
    1ce2:	ff 1f       	adc	r31, r31
    1ce4:	ee 0f       	add	r30, r30
    1ce6:	ff 1f       	adc	r31, r31
    1ce8:	ee 0f       	add	r30, r30
    1cea:	ff 1f       	adc	r31, r31
    1cec:	ec 57       	subi	r30, 0x7C	; 124
    1cee:	fd 4d       	sbci	r31, 0xDD	; 221
    1cf0:	16 86       	std	Z+14, r1	; 0x0e
    1cf2:	17 86       	std	Z+15, r1	; 0x0f
    1cf4:	88 15       	cp	r24, r8
    1cf6:	99 05       	cpc	r25, r9
    1cf8:	00 f5       	brcc	.+64     	; 0x1d3a <udd_ep_trans_complet+0x288>
    1cfa:	d8 01       	movw	r26, r16
    1cfc:	8c 91       	ld	r24, X
    1cfe:	84 60       	ori	r24, 0x04	; 4
    1d00:	8c 93       	st	X, r24
    1d02:	b0 e4       	ldi	r27, 0x40	; 64
    1d04:	db 9e       	mul	r13, r27
    1d06:	c0 01       	movw	r24, r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	88 5a       	subi	r24, 0xA8	; 168
    1d0c:	9e 4d       	sbci	r25, 0xDE	; 222
    1d0e:	fe 01       	movw	r30, r28
    1d10:	ee 0f       	add	r30, r30
    1d12:	ff 1f       	adc	r31, r31
    1d14:	ee 0f       	add	r30, r30
    1d16:	ff 1f       	adc	r31, r31
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	ec 56       	subi	r30, 0x6C	; 108
    1d1e:	fd 4d       	sbci	r31, 0xDD	; 221
    1d20:	80 83       	st	Z, r24
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	cc 0f       	add	r28, r28
    1d26:	dd 1f       	adc	r29, r29
    1d28:	cc 0f       	add	r28, r28
    1d2a:	dd 1f       	adc	r29, r29
    1d2c:	cc 0f       	add	r28, r28
    1d2e:	dd 1f       	adc	r29, r29
    1d30:	cc 57       	subi	r28, 0x7C	; 124
    1d32:	dd 4d       	sbci	r29, 0xDD	; 221
    1d34:	8a 8a       	std	Y+18, r8	; 0x12
    1d36:	9b 8a       	std	Y+19, r9	; 0x13
    1d38:	1c c0       	rjmp	.+56     	; 0x1d72 <udd_ep_trans_complet+0x2c0>
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	41 81       	ldd	r20, Z+1	; 0x01
    1d3e:	52 81       	ldd	r21, Z+2	; 0x02
    1d40:	25 81       	ldd	r18, Z+5	; 0x05
    1d42:	36 81       	ldd	r19, Z+6	; 0x06
    1d44:	24 0f       	add	r18, r20
    1d46:	35 1f       	adc	r19, r21
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ee 0f       	add	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	ee 0f       	add	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	ec 56       	subi	r30, 0x6C	; 108
    1d58:	fd 4d       	sbci	r31, 0xDD	; 221
    1d5a:	20 83       	st	Z, r18
    1d5c:	31 83       	std	Z+1, r19	; 0x01
    1d5e:	cc 0f       	add	r28, r28
    1d60:	dd 1f       	adc	r29, r29
    1d62:	cc 0f       	add	r28, r28
    1d64:	dd 1f       	adc	r29, r29
    1d66:	cc 0f       	add	r28, r28
    1d68:	dd 1f       	adc	r29, r29
    1d6a:	cc 57       	subi	r28, 0x7C	; 124
    1d6c:	dd 4d       	sbci	r29, 0xDD	; 221
    1d6e:	8a 8b       	std	Y+18, r24	; 0x12
    1d70:	9b 8b       	std	Y+19, r25	; 0x13
    1d72:	f7 01       	movw	r30, r14
    1d74:	02 e0       	ldi	r16, 0x02	; 2
    1d76:	06 93       	lac	Z, r16
    1d78:	13 c0       	rjmp	.+38     	; 0x1da0 <udd_ep_trans_complet+0x2ee>
    1d7a:	d8 01       	movw	r26, r16
    1d7c:	8c 91       	ld	r24, X
    1d7e:	80 ff       	sbrs	r24, 0
    1d80:	0f c0       	rjmp	.+30     	; 0x1da0 <udd_ep_trans_complet+0x2ee>
    1d82:	8e 7f       	andi	r24, 0xFE	; 254
    1d84:	8c 93       	st	X, r24
    1d86:	17 96       	adiw	r26, 0x07	; 7
    1d88:	ed 91       	ld	r30, X+
    1d8a:	fc 91       	ld	r31, X
    1d8c:	18 97       	sbiw	r26, 0x08	; 8
    1d8e:	30 97       	sbiw	r30, 0x00	; 0
    1d90:	39 f0       	breq	.+14     	; 0x1da0 <udd_ep_trans_complet+0x2ee>
    1d92:	15 96       	adiw	r26, 0x05	; 5
    1d94:	6d 91       	ld	r22, X+
    1d96:	7c 91       	ld	r23, X
    1d98:	16 97       	sbiw	r26, 0x06	; 6
    1d9a:	4d 2d       	mov	r20, r13
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	19 95       	eicall
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	df 90       	pop	r13
    1dae:	bf 90       	pop	r11
    1db0:	af 90       	pop	r10
    1db2:	9f 90       	pop	r9
    1db4:	8f 90       	pop	r8
    1db6:	08 95       	ret

00001db8 <udd_attach>:
    1db8:	1f 93       	push	r17
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	1f 92       	push	r1
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	8f b7       	in	r24, 0x3f	; 63
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	f8 94       	cli
    1dca:	19 81       	ldd	r17, Y+1	; 0x01
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	ce dc       	rcall	.-1636   	; 0x176c <udd_sleep_mode>
    1dd0:	ea ec       	ldi	r30, 0xCA	; 202
    1dd2:	f4 e0       	ldi	r31, 0x04	; 4
    1dd4:	80 e4       	ldi	r24, 0x40	; 64
    1dd6:	80 83       	st	Z, r24
    1dd8:	80 e2       	ldi	r24, 0x20	; 32
    1dda:	80 83       	st	Z, r24
    1ddc:	e1 ec       	ldi	r30, 0xC1	; 193
    1dde:	f4 e0       	ldi	r31, 0x04	; 4
    1de0:	80 81       	ld	r24, Z
    1de2:	81 60       	ori	r24, 0x01	; 1
    1de4:	80 83       	st	Z, r24
    1de6:	a9 ec       	ldi	r26, 0xC9	; 201
    1de8:	b4 e0       	ldi	r27, 0x04	; 4
    1dea:	8c 91       	ld	r24, X
    1dec:	82 60       	ori	r24, 0x02	; 2
    1dee:	8c 93       	st	X, r24
    1df0:	e8 ec       	ldi	r30, 0xC8	; 200
    1df2:	f4 e0       	ldi	r31, 0x04	; 4
    1df4:	80 81       	ld	r24, Z
    1df6:	80 64       	ori	r24, 0x40	; 64
    1df8:	80 83       	st	Z, r24
    1dfa:	8c 91       	ld	r24, X
    1dfc:	81 60       	ori	r24, 0x01	; 1
    1dfe:	8c 93       	st	X, r24
    1e00:	80 81       	ld	r24, Z
    1e02:	80 68       	ori	r24, 0x80	; 128
    1e04:	80 83       	st	Z, r24
    1e06:	1f bf       	out	0x3f, r17	; 63
    1e08:	0f 90       	pop	r0
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	08 95       	ret

00001e12 <udd_enable>:
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	1f 92       	push	r1
    1e1c:	1f 92       	push	r1
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	00 e6       	ldi	r16, 0x60	; 96
    1e24:	10 e0       	ldi	r17, 0x00	; 0
    1e26:	f8 01       	movw	r30, r16
    1e28:	10 82       	st	Z, r1
    1e2a:	80 e3       	ldi	r24, 0x30	; 48
    1e2c:	0e 94 0e 18 	call	0x301c	; 0x301c <sysclk_enable_usb>
    1e30:	e0 ec       	ldi	r30, 0xC0	; 192
    1e32:	f4 e0       	ldi	r31, 0x04	; 4
    1e34:	80 81       	ld	r24, Z
    1e36:	80 64       	ori	r24, 0x40	; 64
    1e38:	80 83       	st	Z, r24
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	80 83       	st	Z, r24
    1e40:	8f b7       	in	r24, 0x3f	; 63
    1e42:	8a 83       	std	Y+2, r24	; 0x02
    1e44:	f8 94       	cli
    1e46:	1a 81       	ldd	r17, Y+2	; 0x02
    1e48:	e4 e8       	ldi	r30, 0x84	; 132
    1e4a:	f2 e2       	ldi	r31, 0x22	; 34
    1e4c:	15 86       	std	Z+13, r1	; 0x0d
    1e4e:	15 8a       	std	Z+21, r1	; 0x15
    1e50:	15 8e       	std	Z+29, r1	; 0x1d
    1e52:	15 a2       	std	Z+37, r1	; 0x25
    1e54:	15 a6       	std	Z+45, r1	; 0x2d
    1e56:	15 aa       	std	Z+53, r1	; 0x35
    1e58:	e8 e1       	ldi	r30, 0x18	; 24
    1e5a:	f2 e2       	ldi	r31, 0x22	; 34
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8e 7f       	andi	r24, 0xFE	; 254
    1e60:	80 83       	st	Z, r24
    1e62:	e1 e2       	ldi	r30, 0x21	; 33
    1e64:	f2 e2       	ldi	r31, 0x22	; 34
    1e66:	80 81       	ld	r24, Z
    1e68:	8e 7f       	andi	r24, 0xFE	; 254
    1e6a:	80 83       	st	Z, r24
    1e6c:	ea e2       	ldi	r30, 0x2A	; 42
    1e6e:	f2 e2       	ldi	r31, 0x22	; 34
    1e70:	80 81       	ld	r24, Z
    1e72:	8e 7f       	andi	r24, 0xFE	; 254
    1e74:	80 83       	st	Z, r24
    1e76:	e3 e3       	ldi	r30, 0x33	; 51
    1e78:	f2 e2       	ldi	r31, 0x22	; 34
    1e7a:	80 81       	ld	r24, Z
    1e7c:	8e 7f       	andi	r24, 0xFE	; 254
    1e7e:	80 83       	st	Z, r24
    1e80:	6a e1       	ldi	r22, 0x1A	; 26
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <nvm_read_byte>
    1e8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e8c:	19 f0       	breq	.+6      	; 0x1e94 <udd_enable+0x82>
    1e8e:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1e92:	03 c0       	rjmp	.+6      	; 0x1e9a <udd_enable+0x88>
    1e94:	8f e1       	ldi	r24, 0x1F	; 31
    1e96:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1e9a:	6b e1       	ldi	r22, 0x1B	; 27
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <nvm_read_byte>
    1ea4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ea6:	19 f0       	breq	.+6      	; 0x1eae <udd_enable+0x9c>
    1ea8:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <udd_enable+0xa2>
    1eae:	8f e1       	ldi	r24, 0x1F	; 31
    1eb0:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1eb4:	e0 ec       	ldi	r30, 0xC0	; 192
    1eb6:	f4 e0       	ldi	r31, 0x04	; 4
    1eb8:	80 81       	ld	r24, Z
    1eba:	82 60       	ori	r24, 0x02	; 2
    1ebc:	80 83       	st	Z, r24
    1ebe:	80 81       	ld	r24, Z
    1ec0:	80 68       	ori	r24, 0x80	; 128
    1ec2:	80 83       	st	Z, r24
    1ec4:	80 81       	ld	r24, Z
    1ec6:	80 61       	ori	r24, 0x10	; 16
    1ec8:	80 83       	st	Z, r24
    1eca:	80 e9       	ldi	r24, 0x90	; 144
    1ecc:	92 e2       	ldi	r25, 0x22	; 34
    1ece:	86 83       	std	Z+6, r24	; 0x06
    1ed0:	97 83       	std	Z+7, r25	; 0x07
    1ed2:	80 81       	ld	r24, Z
    1ed4:	80 62       	ori	r24, 0x20	; 32
    1ed6:	80 83       	st	Z, r24
    1ed8:	8f ef       	ldi	r24, 0xFF	; 255
    1eda:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    1ede:	e8 ec       	ldi	r30, 0xC8	; 200
    1ee0:	f4 e0       	ldi	r31, 0x04	; 4
    1ee2:	80 81       	ld	r24, Z
    1ee4:	81 60       	ori	r24, 0x01	; 1
    1ee6:	80 83       	st	Z, r24
    1ee8:	10 92 c4 22 	sts	0x22C4, r1	; 0x8022c4 <udd_b_idle>
    1eec:	80 91 19 24 	lds	r24, 0x2419	; 0x802419 <sleepmgr_locks+0x5>
    1ef0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <udd_enable+0xe4>
    1ef4:	ff cf       	rjmp	.-2      	; 0x1ef4 <udd_enable+0xe2>
    1ef6:	8f b7       	in	r24, 0x3f	; 63
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	f8 94       	cli
    1efc:	99 81       	ldd	r25, Y+1	; 0x01
    1efe:	e4 e1       	ldi	r30, 0x14	; 20
    1f00:	f4 e2       	ldi	r31, 0x24	; 36
    1f02:	85 81       	ldd	r24, Z+5	; 0x05
    1f04:	8f 5f       	subi	r24, 0xFF	; 255
    1f06:	85 83       	std	Z+5, r24	; 0x05
    1f08:	9f bf       	out	0x3f, r25	; 63
    1f0a:	56 df       	rcall	.-340    	; 0x1db8 <udd_attach>
    1f0c:	1f bf       	out	0x3f, r17	; 63
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	08 95       	ret

00001f1c <udd_is_high_speed>:
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	08 95       	ret

00001f20 <udd_set_address>:
    1f20:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    1f24:	08 95       	ret

00001f26 <udd_getaddress>:
    1f26:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    1f2a:	08 95       	ret

00001f2c <udd_get_frame_number>:
    1f2c:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <udd_sram+0x3c>
    1f30:	90 91 c1 22 	lds	r25, 0x22C1	; 0x8022c1 <udd_sram+0x3d>
    1f34:	08 95       	ret

00001f36 <udd_get_micro_frame_number>:
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	08 95       	ret

00001f3c <udd_set_setup_payload>:
    1f3c:	e4 e0       	ldi	r30, 0x04	; 4
    1f3e:	f4 e2       	ldi	r31, 0x24	; 36
    1f40:	80 87       	std	Z+8, r24	; 0x08
    1f42:	91 87       	std	Z+9, r25	; 0x09
    1f44:	62 87       	std	Z+10, r22	; 0x0a
    1f46:	73 87       	std	Z+11, r23	; 0x0b
    1f48:	08 95       	ret

00001f4a <udd_ep_alloc>:
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	2f 70       	andi	r18, 0x0F	; 15
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	22 0f       	add	r18, r18
    1f52:	33 1f       	adc	r19, r19
    1f54:	08 2e       	mov	r0, r24
    1f56:	00 0c       	add	r0, r0
    1f58:	99 0b       	sbc	r25, r25
    1f5a:	88 27       	eor	r24, r24
    1f5c:	99 0f       	add	r25, r25
    1f5e:	88 1f       	adc	r24, r24
    1f60:	99 27       	eor	r25, r25
    1f62:	82 0f       	add	r24, r18
    1f64:	93 1f       	adc	r25, r19
    1f66:	fc 01       	movw	r30, r24
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	ee 0f       	add	r30, r30
    1f6e:	ff 1f       	adc	r31, r31
    1f70:	ee 0f       	add	r30, r30
    1f72:	ff 1f       	adc	r31, r31
    1f74:	ec 57       	subi	r30, 0x7C	; 124
    1f76:	fd 4d       	sbci	r31, 0xDD	; 221
    1f78:	25 85       	ldd	r18, Z+13	; 0x0d
    1f7a:	20 7c       	andi	r18, 0xC0	; 192
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <udd_ep_alloc+0x36>
    1f7e:	69 c0       	rjmp	.+210    	; 0x2052 <udd_ep_alloc+0x108>
    1f80:	63 70       	andi	r22, 0x03	; 3
    1f82:	61 30       	cpi	r22, 0x01	; 1
    1f84:	11 f0       	breq	.+4      	; 0x1f8a <udd_ep_alloc+0x40>
    1f86:	18 f4       	brcc	.+6      	; 0x1f8e <udd_ep_alloc+0x44>
    1f88:	04 c0       	rjmp	.+8      	; 0x1f92 <udd_ep_alloc+0x48>
    1f8a:	20 ec       	ldi	r18, 0xC0	; 192
    1f8c:	03 c0       	rjmp	.+6      	; 0x1f94 <udd_ep_alloc+0x4a>
    1f8e:	20 e8       	ldi	r18, 0x80	; 128
    1f90:	01 c0       	rjmp	.+2      	; 0x1f94 <udd_ep_alloc+0x4a>
    1f92:	20 e4       	ldi	r18, 0x40	; 64
    1f94:	40 38       	cpi	r20, 0x80	; 128
    1f96:	51 05       	cpc	r21, r1
    1f98:	e9 f0       	breq	.+58     	; 0x1fd4 <udd_ep_alloc+0x8a>
    1f9a:	50 f4       	brcc	.+20     	; 0x1fb0 <udd_ep_alloc+0x66>
    1f9c:	40 32       	cpi	r20, 0x20	; 32
    1f9e:	51 05       	cpc	r21, r1
    1fa0:	a9 f0       	breq	.+42     	; 0x1fcc <udd_ep_alloc+0x82>
    1fa2:	40 34       	cpi	r20, 0x40	; 64
    1fa4:	51 05       	cpc	r21, r1
    1fa6:	a1 f0       	breq	.+40     	; 0x1fd0 <udd_ep_alloc+0x86>
    1fa8:	40 31       	cpi	r20, 0x10	; 16
    1faa:	51 05       	cpc	r21, r1
    1fac:	d9 f4       	brne	.+54     	; 0x1fe4 <udd_ep_alloc+0x9a>
    1fae:	0c c0       	rjmp	.+24     	; 0x1fc8 <udd_ep_alloc+0x7e>
    1fb0:	41 15       	cp	r20, r1
    1fb2:	32 e0       	ldi	r19, 0x02	; 2
    1fb4:	53 07       	cpc	r21, r19
    1fb6:	91 f0       	breq	.+36     	; 0x1fdc <udd_ep_alloc+0x92>
    1fb8:	4f 3f       	cpi	r20, 0xFF	; 255
    1fba:	33 e0       	ldi	r19, 0x03	; 3
    1fbc:	53 07       	cpc	r21, r19
    1fbe:	81 f0       	breq	.+32     	; 0x1fe0 <udd_ep_alloc+0x96>
    1fc0:	41 15       	cp	r20, r1
    1fc2:	51 40       	sbci	r21, 0x01	; 1
    1fc4:	79 f4       	brne	.+30     	; 0x1fe4 <udd_ep_alloc+0x9a>
    1fc6:	08 c0       	rjmp	.+16     	; 0x1fd8 <udd_ep_alloc+0x8e>
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0d c0       	rjmp	.+26     	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fcc:	42 e0       	ldi	r20, 0x02	; 2
    1fce:	0b c0       	rjmp	.+22     	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fd0:	43 e0       	ldi	r20, 0x03	; 3
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fd4:	44 e0       	ldi	r20, 0x04	; 4
    1fd6:	07 c0       	rjmp	.+14     	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fd8:	45 e0       	ldi	r20, 0x05	; 5
    1fda:	05 c0       	rjmp	.+10     	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fdc:	46 e0       	ldi	r20, 0x06	; 6
    1fde:	03 c0       	rjmp	.+6      	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fe0:	47 e0       	ldi	r20, 0x07	; 7
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <udd_ep_alloc+0x9c>
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	ec 57       	subi	r30, 0x7C	; 124
    1ff6:	fd 4d       	sbci	r31, 0xDD	; 221
    1ff8:	15 86       	std	Z+13, r1	; 0x0d
    1ffa:	36 e0       	ldi	r19, 0x06	; 6
    1ffc:	34 87       	std	Z+12, r19	; 0x0c
    1ffe:	24 2b       	or	r18, r20
    2000:	25 87       	std	Z+13, r18	; 0x0d
    2002:	fc 01       	movw	r30, r24
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	ee 0f       	add	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	ee 0f       	add	r30, r30
    200e:	ff 1f       	adc	r31, r31
    2010:	ec 57       	subi	r30, 0x7C	; 124
    2012:	fd 4d       	sbci	r31, 0xDD	; 221
    2014:	25 85       	ldd	r18, Z+13	; 0x0d
    2016:	20 7c       	andi	r18, 0xC0	; 192
    2018:	20 3c       	cpi	r18, 0xC0	; 192
    201a:	69 f4       	brne	.+26     	; 0x2036 <udd_ep_alloc+0xec>
    201c:	fc 01       	movw	r30, r24
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	ee 0f       	add	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	ee 0f       	add	r30, r30
    2028:	ff 1f       	adc	r31, r31
    202a:	ec 57       	subi	r30, 0x7C	; 124
    202c:	fd 4d       	sbci	r31, 0xDD	; 221
    202e:	25 85       	ldd	r18, Z+13	; 0x0d
    2030:	27 70       	andi	r18, 0x07	; 7
    2032:	27 30       	cpi	r18, 0x07	; 7
    2034:	81 f0       	breq	.+32     	; 0x2056 <udd_ep_alloc+0x10c>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	fc 01       	movw	r30, r24
    2044:	ec 57       	subi	r30, 0x7C	; 124
    2046:	fd 4d       	sbci	r31, 0xDD	; 221
    2048:	85 85       	ldd	r24, Z+13	; 0x0d
    204a:	80 62       	ori	r24, 0x20	; 32
    204c:	85 87       	std	Z+13, r24	; 0x0d
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	08 95       	ret
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	08 95       	ret
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	08 95       	ret

0000205a <udd_ep_is_halted>:
    205a:	e8 2f       	mov	r30, r24
    205c:	ef 70       	andi	r30, 0x0F	; 15
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	ee 0f       	add	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	08 2e       	mov	r0, r24
    2066:	00 0c       	add	r0, r0
    2068:	99 0b       	sbc	r25, r25
    206a:	88 27       	eor	r24, r24
    206c:	99 0f       	add	r25, r25
    206e:	88 1f       	adc	r24, r24
    2070:	99 27       	eor	r25, r25
    2072:	e8 0f       	add	r30, r24
    2074:	f9 1f       	adc	r31, r25
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	ee 0f       	add	r30, r30
    207c:	ff 1f       	adc	r31, r31
    207e:	ee 0f       	add	r30, r30
    2080:	ff 1f       	adc	r31, r31
    2082:	ec 57       	subi	r30, 0x7C	; 124
    2084:	fd 4d       	sbci	r31, 0xDD	; 221
    2086:	85 85       	ldd	r24, Z+13	; 0x0d
    2088:	82 fb       	bst	r24, 2
    208a:	88 27       	eor	r24, r24
    208c:	80 f9       	bld	r24, 0
    208e:	08 95       	ret

00002090 <udd_ep_clear_halt>:
    2090:	0f 93       	push	r16
    2092:	28 2f       	mov	r18, r24
    2094:	2f 70       	andi	r18, 0x0F	; 15
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	a9 01       	movw	r20, r18
    209a:	44 0f       	add	r20, r20
    209c:	55 1f       	adc	r21, r21
    209e:	28 2f       	mov	r18, r24
    20a0:	08 2e       	mov	r0, r24
    20a2:	00 0c       	add	r0, r0
    20a4:	33 0b       	sbc	r19, r19
    20a6:	22 27       	eor	r18, r18
    20a8:	33 0f       	add	r19, r19
    20aa:	22 1f       	adc	r18, r18
    20ac:	33 27       	eor	r19, r19
    20ae:	24 0f       	add	r18, r20
    20b0:	35 1f       	adc	r19, r21
    20b2:	a9 01       	movw	r20, r18
    20b4:	44 0f       	add	r20, r20
    20b6:	55 1f       	adc	r21, r21
    20b8:	44 0f       	add	r20, r20
    20ba:	55 1f       	adc	r21, r21
    20bc:	44 0f       	add	r20, r20
    20be:	55 1f       	adc	r21, r21
    20c0:	fa 01       	movw	r30, r20
    20c2:	e0 57       	subi	r30, 0x70	; 112
    20c4:	fd 4d       	sbci	r31, 0xDD	; 221
    20c6:	01 e0       	ldi	r16, 0x01	; 1
    20c8:	06 93       	lac	Z, r16
    20ca:	fa 01       	movw	r30, r20
    20cc:	ec 57       	subi	r30, 0x7C	; 124
    20ce:	fd 4d       	sbci	r31, 0xDD	; 221
    20d0:	95 85       	ldd	r25, Z+13	; 0x0d
    20d2:	92 ff       	sbrs	r25, 2
    20d4:	11 c0       	rjmp	.+34     	; 0x20f8 <udd_ep_clear_halt+0x68>
    20d6:	fa 01       	movw	r30, r20
    20d8:	ec 57       	subi	r30, 0x7C	; 124
    20da:	fd 4d       	sbci	r31, 0xDD	; 221
    20dc:	95 85       	ldd	r25, Z+13	; 0x0d
    20de:	9b 7f       	andi	r25, 0xFB	; 251
    20e0:	95 87       	std	Z+13, r25	; 0x0d
    20e2:	5a dc       	rcall	.-1868   	; 0x1998 <udd_ep_get_job>
    20e4:	fc 01       	movw	r30, r24
    20e6:	80 81       	ld	r24, Z
    20e8:	80 ff       	sbrs	r24, 0
    20ea:	06 c0       	rjmp	.+12     	; 0x20f8 <udd_ep_clear_halt+0x68>
    20ec:	8e 7f       	andi	r24, 0xFE	; 254
    20ee:	80 83       	st	Z, r24
    20f0:	07 80       	ldd	r0, Z+7	; 0x07
    20f2:	f0 85       	ldd	r31, Z+8	; 0x08
    20f4:	e0 2d       	mov	r30, r0
    20f6:	19 95       	eicall
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	0f 91       	pop	r16
    20fc:	08 95       	ret

000020fe <udd_ep_run>:
    20fe:	5f 92       	push	r5
    2100:	6f 92       	push	r6
    2102:	7f 92       	push	r7
    2104:	8f 92       	push	r8
    2106:	9f 92       	push	r9
    2108:	af 92       	push	r10
    210a:	bf 92       	push	r11
    210c:	cf 92       	push	r12
    210e:	df 92       	push	r13
    2110:	ef 92       	push	r14
    2112:	ff 92       	push	r15
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	1f 92       	push	r1
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	78 2e       	mov	r7, r24
    2124:	66 2e       	mov	r6, r22
    2126:	4a 01       	movw	r8, r20
    2128:	59 01       	movw	r10, r18
    212a:	36 dc       	rcall	.-1940   	; 0x1998 <udd_ep_get_job>
    212c:	6c 01       	movw	r12, r24
    212e:	57 2c       	mov	r5, r7
    2130:	55 1c       	adc	r5, r5
    2132:	55 24       	eor	r5, r5
    2134:	55 1c       	adc	r5, r5
    2136:	87 2d       	mov	r24, r7
    2138:	8f 70       	andi	r24, 0x0F	; 15
    213a:	e8 2e       	mov	r14, r24
    213c:	f1 2c       	mov	r15, r1
    213e:	ee 0c       	add	r14, r14
    2140:	ff 1c       	adc	r15, r15
    2142:	e5 0c       	add	r14, r5
    2144:	f1 1c       	adc	r15, r1
    2146:	f7 01       	movw	r30, r14
    2148:	ee 0f       	add	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	ee 0f       	add	r30, r30
    214e:	ff 1f       	adc	r31, r31
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	ec 57       	subi	r30, 0x7C	; 124
    2156:	fd 4d       	sbci	r31, 0xDD	; 221
    2158:	85 85       	ldd	r24, Z+13	; 0x0d
    215a:	80 7c       	andi	r24, 0xC0	; 192
    215c:	09 f4       	brne	.+2      	; 0x2160 <udd_ep_run+0x62>
    215e:	82 c0       	rjmp	.+260    	; 0x2264 <udd_ep_run+0x166>
    2160:	f7 01       	movw	r30, r14
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	ee 0f       	add	r30, r30
    2168:	ff 1f       	adc	r31, r31
    216a:	ee 0f       	add	r30, r30
    216c:	ff 1f       	adc	r31, r31
    216e:	ec 57       	subi	r30, 0x7C	; 124
    2170:	fd 4d       	sbci	r31, 0xDD	; 221
    2172:	85 85       	ldd	r24, Z+13	; 0x0d
    2174:	80 7c       	andi	r24, 0xC0	; 192
    2176:	80 3c       	cpi	r24, 0xC0	; 192
    2178:	61 f0       	breq	.+24     	; 0x2192 <udd_ep_run+0x94>
    217a:	f7 01       	movw	r30, r14
    217c:	ee 0f       	add	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	ee 0f       	add	r30, r30
    2182:	ff 1f       	adc	r31, r31
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	ec 57       	subi	r30, 0x7C	; 124
    218a:	fd 4d       	sbci	r31, 0xDD	; 221
    218c:	85 85       	ldd	r24, Z+13	; 0x0d
    218e:	82 fd       	sbrc	r24, 2
    2190:	6b c0       	rjmp	.+214    	; 0x2268 <udd_ep_run+0x16a>
    2192:	8f b7       	in	r24, 0x3f	; 63
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	f8 94       	cli
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	f6 01       	movw	r30, r12
    219c:	90 81       	ld	r25, Z
    219e:	90 ff       	sbrs	r25, 0
    21a0:	03 c0       	rjmp	.+6      	; 0x21a8 <udd_ep_run+0xaa>
    21a2:	8f bf       	out	0x3f, r24	; 63
    21a4:	51 2c       	mov	r5, r1
    21a6:	61 c0       	rjmp	.+194    	; 0x226a <udd_ep_run+0x16c>
    21a8:	f6 01       	movw	r30, r12
    21aa:	90 81       	ld	r25, Z
    21ac:	91 60       	ori	r25, 0x01	; 1
    21ae:	90 83       	st	Z, r25
    21b0:	8f bf       	out	0x3f, r24	; 63
    21b2:	81 82       	std	Z+1, r8	; 0x01
    21b4:	92 82       	std	Z+2, r9	; 0x02
    21b6:	a3 82       	std	Z+3, r10	; 0x03
    21b8:	b4 82       	std	Z+4, r11	; 0x04
    21ba:	15 82       	std	Z+5, r1	; 0x05
    21bc:	16 82       	std	Z+6, r1	; 0x06
    21be:	07 83       	std	Z+7, r16	; 0x07
    21c0:	10 87       	std	Z+8, r17	; 0x08
    21c2:	61 10       	cpse	r6, r1
    21c4:	06 c0       	rjmp	.+12     	; 0x21d2 <udd_ep_run+0xd4>
    21c6:	91 e0       	ldi	r25, 0x01	; 1
    21c8:	a1 14       	cp	r10, r1
    21ca:	b1 04       	cpc	r11, r1
    21cc:	19 f0       	breq	.+6      	; 0x21d4 <udd_ep_run+0xd6>
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <udd_ep_run+0xd6>
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	f6 01       	movw	r30, r12
    21d6:	80 81       	ld	r24, Z
    21d8:	90 fb       	bst	r25, 0
    21da:	81 f9       	bld	r24, 1
    21dc:	8b 7f       	andi	r24, 0xFB	; 251
    21de:	80 83       	st	Z, r24
    21e0:	55 20       	and	r5, r5
    21e2:	61 f0       	breq	.+24     	; 0x21fc <udd_ep_run+0xfe>
    21e4:	f7 01       	movw	r30, r14
    21e6:	ee 0f       	add	r30, r30
    21e8:	ff 1f       	adc	r31, r31
    21ea:	ee 0f       	add	r30, r30
    21ec:	ff 1f       	adc	r31, r31
    21ee:	ee 0f       	add	r30, r30
    21f0:	ff 1f       	adc	r31, r31
    21f2:	ec 57       	subi	r30, 0x7C	; 124
    21f4:	fd 4d       	sbci	r31, 0xDD	; 221
    21f6:	12 8a       	std	Z+18, r1	; 0x12
    21f8:	13 8a       	std	Z+19, r1	; 0x13
    21fa:	2f c0       	rjmp	.+94     	; 0x225a <udd_ep_run+0x15c>
    21fc:	f7 01       	movw	r30, r14
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	ee 0f       	add	r30, r30
    2204:	ff 1f       	adc	r31, r31
    2206:	ee 0f       	add	r30, r30
    2208:	ff 1f       	adc	r31, r31
    220a:	ec 57       	subi	r30, 0x7C	; 124
    220c:	fd 4d       	sbci	r31, 0xDD	; 221
    220e:	85 85       	ldd	r24, Z+13	; 0x0d
    2210:	80 7c       	andi	r24, 0xC0	; 192
    2212:	80 3c       	cpi	r24, 0xC0	; 192
    2214:	a9 f4       	brne	.+42     	; 0x2240 <udd_ep_run+0x142>
    2216:	c7 01       	movw	r24, r14
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	80 57       	subi	r24, 0x70	; 112
    2226:	9d 4d       	sbci	r25, 0xDD	; 221
    2228:	8e db       	rcall	.-2276   	; 0x1946 <udd_ep_get_size>
    222a:	bc 01       	movw	r22, r24
    222c:	c5 01       	movw	r24, r10
    222e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__udivmodhi4>
    2232:	89 2b       	or	r24, r25
    2234:	29 f0       	breq	.+10     	; 0x2240 <udd_ep_run+0x142>
    2236:	f6 01       	movw	r30, r12
    2238:	80 81       	ld	r24, Z
    223a:	8e 7f       	andi	r24, 0xFE	; 254
    223c:	80 83       	st	Z, r24
    223e:	15 c0       	rjmp	.+42     	; 0x226a <udd_ep_run+0x16c>
    2240:	f7 01       	movw	r30, r14
    2242:	ee 0f       	add	r30, r30
    2244:	ff 1f       	adc	r31, r31
    2246:	ee 0f       	add	r30, r30
    2248:	ff 1f       	adc	r31, r31
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	ec 57       	subi	r30, 0x7C	; 124
    2250:	fd 4d       	sbci	r31, 0xDD	; 221
    2252:	16 86       	std	Z+14, r1	; 0x0e
    2254:	17 86       	std	Z+15, r1	; 0x0f
    2256:	12 8a       	std	Z+18, r1	; 0x12
    2258:	13 8a       	std	Z+19, r1	; 0x13
    225a:	87 2d       	mov	r24, r7
    225c:	2a dc       	rcall	.-1964   	; 0x1ab2 <udd_ep_trans_complet>
    225e:	55 24       	eor	r5, r5
    2260:	53 94       	inc	r5
    2262:	03 c0       	rjmp	.+6      	; 0x226a <udd_ep_run+0x16c>
    2264:	51 2c       	mov	r5, r1
    2266:	01 c0       	rjmp	.+2      	; 0x226a <udd_ep_run+0x16c>
    2268:	51 2c       	mov	r5, r1
    226a:	85 2d       	mov	r24, r5
    226c:	0f 90       	pop	r0
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	1f 91       	pop	r17
    2274:	0f 91       	pop	r16
    2276:	ff 90       	pop	r15
    2278:	ef 90       	pop	r14
    227a:	df 90       	pop	r13
    227c:	cf 90       	pop	r12
    227e:	bf 90       	pop	r11
    2280:	af 90       	pop	r10
    2282:	9f 90       	pop	r9
    2284:	8f 90       	pop	r8
    2286:	7f 90       	pop	r7
    2288:	6f 90       	pop	r6
    228a:	5f 90       	pop	r5
    228c:	08 95       	ret

0000228e <udd_ep_abort>:
    228e:	ff 92       	push	r15
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	18 2f       	mov	r17, r24
    229a:	f8 2e       	mov	r15, r24
    229c:	ff 1c       	adc	r15, r15
    229e:	ff 24       	eor	r15, r15
    22a0:	ff 1c       	adc	r15, r15
    22a2:	c8 2f       	mov	r28, r24
    22a4:	cf 70       	andi	r28, 0x0F	; 15
    22a6:	d0 e0       	ldi	r29, 0x00	; 0
    22a8:	cc 0f       	add	r28, r28
    22aa:	dd 1f       	adc	r29, r29
    22ac:	cf 0d       	add	r28, r15
    22ae:	d1 1d       	adc	r29, r1
    22b0:	73 db       	rcall	.-2330   	; 0x1998 <udd_ep_get_job>
    22b2:	dc 01       	movw	r26, r24
    22b4:	fe 01       	movw	r30, r28
    22b6:	ee 0f       	add	r30, r30
    22b8:	ff 1f       	adc	r31, r31
    22ba:	ee 0f       	add	r30, r30
    22bc:	ff 1f       	adc	r31, r31
    22be:	ee 0f       	add	r30, r30
    22c0:	ff 1f       	adc	r31, r31
    22c2:	e0 57       	subi	r30, 0x70	; 112
    22c4:	fd 4d       	sbci	r31, 0xDD	; 221
    22c6:	02 e0       	ldi	r16, 0x02	; 2
    22c8:	05 93       	las	Z, r16
    22ca:	8c 91       	ld	r24, X
    22cc:	80 ff       	sbrs	r24, 0
    22ce:	22 c0       	rjmp	.+68     	; 0x2314 <udd_ep_abort+0x86>
    22d0:	8e 7f       	andi	r24, 0xFE	; 254
    22d2:	8c 93       	st	X, r24
    22d4:	17 96       	adiw	r26, 0x07	; 7
    22d6:	ed 91       	ld	r30, X+
    22d8:	fc 91       	ld	r31, X
    22da:	18 97       	sbiw	r26, 0x08	; 8
    22dc:	30 97       	sbiw	r30, 0x00	; 0
    22de:	d1 f0       	breq	.+52     	; 0x2314 <udd_ep_abort+0x86>
    22e0:	ff 20       	and	r15, r15
    22e2:	59 f0       	breq	.+22     	; 0x22fa <udd_ep_abort+0x6c>
    22e4:	cc 0f       	add	r28, r28
    22e6:	dd 1f       	adc	r29, r29
    22e8:	cc 0f       	add	r28, r28
    22ea:	dd 1f       	adc	r29, r29
    22ec:	cc 0f       	add	r28, r28
    22ee:	dd 1f       	adc	r29, r29
    22f0:	cc 57       	subi	r28, 0x7C	; 124
    22f2:	dd 4d       	sbci	r29, 0xDD	; 221
    22f4:	6a 89       	ldd	r22, Y+18	; 0x12
    22f6:	7b 89       	ldd	r23, Y+19	; 0x13
    22f8:	0a c0       	rjmp	.+20     	; 0x230e <udd_ep_abort+0x80>
    22fa:	cc 0f       	add	r28, r28
    22fc:	dd 1f       	adc	r29, r29
    22fe:	cc 0f       	add	r28, r28
    2300:	dd 1f       	adc	r29, r29
    2302:	cc 0f       	add	r28, r28
    2304:	dd 1f       	adc	r29, r29
    2306:	cc 57       	subi	r28, 0x7C	; 124
    2308:	dd 4d       	sbci	r29, 0xDD	; 221
    230a:	6e 85       	ldd	r22, Y+14	; 0x0e
    230c:	7f 85       	ldd	r23, Y+15	; 0x0f
    230e:	41 2f       	mov	r20, r17
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	19 95       	eicall
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	1f 91       	pop	r17
    231a:	0f 91       	pop	r16
    231c:	ff 90       	pop	r15
    231e:	08 95       	ret

00002320 <udd_ep_free>:
    2320:	cf 93       	push	r28
    2322:	c8 2f       	mov	r28, r24
    2324:	b4 df       	rcall	.-152    	; 0x228e <udd_ep_abort>
    2326:	ec 2f       	mov	r30, r28
    2328:	ef 70       	andi	r30, 0x0F	; 15
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	ee 0f       	add	r30, r30
    232e:	ff 1f       	adc	r31, r31
    2330:	8c 2f       	mov	r24, r28
    2332:	cc 0f       	add	r28, r28
    2334:	99 0b       	sbc	r25, r25
    2336:	88 27       	eor	r24, r24
    2338:	99 0f       	add	r25, r25
    233a:	88 1f       	adc	r24, r24
    233c:	99 27       	eor	r25, r25
    233e:	e8 0f       	add	r30, r24
    2340:	f9 1f       	adc	r31, r25
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	ec 57       	subi	r30, 0x7C	; 124
    2350:	fd 4d       	sbci	r31, 0xDD	; 221
    2352:	15 86       	std	Z+13, r1	; 0x0d
    2354:	cf 91       	pop	r28
    2356:	08 95       	ret

00002358 <udd_ep_set_halt>:
    2358:	e8 2f       	mov	r30, r24
    235a:	ef 70       	andi	r30, 0x0F	; 15
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	ee 0f       	add	r30, r30
    2360:	ff 1f       	adc	r31, r31
    2362:	28 2f       	mov	r18, r24
    2364:	08 2e       	mov	r0, r24
    2366:	00 0c       	add	r0, r0
    2368:	33 0b       	sbc	r19, r19
    236a:	22 27       	eor	r18, r18
    236c:	33 0f       	add	r19, r19
    236e:	22 1f       	adc	r18, r18
    2370:	33 27       	eor	r19, r19
    2372:	e2 0f       	add	r30, r18
    2374:	f3 1f       	adc	r31, r19
    2376:	ee 0f       	add	r30, r30
    2378:	ff 1f       	adc	r31, r31
    237a:	ee 0f       	add	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	ee 0f       	add	r30, r30
    2380:	ff 1f       	adc	r31, r31
    2382:	ec 57       	subi	r30, 0x7C	; 124
    2384:	fd 4d       	sbci	r31, 0xDD	; 221
    2386:	95 85       	ldd	r25, Z+13	; 0x0d
    2388:	94 60       	ori	r25, 0x04	; 4
    238a:	95 87       	std	Z+13, r25	; 0x0d
    238c:	80 df       	rcall	.-256    	; 0x228e <udd_ep_abort>
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	08 95       	ret

00002392 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2392:	1f 92       	push	r1
    2394:	0f 92       	push	r0
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	0f 92       	push	r0
    239a:	11 24       	eor	r1, r1
    239c:	0b b6       	in	r0, 0x3b	; 59
    239e:	0f 92       	push	r0
    23a0:	0f 93       	push	r16
    23a2:	2f 93       	push	r18
    23a4:	3f 93       	push	r19
    23a6:	4f 93       	push	r20
    23a8:	5f 93       	push	r21
    23aa:	6f 93       	push	r22
    23ac:	7f 93       	push	r23
    23ae:	8f 93       	push	r24
    23b0:	9f 93       	push	r25
    23b2:	af 93       	push	r26
    23b4:	bf 93       	push	r27
    23b6:	ef 93       	push	r30
    23b8:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    23ba:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    23be:	88 23       	and	r24, r24
    23c0:	34 f4       	brge	.+12     	; 0x23ce <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    23c2:	80 e8       	ldi	r24, 0x80	; 128
    23c4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    23c8:	0e 94 b6 1b 	call	0x376c	; 0x376c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    23cc:	88 c0       	rjmp	.+272    	; 0x24de <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    23ce:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    23d2:	82 ff       	sbrs	r24, 2
    23d4:	20 c0       	rjmp	.+64     	; 0x2416 <__vector_125+0x84>
		udd_ack_underflow_event();
    23d6:	84 e0       	ldi	r24, 0x04	; 4
    23d8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    23dc:	80 91 98 22 	lds	r24, 0x2298	; 0x802298 <udd_sram+0x14>
    23e0:	86 ff       	sbrs	r24, 6
    23e2:	7d c0       	rjmp	.+250    	; 0x24de <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    23e4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    23e8:	81 fd       	sbrc	r24, 1
    23ea:	79 c0       	rjmp	.+242    	; 0x24de <__vector_125+0x14c>
    23ec:	f0 da       	rcall	.-2592   	; 0x19ce <udd_ctrl_interrupt_tc_setup>
    23ee:	81 11       	cpse	r24, r1
    23f0:	76 c0       	rjmp	.+236    	; 0x24de <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    23f2:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_ep_control_state>
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	11 f4       	brne	.+4      	; 0x23fe <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    23fa:	23 da       	rcall	.-3002   	; 0x1842 <udd_ctrl_send_zlp_in>
    23fc:	70 c0       	rjmp	.+224    	; 0x24de <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    23fe:	84 30       	cpi	r24, 0x04	; 4
    2400:	09 f0       	breq	.+2      	; 0x2404 <__vector_125+0x72>
    2402:	6d c0       	rjmp	.+218    	; 0x24de <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2404:	e9 e9       	ldi	r30, 0x99	; 153
    2406:	f2 e2       	ldi	r31, 0x22	; 34
    2408:	04 e0       	ldi	r16, 0x04	; 4
    240a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    240c:	e1 e9       	ldi	r30, 0x91	; 145
    240e:	f2 e2       	ldi	r31, 0x22	; 34
    2410:	04 e0       	ldi	r16, 0x04	; 4
    2412:	05 93       	las	Z, r16
    2414:	64 c0       	rjmp	.+200    	; 0x24de <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2416:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    241a:	81 ff       	sbrs	r24, 1
    241c:	5b c0       	rjmp	.+182    	; 0x24d4 <__vector_125+0x142>
		udd_ack_overflow_event();
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2424:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <udd_sram+0xc>
    2428:	86 ff       	sbrs	r24, 6
    242a:	59 c0       	rjmp	.+178    	; 0x24de <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    242c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2430:	81 fd       	sbrc	r24, 1
    2432:	55 c0       	rjmp	.+170    	; 0x24de <__vector_125+0x14c>
    2434:	cc da       	rcall	.-2664   	; 0x19ce <udd_ctrl_interrupt_tc_setup>
    2436:	81 11       	cpse	r24, r1
    2438:	52 c0       	rjmp	.+164    	; 0x24de <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    243a:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_ep_control_state>
    243e:	82 30       	cpi	r24, 0x02	; 2
    2440:	41 f4       	brne	.+16     	; 0x2452 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2442:	84 e0       	ldi	r24, 0x04	; 4
    2444:	80 93 80 22 	sts	0x2280, r24	; 0x802280 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2448:	e0 e9       	ldi	r30, 0x90	; 144
    244a:	f2 e2       	ldi	r31, 0x22	; 34
    244c:	02 e0       	ldi	r16, 0x02	; 2
    244e:	06 93       	lac	Z, r16
    2450:	46 c0       	rjmp	.+140    	; 0x24de <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2452:	83 30       	cpi	r24, 0x03	; 3
    2454:	09 f0       	breq	.+2      	; 0x2458 <__vector_125+0xc6>
    2456:	43 c0       	rjmp	.+134    	; 0x24de <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2458:	e9 e9       	ldi	r30, 0x99	; 153
    245a:	f2 e2       	ldi	r31, 0x22	; 34
    245c:	04 e0       	ldi	r16, 0x04	; 4
    245e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2460:	e1 e9       	ldi	r30, 0x91	; 145
    2462:	f2 e2       	ldi	r31, 0x22	; 34
    2464:	04 e0       	ldi	r16, 0x04	; 4
    2466:	05 93       	las	Z, r16
    2468:	3a c0       	rjmp	.+116    	; 0x24de <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    246a:	80 e1       	ldi	r24, 0x10	; 16
    246c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	0d df       	rcall	.-486    	; 0x228e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2474:	81 e8       	ldi	r24, 0x81	; 129
    2476:	0b df       	rcall	.-490    	; 0x228e <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	09 df       	rcall	.-494    	; 0x228e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    247c:	82 e8       	ldi	r24, 0x82	; 130
    247e:	07 df       	rcall	.-498    	; 0x228e <udd_ep_abort>
		}
#endif
		udc_reset();
    2480:	0e 94 8d 1b 	call	0x371a	; 0x371a <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2484:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2488:	e4 e8       	ldi	r30, 0x84	; 132
    248a:	f2 e2       	ldi	r31, 0x22	; 34
    248c:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    248e:	96 e0       	ldi	r25, 0x06	; 6
    2490:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2492:	83 e4       	ldi	r24, 0x43	; 67
    2494:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2496:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2498:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    249a:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    249c:	8c e3       	ldi	r24, 0x3C	; 60
    249e:	92 e2       	ldi	r25, 0x22	; 34
    24a0:	80 8b       	std	Z+16, r24	; 0x10
    24a2:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    24a4:	9b d9       	rcall	.-3274   	; 0x17dc <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    24a6:	1b c0       	rjmp	.+54     	; 0x24de <__vector_125+0x14c>
	}

	if (udd_is_suspend_event()) {
    24a8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    24ac:	86 ff       	sbrs	r24, 6
    24ae:	07 c0       	rjmp	.+14     	; 0x24be <__vector_125+0x12c>
		udd_ack_suspend_event();
    24b0:	80 e4       	ldi	r24, 0x40	; 64
    24b2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	59 d9       	rcall	.-3406   	; 0x176c <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    24ba:	a4 d2       	rcall	.+1352   	; 0x2a04 <usb_callback_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    24bc:	10 c0       	rjmp	.+32     	; 0x24de <__vector_125+0x14c>
	}

	if (udd_is_resume_event()) {
    24be:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    24c2:	85 ff       	sbrs	r24, 5
    24c4:	0c c0       	rjmp	.+24     	; 0x24de <__vector_125+0x14c>
		udd_ack_resume_event();
    24c6:	80 e2       	ldi	r24, 0x20	; 32
    24c8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	4e d9       	rcall	.-3428   	; 0x176c <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    24d0:	9a d2       	rcall	.+1332   	; 0x2a06 <usb_callback_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    24d2:	05 c0       	rjmp	.+10     	; 0x24de <__vector_125+0x14c>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    24d4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    24d8:	84 fd       	sbrc	r24, 4
    24da:	c7 cf       	rjmp	.-114    	; 0x246a <__vector_125+0xd8>
    24dc:	e5 cf       	rjmp	.-54     	; 0x24a8 <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    24de:	ff 91       	pop	r31
    24e0:	ef 91       	pop	r30
    24e2:	bf 91       	pop	r27
    24e4:	af 91       	pop	r26
    24e6:	9f 91       	pop	r25
    24e8:	8f 91       	pop	r24
    24ea:	7f 91       	pop	r23
    24ec:	6f 91       	pop	r22
    24ee:	5f 91       	pop	r21
    24f0:	4f 91       	pop	r20
    24f2:	3f 91       	pop	r19
    24f4:	2f 91       	pop	r18
    24f6:	0f 91       	pop	r16
    24f8:	0f 90       	pop	r0
    24fa:	0b be       	out	0x3b, r0	; 59
    24fc:	0f 90       	pop	r0
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	0f 90       	pop	r0
    2502:	1f 90       	pop	r1
    2504:	18 95       	reti

00002506 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2506:	1f 92       	push	r1
    2508:	0f 92       	push	r0
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	0f 92       	push	r0
    250e:	11 24       	eor	r1, r1
    2510:	0b b6       	in	r0, 0x3b	; 59
    2512:	0f 92       	push	r0
    2514:	0f 93       	push	r16
    2516:	1f 93       	push	r17
    2518:	2f 93       	push	r18
    251a:	3f 93       	push	r19
    251c:	4f 93       	push	r20
    251e:	5f 93       	push	r21
    2520:	6f 93       	push	r22
    2522:	7f 93       	push	r23
    2524:	8f 93       	push	r24
    2526:	9f 93       	push	r25
    2528:	af 93       	push	r26
    252a:	bf 93       	push	r27
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	ef 93       	push	r30
    2532:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2534:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2538:	81 fd       	sbrc	r24, 1
    253a:	03 c0       	rjmp	.+6      	; 0x2542 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    253c:	48 da       	rcall	.-2928   	; 0x19ce <udd_ctrl_interrupt_tc_setup>
    253e:	81 11       	cpse	r24, r1
    2540:	c4 c0       	rjmp	.+392    	; 0x26ca <__vector_126+0x1c4>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2548:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    254c:	81 95       	neg	r24
    254e:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2550:	e0 e9       	ldi	r30, 0x90	; 144
    2552:	f2 e2       	ldi	r31, 0x22	; 34
    2554:	e8 1b       	sub	r30, r24
    2556:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2558:	20 81       	ld	r18, Z
    255a:	31 81       	ldd	r19, Z+1	; 0x01
    255c:	20 59       	subi	r18, 0x90	; 144
    255e:	32 42       	sbci	r19, 0x22	; 34
    2560:	36 95       	lsr	r19
    2562:	27 95       	ror	r18
    2564:	36 95       	lsr	r19
    2566:	27 95       	ror	r18
    2568:	36 95       	lsr	r19
    256a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    256c:	82 2f       	mov	r24, r18
    256e:	86 95       	lsr	r24
    2570:	20 fd       	sbrc	r18, 0
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <__vector_126+0x72>
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	01 c0       	rjmp	.+2      	; 0x257a <__vector_126+0x74>
    2578:	90 e8       	ldi	r25, 0x80	; 128
    257a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    257c:	e8 2f       	mov	r30, r24
    257e:	ef 70       	andi	r30, 0x0F	; 15
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	ee 0f       	add	r30, r30
    2584:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2586:	28 2f       	mov	r18, r24
    2588:	08 2e       	mov	r0, r24
    258a:	00 0c       	add	r0, r0
    258c:	33 0b       	sbc	r19, r19
    258e:	22 27       	eor	r18, r18
    2590:	33 0f       	add	r19, r19
    2592:	22 1f       	adc	r18, r18
    2594:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2596:	e2 0f       	add	r30, r18
    2598:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    259a:	df 01       	movw	r26, r30
    259c:	aa 0f       	add	r26, r26
    259e:	bb 1f       	adc	r27, r27
    25a0:	aa 0f       	add	r26, r26
    25a2:	bb 1f       	adc	r27, r27
    25a4:	aa 0f       	add	r26, r26
    25a6:	bb 1f       	adc	r27, r27
    25a8:	ac 57       	subi	r26, 0x7C	; 124
    25aa:	bd 4d       	sbci	r27, 0xDD	; 221
    25ac:	1c 96       	adiw	r26, 0x0c	; 12
    25ae:	9c 91       	ld	r25, X
    25b0:	95 ff       	sbrs	r25, 5
    25b2:	8b c0       	rjmp	.+278    	; 0x26ca <__vector_126+0x1c4>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    25b4:	ee 0f       	add	r30, r30
    25b6:	ff 1f       	adc	r31, r31
    25b8:	ee 0f       	add	r30, r30
    25ba:	ff 1f       	adc	r31, r31
    25bc:	ee 0f       	add	r30, r30
    25be:	ff 1f       	adc	r31, r31
    25c0:	e0 57       	subi	r30, 0x70	; 112
    25c2:	fd 4d       	sbci	r31, 0xDD	; 221
    25c4:	00 e2       	ldi	r16, 0x20	; 32
    25c6:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    25c8:	81 11       	cpse	r24, r1
    25ca:	7a c0       	rjmp	.+244    	; 0x26c0 <__vector_126+0x1ba>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    25cc:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_ep_control_state>
    25d0:	84 30       	cpi	r24, 0x04	; 4
    25d2:	19 f4       	brne	.+6      	; 0x25da <__vector_126+0xd4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    25d4:	44 d9       	rcall	.-3448   	; 0x185e <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    25d6:	02 d9       	rcall	.-3580   	; 0x17dc <udd_ctrl_init>
    25d8:	78 c0       	rjmp	.+240    	; 0x26ca <__vector_126+0x1c4>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    25da:	00 91 92 22 	lds	r16, 0x2292	; 0x802292 <udd_sram+0xe>
    25de:	10 91 93 22 	lds	r17, 0x2293	; 0x802293 <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    25e2:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <udd_g_ctrlreq+0xa>
    25e6:	90 91 0f 24 	lds	r25, 0x240F	; 0x80240f <udd_g_ctrlreq+0xb>
    25ea:	c0 91 7c 22 	lds	r28, 0x227C	; 0x80227c <udd_ctrl_payload_nb_trans>
    25ee:	d0 91 7d 22 	lds	r29, 0x227D	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    25f2:	9e 01       	movw	r18, r28
    25f4:	20 0f       	add	r18, r16
    25f6:	31 1f       	adc	r19, r17
    25f8:	82 17       	cp	r24, r18
    25fa:	93 07       	cpc	r25, r19
    25fc:	18 f4       	brcc	.+6      	; 0x2604 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    25fe:	8c 01       	movw	r16, r24
    2600:	0c 1b       	sub	r16, r28
    2602:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2604:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <udd_g_ctrlreq+0x8>
    2608:	90 91 0d 24 	lds	r25, 0x240D	; 0x80240d <udd_g_ctrlreq+0x9>
    260c:	a8 01       	movw	r20, r16
    260e:	6c e3       	ldi	r22, 0x3C	; 60
    2610:	72 e2       	ldi	r23, 0x22	; 34
    2612:	8c 0f       	add	r24, r28
    2614:	9d 1f       	adc	r25, r29
    2616:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    261a:	c0 0f       	add	r28, r16
    261c:	d1 1f       	adc	r29, r17
    261e:	c0 93 7c 22 	sts	0x227C, r28	; 0x80227c <udd_ctrl_payload_nb_trans>
    2622:	d0 93 7d 22 	sts	0x227D, r29	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2626:	00 34       	cpi	r16, 0x40	; 64
    2628:	11 05       	cpc	r17, r1
    262a:	69 f4       	brne	.+26     	; 0x2646 <__vector_126+0x140>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    262c:	80 91 7e 22 	lds	r24, 0x227E	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    2630:	90 91 7f 22 	lds	r25, 0x227F	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
    2634:	8c 0f       	add	r24, r28
    2636:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2638:	20 91 0a 24 	lds	r18, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    263c:	30 91 0b 24 	lds	r19, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    2640:	82 17       	cp	r24, r18
    2642:	93 07       	cpc	r25, r19
    2644:	80 f0       	brcs	.+32     	; 0x2666 <__vector_126+0x160>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2646:	e4 e0       	ldi	r30, 0x04	; 4
    2648:	f4 e2       	ldi	r31, 0x24	; 36
    264a:	c2 87       	std	Z+10, r28	; 0x0a
    264c:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    264e:	06 84       	ldd	r0, Z+14	; 0x0e
    2650:	f7 85       	ldd	r31, Z+15	; 0x0f
    2652:	e0 2d       	mov	r30, r0
    2654:	30 97       	sbiw	r30, 0x00	; 0
    2656:	29 f0       	breq	.+10     	; 0x2662 <__vector_126+0x15c>
			if (!udd_g_ctrlreq.over_under_run()) {
    2658:	19 95       	eicall
    265a:	81 11       	cpse	r24, r1
    265c:	02 c0       	rjmp	.+4      	; 0x2662 <__vector_126+0x15c>
				// Stall ZLP
				udd_ctrl_stall_data();
    265e:	e3 d8       	rcall	.-3642   	; 0x1826 <udd_ctrl_stall_data>
    2660:	34 c0       	rjmp	.+104    	; 0x26ca <__vector_126+0x1c4>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2662:	ef d8       	rcall	.-3618   	; 0x1842 <udd_ctrl_send_zlp_in>
    2664:	32 c0       	rjmp	.+100    	; 0x26ca <__vector_126+0x1c4>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2666:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <udd_g_ctrlreq+0xa>
    266a:	90 91 0f 24 	lds	r25, 0x240F	; 0x80240f <udd_g_ctrlreq+0xb>
    266e:	c8 17       	cp	r28, r24
    2670:	d9 07       	cpc	r29, r25
    2672:	f9 f4       	brne	.+62     	; 0x26b2 <__vector_126+0x1ac>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2674:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udd_g_ctrlreq+0xe>
    2678:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udd_g_ctrlreq+0xf>
    267c:	30 97       	sbiw	r30, 0x00	; 0
    267e:	11 f4       	brne	.+4      	; 0x2684 <__vector_126+0x17e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2680:	d2 d8       	rcall	.-3676   	; 0x1826 <udd_ctrl_stall_data>
    2682:	23 c0       	rjmp	.+70     	; 0x26ca <__vector_126+0x1c4>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2684:	19 95       	eicall
    2686:	81 11       	cpse	r24, r1
    2688:	02 c0       	rjmp	.+4      	; 0x268e <__vector_126+0x188>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    268a:	cd d8       	rcall	.-3686   	; 0x1826 <udd_ctrl_stall_data>
    268c:	1e c0       	rjmp	.+60     	; 0x26ca <__vector_126+0x1c4>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    268e:	20 91 7e 22 	lds	r18, 0x227E	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    2692:	30 91 7f 22 	lds	r19, 0x227F	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
    2696:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <udd_ctrl_payload_nb_trans>
    269a:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
    269e:	82 0f       	add	r24, r18
    26a0:	93 1f       	adc	r25, r19
    26a2:	80 93 7e 22 	sts	0x227E, r24	; 0x80227e <udd_ctrl_prev_payload_nb_trans>
    26a6:	90 93 7f 22 	sts	0x227F, r25	; 0x80227f <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    26aa:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <udd_ctrl_payload_nb_trans>
    26ae:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    26b2:	e0 e9       	ldi	r30, 0x90	; 144
    26b4:	f2 e2       	ldi	r31, 0x22	; 34
    26b6:	02 e0       	ldi	r16, 0x02	; 2
    26b8:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    26ba:	00 e2       	ldi	r16, 0x20	; 32
    26bc:	06 93       	lac	Z, r16
    26be:	05 c0       	rjmp	.+10     	; 0x26ca <__vector_126+0x1c4>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    26c0:	80 38       	cpi	r24, 0x80	; 128
    26c2:	11 f4       	brne	.+4      	; 0x26c8 <__vector_126+0x1c2>
		udd_ctrl_in_sent();
    26c4:	d4 d8       	rcall	.-3672   	; 0x186e <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    26c6:	01 c0       	rjmp	.+2      	; 0x26ca <__vector_126+0x1c4>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    26c8:	f4 d9       	rcall	.-3096   	; 0x1ab2 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    26ca:	ff 91       	pop	r31
    26cc:	ef 91       	pop	r30
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	bf 91       	pop	r27
    26d4:	af 91       	pop	r26
    26d6:	9f 91       	pop	r25
    26d8:	8f 91       	pop	r24
    26da:	7f 91       	pop	r23
    26dc:	6f 91       	pop	r22
    26de:	5f 91       	pop	r21
    26e0:	4f 91       	pop	r20
    26e2:	3f 91       	pop	r19
    26e4:	2f 91       	pop	r18
    26e6:	1f 91       	pop	r17
    26e8:	0f 91       	pop	r16
    26ea:	0f 90       	pop	r0
    26ec:	0b be       	out	0x3b, r0	; 59
    26ee:	0f 90       	pop	r0
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	0f 90       	pop	r0
    26f4:	1f 90       	pop	r1
    26f6:	18 95       	reti

000026f8 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    26f8:	cf 92       	push	r12
    26fa:	df 92       	push	r13
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    2706:	6b 01       	movw	r12, r22
    2708:	e1 2c       	mov	r14, r1
    270a:	f1 2c       	mov	r15, r1
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	77 e8       	ldi	r23, 0x87	; 135
    2710:	83 e9       	ldi	r24, 0x93	; 147
    2712:	93 e0       	ldi	r25, 0x03	; 3
    2714:	a7 01       	movw	r20, r14
    2716:	96 01       	movw	r18, r12
    2718:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodsi4>
    271c:	ca 01       	movw	r24, r20
    271e:	b9 01       	movw	r22, r18
    2720:	2f ef       	ldi	r18, 0xFF	; 255
    2722:	3f ef       	ldi	r19, 0xFF	; 255
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodsi4>
	if (smallest_div < 1) {
    272c:	21 15       	cp	r18, r1
    272e:	31 05       	cpc	r19, r1
    2730:	29 f4       	brne	.+10     	; 0x273c <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    2736:	21 e0       	ldi	r18, 0x01	; 1
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	2d c0       	rjmp	.+90     	; 0x2796 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    273c:	22 30       	cpi	r18, 0x02	; 2
    273e:	31 05       	cpc	r19, r1
    2740:	28 f4       	brcc	.+10     	; 0x274c <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    2742:	82 e0       	ldi	r24, 0x02	; 2
    2744:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    2746:	22 e0       	ldi	r18, 0x02	; 2
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	25 c0       	rjmp	.+74     	; 0x2796 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    274c:	24 30       	cpi	r18, 0x04	; 4
    274e:	31 05       	cpc	r19, r1
    2750:	28 f4       	brcc	.+10     	; 0x275c <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    2752:	83 e0       	ldi	r24, 0x03	; 3
    2754:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    2756:	24 e0       	ldi	r18, 0x04	; 4
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	1d c0       	rjmp	.+58     	; 0x2796 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    275c:	28 30       	cpi	r18, 0x08	; 8
    275e:	31 05       	cpc	r19, r1
    2760:	28 f4       	brcc	.+10     	; 0x276c <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    2762:	84 e0       	ldi	r24, 0x04	; 4
    2764:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    2766:	28 e0       	ldi	r18, 0x08	; 8
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	15 c0       	rjmp	.+42     	; 0x2796 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    276c:	20 34       	cpi	r18, 0x40	; 64
    276e:	31 05       	cpc	r19, r1
    2770:	28 f4       	brcc	.+10     	; 0x277c <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2772:	85 e0       	ldi	r24, 0x05	; 5
    2774:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    2776:	20 e4       	ldi	r18, 0x40	; 64
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	0d c0       	rjmp	.+26     	; 0x2796 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    277c:	2f 3f       	cpi	r18, 0xFF	; 255
    277e:	31 05       	cpc	r19, r1
    2780:	09 f0       	breq	.+2      	; 0x2784 <pwm_set_frequency+0x8c>
    2782:	28 f4       	brcc	.+10     	; 0x278e <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    2784:	86 e0       	ldi	r24, 0x06	; 6
    2786:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	31 e0       	ldi	r19, 0x01	; 1
    278c:	04 c0       	rjmp	.+8      	; 0x2796 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    278e:	87 e0       	ldi	r24, 0x07	; 7
    2790:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	77 e8       	ldi	r23, 0x87	; 135
    279e:	83 e9       	ldi	r24, 0x93	; 147
    27a0:	93 e0       	ldi	r25, 0x03	; 3
    27a2:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodsi4>
    27a6:	ca 01       	movw	r24, r20
    27a8:	b9 01       	movw	r22, r18
    27aa:	a7 01       	movw	r20, r14
    27ac:	96 01       	movw	r18, r12
    27ae:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodsi4>
    27b2:	2d 83       	std	Y+5, r18	; 0x05
    27b4:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    27b6:	24 36       	cpi	r18, 0x64	; 100
    27b8:	31 05       	cpc	r19, r1
    27ba:	18 f4       	brcc	.+6      	; 0x27c2 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    27bc:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    27be:	1d 82       	std	Y+5, r1	; 0x05
    27c0:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    27c2:	df 91       	pop	r29
    27c4:	cf 91       	pop	r28
    27c6:	ff 90       	pop	r15
    27c8:	ef 90       	pop	r14
    27ca:	df 90       	pop	r13
    27cc:	cf 90       	pop	r12
    27ce:	08 95       	ret

000027d0 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    27d0:	0f 93       	push	r16
    27d2:	1f 93       	push	r17
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	ec 01       	movw	r28, r24
    27da:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    27dc:	86 2f       	mov	r24, r22
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	87 30       	cpi	r24, 0x07	; 7
    27e2:	91 05       	cpc	r25, r1
    27e4:	08 f0       	brcs	.+2      	; 0x27e8 <pwm_init+0x18>
    27e6:	8b c0       	rjmp	.+278    	; 0x28fe <pwm_init+0x12e>
    27e8:	fc 01       	movw	r30, r24
    27ea:	88 27       	eor	r24, r24
    27ec:	eb 5f       	subi	r30, 0xFB	; 251
    27ee:	fe 4f       	sbci	r31, 0xFE	; 254
    27f0:	8f 4f       	sbci	r24, 0xFF	; 255
    27f2:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	98 e0       	ldi	r25, 0x08	; 8
    27fa:	88 83       	st	Y, r24
    27fc:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    27fe:	e0 e4       	ldi	r30, 0x40	; 64
    2800:	f6 e0       	ldi	r31, 0x06	; 6
    2802:	30 81       	ld	r19, Z
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	2f ef       	ldi	r18, 0xFF	; 255
    280a:	24 0f       	add	r18, r20
    280c:	02 c0       	rjmp	.+4      	; 0x2812 <pwm_init+0x42>
    280e:	88 0f       	add	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	2a 95       	dec	r18
    2814:	e2 f7       	brpl	.-8      	; 0x280e <pwm_init+0x3e>
    2816:	83 2b       	or	r24, r19
    2818:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    281a:	71 c0       	rjmp	.+226    	; 0x28fe <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    281c:	80 e4       	ldi	r24, 0x40	; 64
    281e:	98 e0       	ldi	r25, 0x08	; 8
    2820:	88 83       	st	Y, r24
    2822:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2824:	e0 e4       	ldi	r30, 0x40	; 64
    2826:	f6 e0       	ldi	r31, 0x06	; 6
    2828:	30 81       	ld	r19, Z
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	23 e0       	ldi	r18, 0x03	; 3
    2830:	24 0f       	add	r18, r20
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <pwm_init+0x68>
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	2a 95       	dec	r18
    283a:	e2 f7       	brpl	.-8      	; 0x2834 <pwm_init+0x64>
    283c:	83 2b       	or	r24, r19
    283e:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2840:	5e c0       	rjmp	.+188    	; 0x28fe <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	99 e0       	ldi	r25, 0x09	; 9
    2846:	88 83       	st	Y, r24
    2848:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    284a:	e0 e6       	ldi	r30, 0x60	; 96
    284c:	f6 e0       	ldi	r31, 0x06	; 6
    284e:	30 81       	ld	r19, Z
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	2f ef       	ldi	r18, 0xFF	; 255
    2856:	24 0f       	add	r18, r20
    2858:	02 c0       	rjmp	.+4      	; 0x285e <pwm_init+0x8e>
    285a:	88 0f       	add	r24, r24
    285c:	99 1f       	adc	r25, r25
    285e:	2a 95       	dec	r18
    2860:	e2 f7       	brpl	.-8      	; 0x285a <pwm_init+0x8a>
    2862:	83 2b       	or	r24, r19
    2864:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2866:	4b c0       	rjmp	.+150    	; 0x28fe <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2868:	80 e4       	ldi	r24, 0x40	; 64
    286a:	99 e0       	ldi	r25, 0x09	; 9
    286c:	88 83       	st	Y, r24
    286e:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2870:	e0 e6       	ldi	r30, 0x60	; 96
    2872:	f6 e0       	ldi	r31, 0x06	; 6
    2874:	30 81       	ld	r19, Z
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	23 e0       	ldi	r18, 0x03	; 3
    287c:	24 0f       	add	r18, r20
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <pwm_init+0xb4>
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	2a 95       	dec	r18
    2886:	e2 f7       	brpl	.-8      	; 0x2880 <pwm_init+0xb0>
    2888:	83 2b       	or	r24, r19
    288a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    288c:	38 c0       	rjmp	.+112    	; 0x28fe <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	9a e0       	ldi	r25, 0x0A	; 10
    2892:	88 83       	st	Y, r24
    2894:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    2896:	e0 e8       	ldi	r30, 0x80	; 128
    2898:	f6 e0       	ldi	r31, 0x06	; 6
    289a:	30 81       	ld	r19, Z
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	2f ef       	ldi	r18, 0xFF	; 255
    28a2:	24 0f       	add	r18, r20
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <pwm_init+0xda>
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	2a 95       	dec	r18
    28ac:	e2 f7       	brpl	.-8      	; 0x28a6 <pwm_init+0xd6>
    28ae:	83 2b       	or	r24, r19
    28b0:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    28b2:	25 c0       	rjmp	.+74     	; 0x28fe <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    28b4:	80 e4       	ldi	r24, 0x40	; 64
    28b6:	9a e0       	ldi	r25, 0x0A	; 10
    28b8:	88 83       	st	Y, r24
    28ba:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    28bc:	e0 e8       	ldi	r30, 0x80	; 128
    28be:	f6 e0       	ldi	r31, 0x06	; 6
    28c0:	30 81       	ld	r19, Z
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	23 e0       	ldi	r18, 0x03	; 3
    28c8:	24 0f       	add	r18, r20
    28ca:	02 c0       	rjmp	.+4      	; 0x28d0 <pwm_init+0x100>
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	2a 95       	dec	r18
    28d2:	e2 f7       	brpl	.-8      	; 0x28cc <pwm_init+0xfc>
    28d4:	83 2b       	or	r24, r19
    28d6:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    28d8:	12 c0       	rjmp	.+36     	; 0x28fe <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	9b e0       	ldi	r25, 0x0B	; 11
    28de:	88 83       	st	Y, r24
    28e0:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    28e2:	e0 ea       	ldi	r30, 0xA0	; 160
    28e4:	f6 e0       	ldi	r31, 0x06	; 6
    28e6:	30 81       	ld	r19, Z
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	2f ef       	ldi	r18, 0xFF	; 255
    28ee:	24 0f       	add	r18, r20
    28f0:	02 c0       	rjmp	.+4      	; 0x28f6 <pwm_init+0x126>
    28f2:	88 0f       	add	r24, r24
    28f4:	99 1f       	adc	r25, r25
    28f6:	2a 95       	dec	r18
    28f8:	e2 f7       	brpl	.-8      	; 0x28f2 <pwm_init+0x122>
    28fa:	83 2b       	or	r24, r19
    28fc:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    28fe:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    2900:	42 30       	cpi	r20, 0x02	; 2
    2902:	61 f0       	breq	.+24     	; 0x291c <pwm_init+0x14c>
    2904:	18 f4       	brcc	.+6      	; 0x290c <pwm_init+0x13c>
    2906:	41 30       	cpi	r20, 0x01	; 1
    2908:	31 f0       	breq	.+12     	; 0x2916 <pwm_init+0x146>
    290a:	10 c0       	rjmp	.+32     	; 0x292c <pwm_init+0x15c>
    290c:	43 30       	cpi	r20, 0x03	; 3
    290e:	49 f0       	breq	.+18     	; 0x2922 <pwm_init+0x152>
    2910:	44 30       	cpi	r20, 0x04	; 4
    2912:	51 f0       	breq	.+20     	; 0x2928 <pwm_init+0x158>
    2914:	0b c0       	rjmp	.+22     	; 0x292c <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    2916:	80 e1       	ldi	r24, 0x10	; 16
    2918:	8b 83       	std	Y+3, r24	; 0x03
		break;
    291a:	08 c0       	rjmp	.+16     	; 0x292c <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    291c:	80 e2       	ldi	r24, 0x20	; 32
    291e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2920:	05 c0       	rjmp	.+10     	; 0x292c <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    2922:	80 e4       	ldi	r24, 0x40	; 64
    2924:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2926:	02 c0       	rjmp	.+4      	; 0x292c <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    2928:	80 e8       	ldi	r24, 0x80	; 128
    292a:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    292c:	88 81       	ld	r24, Y
    292e:	99 81       	ldd	r25, Y+1	; 0x01
    2930:	0e 94 37 0b 	call	0x166e	; 0x166e <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    2934:	e8 81       	ld	r30, Y
    2936:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2938:	81 81       	ldd	r24, Z+1	; 0x01
    293a:	88 7f       	andi	r24, 0xF8	; 248
    293c:	83 60       	ori	r24, 0x03	; 3
    293e:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    2940:	1d 82       	std	Y+5, r1	; 0x05
    2942:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    2944:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    2946:	e8 81       	ld	r30, Y
    2948:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    294a:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    294c:	80 7f       	andi	r24, 0xF0	; 240
    294e:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    2950:	b8 01       	movw	r22, r16
    2952:	ce 01       	movw	r24, r28
    2954:	d1 de       	rcall	.-606    	; 0x26f8 <pwm_set_frequency>
}
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	1f 91       	pop	r17
    295c:	0f 91       	pop	r16
    295e:	08 95       	ret

00002960 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    2960:	cf 93       	push	r28
    2962:	df 93       	push	r29
    2964:	ec 01       	movw	r28, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    2966:	ad 81       	ldd	r26, Y+5	; 0x05
    2968:	be 81       	ldd	r27, Y+6	; 0x06
    296a:	26 2f       	mov	r18, r22
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    2972:	24 e6       	ldi	r18, 0x64	; 100
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	50 e0       	ldi	r21, 0x00	; 0
    297a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	e8 81       	ld	r30, Y
    2982:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2984:	e6 fd       	sbrc	r30, 6
    2986:	17 c0       	rjmp	.+46     	; 0x29b6 <pwm_start+0x56>
		switch (channel_index) {
    2988:	82 30       	cpi	r24, 0x02	; 2
    298a:	61 f0       	breq	.+24     	; 0x29a4 <pwm_start+0x44>
    298c:	18 f4       	brcc	.+6      	; 0x2994 <pwm_start+0x34>
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	31 f0       	breq	.+12     	; 0x299e <pwm_start+0x3e>
    2992:	1b c0       	rjmp	.+54     	; 0x29ca <pwm_start+0x6a>
    2994:	83 30       	cpi	r24, 0x03	; 3
    2996:	49 f0       	breq	.+18     	; 0x29aa <pwm_start+0x4a>
    2998:	84 30       	cpi	r24, 0x04	; 4
    299a:	51 f0       	breq	.+20     	; 0x29b0 <pwm_start+0x50>
    299c:	16 c0       	rjmp	.+44     	; 0x29ca <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    299e:	20 af       	std	Z+56, r18	; 0x38
    29a0:	31 af       	std	Z+57, r19	; 0x39
    29a2:	13 c0       	rjmp	.+38     	; 0x29ca <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    29a4:	22 af       	std	Z+58, r18	; 0x3a
    29a6:	33 af       	std	Z+59, r19	; 0x3b
    29a8:	10 c0       	rjmp	.+32     	; 0x29ca <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    29aa:	24 af       	std	Z+60, r18	; 0x3c
    29ac:	35 af       	std	Z+61, r19	; 0x3d
    29ae:	0d c0       	rjmp	.+26     	; 0x29ca <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    29b0:	26 af       	std	Z+62, r18	; 0x3e
    29b2:	37 af       	std	Z+63, r19	; 0x3f
    29b4:	0a c0       	rjmp	.+20     	; 0x29ca <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    29b6:	81 30       	cpi	r24, 0x01	; 1
    29b8:	19 f0       	breq	.+6      	; 0x29c0 <pwm_start+0x60>
    29ba:	82 30       	cpi	r24, 0x02	; 2
    29bc:	21 f0       	breq	.+8      	; 0x29c6 <pwm_start+0x66>
    29be:	05 c0       	rjmp	.+10     	; 0x29ca <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    29c0:	20 af       	std	Z+56, r18	; 0x38
    29c2:	31 af       	std	Z+57, r19	; 0x39
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    29c6:	22 af       	std	Z+58, r18	; 0x3a
    29c8:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    29ca:	8d 81       	ldd	r24, Y+5	; 0x05
    29cc:	9e 81       	ldd	r25, Y+6	; 0x06
    29ce:	e8 81       	ld	r30, Y
    29d0:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    29d2:	86 a3       	std	Z+38, r24	; 0x26
    29d4:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	e8 81       	ld	r30, Y
    29da:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    29dc:	e6 fd       	sbrc	r30, 6
    29de:	04 c0       	rjmp	.+8      	; 0x29e8 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    29e0:	91 81       	ldd	r25, Z+1	; 0x01
    29e2:	89 2b       	or	r24, r25
    29e4:	81 83       	std	Z+1, r24	; 0x01
    29e6:	04 c0       	rjmp	.+8      	; 0x29f0 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    29e8:	91 81       	ldd	r25, Z+1	; 0x01
    29ea:	80 73       	andi	r24, 0x30	; 48
    29ec:	89 2b       	or	r24, r25
    29ee:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    29f0:	e8 81       	ld	r30, Y
    29f2:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    29f4:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    29f6:	80 7f       	andi	r24, 0xF0	; 240
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	89 2b       	or	r24, r25
    29fc:	80 83       	st	Z, r24
}
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	08 95       	ret

00002a04 <usb_callback_suspend_action>:

void halt(void)
{
	/* MAIN Loop Shutdown */

	runmode = 0;
    2a04:	08 95       	ret

00002a06 <usb_callback_resume_action>:
    2a06:	08 95       	ret

00002a08 <usb_callback_remotewakeup_enable>:
    2a08:	08 95       	ret

00002a0a <usb_callback_remotewakeup_disable>:
    2a0a:	08 95       	ret

00002a0c <usb_callback_cdc_enable>:
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	80 93 c7 22 	sts	0x22C7, r24	; 0x8022c7 <my_flag_autorize_cdc_transfert>
    2a12:	08 95       	ret

00002a14 <usb_callback_cdc_disable>:
    2a14:	10 92 c7 22 	sts	0x22C7, r1	; 0x8022c7 <my_flag_autorize_cdc_transfert>
    2a18:	08 95       	ret

00002a1a <usb_callback_config>:
    2a1a:	08 95       	ret

00002a1c <usb_callback_cdc_set_dtr>:
    2a1c:	08 95       	ret

00002a1e <usb_callback_cdc_set_rts>:
    2a1e:	08 95       	ret

00002a20 <usb_callback_rx_notify>:
    2a20:	08 95       	ret

00002a22 <usb_callback_tx_empty_notify>:
    2a22:	08 95       	ret

00002a24 <main>:
}

int main(void)
{
    2a24:	8f 92       	push	r8
    2a26:	9f 92       	push	r9
    2a28:	af 92       	push	r10
    2a2a:	bf 92       	push	r11
    2a2c:	cf 92       	push	r12
    2a2e:	df 92       	push	r13
    2a30:	ef 92       	push	r14
    2a32:	ff 92       	push	r15
    2a34:	0f 93       	push	r16
    2a36:	1f 93       	push	r17
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	c2 54       	subi	r28, 0x42	; 66
    2a42:	d1 09       	sbc	r29, r1
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	de bf       	out	0x3e, r29	; 62
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2a48:	0f 2e       	mov	r0, r31
    2a4a:	f0 ea       	ldi	r31, 0xA0	; 160
    2a4c:	af 2e       	mov	r10, r31
    2a4e:	b1 2c       	mov	r11, r1
    2a50:	f0 2d       	mov	r31, r0
    2a52:	0f 2e       	mov	r0, r31
    2a54:	f7 e0       	ldi	r31, 0x07	; 7
    2a56:	9f 2e       	mov	r9, r31
    2a58:	f0 2d       	mov	r31, r0
    2a5a:	d5 01       	movw	r26, r10
    2a5c:	12 96       	adiw	r26, 0x02	; 2
    2a5e:	9c 92       	st	X, r9
	uint8_t retcode = 0;
	
	/* Init of sub-modules */
	pmic_init();
	sysclk_init();
    2a60:	39 d2       	rcall	.+1138   	; 0x2ed4 <sysclk_init>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2a62:	62 e0       	ldi	r22, 0x02	; 2
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	af d2       	rcall	.+1374   	; 0x2fc6 <sysclk_enable_module>

	/* ADC - event 7 */
	EVSYS.CH7MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    2a68:	e0 e8       	ldi	r30, 0x80	; 128
    2a6a:	f1 e0       	ldi	r31, 0x01	; 1
    2a6c:	80 ec       	ldi	r24, 0xC0	; 192
    2a6e:	87 83       	std	Z+7, r24	; 0x07

	/* DAC - event 6 */
	EVSYS.CH6MUX = EVSYS_CHMUX_TCE1_OVF_gc;
    2a70:	88 ee       	ldi	r24, 0xE8	; 232
    2a72:	86 83       	std	Z+6, r24	; 0x06


static void tc_init(void)
{
	/* DAC clock */
	tc_enable(&TCE1);
    2a74:	80 e4       	ldi	r24, 0x40	; 64
    2a76:	9a e0       	ldi	r25, 0x0A	; 10
    2a78:	0e 94 37 0b 	call	0x166e	; 0x166e <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2a7c:	0f 2e       	mov	r0, r31
    2a7e:	f0 e4       	ldi	r31, 0x40	; 64
    2a80:	ef 2e       	mov	r14, r31
    2a82:	fa e0       	ldi	r31, 0x0A	; 10
    2a84:	ff 2e       	mov	r15, r31
    2a86:	f0 2d       	mov	r31, r0
    2a88:	f7 01       	movw	r30, r14
    2a8a:	81 81       	ldd	r24, Z+1	; 0x01
    2a8c:	88 7f       	andi	r24, 0xF8	; 248
    2a8e:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2a90:	81 ee       	ldi	r24, 0xE1	; 225
    2a92:	94 e0       	ldi	r25, 0x04	; 4
    2a94:	86 a3       	std	Z+38, r24	; 0x26
    2a96:	97 a3       	std	Z+39, r25	; 0x27
	tc_set_wgm(&TCE1, TC_WG_NORMAL);											// Internal clock for DAC convertion
	tc_write_period(&TCE1, (sysclk_get_per_hz() / DAC_RATE_OF_CONV) - 1);		// DAC clock 48 kHz for audio play-back

	/* VCTCXO PWM signal generation */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_D, 500);							// Init PWM structure and enable timer
    2a98:	24 ef       	ldi	r18, 0xF4	; 244
    2a9a:	31 e0       	ldi	r19, 0x01	; 1
    2a9c:	44 e0       	ldi	r20, 0x04	; 4
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	ce 01       	movw	r24, r28
    2aa2:	01 96       	adiw	r24, 0x01	; 1
    2aa4:	95 de       	rcall	.-726    	; 0x27d0 <pwm_init>
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    2aa6:	6d e2       	ldi	r22, 0x2D	; 45
    2aa8:	ce 01       	movw	r24, r28
    2aaa:	01 96       	adiw	r24, 0x01	; 1
    2aac:	59 df       	rcall	.-334    	; 0x2960 <pwm_start>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2aae:	c1 2c       	mov	r12, r1
    2ab0:	68 94       	set
    2ab2:	dd 24       	eor	r13, r13
    2ab4:	d3 f8       	bld	r13, 3
    2ab6:	8d e5       	ldi	r24, 0x5D	; 93
    2ab8:	94 e7       	ldi	r25, 0x74	; 116
    2aba:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <__TEXT_REGION_LENGTH__+0x70083e>
    2abe:	90 93 3f 08 	sts	0x083F, r25	; 0x80083f <__TEXT_REGION_LENGTH__+0x70083f>
	struct adc_channel_config			adcch_vctcxo_conf;
	struct adc_channel_config			adcch_io_adc4_conf;
	struct adc_channel_config			adcch_io_adc5_conf;

	/* Prepare the structures */
	adc_read_configuration(&ADC_5V0,						&adc_5v0_conf);
    2ac2:	be 01       	movw	r22, r28
    2ac4:	6c 5d       	subi	r22, 0xDC	; 220
    2ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	92 e0       	ldi	r25, 0x02	; 2
    2acc:	0e 94 69 03 	call	0x6d2	; 0x6d2 <adc_read_configuration>
	adcch_read_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    2ad0:	ae 01       	movw	r20, r28
    2ad2:	41 5c       	subi	r20, 0xC1	; 193
    2ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ad6:	61 e0       	ldi	r22, 0x01	; 1
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	92 e0       	ldi	r25, 0x02	; 2
    2adc:	0e 94 ed 03 	call	0x7da	; 0x7da <adcch_read_configuration>
	
	adc_read_configuration(&ADC_3V0,						&adc_3v0_conf);
    2ae0:	be 01       	movw	r22, r28
    2ae2:	63 5e       	subi	r22, 0xE3	; 227
    2ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	92 e0       	ldi	r25, 0x02	; 2
    2aea:	0e 94 69 03 	call	0x6d2	; 0x6d2 <adc_read_configuration>
	adcch_read_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    2aee:	ae 01       	movw	r20, r28
    2af0:	45 5c       	subi	r20, 0xC5	; 197
    2af2:	5f 4f       	sbci	r21, 0xFF	; 255
    2af4:	61 e0       	ldi	r22, 0x01	; 1
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	92 e0       	ldi	r25, 0x02	; 2
    2afa:	0e 94 ed 03 	call	0x7da	; 0x7da <adcch_read_configuration>
	
	adc_read_configuration(&ADC_VBAT,						&adc_vbat_conf);
    2afe:	be 01       	movw	r22, r28
    2b00:	6a 5e       	subi	r22, 0xEA	; 234
    2b02:	7f 4f       	sbci	r23, 0xFF	; 255
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	92 e0       	ldi	r25, 0x02	; 2
    2b08:	0e 94 69 03 	call	0x6d2	; 0x6d2 <adc_read_configuration>
	adcch_read_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    2b0c:	ae 01       	movw	r20, r28
    2b0e:	49 5c       	subi	r20, 0xC9	; 201
    2b10:	5f 4f       	sbci	r21, 0xFF	; 255
    2b12:	61 e0       	ldi	r22, 0x01	; 1
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	92 e0       	ldi	r25, 0x02	; 2
    2b18:	0e 94 ed 03 	call	0x7da	; 0x7da <adcch_read_configuration>
	
	adc_read_configuration(&ADC_VCTCXO,						&adc_vctcxo_conf);
    2b1c:	be 01       	movw	r22, r28
    2b1e:	61 5f       	subi	r22, 0xF1	; 241
    2b20:	7f 4f       	sbci	r23, 0xFF	; 255
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	92 e0       	ldi	r25, 0x02	; 2
    2b26:	0e 94 69 03 	call	0x6d2	; 0x6d2 <adc_read_configuration>
	adcch_read_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    2b2a:	ae 01       	movw	r20, r28
    2b2c:	4d 5c       	subi	r20, 0xCD	; 205
    2b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b30:	62 e0       	ldi	r22, 0x02	; 2
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	92 e0       	ldi	r25, 0x02	; 2
    2b36:	0e 94 ed 03 	call	0x7da	; 0x7da <adcch_read_configuration>
	
	adc_read_configuration(&ADC_IO_ADC4,					&adc_io_adc4_conf);
    2b3a:	be 01       	movw	r22, r28
    2b3c:	68 5f       	subi	r22, 0xF8	; 248
    2b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	92 e0       	ldi	r25, 0x02	; 2
    2b44:	0e 94 69 03 	call	0x6d2	; 0x6d2 <adc_read_configuration>
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_io_adc4_conf);
    2b48:	ae 01       	movw	r20, r28
    2b4a:	41 5d       	subi	r20, 0xD1	; 209
    2b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4e:	64 e0       	ldi	r22, 0x04	; 4
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	92 e0       	ldi	r25, 0x02	; 2
    2b54:	0e 94 ed 03 	call	0x7da	; 0x7da <adcch_read_configuration>
	
	adc_read_configuration(&ADC_IO_ADC5,					&adc_io_adc5_conf);
    2b58:	be 01       	movw	r22, r28
    2b5a:	6f 5f       	subi	r22, 0xFF	; 255
    2b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	92 e0       	ldi	r25, 0x02	; 2
    2b62:	0e 94 69 03 	call	0x6d2	; 0x6d2 <adc_read_configuration>
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_io_adc5_conf);
    2b66:	ae 01       	movw	r20, r28
    2b68:	45 5d       	subi	r20, 0xD5	; 213
    2b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6c:	68 e0       	ldi	r22, 0x08	; 8
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	92 e0       	ldi	r25, 0x02	; 2
    2b72:	0e 94 ed 03 	call	0x7da	; 0x7da <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2b76:	5d a1       	ldd	r21, Y+37	; 0x25
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2b78:	8e a1       	ldd	r24, Y+38	; 0x26
    2b7a:	8f 78       	andi	r24, 0x8F	; 143
    2b7c:	8e a3       	std	Y+38, r24	; 0x26
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2b7e:	4e 8d       	ldd	r20, Y+30	; 0x1e
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2b80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b82:	8f 78       	andi	r24, 0x8F	; 143
    2b84:	8f 8f       	std	Y+31, r24	; 0x1f
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2b86:	3f 89       	ldd	r19, Y+23	; 0x17
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2b88:	88 8d       	ldd	r24, Y+24	; 0x18
    2b8a:	8f 78       	andi	r24, 0x8F	; 143
    2b8c:	88 8f       	std	Y+24, r24	; 0x18
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2b8e:	28 89       	ldd	r18, Y+16	; 0x10
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2b90:	89 89       	ldd	r24, Y+17	; 0x11
    2b92:	8f 78       	andi	r24, 0x8F	; 143
    2b94:	89 8b       	std	Y+17, r24	; 0x11
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2b96:	99 85       	ldd	r25, Y+9	; 0x09
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2b98:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b9a:	8f 78       	andi	r24, 0x8F	; 143
    2b9c:	8a 87       	std	Y+10, r24	; 0x0a
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2ba0:	6b 81       	ldd	r22, Y+3	; 0x03
    2ba2:	6f 78       	andi	r22, 0x8F	; 143
    2ba4:	6b 83       	std	Y+3, r22	; 0x03
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    2ba6:	66 ec       	ldi	r22, 0xC6	; 198
    2ba8:	6f a3       	std	Y+39, r22	; 0x27
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    2baa:	11 e0       	ldi	r17, 0x01	; 1
    2bac:	1b 87       	std	Y+11, r17	; 0x0b
    2bae:	1c 83       	std	Y+4, r17	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    2bb0:	04 e0       	ldi	r16, 0x04	; 4
    2bb2:	08 a7       	std	Y+40, r16	; 0x28
    2bb4:	09 a3       	std	Y+33, r16	; 0x21
    2bb6:	0a 8f       	std	Y+26, r16	; 0x1a
    2bb8:	0b 8b       	std	Y+19, r16	; 0x13
    2bba:	0c 87       	std	Y+12, r16	; 0x0c
    2bbc:	0d 83       	std	Y+5, r16	; 0x05
static inline void adc_set_gain_impedance_mode(struct adc_config *conf,
		enum adc_gainstage_impmode impmode)
{
	switch (impmode) {
	case ADC_GAIN_HIGHIMPEDANCE:
		conf->ctrlb &= ~ADC_IMPMODE_bm;
    2bbe:	51 70       	andi	r21, 0x01	; 1
    2bc0:	50 64       	ori	r21, 0x40	; 64
    2bc2:	5d a3       	std	Y+37, r21	; 0x25
    2bc4:	49 70       	andi	r20, 0x09	; 9
    2bc6:	40 64       	ori	r20, 0x40	; 64
    2bc8:	4e 8f       	std	Y+30, r20	; 0x1e
    2bca:	39 70       	andi	r19, 0x09	; 9
    2bcc:	30 64       	ori	r19, 0x40	; 64
    2bce:	3f 8b       	std	Y+23, r19	; 0x17
    2bd0:	29 70       	andi	r18, 0x09	; 9
    2bd2:	20 64       	ori	r18, 0x40	; 64
    2bd4:	28 8b       	std	Y+16, r18	; 0x10
    2bd6:	91 70       	andi	r25, 0x01	; 1
    2bd8:	90 64       	ori	r25, 0x40	; 64
    2bda:	99 87       	std	Y+9, r25	; 0x09
    2bdc:	81 70       	andi	r24, 0x01	; 1
    2bde:	80 64       	ori	r24, 0x40	; 64
    2be0:	8a 83       	std	Y+2, r24	; 0x02
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2be2:	1f af       	std	Y+63, r17	; 0x3f
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2be4:	80 e1       	ldi	r24, 0x10	; 16
    2be6:	21 96       	adiw	r28, 0x01	; 1
    2be8:	8f af       	std	Y+63, r24	; 0x3f
    2bea:	21 97       	sbiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2bec:	1b af       	std	Y+59, r17	; 0x3b
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2bee:	1c ae       	std	Y+60, r1	; 0x3c
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2bf0:	1f ab       	std	Y+55, r17	; 0x37
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2bf2:	88 e1       	ldi	r24, 0x18	; 24
    2bf4:	88 af       	std	Y+56, r24	; 0x38
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2bf6:	1b ab       	std	Y+51, r17	; 0x33
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2bf8:	68 94       	set
    2bfa:	88 24       	eor	r8, r8
    2bfc:	83 f8       	bld	r8, 3
    2bfe:	8c aa       	std	Y+52, r8	; 0x34
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2c00:	1f a7       	std	Y+47, r17	; 0x2f
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2c02:	80 e2       	ldi	r24, 0x20	; 32
    2c04:	88 ab       	std	Y+48, r24	; 0x30
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2c06:	1b a7       	std	Y+43, r17	; 0x2b
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2c08:	88 e2       	ldi	r24, 0x28	; 40
    2c0a:	8c a7       	std	Y+44, r24	; 0x2c
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    2c0c:	22 96       	adiw	r28, 0x02	; 2
    2c0e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c10:	22 97       	sbiw	r28, 0x02	; 2
    2c12:	83 7f       	andi	r24, 0xF3	; 243
    2c14:	22 96       	adiw	r28, 0x02	; 2
    2c16:	8f af       	std	Y+63, r24	; 0x3f
    2c18:	22 97       	sbiw	r28, 0x02	; 2
    2c1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c1c:	83 7f       	andi	r24, 0xF3	; 243
    2c1e:	8d af       	std	Y+61, r24	; 0x3d
    2c20:	89 ad       	ldd	r24, Y+57	; 0x39
    2c22:	83 7f       	andi	r24, 0xF3	; 243
    2c24:	89 af       	std	Y+57, r24	; 0x39
    2c26:	8d a9       	ldd	r24, Y+53	; 0x35
    2c28:	83 7f       	andi	r24, 0xF3	; 243
    2c2a:	8d ab       	std	Y+53, r24	; 0x35
    2c2c:	89 a9       	ldd	r24, Y+49	; 0x31
    2c2e:	83 7f       	andi	r24, 0xF3	; 243
    2c30:	89 ab       	std	Y+49, r24	; 0x31
    2c32:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c34:	83 7f       	andi	r24, 0xF3	; 243
    2c36:	8d a7       	std	Y+45, r24	; 0x2d
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    2c38:	83 e0       	ldi	r24, 0x03	; 3
    2c3a:	23 96       	adiw	r28, 0x03	; 3
    2c3c:	8f af       	std	Y+63, r24	; 0x3f
    2c3e:	23 97       	sbiw	r28, 0x03	; 3
    2c40:	8e af       	std	Y+62, r24	; 0x3e
    2c42:	8a af       	std	Y+58, r24	; 0x3a
	adcch_set_pin_scan(&adcch_5v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_3v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_vbat_conf,	0, 3);

	/* Execute the new settings */
	adc_write_configuration(&ADC_5V0,						&adc_5v0_conf);
    2c44:	be 01       	movw	r22, r28
    2c46:	6c 5d       	subi	r22, 0xDC	; 220
    2c48:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	92 e0       	ldi	r25, 0x02	; 2
    2c4e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <adc_write_configuration>
	adcch_write_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    2c52:	ae 01       	movw	r20, r28
    2c54:	41 5c       	subi	r20, 0xC1	; 193
    2c56:	5f 4f       	sbci	r21, 0xFF	; 255
    2c58:	61 e0       	ldi	r22, 0x01	; 1
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	92 e0       	ldi	r25, 0x02	; 2
    2c5e:	0e 94 a2 03 	call	0x744	; 0x744 <adcch_write_configuration>
	
	adc_write_configuration(&ADC_3V0,						&adc_3v0_conf);
    2c62:	be 01       	movw	r22, r28
    2c64:	63 5e       	subi	r22, 0xE3	; 227
    2c66:	7f 4f       	sbci	r23, 0xFF	; 255
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	92 e0       	ldi	r25, 0x02	; 2
    2c6c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <adc_write_configuration>
	adcch_write_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    2c70:	ae 01       	movw	r20, r28
    2c72:	45 5c       	subi	r20, 0xC5	; 197
    2c74:	5f 4f       	sbci	r21, 0xFF	; 255
    2c76:	61 e0       	ldi	r22, 0x01	; 1
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	92 e0       	ldi	r25, 0x02	; 2
    2c7c:	0e 94 a2 03 	call	0x744	; 0x744 <adcch_write_configuration>
	
	adc_write_configuration(&ADC_VBAT,						&adc_vbat_conf);
    2c80:	be 01       	movw	r22, r28
    2c82:	6a 5e       	subi	r22, 0xEA	; 234
    2c84:	7f 4f       	sbci	r23, 0xFF	; 255
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	92 e0       	ldi	r25, 0x02	; 2
    2c8a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <adc_write_configuration>
	adcch_write_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    2c8e:	ae 01       	movw	r20, r28
    2c90:	49 5c       	subi	r20, 0xC9	; 201
    2c92:	5f 4f       	sbci	r21, 0xFF	; 255
    2c94:	61 e0       	ldi	r22, 0x01	; 1
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	92 e0       	ldi	r25, 0x02	; 2
    2c9a:	0e 94 a2 03 	call	0x744	; 0x744 <adcch_write_configuration>
	
	adc_write_configuration(&ADC_VCTCXO,					&adc_vctcxo_conf);
    2c9e:	be 01       	movw	r22, r28
    2ca0:	61 5f       	subi	r22, 0xF1	; 241
    2ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	92 e0       	ldi	r25, 0x02	; 2
    2ca8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <adc_write_configuration>
	adcch_write_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    2cac:	ae 01       	movw	r20, r28
    2cae:	4d 5c       	subi	r20, 0xCD	; 205
    2cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb2:	62 e0       	ldi	r22, 0x02	; 2
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	92 e0       	ldi	r25, 0x02	; 2
    2cb8:	0e 94 a2 03 	call	0x744	; 0x744 <adcch_write_configuration>
	
	adc_write_configuration(&ADC_IO_ADC4,					&adc_vctcxo_conf);
    2cbc:	be 01       	movw	r22, r28
    2cbe:	61 5f       	subi	r22, 0xF1	; 241
    2cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	92 e0       	ldi	r25, 0x02	; 2
    2cc6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <adc_write_configuration>
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_vctcxo_conf);
    2cca:	ae 01       	movw	r20, r28
    2ccc:	4d 5c       	subi	r20, 0xCD	; 205
    2cce:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd0:	64 e0       	ldi	r22, 0x04	; 4
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	92 e0       	ldi	r25, 0x02	; 2
    2cd6:	0e 94 a2 03 	call	0x744	; 0x744 <adcch_write_configuration>
	
	adc_write_configuration(&ADC_IO_ADC5,					&adc_vctcxo_conf);
    2cda:	be 01       	movw	r22, r28
    2cdc:	61 5f       	subi	r22, 0xF1	; 241
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	92 e0       	ldi	r25, 0x02	; 2
    2ce4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <adc_write_configuration>
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_vctcxo_conf);
    2ce8:	ae 01       	movw	r20, r28
    2cea:	4d 5c       	subi	r20, 0xCD	; 205
    2cec:	5f 4f       	sbci	r21, 0xFF	; 255
    2cee:	68 e0       	ldi	r22, 0x08	; 8
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	92 e0       	ldi	r25, 0x02	; 2
    2cf4:	0e 94 a2 03 	call	0x744	; 0x744 <adcch_write_configuration>
static void dac_init(void)
{
    struct dac_config dac_io_dac0_conf;
    struct dac_config dac_io_dac1_conf;

    dac_read_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    2cf8:	be 01       	movw	r22, r28
    2cfa:	68 5f       	subi	r22, 0xF8	; 248
    2cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfe:	80 e2       	ldi	r24, 0x20	; 32
    2d00:	93 e0       	ldi	r25, 0x03	; 3
    2d02:	0e 94 b4 04 	call	0x968	; 0x968 <dac_read_configuration>
    dac_read_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    2d06:	be 01       	movw	r22, r28
    2d08:	6f 5f       	subi	r22, 0xFF	; 255
    2d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0c:	80 e2       	ldi	r24, 0x20	; 32
    2d0e:	93 e0       	ldi	r25, 0x03	; 3
    2d10:	0e 94 b4 04 	call	0x968	; 0x968 <dac_read_configuration>
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    2d14:	1a 87       	std	Y+10, r17	; 0x0a
    2d16:	1b 83       	std	Y+3, r17	; 0x03
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    2d18:	08 87       	std	Y+8, r16	; 0x08
	if ((ch_mask == DAC_CH0) || (ch_mask == DAC_CH1)) {
		setting = DAC_CHSEL_SINGLE_gc;
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    2d1a:	99 85       	ldd	r25, Y+9	; 0x09
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    2d1c:	89 82       	std	Y+1, r8	; 0x01
	if ((ch_mask == DAC_CH0) || (ch_mask == DAC_CH1)) {
		setting = DAC_CHSEL_SINGLE_gc;
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
__always_inline static void dac_set_conversion_trigger(struct dac_config *conf,
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
    2d20:	9c 79       	andi	r25, 0x9C	; 156
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    2d22:	91 60       	ori	r25, 0x01	; 1
    2d24:	99 87       	std	Y+9, r25	; 0x09
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    2d26:	96 e0       	ldi	r25, 0x06	; 6
    2d28:	9b 87       	std	Y+11, r25	; 0x0b
__always_inline static void dac_set_conversion_trigger(struct dac_config *conf,
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
    2d2a:	8c 79       	andi	r24, 0x9C	; 156
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    2d2c:	82 60       	ori	r24, 0x02	; 2
    2d2e:	8a 83       	std	Y+2, r24	; 0x02
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    2d30:	9c 83       	std	Y+4, r25	; 0x04
    #ifdef XMEGA_DAC_VERSION_1
    dac_set_conversion_interval(&dac_io_dac0_conf, 2);
    dac_set_conversion_interval(&dac_io_dac1_conf, 2);
    #endif

    dac_write_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    2d32:	be 01       	movw	r22, r28
    2d34:	68 5f       	subi	r22, 0xF8	; 248
    2d36:	7f 4f       	sbci	r23, 0xFF	; 255
    2d38:	80 e2       	ldi	r24, 0x20	; 32
    2d3a:	93 e0       	ldi	r25, 0x03	; 3
    2d3c:	0e 94 57 04 	call	0x8ae	; 0x8ae <dac_write_configuration>
    dac_write_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    2d40:	be 01       	movw	r22, r28
    2d42:	6f 5f       	subi	r22, 0xFF	; 255
    2d44:	7f 4f       	sbci	r23, 0xFF	; 255
    2d46:	80 e2       	ldi	r24, 0x20	; 32
    2d48:	93 e0       	ldi	r25, 0x03	; 3
    2d4a:	0e 94 57 04 	call	0x8ae	; 0x8ae <dac_write_configuration>
	tc_init();
	adc_init();
	dac_init();
	
	/* All interrupt sources prepared here - IRQ activation */
	irq_initialize_vectors();
    2d4e:	d5 01       	movw	r26, r10
    2d50:	12 96       	adiw	r26, 0x02	; 2
    2d52:	9c 92       	st	X, r9
	cpu_irq_enable();
    2d54:	78 94       	sei
	
	board_init();		// Activates all in/out pins - transitions from Z to dedicated states
    2d56:	0e 94 2e 01 	call	0x25c	; 0x25c <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2d5a:	e4 e1       	ldi	r30, 0x14	; 20
    2d5c:	f4 e2       	ldi	r31, 0x24	; 36
    2d5e:	10 82       	st	Z, r1
    2d60:	11 82       	std	Z+1, r1	; 0x01
    2d62:	12 82       	std	Z+2, r1	; 0x02
    2d64:	13 82       	std	Z+3, r1	; 0x03
    2d66:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2d68:	15 83       	std	Z+5, r17	; 0x05
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2d6a:	f6 01       	movw	r30, r12
    2d6c:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2d6e:	80 7f       	andi	r24, 0xF0	; 240
    2d70:	81 60       	ori	r24, 0x01	; 1
    2d72:	80 83       	st	Z, r24
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2d74:	d7 01       	movw	r26, r14
    2d76:	8c 91       	ld	r24, X
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2d78:	80 7f       	andi	r24, 0xF0	; 240
    2d7a:	81 60       	ori	r24, 0x01	; 1
    2d7c:	8c 93       	st	X, r24
}


static void usb_init(void)
{
	udc_start();
    2d7e:	ca d4       	rcall	.+2452   	; 0x3714 <udc_start>
	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB
	
	
	/* The application code */
	runmode = (uint8_t) 1;
    2d80:	10 93 c8 22 	sts	0x22C8, r17	; 0x8022c8 <runmode>
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    2d84:	40 e2       	ldi	r20, 0x20	; 32
    2d86:	53 e0       	ldi	r21, 0x03	; 3
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    2d88:	0f 2e       	mov	r0, r31
    2d8a:	fa e3       	ldi	r31, 0x3A	; 58
    2d8c:	ef 2e       	mov	r14, r31
    2d8e:	f3 e0       	ldi	r31, 0x03	; 3
    2d90:	ff 2e       	mov	r15, r31
    2d92:	f0 2d       	mov	r31, r0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2d94:	64 e1       	ldi	r22, 0x14	; 20
    2d96:	74 e2       	ldi	r23, 0x24	; 36
    2d98:	05 e1       	ldi	r16, 0x15	; 21
    2d9a:	14 e2       	ldi	r17, 0x24	; 36
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    2d9c:	28 e4       	ldi	r18, 0x48	; 72
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    2da0:	fa 01       	movw	r30, r20
    2da2:	85 81       	ldd	r24, Z+5	; 0x05
    2da4:	83 70       	andi	r24, 0x03	; 3

static void task_dac(void)
{
	static int idx_dacX = 0;
	
	if (dac_channel_is_ready(&DAC_IO_DAC0, DAC_CH0 | DAC_CH1)) {
    2da6:	83 30       	cpi	r24, 0x03	; 3
    2da8:	c9 f5       	brne	.+114    	; 0x2e1c <main+0x3f8>
		dac_set_channel_value(&DAC_IO_DAC0, DAC_IO_DAC0_CHANNEL, dac_io_dac0_buf[idx_dacX]);
    2daa:	e0 91 c5 22 	lds	r30, 0x22C5	; 0x8022c5 <idx_dacX.6341>
    2dae:	f0 91 c6 22 	lds	r31, 0x22C6	; 0x8022c6 <idx_dacX.6341+0x1>
    2db2:	ee 0f       	add	r30, r30
    2db4:	ff 1f       	adc	r31, r31
    2db6:	ec 5f       	subi	r30, 0xFC	; 252
    2db8:	fe 4d       	sbci	r31, 0xDE	; 222
    2dba:	01 90       	ld	r0, Z+
    2dbc:	f0 81       	ld	r31, Z
    2dbe:	e0 2d       	mov	r30, r0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2dc0:	8f b7       	in	r24, 0x3f	; 63
    2dc2:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    2dc4:	f8 94       	cli
	return flags;
    2dc6:	88 85       	ldd	r24, Y+8	; 0x08
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    2dc8:	da 01       	movw	r26, r20
    2dca:	58 96       	adiw	r26, 0x18	; 24
    2dcc:	ed 93       	st	X+, r30
    2dce:	fc 93       	st	X, r31
    2dd0:	59 97       	sbiw	r26, 0x19	; 25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2dd2:	8f bf       	out	0x3f, r24	; 63
		dac_set_channel_value(&DAC_IO_DAC1, DAC_IO_DAC1_CHANNEL, dac_io_dac1_buf[idx_dacX]);
    2dd4:	e0 91 c5 22 	lds	r30, 0x22C5	; 0x8022c5 <idx_dacX.6341>
    2dd8:	f0 91 c6 22 	lds	r31, 0x22C6	; 0x8022c6 <idx_dacX.6341+0x1>
    2ddc:	ee 0f       	add	r30, r30
    2dde:	ff 1f       	adc	r31, r31
    2de0:	ec 53       	subi	r30, 0x3C	; 60
    2de2:	ff 4d       	sbci	r31, 0xDF	; 223
    2de4:	01 90       	ld	r0, Z+
    2de6:	f0 81       	ld	r31, Z
    2de8:	e0 2d       	mov	r30, r0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2dea:	8f b7       	in	r24, 0x3f	; 63
    2dec:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2dee:	f8 94       	cli
	return flags;
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	d7 01       	movw	r26, r14
    2df4:	ed 93       	st	X+, r30
    2df6:	fc 93       	st	X, r31
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2df8:	8f bf       	out	0x3f, r24	; 63
		
		idx_dacX++;
    2dfa:	80 91 c5 22 	lds	r24, 0x22C5	; 0x8022c5 <idx_dacX.6341>
    2dfe:	90 91 c6 22 	lds	r25, 0x22C6	; 0x8022c6 <idx_dacX.6341+0x1>
    2e02:	01 96       	adiw	r24, 0x01	; 1
		idx_dacX %= DAC_NR_OF_SAMPLES;
    2e04:	8f 71       	andi	r24, 0x1F	; 31
    2e06:	90 78       	andi	r25, 0x80	; 128
    2e08:	99 23       	and	r25, r25
    2e0a:	24 f4       	brge	.+8      	; 0x2e14 <main+0x3f0>
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	80 6e       	ori	r24, 0xE0	; 224
    2e10:	9f 6f       	ori	r25, 0xFF	; 255
    2e12:	01 96       	adiw	r24, 0x01	; 1
    2e14:	80 93 c5 22 	sts	0x22C5, r24	; 0x8022c5 <idx_dacX.6341>
    2e18:	90 93 c6 22 	sts	0x22C6, r25	; 0x8022c6 <idx_dacX.6341+0x1>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    2e1c:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2e1e:	fb 01       	movw	r30, r22
    2e20:	80 81       	ld	r24, Z
    2e22:	81 11       	cpse	r24, r1
    2e24:	08 c0       	rjmp	.+16     	; 0x2e36 <main+0x412>
    2e26:	d8 01       	movw	r26, r16
    2e28:	e0 e0       	ldi	r30, 0x00	; 0
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    2e2a:	ef 5f       	subi	r30, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2e2c:	8d 91       	ld	r24, X+
    2e2e:	88 23       	and	r24, r24
    2e30:	e1 f3       	breq	.-8      	; 0x2e2a <main+0x406>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    2e32:	e1 11       	cpse	r30, r1
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <main+0x416>
		cpu_irq_enable();
    2e36:	78 94       	sei
    2e38:	12 c0       	rjmp	.+36     	; 0x2e5e <main+0x43a>
    2e3a:	d9 01       	movw	r26, r18
    2e3c:	8c 91       	ld	r24, X

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	e1 50       	subi	r30, 0x01	; 1
    2e42:	f0 4e       	sbci	r31, 0xE0	; 224
    2e44:	81 7f       	andi	r24, 0xF1	; 241
    2e46:	90 81       	ld	r25, Z
    2e48:	89 2b       	or	r24, r25
    2e4a:	8c 93       	st	X, r24
	sleep_enable();
    2e4c:	8c 91       	ld	r24, X
    2e4e:	81 60       	ori	r24, 0x01	; 1
    2e50:	8c 93       	st	X, r24

	cpu_irq_enable();
    2e52:	78 94       	sei
	sleep_enter();
    2e54:	88 95       	sleep

	sleep_disable();
    2e56:	f9 01       	movw	r30, r18
    2e58:	80 81       	ld	r24, Z
    2e5a:	8e 7f       	andi	r24, 0xFE	; 254
    2e5c:	80 83       	st	Z, r24
	usb_init();			// USB device stack start function to enable stack and start USB
	
	
	/* The application code */
	runmode = (uint8_t) 1;
    while (runmode) {
    2e5e:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <runmode>
    2e62:	81 11       	cpse	r24, r1
    2e64:	9d cf       	rjmp	.-198    	; 0x2da0 <main+0x37c>
		task();
		sleepmgr_enter_sleep();
    }
	
	cpu_irq_disable();
    2e66:	f8 94       	cli
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    2e68:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2e6a:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <sleepmgr_locks>
    2e6e:	81 11       	cpse	r24, r1
    2e70:	09 c0       	rjmp	.+18     	; 0x2e84 <main+0x460>
    2e72:	a5 e1       	ldi	r26, 0x15	; 21
    2e74:	b4 e2       	ldi	r27, 0x24	; 36
    2e76:	e0 e0       	ldi	r30, 0x00	; 0
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    2e78:	ef 5f       	subi	r30, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2e7a:	8d 91       	ld	r24, X+
    2e7c:	88 23       	and	r24, r24
    2e7e:	e1 f3       	breq	.-8      	; 0x2e78 <main+0x454>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    2e80:	e1 11       	cpse	r30, r1
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <main+0x464>
		cpu_irq_enable();
    2e84:	78 94       	sei
    2e86:	13 c0       	rjmp	.+38     	; 0x2eae <main+0x48a>
    2e88:	a8 e4       	ldi	r26, 0x48	; 72
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	8c 91       	ld	r24, X

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	e1 50       	subi	r30, 0x01	; 1
    2e92:	f0 4e       	sbci	r31, 0xE0	; 224
    2e94:	98 2f       	mov	r25, r24
    2e96:	91 7f       	andi	r25, 0xF1	; 241
    2e98:	80 81       	ld	r24, Z
    2e9a:	89 2b       	or	r24, r25
    2e9c:	8c 93       	st	X, r24
	sleep_enable();
    2e9e:	8c 91       	ld	r24, X
    2ea0:	81 60       	ori	r24, 0x01	; 1
    2ea2:	8c 93       	st	X, r24

	cpu_irq_enable();
    2ea4:	78 94       	sei
	sleep_enter();
    2ea6:	88 95       	sleep

	sleep_disable();
    2ea8:	8c 91       	ld	r24, X
    2eaa:	8e 7f       	andi	r24, 0xFE	; 254
    2eac:	8c 93       	st	X, r24
	sleepmgr_enter_sleep();
	
	return retcode;
}
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	ce 5b       	subi	r28, 0xBE	; 190
    2eb4:	df 4f       	sbci	r29, 0xFF	; 255
    2eb6:	cd bf       	out	0x3d, r28	; 61
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	df 91       	pop	r29
    2ebc:	cf 91       	pop	r28
    2ebe:	1f 91       	pop	r17
    2ec0:	0f 91       	pop	r16
    2ec2:	ff 90       	pop	r15
    2ec4:	ef 90       	pop	r14
    2ec6:	df 90       	pop	r13
    2ec8:	cf 90       	pop	r12
    2eca:	bf 90       	pop	r11
    2ecc:	af 90       	pop	r10
    2ece:	9f 90       	pop	r9
    2ed0:	8f 90       	pop	r8
    2ed2:	08 95       	ret

00002ed4 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    2ed4:	cf 93       	push	r28
    2ed6:	df 93       	push	r29
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	28 97       	sbiw	r28, 0x08	; 8
    2ede:	cd bf       	out	0x3d, r28	; 61
    2ee0:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2ee2:	8f ef       	ldi	r24, 0xFF	; 255
    2ee4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2ee8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2eec:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2ef0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2ef4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    2ef8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    2efc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    2f00:	6c e1       	ldi	r22, 0x1C	; 28
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	0e d7       	rcall	.+3612   	; 0x3d24 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    2f08:	8a 83       	std	Y+2, r24	; 0x02
    2f0a:	6d e1       	ldi	r22, 0x1D	; 29
    2f0c:	70 e0       	ldi	r23, 0x00	; 0
    2f0e:	82 e0       	ldi	r24, 0x02	; 2
    2f10:	09 d7       	rcall	.+3602   	; 0x3d24 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    2f12:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	9a 81       	ldd	r25, Y+2	; 0x02
    2f18:	01 96       	adiw	r24, 0x01	; 1
    2f1a:	21 f4       	brne	.+8      	; 0x2f24 <sysclk_init+0x50>
		cal = 0x2340;
    2f1c:	80 e4       	ldi	r24, 0x40	; 64
    2f1e:	93 e2       	ldi	r25, 0x23	; 35
    2f20:	89 83       	std	Y+1, r24	; 0x01
    2f22:	9a 83       	std	Y+2, r25	; 0x02
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	9a 81       	ldd	r25, Y+2	; 0x02
    2f28:	8b 83       	std	Y+3, r24	; 0x03
    2f2a:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    2f2c:	e0 e6       	ldi	r30, 0x60	; 96
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    2f32:	8c 81       	ldd	r24, Y+4	; 0x04
    2f34:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    2f36:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    2f3a:	84 fd       	sbrc	r24, 4
    2f3c:	21 c0       	rjmp	.+66     	; 0x2f80 <sysclk_init+0xac>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2f3e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    2f42:	83 fd       	sbrc	r24, 3
    2f44:	0e c0       	rjmp	.+28     	; 0x2f62 <sysclk_init+0x8e>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    2f46:	e0 e5       	ldi	r30, 0x50	; 80
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f4c:	8f b7       	in	r24, 0x3f	; 63
    2f4e:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    2f50:	f8 94       	cli
	return flags;
    2f52:	9e 81       	ldd	r25, Y+6	; 0x06
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2f54:	80 81       	ld	r24, Z
    2f56:	88 60       	ori	r24, 0x08	; 8
    2f58:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f5a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2f5c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2f5e:	83 ff       	sbrs	r24, 3
    2f60:	fd cf       	rjmp	.-6      	; 0x2f5c <sysclk_init+0x88>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f62:	8f b7       	in	r24, 0x3f	; 63
    2f64:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    2f66:	f8 94       	cli
	return flags;
    2f68:	9f 81       	ldd	r25, Y+7	; 0x07
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    2f6a:	e0 e5       	ldi	r30, 0x50	; 80
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	83 ec       	ldi	r24, 0xC3	; 195
    2f70:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    2f72:	80 81       	ld	r24, Z
    2f74:	80 61       	ori	r24, 0x10	; 16
    2f76:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f78:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    2f7a:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    2f7c:	84 ff       	sbrs	r24, 4
    2f7e:	fd cf       	rjmp	.-6      	; 0x2f7a <sysclk_init+0xa6>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2f80:	64 e0       	ldi	r22, 0x04	; 4
    2f82:	80 e4       	ldi	r24, 0x40	; 64
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	d8 d6       	rcall	.+3504   	; 0x3d38 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f88:	8f b7       	in	r24, 0x3f	; 63
    2f8a:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    2f8c:	f8 94       	cli
	return flags;
    2f8e:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2f90:	e0 e5       	ldi	r30, 0x50	; 80
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	8e 7f       	andi	r24, 0xFE	; 254
    2f98:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f9a:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    2f9c:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f9e:	8f b7       	in	r24, 0x3f	; 63
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    2fa2:	f8 94       	cli
	return flags;
    2fa4:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2fa6:	80 81       	ld	r24, Z
    2fa8:	88 60       	ori	r24, 0x08	; 8
    2faa:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2fac:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2fae:	81 81       	ldd	r24, Z+1	; 0x01
    2fb0:	83 ff       	sbrs	r24, 3
    2fb2:	fd cf       	rjmp	.-6      	; 0x2fae <sysclk_init+0xda>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    2fb4:	8b e0       	ldi	r24, 0x0B	; 11
    2fb6:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    2fba:	28 96       	adiw	r28, 0x08	; 8
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	08 95       	ret

00002fc6 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    2fc6:	cf 93       	push	r28
    2fc8:	df 93       	push	r29
    2fca:	1f 92       	push	r1
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2fd0:	9f b7       	in	r25, 0x3f	; 63
    2fd2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2fd4:	f8 94       	cli
	return flags;
    2fd6:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2fd8:	e8 2f       	mov	r30, r24
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	e0 59       	subi	r30, 0x90	; 144
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	60 95       	com	r22
    2fe2:	80 81       	ld	r24, Z
    2fe4:	68 23       	and	r22, r24
    2fe6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2fe8:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2fea:	0f 90       	pop	r0
    2fec:	df 91       	pop	r29
    2fee:	cf 91       	pop	r28
    2ff0:	08 95       	ret

00002ff2 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    2ff2:	cf 93       	push	r28
    2ff4:	df 93       	push	r29
    2ff6:	1f 92       	push	r1
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2ffc:	9f b7       	in	r25, 0x3f	; 63
    2ffe:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    3000:	f8 94       	cli
	return flags;
    3002:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    3004:	e8 2f       	mov	r30, r24
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	e0 59       	subi	r30, 0x90	; 144
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	80 81       	ld	r24, Z
    300e:	68 2b       	or	r22, r24
    3010:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3012:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    3014:	0f 90       	pop	r0
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	08 95       	ret

0000301c <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
    3020:	1f 92       	push	r1
    3022:	1f 92       	push	r1
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    3028:	86 30       	cpi	r24, 0x06	; 6
    302a:	11 f0       	breq	.+4      	; 0x3030 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    302c:	60 e0       	ldi	r22, 0x00	; 0
    302e:	01 c0       	rjmp	.+2      	; 0x3032 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    3030:	68 e1       	ldi	r22, 0x18	; 24
    3032:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    3036:	81 fd       	sbrc	r24, 1
    3038:	2a c0       	rjmp	.+84     	; 0x308e <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    303a:	8f b7       	in	r24, 0x3f	; 63
    303c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    303e:	f8 94       	cli
	return flags;
    3040:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3042:	e0 e5       	ldi	r30, 0x50	; 80
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
    3048:	82 60       	ori	r24, 0x02	; 2
    304a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    304c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    304e:	81 81       	ldd	r24, Z+1	; 0x01
    3050:	81 ff       	sbrs	r24, 1
    3052:	fd cf       	rjmp	.-6      	; 0x304e <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3054:	8f b7       	in	r24, 0x3f	; 63
    3056:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3058:	f8 94       	cli
	return flags;
    305a:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    305c:	a0 e5       	ldi	r26, 0x50	; 80
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	16 96       	adiw	r26, 0x06	; 6
    3062:	8c 91       	ld	r24, X
    3064:	16 97       	sbiw	r26, 0x06	; 6
    3066:	89 7f       	andi	r24, 0xF9	; 249
    3068:	16 96       	adiw	r26, 0x06	; 6
    306a:	8c 93       	st	X, r24
    306c:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    306e:	e0 e6       	ldi	r30, 0x60	; 96
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 e8       	ldi	r24, 0x80	; 128
    3074:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    3076:	8b eb       	ldi	r24, 0xBB	; 187
    3078:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    307a:	16 96       	adiw	r26, 0x06	; 6
    307c:	8c 91       	ld	r24, X
    307e:	16 97       	sbiw	r26, 0x06	; 6
    3080:	84 60       	ori	r24, 0x04	; 4
    3082:	16 96       	adiw	r26, 0x06	; 6
    3084:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    3086:	80 81       	ld	r24, Z
    3088:	81 60       	ori	r24, 0x01	; 1
    308a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    308c:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    308e:	63 60       	ori	r22, 0x03	; 3
    3090:	84 e4       	ldi	r24, 0x44	; 68
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	51 d6       	rcall	.+3234   	; 0x3d38 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    3096:	60 e4       	ldi	r22, 0x40	; 64
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	95 df       	rcall	.-214    	; 0x2fc6 <sysclk_enable_module>
}
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	08 95       	ret

000030a6 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
    30a6:	80 91 de 23 	lds	r24, 0x23DE	; 0x8023de <udi_cdc_nb_comm_enabled>
    30aa:	81 50       	subi	r24, 0x01	; 1
    30ac:	80 93 de 23 	sts	0x23DE, r24	; 0x8023de <udi_cdc_nb_comm_enabled>
    30b0:	08 95       	ret

000030b2 <udi_cdc_data_setup>:
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	08 95       	ret

000030b6 <udi_cdc_getsetting>:
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	08 95       	ret

000030ba <udi_cdc_line_coding_received>:
    30ba:	6c ee       	ldi	r22, 0xEC	; 236
    30bc:	73 e2       	ldi	r23, 0x23	; 35
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	ac cc       	rjmp	.-1704   	; 0x2a1a <usb_callback_config>
    30c2:	08 95       	ret

000030c4 <udi_cdc_comm_enable>:
    30c4:	10 92 de 23 	sts	0x23DE, r1	; 0x8023de <udi_cdc_nb_comm_enabled>
    30c8:	10 92 ea 23 	sts	0x23EA, r1	; 0x8023ea <udi_cdc_state>
    30cc:	10 92 eb 23 	sts	0x23EB, r1	; 0x8023eb <udi_cdc_state+0x1>
    30d0:	e0 ee       	ldi	r30, 0xE0	; 224
    30d2:	f3 e2       	ldi	r31, 0x23	; 35
    30d4:	81 ea       	ldi	r24, 0xA1	; 161
    30d6:	80 83       	st	Z, r24
    30d8:	80 e2       	ldi	r24, 0x20	; 32
    30da:	81 83       	std	Z+1, r24	; 0x01
    30dc:	12 82       	std	Z+2, r1	; 0x02
    30de:	13 82       	std	Z+3, r1	; 0x03
    30e0:	14 82       	std	Z+4, r1	; 0x04
    30e2:	15 82       	std	Z+5, r1	; 0x05
    30e4:	82 e0       	ldi	r24, 0x02	; 2
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	86 83       	std	Z+6, r24	; 0x06
    30ea:	97 83       	std	Z+7, r25	; 0x07
    30ec:	10 86       	std	Z+8, r1	; 0x08
    30ee:	11 86       	std	Z+9, r1	; 0x09
    30f0:	ec ee       	ldi	r30, 0xEC	; 236
    30f2:	f3 e2       	ldi	r31, 0x23	; 35
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	92 ec       	ldi	r25, 0xC2	; 194
    30f8:	a1 e0       	ldi	r26, 0x01	; 1
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	80 83       	st	Z, r24
    30fe:	91 83       	std	Z+1, r25	; 0x01
    3100:	a2 83       	std	Z+2, r26	; 0x02
    3102:	b3 83       	std	Z+3, r27	; 0x03
    3104:	14 82       	std	Z+4, r1	; 0x04
    3106:	15 82       	std	Z+5, r1	; 0x05
    3108:	88 e0       	ldi	r24, 0x08	; 8
    310a:	86 83       	std	Z+6, r24	; 0x06
    310c:	bf 01       	movw	r22, r30
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	84 dc       	rcall	.-1784   	; 0x2a1a <usb_callback_config>
    3112:	7c dc       	rcall	.-1800   	; 0x2a0c <usb_callback_cdc_enable>
    3114:	88 23       	and	r24, r24
    3116:	29 f0       	breq	.+10     	; 0x3122 <udi_cdc_comm_enable+0x5e>
    3118:	90 91 de 23 	lds	r25, 0x23DE	; 0x8023de <udi_cdc_nb_comm_enabled>
    311c:	9f 5f       	subi	r25, 0xFF	; 255
    311e:	90 93 de 23 	sts	0x23DE, r25	; 0x8023de <udi_cdc_nb_comm_enabled>
    3122:	08 95       	ret

00003124 <udi_cdc_tx_send>:
    3124:	ff 92       	push	r15
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	1f 92       	push	r1
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    3134:	80 91 cc 22 	lds	r24, 0x22CC	; 0x8022cc <udi_cdc_tx_trans_ongoing>
    3138:	81 11       	cpse	r24, r1
    313a:	9e c0       	rjmp	.+316    	; 0x3278 <udi_cdc_tx_send+0x154>
    313c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <udd_is_high_speed>
    3140:	88 23       	and	r24, r24
    3142:	51 f0       	breq	.+20     	; 0x3158 <udi_cdc_tx_send+0x34>
    3144:	00 91 cd 22 	lds	r16, 0x22CD	; 0x8022cd <udi_cdc_tx_sof_num>
    3148:	10 91 ce 22 	lds	r17, 0x22CE	; 0x8022ce <udi_cdc_tx_sof_num+0x1>
    314c:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <udd_get_micro_frame_number>
    3150:	08 17       	cp	r16, r24
    3152:	19 07       	cpc	r17, r25
    3154:	59 f4       	brne	.+22     	; 0x316c <udi_cdc_tx_send+0x48>
    3156:	90 c0       	rjmp	.+288    	; 0x3278 <udi_cdc_tx_send+0x154>
    3158:	00 91 cd 22 	lds	r16, 0x22CD	; 0x8022cd <udi_cdc_tx_sof_num>
    315c:	10 91 ce 22 	lds	r17, 0x22CE	; 0x8022ce <udi_cdc_tx_sof_num+0x1>
    3160:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <udd_get_frame_number>
    3164:	08 17       	cp	r16, r24
    3166:	19 07       	cpc	r17, r25
    3168:	09 f4       	brne	.+2      	; 0x316c <udi_cdc_tx_send+0x48>
    316a:	86 c0       	rjmp	.+268    	; 0x3278 <udi_cdc_tx_send+0x154>
    316c:	8f b7       	in	r24, 0x3f	; 63
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	f8 94       	cli
    3172:	19 81       	ldd	r17, Y+1	; 0x01
    3174:	00 91 cf 22 	lds	r16, 0x22CF	; 0x8022cf <udi_cdc_tx_buf_sel>
    3178:	e0 2f       	mov	r30, r16
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	ee 0f       	add	r30, r30
    317e:	ff 1f       	adc	r31, r31
    3180:	e0 53       	subi	r30, 0x30	; 48
    3182:	fd 4d       	sbci	r31, 0xDD	; 221
    3184:	80 81       	ld	r24, Z
    3186:	91 81       	ldd	r25, Z+1	; 0x01
    3188:	89 2b       	or	r24, r25
    318a:	09 f5       	brne	.+66     	; 0x31ce <udi_cdc_tx_send+0xaa>
    318c:	80 91 c9 22 	lds	r24, 0x22C9	; 0x8022c9 <sof_zlp_counter.4986>
    3190:	90 91 ca 22 	lds	r25, 0x22CA	; 0x8022ca <sof_zlp_counter.4986+0x1>
    3194:	01 96       	adiw	r24, 0x01	; 1
    3196:	80 93 c9 22 	sts	0x22C9, r24	; 0x8022c9 <sof_zlp_counter.4986>
    319a:	90 93 ca 22 	sts	0x22CA, r25	; 0x8022ca <sof_zlp_counter.4986+0x1>
    319e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <udd_is_high_speed>
    31a2:	81 11       	cpse	r24, r1
    31a4:	07 c0       	rjmp	.+14     	; 0x31b4 <udi_cdc_tx_send+0x90>
    31a6:	80 91 c9 22 	lds	r24, 0x22C9	; 0x8022c9 <sof_zlp_counter.4986>
    31aa:	90 91 ca 22 	lds	r25, 0x22CA	; 0x8022ca <sof_zlp_counter.4986+0x1>
    31ae:	84 36       	cpi	r24, 0x64	; 100
    31b0:	91 05       	cpc	r25, r1
    31b2:	58 f0       	brcs	.+22     	; 0x31ca <udi_cdc_tx_send+0xa6>
    31b4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <udd_is_high_speed>
    31b8:	88 23       	and	r24, r24
    31ba:	49 f0       	breq	.+18     	; 0x31ce <udi_cdc_tx_send+0xaa>
    31bc:	80 91 c9 22 	lds	r24, 0x22C9	; 0x8022c9 <sof_zlp_counter.4986>
    31c0:	90 91 ca 22 	lds	r25, 0x22CA	; 0x8022ca <sof_zlp_counter.4986+0x1>
    31c4:	80 32       	cpi	r24, 0x20	; 32
    31c6:	93 40       	sbci	r25, 0x03	; 3
    31c8:	10 f4       	brcc	.+4      	; 0x31ce <udi_cdc_tx_send+0xaa>
    31ca:	1f bf       	out	0x3f, r17	; 63
    31cc:	55 c0       	rjmp	.+170    	; 0x3278 <udi_cdc_tx_send+0x154>
    31ce:	10 92 c9 22 	sts	0x22C9, r1	; 0x8022c9 <sof_zlp_counter.4986>
    31d2:	10 92 ca 22 	sts	0x22CA, r1	; 0x8022ca <sof_zlp_counter.4986+0x1>
    31d6:	80 91 cb 22 	lds	r24, 0x22CB	; 0x8022cb <udi_cdc_tx_both_buf_to_send>
    31da:	81 11       	cpse	r24, r1
    31dc:	06 c0       	rjmp	.+12     	; 0x31ea <udi_cdc_tx_send+0xc6>
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	01 11       	cpse	r16, r1
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	80 93 cf 22 	sts	0x22CF, r24	; 0x8022cf <udi_cdc_tx_buf_sel>
    31e8:	04 c0       	rjmp	.+8      	; 0x31f2 <udi_cdc_tx_send+0xce>
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	01 11       	cpse	r16, r1
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	08 2f       	mov	r16, r24
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	80 93 cc 22 	sts	0x22CC, r24	; 0x8022cc <udi_cdc_tx_trans_ongoing>
    31f8:	1f bf       	out	0x3f, r17	; 63
    31fa:	10 e0       	ldi	r17, 0x00	; 0
    31fc:	f8 01       	movw	r30, r16
    31fe:	ee 0f       	add	r30, r30
    3200:	ff 1f       	adc	r31, r31
    3202:	e0 53       	subi	r30, 0x30	; 48
    3204:	fd 4d       	sbci	r31, 0xDD	; 221
    3206:	ff 24       	eor	r15, r15
    3208:	f3 94       	inc	r15
    320a:	80 81       	ld	r24, Z
    320c:	91 81       	ldd	r25, Z+1	; 0x01
    320e:	80 34       	cpi	r24, 0x40	; 64
    3210:	91 05       	cpc	r25, r1
    3212:	09 f4       	brne	.+2      	; 0x3216 <udi_cdc_tx_send+0xf2>
    3214:	f1 2c       	mov	r15, r1
    3216:	ff 20       	and	r15, r15
    3218:	91 f0       	breq	.+36     	; 0x323e <udi_cdc_tx_send+0x11a>
    321a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <udd_is_high_speed>
    321e:	88 23       	and	r24, r24
    3220:	39 f0       	breq	.+14     	; 0x3230 <udi_cdc_tx_send+0x10c>
    3222:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <udd_get_micro_frame_number>
    3226:	80 93 cd 22 	sts	0x22CD, r24	; 0x8022cd <udi_cdc_tx_sof_num>
    322a:	90 93 ce 22 	sts	0x22CE, r25	; 0x8022ce <udi_cdc_tx_sof_num+0x1>
    322e:	0b c0       	rjmp	.+22     	; 0x3246 <udi_cdc_tx_send+0x122>
    3230:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <udd_get_frame_number>
    3234:	80 93 cd 22 	sts	0x22CD, r24	; 0x8022cd <udi_cdc_tx_sof_num>
    3238:	90 93 ce 22 	sts	0x22CE, r25	; 0x8022ce <udi_cdc_tx_sof_num+0x1>
    323c:	04 c0       	rjmp	.+8      	; 0x3246 <udi_cdc_tx_send+0x122>
    323e:	10 92 cd 22 	sts	0x22CD, r1	; 0x8022cd <udi_cdc_tx_sof_num>
    3242:	10 92 ce 22 	sts	0x22CE, r1	; 0x8022ce <udi_cdc_tx_sof_num+0x1>
    3246:	f8 01       	movw	r30, r16
    3248:	ee 0f       	add	r30, r30
    324a:	ff 1f       	adc	r31, r31
    324c:	e0 53       	subi	r30, 0x30	; 48
    324e:	fd 4d       	sbci	r31, 0xDD	; 221
    3250:	20 81       	ld	r18, Z
    3252:	31 81       	ldd	r19, Z+1	; 0x01
    3254:	a8 01       	movw	r20, r16
    3256:	00 24       	eor	r0, r0
    3258:	56 95       	lsr	r21
    325a:	47 95       	ror	r20
    325c:	07 94       	ror	r0
    325e:	56 95       	lsr	r21
    3260:	47 95       	ror	r20
    3262:	07 94       	ror	r0
    3264:	54 2f       	mov	r21, r20
    3266:	40 2d       	mov	r20, r0
    3268:	4c 52       	subi	r20, 0x2C	; 44
    326a:	5d 4d       	sbci	r21, 0xDD	; 221
    326c:	06 e4       	ldi	r16, 0x46	; 70
    326e:	19 e1       	ldi	r17, 0x19	; 25
    3270:	6f 2d       	mov	r22, r15
    3272:	81 e8       	ldi	r24, 0x81	; 129
    3274:	0e 94 7f 10 	call	0x20fe	; 0x20fe <udd_ep_run>
    3278:	0f 90       	pop	r0
    327a:	df 91       	pop	r29
    327c:	cf 91       	pop	r28
    327e:	1f 91       	pop	r17
    3280:	0f 91       	pop	r16
    3282:	ff 90       	pop	r15
    3284:	08 95       	ret

00003286 <udi_cdc_data_sof_notify>:
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	4d cf       	rjmp	.-358    	; 0x3124 <udi_cdc_tx_send>
    328a:	08 95       	ret

0000328c <udi_cdc_data_sent>:
    328c:	81 11       	cpse	r24, r1
    328e:	19 c0       	rjmp	.+50     	; 0x32c2 <udi_cdc_data_sent+0x36>
    3290:	20 91 cf 22 	lds	r18, 0x22CF	; 0x8022cf <udi_cdc_tx_buf_sel>
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	22 23       	and	r18, r18
    329a:	11 f0       	breq	.+4      	; 0x32a0 <udi_cdc_data_sent+0x14>
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	88 0f       	add	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	fc 01       	movw	r30, r24
    32a6:	e0 53       	subi	r30, 0x30	; 48
    32a8:	fd 4d       	sbci	r31, 0xDD	; 221
    32aa:	10 82       	st	Z, r1
    32ac:	11 82       	std	Z+1, r1	; 0x01
    32ae:	10 92 cb 22 	sts	0x22CB, r1	; 0x8022cb <udi_cdc_tx_both_buf_to_send>
    32b2:	10 92 cc 22 	sts	0x22CC, r1	; 0x8022cc <udi_cdc_tx_trans_ongoing>
    32b6:	67 2b       	or	r22, r23
    32b8:	11 f0       	breq	.+4      	; 0x32be <udi_cdc_data_sent+0x32>
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	b2 db       	rcall	.-2204   	; 0x2a22 <usb_callback_tx_empty_notify>
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	31 cf       	rjmp	.-414    	; 0x3124 <udi_cdc_tx_send>
    32c2:	08 95       	ret

000032c4 <udi_cdc_data_disable>:
    32c4:	80 91 dd 23 	lds	r24, 0x23DD	; 0x8023dd <udi_cdc_nb_data_enabled>
    32c8:	81 50       	subi	r24, 0x01	; 1
    32ca:	80 93 dd 23 	sts	0x23DD, r24	; 0x8023dd <udi_cdc_nb_data_enabled>
    32ce:	80 91 dd 23 	lds	r24, 0x23DD	; 0x8023dd <udi_cdc_nb_data_enabled>
    32d2:	a0 db       	rcall	.-2240   	; 0x2a14 <usb_callback_cdc_disable>
    32d4:	10 92 dc 23 	sts	0x23DC, r1	; 0x8023dc <udi_cdc_data_running>
    32d8:	08 95       	ret

000032da <udi_cdc_comm_setup>:
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <udd_g_ctrlreq>
    32e2:	88 23       	and	r24, r24
    32e4:	e4 f4       	brge	.+56     	; 0x331e <udi_cdc_comm_setup+0x44>
    32e6:	80 76       	andi	r24, 0x60	; 96
    32e8:	80 32       	cpi	r24, 0x20	; 32
    32ea:	09 f0       	breq	.+2      	; 0x32ee <udi_cdc_comm_setup+0x14>
    32ec:	47 c0       	rjmp	.+142    	; 0x337c <udi_cdc_comm_setup+0xa2>
    32ee:	80 91 05 24 	lds	r24, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    32f2:	81 32       	cpi	r24, 0x21	; 33
    32f4:	09 f0       	breq	.+2      	; 0x32f8 <udi_cdc_comm_setup+0x1e>
    32f6:	44 c0       	rjmp	.+136    	; 0x3380 <udi_cdc_comm_setup+0xa6>
    32f8:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    32fc:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3300:	07 97       	sbiw	r24, 0x07	; 7
    3302:	09 f0       	breq	.+2      	; 0x3306 <udi_cdc_comm_setup+0x2c>
    3304:	3f c0       	rjmp	.+126    	; 0x3384 <udi_cdc_comm_setup+0xaa>
    3306:	e4 e0       	ldi	r30, 0x04	; 4
    3308:	f4 e2       	ldi	r31, 0x24	; 36
    330a:	8c ee       	ldi	r24, 0xEC	; 236
    330c:	93 e2       	ldi	r25, 0x23	; 35
    330e:	80 87       	std	Z+8, r24	; 0x08
    3310:	91 87       	std	Z+9, r25	; 0x09
    3312:	87 e0       	ldi	r24, 0x07	; 7
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	82 87       	std	Z+10, r24	; 0x0a
    3318:	93 87       	std	Z+11, r25	; 0x0b
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	3a c0       	rjmp	.+116    	; 0x3392 <udi_cdc_comm_setup+0xb8>
    331e:	80 76       	andi	r24, 0x60	; 96
    3320:	80 32       	cpi	r24, 0x20	; 32
    3322:	91 f5       	brne	.+100    	; 0x3388 <udi_cdc_comm_setup+0xae>
    3324:	80 91 05 24 	lds	r24, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    3328:	80 32       	cpi	r24, 0x20	; 32
    332a:	19 f0       	breq	.+6      	; 0x3332 <udi_cdc_comm_setup+0x58>
    332c:	82 32       	cpi	r24, 0x22	; 34
    332e:	b9 f0       	breq	.+46     	; 0x335e <udi_cdc_comm_setup+0x84>
    3330:	2d c0       	rjmp	.+90     	; 0x338c <udi_cdc_comm_setup+0xb2>
    3332:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3336:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    333a:	07 97       	sbiw	r24, 0x07	; 7
    333c:	49 f5       	brne	.+82     	; 0x3390 <udi_cdc_comm_setup+0xb6>
    333e:	e4 e0       	ldi	r30, 0x04	; 4
    3340:	f4 e2       	ldi	r31, 0x24	; 36
    3342:	8d e5       	ldi	r24, 0x5D	; 93
    3344:	98 e1       	ldi	r25, 0x18	; 24
    3346:	84 87       	std	Z+12, r24	; 0x0c
    3348:	95 87       	std	Z+13, r25	; 0x0d
    334a:	8c ee       	ldi	r24, 0xEC	; 236
    334c:	93 e2       	ldi	r25, 0x23	; 35
    334e:	80 87       	std	Z+8, r24	; 0x08
    3350:	91 87       	std	Z+9, r25	; 0x09
    3352:	87 e0       	ldi	r24, 0x07	; 7
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	82 87       	std	Z+10, r24	; 0x0a
    3358:	93 87       	std	Z+11, r25	; 0x0b
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	1a c0       	rjmp	.+52     	; 0x3392 <udi_cdc_comm_setup+0xb8>
    335e:	c4 e0       	ldi	r28, 0x04	; 4
    3360:	d4 e2       	ldi	r29, 0x24	; 36
    3362:	6a 81       	ldd	r22, Y+2	; 0x02
    3364:	61 70       	andi	r22, 0x01	; 1
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	59 db       	rcall	.-2382   	; 0x2a1c <usb_callback_cdc_set_dtr>
    336a:	6a 81       	ldd	r22, Y+2	; 0x02
    336c:	7b 81       	ldd	r23, Y+3	; 0x03
    336e:	76 95       	lsr	r23
    3370:	67 95       	ror	r22
    3372:	61 70       	andi	r22, 0x01	; 1
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	53 db       	rcall	.-2394   	; 0x2a1e <usb_callback_cdc_set_rts>
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	0b c0       	rjmp	.+22     	; 0x3392 <udi_cdc_comm_setup+0xb8>
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	09 c0       	rjmp	.+18     	; 0x3392 <udi_cdc_comm_setup+0xb8>
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	07 c0       	rjmp	.+14     	; 0x3392 <udi_cdc_comm_setup+0xb8>
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	05 c0       	rjmp	.+10     	; 0x3392 <udi_cdc_comm_setup+0xb8>
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	03 c0       	rjmp	.+6      	; 0x3392 <udi_cdc_comm_setup+0xb8>
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	01 c0       	rjmp	.+2      	; 0x3392 <udi_cdc_comm_setup+0xb8>
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	08 95       	ret

00003398 <udi_cdc_multi_get_nb_received_data>:
    3398:	cf 93       	push	r28
    339a:	df 93       	push	r29
    339c:	1f 92       	push	r1
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	8f b7       	in	r24, 0x3f	; 63
    33a4:	89 83       	std	Y+1, r24	; 0x01
    33a6:	f8 94       	cli
    33a8:	49 81       	ldd	r20, Y+1	; 0x01
    33aa:	20 91 55 23 	lds	r18, 0x2355	; 0x802355 <udi_cdc_rx_pos>
    33ae:	30 91 56 23 	lds	r19, 0x2356	; 0x802356 <udi_cdc_rx_pos+0x1>
    33b2:	e0 91 57 23 	lds	r30, 0x2357	; 0x802357 <udi_cdc_rx_buf_sel>
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	ee 0f       	add	r30, r30
    33ba:	ff 1f       	adc	r31, r31
    33bc:	e8 5a       	subi	r30, 0xA8	; 168
    33be:	fc 4d       	sbci	r31, 0xDC	; 220
    33c0:	80 81       	ld	r24, Z
    33c2:	91 81       	ldd	r25, Z+1	; 0x01
    33c4:	4f bf       	out	0x3f, r20	; 63
    33c6:	82 1b       	sub	r24, r18
    33c8:	93 0b       	sbc	r25, r19
    33ca:	0f 90       	pop	r0
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	08 95       	ret

000033d2 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    33d2:	e2 df       	rcall	.-60     	; 0x3398 <udi_cdc_multi_get_nb_received_data>
    33d4:	21 e0       	ldi	r18, 0x01	; 1
    33d6:	89 2b       	or	r24, r25
    33d8:	09 f4       	brne	.+2      	; 0x33dc <udi_cdc_multi_is_rx_ready+0xa>
    33da:	20 e0       	ldi	r18, 0x00	; 0
}
    33dc:	82 2f       	mov	r24, r18
    33de:	08 95       	ret

000033e0 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	1f 92       	push	r1
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    33ee:	8f b7       	in	r24, 0x3f	; 63
    33f0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    33f2:	f8 94       	cli
	return flags;
    33f4:	99 81       	ldd	r25, Y+1	; 0x01
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    33f6:	20 91 57 23 	lds	r18, 0x2357	; 0x802357 <udi_cdc_rx_buf_sel>
	if (udi_cdc_rx_trans_ongoing[port] ||
    33fa:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <udi_cdc_rx_trans_ongoing>
    33fe:	81 11       	cpse	r24, r1
    3400:	10 c0       	rjmp	.+32     	; 0x3422 <udi_cdc_rx_start+0x42>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    3402:	60 91 55 23 	lds	r22, 0x2355	; 0x802355 <udi_cdc_rx_pos>
    3406:	70 91 56 23 	lds	r23, 0x2356	; 0x802356 <udi_cdc_rx_pos+0x1>
    340a:	02 2f       	mov	r16, r18
    340c:	10 e0       	ldi	r17, 0x00	; 0
    340e:	f8 01       	movw	r30, r16
    3410:	ee 0f       	add	r30, r30
    3412:	ff 1f       	adc	r31, r31
    3414:	e8 5a       	subi	r30, 0xA8	; 168
    3416:	fc 4d       	sbci	r31, 0xDC	; 220
    3418:	40 81       	ld	r20, Z
    341a:	51 81       	ldd	r21, Z+1	; 0x01
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    341c:	64 17       	cp	r22, r20
    341e:	75 07       	cpc	r23, r21
    3420:	18 f4       	brcc	.+6      	; 0x3428 <udi_cdc_rx_start+0x48>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3422:	9f bf       	out	0x3f, r25	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	27 c0       	rjmp	.+78     	; 0x3476 <udi_cdc_rx_start+0x96>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    3428:	10 92 55 23 	sts	0x2355, r1	; 0x802355 <udi_cdc_rx_pos>
    342c:	10 92 56 23 	sts	0x2356, r1	; 0x802356 <udi_cdc_rx_pos+0x1>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	21 11       	cpse	r18, r1
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	80 93 57 23 	sts	0x2357, r24	; 0x802357 <udi_cdc_rx_buf_sel>

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	80 93 54 23 	sts	0x2354, r24	; 0x802354 <udi_cdc_rx_trans_ongoing>
    3440:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	c6 df       	rcall	.-116    	; 0x33d2 <udi_cdc_multi_is_rx_ready>
    3446:	88 23       	and	r24, r24
    3448:	11 f0       	breq	.+4      	; 0x344e <udi_cdc_rx_start+0x6e>
		UDI_CDC_RX_NOTIFY(port);
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	e9 da       	rcall	.-2606   	; 0x2a20 <usb_callback_rx_notify>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    344e:	a8 01       	movw	r20, r16
    3450:	00 24       	eor	r0, r0
    3452:	56 95       	lsr	r21
    3454:	47 95       	ror	r20
    3456:	07 94       	ror	r0
    3458:	56 95       	lsr	r21
    345a:	47 95       	ror	r20
    345c:	07 94       	ror	r0
    345e:	54 2f       	mov	r21, r20
    3460:	40 2d       	mov	r20, r0
    3462:	44 5a       	subi	r20, 0xA4	; 164
    3464:	5c 4d       	sbci	r21, 0xDC	; 220
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    3466:	03 e7       	ldi	r16, 0x73	; 115
    3468:	1a e1       	ldi	r17, 0x1A	; 26
    346a:	20 e4       	ldi	r18, 0x40	; 64
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	61 e0       	ldi	r22, 0x01	; 1
    3470:	82 e0       	ldi	r24, 0x02	; 2
    3472:	0e 94 7f 10 	call	0x20fe	; 0x20fe <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    3476:	0f 90       	pop	r0
    3478:	df 91       	pop	r29
    347a:	cf 91       	pop	r28
    347c:	1f 91       	pop	r17
    347e:	0f 91       	pop	r16
    3480:	08 95       	ret

00003482 <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
    3482:	10 92 dd 23 	sts	0x23DD, r1	; 0x8023dd <udi_cdc_nb_data_enabled>
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    3486:	10 92 cc 22 	sts	0x22CC, r1	; 0x8022cc <udi_cdc_tx_trans_ongoing>
	udi_cdc_tx_both_buf_to_send[port] = false;
    348a:	10 92 cb 22 	sts	0x22CB, r1	; 0x8022cb <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_buf_sel[port] = 0;
    348e:	10 92 cf 22 	sts	0x22CF, r1	; 0x8022cf <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf_nb[port][0] = 0;
    3492:	e0 ed       	ldi	r30, 0xD0	; 208
    3494:	f2 e2       	ldi	r31, 0x22	; 34
    3496:	10 82       	st	Z, r1
    3498:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_buf_nb[port][1] = 0;
    349a:	12 82       	std	Z+2, r1	; 0x02
    349c:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_tx_sof_num[port] = 0;
    349e:	10 92 cd 22 	sts	0x22CD, r1	; 0x8022cd <udi_cdc_tx_sof_num>
    34a2:	10 92 ce 22 	sts	0x22CE, r1	; 0x8022ce <udi_cdc_tx_sof_num+0x1>
	udi_cdc_tx_send(port);
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	3d de       	rcall	.-902    	; 0x3124 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    34aa:	10 92 54 23 	sts	0x2354, r1	; 0x802354 <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_buf_sel[port] = 0;
    34ae:	10 92 57 23 	sts	0x2357, r1	; 0x802357 <udi_cdc_rx_buf_sel>
	udi_cdc_rx_buf_nb[port][0] = 0;
    34b2:	e8 e5       	ldi	r30, 0x58	; 88
    34b4:	f3 e2       	ldi	r31, 0x23	; 35
    34b6:	10 82       	st	Z, r1
    34b8:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_rx_buf_nb[port][1] = 0;
    34ba:	12 82       	std	Z+2, r1	; 0x02
    34bc:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_rx_pos[port] = 0;
    34be:	10 92 55 23 	sts	0x2355, r1	; 0x802355 <udi_cdc_rx_pos>
    34c2:	10 92 56 23 	sts	0x2356, r1	; 0x802356 <udi_cdc_rx_pos+0x1>
	if (!udi_cdc_rx_start(port)) {
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	8b df       	rcall	.-234    	; 0x33e0 <udi_cdc_rx_start>
    34ca:	88 23       	and	r24, r24
    34cc:	59 f0       	breq	.+22     	; 0x34e4 <udi_cdc_data_enable+0x62>
		return false;
	}
	udi_cdc_nb_data_enabled++;
    34ce:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <udi_cdc_nb_data_enabled>
    34d2:	9f 5f       	subi	r25, 0xFF	; 255
    34d4:	90 93 dd 23 	sts	0x23DD, r25	; 0x8023dd <udi_cdc_nb_data_enabled>
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    34d8:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <udi_cdc_nb_data_enabled>
    34dc:	91 30       	cpi	r25, 0x01	; 1
    34de:	11 f4       	brne	.+4      	; 0x34e4 <udi_cdc_data_enable+0x62>
		udi_cdc_data_running = true;
    34e0:	90 93 dc 23 	sts	0x23DC, r25	; 0x8023dc <udi_cdc_data_running>
	}
	return true;
}
    34e4:	08 95       	ret

000034e6 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    34e6:	0f 93       	push	r16
    34e8:	1f 93       	push	r17
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
    34ea:	81 11       	cpse	r24, r1
    34ec:	29 c0       	rjmp	.+82     	; 0x3540 <udi_cdc_data_received+0x5a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    34ee:	80 91 57 23 	lds	r24, 0x2357	; 0x802357 <udi_cdc_rx_buf_sel>
    34f2:	e1 e0       	ldi	r30, 0x01	; 1
    34f4:	81 11       	cpse	r24, r1
    34f6:	e0 e0       	ldi	r30, 0x00	; 0
    34f8:	84 2f       	mov	r24, r20
	if (!n) {
    34fa:	61 15       	cp	r22, r1
    34fc:	71 05       	cpc	r23, r1
    34fe:	a9 f4       	brne	.+42     	; 0x352a <udi_cdc_data_received+0x44>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	00 24       	eor	r0, r0
    3504:	f6 95       	lsr	r31
    3506:	e7 95       	ror	r30
    3508:	07 94       	ror	r0
    350a:	f6 95       	lsr	r31
    350c:	e7 95       	ror	r30
    350e:	07 94       	ror	r0
    3510:	fe 2f       	mov	r31, r30
    3512:	e0 2d       	mov	r30, r0
    3514:	af 01       	movw	r20, r30
    3516:	44 5a       	subi	r20, 0xA4	; 164
    3518:	5c 4d       	sbci	r21, 0xDC	; 220
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    351a:	03 e7       	ldi	r16, 0x73	; 115
    351c:	1a e1       	ldi	r17, 0x1A	; 26
    351e:	20 e4       	ldi	r18, 0x40	; 64
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	61 e0       	ldi	r22, 0x01	; 1
    3524:	0e 94 7f 10 	call	0x20fe	; 0x20fe <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    3528:	0b c0       	rjmp	.+22     	; 0x3540 <udi_cdc_data_received+0x5a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	ee 0f       	add	r30, r30
    352e:	ff 1f       	adc	r31, r31
    3530:	e8 5a       	subi	r30, 0xA8	; 168
    3532:	fc 4d       	sbci	r31, 0xDC	; 220
    3534:	60 83       	st	Z, r22
    3536:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
    3538:	10 92 54 23 	sts	0x2354, r1	; 0x802354 <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_start(port);
    353c:	80 e0       	ldi	r24, 0x00	; 0
    353e:	50 df       	rcall	.-352    	; 0x33e0 <udi_cdc_rx_start>
}
    3540:	1f 91       	pop	r17
    3542:	0f 91       	pop	r16
    3544:	08 95       	ret

00003546 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    3546:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    354a:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    354e:	01 90       	ld	r0, Z+
    3550:	f0 81       	ld	r31, Z
    3552:	e0 2d       	mov	r30, r0
    3554:	22 81       	ldd	r18, Z+2	; 0x02
    3556:	33 81       	ldd	r19, Z+3	; 0x03
    3558:	2e 0f       	add	r18, r30
    355a:	3f 1f       	adc	r19, r31
    355c:	fc 01       	movw	r30, r24
    355e:	40 81       	ld	r20, Z
    3560:	e4 0f       	add	r30, r20
    3562:	f1 1d       	adc	r31, r1
    3564:	e2 17       	cp	r30, r18
    3566:	f3 07       	cpc	r31, r19
    3568:	b8 f4       	brcc	.+46     	; 0x3598 <udc_next_desc_in_iface+0x52>
    356a:	81 81       	ldd	r24, Z+1	; 0x01
    356c:	84 30       	cpi	r24, 0x04	; 4
    356e:	b9 f0       	breq	.+46     	; 0x359e <udc_next_desc_in_iface+0x58>
    3570:	86 13       	cpse	r24, r22
    3572:	09 c0       	rjmp	.+18     	; 0x3586 <udc_next_desc_in_iface+0x40>
    3574:	05 c0       	rjmp	.+10     	; 0x3580 <udc_next_desc_in_iface+0x3a>
    3576:	81 81       	ldd	r24, Z+1	; 0x01
    3578:	84 30       	cpi	r24, 0x04	; 4
    357a:	a1 f0       	breq	.+40     	; 0x35a4 <udc_next_desc_in_iface+0x5e>
    357c:	86 13       	cpse	r24, r22
    357e:	03 c0       	rjmp	.+6      	; 0x3586 <udc_next_desc_in_iface+0x40>
    3580:	8e 2f       	mov	r24, r30
    3582:	9f 2f       	mov	r25, r31
    3584:	08 95       	ret
    3586:	80 81       	ld	r24, Z
    3588:	e8 0f       	add	r30, r24
    358a:	f1 1d       	adc	r31, r1
    358c:	e2 17       	cp	r30, r18
    358e:	f3 07       	cpc	r31, r19
    3590:	90 f3       	brcs	.-28     	; 0x3576 <udc_next_desc_in_iface+0x30>
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	08 95       	ret
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	08 95       	ret
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	08 95       	ret
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	08 95       	ret

000035aa <udc_valid_address>:
    35aa:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    35ae:	8f 77       	andi	r24, 0x7F	; 127
    35b0:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <udd_set_address>
    35b4:	08 95       	ret

000035b6 <udc_update_iface_desc>:
    35b6:	90 91 fa 23 	lds	r25, 0x23FA	; 0x8023fa <udc_num_configuration>
    35ba:	99 23       	and	r25, r25
    35bc:	81 f1       	breq	.+96     	; 0x361e <udc_update_iface_desc+0x68>
    35be:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    35c2:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    35c6:	01 90       	ld	r0, Z+
    35c8:	f0 81       	ld	r31, Z
    35ca:	e0 2d       	mov	r30, r0
    35cc:	94 81       	ldd	r25, Z+4	; 0x04
    35ce:	89 17       	cp	r24, r25
    35d0:	40 f5       	brcc	.+80     	; 0x3622 <udc_update_iface_desc+0x6c>
    35d2:	e0 93 f6 23 	sts	0x23F6, r30	; 0x8023f6 <udc_ptr_iface>
    35d6:	f0 93 f7 23 	sts	0x23F7, r31	; 0x8023f7 <udc_ptr_iface+0x1>
    35da:	22 81       	ldd	r18, Z+2	; 0x02
    35dc:	33 81       	ldd	r19, Z+3	; 0x03
    35de:	2e 0f       	add	r18, r30
    35e0:	3f 1f       	adc	r19, r31
    35e2:	e2 17       	cp	r30, r18
    35e4:	f3 07       	cpc	r31, r19
    35e6:	f8 f4       	brcc	.+62     	; 0x3626 <udc_update_iface_desc+0x70>
    35e8:	91 81       	ldd	r25, Z+1	; 0x01
    35ea:	94 30       	cpi	r25, 0x04	; 4
    35ec:	61 f4       	brne	.+24     	; 0x3606 <udc_update_iface_desc+0x50>
    35ee:	92 81       	ldd	r25, Z+2	; 0x02
    35f0:	98 13       	cpse	r25, r24
    35f2:	09 c0       	rjmp	.+18     	; 0x3606 <udc_update_iface_desc+0x50>
    35f4:	93 81       	ldd	r25, Z+3	; 0x03
    35f6:	96 13       	cpse	r25, r22
    35f8:	06 c0       	rjmp	.+12     	; 0x3606 <udc_update_iface_desc+0x50>
    35fa:	e0 93 f6 23 	sts	0x23F6, r30	; 0x8023f6 <udc_ptr_iface>
    35fe:	f0 93 f7 23 	sts	0x23F7, r31	; 0x8023f7 <udc_ptr_iface+0x1>
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	08 95       	ret
    3606:	90 81       	ld	r25, Z
    3608:	e9 0f       	add	r30, r25
    360a:	f1 1d       	adc	r31, r1
    360c:	e2 17       	cp	r30, r18
    360e:	f3 07       	cpc	r31, r19
    3610:	58 f3       	brcs	.-42     	; 0x35e8 <udc_update_iface_desc+0x32>
    3612:	e0 93 f6 23 	sts	0x23F6, r30	; 0x8023f6 <udc_ptr_iface>
    3616:	f0 93 f7 23 	sts	0x23F7, r31	; 0x8023f7 <udc_ptr_iface+0x1>
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	08 95       	ret
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	08 95       	ret
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	08 95       	ret
    3626:	80 e0       	ldi	r24, 0x00	; 0
    3628:	08 95       	ret

0000362a <udc_iface_disable>:
    362a:	ef 92       	push	r14
    362c:	ff 92       	push	r15
    362e:	1f 93       	push	r17
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	c8 2f       	mov	r28, r24
    3636:	60 e0       	ldi	r22, 0x00	; 0
    3638:	be df       	rcall	.-132    	; 0x35b6 <udc_update_iface_desc>
    363a:	18 2f       	mov	r17, r24
    363c:	88 23       	and	r24, r24
    363e:	81 f1       	breq	.+96     	; 0x36a0 <udc_iface_disable+0x76>
    3640:	a0 91 f8 23 	lds	r26, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3644:	b0 91 f9 23 	lds	r27, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3648:	ec 2f       	mov	r30, r28
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	ee 0f       	add	r30, r30
    364e:	ff 1f       	adc	r31, r31
    3650:	12 96       	adiw	r26, 0x02	; 2
    3652:	8d 91       	ld	r24, X+
    3654:	9c 91       	ld	r25, X
    3656:	13 97       	sbiw	r26, 0x03	; 3
    3658:	e8 0f       	add	r30, r24
    365a:	f9 1f       	adc	r31, r25
    365c:	e0 80       	ld	r14, Z
    365e:	f1 80       	ldd	r15, Z+1	; 0x01
    3660:	d7 01       	movw	r26, r14
    3662:	16 96       	adiw	r26, 0x06	; 6
    3664:	ed 91       	ld	r30, X+
    3666:	fc 91       	ld	r31, X
    3668:	17 97       	sbiw	r26, 0x07	; 7
    366a:	19 95       	eicall
    366c:	68 2f       	mov	r22, r24
    366e:	8c 2f       	mov	r24, r28
    3670:	a2 df       	rcall	.-188    	; 0x35b6 <udc_update_iface_desc>
    3672:	18 2f       	mov	r17, r24
    3674:	88 23       	and	r24, r24
    3676:	a1 f0       	breq	.+40     	; 0x36a0 <udc_iface_disable+0x76>
    3678:	c0 91 f6 23 	lds	r28, 0x23F6	; 0x8023f6 <udc_ptr_iface>
    367c:	d0 91 f7 23 	lds	r29, 0x23F7	; 0x8023f7 <udc_ptr_iface+0x1>
    3680:	65 e0       	ldi	r22, 0x05	; 5
    3682:	ce 01       	movw	r24, r28
    3684:	60 df       	rcall	.-320    	; 0x3546 <udc_next_desc_in_iface>
    3686:	ec 01       	movw	r28, r24
    3688:	89 2b       	or	r24, r25
    368a:	21 f0       	breq	.+8      	; 0x3694 <udc_iface_disable+0x6a>
    368c:	8a 81       	ldd	r24, Y+2	; 0x02
    368e:	0e 94 90 11 	call	0x2320	; 0x2320 <udd_ep_free>
    3692:	f6 cf       	rjmp	.-20     	; 0x3680 <udc_iface_disable+0x56>
    3694:	d7 01       	movw	r26, r14
    3696:	12 96       	adiw	r26, 0x02	; 2
    3698:	ed 91       	ld	r30, X+
    369a:	fc 91       	ld	r31, X
    369c:	13 97       	sbiw	r26, 0x03	; 3
    369e:	19 95       	eicall
    36a0:	81 2f       	mov	r24, r17
    36a2:	df 91       	pop	r29
    36a4:	cf 91       	pop	r28
    36a6:	1f 91       	pop	r17
    36a8:	ff 90       	pop	r15
    36aa:	ef 90       	pop	r14
    36ac:	08 95       	ret

000036ae <udc_iface_enable>:
    36ae:	1f 93       	push	r17
    36b0:	cf 93       	push	r28
    36b2:	df 93       	push	r29
    36b4:	18 2f       	mov	r17, r24
    36b6:	7f df       	rcall	.-258    	; 0x35b6 <udc_update_iface_desc>
    36b8:	88 23       	and	r24, r24
    36ba:	41 f1       	breq	.+80     	; 0x370c <udc_iface_enable+0x5e>
    36bc:	c0 91 f6 23 	lds	r28, 0x23F6	; 0x8023f6 <udc_ptr_iface>
    36c0:	d0 91 f7 23 	lds	r29, 0x23F7	; 0x8023f7 <udc_ptr_iface+0x1>
    36c4:	65 e0       	ldi	r22, 0x05	; 5
    36c6:	ce 01       	movw	r24, r28
    36c8:	3e df       	rcall	.-388    	; 0x3546 <udc_next_desc_in_iface>
    36ca:	ec 01       	movw	r28, r24
    36cc:	89 2b       	or	r24, r25
    36ce:	49 f0       	breq	.+18     	; 0x36e2 <udc_iface_enable+0x34>
    36d0:	4c 81       	ldd	r20, Y+4	; 0x04
    36d2:	5d 81       	ldd	r21, Y+5	; 0x05
    36d4:	6b 81       	ldd	r22, Y+3	; 0x03
    36d6:	8a 81       	ldd	r24, Y+2	; 0x02
    36d8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <udd_ep_alloc>
    36dc:	81 11       	cpse	r24, r1
    36de:	f2 cf       	rjmp	.-28     	; 0x36c4 <udc_iface_enable+0x16>
    36e0:	15 c0       	rjmp	.+42     	; 0x370c <udc_iface_enable+0x5e>
    36e2:	a0 91 f8 23 	lds	r26, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    36e6:	b0 91 f9 23 	lds	r27, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    36ea:	e1 2f       	mov	r30, r17
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	ee 0f       	add	r30, r30
    36f0:	ff 1f       	adc	r31, r31
    36f2:	12 96       	adiw	r26, 0x02	; 2
    36f4:	8d 91       	ld	r24, X+
    36f6:	9c 91       	ld	r25, X
    36f8:	13 97       	sbiw	r26, 0x03	; 3
    36fa:	e8 0f       	add	r30, r24
    36fc:	f9 1f       	adc	r31, r25
    36fe:	01 90       	ld	r0, Z+
    3700:	f0 81       	ld	r31, Z
    3702:	e0 2d       	mov	r30, r0
    3704:	01 90       	ld	r0, Z+
    3706:	f0 81       	ld	r31, Z
    3708:	e0 2d       	mov	r30, r0
    370a:	19 95       	eicall
    370c:	df 91       	pop	r29
    370e:	cf 91       	pop	r28
    3710:	1f 91       	pop	r17
    3712:	08 95       	ret

00003714 <udc_start>:
    3714:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <udd_enable>
    3718:	08 95       	ret

0000371a <udc_reset>:
    371a:	cf 93       	push	r28
    371c:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udc_num_configuration>
    3720:	88 23       	and	r24, r24
    3722:	c1 f0       	breq	.+48     	; 0x3754 <udc_reset+0x3a>
    3724:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3728:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    372c:	01 90       	ld	r0, Z+
    372e:	f0 81       	ld	r31, Z
    3730:	e0 2d       	mov	r30, r0
    3732:	84 81       	ldd	r24, Z+4	; 0x04
    3734:	88 23       	and	r24, r24
    3736:	71 f0       	breq	.+28     	; 0x3754 <udc_reset+0x3a>
    3738:	c0 e0       	ldi	r28, 0x00	; 0
    373a:	8c 2f       	mov	r24, r28
    373c:	76 df       	rcall	.-276    	; 0x362a <udc_iface_disable>
    373e:	cf 5f       	subi	r28, 0xFF	; 255
    3740:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3744:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3748:	01 90       	ld	r0, Z+
    374a:	f0 81       	ld	r31, Z
    374c:	e0 2d       	mov	r30, r0
    374e:	84 81       	ldd	r24, Z+4	; 0x04
    3750:	c8 17       	cp	r28, r24
    3752:	98 f3       	brcs	.-26     	; 0x373a <udc_reset+0x20>
    3754:	10 92 fa 23 	sts	0x23FA, r1	; 0x8023fa <udc_num_configuration>
    3758:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udc_device_status>
    375c:	81 fd       	sbrc	r24, 1
    375e:	55 d9       	rcall	.-3414   	; 0x2a0a <usb_callback_remotewakeup_disable>
    3760:	10 92 fe 23 	sts	0x23FE, r1	; 0x8023fe <udc_device_status>
    3764:	10 92 ff 23 	sts	0x23FF, r1	; 0x8023ff <udc_device_status+0x1>
    3768:	cf 91       	pop	r28
    376a:	08 95       	ret

0000376c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    376c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    376e:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udc_num_configuration>
    3772:	88 23       	and	r24, r24
    3774:	49 f1       	breq	.+82     	; 0x37c8 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3776:	a0 91 f8 23 	lds	r26, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    377a:	b0 91 f9 23 	lds	r27, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    377e:	ed 91       	ld	r30, X+
    3780:	fc 91       	ld	r31, X
    3782:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3784:	84 81       	ldd	r24, Z+4	; 0x04
    3786:	88 23       	and	r24, r24
    3788:	f9 f0       	breq	.+62     	; 0x37c8 <udc_sof_notify+0x5c>
    378a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    378c:	ec 2f       	mov	r30, r28
    378e:	f0 e0       	ldi	r31, 0x00	; 0
    3790:	ee 0f       	add	r30, r30
    3792:	ff 1f       	adc	r31, r31
    3794:	12 96       	adiw	r26, 0x02	; 2
    3796:	8d 91       	ld	r24, X+
    3798:	9c 91       	ld	r25, X
    379a:	13 97       	sbiw	r26, 0x03	; 3
    379c:	e8 0f       	add	r30, r24
    379e:	f9 1f       	adc	r31, r25
    37a0:	01 90       	ld	r0, Z+
    37a2:	f0 81       	ld	r31, Z
    37a4:	e0 2d       	mov	r30, r0
    37a6:	00 84       	ldd	r0, Z+8	; 0x08
    37a8:	f1 85       	ldd	r31, Z+9	; 0x09
    37aa:	e0 2d       	mov	r30, r0
    37ac:	30 97       	sbiw	r30, 0x00	; 0
    37ae:	09 f0       	breq	.+2      	; 0x37b2 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    37b0:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    37b2:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    37b4:	a0 91 f8 23 	lds	r26, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    37b8:	b0 91 f9 23 	lds	r27, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    37bc:	ed 91       	ld	r30, X+
    37be:	fc 91       	ld	r31, X
    37c0:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    37c2:	84 81       	ldd	r24, Z+4	; 0x04
    37c4:	c8 17       	cp	r28, r24
    37c6:	10 f3       	brcs	.-60     	; 0x378c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    37c8:	cf 91       	pop	r28
    37ca:	08 95       	ret

000037cc <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    37cc:	0f 93       	push	r16
    37ce:	1f 93       	push	r17
    37d0:	cf 93       	push	r28
    37d2:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    37d4:	e4 e0       	ldi	r30, 0x04	; 4
    37d6:	f4 e2       	ldi	r31, 0x24	; 36
    37d8:	12 86       	std	Z+10, r1	; 0x0a
    37da:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    37dc:	14 86       	std	Z+12, r1	; 0x0c
    37de:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    37e0:	16 86       	std	Z+14, r1	; 0x0e
    37e2:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    37e4:	80 81       	ld	r24, Z
    37e6:	88 23       	and	r24, r24
    37e8:	0c f0       	brlt	.+2      	; 0x37ec <udc_process_setup+0x20>
    37ea:	8d c2       	rjmp	.+1306   	; 0x3d06 <udc_process_setup+0x53a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    37ec:	20 91 0a 24 	lds	r18, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    37f0:	30 91 0b 24 	lds	r19, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    37f4:	21 15       	cp	r18, r1
    37f6:	31 05       	cpc	r19, r1
    37f8:	09 f0       	breq	.+2      	; 0x37fc <udc_process_setup+0x30>
    37fa:	80 c2       	rjmp	.+1280   	; 0x3cfc <udc_process_setup+0x530>
    37fc:	7b c2       	rjmp	.+1270   	; 0x3cf4 <udc_process_setup+0x528>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    37fe:	8f 71       	andi	r24, 0x1F	; 31
    3800:	09 f0       	breq	.+2      	; 0x3804 <udc_process_setup+0x38>
    3802:	ae c0       	rjmp	.+348    	; 0x3960 <udc_process_setup+0x194>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3804:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    3808:	96 30       	cpi	r25, 0x06	; 6
    380a:	81 f0       	breq	.+32     	; 0x382c <udc_process_setup+0x60>
    380c:	98 30       	cpi	r25, 0x08	; 8
    380e:	09 f4       	brne	.+2      	; 0x3812 <udc_process_setup+0x46>
    3810:	9c c0       	rjmp	.+312    	; 0x394a <udc_process_setup+0x17e>
    3812:	91 11       	cpse	r25, r1
    3814:	a5 c0       	rjmp	.+330    	; 0x3960 <udc_process_setup+0x194>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    3816:	22 30       	cpi	r18, 0x02	; 2
    3818:	31 05       	cpc	r19, r1
    381a:	09 f0       	breq	.+2      	; 0x381e <udc_process_setup+0x52>
    381c:	f4 c1       	rjmp	.+1000   	; 0x3c06 <udc_process_setup+0x43a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    381e:	62 e0       	ldi	r22, 0x02	; 2
    3820:	70 e0       	ldi	r23, 0x00	; 0
    3822:	8e ef       	ldi	r24, 0xFE	; 254
    3824:	93 e2       	ldi	r25, 0x23	; 35
    3826:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    382a:	76 c2       	rjmp	.+1260   	; 0x3d18 <udc_process_setup+0x54c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    382c:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    3830:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    3834:	29 2f       	mov	r18, r25
    3836:	33 27       	eor	r19, r19
    3838:	22 30       	cpi	r18, 0x02	; 2
    383a:	31 05       	cpc	r19, r1
    383c:	b1 f0       	breq	.+44     	; 0x386a <udc_process_setup+0x9e>
    383e:	24 f4       	brge	.+8      	; 0x3848 <udc_process_setup+0x7c>
    3840:	21 30       	cpi	r18, 0x01	; 1
    3842:	31 05       	cpc	r19, r1
    3844:	41 f0       	breq	.+16     	; 0x3856 <udc_process_setup+0x8a>
    3846:	d6 c1       	rjmp	.+940    	; 0x3bf4 <udc_process_setup+0x428>
    3848:	23 30       	cpi	r18, 0x03	; 3
    384a:	31 05       	cpc	r19, r1
    384c:	f1 f1       	breq	.+124    	; 0x38ca <udc_process_setup+0xfe>
    384e:	2f 30       	cpi	r18, 0x0F	; 15
    3850:	31 05       	cpc	r19, r1
    3852:	61 f1       	breq	.+88     	; 0x38ac <udc_process_setup+0xe0>
    3854:	cf c1       	rjmp	.+926    	; 0x3bf4 <udc_process_setup+0x428>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    3856:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <udc_config>
    385a:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    385e:	dc 01       	movw	r26, r24
    3860:	6c 91       	ld	r22, X
    3862:	70 e0       	ldi	r23, 0x00	; 0
    3864:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    3868:	61 c0       	rjmp	.+194    	; 0x392c <udc_process_setup+0x160>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    386a:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <udc_config>
    386e:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <udc_config+0x1>
    3872:	21 89       	ldd	r18, Z+17	; 0x11
    3874:	82 17       	cp	r24, r18
    3876:	08 f0       	brcs	.+2      	; 0x387a <udc_process_setup+0xae>
    3878:	c6 c1       	rjmp	.+908    	; 0x3c06 <udc_process_setup+0x43a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    387a:	99 27       	eor	r25, r25
    387c:	88 0f       	add	r24, r24
    387e:	99 1f       	adc	r25, r25
    3880:	88 0f       	add	r24, r24
    3882:	99 1f       	adc	r25, r25
    3884:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config+0x2>
    3888:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x3>
    388c:	e8 0f       	add	r30, r24
    388e:	f9 1f       	adc	r31, r25
    3890:	80 81       	ld	r24, Z
    3892:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    3894:	fc 01       	movw	r30, r24
    3896:	62 81       	ldd	r22, Z+2	; 0x02
    3898:	73 81       	ldd	r23, Z+3	; 0x03
    389a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    389e:	e0 91 0c 24 	lds	r30, 0x240C	; 0x80240c <udd_g_ctrlreq+0x8>
    38a2:	f0 91 0d 24 	lds	r31, 0x240D	; 0x80240d <udd_g_ctrlreq+0x9>
    38a6:	82 e0       	ldi	r24, 0x02	; 2
    38a8:	81 83       	std	Z+1, r24	; 0x01
    38aa:	40 c0       	rjmp	.+128    	; 0x392c <udc_process_setup+0x160>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    38ac:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <udc_config+0x4>
    38b0:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <udc_config+0x5>
    38b4:	00 97       	sbiw	r24, 0x00	; 0
    38b6:	09 f4       	brne	.+2      	; 0x38ba <udc_process_setup+0xee>
    38b8:	a6 c1       	rjmp	.+844    	; 0x3c06 <udc_process_setup+0x43a>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    38ba:	dc 01       	movw	r26, r24
    38bc:	12 96       	adiw	r26, 0x02	; 2
    38be:	6d 91       	ld	r22, X+
    38c0:	7c 91       	ld	r23, X
    38c2:	13 97       	sbiw	r26, 0x03	; 3
    38c4:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    38c8:	31 c0       	rjmp	.+98     	; 0x392c <udc_process_setup+0x160>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    38ca:	99 27       	eor	r25, r25
    38cc:	81 30       	cpi	r24, 0x01	; 1
    38ce:	91 05       	cpc	r25, r1
    38d0:	99 f0       	breq	.+38     	; 0x38f8 <udc_process_setup+0x12c>
    38d2:	58 f0       	brcs	.+22     	; 0x38ea <udc_process_setup+0x11e>
    38d4:	82 30       	cpi	r24, 0x02	; 2
    38d6:	91 05       	cpc	r25, r1
    38d8:	09 f4       	brne	.+2      	; 0x38dc <udc_process_setup+0x110>
    38da:	1a c2       	rjmp	.+1076   	; 0x3d10 <udc_process_setup+0x544>
    38dc:	03 97       	sbiw	r24, 0x03	; 3
    38de:	09 f0       	breq	.+2      	; 0x38e2 <udc_process_setup+0x116>
    38e0:	92 c1       	rjmp	.+804    	; 0x3c06 <udc_process_setup+0x43a>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    38e2:	26 e0       	ldi	r18, 0x06	; 6
		str = udc_get_string_serial_name();
    38e4:	84 e4       	ldi	r24, 0x44	; 68
    38e6:	91 e2       	ldi	r25, 0x21	; 33
    38e8:	0a c0       	rjmp	.+20     	; 0x38fe <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    38ea:	64 e0       	ldi	r22, 0x04	; 4
    38ec:	70 e0       	ldi	r23, 0x00	; 0
    38ee:	80 ec       	ldi	r24, 0xC0	; 192
    38f0:	90 e2       	ldi	r25, 0x20	; 32
    38f2:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    38f6:	1a c0       	rjmp	.+52     	; 0x392c <udc_process_setup+0x160>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    38f8:	8f ea       	ldi	r24, 0xAF	; 175
    38fa:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    38fc:	20 e1       	ldi	r18, 0x10	; 16
    38fe:	38 2f       	mov	r19, r24
    3900:	a0 e8       	ldi	r26, 0x80	; 128
    3902:	b0 e2       	ldi	r27, 0x20	; 32
    3904:	e8 2f       	mov	r30, r24
    3906:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    3908:	81 91       	ld	r24, Z+
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	8d 93       	st	X+, r24
    390e:	9d 93       	st	X+, r25
    3910:	8e 2f       	mov	r24, r30
    3912:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    3914:	82 17       	cp	r24, r18
    3916:	c0 f3       	brcs	.-16     	; 0x3908 <udc_process_setup+0x13c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    3918:	62 2f       	mov	r22, r18
    391a:	66 0f       	add	r22, r22
    391c:	6e 5f       	subi	r22, 0xFE	; 254
    391e:	60 93 7e 20 	sts	0x207E, r22	; 0x80207e <udc_string_desc>
		udd_set_setup_payload(
    3922:	70 e0       	ldi	r23, 0x00	; 0
    3924:	8e e7       	ldi	r24, 0x7E	; 126
    3926:	90 e2       	ldi	r25, 0x20	; 32
    3928:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    392c:	e4 e0       	ldi	r30, 0x04	; 4
    392e:	f4 e2       	ldi	r31, 0x24	; 36
    3930:	86 81       	ldd	r24, Z+6	; 0x06
    3932:	97 81       	ldd	r25, Z+7	; 0x07
    3934:	22 85       	ldd	r18, Z+10	; 0x0a
    3936:	33 85       	ldd	r19, Z+11	; 0x0b
    3938:	82 17       	cp	r24, r18
    393a:	93 07       	cpc	r25, r19
    393c:	08 f0       	brcs	.+2      	; 0x3940 <udc_process_setup+0x174>
    393e:	ec c1       	rjmp	.+984    	; 0x3d18 <udc_process_setup+0x54c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    3940:	80 93 0e 24 	sts	0x240E, r24	; 0x80240e <udd_g_ctrlreq+0xa>
    3944:	90 93 0f 24 	sts	0x240F, r25	; 0x80240f <udd_g_ctrlreq+0xb>
    3948:	e7 c1       	rjmp	.+974    	; 0x3d18 <udc_process_setup+0x54c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    394a:	21 30       	cpi	r18, 0x01	; 1
    394c:	31 05       	cpc	r19, r1
    394e:	09 f0       	breq	.+2      	; 0x3952 <udc_process_setup+0x186>
    3950:	5a c1       	rjmp	.+692    	; 0x3c06 <udc_process_setup+0x43a>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    3952:	61 e0       	ldi	r22, 0x01	; 1
    3954:	70 e0       	ldi	r23, 0x00	; 0
    3956:	8a ef       	ldi	r24, 0xFA	; 250
    3958:	93 e2       	ldi	r25, 0x23	; 35
    395a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    395e:	dc c1       	rjmp	.+952    	; 0x3d18 <udc_process_setup+0x54c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3960:	81 30       	cpi	r24, 0x01	; 1
    3962:	e9 f5       	brne	.+122    	; 0x39de <udc_process_setup+0x212>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3964:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    3968:	9a 30       	cpi	r25, 0x0A	; 10
    396a:	c9 f5       	brne	.+114    	; 0x39de <udc_process_setup+0x212>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    396c:	21 30       	cpi	r18, 0x01	; 1
    396e:	31 05       	cpc	r19, r1
    3970:	09 f0       	breq	.+2      	; 0x3974 <udc_process_setup+0x1a8>
    3972:	49 c1       	rjmp	.+658    	; 0x3c06 <udc_process_setup+0x43a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    3974:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udc_num_configuration>
    3978:	88 23       	and	r24, r24
    397a:	09 f4       	brne	.+2      	; 0x397e <udc_process_setup+0x1b2>
    397c:	44 c1       	rjmp	.+648    	; 0x3c06 <udc_process_setup+0x43a>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    397e:	c0 91 08 24 	lds	r28, 0x2408	; 0x802408 <udd_g_ctrlreq+0x4>
    3982:	d0 91 09 24 	lds	r29, 0x2409	; 0x802409 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3986:	00 91 f8 23 	lds	r16, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    398a:	10 91 f9 23 	lds	r17, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    398e:	d8 01       	movw	r26, r16
    3990:	ed 91       	ld	r30, X+
    3992:	fc 91       	ld	r31, X
    3994:	84 81       	ldd	r24, Z+4	; 0x04
    3996:	c8 17       	cp	r28, r24
    3998:	08 f0       	brcs	.+2      	; 0x399c <udc_process_setup+0x1d0>
    399a:	35 c1       	rjmp	.+618    	; 0x3c06 <udc_process_setup+0x43a>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    399c:	60 e0       	ldi	r22, 0x00	; 0
    399e:	8c 2f       	mov	r24, r28
    39a0:	0a de       	rcall	.-1004   	; 0x35b6 <udc_update_iface_desc>
    39a2:	88 23       	and	r24, r24
    39a4:	09 f4       	brne	.+2      	; 0x39a8 <udc_process_setup+0x1dc>
    39a6:	2f c1       	rjmp	.+606    	; 0x3c06 <udc_process_setup+0x43a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    39a8:	ce 01       	movw	r24, r28
    39aa:	99 27       	eor	r25, r25
    39ac:	88 0f       	add	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	d8 01       	movw	r26, r16
    39b2:	12 96       	adiw	r26, 0x02	; 2
    39b4:	ed 91       	ld	r30, X+
    39b6:	fc 91       	ld	r31, X
    39b8:	13 97       	sbiw	r26, 0x03	; 3
    39ba:	e8 0f       	add	r30, r24
    39bc:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    39be:	01 90       	ld	r0, Z+
    39c0:	f0 81       	ld	r31, Z
    39c2:	e0 2d       	mov	r30, r0
    39c4:	86 81       	ldd	r24, Z+6	; 0x06
    39c6:	97 81       	ldd	r25, Z+7	; 0x07
    39c8:	fc 01       	movw	r30, r24
    39ca:	19 95       	eicall
    39cc:	80 93 fc 23 	sts	0x23FC, r24	; 0x8023fc <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    39d0:	61 e0       	ldi	r22, 0x01	; 1
    39d2:	70 e0       	ldi	r23, 0x00	; 0
    39d4:	8c ef       	ldi	r24, 0xFC	; 252
    39d6:	93 e2       	ldi	r25, 0x23	; 35
    39d8:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    39dc:	9d c1       	rjmp	.+826    	; 0x3d18 <udc_process_setup+0x54c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    39de:	82 30       	cpi	r24, 0x02	; 2
    39e0:	09 f0       	breq	.+2      	; 0x39e4 <udc_process_setup+0x218>
    39e2:	11 c1       	rjmp	.+546    	; 0x3c06 <udc_process_setup+0x43a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    39e4:	80 91 05 24 	lds	r24, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    39e8:	81 11       	cpse	r24, r1
    39ea:	06 c1       	rjmp	.+524    	; 0x3bf8 <udc_process_setup+0x42c>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    39ec:	22 30       	cpi	r18, 0x02	; 2
    39ee:	31 05       	cpc	r19, r1
    39f0:	09 f0       	breq	.+2      	; 0x39f4 <udc_process_setup+0x228>
    39f2:	09 c1       	rjmp	.+530    	; 0x3c06 <udc_process_setup+0x43a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    39f4:	80 91 08 24 	lds	r24, 0x2408	; 0x802408 <udd_g_ctrlreq+0x4>
    39f8:	0e 94 2d 10 	call	0x205a	; 0x205a <udd_ep_is_halted>
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	80 93 f4 23 	sts	0x23F4, r24	; 0x8023f4 <udc_ep_status.4684>
    3a02:	90 93 f5 23 	sts	0x23F5, r25	; 0x8023f5 <udc_ep_status.4684+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    3a06:	62 e0       	ldi	r22, 0x02	; 2
    3a08:	70 e0       	ldi	r23, 0x00	; 0
    3a0a:	84 ef       	ldi	r24, 0xF4	; 244
    3a0c:	93 e2       	ldi	r25, 0x23	; 35
    3a0e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <udd_set_setup_payload>
    3a12:	82 c1       	rjmp	.+772    	; 0x3d18 <udc_process_setup+0x54c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3a14:	8f 71       	andi	r24, 0x1F	; 31
    3a16:	09 f0       	breq	.+2      	; 0x3a1a <udc_process_setup+0x24e>
    3a18:	a0 c0       	rjmp	.+320    	; 0x3b5a <udc_process_setup+0x38e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3a1a:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    3a1e:	93 30       	cpi	r25, 0x03	; 3
    3a20:	91 f1       	breq	.+100    	; 0x3a86 <udc_process_setup+0x2ba>
    3a22:	18 f4       	brcc	.+6      	; 0x3a2a <udc_process_setup+0x25e>
    3a24:	91 30       	cpi	r25, 0x01	; 1
    3a26:	a9 f0       	breq	.+42     	; 0x3a52 <udc_process_setup+0x286>
    3a28:	98 c0       	rjmp	.+304    	; 0x3b5a <udc_process_setup+0x38e>
    3a2a:	95 30       	cpi	r25, 0x05	; 5
    3a2c:	21 f0       	breq	.+8      	; 0x3a36 <udc_process_setup+0x26a>
    3a2e:	99 30       	cpi	r25, 0x09	; 9
    3a30:	09 f4       	brne	.+2      	; 0x3a34 <udc_process_setup+0x268>
    3a32:	43 c0       	rjmp	.+134    	; 0x3aba <udc_process_setup+0x2ee>
    3a34:	92 c0       	rjmp	.+292    	; 0x3b5a <udc_process_setup+0x38e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3a36:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3a3a:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3a3e:	89 2b       	or	r24, r25
    3a40:	09 f0       	breq	.+2      	; 0x3a44 <udc_process_setup+0x278>
    3a42:	e1 c0       	rjmp	.+450    	; 0x3c06 <udc_process_setup+0x43a>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    3a44:	85 ed       	ldi	r24, 0xD5	; 213
    3a46:	9a e1       	ldi	r25, 0x1A	; 26
    3a48:	80 93 10 24 	sts	0x2410, r24	; 0x802410 <udd_g_ctrlreq+0xc>
    3a4c:	90 93 11 24 	sts	0x2411, r25	; 0x802411 <udd_g_ctrlreq+0xd>
    3a50:	63 c1       	rjmp	.+710    	; 0x3d18 <udc_process_setup+0x54c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3a52:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3a56:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3a5a:	89 2b       	or	r24, r25
    3a5c:	09 f0       	breq	.+2      	; 0x3a60 <udc_process_setup+0x294>
    3a5e:	d3 c0       	rjmp	.+422    	; 0x3c06 <udc_process_setup+0x43a>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    3a60:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    3a64:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	09 f0       	breq	.+2      	; 0x3a6e <udc_process_setup+0x2a2>
    3a6c:	cc c0       	rjmp	.+408    	; 0x3c06 <udc_process_setup+0x43a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    3a6e:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udc_device_status>
    3a72:	90 91 ff 23 	lds	r25, 0x23FF	; 0x8023ff <udc_device_status+0x1>
    3a76:	8d 7f       	andi	r24, 0xFD	; 253
    3a78:	80 93 fe 23 	sts	0x23FE, r24	; 0x8023fe <udc_device_status>
    3a7c:	90 93 ff 23 	sts	0x23FF, r25	; 0x8023ff <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    3a80:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <usb_callback_remotewakeup_disable>
    3a84:	49 c1       	rjmp	.+658    	; 0x3d18 <udc_process_setup+0x54c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3a86:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3a8a:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3a8e:	89 2b       	or	r24, r25
    3a90:	09 f0       	breq	.+2      	; 0x3a94 <udc_process_setup+0x2c8>
    3a92:	b9 c0       	rjmp	.+370    	; 0x3c06 <udc_process_setup+0x43a>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    3a94:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    3a98:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	09 f0       	breq	.+2      	; 0x3aa2 <udc_process_setup+0x2d6>
    3aa0:	ad c0       	rjmp	.+346    	; 0x3bfc <udc_process_setup+0x430>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    3aa2:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udc_device_status>
    3aa6:	90 91 ff 23 	lds	r25, 0x23FF	; 0x8023ff <udc_device_status+0x1>
    3aaa:	82 60       	ori	r24, 0x02	; 2
    3aac:	80 93 fe 23 	sts	0x23FE, r24	; 0x8023fe <udc_device_status>
    3ab0:	90 93 ff 23 	sts	0x23FF, r25	; 0x8023ff <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    3ab4:	0e 94 04 15 	call	0x2a08	; 0x2a08 <usb_callback_remotewakeup_enable>
    3ab8:	2f c1       	rjmp	.+606    	; 0x3d18 <udc_process_setup+0x54c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    3aba:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3abe:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3ac2:	89 2b       	or	r24, r25
    3ac4:	09 f0       	breq	.+2      	; 0x3ac8 <udc_process_setup+0x2fc>
    3ac6:	9f c0       	rjmp	.+318    	; 0x3c06 <udc_process_setup+0x43a>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    3ac8:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <udd_getaddress>
    3acc:	88 23       	and	r24, r24
    3ace:	09 f4       	brne	.+2      	; 0x3ad2 <udc_process_setup+0x306>
    3ad0:	9a c0       	rjmp	.+308    	; 0x3c06 <udc_process_setup+0x43a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3ad2:	20 91 06 24 	lds	r18, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    3ad6:	30 91 07 24 	lds	r19, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>
    3ada:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    3adc:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <udc_config>
    3ae0:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3ae4:	81 89       	ldd	r24, Z+17	; 0x11
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	82 17       	cp	r24, r18
    3aea:	93 07       	cpc	r25, r19
    3aec:	08 f4       	brcc	.+2      	; 0x3af0 <udc_process_setup+0x324>
    3aee:	8b c0       	rjmp	.+278    	; 0x3c06 <udc_process_setup+0x43a>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    3af0:	14 de       	rcall	.-984    	; 0x371a <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    3af2:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    3af6:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>
    3afa:	80 93 fa 23 	sts	0x23FA, r24	; 0x8023fa <udc_num_configuration>
	if (udc_num_configuration == 0) {
    3afe:	88 23       	and	r24, r24
    3b00:	09 f4       	brne	.+2      	; 0x3b04 <udc_process_setup+0x338>
    3b02:	0a c1       	rjmp	.+532    	; 0x3d18 <udc_process_setup+0x54c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    3b04:	99 27       	eor	r25, r25
    3b06:	81 50       	subi	r24, 0x01	; 1
    3b08:	90 4c       	sbci	r25, 0xC0	; 192
    3b0a:	88 0f       	add	r24, r24
    3b0c:	99 1f       	adc	r25, r25
    3b0e:	88 0f       	add	r24, r24
    3b10:	99 1f       	adc	r25, r25
    3b12:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config+0x2>
    3b16:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x3>
    3b1a:	e8 0f       	add	r30, r24
    3b1c:	f9 1f       	adc	r31, r25
    3b1e:	e0 93 f8 23 	sts	0x23F8, r30	; 0x8023f8 <udc_ptr_conf>
    3b22:	f0 93 f9 23 	sts	0x23F9, r31	; 0x8023f9 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3b26:	01 90       	ld	r0, Z+
    3b28:	f0 81       	ld	r31, Z
    3b2a:	e0 2d       	mov	r30, r0
    3b2c:	84 81       	ldd	r24, Z+4	; 0x04
    3b2e:	88 23       	and	r24, r24
    3b30:	09 f4       	brne	.+2      	; 0x3b34 <udc_process_setup+0x368>
    3b32:	f2 c0       	rjmp	.+484    	; 0x3d18 <udc_process_setup+0x54c>
    3b34:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    3b36:	60 e0       	ldi	r22, 0x00	; 0
    3b38:	8c 2f       	mov	r24, r28
    3b3a:	b9 dd       	rcall	.-1166   	; 0x36ae <udc_iface_enable>
    3b3c:	88 23       	and	r24, r24
    3b3e:	09 f4       	brne	.+2      	; 0x3b42 <udc_process_setup+0x376>
    3b40:	62 c0       	rjmp	.+196    	; 0x3c06 <udc_process_setup+0x43a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3b42:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3b44:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3b48:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3b4c:	01 90       	ld	r0, Z+
    3b4e:	f0 81       	ld	r31, Z
    3b50:	e0 2d       	mov	r30, r0
    3b52:	84 81       	ldd	r24, Z+4	; 0x04
    3b54:	c8 17       	cp	r28, r24
    3b56:	78 f3       	brcs	.-34     	; 0x3b36 <udc_process_setup+0x36a>
    3b58:	df c0       	rjmp	.+446    	; 0x3d18 <udc_process_setup+0x54c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3b5a:	81 30       	cpi	r24, 0x01	; 1
    3b5c:	e1 f4       	brne	.+56     	; 0x3b96 <udc_process_setup+0x3ca>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3b5e:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    3b62:	9b 30       	cpi	r25, 0x0B	; 11
    3b64:	c1 f4       	brne	.+48     	; 0x3b96 <udc_process_setup+0x3ca>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    3b66:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3b6a:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3b6e:	89 2b       	or	r24, r25
    3b70:	09 f0       	breq	.+2      	; 0x3b74 <udc_process_setup+0x3a8>
    3b72:	49 c0       	rjmp	.+146    	; 0x3c06 <udc_process_setup+0x43a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    3b74:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udc_num_configuration>
    3b78:	88 23       	and	r24, r24
    3b7a:	09 f4       	brne	.+2      	; 0x3b7e <udc_process_setup+0x3b2>
    3b7c:	44 c0       	rjmp	.+136    	; 0x3c06 <udc_process_setup+0x43a>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3b7e:	e4 e0       	ldi	r30, 0x04	; 4
    3b80:	f4 e2       	ldi	r31, 0x24	; 36
    3b82:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    3b84:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    3b86:	8c 2f       	mov	r24, r28
    3b88:	50 dd       	rcall	.-1376   	; 0x362a <udc_iface_disable>
    3b8a:	88 23       	and	r24, r24
    3b8c:	e1 f1       	breq	.+120    	; 0x3c06 <udc_process_setup+0x43a>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    3b8e:	6d 2f       	mov	r22, r29
    3b90:	8c 2f       	mov	r24, r28
    3b92:	8d dd       	rcall	.-1254   	; 0x36ae <udc_iface_enable>
    3b94:	36 c0       	rjmp	.+108    	; 0x3c02 <udc_process_setup+0x436>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3b96:	82 30       	cpi	r24, 0x02	; 2
    3b98:	b1 f5       	brne	.+108    	; 0x3c06 <udc_process_setup+0x43a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3b9a:	80 91 05 24 	lds	r24, 0x2405	; 0x802405 <udd_g_ctrlreq+0x1>
    3b9e:	81 30       	cpi	r24, 0x01	; 1
    3ba0:	19 f0       	breq	.+6      	; 0x3ba8 <udc_process_setup+0x3dc>
    3ba2:	83 30       	cpi	r24, 0x03	; 3
    3ba4:	91 f0       	breq	.+36     	; 0x3bca <udc_process_setup+0x3fe>
    3ba6:	2c c0       	rjmp	.+88     	; 0x3c00 <udc_process_setup+0x434>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3ba8:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3bac:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3bb0:	89 2b       	or	r24, r25
    3bb2:	49 f5       	brne	.+82     	; 0x3c06 <udc_process_setup+0x43a>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3bb4:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    3bb8:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>
    3bbc:	89 2b       	or	r24, r25
    3bbe:	19 f5       	brne	.+70     	; 0x3c06 <udc_process_setup+0x43a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3bc0:	80 91 08 24 	lds	r24, 0x2408	; 0x802408 <udd_g_ctrlreq+0x4>
    3bc4:	0e 94 48 10 	call	0x2090	; 0x2090 <udd_ep_clear_halt>
    3bc8:	1c c0       	rjmp	.+56     	; 0x3c02 <udc_process_setup+0x436>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3bca:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <udd_g_ctrlreq+0x6>
    3bce:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <udd_g_ctrlreq+0x7>
    3bd2:	89 2b       	or	r24, r25
    3bd4:	c1 f4       	brne	.+48     	; 0x3c06 <udc_process_setup+0x43a>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3bd6:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udd_g_ctrlreq+0x2>
    3bda:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udd_g_ctrlreq+0x3>
    3bde:	89 2b       	or	r24, r25
    3be0:	91 f4       	brne	.+36     	; 0x3c06 <udc_process_setup+0x43a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    3be2:	c4 e0       	ldi	r28, 0x04	; 4
    3be4:	d4 e2       	ldi	r29, 0x24	; 36
    3be6:	8c 81       	ldd	r24, Y+4	; 0x04
    3be8:	0e 94 47 11 	call	0x228e	; 0x228e <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3bec:	8c 81       	ldd	r24, Y+4	; 0x04
    3bee:	0e 94 ac 11 	call	0x2358	; 0x2358 <udd_ep_set_halt>
    3bf2:	07 c0       	rjmp	.+14     	; 0x3c02 <udc_process_setup+0x436>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	05 c0       	rjmp	.+10     	; 0x3c02 <udc_process_setup+0x436>
				break;
			}
		}
#endif
	}
	return false;
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	03 c0       	rjmp	.+6      	; 0x3c02 <udc_process_setup+0x436>
		break;
#endif
	default:
		break;
	}
	return false;
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	01 c0       	rjmp	.+2      	; 0x3c02 <udc_process_setup+0x436>
				break;
			}
		}
#endif
	}
	return false;
    3c00:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    3c02:	81 11       	cpse	r24, r1
    3c04:	8a c0       	rjmp	.+276    	; 0x3d1a <udc_process_setup+0x54e>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    3c06:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <udd_g_ctrlreq>
    3c0a:	8f 71       	andi	r24, 0x1F	; 31
    3c0c:	81 30       	cpi	r24, 0x01	; 1
    3c0e:	71 f5       	brne	.+92     	; 0x3c6c <udc_process_setup+0x4a0>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3c10:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udc_num_configuration>
    3c14:	88 23       	and	r24, r24
    3c16:	51 f1       	breq	.+84     	; 0x3c6c <udc_process_setup+0x4a0>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3c18:	00 91 08 24 	lds	r16, 0x2408	; 0x802408 <udd_g_ctrlreq+0x4>
    3c1c:	10 91 09 24 	lds	r17, 0x2409	; 0x802409 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3c20:	c0 91 f8 23 	lds	r28, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3c24:	d0 91 f9 23 	lds	r29, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3c28:	e8 81       	ld	r30, Y
    3c2a:	f9 81       	ldd	r31, Y+1	; 0x01
    3c2c:	84 81       	ldd	r24, Z+4	; 0x04
    3c2e:	08 17       	cp	r16, r24
    3c30:	e8 f4       	brcc	.+58     	; 0x3c6c <udc_process_setup+0x4a0>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3c32:	60 e0       	ldi	r22, 0x00	; 0
    3c34:	80 2f       	mov	r24, r16
    3c36:	bf dc       	rcall	.-1666   	; 0x35b6 <udc_update_iface_desc>
    3c38:	88 23       	and	r24, r24
    3c3a:	c1 f0       	breq	.+48     	; 0x3c6c <udc_process_setup+0x4a0>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3c3c:	f8 01       	movw	r30, r16
    3c3e:	ff 27       	eor	r31, r31
    3c40:	cf 01       	movw	r24, r30
    3c42:	88 0f       	add	r24, r24
    3c44:	99 1f       	adc	r25, r25
    3c46:	ea 81       	ldd	r30, Y+2	; 0x02
    3c48:	fb 81       	ldd	r31, Y+3	; 0x03
    3c4a:	e8 0f       	add	r30, r24
    3c4c:	f9 1f       	adc	r31, r25
    3c4e:	c0 81       	ld	r28, Z
    3c50:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3c52:	ee 81       	ldd	r30, Y+6	; 0x06
    3c54:	ff 81       	ldd	r31, Y+7	; 0x07
    3c56:	19 95       	eicall
    3c58:	68 2f       	mov	r22, r24
    3c5a:	80 2f       	mov	r24, r16
    3c5c:	ac dc       	rcall	.-1704   	; 0x35b6 <udc_update_iface_desc>
    3c5e:	88 23       	and	r24, r24
    3c60:	29 f0       	breq	.+10     	; 0x3c6c <udc_process_setup+0x4a0>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    3c62:	ec 81       	ldd	r30, Y+4	; 0x04
    3c64:	fd 81       	ldd	r31, Y+5	; 0x05
    3c66:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    3c68:	81 11       	cpse	r24, r1
    3c6a:	57 c0       	rjmp	.+174    	; 0x3d1a <udc_process_setup+0x54e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    3c6c:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <udd_g_ctrlreq>
    3c70:	8f 71       	andi	r24, 0x1F	; 31
    3c72:	82 30       	cpi	r24, 0x02	; 2
    3c74:	09 f0       	breq	.+2      	; 0x3c78 <udc_process_setup+0x4ac>
    3c76:	40 c0       	rjmp	.+128    	; 0x3cf8 <udc_process_setup+0x52c>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3c78:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udc_num_configuration>
    3c7c:	88 23       	and	r24, r24
    3c7e:	b1 f1       	breq	.+108    	; 0x3cec <udc_process_setup+0x520>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3c80:	a0 91 f8 23 	lds	r26, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3c84:	b0 91 f9 23 	lds	r27, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3c88:	ed 91       	ld	r30, X+
    3c8a:	fc 91       	ld	r31, X
    3c8c:	11 97       	sbiw	r26, 0x01	; 1
    3c8e:	84 81       	ldd	r24, Z+4	; 0x04
    3c90:	88 23       	and	r24, r24
    3c92:	71 f1       	breq	.+92     	; 0x3cf0 <udc_process_setup+0x524>
    3c94:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    3c96:	ec 2f       	mov	r30, r28
    3c98:	f0 e0       	ldi	r31, 0x00	; 0
    3c9a:	ee 0f       	add	r30, r30
    3c9c:	ff 1f       	adc	r31, r31
    3c9e:	12 96       	adiw	r26, 0x02	; 2
    3ca0:	8d 91       	ld	r24, X+
    3ca2:	9c 91       	ld	r25, X
    3ca4:	13 97       	sbiw	r26, 0x03	; 3
    3ca6:	e8 0f       	add	r30, r24
    3ca8:	f9 1f       	adc	r31, r25
    3caa:	00 81       	ld	r16, Z
    3cac:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3cae:	d8 01       	movw	r26, r16
    3cb0:	16 96       	adiw	r26, 0x06	; 6
    3cb2:	ed 91       	ld	r30, X+
    3cb4:	fc 91       	ld	r31, X
    3cb6:	17 97       	sbiw	r26, 0x07	; 7
    3cb8:	19 95       	eicall
    3cba:	68 2f       	mov	r22, r24
    3cbc:	8c 2f       	mov	r24, r28
    3cbe:	7b dc       	rcall	.-1802   	; 0x35b6 <udc_update_iface_desc>
    3cc0:	88 23       	and	r24, r24
    3cc2:	59 f1       	breq	.+86     	; 0x3d1a <udc_process_setup+0x54e>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    3cc4:	d8 01       	movw	r26, r16
    3cc6:	14 96       	adiw	r26, 0x04	; 4
    3cc8:	ed 91       	ld	r30, X+
    3cca:	fc 91       	ld	r31, X
    3ccc:	15 97       	sbiw	r26, 0x05	; 5
    3cce:	19 95       	eicall
    3cd0:	81 11       	cpse	r24, r1
    3cd2:	23 c0       	rjmp	.+70     	; 0x3d1a <udc_process_setup+0x54e>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3cd4:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3cd6:	a0 91 f8 23 	lds	r26, 0x23F8	; 0x8023f8 <udc_ptr_conf>
    3cda:	b0 91 f9 23 	lds	r27, 0x23F9	; 0x8023f9 <udc_ptr_conf+0x1>
    3cde:	ed 91       	ld	r30, X+
    3ce0:	fc 91       	ld	r31, X
    3ce2:	11 97       	sbiw	r26, 0x01	; 1
    3ce4:	94 81       	ldd	r25, Z+4	; 0x04
    3ce6:	c9 17       	cp	r28, r25
    3ce8:	b0 f2       	brcs	.-84     	; 0x3c96 <udc_process_setup+0x4ca>
    3cea:	17 c0       	rjmp	.+46     	; 0x3d1a <udc_process_setup+0x54e>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    3cec:	80 e0       	ldi	r24, 0x00	; 0
    3cee:	15 c0       	rjmp	.+42     	; 0x3d1a <udc_process_setup+0x54e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	13 c0       	rjmp	.+38     	; 0x3d1a <udc_process_setup+0x54e>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	11 c0       	rjmp	.+34     	; 0x3d1a <udc_process_setup+0x54e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    3cf8:	80 e0       	ldi	r24, 0x00	; 0
    3cfa:	0f c0       	rjmp	.+30     	; 0x3d1a <udc_process_setup+0x54e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    3cfc:	98 2f       	mov	r25, r24
    3cfe:	90 76       	andi	r25, 0x60	; 96
    3d00:	09 f0       	breq	.+2      	; 0x3d04 <udc_process_setup+0x538>
    3d02:	81 cf       	rjmp	.-254    	; 0x3c06 <udc_process_setup+0x43a>
    3d04:	7c cd       	rjmp	.-1288   	; 0x37fe <udc_process_setup+0x32>
    3d06:	98 2f       	mov	r25, r24
    3d08:	90 76       	andi	r25, 0x60	; 96
    3d0a:	09 f0       	breq	.+2      	; 0x3d0e <udc_process_setup+0x542>
    3d0c:	7c cf       	rjmp	.-264    	; 0x3c06 <udc_process_setup+0x43a>
    3d0e:	82 ce       	rjmp	.-764    	; 0x3a14 <udc_process_setup+0x248>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    3d10:	2e e0       	ldi	r18, 0x0E	; 14
		str = udc_string_product_name;
    3d12:	80 ea       	ldi	r24, 0xA0	; 160
    3d14:	90 e2       	ldi	r25, 0x20	; 32
    3d16:	f3 cd       	rjmp	.-1050   	; 0x38fe <udc_process_setup+0x132>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    3d18:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    3d1a:	df 91       	pop	r29
    3d1c:	cf 91       	pop	r28
    3d1e:	1f 91       	pop	r17
    3d20:	0f 91       	pop	r16
    3d22:	08 95       	ret

00003d24 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3d24:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    3d28:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3d2a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3d2c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    3d30:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    3d32:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3d36:	08 95       	ret

00003d38 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3d38:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3d3a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3d3c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3d3e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    3d40:	60 83       	st	Z, r22
	ret                             // Return to caller
    3d42:	08 95       	ret

00003d44 <__udivmodhi4>:
    3d44:	aa 1b       	sub	r26, r26
    3d46:	bb 1b       	sub	r27, r27
    3d48:	51 e1       	ldi	r21, 0x11	; 17
    3d4a:	07 c0       	rjmp	.+14     	; 0x3d5a <__udivmodhi4_ep>

00003d4c <__udivmodhi4_loop>:
    3d4c:	aa 1f       	adc	r26, r26
    3d4e:	bb 1f       	adc	r27, r27
    3d50:	a6 17       	cp	r26, r22
    3d52:	b7 07       	cpc	r27, r23
    3d54:	10 f0       	brcs	.+4      	; 0x3d5a <__udivmodhi4_ep>
    3d56:	a6 1b       	sub	r26, r22
    3d58:	b7 0b       	sbc	r27, r23

00003d5a <__udivmodhi4_ep>:
    3d5a:	88 1f       	adc	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	5a 95       	dec	r21
    3d60:	a9 f7       	brne	.-22     	; 0x3d4c <__udivmodhi4_loop>
    3d62:	80 95       	com	r24
    3d64:	90 95       	com	r25
    3d66:	bc 01       	movw	r22, r24
    3d68:	cd 01       	movw	r24, r26
    3d6a:	08 95       	ret

00003d6c <__udivmodsi4>:
    3d6c:	a1 e2       	ldi	r26, 0x21	; 33
    3d6e:	1a 2e       	mov	r1, r26
    3d70:	aa 1b       	sub	r26, r26
    3d72:	bb 1b       	sub	r27, r27
    3d74:	fd 01       	movw	r30, r26
    3d76:	0d c0       	rjmp	.+26     	; 0x3d92 <__udivmodsi4_ep>

00003d78 <__udivmodsi4_loop>:
    3d78:	aa 1f       	adc	r26, r26
    3d7a:	bb 1f       	adc	r27, r27
    3d7c:	ee 1f       	adc	r30, r30
    3d7e:	ff 1f       	adc	r31, r31
    3d80:	a2 17       	cp	r26, r18
    3d82:	b3 07       	cpc	r27, r19
    3d84:	e4 07       	cpc	r30, r20
    3d86:	f5 07       	cpc	r31, r21
    3d88:	20 f0       	brcs	.+8      	; 0x3d92 <__udivmodsi4_ep>
    3d8a:	a2 1b       	sub	r26, r18
    3d8c:	b3 0b       	sbc	r27, r19
    3d8e:	e4 0b       	sbc	r30, r20
    3d90:	f5 0b       	sbc	r31, r21

00003d92 <__udivmodsi4_ep>:
    3d92:	66 1f       	adc	r22, r22
    3d94:	77 1f       	adc	r23, r23
    3d96:	88 1f       	adc	r24, r24
    3d98:	99 1f       	adc	r25, r25
    3d9a:	1a 94       	dec	r1
    3d9c:	69 f7       	brne	.-38     	; 0x3d78 <__udivmodsi4_loop>
    3d9e:	60 95       	com	r22
    3da0:	70 95       	com	r23
    3da2:	80 95       	com	r24
    3da4:	90 95       	com	r25
    3da6:	9b 01       	movw	r18, r22
    3da8:	ac 01       	movw	r20, r24
    3daa:	bd 01       	movw	r22, r26
    3dac:	cf 01       	movw	r24, r30
    3dae:	08 95       	ret

00003db0 <__tablejump2__>:
    3db0:	ee 0f       	add	r30, r30
    3db2:	ff 1f       	adc	r31, r31
    3db4:	88 1f       	adc	r24, r24
    3db6:	8b bf       	out	0x3b, r24	; 59
    3db8:	07 90       	elpm	r0, Z+
    3dba:	f6 91       	elpm	r31, Z
    3dbc:	e0 2d       	mov	r30, r0
    3dbe:	19 94       	eijmp

00003dc0 <__umulhisi3>:
    3dc0:	a2 9f       	mul	r26, r18
    3dc2:	b0 01       	movw	r22, r0
    3dc4:	b3 9f       	mul	r27, r19
    3dc6:	c0 01       	movw	r24, r0
    3dc8:	a3 9f       	mul	r26, r19
    3dca:	70 0d       	add	r23, r0
    3dcc:	81 1d       	adc	r24, r1
    3dce:	11 24       	eor	r1, r1
    3dd0:	91 1d       	adc	r25, r1
    3dd2:	b2 9f       	mul	r27, r18
    3dd4:	70 0d       	add	r23, r0
    3dd6:	81 1d       	adc	r24, r1
    3dd8:	11 24       	eor	r1, r1
    3dda:	91 1d       	adc	r25, r1
    3ddc:	08 95       	ret

00003dde <memcpy>:
    3dde:	fb 01       	movw	r30, r22
    3de0:	dc 01       	movw	r26, r24
    3de2:	02 c0       	rjmp	.+4      	; 0x3de8 <memcpy+0xa>
    3de4:	01 90       	ld	r0, Z+
    3de6:	0d 92       	st	X+, r0
    3de8:	41 50       	subi	r20, 0x01	; 1
    3dea:	50 40       	sbci	r21, 0x00	; 0
    3dec:	d8 f7       	brcc	.-10     	; 0x3de4 <memcpy+0x6>
    3dee:	08 95       	ret

00003df0 <_exit>:
    3df0:	f8 94       	cli

00003df2 <__stop_program>:
    3df2:	ff cf       	rjmp	.-2      	; 0x3df2 <__stop_program>
