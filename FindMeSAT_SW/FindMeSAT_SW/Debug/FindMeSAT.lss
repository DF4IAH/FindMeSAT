
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a418  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000055e  00802000  0000a418  0000a4ac  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000457  0080255e  0080255e  0000aa0a  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000aa0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000aa68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a00  00000000  00000000  0000aab0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001bf21  00000000  00000000  0000b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006a11  00000000  00000000  000273d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000f275  00000000  00000000  0002dde2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002aa0  00000000  00000000  0003d058  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000412f7  00000000  00000000  0003faf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b3f7  00000000  00000000  00080def  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009b0  00000000  00000000  0008c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ed24  00000000  00000000  0008cb98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__ctors_end>
       4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
       8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
       c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      10:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      14:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      18:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__vector_6>
      1c:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__vector_7>
      20:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__vector_8>
      24:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__vector_9>
      28:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      2c:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__vector_11>
      30:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      34:	0c 94 ef 2e 	jmp	0x5dde	; 0x5dde <__vector_13>
      38:	0c 94 47 27 	jmp	0x4e8e	; 0x4e8e <__vector_14>
      3c:	0c 94 74 27 	jmp	0x4ee8	; 0x4ee8 <__vector_15>
      40:	0c 94 a1 27 	jmp	0x4f42	; 0x4f42 <__vector_16>
      44:	0c 94 ce 27 	jmp	0x4f9c	; 0x4f9c <__vector_17>
      48:	0c 94 fb 27 	jmp	0x4ff6	; 0x4ff6 <__vector_18>
      4c:	0c 94 28 28 	jmp	0x5050	; 0x5050 <__vector_19>
      50:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <__vector_20>
      54:	0c 94 82 28 	jmp	0x5104	; 0x5104 <__vector_21>
      58:	0c 94 af 28 	jmp	0x515e	; 0x515e <__vector_22>
      5c:	0c 94 dc 28 	jmp	0x51b8	; 0x51b8 <__vector_23>
      60:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      64:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      68:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      6c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      70:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      74:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      78:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      7c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      80:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      84:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      88:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      8c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      90:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      94:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      98:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      9c:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__vector_39>
      a0:	0c 94 a2 24 	jmp	0x4944	; 0x4944 <__vector_40>
      a4:	0c 94 d4 24 	jmp	0x49a8	; 0x49a8 <__vector_41>
      a8:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__vector_42>
      ac:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      b0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      b4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      b8:	0c 94 16 2f 	jmp	0x5e2c	; 0x5e2c <__vector_46>
      bc:	0c 94 cb 2a 	jmp	0x5596	; 0x5596 <__vector_47>
      c0:	0c 94 f8 2a 	jmp	0x55f0	; 0x55f0 <__vector_48>
      c4:	0c 94 25 2b 	jmp	0x564a	; 0x564a <__vector_49>
      c8:	0c 94 52 2b 	jmp	0x56a4	; 0x56a4 <__vector_50>
      cc:	0c 94 7f 2b 	jmp	0x56fe	; 0x56fe <__vector_51>
      d0:	0c 94 ac 2b 	jmp	0x5758	; 0x5758 <__vector_52>
      d4:	0c 94 d9 2b 	jmp	0x57b2	; 0x57b2 <__vector_53>
      d8:	0c 94 06 2c 	jmp	0x580c	; 0x580c <__vector_54>
      dc:	0c 94 33 2c 	jmp	0x5866	; 0x5866 <__vector_55>
      e0:	0c 94 60 2c 	jmp	0x58c0	; 0x58c0 <__vector_56>
      e4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      e8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      ec:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      f0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      f4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      f8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      fc:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     100:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     104:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     108:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     10c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     110:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     114:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     118:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     11c:	0c 94 a8 23 	jmp	0x4750	; 0x4750 <__vector_71>
     120:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <__vector_72>
     124:	0c 94 0c 24 	jmp	0x4818	; 0x4818 <__vector_73>
     128:	0c 94 3e 24 	jmp	0x487c	; 0x487c <__vector_74>
     12c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     130:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     134:	0c 94 09 29 	jmp	0x5212	; 0x5212 <__vector_77>
     138:	0c 94 36 29 	jmp	0x526c	; 0x526c <__vector_78>
     13c:	0c 94 63 29 	jmp	0x52c6	; 0x52c6 <__vector_79>
     140:	0c 94 90 29 	jmp	0x5320	; 0x5320 <__vector_80>
     144:	0c 94 bd 29 	jmp	0x537a	; 0x537a <__vector_81>
     148:	0c 94 ea 29 	jmp	0x53d4	; 0x53d4 <__vector_82>
     14c:	0c 94 17 2a 	jmp	0x542e	; 0x542e <__vector_83>
     150:	0c 94 44 2a 	jmp	0x5488	; 0x5488 <__vector_84>
     154:	0c 94 71 2a 	jmp	0x54e2	; 0x54e2 <__vector_85>
     158:	0c 94 9e 2a 	jmp	0x553c	; 0x553c <__vector_86>
     15c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     160:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     164:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     168:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     16c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     170:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     174:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     178:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     17c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     180:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     184:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     188:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     18c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     190:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     194:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     198:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     19c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1a0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1a4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1a8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1ac:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1b0:	0c 94 8d 2c 	jmp	0x591a	; 0x591a <__vector_108>
     1b4:	0c 94 ba 2c 	jmp	0x5974	; 0x5974 <__vector_109>
     1b8:	0c 94 e7 2c 	jmp	0x59ce	; 0x59ce <__vector_110>
     1bc:	0c 94 14 2d 	jmp	0x5a28	; 0x5a28 <__vector_111>
     1c0:	0c 94 41 2d 	jmp	0x5a82	; 0x5a82 <__vector_112>
     1c4:	0c 94 6e 2d 	jmp	0x5adc	; 0x5adc <__vector_113>
     1c8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1cc:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1d0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1d4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1d8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1dc:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1e0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1e4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1e8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1ec:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1f0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1f4:	0c 94 d3 35 	jmp	0x6ba6	; 0x6ba6 <__vector_125>
     1f8:	0c 94 8d 36 	jmp	0x6d1a	; 0x6d1a <__vector_126>
     1fc:	b4 30       	cpi	r27, 0x04	; 4
     1fe:	b7 30       	cpi	r27, 0x07	; 7
     200:	ba 30       	cpi	r27, 0x0A	; 10
     202:	bd 30       	cpi	r27, 0x0D	; 13
     204:	c0 30       	cpi	r28, 0x00	; 0
     206:	c3 30       	cpi	r28, 0x03	; 3
     208:	c6 30       	cpi	r28, 0x06	; 6
     20a:	05 38       	cpi	r16, 0x85	; 133
     20c:	18 38       	cpi	r17, 0x88	; 136
     20e:	2b 38       	cpi	r18, 0x8B	; 139
     210:	3e 38       	cpi	r19, 0x8E	; 142
     212:	51 38       	cpi	r21, 0x81	; 129
     214:	64 38       	cpi	r22, 0x84	; 132
     216:	77 38       	cpi	r23, 0x87	; 135

00000218 <PM_SINE_IP>:
     218:	00 fd f9 f6 f3 f0 ec e9 e6 e3 df dc d9 d6 d2 cf     ................
     228:	00 fd fa f6 f3 f0 ed ea e6 e3 e0 dd da d7 d3 d0     ................
     238:	00 fd fa f7 f3 f0 ed ea e7 e4 e1 de da d7 d4 d1     ................
     248:	00 fd fa f7 f4 f1 ee eb e7 e4 e1 de db d8 d5 d2     ................
     258:	00 fd fa f7 f4 f1 ee eb e8 e5 e2 df dc d9 d6 d3     ................
     268:	00 fd fa f7 f4 f1 ee eb e8 e6 e3 e0 dd da d7 d4     ................
     278:	00 fd fa f7 f4 f2 ef ec e9 e6 e3 e0 dd db d8 d5     ................
     288:	00 fd fa f8 f5 f2 ef ec e9 e7 e4 e1 de db d9 d6     ................
     298:	00 fd fa f8 f5 f2 ef ed ea e7 e4 e2 df dc d9 d7     ................
     2a8:	00 fd fb f8 f5 f3 f0 ed ea e8 e5 e2 e0 dd da d8     ................
     2b8:	00 fd fb f8 f5 f3 f0 ee eb e8 e6 e3 e0 de db d9     ................
     2c8:	00 fd fb f8 f6 f3 f1 ee eb e9 e6 e4 e1 df dc da     ................
     2d8:	00 fd fb f8 f6 f3 f1 ee ec e9 e7 e4 e2 df dd da     ................
     2e8:	00 fe fb f9 f6 f4 f1 ef ec ea e8 e5 e3 e0 de db     ................
     2f8:	00 fe fb f9 f6 f4 f2 ef ed eb e8 e6 e3 e1 df dc     ................
     308:	00 fe fb f9 f7 f4 f2 f0 ed eb e9 e7 e4 e2 e0 dd     ................
     318:	00 fe fb f9 f7 f5 f2 f0 ee ec e9 e7 e5 e3 e0 de     ................
     328:	00 fe fc f9 f7 f5 f3 f1 ee ec ea e8 e6 e4 e1 df     ................
     338:	00 fe fc fa f7 f5 f3 f1 ef ed eb e9 e6 e4 e2 e0     ................
     348:	00 fe fc fa f8 f6 f4 f2 ef ed eb e9 e7 e5 e3 e1     ................
     358:	00 fe fc fa f8 f6 f4 f2 f0 ee ec ea e8 e6 e4 e2     ................
     368:	00 fe fc fa f8 f6 f4 f2 f0 ef ed eb e9 e7 e5 e3     ................
     378:	00 fe fc fa f8 f7 f5 f3 f1 ef ed eb e9 e8 e6 e4     ................
     388:	00 fe fc fb f9 f7 f5 f3 f1 f0 ee ec ea e8 e7 e5     ................
     398:	00 fe fc fb f9 f7 f5 f4 f2 f0 ee ed eb e9 e7 e6     ................
     3a8:	00 fe fd fb f9 f8 f6 f4 f2 f1 ef ed ec ea e8 e7     ................
     3b8:	00 fe fd fb f9 f8 f6 f5 f3 f1 f0 ee ec eb e9 e8     ................
     3c8:	00 fe fd fb fa f8 f7 f5 f3 f2 f0 ef ed ec ea e9     ................
     3d8:	00 fe fd fb fa f8 f7 f5 f4 f2 f1 ef ee ec eb e9     ................
     3e8:	00 ff fd fc fa f9 f7 f6 f4 f3 f2 f0 ef ed ec ea     ................
     3f8:	00 ff fd fc fa f9 f8 f6 f5 f4 f2 f1 ef ee ed eb     ................
     408:	00 ff fd fc fb f9 f8 f7 f5 f4 f3 f2 f0 ef ee ec     ................
     418:	00 ff fd fc fb fa f8 f7 f6 f5 f3 f2 f1 f0 ee ed     ................
     428:	00 ff fe fc fb fa f9 f8 f6 f5 f4 f3 f2 f1 ef ee     ................
     438:	00 ff fe fd fb fa f9 f8 f7 f6 f5 f4 f2 f1 f0 ef     ................
     448:	00 ff fe fd fc fb fa f9 f7 f6 f5 f4 f3 f2 f1 f0     ................
     458:	00 ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1     ................
     468:	00 ff fe fd fc fb fa f9 f8 f8 f7 f6 f5 f4 f3 f2     ................
     478:	00 ff fe fd fc fc fb fa f9 f8 f7 f6 f5 f5 f4 f3     ................
     488:	00 ff fe fe fd fc fb fa f9 f9 f8 f7 f6 f5 f5 f4     ................
     498:	00 ff fe fe fd fc fb fb fa f9 f8 f8 f7 f6 f5 f5     ................
     4a8:	00 ff ff fe fd fd fc fb fa fa f9 f8 f8 f7 f6 f6     ................
     4b8:	00 ff ff fe fd fd fc fc fb fa fa f9 f8 f8 f7 f7     ................
     4c8:	00 ff ff fe fe fd fd fc fb fb fa fa f9 f9 f8 f8     ................
     4d8:	00 ff ff fe fe fd fd fc fc fb fb fa fa f9 f9 f8     ................
     4e8:	00 00 ff ff fe fe fd fd fc fc fc fb fb fa fa f9     ................
     4f8:	00 00 ff ff fe fe fe fd fd fd fc fc fb fb fb fa     ................
     508:	00 00 ff ff ff fe fe fe fd fd fd fd fc fc fc fb     ................
     518:	00 00 ff ff ff ff fe fe fe fe fd fd fd fd fc fc     ................
     528:	00 00 00 ff ff ff ff ff fe fe fe fe fe fe fd fd     ................
     538:	00 00 00 00 ff ff ff ff ff ff ff ff fe fe fe fe     ................
	...
     550:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     570:	01 01 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
     580:	01 01 01 01 02 02 02 02 00 00 00 01 01 01 01 01     ................
     590:	02 02 02 02 02 02 03 03 00 00 01 01 01 01 02 02     ................
     5a0:	02 02 03 03 03 03 04 04 00 00 01 01 01 02 02 02     ................
     5b0:	03 03 03 03 04 04 04 05 00 00 01 01 02 02 02 03     ................
     5c0:	03 03 04 04 05 05 05 06 00 00 01 01 02 02 03 03     ................
     5d0:	04 04 04 05 05 06 06 07 00 01 01 02 02 03 03 04     ................
     5e0:	04 05 05 06 06 07 07 08 00 01 01 02 02 03 03 04     ................
     5f0:	05 05 06 06 07 07 08 08 00 01 01 02 03 03 04 04     ................
     600:	05 06 06 07 08 08 09 09 00 01 01 02 03 03 04 05     ................
     610:	06 06 07 08 08 09 0a 0a 00 01 02 02 03 04 05 05     ................
     620:	06 07 08 08 09 0a 0b 0b 00 01 02 02 03 04 05 06     ................
     630:	07 07 08 09 0a 0b 0b 0c 00 01 02 03 04 04 05 06     ................
     640:	07 08 09 0a 0b 0b 0c 0d 00 01 02 03 04 05 06 07     ................
     650:	08 08 09 0a 0b 0c 0d 0e 00 01 02 03 04 05 06 07     ................
     660:	08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 04 05 06 07     ................
     670:	09 0a 0b 0c 0d 0e 0f 10 00 01 02 03 05 06 07 08     ................
     680:	09 0a 0b 0c 0e 0f 10 11 00 01 02 04 05 06 07 08     ................
     690:	0a 0b 0c 0d 0e 0f 11 12 00 01 03 04 05 06 08 09     ................
     6a0:	0a 0b 0d 0e 0f 10 12 13 00 01 03 04 05 07 08 09     ................
     6b0:	0b 0c 0d 0e 10 11 12 14 00 01 03 04 06 07 08 0a     ................
     6c0:	0b 0c 0e 0f 11 12 13 15 00 01 03 04 06 07 09 0a     ................
     6d0:	0c 0d 0e 10 11 13 14 16 00 02 03 05 06 08 09 0b     ................
     6e0:	0c 0e 0f 11 12 14 15 17 00 02 03 05 06 08 09 0b     ................
     6f0:	0d 0e 10 11 13 14 16 17 00 02 03 05 07 08 0a 0b     ................
     700:	0d 0f 10 12 14 15 17 18 00 02 03 05 07 08 0a 0c     ................
     710:	0e 0f 11 13 14 16 18 19 00 02 04 05 07 09 0b 0c     ................
     720:	0e 10 12 13 15 17 19 1a 00 02 04 05 07 09 0b 0d     ................
     730:	0f 10 12 14 16 18 19 1b 00 02 04 06 08 09 0b 0d     ................
     740:	0f 11 13 15 17 18 1a 1c 00 02 04 06 08 0a 0c 0e     ................
     750:	10 11 13 15 17 19 1b 1d 00 02 04 06 08 0a 0c 0e     ................
     760:	10 12 14 16 18 1a 1c 1e 00 02 04 06 08 0a 0c 0e     ................
     770:	11 13 15 17 19 1b 1d 1f 00 02 04 06 09 0b 0d 0f     ................
     780:	11 13 15 17 1a 1c 1e 20 00 02 04 07 09 0b 0d 0f     ....... ........
     790:	12 14 16 18 1a 1c 1f 21 00 02 05 07 09 0b 0e 10     .......!........
     7a0:	12 14 17 19 1b 1d 20 22 00 02 05 07 09 0c 0e 10     ...... "........
     7b0:	13 15 17 19 1c 1e 20 23 00 02 05 07 0a 0c 0e 11     ...... #........
     7c0:	13 15 18 1a 1d 1f 21 24 00 02 05 07 0a 0c 0f 11     ......!$........
     7d0:	14 16 18 1b 1d 20 22 25 00 03 05 08 0a 0d 0f 12     ..... "%........
     7e0:	14 17 19 1c 1e 21 23 26 00 03 05 08 0a 0d 0f 12     .....!#&........
     7f0:	15 17 1a 1c 1f 21 24 26 00 03 05 08 0b 0d 10 12     .....!$&........
     800:	15 18 1a 1d 20 22 25 27 00 03 05 08 0b 0d 10 13     .... "%'........
     810:	16 18 1b 1e 20 23 26 28 00 03 06 08 0b 0e 11 13     .... #&(........
     820:	16 19 1c 1e 21 24 27 29 00 03 06 08 0b 0e 11 14     ....!$')........
     830:	17 19 1c 1f 22 25 27 2a 00 03 06 09 0c 0e 11 14     ...."%'*........
     840:	17 1a 1d 20 23 25 28 2b 00 03 06 09 0c 0f 12 15     ... #%(+........
     850:	18 1a 1d 20 23 26 29 2c 00 03 06 09 0c 0f 12 15     ... #&),........
     860:	18 1b 1e 21 24 27 2a 2d 00 03 06 09 0c 0f 12 15     ...!$'*-........
     870:	19 1c 1f 22 25 28 2b 2e 00 03 06 09 0d 10 13 16     ..."%(+.........
     880:	19 1c 1f 22 26 29 2c 2f 00 03 06 0a 0d 10 13 16     ..."&),/........
     890:	1a 1d 20 23 26 29 2d 30                             .. #&)-0

00000898 <PM_SINE>:
     898:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     8a8:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     8b8:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     8c8:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     8d8:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     8e8:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     8f8:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     908:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     918:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     928:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     938:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     948:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     958:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     968:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     978:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     988:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     998:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     9a8:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     9b8:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     9c8:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     9d8:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     9e8:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     9f8:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     a08:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     a18:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     a28:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     a38:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     a48:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     a58:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     a68:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     a78:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     a88:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     a98:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     aa8:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     ab8:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     ac8:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     ad8:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
     ae8:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
     af8:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
     b08:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
     b18:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
     b28:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
     b38:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
     b48:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
     b58:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
     b68:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
     b78:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
     b88:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
     b98:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
     ba8:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
     bb8:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
     bc8:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
     bd8:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
     be8:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
     bf8:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
     c08:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
     c18:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
     c28:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
     c38:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
     c48:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
     c58:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
     c68:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
     c78:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
     c88:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
     c98:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
     ca8:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
     cb8:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
     cc8:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
     cd8:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
     ce8:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
     cf8:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
     d08:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
     d18:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
     d28:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
     d38:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
     d48:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
     d58:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
     d68:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
     d78:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
     d88:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
     d98:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
     da8:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
     db8:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
     dc8:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
     dd8:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
     de8:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
     df8:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
     e08:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
     e18:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
     e28:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
     e38:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
     e48:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
     e58:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
     e68:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
     e78:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
     e88:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
     e98:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
     ea8:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
     eb8:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
     ec8:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
     ed8:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
     ee8:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
     ef8:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
     f08:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
     f18:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
     f28:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
     f38:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
     f48:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
     f58:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
     f68:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
     f78:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
     f88:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
     f98:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
     fa8:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
     fb8:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
     fc8:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
     fd8:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
     fe8:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
     ff8:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
    1008:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
    1018:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
    1028:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
    1038:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
    1048:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
    1058:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
    1068:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
    1078:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
    1088:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
    1098:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
    10a8:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
    10b8:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
    10c8:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
    10d8:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
    10e8:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
    10f8:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
    1108:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
    1118:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
    1128:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
    1138:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
    1148:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
    1158:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
    1168:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
    1178:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
    1188:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
    1198:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
    11a8:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
    11b8:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
    11c8:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
    11d8:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
    11e8:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
    11f8:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
    1208:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
    1218:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
    1228:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
    1238:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
    1248:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
    1258:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
    1268:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
    1278:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
    1288:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
    1298:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
    12a8:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
    12b8:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
    12c8:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
    12d8:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
    12e8:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
    12f8:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
    1308:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
    1318:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
    1328:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
    1338:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
    1348:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
    1358:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
    1368:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
    1378:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
    1388:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
    1398:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
    13a8:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
    13b8:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
    13c8:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
    13d8:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
    13e8:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
    13f8:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
    1408:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
    1418:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
    1428:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
    1438:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
    1448:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
    1458:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
    1468:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
    1478:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
    1488:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
    1498:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
    14a8:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
    14b8:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
    14c8:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
    14d8:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
    14e8:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
    14f8:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
    1508:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
    1518:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
    1528:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
    1538:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
    1548:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
    1558:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
    1568:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
    1578:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
    1588:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
    1598:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
    15a8:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
    15b8:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
    15c8:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
    15d8:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
    15e8:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
    15f8:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
    1608:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
    1618:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
    1628:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
    1638:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
    1648:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
    1658:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
    1668:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
    1678:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1688:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1698:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    16a8:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    16b8:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    16c8:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    16d8:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    16e8:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    16f8:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1708:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1718:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    1728:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    1738:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    1748:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    1758:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    1768:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    1778:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1788:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1798:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    17a8:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    17b8:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    17c8:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    17d8:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    17e8:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    17f8:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1808:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1818:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    1828:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    1838:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    1848:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    1858:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    1868:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    1878:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1888:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1898:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    18a8:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    18b8:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    18c8:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    18d8:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    18e8:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    18f8:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1908:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1918:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    1928:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    1938:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    1948:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    1958:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    1968:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    1978:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1988:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1998:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    19a8:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    19b8:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    19c8:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    19d8:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    19e8:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    19f8:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1a08:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1a18:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    1a28:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    1a38:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    1a48:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    1a58:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    1a68:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    1a78:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1a88:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1a98:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1aa8:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1ab8:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1ac8:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1ad8:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    1ae8:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    1af8:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    1b08:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    1b18:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    1b28:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    1b38:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    1b48:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    1b58:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    1b68:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    1b78:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    1b88:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    1b98:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    1ba8:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    1bb8:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    1bc8:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    1bd8:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    1be8:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    1bf8:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    1c08:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    1c18:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    1c28:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    1c38:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    1c48:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    1c58:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    1c68:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    1c78:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    1c88:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    1c98:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    1ca8:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    1cb8:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    1cc8:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    1cd8:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    1ce8:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    1cf8:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    1d08:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    1d18:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    1d28:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    1d38:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    1d48:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    1d58:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    1d68:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    1d78:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    1d88:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    1d98:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    1da8:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    1db8:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    1dc8:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    1dd8:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    1de8:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    1df8:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    1e08:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    1e18:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    1e28:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    1e38:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    1e48:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    1e58:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    1e68:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    1e78:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    1e88:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    1e98:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    1ea8:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    1eb8:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    1ec8:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    1ed8:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    1ee8:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    1ef8:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    1f08:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    1f18:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    1f28:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    1f38:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    1f48:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    1f58:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    1f68:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    1f78:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    1f88:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    1f98:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    1fa8:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    1fb8:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    1fc8:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    1fd8:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    1fe8:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    1ff8:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    2008:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    2018:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    2028:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    2038:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    2048:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    2058:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    2068:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    2078:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    2088:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    2098:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    20a8:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    20b8:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    20c8:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    20d8:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    20e8:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    20f8:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    2108:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    2118:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    2128:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    2138:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    2148:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    2158:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    2168:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    2178:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    2188:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    2198:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    21a8:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    21b8:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    21c8:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    21d8:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    21e8:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    21f8:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    2208:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    2218:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    2228:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    2238:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    2248:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    2258:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    2268:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    2278:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    2288:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    2298:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    22a8:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    22b8:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    22c8:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    22d8:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    22e8:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    22f8:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    2308:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    2318:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    2328:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    2338:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    2348:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    2358:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    2368:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    2378:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    2388:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    2398:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    23a8:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    23b8:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    23c8:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    23d8:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    23e8:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    23f8:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    2408:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    2418:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    2428:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    2438:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    2448:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    2458:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    2468:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    2478:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    2488:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    2498:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    24a8:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    24b8:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    24c8:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    24d8:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    24e8:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    24f8:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    2508:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    2518:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    2528:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    2538:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    2548:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    2558:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    2568:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    2578:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    2588:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    2598:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    25a8:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    25b8:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    25c8:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    25d8:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    25e8:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    25f8:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    2608:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    2618:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    2628:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    2638:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    2648:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    2658:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    2668:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    2678:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2688:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2698:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    26a8:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    26b8:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    26c8:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    26d8:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    26e8:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    26f8:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2708:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2718:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    2728:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    2738:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    2748:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    2758:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    2768:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    2778:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2788:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2798:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    27a8:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    27b8:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    27c8:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    27d8:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    27e8:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    27f8:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2808:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2818:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    2828:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    2838:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    2848:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    2858:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    2868:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    2878:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2888:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002898 <__ctors_end>:
    2898:	11 24       	eor	r1, r1
    289a:	1f be       	out	0x3f, r1	; 63
    289c:	cf ef       	ldi	r28, 0xFF	; 255
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	df e5       	ldi	r29, 0x5F	; 95
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	00 e0       	ldi	r16, 0x00	; 0
    28a6:	0c bf       	out	0x3c, r16	; 60

000028a8 <__do_copy_data>:
    28a8:	15 e2       	ldi	r17, 0x25	; 37
    28aa:	a0 e0       	ldi	r26, 0x00	; 0
    28ac:	b0 e2       	ldi	r27, 0x20	; 32
    28ae:	e8 e1       	ldi	r30, 0x18	; 24
    28b0:	f4 ea       	ldi	r31, 0xA4	; 164
    28b2:	00 e0       	ldi	r16, 0x00	; 0
    28b4:	0b bf       	out	0x3b, r16	; 59
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <__do_copy_data+0x14>
    28b8:	07 90       	elpm	r0, Z+
    28ba:	0d 92       	st	X+, r0
    28bc:	ae 35       	cpi	r26, 0x5E	; 94
    28be:	b1 07       	cpc	r27, r17
    28c0:	d9 f7       	brne	.-10     	; 0x28b8 <__do_copy_data+0x10>

000028c2 <__do_clear_bss>:
    28c2:	29 e2       	ldi	r18, 0x29	; 41
    28c4:	ae e5       	ldi	r26, 0x5E	; 94
    28c6:	b5 e2       	ldi	r27, 0x25	; 37
    28c8:	01 c0       	rjmp	.+2      	; 0x28cc <.do_clear_bss_start>

000028ca <.do_clear_bss_loop>:
    28ca:	1d 92       	st	X+, r1

000028cc <.do_clear_bss_start>:
    28cc:	a5 3b       	cpi	r26, 0xB5	; 181
    28ce:	b2 07       	cpc	r27, r18
    28d0:	e1 f7       	brne	.-8      	; 0x28ca <.do_clear_bss_loop>
    28d2:	0e 94 43 3c 	call	0x7886	; 0x7886 <main>
    28d6:	0c 94 0a 52 	jmp	0xa414	; 0xa414 <_exit>

000028da <__bad_interrupt>:
    28da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000028de <nvm_init>:
#include "conf_nvm.h"
#include "nvm.h"

status_code_t nvm_init(mem_type_t mem)
{
	switch (mem) {
    28de:	83 30       	cpi	r24, 0x03	; 3
    28e0:	10 f4       	brcc	.+4      	; 0x28e6 <nvm_init+0x8>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	08 95       	ret
		}
		break;
#endif

	default:
		return ERR_INVALID_ARG;
    28e6:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    28e8:	08 95       	ret

000028ea <dma_interrupt>:
void dma_disable(void)
{
	DMA.CTRL = 0;
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	48 2f       	mov	r20, r24
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	fa 01       	movw	r30, r20
    28f4:	71 96       	adiw	r30, 0x11	; 17
    28f6:	e2 95       	swap	r30
    28f8:	f2 95       	swap	r31
    28fa:	f0 7f       	andi	r31, 0xF0	; 240
    28fc:	fe 27       	eor	r31, r30
    28fe:	e0 7f       	andi	r30, 0xF0	; 240
    2900:	fe 27       	eor	r31, r30
    2902:	a0 e0       	ldi	r26, 0x00	; 0
    2904:	b1 e0       	ldi	r27, 0x01	; 1
    2906:	14 96       	adiw	r26, 0x04	; 4
    2908:	9c 91       	ld	r25, X
    290a:	14 97       	sbiw	r26, 0x04	; 4
    290c:	13 96       	adiw	r26, 0x03	; 3
    290e:	6c 91       	ld	r22, X
    2910:	da 01       	movw	r26, r20
    2912:	14 96       	adiw	r26, 0x04	; 4
    2914:	21 e0       	ldi	r18, 0x01	; 1
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	e9 01       	movw	r28, r18
    291a:	08 2e       	mov	r0, r24
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <dma_interrupt+0x38>
    291e:	cc 0f       	add	r28, r28
    2920:	dd 1f       	adc	r29, r29
    2922:	0a 94       	dec	r0
    2924:	e2 f7       	brpl	.-8      	; 0x291e <dma_interrupt+0x34>
    2926:	0a 2e       	mov	r0, r26
    2928:	02 c0       	rjmp	.+4      	; 0x292e <dma_interrupt+0x44>
    292a:	22 0f       	add	r18, r18
    292c:	33 1f       	adc	r19, r19
    292e:	0a 94       	dec	r0
    2930:	e2 f7       	brpl	.-8      	; 0x292a <dma_interrupt+0x40>
    2932:	2c 2b       	or	r18, r28
    2934:	62 23       	and	r22, r18
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	eb 01       	movw	r28, r22
    293a:	0a 2e       	mov	r0, r26
    293c:	02 c0       	rjmp	.+4      	; 0x2942 <dma_interrupt+0x58>
    293e:	d5 95       	asr	r29
    2940:	c7 95       	ror	r28
    2942:	0a 94       	dec	r0
    2944:	e2 f7       	brpl	.-8      	; 0x293e <dma_interrupt+0x54>
    2946:	c0 fd       	sbrc	r28, 0
    2948:	1a c0       	rjmp	.+52     	; 0x297e <dma_interrupt+0x94>
    294a:	08 2e       	mov	r0, r24
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <dma_interrupt+0x68>
    294e:	75 95       	asr	r23
    2950:	67 95       	ror	r22
    2952:	0a 94       	dec	r0
    2954:	e2 f7       	brpl	.-8      	; 0x294e <dma_interrupt+0x64>
    2956:	60 fd       	sbrc	r22, 0
    2958:	14 c0       	rjmp	.+40     	; 0x2982 <dma_interrupt+0x98>
    295a:	29 23       	and	r18, r25
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	b9 01       	movw	r22, r18
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <dma_interrupt+0x7c>
    2962:	75 95       	asr	r23
    2964:	67 95       	ror	r22
    2966:	aa 95       	dec	r26
    2968:	e2 f7       	brpl	.-8      	; 0x2962 <dma_interrupt+0x78>
    296a:	60 fd       	sbrc	r22, 0
    296c:	0c c0       	rjmp	.+24     	; 0x2986 <dma_interrupt+0x9c>
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <dma_interrupt+0x8a>
    2970:	35 95       	asr	r19
    2972:	27 95       	ror	r18
    2974:	8a 95       	dec	r24
    2976:	e2 f7       	brpl	.-8      	; 0x2970 <dma_interrupt+0x86>
    2978:	82 2f       	mov	r24, r18
    297a:	81 70       	andi	r24, 0x01	; 1
    297c:	05 c0       	rjmp	.+10     	; 0x2988 <dma_interrupt+0x9e>
    297e:	84 e0       	ldi	r24, 0x04	; 4
    2980:	03 c0       	rjmp	.+6      	; 0x2988 <dma_interrupt+0x9e>
    2982:	83 e0       	ldi	r24, 0x03	; 3
    2984:	01 c0       	rjmp	.+2      	; 0x2988 <dma_interrupt+0x9e>
    2986:	82 e0       	ldi	r24, 0x02	; 2
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	90 63       	ori	r25, 0x30	; 48
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	44 0f       	add	r20, r20
    2990:	55 1f       	adc	r21, r21
    2992:	fa 01       	movw	r30, r20
    2994:	ef 57       	subi	r30, 0x7F	; 127
    2996:	f6 4d       	sbci	r31, 0xD6	; 214
    2998:	01 90       	ld	r0, Z+
    299a:	f0 81       	ld	r31, Z
    299c:	e0 2d       	mov	r30, r0
    299e:	30 97       	sbiw	r30, 0x00	; 0
    29a0:	09 f0       	breq	.+2      	; 0x29a4 <dma_interrupt+0xba>
    29a2:	19 95       	eicall
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	08 95       	ret

000029aa <dma_enable>:
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	1f 92       	push	r1
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	61 e0       	ldi	r22, 0x01	; 1
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    29bc:	80 91 a0 29 	lds	r24, 0x29A0	; 0x8029a0 <sleepmgr_locks+0x1>
    29c0:	8f 3f       	cpi	r24, 0xFF	; 255
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <dma_enable+0x1c>
    29c4:	ff cf       	rjmp	.-2      	; 0x29c4 <dma_enable+0x1a>
    29c6:	8f b7       	in	r24, 0x3f	; 63
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	f8 94       	cli
    29cc:	99 81       	ldd	r25, Y+1	; 0x01
    29ce:	ef e9       	ldi	r30, 0x9F	; 159
    29d0:	f9 e2       	ldi	r31, 0x29	; 41
    29d2:	81 81       	ldd	r24, Z+1	; 0x01
    29d4:	8f 5f       	subi	r24, 0xFF	; 255
    29d6:	81 83       	std	Z+1, r24	; 0x01
    29d8:	9f bf       	out	0x3f, r25	; 63
    29da:	e0 e0       	ldi	r30, 0x00	; 0
    29dc:	f1 e0       	ldi	r31, 0x01	; 1
    29de:	80 e4       	ldi	r24, 0x40	; 64
    29e0:	80 83       	st	Z, r24
    29e2:	80 e8       	ldi	r24, 0x80	; 128
    29e4:	80 83       	st	Z, r24
    29e6:	0f 90       	pop	r0
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	08 95       	ret

000029ee <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    29ee:	e8 2f       	mov	r30, r24
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	ee 0f       	add	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	ef 57       	subi	r30, 0x7F	; 127
    29f8:	f6 4d       	sbci	r31, 0xD6	; 214
    29fa:	60 83       	st	Z, r22
    29fc:	71 83       	std	Z+1, r23	; 0x01
    29fe:	08 95       	ret

00002a00 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    2a00:	1f 92       	push	r1
    2a02:	0f 92       	push	r0
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	0f 92       	push	r0
    2a08:	11 24       	eor	r1, r1
    2a0a:	0b b6       	in	r0, 0x3b	; 59
    2a0c:	0f 92       	push	r0
    2a0e:	2f 93       	push	r18
    2a10:	3f 93       	push	r19
    2a12:	4f 93       	push	r20
    2a14:	5f 93       	push	r21
    2a16:	6f 93       	push	r22
    2a18:	7f 93       	push	r23
    2a1a:	8f 93       	push	r24
    2a1c:	9f 93       	push	r25
    2a1e:	af 93       	push	r26
    2a20:	bf 93       	push	r27
    2a22:	ef 93       	push	r30
    2a24:	ff 93       	push	r31
	dma_interrupt(0);
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	60 df       	rcall	.-320    	; 0x28ea <dma_interrupt>
}
    2a2a:	ff 91       	pop	r31
    2a2c:	ef 91       	pop	r30
    2a2e:	bf 91       	pop	r27
    2a30:	af 91       	pop	r26
    2a32:	9f 91       	pop	r25
    2a34:	8f 91       	pop	r24
    2a36:	7f 91       	pop	r23
    2a38:	6f 91       	pop	r22
    2a3a:	5f 91       	pop	r21
    2a3c:	4f 91       	pop	r20
    2a3e:	3f 91       	pop	r19
    2a40:	2f 91       	pop	r18
    2a42:	0f 90       	pop	r0
    2a44:	0b be       	out	0x3b, r0	; 59
    2a46:	0f 90       	pop	r0
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	0f 90       	pop	r0
    2a4c:	1f 90       	pop	r1
    2a4e:	18 95       	reti

00002a50 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    2a50:	1f 92       	push	r1
    2a52:	0f 92       	push	r0
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	0f 92       	push	r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	0b b6       	in	r0, 0x3b	; 59
    2a5c:	0f 92       	push	r0
    2a5e:	2f 93       	push	r18
    2a60:	3f 93       	push	r19
    2a62:	4f 93       	push	r20
    2a64:	5f 93       	push	r21
    2a66:	6f 93       	push	r22
    2a68:	7f 93       	push	r23
    2a6a:	8f 93       	push	r24
    2a6c:	9f 93       	push	r25
    2a6e:	af 93       	push	r26
    2a70:	bf 93       	push	r27
    2a72:	ef 93       	push	r30
    2a74:	ff 93       	push	r31
	dma_interrupt(1);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	38 df       	rcall	.-400    	; 0x28ea <dma_interrupt>
}
    2a7a:	ff 91       	pop	r31
    2a7c:	ef 91       	pop	r30
    2a7e:	bf 91       	pop	r27
    2a80:	af 91       	pop	r26
    2a82:	9f 91       	pop	r25
    2a84:	8f 91       	pop	r24
    2a86:	7f 91       	pop	r23
    2a88:	6f 91       	pop	r22
    2a8a:	5f 91       	pop	r21
    2a8c:	4f 91       	pop	r20
    2a8e:	3f 91       	pop	r19
    2a90:	2f 91       	pop	r18
    2a92:	0f 90       	pop	r0
    2a94:	0b be       	out	0x3b, r0	; 59
    2a96:	0f 90       	pop	r0
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	0f 90       	pop	r0
    2a9c:	1f 90       	pop	r1
    2a9e:	18 95       	reti

00002aa0 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    2aa0:	1f 92       	push	r1
    2aa2:	0f 92       	push	r0
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	0f 92       	push	r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	0b b6       	in	r0, 0x3b	; 59
    2aac:	0f 92       	push	r0
    2aae:	2f 93       	push	r18
    2ab0:	3f 93       	push	r19
    2ab2:	4f 93       	push	r20
    2ab4:	5f 93       	push	r21
    2ab6:	6f 93       	push	r22
    2ab8:	7f 93       	push	r23
    2aba:	8f 93       	push	r24
    2abc:	9f 93       	push	r25
    2abe:	af 93       	push	r26
    2ac0:	bf 93       	push	r27
    2ac2:	ef 93       	push	r30
    2ac4:	ff 93       	push	r31
	dma_interrupt(2);
    2ac6:	82 e0       	ldi	r24, 0x02	; 2
    2ac8:	10 df       	rcall	.-480    	; 0x28ea <dma_interrupt>
}
    2aca:	ff 91       	pop	r31
    2acc:	ef 91       	pop	r30
    2ace:	bf 91       	pop	r27
    2ad0:	af 91       	pop	r26
    2ad2:	9f 91       	pop	r25
    2ad4:	8f 91       	pop	r24
    2ad6:	7f 91       	pop	r23
    2ad8:	6f 91       	pop	r22
    2ada:	5f 91       	pop	r21
    2adc:	4f 91       	pop	r20
    2ade:	3f 91       	pop	r19
    2ae0:	2f 91       	pop	r18
    2ae2:	0f 90       	pop	r0
    2ae4:	0b be       	out	0x3b, r0	; 59
    2ae6:	0f 90       	pop	r0
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	0f 90       	pop	r0
    2aec:	1f 90       	pop	r1
    2aee:	18 95       	reti

00002af0 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    2af0:	1f 92       	push	r1
    2af2:	0f 92       	push	r0
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	0f 92       	push	r0
    2af8:	11 24       	eor	r1, r1
    2afa:	0b b6       	in	r0, 0x3b	; 59
    2afc:	0f 92       	push	r0
    2afe:	2f 93       	push	r18
    2b00:	3f 93       	push	r19
    2b02:	4f 93       	push	r20
    2b04:	5f 93       	push	r21
    2b06:	6f 93       	push	r22
    2b08:	7f 93       	push	r23
    2b0a:	8f 93       	push	r24
    2b0c:	9f 93       	push	r25
    2b0e:	af 93       	push	r26
    2b10:	bf 93       	push	r27
    2b12:	ef 93       	push	r30
    2b14:	ff 93       	push	r31
	dma_interrupt(3);
    2b16:	83 e0       	ldi	r24, 0x03	; 3
    2b18:	e8 de       	rcall	.-560    	; 0x28ea <dma_interrupt>
}
    2b1a:	ff 91       	pop	r31
    2b1c:	ef 91       	pop	r30
    2b1e:	bf 91       	pop	r27
    2b20:	af 91       	pop	r26
    2b22:	9f 91       	pop	r25
    2b24:	8f 91       	pop	r24
    2b26:	7f 91       	pop	r23
    2b28:	6f 91       	pop	r22
    2b2a:	5f 91       	pop	r21
    2b2c:	4f 91       	pop	r20
    2b2e:	3f 91       	pop	r19
    2b30:	2f 91       	pop	r18
    2b32:	0f 90       	pop	r0
    2b34:	0b be       	out	0x3b, r0	; 59
    2b36:	0f 90       	pop	r0
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	0f 90       	pop	r0
    2b3c:	1f 90       	pop	r1
    2b3e:	18 95       	reti

00002b40 <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	1f 92       	push	r1
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    2b4c:	e8 2f       	mov	r30, r24
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	71 96       	adiw	r30, 0x11	; 17
    2b52:	e2 95       	swap	r30
    2b54:	f2 95       	swap	r31
    2b56:	f0 7f       	andi	r31, 0xF0	; 240
    2b58:	fe 27       	eor	r31, r30
    2b5a:	e0 7f       	andi	r30, 0xF0	; 240
    2b5c:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2b5e:	8f b7       	in	r24, 0x3f	; 63
    2b60:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2b62:	f8 94       	cli
	return flags;
    2b64:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    2b66:	19 96       	adiw	r26, 0x09	; 9
    2b68:	8c 91       	ld	r24, X
    2b6a:	19 97       	sbiw	r26, 0x09	; 9
    2b6c:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    2b6e:	1a 96       	adiw	r26, 0x0a	; 10
    2b70:	8c 91       	ld	r24, X
    2b72:	1a 97       	sbiw	r26, 0x0a	; 10
    2b74:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    2b76:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    2b78:	17 96       	adiw	r26, 0x07	; 7
    2b7a:	8c 91       	ld	r24, X
    2b7c:	17 97       	sbiw	r26, 0x07	; 7
    2b7e:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    2b80:	18 96       	adiw	r26, 0x08	; 8
    2b82:	8c 91       	ld	r24, X
    2b84:	18 97       	sbiw	r26, 0x08	; 8
    2b86:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    2b88:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    2b8a:	12 96       	adiw	r26, 0x02	; 2
    2b8c:	8c 91       	ld	r24, X
    2b8e:	12 97       	sbiw	r26, 0x02	; 2
    2b90:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    2b92:	13 96       	adiw	r26, 0x03	; 3
    2b94:	8c 91       	ld	r24, X
    2b96:	13 97       	sbiw	r26, 0x03	; 3
    2b98:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    2b9a:	14 96       	adiw	r26, 0x04	; 4
    2b9c:	2d 91       	ld	r18, X+
    2b9e:	3c 91       	ld	r19, X
    2ba0:	15 97       	sbiw	r26, 0x05	; 5
    2ba2:	24 83       	std	Z+4, r18	; 0x04
    2ba4:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    2ba6:	16 96       	adiw	r26, 0x06	; 6
    2ba8:	8c 91       	ld	r24, X
    2baa:	16 97       	sbiw	r26, 0x06	; 6
    2bac:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    2bae:	11 96       	adiw	r26, 0x01	; 1
    2bb0:	8c 91       	ld	r24, X
    2bb2:	11 97       	sbiw	r26, 0x01	; 1
    2bb4:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    2bb6:	8c 91       	ld	r24, X
    2bb8:	8f 77       	andi	r24, 0x7F	; 127
    2bba:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2bbc:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    2bbe:	0f 90       	pop	r0
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	08 95       	ret

00002bc6 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    2bc6:	04 c0       	rjmp	.+8      	; 0x2bd0 <__portable_avr_delay_cycles+0xa>
    2bc8:	61 50       	subi	r22, 0x01	; 1
    2bca:	71 09       	sbc	r23, r1
    2bcc:	81 09       	sbc	r24, r1
    2bce:	91 09       	sbc	r25, r1
    2bd0:	61 15       	cp	r22, r1
    2bd2:	71 05       	cpc	r23, r1
    2bd4:	81 05       	cpc	r24, r1
    2bd6:	91 05       	cpc	r25, r1
    2bd8:	b9 f7       	brne	.-18     	; 0x2bc8 <__portable_avr_delay_cycles+0x2>
    2bda:	08 95       	ret

00002bdc <rtc_get_time>:
    2bdc:	80 e1       	ldi	r24, 0x10	; 16
    2bde:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    2be2:	e0 e2       	ldi	r30, 0x20	; 32
    2be4:	f4 e0       	ldi	r31, 0x04	; 4
    2be6:	81 81       	ldd	r24, Z+1	; 0x01
    2be8:	84 fd       	sbrc	r24, 4
    2bea:	fd cf       	rjmp	.-6      	; 0x2be6 <rtc_get_time+0xa>
    2bec:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    2bf0:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    2bf4:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    2bf8:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    2bfc:	08 95       	ret

00002bfe <rtc_set_callback>:
    2bfe:	80 93 89 29 	sts	0x2989, r24	; 0x802989 <rtc_data>
    2c02:	90 93 8a 29 	sts	0x298A, r25	; 0x80298a <rtc_data+0x1>
    2c06:	08 95       	ret

00002c08 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2c0c:	64 e0       	ldi	r22, 0x04	; 4
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    2c14:	c0 ef       	ldi	r28, 0xF0	; 240
    2c16:	d0 e0       	ldi	r29, 0x00	; 0
    2c18:	88 81       	ld	r24, Y
    2c1a:	82 60       	ori	r24, 0x02	; 2
    2c1c:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    2c1e:	61 e0       	ldi	r22, 0x01	; 1
    2c20:	80 ef       	ldi	r24, 0xF0	; 240
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	0e 94 3f 4a 	call	0x947e	; 0x947e <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    2c28:	88 81       	ld	r24, Y
    2c2a:	84 60       	ori	r24, 0x04	; 4
    2c2c:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    2c2e:	69 ee       	ldi	r22, 0xE9	; 233
    2c30:	73 e0       	ldi	r23, 0x03	; 3
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	c7 df       	rcall	.-114    	; 0x2bc6 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    2c38:	88 81       	ld	r24, Y
    2c3a:	88 61       	ori	r24, 0x18	; 24
    2c3c:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    2c3e:	e0 ef       	ldi	r30, 0xF0	; 240
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	81 81       	ldd	r24, Z+1	; 0x01
    2c44:	83 ff       	sbrs	r24, 3
    2c46:	fd cf       	rjmp	.-6      	; 0x2c42 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    2c48:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2c4c:	e0 e2       	ldi	r30, 0x20	; 32
    2c4e:	f4 e0       	ldi	r31, 0x04	; 4
    2c50:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    2c52:	80 fd       	sbrc	r24, 0
    2c54:	fd cf       	rjmp	.-6      	; 0x2c50 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    2c56:	e0 e2       	ldi	r30, 0x20	; 32
    2c58:	f4 e0       	ldi	r31, 0x04	; 4
    2c5a:	8f ef       	ldi	r24, 0xFF	; 255
    2c5c:	9f ef       	ldi	r25, 0xFF	; 255
    2c5e:	dc 01       	movw	r26, r24
    2c60:	80 87       	std	Z+8, r24	; 0x08
    2c62:	91 87       	std	Z+9, r25	; 0x09
    2c64:	a2 87       	std	Z+10, r26	; 0x0a
    2c66:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    2c68:	14 82       	std	Z+4, r1	; 0x04
    2c6a:	15 82       	std	Z+5, r1	; 0x05
    2c6c:	16 82       	std	Z+6, r1	; 0x06
    2c6e:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2c70:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    2c72:	80 fd       	sbrc	r24, 0
    2c74:	fd cf       	rjmp	.-6      	; 0x2c70 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    2c76:	e0 e2       	ldi	r30, 0x20	; 32
    2c78:	f4 e0       	ldi	r31, 0x04	; 4
    2c7a:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2c80:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    2c82:	80 fd       	sbrc	r24, 0
    2c84:	fd cf       	rjmp	.-6      	; 0x2c80 <rtc_init+0x78>
}
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	08 95       	ret

00002c8c <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    2c8c:	1f 92       	push	r1
    2c8e:	0f 92       	push	r0
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	0f 92       	push	r0
    2c94:	11 24       	eor	r1, r1
    2c96:	0b b6       	in	r0, 0x3b	; 59
    2c98:	0f 92       	push	r0
    2c9a:	2f 93       	push	r18
    2c9c:	3f 93       	push	r19
    2c9e:	4f 93       	push	r20
    2ca0:	5f 93       	push	r21
    2ca2:	6f 93       	push	r22
    2ca4:	7f 93       	push	r23
    2ca6:	8f 93       	push	r24
    2ca8:	9f 93       	push	r25
    2caa:	af 93       	push	r26
    2cac:	bf 93       	push	r27
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	ef 93       	push	r30
    2cb4:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    2cb6:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    2cba:	c0 91 89 29 	lds	r28, 0x2989	; 0x802989 <rtc_data>
    2cbe:	d0 91 8a 29 	lds	r29, 0x298A	; 0x80298a <rtc_data+0x1>
    2cc2:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    2cc4:	19 f0       	breq	.+6      	; 0x2ccc <__vector_11+0x40>
    2cc6:	8a df       	rcall	.-236    	; 0x2bdc <rtc_get_time>
    2cc8:	fe 01       	movw	r30, r28
}
    2cca:	19 95       	eicall
    2ccc:	ff 91       	pop	r31
    2cce:	ef 91       	pop	r30
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	bf 91       	pop	r27
    2cd6:	af 91       	pop	r26
    2cd8:	9f 91       	pop	r25
    2cda:	8f 91       	pop	r24
    2cdc:	7f 91       	pop	r23
    2cde:	6f 91       	pop	r22
    2ce0:	5f 91       	pop	r21
    2ce2:	4f 91       	pop	r20
    2ce4:	3f 91       	pop	r19
    2ce6:	2f 91       	pop	r18
    2ce8:	0f 90       	pop	r0
    2cea:	0b be       	out	0x3b, r0	; 59
    2cec:	0f 90       	pop	r0
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	0f 90       	pop	r0
    2cf2:	1f 90       	pop	r1
    2cf4:	18 95       	reti

00002cf6 <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* SINE LUT */
	uint16_t left_x, rght_x, left_y, rght_y;
	rght_x = left_x = phase >> 4;
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	f2 95       	swap	r31
    2cfa:	e2 95       	swap	r30
    2cfc:	ef 70       	andi	r30, 0x0F	; 15
    2cfe:	ef 27       	eor	r30, r31
    2d00:	ff 70       	andi	r31, 0x0F	; 15
    2d02:	ef 27       	eor	r30, r31
	if (++rght_x >= PM_SINE_COUNT) {
    2d04:	9f 01       	movw	r18, r30
    2d06:	2f 5f       	subi	r18, 0xFF	; 255
    2d08:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0a:	21 15       	cp	r18, r1
    2d0c:	40 e1       	ldi	r20, 0x10	; 16
    2d0e:	34 07       	cpc	r19, r20
    2d10:	08 f0       	brcs	.+2      	; 0x2d14 <get_interpolated_sine+0x1e>
		rght_x -= PM_SINE_COUNT;
    2d12:	30 51       	subi	r19, 0x10	; 16
	}
	left_y = PGM_READ_WORD(&(PM_SINE[left_x]));
    2d14:	ee 0f       	add	r30, r30
    2d16:	ff 1f       	adc	r31, r31
    2d18:	e8 56       	subi	r30, 0x68	; 104
    2d1a:	f7 4f       	sbci	r31, 0xF7	; 247
    2d1c:	45 91       	lpm	r20, Z+
    2d1e:	54 91       	lpm	r21, Z
	rght_y = PGM_READ_WORD(&(PM_SINE[rght_x]));
    2d20:	f9 01       	movw	r30, r18
    2d22:	ee 0f       	add	r30, r30
    2d24:	ff 1f       	adc	r31, r31
    2d26:	e8 56       	subi	r30, 0x68	; 104
    2d28:	f7 4f       	sbci	r31, 0xF7	; 247
    2d2a:	25 91       	lpm	r18, Z+
    2d2c:	34 91       	lpm	r19, Z

	/* INTERPOLATION LUT */
	uint16_t idx_y	= (uint16_t)((uint32_t)PM_SINE_MAX_STEP + rght_y - left_y);		// PM_SINE_MAX_STEP = +/-50
	uint16_t idx	= (idx_y << 4) | (phase & 0x0f);
	return left_y + (int8_t)PGM_READ_BYTE(&(PM_SINE_IP[idx]));
    2d2e:	f9 01       	movw	r30, r18
    2d30:	f4 96       	adiw	r30, 0x34	; 52
    2d32:	e4 1b       	sub	r30, r20
    2d34:	f5 0b       	sbc	r31, r21
    2d36:	e2 95       	swap	r30
    2d38:	f2 95       	swap	r31
    2d3a:	f0 7f       	andi	r31, 0xF0	; 240
    2d3c:	fe 27       	eor	r31, r30
    2d3e:	e0 7f       	andi	r30, 0xF0	; 240
    2d40:	fe 27       	eor	r31, r30
    2d42:	8f 70       	andi	r24, 0x0F	; 15
    2d44:	99 27       	eor	r25, r25
    2d46:	e8 2b       	or	r30, r24
    2d48:	f9 2b       	or	r31, r25
    2d4a:	e8 5e       	subi	r30, 0xE8	; 232
    2d4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d4e:	e4 91       	lpm	r30, Z
}
    2d50:	ca 01       	movw	r24, r20
    2d52:	8e 0f       	add	r24, r30
    2d54:	91 1d       	adc	r25, r1
    2d56:	e7 fd       	sbrc	r30, 7
    2d58:	9a 95       	dec	r25
    2d5a:	08 95       	ret

00002d5c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2d5c:	04 c0       	rjmp	.+8      	; 0x2d66 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2d5e:	61 50       	subi	r22, 0x01	; 1
    2d60:	71 09       	sbc	r23, r1
    2d62:	81 09       	sbc	r24, r1
    2d64:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2d66:	61 15       	cp	r22, r1
    2d68:	71 05       	cpc	r23, r1
    2d6a:	81 05       	cpc	r24, r1
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	b9 f7       	brne	.-18     	; 0x2d5e <__portable_avr_delay_cycles+0x2>
    2d70:	08 95       	ret

00002d72 <twi2_waitUntilReady>:
{
	return (((int16_t)asa - 128) + 256) / 256.f;
}

static void twi2_waitUntilReady(void)
{
    2d72:	cf 92       	push	r12
    2d74:	df 92       	push	r13
    2d76:	ef 92       	push	r14
    2d78:	ff 92       	push	r15
    2d7a:	0f 93       	push	r16
    2d7c:	1f 93       	push	r17
    2d7e:	cf 93       	push	r28
	status_code_t status;
	uint8_t isBusy;
	uint8_t isValid;

	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_STATE;
    2d80:	eb e0       	ldi	r30, 0x0B	; 11
    2d82:	f0 e2       	ldi	r31, 0x20	; 32
    2d84:	83 e0       	ldi	r24, 0x03	; 3
    2d86:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	84 83       	std	Z+4, r24	; 0x04
    2d8e:	95 83       	std	Z+5, r25	; 0x05

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2d90:	8f 01       	movw	r16, r30
    2d92:	cc 24       	eor	r12, r12
    2d94:	c3 94       	inc	r12
    2d96:	d1 2c       	mov	r13, r1
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    2d98:	0f 2e       	mov	r0, r31
    2d9a:	fb e6       	ldi	r31, 0x6B	; 107
    2d9c:	ef 2e       	mov	r14, r31
    2d9e:	f7 e2       	ldi	r31, 0x27	; 39
    2da0:	ff 2e       	mov	r15, r31
    2da2:	f0 2d       	mov	r31, r0
	twi2_packet.addr_length = 1;

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2da4:	f8 01       	movw	r30, r16
    2da6:	c0 86       	std	Z+8, r12	; 0x08
    2da8:	d1 86       	std	Z+9, r13	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2daa:	41 e0       	ldi	r20, 0x01	; 1
    2dac:	b8 01       	movw	r22, r16
    2dae:	80 e8       	ldi	r24, 0x80	; 128
    2db0:	94 e0       	ldi	r25, 0x04	; 4
    2db2:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    2db6:	f7 01       	movw	r30, r14
    2db8:	c0 81       	ld	r28, Z
    2dba:	9c 2f       	mov	r25, r28
    2dbc:	90 78       	andi	r25, 0x80	; 128
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	0d c0       	rjmp	.+26     	; 0x2ddc <twi2_waitUntilReady+0x6a>
    2dc2:	91 f0       	breq	.+36     	; 0x2de8 <twi2_waitUntilReady+0x76>
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
		} else {
			if (isBusy && isValid) {
    2dc4:	8c 2f       	mov	r24, r28
    2dc6:	81 78       	andi	r24, 0x81	; 129
    2dc8:	81 38       	cpi	r24, 0x81	; 129
    2dca:	29 f4       	brne	.+10     	; 0x2dd6 <twi2_waitUntilReady+0x64>
				delay_us(TWI_SMART_LCD_DEVICE_BUSY_DELAY_MIN_US);
    2dcc:	65 ef       	ldi	r22, 0xF5	; 245
    2dce:	71 e0       	ldi	r23, 0x01	; 1
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	c3 df       	rcall	.-122    	; 0x2d5c <__portable_avr_delay_cycles>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
    2dd6:	c0 fd       	sbrc	r28, 0
    2dd8:	e5 cf       	rjmp	.-54     	; 0x2da4 <twi2_waitUntilReady+0x32>
    2dda:	0c c0       	rjmp	.+24     	; 0x2df4 <twi2_waitUntilReady+0x82>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2ddc:	65 e0       	ldi	r22, 0x05	; 5
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	bb df       	rcall	.-138    	; 0x2d5c <__portable_avr_delay_cycles>
    2de6:	de cf       	rjmp	.-68     	; 0x2da4 <twi2_waitUntilReady+0x32>
    2de8:	65 e0       	ldi	r22, 0x05	; 5
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	b5 df       	rcall	.-150    	; 0x2d5c <__portable_avr_delay_cycles>
    2df2:	d8 cf       	rjmp	.-80     	; 0x2da4 <twi2_waitUntilReady+0x32>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
	//printf("DBG909\r\n");
}
    2df4:	cf 91       	pop	r28
    2df6:	1f 91       	pop	r17
    2df8:	0f 91       	pop	r16
    2dfa:	ff 90       	pop	r15
    2dfc:	ef 90       	pop	r14
    2dfe:	df 90       	pop	r13
    2e00:	cf 90       	pop	r12
    2e02:	08 95       	ret

00002e04 <isr_twi1_baro>:
		}
	} while (false);
}

static void isr_twi1_baro(uint32_t now, bool sync)
{
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	1f 92       	push	r1
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
	static uint8_t  s_step = 100;
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	/* Restart a new cycle if ready */
	if (sync && (s_step >= 100)) {
    2e0e:	44 23       	and	r20, r20
    2e10:	41 f0       	breq	.+16     	; 0x2e22 <isr_twi1_baro+0x1e>
    2e12:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_step.7356>
    2e16:	84 36       	cpi	r24, 0x64	; 100
    2e18:	08 f4       	brcc	.+2      	; 0x2e1c <isr_twi1_baro+0x18>
    2e1a:	bb c0       	rjmp	.+374    	; 0x2f92 <isr_twi1_baro+0x18e>
		s_step = 0;
    2e1c:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <s_step.7356>
    2e20:	09 c0       	rjmp	.+18     	; 0x2e34 <isr_twi1_baro+0x30>
	}

	switch (s_step) {
    2e22:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_step.7356>
    2e26:	85 31       	cpi	r24, 0x15	; 21
    2e28:	09 f1       	breq	.+66     	; 0x2e6c <isr_twi1_baro+0x68>
    2e2a:	8b 32       	cpi	r24, 0x2B	; 43
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <isr_twi1_baro+0x2c>
    2e2e:	59 c0       	rjmp	.+178    	; 0x2ee2 <isr_twi1_baro+0xde>
    2e30:	81 11       	cpse	r24, r1
    2e32:	a9 c0       	rjmp	.+338    	; 0x2f86 <isr_twi1_baro+0x182>
		case 0:
			/* Request D1 */
			twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    2e34:	ef e1       	ldi	r30, 0x1F	; 31
    2e36:	f0 e2       	ldi	r31, 0x20	; 32
    2e38:	86 e7       	ldi	r24, 0x76	; 118
    2e3a:	80 83       	st	Z, r24
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D1_4096;
    2e3c:	88 e4       	ldi	r24, 0x48	; 72
    2e3e:	81 83       	std	Z+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	84 83       	std	Z+4, r24	; 0x04
    2e46:	95 83       	std	Z+5, r25	; 0x05
			twi1_packet.length = 0;
    2e48:	10 86       	std	Z+8, r1	; 0x08
    2e4a:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	bf 01       	movw	r22, r30
    2e50:	80 ea       	ldi	r24, 0xA0	; 160
    2e52:	94 e0       	ldi	r25, 0x04	; 4
    2e54:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
			status_code_t sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2e58:	81 11       	cpse	r24, r1
    2e5a:	04 c0       	rjmp	.+8      	; 0x2e64 <isr_twi1_baro+0x60>
				s_step = 1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7356>
				return;
    2e62:	a0 c0       	rjmp	.+320    	; 0x2fa4 <isr_twi1_baro+0x1a0>
			}

			s_step = 200;										// Failed, stay until new sync triggers
    2e64:	88 ec       	ldi	r24, 0xC8	; 200
    2e66:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7356>
			return;
    2e6a:	9c c0       	rjmp	.+312    	; 0x2fa4 <isr_twi1_baro+0x1a0>
		break;

		case 21:
			/* Get data */
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    2e6c:	ef e1       	ldi	r30, 0x1F	; 31
    2e6e:	f0 e2       	ldi	r31, 0x20	; 32
    2e70:	11 82       	std	Z+1, r1	; 0x01
			twi1_packet.length = 3;
    2e72:	83 e0       	ldi	r24, 0x03	; 3
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	80 87       	std	Z+8, r24	; 0x08
    2e78:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2e7a:	41 e0       	ldi	r20, 0x01	; 1
    2e7c:	bf 01       	movw	r22, r30
    2e7e:	80 ea       	ldi	r24, 0xA0	; 160
    2e80:	94 e0       	ldi	r25, 0x04	; 4
    2e82:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2e86:	81 11       	cpse	r24, r1
    2e88:	28 c0       	rjmp	.+80     	; 0x2eda <isr_twi1_baro+0xd6>
				s_twi1_baro_d1 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    2e8a:	e3 e7       	ldi	r30, 0x73	; 115
    2e8c:	f7 e2       	ldi	r31, 0x27	; 39
    2e8e:	20 81       	ld	r18, Z
    2e90:	81 81       	ldd	r24, Z+1	; 0x01
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	a0 e0       	ldi	r26, 0x00	; 0
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	ba 2f       	mov	r27, r26
    2e9a:	a9 2f       	mov	r26, r25
    2e9c:	98 2f       	mov	r25, r24
    2e9e:	88 27       	eor	r24, r24
    2ea0:	a2 2b       	or	r26, r18
    2ea2:	22 81       	ldd	r18, Z+2	; 0x02
    2ea4:	82 2b       	or	r24, r18
    2ea6:	80 93 68 25 	sts	0x2568, r24	; 0x802568 <s_twi1_baro_d1.7357>
    2eaa:	90 93 69 25 	sts	0x2569, r25	; 0x802569 <s_twi1_baro_d1.7357+0x1>
    2eae:	a0 93 6a 25 	sts	0x256A, r26	; 0x80256a <s_twi1_baro_d1.7357+0x2>
    2eb2:	b0 93 6b 25 	sts	0x256B, r27	; 0x80256b <s_twi1_baro_d1.7357+0x3>

				/* Request D2 */
				twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D2_4096;
    2eb6:	ef e1       	ldi	r30, 0x1F	; 31
    2eb8:	f0 e2       	ldi	r31, 0x20	; 32
    2eba:	88 e5       	ldi	r24, 0x58	; 88
    2ebc:	81 83       	std	Z+1, r24	; 0x01
				twi1_packet.length = 0;
    2ebe:	10 86       	std	Z+8, r1	; 0x08
    2ec0:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2ec2:	40 e0       	ldi	r20, 0x00	; 0
    2ec4:	bf 01       	movw	r22, r30
    2ec6:	80 ea       	ldi	r24, 0xA0	; 160
    2ec8:	94 e0       	ldi	r25, 0x04	; 4
    2eca:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
				sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
				if (sc == STATUS_OK) {
    2ece:	81 11       	cpse	r24, r1
    2ed0:	04 c0       	rjmp	.+8      	; 0x2eda <isr_twi1_baro+0xd6>
					s_step = 22;
    2ed2:	86 e1       	ldi	r24, 0x16	; 22
    2ed4:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7356>
					return;
    2ed8:	65 c0       	rjmp	.+202    	; 0x2fa4 <isr_twi1_baro+0x1a0>
				}
			}

			s_step = 211;										// Failed, stay until new sync triggers
    2eda:	83 ed       	ldi	r24, 0xD3	; 211
    2edc:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7356>
			return;
    2ee0:	61 c0       	rjmp	.+194    	; 0x2fa4 <isr_twi1_baro+0x1a0>
		break;

		case 43:
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    2ee2:	ef e1       	ldi	r30, 0x1F	; 31
    2ee4:	f0 e2       	ldi	r31, 0x20	; 32
    2ee6:	11 82       	std	Z+1, r1	; 0x01
			twi1_packet.length = 3;
    2ee8:	83 e0       	ldi	r24, 0x03	; 3
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	80 87       	std	Z+8, r24	; 0x08
    2eee:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2ef0:	41 e0       	ldi	r20, 0x01	; 1
    2ef2:	bf 01       	movw	r22, r30
    2ef4:	80 ea       	ldi	r24, 0xA0	; 160
    2ef6:	94 e0       	ldi	r25, 0x04	; 4
    2ef8:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2efc:	81 11       	cpse	r24, r1
    2efe:	3f c0       	rjmp	.+126    	; 0x2f7e <isr_twi1_baro+0x17a>
				s_twi1_baro_d2 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    2f00:	e3 e7       	ldi	r30, 0x73	; 115
    2f02:	f7 e2       	ldi	r31, 0x27	; 39
    2f04:	20 81       	ld	r18, Z
    2f06:	81 81       	ldd	r24, Z+1	; 0x01
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	a0 e0       	ldi	r26, 0x00	; 0
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	ba 2f       	mov	r27, r26
    2f10:	a9 2f       	mov	r26, r25
    2f12:	98 2f       	mov	r25, r24
    2f14:	88 27       	eor	r24, r24
    2f16:	a2 2b       	or	r26, r18
    2f18:	22 81       	ldd	r18, Z+2	; 0x02
    2f1a:	82 2b       	or	r24, r18
    2f1c:	80 93 64 25 	sts	0x2564, r24	; 0x802564 <s_twi1_baro_d2.7358>
    2f20:	90 93 65 25 	sts	0x2565, r25	; 0x802565 <s_twi1_baro_d2.7358+0x1>
    2f24:	a0 93 66 25 	sts	0x2566, r26	; 0x802566 <s_twi1_baro_d2.7358+0x2>
    2f28:	b0 93 67 25 	sts	0x2567, r27	; 0x802567 <s_twi1_baro_d2.7358+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f2c:	8f b7       	in	r24, 0x3f	; 63
    2f2e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2f30:	f8 94       	cli
	return flags;
    2f32:	89 81       	ldd	r24, Y+1	; 0x01

				irqflags_t flags = cpu_irq_save();
				g_twi1_baro_d1 = s_twi1_baro_d1;
    2f34:	40 91 68 25 	lds	r20, 0x2568	; 0x802568 <s_twi1_baro_d1.7357>
    2f38:	50 91 69 25 	lds	r21, 0x2569	; 0x802569 <s_twi1_baro_d1.7357+0x1>
    2f3c:	60 91 6a 25 	lds	r22, 0x256A	; 0x80256a <s_twi1_baro_d1.7357+0x2>
    2f40:	70 91 6b 25 	lds	r23, 0x256B	; 0x80256b <s_twi1_baro_d1.7357+0x3>
    2f44:	40 93 08 28 	sts	0x2808, r20	; 0x802808 <g_twi1_baro_d1>
    2f48:	50 93 09 28 	sts	0x2809, r21	; 0x802809 <g_twi1_baro_d1+0x1>
    2f4c:	60 93 0a 28 	sts	0x280A, r22	; 0x80280a <g_twi1_baro_d1+0x2>
    2f50:	70 93 0b 28 	sts	0x280B, r23	; 0x80280b <g_twi1_baro_d1+0x3>
				g_twi1_baro_d2 = s_twi1_baro_d2;
    2f54:	40 91 64 25 	lds	r20, 0x2564	; 0x802564 <s_twi1_baro_d2.7358>
    2f58:	50 91 65 25 	lds	r21, 0x2565	; 0x802565 <s_twi1_baro_d2.7358+0x1>
    2f5c:	60 91 66 25 	lds	r22, 0x2566	; 0x802566 <s_twi1_baro_d2.7358+0x2>
    2f60:	70 91 67 25 	lds	r23, 0x2567	; 0x802567 <s_twi1_baro_d2.7358+0x3>
    2f64:	40 93 04 28 	sts	0x2804, r20	; 0x802804 <g_twi1_baro_d2>
    2f68:	50 93 05 28 	sts	0x2805, r21	; 0x802805 <g_twi1_baro_d2+0x1>
    2f6c:	60 93 06 28 	sts	0x2806, r22	; 0x802806 <g_twi1_baro_d2+0x2>
    2f70:	70 93 07 28 	sts	0x2807, r23	; 0x802807 <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f74:	8f bf       	out	0x3f, r24	; 63
				cpu_irq_restore(flags);

				s_step = 123;									// Success, stay until new sync triggers
    2f76:	8b e7       	ldi	r24, 0x7B	; 123
    2f78:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7356>
				return;
    2f7c:	13 c0       	rjmp	.+38     	; 0x2fa4 <isr_twi1_baro+0x1a0>
			}

			s_step = 223;										// Failed, stay until new sync triggers
    2f7e:	8f ed       	ldi	r24, 0xDF	; 223
    2f80:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7356>
			return;
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <isr_twi1_baro+0x1a0>
		break;

		default:
			/* Delay step of 0.5 ms */
			if (s_step < 100) {
    2f86:	84 36       	cpi	r24, 0x64	; 100
    2f88:	68 f4       	brcc	.+26     	; 0x2fa4 <isr_twi1_baro+0x1a0>
				s_step++;
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7356>
    2f90:	09 c0       	rjmp	.+18     	; 0x2fa4 <isr_twi1_baro+0x1a0>
	/* Restart a new cycle if ready */
	if (sync && (s_step >= 100)) {
		s_step = 0;
	}

	switch (s_step) {
    2f92:	85 31       	cpi	r24, 0x15	; 21
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <isr_twi1_baro+0x194>
    2f96:	6a cf       	rjmp	.-300    	; 0x2e6c <isr_twi1_baro+0x68>
    2f98:	8b 32       	cpi	r24, 0x2B	; 43
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <isr_twi1_baro+0x19a>
    2f9c:	a2 cf       	rjmp	.-188    	; 0x2ee2 <isr_twi1_baro+0xde>
    2f9e:	81 11       	cpse	r24, r1
    2fa0:	f4 cf       	rjmp	.-24     	; 0x2f8a <isr_twi1_baro+0x186>
    2fa2:	48 cf       	rjmp	.-368    	; 0x2e34 <isr_twi1_baro+0x30>
			/* Delay step of 0.5 ms */
			if (s_step < 100) {
				s_step++;
			}
	}
}
    2fa4:	0f 90       	pop	r0
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	08 95       	ret

00002fac <task_twi2_lcd_pos_xy>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_pos_xy(uint8_t x, uint8_t y)
{
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
    2fb0:	d8 2f       	mov	r29, r24
	twi2_waitUntilReady();
    2fb2:	c6 2f       	mov	r28, r22
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2fb4:	de de       	rcall	.-580    	; 0x2d72 <twi2_waitUntilReady>
    2fb6:	eb e0       	ldi	r30, 0x0B	; 11
    2fb8:	f0 e2       	ldi	r31, 0x20	; 32
    2fba:	80 e2       	ldi	r24, 0x20	; 32
	twi2_m_data[0] = x;
    2fbc:	81 83       	std	Z+1, r24	; 0x01
    2fbe:	ab e6       	ldi	r26, 0x6B	; 107
    2fc0:	b7 e2       	ldi	r27, 0x27	; 39
	twi2_m_data[1] = y;
    2fc2:	dc 93       	st	X, r29
    2fc4:	11 96       	adiw	r26, 0x01	; 1
	twi2_packet.length = 2;
    2fc6:	cc 93       	st	X, r28
    2fc8:	82 e0       	ldi	r24, 0x02	; 2
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	80 87       	std	Z+8, r24	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2fce:	91 87       	std	Z+9, r25	; 0x09
    2fd0:	40 e0       	ldi	r20, 0x00	; 0
    2fd2:	bf 01       	movw	r22, r30
    2fd4:	80 e8       	ldi	r24, 0x80	; 128
    2fd6:	94 e0       	ldi	r25, 0x04	; 4
    2fd8:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2fdc:	65 e0       	ldi	r22, 0x05	; 5
    2fde:	70 e0       	ldi	r23, 0x00	; 0
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
}
    2fe4:	bb de       	rcall	.-650    	; 0x2d5c <__portable_avr_delay_cycles>
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	08 95       	ret

00002fec <task_twi2_lcd_str>:

static void task_twi2_lcd_str(uint8_t x, uint8_t y, const char* str)
{
    2fec:	9f 92       	push	r9
    2fee:	af 92       	push	r10
    2ff0:	bf 92       	push	r11
    2ff2:	cf 92       	push	r12
    2ff4:	df 92       	push	r13
    2ff6:	ef 92       	push	r14
    2ff8:	ff 92       	push	r15
    2ffa:	0f 93       	push	r16
    2ffc:	1f 93       	push	r17
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	b8 2e       	mov	r11, r24
    3004:	a6 2e       	mov	r10, r22
    3006:	ea 01       	movw	r28, r20
	uint8_t slen = strlen(str);
    3008:	fa 01       	movw	r30, r20
    300a:	01 90       	ld	r0, Z+
    300c:	00 20       	and	r0, r0
    300e:	e9 f7       	brne	.-6      	; 0x300a <task_twi2_lcd_str+0x1e>
    3010:	31 97       	sbiw	r30, 0x01	; 1
    3012:	ce 2e       	mov	r12, r30
    3014:	c4 1a       	sub	r12, r20
	if (!slen) {
    3016:	09 f4       	brne	.+2      	; 0x301a <task_twi2_lcd_str+0x2e>
    3018:	43 c0       	rjmp	.+134    	; 0x30a0 <task_twi2_lcd_str+0xb4>
		/* Chunk of the string */
		{
			task_twi2_lcd_pos_xy(x, y);

			twi2_waitUntilReady();
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    301a:	0b e0       	ldi	r16, 0x0B	; 11
    301c:	10 e2       	ldi	r17, 0x20	; 32
    301e:	0f 2e       	mov	r0, r31
    3020:	f0 e3       	ldi	r31, 0x30	; 48
    3022:	9f 2e       	mov	r9, r31
    3024:	f0 2d       	mov	r31, r0
			twi2_m_data[0] = this_len;
    3026:	0f 2e       	mov	r0, r31
    3028:	fb e6       	ldi	r31, 0x6B	; 107
    302a:	ef 2e       	mov	r14, r31
    302c:	f7 e2       	ldi	r31, 0x27	; 39
    302e:	ff 2e       	mov	r15, r31
    3030:	f0 2d       	mov	r31, r0
    3032:	dc 2c       	mov	r13, r12
    3034:	e6 e0       	ldi	r30, 0x06	; 6
    3036:	ec 15       	cp	r30, r12
    3038:	20 f4       	brcc	.+8      	; 0x3042 <task_twi2_lcd_str+0x56>
    303a:	0f 2e       	mov	r0, r31
    303c:	f6 e0       	ldi	r31, 0x06	; 6
    303e:	df 2e       	mov	r13, r31
    3040:	f0 2d       	mov	r31, r0
			this_len = TWI2_STR_MAXLEN;
		}

		/* Chunk of the string */
		{
			task_twi2_lcd_pos_xy(x, y);
    3042:	6a 2d       	mov	r22, r10
    3044:	8b 2d       	mov	r24, r11

			twi2_waitUntilReady();
    3046:	b2 df       	rcall	.-156    	; 0x2fac <task_twi2_lcd_pos_xy>
    3048:	94 de       	rcall	.-728    	; 0x2d72 <twi2_waitUntilReady>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    304a:	f8 01       	movw	r30, r16
    304c:	91 82       	std	Z+1, r9	; 0x01
			twi2_m_data[0] = this_len;
    304e:	f7 01       	movw	r30, r14
    3050:	d0 82       	st	Z, r13
			for (uint8_t idx = 1; idx <= this_len; ++idx) {
    3052:	dd 20       	and	r13, r13
    3054:	69 f0       	breq	.+26     	; 0x3070 <task_twi2_lcd_str+0x84>
    3056:	81 e0       	ldi	r24, 0x01	; 1
				twi2_m_data[idx] = *(str++);
    3058:	21 96       	adiw	r28, 0x01	; 1
    305a:	e8 2f       	mov	r30, r24
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	e5 59       	subi	r30, 0x95	; 149
    3060:	f8 4d       	sbci	r31, 0xD8	; 216
    3062:	de 01       	movw	r26, r28
    3064:	11 97       	sbiw	r26, 0x01	; 1
    3066:	9c 91       	ld	r25, X
    3068:	90 83       	st	Z, r25
			task_twi2_lcd_pos_xy(x, y);

			twi2_waitUntilReady();
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
			twi2_m_data[0] = this_len;
			for (uint8_t idx = 1; idx <= this_len; ++idx) {
    306a:	8f 5f       	subi	r24, 0xFF	; 255
    306c:	d8 16       	cp	r13, r24
    306e:	a0 f7       	brcc	.-24     	; 0x3058 <task_twi2_lcd_str+0x6c>
				twi2_m_data[idx] = *(str++);
			}
			twi2_packet.length = this_len + 1;
    3070:	8d 2d       	mov	r24, r13
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	f8 01       	movw	r30, r16
    3078:	80 87       	std	Z+8, r24	; 0x08
    307a:	91 87       	std	Z+9, r25	; 0x09
    307c:	40 e0       	ldi	r20, 0x00	; 0
    307e:	b8 01       	movw	r22, r16
    3080:	80 e8       	ldi	r24, 0x80	; 128
    3082:	94 e0       	ldi	r25, 0x04	; 4
    3084:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3088:	65 e0       	ldi	r22, 0x05	; 5
    308a:	70 e0       	ldi	r23, 0x00	; 0
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	65 de       	rcall	.-822    	; 0x2d5c <__portable_avr_delay_cycles>
		}

		x    += this_len * 6;
    3092:	8d 2d       	mov	r24, r13
    3094:	88 0f       	add	r24, r24
    3096:	8d 0d       	add	r24, r13
    3098:	88 0f       	add	r24, r24
    309a:	b8 0e       	add	r11, r24
		slen -= this_len;
    309c:	cd 18       	sub	r12, r13
	uint8_t slen = strlen(str);
	if (!slen) {
		return;
	}

	while (slen) {
    309e:	49 f6       	brne	.-110    	; 0x3032 <task_twi2_lcd_str+0x46>
		}

		x    += this_len * 6;
		slen -= this_len;
	}
}
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	df 90       	pop	r13
    30ae:	cf 90       	pop	r12
    30b0:	bf 90       	pop	r11
    30b2:	af 90       	pop	r10
    30b4:	9f 90       	pop	r9
    30b6:	08 95       	ret

000030b8 <task_twi2_lcd_print_format_uint32>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_print_format_uint32(uint8_t x, uint8_t y, int32_t adc_i, int32_t adc_f, const char* fmt)
{
    30b8:	8f 92       	push	r8
    30ba:	9f 92       	push	r9
    30bc:	af 92       	push	r10
    30be:	bf 92       	push	r11
    30c0:	cf 92       	push	r12
    30c2:	df 92       	push	r13
    30c4:	ef 92       	push	r14
    30c6:	ff 92       	push	r15
    30c8:	0f 93       	push	r16
    30ca:	1f 93       	push	r17
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	b2 2e       	mov	r11, r18
    30d2:	a3 2e       	mov	r10, r19
    30d4:	94 2e       	mov	r9, r20
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    30d6:	85 2e       	mov	r8, r21
    30d8:	69 df       	rcall	.-302    	; 0x2fac <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    30da:	4b de       	rcall	.-874    	; 0x2d72 <twi2_waitUntilReady>
    30dc:	cb e0       	ldi	r28, 0x0B	; 11
    30de:	d0 e2       	ldi	r29, 0x20	; 32
    30e0:	80 e3       	ldi	r24, 0x30	; 48
	twi2_m_data[0] = sprintf((char*)&(twi2_m_data[1]), fmt, adc_i, adc_f);
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	1f 93       	push	r17
    30e6:	0f 93       	push	r16
    30e8:	ff 92       	push	r15
    30ea:	ef 92       	push	r14
    30ec:	8f 92       	push	r8
    30ee:	9f 92       	push	r9
    30f0:	af 92       	push	r10
    30f2:	bf 92       	push	r11
    30f4:	df 92       	push	r13
    30f6:	cf 92       	push	r12
    30f8:	8c e6       	ldi	r24, 0x6C	; 108
    30fa:	97 e2       	ldi	r25, 0x27	; 39
    30fc:	9f 93       	push	r25
    30fe:	8f 93       	push	r24
    3100:	0e 94 f9 4d 	call	0x9bf2	; 0x9bf2 <sprintf>
    3104:	80 93 6b 27 	sts	0x276B, r24	; 0x80276b <twi2_m_data>
	twi2_packet.length = twi2_m_data[0] + 1;
    3108:	99 27       	eor	r25, r25
    310a:	01 96       	adiw	r24, 0x01	; 1
    310c:	88 87       	std	Y+8, r24	; 0x08
    310e:	99 87       	std	Y+9, r25	; 0x09
    3110:	40 e0       	ldi	r20, 0x00	; 0
    3112:	be 01       	movw	r22, r28
    3114:	80 e8       	ldi	r24, 0x80	; 128
    3116:	94 e0       	ldi	r25, 0x04	; 4
    3118:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    311c:	65 e0       	ldi	r22, 0x05	; 5
    311e:	70 e0       	ldi	r23, 0x00	; 0
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	90 e0       	ldi	r25, 0x00	; 0
}
    3124:	1b de       	rcall	.-970    	; 0x2d5c <__portable_avr_delay_cycles>
    3126:	8d b7       	in	r24, 0x3d	; 61
    3128:	9e b7       	in	r25, 0x3e	; 62
    312a:	0c 96       	adiw	r24, 0x0c	; 12
    312c:	8d bf       	out	0x3d, r24	; 61
    312e:	9e bf       	out	0x3e, r25	; 62
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	ff 90       	pop	r15
    313a:	ef 90       	pop	r14
    313c:	df 90       	pop	r13
    313e:	cf 90       	pop	r12
    3140:	bf 90       	pop	r11
    3142:	af 90       	pop	r10
    3144:	9f 90       	pop	r9
    3146:	8f 90       	pop	r8
    3148:	08 95       	ret

0000314a <task_twi2_lcd_print_format_uint16>:
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
	task_twi2_lcd_str(6 * 16, (line++) * 10, "%");
}

static void task_twi2_lcd_print_format_uint16(uint8_t x, uint8_t y, int16_t adc_i, int16_t adc_f, const char* fmt)
{
    314a:	cf 92       	push	r12
    314c:	df 92       	push	r13
    314e:	ef 92       	push	r14
    3150:	ff 92       	push	r15
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
    3156:	cf 93       	push	r28
    3158:	df 93       	push	r29
    315a:	f4 2e       	mov	r15, r20
    315c:	e5 2e       	mov	r14, r21
    315e:	d2 2e       	mov	r13, r18
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    3160:	c3 2e       	mov	r12, r19
    3162:	24 df       	rcall	.-440    	; 0x2fac <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    3164:	06 de       	rcall	.-1012   	; 0x2d72 <twi2_waitUntilReady>
    3166:	cb e0       	ldi	r28, 0x0B	; 11
    3168:	d0 e2       	ldi	r29, 0x20	; 32
    316a:	80 e3       	ldi	r24, 0x30	; 48
	twi2_m_data[0] = sprintf((char*)&(twi2_m_data[1]), fmt, adc_i, adc_f);
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	cf 92       	push	r12
    3170:	df 92       	push	r13
    3172:	ef 92       	push	r14
    3174:	ff 92       	push	r15
    3176:	1f 93       	push	r17
    3178:	0f 93       	push	r16
    317a:	8c e6       	ldi	r24, 0x6C	; 108
    317c:	97 e2       	ldi	r25, 0x27	; 39
    317e:	9f 93       	push	r25
    3180:	8f 93       	push	r24
    3182:	0e 94 f9 4d 	call	0x9bf2	; 0x9bf2 <sprintf>
    3186:	80 93 6b 27 	sts	0x276B, r24	; 0x80276b <twi2_m_data>
	twi2_packet.length = twi2_m_data[0] + 1;
    318a:	99 27       	eor	r25, r25
    318c:	01 96       	adiw	r24, 0x01	; 1
    318e:	88 87       	std	Y+8, r24	; 0x08
    3190:	99 87       	std	Y+9, r25	; 0x09
    3192:	40 e0       	ldi	r20, 0x00	; 0
    3194:	be 01       	movw	r22, r28
    3196:	80 e8       	ldi	r24, 0x80	; 128
    3198:	94 e0       	ldi	r25, 0x04	; 4
    319a:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    319e:	65 e0       	ldi	r22, 0x05	; 5
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	90 e0       	ldi	r25, 0x00	; 0
}
    31a6:	da dd       	rcall	.-1100   	; 0x2d5c <__portable_avr_delay_cycles>
    31a8:	8d b7       	in	r24, 0x3d	; 61
    31aa:	9e b7       	in	r25, 0x3e	; 62
    31ac:	08 96       	adiw	r24, 0x08	; 8
    31ae:	8d bf       	out	0x3d, r24	; 61
    31b0:	9e bf       	out	0x3e, r25	; 62
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <twi_init>:
}


void twi_init(void) {
	#ifdef TWI1_MASTER
	TWI1_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA1
    31c4:	e0 e8       	ldi	r30, 0x80	; 128
    31c6:	f6 e0       	ldi	r31, 0x06	; 6
    31c8:	88 e3       	ldi	r24, 0x38	; 56
    31ca:	80 8b       	std	Z+16, r24	; 0x10
	TWI1_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL1
    31cc:	81 8b       	std	Z+17, r24	; 0x11
	#endif

	#ifdef TWI2_MASTER
	TWI2_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA2
    31ce:	e0 e4       	ldi	r30, 0x40	; 64
    31d0:	f6 e0       	ldi	r31, 0x06	; 6
    31d2:	80 8b       	std	Z+16, r24	; 0x10
	TWI2_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL2
    31d4:	81 8b       	std	Z+17, r24	; 0x11
    31d6:	08 95       	ret

000031d8 <twi_start>:
	#endif
}

void twi_start(void) {
    31d8:	7f 92       	push	r7
    31da:	8f 92       	push	r8
    31dc:	9f 92       	push	r9
    31de:	af 92       	push	r10
    31e0:	bf 92       	push	r11
    31e2:	cf 92       	push	r12
    31e4:	df 92       	push	r13
    31e6:	ef 92       	push	r14
    31e8:	ff 92       	push	r15
    31ea:	0f 93       	push	r16
    31ec:	1f 93       	push	r17
    31ee:	cf 93       	push	r28
    31f0:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    31f2:	60 e4       	ldi	r22, 0x40	; 64
    31f4:	85 e0       	ldi	r24, 0x05	; 5
    31f6:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
	#else
	#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
    31fa:	6a e2       	ldi	r22, 0x2A	; 42
    31fc:	70 e2       	ldi	r23, 0x20	; 32
    31fe:	80 ea       	ldi	r24, 0xA0	; 160
    3200:	94 e0       	ldi	r25, 0x04	; 4
    3202:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    3206:	e0 ea       	ldi	r30, 0xA0	; 160
    3208:	f4 e0       	ldi	r31, 0x04	; 4
    320a:	81 81       	ldd	r24, Z+1	; 0x01
    320c:	88 60       	ori	r24, 0x08	; 8
    320e:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    3210:	60 e4       	ldi	r22, 0x40	; 64
    3212:	83 e0       	ldi	r24, 0x03	; 3
    3214:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
	#else
	#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
    3218:	66 e1       	ldi	r22, 0x16	; 22
    321a:	70 e2       	ldi	r23, 0x20	; 32
    321c:	80 e8       	ldi	r24, 0x80	; 128
    321e:	94 e0       	ldi	r25, 0x04	; 4
    3220:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <twi_master_init>
    3224:	e0 e8       	ldi	r30, 0x80	; 128
    3226:	f4 e0       	ldi	r31, 0x04	; 4
    3228:	81 81       	ldd	r24, Z+1	; 0x01
    322a:	88 60       	ori	r24, 0x08	; 8
    322c:	81 83       	std	Z+1, r24	; 0x01

static void init_twi1_hygro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Hygro SHT31-DIS - I2C address: 0x%02X\r\n", TWI1_SLAVE_HYGRO_ADDR);
    322e:	1f 92       	push	r1
    3230:	c4 e4       	ldi	r28, 0x44	; 68
    3232:	cf 93       	push	r28
    3234:	86 ef       	ldi	r24, 0xF6	; 246
    3236:	90 e2       	ldi	r25, 0x20	; 32
    3238:	9f 93       	push	r25
    323a:	8f 93       	push	r24
    323c:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <printf>
	g_twi1_hygro_status = 0;
    3240:	10 92 fa 27 	sts	0x27FA, r1	; 0x8027fa <g_twi1_hygro_status>

	do {
		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    3244:	ef e1       	ldi	r30, 0x1F	; 31
    3246:	f0 e2       	ldi	r31, 0x20	; 32
    3248:	c0 83       	st	Z, r28
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_BREAK_HI;
    324a:	80 e3       	ldi	r24, 0x30	; 48
    324c:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_BREAK_LO;
    324e:	83 e9       	ldi	r24, 0x93	; 147
    3250:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    3252:	82 e0       	ldi	r24, 0x02	; 2
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	84 83       	std	Z+4, r24	; 0x04
    3258:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    325a:	10 86       	std	Z+8, r1	; 0x08
    325c:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	bf 01       	movw	r22, r30
    3262:	80 ea       	ldi	r24, 0xA0	; 160
    3264:	94 e0       	ldi	r25, 0x04	; 4
    3266:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    326a:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	88 23       	and	r24, r24
    3276:	29 f0       	breq	.+10     	; 0x3282 <twi_start+0xaa>
			printf("TWI-onboard: Hygro SHT31-DIS -   address NACK / 'break' bad response\r\n");
    3278:	8d e2       	ldi	r24, 0x2D	; 45
    327a:	91 e2       	ldi	r25, 0x21	; 33
    327c:	0e 94 c9 4d 	call	0x9b92	; 0x9b92 <puts>
    3280:	67 c0       	rjmp	.+206    	; 0x3350 <twi_start+0x178>
			break;
		}
		delay_ms(2);
    3282:	60 e1       	ldi	r22, 0x10	; 16
    3284:	77 e2       	ldi	r23, 0x27	; 39
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	68 dd       	rcall	.-1328   	; 0x2d5c <__portable_avr_delay_cycles>

		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    328c:	ef e1       	ldi	r30, 0x1F	; 31
    328e:	f0 e2       	ldi	r31, 0x20	; 32
    3290:	84 e4       	ldi	r24, 0x44	; 68
    3292:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_RESET_HI;
    3294:	80 e3       	ldi	r24, 0x30	; 48
    3296:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_RESET_LO;
    3298:	82 ea       	ldi	r24, 0xA2	; 162
    329a:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    329c:	82 e0       	ldi	r24, 0x02	; 2
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	84 83       	std	Z+4, r24	; 0x04
    32a2:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    32a4:	10 86       	std	Z+8, r1	; 0x08
    32a6:	11 86       	std	Z+9, r1	; 0x09
    32a8:	40 e0       	ldi	r20, 0x00	; 0
    32aa:	bf 01       	movw	r22, r30
    32ac:	80 ea       	ldi	r24, 0xA0	; 160
    32ae:	94 e0       	ldi	r25, 0x04	; 4
    32b0:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    32b4:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    32b6:	81 11       	cpse	r24, r1
    32b8:	4b c0       	rjmp	.+150    	; 0x3350 <twi_start+0x178>
			break;
		}
		delay_ms(2);
    32ba:	60 e1       	ldi	r22, 0x10	; 16
    32bc:	77 e2       	ldi	r23, 0x27	; 39
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	4c dd       	rcall	.-1384   	; 0x2d5c <__portable_avr_delay_cycles>

		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    32c4:	ef e1       	ldi	r30, 0x1F	; 31
    32c6:	f0 e2       	ldi	r31, 0x20	; 32
    32c8:	84 e4       	ldi	r24, 0x44	; 68
    32ca:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_STATUS_HI;
    32cc:	83 ef       	ldi	r24, 0xF3	; 243
    32ce:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_STATUS_LO;
    32d0:	8d e2       	ldi	r24, 0x2D	; 45
    32d2:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	84 83       	std	Z+4, r24	; 0x04
    32da:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 2;
    32dc:	80 87       	std	Z+8, r24	; 0x08
    32de:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	bf 01       	movw	r22, r30
    32e4:	80 ea       	ldi	r24, 0xA0	; 160
    32e6:	94 e0       	ldi	r25, 0x04	; 4
    32e8:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    32ec:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    32ee:	81 11       	cpse	r24, r1
    32f0:	2f c0       	rjmp	.+94     	; 0x3350 <twi_start+0x178>
			break;
		}
		g_twi1_hygro_status = (twi1_m_data[0] << 8) | twi1_m_data[1];
    32f2:	80 91 74 27 	lds	r24, 0x2774	; 0x802774 <twi1_m_data+0x1>
    32f6:	80 93 fa 27 	sts	0x27FA, r24	; 0x8027fa <g_twi1_hygro_status>
		printf("TWI-onboard: Hygro SHT31-DIS -   status: 0x%02X\r\n", g_twi1_hygro_status);
    32fa:	1f 92       	push	r1
    32fc:	8f 93       	push	r24
    32fe:	83 e7       	ldi	r24, 0x73	; 115
    3300:	91 e2       	ldi	r25, 0x21	; 33
    3302:	9f 93       	push	r25
    3304:	8f 93       	push	r24
    3306:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <printf>

		/* Start cyclic measurements with 2 MPS @ high repeatability */
		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    330a:	ef e1       	ldi	r30, 0x1F	; 31
    330c:	f0 e2       	ldi	r31, 0x20	; 32
    330e:	84 e4       	ldi	r24, 0x44	; 68
    3310:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_PERIODIC_2MPS_HIPREC_HI;
    3312:	82 e2       	ldi	r24, 0x22	; 34
    3314:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_PERIODIC_2MPS_HIPREC_LO;
    3316:	86 e3       	ldi	r24, 0x36	; 54
    3318:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    331a:	82 e0       	ldi	r24, 0x02	; 2
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	84 83       	std	Z+4, r24	; 0x04
    3320:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    3322:	10 86       	std	Z+8, r1	; 0x08
    3324:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	bf 01       	movw	r22, r30
    332a:	80 ea       	ldi	r24, 0xA0	; 160
    332c:	94 e0       	ldi	r25, 0x04	; 4
    332e:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    3332:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	81 11       	cpse	r24, r1
    333e:	08 c0       	rjmp	.+16     	; 0x3350 <twi_start+0x178>
			break;
		}

		g_twi1_hygro_valid = true;
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	80 93 fb 27 	sts	0x27FB, r24	; 0x8027fb <g_twi1_hygro_valid>
		printf("TWI-onboard:  INIT success.\r\n");
    3346:	85 ea       	ldi	r24, 0xA5	; 165
    3348:	91 e2       	ldi	r25, 0x21	; 33
    334a:	0e 94 c9 4d 	call	0x9b92	; 0x9b92 <puts>
    334e:	10 c0       	rjmp	.+32     	; 0x3370 <twi_start+0x198>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    3350:	8c 2f       	mov	r24, r28
    3352:	0c 2e       	mov	r0, r28
    3354:	00 0c       	add	r0, r0
    3356:	99 0b       	sbc	r25, r25
    3358:	9f 93       	push	r25
    335a:	cf 93       	push	r28
    335c:	82 ec       	ldi	r24, 0xC2	; 194
    335e:	91 e2       	ldi	r25, 0x21	; 33
    3360:	9f 93       	push	r25
    3362:	8f 93       	push	r24
    3364:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <printf>
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0

static void init_twi1_gyro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Gyro MPU-9250 - I2C address: 0x%02X, 0x%02X\r\n", TWI1_SLAVE_GYRO_ADDR_1, TWI1_SLAVE_GYRO_ADDR_2);
    3370:	1f 92       	push	r1
    3372:	8c e0       	ldi	r24, 0x0C	; 12
    3374:	8f 93       	push	r24
    3376:	1f 92       	push	r1
    3378:	c8 e6       	ldi	r28, 0x68	; 104
    337a:	cf 93       	push	r28
    337c:	83 ef       	ldi	r24, 0xF3	; 243
    337e:	91 e2       	ldi	r25, 0x21	; 33
    3380:	9f 93       	push	r25
    3382:	8f 93       	push	r24
    3384:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <printf>
	g_twi1_gyro_1_version = 0;
    3388:	10 92 40 28 	sts	0x2840, r1	; 0x802840 <g_twi1_gyro_1_version>
	g_twi1_gyro_2_version = 0;
    338c:	10 92 3f 28 	sts	0x283F, r1	; 0x80283f <g_twi1_gyro_2_version>

	do {
		/* MPU-9250 6 axis: RESET */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3390:	ef e1       	ldi	r30, 0x1F	; 31
    3392:	f0 e2       	ldi	r31, 0x20	; 32
    3394:	c0 83       	st	Z, r28
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_PWR_MGMT_1;
    3396:	8b e6       	ldi	r24, 0x6B	; 107
    3398:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	84 83       	std	Z+4, r24	; 0x04
    33a0:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_PWR_MGMT_1__HRESET | TWI1_SLAVE_GYRO_DTA_1_PWR_MGMT_1__CLKSEL_VAL;
    33a2:	21 e8       	ldi	r18, 0x81	; 129
    33a4:	20 93 73 27 	sts	0x2773, r18	; 0x802773 <twi1_m_data>
		twi1_packet.length = 1;
    33a8:	80 87       	std	Z+8, r24	; 0x08
    33aa:	91 87       	std	Z+9, r25	; 0x09
    33ac:	40 e0       	ldi	r20, 0x00	; 0
    33ae:	bf 01       	movw	r22, r30
    33b0:	80 ea       	ldi	r24, 0xA0	; 160
    33b2:	94 e0       	ldi	r25, 0x04	; 4
    33b4:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    33b8:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	88 23       	and	r24, r24
    33c8:	29 f0       	breq	.+10     	; 0x33d4 <twi_start+0x1fc>
			printf("TWI-onboard: Gyro MPU-9250   -   'reset 1' bad response\r\n");
    33ca:	80 e3       	ldi	r24, 0x30	; 48
    33cc:	92 e2       	ldi	r25, 0x22	; 34
    33ce:	0e 94 c9 4d 	call	0x9b92	; 0x9b92 <puts>
    33d2:	b0 c1       	rjmp	.+864    	; 0x3734 <twi_start+0x55c>
			break;
		}
		delay_ms(10);
    33d4:	61 e5       	ldi	r22, 0x51	; 81
    33d6:	73 ec       	ldi	r23, 0xC3	; 195
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	bf dc       	rcall	.-1666   	; 0x2d5c <__portable_avr_delay_cycles>

		/* MPU-9250 6 axis: read Who Am I control value */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    33de:	ef e1       	ldi	r30, 0x1F	; 31
    33e0:	f0 e2       	ldi	r31, 0x20	; 32
    33e2:	88 e6       	ldi	r24, 0x68	; 104
    33e4:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_WHOAMI;
    33e6:	85 e7       	ldi	r24, 0x75	; 117
    33e8:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	84 83       	std	Z+4, r24	; 0x04
    33f0:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    33f2:	80 87       	std	Z+8, r24	; 0x08
    33f4:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    33f6:	41 e0       	ldi	r20, 0x01	; 1
    33f8:	bf 01       	movw	r22, r30
    33fa:	80 ea       	ldi	r24, 0xA0	; 160
    33fc:	94 e0       	ldi	r25, 0x04	; 4
    33fe:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    3402:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3404:	81 11       	cpse	r24, r1
    3406:	96 c1       	rjmp	.+812    	; 0x3734 <twi_start+0x55c>
			break;
		}
		g_twi1_gyro_1_version = twi1_m_data[0];
    3408:	a3 e7       	ldi	r26, 0x73	; 115
    340a:	b7 e2       	ldi	r27, 0x27	; 39
    340c:	8c 91       	ld	r24, X
    340e:	80 93 40 28 	sts	0x2840, r24	; 0x802840 <g_twi1_gyro_1_version>

		/* MPU-9250 6 axis: I2C bypass on to access the Magnetometer chip */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3412:	ef e1       	ldi	r30, 0x1F	; 31
    3414:	f0 e2       	ldi	r31, 0x20	; 32
    3416:	88 e6       	ldi	r24, 0x68	; 104
    3418:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_INT_PIN_CFG;
    341a:	87 e3       	ldi	r24, 0x37	; 55
    341c:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	84 83       	std	Z+4, r24	; 0x04
    3424:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_INT_PIN_CFG__BYPASS_EN;
    3426:	22 e0       	ldi	r18, 0x02	; 2
    3428:	2c 93       	st	X, r18
		twi1_packet.length = 1;
    342a:	80 87       	std	Z+8, r24	; 0x08
    342c:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    342e:	40 e0       	ldi	r20, 0x00	; 0
    3430:	bf 01       	movw	r22, r30
    3432:	80 ea       	ldi	r24, 0xA0	; 160
    3434:	94 e0       	ldi	r25, 0x04	; 4
    3436:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    343a:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    343c:	81 11       	cpse	r24, r1
    343e:	7a c1       	rjmp	.+756    	; 0x3734 <twi_start+0x55c>
			break;
		}

		/* Magnetometer: soft reset */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3440:	ef e1       	ldi	r30, 0x1F	; 31
    3442:	f0 e2       	ldi	r31, 0x20	; 32
    3444:	8c e0       	ldi	r24, 0x0C	; 12
    3446:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_CNTL2;
    3448:	8b e0       	ldi	r24, 0x0B	; 11
    344a:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	84 83       	std	Z+4, r24	; 0x04
    3452:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_CNTL2__SRST;
    3454:	21 e0       	ldi	r18, 0x01	; 1
    3456:	20 93 73 27 	sts	0x2773, r18	; 0x802773 <twi1_m_data>
		twi1_packet.length = 1;
    345a:	80 87       	std	Z+8, r24	; 0x08
    345c:	91 87       	std	Z+9, r25	; 0x09
    345e:	40 e0       	ldi	r20, 0x00	; 0
    3460:	bf 01       	movw	r22, r30
    3462:	80 ea       	ldi	r24, 0xA0	; 160
    3464:	94 e0       	ldi	r25, 0x04	; 4
    3466:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    346a:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    346c:	81 11       	cpse	r24, r1
    346e:	62 c1       	rjmp	.+708    	; 0x3734 <twi_start+0x55c>
			break;
		}
		delay_ms(10);
    3470:	61 e5       	ldi	r22, 0x51	; 81
    3472:	73 ec       	ldi	r23, 0xC3	; 195
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	71 dc       	rcall	.-1822   	; 0x2d5c <__portable_avr_delay_cycles>

		/* Magnetometer: read Device ID */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    347a:	ef e1       	ldi	r30, 0x1F	; 31
    347c:	f0 e2       	ldi	r31, 0x20	; 32
    347e:	8c e0       	ldi	r24, 0x0C	; 12
    3480:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_WIA;
    3482:	11 82       	std	Z+1, r1	; 0x01
		twi1_packet.addr_length = 1;
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	84 83       	std	Z+4, r24	; 0x04
    348a:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    348c:	80 87       	std	Z+8, r24	; 0x08
    348e:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3490:	41 e0       	ldi	r20, 0x01	; 1
    3492:	bf 01       	movw	r22, r30
    3494:	80 ea       	ldi	r24, 0xA0	; 160
    3496:	94 e0       	ldi	r25, 0x04	; 4
    3498:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    349c:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    349e:	81 11       	cpse	r24, r1
    34a0:	49 c1       	rjmp	.+658    	; 0x3734 <twi_start+0x55c>
			break;
		}
		g_twi1_gyro_2_version = twi1_m_data[0];
    34a2:	c3 e7       	ldi	r28, 0x73	; 115
    34a4:	d7 e2       	ldi	r29, 0x27	; 39
    34a6:	88 81       	ld	r24, Y
    34a8:	80 93 3f 28 	sts	0x283F, r24	; 0x80283f <g_twi1_gyro_2_version>
		g_twi1_gyro_valid = true;
    34ac:	91 e0       	ldi	r25, 0x01	; 1
    34ae:	90 93 41 28 	sts	0x2841, r25	; 0x802841 <g_twi1_gyro_valid>
		printf("TWI-onboard: Gyro MPU-9250 -     version: 0x%02X, 0x%02X\r\n", g_twi1_gyro_1_version, g_twi1_gyro_2_version);
    34b2:	1f 92       	push	r1
    34b4:	8f 93       	push	r24
    34b6:	80 91 40 28 	lds	r24, 0x2840	; 0x802840 <g_twi1_gyro_1_version>
    34ba:	1f 92       	push	r1
    34bc:	8f 93       	push	r24
    34be:	89 e6       	ldi	r24, 0x69	; 105
    34c0:	92 e2       	ldi	r25, 0x22	; 34
    34c2:	9f 93       	push	r25
    34c4:	8f 93       	push	r24
    34c6:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <printf>

		/* Magnetometer: 16 bit access and prepare for PROM access */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    34ca:	ef e1       	ldi	r30, 0x1F	; 31
    34cc:	f0 e2       	ldi	r31, 0x20	; 32
    34ce:	8c e0       	ldi	r24, 0x0C	; 12
    34d0:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_CNTL1;
    34d2:	8a e0       	ldi	r24, 0x0A	; 10
    34d4:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	84 83       	std	Z+4, r24	; 0x04
    34dc:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_CNTL1__MODE_PROM_VAL;
    34de:	2f e1       	ldi	r18, 0x1F	; 31
    34e0:	28 83       	st	Y, r18
		twi1_packet.length = 1;
    34e2:	80 87       	std	Z+8, r24	; 0x08
    34e4:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    34e6:	40 e0       	ldi	r20, 0x00	; 0
    34e8:	bf 01       	movw	r22, r30
    34ea:	80 ea       	ldi	r24, 0xA0	; 160
    34ec:	94 e0       	ldi	r25, 0x04	; 4
    34ee:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    34f2:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	81 11       	cpse	r24, r1
    3502:	18 c1       	rjmp	.+560    	; 0x3734 <twi_start+0x55c>
			break;
		}

		/* Magnetometer: read correction data for X, Y and Z */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3504:	ef e1       	ldi	r30, 0x1F	; 31
    3506:	f0 e2       	ldi	r31, 0x20	; 32
    3508:	8c e0       	ldi	r24, 0x0C	; 12
    350a:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_ASAX;
    350c:	80 e1       	ldi	r24, 0x10	; 16
    350e:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	84 83       	std	Z+4, r24	; 0x04
    3516:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 3;
    3518:	83 e0       	ldi	r24, 0x03	; 3
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	80 87       	std	Z+8, r24	; 0x08
    351e:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3520:	41 e0       	ldi	r20, 0x01	; 1
    3522:	bf 01       	movw	r22, r30
    3524:	80 ea       	ldi	r24, 0xA0	; 160
    3526:	94 e0       	ldi	r25, 0x04	; 4
    3528:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    352c:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    352e:	81 11       	cpse	r24, r1
    3530:	01 c1       	rjmp	.+514    	; 0x3734 <twi_start+0x55c>
			break;
		}
		g_twi1_gyro_2_asax = calc_gyro2_asa_2_float(twi1_m_data[0]);
    3532:	c3 e7       	ldi	r28, 0x73	; 115
    3534:	d7 e2       	ldi	r29, 0x27	; 39
    3536:	68 81       	ld	r22, Y
    3538:	06 2e       	mov	r0, r22
    353a:	00 0c       	add	r0, r0
    353c:	77 0b       	sbc	r23, r23
    353e:	60 58       	subi	r22, 0x80	; 128
    3540:	7f 4f       	sbci	r23, 0xFF	; 255
    3542:	07 2e       	mov	r0, r23
    3544:	00 0c       	add	r0, r0
    3546:	88 0b       	sbc	r24, r24
    3548:	99 0b       	sbc	r25, r25
    354a:	0e 94 74 4c 	call	0x98e8	; 0x98e8 <__floatsisf>
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	40 e8       	ldi	r20, 0x80	; 128
    3554:	5b e3       	ldi	r21, 0x3B	; 59
    3556:	0e 94 00 4d 	call	0x9a00	; 0x9a00 <__mulsf3>
    355a:	60 93 27 28 	sts	0x2827, r22	; 0x802827 <g_twi1_gyro_2_asax>
    355e:	70 93 28 28 	sts	0x2828, r23	; 0x802828 <g_twi1_gyro_2_asax+0x1>
    3562:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <g_twi1_gyro_2_asax+0x2>
    3566:	90 93 2a 28 	sts	0x282A, r25	; 0x80282a <g_twi1_gyro_2_asax+0x3>
		g_twi1_gyro_2_asay = calc_gyro2_asa_2_float(twi1_m_data[1]);
    356a:	69 81       	ldd	r22, Y+1	; 0x01
    356c:	06 2e       	mov	r0, r22
    356e:	00 0c       	add	r0, r0
    3570:	77 0b       	sbc	r23, r23
    3572:	60 58       	subi	r22, 0x80	; 128
    3574:	7f 4f       	sbci	r23, 0xFF	; 255
    3576:	07 2e       	mov	r0, r23
    3578:	00 0c       	add	r0, r0
    357a:	88 0b       	sbc	r24, r24
    357c:	99 0b       	sbc	r25, r25
    357e:	0e 94 74 4c 	call	0x98e8	; 0x98e8 <__floatsisf>
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e8       	ldi	r20, 0x80	; 128
    3588:	5b e3       	ldi	r21, 0x3B	; 59
    358a:	0e 94 00 4d 	call	0x9a00	; 0x9a00 <__mulsf3>
    358e:	60 93 23 28 	sts	0x2823, r22	; 0x802823 <g_twi1_gyro_2_asay>
    3592:	70 93 24 28 	sts	0x2824, r23	; 0x802824 <g_twi1_gyro_2_asay+0x1>
    3596:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <g_twi1_gyro_2_asay+0x2>
    359a:	90 93 26 28 	sts	0x2826, r25	; 0x802826 <g_twi1_gyro_2_asay+0x3>
		g_twi1_gyro_2_asaz = calc_gyro2_asa_2_float(twi1_m_data[2]);
    359e:	6a 81       	ldd	r22, Y+2	; 0x02
    35a0:	06 2e       	mov	r0, r22
    35a2:	00 0c       	add	r0, r0
    35a4:	77 0b       	sbc	r23, r23
    35a6:	60 58       	subi	r22, 0x80	; 128
    35a8:	7f 4f       	sbci	r23, 0xFF	; 255
    35aa:	07 2e       	mov	r0, r23
    35ac:	00 0c       	add	r0, r0
    35ae:	88 0b       	sbc	r24, r24
    35b0:	99 0b       	sbc	r25, r25
    35b2:	0e 94 74 4c 	call	0x98e8	; 0x98e8 <__floatsisf>
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	40 e8       	ldi	r20, 0x80	; 128
    35bc:	5b e3       	ldi	r21, 0x3B	; 59
    35be:	0e 94 00 4d 	call	0x9a00	; 0x9a00 <__mulsf3>
    35c2:	60 93 1f 28 	sts	0x281F, r22	; 0x80281f <g_twi1_gyro_2_asaz>
    35c6:	70 93 20 28 	sts	0x2820, r23	; 0x802820 <g_twi1_gyro_2_asaz+0x1>
    35ca:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <g_twi1_gyro_2_asaz+0x2>
    35ce:	90 93 22 28 	sts	0x2822, r25	; 0x802822 <g_twi1_gyro_2_asaz+0x3>

		/* Magnetometer: mode change via power-down mode */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    35d2:	ef e1       	ldi	r30, 0x1F	; 31
    35d4:	f0 e2       	ldi	r31, 0x20	; 32
    35d6:	8c e0       	ldi	r24, 0x0C	; 12
    35d8:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_CNTL1;
    35da:	8a e0       	ldi	r24, 0x0A	; 10
    35dc:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	84 83       	std	Z+4, r24	; 0x04
    35e4:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_CNTL1__MODE_16B_POWER_DOWN;
    35e6:	20 e1       	ldi	r18, 0x10	; 16
    35e8:	28 83       	st	Y, r18
		twi1_packet.length = 1;
    35ea:	80 87       	std	Z+8, r24	; 0x08
    35ec:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    35ee:	40 e0       	ldi	r20, 0x00	; 0
    35f0:	bf 01       	movw	r22, r30
    35f2:	80 ea       	ldi	r24, 0xA0	; 160
    35f4:	94 e0       	ldi	r25, 0x04	; 4
    35f6:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    35fa:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    35fc:	81 11       	cpse	r24, r1
			break;
		}
		delay_ms(10);
    35fe:	9a c0       	rjmp	.+308    	; 0x3734 <twi_start+0x55c>
    3600:	61 e5       	ldi	r22, 0x51	; 81
    3602:	73 ec       	ldi	r23, 0xC3	; 195
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	90 e0       	ldi	r25, 0x00	; 0

		/* Magnetometer: mode change for 16bit and run all axis at 8 Hz */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3608:	a9 db       	rcall	.-2222   	; 0x2d5c <__portable_avr_delay_cycles>
    360a:	ef e1       	ldi	r30, 0x1F	; 31
    360c:	f0 e2       	ldi	r31, 0x20	; 32
    360e:	8c e0       	ldi	r24, 0x0C	; 12
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_CNTL1;
    3610:	80 83       	st	Z, r24
    3612:	8a e0       	ldi	r24, 0x0A	; 10
		twi1_packet.addr_length = 1;
    3614:	81 83       	std	Z+1, r24	; 0x01
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_CNTL1__MODE_16B_RUN_8HZ_VAL;
    361c:	95 83       	std	Z+5, r25	; 0x05
    361e:	22 e1       	ldi	r18, 0x12	; 18
    3620:	20 93 73 27 	sts	0x2773, r18	; 0x802773 <twi1_m_data>
		twi1_packet.length = 1;
    3624:	80 87       	std	Z+8, r24	; 0x08
    3626:	91 87       	std	Z+9, r25	; 0x09
    3628:	40 e0       	ldi	r20, 0x00	; 0
    362a:	bf 01       	movw	r22, r30
    362c:	80 ea       	ldi	r24, 0xA0	; 160
    362e:	94 e0       	ldi	r25, 0x04	; 4
    3630:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3634:	c8 2f       	mov	r28, r24
    3636:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: FIFO frequency = 10 Hz */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3638:	7d c0       	rjmp	.+250    	; 0x3734 <twi_start+0x55c>
    363a:	ef e1       	ldi	r30, 0x1F	; 31
    363c:	f0 e2       	ldi	r31, 0x20	; 32
    363e:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_SMPLRT_DIV;
    3640:	80 83       	st	Z, r24
    3642:	89 e1       	ldi	r24, 0x19	; 25
		twi1_packet.addr_length = 1;
    3644:	81 83       	std	Z+1, r24	; 0x01
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = 99;
    364c:	95 83       	std	Z+5, r25	; 0x05
    364e:	23 e6       	ldi	r18, 0x63	; 99
    3650:	20 93 73 27 	sts	0x2773, r18	; 0x802773 <twi1_m_data>
		twi1_packet.length = 1;
    3654:	80 87       	std	Z+8, r24	; 0x08
    3656:	91 87       	std	Z+9, r25	; 0x09
    3658:	40 e0       	ldi	r20, 0x00	; 0
    365a:	bf 01       	movw	r22, r30
    365c:	80 ea       	ldi	r24, 0xA0	; 160
    365e:	94 e0       	ldi	r25, 0x04	; 4
    3660:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3664:	c8 2f       	mov	r28, r24
    3666:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: Bandwidth = 5 Hz, Fs = 1 kHz */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3668:	65 c0       	rjmp	.+202    	; 0x3734 <twi_start+0x55c>
    366a:	ef e1       	ldi	r30, 0x1F	; 31
    366c:	f0 e2       	ldi	r31, 0x20	; 32
    366e:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_CONFIG;
    3670:	80 83       	st	Z, r24
    3672:	8a e1       	ldi	r24, 0x1A	; 26
		twi1_packet.addr_length = 1;
    3674:	81 83       	std	Z+1, r24	; 0x01
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = 6;
    367c:	95 83       	std	Z+5, r25	; 0x05
    367e:	26 e0       	ldi	r18, 0x06	; 6
    3680:	20 93 73 27 	sts	0x2773, r18	; 0x802773 <twi1_m_data>
		twi1_packet.length = 1;
    3684:	80 87       	std	Z+8, r24	; 0x08
    3686:	91 87       	std	Z+9, r25	; 0x09
    3688:	40 e0       	ldi	r20, 0x00	; 0
    368a:	bf 01       	movw	r22, r30
    368c:	80 ea       	ldi	r24, 0xA0	; 160
    368e:	94 e0       	ldi	r25, 0x04	; 4
    3690:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3694:	c8 2f       	mov	r28, r24
    3696:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: Bandwidth = 5 Hz, Fs = 1 kHz */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3698:	4d c0       	rjmp	.+154    	; 0x3734 <twi_start+0x55c>
    369a:	ef e1       	ldi	r30, 0x1F	; 31
    369c:	f0 e2       	ldi	r31, 0x20	; 32
    369e:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_ACCEL_CONFIG2;
    36a0:	80 83       	st	Z, r24
    36a2:	8d e1       	ldi	r24, 0x1D	; 29
		twi1_packet.addr_length = 1;
    36a4:	81 83       	std	Z+1, r24	; 0x01
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = 6;
    36ac:	95 83       	std	Z+5, r25	; 0x05
    36ae:	26 e0       	ldi	r18, 0x06	; 6
    36b0:	20 93 73 27 	sts	0x2773, r18	; 0x802773 <twi1_m_data>
		twi1_packet.length = 1;
    36b4:	80 87       	std	Z+8, r24	; 0x08
    36b6:	91 87       	std	Z+9, r25	; 0x09
    36b8:	40 e0       	ldi	r20, 0x00	; 0
    36ba:	bf 01       	movw	r22, r30
    36bc:	80 ea       	ldi	r24, 0xA0	; 160
    36be:	94 e0       	ldi	r25, 0x04	; 4
    36c0:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    36c4:	c8 2f       	mov	r28, r24
    36c6:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: Wake On Motion interrupt = 0.1 g (1 LSB = 4 mg) */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    36c8:	35 c0       	rjmp	.+106    	; 0x3734 <twi_start+0x55c>
    36ca:	ef e1       	ldi	r30, 0x1F	; 31
    36cc:	f0 e2       	ldi	r31, 0x20	; 32
    36ce:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_WOM_THR;
    36d0:	80 83       	st	Z, r24
    36d2:	8f e1       	ldi	r24, 0x1F	; 31
		twi1_packet.addr_length = 1;
    36d4:	81 83       	std	Z+1, r24	; 0x01
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = 25;
    36dc:	95 83       	std	Z+5, r25	; 0x05
    36de:	29 e1       	ldi	r18, 0x19	; 25
    36e0:	20 93 73 27 	sts	0x2773, r18	; 0x802773 <twi1_m_data>
		twi1_packet.length = 1;
    36e4:	80 87       	std	Z+8, r24	; 0x08
    36e6:	91 87       	std	Z+9, r25	; 0x09
    36e8:	40 e0       	ldi	r20, 0x00	; 0
    36ea:	bf 01       	movw	r22, r30
    36ec:	80 ea       	ldi	r24, 0xA0	; 160
    36ee:	94 e0       	ldi	r25, 0x04	; 4
    36f0:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    36f4:	c8 2f       	mov	r28, r24
    36f6:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: RESET all internal data paths */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    36f8:	1d c0       	rjmp	.+58     	; 0x3734 <twi_start+0x55c>
    36fa:	ef e1       	ldi	r30, 0x1F	; 31
    36fc:	f0 e2       	ldi	r31, 0x20	; 32
    36fe:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_USER_CTRL;
    3700:	80 83       	st	Z, r24
    3702:	8a e6       	ldi	r24, 0x6A	; 106
		twi1_packet.addr_length = 1;
    3704:	81 83       	std	Z+1, r24	; 0x01
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_USER_CTRL__SIG_COND_RST;  // | TWI1_SLAVE_GYRO_DTA_1_USER_CTRL__FIFO_EN;
    370c:	95 83       	std	Z+5, r25	; 0x05
    370e:	21 e0       	ldi	r18, 0x01	; 1
    3710:	20 93 73 27 	sts	0x2773, r18	; 0x802773 <twi1_m_data>
		twi1_packet.length = 1;
    3714:	80 87       	std	Z+8, r24	; 0x08
    3716:	91 87       	std	Z+9, r25	; 0x09
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	bf 01       	movw	r22, r30
    371c:	80 ea       	ldi	r24, 0xA0	; 160
    371e:	94 e0       	ldi	r25, 0x04	; 4
    3720:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3724:	c8 2f       	mov	r28, r24
    3726:	81 11       	cpse	r24, r1
			break;
		}

		printf("TWI-onboard:  INIT success.\r\n");
    3728:	05 c0       	rjmp	.+10     	; 0x3734 <twi_start+0x55c>
    372a:	85 ea       	ldi	r24, 0xA5	; 165
    372c:	91 e2       	ldi	r25, 0x21	; 33
    372e:	0e 94 c9 4d 	call	0x9b92	; 0x9b92 <puts>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    3732:	10 c0       	rjmp	.+32     	; 0x3754 <twi_start+0x57c>
    3734:	8c 2f       	mov	r24, r28
    3736:	0c 2e       	mov	r0, r28
    3738:	00 0c       	add	r0, r0
    373a:	99 0b       	sbc	r25, r25
    373c:	9f 93       	push	r25
    373e:	cf 93       	push	r28
    3740:	82 ec       	ldi	r24, 0xC2	; 194
    3742:	91 e2       	ldi	r25, 0x21	; 33
    3744:	9f 93       	push	r25
    3746:	8f 93       	push	r24
    3748:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <printf>
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0

static void init_twi1_baro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Baro MS560702BA03-50 - I2C address: 0x%02X\r\n", TWI1_SLAVE_BARO_ADDR);
    3752:	0f 90       	pop	r0
    3754:	1f 92       	push	r1
    3756:	c6 e7       	ldi	r28, 0x76	; 118
    3758:	cf 93       	push	r28
    375a:	84 ea       	ldi	r24, 0xA4	; 164
    375c:	92 e2       	ldi	r25, 0x22	; 34
    375e:	9f 93       	push	r25
    3760:	8f 93       	push	r24
    3762:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <printf>

	do {
		twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    3766:	ef e1       	ldi	r30, 0x1F	; 31
    3768:	f0 e2       	ldi	r31, 0x20	; 32
		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_RESET;
    376a:	c0 83       	st	Z, r28
    376c:	8e e1       	ldi	r24, 0x1E	; 30
		twi1_packet.addr_length = 1;
    376e:	81 83       	std	Z+1, r24	; 0x01
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	84 83       	std	Z+4, r24	; 0x04
		twi1_packet.length = 0;
    3776:	95 83       	std	Z+5, r25	; 0x05
    3778:	10 86       	std	Z+8, r1	; 0x08
    377a:	11 86       	std	Z+9, r1	; 0x09
    377c:	40 e0       	ldi	r20, 0x00	; 0
    377e:	bf 01       	movw	r22, r30
    3780:	80 ea       	ldi	r24, 0xA0	; 160
    3782:	94 e0       	ldi	r25, 0x04	; 4
    3784:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3788:	c8 2f       	mov	r28, r24
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
			break;
		}
		delay_ms(3);
    3792:	81 11       	cpse	r24, r1
    3794:	8f c0       	rjmp	.+286    	; 0x38b4 <twi_start+0x6dc>
    3796:	68 e9       	ldi	r22, 0x98	; 152
    3798:	7a e3       	ldi	r23, 0x3A	; 58
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	90 e0       	ldi	r25, 0x00	; 0

		twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    379e:	de da       	rcall	.-2628   	; 0x2d5c <__portable_avr_delay_cycles>
    37a0:	ef e1       	ldi	r30, 0x1F	; 31
    37a2:	f0 e2       	ldi	r31, 0x20	; 32
    37a4:	86 e7       	ldi	r24, 0x76	; 118
		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_VERSION;
    37a6:	80 83       	st	Z, r24
    37a8:	8e ea       	ldi	r24, 0xAE	; 174
		twi1_packet.addr_length = 1;
    37aa:	81 83       	std	Z+1, r24	; 0x01
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	84 83       	std	Z+4, r24	; 0x04
		twi1_packet.length = 2;
    37b2:	95 83       	std	Z+5, r25	; 0x05
    37b4:	82 e0       	ldi	r24, 0x02	; 2
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	80 87       	std	Z+8, r24	; 0x08
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    37ba:	91 87       	std	Z+9, r25	; 0x09
    37bc:	41 e0       	ldi	r20, 0x01	; 1
    37be:	bf 01       	movw	r22, r30
    37c0:	80 ea       	ldi	r24, 0xA0	; 160
    37c2:	94 e0       	ldi	r25, 0x04	; 4
    37c4:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    37c8:	c8 2f       	mov	r28, r24
    37ca:	88 23       	and	r24, r24
			printf("TWI-onboard:  BAD reading serial/CRC word. (sc=%d)\r\n", sc);
    37cc:	89 f0       	breq	.+34     	; 0x37f0 <twi_start+0x618>
    37ce:	8c 2f       	mov	r24, r28
    37d0:	0c 2e       	mov	r0, r28
    37d2:	00 0c       	add	r0, r0
    37d4:	99 0b       	sbc	r25, r25
    37d6:	9f 93       	push	r25
    37d8:	cf 93       	push	r28
    37da:	80 ee       	ldi	r24, 0xE0	; 224
    37dc:	92 e2       	ldi	r25, 0x22	; 34
    37de:	9f 93       	push	r25
    37e0:	8f 93       	push	r24
    37e2:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <printf>
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	0f 90       	pop	r0
    37ec:	0f 90       	pop	r0
			break;
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
    37ee:	62 c0       	rjmp	.+196    	; 0x38b4 <twi_start+0x6dc>
    37f0:	e3 e7       	ldi	r30, 0x73	; 115
    37f2:	f7 e2       	ldi	r31, 0x27	; 39
    37f4:	80 81       	ld	r24, Z
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	98 2f       	mov	r25, r24
    37fa:	88 27       	eor	r24, r24
    37fc:	21 81       	ldd	r18, Z+1	; 0x01
    37fe:	82 2b       	or	r24, r18
    3800:	92 95       	swap	r25
    3802:	82 95       	swap	r24
    3804:	8f 70       	andi	r24, 0x0F	; 15
    3806:	89 27       	eor	r24, r25
    3808:	9f 70       	andi	r25, 0x0F	; 15
    380a:	89 27       	eor	r24, r25
    380c:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <g_twi1_baro_version>
    3810:	90 93 1d 28 	sts	0x281D, r25	; 0x80281d <g_twi1_baro_version+0x1>
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);
    3814:	9f 93       	push	r25
    3816:	8f 93       	push	r24
    3818:	85 e1       	ldi	r24, 0x15	; 21
    381a:	93 e2       	ldi	r25, 0x23	; 35
    381c:	9f 93       	push	r25
    381e:	8f 93       	push	r24
    3820:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <printf>
    3824:	0f 2e       	mov	r0, r31
    3826:	fe e0       	ldi	r31, 0x0E	; 14
    3828:	ef 2e       	mov	r14, r31
    382a:	f8 e2       	ldi	r31, 0x28	; 40
    382c:	ff 2e       	mov	r15, r31
    382e:	f0 2d       	mov	r31, r0
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
    3836:	0f 90       	pop	r0
    3838:	88 24       	eor	r8, r8
    383a:	83 94       	inc	r8
			twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    383c:	91 2c       	mov	r9, r1
    383e:	cf e1       	ldi	r28, 0x1F	; 31
    3840:	d0 e2       	ldi	r29, 0x20	; 32
    3842:	0f 2e       	mov	r0, r31
    3844:	f6 e7       	ldi	r31, 0x76	; 118
    3846:	7f 2e       	mov	r7, r31
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
			twi1_packet.addr_length = 1;
    3848:	f0 2d       	mov	r31, r0
    384a:	aa 24       	eor	r10, r10
    384c:	a3 94       	inc	r10
			twi1_packet.length = 2;
    384e:	b1 2c       	mov	r11, r1
    3850:	68 94       	set
    3852:	cc 24       	eor	r12, r12
    3854:	c1 f8       	bld	r12, 1
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc != STATUS_OK) {
				//printf("TWI-onboard:  BAD reading PROM address %d. (sc=%d)\r\n", adr, sc);
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    3856:	d1 2c       	mov	r13, r1
    3858:	03 e7       	ldi	r16, 0x73	; 115
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
			twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    385a:	17 e2       	ldi	r17, 0x27	; 39
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
    385c:	78 82       	st	Y, r7
    385e:	c4 01       	movw	r24, r8
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	80 6a       	ori	r24, 0xA0	; 160
			twi1_packet.addr_length = 1;
    3866:	89 83       	std	Y+1, r24	; 0x01
    3868:	ac 82       	std	Y+4, r10	; 0x04
			twi1_packet.length = 2;
    386a:	bd 82       	std	Y+5, r11	; 0x05
    386c:	c8 86       	std	Y+8, r12	; 0x08
    386e:	d9 86       	std	Y+9, r13	; 0x09
    3870:	41 e0       	ldi	r20, 0x01	; 1
    3872:	be 01       	movw	r22, r28
    3874:	80 ea       	ldi	r24, 0xA0	; 160
    3876:	94 e0       	ldi	r25, 0x04	; 4
    3878:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc != STATUS_OK) {
    387c:	81 11       	cpse	r24, r1
				//printf("TWI-onboard:  BAD reading PROM address %d. (sc=%d)\r\n", adr, sc);
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    387e:	12 c0       	rjmp	.+36     	; 0x38a4 <twi_start+0x6cc>
    3880:	f8 01       	movw	r30, r16
    3882:	80 81       	ld	r24, Z
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	98 2f       	mov	r25, r24
    3888:	88 27       	eor	r24, r24
    388a:	21 81       	ldd	r18, Z+1	; 0x01
    388c:	82 2b       	or	r24, r18
    388e:	f7 01       	movw	r30, r14
    3890:	81 93       	st	Z+, r24
    3892:	91 93       	st	Z+, r25
			break;
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
    3894:	7f 01       	movw	r14, r30
    3896:	ff ef       	ldi	r31, 0xFF	; 255
    3898:	8f 1a       	sub	r8, r31
    389a:	9f 0a       	sbc	r9, r31
    389c:	88 e0       	ldi	r24, 0x08	; 8
    389e:	88 16       	cp	r8, r24
    38a0:	91 04       	cpc	r9, r1
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
		}

		g_twi1_baro_valid = true;
    38a2:	e1 f6       	brne	.-72     	; 0x385c <twi_start+0x684>
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	80 93 1e 28 	sts	0x281E, r24	; 0x80281e <g_twi1_baro_valid>
		printf("TWI-onboard:  INIT success.\r\n");
    38aa:	85 ea       	ldi	r24, 0xA5	; 165
    38ac:	91 e2       	ldi	r25, 0x21	; 33
    38ae:	0e 94 c9 4d 	call	0x9b92	; 0x9b92 <puts>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    38b2:	10 c0       	rjmp	.+32     	; 0x38d4 <twi_start+0x6fc>
    38b4:	8c 2f       	mov	r24, r28
    38b6:	0c 2e       	mov	r0, r28
    38b8:	00 0c       	add	r0, r0
    38ba:	99 0b       	sbc	r25, r25
    38bc:	9f 93       	push	r25
    38be:	cf 93       	push	r28
    38c0:	82 ec       	ldi	r24, 0xC2	; 194
    38c2:	91 e2       	ldi	r25, 0x21	; 33
    38c4:	9f 93       	push	r25
    38c6:	8f 93       	push	r24
    38c8:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <printf>
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	0f 90       	pop	r0
	init_twi1_gyro();

	/* Device Baro MS560702BA03-50 - I2C address: 0x76 */
	init_twi1_baro();

	printf("-----------\r\n\r\n");
    38d2:	0f 90       	pop	r0
    38d4:	8b e4       	ldi	r24, 0x4B	; 75
    38d6:	93 e2       	ldi	r25, 0x23	; 35
	#endif

	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
    38d8:	0e 94 c9 4d 	call	0x9b92	; 0x9b92 <puts>
    38dc:	61 ed       	ldi	r22, 0xD1	; 209
    38de:	72 e1       	ldi	r23, 0x12	; 18
    38e0:	83 e1       	ldi	r24, 0x13	; 19
    38e2:	90 e0       	ldi	r25, 0x00	; 0

/* TWI2 - LCD Port */
static void start_twi2_lcd(void)
{
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
    38e4:	3b da       	rcall	.-2954   	; 0x2d5c <__portable_avr_delay_cycles>
    38e6:	eb e0       	ldi	r30, 0x0B	; 11
    38e8:	f0 e2       	ldi	r31, 0x20	; 32
    38ea:	81 e0       	ldi	r24, 0x01	; 1
	twi2_packet.addr_length = 1;
    38ec:	81 83       	std	Z+1, r24	; 0x01
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	84 83       	std	Z+4, r24	; 0x04
	twi2_packet.length = 1;
    38f4:	95 83       	std	Z+5, r25	; 0x05
    38f6:	80 87       	std	Z+8, r24	; 0x08
    38f8:	91 87       	std	Z+9, r25	; 0x09
    38fa:	41 e0       	ldi	r20, 0x01	; 1
    38fc:	bf 01       	movw	r22, r30
    38fe:	80 e8       	ldi	r24, 0x80	; 128
    3900:	94 e0       	ldi	r25, 0x04	; 4
    3902:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
    3906:	80 91 6b 27 	lds	r24, 0x276B	; 0x80276b <twi2_m_data>
    390a:	80 93 f1 27 	sts	0x27F1, r24	; 0x8027f1 <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
    390e:	81 31       	cpi	r24, 0x11	; 17
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
    3910:	78 f1       	brcs	.+94     	; 0x3970 <twi_start+0x798>
    3912:	cb e0       	ldi	r28, 0x0B	; 11
    3914:	d0 e2       	ldi	r29, 0x20	; 32
    3916:	82 e0       	ldi	r24, 0x02	; 2
		twi2_m_data[0] = 0x10;
    3918:	89 83       	std	Y+1, r24	; 0x01
    391a:	0f 2e       	mov	r0, r31
    391c:	fb e6       	ldi	r31, 0x6B	; 107
    391e:	ef 2e       	mov	r14, r31
    3920:	f7 e2       	ldi	r31, 0x27	; 39
    3922:	ff 2e       	mov	r15, r31
    3924:	f0 2d       	mov	r31, r0
    3926:	80 e1       	ldi	r24, 0x10	; 16
    3928:	f7 01       	movw	r30, r14
		twi2_packet.length = 1;
    392a:	80 83       	st	Z, r24
    392c:	01 e0       	ldi	r16, 0x01	; 1
    392e:	10 e0       	ldi	r17, 0x00	; 0
    3930:	08 87       	std	Y+8, r16	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    3932:	19 87       	std	Y+9, r17	; 0x09
    3934:	40 e0       	ldi	r20, 0x00	; 0
    3936:	be 01       	movw	r22, r28
    3938:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    393a:	94 e0       	ldi	r25, 0x04	; 4
    393c:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    3940:	65 e0       	ldi	r22, 0x05	; 5
    3942:	70 e0       	ldi	r23, 0x00	; 0
    3944:	80 e0       	ldi	r24, 0x00	; 0

		twi2_waitUntilReady();
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	09 da       	rcall	.-3054   	; 0x2d5c <__portable_avr_delay_cycles>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
    394a:	13 da       	rcall	.-3034   	; 0x2d72 <twi2_waitUntilReady>
    394c:	84 e1       	ldi	r24, 0x14	; 20
		twi2_m_data[0] = GFX_PIXEL_SET;
    394e:	89 83       	std	Y+1, r24	; 0x01
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	f7 01       	movw	r30, r14
		twi2_packet.length = 1;
    3954:	80 83       	st	Z, r24
    3956:	08 87       	std	Y+8, r16	; 0x08
    3958:	19 87       	std	Y+9, r17	; 0x09
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	be 01       	movw	r22, r28
    395e:	80 e8       	ldi	r24, 0x80	; 128
    3960:	94 e0       	ldi	r25, 0x04	; 4
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3962:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
    3966:	65 e0       	ldi	r22, 0x05	; 5
    3968:	70 e0       	ldi	r23, 0x00	; 0
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	90 e0       	ldi	r25, 0x00	; 0
	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
	start_twi2_lcd();
}
    396e:	f6 d9       	rcall	.-3092   	; 0x2d5c <__portable_avr_delay_cycles>
    3970:	df 91       	pop	r29
    3972:	cf 91       	pop	r28
    3974:	1f 91       	pop	r17
    3976:	0f 91       	pop	r16
    3978:	ff 90       	pop	r15
    397a:	ef 90       	pop	r14
    397c:	df 90       	pop	r13
    397e:	cf 90       	pop	r12
    3980:	bf 90       	pop	r11
    3982:	af 90       	pop	r10
    3984:	9f 90       	pop	r9
    3986:	8f 90       	pop	r8
    3988:	7f 90       	pop	r7
    398a:	08 95       	ret

0000398c <isr_10ms_twi1_onboard>:
	}
}

/* 10ms TWI1 - Gyro device */
void isr_10ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    398c:	08 95       	ret

0000398e <isr_500ms_twi1_onboard>:
}

/* 500ms TWI1 - Baro, Hygro devices */
void isr_500ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    398e:	cf 92       	push	r12
    3990:	df 92       	push	r13
    3992:	ef 92       	push	r14
    3994:	ff 92       	push	r15
    3996:	6b 01       	movw	r12, r22
    3998:	7c 01       	movw	r14, r24
	if (g_twi1_hygro_valid) {
    399a:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <g_twi1_hygro_valid>
    399e:	88 23       	and	r24, r24
    39a0:	69 f1       	breq	.+90     	; 0x39fc <isr_500ms_twi1_onboard+0x6e>
	if (!sync) {
		return;
	}

	/* Read cyclic measurement data */
	twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    39a2:	ef e1       	ldi	r30, 0x1F	; 31
    39a4:	f0 e2       	ldi	r31, 0x20	; 32
    39a6:	84 e4       	ldi	r24, 0x44	; 68
    39a8:	80 83       	st	Z, r24
	twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_FETCH_DATA_HI;
    39aa:	80 ee       	ldi	r24, 0xE0	; 224
    39ac:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_FETCH_DATA_LO;
    39ae:	12 82       	std	Z+2, r1	; 0x02
	twi1_packet.addr_length = 2;
    39b0:	82 e0       	ldi	r24, 0x02	; 2
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	84 83       	std	Z+4, r24	; 0x04
    39b6:	95 83       	std	Z+5, r25	; 0x05
	twi1_packet.length = 5;
    39b8:	85 e0       	ldi	r24, 0x05	; 5
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	80 87       	std	Z+8, r24	; 0x08
    39be:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    39c0:	41 e0       	ldi	r20, 0x01	; 1
    39c2:	bf 01       	movw	r22, r30
    39c4:	80 ea       	ldi	r24, 0xA0	; 160
    39c6:	94 e0       	ldi	r25, 0x04	; 4
    39c8:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
	status_code_t sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    39cc:	81 11       	cpse	r24, r1
    39ce:	16 c0       	rjmp	.+44     	; 0x39fc <isr_500ms_twi1_onboard+0x6e>
		g_twi1_hygro_S_T	= ((uint16_t)twi1_m_data[0] << 8) | twi1_m_data[1];
    39d0:	e3 e7       	ldi	r30, 0x73	; 115
    39d2:	f7 e2       	ldi	r31, 0x27	; 39
    39d4:	80 81       	ld	r24, Z
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	98 2f       	mov	r25, r24
    39da:	88 27       	eor	r24, r24
    39dc:	21 81       	ldd	r18, Z+1	; 0x01
    39de:	82 2b       	or	r24, r18
    39e0:	80 93 f8 27 	sts	0x27F8, r24	; 0x8027f8 <g_twi1_hygro_S_T>
    39e4:	90 93 f9 27 	sts	0x27F9, r25	; 0x8027f9 <g_twi1_hygro_S_T+0x1>
		g_twi1_hygro_S_RH	= ((uint16_t)twi1_m_data[3] << 8) | twi1_m_data[4];
    39e8:	83 81       	ldd	r24, Z+3	; 0x03
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	98 2f       	mov	r25, r24
    39ee:	88 27       	eor	r24, r24
    39f0:	24 81       	ldd	r18, Z+4	; 0x04
    39f2:	82 2b       	or	r24, r18
    39f4:	80 93 f6 27 	sts	0x27F6, r24	; 0x8027f6 <g_twi1_hygro_S_RH>
    39f8:	90 93 f7 27 	sts	0x27F7, r25	; 0x8027f7 <g_twi1_hygro_S_RH+0x1>
{	/* Service time slot */
	if (g_twi1_hygro_valid) {
		isr_twi1_hygro(now, true);
	}

	if (g_twi1_gyro_valid) {
    39fc:	80 91 41 28 	lds	r24, 0x2841	; 0x802841 <g_twi1_gyro_valid>
    3a00:	88 23       	and	r24, r24
    3a02:	09 f4       	brne	.+2      	; 0x3a06 <isr_500ms_twi1_onboard+0x78>
    3a04:	e8 c0       	rjmp	.+464    	; 0x3bd6 <isr_500ms_twi1_onboard+0x248>
	if (!sync) {
		return;
	}

	do {
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3a06:	ef e1       	ldi	r30, 0x1F	; 31
    3a08:	f0 e2       	ldi	r31, 0x20	; 32
    3a0a:	88 e6       	ldi	r24, 0x68	; 104
    3a0c:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_ACCEL_XOUT_H;		// Big endian
    3a0e:	8b e3       	ldi	r24, 0x3B	; 59
    3a10:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	84 83       	std	Z+4, r24	; 0x04
    3a18:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 8;
    3a1a:	88 e0       	ldi	r24, 0x08	; 8
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	80 87       	std	Z+8, r24	; 0x08
    3a20:	91 87       	std	Z+9, r25	; 0x09
    3a22:	41 e0       	ldi	r20, 0x01	; 1
    3a24:	bf 01       	movw	r22, r30
    3a26:	80 ea       	ldi	r24, 0xA0	; 160
    3a28:	94 e0       	ldi	r25, 0x04	; 4
    3a2a:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		status_code_t sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3a2e:	81 11       	cpse	r24, r1
    3a30:	d2 c0       	rjmp	.+420    	; 0x3bd6 <isr_500ms_twi1_onboard+0x248>
			break;
		}
		g_twi1_gyro_accel_x = ((uint16_t)twi1_m_data[0] << 8) | twi1_m_data[1];
    3a32:	e3 e7       	ldi	r30, 0x73	; 115
    3a34:	f7 e2       	ldi	r31, 0x27	; 39
    3a36:	80 81       	ld	r24, Z
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	98 2f       	mov	r25, r24
    3a3c:	88 27       	eor	r24, r24
    3a3e:	21 81       	ldd	r18, Z+1	; 0x01
    3a40:	82 2b       	or	r24, r18
    3a42:	80 93 3b 28 	sts	0x283B, r24	; 0x80283b <g_twi1_gyro_accel_x>
    3a46:	90 93 3c 28 	sts	0x283C, r25	; 0x80283c <g_twi1_gyro_accel_x+0x1>
		g_twi1_gyro_accel_y = ((uint16_t)twi1_m_data[2] << 8) | twi1_m_data[3];
    3a4a:	82 81       	ldd	r24, Z+2	; 0x02
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	98 2f       	mov	r25, r24
    3a50:	88 27       	eor	r24, r24
    3a52:	23 81       	ldd	r18, Z+3	; 0x03
    3a54:	82 2b       	or	r24, r18
    3a56:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <g_twi1_gyro_accel_y>
    3a5a:	90 93 3a 28 	sts	0x283A, r25	; 0x80283a <g_twi1_gyro_accel_y+0x1>
		g_twi1_gyro_accel_z = ((uint16_t)twi1_m_data[4] << 8) | twi1_m_data[5];
    3a5e:	84 81       	ldd	r24, Z+4	; 0x04
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	98 2f       	mov	r25, r24
    3a64:	88 27       	eor	r24, r24
    3a66:	25 81       	ldd	r18, Z+5	; 0x05
    3a68:	82 2b       	or	r24, r18
    3a6a:	80 93 37 28 	sts	0x2837, r24	; 0x802837 <g_twi1_gyro_accel_z>
    3a6e:	90 93 38 28 	sts	0x2838, r25	; 0x802838 <g_twi1_gyro_accel_z+0x1>
		g_twi1_gyro_temp	= ((uint16_t)twi1_m_data[6] << 8) | twi1_m_data[7];
    3a72:	86 81       	ldd	r24, Z+6	; 0x06
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	98 2f       	mov	r25, r24
    3a78:	88 27       	eor	r24, r24
    3a7a:	27 81       	ldd	r18, Z+7	; 0x07
    3a7c:	82 2b       	or	r24, r18
    3a7e:	80 93 3d 28 	sts	0x283D, r24	; 0x80283d <g_twi1_gyro_temp>
    3a82:	90 93 3e 28 	sts	0x283E, r25	; 0x80283e <g_twi1_gyro_temp+0x1>

		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3a86:	ef e1       	ldi	r30, 0x1F	; 31
    3a88:	f0 e2       	ldi	r31, 0x20	; 32
    3a8a:	88 e6       	ldi	r24, 0x68	; 104
    3a8c:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_GYRO_XOUT_H;
    3a8e:	83 e4       	ldi	r24, 0x43	; 67
    3a90:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	84 83       	std	Z+4, r24	; 0x04
    3a98:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 6;
    3a9a:	86 e0       	ldi	r24, 0x06	; 6
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	80 87       	std	Z+8, r24	; 0x08
    3aa0:	91 87       	std	Z+9, r25	; 0x09
    3aa2:	41 e0       	ldi	r20, 0x01	; 1
    3aa4:	bf 01       	movw	r22, r30
    3aa6:	80 ea       	ldi	r24, 0xA0	; 160
    3aa8:	94 e0       	ldi	r25, 0x04	; 4
    3aaa:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3aae:	81 11       	cpse	r24, r1
    3ab0:	92 c0       	rjmp	.+292    	; 0x3bd6 <isr_500ms_twi1_onboard+0x248>
			break;
		}
		g_twi1_gyro_gyro_x	= ((uint16_t)twi1_m_data[0] << 8) | twi1_m_data[1];
    3ab2:	e3 e7       	ldi	r30, 0x73	; 115
    3ab4:	f7 e2       	ldi	r31, 0x27	; 39
    3ab6:	80 81       	ld	r24, Z
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	98 2f       	mov	r25, r24
    3abc:	88 27       	eor	r24, r24
    3abe:	21 81       	ldd	r18, Z+1	; 0x01
    3ac0:	82 2b       	or	r24, r18
    3ac2:	80 93 35 28 	sts	0x2835, r24	; 0x802835 <g_twi1_gyro_gyro_x>
    3ac6:	90 93 36 28 	sts	0x2836, r25	; 0x802836 <g_twi1_gyro_gyro_x+0x1>
		g_twi1_gyro_gyro_y	= ((uint16_t)twi1_m_data[2] << 8) | twi1_m_data[3];
    3aca:	82 81       	ldd	r24, Z+2	; 0x02
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	98 2f       	mov	r25, r24
    3ad0:	88 27       	eor	r24, r24
    3ad2:	23 81       	ldd	r18, Z+3	; 0x03
    3ad4:	82 2b       	or	r24, r18
    3ad6:	80 93 33 28 	sts	0x2833, r24	; 0x802833 <g_twi1_gyro_gyro_y>
    3ada:	90 93 34 28 	sts	0x2834, r25	; 0x802834 <g_twi1_gyro_gyro_y+0x1>
		g_twi1_gyro_gyro_z	= ((uint16_t)twi1_m_data[4] << 8) | twi1_m_data[5];
    3ade:	84 81       	ldd	r24, Z+4	; 0x04
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	98 2f       	mov	r25, r24
    3ae4:	88 27       	eor	r24, r24
    3ae6:	25 81       	ldd	r18, Z+5	; 0x05
    3ae8:	82 2b       	or	r24, r18
    3aea:	80 93 31 28 	sts	0x2831, r24	; 0x802831 <g_twi1_gyro_gyro_z>
    3aee:	90 93 32 28 	sts	0x2832, r25	; 0x802832 <g_twi1_gyro_gyro_z+0x1>

		/* Magnetometer: check if new data is available */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3af2:	ef e1       	ldi	r30, 0x1F	; 31
    3af4:	f0 e2       	ldi	r31, 0x20	; 32
    3af6:	8c e0       	ldi	r24, 0x0C	; 12
    3af8:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_ST1;
    3afa:	82 e0       	ldi	r24, 0x02	; 2
    3afc:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	84 83       	std	Z+4, r24	; 0x04
    3b04:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    3b06:	80 87       	std	Z+8, r24	; 0x08
    3b08:	91 87       	std	Z+9, r25	; 0x09
    3b0a:	41 e0       	ldi	r20, 0x01	; 1
    3b0c:	bf 01       	movw	r22, r30
    3b0e:	80 ea       	ldi	r24, 0xA0	; 160
    3b10:	94 e0       	ldi	r25, 0x04	; 4
    3b12:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3b16:	81 11       	cpse	r24, r1
    3b18:	5e c0       	rjmp	.+188    	; 0x3bd6 <isr_500ms_twi1_onboard+0x248>
			break;
		}
		if (!(twi1_m_data[0] & TWI1_SLAVE_GYRO_DTA_2_ST1__DRDY)) {
    3b1a:	80 91 73 27 	lds	r24, 0x2773	; 0x802773 <twi1_m_data>
    3b1e:	80 ff       	sbrs	r24, 0
    3b20:	5a c0       	rjmp	.+180    	; 0x3bd6 <isr_500ms_twi1_onboard+0x248>
			/* Data of Magnetometer AK8963 not ready yet */
			break;
		}

		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3b22:	ef e1       	ldi	r30, 0x1F	; 31
    3b24:	f0 e2       	ldi	r31, 0x20	; 32
    3b26:	8c e0       	ldi	r24, 0x0C	; 12
    3b28:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_HX_L;			// Little endian
    3b2a:	83 e0       	ldi	r24, 0x03	; 3
    3b2c:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	84 83       	std	Z+4, r24	; 0x04
    3b34:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 6;
    3b36:	86 e0       	ldi	r24, 0x06	; 6
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	80 87       	std	Z+8, r24	; 0x08
    3b3c:	91 87       	std	Z+9, r25	; 0x09
    3b3e:	41 e0       	ldi	r20, 0x01	; 1
    3b40:	bf 01       	movw	r22, r30
    3b42:	80 ea       	ldi	r24, 0xA0	; 160
    3b44:	94 e0       	ldi	r25, 0x04	; 4
    3b46:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3b4a:	81 11       	cpse	r24, r1
    3b4c:	44 c0       	rjmp	.+136    	; 0x3bd6 <isr_500ms_twi1_onboard+0x248>
			break;
		}
		g_twi1_gyro_mag_x	= (int16_t) ((((uint16_t)twi1_m_data[1]) << 8) | twi1_m_data[0]);
    3b4e:	e3 e7       	ldi	r30, 0x73	; 115
    3b50:	f7 e2       	ldi	r31, 0x27	; 39
    3b52:	81 81       	ldd	r24, Z+1	; 0x01
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	98 2f       	mov	r25, r24
    3b58:	88 27       	eor	r24, r24
    3b5a:	20 81       	ld	r18, Z
    3b5c:	82 2b       	or	r24, r18
    3b5e:	80 93 2f 28 	sts	0x282F, r24	; 0x80282f <g_twi1_gyro_mag_x>
    3b62:	90 93 30 28 	sts	0x2830, r25	; 0x802830 <g_twi1_gyro_mag_x+0x1>
		g_twi1_gyro_mag_y	= (int16_t) ((((uint16_t)twi1_m_data[3]) << 8) | twi1_m_data[2]);
    3b66:	83 81       	ldd	r24, Z+3	; 0x03
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	98 2f       	mov	r25, r24
    3b6c:	88 27       	eor	r24, r24
    3b6e:	22 81       	ldd	r18, Z+2	; 0x02
    3b70:	82 2b       	or	r24, r18
    3b72:	80 93 2d 28 	sts	0x282D, r24	; 0x80282d <g_twi1_gyro_mag_y>
    3b76:	90 93 2e 28 	sts	0x282E, r25	; 0x80282e <g_twi1_gyro_mag_y+0x1>
		g_twi1_gyro_mag_z	= (int16_t) ((((uint16_t)twi1_m_data[5]) << 8) | twi1_m_data[4]);
    3b7a:	85 81       	ldd	r24, Z+5	; 0x05
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	98 2f       	mov	r25, r24
    3b80:	88 27       	eor	r24, r24
    3b82:	24 81       	ldd	r18, Z+4	; 0x04
    3b84:	82 2b       	or	r24, r18
    3b86:	80 93 2b 28 	sts	0x282B, r24	; 0x80282b <g_twi1_gyro_mag_z>
    3b8a:	90 93 2c 28 	sts	0x282C, r25	; 0x80282c <g_twi1_gyro_mag_z+0x1>

		/* Magnetometer: check for data validity and release cycle */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3b8e:	ef e1       	ldi	r30, 0x1F	; 31
    3b90:	f0 e2       	ldi	r31, 0x20	; 32
    3b92:	8c e0       	ldi	r24, 0x0C	; 12
    3b94:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_ST2;
    3b96:	89 e0       	ldi	r24, 0x09	; 9
    3b98:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	84 83       	std	Z+4, r24	; 0x04
    3ba0:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    3ba2:	80 87       	std	Z+8, r24	; 0x08
    3ba4:	91 87       	std	Z+9, r25	; 0x09
    3ba6:	41 e0       	ldi	r20, 0x01	; 1
    3ba8:	bf 01       	movw	r22, r30
    3baa:	80 ea       	ldi	r24, 0xA0	; 160
    3bac:	94 e0       	ldi	r25, 0x04	; 4
    3bae:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3bb2:	81 11       	cpse	r24, r1
    3bb4:	10 c0       	rjmp	.+32     	; 0x3bd6 <isr_500ms_twi1_onboard+0x248>
			break;
		}
		if (!(twi1_m_data[0] & TWI1_SLAVE_GYRO_DTA_2_ST2__HOFL)) {
    3bb6:	80 91 73 27 	lds	r24, 0x2773	; 0x802773 <twi1_m_data>
    3bba:	83 fd       	sbrc	r24, 3
    3bbc:	0c c0       	rjmp	.+24     	; 0x3bd6 <isr_500ms_twi1_onboard+0x248>
			/* Data of Magnetometer AK8963 overflowed */
			g_twi1_gyro_mag_z = g_twi1_gyro_mag_y = g_twi1_gyro_mag_x = 0;
    3bbe:	10 92 2f 28 	sts	0x282F, r1	; 0x80282f <g_twi1_gyro_mag_x>
    3bc2:	10 92 30 28 	sts	0x2830, r1	; 0x802830 <g_twi1_gyro_mag_x+0x1>
    3bc6:	10 92 2d 28 	sts	0x282D, r1	; 0x80282d <g_twi1_gyro_mag_y>
    3bca:	10 92 2e 28 	sts	0x282E, r1	; 0x80282e <g_twi1_gyro_mag_y+0x1>
    3bce:	10 92 2b 28 	sts	0x282B, r1	; 0x80282b <g_twi1_gyro_mag_z>
    3bd2:	10 92 2c 28 	sts	0x282C, r1	; 0x80282c <g_twi1_gyro_mag_z+0x1>

	if (g_twi1_gyro_valid) {
		isr_twi1_gyro(now, true);
	}

	if (g_twi1_baro_valid) {
    3bd6:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <g_twi1_baro_valid>
    3bda:	88 23       	and	r24, r24
    3bdc:	21 f0       	breq	.+8      	; 0x3be6 <isr_500ms_twi1_onboard+0x258>
		isr_twi1_baro(now, true);
    3bde:	41 e0       	ldi	r20, 0x01	; 1
    3be0:	c7 01       	movw	r24, r14
    3be2:	b6 01       	movw	r22, r12
    3be4:	0f d9       	rcall	.-3554   	; 0x2e04 <isr_twi1_baro>
	}
}
    3be6:	ff 90       	pop	r15
    3be8:	ef 90       	pop	r14
    3bea:	df 90       	pop	r13
    3bec:	cf 90       	pop	r12
    3bee:	08 95       	ret

00003bf0 <isr_sparetime_twi1_onboard>:

	if (g_twi1_gyro_valid) {
		isr_twi1_gyro(now, false);
	}

	if (g_twi1_baro_valid) {
    3bf0:	20 91 1e 28 	lds	r18, 0x281E	; 0x80281e <g_twi1_baro_valid>
    3bf4:	22 23       	and	r18, r18
    3bf6:	11 f0       	breq	.+4      	; 0x3bfc <isr_sparetime_twi1_onboard+0xc>
		isr_twi1_baro(now, false);
    3bf8:	40 e0       	ldi	r20, 0x00	; 0
    3bfa:	04 c9       	rjmp	.-3576   	; 0x2e04 <isr_twi1_baro>
    3bfc:	08 95       	ret

00003bfe <task_twi1_onboard>:
	}
}

/* TWI1 - onboard devices */
void task_twi1_onboard(uint32_t now)
{
    3bfe:	2f 92       	push	r2
    3c00:	3f 92       	push	r3
    3c02:	4f 92       	push	r4
    3c04:	5f 92       	push	r5
    3c06:	6f 92       	push	r6
    3c08:	7f 92       	push	r7
    3c0a:	8f 92       	push	r8
    3c0c:	9f 92       	push	r9
    3c0e:	af 92       	push	r10
    3c10:	bf 92       	push	r11
    3c12:	cf 92       	push	r12
    3c14:	df 92       	push	r13
    3c16:	ef 92       	push	r14
    3c18:	ff 92       	push	r15
    3c1a:	0f 93       	push	r16
    3c1c:	1f 93       	push	r17
    3c1e:	cf 93       	push	r28
    3c20:	df 93       	push	r29
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
    3c26:	aa 97       	sbiw	r28, 0x2a	; 42
    3c28:	cd bf       	out	0x3d, r28	; 61
    3c2a:	de bf       	out	0x3e, r29	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c2c:	8f b7       	in	r24, 0x3f	; 63
    3c2e:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    3c30:	f8 94       	cli
	return flags;
    3c32:	9e 81       	ldd	r25, Y+6	; 0x06
	irqflags_t flags = cpu_irq_save();
	bool l_twi1_hygro_valid	= g_twi1_hygro_valid;
    3c34:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <g_twi1_hygro_valid>
	bool l_twi1_gyro_valid	= g_twi1_gyro_valid;
	bool l_twi1_baro_valid	= g_twi1_baro_valid;
    3c38:	10 91 1e 28 	lds	r17, 0x281E	; 0x80281e <g_twi1_baro_valid>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c3c:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (l_twi1_hygro_valid) {
    3c3e:	88 23       	and	r24, r24
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <task_twi1_onboard+0x46>
    3c42:	3c c0       	rjmp	.+120    	; 0x3cbc <task_twi1_onboard+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c44:	8f b7       	in	r24, 0x3f	; 63
    3c46:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    3c48:	f8 94       	cli
	return flags;
    3c4a:	8d 81       	ldd	r24, Y+5	; 0x05
{	// Calculations for the presentation layer
	static uint16_t s_twi1_hygro_S_T	= 0UL;
	static uint16_t s_twi1_hygro_S_RH	= 0UL;

	irqflags_t flags = cpu_irq_save();
	uint16_t l_twi1_hygro_S_T	= g_twi1_hygro_S_T;
    3c4c:	20 91 f8 27 	lds	r18, 0x27F8	; 0x8027f8 <g_twi1_hygro_S_T>
    3c50:	30 91 f9 27 	lds	r19, 0x27F9	; 0x8027f9 <g_twi1_hygro_S_T+0x1>
	uint16_t l_twi1_hygro_S_RH	= g_twi1_hygro_S_RH;
    3c54:	e0 90 f6 27 	lds	r14, 0x27F6	; 0x8027f6 <g_twi1_hygro_S_RH>
    3c58:	f0 90 f7 27 	lds	r15, 0x27F7	; 0x8027f7 <g_twi1_hygro_S_RH+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c5c:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	/* Calculate and present Temp value when a different measurement has arrived */
	if (l_twi1_hygro_S_T != s_twi1_hygro_S_T) {
    3c5e:	21 15       	cp	r18, r1
    3c60:	31 05       	cpc	r19, r1
    3c62:	a9 f0       	breq	.+42     	; 0x3c8e <task_twi1_onboard+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c64:	8f b7       	in	r24, 0x3f	; 63
    3c66:	8c 83       	std	Y+4, r24	; 0x04
	cpu_irq_disable();
    3c68:	f8 94       	cli
	return flags;
    3c6a:	0c 81       	ldd	r16, Y+4	; 0x04
		int16_t temp_100 = (int16_t)((((int32_t)l_twi1_hygro_S_T  * 17500) / 0xFFFF) - 4500);

		flags = cpu_irq_save();
		g_twi1_hygro_T_100 = temp_100;
    3c6c:	ac e5       	ldi	r26, 0x5C	; 92
    3c6e:	b4 e4       	ldi	r27, 0x44	; 68
    3c70:	0e 94 c1 4a 	call	0x9582	; 0x9582 <__umulhisi3>
    3c74:	2f ef       	ldi	r18, 0xFF	; 255
    3c76:	3f ef       	ldi	r19, 0xFF	; 255
    3c78:	40 e0       	ldi	r20, 0x00	; 0
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	0e 94 9d 4a 	call	0x953a	; 0x953a <__divmodsi4>
    3c80:	24 59       	subi	r18, 0x94	; 148
    3c82:	31 41       	sbci	r19, 0x11	; 17
    3c84:	20 93 f4 27 	sts	0x27F4, r18	; 0x8027f4 <g_twi1_hygro_T_100>
    3c88:	30 93 f5 27 	sts	0x27F5, r19	; 0x8027f5 <g_twi1_hygro_T_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c8c:	0f bf       	out	0x3f, r16	; 63
		cpu_irq_restore(flags);
	}

	/* Calculate and present Hygro value when a different measurement has arrived */
	if (l_twi1_hygro_S_RH != s_twi1_hygro_S_RH) {
    3c8e:	e1 14       	cp	r14, r1
    3c90:	f1 04       	cpc	r15, r1
    3c92:	a1 f0       	breq	.+40     	; 0x3cbc <task_twi1_onboard+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c94:	8f b7       	in	r24, 0x3f	; 63
    3c96:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
    3c98:	f8 94       	cli
	return flags;
    3c9a:	0b 81       	ldd	r16, Y+3	; 0x03
		int16_t rh_100 = (int16_t)( ((int32_t)l_twi1_hygro_S_RH * 10000) / 0xFFFF);

		flags = cpu_irq_save();
		g_twi1_hygro_RH_100 = rh_100;
    3c9c:	97 01       	movw	r18, r14
    3c9e:	a0 e1       	ldi	r26, 0x10	; 16
    3ca0:	b7 e2       	ldi	r27, 0x27	; 39
    3ca2:	0e 94 c1 4a 	call	0x9582	; 0x9582 <__umulhisi3>
    3ca6:	2f ef       	ldi	r18, 0xFF	; 255
    3ca8:	3f ef       	ldi	r19, 0xFF	; 255
    3caa:	40 e0       	ldi	r20, 0x00	; 0
    3cac:	50 e0       	ldi	r21, 0x00	; 0
    3cae:	0e 94 9d 4a 	call	0x953a	; 0x953a <__divmodsi4>
    3cb2:	20 93 f2 27 	sts	0x27F2, r18	; 0x8027f2 <g_twi1_hygro_RH_100>
    3cb6:	30 93 f3 27 	sts	0x27F3, r19	; 0x8027f3 <g_twi1_hygro_RH_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3cba:	0f bf       	out	0x3f, r16	; 63

	if (l_twi1_gyro_valid) {
		task_twi1_gyro(now);
	}

	if (l_twi1_baro_valid) {
    3cbc:	11 23       	and	r17, r17
    3cbe:	09 f4       	brne	.+2      	; 0x3cc2 <task_twi1_onboard+0xc4>
    3cc0:	25 c2       	rjmp	.+1098   	; 0x410c <task_twi1_onboard+0x50e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3cc2:	8f b7       	in	r24, 0x3f	; 63
    3cc4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3cc6:	f8 94       	cli
	return flags;
    3cc8:	8a 81       	ldd	r24, Y+2	; 0x02
{	// Calculations for the presentation layer
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	irqflags_t flags = cpu_irq_save();
	uint32_t l_twi1_baro_d1 = g_twi1_baro_d1;
    3cca:	20 91 08 28 	lds	r18, 0x2808	; 0x802808 <g_twi1_baro_d1>
    3cce:	30 91 09 28 	lds	r19, 0x2809	; 0x802809 <g_twi1_baro_d1+0x1>
    3cd2:	40 91 0a 28 	lds	r20, 0x280A	; 0x80280a <g_twi1_baro_d1+0x2>
    3cd6:	50 91 0b 28 	lds	r21, 0x280B	; 0x80280b <g_twi1_baro_d1+0x3>
    3cda:	2b 8f       	std	Y+27, r18	; 0x1b
    3cdc:	3c 8f       	std	Y+28, r19	; 0x1c
    3cde:	4d 8f       	std	Y+29, r20	; 0x1d
    3ce0:	5e 8f       	std	Y+30, r21	; 0x1e
	uint32_t l_twi1_baro_d2 = g_twi1_baro_d2;
    3ce2:	40 91 04 28 	lds	r20, 0x2804	; 0x802804 <g_twi1_baro_d2>
    3ce6:	50 91 05 28 	lds	r21, 0x2805	; 0x802805 <g_twi1_baro_d2+0x1>
    3cea:	60 91 06 28 	lds	r22, 0x2806	; 0x802806 <g_twi1_baro_d2+0x2>
    3cee:	70 91 07 28 	lds	r23, 0x2807	; 0x802807 <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3cf2:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	/* Calculate and present Baro and Temp values when a different measurement has arrived */
	if ((l_twi1_baro_d1 != s_twi1_baro_d1) || (l_twi1_baro_d2 != s_twi1_baro_d2)) {
    3cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cf8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3cfa:	be 8d       	ldd	r27, Y+30	; 0x1e
    3cfc:	89 2b       	or	r24, r25
    3cfe:	8a 2b       	or	r24, r26
    3d00:	8b 2b       	or	r24, r27
    3d02:	31 f4       	brne	.+12     	; 0x3d10 <task_twi1_onboard+0x112>
    3d04:	41 15       	cp	r20, r1
    3d06:	51 05       	cpc	r21, r1
    3d08:	61 05       	cpc	r22, r1
    3d0a:	71 05       	cpc	r23, r1
    3d0c:	09 f4       	brne	.+2      	; 0x3d10 <task_twi1_onboard+0x112>
    3d0e:	fe c1       	rjmp	.+1020   	; 0x410c <task_twi1_onboard+0x50e>
		int32_t dT = (int32_t)l_twi1_baro_d2 - ((int32_t)g_twi1_baro_c[5] << 8);
    3d10:	0f 2e       	mov	r0, r31
    3d12:	fc e0       	ldi	r31, 0x0C	; 12
    3d14:	2f 2e       	mov	r2, r31
    3d16:	f8 e2       	ldi	r31, 0x28	; 40
    3d18:	3f 2e       	mov	r3, r31
    3d1a:	f0 2d       	mov	r31, r0
		int32_t temp_p20 = (int32_t)(((int64_t)dT * g_twi1_baro_c[6]) >> 23);
    3d1c:	d1 01       	movw	r26, r2
    3d1e:	1a 96       	adiw	r26, 0x0a	; 10
    3d20:	8d 91       	ld	r24, X+
    3d22:	9c 91       	ld	r25, X
    3d24:	1b 97       	sbiw	r26, 0x0b	; 11
    3d26:	a0 e0       	ldi	r26, 0x00	; 0
    3d28:	b0 e0       	ldi	r27, 0x00	; 0
    3d2a:	ba 2f       	mov	r27, r26
    3d2c:	a9 2f       	mov	r26, r25
    3d2e:	98 2f       	mov	r25, r24
    3d30:	88 27       	eor	r24, r24
    3d32:	2a 01       	movw	r4, r20
    3d34:	3b 01       	movw	r6, r22
    3d36:	48 1a       	sub	r4, r24
    3d38:	59 0a       	sbc	r5, r25
    3d3a:	6a 0a       	sbc	r6, r26
    3d3c:	7b 0a       	sbc	r7, r27
    3d3e:	a3 01       	movw	r20, r6
    3d40:	92 01       	movw	r18, r4
    3d42:	55 0f       	add	r21, r21
    3d44:	22 0b       	sbc	r18, r18
    3d46:	32 2f       	mov	r19, r18
    3d48:	a9 01       	movw	r20, r18
    3d4a:	2f 83       	std	Y+7, r18	; 0x07
    3d4c:	38 87       	std	Y+8, r19	; 0x08
    3d4e:	49 87       	std	Y+9, r20	; 0x09
    3d50:	5a 87       	std	Y+10, r21	; 0x0a
    3d52:	d1 01       	movw	r26, r2
    3d54:	1c 96       	adiw	r26, 0x0c	; 12
    3d56:	4d 91       	ld	r20, X+
    3d58:	5c 91       	ld	r21, X
    3d5a:	1d 97       	sbiw	r26, 0x0d	; 13
    3d5c:	a4 2c       	mov	r10, r4
    3d5e:	b5 2c       	mov	r11, r5
    3d60:	c6 2c       	mov	r12, r6
    3d62:	d7 2c       	mov	r13, r7
    3d64:	ef 80       	ldd	r14, Y+7	; 0x07
    3d66:	fe 2c       	mov	r15, r14
    3d68:	0e 2d       	mov	r16, r14
    3d6a:	1e 2d       	mov	r17, r14
    3d6c:	24 2f       	mov	r18, r20
    3d6e:	35 2f       	mov	r19, r21
    3d70:	40 e0       	ldi	r20, 0x00	; 0
    3d72:	50 e0       	ldi	r21, 0x00	; 0
    3d74:	60 e0       	ldi	r22, 0x00	; 0
    3d76:	70 e0       	ldi	r23, 0x00	; 0
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	0e 94 da 4a 	call	0x95b4	; 0x95b4 <__muldi3>
    3d80:	07 e1       	ldi	r16, 0x17	; 23
    3d82:	0e 94 44 4b 	call	0x9688	; 0x9688 <__ashrdi3>
    3d86:	2f 87       	std	Y+15, r18	; 0x0f
    3d88:	38 8b       	std	Y+16, r19	; 0x10
    3d8a:	49 8b       	std	Y+17, r20	; 0x11
    3d8c:	5a 8b       	std	Y+18, r21	; 0x12
    3d8e:	2f 85       	ldd	r18, Y+15	; 0x0f
    3d90:	38 89       	ldd	r19, Y+16	; 0x10
    3d92:	49 89       	ldd	r20, Y+17	; 0x11
    3d94:	5a 89       	ldd	r21, Y+18	; 0x12
    3d96:	2f a3       	std	Y+39, r18	; 0x27
    3d98:	38 a7       	std	Y+40, r19	; 0x28
    3d9a:	49 a7       	std	Y+41, r20	; 0x29
    3d9c:	5a a7       	std	Y+42, r21	; 0x2a
		int32_t temp = temp_p20 + 2000L;
    3d9e:	ba 01       	movw	r22, r20
    3da0:	a9 01       	movw	r20, r18
    3da2:	40 53       	subi	r20, 0x30	; 48
    3da4:	58 4f       	sbci	r21, 0xF8	; 248
    3da6:	6f 4f       	sbci	r22, 0xFF	; 255
    3da8:	7f 4f       	sbci	r23, 0xFF	; 255
    3daa:	4f 8b       	std	Y+23, r20	; 0x17
    3dac:	58 8f       	std	Y+24, r21	; 0x18
    3dae:	69 8f       	std	Y+25, r22	; 0x19
    3db0:	7a 8f       	std	Y+26, r23	; 0x1a
		int64_t off  = ((int64_t)g_twi1_baro_c[2] << 17) + (((int64_t)g_twi1_baro_c[4] * dT) >> 6);
    3db2:	d1 01       	movw	r26, r2
    3db4:	18 96       	adiw	r26, 0x08	; 8
    3db6:	4d 91       	ld	r20, X+
    3db8:	5c 91       	ld	r21, X
    3dba:	19 97       	sbiw	r26, 0x09	; 9
    3dbc:	fe 2c       	mov	r15, r14
    3dbe:	0e 2d       	mov	r16, r14
    3dc0:	24 2f       	mov	r18, r20
    3dc2:	35 2f       	mov	r19, r21
    3dc4:	40 e0       	ldi	r20, 0x00	; 0
    3dc6:	50 e0       	ldi	r21, 0x00	; 0
    3dc8:	60 e0       	ldi	r22, 0x00	; 0
    3dca:	70 e0       	ldi	r23, 0x00	; 0
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	0e 94 da 4a 	call	0x95b4	; 0x95b4 <__muldi3>
    3dd4:	06 e0       	ldi	r16, 0x06	; 6
    3dd6:	0e 94 44 4b 	call	0x9688	; 0x9688 <__ashrdi3>
    3dda:	2b 8b       	std	Y+19, r18	; 0x13
    3ddc:	3c 8b       	std	Y+20, r19	; 0x14
    3dde:	84 2e       	mov	r8, r20
    3de0:	95 2e       	mov	r9, r21
    3de2:	b6 2f       	mov	r27, r22
    3de4:	a7 2f       	mov	r26, r23
    3de6:	8d 8b       	std	Y+21, r24	; 0x15
    3de8:	9e 8b       	std	Y+22, r25	; 0x16
    3dea:	f1 01       	movw	r30, r2
    3dec:	a4 80       	ldd	r10, Z+4	; 0x04
    3dee:	b5 80       	ldd	r11, Z+5	; 0x05
    3df0:	2a 2d       	mov	r18, r10
    3df2:	3b 2d       	mov	r19, r11
    3df4:	40 e0       	ldi	r20, 0x00	; 0
    3df6:	50 e0       	ldi	r21, 0x00	; 0
    3df8:	60 e0       	ldi	r22, 0x00	; 0
    3dfa:	70 e0       	ldi	r23, 0x00	; 0
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	01 e1       	ldi	r16, 0x11	; 17
    3e02:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__ashldi3>
    3e06:	a2 2e       	mov	r10, r18
    3e08:	b3 2e       	mov	r11, r19
    3e0a:	c4 2e       	mov	r12, r20
    3e0c:	d5 2e       	mov	r13, r21
    3e0e:	e6 2e       	mov	r14, r22
    3e10:	f7 2e       	mov	r15, r23
    3e12:	08 2f       	mov	r16, r24
    3e14:	19 2f       	mov	r17, r25
    3e16:	2b 89       	ldd	r18, Y+19	; 0x13
    3e18:	3c 89       	ldd	r19, Y+20	; 0x14
    3e1a:	48 2d       	mov	r20, r8
    3e1c:	59 2d       	mov	r21, r9
    3e1e:	6b 2f       	mov	r22, r27
    3e20:	7a 2f       	mov	r23, r26
    3e22:	8d 89       	ldd	r24, Y+21	; 0x15
    3e24:	9e 89       	ldd	r25, Y+22	; 0x16
    3e26:	0e 94 62 4b 	call	0x96c4	; 0x96c4 <__adddi3>
    3e2a:	2b 8b       	std	Y+19, r18	; 0x13
    3e2c:	3c 8b       	std	Y+20, r19	; 0x14
    3e2e:	4f 8f       	std	Y+31, r20	; 0x1f
    3e30:	58 a3       	std	Y+32, r21	; 0x20
    3e32:	69 a3       	std	Y+33, r22	; 0x21
    3e34:	7a a3       	std	Y+34, r23	; 0x22
    3e36:	8b a3       	std	Y+35, r24	; 0x23
    3e38:	9c a3       	std	Y+36, r25	; 0x24
		int64_t sens = ((int64_t)g_twi1_baro_c[1] << 16) + (((int64_t)g_twi1_baro_c[3] * dT) >> 7);
    3e3a:	46 81       	ldd	r20, Z+6	; 0x06
    3e3c:	57 81       	ldd	r21, Z+7	; 0x07
    3e3e:	a4 2c       	mov	r10, r4
    3e40:	b5 2c       	mov	r11, r5
    3e42:	c6 2c       	mov	r12, r6
    3e44:	d7 2c       	mov	r13, r7
    3e46:	ef 80       	ldd	r14, Y+7	; 0x07
    3e48:	fe 2c       	mov	r15, r14
    3e4a:	0e 2d       	mov	r16, r14
    3e4c:	1e 2d       	mov	r17, r14
    3e4e:	24 2f       	mov	r18, r20
    3e50:	35 2f       	mov	r19, r21
    3e52:	40 e0       	ldi	r20, 0x00	; 0
    3e54:	50 e0       	ldi	r21, 0x00	; 0
    3e56:	60 e0       	ldi	r22, 0x00	; 0
    3e58:	70 e0       	ldi	r23, 0x00	; 0
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0e 94 da 4a 	call	0x95b4	; 0x95b4 <__muldi3>
    3e62:	07 e0       	ldi	r16, 0x07	; 7
    3e64:	0e 94 44 4b 	call	0x9688	; 0x9688 <__ashrdi3>
    3e68:	2d 8b       	std	Y+21, r18	; 0x15
    3e6a:	3e 8b       	std	Y+22, r19	; 0x16
    3e6c:	84 2e       	mov	r8, r20
    3e6e:	95 2e       	mov	r9, r21
    3e70:	b6 2f       	mov	r27, r22
    3e72:	a7 2f       	mov	r26, r23
    3e74:	8d a3       	std	Y+37, r24	; 0x25
    3e76:	9e a3       	std	Y+38, r25	; 0x26
    3e78:	f1 01       	movw	r30, r2
    3e7a:	a2 80       	ldd	r10, Z+2	; 0x02
    3e7c:	b3 80       	ldd	r11, Z+3	; 0x03
    3e7e:	2a 2d       	mov	r18, r10
    3e80:	3b 2d       	mov	r19, r11
    3e82:	40 e0       	ldi	r20, 0x00	; 0
    3e84:	50 e0       	ldi	r21, 0x00	; 0
    3e86:	60 e0       	ldi	r22, 0x00	; 0
    3e88:	70 e0       	ldi	r23, 0x00	; 0
    3e8a:	80 e0       	ldi	r24, 0x00	; 0
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	00 e1       	ldi	r16, 0x10	; 16
    3e90:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__ashldi3>
    3e94:	a2 2e       	mov	r10, r18
    3e96:	b3 2e       	mov	r11, r19
    3e98:	c4 2e       	mov	r12, r20
    3e9a:	d5 2e       	mov	r13, r21
    3e9c:	e6 2e       	mov	r14, r22
    3e9e:	f7 2e       	mov	r15, r23
    3ea0:	08 2f       	mov	r16, r24
    3ea2:	19 2f       	mov	r17, r25
    3ea4:	2d 89       	ldd	r18, Y+21	; 0x15
    3ea6:	3e 89       	ldd	r19, Y+22	; 0x16
    3ea8:	48 2d       	mov	r20, r8
    3eaa:	59 2d       	mov	r21, r9
    3eac:	6b 2f       	mov	r22, r27
    3eae:	7a 2f       	mov	r23, r26
    3eb0:	8d a1       	ldd	r24, Y+37	; 0x25
    3eb2:	9e a1       	ldd	r25, Y+38	; 0x26
    3eb4:	0e 94 62 4b 	call	0x96c4	; 0x96c4 <__adddi3>
    3eb8:	32 2e       	mov	r3, r18
    3eba:	23 2e       	mov	r2, r19
    3ebc:	4d 8b       	std	Y+21, r20	; 0x15
    3ebe:	5e 8b       	std	Y+22, r21	; 0x16
    3ec0:	6d a3       	std	Y+37, r22	; 0x25
    3ec2:	7e a3       	std	Y+38, r23	; 0x26
    3ec4:	98 2e       	mov	r9, r24
    3ec6:	89 2e       	mov	r8, r25

		/* Low temp and very low temp corrections */
		if (temp < 2000L) {
    3ec8:	2f 89       	ldd	r18, Y+23	; 0x17
    3eca:	38 8d       	ldd	r19, Y+24	; 0x18
    3ecc:	49 8d       	ldd	r20, Y+25	; 0x19
    3ece:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3ed0:	20 3d       	cpi	r18, 0xD0	; 208
    3ed2:	37 40       	sbci	r19, 0x07	; 7
    3ed4:	41 05       	cpc	r20, r1
    3ed6:	51 05       	cpc	r21, r1
    3ed8:	0c f0       	brlt	.+2      	; 0x3edc <task_twi1_onboard+0x2de>
    3eda:	d0 c0       	rjmp	.+416    	; 0x407c <task_twi1_onboard+0x47e>
			int32_t t2 = (int32_t)(((int64_t)dT * (int64_t)dT) >> 31);
    3edc:	a4 2c       	mov	r10, r4
    3ede:	b5 2c       	mov	r11, r5
    3ee0:	c6 2c       	mov	r12, r6
    3ee2:	d7 2c       	mov	r13, r7
    3ee4:	ef 80       	ldd	r14, Y+7	; 0x07
    3ee6:	fe 2c       	mov	r15, r14
    3ee8:	0e 2d       	mov	r16, r14
    3eea:	1e 2d       	mov	r17, r14
    3eec:	24 2d       	mov	r18, r4
    3eee:	35 2d       	mov	r19, r5
    3ef0:	46 2d       	mov	r20, r6
    3ef2:	57 2d       	mov	r21, r7
    3ef4:	60 2f       	mov	r22, r16
    3ef6:	70 2f       	mov	r23, r16
    3ef8:	80 2f       	mov	r24, r16
    3efa:	9e 2d       	mov	r25, r14
    3efc:	0e 94 da 4a 	call	0x95b4	; 0x95b4 <__muldi3>
    3f00:	0f e1       	ldi	r16, 0x1F	; 31
    3f02:	0e 94 44 4b 	call	0x9688	; 0x9688 <__ashrdi3>
    3f06:	2f 83       	std	Y+7, r18	; 0x07
    3f08:	38 87       	std	Y+8, r19	; 0x08
    3f0a:	49 87       	std	Y+9, r20	; 0x09
    3f0c:	5a 87       	std	Y+10, r21	; 0x0a
			int32_t temp_p20_2 = temp_p20 * temp_p20;
    3f0e:	2f 85       	ldd	r18, Y+15	; 0x0f
    3f10:	38 89       	ldd	r19, Y+16	; 0x10
    3f12:	49 89       	ldd	r20, Y+17	; 0x11
    3f14:	5a 89       	ldd	r21, Y+18	; 0x12
    3f16:	ca 01       	movw	r24, r20
    3f18:	b9 01       	movw	r22, r18
    3f1a:	0e 94 45 4a 	call	0x948a	; 0x948a <__mulsi3>
    3f1e:	2b 01       	movw	r4, r22
    3f20:	3c 01       	movw	r6, r24
			int32_t off2 = (61 * temp_p20_2) >> 4;
    3f22:	ad e3       	ldi	r26, 0x3D	; 61
    3f24:	b0 e0       	ldi	r27, 0x00	; 0
    3f26:	9b 01       	movw	r18, r22
    3f28:	ac 01       	movw	r20, r24
    3f2a:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <__muluhisi3>
    3f2e:	7b 01       	movw	r14, r22
    3f30:	8c 01       	movw	r16, r24
    3f32:	68 94       	set
    3f34:	13 f8       	bld	r1, 3
    3f36:	15 95       	asr	r17
    3f38:	07 95       	ror	r16
    3f3a:	f7 94       	ror	r15
    3f3c:	e7 94       	ror	r14
    3f3e:	16 94       	lsr	r1
    3f40:	d1 f7       	brne	.-12     	; 0x3f36 <task_twi1_onboard+0x338>
			int32_t sens2 = temp_p20_2 << 1;
    3f42:	44 0c       	add	r4, r4
    3f44:	55 1c       	adc	r5, r5
    3f46:	66 1c       	adc	r6, r6
    3f48:	77 1c       	adc	r7, r7

			if (temp < -1500L) {
    3f4a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f4c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f4e:	a9 8d       	ldd	r26, Y+25	; 0x19
    3f50:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3f52:	84 32       	cpi	r24, 0x24	; 36
    3f54:	9a 4f       	sbci	r25, 0xFA	; 250
    3f56:	af 4f       	sbci	r26, 0xFF	; 255
    3f58:	bf 4f       	sbci	r27, 0xFF	; 255
    3f5a:	c4 f5       	brge	.+112    	; 0x3fcc <task_twi1_onboard+0x3ce>
				int32_t temp_m15 = temp + 1500L;
    3f5c:	6f a1       	ldd	r22, Y+39	; 0x27
    3f5e:	78 a5       	ldd	r23, Y+40	; 0x28
    3f60:	89 a5       	ldd	r24, Y+41	; 0x29
    3f62:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f64:	64 55       	subi	r22, 0x54	; 84
    3f66:	72 4f       	sbci	r23, 0xF2	; 242
    3f68:	8f 4f       	sbci	r24, 0xFF	; 255
    3f6a:	9f 4f       	sbci	r25, 0xFF	; 255
				int32_t temp_m15_2 = temp_m15 * temp_m15;
    3f6c:	9b 01       	movw	r18, r22
    3f6e:	ac 01       	movw	r20, r24
    3f70:	0e 94 45 4a 	call	0x948a	; 0x948a <__mulsi3>
				off2  += 15 * temp_m15_2;
    3f74:	9b 01       	movw	r18, r22
    3f76:	ac 01       	movw	r20, r24
    3f78:	22 0f       	add	r18, r18
    3f7a:	33 1f       	adc	r19, r19
    3f7c:	44 1f       	adc	r20, r20
    3f7e:	55 1f       	adc	r21, r21
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	82 0f       	add	r24, r18
    3f86:	93 1f       	adc	r25, r19
    3f88:	a4 1f       	adc	r26, r20
    3f8a:	b5 1f       	adc	r27, r21
    3f8c:	5c 01       	movw	r10, r24
    3f8e:	6d 01       	movw	r12, r26
    3f90:	aa 0c       	add	r10, r10
    3f92:	bb 1c       	adc	r11, r11
    3f94:	cc 1c       	adc	r12, r12
    3f96:	dd 1c       	adc	r13, r13
    3f98:	aa 0c       	add	r10, r10
    3f9a:	bb 1c       	adc	r11, r11
    3f9c:	cc 1c       	adc	r12, r12
    3f9e:	dd 1c       	adc	r13, r13
    3fa0:	8a 0d       	add	r24, r10
    3fa2:	9b 1d       	adc	r25, r11
    3fa4:	ac 1d       	adc	r26, r12
    3fa6:	bd 1d       	adc	r27, r13
    3fa8:	e8 0e       	add	r14, r24
    3faa:	f9 1e       	adc	r15, r25
    3fac:	0a 1f       	adc	r16, r26
    3fae:	1b 1f       	adc	r17, r27
				sens2 +=  8 * temp_m15_2;
    3fb0:	da 01       	movw	r26, r20
    3fb2:	c9 01       	movw	r24, r18
    3fb4:	88 0f       	add	r24, r24
    3fb6:	99 1f       	adc	r25, r25
    3fb8:	aa 1f       	adc	r26, r26
    3fba:	bb 1f       	adc	r27, r27
    3fbc:	88 0f       	add	r24, r24
    3fbe:	99 1f       	adc	r25, r25
    3fc0:	aa 1f       	adc	r26, r26
    3fc2:	bb 1f       	adc	r27, r27
    3fc4:	48 0e       	add	r4, r24
    3fc6:	59 1e       	adc	r5, r25
    3fc8:	6a 1e       	adc	r6, r26
    3fca:	7b 1e       	adc	r7, r27
			}
			temp -= t2;
    3fcc:	2f 89       	ldd	r18, Y+23	; 0x17
    3fce:	38 8d       	ldd	r19, Y+24	; 0x18
    3fd0:	49 8d       	ldd	r20, Y+25	; 0x19
    3fd2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    3fd6:	78 85       	ldd	r23, Y+8	; 0x08
    3fd8:	89 85       	ldd	r24, Y+9	; 0x09
    3fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fdc:	26 1b       	sub	r18, r22
    3fde:	37 0b       	sbc	r19, r23
    3fe0:	48 0b       	sbc	r20, r24
    3fe2:	59 0b       	sbc	r21, r25
    3fe4:	2f 8b       	std	Y+23, r18	; 0x17
    3fe6:	38 8f       	std	Y+24, r19	; 0x18
    3fe8:	49 8f       	std	Y+25, r20	; 0x19
    3fea:	5a 8f       	std	Y+26, r21	; 0x1a
			off  -= off2;
    3fec:	d8 01       	movw	r26, r16
    3fee:	c7 01       	movw	r24, r14
    3ff0:	bb 0f       	add	r27, r27
    3ff2:	88 0b       	sbc	r24, r24
    3ff4:	98 2f       	mov	r25, r24
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	8f 83       	std	Y+7, r24	; 0x07
    3ffa:	98 87       	std	Y+8, r25	; 0x08
    3ffc:	a9 87       	std	Y+9, r26	; 0x09
    3ffe:	ba 87       	std	Y+10, r27	; 0x0a
    4000:	2b 89       	ldd	r18, Y+19	; 0x13
    4002:	3c 89       	ldd	r19, Y+20	; 0x14
    4004:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4006:	58 a1       	ldd	r21, Y+32	; 0x20
    4008:	69 a1       	ldd	r22, Y+33	; 0x21
    400a:	7a a1       	ldd	r23, Y+34	; 0x22
    400c:	8b a1       	ldd	r24, Y+35	; 0x23
    400e:	9c a1       	ldd	r25, Y+36	; 0x24
    4010:	ae 2c       	mov	r10, r14
    4012:	bf 2c       	mov	r11, r15
    4014:	c0 2e       	mov	r12, r16
    4016:	d1 2e       	mov	r13, r17
    4018:	ef 80       	ldd	r14, Y+7	; 0x07
    401a:	fe 2c       	mov	r15, r14
    401c:	0e 2d       	mov	r16, r14
    401e:	1e 2d       	mov	r17, r14
    4020:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <__subdi3>
    4024:	2b 8b       	std	Y+19, r18	; 0x13
    4026:	3c 8b       	std	Y+20, r19	; 0x14
    4028:	4f 8f       	std	Y+31, r20	; 0x1f
    402a:	58 a3       	std	Y+32, r21	; 0x20
    402c:	69 a3       	std	Y+33, r22	; 0x21
    402e:	7a a3       	std	Y+34, r23	; 0x22
    4030:	8b a3       	std	Y+35, r24	; 0x23
    4032:	9c a3       	std	Y+36, r25	; 0x24
			sens -= sens2;
    4034:	a3 01       	movw	r20, r6
    4036:	92 01       	movw	r18, r4
    4038:	55 0f       	add	r21, r21
    403a:	22 0b       	sbc	r18, r18
    403c:	32 2f       	mov	r19, r18
    403e:	a9 01       	movw	r20, r18
    4040:	2f 83       	std	Y+7, r18	; 0x07
    4042:	38 87       	std	Y+8, r19	; 0x08
    4044:	49 87       	std	Y+9, r20	; 0x09
    4046:	5a 87       	std	Y+10, r21	; 0x0a
    4048:	23 2d       	mov	r18, r3
    404a:	32 2d       	mov	r19, r2
    404c:	4d 89       	ldd	r20, Y+21	; 0x15
    404e:	5e 89       	ldd	r21, Y+22	; 0x16
    4050:	6d a1       	ldd	r22, Y+37	; 0x25
    4052:	7e a1       	ldd	r23, Y+38	; 0x26
    4054:	89 2d       	mov	r24, r9
    4056:	98 2d       	mov	r25, r8
    4058:	a4 2c       	mov	r10, r4
    405a:	b5 2c       	mov	r11, r5
    405c:	c6 2c       	mov	r12, r6
    405e:	d7 2c       	mov	r13, r7
    4060:	ef 80       	ldd	r14, Y+7	; 0x07
    4062:	fe 2c       	mov	r15, r14
    4064:	0e 2d       	mov	r16, r14
    4066:	1e 2d       	mov	r17, r14
    4068:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <__subdi3>
    406c:	32 2e       	mov	r3, r18
    406e:	23 2e       	mov	r2, r19
    4070:	4d 8b       	std	Y+21, r20	; 0x15
    4072:	5e 8b       	std	Y+22, r21	; 0x16
    4074:	6d a3       	std	Y+37, r22	; 0x25
    4076:	7e a3       	std	Y+38, r23	; 0x26
    4078:	98 2e       	mov	r9, r24
    407a:	89 2e       	mov	r8, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    407c:	8f b7       	in	r24, 0x3f	; 63
    407e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4080:	f8 94       	cli
	return flags;
    4082:	79 80       	ldd	r7, Y+1	; 0x01
		}
		int32_t p = (int32_t)((((l_twi1_baro_d1 * sens) >> 21) - off) >> 15);

		flags = cpu_irq_save();
		g_twi1_baro_temp_100 = temp;
    4084:	4f 89       	ldd	r20, Y+23	; 0x17
    4086:	58 8d       	ldd	r21, Y+24	; 0x18
    4088:	69 8d       	ldd	r22, Y+25	; 0x19
    408a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    408c:	40 93 00 28 	sts	0x2800, r20	; 0x802800 <g_twi1_baro_temp_100>
    4090:	50 93 01 28 	sts	0x2801, r21	; 0x802801 <g_twi1_baro_temp_100+0x1>
    4094:	60 93 02 28 	sts	0x2802, r22	; 0x802802 <g_twi1_baro_temp_100+0x2>
    4098:	70 93 03 28 	sts	0x2803, r23	; 0x802803 <g_twi1_baro_temp_100+0x3>
		g_twi1_baro_p_100    = p;
    409c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    409e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    40a0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    40a2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    40a4:	9a 01       	movw	r18, r20
    40a6:	ab 01       	movw	r20, r22
    40a8:	60 e0       	ldi	r22, 0x00	; 0
    40aa:	70 e0       	ldi	r23, 0x00	; 0
    40ac:	cb 01       	movw	r24, r22
    40ae:	2f 83       	std	Y+7, r18	; 0x07
    40b0:	38 87       	std	Y+8, r19	; 0x08
    40b2:	49 87       	std	Y+9, r20	; 0x09
    40b4:	5a 87       	std	Y+10, r21	; 0x0a
    40b6:	6b 87       	std	Y+11, r22	; 0x0b
    40b8:	7c 87       	std	Y+12, r23	; 0x0c
    40ba:	8d 87       	std	Y+13, r24	; 0x0d
    40bc:	9e 87       	std	Y+14, r25	; 0x0e
    40be:	a3 2c       	mov	r10, r3
    40c0:	b2 2c       	mov	r11, r2
    40c2:	cd 88       	ldd	r12, Y+21	; 0x15
    40c4:	de 88       	ldd	r13, Y+22	; 0x16
    40c6:	ed a0       	ldd	r14, Y+37	; 0x25
    40c8:	fe a0       	ldd	r15, Y+38	; 0x26
    40ca:	09 2d       	mov	r16, r9
    40cc:	18 2d       	mov	r17, r8
    40ce:	60 e0       	ldi	r22, 0x00	; 0
    40d0:	70 e0       	ldi	r23, 0x00	; 0
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	0e 94 da 4a 	call	0x95b4	; 0x95b4 <__muldi3>
    40da:	05 e1       	ldi	r16, 0x15	; 21
    40dc:	0e 94 44 4b 	call	0x9688	; 0x9688 <__ashrdi3>
    40e0:	ab 88       	ldd	r10, Y+19	; 0x13
    40e2:	bc 88       	ldd	r11, Y+20	; 0x14
    40e4:	cf 8c       	ldd	r12, Y+31	; 0x1f
    40e6:	d8 a0       	ldd	r13, Y+32	; 0x20
    40e8:	e9 a0       	ldd	r14, Y+33	; 0x21
    40ea:	fa a0       	ldd	r15, Y+34	; 0x22
    40ec:	0b a1       	ldd	r16, Y+35	; 0x23
    40ee:	1c a1       	ldd	r17, Y+36	; 0x24
    40f0:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <__subdi3>
    40f4:	0f e0       	ldi	r16, 0x0F	; 15
    40f6:	0e 94 44 4b 	call	0x9688	; 0x9688 <__ashrdi3>
    40fa:	20 93 fc 27 	sts	0x27FC, r18	; 0x8027fc <g_twi1_baro_p_100>
    40fe:	30 93 fd 27 	sts	0x27FD, r19	; 0x8027fd <g_twi1_baro_p_100+0x1>
    4102:	40 93 fe 27 	sts	0x27FE, r20	; 0x8027fe <g_twi1_baro_p_100+0x2>
    4106:	50 93 ff 27 	sts	0x27FF, r21	; 0x8027ff <g_twi1_baro_p_100+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    410a:	7f be       	out	0x3f, r7	; 63
	}

	if (l_twi1_baro_valid) {
		task_twi1_baro(now);
	}
}
    410c:	aa 96       	adiw	r28, 0x2a	; 42
    410e:	cd bf       	out	0x3d, r28	; 61
    4110:	de bf       	out	0x3e, r29	; 62
    4112:	df 91       	pop	r29
    4114:	cf 91       	pop	r28
    4116:	1f 91       	pop	r17
    4118:	0f 91       	pop	r16
    411a:	ff 90       	pop	r15
    411c:	ef 90       	pop	r14
    411e:	df 90       	pop	r13
    4120:	cf 90       	pop	r12
    4122:	bf 90       	pop	r11
    4124:	af 90       	pop	r10
    4126:	9f 90       	pop	r9
    4128:	8f 90       	pop	r8
    412a:	7f 90       	pop	r7
    412c:	6f 90       	pop	r6
    412e:	5f 90       	pop	r5
    4130:	4f 90       	pop	r4
    4132:	3f 90       	pop	r3
    4134:	2f 90       	pop	r2
    4136:	08 95       	ret

00004138 <task_twi2_lcd>:
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

/* TWI2 - LCD Port */
void task_twi2_lcd(uint32_t now)
{
    4138:	2f 92       	push	r2
    413a:	3f 92       	push	r3
    413c:	4f 92       	push	r4
    413e:	5f 92       	push	r5
    4140:	6f 92       	push	r6
    4142:	7f 92       	push	r7
    4144:	8f 92       	push	r8
    4146:	9f 92       	push	r9
    4148:	af 92       	push	r10
    414a:	bf 92       	push	r11
    414c:	cf 92       	push	r12
    414e:	df 92       	push	r13
    4150:	ef 92       	push	r14
    4152:	ff 92       	push	r15
    4154:	0f 93       	push	r16
    4156:	1f 93       	push	r17
    4158:	cf 93       	push	r28
    415a:	df 93       	push	r29
    415c:	cd b7       	in	r28, 0x3d	; 61
    415e:	de b7       	in	r29, 0x3e	; 62
    4160:	2d 97       	sbiw	r28, 0x0d	; 13
    4162:	cd bf       	out	0x3d, r28	; 61
    4164:	de bf       	out	0x3e, r29	; 62
	static uint16_t s_lcd_entry_cnt = 0U;
	static uint32_t s_lcd_last = 0UL;

	if (g_twi2_lcd_version >= 0x11) {
    4166:	20 91 f1 27 	lds	r18, 0x27F1	; 0x8027f1 <g_twi2_lcd_version>
    416a:	21 31       	cpi	r18, 0x11	; 17
    416c:	08 f4       	brcc	.+2      	; 0x4170 <task_twi2_lcd+0x38>
    416e:	2e c2       	rjmp	.+1116   	; 0x45cc <task_twi2_lcd+0x494>
		//static uint8_t s_ofs = 0;

		/* Show current measurement data on the LCD */
		if (((now - s_lcd_last) >= 1024) || (now < s_lcd_last)) {
    4170:	c0 90 60 25 	lds	r12, 0x2560	; 0x802560 <s_lcd_last.7476>
    4174:	d0 90 61 25 	lds	r13, 0x2561	; 0x802561 <s_lcd_last.7476+0x1>
    4178:	e0 90 62 25 	lds	r14, 0x2562	; 0x802562 <s_lcd_last.7476+0x2>
    417c:	f0 90 63 25 	lds	r15, 0x2563	; 0x802563 <s_lcd_last.7476+0x3>
    4180:	8b 01       	movw	r16, r22
    4182:	9c 01       	movw	r18, r24
    4184:	0c 19       	sub	r16, r12
    4186:	1d 09       	sbc	r17, r13
    4188:	2e 09       	sbc	r18, r14
    418a:	3f 09       	sbc	r19, r15
    418c:	01 15       	cp	r16, r1
    418e:	14 40       	sbci	r17, 0x04	; 4
    4190:	21 05       	cpc	r18, r1
    4192:	31 05       	cpc	r19, r1
    4194:	30 f4       	brcc	.+12     	; 0x41a2 <task_twi2_lcd+0x6a>
    4196:	6c 15       	cp	r22, r12
    4198:	7d 05       	cpc	r23, r13
    419a:	8e 05       	cpc	r24, r14
    419c:	9f 05       	cpc	r25, r15
    419e:	08 f0       	brcs	.+2      	; 0x41a2 <task_twi2_lcd+0x6a>
    41a0:	34 c2       	rjmp	.+1128   	; 0x460a <task_twi2_lcd+0x4d2>
			const uint8_t col_left = 6 * 10;
			uint8_t line = 2;

			s_lcd_last = now;
    41a2:	60 93 60 25 	sts	0x2560, r22	; 0x802560 <s_lcd_last.7476>
    41a6:	70 93 61 25 	sts	0x2561, r23	; 0x802561 <s_lcd_last.7476+0x1>
    41aa:	80 93 62 25 	sts	0x2562, r24	; 0x802562 <s_lcd_last.7476+0x2>
    41ae:	90 93 63 25 	sts	0x2563, r25	; 0x802563 <s_lcd_last.7476+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    41b2:	8f b7       	in	r24, 0x3f	; 63
    41b4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    41b6:	f8 94       	cli
	return flags;
    41b8:	89 81       	ldd	r24, Y+1	; 0x01

			/* Get up-to-date global data */
			irqflags_t flags = cpu_irq_save();
			int16_t l_adc_vctcxo_volt_1000	= g_adc_vctcxo_volt_1000;
    41ba:	c0 90 87 27 	lds	r12, 0x2787	; 0x802787 <g_adc_vctcxo_volt_1000>
    41be:	d0 90 88 27 	lds	r13, 0x2788	; 0x802788 <g_adc_vctcxo_volt_1000+0x1>
			int16_t l_adc_5v0_volt_1000		= g_adc_5v0_volt_1000;
    41c2:	60 90 85 27 	lds	r6, 0x2785	; 0x802785 <g_adc_5v0_volt_1000>
    41c6:	70 90 86 27 	lds	r7, 0x2786	; 0x802786 <g_adc_5v0_volt_1000+0x1>
			int16_t l_adc_vbat_volt_1000	= g_adc_vbat_volt_1000;
    41ca:	40 90 83 27 	lds	r4, 0x2783	; 0x802783 <g_adc_vbat_volt_1000>
    41ce:	50 90 84 27 	lds	r5, 0x2784	; 0x802784 <g_adc_vbat_volt_1000+0x1>
			int16_t l_adc_temp_deg_100		= g_adc_temp_deg_100;
    41d2:	e0 90 7b 27 	lds	r14, 0x277B	; 0x80277b <g_adc_temp_deg_100>
    41d6:	f0 90 7c 27 	lds	r15, 0x277C	; 0x80277c <g_adc_temp_deg_100+0x1>
			int16_t l_adc_io_adc4_volt_1000	= g_adc_io_adc4_volt_1000;
    41da:	80 90 81 27 	lds	r8, 0x2781	; 0x802781 <g_adc_io_adc4_volt_1000>
    41de:	90 90 82 27 	lds	r9, 0x2782	; 0x802782 <g_adc_io_adc4_volt_1000+0x1>
			int16_t l_adc_io_adc5_volt_1000	= g_adc_io_adc5_volt_1000;
    41e2:	20 90 7f 27 	lds	r2, 0x277F	; 0x80277f <g_adc_io_adc5_volt_1000>
    41e6:	30 90 80 27 	lds	r3, 0x2780	; 0x802780 <g_adc_io_adc5_volt_1000+0x1>
			//int16_t l_adc_silence_volt_1000	= g_adc_silence_volt_1000;
			int32_t l_twi1_baro_temp_100	= g_twi1_baro_temp_100;
    41ea:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <g_twi1_baro_temp_100>
    41ee:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <g_twi1_baro_temp_100+0x1>
    41f2:	40 91 02 28 	lds	r20, 0x2802	; 0x802802 <g_twi1_baro_temp_100+0x2>
    41f6:	50 91 03 28 	lds	r21, 0x2803	; 0x802803 <g_twi1_baro_temp_100+0x3>
    41fa:	2a 83       	std	Y+2, r18	; 0x02
    41fc:	3b 83       	std	Y+3, r19	; 0x03
    41fe:	4c 83       	std	Y+4, r20	; 0x04
    4200:	5d 83       	std	Y+5, r21	; 0x05
			int32_t l_twi1_baro_p_100		= g_twi1_baro_p_100;
    4202:	20 91 fc 27 	lds	r18, 0x27FC	; 0x8027fc <g_twi1_baro_p_100>
    4206:	30 91 fd 27 	lds	r19, 0x27FD	; 0x8027fd <g_twi1_baro_p_100+0x1>
    420a:	40 91 fe 27 	lds	r20, 0x27FE	; 0x8027fe <g_twi1_baro_p_100+0x2>
    420e:	50 91 ff 27 	lds	r21, 0x27FF	; 0x8027ff <g_twi1_baro_p_100+0x3>
    4212:	2e 83       	std	Y+6, r18	; 0x06
    4214:	3f 83       	std	Y+7, r19	; 0x07
    4216:	48 87       	std	Y+8, r20	; 0x08
    4218:	59 87       	std	Y+9, r21	; 0x09
			int16_t l_twi1_hygro_T_100		= g_twi1_hygro_T_100;
    421a:	40 91 f4 27 	lds	r20, 0x27F4	; 0x8027f4 <g_twi1_hygro_T_100>
    421e:	50 91 f5 27 	lds	r21, 0x27F5	; 0x8027f5 <g_twi1_hygro_T_100+0x1>
    4222:	4a 87       	std	Y+10, r20	; 0x0a
    4224:	5b 87       	std	Y+11, r21	; 0x0b
			int16_t l_twi1_hygro_RH_100		= g_twi1_hygro_RH_100;
    4226:	e0 91 f2 27 	lds	r30, 0x27F2	; 0x8027f2 <g_twi1_hygro_RH_100>
    422a:	f0 91 f3 27 	lds	r31, 0x27F3	; 0x8027f3 <g_twi1_hygro_RH_100+0x1>
    422e:	ec 87       	std	Y+12, r30	; 0x0c
    4230:	fd 87       	std	Y+13, r31	; 0x0d
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4232:	8f bf       	out	0x3f, r24	; 63
			cpu_irq_restore(flags);

			/* Repaint all items when starting and at some interval */
			if (!(s_lcd_entry_cnt++)) {
    4234:	80 91 5e 25 	lds	r24, 0x255E	; 0x80255e <__data_end>
    4238:	90 91 5f 25 	lds	r25, 0x255F	; 0x80255f <__data_end+0x1>
    423c:	9c 01       	movw	r18, r24
    423e:	2f 5f       	subi	r18, 0xFF	; 255
    4240:	3f 4f       	sbci	r19, 0xFF	; 255
    4242:	20 93 5e 25 	sts	0x255E, r18	; 0x80255e <__data_end>
    4246:	30 93 5f 25 	sts	0x255F, r19	; 0x80255f <__data_end+0x1>
    424a:	89 2b       	or	r24, r25
    424c:	09 f0       	breq	.+2      	; 0x4250 <task_twi2_lcd+0x118>
    424e:	1a c1       	rjmp	.+564    	; 0x4484 <task_twi2_lcd+0x34c>
}


static void task_twi2_lcd_cls(void)
{
	twi2_waitUntilReady();
    4250:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
    4254:	0f 2e       	mov	r0, r31
    4256:	fb e0       	ldi	r31, 0x0B	; 11
    4258:	af 2e       	mov	r10, r31
    425a:	f0 e2       	ldi	r31, 0x20	; 32
    425c:	bf 2e       	mov	r11, r31
    425e:	f0 2d       	mov	r31, r0
    4260:	80 e1       	ldi	r24, 0x10	; 16
    4262:	f5 01       	movw	r30, r10
    4264:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.length = 0;
    4266:	10 86       	std	Z+8, r1	; 0x08
    4268:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    426a:	40 e0       	ldi	r20, 0x00	; 0
    426c:	b5 01       	movw	r22, r10
    426e:	80 e8       	ldi	r24, 0x80	; 128
    4270:	94 e0       	ldi	r25, 0x04	; 4
    4272:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    4276:	65 e0       	ldi	r22, 0x05	; 5
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
{
	uint8_t line;

	/* The header line */
	task_twi2_lcd_cls();
	task_twi2_lcd_str(6 * 10, 2, "FindMeSAT");
    4282:	4a e5       	ldi	r20, 0x5A	; 90
    4284:	53 e2       	ldi	r21, 0x23	; 35
    4286:	62 e0       	ldi	r22, 0x02	; 2
    4288:	8c e3       	ldi	r24, 0x3C	; 60
    428a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 30, 2, "by DF4IAH");
    428e:	44 e6       	ldi	r20, 0x64	; 100
    4290:	53 e2       	ldi	r21, 0x23	; 35
    4292:	62 e0       	ldi	r22, 0x02	; 2
    4294:	84 eb       	ldi	r24, 0xB4	; 180
    4296:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_circ(uint8_t x, uint8_t y, uint8_t radius, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    429a:	64 e0       	ldi	r22, 0x04	; 4
    429c:	89 e0       	ldi	r24, 0x09	; 9
    429e:	0e 94 d6 17 	call	0x2fac	; 0x2fac <task_twi2_lcd_pos_xy>

	twi2_waitUntilReady();
    42a2:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC : TWI_SMART_LCD_CMD_DRAW_CIRC;
    42a6:	8a e3       	ldi	r24, 0x3A	; 58
    42a8:	f5 01       	movw	r30, r10
    42aa:	81 83       	std	Z+1, r24	; 0x01
	twi2_m_data[0] = radius;
    42ac:	0b e6       	ldi	r16, 0x6B	; 107
    42ae:	17 e2       	ldi	r17, 0x27	; 39
    42b0:	83 e0       	ldi	r24, 0x03	; 3
    42b2:	f8 01       	movw	r30, r16
    42b4:	80 83       	st	Z, r24
	twi2_packet.length = 1;
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	f5 01       	movw	r30, r10
    42bc:	80 87       	std	Z+8, r24	; 0x08
    42be:	91 87       	std	Z+9, r25	; 0x09
    42c0:	40 e0       	ldi	r20, 0x00	; 0
    42c2:	b5 01       	movw	r22, r10
    42c4:	80 e8       	ldi	r24, 0x80	; 128
    42c6:	94 e0       	ldi	r25, 0x04	; 4
    42c8:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    42cc:	65 e0       	ldi	r22, 0x05	; 5
    42ce:	70 e0       	ldi	r23, 0x00	; 0
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    42d8:	62 e0       	ldi	r22, 0x02	; 2
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	0e 94 d6 17 	call	0x2fac	; 0x2fac <task_twi2_lcd_pos_xy>

	twi2_waitUntilReady();
    42e0:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_RECT : TWI_SMART_LCD_CMD_DRAW_RECT;
    42e4:	24 e3       	ldi	r18, 0x34	; 52
    42e6:	f5 01       	movw	r30, r10
    42e8:	21 83       	std	Z+1, r18	; 0x01
	twi2_m_data[0] = width;
    42ea:	26 e0       	ldi	r18, 0x06	; 6
    42ec:	f8 01       	movw	r30, r16
    42ee:	20 83       	st	Z, r18
	twi2_m_data[1] = height;
    42f0:	34 e0       	ldi	r19, 0x04	; 4
    42f2:	31 83       	std	Z+1, r19	; 0x01
	twi2_packet.length = 2;
    42f4:	22 e0       	ldi	r18, 0x02	; 2
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	f5 01       	movw	r30, r10
    42fa:	20 87       	std	Z+8, r18	; 0x08
    42fc:	31 87       	std	Z+9, r19	; 0x09
    42fe:	40 e0       	ldi	r20, 0x00	; 0
    4300:	b5 01       	movw	r22, r10
    4302:	80 e8       	ldi	r24, 0x80	; 128
    4304:	94 e0       	ldi	r25, 0x04	; 4
    4306:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    430a:	65 e0       	ldi	r22, 0x05	; 5
    430c:	70 e0       	ldi	r23, 0x00	; 0
    430e:	80 e0       	ldi	r24, 0x00	; 0
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    4316:	62 e0       	ldi	r22, 0x02	; 2
    4318:	8c e0       	ldi	r24, 0x0C	; 12
    431a:	0e 94 d6 17 	call	0x2fac	; 0x2fac <task_twi2_lcd_pos_xy>

	twi2_waitUntilReady();
    431e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_RECT : TWI_SMART_LCD_CMD_DRAW_RECT;
    4322:	24 e3       	ldi	r18, 0x34	; 52
    4324:	f5 01       	movw	r30, r10
    4326:	21 83       	std	Z+1, r18	; 0x01
	twi2_m_data[0] = width;
    4328:	26 e0       	ldi	r18, 0x06	; 6
    432a:	f8 01       	movw	r30, r16
    432c:	20 83       	st	Z, r18
	twi2_m_data[1] = height;
    432e:	34 e0       	ldi	r19, 0x04	; 4
    4330:	31 83       	std	Z+1, r19	; 0x01
	twi2_packet.length = 2;
    4332:	22 e0       	ldi	r18, 0x02	; 2
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	f5 01       	movw	r30, r10
    4338:	20 87       	std	Z+8, r18	; 0x08
    433a:	31 87       	std	Z+9, r19	; 0x09
    433c:	40 e0       	ldi	r20, 0x00	; 0
    433e:	b5 01       	movw	r22, r10
    4340:	80 e8       	ldi	r24, 0x80	; 128
    4342:	94 e0       	ldi	r25, 0x04	; 4
    4344:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    4348:	65 e0       	ldi	r22, 0x05	; 5
    434a:	70 e0       	ldi	r23, 0x00	; 0
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
	}
}

static void task_twi2_lcd_line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
	task_twi2_lcd_pos_xy(x1, y1);
    4354:	6b e0       	ldi	r22, 0x0B	; 11
    4356:	80 e0       	ldi	r24, 0x00	; 0
    4358:	0e 94 d6 17 	call	0x2fac	; 0x2fac <task_twi2_lcd_pos_xy>

	twi2_waitUntilReady();
    435c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
    4360:	82 e3       	ldi	r24, 0x32	; 50
    4362:	f5 01       	movw	r30, r10
    4364:	81 83       	std	Z+1, r24	; 0x01
	twi2_m_data[0] = x2;
    4366:	8f ee       	ldi	r24, 0xEF	; 239
    4368:	f8 01       	movw	r30, r16
    436a:	80 83       	st	Z, r24
	twi2_m_data[1] = y2;
    436c:	8b e0       	ldi	r24, 0x0B	; 11
    436e:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.length = 2;
    4370:	22 e0       	ldi	r18, 0x02	; 2
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	f5 01       	movw	r30, r10
    4376:	20 87       	std	Z+8, r18	; 0x08
    4378:	31 87       	std	Z+9, r19	; 0x09
    437a:	40 e0       	ldi	r20, 0x00	; 0
    437c:	b5 01       	movw	r22, r10
    437e:	80 e8       	ldi	r24, 0x80	; 128
    4380:	94 e0       	ldi	r25, 0x04	; 4
    4382:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    4386:	65 e0       	ldi	r22, 0x05	; 5
    4388:	70 e0       	ldi	r23, 0x00	; 0
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
	/* Header line separator */
	task_twi2_lcd_line(0, 11, 239, 11);

	/* Left measurement names */
	line = 2;
	task_twi2_lcd_str(6 *  0, (line++) * 10, "mP Temp =");
    4392:	4e e6       	ldi	r20, 0x6E	; 110
    4394:	53 e2       	ldi	r21, 0x23	; 35
    4396:	64 e1       	ldi	r22, 0x14	; 20
    4398:	80 e0       	ldi	r24, 0x00	; 0
    439a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  3, (line++) * 10,    "Vusb =");
    439e:	48 e7       	ldi	r20, 0x78	; 120
    43a0:	53 e2       	ldi	r21, 0x23	; 35
    43a2:	6e e1       	ldi	r22, 0x1E	; 30
    43a4:	82 e1       	ldi	r24, 0x12	; 18
    43a6:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  3, (line++) * 10,    "Vbat =");
    43aa:	4f e7       	ldi	r20, 0x7F	; 127
    43ac:	53 e2       	ldi	r21, 0x23	; 35
    43ae:	68 e2       	ldi	r22, 0x28	; 40
    43b0:	82 e1       	ldi	r24, 0x12	; 18
    43b2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vvctcxo =");
    43b6:	46 e8       	ldi	r20, 0x86	; 134
    43b8:	53 e2       	ldi	r21, 0x23	; 35
    43ba:	62 e3       	ldi	r22, 0x32	; 50
    43bc:	80 e0       	ldi	r24, 0x00	; 0
    43be:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vioadc4 =");
    43c2:	40 e9       	ldi	r20, 0x90	; 144
    43c4:	53 e2       	ldi	r21, 0x23	; 35
    43c6:	6c e3       	ldi	r22, 0x3C	; 60
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vioadc5 =");
    43ce:	4a e9       	ldi	r20, 0x9A	; 154
    43d0:	53 e2       	ldi	r21, 0x23	; 35
    43d2:	66 e4       	ldi	r22, 0x46	; 70
    43d4:	80 e0       	ldi	r24, 0x00	; 0
    43d6:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	//task_twi2_lcd_str(6 *  0, (line++) * 10, "Vsilen. =");
	line++;

	task_twi2_lcd_str(6 *  0, (line++) * 10, "Ba_Temp =");
    43da:	44 ea       	ldi	r20, 0xA4	; 164
    43dc:	53 e2       	ldi	r21, 0x23	; 35
    43de:	6a e5       	ldi	r22, 0x5A	; 90
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Ba_Pres =");
    43e6:	4e ea       	ldi	r20, 0xAE	; 174
    43e8:	53 e2       	ldi	r21, 0x23	; 35
    43ea:	64 e6       	ldi	r22, 0x64	; 100
    43ec:	80 e0       	ldi	r24, 0x00	; 0
    43ee:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Hy_Temp =");
    43f2:	48 eb       	ldi	r20, 0xB8	; 184
    43f4:	53 e2       	ldi	r21, 0x23	; 35
    43f6:	6e e6       	ldi	r22, 0x6E	; 110
    43f8:	80 e0       	ldi	r24, 0x00	; 0
    43fa:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Hy_RelH =");
    43fe:	42 ec       	ldi	r20, 0xC2	; 194
    4400:	53 e2       	ldi	r21, 0x23	; 35
    4402:	68 e7       	ldi	r22, 0x78	; 120
    4404:	80 e0       	ldi	r24, 0x00	; 0
    4406:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>

	/* Left measurement units */
	line = 2;
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    440a:	4c ec       	ldi	r20, 0xCC	; 204
    440c:	53 e2       	ldi	r21, 0x23	; 35
    440e:	64 e1       	ldi	r22, 0x14	; 20
    4410:	80 e6       	ldi	r24, 0x60	; 96
    4412:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    4416:	4e ec       	ldi	r20, 0xCE	; 206
    4418:	53 e2       	ldi	r21, 0x23	; 35
    441a:	6e e1       	ldi	r22, 0x1E	; 30
    441c:	80 e6       	ldi	r24, 0x60	; 96
    441e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    4422:	4e ec       	ldi	r20, 0xCE	; 206
    4424:	53 e2       	ldi	r21, 0x23	; 35
    4426:	68 e2       	ldi	r22, 0x28	; 40
    4428:	80 e6       	ldi	r24, 0x60	; 96
    442a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    442e:	4e ec       	ldi	r20, 0xCE	; 206
    4430:	53 e2       	ldi	r21, 0x23	; 35
    4432:	62 e3       	ldi	r22, 0x32	; 50
    4434:	80 e6       	ldi	r24, 0x60	; 96
    4436:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    443a:	4e ec       	ldi	r20, 0xCE	; 206
    443c:	53 e2       	ldi	r21, 0x23	; 35
    443e:	6c e3       	ldi	r22, 0x3C	; 60
    4440:	80 e6       	ldi	r24, 0x60	; 96
    4442:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    4446:	4e ec       	ldi	r20, 0xCE	; 206
    4448:	53 e2       	ldi	r21, 0x23	; 35
    444a:	66 e4       	ldi	r22, 0x46	; 70
    444c:	80 e6       	ldi	r24, 0x60	; 96
    444e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	//task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
	line++;

	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    4452:	4c ec       	ldi	r20, 0xCC	; 204
    4454:	53 e2       	ldi	r21, 0x23	; 35
    4456:	6a e5       	ldi	r22, 0x5A	; 90
    4458:	80 e6       	ldi	r24, 0x60	; 96
    445a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 18, (line++) * 10, "hPa");
    445e:	40 ed       	ldi	r20, 0xD0	; 208
    4460:	53 e2       	ldi	r21, 0x23	; 35
    4462:	64 e6       	ldi	r22, 0x64	; 100
    4464:	8c e6       	ldi	r24, 0x6C	; 108
    4466:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    446a:	4c ec       	ldi	r20, 0xCC	; 204
    446c:	53 e2       	ldi	r21, 0x23	; 35
    446e:	6e e6       	ldi	r22, 0x6E	; 110
    4470:	80 e6       	ldi	r24, 0x60	; 96
    4472:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "%");
    4476:	44 ed       	ldi	r20, 0xD4	; 212
    4478:	53 e2       	ldi	r21, 0x23	; 35
    447a:	68 e7       	ldi	r22, 0x78	; 120
    447c:	80 e6       	ldi	r24, 0x60	; 96
    447e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
    4482:	07 c0       	rjmp	.+14     	; 0x4492 <task_twi2_lcd+0x35a>

			/* Repaint all items when starting and at some interval */
			if (!(s_lcd_entry_cnt++)) {
				task_twi2_lcd_header();
			#if 1
			} else if (s_lcd_entry_cnt >= 120) {
    4484:	28 37       	cpi	r18, 0x78	; 120
    4486:	31 05       	cpc	r19, r1
    4488:	20 f0       	brcs	.+8      	; 0x4492 <task_twi2_lcd+0x35a>
				s_lcd_entry_cnt = 0;
    448a:	10 92 5e 25 	sts	0x255E, r1	; 0x80255e <__data_end>
    448e:	10 92 5f 25 	sts	0x255F, r1	; 0x80255f <__data_end+0x1>
			#endif
			}

			/* ADC_TEMP */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_temp_deg_100 / 100,      (l_adc_temp_deg_100 / 10) % 10,  "%02d.%01d");
    4492:	2a e0       	ldi	r18, 0x0A	; 10
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	c7 01       	movw	r24, r14
    4498:	b9 01       	movw	r22, r18
    449a:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    449e:	cb 01       	movw	r24, r22
    44a0:	b9 01       	movw	r22, r18
    44a2:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    44a6:	9c 01       	movw	r18, r24
    44a8:	0f 2e       	mov	r0, r31
    44aa:	f4 e6       	ldi	r31, 0x64	; 100
    44ac:	af 2e       	mov	r10, r31
    44ae:	b1 2c       	mov	r11, r1
    44b0:	f0 2d       	mov	r31, r0
    44b2:	c7 01       	movw	r24, r14
    44b4:	b5 01       	movw	r22, r10
    44b6:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    44ba:	ab 01       	movw	r20, r22
    44bc:	06 ed       	ldi	r16, 0xD6	; 214
    44be:	13 e2       	ldi	r17, 0x23	; 35
    44c0:	64 e1       	ldi	r22, 0x14	; 20
    44c2:	8c e3       	ldi	r24, 0x3C	; 60
    44c4:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>

			/* ADC_5V0 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_5v0_volt_1000 / 1000,     l_adc_5v0_volt_1000 % 1000,     "%1d.%03d");
    44c8:	0f 2e       	mov	r0, r31
    44ca:	f8 ee       	ldi	r31, 0xE8	; 232
    44cc:	ef 2e       	mov	r14, r31
    44ce:	f3 e0       	ldi	r31, 0x03	; 3
    44d0:	ff 2e       	mov	r15, r31
    44d2:	f0 2d       	mov	r31, r0
    44d4:	c3 01       	movw	r24, r6
    44d6:	b7 01       	movw	r22, r14
    44d8:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    44dc:	ab 01       	movw	r20, r22
    44de:	00 ee       	ldi	r16, 0xE0	; 224
    44e0:	13 e2       	ldi	r17, 0x23	; 35
    44e2:	9c 01       	movw	r18, r24
    44e4:	6e e1       	ldi	r22, 0x1E	; 30
    44e6:	8c e3       	ldi	r24, 0x3C	; 60
    44e8:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>

			/* ADC_VBAT */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_vbat_volt_1000 / 1000,    l_adc_vbat_volt_1000 % 1000,    "%1d.%03d");
    44ec:	c2 01       	movw	r24, r4
    44ee:	b7 01       	movw	r22, r14
    44f0:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    44f4:	ab 01       	movw	r20, r22
    44f6:	9c 01       	movw	r18, r24
    44f8:	68 e2       	ldi	r22, 0x28	; 40
    44fa:	8c e3       	ldi	r24, 0x3C	; 60
    44fc:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>

			/* ADC_VCTCXO */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_vctcxo_volt_1000 / 1000,  l_adc_vctcxo_volt_1000 % 1000,  "%1d.%03d");
    4500:	c6 01       	movw	r24, r12
    4502:	b7 01       	movw	r22, r14
    4504:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    4508:	ab 01       	movw	r20, r22
    450a:	9c 01       	movw	r18, r24
    450c:	62 e3       	ldi	r22, 0x32	; 50
    450e:	8c e3       	ldi	r24, 0x3C	; 60
    4510:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>

			/* ADC_IO_ADC4 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_io_adc4_volt_1000 / 1000, l_adc_io_adc4_volt_1000 % 1000, "%1d.%03d");
    4514:	c4 01       	movw	r24, r8
    4516:	b7 01       	movw	r22, r14
    4518:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    451c:	ab 01       	movw	r20, r22
    451e:	9c 01       	movw	r18, r24
    4520:	6c e3       	ldi	r22, 0x3C	; 60
    4522:	8c e3       	ldi	r24, 0x3C	; 60
    4524:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>

			/* ADC_IO_ADC5 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_io_adc5_volt_1000 / 1000, l_adc_io_adc5_volt_1000 % 1000, "%1d.%03d");
    4528:	c1 01       	movw	r24, r2
    452a:	b7 01       	movw	r22, r14
    452c:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    4530:	ab 01       	movw	r20, r22
    4532:	9c 01       	movw	r18, r24
    4534:	66 e4       	ldi	r22, 0x46	; 70
    4536:	8c e3       	ldi	r24, 0x3C	; 60
    4538:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>
			/* ADC_SILENCE */
			//task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_silence_volt_1000 / 1000, l_adc_silence_volt_1000 % 1000, "%1d.%03d");
			line++;

			/* Baro_Temp */
			task_twi2_lcd_print_format_uint32(col_left, (line++) * 10, l_twi1_baro_temp_100 / 100,     l_twi1_baro_temp_100 % 100,     "%02ld.%02ld");
    453c:	0f 2e       	mov	r0, r31
    453e:	f4 e6       	ldi	r31, 0x64	; 100
    4540:	4f 2e       	mov	r4, r31
    4542:	51 2c       	mov	r5, r1
    4544:	61 2c       	mov	r6, r1
    4546:	71 2c       	mov	r7, r1
    4548:	f0 2d       	mov	r31, r0
    454a:	6a 81       	ldd	r22, Y+2	; 0x02
    454c:	7b 81       	ldd	r23, Y+3	; 0x03
    454e:	8c 81       	ldd	r24, Y+4	; 0x04
    4550:	9d 81       	ldd	r25, Y+5	; 0x05
    4552:	a3 01       	movw	r20, r6
    4554:	92 01       	movw	r18, r4
    4556:	0e 94 9d 4a 	call	0x953a	; 0x953a <__divmodsi4>
    455a:	0f 2e       	mov	r0, r31
    455c:	f9 ee       	ldi	r31, 0xE9	; 233
    455e:	cf 2e       	mov	r12, r31
    4560:	f3 e2       	ldi	r31, 0x23	; 35
    4562:	df 2e       	mov	r13, r31
    4564:	f0 2d       	mov	r31, r0
    4566:	7b 01       	movw	r14, r22
    4568:	8c 01       	movw	r16, r24
    456a:	6a e5       	ldi	r22, 0x5A	; 90
    456c:	8c e3       	ldi	r24, 0x3C	; 60
    456e:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <task_twi2_lcd_print_format_uint32>

			/* Baro_P */
			task_twi2_lcd_print_format_uint32(col_left, (line++) * 10, l_twi1_baro_p_100 / 100,        l_twi1_baro_p_100 % 100,        "%04ld.%02ld");
    4572:	6e 81       	ldd	r22, Y+6	; 0x06
    4574:	7f 81       	ldd	r23, Y+7	; 0x07
    4576:	88 85       	ldd	r24, Y+8	; 0x08
    4578:	99 85       	ldd	r25, Y+9	; 0x09
    457a:	a3 01       	movw	r20, r6
    457c:	92 01       	movw	r18, r4
    457e:	0e 94 9d 4a 	call	0x953a	; 0x953a <__divmodsi4>
    4582:	0f 2e       	mov	r0, r31
    4584:	f5 ef       	ldi	r31, 0xF5	; 245
    4586:	cf 2e       	mov	r12, r31
    4588:	f3 e2       	ldi	r31, 0x23	; 35
    458a:	df 2e       	mov	r13, r31
    458c:	f0 2d       	mov	r31, r0
    458e:	7b 01       	movw	r14, r22
    4590:	8c 01       	movw	r16, r24
    4592:	64 e6       	ldi	r22, 0x64	; 100
    4594:	8c e3       	ldi	r24, 0x3C	; 60
    4596:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <task_twi2_lcd_print_format_uint32>

			/* Hygro_Temp */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_twi1_hygro_T_100 / 100,       l_twi1_hygro_T_100 % 100,       "%02d.%02d");
    459a:	8a 85       	ldd	r24, Y+10	; 0x0a
    459c:	9b 85       	ldd	r25, Y+11	; 0x0b
    459e:	b5 01       	movw	r22, r10
    45a0:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    45a4:	ab 01       	movw	r20, r22
    45a6:	01 e0       	ldi	r16, 0x01	; 1
    45a8:	14 e2       	ldi	r17, 0x24	; 36
    45aa:	9c 01       	movw	r18, r24
    45ac:	6e e6       	ldi	r22, 0x6E	; 110
    45ae:	8c e3       	ldi	r24, 0x3C	; 60
    45b0:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>

			/* Hygro_RH */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_twi1_hygro_RH_100 / 100,      l_twi1_hygro_RH_100 % 100,      "%02d.%02d");
    45b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    45b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    45b8:	b5 01       	movw	r22, r10
    45ba:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    45be:	ab 01       	movw	r20, r22
    45c0:	9c 01       	movw	r18, r24
    45c2:	68 e7       	ldi	r22, 0x78	; 120
    45c4:	8c e3       	ldi	r24, 0x3C	; 60
    45c6:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>
    45ca:	1f c0       	rjmp	.+62     	; 0x460a <task_twi2_lcd+0x4d2>
				task_twi2_lcd_cls();
			}
		}
		#endif

	} else if (g_twi2_lcd_version == 0x10) {
    45cc:	20 31       	cpi	r18, 0x10	; 16
    45ce:	e9 f4       	brne	.+58     	; 0x460a <task_twi2_lcd+0x4d2>
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi2_waitUntilReady();
    45d0:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
    45d4:	eb e0       	ldi	r30, 0x0B	; 11
    45d6:	f0 e2       	ldi	r31, 0x20	; 32
    45d8:	84 e8       	ldi	r24, 0x84	; 132
    45da:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[0] = 1;
    45dc:	ab e6       	ldi	r26, 0x6B	; 107
    45de:	b7 e2       	ldi	r27, 0x27	; 39
    45e0:	81 e0       	ldi	r24, 0x01	; 1
    45e2:	8c 93       	st	X, r24
		twi2_m_data[1] = 128;
    45e4:	80 e8       	ldi	r24, 0x80	; 128
    45e6:	11 96       	adiw	r26, 0x01	; 1
    45e8:	8c 93       	st	X, r24
		twi2_packet.length = 2;
    45ea:	82 e0       	ldi	r24, 0x02	; 2
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	80 87       	std	Z+8, r24	; 0x08
    45f0:	91 87       	std	Z+9, r25	; 0x09
    45f2:	40 e0       	ldi	r20, 0x00	; 0
    45f4:	bf 01       	movw	r22, r30
    45f6:	80 e8       	ldi	r24, 0x80	; 128
    45f8:	94 e0       	ldi	r25, 0x04	; 4
    45fa:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
    45fe:	69 e8       	ldi	r22, 0x89	; 137
    4600:	73 e1       	ldi	r23, 0x13	; 19
    4602:	80 e0       	ldi	r24, 0x00	; 0
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
	}
}
    460a:	2d 96       	adiw	r28, 0x0d	; 13
    460c:	cd bf       	out	0x3d, r28	; 61
    460e:	de bf       	out	0x3e, r29	; 62
    4610:	df 91       	pop	r29
    4612:	cf 91       	pop	r28
    4614:	1f 91       	pop	r17
    4616:	0f 91       	pop	r16
    4618:	ff 90       	pop	r15
    461a:	ef 90       	pop	r14
    461c:	df 90       	pop	r13
    461e:	cf 90       	pop	r12
    4620:	bf 90       	pop	r11
    4622:	af 90       	pop	r10
    4624:	9f 90       	pop	r9
    4626:	8f 90       	pop	r8
    4628:	7f 90       	pop	r7
    462a:	6f 90       	pop	r6
    462c:	5f 90       	pop	r5
    462e:	4f 90       	pop	r4
    4630:	3f 90       	pop	r3
    4632:	2f 90       	pop	r2
    4634:	08 95       	ret

00004636 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    4636:	08 95       	ret

00004638 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    4638:	cf 93       	push	r28
    463a:	df 93       	push	r29
    463c:	1f 92       	push	r1
    463e:	cd b7       	in	r28, 0x3d	; 61
    4640:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4642:	2f b7       	in	r18, 0x3f	; 63
    4644:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    4646:	f8 94       	cli
	return flags;
    4648:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    464a:	28 2f       	mov	r18, r24
    464c:	39 2f       	mov	r19, r25
    464e:	21 15       	cp	r18, r1
    4650:	82 e0       	ldi	r24, 0x02	; 2
    4652:	38 07       	cpc	r19, r24
    4654:	29 f4       	brne	.+10     	; 0x4660 <adc_set_callback+0x28>
		adca_callback = callback;
    4656:	60 93 8d 29 	sts	0x298D, r22	; 0x80298d <adca_callback>
    465a:	70 93 8e 29 	sts	0x298E, r23	; 0x80298e <adca_callback+0x1>
    465e:	07 c0       	rjmp	.+14     	; 0x466e <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    4660:	20 34       	cpi	r18, 0x40	; 64
    4662:	32 40       	sbci	r19, 0x02	; 2
    4664:	21 f4       	brne	.+8      	; 0x466e <adc_set_callback+0x36>
		adcb_callback = callback;
    4666:	60 93 8b 29 	sts	0x298B, r22	; 0x80298b <adcb_callback>
    466a:	70 93 8c 29 	sts	0x298C, r23	; 0x80298c <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    466e:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    4670:	0f 90       	pop	r0
    4672:	df 91       	pop	r29
    4674:	cf 91       	pop	r28
    4676:	08 95       	ret

00004678 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    4678:	81 15       	cp	r24, r1
    467a:	22 e0       	ldi	r18, 0x02	; 2
    467c:	92 07       	cpc	r25, r18
    467e:	69 f4       	brne	.+26     	; 0x469a <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    4680:	80 91 6d 25 	lds	r24, 0x256D	; 0x80256d <adca_enable_count>
    4684:	91 e0       	ldi	r25, 0x01	; 1
    4686:	98 0f       	add	r25, r24
    4688:	90 93 6d 25 	sts	0x256D, r25	; 0x80256d <adca_enable_count>
    468c:	81 11       	cpse	r24, r1
    468e:	14 c0       	rjmp	.+40     	; 0x46b8 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    4690:	62 e0       	ldi	r22, 0x02	; 2
    4692:	81 e0       	ldi	r24, 0x01	; 1
    4694:	0c 94 2c 42 	jmp	0x8458	; 0x8458 <sysclk_enable_module>
    4698:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    469a:	80 34       	cpi	r24, 0x40	; 64
    469c:	92 40       	sbci	r25, 0x02	; 2
    469e:	61 f4       	brne	.+24     	; 0x46b8 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    46a0:	80 91 6c 25 	lds	r24, 0x256C	; 0x80256c <adcb_enable_count>
    46a4:	91 e0       	ldi	r25, 0x01	; 1
    46a6:	98 0f       	add	r25, r24
    46a8:	90 93 6c 25 	sts	0x256C, r25	; 0x80256c <adcb_enable_count>
    46ac:	81 11       	cpse	r24, r1
    46ae:	04 c0       	rjmp	.+8      	; 0x46b8 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    46b0:	62 e0       	ldi	r22, 0x02	; 2
    46b2:	82 e0       	ldi	r24, 0x02	; 2
    46b4:	0c 94 2c 42 	jmp	0x8458	; 0x8458 <sysclk_enable_module>
    46b8:	08 95       	ret

000046ba <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    46ba:	81 15       	cp	r24, r1
    46bc:	22 e0       	ldi	r18, 0x02	; 2
    46be:	92 07       	cpc	r25, r18
    46c0:	61 f4       	brne	.+24     	; 0x46da <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    46c2:	80 91 6d 25 	lds	r24, 0x256D	; 0x80256d <adca_enable_count>
    46c6:	81 50       	subi	r24, 0x01	; 1
    46c8:	80 93 6d 25 	sts	0x256D, r24	; 0x80256d <adca_enable_count>
    46cc:	81 11       	cpse	r24, r1
    46ce:	13 c0       	rjmp	.+38     	; 0x46f6 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    46d0:	62 e0       	ldi	r22, 0x02	; 2
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	0c 94 42 42 	jmp	0x8484	; 0x8484 <sysclk_disable_module>
    46d8:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    46da:	80 34       	cpi	r24, 0x40	; 64
    46dc:	92 40       	sbci	r25, 0x02	; 2
    46de:	59 f4       	brne	.+22     	; 0x46f6 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    46e0:	80 91 6c 25 	lds	r24, 0x256C	; 0x80256c <adcb_enable_count>
    46e4:	81 50       	subi	r24, 0x01	; 1
    46e6:	80 93 6c 25 	sts	0x256C, r24	; 0x80256c <adcb_enable_count>
    46ea:	81 11       	cpse	r24, r1
    46ec:	04 c0       	rjmp	.+8      	; 0x46f6 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    46ee:	62 e0       	ldi	r22, 0x02	; 2
    46f0:	82 e0       	ldi	r24, 0x02	; 2
    46f2:	0c 94 42 42 	jmp	0x8484	; 0x8484 <sysclk_disable_module>
    46f6:	08 95       	ret

000046f8 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    46f8:	ef 92       	push	r14
    46fa:	ff 92       	push	r15
    46fc:	1f 93       	push	r17
    46fe:	cf 93       	push	r28
    4700:	df 93       	push	r29
    4702:	1f 92       	push	r1
    4704:	1f 92       	push	r1
    4706:	cd b7       	in	r28, 0x3d	; 61
    4708:	de b7       	in	r29, 0x3e	; 62
    470a:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    470c:	8f b7       	in	r24, 0x3f	; 63
    470e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4710:	f8 94       	cli
	return flags;
    4712:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    4714:	c7 01       	movw	r24, r14
    4716:	b0 df       	rcall	.-160    	; 0x4678 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    4718:	f7 01       	movw	r30, r14
    471a:	80 81       	ld	r24, Z
    471c:	81 60       	ori	r24, 0x01	; 1
    471e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4720:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4722:	80 91 a0 29 	lds	r24, 0x29A0	; 0x8029a0 <sleepmgr_locks+0x1>
    4726:	8f 3f       	cpi	r24, 0xFF	; 255
    4728:	09 f4       	brne	.+2      	; 0x472c <adc_enable+0x34>
    472a:	ff cf       	rjmp	.-2      	; 0x472a <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    472c:	8f b7       	in	r24, 0x3f	; 63
    472e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    4730:	f8 94       	cli
	return flags;
    4732:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4734:	ef e9       	ldi	r30, 0x9F	; 159
    4736:	f9 e2       	ldi	r31, 0x29	; 41
    4738:	81 81       	ldd	r24, Z+1	; 0x01
    473a:	8f 5f       	subi	r24, 0xFF	; 255
    473c:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    473e:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    4740:	0f 90       	pop	r0
    4742:	0f 90       	pop	r0
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	1f 91       	pop	r17
    474a:	ff 90       	pop	r15
    474c:	ef 90       	pop	r14
    474e:	08 95       	ret

00004750 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    4750:	1f 92       	push	r1
    4752:	0f 92       	push	r0
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	0f 92       	push	r0
    4758:	11 24       	eor	r1, r1
    475a:	0b b6       	in	r0, 0x3b	; 59
    475c:	0f 92       	push	r0
    475e:	2f 93       	push	r18
    4760:	3f 93       	push	r19
    4762:	4f 93       	push	r20
    4764:	5f 93       	push	r21
    4766:	6f 93       	push	r22
    4768:	7f 93       	push	r23
    476a:	8f 93       	push	r24
    476c:	9f 93       	push	r25
    476e:	af 93       	push	r26
    4770:	bf 93       	push	r27
    4772:	ef 93       	push	r30
    4774:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    4776:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    477a:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    477e:	e0 91 8d 29 	lds	r30, 0x298D	; 0x80298d <adca_callback>
    4782:	f0 91 8e 29 	lds	r31, 0x298E	; 0x80298e <adca_callback+0x1>
    4786:	61 e0       	ldi	r22, 0x01	; 1
    4788:	80 e0       	ldi	r24, 0x00	; 0
    478a:	92 e0       	ldi	r25, 0x02	; 2
    478c:	19 95       	eicall
}
    478e:	ff 91       	pop	r31
    4790:	ef 91       	pop	r30
    4792:	bf 91       	pop	r27
    4794:	af 91       	pop	r26
    4796:	9f 91       	pop	r25
    4798:	8f 91       	pop	r24
    479a:	7f 91       	pop	r23
    479c:	6f 91       	pop	r22
    479e:	5f 91       	pop	r21
    47a0:	4f 91       	pop	r20
    47a2:	3f 91       	pop	r19
    47a4:	2f 91       	pop	r18
    47a6:	0f 90       	pop	r0
    47a8:	0b be       	out	0x3b, r0	; 59
    47aa:	0f 90       	pop	r0
    47ac:	0f be       	out	0x3f, r0	; 63
    47ae:	0f 90       	pop	r0
    47b0:	1f 90       	pop	r1
    47b2:	18 95       	reti

000047b4 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    47b4:	1f 92       	push	r1
    47b6:	0f 92       	push	r0
    47b8:	0f b6       	in	r0, 0x3f	; 63
    47ba:	0f 92       	push	r0
    47bc:	11 24       	eor	r1, r1
    47be:	0b b6       	in	r0, 0x3b	; 59
    47c0:	0f 92       	push	r0
    47c2:	2f 93       	push	r18
    47c4:	3f 93       	push	r19
    47c6:	4f 93       	push	r20
    47c8:	5f 93       	push	r21
    47ca:	6f 93       	push	r22
    47cc:	7f 93       	push	r23
    47ce:	8f 93       	push	r24
    47d0:	9f 93       	push	r25
    47d2:	af 93       	push	r26
    47d4:	bf 93       	push	r27
    47d6:	ef 93       	push	r30
    47d8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    47da:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    47de:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    47e2:	e0 91 8d 29 	lds	r30, 0x298D	; 0x80298d <adca_callback>
    47e6:	f0 91 8e 29 	lds	r31, 0x298E	; 0x80298e <adca_callback+0x1>
    47ea:	62 e0       	ldi	r22, 0x02	; 2
    47ec:	80 e0       	ldi	r24, 0x00	; 0
    47ee:	92 e0       	ldi	r25, 0x02	; 2
    47f0:	19 95       	eicall
}
    47f2:	ff 91       	pop	r31
    47f4:	ef 91       	pop	r30
    47f6:	bf 91       	pop	r27
    47f8:	af 91       	pop	r26
    47fa:	9f 91       	pop	r25
    47fc:	8f 91       	pop	r24
    47fe:	7f 91       	pop	r23
    4800:	6f 91       	pop	r22
    4802:	5f 91       	pop	r21
    4804:	4f 91       	pop	r20
    4806:	3f 91       	pop	r19
    4808:	2f 91       	pop	r18
    480a:	0f 90       	pop	r0
    480c:	0b be       	out	0x3b, r0	; 59
    480e:	0f 90       	pop	r0
    4810:	0f be       	out	0x3f, r0	; 63
    4812:	0f 90       	pop	r0
    4814:	1f 90       	pop	r1
    4816:	18 95       	reti

00004818 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    4818:	1f 92       	push	r1
    481a:	0f 92       	push	r0
    481c:	0f b6       	in	r0, 0x3f	; 63
    481e:	0f 92       	push	r0
    4820:	11 24       	eor	r1, r1
    4822:	0b b6       	in	r0, 0x3b	; 59
    4824:	0f 92       	push	r0
    4826:	2f 93       	push	r18
    4828:	3f 93       	push	r19
    482a:	4f 93       	push	r20
    482c:	5f 93       	push	r21
    482e:	6f 93       	push	r22
    4830:	7f 93       	push	r23
    4832:	8f 93       	push	r24
    4834:	9f 93       	push	r25
    4836:	af 93       	push	r26
    4838:	bf 93       	push	r27
    483a:	ef 93       	push	r30
    483c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    483e:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    4842:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    4846:	e0 91 8d 29 	lds	r30, 0x298D	; 0x80298d <adca_callback>
    484a:	f0 91 8e 29 	lds	r31, 0x298E	; 0x80298e <adca_callback+0x1>
    484e:	64 e0       	ldi	r22, 0x04	; 4
    4850:	80 e0       	ldi	r24, 0x00	; 0
    4852:	92 e0       	ldi	r25, 0x02	; 2
    4854:	19 95       	eicall
}
    4856:	ff 91       	pop	r31
    4858:	ef 91       	pop	r30
    485a:	bf 91       	pop	r27
    485c:	af 91       	pop	r26
    485e:	9f 91       	pop	r25
    4860:	8f 91       	pop	r24
    4862:	7f 91       	pop	r23
    4864:	6f 91       	pop	r22
    4866:	5f 91       	pop	r21
    4868:	4f 91       	pop	r20
    486a:	3f 91       	pop	r19
    486c:	2f 91       	pop	r18
    486e:	0f 90       	pop	r0
    4870:	0b be       	out	0x3b, r0	; 59
    4872:	0f 90       	pop	r0
    4874:	0f be       	out	0x3f, r0	; 63
    4876:	0f 90       	pop	r0
    4878:	1f 90       	pop	r1
    487a:	18 95       	reti

0000487c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    487c:	1f 92       	push	r1
    487e:	0f 92       	push	r0
    4880:	0f b6       	in	r0, 0x3f	; 63
    4882:	0f 92       	push	r0
    4884:	11 24       	eor	r1, r1
    4886:	0b b6       	in	r0, 0x3b	; 59
    4888:	0f 92       	push	r0
    488a:	2f 93       	push	r18
    488c:	3f 93       	push	r19
    488e:	4f 93       	push	r20
    4890:	5f 93       	push	r21
    4892:	6f 93       	push	r22
    4894:	7f 93       	push	r23
    4896:	8f 93       	push	r24
    4898:	9f 93       	push	r25
    489a:	af 93       	push	r26
    489c:	bf 93       	push	r27
    489e:	ef 93       	push	r30
    48a0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    48a2:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    48a6:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    48aa:	e0 91 8d 29 	lds	r30, 0x298D	; 0x80298d <adca_callback>
    48ae:	f0 91 8e 29 	lds	r31, 0x298E	; 0x80298e <adca_callback+0x1>
    48b2:	68 e0       	ldi	r22, 0x08	; 8
    48b4:	80 e0       	ldi	r24, 0x00	; 0
    48b6:	92 e0       	ldi	r25, 0x02	; 2
    48b8:	19 95       	eicall
}
    48ba:	ff 91       	pop	r31
    48bc:	ef 91       	pop	r30
    48be:	bf 91       	pop	r27
    48c0:	af 91       	pop	r26
    48c2:	9f 91       	pop	r25
    48c4:	8f 91       	pop	r24
    48c6:	7f 91       	pop	r23
    48c8:	6f 91       	pop	r22
    48ca:	5f 91       	pop	r21
    48cc:	4f 91       	pop	r20
    48ce:	3f 91       	pop	r19
    48d0:	2f 91       	pop	r18
    48d2:	0f 90       	pop	r0
    48d4:	0b be       	out	0x3b, r0	; 59
    48d6:	0f 90       	pop	r0
    48d8:	0f be       	out	0x3f, r0	; 63
    48da:	0f 90       	pop	r0
    48dc:	1f 90       	pop	r1
    48de:	18 95       	reti

000048e0 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    48e0:	1f 92       	push	r1
    48e2:	0f 92       	push	r0
    48e4:	0f b6       	in	r0, 0x3f	; 63
    48e6:	0f 92       	push	r0
    48e8:	11 24       	eor	r1, r1
    48ea:	0b b6       	in	r0, 0x3b	; 59
    48ec:	0f 92       	push	r0
    48ee:	2f 93       	push	r18
    48f0:	3f 93       	push	r19
    48f2:	4f 93       	push	r20
    48f4:	5f 93       	push	r21
    48f6:	6f 93       	push	r22
    48f8:	7f 93       	push	r23
    48fa:	8f 93       	push	r24
    48fc:	9f 93       	push	r25
    48fe:	af 93       	push	r26
    4900:	bf 93       	push	r27
    4902:	ef 93       	push	r30
    4904:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    4906:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    490a:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    490e:	e0 91 8b 29 	lds	r30, 0x298B	; 0x80298b <adcb_callback>
    4912:	f0 91 8c 29 	lds	r31, 0x298C	; 0x80298c <adcb_callback+0x1>
    4916:	61 e0       	ldi	r22, 0x01	; 1
    4918:	80 e4       	ldi	r24, 0x40	; 64
    491a:	92 e0       	ldi	r25, 0x02	; 2
    491c:	19 95       	eicall
}
    491e:	ff 91       	pop	r31
    4920:	ef 91       	pop	r30
    4922:	bf 91       	pop	r27
    4924:	af 91       	pop	r26
    4926:	9f 91       	pop	r25
    4928:	8f 91       	pop	r24
    492a:	7f 91       	pop	r23
    492c:	6f 91       	pop	r22
    492e:	5f 91       	pop	r21
    4930:	4f 91       	pop	r20
    4932:	3f 91       	pop	r19
    4934:	2f 91       	pop	r18
    4936:	0f 90       	pop	r0
    4938:	0b be       	out	0x3b, r0	; 59
    493a:	0f 90       	pop	r0
    493c:	0f be       	out	0x3f, r0	; 63
    493e:	0f 90       	pop	r0
    4940:	1f 90       	pop	r1
    4942:	18 95       	reti

00004944 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    4944:	1f 92       	push	r1
    4946:	0f 92       	push	r0
    4948:	0f b6       	in	r0, 0x3f	; 63
    494a:	0f 92       	push	r0
    494c:	11 24       	eor	r1, r1
    494e:	0b b6       	in	r0, 0x3b	; 59
    4950:	0f 92       	push	r0
    4952:	2f 93       	push	r18
    4954:	3f 93       	push	r19
    4956:	4f 93       	push	r20
    4958:	5f 93       	push	r21
    495a:	6f 93       	push	r22
    495c:	7f 93       	push	r23
    495e:	8f 93       	push	r24
    4960:	9f 93       	push	r25
    4962:	af 93       	push	r26
    4964:	bf 93       	push	r27
    4966:	ef 93       	push	r30
    4968:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    496a:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    496e:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    4972:	e0 91 8b 29 	lds	r30, 0x298B	; 0x80298b <adcb_callback>
    4976:	f0 91 8c 29 	lds	r31, 0x298C	; 0x80298c <adcb_callback+0x1>
    497a:	62 e0       	ldi	r22, 0x02	; 2
    497c:	80 e4       	ldi	r24, 0x40	; 64
    497e:	92 e0       	ldi	r25, 0x02	; 2
    4980:	19 95       	eicall
}
    4982:	ff 91       	pop	r31
    4984:	ef 91       	pop	r30
    4986:	bf 91       	pop	r27
    4988:	af 91       	pop	r26
    498a:	9f 91       	pop	r25
    498c:	8f 91       	pop	r24
    498e:	7f 91       	pop	r23
    4990:	6f 91       	pop	r22
    4992:	5f 91       	pop	r21
    4994:	4f 91       	pop	r20
    4996:	3f 91       	pop	r19
    4998:	2f 91       	pop	r18
    499a:	0f 90       	pop	r0
    499c:	0b be       	out	0x3b, r0	; 59
    499e:	0f 90       	pop	r0
    49a0:	0f be       	out	0x3f, r0	; 63
    49a2:	0f 90       	pop	r0
    49a4:	1f 90       	pop	r1
    49a6:	18 95       	reti

000049a8 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    49a8:	1f 92       	push	r1
    49aa:	0f 92       	push	r0
    49ac:	0f b6       	in	r0, 0x3f	; 63
    49ae:	0f 92       	push	r0
    49b0:	11 24       	eor	r1, r1
    49b2:	0b b6       	in	r0, 0x3b	; 59
    49b4:	0f 92       	push	r0
    49b6:	2f 93       	push	r18
    49b8:	3f 93       	push	r19
    49ba:	4f 93       	push	r20
    49bc:	5f 93       	push	r21
    49be:	6f 93       	push	r22
    49c0:	7f 93       	push	r23
    49c2:	8f 93       	push	r24
    49c4:	9f 93       	push	r25
    49c6:	af 93       	push	r26
    49c8:	bf 93       	push	r27
    49ca:	ef 93       	push	r30
    49cc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    49ce:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    49d2:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    49d6:	e0 91 8b 29 	lds	r30, 0x298B	; 0x80298b <adcb_callback>
    49da:	f0 91 8c 29 	lds	r31, 0x298C	; 0x80298c <adcb_callback+0x1>
    49de:	64 e0       	ldi	r22, 0x04	; 4
    49e0:	80 e4       	ldi	r24, 0x40	; 64
    49e2:	92 e0       	ldi	r25, 0x02	; 2
    49e4:	19 95       	eicall
}
    49e6:	ff 91       	pop	r31
    49e8:	ef 91       	pop	r30
    49ea:	bf 91       	pop	r27
    49ec:	af 91       	pop	r26
    49ee:	9f 91       	pop	r25
    49f0:	8f 91       	pop	r24
    49f2:	7f 91       	pop	r23
    49f4:	6f 91       	pop	r22
    49f6:	5f 91       	pop	r21
    49f8:	4f 91       	pop	r20
    49fa:	3f 91       	pop	r19
    49fc:	2f 91       	pop	r18
    49fe:	0f 90       	pop	r0
    4a00:	0b be       	out	0x3b, r0	; 59
    4a02:	0f 90       	pop	r0
    4a04:	0f be       	out	0x3f, r0	; 63
    4a06:	0f 90       	pop	r0
    4a08:	1f 90       	pop	r1
    4a0a:	18 95       	reti

00004a0c <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    4a0c:	1f 92       	push	r1
    4a0e:	0f 92       	push	r0
    4a10:	0f b6       	in	r0, 0x3f	; 63
    4a12:	0f 92       	push	r0
    4a14:	11 24       	eor	r1, r1
    4a16:	0b b6       	in	r0, 0x3b	; 59
    4a18:	0f 92       	push	r0
    4a1a:	2f 93       	push	r18
    4a1c:	3f 93       	push	r19
    4a1e:	4f 93       	push	r20
    4a20:	5f 93       	push	r21
    4a22:	6f 93       	push	r22
    4a24:	7f 93       	push	r23
    4a26:	8f 93       	push	r24
    4a28:	9f 93       	push	r25
    4a2a:	af 93       	push	r26
    4a2c:	bf 93       	push	r27
    4a2e:	ef 93       	push	r30
    4a30:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    4a32:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    4a36:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    4a3a:	e0 91 8b 29 	lds	r30, 0x298B	; 0x80298b <adcb_callback>
    4a3e:	f0 91 8c 29 	lds	r31, 0x298C	; 0x80298c <adcb_callback+0x1>
    4a42:	68 e0       	ldi	r22, 0x08	; 8
    4a44:	80 e4       	ldi	r24, 0x40	; 64
    4a46:	92 e0       	ldi	r25, 0x02	; 2
    4a48:	19 95       	eicall
}
    4a4a:	ff 91       	pop	r31
    4a4c:	ef 91       	pop	r30
    4a4e:	bf 91       	pop	r27
    4a50:	af 91       	pop	r26
    4a52:	9f 91       	pop	r25
    4a54:	8f 91       	pop	r24
    4a56:	7f 91       	pop	r23
    4a58:	6f 91       	pop	r22
    4a5a:	5f 91       	pop	r21
    4a5c:	4f 91       	pop	r20
    4a5e:	3f 91       	pop	r19
    4a60:	2f 91       	pop	r18
    4a62:	0f 90       	pop	r0
    4a64:	0b be       	out	0x3b, r0	; 59
    4a66:	0f 90       	pop	r0
    4a68:	0f be       	out	0x3f, r0	; 63
    4a6a:	0f 90       	pop	r0
    4a6c:	1f 90       	pop	r1
    4a6e:	18 95       	reti

00004a70 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    4a70:	bf 92       	push	r11
    4a72:	cf 92       	push	r12
    4a74:	df 92       	push	r13
    4a76:	ef 92       	push	r14
    4a78:	ff 92       	push	r15
    4a7a:	0f 93       	push	r16
    4a7c:	1f 93       	push	r17
    4a7e:	cf 93       	push	r28
    4a80:	df 93       	push	r29
    4a82:	1f 92       	push	r1
    4a84:	cd b7       	in	r28, 0x3d	; 61
    4a86:	de b7       	in	r29, 0x3e	; 62
    4a88:	8c 01       	movw	r16, r24
    4a8a:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    4a8c:	81 15       	cp	r24, r1
    4a8e:	22 e0       	ldi	r18, 0x02	; 2
    4a90:	92 07       	cpc	r25, r18
    4a92:	81 f4       	brne	.+32     	; 0x4ab4 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    4a94:	61 e2       	ldi	r22, 0x21	; 33
    4a96:	70 e0       	ldi	r23, 0x00	; 0
    4a98:	82 e0       	ldi	r24, 0x02	; 2
    4a9a:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    4a9e:	c8 2e       	mov	r12, r24
    4aa0:	d1 2c       	mov	r13, r1
    4aa2:	60 e2       	ldi	r22, 0x20	; 32
    4aa4:	70 e0       	ldi	r23, 0x00	; 0
    4aa6:	82 e0       	ldi	r24, 0x02	; 2
    4aa8:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    4aac:	dc 2c       	mov	r13, r12
    4aae:	cc 24       	eor	r12, r12
    4ab0:	c8 2a       	or	r12, r24
    4ab2:	12 c0       	rjmp	.+36     	; 0x4ad8 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    4ab4:	80 34       	cpi	r24, 0x40	; 64
    4ab6:	92 40       	sbci	r25, 0x02	; 2
    4ab8:	d1 f5       	brne	.+116    	; 0x4b2e <adc_write_configuration+0xbe>
    4aba:	65 e2       	ldi	r22, 0x25	; 37
    4abc:	70 e0       	ldi	r23, 0x00	; 0
    4abe:	82 e0       	ldi	r24, 0x02	; 2
    4ac0:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    4ac4:	c8 2e       	mov	r12, r24
    4ac6:	d1 2c       	mov	r13, r1
    4ac8:	64 e2       	ldi	r22, 0x24	; 36
    4aca:	70 e0       	ldi	r23, 0x00	; 0
    4acc:	82 e0       	ldi	r24, 0x02	; 2
    4ace:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    4ad2:	dc 2c       	mov	r13, r12
    4ad4:	cc 24       	eor	r12, r12
    4ad6:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4ad8:	8f b7       	in	r24, 0x3f	; 63
    4ada:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4adc:	f8 94       	cli
	return flags;
    4ade:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    4ae0:	c8 01       	movw	r24, r16
    4ae2:	ca dd       	rcall	.-1132   	; 0x4678 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    4ae4:	f8 01       	movw	r30, r16
    4ae6:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    4ae8:	92 e0       	ldi	r25, 0x02	; 2
    4aea:	90 83       	st	Z, r25
	adc->CAL = cal;
    4aec:	c4 86       	std	Z+12, r12	; 0x0c
    4aee:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    4af0:	f7 01       	movw	r30, r14
    4af2:	25 81       	ldd	r18, Z+5	; 0x05
    4af4:	36 81       	ldd	r19, Z+6	; 0x06
    4af6:	f8 01       	movw	r30, r16
    4af8:	20 8f       	std	Z+24, r18	; 0x18
    4afa:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    4afc:	f7 01       	movw	r30, r14
    4afe:	92 81       	ldd	r25, Z+2	; 0x02
    4b00:	f8 01       	movw	r30, r16
    4b02:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    4b04:	f7 01       	movw	r30, r14
    4b06:	94 81       	ldd	r25, Z+4	; 0x04
    4b08:	f8 01       	movw	r30, r16
    4b0a:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    4b0c:	f7 01       	movw	r30, r14
    4b0e:	93 81       	ldd	r25, Z+3	; 0x03
    4b10:	f8 01       	movw	r30, r16
    4b12:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    4b14:	f7 01       	movw	r30, r14
    4b16:	91 81       	ldd	r25, Z+1	; 0x01
    4b18:	f8 01       	movw	r30, r16
    4b1a:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    4b1c:	81 70       	andi	r24, 0x01	; 1
    4b1e:	f7 01       	movw	r30, r14
    4b20:	90 81       	ld	r25, Z
    4b22:	89 2b       	or	r24, r25
    4b24:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    4b26:	80 83       	st	Z, r24
    4b28:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4b2a:	c7 dd       	rcall	.-1138   	; 0x46ba <adc_disable_clock>

	cpu_irq_restore(flags);
}
    4b2c:	bf be       	out	0x3f, r11	; 63
    4b2e:	0f 90       	pop	r0
    4b30:	df 91       	pop	r29
    4b32:	cf 91       	pop	r28
    4b34:	1f 91       	pop	r17
    4b36:	0f 91       	pop	r16
    4b38:	ff 90       	pop	r15
    4b3a:	ef 90       	pop	r14
    4b3c:	df 90       	pop	r13
    4b3e:	cf 90       	pop	r12
    4b40:	bf 90       	pop	r11
    4b42:	08 95       	ret

00004b44 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    4b44:	df 92       	push	r13
    4b46:	ef 92       	push	r14
    4b48:	ff 92       	push	r15
    4b4a:	0f 93       	push	r16
    4b4c:	1f 93       	push	r17
    4b4e:	cf 93       	push	r28
    4b50:	df 93       	push	r29
    4b52:	1f 92       	push	r1
    4b54:	cd b7       	in	r28, 0x3d	; 61
    4b56:	de b7       	in	r29, 0x3e	; 62
    4b58:	8c 01       	movw	r16, r24
    4b5a:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4b5c:	8f b7       	in	r24, 0x3f	; 63
    4b5e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4b60:	f8 94       	cli
	return flags;
    4b62:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    4b64:	c8 01       	movw	r24, r16
    4b66:	88 dd       	rcall	.-1264   	; 0x4678 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    4b68:	f8 01       	movw	r30, r16
    4b6a:	80 81       	ld	r24, Z
    4b6c:	80 7c       	andi	r24, 0xC0	; 192
    4b6e:	f7 01       	movw	r30, r14
    4b70:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    4b72:	f8 01       	movw	r30, r16
    4b74:	80 8d       	ldd	r24, Z+24	; 0x18
    4b76:	91 8d       	ldd	r25, Z+25	; 0x19
    4b78:	f7 01       	movw	r30, r14
    4b7a:	85 83       	std	Z+5, r24	; 0x05
    4b7c:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    4b7e:	f8 01       	movw	r30, r16
    4b80:	82 81       	ldd	r24, Z+2	; 0x02
    4b82:	f7 01       	movw	r30, r14
    4b84:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    4b86:	f8 01       	movw	r30, r16
    4b88:	84 81       	ldd	r24, Z+4	; 0x04
    4b8a:	f7 01       	movw	r30, r14
    4b8c:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    4b8e:	f8 01       	movw	r30, r16
    4b90:	83 81       	ldd	r24, Z+3	; 0x03
    4b92:	f7 01       	movw	r30, r14
    4b94:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    4b96:	f8 01       	movw	r30, r16
    4b98:	81 81       	ldd	r24, Z+1	; 0x01
    4b9a:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    4b9c:	81 83       	std	Z+1, r24	; 0x01
    4b9e:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4ba0:	8c dd       	rcall	.-1256   	; 0x46ba <adc_disable_clock>

	cpu_irq_restore(flags);
}
    4ba2:	df be       	out	0x3f, r13	; 63
    4ba4:	0f 90       	pop	r0
    4ba6:	df 91       	pop	r29
    4ba8:	cf 91       	pop	r28
    4baa:	1f 91       	pop	r17
    4bac:	0f 91       	pop	r16
    4bae:	ff 90       	pop	r15
    4bb0:	ef 90       	pop	r14
    4bb2:	df 90       	pop	r13
    4bb4:	08 95       	ret

00004bb6 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    4bb6:	af 92       	push	r10
    4bb8:	bf 92       	push	r11
    4bba:	cf 92       	push	r12
    4bbc:	df 92       	push	r13
    4bbe:	ef 92       	push	r14
    4bc0:	ff 92       	push	r15
    4bc2:	0f 93       	push	r16
    4bc4:	1f 93       	push	r17
    4bc6:	cf 93       	push	r28
    4bc8:	df 93       	push	r29
    4bca:	1f 92       	push	r1
    4bcc:	cd b7       	in	r28, 0x3d	; 61
    4bce:	de b7       	in	r29, 0x3e	; 62
    4bd0:	6c 01       	movw	r12, r24
    4bd2:	b6 2e       	mov	r11, r22
    4bd4:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    4bd6:	86 2f       	mov	r24, r22
    4bd8:	83 70       	andi	r24, 0x03	; 3
    4bda:	29 f4       	brne	.+10     	; 0x4be6 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    4bdc:	96 2f       	mov	r25, r22
    4bde:	96 95       	lsr	r25
    4be0:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    4be2:	82 e0       	ldi	r24, 0x02	; 2
    4be4:	02 c0       	rjmp	.+4      	; 0x4bea <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    4be6:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    4be8:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    4bea:	90 ff       	sbrs	r25, 0
		index++;
    4bec:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    4bee:	86 01       	movw	r16, r12
    4bf0:	00 5e       	subi	r16, 0xE0	; 224
    4bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf4:	98 e0       	ldi	r25, 0x08	; 8
    4bf6:	89 9f       	mul	r24, r25
    4bf8:	00 0d       	add	r16, r0
    4bfa:	11 1d       	adc	r17, r1
    4bfc:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4bfe:	8f b7       	in	r24, 0x3f	; 63
    4c00:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4c02:	f8 94       	cli
	return flags;
    4c04:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    4c06:	c6 01       	movw	r24, r12
    4c08:	37 dd       	rcall	.-1426   	; 0x4678 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    4c0a:	f7 01       	movw	r30, r14
    4c0c:	80 81       	ld	r24, Z
    4c0e:	f8 01       	movw	r30, r16
    4c10:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    4c12:	f7 01       	movw	r30, r14
    4c14:	82 81       	ldd	r24, Z+2	; 0x02
    4c16:	f8 01       	movw	r30, r16
    4c18:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    4c1a:	f7 01       	movw	r30, r14
    4c1c:	81 81       	ldd	r24, Z+1	; 0x01
    4c1e:	f8 01       	movw	r30, r16
    4c20:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    4c22:	b0 fe       	sbrs	r11, 0
    4c24:	04 c0       	rjmp	.+8      	; 0x4c2e <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    4c26:	f7 01       	movw	r30, r14
    4c28:	83 81       	ldd	r24, Z+3	; 0x03
    4c2a:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    4c2c:	86 83       	std	Z+6, r24	; 0x06
    4c2e:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4c30:	44 dd       	rcall	.-1400   	; 0x46ba <adc_disable_clock>

	cpu_irq_restore(flags);
}
    4c32:	af be       	out	0x3f, r10	; 63
    4c34:	0f 90       	pop	r0
    4c36:	df 91       	pop	r29
    4c38:	cf 91       	pop	r28
    4c3a:	1f 91       	pop	r17
    4c3c:	0f 91       	pop	r16
    4c3e:	ff 90       	pop	r15
    4c40:	ef 90       	pop	r14
    4c42:	df 90       	pop	r13
    4c44:	cf 90       	pop	r12
    4c46:	bf 90       	pop	r11
    4c48:	af 90       	pop	r10
    4c4a:	08 95       	ret

00004c4c <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    4c4c:	af 92       	push	r10
    4c4e:	bf 92       	push	r11
    4c50:	cf 92       	push	r12
    4c52:	df 92       	push	r13
    4c54:	ef 92       	push	r14
    4c56:	ff 92       	push	r15
    4c58:	0f 93       	push	r16
    4c5a:	1f 93       	push	r17
    4c5c:	cf 93       	push	r28
    4c5e:	df 93       	push	r29
    4c60:	1f 92       	push	r1
    4c62:	cd b7       	in	r28, 0x3d	; 61
    4c64:	de b7       	in	r29, 0x3e	; 62
    4c66:	6c 01       	movw	r12, r24
    4c68:	b6 2e       	mov	r11, r22
    4c6a:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    4c6c:	86 2f       	mov	r24, r22
    4c6e:	83 70       	andi	r24, 0x03	; 3
    4c70:	29 f4       	brne	.+10     	; 0x4c7c <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    4c72:	96 2f       	mov	r25, r22
    4c74:	96 95       	lsr	r25
    4c76:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    4c78:	82 e0       	ldi	r24, 0x02	; 2
    4c7a:	02 c0       	rjmp	.+4      	; 0x4c80 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    4c7c:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    4c7e:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    4c80:	90 ff       	sbrs	r25, 0
		index++;
    4c82:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    4c84:	86 01       	movw	r16, r12
    4c86:	00 5e       	subi	r16, 0xE0	; 224
    4c88:	1f 4f       	sbci	r17, 0xFF	; 255
    4c8a:	98 e0       	ldi	r25, 0x08	; 8
    4c8c:	89 9f       	mul	r24, r25
    4c8e:	00 0d       	add	r16, r0
    4c90:	11 1d       	adc	r17, r1
    4c92:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4c94:	8f b7       	in	r24, 0x3f	; 63
    4c96:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4c98:	f8 94       	cli
	return flags;
    4c9a:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    4c9c:	c6 01       	movw	r24, r12
    4c9e:	ec dc       	rcall	.-1576   	; 0x4678 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    4ca0:	f8 01       	movw	r30, r16
    4ca2:	80 81       	ld	r24, Z
    4ca4:	f7 01       	movw	r30, r14
    4ca6:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    4ca8:	f8 01       	movw	r30, r16
    4caa:	82 81       	ldd	r24, Z+2	; 0x02
    4cac:	f7 01       	movw	r30, r14
    4cae:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    4cb0:	f8 01       	movw	r30, r16
    4cb2:	81 81       	ldd	r24, Z+1	; 0x01
    4cb4:	f7 01       	movw	r30, r14
    4cb6:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    4cb8:	b0 fe       	sbrs	r11, 0
    4cba:	04 c0       	rjmp	.+8      	; 0x4cc4 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    4cbc:	f8 01       	movw	r30, r16
    4cbe:	86 81       	ldd	r24, Z+6	; 0x06
    4cc0:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    4cc2:	83 83       	std	Z+3, r24	; 0x03
    4cc4:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4cc6:	f9 dc       	rcall	.-1550   	; 0x46ba <adc_disable_clock>

	cpu_irq_restore(flags);
}
    4cc8:	af be       	out	0x3f, r10	; 63
    4cca:	0f 90       	pop	r0
    4ccc:	df 91       	pop	r29
    4cce:	cf 91       	pop	r28
    4cd0:	1f 91       	pop	r17
    4cd2:	0f 91       	pop	r16
    4cd4:	ff 90       	pop	r15
    4cd6:	ef 90       	pop	r14
    4cd8:	df 90       	pop	r13
    4cda:	cf 90       	pop	r12
    4cdc:	bf 90       	pop	r11
    4cde:	af 90       	pop	r10
    4ce0:	08 95       	ret

00004ce2 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    4ce2:	80 32       	cpi	r24, 0x20	; 32
    4ce4:	93 40       	sbci	r25, 0x03	; 3
    4ce6:	61 f4       	brne	.+24     	; 0x4d00 <dac_enable_clock+0x1e>
    4ce8:	80 91 6e 25 	lds	r24, 0x256E	; 0x80256e <dacb_enable_count>
    4cec:	91 e0       	ldi	r25, 0x01	; 1
    4cee:	98 0f       	add	r25, r24
    4cf0:	90 93 6e 25 	sts	0x256E, r25	; 0x80256e <dacb_enable_count>
    4cf4:	81 11       	cpse	r24, r1
    4cf6:	04 c0       	rjmp	.+8      	; 0x4d00 <dac_enable_clock+0x1e>
    4cf8:	64 e0       	ldi	r22, 0x04	; 4
    4cfa:	82 e0       	ldi	r24, 0x02	; 2
    4cfc:	0c 94 2c 42 	jmp	0x8458	; 0x8458 <sysclk_enable_module>
    4d00:	08 95       	ret

00004d02 <dac_disable_clock>:
    4d02:	80 32       	cpi	r24, 0x20	; 32
    4d04:	93 40       	sbci	r25, 0x03	; 3
    4d06:	59 f4       	brne	.+22     	; 0x4d1e <dac_disable_clock+0x1c>
    4d08:	80 91 6e 25 	lds	r24, 0x256E	; 0x80256e <dacb_enable_count>
    4d0c:	81 50       	subi	r24, 0x01	; 1
    4d0e:	80 93 6e 25 	sts	0x256E, r24	; 0x80256e <dacb_enable_count>
    4d12:	81 11       	cpse	r24, r1
    4d14:	04 c0       	rjmp	.+8      	; 0x4d1e <dac_disable_clock+0x1c>
    4d16:	64 e0       	ldi	r22, 0x04	; 4
    4d18:	82 e0       	ldi	r24, 0x02	; 2
    4d1a:	0c 94 42 42 	jmp	0x8484	; 0x8484 <sysclk_disable_module>
    4d1e:	08 95       	ret

00004d20 <dac_enable>:
    4d20:	ef 92       	push	r14
    4d22:	ff 92       	push	r15
    4d24:	1f 93       	push	r17
    4d26:	cf 93       	push	r28
    4d28:	df 93       	push	r29
    4d2a:	1f 92       	push	r1
    4d2c:	1f 92       	push	r1
    4d2e:	cd b7       	in	r28, 0x3d	; 61
    4d30:	de b7       	in	r29, 0x3e	; 62
    4d32:	2f b7       	in	r18, 0x3f	; 63
    4d34:	29 83       	std	Y+1, r18	; 0x01
    4d36:	f8 94       	cli
    4d38:	19 81       	ldd	r17, Y+1	; 0x01
    4d3a:	20 91 a0 29 	lds	r18, 0x29A0	; 0x8029a0 <sleepmgr_locks+0x1>
    4d3e:	2f 3f       	cpi	r18, 0xFF	; 255
    4d40:	09 f4       	brne	.+2      	; 0x4d44 <dac_enable+0x24>
    4d42:	ff cf       	rjmp	.-2      	; 0x4d42 <dac_enable+0x22>
    4d44:	7c 01       	movw	r14, r24
    4d46:	8f b7       	in	r24, 0x3f	; 63
    4d48:	8a 83       	std	Y+2, r24	; 0x02
    4d4a:	f8 94       	cli
    4d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d4e:	ef e9       	ldi	r30, 0x9F	; 159
    4d50:	f9 e2       	ldi	r31, 0x29	; 41
    4d52:	81 81       	ldd	r24, Z+1	; 0x01
    4d54:	8f 5f       	subi	r24, 0xFF	; 255
    4d56:	81 83       	std	Z+1, r24	; 0x01
    4d58:	9f bf       	out	0x3f, r25	; 63
    4d5a:	c7 01       	movw	r24, r14
    4d5c:	c2 df       	rcall	.-124    	; 0x4ce2 <dac_enable_clock>
    4d5e:	f7 01       	movw	r30, r14
    4d60:	80 81       	ld	r24, Z
    4d62:	81 60       	ori	r24, 0x01	; 1
    4d64:	80 83       	st	Z, r24
    4d66:	1f bf       	out	0x3f, r17	; 63
    4d68:	0f 90       	pop	r0
    4d6a:	0f 90       	pop	r0
    4d6c:	df 91       	pop	r29
    4d6e:	cf 91       	pop	r28
    4d70:	1f 91       	pop	r17
    4d72:	ff 90       	pop	r15
    4d74:	ef 90       	pop	r14
    4d76:	08 95       	ret

00004d78 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    4d78:	9f 92       	push	r9
    4d7a:	af 92       	push	r10
    4d7c:	bf 92       	push	r11
    4d7e:	cf 92       	push	r12
    4d80:	df 92       	push	r13
    4d82:	ef 92       	push	r14
    4d84:	ff 92       	push	r15
    4d86:	0f 93       	push	r16
    4d88:	1f 93       	push	r17
    4d8a:	cf 93       	push	r28
    4d8c:	df 93       	push	r29
    4d8e:	1f 92       	push	r1
    4d90:	cd b7       	in	r28, 0x3d	; 61
    4d92:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    4d94:	80 32       	cpi	r24, 0x20	; 32
    4d96:	23 e0       	ldi	r18, 0x03	; 3
    4d98:	92 07       	cpc	r25, r18
    4d9a:	09 f0       	breq	.+2      	; 0x4d9e <dac_write_configuration+0x26>
    4d9c:	3c c0       	rjmp	.+120    	; 0x4e16 <dac_write_configuration+0x9e>
    4d9e:	7b 01       	movw	r14, r22
    4da0:	8c 01       	movw	r16, r24
    4da2:	63 e3       	ldi	r22, 0x33	; 51
    4da4:	70 e0       	ldi	r23, 0x00	; 0
    4da6:	82 e0       	ldi	r24, 0x02	; 2
    4da8:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
    4dac:	98 2e       	mov	r9, r24
    4dae:	62 e3       	ldi	r22, 0x32	; 50
    4db0:	70 e0       	ldi	r23, 0x00	; 0
    4db2:	82 e0       	ldi	r24, 0x02	; 2
    4db4:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
    4db8:	a8 2e       	mov	r10, r24
    4dba:	67 e3       	ldi	r22, 0x37	; 55
    4dbc:	70 e0       	ldi	r23, 0x00	; 0
    4dbe:	82 e0       	ldi	r24, 0x02	; 2
    4dc0:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
    4dc4:	b8 2e       	mov	r11, r24
    4dc6:	66 e3       	ldi	r22, 0x36	; 54
    4dc8:	70 e0       	ldi	r23, 0x00	; 0
    4dca:	82 e0       	ldi	r24, 0x02	; 2
    4dcc:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
    4dd0:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4dd2:	8f b7       	in	r24, 0x3f	; 63
    4dd4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4dd6:	f8 94       	cli
	return flags;
    4dd8:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    4dda:	c8 01       	movw	r24, r16
    4ddc:	82 df       	rcall	.-252    	; 0x4ce2 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    4dde:	f8 01       	movw	r30, r16
    4de0:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    4de2:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    4de4:	f7 01       	movw	r30, r14
    4de6:	91 81       	ldd	r25, Z+1	; 0x01
    4de8:	f8 01       	movw	r30, r16
    4dea:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    4dec:	f7 01       	movw	r30, r14
    4dee:	92 81       	ldd	r25, Z+2	; 0x02
    4df0:	f8 01       	movw	r30, r16
    4df2:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    4df4:	f7 01       	movw	r30, r14
    4df6:	93 81       	ldd	r25, Z+3	; 0x03
    4df8:	f8 01       	movw	r30, r16
    4dfa:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    4dfc:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    4dfe:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    4e00:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    4e02:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    4e04:	81 70       	andi	r24, 0x01	; 1
    4e06:	f7 01       	movw	r30, r14
    4e08:	90 81       	ld	r25, Z
    4e0a:	89 2b       	or	r24, r25
    4e0c:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    4e0e:	80 83       	st	Z, r24
    4e10:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4e12:	77 df       	rcall	.-274    	; 0x4d02 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    4e14:	df be       	out	0x3f, r13	; 63
    4e16:	0f 90       	pop	r0
    4e18:	df 91       	pop	r29
    4e1a:	cf 91       	pop	r28
    4e1c:	1f 91       	pop	r17
    4e1e:	0f 91       	pop	r16
    4e20:	ff 90       	pop	r15
    4e22:	ef 90       	pop	r14
    4e24:	df 90       	pop	r13
    4e26:	cf 90       	pop	r12
    4e28:	bf 90       	pop	r11
    4e2a:	af 90       	pop	r10
    4e2c:	9f 90       	pop	r9
    4e2e:	08 95       	ret

00004e30 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    4e30:	df 92       	push	r13
    4e32:	ef 92       	push	r14
    4e34:	ff 92       	push	r15
    4e36:	0f 93       	push	r16
    4e38:	1f 93       	push	r17
    4e3a:	cf 93       	push	r28
    4e3c:	df 93       	push	r29
    4e3e:	1f 92       	push	r1
    4e40:	cd b7       	in	r28, 0x3d	; 61
    4e42:	de b7       	in	r29, 0x3e	; 62
    4e44:	8c 01       	movw	r16, r24
    4e46:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4e48:	8f b7       	in	r24, 0x3f	; 63
    4e4a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4e4c:	f8 94       	cli
	return flags;
    4e4e:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    4e50:	c8 01       	movw	r24, r16
    4e52:	47 df       	rcall	.-370    	; 0x4ce2 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    4e54:	f8 01       	movw	r30, r16
    4e56:	80 81       	ld	r24, Z
    4e58:	8e 7f       	andi	r24, 0xFE	; 254
    4e5a:	f7 01       	movw	r30, r14
    4e5c:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    4e5e:	f8 01       	movw	r30, r16
    4e60:	81 81       	ldd	r24, Z+1	; 0x01
    4e62:	f7 01       	movw	r30, r14
    4e64:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    4e66:	f8 01       	movw	r30, r16
    4e68:	82 81       	ldd	r24, Z+2	; 0x02
    4e6a:	f7 01       	movw	r30, r14
    4e6c:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    4e6e:	f8 01       	movw	r30, r16
    4e70:	83 81       	ldd	r24, Z+3	; 0x03
    4e72:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    4e74:	83 83       	std	Z+3, r24	; 0x03
    4e76:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4e78:	44 df       	rcall	.-376    	; 0x4d02 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    4e7a:	df be       	out	0x3f, r13	; 63
    4e7c:	0f 90       	pop	r0
    4e7e:	df 91       	pop	r29
    4e80:	cf 91       	pop	r28
    4e82:	1f 91       	pop	r17
    4e84:	0f 91       	pop	r16
    4e86:	ff 90       	pop	r15
    4e88:	ef 90       	pop	r14
    4e8a:	df 90       	pop	r13
    4e8c:	08 95       	ret

00004e8e <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    4e8e:	1f 92       	push	r1
    4e90:	0f 92       	push	r0
    4e92:	0f b6       	in	r0, 0x3f	; 63
    4e94:	0f 92       	push	r0
    4e96:	11 24       	eor	r1, r1
    4e98:	0b b6       	in	r0, 0x3b	; 59
    4e9a:	0f 92       	push	r0
    4e9c:	2f 93       	push	r18
    4e9e:	3f 93       	push	r19
    4ea0:	4f 93       	push	r20
    4ea2:	5f 93       	push	r21
    4ea4:	6f 93       	push	r22
    4ea6:	7f 93       	push	r23
    4ea8:	8f 93       	push	r24
    4eaa:	9f 93       	push	r25
    4eac:	af 93       	push	r26
    4eae:	bf 93       	push	r27
    4eb0:	ef 93       	push	r30
    4eb2:	ff 93       	push	r31
    4eb4:	e0 91 b5 25 	lds	r30, 0x25B5	; 0x8025b5 <tc_tcc0_ovf_callback>
    4eb8:	f0 91 b6 25 	lds	r31, 0x25B6	; 0x8025b6 <tc_tcc0_ovf_callback+0x1>
    4ebc:	30 97       	sbiw	r30, 0x00	; 0
    4ebe:	09 f0       	breq	.+2      	; 0x4ec2 <__vector_14+0x34>
    4ec0:	19 95       	eicall
    4ec2:	ff 91       	pop	r31
    4ec4:	ef 91       	pop	r30
    4ec6:	bf 91       	pop	r27
    4ec8:	af 91       	pop	r26
    4eca:	9f 91       	pop	r25
    4ecc:	8f 91       	pop	r24
    4ece:	7f 91       	pop	r23
    4ed0:	6f 91       	pop	r22
    4ed2:	5f 91       	pop	r21
    4ed4:	4f 91       	pop	r20
    4ed6:	3f 91       	pop	r19
    4ed8:	2f 91       	pop	r18
    4eda:	0f 90       	pop	r0
    4edc:	0b be       	out	0x3b, r0	; 59
    4ede:	0f 90       	pop	r0
    4ee0:	0f be       	out	0x3f, r0	; 63
    4ee2:	0f 90       	pop	r0
    4ee4:	1f 90       	pop	r1
    4ee6:	18 95       	reti

00004ee8 <__vector_15>:
    4ee8:	1f 92       	push	r1
    4eea:	0f 92       	push	r0
    4eec:	0f b6       	in	r0, 0x3f	; 63
    4eee:	0f 92       	push	r0
    4ef0:	11 24       	eor	r1, r1
    4ef2:	0b b6       	in	r0, 0x3b	; 59
    4ef4:	0f 92       	push	r0
    4ef6:	2f 93       	push	r18
    4ef8:	3f 93       	push	r19
    4efa:	4f 93       	push	r20
    4efc:	5f 93       	push	r21
    4efe:	6f 93       	push	r22
    4f00:	7f 93       	push	r23
    4f02:	8f 93       	push	r24
    4f04:	9f 93       	push	r25
    4f06:	af 93       	push	r26
    4f08:	bf 93       	push	r27
    4f0a:	ef 93       	push	r30
    4f0c:	ff 93       	push	r31
    4f0e:	e0 91 b3 25 	lds	r30, 0x25B3	; 0x8025b3 <tc_tcc0_err_callback>
    4f12:	f0 91 b4 25 	lds	r31, 0x25B4	; 0x8025b4 <tc_tcc0_err_callback+0x1>
    4f16:	30 97       	sbiw	r30, 0x00	; 0
    4f18:	09 f0       	breq	.+2      	; 0x4f1c <__vector_15+0x34>
    4f1a:	19 95       	eicall
    4f1c:	ff 91       	pop	r31
    4f1e:	ef 91       	pop	r30
    4f20:	bf 91       	pop	r27
    4f22:	af 91       	pop	r26
    4f24:	9f 91       	pop	r25
    4f26:	8f 91       	pop	r24
    4f28:	7f 91       	pop	r23
    4f2a:	6f 91       	pop	r22
    4f2c:	5f 91       	pop	r21
    4f2e:	4f 91       	pop	r20
    4f30:	3f 91       	pop	r19
    4f32:	2f 91       	pop	r18
    4f34:	0f 90       	pop	r0
    4f36:	0b be       	out	0x3b, r0	; 59
    4f38:	0f 90       	pop	r0
    4f3a:	0f be       	out	0x3f, r0	; 63
    4f3c:	0f 90       	pop	r0
    4f3e:	1f 90       	pop	r1
    4f40:	18 95       	reti

00004f42 <__vector_16>:
    4f42:	1f 92       	push	r1
    4f44:	0f 92       	push	r0
    4f46:	0f b6       	in	r0, 0x3f	; 63
    4f48:	0f 92       	push	r0
    4f4a:	11 24       	eor	r1, r1
    4f4c:	0b b6       	in	r0, 0x3b	; 59
    4f4e:	0f 92       	push	r0
    4f50:	2f 93       	push	r18
    4f52:	3f 93       	push	r19
    4f54:	4f 93       	push	r20
    4f56:	5f 93       	push	r21
    4f58:	6f 93       	push	r22
    4f5a:	7f 93       	push	r23
    4f5c:	8f 93       	push	r24
    4f5e:	9f 93       	push	r25
    4f60:	af 93       	push	r26
    4f62:	bf 93       	push	r27
    4f64:	ef 93       	push	r30
    4f66:	ff 93       	push	r31
    4f68:	e0 91 b1 25 	lds	r30, 0x25B1	; 0x8025b1 <tc_tcc0_cca_callback>
    4f6c:	f0 91 b2 25 	lds	r31, 0x25B2	; 0x8025b2 <tc_tcc0_cca_callback+0x1>
    4f70:	30 97       	sbiw	r30, 0x00	; 0
    4f72:	09 f0       	breq	.+2      	; 0x4f76 <__vector_16+0x34>
    4f74:	19 95       	eicall
    4f76:	ff 91       	pop	r31
    4f78:	ef 91       	pop	r30
    4f7a:	bf 91       	pop	r27
    4f7c:	af 91       	pop	r26
    4f7e:	9f 91       	pop	r25
    4f80:	8f 91       	pop	r24
    4f82:	7f 91       	pop	r23
    4f84:	6f 91       	pop	r22
    4f86:	5f 91       	pop	r21
    4f88:	4f 91       	pop	r20
    4f8a:	3f 91       	pop	r19
    4f8c:	2f 91       	pop	r18
    4f8e:	0f 90       	pop	r0
    4f90:	0b be       	out	0x3b, r0	; 59
    4f92:	0f 90       	pop	r0
    4f94:	0f be       	out	0x3f, r0	; 63
    4f96:	0f 90       	pop	r0
    4f98:	1f 90       	pop	r1
    4f9a:	18 95       	reti

00004f9c <__vector_17>:
    4f9c:	1f 92       	push	r1
    4f9e:	0f 92       	push	r0
    4fa0:	0f b6       	in	r0, 0x3f	; 63
    4fa2:	0f 92       	push	r0
    4fa4:	11 24       	eor	r1, r1
    4fa6:	0b b6       	in	r0, 0x3b	; 59
    4fa8:	0f 92       	push	r0
    4faa:	2f 93       	push	r18
    4fac:	3f 93       	push	r19
    4fae:	4f 93       	push	r20
    4fb0:	5f 93       	push	r21
    4fb2:	6f 93       	push	r22
    4fb4:	7f 93       	push	r23
    4fb6:	8f 93       	push	r24
    4fb8:	9f 93       	push	r25
    4fba:	af 93       	push	r26
    4fbc:	bf 93       	push	r27
    4fbe:	ef 93       	push	r30
    4fc0:	ff 93       	push	r31
    4fc2:	e0 91 af 25 	lds	r30, 0x25AF	; 0x8025af <tc_tcc0_ccb_callback>
    4fc6:	f0 91 b0 25 	lds	r31, 0x25B0	; 0x8025b0 <tc_tcc0_ccb_callback+0x1>
    4fca:	30 97       	sbiw	r30, 0x00	; 0
    4fcc:	09 f0       	breq	.+2      	; 0x4fd0 <__vector_17+0x34>
    4fce:	19 95       	eicall
    4fd0:	ff 91       	pop	r31
    4fd2:	ef 91       	pop	r30
    4fd4:	bf 91       	pop	r27
    4fd6:	af 91       	pop	r26
    4fd8:	9f 91       	pop	r25
    4fda:	8f 91       	pop	r24
    4fdc:	7f 91       	pop	r23
    4fde:	6f 91       	pop	r22
    4fe0:	5f 91       	pop	r21
    4fe2:	4f 91       	pop	r20
    4fe4:	3f 91       	pop	r19
    4fe6:	2f 91       	pop	r18
    4fe8:	0f 90       	pop	r0
    4fea:	0b be       	out	0x3b, r0	; 59
    4fec:	0f 90       	pop	r0
    4fee:	0f be       	out	0x3f, r0	; 63
    4ff0:	0f 90       	pop	r0
    4ff2:	1f 90       	pop	r1
    4ff4:	18 95       	reti

00004ff6 <__vector_18>:
    4ff6:	1f 92       	push	r1
    4ff8:	0f 92       	push	r0
    4ffa:	0f b6       	in	r0, 0x3f	; 63
    4ffc:	0f 92       	push	r0
    4ffe:	11 24       	eor	r1, r1
    5000:	0b b6       	in	r0, 0x3b	; 59
    5002:	0f 92       	push	r0
    5004:	2f 93       	push	r18
    5006:	3f 93       	push	r19
    5008:	4f 93       	push	r20
    500a:	5f 93       	push	r21
    500c:	6f 93       	push	r22
    500e:	7f 93       	push	r23
    5010:	8f 93       	push	r24
    5012:	9f 93       	push	r25
    5014:	af 93       	push	r26
    5016:	bf 93       	push	r27
    5018:	ef 93       	push	r30
    501a:	ff 93       	push	r31
    501c:	e0 91 ad 25 	lds	r30, 0x25AD	; 0x8025ad <tc_tcc0_ccc_callback>
    5020:	f0 91 ae 25 	lds	r31, 0x25AE	; 0x8025ae <tc_tcc0_ccc_callback+0x1>
    5024:	30 97       	sbiw	r30, 0x00	; 0
    5026:	09 f0       	breq	.+2      	; 0x502a <__vector_18+0x34>
    5028:	19 95       	eicall
    502a:	ff 91       	pop	r31
    502c:	ef 91       	pop	r30
    502e:	bf 91       	pop	r27
    5030:	af 91       	pop	r26
    5032:	9f 91       	pop	r25
    5034:	8f 91       	pop	r24
    5036:	7f 91       	pop	r23
    5038:	6f 91       	pop	r22
    503a:	5f 91       	pop	r21
    503c:	4f 91       	pop	r20
    503e:	3f 91       	pop	r19
    5040:	2f 91       	pop	r18
    5042:	0f 90       	pop	r0
    5044:	0b be       	out	0x3b, r0	; 59
    5046:	0f 90       	pop	r0
    5048:	0f be       	out	0x3f, r0	; 63
    504a:	0f 90       	pop	r0
    504c:	1f 90       	pop	r1
    504e:	18 95       	reti

00005050 <__vector_19>:
    5050:	1f 92       	push	r1
    5052:	0f 92       	push	r0
    5054:	0f b6       	in	r0, 0x3f	; 63
    5056:	0f 92       	push	r0
    5058:	11 24       	eor	r1, r1
    505a:	0b b6       	in	r0, 0x3b	; 59
    505c:	0f 92       	push	r0
    505e:	2f 93       	push	r18
    5060:	3f 93       	push	r19
    5062:	4f 93       	push	r20
    5064:	5f 93       	push	r21
    5066:	6f 93       	push	r22
    5068:	7f 93       	push	r23
    506a:	8f 93       	push	r24
    506c:	9f 93       	push	r25
    506e:	af 93       	push	r26
    5070:	bf 93       	push	r27
    5072:	ef 93       	push	r30
    5074:	ff 93       	push	r31
    5076:	e0 91 ab 25 	lds	r30, 0x25AB	; 0x8025ab <tc_tcc0_ccd_callback>
    507a:	f0 91 ac 25 	lds	r31, 0x25AC	; 0x8025ac <tc_tcc0_ccd_callback+0x1>
    507e:	30 97       	sbiw	r30, 0x00	; 0
    5080:	09 f0       	breq	.+2      	; 0x5084 <__vector_19+0x34>
    5082:	19 95       	eicall
    5084:	ff 91       	pop	r31
    5086:	ef 91       	pop	r30
    5088:	bf 91       	pop	r27
    508a:	af 91       	pop	r26
    508c:	9f 91       	pop	r25
    508e:	8f 91       	pop	r24
    5090:	7f 91       	pop	r23
    5092:	6f 91       	pop	r22
    5094:	5f 91       	pop	r21
    5096:	4f 91       	pop	r20
    5098:	3f 91       	pop	r19
    509a:	2f 91       	pop	r18
    509c:	0f 90       	pop	r0
    509e:	0b be       	out	0x3b, r0	; 59
    50a0:	0f 90       	pop	r0
    50a2:	0f be       	out	0x3f, r0	; 63
    50a4:	0f 90       	pop	r0
    50a6:	1f 90       	pop	r1
    50a8:	18 95       	reti

000050aa <__vector_20>:
    50aa:	1f 92       	push	r1
    50ac:	0f 92       	push	r0
    50ae:	0f b6       	in	r0, 0x3f	; 63
    50b0:	0f 92       	push	r0
    50b2:	11 24       	eor	r1, r1
    50b4:	0b b6       	in	r0, 0x3b	; 59
    50b6:	0f 92       	push	r0
    50b8:	2f 93       	push	r18
    50ba:	3f 93       	push	r19
    50bc:	4f 93       	push	r20
    50be:	5f 93       	push	r21
    50c0:	6f 93       	push	r22
    50c2:	7f 93       	push	r23
    50c4:	8f 93       	push	r24
    50c6:	9f 93       	push	r25
    50c8:	af 93       	push	r26
    50ca:	bf 93       	push	r27
    50cc:	ef 93       	push	r30
    50ce:	ff 93       	push	r31
    50d0:	e0 91 a9 25 	lds	r30, 0x25A9	; 0x8025a9 <tc_tcc1_ovf_callback>
    50d4:	f0 91 aa 25 	lds	r31, 0x25AA	; 0x8025aa <tc_tcc1_ovf_callback+0x1>
    50d8:	30 97       	sbiw	r30, 0x00	; 0
    50da:	09 f0       	breq	.+2      	; 0x50de <__vector_20+0x34>
    50dc:	19 95       	eicall
    50de:	ff 91       	pop	r31
    50e0:	ef 91       	pop	r30
    50e2:	bf 91       	pop	r27
    50e4:	af 91       	pop	r26
    50e6:	9f 91       	pop	r25
    50e8:	8f 91       	pop	r24
    50ea:	7f 91       	pop	r23
    50ec:	6f 91       	pop	r22
    50ee:	5f 91       	pop	r21
    50f0:	4f 91       	pop	r20
    50f2:	3f 91       	pop	r19
    50f4:	2f 91       	pop	r18
    50f6:	0f 90       	pop	r0
    50f8:	0b be       	out	0x3b, r0	; 59
    50fa:	0f 90       	pop	r0
    50fc:	0f be       	out	0x3f, r0	; 63
    50fe:	0f 90       	pop	r0
    5100:	1f 90       	pop	r1
    5102:	18 95       	reti

00005104 <__vector_21>:
    5104:	1f 92       	push	r1
    5106:	0f 92       	push	r0
    5108:	0f b6       	in	r0, 0x3f	; 63
    510a:	0f 92       	push	r0
    510c:	11 24       	eor	r1, r1
    510e:	0b b6       	in	r0, 0x3b	; 59
    5110:	0f 92       	push	r0
    5112:	2f 93       	push	r18
    5114:	3f 93       	push	r19
    5116:	4f 93       	push	r20
    5118:	5f 93       	push	r21
    511a:	6f 93       	push	r22
    511c:	7f 93       	push	r23
    511e:	8f 93       	push	r24
    5120:	9f 93       	push	r25
    5122:	af 93       	push	r26
    5124:	bf 93       	push	r27
    5126:	ef 93       	push	r30
    5128:	ff 93       	push	r31
    512a:	e0 91 a7 25 	lds	r30, 0x25A7	; 0x8025a7 <tc_tcc1_err_callback>
    512e:	f0 91 a8 25 	lds	r31, 0x25A8	; 0x8025a8 <tc_tcc1_err_callback+0x1>
    5132:	30 97       	sbiw	r30, 0x00	; 0
    5134:	09 f0       	breq	.+2      	; 0x5138 <__vector_21+0x34>
    5136:	19 95       	eicall
    5138:	ff 91       	pop	r31
    513a:	ef 91       	pop	r30
    513c:	bf 91       	pop	r27
    513e:	af 91       	pop	r26
    5140:	9f 91       	pop	r25
    5142:	8f 91       	pop	r24
    5144:	7f 91       	pop	r23
    5146:	6f 91       	pop	r22
    5148:	5f 91       	pop	r21
    514a:	4f 91       	pop	r20
    514c:	3f 91       	pop	r19
    514e:	2f 91       	pop	r18
    5150:	0f 90       	pop	r0
    5152:	0b be       	out	0x3b, r0	; 59
    5154:	0f 90       	pop	r0
    5156:	0f be       	out	0x3f, r0	; 63
    5158:	0f 90       	pop	r0
    515a:	1f 90       	pop	r1
    515c:	18 95       	reti

0000515e <__vector_22>:
    515e:	1f 92       	push	r1
    5160:	0f 92       	push	r0
    5162:	0f b6       	in	r0, 0x3f	; 63
    5164:	0f 92       	push	r0
    5166:	11 24       	eor	r1, r1
    5168:	0b b6       	in	r0, 0x3b	; 59
    516a:	0f 92       	push	r0
    516c:	2f 93       	push	r18
    516e:	3f 93       	push	r19
    5170:	4f 93       	push	r20
    5172:	5f 93       	push	r21
    5174:	6f 93       	push	r22
    5176:	7f 93       	push	r23
    5178:	8f 93       	push	r24
    517a:	9f 93       	push	r25
    517c:	af 93       	push	r26
    517e:	bf 93       	push	r27
    5180:	ef 93       	push	r30
    5182:	ff 93       	push	r31
    5184:	e0 91 a5 25 	lds	r30, 0x25A5	; 0x8025a5 <tc_tcc1_cca_callback>
    5188:	f0 91 a6 25 	lds	r31, 0x25A6	; 0x8025a6 <tc_tcc1_cca_callback+0x1>
    518c:	30 97       	sbiw	r30, 0x00	; 0
    518e:	09 f0       	breq	.+2      	; 0x5192 <__vector_22+0x34>
    5190:	19 95       	eicall
    5192:	ff 91       	pop	r31
    5194:	ef 91       	pop	r30
    5196:	bf 91       	pop	r27
    5198:	af 91       	pop	r26
    519a:	9f 91       	pop	r25
    519c:	8f 91       	pop	r24
    519e:	7f 91       	pop	r23
    51a0:	6f 91       	pop	r22
    51a2:	5f 91       	pop	r21
    51a4:	4f 91       	pop	r20
    51a6:	3f 91       	pop	r19
    51a8:	2f 91       	pop	r18
    51aa:	0f 90       	pop	r0
    51ac:	0b be       	out	0x3b, r0	; 59
    51ae:	0f 90       	pop	r0
    51b0:	0f be       	out	0x3f, r0	; 63
    51b2:	0f 90       	pop	r0
    51b4:	1f 90       	pop	r1
    51b6:	18 95       	reti

000051b8 <__vector_23>:
    51b8:	1f 92       	push	r1
    51ba:	0f 92       	push	r0
    51bc:	0f b6       	in	r0, 0x3f	; 63
    51be:	0f 92       	push	r0
    51c0:	11 24       	eor	r1, r1
    51c2:	0b b6       	in	r0, 0x3b	; 59
    51c4:	0f 92       	push	r0
    51c6:	2f 93       	push	r18
    51c8:	3f 93       	push	r19
    51ca:	4f 93       	push	r20
    51cc:	5f 93       	push	r21
    51ce:	6f 93       	push	r22
    51d0:	7f 93       	push	r23
    51d2:	8f 93       	push	r24
    51d4:	9f 93       	push	r25
    51d6:	af 93       	push	r26
    51d8:	bf 93       	push	r27
    51da:	ef 93       	push	r30
    51dc:	ff 93       	push	r31
    51de:	e0 91 a3 25 	lds	r30, 0x25A3	; 0x8025a3 <tc_tcc1_ccb_callback>
    51e2:	f0 91 a4 25 	lds	r31, 0x25A4	; 0x8025a4 <tc_tcc1_ccb_callback+0x1>
    51e6:	30 97       	sbiw	r30, 0x00	; 0
    51e8:	09 f0       	breq	.+2      	; 0x51ec <__vector_23+0x34>
    51ea:	19 95       	eicall
    51ec:	ff 91       	pop	r31
    51ee:	ef 91       	pop	r30
    51f0:	bf 91       	pop	r27
    51f2:	af 91       	pop	r26
    51f4:	9f 91       	pop	r25
    51f6:	8f 91       	pop	r24
    51f8:	7f 91       	pop	r23
    51fa:	6f 91       	pop	r22
    51fc:	5f 91       	pop	r21
    51fe:	4f 91       	pop	r20
    5200:	3f 91       	pop	r19
    5202:	2f 91       	pop	r18
    5204:	0f 90       	pop	r0
    5206:	0b be       	out	0x3b, r0	; 59
    5208:	0f 90       	pop	r0
    520a:	0f be       	out	0x3f, r0	; 63
    520c:	0f 90       	pop	r0
    520e:	1f 90       	pop	r1
    5210:	18 95       	reti

00005212 <__vector_77>:
    5212:	1f 92       	push	r1
    5214:	0f 92       	push	r0
    5216:	0f b6       	in	r0, 0x3f	; 63
    5218:	0f 92       	push	r0
    521a:	11 24       	eor	r1, r1
    521c:	0b b6       	in	r0, 0x3b	; 59
    521e:	0f 92       	push	r0
    5220:	2f 93       	push	r18
    5222:	3f 93       	push	r19
    5224:	4f 93       	push	r20
    5226:	5f 93       	push	r21
    5228:	6f 93       	push	r22
    522a:	7f 93       	push	r23
    522c:	8f 93       	push	r24
    522e:	9f 93       	push	r25
    5230:	af 93       	push	r26
    5232:	bf 93       	push	r27
    5234:	ef 93       	push	r30
    5236:	ff 93       	push	r31
    5238:	e0 91 a1 25 	lds	r30, 0x25A1	; 0x8025a1 <tc_tcd0_ovf_callback>
    523c:	f0 91 a2 25 	lds	r31, 0x25A2	; 0x8025a2 <tc_tcd0_ovf_callback+0x1>
    5240:	30 97       	sbiw	r30, 0x00	; 0
    5242:	09 f0       	breq	.+2      	; 0x5246 <__vector_77+0x34>
    5244:	19 95       	eicall
    5246:	ff 91       	pop	r31
    5248:	ef 91       	pop	r30
    524a:	bf 91       	pop	r27
    524c:	af 91       	pop	r26
    524e:	9f 91       	pop	r25
    5250:	8f 91       	pop	r24
    5252:	7f 91       	pop	r23
    5254:	6f 91       	pop	r22
    5256:	5f 91       	pop	r21
    5258:	4f 91       	pop	r20
    525a:	3f 91       	pop	r19
    525c:	2f 91       	pop	r18
    525e:	0f 90       	pop	r0
    5260:	0b be       	out	0x3b, r0	; 59
    5262:	0f 90       	pop	r0
    5264:	0f be       	out	0x3f, r0	; 63
    5266:	0f 90       	pop	r0
    5268:	1f 90       	pop	r1
    526a:	18 95       	reti

0000526c <__vector_78>:
    526c:	1f 92       	push	r1
    526e:	0f 92       	push	r0
    5270:	0f b6       	in	r0, 0x3f	; 63
    5272:	0f 92       	push	r0
    5274:	11 24       	eor	r1, r1
    5276:	0b b6       	in	r0, 0x3b	; 59
    5278:	0f 92       	push	r0
    527a:	2f 93       	push	r18
    527c:	3f 93       	push	r19
    527e:	4f 93       	push	r20
    5280:	5f 93       	push	r21
    5282:	6f 93       	push	r22
    5284:	7f 93       	push	r23
    5286:	8f 93       	push	r24
    5288:	9f 93       	push	r25
    528a:	af 93       	push	r26
    528c:	bf 93       	push	r27
    528e:	ef 93       	push	r30
    5290:	ff 93       	push	r31
    5292:	e0 91 9f 25 	lds	r30, 0x259F	; 0x80259f <tc_tcd0_err_callback>
    5296:	f0 91 a0 25 	lds	r31, 0x25A0	; 0x8025a0 <tc_tcd0_err_callback+0x1>
    529a:	30 97       	sbiw	r30, 0x00	; 0
    529c:	09 f0       	breq	.+2      	; 0x52a0 <__vector_78+0x34>
    529e:	19 95       	eicall
    52a0:	ff 91       	pop	r31
    52a2:	ef 91       	pop	r30
    52a4:	bf 91       	pop	r27
    52a6:	af 91       	pop	r26
    52a8:	9f 91       	pop	r25
    52aa:	8f 91       	pop	r24
    52ac:	7f 91       	pop	r23
    52ae:	6f 91       	pop	r22
    52b0:	5f 91       	pop	r21
    52b2:	4f 91       	pop	r20
    52b4:	3f 91       	pop	r19
    52b6:	2f 91       	pop	r18
    52b8:	0f 90       	pop	r0
    52ba:	0b be       	out	0x3b, r0	; 59
    52bc:	0f 90       	pop	r0
    52be:	0f be       	out	0x3f, r0	; 63
    52c0:	0f 90       	pop	r0
    52c2:	1f 90       	pop	r1
    52c4:	18 95       	reti

000052c6 <__vector_79>:
    52c6:	1f 92       	push	r1
    52c8:	0f 92       	push	r0
    52ca:	0f b6       	in	r0, 0x3f	; 63
    52cc:	0f 92       	push	r0
    52ce:	11 24       	eor	r1, r1
    52d0:	0b b6       	in	r0, 0x3b	; 59
    52d2:	0f 92       	push	r0
    52d4:	2f 93       	push	r18
    52d6:	3f 93       	push	r19
    52d8:	4f 93       	push	r20
    52da:	5f 93       	push	r21
    52dc:	6f 93       	push	r22
    52de:	7f 93       	push	r23
    52e0:	8f 93       	push	r24
    52e2:	9f 93       	push	r25
    52e4:	af 93       	push	r26
    52e6:	bf 93       	push	r27
    52e8:	ef 93       	push	r30
    52ea:	ff 93       	push	r31
    52ec:	e0 91 9d 25 	lds	r30, 0x259D	; 0x80259d <tc_tcd0_cca_callback>
    52f0:	f0 91 9e 25 	lds	r31, 0x259E	; 0x80259e <tc_tcd0_cca_callback+0x1>
    52f4:	30 97       	sbiw	r30, 0x00	; 0
    52f6:	09 f0       	breq	.+2      	; 0x52fa <__vector_79+0x34>
    52f8:	19 95       	eicall
    52fa:	ff 91       	pop	r31
    52fc:	ef 91       	pop	r30
    52fe:	bf 91       	pop	r27
    5300:	af 91       	pop	r26
    5302:	9f 91       	pop	r25
    5304:	8f 91       	pop	r24
    5306:	7f 91       	pop	r23
    5308:	6f 91       	pop	r22
    530a:	5f 91       	pop	r21
    530c:	4f 91       	pop	r20
    530e:	3f 91       	pop	r19
    5310:	2f 91       	pop	r18
    5312:	0f 90       	pop	r0
    5314:	0b be       	out	0x3b, r0	; 59
    5316:	0f 90       	pop	r0
    5318:	0f be       	out	0x3f, r0	; 63
    531a:	0f 90       	pop	r0
    531c:	1f 90       	pop	r1
    531e:	18 95       	reti

00005320 <__vector_80>:
    5320:	1f 92       	push	r1
    5322:	0f 92       	push	r0
    5324:	0f b6       	in	r0, 0x3f	; 63
    5326:	0f 92       	push	r0
    5328:	11 24       	eor	r1, r1
    532a:	0b b6       	in	r0, 0x3b	; 59
    532c:	0f 92       	push	r0
    532e:	2f 93       	push	r18
    5330:	3f 93       	push	r19
    5332:	4f 93       	push	r20
    5334:	5f 93       	push	r21
    5336:	6f 93       	push	r22
    5338:	7f 93       	push	r23
    533a:	8f 93       	push	r24
    533c:	9f 93       	push	r25
    533e:	af 93       	push	r26
    5340:	bf 93       	push	r27
    5342:	ef 93       	push	r30
    5344:	ff 93       	push	r31
    5346:	e0 91 9b 25 	lds	r30, 0x259B	; 0x80259b <tc_tcd0_ccb_callback>
    534a:	f0 91 9c 25 	lds	r31, 0x259C	; 0x80259c <tc_tcd0_ccb_callback+0x1>
    534e:	30 97       	sbiw	r30, 0x00	; 0
    5350:	09 f0       	breq	.+2      	; 0x5354 <__vector_80+0x34>
    5352:	19 95       	eicall
    5354:	ff 91       	pop	r31
    5356:	ef 91       	pop	r30
    5358:	bf 91       	pop	r27
    535a:	af 91       	pop	r26
    535c:	9f 91       	pop	r25
    535e:	8f 91       	pop	r24
    5360:	7f 91       	pop	r23
    5362:	6f 91       	pop	r22
    5364:	5f 91       	pop	r21
    5366:	4f 91       	pop	r20
    5368:	3f 91       	pop	r19
    536a:	2f 91       	pop	r18
    536c:	0f 90       	pop	r0
    536e:	0b be       	out	0x3b, r0	; 59
    5370:	0f 90       	pop	r0
    5372:	0f be       	out	0x3f, r0	; 63
    5374:	0f 90       	pop	r0
    5376:	1f 90       	pop	r1
    5378:	18 95       	reti

0000537a <__vector_81>:
    537a:	1f 92       	push	r1
    537c:	0f 92       	push	r0
    537e:	0f b6       	in	r0, 0x3f	; 63
    5380:	0f 92       	push	r0
    5382:	11 24       	eor	r1, r1
    5384:	0b b6       	in	r0, 0x3b	; 59
    5386:	0f 92       	push	r0
    5388:	2f 93       	push	r18
    538a:	3f 93       	push	r19
    538c:	4f 93       	push	r20
    538e:	5f 93       	push	r21
    5390:	6f 93       	push	r22
    5392:	7f 93       	push	r23
    5394:	8f 93       	push	r24
    5396:	9f 93       	push	r25
    5398:	af 93       	push	r26
    539a:	bf 93       	push	r27
    539c:	ef 93       	push	r30
    539e:	ff 93       	push	r31
    53a0:	e0 91 99 25 	lds	r30, 0x2599	; 0x802599 <tc_tcd0_ccc_callback>
    53a4:	f0 91 9a 25 	lds	r31, 0x259A	; 0x80259a <tc_tcd0_ccc_callback+0x1>
    53a8:	30 97       	sbiw	r30, 0x00	; 0
    53aa:	09 f0       	breq	.+2      	; 0x53ae <__vector_81+0x34>
    53ac:	19 95       	eicall
    53ae:	ff 91       	pop	r31
    53b0:	ef 91       	pop	r30
    53b2:	bf 91       	pop	r27
    53b4:	af 91       	pop	r26
    53b6:	9f 91       	pop	r25
    53b8:	8f 91       	pop	r24
    53ba:	7f 91       	pop	r23
    53bc:	6f 91       	pop	r22
    53be:	5f 91       	pop	r21
    53c0:	4f 91       	pop	r20
    53c2:	3f 91       	pop	r19
    53c4:	2f 91       	pop	r18
    53c6:	0f 90       	pop	r0
    53c8:	0b be       	out	0x3b, r0	; 59
    53ca:	0f 90       	pop	r0
    53cc:	0f be       	out	0x3f, r0	; 63
    53ce:	0f 90       	pop	r0
    53d0:	1f 90       	pop	r1
    53d2:	18 95       	reti

000053d4 <__vector_82>:
    53d4:	1f 92       	push	r1
    53d6:	0f 92       	push	r0
    53d8:	0f b6       	in	r0, 0x3f	; 63
    53da:	0f 92       	push	r0
    53dc:	11 24       	eor	r1, r1
    53de:	0b b6       	in	r0, 0x3b	; 59
    53e0:	0f 92       	push	r0
    53e2:	2f 93       	push	r18
    53e4:	3f 93       	push	r19
    53e6:	4f 93       	push	r20
    53e8:	5f 93       	push	r21
    53ea:	6f 93       	push	r22
    53ec:	7f 93       	push	r23
    53ee:	8f 93       	push	r24
    53f0:	9f 93       	push	r25
    53f2:	af 93       	push	r26
    53f4:	bf 93       	push	r27
    53f6:	ef 93       	push	r30
    53f8:	ff 93       	push	r31
    53fa:	e0 91 97 25 	lds	r30, 0x2597	; 0x802597 <tc_tcd0_ccd_callback>
    53fe:	f0 91 98 25 	lds	r31, 0x2598	; 0x802598 <tc_tcd0_ccd_callback+0x1>
    5402:	30 97       	sbiw	r30, 0x00	; 0
    5404:	09 f0       	breq	.+2      	; 0x5408 <__vector_82+0x34>
    5406:	19 95       	eicall
    5408:	ff 91       	pop	r31
    540a:	ef 91       	pop	r30
    540c:	bf 91       	pop	r27
    540e:	af 91       	pop	r26
    5410:	9f 91       	pop	r25
    5412:	8f 91       	pop	r24
    5414:	7f 91       	pop	r23
    5416:	6f 91       	pop	r22
    5418:	5f 91       	pop	r21
    541a:	4f 91       	pop	r20
    541c:	3f 91       	pop	r19
    541e:	2f 91       	pop	r18
    5420:	0f 90       	pop	r0
    5422:	0b be       	out	0x3b, r0	; 59
    5424:	0f 90       	pop	r0
    5426:	0f be       	out	0x3f, r0	; 63
    5428:	0f 90       	pop	r0
    542a:	1f 90       	pop	r1
    542c:	18 95       	reti

0000542e <__vector_83>:
    542e:	1f 92       	push	r1
    5430:	0f 92       	push	r0
    5432:	0f b6       	in	r0, 0x3f	; 63
    5434:	0f 92       	push	r0
    5436:	11 24       	eor	r1, r1
    5438:	0b b6       	in	r0, 0x3b	; 59
    543a:	0f 92       	push	r0
    543c:	2f 93       	push	r18
    543e:	3f 93       	push	r19
    5440:	4f 93       	push	r20
    5442:	5f 93       	push	r21
    5444:	6f 93       	push	r22
    5446:	7f 93       	push	r23
    5448:	8f 93       	push	r24
    544a:	9f 93       	push	r25
    544c:	af 93       	push	r26
    544e:	bf 93       	push	r27
    5450:	ef 93       	push	r30
    5452:	ff 93       	push	r31
    5454:	e0 91 95 25 	lds	r30, 0x2595	; 0x802595 <tc_tcd1_ovf_callback>
    5458:	f0 91 96 25 	lds	r31, 0x2596	; 0x802596 <tc_tcd1_ovf_callback+0x1>
    545c:	30 97       	sbiw	r30, 0x00	; 0
    545e:	09 f0       	breq	.+2      	; 0x5462 <__vector_83+0x34>
    5460:	19 95       	eicall
    5462:	ff 91       	pop	r31
    5464:	ef 91       	pop	r30
    5466:	bf 91       	pop	r27
    5468:	af 91       	pop	r26
    546a:	9f 91       	pop	r25
    546c:	8f 91       	pop	r24
    546e:	7f 91       	pop	r23
    5470:	6f 91       	pop	r22
    5472:	5f 91       	pop	r21
    5474:	4f 91       	pop	r20
    5476:	3f 91       	pop	r19
    5478:	2f 91       	pop	r18
    547a:	0f 90       	pop	r0
    547c:	0b be       	out	0x3b, r0	; 59
    547e:	0f 90       	pop	r0
    5480:	0f be       	out	0x3f, r0	; 63
    5482:	0f 90       	pop	r0
    5484:	1f 90       	pop	r1
    5486:	18 95       	reti

00005488 <__vector_84>:
    5488:	1f 92       	push	r1
    548a:	0f 92       	push	r0
    548c:	0f b6       	in	r0, 0x3f	; 63
    548e:	0f 92       	push	r0
    5490:	11 24       	eor	r1, r1
    5492:	0b b6       	in	r0, 0x3b	; 59
    5494:	0f 92       	push	r0
    5496:	2f 93       	push	r18
    5498:	3f 93       	push	r19
    549a:	4f 93       	push	r20
    549c:	5f 93       	push	r21
    549e:	6f 93       	push	r22
    54a0:	7f 93       	push	r23
    54a2:	8f 93       	push	r24
    54a4:	9f 93       	push	r25
    54a6:	af 93       	push	r26
    54a8:	bf 93       	push	r27
    54aa:	ef 93       	push	r30
    54ac:	ff 93       	push	r31
    54ae:	e0 91 93 25 	lds	r30, 0x2593	; 0x802593 <tc_tcd1_err_callback>
    54b2:	f0 91 94 25 	lds	r31, 0x2594	; 0x802594 <tc_tcd1_err_callback+0x1>
    54b6:	30 97       	sbiw	r30, 0x00	; 0
    54b8:	09 f0       	breq	.+2      	; 0x54bc <__vector_84+0x34>
    54ba:	19 95       	eicall
    54bc:	ff 91       	pop	r31
    54be:	ef 91       	pop	r30
    54c0:	bf 91       	pop	r27
    54c2:	af 91       	pop	r26
    54c4:	9f 91       	pop	r25
    54c6:	8f 91       	pop	r24
    54c8:	7f 91       	pop	r23
    54ca:	6f 91       	pop	r22
    54cc:	5f 91       	pop	r21
    54ce:	4f 91       	pop	r20
    54d0:	3f 91       	pop	r19
    54d2:	2f 91       	pop	r18
    54d4:	0f 90       	pop	r0
    54d6:	0b be       	out	0x3b, r0	; 59
    54d8:	0f 90       	pop	r0
    54da:	0f be       	out	0x3f, r0	; 63
    54dc:	0f 90       	pop	r0
    54de:	1f 90       	pop	r1
    54e0:	18 95       	reti

000054e2 <__vector_85>:
    54e2:	1f 92       	push	r1
    54e4:	0f 92       	push	r0
    54e6:	0f b6       	in	r0, 0x3f	; 63
    54e8:	0f 92       	push	r0
    54ea:	11 24       	eor	r1, r1
    54ec:	0b b6       	in	r0, 0x3b	; 59
    54ee:	0f 92       	push	r0
    54f0:	2f 93       	push	r18
    54f2:	3f 93       	push	r19
    54f4:	4f 93       	push	r20
    54f6:	5f 93       	push	r21
    54f8:	6f 93       	push	r22
    54fa:	7f 93       	push	r23
    54fc:	8f 93       	push	r24
    54fe:	9f 93       	push	r25
    5500:	af 93       	push	r26
    5502:	bf 93       	push	r27
    5504:	ef 93       	push	r30
    5506:	ff 93       	push	r31
    5508:	e0 91 91 25 	lds	r30, 0x2591	; 0x802591 <tc_tcd1_cca_callback>
    550c:	f0 91 92 25 	lds	r31, 0x2592	; 0x802592 <tc_tcd1_cca_callback+0x1>
    5510:	30 97       	sbiw	r30, 0x00	; 0
    5512:	09 f0       	breq	.+2      	; 0x5516 <__vector_85+0x34>
    5514:	19 95       	eicall
    5516:	ff 91       	pop	r31
    5518:	ef 91       	pop	r30
    551a:	bf 91       	pop	r27
    551c:	af 91       	pop	r26
    551e:	9f 91       	pop	r25
    5520:	8f 91       	pop	r24
    5522:	7f 91       	pop	r23
    5524:	6f 91       	pop	r22
    5526:	5f 91       	pop	r21
    5528:	4f 91       	pop	r20
    552a:	3f 91       	pop	r19
    552c:	2f 91       	pop	r18
    552e:	0f 90       	pop	r0
    5530:	0b be       	out	0x3b, r0	; 59
    5532:	0f 90       	pop	r0
    5534:	0f be       	out	0x3f, r0	; 63
    5536:	0f 90       	pop	r0
    5538:	1f 90       	pop	r1
    553a:	18 95       	reti

0000553c <__vector_86>:
    553c:	1f 92       	push	r1
    553e:	0f 92       	push	r0
    5540:	0f b6       	in	r0, 0x3f	; 63
    5542:	0f 92       	push	r0
    5544:	11 24       	eor	r1, r1
    5546:	0b b6       	in	r0, 0x3b	; 59
    5548:	0f 92       	push	r0
    554a:	2f 93       	push	r18
    554c:	3f 93       	push	r19
    554e:	4f 93       	push	r20
    5550:	5f 93       	push	r21
    5552:	6f 93       	push	r22
    5554:	7f 93       	push	r23
    5556:	8f 93       	push	r24
    5558:	9f 93       	push	r25
    555a:	af 93       	push	r26
    555c:	bf 93       	push	r27
    555e:	ef 93       	push	r30
    5560:	ff 93       	push	r31
    5562:	e0 91 8f 25 	lds	r30, 0x258F	; 0x80258f <tc_tcd1_ccb_callback>
    5566:	f0 91 90 25 	lds	r31, 0x2590	; 0x802590 <tc_tcd1_ccb_callback+0x1>
    556a:	30 97       	sbiw	r30, 0x00	; 0
    556c:	09 f0       	breq	.+2      	; 0x5570 <__vector_86+0x34>
    556e:	19 95       	eicall
    5570:	ff 91       	pop	r31
    5572:	ef 91       	pop	r30
    5574:	bf 91       	pop	r27
    5576:	af 91       	pop	r26
    5578:	9f 91       	pop	r25
    557a:	8f 91       	pop	r24
    557c:	7f 91       	pop	r23
    557e:	6f 91       	pop	r22
    5580:	5f 91       	pop	r21
    5582:	4f 91       	pop	r20
    5584:	3f 91       	pop	r19
    5586:	2f 91       	pop	r18
    5588:	0f 90       	pop	r0
    558a:	0b be       	out	0x3b, r0	; 59
    558c:	0f 90       	pop	r0
    558e:	0f be       	out	0x3f, r0	; 63
    5590:	0f 90       	pop	r0
    5592:	1f 90       	pop	r1
    5594:	18 95       	reti

00005596 <__vector_47>:
    5596:	1f 92       	push	r1
    5598:	0f 92       	push	r0
    559a:	0f b6       	in	r0, 0x3f	; 63
    559c:	0f 92       	push	r0
    559e:	11 24       	eor	r1, r1
    55a0:	0b b6       	in	r0, 0x3b	; 59
    55a2:	0f 92       	push	r0
    55a4:	2f 93       	push	r18
    55a6:	3f 93       	push	r19
    55a8:	4f 93       	push	r20
    55aa:	5f 93       	push	r21
    55ac:	6f 93       	push	r22
    55ae:	7f 93       	push	r23
    55b0:	8f 93       	push	r24
    55b2:	9f 93       	push	r25
    55b4:	af 93       	push	r26
    55b6:	bf 93       	push	r27
    55b8:	ef 93       	push	r30
    55ba:	ff 93       	push	r31
    55bc:	e0 91 8d 25 	lds	r30, 0x258D	; 0x80258d <tc_tce0_ovf_callback>
    55c0:	f0 91 8e 25 	lds	r31, 0x258E	; 0x80258e <tc_tce0_ovf_callback+0x1>
    55c4:	30 97       	sbiw	r30, 0x00	; 0
    55c6:	09 f0       	breq	.+2      	; 0x55ca <__vector_47+0x34>
    55c8:	19 95       	eicall
    55ca:	ff 91       	pop	r31
    55cc:	ef 91       	pop	r30
    55ce:	bf 91       	pop	r27
    55d0:	af 91       	pop	r26
    55d2:	9f 91       	pop	r25
    55d4:	8f 91       	pop	r24
    55d6:	7f 91       	pop	r23
    55d8:	6f 91       	pop	r22
    55da:	5f 91       	pop	r21
    55dc:	4f 91       	pop	r20
    55de:	3f 91       	pop	r19
    55e0:	2f 91       	pop	r18
    55e2:	0f 90       	pop	r0
    55e4:	0b be       	out	0x3b, r0	; 59
    55e6:	0f 90       	pop	r0
    55e8:	0f be       	out	0x3f, r0	; 63
    55ea:	0f 90       	pop	r0
    55ec:	1f 90       	pop	r1
    55ee:	18 95       	reti

000055f0 <__vector_48>:
    55f0:	1f 92       	push	r1
    55f2:	0f 92       	push	r0
    55f4:	0f b6       	in	r0, 0x3f	; 63
    55f6:	0f 92       	push	r0
    55f8:	11 24       	eor	r1, r1
    55fa:	0b b6       	in	r0, 0x3b	; 59
    55fc:	0f 92       	push	r0
    55fe:	2f 93       	push	r18
    5600:	3f 93       	push	r19
    5602:	4f 93       	push	r20
    5604:	5f 93       	push	r21
    5606:	6f 93       	push	r22
    5608:	7f 93       	push	r23
    560a:	8f 93       	push	r24
    560c:	9f 93       	push	r25
    560e:	af 93       	push	r26
    5610:	bf 93       	push	r27
    5612:	ef 93       	push	r30
    5614:	ff 93       	push	r31
    5616:	e0 91 8b 25 	lds	r30, 0x258B	; 0x80258b <tc_tce0_err_callback>
    561a:	f0 91 8c 25 	lds	r31, 0x258C	; 0x80258c <tc_tce0_err_callback+0x1>
    561e:	30 97       	sbiw	r30, 0x00	; 0
    5620:	09 f0       	breq	.+2      	; 0x5624 <__vector_48+0x34>
    5622:	19 95       	eicall
    5624:	ff 91       	pop	r31
    5626:	ef 91       	pop	r30
    5628:	bf 91       	pop	r27
    562a:	af 91       	pop	r26
    562c:	9f 91       	pop	r25
    562e:	8f 91       	pop	r24
    5630:	7f 91       	pop	r23
    5632:	6f 91       	pop	r22
    5634:	5f 91       	pop	r21
    5636:	4f 91       	pop	r20
    5638:	3f 91       	pop	r19
    563a:	2f 91       	pop	r18
    563c:	0f 90       	pop	r0
    563e:	0b be       	out	0x3b, r0	; 59
    5640:	0f 90       	pop	r0
    5642:	0f be       	out	0x3f, r0	; 63
    5644:	0f 90       	pop	r0
    5646:	1f 90       	pop	r1
    5648:	18 95       	reti

0000564a <__vector_49>:
    564a:	1f 92       	push	r1
    564c:	0f 92       	push	r0
    564e:	0f b6       	in	r0, 0x3f	; 63
    5650:	0f 92       	push	r0
    5652:	11 24       	eor	r1, r1
    5654:	0b b6       	in	r0, 0x3b	; 59
    5656:	0f 92       	push	r0
    5658:	2f 93       	push	r18
    565a:	3f 93       	push	r19
    565c:	4f 93       	push	r20
    565e:	5f 93       	push	r21
    5660:	6f 93       	push	r22
    5662:	7f 93       	push	r23
    5664:	8f 93       	push	r24
    5666:	9f 93       	push	r25
    5668:	af 93       	push	r26
    566a:	bf 93       	push	r27
    566c:	ef 93       	push	r30
    566e:	ff 93       	push	r31
    5670:	e0 91 89 25 	lds	r30, 0x2589	; 0x802589 <tc_tce0_cca_callback>
    5674:	f0 91 8a 25 	lds	r31, 0x258A	; 0x80258a <tc_tce0_cca_callback+0x1>
    5678:	30 97       	sbiw	r30, 0x00	; 0
    567a:	09 f0       	breq	.+2      	; 0x567e <__vector_49+0x34>
    567c:	19 95       	eicall
    567e:	ff 91       	pop	r31
    5680:	ef 91       	pop	r30
    5682:	bf 91       	pop	r27
    5684:	af 91       	pop	r26
    5686:	9f 91       	pop	r25
    5688:	8f 91       	pop	r24
    568a:	7f 91       	pop	r23
    568c:	6f 91       	pop	r22
    568e:	5f 91       	pop	r21
    5690:	4f 91       	pop	r20
    5692:	3f 91       	pop	r19
    5694:	2f 91       	pop	r18
    5696:	0f 90       	pop	r0
    5698:	0b be       	out	0x3b, r0	; 59
    569a:	0f 90       	pop	r0
    569c:	0f be       	out	0x3f, r0	; 63
    569e:	0f 90       	pop	r0
    56a0:	1f 90       	pop	r1
    56a2:	18 95       	reti

000056a4 <__vector_50>:
    56a4:	1f 92       	push	r1
    56a6:	0f 92       	push	r0
    56a8:	0f b6       	in	r0, 0x3f	; 63
    56aa:	0f 92       	push	r0
    56ac:	11 24       	eor	r1, r1
    56ae:	0b b6       	in	r0, 0x3b	; 59
    56b0:	0f 92       	push	r0
    56b2:	2f 93       	push	r18
    56b4:	3f 93       	push	r19
    56b6:	4f 93       	push	r20
    56b8:	5f 93       	push	r21
    56ba:	6f 93       	push	r22
    56bc:	7f 93       	push	r23
    56be:	8f 93       	push	r24
    56c0:	9f 93       	push	r25
    56c2:	af 93       	push	r26
    56c4:	bf 93       	push	r27
    56c6:	ef 93       	push	r30
    56c8:	ff 93       	push	r31
    56ca:	e0 91 87 25 	lds	r30, 0x2587	; 0x802587 <tc_tce0_ccb_callback>
    56ce:	f0 91 88 25 	lds	r31, 0x2588	; 0x802588 <tc_tce0_ccb_callback+0x1>
    56d2:	30 97       	sbiw	r30, 0x00	; 0
    56d4:	09 f0       	breq	.+2      	; 0x56d8 <__vector_50+0x34>
    56d6:	19 95       	eicall
    56d8:	ff 91       	pop	r31
    56da:	ef 91       	pop	r30
    56dc:	bf 91       	pop	r27
    56de:	af 91       	pop	r26
    56e0:	9f 91       	pop	r25
    56e2:	8f 91       	pop	r24
    56e4:	7f 91       	pop	r23
    56e6:	6f 91       	pop	r22
    56e8:	5f 91       	pop	r21
    56ea:	4f 91       	pop	r20
    56ec:	3f 91       	pop	r19
    56ee:	2f 91       	pop	r18
    56f0:	0f 90       	pop	r0
    56f2:	0b be       	out	0x3b, r0	; 59
    56f4:	0f 90       	pop	r0
    56f6:	0f be       	out	0x3f, r0	; 63
    56f8:	0f 90       	pop	r0
    56fa:	1f 90       	pop	r1
    56fc:	18 95       	reti

000056fe <__vector_51>:
    56fe:	1f 92       	push	r1
    5700:	0f 92       	push	r0
    5702:	0f b6       	in	r0, 0x3f	; 63
    5704:	0f 92       	push	r0
    5706:	11 24       	eor	r1, r1
    5708:	0b b6       	in	r0, 0x3b	; 59
    570a:	0f 92       	push	r0
    570c:	2f 93       	push	r18
    570e:	3f 93       	push	r19
    5710:	4f 93       	push	r20
    5712:	5f 93       	push	r21
    5714:	6f 93       	push	r22
    5716:	7f 93       	push	r23
    5718:	8f 93       	push	r24
    571a:	9f 93       	push	r25
    571c:	af 93       	push	r26
    571e:	bf 93       	push	r27
    5720:	ef 93       	push	r30
    5722:	ff 93       	push	r31
    5724:	e0 91 85 25 	lds	r30, 0x2585	; 0x802585 <tc_tce0_ccc_callback>
    5728:	f0 91 86 25 	lds	r31, 0x2586	; 0x802586 <tc_tce0_ccc_callback+0x1>
    572c:	30 97       	sbiw	r30, 0x00	; 0
    572e:	09 f0       	breq	.+2      	; 0x5732 <__vector_51+0x34>
    5730:	19 95       	eicall
    5732:	ff 91       	pop	r31
    5734:	ef 91       	pop	r30
    5736:	bf 91       	pop	r27
    5738:	af 91       	pop	r26
    573a:	9f 91       	pop	r25
    573c:	8f 91       	pop	r24
    573e:	7f 91       	pop	r23
    5740:	6f 91       	pop	r22
    5742:	5f 91       	pop	r21
    5744:	4f 91       	pop	r20
    5746:	3f 91       	pop	r19
    5748:	2f 91       	pop	r18
    574a:	0f 90       	pop	r0
    574c:	0b be       	out	0x3b, r0	; 59
    574e:	0f 90       	pop	r0
    5750:	0f be       	out	0x3f, r0	; 63
    5752:	0f 90       	pop	r0
    5754:	1f 90       	pop	r1
    5756:	18 95       	reti

00005758 <__vector_52>:
    5758:	1f 92       	push	r1
    575a:	0f 92       	push	r0
    575c:	0f b6       	in	r0, 0x3f	; 63
    575e:	0f 92       	push	r0
    5760:	11 24       	eor	r1, r1
    5762:	0b b6       	in	r0, 0x3b	; 59
    5764:	0f 92       	push	r0
    5766:	2f 93       	push	r18
    5768:	3f 93       	push	r19
    576a:	4f 93       	push	r20
    576c:	5f 93       	push	r21
    576e:	6f 93       	push	r22
    5770:	7f 93       	push	r23
    5772:	8f 93       	push	r24
    5774:	9f 93       	push	r25
    5776:	af 93       	push	r26
    5778:	bf 93       	push	r27
    577a:	ef 93       	push	r30
    577c:	ff 93       	push	r31
    577e:	e0 91 83 25 	lds	r30, 0x2583	; 0x802583 <tc_tce0_ccd_callback>
    5782:	f0 91 84 25 	lds	r31, 0x2584	; 0x802584 <tc_tce0_ccd_callback+0x1>
    5786:	30 97       	sbiw	r30, 0x00	; 0
    5788:	09 f0       	breq	.+2      	; 0x578c <__vector_52+0x34>
    578a:	19 95       	eicall
    578c:	ff 91       	pop	r31
    578e:	ef 91       	pop	r30
    5790:	bf 91       	pop	r27
    5792:	af 91       	pop	r26
    5794:	9f 91       	pop	r25
    5796:	8f 91       	pop	r24
    5798:	7f 91       	pop	r23
    579a:	6f 91       	pop	r22
    579c:	5f 91       	pop	r21
    579e:	4f 91       	pop	r20
    57a0:	3f 91       	pop	r19
    57a2:	2f 91       	pop	r18
    57a4:	0f 90       	pop	r0
    57a6:	0b be       	out	0x3b, r0	; 59
    57a8:	0f 90       	pop	r0
    57aa:	0f be       	out	0x3f, r0	; 63
    57ac:	0f 90       	pop	r0
    57ae:	1f 90       	pop	r1
    57b0:	18 95       	reti

000057b2 <__vector_53>:
    57b2:	1f 92       	push	r1
    57b4:	0f 92       	push	r0
    57b6:	0f b6       	in	r0, 0x3f	; 63
    57b8:	0f 92       	push	r0
    57ba:	11 24       	eor	r1, r1
    57bc:	0b b6       	in	r0, 0x3b	; 59
    57be:	0f 92       	push	r0
    57c0:	2f 93       	push	r18
    57c2:	3f 93       	push	r19
    57c4:	4f 93       	push	r20
    57c6:	5f 93       	push	r21
    57c8:	6f 93       	push	r22
    57ca:	7f 93       	push	r23
    57cc:	8f 93       	push	r24
    57ce:	9f 93       	push	r25
    57d0:	af 93       	push	r26
    57d2:	bf 93       	push	r27
    57d4:	ef 93       	push	r30
    57d6:	ff 93       	push	r31
    57d8:	e0 91 81 25 	lds	r30, 0x2581	; 0x802581 <tc_tce1_ovf_callback>
    57dc:	f0 91 82 25 	lds	r31, 0x2582	; 0x802582 <tc_tce1_ovf_callback+0x1>
    57e0:	30 97       	sbiw	r30, 0x00	; 0
    57e2:	09 f0       	breq	.+2      	; 0x57e6 <__vector_53+0x34>
    57e4:	19 95       	eicall
    57e6:	ff 91       	pop	r31
    57e8:	ef 91       	pop	r30
    57ea:	bf 91       	pop	r27
    57ec:	af 91       	pop	r26
    57ee:	9f 91       	pop	r25
    57f0:	8f 91       	pop	r24
    57f2:	7f 91       	pop	r23
    57f4:	6f 91       	pop	r22
    57f6:	5f 91       	pop	r21
    57f8:	4f 91       	pop	r20
    57fa:	3f 91       	pop	r19
    57fc:	2f 91       	pop	r18
    57fe:	0f 90       	pop	r0
    5800:	0b be       	out	0x3b, r0	; 59
    5802:	0f 90       	pop	r0
    5804:	0f be       	out	0x3f, r0	; 63
    5806:	0f 90       	pop	r0
    5808:	1f 90       	pop	r1
    580a:	18 95       	reti

0000580c <__vector_54>:
    580c:	1f 92       	push	r1
    580e:	0f 92       	push	r0
    5810:	0f b6       	in	r0, 0x3f	; 63
    5812:	0f 92       	push	r0
    5814:	11 24       	eor	r1, r1
    5816:	0b b6       	in	r0, 0x3b	; 59
    5818:	0f 92       	push	r0
    581a:	2f 93       	push	r18
    581c:	3f 93       	push	r19
    581e:	4f 93       	push	r20
    5820:	5f 93       	push	r21
    5822:	6f 93       	push	r22
    5824:	7f 93       	push	r23
    5826:	8f 93       	push	r24
    5828:	9f 93       	push	r25
    582a:	af 93       	push	r26
    582c:	bf 93       	push	r27
    582e:	ef 93       	push	r30
    5830:	ff 93       	push	r31
    5832:	e0 91 7f 25 	lds	r30, 0x257F	; 0x80257f <tc_tce1_err_callback>
    5836:	f0 91 80 25 	lds	r31, 0x2580	; 0x802580 <tc_tce1_err_callback+0x1>
    583a:	30 97       	sbiw	r30, 0x00	; 0
    583c:	09 f0       	breq	.+2      	; 0x5840 <__vector_54+0x34>
    583e:	19 95       	eicall
    5840:	ff 91       	pop	r31
    5842:	ef 91       	pop	r30
    5844:	bf 91       	pop	r27
    5846:	af 91       	pop	r26
    5848:	9f 91       	pop	r25
    584a:	8f 91       	pop	r24
    584c:	7f 91       	pop	r23
    584e:	6f 91       	pop	r22
    5850:	5f 91       	pop	r21
    5852:	4f 91       	pop	r20
    5854:	3f 91       	pop	r19
    5856:	2f 91       	pop	r18
    5858:	0f 90       	pop	r0
    585a:	0b be       	out	0x3b, r0	; 59
    585c:	0f 90       	pop	r0
    585e:	0f be       	out	0x3f, r0	; 63
    5860:	0f 90       	pop	r0
    5862:	1f 90       	pop	r1
    5864:	18 95       	reti

00005866 <__vector_55>:
    5866:	1f 92       	push	r1
    5868:	0f 92       	push	r0
    586a:	0f b6       	in	r0, 0x3f	; 63
    586c:	0f 92       	push	r0
    586e:	11 24       	eor	r1, r1
    5870:	0b b6       	in	r0, 0x3b	; 59
    5872:	0f 92       	push	r0
    5874:	2f 93       	push	r18
    5876:	3f 93       	push	r19
    5878:	4f 93       	push	r20
    587a:	5f 93       	push	r21
    587c:	6f 93       	push	r22
    587e:	7f 93       	push	r23
    5880:	8f 93       	push	r24
    5882:	9f 93       	push	r25
    5884:	af 93       	push	r26
    5886:	bf 93       	push	r27
    5888:	ef 93       	push	r30
    588a:	ff 93       	push	r31
    588c:	e0 91 7d 25 	lds	r30, 0x257D	; 0x80257d <tc_tce1_cca_callback>
    5890:	f0 91 7e 25 	lds	r31, 0x257E	; 0x80257e <tc_tce1_cca_callback+0x1>
    5894:	30 97       	sbiw	r30, 0x00	; 0
    5896:	09 f0       	breq	.+2      	; 0x589a <__vector_55+0x34>
    5898:	19 95       	eicall
    589a:	ff 91       	pop	r31
    589c:	ef 91       	pop	r30
    589e:	bf 91       	pop	r27
    58a0:	af 91       	pop	r26
    58a2:	9f 91       	pop	r25
    58a4:	8f 91       	pop	r24
    58a6:	7f 91       	pop	r23
    58a8:	6f 91       	pop	r22
    58aa:	5f 91       	pop	r21
    58ac:	4f 91       	pop	r20
    58ae:	3f 91       	pop	r19
    58b0:	2f 91       	pop	r18
    58b2:	0f 90       	pop	r0
    58b4:	0b be       	out	0x3b, r0	; 59
    58b6:	0f 90       	pop	r0
    58b8:	0f be       	out	0x3f, r0	; 63
    58ba:	0f 90       	pop	r0
    58bc:	1f 90       	pop	r1
    58be:	18 95       	reti

000058c0 <__vector_56>:
    58c0:	1f 92       	push	r1
    58c2:	0f 92       	push	r0
    58c4:	0f b6       	in	r0, 0x3f	; 63
    58c6:	0f 92       	push	r0
    58c8:	11 24       	eor	r1, r1
    58ca:	0b b6       	in	r0, 0x3b	; 59
    58cc:	0f 92       	push	r0
    58ce:	2f 93       	push	r18
    58d0:	3f 93       	push	r19
    58d2:	4f 93       	push	r20
    58d4:	5f 93       	push	r21
    58d6:	6f 93       	push	r22
    58d8:	7f 93       	push	r23
    58da:	8f 93       	push	r24
    58dc:	9f 93       	push	r25
    58de:	af 93       	push	r26
    58e0:	bf 93       	push	r27
    58e2:	ef 93       	push	r30
    58e4:	ff 93       	push	r31
    58e6:	e0 91 7b 25 	lds	r30, 0x257B	; 0x80257b <tc_tce1_ccb_callback>
    58ea:	f0 91 7c 25 	lds	r31, 0x257C	; 0x80257c <tc_tce1_ccb_callback+0x1>
    58ee:	30 97       	sbiw	r30, 0x00	; 0
    58f0:	09 f0       	breq	.+2      	; 0x58f4 <__vector_56+0x34>
    58f2:	19 95       	eicall
    58f4:	ff 91       	pop	r31
    58f6:	ef 91       	pop	r30
    58f8:	bf 91       	pop	r27
    58fa:	af 91       	pop	r26
    58fc:	9f 91       	pop	r25
    58fe:	8f 91       	pop	r24
    5900:	7f 91       	pop	r23
    5902:	6f 91       	pop	r22
    5904:	5f 91       	pop	r21
    5906:	4f 91       	pop	r20
    5908:	3f 91       	pop	r19
    590a:	2f 91       	pop	r18
    590c:	0f 90       	pop	r0
    590e:	0b be       	out	0x3b, r0	; 59
    5910:	0f 90       	pop	r0
    5912:	0f be       	out	0x3f, r0	; 63
    5914:	0f 90       	pop	r0
    5916:	1f 90       	pop	r1
    5918:	18 95       	reti

0000591a <__vector_108>:
    591a:	1f 92       	push	r1
    591c:	0f 92       	push	r0
    591e:	0f b6       	in	r0, 0x3f	; 63
    5920:	0f 92       	push	r0
    5922:	11 24       	eor	r1, r1
    5924:	0b b6       	in	r0, 0x3b	; 59
    5926:	0f 92       	push	r0
    5928:	2f 93       	push	r18
    592a:	3f 93       	push	r19
    592c:	4f 93       	push	r20
    592e:	5f 93       	push	r21
    5930:	6f 93       	push	r22
    5932:	7f 93       	push	r23
    5934:	8f 93       	push	r24
    5936:	9f 93       	push	r25
    5938:	af 93       	push	r26
    593a:	bf 93       	push	r27
    593c:	ef 93       	push	r30
    593e:	ff 93       	push	r31
    5940:	e0 91 79 25 	lds	r30, 0x2579	; 0x802579 <tc_tcf0_ovf_callback>
    5944:	f0 91 7a 25 	lds	r31, 0x257A	; 0x80257a <tc_tcf0_ovf_callback+0x1>
    5948:	30 97       	sbiw	r30, 0x00	; 0
    594a:	09 f0       	breq	.+2      	; 0x594e <__vector_108+0x34>
    594c:	19 95       	eicall
    594e:	ff 91       	pop	r31
    5950:	ef 91       	pop	r30
    5952:	bf 91       	pop	r27
    5954:	af 91       	pop	r26
    5956:	9f 91       	pop	r25
    5958:	8f 91       	pop	r24
    595a:	7f 91       	pop	r23
    595c:	6f 91       	pop	r22
    595e:	5f 91       	pop	r21
    5960:	4f 91       	pop	r20
    5962:	3f 91       	pop	r19
    5964:	2f 91       	pop	r18
    5966:	0f 90       	pop	r0
    5968:	0b be       	out	0x3b, r0	; 59
    596a:	0f 90       	pop	r0
    596c:	0f be       	out	0x3f, r0	; 63
    596e:	0f 90       	pop	r0
    5970:	1f 90       	pop	r1
    5972:	18 95       	reti

00005974 <__vector_109>:
    5974:	1f 92       	push	r1
    5976:	0f 92       	push	r0
    5978:	0f b6       	in	r0, 0x3f	; 63
    597a:	0f 92       	push	r0
    597c:	11 24       	eor	r1, r1
    597e:	0b b6       	in	r0, 0x3b	; 59
    5980:	0f 92       	push	r0
    5982:	2f 93       	push	r18
    5984:	3f 93       	push	r19
    5986:	4f 93       	push	r20
    5988:	5f 93       	push	r21
    598a:	6f 93       	push	r22
    598c:	7f 93       	push	r23
    598e:	8f 93       	push	r24
    5990:	9f 93       	push	r25
    5992:	af 93       	push	r26
    5994:	bf 93       	push	r27
    5996:	ef 93       	push	r30
    5998:	ff 93       	push	r31
    599a:	e0 91 77 25 	lds	r30, 0x2577	; 0x802577 <tc_tcf0_err_callback>
    599e:	f0 91 78 25 	lds	r31, 0x2578	; 0x802578 <tc_tcf0_err_callback+0x1>
    59a2:	30 97       	sbiw	r30, 0x00	; 0
    59a4:	09 f0       	breq	.+2      	; 0x59a8 <__vector_109+0x34>
    59a6:	19 95       	eicall
    59a8:	ff 91       	pop	r31
    59aa:	ef 91       	pop	r30
    59ac:	bf 91       	pop	r27
    59ae:	af 91       	pop	r26
    59b0:	9f 91       	pop	r25
    59b2:	8f 91       	pop	r24
    59b4:	7f 91       	pop	r23
    59b6:	6f 91       	pop	r22
    59b8:	5f 91       	pop	r21
    59ba:	4f 91       	pop	r20
    59bc:	3f 91       	pop	r19
    59be:	2f 91       	pop	r18
    59c0:	0f 90       	pop	r0
    59c2:	0b be       	out	0x3b, r0	; 59
    59c4:	0f 90       	pop	r0
    59c6:	0f be       	out	0x3f, r0	; 63
    59c8:	0f 90       	pop	r0
    59ca:	1f 90       	pop	r1
    59cc:	18 95       	reti

000059ce <__vector_110>:
    59ce:	1f 92       	push	r1
    59d0:	0f 92       	push	r0
    59d2:	0f b6       	in	r0, 0x3f	; 63
    59d4:	0f 92       	push	r0
    59d6:	11 24       	eor	r1, r1
    59d8:	0b b6       	in	r0, 0x3b	; 59
    59da:	0f 92       	push	r0
    59dc:	2f 93       	push	r18
    59de:	3f 93       	push	r19
    59e0:	4f 93       	push	r20
    59e2:	5f 93       	push	r21
    59e4:	6f 93       	push	r22
    59e6:	7f 93       	push	r23
    59e8:	8f 93       	push	r24
    59ea:	9f 93       	push	r25
    59ec:	af 93       	push	r26
    59ee:	bf 93       	push	r27
    59f0:	ef 93       	push	r30
    59f2:	ff 93       	push	r31
    59f4:	e0 91 75 25 	lds	r30, 0x2575	; 0x802575 <tc_tcf0_cca_callback>
    59f8:	f0 91 76 25 	lds	r31, 0x2576	; 0x802576 <tc_tcf0_cca_callback+0x1>
    59fc:	30 97       	sbiw	r30, 0x00	; 0
    59fe:	09 f0       	breq	.+2      	; 0x5a02 <__vector_110+0x34>
    5a00:	19 95       	eicall
    5a02:	ff 91       	pop	r31
    5a04:	ef 91       	pop	r30
    5a06:	bf 91       	pop	r27
    5a08:	af 91       	pop	r26
    5a0a:	9f 91       	pop	r25
    5a0c:	8f 91       	pop	r24
    5a0e:	7f 91       	pop	r23
    5a10:	6f 91       	pop	r22
    5a12:	5f 91       	pop	r21
    5a14:	4f 91       	pop	r20
    5a16:	3f 91       	pop	r19
    5a18:	2f 91       	pop	r18
    5a1a:	0f 90       	pop	r0
    5a1c:	0b be       	out	0x3b, r0	; 59
    5a1e:	0f 90       	pop	r0
    5a20:	0f be       	out	0x3f, r0	; 63
    5a22:	0f 90       	pop	r0
    5a24:	1f 90       	pop	r1
    5a26:	18 95       	reti

00005a28 <__vector_111>:
    5a28:	1f 92       	push	r1
    5a2a:	0f 92       	push	r0
    5a2c:	0f b6       	in	r0, 0x3f	; 63
    5a2e:	0f 92       	push	r0
    5a30:	11 24       	eor	r1, r1
    5a32:	0b b6       	in	r0, 0x3b	; 59
    5a34:	0f 92       	push	r0
    5a36:	2f 93       	push	r18
    5a38:	3f 93       	push	r19
    5a3a:	4f 93       	push	r20
    5a3c:	5f 93       	push	r21
    5a3e:	6f 93       	push	r22
    5a40:	7f 93       	push	r23
    5a42:	8f 93       	push	r24
    5a44:	9f 93       	push	r25
    5a46:	af 93       	push	r26
    5a48:	bf 93       	push	r27
    5a4a:	ef 93       	push	r30
    5a4c:	ff 93       	push	r31
    5a4e:	e0 91 73 25 	lds	r30, 0x2573	; 0x802573 <tc_tcf0_ccb_callback>
    5a52:	f0 91 74 25 	lds	r31, 0x2574	; 0x802574 <tc_tcf0_ccb_callback+0x1>
    5a56:	30 97       	sbiw	r30, 0x00	; 0
    5a58:	09 f0       	breq	.+2      	; 0x5a5c <__vector_111+0x34>
    5a5a:	19 95       	eicall
    5a5c:	ff 91       	pop	r31
    5a5e:	ef 91       	pop	r30
    5a60:	bf 91       	pop	r27
    5a62:	af 91       	pop	r26
    5a64:	9f 91       	pop	r25
    5a66:	8f 91       	pop	r24
    5a68:	7f 91       	pop	r23
    5a6a:	6f 91       	pop	r22
    5a6c:	5f 91       	pop	r21
    5a6e:	4f 91       	pop	r20
    5a70:	3f 91       	pop	r19
    5a72:	2f 91       	pop	r18
    5a74:	0f 90       	pop	r0
    5a76:	0b be       	out	0x3b, r0	; 59
    5a78:	0f 90       	pop	r0
    5a7a:	0f be       	out	0x3f, r0	; 63
    5a7c:	0f 90       	pop	r0
    5a7e:	1f 90       	pop	r1
    5a80:	18 95       	reti

00005a82 <__vector_112>:
    5a82:	1f 92       	push	r1
    5a84:	0f 92       	push	r0
    5a86:	0f b6       	in	r0, 0x3f	; 63
    5a88:	0f 92       	push	r0
    5a8a:	11 24       	eor	r1, r1
    5a8c:	0b b6       	in	r0, 0x3b	; 59
    5a8e:	0f 92       	push	r0
    5a90:	2f 93       	push	r18
    5a92:	3f 93       	push	r19
    5a94:	4f 93       	push	r20
    5a96:	5f 93       	push	r21
    5a98:	6f 93       	push	r22
    5a9a:	7f 93       	push	r23
    5a9c:	8f 93       	push	r24
    5a9e:	9f 93       	push	r25
    5aa0:	af 93       	push	r26
    5aa2:	bf 93       	push	r27
    5aa4:	ef 93       	push	r30
    5aa6:	ff 93       	push	r31
    5aa8:	e0 91 71 25 	lds	r30, 0x2571	; 0x802571 <tc_tcf0_ccc_callback>
    5aac:	f0 91 72 25 	lds	r31, 0x2572	; 0x802572 <tc_tcf0_ccc_callback+0x1>
    5ab0:	30 97       	sbiw	r30, 0x00	; 0
    5ab2:	09 f0       	breq	.+2      	; 0x5ab6 <__vector_112+0x34>
    5ab4:	19 95       	eicall
    5ab6:	ff 91       	pop	r31
    5ab8:	ef 91       	pop	r30
    5aba:	bf 91       	pop	r27
    5abc:	af 91       	pop	r26
    5abe:	9f 91       	pop	r25
    5ac0:	8f 91       	pop	r24
    5ac2:	7f 91       	pop	r23
    5ac4:	6f 91       	pop	r22
    5ac6:	5f 91       	pop	r21
    5ac8:	4f 91       	pop	r20
    5aca:	3f 91       	pop	r19
    5acc:	2f 91       	pop	r18
    5ace:	0f 90       	pop	r0
    5ad0:	0b be       	out	0x3b, r0	; 59
    5ad2:	0f 90       	pop	r0
    5ad4:	0f be       	out	0x3f, r0	; 63
    5ad6:	0f 90       	pop	r0
    5ad8:	1f 90       	pop	r1
    5ada:	18 95       	reti

00005adc <__vector_113>:
    5adc:	1f 92       	push	r1
    5ade:	0f 92       	push	r0
    5ae0:	0f b6       	in	r0, 0x3f	; 63
    5ae2:	0f 92       	push	r0
    5ae4:	11 24       	eor	r1, r1
    5ae6:	0b b6       	in	r0, 0x3b	; 59
    5ae8:	0f 92       	push	r0
    5aea:	2f 93       	push	r18
    5aec:	3f 93       	push	r19
    5aee:	4f 93       	push	r20
    5af0:	5f 93       	push	r21
    5af2:	6f 93       	push	r22
    5af4:	7f 93       	push	r23
    5af6:	8f 93       	push	r24
    5af8:	9f 93       	push	r25
    5afa:	af 93       	push	r26
    5afc:	bf 93       	push	r27
    5afe:	ef 93       	push	r30
    5b00:	ff 93       	push	r31
    5b02:	e0 91 6f 25 	lds	r30, 0x256F	; 0x80256f <tc_tcf0_ccd_callback>
    5b06:	f0 91 70 25 	lds	r31, 0x2570	; 0x802570 <tc_tcf0_ccd_callback+0x1>
    5b0a:	30 97       	sbiw	r30, 0x00	; 0
    5b0c:	09 f0       	breq	.+2      	; 0x5b10 <__vector_113+0x34>
    5b0e:	19 95       	eicall
    5b10:	ff 91       	pop	r31
    5b12:	ef 91       	pop	r30
    5b14:	bf 91       	pop	r27
    5b16:	af 91       	pop	r26
    5b18:	9f 91       	pop	r25
    5b1a:	8f 91       	pop	r24
    5b1c:	7f 91       	pop	r23
    5b1e:	6f 91       	pop	r22
    5b20:	5f 91       	pop	r21
    5b22:	4f 91       	pop	r20
    5b24:	3f 91       	pop	r19
    5b26:	2f 91       	pop	r18
    5b28:	0f 90       	pop	r0
    5b2a:	0b be       	out	0x3b, r0	; 59
    5b2c:	0f 90       	pop	r0
    5b2e:	0f be       	out	0x3f, r0	; 63
    5b30:	0f 90       	pop	r0
    5b32:	1f 90       	pop	r1
    5b34:	18 95       	reti

00005b36 <tc_enable>:
    5b36:	1f 93       	push	r17
    5b38:	cf 93       	push	r28
    5b3a:	df 93       	push	r29
    5b3c:	1f 92       	push	r1
    5b3e:	1f 92       	push	r1
    5b40:	cd b7       	in	r28, 0x3d	; 61
    5b42:	de b7       	in	r29, 0x3e	; 62
    5b44:	2f b7       	in	r18, 0x3f	; 63
    5b46:	2a 83       	std	Y+2, r18	; 0x02
    5b48:	f8 94       	cli
    5b4a:	1a 81       	ldd	r17, Y+2	; 0x02
    5b4c:	28 2f       	mov	r18, r24
    5b4e:	39 2f       	mov	r19, r25
    5b50:	21 15       	cp	r18, r1
    5b52:	88 e0       	ldi	r24, 0x08	; 8
    5b54:	38 07       	cpc	r19, r24
    5b56:	49 f4       	brne	.+18     	; 0x5b6a <tc_enable+0x34>
    5b58:	61 e0       	ldi	r22, 0x01	; 1
    5b5a:	83 e0       	ldi	r24, 0x03	; 3
    5b5c:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5b60:	64 e0       	ldi	r22, 0x04	; 4
    5b62:	83 e0       	ldi	r24, 0x03	; 3
    5b64:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5b68:	4f c0       	rjmp	.+158    	; 0x5c08 <tc_enable+0xd2>
    5b6a:	20 34       	cpi	r18, 0x40	; 64
    5b6c:	88 e0       	ldi	r24, 0x08	; 8
    5b6e:	38 07       	cpc	r19, r24
    5b70:	49 f4       	brne	.+18     	; 0x5b84 <tc_enable+0x4e>
    5b72:	62 e0       	ldi	r22, 0x02	; 2
    5b74:	83 e0       	ldi	r24, 0x03	; 3
    5b76:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5b7a:	64 e0       	ldi	r22, 0x04	; 4
    5b7c:	83 e0       	ldi	r24, 0x03	; 3
    5b7e:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5b82:	42 c0       	rjmp	.+132    	; 0x5c08 <tc_enable+0xd2>
    5b84:	21 15       	cp	r18, r1
    5b86:	89 e0       	ldi	r24, 0x09	; 9
    5b88:	38 07       	cpc	r19, r24
    5b8a:	49 f4       	brne	.+18     	; 0x5b9e <tc_enable+0x68>
    5b8c:	61 e0       	ldi	r22, 0x01	; 1
    5b8e:	84 e0       	ldi	r24, 0x04	; 4
    5b90:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5b94:	64 e0       	ldi	r22, 0x04	; 4
    5b96:	84 e0       	ldi	r24, 0x04	; 4
    5b98:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5b9c:	35 c0       	rjmp	.+106    	; 0x5c08 <tc_enable+0xd2>
    5b9e:	20 34       	cpi	r18, 0x40	; 64
    5ba0:	89 e0       	ldi	r24, 0x09	; 9
    5ba2:	38 07       	cpc	r19, r24
    5ba4:	49 f4       	brne	.+18     	; 0x5bb8 <tc_enable+0x82>
    5ba6:	62 e0       	ldi	r22, 0x02	; 2
    5ba8:	84 e0       	ldi	r24, 0x04	; 4
    5baa:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5bae:	64 e0       	ldi	r22, 0x04	; 4
    5bb0:	84 e0       	ldi	r24, 0x04	; 4
    5bb2:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5bb6:	28 c0       	rjmp	.+80     	; 0x5c08 <tc_enable+0xd2>
    5bb8:	21 15       	cp	r18, r1
    5bba:	8a e0       	ldi	r24, 0x0A	; 10
    5bbc:	38 07       	cpc	r19, r24
    5bbe:	49 f4       	brne	.+18     	; 0x5bd2 <tc_enable+0x9c>
    5bc0:	61 e0       	ldi	r22, 0x01	; 1
    5bc2:	85 e0       	ldi	r24, 0x05	; 5
    5bc4:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5bc8:	64 e0       	ldi	r22, 0x04	; 4
    5bca:	85 e0       	ldi	r24, 0x05	; 5
    5bcc:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5bd0:	1b c0       	rjmp	.+54     	; 0x5c08 <tc_enable+0xd2>
    5bd2:	20 34       	cpi	r18, 0x40	; 64
    5bd4:	8a e0       	ldi	r24, 0x0A	; 10
    5bd6:	38 07       	cpc	r19, r24
    5bd8:	49 f4       	brne	.+18     	; 0x5bec <tc_enable+0xb6>
    5bda:	62 e0       	ldi	r22, 0x02	; 2
    5bdc:	85 e0       	ldi	r24, 0x05	; 5
    5bde:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5be2:	64 e0       	ldi	r22, 0x04	; 4
    5be4:	85 e0       	ldi	r24, 0x05	; 5
    5be6:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5bea:	0e c0       	rjmp	.+28     	; 0x5c08 <tc_enable+0xd2>
    5bec:	21 15       	cp	r18, r1
    5bee:	3b 40       	sbci	r19, 0x0B	; 11
    5bf0:	49 f4       	brne	.+18     	; 0x5c04 <tc_enable+0xce>
    5bf2:	61 e0       	ldi	r22, 0x01	; 1
    5bf4:	86 e0       	ldi	r24, 0x06	; 6
    5bf6:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5bfa:	64 e0       	ldi	r22, 0x04	; 4
    5bfc:	86 e0       	ldi	r24, 0x06	; 6
    5bfe:	0e 94 2c 42 	call	0x8458	; 0x8458 <sysclk_enable_module>
    5c02:	02 c0       	rjmp	.+4      	; 0x5c08 <tc_enable+0xd2>
    5c04:	1f bf       	out	0x3f, r17	; 63
    5c06:	10 c0       	rjmp	.+32     	; 0x5c28 <tc_enable+0xf2>
    5c08:	80 91 a0 29 	lds	r24, 0x29A0	; 0x8029a0 <sleepmgr_locks+0x1>
    5c0c:	8f 3f       	cpi	r24, 0xFF	; 255
    5c0e:	09 f4       	brne	.+2      	; 0x5c12 <tc_enable+0xdc>
    5c10:	ff cf       	rjmp	.-2      	; 0x5c10 <tc_enable+0xda>
    5c12:	8f b7       	in	r24, 0x3f	; 63
    5c14:	89 83       	std	Y+1, r24	; 0x01
    5c16:	f8 94       	cli
    5c18:	99 81       	ldd	r25, Y+1	; 0x01
    5c1a:	ef e9       	ldi	r30, 0x9F	; 159
    5c1c:	f9 e2       	ldi	r31, 0x29	; 41
    5c1e:	81 81       	ldd	r24, Z+1	; 0x01
    5c20:	8f 5f       	subi	r24, 0xFF	; 255
    5c22:	81 83       	std	Z+1, r24	; 0x01
    5c24:	9f bf       	out	0x3f, r25	; 63
    5c26:	1f bf       	out	0x3f, r17	; 63
    5c28:	0f 90       	pop	r0
    5c2a:	0f 90       	pop	r0
    5c2c:	df 91       	pop	r29
    5c2e:	cf 91       	pop	r28
    5c30:	1f 91       	pop	r17
    5c32:	08 95       	ret

00005c34 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    5c34:	81 15       	cp	r24, r1
    5c36:	28 e0       	ldi	r18, 0x08	; 8
    5c38:	92 07       	cpc	r25, r18
    5c3a:	29 f4       	brne	.+10     	; 0x5c46 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    5c3c:	60 93 b5 25 	sts	0x25B5, r22	; 0x8025b5 <tc_tcc0_ovf_callback>
    5c40:	70 93 b6 25 	sts	0x25B6, r23	; 0x8025b6 <tc_tcc0_ovf_callback+0x1>
    5c44:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    5c46:	80 34       	cpi	r24, 0x40	; 64
    5c48:	28 e0       	ldi	r18, 0x08	; 8
    5c4a:	92 07       	cpc	r25, r18
    5c4c:	29 f4       	brne	.+10     	; 0x5c58 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    5c4e:	60 93 a9 25 	sts	0x25A9, r22	; 0x8025a9 <tc_tcc1_ovf_callback>
    5c52:	70 93 aa 25 	sts	0x25AA, r23	; 0x8025aa <tc_tcc1_ovf_callback+0x1>
    5c56:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    5c58:	81 15       	cp	r24, r1
    5c5a:	29 e0       	ldi	r18, 0x09	; 9
    5c5c:	92 07       	cpc	r25, r18
    5c5e:	29 f4       	brne	.+10     	; 0x5c6a <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    5c60:	60 93 a1 25 	sts	0x25A1, r22	; 0x8025a1 <tc_tcd0_ovf_callback>
    5c64:	70 93 a2 25 	sts	0x25A2, r23	; 0x8025a2 <tc_tcd0_ovf_callback+0x1>
    5c68:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    5c6a:	80 34       	cpi	r24, 0x40	; 64
    5c6c:	29 e0       	ldi	r18, 0x09	; 9
    5c6e:	92 07       	cpc	r25, r18
    5c70:	29 f4       	brne	.+10     	; 0x5c7c <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    5c72:	60 93 95 25 	sts	0x2595, r22	; 0x802595 <tc_tcd1_ovf_callback>
    5c76:	70 93 96 25 	sts	0x2596, r23	; 0x802596 <tc_tcd1_ovf_callback+0x1>
    5c7a:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    5c7c:	81 15       	cp	r24, r1
    5c7e:	2a e0       	ldi	r18, 0x0A	; 10
    5c80:	92 07       	cpc	r25, r18
    5c82:	29 f4       	brne	.+10     	; 0x5c8e <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    5c84:	60 93 8d 25 	sts	0x258D, r22	; 0x80258d <tc_tce0_ovf_callback>
    5c88:	70 93 8e 25 	sts	0x258E, r23	; 0x80258e <tc_tce0_ovf_callback+0x1>
    5c8c:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    5c8e:	80 34       	cpi	r24, 0x40	; 64
    5c90:	2a e0       	ldi	r18, 0x0A	; 10
    5c92:	92 07       	cpc	r25, r18
    5c94:	29 f4       	brne	.+10     	; 0x5ca0 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    5c96:	60 93 81 25 	sts	0x2581, r22	; 0x802581 <tc_tce1_ovf_callback>
    5c9a:	70 93 82 25 	sts	0x2582, r23	; 0x802582 <tc_tce1_ovf_callback+0x1>
    5c9e:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    5ca0:	81 15       	cp	r24, r1
    5ca2:	9b 40       	sbci	r25, 0x0B	; 11
    5ca4:	21 f4       	brne	.+8      	; 0x5cae <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    5ca6:	60 93 79 25 	sts	0x2579, r22	; 0x802579 <tc_tcf0_ovf_callback>
    5caa:	70 93 7a 25 	sts	0x257A, r23	; 0x80257a <tc_tcf0_ovf_callback+0x1>
    5cae:	08 95       	ret

00005cb0 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    5cb0:	cf 93       	push	r28
    5cb2:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    5cb4:	e0 91 b7 25 	lds	r30, 0x25B7	; 0x8025b7 <transfer>
    5cb8:	f0 91 b8 25 	lds	r31, 0x25B8	; 0x8025b8 <transfer+0x1>
    5cbc:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    5cbe:	83 ff       	sbrs	r24, 3
    5cc0:	08 c0       	rjmp	.+16     	; 0x5cd2 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    5cc2:	88 60       	ori	r24, 0x08	; 8
    5cc4:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    5cc6:	83 e0       	ldi	r24, 0x03	; 3
    5cc8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    5cca:	86 ef       	ldi	r24, 0xF6	; 246
    5ccc:	80 93 c1 25 	sts	0x25C1, r24	; 0x8025c1 <transfer+0xa>
    5cd0:	83 c0       	rjmp	.+262    	; 0x5dd8 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    5cd2:	98 2f       	mov	r25, r24
    5cd4:	94 71       	andi	r25, 0x14	; 20
    5cd6:	31 f0       	breq	.+12     	; 0x5ce4 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5cd8:	83 e0       	ldi	r24, 0x03	; 3
    5cda:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    5cdc:	8f ef       	ldi	r24, 0xFF	; 255
    5cde:	80 93 c1 25 	sts	0x25C1, r24	; 0x8025c1 <transfer+0xa>
    5ce2:	7a c0       	rjmp	.+244    	; 0x5dd8 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    5ce4:	86 ff       	sbrs	r24, 6
    5ce6:	43 c0       	rjmp	.+134    	; 0x5d6e <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    5ce8:	c7 eb       	ldi	r28, 0xB7	; 183
    5cea:	d5 e2       	ldi	r29, 0x25	; 37
    5cec:	aa 81       	ldd	r26, Y+2	; 0x02
    5cee:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    5cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    5cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    5cf4:	14 96       	adiw	r26, 0x04	; 4
    5cf6:	2d 91       	ld	r18, X+
    5cf8:	3c 91       	ld	r19, X
    5cfa:	15 97       	sbiw	r26, 0x05	; 5
    5cfc:	82 17       	cp	r24, r18
    5cfe:	93 07       	cpc	r25, r19
    5d00:	6c f4       	brge	.+26     	; 0x5d1c <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    5d02:	9c 01       	movw	r18, r24
    5d04:	2f 5f       	subi	r18, 0xFF	; 255
    5d06:	3f 4f       	sbci	r19, 0xFF	; 255
    5d08:	20 93 bb 25 	sts	0x25BB, r18	; 0x8025bb <transfer+0x4>
    5d0c:	30 93 bc 25 	sts	0x25BC, r19	; 0x8025bc <transfer+0x5>
    5d10:	a8 0f       	add	r26, r24
    5d12:	b9 1f       	adc	r27, r25
    5d14:	11 96       	adiw	r26, 0x01	; 1
    5d16:	8c 91       	ld	r24, X
    5d18:	87 83       	std	Z+7, r24	; 0x07
    5d1a:	5e c0       	rjmp	.+188    	; 0x5dd8 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    5d1c:	80 91 bd 25 	lds	r24, 0x25BD	; 0x8025bd <transfer+0x6>
    5d20:	90 91 be 25 	lds	r25, 0x25BE	; 0x8025be <transfer+0x7>
    5d24:	18 96       	adiw	r26, 0x08	; 8
    5d26:	2d 91       	ld	r18, X+
    5d28:	3c 91       	ld	r19, X
    5d2a:	19 97       	sbiw	r26, 0x09	; 9
    5d2c:	82 17       	cp	r24, r18
    5d2e:	93 07       	cpc	r25, r19
    5d30:	c8 f4       	brcc	.+50     	; 0x5d64 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    5d32:	20 91 bf 25 	lds	r18, 0x25BF	; 0x8025bf <transfer+0x8>
    5d36:	22 23       	and	r18, r18
    5d38:	21 f0       	breq	.+8      	; 0x5d42 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    5d3a:	86 81       	ldd	r24, Z+6	; 0x06
    5d3c:	81 60       	ori	r24, 0x01	; 1
    5d3e:	86 83       	std	Z+6, r24	; 0x06
    5d40:	4b c0       	rjmp	.+150    	; 0x5dd8 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    5d42:	16 96       	adiw	r26, 0x06	; 6
    5d44:	2d 91       	ld	r18, X+
    5d46:	3c 91       	ld	r19, X
    5d48:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    5d4a:	ac 01       	movw	r20, r24
    5d4c:	4f 5f       	subi	r20, 0xFF	; 255
    5d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    5d50:	40 93 bd 25 	sts	0x25BD, r20	; 0x8025bd <transfer+0x6>
    5d54:	50 93 be 25 	sts	0x25BE, r21	; 0x8025be <transfer+0x7>
    5d58:	d9 01       	movw	r26, r18
    5d5a:	a8 0f       	add	r26, r24
    5d5c:	b9 1f       	adc	r27, r25
    5d5e:	8c 91       	ld	r24, X
    5d60:	87 83       	std	Z+7, r24	; 0x07
    5d62:	3a c0       	rjmp	.+116    	; 0x5dd8 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5d64:	83 e0       	ldi	r24, 0x03	; 3
    5d66:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    5d68:	10 92 c1 25 	sts	0x25C1, r1	; 0x8025c1 <transfer+0xa>
    5d6c:	35 c0       	rjmp	.+106    	; 0x5dd8 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    5d6e:	88 23       	and	r24, r24
    5d70:	84 f5       	brge	.+96     	; 0x5dd2 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    5d72:	a7 eb       	ldi	r26, 0xB7	; 183
    5d74:	b5 e2       	ldi	r27, 0x25	; 37
    5d76:	12 96       	adiw	r26, 0x02	; 2
    5d78:	cd 91       	ld	r28, X+
    5d7a:	dc 91       	ld	r29, X
    5d7c:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    5d7e:	16 96       	adiw	r26, 0x06	; 6
    5d80:	8d 91       	ld	r24, X+
    5d82:	9c 91       	ld	r25, X
    5d84:	17 97       	sbiw	r26, 0x07	; 7
    5d86:	28 85       	ldd	r18, Y+8	; 0x08
    5d88:	39 85       	ldd	r19, Y+9	; 0x09
    5d8a:	82 17       	cp	r24, r18
    5d8c:	93 07       	cpc	r25, r19
    5d8e:	d8 f4       	brcc	.+54     	; 0x5dc6 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    5d90:	6e 81       	ldd	r22, Y+6	; 0x06
    5d92:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    5d94:	9c 01       	movw	r18, r24
    5d96:	2f 5f       	subi	r18, 0xFF	; 255
    5d98:	3f 4f       	sbci	r19, 0xFF	; 255
    5d9a:	20 93 bd 25 	sts	0x25BD, r18	; 0x8025bd <transfer+0x6>
    5d9e:	30 93 be 25 	sts	0x25BE, r19	; 0x8025be <transfer+0x7>
    5da2:	47 81       	ldd	r20, Z+7	; 0x07
    5da4:	db 01       	movw	r26, r22
    5da6:	a8 0f       	add	r26, r24
    5da8:	b9 1f       	adc	r27, r25
    5daa:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    5dac:	88 85       	ldd	r24, Y+8	; 0x08
    5dae:	99 85       	ldd	r25, Y+9	; 0x09
    5db0:	28 17       	cp	r18, r24
    5db2:	39 07       	cpc	r19, r25
    5db4:	18 f4       	brcc	.+6      	; 0x5dbc <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    5db6:	82 e0       	ldi	r24, 0x02	; 2
    5db8:	83 83       	std	Z+3, r24	; 0x03
    5dba:	0e c0       	rjmp	.+28     	; 0x5dd8 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    5dbc:	87 e0       	ldi	r24, 0x07	; 7
    5dbe:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    5dc0:	10 92 c1 25 	sts	0x25C1, r1	; 0x8025c1 <transfer+0xa>
    5dc4:	09 c0       	rjmp	.+18     	; 0x5dd8 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5dc6:	83 e0       	ldi	r24, 0x03	; 3
    5dc8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    5dca:	89 ef       	ldi	r24, 0xF9	; 249
    5dcc:	80 93 c1 25 	sts	0x25C1, r24	; 0x8025c1 <transfer+0xa>
    5dd0:	03 c0       	rjmp	.+6      	; 0x5dd8 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    5dd2:	8b ef       	ldi	r24, 0xFB	; 251
    5dd4:	80 93 c1 25 	sts	0x25C1, r24	; 0x8025c1 <transfer+0xa>
	}
}
    5dd8:	df 91       	pop	r29
    5dda:	cf 91       	pop	r28
    5ddc:	08 95       	ret

00005dde <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    5dde:	1f 92       	push	r1
    5de0:	0f 92       	push	r0
    5de2:	0f b6       	in	r0, 0x3f	; 63
    5de4:	0f 92       	push	r0
    5de6:	11 24       	eor	r1, r1
    5de8:	0b b6       	in	r0, 0x3b	; 59
    5dea:	0f 92       	push	r0
    5dec:	2f 93       	push	r18
    5dee:	3f 93       	push	r19
    5df0:	4f 93       	push	r20
    5df2:	5f 93       	push	r21
    5df4:	6f 93       	push	r22
    5df6:	7f 93       	push	r23
    5df8:	8f 93       	push	r24
    5dfa:	9f 93       	push	r25
    5dfc:	af 93       	push	r26
    5dfe:	bf 93       	push	r27
    5e00:	ef 93       	push	r30
    5e02:	ff 93       	push	r31
    5e04:	55 df       	rcall	.-342    	; 0x5cb0 <twim_interrupt_handler>
    5e06:	ff 91       	pop	r31
    5e08:	ef 91       	pop	r30
    5e0a:	bf 91       	pop	r27
    5e0c:	af 91       	pop	r26
    5e0e:	9f 91       	pop	r25
    5e10:	8f 91       	pop	r24
    5e12:	7f 91       	pop	r23
    5e14:	6f 91       	pop	r22
    5e16:	5f 91       	pop	r21
    5e18:	4f 91       	pop	r20
    5e1a:	3f 91       	pop	r19
    5e1c:	2f 91       	pop	r18
    5e1e:	0f 90       	pop	r0
    5e20:	0b be       	out	0x3b, r0	; 59
    5e22:	0f 90       	pop	r0
    5e24:	0f be       	out	0x3f, r0	; 63
    5e26:	0f 90       	pop	r0
    5e28:	1f 90       	pop	r1
    5e2a:	18 95       	reti

00005e2c <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    5e2c:	1f 92       	push	r1
    5e2e:	0f 92       	push	r0
    5e30:	0f b6       	in	r0, 0x3f	; 63
    5e32:	0f 92       	push	r0
    5e34:	11 24       	eor	r1, r1
    5e36:	0b b6       	in	r0, 0x3b	; 59
    5e38:	0f 92       	push	r0
    5e3a:	2f 93       	push	r18
    5e3c:	3f 93       	push	r19
    5e3e:	4f 93       	push	r20
    5e40:	5f 93       	push	r21
    5e42:	6f 93       	push	r22
    5e44:	7f 93       	push	r23
    5e46:	8f 93       	push	r24
    5e48:	9f 93       	push	r25
    5e4a:	af 93       	push	r26
    5e4c:	bf 93       	push	r27
    5e4e:	ef 93       	push	r30
    5e50:	ff 93       	push	r31
    5e52:	2e df       	rcall	.-420    	; 0x5cb0 <twim_interrupt_handler>
    5e54:	ff 91       	pop	r31
    5e56:	ef 91       	pop	r30
    5e58:	bf 91       	pop	r27
    5e5a:	af 91       	pop	r26
    5e5c:	9f 91       	pop	r25
    5e5e:	8f 91       	pop	r24
    5e60:	7f 91       	pop	r23
    5e62:	6f 91       	pop	r22
    5e64:	5f 91       	pop	r21
    5e66:	4f 91       	pop	r20
    5e68:	3f 91       	pop	r19
    5e6a:	2f 91       	pop	r18
    5e6c:	0f 90       	pop	r0
    5e6e:	0b be       	out	0x3b, r0	; 59
    5e70:	0f 90       	pop	r0
    5e72:	0f be       	out	0x3f, r0	; 63
    5e74:	0f 90       	pop	r0
    5e76:	1f 90       	pop	r1
    5e78:	18 95       	reti

00005e7a <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    5e7a:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    5e7c:	db 01       	movw	r26, r22
    5e7e:	14 96       	adiw	r26, 0x04	; 4
    5e80:	8c 91       	ld	r24, X
    5e82:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    5e84:	88 eb       	ldi	r24, 0xB8	; 184
    5e86:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    5e88:	81 e0       	ldi	r24, 0x01	; 1
    5e8a:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    5e8c:	e7 eb       	ldi	r30, 0xB7	; 183
    5e8e:	f5 e2       	ldi	r31, 0x25	; 37
    5e90:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    5e92:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    5e94:	e0 ea       	ldi	r30, 0xA0	; 160
    5e96:	f0 e0       	ldi	r31, 0x00	; 0
    5e98:	82 81       	ldd	r24, Z+2	; 0x02
    5e9a:	82 60       	ori	r24, 0x02	; 2
    5e9c:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    5e9e:	78 94       	sei

	return STATUS_OK;
}
    5ea0:	80 e0       	ldi	r24, 0x00	; 0
    5ea2:	08 95       	ret

00005ea4 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    5ea4:	cf 93       	push	r28
    5ea6:	df 93       	push	r29
    5ea8:	1f 92       	push	r1
    5eaa:	cd b7       	in	r28, 0x3d	; 61
    5eac:	de b7       	in	r29, 0x3e	; 62
    5eae:	9c 01       	movw	r18, r24
    5eb0:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    5eb2:	89 2b       	or	r24, r25
    5eb4:	09 f4       	brne	.+2      	; 0x5eb8 <twi_master_transfer+0x14>
    5eb6:	51 c0       	rjmp	.+162    	; 0x5f5a <twi_master_transfer+0xb6>
    5eb8:	30 97       	sbiw	r30, 0x00	; 0
    5eba:	09 f4       	brne	.+2      	; 0x5ebe <twi_master_transfer+0x1a>
    5ebc:	50 c0       	rjmp	.+160    	; 0x5f5e <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    5ebe:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    5ec0:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <transfer+0x9>
    5ec4:	88 23       	and	r24, r24
    5ec6:	19 f0       	breq	.+6      	; 0x5ece <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    5ec8:	99 23       	and	r25, r25
    5eca:	f1 f3       	breq	.-4      	; 0x5ec8 <twi_master_transfer+0x24>
    5ecc:	4a c0       	rjmp	.+148    	; 0x5f62 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5ece:	8f b7       	in	r24, 0x3f	; 63
    5ed0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5ed2:	f8 94       	cli
	return flags;
    5ed4:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    5ed6:	a7 eb       	ldi	r26, 0xB7	; 183
    5ed8:	b5 e2       	ldi	r27, 0x25	; 37
    5eda:	91 e0       	ldi	r25, 0x01	; 1
    5edc:	19 96       	adiw	r26, 0x09	; 9
    5ede:	9c 93       	st	X, r25
    5ee0:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    5ee2:	90 e8       	ldi	r25, 0x80	; 128
    5ee4:	1a 96       	adiw	r26, 0x0a	; 10
    5ee6:	9c 93       	st	X, r25
    5ee8:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5eea:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    5eec:	2d 93       	st	X+, r18
    5eee:	3c 93       	st	X, r19
    5ef0:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    5ef2:	12 96       	adiw	r26, 0x02	; 2
    5ef4:	6d 93       	st	X+, r22
    5ef6:	7c 93       	st	X, r23
    5ef8:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    5efa:	14 96       	adiw	r26, 0x04	; 4
    5efc:	1d 92       	st	X+, r1
    5efe:	1c 92       	st	X, r1
    5f00:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    5f02:	16 96       	adiw	r26, 0x06	; 6
    5f04:	1d 92       	st	X+, r1
    5f06:	1c 92       	st	X, r1
    5f08:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    5f0a:	18 96       	adiw	r26, 0x08	; 8
    5f0c:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    5f0e:	80 81       	ld	r24, Z
    5f10:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    5f12:	64 81       	ldd	r22, Z+4	; 0x04
    5f14:	75 81       	ldd	r23, Z+5	; 0x05
    5f16:	67 2b       	or	r22, r23
    5f18:	11 f4       	brne	.+4      	; 0x5f1e <twi_master_transfer+0x7a>
    5f1a:	41 11       	cpse	r20, r1
    5f1c:	03 c0       	rjmp	.+6      	; 0x5f24 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    5f1e:	f9 01       	movw	r30, r18
    5f20:	86 83       	std	Z+6, r24	; 0x06
    5f22:	03 c0       	rjmp	.+6      	; 0x5f2a <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    5f24:	81 60       	ori	r24, 0x01	; 1
    5f26:	f9 01       	movw	r30, r18
    5f28:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    5f2a:	e7 eb       	ldi	r30, 0xB7	; 183
    5f2c:	f5 e2       	ldi	r31, 0x25	; 37
    5f2e:	92 85       	ldd	r25, Z+10	; 0x0a
    5f30:	90 38       	cpi	r25, 0x80	; 128
    5f32:	e9 f3       	breq	.-6      	; 0x5f2e <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    5f34:	f9 01       	movw	r30, r18
    5f36:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    5f38:	83 70       	andi	r24, 0x03	; 3
    5f3a:	81 30       	cpi	r24, 0x01	; 1
    5f3c:	49 f0       	breq	.+18     	; 0x5f50 <twi_master_transfer+0xac>
    5f3e:	a7 eb       	ldi	r26, 0xB7	; 183
    5f40:	b5 e2       	ldi	r27, 0x25	; 37
    5f42:	ed 91       	ld	r30, X+
    5f44:	fc 91       	ld	r31, X
    5f46:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    5f48:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    5f4a:	83 70       	andi	r24, 0x03	; 3
    5f4c:	81 30       	cpi	r24, 0x01	; 1
    5f4e:	c9 f7       	brne	.-14     	; 0x5f42 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    5f50:	e7 eb       	ldi	r30, 0xB7	; 183
    5f52:	f5 e2       	ldi	r31, 0x25	; 37
    5f54:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    5f56:	11 86       	std	Z+9, r1	; 0x09
    5f58:	05 c0       	rjmp	.+10     	; 0x5f64 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    5f5a:	88 ef       	ldi	r24, 0xF8	; 248
    5f5c:	03 c0       	rjmp	.+6      	; 0x5f64 <twi_master_transfer+0xc0>
    5f5e:	88 ef       	ldi	r24, 0xF8	; 248
    5f60:	01 c0       	rjmp	.+2      	; 0x5f64 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    5f62:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    5f64:	0f 90       	pop	r0
    5f66:	df 91       	pop	r29
    5f68:	cf 91       	pop	r28
    5f6a:	08 95       	ret

00005f6c <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    5f6c:	cf 93       	push	r28
    5f6e:	df 93       	push	r29
    5f70:	1f 92       	push	r1
    5f72:	1f 92       	push	r1
    5f74:	cd b7       	in	r28, 0x3d	; 61
    5f76:	de b7       	in	r29, 0x3e	; 62
    5f78:	81 11       	cpse	r24, r1
    5f7a:	26 c0       	rjmp	.+76     	; 0x5fc8 <udd_sleep_mode+0x5c>
    5f7c:	90 91 ec 26 	lds	r25, 0x26EC	; 0x8026ec <udd_b_idle>
    5f80:	99 23       	and	r25, r25
    5f82:	f9 f0       	breq	.+62     	; 0x5fc2 <udd_sleep_mode+0x56>
    5f84:	90 91 a0 29 	lds	r25, 0x29A0	; 0x8029a0 <sleepmgr_locks+0x1>
    5f88:	91 11       	cpse	r25, r1
    5f8a:	01 c0       	rjmp	.+2      	; 0x5f8e <udd_sleep_mode+0x22>
    5f8c:	ff cf       	rjmp	.-2      	; 0x5f8c <udd_sleep_mode+0x20>
    5f8e:	9f b7       	in	r25, 0x3f	; 63
    5f90:	9a 83       	std	Y+2, r25	; 0x02
    5f92:	f8 94       	cli
    5f94:	2a 81       	ldd	r18, Y+2	; 0x02
    5f96:	ef e9       	ldi	r30, 0x9F	; 159
    5f98:	f9 e2       	ldi	r31, 0x29	; 41
    5f9a:	91 81       	ldd	r25, Z+1	; 0x01
    5f9c:	91 50       	subi	r25, 0x01	; 1
    5f9e:	91 83       	std	Z+1, r25	; 0x01
    5fa0:	2f bf       	out	0x3f, r18	; 63
    5fa2:	0f c0       	rjmp	.+30     	; 0x5fc2 <udd_sleep_mode+0x56>
    5fa4:	90 91 a0 29 	lds	r25, 0x29A0	; 0x8029a0 <sleepmgr_locks+0x1>
    5fa8:	9f 3f       	cpi	r25, 0xFF	; 255
    5faa:	09 f4       	brne	.+2      	; 0x5fae <udd_sleep_mode+0x42>
    5fac:	ff cf       	rjmp	.-2      	; 0x5fac <udd_sleep_mode+0x40>
    5fae:	9f b7       	in	r25, 0x3f	; 63
    5fb0:	99 83       	std	Y+1, r25	; 0x01
    5fb2:	f8 94       	cli
    5fb4:	29 81       	ldd	r18, Y+1	; 0x01
    5fb6:	ef e9       	ldi	r30, 0x9F	; 159
    5fb8:	f9 e2       	ldi	r31, 0x29	; 41
    5fba:	91 81       	ldd	r25, Z+1	; 0x01
    5fbc:	9f 5f       	subi	r25, 0xFF	; 255
    5fbe:	91 83       	std	Z+1, r25	; 0x01
    5fc0:	2f bf       	out	0x3f, r18	; 63
    5fc2:	80 93 ec 26 	sts	0x26EC, r24	; 0x8026ec <udd_b_idle>
    5fc6:	05 c0       	rjmp	.+10     	; 0x5fd2 <udd_sleep_mode+0x66>
    5fc8:	90 91 ec 26 	lds	r25, 0x26EC	; 0x8026ec <udd_b_idle>
    5fcc:	99 23       	and	r25, r25
    5fce:	51 f3       	breq	.-44     	; 0x5fa4 <udd_sleep_mode+0x38>
    5fd0:	f8 cf       	rjmp	.-16     	; 0x5fc2 <udd_sleep_mode+0x56>
    5fd2:	0f 90       	pop	r0
    5fd4:	0f 90       	pop	r0
    5fd6:	df 91       	pop	r29
    5fd8:	cf 91       	pop	r28
    5fda:	08 95       	ret

00005fdc <udd_ctrl_init>:
    5fdc:	0f 93       	push	r16
    5fde:	e8 ec       	ldi	r30, 0xC8	; 200
    5fe0:	f4 e0       	ldi	r31, 0x04	; 4
    5fe2:	80 81       	ld	r24, Z
    5fe4:	8f 7d       	andi	r24, 0xDF	; 223
    5fe6:	80 83       	st	Z, r24
    5fe8:	80 81       	ld	r24, Z
    5fea:	8f 7d       	andi	r24, 0xDF	; 223
    5fec:	80 83       	st	Z, r24
    5fee:	e0 ec       	ldi	r30, 0xC0	; 192
    5ff0:	f6 e2       	ldi	r31, 0x26	; 38
    5ff2:	02 e0       	ldi	r16, 0x02	; 2
    5ff4:	05 93       	las	Z, r16
    5ff6:	10 92 c2 26 	sts	0x26C2, r1	; 0x8026c2 <udd_sram+0x16>
    5ffa:	10 92 c3 26 	sts	0x26C3, r1	; 0x8026c3 <udd_sram+0x17>
    5ffe:	00 e2       	ldi	r16, 0x20	; 32
    6000:	06 93       	lac	Z, r16
    6002:	00 e4       	ldi	r16, 0x40	; 64
    6004:	06 93       	lac	Z, r16
    6006:	e8 eb       	ldi	r30, 0xB8	; 184
    6008:	f6 e2       	ldi	r31, 0x26	; 38
    600a:	00 e4       	ldi	r16, 0x40	; 64
    600c:	06 93       	lac	Z, r16
    600e:	ef e8       	ldi	r30, 0x8F	; 143
    6010:	f9 e2       	ldi	r31, 0x29	; 41
    6012:	14 86       	std	Z+12, r1	; 0x0c
    6014:	15 86       	std	Z+13, r1	; 0x0d
    6016:	16 86       	std	Z+14, r1	; 0x0e
    6018:	17 86       	std	Z+15, r1	; 0x0f
    601a:	12 86       	std	Z+10, r1	; 0x0a
    601c:	13 86       	std	Z+11, r1	; 0x0b
    601e:	10 92 ab 26 	sts	0x26AB, r1	; 0x8026ab <udd_ep_control_state>
    6022:	0f 91       	pop	r16
    6024:	08 95       	ret

00006026 <udd_ctrl_stall_data>:
    6026:	0f 93       	push	r16
    6028:	85 e0       	ldi	r24, 0x05	; 5
    602a:	80 93 ab 26 	sts	0x26AB, r24	; 0x8026ab <udd_ep_control_state>
    602e:	e1 ec       	ldi	r30, 0xC1	; 193
    6030:	f6 e2       	ldi	r31, 0x26	; 38
    6032:	04 e0       	ldi	r16, 0x04	; 4
    6034:	05 93       	las	Z, r16
    6036:	e9 eb       	ldi	r30, 0xB9	; 185
    6038:	f6 e2       	ldi	r31, 0x26	; 38
    603a:	04 e0       	ldi	r16, 0x04	; 4
    603c:	05 93       	las	Z, r16
    603e:	0f 91       	pop	r16
    6040:	08 95       	ret

00006042 <udd_ctrl_send_zlp_in>:
    6042:	0f 93       	push	r16
    6044:	83 e0       	ldi	r24, 0x03	; 3
    6046:	80 93 ab 26 	sts	0x26AB, r24	; 0x8026ab <udd_ep_control_state>
    604a:	10 92 c2 26 	sts	0x26C2, r1	; 0x8026c2 <udd_sram+0x16>
    604e:	10 92 c3 26 	sts	0x26C3, r1	; 0x8026c3 <udd_sram+0x17>
    6052:	e0 ec       	ldi	r30, 0xC0	; 192
    6054:	f6 e2       	ldi	r31, 0x26	; 38
    6056:	02 e0       	ldi	r16, 0x02	; 2
    6058:	06 93       	lac	Z, r16
    605a:	0f 91       	pop	r16
    605c:	08 95       	ret

0000605e <udd_ctrl_endofrequest>:
    605e:	e0 91 9b 29 	lds	r30, 0x299B	; 0x80299b <udd_g_ctrlreq+0xc>
    6062:	f0 91 9c 29 	lds	r31, 0x299C	; 0x80299c <udd_g_ctrlreq+0xd>
    6066:	30 97       	sbiw	r30, 0x00	; 0
    6068:	09 f0       	breq	.+2      	; 0x606c <udd_ctrl_endofrequest+0xe>
    606a:	19 95       	eicall
    606c:	08 95       	ret

0000606e <udd_ctrl_in_sent>:
    606e:	0f 93       	push	r16
    6070:	cf 93       	push	r28
    6072:	df 93       	push	r29
    6074:	80 91 ab 26 	lds	r24, 0x26AB	; 0x8026ab <udd_ep_control_state>
    6078:	83 30       	cpi	r24, 0x03	; 3
    607a:	19 f4       	brne	.+6      	; 0x6082 <udd_ctrl_in_sent+0x14>
    607c:	f0 df       	rcall	.-32     	; 0x605e <udd_ctrl_endofrequest>
    607e:	ae df       	rcall	.-164    	; 0x5fdc <udd_ctrl_init>
    6080:	5e c0       	rjmp	.+188    	; 0x613e <udd_ctrl_in_sent+0xd0>
    6082:	80 91 a7 26 	lds	r24, 0x26A7	; 0x8026a7 <udd_ctrl_payload_nb_trans>
    6086:	90 91 a8 26 	lds	r25, 0x26A8	; 0x8026a8 <udd_ctrl_payload_nb_trans+0x1>
    608a:	c0 91 99 29 	lds	r28, 0x2999	; 0x802999 <udd_g_ctrlreq+0xa>
    608e:	d0 91 9a 29 	lds	r29, 0x299A	; 0x80299a <udd_g_ctrlreq+0xb>
    6092:	c8 1b       	sub	r28, r24
    6094:	d9 0b       	sbc	r29, r25
    6096:	71 f5       	brne	.+92     	; 0x60f4 <udd_ctrl_in_sent+0x86>
    6098:	20 91 a9 26 	lds	r18, 0x26A9	; 0x8026a9 <udd_ctrl_prev_payload_nb_trans>
    609c:	30 91 aa 26 	lds	r19, 0x26AA	; 0x8026aa <udd_ctrl_prev_payload_nb_trans+0x1>
    60a0:	82 0f       	add	r24, r18
    60a2:	93 1f       	adc	r25, r19
    60a4:	80 93 a9 26 	sts	0x26A9, r24	; 0x8026a9 <udd_ctrl_prev_payload_nb_trans>
    60a8:	90 93 aa 26 	sts	0x26AA, r25	; 0x8026aa <udd_ctrl_prev_payload_nb_trans+0x1>
    60ac:	20 91 95 29 	lds	r18, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    60b0:	30 91 96 29 	lds	r19, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    60b4:	82 17       	cp	r24, r18
    60b6:	93 07       	cpc	r25, r19
    60b8:	21 f0       	breq	.+8      	; 0x60c2 <udd_ctrl_in_sent+0x54>
    60ba:	80 91 c2 25 	lds	r24, 0x25C2	; 0x8025c2 <b_shortpacket.5472>
    60be:	88 23       	and	r24, r24
    60c0:	41 f0       	breq	.+16     	; 0x60d2 <udd_ctrl_in_sent+0x64>
    60c2:	84 e0       	ldi	r24, 0x04	; 4
    60c4:	80 93 ab 26 	sts	0x26AB, r24	; 0x8026ab <udd_ep_control_state>
    60c8:	e8 eb       	ldi	r30, 0xB8	; 184
    60ca:	f6 e2       	ldi	r31, 0x26	; 38
    60cc:	02 e0       	ldi	r16, 0x02	; 2
    60ce:	06 93       	lac	Z, r16
    60d0:	36 c0       	rjmp	.+108    	; 0x613e <udd_ctrl_in_sent+0xd0>
    60d2:	e0 91 9d 29 	lds	r30, 0x299D	; 0x80299d <udd_g_ctrlreq+0xe>
    60d6:	f0 91 9e 29 	lds	r31, 0x299E	; 0x80299e <udd_g_ctrlreq+0xf>
    60da:	30 97       	sbiw	r30, 0x00	; 0
    60dc:	99 f0       	breq	.+38     	; 0x6104 <udd_ctrl_in_sent+0x96>
    60de:	19 95       	eicall
    60e0:	88 23       	and	r24, r24
    60e2:	81 f0       	breq	.+32     	; 0x6104 <udd_ctrl_in_sent+0x96>
    60e4:	10 92 a7 26 	sts	0x26A7, r1	; 0x8026a7 <udd_ctrl_payload_nb_trans>
    60e8:	10 92 a8 26 	sts	0x26A8, r1	; 0x8026a8 <udd_ctrl_payload_nb_trans+0x1>
    60ec:	c0 91 99 29 	lds	r28, 0x2999	; 0x802999 <udd_g_ctrlreq+0xa>
    60f0:	d0 91 9a 29 	lds	r29, 0x299A	; 0x80299a <udd_g_ctrlreq+0xb>
    60f4:	c0 34       	cpi	r28, 0x40	; 64
    60f6:	d1 05       	cpc	r29, r1
    60f8:	28 f0       	brcs	.+10     	; 0x6104 <udd_ctrl_in_sent+0x96>
    60fa:	10 92 c2 25 	sts	0x25C2, r1	; 0x8025c2 <b_shortpacket.5472>
    60fe:	c0 e4       	ldi	r28, 0x40	; 64
    6100:	d0 e0       	ldi	r29, 0x00	; 0
    6102:	03 c0       	rjmp	.+6      	; 0x610a <udd_ctrl_in_sent+0x9c>
    6104:	81 e0       	ldi	r24, 0x01	; 1
    6106:	80 93 c2 25 	sts	0x25C2, r24	; 0x8025c2 <b_shortpacket.5472>
    610a:	ec ea       	ldi	r30, 0xAC	; 172
    610c:	f6 e2       	ldi	r31, 0x26	; 38
    610e:	c6 8b       	std	Z+22, r28	; 0x16
    6110:	d7 8b       	std	Z+23, r29	; 0x17
    6112:	80 91 a7 26 	lds	r24, 0x26A7	; 0x8026a7 <udd_ctrl_payload_nb_trans>
    6116:	90 91 a8 26 	lds	r25, 0x26A8	; 0x8026a8 <udd_ctrl_payload_nb_trans+0x1>
    611a:	20 91 97 29 	lds	r18, 0x2997	; 0x802997 <udd_g_ctrlreq+0x8>
    611e:	30 91 98 29 	lds	r19, 0x2998	; 0x802998 <udd_g_ctrlreq+0x9>
    6122:	28 0f       	add	r18, r24
    6124:	39 1f       	adc	r19, r25
    6126:	20 8f       	std	Z+24, r18	; 0x18
    6128:	31 8f       	std	Z+25, r19	; 0x19
    612a:	c8 0f       	add	r28, r24
    612c:	d9 1f       	adc	r29, r25
    612e:	c0 93 a7 26 	sts	0x26A7, r28	; 0x8026a7 <udd_ctrl_payload_nb_trans>
    6132:	d0 93 a8 26 	sts	0x26A8, r29	; 0x8026a8 <udd_ctrl_payload_nb_trans+0x1>
    6136:	e0 ec       	ldi	r30, 0xC0	; 192
    6138:	f6 e2       	ldi	r31, 0x26	; 38
    613a:	02 e0       	ldi	r16, 0x02	; 2
    613c:	06 93       	lac	Z, r16
    613e:	df 91       	pop	r29
    6140:	cf 91       	pop	r28
    6142:	0f 91       	pop	r16
    6144:	08 95       	ret

00006146 <udd_ep_get_size>:
    6146:	fc 01       	movw	r30, r24
    6148:	81 81       	ldd	r24, Z+1	; 0x01
    614a:	e8 2f       	mov	r30, r24
    614c:	e7 70       	andi	r30, 0x07	; 7
    614e:	8e 2f       	mov	r24, r30
    6150:	90 e0       	ldi	r25, 0x00	; 0
    6152:	fc 01       	movw	r30, r24
    6154:	31 97       	sbiw	r30, 0x01	; 1
    6156:	e7 30       	cpi	r30, 0x07	; 7
    6158:	f1 05       	cpc	r31, r1
    615a:	d8 f4       	brcc	.+54     	; 0x6192 <udd_ep_get_size+0x4c>
    615c:	88 27       	eor	r24, r24
    615e:	e2 50       	subi	r30, 0x02	; 2
    6160:	ff 4f       	sbci	r31, 0xFF	; 255
    6162:	8f 4f       	sbci	r24, 0xFF	; 255
    6164:	0c 94 b9 4a 	jmp	0x9572	; 0x9572 <__tablejump2__>
    6168:	80 e1       	ldi	r24, 0x10	; 16
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	08 95       	ret
    616e:	80 e2       	ldi	r24, 0x20	; 32
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	08 95       	ret
    6174:	80 e4       	ldi	r24, 0x40	; 64
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	08 95       	ret
    617a:	80 e8       	ldi	r24, 0x80	; 128
    617c:	90 e0       	ldi	r25, 0x00	; 0
    617e:	08 95       	ret
    6180:	80 e0       	ldi	r24, 0x00	; 0
    6182:	91 e0       	ldi	r25, 0x01	; 1
    6184:	08 95       	ret
    6186:	80 e0       	ldi	r24, 0x00	; 0
    6188:	92 e0       	ldi	r25, 0x02	; 2
    618a:	08 95       	ret
    618c:	8f ef       	ldi	r24, 0xFF	; 255
    618e:	93 e0       	ldi	r25, 0x03	; 3
    6190:	08 95       	ret
    6192:	88 e0       	ldi	r24, 0x08	; 8
    6194:	90 e0       	ldi	r25, 0x00	; 0
    6196:	08 95       	ret

00006198 <udd_ep_get_job>:
    6198:	28 2f       	mov	r18, r24
    619a:	2f 70       	andi	r18, 0x0F	; 15
    619c:	30 e0       	ldi	r19, 0x00	; 0
    619e:	22 0f       	add	r18, r18
    61a0:	33 1f       	adc	r19, r19
    61a2:	08 2e       	mov	r0, r24
    61a4:	00 0c       	add	r0, r0
    61a6:	99 0b       	sbc	r25, r25
    61a8:	88 27       	eor	r24, r24
    61aa:	99 0f       	add	r25, r25
    61ac:	88 1f       	adc	r24, r24
    61ae:	99 27       	eor	r25, r25
    61b0:	82 0f       	add	r24, r18
    61b2:	93 1f       	adc	r25, r19
    61b4:	02 97       	sbiw	r24, 0x02	; 2
    61b6:	9c 01       	movw	r18, r24
    61b8:	22 0f       	add	r18, r18
    61ba:	33 1f       	adc	r19, r19
    61bc:	22 0f       	add	r18, r18
    61be:	33 1f       	adc	r19, r19
    61c0:	22 0f       	add	r18, r18
    61c2:	33 1f       	adc	r19, r19
    61c4:	82 0f       	add	r24, r18
    61c6:	93 1f       	adc	r25, r19
    61c8:	8d 5b       	subi	r24, 0xBD	; 189
    61ca:	99 4d       	sbci	r25, 0xD9	; 217
    61cc:	08 95       	ret

000061ce <udd_ctrl_interrupt_tc_setup>:
    61ce:	0f 93       	push	r16
    61d0:	cf 93       	push	r28
    61d2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    61d6:	80 ff       	sbrs	r24, 0
    61d8:	65 c0       	rjmp	.+202    	; 0x62a4 <udd_ctrl_interrupt_tc_setup+0xd6>
    61da:	81 e0       	ldi	r24, 0x01	; 1
    61dc:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    61e0:	e8 eb       	ldi	r30, 0xB8	; 184
    61e2:	f6 e2       	ldi	r31, 0x26	; 38
    61e4:	00 e8       	ldi	r16, 0x80	; 128
    61e6:	06 93       	lac	Z, r16
    61e8:	e0 ec       	ldi	r30, 0xC0	; 192
    61ea:	f6 e2       	ldi	r31, 0x26	; 38
    61ec:	00 e8       	ldi	r16, 0x80	; 128
    61ee:	06 93       	lac	Z, r16
    61f0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    61f4:	e8 eb       	ldi	r30, 0xB8	; 184
    61f6:	f6 e2       	ldi	r31, 0x26	; 38
    61f8:	00 e1       	ldi	r16, 0x10	; 16
    61fa:	06 93       	lac	Z, r16
    61fc:	80 91 ab 26 	lds	r24, 0x26AB	; 0x8026ab <udd_ep_control_state>
    6200:	88 23       	and	r24, r24
    6202:	29 f0       	breq	.+10     	; 0x620e <udd_ctrl_interrupt_tc_setup+0x40>
    6204:	83 50       	subi	r24, 0x03	; 3
    6206:	82 30       	cpi	r24, 0x02	; 2
    6208:	08 f4       	brcc	.+2      	; 0x620c <udd_ctrl_interrupt_tc_setup+0x3e>
    620a:	29 df       	rcall	.-430    	; 0x605e <udd_ctrl_endofrequest>
    620c:	e7 de       	rcall	.-562    	; 0x5fdc <udd_ctrl_init>
    620e:	80 91 ba 26 	lds	r24, 0x26BA	; 0x8026ba <udd_sram+0xe>
    6212:	90 91 bb 26 	lds	r25, 0x26BB	; 0x8026bb <udd_sram+0xf>
    6216:	08 97       	sbiw	r24, 0x08	; 8
    6218:	09 f0       	breq	.+2      	; 0x621c <udd_ctrl_interrupt_tc_setup+0x4e>
    621a:	46 c0       	rjmp	.+140    	; 0x62a8 <udd_ctrl_interrupt_tc_setup+0xda>
    621c:	88 e0       	ldi	r24, 0x08	; 8
    621e:	e7 e6       	ldi	r30, 0x67	; 103
    6220:	f6 e2       	ldi	r31, 0x26	; 38
    6222:	af e8       	ldi	r26, 0x8F	; 143
    6224:	b9 e2       	ldi	r27, 0x29	; 41
    6226:	01 90       	ld	r0, Z+
    6228:	0d 92       	st	X+, r0
    622a:	8a 95       	dec	r24
    622c:	e1 f7       	brne	.-8      	; 0x6226 <udd_ctrl_interrupt_tc_setup+0x58>
    622e:	e8 ec       	ldi	r30, 0xC8	; 200
    6230:	f4 e0       	ldi	r31, 0x04	; 4
    6232:	80 81       	ld	r24, Z
    6234:	80 62       	ori	r24, 0x20	; 32
    6236:	80 83       	st	Z, r24
    6238:	80 81       	ld	r24, Z
    623a:	80 62       	ori	r24, 0x20	; 32
    623c:	80 83       	st	Z, r24
    623e:	0e 94 15 47 	call	0x8e2a	; 0x8e2a <udc_process_setup>
    6242:	c8 2f       	mov	r28, r24
    6244:	81 11       	cpse	r24, r1
    6246:	03 c0       	rjmp	.+6      	; 0x624e <udd_ctrl_interrupt_tc_setup+0x80>
    6248:	ee de       	rcall	.-548    	; 0x6026 <udd_ctrl_stall_data>
    624a:	c1 e0       	ldi	r28, 0x01	; 1
    624c:	2e c0       	rjmp	.+92     	; 0x62aa <udd_ctrl_interrupt_tc_setup+0xdc>
    624e:	80 91 8f 29 	lds	r24, 0x298F	; 0x80298f <udd_g_ctrlreq>
    6252:	88 23       	and	r24, r24
    6254:	6c f4       	brge	.+26     	; 0x6270 <udd_ctrl_interrupt_tc_setup+0xa2>
    6256:	10 92 a9 26 	sts	0x26A9, r1	; 0x8026a9 <udd_ctrl_prev_payload_nb_trans>
    625a:	10 92 aa 26 	sts	0x26AA, r1	; 0x8026aa <udd_ctrl_prev_payload_nb_trans+0x1>
    625e:	10 92 a7 26 	sts	0x26A7, r1	; 0x8026a7 <udd_ctrl_payload_nb_trans>
    6262:	10 92 a8 26 	sts	0x26A8, r1	; 0x8026a8 <udd_ctrl_payload_nb_trans+0x1>
    6266:	82 e0       	ldi	r24, 0x02	; 2
    6268:	80 93 ab 26 	sts	0x26AB, r24	; 0x8026ab <udd_ep_control_state>
    626c:	00 df       	rcall	.-512    	; 0x606e <udd_ctrl_in_sent>
    626e:	1d c0       	rjmp	.+58     	; 0x62aa <udd_ctrl_interrupt_tc_setup+0xdc>
    6270:	80 91 95 29 	lds	r24, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    6274:	90 91 96 29 	lds	r25, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    6278:	89 2b       	or	r24, r25
    627a:	11 f4       	brne	.+4      	; 0x6280 <udd_ctrl_interrupt_tc_setup+0xb2>
    627c:	e2 de       	rcall	.-572    	; 0x6042 <udd_ctrl_send_zlp_in>
    627e:	15 c0       	rjmp	.+42     	; 0x62aa <udd_ctrl_interrupt_tc_setup+0xdc>
    6280:	10 92 a9 26 	sts	0x26A9, r1	; 0x8026a9 <udd_ctrl_prev_payload_nb_trans>
    6284:	10 92 aa 26 	sts	0x26AA, r1	; 0x8026aa <udd_ctrl_prev_payload_nb_trans+0x1>
    6288:	10 92 a7 26 	sts	0x26A7, r1	; 0x8026a7 <udd_ctrl_payload_nb_trans>
    628c:	10 92 a8 26 	sts	0x26A8, r1	; 0x8026a8 <udd_ctrl_payload_nb_trans+0x1>
    6290:	81 e0       	ldi	r24, 0x01	; 1
    6292:	80 93 ab 26 	sts	0x26AB, r24	; 0x8026ab <udd_ep_control_state>
    6296:	e8 eb       	ldi	r30, 0xB8	; 184
    6298:	f6 e2       	ldi	r31, 0x26	; 38
    629a:	02 e0       	ldi	r16, 0x02	; 2
    629c:	06 93       	lac	Z, r16
    629e:	00 e2       	ldi	r16, 0x20	; 32
    62a0:	06 93       	lac	Z, r16
    62a2:	03 c0       	rjmp	.+6      	; 0x62aa <udd_ctrl_interrupt_tc_setup+0xdc>
    62a4:	c0 e0       	ldi	r28, 0x00	; 0
    62a6:	01 c0       	rjmp	.+2      	; 0x62aa <udd_ctrl_interrupt_tc_setup+0xdc>
    62a8:	c1 e0       	ldi	r28, 0x01	; 1
    62aa:	8c 2f       	mov	r24, r28
    62ac:	cf 91       	pop	r28
    62ae:	0f 91       	pop	r16
    62b0:	08 95       	ret

000062b2 <udd_ep_trans_complet>:
    62b2:	8f 92       	push	r8
    62b4:	9f 92       	push	r9
    62b6:	af 92       	push	r10
    62b8:	bf 92       	push	r11
    62ba:	df 92       	push	r13
    62bc:	ef 92       	push	r14
    62be:	ff 92       	push	r15
    62c0:	0f 93       	push	r16
    62c2:	1f 93       	push	r17
    62c4:	cf 93       	push	r28
    62c6:	df 93       	push	r29
    62c8:	d8 2e       	mov	r13, r24
    62ca:	66 df       	rcall	.-308    	; 0x6198 <udd_ep_get_job>
    62cc:	8c 01       	movw	r16, r24
    62ce:	cd 2d       	mov	r28, r13
    62d0:	cf 70       	andi	r28, 0x0F	; 15
    62d2:	d0 e0       	ldi	r29, 0x00	; 0
    62d4:	ce 01       	movw	r24, r28
    62d6:	88 0f       	add	r24, r24
    62d8:	99 1f       	adc	r25, r25
    62da:	cd 2d       	mov	r28, r13
    62dc:	0d 2c       	mov	r0, r13
    62de:	00 0c       	add	r0, r0
    62e0:	dd 0b       	sbc	r29, r29
    62e2:	cc 27       	eor	r28, r28
    62e4:	dd 0f       	add	r29, r29
    62e6:	cc 1f       	adc	r28, r28
    62e8:	dd 27       	eor	r29, r29
    62ea:	c8 0f       	add	r28, r24
    62ec:	d9 1f       	adc	r29, r25
    62ee:	ce 01       	movw	r24, r28
    62f0:	88 0f       	add	r24, r24
    62f2:	99 1f       	adc	r25, r25
    62f4:	88 0f       	add	r24, r24
    62f6:	99 1f       	adc	r25, r25
    62f8:	88 0f       	add	r24, r24
    62fa:	99 1f       	adc	r25, r25
    62fc:	9c 01       	movw	r18, r24
    62fe:	28 54       	subi	r18, 0x48	; 72
    6300:	39 4d       	sbci	r19, 0xD9	; 217
    6302:	79 01       	movw	r14, r18
    6304:	c9 01       	movw	r24, r18
    6306:	1f df       	rcall	.-450    	; 0x6146 <udd_ep_get_size>
    6308:	4c 01       	movw	r8, r24
    630a:	dd 20       	and	r13, r13
    630c:	0c f0       	brlt	.+2      	; 0x6310 <udd_ep_trans_complet+0x5e>
    630e:	7b c0       	rjmp	.+246    	; 0x6406 <udd_ep_trans_complet+0x154>
    6310:	fe 01       	movw	r30, r28
    6312:	ee 0f       	add	r30, r30
    6314:	ff 1f       	adc	r31, r31
    6316:	ee 0f       	add	r30, r30
    6318:	ff 1f       	adc	r31, r31
    631a:	ee 0f       	add	r30, r30
    631c:	ff 1f       	adc	r31, r31
    631e:	e4 55       	subi	r30, 0x54	; 84
    6320:	f9 4d       	sbci	r31, 0xD9	; 217
    6322:	22 89       	ldd	r18, Z+18	; 0x12
    6324:	33 89       	ldd	r19, Z+19	; 0x13
    6326:	d8 01       	movw	r26, r16
    6328:	15 96       	adiw	r26, 0x05	; 5
    632a:	8d 91       	ld	r24, X+
    632c:	9c 91       	ld	r25, X
    632e:	16 97       	sbiw	r26, 0x06	; 6
    6330:	82 0f       	add	r24, r18
    6332:	93 1f       	adc	r25, r19
    6334:	15 96       	adiw	r26, 0x05	; 5
    6336:	8d 93       	st	X+, r24
    6338:	9c 93       	st	X, r25
    633a:	16 97       	sbiw	r26, 0x06	; 6
    633c:	13 96       	adiw	r26, 0x03	; 3
    633e:	2d 91       	ld	r18, X+
    6340:	3c 91       	ld	r19, X
    6342:	14 97       	sbiw	r26, 0x04	; 4
    6344:	82 17       	cp	r24, r18
    6346:	93 07       	cpc	r25, r19
    6348:	09 f4       	brne	.+2      	; 0x634c <udd_ep_trans_complet+0x9a>
    634a:	47 c0       	rjmp	.+142    	; 0x63da <udd_ep_trans_complet+0x128>
    634c:	28 1b       	sub	r18, r24
    634e:	39 0b       	sbc	r19, r25
    6350:	21 15       	cp	r18, r1
    6352:	b4 e0       	ldi	r27, 0x04	; 4
    6354:	3b 07       	cpc	r19, r27
    6356:	40 f0       	brcs	.+16     	; 0x6368 <udd_ep_trans_complet+0xb6>
    6358:	2f ef       	ldi	r18, 0xFF	; 255
    635a:	33 e0       	ldi	r19, 0x03	; 3
    635c:	c9 01       	movw	r24, r18
    635e:	b4 01       	movw	r22, r8
    6360:	0e 94 54 4a 	call	0x94a8	; 0x94a8 <__udivmodhi4>
    6364:	28 1b       	sub	r18, r24
    6366:	39 0b       	sbc	r19, r25
    6368:	f8 01       	movw	r30, r16
    636a:	80 81       	ld	r24, Z
    636c:	81 ff       	sbrs	r24, 1
    636e:	0a c0       	rjmp	.+20     	; 0x6384 <udd_ep_trans_complet+0xd2>
    6370:	c9 01       	movw	r24, r18
    6372:	b4 01       	movw	r22, r8
    6374:	0e 94 54 4a 	call	0x94a8	; 0x94a8 <__udivmodhi4>
    6378:	41 e0       	ldi	r20, 0x01	; 1
    637a:	89 2b       	or	r24, r25
    637c:	09 f0       	breq	.+2      	; 0x6380 <udd_ep_trans_complet+0xce>
    637e:	40 e0       	ldi	r20, 0x00	; 0
    6380:	84 2f       	mov	r24, r20
    6382:	01 c0       	rjmp	.+2      	; 0x6386 <udd_ep_trans_complet+0xd4>
    6384:	80 e0       	ldi	r24, 0x00	; 0
    6386:	d8 01       	movw	r26, r16
    6388:	9c 91       	ld	r25, X
    638a:	80 fb       	bst	r24, 0
    638c:	91 f9       	bld	r25, 1
    638e:	9c 93       	st	X, r25
    6390:	fe 01       	movw	r30, r28
    6392:	ee 0f       	add	r30, r30
    6394:	ff 1f       	adc	r31, r31
    6396:	ee 0f       	add	r30, r30
    6398:	ff 1f       	adc	r31, r31
    639a:	ee 0f       	add	r30, r30
    639c:	ff 1f       	adc	r31, r31
    639e:	e4 55       	subi	r30, 0x54	; 84
    63a0:	f9 4d       	sbci	r31, 0xD9	; 217
    63a2:	12 8a       	std	Z+18, r1	; 0x12
    63a4:	13 8a       	std	Z+19, r1	; 0x13
    63a6:	26 87       	std	Z+14, r18	; 0x0e
    63a8:	37 87       	std	Z+15, r19	; 0x0f
    63aa:	11 96       	adiw	r26, 0x01	; 1
    63ac:	2d 91       	ld	r18, X+
    63ae:	3c 91       	ld	r19, X
    63b0:	12 97       	sbiw	r26, 0x02	; 2
    63b2:	15 96       	adiw	r26, 0x05	; 5
    63b4:	8d 91       	ld	r24, X+
    63b6:	9c 91       	ld	r25, X
    63b8:	16 97       	sbiw	r26, 0x06	; 6
    63ba:	82 0f       	add	r24, r18
    63bc:	93 1f       	adc	r25, r19
    63be:	cc 0f       	add	r28, r28
    63c0:	dd 1f       	adc	r29, r29
    63c2:	cc 0f       	add	r28, r28
    63c4:	dd 1f       	adc	r29, r29
    63c6:	cc 0f       	add	r28, r28
    63c8:	dd 1f       	adc	r29, r29
    63ca:	c4 54       	subi	r28, 0x44	; 68
    63cc:	d9 4d       	sbci	r29, 0xD9	; 217
    63ce:	88 83       	st	Y, r24
    63d0:	99 83       	std	Y+1, r25	; 0x01
    63d2:	f7 01       	movw	r30, r14
    63d4:	02 e0       	ldi	r16, 0x02	; 2
    63d6:	06 93       	lac	Z, r16
    63d8:	e4 c0       	rjmp	.+456    	; 0x65a2 <udd_ep_trans_complet+0x2f0>
    63da:	d8 01       	movw	r26, r16
    63dc:	8c 91       	ld	r24, X
    63de:	81 ff       	sbrs	r24, 1
    63e0:	cd c0       	rjmp	.+410    	; 0x657c <udd_ep_trans_complet+0x2ca>
    63e2:	8d 7f       	andi	r24, 0xFD	; 253
    63e4:	8c 93       	st	X, r24
    63e6:	cc 0f       	add	r28, r28
    63e8:	dd 1f       	adc	r29, r29
    63ea:	cc 0f       	add	r28, r28
    63ec:	dd 1f       	adc	r29, r29
    63ee:	cc 0f       	add	r28, r28
    63f0:	dd 1f       	adc	r29, r29
    63f2:	c4 55       	subi	r28, 0x54	; 84
    63f4:	d9 4d       	sbci	r29, 0xD9	; 217
    63f6:	1a 8a       	std	Y+18, r1	; 0x12
    63f8:	1b 8a       	std	Y+19, r1	; 0x13
    63fa:	1e 86       	std	Y+14, r1	; 0x0e
    63fc:	1f 86       	std	Y+15, r1	; 0x0f
    63fe:	f7 01       	movw	r30, r14
    6400:	02 e0       	ldi	r16, 0x02	; 2
    6402:	06 93       	lac	Z, r16
    6404:	ce c0       	rjmp	.+412    	; 0x65a2 <udd_ep_trans_complet+0x2f0>
    6406:	fe 01       	movw	r30, r28
    6408:	ee 0f       	add	r30, r30
    640a:	ff 1f       	adc	r31, r31
    640c:	ee 0f       	add	r30, r30
    640e:	ff 1f       	adc	r31, r31
    6410:	ee 0f       	add	r30, r30
    6412:	ff 1f       	adc	r31, r31
    6414:	e4 55       	subi	r30, 0x54	; 84
    6416:	f9 4d       	sbci	r31, 0xD9	; 217
    6418:	a6 84       	ldd	r10, Z+14	; 0x0e
    641a:	b7 84       	ldd	r11, Z+15	; 0x0f
    641c:	d8 01       	movw	r26, r16
    641e:	8c 91       	ld	r24, X
    6420:	82 ff       	sbrs	r24, 2
    6422:	1b c0       	rjmp	.+54     	; 0x645a <udd_ep_trans_complet+0x1a8>
    6424:	11 96       	adiw	r26, 0x01	; 1
    6426:	ed 91       	ld	r30, X+
    6428:	fc 91       	ld	r31, X
    642a:	12 97       	sbiw	r26, 0x02	; 2
    642c:	15 96       	adiw	r26, 0x05	; 5
    642e:	2d 91       	ld	r18, X+
    6430:	3c 91       	ld	r19, X
    6432:	16 97       	sbiw	r26, 0x06	; 6
    6434:	13 96       	adiw	r26, 0x03	; 3
    6436:	8d 91       	ld	r24, X+
    6438:	9c 91       	ld	r25, X
    643a:	14 97       	sbiw	r26, 0x04	; 4
    643c:	b4 01       	movw	r22, r8
    643e:	0e 94 54 4a 	call	0x94a8	; 0x94a8 <__udivmodhi4>
    6442:	b0 e4       	ldi	r27, 0x40	; 64
    6444:	db 9e       	mul	r13, r27
    6446:	b0 01       	movw	r22, r0
    6448:	11 24       	eor	r1, r1
    644a:	6d 57       	subi	r22, 0x7D	; 125
    644c:	7a 4d       	sbci	r23, 0xDA	; 218
    644e:	ac 01       	movw	r20, r24
    6450:	cf 01       	movw	r24, r30
    6452:	82 0f       	add	r24, r18
    6454:	93 1f       	adc	r25, r19
    6456:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <memcpy>
    645a:	f8 01       	movw	r30, r16
    645c:	25 81       	ldd	r18, Z+5	; 0x05
    645e:	36 81       	ldd	r19, Z+6	; 0x06
    6460:	2a 0d       	add	r18, r10
    6462:	3b 1d       	adc	r19, r11
    6464:	25 83       	std	Z+5, r18	; 0x05
    6466:	36 83       	std	Z+6, r19	; 0x06
    6468:	83 81       	ldd	r24, Z+3	; 0x03
    646a:	94 81       	ldd	r25, Z+4	; 0x04
    646c:	82 17       	cp	r24, r18
    646e:	93 07       	cpc	r25, r19
    6470:	68 f4       	brcc	.+26     	; 0x648c <udd_ep_trans_complet+0x1da>
    6472:	85 83       	std	Z+5, r24	; 0x05
    6474:	96 83       	std	Z+6, r25	; 0x06
    6476:	cc 0f       	add	r28, r28
    6478:	dd 1f       	adc	r29, r29
    647a:	cc 0f       	add	r28, r28
    647c:	dd 1f       	adc	r29, r29
    647e:	cc 0f       	add	r28, r28
    6480:	dd 1f       	adc	r29, r29
    6482:	c4 55       	subi	r28, 0x54	; 84
    6484:	d9 4d       	sbci	r29, 0xD9	; 217
    6486:	8a 89       	ldd	r24, Y+18	; 0x12
    6488:	9b 89       	ldd	r25, Y+19	; 0x13
    648a:	78 c0       	rjmp	.+240    	; 0x657c <udd_ep_trans_complet+0x2ca>
    648c:	fe 01       	movw	r30, r28
    648e:	ee 0f       	add	r30, r30
    6490:	ff 1f       	adc	r31, r31
    6492:	ee 0f       	add	r30, r30
    6494:	ff 1f       	adc	r31, r31
    6496:	ee 0f       	add	r30, r30
    6498:	ff 1f       	adc	r31, r31
    649a:	e4 55       	subi	r30, 0x54	; 84
    649c:	f9 4d       	sbci	r31, 0xD9	; 217
    649e:	42 89       	ldd	r20, Z+18	; 0x12
    64a0:	53 89       	ldd	r21, Z+19	; 0x13
    64a2:	a4 16       	cp	r10, r20
    64a4:	b5 06       	cpc	r11, r21
    64a6:	09 f0       	breq	.+2      	; 0x64aa <udd_ep_trans_complet+0x1f8>
    64a8:	69 c0       	rjmp	.+210    	; 0x657c <udd_ep_trans_complet+0x2ca>
    64aa:	28 17       	cp	r18, r24
    64ac:	39 07       	cpc	r19, r25
    64ae:	09 f4       	brne	.+2      	; 0x64b2 <udd_ep_trans_complet+0x200>
    64b0:	65 c0       	rjmp	.+202    	; 0x657c <udd_ep_trans_complet+0x2ca>
    64b2:	ac 01       	movw	r20, r24
    64b4:	42 1b       	sub	r20, r18
    64b6:	53 0b       	sbc	r21, r19
    64b8:	9a 01       	movw	r18, r20
    64ba:	21 15       	cp	r18, r1
    64bc:	54 e0       	ldi	r21, 0x04	; 4
    64be:	35 07       	cpc	r19, r21
    64c0:	48 f0       	brcs	.+18     	; 0x64d4 <udd_ep_trans_complet+0x222>
    64c2:	2f ef       	ldi	r18, 0xFF	; 255
    64c4:	33 e0       	ldi	r19, 0x03	; 3
    64c6:	c9 01       	movw	r24, r18
    64c8:	b4 01       	movw	r22, r8
    64ca:	0e 94 54 4a 	call	0x94a8	; 0x94a8 <__udivmodhi4>
    64ce:	28 1b       	sub	r18, r24
    64d0:	39 0b       	sbc	r19, r25
    64d2:	06 c0       	rjmp	.+12     	; 0x64e0 <udd_ep_trans_complet+0x22e>
    64d4:	c9 01       	movw	r24, r18
    64d6:	b4 01       	movw	r22, r8
    64d8:	0e 94 54 4a 	call	0x94a8	; 0x94a8 <__udivmodhi4>
    64dc:	28 1b       	sub	r18, r24
    64de:	39 0b       	sbc	r19, r25
    64e0:	fe 01       	movw	r30, r28
    64e2:	ee 0f       	add	r30, r30
    64e4:	ff 1f       	adc	r31, r31
    64e6:	ee 0f       	add	r30, r30
    64e8:	ff 1f       	adc	r31, r31
    64ea:	ee 0f       	add	r30, r30
    64ec:	ff 1f       	adc	r31, r31
    64ee:	e4 55       	subi	r30, 0x54	; 84
    64f0:	f9 4d       	sbci	r31, 0xD9	; 217
    64f2:	16 86       	std	Z+14, r1	; 0x0e
    64f4:	17 86       	std	Z+15, r1	; 0x0f
    64f6:	28 15       	cp	r18, r8
    64f8:	39 05       	cpc	r19, r9
    64fa:	00 f5       	brcc	.+64     	; 0x653c <udd_ep_trans_complet+0x28a>
    64fc:	d8 01       	movw	r26, r16
    64fe:	8c 91       	ld	r24, X
    6500:	84 60       	ori	r24, 0x04	; 4
    6502:	8c 93       	st	X, r24
    6504:	b0 e4       	ldi	r27, 0x40	; 64
    6506:	db 9e       	mul	r13, r27
    6508:	c0 01       	movw	r24, r0
    650a:	11 24       	eor	r1, r1
    650c:	8d 57       	subi	r24, 0x7D	; 125
    650e:	9a 4d       	sbci	r25, 0xDA	; 218
    6510:	fe 01       	movw	r30, r28
    6512:	ee 0f       	add	r30, r30
    6514:	ff 1f       	adc	r31, r31
    6516:	ee 0f       	add	r30, r30
    6518:	ff 1f       	adc	r31, r31
    651a:	ee 0f       	add	r30, r30
    651c:	ff 1f       	adc	r31, r31
    651e:	e4 54       	subi	r30, 0x44	; 68
    6520:	f9 4d       	sbci	r31, 0xD9	; 217
    6522:	80 83       	st	Z, r24
    6524:	91 83       	std	Z+1, r25	; 0x01
    6526:	cc 0f       	add	r28, r28
    6528:	dd 1f       	adc	r29, r29
    652a:	cc 0f       	add	r28, r28
    652c:	dd 1f       	adc	r29, r29
    652e:	cc 0f       	add	r28, r28
    6530:	dd 1f       	adc	r29, r29
    6532:	c4 55       	subi	r28, 0x54	; 84
    6534:	d9 4d       	sbci	r29, 0xD9	; 217
    6536:	8a 8a       	std	Y+18, r8	; 0x12
    6538:	9b 8a       	std	Y+19, r9	; 0x13
    653a:	1c c0       	rjmp	.+56     	; 0x6574 <udd_ep_trans_complet+0x2c2>
    653c:	f8 01       	movw	r30, r16
    653e:	41 81       	ldd	r20, Z+1	; 0x01
    6540:	52 81       	ldd	r21, Z+2	; 0x02
    6542:	85 81       	ldd	r24, Z+5	; 0x05
    6544:	96 81       	ldd	r25, Z+6	; 0x06
    6546:	84 0f       	add	r24, r20
    6548:	95 1f       	adc	r25, r21
    654a:	fe 01       	movw	r30, r28
    654c:	ee 0f       	add	r30, r30
    654e:	ff 1f       	adc	r31, r31
    6550:	ee 0f       	add	r30, r30
    6552:	ff 1f       	adc	r31, r31
    6554:	ee 0f       	add	r30, r30
    6556:	ff 1f       	adc	r31, r31
    6558:	e4 54       	subi	r30, 0x44	; 68
    655a:	f9 4d       	sbci	r31, 0xD9	; 217
    655c:	80 83       	st	Z, r24
    655e:	91 83       	std	Z+1, r25	; 0x01
    6560:	cc 0f       	add	r28, r28
    6562:	dd 1f       	adc	r29, r29
    6564:	cc 0f       	add	r28, r28
    6566:	dd 1f       	adc	r29, r29
    6568:	cc 0f       	add	r28, r28
    656a:	dd 1f       	adc	r29, r29
    656c:	c4 55       	subi	r28, 0x54	; 84
    656e:	d9 4d       	sbci	r29, 0xD9	; 217
    6570:	2a 8b       	std	Y+18, r18	; 0x12
    6572:	3b 8b       	std	Y+19, r19	; 0x13
    6574:	f7 01       	movw	r30, r14
    6576:	02 e0       	ldi	r16, 0x02	; 2
    6578:	06 93       	lac	Z, r16
    657a:	13 c0       	rjmp	.+38     	; 0x65a2 <udd_ep_trans_complet+0x2f0>
    657c:	d8 01       	movw	r26, r16
    657e:	8c 91       	ld	r24, X
    6580:	80 ff       	sbrs	r24, 0
    6582:	0f c0       	rjmp	.+30     	; 0x65a2 <udd_ep_trans_complet+0x2f0>
    6584:	8e 7f       	andi	r24, 0xFE	; 254
    6586:	8c 93       	st	X, r24
    6588:	17 96       	adiw	r26, 0x07	; 7
    658a:	ed 91       	ld	r30, X+
    658c:	fc 91       	ld	r31, X
    658e:	18 97       	sbiw	r26, 0x08	; 8
    6590:	30 97       	sbiw	r30, 0x00	; 0
    6592:	39 f0       	breq	.+14     	; 0x65a2 <udd_ep_trans_complet+0x2f0>
    6594:	15 96       	adiw	r26, 0x05	; 5
    6596:	6d 91       	ld	r22, X+
    6598:	7c 91       	ld	r23, X
    659a:	16 97       	sbiw	r26, 0x06	; 6
    659c:	4d 2d       	mov	r20, r13
    659e:	80 e0       	ldi	r24, 0x00	; 0
    65a0:	19 95       	eicall
    65a2:	df 91       	pop	r29
    65a4:	cf 91       	pop	r28
    65a6:	1f 91       	pop	r17
    65a8:	0f 91       	pop	r16
    65aa:	ff 90       	pop	r15
    65ac:	ef 90       	pop	r14
    65ae:	df 90       	pop	r13
    65b0:	bf 90       	pop	r11
    65b2:	af 90       	pop	r10
    65b4:	9f 90       	pop	r9
    65b6:	8f 90       	pop	r8
    65b8:	08 95       	ret

000065ba <udd_attach>:
    65ba:	1f 93       	push	r17
    65bc:	cf 93       	push	r28
    65be:	df 93       	push	r29
    65c0:	1f 92       	push	r1
    65c2:	cd b7       	in	r28, 0x3d	; 61
    65c4:	de b7       	in	r29, 0x3e	; 62
    65c6:	8f b7       	in	r24, 0x3f	; 63
    65c8:	89 83       	std	Y+1, r24	; 0x01
    65ca:	f8 94       	cli
    65cc:	19 81       	ldd	r17, Y+1	; 0x01
    65ce:	81 e0       	ldi	r24, 0x01	; 1
    65d0:	cd dc       	rcall	.-1638   	; 0x5f6c <udd_sleep_mode>
    65d2:	ea ec       	ldi	r30, 0xCA	; 202
    65d4:	f4 e0       	ldi	r31, 0x04	; 4
    65d6:	80 e4       	ldi	r24, 0x40	; 64
    65d8:	80 83       	st	Z, r24
    65da:	80 e2       	ldi	r24, 0x20	; 32
    65dc:	80 83       	st	Z, r24
    65de:	e1 ec       	ldi	r30, 0xC1	; 193
    65e0:	f4 e0       	ldi	r31, 0x04	; 4
    65e2:	80 81       	ld	r24, Z
    65e4:	81 60       	ori	r24, 0x01	; 1
    65e6:	80 83       	st	Z, r24
    65e8:	a9 ec       	ldi	r26, 0xC9	; 201
    65ea:	b4 e0       	ldi	r27, 0x04	; 4
    65ec:	8c 91       	ld	r24, X
    65ee:	82 60       	ori	r24, 0x02	; 2
    65f0:	8c 93       	st	X, r24
    65f2:	e8 ec       	ldi	r30, 0xC8	; 200
    65f4:	f4 e0       	ldi	r31, 0x04	; 4
    65f6:	80 81       	ld	r24, Z
    65f8:	80 64       	ori	r24, 0x40	; 64
    65fa:	80 83       	st	Z, r24
    65fc:	8c 91       	ld	r24, X
    65fe:	81 60       	ori	r24, 0x01	; 1
    6600:	8c 93       	st	X, r24
    6602:	80 81       	ld	r24, Z
    6604:	80 68       	ori	r24, 0x80	; 128
    6606:	80 83       	st	Z, r24
    6608:	1f bf       	out	0x3f, r17	; 63
    660a:	0f 90       	pop	r0
    660c:	df 91       	pop	r29
    660e:	cf 91       	pop	r28
    6610:	1f 91       	pop	r17
    6612:	08 95       	ret

00006614 <udd_enable>:
    6614:	0f 93       	push	r16
    6616:	1f 93       	push	r17
    6618:	cf 93       	push	r28
    661a:	df 93       	push	r29
    661c:	1f 92       	push	r1
    661e:	1f 92       	push	r1
    6620:	cd b7       	in	r28, 0x3d	; 61
    6622:	de b7       	in	r29, 0x3e	; 62
    6624:	00 e6       	ldi	r16, 0x60	; 96
    6626:	10 e0       	ldi	r17, 0x00	; 0
    6628:	f8 01       	movw	r30, r16
    662a:	10 82       	st	Z, r1
    662c:	80 e3       	ldi	r24, 0x30	; 48
    662e:	0e 94 57 42 	call	0x84ae	; 0x84ae <sysclk_enable_usb>
    6632:	e0 ec       	ldi	r30, 0xC0	; 192
    6634:	f4 e0       	ldi	r31, 0x04	; 4
    6636:	80 81       	ld	r24, Z
    6638:	80 64       	ori	r24, 0x40	; 64
    663a:	80 83       	st	Z, r24
    663c:	81 e0       	ldi	r24, 0x01	; 1
    663e:	f8 01       	movw	r30, r16
    6640:	80 83       	st	Z, r24
    6642:	8f b7       	in	r24, 0x3f	; 63
    6644:	8a 83       	std	Y+2, r24	; 0x02
    6646:	f8 94       	cli
    6648:	1a 81       	ldd	r17, Y+2	; 0x02
    664a:	ec ea       	ldi	r30, 0xAC	; 172
    664c:	f6 e2       	ldi	r31, 0x26	; 38
    664e:	15 86       	std	Z+13, r1	; 0x0d
    6650:	15 8a       	std	Z+21, r1	; 0x15
    6652:	15 8e       	std	Z+29, r1	; 0x1d
    6654:	15 a2       	std	Z+37, r1	; 0x25
    6656:	15 a6       	std	Z+45, r1	; 0x2d
    6658:	15 aa       	std	Z+53, r1	; 0x35
    665a:	e3 e4       	ldi	r30, 0x43	; 67
    665c:	f6 e2       	ldi	r31, 0x26	; 38
    665e:	80 81       	ld	r24, Z
    6660:	8e 7f       	andi	r24, 0xFE	; 254
    6662:	80 83       	st	Z, r24
    6664:	ec e4       	ldi	r30, 0x4C	; 76
    6666:	f6 e2       	ldi	r31, 0x26	; 38
    6668:	80 81       	ld	r24, Z
    666a:	8e 7f       	andi	r24, 0xFE	; 254
    666c:	80 83       	st	Z, r24
    666e:	e5 e5       	ldi	r30, 0x55	; 85
    6670:	f6 e2       	ldi	r31, 0x26	; 38
    6672:	80 81       	ld	r24, Z
    6674:	8e 7f       	andi	r24, 0xFE	; 254
    6676:	80 83       	st	Z, r24
    6678:	ee e5       	ldi	r30, 0x5E	; 94
    667a:	f6 e2       	ldi	r31, 0x26	; 38
    667c:	80 81       	ld	r24, Z
    667e:	8e 7f       	andi	r24, 0xFE	; 254
    6680:	80 83       	st	Z, r24
    6682:	6a e1       	ldi	r22, 0x1A	; 26
    6684:	70 e0       	ldi	r23, 0x00	; 0
    6686:	82 e0       	ldi	r24, 0x02	; 2
    6688:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
    668c:	8f 3f       	cpi	r24, 0xFF	; 255
    668e:	19 f0       	breq	.+6      	; 0x6696 <udd_enable+0x82>
    6690:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    6694:	03 c0       	rjmp	.+6      	; 0x669c <udd_enable+0x88>
    6696:	8f e1       	ldi	r24, 0x1F	; 31
    6698:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    669c:	6b e1       	ldi	r22, 0x1B	; 27
    669e:	70 e0       	ldi	r23, 0x00	; 0
    66a0:	82 e0       	ldi	r24, 0x02	; 2
    66a2:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
    66a6:	8f 3f       	cpi	r24, 0xFF	; 255
    66a8:	19 f0       	breq	.+6      	; 0x66b0 <udd_enable+0x9c>
    66aa:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    66ae:	03 c0       	rjmp	.+6      	; 0x66b6 <udd_enable+0xa2>
    66b0:	8f e1       	ldi	r24, 0x1F	; 31
    66b2:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    66b6:	e0 ec       	ldi	r30, 0xC0	; 192
    66b8:	f4 e0       	ldi	r31, 0x04	; 4
    66ba:	80 81       	ld	r24, Z
    66bc:	82 60       	ori	r24, 0x02	; 2
    66be:	80 83       	st	Z, r24
    66c0:	80 81       	ld	r24, Z
    66c2:	80 68       	ori	r24, 0x80	; 128
    66c4:	80 83       	st	Z, r24
    66c6:	80 81       	ld	r24, Z
    66c8:	80 61       	ori	r24, 0x10	; 16
    66ca:	80 83       	st	Z, r24
    66cc:	88 eb       	ldi	r24, 0xB8	; 184
    66ce:	96 e2       	ldi	r25, 0x26	; 38
    66d0:	86 83       	std	Z+6, r24	; 0x06
    66d2:	97 83       	std	Z+7, r25	; 0x07
    66d4:	80 81       	ld	r24, Z
    66d6:	80 62       	ori	r24, 0x20	; 32
    66d8:	80 83       	st	Z, r24
    66da:	8f ef       	ldi	r24, 0xFF	; 255
    66dc:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    66e0:	e8 ec       	ldi	r30, 0xC8	; 200
    66e2:	f4 e0       	ldi	r31, 0x04	; 4
    66e4:	80 81       	ld	r24, Z
    66e6:	81 60       	ori	r24, 0x01	; 1
    66e8:	80 83       	st	Z, r24
    66ea:	10 92 ec 26 	sts	0x26EC, r1	; 0x8026ec <udd_b_idle>
    66ee:	80 91 a4 29 	lds	r24, 0x29A4	; 0x8029a4 <sleepmgr_locks+0x5>
    66f2:	8f 3f       	cpi	r24, 0xFF	; 255
    66f4:	09 f4       	brne	.+2      	; 0x66f8 <udd_enable+0xe4>
    66f6:	ff cf       	rjmp	.-2      	; 0x66f6 <udd_enable+0xe2>
    66f8:	8f b7       	in	r24, 0x3f	; 63
    66fa:	89 83       	std	Y+1, r24	; 0x01
    66fc:	f8 94       	cli
    66fe:	99 81       	ldd	r25, Y+1	; 0x01
    6700:	ef e9       	ldi	r30, 0x9F	; 159
    6702:	f9 e2       	ldi	r31, 0x29	; 41
    6704:	85 81       	ldd	r24, Z+5	; 0x05
    6706:	8f 5f       	subi	r24, 0xFF	; 255
    6708:	85 83       	std	Z+5, r24	; 0x05
    670a:	9f bf       	out	0x3f, r25	; 63
    670c:	56 df       	rcall	.-340    	; 0x65ba <udd_attach>
    670e:	1f bf       	out	0x3f, r17	; 63
    6710:	0f 90       	pop	r0
    6712:	0f 90       	pop	r0
    6714:	df 91       	pop	r29
    6716:	cf 91       	pop	r28
    6718:	1f 91       	pop	r17
    671a:	0f 91       	pop	r16
    671c:	08 95       	ret

0000671e <udd_is_high_speed>:
    671e:	80 e0       	ldi	r24, 0x00	; 0
    6720:	08 95       	ret

00006722 <udd_set_address>:
    6722:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    6726:	08 95       	ret

00006728 <udd_getaddress>:
    6728:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    672c:	08 95       	ret

0000672e <udd_get_frame_number>:
    672e:	80 91 e8 26 	lds	r24, 0x26E8	; 0x8026e8 <udd_sram+0x3c>
    6732:	90 91 e9 26 	lds	r25, 0x26E9	; 0x8026e9 <udd_sram+0x3d>
    6736:	08 95       	ret

00006738 <udd_get_micro_frame_number>:
    6738:	80 e0       	ldi	r24, 0x00	; 0
    673a:	90 e0       	ldi	r25, 0x00	; 0
    673c:	08 95       	ret

0000673e <udd_set_setup_payload>:
    673e:	ef e8       	ldi	r30, 0x8F	; 143
    6740:	f9 e2       	ldi	r31, 0x29	; 41
    6742:	80 87       	std	Z+8, r24	; 0x08
    6744:	91 87       	std	Z+9, r25	; 0x09
    6746:	62 87       	std	Z+10, r22	; 0x0a
    6748:	73 87       	std	Z+11, r23	; 0x0b
    674a:	08 95       	ret

0000674c <udd_ep_alloc>:
    674c:	28 2f       	mov	r18, r24
    674e:	2f 70       	andi	r18, 0x0F	; 15
    6750:	30 e0       	ldi	r19, 0x00	; 0
    6752:	22 0f       	add	r18, r18
    6754:	33 1f       	adc	r19, r19
    6756:	08 2e       	mov	r0, r24
    6758:	00 0c       	add	r0, r0
    675a:	99 0b       	sbc	r25, r25
    675c:	88 27       	eor	r24, r24
    675e:	99 0f       	add	r25, r25
    6760:	88 1f       	adc	r24, r24
    6762:	99 27       	eor	r25, r25
    6764:	82 0f       	add	r24, r18
    6766:	93 1f       	adc	r25, r19
    6768:	fc 01       	movw	r30, r24
    676a:	ee 0f       	add	r30, r30
    676c:	ff 1f       	adc	r31, r31
    676e:	ee 0f       	add	r30, r30
    6770:	ff 1f       	adc	r31, r31
    6772:	ee 0f       	add	r30, r30
    6774:	ff 1f       	adc	r31, r31
    6776:	e4 55       	subi	r30, 0x54	; 84
    6778:	f9 4d       	sbci	r31, 0xD9	; 217
    677a:	25 85       	ldd	r18, Z+13	; 0x0d
    677c:	20 7c       	andi	r18, 0xC0	; 192
    677e:	09 f0       	breq	.+2      	; 0x6782 <udd_ep_alloc+0x36>
    6780:	69 c0       	rjmp	.+210    	; 0x6854 <udd_ep_alloc+0x108>
    6782:	63 70       	andi	r22, 0x03	; 3
    6784:	61 30       	cpi	r22, 0x01	; 1
    6786:	11 f0       	breq	.+4      	; 0x678c <udd_ep_alloc+0x40>
    6788:	18 f4       	brcc	.+6      	; 0x6790 <udd_ep_alloc+0x44>
    678a:	04 c0       	rjmp	.+8      	; 0x6794 <udd_ep_alloc+0x48>
    678c:	60 ec       	ldi	r22, 0xC0	; 192
    678e:	03 c0       	rjmp	.+6      	; 0x6796 <udd_ep_alloc+0x4a>
    6790:	60 e8       	ldi	r22, 0x80	; 128
    6792:	01 c0       	rjmp	.+2      	; 0x6796 <udd_ep_alloc+0x4a>
    6794:	60 e4       	ldi	r22, 0x40	; 64
    6796:	40 38       	cpi	r20, 0x80	; 128
    6798:	51 05       	cpc	r21, r1
    679a:	e9 f0       	breq	.+58     	; 0x67d6 <udd_ep_alloc+0x8a>
    679c:	50 f4       	brcc	.+20     	; 0x67b2 <udd_ep_alloc+0x66>
    679e:	40 32       	cpi	r20, 0x20	; 32
    67a0:	51 05       	cpc	r21, r1
    67a2:	a9 f0       	breq	.+42     	; 0x67ce <udd_ep_alloc+0x82>
    67a4:	40 34       	cpi	r20, 0x40	; 64
    67a6:	51 05       	cpc	r21, r1
    67a8:	a1 f0       	breq	.+40     	; 0x67d2 <udd_ep_alloc+0x86>
    67aa:	40 31       	cpi	r20, 0x10	; 16
    67ac:	51 05       	cpc	r21, r1
    67ae:	d9 f4       	brne	.+54     	; 0x67e6 <udd_ep_alloc+0x9a>
    67b0:	0c c0       	rjmp	.+24     	; 0x67ca <udd_ep_alloc+0x7e>
    67b2:	41 15       	cp	r20, r1
    67b4:	22 e0       	ldi	r18, 0x02	; 2
    67b6:	52 07       	cpc	r21, r18
    67b8:	91 f0       	breq	.+36     	; 0x67de <udd_ep_alloc+0x92>
    67ba:	4f 3f       	cpi	r20, 0xFF	; 255
    67bc:	23 e0       	ldi	r18, 0x03	; 3
    67be:	52 07       	cpc	r21, r18
    67c0:	81 f0       	breq	.+32     	; 0x67e2 <udd_ep_alloc+0x96>
    67c2:	41 15       	cp	r20, r1
    67c4:	51 40       	sbci	r21, 0x01	; 1
    67c6:	79 f4       	brne	.+30     	; 0x67e6 <udd_ep_alloc+0x9a>
    67c8:	08 c0       	rjmp	.+16     	; 0x67da <udd_ep_alloc+0x8e>
    67ca:	21 e0       	ldi	r18, 0x01	; 1
    67cc:	0d c0       	rjmp	.+26     	; 0x67e8 <udd_ep_alloc+0x9c>
    67ce:	22 e0       	ldi	r18, 0x02	; 2
    67d0:	0b c0       	rjmp	.+22     	; 0x67e8 <udd_ep_alloc+0x9c>
    67d2:	23 e0       	ldi	r18, 0x03	; 3
    67d4:	09 c0       	rjmp	.+18     	; 0x67e8 <udd_ep_alloc+0x9c>
    67d6:	24 e0       	ldi	r18, 0x04	; 4
    67d8:	07 c0       	rjmp	.+14     	; 0x67e8 <udd_ep_alloc+0x9c>
    67da:	25 e0       	ldi	r18, 0x05	; 5
    67dc:	05 c0       	rjmp	.+10     	; 0x67e8 <udd_ep_alloc+0x9c>
    67de:	26 e0       	ldi	r18, 0x06	; 6
    67e0:	03 c0       	rjmp	.+6      	; 0x67e8 <udd_ep_alloc+0x9c>
    67e2:	27 e0       	ldi	r18, 0x07	; 7
    67e4:	01 c0       	rjmp	.+2      	; 0x67e8 <udd_ep_alloc+0x9c>
    67e6:	20 e0       	ldi	r18, 0x00	; 0
    67e8:	fc 01       	movw	r30, r24
    67ea:	ee 0f       	add	r30, r30
    67ec:	ff 1f       	adc	r31, r31
    67ee:	ee 0f       	add	r30, r30
    67f0:	ff 1f       	adc	r31, r31
    67f2:	ee 0f       	add	r30, r30
    67f4:	ff 1f       	adc	r31, r31
    67f6:	e4 55       	subi	r30, 0x54	; 84
    67f8:	f9 4d       	sbci	r31, 0xD9	; 217
    67fa:	15 86       	std	Z+13, r1	; 0x0d
    67fc:	36 e0       	ldi	r19, 0x06	; 6
    67fe:	34 87       	std	Z+12, r19	; 0x0c
    6800:	26 2b       	or	r18, r22
    6802:	25 87       	std	Z+13, r18	; 0x0d
    6804:	fc 01       	movw	r30, r24
    6806:	ee 0f       	add	r30, r30
    6808:	ff 1f       	adc	r31, r31
    680a:	ee 0f       	add	r30, r30
    680c:	ff 1f       	adc	r31, r31
    680e:	ee 0f       	add	r30, r30
    6810:	ff 1f       	adc	r31, r31
    6812:	e4 55       	subi	r30, 0x54	; 84
    6814:	f9 4d       	sbci	r31, 0xD9	; 217
    6816:	25 85       	ldd	r18, Z+13	; 0x0d
    6818:	20 7c       	andi	r18, 0xC0	; 192
    681a:	20 3c       	cpi	r18, 0xC0	; 192
    681c:	69 f4       	brne	.+26     	; 0x6838 <udd_ep_alloc+0xec>
    681e:	fc 01       	movw	r30, r24
    6820:	ee 0f       	add	r30, r30
    6822:	ff 1f       	adc	r31, r31
    6824:	ee 0f       	add	r30, r30
    6826:	ff 1f       	adc	r31, r31
    6828:	ee 0f       	add	r30, r30
    682a:	ff 1f       	adc	r31, r31
    682c:	e4 55       	subi	r30, 0x54	; 84
    682e:	f9 4d       	sbci	r31, 0xD9	; 217
    6830:	25 85       	ldd	r18, Z+13	; 0x0d
    6832:	27 70       	andi	r18, 0x07	; 7
    6834:	27 30       	cpi	r18, 0x07	; 7
    6836:	81 f0       	breq	.+32     	; 0x6858 <udd_ep_alloc+0x10c>
    6838:	88 0f       	add	r24, r24
    683a:	99 1f       	adc	r25, r25
    683c:	88 0f       	add	r24, r24
    683e:	99 1f       	adc	r25, r25
    6840:	88 0f       	add	r24, r24
    6842:	99 1f       	adc	r25, r25
    6844:	fc 01       	movw	r30, r24
    6846:	e4 55       	subi	r30, 0x54	; 84
    6848:	f9 4d       	sbci	r31, 0xD9	; 217
    684a:	85 85       	ldd	r24, Z+13	; 0x0d
    684c:	80 62       	ori	r24, 0x20	; 32
    684e:	85 87       	std	Z+13, r24	; 0x0d
    6850:	81 e0       	ldi	r24, 0x01	; 1
    6852:	08 95       	ret
    6854:	80 e0       	ldi	r24, 0x00	; 0
    6856:	08 95       	ret
    6858:	81 e0       	ldi	r24, 0x01	; 1
    685a:	08 95       	ret

0000685c <udd_ep_is_halted>:
    685c:	e8 2f       	mov	r30, r24
    685e:	ef 70       	andi	r30, 0x0F	; 15
    6860:	f0 e0       	ldi	r31, 0x00	; 0
    6862:	ee 0f       	add	r30, r30
    6864:	ff 1f       	adc	r31, r31
    6866:	08 2e       	mov	r0, r24
    6868:	00 0c       	add	r0, r0
    686a:	99 0b       	sbc	r25, r25
    686c:	88 27       	eor	r24, r24
    686e:	99 0f       	add	r25, r25
    6870:	88 1f       	adc	r24, r24
    6872:	99 27       	eor	r25, r25
    6874:	e8 0f       	add	r30, r24
    6876:	f9 1f       	adc	r31, r25
    6878:	ee 0f       	add	r30, r30
    687a:	ff 1f       	adc	r31, r31
    687c:	ee 0f       	add	r30, r30
    687e:	ff 1f       	adc	r31, r31
    6880:	ee 0f       	add	r30, r30
    6882:	ff 1f       	adc	r31, r31
    6884:	e4 55       	subi	r30, 0x54	; 84
    6886:	f9 4d       	sbci	r31, 0xD9	; 217
    6888:	85 85       	ldd	r24, Z+13	; 0x0d
    688a:	82 fb       	bst	r24, 2
    688c:	88 27       	eor	r24, r24
    688e:	80 f9       	bld	r24, 0
    6890:	08 95       	ret

00006892 <udd_ep_clear_halt>:
    6892:	0f 93       	push	r16
    6894:	28 2f       	mov	r18, r24
    6896:	2f 70       	andi	r18, 0x0F	; 15
    6898:	30 e0       	ldi	r19, 0x00	; 0
    689a:	a9 01       	movw	r20, r18
    689c:	44 0f       	add	r20, r20
    689e:	55 1f       	adc	r21, r21
    68a0:	28 2f       	mov	r18, r24
    68a2:	08 2e       	mov	r0, r24
    68a4:	00 0c       	add	r0, r0
    68a6:	33 0b       	sbc	r19, r19
    68a8:	22 27       	eor	r18, r18
    68aa:	33 0f       	add	r19, r19
    68ac:	22 1f       	adc	r18, r18
    68ae:	33 27       	eor	r19, r19
    68b0:	24 0f       	add	r18, r20
    68b2:	35 1f       	adc	r19, r21
    68b4:	a9 01       	movw	r20, r18
    68b6:	44 0f       	add	r20, r20
    68b8:	55 1f       	adc	r21, r21
    68ba:	44 0f       	add	r20, r20
    68bc:	55 1f       	adc	r21, r21
    68be:	44 0f       	add	r20, r20
    68c0:	55 1f       	adc	r21, r21
    68c2:	fa 01       	movw	r30, r20
    68c4:	e8 54       	subi	r30, 0x48	; 72
    68c6:	f9 4d       	sbci	r31, 0xD9	; 217
    68c8:	01 e0       	ldi	r16, 0x01	; 1
    68ca:	06 93       	lac	Z, r16
    68cc:	fa 01       	movw	r30, r20
    68ce:	e4 55       	subi	r30, 0x54	; 84
    68d0:	f9 4d       	sbci	r31, 0xD9	; 217
    68d2:	95 85       	ldd	r25, Z+13	; 0x0d
    68d4:	92 ff       	sbrs	r25, 2
    68d6:	11 c0       	rjmp	.+34     	; 0x68fa <udd_ep_clear_halt+0x68>
    68d8:	fa 01       	movw	r30, r20
    68da:	e4 55       	subi	r30, 0x54	; 84
    68dc:	f9 4d       	sbci	r31, 0xD9	; 217
    68de:	95 85       	ldd	r25, Z+13	; 0x0d
    68e0:	9b 7f       	andi	r25, 0xFB	; 251
    68e2:	95 87       	std	Z+13, r25	; 0x0d
    68e4:	59 dc       	rcall	.-1870   	; 0x6198 <udd_ep_get_job>
    68e6:	fc 01       	movw	r30, r24
    68e8:	80 81       	ld	r24, Z
    68ea:	80 ff       	sbrs	r24, 0
    68ec:	06 c0       	rjmp	.+12     	; 0x68fa <udd_ep_clear_halt+0x68>
    68ee:	8e 7f       	andi	r24, 0xFE	; 254
    68f0:	80 83       	st	Z, r24
    68f2:	07 80       	ldd	r0, Z+7	; 0x07
    68f4:	f0 85       	ldd	r31, Z+8	; 0x08
    68f6:	e0 2d       	mov	r30, r0
    68f8:	19 95       	eicall
    68fa:	81 e0       	ldi	r24, 0x01	; 1
    68fc:	0f 91       	pop	r16
    68fe:	08 95       	ret

00006900 <udd_ep_run>:
    6900:	6f 92       	push	r6
    6902:	7f 92       	push	r7
    6904:	8f 92       	push	r8
    6906:	9f 92       	push	r9
    6908:	af 92       	push	r10
    690a:	bf 92       	push	r11
    690c:	cf 92       	push	r12
    690e:	df 92       	push	r13
    6910:	ef 92       	push	r14
    6912:	ff 92       	push	r15
    6914:	0f 93       	push	r16
    6916:	1f 93       	push	r17
    6918:	cf 93       	push	r28
    691a:	df 93       	push	r29
    691c:	1f 92       	push	r1
    691e:	cd b7       	in	r28, 0x3d	; 61
    6920:	de b7       	in	r29, 0x3e	; 62
    6922:	78 2e       	mov	r7, r24
    6924:	66 2e       	mov	r6, r22
    6926:	4a 01       	movw	r8, r20
    6928:	59 01       	movw	r10, r18
    692a:	36 dc       	rcall	.-1940   	; 0x6198 <udd_ep_get_job>
    692c:	6c 01       	movw	r12, r24
    692e:	27 2d       	mov	r18, r7
    6930:	87 2d       	mov	r24, r7
    6932:	8f 70       	andi	r24, 0x0F	; 15
    6934:	e8 2e       	mov	r14, r24
    6936:	f1 2c       	mov	r15, r1
    6938:	c7 01       	movw	r24, r14
    693a:	88 0f       	add	r24, r24
    693c:	99 1f       	adc	r25, r25
    693e:	e7 2c       	mov	r14, r7
    6940:	07 2c       	mov	r0, r7
    6942:	00 0c       	add	r0, r0
    6944:	ff 08       	sbc	r15, r15
    6946:	ee 24       	eor	r14, r14
    6948:	ff 0c       	add	r15, r15
    694a:	ee 1c       	adc	r14, r14
    694c:	ff 24       	eor	r15, r15
    694e:	e8 0e       	add	r14, r24
    6950:	f9 1e       	adc	r15, r25
    6952:	f7 01       	movw	r30, r14
    6954:	ee 0f       	add	r30, r30
    6956:	ff 1f       	adc	r31, r31
    6958:	ee 0f       	add	r30, r30
    695a:	ff 1f       	adc	r31, r31
    695c:	ee 0f       	add	r30, r30
    695e:	ff 1f       	adc	r31, r31
    6960:	e4 55       	subi	r30, 0x54	; 84
    6962:	f9 4d       	sbci	r31, 0xD9	; 217
    6964:	85 85       	ldd	r24, Z+13	; 0x0d
    6966:	80 7c       	andi	r24, 0xC0	; 192
    6968:	09 f4       	brne	.+2      	; 0x696c <udd_ep_run+0x6c>
    696a:	82 c0       	rjmp	.+260    	; 0x6a70 <udd_ep_run+0x170>
    696c:	f7 01       	movw	r30, r14
    696e:	ee 0f       	add	r30, r30
    6970:	ff 1f       	adc	r31, r31
    6972:	ee 0f       	add	r30, r30
    6974:	ff 1f       	adc	r31, r31
    6976:	ee 0f       	add	r30, r30
    6978:	ff 1f       	adc	r31, r31
    697a:	e4 55       	subi	r30, 0x54	; 84
    697c:	f9 4d       	sbci	r31, 0xD9	; 217
    697e:	85 85       	ldd	r24, Z+13	; 0x0d
    6980:	80 7c       	andi	r24, 0xC0	; 192
    6982:	80 3c       	cpi	r24, 0xC0	; 192
    6984:	61 f0       	breq	.+24     	; 0x699e <udd_ep_run+0x9e>
    6986:	f7 01       	movw	r30, r14
    6988:	ee 0f       	add	r30, r30
    698a:	ff 1f       	adc	r31, r31
    698c:	ee 0f       	add	r30, r30
    698e:	ff 1f       	adc	r31, r31
    6990:	ee 0f       	add	r30, r30
    6992:	ff 1f       	adc	r31, r31
    6994:	e4 55       	subi	r30, 0x54	; 84
    6996:	f9 4d       	sbci	r31, 0xD9	; 217
    6998:	85 85       	ldd	r24, Z+13	; 0x0d
    699a:	82 fd       	sbrc	r24, 2
    699c:	6b c0       	rjmp	.+214    	; 0x6a74 <udd_ep_run+0x174>
    699e:	8f b7       	in	r24, 0x3f	; 63
    69a0:	89 83       	std	Y+1, r24	; 0x01
    69a2:	f8 94       	cli
    69a4:	89 81       	ldd	r24, Y+1	; 0x01
    69a6:	f6 01       	movw	r30, r12
    69a8:	90 81       	ld	r25, Z
    69aa:	90 ff       	sbrs	r25, 0
    69ac:	03 c0       	rjmp	.+6      	; 0x69b4 <udd_ep_run+0xb4>
    69ae:	8f bf       	out	0x3f, r24	; 63
    69b0:	80 e0       	ldi	r24, 0x00	; 0
    69b2:	61 c0       	rjmp	.+194    	; 0x6a76 <udd_ep_run+0x176>
    69b4:	f6 01       	movw	r30, r12
    69b6:	90 81       	ld	r25, Z
    69b8:	91 60       	ori	r25, 0x01	; 1
    69ba:	90 83       	st	Z, r25
    69bc:	8f bf       	out	0x3f, r24	; 63
    69be:	81 82       	std	Z+1, r8	; 0x01
    69c0:	92 82       	std	Z+2, r9	; 0x02
    69c2:	a3 82       	std	Z+3, r10	; 0x03
    69c4:	b4 82       	std	Z+4, r11	; 0x04
    69c6:	15 82       	std	Z+5, r1	; 0x05
    69c8:	16 82       	std	Z+6, r1	; 0x06
    69ca:	07 83       	std	Z+7, r16	; 0x07
    69cc:	10 87       	std	Z+8, r17	; 0x08
    69ce:	61 10       	cpse	r6, r1
    69d0:	06 c0       	rjmp	.+12     	; 0x69de <udd_ep_run+0xde>
    69d2:	91 e0       	ldi	r25, 0x01	; 1
    69d4:	a1 14       	cp	r10, r1
    69d6:	b1 04       	cpc	r11, r1
    69d8:	19 f0       	breq	.+6      	; 0x69e0 <udd_ep_run+0xe0>
    69da:	90 e0       	ldi	r25, 0x00	; 0
    69dc:	01 c0       	rjmp	.+2      	; 0x69e0 <udd_ep_run+0xe0>
    69de:	91 e0       	ldi	r25, 0x01	; 1
    69e0:	f6 01       	movw	r30, r12
    69e2:	80 81       	ld	r24, Z
    69e4:	90 fb       	bst	r25, 0
    69e6:	81 f9       	bld	r24, 1
    69e8:	8b 7f       	andi	r24, 0xFB	; 251
    69ea:	80 83       	st	Z, r24
    69ec:	22 23       	and	r18, r18
    69ee:	64 f4       	brge	.+24     	; 0x6a08 <udd_ep_run+0x108>
    69f0:	f7 01       	movw	r30, r14
    69f2:	ee 0f       	add	r30, r30
    69f4:	ff 1f       	adc	r31, r31
    69f6:	ee 0f       	add	r30, r30
    69f8:	ff 1f       	adc	r31, r31
    69fa:	ee 0f       	add	r30, r30
    69fc:	ff 1f       	adc	r31, r31
    69fe:	e4 55       	subi	r30, 0x54	; 84
    6a00:	f9 4d       	sbci	r31, 0xD9	; 217
    6a02:	12 8a       	std	Z+18, r1	; 0x12
    6a04:	13 8a       	std	Z+19, r1	; 0x13
    6a06:	30 c0       	rjmp	.+96     	; 0x6a68 <udd_ep_run+0x168>
    6a08:	f7 01       	movw	r30, r14
    6a0a:	ee 0f       	add	r30, r30
    6a0c:	ff 1f       	adc	r31, r31
    6a0e:	ee 0f       	add	r30, r30
    6a10:	ff 1f       	adc	r31, r31
    6a12:	ee 0f       	add	r30, r30
    6a14:	ff 1f       	adc	r31, r31
    6a16:	e4 55       	subi	r30, 0x54	; 84
    6a18:	f9 4d       	sbci	r31, 0xD9	; 217
    6a1a:	85 85       	ldd	r24, Z+13	; 0x0d
    6a1c:	80 7c       	andi	r24, 0xC0	; 192
    6a1e:	80 3c       	cpi	r24, 0xC0	; 192
    6a20:	b1 f4       	brne	.+44     	; 0x6a4e <udd_ep_run+0x14e>
    6a22:	c7 01       	movw	r24, r14
    6a24:	88 0f       	add	r24, r24
    6a26:	99 1f       	adc	r25, r25
    6a28:	88 0f       	add	r24, r24
    6a2a:	99 1f       	adc	r25, r25
    6a2c:	88 0f       	add	r24, r24
    6a2e:	99 1f       	adc	r25, r25
    6a30:	88 54       	subi	r24, 0x48	; 72
    6a32:	99 4d       	sbci	r25, 0xD9	; 217
    6a34:	88 db       	rcall	.-2288   	; 0x6146 <udd_ep_get_size>
    6a36:	bc 01       	movw	r22, r24
    6a38:	c5 01       	movw	r24, r10
    6a3a:	0e 94 54 4a 	call	0x94a8	; 0x94a8 <__udivmodhi4>
    6a3e:	89 2b       	or	r24, r25
    6a40:	31 f0       	breq	.+12     	; 0x6a4e <udd_ep_run+0x14e>
    6a42:	f6 01       	movw	r30, r12
    6a44:	80 81       	ld	r24, Z
    6a46:	8e 7f       	andi	r24, 0xFE	; 254
    6a48:	80 83       	st	Z, r24
    6a4a:	80 e0       	ldi	r24, 0x00	; 0
    6a4c:	14 c0       	rjmp	.+40     	; 0x6a76 <udd_ep_run+0x176>
    6a4e:	f7 01       	movw	r30, r14
    6a50:	ee 0f       	add	r30, r30
    6a52:	ff 1f       	adc	r31, r31
    6a54:	ee 0f       	add	r30, r30
    6a56:	ff 1f       	adc	r31, r31
    6a58:	ee 0f       	add	r30, r30
    6a5a:	ff 1f       	adc	r31, r31
    6a5c:	e4 55       	subi	r30, 0x54	; 84
    6a5e:	f9 4d       	sbci	r31, 0xD9	; 217
    6a60:	16 86       	std	Z+14, r1	; 0x0e
    6a62:	17 86       	std	Z+15, r1	; 0x0f
    6a64:	12 8a       	std	Z+18, r1	; 0x12
    6a66:	13 8a       	std	Z+19, r1	; 0x13
    6a68:	87 2d       	mov	r24, r7
    6a6a:	23 dc       	rcall	.-1978   	; 0x62b2 <udd_ep_trans_complet>
    6a6c:	81 e0       	ldi	r24, 0x01	; 1
    6a6e:	03 c0       	rjmp	.+6      	; 0x6a76 <udd_ep_run+0x176>
    6a70:	80 e0       	ldi	r24, 0x00	; 0
    6a72:	01 c0       	rjmp	.+2      	; 0x6a76 <udd_ep_run+0x176>
    6a74:	80 e0       	ldi	r24, 0x00	; 0
    6a76:	0f 90       	pop	r0
    6a78:	df 91       	pop	r29
    6a7a:	cf 91       	pop	r28
    6a7c:	1f 91       	pop	r17
    6a7e:	0f 91       	pop	r16
    6a80:	ff 90       	pop	r15
    6a82:	ef 90       	pop	r14
    6a84:	df 90       	pop	r13
    6a86:	cf 90       	pop	r12
    6a88:	bf 90       	pop	r11
    6a8a:	af 90       	pop	r10
    6a8c:	9f 90       	pop	r9
    6a8e:	8f 90       	pop	r8
    6a90:	7f 90       	pop	r7
    6a92:	6f 90       	pop	r6
    6a94:	08 95       	ret

00006a96 <udd_ep_abort>:
    6a96:	ff 92       	push	r15
    6a98:	0f 93       	push	r16
    6a9a:	1f 93       	push	r17
    6a9c:	cf 93       	push	r28
    6a9e:	df 93       	push	r29
    6aa0:	18 2f       	mov	r17, r24
    6aa2:	c8 2f       	mov	r28, r24
    6aa4:	cf 70       	andi	r28, 0x0F	; 15
    6aa6:	d0 e0       	ldi	r29, 0x00	; 0
    6aa8:	ce 01       	movw	r24, r28
    6aaa:	88 0f       	add	r24, r24
    6aac:	99 1f       	adc	r25, r25
    6aae:	c1 2f       	mov	r28, r17
    6ab0:	01 2e       	mov	r0, r17
    6ab2:	00 0c       	add	r0, r0
    6ab4:	dd 0b       	sbc	r29, r29
    6ab6:	cc 27       	eor	r28, r28
    6ab8:	dd 0f       	add	r29, r29
    6aba:	cc 1f       	adc	r28, r28
    6abc:	dd 27       	eor	r29, r29
    6abe:	c8 0f       	add	r28, r24
    6ac0:	d9 1f       	adc	r29, r25
    6ac2:	81 2f       	mov	r24, r17
    6ac4:	69 db       	rcall	.-2350   	; 0x6198 <udd_ep_get_job>
    6ac6:	dc 01       	movw	r26, r24
    6ac8:	fe 01       	movw	r30, r28
    6aca:	ee 0f       	add	r30, r30
    6acc:	ff 1f       	adc	r31, r31
    6ace:	ee 0f       	add	r30, r30
    6ad0:	ff 1f       	adc	r31, r31
    6ad2:	ee 0f       	add	r30, r30
    6ad4:	ff 1f       	adc	r31, r31
    6ad6:	e8 54       	subi	r30, 0x48	; 72
    6ad8:	f9 4d       	sbci	r31, 0xD9	; 217
    6ada:	02 e0       	ldi	r16, 0x02	; 2
    6adc:	05 93       	las	Z, r16
    6ade:	8c 91       	ld	r24, X
    6ae0:	80 ff       	sbrs	r24, 0
    6ae2:	22 c0       	rjmp	.+68     	; 0x6b28 <udd_ep_abort+0x92>
    6ae4:	8e 7f       	andi	r24, 0xFE	; 254
    6ae6:	8c 93       	st	X, r24
    6ae8:	17 96       	adiw	r26, 0x07	; 7
    6aea:	ed 91       	ld	r30, X+
    6aec:	fc 91       	ld	r31, X
    6aee:	18 97       	sbiw	r26, 0x08	; 8
    6af0:	30 97       	sbiw	r30, 0x00	; 0
    6af2:	d1 f0       	breq	.+52     	; 0x6b28 <udd_ep_abort+0x92>
    6af4:	11 23       	and	r17, r17
    6af6:	5c f4       	brge	.+22     	; 0x6b0e <udd_ep_abort+0x78>
    6af8:	cc 0f       	add	r28, r28
    6afa:	dd 1f       	adc	r29, r29
    6afc:	cc 0f       	add	r28, r28
    6afe:	dd 1f       	adc	r29, r29
    6b00:	cc 0f       	add	r28, r28
    6b02:	dd 1f       	adc	r29, r29
    6b04:	c4 55       	subi	r28, 0x54	; 84
    6b06:	d9 4d       	sbci	r29, 0xD9	; 217
    6b08:	6a 89       	ldd	r22, Y+18	; 0x12
    6b0a:	7b 89       	ldd	r23, Y+19	; 0x13
    6b0c:	0a c0       	rjmp	.+20     	; 0x6b22 <udd_ep_abort+0x8c>
    6b0e:	cc 0f       	add	r28, r28
    6b10:	dd 1f       	adc	r29, r29
    6b12:	cc 0f       	add	r28, r28
    6b14:	dd 1f       	adc	r29, r29
    6b16:	cc 0f       	add	r28, r28
    6b18:	dd 1f       	adc	r29, r29
    6b1a:	c4 55       	subi	r28, 0x54	; 84
    6b1c:	d9 4d       	sbci	r29, 0xD9	; 217
    6b1e:	6e 85       	ldd	r22, Y+14	; 0x0e
    6b20:	7f 85       	ldd	r23, Y+15	; 0x0f
    6b22:	41 2f       	mov	r20, r17
    6b24:	81 e0       	ldi	r24, 0x01	; 1
    6b26:	19 95       	eicall
    6b28:	df 91       	pop	r29
    6b2a:	cf 91       	pop	r28
    6b2c:	1f 91       	pop	r17
    6b2e:	0f 91       	pop	r16
    6b30:	ff 90       	pop	r15
    6b32:	08 95       	ret

00006b34 <udd_ep_free>:
    6b34:	cf 93       	push	r28
    6b36:	c8 2f       	mov	r28, r24
    6b38:	ae df       	rcall	.-164    	; 0x6a96 <udd_ep_abort>
    6b3a:	ec 2f       	mov	r30, r28
    6b3c:	ef 70       	andi	r30, 0x0F	; 15
    6b3e:	f0 e0       	ldi	r31, 0x00	; 0
    6b40:	ee 0f       	add	r30, r30
    6b42:	ff 1f       	adc	r31, r31
    6b44:	8c 2f       	mov	r24, r28
    6b46:	cc 0f       	add	r28, r28
    6b48:	99 0b       	sbc	r25, r25
    6b4a:	88 27       	eor	r24, r24
    6b4c:	99 0f       	add	r25, r25
    6b4e:	88 1f       	adc	r24, r24
    6b50:	99 27       	eor	r25, r25
    6b52:	e8 0f       	add	r30, r24
    6b54:	f9 1f       	adc	r31, r25
    6b56:	ee 0f       	add	r30, r30
    6b58:	ff 1f       	adc	r31, r31
    6b5a:	ee 0f       	add	r30, r30
    6b5c:	ff 1f       	adc	r31, r31
    6b5e:	ee 0f       	add	r30, r30
    6b60:	ff 1f       	adc	r31, r31
    6b62:	e4 55       	subi	r30, 0x54	; 84
    6b64:	f9 4d       	sbci	r31, 0xD9	; 217
    6b66:	15 86       	std	Z+13, r1	; 0x0d
    6b68:	cf 91       	pop	r28
    6b6a:	08 95       	ret

00006b6c <udd_ep_set_halt>:
    6b6c:	e8 2f       	mov	r30, r24
    6b6e:	ef 70       	andi	r30, 0x0F	; 15
    6b70:	f0 e0       	ldi	r31, 0x00	; 0
    6b72:	ee 0f       	add	r30, r30
    6b74:	ff 1f       	adc	r31, r31
    6b76:	28 2f       	mov	r18, r24
    6b78:	08 2e       	mov	r0, r24
    6b7a:	00 0c       	add	r0, r0
    6b7c:	33 0b       	sbc	r19, r19
    6b7e:	22 27       	eor	r18, r18
    6b80:	33 0f       	add	r19, r19
    6b82:	22 1f       	adc	r18, r18
    6b84:	33 27       	eor	r19, r19
    6b86:	e2 0f       	add	r30, r18
    6b88:	f3 1f       	adc	r31, r19
    6b8a:	ee 0f       	add	r30, r30
    6b8c:	ff 1f       	adc	r31, r31
    6b8e:	ee 0f       	add	r30, r30
    6b90:	ff 1f       	adc	r31, r31
    6b92:	ee 0f       	add	r30, r30
    6b94:	ff 1f       	adc	r31, r31
    6b96:	e4 55       	subi	r30, 0x54	; 84
    6b98:	f9 4d       	sbci	r31, 0xD9	; 217
    6b9a:	95 85       	ldd	r25, Z+13	; 0x0d
    6b9c:	94 60       	ori	r25, 0x04	; 4
    6b9e:	95 87       	std	Z+13, r25	; 0x0d
    6ba0:	7a df       	rcall	.-268    	; 0x6a96 <udd_ep_abort>
    6ba2:	81 e0       	ldi	r24, 0x01	; 1
    6ba4:	08 95       	ret

00006ba6 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    6ba6:	1f 92       	push	r1
    6ba8:	0f 92       	push	r0
    6baa:	0f b6       	in	r0, 0x3f	; 63
    6bac:	0f 92       	push	r0
    6bae:	11 24       	eor	r1, r1
    6bb0:	0b b6       	in	r0, 0x3b	; 59
    6bb2:	0f 92       	push	r0
    6bb4:	0f 93       	push	r16
    6bb6:	2f 93       	push	r18
    6bb8:	3f 93       	push	r19
    6bba:	4f 93       	push	r20
    6bbc:	5f 93       	push	r21
    6bbe:	6f 93       	push	r22
    6bc0:	7f 93       	push	r23
    6bc2:	8f 93       	push	r24
    6bc4:	9f 93       	push	r25
    6bc6:	af 93       	push	r26
    6bc8:	bf 93       	push	r27
    6bca:	ef 93       	push	r30
    6bcc:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    6bce:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    6bd2:	88 23       	and	r24, r24
    6bd4:	34 f4       	brge	.+12     	; 0x6be2 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    6bd6:	80 e8       	ldi	r24, 0x80	; 128
    6bd8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    6bdc:	0e 94 e5 46 	call	0x8dca	; 0x8dca <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    6be0:	88 c0       	rjmp	.+272    	; 0x6cf2 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    6be2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    6be6:	82 ff       	sbrs	r24, 2
    6be8:	20 c0       	rjmp	.+64     	; 0x6c2a <__vector_125+0x84>
		udd_ack_underflow_event();
    6bea:	84 e0       	ldi	r24, 0x04	; 4
    6bec:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    6bf0:	80 91 c0 26 	lds	r24, 0x26C0	; 0x8026c0 <udd_sram+0x14>
    6bf4:	86 ff       	sbrs	r24, 6
    6bf6:	7d c0       	rjmp	.+250    	; 0x6cf2 <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    6bf8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    6bfc:	81 fd       	sbrc	r24, 1
    6bfe:	79 c0       	rjmp	.+242    	; 0x6cf2 <__vector_125+0x14c>
    6c00:	e6 da       	rcall	.-2612   	; 0x61ce <udd_ctrl_interrupt_tc_setup>
    6c02:	81 11       	cpse	r24, r1
    6c04:	76 c0       	rjmp	.+236    	; 0x6cf2 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    6c06:	80 91 ab 26 	lds	r24, 0x26AB	; 0x8026ab <udd_ep_control_state>
    6c0a:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    6c0c:	11 f4       	brne	.+4      	; 0x6c12 <__vector_125+0x6c>
    6c0e:	19 da       	rcall	.-3022   	; 0x6042 <udd_ctrl_send_zlp_in>
    6c10:	70 c0       	rjmp	.+224    	; 0x6cf2 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    6c12:	84 30       	cpi	r24, 0x04	; 4
    6c14:	09 f0       	breq	.+2      	; 0x6c18 <__vector_125+0x72>
    6c16:	6d c0       	rjmp	.+218    	; 0x6cf2 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    6c18:	e1 ec       	ldi	r30, 0xC1	; 193
    6c1a:	f6 e2       	ldi	r31, 0x26	; 38
    6c1c:	04 e0       	ldi	r16, 0x04	; 4
    6c1e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    6c20:	e9 eb       	ldi	r30, 0xB9	; 185
    6c22:	f6 e2       	ldi	r31, 0x26	; 38
    6c24:	04 e0       	ldi	r16, 0x04	; 4
    6c26:	05 93       	las	Z, r16
    6c28:	64 c0       	rjmp	.+200    	; 0x6cf2 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    6c2a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    6c2e:	81 ff       	sbrs	r24, 1
    6c30:	5b c0       	rjmp	.+182    	; 0x6ce8 <__vector_125+0x142>
		udd_ack_overflow_event();
    6c32:	82 e0       	ldi	r24, 0x02	; 2
    6c34:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    6c38:	80 91 b8 26 	lds	r24, 0x26B8	; 0x8026b8 <udd_sram+0xc>
    6c3c:	86 ff       	sbrs	r24, 6
    6c3e:	59 c0       	rjmp	.+178    	; 0x6cf2 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    6c40:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    6c44:	81 fd       	sbrc	r24, 1
    6c46:	55 c0       	rjmp	.+170    	; 0x6cf2 <__vector_125+0x14c>
    6c48:	c2 da       	rcall	.-2684   	; 0x61ce <udd_ctrl_interrupt_tc_setup>
    6c4a:	81 11       	cpse	r24, r1
    6c4c:	52 c0       	rjmp	.+164    	; 0x6cf2 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    6c4e:	80 91 ab 26 	lds	r24, 0x26AB	; 0x8026ab <udd_ep_control_state>
    6c52:	82 30       	cpi	r24, 0x02	; 2
    6c54:	41 f4       	brne	.+16     	; 0x6c66 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    6c56:	84 e0       	ldi	r24, 0x04	; 4
    6c58:	80 93 ab 26 	sts	0x26AB, r24	; 0x8026ab <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    6c5c:	e8 eb       	ldi	r30, 0xB8	; 184
    6c5e:	f6 e2       	ldi	r31, 0x26	; 38
    6c60:	02 e0       	ldi	r16, 0x02	; 2
    6c62:	06 93       	lac	Z, r16
    6c64:	46 c0       	rjmp	.+140    	; 0x6cf2 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    6c66:	83 30       	cpi	r24, 0x03	; 3
    6c68:	09 f0       	breq	.+2      	; 0x6c6c <__vector_125+0xc6>
    6c6a:	43 c0       	rjmp	.+134    	; 0x6cf2 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    6c6c:	e1 ec       	ldi	r30, 0xC1	; 193
    6c6e:	f6 e2       	ldi	r31, 0x26	; 38
    6c70:	04 e0       	ldi	r16, 0x04	; 4
    6c72:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    6c74:	e9 eb       	ldi	r30, 0xB9	; 185
    6c76:	f6 e2       	ldi	r31, 0x26	; 38
    6c78:	04 e0       	ldi	r16, 0x04	; 4
    6c7a:	05 93       	las	Z, r16
    6c7c:	3a c0       	rjmp	.+116    	; 0x6cf2 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    6c7e:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    6c80:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    6c84:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    6c86:	07 df       	rcall	.-498    	; 0x6a96 <udd_ep_abort>
    6c88:	81 e8       	ldi	r24, 0x81	; 129
    6c8a:	05 df       	rcall	.-502    	; 0x6a96 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    6c8c:	82 e0       	ldi	r24, 0x02	; 2
    6c8e:	03 df       	rcall	.-506    	; 0x6a96 <udd_ep_abort>
    6c90:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    6c92:	01 df       	rcall	.-510    	; 0x6a96 <udd_ep_abort>
    6c94:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    6c98:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    6c9c:	ec ea       	ldi	r30, 0xAC	; 172
    6c9e:	f6 e2       	ldi	r31, 0x26	; 38
	udd_endpoint_clear_status(ep_ctrl);
    6ca0:	15 86       	std	Z+13, r1	; 0x0d
    6ca2:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    6ca4:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    6ca6:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    6ca8:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    6caa:	15 8a       	std	Z+21, r1	; 0x15
    6cac:	94 8b       	std	Z+20, r25	; 0x14
    6cae:	85 8b       	std	Z+21, r24	; 0x15
    6cb0:	87 e6       	ldi	r24, 0x67	; 103
		// Reset endpoint control management
		udd_ctrl_init();
    6cb2:	96 e2       	ldi	r25, 0x26	; 38
    6cb4:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    6cb6:	91 8b       	std	Z+17, r25	; 0x11
    6cb8:	91 d9       	rcall	.-3294   	; 0x5fdc <udd_ctrl_init>
		udd_ack_suspend_event();
    6cba:	1b c0       	rjmp	.+54     	; 0x6cf2 <__vector_125+0x14c>
    6cbc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    6cc0:	86 ff       	sbrs	r24, 6
    6cc2:	07 c0       	rjmp	.+14     	; 0x6cd2 <__vector_125+0x12c>
    6cc4:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    6cc6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    6cca:	80 e0       	ldi	r24, 0x00	; 0
    6ccc:	4f d9       	rcall	.-3426   	; 0x5f6c <udd_sleep_mode>
		udd_ack_resume_event();
    6cce:	cb d5       	rcall	.+2966   	; 0x7866 <usb_callback_suspend_action>
    6cd0:	10 c0       	rjmp	.+32     	; 0x6cf2 <__vector_125+0x14c>
    6cd2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    6cd6:	85 ff       	sbrs	r24, 5
    6cd8:	0c c0       	rjmp	.+24     	; 0x6cf2 <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    6cda:	80 e2       	ldi	r24, 0x20	; 32
    6cdc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    6ce0:	81 e0       	ldi	r24, 0x01	; 1
    6ce2:	44 d9       	rcall	.-3448   	; 0x5f6c <udd_sleep_mode>
    6ce4:	c1 d5       	rcall	.+2946   	; 0x7868 <usb_callback_resume_action>
    6ce6:	05 c0       	rjmp	.+10     	; 0x6cf2 <__vector_125+0x14c>
    6ce8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    6cec:	84 fd       	sbrc	r24, 4
    6cee:	c7 cf       	rjmp	.-114    	; 0x6c7e <__vector_125+0xd8>
    6cf0:	e5 cf       	rjmp	.-54     	; 0x6cbc <__vector_125+0x116>
    6cf2:	ff 91       	pop	r31
    6cf4:	ef 91       	pop	r30
    6cf6:	bf 91       	pop	r27
    6cf8:	af 91       	pop	r26
    6cfa:	9f 91       	pop	r25
    6cfc:	8f 91       	pop	r24
    6cfe:	7f 91       	pop	r23
    6d00:	6f 91       	pop	r22
    6d02:	5f 91       	pop	r21
    6d04:	4f 91       	pop	r20
    6d06:	3f 91       	pop	r19
    6d08:	2f 91       	pop	r18
    6d0a:	0f 91       	pop	r16
    6d0c:	0f 90       	pop	r0
    6d0e:	0b be       	out	0x3b, r0	; 59
    6d10:	0f 90       	pop	r0
    6d12:	0f be       	out	0x3f, r0	; 63
    6d14:	0f 90       	pop	r0
    6d16:	1f 90       	pop	r1
    6d18:	18 95       	reti

00006d1a <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    6d1a:	1f 92       	push	r1
    6d1c:	0f 92       	push	r0
    6d1e:	0f b6       	in	r0, 0x3f	; 63
    6d20:	0f 92       	push	r0
    6d22:	11 24       	eor	r1, r1
    6d24:	0b b6       	in	r0, 0x3b	; 59
    6d26:	0f 92       	push	r0
    6d28:	0f 93       	push	r16
    6d2a:	1f 93       	push	r17
    6d2c:	2f 93       	push	r18
    6d2e:	3f 93       	push	r19
    6d30:	4f 93       	push	r20
    6d32:	5f 93       	push	r21
    6d34:	6f 93       	push	r22
    6d36:	7f 93       	push	r23
    6d38:	8f 93       	push	r24
    6d3a:	9f 93       	push	r25
    6d3c:	af 93       	push	r26
    6d3e:	bf 93       	push	r27
    6d40:	cf 93       	push	r28
    6d42:	df 93       	push	r29
    6d44:	ef 93       	push	r30
    6d46:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    6d48:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    6d4c:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    6d4e:	03 c0       	rjmp	.+6      	; 0x6d56 <__vector_126+0x3c>
    6d50:	3e da       	rcall	.-2948   	; 0x61ce <udd_ctrl_interrupt_tc_setup>
    6d52:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    6d54:	c4 c0       	rjmp	.+392    	; 0x6ede <__vector_126+0x1c4>
    6d56:	82 e0       	ldi	r24, 0x02	; 2
    6d58:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    6d5c:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    6d60:	81 95       	neg	r24
    6d62:	88 0f       	add	r24, r24
    6d64:	e8 eb       	ldi	r30, 0xB8	; 184
    6d66:	f6 e2       	ldi	r31, 0x26	; 38
    6d68:	e8 1b       	sub	r30, r24
    6d6a:	f1 09       	sbc	r31, r1
    6d6c:	20 81       	ld	r18, Z
    6d6e:	31 81       	ldd	r19, Z+1	; 0x01
    6d70:	28 5b       	subi	r18, 0xB8	; 184
    6d72:	36 42       	sbci	r19, 0x26	; 38
    6d74:	36 95       	lsr	r19
    6d76:	27 95       	ror	r18
    6d78:	36 95       	lsr	r19
    6d7a:	27 95       	ror	r18
    6d7c:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    6d7e:	27 95       	ror	r18
    6d80:	82 2f       	mov	r24, r18
    6d82:	86 95       	lsr	r24
    6d84:	20 fd       	sbrc	r18, 0
    6d86:	02 c0       	rjmp	.+4      	; 0x6d8c <__vector_126+0x72>
    6d88:	90 e0       	ldi	r25, 0x00	; 0
    6d8a:	01 c0       	rjmp	.+2      	; 0x6d8e <__vector_126+0x74>
    6d8c:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    6d8e:	89 0f       	add	r24, r25
    6d90:	e8 2f       	mov	r30, r24
    6d92:	ef 70       	andi	r30, 0x0F	; 15
    6d94:	f0 e0       	ldi	r31, 0x00	; 0
    6d96:	ee 0f       	add	r30, r30
    6d98:	ff 1f       	adc	r31, r31
    6d9a:	28 2f       	mov	r18, r24
    6d9c:	08 2e       	mov	r0, r24
    6d9e:	00 0c       	add	r0, r0
    6da0:	33 0b       	sbc	r19, r19
    6da2:	22 27       	eor	r18, r18
    6da4:	33 0f       	add	r19, r19
    6da6:	22 1f       	adc	r18, r18
    6da8:	33 27       	eor	r19, r19
    6daa:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    6dac:	f3 1f       	adc	r31, r19
    6dae:	df 01       	movw	r26, r30
    6db0:	aa 0f       	add	r26, r26
    6db2:	bb 1f       	adc	r27, r27
    6db4:	aa 0f       	add	r26, r26
    6db6:	bb 1f       	adc	r27, r27
    6db8:	aa 0f       	add	r26, r26
    6dba:	bb 1f       	adc	r27, r27
    6dbc:	a4 55       	subi	r26, 0x54	; 84
    6dbe:	b9 4d       	sbci	r27, 0xD9	; 217
    6dc0:	1c 96       	adiw	r26, 0x0c	; 12
    6dc2:	9c 91       	ld	r25, X
    6dc4:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    6dc6:	8b c0       	rjmp	.+278    	; 0x6ede <__vector_126+0x1c4>
    6dc8:	ee 0f       	add	r30, r30
    6dca:	ff 1f       	adc	r31, r31
    6dcc:	ee 0f       	add	r30, r30
    6dce:	ff 1f       	adc	r31, r31
    6dd0:	ee 0f       	add	r30, r30
    6dd2:	ff 1f       	adc	r31, r31
    6dd4:	e8 54       	subi	r30, 0x48	; 72
    6dd6:	f9 4d       	sbci	r31, 0xD9	; 217
    6dd8:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    6dda:	06 93       	lac	Z, r16
    6ddc:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    6dde:	7a c0       	rjmp	.+244    	; 0x6ed4 <__vector_126+0x1ba>
    6de0:	80 91 ab 26 	lds	r24, 0x26AB	; 0x8026ab <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    6de4:	84 30       	cpi	r24, 0x04	; 4
    6de6:	19 f4       	brne	.+6      	; 0x6dee <__vector_126+0xd4>
    6de8:	3a d9       	rcall	.-3468   	; 0x605e <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    6dea:	f8 d8       	rcall	.-3600   	; 0x5fdc <udd_ctrl_init>
    6dec:	78 c0       	rjmp	.+240    	; 0x6ede <__vector_126+0x1c4>
    6dee:	00 91 ba 26 	lds	r16, 0x26BA	; 0x8026ba <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    6df2:	10 91 bb 26 	lds	r17, 0x26BB	; 0x8026bb <udd_sram+0xf>
    6df6:	80 91 99 29 	lds	r24, 0x2999	; 0x802999 <udd_g_ctrlreq+0xa>
    6dfa:	90 91 9a 29 	lds	r25, 0x299A	; 0x80299a <udd_g_ctrlreq+0xb>
    6dfe:	c0 91 a7 26 	lds	r28, 0x26A7	; 0x8026a7 <udd_ctrl_payload_nb_trans>
    6e02:	d0 91 a8 26 	lds	r29, 0x26A8	; 0x8026a8 <udd_ctrl_payload_nb_trans+0x1>
    6e06:	98 01       	movw	r18, r16
    6e08:	2c 0f       	add	r18, r28
    6e0a:	3d 1f       	adc	r19, r29
    6e0c:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    6e0e:	93 07       	cpc	r25, r19
    6e10:	18 f4       	brcc	.+6      	; 0x6e18 <__vector_126+0xfe>
    6e12:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    6e14:	0c 1b       	sub	r16, r28
    6e16:	1d 0b       	sbc	r17, r29
    6e18:	80 91 97 29 	lds	r24, 0x2997	; 0x802997 <udd_g_ctrlreq+0x8>
    6e1c:	90 91 98 29 	lds	r25, 0x2998	; 0x802998 <udd_g_ctrlreq+0x9>
    6e20:	a8 01       	movw	r20, r16
    6e22:	67 e6       	ldi	r22, 0x67	; 103
    6e24:	76 e2       	ldi	r23, 0x26	; 38
    6e26:	8c 0f       	add	r24, r28
    6e28:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    6e2a:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <memcpy>
    6e2e:	c0 0f       	add	r28, r16
    6e30:	d1 1f       	adc	r29, r17
    6e32:	c0 93 a7 26 	sts	0x26A7, r28	; 0x8026a7 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    6e36:	d0 93 a8 26 	sts	0x26A8, r29	; 0x8026a8 <udd_ctrl_payload_nb_trans+0x1>
    6e3a:	00 34       	cpi	r16, 0x40	; 64
    6e3c:	11 05       	cpc	r17, r1
    6e3e:	69 f4       	brne	.+26     	; 0x6e5a <__vector_126+0x140>
    6e40:	80 91 a9 26 	lds	r24, 0x26A9	; 0x8026a9 <udd_ctrl_prev_payload_nb_trans>
    6e44:	90 91 aa 26 	lds	r25, 0x26AA	; 0x8026aa <udd_ctrl_prev_payload_nb_trans+0x1>
    6e48:	8c 0f       	add	r24, r28
    6e4a:	9d 1f       	adc	r25, r29
    6e4c:	20 91 95 29 	lds	r18, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    6e50:	30 91 96 29 	lds	r19, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    6e54:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    6e56:	93 07       	cpc	r25, r19
    6e58:	80 f0       	brcs	.+32     	; 0x6e7a <__vector_126+0x160>
    6e5a:	ef e8       	ldi	r30, 0x8F	; 143
    6e5c:	f9 e2       	ldi	r31, 0x29	; 41
		if (NULL != udd_g_ctrlreq.over_under_run) {
    6e5e:	c2 87       	std	Z+10, r28	; 0x0a
    6e60:	d3 87       	std	Z+11, r29	; 0x0b
    6e62:	06 84       	ldd	r0, Z+14	; 0x0e
    6e64:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    6e66:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    6e68:	30 97       	sbiw	r30, 0x00	; 0
    6e6a:	29 f0       	breq	.+10     	; 0x6e76 <__vector_126+0x15c>
    6e6c:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    6e6e:	81 11       	cpse	r24, r1
    6e70:	02 c0       	rjmp	.+4      	; 0x6e76 <__vector_126+0x15c>
    6e72:	d9 d8       	rcall	.-3662   	; 0x6026 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    6e74:	34 c0       	rjmp	.+104    	; 0x6ede <__vector_126+0x1c4>
    6e76:	e5 d8       	rcall	.-3638   	; 0x6042 <udd_ctrl_send_zlp_in>
    6e78:	32 c0       	rjmp	.+100    	; 0x6ede <__vector_126+0x1c4>
    6e7a:	80 91 99 29 	lds	r24, 0x2999	; 0x802999 <udd_g_ctrlreq+0xa>
    6e7e:	90 91 9a 29 	lds	r25, 0x299A	; 0x80299a <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    6e82:	c8 17       	cp	r28, r24
    6e84:	d9 07       	cpc	r29, r25
    6e86:	f9 f4       	brne	.+62     	; 0x6ec6 <__vector_126+0x1ac>
    6e88:	e0 91 9d 29 	lds	r30, 0x299D	; 0x80299d <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    6e8c:	f0 91 9e 29 	lds	r31, 0x299E	; 0x80299e <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    6e90:	30 97       	sbiw	r30, 0x00	; 0
    6e92:	11 f4       	brne	.+4      	; 0x6e98 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    6e94:	c8 d8       	rcall	.-3696   	; 0x6026 <udd_ctrl_stall_data>
    6e96:	23 c0       	rjmp	.+70     	; 0x6ede <__vector_126+0x1c4>
    6e98:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    6e9a:	81 11       	cpse	r24, r1
    6e9c:	02 c0       	rjmp	.+4      	; 0x6ea2 <__vector_126+0x188>
    6e9e:	c3 d8       	rcall	.-3706   	; 0x6026 <udd_ctrl_stall_data>
    6ea0:	1e c0       	rjmp	.+60     	; 0x6ede <__vector_126+0x1c4>
    6ea2:	20 91 a9 26 	lds	r18, 0x26A9	; 0x8026a9 <udd_ctrl_prev_payload_nb_trans>
    6ea6:	30 91 aa 26 	lds	r19, 0x26AA	; 0x8026aa <udd_ctrl_prev_payload_nb_trans+0x1>
    6eaa:	80 91 a7 26 	lds	r24, 0x26A7	; 0x8026a7 <udd_ctrl_payload_nb_trans>
    6eae:	90 91 a8 26 	lds	r25, 0x26A8	; 0x8026a8 <udd_ctrl_payload_nb_trans+0x1>
    6eb2:	82 0f       	add	r24, r18
    6eb4:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    6eb6:	80 93 a9 26 	sts	0x26A9, r24	; 0x8026a9 <udd_ctrl_prev_payload_nb_trans>
    6eba:	90 93 aa 26 	sts	0x26AA, r25	; 0x8026aa <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    6ebe:	10 92 a7 26 	sts	0x26A7, r1	; 0x8026a7 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    6ec2:	10 92 a8 26 	sts	0x26A8, r1	; 0x8026a8 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    6ec6:	e8 eb       	ldi	r30, 0xB8	; 184
    6ec8:	f6 e2       	ldi	r31, 0x26	; 38
		udd_ctrl_in_sent();
    6eca:	02 e0       	ldi	r16, 0x02	; 2
    6ecc:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    6ece:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    6ed0:	06 93       	lac	Z, r16
    6ed2:	05 c0       	rjmp	.+10     	; 0x6ede <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    6ed4:	80 38       	cpi	r24, 0x80	; 128
    6ed6:	11 f4       	brne	.+4      	; 0x6edc <__vector_126+0x1c2>
    6ed8:	ca d8       	rcall	.-3692   	; 0x606e <udd_ctrl_in_sent>
    6eda:	01 c0       	rjmp	.+2      	; 0x6ede <__vector_126+0x1c4>
    6edc:	ea d9       	rcall	.-3116   	; 0x62b2 <udd_ep_trans_complet>
    6ede:	ff 91       	pop	r31
    6ee0:	ef 91       	pop	r30
    6ee2:	df 91       	pop	r29
    6ee4:	cf 91       	pop	r28
    6ee6:	bf 91       	pop	r27
    6ee8:	af 91       	pop	r26
    6eea:	9f 91       	pop	r25
    6eec:	8f 91       	pop	r24
    6eee:	7f 91       	pop	r23
    6ef0:	6f 91       	pop	r22
    6ef2:	5f 91       	pop	r21
    6ef4:	4f 91       	pop	r20
    6ef6:	3f 91       	pop	r19
    6ef8:	2f 91       	pop	r18
    6efa:	1f 91       	pop	r17
    6efc:	0f 91       	pop	r16
    6efe:	0f 90       	pop	r0
    6f00:	0b be       	out	0x3b, r0	; 59
    6f02:	0f 90       	pop	r0
    6f04:	0f be       	out	0x3f, r0	; 63
    6f06:	0f 90       	pop	r0
    6f08:	1f 90       	pop	r1
    6f0a:	18 95       	reti

00006f0c <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    6f0c:	cf 92       	push	r12
    6f0e:	df 92       	push	r13
    6f10:	ef 92       	push	r14
    6f12:	ff 92       	push	r15
    6f14:	cf 93       	push	r28
    6f16:	df 93       	push	r29
    6f18:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    6f1a:	6b 01       	movw	r12, r22
    6f1c:	e1 2c       	mov	r14, r1
    6f1e:	f1 2c       	mov	r15, r1
    6f20:	60 e8       	ldi	r22, 0x80	; 128
    6f22:	73 ec       	ldi	r23, 0xC3	; 195
    6f24:	89 ec       	ldi	r24, 0xC9	; 201
    6f26:	91 e0       	ldi	r25, 0x01	; 1
    6f28:	a7 01       	movw	r20, r14
    6f2a:	96 01       	movw	r18, r12
    6f2c:	0e 94 7b 4a 	call	0x94f6	; 0x94f6 <__udivmodsi4>
    6f30:	ca 01       	movw	r24, r20
    6f32:	b9 01       	movw	r22, r18
    6f34:	2f ef       	ldi	r18, 0xFF	; 255
    6f36:	3f ef       	ldi	r19, 0xFF	; 255
    6f38:	40 e0       	ldi	r20, 0x00	; 0
    6f3a:	50 e0       	ldi	r21, 0x00	; 0
    6f3c:	0e 94 7b 4a 	call	0x94f6	; 0x94f6 <__udivmodsi4>
	if (smallest_div < 1) {
    6f40:	21 15       	cp	r18, r1
    6f42:	31 05       	cpc	r19, r1
    6f44:	29 f4       	brne	.+10     	; 0x6f50 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    6f46:	81 e0       	ldi	r24, 0x01	; 1
    6f48:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    6f4a:	21 e0       	ldi	r18, 0x01	; 1
    6f4c:	30 e0       	ldi	r19, 0x00	; 0
    6f4e:	2d c0       	rjmp	.+90     	; 0x6faa <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    6f50:	22 30       	cpi	r18, 0x02	; 2
    6f52:	31 05       	cpc	r19, r1
    6f54:	28 f4       	brcc	.+10     	; 0x6f60 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    6f56:	82 e0       	ldi	r24, 0x02	; 2
    6f58:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    6f5a:	22 e0       	ldi	r18, 0x02	; 2
    6f5c:	30 e0       	ldi	r19, 0x00	; 0
    6f5e:	25 c0       	rjmp	.+74     	; 0x6faa <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    6f60:	24 30       	cpi	r18, 0x04	; 4
    6f62:	31 05       	cpc	r19, r1
    6f64:	28 f4       	brcc	.+10     	; 0x6f70 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    6f66:	83 e0       	ldi	r24, 0x03	; 3
    6f68:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    6f6a:	24 e0       	ldi	r18, 0x04	; 4
    6f6c:	30 e0       	ldi	r19, 0x00	; 0
    6f6e:	1d c0       	rjmp	.+58     	; 0x6faa <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    6f70:	28 30       	cpi	r18, 0x08	; 8
    6f72:	31 05       	cpc	r19, r1
    6f74:	28 f4       	brcc	.+10     	; 0x6f80 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    6f76:	84 e0       	ldi	r24, 0x04	; 4
    6f78:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    6f7a:	28 e0       	ldi	r18, 0x08	; 8
    6f7c:	30 e0       	ldi	r19, 0x00	; 0
    6f7e:	15 c0       	rjmp	.+42     	; 0x6faa <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    6f80:	20 34       	cpi	r18, 0x40	; 64
    6f82:	31 05       	cpc	r19, r1
    6f84:	28 f4       	brcc	.+10     	; 0x6f90 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    6f86:	85 e0       	ldi	r24, 0x05	; 5
    6f88:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    6f8a:	20 e4       	ldi	r18, 0x40	; 64
    6f8c:	30 e0       	ldi	r19, 0x00	; 0
    6f8e:	0d c0       	rjmp	.+26     	; 0x6faa <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    6f90:	2f 3f       	cpi	r18, 0xFF	; 255
    6f92:	31 05       	cpc	r19, r1
    6f94:	09 f0       	breq	.+2      	; 0x6f98 <pwm_set_frequency+0x8c>
    6f96:	28 f4       	brcc	.+10     	; 0x6fa2 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    6f98:	86 e0       	ldi	r24, 0x06	; 6
    6f9a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    6f9c:	20 e0       	ldi	r18, 0x00	; 0
    6f9e:	31 e0       	ldi	r19, 0x01	; 1
    6fa0:	04 c0       	rjmp	.+8      	; 0x6faa <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    6fa2:	87 e0       	ldi	r24, 0x07	; 7
    6fa4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    6fa6:	20 e0       	ldi	r18, 0x00	; 0
    6fa8:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    6faa:	40 e0       	ldi	r20, 0x00	; 0
    6fac:	50 e0       	ldi	r21, 0x00	; 0
    6fae:	60 e8       	ldi	r22, 0x80	; 128
    6fb0:	73 ec       	ldi	r23, 0xC3	; 195
    6fb2:	89 ec       	ldi	r24, 0xC9	; 201
    6fb4:	91 e0       	ldi	r25, 0x01	; 1
    6fb6:	0e 94 7b 4a 	call	0x94f6	; 0x94f6 <__udivmodsi4>
    6fba:	ca 01       	movw	r24, r20
    6fbc:	b9 01       	movw	r22, r18
    6fbe:	a7 01       	movw	r20, r14
    6fc0:	96 01       	movw	r18, r12
    6fc2:	0e 94 7b 4a 	call	0x94f6	; 0x94f6 <__udivmodsi4>
    6fc6:	2d 83       	std	Y+5, r18	; 0x05
    6fc8:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    6fca:	24 36       	cpi	r18, 0x64	; 100
    6fcc:	31 05       	cpc	r19, r1
    6fce:	18 f4       	brcc	.+6      	; 0x6fd6 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    6fd0:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    6fd2:	1d 82       	std	Y+5, r1	; 0x05
    6fd4:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    6fd6:	df 91       	pop	r29
    6fd8:	cf 91       	pop	r28
    6fda:	ff 90       	pop	r15
    6fdc:	ef 90       	pop	r14
    6fde:	df 90       	pop	r13
    6fe0:	cf 90       	pop	r12
    6fe2:	08 95       	ret

00006fe4 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    6fe4:	0f 93       	push	r16
    6fe6:	1f 93       	push	r17
    6fe8:	cf 93       	push	r28
    6fea:	df 93       	push	r29
    6fec:	ec 01       	movw	r28, r24
    6fee:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    6ff0:	86 2f       	mov	r24, r22
    6ff2:	90 e0       	ldi	r25, 0x00	; 0
    6ff4:	87 30       	cpi	r24, 0x07	; 7
    6ff6:	91 05       	cpc	r25, r1
    6ff8:	08 f0       	brcs	.+2      	; 0x6ffc <pwm_init+0x18>
    6ffa:	8b c0       	rjmp	.+278    	; 0x7112 <pwm_init+0x12e>
    6ffc:	fc 01       	movw	r30, r24
    6ffe:	88 27       	eor	r24, r24
    7000:	eb 5f       	subi	r30, 0xFB	; 251
    7002:	fe 4f       	sbci	r31, 0xFE	; 254
    7004:	8f 4f       	sbci	r24, 0xFF	; 255
    7006:	0c 94 b9 4a 	jmp	0x9572	; 0x9572 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    700a:	80 e0       	ldi	r24, 0x00	; 0
    700c:	98 e0       	ldi	r25, 0x08	; 8
    700e:	88 83       	st	Y, r24
    7010:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    7012:	e0 e4       	ldi	r30, 0x40	; 64
    7014:	f6 e0       	ldi	r31, 0x06	; 6
    7016:	30 81       	ld	r19, Z
    7018:	81 e0       	ldi	r24, 0x01	; 1
    701a:	90 e0       	ldi	r25, 0x00	; 0
    701c:	2f ef       	ldi	r18, 0xFF	; 255
    701e:	24 0f       	add	r18, r20
    7020:	02 c0       	rjmp	.+4      	; 0x7026 <pwm_init+0x42>
    7022:	88 0f       	add	r24, r24
    7024:	99 1f       	adc	r25, r25
    7026:	2a 95       	dec	r18
    7028:	e2 f7       	brpl	.-8      	; 0x7022 <pwm_init+0x3e>
    702a:	83 2b       	or	r24, r19
    702c:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    702e:	71 c0       	rjmp	.+226    	; 0x7112 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    7030:	80 e4       	ldi	r24, 0x40	; 64
    7032:	98 e0       	ldi	r25, 0x08	; 8
    7034:	88 83       	st	Y, r24
    7036:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    7038:	e0 e4       	ldi	r30, 0x40	; 64
    703a:	f6 e0       	ldi	r31, 0x06	; 6
    703c:	30 81       	ld	r19, Z
    703e:	81 e0       	ldi	r24, 0x01	; 1
    7040:	90 e0       	ldi	r25, 0x00	; 0
    7042:	23 e0       	ldi	r18, 0x03	; 3
    7044:	24 0f       	add	r18, r20
    7046:	02 c0       	rjmp	.+4      	; 0x704c <pwm_init+0x68>
    7048:	88 0f       	add	r24, r24
    704a:	99 1f       	adc	r25, r25
    704c:	2a 95       	dec	r18
    704e:	e2 f7       	brpl	.-8      	; 0x7048 <pwm_init+0x64>
    7050:	83 2b       	or	r24, r19
    7052:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    7054:	5e c0       	rjmp	.+188    	; 0x7112 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    7056:	80 e0       	ldi	r24, 0x00	; 0
    7058:	99 e0       	ldi	r25, 0x09	; 9
    705a:	88 83       	st	Y, r24
    705c:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    705e:	e0 e6       	ldi	r30, 0x60	; 96
    7060:	f6 e0       	ldi	r31, 0x06	; 6
    7062:	30 81       	ld	r19, Z
    7064:	81 e0       	ldi	r24, 0x01	; 1
    7066:	90 e0       	ldi	r25, 0x00	; 0
    7068:	2f ef       	ldi	r18, 0xFF	; 255
    706a:	24 0f       	add	r18, r20
    706c:	02 c0       	rjmp	.+4      	; 0x7072 <pwm_init+0x8e>
    706e:	88 0f       	add	r24, r24
    7070:	99 1f       	adc	r25, r25
    7072:	2a 95       	dec	r18
    7074:	e2 f7       	brpl	.-8      	; 0x706e <pwm_init+0x8a>
    7076:	83 2b       	or	r24, r19
    7078:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    707a:	4b c0       	rjmp	.+150    	; 0x7112 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    707c:	80 e4       	ldi	r24, 0x40	; 64
    707e:	99 e0       	ldi	r25, 0x09	; 9
    7080:	88 83       	st	Y, r24
    7082:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    7084:	e0 e6       	ldi	r30, 0x60	; 96
    7086:	f6 e0       	ldi	r31, 0x06	; 6
    7088:	30 81       	ld	r19, Z
    708a:	81 e0       	ldi	r24, 0x01	; 1
    708c:	90 e0       	ldi	r25, 0x00	; 0
    708e:	23 e0       	ldi	r18, 0x03	; 3
    7090:	24 0f       	add	r18, r20
    7092:	02 c0       	rjmp	.+4      	; 0x7098 <pwm_init+0xb4>
    7094:	88 0f       	add	r24, r24
    7096:	99 1f       	adc	r25, r25
    7098:	2a 95       	dec	r18
    709a:	e2 f7       	brpl	.-8      	; 0x7094 <pwm_init+0xb0>
    709c:	83 2b       	or	r24, r19
    709e:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    70a0:	38 c0       	rjmp	.+112    	; 0x7112 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    70a2:	80 e0       	ldi	r24, 0x00	; 0
    70a4:	9a e0       	ldi	r25, 0x0A	; 10
    70a6:	88 83       	st	Y, r24
    70a8:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    70aa:	e0 e8       	ldi	r30, 0x80	; 128
    70ac:	f6 e0       	ldi	r31, 0x06	; 6
    70ae:	30 81       	ld	r19, Z
    70b0:	81 e0       	ldi	r24, 0x01	; 1
    70b2:	90 e0       	ldi	r25, 0x00	; 0
    70b4:	2f ef       	ldi	r18, 0xFF	; 255
    70b6:	24 0f       	add	r18, r20
    70b8:	02 c0       	rjmp	.+4      	; 0x70be <pwm_init+0xda>
    70ba:	88 0f       	add	r24, r24
    70bc:	99 1f       	adc	r25, r25
    70be:	2a 95       	dec	r18
    70c0:	e2 f7       	brpl	.-8      	; 0x70ba <pwm_init+0xd6>
    70c2:	83 2b       	or	r24, r19
    70c4:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    70c6:	25 c0       	rjmp	.+74     	; 0x7112 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    70c8:	80 e4       	ldi	r24, 0x40	; 64
    70ca:	9a e0       	ldi	r25, 0x0A	; 10
    70cc:	88 83       	st	Y, r24
    70ce:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    70d0:	e0 e8       	ldi	r30, 0x80	; 128
    70d2:	f6 e0       	ldi	r31, 0x06	; 6
    70d4:	30 81       	ld	r19, Z
    70d6:	81 e0       	ldi	r24, 0x01	; 1
    70d8:	90 e0       	ldi	r25, 0x00	; 0
    70da:	23 e0       	ldi	r18, 0x03	; 3
    70dc:	24 0f       	add	r18, r20
    70de:	02 c0       	rjmp	.+4      	; 0x70e4 <pwm_init+0x100>
    70e0:	88 0f       	add	r24, r24
    70e2:	99 1f       	adc	r25, r25
    70e4:	2a 95       	dec	r18
    70e6:	e2 f7       	brpl	.-8      	; 0x70e0 <pwm_init+0xfc>
    70e8:	83 2b       	or	r24, r19
    70ea:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    70ec:	12 c0       	rjmp	.+36     	; 0x7112 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    70ee:	80 e0       	ldi	r24, 0x00	; 0
    70f0:	9b e0       	ldi	r25, 0x0B	; 11
    70f2:	88 83       	st	Y, r24
    70f4:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    70f6:	e0 ea       	ldi	r30, 0xA0	; 160
    70f8:	f6 e0       	ldi	r31, 0x06	; 6
    70fa:	30 81       	ld	r19, Z
    70fc:	81 e0       	ldi	r24, 0x01	; 1
    70fe:	90 e0       	ldi	r25, 0x00	; 0
    7100:	2f ef       	ldi	r18, 0xFF	; 255
    7102:	24 0f       	add	r18, r20
    7104:	02 c0       	rjmp	.+4      	; 0x710a <pwm_init+0x126>
    7106:	88 0f       	add	r24, r24
    7108:	99 1f       	adc	r25, r25
    710a:	2a 95       	dec	r18
    710c:	e2 f7       	brpl	.-8      	; 0x7106 <pwm_init+0x122>
    710e:	83 2b       	or	r24, r19
    7110:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    7112:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    7114:	42 30       	cpi	r20, 0x02	; 2
    7116:	61 f0       	breq	.+24     	; 0x7130 <pwm_init+0x14c>
    7118:	18 f4       	brcc	.+6      	; 0x7120 <pwm_init+0x13c>
    711a:	41 30       	cpi	r20, 0x01	; 1
    711c:	31 f0       	breq	.+12     	; 0x712a <pwm_init+0x146>
    711e:	10 c0       	rjmp	.+32     	; 0x7140 <pwm_init+0x15c>
    7120:	43 30       	cpi	r20, 0x03	; 3
    7122:	49 f0       	breq	.+18     	; 0x7136 <pwm_init+0x152>
    7124:	44 30       	cpi	r20, 0x04	; 4
    7126:	51 f0       	breq	.+20     	; 0x713c <pwm_init+0x158>
    7128:	0b c0       	rjmp	.+22     	; 0x7140 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    712a:	80 e1       	ldi	r24, 0x10	; 16
    712c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    712e:	08 c0       	rjmp	.+16     	; 0x7140 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    7130:	80 e2       	ldi	r24, 0x20	; 32
    7132:	8b 83       	std	Y+3, r24	; 0x03
		break;
    7134:	05 c0       	rjmp	.+10     	; 0x7140 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    7136:	80 e4       	ldi	r24, 0x40	; 64
    7138:	8b 83       	std	Y+3, r24	; 0x03
		break;
    713a:	02 c0       	rjmp	.+4      	; 0x7140 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    713c:	80 e8       	ldi	r24, 0x80	; 128
    713e:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    7140:	88 81       	ld	r24, Y
    7142:	99 81       	ldd	r25, Y+1	; 0x01
    7144:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    7148:	e8 81       	ld	r30, Y
    714a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    714c:	81 81       	ldd	r24, Z+1	; 0x01
    714e:	88 7f       	andi	r24, 0xF8	; 248
    7150:	83 60       	ori	r24, 0x03	; 3
    7152:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    7154:	1d 82       	std	Y+5, r1	; 0x05
    7156:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    7158:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    715a:	e8 81       	ld	r30, Y
    715c:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    715e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    7160:	80 7f       	andi	r24, 0xF0	; 240
    7162:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    7164:	b8 01       	movw	r22, r16
    7166:	ce 01       	movw	r24, r28
    7168:	d1 de       	rcall	.-606    	; 0x6f0c <pwm_set_frequency>
}
    716a:	df 91       	pop	r29
    716c:	cf 91       	pop	r28
    716e:	1f 91       	pop	r17
    7170:	0f 91       	pop	r16
    7172:	08 95       	ret

00007174 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    7174:	cf 93       	push	r28
    7176:	df 93       	push	r29
    7178:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    717a:	2d 81       	ldd	r18, Y+5	; 0x05
    717c:	3e 81       	ldd	r19, Y+6	; 0x06
    717e:	a6 2f       	mov	r26, r22
    7180:	b0 e0       	ldi	r27, 0x00	; 0
    7182:	0e 94 c1 4a 	call	0x9582	; 0x9582 <__umulhisi3>
    7186:	24 e6       	ldi	r18, 0x64	; 100
    7188:	30 e0       	ldi	r19, 0x00	; 0
    718a:	40 e0       	ldi	r20, 0x00	; 0
    718c:	50 e0       	ldi	r21, 0x00	; 0
    718e:	0e 94 7b 4a 	call	0x94f6	; 0x94f6 <__udivmodsi4>
    7192:	8a 81       	ldd	r24, Y+2	; 0x02
    7194:	e8 81       	ld	r30, Y
    7196:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    7198:	e6 fd       	sbrc	r30, 6
    719a:	17 c0       	rjmp	.+46     	; 0x71ca <pwm_start+0x56>
		switch (channel_index) {
    719c:	82 30       	cpi	r24, 0x02	; 2
    719e:	61 f0       	breq	.+24     	; 0x71b8 <pwm_start+0x44>
    71a0:	18 f4       	brcc	.+6      	; 0x71a8 <pwm_start+0x34>
    71a2:	81 30       	cpi	r24, 0x01	; 1
    71a4:	31 f0       	breq	.+12     	; 0x71b2 <pwm_start+0x3e>
    71a6:	1b c0       	rjmp	.+54     	; 0x71de <pwm_start+0x6a>
    71a8:	83 30       	cpi	r24, 0x03	; 3
    71aa:	49 f0       	breq	.+18     	; 0x71be <pwm_start+0x4a>
    71ac:	84 30       	cpi	r24, 0x04	; 4
    71ae:	51 f0       	breq	.+20     	; 0x71c4 <pwm_start+0x50>
    71b0:	16 c0       	rjmp	.+44     	; 0x71de <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    71b2:	20 af       	std	Z+56, r18	; 0x38
    71b4:	31 af       	std	Z+57, r19	; 0x39
    71b6:	13 c0       	rjmp	.+38     	; 0x71de <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    71b8:	22 af       	std	Z+58, r18	; 0x3a
    71ba:	33 af       	std	Z+59, r19	; 0x3b
    71bc:	10 c0       	rjmp	.+32     	; 0x71de <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    71be:	24 af       	std	Z+60, r18	; 0x3c
    71c0:	35 af       	std	Z+61, r19	; 0x3d
    71c2:	0d c0       	rjmp	.+26     	; 0x71de <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    71c4:	26 af       	std	Z+62, r18	; 0x3e
    71c6:	37 af       	std	Z+63, r19	; 0x3f
    71c8:	0a c0       	rjmp	.+20     	; 0x71de <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    71ca:	81 30       	cpi	r24, 0x01	; 1
    71cc:	19 f0       	breq	.+6      	; 0x71d4 <pwm_start+0x60>
    71ce:	82 30       	cpi	r24, 0x02	; 2
    71d0:	21 f0       	breq	.+8      	; 0x71da <pwm_start+0x66>
    71d2:	05 c0       	rjmp	.+10     	; 0x71de <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    71d4:	20 af       	std	Z+56, r18	; 0x38
    71d6:	31 af       	std	Z+57, r19	; 0x39
    71d8:	02 c0       	rjmp	.+4      	; 0x71de <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    71da:	22 af       	std	Z+58, r18	; 0x3a
    71dc:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    71de:	8d 81       	ldd	r24, Y+5	; 0x05
    71e0:	9e 81       	ldd	r25, Y+6	; 0x06
    71e2:	e8 81       	ld	r30, Y
    71e4:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    71e6:	86 a3       	std	Z+38, r24	; 0x26
    71e8:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    71ea:	8b 81       	ldd	r24, Y+3	; 0x03
    71ec:	e8 81       	ld	r30, Y
    71ee:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    71f0:	e6 fd       	sbrc	r30, 6
    71f2:	04 c0       	rjmp	.+8      	; 0x71fc <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    71f4:	91 81       	ldd	r25, Z+1	; 0x01
    71f6:	89 2b       	or	r24, r25
    71f8:	81 83       	std	Z+1, r24	; 0x01
    71fa:	04 c0       	rjmp	.+8      	; 0x7204 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    71fc:	91 81       	ldd	r25, Z+1	; 0x01
    71fe:	80 73       	andi	r24, 0x30	; 48
    7200:	89 2b       	or	r24, r25
    7202:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    7204:	e8 81       	ld	r30, Y
    7206:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    7208:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    720a:	80 7f       	andi	r24, 0xF0	; 240
    720c:	9c 81       	ldd	r25, Y+4	; 0x04
    720e:	89 2b       	or	r24, r25
    7210:	80 83       	st	Z, r24
}
    7212:	df 91       	pop	r29
    7214:	cf 91       	pop	r28
    7216:	08 95       	ret

00007218 <__portable_avr_delay_cycles>:
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    7218:	04 c0       	rjmp	.+8      	; 0x7222 <__portable_avr_delay_cycles+0xa>
    721a:	61 50       	subi	r22, 0x01	; 1
    721c:	71 09       	sbc	r23, r1
    721e:	81 09       	sbc	r24, r1
    7220:	91 09       	sbc	r25, r1
    7222:	61 15       	cp	r22, r1
    7224:	71 05       	cpc	r23, r1
    7226:	81 05       	cpc	r24, r1
    7228:	91 05       	cpc	r25, r1
    722a:	b9 f7       	brne	.-18     	; 0x721a <__portable_avr_delay_cycles+0x2>
    722c:	08 95       	ret

0000722e <isr_rtc_alarm>:
    722e:	10 92 42 28 	sts	0x2842, r1	; 0x802842 <g_rtc_alarm>
    7232:	10 92 43 28 	sts	0x2843, r1	; 0x802843 <g_rtc_alarm+0x1>
    7236:	10 92 44 28 	sts	0x2844, r1	; 0x802844 <g_rtc_alarm+0x2>
    723a:	10 92 45 28 	sts	0x2845, r1	; 0x802845 <g_rtc_alarm+0x3>
    723e:	08 95       	ret

00007240 <isr_adc_a>:
    7240:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    7244:	4e 5b       	subi	r20, 0xBE	; 190
    7246:	51 09       	sbc	r21, r1
    7248:	60 ff       	sbrs	r22, 0
    724a:	ba c0       	rjmp	.+372    	; 0x73c0 <isr_adc_a+0x180>
    724c:	82 95       	swap	r24
    724e:	8f 70       	andi	r24, 0x0F	; 15
    7250:	81 30       	cpi	r24, 0x01	; 1
    7252:	29 f0       	breq	.+10     	; 0x725e <isr_adc_a+0x1e>
    7254:	08 f4       	brcc	.+2      	; 0x7258 <isr_adc_a+0x18>
    7256:	79 c0       	rjmp	.+242    	; 0x734a <isr_adc_a+0x10a>
    7258:	82 30       	cpi	r24, 0x02	; 2
    725a:	e1 f1       	breq	.+120    	; 0x72d4 <isr_adc_a+0x94>
    725c:	08 95       	ret
    725e:	05 2e       	mov	r0, r21
    7260:	00 0c       	add	r0, r0
    7262:	66 0b       	sbc	r22, r22
    7264:	77 0b       	sbc	r23, r23
    7266:	80 91 c7 27 	lds	r24, 0x27C7	; 0x8027c7 <g_adc_vctcxo_sum>
    726a:	90 91 c8 27 	lds	r25, 0x27C8	; 0x8027c8 <g_adc_vctcxo_sum+0x1>
    726e:	a0 91 c9 27 	lds	r26, 0x27C9	; 0x8027c9 <g_adc_vctcxo_sum+0x2>
    7272:	b0 91 ca 27 	lds	r27, 0x27CA	; 0x8027ca <g_adc_vctcxo_sum+0x3>
    7276:	48 0f       	add	r20, r24
    7278:	59 1f       	adc	r21, r25
    727a:	6a 1f       	adc	r22, r26
    727c:	7b 1f       	adc	r23, r27
    727e:	40 93 c7 27 	sts	0x27C7, r20	; 0x8027c7 <g_adc_vctcxo_sum>
    7282:	50 93 c8 27 	sts	0x27C8, r21	; 0x8027c8 <g_adc_vctcxo_sum+0x1>
    7286:	60 93 c9 27 	sts	0x27C9, r22	; 0x8027c9 <g_adc_vctcxo_sum+0x2>
    728a:	70 93 ca 27 	sts	0x27CA, r23	; 0x8027ca <g_adc_vctcxo_sum+0x3>
    728e:	80 91 c5 27 	lds	r24, 0x27C5	; 0x8027c5 <g_adc_vctcxo_cnt>
    7292:	90 91 c6 27 	lds	r25, 0x27C6	; 0x8027c6 <g_adc_vctcxo_cnt+0x1>
    7296:	01 96       	adiw	r24, 0x01	; 1
    7298:	80 93 c5 27 	sts	0x27C5, r24	; 0x8027c5 <g_adc_vctcxo_cnt>
    729c:	90 93 c6 27 	sts	0x27C6, r25	; 0x8027c6 <g_adc_vctcxo_cnt+0x1>
    72a0:	8f 3f       	cpi	r24, 0xFF	; 255
    72a2:	91 05       	cpc	r25, r1
    72a4:	09 f0       	breq	.+2      	; 0x72a8 <isr_adc_a+0x68>
    72a6:	08 f4       	brcc	.+2      	; 0x72aa <isr_adc_a+0x6a>
    72a8:	40 c1       	rjmp	.+640    	; 0x752a <isr_adc_a+0x2ea>
    72aa:	40 93 cb 27 	sts	0x27CB, r20	; 0x8027cb <g_adc_vctcxo_cur>
    72ae:	50 93 cc 27 	sts	0x27CC, r21	; 0x8027cc <g_adc_vctcxo_cur+0x1>
    72b2:	60 93 cd 27 	sts	0x27CD, r22	; 0x8027cd <g_adc_vctcxo_cur+0x2>
    72b6:	70 93 ce 27 	sts	0x27CE, r23	; 0x8027ce <g_adc_vctcxo_cur+0x3>
    72ba:	10 92 c5 27 	sts	0x27C5, r1	; 0x8027c5 <g_adc_vctcxo_cnt>
    72be:	10 92 c6 27 	sts	0x27C6, r1	; 0x8027c6 <g_adc_vctcxo_cnt+0x1>
    72c2:	10 92 c7 27 	sts	0x27C7, r1	; 0x8027c7 <g_adc_vctcxo_sum>
    72c6:	10 92 c8 27 	sts	0x27C8, r1	; 0x8027c8 <g_adc_vctcxo_sum+0x1>
    72ca:	10 92 c9 27 	sts	0x27C9, r1	; 0x8027c9 <g_adc_vctcxo_sum+0x2>
    72ce:	10 92 ca 27 	sts	0x27CA, r1	; 0x8027ca <g_adc_vctcxo_sum+0x3>
    72d2:	08 95       	ret
    72d4:	05 2e       	mov	r0, r21
    72d6:	00 0c       	add	r0, r0
    72d8:	66 0b       	sbc	r22, r22
    72da:	77 0b       	sbc	r23, r23
    72dc:	80 91 bd 27 	lds	r24, 0x27BD	; 0x8027bd <g_adc_5v0_sum>
    72e0:	90 91 be 27 	lds	r25, 0x27BE	; 0x8027be <g_adc_5v0_sum+0x1>
    72e4:	a0 91 bf 27 	lds	r26, 0x27BF	; 0x8027bf <g_adc_5v0_sum+0x2>
    72e8:	b0 91 c0 27 	lds	r27, 0x27C0	; 0x8027c0 <g_adc_5v0_sum+0x3>
    72ec:	48 0f       	add	r20, r24
    72ee:	59 1f       	adc	r21, r25
    72f0:	6a 1f       	adc	r22, r26
    72f2:	7b 1f       	adc	r23, r27
    72f4:	40 93 bd 27 	sts	0x27BD, r20	; 0x8027bd <g_adc_5v0_sum>
    72f8:	50 93 be 27 	sts	0x27BE, r21	; 0x8027be <g_adc_5v0_sum+0x1>
    72fc:	60 93 bf 27 	sts	0x27BF, r22	; 0x8027bf <g_adc_5v0_sum+0x2>
    7300:	70 93 c0 27 	sts	0x27C0, r23	; 0x8027c0 <g_adc_5v0_sum+0x3>
    7304:	80 91 bb 27 	lds	r24, 0x27BB	; 0x8027bb <g_adc_5v0_cnt>
    7308:	90 91 bc 27 	lds	r25, 0x27BC	; 0x8027bc <g_adc_5v0_cnt+0x1>
    730c:	01 96       	adiw	r24, 0x01	; 1
    730e:	80 93 bb 27 	sts	0x27BB, r24	; 0x8027bb <g_adc_5v0_cnt>
    7312:	90 93 bc 27 	sts	0x27BC, r25	; 0x8027bc <g_adc_5v0_cnt+0x1>
    7316:	8f 3f       	cpi	r24, 0xFF	; 255
    7318:	91 05       	cpc	r25, r1
    731a:	09 f0       	breq	.+2      	; 0x731e <isr_adc_a+0xde>
    731c:	08 f4       	brcc	.+2      	; 0x7320 <isr_adc_a+0xe0>
    731e:	05 c1       	rjmp	.+522    	; 0x752a <isr_adc_a+0x2ea>
    7320:	40 93 c1 27 	sts	0x27C1, r20	; 0x8027c1 <g_adc_5v0_cur>
    7324:	50 93 c2 27 	sts	0x27C2, r21	; 0x8027c2 <g_adc_5v0_cur+0x1>
    7328:	60 93 c3 27 	sts	0x27C3, r22	; 0x8027c3 <g_adc_5v0_cur+0x2>
    732c:	70 93 c4 27 	sts	0x27C4, r23	; 0x8027c4 <g_adc_5v0_cur+0x3>
    7330:	10 92 bb 27 	sts	0x27BB, r1	; 0x8027bb <g_adc_5v0_cnt>
    7334:	10 92 bc 27 	sts	0x27BC, r1	; 0x8027bc <g_adc_5v0_cnt+0x1>
    7338:	10 92 bd 27 	sts	0x27BD, r1	; 0x8027bd <g_adc_5v0_sum>
    733c:	10 92 be 27 	sts	0x27BE, r1	; 0x8027be <g_adc_5v0_sum+0x1>
    7340:	10 92 bf 27 	sts	0x27BF, r1	; 0x8027bf <g_adc_5v0_sum+0x2>
    7344:	10 92 c0 27 	sts	0x27C0, r1	; 0x8027c0 <g_adc_5v0_sum+0x3>
    7348:	08 95       	ret
    734a:	05 2e       	mov	r0, r21
    734c:	00 0c       	add	r0, r0
    734e:	66 0b       	sbc	r22, r22
    7350:	77 0b       	sbc	r23, r23
    7352:	80 91 b3 27 	lds	r24, 0x27B3	; 0x8027b3 <g_adc_vbat_sum>
    7356:	90 91 b4 27 	lds	r25, 0x27B4	; 0x8027b4 <g_adc_vbat_sum+0x1>
    735a:	a0 91 b5 27 	lds	r26, 0x27B5	; 0x8027b5 <g_adc_vbat_sum+0x2>
    735e:	b0 91 b6 27 	lds	r27, 0x27B6	; 0x8027b6 <g_adc_vbat_sum+0x3>
    7362:	48 0f       	add	r20, r24
    7364:	59 1f       	adc	r21, r25
    7366:	6a 1f       	adc	r22, r26
    7368:	7b 1f       	adc	r23, r27
    736a:	40 93 b3 27 	sts	0x27B3, r20	; 0x8027b3 <g_adc_vbat_sum>
    736e:	50 93 b4 27 	sts	0x27B4, r21	; 0x8027b4 <g_adc_vbat_sum+0x1>
    7372:	60 93 b5 27 	sts	0x27B5, r22	; 0x8027b5 <g_adc_vbat_sum+0x2>
    7376:	70 93 b6 27 	sts	0x27B6, r23	; 0x8027b6 <g_adc_vbat_sum+0x3>
    737a:	80 91 b1 27 	lds	r24, 0x27B1	; 0x8027b1 <g_adc_vbat_cnt>
    737e:	90 91 b2 27 	lds	r25, 0x27B2	; 0x8027b2 <g_adc_vbat_cnt+0x1>
    7382:	01 96       	adiw	r24, 0x01	; 1
    7384:	80 93 b1 27 	sts	0x27B1, r24	; 0x8027b1 <g_adc_vbat_cnt>
    7388:	90 93 b2 27 	sts	0x27B2, r25	; 0x8027b2 <g_adc_vbat_cnt+0x1>
    738c:	8f 3f       	cpi	r24, 0xFF	; 255
    738e:	91 05       	cpc	r25, r1
    7390:	09 f0       	breq	.+2      	; 0x7394 <isr_adc_a+0x154>
    7392:	08 f4       	brcc	.+2      	; 0x7396 <isr_adc_a+0x156>
    7394:	ca c0       	rjmp	.+404    	; 0x752a <isr_adc_a+0x2ea>
    7396:	40 93 b7 27 	sts	0x27B7, r20	; 0x8027b7 <g_adc_vbat_cur>
    739a:	50 93 b8 27 	sts	0x27B8, r21	; 0x8027b8 <g_adc_vbat_cur+0x1>
    739e:	60 93 b9 27 	sts	0x27B9, r22	; 0x8027b9 <g_adc_vbat_cur+0x2>
    73a2:	70 93 ba 27 	sts	0x27BA, r23	; 0x8027ba <g_adc_vbat_cur+0x3>
    73a6:	10 92 b1 27 	sts	0x27B1, r1	; 0x8027b1 <g_adc_vbat_cnt>
    73aa:	10 92 b2 27 	sts	0x27B2, r1	; 0x8027b2 <g_adc_vbat_cnt+0x1>
    73ae:	10 92 b3 27 	sts	0x27B3, r1	; 0x8027b3 <g_adc_vbat_sum>
    73b2:	10 92 b4 27 	sts	0x27B4, r1	; 0x8027b4 <g_adc_vbat_sum+0x1>
    73b6:	10 92 b5 27 	sts	0x27B5, r1	; 0x8027b5 <g_adc_vbat_sum+0x2>
    73ba:	10 92 b6 27 	sts	0x27B6, r1	; 0x8027b6 <g_adc_vbat_sum+0x3>
    73be:	08 95       	ret
    73c0:	61 ff       	sbrs	r22, 1
    73c2:	3b c0       	rjmp	.+118    	; 0x743a <isr_adc_a+0x1fa>
    73c4:	05 2e       	mov	r0, r21
    73c6:	00 0c       	add	r0, r0
    73c8:	66 0b       	sbc	r22, r22
    73ca:	77 0b       	sbc	r23, r23
    73cc:	80 91 a9 27 	lds	r24, 0x27A9	; 0x8027a9 <g_adc_io_adc4_sum>
    73d0:	90 91 aa 27 	lds	r25, 0x27AA	; 0x8027aa <g_adc_io_adc4_sum+0x1>
    73d4:	a0 91 ab 27 	lds	r26, 0x27AB	; 0x8027ab <g_adc_io_adc4_sum+0x2>
    73d8:	b0 91 ac 27 	lds	r27, 0x27AC	; 0x8027ac <g_adc_io_adc4_sum+0x3>
    73dc:	48 0f       	add	r20, r24
    73de:	59 1f       	adc	r21, r25
    73e0:	6a 1f       	adc	r22, r26
    73e2:	7b 1f       	adc	r23, r27
    73e4:	40 93 a9 27 	sts	0x27A9, r20	; 0x8027a9 <g_adc_io_adc4_sum>
    73e8:	50 93 aa 27 	sts	0x27AA, r21	; 0x8027aa <g_adc_io_adc4_sum+0x1>
    73ec:	60 93 ab 27 	sts	0x27AB, r22	; 0x8027ab <g_adc_io_adc4_sum+0x2>
    73f0:	70 93 ac 27 	sts	0x27AC, r23	; 0x8027ac <g_adc_io_adc4_sum+0x3>
    73f4:	80 91 a7 27 	lds	r24, 0x27A7	; 0x8027a7 <g_adc_io_adc4_cnt>
    73f8:	90 91 a8 27 	lds	r25, 0x27A8	; 0x8027a8 <g_adc_io_adc4_cnt+0x1>
    73fc:	01 96       	adiw	r24, 0x01	; 1
    73fe:	80 93 a7 27 	sts	0x27A7, r24	; 0x8027a7 <g_adc_io_adc4_cnt>
    7402:	90 93 a8 27 	sts	0x27A8, r25	; 0x8027a8 <g_adc_io_adc4_cnt+0x1>
    7406:	8f 3f       	cpi	r24, 0xFF	; 255
    7408:	91 05       	cpc	r25, r1
    740a:	09 f0       	breq	.+2      	; 0x740e <isr_adc_a+0x1ce>
    740c:	08 f4       	brcc	.+2      	; 0x7410 <isr_adc_a+0x1d0>
    740e:	8d c0       	rjmp	.+282    	; 0x752a <isr_adc_a+0x2ea>
    7410:	40 93 ad 27 	sts	0x27AD, r20	; 0x8027ad <g_adc_io_adc4_cur>
    7414:	50 93 ae 27 	sts	0x27AE, r21	; 0x8027ae <g_adc_io_adc4_cur+0x1>
    7418:	60 93 af 27 	sts	0x27AF, r22	; 0x8027af <g_adc_io_adc4_cur+0x2>
    741c:	70 93 b0 27 	sts	0x27B0, r23	; 0x8027b0 <g_adc_io_adc4_cur+0x3>
    7420:	10 92 a7 27 	sts	0x27A7, r1	; 0x8027a7 <g_adc_io_adc4_cnt>
    7424:	10 92 a8 27 	sts	0x27A8, r1	; 0x8027a8 <g_adc_io_adc4_cnt+0x1>
    7428:	10 92 a9 27 	sts	0x27A9, r1	; 0x8027a9 <g_adc_io_adc4_sum>
    742c:	10 92 aa 27 	sts	0x27AA, r1	; 0x8027aa <g_adc_io_adc4_sum+0x1>
    7430:	10 92 ab 27 	sts	0x27AB, r1	; 0x8027ab <g_adc_io_adc4_sum+0x2>
    7434:	10 92 ac 27 	sts	0x27AC, r1	; 0x8027ac <g_adc_io_adc4_sum+0x3>
    7438:	08 95       	ret
    743a:	62 ff       	sbrs	r22, 2
    743c:	3b c0       	rjmp	.+118    	; 0x74b4 <isr_adc_a+0x274>
    743e:	05 2e       	mov	r0, r21
    7440:	00 0c       	add	r0, r0
    7442:	66 0b       	sbc	r22, r22
    7444:	77 0b       	sbc	r23, r23
    7446:	80 91 9f 27 	lds	r24, 0x279F	; 0x80279f <g_adc_io_adc5_sum>
    744a:	90 91 a0 27 	lds	r25, 0x27A0	; 0x8027a0 <g_adc_io_adc5_sum+0x1>
    744e:	a0 91 a1 27 	lds	r26, 0x27A1	; 0x8027a1 <g_adc_io_adc5_sum+0x2>
    7452:	b0 91 a2 27 	lds	r27, 0x27A2	; 0x8027a2 <g_adc_io_adc5_sum+0x3>
    7456:	48 0f       	add	r20, r24
    7458:	59 1f       	adc	r21, r25
    745a:	6a 1f       	adc	r22, r26
    745c:	7b 1f       	adc	r23, r27
    745e:	40 93 9f 27 	sts	0x279F, r20	; 0x80279f <g_adc_io_adc5_sum>
    7462:	50 93 a0 27 	sts	0x27A0, r21	; 0x8027a0 <g_adc_io_adc5_sum+0x1>
    7466:	60 93 a1 27 	sts	0x27A1, r22	; 0x8027a1 <g_adc_io_adc5_sum+0x2>
    746a:	70 93 a2 27 	sts	0x27A2, r23	; 0x8027a2 <g_adc_io_adc5_sum+0x3>
    746e:	80 91 9d 27 	lds	r24, 0x279D	; 0x80279d <g_adc_io_adc5_cnt>
    7472:	90 91 9e 27 	lds	r25, 0x279E	; 0x80279e <g_adc_io_adc5_cnt+0x1>
    7476:	01 96       	adiw	r24, 0x01	; 1
    7478:	80 93 9d 27 	sts	0x279D, r24	; 0x80279d <g_adc_io_adc5_cnt>
    747c:	90 93 9e 27 	sts	0x279E, r25	; 0x80279e <g_adc_io_adc5_cnt+0x1>
    7480:	8f 3f       	cpi	r24, 0xFF	; 255
    7482:	91 05       	cpc	r25, r1
    7484:	09 f0       	breq	.+2      	; 0x7488 <isr_adc_a+0x248>
    7486:	08 f4       	brcc	.+2      	; 0x748a <isr_adc_a+0x24a>
    7488:	50 c0       	rjmp	.+160    	; 0x752a <isr_adc_a+0x2ea>
    748a:	40 93 a3 27 	sts	0x27A3, r20	; 0x8027a3 <g_adc_io_adc5_cur>
    748e:	50 93 a4 27 	sts	0x27A4, r21	; 0x8027a4 <g_adc_io_adc5_cur+0x1>
    7492:	60 93 a5 27 	sts	0x27A5, r22	; 0x8027a5 <g_adc_io_adc5_cur+0x2>
    7496:	70 93 a6 27 	sts	0x27A6, r23	; 0x8027a6 <g_adc_io_adc5_cur+0x3>
    749a:	10 92 9d 27 	sts	0x279D, r1	; 0x80279d <g_adc_io_adc5_cnt>
    749e:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <g_adc_io_adc5_cnt+0x1>
    74a2:	10 92 9f 27 	sts	0x279F, r1	; 0x80279f <g_adc_io_adc5_sum>
    74a6:	10 92 a0 27 	sts	0x27A0, r1	; 0x8027a0 <g_adc_io_adc5_sum+0x1>
    74aa:	10 92 a1 27 	sts	0x27A1, r1	; 0x8027a1 <g_adc_io_adc5_sum+0x2>
    74ae:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <g_adc_io_adc5_sum+0x3>
    74b2:	08 95       	ret
    74b4:	63 ff       	sbrs	r22, 3
    74b6:	39 c0       	rjmp	.+114    	; 0x752a <isr_adc_a+0x2ea>
    74b8:	05 2e       	mov	r0, r21
    74ba:	00 0c       	add	r0, r0
    74bc:	66 0b       	sbc	r22, r22
    74be:	77 0b       	sbc	r23, r23
    74c0:	80 91 95 27 	lds	r24, 0x2795	; 0x802795 <g_adc_silence_sum>
    74c4:	90 91 96 27 	lds	r25, 0x2796	; 0x802796 <g_adc_silence_sum+0x1>
    74c8:	a0 91 97 27 	lds	r26, 0x2797	; 0x802797 <g_adc_silence_sum+0x2>
    74cc:	b0 91 98 27 	lds	r27, 0x2798	; 0x802798 <g_adc_silence_sum+0x3>
    74d0:	48 0f       	add	r20, r24
    74d2:	59 1f       	adc	r21, r25
    74d4:	6a 1f       	adc	r22, r26
    74d6:	7b 1f       	adc	r23, r27
    74d8:	40 93 95 27 	sts	0x2795, r20	; 0x802795 <g_adc_silence_sum>
    74dc:	50 93 96 27 	sts	0x2796, r21	; 0x802796 <g_adc_silence_sum+0x1>
    74e0:	60 93 97 27 	sts	0x2797, r22	; 0x802797 <g_adc_silence_sum+0x2>
    74e4:	70 93 98 27 	sts	0x2798, r23	; 0x802798 <g_adc_silence_sum+0x3>
    74e8:	80 91 93 27 	lds	r24, 0x2793	; 0x802793 <g_adc_silence_cnt>
    74ec:	90 91 94 27 	lds	r25, 0x2794	; 0x802794 <g_adc_silence_cnt+0x1>
    74f0:	01 96       	adiw	r24, 0x01	; 1
    74f2:	80 93 93 27 	sts	0x2793, r24	; 0x802793 <g_adc_silence_cnt>
    74f6:	90 93 94 27 	sts	0x2794, r25	; 0x802794 <g_adc_silence_cnt+0x1>
    74fa:	8f 3f       	cpi	r24, 0xFF	; 255
    74fc:	91 05       	cpc	r25, r1
    74fe:	a9 f0       	breq	.+42     	; 0x752a <isr_adc_a+0x2ea>
    7500:	a0 f0       	brcs	.+40     	; 0x752a <isr_adc_a+0x2ea>
    7502:	40 93 99 27 	sts	0x2799, r20	; 0x802799 <g_adc_silence_cur>
    7506:	50 93 9a 27 	sts	0x279A, r21	; 0x80279a <g_adc_silence_cur+0x1>
    750a:	60 93 9b 27 	sts	0x279B, r22	; 0x80279b <g_adc_silence_cur+0x2>
    750e:	70 93 9c 27 	sts	0x279C, r23	; 0x80279c <g_adc_silence_cur+0x3>
    7512:	10 92 93 27 	sts	0x2793, r1	; 0x802793 <g_adc_silence_cnt>
    7516:	10 92 94 27 	sts	0x2794, r1	; 0x802794 <g_adc_silence_cnt+0x1>
    751a:	10 92 95 27 	sts	0x2795, r1	; 0x802795 <g_adc_silence_sum>
    751e:	10 92 96 27 	sts	0x2796, r1	; 0x802796 <g_adc_silence_sum+0x1>
    7522:	10 92 97 27 	sts	0x2797, r1	; 0x802797 <g_adc_silence_sum+0x2>
    7526:	10 92 98 27 	sts	0x2798, r1	; 0x802798 <g_adc_silence_sum+0x3>
    752a:	08 95       	ret

0000752c <isr_adc_b>:
    752c:	60 ff       	sbrs	r22, 0
    752e:	3b c0       	rjmp	.+118    	; 0x75a6 <isr_adc_b+0x7a>
    7530:	4e 5b       	subi	r20, 0xBE	; 190
    7532:	51 09       	sbc	r21, r1
    7534:	05 2e       	mov	r0, r21
    7536:	00 0c       	add	r0, r0
    7538:	66 0b       	sbc	r22, r22
    753a:	77 0b       	sbc	r23, r23
    753c:	80 91 8b 27 	lds	r24, 0x278B	; 0x80278b <g_adc_temp_sum>
    7540:	90 91 8c 27 	lds	r25, 0x278C	; 0x80278c <g_adc_temp_sum+0x1>
    7544:	a0 91 8d 27 	lds	r26, 0x278D	; 0x80278d <g_adc_temp_sum+0x2>
    7548:	b0 91 8e 27 	lds	r27, 0x278E	; 0x80278e <g_adc_temp_sum+0x3>
    754c:	48 0f       	add	r20, r24
    754e:	59 1f       	adc	r21, r25
    7550:	6a 1f       	adc	r22, r26
    7552:	7b 1f       	adc	r23, r27
    7554:	40 93 8b 27 	sts	0x278B, r20	; 0x80278b <g_adc_temp_sum>
    7558:	50 93 8c 27 	sts	0x278C, r21	; 0x80278c <g_adc_temp_sum+0x1>
    755c:	60 93 8d 27 	sts	0x278D, r22	; 0x80278d <g_adc_temp_sum+0x2>
    7560:	70 93 8e 27 	sts	0x278E, r23	; 0x80278e <g_adc_temp_sum+0x3>
    7564:	80 91 89 27 	lds	r24, 0x2789	; 0x802789 <g_adc_temp_cnt>
    7568:	90 91 8a 27 	lds	r25, 0x278A	; 0x80278a <g_adc_temp_cnt+0x1>
    756c:	01 96       	adiw	r24, 0x01	; 1
    756e:	80 93 89 27 	sts	0x2789, r24	; 0x802789 <g_adc_temp_cnt>
    7572:	90 93 8a 27 	sts	0x278A, r25	; 0x80278a <g_adc_temp_cnt+0x1>
    7576:	8f 3f       	cpi	r24, 0xFF	; 255
    7578:	91 05       	cpc	r25, r1
    757a:	a9 f0       	breq	.+42     	; 0x75a6 <isr_adc_b+0x7a>
    757c:	a0 f0       	brcs	.+40     	; 0x75a6 <isr_adc_b+0x7a>
    757e:	40 93 8f 27 	sts	0x278F, r20	; 0x80278f <g_adc_temp_cur>
    7582:	50 93 90 27 	sts	0x2790, r21	; 0x802790 <g_adc_temp_cur+0x1>
    7586:	60 93 91 27 	sts	0x2791, r22	; 0x802791 <g_adc_temp_cur+0x2>
    758a:	70 93 92 27 	sts	0x2792, r23	; 0x802792 <g_adc_temp_cur+0x3>
    758e:	10 92 89 27 	sts	0x2789, r1	; 0x802789 <g_adc_temp_cnt>
    7592:	10 92 8a 27 	sts	0x278A, r1	; 0x80278a <g_adc_temp_cnt+0x1>
    7596:	10 92 8b 27 	sts	0x278B, r1	; 0x80278b <g_adc_temp_sum>
    759a:	10 92 8c 27 	sts	0x278C, r1	; 0x80278c <g_adc_temp_sum+0x1>
    759e:	10 92 8d 27 	sts	0x278D, r1	; 0x80278d <g_adc_temp_sum+0x2>
    75a2:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <g_adc_temp_sum+0x3>
    75a6:	08 95       	ret

000075a8 <task_dac>:
    75a8:	cf 93       	push	r28
    75aa:	df 93       	push	r29
    75ac:	1f 92       	push	r1
    75ae:	1f 92       	push	r1
    75b0:	cd b7       	in	r28, 0x3d	; 61
    75b2:	de b7       	in	r29, 0x3e	; 62
    75b4:	8f b7       	in	r24, 0x3f	; 63
    75b6:	8a 83       	std	Y+2, r24	; 0x02
    75b8:	f8 94       	cli
    75ba:	8a 81       	ldd	r24, Y+2	; 0x02
    75bc:	8f bf       	out	0x3f, r24	; 63
    75be:	80 91 f9 26 	lds	r24, 0x26F9	; 0x8026f9 <s_dds0_freq_mHz.7503>
    75c2:	90 91 fa 26 	lds	r25, 0x26FA	; 0x8026fa <s_dds0_freq_mHz.7503+0x1>
    75c6:	a0 91 fb 26 	lds	r26, 0x26FB	; 0x8026fb <s_dds0_freq_mHz.7503+0x2>
    75ca:	b0 91 fc 26 	lds	r27, 0x26FC	; 0x8026fc <s_dds0_freq_mHz.7503+0x3>
    75ce:	80 38       	cpi	r24, 0x80	; 128
    75d0:	94 48       	sbci	r25, 0x84	; 132
    75d2:	ae 41       	sbci	r26, 0x1E	; 30
    75d4:	b1 05       	cpc	r27, r1
    75d6:	69 f4       	brne	.+26     	; 0x75f2 <task_dac+0x4a>
    75d8:	80 91 f5 26 	lds	r24, 0x26F5	; 0x8026f5 <s_dds1_freq_mHz.7504>
    75dc:	90 91 f6 26 	lds	r25, 0x26F6	; 0x8026f6 <s_dds1_freq_mHz.7504+0x1>
    75e0:	a0 91 f7 26 	lds	r26, 0x26F7	; 0x8026f7 <s_dds1_freq_mHz.7504+0x2>
    75e4:	b0 91 f8 26 	lds	r27, 0x26F8	; 0x8026f8 <s_dds1_freq_mHz.7504+0x3>
    75e8:	8a 30       	cpi	r24, 0x0A	; 10
    75ea:	99 40       	sbci	r25, 0x09	; 9
    75ec:	ad 43       	sbci	r26, 0x3D	; 61
    75ee:	b1 05       	cpc	r27, r1
    75f0:	a9 f1       	breq	.+106    	; 0x765c <task_dac+0xb4>
    75f2:	80 e8       	ldi	r24, 0x80	; 128
    75f4:	94 e8       	ldi	r25, 0x84	; 132
    75f6:	ae e1       	ldi	r26, 0x1E	; 30
    75f8:	b0 e0       	ldi	r27, 0x00	; 0
    75fa:	80 93 f9 26 	sts	0x26F9, r24	; 0x8026f9 <s_dds0_freq_mHz.7503>
    75fe:	90 93 fa 26 	sts	0x26FA, r25	; 0x8026fa <s_dds0_freq_mHz.7503+0x1>
    7602:	a0 93 fb 26 	sts	0x26FB, r26	; 0x8026fb <s_dds0_freq_mHz.7503+0x2>
    7606:	b0 93 fc 26 	sts	0x26FC, r27	; 0x8026fc <s_dds0_freq_mHz.7503+0x3>
    760a:	8a e0       	ldi	r24, 0x0A	; 10
    760c:	99 e0       	ldi	r25, 0x09	; 9
    760e:	ad e3       	ldi	r26, 0x3D	; 61
    7610:	b0 e0       	ldi	r27, 0x00	; 0
    7612:	80 93 f5 26 	sts	0x26F5, r24	; 0x8026f5 <s_dds1_freq_mHz.7504>
    7616:	90 93 f6 26 	sts	0x26F6, r25	; 0x8026f6 <s_dds1_freq_mHz.7504+0x1>
    761a:	a0 93 f7 26 	sts	0x26F7, r26	; 0x8026f7 <s_dds1_freq_mHz.7504+0x2>
    761e:	b0 93 f8 26 	sts	0x26F8, r27	; 0x8026f8 <s_dds1_freq_mHz.7504+0x3>
    7622:	8f b7       	in	r24, 0x3f	; 63
    7624:	89 83       	std	Y+1, r24	; 0x01
    7626:	f8 94       	cli
    7628:	89 81       	ldd	r24, Y+1	; 0x01
    762a:	4a ea       	ldi	r20, 0xAA	; 170
    762c:	5a ea       	ldi	r21, 0xAA	; 170
    762e:	6a ea       	ldi	r22, 0xAA	; 170
    7630:	7a e0       	ldi	r23, 0x0A	; 10
    7632:	40 93 4d 27 	sts	0x274D, r20	; 0x80274d <dds0_inc>
    7636:	50 93 4e 27 	sts	0x274E, r21	; 0x80274e <dds0_inc+0x1>
    763a:	60 93 4f 27 	sts	0x274F, r22	; 0x80274f <dds0_inc+0x2>
    763e:	70 93 50 27 	sts	0x2750, r23	; 0x802750 <dds0_inc+0x3>
    7642:	44 ed       	ldi	r20, 0xD4	; 212
    7644:	58 e5       	ldi	r21, 0x58	; 88
    7646:	65 e5       	ldi	r22, 0x55	; 85
    7648:	75 e1       	ldi	r23, 0x15	; 21
    764a:	40 93 45 27 	sts	0x2745, r20	; 0x802745 <dds1_inc>
    764e:	50 93 46 27 	sts	0x2746, r21	; 0x802746 <dds1_inc+0x1>
    7652:	60 93 47 27 	sts	0x2747, r22	; 0x802747 <dds1_inc+0x2>
    7656:	70 93 48 27 	sts	0x2748, r23	; 0x802748 <dds1_inc+0x3>
    765a:	8f bf       	out	0x3f, r24	; 63
    765c:	0f 90       	pop	r0
    765e:	0f 90       	pop	r0
    7660:	df 91       	pop	r29
    7662:	cf 91       	pop	r28
    7664:	08 95       	ret

00007666 <isr_tcc0_ovfl>:
    7666:	cf 92       	push	r12
    7668:	df 92       	push	r13
    766a:	ef 92       	push	r14
    766c:	ff 92       	push	r15
    766e:	0f 93       	push	r16
    7670:	1f 93       	push	r17
    7672:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <rtc_get_time>
    7676:	21 e0       	ldi	r18, 0x01	; 1
    7678:	20 93 0c 08 	sts	0x080C, r18	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    767c:	20 91 47 28 	lds	r18, 0x2847	; 0x802847 <g_workmode>
    7680:	22 30       	cpi	r18, 0x02	; 2
    7682:	09 f0       	breq	.+2      	; 0x7686 <isr_tcc0_ovfl+0x20>
    7684:	4a c0       	rjmp	.+148    	; 0x771a <isr_tcc0_ovfl+0xb4>
    7686:	00 91 01 27 	lds	r16, 0x2701	; 0x802701 <last_10ms.7388>
    768a:	10 91 02 27 	lds	r17, 0x2702	; 0x802702 <last_10ms.7388+0x1>
    768e:	20 91 03 27 	lds	r18, 0x2703	; 0x802703 <last_10ms.7388+0x2>
    7692:	30 91 04 27 	lds	r19, 0x2704	; 0x802704 <last_10ms.7388+0x3>
    7696:	6b 01       	movw	r12, r22
    7698:	7c 01       	movw	r14, r24
    769a:	c0 1a       	sub	r12, r16
    769c:	d1 0a       	sbc	r13, r17
    769e:	e2 0a       	sbc	r14, r18
    76a0:	f3 0a       	sbc	r15, r19
    76a2:	4a e0       	ldi	r20, 0x0A	; 10
    76a4:	c4 16       	cp	r12, r20
    76a6:	d1 04       	cpc	r13, r1
    76a8:	e1 04       	cpc	r14, r1
    76aa:	f1 04       	cpc	r15, r1
    76ac:	28 f4       	brcc	.+10     	; 0x76b8 <isr_tcc0_ovfl+0x52>
    76ae:	60 17       	cp	r22, r16
    76b0:	71 07       	cpc	r23, r17
    76b2:	82 07       	cpc	r24, r18
    76b4:	93 07       	cpc	r25, r19
    76b6:	58 f4       	brcc	.+22     	; 0x76ce <isr_tcc0_ovfl+0x68>
    76b8:	60 93 01 27 	sts	0x2701, r22	; 0x802701 <last_10ms.7388>
    76bc:	70 93 02 27 	sts	0x2702, r23	; 0x802702 <last_10ms.7388+0x1>
    76c0:	80 93 03 27 	sts	0x2703, r24	; 0x802703 <last_10ms.7388+0x2>
    76c4:	90 93 04 27 	sts	0x2704, r25	; 0x802704 <last_10ms.7388+0x3>
    76c8:	0e 94 c6 1c 	call	0x398c	; 0x398c <isr_10ms_twi1_onboard>
    76cc:	26 c0       	rjmp	.+76     	; 0x771a <isr_tcc0_ovfl+0xb4>
    76ce:	00 91 fd 26 	lds	r16, 0x26FD	; 0x8026fd <last_500ms.7389>
    76d2:	10 91 fe 26 	lds	r17, 0x26FE	; 0x8026fe <last_500ms.7389+0x1>
    76d6:	20 91 ff 26 	lds	r18, 0x26FF	; 0x8026ff <last_500ms.7389+0x2>
    76da:	30 91 00 27 	lds	r19, 0x2700	; 0x802700 <last_500ms.7389+0x3>
    76de:	6b 01       	movw	r12, r22
    76e0:	7c 01       	movw	r14, r24
    76e2:	c0 1a       	sub	r12, r16
    76e4:	d1 0a       	sbc	r13, r17
    76e6:	e2 0a       	sbc	r14, r18
    76e8:	f3 0a       	sbc	r15, r19
    76ea:	c1 14       	cp	r12, r1
    76ec:	42 e0       	ldi	r20, 0x02	; 2
    76ee:	d4 06       	cpc	r13, r20
    76f0:	e1 04       	cpc	r14, r1
    76f2:	f1 04       	cpc	r15, r1
    76f4:	28 f4       	brcc	.+10     	; 0x7700 <isr_tcc0_ovfl+0x9a>
    76f6:	60 17       	cp	r22, r16
    76f8:	71 07       	cpc	r23, r17
    76fa:	82 07       	cpc	r24, r18
    76fc:	93 07       	cpc	r25, r19
    76fe:	58 f4       	brcc	.+22     	; 0x7716 <isr_tcc0_ovfl+0xb0>
    7700:	60 93 fd 26 	sts	0x26FD, r22	; 0x8026fd <last_500ms.7389>
    7704:	70 93 fe 26 	sts	0x26FE, r23	; 0x8026fe <last_500ms.7389+0x1>
    7708:	80 93 ff 26 	sts	0x26FF, r24	; 0x8026ff <last_500ms.7389+0x2>
    770c:	90 93 00 27 	sts	0x2700, r25	; 0x802700 <last_500ms.7389+0x3>
    7710:	0e 94 c7 1c 	call	0x398e	; 0x398e <isr_500ms_twi1_onboard>
    7714:	02 c0       	rjmp	.+4      	; 0x771a <isr_tcc0_ovfl+0xb4>
    7716:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <isr_sparetime_twi1_onboard>
    771a:	1f 91       	pop	r17
    771c:	0f 91       	pop	r16
    771e:	ff 90       	pop	r15
    7720:	ef 90       	pop	r14
    7722:	df 90       	pop	r13
    7724:	cf 90       	pop	r12
    7726:	08 95       	ret

00007728 <calc_next_frame>:
    7728:	8f 92       	push	r8
    772a:	9f 92       	push	r9
    772c:	af 92       	push	r10
    772e:	bf 92       	push	r11
    7730:	cf 92       	push	r12
    7732:	df 92       	push	r13
    7734:	ef 92       	push	r14
    7736:	ff 92       	push	r15
    7738:	0f 93       	push	r16
    773a:	1f 93       	push	r17
    773c:	cf 93       	push	r28
    773e:	df 93       	push	r29
    7740:	6b 01       	movw	r12, r22
    7742:	5a 01       	movw	r10, r20
    7744:	79 01       	movw	r14, r18
    7746:	48 01       	movw	r8, r16
    7748:	ec 01       	movw	r28, r24
    774a:	8c 01       	movw	r16, r24
    774c:	00 5e       	subi	r16, 0xE0	; 224
    774e:	1f 4f       	sbci	r17, 0xFF	; 255
    7750:	f6 01       	movw	r30, r12
    7752:	82 81       	ldd	r24, Z+2	; 0x02
    7754:	93 81       	ldd	r25, Z+3	; 0x03
    7756:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <get_interpolated_sine>
    775a:	88 83       	st	Y, r24
    775c:	99 83       	std	Y+1, r25	; 0x01
    775e:	f7 01       	movw	r30, r14
    7760:	82 81       	ldd	r24, Z+2	; 0x02
    7762:	93 81       	ldd	r25, Z+3	; 0x03
    7764:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <get_interpolated_sine>
    7768:	8a 83       	std	Y+2, r24	; 0x02
    776a:	9b 83       	std	Y+3, r25	; 0x03
    776c:	f6 01       	movw	r30, r12
    776e:	40 81       	ld	r20, Z
    7770:	51 81       	ldd	r21, Z+1	; 0x01
    7772:	62 81       	ldd	r22, Z+2	; 0x02
    7774:	73 81       	ldd	r23, Z+3	; 0x03
    7776:	f5 01       	movw	r30, r10
    7778:	80 81       	ld	r24, Z
    777a:	91 81       	ldd	r25, Z+1	; 0x01
    777c:	a2 81       	ldd	r26, Z+2	; 0x02
    777e:	b3 81       	ldd	r27, Z+3	; 0x03
    7780:	84 0f       	add	r24, r20
    7782:	95 1f       	adc	r25, r21
    7784:	a6 1f       	adc	r26, r22
    7786:	b7 1f       	adc	r27, r23
    7788:	f6 01       	movw	r30, r12
    778a:	80 83       	st	Z, r24
    778c:	91 83       	std	Z+1, r25	; 0x01
    778e:	a2 83       	std	Z+2, r26	; 0x02
    7790:	b3 83       	std	Z+3, r27	; 0x03
    7792:	f7 01       	movw	r30, r14
    7794:	40 81       	ld	r20, Z
    7796:	51 81       	ldd	r21, Z+1	; 0x01
    7798:	62 81       	ldd	r22, Z+2	; 0x02
    779a:	73 81       	ldd	r23, Z+3	; 0x03
    779c:	f4 01       	movw	r30, r8
    779e:	80 81       	ld	r24, Z
    77a0:	91 81       	ldd	r25, Z+1	; 0x01
    77a2:	a2 81       	ldd	r26, Z+2	; 0x02
    77a4:	b3 81       	ldd	r27, Z+3	; 0x03
    77a6:	84 0f       	add	r24, r20
    77a8:	95 1f       	adc	r25, r21
    77aa:	a6 1f       	adc	r26, r22
    77ac:	b7 1f       	adc	r27, r23
    77ae:	f7 01       	movw	r30, r14
    77b0:	80 83       	st	Z, r24
    77b2:	91 83       	std	Z+1, r25	; 0x01
    77b4:	a2 83       	std	Z+2, r26	; 0x02
    77b6:	b3 83       	std	Z+3, r27	; 0x03
    77b8:	24 96       	adiw	r28, 0x04	; 4
    77ba:	c0 17       	cp	r28, r16
    77bc:	d1 07       	cpc	r29, r17
    77be:	41 f6       	brne	.-112    	; 0x7750 <calc_next_frame+0x28>
    77c0:	df 91       	pop	r29
    77c2:	cf 91       	pop	r28
    77c4:	1f 91       	pop	r17
    77c6:	0f 91       	pop	r16
    77c8:	ff 90       	pop	r15
    77ca:	ef 90       	pop	r14
    77cc:	df 90       	pop	r13
    77ce:	cf 90       	pop	r12
    77d0:	bf 90       	pop	r11
    77d2:	af 90       	pop	r10
    77d4:	9f 90       	pop	r9
    77d6:	8f 90       	pop	r8
    77d8:	08 95       	ret

000077da <isr_dma_dac_ch0_B>:
    77da:	0f 93       	push	r16
    77dc:	1f 93       	push	r17
    77de:	cf 93       	push	r28
    77e0:	df 93       	push	r29
    77e2:	1f 92       	push	r1
    77e4:	cd b7       	in	r28, 0x3d	; 61
    77e6:	de b7       	in	r29, 0x3e	; 62
    77e8:	8f b7       	in	r24, 0x3f	; 63
    77ea:	89 83       	std	Y+1, r24	; 0x01
    77ec:	f8 94       	cli
    77ee:	99 81       	ldd	r25, Y+1	; 0x01
    77f0:	e0 e1       	ldi	r30, 0x10	; 16
    77f2:	f1 e0       	ldi	r31, 0x01	; 1
    77f4:	80 81       	ld	r24, Z
    77f6:	80 68       	ori	r24, 0x80	; 128
    77f8:	80 83       	st	Z, r24
    77fa:	9f bf       	out	0x3f, r25	; 63
    77fc:	78 94       	sei
    77fe:	05 e4       	ldi	r16, 0x45	; 69
    7800:	17 e2       	ldi	r17, 0x27	; 39
    7802:	27 e0       	ldi	r18, 0x07	; 7
    7804:	30 e2       	ldi	r19, 0x20	; 32
    7806:	4d e4       	ldi	r20, 0x4D	; 77
    7808:	57 e2       	ldi	r21, 0x27	; 39
    780a:	69 e4       	ldi	r22, 0x49	; 73
    780c:	77 e2       	ldi	r23, 0x27	; 39
    780e:	85 e2       	ldi	r24, 0x25	; 37
    7810:	97 e2       	ldi	r25, 0x27	; 39
    7812:	8a df       	rcall	.-236    	; 0x7728 <calc_next_frame>
    7814:	0f 90       	pop	r0
    7816:	df 91       	pop	r29
    7818:	cf 91       	pop	r28
    781a:	1f 91       	pop	r17
    781c:	0f 91       	pop	r16
    781e:	08 95       	ret

00007820 <isr_dma_dac_ch0_A>:
    7820:	0f 93       	push	r16
    7822:	1f 93       	push	r17
    7824:	cf 93       	push	r28
    7826:	df 93       	push	r29
    7828:	1f 92       	push	r1
    782a:	cd b7       	in	r28, 0x3d	; 61
    782c:	de b7       	in	r29, 0x3e	; 62
    782e:	8f b7       	in	r24, 0x3f	; 63
    7830:	89 83       	std	Y+1, r24	; 0x01
    7832:	f8 94       	cli
    7834:	99 81       	ldd	r25, Y+1	; 0x01
    7836:	e0 e2       	ldi	r30, 0x20	; 32
    7838:	f1 e0       	ldi	r31, 0x01	; 1
    783a:	80 81       	ld	r24, Z
    783c:	80 68       	ori	r24, 0x80	; 128
    783e:	80 83       	st	Z, r24
    7840:	9f bf       	out	0x3f, r25	; 63
    7842:	78 94       	sei
    7844:	05 e4       	ldi	r16, 0x45	; 69
    7846:	17 e2       	ldi	r17, 0x27	; 39
    7848:	27 e0       	ldi	r18, 0x07	; 7
    784a:	30 e2       	ldi	r19, 0x20	; 32
    784c:	4d e4       	ldi	r20, 0x4D	; 77
    784e:	57 e2       	ldi	r21, 0x27	; 39
    7850:	69 e4       	ldi	r22, 0x49	; 73
    7852:	77 e2       	ldi	r23, 0x27	; 39
    7854:	85 e0       	ldi	r24, 0x05	; 5
    7856:	97 e2       	ldi	r25, 0x27	; 39
    7858:	67 df       	rcall	.-306    	; 0x7728 <calc_next_frame>
    785a:	0f 90       	pop	r0
    785c:	df 91       	pop	r29
    785e:	cf 91       	pop	r28
    7860:	1f 91       	pop	r17
    7862:	0f 91       	pop	r16
    7864:	08 95       	ret

00007866 <usb_callback_suspend_action>:
    7866:	08 95       	ret

00007868 <usb_callback_resume_action>:
    7868:	08 95       	ret

0000786a <usb_callback_remotewakeup_enable>:
    786a:	08 95       	ret

0000786c <usb_callback_remotewakeup_disable>:
    786c:	08 95       	ret

0000786e <usb_callback_cdc_enable>:

bool usb_callback_cdc_enable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = true;
    786e:	81 e0       	ldi	r24, 0x01	; 1
    7870:	80 93 46 28 	sts	0x2846, r24	; 0x802846 <usb_cdc_transfers_autorized>
	return true;
}
    7874:	08 95       	ret

00007876 <usb_callback_cdc_disable>:

void usb_callback_cdc_disable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = false;
    7876:	10 92 46 28 	sts	0x2846, r1	; 0x802846 <usb_cdc_transfers_autorized>
    787a:	08 95       	ret

0000787c <usb_callback_config>:
}

void usb_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    787c:	08 95       	ret

0000787e <usb_callback_cdc_set_dtr>:

}

void usb_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
    787e:	08 95       	ret

00007880 <usb_callback_cdc_set_rts>:

}

void usb_callback_cdc_set_rts(uint8_t port, bool b_enable)
{
    7880:	08 95       	ret

00007882 <usb_callback_rx_notify>:

}

void usb_callback_rx_notify(uint8_t port)
{
    7882:	08 95       	ret

00007884 <usb_callback_tx_empty_notify>:

}

void usb_callback_tx_empty_notify(uint8_t port)
{
    7884:	08 95       	ret

00007886 <main>:
	}
}


int main(void)
{
    7886:	2f 92       	push	r2
    7888:	3f 92       	push	r3
    788a:	4f 92       	push	r4
    788c:	5f 92       	push	r5
    788e:	6f 92       	push	r6
    7890:	7f 92       	push	r7
    7892:	8f 92       	push	r8
    7894:	9f 92       	push	r9
    7896:	af 92       	push	r10
    7898:	bf 92       	push	r11
    789a:	cf 92       	push	r12
    789c:	df 92       	push	r13
    789e:	ef 92       	push	r14
    78a0:	ff 92       	push	r15
    78a2:	0f 93       	push	r16
    78a4:	1f 93       	push	r17
    78a6:	cf 93       	push	r28
    78a8:	df 93       	push	r29
    78aa:	cd b7       	in	r28, 0x3d	; 61
    78ac:	de b7       	in	r29, 0x3e	; 62
    78ae:	a9 97       	sbiw	r28, 0x29	; 41
    78b0:	cd bf       	out	0x3d, r28	; 61
    78b2:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	/* Init of interrupt system */
	g_workmode = WORKMODE_INIT;
    78b4:	22 24       	eor	r2, r2
    78b6:	23 94       	inc	r2
    78b8:	20 92 47 28 	sts	0x2847, r2	; 0x802847 <g_workmode>
	irq_initialize_vectors();
    78bc:	e0 ea       	ldi	r30, 0xA0	; 160
    78be:	f0 e0       	ldi	r31, 0x00	; 0
    78c0:	0f 2e       	mov	r0, r31
    78c2:	f7 e0       	ldi	r31, 0x07	; 7
    78c4:	df 2e       	mov	r13, r31
    78c6:	f0 2d       	mov	r31, r0
    78c8:	d2 82       	std	Z+2, r13	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    78ca:	d2 82       	std	Z+2, r13	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    78cc:	82 81       	ldd	r24, Z+2	; 0x02
    78ce:	8f 77       	andi	r24, 0x7F	; 127
    78d0:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);

	sysclk_init();		// Clock configuration set-up
    78d2:	11 82       	std	Z+1, r1	; 0x01
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    78d4:	40 d5       	rcall	.+2688   	; 0x8356 <sysclk_init>
    78d6:	ef e9       	ldi	r30, 0x9F	; 159
    78d8:	f9 e2       	ldi	r31, 0x29	; 41
    78da:	10 82       	st	Z, r1
    78dc:	11 82       	std	Z+1, r1	; 0x01
    78de:	12 82       	std	Z+2, r1	; 0x02
    78e0:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    78e2:	14 82       	std	Z+4, r1	; 0x04

	sleepmgr_init();	// Unlocks all sleep mode levels

	rtc_init();
    78e4:	25 82       	std	Z+5, r2	; 0x05
    78e6:	0e 94 04 16 	call	0x2c08	; 0x2c08 <rtc_init>
}


static void rtc_start(void)
{
	rtc_set_callback(isr_rtc_alarm);
    78ea:	87 e1       	ldi	r24, 0x17	; 23
    78ec:	99 e3       	ldi	r25, 0x39	; 57
    78ee:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    78f2:	62 e0       	ldi	r22, 0x02	; 2
    78f4:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event channels 0, 1, 2, 3 */
	EVSYS.CH0MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH0
    78f6:	b0 d5       	rcall	.+2912   	; 0x8458 <sysclk_enable_module>
    78f8:	e0 e8       	ldi	r30, 0x80	; 128
    78fa:	f1 e0       	ldi	r31, 0x01	; 1
    78fc:	86 ec       	ldi	r24, 0xC6	; 198
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH0 no digital filtering
    78fe:	80 83       	st	Z, r24
	EVSYS.CH1MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH1
    7900:	10 86       	std	Z+8, r1	; 0x08
	EVSYS.CH1CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH1 no digital filtering
    7902:	81 83       	std	Z+1, r24	; 0x01
	EVSYS.CH2MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH2
    7904:	11 86       	std	Z+9, r1	; 0x09
	EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH2 no digital filtering
    7906:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH3MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH3
    7908:	12 86       	std	Z+10, r1	; 0x0a
	EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH3 no digital filtering
    790a:	83 83       	std	Z+3, r24	; 0x03

	/* DAC - event 4 */
	EVSYS.CH4MUX  = EVSYS_CHMUX_TCE1_OVF_gc;									// TCE1 overflow goes to EVSYS CH4
    790c:	13 86       	std	Z+11, r1	; 0x0b
    790e:	88 ee       	ldi	r24, 0xE8	; 232
	EVSYS.CH4CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH4 no digital filtering
    7910:	84 83       	std	Z+4, r24	; 0x04

static void tc_init(void)
{
	/* TCC0: VCTCXO PWM signal generation and ADCA & ADCB */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 2048);						// Init PWM structure and enable timer - running with 2048 Hz --> 2 Hz averaged data
    7912:	14 86       	std	Z+12, r1	; 0x0c
    7914:	20 e0       	ldi	r18, 0x00	; 0
    7916:	38 e0       	ldi	r19, 0x08	; 8
    7918:	43 e0       	ldi	r20, 0x03	; 3
    791a:	60 e0       	ldi	r22, 0x00	; 0
    791c:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM here. Percentage with 1% granularity is to coarse, use driver access instead
    791e:	01 96       	adiw	r24, 0x01	; 1
    7920:	61 db       	rcall	.-2366   	; 0x6fe4 <pwm_init>
    7922:	6d e2       	ldi	r22, 0x2D	; 45
    7924:	ce 01       	movw	r24, r28
	tc_write_cc_buffer(&TCC0, TC_CCC, (uint16_t) (0.5f + pwm_vctcxo_cfg.period * C_VCTCXO_DEFAULT_VOLTS / C_VCTCXO_PWM_HI_VOLTS));	// Initial value for VCTCXO
    7926:	01 96       	adiw	r24, 0x01	; 1
    7928:	25 dc       	rcall	.-1974   	; 0x7174 <pwm_start>
    792a:	6e 81       	ldd	r22, Y+6	; 0x06
    792c:	7f 81       	ldd	r23, Y+7	; 0x07
    792e:	80 e0       	ldi	r24, 0x00	; 0
    7930:	90 e0       	ldi	r25, 0x00	; 0
    7932:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <__floatunsisf>
    7936:	20 e0       	ldi	r18, 0x00	; 0
    7938:	30 e0       	ldi	r19, 0x00	; 0
    793a:	40 ec       	ldi	r20, 0xC0	; 192
    793c:	5f e3       	ldi	r21, 0x3F	; 63
    793e:	0e 94 00 4d 	call	0x9a00	; 0x9a00 <__mulsf3>
    7942:	27 e2       	ldi	r18, 0x27	; 39
    7944:	31 e3       	ldi	r19, 0x31	; 49
    7946:	40 e5       	ldi	r20, 0x50	; 80
    7948:	50 e4       	ldi	r21, 0x40	; 64
    794a:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <__divsf3>
    794e:	20 e0       	ldi	r18, 0x00	; 0
    7950:	30 e0       	ldi	r19, 0x00	; 0
    7952:	40 e0       	ldi	r20, 0x00	; 0
    7954:	5f e3       	ldi	r21, 0x3F	; 63
    7956:	0e 94 75 4b 	call	0x96ea	; 0x96ea <__addsf3>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    795a:	0e 94 46 4c 	call	0x988c	; 0x988c <__fixunssfsi>
    795e:	00 e0       	ldi	r16, 0x00	; 0
    7960:	18 e0       	ldi	r17, 0x08	; 8
    7962:	d8 01       	movw	r26, r16
    7964:	dc 96       	adiw	r26, 0x3c	; 60
    7966:	6d 93       	st	X+, r22

	/* TCE1: DAC clock */
	tc_enable(&TCE1);
    7968:	7c 93       	st	X, r23
    796a:	dd 97       	sbiw	r26, 0x3d	; 61
    796c:	80 e4       	ldi	r24, 0x40	; 64
    796e:	9a e0       	ldi	r25, 0x0A	; 10
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    7970:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <tc_enable>
    7974:	0f 2e       	mov	r0, r31
    7976:	f0 e4       	ldi	r31, 0x40	; 64
    7978:	ef 2e       	mov	r14, r31
    797a:	fa e0       	ldi	r31, 0x0A	; 10
    797c:	ff 2e       	mov	r15, r31
    797e:	f0 2d       	mov	r31, r0
    7980:	f7 01       	movw	r30, r14
    7982:	81 81       	ldd	r24, Z+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    7984:	88 7f       	andi	r24, 0xF8	; 248
    7986:	81 83       	std	Z+1, r24	; 0x01
    7988:	80 e7       	ldi	r24, 0x70	; 112
    798a:	92 e0       	ldi	r25, 0x02	; 2


static void adc_init(void)
{
	/* Disable digital circuits of ADC pins */
	PORTA_PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    798c:	86 a3       	std	Z+38, r24	; 0x26
    798e:	97 a3       	std	Z+39, r25	; 0x27
    7990:	e0 e1       	ldi	r30, 0x10	; 16
    7992:	f6 e0       	ldi	r31, 0x06	; 6
    7994:	80 81       	ld	r24, Z
	PORTA_PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7996:	87 60       	ori	r24, 0x07	; 7
    7998:	80 83       	st	Z, r24
    799a:	e1 e1       	ldi	r30, 0x11	; 17
    799c:	f6 e0       	ldi	r31, 0x06	; 6
    799e:	80 81       	ld	r24, Z
	PORTA_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    79a0:	87 60       	ori	r24, 0x07	; 7
    79a2:	80 83       	st	Z, r24
    79a4:	e2 e1       	ldi	r30, 0x12	; 18
    79a6:	f6 e0       	ldi	r31, 0x06	; 6
    79a8:	80 81       	ld	r24, Z
	PORTA_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    79aa:	87 60       	ori	r24, 0x07	; 7
    79ac:	80 83       	st	Z, r24
    79ae:	e3 e1       	ldi	r30, 0x13	; 19
    79b0:	f6 e0       	ldi	r31, 0x06	; 6
    79b2:	80 81       	ld	r24, Z
	PORTA_PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    79b4:	87 60       	ori	r24, 0x07	; 7
    79b6:	80 83       	st	Z, r24
    79b8:	e4 e1       	ldi	r30, 0x14	; 20
    79ba:	f6 e0       	ldi	r31, 0x06	; 6
    79bc:	80 81       	ld	r24, Z
	PORTA_PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    79be:	87 60       	ori	r24, 0x07	; 7
    79c0:	80 83       	st	Z, r24
    79c2:	e5 e1       	ldi	r30, 0x15	; 21
    79c4:	f6 e0       	ldi	r31, 0x06	; 6
    79c6:	80 81       	ld	r24, Z
	PORTB_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    79c8:	87 60       	ori	r24, 0x07	; 7
    79ca:	80 83       	st	Z, r24
    79cc:	e2 e3       	ldi	r30, 0x32	; 50
    79ce:	f6 e0       	ldi	r31, 0x06	; 6
    79d0:	80 81       	ld	r24, Z
	PORTB_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    79d2:	87 60       	ori	r24, 0x07	; 7
    79d4:	80 83       	st	Z, r24
    79d6:	e3 e3       	ldi	r30, 0x33	; 51
    79d8:	f6 e0       	ldi	r31, 0x06	; 6
    79da:	80 81       	ld	r24, Z

	/* Prepare the structures */
	adc_read_configuration(&ADC_VCTCXO_5V0_VBAT,							&g_adc_a_conf);
    79dc:	87 60       	ori	r24, 0x07	; 7
    79de:	80 83       	st	Z, r24
    79e0:	6a ee       	ldi	r22, 0xEA	; 234
    79e2:	77 e2       	ldi	r23, 0x27	; 39
    79e4:	80 e0       	ldi	r24, 0x00	; 0
    79e6:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    79e8:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <adc_read_configuration>
    79ec:	46 ee       	ldi	r20, 0xE6	; 230
    79ee:	57 e2       	ldi	r21, 0x27	; 39
    79f0:	61 e0       	ldi	r22, 0x01	; 1
    79f2:	80 e0       	ldi	r24, 0x00	; 0
    79f4:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    79f6:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <adcch_read_configuration>
    79fa:	42 ee       	ldi	r20, 0xE2	; 226
    79fc:	57 e2       	ldi	r21, 0x27	; 39
    79fe:	62 e0       	ldi	r22, 0x02	; 2
    7a00:	80 e0       	ldi	r24, 0x00	; 0
    7a02:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    7a04:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <adcch_read_configuration>
    7a08:	4e ed       	ldi	r20, 0xDE	; 222
    7a0a:	57 e2       	ldi	r21, 0x27	; 39
    7a0c:	64 e0       	ldi	r22, 0x04	; 4
    7a0e:	80 e0       	ldi	r24, 0x00	; 0
    7a10:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_SILENCE, ADC_SILENCE_CH,					&g_adcch_silence_conf);
    7a12:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <adcch_read_configuration>
    7a16:	4a ed       	ldi	r20, 0xDA	; 218
    7a18:	57 e2       	ldi	r21, 0x27	; 39
    7a1a:	68 e0       	ldi	r22, 0x08	; 8
    7a1c:	80 e0       	ldi	r24, 0x00	; 0
    7a1e:	92 e0       	ldi	r25, 0x02	; 2
	adc_read_configuration(&ADC_TEMP,										&g_adc_b_conf);
    7a20:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <adcch_read_configuration>
    7a24:	63 ed       	ldi	r22, 0xD3	; 211
    7a26:	77 e2       	ldi	r23, 0x27	; 39
    7a28:	80 e4       	ldi	r24, 0x40	; 64
    7a2a:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    7a2c:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <adc_read_configuration>
    7a30:	4f ec       	ldi	r20, 0xCF	; 207
    7a32:	57 e2       	ldi	r21, 0x27	; 39
    7a34:	61 e0       	ldi	r22, 0x01	; 1
    7a36:	80 e4       	ldi	r24, 0x40	; 64
    7a38:	92 e0       	ldi	r25, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    7a3a:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <adcch_read_configuration>
    7a3e:	aa ee       	ldi	r26, 0xEA	; 234
    7a40:	b7 e2       	ldi	r27, 0x27	; 39
    7a42:	83 e0       	ldi	r24, 0x03	; 3
    7a44:	14 96       	adiw	r26, 0x04	; 4
    7a46:	8c 93       	st	X, r24
    7a48:	14 97       	sbiw	r26, 0x04	; 4
    7a4a:	63 ed       	ldi	r22, 0xD3	; 211
    7a4c:	77 e2       	ldi	r23, 0x27	; 39
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_disable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl &= ~int_inp;
    7a4e:	fb 01       	movw	r30, r22
    7a50:	d4 82       	std	Z+4, r13	; 0x04
    7a52:	12 96       	adiw	r26, 0x02	; 2
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    7a54:	3c 91       	ld	r19, X
 * \note Not all device families feature this setting.
 */
static inline void adc_set_current_limit(struct adc_config *conf,
		enum adc_current_limit currlimit)
{
	conf->ctrlb &= ~ADC_CURRLIMIT_gm;
    7a56:	12 97       	sbiw	r26, 0x02	; 2
    7a58:	22 81       	ldd	r18, Z+2	; 0x02
    7a5a:	11 96       	adiw	r26, 0x01	; 1
    7a5c:	9c 91       	ld	r25, X
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    7a5e:	11 97       	sbiw	r26, 0x01	; 1
    7a60:	81 81       	ldd	r24, Z+1	; 0x01
    7a62:	0f 2e       	mov	r0, r31
    7a64:	f6 ee       	ldi	r31, 0xE6	; 230
    7a66:	cf 2e       	mov	r12, r31
    7a68:	f7 e2       	ldi	r31, 0x27	; 39
    7a6a:	df 2e       	mov	r13, r31
    7a6c:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    7a6e:	f6 01       	movw	r30, r12
    7a70:	20 82       	st	Z, r2
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    7a72:	48 e0       	ldi	r20, 0x08	; 8
    7a74:	41 83       	std	Z+1, r20	; 0x01
    7a76:	0f 2e       	mov	r0, r31
    7a78:	f2 ee       	ldi	r31, 0xE2	; 226
    7a7a:	8f 2e       	mov	r8, r31
    7a7c:	f7 e2       	ldi	r31, 0x27	; 39
    7a7e:	9f 2e       	mov	r9, r31
    7a80:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    7a82:	f4 01       	movw	r30, r8
    7a84:	20 82       	st	Z, r2
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    7a86:	50 e2       	ldi	r21, 0x20	; 32
    7a88:	51 83       	std	Z+1, r21	; 0x01
    7a8a:	0f 2e       	mov	r0, r31
    7a8c:	fe ed       	ldi	r31, 0xDE	; 222
    7a8e:	af 2e       	mov	r10, r31
    7a90:	f7 e2       	ldi	r31, 0x27	; 39
    7a92:	bf 2e       	mov	r11, r31
    7a94:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    7a96:	f5 01       	movw	r30, r10
    7a98:	20 82       	st	Z, r2
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    7a9a:	58 e2       	ldi	r21, 0x28	; 40
    7a9c:	51 83       	std	Z+1, r21	; 0x01
    7a9e:	0f 2e       	mov	r0, r31
    7aa0:	fa ed       	ldi	r31, 0xDA	; 218
    7aa2:	6f 2e       	mov	r6, r31
    7aa4:	f7 e2       	ldi	r31, 0x27	; 39
    7aa6:	7f 2e       	mov	r7, r31
    7aa8:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    7aaa:	f3 01       	movw	r30, r6
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    7aac:	10 82       	st	Z, r1
    7aae:	41 83       	std	Z+1, r20	; 0x01
    7ab0:	0f 2e       	mov	r0, r31
    7ab2:	ff ec       	ldi	r31, 0xCF	; 207
    7ab4:	4f 2e       	mov	r4, r31
    7ab6:	f7 e2       	ldi	r31, 0x27	; 39
    7ab8:	5f 2e       	mov	r5, r31
    7aba:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    7abc:	f2 01       	movw	r30, r4
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    7abe:	10 82       	st	Z, r1
    7ac0:	11 82       	std	Z+1, r1	; 0x01
    7ac2:	3e 78       	andi	r19, 0x8E	; 142
    7ac4:	32 62       	ori	r19, 0x22	; 34
    7ac6:	12 96       	adiw	r26, 0x02	; 2
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    7ac8:	3c 93       	st	X, r19
    7aca:	12 97       	sbiw	r26, 0x02	; 2
    7acc:	2f 78       	andi	r18, 0x8F	; 143
    7ace:	23 60       	ori	r18, 0x03	; 3
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    7ad0:	fb 01       	movw	r30, r22
    7ad2:	22 83       	std	Z+2, r18	; 0x02
    7ad4:	22 e0       	ldi	r18, 0x02	; 2
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    7ad6:	f6 01       	movw	r30, r12
    7ad8:	23 83       	std	Z+3, r18	; 0x03
    7ada:	91 70       	andi	r25, 0x01	; 1
    7adc:	90 64       	ori	r25, 0x40	; 64
    7ade:	11 96       	adiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    7ae0:	9c 93       	st	X, r25
    7ae2:	11 97       	sbiw	r26, 0x01	; 1
    7ae4:	0f 2e       	mov	r0, r31
    7ae6:	fc e0       	ldi	r31, 0x0C	; 12
    7ae8:	3f 2e       	mov	r3, r31
    7aea:	f0 2d       	mov	r31, r0
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    7aec:	13 96       	adiw	r26, 0x03	; 3
    7aee:	3c 92       	st	X, r3
    7af0:	81 70       	andi	r24, 0x01	; 1
    7af2:	80 66       	ori	r24, 0x60	; 96
    7af4:	db 01       	movw	r26, r22
    7af6:	11 96       	adiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    7af8:	8c 93       	st	X, r24
    7afa:	11 97       	sbiw	r26, 0x01	; 1
	/* Trigger */
	adc_set_conversion_trigger(&g_adc_a_conf, ADC_TRIG_EVENT_SINGLE, 4, 1);
	adc_set_conversion_trigger(&g_adc_b_conf, ADC_TRIG_EVENT_SINGLE, 1, 0);

	/* Interrupt service routine */
	adc_set_callback(&ADCA, isr_adc_a);
    7afc:	13 96       	adiw	r26, 0x03	; 3
    7afe:	2c 92       	st	X, r2
    7b00:	60 e2       	ldi	r22, 0x20	; 32
    7b02:	79 e3       	ldi	r23, 0x39	; 57
    7b04:	80 e0       	ldi	r24, 0x00	; 0
    7b06:	92 e0       	ldi	r25, 0x02	; 2
	adc_set_callback(&ADCB, isr_adc_b);
    7b08:	0e 94 1c 23 	call	0x4638	; 0x4638 <adc_set_callback>
    7b0c:	66 e9       	ldi	r22, 0x96	; 150
    7b0e:	7a e3       	ldi	r23, 0x3A	; 58
    7b10:	80 e4       	ldi	r24, 0x40	; 64
    7b12:	92 e0       	ldi	r25, 0x02	; 2
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    7b14:	0e 94 1c 23 	call	0x4638	; 0x4638 <adc_set_callback>
    7b18:	f4 01       	movw	r30, r8
    7b1a:	32 81       	ldd	r19, Z+2	; 0x02
    7b1c:	d5 01       	movw	r26, r10
    7b1e:	12 96       	adiw	r26, 0x02	; 2
    7b20:	2c 91       	ld	r18, X
    7b22:	f3 01       	movw	r30, r6
    7b24:	92 81       	ldd	r25, Z+2	; 0x02
    7b26:	d2 01       	movw	r26, r4
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    7b28:	12 96       	adiw	r26, 0x02	; 2
    7b2a:	8c 91       	ld	r24, X
    7b2c:	f6 01       	movw	r30, r12
    7b2e:	42 81       	ldd	r20, Z+2	; 0x02
    7b30:	40 7f       	andi	r20, 0xF0	; 240
    7b32:	41 60       	ori	r20, 0x01	; 1
    7b34:	42 83       	std	Z+2, r20	; 0x02
    7b36:	30 7f       	andi	r19, 0xF0	; 240
    7b38:	31 60       	ori	r19, 0x01	; 1
    7b3a:	d4 01       	movw	r26, r8
    7b3c:	12 96       	adiw	r26, 0x02	; 2
    7b3e:	3c 93       	st	X, r19
    7b40:	20 7f       	andi	r18, 0xF0	; 240
    7b42:	21 60       	ori	r18, 0x01	; 1
    7b44:	f5 01       	movw	r30, r10
    7b46:	22 83       	std	Z+2, r18	; 0x02
    7b48:	90 7f       	andi	r25, 0xF0	; 240
    7b4a:	91 60       	ori	r25, 0x01	; 1
    7b4c:	d3 01       	movw	r26, r6
    7b4e:	12 96       	adiw	r26, 0x02	; 2
    7b50:	9c 93       	st	X, r25
    7b52:	80 7f       	andi	r24, 0xF0	; 240
    7b54:	81 60       	ori	r24, 0x01	; 1
	adcch_enable_interrupt(&g_adcch_io_adc5_conf);
	adcch_enable_interrupt(&g_adcch_silence_conf);
	adcch_enable_interrupt(&g_adcch_temp_conf);

	/* Execute the new settings */
	adc_write_configuration(&ADCA,											&g_adc_a_conf);
    7b56:	f2 01       	movw	r30, r4
    7b58:	82 83       	std	Z+2, r24	; 0x02
    7b5a:	6a ee       	ldi	r22, 0xEA	; 234
    7b5c:	77 e2       	ldi	r23, 0x27	; 39
    7b5e:	80 e0       	ldi	r24, 0x00	; 0
    7b60:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO_5V0_VBAT,	ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    7b62:	0e 94 38 25 	call	0x4a70	; 0x4a70 <adc_write_configuration>
    7b66:	a6 01       	movw	r20, r12
    7b68:	61 e0       	ldi	r22, 0x01	; 1
    7b6a:	80 e0       	ldi	r24, 0x00	; 0
    7b6c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4,			ADC_IO_ADC4_CH,			&g_adcch_io_adc4_conf);
    7b6e:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <adcch_write_configuration>
    7b72:	a4 01       	movw	r20, r8
    7b74:	62 e0       	ldi	r22, 0x02	; 2
    7b76:	80 e0       	ldi	r24, 0x00	; 0
    7b78:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5,			ADC_IO_ADC5_CH,			&g_adcch_io_adc5_conf);
    7b7a:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <adcch_write_configuration>
    7b7e:	a5 01       	movw	r20, r10
    7b80:	64 e0       	ldi	r22, 0x04	; 4
    7b82:	80 e0       	ldi	r24, 0x00	; 0
    7b84:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_SILENCE,			ADC_SILENCE_CH,			&g_adcch_silence_conf);
    7b86:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <adcch_write_configuration>
    7b8a:	a3 01       	movw	r20, r6
    7b8c:	68 e0       	ldi	r22, 0x08	; 8
    7b8e:	80 e0       	ldi	r24, 0x00	; 0
    7b90:	92 e0       	ldi	r25, 0x02	; 2
	adc_write_configuration(&ADCB,											&g_adc_b_conf);
    7b92:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <adcch_write_configuration>
    7b96:	63 ed       	ldi	r22, 0xD3	; 211
    7b98:	77 e2       	ldi	r23, 0x27	; 39
    7b9a:	80 e4       	ldi	r24, 0x40	; 64
    7b9c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_TEMP,			ADC_TEMP_CH,			&g_adcch_temp_conf);
    7b9e:	0e 94 38 25 	call	0x4a70	; 0x4a70 <adc_write_configuration>
    7ba2:	a2 01       	movw	r20, r4
    7ba4:	61 e0       	ldi	r22, 0x01	; 1
    7ba6:	80 e4       	ldi	r24, 0x40	; 64
    7ba8:	92 e0       	ldi	r25, 0x02	; 2
    7baa:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <adcch_write_configuration>
    7bae:	61 e2       	ldi	r22, 0x21	; 33
    7bb0:	70 e0       	ldi	r23, 0x00	; 0
    7bb2:	82 e0       	ldi	r24, 0x02	; 2
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    7bb4:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
		data <<= 8;
    7bb8:	c8 2e       	mov	r12, r24
    7bba:	d1 2c       	mov	r13, r1
    7bbc:	dc 2c       	mov	r13, r12
    7bbe:	cc 24       	eor	r12, r12
    7bc0:	60 e2       	ldi	r22, 0x20	; 32
    7bc2:	70 e0       	ldi	r23, 0x00	; 0
    7bc4:	82 e0       	ldi	r24, 0x02	; 2
		data |= nvm_read_production_signature_row(ADCACAL0);
    7bc6:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>

	/* Get production signature for calibration */
	ADCA_CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    7bca:	c8 2a       	or	r12, r24
    7bcc:	c0 92 0c 02 	sts	0x020C, r12	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    7bd0:	d0 92 0d 02 	sts	0x020D, r13	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    7bd4:	65 e2       	ldi	r22, 0x25	; 37
    7bd6:	70 e0       	ldi	r23, 0x00	; 0
    7bd8:	82 e0       	ldi	r24, 0x02	; 2
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    7bda:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
		data <<= 8;
    7bde:	c8 2e       	mov	r12, r24
    7be0:	d1 2c       	mov	r13, r1
    7be2:	dc 2c       	mov	r13, r12
    7be4:	cc 24       	eor	r12, r12
    7be6:	64 e2       	ldi	r22, 0x24	; 36
    7be8:	70 e0       	ldi	r23, 0x00	; 0
    7bea:	82 e0       	ldi	r24, 0x02	; 2
		data |= nvm_read_production_signature_row(ADCBCAL0);
    7bec:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
	ADCB_CAL = adc_get_calibration_data(ADC_CAL_ADCB);
    7bf0:	c8 2a       	or	r12, r24
    7bf2:	c0 92 4c 02 	sts	0x024C, r12	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
static void isr_dma_dac_ch0_B(enum dma_channel_status status);
static void task_dac(uint32_t now);

static void dac_init(void)
{
	dac_read_configuration(&DAC_DAC, &dac_conf);
    7bf6:	d0 92 4d 02 	sts	0x024D, r13	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
    7bfa:	67 e6       	ldi	r22, 0x67	; 103
    7bfc:	77 e2       	ldi	r23, 0x27	; 39
    7bfe:	80 e2       	ldi	r24, 0x20	; 32
    7c00:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    7c02:	0e 94 18 27 	call	0x4e30	; 0x4e30 <dac_read_configuration>
    7c06:	e7 e6       	ldi	r30, 0x67	; 103
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    7c08:	f7 e2       	ldi	r31, 0x27	; 39
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    7c0a:	22 82       	std	Z+2, r2	; 0x02
    7c0c:	30 82       	st	Z, r3
    7c0e:	81 81       	ldd	r24, Z+1	; 0x01
    7c10:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    7c12:	83 64       	ori	r24, 0x43	; 67
    7c14:	81 83       	std	Z+1, r24	; 0x01
	dac_set_conversion_parameters(&dac_conf, DAC_REF_BANDGAP, DAC_ADJ_LEFT);
	dac_set_active_channel(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 0);
	dac_set_conversion_trigger(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 4);
	dac_write_configuration(&DAC_DAC, &dac_conf);
    7c16:	84 e0       	ldi	r24, 0x04	; 4
    7c18:	83 83       	std	Z+3, r24	; 0x03
    7c1a:	bf 01       	movw	r22, r30
    7c1c:	80 e2       	ldi	r24, 0x20	; 32
    7c1e:	93 e0       	ldi	r25, 0x03	; 3
    7c20:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <dac_write_configuration>
    7c24:	62 e3       	ldi	r22, 0x32	; 50
    7c26:	70 e0       	ldi	r23, 0x00	; 0
    7c28:	82 e0       	ldi	r24, 0x02	; 2

	/* Get production signature for calibration */
	DACB_CH0OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB0_OFFSET);
    7c2a:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
    7c2e:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    7c32:	63 e3       	ldi	r22, 0x33	; 51
    7c34:	70 e0       	ldi	r23, 0x00	; 0
    7c36:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH0GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB0_GAIN);
    7c38:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
    7c3c:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    7c40:	66 e3       	ldi	r22, 0x36	; 54
    7c42:	70 e0       	ldi	r23, 0x00	; 0
    7c44:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH1OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB1_OFFSET);
    7c46:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
    7c4a:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    7c4e:	67 e3       	ldi	r22, 0x37	; 55
    7c50:	70 e0       	ldi	r23, 0x00	; 0
    7c52:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH1GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB1_GAIN);
    7c54:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
	}
}

static void dma_init(void)
{
	memset(&dmach_dma0_conf, 0, sizeof(dmach_dma0_conf));	// DACB channel 0 - linked with dma1
    7c58:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
    7c5c:	0f 2e       	mov	r0, r31
    7c5e:	fc e5       	ldi	r31, 0x5C	; 92
    7c60:	af 2e       	mov	r10, r31
    7c62:	f7 e2       	ldi	r31, 0x27	; 39
    7c64:	bf 2e       	mov	r11, r31
    7c66:	f0 2d       	mov	r31, r0
    7c68:	8b e0       	ldi	r24, 0x0B	; 11
    7c6a:	d5 01       	movw	r26, r10
    7c6c:	e8 2f       	mov	r30, r24
    7c6e:	1d 92       	st	X+, r1
	memset(&dmach_dma1_conf, 0, sizeof(dmach_dma1_conf));	// DACB channel 0 - linked with dma0
    7c70:	ea 95       	dec	r30
    7c72:	e9 f7       	brne	.-6      	; 0x7c6e <main+0x3e8>
    7c74:	0f 2e       	mov	r0, r31
    7c76:	f1 e5       	ldi	r31, 0x51	; 81
    7c78:	cf 2e       	mov	r12, r31
    7c7a:	f7 e2       	ldi	r31, 0x27	; 39
    7c7c:	df 2e       	mov	r13, r31
    7c7e:	f0 2d       	mov	r31, r0
    7c80:	d6 01       	movw	r26, r12
    7c82:	1d 92       	st	X+, r1
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
    7c84:	8a 95       	dec	r24
    7c86:	e9 f7       	brne	.-6      	; 0x7c82 <main+0x3fc>
    7c88:	80 e2       	ldi	r24, 0x20	; 32
    7c8a:	90 e0       	ldi	r25, 0x00	; 0
    7c8c:	f5 01       	movw	r30, r10
    7c8e:	84 83       	std	Z+4, r24	; 0x04
    7c90:	95 83       	std	Z+5, r25	; 0x05
    7c92:	d6 01       	movw	r26, r12
    7c94:	14 96       	adiw	r26, 0x04	; 4
    7c96:	8d 93       	st	X+, r24
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    7c98:	9c 93       	st	X, r25
    7c9a:	15 97       	sbiw	r26, 0x05	; 5
    7c9c:	85 e0       	ldi	r24, 0x05	; 5
    7c9e:	97 e2       	ldi	r25, 0x27	; 39
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    7ca0:	87 83       	std	Z+7, r24	; 0x07
    7ca2:	90 87       	std	Z+8, r25	; 0x08
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    7ca4:	29 ed       	ldi	r18, 0xD9	; 217
    7ca6:	22 83       	std	Z+2, r18	; 0x02
    7ca8:	88 e3       	ldi	r24, 0x38	; 56
    7caa:	93 e0       	ldi	r25, 0x03	; 3
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    7cac:	81 87       	std	Z+9, r24	; 0x09
    7cae:	92 87       	std	Z+10, r25	; 0x0a
    7cb0:	45 e2       	ldi	r20, 0x25	; 37
    7cb2:	57 e2       	ldi	r21, 0x27	; 39
    7cb4:	17 96       	adiw	r26, 0x07	; 7
    7cb6:	4d 93       	st	X+, r20
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    7cb8:	5c 93       	st	X, r21
    7cba:	18 97       	sbiw	r26, 0x08	; 8
    7cbc:	12 96       	adiw	r26, 0x02	; 2
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    7cbe:	2c 93       	st	X, r18
    7cc0:	12 97       	sbiw	r26, 0x02	; 2
    7cc2:	19 96       	adiw	r26, 0x09	; 9
    7cc4:	8d 93       	st	X+, r24
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    7cc6:	9c 93       	st	X, r25
    7cc8:	1a 97       	sbiw	r26, 0x0a	; 10
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    7cca:	95 e2       	ldi	r25, 0x25	; 37
    7ccc:	93 83       	std	Z+3, r25	; 0x03
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    7cce:	86 e0       	ldi	r24, 0x06	; 6
    7cd0:	80 83       	st	Z, r24
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    7cd2:	13 96       	adiw	r26, 0x03	; 3
	dma_channel_set_single_shot(&dmach_dma0_conf);

	dma_channel_set_trigger_source(&dmach_dma1_conf, DMA_CH_TRIGSRC_DACB_CH0_gc);
	dma_channel_set_single_shot(&dmach_dma1_conf);

	task_dac(rtc_get_time());																		// Calculate DDS increments
    7cd4:	9c 93       	st	X, r25
    7cd6:	13 97       	sbiw	r26, 0x03	; 3
    7cd8:	8c 93       	st	X, r24
    7cda:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <rtc_get_time>
	tc_init();			// Timers
	adc_init();			// ADC
#ifdef USE_DAC
	dac_init();			// DAC
#endif
	twi_init();			// I2C / TWI
    7cde:	64 dc       	rcall	.-1848   	; 0x75a8 <task_dac>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    7ce0:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <twi_init>

	nvm_init(INT_FLASH);
    7ce4:	0e 94 1b 23 	call	0x4636	; 0x4636 <board_init>
    7ce8:	80 e0       	ldi	r24, 0x00	; 0

	/* All interrupt sources & PMIC are prepared until here - IRQ activation follows */
	cpu_irq_enable();
    7cea:	0e 94 6f 14 	call	0x28de	; 0x28de <nvm_init>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    7cee:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    7cf0:	f8 01       	movw	r30, r16
    7cf2:	80 81       	ld	r24, Z
    7cf4:	80 7f       	andi	r24, 0xF0	; 240

static void tc_start(void)
{
	/* ADC clock */
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc);							// VCTCXO PWM start, output still is Z-state
	tc_set_overflow_interrupt_callback(&TCC0, isr_tcc0_ovfl);
    7cf6:	81 60       	ori	r24, 0x01	; 1
    7cf8:	80 83       	st	Z, r24
    7cfa:	63 e3       	ldi	r22, 0x33	; 51
    7cfc:	7b e3       	ldi	r23, 0x3B	; 59
    7cfe:	80 e0       	ldi	r24, 0x00	; 0
    7d00:	98 e0       	ldi	r25, 0x08	; 8
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    7d02:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <tc_set_overflow_interrupt_callback>
    7d06:	d8 01       	movw	r26, r16
    7d08:	16 96       	adiw	r26, 0x06	; 6
    7d0a:	8c 91       	ld	r24, X
    7d0c:	16 97       	sbiw	r26, 0x06	; 6
    7d0e:	8c 7f       	andi	r24, 0xFC	; 252
    7d10:	16 96       	adiw	r26, 0x06	; 6
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    7d12:	8c 93       	st	X, r24
    7d14:	16 97       	sbiw	r26, 0x06	; 6
    7d16:	16 96       	adiw	r26, 0x06	; 6
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    7d18:	8c 91       	ld	r24, X
    7d1a:	16 97       	sbiw	r26, 0x06	; 6
    7d1c:	81 60       	ori	r24, 0x01	; 1
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    7d1e:	16 96       	adiw	r26, 0x06	; 6
    7d20:	8c 93       	st	X, r24
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    7d22:	f7 01       	movw	r30, r14
    7d24:	80 81       	ld	r24, Z
    7d26:	80 7f       	andi	r24, 0xF0	; 240
	dma_init();
}

static void dac_start(void)
{
	dac_enable(&DACB);
    7d28:	81 60       	ori	r24, 0x01	; 1
    7d2a:	80 83       	st	Z, r24
    7d2c:	80 e2       	ldi	r24, 0x20	; 32
    7d2e:	93 e0       	ldi	r25, 0x03	; 3
	task_dac(rtc_get_time());																		// Calculate DDS increments
}

static void dma_start(void)
{
	dma_enable();
    7d30:	0e 94 90 26 	call	0x4d20	; 0x4d20 <dac_enable>

	dma_set_callback(DMA_CHANNEL_DACB_CH0_A, isr_dma_dac_ch0_A);
    7d34:	0e 94 d5 14 	call	0x29aa	; 0x29aa <dma_enable>
    7d38:	60 e1       	ldi	r22, 0x10	; 16
    7d3a:	7c e3       	ldi	r23, 0x3C	; 60
    7d3c:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline void dma_channel_set_interrupt_level(struct dma_channel_config
		*config, enum dma_int_level_t level)
{
	config->ctrlb &= ~(DMA_CH_ERRINTLVL_gm | DMA_CH_TRNINTLVL_gm);
	config->ctrlb |= (level << DMA_CH_ERRINTLVL_gp)
    7d3e:	0e 94 f7 14 	call	0x29ee	; 0x29ee <dma_set_callback>
    7d42:	d5 01       	movw	r26, r10
    7d44:	11 96       	adiw	r26, 0x01	; 1
    7d46:	8c 91       	ld	r24, X
    7d48:	11 97       	sbiw	r26, 0x01	; 1
    7d4a:	80 7f       	andi	r24, 0xF0	; 240
    7d4c:	8a 60       	ori	r24, 0x0A	; 10
	dma_channel_set_interrupt_level(&dmach_dma0_conf, DMA_INT_LVL_MED);

	dma_set_callback(DMA_CHANNEL_DACB_CH0_B, isr_dma_dac_ch0_B);
    7d4e:	11 96       	adiw	r26, 0x01	; 1
    7d50:	8c 93       	st	X, r24
    7d52:	6d ee       	ldi	r22, 0xED	; 237
    7d54:	7b e3       	ldi	r23, 0x3B	; 59
    7d56:	81 e0       	ldi	r24, 0x01	; 1
    7d58:	0e 94 f7 14 	call	0x29ee	; 0x29ee <dma_set_callback>
    7d5c:	f6 01       	movw	r30, r12
    7d5e:	81 81       	ldd	r24, Z+1	; 0x01
    7d60:	80 7f       	andi	r24, 0xF0	; 240

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7d62:	8a 60       	ori	r24, 0x0A	; 10
    7d64:	81 83       	std	Z+1, r24	; 0x01
	cpu_irq_disable();
    7d66:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    7d68:	8c 87       	std	Y+12, r24	; 0x0c
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_PRIMODE_gm) | primode;
    7d6a:	f8 94       	cli
    7d6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    7d6e:	e0 e0       	ldi	r30, 0x00	; 0
    7d70:	f1 e0       	ldi	r31, 0x01	; 1
    7d72:	80 81       	ld	r24, Z
    7d74:	8c 7f       	andi	r24, 0xFC	; 252
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7d76:	82 60       	ori	r24, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7d78:	80 83       	st	Z, r24
    7d7a:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_disable();
    7d7c:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    7d7e:	8b 87       	std	Y+11, r24	; 0x0b
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_DBUFMODE_gm) | dbufmode;
    7d80:	f8 94       	cli
    7d82:	9b 85       	ldd	r25, Y+11	; 0x0b
    7d84:	80 81       	ld	r24, Z
    7d86:	83 7f       	andi	r24, 0xF3	; 243
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7d88:	84 60       	ori	r24, 0x04	; 4
	dma_channel_set_interrupt_level(&dmach_dma1_conf, DMA_INT_LVL_MED);

	dma_set_priority_mode(DMA_PRIMODE_CH01RR23_gc);
	dma_set_double_buffer_mode(DMA_DBUFMODE_CH01_gc);

	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_A, &dmach_dma0_conf);
    7d8a:	80 83       	st	Z, r24
    7d8c:	9f bf       	out	0x3f, r25	; 63
    7d8e:	b5 01       	movw	r22, r10
    7d90:	80 e0       	ldi	r24, 0x00	; 0
	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_B, &dmach_dma1_conf);
    7d92:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <dma_channel_write_config>
    7d96:	b6 01       	movw	r22, r12
    7d98:	81 e0       	ldi	r24, 0x01	; 1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7d9a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <dma_channel_write_config>
	cpu_irq_disable();
    7d9e:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    7da0:	8e 87       	std	Y+14, r24	; 0x0e
	/* IRQ disabled section */
	{
		irqflags_t flags = cpu_irq_save();

		/* Prepare DMA blocks */
		calc_next_frame(&dac_io_dac0_buf[0][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    7da2:	f8 94       	cli
    7da4:	fe 84       	ldd	r15, Y+14	; 0x0e
    7da6:	05 e4       	ldi	r16, 0x45	; 69
    7da8:	17 e2       	ldi	r17, 0x27	; 39
    7daa:	27 e0       	ldi	r18, 0x07	; 7
    7dac:	30 e2       	ldi	r19, 0x20	; 32
    7dae:	4d e4       	ldi	r20, 0x4D	; 77
    7db0:	57 e2       	ldi	r21, 0x27	; 39
    7db2:	69 e4       	ldi	r22, 0x49	; 73
    7db4:	77 e2       	ldi	r23, 0x27	; 39
    7db6:	85 e0       	ldi	r24, 0x05	; 5
		calc_next_frame(&dac_io_dac0_buf[1][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    7db8:	97 e2       	ldi	r25, 0x27	; 39
    7dba:	b6 dc       	rcall	.-1684   	; 0x7728 <calc_next_frame>
    7dbc:	27 e0       	ldi	r18, 0x07	; 7
    7dbe:	30 e2       	ldi	r19, 0x20	; 32
    7dc0:	4d e4       	ldi	r20, 0x4D	; 77
    7dc2:	57 e2       	ldi	r21, 0x27	; 39
    7dc4:	69 e4       	ldi	r22, 0x49	; 73
    7dc6:	77 e2       	ldi	r23, 0x27	; 39
    7dc8:	85 e2       	ldi	r24, 0x25	; 37

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7dca:	97 e2       	ldi	r25, 0x27	; 39
    7dcc:	ad dc       	rcall	.-1702   	; 0x7728 <calc_next_frame>
	cpu_irq_disable();
    7dce:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    7dd0:	8d 87       	std	Y+13, r24	; 0x0d
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    7dd2:	f8 94       	cli
    7dd4:	9d 85       	ldd	r25, Y+13	; 0x0d
    7dd6:	e0 e1       	ldi	r30, 0x10	; 16
    7dd8:	f1 e0       	ldi	r31, 0x01	; 1
    7dda:	80 81       	ld	r24, Z
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7ddc:	80 68       	ori	r24, 0x80	; 128
    7dde:	80 83       	st	Z, r24
}

static void adc_start(void)
{
	/* Power up after configurations are being set */
	adc_enable(&ADCA);
    7de0:	9f bf       	out	0x3f, r25	; 63
    7de2:	ff be       	out	0x3f, r15	; 63
    7de4:	80 e0       	ldi	r24, 0x00	; 0
	adc_enable(&ADCB);
    7de6:	92 e0       	ldi	r25, 0x02	; 2
    7de8:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <adc_enable>
    7dec:	80 e4       	ldi	r24, 0x40	; 64
}


static void usb_init(void)
{
	udc_start();
    7dee:	92 e0       	ldi	r25, 0x02	; 2

#if 1
	stdio_usb_init();	// Init and enable stdio_usb
    7df0:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <adc_enable>
	stdio_usb_enable();
    7df4:	bd d7       	rcall	.+3962   	; 0x8d70 <udc_start>
	delay_ms(140);
    7df6:	0e 94 0c 4a 	call	0x9418	; 0x9418 <stdio_usb_init>
    7dfa:	0e 94 08 4a 	call	0x9410	; 0x9410 <stdio_usb_enable>
    7dfe:	61 e6       	ldi	r22, 0x61	; 97
    7e00:	7e ea       	ldi	r23, 0xAE	; 174

	printf("%c\r\n", 0x0c);
    7e02:	8a e0       	ldi	r24, 0x0A	; 10
    7e04:	90 e0       	ldi	r25, 0x00	; 0
    7e06:	08 da       	rcall	.-3056   	; 0x7218 <__portable_avr_delay_cycles>
    7e08:	1f 92       	push	r1
    7e0a:	3f 92       	push	r3
    7e0c:	8b e0       	ldi	r24, 0x0B	; 11
    7e0e:	94 e2       	ldi	r25, 0x24	; 36
    7e10:	9f 93       	push	r25
	printf("===============================\r\n");
    7e12:	8f 93       	push	r24
    7e14:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <printf>
    7e18:	80 e1       	ldi	r24, 0x10	; 16
	printf("FindMeSAT - USB logging started\r\n");
    7e1a:	94 e2       	ldi	r25, 0x24	; 36
    7e1c:	0e 94 c9 4d 	call	0x9b92	; 0x9b92 <puts>
    7e20:	81 e3       	ldi	r24, 0x31	; 49
	printf("===============================\r\n\r\n");
    7e22:	94 e2       	ldi	r25, 0x24	; 36
    7e24:	0e 94 c9 4d 	call	0x9b92	; 0x9b92 <puts>
    7e28:	82 e5       	ldi	r24, 0x52	; 82

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB

	/* Start TWI channels */
	twi_start();		// Start TWI
    7e2a:	94 e2       	ldi	r25, 0x24	; 36
    7e2c:	0e 94 c9 4d 	call	0x9b92	; 0x9b92 <puts>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7e30:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <twi_start>
	cpu_irq_disable();
	return flags;
    7e34:	8f b7       	in	r24, 0x3f	; 63

	/* The application code */
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode = WORKMODE_RUN;
    7e36:	88 8b       	std	Y+16, r24	; 0x10
    7e38:	f8 94       	cli
    7e3a:	88 89       	ldd	r24, Y+16	; 0x10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7e3c:	f2 e0       	ldi	r31, 0x02	; 2
    7e3e:	f0 93 47 28 	sts	0x2847, r31	; 0x802847 <g_workmode>
    7e42:	8f bf       	out	0x3f, r24	; 63
    7e44:	0f 90       	pop	r0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    7e46:	0f 90       	pop	r0
    7e48:	0f 90       	pop	r0
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    7e4a:	0f 90       	pop	r0
    7e4c:	0f e9       	ldi	r16, 0x9F	; 159
    7e4e:	19 e2       	ldi	r17, 0x29	; 41
    7e50:	0f 2e       	mov	r0, r31
    7e52:	f8 e4       	ldi	r31, 0x48	; 72

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7e54:	2f 2e       	mov	r2, r31
    7e56:	31 2c       	mov	r3, r1
	cpu_irq_disable();
    7e58:	f0 2d       	mov	r31, r0
	return flags;
    7e5a:	8f b7       	in	r24, 0x3f	; 63
}

static void task(void)
{
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode;
    7e5c:	8a 87       	std	Y+10, r24	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7e5e:	f8 94       	cli
	cpu_irq_restore(flags);

	if (l_workmode == WORKMODE_RUN) {
    7e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e62:	80 91 47 28 	lds	r24, 0x2847	; 0x802847 <g_workmode>
		uint32_t now = rtc_get_time();
    7e66:	9f bf       	out	0x3f, r25	; 63
    7e68:	82 30       	cpi	r24, 0x02	; 2
    7e6a:	09 f0       	breq	.+2      	; 0x7e6e <main+0x5e8>
    7e6c:	0d c2       	rjmp	.+1050   	; 0x8288 <main+0xa02>

		/* TASK when woken up and all ISRs are done */
		task_dac(now);
    7e6e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <rtc_get_time>

static void task_adc(uint32_t now)
{	/* Calculations of the ADC values for the presentation layer */
	static uint32_t adc_last = 0;

	if ((now - adc_last) >= 512 || (now < adc_last)) {
    7e72:	6b 01       	movw	r12, r22
    7e74:	7c 01       	movw	r14, r24
    7e76:	98 db       	rcall	.-2256   	; 0x75a8 <task_dac>
    7e78:	80 91 f1 26 	lds	r24, 0x26F1	; 0x8026f1 <adc_last.7513>
    7e7c:	90 91 f2 26 	lds	r25, 0x26F2	; 0x8026f2 <adc_last.7513+0x1>
    7e80:	a0 91 f3 26 	lds	r26, 0x26F3	; 0x8026f3 <adc_last.7513+0x2>
    7e84:	b0 91 f4 26 	lds	r27, 0x26F4	; 0x8026f4 <adc_last.7513+0x3>
    7e88:	b7 01       	movw	r22, r14
    7e8a:	a6 01       	movw	r20, r12
    7e8c:	48 1b       	sub	r20, r24
    7e8e:	59 0b       	sbc	r21, r25
    7e90:	6a 0b       	sbc	r22, r26
    7e92:	7b 0b       	sbc	r23, r27
    7e94:	41 15       	cp	r20, r1
    7e96:	52 40       	sbci	r21, 0x02	; 2
    7e98:	61 05       	cpc	r22, r1
    7e9a:	71 05       	cpc	r23, r1
    7e9c:	30 f4       	brcc	.+12     	; 0x7eaa <main+0x624>
    7e9e:	c8 16       	cp	r12, r24
    7ea0:	d9 06       	cpc	r13, r25
    7ea2:	ea 06       	cpc	r14, r26
		adc_last = now;
    7ea4:	fb 06       	cpc	r15, r27
    7ea6:	08 f0       	brcs	.+2      	; 0x7eaa <main+0x624>
    7ea8:	12 c1       	rjmp	.+548    	; 0x80ce <main+0x848>
    7eaa:	c0 92 f1 26 	sts	0x26F1, r12	; 0x8026f1 <adc_last.7513>
    7eae:	d0 92 f2 26 	sts	0x26F2, r13	; 0x8026f2 <adc_last.7513+0x1>
    7eb2:	e0 92 f3 26 	sts	0x26F3, r14	; 0x8026f3 <adc_last.7513+0x2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7eb6:	f0 92 f4 26 	sts	0x26F4, r15	; 0x8026f4 <adc_last.7513+0x3>
	cpu_irq_disable();
	return flags;
    7eba:	8f b7       	in	r24, 0x3f	; 63

		irqflags_t flags = cpu_irq_save();
		uint32_t l_adc_vctcxo_cur	= g_adc_vctcxo_cur;
    7ebc:	88 87       	std	Y+8, r24	; 0x08
    7ebe:	f8 94       	cli
    7ec0:	68 85       	ldd	r22, Y+8	; 0x08
    7ec2:	20 91 cb 27 	lds	r18, 0x27CB	; 0x8027cb <g_adc_vctcxo_cur>
    7ec6:	30 91 cc 27 	lds	r19, 0x27CC	; 0x8027cc <g_adc_vctcxo_cur+0x1>
    7eca:	40 91 cd 27 	lds	r20, 0x27CD	; 0x8027cd <g_adc_vctcxo_cur+0x2>
		uint32_t l_adc_5v0_cur		= g_adc_5v0_cur;
    7ece:	50 91 ce 27 	lds	r21, 0x27CE	; 0x8027ce <g_adc_vctcxo_cur+0x3>
    7ed2:	40 90 c1 27 	lds	r4, 0x27C1	; 0x8027c1 <g_adc_5v0_cur>
    7ed6:	50 90 c2 27 	lds	r5, 0x27C2	; 0x8027c2 <g_adc_5v0_cur+0x1>
    7eda:	60 90 c3 27 	lds	r6, 0x27C3	; 0x8027c3 <g_adc_5v0_cur+0x2>
		uint32_t l_adc_vbat_cur		= g_adc_vbat_cur;
    7ede:	70 90 c4 27 	lds	r7, 0x27C4	; 0x8027c4 <g_adc_5v0_cur+0x3>
    7ee2:	80 90 b7 27 	lds	r8, 0x27B7	; 0x8027b7 <g_adc_vbat_cur>
    7ee6:	90 90 b8 27 	lds	r9, 0x27B8	; 0x8027b8 <g_adc_vbat_cur+0x1>
    7eea:	a0 90 b9 27 	lds	r10, 0x27B9	; 0x8027b9 <g_adc_vbat_cur+0x2>
		uint32_t l_adc_io_adc4_cur	= g_adc_io_adc4_cur;
    7eee:	b0 90 ba 27 	lds	r11, 0x27BA	; 0x8027ba <g_adc_vbat_cur+0x3>
    7ef2:	80 91 ad 27 	lds	r24, 0x27AD	; 0x8027ad <g_adc_io_adc4_cur>
    7ef6:	90 91 ae 27 	lds	r25, 0x27AE	; 0x8027ae <g_adc_io_adc4_cur+0x1>
    7efa:	a0 91 af 27 	lds	r26, 0x27AF	; 0x8027af <g_adc_io_adc4_cur+0x2>
    7efe:	b0 91 b0 27 	lds	r27, 0x27B0	; 0x8027b0 <g_adc_io_adc4_cur+0x3>
    7f02:	89 8b       	std	Y+17, r24	; 0x11
		uint32_t l_adc_io_adc5_cur	= g_adc_io_adc5_cur;
    7f04:	9a 8b       	std	Y+18, r25	; 0x12
    7f06:	ab 8b       	std	Y+19, r26	; 0x13
    7f08:	bc 8b       	std	Y+20, r27	; 0x14
    7f0a:	80 91 a3 27 	lds	r24, 0x27A3	; 0x8027a3 <g_adc_io_adc5_cur>
    7f0e:	90 91 a4 27 	lds	r25, 0x27A4	; 0x8027a4 <g_adc_io_adc5_cur+0x1>
    7f12:	a0 91 a5 27 	lds	r26, 0x27A5	; 0x8027a5 <g_adc_io_adc5_cur+0x2>
    7f16:	b0 91 a6 27 	lds	r27, 0x27A6	; 0x8027a6 <g_adc_io_adc5_cur+0x3>
    7f1a:	8d 8b       	std	Y+21, r24	; 0x15
		uint32_t l_adc_silence_cur	= g_adc_silence_cur;
    7f1c:	9e 8b       	std	Y+22, r25	; 0x16
    7f1e:	af 8b       	std	Y+23, r26	; 0x17
    7f20:	b8 8f       	std	Y+24, r27	; 0x18
    7f22:	80 91 99 27 	lds	r24, 0x2799	; 0x802799 <g_adc_silence_cur>
    7f26:	90 91 9a 27 	lds	r25, 0x279A	; 0x80279a <g_adc_silence_cur+0x1>
    7f2a:	a0 91 9b 27 	lds	r26, 0x279B	; 0x80279b <g_adc_silence_cur+0x2>
    7f2e:	b0 91 9c 27 	lds	r27, 0x279C	; 0x80279c <g_adc_silence_cur+0x3>
    7f32:	89 8f       	std	Y+25, r24	; 0x19
		uint32_t l_adc_temp_cur		= g_adc_temp_cur;
    7f34:	9a 8f       	std	Y+26, r25	; 0x1a
    7f36:	ab 8f       	std	Y+27, r26	; 0x1b
    7f38:	bc 8f       	std	Y+28, r27	; 0x1c
    7f3a:	80 91 8f 27 	lds	r24, 0x278F	; 0x80278f <g_adc_temp_cur>
    7f3e:	90 91 90 27 	lds	r25, 0x2790	; 0x802790 <g_adc_temp_cur+0x1>
    7f42:	a0 91 91 27 	lds	r26, 0x2791	; 0x802791 <g_adc_temp_cur+0x2>
    7f46:	b0 91 92 27 	lds	r27, 0x2792	; 0x802792 <g_adc_temp_cur+0x3>
    7f4a:	8d 8f       	std	Y+29, r24	; 0x1d
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7f4c:	9e 8f       	std	Y+30, r25	; 0x1e

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7f4e:	af 8f       	std	Y+31, r26	; 0x1f
    7f50:	b8 a3       	std	Y+32, r27	; 0x20
	cpu_irq_disable();
    7f52:	6f bf       	out	0x3f, r22	; 63
	return flags;
    7f54:	8f b7       	in	r24, 0x3f	; 63
    7f56:	89 83       	std	Y+1, r24	; 0x01
		int16_t l_adc_io_adc5_volt_1000	= (int16_t) (((  1000UL * l_adc_io_adc5_cur * C_VCC_3V0_AREF_VOLTS                   ) / C_ADC_STEPS));
		int16_t l_adc_silence_volt_1000	= (int16_t) (((  1000UL * l_adc_silence_cur * C_VCC_3V0_AREF_VOLTS                   ) / C_ADC_STEPS));
		int16_t l_adc_temp_deg_100		= (int16_t) ((((  100UL * l_adc_temp_cur                           * C_TEMPSENSE_MULT) / C_ADC_STEPS))  -  100 * C_0DEGC_K);

		flags = cpu_irq_save();
		g_adc_vctcxo_volt_1000	= l_adc_vctcxo_volt_1000;
    7f58:	f8 94       	cli
    7f5a:	99 81       	ldd	r25, Y+1	; 0x01
    7f5c:	99 a3       	std	Y+33, r25	; 0x21
    7f5e:	a8 eb       	ldi	r26, 0xB8	; 184
    7f60:	bb e0       	ldi	r27, 0x0B	; 11
    7f62:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <__muluhisi3>
    7f66:	05 2e       	mov	r0, r21
    7f68:	54 e1       	ldi	r21, 0x14	; 20
    7f6a:	96 95       	lsr	r25
    7f6c:	87 95       	ror	r24
    7f6e:	77 95       	ror	r23
    7f70:	67 95       	ror	r22
    7f72:	5a 95       	dec	r21
    7f74:	d1 f7       	brne	.-12     	; 0x7f6a <main+0x6e4>
    7f76:	50 2d       	mov	r21, r0
    7f78:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <__floatunsisf>
    7f7c:	20 e0       	ldi	r18, 0x00	; 0
    7f7e:	30 e0       	ldi	r19, 0x00	; 0
    7f80:	4c e3       	ldi	r20, 0x3C	; 60
    7f82:	52 e4       	ldi	r21, 0x42	; 66
    7f84:	0e 94 74 4b 	call	0x96e8	; 0x96e8 <__subsf3>
    7f88:	0e 94 41 4c 	call	0x9882	; 0x9882 <__fixsfsi>
    7f8c:	60 93 87 27 	sts	0x2787, r22	; 0x802787 <g_adc_vctcxo_volt_1000>
		g_adc_5v0_volt_1000		= l_adc_5v0_volt_1000;
    7f90:	70 93 88 27 	sts	0x2788, r23	; 0x802788 <g_adc_vctcxo_volt_1000+0x1>
    7f94:	a8 eb       	ldi	r26, 0xB8	; 184
    7f96:	bb e0       	ldi	r27, 0x0B	; 11
    7f98:	a3 01       	movw	r20, r6
    7f9a:	92 01       	movw	r18, r4
    7f9c:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <__muluhisi3>
    7fa0:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <__floatunsisf>
    7fa4:	29 ed       	ldi	r18, 0xD9	; 217
    7fa6:	38 ed       	ldi	r19, 0xD8	; 216
    7fa8:	4a e1       	ldi	r20, 0x1A	; 26
    7faa:	50 e4       	ldi	r21, 0x40	; 64
    7fac:	0e 94 00 4d 	call	0x9a00	; 0x9a00 <__mulsf3>
    7fb0:	20 e0       	ldi	r18, 0x00	; 0
    7fb2:	30 e0       	ldi	r19, 0x00	; 0
    7fb4:	40 e8       	ldi	r20, 0x80	; 128
    7fb6:	55 e3       	ldi	r21, 0x35	; 53
    7fb8:	0e 94 00 4d 	call	0x9a00	; 0x9a00 <__mulsf3>
    7fbc:	0e 94 41 4c 	call	0x9882	; 0x9882 <__fixsfsi>
    7fc0:	60 93 85 27 	sts	0x2785, r22	; 0x802785 <g_adc_5v0_volt_1000>
		g_adc_vbat_volt_1000	= l_adc_vbat_volt_1000;
    7fc4:	70 93 86 27 	sts	0x2786, r23	; 0x802786 <g_adc_5v0_volt_1000+0x1>
    7fc8:	a8 eb       	ldi	r26, 0xB8	; 184
    7fca:	bb e0       	ldi	r27, 0x0B	; 11
    7fcc:	a5 01       	movw	r20, r10
    7fce:	94 01       	movw	r18, r8
    7fd0:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <__muluhisi3>
    7fd4:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <__floatunsisf>
    7fd8:	23 ee       	ldi	r18, 0xE3	; 227
    7fda:	35 e4       	ldi	r19, 0x45	; 69
    7fdc:	4b e1       	ldi	r20, 0x1B	; 27
    7fde:	50 e4       	ldi	r21, 0x40	; 64
    7fe0:	0e 94 00 4d 	call	0x9a00	; 0x9a00 <__mulsf3>
    7fe4:	20 e0       	ldi	r18, 0x00	; 0
    7fe6:	30 e0       	ldi	r19, 0x00	; 0
    7fe8:	40 e8       	ldi	r20, 0x80	; 128
    7fea:	55 e3       	ldi	r21, 0x35	; 53
    7fec:	0e 94 00 4d 	call	0x9a00	; 0x9a00 <__mulsf3>
    7ff0:	0e 94 41 4c 	call	0x9882	; 0x9882 <__fixsfsi>
    7ff4:	60 93 83 27 	sts	0x2783, r22	; 0x802783 <g_adc_vbat_volt_1000>
		g_adc_io_adc4_volt_1000	= l_adc_io_adc4_volt_1000;
    7ff8:	70 93 84 27 	sts	0x2784, r23	; 0x802784 <g_adc_vbat_volt_1000+0x1>
    7ffc:	a8 eb       	ldi	r26, 0xB8	; 184
    7ffe:	bb e0       	ldi	r27, 0x0B	; 11
    8000:	29 89       	ldd	r18, Y+17	; 0x11
    8002:	3a 89       	ldd	r19, Y+18	; 0x12
    8004:	4b 89       	ldd	r20, Y+19	; 0x13
    8006:	5c 89       	ldd	r21, Y+20	; 0x14
    8008:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <__muluhisi3>
    800c:	dc 01       	movw	r26, r24
    800e:	cb 01       	movw	r24, r22
    8010:	07 2e       	mov	r0, r23
    8012:	74 e1       	ldi	r23, 0x14	; 20
    8014:	b6 95       	lsr	r27
    8016:	a7 95       	ror	r26
    8018:	97 95       	ror	r25
    801a:	87 95       	ror	r24
    801c:	7a 95       	dec	r23
    801e:	d1 f7       	brne	.-12     	; 0x8014 <main+0x78e>
    8020:	70 2d       	mov	r23, r0
    8022:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <g_adc_io_adc4_volt_1000>
		g_adc_io_adc5_volt_1000	= l_adc_io_adc5_volt_1000;
    8026:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <g_adc_io_adc4_volt_1000+0x1>
    802a:	a8 eb       	ldi	r26, 0xB8	; 184
    802c:	bb e0       	ldi	r27, 0x0B	; 11
    802e:	2d 89       	ldd	r18, Y+21	; 0x15
    8030:	3e 89       	ldd	r19, Y+22	; 0x16
    8032:	4f 89       	ldd	r20, Y+23	; 0x17
    8034:	58 8d       	ldd	r21, Y+24	; 0x18
    8036:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <__muluhisi3>
    803a:	dc 01       	movw	r26, r24
    803c:	cb 01       	movw	r24, r22
    803e:	07 2e       	mov	r0, r23
    8040:	74 e1       	ldi	r23, 0x14	; 20
    8042:	b6 95       	lsr	r27
    8044:	a7 95       	ror	r26
    8046:	97 95       	ror	r25
    8048:	87 95       	ror	r24
    804a:	7a 95       	dec	r23
    804c:	d1 f7       	brne	.-12     	; 0x8042 <main+0x7bc>
    804e:	70 2d       	mov	r23, r0
    8050:	80 93 7f 27 	sts	0x277F, r24	; 0x80277f <g_adc_io_adc5_volt_1000>
		g_adc_silence_volt_1000	= l_adc_silence_volt_1000;
    8054:	90 93 80 27 	sts	0x2780, r25	; 0x802780 <g_adc_io_adc5_volt_1000+0x1>
    8058:	a8 eb       	ldi	r26, 0xB8	; 184
    805a:	bb e0       	ldi	r27, 0x0B	; 11
    805c:	29 8d       	ldd	r18, Y+25	; 0x19
    805e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    8060:	4b 8d       	ldd	r20, Y+27	; 0x1b
    8062:	5c 8d       	ldd	r21, Y+28	; 0x1c
    8064:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <__muluhisi3>
    8068:	dc 01       	movw	r26, r24
    806a:	cb 01       	movw	r24, r22
    806c:	07 2e       	mov	r0, r23
    806e:	74 e1       	ldi	r23, 0x14	; 20
    8070:	b6 95       	lsr	r27
    8072:	a7 95       	ror	r26
    8074:	97 95       	ror	r25
    8076:	87 95       	ror	r24
    8078:	7a 95       	dec	r23
    807a:	d1 f7       	brne	.-12     	; 0x8070 <main+0x7ea>
    807c:	70 2d       	mov	r23, r0
    807e:	80 93 7d 27 	sts	0x277D, r24	; 0x80277d <g_adc_silence_volt_1000>
		g_adc_temp_deg_100		= l_adc_temp_deg_100;
    8082:	90 93 7e 27 	sts	0x277E, r25	; 0x80277e <g_adc_silence_volt_1000+0x1>
    8086:	a4 e6       	ldi	r26, 0x64	; 100
    8088:	b0 e0       	ldi	r27, 0x00	; 0
    808a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    808c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    808e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    8090:	58 a1       	ldd	r21, Y+32	; 0x20
    8092:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <__muluhisi3>
    8096:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <__floatunsisf>
    809a:	2d ec       	ldi	r18, 0xCD	; 205
    809c:	3c e4       	ldi	r19, 0x4C	; 76
    809e:	4d e1       	ldi	r20, 0x1D	; 29
    80a0:	54 e4       	ldi	r21, 0x44	; 68
    80a2:	0e 94 00 4d 	call	0x9a00	; 0x9a00 <__mulsf3>
    80a6:	20 e0       	ldi	r18, 0x00	; 0
    80a8:	30 e0       	ldi	r19, 0x00	; 0
    80aa:	40 e8       	ldi	r20, 0x80	; 128
    80ac:	55 e3       	ldi	r21, 0x35	; 53
    80ae:	0e 94 00 4d 	call	0x9a00	; 0x9a00 <__mulsf3>
    80b2:	20 e0       	ldi	r18, 0x00	; 0
    80b4:	36 e6       	ldi	r19, 0x66	; 102
    80b6:	45 ed       	ldi	r20, 0xD5	; 213
    80b8:	56 e4       	ldi	r21, 0x46	; 70
    80ba:	0e 94 74 4b 	call	0x96e8	; 0x96e8 <__subsf3>
    80be:	0e 94 41 4c 	call	0x9882	; 0x9882 <__fixsfsi>
    80c2:	60 93 7b 27 	sts	0x277B, r22	; 0x80277b <g_adc_temp_deg_100>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    80c6:	70 93 7c 27 	sts	0x277C, r23	; 0x80277c <g_adc_temp_deg_100+0x1>

static void task_twi(uint32_t now)
{	/* Calculations for the presentation layer and display */

	/* TWI1 - SIM808, Hygro, Gyro, Baro devices */
	task_twi1_onboard(now);
    80ca:	a9 a1       	ldd	r26, Y+33	; 0x21
    80cc:	af bf       	out	0x3f, r26	; 63
    80ce:	c7 01       	movw	r24, r14

	/* TWI2 - LCD Port */
	task_twi2_lcd(now);
    80d0:	b6 01       	movw	r22, r12
    80d2:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <task_twi1_onboard>
    80d6:	c7 01       	movw	r24, r14
}

static void task_usb(uint32_t now)
{
	if (usb_cdc_transfers_autorized) {
    80d8:	b6 01       	movw	r22, r12
    80da:	0e 94 9c 20 	call	0x4138	; 0x4138 <task_twi2_lcd>
    80de:	80 91 46 28 	lds	r24, 0x2846	; 0x802846 <usb_cdc_transfers_autorized>
		// stdio_usb_init();
		// stdio_usb_enable();
#endif

		/* Monitoring at the USB serial terminal */
		if (((now - usb_last) >= 512) || (now < usb_last)) {
    80e2:	88 23       	and	r24, r24
    80e4:	09 f4       	brne	.+2      	; 0x80e8 <main+0x862>
    80e6:	d0 c0       	rjmp	.+416    	; 0x8288 <main+0xa02>
    80e8:	80 91 ed 26 	lds	r24, 0x26ED	; 0x8026ed <usb_last.7535>
    80ec:	90 91 ee 26 	lds	r25, 0x26EE	; 0x8026ee <usb_last.7535+0x1>
    80f0:	a0 91 ef 26 	lds	r26, 0x26EF	; 0x8026ef <usb_last.7535+0x2>
    80f4:	b0 91 f0 26 	lds	r27, 0x26F0	; 0x8026f0 <usb_last.7535+0x3>
    80f8:	b7 01       	movw	r22, r14
    80fa:	a6 01       	movw	r20, r12
    80fc:	48 1b       	sub	r20, r24
    80fe:	59 0b       	sbc	r21, r25
    8100:	6a 0b       	sbc	r22, r26
    8102:	7b 0b       	sbc	r23, r27
    8104:	41 15       	cp	r20, r1
    8106:	52 40       	sbci	r21, 0x02	; 2
    8108:	61 05       	cpc	r22, r1
    810a:	71 05       	cpc	r23, r1
    810c:	30 f4       	brcc	.+12     	; 0x811a <main+0x894>
    810e:	c8 16       	cp	r12, r24
    8110:	d9 06       	cpc	r13, r25
    8112:	ea 06       	cpc	r14, r26
			usb_last = now;
    8114:	fb 06       	cpc	r15, r27
    8116:	08 f0       	brcs	.+2      	; 0x811a <main+0x894>
    8118:	b7 c0       	rjmp	.+366    	; 0x8288 <main+0xa02>
    811a:	c0 92 ed 26 	sts	0x26ED, r12	; 0x8026ed <usb_last.7535>
    811e:	d0 92 ee 26 	sts	0x26EE, r13	; 0x8026ee <usb_last.7535+0x1>
    8122:	e0 92 ef 26 	sts	0x26EF, r14	; 0x8026ef <usb_last.7535+0x2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8126:	f0 92 f0 26 	sts	0x26F0, r15	; 0x8026f0 <usb_last.7535+0x3>
	cpu_irq_disable();
	return flags;
    812a:	8f b7       	in	r24, 0x3f	; 63

			flags = cpu_irq_save();
			int16_t l_adc_vctcxo_volt_1000	= g_adc_vctcxo_volt_1000;
    812c:	89 87       	std	Y+9, r24	; 0x09
    812e:	f8 94       	cli
    8130:	49 85       	ldd	r20, Y+9	; 0x09
    8132:	f0 91 87 27 	lds	r31, 0x2787	; 0x802787 <g_adc_vctcxo_volt_1000>
    8136:	fd 8b       	std	Y+21, r31	; 0x15
			int16_t l_adc_5v0_volt_1000		= g_adc_5v0_volt_1000;
    8138:	20 91 88 27 	lds	r18, 0x2788	; 0x802788 <g_adc_vctcxo_volt_1000+0x1>
    813c:	29 8f       	std	Y+25, r18	; 0x19
    813e:	80 91 85 27 	lds	r24, 0x2785	; 0x802785 <g_adc_5v0_volt_1000>
    8142:	8d 8f       	std	Y+29, r24	; 0x1d
			int16_t l_adc_vbat_volt_1000	= g_adc_vbat_volt_1000;
    8144:	90 91 86 27 	lds	r25, 0x2786	; 0x802786 <g_adc_5v0_volt_1000+0x1>
    8148:	99 a3       	std	Y+33, r25	; 0x21
    814a:	a0 91 83 27 	lds	r26, 0x2783	; 0x802783 <g_adc_vbat_volt_1000>
    814e:	aa a3       	std	Y+34, r26	; 0x22
			int16_t l_adc_io_adc4_volt_1000	= g_adc_io_adc4_volt_1000;
    8150:	b0 91 84 27 	lds	r27, 0x2784	; 0x802784 <g_adc_vbat_volt_1000+0x1>
    8154:	bb a3       	std	Y+35, r27	; 0x23
    8156:	e0 91 81 27 	lds	r30, 0x2781	; 0x802781 <g_adc_io_adc4_volt_1000>
    815a:	ec a3       	std	Y+36, r30	; 0x24
			int16_t l_adc_io_adc5_volt_1000	= g_adc_io_adc5_volt_1000;
    815c:	f0 91 82 27 	lds	r31, 0x2782	; 0x802782 <g_adc_io_adc4_volt_1000+0x1>
    8160:	fd a3       	std	Y+37, r31	; 0x25
    8162:	20 91 7f 27 	lds	r18, 0x277F	; 0x80277f <g_adc_io_adc5_volt_1000>
    8166:	2e a3       	std	Y+38, r18	; 0x26
			int16_t l_adc_silence_volt_1000	= g_adc_silence_volt_1000;
    8168:	80 91 80 27 	lds	r24, 0x2780	; 0x802780 <g_adc_io_adc5_volt_1000+0x1>
    816c:	8f a3       	std	Y+39, r24	; 0x27
    816e:	90 91 7d 27 	lds	r25, 0x277D	; 0x80277d <g_adc_silence_volt_1000>
    8172:	98 a7       	std	Y+40, r25	; 0x28
			int16_t l_adc_temp_deg_100		= g_adc_temp_deg_100;
    8174:	a0 91 7e 27 	lds	r26, 0x277E	; 0x80277e <g_adc_silence_volt_1000+0x1>
    8178:	a9 a7       	std	Y+41, r26	; 0x29
    817a:	e0 91 7b 27 	lds	r30, 0x277B	; 0x80277b <g_adc_temp_deg_100>
    817e:	f0 91 7c 27 	lds	r31, 0x277C	; 0x80277c <g_adc_temp_deg_100+0x1>
			int32_t l_twi1_baro_temp_100	= g_twi1_baro_temp_100;
    8182:	e9 8b       	std	Y+17, r30	; 0x11
    8184:	fa 8b       	std	Y+18, r31	; 0x12
    8186:	80 90 00 28 	lds	r8, 0x2800	; 0x802800 <g_twi1_baro_temp_100>
    818a:	90 90 01 28 	lds	r9, 0x2801	; 0x802801 <g_twi1_baro_temp_100+0x1>
    818e:	a0 90 02 28 	lds	r10, 0x2802	; 0x802802 <g_twi1_baro_temp_100+0x2>
			int32_t l_twi1_baro_p_100		= g_twi1_baro_p_100;
    8192:	b0 90 03 28 	lds	r11, 0x2803	; 0x802803 <g_twi1_baro_temp_100+0x3>
    8196:	40 90 fc 27 	lds	r4, 0x27FC	; 0x8027fc <g_twi1_baro_p_100>
    819a:	50 90 fd 27 	lds	r5, 0x27FD	; 0x8027fd <g_twi1_baro_p_100+0x1>
    819e:	60 90 fe 27 	lds	r6, 0x27FE	; 0x8027fe <g_twi1_baro_p_100+0x2>
			int16_t l_twi1_hygro_T_100		= g_twi1_hygro_T_100;
    81a2:	70 90 ff 27 	lds	r7, 0x27FF	; 0x8027ff <g_twi1_baro_p_100+0x3>
    81a6:	20 91 f4 27 	lds	r18, 0x27F4	; 0x8027f4 <g_twi1_hygro_T_100>
			int16_t l_twi1_hygro_RH_100		= g_twi1_hygro_RH_100;
    81aa:	30 91 f5 27 	lds	r19, 0x27F5	; 0x8027f5 <g_twi1_hygro_T_100+0x1>
    81ae:	80 91 f2 27 	lds	r24, 0x27F2	; 0x8027f2 <g_twi1_hygro_RH_100>
			cpu_irq_restore(flags);

			printf("Time = %5ld: U_vctcxo=%4d mV, U_5v0=%4d mV, U_vbat=%4d mV, U_io_adc4=%4d mV, U_io_adc5=%4d mV, U_silence=%4d mV, mP_Temp=%02d.%02dC,\tBaro_Temp=%02ld.%02ld C, Baro_P=%4ld.%02ld hPa,\tHygro_Temp=%02d.%02d C, Hygro_RelH=%02d.%02d %%\r\n",
    81b2:	90 91 f3 27 	lds	r25, 0x27F3	; 0x8027f3 <g_twi1_hygro_RH_100+0x1>
    81b6:	4f bf       	out	0x3f, r20	; 63
    81b8:	64 e6       	ldi	r22, 0x64	; 100
    81ba:	70 e0       	ldi	r23, 0x00	; 0
    81bc:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    81c0:	9f 93       	push	r25
    81c2:	8f 93       	push	r24
    81c4:	7f 93       	push	r23
    81c6:	6f 93       	push	r22
    81c8:	c9 01       	movw	r24, r18
    81ca:	64 e6       	ldi	r22, 0x64	; 100
    81cc:	70 e0       	ldi	r23, 0x00	; 0
    81ce:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    81d2:	9f 93       	push	r25
    81d4:	8f 93       	push	r24
    81d6:	7f 93       	push	r23
    81d8:	6f 93       	push	r22
    81da:	c3 01       	movw	r24, r6
    81dc:	b2 01       	movw	r22, r4
    81de:	24 e6       	ldi	r18, 0x64	; 100
    81e0:	30 e0       	ldi	r19, 0x00	; 0
    81e2:	40 e0       	ldi	r20, 0x00	; 0
    81e4:	50 e0       	ldi	r21, 0x00	; 0
    81e6:	0e 94 9d 4a 	call	0x953a	; 0x953a <__divmodsi4>
    81ea:	9f 93       	push	r25
    81ec:	8f 93       	push	r24
    81ee:	7f 93       	push	r23
    81f0:	6f 93       	push	r22
    81f2:	5f 93       	push	r21
    81f4:	4f 93       	push	r20
    81f6:	3f 93       	push	r19
    81f8:	2f 93       	push	r18
    81fa:	c5 01       	movw	r24, r10
    81fc:	b4 01       	movw	r22, r8
    81fe:	24 e6       	ldi	r18, 0x64	; 100
    8200:	30 e0       	ldi	r19, 0x00	; 0
    8202:	40 e0       	ldi	r20, 0x00	; 0
    8204:	50 e0       	ldi	r21, 0x00	; 0
    8206:	0e 94 9d 4a 	call	0x953a	; 0x953a <__divmodsi4>
    820a:	9f 93       	push	r25
    820c:	8f 93       	push	r24
    820e:	7f 93       	push	r23
    8210:	6f 93       	push	r22
    8212:	5f 93       	push	r21
    8214:	4f 93       	push	r20
    8216:	3f 93       	push	r19
    8218:	2f 93       	push	r18
    821a:	89 89       	ldd	r24, Y+17	; 0x11
    821c:	9a 89       	ldd	r25, Y+18	; 0x12
    821e:	64 e6       	ldi	r22, 0x64	; 100
    8220:	70 e0       	ldi	r23, 0x00	; 0
    8222:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <__divmodhi4>
    8226:	9f 93       	push	r25
    8228:	8f 93       	push	r24
    822a:	7f 93       	push	r23
    822c:	6f 93       	push	r22
    822e:	f9 a5       	ldd	r31, Y+41	; 0x29
    8230:	ff 93       	push	r31
    8232:	28 a5       	ldd	r18, Y+40	; 0x28
    8234:	2f 93       	push	r18
    8236:	8f a1       	ldd	r24, Y+39	; 0x27
    8238:	8f 93       	push	r24
    823a:	9e a1       	ldd	r25, Y+38	; 0x26
    823c:	9f 93       	push	r25
    823e:	ad a1       	ldd	r26, Y+37	; 0x25
    8240:	af 93       	push	r26
    8242:	bc a1       	ldd	r27, Y+36	; 0x24
    8244:	bf 93       	push	r27
    8246:	eb a1       	ldd	r30, Y+35	; 0x23
    8248:	ef 93       	push	r30
    824a:	fa a1       	ldd	r31, Y+34	; 0x22
    824c:	ff 93       	push	r31
    824e:	29 a1       	ldd	r18, Y+33	; 0x21
    8250:	2f 93       	push	r18
    8252:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8254:	8f 93       	push	r24
    8256:	99 8d       	ldd	r25, Y+25	; 0x19
    8258:	9f 93       	push	r25
    825a:	ad 89       	ldd	r26, Y+21	; 0x15
    825c:	af 93       	push	r26
    825e:	0b 2e       	mov	r0, r27
    8260:	ba e0       	ldi	r27, 0x0A	; 10
    8262:	f6 94       	lsr	r15
    8264:	e7 94       	ror	r14
    8266:	d7 94       	ror	r13
    8268:	c7 94       	ror	r12
    826a:	ba 95       	dec	r27
    826c:	d1 f7       	brne	.-12     	; 0x8262 <main+0x9dc>
    826e:	b0 2d       	mov	r27, r0
    8270:	ff 92       	push	r15
    8272:	ef 92       	push	r14
    8274:	df 92       	push	r13
    8276:	cf 92       	push	r12
    8278:	e5 e7       	ldi	r30, 0x75	; 117
    827a:	f4 e2       	ldi	r31, 0x24	; 36
    827c:	ff 93       	push	r31
    827e:	ef 93       	push	r30
    8280:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <printf>
    8284:	cd bf       	out	0x3d, r28	; 61
    8286:	de bf       	out	0x3e, r29	; 62
    8288:	f8 94       	cli
    828a:	d8 01       	movw	r26, r16
    828c:	8c 91       	ld	r24, X
    828e:	81 11       	cpse	r24, r1
    8290:	09 c0       	rjmp	.+18     	; 0x82a4 <main+0xa1e>
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    8292:	a0 ea       	ldi	r26, 0xA0	; 160

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    8294:	b9 e2       	ldi	r27, 0x29	; 41
    8296:	e0 e0       	ldi	r30, 0x00	; 0
    8298:	ef 5f       	subi	r30, 0xFF	; 255
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    829a:	8d 91       	ld	r24, X+
    829c:	88 23       	and	r24, r24
		cpu_irq_enable();
    829e:	e1 f3       	breq	.-8      	; 0x8298 <main+0xa12>
    82a0:	e1 11       	cpse	r30, r1
    82a2:	02 c0       	rjmp	.+4      	; 0x82a8 <main+0xa22>
    82a4:	78 94       	sei

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    82a6:	12 c0       	rjmp	.+36     	; 0x82cc <main+0xa46>
    82a8:	d1 01       	movw	r26, r2
    82aa:	8c 91       	ld	r24, X
    82ac:	f0 e0       	ldi	r31, 0x00	; 0
    82ae:	ee 5c       	subi	r30, 0xCE	; 206
    82b0:	ff 4d       	sbci	r31, 0xDF	; 223
    82b2:	81 7f       	andi	r24, 0xF1	; 241
	sleep_enable();
    82b4:	90 81       	ld	r25, Z
    82b6:	89 2b       	or	r24, r25
    82b8:	8c 93       	st	X, r24

	cpu_irq_enable();
    82ba:	8c 91       	ld	r24, X
	sleep_enter();
    82bc:	81 60       	ori	r24, 0x01	; 1

	sleep_disable();
    82be:	8c 93       	st	X, r24
    82c0:	78 94       	sei
    82c2:	88 95       	sleep
    82c4:	f1 01       	movw	r30, r2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    82c6:	80 81       	ld	r24, Z
    82c8:	8e 7f       	andi	r24, 0xFE	; 254
	cpu_irq_disable();
    82ca:	80 83       	st	Z, r24
	return flags;
    82cc:	8f b7       	in	r24, 0x3f	; 63
    while (l_workmode) {
		task();
		sleepmgr_enter_sleep();

		flags = cpu_irq_save();
		l_workmode = g_workmode;
    82ce:	8f 87       	std	Y+15, r24	; 0x0f
    82d0:	f8 94       	cli
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    82d2:	9f 85       	ldd	r25, Y+15	; 0x0f
	/* The application code */
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode = WORKMODE_RUN;
	cpu_irq_restore(flags);

    while (l_workmode) {
    82d4:	80 91 47 28 	lds	r24, 0x2847	; 0x802847 <g_workmode>
		flags = cpu_irq_save();
		l_workmode = g_workmode;
		cpu_irq_restore(flags);
    }

	cpu_irq_disable();
    82d8:	9f bf       	out	0x3f, r25	; 63
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    82da:	81 11       	cpse	r24, r1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    82dc:	be cd       	rjmp	.-1156   	; 0x7e5a <main+0x5d4>
    82de:	f8 94       	cli
    82e0:	f8 94       	cli
    82e2:	80 91 9f 29 	lds	r24, 0x299F	; 0x80299f <sleepmgr_locks>
    82e6:	81 11       	cpse	r24, r1
    82e8:	09 c0       	rjmp	.+18     	; 0x82fc <main+0xa76>
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    82ea:	a0 ea       	ldi	r26, 0xA0	; 160

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    82ec:	b9 e2       	ldi	r27, 0x29	; 41
    82ee:	e0 e0       	ldi	r30, 0x00	; 0
    82f0:	ef 5f       	subi	r30, 0xFF	; 255
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    82f2:	8d 91       	ld	r24, X+
    82f4:	88 23       	and	r24, r24
		cpu_irq_enable();
    82f6:	e1 f3       	breq	.-8      	; 0x82f0 <main+0xa6a>
    82f8:	e1 11       	cpse	r30, r1
    82fa:	02 c0       	rjmp	.+4      	; 0x8300 <main+0xa7a>
    82fc:	78 94       	sei
    82fe:	13 c0       	rjmp	.+38     	; 0x8326 <main+0xaa0>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    8300:	a8 e4       	ldi	r26, 0x48	; 72
    8302:	b0 e0       	ldi	r27, 0x00	; 0
    8304:	8c 91       	ld	r24, X
    8306:	f0 e0       	ldi	r31, 0x00	; 0
    8308:	ee 5c       	subi	r30, 0xCE	; 206
    830a:	ff 4d       	sbci	r31, 0xDF	; 223
    830c:	98 2f       	mov	r25, r24
    830e:	91 7f       	andi	r25, 0xF1	; 241
	sleep_enable();
    8310:	80 81       	ld	r24, Z
    8312:	89 2b       	or	r24, r25
    8314:	8c 93       	st	X, r24

	cpu_irq_enable();
    8316:	8c 91       	ld	r24, X
	sleep_enter();
    8318:	81 60       	ori	r24, 0x01	; 1

	sleep_disable();
    831a:	8c 93       	st	X, r24
    831c:	78 94       	sei
    831e:	88 95       	sleep
	sleepmgr_enter_sleep();

	return retcode;
}
    8320:	8c 91       	ld	r24, X
    8322:	8e 7f       	andi	r24, 0xFE	; 254
    8324:	8c 93       	st	X, r24
    8326:	80 e0       	ldi	r24, 0x00	; 0
    8328:	90 e0       	ldi	r25, 0x00	; 0
    832a:	a9 96       	adiw	r28, 0x29	; 41
    832c:	cd bf       	out	0x3d, r28	; 61
    832e:	de bf       	out	0x3e, r29	; 62
    8330:	df 91       	pop	r29
    8332:	cf 91       	pop	r28
    8334:	1f 91       	pop	r17
    8336:	0f 91       	pop	r16
    8338:	ff 90       	pop	r15
    833a:	ef 90       	pop	r14
    833c:	df 90       	pop	r13
    833e:	cf 90       	pop	r12
    8340:	bf 90       	pop	r11
    8342:	af 90       	pop	r10
    8344:	9f 90       	pop	r9
    8346:	8f 90       	pop	r8
    8348:	7f 90       	pop	r7
    834a:	6f 90       	pop	r6
    834c:	5f 90       	pop	r5
    834e:	4f 90       	pop	r4
    8350:	3f 90       	pop	r3
    8352:	2f 90       	pop	r2
    8354:	08 95       	ret

00008356 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    8356:	cf 93       	push	r28
    8358:	df 93       	push	r29
    835a:	cd b7       	in	r28, 0x3d	; 61
    835c:	de b7       	in	r29, 0x3e	; 62
    835e:	28 97       	sbiw	r28, 0x08	; 8
    8360:	cd bf       	out	0x3d, r28	; 61
    8362:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    8364:	8f ef       	ldi	r24, 0xFF	; 255
    8366:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    836a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    836e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    8372:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    8376:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    837a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    837e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    8382:	61 e0       	ldi	r22, 0x01	; 1
    8384:	81 e4       	ldi	r24, 0x41	; 65
    8386:	90 e0       	ldi	r25, 0x00	; 0
    8388:	0e 94 3f 4a 	call	0x947e	; 0x947e <ccp_write_io>
    838c:	6c e1       	ldi	r22, 0x1C	; 28
    838e:	70 e0       	ldi	r23, 0x00	; 0
    8390:	82 e0       	ldi	r24, 0x02	; 2
    8392:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    8396:	8a 83       	std	Y+2, r24	; 0x02
    8398:	6d e1       	ldi	r22, 0x1D	; 29
    839a:	70 e0       	ldi	r23, 0x00	; 0
    839c:	82 e0       	ldi	r24, 0x02	; 2
    839e:	0e 94 35 4a 	call	0x946a	; 0x946a <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    83a2:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    83a4:	89 81       	ldd	r24, Y+1	; 0x01
    83a6:	9a 81       	ldd	r25, Y+2	; 0x02
    83a8:	01 96       	adiw	r24, 0x01	; 1
    83aa:	21 f4       	brne	.+8      	; 0x83b4 <sysclk_init+0x5e>
		cal = 0x2340;
    83ac:	80 e4       	ldi	r24, 0x40	; 64
    83ae:	93 e2       	ldi	r25, 0x23	; 35
    83b0:	89 83       	std	Y+1, r24	; 0x01
    83b2:	9a 83       	std	Y+2, r25	; 0x02
    83b4:	89 81       	ldd	r24, Y+1	; 0x01
    83b6:	9a 81       	ldd	r25, Y+2	; 0x02
    83b8:	8b 83       	std	Y+3, r24	; 0x03
    83ba:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    83bc:	e0 e6       	ldi	r30, 0x60	; 96
    83be:	f0 e0       	ldi	r31, 0x00	; 0
    83c0:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    83c2:	8c 81       	ldd	r24, Y+4	; 0x04
    83c4:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    83c6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    83ca:	84 fd       	sbrc	r24, 4
    83cc:	21 c0       	rjmp	.+66     	; 0x8410 <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    83ce:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    83d2:	83 fd       	sbrc	r24, 3
    83d4:	0e c0       	rjmp	.+28     	; 0x83f2 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    83d6:	e0 e5       	ldi	r30, 0x50	; 80
    83d8:	f0 e0       	ldi	r31, 0x00	; 0
    83da:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    83dc:	8f b7       	in	r24, 0x3f	; 63
    83de:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    83e0:	f8 94       	cli
	return flags;
    83e2:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    83e4:	80 81       	ld	r24, Z
    83e6:	88 60       	ori	r24, 0x08	; 8
    83e8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    83ea:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    83ec:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    83ee:	83 ff       	sbrs	r24, 3
    83f0:	fd cf       	rjmp	.-6      	; 0x83ec <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    83f2:	8f b7       	in	r24, 0x3f	; 63
    83f4:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    83f6:	f8 94       	cli
	return flags;
    83f8:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    83fa:	e0 e5       	ldi	r30, 0x50	; 80
    83fc:	f0 e0       	ldi	r31, 0x00	; 0
    83fe:	83 ec       	ldi	r24, 0xC3	; 195
    8400:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    8402:	80 81       	ld	r24, Z
    8404:	80 61       	ori	r24, 0x10	; 16
    8406:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8408:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    840a:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    840c:	84 ff       	sbrs	r24, 4
    840e:	fd cf       	rjmp	.-6      	; 0x840a <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    8410:	64 e0       	ldi	r22, 0x04	; 4
    8412:	80 e4       	ldi	r24, 0x40	; 64
    8414:	90 e0       	ldi	r25, 0x00	; 0
    8416:	0e 94 3f 4a 	call	0x947e	; 0x947e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    841a:	8f b7       	in	r24, 0x3f	; 63
    841c:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    841e:	f8 94       	cli
	return flags;
    8420:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    8422:	e0 e5       	ldi	r30, 0x50	; 80
    8424:	f0 e0       	ldi	r31, 0x00	; 0
    8426:	80 81       	ld	r24, Z
    8428:	8e 7f       	andi	r24, 0xFE	; 254
    842a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    842c:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    842e:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8430:	8f b7       	in	r24, 0x3f	; 63
    8432:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    8434:	f8 94       	cli
	return flags;
    8436:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    8438:	80 81       	ld	r24, Z
    843a:	88 60       	ori	r24, 0x08	; 8
    843c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    843e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    8440:	81 81       	ldd	r24, Z+1	; 0x01
    8442:	83 ff       	sbrs	r24, 3
    8444:	fd cf       	rjmp	.-6      	; 0x8440 <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    8446:	8b e0       	ldi	r24, 0x0B	; 11
    8448:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    844c:	28 96       	adiw	r28, 0x08	; 8
    844e:	cd bf       	out	0x3d, r28	; 61
    8450:	de bf       	out	0x3e, r29	; 62
    8452:	df 91       	pop	r29
    8454:	cf 91       	pop	r28
    8456:	08 95       	ret

00008458 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    8458:	cf 93       	push	r28
    845a:	df 93       	push	r29
    845c:	1f 92       	push	r1
    845e:	cd b7       	in	r28, 0x3d	; 61
    8460:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8462:	9f b7       	in	r25, 0x3f	; 63
    8464:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    8466:	f8 94       	cli
	return flags;
    8468:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    846a:	e8 2f       	mov	r30, r24
    846c:	f0 e0       	ldi	r31, 0x00	; 0
    846e:	e0 59       	subi	r30, 0x90	; 144
    8470:	ff 4f       	sbci	r31, 0xFF	; 255
    8472:	60 95       	com	r22
    8474:	80 81       	ld	r24, Z
    8476:	68 23       	and	r22, r24
    8478:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    847a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    847c:	0f 90       	pop	r0
    847e:	df 91       	pop	r29
    8480:	cf 91       	pop	r28
    8482:	08 95       	ret

00008484 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    8484:	cf 93       	push	r28
    8486:	df 93       	push	r29
    8488:	1f 92       	push	r1
    848a:	cd b7       	in	r28, 0x3d	; 61
    848c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    848e:	9f b7       	in	r25, 0x3f	; 63
    8490:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    8492:	f8 94       	cli
	return flags;
    8494:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    8496:	e8 2f       	mov	r30, r24
    8498:	f0 e0       	ldi	r31, 0x00	; 0
    849a:	e0 59       	subi	r30, 0x90	; 144
    849c:	ff 4f       	sbci	r31, 0xFF	; 255
    849e:	80 81       	ld	r24, Z
    84a0:	68 2b       	or	r22, r24
    84a2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    84a4:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    84a6:	0f 90       	pop	r0
    84a8:	df 91       	pop	r29
    84aa:	cf 91       	pop	r28
    84ac:	08 95       	ret

000084ae <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    84ae:	cf 93       	push	r28
    84b0:	df 93       	push	r29
    84b2:	1f 92       	push	r1
    84b4:	1f 92       	push	r1
    84b6:	cd b7       	in	r28, 0x3d	; 61
    84b8:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    84ba:	86 30       	cpi	r24, 0x06	; 6
    84bc:	11 f0       	breq	.+4      	; 0x84c2 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    84be:	60 e0       	ldi	r22, 0x00	; 0
    84c0:	01 c0       	rjmp	.+2      	; 0x84c4 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    84c2:	68 e1       	ldi	r22, 0x18	; 24
    84c4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    84c8:	81 fd       	sbrc	r24, 1
    84ca:	2a c0       	rjmp	.+84     	; 0x8520 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    84cc:	8f b7       	in	r24, 0x3f	; 63
    84ce:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    84d0:	f8 94       	cli
	return flags;
    84d2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    84d4:	e0 e5       	ldi	r30, 0x50	; 80
    84d6:	f0 e0       	ldi	r31, 0x00	; 0
    84d8:	80 81       	ld	r24, Z
    84da:	82 60       	ori	r24, 0x02	; 2
    84dc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    84de:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    84e0:	81 81       	ldd	r24, Z+1	; 0x01
    84e2:	81 ff       	sbrs	r24, 1
    84e4:	fd cf       	rjmp	.-6      	; 0x84e0 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    84e6:	8f b7       	in	r24, 0x3f	; 63
    84e8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    84ea:	f8 94       	cli
	return flags;
    84ec:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    84ee:	a0 e5       	ldi	r26, 0x50	; 80
    84f0:	b0 e0       	ldi	r27, 0x00	; 0
    84f2:	16 96       	adiw	r26, 0x06	; 6
    84f4:	8c 91       	ld	r24, X
    84f6:	16 97       	sbiw	r26, 0x06	; 6
    84f8:	89 7f       	andi	r24, 0xF9	; 249
    84fa:	16 96       	adiw	r26, 0x06	; 6
    84fc:	8c 93       	st	X, r24
    84fe:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    8500:	e0 e6       	ldi	r30, 0x60	; 96
    8502:	f0 e0       	ldi	r31, 0x00	; 0
    8504:	80 e8       	ldi	r24, 0x80	; 128
    8506:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    8508:	8b eb       	ldi	r24, 0xBB	; 187
    850a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    850c:	16 96       	adiw	r26, 0x06	; 6
    850e:	8c 91       	ld	r24, X
    8510:	16 97       	sbiw	r26, 0x06	; 6
    8512:	84 60       	ori	r24, 0x04	; 4
    8514:	16 96       	adiw	r26, 0x06	; 6
    8516:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    8518:	80 81       	ld	r24, Z
    851a:	81 60       	ori	r24, 0x01	; 1
    851c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    851e:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    8520:	63 60       	ori	r22, 0x03	; 3
    8522:	84 e4       	ldi	r24, 0x44	; 68
    8524:	90 e0       	ldi	r25, 0x00	; 0
    8526:	ab d7       	rcall	.+3926   	; 0x947e <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    8528:	60 e4       	ldi	r22, 0x40	; 64
    852a:	80 e0       	ldi	r24, 0x00	; 0
    852c:	95 df       	rcall	.-214    	; 0x8458 <sysclk_enable_module>
}
    852e:	0f 90       	pop	r0
    8530:	0f 90       	pop	r0
    8532:	df 91       	pop	r29
    8534:	cf 91       	pop	r28
    8536:	08 95       	ret

00008538 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    8538:	80 91 5e 29 	lds	r24, 0x295E	; 0x80295e <udi_cdc_nb_comm_enabled>
    853c:	81 50       	subi	r24, 0x01	; 1
    853e:	80 93 5e 29 	sts	0x295E, r24	; 0x80295e <udi_cdc_nb_comm_enabled>
    8542:	08 95       	ret

00008544 <udi_cdc_data_setup>:
    8544:	80 e0       	ldi	r24, 0x00	; 0
    8546:	08 95       	ret

00008548 <udi_cdc_getsetting>:
    8548:	80 e0       	ldi	r24, 0x00	; 0
    854a:	08 95       	ret

0000854c <udi_cdc_line_coding_received>:
    854c:	6c e6       	ldi	r22, 0x6C	; 108
    854e:	79 e2       	ldi	r23, 0x29	; 41
    8550:	80 e0       	ldi	r24, 0x00	; 0
    8552:	94 c9       	rjmp	.-3288   	; 0x787c <usb_callback_config>
    8554:	08 95       	ret

00008556 <udi_cdc_comm_enable>:
    8556:	10 92 5e 29 	sts	0x295E, r1	; 0x80295e <udi_cdc_nb_comm_enabled>
    855a:	10 92 6a 29 	sts	0x296A, r1	; 0x80296a <udi_cdc_state>
    855e:	10 92 6b 29 	sts	0x296B, r1	; 0x80296b <udi_cdc_state+0x1>
    8562:	e0 e6       	ldi	r30, 0x60	; 96
    8564:	f9 e2       	ldi	r31, 0x29	; 41
    8566:	81 ea       	ldi	r24, 0xA1	; 161
    8568:	80 83       	st	Z, r24
    856a:	80 e2       	ldi	r24, 0x20	; 32
    856c:	81 83       	std	Z+1, r24	; 0x01
    856e:	12 82       	std	Z+2, r1	; 0x02
    8570:	13 82       	std	Z+3, r1	; 0x03
    8572:	14 82       	std	Z+4, r1	; 0x04
    8574:	15 82       	std	Z+5, r1	; 0x05
    8576:	82 e0       	ldi	r24, 0x02	; 2
    8578:	90 e0       	ldi	r25, 0x00	; 0
    857a:	86 83       	std	Z+6, r24	; 0x06
    857c:	97 83       	std	Z+7, r25	; 0x07
    857e:	10 86       	std	Z+8, r1	; 0x08
    8580:	11 86       	std	Z+9, r1	; 0x09
    8582:	ec e6       	ldi	r30, 0x6C	; 108
    8584:	f9 e2       	ldi	r31, 0x29	; 41
    8586:	80 e0       	ldi	r24, 0x00	; 0
    8588:	92 ec       	ldi	r25, 0xC2	; 194
    858a:	a1 e0       	ldi	r26, 0x01	; 1
    858c:	b0 e0       	ldi	r27, 0x00	; 0
    858e:	80 83       	st	Z, r24
    8590:	91 83       	std	Z+1, r25	; 0x01
    8592:	a2 83       	std	Z+2, r26	; 0x02
    8594:	b3 83       	std	Z+3, r27	; 0x03
    8596:	14 82       	std	Z+4, r1	; 0x04
    8598:	15 82       	std	Z+5, r1	; 0x05
    859a:	88 e0       	ldi	r24, 0x08	; 8
    859c:	86 83       	std	Z+6, r24	; 0x06
    859e:	bf 01       	movw	r22, r30
    85a0:	80 e0       	ldi	r24, 0x00	; 0
    85a2:	6c d9       	rcall	.-3368   	; 0x787c <usb_callback_config>
    85a4:	64 d9       	rcall	.-3384   	; 0x786e <usb_callback_cdc_enable>
    85a6:	88 23       	and	r24, r24
    85a8:	29 f0       	breq	.+10     	; 0x85b4 <udi_cdc_comm_enable+0x5e>
    85aa:	90 91 5e 29 	lds	r25, 0x295E	; 0x80295e <udi_cdc_nb_comm_enabled>
    85ae:	9f 5f       	subi	r25, 0xFF	; 255
    85b0:	90 93 5e 29 	sts	0x295E, r25	; 0x80295e <udi_cdc_nb_comm_enabled>
    85b4:	08 95       	ret

000085b6 <udi_cdc_tx_send>:
    85b6:	ff 92       	push	r15
    85b8:	0f 93       	push	r16
    85ba:	1f 93       	push	r17
    85bc:	cf 93       	push	r28
    85be:	df 93       	push	r29
    85c0:	1f 92       	push	r1
    85c2:	cd b7       	in	r28, 0x3d	; 61
    85c4:	de b7       	in	r29, 0x3e	; 62
    85c6:	80 91 4b 28 	lds	r24, 0x284B	; 0x80284b <udi_cdc_tx_trans_ongoing>
    85ca:	81 11       	cpse	r24, r1
    85cc:	9f c0       	rjmp	.+318    	; 0x870c <udi_cdc_tx_send+0x156>
    85ce:	0e 94 8f 33 	call	0x671e	; 0x671e <udd_is_high_speed>
    85d2:	88 23       	and	r24, r24
    85d4:	51 f0       	breq	.+20     	; 0x85ea <udi_cdc_tx_send+0x34>
    85d6:	00 91 4c 28 	lds	r16, 0x284C	; 0x80284c <udi_cdc_tx_sof_num>
    85da:	10 91 4d 28 	lds	r17, 0x284D	; 0x80284d <udi_cdc_tx_sof_num+0x1>
    85de:	0e 94 9c 33 	call	0x6738	; 0x6738 <udd_get_micro_frame_number>
    85e2:	08 17       	cp	r16, r24
    85e4:	19 07       	cpc	r17, r25
    85e6:	59 f4       	brne	.+22     	; 0x85fe <udi_cdc_tx_send+0x48>
    85e8:	91 c0       	rjmp	.+290    	; 0x870c <udi_cdc_tx_send+0x156>
    85ea:	00 91 4c 28 	lds	r16, 0x284C	; 0x80284c <udi_cdc_tx_sof_num>
    85ee:	10 91 4d 28 	lds	r17, 0x284D	; 0x80284d <udi_cdc_tx_sof_num+0x1>
    85f2:	0e 94 97 33 	call	0x672e	; 0x672e <udd_get_frame_number>
    85f6:	08 17       	cp	r16, r24
    85f8:	19 07       	cpc	r17, r25
    85fa:	09 f4       	brne	.+2      	; 0x85fe <udi_cdc_tx_send+0x48>
    85fc:	87 c0       	rjmp	.+270    	; 0x870c <udi_cdc_tx_send+0x156>
    85fe:	8f b7       	in	r24, 0x3f	; 63
    8600:	89 83       	std	Y+1, r24	; 0x01
    8602:	f8 94       	cli
    8604:	19 81       	ldd	r17, Y+1	; 0x01
    8606:	00 91 4e 28 	lds	r16, 0x284E	; 0x80284e <udi_cdc_tx_buf_sel>
    860a:	e0 2f       	mov	r30, r16
    860c:	f0 e0       	ldi	r31, 0x00	; 0
    860e:	ee 0f       	add	r30, r30
    8610:	ff 1f       	adc	r31, r31
    8612:	e1 5b       	subi	r30, 0xB1	; 177
    8614:	f7 4d       	sbci	r31, 0xD7	; 215
    8616:	80 81       	ld	r24, Z
    8618:	91 81       	ldd	r25, Z+1	; 0x01
    861a:	89 2b       	or	r24, r25
    861c:	09 f5       	brne	.+66     	; 0x8660 <udi_cdc_tx_send+0xaa>
    861e:	80 91 48 28 	lds	r24, 0x2848	; 0x802848 <sof_zlp_counter.5059>
    8622:	90 91 49 28 	lds	r25, 0x2849	; 0x802849 <sof_zlp_counter.5059+0x1>
    8626:	01 96       	adiw	r24, 0x01	; 1
    8628:	80 93 48 28 	sts	0x2848, r24	; 0x802848 <sof_zlp_counter.5059>
    862c:	90 93 49 28 	sts	0x2849, r25	; 0x802849 <sof_zlp_counter.5059+0x1>
    8630:	0e 94 8f 33 	call	0x671e	; 0x671e <udd_is_high_speed>
    8634:	81 11       	cpse	r24, r1
    8636:	07 c0       	rjmp	.+14     	; 0x8646 <udi_cdc_tx_send+0x90>
    8638:	80 91 48 28 	lds	r24, 0x2848	; 0x802848 <sof_zlp_counter.5059>
    863c:	90 91 49 28 	lds	r25, 0x2849	; 0x802849 <sof_zlp_counter.5059+0x1>
    8640:	84 36       	cpi	r24, 0x64	; 100
    8642:	91 05       	cpc	r25, r1
    8644:	58 f0       	brcs	.+22     	; 0x865c <udi_cdc_tx_send+0xa6>
    8646:	0e 94 8f 33 	call	0x671e	; 0x671e <udd_is_high_speed>
    864a:	88 23       	and	r24, r24
    864c:	49 f0       	breq	.+18     	; 0x8660 <udi_cdc_tx_send+0xaa>
    864e:	80 91 48 28 	lds	r24, 0x2848	; 0x802848 <sof_zlp_counter.5059>
    8652:	90 91 49 28 	lds	r25, 0x2849	; 0x802849 <sof_zlp_counter.5059+0x1>
    8656:	80 32       	cpi	r24, 0x20	; 32
    8658:	93 40       	sbci	r25, 0x03	; 3
    865a:	10 f4       	brcc	.+4      	; 0x8660 <udi_cdc_tx_send+0xaa>
    865c:	1f bf       	out	0x3f, r17	; 63
    865e:	56 c0       	rjmp	.+172    	; 0x870c <udi_cdc_tx_send+0x156>
    8660:	10 92 48 28 	sts	0x2848, r1	; 0x802848 <sof_zlp_counter.5059>
    8664:	10 92 49 28 	sts	0x2849, r1	; 0x802849 <sof_zlp_counter.5059+0x1>
    8668:	80 91 4a 28 	lds	r24, 0x284A	; 0x80284a <udi_cdc_tx_both_buf_to_send>
    866c:	81 11       	cpse	r24, r1
    866e:	06 c0       	rjmp	.+12     	; 0x867c <udi_cdc_tx_send+0xc6>
    8670:	81 e0       	ldi	r24, 0x01	; 1
    8672:	01 11       	cpse	r16, r1
    8674:	80 e0       	ldi	r24, 0x00	; 0
    8676:	80 93 4e 28 	sts	0x284E, r24	; 0x80284e <udi_cdc_tx_buf_sel>
    867a:	04 c0       	rjmp	.+8      	; 0x8684 <udi_cdc_tx_send+0xce>
    867c:	81 e0       	ldi	r24, 0x01	; 1
    867e:	01 11       	cpse	r16, r1
    8680:	80 e0       	ldi	r24, 0x00	; 0
    8682:	08 2f       	mov	r16, r24
    8684:	81 e0       	ldi	r24, 0x01	; 1
    8686:	80 93 4b 28 	sts	0x284B, r24	; 0x80284b <udi_cdc_tx_trans_ongoing>
    868a:	1f bf       	out	0x3f, r17	; 63
    868c:	10 e0       	ldi	r17, 0x00	; 0
    868e:	f8 01       	movw	r30, r16
    8690:	ee 0f       	add	r30, r30
    8692:	ff 1f       	adc	r31, r31
    8694:	e1 5b       	subi	r30, 0xB1	; 177
    8696:	f7 4d       	sbci	r31, 0xD7	; 215
    8698:	80 81       	ld	r24, Z
    869a:	91 81       	ldd	r25, Z+1	; 0x01
    869c:	ff 24       	eor	r15, r15
    869e:	f3 94       	inc	r15
    86a0:	80 34       	cpi	r24, 0x40	; 64
    86a2:	91 05       	cpc	r25, r1
    86a4:	09 f4       	brne	.+2      	; 0x86a8 <udi_cdc_tx_send+0xf2>
    86a6:	f1 2c       	mov	r15, r1
    86a8:	80 34       	cpi	r24, 0x40	; 64
    86aa:	91 05       	cpc	r25, r1
    86ac:	91 f0       	breq	.+36     	; 0x86d2 <udi_cdc_tx_send+0x11c>
    86ae:	0e 94 8f 33 	call	0x671e	; 0x671e <udd_is_high_speed>
    86b2:	88 23       	and	r24, r24
    86b4:	39 f0       	breq	.+14     	; 0x86c4 <udi_cdc_tx_send+0x10e>
    86b6:	0e 94 9c 33 	call	0x6738	; 0x6738 <udd_get_micro_frame_number>
    86ba:	80 93 4c 28 	sts	0x284C, r24	; 0x80284c <udi_cdc_tx_sof_num>
    86be:	90 93 4d 28 	sts	0x284D, r25	; 0x80284d <udi_cdc_tx_sof_num+0x1>
    86c2:	0b c0       	rjmp	.+22     	; 0x86da <udi_cdc_tx_send+0x124>
    86c4:	0e 94 97 33 	call	0x672e	; 0x672e <udd_get_frame_number>
    86c8:	80 93 4c 28 	sts	0x284C, r24	; 0x80284c <udi_cdc_tx_sof_num>
    86cc:	90 93 4d 28 	sts	0x284D, r25	; 0x80284d <udi_cdc_tx_sof_num+0x1>
    86d0:	04 c0       	rjmp	.+8      	; 0x86da <udi_cdc_tx_send+0x124>
    86d2:	10 92 4c 28 	sts	0x284C, r1	; 0x80284c <udi_cdc_tx_sof_num>
    86d6:	10 92 4d 28 	sts	0x284D, r1	; 0x80284d <udi_cdc_tx_sof_num+0x1>
    86da:	f8 01       	movw	r30, r16
    86dc:	ee 0f       	add	r30, r30
    86de:	ff 1f       	adc	r31, r31
    86e0:	e1 5b       	subi	r30, 0xB1	; 177
    86e2:	f7 4d       	sbci	r31, 0xD7	; 215
    86e4:	20 81       	ld	r18, Z
    86e6:	31 81       	ldd	r19, Z+1	; 0x01
    86e8:	a8 01       	movw	r20, r16
    86ea:	00 24       	eor	r0, r0
    86ec:	56 95       	lsr	r21
    86ee:	47 95       	ror	r20
    86f0:	07 94       	ror	r0
    86f2:	56 95       	lsr	r21
    86f4:	47 95       	ror	r20
    86f6:	07 94       	ror	r0
    86f8:	54 2f       	mov	r21, r20
    86fa:	40 2d       	mov	r20, r0
    86fc:	4c 5a       	subi	r20, 0xAC	; 172
    86fe:	57 4d       	sbci	r21, 0xD7	; 215
    8700:	00 e9       	ldi	r16, 0x90	; 144
    8702:	13 e4       	ldi	r17, 0x43	; 67
    8704:	6f 2d       	mov	r22, r15
    8706:	81 e8       	ldi	r24, 0x81	; 129
    8708:	0e 94 80 34 	call	0x6900	; 0x6900 <udd_ep_run>
    870c:	0f 90       	pop	r0
    870e:	df 91       	pop	r29
    8710:	cf 91       	pop	r28
    8712:	1f 91       	pop	r17
    8714:	0f 91       	pop	r16
    8716:	ff 90       	pop	r15
    8718:	08 95       	ret

0000871a <udi_cdc_data_sof_notify>:
    871a:	80 e0       	ldi	r24, 0x00	; 0
    871c:	4c cf       	rjmp	.-360    	; 0x85b6 <udi_cdc_tx_send>
    871e:	08 95       	ret

00008720 <udi_cdc_data_sent>:
    8720:	81 11       	cpse	r24, r1
    8722:	19 c0       	rjmp	.+50     	; 0x8756 <udi_cdc_data_sent+0x36>
    8724:	20 91 4e 28 	lds	r18, 0x284E	; 0x80284e <udi_cdc_tx_buf_sel>
    8728:	81 e0       	ldi	r24, 0x01	; 1
    872a:	90 e0       	ldi	r25, 0x00	; 0
    872c:	22 23       	and	r18, r18
    872e:	11 f0       	breq	.+4      	; 0x8734 <udi_cdc_data_sent+0x14>
    8730:	80 e0       	ldi	r24, 0x00	; 0
    8732:	90 e0       	ldi	r25, 0x00	; 0
    8734:	88 0f       	add	r24, r24
    8736:	99 1f       	adc	r25, r25
    8738:	fc 01       	movw	r30, r24
    873a:	e1 5b       	subi	r30, 0xB1	; 177
    873c:	f7 4d       	sbci	r31, 0xD7	; 215
    873e:	10 82       	st	Z, r1
    8740:	11 82       	std	Z+1, r1	; 0x01
    8742:	10 92 4a 28 	sts	0x284A, r1	; 0x80284a <udi_cdc_tx_both_buf_to_send>
    8746:	10 92 4b 28 	sts	0x284B, r1	; 0x80284b <udi_cdc_tx_trans_ongoing>
    874a:	67 2b       	or	r22, r23
    874c:	11 f0       	breq	.+4      	; 0x8752 <udi_cdc_data_sent+0x32>
    874e:	80 e0       	ldi	r24, 0x00	; 0
    8750:	99 d8       	rcall	.-3790   	; 0x7884 <usb_callback_tx_empty_notify>
    8752:	80 e0       	ldi	r24, 0x00	; 0
    8754:	30 cf       	rjmp	.-416    	; 0x85b6 <udi_cdc_tx_send>
    8756:	08 95       	ret

00008758 <udi_cdc_data_disable>:
    8758:	80 91 5d 29 	lds	r24, 0x295D	; 0x80295d <udi_cdc_nb_data_enabled>
    875c:	81 50       	subi	r24, 0x01	; 1
    875e:	80 93 5d 29 	sts	0x295D, r24	; 0x80295d <udi_cdc_nb_data_enabled>
    8762:	80 91 5d 29 	lds	r24, 0x295D	; 0x80295d <udi_cdc_nb_data_enabled>
    8766:	87 d8       	rcall	.-3826   	; 0x7876 <usb_callback_cdc_disable>
    8768:	10 92 5c 29 	sts	0x295C, r1	; 0x80295c <udi_cdc_data_running>
    876c:	08 95       	ret

0000876e <udi_cdc_comm_setup>:
    876e:	cf 93       	push	r28
    8770:	df 93       	push	r29
    8772:	80 91 8f 29 	lds	r24, 0x298F	; 0x80298f <udd_g_ctrlreq>
    8776:	88 23       	and	r24, r24
    8778:	e4 f4       	brge	.+56     	; 0x87b2 <udi_cdc_comm_setup+0x44>
    877a:	80 76       	andi	r24, 0x60	; 96
    877c:	80 32       	cpi	r24, 0x20	; 32
    877e:	09 f0       	breq	.+2      	; 0x8782 <udi_cdc_comm_setup+0x14>
    8780:	47 c0       	rjmp	.+142    	; 0x8810 <udi_cdc_comm_setup+0xa2>
    8782:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x1>
    8786:	81 32       	cpi	r24, 0x21	; 33
    8788:	09 f0       	breq	.+2      	; 0x878c <udi_cdc_comm_setup+0x1e>
    878a:	44 c0       	rjmp	.+136    	; 0x8814 <udi_cdc_comm_setup+0xa6>
    878c:	80 91 95 29 	lds	r24, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    8790:	90 91 96 29 	lds	r25, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    8794:	07 97       	sbiw	r24, 0x07	; 7
    8796:	09 f0       	breq	.+2      	; 0x879a <udi_cdc_comm_setup+0x2c>
    8798:	3f c0       	rjmp	.+126    	; 0x8818 <udi_cdc_comm_setup+0xaa>
    879a:	ef e8       	ldi	r30, 0x8F	; 143
    879c:	f9 e2       	ldi	r31, 0x29	; 41
    879e:	8c e6       	ldi	r24, 0x6C	; 108
    87a0:	99 e2       	ldi	r25, 0x29	; 41
    87a2:	80 87       	std	Z+8, r24	; 0x08
    87a4:	91 87       	std	Z+9, r25	; 0x09
    87a6:	87 e0       	ldi	r24, 0x07	; 7
    87a8:	90 e0       	ldi	r25, 0x00	; 0
    87aa:	82 87       	std	Z+10, r24	; 0x0a
    87ac:	93 87       	std	Z+11, r25	; 0x0b
    87ae:	81 e0       	ldi	r24, 0x01	; 1
    87b0:	3a c0       	rjmp	.+116    	; 0x8826 <udi_cdc_comm_setup+0xb8>
    87b2:	80 76       	andi	r24, 0x60	; 96
    87b4:	80 32       	cpi	r24, 0x20	; 32
    87b6:	91 f5       	brne	.+100    	; 0x881c <udi_cdc_comm_setup+0xae>
    87b8:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x1>
    87bc:	80 32       	cpi	r24, 0x20	; 32
    87be:	19 f0       	breq	.+6      	; 0x87c6 <udi_cdc_comm_setup+0x58>
    87c0:	82 32       	cpi	r24, 0x22	; 34
    87c2:	b9 f0       	breq	.+46     	; 0x87f2 <udi_cdc_comm_setup+0x84>
    87c4:	2d c0       	rjmp	.+90     	; 0x8820 <udi_cdc_comm_setup+0xb2>
    87c6:	80 91 95 29 	lds	r24, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    87ca:	90 91 96 29 	lds	r25, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    87ce:	07 97       	sbiw	r24, 0x07	; 7
    87d0:	49 f5       	brne	.+82     	; 0x8824 <udi_cdc_comm_setup+0xb6>
    87d2:	ef e8       	ldi	r30, 0x8F	; 143
    87d4:	f9 e2       	ldi	r31, 0x29	; 41
    87d6:	86 ea       	ldi	r24, 0xA6	; 166
    87d8:	92 e4       	ldi	r25, 0x42	; 66
    87da:	84 87       	std	Z+12, r24	; 0x0c
    87dc:	95 87       	std	Z+13, r25	; 0x0d
    87de:	8c e6       	ldi	r24, 0x6C	; 108
    87e0:	99 e2       	ldi	r25, 0x29	; 41
    87e2:	80 87       	std	Z+8, r24	; 0x08
    87e4:	91 87       	std	Z+9, r25	; 0x09
    87e6:	87 e0       	ldi	r24, 0x07	; 7
    87e8:	90 e0       	ldi	r25, 0x00	; 0
    87ea:	82 87       	std	Z+10, r24	; 0x0a
    87ec:	93 87       	std	Z+11, r25	; 0x0b
    87ee:	81 e0       	ldi	r24, 0x01	; 1
    87f0:	1a c0       	rjmp	.+52     	; 0x8826 <udi_cdc_comm_setup+0xb8>
    87f2:	cf e8       	ldi	r28, 0x8F	; 143
    87f4:	d9 e2       	ldi	r29, 0x29	; 41
    87f6:	6a 81       	ldd	r22, Y+2	; 0x02
    87f8:	61 70       	andi	r22, 0x01	; 1
    87fa:	80 e0       	ldi	r24, 0x00	; 0
    87fc:	40 d8       	rcall	.-3968   	; 0x787e <usb_callback_cdc_set_dtr>
    87fe:	6a 81       	ldd	r22, Y+2	; 0x02
    8800:	7b 81       	ldd	r23, Y+3	; 0x03
    8802:	76 95       	lsr	r23
    8804:	67 95       	ror	r22
    8806:	61 70       	andi	r22, 0x01	; 1
    8808:	80 e0       	ldi	r24, 0x00	; 0
    880a:	3a d8       	rcall	.-3980   	; 0x7880 <usb_callback_cdc_set_rts>
    880c:	81 e0       	ldi	r24, 0x01	; 1
    880e:	0b c0       	rjmp	.+22     	; 0x8826 <udi_cdc_comm_setup+0xb8>
    8810:	80 e0       	ldi	r24, 0x00	; 0
    8812:	09 c0       	rjmp	.+18     	; 0x8826 <udi_cdc_comm_setup+0xb8>
    8814:	80 e0       	ldi	r24, 0x00	; 0
    8816:	07 c0       	rjmp	.+14     	; 0x8826 <udi_cdc_comm_setup+0xb8>
    8818:	80 e0       	ldi	r24, 0x00	; 0
    881a:	05 c0       	rjmp	.+10     	; 0x8826 <udi_cdc_comm_setup+0xb8>
    881c:	80 e0       	ldi	r24, 0x00	; 0
    881e:	03 c0       	rjmp	.+6      	; 0x8826 <udi_cdc_comm_setup+0xb8>
    8820:	80 e0       	ldi	r24, 0x00	; 0
    8822:	01 c0       	rjmp	.+2      	; 0x8826 <udi_cdc_comm_setup+0xb8>
    8824:	80 e0       	ldi	r24, 0x00	; 0
    8826:	df 91       	pop	r29
    8828:	cf 91       	pop	r28
    882a:	08 95       	ret

0000882c <udi_cdc_multi_get_nb_received_data>:
    882c:	cf 93       	push	r28
    882e:	df 93       	push	r29
    8830:	1f 92       	push	r1
    8832:	cd b7       	in	r28, 0x3d	; 61
    8834:	de b7       	in	r29, 0x3e	; 62
    8836:	8f b7       	in	r24, 0x3f	; 63
    8838:	89 83       	std	Y+1, r24	; 0x01
    883a:	f8 94       	cli
    883c:	49 81       	ldd	r20, Y+1	; 0x01
    883e:	20 91 d5 28 	lds	r18, 0x28D5	; 0x8028d5 <udi_cdc_rx_pos>
    8842:	30 91 d6 28 	lds	r19, 0x28D6	; 0x8028d6 <udi_cdc_rx_pos+0x1>
    8846:	e0 91 d7 28 	lds	r30, 0x28D7	; 0x8028d7 <udi_cdc_rx_buf_sel>
    884a:	f0 e0       	ldi	r31, 0x00	; 0
    884c:	ee 0f       	add	r30, r30
    884e:	ff 1f       	adc	r31, r31
    8850:	e8 52       	subi	r30, 0x28	; 40
    8852:	f7 4d       	sbci	r31, 0xD7	; 215
    8854:	80 81       	ld	r24, Z
    8856:	91 81       	ldd	r25, Z+1	; 0x01
    8858:	4f bf       	out	0x3f, r20	; 63
    885a:	82 1b       	sub	r24, r18
    885c:	93 0b       	sbc	r25, r19
    885e:	0f 90       	pop	r0
    8860:	df 91       	pop	r29
    8862:	cf 91       	pop	r28
    8864:	08 95       	ret

00008866 <udi_cdc_multi_is_rx_ready>:
    8866:	e2 df       	rcall	.-60     	; 0x882c <udi_cdc_multi_get_nb_received_data>
    8868:	21 e0       	ldi	r18, 0x01	; 1
    886a:	89 2b       	or	r24, r25
    886c:	09 f4       	brne	.+2      	; 0x8870 <udi_cdc_multi_is_rx_ready+0xa>
    886e:	20 e0       	ldi	r18, 0x00	; 0
    8870:	82 2f       	mov	r24, r18
    8872:	08 95       	ret

00008874 <udi_cdc_rx_start>:
    8874:	0f 93       	push	r16
    8876:	1f 93       	push	r17
    8878:	cf 93       	push	r28
    887a:	df 93       	push	r29
    887c:	1f 92       	push	r1
    887e:	cd b7       	in	r28, 0x3d	; 61
    8880:	de b7       	in	r29, 0x3e	; 62
    8882:	8f b7       	in	r24, 0x3f	; 63
    8884:	89 83       	std	Y+1, r24	; 0x01
    8886:	f8 94       	cli
    8888:	99 81       	ldd	r25, Y+1	; 0x01
    888a:	20 91 d7 28 	lds	r18, 0x28D7	; 0x8028d7 <udi_cdc_rx_buf_sel>
    888e:	80 91 d4 28 	lds	r24, 0x28D4	; 0x8028d4 <udi_cdc_rx_trans_ongoing>
    8892:	81 11       	cpse	r24, r1
    8894:	10 c0       	rjmp	.+32     	; 0x88b6 <udi_cdc_rx_start+0x42>
    8896:	60 91 d5 28 	lds	r22, 0x28D5	; 0x8028d5 <udi_cdc_rx_pos>
    889a:	70 91 d6 28 	lds	r23, 0x28D6	; 0x8028d6 <udi_cdc_rx_pos+0x1>
    889e:	02 2f       	mov	r16, r18
    88a0:	10 e0       	ldi	r17, 0x00	; 0
    88a2:	f8 01       	movw	r30, r16
    88a4:	ee 0f       	add	r30, r30
    88a6:	ff 1f       	adc	r31, r31
    88a8:	e8 52       	subi	r30, 0x28	; 40
    88aa:	f7 4d       	sbci	r31, 0xD7	; 215
    88ac:	40 81       	ld	r20, Z
    88ae:	51 81       	ldd	r21, Z+1	; 0x01
    88b0:	64 17       	cp	r22, r20
    88b2:	75 07       	cpc	r23, r21
    88b4:	18 f4       	brcc	.+6      	; 0x88bc <udi_cdc_rx_start+0x48>
    88b6:	9f bf       	out	0x3f, r25	; 63
    88b8:	80 e0       	ldi	r24, 0x00	; 0
    88ba:	28 c0       	rjmp	.+80     	; 0x890c <udi_cdc_rx_start+0x98>
    88bc:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <udi_cdc_rx_pos>
    88c0:	10 92 d6 28 	sts	0x28D6, r1	; 0x8028d6 <udi_cdc_rx_pos+0x1>
    88c4:	81 e0       	ldi	r24, 0x01	; 1
    88c6:	21 11       	cpse	r18, r1
    88c8:	80 e0       	ldi	r24, 0x00	; 0
    88ca:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <udi_cdc_rx_buf_sel>
    88ce:	81 e0       	ldi	r24, 0x01	; 1
    88d0:	80 93 d4 28 	sts	0x28D4, r24	; 0x8028d4 <udi_cdc_rx_trans_ongoing>
    88d4:	9f bf       	out	0x3f, r25	; 63
    88d6:	80 e0       	ldi	r24, 0x00	; 0
    88d8:	c6 df       	rcall	.-116    	; 0x8866 <udi_cdc_multi_is_rx_ready>
    88da:	88 23       	and	r24, r24
    88dc:	19 f0       	breq	.+6      	; 0x88e4 <udi_cdc_rx_start+0x70>
    88de:	80 e0       	ldi	r24, 0x00	; 0
    88e0:	0e 94 41 3c 	call	0x7882	; 0x7882 <usb_callback_rx_notify>
    88e4:	a8 01       	movw	r20, r16
    88e6:	00 24       	eor	r0, r0
    88e8:	56 95       	lsr	r21
    88ea:	47 95       	ror	r20
    88ec:	07 94       	ror	r0
    88ee:	56 95       	lsr	r21
    88f0:	47 95       	ror	r20
    88f2:	07 94       	ror	r0
    88f4:	54 2f       	mov	r21, r20
    88f6:	40 2d       	mov	r20, r0
    88f8:	44 52       	subi	r20, 0x24	; 36
    88fa:	57 4d       	sbci	r21, 0xD7	; 215
    88fc:	0e eb       	ldi	r16, 0xBE	; 190
    88fe:	14 e4       	ldi	r17, 0x44	; 68
    8900:	20 e4       	ldi	r18, 0x40	; 64
    8902:	30 e0       	ldi	r19, 0x00	; 0
    8904:	61 e0       	ldi	r22, 0x01	; 1
    8906:	82 e0       	ldi	r24, 0x02	; 2
    8908:	0e 94 80 34 	call	0x6900	; 0x6900 <udd_ep_run>
    890c:	0f 90       	pop	r0
    890e:	df 91       	pop	r29
    8910:	cf 91       	pop	r28
    8912:	1f 91       	pop	r17
    8914:	0f 91       	pop	r16
    8916:	08 95       	ret

00008918 <udi_cdc_data_enable>:
    8918:	10 92 5d 29 	sts	0x295D, r1	; 0x80295d <udi_cdc_nb_data_enabled>
    891c:	10 92 4b 28 	sts	0x284B, r1	; 0x80284b <udi_cdc_tx_trans_ongoing>
    8920:	10 92 4a 28 	sts	0x284A, r1	; 0x80284a <udi_cdc_tx_both_buf_to_send>
    8924:	10 92 4e 28 	sts	0x284E, r1	; 0x80284e <udi_cdc_tx_buf_sel>
    8928:	ef e4       	ldi	r30, 0x4F	; 79
    892a:	f8 e2       	ldi	r31, 0x28	; 40
    892c:	10 82       	st	Z, r1
    892e:	11 82       	std	Z+1, r1	; 0x01
    8930:	12 82       	std	Z+2, r1	; 0x02
    8932:	13 82       	std	Z+3, r1	; 0x03
    8934:	10 92 4c 28 	sts	0x284C, r1	; 0x80284c <udi_cdc_tx_sof_num>
    8938:	10 92 4d 28 	sts	0x284D, r1	; 0x80284d <udi_cdc_tx_sof_num+0x1>
    893c:	80 e0       	ldi	r24, 0x00	; 0
    893e:	3b de       	rcall	.-906    	; 0x85b6 <udi_cdc_tx_send>
    8940:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <udi_cdc_rx_trans_ongoing>
    8944:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <udi_cdc_rx_buf_sel>
    8948:	e8 ed       	ldi	r30, 0xD8	; 216
    894a:	f8 e2       	ldi	r31, 0x28	; 40
    894c:	10 82       	st	Z, r1
    894e:	11 82       	std	Z+1, r1	; 0x01
    8950:	12 82       	std	Z+2, r1	; 0x02
    8952:	13 82       	std	Z+3, r1	; 0x03
    8954:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <udi_cdc_rx_pos>
    8958:	10 92 d6 28 	sts	0x28D6, r1	; 0x8028d6 <udi_cdc_rx_pos+0x1>
    895c:	80 e0       	ldi	r24, 0x00	; 0
    895e:	8a df       	rcall	.-236    	; 0x8874 <udi_cdc_rx_start>
    8960:	88 23       	and	r24, r24
    8962:	59 f0       	breq	.+22     	; 0x897a <udi_cdc_data_enable+0x62>
    8964:	90 91 5d 29 	lds	r25, 0x295D	; 0x80295d <udi_cdc_nb_data_enabled>
    8968:	9f 5f       	subi	r25, 0xFF	; 255
    896a:	90 93 5d 29 	sts	0x295D, r25	; 0x80295d <udi_cdc_nb_data_enabled>
    896e:	90 91 5d 29 	lds	r25, 0x295D	; 0x80295d <udi_cdc_nb_data_enabled>
    8972:	91 30       	cpi	r25, 0x01	; 1
    8974:	11 f4       	brne	.+4      	; 0x897a <udi_cdc_data_enable+0x62>
    8976:	90 93 5c 29 	sts	0x295C, r25	; 0x80295c <udi_cdc_data_running>
    897a:	08 95       	ret

0000897c <udi_cdc_data_received>:
    897c:	0f 93       	push	r16
    897e:	1f 93       	push	r17
    8980:	81 11       	cpse	r24, r1
    8982:	29 c0       	rjmp	.+82     	; 0x89d6 <udi_cdc_data_received+0x5a>
    8984:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <udi_cdc_rx_buf_sel>
    8988:	e1 e0       	ldi	r30, 0x01	; 1
    898a:	81 11       	cpse	r24, r1
    898c:	e0 e0       	ldi	r30, 0x00	; 0
    898e:	84 2f       	mov	r24, r20
    8990:	61 15       	cp	r22, r1
    8992:	71 05       	cpc	r23, r1
    8994:	a9 f4       	brne	.+42     	; 0x89c0 <udi_cdc_data_received+0x44>
    8996:	4e 2f       	mov	r20, r30
    8998:	50 e0       	ldi	r21, 0x00	; 0
    899a:	00 24       	eor	r0, r0
    899c:	56 95       	lsr	r21
    899e:	47 95       	ror	r20
    89a0:	07 94       	ror	r0
    89a2:	56 95       	lsr	r21
    89a4:	47 95       	ror	r20
    89a6:	07 94       	ror	r0
    89a8:	54 2f       	mov	r21, r20
    89aa:	40 2d       	mov	r20, r0
    89ac:	44 52       	subi	r20, 0x24	; 36
    89ae:	57 4d       	sbci	r21, 0xD7	; 215
    89b0:	0e eb       	ldi	r16, 0xBE	; 190
    89b2:	14 e4       	ldi	r17, 0x44	; 68
    89b4:	20 e4       	ldi	r18, 0x40	; 64
    89b6:	30 e0       	ldi	r19, 0x00	; 0
    89b8:	61 e0       	ldi	r22, 0x01	; 1
    89ba:	0e 94 80 34 	call	0x6900	; 0x6900 <udd_ep_run>
    89be:	0b c0       	rjmp	.+22     	; 0x89d6 <udi_cdc_data_received+0x5a>
    89c0:	f0 e0       	ldi	r31, 0x00	; 0
    89c2:	ee 0f       	add	r30, r30
    89c4:	ff 1f       	adc	r31, r31
    89c6:	e8 52       	subi	r30, 0x28	; 40
    89c8:	f7 4d       	sbci	r31, 0xD7	; 215
    89ca:	60 83       	st	Z, r22
    89cc:	71 83       	std	Z+1, r23	; 0x01
    89ce:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <udi_cdc_rx_trans_ongoing>
    89d2:	80 e0       	ldi	r24, 0x00	; 0
    89d4:	4f df       	rcall	.-354    	; 0x8874 <udi_cdc_rx_start>
    89d6:	1f 91       	pop	r17
    89d8:	0f 91       	pop	r16
    89da:	08 95       	ret

000089dc <udi_cdc_multi_getc>:
    89dc:	ef 92       	push	r14
    89de:	ff 92       	push	r15
    89e0:	1f 93       	push	r17
    89e2:	cf 93       	push	r28
    89e4:	df 93       	push	r29
    89e6:	1f 92       	push	r1
    89e8:	cd b7       	in	r28, 0x3d	; 61
    89ea:	de b7       	in	r29, 0x3e	; 62
    89ec:	11 e0       	ldi	r17, 0x01	; 1
    89ee:	80 91 72 29 	lds	r24, 0x2972	; 0x802972 <udi_cdc_line_coding+0x6>
    89f2:	89 30       	cpi	r24, 0x09	; 9
    89f4:	09 f0       	breq	.+2      	; 0x89f8 <udi_cdc_multi_getc+0x1c>
    89f6:	10 e0       	ldi	r17, 0x00	; 0
    89f8:	40 e0       	ldi	r20, 0x00	; 0
    89fa:	50 e0       	ldi	r21, 0x00	; 0
    89fc:	8f b7       	in	r24, 0x3f	; 63
    89fe:	89 83       	std	Y+1, r24	; 0x01
    8a00:	f8 94       	cli
    8a02:	a9 81       	ldd	r26, Y+1	; 0x01
    8a04:	20 91 d5 28 	lds	r18, 0x28D5	; 0x8028d5 <udi_cdc_rx_pos>
    8a08:	30 91 d6 28 	lds	r19, 0x28D6	; 0x8028d6 <udi_cdc_rx_pos+0x1>
    8a0c:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <udi_cdc_rx_buf_sel>
    8a10:	90 e0       	ldi	r25, 0x00	; 0
    8a12:	fc 01       	movw	r30, r24
    8a14:	ee 0f       	add	r30, r30
    8a16:	ff 1f       	adc	r31, r31
    8a18:	e8 52       	subi	r30, 0x28	; 40
    8a1a:	f7 4d       	sbci	r31, 0xD7	; 215
    8a1c:	60 81       	ld	r22, Z
    8a1e:	71 81       	ldd	r23, Z+1	; 0x01
    8a20:	af bf       	out	0x3f, r26	; 63
    8a22:	26 17       	cp	r18, r22
    8a24:	37 07       	cpc	r19, r23
    8a26:	30 f0       	brcs	.+12     	; 0x8a34 <udi_cdc_multi_getc+0x58>
    8a28:	80 91 5c 29 	lds	r24, 0x295C	; 0x80295c <udi_cdc_data_running>
    8a2c:	81 11       	cpse	r24, r1
    8a2e:	e6 cf       	rjmp	.-52     	; 0x89fc <udi_cdc_multi_getc+0x20>
    8a30:	90 e0       	ldi	r25, 0x00	; 0
    8a32:	21 c0       	rjmp	.+66     	; 0x8a76 <udi_cdc_multi_getc+0x9a>
    8a34:	fc 01       	movw	r30, r24
    8a36:	00 24       	eor	r0, r0
    8a38:	f6 95       	lsr	r31
    8a3a:	e7 95       	ror	r30
    8a3c:	07 94       	ror	r0
    8a3e:	f6 95       	lsr	r31
    8a40:	e7 95       	ror	r30
    8a42:	07 94       	ror	r0
    8a44:	fe 2f       	mov	r31, r30
    8a46:	e0 2d       	mov	r30, r0
    8a48:	e4 52       	subi	r30, 0x24	; 36
    8a4a:	f7 4d       	sbci	r31, 0xD7	; 215
    8a4c:	e2 0f       	add	r30, r18
    8a4e:	f3 1f       	adc	r31, r19
    8a50:	80 81       	ld	r24, Z
    8a52:	7a 01       	movw	r14, r20
    8a54:	e8 2a       	or	r14, r24
    8a56:	2f 5f       	subi	r18, 0xFF	; 255
    8a58:	3f 4f       	sbci	r19, 0xFF	; 255
    8a5a:	20 93 d5 28 	sts	0x28D5, r18	; 0x8028d5 <udi_cdc_rx_pos>
    8a5e:	30 93 d6 28 	sts	0x28D6, r19	; 0x8028d6 <udi_cdc_rx_pos+0x1>
    8a62:	80 e0       	ldi	r24, 0x00	; 0
    8a64:	07 df       	rcall	.-498    	; 0x8874 <udi_cdc_rx_start>
    8a66:	11 23       	and	r17, r17
    8a68:	21 f0       	breq	.+8      	; 0x8a72 <udi_cdc_multi_getc+0x96>
    8a6a:	5e 2d       	mov	r21, r14
    8a6c:	44 27       	eor	r20, r20
    8a6e:	10 e0       	ldi	r17, 0x00	; 0
    8a70:	c5 cf       	rjmp	.-118    	; 0x89fc <udi_cdc_multi_getc+0x20>
    8a72:	8e 2d       	mov	r24, r14
    8a74:	9f 2d       	mov	r25, r15
    8a76:	0f 90       	pop	r0
    8a78:	df 91       	pop	r29
    8a7a:	cf 91       	pop	r28
    8a7c:	1f 91       	pop	r17
    8a7e:	ff 90       	pop	r15
    8a80:	ef 90       	pop	r14
    8a82:	08 95       	ret

00008a84 <udi_cdc_getc>:
    8a84:	80 e0       	ldi	r24, 0x00	; 0
    8a86:	aa cf       	rjmp	.-172    	; 0x89dc <udi_cdc_multi_getc>
    8a88:	08 95       	ret

00008a8a <udi_cdc_multi_get_free_tx_buffer>:
    8a8a:	cf 93       	push	r28
    8a8c:	df 93       	push	r29
    8a8e:	1f 92       	push	r1
    8a90:	cd b7       	in	r28, 0x3d	; 61
    8a92:	de b7       	in	r29, 0x3e	; 62
    8a94:	8f b7       	in	r24, 0x3f	; 63
    8a96:	89 83       	std	Y+1, r24	; 0x01
    8a98:	f8 94       	cli
    8a9a:	99 81       	ldd	r25, Y+1	; 0x01
    8a9c:	80 91 4e 28 	lds	r24, 0x284E	; 0x80284e <udi_cdc_tx_buf_sel>
    8aa0:	e8 2f       	mov	r30, r24
    8aa2:	f0 e0       	ldi	r31, 0x00	; 0
    8aa4:	ee 0f       	add	r30, r30
    8aa6:	ff 1f       	adc	r31, r31
    8aa8:	e1 5b       	subi	r30, 0xB1	; 177
    8aaa:	f7 4d       	sbci	r31, 0xD7	; 215
    8aac:	20 81       	ld	r18, Z
    8aae:	31 81       	ldd	r19, Z+1	; 0x01
    8ab0:	20 34       	cpi	r18, 0x40	; 64
    8ab2:	31 05       	cpc	r19, r1
    8ab4:	89 f4       	brne	.+34     	; 0x8ad8 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    8ab6:	40 91 4b 28 	lds	r20, 0x284B	; 0x80284b <udi_cdc_tx_trans_ongoing>
    8aba:	41 11       	cpse	r20, r1
    8abc:	0d c0       	rjmp	.+26     	; 0x8ad8 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    8abe:	40 91 4a 28 	lds	r20, 0x284A	; 0x80284a <udi_cdc_tx_both_buf_to_send>
    8ac2:	41 11       	cpse	r20, r1
    8ac4:	09 c0       	rjmp	.+18     	; 0x8ad8 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    8ac6:	21 e0       	ldi	r18, 0x01	; 1
    8ac8:	20 93 4a 28 	sts	0x284A, r18	; 0x80284a <udi_cdc_tx_both_buf_to_send>
    8acc:	81 11       	cpse	r24, r1
    8ace:	20 e0       	ldi	r18, 0x00	; 0
    8ad0:	20 93 4e 28 	sts	0x284E, r18	; 0x80284e <udi_cdc_tx_buf_sel>
    8ad4:	20 e0       	ldi	r18, 0x00	; 0
    8ad6:	30 e0       	ldi	r19, 0x00	; 0
    8ad8:	9f bf       	out	0x3f, r25	; 63
    8ada:	80 e4       	ldi	r24, 0x40	; 64
    8adc:	90 e0       	ldi	r25, 0x00	; 0
    8ade:	82 1b       	sub	r24, r18
    8ae0:	93 0b       	sbc	r25, r19
    8ae2:	0f 90       	pop	r0
    8ae4:	df 91       	pop	r29
    8ae6:	cf 91       	pop	r28
    8ae8:	08 95       	ret

00008aea <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    8aea:	cf df       	rcall	.-98     	; 0x8a8a <udi_cdc_multi_get_free_tx_buffer>
    8aec:	21 e0       	ldi	r18, 0x01	; 1
    8aee:	89 2b       	or	r24, r25
    8af0:	09 f4       	brne	.+2      	; 0x8af4 <udi_cdc_multi_is_tx_ready+0xa>
    8af2:	20 e0       	ldi	r18, 0x00	; 0
    8af4:	82 2f       	mov	r24, r18
    8af6:	08 95       	ret

00008af8 <udi_cdc_multi_putc>:
    8af8:	ff 92       	push	r15
    8afa:	0f 93       	push	r16
    8afc:	1f 93       	push	r17
    8afe:	cf 93       	push	r28
    8b00:	df 93       	push	r29
    8b02:	1f 92       	push	r1
    8b04:	cd b7       	in	r28, 0x3d	; 61
    8b06:	de b7       	in	r29, 0x3e	; 62
    8b08:	f6 2e       	mov	r15, r22
    8b0a:	17 2f       	mov	r17, r23
    8b0c:	01 e0       	ldi	r16, 0x01	; 1
    8b0e:	80 91 72 29 	lds	r24, 0x2972	; 0x802972 <udi_cdc_line_coding+0x6>
    8b12:	89 30       	cpi	r24, 0x09	; 9
    8b14:	09 f0       	breq	.+2      	; 0x8b18 <udi_cdc_multi_putc+0x20>
    8b16:	00 e0       	ldi	r16, 0x00	; 0
    8b18:	80 e0       	ldi	r24, 0x00	; 0
    8b1a:	e7 df       	rcall	.-50     	; 0x8aea <udi_cdc_multi_is_tx_ready>
    8b1c:	81 11       	cpse	r24, r1
    8b1e:	07 c0       	rjmp	.+14     	; 0x8b2e <udi_cdc_multi_putc+0x36>
    8b20:	80 91 5c 29 	lds	r24, 0x295C	; 0x80295c <udi_cdc_data_running>
    8b24:	81 11       	cpse	r24, r1
    8b26:	f8 cf       	rjmp	.-16     	; 0x8b18 <udi_cdc_multi_putc+0x20>
    8b28:	80 e0       	ldi	r24, 0x00	; 0
    8b2a:	90 e0       	ldi	r25, 0x00	; 0
    8b2c:	2c c0       	rjmp	.+88     	; 0x8b86 <udi_cdc_multi_putc+0x8e>
    8b2e:	8f b7       	in	r24, 0x3f	; 63
    8b30:	89 83       	std	Y+1, r24	; 0x01
    8b32:	f8 94       	cli
    8b34:	49 81       	ldd	r20, Y+1	; 0x01
    8b36:	80 91 4e 28 	lds	r24, 0x284E	; 0x80284e <udi_cdc_tx_buf_sel>
    8b3a:	90 e0       	ldi	r25, 0x00	; 0
    8b3c:	fc 01       	movw	r30, r24
    8b3e:	ee 0f       	add	r30, r30
    8b40:	ff 1f       	adc	r31, r31
    8b42:	e1 5b       	subi	r30, 0xB1	; 177
    8b44:	f7 4d       	sbci	r31, 0xD7	; 215
    8b46:	20 81       	ld	r18, Z
    8b48:	31 81       	ldd	r19, Z+1	; 0x01
    8b4a:	b9 01       	movw	r22, r18
    8b4c:	6f 5f       	subi	r22, 0xFF	; 255
    8b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    8b50:	60 83       	st	Z, r22
    8b52:	71 83       	std	Z+1, r23	; 0x01
    8b54:	00 24       	eor	r0, r0
    8b56:	96 95       	lsr	r25
    8b58:	87 95       	ror	r24
    8b5a:	07 94       	ror	r0
    8b5c:	96 95       	lsr	r25
    8b5e:	87 95       	ror	r24
    8b60:	07 94       	ror	r0
    8b62:	98 2f       	mov	r25, r24
    8b64:	80 2d       	mov	r24, r0
    8b66:	8c 5a       	subi	r24, 0xAC	; 172
    8b68:	97 4d       	sbci	r25, 0xD7	; 215
    8b6a:	fc 01       	movw	r30, r24
    8b6c:	e2 0f       	add	r30, r18
    8b6e:	f3 1f       	adc	r31, r19
    8b70:	f0 82       	st	Z, r15
    8b72:	4f bf       	out	0x3f, r20	; 63
    8b74:	00 23       	and	r16, r16
    8b76:	29 f0       	breq	.+10     	; 0x8b82 <udi_cdc_multi_putc+0x8a>
    8b78:	f1 2e       	mov	r15, r17
    8b7a:	11 0f       	add	r17, r17
    8b7c:	11 0b       	sbc	r17, r17
    8b7e:	00 e0       	ldi	r16, 0x00	; 0
    8b80:	cb cf       	rjmp	.-106    	; 0x8b18 <udi_cdc_multi_putc+0x20>
    8b82:	81 e0       	ldi	r24, 0x01	; 1
    8b84:	90 e0       	ldi	r25, 0x00	; 0
    8b86:	0f 90       	pop	r0
    8b88:	df 91       	pop	r29
    8b8a:	cf 91       	pop	r28
    8b8c:	1f 91       	pop	r17
    8b8e:	0f 91       	pop	r16
    8b90:	ff 90       	pop	r15
    8b92:	08 95       	ret

00008b94 <udi_cdc_putc>:
    8b94:	bc 01       	movw	r22, r24
    8b96:	80 e0       	ldi	r24, 0x00	; 0
    8b98:	af cf       	rjmp	.-162    	; 0x8af8 <udi_cdc_multi_putc>
    8b9a:	08 95       	ret

00008b9c <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    8b9c:	e0 91 78 29 	lds	r30, 0x2978	; 0x802978 <udc_ptr_conf>
    8ba0:	f0 91 79 29 	lds	r31, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    8ba4:	01 90       	ld	r0, Z+
    8ba6:	f0 81       	ld	r31, Z
    8ba8:	e0 2d       	mov	r30, r0
    8baa:	22 81       	ldd	r18, Z+2	; 0x02
    8bac:	33 81       	ldd	r19, Z+3	; 0x03
    8bae:	2e 0f       	add	r18, r30
    8bb0:	3f 1f       	adc	r19, r31
    8bb2:	fc 01       	movw	r30, r24
    8bb4:	40 81       	ld	r20, Z
    8bb6:	e4 0f       	add	r30, r20
    8bb8:	f1 1d       	adc	r31, r1
    8bba:	e2 17       	cp	r30, r18
    8bbc:	f3 07       	cpc	r31, r19
    8bbe:	a0 f4       	brcc	.+40     	; 0x8be8 <udc_next_desc_in_iface+0x4c>
    8bc0:	81 81       	ldd	r24, Z+1	; 0x01
    8bc2:	84 30       	cpi	r24, 0x04	; 4
    8bc4:	a1 f0       	breq	.+40     	; 0x8bee <udc_next_desc_in_iface+0x52>
    8bc6:	86 13       	cpse	r24, r22
    8bc8:	06 c0       	rjmp	.+12     	; 0x8bd6 <udc_next_desc_in_iface+0x3a>
    8bca:	14 c0       	rjmp	.+40     	; 0x8bf4 <udc_next_desc_in_iface+0x58>
    8bcc:	81 81       	ldd	r24, Z+1	; 0x01
    8bce:	84 30       	cpi	r24, 0x04	; 4
    8bd0:	a1 f0       	breq	.+40     	; 0x8bfa <udc_next_desc_in_iface+0x5e>
    8bd2:	86 17       	cp	r24, r22
    8bd4:	a9 f0       	breq	.+42     	; 0x8c00 <udc_next_desc_in_iface+0x64>
    8bd6:	80 81       	ld	r24, Z
    8bd8:	e8 0f       	add	r30, r24
    8bda:	f1 1d       	adc	r31, r1
    8bdc:	e2 17       	cp	r30, r18
    8bde:	f3 07       	cpc	r31, r19
    8be0:	a8 f3       	brcs	.-22     	; 0x8bcc <udc_next_desc_in_iface+0x30>
    8be2:	80 e0       	ldi	r24, 0x00	; 0
    8be4:	90 e0       	ldi	r25, 0x00	; 0
    8be6:	08 95       	ret
    8be8:	80 e0       	ldi	r24, 0x00	; 0
    8bea:	90 e0       	ldi	r25, 0x00	; 0
    8bec:	08 95       	ret
    8bee:	80 e0       	ldi	r24, 0x00	; 0
    8bf0:	90 e0       	ldi	r25, 0x00	; 0
    8bf2:	08 95       	ret
    8bf4:	8e 2f       	mov	r24, r30
    8bf6:	9f 2f       	mov	r25, r31
    8bf8:	08 95       	ret
    8bfa:	80 e0       	ldi	r24, 0x00	; 0
    8bfc:	90 e0       	ldi	r25, 0x00	; 0
    8bfe:	08 95       	ret
    8c00:	8e 2f       	mov	r24, r30
    8c02:	9f 2f       	mov	r25, r31
    8c04:	08 95       	ret

00008c06 <udc_valid_address>:
    8c06:	80 91 91 29 	lds	r24, 0x2991	; 0x802991 <udd_g_ctrlreq+0x2>
    8c0a:	8f 77       	andi	r24, 0x7F	; 127
    8c0c:	0c 94 91 33 	jmp	0x6722	; 0x6722 <udd_set_address>
    8c10:	08 95       	ret

00008c12 <udc_update_iface_desc>:
    8c12:	90 91 7a 29 	lds	r25, 0x297A	; 0x80297a <udc_num_configuration>
    8c16:	99 23       	and	r25, r25
    8c18:	81 f1       	breq	.+96     	; 0x8c7a <udc_update_iface_desc+0x68>
    8c1a:	e0 91 78 29 	lds	r30, 0x2978	; 0x802978 <udc_ptr_conf>
    8c1e:	f0 91 79 29 	lds	r31, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    8c22:	01 90       	ld	r0, Z+
    8c24:	f0 81       	ld	r31, Z
    8c26:	e0 2d       	mov	r30, r0
    8c28:	94 81       	ldd	r25, Z+4	; 0x04
    8c2a:	89 17       	cp	r24, r25
    8c2c:	40 f5       	brcc	.+80     	; 0x8c7e <udc_update_iface_desc+0x6c>
    8c2e:	e0 93 76 29 	sts	0x2976, r30	; 0x802976 <udc_ptr_iface>
    8c32:	f0 93 77 29 	sts	0x2977, r31	; 0x802977 <udc_ptr_iface+0x1>
    8c36:	22 81       	ldd	r18, Z+2	; 0x02
    8c38:	33 81       	ldd	r19, Z+3	; 0x03
    8c3a:	2e 0f       	add	r18, r30
    8c3c:	3f 1f       	adc	r19, r31
    8c3e:	e2 17       	cp	r30, r18
    8c40:	f3 07       	cpc	r31, r19
    8c42:	f8 f4       	brcc	.+62     	; 0x8c82 <udc_update_iface_desc+0x70>
    8c44:	91 81       	ldd	r25, Z+1	; 0x01
    8c46:	94 30       	cpi	r25, 0x04	; 4
    8c48:	61 f4       	brne	.+24     	; 0x8c62 <udc_update_iface_desc+0x50>
    8c4a:	92 81       	ldd	r25, Z+2	; 0x02
    8c4c:	89 13       	cpse	r24, r25
    8c4e:	09 c0       	rjmp	.+18     	; 0x8c62 <udc_update_iface_desc+0x50>
    8c50:	93 81       	ldd	r25, Z+3	; 0x03
    8c52:	96 13       	cpse	r25, r22
    8c54:	06 c0       	rjmp	.+12     	; 0x8c62 <udc_update_iface_desc+0x50>
    8c56:	e0 93 76 29 	sts	0x2976, r30	; 0x802976 <udc_ptr_iface>
    8c5a:	f0 93 77 29 	sts	0x2977, r31	; 0x802977 <udc_ptr_iface+0x1>
    8c5e:	81 e0       	ldi	r24, 0x01	; 1
    8c60:	08 95       	ret
    8c62:	90 81       	ld	r25, Z
    8c64:	e9 0f       	add	r30, r25
    8c66:	f1 1d       	adc	r31, r1
    8c68:	e2 17       	cp	r30, r18
    8c6a:	f3 07       	cpc	r31, r19
    8c6c:	58 f3       	brcs	.-42     	; 0x8c44 <udc_update_iface_desc+0x32>
    8c6e:	e0 93 76 29 	sts	0x2976, r30	; 0x802976 <udc_ptr_iface>
    8c72:	f0 93 77 29 	sts	0x2977, r31	; 0x802977 <udc_ptr_iface+0x1>
    8c76:	80 e0       	ldi	r24, 0x00	; 0
    8c78:	08 95       	ret
    8c7a:	80 e0       	ldi	r24, 0x00	; 0
    8c7c:	08 95       	ret
    8c7e:	80 e0       	ldi	r24, 0x00	; 0
    8c80:	08 95       	ret
    8c82:	80 e0       	ldi	r24, 0x00	; 0
    8c84:	08 95       	ret

00008c86 <udc_iface_disable>:
    8c86:	ef 92       	push	r14
    8c88:	ff 92       	push	r15
    8c8a:	1f 93       	push	r17
    8c8c:	cf 93       	push	r28
    8c8e:	df 93       	push	r29
    8c90:	c8 2f       	mov	r28, r24
    8c92:	60 e0       	ldi	r22, 0x00	; 0
    8c94:	be df       	rcall	.-132    	; 0x8c12 <udc_update_iface_desc>
    8c96:	18 2f       	mov	r17, r24
    8c98:	88 23       	and	r24, r24
    8c9a:	81 f1       	breq	.+96     	; 0x8cfc <udc_iface_disable+0x76>
    8c9c:	a0 91 78 29 	lds	r26, 0x2978	; 0x802978 <udc_ptr_conf>
    8ca0:	b0 91 79 29 	lds	r27, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    8ca4:	ec 2f       	mov	r30, r28
    8ca6:	f0 e0       	ldi	r31, 0x00	; 0
    8ca8:	ee 0f       	add	r30, r30
    8caa:	ff 1f       	adc	r31, r31
    8cac:	12 96       	adiw	r26, 0x02	; 2
    8cae:	8d 91       	ld	r24, X+
    8cb0:	9c 91       	ld	r25, X
    8cb2:	13 97       	sbiw	r26, 0x03	; 3
    8cb4:	e8 0f       	add	r30, r24
    8cb6:	f9 1f       	adc	r31, r25
    8cb8:	e0 80       	ld	r14, Z
    8cba:	f1 80       	ldd	r15, Z+1	; 0x01
    8cbc:	d7 01       	movw	r26, r14
    8cbe:	16 96       	adiw	r26, 0x06	; 6
    8cc0:	ed 91       	ld	r30, X+
    8cc2:	fc 91       	ld	r31, X
    8cc4:	17 97       	sbiw	r26, 0x07	; 7
    8cc6:	19 95       	eicall
    8cc8:	68 2f       	mov	r22, r24
    8cca:	8c 2f       	mov	r24, r28
    8ccc:	a2 df       	rcall	.-188    	; 0x8c12 <udc_update_iface_desc>
    8cce:	18 2f       	mov	r17, r24
    8cd0:	88 23       	and	r24, r24
    8cd2:	a1 f0       	breq	.+40     	; 0x8cfc <udc_iface_disable+0x76>
    8cd4:	c0 91 76 29 	lds	r28, 0x2976	; 0x802976 <udc_ptr_iface>
    8cd8:	d0 91 77 29 	lds	r29, 0x2977	; 0x802977 <udc_ptr_iface+0x1>
    8cdc:	65 e0       	ldi	r22, 0x05	; 5
    8cde:	ce 01       	movw	r24, r28
    8ce0:	5d df       	rcall	.-326    	; 0x8b9c <udc_next_desc_in_iface>
    8ce2:	ec 01       	movw	r28, r24
    8ce4:	89 2b       	or	r24, r25
    8ce6:	21 f0       	breq	.+8      	; 0x8cf0 <udc_iface_disable+0x6a>
    8ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    8cea:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <udd_ep_free>
    8cee:	f6 cf       	rjmp	.-20     	; 0x8cdc <udc_iface_disable+0x56>
    8cf0:	d7 01       	movw	r26, r14
    8cf2:	12 96       	adiw	r26, 0x02	; 2
    8cf4:	ed 91       	ld	r30, X+
    8cf6:	fc 91       	ld	r31, X
    8cf8:	13 97       	sbiw	r26, 0x03	; 3
    8cfa:	19 95       	eicall
    8cfc:	81 2f       	mov	r24, r17
    8cfe:	df 91       	pop	r29
    8d00:	cf 91       	pop	r28
    8d02:	1f 91       	pop	r17
    8d04:	ff 90       	pop	r15
    8d06:	ef 90       	pop	r14
    8d08:	08 95       	ret

00008d0a <udc_iface_enable>:
    8d0a:	1f 93       	push	r17
    8d0c:	cf 93       	push	r28
    8d0e:	df 93       	push	r29
    8d10:	18 2f       	mov	r17, r24
    8d12:	7f df       	rcall	.-258    	; 0x8c12 <udc_update_iface_desc>
    8d14:	88 23       	and	r24, r24
    8d16:	41 f1       	breq	.+80     	; 0x8d68 <udc_iface_enable+0x5e>
    8d18:	c0 91 76 29 	lds	r28, 0x2976	; 0x802976 <udc_ptr_iface>
    8d1c:	d0 91 77 29 	lds	r29, 0x2977	; 0x802977 <udc_ptr_iface+0x1>
    8d20:	65 e0       	ldi	r22, 0x05	; 5
    8d22:	ce 01       	movw	r24, r28
    8d24:	3b df       	rcall	.-394    	; 0x8b9c <udc_next_desc_in_iface>
    8d26:	ec 01       	movw	r28, r24
    8d28:	89 2b       	or	r24, r25
    8d2a:	49 f0       	breq	.+18     	; 0x8d3e <udc_iface_enable+0x34>
    8d2c:	4c 81       	ldd	r20, Y+4	; 0x04
    8d2e:	5d 81       	ldd	r21, Y+5	; 0x05
    8d30:	6b 81       	ldd	r22, Y+3	; 0x03
    8d32:	8a 81       	ldd	r24, Y+2	; 0x02
    8d34:	0e 94 a6 33 	call	0x674c	; 0x674c <udd_ep_alloc>
    8d38:	81 11       	cpse	r24, r1
    8d3a:	f2 cf       	rjmp	.-28     	; 0x8d20 <udc_iface_enable+0x16>
    8d3c:	15 c0       	rjmp	.+42     	; 0x8d68 <udc_iface_enable+0x5e>
    8d3e:	a0 91 78 29 	lds	r26, 0x2978	; 0x802978 <udc_ptr_conf>
    8d42:	b0 91 79 29 	lds	r27, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    8d46:	e1 2f       	mov	r30, r17
    8d48:	f0 e0       	ldi	r31, 0x00	; 0
    8d4a:	ee 0f       	add	r30, r30
    8d4c:	ff 1f       	adc	r31, r31
    8d4e:	12 96       	adiw	r26, 0x02	; 2
    8d50:	8d 91       	ld	r24, X+
    8d52:	9c 91       	ld	r25, X
    8d54:	13 97       	sbiw	r26, 0x03	; 3
    8d56:	e8 0f       	add	r30, r24
    8d58:	f9 1f       	adc	r31, r25
    8d5a:	01 90       	ld	r0, Z+
    8d5c:	f0 81       	ld	r31, Z
    8d5e:	e0 2d       	mov	r30, r0
    8d60:	01 90       	ld	r0, Z+
    8d62:	f0 81       	ld	r31, Z
    8d64:	e0 2d       	mov	r30, r0
    8d66:	19 95       	eicall
    8d68:	df 91       	pop	r29
    8d6a:	cf 91       	pop	r28
    8d6c:	1f 91       	pop	r17
    8d6e:	08 95       	ret

00008d70 <udc_start>:
    8d70:	0c 94 0a 33 	jmp	0x6614	; 0x6614 <udd_enable>
    8d74:	08 95       	ret

00008d76 <udc_reset>:
    8d76:	cf 93       	push	r28
    8d78:	80 91 7a 29 	lds	r24, 0x297A	; 0x80297a <udc_num_configuration>
    8d7c:	88 23       	and	r24, r24
    8d7e:	c1 f0       	breq	.+48     	; 0x8db0 <udc_reset+0x3a>
    8d80:	e0 91 78 29 	lds	r30, 0x2978	; 0x802978 <udc_ptr_conf>
    8d84:	f0 91 79 29 	lds	r31, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    8d88:	01 90       	ld	r0, Z+
    8d8a:	f0 81       	ld	r31, Z
    8d8c:	e0 2d       	mov	r30, r0
    8d8e:	84 81       	ldd	r24, Z+4	; 0x04
    8d90:	88 23       	and	r24, r24
    8d92:	71 f0       	breq	.+28     	; 0x8db0 <udc_reset+0x3a>
    8d94:	c0 e0       	ldi	r28, 0x00	; 0
    8d96:	8c 2f       	mov	r24, r28
    8d98:	76 df       	rcall	.-276    	; 0x8c86 <udc_iface_disable>
    8d9a:	cf 5f       	subi	r28, 0xFF	; 255
    8d9c:	e0 91 78 29 	lds	r30, 0x2978	; 0x802978 <udc_ptr_conf>
    8da0:	f0 91 79 29 	lds	r31, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    8da4:	01 90       	ld	r0, Z+
    8da6:	f0 81       	ld	r31, Z
    8da8:	e0 2d       	mov	r30, r0
    8daa:	84 81       	ldd	r24, Z+4	; 0x04
    8dac:	c8 17       	cp	r28, r24
    8dae:	98 f3       	brcs	.-26     	; 0x8d96 <udc_reset+0x20>
    8db0:	10 92 7a 29 	sts	0x297A, r1	; 0x80297a <udc_num_configuration>
    8db4:	80 91 7e 29 	lds	r24, 0x297E	; 0x80297e <udc_device_status>
    8db8:	81 fd       	sbrc	r24, 1
    8dba:	0e 94 36 3c 	call	0x786c	; 0x786c <usb_callback_remotewakeup_disable>
    8dbe:	10 92 7e 29 	sts	0x297E, r1	; 0x80297e <udc_device_status>
    8dc2:	10 92 7f 29 	sts	0x297F, r1	; 0x80297f <udc_device_status+0x1>
    8dc6:	cf 91       	pop	r28
    8dc8:	08 95       	ret

00008dca <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    8dca:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    8dcc:	80 91 7a 29 	lds	r24, 0x297A	; 0x80297a <udc_num_configuration>
    8dd0:	88 23       	and	r24, r24
    8dd2:	49 f1       	breq	.+82     	; 0x8e26 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    8dd4:	a0 91 78 29 	lds	r26, 0x2978	; 0x802978 <udc_ptr_conf>
    8dd8:	b0 91 79 29 	lds	r27, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    8ddc:	ed 91       	ld	r30, X+
    8dde:	fc 91       	ld	r31, X
    8de0:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    8de2:	84 81       	ldd	r24, Z+4	; 0x04
    8de4:	88 23       	and	r24, r24
    8de6:	f9 f0       	breq	.+62     	; 0x8e26 <udc_sof_notify+0x5c>
    8de8:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    8dea:	ec 2f       	mov	r30, r28
    8dec:	f0 e0       	ldi	r31, 0x00	; 0
    8dee:	ee 0f       	add	r30, r30
    8df0:	ff 1f       	adc	r31, r31
    8df2:	12 96       	adiw	r26, 0x02	; 2
    8df4:	8d 91       	ld	r24, X+
    8df6:	9c 91       	ld	r25, X
    8df8:	13 97       	sbiw	r26, 0x03	; 3
    8dfa:	e8 0f       	add	r30, r24
    8dfc:	f9 1f       	adc	r31, r25
    8dfe:	01 90       	ld	r0, Z+
    8e00:	f0 81       	ld	r31, Z
    8e02:	e0 2d       	mov	r30, r0
    8e04:	00 84       	ldd	r0, Z+8	; 0x08
    8e06:	f1 85       	ldd	r31, Z+9	; 0x09
    8e08:	e0 2d       	mov	r30, r0
    8e0a:	30 97       	sbiw	r30, 0x00	; 0
    8e0c:	09 f0       	breq	.+2      	; 0x8e10 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    8e0e:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    8e10:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    8e12:	a0 91 78 29 	lds	r26, 0x2978	; 0x802978 <udc_ptr_conf>
    8e16:	b0 91 79 29 	lds	r27, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    8e1a:	ed 91       	ld	r30, X+
    8e1c:	fc 91       	ld	r31, X
    8e1e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    8e20:	84 81       	ldd	r24, Z+4	; 0x04
    8e22:	c8 17       	cp	r28, r24
    8e24:	10 f3       	brcs	.-60     	; 0x8dea <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    8e26:	cf 91       	pop	r28
    8e28:	08 95       	ret

00008e2a <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    8e2a:	0f 93       	push	r16
    8e2c:	1f 93       	push	r17
    8e2e:	cf 93       	push	r28
    8e30:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    8e32:	ef e8       	ldi	r30, 0x8F	; 143
    8e34:	f9 e2       	ldi	r31, 0x29	; 41
    8e36:	12 86       	std	Z+10, r1	; 0x0a
    8e38:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    8e3a:	14 86       	std	Z+12, r1	; 0x0c
    8e3c:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    8e3e:	16 86       	std	Z+14, r1	; 0x0e
    8e40:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    8e42:	80 81       	ld	r24, Z
    8e44:	88 23       	and	r24, r24
    8e46:	0c f0       	brlt	.+2      	; 0x8e4a <udc_process_setup+0x20>
    8e48:	95 c2       	rjmp	.+1322   	; 0x9374 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    8e4a:	20 91 95 29 	lds	r18, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    8e4e:	30 91 96 29 	lds	r19, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    8e52:	21 15       	cp	r18, r1
    8e54:	31 05       	cpc	r19, r1
    8e56:	09 f0       	breq	.+2      	; 0x8e5a <udc_process_setup+0x30>
    8e58:	88 c2       	rjmp	.+1296   	; 0x936a <udc_process_setup+0x540>
    8e5a:	7f c2       	rjmp	.+1278   	; 0x935a <udc_process_setup+0x530>
    8e5c:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    8e5e:	09 f0       	breq	.+2      	; 0x8e62 <udc_process_setup+0x38>
    8e60:	ab c0       	rjmp	.+342    	; 0x8fb8 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    8e62:	90 91 90 29 	lds	r25, 0x2990	; 0x802990 <udd_g_ctrlreq+0x1>
    8e66:	96 30       	cpi	r25, 0x06	; 6
    8e68:	81 f0       	breq	.+32     	; 0x8e8a <udc_process_setup+0x60>
    8e6a:	98 30       	cpi	r25, 0x08	; 8
    8e6c:	09 f4       	brne	.+2      	; 0x8e70 <udc_process_setup+0x46>
    8e6e:	99 c0       	rjmp	.+306    	; 0x8fa2 <udc_process_setup+0x178>
    8e70:	91 11       	cpse	r25, r1
    8e72:	a2 c0       	rjmp	.+324    	; 0x8fb8 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    8e74:	22 30       	cpi	r18, 0x02	; 2
    8e76:	31 05       	cpc	r19, r1
    8e78:	09 f0       	breq	.+2      	; 0x8e7c <udc_process_setup+0x52>
    8e7a:	2b c2       	rjmp	.+1110   	; 0x92d2 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    8e7c:	62 e0       	ldi	r22, 0x02	; 2
    8e7e:	70 e0       	ldi	r23, 0x00	; 0
    8e80:	8e e7       	ldi	r24, 0x7E	; 126
    8e82:	99 e2       	ldi	r25, 0x29	; 41
    8e84:	0e 94 9f 33 	call	0x673e	; 0x673e <udd_set_setup_payload>
    8e88:	7e c2       	rjmp	.+1276   	; 0x9386 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    8e8a:	80 91 91 29 	lds	r24, 0x2991	; 0x802991 <udd_g_ctrlreq+0x2>
    8e8e:	90 91 92 29 	lds	r25, 0x2992	; 0x802992 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    8e92:	29 2f       	mov	r18, r25
    8e94:	33 27       	eor	r19, r19
    8e96:	22 30       	cpi	r18, 0x02	; 2
    8e98:	31 05       	cpc	r19, r1
    8e9a:	b1 f0       	breq	.+44     	; 0x8ec8 <udc_process_setup+0x9e>
    8e9c:	20 f4       	brcc	.+8      	; 0x8ea6 <udc_process_setup+0x7c>
    8e9e:	21 30       	cpi	r18, 0x01	; 1
    8ea0:	31 05       	cpc	r19, r1
    8ea2:	41 f0       	breq	.+16     	; 0x8eb4 <udc_process_setup+0x8a>
    8ea4:	d8 c1       	rjmp	.+944    	; 0x9256 <udc_process_setup+0x42c>
    8ea6:	23 30       	cpi	r18, 0x03	; 3
    8ea8:	31 05       	cpc	r19, r1
    8eaa:	f1 f1       	breq	.+124    	; 0x8f28 <udc_process_setup+0xfe>
    8eac:	2f 30       	cpi	r18, 0x0F	; 15
    8eae:	31 05       	cpc	r19, r1
    8eb0:	61 f1       	breq	.+88     	; 0x8f0a <udc_process_setup+0xe0>
    8eb2:	d1 c1       	rjmp	.+930    	; 0x9256 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    8eb4:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <udc_config>
    8eb8:	90 91 4e 20 	lds	r25, 0x204E	; 0x80204e <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    8ebc:	dc 01       	movw	r26, r24
    8ebe:	6c 91       	ld	r22, X
    8ec0:	70 e0       	ldi	r23, 0x00	; 0
    8ec2:	0e 94 9f 33 	call	0x673e	; 0x673e <udd_set_setup_payload>
    8ec6:	5e c0       	rjmp	.+188    	; 0x8f84 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    8ec8:	e0 91 4d 20 	lds	r30, 0x204D	; 0x80204d <udc_config>
    8ecc:	f0 91 4e 20 	lds	r31, 0x204E	; 0x80204e <udc_config+0x1>
    8ed0:	21 89       	ldd	r18, Z+17	; 0x11
    8ed2:	82 17       	cp	r24, r18
    8ed4:	08 f0       	brcs	.+2      	; 0x8ed8 <udc_process_setup+0xae>
    8ed6:	fd c1       	rjmp	.+1018   	; 0x92d2 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    8ed8:	99 27       	eor	r25, r25
    8eda:	88 0f       	add	r24, r24
    8edc:	99 1f       	adc	r25, r25
    8ede:	88 0f       	add	r24, r24
    8ee0:	99 1f       	adc	r25, r25
    8ee2:	e0 91 4f 20 	lds	r30, 0x204F	; 0x80204f <udc_config+0x2>
    8ee6:	f0 91 50 20 	lds	r31, 0x2050	; 0x802050 <udc_config+0x3>
    8eea:	e8 0f       	add	r30, r24
    8eec:	f9 1f       	adc	r31, r25
    8eee:	80 81       	ld	r24, Z
    8ef0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    8ef2:	fc 01       	movw	r30, r24
    8ef4:	62 81       	ldd	r22, Z+2	; 0x02
    8ef6:	73 81       	ldd	r23, Z+3	; 0x03
    8ef8:	0e 94 9f 33 	call	0x673e	; 0x673e <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    8efc:	e0 91 97 29 	lds	r30, 0x2997	; 0x802997 <udd_g_ctrlreq+0x8>
    8f00:	f0 91 98 29 	lds	r31, 0x2998	; 0x802998 <udd_g_ctrlreq+0x9>
    8f04:	82 e0       	ldi	r24, 0x02	; 2
    8f06:	81 83       	std	Z+1, r24	; 0x01
    8f08:	3d c0       	rjmp	.+122    	; 0x8f84 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    8f0a:	80 91 51 20 	lds	r24, 0x2051	; 0x802051 <udc_config+0x4>
    8f0e:	90 91 52 20 	lds	r25, 0x2052	; 0x802052 <udc_config+0x5>
    8f12:	00 97       	sbiw	r24, 0x00	; 0
    8f14:	09 f4       	brne	.+2      	; 0x8f18 <udc_process_setup+0xee>
    8f16:	dd c1       	rjmp	.+954    	; 0x92d2 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    8f18:	dc 01       	movw	r26, r24
    8f1a:	12 96       	adiw	r26, 0x02	; 2
    8f1c:	6d 91       	ld	r22, X+
    8f1e:	7c 91       	ld	r23, X
    8f20:	13 97       	sbiw	r26, 0x03	; 3
    8f22:	0e 94 9f 33 	call	0x673e	; 0x673e <udd_set_setup_payload>
    8f26:	2e c0       	rjmp	.+92     	; 0x8f84 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    8f28:	99 27       	eor	r25, r25
    8f2a:	81 30       	cpi	r24, 0x01	; 1
    8f2c:	91 05       	cpc	r25, r1
    8f2e:	99 f0       	breq	.+38     	; 0x8f56 <udc_process_setup+0x12c>
    8f30:	58 f0       	brcs	.+22     	; 0x8f48 <udc_process_setup+0x11e>
    8f32:	82 30       	cpi	r24, 0x02	; 2
    8f34:	91 05       	cpc	r25, r1
    8f36:	09 f4       	brne	.+2      	; 0x8f3a <udc_process_setup+0x110>
    8f38:	22 c2       	rjmp	.+1092   	; 0x937e <udc_process_setup+0x554>
    8f3a:	03 97       	sbiw	r24, 0x03	; 3
    8f3c:	09 f0       	breq	.+2      	; 0x8f40 <udc_process_setup+0x116>
    8f3e:	94 c1       	rjmp	.+808    	; 0x9268 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    8f40:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    8f42:	ec e5       	ldi	r30, 0x5C	; 92
    8f44:	f5 e2       	ldi	r31, 0x25	; 37
    8f46:	0a c0       	rjmp	.+20     	; 0x8f5c <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    8f48:	64 e0       	ldi	r22, 0x04	; 4
    8f4a:	70 e0       	ldi	r23, 0x00	; 0
    8f4c:	82 ef       	ldi	r24, 0xF2	; 242
    8f4e:	90 e2       	ldi	r25, 0x20	; 32
    8f50:	0e 94 9f 33 	call	0x673e	; 0x673e <udd_set_setup_payload>
    8f54:	17 c0       	rjmp	.+46     	; 0x8f84 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    8f56:	e1 ee       	ldi	r30, 0xE1	; 225
    8f58:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    8f5a:	30 e1       	ldi	r19, 0x10	; 16
    8f5c:	a4 eb       	ldi	r26, 0xB4	; 180
    8f5e:	b0 e2       	ldi	r27, 0x20	; 32
    8f60:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    8f62:	81 91       	ld	r24, Z+
    8f64:	90 e0       	ldi	r25, 0x00	; 0
    8f66:	8d 93       	st	X+, r24
    8f68:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    8f6a:	2f 5f       	subi	r18, 0xFF	; 255
    8f6c:	23 17       	cp	r18, r19
    8f6e:	c8 f3       	brcs	.-14     	; 0x8f62 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    8f70:	63 2f       	mov	r22, r19
    8f72:	66 0f       	add	r22, r22
    8f74:	6e 5f       	subi	r22, 0xFE	; 254
    8f76:	60 93 b2 20 	sts	0x20B2, r22	; 0x8020b2 <udc_string_desc>
		udd_set_setup_payload(
    8f7a:	70 e0       	ldi	r23, 0x00	; 0
    8f7c:	82 eb       	ldi	r24, 0xB2	; 178
    8f7e:	90 e2       	ldi	r25, 0x20	; 32
    8f80:	0e 94 9f 33 	call	0x673e	; 0x673e <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    8f84:	ef e8       	ldi	r30, 0x8F	; 143
    8f86:	f9 e2       	ldi	r31, 0x29	; 41
    8f88:	86 81       	ldd	r24, Z+6	; 0x06
    8f8a:	97 81       	ldd	r25, Z+7	; 0x07
    8f8c:	22 85       	ldd	r18, Z+10	; 0x0a
    8f8e:	33 85       	ldd	r19, Z+11	; 0x0b
    8f90:	82 17       	cp	r24, r18
    8f92:	93 07       	cpc	r25, r19
    8f94:	08 f0       	brcs	.+2      	; 0x8f98 <udc_process_setup+0x16e>
    8f96:	f7 c1       	rjmp	.+1006   	; 0x9386 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    8f98:	80 93 99 29 	sts	0x2999, r24	; 0x802999 <udd_g_ctrlreq+0xa>
    8f9c:	90 93 9a 29 	sts	0x299A, r25	; 0x80299a <udd_g_ctrlreq+0xb>
    8fa0:	f2 c1       	rjmp	.+996    	; 0x9386 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    8fa2:	21 30       	cpi	r18, 0x01	; 1
    8fa4:	31 05       	cpc	r19, r1
    8fa6:	09 f0       	breq	.+2      	; 0x8faa <udc_process_setup+0x180>
    8fa8:	94 c1       	rjmp	.+808    	; 0x92d2 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    8faa:	61 e0       	ldi	r22, 0x01	; 1
    8fac:	70 e0       	ldi	r23, 0x00	; 0
    8fae:	8a e7       	ldi	r24, 0x7A	; 122
    8fb0:	99 e2       	ldi	r25, 0x29	; 41
    8fb2:	0e 94 9f 33 	call	0x673e	; 0x673e <udd_set_setup_payload>
    8fb6:	e7 c1       	rjmp	.+974    	; 0x9386 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    8fb8:	81 30       	cpi	r24, 0x01	; 1
    8fba:	e9 f5       	brne	.+122    	; 0x9036 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    8fbc:	90 91 90 29 	lds	r25, 0x2990	; 0x802990 <udd_g_ctrlreq+0x1>
    8fc0:	9a 30       	cpi	r25, 0x0A	; 10
    8fc2:	c9 f5       	brne	.+114    	; 0x9036 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    8fc4:	21 30       	cpi	r18, 0x01	; 1
    8fc6:	31 05       	cpc	r19, r1
    8fc8:	09 f0       	breq	.+2      	; 0x8fcc <udc_process_setup+0x1a2>
    8fca:	53 c1       	rjmp	.+678    	; 0x9272 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    8fcc:	80 91 7a 29 	lds	r24, 0x297A	; 0x80297a <udc_num_configuration>
    8fd0:	88 23       	and	r24, r24
    8fd2:	09 f4       	brne	.+2      	; 0x8fd6 <udc_process_setup+0x1ac>
    8fd4:	4e c1       	rjmp	.+668    	; 0x9272 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    8fd6:	c0 91 93 29 	lds	r28, 0x2993	; 0x802993 <udd_g_ctrlreq+0x4>
    8fda:	d0 91 94 29 	lds	r29, 0x2994	; 0x802994 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    8fde:	00 91 78 29 	lds	r16, 0x2978	; 0x802978 <udc_ptr_conf>
    8fe2:	10 91 79 29 	lds	r17, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    8fe6:	d8 01       	movw	r26, r16
    8fe8:	ed 91       	ld	r30, X+
    8fea:	fc 91       	ld	r31, X
    8fec:	84 81       	ldd	r24, Z+4	; 0x04
    8fee:	c8 17       	cp	r28, r24
    8ff0:	08 f0       	brcs	.+2      	; 0x8ff4 <udc_process_setup+0x1ca>
    8ff2:	3f c1       	rjmp	.+638    	; 0x9272 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    8ff4:	60 e0       	ldi	r22, 0x00	; 0
    8ff6:	8c 2f       	mov	r24, r28
    8ff8:	0c de       	rcall	.-1000   	; 0x8c12 <udc_update_iface_desc>
    8ffa:	88 23       	and	r24, r24
    8ffc:	09 f4       	brne	.+2      	; 0x9000 <udc_process_setup+0x1d6>
    8ffe:	34 c1       	rjmp	.+616    	; 0x9268 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    9000:	ce 01       	movw	r24, r28
    9002:	99 27       	eor	r25, r25
    9004:	88 0f       	add	r24, r24
    9006:	99 1f       	adc	r25, r25
    9008:	d8 01       	movw	r26, r16
    900a:	12 96       	adiw	r26, 0x02	; 2
    900c:	ed 91       	ld	r30, X+
    900e:	fc 91       	ld	r31, X
    9010:	13 97       	sbiw	r26, 0x03	; 3
    9012:	e8 0f       	add	r30, r24
    9014:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    9016:	01 90       	ld	r0, Z+
    9018:	f0 81       	ld	r31, Z
    901a:	e0 2d       	mov	r30, r0
    901c:	86 81       	ldd	r24, Z+6	; 0x06
    901e:	97 81       	ldd	r25, Z+7	; 0x07
    9020:	fc 01       	movw	r30, r24
    9022:	19 95       	eicall
    9024:	80 93 7c 29 	sts	0x297C, r24	; 0x80297c <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    9028:	61 e0       	ldi	r22, 0x01	; 1
    902a:	70 e0       	ldi	r23, 0x00	; 0
    902c:	8c e7       	ldi	r24, 0x7C	; 124
    902e:	99 e2       	ldi	r25, 0x29	; 41
    9030:	0e 94 9f 33 	call	0x673e	; 0x673e <udd_set_setup_payload>
    9034:	a8 c1       	rjmp	.+848    	; 0x9386 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    9036:	82 30       	cpi	r24, 0x02	; 2
    9038:	09 f0       	breq	.+2      	; 0x903c <udc_process_setup+0x212>
    903a:	16 c1       	rjmp	.+556    	; 0x9268 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    903c:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x1>
    9040:	81 11       	cpse	r24, r1
    9042:	0b c1       	rjmp	.+534    	; 0x925a <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    9044:	22 30       	cpi	r18, 0x02	; 2
    9046:	31 05       	cpc	r19, r1
    9048:	09 f0       	breq	.+2      	; 0x904c <udc_process_setup+0x222>
    904a:	43 c1       	rjmp	.+646    	; 0x92d2 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    904c:	80 91 93 29 	lds	r24, 0x2993	; 0x802993 <udd_g_ctrlreq+0x4>
    9050:	0e 94 2e 34 	call	0x685c	; 0x685c <udd_ep_is_halted>
    9054:	90 e0       	ldi	r25, 0x00	; 0
    9056:	80 93 74 29 	sts	0x2974, r24	; 0x802974 <udc_ep_status.4757>
    905a:	90 93 75 29 	sts	0x2975, r25	; 0x802975 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    905e:	62 e0       	ldi	r22, 0x02	; 2
    9060:	70 e0       	ldi	r23, 0x00	; 0
    9062:	84 e7       	ldi	r24, 0x74	; 116
    9064:	99 e2       	ldi	r25, 0x29	; 41
    9066:	0e 94 9f 33 	call	0x673e	; 0x673e <udd_set_setup_payload>
    906a:	8d c1       	rjmp	.+794    	; 0x9386 <udc_process_setup+0x55c>
    906c:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    906e:	09 f0       	breq	.+2      	; 0x9072 <udc_process_setup+0x248>
    9070:	a0 c0       	rjmp	.+320    	; 0x91b2 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    9072:	90 91 90 29 	lds	r25, 0x2990	; 0x802990 <udd_g_ctrlreq+0x1>
    9076:	93 30       	cpi	r25, 0x03	; 3
    9078:	91 f1       	breq	.+100    	; 0x90de <udc_process_setup+0x2b4>
    907a:	18 f4       	brcc	.+6      	; 0x9082 <udc_process_setup+0x258>
    907c:	91 30       	cpi	r25, 0x01	; 1
    907e:	a9 f0       	breq	.+42     	; 0x90aa <udc_process_setup+0x280>
    9080:	98 c0       	rjmp	.+304    	; 0x91b2 <udc_process_setup+0x388>
    9082:	95 30       	cpi	r25, 0x05	; 5
    9084:	21 f0       	breq	.+8      	; 0x908e <udc_process_setup+0x264>
    9086:	99 30       	cpi	r25, 0x09	; 9
    9088:	09 f4       	brne	.+2      	; 0x908c <udc_process_setup+0x262>
    908a:	43 c0       	rjmp	.+134    	; 0x9112 <udc_process_setup+0x2e8>
    908c:	92 c0       	rjmp	.+292    	; 0x91b2 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    908e:	80 91 95 29 	lds	r24, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    9092:	90 91 96 29 	lds	r25, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    9096:	89 2b       	or	r24, r25
    9098:	09 f0       	breq	.+2      	; 0x909c <udc_process_setup+0x272>
    909a:	1b c1       	rjmp	.+566    	; 0x92d2 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    909c:	83 e0       	ldi	r24, 0x03	; 3
    909e:	96 e4       	ldi	r25, 0x46	; 70
    90a0:	80 93 9b 29 	sts	0x299B, r24	; 0x80299b <udd_g_ctrlreq+0xc>
    90a4:	90 93 9c 29 	sts	0x299C, r25	; 0x80299c <udd_g_ctrlreq+0xd>
    90a8:	6e c1       	rjmp	.+732    	; 0x9386 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    90aa:	80 91 95 29 	lds	r24, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    90ae:	90 91 96 29 	lds	r25, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    90b2:	89 2b       	or	r24, r25
    90b4:	09 f0       	breq	.+2      	; 0x90b8 <udc_process_setup+0x28e>
    90b6:	0d c1       	rjmp	.+538    	; 0x92d2 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    90b8:	80 91 91 29 	lds	r24, 0x2991	; 0x802991 <udd_g_ctrlreq+0x2>
    90bc:	90 91 92 29 	lds	r25, 0x2992	; 0x802992 <udd_g_ctrlreq+0x3>
    90c0:	01 97       	sbiw	r24, 0x01	; 1
    90c2:	09 f0       	breq	.+2      	; 0x90c6 <udc_process_setup+0x29c>
    90c4:	06 c1       	rjmp	.+524    	; 0x92d2 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    90c6:	80 91 7e 29 	lds	r24, 0x297E	; 0x80297e <udc_device_status>
    90ca:	90 91 7f 29 	lds	r25, 0x297F	; 0x80297f <udc_device_status+0x1>
    90ce:	8d 7f       	andi	r24, 0xFD	; 253
    90d0:	80 93 7e 29 	sts	0x297E, r24	; 0x80297e <udc_device_status>
    90d4:	90 93 7f 29 	sts	0x297F, r25	; 0x80297f <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    90d8:	0e 94 36 3c 	call	0x786c	; 0x786c <usb_callback_remotewakeup_disable>
    90dc:	54 c1       	rjmp	.+680    	; 0x9386 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    90de:	80 91 95 29 	lds	r24, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    90e2:	90 91 96 29 	lds	r25, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    90e6:	89 2b       	or	r24, r25
    90e8:	09 f0       	breq	.+2      	; 0x90ec <udc_process_setup+0x2c2>
    90ea:	f3 c0       	rjmp	.+486    	; 0x92d2 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    90ec:	80 91 91 29 	lds	r24, 0x2991	; 0x802991 <udd_g_ctrlreq+0x2>
    90f0:	90 91 92 29 	lds	r25, 0x2992	; 0x802992 <udd_g_ctrlreq+0x3>
    90f4:	01 97       	sbiw	r24, 0x01	; 1
    90f6:	09 f0       	breq	.+2      	; 0x90fa <udc_process_setup+0x2d0>
    90f8:	b2 c0       	rjmp	.+356    	; 0x925e <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    90fa:	80 91 7e 29 	lds	r24, 0x297E	; 0x80297e <udc_device_status>
    90fe:	90 91 7f 29 	lds	r25, 0x297F	; 0x80297f <udc_device_status+0x1>
    9102:	82 60       	ori	r24, 0x02	; 2
    9104:	80 93 7e 29 	sts	0x297E, r24	; 0x80297e <udc_device_status>
    9108:	90 93 7f 29 	sts	0x297F, r25	; 0x80297f <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    910c:	0e 94 35 3c 	call	0x786a	; 0x786a <usb_callback_remotewakeup_enable>
    9110:	3a c1       	rjmp	.+628    	; 0x9386 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    9112:	80 91 95 29 	lds	r24, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    9116:	90 91 96 29 	lds	r25, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    911a:	89 2b       	or	r24, r25
    911c:	09 f0       	breq	.+2      	; 0x9120 <udc_process_setup+0x2f6>
    911e:	d9 c0       	rjmp	.+434    	; 0x92d2 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    9120:	0e 94 94 33 	call	0x6728	; 0x6728 <udd_getaddress>
    9124:	88 23       	and	r24, r24
    9126:	09 f4       	brne	.+2      	; 0x912a <udc_process_setup+0x300>
    9128:	9f c0       	rjmp	.+318    	; 0x9268 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    912a:	20 91 91 29 	lds	r18, 0x2991	; 0x802991 <udd_g_ctrlreq+0x2>
    912e:	30 91 92 29 	lds	r19, 0x2992	; 0x802992 <udd_g_ctrlreq+0x3>
    9132:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    9134:	e0 91 4d 20 	lds	r30, 0x204D	; 0x80204d <udc_config>
    9138:	f0 91 4e 20 	lds	r31, 0x204E	; 0x80204e <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    913c:	81 89       	ldd	r24, Z+17	; 0x11
    913e:	90 e0       	ldi	r25, 0x00	; 0
    9140:	82 17       	cp	r24, r18
    9142:	93 07       	cpc	r25, r19
    9144:	08 f4       	brcc	.+2      	; 0x9148 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    9146:	90 c0       	rjmp	.+288    	; 0x9268 <udc_process_setup+0x43e>
    9148:	16 de       	rcall	.-980    	; 0x8d76 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    914a:	80 91 91 29 	lds	r24, 0x2991	; 0x802991 <udd_g_ctrlreq+0x2>
    914e:	90 91 92 29 	lds	r25, 0x2992	; 0x802992 <udd_g_ctrlreq+0x3>
    9152:	80 93 7a 29 	sts	0x297A, r24	; 0x80297a <udc_num_configuration>
	if (udc_num_configuration == 0) {
    9156:	88 23       	and	r24, r24
    9158:	09 f4       	brne	.+2      	; 0x915c <udc_process_setup+0x332>
    915a:	15 c1       	rjmp	.+554    	; 0x9386 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    915c:	99 27       	eor	r25, r25
    915e:	81 50       	subi	r24, 0x01	; 1
    9160:	90 4c       	sbci	r25, 0xC0	; 192
    9162:	88 0f       	add	r24, r24
    9164:	99 1f       	adc	r25, r25
    9166:	88 0f       	add	r24, r24
    9168:	99 1f       	adc	r25, r25
    916a:	e0 91 4f 20 	lds	r30, 0x204F	; 0x80204f <udc_config+0x2>
    916e:	f0 91 50 20 	lds	r31, 0x2050	; 0x802050 <udc_config+0x3>
    9172:	e8 0f       	add	r30, r24
    9174:	f9 1f       	adc	r31, r25
    9176:	e0 93 78 29 	sts	0x2978, r30	; 0x802978 <udc_ptr_conf>
    917a:	f0 93 79 29 	sts	0x2979, r31	; 0x802979 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    917e:	01 90       	ld	r0, Z+
    9180:	f0 81       	ld	r31, Z
    9182:	e0 2d       	mov	r30, r0
    9184:	84 81       	ldd	r24, Z+4	; 0x04
    9186:	88 23       	and	r24, r24
    9188:	09 f4       	brne	.+2      	; 0x918c <udc_process_setup+0x362>
    918a:	fd c0       	rjmp	.+506    	; 0x9386 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    918c:	c0 e0       	ldi	r28, 0x00	; 0
    918e:	60 e0       	ldi	r22, 0x00	; 0
    9190:	8c 2f       	mov	r24, r28
    9192:	bb dd       	rcall	.-1162   	; 0x8d0a <udc_iface_enable>
    9194:	88 23       	and	r24, r24
    9196:	09 f4       	brne	.+2      	; 0x919a <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    9198:	67 c0       	rjmp	.+206    	; 0x9268 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    919a:	cf 5f       	subi	r28, 0xFF	; 255
    919c:	e0 91 78 29 	lds	r30, 0x2978	; 0x802978 <udc_ptr_conf>
    91a0:	f0 91 79 29 	lds	r31, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    91a4:	01 90       	ld	r0, Z+
    91a6:	f0 81       	ld	r31, Z
    91a8:	e0 2d       	mov	r30, r0
    91aa:	84 81       	ldd	r24, Z+4	; 0x04
    91ac:	c8 17       	cp	r28, r24
    91ae:	78 f3       	brcs	.-34     	; 0x918e <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    91b0:	ea c0       	rjmp	.+468    	; 0x9386 <udc_process_setup+0x55c>
    91b2:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    91b4:	e9 f4       	brne	.+58     	; 0x91f0 <udc_process_setup+0x3c6>
    91b6:	90 91 90 29 	lds	r25, 0x2990	; 0x802990 <udd_g_ctrlreq+0x1>
    91ba:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    91bc:	c9 f4       	brne	.+50     	; 0x91f0 <udc_process_setup+0x3c6>
    91be:	80 91 95 29 	lds	r24, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    91c2:	90 91 96 29 	lds	r25, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    91c6:	89 2b       	or	r24, r25
    91c8:	09 f0       	breq	.+2      	; 0x91cc <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    91ca:	53 c0       	rjmp	.+166    	; 0x9272 <udc_process_setup+0x448>
    91cc:	80 91 7a 29 	lds	r24, 0x297A	; 0x80297a <udc_num_configuration>
    91d0:	88 23       	and	r24, r24
    91d2:	09 f4       	brne	.+2      	; 0x91d6 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    91d4:	4e c0       	rjmp	.+156    	; 0x9272 <udc_process_setup+0x448>
    91d6:	ef e8       	ldi	r30, 0x8F	; 143
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    91d8:	f9 e2       	ldi	r31, 0x29	; 41

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    91da:	c4 81       	ldd	r28, Z+4	; 0x04
    91dc:	d2 81       	ldd	r29, Z+2	; 0x02
    91de:	8c 2f       	mov	r24, r28
    91e0:	52 dd       	rcall	.-1372   	; 0x8c86 <udc_iface_disable>
    91e2:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    91e4:	09 f4       	brne	.+2      	; 0x91e8 <udc_process_setup+0x3be>
    91e6:	40 c0       	rjmp	.+128    	; 0x9268 <udc_process_setup+0x43e>
    91e8:	6d 2f       	mov	r22, r29
    91ea:	8c 2f       	mov	r24, r28
    91ec:	8e dd       	rcall	.-1252   	; 0x8d0a <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    91ee:	3a c0       	rjmp	.+116    	; 0x9264 <udc_process_setup+0x43a>
    91f0:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    91f2:	d1 f5       	brne	.+116    	; 0x9268 <udc_process_setup+0x43e>
    91f4:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x1>
    91f8:	81 30       	cpi	r24, 0x01	; 1
    91fa:	19 f0       	breq	.+6      	; 0x9202 <udc_process_setup+0x3d8>
    91fc:	83 30       	cpi	r24, 0x03	; 3
    91fe:	a1 f0       	breq	.+40     	; 0x9228 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    9200:	30 c0       	rjmp	.+96     	; 0x9262 <udc_process_setup+0x438>
    9202:	80 91 95 29 	lds	r24, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    9206:	90 91 96 29 	lds	r25, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    920a:	89 2b       	or	r24, r25
    920c:	09 f0       	breq	.+2      	; 0x9210 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    920e:	61 c0       	rjmp	.+194    	; 0x92d2 <udc_process_setup+0x4a8>
    9210:	80 91 91 29 	lds	r24, 0x2991	; 0x802991 <udd_g_ctrlreq+0x2>
    9214:	90 91 92 29 	lds	r25, 0x2992	; 0x802992 <udd_g_ctrlreq+0x3>
    9218:	89 2b       	or	r24, r25
    921a:	09 f0       	breq	.+2      	; 0x921e <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    921c:	5a c0       	rjmp	.+180    	; 0x92d2 <udc_process_setup+0x4a8>
    921e:	80 91 93 29 	lds	r24, 0x2993	; 0x802993 <udd_g_ctrlreq+0x4>
    9222:	0e 94 49 34 	call	0x6892	; 0x6892 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    9226:	1e c0       	rjmp	.+60     	; 0x9264 <udc_process_setup+0x43a>
    9228:	80 91 95 29 	lds	r24, 0x2995	; 0x802995 <udd_g_ctrlreq+0x6>
    922c:	90 91 96 29 	lds	r25, 0x2996	; 0x802996 <udd_g_ctrlreq+0x7>
    9230:	89 2b       	or	r24, r25
    9232:	09 f0       	breq	.+2      	; 0x9236 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    9234:	4e c0       	rjmp	.+156    	; 0x92d2 <udc_process_setup+0x4a8>
    9236:	80 91 91 29 	lds	r24, 0x2991	; 0x802991 <udd_g_ctrlreq+0x2>
    923a:	90 91 92 29 	lds	r25, 0x2992	; 0x802992 <udd_g_ctrlreq+0x3>
    923e:	89 2b       	or	r24, r25
    9240:	09 f0       	breq	.+2      	; 0x9244 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    9242:	47 c0       	rjmp	.+142    	; 0x92d2 <udc_process_setup+0x4a8>
    9244:	cf e8       	ldi	r28, 0x8F	; 143
    9246:	d9 e2       	ldi	r29, 0x29	; 41
    9248:	8c 81       	ldd	r24, Y+4	; 0x04
    924a:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    924e:	8c 81       	ldd	r24, Y+4	; 0x04
    9250:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    9254:	07 c0       	rjmp	.+14     	; 0x9264 <udc_process_setup+0x43a>
    9256:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    9258:	05 c0       	rjmp	.+10     	; 0x9264 <udc_process_setup+0x43a>
    925a:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    925c:	03 c0       	rjmp	.+6      	; 0x9264 <udc_process_setup+0x43a>
    925e:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    9260:	01 c0       	rjmp	.+2      	; 0x9264 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    9262:	80 e0       	ldi	r24, 0x00	; 0
    9264:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    9266:	90 c0       	rjmp	.+288    	; 0x9388 <udc_process_setup+0x55e>
    9268:	80 91 8f 29 	lds	r24, 0x298F	; 0x80298f <udd_g_ctrlreq>
    926c:	8f 71       	andi	r24, 0x1F	; 31
    926e:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    9270:	81 f5       	brne	.+96     	; 0x92d2 <udc_process_setup+0x4a8>
    9272:	80 91 7a 29 	lds	r24, 0x297A	; 0x80297a <udc_num_configuration>
    9276:	88 23       	and	r24, r24
    9278:	09 f4       	brne	.+2      	; 0x927c <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    927a:	71 c0       	rjmp	.+226    	; 0x935e <udc_process_setup+0x534>
    927c:	00 91 93 29 	lds	r16, 0x2993	; 0x802993 <udd_g_ctrlreq+0x4>
    9280:	10 91 94 29 	lds	r17, 0x2994	; 0x802994 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    9284:	c0 91 78 29 	lds	r28, 0x2978	; 0x802978 <udc_ptr_conf>
    9288:	d0 91 79 29 	lds	r29, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    928c:	e8 81       	ld	r30, Y
    928e:	f9 81       	ldd	r31, Y+1	; 0x01
    9290:	84 81       	ldd	r24, Z+4	; 0x04
    9292:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    9294:	08 f0       	brcs	.+2      	; 0x9298 <udc_process_setup+0x46e>
    9296:	65 c0       	rjmp	.+202    	; 0x9362 <udc_process_setup+0x538>
    9298:	60 e0       	ldi	r22, 0x00	; 0
    929a:	80 2f       	mov	r24, r16
    929c:	ba dc       	rcall	.-1676   	; 0x8c12 <udc_update_iface_desc>
    929e:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    92a0:	c1 f0       	breq	.+48     	; 0x92d2 <udc_process_setup+0x4a8>
    92a2:	f8 01       	movw	r30, r16
    92a4:	ff 27       	eor	r31, r31
    92a6:	cf 01       	movw	r24, r30
    92a8:	88 0f       	add	r24, r24
    92aa:	99 1f       	adc	r25, r25
    92ac:	ea 81       	ldd	r30, Y+2	; 0x02
    92ae:	fb 81       	ldd	r31, Y+3	; 0x03
    92b0:	e8 0f       	add	r30, r24
    92b2:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    92b4:	c0 81       	ld	r28, Z
    92b6:	d1 81       	ldd	r29, Z+1	; 0x01
    92b8:	ee 81       	ldd	r30, Y+6	; 0x06
    92ba:	ff 81       	ldd	r31, Y+7	; 0x07
    92bc:	19 95       	eicall
    92be:	68 2f       	mov	r22, r24
    92c0:	80 2f       	mov	r24, r16
    92c2:	a7 dc       	rcall	.-1714   	; 0x8c12 <udc_update_iface_desc>
    92c4:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    92c6:	29 f0       	breq	.+10     	; 0x92d2 <udc_process_setup+0x4a8>
    92c8:	ec 81       	ldd	r30, Y+4	; 0x04
    92ca:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    92cc:	19 95       	eicall
    92ce:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    92d0:	5b c0       	rjmp	.+182    	; 0x9388 <udc_process_setup+0x55e>
    92d2:	80 91 8f 29 	lds	r24, 0x298F	; 0x80298f <udd_g_ctrlreq>
    92d6:	8f 71       	andi	r24, 0x1F	; 31
    92d8:	82 30       	cpi	r24, 0x02	; 2
    92da:	09 f0       	breq	.+2      	; 0x92de <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    92dc:	44 c0       	rjmp	.+136    	; 0x9366 <udc_process_setup+0x53c>
    92de:	80 91 7a 29 	lds	r24, 0x297A	; 0x80297a <udc_num_configuration>
    92e2:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    92e4:	b1 f1       	breq	.+108    	; 0x9352 <udc_process_setup+0x528>
    92e6:	a0 91 78 29 	lds	r26, 0x2978	; 0x802978 <udc_ptr_conf>
    92ea:	b0 91 79 29 	lds	r27, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    92ee:	ed 91       	ld	r30, X+
    92f0:	fc 91       	ld	r31, X
    92f2:	11 97       	sbiw	r26, 0x01	; 1
    92f4:	84 81       	ldd	r24, Z+4	; 0x04
    92f6:	88 23       	and	r24, r24
    92f8:	71 f1       	breq	.+92     	; 0x9356 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    92fa:	c0 e0       	ldi	r28, 0x00	; 0
    92fc:	ec 2f       	mov	r30, r28
    92fe:	f0 e0       	ldi	r31, 0x00	; 0
    9300:	ee 0f       	add	r30, r30
    9302:	ff 1f       	adc	r31, r31
    9304:	12 96       	adiw	r26, 0x02	; 2
    9306:	8d 91       	ld	r24, X+
    9308:	9c 91       	ld	r25, X
    930a:	13 97       	sbiw	r26, 0x03	; 3
    930c:	e8 0f       	add	r30, r24
    930e:	f9 1f       	adc	r31, r25
    9310:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    9312:	11 81       	ldd	r17, Z+1	; 0x01
    9314:	d8 01       	movw	r26, r16
    9316:	16 96       	adiw	r26, 0x06	; 6
    9318:	ed 91       	ld	r30, X+
    931a:	fc 91       	ld	r31, X
    931c:	17 97       	sbiw	r26, 0x07	; 7
    931e:	19 95       	eicall
    9320:	68 2f       	mov	r22, r24
    9322:	8c 2f       	mov	r24, r28
    9324:	76 dc       	rcall	.-1812   	; 0x8c12 <udc_update_iface_desc>
    9326:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    9328:	79 f1       	breq	.+94     	; 0x9388 <udc_process_setup+0x55e>
    932a:	d8 01       	movw	r26, r16
    932c:	14 96       	adiw	r26, 0x04	; 4
    932e:	ed 91       	ld	r30, X+
    9330:	fc 91       	ld	r31, X
    9332:	15 97       	sbiw	r26, 0x05	; 5
    9334:	19 95       	eicall
    9336:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    9338:	27 c0       	rjmp	.+78     	; 0x9388 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    933a:	cf 5f       	subi	r28, 0xFF	; 255
    933c:	a0 91 78 29 	lds	r26, 0x2978	; 0x802978 <udc_ptr_conf>
    9340:	b0 91 79 29 	lds	r27, 0x2979	; 0x802979 <udc_ptr_conf+0x1>
    9344:	ed 91       	ld	r30, X+
    9346:	fc 91       	ld	r31, X
    9348:	11 97       	sbiw	r26, 0x01	; 1
    934a:	94 81       	ldd	r25, Z+4	; 0x04
    934c:	c9 17       	cp	r28, r25
    934e:	b0 f2       	brcs	.-84     	; 0x92fc <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    9350:	1b c0       	rjmp	.+54     	; 0x9388 <udc_process_setup+0x55e>
    9352:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    9354:	19 c0       	rjmp	.+50     	; 0x9388 <udc_process_setup+0x55e>
    9356:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    9358:	17 c0       	rjmp	.+46     	; 0x9388 <udc_process_setup+0x55e>
    935a:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    935c:	15 c0       	rjmp	.+42     	; 0x9388 <udc_process_setup+0x55e>
    935e:	80 e0       	ldi	r24, 0x00	; 0
    9360:	13 c0       	rjmp	.+38     	; 0x9388 <udc_process_setup+0x55e>
    9362:	80 e0       	ldi	r24, 0x00	; 0
    9364:	11 c0       	rjmp	.+34     	; 0x9388 <udc_process_setup+0x55e>
    9366:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    9368:	0f c0       	rjmp	.+30     	; 0x9388 <udc_process_setup+0x55e>
    936a:	98 2f       	mov	r25, r24
    936c:	90 76       	andi	r25, 0x60	; 96
    936e:	09 f0       	breq	.+2      	; 0x9372 <udc_process_setup+0x548>
    9370:	7b cf       	rjmp	.-266    	; 0x9268 <udc_process_setup+0x43e>
    9372:	74 cd       	rjmp	.-1304   	; 0x8e5c <udc_process_setup+0x32>
    9374:	98 2f       	mov	r25, r24
    9376:	90 76       	andi	r25, 0x60	; 96
    9378:	09 f0       	breq	.+2      	; 0x937c <udc_process_setup+0x552>
    937a:	76 cf       	rjmp	.-276    	; 0x9268 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    937c:	77 ce       	rjmp	.-786    	; 0x906c <udc_process_setup+0x242>
		str = udc_string_product_name;
    937e:	3c e0       	ldi	r19, 0x0C	; 12
    9380:	e4 ed       	ldi	r30, 0xD4	; 212
    9382:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    9384:	eb cd       	rjmp	.-1066   	; 0x8f5c <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    9386:	81 e0       	ldi	r24, 0x01	; 1
    9388:	df 91       	pop	r29
    938a:	cf 91       	pop	r28
    938c:	1f 91       	pop	r17
    938e:	0f 91       	pop	r16
    9390:	08 95       	ret

00009392 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    9392:	cf 93       	push	r28
    9394:	df 93       	push	r29
    9396:	1f 92       	push	r1
    9398:	cd b7       	in	r28, 0x3d	; 61
    939a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    939c:	80 91 a9 29 	lds	r24, 0x29A9	; 0x8029a9 <stdio_base>
    93a0:	90 91 aa 29 	lds	r25, 0x29AA	; 0x8029aa <stdio_base+0x1>
    93a4:	e0 91 a5 29 	lds	r30, 0x29A5	; 0x8029a5 <ptr_get>
    93a8:	f0 91 a6 29 	lds	r31, 0x29A6	; 0x8029a6 <ptr_get+0x1>
    93ac:	be 01       	movw	r22, r28
    93ae:	6f 5f       	subi	r22, 0xFF	; 255
    93b0:	7f 4f       	sbci	r23, 0xFF	; 255
    93b2:	19 95       	eicall
	return c;
    93b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    93b6:	08 2e       	mov	r0, r24
    93b8:	00 0c       	add	r0, r0
    93ba:	99 0b       	sbc	r25, r25
    93bc:	0f 90       	pop	r0
    93be:	df 91       	pop	r29
    93c0:	cf 91       	pop	r28
    93c2:	08 95       	ret

000093c4 <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    93c4:	80 91 80 29 	lds	r24, 0x2980	; 0x802980 <stdio_usb_interface_enable>
    93c8:	88 23       	and	r24, r24
    93ca:	81 f0       	breq	.+32     	; 0x93ec <stdio_usb_putchar+0x28>
    93cc:	86 2f       	mov	r24, r22
    93ce:	08 2e       	mov	r0, r24
    93d0:	00 0c       	add	r0, r0
    93d2:	99 0b       	sbc	r25, r25
    93d4:	df db       	rcall	.-2114   	; 0x8b94 <udi_cdc_putc>
    93d6:	21 e0       	ldi	r18, 0x01	; 1
    93d8:	30 e0       	ldi	r19, 0x00	; 0
    93da:	89 2b       	or	r24, r25
    93dc:	11 f0       	breq	.+4      	; 0x93e2 <stdio_usb_putchar+0x1e>
    93de:	20 e0       	ldi	r18, 0x00	; 0
    93e0:	30 e0       	ldi	r19, 0x00	; 0
    93e2:	88 27       	eor	r24, r24
    93e4:	99 27       	eor	r25, r25
    93e6:	82 1b       	sub	r24, r18
    93e8:	93 0b       	sbc	r25, r19
    93ea:	08 95       	ret
    93ec:	80 e0       	ldi	r24, 0x00	; 0
    93ee:	90 e0       	ldi	r25, 0x00	; 0
    93f0:	08 95       	ret

000093f2 <stdio_usb_getchar>:
    93f2:	cf 93       	push	r28
    93f4:	df 93       	push	r29
    93f6:	80 91 80 29 	lds	r24, 0x2980	; 0x802980 <stdio_usb_interface_enable>
    93fa:	81 11       	cpse	r24, r1
    93fc:	03 c0       	rjmp	.+6      	; 0x9404 <stdio_usb_getchar+0x12>
    93fe:	fb 01       	movw	r30, r22
    9400:	10 82       	st	Z, r1
    9402:	03 c0       	rjmp	.+6      	; 0x940a <stdio_usb_getchar+0x18>
    9404:	eb 01       	movw	r28, r22
    9406:	3e db       	rcall	.-2436   	; 0x8a84 <udi_cdc_getc>
    9408:	88 83       	st	Y, r24
    940a:	df 91       	pop	r29
    940c:	cf 91       	pop	r28
    940e:	08 95       	ret

00009410 <stdio_usb_enable>:
    9410:	81 e0       	ldi	r24, 0x01	; 1
    9412:	80 93 80 29 	sts	0x2980, r24	; 0x802980 <stdio_usb_interface_enable>
    9416:	08 95       	ret

00009418 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    9418:	10 92 a9 29 	sts	0x29A9, r1	; 0x8029a9 <stdio_base>
    941c:	10 92 aa 29 	sts	0x29AA, r1	; 0x8029aa <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    9420:	82 ee       	ldi	r24, 0xE2	; 226
    9422:	99 e4       	ldi	r25, 0x49	; 73
    9424:	80 93 a7 29 	sts	0x29A7, r24	; 0x8029a7 <ptr_put>
    9428:	90 93 a8 29 	sts	0x29A8, r25	; 0x8029a8 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    942c:	89 ef       	ldi	r24, 0xF9	; 249
    942e:	99 e4       	ldi	r25, 0x49	; 73
    9430:	80 93 a5 29 	sts	0x29A5, r24	; 0x8029a5 <ptr_get>
    9434:	90 93 a6 29 	sts	0x29A6, r25	; 0x8029a6 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    9438:	9b dc       	rcall	.-1738   	; 0x8d70 <udc_start>
    943a:	69 ec       	ldi	r22, 0xC9	; 201
    943c:	79 e4       	ldi	r23, 0x49	; 73
    943e:	83 e2       	ldi	r24, 0x23	; 35
    9440:	9a e4       	ldi	r25, 0x4A	; 74
    9442:	4a c3       	rjmp	.+1684   	; 0x9ad8 <fdevopen>
    9444:	08 95       	ret

00009446 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    9446:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    9448:	80 91 a9 29 	lds	r24, 0x29A9	; 0x8029a9 <stdio_base>
    944c:	90 91 aa 29 	lds	r25, 0x29AA	; 0x8029aa <stdio_base+0x1>
    9450:	e0 91 a7 29 	lds	r30, 0x29A7	; 0x8029a7 <ptr_put>
    9454:	f0 91 a8 29 	lds	r31, 0x29A8	; 0x8029a8 <ptr_put+0x1>
    9458:	19 95       	eicall
    945a:	99 23       	and	r25, r25
    945c:	1c f0       	brlt	.+6      	; 0x9464 <_write+0x1e>
		return -1;
	}
	return 1;
    945e:	81 e0       	ldi	r24, 0x01	; 1
    9460:	90 e0       	ldi	r25, 0x00	; 0
    9462:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    9464:	8f ef       	ldi	r24, 0xFF	; 255
    9466:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    9468:	08 95       	ret

0000946a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    946a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    946e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    9470:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    9472:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    9476:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    9478:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    947c:	08 95       	ret

0000947e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    947e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    9480:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    9482:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    9484:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    9486:	60 83       	st	Z, r22
	ret                             // Return to caller
    9488:	08 95       	ret

0000948a <__mulsi3>:
    948a:	db 01       	movw	r26, r22
    948c:	8f 93       	push	r24
    948e:	9f 93       	push	r25
    9490:	87 d0       	rcall	.+270    	; 0x95a0 <__muluhisi3>
    9492:	bf 91       	pop	r27
    9494:	af 91       	pop	r26
    9496:	a2 9f       	mul	r26, r18
    9498:	80 0d       	add	r24, r0
    949a:	91 1d       	adc	r25, r1
    949c:	a3 9f       	mul	r26, r19
    949e:	90 0d       	add	r25, r0
    94a0:	b2 9f       	mul	r27, r18
    94a2:	90 0d       	add	r25, r0
    94a4:	11 24       	eor	r1, r1
    94a6:	08 95       	ret

000094a8 <__udivmodhi4>:
    94a8:	aa 1b       	sub	r26, r26
    94aa:	bb 1b       	sub	r27, r27
    94ac:	51 e1       	ldi	r21, 0x11	; 17
    94ae:	07 c0       	rjmp	.+14     	; 0x94be <__udivmodhi4_ep>

000094b0 <__udivmodhi4_loop>:
    94b0:	aa 1f       	adc	r26, r26
    94b2:	bb 1f       	adc	r27, r27
    94b4:	a6 17       	cp	r26, r22
    94b6:	b7 07       	cpc	r27, r23
    94b8:	10 f0       	brcs	.+4      	; 0x94be <__udivmodhi4_ep>
    94ba:	a6 1b       	sub	r26, r22
    94bc:	b7 0b       	sbc	r27, r23

000094be <__udivmodhi4_ep>:
    94be:	88 1f       	adc	r24, r24
    94c0:	99 1f       	adc	r25, r25
    94c2:	5a 95       	dec	r21
    94c4:	a9 f7       	brne	.-22     	; 0x94b0 <__udivmodhi4_loop>
    94c6:	80 95       	com	r24
    94c8:	90 95       	com	r25
    94ca:	bc 01       	movw	r22, r24
    94cc:	cd 01       	movw	r24, r26
    94ce:	08 95       	ret

000094d0 <__divmodhi4>:
    94d0:	97 fb       	bst	r25, 7
    94d2:	07 2e       	mov	r0, r23
    94d4:	16 f4       	brtc	.+4      	; 0x94da <__divmodhi4+0xa>
    94d6:	00 94       	com	r0
    94d8:	06 d0       	rcall	.+12     	; 0x94e6 <__divmodhi4_neg1>
    94da:	77 fd       	sbrc	r23, 7
    94dc:	08 d0       	rcall	.+16     	; 0x94ee <__divmodhi4_neg2>
    94de:	e4 df       	rcall	.-56     	; 0x94a8 <__udivmodhi4>
    94e0:	07 fc       	sbrc	r0, 7
    94e2:	05 d0       	rcall	.+10     	; 0x94ee <__divmodhi4_neg2>
    94e4:	3e f4       	brtc	.+14     	; 0x94f4 <__divmodhi4_exit>

000094e6 <__divmodhi4_neg1>:
    94e6:	90 95       	com	r25
    94e8:	81 95       	neg	r24
    94ea:	9f 4f       	sbci	r25, 0xFF	; 255
    94ec:	08 95       	ret

000094ee <__divmodhi4_neg2>:
    94ee:	70 95       	com	r23
    94f0:	61 95       	neg	r22
    94f2:	7f 4f       	sbci	r23, 0xFF	; 255

000094f4 <__divmodhi4_exit>:
    94f4:	08 95       	ret

000094f6 <__udivmodsi4>:
    94f6:	a1 e2       	ldi	r26, 0x21	; 33
    94f8:	1a 2e       	mov	r1, r26
    94fa:	aa 1b       	sub	r26, r26
    94fc:	bb 1b       	sub	r27, r27
    94fe:	fd 01       	movw	r30, r26
    9500:	0d c0       	rjmp	.+26     	; 0x951c <__udivmodsi4_ep>

00009502 <__udivmodsi4_loop>:
    9502:	aa 1f       	adc	r26, r26
    9504:	bb 1f       	adc	r27, r27
    9506:	ee 1f       	adc	r30, r30
    9508:	ff 1f       	adc	r31, r31
    950a:	a2 17       	cp	r26, r18
    950c:	b3 07       	cpc	r27, r19
    950e:	e4 07       	cpc	r30, r20
    9510:	f5 07       	cpc	r31, r21
    9512:	20 f0       	brcs	.+8      	; 0x951c <__udivmodsi4_ep>
    9514:	a2 1b       	sub	r26, r18
    9516:	b3 0b       	sbc	r27, r19
    9518:	e4 0b       	sbc	r30, r20
    951a:	f5 0b       	sbc	r31, r21

0000951c <__udivmodsi4_ep>:
    951c:	66 1f       	adc	r22, r22
    951e:	77 1f       	adc	r23, r23
    9520:	88 1f       	adc	r24, r24
    9522:	99 1f       	adc	r25, r25
    9524:	1a 94       	dec	r1
    9526:	69 f7       	brne	.-38     	; 0x9502 <__udivmodsi4_loop>
    9528:	60 95       	com	r22
    952a:	70 95       	com	r23
    952c:	80 95       	com	r24
    952e:	90 95       	com	r25
    9530:	9b 01       	movw	r18, r22
    9532:	ac 01       	movw	r20, r24
    9534:	bd 01       	movw	r22, r26
    9536:	cf 01       	movw	r24, r30
    9538:	08 95       	ret

0000953a <__divmodsi4>:
    953a:	05 2e       	mov	r0, r21
    953c:	97 fb       	bst	r25, 7
    953e:	16 f4       	brtc	.+4      	; 0x9544 <__divmodsi4+0xa>
    9540:	00 94       	com	r0
    9542:	0f d0       	rcall	.+30     	; 0x9562 <__negsi2>
    9544:	57 fd       	sbrc	r21, 7
    9546:	05 d0       	rcall	.+10     	; 0x9552 <__divmodsi4_neg2>
    9548:	d6 df       	rcall	.-84     	; 0x94f6 <__udivmodsi4>
    954a:	07 fc       	sbrc	r0, 7
    954c:	02 d0       	rcall	.+4      	; 0x9552 <__divmodsi4_neg2>
    954e:	46 f4       	brtc	.+16     	; 0x9560 <__divmodsi4_exit>
    9550:	08 c0       	rjmp	.+16     	; 0x9562 <__negsi2>

00009552 <__divmodsi4_neg2>:
    9552:	50 95       	com	r21
    9554:	40 95       	com	r20
    9556:	30 95       	com	r19
    9558:	21 95       	neg	r18
    955a:	3f 4f       	sbci	r19, 0xFF	; 255
    955c:	4f 4f       	sbci	r20, 0xFF	; 255
    955e:	5f 4f       	sbci	r21, 0xFF	; 255

00009560 <__divmodsi4_exit>:
    9560:	08 95       	ret

00009562 <__negsi2>:
    9562:	90 95       	com	r25
    9564:	80 95       	com	r24
    9566:	70 95       	com	r23
    9568:	61 95       	neg	r22
    956a:	7f 4f       	sbci	r23, 0xFF	; 255
    956c:	8f 4f       	sbci	r24, 0xFF	; 255
    956e:	9f 4f       	sbci	r25, 0xFF	; 255
    9570:	08 95       	ret

00009572 <__tablejump2__>:
    9572:	ee 0f       	add	r30, r30
    9574:	ff 1f       	adc	r31, r31
    9576:	88 1f       	adc	r24, r24
    9578:	8b bf       	out	0x3b, r24	; 59
    957a:	07 90       	elpm	r0, Z+
    957c:	f6 91       	elpm	r31, Z
    957e:	e0 2d       	mov	r30, r0
    9580:	19 94       	eijmp

00009582 <__umulhisi3>:
    9582:	a2 9f       	mul	r26, r18
    9584:	b0 01       	movw	r22, r0
    9586:	b3 9f       	mul	r27, r19
    9588:	c0 01       	movw	r24, r0
    958a:	a3 9f       	mul	r26, r19
    958c:	70 0d       	add	r23, r0
    958e:	81 1d       	adc	r24, r1
    9590:	11 24       	eor	r1, r1
    9592:	91 1d       	adc	r25, r1
    9594:	b2 9f       	mul	r27, r18
    9596:	70 0d       	add	r23, r0
    9598:	81 1d       	adc	r24, r1
    959a:	11 24       	eor	r1, r1
    959c:	91 1d       	adc	r25, r1
    959e:	08 95       	ret

000095a0 <__muluhisi3>:
    95a0:	f0 df       	rcall	.-32     	; 0x9582 <__umulhisi3>
    95a2:	a5 9f       	mul	r26, r21
    95a4:	90 0d       	add	r25, r0
    95a6:	b4 9f       	mul	r27, r20
    95a8:	90 0d       	add	r25, r0
    95aa:	a4 9f       	mul	r26, r20
    95ac:	80 0d       	add	r24, r0
    95ae:	91 1d       	adc	r25, r1
    95b0:	11 24       	eor	r1, r1
    95b2:	08 95       	ret

000095b4 <__muldi3>:
    95b4:	df 93       	push	r29
    95b6:	cf 93       	push	r28
    95b8:	1f 93       	push	r17
    95ba:	0f 93       	push	r16
    95bc:	9a 9d       	mul	r25, r10
    95be:	f0 2d       	mov	r31, r0
    95c0:	21 9f       	mul	r18, r17
    95c2:	f0 0d       	add	r31, r0
    95c4:	8b 9d       	mul	r24, r11
    95c6:	f0 0d       	add	r31, r0
    95c8:	8a 9d       	mul	r24, r10
    95ca:	e0 2d       	mov	r30, r0
    95cc:	f1 0d       	add	r31, r1
    95ce:	03 9f       	mul	r16, r19
    95d0:	f0 0d       	add	r31, r0
    95d2:	02 9f       	mul	r16, r18
    95d4:	e0 0d       	add	r30, r0
    95d6:	f1 1d       	adc	r31, r1
    95d8:	4e 9d       	mul	r20, r14
    95da:	e0 0d       	add	r30, r0
    95dc:	f1 1d       	adc	r31, r1
    95de:	5e 9d       	mul	r21, r14
    95e0:	f0 0d       	add	r31, r0
    95e2:	4f 9d       	mul	r20, r15
    95e4:	f0 0d       	add	r31, r0
    95e6:	7f 93       	push	r23
    95e8:	6f 93       	push	r22
    95ea:	bf 92       	push	r11
    95ec:	af 92       	push	r10
    95ee:	5f 93       	push	r21
    95f0:	4f 93       	push	r20
    95f2:	d5 01       	movw	r26, r10
    95f4:	c6 df       	rcall	.-116    	; 0x9582 <__umulhisi3>
    95f6:	8b 01       	movw	r16, r22
    95f8:	ac 01       	movw	r20, r24
    95fa:	d7 01       	movw	r26, r14
    95fc:	c2 df       	rcall	.-124    	; 0x9582 <__umulhisi3>
    95fe:	eb 01       	movw	r28, r22
    9600:	e8 0f       	add	r30, r24
    9602:	f9 1f       	adc	r31, r25
    9604:	d6 01       	movw	r26, r12
    9606:	1f d0       	rcall	.+62     	; 0x9646 <__muldi3_6>
    9608:	2f 91       	pop	r18
    960a:	3f 91       	pop	r19
    960c:	d6 01       	movw	r26, r12
    960e:	b9 df       	rcall	.-142    	; 0x9582 <__umulhisi3>
    9610:	c6 0f       	add	r28, r22
    9612:	d7 1f       	adc	r29, r23
    9614:	e8 1f       	adc	r30, r24
    9616:	f9 1f       	adc	r31, r25
    9618:	af 91       	pop	r26
    961a:	bf 91       	pop	r27
    961c:	14 d0       	rcall	.+40     	; 0x9646 <__muldi3_6>
    961e:	2f 91       	pop	r18
    9620:	3f 91       	pop	r19
    9622:	af df       	rcall	.-162    	; 0x9582 <__umulhisi3>
    9624:	c6 0f       	add	r28, r22
    9626:	d7 1f       	adc	r29, r23
    9628:	e8 1f       	adc	r30, r24
    962a:	f9 1f       	adc	r31, r25
    962c:	d6 01       	movw	r26, r12
    962e:	a9 df       	rcall	.-174    	; 0x9582 <__umulhisi3>
    9630:	e6 0f       	add	r30, r22
    9632:	f7 1f       	adc	r31, r23
    9634:	98 01       	movw	r18, r16
    9636:	be 01       	movw	r22, r28
    9638:	cf 01       	movw	r24, r30
    963a:	11 24       	eor	r1, r1
    963c:	0f 91       	pop	r16
    963e:	1f 91       	pop	r17
    9640:	cf 91       	pop	r28
    9642:	df 91       	pop	r29
    9644:	08 95       	ret

00009646 <__muldi3_6>:
    9646:	9d df       	rcall	.-198    	; 0x9582 <__umulhisi3>
    9648:	46 0f       	add	r20, r22
    964a:	57 1f       	adc	r21, r23
    964c:	c8 1f       	adc	r28, r24
    964e:	d9 1f       	adc	r29, r25
    9650:	08 f4       	brcc	.+2      	; 0x9654 <__muldi3_6+0xe>
    9652:	31 96       	adiw	r30, 0x01	; 1
    9654:	08 95       	ret

00009656 <__ashldi3>:
    9656:	0f 93       	push	r16
    9658:	08 30       	cpi	r16, 0x08	; 8
    965a:	90 f0       	brcs	.+36     	; 0x9680 <__ashldi3+0x2a>
    965c:	98 2f       	mov	r25, r24
    965e:	87 2f       	mov	r24, r23
    9660:	76 2f       	mov	r23, r22
    9662:	65 2f       	mov	r22, r21
    9664:	54 2f       	mov	r21, r20
    9666:	43 2f       	mov	r20, r19
    9668:	32 2f       	mov	r19, r18
    966a:	22 27       	eor	r18, r18
    966c:	08 50       	subi	r16, 0x08	; 8
    966e:	f4 cf       	rjmp	.-24     	; 0x9658 <__ashldi3+0x2>
    9670:	22 0f       	add	r18, r18
    9672:	33 1f       	adc	r19, r19
    9674:	44 1f       	adc	r20, r20
    9676:	55 1f       	adc	r21, r21
    9678:	66 1f       	adc	r22, r22
    967a:	77 1f       	adc	r23, r23
    967c:	88 1f       	adc	r24, r24
    967e:	99 1f       	adc	r25, r25
    9680:	0a 95       	dec	r16
    9682:	b2 f7       	brpl	.-20     	; 0x9670 <__ashldi3+0x1a>
    9684:	0f 91       	pop	r16
    9686:	08 95       	ret

00009688 <__ashrdi3>:
    9688:	97 fb       	bst	r25, 7
    968a:	10 f8       	bld	r1, 0

0000968c <__lshrdi3>:
    968c:	16 94       	lsr	r1
    968e:	00 08       	sbc	r0, r0
    9690:	0f 93       	push	r16
    9692:	08 30       	cpi	r16, 0x08	; 8
    9694:	98 f0       	brcs	.+38     	; 0x96bc <__lshrdi3+0x30>
    9696:	08 50       	subi	r16, 0x08	; 8
    9698:	23 2f       	mov	r18, r19
    969a:	34 2f       	mov	r19, r20
    969c:	45 2f       	mov	r20, r21
    969e:	56 2f       	mov	r21, r22
    96a0:	67 2f       	mov	r22, r23
    96a2:	78 2f       	mov	r23, r24
    96a4:	89 2f       	mov	r24, r25
    96a6:	90 2d       	mov	r25, r0
    96a8:	f4 cf       	rjmp	.-24     	; 0x9692 <__lshrdi3+0x6>
    96aa:	05 94       	asr	r0
    96ac:	97 95       	ror	r25
    96ae:	87 95       	ror	r24
    96b0:	77 95       	ror	r23
    96b2:	67 95       	ror	r22
    96b4:	57 95       	ror	r21
    96b6:	47 95       	ror	r20
    96b8:	37 95       	ror	r19
    96ba:	27 95       	ror	r18
    96bc:	0a 95       	dec	r16
    96be:	aa f7       	brpl	.-22     	; 0x96aa <__lshrdi3+0x1e>
    96c0:	0f 91       	pop	r16
    96c2:	08 95       	ret

000096c4 <__adddi3>:
    96c4:	2a 0d       	add	r18, r10
    96c6:	3b 1d       	adc	r19, r11
    96c8:	4c 1d       	adc	r20, r12
    96ca:	5d 1d       	adc	r21, r13
    96cc:	6e 1d       	adc	r22, r14
    96ce:	7f 1d       	adc	r23, r15
    96d0:	80 1f       	adc	r24, r16
    96d2:	91 1f       	adc	r25, r17
    96d4:	08 95       	ret

000096d6 <__subdi3>:
    96d6:	2a 19       	sub	r18, r10
    96d8:	3b 09       	sbc	r19, r11
    96da:	4c 09       	sbc	r20, r12
    96dc:	5d 09       	sbc	r21, r13
    96de:	6e 09       	sbc	r22, r14
    96e0:	7f 09       	sbc	r23, r15
    96e2:	80 0b       	sbc	r24, r16
    96e4:	91 0b       	sbc	r25, r17
    96e6:	08 95       	ret

000096e8 <__subsf3>:
    96e8:	50 58       	subi	r21, 0x80	; 128

000096ea <__addsf3>:
    96ea:	bb 27       	eor	r27, r27
    96ec:	aa 27       	eor	r26, r26
    96ee:	0e d0       	rcall	.+28     	; 0x970c <__addsf3x>
    96f0:	4d c1       	rjmp	.+666    	; 0x998c <__fp_round>
    96f2:	3e d1       	rcall	.+636    	; 0x9970 <__fp_pscA>
    96f4:	30 f0       	brcs	.+12     	; 0x9702 <__addsf3+0x18>
    96f6:	43 d1       	rcall	.+646    	; 0x997e <__fp_pscB>
    96f8:	20 f0       	brcs	.+8      	; 0x9702 <__addsf3+0x18>
    96fa:	31 f4       	brne	.+12     	; 0x9708 <__addsf3+0x1e>
    96fc:	9f 3f       	cpi	r25, 0xFF	; 255
    96fe:	11 f4       	brne	.+4      	; 0x9704 <__addsf3+0x1a>
    9700:	1e f4       	brtc	.+6      	; 0x9708 <__addsf3+0x1e>
    9702:	33 c1       	rjmp	.+614    	; 0x996a <__fp_nan>
    9704:	0e f4       	brtc	.+2      	; 0x9708 <__addsf3+0x1e>
    9706:	e0 95       	com	r30
    9708:	e7 fb       	bst	r30, 7
    970a:	29 c1       	rjmp	.+594    	; 0x995e <__fp_inf>

0000970c <__addsf3x>:
    970c:	e9 2f       	mov	r30, r25
    970e:	4f d1       	rcall	.+670    	; 0x99ae <__fp_split3>
    9710:	80 f3       	brcs	.-32     	; 0x96f2 <__addsf3+0x8>
    9712:	ba 17       	cp	r27, r26
    9714:	62 07       	cpc	r22, r18
    9716:	73 07       	cpc	r23, r19
    9718:	84 07       	cpc	r24, r20
    971a:	95 07       	cpc	r25, r21
    971c:	18 f0       	brcs	.+6      	; 0x9724 <__addsf3x+0x18>
    971e:	71 f4       	brne	.+28     	; 0x973c <__addsf3x+0x30>
    9720:	9e f5       	brtc	.+102    	; 0x9788 <__addsf3x+0x7c>
    9722:	67 c1       	rjmp	.+718    	; 0x99f2 <__fp_zero>
    9724:	0e f4       	brtc	.+2      	; 0x9728 <__addsf3x+0x1c>
    9726:	e0 95       	com	r30
    9728:	0b 2e       	mov	r0, r27
    972a:	ba 2f       	mov	r27, r26
    972c:	a0 2d       	mov	r26, r0
    972e:	0b 01       	movw	r0, r22
    9730:	b9 01       	movw	r22, r18
    9732:	90 01       	movw	r18, r0
    9734:	0c 01       	movw	r0, r24
    9736:	ca 01       	movw	r24, r20
    9738:	a0 01       	movw	r20, r0
    973a:	11 24       	eor	r1, r1
    973c:	ff 27       	eor	r31, r31
    973e:	59 1b       	sub	r21, r25
    9740:	99 f0       	breq	.+38     	; 0x9768 <__addsf3x+0x5c>
    9742:	59 3f       	cpi	r21, 0xF9	; 249
    9744:	50 f4       	brcc	.+20     	; 0x975a <__addsf3x+0x4e>
    9746:	50 3e       	cpi	r21, 0xE0	; 224
    9748:	68 f1       	brcs	.+90     	; 0x97a4 <__addsf3x+0x98>
    974a:	1a 16       	cp	r1, r26
    974c:	f0 40       	sbci	r31, 0x00	; 0
    974e:	a2 2f       	mov	r26, r18
    9750:	23 2f       	mov	r18, r19
    9752:	34 2f       	mov	r19, r20
    9754:	44 27       	eor	r20, r20
    9756:	58 5f       	subi	r21, 0xF8	; 248
    9758:	f3 cf       	rjmp	.-26     	; 0x9740 <__addsf3x+0x34>
    975a:	46 95       	lsr	r20
    975c:	37 95       	ror	r19
    975e:	27 95       	ror	r18
    9760:	a7 95       	ror	r26
    9762:	f0 40       	sbci	r31, 0x00	; 0
    9764:	53 95       	inc	r21
    9766:	c9 f7       	brne	.-14     	; 0x975a <__addsf3x+0x4e>
    9768:	7e f4       	brtc	.+30     	; 0x9788 <__addsf3x+0x7c>
    976a:	1f 16       	cp	r1, r31
    976c:	ba 0b       	sbc	r27, r26
    976e:	62 0b       	sbc	r22, r18
    9770:	73 0b       	sbc	r23, r19
    9772:	84 0b       	sbc	r24, r20
    9774:	ba f0       	brmi	.+46     	; 0x97a4 <__addsf3x+0x98>
    9776:	91 50       	subi	r25, 0x01	; 1
    9778:	a1 f0       	breq	.+40     	; 0x97a2 <__addsf3x+0x96>
    977a:	ff 0f       	add	r31, r31
    977c:	bb 1f       	adc	r27, r27
    977e:	66 1f       	adc	r22, r22
    9780:	77 1f       	adc	r23, r23
    9782:	88 1f       	adc	r24, r24
    9784:	c2 f7       	brpl	.-16     	; 0x9776 <__addsf3x+0x6a>
    9786:	0e c0       	rjmp	.+28     	; 0x97a4 <__addsf3x+0x98>
    9788:	ba 0f       	add	r27, r26
    978a:	62 1f       	adc	r22, r18
    978c:	73 1f       	adc	r23, r19
    978e:	84 1f       	adc	r24, r20
    9790:	48 f4       	brcc	.+18     	; 0x97a4 <__addsf3x+0x98>
    9792:	87 95       	ror	r24
    9794:	77 95       	ror	r23
    9796:	67 95       	ror	r22
    9798:	b7 95       	ror	r27
    979a:	f7 95       	ror	r31
    979c:	9e 3f       	cpi	r25, 0xFE	; 254
    979e:	08 f0       	brcs	.+2      	; 0x97a2 <__addsf3x+0x96>
    97a0:	b3 cf       	rjmp	.-154    	; 0x9708 <__addsf3+0x1e>
    97a2:	93 95       	inc	r25
    97a4:	88 0f       	add	r24, r24
    97a6:	08 f0       	brcs	.+2      	; 0x97aa <__addsf3x+0x9e>
    97a8:	99 27       	eor	r25, r25
    97aa:	ee 0f       	add	r30, r30
    97ac:	97 95       	ror	r25
    97ae:	87 95       	ror	r24
    97b0:	08 95       	ret

000097b2 <__divsf3>:
    97b2:	0c d0       	rcall	.+24     	; 0x97cc <__divsf3x>
    97b4:	eb c0       	rjmp	.+470    	; 0x998c <__fp_round>
    97b6:	e3 d0       	rcall	.+454    	; 0x997e <__fp_pscB>
    97b8:	40 f0       	brcs	.+16     	; 0x97ca <__divsf3+0x18>
    97ba:	da d0       	rcall	.+436    	; 0x9970 <__fp_pscA>
    97bc:	30 f0       	brcs	.+12     	; 0x97ca <__divsf3+0x18>
    97be:	21 f4       	brne	.+8      	; 0x97c8 <__divsf3+0x16>
    97c0:	5f 3f       	cpi	r21, 0xFF	; 255
    97c2:	19 f0       	breq	.+6      	; 0x97ca <__divsf3+0x18>
    97c4:	cc c0       	rjmp	.+408    	; 0x995e <__fp_inf>
    97c6:	51 11       	cpse	r21, r1
    97c8:	15 c1       	rjmp	.+554    	; 0x99f4 <__fp_szero>
    97ca:	cf c0       	rjmp	.+414    	; 0x996a <__fp_nan>

000097cc <__divsf3x>:
    97cc:	f0 d0       	rcall	.+480    	; 0x99ae <__fp_split3>
    97ce:	98 f3       	brcs	.-26     	; 0x97b6 <__divsf3+0x4>

000097d0 <__divsf3_pse>:
    97d0:	99 23       	and	r25, r25
    97d2:	c9 f3       	breq	.-14     	; 0x97c6 <__divsf3+0x14>
    97d4:	55 23       	and	r21, r21
    97d6:	b1 f3       	breq	.-20     	; 0x97c4 <__divsf3+0x12>
    97d8:	95 1b       	sub	r25, r21
    97da:	55 0b       	sbc	r21, r21
    97dc:	bb 27       	eor	r27, r27
    97de:	aa 27       	eor	r26, r26
    97e0:	62 17       	cp	r22, r18
    97e2:	73 07       	cpc	r23, r19
    97e4:	84 07       	cpc	r24, r20
    97e6:	38 f0       	brcs	.+14     	; 0x97f6 <__divsf3_pse+0x26>
    97e8:	9f 5f       	subi	r25, 0xFF	; 255
    97ea:	5f 4f       	sbci	r21, 0xFF	; 255
    97ec:	22 0f       	add	r18, r18
    97ee:	33 1f       	adc	r19, r19
    97f0:	44 1f       	adc	r20, r20
    97f2:	aa 1f       	adc	r26, r26
    97f4:	a9 f3       	breq	.-22     	; 0x97e0 <__divsf3_pse+0x10>
    97f6:	33 d0       	rcall	.+102    	; 0x985e <__divsf3_pse+0x8e>
    97f8:	0e 2e       	mov	r0, r30
    97fa:	3a f0       	brmi	.+14     	; 0x980a <__divsf3_pse+0x3a>
    97fc:	e0 e8       	ldi	r30, 0x80	; 128
    97fe:	30 d0       	rcall	.+96     	; 0x9860 <__divsf3_pse+0x90>
    9800:	91 50       	subi	r25, 0x01	; 1
    9802:	50 40       	sbci	r21, 0x00	; 0
    9804:	e6 95       	lsr	r30
    9806:	00 1c       	adc	r0, r0
    9808:	ca f7       	brpl	.-14     	; 0x97fc <__divsf3_pse+0x2c>
    980a:	29 d0       	rcall	.+82     	; 0x985e <__divsf3_pse+0x8e>
    980c:	fe 2f       	mov	r31, r30
    980e:	27 d0       	rcall	.+78     	; 0x985e <__divsf3_pse+0x8e>
    9810:	66 0f       	add	r22, r22
    9812:	77 1f       	adc	r23, r23
    9814:	88 1f       	adc	r24, r24
    9816:	bb 1f       	adc	r27, r27
    9818:	26 17       	cp	r18, r22
    981a:	37 07       	cpc	r19, r23
    981c:	48 07       	cpc	r20, r24
    981e:	ab 07       	cpc	r26, r27
    9820:	b0 e8       	ldi	r27, 0x80	; 128
    9822:	09 f0       	breq	.+2      	; 0x9826 <__divsf3_pse+0x56>
    9824:	bb 0b       	sbc	r27, r27
    9826:	80 2d       	mov	r24, r0
    9828:	bf 01       	movw	r22, r30
    982a:	ff 27       	eor	r31, r31
    982c:	93 58       	subi	r25, 0x83	; 131
    982e:	5f 4f       	sbci	r21, 0xFF	; 255
    9830:	2a f0       	brmi	.+10     	; 0x983c <__divsf3_pse+0x6c>
    9832:	9e 3f       	cpi	r25, 0xFE	; 254
    9834:	51 05       	cpc	r21, r1
    9836:	68 f0       	brcs	.+26     	; 0x9852 <__divsf3_pse+0x82>
    9838:	92 c0       	rjmp	.+292    	; 0x995e <__fp_inf>
    983a:	dc c0       	rjmp	.+440    	; 0x99f4 <__fp_szero>
    983c:	5f 3f       	cpi	r21, 0xFF	; 255
    983e:	ec f3       	brlt	.-6      	; 0x983a <__divsf3_pse+0x6a>
    9840:	98 3e       	cpi	r25, 0xE8	; 232
    9842:	dc f3       	brlt	.-10     	; 0x983a <__divsf3_pse+0x6a>
    9844:	86 95       	lsr	r24
    9846:	77 95       	ror	r23
    9848:	67 95       	ror	r22
    984a:	b7 95       	ror	r27
    984c:	f7 95       	ror	r31
    984e:	9f 5f       	subi	r25, 0xFF	; 255
    9850:	c9 f7       	brne	.-14     	; 0x9844 <__divsf3_pse+0x74>
    9852:	88 0f       	add	r24, r24
    9854:	91 1d       	adc	r25, r1
    9856:	96 95       	lsr	r25
    9858:	87 95       	ror	r24
    985a:	97 f9       	bld	r25, 7
    985c:	08 95       	ret
    985e:	e1 e0       	ldi	r30, 0x01	; 1
    9860:	66 0f       	add	r22, r22
    9862:	77 1f       	adc	r23, r23
    9864:	88 1f       	adc	r24, r24
    9866:	bb 1f       	adc	r27, r27
    9868:	62 17       	cp	r22, r18
    986a:	73 07       	cpc	r23, r19
    986c:	84 07       	cpc	r24, r20
    986e:	ba 07       	cpc	r27, r26
    9870:	20 f0       	brcs	.+8      	; 0x987a <__divsf3_pse+0xaa>
    9872:	62 1b       	sub	r22, r18
    9874:	73 0b       	sbc	r23, r19
    9876:	84 0b       	sbc	r24, r20
    9878:	ba 0b       	sbc	r27, r26
    987a:	ee 1f       	adc	r30, r30
    987c:	88 f7       	brcc	.-30     	; 0x9860 <__divsf3_pse+0x90>
    987e:	e0 95       	com	r30
    9880:	08 95       	ret

00009882 <__fixsfsi>:
    9882:	04 d0       	rcall	.+8      	; 0x988c <__fixunssfsi>
    9884:	68 94       	set
    9886:	b1 11       	cpse	r27, r1
    9888:	b5 c0       	rjmp	.+362    	; 0x99f4 <__fp_szero>
    988a:	08 95       	ret

0000988c <__fixunssfsi>:
    988c:	98 d0       	rcall	.+304    	; 0x99be <__fp_splitA>
    988e:	88 f0       	brcs	.+34     	; 0x98b2 <__fixunssfsi+0x26>
    9890:	9f 57       	subi	r25, 0x7F	; 127
    9892:	90 f0       	brcs	.+36     	; 0x98b8 <__fixunssfsi+0x2c>
    9894:	b9 2f       	mov	r27, r25
    9896:	99 27       	eor	r25, r25
    9898:	b7 51       	subi	r27, 0x17	; 23
    989a:	a0 f0       	brcs	.+40     	; 0x98c4 <__fixunssfsi+0x38>
    989c:	d1 f0       	breq	.+52     	; 0x98d2 <__fixunssfsi+0x46>
    989e:	66 0f       	add	r22, r22
    98a0:	77 1f       	adc	r23, r23
    98a2:	88 1f       	adc	r24, r24
    98a4:	99 1f       	adc	r25, r25
    98a6:	1a f0       	brmi	.+6      	; 0x98ae <__fixunssfsi+0x22>
    98a8:	ba 95       	dec	r27
    98aa:	c9 f7       	brne	.-14     	; 0x989e <__fixunssfsi+0x12>
    98ac:	12 c0       	rjmp	.+36     	; 0x98d2 <__fixunssfsi+0x46>
    98ae:	b1 30       	cpi	r27, 0x01	; 1
    98b0:	81 f0       	breq	.+32     	; 0x98d2 <__fixunssfsi+0x46>
    98b2:	9f d0       	rcall	.+318    	; 0x99f2 <__fp_zero>
    98b4:	b1 e0       	ldi	r27, 0x01	; 1
    98b6:	08 95       	ret
    98b8:	9c c0       	rjmp	.+312    	; 0x99f2 <__fp_zero>
    98ba:	67 2f       	mov	r22, r23
    98bc:	78 2f       	mov	r23, r24
    98be:	88 27       	eor	r24, r24
    98c0:	b8 5f       	subi	r27, 0xF8	; 248
    98c2:	39 f0       	breq	.+14     	; 0x98d2 <__fixunssfsi+0x46>
    98c4:	b9 3f       	cpi	r27, 0xF9	; 249
    98c6:	cc f3       	brlt	.-14     	; 0x98ba <__fixunssfsi+0x2e>
    98c8:	86 95       	lsr	r24
    98ca:	77 95       	ror	r23
    98cc:	67 95       	ror	r22
    98ce:	b3 95       	inc	r27
    98d0:	d9 f7       	brne	.-10     	; 0x98c8 <__fixunssfsi+0x3c>
    98d2:	3e f4       	brtc	.+14     	; 0x98e2 <__fixunssfsi+0x56>
    98d4:	90 95       	com	r25
    98d6:	80 95       	com	r24
    98d8:	70 95       	com	r23
    98da:	61 95       	neg	r22
    98dc:	7f 4f       	sbci	r23, 0xFF	; 255
    98de:	8f 4f       	sbci	r24, 0xFF	; 255
    98e0:	9f 4f       	sbci	r25, 0xFF	; 255
    98e2:	08 95       	ret

000098e4 <__floatunsisf>:
    98e4:	e8 94       	clt
    98e6:	09 c0       	rjmp	.+18     	; 0x98fa <__floatsisf+0x12>

000098e8 <__floatsisf>:
    98e8:	97 fb       	bst	r25, 7
    98ea:	3e f4       	brtc	.+14     	; 0x98fa <__floatsisf+0x12>
    98ec:	90 95       	com	r25
    98ee:	80 95       	com	r24
    98f0:	70 95       	com	r23
    98f2:	61 95       	neg	r22
    98f4:	7f 4f       	sbci	r23, 0xFF	; 255
    98f6:	8f 4f       	sbci	r24, 0xFF	; 255
    98f8:	9f 4f       	sbci	r25, 0xFF	; 255
    98fa:	99 23       	and	r25, r25
    98fc:	a9 f0       	breq	.+42     	; 0x9928 <__floatsisf+0x40>
    98fe:	f9 2f       	mov	r31, r25
    9900:	96 e9       	ldi	r25, 0x96	; 150
    9902:	bb 27       	eor	r27, r27
    9904:	93 95       	inc	r25
    9906:	f6 95       	lsr	r31
    9908:	87 95       	ror	r24
    990a:	77 95       	ror	r23
    990c:	67 95       	ror	r22
    990e:	b7 95       	ror	r27
    9910:	f1 11       	cpse	r31, r1
    9912:	f8 cf       	rjmp	.-16     	; 0x9904 <__floatsisf+0x1c>
    9914:	fa f4       	brpl	.+62     	; 0x9954 <__floatsisf+0x6c>
    9916:	bb 0f       	add	r27, r27
    9918:	11 f4       	brne	.+4      	; 0x991e <__floatsisf+0x36>
    991a:	60 ff       	sbrs	r22, 0
    991c:	1b c0       	rjmp	.+54     	; 0x9954 <__floatsisf+0x6c>
    991e:	6f 5f       	subi	r22, 0xFF	; 255
    9920:	7f 4f       	sbci	r23, 0xFF	; 255
    9922:	8f 4f       	sbci	r24, 0xFF	; 255
    9924:	9f 4f       	sbci	r25, 0xFF	; 255
    9926:	16 c0       	rjmp	.+44     	; 0x9954 <__floatsisf+0x6c>
    9928:	88 23       	and	r24, r24
    992a:	11 f0       	breq	.+4      	; 0x9930 <__floatsisf+0x48>
    992c:	96 e9       	ldi	r25, 0x96	; 150
    992e:	11 c0       	rjmp	.+34     	; 0x9952 <__floatsisf+0x6a>
    9930:	77 23       	and	r23, r23
    9932:	21 f0       	breq	.+8      	; 0x993c <__floatsisf+0x54>
    9934:	9e e8       	ldi	r25, 0x8E	; 142
    9936:	87 2f       	mov	r24, r23
    9938:	76 2f       	mov	r23, r22
    993a:	05 c0       	rjmp	.+10     	; 0x9946 <__floatsisf+0x5e>
    993c:	66 23       	and	r22, r22
    993e:	71 f0       	breq	.+28     	; 0x995c <__floatsisf+0x74>
    9940:	96 e8       	ldi	r25, 0x86	; 134
    9942:	86 2f       	mov	r24, r22
    9944:	70 e0       	ldi	r23, 0x00	; 0
    9946:	60 e0       	ldi	r22, 0x00	; 0
    9948:	2a f0       	brmi	.+10     	; 0x9954 <__floatsisf+0x6c>
    994a:	9a 95       	dec	r25
    994c:	66 0f       	add	r22, r22
    994e:	77 1f       	adc	r23, r23
    9950:	88 1f       	adc	r24, r24
    9952:	da f7       	brpl	.-10     	; 0x994a <__floatsisf+0x62>
    9954:	88 0f       	add	r24, r24
    9956:	96 95       	lsr	r25
    9958:	87 95       	ror	r24
    995a:	97 f9       	bld	r25, 7
    995c:	08 95       	ret

0000995e <__fp_inf>:
    995e:	97 f9       	bld	r25, 7
    9960:	9f 67       	ori	r25, 0x7F	; 127
    9962:	80 e8       	ldi	r24, 0x80	; 128
    9964:	70 e0       	ldi	r23, 0x00	; 0
    9966:	60 e0       	ldi	r22, 0x00	; 0
    9968:	08 95       	ret

0000996a <__fp_nan>:
    996a:	9f ef       	ldi	r25, 0xFF	; 255
    996c:	80 ec       	ldi	r24, 0xC0	; 192
    996e:	08 95       	ret

00009970 <__fp_pscA>:
    9970:	00 24       	eor	r0, r0
    9972:	0a 94       	dec	r0
    9974:	16 16       	cp	r1, r22
    9976:	17 06       	cpc	r1, r23
    9978:	18 06       	cpc	r1, r24
    997a:	09 06       	cpc	r0, r25
    997c:	08 95       	ret

0000997e <__fp_pscB>:
    997e:	00 24       	eor	r0, r0
    9980:	0a 94       	dec	r0
    9982:	12 16       	cp	r1, r18
    9984:	13 06       	cpc	r1, r19
    9986:	14 06       	cpc	r1, r20
    9988:	05 06       	cpc	r0, r21
    998a:	08 95       	ret

0000998c <__fp_round>:
    998c:	09 2e       	mov	r0, r25
    998e:	03 94       	inc	r0
    9990:	00 0c       	add	r0, r0
    9992:	11 f4       	brne	.+4      	; 0x9998 <__fp_round+0xc>
    9994:	88 23       	and	r24, r24
    9996:	52 f0       	brmi	.+20     	; 0x99ac <__fp_round+0x20>
    9998:	bb 0f       	add	r27, r27
    999a:	40 f4       	brcc	.+16     	; 0x99ac <__fp_round+0x20>
    999c:	bf 2b       	or	r27, r31
    999e:	11 f4       	brne	.+4      	; 0x99a4 <__fp_round+0x18>
    99a0:	60 ff       	sbrs	r22, 0
    99a2:	04 c0       	rjmp	.+8      	; 0x99ac <__fp_round+0x20>
    99a4:	6f 5f       	subi	r22, 0xFF	; 255
    99a6:	7f 4f       	sbci	r23, 0xFF	; 255
    99a8:	8f 4f       	sbci	r24, 0xFF	; 255
    99aa:	9f 4f       	sbci	r25, 0xFF	; 255
    99ac:	08 95       	ret

000099ae <__fp_split3>:
    99ae:	57 fd       	sbrc	r21, 7
    99b0:	90 58       	subi	r25, 0x80	; 128
    99b2:	44 0f       	add	r20, r20
    99b4:	55 1f       	adc	r21, r21
    99b6:	59 f0       	breq	.+22     	; 0x99ce <__fp_splitA+0x10>
    99b8:	5f 3f       	cpi	r21, 0xFF	; 255
    99ba:	71 f0       	breq	.+28     	; 0x99d8 <__fp_splitA+0x1a>
    99bc:	47 95       	ror	r20

000099be <__fp_splitA>:
    99be:	88 0f       	add	r24, r24
    99c0:	97 fb       	bst	r25, 7
    99c2:	99 1f       	adc	r25, r25
    99c4:	61 f0       	breq	.+24     	; 0x99de <__fp_splitA+0x20>
    99c6:	9f 3f       	cpi	r25, 0xFF	; 255
    99c8:	79 f0       	breq	.+30     	; 0x99e8 <__fp_splitA+0x2a>
    99ca:	87 95       	ror	r24
    99cc:	08 95       	ret
    99ce:	12 16       	cp	r1, r18
    99d0:	13 06       	cpc	r1, r19
    99d2:	14 06       	cpc	r1, r20
    99d4:	55 1f       	adc	r21, r21
    99d6:	f2 cf       	rjmp	.-28     	; 0x99bc <__fp_split3+0xe>
    99d8:	46 95       	lsr	r20
    99da:	f1 df       	rcall	.-30     	; 0x99be <__fp_splitA>
    99dc:	08 c0       	rjmp	.+16     	; 0x99ee <__fp_splitA+0x30>
    99de:	16 16       	cp	r1, r22
    99e0:	17 06       	cpc	r1, r23
    99e2:	18 06       	cpc	r1, r24
    99e4:	99 1f       	adc	r25, r25
    99e6:	f1 cf       	rjmp	.-30     	; 0x99ca <__fp_splitA+0xc>
    99e8:	86 95       	lsr	r24
    99ea:	71 05       	cpc	r23, r1
    99ec:	61 05       	cpc	r22, r1
    99ee:	08 94       	sec
    99f0:	08 95       	ret

000099f2 <__fp_zero>:
    99f2:	e8 94       	clt

000099f4 <__fp_szero>:
    99f4:	bb 27       	eor	r27, r27
    99f6:	66 27       	eor	r22, r22
    99f8:	77 27       	eor	r23, r23
    99fa:	cb 01       	movw	r24, r22
    99fc:	97 f9       	bld	r25, 7
    99fe:	08 95       	ret

00009a00 <__mulsf3>:
    9a00:	0b d0       	rcall	.+22     	; 0x9a18 <__mulsf3x>
    9a02:	c4 cf       	rjmp	.-120    	; 0x998c <__fp_round>
    9a04:	b5 df       	rcall	.-150    	; 0x9970 <__fp_pscA>
    9a06:	28 f0       	brcs	.+10     	; 0x9a12 <__mulsf3+0x12>
    9a08:	ba df       	rcall	.-140    	; 0x997e <__fp_pscB>
    9a0a:	18 f0       	brcs	.+6      	; 0x9a12 <__mulsf3+0x12>
    9a0c:	95 23       	and	r25, r21
    9a0e:	09 f0       	breq	.+2      	; 0x9a12 <__mulsf3+0x12>
    9a10:	a6 cf       	rjmp	.-180    	; 0x995e <__fp_inf>
    9a12:	ab cf       	rjmp	.-170    	; 0x996a <__fp_nan>
    9a14:	11 24       	eor	r1, r1
    9a16:	ee cf       	rjmp	.-36     	; 0x99f4 <__fp_szero>

00009a18 <__mulsf3x>:
    9a18:	ca df       	rcall	.-108    	; 0x99ae <__fp_split3>
    9a1a:	a0 f3       	brcs	.-24     	; 0x9a04 <__mulsf3+0x4>

00009a1c <__mulsf3_pse>:
    9a1c:	95 9f       	mul	r25, r21
    9a1e:	d1 f3       	breq	.-12     	; 0x9a14 <__mulsf3+0x14>
    9a20:	95 0f       	add	r25, r21
    9a22:	50 e0       	ldi	r21, 0x00	; 0
    9a24:	55 1f       	adc	r21, r21
    9a26:	62 9f       	mul	r22, r18
    9a28:	f0 01       	movw	r30, r0
    9a2a:	72 9f       	mul	r23, r18
    9a2c:	bb 27       	eor	r27, r27
    9a2e:	f0 0d       	add	r31, r0
    9a30:	b1 1d       	adc	r27, r1
    9a32:	63 9f       	mul	r22, r19
    9a34:	aa 27       	eor	r26, r26
    9a36:	f0 0d       	add	r31, r0
    9a38:	b1 1d       	adc	r27, r1
    9a3a:	aa 1f       	adc	r26, r26
    9a3c:	64 9f       	mul	r22, r20
    9a3e:	66 27       	eor	r22, r22
    9a40:	b0 0d       	add	r27, r0
    9a42:	a1 1d       	adc	r26, r1
    9a44:	66 1f       	adc	r22, r22
    9a46:	82 9f       	mul	r24, r18
    9a48:	22 27       	eor	r18, r18
    9a4a:	b0 0d       	add	r27, r0
    9a4c:	a1 1d       	adc	r26, r1
    9a4e:	62 1f       	adc	r22, r18
    9a50:	73 9f       	mul	r23, r19
    9a52:	b0 0d       	add	r27, r0
    9a54:	a1 1d       	adc	r26, r1
    9a56:	62 1f       	adc	r22, r18
    9a58:	83 9f       	mul	r24, r19
    9a5a:	a0 0d       	add	r26, r0
    9a5c:	61 1d       	adc	r22, r1
    9a5e:	22 1f       	adc	r18, r18
    9a60:	74 9f       	mul	r23, r20
    9a62:	33 27       	eor	r19, r19
    9a64:	a0 0d       	add	r26, r0
    9a66:	61 1d       	adc	r22, r1
    9a68:	23 1f       	adc	r18, r19
    9a6a:	84 9f       	mul	r24, r20
    9a6c:	60 0d       	add	r22, r0
    9a6e:	21 1d       	adc	r18, r1
    9a70:	82 2f       	mov	r24, r18
    9a72:	76 2f       	mov	r23, r22
    9a74:	6a 2f       	mov	r22, r26
    9a76:	11 24       	eor	r1, r1
    9a78:	9f 57       	subi	r25, 0x7F	; 127
    9a7a:	50 40       	sbci	r21, 0x00	; 0
    9a7c:	8a f0       	brmi	.+34     	; 0x9aa0 <__mulsf3_pse+0x84>
    9a7e:	e1 f0       	breq	.+56     	; 0x9ab8 <__mulsf3_pse+0x9c>
    9a80:	88 23       	and	r24, r24
    9a82:	4a f0       	brmi	.+18     	; 0x9a96 <__mulsf3_pse+0x7a>
    9a84:	ee 0f       	add	r30, r30
    9a86:	ff 1f       	adc	r31, r31
    9a88:	bb 1f       	adc	r27, r27
    9a8a:	66 1f       	adc	r22, r22
    9a8c:	77 1f       	adc	r23, r23
    9a8e:	88 1f       	adc	r24, r24
    9a90:	91 50       	subi	r25, 0x01	; 1
    9a92:	50 40       	sbci	r21, 0x00	; 0
    9a94:	a9 f7       	brne	.-22     	; 0x9a80 <__mulsf3_pse+0x64>
    9a96:	9e 3f       	cpi	r25, 0xFE	; 254
    9a98:	51 05       	cpc	r21, r1
    9a9a:	70 f0       	brcs	.+28     	; 0x9ab8 <__mulsf3_pse+0x9c>
    9a9c:	60 cf       	rjmp	.-320    	; 0x995e <__fp_inf>
    9a9e:	aa cf       	rjmp	.-172    	; 0x99f4 <__fp_szero>
    9aa0:	5f 3f       	cpi	r21, 0xFF	; 255
    9aa2:	ec f3       	brlt	.-6      	; 0x9a9e <__mulsf3_pse+0x82>
    9aa4:	98 3e       	cpi	r25, 0xE8	; 232
    9aa6:	dc f3       	brlt	.-10     	; 0x9a9e <__mulsf3_pse+0x82>
    9aa8:	86 95       	lsr	r24
    9aaa:	77 95       	ror	r23
    9aac:	67 95       	ror	r22
    9aae:	b7 95       	ror	r27
    9ab0:	f7 95       	ror	r31
    9ab2:	e7 95       	ror	r30
    9ab4:	9f 5f       	subi	r25, 0xFF	; 255
    9ab6:	c1 f7       	brne	.-16     	; 0x9aa8 <__mulsf3_pse+0x8c>
    9ab8:	fe 2b       	or	r31, r30
    9aba:	88 0f       	add	r24, r24
    9abc:	91 1d       	adc	r25, r1
    9abe:	96 95       	lsr	r25
    9ac0:	87 95       	ror	r24
    9ac2:	97 f9       	bld	r25, 7
    9ac4:	08 95       	ret

00009ac6 <memcpy>:
    9ac6:	fb 01       	movw	r30, r22
    9ac8:	dc 01       	movw	r26, r24
    9aca:	02 c0       	rjmp	.+4      	; 0x9ad0 <memcpy+0xa>
    9acc:	01 90       	ld	r0, Z+
    9ace:	0d 92       	st	X+, r0
    9ad0:	41 50       	subi	r20, 0x01	; 1
    9ad2:	50 40       	sbci	r21, 0x00	; 0
    9ad4:	d8 f7       	brcc	.-10     	; 0x9acc <memcpy+0x6>
    9ad6:	08 95       	ret

00009ad8 <fdevopen>:
    9ad8:	0f 93       	push	r16
    9ada:	1f 93       	push	r17
    9adc:	cf 93       	push	r28
    9ade:	df 93       	push	r29
    9ae0:	00 97       	sbiw	r24, 0x00	; 0
    9ae2:	31 f4       	brne	.+12     	; 0x9af0 <fdevopen+0x18>
    9ae4:	61 15       	cp	r22, r1
    9ae6:	71 05       	cpc	r23, r1
    9ae8:	19 f4       	brne	.+6      	; 0x9af0 <fdevopen+0x18>
    9aea:	80 e0       	ldi	r24, 0x00	; 0
    9aec:	90 e0       	ldi	r25, 0x00	; 0
    9aee:	39 c0       	rjmp	.+114    	; 0x9b62 <fdevopen+0x8a>
    9af0:	8b 01       	movw	r16, r22
    9af2:	ec 01       	movw	r28, r24
    9af4:	6e e0       	ldi	r22, 0x0E	; 14
    9af6:	70 e0       	ldi	r23, 0x00	; 0
    9af8:	81 e0       	ldi	r24, 0x01	; 1
    9afa:	90 e0       	ldi	r25, 0x00	; 0
    9afc:	99 d2       	rcall	.+1330   	; 0xa030 <calloc>
    9afe:	fc 01       	movw	r30, r24
    9b00:	89 2b       	or	r24, r25
    9b02:	99 f3       	breq	.-26     	; 0x9aea <fdevopen+0x12>
    9b04:	80 e8       	ldi	r24, 0x80	; 128
    9b06:	83 83       	std	Z+3, r24	; 0x03
    9b08:	01 15       	cp	r16, r1
    9b0a:	11 05       	cpc	r17, r1
    9b0c:	71 f0       	breq	.+28     	; 0x9b2a <fdevopen+0x52>
    9b0e:	02 87       	std	Z+10, r16	; 0x0a
    9b10:	13 87       	std	Z+11, r17	; 0x0b
    9b12:	81 e8       	ldi	r24, 0x81	; 129
    9b14:	83 83       	std	Z+3, r24	; 0x03
    9b16:	80 91 ab 29 	lds	r24, 0x29AB	; 0x8029ab <__iob>
    9b1a:	90 91 ac 29 	lds	r25, 0x29AC	; 0x8029ac <__iob+0x1>
    9b1e:	89 2b       	or	r24, r25
    9b20:	21 f4       	brne	.+8      	; 0x9b2a <fdevopen+0x52>
    9b22:	e0 93 ab 29 	sts	0x29AB, r30	; 0x8029ab <__iob>
    9b26:	f0 93 ac 29 	sts	0x29AC, r31	; 0x8029ac <__iob+0x1>
    9b2a:	20 97       	sbiw	r28, 0x00	; 0
    9b2c:	c9 f0       	breq	.+50     	; 0x9b60 <fdevopen+0x88>
    9b2e:	c0 87       	std	Z+8, r28	; 0x08
    9b30:	d1 87       	std	Z+9, r29	; 0x09
    9b32:	83 81       	ldd	r24, Z+3	; 0x03
    9b34:	82 60       	ori	r24, 0x02	; 2
    9b36:	83 83       	std	Z+3, r24	; 0x03
    9b38:	80 91 ad 29 	lds	r24, 0x29AD	; 0x8029ad <__iob+0x2>
    9b3c:	90 91 ae 29 	lds	r25, 0x29AE	; 0x8029ae <__iob+0x3>
    9b40:	89 2b       	or	r24, r25
    9b42:	71 f4       	brne	.+28     	; 0x9b60 <fdevopen+0x88>
    9b44:	e0 93 ad 29 	sts	0x29AD, r30	; 0x8029ad <__iob+0x2>
    9b48:	f0 93 ae 29 	sts	0x29AE, r31	; 0x8029ae <__iob+0x3>
    9b4c:	80 91 af 29 	lds	r24, 0x29AF	; 0x8029af <__iob+0x4>
    9b50:	90 91 b0 29 	lds	r25, 0x29B0	; 0x8029b0 <__iob+0x5>
    9b54:	89 2b       	or	r24, r25
    9b56:	21 f4       	brne	.+8      	; 0x9b60 <fdevopen+0x88>
    9b58:	e0 93 af 29 	sts	0x29AF, r30	; 0x8029af <__iob+0x4>
    9b5c:	f0 93 b0 29 	sts	0x29B0, r31	; 0x8029b0 <__iob+0x5>
    9b60:	cf 01       	movw	r24, r30
    9b62:	df 91       	pop	r29
    9b64:	cf 91       	pop	r28
    9b66:	1f 91       	pop	r17
    9b68:	0f 91       	pop	r16
    9b6a:	08 95       	ret

00009b6c <printf>:
    9b6c:	cf 93       	push	r28
    9b6e:	df 93       	push	r29
    9b70:	cd b7       	in	r28, 0x3d	; 61
    9b72:	de b7       	in	r29, 0x3e	; 62
    9b74:	ae 01       	movw	r20, r28
    9b76:	4a 5f       	subi	r20, 0xFA	; 250
    9b78:	5f 4f       	sbci	r21, 0xFF	; 255
    9b7a:	fa 01       	movw	r30, r20
    9b7c:	61 91       	ld	r22, Z+
    9b7e:	71 91       	ld	r23, Z+
    9b80:	af 01       	movw	r20, r30
    9b82:	80 91 ad 29 	lds	r24, 0x29AD	; 0x8029ad <__iob+0x2>
    9b86:	90 91 ae 29 	lds	r25, 0x29AE	; 0x8029ae <__iob+0x3>
    9b8a:	5b d0       	rcall	.+182    	; 0x9c42 <vfprintf>
    9b8c:	df 91       	pop	r29
    9b8e:	cf 91       	pop	r28
    9b90:	08 95       	ret

00009b92 <puts>:
    9b92:	0f 93       	push	r16
    9b94:	1f 93       	push	r17
    9b96:	cf 93       	push	r28
    9b98:	df 93       	push	r29
    9b9a:	e0 91 ad 29 	lds	r30, 0x29AD	; 0x8029ad <__iob+0x2>
    9b9e:	f0 91 ae 29 	lds	r31, 0x29AE	; 0x8029ae <__iob+0x3>
    9ba2:	23 81       	ldd	r18, Z+3	; 0x03
    9ba4:	21 ff       	sbrs	r18, 1
    9ba6:	1b c0       	rjmp	.+54     	; 0x9bde <puts+0x4c>
    9ba8:	8c 01       	movw	r16, r24
    9baa:	d0 e0       	ldi	r29, 0x00	; 0
    9bac:	c0 e0       	ldi	r28, 0x00	; 0
    9bae:	f8 01       	movw	r30, r16
    9bb0:	81 91       	ld	r24, Z+
    9bb2:	8f 01       	movw	r16, r30
    9bb4:	60 91 ad 29 	lds	r22, 0x29AD	; 0x8029ad <__iob+0x2>
    9bb8:	70 91 ae 29 	lds	r23, 0x29AE	; 0x8029ae <__iob+0x3>
    9bbc:	db 01       	movw	r26, r22
    9bbe:	18 96       	adiw	r26, 0x08	; 8
    9bc0:	ed 91       	ld	r30, X+
    9bc2:	fc 91       	ld	r31, X
    9bc4:	19 97       	sbiw	r26, 0x09	; 9
    9bc6:	88 23       	and	r24, r24
    9bc8:	31 f0       	breq	.+12     	; 0x9bd6 <puts+0x44>
    9bca:	19 95       	eicall
    9bcc:	89 2b       	or	r24, r25
    9bce:	79 f3       	breq	.-34     	; 0x9bae <puts+0x1c>
    9bd0:	df ef       	ldi	r29, 0xFF	; 255
    9bd2:	cf ef       	ldi	r28, 0xFF	; 255
    9bd4:	ec cf       	rjmp	.-40     	; 0x9bae <puts+0x1c>
    9bd6:	8a e0       	ldi	r24, 0x0A	; 10
    9bd8:	19 95       	eicall
    9bda:	89 2b       	or	r24, r25
    9bdc:	19 f0       	breq	.+6      	; 0x9be4 <puts+0x52>
    9bde:	8f ef       	ldi	r24, 0xFF	; 255
    9be0:	9f ef       	ldi	r25, 0xFF	; 255
    9be2:	02 c0       	rjmp	.+4      	; 0x9be8 <puts+0x56>
    9be4:	8d 2f       	mov	r24, r29
    9be6:	9c 2f       	mov	r25, r28
    9be8:	df 91       	pop	r29
    9bea:	cf 91       	pop	r28
    9bec:	1f 91       	pop	r17
    9bee:	0f 91       	pop	r16
    9bf0:	08 95       	ret

00009bf2 <sprintf>:
    9bf2:	0f 93       	push	r16
    9bf4:	1f 93       	push	r17
    9bf6:	cf 93       	push	r28
    9bf8:	df 93       	push	r29
    9bfa:	cd b7       	in	r28, 0x3d	; 61
    9bfc:	de b7       	in	r29, 0x3e	; 62
    9bfe:	2e 97       	sbiw	r28, 0x0e	; 14
    9c00:	cd bf       	out	0x3d, r28	; 61
    9c02:	de bf       	out	0x3e, r29	; 62
    9c04:	0e 89       	ldd	r16, Y+22	; 0x16
    9c06:	1f 89       	ldd	r17, Y+23	; 0x17
    9c08:	86 e0       	ldi	r24, 0x06	; 6
    9c0a:	8c 83       	std	Y+4, r24	; 0x04
    9c0c:	09 83       	std	Y+1, r16	; 0x01
    9c0e:	1a 83       	std	Y+2, r17	; 0x02
    9c10:	8f ef       	ldi	r24, 0xFF	; 255
    9c12:	9f e7       	ldi	r25, 0x7F	; 127
    9c14:	8d 83       	std	Y+5, r24	; 0x05
    9c16:	9e 83       	std	Y+6, r25	; 0x06
    9c18:	ae 01       	movw	r20, r28
    9c1a:	46 5e       	subi	r20, 0xE6	; 230
    9c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    9c1e:	68 8d       	ldd	r22, Y+24	; 0x18
    9c20:	79 8d       	ldd	r23, Y+25	; 0x19
    9c22:	ce 01       	movw	r24, r28
    9c24:	01 96       	adiw	r24, 0x01	; 1
    9c26:	0d d0       	rcall	.+26     	; 0x9c42 <vfprintf>
    9c28:	ef 81       	ldd	r30, Y+7	; 0x07
    9c2a:	f8 85       	ldd	r31, Y+8	; 0x08
    9c2c:	e0 0f       	add	r30, r16
    9c2e:	f1 1f       	adc	r31, r17
    9c30:	10 82       	st	Z, r1
    9c32:	2e 96       	adiw	r28, 0x0e	; 14
    9c34:	cd bf       	out	0x3d, r28	; 61
    9c36:	de bf       	out	0x3e, r29	; 62
    9c38:	df 91       	pop	r29
    9c3a:	cf 91       	pop	r28
    9c3c:	1f 91       	pop	r17
    9c3e:	0f 91       	pop	r16
    9c40:	08 95       	ret

00009c42 <vfprintf>:
    9c42:	2f 92       	push	r2
    9c44:	3f 92       	push	r3
    9c46:	4f 92       	push	r4
    9c48:	5f 92       	push	r5
    9c4a:	6f 92       	push	r6
    9c4c:	7f 92       	push	r7
    9c4e:	8f 92       	push	r8
    9c50:	9f 92       	push	r9
    9c52:	af 92       	push	r10
    9c54:	bf 92       	push	r11
    9c56:	cf 92       	push	r12
    9c58:	df 92       	push	r13
    9c5a:	ef 92       	push	r14
    9c5c:	ff 92       	push	r15
    9c5e:	0f 93       	push	r16
    9c60:	1f 93       	push	r17
    9c62:	cf 93       	push	r28
    9c64:	df 93       	push	r29
    9c66:	cd b7       	in	r28, 0x3d	; 61
    9c68:	de b7       	in	r29, 0x3e	; 62
    9c6a:	2b 97       	sbiw	r28, 0x0b	; 11
    9c6c:	cd bf       	out	0x3d, r28	; 61
    9c6e:	de bf       	out	0x3e, r29	; 62
    9c70:	6c 01       	movw	r12, r24
    9c72:	7b 01       	movw	r14, r22
    9c74:	8a 01       	movw	r16, r20
    9c76:	fc 01       	movw	r30, r24
    9c78:	16 82       	std	Z+6, r1	; 0x06
    9c7a:	17 82       	std	Z+7, r1	; 0x07
    9c7c:	83 81       	ldd	r24, Z+3	; 0x03
    9c7e:	81 ff       	sbrs	r24, 1
    9c80:	bf c1       	rjmp	.+894    	; 0xa000 <vfprintf+0x3be>
    9c82:	ce 01       	movw	r24, r28
    9c84:	01 96       	adiw	r24, 0x01	; 1
    9c86:	3c 01       	movw	r6, r24
    9c88:	f6 01       	movw	r30, r12
    9c8a:	93 81       	ldd	r25, Z+3	; 0x03
    9c8c:	f7 01       	movw	r30, r14
    9c8e:	93 fd       	sbrc	r25, 3
    9c90:	85 91       	lpm	r24, Z+
    9c92:	93 ff       	sbrs	r25, 3
    9c94:	81 91       	ld	r24, Z+
    9c96:	7f 01       	movw	r14, r30
    9c98:	88 23       	and	r24, r24
    9c9a:	09 f4       	brne	.+2      	; 0x9c9e <vfprintf+0x5c>
    9c9c:	ad c1       	rjmp	.+858    	; 0x9ff8 <vfprintf+0x3b6>
    9c9e:	85 32       	cpi	r24, 0x25	; 37
    9ca0:	39 f4       	brne	.+14     	; 0x9cb0 <vfprintf+0x6e>
    9ca2:	93 fd       	sbrc	r25, 3
    9ca4:	85 91       	lpm	r24, Z+
    9ca6:	93 ff       	sbrs	r25, 3
    9ca8:	81 91       	ld	r24, Z+
    9caa:	7f 01       	movw	r14, r30
    9cac:	85 32       	cpi	r24, 0x25	; 37
    9cae:	21 f4       	brne	.+8      	; 0x9cb8 <vfprintf+0x76>
    9cb0:	b6 01       	movw	r22, r12
    9cb2:	90 e0       	ldi	r25, 0x00	; 0
    9cb4:	15 d3       	rcall	.+1578   	; 0xa2e0 <fputc>
    9cb6:	e8 cf       	rjmp	.-48     	; 0x9c88 <vfprintf+0x46>
    9cb8:	91 2c       	mov	r9, r1
    9cba:	21 2c       	mov	r2, r1
    9cbc:	31 2c       	mov	r3, r1
    9cbe:	ff e1       	ldi	r31, 0x1F	; 31
    9cc0:	f3 15       	cp	r31, r3
    9cc2:	d8 f0       	brcs	.+54     	; 0x9cfa <vfprintf+0xb8>
    9cc4:	8b 32       	cpi	r24, 0x2B	; 43
    9cc6:	79 f0       	breq	.+30     	; 0x9ce6 <vfprintf+0xa4>
    9cc8:	38 f4       	brcc	.+14     	; 0x9cd8 <vfprintf+0x96>
    9cca:	80 32       	cpi	r24, 0x20	; 32
    9ccc:	79 f0       	breq	.+30     	; 0x9cec <vfprintf+0xaa>
    9cce:	83 32       	cpi	r24, 0x23	; 35
    9cd0:	a1 f4       	brne	.+40     	; 0x9cfa <vfprintf+0xb8>
    9cd2:	23 2d       	mov	r18, r3
    9cd4:	20 61       	ori	r18, 0x10	; 16
    9cd6:	1d c0       	rjmp	.+58     	; 0x9d12 <vfprintf+0xd0>
    9cd8:	8d 32       	cpi	r24, 0x2D	; 45
    9cda:	61 f0       	breq	.+24     	; 0x9cf4 <vfprintf+0xb2>
    9cdc:	80 33       	cpi	r24, 0x30	; 48
    9cde:	69 f4       	brne	.+26     	; 0x9cfa <vfprintf+0xb8>
    9ce0:	23 2d       	mov	r18, r3
    9ce2:	21 60       	ori	r18, 0x01	; 1
    9ce4:	16 c0       	rjmp	.+44     	; 0x9d12 <vfprintf+0xd0>
    9ce6:	83 2d       	mov	r24, r3
    9ce8:	82 60       	ori	r24, 0x02	; 2
    9cea:	38 2e       	mov	r3, r24
    9cec:	e3 2d       	mov	r30, r3
    9cee:	e4 60       	ori	r30, 0x04	; 4
    9cf0:	3e 2e       	mov	r3, r30
    9cf2:	2a c0       	rjmp	.+84     	; 0x9d48 <vfprintf+0x106>
    9cf4:	f3 2d       	mov	r31, r3
    9cf6:	f8 60       	ori	r31, 0x08	; 8
    9cf8:	1d c0       	rjmp	.+58     	; 0x9d34 <vfprintf+0xf2>
    9cfa:	37 fc       	sbrc	r3, 7
    9cfc:	2d c0       	rjmp	.+90     	; 0x9d58 <vfprintf+0x116>
    9cfe:	20 ed       	ldi	r18, 0xD0	; 208
    9d00:	28 0f       	add	r18, r24
    9d02:	2a 30       	cpi	r18, 0x0A	; 10
    9d04:	40 f0       	brcs	.+16     	; 0x9d16 <vfprintf+0xd4>
    9d06:	8e 32       	cpi	r24, 0x2E	; 46
    9d08:	b9 f4       	brne	.+46     	; 0x9d38 <vfprintf+0xf6>
    9d0a:	36 fc       	sbrc	r3, 6
    9d0c:	75 c1       	rjmp	.+746    	; 0x9ff8 <vfprintf+0x3b6>
    9d0e:	23 2d       	mov	r18, r3
    9d10:	20 64       	ori	r18, 0x40	; 64
    9d12:	32 2e       	mov	r3, r18
    9d14:	19 c0       	rjmp	.+50     	; 0x9d48 <vfprintf+0x106>
    9d16:	36 fe       	sbrs	r3, 6
    9d18:	06 c0       	rjmp	.+12     	; 0x9d26 <vfprintf+0xe4>
    9d1a:	8a e0       	ldi	r24, 0x0A	; 10
    9d1c:	98 9e       	mul	r9, r24
    9d1e:	20 0d       	add	r18, r0
    9d20:	11 24       	eor	r1, r1
    9d22:	92 2e       	mov	r9, r18
    9d24:	11 c0       	rjmp	.+34     	; 0x9d48 <vfprintf+0x106>
    9d26:	ea e0       	ldi	r30, 0x0A	; 10
    9d28:	2e 9e       	mul	r2, r30
    9d2a:	20 0d       	add	r18, r0
    9d2c:	11 24       	eor	r1, r1
    9d2e:	22 2e       	mov	r2, r18
    9d30:	f3 2d       	mov	r31, r3
    9d32:	f0 62       	ori	r31, 0x20	; 32
    9d34:	3f 2e       	mov	r3, r31
    9d36:	08 c0       	rjmp	.+16     	; 0x9d48 <vfprintf+0x106>
    9d38:	8c 36       	cpi	r24, 0x6C	; 108
    9d3a:	21 f4       	brne	.+8      	; 0x9d44 <vfprintf+0x102>
    9d3c:	83 2d       	mov	r24, r3
    9d3e:	80 68       	ori	r24, 0x80	; 128
    9d40:	38 2e       	mov	r3, r24
    9d42:	02 c0       	rjmp	.+4      	; 0x9d48 <vfprintf+0x106>
    9d44:	88 36       	cpi	r24, 0x68	; 104
    9d46:	41 f4       	brne	.+16     	; 0x9d58 <vfprintf+0x116>
    9d48:	f7 01       	movw	r30, r14
    9d4a:	93 fd       	sbrc	r25, 3
    9d4c:	85 91       	lpm	r24, Z+
    9d4e:	93 ff       	sbrs	r25, 3
    9d50:	81 91       	ld	r24, Z+
    9d52:	7f 01       	movw	r14, r30
    9d54:	81 11       	cpse	r24, r1
    9d56:	b3 cf       	rjmp	.-154    	; 0x9cbe <vfprintf+0x7c>
    9d58:	98 2f       	mov	r25, r24
    9d5a:	9f 7d       	andi	r25, 0xDF	; 223
    9d5c:	95 54       	subi	r25, 0x45	; 69
    9d5e:	93 30       	cpi	r25, 0x03	; 3
    9d60:	28 f4       	brcc	.+10     	; 0x9d6c <vfprintf+0x12a>
    9d62:	0c 5f       	subi	r16, 0xFC	; 252
    9d64:	1f 4f       	sbci	r17, 0xFF	; 255
    9d66:	9f e3       	ldi	r25, 0x3F	; 63
    9d68:	99 83       	std	Y+1, r25	; 0x01
    9d6a:	0d c0       	rjmp	.+26     	; 0x9d86 <vfprintf+0x144>
    9d6c:	83 36       	cpi	r24, 0x63	; 99
    9d6e:	31 f0       	breq	.+12     	; 0x9d7c <vfprintf+0x13a>
    9d70:	83 37       	cpi	r24, 0x73	; 115
    9d72:	71 f0       	breq	.+28     	; 0x9d90 <vfprintf+0x14e>
    9d74:	83 35       	cpi	r24, 0x53	; 83
    9d76:	09 f0       	breq	.+2      	; 0x9d7a <vfprintf+0x138>
    9d78:	55 c0       	rjmp	.+170    	; 0x9e24 <vfprintf+0x1e2>
    9d7a:	20 c0       	rjmp	.+64     	; 0x9dbc <vfprintf+0x17a>
    9d7c:	f8 01       	movw	r30, r16
    9d7e:	80 81       	ld	r24, Z
    9d80:	89 83       	std	Y+1, r24	; 0x01
    9d82:	0e 5f       	subi	r16, 0xFE	; 254
    9d84:	1f 4f       	sbci	r17, 0xFF	; 255
    9d86:	88 24       	eor	r8, r8
    9d88:	83 94       	inc	r8
    9d8a:	91 2c       	mov	r9, r1
    9d8c:	53 01       	movw	r10, r6
    9d8e:	12 c0       	rjmp	.+36     	; 0x9db4 <vfprintf+0x172>
    9d90:	28 01       	movw	r4, r16
    9d92:	f2 e0       	ldi	r31, 0x02	; 2
    9d94:	4f 0e       	add	r4, r31
    9d96:	51 1c       	adc	r5, r1
    9d98:	f8 01       	movw	r30, r16
    9d9a:	a0 80       	ld	r10, Z
    9d9c:	b1 80       	ldd	r11, Z+1	; 0x01
    9d9e:	36 fe       	sbrs	r3, 6
    9da0:	03 c0       	rjmp	.+6      	; 0x9da8 <vfprintf+0x166>
    9da2:	69 2d       	mov	r22, r9
    9da4:	70 e0       	ldi	r23, 0x00	; 0
    9da6:	02 c0       	rjmp	.+4      	; 0x9dac <vfprintf+0x16a>
    9da8:	6f ef       	ldi	r22, 0xFF	; 255
    9daa:	7f ef       	ldi	r23, 0xFF	; 255
    9dac:	c5 01       	movw	r24, r10
    9dae:	8d d2       	rcall	.+1306   	; 0xa2ca <strnlen>
    9db0:	4c 01       	movw	r8, r24
    9db2:	82 01       	movw	r16, r4
    9db4:	f3 2d       	mov	r31, r3
    9db6:	ff 77       	andi	r31, 0x7F	; 127
    9db8:	3f 2e       	mov	r3, r31
    9dba:	15 c0       	rjmp	.+42     	; 0x9de6 <vfprintf+0x1a4>
    9dbc:	28 01       	movw	r4, r16
    9dbe:	22 e0       	ldi	r18, 0x02	; 2
    9dc0:	42 0e       	add	r4, r18
    9dc2:	51 1c       	adc	r5, r1
    9dc4:	f8 01       	movw	r30, r16
    9dc6:	a0 80       	ld	r10, Z
    9dc8:	b1 80       	ldd	r11, Z+1	; 0x01
    9dca:	36 fe       	sbrs	r3, 6
    9dcc:	03 c0       	rjmp	.+6      	; 0x9dd4 <vfprintf+0x192>
    9dce:	69 2d       	mov	r22, r9
    9dd0:	70 e0       	ldi	r23, 0x00	; 0
    9dd2:	02 c0       	rjmp	.+4      	; 0x9dd8 <vfprintf+0x196>
    9dd4:	6f ef       	ldi	r22, 0xFF	; 255
    9dd6:	7f ef       	ldi	r23, 0xFF	; 255
    9dd8:	c5 01       	movw	r24, r10
    9dda:	65 d2       	rcall	.+1226   	; 0xa2a6 <strnlen_P>
    9ddc:	4c 01       	movw	r8, r24
    9dde:	f3 2d       	mov	r31, r3
    9de0:	f0 68       	ori	r31, 0x80	; 128
    9de2:	3f 2e       	mov	r3, r31
    9de4:	82 01       	movw	r16, r4
    9de6:	33 fc       	sbrc	r3, 3
    9de8:	19 c0       	rjmp	.+50     	; 0x9e1c <vfprintf+0x1da>
    9dea:	82 2d       	mov	r24, r2
    9dec:	90 e0       	ldi	r25, 0x00	; 0
    9dee:	88 16       	cp	r8, r24
    9df0:	99 06       	cpc	r9, r25
    9df2:	a0 f4       	brcc	.+40     	; 0x9e1c <vfprintf+0x1da>
    9df4:	b6 01       	movw	r22, r12
    9df6:	80 e2       	ldi	r24, 0x20	; 32
    9df8:	90 e0       	ldi	r25, 0x00	; 0
    9dfa:	72 d2       	rcall	.+1252   	; 0xa2e0 <fputc>
    9dfc:	2a 94       	dec	r2
    9dfe:	f5 cf       	rjmp	.-22     	; 0x9dea <vfprintf+0x1a8>
    9e00:	f5 01       	movw	r30, r10
    9e02:	37 fc       	sbrc	r3, 7
    9e04:	85 91       	lpm	r24, Z+
    9e06:	37 fe       	sbrs	r3, 7
    9e08:	81 91       	ld	r24, Z+
    9e0a:	5f 01       	movw	r10, r30
    9e0c:	b6 01       	movw	r22, r12
    9e0e:	90 e0       	ldi	r25, 0x00	; 0
    9e10:	67 d2       	rcall	.+1230   	; 0xa2e0 <fputc>
    9e12:	21 10       	cpse	r2, r1
    9e14:	2a 94       	dec	r2
    9e16:	21 e0       	ldi	r18, 0x01	; 1
    9e18:	82 1a       	sub	r8, r18
    9e1a:	91 08       	sbc	r9, r1
    9e1c:	81 14       	cp	r8, r1
    9e1e:	91 04       	cpc	r9, r1
    9e20:	79 f7       	brne	.-34     	; 0x9e00 <vfprintf+0x1be>
    9e22:	e1 c0       	rjmp	.+450    	; 0x9fe6 <vfprintf+0x3a4>
    9e24:	84 36       	cpi	r24, 0x64	; 100
    9e26:	11 f0       	breq	.+4      	; 0x9e2c <vfprintf+0x1ea>
    9e28:	89 36       	cpi	r24, 0x69	; 105
    9e2a:	39 f5       	brne	.+78     	; 0x9e7a <vfprintf+0x238>
    9e2c:	f8 01       	movw	r30, r16
    9e2e:	37 fe       	sbrs	r3, 7
    9e30:	07 c0       	rjmp	.+14     	; 0x9e40 <vfprintf+0x1fe>
    9e32:	60 81       	ld	r22, Z
    9e34:	71 81       	ldd	r23, Z+1	; 0x01
    9e36:	82 81       	ldd	r24, Z+2	; 0x02
    9e38:	93 81       	ldd	r25, Z+3	; 0x03
    9e3a:	0c 5f       	subi	r16, 0xFC	; 252
    9e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    9e3e:	08 c0       	rjmp	.+16     	; 0x9e50 <vfprintf+0x20e>
    9e40:	60 81       	ld	r22, Z
    9e42:	71 81       	ldd	r23, Z+1	; 0x01
    9e44:	07 2e       	mov	r0, r23
    9e46:	00 0c       	add	r0, r0
    9e48:	88 0b       	sbc	r24, r24
    9e4a:	99 0b       	sbc	r25, r25
    9e4c:	0e 5f       	subi	r16, 0xFE	; 254
    9e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    9e50:	f3 2d       	mov	r31, r3
    9e52:	ff 76       	andi	r31, 0x6F	; 111
    9e54:	3f 2e       	mov	r3, r31
    9e56:	97 ff       	sbrs	r25, 7
    9e58:	09 c0       	rjmp	.+18     	; 0x9e6c <vfprintf+0x22a>
    9e5a:	90 95       	com	r25
    9e5c:	80 95       	com	r24
    9e5e:	70 95       	com	r23
    9e60:	61 95       	neg	r22
    9e62:	7f 4f       	sbci	r23, 0xFF	; 255
    9e64:	8f 4f       	sbci	r24, 0xFF	; 255
    9e66:	9f 4f       	sbci	r25, 0xFF	; 255
    9e68:	f0 68       	ori	r31, 0x80	; 128
    9e6a:	3f 2e       	mov	r3, r31
    9e6c:	2a e0       	ldi	r18, 0x0A	; 10
    9e6e:	30 e0       	ldi	r19, 0x00	; 0
    9e70:	a3 01       	movw	r20, r6
    9e72:	72 d2       	rcall	.+1252   	; 0xa358 <__ultoa_invert>
    9e74:	88 2e       	mov	r8, r24
    9e76:	86 18       	sub	r8, r6
    9e78:	44 c0       	rjmp	.+136    	; 0x9f02 <vfprintf+0x2c0>
    9e7a:	85 37       	cpi	r24, 0x75	; 117
    9e7c:	31 f4       	brne	.+12     	; 0x9e8a <vfprintf+0x248>
    9e7e:	23 2d       	mov	r18, r3
    9e80:	2f 7e       	andi	r18, 0xEF	; 239
    9e82:	b2 2e       	mov	r11, r18
    9e84:	2a e0       	ldi	r18, 0x0A	; 10
    9e86:	30 e0       	ldi	r19, 0x00	; 0
    9e88:	25 c0       	rjmp	.+74     	; 0x9ed4 <vfprintf+0x292>
    9e8a:	93 2d       	mov	r25, r3
    9e8c:	99 7f       	andi	r25, 0xF9	; 249
    9e8e:	b9 2e       	mov	r11, r25
    9e90:	8f 36       	cpi	r24, 0x6F	; 111
    9e92:	c1 f0       	breq	.+48     	; 0x9ec4 <vfprintf+0x282>
    9e94:	18 f4       	brcc	.+6      	; 0x9e9c <vfprintf+0x25a>
    9e96:	88 35       	cpi	r24, 0x58	; 88
    9e98:	79 f0       	breq	.+30     	; 0x9eb8 <vfprintf+0x276>
    9e9a:	ae c0       	rjmp	.+348    	; 0x9ff8 <vfprintf+0x3b6>
    9e9c:	80 37       	cpi	r24, 0x70	; 112
    9e9e:	19 f0       	breq	.+6      	; 0x9ea6 <vfprintf+0x264>
    9ea0:	88 37       	cpi	r24, 0x78	; 120
    9ea2:	21 f0       	breq	.+8      	; 0x9eac <vfprintf+0x26a>
    9ea4:	a9 c0       	rjmp	.+338    	; 0x9ff8 <vfprintf+0x3b6>
    9ea6:	e9 2f       	mov	r30, r25
    9ea8:	e0 61       	ori	r30, 0x10	; 16
    9eaa:	be 2e       	mov	r11, r30
    9eac:	b4 fe       	sbrs	r11, 4
    9eae:	0d c0       	rjmp	.+26     	; 0x9eca <vfprintf+0x288>
    9eb0:	fb 2d       	mov	r31, r11
    9eb2:	f4 60       	ori	r31, 0x04	; 4
    9eb4:	bf 2e       	mov	r11, r31
    9eb6:	09 c0       	rjmp	.+18     	; 0x9eca <vfprintf+0x288>
    9eb8:	34 fe       	sbrs	r3, 4
    9eba:	0a c0       	rjmp	.+20     	; 0x9ed0 <vfprintf+0x28e>
    9ebc:	29 2f       	mov	r18, r25
    9ebe:	26 60       	ori	r18, 0x06	; 6
    9ec0:	b2 2e       	mov	r11, r18
    9ec2:	06 c0       	rjmp	.+12     	; 0x9ed0 <vfprintf+0x28e>
    9ec4:	28 e0       	ldi	r18, 0x08	; 8
    9ec6:	30 e0       	ldi	r19, 0x00	; 0
    9ec8:	05 c0       	rjmp	.+10     	; 0x9ed4 <vfprintf+0x292>
    9eca:	20 e1       	ldi	r18, 0x10	; 16
    9ecc:	30 e0       	ldi	r19, 0x00	; 0
    9ece:	02 c0       	rjmp	.+4      	; 0x9ed4 <vfprintf+0x292>
    9ed0:	20 e1       	ldi	r18, 0x10	; 16
    9ed2:	32 e0       	ldi	r19, 0x02	; 2
    9ed4:	f8 01       	movw	r30, r16
    9ed6:	b7 fe       	sbrs	r11, 7
    9ed8:	07 c0       	rjmp	.+14     	; 0x9ee8 <vfprintf+0x2a6>
    9eda:	60 81       	ld	r22, Z
    9edc:	71 81       	ldd	r23, Z+1	; 0x01
    9ede:	82 81       	ldd	r24, Z+2	; 0x02
    9ee0:	93 81       	ldd	r25, Z+3	; 0x03
    9ee2:	0c 5f       	subi	r16, 0xFC	; 252
    9ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    9ee6:	06 c0       	rjmp	.+12     	; 0x9ef4 <vfprintf+0x2b2>
    9ee8:	60 81       	ld	r22, Z
    9eea:	71 81       	ldd	r23, Z+1	; 0x01
    9eec:	80 e0       	ldi	r24, 0x00	; 0
    9eee:	90 e0       	ldi	r25, 0x00	; 0
    9ef0:	0e 5f       	subi	r16, 0xFE	; 254
    9ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    9ef4:	a3 01       	movw	r20, r6
    9ef6:	30 d2       	rcall	.+1120   	; 0xa358 <__ultoa_invert>
    9ef8:	88 2e       	mov	r8, r24
    9efa:	86 18       	sub	r8, r6
    9efc:	fb 2d       	mov	r31, r11
    9efe:	ff 77       	andi	r31, 0x7F	; 127
    9f00:	3f 2e       	mov	r3, r31
    9f02:	36 fe       	sbrs	r3, 6
    9f04:	0d c0       	rjmp	.+26     	; 0x9f20 <vfprintf+0x2de>
    9f06:	23 2d       	mov	r18, r3
    9f08:	2e 7f       	andi	r18, 0xFE	; 254
    9f0a:	a2 2e       	mov	r10, r18
    9f0c:	89 14       	cp	r8, r9
    9f0e:	58 f4       	brcc	.+22     	; 0x9f26 <vfprintf+0x2e4>
    9f10:	34 fe       	sbrs	r3, 4
    9f12:	0b c0       	rjmp	.+22     	; 0x9f2a <vfprintf+0x2e8>
    9f14:	32 fc       	sbrc	r3, 2
    9f16:	09 c0       	rjmp	.+18     	; 0x9f2a <vfprintf+0x2e8>
    9f18:	83 2d       	mov	r24, r3
    9f1a:	8e 7e       	andi	r24, 0xEE	; 238
    9f1c:	a8 2e       	mov	r10, r24
    9f1e:	05 c0       	rjmp	.+10     	; 0x9f2a <vfprintf+0x2e8>
    9f20:	b8 2c       	mov	r11, r8
    9f22:	a3 2c       	mov	r10, r3
    9f24:	03 c0       	rjmp	.+6      	; 0x9f2c <vfprintf+0x2ea>
    9f26:	b8 2c       	mov	r11, r8
    9f28:	01 c0       	rjmp	.+2      	; 0x9f2c <vfprintf+0x2ea>
    9f2a:	b9 2c       	mov	r11, r9
    9f2c:	a4 fe       	sbrs	r10, 4
    9f2e:	0f c0       	rjmp	.+30     	; 0x9f4e <vfprintf+0x30c>
    9f30:	fe 01       	movw	r30, r28
    9f32:	e8 0d       	add	r30, r8
    9f34:	f1 1d       	adc	r31, r1
    9f36:	80 81       	ld	r24, Z
    9f38:	80 33       	cpi	r24, 0x30	; 48
    9f3a:	21 f4       	brne	.+8      	; 0x9f44 <vfprintf+0x302>
    9f3c:	9a 2d       	mov	r25, r10
    9f3e:	99 7e       	andi	r25, 0xE9	; 233
    9f40:	a9 2e       	mov	r10, r25
    9f42:	09 c0       	rjmp	.+18     	; 0x9f56 <vfprintf+0x314>
    9f44:	a2 fe       	sbrs	r10, 2
    9f46:	06 c0       	rjmp	.+12     	; 0x9f54 <vfprintf+0x312>
    9f48:	b3 94       	inc	r11
    9f4a:	b3 94       	inc	r11
    9f4c:	04 c0       	rjmp	.+8      	; 0x9f56 <vfprintf+0x314>
    9f4e:	8a 2d       	mov	r24, r10
    9f50:	86 78       	andi	r24, 0x86	; 134
    9f52:	09 f0       	breq	.+2      	; 0x9f56 <vfprintf+0x314>
    9f54:	b3 94       	inc	r11
    9f56:	a3 fc       	sbrc	r10, 3
    9f58:	10 c0       	rjmp	.+32     	; 0x9f7a <vfprintf+0x338>
    9f5a:	a0 fe       	sbrs	r10, 0
    9f5c:	06 c0       	rjmp	.+12     	; 0x9f6a <vfprintf+0x328>
    9f5e:	b2 14       	cp	r11, r2
    9f60:	80 f4       	brcc	.+32     	; 0x9f82 <vfprintf+0x340>
    9f62:	28 0c       	add	r2, r8
    9f64:	92 2c       	mov	r9, r2
    9f66:	9b 18       	sub	r9, r11
    9f68:	0d c0       	rjmp	.+26     	; 0x9f84 <vfprintf+0x342>
    9f6a:	b2 14       	cp	r11, r2
    9f6c:	58 f4       	brcc	.+22     	; 0x9f84 <vfprintf+0x342>
    9f6e:	b6 01       	movw	r22, r12
    9f70:	80 e2       	ldi	r24, 0x20	; 32
    9f72:	90 e0       	ldi	r25, 0x00	; 0
    9f74:	b5 d1       	rcall	.+874    	; 0xa2e0 <fputc>
    9f76:	b3 94       	inc	r11
    9f78:	f8 cf       	rjmp	.-16     	; 0x9f6a <vfprintf+0x328>
    9f7a:	b2 14       	cp	r11, r2
    9f7c:	18 f4       	brcc	.+6      	; 0x9f84 <vfprintf+0x342>
    9f7e:	2b 18       	sub	r2, r11
    9f80:	02 c0       	rjmp	.+4      	; 0x9f86 <vfprintf+0x344>
    9f82:	98 2c       	mov	r9, r8
    9f84:	21 2c       	mov	r2, r1
    9f86:	a4 fe       	sbrs	r10, 4
    9f88:	0f c0       	rjmp	.+30     	; 0x9fa8 <vfprintf+0x366>
    9f8a:	b6 01       	movw	r22, r12
    9f8c:	80 e3       	ldi	r24, 0x30	; 48
    9f8e:	90 e0       	ldi	r25, 0x00	; 0
    9f90:	a7 d1       	rcall	.+846    	; 0xa2e0 <fputc>
    9f92:	a2 fe       	sbrs	r10, 2
    9f94:	16 c0       	rjmp	.+44     	; 0x9fc2 <vfprintf+0x380>
    9f96:	a1 fc       	sbrc	r10, 1
    9f98:	03 c0       	rjmp	.+6      	; 0x9fa0 <vfprintf+0x35e>
    9f9a:	88 e7       	ldi	r24, 0x78	; 120
    9f9c:	90 e0       	ldi	r25, 0x00	; 0
    9f9e:	02 c0       	rjmp	.+4      	; 0x9fa4 <vfprintf+0x362>
    9fa0:	88 e5       	ldi	r24, 0x58	; 88
    9fa2:	90 e0       	ldi	r25, 0x00	; 0
    9fa4:	b6 01       	movw	r22, r12
    9fa6:	0c c0       	rjmp	.+24     	; 0x9fc0 <vfprintf+0x37e>
    9fa8:	8a 2d       	mov	r24, r10
    9faa:	86 78       	andi	r24, 0x86	; 134
    9fac:	51 f0       	breq	.+20     	; 0x9fc2 <vfprintf+0x380>
    9fae:	a1 fe       	sbrs	r10, 1
    9fb0:	02 c0       	rjmp	.+4      	; 0x9fb6 <vfprintf+0x374>
    9fb2:	8b e2       	ldi	r24, 0x2B	; 43
    9fb4:	01 c0       	rjmp	.+2      	; 0x9fb8 <vfprintf+0x376>
    9fb6:	80 e2       	ldi	r24, 0x20	; 32
    9fb8:	a7 fc       	sbrc	r10, 7
    9fba:	8d e2       	ldi	r24, 0x2D	; 45
    9fbc:	b6 01       	movw	r22, r12
    9fbe:	90 e0       	ldi	r25, 0x00	; 0
    9fc0:	8f d1       	rcall	.+798    	; 0xa2e0 <fputc>
    9fc2:	89 14       	cp	r8, r9
    9fc4:	30 f4       	brcc	.+12     	; 0x9fd2 <vfprintf+0x390>
    9fc6:	b6 01       	movw	r22, r12
    9fc8:	80 e3       	ldi	r24, 0x30	; 48
    9fca:	90 e0       	ldi	r25, 0x00	; 0
    9fcc:	89 d1       	rcall	.+786    	; 0xa2e0 <fputc>
    9fce:	9a 94       	dec	r9
    9fd0:	f8 cf       	rjmp	.-16     	; 0x9fc2 <vfprintf+0x380>
    9fd2:	8a 94       	dec	r8
    9fd4:	f3 01       	movw	r30, r6
    9fd6:	e8 0d       	add	r30, r8
    9fd8:	f1 1d       	adc	r31, r1
    9fda:	80 81       	ld	r24, Z
    9fdc:	b6 01       	movw	r22, r12
    9fde:	90 e0       	ldi	r25, 0x00	; 0
    9fe0:	7f d1       	rcall	.+766    	; 0xa2e0 <fputc>
    9fe2:	81 10       	cpse	r8, r1
    9fe4:	f6 cf       	rjmp	.-20     	; 0x9fd2 <vfprintf+0x390>
    9fe6:	22 20       	and	r2, r2
    9fe8:	09 f4       	brne	.+2      	; 0x9fec <vfprintf+0x3aa>
    9fea:	4e ce       	rjmp	.-868    	; 0x9c88 <vfprintf+0x46>
    9fec:	b6 01       	movw	r22, r12
    9fee:	80 e2       	ldi	r24, 0x20	; 32
    9ff0:	90 e0       	ldi	r25, 0x00	; 0
    9ff2:	76 d1       	rcall	.+748    	; 0xa2e0 <fputc>
    9ff4:	2a 94       	dec	r2
    9ff6:	f7 cf       	rjmp	.-18     	; 0x9fe6 <vfprintf+0x3a4>
    9ff8:	f6 01       	movw	r30, r12
    9ffa:	86 81       	ldd	r24, Z+6	; 0x06
    9ffc:	97 81       	ldd	r25, Z+7	; 0x07
    9ffe:	02 c0       	rjmp	.+4      	; 0xa004 <vfprintf+0x3c2>
    a000:	8f ef       	ldi	r24, 0xFF	; 255
    a002:	9f ef       	ldi	r25, 0xFF	; 255
    a004:	2b 96       	adiw	r28, 0x0b	; 11
    a006:	cd bf       	out	0x3d, r28	; 61
    a008:	de bf       	out	0x3e, r29	; 62
    a00a:	df 91       	pop	r29
    a00c:	cf 91       	pop	r28
    a00e:	1f 91       	pop	r17
    a010:	0f 91       	pop	r16
    a012:	ff 90       	pop	r15
    a014:	ef 90       	pop	r14
    a016:	df 90       	pop	r13
    a018:	cf 90       	pop	r12
    a01a:	bf 90       	pop	r11
    a01c:	af 90       	pop	r10
    a01e:	9f 90       	pop	r9
    a020:	8f 90       	pop	r8
    a022:	7f 90       	pop	r7
    a024:	6f 90       	pop	r6
    a026:	5f 90       	pop	r5
    a028:	4f 90       	pop	r4
    a02a:	3f 90       	pop	r3
    a02c:	2f 90       	pop	r2
    a02e:	08 95       	ret

0000a030 <calloc>:
    a030:	0f 93       	push	r16
    a032:	1f 93       	push	r17
    a034:	cf 93       	push	r28
    a036:	df 93       	push	r29
    a038:	86 9f       	mul	r24, r22
    a03a:	80 01       	movw	r16, r0
    a03c:	87 9f       	mul	r24, r23
    a03e:	10 0d       	add	r17, r0
    a040:	96 9f       	mul	r25, r22
    a042:	10 0d       	add	r17, r0
    a044:	11 24       	eor	r1, r1
    a046:	c8 01       	movw	r24, r16
    a048:	0d d0       	rcall	.+26     	; 0xa064 <malloc>
    a04a:	ec 01       	movw	r28, r24
    a04c:	00 97       	sbiw	r24, 0x00	; 0
    a04e:	21 f0       	breq	.+8      	; 0xa058 <calloc+0x28>
    a050:	a8 01       	movw	r20, r16
    a052:	60 e0       	ldi	r22, 0x00	; 0
    a054:	70 e0       	ldi	r23, 0x00	; 0
    a056:	32 d1       	rcall	.+612    	; 0xa2bc <memset>
    a058:	ce 01       	movw	r24, r28
    a05a:	df 91       	pop	r29
    a05c:	cf 91       	pop	r28
    a05e:	1f 91       	pop	r17
    a060:	0f 91       	pop	r16
    a062:	08 95       	ret

0000a064 <malloc>:
    a064:	0f 93       	push	r16
    a066:	1f 93       	push	r17
    a068:	cf 93       	push	r28
    a06a:	df 93       	push	r29
    a06c:	82 30       	cpi	r24, 0x02	; 2
    a06e:	91 05       	cpc	r25, r1
    a070:	10 f4       	brcc	.+4      	; 0xa076 <malloc+0x12>
    a072:	82 e0       	ldi	r24, 0x02	; 2
    a074:	90 e0       	ldi	r25, 0x00	; 0
    a076:	e0 91 b3 29 	lds	r30, 0x29B3	; 0x8029b3 <__flp>
    a07a:	f0 91 b4 29 	lds	r31, 0x29B4	; 0x8029b4 <__flp+0x1>
    a07e:	20 e0       	ldi	r18, 0x00	; 0
    a080:	30 e0       	ldi	r19, 0x00	; 0
    a082:	a0 e0       	ldi	r26, 0x00	; 0
    a084:	b0 e0       	ldi	r27, 0x00	; 0
    a086:	30 97       	sbiw	r30, 0x00	; 0
    a088:	19 f1       	breq	.+70     	; 0xa0d0 <malloc+0x6c>
    a08a:	40 81       	ld	r20, Z
    a08c:	51 81       	ldd	r21, Z+1	; 0x01
    a08e:	02 81       	ldd	r16, Z+2	; 0x02
    a090:	13 81       	ldd	r17, Z+3	; 0x03
    a092:	48 17       	cp	r20, r24
    a094:	59 07       	cpc	r21, r25
    a096:	c8 f0       	brcs	.+50     	; 0xa0ca <malloc+0x66>
    a098:	84 17       	cp	r24, r20
    a09a:	95 07       	cpc	r25, r21
    a09c:	69 f4       	brne	.+26     	; 0xa0b8 <malloc+0x54>
    a09e:	10 97       	sbiw	r26, 0x00	; 0
    a0a0:	31 f0       	breq	.+12     	; 0xa0ae <malloc+0x4a>
    a0a2:	12 96       	adiw	r26, 0x02	; 2
    a0a4:	0c 93       	st	X, r16
    a0a6:	12 97       	sbiw	r26, 0x02	; 2
    a0a8:	13 96       	adiw	r26, 0x03	; 3
    a0aa:	1c 93       	st	X, r17
    a0ac:	27 c0       	rjmp	.+78     	; 0xa0fc <malloc+0x98>
    a0ae:	00 93 b3 29 	sts	0x29B3, r16	; 0x8029b3 <__flp>
    a0b2:	10 93 b4 29 	sts	0x29B4, r17	; 0x8029b4 <__flp+0x1>
    a0b6:	22 c0       	rjmp	.+68     	; 0xa0fc <malloc+0x98>
    a0b8:	21 15       	cp	r18, r1
    a0ba:	31 05       	cpc	r19, r1
    a0bc:	19 f0       	breq	.+6      	; 0xa0c4 <malloc+0x60>
    a0be:	42 17       	cp	r20, r18
    a0c0:	53 07       	cpc	r21, r19
    a0c2:	18 f4       	brcc	.+6      	; 0xa0ca <malloc+0x66>
    a0c4:	9a 01       	movw	r18, r20
    a0c6:	bd 01       	movw	r22, r26
    a0c8:	ef 01       	movw	r28, r30
    a0ca:	df 01       	movw	r26, r30
    a0cc:	f8 01       	movw	r30, r16
    a0ce:	db cf       	rjmp	.-74     	; 0xa086 <malloc+0x22>
    a0d0:	21 15       	cp	r18, r1
    a0d2:	31 05       	cpc	r19, r1
    a0d4:	f9 f0       	breq	.+62     	; 0xa114 <malloc+0xb0>
    a0d6:	28 1b       	sub	r18, r24
    a0d8:	39 0b       	sbc	r19, r25
    a0da:	24 30       	cpi	r18, 0x04	; 4
    a0dc:	31 05       	cpc	r19, r1
    a0de:	80 f4       	brcc	.+32     	; 0xa100 <malloc+0x9c>
    a0e0:	8a 81       	ldd	r24, Y+2	; 0x02
    a0e2:	9b 81       	ldd	r25, Y+3	; 0x03
    a0e4:	61 15       	cp	r22, r1
    a0e6:	71 05       	cpc	r23, r1
    a0e8:	21 f0       	breq	.+8      	; 0xa0f2 <malloc+0x8e>
    a0ea:	fb 01       	movw	r30, r22
    a0ec:	82 83       	std	Z+2, r24	; 0x02
    a0ee:	93 83       	std	Z+3, r25	; 0x03
    a0f0:	04 c0       	rjmp	.+8      	; 0xa0fa <malloc+0x96>
    a0f2:	80 93 b3 29 	sts	0x29B3, r24	; 0x8029b3 <__flp>
    a0f6:	90 93 b4 29 	sts	0x29B4, r25	; 0x8029b4 <__flp+0x1>
    a0fa:	fe 01       	movw	r30, r28
    a0fc:	32 96       	adiw	r30, 0x02	; 2
    a0fe:	44 c0       	rjmp	.+136    	; 0xa188 <malloc+0x124>
    a100:	fe 01       	movw	r30, r28
    a102:	e2 0f       	add	r30, r18
    a104:	f3 1f       	adc	r31, r19
    a106:	81 93       	st	Z+, r24
    a108:	91 93       	st	Z+, r25
    a10a:	22 50       	subi	r18, 0x02	; 2
    a10c:	31 09       	sbc	r19, r1
    a10e:	28 83       	st	Y, r18
    a110:	39 83       	std	Y+1, r19	; 0x01
    a112:	3a c0       	rjmp	.+116    	; 0xa188 <malloc+0x124>
    a114:	20 91 b1 29 	lds	r18, 0x29B1	; 0x8029b1 <__brkval>
    a118:	30 91 b2 29 	lds	r19, 0x29B2	; 0x8029b2 <__brkval+0x1>
    a11c:	23 2b       	or	r18, r19
    a11e:	41 f4       	brne	.+16     	; 0xa130 <malloc+0xcc>
    a120:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    a124:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    a128:	20 93 b1 29 	sts	0x29B1, r18	; 0x8029b1 <__brkval>
    a12c:	30 93 b2 29 	sts	0x29B2, r19	; 0x8029b2 <__brkval+0x1>
    a130:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    a134:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    a138:	21 15       	cp	r18, r1
    a13a:	31 05       	cpc	r19, r1
    a13c:	41 f4       	brne	.+16     	; 0xa14e <malloc+0xea>
    a13e:	2d b7       	in	r18, 0x3d	; 61
    a140:	3e b7       	in	r19, 0x3e	; 62
    a142:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    a146:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    a14a:	24 1b       	sub	r18, r20
    a14c:	35 0b       	sbc	r19, r21
    a14e:	e0 91 b1 29 	lds	r30, 0x29B1	; 0x8029b1 <__brkval>
    a152:	f0 91 b2 29 	lds	r31, 0x29B2	; 0x8029b2 <__brkval+0x1>
    a156:	e2 17       	cp	r30, r18
    a158:	f3 07       	cpc	r31, r19
    a15a:	a0 f4       	brcc	.+40     	; 0xa184 <malloc+0x120>
    a15c:	2e 1b       	sub	r18, r30
    a15e:	3f 0b       	sbc	r19, r31
    a160:	28 17       	cp	r18, r24
    a162:	39 07       	cpc	r19, r25
    a164:	78 f0       	brcs	.+30     	; 0xa184 <malloc+0x120>
    a166:	ac 01       	movw	r20, r24
    a168:	4e 5f       	subi	r20, 0xFE	; 254
    a16a:	5f 4f       	sbci	r21, 0xFF	; 255
    a16c:	24 17       	cp	r18, r20
    a16e:	35 07       	cpc	r19, r21
    a170:	48 f0       	brcs	.+18     	; 0xa184 <malloc+0x120>
    a172:	4e 0f       	add	r20, r30
    a174:	5f 1f       	adc	r21, r31
    a176:	40 93 b1 29 	sts	0x29B1, r20	; 0x8029b1 <__brkval>
    a17a:	50 93 b2 29 	sts	0x29B2, r21	; 0x8029b2 <__brkval+0x1>
    a17e:	81 93       	st	Z+, r24
    a180:	91 93       	st	Z+, r25
    a182:	02 c0       	rjmp	.+4      	; 0xa188 <malloc+0x124>
    a184:	e0 e0       	ldi	r30, 0x00	; 0
    a186:	f0 e0       	ldi	r31, 0x00	; 0
    a188:	cf 01       	movw	r24, r30
    a18a:	df 91       	pop	r29
    a18c:	cf 91       	pop	r28
    a18e:	1f 91       	pop	r17
    a190:	0f 91       	pop	r16
    a192:	08 95       	ret

0000a194 <free>:
    a194:	cf 93       	push	r28
    a196:	df 93       	push	r29
    a198:	00 97       	sbiw	r24, 0x00	; 0
    a19a:	09 f4       	brne	.+2      	; 0xa19e <free+0xa>
    a19c:	81 c0       	rjmp	.+258    	; 0xa2a0 <free+0x10c>
    a19e:	fc 01       	movw	r30, r24
    a1a0:	32 97       	sbiw	r30, 0x02	; 2
    a1a2:	12 82       	std	Z+2, r1	; 0x02
    a1a4:	13 82       	std	Z+3, r1	; 0x03
    a1a6:	a0 91 b3 29 	lds	r26, 0x29B3	; 0x8029b3 <__flp>
    a1aa:	b0 91 b4 29 	lds	r27, 0x29B4	; 0x8029b4 <__flp+0x1>
    a1ae:	10 97       	sbiw	r26, 0x00	; 0
    a1b0:	81 f4       	brne	.+32     	; 0xa1d2 <free+0x3e>
    a1b2:	20 81       	ld	r18, Z
    a1b4:	31 81       	ldd	r19, Z+1	; 0x01
    a1b6:	82 0f       	add	r24, r18
    a1b8:	93 1f       	adc	r25, r19
    a1ba:	20 91 b1 29 	lds	r18, 0x29B1	; 0x8029b1 <__brkval>
    a1be:	30 91 b2 29 	lds	r19, 0x29B2	; 0x8029b2 <__brkval+0x1>
    a1c2:	28 17       	cp	r18, r24
    a1c4:	39 07       	cpc	r19, r25
    a1c6:	51 f5       	brne	.+84     	; 0xa21c <free+0x88>
    a1c8:	e0 93 b1 29 	sts	0x29B1, r30	; 0x8029b1 <__brkval>
    a1cc:	f0 93 b2 29 	sts	0x29B2, r31	; 0x8029b2 <__brkval+0x1>
    a1d0:	67 c0       	rjmp	.+206    	; 0xa2a0 <free+0x10c>
    a1d2:	ed 01       	movw	r28, r26
    a1d4:	20 e0       	ldi	r18, 0x00	; 0
    a1d6:	30 e0       	ldi	r19, 0x00	; 0
    a1d8:	ce 17       	cp	r28, r30
    a1da:	df 07       	cpc	r29, r31
    a1dc:	40 f4       	brcc	.+16     	; 0xa1ee <free+0x5a>
    a1de:	4a 81       	ldd	r20, Y+2	; 0x02
    a1e0:	5b 81       	ldd	r21, Y+3	; 0x03
    a1e2:	9e 01       	movw	r18, r28
    a1e4:	41 15       	cp	r20, r1
    a1e6:	51 05       	cpc	r21, r1
    a1e8:	f1 f0       	breq	.+60     	; 0xa226 <free+0x92>
    a1ea:	ea 01       	movw	r28, r20
    a1ec:	f5 cf       	rjmp	.-22     	; 0xa1d8 <free+0x44>
    a1ee:	c2 83       	std	Z+2, r28	; 0x02
    a1f0:	d3 83       	std	Z+3, r29	; 0x03
    a1f2:	40 81       	ld	r20, Z
    a1f4:	51 81       	ldd	r21, Z+1	; 0x01
    a1f6:	84 0f       	add	r24, r20
    a1f8:	95 1f       	adc	r25, r21
    a1fa:	c8 17       	cp	r28, r24
    a1fc:	d9 07       	cpc	r29, r25
    a1fe:	59 f4       	brne	.+22     	; 0xa216 <free+0x82>
    a200:	88 81       	ld	r24, Y
    a202:	99 81       	ldd	r25, Y+1	; 0x01
    a204:	84 0f       	add	r24, r20
    a206:	95 1f       	adc	r25, r21
    a208:	02 96       	adiw	r24, 0x02	; 2
    a20a:	80 83       	st	Z, r24
    a20c:	91 83       	std	Z+1, r25	; 0x01
    a20e:	8a 81       	ldd	r24, Y+2	; 0x02
    a210:	9b 81       	ldd	r25, Y+3	; 0x03
    a212:	82 83       	std	Z+2, r24	; 0x02
    a214:	93 83       	std	Z+3, r25	; 0x03
    a216:	21 15       	cp	r18, r1
    a218:	31 05       	cpc	r19, r1
    a21a:	29 f4       	brne	.+10     	; 0xa226 <free+0x92>
    a21c:	e0 93 b3 29 	sts	0x29B3, r30	; 0x8029b3 <__flp>
    a220:	f0 93 b4 29 	sts	0x29B4, r31	; 0x8029b4 <__flp+0x1>
    a224:	3d c0       	rjmp	.+122    	; 0xa2a0 <free+0x10c>
    a226:	e9 01       	movw	r28, r18
    a228:	ea 83       	std	Y+2, r30	; 0x02
    a22a:	fb 83       	std	Y+3, r31	; 0x03
    a22c:	49 91       	ld	r20, Y+
    a22e:	59 91       	ld	r21, Y+
    a230:	c4 0f       	add	r28, r20
    a232:	d5 1f       	adc	r29, r21
    a234:	ec 17       	cp	r30, r28
    a236:	fd 07       	cpc	r31, r29
    a238:	61 f4       	brne	.+24     	; 0xa252 <free+0xbe>
    a23a:	80 81       	ld	r24, Z
    a23c:	91 81       	ldd	r25, Z+1	; 0x01
    a23e:	84 0f       	add	r24, r20
    a240:	95 1f       	adc	r25, r21
    a242:	02 96       	adiw	r24, 0x02	; 2
    a244:	e9 01       	movw	r28, r18
    a246:	88 83       	st	Y, r24
    a248:	99 83       	std	Y+1, r25	; 0x01
    a24a:	82 81       	ldd	r24, Z+2	; 0x02
    a24c:	93 81       	ldd	r25, Z+3	; 0x03
    a24e:	8a 83       	std	Y+2, r24	; 0x02
    a250:	9b 83       	std	Y+3, r25	; 0x03
    a252:	e0 e0       	ldi	r30, 0x00	; 0
    a254:	f0 e0       	ldi	r31, 0x00	; 0
    a256:	12 96       	adiw	r26, 0x02	; 2
    a258:	8d 91       	ld	r24, X+
    a25a:	9c 91       	ld	r25, X
    a25c:	13 97       	sbiw	r26, 0x03	; 3
    a25e:	00 97       	sbiw	r24, 0x00	; 0
    a260:	19 f0       	breq	.+6      	; 0xa268 <free+0xd4>
    a262:	fd 01       	movw	r30, r26
    a264:	dc 01       	movw	r26, r24
    a266:	f7 cf       	rjmp	.-18     	; 0xa256 <free+0xc2>
    a268:	8d 91       	ld	r24, X+
    a26a:	9c 91       	ld	r25, X
    a26c:	11 97       	sbiw	r26, 0x01	; 1
    a26e:	9d 01       	movw	r18, r26
    a270:	2e 5f       	subi	r18, 0xFE	; 254
    a272:	3f 4f       	sbci	r19, 0xFF	; 255
    a274:	82 0f       	add	r24, r18
    a276:	93 1f       	adc	r25, r19
    a278:	20 91 b1 29 	lds	r18, 0x29B1	; 0x8029b1 <__brkval>
    a27c:	30 91 b2 29 	lds	r19, 0x29B2	; 0x8029b2 <__brkval+0x1>
    a280:	28 17       	cp	r18, r24
    a282:	39 07       	cpc	r19, r25
    a284:	69 f4       	brne	.+26     	; 0xa2a0 <free+0x10c>
    a286:	30 97       	sbiw	r30, 0x00	; 0
    a288:	29 f4       	brne	.+10     	; 0xa294 <free+0x100>
    a28a:	10 92 b3 29 	sts	0x29B3, r1	; 0x8029b3 <__flp>
    a28e:	10 92 b4 29 	sts	0x29B4, r1	; 0x8029b4 <__flp+0x1>
    a292:	02 c0       	rjmp	.+4      	; 0xa298 <free+0x104>
    a294:	12 82       	std	Z+2, r1	; 0x02
    a296:	13 82       	std	Z+3, r1	; 0x03
    a298:	a0 93 b1 29 	sts	0x29B1, r26	; 0x8029b1 <__brkval>
    a29c:	b0 93 b2 29 	sts	0x29B2, r27	; 0x8029b2 <__brkval+0x1>
    a2a0:	df 91       	pop	r29
    a2a2:	cf 91       	pop	r28
    a2a4:	08 95       	ret

0000a2a6 <strnlen_P>:
    a2a6:	fc 01       	movw	r30, r24
    a2a8:	05 90       	lpm	r0, Z+
    a2aa:	61 50       	subi	r22, 0x01	; 1
    a2ac:	70 40       	sbci	r23, 0x00	; 0
    a2ae:	01 10       	cpse	r0, r1
    a2b0:	d8 f7       	brcc	.-10     	; 0xa2a8 <strnlen_P+0x2>
    a2b2:	80 95       	com	r24
    a2b4:	90 95       	com	r25
    a2b6:	8e 0f       	add	r24, r30
    a2b8:	9f 1f       	adc	r25, r31
    a2ba:	08 95       	ret

0000a2bc <memset>:
    a2bc:	dc 01       	movw	r26, r24
    a2be:	01 c0       	rjmp	.+2      	; 0xa2c2 <memset+0x6>
    a2c0:	6d 93       	st	X+, r22
    a2c2:	41 50       	subi	r20, 0x01	; 1
    a2c4:	50 40       	sbci	r21, 0x00	; 0
    a2c6:	e0 f7       	brcc	.-8      	; 0xa2c0 <memset+0x4>
    a2c8:	08 95       	ret

0000a2ca <strnlen>:
    a2ca:	fc 01       	movw	r30, r24
    a2cc:	61 50       	subi	r22, 0x01	; 1
    a2ce:	70 40       	sbci	r23, 0x00	; 0
    a2d0:	01 90       	ld	r0, Z+
    a2d2:	01 10       	cpse	r0, r1
    a2d4:	d8 f7       	brcc	.-10     	; 0xa2cc <strnlen+0x2>
    a2d6:	80 95       	com	r24
    a2d8:	90 95       	com	r25
    a2da:	8e 0f       	add	r24, r30
    a2dc:	9f 1f       	adc	r25, r31
    a2de:	08 95       	ret

0000a2e0 <fputc>:
    a2e0:	0f 93       	push	r16
    a2e2:	1f 93       	push	r17
    a2e4:	cf 93       	push	r28
    a2e6:	df 93       	push	r29
    a2e8:	fb 01       	movw	r30, r22
    a2ea:	23 81       	ldd	r18, Z+3	; 0x03
    a2ec:	21 fd       	sbrc	r18, 1
    a2ee:	03 c0       	rjmp	.+6      	; 0xa2f6 <fputc+0x16>
    a2f0:	8f ef       	ldi	r24, 0xFF	; 255
    a2f2:	9f ef       	ldi	r25, 0xFF	; 255
    a2f4:	2c c0       	rjmp	.+88     	; 0xa34e <fputc+0x6e>
    a2f6:	22 ff       	sbrs	r18, 2
    a2f8:	16 c0       	rjmp	.+44     	; 0xa326 <fputc+0x46>
    a2fa:	46 81       	ldd	r20, Z+6	; 0x06
    a2fc:	57 81       	ldd	r21, Z+7	; 0x07
    a2fe:	24 81       	ldd	r18, Z+4	; 0x04
    a300:	35 81       	ldd	r19, Z+5	; 0x05
    a302:	42 17       	cp	r20, r18
    a304:	53 07       	cpc	r21, r19
    a306:	44 f4       	brge	.+16     	; 0xa318 <fputc+0x38>
    a308:	a0 81       	ld	r26, Z
    a30a:	b1 81       	ldd	r27, Z+1	; 0x01
    a30c:	9d 01       	movw	r18, r26
    a30e:	2f 5f       	subi	r18, 0xFF	; 255
    a310:	3f 4f       	sbci	r19, 0xFF	; 255
    a312:	20 83       	st	Z, r18
    a314:	31 83       	std	Z+1, r19	; 0x01
    a316:	8c 93       	st	X, r24
    a318:	26 81       	ldd	r18, Z+6	; 0x06
    a31a:	37 81       	ldd	r19, Z+7	; 0x07
    a31c:	2f 5f       	subi	r18, 0xFF	; 255
    a31e:	3f 4f       	sbci	r19, 0xFF	; 255
    a320:	26 83       	std	Z+6, r18	; 0x06
    a322:	37 83       	std	Z+7, r19	; 0x07
    a324:	14 c0       	rjmp	.+40     	; 0xa34e <fputc+0x6e>
    a326:	8b 01       	movw	r16, r22
    a328:	ec 01       	movw	r28, r24
    a32a:	fb 01       	movw	r30, r22
    a32c:	00 84       	ldd	r0, Z+8	; 0x08
    a32e:	f1 85       	ldd	r31, Z+9	; 0x09
    a330:	e0 2d       	mov	r30, r0
    a332:	19 95       	eicall
    a334:	89 2b       	or	r24, r25
    a336:	e1 f6       	brne	.-72     	; 0xa2f0 <fputc+0x10>
    a338:	d8 01       	movw	r26, r16
    a33a:	16 96       	adiw	r26, 0x06	; 6
    a33c:	8d 91       	ld	r24, X+
    a33e:	9c 91       	ld	r25, X
    a340:	17 97       	sbiw	r26, 0x07	; 7
    a342:	01 96       	adiw	r24, 0x01	; 1
    a344:	16 96       	adiw	r26, 0x06	; 6
    a346:	8d 93       	st	X+, r24
    a348:	9c 93       	st	X, r25
    a34a:	17 97       	sbiw	r26, 0x07	; 7
    a34c:	ce 01       	movw	r24, r28
    a34e:	df 91       	pop	r29
    a350:	cf 91       	pop	r28
    a352:	1f 91       	pop	r17
    a354:	0f 91       	pop	r16
    a356:	08 95       	ret

0000a358 <__ultoa_invert>:
    a358:	fa 01       	movw	r30, r20
    a35a:	aa 27       	eor	r26, r26
    a35c:	28 30       	cpi	r18, 0x08	; 8
    a35e:	51 f1       	breq	.+84     	; 0xa3b4 <__ultoa_invert+0x5c>
    a360:	20 31       	cpi	r18, 0x10	; 16
    a362:	81 f1       	breq	.+96     	; 0xa3c4 <__ultoa_invert+0x6c>
    a364:	e8 94       	clt
    a366:	6f 93       	push	r22
    a368:	6e 7f       	andi	r22, 0xFE	; 254
    a36a:	6e 5f       	subi	r22, 0xFE	; 254
    a36c:	7f 4f       	sbci	r23, 0xFF	; 255
    a36e:	8f 4f       	sbci	r24, 0xFF	; 255
    a370:	9f 4f       	sbci	r25, 0xFF	; 255
    a372:	af 4f       	sbci	r26, 0xFF	; 255
    a374:	b1 e0       	ldi	r27, 0x01	; 1
    a376:	3e d0       	rcall	.+124    	; 0xa3f4 <__ultoa_invert+0x9c>
    a378:	b4 e0       	ldi	r27, 0x04	; 4
    a37a:	3c d0       	rcall	.+120    	; 0xa3f4 <__ultoa_invert+0x9c>
    a37c:	67 0f       	add	r22, r23
    a37e:	78 1f       	adc	r23, r24
    a380:	89 1f       	adc	r24, r25
    a382:	9a 1f       	adc	r25, r26
    a384:	a1 1d       	adc	r26, r1
    a386:	68 0f       	add	r22, r24
    a388:	79 1f       	adc	r23, r25
    a38a:	8a 1f       	adc	r24, r26
    a38c:	91 1d       	adc	r25, r1
    a38e:	a1 1d       	adc	r26, r1
    a390:	6a 0f       	add	r22, r26
    a392:	71 1d       	adc	r23, r1
    a394:	81 1d       	adc	r24, r1
    a396:	91 1d       	adc	r25, r1
    a398:	a1 1d       	adc	r26, r1
    a39a:	20 d0       	rcall	.+64     	; 0xa3dc <__ultoa_invert+0x84>
    a39c:	09 f4       	brne	.+2      	; 0xa3a0 <__ultoa_invert+0x48>
    a39e:	68 94       	set
    a3a0:	3f 91       	pop	r19
    a3a2:	2a e0       	ldi	r18, 0x0A	; 10
    a3a4:	26 9f       	mul	r18, r22
    a3a6:	11 24       	eor	r1, r1
    a3a8:	30 19       	sub	r19, r0
    a3aa:	30 5d       	subi	r19, 0xD0	; 208
    a3ac:	31 93       	st	Z+, r19
    a3ae:	de f6       	brtc	.-74     	; 0xa366 <__ultoa_invert+0xe>
    a3b0:	cf 01       	movw	r24, r30
    a3b2:	08 95       	ret
    a3b4:	46 2f       	mov	r20, r22
    a3b6:	47 70       	andi	r20, 0x07	; 7
    a3b8:	40 5d       	subi	r20, 0xD0	; 208
    a3ba:	41 93       	st	Z+, r20
    a3bc:	b3 e0       	ldi	r27, 0x03	; 3
    a3be:	0f d0       	rcall	.+30     	; 0xa3de <__ultoa_invert+0x86>
    a3c0:	c9 f7       	brne	.-14     	; 0xa3b4 <__ultoa_invert+0x5c>
    a3c2:	f6 cf       	rjmp	.-20     	; 0xa3b0 <__ultoa_invert+0x58>
    a3c4:	46 2f       	mov	r20, r22
    a3c6:	4f 70       	andi	r20, 0x0F	; 15
    a3c8:	40 5d       	subi	r20, 0xD0	; 208
    a3ca:	4a 33       	cpi	r20, 0x3A	; 58
    a3cc:	18 f0       	brcs	.+6      	; 0xa3d4 <__ultoa_invert+0x7c>
    a3ce:	49 5d       	subi	r20, 0xD9	; 217
    a3d0:	31 fd       	sbrc	r19, 1
    a3d2:	40 52       	subi	r20, 0x20	; 32
    a3d4:	41 93       	st	Z+, r20
    a3d6:	02 d0       	rcall	.+4      	; 0xa3dc <__ultoa_invert+0x84>
    a3d8:	a9 f7       	brne	.-22     	; 0xa3c4 <__ultoa_invert+0x6c>
    a3da:	ea cf       	rjmp	.-44     	; 0xa3b0 <__ultoa_invert+0x58>
    a3dc:	b4 e0       	ldi	r27, 0x04	; 4
    a3de:	a6 95       	lsr	r26
    a3e0:	97 95       	ror	r25
    a3e2:	87 95       	ror	r24
    a3e4:	77 95       	ror	r23
    a3e6:	67 95       	ror	r22
    a3e8:	ba 95       	dec	r27
    a3ea:	c9 f7       	brne	.-14     	; 0xa3de <__ultoa_invert+0x86>
    a3ec:	00 97       	sbiw	r24, 0x00	; 0
    a3ee:	61 05       	cpc	r22, r1
    a3f0:	71 05       	cpc	r23, r1
    a3f2:	08 95       	ret
    a3f4:	9b 01       	movw	r18, r22
    a3f6:	ac 01       	movw	r20, r24
    a3f8:	0a 2e       	mov	r0, r26
    a3fa:	06 94       	lsr	r0
    a3fc:	57 95       	ror	r21
    a3fe:	47 95       	ror	r20
    a400:	37 95       	ror	r19
    a402:	27 95       	ror	r18
    a404:	ba 95       	dec	r27
    a406:	c9 f7       	brne	.-14     	; 0xa3fa <__ultoa_invert+0xa2>
    a408:	62 0f       	add	r22, r18
    a40a:	73 1f       	adc	r23, r19
    a40c:	84 1f       	adc	r24, r20
    a40e:	95 1f       	adc	r25, r21
    a410:	a0 1d       	adc	r26, r0
    a412:	08 95       	ret

0000a414 <_exit>:
    a414:	f8 94       	cli

0000a416 <__stop_program>:
    a416:	ff cf       	rjmp	.-2      	; 0xa416 <__stop_program>
