
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000992e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000006ec  00802000  0000992e  000099c2  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005f9  008026ec  008026ec  0000a0b0  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000a0ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000a10c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a00  00000000  00000000  0000a150  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001b913  00000000  00000000  0000ab50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006a00  00000000  00000000  00026463  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ef3b  00000000  00000000  0002ce63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002ab0  00000000  00000000  0003bda0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003f780  00000000  00000000  0003e850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b39f  00000000  00000000  0007dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009b0  00000000  00000000  00089370  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000e494  00000000  00000000  00089d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__ctors_end>
       4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
       8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
       c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      10:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      14:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      18:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_6>
      1c:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__vector_7>
      20:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__vector_8>
      24:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__vector_9>
      28:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      2c:	0c 94 06 13 	jmp	0x260c	; 0x260c <__vector_11>
      30:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      34:	0c 94 7a 29 	jmp	0x52f4	; 0x52f4 <__vector_13>
      38:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__vector_14>
      3c:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <__vector_15>
      40:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <__vector_16>
      44:	0c 94 59 22 	jmp	0x44b2	; 0x44b2 <__vector_17>
      48:	0c 94 86 22 	jmp	0x450c	; 0x450c <__vector_18>
      4c:	0c 94 b3 22 	jmp	0x4566	; 0x4566 <__vector_19>
      50:	0c 94 e0 22 	jmp	0x45c0	; 0x45c0 <__vector_20>
      54:	0c 94 0d 23 	jmp	0x461a	; 0x461a <__vector_21>
      58:	0c 94 3a 23 	jmp	0x4674	; 0x4674 <__vector_22>
      5c:	0c 94 67 23 	jmp	0x46ce	; 0x46ce <__vector_23>
      60:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      64:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      68:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      6c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      70:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      74:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      78:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      7c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      80:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      84:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      88:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      8c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      90:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      94:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      98:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      9c:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__vector_39>
      a0:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__vector_40>
      a4:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__vector_41>
      a8:	0c 94 91 1f 	jmp	0x3f22	; 0x3f22 <__vector_42>
      ac:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b8:	0c 94 a1 29 	jmp	0x5342	; 0x5342 <__vector_46>
      bc:	0c 94 56 25 	jmp	0x4aac	; 0x4aac <__vector_47>
      c0:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__vector_48>
      c4:	0c 94 b0 25 	jmp	0x4b60	; 0x4b60 <__vector_49>
      c8:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <__vector_50>
      cc:	0c 94 0a 26 	jmp	0x4c14	; 0x4c14 <__vector_51>
      d0:	0c 94 37 26 	jmp	0x4c6e	; 0x4c6e <__vector_52>
      d4:	0c 94 64 26 	jmp	0x4cc8	; 0x4cc8 <__vector_53>
      d8:	0c 94 91 26 	jmp	0x4d22	; 0x4d22 <__vector_54>
      dc:	0c 94 be 26 	jmp	0x4d7c	; 0x4d7c <__vector_55>
      e0:	0c 94 eb 26 	jmp	0x4dd6	; 0x4dd6 <__vector_56>
      e4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      e8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      ec:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      fc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     100:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     104:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     108:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     10c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     110:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     114:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     118:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     11c:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__vector_71>
     120:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__vector_72>
     124:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <__vector_73>
     128:	0c 94 c9 1e 	jmp	0x3d92	; 0x3d92 <__vector_74>
     12c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     130:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     134:	0c 94 94 23 	jmp	0x4728	; 0x4728 <__vector_77>
     138:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <__vector_78>
     13c:	0c 94 ee 23 	jmp	0x47dc	; 0x47dc <__vector_79>
     140:	0c 94 1b 24 	jmp	0x4836	; 0x4836 <__vector_80>
     144:	0c 94 48 24 	jmp	0x4890	; 0x4890 <__vector_81>
     148:	0c 94 75 24 	jmp	0x48ea	; 0x48ea <__vector_82>
     14c:	0c 94 a2 24 	jmp	0x4944	; 0x4944 <__vector_83>
     150:	0c 94 cf 24 	jmp	0x499e	; 0x499e <__vector_84>
     154:	0c 94 fc 24 	jmp	0x49f8	; 0x49f8 <__vector_85>
     158:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__vector_86>
     15c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     160:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     164:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     168:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     16c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     170:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     174:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     178:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     17c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     180:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     184:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     188:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     18c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     190:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     194:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     198:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     19c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1ac:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1b0:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__vector_108>
     1b4:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__vector_109>
     1b8:	0c 94 72 27 	jmp	0x4ee4	; 0x4ee4 <__vector_110>
     1bc:	0c 94 9f 27 	jmp	0x4f3e	; 0x4f3e <__vector_111>
     1c0:	0c 94 cc 27 	jmp	0x4f98	; 0x4f98 <__vector_112>
     1c4:	0c 94 f9 27 	jmp	0x4ff2	; 0x4ff2 <__vector_113>
     1c8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1cc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1dc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1ec:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1f0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1f4:	0c 94 5e 30 	jmp	0x60bc	; 0x60bc <__vector_125>
     1f8:	0c 94 18 31 	jmp	0x6230	; 0x6230 <__vector_126>
     1fc:	3f 2b       	or	r19, r31
     1fe:	42 2b       	or	r20, r18
     200:	45 2b       	or	r20, r21
     202:	48 2b       	or	r20, r24
     204:	4b 2b       	or	r20, r27
     206:	4e 2b       	or	r20, r30
     208:	51 2b       	or	r21, r17
     20a:	90 32       	cpi	r25, 0x20	; 32
     20c:	a3 32       	cpi	r26, 0x23	; 35
     20e:	b6 32       	cpi	r27, 0x26	; 38
     210:	c9 32       	cpi	r28, 0x29	; 41
     212:	dc 32       	cpi	r29, 0x2C	; 44
     214:	ef 32       	cpi	r30, 0x2F	; 47
     216:	02 33       	cpi	r16, 0x32	; 50

00000218 <PM_SINE>:
     218:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     228:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     238:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     248:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     258:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     268:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     278:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     288:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     298:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     2a8:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     2b8:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     2c8:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     2d8:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     2e8:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     2f8:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     308:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     318:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     328:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     338:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     348:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     358:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     368:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     378:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     388:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     398:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     3a8:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     3b8:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     3c8:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     3d8:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     3e8:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     3f8:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     408:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     418:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     428:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     438:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     448:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     458:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
     468:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
     478:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
     488:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
     498:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
     4a8:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
     4b8:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
     4c8:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
     4d8:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
     4e8:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
     4f8:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
     508:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
     518:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
     528:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
     538:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
     548:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
     558:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
     568:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
     578:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
     588:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
     598:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
     5a8:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
     5b8:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
     5c8:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
     5d8:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
     5e8:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
     5f8:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
     608:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
     618:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
     628:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
     638:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
     648:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
     658:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
     668:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
     678:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
     688:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
     698:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
     6a8:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
     6b8:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
     6c8:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
     6d8:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
     6e8:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
     6f8:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
     708:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
     718:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
     728:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
     738:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
     748:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
     758:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
     768:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
     778:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
     788:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
     798:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
     7a8:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
     7b8:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
     7c8:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
     7d8:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
     7e8:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
     7f8:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
     808:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
     818:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
     828:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
     838:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
     848:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
     858:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
     868:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
     878:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
     888:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
     898:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
     8a8:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
     8b8:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
     8c8:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
     8d8:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
     8e8:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
     8f8:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
     908:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
     918:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
     928:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
     938:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
     948:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
     958:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
     968:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
     978:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
     988:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
     998:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
     9a8:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
     9b8:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
     9c8:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
     9d8:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
     9e8:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
     9f8:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
     a08:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
     a18:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
     a28:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
     a38:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
     a48:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
     a58:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
     a68:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
     a78:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
     a88:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
     a98:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
     aa8:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
     ab8:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
     ac8:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
     ad8:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
     ae8:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
     af8:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
     b08:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
     b18:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
     b28:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
     b38:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
     b48:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
     b58:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
     b68:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
     b78:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
     b88:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
     b98:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
     ba8:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
     bb8:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
     bc8:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
     bd8:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
     be8:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
     bf8:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
     c08:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
     c18:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
     c28:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
     c38:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
     c48:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
     c58:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
     c68:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
     c78:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
     c88:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
     c98:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
     ca8:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
     cb8:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
     cc8:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
     cd8:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
     ce8:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
     cf8:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
     d08:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
     d18:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
     d28:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
     d38:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
     d48:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
     d58:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
     d68:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
     d78:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
     d88:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
     d98:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
     da8:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
     db8:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
     dc8:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
     dd8:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
     de8:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
     df8:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
     e08:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
     e18:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
     e28:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
     e38:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
     e48:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
     e58:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
     e68:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
     e78:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
     e88:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
     e98:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
     ea8:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
     eb8:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
     ec8:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
     ed8:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
     ee8:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
     ef8:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
     f08:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
     f18:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
     f28:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
     f38:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
     f48:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
     f58:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
     f68:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
     f78:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
     f88:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
     f98:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
     fa8:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
     fb8:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
     fc8:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
     fd8:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
     fe8:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
     ff8:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1008:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1018:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    1028:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    1038:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    1048:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    1058:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    1068:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    1078:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1088:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1098:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    10a8:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    10b8:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    10c8:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    10d8:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    10e8:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    10f8:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1108:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1118:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    1128:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    1138:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    1148:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    1158:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    1168:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    1178:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1188:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1198:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    11a8:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    11b8:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    11c8:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    11d8:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    11e8:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    11f8:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1208:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1218:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    1228:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    1238:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    1248:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    1258:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    1268:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    1278:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1288:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1298:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    12a8:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    12b8:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    12c8:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    12d8:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    12e8:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    12f8:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1308:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1318:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    1328:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    1338:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    1348:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    1358:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    1368:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    1378:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1388:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1398:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    13a8:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    13b8:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    13c8:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    13d8:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    13e8:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    13f8:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1408:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1418:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1428:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1438:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1448:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1458:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    1468:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    1478:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    1488:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    1498:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    14a8:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    14b8:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    14c8:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    14d8:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    14e8:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    14f8:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    1508:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    1518:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    1528:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    1538:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    1548:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    1558:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    1568:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    1578:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    1588:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    1598:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    15a8:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    15b8:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    15c8:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    15d8:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    15e8:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    15f8:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    1608:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    1618:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    1628:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    1638:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    1648:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    1658:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    1668:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    1678:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    1688:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    1698:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    16a8:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    16b8:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    16c8:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    16d8:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    16e8:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    16f8:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    1708:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    1718:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    1728:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    1738:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    1748:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    1758:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    1768:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    1778:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    1788:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    1798:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    17a8:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    17b8:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    17c8:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    17d8:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    17e8:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    17f8:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    1808:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    1818:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    1828:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    1838:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    1848:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    1858:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    1868:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    1878:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    1888:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    1898:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    18a8:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    18b8:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    18c8:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    18d8:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    18e8:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    18f8:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    1908:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    1918:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    1928:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    1938:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    1948:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    1958:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    1968:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    1978:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    1988:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    1998:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    19a8:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    19b8:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    19c8:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    19d8:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    19e8:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    19f8:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    1a08:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    1a18:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    1a28:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    1a38:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    1a48:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    1a58:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    1a68:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    1a78:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    1a88:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    1a98:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    1aa8:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    1ab8:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    1ac8:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    1ad8:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    1ae8:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    1af8:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    1b08:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    1b18:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    1b28:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    1b38:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    1b48:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    1b58:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    1b68:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    1b78:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    1b88:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    1b98:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    1ba8:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    1bb8:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    1bc8:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    1bd8:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    1be8:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    1bf8:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    1c08:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    1c18:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    1c28:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    1c38:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    1c48:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    1c58:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    1c68:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    1c78:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    1c88:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    1c98:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    1ca8:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    1cb8:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    1cc8:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    1cd8:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    1ce8:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    1cf8:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    1d08:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    1d18:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    1d28:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    1d38:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    1d48:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    1d58:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    1d68:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    1d78:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    1d88:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    1d98:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    1da8:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    1db8:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    1dc8:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    1dd8:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    1de8:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    1df8:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    1e08:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    1e18:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    1e28:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    1e38:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    1e48:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    1e58:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    1e68:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    1e78:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    1e88:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    1e98:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    1ea8:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    1eb8:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    1ec8:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    1ed8:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    1ee8:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    1ef8:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    1f08:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    1f18:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    1f28:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    1f38:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    1f48:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    1f58:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    1f68:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    1f78:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    1f88:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    1f98:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    1fa8:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    1fb8:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    1fc8:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    1fd8:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    1fe8:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    1ff8:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2008:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2018:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    2028:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    2038:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    2048:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    2058:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    2068:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    2078:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2088:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2098:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    20a8:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    20b8:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    20c8:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    20d8:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    20e8:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    20f8:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2108:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2118:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    2128:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    2138:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    2148:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    2158:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    2168:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    2178:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2188:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2198:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    21a8:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    21b8:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    21c8:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    21d8:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    21e8:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    21f8:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2208:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002218 <__ctors_end>:
    2218:	11 24       	eor	r1, r1
    221a:	1f be       	out	0x3f, r1	; 63
    221c:	cf ef       	ldi	r28, 0xFF	; 255
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	df e5       	ldi	r29, 0x5F	; 95
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	0c bf       	out	0x3c, r16	; 60

00002228 <__do_copy_data>:
    2228:	16 e2       	ldi	r17, 0x26	; 38
    222a:	a0 e0       	ldi	r26, 0x00	; 0
    222c:	b0 e2       	ldi	r27, 0x20	; 32
    222e:	ee e2       	ldi	r30, 0x2E	; 46
    2230:	f9 e9       	ldi	r31, 0x99	; 153
    2232:	00 e0       	ldi	r16, 0x00	; 0
    2234:	0b bf       	out	0x3b, r16	; 59
    2236:	02 c0       	rjmp	.+4      	; 0x223c <__do_copy_data+0x14>
    2238:	07 90       	elpm	r0, Z+
    223a:	0d 92       	st	X+, r0
    223c:	ac 3e       	cpi	r26, 0xEC	; 236
    223e:	b1 07       	cpc	r27, r17
    2240:	d9 f7       	brne	.-10     	; 0x2238 <__do_copy_data+0x10>

00002242 <__do_clear_bss>:
    2242:	2c e2       	ldi	r18, 0x2C	; 44
    2244:	ac ee       	ldi	r26, 0xEC	; 236
    2246:	b6 e2       	ldi	r27, 0x26	; 38
    2248:	01 c0       	rjmp	.+2      	; 0x224c <.do_clear_bss_start>

0000224a <.do_clear_bss_loop>:
    224a:	1d 92       	st	X+, r1

0000224c <.do_clear_bss_start>:
    224c:	a5 3e       	cpi	r26, 0xE5	; 229
    224e:	b2 07       	cpc	r27, r18
    2250:	e1 f7       	brne	.-8      	; 0x224a <.do_clear_bss_loop>
    2252:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <main>
    2256:	0c 94 95 4c 	jmp	0x992a	; 0x992a <_exit>

0000225a <__bad_interrupt>:
    225a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000225e <nvm_init>:
#include "conf_nvm.h"
#include "nvm.h"

status_code_t nvm_init(mem_type_t mem)
{
	switch (mem) {
    225e:	83 30       	cpi	r24, 0x03	; 3
    2260:	10 f4       	brcc	.+4      	; 0x2266 <nvm_init+0x8>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	08 95       	ret
		}
		break;
#endif

	default:
		return ERR_INVALID_ARG;
    2266:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    2268:	08 95       	ret

0000226a <dma_interrupt>:
void dma_disable(void)
{
	DMA.CTRL = 0;
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	48 2f       	mov	r20, r24
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	fa 01       	movw	r30, r20
    2274:	71 96       	adiw	r30, 0x11	; 17
    2276:	e2 95       	swap	r30
    2278:	f2 95       	swap	r31
    227a:	f0 7f       	andi	r31, 0xF0	; 240
    227c:	fe 27       	eor	r31, r30
    227e:	e0 7f       	andi	r30, 0xF0	; 240
    2280:	fe 27       	eor	r31, r30
    2282:	a0 e0       	ldi	r26, 0x00	; 0
    2284:	b1 e0       	ldi	r27, 0x01	; 1
    2286:	14 96       	adiw	r26, 0x04	; 4
    2288:	9c 91       	ld	r25, X
    228a:	14 97       	sbiw	r26, 0x04	; 4
    228c:	13 96       	adiw	r26, 0x03	; 3
    228e:	6c 91       	ld	r22, X
    2290:	da 01       	movw	r26, r20
    2292:	14 96       	adiw	r26, 0x04	; 4
    2294:	21 e0       	ldi	r18, 0x01	; 1
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	e9 01       	movw	r28, r18
    229a:	08 2e       	mov	r0, r24
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <dma_interrupt+0x38>
    229e:	cc 0f       	add	r28, r28
    22a0:	dd 1f       	adc	r29, r29
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <dma_interrupt+0x34>
    22a6:	0a 2e       	mov	r0, r26
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <dma_interrupt+0x44>
    22aa:	22 0f       	add	r18, r18
    22ac:	33 1f       	adc	r19, r19
    22ae:	0a 94       	dec	r0
    22b0:	e2 f7       	brpl	.-8      	; 0x22aa <dma_interrupt+0x40>
    22b2:	2c 2b       	or	r18, r28
    22b4:	62 23       	and	r22, r18
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	eb 01       	movw	r28, r22
    22ba:	0a 2e       	mov	r0, r26
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <dma_interrupt+0x58>
    22be:	d5 95       	asr	r29
    22c0:	c7 95       	ror	r28
    22c2:	0a 94       	dec	r0
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <dma_interrupt+0x54>
    22c6:	c0 fd       	sbrc	r28, 0
    22c8:	1a c0       	rjmp	.+52     	; 0x22fe <dma_interrupt+0x94>
    22ca:	08 2e       	mov	r0, r24
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <dma_interrupt+0x68>
    22ce:	75 95       	asr	r23
    22d0:	67 95       	ror	r22
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <dma_interrupt+0x64>
    22d6:	60 fd       	sbrc	r22, 0
    22d8:	14 c0       	rjmp	.+40     	; 0x2302 <dma_interrupt+0x98>
    22da:	29 23       	and	r18, r25
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	b9 01       	movw	r22, r18
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <dma_interrupt+0x7c>
    22e2:	75 95       	asr	r23
    22e4:	67 95       	ror	r22
    22e6:	aa 95       	dec	r26
    22e8:	e2 f7       	brpl	.-8      	; 0x22e2 <dma_interrupt+0x78>
    22ea:	60 fd       	sbrc	r22, 0
    22ec:	0c c0       	rjmp	.+24     	; 0x2306 <dma_interrupt+0x9c>
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <dma_interrupt+0x8a>
    22f0:	35 95       	asr	r19
    22f2:	27 95       	ror	r18
    22f4:	8a 95       	dec	r24
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <dma_interrupt+0x86>
    22f8:	82 2f       	mov	r24, r18
    22fa:	81 70       	andi	r24, 0x01	; 1
    22fc:	05 c0       	rjmp	.+10     	; 0x2308 <dma_interrupt+0x9e>
    22fe:	84 e0       	ldi	r24, 0x04	; 4
    2300:	03 c0       	rjmp	.+6      	; 0x2308 <dma_interrupt+0x9e>
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <dma_interrupt+0x9e>
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	90 63       	ori	r25, 0x30	; 48
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	44 0f       	add	r20, r20
    2310:	55 1f       	adc	r21, r21
    2312:	fa 01       	movw	r30, r20
    2314:	ef 54       	subi	r30, 0x4F	; 79
    2316:	f3 4d       	sbci	r31, 0xD3	; 211
    2318:	01 90       	ld	r0, Z+
    231a:	f0 81       	ld	r31, Z
    231c:	e0 2d       	mov	r30, r0
    231e:	30 97       	sbiw	r30, 0x00	; 0
    2320:	09 f0       	breq	.+2      	; 0x2324 <dma_interrupt+0xba>
    2322:	19 95       	eicall
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	08 95       	ret

0000232a <dma_enable>:
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	1f 92       	push	r1
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    233c:	80 91 d0 2c 	lds	r24, 0x2CD0	; 0x802cd0 <sleepmgr_locks+0x1>
    2340:	8f 3f       	cpi	r24, 0xFF	; 255
    2342:	09 f4       	brne	.+2      	; 0x2346 <dma_enable+0x1c>
    2344:	ff cf       	rjmp	.-2      	; 0x2344 <dma_enable+0x1a>
    2346:	8f b7       	in	r24, 0x3f	; 63
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	f8 94       	cli
    234c:	99 81       	ldd	r25, Y+1	; 0x01
    234e:	ef ec       	ldi	r30, 0xCF	; 207
    2350:	fc e2       	ldi	r31, 0x2C	; 44
    2352:	81 81       	ldd	r24, Z+1	; 0x01
    2354:	8f 5f       	subi	r24, 0xFF	; 255
    2356:	81 83       	std	Z+1, r24	; 0x01
    2358:	9f bf       	out	0x3f, r25	; 63
    235a:	e0 e0       	ldi	r30, 0x00	; 0
    235c:	f1 e0       	ldi	r31, 0x01	; 1
    235e:	80 e4       	ldi	r24, 0x40	; 64
    2360:	80 83       	st	Z, r24
    2362:	80 e8       	ldi	r24, 0x80	; 128
    2364:	80 83       	st	Z, r24
    2366:	0f 90       	pop	r0
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	08 95       	ret

0000236e <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    236e:	e8 2f       	mov	r30, r24
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	ee 0f       	add	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	ef 54       	subi	r30, 0x4F	; 79
    2378:	f3 4d       	sbci	r31, 0xD3	; 211
    237a:	60 83       	st	Z, r22
    237c:	71 83       	std	Z+1, r23	; 0x01
    237e:	08 95       	ret

00002380 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	0b b6       	in	r0, 0x3b	; 59
    238c:	0f 92       	push	r0
    238e:	2f 93       	push	r18
    2390:	3f 93       	push	r19
    2392:	4f 93       	push	r20
    2394:	5f 93       	push	r21
    2396:	6f 93       	push	r22
    2398:	7f 93       	push	r23
    239a:	8f 93       	push	r24
    239c:	9f 93       	push	r25
    239e:	af 93       	push	r26
    23a0:	bf 93       	push	r27
    23a2:	ef 93       	push	r30
    23a4:	ff 93       	push	r31
	dma_interrupt(0);
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	60 df       	rcall	.-320    	; 0x226a <dma_interrupt>
}
    23aa:	ff 91       	pop	r31
    23ac:	ef 91       	pop	r30
    23ae:	bf 91       	pop	r27
    23b0:	af 91       	pop	r26
    23b2:	9f 91       	pop	r25
    23b4:	8f 91       	pop	r24
    23b6:	7f 91       	pop	r23
    23b8:	6f 91       	pop	r22
    23ba:	5f 91       	pop	r21
    23bc:	4f 91       	pop	r20
    23be:	3f 91       	pop	r19
    23c0:	2f 91       	pop	r18
    23c2:	0f 90       	pop	r0
    23c4:	0b be       	out	0x3b, r0	; 59
    23c6:	0f 90       	pop	r0
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	0f 90       	pop	r0
    23cc:	1f 90       	pop	r1
    23ce:	18 95       	reti

000023d0 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    23d0:	1f 92       	push	r1
    23d2:	0f 92       	push	r0
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	0f 92       	push	r0
    23d8:	11 24       	eor	r1, r1
    23da:	0b b6       	in	r0, 0x3b	; 59
    23dc:	0f 92       	push	r0
    23de:	2f 93       	push	r18
    23e0:	3f 93       	push	r19
    23e2:	4f 93       	push	r20
    23e4:	5f 93       	push	r21
    23e6:	6f 93       	push	r22
    23e8:	7f 93       	push	r23
    23ea:	8f 93       	push	r24
    23ec:	9f 93       	push	r25
    23ee:	af 93       	push	r26
    23f0:	bf 93       	push	r27
    23f2:	ef 93       	push	r30
    23f4:	ff 93       	push	r31
	dma_interrupt(1);
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	38 df       	rcall	.-400    	; 0x226a <dma_interrupt>
}
    23fa:	ff 91       	pop	r31
    23fc:	ef 91       	pop	r30
    23fe:	bf 91       	pop	r27
    2400:	af 91       	pop	r26
    2402:	9f 91       	pop	r25
    2404:	8f 91       	pop	r24
    2406:	7f 91       	pop	r23
    2408:	6f 91       	pop	r22
    240a:	5f 91       	pop	r21
    240c:	4f 91       	pop	r20
    240e:	3f 91       	pop	r19
    2410:	2f 91       	pop	r18
    2412:	0f 90       	pop	r0
    2414:	0b be       	out	0x3b, r0	; 59
    2416:	0f 90       	pop	r0
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	0f 90       	pop	r0
    241c:	1f 90       	pop	r1
    241e:	18 95       	reti

00002420 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    2420:	1f 92       	push	r1
    2422:	0f 92       	push	r0
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	0f 92       	push	r0
    2428:	11 24       	eor	r1, r1
    242a:	0b b6       	in	r0, 0x3b	; 59
    242c:	0f 92       	push	r0
    242e:	2f 93       	push	r18
    2430:	3f 93       	push	r19
    2432:	4f 93       	push	r20
    2434:	5f 93       	push	r21
    2436:	6f 93       	push	r22
    2438:	7f 93       	push	r23
    243a:	8f 93       	push	r24
    243c:	9f 93       	push	r25
    243e:	af 93       	push	r26
    2440:	bf 93       	push	r27
    2442:	ef 93       	push	r30
    2444:	ff 93       	push	r31
	dma_interrupt(2);
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	10 df       	rcall	.-480    	; 0x226a <dma_interrupt>
}
    244a:	ff 91       	pop	r31
    244c:	ef 91       	pop	r30
    244e:	bf 91       	pop	r27
    2450:	af 91       	pop	r26
    2452:	9f 91       	pop	r25
    2454:	8f 91       	pop	r24
    2456:	7f 91       	pop	r23
    2458:	6f 91       	pop	r22
    245a:	5f 91       	pop	r21
    245c:	4f 91       	pop	r20
    245e:	3f 91       	pop	r19
    2460:	2f 91       	pop	r18
    2462:	0f 90       	pop	r0
    2464:	0b be       	out	0x3b, r0	; 59
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	0f 90       	pop	r0
    246c:	1f 90       	pop	r1
    246e:	18 95       	reti

00002470 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    2470:	1f 92       	push	r1
    2472:	0f 92       	push	r0
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	0f 92       	push	r0
    2478:	11 24       	eor	r1, r1
    247a:	0b b6       	in	r0, 0x3b	; 59
    247c:	0f 92       	push	r0
    247e:	2f 93       	push	r18
    2480:	3f 93       	push	r19
    2482:	4f 93       	push	r20
    2484:	5f 93       	push	r21
    2486:	6f 93       	push	r22
    2488:	7f 93       	push	r23
    248a:	8f 93       	push	r24
    248c:	9f 93       	push	r25
    248e:	af 93       	push	r26
    2490:	bf 93       	push	r27
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
	dma_interrupt(3);
    2496:	83 e0       	ldi	r24, 0x03	; 3
    2498:	e8 de       	rcall	.-560    	; 0x226a <dma_interrupt>
}
    249a:	ff 91       	pop	r31
    249c:	ef 91       	pop	r30
    249e:	bf 91       	pop	r27
    24a0:	af 91       	pop	r26
    24a2:	9f 91       	pop	r25
    24a4:	8f 91       	pop	r24
    24a6:	7f 91       	pop	r23
    24a8:	6f 91       	pop	r22
    24aa:	5f 91       	pop	r21
    24ac:	4f 91       	pop	r20
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0b be       	out	0x3b, r0	; 59
    24b6:	0f 90       	pop	r0
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	0f 90       	pop	r0
    24bc:	1f 90       	pop	r1
    24be:	18 95       	reti

000024c0 <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	1f 92       	push	r1
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    24cc:	e8 2f       	mov	r30, r24
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	71 96       	adiw	r30, 0x11	; 17
    24d2:	e2 95       	swap	r30
    24d4:	f2 95       	swap	r31
    24d6:	f0 7f       	andi	r31, 0xF0	; 240
    24d8:	fe 27       	eor	r31, r30
    24da:	e0 7f       	andi	r30, 0xF0	; 240
    24dc:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    24de:	8f b7       	in	r24, 0x3f	; 63
    24e0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    24e2:	f8 94       	cli
	return flags;
    24e4:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    24e6:	19 96       	adiw	r26, 0x09	; 9
    24e8:	8c 91       	ld	r24, X
    24ea:	19 97       	sbiw	r26, 0x09	; 9
    24ec:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    24ee:	1a 96       	adiw	r26, 0x0a	; 10
    24f0:	8c 91       	ld	r24, X
    24f2:	1a 97       	sbiw	r26, 0x0a	; 10
    24f4:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    24f6:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    24f8:	17 96       	adiw	r26, 0x07	; 7
    24fa:	8c 91       	ld	r24, X
    24fc:	17 97       	sbiw	r26, 0x07	; 7
    24fe:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    2500:	18 96       	adiw	r26, 0x08	; 8
    2502:	8c 91       	ld	r24, X
    2504:	18 97       	sbiw	r26, 0x08	; 8
    2506:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    2508:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    250a:	12 96       	adiw	r26, 0x02	; 2
    250c:	8c 91       	ld	r24, X
    250e:	12 97       	sbiw	r26, 0x02	; 2
    2510:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    2512:	13 96       	adiw	r26, 0x03	; 3
    2514:	8c 91       	ld	r24, X
    2516:	13 97       	sbiw	r26, 0x03	; 3
    2518:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    251a:	14 96       	adiw	r26, 0x04	; 4
    251c:	2d 91       	ld	r18, X+
    251e:	3c 91       	ld	r19, X
    2520:	15 97       	sbiw	r26, 0x05	; 5
    2522:	24 83       	std	Z+4, r18	; 0x04
    2524:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    2526:	16 96       	adiw	r26, 0x06	; 6
    2528:	8c 91       	ld	r24, X
    252a:	16 97       	sbiw	r26, 0x06	; 6
    252c:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	8c 91       	ld	r24, X
    2532:	11 97       	sbiw	r26, 0x01	; 1
    2534:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    2536:	8c 91       	ld	r24, X
    2538:	8f 77       	andi	r24, 0x7F	; 127
    253a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    253c:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    253e:	0f 90       	pop	r0
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    2546:	04 c0       	rjmp	.+8      	; 0x2550 <__portable_avr_delay_cycles+0xa>
    2548:	61 50       	subi	r22, 0x01	; 1
    254a:	71 09       	sbc	r23, r1
    254c:	81 09       	sbc	r24, r1
    254e:	91 09       	sbc	r25, r1
    2550:	61 15       	cp	r22, r1
    2552:	71 05       	cpc	r23, r1
    2554:	81 05       	cpc	r24, r1
    2556:	91 05       	cpc	r25, r1
    2558:	b9 f7       	brne	.-18     	; 0x2548 <__portable_avr_delay_cycles+0x2>
    255a:	08 95       	ret

0000255c <rtc_get_time>:
    255c:	80 e1       	ldi	r24, 0x10	; 16
    255e:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    2562:	e0 e2       	ldi	r30, 0x20	; 32
    2564:	f4 e0       	ldi	r31, 0x04	; 4
    2566:	81 81       	ldd	r24, Z+1	; 0x01
    2568:	84 fd       	sbrc	r24, 4
    256a:	fd cf       	rjmp	.-6      	; 0x2566 <rtc_get_time+0xa>
    256c:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    2570:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    2574:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    2578:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    257c:	08 95       	ret

0000257e <rtc_set_callback>:
    257e:	80 93 b9 2c 	sts	0x2CB9, r24	; 0x802cb9 <rtc_data>
    2582:	90 93 ba 2c 	sts	0x2CBA, r25	; 0x802cba <rtc_data+0x1>
    2586:	08 95       	ret

00002588 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    258c:	64 e0       	ldi	r22, 0x04	; 4
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    2594:	c0 ef       	ldi	r28, 0xF0	; 240
    2596:	d0 e0       	ldi	r29, 0x00	; 0
    2598:	88 81       	ld	r24, Y
    259a:	82 60       	ori	r24, 0x02	; 2
    259c:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    259e:	61 e0       	ldi	r22, 0x01	; 1
    25a0:	80 ef       	ldi	r24, 0xF0	; 240
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 ca 44 	call	0x8994	; 0x8994 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    25a8:	88 81       	ld	r24, Y
    25aa:	84 60       	ori	r24, 0x04	; 4
    25ac:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    25ae:	69 ee       	ldi	r22, 0xE9	; 233
    25b0:	73 e0       	ldi	r23, 0x03	; 3
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	c7 df       	rcall	.-114    	; 0x2546 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    25b8:	88 81       	ld	r24, Y
    25ba:	88 61       	ori	r24, 0x18	; 24
    25bc:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    25be:	e0 ef       	ldi	r30, 0xF0	; 240
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	81 81       	ldd	r24, Z+1	; 0x01
    25c4:	83 ff       	sbrs	r24, 3
    25c6:	fd cf       	rjmp	.-6      	; 0x25c2 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    25c8:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    25cc:	e0 e2       	ldi	r30, 0x20	; 32
    25ce:	f4 e0       	ldi	r31, 0x04	; 4
    25d0:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    25d2:	80 fd       	sbrc	r24, 0
    25d4:	fd cf       	rjmp	.-6      	; 0x25d0 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    25d6:	e0 e2       	ldi	r30, 0x20	; 32
    25d8:	f4 e0       	ldi	r31, 0x04	; 4
    25da:	8f ef       	ldi	r24, 0xFF	; 255
    25dc:	9f ef       	ldi	r25, 0xFF	; 255
    25de:	dc 01       	movw	r26, r24
    25e0:	80 87       	std	Z+8, r24	; 0x08
    25e2:	91 87       	std	Z+9, r25	; 0x09
    25e4:	a2 87       	std	Z+10, r26	; 0x0a
    25e6:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    25e8:	14 82       	std	Z+4, r1	; 0x04
    25ea:	15 82       	std	Z+5, r1	; 0x05
    25ec:	16 82       	std	Z+6, r1	; 0x06
    25ee:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    25f0:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    25f2:	80 fd       	sbrc	r24, 0
    25f4:	fd cf       	rjmp	.-6      	; 0x25f0 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    25f6:	e0 e2       	ldi	r30, 0x20	; 32
    25f8:	f4 e0       	ldi	r31, 0x04	; 4
    25fa:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2600:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    2602:	80 fd       	sbrc	r24, 0
    2604:	fd cf       	rjmp	.-6      	; 0x2600 <rtc_init+0x78>
}
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    260c:	1f 92       	push	r1
    260e:	0f 92       	push	r0
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	0f 92       	push	r0
    2614:	11 24       	eor	r1, r1
    2616:	0b b6       	in	r0, 0x3b	; 59
    2618:	0f 92       	push	r0
    261a:	2f 93       	push	r18
    261c:	3f 93       	push	r19
    261e:	4f 93       	push	r20
    2620:	5f 93       	push	r21
    2622:	6f 93       	push	r22
    2624:	7f 93       	push	r23
    2626:	8f 93       	push	r24
    2628:	9f 93       	push	r25
    262a:	af 93       	push	r26
    262c:	bf 93       	push	r27
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	ef 93       	push	r30
    2634:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    2636:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    263a:	c0 91 b9 2c 	lds	r28, 0x2CB9	; 0x802cb9 <rtc_data>
    263e:	d0 91 ba 2c 	lds	r29, 0x2CBA	; 0x802cba <rtc_data+0x1>
    2642:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    2644:	19 f0       	breq	.+6      	; 0x264c <__vector_11+0x40>
    2646:	8a df       	rcall	.-236    	; 0x255c <rtc_get_time>
    2648:	fe 01       	movw	r30, r28
}
    264a:	19 95       	eicall
    264c:	ff 91       	pop	r31
    264e:	ef 91       	pop	r30
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	bf 91       	pop	r27
    2656:	af 91       	pop	r26
    2658:	9f 91       	pop	r25
    265a:	8f 91       	pop	r24
    265c:	7f 91       	pop	r23
    265e:	6f 91       	pop	r22
    2660:	5f 91       	pop	r21
    2662:	4f 91       	pop	r20
    2664:	3f 91       	pop	r19
    2666:	2f 91       	pop	r18
    2668:	0f 90       	pop	r0
    266a:	0b be       	out	0x3b, r0	; 59
    266c:	0f 90       	pop	r0
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	0f 90       	pop	r0
    2672:	1f 90       	pop	r1
    2674:	18 95       	reti

00002676 <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* Interpolate result */
	uint16_t left_x       = phase >> 4;												// left side
	int16_t  left_y       = (int16_t)PGM_READ_WORD(&(PM_SINE[left_x])) - 0x8000;
    2676:	fc 01       	movw	r30, r24
    2678:	f2 95       	swap	r31
    267a:	e2 95       	swap	r30
    267c:	ef 70       	andi	r30, 0x0F	; 15
    267e:	ef 27       	eor	r30, r31
    2680:	ff 70       	andi	r31, 0x0F	; 15
    2682:	ef 27       	eor	r30, r31
    2684:	ee 0f       	add	r30, r30
    2686:	ff 1f       	adc	r31, r31
    2688:	e8 5e       	subi	r30, 0xE8	; 232
    268a:	fd 4f       	sbci	r31, 0xFD	; 253
    268c:	25 91       	lpm	r18, Z+
    268e:	34 91       	lpm	r19, Z
    2690:	30 58       	subi	r19, 0x80	; 128
	uint16_t rght_x       = (phase + 16) >> 4;										// right side
	int16_t  rght_y       = (int16_t)PGM_READ_WORD(&(PM_SINE[rght_x])) - 0x8000;
    2692:	fc 01       	movw	r30, r24
    2694:	70 96       	adiw	r30, 0x10	; 16
    2696:	f2 95       	swap	r31
    2698:	e2 95       	swap	r30
    269a:	ef 70       	andi	r30, 0x0F	; 15
    269c:	ef 27       	eor	r30, r31
    269e:	ff 70       	andi	r31, 0x0F	; 15
    26a0:	ef 27       	eor	r30, r31
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	e8 5e       	subi	r30, 0xE8	; 232
    26a8:	fd 4f       	sbci	r31, 0xFD	; 253
    26aa:	45 91       	lpm	r20, Z+
    26ac:	54 91       	lpm	r21, Z
	int16_t  prob         = phase & 0x0f;											// phase fraction
	int16_t  delta_frac_y = (int16_t) (((rght_y - left_y) * prob) >> 4);			// interpolation
	int16_t  val          = left_y + delta_frac_y;

	return 0x8000U + (uint16_t)val;
    26ae:	50 58       	subi	r21, 0x80	; 128
    26b0:	42 1b       	sub	r20, r18
    26b2:	53 0b       	sbc	r21, r19
    26b4:	8f 70       	andi	r24, 0x0F	; 15
    26b6:	99 27       	eor	r25, r25
    26b8:	48 9f       	mul	r20, r24
    26ba:	b0 01       	movw	r22, r0
    26bc:	49 9f       	mul	r20, r25
    26be:	70 0d       	add	r23, r0
    26c0:	58 9f       	mul	r21, r24
    26c2:	70 0d       	add	r23, r0
    26c4:	11 24       	eor	r1, r1
    26c6:	cb 01       	movw	r24, r22
    26c8:	95 95       	asr	r25
    26ca:	87 95       	ror	r24
    26cc:	95 95       	asr	r25
    26ce:	87 95       	ror	r24
    26d0:	95 95       	asr	r25
    26d2:	87 95       	ror	r24
    26d4:	95 95       	asr	r25
    26d6:	87 95       	ror	r24
    26d8:	82 0f       	add	r24, r18
    26da:	93 1f       	adc	r25, r19
}
    26dc:	90 58       	subi	r25, 0x80	; 128
    26de:	08 95       	ret

000026e0 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    26e0:	04 c0       	rjmp	.+8      	; 0x26ea <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    26e2:	61 50       	subi	r22, 0x01	; 1
    26e4:	71 09       	sbc	r23, r1
    26e6:	81 09       	sbc	r24, r1
    26e8:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    26ea:	61 15       	cp	r22, r1
    26ec:	71 05       	cpc	r23, r1
    26ee:	81 05       	cpc	r24, r1
    26f0:	91 05       	cpc	r25, r1
    26f2:	b9 f7       	brne	.-18     	; 0x26e2 <__portable_avr_delay_cycles+0x2>
    26f4:	08 95       	ret

000026f6 <twi2_waitUntilReady>:
}
#endif


static void twi2_waitUntilReady(void)
{
    26f6:	cf 92       	push	r12
    26f8:	df 92       	push	r13
    26fa:	ef 92       	push	r14
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
	status_code_t status;
	uint8_t isBusy;
	uint8_t isValid;

	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_STATE;
    2704:	eb e0       	ldi	r30, 0x0B	; 11
    2706:	f0 e2       	ldi	r31, 0x20	; 32
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	84 83       	std	Z+4, r24	; 0x04
    2712:	95 83       	std	Z+5, r25	; 0x05

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2714:	8f 01       	movw	r16, r30
    2716:	cc 24       	eor	r12, r12
    2718:	c3 94       	inc	r12
    271a:	d1 2c       	mov	r13, r1
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    271c:	0f 2e       	mov	r0, r31
    271e:	fb eb       	ldi	r31, 0xBB	; 187
    2720:	ef 2e       	mov	r14, r31
    2722:	fa e2       	ldi	r31, 0x2A	; 42
    2724:	ff 2e       	mov	r15, r31
    2726:	f0 2d       	mov	r31, r0
	twi2_packet.addr_length = 1;

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2728:	f8 01       	movw	r30, r16
    272a:	c0 86       	std	Z+8, r12	; 0x08
    272c:	d1 86       	std	Z+9, r13	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	b8 01       	movw	r22, r16
    2732:	80 e8       	ldi	r24, 0x80	; 128
    2734:	94 e0       	ldi	r25, 0x04	; 4
    2736:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    273a:	f7 01       	movw	r30, r14
    273c:	c0 81       	ld	r28, Z
    273e:	9c 2f       	mov	r25, r28
    2740:	90 78       	andi	r25, 0x80	; 128
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
    2742:	81 11       	cpse	r24, r1
    2744:	0d c0       	rjmp	.+26     	; 0x2760 <twi2_waitUntilReady+0x6a>
    2746:	91 f0       	breq	.+36     	; 0x276c <twi2_waitUntilReady+0x76>
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
		} else {
			if (isBusy && isValid) {
    2748:	8c 2f       	mov	r24, r28
    274a:	81 78       	andi	r24, 0x81	; 129
    274c:	81 38       	cpi	r24, 0x81	; 129
    274e:	29 f4       	brne	.+10     	; 0x275a <twi2_waitUntilReady+0x64>
				delay_us(TWI_SMART_LCD_DEVICE_BUSY_DELAY_MIN_US);
    2750:	65 ef       	ldi	r22, 0xF5	; 245
    2752:	71 e0       	ldi	r23, 0x01	; 1
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	c3 df       	rcall	.-122    	; 0x26e0 <__portable_avr_delay_cycles>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
    275a:	c0 fd       	sbrc	r28, 0
    275c:	e5 cf       	rjmp	.-54     	; 0x2728 <twi2_waitUntilReady+0x32>
    275e:	0c c0       	rjmp	.+24     	; 0x2778 <twi2_waitUntilReady+0x82>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2760:	65 e0       	ldi	r22, 0x05	; 5
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	bb df       	rcall	.-138    	; 0x26e0 <__portable_avr_delay_cycles>
    276a:	de cf       	rjmp	.-68     	; 0x2728 <twi2_waitUntilReady+0x32>
    276c:	65 e0       	ldi	r22, 0x05	; 5
    276e:	70 e0       	ldi	r23, 0x00	; 0
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	b5 df       	rcall	.-150    	; 0x26e0 <__portable_avr_delay_cycles>
    2776:	d8 cf       	rjmp	.-80     	; 0x2728 <twi2_waitUntilReady+0x32>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
	//printf("DBG909\r\n");
}
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	df 90       	pop	r13
    2784:	cf 90       	pop	r12
    2786:	08 95       	ret

00002788 <isr_twi1_baro>:
static void isr_twi1_gyro(uint32_t now, bool sync)
{
}

static void isr_twi1_baro(uint32_t now, bool sync)
{
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	1f 92       	push	r1
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
	static uint8_t  s_step = 100;
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	/* Restart a new cycle if ready */
	if (sync && (s_step >= 100)) {
    2792:	44 23       	and	r20, r20
    2794:	41 f0       	breq	.+16     	; 0x27a6 <isr_twi1_baro+0x1e>
    2796:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_step.7338>
    279a:	84 36       	cpi	r24, 0x64	; 100
    279c:	08 f4       	brcc	.+2      	; 0x27a0 <isr_twi1_baro+0x18>
    279e:	bb c0       	rjmp	.+374    	; 0x2916 <isr_twi1_baro+0x18e>
		s_step = 0;
    27a0:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <s_step.7338>
    27a4:	09 c0       	rjmp	.+18     	; 0x27b8 <isr_twi1_baro+0x30>
	}

	switch (s_step) {
    27a6:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_step.7338>
    27aa:	85 31       	cpi	r24, 0x15	; 21
    27ac:	09 f1       	breq	.+66     	; 0x27f0 <isr_twi1_baro+0x68>
    27ae:	8b 32       	cpi	r24, 0x2B	; 43
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <isr_twi1_baro+0x2c>
    27b2:	59 c0       	rjmp	.+178    	; 0x2866 <isr_twi1_baro+0xde>
    27b4:	81 11       	cpse	r24, r1
    27b6:	a9 c0       	rjmp	.+338    	; 0x290a <isr_twi1_baro+0x182>
		case 0:
			/* Request D1 */
			twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    27b8:	ef e1       	ldi	r30, 0x1F	; 31
    27ba:	f0 e2       	ldi	r31, 0x20	; 32
    27bc:	86 e7       	ldi	r24, 0x76	; 118
    27be:	80 83       	st	Z, r24
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D1_4096;
    27c0:	88 e4       	ldi	r24, 0x48	; 72
    27c2:	81 83       	std	Z+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	84 83       	std	Z+4, r24	; 0x04
    27ca:	95 83       	std	Z+5, r25	; 0x05
			twi1_packet.length = 0;
    27cc:	10 86       	std	Z+8, r1	; 0x08
    27ce:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	bf 01       	movw	r22, r30
    27d4:	80 ea       	ldi	r24, 0xA0	; 160
    27d6:	94 e0       	ldi	r25, 0x04	; 4
    27d8:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
			status_code_t sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    27dc:	81 11       	cpse	r24, r1
    27de:	04 c0       	rjmp	.+8      	; 0x27e8 <isr_twi1_baro+0x60>
				s_step = 1;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
				return;
    27e6:	a0 c0       	rjmp	.+320    	; 0x2928 <isr_twi1_baro+0x1a0>
			}

			s_step = 200;										// Failed, stay until new sync triggers
    27e8:	88 ec       	ldi	r24, 0xC8	; 200
    27ea:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
			return;
    27ee:	9c c0       	rjmp	.+312    	; 0x2928 <isr_twi1_baro+0x1a0>
		break;

		case 21:
			/* Get data */
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    27f0:	ef e1       	ldi	r30, 0x1F	; 31
    27f2:	f0 e2       	ldi	r31, 0x20	; 32
    27f4:	11 82       	std	Z+1, r1	; 0x01
			twi1_packet.length = 3;
    27f6:	83 e0       	ldi	r24, 0x03	; 3
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	80 87       	std	Z+8, r24	; 0x08
    27fc:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    27fe:	41 e0       	ldi	r20, 0x01	; 1
    2800:	bf 01       	movw	r22, r30
    2802:	80 ea       	ldi	r24, 0xA0	; 160
    2804:	94 e0       	ldi	r25, 0x04	; 4
    2806:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    280a:	81 11       	cpse	r24, r1
    280c:	28 c0       	rjmp	.+80     	; 0x285e <isr_twi1_baro+0xd6>
				s_twi1_baro_d1 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    280e:	e3 ec       	ldi	r30, 0xC3	; 195
    2810:	fa e2       	ldi	r31, 0x2A	; 42
    2812:	20 81       	ld	r18, Z
    2814:	81 81       	ldd	r24, Z+1	; 0x01
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a0 e0       	ldi	r26, 0x00	; 0
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	ba 2f       	mov	r27, r26
    281e:	a9 2f       	mov	r26, r25
    2820:	98 2f       	mov	r25, r24
    2822:	88 27       	eor	r24, r24
    2824:	a2 2b       	or	r26, r18
    2826:	22 81       	ldd	r18, Z+2	; 0x02
    2828:	82 2b       	or	r24, r18
    282a:	80 93 f6 26 	sts	0x26F6, r24	; 0x8026f6 <s_twi1_baro_d1.7339>
    282e:	90 93 f7 26 	sts	0x26F7, r25	; 0x8026f7 <s_twi1_baro_d1.7339+0x1>
    2832:	a0 93 f8 26 	sts	0x26F8, r26	; 0x8026f8 <s_twi1_baro_d1.7339+0x2>
    2836:	b0 93 f9 26 	sts	0x26F9, r27	; 0x8026f9 <s_twi1_baro_d1.7339+0x3>

				/* Request D2 */
				twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D2_4096;
    283a:	ef e1       	ldi	r30, 0x1F	; 31
    283c:	f0 e2       	ldi	r31, 0x20	; 32
    283e:	88 e5       	ldi	r24, 0x58	; 88
    2840:	81 83       	std	Z+1, r24	; 0x01
				twi1_packet.length = 0;
    2842:	10 86       	std	Z+8, r1	; 0x08
    2844:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	bf 01       	movw	r22, r30
    284a:	80 ea       	ldi	r24, 0xA0	; 160
    284c:	94 e0       	ldi	r25, 0x04	; 4
    284e:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
				sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
				if (sc == STATUS_OK) {
    2852:	81 11       	cpse	r24, r1
    2854:	04 c0       	rjmp	.+8      	; 0x285e <isr_twi1_baro+0xd6>
					s_step = 22;
    2856:	86 e1       	ldi	r24, 0x16	; 22
    2858:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
					return;
    285c:	65 c0       	rjmp	.+202    	; 0x2928 <isr_twi1_baro+0x1a0>
				}
			}

			s_step = 211;										// Failed, stay until new sync triggers
    285e:	83 ed       	ldi	r24, 0xD3	; 211
    2860:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
			return;
    2864:	61 c0       	rjmp	.+194    	; 0x2928 <isr_twi1_baro+0x1a0>
		break;

		case 43:
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    2866:	ef e1       	ldi	r30, 0x1F	; 31
    2868:	f0 e2       	ldi	r31, 0x20	; 32
    286a:	11 82       	std	Z+1, r1	; 0x01
			twi1_packet.length = 3;
    286c:	83 e0       	ldi	r24, 0x03	; 3
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	80 87       	std	Z+8, r24	; 0x08
    2872:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	bf 01       	movw	r22, r30
    2878:	80 ea       	ldi	r24, 0xA0	; 160
    287a:	94 e0       	ldi	r25, 0x04	; 4
    287c:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2880:	81 11       	cpse	r24, r1
    2882:	3f c0       	rjmp	.+126    	; 0x2902 <isr_twi1_baro+0x17a>
				s_twi1_baro_d2 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    2884:	e3 ec       	ldi	r30, 0xC3	; 195
    2886:	fa e2       	ldi	r31, 0x2A	; 42
    2888:	20 81       	ld	r18, Z
    288a:	81 81       	ldd	r24, Z+1	; 0x01
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	a0 e0       	ldi	r26, 0x00	; 0
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	ba 2f       	mov	r27, r26
    2894:	a9 2f       	mov	r26, r25
    2896:	98 2f       	mov	r25, r24
    2898:	88 27       	eor	r24, r24
    289a:	a2 2b       	or	r26, r18
    289c:	22 81       	ldd	r18, Z+2	; 0x02
    289e:	82 2b       	or	r24, r18
    28a0:	80 93 f2 26 	sts	0x26F2, r24	; 0x8026f2 <s_twi1_baro_d2.7340>
    28a4:	90 93 f3 26 	sts	0x26F3, r25	; 0x8026f3 <s_twi1_baro_d2.7340+0x1>
    28a8:	a0 93 f4 26 	sts	0x26F4, r26	; 0x8026f4 <s_twi1_baro_d2.7340+0x2>
    28ac:	b0 93 f5 26 	sts	0x26F5, r27	; 0x8026f5 <s_twi1_baro_d2.7340+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    28b0:	8f b7       	in	r24, 0x3f	; 63
    28b2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    28b4:	f8 94       	cli
	return flags;
    28b6:	89 81       	ldd	r24, Y+1	; 0x01

				irqflags_t flags = cpu_irq_save();
				g_twi1_baro_d1 = s_twi1_baro_d1;
    28b8:	40 91 f6 26 	lds	r20, 0x26F6	; 0x8026f6 <s_twi1_baro_d1.7339>
    28bc:	50 91 f7 26 	lds	r21, 0x26F7	; 0x8026f7 <s_twi1_baro_d1.7339+0x1>
    28c0:	60 91 f8 26 	lds	r22, 0x26F8	; 0x8026f8 <s_twi1_baro_d1.7339+0x2>
    28c4:	70 91 f9 26 	lds	r23, 0x26F9	; 0x8026f9 <s_twi1_baro_d1.7339+0x3>
    28c8:	40 93 58 2b 	sts	0x2B58, r20	; 0x802b58 <g_twi1_baro_d1>
    28cc:	50 93 59 2b 	sts	0x2B59, r21	; 0x802b59 <g_twi1_baro_d1+0x1>
    28d0:	60 93 5a 2b 	sts	0x2B5A, r22	; 0x802b5a <g_twi1_baro_d1+0x2>
    28d4:	70 93 5b 2b 	sts	0x2B5B, r23	; 0x802b5b <g_twi1_baro_d1+0x3>
				g_twi1_baro_d2 = s_twi1_baro_d2;
    28d8:	40 91 f2 26 	lds	r20, 0x26F2	; 0x8026f2 <s_twi1_baro_d2.7340>
    28dc:	50 91 f3 26 	lds	r21, 0x26F3	; 0x8026f3 <s_twi1_baro_d2.7340+0x1>
    28e0:	60 91 f4 26 	lds	r22, 0x26F4	; 0x8026f4 <s_twi1_baro_d2.7340+0x2>
    28e4:	70 91 f5 26 	lds	r23, 0x26F5	; 0x8026f5 <s_twi1_baro_d2.7340+0x3>
    28e8:	40 93 54 2b 	sts	0x2B54, r20	; 0x802b54 <g_twi1_baro_d2>
    28ec:	50 93 55 2b 	sts	0x2B55, r21	; 0x802b55 <g_twi1_baro_d2+0x1>
    28f0:	60 93 56 2b 	sts	0x2B56, r22	; 0x802b56 <g_twi1_baro_d2+0x2>
    28f4:	70 93 57 2b 	sts	0x2B57, r23	; 0x802b57 <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    28f8:	8f bf       	out	0x3f, r24	; 63
				cpu_irq_restore(flags);

				s_step = 123;									// Success, stay until new sync triggers
    28fa:	8b e7       	ldi	r24, 0x7B	; 123
    28fc:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
				return;
    2900:	13 c0       	rjmp	.+38     	; 0x2928 <isr_twi1_baro+0x1a0>
			}

			s_step = 223;										// Failed, stay until new sync triggers
    2902:	8f ed       	ldi	r24, 0xDF	; 223
    2904:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
			return;
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <isr_twi1_baro+0x1a0>
		break;

		default:
			/* Delay step of 0.5 ms */
			if (s_step < 100) {
    290a:	84 36       	cpi	r24, 0x64	; 100
    290c:	68 f4       	brcc	.+26     	; 0x2928 <isr_twi1_baro+0x1a0>
				s_step++;
    290e:	8f 5f       	subi	r24, 0xFF	; 255
    2910:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
    2914:	09 c0       	rjmp	.+18     	; 0x2928 <isr_twi1_baro+0x1a0>
	/* Restart a new cycle if ready */
	if (sync && (s_step >= 100)) {
		s_step = 0;
	}

	switch (s_step) {
    2916:	85 31       	cpi	r24, 0x15	; 21
    2918:	09 f4       	brne	.+2      	; 0x291c <isr_twi1_baro+0x194>
    291a:	6a cf       	rjmp	.-300    	; 0x27f0 <isr_twi1_baro+0x68>
    291c:	8b 32       	cpi	r24, 0x2B	; 43
    291e:	09 f4       	brne	.+2      	; 0x2922 <isr_twi1_baro+0x19a>
    2920:	a2 cf       	rjmp	.-188    	; 0x2866 <isr_twi1_baro+0xde>
    2922:	81 11       	cpse	r24, r1
    2924:	f4 cf       	rjmp	.-24     	; 0x290e <isr_twi1_baro+0x186>
    2926:	48 cf       	rjmp	.-368    	; 0x27b8 <isr_twi1_baro+0x30>
			/* Delay step of 0.5 ms */
			if (s_step < 100) {
				s_step++;
			}
	}
}
    2928:	0f 90       	pop	r0
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	08 95       	ret

00002930 <task_twi2_lcd_pos_xy>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_pos_xy(uint8_t x, uint8_t y)
{
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	d8 2f       	mov	r29, r24
	twi2_waitUntilReady();
    2936:	c6 2f       	mov	r28, r22
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2938:	de de       	rcall	.-580    	; 0x26f6 <twi2_waitUntilReady>
    293a:	eb e0       	ldi	r30, 0x0B	; 11
    293c:	f0 e2       	ldi	r31, 0x20	; 32
    293e:	80 e2       	ldi	r24, 0x20	; 32
	twi2_m_data[0] = x;
    2940:	81 83       	std	Z+1, r24	; 0x01
    2942:	ab eb       	ldi	r26, 0xBB	; 187
    2944:	ba e2       	ldi	r27, 0x2A	; 42
	twi2_m_data[1] = y;
    2946:	dc 93       	st	X, r29
    2948:	11 96       	adiw	r26, 0x01	; 1
	twi2_packet.length = 2;
    294a:	cc 93       	st	X, r28
    294c:	82 e0       	ldi	r24, 0x02	; 2
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	80 87       	std	Z+8, r24	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2952:	91 87       	std	Z+9, r25	; 0x09
    2954:	40 e0       	ldi	r20, 0x00	; 0
    2956:	bf 01       	movw	r22, r30
    2958:	80 e8       	ldi	r24, 0x80	; 128
    295a:	94 e0       	ldi	r25, 0x04	; 4
    295c:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2960:	65 e0       	ldi	r22, 0x05	; 5
    2962:	70 e0       	ldi	r23, 0x00	; 0
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
}
    2968:	bb de       	rcall	.-650    	; 0x26e0 <__portable_avr_delay_cycles>
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	08 95       	ret

00002970 <task_twi2_lcd_str>:

static void task_twi2_lcd_str(uint8_t x, uint8_t y, const char* str)
{
    2970:	9f 92       	push	r9
    2972:	af 92       	push	r10
    2974:	bf 92       	push	r11
    2976:	cf 92       	push	r12
    2978:	df 92       	push	r13
    297a:	ef 92       	push	r14
    297c:	ff 92       	push	r15
    297e:	0f 93       	push	r16
    2980:	1f 93       	push	r17
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	b8 2e       	mov	r11, r24
    2988:	a6 2e       	mov	r10, r22
    298a:	ea 01       	movw	r28, r20
	uint8_t slen = strlen(str);
    298c:	fa 01       	movw	r30, r20
    298e:	01 90       	ld	r0, Z+
    2990:	00 20       	and	r0, r0
    2992:	e9 f7       	brne	.-6      	; 0x298e <task_twi2_lcd_str+0x1e>
    2994:	31 97       	sbiw	r30, 0x01	; 1
    2996:	ce 2e       	mov	r12, r30
    2998:	c4 1a       	sub	r12, r20
	if (!slen) {
    299a:	09 f4       	brne	.+2      	; 0x299e <task_twi2_lcd_str+0x2e>
    299c:	43 c0       	rjmp	.+134    	; 0x2a24 <task_twi2_lcd_str+0xb4>
		/* Chunk of the string */
		{
			task_twi2_lcd_pos_xy(x, y);

			twi2_waitUntilReady();
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    299e:	0b e0       	ldi	r16, 0x0B	; 11
    29a0:	10 e2       	ldi	r17, 0x20	; 32
    29a2:	0f 2e       	mov	r0, r31
    29a4:	f0 e3       	ldi	r31, 0x30	; 48
    29a6:	9f 2e       	mov	r9, r31
    29a8:	f0 2d       	mov	r31, r0
			twi2_m_data[0] = this_len;
    29aa:	0f 2e       	mov	r0, r31
    29ac:	fb eb       	ldi	r31, 0xBB	; 187
    29ae:	ef 2e       	mov	r14, r31
    29b0:	fa e2       	ldi	r31, 0x2A	; 42
    29b2:	ff 2e       	mov	r15, r31
    29b4:	f0 2d       	mov	r31, r0
    29b6:	dc 2c       	mov	r13, r12
    29b8:	e6 e0       	ldi	r30, 0x06	; 6
    29ba:	ec 15       	cp	r30, r12
    29bc:	20 f4       	brcc	.+8      	; 0x29c6 <task_twi2_lcd_str+0x56>
    29be:	0f 2e       	mov	r0, r31
    29c0:	f6 e0       	ldi	r31, 0x06	; 6
    29c2:	df 2e       	mov	r13, r31
    29c4:	f0 2d       	mov	r31, r0
			this_len = TWI2_STR_MAXLEN;
		}

		/* Chunk of the string */
		{
			task_twi2_lcd_pos_xy(x, y);
    29c6:	6a 2d       	mov	r22, r10
    29c8:	8b 2d       	mov	r24, r11

			twi2_waitUntilReady();
    29ca:	b2 df       	rcall	.-156    	; 0x2930 <task_twi2_lcd_pos_xy>
    29cc:	94 de       	rcall	.-728    	; 0x26f6 <twi2_waitUntilReady>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    29ce:	f8 01       	movw	r30, r16
    29d0:	91 82       	std	Z+1, r9	; 0x01
			twi2_m_data[0] = this_len;
    29d2:	f7 01       	movw	r30, r14
    29d4:	d0 82       	st	Z, r13
			for (uint8_t idx = 1; idx <= this_len; ++idx) {
    29d6:	dd 20       	and	r13, r13
    29d8:	69 f0       	breq	.+26     	; 0x29f4 <task_twi2_lcd_str+0x84>
    29da:	81 e0       	ldi	r24, 0x01	; 1
				twi2_m_data[idx] = *(str++);
    29dc:	21 96       	adiw	r28, 0x01	; 1
    29de:	e8 2f       	mov	r30, r24
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	e5 54       	subi	r30, 0x45	; 69
    29e4:	f5 4d       	sbci	r31, 0xD5	; 213
    29e6:	de 01       	movw	r26, r28
    29e8:	11 97       	sbiw	r26, 0x01	; 1
    29ea:	9c 91       	ld	r25, X
    29ec:	90 83       	st	Z, r25
			task_twi2_lcd_pos_xy(x, y);

			twi2_waitUntilReady();
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
			twi2_m_data[0] = this_len;
			for (uint8_t idx = 1; idx <= this_len; ++idx) {
    29ee:	8f 5f       	subi	r24, 0xFF	; 255
    29f0:	d8 16       	cp	r13, r24
    29f2:	a0 f7       	brcc	.-24     	; 0x29dc <task_twi2_lcd_str+0x6c>
				twi2_m_data[idx] = *(str++);
			}
			twi2_packet.length = this_len + 1;
    29f4:	8d 2d       	mov	r24, r13
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	01 96       	adiw	r24, 0x01	; 1
    29fa:	f8 01       	movw	r30, r16
    29fc:	80 87       	std	Z+8, r24	; 0x08
    29fe:	91 87       	std	Z+9, r25	; 0x09
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	b8 01       	movw	r22, r16
    2a04:	80 e8       	ldi	r24, 0x80	; 128
    2a06:	94 e0       	ldi	r25, 0x04	; 4
    2a08:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2a0c:	65 e0       	ldi	r22, 0x05	; 5
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	65 de       	rcall	.-822    	; 0x26e0 <__portable_avr_delay_cycles>
		}

		x    += this_len * 6;
    2a16:	8d 2d       	mov	r24, r13
    2a18:	88 0f       	add	r24, r24
    2a1a:	8d 0d       	add	r24, r13
    2a1c:	88 0f       	add	r24, r24
    2a1e:	b8 0e       	add	r11, r24
		slen -= this_len;
    2a20:	cd 18       	sub	r12, r13
	uint8_t slen = strlen(str);
	if (!slen) {
		return;
	}

	while (slen) {
    2a22:	49 f6       	brne	.-110    	; 0x29b6 <task_twi2_lcd_str+0x46>
		}

		x    += this_len * 6;
		slen -= this_len;
	}
}
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	1f 91       	pop	r17
    2a2a:	0f 91       	pop	r16
    2a2c:	ff 90       	pop	r15
    2a2e:	ef 90       	pop	r14
    2a30:	df 90       	pop	r13
    2a32:	cf 90       	pop	r12
    2a34:	bf 90       	pop	r11
    2a36:	af 90       	pop	r10
    2a38:	9f 90       	pop	r9
    2a3a:	08 95       	ret

00002a3c <task_twi2_lcd_print_format_uint32>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_print_format_uint32(uint8_t x, uint8_t y, int32_t adc_i, int32_t adc_f, const char* fmt)
{
    2a3c:	8f 92       	push	r8
    2a3e:	9f 92       	push	r9
    2a40:	af 92       	push	r10
    2a42:	bf 92       	push	r11
    2a44:	cf 92       	push	r12
    2a46:	df 92       	push	r13
    2a48:	ef 92       	push	r14
    2a4a:	ff 92       	push	r15
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	b2 2e       	mov	r11, r18
    2a56:	a3 2e       	mov	r10, r19
    2a58:	94 2e       	mov	r9, r20
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    2a5a:	85 2e       	mov	r8, r21
    2a5c:	69 df       	rcall	.-302    	; 0x2930 <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    2a5e:	4b de       	rcall	.-874    	; 0x26f6 <twi2_waitUntilReady>
    2a60:	cb e0       	ldi	r28, 0x0B	; 11
    2a62:	d0 e2       	ldi	r29, 0x20	; 32
    2a64:	80 e3       	ldi	r24, 0x30	; 48
	twi2_m_data[0] = sprintf((char*)&(twi2_m_data[1]), fmt, adc_i, adc_f);
    2a66:	89 83       	std	Y+1, r24	; 0x01
    2a68:	1f 93       	push	r17
    2a6a:	0f 93       	push	r16
    2a6c:	ff 92       	push	r15
    2a6e:	ef 92       	push	r14
    2a70:	8f 92       	push	r8
    2a72:	9f 92       	push	r9
    2a74:	af 92       	push	r10
    2a76:	bf 92       	push	r11
    2a78:	df 92       	push	r13
    2a7a:	cf 92       	push	r12
    2a7c:	8c eb       	ldi	r24, 0xBC	; 188
    2a7e:	9a e2       	ldi	r25, 0x2A	; 42
    2a80:	9f 93       	push	r25
    2a82:	8f 93       	push	r24
    2a84:	0e 94 84 48 	call	0x9108	; 0x9108 <sprintf>
    2a88:	80 93 bb 2a 	sts	0x2ABB, r24	; 0x802abb <twi2_m_data>
	twi2_packet.length = twi2_m_data[0] + 1;
    2a8c:	99 27       	eor	r25, r25
    2a8e:	01 96       	adiw	r24, 0x01	; 1
    2a90:	88 87       	std	Y+8, r24	; 0x08
    2a92:	99 87       	std	Y+9, r25	; 0x09
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	be 01       	movw	r22, r28
    2a98:	80 e8       	ldi	r24, 0x80	; 128
    2a9a:	94 e0       	ldi	r25, 0x04	; 4
    2a9c:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2aa0:	65 e0       	ldi	r22, 0x05	; 5
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
}
    2aa8:	1b de       	rcall	.-970    	; 0x26e0 <__portable_avr_delay_cycles>
    2aaa:	8d b7       	in	r24, 0x3d	; 61
    2aac:	9e b7       	in	r25, 0x3e	; 62
    2aae:	0c 96       	adiw	r24, 0x0c	; 12
    2ab0:	8d bf       	out	0x3d, r24	; 61
    2ab2:	9e bf       	out	0x3e, r25	; 62
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	ff 90       	pop	r15
    2abe:	ef 90       	pop	r14
    2ac0:	df 90       	pop	r13
    2ac2:	cf 90       	pop	r12
    2ac4:	bf 90       	pop	r11
    2ac6:	af 90       	pop	r10
    2ac8:	9f 90       	pop	r9
    2aca:	8f 90       	pop	r8
    2acc:	08 95       	ret

00002ace <task_twi2_lcd_print_format_uint16>:
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
	task_twi2_lcd_str(6 * 16, (line++) * 10, "%");
}

static void task_twi2_lcd_print_format_uint16(uint8_t x, uint8_t y, int16_t adc_i, int16_t adc_f, const char* fmt)
{
    2ace:	cf 92       	push	r12
    2ad0:	df 92       	push	r13
    2ad2:	ef 92       	push	r14
    2ad4:	ff 92       	push	r15
    2ad6:	0f 93       	push	r16
    2ad8:	1f 93       	push	r17
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
    2ade:	f4 2e       	mov	r15, r20
    2ae0:	e5 2e       	mov	r14, r21
    2ae2:	d2 2e       	mov	r13, r18
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    2ae4:	c3 2e       	mov	r12, r19
    2ae6:	24 df       	rcall	.-440    	; 0x2930 <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    2ae8:	06 de       	rcall	.-1012   	; 0x26f6 <twi2_waitUntilReady>
    2aea:	cb e0       	ldi	r28, 0x0B	; 11
    2aec:	d0 e2       	ldi	r29, 0x20	; 32
    2aee:	80 e3       	ldi	r24, 0x30	; 48
	twi2_m_data[0] = sprintf((char*)&(twi2_m_data[1]), fmt, adc_i, adc_f);
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	cf 92       	push	r12
    2af4:	df 92       	push	r13
    2af6:	ef 92       	push	r14
    2af8:	ff 92       	push	r15
    2afa:	1f 93       	push	r17
    2afc:	0f 93       	push	r16
    2afe:	8c eb       	ldi	r24, 0xBC	; 188
    2b00:	9a e2       	ldi	r25, 0x2A	; 42
    2b02:	9f 93       	push	r25
    2b04:	8f 93       	push	r24
    2b06:	0e 94 84 48 	call	0x9108	; 0x9108 <sprintf>
    2b0a:	80 93 bb 2a 	sts	0x2ABB, r24	; 0x802abb <twi2_m_data>
	twi2_packet.length = twi2_m_data[0] + 1;
    2b0e:	99 27       	eor	r25, r25
    2b10:	01 96       	adiw	r24, 0x01	; 1
    2b12:	88 87       	std	Y+8, r24	; 0x08
    2b14:	99 87       	std	Y+9, r25	; 0x09
    2b16:	40 e0       	ldi	r20, 0x00	; 0
    2b18:	be 01       	movw	r22, r28
    2b1a:	80 e8       	ldi	r24, 0x80	; 128
    2b1c:	94 e0       	ldi	r25, 0x04	; 4
    2b1e:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2b22:	65 e0       	ldi	r22, 0x05	; 5
    2b24:	70 e0       	ldi	r23, 0x00	; 0
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e0       	ldi	r25, 0x00	; 0
}
    2b2a:	da dd       	rcall	.-1100   	; 0x26e0 <__portable_avr_delay_cycles>
    2b2c:	8d b7       	in	r24, 0x3d	; 61
    2b2e:	9e b7       	in	r25, 0x3e	; 62
    2b30:	08 96       	adiw	r24, 0x08	; 8
    2b32:	8d bf       	out	0x3d, r24	; 61
    2b34:	9e bf       	out	0x3e, r25	; 62
    2b36:	df 91       	pop	r29
    2b38:	cf 91       	pop	r28
    2b3a:	1f 91       	pop	r17
    2b3c:	0f 91       	pop	r16
    2b3e:	ff 90       	pop	r15
    2b40:	ef 90       	pop	r14
    2b42:	df 90       	pop	r13
    2b44:	cf 90       	pop	r12
    2b46:	08 95       	ret

00002b48 <twi_init>:
}


void twi_init(void) {
	#ifdef TWI1_MASTER
	TWI1_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA1
    2b48:	e0 e8       	ldi	r30, 0x80	; 128
    2b4a:	f6 e0       	ldi	r31, 0x06	; 6
    2b4c:	88 e3       	ldi	r24, 0x38	; 56
    2b4e:	80 8b       	std	Z+16, r24	; 0x10
	TWI1_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL1
    2b50:	81 8b       	std	Z+17, r24	; 0x11
	#endif

	#ifdef TWI2_MASTER
	TWI2_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA2
    2b52:	e0 e4       	ldi	r30, 0x40	; 64
    2b54:	f6 e0       	ldi	r31, 0x06	; 6
    2b56:	80 8b       	std	Z+16, r24	; 0x10
	TWI2_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL2
    2b58:	81 8b       	std	Z+17, r24	; 0x11
    2b5a:	08 95       	ret

00002b5c <twi_start>:
	#endif
}

void twi_start(void) {
    2b5c:	8f 92       	push	r8
    2b5e:	9f 92       	push	r9
    2b60:	af 92       	push	r10
    2b62:	bf 92       	push	r11
    2b64:	cf 92       	push	r12
    2b66:	df 92       	push	r13
    2b68:	ef 92       	push	r14
    2b6a:	ff 92       	push	r15
    2b6c:	0f 93       	push	r16
    2b6e:	1f 93       	push	r17
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2b74:	60 e4       	ldi	r22, 0x40	; 64
    2b76:	85 e0       	ldi	r24, 0x05	; 5
    2b78:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
	#else
	#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
    2b7c:	6a e2       	ldi	r22, 0x2A	; 42
    2b7e:	70 e2       	ldi	r23, 0x20	; 32
    2b80:	80 ea       	ldi	r24, 0xA0	; 160
    2b82:	94 e0       	ldi	r25, 0x04	; 4
    2b84:	0e 94 c8 29 	call	0x5390	; 0x5390 <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    2b88:	e0 ea       	ldi	r30, 0xA0	; 160
    2b8a:	f4 e0       	ldi	r31, 0x04	; 4
    2b8c:	81 81       	ldd	r24, Z+1	; 0x01
    2b8e:	88 60       	ori	r24, 0x08	; 8
    2b90:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2b92:	60 e4       	ldi	r22, 0x40	; 64
    2b94:	83 e0       	ldi	r24, 0x03	; 3
    2b96:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
	#else
	#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
    2b9a:	66 e1       	ldi	r22, 0x16	; 22
    2b9c:	70 e2       	ldi	r23, 0x20	; 32
    2b9e:	80 e8       	ldi	r24, 0x80	; 128
    2ba0:	94 e0       	ldi	r25, 0x04	; 4
    2ba2:	0e 94 c8 29 	call	0x5390	; 0x5390 <twi_master_init>
    2ba6:	e0 e8       	ldi	r30, 0x80	; 128
    2ba8:	f4 e0       	ldi	r31, 0x04	; 4
    2baa:	81 81       	ldd	r24, Z+1	; 0x01
    2bac:	88 60       	ori	r24, 0x08	; 8
    2bae:	81 83       	std	Z+1, r24	; 0x01

static void init_twi1_hygro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Hygro SHT31-DIS - I2C address: 0x%02X\r\n", TWI1_SLAVE_HYGRO_ADDR);
    2bb0:	1f 92       	push	r1
    2bb2:	c4 e4       	ldi	r28, 0x44	; 68
    2bb4:	cf 93       	push	r28
    2bb6:	86 ef       	ldi	r24, 0xF6	; 246
    2bb8:	90 e2       	ldi	r25, 0x20	; 32
    2bba:	9f 93       	push	r25
    2bbc:	8f 93       	push	r24
    2bbe:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>
	g_twi1_hygro_status = 0;
    2bc2:	10 92 4a 2b 	sts	0x2B4A, r1	; 0x802b4a <g_twi1_hygro_status>

	do {
		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    2bc6:	ef e1       	ldi	r30, 0x1F	; 31
    2bc8:	f0 e2       	ldi	r31, 0x20	; 32
    2bca:	c0 83       	st	Z, r28
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_BREAK_HI;
    2bcc:	80 e3       	ldi	r24, 0x30	; 48
    2bce:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_BREAK_LO;
    2bd0:	83 e9       	ldi	r24, 0x93	; 147
    2bd2:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    2bd4:	82 e0       	ldi	r24, 0x02	; 2
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	84 83       	std	Z+4, r24	; 0x04
    2bda:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    2bdc:	10 86       	std	Z+8, r1	; 0x08
    2bde:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	bf 01       	movw	r22, r30
    2be4:	80 ea       	ldi	r24, 0xA0	; 160
    2be6:	94 e0       	ldi	r25, 0x04	; 4
    2be8:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    2bec:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	88 23       	and	r24, r24
    2bf8:	29 f0       	breq	.+10     	; 0x2c04 <twi_start+0xa8>
			printf("TWI-onboard: Hygro SHT31-DIS -   address NACK / 'break' bad response\r\n");
    2bfa:	8d e2       	ldi	r24, 0x2D	; 45
    2bfc:	91 e2       	ldi	r25, 0x21	; 33
    2bfe:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
    2c02:	70 c0       	rjmp	.+224    	; 0x2ce4 <twi_start+0x188>
			break;
		}
		delay_ms(2);
    2c04:	60 e1       	ldi	r22, 0x10	; 16
    2c06:	77 e2       	ldi	r23, 0x27	; 39
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	69 dd       	rcall	.-1326   	; 0x26e0 <__portable_avr_delay_cycles>

		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_RESET_HI;
    2c0e:	ef e1       	ldi	r30, 0x1F	; 31
    2c10:	f0 e2       	ldi	r31, 0x20	; 32
    2c12:	80 e3       	ldi	r24, 0x30	; 48
    2c14:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_RESET_LO;
    2c16:	82 ea       	ldi	r24, 0xA2	; 162
    2c18:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    2c1a:	82 e0       	ldi	r24, 0x02	; 2
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	84 83       	std	Z+4, r24	; 0x04
    2c20:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    2c22:	10 86       	std	Z+8, r1	; 0x08
    2c24:	11 86       	std	Z+9, r1	; 0x09
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	bf 01       	movw	r22, r30
    2c2a:	80 ea       	ldi	r24, 0xA0	; 160
    2c2c:	94 e0       	ldi	r25, 0x04	; 4
    2c2e:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    2c32:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    2c34:	88 23       	and	r24, r24
    2c36:	29 f0       	breq	.+10     	; 0x2c42 <twi_start+0xe6>
			printf("TWI-onboard: Hygro SHT31-DIS -   'reset' bad response\r\n");
    2c38:	83 e7       	ldi	r24, 0x73	; 115
    2c3a:	91 e2       	ldi	r25, 0x21	; 33
    2c3c:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
    2c40:	51 c0       	rjmp	.+162    	; 0x2ce4 <twi_start+0x188>
			break;
		}
		delay_ms(2);
    2c42:	60 e1       	ldi	r22, 0x10	; 16
    2c44:	77 e2       	ldi	r23, 0x27	; 39
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	4a dd       	rcall	.-1388   	; 0x26e0 <__portable_avr_delay_cycles>

		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_STATUS_HI;
    2c4c:	ef e1       	ldi	r30, 0x1F	; 31
    2c4e:	f0 e2       	ldi	r31, 0x20	; 32
    2c50:	83 ef       	ldi	r24, 0xF3	; 243
    2c52:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_STATUS_LO;
    2c54:	8d e2       	ldi	r24, 0x2D	; 45
    2c56:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	84 83       	std	Z+4, r24	; 0x04
    2c5e:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 2;
    2c60:	80 87       	std	Z+8, r24	; 0x08
    2c62:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2c64:	41 e0       	ldi	r20, 0x01	; 1
    2c66:	bf 01       	movw	r22, r30
    2c68:	80 ea       	ldi	r24, 0xA0	; 160
    2c6a:	94 e0       	ldi	r25, 0x04	; 4
    2c6c:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    2c70:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    2c72:	88 23       	and	r24, r24
    2c74:	29 f0       	breq	.+10     	; 0x2c80 <twi_start+0x124>
			printf("TWI-onboard: Hygro SHT31-DIS -   'status' bad response\r\n");
    2c76:	8a ea       	ldi	r24, 0xAA	; 170
    2c78:	91 e2       	ldi	r25, 0x21	; 33
    2c7a:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
    2c7e:	32 c0       	rjmp	.+100    	; 0x2ce4 <twi_start+0x188>
			break;
		}
		g_twi1_hygro_status = (twi1_m_data[0] << 8) | twi1_m_data[1];
    2c80:	80 91 c4 2a 	lds	r24, 0x2AC4	; 0x802ac4 <twi1_m_data+0x1>
    2c84:	80 93 4a 2b 	sts	0x2B4A, r24	; 0x802b4a <g_twi1_hygro_status>
		printf("TWI-onboard: Hygro SHT31-DIS -   status: 0x%02X\r\n", g_twi1_hygro_status);
    2c88:	1f 92       	push	r1
    2c8a:	8f 93       	push	r24
    2c8c:	82 ee       	ldi	r24, 0xE2	; 226
    2c8e:	91 e2       	ldi	r25, 0x21	; 33
    2c90:	9f 93       	push	r25
    2c92:	8f 93       	push	r24
    2c94:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>

		/* Start cyclic measurements with 2 MPS @ high repeatability */
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_PERIODIC_2MPS_HIPREC_HI;
    2c98:	ef e1       	ldi	r30, 0x1F	; 31
    2c9a:	f0 e2       	ldi	r31, 0x20	; 32
    2c9c:	82 e2       	ldi	r24, 0x22	; 34
    2c9e:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_PERIODIC_2MPS_HIPREC_LO;
    2ca0:	86 e3       	ldi	r24, 0x36	; 54
    2ca2:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    2ca4:	82 e0       	ldi	r24, 0x02	; 2
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	84 83       	std	Z+4, r24	; 0x04
    2caa:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    2cac:	10 86       	std	Z+8, r1	; 0x08
    2cae:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	bf 01       	movw	r22, r30
    2cb4:	80 ea       	ldi	r24, 0xA0	; 160
    2cb6:	94 e0       	ldi	r25, 0x04	; 4
    2cb8:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    2cbc:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	88 23       	and	r24, r24
    2cc8:	29 f0       	breq	.+10     	; 0x2cd4 <twi_start+0x178>
			printf("TWI-onboard: Hygro SHT31-DIS -   'periodic' bad response\r\n");
    2cca:	84 e1       	ldi	r24, 0x14	; 20
    2ccc:	92 e2       	ldi	r25, 0x22	; 34
    2cce:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
    2cd2:	08 c0       	rjmp	.+16     	; 0x2ce4 <twi_start+0x188>
			break;
		}

		g_twi1_hygro_valid = true;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	80 93 4b 2b 	sts	0x2B4B, r24	; 0x802b4b <g_twi1_hygro_valid>
		printf("TWI-onboard:  INIT success.\r\n");
    2cda:	8e e4       	ldi	r24, 0x4E	; 78
    2cdc:	92 e2       	ldi	r25, 0x22	; 34
    2cde:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
    2ce2:	10 c0       	rjmp	.+32     	; 0x2d04 <twi_start+0x1a8>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    2ce4:	8c 2f       	mov	r24, r28
    2ce6:	0c 2e       	mov	r0, r28
    2ce8:	00 0c       	add	r0, r0
    2cea:	99 0b       	sbc	r25, r25
    2cec:	9f 93       	push	r25
    2cee:	cf 93       	push	r28
    2cf0:	8b e6       	ldi	r24, 0x6B	; 107
    2cf2:	92 e2       	ldi	r25, 0x22	; 34
    2cf4:	9f 93       	push	r25
    2cf6:	8f 93       	push	r24
    2cf8:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0

static void init_twi1_gyro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Gyro MPU-9250 - I2C address: 0x%02X, 0x%02X\r\n", TWI1_SLAVE_GYRO_ADDR_1, TWI1_SLAVE_GYRO_ADDR_2);
    2d04:	1f 92       	push	r1
    2d06:	8c e0       	ldi	r24, 0x0C	; 12
    2d08:	8f 93       	push	r24
    2d0a:	1f 92       	push	r1
    2d0c:	c8 e6       	ldi	r28, 0x68	; 104
    2d0e:	cf 93       	push	r28
    2d10:	8c e9       	ldi	r24, 0x9C	; 156
    2d12:	92 e2       	ldi	r25, 0x22	; 34
    2d14:	9f 93       	push	r25
    2d16:	8f 93       	push	r24
    2d18:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>
	g_twi1_gyro_1_version = 0;
    2d1c:	10 92 70 2b 	sts	0x2B70, r1	; 0x802b70 <g_twi1_gyro_1_version>
	g_twi1_gyro_2_version = 0;
    2d20:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <g_twi1_gyro_2_version>

	do {
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    2d24:	ef e1       	ldi	r30, 0x1F	; 31
    2d26:	f0 e2       	ldi	r31, 0x20	; 32
    2d28:	c0 83       	st	Z, r28
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_RESET;
    2d2a:	8b e6       	ldi	r24, 0x6B	; 107
    2d2c:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	84 83       	std	Z+4, r24	; 0x04
    2d34:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_RESET;
    2d36:	21 e8       	ldi	r18, 0x81	; 129
    2d38:	20 93 c3 2a 	sts	0x2AC3, r18	; 0x802ac3 <twi1_m_data>
		twi1_packet.length = 1;
    2d3c:	80 87       	std	Z+8, r24	; 0x08
    2d3e:	91 87       	std	Z+9, r25	; 0x09
    2d40:	40 e0       	ldi	r20, 0x00	; 0
    2d42:	bf 01       	movw	r22, r30
    2d44:	80 ea       	ldi	r24, 0xA0	; 160
    2d46:	94 e0       	ldi	r25, 0x04	; 4
    2d48:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    2d4c:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	88 23       	and	r24, r24
    2d5c:	29 f0       	breq	.+10     	; 0x2d68 <twi_start+0x20c>
			printf("TWI-onboard: Gyro MPU-9250   -   'reset 1' bad response\r\n");
    2d5e:	89 ed       	ldi	r24, 0xD9	; 217
    2d60:	92 e2       	ldi	r25, 0x22	; 34
    2d62:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
    2d66:	6d c0       	rjmp	.+218    	; 0x2e42 <twi_start+0x2e6>
			break;
		}

		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    2d68:	ef e1       	ldi	r30, 0x1F	; 31
    2d6a:	f0 e2       	ldi	r31, 0x20	; 32
    2d6c:	8c e0       	ldi	r24, 0x0C	; 12
    2d6e:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_RESET;
    2d70:	8a e0       	ldi	r24, 0x0A	; 10
    2d72:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	84 83       	std	Z+4, r24	; 0x04
    2d7a:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_RESET;
    2d7c:	2f e1       	ldi	r18, 0x1F	; 31
    2d7e:	20 93 c3 2a 	sts	0x2AC3, r18	; 0x802ac3 <twi1_m_data>
		twi1_packet.length = 1;
    2d82:	80 87       	std	Z+8, r24	; 0x08
    2d84:	91 87       	std	Z+9, r25	; 0x09
    2d86:	40 e0       	ldi	r20, 0x00	; 0
    2d88:	bf 01       	movw	r22, r30
    2d8a:	80 ea       	ldi	r24, 0xA0	; 160
    2d8c:	94 e0       	ldi	r25, 0x04	; 4
    2d8e:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    2d92:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    2d94:	88 23       	and	r24, r24
    2d96:	29 f0       	breq	.+10     	; 0x2da2 <twi_start+0x246>
			printf("TWI-onboard: Gyro MPU-9250   -   'reset 2' bad response\r\n");
    2d98:	82 e1       	ldi	r24, 0x12	; 18
    2d9a:	93 e2       	ldi	r25, 0x23	; 35
    2d9c:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
    2da0:	50 c0       	rjmp	.+160    	; 0x2e42 <twi_start+0x2e6>
			break;
		}
		delay_ms(10);
    2da2:	61 e5       	ldi	r22, 0x51	; 81
    2da4:	73 ec       	ldi	r23, 0xC3	; 195
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	9a dc       	rcall	.-1740   	; 0x26e0 <__portable_avr_delay_cycles>

		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    2dac:	ef e1       	ldi	r30, 0x1F	; 31
    2dae:	f0 e2       	ldi	r31, 0x20	; 32
    2db0:	88 e6       	ldi	r24, 0x68	; 104
    2db2:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_WHOAMI;
    2db4:	85 e7       	ldi	r24, 0x75	; 117
    2db6:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	84 83       	std	Z+4, r24	; 0x04
    2dbe:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    2dc0:	80 87       	std	Z+8, r24	; 0x08
    2dc2:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2dc4:	41 e0       	ldi	r20, 0x01	; 1
    2dc6:	bf 01       	movw	r22, r30
    2dc8:	80 ea       	ldi	r24, 0xA0	; 160
    2dca:	94 e0       	ldi	r25, 0x04	; 4
    2dcc:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    2dd0:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    2dd2:	88 23       	and	r24, r24
    2dd4:	29 f0       	breq	.+10     	; 0x2de0 <twi_start+0x284>
			printf("TWI-onboard: Gyro MPU-9250   -   'whoami 1' bad response\r\n");
    2dd6:	8b e4       	ldi	r24, 0x4B	; 75
    2dd8:	93 e2       	ldi	r25, 0x23	; 35
    2dda:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
    2dde:	31 c0       	rjmp	.+98     	; 0x2e42 <twi_start+0x2e6>
			break;
		}
		g_twi1_gyro_1_version = twi1_m_data[0];
    2de0:	80 91 c3 2a 	lds	r24, 0x2AC3	; 0x802ac3 <twi1_m_data>
    2de4:	80 93 70 2b 	sts	0x2B70, r24	; 0x802b70 <g_twi1_gyro_1_version>

		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    2de8:	ef e1       	ldi	r30, 0x1F	; 31
    2dea:	f0 e2       	ldi	r31, 0x20	; 32
    2dec:	8c e0       	ldi	r24, 0x0C	; 12
    2dee:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_DEVICE_ID;
    2df0:	11 82       	std	Z+1, r1	; 0x01
    2df2:	41 e0       	ldi	r20, 0x01	; 1
    2df4:	bf 01       	movw	r22, r30
    2df6:	80 ea       	ldi	r24, 0xA0	; 160
    2df8:	94 e0       	ldi	r25, 0x04	; 4
    2dfa:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    2dfe:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    2e00:	88 23       	and	r24, r24
    2e02:	29 f0       	breq	.+10     	; 0x2e0e <twi_start+0x2b2>
			printf("TWI-onboard: Gyro MPU-9250   -   'device-id 2' bad response\r\n");
    2e04:	85 e8       	ldi	r24, 0x85	; 133
    2e06:	93 e2       	ldi	r25, 0x23	; 35
    2e08:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
    2e0c:	1a c0       	rjmp	.+52     	; 0x2e42 <twi_start+0x2e6>
			break;
		}

		g_twi1_gyro_2_version = twi1_m_data[0];
    2e0e:	80 91 c3 2a 	lds	r24, 0x2AC3	; 0x802ac3 <twi1_m_data>
    2e12:	80 93 6f 2b 	sts	0x2B6F, r24	; 0x802b6f <g_twi1_gyro_2_version>
		g_twi1_gyro_valid = true;
    2e16:	91 e0       	ldi	r25, 0x01	; 1
    2e18:	90 93 71 2b 	sts	0x2B71, r25	; 0x802b71 <g_twi1_gyro_valid>
		printf("TWI-onboard: Gyro MPU-9250 -     version: 0x%02X, 0x%02X\r\n", g_twi1_gyro_1_version, g_twi1_gyro_2_version);
    2e1c:	1f 92       	push	r1
    2e1e:	8f 93       	push	r24
    2e20:	80 91 70 2b 	lds	r24, 0x2B70	; 0x802b70 <g_twi1_gyro_1_version>
    2e24:	1f 92       	push	r1
    2e26:	8f 93       	push	r24
    2e28:	82 ec       	ldi	r24, 0xC2	; 194
    2e2a:	93 e2       	ldi	r25, 0x23	; 35
    2e2c:	9f 93       	push	r25
    2e2e:	8f 93       	push	r24
    2e30:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	10 c0       	rjmp	.+32     	; 0x2e62 <twi_start+0x306>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    2e42:	8c 2f       	mov	r24, r28
    2e44:	0c 2e       	mov	r0, r28
    2e46:	00 0c       	add	r0, r0
    2e48:	99 0b       	sbc	r25, r25
    2e4a:	9f 93       	push	r25
    2e4c:	cf 93       	push	r28
    2e4e:	8b e6       	ldi	r24, 0x6B	; 107
    2e50:	92 e2       	ldi	r25, 0x22	; 34
    2e52:	9f 93       	push	r25
    2e54:	8f 93       	push	r24
    2e56:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0

static void init_twi1_baro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Baro MS560702BA03-50 - I2C address: 0x%02X\r\n", TWI1_SLAVE_BARO_ADDR);
    2e62:	1f 92       	push	r1
    2e64:	c6 e7       	ldi	r28, 0x76	; 118
    2e66:	cf 93       	push	r28
    2e68:	8d ef       	ldi	r24, 0xFD	; 253
    2e6a:	93 e2       	ldi	r25, 0x23	; 35
    2e6c:	9f 93       	push	r25
    2e6e:	8f 93       	push	r24
    2e70:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>

	do {
		twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    2e74:	ef e1       	ldi	r30, 0x1F	; 31
    2e76:	f0 e2       	ldi	r31, 0x20	; 32
    2e78:	c0 83       	st	Z, r28
		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_RESET;
    2e7a:	8e e1       	ldi	r24, 0x1E	; 30
    2e7c:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	84 83       	std	Z+4, r24	; 0x04
    2e84:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    2e86:	10 86       	std	Z+8, r1	; 0x08
    2e88:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2e8a:	40 e0       	ldi	r20, 0x00	; 0
    2e8c:	bf 01       	movw	r22, r30
    2e8e:	80 ea       	ldi	r24, 0xA0	; 160
    2e90:	94 e0       	ldi	r25, 0x04	; 4
    2e92:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    2e96:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	81 11       	cpse	r24, r1
    2ea2:	9d c0       	rjmp	.+314    	; 0x2fde <twi_start+0x482>
			break;
		}
		delay_ms(3);
    2ea4:	68 e9       	ldi	r22, 0x98	; 152
    2ea6:	7a e3       	ldi	r23, 0x3A	; 58
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	19 dc       	rcall	.-1998   	; 0x26e0 <__portable_avr_delay_cycles>

		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_VERSION;
    2eae:	ef e1       	ldi	r30, 0x1F	; 31
    2eb0:	f0 e2       	ldi	r31, 0x20	; 32
    2eb2:	8e ea       	ldi	r24, 0xAE	; 174
    2eb4:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	84 83       	std	Z+4, r24	; 0x04
    2ebc:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 2;
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	80 87       	std	Z+8, r24	; 0x08
    2ec4:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2ec6:	41 e0       	ldi	r20, 0x01	; 1
    2ec8:	bf 01       	movw	r22, r30
    2eca:	80 ea       	ldi	r24, 0xA0	; 160
    2ecc:	94 e0       	ldi	r25, 0x04	; 4
    2ece:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    2ed2:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    2ed4:	88 23       	and	r24, r24
    2ed6:	89 f0       	breq	.+34     	; 0x2efa <twi_start+0x39e>
			printf("TWI-onboard:  BAD reading serial/CRC word. (sc=%d)\r\n", sc);
    2ed8:	8c 2f       	mov	r24, r28
    2eda:	0c 2e       	mov	r0, r28
    2edc:	00 0c       	add	r0, r0
    2ede:	99 0b       	sbc	r25, r25
    2ee0:	9f 93       	push	r25
    2ee2:	cf 93       	push	r28
    2ee4:	89 e3       	ldi	r24, 0x39	; 57
    2ee6:	94 e2       	ldi	r25, 0x24	; 36
    2ee8:	9f 93       	push	r25
    2eea:	8f 93       	push	r24
    2eec:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	72 c0       	rjmp	.+228    	; 0x2fde <twi_start+0x482>
			break;
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
    2efa:	e3 ec       	ldi	r30, 0xC3	; 195
    2efc:	fa e2       	ldi	r31, 0x2A	; 42
    2efe:	80 81       	ld	r24, Z
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	98 2f       	mov	r25, r24
    2f04:	88 27       	eor	r24, r24
    2f06:	21 81       	ldd	r18, Z+1	; 0x01
    2f08:	82 2b       	or	r24, r18
    2f0a:	92 95       	swap	r25
    2f0c:	82 95       	swap	r24
    2f0e:	8f 70       	andi	r24, 0x0F	; 15
    2f10:	89 27       	eor	r24, r25
    2f12:	9f 70       	andi	r25, 0x0F	; 15
    2f14:	89 27       	eor	r24, r25
    2f16:	80 93 6c 2b 	sts	0x2B6C, r24	; 0x802b6c <g_twi1_baro_version>
    2f1a:	90 93 6d 2b 	sts	0x2B6D, r25	; 0x802b6d <g_twi1_baro_version+0x1>
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);
    2f1e:	9f 93       	push	r25
    2f20:	8f 93       	push	r24
    2f22:	8e e6       	ldi	r24, 0x6E	; 110
    2f24:	94 e2       	ldi	r25, 0x24	; 36
    2f26:	9f 93       	push	r25
    2f28:	8f 93       	push	r24
    2f2a:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>
    2f2e:	0f 2e       	mov	r0, r31
    2f30:	fe e5       	ldi	r31, 0x5E	; 94
    2f32:	ef 2e       	mov	r14, r31
    2f34:	fb e2       	ldi	r31, 0x2B	; 43
    2f36:	ff 2e       	mov	r15, r31
    2f38:	f0 2d       	mov	r31, r0
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
    2f42:	88 24       	eor	r8, r8
    2f44:	83 94       	inc	r8
    2f46:	91 2c       	mov	r9, r1
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
    2f48:	cf e1       	ldi	r28, 0x1F	; 31
    2f4a:	d0 e2       	ldi	r29, 0x20	; 32
			twi1_packet.addr_length = 1;
    2f4c:	aa 24       	eor	r10, r10
    2f4e:	a3 94       	inc	r10
    2f50:	b1 2c       	mov	r11, r1
			twi1_packet.length = 2;
    2f52:	68 94       	set
    2f54:	cc 24       	eor	r12, r12
    2f56:	c1 f8       	bld	r12, 1
    2f58:	d1 2c       	mov	r13, r1
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc != STATUS_OK) {
				printf("TWI-onboard:  BAD reading PROM address %d. (sc=%d)\r\n", adr, sc);
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    2f5a:	03 ec       	ldi	r16, 0xC3	; 195
    2f5c:	1a e2       	ldi	r17, 0x2A	; 42
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
    2f5e:	c4 01       	movw	r24, r8
    2f60:	88 0f       	add	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	80 6a       	ori	r24, 0xA0	; 160
    2f66:	89 83       	std	Y+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    2f68:	ac 82       	std	Y+4, r10	; 0x04
    2f6a:	bd 82       	std	Y+5, r11	; 0x05
			twi1_packet.length = 2;
    2f6c:	c8 86       	std	Y+8, r12	; 0x08
    2f6e:	d9 86       	std	Y+9, r13	; 0x09
    2f70:	41 e0       	ldi	r20, 0x01	; 1
    2f72:	be 01       	movw	r22, r28
    2f74:	80 ea       	ldi	r24, 0xA0	; 160
    2f76:	94 e0       	ldi	r25, 0x04	; 4
    2f78:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc != STATUS_OK) {
    2f7c:	88 23       	and	r24, r24
    2f7e:	a9 f0       	breq	.+42     	; 0x2faa <twi_start+0x44e>
				printf("TWI-onboard:  BAD reading PROM address %d. (sc=%d)\r\n", adr, sc);
    2f80:	28 2f       	mov	r18, r24
    2f82:	08 2e       	mov	r0, r24
    2f84:	00 0c       	add	r0, r0
    2f86:	33 0b       	sbc	r19, r19
    2f88:	3f 93       	push	r19
    2f8a:	8f 93       	push	r24
    2f8c:	9f 92       	push	r9
    2f8e:	8f 92       	push	r8
    2f90:	84 ea       	ldi	r24, 0xA4	; 164
    2f92:	94 e2       	ldi	r25, 0x24	; 36
    2f94:	9f 93       	push	r25
    2f96:	8f 93       	push	r24
    2f98:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	12 c0       	rjmp	.+36     	; 0x2fce <twi_start+0x472>
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    2faa:	f8 01       	movw	r30, r16
    2fac:	80 81       	ld	r24, Z
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	98 2f       	mov	r25, r24
    2fb2:	88 27       	eor	r24, r24
    2fb4:	21 81       	ldd	r18, Z+1	; 0x01
    2fb6:	82 2b       	or	r24, r18
    2fb8:	f7 01       	movw	r30, r14
    2fba:	81 93       	st	Z+, r24
    2fbc:	91 93       	st	Z+, r25
    2fbe:	7f 01       	movw	r14, r30
			break;
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
    2fc0:	ff ef       	ldi	r31, 0xFF	; 255
    2fc2:	8f 1a       	sub	r8, r31
    2fc4:	9f 0a       	sbc	r9, r31
    2fc6:	88 e0       	ldi	r24, 0x08	; 8
    2fc8:	88 16       	cp	r8, r24
    2fca:	91 04       	cpc	r9, r1
    2fcc:	41 f6       	brne	.-112    	; 0x2f5e <twi_start+0x402>
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
		}

		g_twi1_baro_valid = true;
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	80 93 6e 2b 	sts	0x2B6E, r24	; 0x802b6e <g_twi1_baro_valid>
		printf("TWI-onboard:  INIT success.\r\n");
    2fd4:	8e e4       	ldi	r24, 0x4E	; 78
    2fd6:	92 e2       	ldi	r25, 0x22	; 34
    2fd8:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
    2fdc:	10 c0       	rjmp	.+32     	; 0x2ffe <twi_start+0x4a2>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    2fde:	8c 2f       	mov	r24, r28
    2fe0:	0c 2e       	mov	r0, r28
    2fe2:	00 0c       	add	r0, r0
    2fe4:	99 0b       	sbc	r25, r25
    2fe6:	9f 93       	push	r25
    2fe8:	cf 93       	push	r28
    2fea:	8b e6       	ldi	r24, 0x6B	; 107
    2fec:	92 e2       	ldi	r25, 0x22	; 34
    2fee:	9f 93       	push	r25
    2ff0:	8f 93       	push	r24
    2ff2:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>
    2ff6:	0f 90       	pop	r0
    2ff8:	0f 90       	pop	r0
    2ffa:	0f 90       	pop	r0
    2ffc:	0f 90       	pop	r0
	init_twi1_gyro();

	/* Device Baro MS560702BA03-50 - I2C address: 0x76 */
	init_twi1_baro();

	printf("-----------\r\n\r\n");
    2ffe:	89 ed       	ldi	r24, 0xD9	; 217
    3000:	94 e2       	ldi	r25, 0x24	; 36
    3002:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
	#endif

	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
    3006:	61 ed       	ldi	r22, 0xD1	; 209
    3008:	72 e1       	ldi	r23, 0x12	; 18
    300a:	83 e1       	ldi	r24, 0x13	; 19
    300c:	90 e0       	ldi	r25, 0x00	; 0

/* TWI2 - LCD Port */
static void start_twi2_lcd(void)
{
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
    300e:	68 db       	rcall	.-2352   	; 0x26e0 <__portable_avr_delay_cycles>
    3010:	eb e0       	ldi	r30, 0x0B	; 11
    3012:	f0 e2       	ldi	r31, 0x20	; 32
    3014:	81 e0       	ldi	r24, 0x01	; 1
	twi2_packet.addr_length = 1;
    3016:	81 83       	std	Z+1, r24	; 0x01
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	84 83       	std	Z+4, r24	; 0x04
	twi2_packet.length = 1;
    301e:	95 83       	std	Z+5, r25	; 0x05
    3020:	80 87       	std	Z+8, r24	; 0x08
    3022:	91 87       	std	Z+9, r25	; 0x09
    3024:	41 e0       	ldi	r20, 0x01	; 1
    3026:	bf 01       	movw	r22, r30
    3028:	80 e8       	ldi	r24, 0x80	; 128
    302a:	94 e0       	ldi	r25, 0x04	; 4
    302c:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
    3030:	80 91 bb 2a 	lds	r24, 0x2ABB	; 0x802abb <twi2_m_data>
    3034:	80 93 41 2b 	sts	0x2B41, r24	; 0x802b41 <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
    3038:	81 31       	cpi	r24, 0x11	; 17
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
    303a:	78 f1       	brcs	.+94     	; 0x309a <twi_start+0x53e>
    303c:	cb e0       	ldi	r28, 0x0B	; 11
    303e:	d0 e2       	ldi	r29, 0x20	; 32
    3040:	82 e0       	ldi	r24, 0x02	; 2
		twi2_m_data[0] = 0x10;
    3042:	89 83       	std	Y+1, r24	; 0x01
    3044:	0f 2e       	mov	r0, r31
    3046:	fb eb       	ldi	r31, 0xBB	; 187
    3048:	ef 2e       	mov	r14, r31
    304a:	fa e2       	ldi	r31, 0x2A	; 42
    304c:	ff 2e       	mov	r15, r31
    304e:	f0 2d       	mov	r31, r0
    3050:	80 e1       	ldi	r24, 0x10	; 16
    3052:	f7 01       	movw	r30, r14
		twi2_packet.length = 1;
    3054:	80 83       	st	Z, r24
    3056:	01 e0       	ldi	r16, 0x01	; 1
    3058:	10 e0       	ldi	r17, 0x00	; 0
    305a:	08 87       	std	Y+8, r16	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    305c:	19 87       	std	Y+9, r17	; 0x09
    305e:	40 e0       	ldi	r20, 0x00	; 0
    3060:	be 01       	movw	r22, r28
    3062:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3064:	94 e0       	ldi	r25, 0x04	; 4
    3066:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    306a:	65 e0       	ldi	r22, 0x05	; 5
    306c:	70 e0       	ldi	r23, 0x00	; 0

		twi2_waitUntilReady();
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
    3072:	36 db       	rcall	.-2452   	; 0x26e0 <__portable_avr_delay_cycles>
    3074:	40 db       	rcall	.-2432   	; 0x26f6 <twi2_waitUntilReady>
		twi2_m_data[0] = GFX_PIXEL_SET;
    3076:	84 e1       	ldi	r24, 0x14	; 20
    3078:	89 83       	std	Y+1, r24	; 0x01
    307a:	81 e0       	ldi	r24, 0x01	; 1
		twi2_packet.length = 1;
    307c:	f7 01       	movw	r30, r14
    307e:	80 83       	st	Z, r24
    3080:	08 87       	std	Y+8, r16	; 0x08
    3082:	19 87       	std	Y+9, r17	; 0x09
    3084:	40 e0       	ldi	r20, 0x00	; 0
    3086:	be 01       	movw	r22, r28
    3088:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    308a:	94 e0       	ldi	r25, 0x04	; 4
    308c:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    3090:	65 e0       	ldi	r22, 0x05	; 5
    3092:	70 e0       	ldi	r23, 0x00	; 0
    3094:	80 e0       	ldi	r24, 0x00	; 0
	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
	start_twi2_lcd();
}
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	23 db       	rcall	.-2490   	; 0x26e0 <__portable_avr_delay_cycles>
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	1f 91       	pop	r17
    30a0:	0f 91       	pop	r16
    30a2:	ff 90       	pop	r15
    30a4:	ef 90       	pop	r14
    30a6:	df 90       	pop	r13
    30a8:	cf 90       	pop	r12
    30aa:	bf 90       	pop	r11
    30ac:	af 90       	pop	r10
    30ae:	9f 90       	pop	r9
    30b0:	8f 90       	pop	r8
    30b2:	08 95       	ret

000030b4 <isr_10ms_twi1_onboard>:
	}
}

/* 10ms TWI1 - Gyro device */
void isr_10ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    30b4:	08 95       	ret

000030b6 <isr_500ms_twi1_onboard>:
	}
}

/* 500ms TWI1 - Baro, Hygro devices */
void isr_500ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    30b6:	cf 92       	push	r12
    30b8:	df 92       	push	r13
    30ba:	ef 92       	push	r14
    30bc:	ff 92       	push	r15
    30be:	6b 01       	movw	r12, r22
    30c0:	7c 01       	movw	r14, r24
	if (g_twi1_hygro_valid) {
    30c2:	80 91 4b 2b 	lds	r24, 0x2B4B	; 0x802b4b <g_twi1_hygro_valid>
    30c6:	88 23       	and	r24, r24
    30c8:	69 f1       	breq	.+90     	; 0x3124 <isr_500ms_twi1_onboard+0x6e>
	if (!sync) {
		return;
	}

	/* Read cyclic measurement data */
	twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    30ca:	ef e1       	ldi	r30, 0x1F	; 31
    30cc:	f0 e2       	ldi	r31, 0x20	; 32
    30ce:	84 e4       	ldi	r24, 0x44	; 68
    30d0:	80 83       	st	Z, r24
	twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_FETCH_DATA_HI;
    30d2:	80 ee       	ldi	r24, 0xE0	; 224
    30d4:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_FETCH_DATA_LO;
    30d6:	12 82       	std	Z+2, r1	; 0x02
	twi1_packet.addr_length = 2;
    30d8:	82 e0       	ldi	r24, 0x02	; 2
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	84 83       	std	Z+4, r24	; 0x04
    30de:	95 83       	std	Z+5, r25	; 0x05
	twi1_packet.length = 5;
    30e0:	85 e0       	ldi	r24, 0x05	; 5
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	80 87       	std	Z+8, r24	; 0x08
    30e6:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    30e8:	41 e0       	ldi	r20, 0x01	; 1
    30ea:	bf 01       	movw	r22, r30
    30ec:	80 ea       	ldi	r24, 0xA0	; 160
    30ee:	94 e0       	ldi	r25, 0x04	; 4
    30f0:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
	status_code_t sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    30f4:	81 11       	cpse	r24, r1
    30f6:	16 c0       	rjmp	.+44     	; 0x3124 <isr_500ms_twi1_onboard+0x6e>
		g_twi1_hygro_S_T	= ((uint16_t)twi1_m_data[0] << 8) | twi1_m_data[1];
    30f8:	e3 ec       	ldi	r30, 0xC3	; 195
    30fa:	fa e2       	ldi	r31, 0x2A	; 42
    30fc:	80 81       	ld	r24, Z
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	98 2f       	mov	r25, r24
    3102:	88 27       	eor	r24, r24
    3104:	21 81       	ldd	r18, Z+1	; 0x01
    3106:	82 2b       	or	r24, r18
    3108:	80 93 48 2b 	sts	0x2B48, r24	; 0x802b48 <g_twi1_hygro_S_T>
    310c:	90 93 49 2b 	sts	0x2B49, r25	; 0x802b49 <g_twi1_hygro_S_T+0x1>
		g_twi1_hygro_S_RH	= ((uint16_t)twi1_m_data[3] << 8) | twi1_m_data[4];
    3110:	83 81       	ldd	r24, Z+3	; 0x03
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	98 2f       	mov	r25, r24
    3116:	88 27       	eor	r24, r24
    3118:	24 81       	ldd	r18, Z+4	; 0x04
    311a:	82 2b       	or	r24, r18
    311c:	80 93 46 2b 	sts	0x2B46, r24	; 0x802b46 <g_twi1_hygro_S_RH>
    3120:	90 93 47 2b 	sts	0x2B47, r25	; 0x802b47 <g_twi1_hygro_S_RH+0x1>
{	/* Service time slot */
	if (g_twi1_hygro_valid) {
		isr_twi1_hygro(now, true);
	}

	if (g_twi1_baro_valid) {
    3124:	80 91 6e 2b 	lds	r24, 0x2B6E	; 0x802b6e <g_twi1_baro_valid>
    3128:	88 23       	and	r24, r24
    312a:	21 f0       	breq	.+8      	; 0x3134 <isr_500ms_twi1_onboard+0x7e>
		isr_twi1_baro(now, true);
    312c:	41 e0       	ldi	r20, 0x01	; 1
    312e:	c7 01       	movw	r24, r14
    3130:	b6 01       	movw	r22, r12
    3132:	2a db       	rcall	.-2476   	; 0x2788 <isr_twi1_baro>
	}
}
    3134:	ff 90       	pop	r15
    3136:	ef 90       	pop	r14
    3138:	df 90       	pop	r13
    313a:	cf 90       	pop	r12
    313c:	08 95       	ret

0000313e <isr_sparetime_twi1_onboard>:

	if (g_twi1_gyro_valid) {
		isr_twi1_gyro(now, false);
	}

	if (g_twi1_baro_valid) {
    313e:	20 91 6e 2b 	lds	r18, 0x2B6E	; 0x802b6e <g_twi1_baro_valid>
    3142:	22 23       	and	r18, r18
    3144:	11 f0       	breq	.+4      	; 0x314a <isr_sparetime_twi1_onboard+0xc>
		isr_twi1_baro(now, false);
    3146:	40 e0       	ldi	r20, 0x00	; 0
    3148:	1f cb       	rjmp	.-2498   	; 0x2788 <isr_twi1_baro>
    314a:	08 95       	ret

0000314c <task_twi1_onboard>:
	}
}

/* TWI1 - onboard devices */
void task_twi1_onboard(uint32_t now)
{
    314c:	2f 92       	push	r2
    314e:	3f 92       	push	r3
    3150:	4f 92       	push	r4
    3152:	5f 92       	push	r5
    3154:	6f 92       	push	r6
    3156:	7f 92       	push	r7
    3158:	8f 92       	push	r8
    315a:	9f 92       	push	r9
    315c:	af 92       	push	r10
    315e:	bf 92       	push	r11
    3160:	cf 92       	push	r12
    3162:	df 92       	push	r13
    3164:	ef 92       	push	r14
    3166:	ff 92       	push	r15
    3168:	0f 93       	push	r16
    316a:	1f 93       	push	r17
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	aa 97       	sbiw	r28, 0x2a	; 42
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	de bf       	out	0x3e, r29	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    317a:	8f b7       	in	r24, 0x3f	; 63
    317c:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    317e:	f8 94       	cli
	return flags;
    3180:	9e 81       	ldd	r25, Y+6	; 0x06
	irqflags_t flags = cpu_irq_save();
	bool l_twi1_hygro_valid	= g_twi1_hygro_valid;
    3182:	80 91 4b 2b 	lds	r24, 0x2B4B	; 0x802b4b <g_twi1_hygro_valid>
	bool l_twi1_gyro_valid	= g_twi1_gyro_valid;
	bool l_twi1_baro_valid	= g_twi1_baro_valid;
    3186:	10 91 6e 2b 	lds	r17, 0x2B6E	; 0x802b6e <g_twi1_baro_valid>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    318a:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (l_twi1_hygro_valid) {
    318c:	88 23       	and	r24, r24
    318e:	09 f4       	brne	.+2      	; 0x3192 <task_twi1_onboard+0x46>
    3190:	3c c0       	rjmp	.+120    	; 0x320a <task_twi1_onboard+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3192:	8f b7       	in	r24, 0x3f	; 63
    3194:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    3196:	f8 94       	cli
	return flags;
    3198:	8d 81       	ldd	r24, Y+5	; 0x05
{	// Calculations for the presentation layer
	static uint16_t s_twi1_hygro_S_T	= 0UL;
	static uint16_t s_twi1_hygro_S_RH	= 0UL;

	irqflags_t flags = cpu_irq_save();
	uint16_t l_twi1_hygro_S_T	= g_twi1_hygro_S_T;
    319a:	20 91 48 2b 	lds	r18, 0x2B48	; 0x802b48 <g_twi1_hygro_S_T>
    319e:	30 91 49 2b 	lds	r19, 0x2B49	; 0x802b49 <g_twi1_hygro_S_T+0x1>
	uint16_t l_twi1_hygro_S_RH	= g_twi1_hygro_S_RH;
    31a2:	e0 90 46 2b 	lds	r14, 0x2B46	; 0x802b46 <g_twi1_hygro_S_RH>
    31a6:	f0 90 47 2b 	lds	r15, 0x2B47	; 0x802b47 <g_twi1_hygro_S_RH+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    31aa:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	/* Calculate and present Temp value when a different measurement has arrived */
	if (l_twi1_hygro_S_T != s_twi1_hygro_S_T) {
    31ac:	21 15       	cp	r18, r1
    31ae:	31 05       	cpc	r19, r1
    31b0:	a9 f0       	breq	.+42     	; 0x31dc <task_twi1_onboard+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    31b2:	8f b7       	in	r24, 0x3f	; 63
    31b4:	8c 83       	std	Y+4, r24	; 0x04
	cpu_irq_disable();
    31b6:	f8 94       	cli
	return flags;
    31b8:	0c 81       	ldd	r16, Y+4	; 0x04
		int16_t temp_100 = (int16_t)((((int32_t)l_twi1_hygro_S_T  * 17500) / 0xFFFF) - 4500);

		flags = cpu_irq_save();
		g_twi1_hygro_T_100 = temp_100;
    31ba:	ac e5       	ldi	r26, 0x5C	; 92
    31bc:	b4 e4       	ldi	r27, 0x44	; 68
    31be:	0e 94 4c 45 	call	0x8a98	; 0x8a98 <__umulhisi3>
    31c2:	2f ef       	ldi	r18, 0xFF	; 255
    31c4:	3f ef       	ldi	r19, 0xFF	; 255
    31c6:	40 e0       	ldi	r20, 0x00	; 0
    31c8:	50 e0       	ldi	r21, 0x00	; 0
    31ca:	0e 94 28 45 	call	0x8a50	; 0x8a50 <__divmodsi4>
    31ce:	24 59       	subi	r18, 0x94	; 148
    31d0:	31 41       	sbci	r19, 0x11	; 17
    31d2:	20 93 44 2b 	sts	0x2B44, r18	; 0x802b44 <g_twi1_hygro_T_100>
    31d6:	30 93 45 2b 	sts	0x2B45, r19	; 0x802b45 <g_twi1_hygro_T_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    31da:	0f bf       	out	0x3f, r16	; 63
		cpu_irq_restore(flags);
	}

	/* Calculate and present Hygro value when a different measurement has arrived */
	if (l_twi1_hygro_S_RH != s_twi1_hygro_S_RH) {
    31dc:	e1 14       	cp	r14, r1
    31de:	f1 04       	cpc	r15, r1
    31e0:	a1 f0       	breq	.+40     	; 0x320a <task_twi1_onboard+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    31e2:	8f b7       	in	r24, 0x3f	; 63
    31e4:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
    31e6:	f8 94       	cli
	return flags;
    31e8:	0b 81       	ldd	r16, Y+3	; 0x03
		int16_t rh_100 = (int16_t)( ((int32_t)l_twi1_hygro_S_RH * 10000) / 0xFFFF);

		flags = cpu_irq_save();
		g_twi1_hygro_RH_100 = rh_100;
    31ea:	97 01       	movw	r18, r14
    31ec:	a0 e1       	ldi	r26, 0x10	; 16
    31ee:	b7 e2       	ldi	r27, 0x27	; 39
    31f0:	0e 94 4c 45 	call	0x8a98	; 0x8a98 <__umulhisi3>
    31f4:	2f ef       	ldi	r18, 0xFF	; 255
    31f6:	3f ef       	ldi	r19, 0xFF	; 255
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	50 e0       	ldi	r21, 0x00	; 0
    31fc:	0e 94 28 45 	call	0x8a50	; 0x8a50 <__divmodsi4>
    3200:	20 93 42 2b 	sts	0x2B42, r18	; 0x802b42 <g_twi1_hygro_RH_100>
    3204:	30 93 43 2b 	sts	0x2B43, r19	; 0x802b43 <g_twi1_hygro_RH_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3208:	0f bf       	out	0x3f, r16	; 63

	if (l_twi1_gyro_valid) {
		task_twi1_gyro(now);
	}

	if (l_twi1_baro_valid) {
    320a:	11 23       	and	r17, r17
    320c:	09 f4       	brne	.+2      	; 0x3210 <task_twi1_onboard+0xc4>
    320e:	25 c2       	rjmp	.+1098   	; 0x365a <task_twi1_onboard+0x50e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3210:	8f b7       	in	r24, 0x3f	; 63
    3212:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3214:	f8 94       	cli
	return flags;
    3216:	8a 81       	ldd	r24, Y+2	; 0x02
{	// Calculations for the presentation layer
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	irqflags_t flags = cpu_irq_save();
	uint32_t l_twi1_baro_d1 = g_twi1_baro_d1;
    3218:	20 91 58 2b 	lds	r18, 0x2B58	; 0x802b58 <g_twi1_baro_d1>
    321c:	30 91 59 2b 	lds	r19, 0x2B59	; 0x802b59 <g_twi1_baro_d1+0x1>
    3220:	40 91 5a 2b 	lds	r20, 0x2B5A	; 0x802b5a <g_twi1_baro_d1+0x2>
    3224:	50 91 5b 2b 	lds	r21, 0x2B5B	; 0x802b5b <g_twi1_baro_d1+0x3>
    3228:	2b 8f       	std	Y+27, r18	; 0x1b
    322a:	3c 8f       	std	Y+28, r19	; 0x1c
    322c:	4d 8f       	std	Y+29, r20	; 0x1d
    322e:	5e 8f       	std	Y+30, r21	; 0x1e
	uint32_t l_twi1_baro_d2 = g_twi1_baro_d2;
    3230:	40 91 54 2b 	lds	r20, 0x2B54	; 0x802b54 <g_twi1_baro_d2>
    3234:	50 91 55 2b 	lds	r21, 0x2B55	; 0x802b55 <g_twi1_baro_d2+0x1>
    3238:	60 91 56 2b 	lds	r22, 0x2B56	; 0x802b56 <g_twi1_baro_d2+0x2>
    323c:	70 91 57 2b 	lds	r23, 0x2B57	; 0x802b57 <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3240:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	/* Calculate and present Baro and Temp values when a different measurement has arrived */
	if ((l_twi1_baro_d1 != s_twi1_baro_d1) || (l_twi1_baro_d2 != s_twi1_baro_d2)) {
    3242:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3244:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3246:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3248:	be 8d       	ldd	r27, Y+30	; 0x1e
    324a:	89 2b       	or	r24, r25
    324c:	8a 2b       	or	r24, r26
    324e:	8b 2b       	or	r24, r27
    3250:	31 f4       	brne	.+12     	; 0x325e <task_twi1_onboard+0x112>
    3252:	41 15       	cp	r20, r1
    3254:	51 05       	cpc	r21, r1
    3256:	61 05       	cpc	r22, r1
    3258:	71 05       	cpc	r23, r1
    325a:	09 f4       	brne	.+2      	; 0x325e <task_twi1_onboard+0x112>
    325c:	fe c1       	rjmp	.+1020   	; 0x365a <task_twi1_onboard+0x50e>
		int32_t dT = (int32_t)l_twi1_baro_d2 - ((int32_t)g_twi1_baro_c[5] << 8);
    325e:	0f 2e       	mov	r0, r31
    3260:	fc e5       	ldi	r31, 0x5C	; 92
    3262:	2f 2e       	mov	r2, r31
    3264:	fb e2       	ldi	r31, 0x2B	; 43
    3266:	3f 2e       	mov	r3, r31
    3268:	f0 2d       	mov	r31, r0
		int32_t temp_p20 = (int32_t)(((int64_t)dT * g_twi1_baro_c[6]) >> 23);
    326a:	d1 01       	movw	r26, r2
    326c:	1a 96       	adiw	r26, 0x0a	; 10
    326e:	8d 91       	ld	r24, X+
    3270:	9c 91       	ld	r25, X
    3272:	1b 97       	sbiw	r26, 0x0b	; 11
    3274:	a0 e0       	ldi	r26, 0x00	; 0
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	ba 2f       	mov	r27, r26
    327a:	a9 2f       	mov	r26, r25
    327c:	98 2f       	mov	r25, r24
    327e:	88 27       	eor	r24, r24
    3280:	2a 01       	movw	r4, r20
    3282:	3b 01       	movw	r6, r22
    3284:	48 1a       	sub	r4, r24
    3286:	59 0a       	sbc	r5, r25
    3288:	6a 0a       	sbc	r6, r26
    328a:	7b 0a       	sbc	r7, r27
    328c:	a3 01       	movw	r20, r6
    328e:	92 01       	movw	r18, r4
    3290:	55 0f       	add	r21, r21
    3292:	22 0b       	sbc	r18, r18
    3294:	32 2f       	mov	r19, r18
    3296:	a9 01       	movw	r20, r18
    3298:	2f 83       	std	Y+7, r18	; 0x07
    329a:	38 87       	std	Y+8, r19	; 0x08
    329c:	49 87       	std	Y+9, r20	; 0x09
    329e:	5a 87       	std	Y+10, r21	; 0x0a
    32a0:	d1 01       	movw	r26, r2
    32a2:	1c 96       	adiw	r26, 0x0c	; 12
    32a4:	4d 91       	ld	r20, X+
    32a6:	5c 91       	ld	r21, X
    32a8:	1d 97       	sbiw	r26, 0x0d	; 13
    32aa:	a4 2c       	mov	r10, r4
    32ac:	b5 2c       	mov	r11, r5
    32ae:	c6 2c       	mov	r12, r6
    32b0:	d7 2c       	mov	r13, r7
    32b2:	ef 80       	ldd	r14, Y+7	; 0x07
    32b4:	fe 2c       	mov	r15, r14
    32b6:	0e 2d       	mov	r16, r14
    32b8:	1e 2d       	mov	r17, r14
    32ba:	24 2f       	mov	r18, r20
    32bc:	35 2f       	mov	r19, r21
    32be:	40 e0       	ldi	r20, 0x00	; 0
    32c0:	50 e0       	ldi	r21, 0x00	; 0
    32c2:	60 e0       	ldi	r22, 0x00	; 0
    32c4:	70 e0       	ldi	r23, 0x00	; 0
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	0e 94 65 45 	call	0x8aca	; 0x8aca <__muldi3>
    32ce:	07 e1       	ldi	r16, 0x17	; 23
    32d0:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <__ashrdi3>
    32d4:	2f 87       	std	Y+15, r18	; 0x0f
    32d6:	38 8b       	std	Y+16, r19	; 0x10
    32d8:	49 8b       	std	Y+17, r20	; 0x11
    32da:	5a 8b       	std	Y+18, r21	; 0x12
    32dc:	2f 85       	ldd	r18, Y+15	; 0x0f
    32de:	38 89       	ldd	r19, Y+16	; 0x10
    32e0:	49 89       	ldd	r20, Y+17	; 0x11
    32e2:	5a 89       	ldd	r21, Y+18	; 0x12
    32e4:	2f a3       	std	Y+39, r18	; 0x27
    32e6:	38 a7       	std	Y+40, r19	; 0x28
    32e8:	49 a7       	std	Y+41, r20	; 0x29
    32ea:	5a a7       	std	Y+42, r21	; 0x2a
		int32_t temp = temp_p20 + 2000L;
    32ec:	ba 01       	movw	r22, r20
    32ee:	a9 01       	movw	r20, r18
    32f0:	40 53       	subi	r20, 0x30	; 48
    32f2:	58 4f       	sbci	r21, 0xF8	; 248
    32f4:	6f 4f       	sbci	r22, 0xFF	; 255
    32f6:	7f 4f       	sbci	r23, 0xFF	; 255
    32f8:	4f 8b       	std	Y+23, r20	; 0x17
    32fa:	58 8f       	std	Y+24, r21	; 0x18
    32fc:	69 8f       	std	Y+25, r22	; 0x19
    32fe:	7a 8f       	std	Y+26, r23	; 0x1a
		int64_t off  = ((int64_t)g_twi1_baro_c[2] << 17) + (((int64_t)g_twi1_baro_c[4] * dT) >> 6);
    3300:	d1 01       	movw	r26, r2
    3302:	18 96       	adiw	r26, 0x08	; 8
    3304:	4d 91       	ld	r20, X+
    3306:	5c 91       	ld	r21, X
    3308:	19 97       	sbiw	r26, 0x09	; 9
    330a:	fe 2c       	mov	r15, r14
    330c:	0e 2d       	mov	r16, r14
    330e:	24 2f       	mov	r18, r20
    3310:	35 2f       	mov	r19, r21
    3312:	40 e0       	ldi	r20, 0x00	; 0
    3314:	50 e0       	ldi	r21, 0x00	; 0
    3316:	60 e0       	ldi	r22, 0x00	; 0
    3318:	70 e0       	ldi	r23, 0x00	; 0
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	0e 94 65 45 	call	0x8aca	; 0x8aca <__muldi3>
    3322:	06 e0       	ldi	r16, 0x06	; 6
    3324:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <__ashrdi3>
    3328:	2b 8b       	std	Y+19, r18	; 0x13
    332a:	3c 8b       	std	Y+20, r19	; 0x14
    332c:	84 2e       	mov	r8, r20
    332e:	95 2e       	mov	r9, r21
    3330:	b6 2f       	mov	r27, r22
    3332:	a7 2f       	mov	r26, r23
    3334:	8d 8b       	std	Y+21, r24	; 0x15
    3336:	9e 8b       	std	Y+22, r25	; 0x16
    3338:	f1 01       	movw	r30, r2
    333a:	a4 80       	ldd	r10, Z+4	; 0x04
    333c:	b5 80       	ldd	r11, Z+5	; 0x05
    333e:	2a 2d       	mov	r18, r10
    3340:	3b 2d       	mov	r19, r11
    3342:	40 e0       	ldi	r20, 0x00	; 0
    3344:	50 e0       	ldi	r21, 0x00	; 0
    3346:	60 e0       	ldi	r22, 0x00	; 0
    3348:	70 e0       	ldi	r23, 0x00	; 0
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	01 e1       	ldi	r16, 0x11	; 17
    3350:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__ashldi3>
    3354:	a2 2e       	mov	r10, r18
    3356:	b3 2e       	mov	r11, r19
    3358:	c4 2e       	mov	r12, r20
    335a:	d5 2e       	mov	r13, r21
    335c:	e6 2e       	mov	r14, r22
    335e:	f7 2e       	mov	r15, r23
    3360:	08 2f       	mov	r16, r24
    3362:	19 2f       	mov	r17, r25
    3364:	2b 89       	ldd	r18, Y+19	; 0x13
    3366:	3c 89       	ldd	r19, Y+20	; 0x14
    3368:	48 2d       	mov	r20, r8
    336a:	59 2d       	mov	r21, r9
    336c:	6b 2f       	mov	r22, r27
    336e:	7a 2f       	mov	r23, r26
    3370:	8d 89       	ldd	r24, Y+21	; 0x15
    3372:	9e 89       	ldd	r25, Y+22	; 0x16
    3374:	0e 94 ed 45 	call	0x8bda	; 0x8bda <__adddi3>
    3378:	2b 8b       	std	Y+19, r18	; 0x13
    337a:	3c 8b       	std	Y+20, r19	; 0x14
    337c:	4f 8f       	std	Y+31, r20	; 0x1f
    337e:	58 a3       	std	Y+32, r21	; 0x20
    3380:	69 a3       	std	Y+33, r22	; 0x21
    3382:	7a a3       	std	Y+34, r23	; 0x22
    3384:	8b a3       	std	Y+35, r24	; 0x23
    3386:	9c a3       	std	Y+36, r25	; 0x24
		int64_t sens = ((int64_t)g_twi1_baro_c[1] << 16) + (((int64_t)g_twi1_baro_c[3] * dT) >> 7);
    3388:	46 81       	ldd	r20, Z+6	; 0x06
    338a:	57 81       	ldd	r21, Z+7	; 0x07
    338c:	a4 2c       	mov	r10, r4
    338e:	b5 2c       	mov	r11, r5
    3390:	c6 2c       	mov	r12, r6
    3392:	d7 2c       	mov	r13, r7
    3394:	ef 80       	ldd	r14, Y+7	; 0x07
    3396:	fe 2c       	mov	r15, r14
    3398:	0e 2d       	mov	r16, r14
    339a:	1e 2d       	mov	r17, r14
    339c:	24 2f       	mov	r18, r20
    339e:	35 2f       	mov	r19, r21
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	50 e0       	ldi	r21, 0x00	; 0
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	70 e0       	ldi	r23, 0x00	; 0
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	0e 94 65 45 	call	0x8aca	; 0x8aca <__muldi3>
    33b0:	07 e0       	ldi	r16, 0x07	; 7
    33b2:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <__ashrdi3>
    33b6:	2d 8b       	std	Y+21, r18	; 0x15
    33b8:	3e 8b       	std	Y+22, r19	; 0x16
    33ba:	84 2e       	mov	r8, r20
    33bc:	95 2e       	mov	r9, r21
    33be:	b6 2f       	mov	r27, r22
    33c0:	a7 2f       	mov	r26, r23
    33c2:	8d a3       	std	Y+37, r24	; 0x25
    33c4:	9e a3       	std	Y+38, r25	; 0x26
    33c6:	f1 01       	movw	r30, r2
    33c8:	a2 80       	ldd	r10, Z+2	; 0x02
    33ca:	b3 80       	ldd	r11, Z+3	; 0x03
    33cc:	2a 2d       	mov	r18, r10
    33ce:	3b 2d       	mov	r19, r11
    33d0:	40 e0       	ldi	r20, 0x00	; 0
    33d2:	50 e0       	ldi	r21, 0x00	; 0
    33d4:	60 e0       	ldi	r22, 0x00	; 0
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	00 e1       	ldi	r16, 0x10	; 16
    33de:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__ashldi3>
    33e2:	a2 2e       	mov	r10, r18
    33e4:	b3 2e       	mov	r11, r19
    33e6:	c4 2e       	mov	r12, r20
    33e8:	d5 2e       	mov	r13, r21
    33ea:	e6 2e       	mov	r14, r22
    33ec:	f7 2e       	mov	r15, r23
    33ee:	08 2f       	mov	r16, r24
    33f0:	19 2f       	mov	r17, r25
    33f2:	2d 89       	ldd	r18, Y+21	; 0x15
    33f4:	3e 89       	ldd	r19, Y+22	; 0x16
    33f6:	48 2d       	mov	r20, r8
    33f8:	59 2d       	mov	r21, r9
    33fa:	6b 2f       	mov	r22, r27
    33fc:	7a 2f       	mov	r23, r26
    33fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3400:	9e a1       	ldd	r25, Y+38	; 0x26
    3402:	0e 94 ed 45 	call	0x8bda	; 0x8bda <__adddi3>
    3406:	32 2e       	mov	r3, r18
    3408:	23 2e       	mov	r2, r19
    340a:	4d 8b       	std	Y+21, r20	; 0x15
    340c:	5e 8b       	std	Y+22, r21	; 0x16
    340e:	6d a3       	std	Y+37, r22	; 0x25
    3410:	7e a3       	std	Y+38, r23	; 0x26
    3412:	98 2e       	mov	r9, r24
    3414:	89 2e       	mov	r8, r25

		/* Low temp and very low temp corrections */
		if (temp < 2000L) {
    3416:	2f 89       	ldd	r18, Y+23	; 0x17
    3418:	38 8d       	ldd	r19, Y+24	; 0x18
    341a:	49 8d       	ldd	r20, Y+25	; 0x19
    341c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    341e:	20 3d       	cpi	r18, 0xD0	; 208
    3420:	37 40       	sbci	r19, 0x07	; 7
    3422:	41 05       	cpc	r20, r1
    3424:	51 05       	cpc	r21, r1
    3426:	0c f0       	brlt	.+2      	; 0x342a <task_twi1_onboard+0x2de>
    3428:	d0 c0       	rjmp	.+416    	; 0x35ca <task_twi1_onboard+0x47e>
			int32_t t2 = (int32_t)(((int64_t)dT * (int64_t)dT) >> 31);
    342a:	a4 2c       	mov	r10, r4
    342c:	b5 2c       	mov	r11, r5
    342e:	c6 2c       	mov	r12, r6
    3430:	d7 2c       	mov	r13, r7
    3432:	ef 80       	ldd	r14, Y+7	; 0x07
    3434:	fe 2c       	mov	r15, r14
    3436:	0e 2d       	mov	r16, r14
    3438:	1e 2d       	mov	r17, r14
    343a:	24 2d       	mov	r18, r4
    343c:	35 2d       	mov	r19, r5
    343e:	46 2d       	mov	r20, r6
    3440:	57 2d       	mov	r21, r7
    3442:	60 2f       	mov	r22, r16
    3444:	70 2f       	mov	r23, r16
    3446:	80 2f       	mov	r24, r16
    3448:	9e 2d       	mov	r25, r14
    344a:	0e 94 65 45 	call	0x8aca	; 0x8aca <__muldi3>
    344e:	0f e1       	ldi	r16, 0x1F	; 31
    3450:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <__ashrdi3>
    3454:	2f 83       	std	Y+7, r18	; 0x07
    3456:	38 87       	std	Y+8, r19	; 0x08
    3458:	49 87       	std	Y+9, r20	; 0x09
    345a:	5a 87       	std	Y+10, r21	; 0x0a
			int32_t temp_p20_2 = temp_p20 * temp_p20;
    345c:	2f 85       	ldd	r18, Y+15	; 0x0f
    345e:	38 89       	ldd	r19, Y+16	; 0x10
    3460:	49 89       	ldd	r20, Y+17	; 0x11
    3462:	5a 89       	ldd	r21, Y+18	; 0x12
    3464:	ca 01       	movw	r24, r20
    3466:	b9 01       	movw	r22, r18
    3468:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <__mulsi3>
    346c:	2b 01       	movw	r4, r22
    346e:	3c 01       	movw	r6, r24
			int32_t off2 = (61 * temp_p20_2) >> 4;
    3470:	ad e3       	ldi	r26, 0x3D	; 61
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	9b 01       	movw	r18, r22
    3476:	ac 01       	movw	r20, r24
    3478:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <__muluhisi3>
    347c:	7b 01       	movw	r14, r22
    347e:	8c 01       	movw	r16, r24
    3480:	68 94       	set
    3482:	13 f8       	bld	r1, 3
    3484:	15 95       	asr	r17
    3486:	07 95       	ror	r16
    3488:	f7 94       	ror	r15
    348a:	e7 94       	ror	r14
    348c:	16 94       	lsr	r1
    348e:	d1 f7       	brne	.-12     	; 0x3484 <task_twi1_onboard+0x338>
			int32_t sens2 = temp_p20_2 << 1;
    3490:	44 0c       	add	r4, r4
    3492:	55 1c       	adc	r5, r5
    3494:	66 1c       	adc	r6, r6
    3496:	77 1c       	adc	r7, r7

			if (temp < -1500L) {
    3498:	8f 89       	ldd	r24, Y+23	; 0x17
    349a:	98 8d       	ldd	r25, Y+24	; 0x18
    349c:	a9 8d       	ldd	r26, Y+25	; 0x19
    349e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    34a0:	84 32       	cpi	r24, 0x24	; 36
    34a2:	9a 4f       	sbci	r25, 0xFA	; 250
    34a4:	af 4f       	sbci	r26, 0xFF	; 255
    34a6:	bf 4f       	sbci	r27, 0xFF	; 255
    34a8:	c4 f5       	brge	.+112    	; 0x351a <task_twi1_onboard+0x3ce>
				int32_t temp_m15 = temp + 1500L;
    34aa:	6f a1       	ldd	r22, Y+39	; 0x27
    34ac:	78 a5       	ldd	r23, Y+40	; 0x28
    34ae:	89 a5       	ldd	r24, Y+41	; 0x29
    34b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34b2:	64 55       	subi	r22, 0x54	; 84
    34b4:	72 4f       	sbci	r23, 0xF2	; 242
    34b6:	8f 4f       	sbci	r24, 0xFF	; 255
    34b8:	9f 4f       	sbci	r25, 0xFF	; 255
				int32_t temp_m15_2 = temp_m15 * temp_m15;
    34ba:	9b 01       	movw	r18, r22
    34bc:	ac 01       	movw	r20, r24
    34be:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <__mulsi3>
				off2  += 15 * temp_m15_2;
    34c2:	9b 01       	movw	r18, r22
    34c4:	ac 01       	movw	r20, r24
    34c6:	22 0f       	add	r18, r18
    34c8:	33 1f       	adc	r19, r19
    34ca:	44 1f       	adc	r20, r20
    34cc:	55 1f       	adc	r21, r21
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	82 0f       	add	r24, r18
    34d4:	93 1f       	adc	r25, r19
    34d6:	a4 1f       	adc	r26, r20
    34d8:	b5 1f       	adc	r27, r21
    34da:	5c 01       	movw	r10, r24
    34dc:	6d 01       	movw	r12, r26
    34de:	aa 0c       	add	r10, r10
    34e0:	bb 1c       	adc	r11, r11
    34e2:	cc 1c       	adc	r12, r12
    34e4:	dd 1c       	adc	r13, r13
    34e6:	aa 0c       	add	r10, r10
    34e8:	bb 1c       	adc	r11, r11
    34ea:	cc 1c       	adc	r12, r12
    34ec:	dd 1c       	adc	r13, r13
    34ee:	8a 0d       	add	r24, r10
    34f0:	9b 1d       	adc	r25, r11
    34f2:	ac 1d       	adc	r26, r12
    34f4:	bd 1d       	adc	r27, r13
    34f6:	e8 0e       	add	r14, r24
    34f8:	f9 1e       	adc	r15, r25
    34fa:	0a 1f       	adc	r16, r26
    34fc:	1b 1f       	adc	r17, r27
				sens2 +=  8 * temp_m15_2;
    34fe:	da 01       	movw	r26, r20
    3500:	c9 01       	movw	r24, r18
    3502:	88 0f       	add	r24, r24
    3504:	99 1f       	adc	r25, r25
    3506:	aa 1f       	adc	r26, r26
    3508:	bb 1f       	adc	r27, r27
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	aa 1f       	adc	r26, r26
    3510:	bb 1f       	adc	r27, r27
    3512:	48 0e       	add	r4, r24
    3514:	59 1e       	adc	r5, r25
    3516:	6a 1e       	adc	r6, r26
    3518:	7b 1e       	adc	r7, r27
			}
			temp -= t2;
    351a:	2f 89       	ldd	r18, Y+23	; 0x17
    351c:	38 8d       	ldd	r19, Y+24	; 0x18
    351e:	49 8d       	ldd	r20, Y+25	; 0x19
    3520:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3522:	6f 81       	ldd	r22, Y+7	; 0x07
    3524:	78 85       	ldd	r23, Y+8	; 0x08
    3526:	89 85       	ldd	r24, Y+9	; 0x09
    3528:	9a 85       	ldd	r25, Y+10	; 0x0a
    352a:	26 1b       	sub	r18, r22
    352c:	37 0b       	sbc	r19, r23
    352e:	48 0b       	sbc	r20, r24
    3530:	59 0b       	sbc	r21, r25
    3532:	2f 8b       	std	Y+23, r18	; 0x17
    3534:	38 8f       	std	Y+24, r19	; 0x18
    3536:	49 8f       	std	Y+25, r20	; 0x19
    3538:	5a 8f       	std	Y+26, r21	; 0x1a
			off  -= off2;
    353a:	d8 01       	movw	r26, r16
    353c:	c7 01       	movw	r24, r14
    353e:	bb 0f       	add	r27, r27
    3540:	88 0b       	sbc	r24, r24
    3542:	98 2f       	mov	r25, r24
    3544:	dc 01       	movw	r26, r24
    3546:	8f 83       	std	Y+7, r24	; 0x07
    3548:	98 87       	std	Y+8, r25	; 0x08
    354a:	a9 87       	std	Y+9, r26	; 0x09
    354c:	ba 87       	std	Y+10, r27	; 0x0a
    354e:	2b 89       	ldd	r18, Y+19	; 0x13
    3550:	3c 89       	ldd	r19, Y+20	; 0x14
    3552:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3554:	58 a1       	ldd	r21, Y+32	; 0x20
    3556:	69 a1       	ldd	r22, Y+33	; 0x21
    3558:	7a a1       	ldd	r23, Y+34	; 0x22
    355a:	8b a1       	ldd	r24, Y+35	; 0x23
    355c:	9c a1       	ldd	r25, Y+36	; 0x24
    355e:	ae 2c       	mov	r10, r14
    3560:	bf 2c       	mov	r11, r15
    3562:	c0 2e       	mov	r12, r16
    3564:	d1 2e       	mov	r13, r17
    3566:	ef 80       	ldd	r14, Y+7	; 0x07
    3568:	fe 2c       	mov	r15, r14
    356a:	0e 2d       	mov	r16, r14
    356c:	1e 2d       	mov	r17, r14
    356e:	0e 94 f6 45 	call	0x8bec	; 0x8bec <__subdi3>
    3572:	2b 8b       	std	Y+19, r18	; 0x13
    3574:	3c 8b       	std	Y+20, r19	; 0x14
    3576:	4f 8f       	std	Y+31, r20	; 0x1f
    3578:	58 a3       	std	Y+32, r21	; 0x20
    357a:	69 a3       	std	Y+33, r22	; 0x21
    357c:	7a a3       	std	Y+34, r23	; 0x22
    357e:	8b a3       	std	Y+35, r24	; 0x23
    3580:	9c a3       	std	Y+36, r25	; 0x24
			sens -= sens2;
    3582:	a3 01       	movw	r20, r6
    3584:	92 01       	movw	r18, r4
    3586:	55 0f       	add	r21, r21
    3588:	22 0b       	sbc	r18, r18
    358a:	32 2f       	mov	r19, r18
    358c:	a9 01       	movw	r20, r18
    358e:	2f 83       	std	Y+7, r18	; 0x07
    3590:	38 87       	std	Y+8, r19	; 0x08
    3592:	49 87       	std	Y+9, r20	; 0x09
    3594:	5a 87       	std	Y+10, r21	; 0x0a
    3596:	23 2d       	mov	r18, r3
    3598:	32 2d       	mov	r19, r2
    359a:	4d 89       	ldd	r20, Y+21	; 0x15
    359c:	5e 89       	ldd	r21, Y+22	; 0x16
    359e:	6d a1       	ldd	r22, Y+37	; 0x25
    35a0:	7e a1       	ldd	r23, Y+38	; 0x26
    35a2:	89 2d       	mov	r24, r9
    35a4:	98 2d       	mov	r25, r8
    35a6:	a4 2c       	mov	r10, r4
    35a8:	b5 2c       	mov	r11, r5
    35aa:	c6 2c       	mov	r12, r6
    35ac:	d7 2c       	mov	r13, r7
    35ae:	ef 80       	ldd	r14, Y+7	; 0x07
    35b0:	fe 2c       	mov	r15, r14
    35b2:	0e 2d       	mov	r16, r14
    35b4:	1e 2d       	mov	r17, r14
    35b6:	0e 94 f6 45 	call	0x8bec	; 0x8bec <__subdi3>
    35ba:	32 2e       	mov	r3, r18
    35bc:	23 2e       	mov	r2, r19
    35be:	4d 8b       	std	Y+21, r20	; 0x15
    35c0:	5e 8b       	std	Y+22, r21	; 0x16
    35c2:	6d a3       	std	Y+37, r22	; 0x25
    35c4:	7e a3       	std	Y+38, r23	; 0x26
    35c6:	98 2e       	mov	r9, r24
    35c8:	89 2e       	mov	r8, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    35ca:	8f b7       	in	r24, 0x3f	; 63
    35cc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    35ce:	f8 94       	cli
	return flags;
    35d0:	79 80       	ldd	r7, Y+1	; 0x01
		}
		int32_t p = (int32_t)((((l_twi1_baro_d1 * sens) >> 21) - off) >> 15);

		flags = cpu_irq_save();
		g_twi1_baro_temp_100 = temp;
    35d2:	4f 89       	ldd	r20, Y+23	; 0x17
    35d4:	58 8d       	ldd	r21, Y+24	; 0x18
    35d6:	69 8d       	ldd	r22, Y+25	; 0x19
    35d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35da:	40 93 50 2b 	sts	0x2B50, r20	; 0x802b50 <g_twi1_baro_temp_100>
    35de:	50 93 51 2b 	sts	0x2B51, r21	; 0x802b51 <g_twi1_baro_temp_100+0x1>
    35e2:	60 93 52 2b 	sts	0x2B52, r22	; 0x802b52 <g_twi1_baro_temp_100+0x2>
    35e6:	70 93 53 2b 	sts	0x2B53, r23	; 0x802b53 <g_twi1_baro_temp_100+0x3>
		g_twi1_baro_p_100    = p;
    35ea:	4b 8d       	ldd	r20, Y+27	; 0x1b
    35ec:	5c 8d       	ldd	r21, Y+28	; 0x1c
    35ee:	6d 8d       	ldd	r22, Y+29	; 0x1d
    35f0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    35f2:	9a 01       	movw	r18, r20
    35f4:	ab 01       	movw	r20, r22
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	70 e0       	ldi	r23, 0x00	; 0
    35fa:	cb 01       	movw	r24, r22
    35fc:	2f 83       	std	Y+7, r18	; 0x07
    35fe:	38 87       	std	Y+8, r19	; 0x08
    3600:	49 87       	std	Y+9, r20	; 0x09
    3602:	5a 87       	std	Y+10, r21	; 0x0a
    3604:	6b 87       	std	Y+11, r22	; 0x0b
    3606:	7c 87       	std	Y+12, r23	; 0x0c
    3608:	8d 87       	std	Y+13, r24	; 0x0d
    360a:	9e 87       	std	Y+14, r25	; 0x0e
    360c:	a3 2c       	mov	r10, r3
    360e:	b2 2c       	mov	r11, r2
    3610:	cd 88       	ldd	r12, Y+21	; 0x15
    3612:	de 88       	ldd	r13, Y+22	; 0x16
    3614:	ed a0       	ldd	r14, Y+37	; 0x25
    3616:	fe a0       	ldd	r15, Y+38	; 0x26
    3618:	09 2d       	mov	r16, r9
    361a:	18 2d       	mov	r17, r8
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	0e 94 65 45 	call	0x8aca	; 0x8aca <__muldi3>
    3628:	05 e1       	ldi	r16, 0x15	; 21
    362a:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <__ashrdi3>
    362e:	ab 88       	ldd	r10, Y+19	; 0x13
    3630:	bc 88       	ldd	r11, Y+20	; 0x14
    3632:	cf 8c       	ldd	r12, Y+31	; 0x1f
    3634:	d8 a0       	ldd	r13, Y+32	; 0x20
    3636:	e9 a0       	ldd	r14, Y+33	; 0x21
    3638:	fa a0       	ldd	r15, Y+34	; 0x22
    363a:	0b a1       	ldd	r16, Y+35	; 0x23
    363c:	1c a1       	ldd	r17, Y+36	; 0x24
    363e:	0e 94 f6 45 	call	0x8bec	; 0x8bec <__subdi3>
    3642:	0f e0       	ldi	r16, 0x0F	; 15
    3644:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <__ashrdi3>
    3648:	20 93 4c 2b 	sts	0x2B4C, r18	; 0x802b4c <g_twi1_baro_p_100>
    364c:	30 93 4d 2b 	sts	0x2B4D, r19	; 0x802b4d <g_twi1_baro_p_100+0x1>
    3650:	40 93 4e 2b 	sts	0x2B4E, r20	; 0x802b4e <g_twi1_baro_p_100+0x2>
    3654:	50 93 4f 2b 	sts	0x2B4F, r21	; 0x802b4f <g_twi1_baro_p_100+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3658:	7f be       	out	0x3f, r7	; 63
	}

	if (l_twi1_baro_valid) {
		task_twi1_baro(now);
	}
}
    365a:	aa 96       	adiw	r28, 0x2a	; 42
    365c:	cd bf       	out	0x3d, r28	; 61
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	df 91       	pop	r29
    3662:	cf 91       	pop	r28
    3664:	1f 91       	pop	r17
    3666:	0f 91       	pop	r16
    3668:	ff 90       	pop	r15
    366a:	ef 90       	pop	r14
    366c:	df 90       	pop	r13
    366e:	cf 90       	pop	r12
    3670:	bf 90       	pop	r11
    3672:	af 90       	pop	r10
    3674:	9f 90       	pop	r9
    3676:	8f 90       	pop	r8
    3678:	7f 90       	pop	r7
    367a:	6f 90       	pop	r6
    367c:	5f 90       	pop	r5
    367e:	4f 90       	pop	r4
    3680:	3f 90       	pop	r3
    3682:	2f 90       	pop	r2
    3684:	08 95       	ret

00003686 <task_twi2_lcd>:
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

/* TWI2 - LCD Port */
void task_twi2_lcd(uint32_t now)
{
    3686:	2f 92       	push	r2
    3688:	3f 92       	push	r3
    368a:	4f 92       	push	r4
    368c:	5f 92       	push	r5
    368e:	6f 92       	push	r6
    3690:	7f 92       	push	r7
    3692:	8f 92       	push	r8
    3694:	9f 92       	push	r9
    3696:	af 92       	push	r10
    3698:	bf 92       	push	r11
    369a:	cf 92       	push	r12
    369c:	df 92       	push	r13
    369e:	ef 92       	push	r14
    36a0:	ff 92       	push	r15
    36a2:	0f 93       	push	r16
    36a4:	1f 93       	push	r17
    36a6:	cf 93       	push	r28
    36a8:	df 93       	push	r29
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    36ae:	2d 97       	sbiw	r28, 0x0d	; 13
    36b0:	cd bf       	out	0x3d, r28	; 61
    36b2:	de bf       	out	0x3e, r29	; 62
	static uint16_t s_lcd_entry_cnt = 0U;
	static uint32_t s_lcd_last = 0UL;

	if (g_twi2_lcd_version >= 0x11) {
    36b4:	20 91 41 2b 	lds	r18, 0x2B41	; 0x802b41 <g_twi2_lcd_version>
    36b8:	21 31       	cpi	r18, 0x11	; 17
    36ba:	08 f4       	brcc	.+2      	; 0x36be <task_twi2_lcd+0x38>
    36bc:	12 c2       	rjmp	.+1060   	; 0x3ae2 <task_twi2_lcd+0x45c>
		//static uint8_t s_ofs = 0;

		/* Show current measurement data on the LCD */
		if (((now - s_lcd_last) >= 1024) || (now < s_lcd_last)) {
    36be:	c0 90 ee 26 	lds	r12, 0x26EE	; 0x8026ee <s_lcd_last.7458>
    36c2:	d0 90 ef 26 	lds	r13, 0x26EF	; 0x8026ef <s_lcd_last.7458+0x1>
    36c6:	e0 90 f0 26 	lds	r14, 0x26F0	; 0x8026f0 <s_lcd_last.7458+0x2>
    36ca:	f0 90 f1 26 	lds	r15, 0x26F1	; 0x8026f1 <s_lcd_last.7458+0x3>
    36ce:	8b 01       	movw	r16, r22
    36d0:	9c 01       	movw	r18, r24
    36d2:	0c 19       	sub	r16, r12
    36d4:	1d 09       	sbc	r17, r13
    36d6:	2e 09       	sbc	r18, r14
    36d8:	3f 09       	sbc	r19, r15
    36da:	01 15       	cp	r16, r1
    36dc:	14 40       	sbci	r17, 0x04	; 4
    36de:	21 05       	cpc	r18, r1
    36e0:	31 05       	cpc	r19, r1
    36e2:	30 f4       	brcc	.+12     	; 0x36f0 <task_twi2_lcd+0x6a>
    36e4:	6c 15       	cp	r22, r12
    36e6:	7d 05       	cpc	r23, r13
    36e8:	8e 05       	cpc	r24, r14
    36ea:	9f 05       	cpc	r25, r15
    36ec:	08 f0       	brcs	.+2      	; 0x36f0 <task_twi2_lcd+0x6a>
    36ee:	18 c2       	rjmp	.+1072   	; 0x3b20 <task_twi2_lcd+0x49a>
			const uint8_t col_left = 6 * 10;
			uint8_t line = 2;

			s_lcd_last = now;
    36f0:	60 93 ee 26 	sts	0x26EE, r22	; 0x8026ee <s_lcd_last.7458>
    36f4:	70 93 ef 26 	sts	0x26EF, r23	; 0x8026ef <s_lcd_last.7458+0x1>
    36f8:	80 93 f0 26 	sts	0x26F0, r24	; 0x8026f0 <s_lcd_last.7458+0x2>
    36fc:	90 93 f1 26 	sts	0x26F1, r25	; 0x8026f1 <s_lcd_last.7458+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3700:	8f b7       	in	r24, 0x3f	; 63
    3702:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3704:	f8 94       	cli
	return flags;
    3706:	89 81       	ldd	r24, Y+1	; 0x01

			/* Get up-to-date global data */
			irqflags_t flags = cpu_irq_save();
			int16_t l_adc_vctcxo_volt_1000	= g_adc_vctcxo_volt_1000;
    3708:	c0 90 d7 2a 	lds	r12, 0x2AD7	; 0x802ad7 <g_adc_vctcxo_volt_1000>
    370c:	d0 90 d8 2a 	lds	r13, 0x2AD8	; 0x802ad8 <g_adc_vctcxo_volt_1000+0x1>
			int16_t l_adc_5v0_volt_1000		= g_adc_5v0_volt_1000;
    3710:	60 90 d5 2a 	lds	r6, 0x2AD5	; 0x802ad5 <g_adc_5v0_volt_1000>
    3714:	70 90 d6 2a 	lds	r7, 0x2AD6	; 0x802ad6 <g_adc_5v0_volt_1000+0x1>
			int16_t l_adc_vbat_volt_1000	= g_adc_vbat_volt_1000;
    3718:	40 90 d3 2a 	lds	r4, 0x2AD3	; 0x802ad3 <g_adc_vbat_volt_1000>
    371c:	50 90 d4 2a 	lds	r5, 0x2AD4	; 0x802ad4 <g_adc_vbat_volt_1000+0x1>
			int16_t l_adc_temp_deg_100		= g_adc_temp_deg_100;
    3720:	e0 90 cb 2a 	lds	r14, 0x2ACB	; 0x802acb <g_adc_temp_deg_100>
    3724:	f0 90 cc 2a 	lds	r15, 0x2ACC	; 0x802acc <g_adc_temp_deg_100+0x1>
			int16_t l_adc_io_adc4_volt_1000	= g_adc_io_adc4_volt_1000;
    3728:	80 90 d1 2a 	lds	r8, 0x2AD1	; 0x802ad1 <g_adc_io_adc4_volt_1000>
    372c:	90 90 d2 2a 	lds	r9, 0x2AD2	; 0x802ad2 <g_adc_io_adc4_volt_1000+0x1>
			int16_t l_adc_io_adc5_volt_1000	= g_adc_io_adc5_volt_1000;
    3730:	20 90 cf 2a 	lds	r2, 0x2ACF	; 0x802acf <g_adc_io_adc5_volt_1000>
    3734:	30 90 d0 2a 	lds	r3, 0x2AD0	; 0x802ad0 <g_adc_io_adc5_volt_1000+0x1>
			//int16_t l_adc_silence_volt_1000	= g_adc_silence_volt_1000;
			int32_t l_twi1_baro_temp_100	= g_twi1_baro_temp_100;
    3738:	20 91 50 2b 	lds	r18, 0x2B50	; 0x802b50 <g_twi1_baro_temp_100>
    373c:	30 91 51 2b 	lds	r19, 0x2B51	; 0x802b51 <g_twi1_baro_temp_100+0x1>
    3740:	40 91 52 2b 	lds	r20, 0x2B52	; 0x802b52 <g_twi1_baro_temp_100+0x2>
    3744:	50 91 53 2b 	lds	r21, 0x2B53	; 0x802b53 <g_twi1_baro_temp_100+0x3>
    3748:	2a 83       	std	Y+2, r18	; 0x02
    374a:	3b 83       	std	Y+3, r19	; 0x03
    374c:	4c 83       	std	Y+4, r20	; 0x04
    374e:	5d 83       	std	Y+5, r21	; 0x05
			int32_t l_twi1_baro_p_100		= g_twi1_baro_p_100;
    3750:	20 91 4c 2b 	lds	r18, 0x2B4C	; 0x802b4c <g_twi1_baro_p_100>
    3754:	30 91 4d 2b 	lds	r19, 0x2B4D	; 0x802b4d <g_twi1_baro_p_100+0x1>
    3758:	40 91 4e 2b 	lds	r20, 0x2B4E	; 0x802b4e <g_twi1_baro_p_100+0x2>
    375c:	50 91 4f 2b 	lds	r21, 0x2B4F	; 0x802b4f <g_twi1_baro_p_100+0x3>
    3760:	2e 83       	std	Y+6, r18	; 0x06
    3762:	3f 83       	std	Y+7, r19	; 0x07
    3764:	48 87       	std	Y+8, r20	; 0x08
    3766:	59 87       	std	Y+9, r21	; 0x09
			int16_t l_twi1_hygro_T_100		= g_twi1_hygro_T_100;
    3768:	40 91 44 2b 	lds	r20, 0x2B44	; 0x802b44 <g_twi1_hygro_T_100>
    376c:	50 91 45 2b 	lds	r21, 0x2B45	; 0x802b45 <g_twi1_hygro_T_100+0x1>
    3770:	4a 87       	std	Y+10, r20	; 0x0a
    3772:	5b 87       	std	Y+11, r21	; 0x0b
			int16_t l_twi1_hygro_RH_100		= g_twi1_hygro_RH_100;
    3774:	e0 91 42 2b 	lds	r30, 0x2B42	; 0x802b42 <g_twi1_hygro_RH_100>
    3778:	f0 91 43 2b 	lds	r31, 0x2B43	; 0x802b43 <g_twi1_hygro_RH_100+0x1>
    377c:	ec 87       	std	Y+12, r30	; 0x0c
    377e:	fd 87       	std	Y+13, r31	; 0x0d
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3780:	8f bf       	out	0x3f, r24	; 63
			cpu_irq_restore(flags);

			/* Repaint all items when starting and at some interval */
			if (!(s_lcd_entry_cnt++)) {
    3782:	80 91 ec 26 	lds	r24, 0x26EC	; 0x8026ec <__data_end>
    3786:	90 91 ed 26 	lds	r25, 0x26ED	; 0x8026ed <__data_end+0x1>
    378a:	9c 01       	movw	r18, r24
    378c:	2f 5f       	subi	r18, 0xFF	; 255
    378e:	3f 4f       	sbci	r19, 0xFF	; 255
    3790:	20 93 ec 26 	sts	0x26EC, r18	; 0x8026ec <__data_end>
    3794:	30 93 ed 26 	sts	0x26ED, r19	; 0x8026ed <__data_end+0x1>
    3798:	89 2b       	or	r24, r25
    379a:	09 f0       	breq	.+2      	; 0x379e <task_twi2_lcd+0x118>
    379c:	05 c1       	rjmp	.+522    	; 0x39a8 <task_twi2_lcd+0x322>
}


static void task_twi2_lcd_cls(void)
{
	twi2_waitUntilReady();
    379e:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <twi2_waitUntilReady>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
    37a2:	0f 2e       	mov	r0, r31
    37a4:	fb e0       	ldi	r31, 0x0B	; 11
    37a6:	af 2e       	mov	r10, r31
    37a8:	f0 e2       	ldi	r31, 0x20	; 32
    37aa:	bf 2e       	mov	r11, r31
    37ac:	f0 2d       	mov	r31, r0
    37ae:	80 e1       	ldi	r24, 0x10	; 16
    37b0:	f5 01       	movw	r30, r10
    37b2:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.length = 0;
    37b4:	10 86       	std	Z+8, r1	; 0x08
    37b6:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    37b8:	40 e0       	ldi	r20, 0x00	; 0
    37ba:	b5 01       	movw	r22, r10
    37bc:	80 e8       	ldi	r24, 0x80	; 128
    37be:	94 e0       	ldi	r25, 0x04	; 4
    37c0:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    37c4:	65 e0       	ldi	r22, 0x05	; 5
    37c6:	70 e0       	ldi	r23, 0x00	; 0
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__portable_avr_delay_cycles>
{
	uint8_t line;

	/* The header line */
	task_twi2_lcd_cls();
	task_twi2_lcd_str(6 * 10, 2, "FindMeSAT");
    37d0:	48 ee       	ldi	r20, 0xE8	; 232
    37d2:	54 e2       	ldi	r21, 0x24	; 36
    37d4:	62 e0       	ldi	r22, 0x02	; 2
    37d6:	8c e3       	ldi	r24, 0x3C	; 60
    37d8:	cb d8       	rcall	.-3690   	; 0x2970 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 30, 2, "by DF4IAH");
    37da:	42 ef       	ldi	r20, 0xF2	; 242
    37dc:	54 e2       	ldi	r21, 0x24	; 36
    37de:	62 e0       	ldi	r22, 0x02	; 2
    37e0:	84 eb       	ldi	r24, 0xB4	; 180
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_circ(uint8_t x, uint8_t y, uint8_t radius, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    37e2:	c6 d8       	rcall	.-3700   	; 0x2970 <task_twi2_lcd_str>
    37e4:	64 e0       	ldi	r22, 0x04	; 4
    37e6:	89 e0       	ldi	r24, 0x09	; 9

	twi2_waitUntilReady();
    37e8:	a3 d8       	rcall	.-3770   	; 0x2930 <task_twi2_lcd_pos_xy>
    37ea:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC : TWI_SMART_LCD_CMD_DRAW_CIRC;
    37ee:	8a e3       	ldi	r24, 0x3A	; 58
    37f0:	f5 01       	movw	r30, r10
	twi2_m_data[0] = radius;
    37f2:	81 83       	std	Z+1, r24	; 0x01
    37f4:	0b eb       	ldi	r16, 0xBB	; 187
    37f6:	1a e2       	ldi	r17, 0x2A	; 42
    37f8:	83 e0       	ldi	r24, 0x03	; 3
    37fa:	f8 01       	movw	r30, r16
	twi2_packet.length = 1;
    37fc:	80 83       	st	Z, r24
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	f5 01       	movw	r30, r10
    3804:	80 87       	std	Z+8, r24	; 0x08
    3806:	91 87       	std	Z+9, r25	; 0x09
    3808:	40 e0       	ldi	r20, 0x00	; 0
    380a:	b5 01       	movw	r22, r10
    380c:	80 e8       	ldi	r24, 0x80	; 128
    380e:	94 e0       	ldi	r25, 0x04	; 4
    3810:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3814:	65 e0       	ldi	r22, 0x05	; 5
    3816:	70 e0       	ldi	r23, 0x00	; 0
    3818:	80 e0       	ldi	r24, 0x00	; 0
    381a:	90 e0       	ldi	r25, 0x00	; 0
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    381c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__portable_avr_delay_cycles>
    3820:	62 e0       	ldi	r22, 0x02	; 2
    3822:	81 e0       	ldi	r24, 0x01	; 1

	twi2_waitUntilReady();
    3824:	85 d8       	rcall	.-3830   	; 0x2930 <task_twi2_lcd_pos_xy>
    3826:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_RECT : TWI_SMART_LCD_CMD_DRAW_RECT;
    382a:	24 e3       	ldi	r18, 0x34	; 52
    382c:	f5 01       	movw	r30, r10
	twi2_m_data[0] = width;
    382e:	21 83       	std	Z+1, r18	; 0x01
    3830:	26 e0       	ldi	r18, 0x06	; 6
    3832:	f8 01       	movw	r30, r16
	twi2_m_data[1] = height;
    3834:	20 83       	st	Z, r18
    3836:	34 e0       	ldi	r19, 0x04	; 4
	twi2_packet.length = 2;
    3838:	31 83       	std	Z+1, r19	; 0x01
    383a:	22 e0       	ldi	r18, 0x02	; 2
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	f5 01       	movw	r30, r10
    3840:	20 87       	std	Z+8, r18	; 0x08
    3842:	31 87       	std	Z+9, r19	; 0x09
    3844:	40 e0       	ldi	r20, 0x00	; 0
    3846:	b5 01       	movw	r22, r10
    3848:	80 e8       	ldi	r24, 0x80	; 128
    384a:	94 e0       	ldi	r25, 0x04	; 4
    384c:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3850:	65 e0       	ldi	r22, 0x05	; 5
    3852:	70 e0       	ldi	r23, 0x00	; 0
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	90 e0       	ldi	r25, 0x00	; 0
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    3858:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__portable_avr_delay_cycles>
    385c:	62 e0       	ldi	r22, 0x02	; 2
    385e:	8c e0       	ldi	r24, 0x0C	; 12

	twi2_waitUntilReady();
    3860:	67 d8       	rcall	.-3890   	; 0x2930 <task_twi2_lcd_pos_xy>
    3862:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_RECT : TWI_SMART_LCD_CMD_DRAW_RECT;
    3866:	24 e3       	ldi	r18, 0x34	; 52
    3868:	f5 01       	movw	r30, r10
	twi2_m_data[0] = width;
    386a:	21 83       	std	Z+1, r18	; 0x01
    386c:	26 e0       	ldi	r18, 0x06	; 6
    386e:	f8 01       	movw	r30, r16
	twi2_m_data[1] = height;
    3870:	20 83       	st	Z, r18
    3872:	34 e0       	ldi	r19, 0x04	; 4
	twi2_packet.length = 2;
    3874:	31 83       	std	Z+1, r19	; 0x01
    3876:	22 e0       	ldi	r18, 0x02	; 2
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	f5 01       	movw	r30, r10
    387c:	20 87       	std	Z+8, r18	; 0x08
    387e:	31 87       	std	Z+9, r19	; 0x09
    3880:	40 e0       	ldi	r20, 0x00	; 0
    3882:	b5 01       	movw	r22, r10
    3884:	80 e8       	ldi	r24, 0x80	; 128
    3886:	94 e0       	ldi	r25, 0x04	; 4
    3888:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    388c:	65 e0       	ldi	r22, 0x05	; 5
    388e:	70 e0       	ldi	r23, 0x00	; 0
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	90 e0       	ldi	r25, 0x00	; 0
	}
}

static void task_twi2_lcd_line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
	task_twi2_lcd_pos_xy(x1, y1);
    3894:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__portable_avr_delay_cycles>
    3898:	6b e0       	ldi	r22, 0x0B	; 11
    389a:	80 e0       	ldi	r24, 0x00	; 0

	twi2_waitUntilReady();
    389c:	49 d8       	rcall	.-3950   	; 0x2930 <task_twi2_lcd_pos_xy>
    389e:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <twi2_waitUntilReady>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
    38a2:	82 e3       	ldi	r24, 0x32	; 50
    38a4:	f5 01       	movw	r30, r10
	twi2_m_data[0] = x2;
    38a6:	81 83       	std	Z+1, r24	; 0x01
    38a8:	8f ee       	ldi	r24, 0xEF	; 239
    38aa:	f8 01       	movw	r30, r16
	twi2_m_data[1] = y2;
    38ac:	80 83       	st	Z, r24
    38ae:	8b e0       	ldi	r24, 0x0B	; 11
	twi2_packet.length = 2;
    38b0:	81 83       	std	Z+1, r24	; 0x01
    38b2:	22 e0       	ldi	r18, 0x02	; 2
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	f5 01       	movw	r30, r10
    38b8:	20 87       	std	Z+8, r18	; 0x08
    38ba:	31 87       	std	Z+9, r19	; 0x09
    38bc:	40 e0       	ldi	r20, 0x00	; 0
    38be:	b5 01       	movw	r22, r10
    38c0:	80 e8       	ldi	r24, 0x80	; 128
    38c2:	94 e0       	ldi	r25, 0x04	; 4
    38c4:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    38c8:	65 e0       	ldi	r22, 0x05	; 5
    38ca:	70 e0       	ldi	r23, 0x00	; 0
    38cc:	80 e0       	ldi	r24, 0x00	; 0
    38ce:	90 e0       	ldi	r25, 0x00	; 0
	/* Header line separator */
	task_twi2_lcd_line(0, 11, 239, 11);

	/* Left measurement names */
	line = 2;
	task_twi2_lcd_str(6 *  0, (line++) * 10, "mP Temp =");
    38d0:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__portable_avr_delay_cycles>
    38d4:	4c ef       	ldi	r20, 0xFC	; 252
    38d6:	54 e2       	ldi	r21, 0x24	; 36
    38d8:	64 e1       	ldi	r22, 0x14	; 20
	task_twi2_lcd_str(6 *  3, (line++) * 10,    "Vusb =");
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	49 d8       	rcall	.-3950   	; 0x2970 <task_twi2_lcd_str>
    38de:	46 e0       	ldi	r20, 0x06	; 6
    38e0:	55 e2       	ldi	r21, 0x25	; 37
    38e2:	6e e1       	ldi	r22, 0x1E	; 30
	task_twi2_lcd_str(6 *  3, (line++) * 10,    "Vbat =");
    38e4:	82 e1       	ldi	r24, 0x12	; 18
    38e6:	44 d8       	rcall	.-3960   	; 0x2970 <task_twi2_lcd_str>
    38e8:	4d e0       	ldi	r20, 0x0D	; 13
    38ea:	55 e2       	ldi	r21, 0x25	; 37
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vvctcxo =");
    38ec:	68 e2       	ldi	r22, 0x28	; 40
    38ee:	82 e1       	ldi	r24, 0x12	; 18
    38f0:	3f d8       	rcall	.-3970   	; 0x2970 <task_twi2_lcd_str>
    38f2:	44 e1       	ldi	r20, 0x14	; 20
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vioadc4 =");
    38f4:	55 e2       	ldi	r21, 0x25	; 37
    38f6:	62 e3       	ldi	r22, 0x32	; 50
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	3a d8       	rcall	.-3980   	; 0x2970 <task_twi2_lcd_str>
    38fc:	4e e1       	ldi	r20, 0x1E	; 30
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vioadc5 =");
    38fe:	55 e2       	ldi	r21, 0x25	; 37
    3900:	6c e3       	ldi	r22, 0x3C	; 60
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	35 d8       	rcall	.-3990   	; 0x2970 <task_twi2_lcd_str>
    3906:	48 e2       	ldi	r20, 0x28	; 40
	//task_twi2_lcd_str(6 *  0, (line++) * 10, "Vsilen. =");
	line++;

	task_twi2_lcd_str(6 *  0, (line++) * 10, "Ba_Temp =");
    3908:	55 e2       	ldi	r21, 0x25	; 37
    390a:	66 e4       	ldi	r22, 0x46	; 70
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	30 d8       	rcall	.-4000   	; 0x2970 <task_twi2_lcd_str>
    3910:	42 e3       	ldi	r20, 0x32	; 50
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Ba_Pres =");
    3912:	55 e2       	ldi	r21, 0x25	; 37
    3914:	6a e5       	ldi	r22, 0x5A	; 90
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	2b d8       	rcall	.-4010   	; 0x2970 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Hy_Temp =");
    391a:	4c e3       	ldi	r20, 0x3C	; 60
    391c:	55 e2       	ldi	r21, 0x25	; 37
    391e:	64 e6       	ldi	r22, 0x64	; 100
    3920:	80 e0       	ldi	r24, 0x00	; 0
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Hy_RelH =");
    3922:	26 d8       	rcall	.-4020   	; 0x2970 <task_twi2_lcd_str>
    3924:	46 e4       	ldi	r20, 0x46	; 70
    3926:	55 e2       	ldi	r21, 0x25	; 37
    3928:	6e e6       	ldi	r22, 0x6E	; 110
    392a:	80 e0       	ldi	r24, 0x00	; 0

	/* Left measurement units */
	line = 2;
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    392c:	21 d8       	rcall	.-4030   	; 0x2970 <task_twi2_lcd_str>
    392e:	40 e5       	ldi	r20, 0x50	; 80
    3930:	55 e2       	ldi	r21, 0x25	; 37
    3932:	68 e7       	ldi	r22, 0x78	; 120
    3934:	80 e0       	ldi	r24, 0x00	; 0
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    3936:	1c d8       	rcall	.-4040   	; 0x2970 <task_twi2_lcd_str>
    3938:	4a e5       	ldi	r20, 0x5A	; 90
    393a:	55 e2       	ldi	r21, 0x25	; 37
    393c:	64 e1       	ldi	r22, 0x14	; 20
    393e:	80 e6       	ldi	r24, 0x60	; 96
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    3940:	17 d8       	rcall	.-4050   	; 0x2970 <task_twi2_lcd_str>
    3942:	4c e5       	ldi	r20, 0x5C	; 92
    3944:	55 e2       	ldi	r21, 0x25	; 37
    3946:	6e e1       	ldi	r22, 0x1E	; 30
    3948:	80 e6       	ldi	r24, 0x60	; 96
    394a:	12 d8       	rcall	.-4060   	; 0x2970 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    394c:	4c e5       	ldi	r20, 0x5C	; 92
    394e:	55 e2       	ldi	r21, 0x25	; 37
    3950:	68 e2       	ldi	r22, 0x28	; 40
    3952:	80 e6       	ldi	r24, 0x60	; 96
    3954:	0d d8       	rcall	.-4070   	; 0x2970 <task_twi2_lcd_str>
    3956:	4c e5       	ldi	r20, 0x5C	; 92
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    3958:	55 e2       	ldi	r21, 0x25	; 37
    395a:	62 e3       	ldi	r22, 0x32	; 50
    395c:	80 e6       	ldi	r24, 0x60	; 96
    395e:	08 d8       	rcall	.-4080   	; 0x2970 <task_twi2_lcd_str>
    3960:	4c e5       	ldi	r20, 0x5C	; 92
    3962:	55 e2       	ldi	r21, 0x25	; 37
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    3964:	6c e3       	ldi	r22, 0x3C	; 60
    3966:	80 e6       	ldi	r24, 0x60	; 96
    3968:	03 d8       	rcall	.-4090   	; 0x2970 <task_twi2_lcd_str>
    396a:	4c e5       	ldi	r20, 0x5C	; 92
    396c:	55 e2       	ldi	r21, 0x25	; 37
    396e:	66 e4       	ldi	r22, 0x46	; 70
	//task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
	line++;

	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    3970:	80 e6       	ldi	r24, 0x60	; 96
    3972:	0e 94 b8 14 	call	0x2970	; 0x2970 <task_twi2_lcd_str>
    3976:	4a e5       	ldi	r20, 0x5A	; 90
    3978:	55 e2       	ldi	r21, 0x25	; 37
    397a:	6a e5       	ldi	r22, 0x5A	; 90
	task_twi2_lcd_str(6 * 18, (line++) * 10, "hPa");
    397c:	80 e6       	ldi	r24, 0x60	; 96
    397e:	0e 94 b8 14 	call	0x2970	; 0x2970 <task_twi2_lcd_str>
    3982:	4e e5       	ldi	r20, 0x5E	; 94
    3984:	55 e2       	ldi	r21, 0x25	; 37
    3986:	64 e6       	ldi	r22, 0x64	; 100
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    3988:	8c e6       	ldi	r24, 0x6C	; 108
    398a:	0e 94 b8 14 	call	0x2970	; 0x2970 <task_twi2_lcd_str>
    398e:	4a e5       	ldi	r20, 0x5A	; 90
    3990:	55 e2       	ldi	r21, 0x25	; 37
    3992:	6e e6       	ldi	r22, 0x6E	; 110
	task_twi2_lcd_str(6 * 16, (line++) * 10, "%");
    3994:	80 e6       	ldi	r24, 0x60	; 96
    3996:	0e 94 b8 14 	call	0x2970	; 0x2970 <task_twi2_lcd_str>
    399a:	42 e6       	ldi	r20, 0x62	; 98
    399c:	55 e2       	ldi	r21, 0x25	; 37
    399e:	68 e7       	ldi	r22, 0x78	; 120
    39a0:	80 e6       	ldi	r24, 0x60	; 96

			/* Repaint all items when starting and at some interval */
			if (!(s_lcd_entry_cnt++)) {
				task_twi2_lcd_header();
			#if 1
			} else if (s_lcd_entry_cnt >= 120) {
    39a2:	0e 94 b8 14 	call	0x2970	; 0x2970 <task_twi2_lcd_str>
    39a6:	07 c0       	rjmp	.+14     	; 0x39b6 <task_twi2_lcd+0x330>
				s_lcd_entry_cnt = 0;
    39a8:	28 37       	cpi	r18, 0x78	; 120
    39aa:	31 05       	cpc	r19, r1
    39ac:	20 f0       	brcs	.+8      	; 0x39b6 <task_twi2_lcd+0x330>
    39ae:	10 92 ec 26 	sts	0x26EC, r1	; 0x8026ec <__data_end>
			#endif
			}

			/* ADC_TEMP */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_temp_deg_100 / 100,      (l_adc_temp_deg_100 / 10) % 10,  "%02d.%01d");
    39b2:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <__data_end+0x1>
    39b6:	2a e0       	ldi	r18, 0x0A	; 10
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	c7 01       	movw	r24, r14
    39bc:	b9 01       	movw	r22, r18
    39be:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>
    39c2:	cb 01       	movw	r24, r22
    39c4:	b9 01       	movw	r22, r18
    39c6:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>
    39ca:	9c 01       	movw	r18, r24
    39cc:	0f 2e       	mov	r0, r31
    39ce:	f4 e6       	ldi	r31, 0x64	; 100
    39d0:	af 2e       	mov	r10, r31
    39d2:	b1 2c       	mov	r11, r1
    39d4:	f0 2d       	mov	r31, r0
    39d6:	c7 01       	movw	r24, r14
    39d8:	b5 01       	movw	r22, r10
    39da:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>
    39de:	ab 01       	movw	r20, r22
    39e0:	04 e6       	ldi	r16, 0x64	; 100

			/* ADC_5V0 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_5v0_volt_1000 / 1000,     l_adc_5v0_volt_1000 % 1000,     "%1d.%03d");
    39e2:	15 e2       	ldi	r17, 0x25	; 37
    39e4:	64 e1       	ldi	r22, 0x14	; 20
    39e6:	8c e3       	ldi	r24, 0x3C	; 60
    39e8:	72 d8       	rcall	.-3868   	; 0x2ace <task_twi2_lcd_print_format_uint16>
    39ea:	0f 2e       	mov	r0, r31
    39ec:	f8 ee       	ldi	r31, 0xE8	; 232
    39ee:	ef 2e       	mov	r14, r31
    39f0:	f3 e0       	ldi	r31, 0x03	; 3
    39f2:	ff 2e       	mov	r15, r31
    39f4:	f0 2d       	mov	r31, r0
    39f6:	c3 01       	movw	r24, r6
    39f8:	b7 01       	movw	r22, r14
    39fa:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>
    39fe:	ab 01       	movw	r20, r22
    3a00:	0e e6       	ldi	r16, 0x6E	; 110

			/* ADC_VBAT */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_vbat_volt_1000 / 1000,    l_adc_vbat_volt_1000 % 1000,    "%1d.%03d");
    3a02:	15 e2       	ldi	r17, 0x25	; 37
    3a04:	9c 01       	movw	r18, r24
    3a06:	6e e1       	ldi	r22, 0x1E	; 30
    3a08:	8c e3       	ldi	r24, 0x3C	; 60
    3a0a:	61 d8       	rcall	.-3902   	; 0x2ace <task_twi2_lcd_print_format_uint16>
    3a0c:	c2 01       	movw	r24, r4
    3a0e:	b7 01       	movw	r22, r14
    3a10:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>

			/* ADC_VCTCXO */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_vctcxo_volt_1000 / 1000,  l_adc_vctcxo_volt_1000 % 1000,  "%1d.%03d");
    3a14:	ab 01       	movw	r20, r22
    3a16:	9c 01       	movw	r18, r24
    3a18:	68 e2       	ldi	r22, 0x28	; 40
    3a1a:	8c e3       	ldi	r24, 0x3C	; 60
    3a1c:	58 d8       	rcall	.-3920   	; 0x2ace <task_twi2_lcd_print_format_uint16>
    3a1e:	c6 01       	movw	r24, r12
    3a20:	b7 01       	movw	r22, r14
    3a22:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>

			/* ADC_IO_ADC4 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_io_adc4_volt_1000 / 1000, l_adc_io_adc4_volt_1000 % 1000, "%1d.%03d");
    3a26:	ab 01       	movw	r20, r22
    3a28:	9c 01       	movw	r18, r24
    3a2a:	62 e3       	ldi	r22, 0x32	; 50
    3a2c:	8c e3       	ldi	r24, 0x3C	; 60
    3a2e:	4f d8       	rcall	.-3938   	; 0x2ace <task_twi2_lcd_print_format_uint16>
    3a30:	c4 01       	movw	r24, r8
    3a32:	b7 01       	movw	r22, r14
    3a34:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>
    3a38:	ab 01       	movw	r20, r22

			/* ADC_IO_ADC5 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_io_adc5_volt_1000 / 1000, l_adc_io_adc5_volt_1000 % 1000, "%1d.%03d");
    3a3a:	9c 01       	movw	r18, r24
    3a3c:	6c e3       	ldi	r22, 0x3C	; 60
    3a3e:	8c e3       	ldi	r24, 0x3C	; 60
    3a40:	46 d8       	rcall	.-3956   	; 0x2ace <task_twi2_lcd_print_format_uint16>
    3a42:	c1 01       	movw	r24, r2
    3a44:	b7 01       	movw	r22, r14
    3a46:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>
    3a4a:	ab 01       	movw	r20, r22
    3a4c:	9c 01       	movw	r18, r24
			/* ADC_SILENCE */
			//task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_silence_volt_1000 / 1000, l_adc_silence_volt_1000 % 1000, "%1d.%03d");
			line++;

			/* Baro_Temp */
			task_twi2_lcd_print_format_uint32(col_left, (line++) * 10, l_twi1_baro_temp_100 / 100,     l_twi1_baro_temp_100 % 100,     "%02ld.%02ld");
    3a4e:	66 e4       	ldi	r22, 0x46	; 70
    3a50:	8c e3       	ldi	r24, 0x3C	; 60
    3a52:	3d d8       	rcall	.-3974   	; 0x2ace <task_twi2_lcd_print_format_uint16>
    3a54:	0f 2e       	mov	r0, r31
    3a56:	f4 e6       	ldi	r31, 0x64	; 100
    3a58:	4f 2e       	mov	r4, r31
    3a5a:	51 2c       	mov	r5, r1
    3a5c:	61 2c       	mov	r6, r1
    3a5e:	71 2c       	mov	r7, r1
    3a60:	f0 2d       	mov	r31, r0
    3a62:	6a 81       	ldd	r22, Y+2	; 0x02
    3a64:	7b 81       	ldd	r23, Y+3	; 0x03
    3a66:	8c 81       	ldd	r24, Y+4	; 0x04
    3a68:	9d 81       	ldd	r25, Y+5	; 0x05
    3a6a:	a3 01       	movw	r20, r6
    3a6c:	92 01       	movw	r18, r4
    3a6e:	0e 94 28 45 	call	0x8a50	; 0x8a50 <__divmodsi4>
    3a72:	0f 2e       	mov	r0, r31
    3a74:	f7 e7       	ldi	r31, 0x77	; 119
    3a76:	cf 2e       	mov	r12, r31
    3a78:	f5 e2       	ldi	r31, 0x25	; 37
    3a7a:	df 2e       	mov	r13, r31
    3a7c:	f0 2d       	mov	r31, r0
    3a7e:	7b 01       	movw	r14, r22
    3a80:	8c 01       	movw	r16, r24
    3a82:	6a e5       	ldi	r22, 0x5A	; 90

			/* Baro_P */
			task_twi2_lcd_print_format_uint32(col_left, (line++) * 10, l_twi1_baro_p_100 / 100,        l_twi1_baro_p_100 % 100,        "%04ld.%02ld");
    3a84:	8c e3       	ldi	r24, 0x3C	; 60
    3a86:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <task_twi2_lcd_print_format_uint32>
    3a8a:	6e 81       	ldd	r22, Y+6	; 0x06
    3a8c:	7f 81       	ldd	r23, Y+7	; 0x07
    3a8e:	88 85       	ldd	r24, Y+8	; 0x08
    3a90:	99 85       	ldd	r25, Y+9	; 0x09
    3a92:	a3 01       	movw	r20, r6
    3a94:	92 01       	movw	r18, r4
    3a96:	0e 94 28 45 	call	0x8a50	; 0x8a50 <__divmodsi4>
    3a9a:	0f 2e       	mov	r0, r31
    3a9c:	f3 e8       	ldi	r31, 0x83	; 131
    3a9e:	cf 2e       	mov	r12, r31
    3aa0:	f5 e2       	ldi	r31, 0x25	; 37
    3aa2:	df 2e       	mov	r13, r31
    3aa4:	f0 2d       	mov	r31, r0
    3aa6:	7b 01       	movw	r14, r22
    3aa8:	8c 01       	movw	r16, r24

			/* Hygro_Temp */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_twi1_hygro_T_100 / 100,       l_twi1_hygro_T_100 % 100,       "%02d.%02d");
    3aaa:	64 e6       	ldi	r22, 0x64	; 100
    3aac:	8c e3       	ldi	r24, 0x3C	; 60
    3aae:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <task_twi2_lcd_print_format_uint32>
    3ab2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ab4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ab6:	b5 01       	movw	r22, r10
    3ab8:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>
    3abc:	ab 01       	movw	r20, r22
    3abe:	0f e8       	ldi	r16, 0x8F	; 143
    3ac0:	15 e2       	ldi	r17, 0x25	; 37
    3ac2:	9c 01       	movw	r18, r24

			/* Hygro_RH */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_twi1_hygro_RH_100 / 100,      l_twi1_hygro_RH_100 % 100,      "%02d.%02d");
    3ac4:	6e e6       	ldi	r22, 0x6E	; 110
    3ac6:	8c e3       	ldi	r24, 0x3C	; 60
    3ac8:	02 d8       	rcall	.-4092   	; 0x2ace <task_twi2_lcd_print_format_uint16>
    3aca:	8c 85       	ldd	r24, Y+12	; 0x0c
    3acc:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ace:	b5 01       	movw	r22, r10
    3ad0:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>
    3ad4:	ab 01       	movw	r20, r22
    3ad6:	9c 01       	movw	r18, r24
    3ad8:	68 e7       	ldi	r22, 0x78	; 120
    3ada:	8c e3       	ldi	r24, 0x3C	; 60
				task_twi2_lcd_cls();
			}
		}
		#endif

	} else if (g_twi2_lcd_version == 0x10) {
    3adc:	0e 94 67 15 	call	0x2ace	; 0x2ace <task_twi2_lcd_print_format_uint16>
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi2_waitUntilReady();
    3ae0:	1f c0       	rjmp	.+62     	; 0x3b20 <task_twi2_lcd+0x49a>
    3ae2:	20 31       	cpi	r18, 0x10	; 16
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
    3ae4:	e9 f4       	brne	.+58     	; 0x3b20 <task_twi2_lcd+0x49a>
    3ae6:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <twi2_waitUntilReady>
    3aea:	eb e0       	ldi	r30, 0x0B	; 11
		twi2_m_data[0] = 1;
    3aec:	f0 e2       	ldi	r31, 0x20	; 32
    3aee:	84 e8       	ldi	r24, 0x84	; 132
    3af0:	81 83       	std	Z+1, r24	; 0x01
    3af2:	ab eb       	ldi	r26, 0xBB	; 187
		twi2_m_data[1] = 128;
    3af4:	ba e2       	ldi	r27, 0x2A	; 42
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	8c 93       	st	X, r24
		twi2_packet.length = 2;
    3afa:	80 e8       	ldi	r24, 0x80	; 128
    3afc:	11 96       	adiw	r26, 0x01	; 1
    3afe:	8c 93       	st	X, r24
    3b00:	82 e0       	ldi	r24, 0x02	; 2
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	80 87       	std	Z+8, r24	; 0x08
    3b06:	91 87       	std	Z+9, r25	; 0x09
    3b08:	40 e0       	ldi	r20, 0x00	; 0
    3b0a:	bf 01       	movw	r22, r30
    3b0c:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
    3b0e:	94 e0       	ldi	r25, 0x04	; 4
    3b10:	0e 94 dd 29 	call	0x53ba	; 0x53ba <twi_master_transfer>
    3b14:	69 e8       	ldi	r22, 0x89	; 137
    3b16:	73 e1       	ldi	r23, 0x13	; 19
    3b18:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__portable_avr_delay_cycles>
    3b20:	2d 96       	adiw	r28, 0x0d	; 13
    3b22:	cd bf       	out	0x3d, r28	; 61
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	1f 91       	pop	r17
    3b2c:	0f 91       	pop	r16
    3b2e:	ff 90       	pop	r15
    3b30:	ef 90       	pop	r14
    3b32:	df 90       	pop	r13
    3b34:	cf 90       	pop	r12
    3b36:	bf 90       	pop	r11
    3b38:	af 90       	pop	r10
    3b3a:	9f 90       	pop	r9
    3b3c:	8f 90       	pop	r8
    3b3e:	7f 90       	pop	r7
    3b40:	6f 90       	pop	r6
    3b42:	5f 90       	pop	r5
    3b44:	4f 90       	pop	r4
    3b46:	3f 90       	pop	r3
    3b48:	2f 90       	pop	r2
    3b4a:	08 95       	ret

00003b4c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    3b4c:	08 95       	ret

00003b4e <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    3b4e:	cf 93       	push	r28
    3b50:	df 93       	push	r29
    3b52:	1f 92       	push	r1
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b58:	2f b7       	in	r18, 0x3f	; 63
    3b5a:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    3b5c:	f8 94       	cli
	return flags;
    3b5e:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    3b60:	28 2f       	mov	r18, r24
    3b62:	39 2f       	mov	r19, r25
    3b64:	21 15       	cp	r18, r1
    3b66:	82 e0       	ldi	r24, 0x02	; 2
    3b68:	38 07       	cpc	r19, r24
    3b6a:	29 f4       	brne	.+10     	; 0x3b76 <adc_set_callback+0x28>
		adca_callback = callback;
    3b6c:	60 93 bd 2c 	sts	0x2CBD, r22	; 0x802cbd <adca_callback>
    3b70:	70 93 be 2c 	sts	0x2CBE, r23	; 0x802cbe <adca_callback+0x1>
    3b74:	07 c0       	rjmp	.+14     	; 0x3b84 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    3b76:	20 34       	cpi	r18, 0x40	; 64
    3b78:	32 40       	sbci	r19, 0x02	; 2
    3b7a:	21 f4       	brne	.+8      	; 0x3b84 <adc_set_callback+0x36>
		adcb_callback = callback;
    3b7c:	60 93 bb 2c 	sts	0x2CBB, r22	; 0x802cbb <adcb_callback>
    3b80:	70 93 bc 2c 	sts	0x2CBC, r23	; 0x802cbc <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b84:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    3b86:	0f 90       	pop	r0
    3b88:	df 91       	pop	r29
    3b8a:	cf 91       	pop	r28
    3b8c:	08 95       	ret

00003b8e <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    3b8e:	81 15       	cp	r24, r1
    3b90:	22 e0       	ldi	r18, 0x02	; 2
    3b92:	92 07       	cpc	r25, r18
    3b94:	69 f4       	brne	.+26     	; 0x3bb0 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    3b96:	80 91 fb 26 	lds	r24, 0x26FB	; 0x8026fb <adca_enable_count>
    3b9a:	91 e0       	ldi	r25, 0x01	; 1
    3b9c:	98 0f       	add	r25, r24
    3b9e:	90 93 fb 26 	sts	0x26FB, r25	; 0x8026fb <adca_enable_count>
    3ba2:	81 11       	cpse	r24, r1
    3ba4:	14 c0       	rjmp	.+40     	; 0x3bce <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3ba6:	62 e0       	ldi	r22, 0x02	; 2
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	0c 94 b7 3c 	jmp	0x796e	; 0x796e <sysclk_enable_module>
    3bae:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    3bb0:	80 34       	cpi	r24, 0x40	; 64
    3bb2:	92 40       	sbci	r25, 0x02	; 2
    3bb4:	61 f4       	brne	.+24     	; 0x3bce <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    3bb6:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <adcb_enable_count>
    3bba:	91 e0       	ldi	r25, 0x01	; 1
    3bbc:	98 0f       	add	r25, r24
    3bbe:	90 93 fa 26 	sts	0x26FA, r25	; 0x8026fa <adcb_enable_count>
    3bc2:	81 11       	cpse	r24, r1
    3bc4:	04 c0       	rjmp	.+8      	; 0x3bce <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    3bc6:	62 e0       	ldi	r22, 0x02	; 2
    3bc8:	82 e0       	ldi	r24, 0x02	; 2
    3bca:	0c 94 b7 3c 	jmp	0x796e	; 0x796e <sysclk_enable_module>
    3bce:	08 95       	ret

00003bd0 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    3bd0:	81 15       	cp	r24, r1
    3bd2:	22 e0       	ldi	r18, 0x02	; 2
    3bd4:	92 07       	cpc	r25, r18
    3bd6:	61 f4       	brne	.+24     	; 0x3bf0 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    3bd8:	80 91 fb 26 	lds	r24, 0x26FB	; 0x8026fb <adca_enable_count>
    3bdc:	81 50       	subi	r24, 0x01	; 1
    3bde:	80 93 fb 26 	sts	0x26FB, r24	; 0x8026fb <adca_enable_count>
    3be2:	81 11       	cpse	r24, r1
    3be4:	13 c0       	rjmp	.+38     	; 0x3c0c <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3be6:	62 e0       	ldi	r22, 0x02	; 2
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <sysclk_disable_module>
    3bee:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    3bf0:	80 34       	cpi	r24, 0x40	; 64
    3bf2:	92 40       	sbci	r25, 0x02	; 2
    3bf4:	59 f4       	brne	.+22     	; 0x3c0c <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    3bf6:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <adcb_enable_count>
    3bfa:	81 50       	subi	r24, 0x01	; 1
    3bfc:	80 93 fa 26 	sts	0x26FA, r24	; 0x8026fa <adcb_enable_count>
    3c00:	81 11       	cpse	r24, r1
    3c02:	04 c0       	rjmp	.+8      	; 0x3c0c <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    3c04:	62 e0       	ldi	r22, 0x02	; 2
    3c06:	82 e0       	ldi	r24, 0x02	; 2
    3c08:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <sysclk_disable_module>
    3c0c:	08 95       	ret

00003c0e <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    3c0e:	ef 92       	push	r14
    3c10:	ff 92       	push	r15
    3c12:	1f 93       	push	r17
    3c14:	cf 93       	push	r28
    3c16:	df 93       	push	r29
    3c18:	1f 92       	push	r1
    3c1a:	1f 92       	push	r1
    3c1c:	cd b7       	in	r28, 0x3d	; 61
    3c1e:	de b7       	in	r29, 0x3e	; 62
    3c20:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c22:	8f b7       	in	r24, 0x3f	; 63
    3c24:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3c26:	f8 94       	cli
	return flags;
    3c28:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    3c2a:	c7 01       	movw	r24, r14
    3c2c:	b0 df       	rcall	.-160    	; 0x3b8e <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    3c2e:	f7 01       	movw	r30, r14
    3c30:	80 81       	ld	r24, Z
    3c32:	81 60       	ori	r24, 0x01	; 1
    3c34:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c36:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    3c38:	80 91 d0 2c 	lds	r24, 0x2CD0	; 0x802cd0 <sleepmgr_locks+0x1>
    3c3c:	8f 3f       	cpi	r24, 0xFF	; 255
    3c3e:	09 f4       	brne	.+2      	; 0x3c42 <adc_enable+0x34>
    3c40:	ff cf       	rjmp	.-2      	; 0x3c40 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c42:	8f b7       	in	r24, 0x3f	; 63
    3c44:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3c46:	f8 94       	cli
	return flags;
    3c48:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    3c4a:	ef ec       	ldi	r30, 0xCF	; 207
    3c4c:	fc e2       	ldi	r31, 0x2C	; 44
    3c4e:	81 81       	ldd	r24, Z+1	; 0x01
    3c50:	8f 5f       	subi	r24, 0xFF	; 255
    3c52:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c54:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	df 91       	pop	r29
    3c5c:	cf 91       	pop	r28
    3c5e:	1f 91       	pop	r17
    3c60:	ff 90       	pop	r15
    3c62:	ef 90       	pop	r14
    3c64:	08 95       	ret

00003c66 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    3c66:	1f 92       	push	r1
    3c68:	0f 92       	push	r0
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	0f 92       	push	r0
    3c6e:	11 24       	eor	r1, r1
    3c70:	0b b6       	in	r0, 0x3b	; 59
    3c72:	0f 92       	push	r0
    3c74:	2f 93       	push	r18
    3c76:	3f 93       	push	r19
    3c78:	4f 93       	push	r20
    3c7a:	5f 93       	push	r21
    3c7c:	6f 93       	push	r22
    3c7e:	7f 93       	push	r23
    3c80:	8f 93       	push	r24
    3c82:	9f 93       	push	r25
    3c84:	af 93       	push	r26
    3c86:	bf 93       	push	r27
    3c88:	ef 93       	push	r30
    3c8a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    3c8c:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    3c90:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    3c94:	e0 91 bd 2c 	lds	r30, 0x2CBD	; 0x802cbd <adca_callback>
    3c98:	f0 91 be 2c 	lds	r31, 0x2CBE	; 0x802cbe <adca_callback+0x1>
    3c9c:	61 e0       	ldi	r22, 0x01	; 1
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	92 e0       	ldi	r25, 0x02	; 2
    3ca2:	19 95       	eicall
}
    3ca4:	ff 91       	pop	r31
    3ca6:	ef 91       	pop	r30
    3ca8:	bf 91       	pop	r27
    3caa:	af 91       	pop	r26
    3cac:	9f 91       	pop	r25
    3cae:	8f 91       	pop	r24
    3cb0:	7f 91       	pop	r23
    3cb2:	6f 91       	pop	r22
    3cb4:	5f 91       	pop	r21
    3cb6:	4f 91       	pop	r20
    3cb8:	3f 91       	pop	r19
    3cba:	2f 91       	pop	r18
    3cbc:	0f 90       	pop	r0
    3cbe:	0b be       	out	0x3b, r0	; 59
    3cc0:	0f 90       	pop	r0
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	0f 90       	pop	r0
    3cc6:	1f 90       	pop	r1
    3cc8:	18 95       	reti

00003cca <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    3cca:	1f 92       	push	r1
    3ccc:	0f 92       	push	r0
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	0f 92       	push	r0
    3cd2:	11 24       	eor	r1, r1
    3cd4:	0b b6       	in	r0, 0x3b	; 59
    3cd6:	0f 92       	push	r0
    3cd8:	2f 93       	push	r18
    3cda:	3f 93       	push	r19
    3cdc:	4f 93       	push	r20
    3cde:	5f 93       	push	r21
    3ce0:	6f 93       	push	r22
    3ce2:	7f 93       	push	r23
    3ce4:	8f 93       	push	r24
    3ce6:	9f 93       	push	r25
    3ce8:	af 93       	push	r26
    3cea:	bf 93       	push	r27
    3cec:	ef 93       	push	r30
    3cee:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    3cf0:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    3cf4:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    3cf8:	e0 91 bd 2c 	lds	r30, 0x2CBD	; 0x802cbd <adca_callback>
    3cfc:	f0 91 be 2c 	lds	r31, 0x2CBE	; 0x802cbe <adca_callback+0x1>
    3d00:	62 e0       	ldi	r22, 0x02	; 2
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	92 e0       	ldi	r25, 0x02	; 2
    3d06:	19 95       	eicall
}
    3d08:	ff 91       	pop	r31
    3d0a:	ef 91       	pop	r30
    3d0c:	bf 91       	pop	r27
    3d0e:	af 91       	pop	r26
    3d10:	9f 91       	pop	r25
    3d12:	8f 91       	pop	r24
    3d14:	7f 91       	pop	r23
    3d16:	6f 91       	pop	r22
    3d18:	5f 91       	pop	r21
    3d1a:	4f 91       	pop	r20
    3d1c:	3f 91       	pop	r19
    3d1e:	2f 91       	pop	r18
    3d20:	0f 90       	pop	r0
    3d22:	0b be       	out	0x3b, r0	; 59
    3d24:	0f 90       	pop	r0
    3d26:	0f be       	out	0x3f, r0	; 63
    3d28:	0f 90       	pop	r0
    3d2a:	1f 90       	pop	r1
    3d2c:	18 95       	reti

00003d2e <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    3d2e:	1f 92       	push	r1
    3d30:	0f 92       	push	r0
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	0f 92       	push	r0
    3d36:	11 24       	eor	r1, r1
    3d38:	0b b6       	in	r0, 0x3b	; 59
    3d3a:	0f 92       	push	r0
    3d3c:	2f 93       	push	r18
    3d3e:	3f 93       	push	r19
    3d40:	4f 93       	push	r20
    3d42:	5f 93       	push	r21
    3d44:	6f 93       	push	r22
    3d46:	7f 93       	push	r23
    3d48:	8f 93       	push	r24
    3d4a:	9f 93       	push	r25
    3d4c:	af 93       	push	r26
    3d4e:	bf 93       	push	r27
    3d50:	ef 93       	push	r30
    3d52:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    3d54:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    3d58:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    3d5c:	e0 91 bd 2c 	lds	r30, 0x2CBD	; 0x802cbd <adca_callback>
    3d60:	f0 91 be 2c 	lds	r31, 0x2CBE	; 0x802cbe <adca_callback+0x1>
    3d64:	64 e0       	ldi	r22, 0x04	; 4
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	92 e0       	ldi	r25, 0x02	; 2
    3d6a:	19 95       	eicall
}
    3d6c:	ff 91       	pop	r31
    3d6e:	ef 91       	pop	r30
    3d70:	bf 91       	pop	r27
    3d72:	af 91       	pop	r26
    3d74:	9f 91       	pop	r25
    3d76:	8f 91       	pop	r24
    3d78:	7f 91       	pop	r23
    3d7a:	6f 91       	pop	r22
    3d7c:	5f 91       	pop	r21
    3d7e:	4f 91       	pop	r20
    3d80:	3f 91       	pop	r19
    3d82:	2f 91       	pop	r18
    3d84:	0f 90       	pop	r0
    3d86:	0b be       	out	0x3b, r0	; 59
    3d88:	0f 90       	pop	r0
    3d8a:	0f be       	out	0x3f, r0	; 63
    3d8c:	0f 90       	pop	r0
    3d8e:	1f 90       	pop	r1
    3d90:	18 95       	reti

00003d92 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    3d92:	1f 92       	push	r1
    3d94:	0f 92       	push	r0
    3d96:	0f b6       	in	r0, 0x3f	; 63
    3d98:	0f 92       	push	r0
    3d9a:	11 24       	eor	r1, r1
    3d9c:	0b b6       	in	r0, 0x3b	; 59
    3d9e:	0f 92       	push	r0
    3da0:	2f 93       	push	r18
    3da2:	3f 93       	push	r19
    3da4:	4f 93       	push	r20
    3da6:	5f 93       	push	r21
    3da8:	6f 93       	push	r22
    3daa:	7f 93       	push	r23
    3dac:	8f 93       	push	r24
    3dae:	9f 93       	push	r25
    3db0:	af 93       	push	r26
    3db2:	bf 93       	push	r27
    3db4:	ef 93       	push	r30
    3db6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    3db8:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    3dbc:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    3dc0:	e0 91 bd 2c 	lds	r30, 0x2CBD	; 0x802cbd <adca_callback>
    3dc4:	f0 91 be 2c 	lds	r31, 0x2CBE	; 0x802cbe <adca_callback+0x1>
    3dc8:	68 e0       	ldi	r22, 0x08	; 8
    3dca:	80 e0       	ldi	r24, 0x00	; 0
    3dcc:	92 e0       	ldi	r25, 0x02	; 2
    3dce:	19 95       	eicall
}
    3dd0:	ff 91       	pop	r31
    3dd2:	ef 91       	pop	r30
    3dd4:	bf 91       	pop	r27
    3dd6:	af 91       	pop	r26
    3dd8:	9f 91       	pop	r25
    3dda:	8f 91       	pop	r24
    3ddc:	7f 91       	pop	r23
    3dde:	6f 91       	pop	r22
    3de0:	5f 91       	pop	r21
    3de2:	4f 91       	pop	r20
    3de4:	3f 91       	pop	r19
    3de6:	2f 91       	pop	r18
    3de8:	0f 90       	pop	r0
    3dea:	0b be       	out	0x3b, r0	; 59
    3dec:	0f 90       	pop	r0
    3dee:	0f be       	out	0x3f, r0	; 63
    3df0:	0f 90       	pop	r0
    3df2:	1f 90       	pop	r1
    3df4:	18 95       	reti

00003df6 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    3df6:	1f 92       	push	r1
    3df8:	0f 92       	push	r0
    3dfa:	0f b6       	in	r0, 0x3f	; 63
    3dfc:	0f 92       	push	r0
    3dfe:	11 24       	eor	r1, r1
    3e00:	0b b6       	in	r0, 0x3b	; 59
    3e02:	0f 92       	push	r0
    3e04:	2f 93       	push	r18
    3e06:	3f 93       	push	r19
    3e08:	4f 93       	push	r20
    3e0a:	5f 93       	push	r21
    3e0c:	6f 93       	push	r22
    3e0e:	7f 93       	push	r23
    3e10:	8f 93       	push	r24
    3e12:	9f 93       	push	r25
    3e14:	af 93       	push	r26
    3e16:	bf 93       	push	r27
    3e18:	ef 93       	push	r30
    3e1a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    3e1c:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    3e20:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    3e24:	e0 91 bb 2c 	lds	r30, 0x2CBB	; 0x802cbb <adcb_callback>
    3e28:	f0 91 bc 2c 	lds	r31, 0x2CBC	; 0x802cbc <adcb_callback+0x1>
    3e2c:	61 e0       	ldi	r22, 0x01	; 1
    3e2e:	80 e4       	ldi	r24, 0x40	; 64
    3e30:	92 e0       	ldi	r25, 0x02	; 2
    3e32:	19 95       	eicall
}
    3e34:	ff 91       	pop	r31
    3e36:	ef 91       	pop	r30
    3e38:	bf 91       	pop	r27
    3e3a:	af 91       	pop	r26
    3e3c:	9f 91       	pop	r25
    3e3e:	8f 91       	pop	r24
    3e40:	7f 91       	pop	r23
    3e42:	6f 91       	pop	r22
    3e44:	5f 91       	pop	r21
    3e46:	4f 91       	pop	r20
    3e48:	3f 91       	pop	r19
    3e4a:	2f 91       	pop	r18
    3e4c:	0f 90       	pop	r0
    3e4e:	0b be       	out	0x3b, r0	; 59
    3e50:	0f 90       	pop	r0
    3e52:	0f be       	out	0x3f, r0	; 63
    3e54:	0f 90       	pop	r0
    3e56:	1f 90       	pop	r1
    3e58:	18 95       	reti

00003e5a <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    3e5a:	1f 92       	push	r1
    3e5c:	0f 92       	push	r0
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	0f 92       	push	r0
    3e62:	11 24       	eor	r1, r1
    3e64:	0b b6       	in	r0, 0x3b	; 59
    3e66:	0f 92       	push	r0
    3e68:	2f 93       	push	r18
    3e6a:	3f 93       	push	r19
    3e6c:	4f 93       	push	r20
    3e6e:	5f 93       	push	r21
    3e70:	6f 93       	push	r22
    3e72:	7f 93       	push	r23
    3e74:	8f 93       	push	r24
    3e76:	9f 93       	push	r25
    3e78:	af 93       	push	r26
    3e7a:	bf 93       	push	r27
    3e7c:	ef 93       	push	r30
    3e7e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    3e80:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    3e84:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    3e88:	e0 91 bb 2c 	lds	r30, 0x2CBB	; 0x802cbb <adcb_callback>
    3e8c:	f0 91 bc 2c 	lds	r31, 0x2CBC	; 0x802cbc <adcb_callback+0x1>
    3e90:	62 e0       	ldi	r22, 0x02	; 2
    3e92:	80 e4       	ldi	r24, 0x40	; 64
    3e94:	92 e0       	ldi	r25, 0x02	; 2
    3e96:	19 95       	eicall
}
    3e98:	ff 91       	pop	r31
    3e9a:	ef 91       	pop	r30
    3e9c:	bf 91       	pop	r27
    3e9e:	af 91       	pop	r26
    3ea0:	9f 91       	pop	r25
    3ea2:	8f 91       	pop	r24
    3ea4:	7f 91       	pop	r23
    3ea6:	6f 91       	pop	r22
    3ea8:	5f 91       	pop	r21
    3eaa:	4f 91       	pop	r20
    3eac:	3f 91       	pop	r19
    3eae:	2f 91       	pop	r18
    3eb0:	0f 90       	pop	r0
    3eb2:	0b be       	out	0x3b, r0	; 59
    3eb4:	0f 90       	pop	r0
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	0f 90       	pop	r0
    3eba:	1f 90       	pop	r1
    3ebc:	18 95       	reti

00003ebe <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    3ebe:	1f 92       	push	r1
    3ec0:	0f 92       	push	r0
    3ec2:	0f b6       	in	r0, 0x3f	; 63
    3ec4:	0f 92       	push	r0
    3ec6:	11 24       	eor	r1, r1
    3ec8:	0b b6       	in	r0, 0x3b	; 59
    3eca:	0f 92       	push	r0
    3ecc:	2f 93       	push	r18
    3ece:	3f 93       	push	r19
    3ed0:	4f 93       	push	r20
    3ed2:	5f 93       	push	r21
    3ed4:	6f 93       	push	r22
    3ed6:	7f 93       	push	r23
    3ed8:	8f 93       	push	r24
    3eda:	9f 93       	push	r25
    3edc:	af 93       	push	r26
    3ede:	bf 93       	push	r27
    3ee0:	ef 93       	push	r30
    3ee2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    3ee4:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    3ee8:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    3eec:	e0 91 bb 2c 	lds	r30, 0x2CBB	; 0x802cbb <adcb_callback>
    3ef0:	f0 91 bc 2c 	lds	r31, 0x2CBC	; 0x802cbc <adcb_callback+0x1>
    3ef4:	64 e0       	ldi	r22, 0x04	; 4
    3ef6:	80 e4       	ldi	r24, 0x40	; 64
    3ef8:	92 e0       	ldi	r25, 0x02	; 2
    3efa:	19 95       	eicall
}
    3efc:	ff 91       	pop	r31
    3efe:	ef 91       	pop	r30
    3f00:	bf 91       	pop	r27
    3f02:	af 91       	pop	r26
    3f04:	9f 91       	pop	r25
    3f06:	8f 91       	pop	r24
    3f08:	7f 91       	pop	r23
    3f0a:	6f 91       	pop	r22
    3f0c:	5f 91       	pop	r21
    3f0e:	4f 91       	pop	r20
    3f10:	3f 91       	pop	r19
    3f12:	2f 91       	pop	r18
    3f14:	0f 90       	pop	r0
    3f16:	0b be       	out	0x3b, r0	; 59
    3f18:	0f 90       	pop	r0
    3f1a:	0f be       	out	0x3f, r0	; 63
    3f1c:	0f 90       	pop	r0
    3f1e:	1f 90       	pop	r1
    3f20:	18 95       	reti

00003f22 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    3f22:	1f 92       	push	r1
    3f24:	0f 92       	push	r0
    3f26:	0f b6       	in	r0, 0x3f	; 63
    3f28:	0f 92       	push	r0
    3f2a:	11 24       	eor	r1, r1
    3f2c:	0b b6       	in	r0, 0x3b	; 59
    3f2e:	0f 92       	push	r0
    3f30:	2f 93       	push	r18
    3f32:	3f 93       	push	r19
    3f34:	4f 93       	push	r20
    3f36:	5f 93       	push	r21
    3f38:	6f 93       	push	r22
    3f3a:	7f 93       	push	r23
    3f3c:	8f 93       	push	r24
    3f3e:	9f 93       	push	r25
    3f40:	af 93       	push	r26
    3f42:	bf 93       	push	r27
    3f44:	ef 93       	push	r30
    3f46:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    3f48:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    3f4c:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    3f50:	e0 91 bb 2c 	lds	r30, 0x2CBB	; 0x802cbb <adcb_callback>
    3f54:	f0 91 bc 2c 	lds	r31, 0x2CBC	; 0x802cbc <adcb_callback+0x1>
    3f58:	68 e0       	ldi	r22, 0x08	; 8
    3f5a:	80 e4       	ldi	r24, 0x40	; 64
    3f5c:	92 e0       	ldi	r25, 0x02	; 2
    3f5e:	19 95       	eicall
}
    3f60:	ff 91       	pop	r31
    3f62:	ef 91       	pop	r30
    3f64:	bf 91       	pop	r27
    3f66:	af 91       	pop	r26
    3f68:	9f 91       	pop	r25
    3f6a:	8f 91       	pop	r24
    3f6c:	7f 91       	pop	r23
    3f6e:	6f 91       	pop	r22
    3f70:	5f 91       	pop	r21
    3f72:	4f 91       	pop	r20
    3f74:	3f 91       	pop	r19
    3f76:	2f 91       	pop	r18
    3f78:	0f 90       	pop	r0
    3f7a:	0b be       	out	0x3b, r0	; 59
    3f7c:	0f 90       	pop	r0
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	0f 90       	pop	r0
    3f82:	1f 90       	pop	r1
    3f84:	18 95       	reti

00003f86 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    3f86:	bf 92       	push	r11
    3f88:	cf 92       	push	r12
    3f8a:	df 92       	push	r13
    3f8c:	ef 92       	push	r14
    3f8e:	ff 92       	push	r15
    3f90:	0f 93       	push	r16
    3f92:	1f 93       	push	r17
    3f94:	cf 93       	push	r28
    3f96:	df 93       	push	r29
    3f98:	1f 92       	push	r1
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62
    3f9e:	8c 01       	movw	r16, r24
    3fa0:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    3fa2:	81 15       	cp	r24, r1
    3fa4:	22 e0       	ldi	r18, 0x02	; 2
    3fa6:	92 07       	cpc	r25, r18
    3fa8:	81 f4       	brne	.+32     	; 0x3fca <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    3faa:	61 e2       	ldi	r22, 0x21	; 33
    3fac:	70 e0       	ldi	r23, 0x00	; 0
    3fae:	82 e0       	ldi	r24, 0x02	; 2
    3fb0:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    3fb4:	c8 2e       	mov	r12, r24
    3fb6:	d1 2c       	mov	r13, r1
    3fb8:	60 e2       	ldi	r22, 0x20	; 32
    3fba:	70 e0       	ldi	r23, 0x00	; 0
    3fbc:	82 e0       	ldi	r24, 0x02	; 2
    3fbe:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    3fc2:	dc 2c       	mov	r13, r12
    3fc4:	cc 24       	eor	r12, r12
    3fc6:	c8 2a       	or	r12, r24
    3fc8:	12 c0       	rjmp	.+36     	; 0x3fee <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    3fca:	80 34       	cpi	r24, 0x40	; 64
    3fcc:	92 40       	sbci	r25, 0x02	; 2
    3fce:	d1 f5       	brne	.+116    	; 0x4044 <adc_write_configuration+0xbe>
    3fd0:	65 e2       	ldi	r22, 0x25	; 37
    3fd2:	70 e0       	ldi	r23, 0x00	; 0
    3fd4:	82 e0       	ldi	r24, 0x02	; 2
    3fd6:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    3fda:	c8 2e       	mov	r12, r24
    3fdc:	d1 2c       	mov	r13, r1
    3fde:	64 e2       	ldi	r22, 0x24	; 36
    3fe0:	70 e0       	ldi	r23, 0x00	; 0
    3fe2:	82 e0       	ldi	r24, 0x02	; 2
    3fe4:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    3fe8:	dc 2c       	mov	r13, r12
    3fea:	cc 24       	eor	r12, r12
    3fec:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3fee:	8f b7       	in	r24, 0x3f	; 63
    3ff0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3ff2:	f8 94       	cli
	return flags;
    3ff4:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    3ff6:	c8 01       	movw	r24, r16
    3ff8:	ca dd       	rcall	.-1132   	; 0x3b8e <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    3ffa:	f8 01       	movw	r30, r16
    3ffc:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    3ffe:	92 e0       	ldi	r25, 0x02	; 2
    4000:	90 83       	st	Z, r25
	adc->CAL = cal;
    4002:	c4 86       	std	Z+12, r12	; 0x0c
    4004:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    4006:	f7 01       	movw	r30, r14
    4008:	25 81       	ldd	r18, Z+5	; 0x05
    400a:	36 81       	ldd	r19, Z+6	; 0x06
    400c:	f8 01       	movw	r30, r16
    400e:	20 8f       	std	Z+24, r18	; 0x18
    4010:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    4012:	f7 01       	movw	r30, r14
    4014:	92 81       	ldd	r25, Z+2	; 0x02
    4016:	f8 01       	movw	r30, r16
    4018:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    401a:	f7 01       	movw	r30, r14
    401c:	94 81       	ldd	r25, Z+4	; 0x04
    401e:	f8 01       	movw	r30, r16
    4020:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    4022:	f7 01       	movw	r30, r14
    4024:	93 81       	ldd	r25, Z+3	; 0x03
    4026:	f8 01       	movw	r30, r16
    4028:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    402a:	f7 01       	movw	r30, r14
    402c:	91 81       	ldd	r25, Z+1	; 0x01
    402e:	f8 01       	movw	r30, r16
    4030:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    4032:	81 70       	andi	r24, 0x01	; 1
    4034:	f7 01       	movw	r30, r14
    4036:	90 81       	ld	r25, Z
    4038:	89 2b       	or	r24, r25
    403a:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    403c:	80 83       	st	Z, r24
    403e:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4040:	c7 dd       	rcall	.-1138   	; 0x3bd0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    4042:	bf be       	out	0x3f, r11	; 63
    4044:	0f 90       	pop	r0
    4046:	df 91       	pop	r29
    4048:	cf 91       	pop	r28
    404a:	1f 91       	pop	r17
    404c:	0f 91       	pop	r16
    404e:	ff 90       	pop	r15
    4050:	ef 90       	pop	r14
    4052:	df 90       	pop	r13
    4054:	cf 90       	pop	r12
    4056:	bf 90       	pop	r11
    4058:	08 95       	ret

0000405a <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    405a:	df 92       	push	r13
    405c:	ef 92       	push	r14
    405e:	ff 92       	push	r15
    4060:	0f 93       	push	r16
    4062:	1f 93       	push	r17
    4064:	cf 93       	push	r28
    4066:	df 93       	push	r29
    4068:	1f 92       	push	r1
    406a:	cd b7       	in	r28, 0x3d	; 61
    406c:	de b7       	in	r29, 0x3e	; 62
    406e:	8c 01       	movw	r16, r24
    4070:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4072:	8f b7       	in	r24, 0x3f	; 63
    4074:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4076:	f8 94       	cli
	return flags;
    4078:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    407a:	c8 01       	movw	r24, r16
    407c:	88 dd       	rcall	.-1264   	; 0x3b8e <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    407e:	f8 01       	movw	r30, r16
    4080:	80 81       	ld	r24, Z
    4082:	80 7c       	andi	r24, 0xC0	; 192
    4084:	f7 01       	movw	r30, r14
    4086:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    4088:	f8 01       	movw	r30, r16
    408a:	80 8d       	ldd	r24, Z+24	; 0x18
    408c:	91 8d       	ldd	r25, Z+25	; 0x19
    408e:	f7 01       	movw	r30, r14
    4090:	85 83       	std	Z+5, r24	; 0x05
    4092:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    4094:	f8 01       	movw	r30, r16
    4096:	82 81       	ldd	r24, Z+2	; 0x02
    4098:	f7 01       	movw	r30, r14
    409a:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    409c:	f8 01       	movw	r30, r16
    409e:	84 81       	ldd	r24, Z+4	; 0x04
    40a0:	f7 01       	movw	r30, r14
    40a2:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    40a4:	f8 01       	movw	r30, r16
    40a6:	83 81       	ldd	r24, Z+3	; 0x03
    40a8:	f7 01       	movw	r30, r14
    40aa:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    40ac:	f8 01       	movw	r30, r16
    40ae:	81 81       	ldd	r24, Z+1	; 0x01
    40b0:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    40b2:	81 83       	std	Z+1, r24	; 0x01
    40b4:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    40b6:	8c dd       	rcall	.-1256   	; 0x3bd0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    40b8:	df be       	out	0x3f, r13	; 63
    40ba:	0f 90       	pop	r0
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	1f 91       	pop	r17
    40c2:	0f 91       	pop	r16
    40c4:	ff 90       	pop	r15
    40c6:	ef 90       	pop	r14
    40c8:	df 90       	pop	r13
    40ca:	08 95       	ret

000040cc <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    40cc:	af 92       	push	r10
    40ce:	bf 92       	push	r11
    40d0:	cf 92       	push	r12
    40d2:	df 92       	push	r13
    40d4:	ef 92       	push	r14
    40d6:	ff 92       	push	r15
    40d8:	0f 93       	push	r16
    40da:	1f 93       	push	r17
    40dc:	cf 93       	push	r28
    40de:	df 93       	push	r29
    40e0:	1f 92       	push	r1
    40e2:	cd b7       	in	r28, 0x3d	; 61
    40e4:	de b7       	in	r29, 0x3e	; 62
    40e6:	6c 01       	movw	r12, r24
    40e8:	b6 2e       	mov	r11, r22
    40ea:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    40ec:	86 2f       	mov	r24, r22
    40ee:	83 70       	andi	r24, 0x03	; 3
    40f0:	29 f4       	brne	.+10     	; 0x40fc <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    40f2:	96 2f       	mov	r25, r22
    40f4:	96 95       	lsr	r25
    40f6:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    40f8:	82 e0       	ldi	r24, 0x02	; 2
    40fa:	02 c0       	rjmp	.+4      	; 0x4100 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    40fc:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    40fe:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    4100:	90 ff       	sbrs	r25, 0
		index++;
    4102:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    4104:	86 01       	movw	r16, r12
    4106:	00 5e       	subi	r16, 0xE0	; 224
    4108:	1f 4f       	sbci	r17, 0xFF	; 255
    410a:	98 e0       	ldi	r25, 0x08	; 8
    410c:	89 9f       	mul	r24, r25
    410e:	00 0d       	add	r16, r0
    4110:	11 1d       	adc	r17, r1
    4112:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4114:	8f b7       	in	r24, 0x3f	; 63
    4116:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4118:	f8 94       	cli
	return flags;
    411a:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    411c:	c6 01       	movw	r24, r12
    411e:	37 dd       	rcall	.-1426   	; 0x3b8e <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    4120:	f7 01       	movw	r30, r14
    4122:	80 81       	ld	r24, Z
    4124:	f8 01       	movw	r30, r16
    4126:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    4128:	f7 01       	movw	r30, r14
    412a:	82 81       	ldd	r24, Z+2	; 0x02
    412c:	f8 01       	movw	r30, r16
    412e:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    4130:	f7 01       	movw	r30, r14
    4132:	81 81       	ldd	r24, Z+1	; 0x01
    4134:	f8 01       	movw	r30, r16
    4136:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    4138:	b0 fe       	sbrs	r11, 0
    413a:	04 c0       	rjmp	.+8      	; 0x4144 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    413c:	f7 01       	movw	r30, r14
    413e:	83 81       	ldd	r24, Z+3	; 0x03
    4140:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    4142:	86 83       	std	Z+6, r24	; 0x06
    4144:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4146:	44 dd       	rcall	.-1400   	; 0x3bd0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    4148:	af be       	out	0x3f, r10	; 63
    414a:	0f 90       	pop	r0
    414c:	df 91       	pop	r29
    414e:	cf 91       	pop	r28
    4150:	1f 91       	pop	r17
    4152:	0f 91       	pop	r16
    4154:	ff 90       	pop	r15
    4156:	ef 90       	pop	r14
    4158:	df 90       	pop	r13
    415a:	cf 90       	pop	r12
    415c:	bf 90       	pop	r11
    415e:	af 90       	pop	r10
    4160:	08 95       	ret

00004162 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    4162:	af 92       	push	r10
    4164:	bf 92       	push	r11
    4166:	cf 92       	push	r12
    4168:	df 92       	push	r13
    416a:	ef 92       	push	r14
    416c:	ff 92       	push	r15
    416e:	0f 93       	push	r16
    4170:	1f 93       	push	r17
    4172:	cf 93       	push	r28
    4174:	df 93       	push	r29
    4176:	1f 92       	push	r1
    4178:	cd b7       	in	r28, 0x3d	; 61
    417a:	de b7       	in	r29, 0x3e	; 62
    417c:	6c 01       	movw	r12, r24
    417e:	b6 2e       	mov	r11, r22
    4180:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    4182:	86 2f       	mov	r24, r22
    4184:	83 70       	andi	r24, 0x03	; 3
    4186:	29 f4       	brne	.+10     	; 0x4192 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    4188:	96 2f       	mov	r25, r22
    418a:	96 95       	lsr	r25
    418c:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    418e:	82 e0       	ldi	r24, 0x02	; 2
    4190:	02 c0       	rjmp	.+4      	; 0x4196 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    4192:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    4194:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    4196:	90 ff       	sbrs	r25, 0
		index++;
    4198:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    419a:	86 01       	movw	r16, r12
    419c:	00 5e       	subi	r16, 0xE0	; 224
    419e:	1f 4f       	sbci	r17, 0xFF	; 255
    41a0:	98 e0       	ldi	r25, 0x08	; 8
    41a2:	89 9f       	mul	r24, r25
    41a4:	00 0d       	add	r16, r0
    41a6:	11 1d       	adc	r17, r1
    41a8:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    41aa:	8f b7       	in	r24, 0x3f	; 63
    41ac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    41ae:	f8 94       	cli
	return flags;
    41b0:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    41b2:	c6 01       	movw	r24, r12
    41b4:	ec dc       	rcall	.-1576   	; 0x3b8e <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    41b6:	f8 01       	movw	r30, r16
    41b8:	80 81       	ld	r24, Z
    41ba:	f7 01       	movw	r30, r14
    41bc:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    41be:	f8 01       	movw	r30, r16
    41c0:	82 81       	ldd	r24, Z+2	; 0x02
    41c2:	f7 01       	movw	r30, r14
    41c4:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    41c6:	f8 01       	movw	r30, r16
    41c8:	81 81       	ldd	r24, Z+1	; 0x01
    41ca:	f7 01       	movw	r30, r14
    41cc:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    41ce:	b0 fe       	sbrs	r11, 0
    41d0:	04 c0       	rjmp	.+8      	; 0x41da <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    41d2:	f8 01       	movw	r30, r16
    41d4:	86 81       	ldd	r24, Z+6	; 0x06
    41d6:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    41d8:	83 83       	std	Z+3, r24	; 0x03
    41da:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    41dc:	f9 dc       	rcall	.-1550   	; 0x3bd0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    41de:	af be       	out	0x3f, r10	; 63
    41e0:	0f 90       	pop	r0
    41e2:	df 91       	pop	r29
    41e4:	cf 91       	pop	r28
    41e6:	1f 91       	pop	r17
    41e8:	0f 91       	pop	r16
    41ea:	ff 90       	pop	r15
    41ec:	ef 90       	pop	r14
    41ee:	df 90       	pop	r13
    41f0:	cf 90       	pop	r12
    41f2:	bf 90       	pop	r11
    41f4:	af 90       	pop	r10
    41f6:	08 95       	ret

000041f8 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    41f8:	80 32       	cpi	r24, 0x20	; 32
    41fa:	93 40       	sbci	r25, 0x03	; 3
    41fc:	61 f4       	brne	.+24     	; 0x4216 <dac_enable_clock+0x1e>
    41fe:	80 91 fc 26 	lds	r24, 0x26FC	; 0x8026fc <dacb_enable_count>
    4202:	91 e0       	ldi	r25, 0x01	; 1
    4204:	98 0f       	add	r25, r24
    4206:	90 93 fc 26 	sts	0x26FC, r25	; 0x8026fc <dacb_enable_count>
    420a:	81 11       	cpse	r24, r1
    420c:	04 c0       	rjmp	.+8      	; 0x4216 <dac_enable_clock+0x1e>
    420e:	64 e0       	ldi	r22, 0x04	; 4
    4210:	82 e0       	ldi	r24, 0x02	; 2
    4212:	0c 94 b7 3c 	jmp	0x796e	; 0x796e <sysclk_enable_module>
    4216:	08 95       	ret

00004218 <dac_disable_clock>:
    4218:	80 32       	cpi	r24, 0x20	; 32
    421a:	93 40       	sbci	r25, 0x03	; 3
    421c:	59 f4       	brne	.+22     	; 0x4234 <dac_disable_clock+0x1c>
    421e:	80 91 fc 26 	lds	r24, 0x26FC	; 0x8026fc <dacb_enable_count>
    4222:	81 50       	subi	r24, 0x01	; 1
    4224:	80 93 fc 26 	sts	0x26FC, r24	; 0x8026fc <dacb_enable_count>
    4228:	81 11       	cpse	r24, r1
    422a:	04 c0       	rjmp	.+8      	; 0x4234 <dac_disable_clock+0x1c>
    422c:	64 e0       	ldi	r22, 0x04	; 4
    422e:	82 e0       	ldi	r24, 0x02	; 2
    4230:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <sysclk_disable_module>
    4234:	08 95       	ret

00004236 <dac_enable>:
    4236:	ef 92       	push	r14
    4238:	ff 92       	push	r15
    423a:	1f 93       	push	r17
    423c:	cf 93       	push	r28
    423e:	df 93       	push	r29
    4240:	1f 92       	push	r1
    4242:	1f 92       	push	r1
    4244:	cd b7       	in	r28, 0x3d	; 61
    4246:	de b7       	in	r29, 0x3e	; 62
    4248:	2f b7       	in	r18, 0x3f	; 63
    424a:	29 83       	std	Y+1, r18	; 0x01
    424c:	f8 94       	cli
    424e:	19 81       	ldd	r17, Y+1	; 0x01
    4250:	20 91 d0 2c 	lds	r18, 0x2CD0	; 0x802cd0 <sleepmgr_locks+0x1>
    4254:	2f 3f       	cpi	r18, 0xFF	; 255
    4256:	09 f4       	brne	.+2      	; 0x425a <dac_enable+0x24>
    4258:	ff cf       	rjmp	.-2      	; 0x4258 <dac_enable+0x22>
    425a:	7c 01       	movw	r14, r24
    425c:	8f b7       	in	r24, 0x3f	; 63
    425e:	8a 83       	std	Y+2, r24	; 0x02
    4260:	f8 94       	cli
    4262:	9a 81       	ldd	r25, Y+2	; 0x02
    4264:	ef ec       	ldi	r30, 0xCF	; 207
    4266:	fc e2       	ldi	r31, 0x2C	; 44
    4268:	81 81       	ldd	r24, Z+1	; 0x01
    426a:	8f 5f       	subi	r24, 0xFF	; 255
    426c:	81 83       	std	Z+1, r24	; 0x01
    426e:	9f bf       	out	0x3f, r25	; 63
    4270:	c7 01       	movw	r24, r14
    4272:	c2 df       	rcall	.-124    	; 0x41f8 <dac_enable_clock>
    4274:	f7 01       	movw	r30, r14
    4276:	80 81       	ld	r24, Z
    4278:	81 60       	ori	r24, 0x01	; 1
    427a:	80 83       	st	Z, r24
    427c:	1f bf       	out	0x3f, r17	; 63
    427e:	0f 90       	pop	r0
    4280:	0f 90       	pop	r0
    4282:	df 91       	pop	r29
    4284:	cf 91       	pop	r28
    4286:	1f 91       	pop	r17
    4288:	ff 90       	pop	r15
    428a:	ef 90       	pop	r14
    428c:	08 95       	ret

0000428e <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    428e:	9f 92       	push	r9
    4290:	af 92       	push	r10
    4292:	bf 92       	push	r11
    4294:	cf 92       	push	r12
    4296:	df 92       	push	r13
    4298:	ef 92       	push	r14
    429a:	ff 92       	push	r15
    429c:	0f 93       	push	r16
    429e:	1f 93       	push	r17
    42a0:	cf 93       	push	r28
    42a2:	df 93       	push	r29
    42a4:	1f 92       	push	r1
    42a6:	cd b7       	in	r28, 0x3d	; 61
    42a8:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    42aa:	80 32       	cpi	r24, 0x20	; 32
    42ac:	23 e0       	ldi	r18, 0x03	; 3
    42ae:	92 07       	cpc	r25, r18
    42b0:	09 f0       	breq	.+2      	; 0x42b4 <dac_write_configuration+0x26>
    42b2:	3c c0       	rjmp	.+120    	; 0x432c <dac_write_configuration+0x9e>
    42b4:	7b 01       	movw	r14, r22
    42b6:	8c 01       	movw	r16, r24
    42b8:	63 e3       	ldi	r22, 0x33	; 51
    42ba:	70 e0       	ldi	r23, 0x00	; 0
    42bc:	82 e0       	ldi	r24, 0x02	; 2
    42be:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
    42c2:	98 2e       	mov	r9, r24
    42c4:	62 e3       	ldi	r22, 0x32	; 50
    42c6:	70 e0       	ldi	r23, 0x00	; 0
    42c8:	82 e0       	ldi	r24, 0x02	; 2
    42ca:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
    42ce:	a8 2e       	mov	r10, r24
    42d0:	67 e3       	ldi	r22, 0x37	; 55
    42d2:	70 e0       	ldi	r23, 0x00	; 0
    42d4:	82 e0       	ldi	r24, 0x02	; 2
    42d6:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
    42da:	b8 2e       	mov	r11, r24
    42dc:	66 e3       	ldi	r22, 0x36	; 54
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	82 e0       	ldi	r24, 0x02	; 2
    42e2:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
    42e6:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    42e8:	8f b7       	in	r24, 0x3f	; 63
    42ea:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    42ec:	f8 94       	cli
	return flags;
    42ee:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    42f0:	c8 01       	movw	r24, r16
    42f2:	82 df       	rcall	.-252    	; 0x41f8 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    42f4:	f8 01       	movw	r30, r16
    42f6:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    42f8:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    42fa:	f7 01       	movw	r30, r14
    42fc:	91 81       	ldd	r25, Z+1	; 0x01
    42fe:	f8 01       	movw	r30, r16
    4300:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    4302:	f7 01       	movw	r30, r14
    4304:	92 81       	ldd	r25, Z+2	; 0x02
    4306:	f8 01       	movw	r30, r16
    4308:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    430a:	f7 01       	movw	r30, r14
    430c:	93 81       	ldd	r25, Z+3	; 0x03
    430e:	f8 01       	movw	r30, r16
    4310:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    4312:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    4314:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    4316:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    4318:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    431a:	81 70       	andi	r24, 0x01	; 1
    431c:	f7 01       	movw	r30, r14
    431e:	90 81       	ld	r25, Z
    4320:	89 2b       	or	r24, r25
    4322:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    4324:	80 83       	st	Z, r24
    4326:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4328:	77 df       	rcall	.-274    	; 0x4218 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    432a:	df be       	out	0x3f, r13	; 63
    432c:	0f 90       	pop	r0
    432e:	df 91       	pop	r29
    4330:	cf 91       	pop	r28
    4332:	1f 91       	pop	r17
    4334:	0f 91       	pop	r16
    4336:	ff 90       	pop	r15
    4338:	ef 90       	pop	r14
    433a:	df 90       	pop	r13
    433c:	cf 90       	pop	r12
    433e:	bf 90       	pop	r11
    4340:	af 90       	pop	r10
    4342:	9f 90       	pop	r9
    4344:	08 95       	ret

00004346 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    4346:	df 92       	push	r13
    4348:	ef 92       	push	r14
    434a:	ff 92       	push	r15
    434c:	0f 93       	push	r16
    434e:	1f 93       	push	r17
    4350:	cf 93       	push	r28
    4352:	df 93       	push	r29
    4354:	1f 92       	push	r1
    4356:	cd b7       	in	r28, 0x3d	; 61
    4358:	de b7       	in	r29, 0x3e	; 62
    435a:	8c 01       	movw	r16, r24
    435c:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    435e:	8f b7       	in	r24, 0x3f	; 63
    4360:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4362:	f8 94       	cli
	return flags;
    4364:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    4366:	c8 01       	movw	r24, r16
    4368:	47 df       	rcall	.-370    	; 0x41f8 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    436a:	f8 01       	movw	r30, r16
    436c:	80 81       	ld	r24, Z
    436e:	8e 7f       	andi	r24, 0xFE	; 254
    4370:	f7 01       	movw	r30, r14
    4372:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    4374:	f8 01       	movw	r30, r16
    4376:	81 81       	ldd	r24, Z+1	; 0x01
    4378:	f7 01       	movw	r30, r14
    437a:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    437c:	f8 01       	movw	r30, r16
    437e:	82 81       	ldd	r24, Z+2	; 0x02
    4380:	f7 01       	movw	r30, r14
    4382:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    4384:	f8 01       	movw	r30, r16
    4386:	83 81       	ldd	r24, Z+3	; 0x03
    4388:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    438a:	83 83       	std	Z+3, r24	; 0x03
    438c:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    438e:	44 df       	rcall	.-376    	; 0x4218 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    4390:	df be       	out	0x3f, r13	; 63
    4392:	0f 90       	pop	r0
    4394:	df 91       	pop	r29
    4396:	cf 91       	pop	r28
    4398:	1f 91       	pop	r17
    439a:	0f 91       	pop	r16
    439c:	ff 90       	pop	r15
    439e:	ef 90       	pop	r14
    43a0:	df 90       	pop	r13
    43a2:	08 95       	ret

000043a4 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    43a4:	1f 92       	push	r1
    43a6:	0f 92       	push	r0
    43a8:	0f b6       	in	r0, 0x3f	; 63
    43aa:	0f 92       	push	r0
    43ac:	11 24       	eor	r1, r1
    43ae:	0b b6       	in	r0, 0x3b	; 59
    43b0:	0f 92       	push	r0
    43b2:	2f 93       	push	r18
    43b4:	3f 93       	push	r19
    43b6:	4f 93       	push	r20
    43b8:	5f 93       	push	r21
    43ba:	6f 93       	push	r22
    43bc:	7f 93       	push	r23
    43be:	8f 93       	push	r24
    43c0:	9f 93       	push	r25
    43c2:	af 93       	push	r26
    43c4:	bf 93       	push	r27
    43c6:	ef 93       	push	r30
    43c8:	ff 93       	push	r31
    43ca:	e0 91 43 27 	lds	r30, 0x2743	; 0x802743 <tc_tcc0_ovf_callback>
    43ce:	f0 91 44 27 	lds	r31, 0x2744	; 0x802744 <tc_tcc0_ovf_callback+0x1>
    43d2:	30 97       	sbiw	r30, 0x00	; 0
    43d4:	09 f0       	breq	.+2      	; 0x43d8 <__vector_14+0x34>
    43d6:	19 95       	eicall
    43d8:	ff 91       	pop	r31
    43da:	ef 91       	pop	r30
    43dc:	bf 91       	pop	r27
    43de:	af 91       	pop	r26
    43e0:	9f 91       	pop	r25
    43e2:	8f 91       	pop	r24
    43e4:	7f 91       	pop	r23
    43e6:	6f 91       	pop	r22
    43e8:	5f 91       	pop	r21
    43ea:	4f 91       	pop	r20
    43ec:	3f 91       	pop	r19
    43ee:	2f 91       	pop	r18
    43f0:	0f 90       	pop	r0
    43f2:	0b be       	out	0x3b, r0	; 59
    43f4:	0f 90       	pop	r0
    43f6:	0f be       	out	0x3f, r0	; 63
    43f8:	0f 90       	pop	r0
    43fa:	1f 90       	pop	r1
    43fc:	18 95       	reti

000043fe <__vector_15>:
    43fe:	1f 92       	push	r1
    4400:	0f 92       	push	r0
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	0f 92       	push	r0
    4406:	11 24       	eor	r1, r1
    4408:	0b b6       	in	r0, 0x3b	; 59
    440a:	0f 92       	push	r0
    440c:	2f 93       	push	r18
    440e:	3f 93       	push	r19
    4410:	4f 93       	push	r20
    4412:	5f 93       	push	r21
    4414:	6f 93       	push	r22
    4416:	7f 93       	push	r23
    4418:	8f 93       	push	r24
    441a:	9f 93       	push	r25
    441c:	af 93       	push	r26
    441e:	bf 93       	push	r27
    4420:	ef 93       	push	r30
    4422:	ff 93       	push	r31
    4424:	e0 91 41 27 	lds	r30, 0x2741	; 0x802741 <tc_tcc0_err_callback>
    4428:	f0 91 42 27 	lds	r31, 0x2742	; 0x802742 <tc_tcc0_err_callback+0x1>
    442c:	30 97       	sbiw	r30, 0x00	; 0
    442e:	09 f0       	breq	.+2      	; 0x4432 <__vector_15+0x34>
    4430:	19 95       	eicall
    4432:	ff 91       	pop	r31
    4434:	ef 91       	pop	r30
    4436:	bf 91       	pop	r27
    4438:	af 91       	pop	r26
    443a:	9f 91       	pop	r25
    443c:	8f 91       	pop	r24
    443e:	7f 91       	pop	r23
    4440:	6f 91       	pop	r22
    4442:	5f 91       	pop	r21
    4444:	4f 91       	pop	r20
    4446:	3f 91       	pop	r19
    4448:	2f 91       	pop	r18
    444a:	0f 90       	pop	r0
    444c:	0b be       	out	0x3b, r0	; 59
    444e:	0f 90       	pop	r0
    4450:	0f be       	out	0x3f, r0	; 63
    4452:	0f 90       	pop	r0
    4454:	1f 90       	pop	r1
    4456:	18 95       	reti

00004458 <__vector_16>:
    4458:	1f 92       	push	r1
    445a:	0f 92       	push	r0
    445c:	0f b6       	in	r0, 0x3f	; 63
    445e:	0f 92       	push	r0
    4460:	11 24       	eor	r1, r1
    4462:	0b b6       	in	r0, 0x3b	; 59
    4464:	0f 92       	push	r0
    4466:	2f 93       	push	r18
    4468:	3f 93       	push	r19
    446a:	4f 93       	push	r20
    446c:	5f 93       	push	r21
    446e:	6f 93       	push	r22
    4470:	7f 93       	push	r23
    4472:	8f 93       	push	r24
    4474:	9f 93       	push	r25
    4476:	af 93       	push	r26
    4478:	bf 93       	push	r27
    447a:	ef 93       	push	r30
    447c:	ff 93       	push	r31
    447e:	e0 91 3f 27 	lds	r30, 0x273F	; 0x80273f <tc_tcc0_cca_callback>
    4482:	f0 91 40 27 	lds	r31, 0x2740	; 0x802740 <tc_tcc0_cca_callback+0x1>
    4486:	30 97       	sbiw	r30, 0x00	; 0
    4488:	09 f0       	breq	.+2      	; 0x448c <__vector_16+0x34>
    448a:	19 95       	eicall
    448c:	ff 91       	pop	r31
    448e:	ef 91       	pop	r30
    4490:	bf 91       	pop	r27
    4492:	af 91       	pop	r26
    4494:	9f 91       	pop	r25
    4496:	8f 91       	pop	r24
    4498:	7f 91       	pop	r23
    449a:	6f 91       	pop	r22
    449c:	5f 91       	pop	r21
    449e:	4f 91       	pop	r20
    44a0:	3f 91       	pop	r19
    44a2:	2f 91       	pop	r18
    44a4:	0f 90       	pop	r0
    44a6:	0b be       	out	0x3b, r0	; 59
    44a8:	0f 90       	pop	r0
    44aa:	0f be       	out	0x3f, r0	; 63
    44ac:	0f 90       	pop	r0
    44ae:	1f 90       	pop	r1
    44b0:	18 95       	reti

000044b2 <__vector_17>:
    44b2:	1f 92       	push	r1
    44b4:	0f 92       	push	r0
    44b6:	0f b6       	in	r0, 0x3f	; 63
    44b8:	0f 92       	push	r0
    44ba:	11 24       	eor	r1, r1
    44bc:	0b b6       	in	r0, 0x3b	; 59
    44be:	0f 92       	push	r0
    44c0:	2f 93       	push	r18
    44c2:	3f 93       	push	r19
    44c4:	4f 93       	push	r20
    44c6:	5f 93       	push	r21
    44c8:	6f 93       	push	r22
    44ca:	7f 93       	push	r23
    44cc:	8f 93       	push	r24
    44ce:	9f 93       	push	r25
    44d0:	af 93       	push	r26
    44d2:	bf 93       	push	r27
    44d4:	ef 93       	push	r30
    44d6:	ff 93       	push	r31
    44d8:	e0 91 3d 27 	lds	r30, 0x273D	; 0x80273d <tc_tcc0_ccb_callback>
    44dc:	f0 91 3e 27 	lds	r31, 0x273E	; 0x80273e <tc_tcc0_ccb_callback+0x1>
    44e0:	30 97       	sbiw	r30, 0x00	; 0
    44e2:	09 f0       	breq	.+2      	; 0x44e6 <__vector_17+0x34>
    44e4:	19 95       	eicall
    44e6:	ff 91       	pop	r31
    44e8:	ef 91       	pop	r30
    44ea:	bf 91       	pop	r27
    44ec:	af 91       	pop	r26
    44ee:	9f 91       	pop	r25
    44f0:	8f 91       	pop	r24
    44f2:	7f 91       	pop	r23
    44f4:	6f 91       	pop	r22
    44f6:	5f 91       	pop	r21
    44f8:	4f 91       	pop	r20
    44fa:	3f 91       	pop	r19
    44fc:	2f 91       	pop	r18
    44fe:	0f 90       	pop	r0
    4500:	0b be       	out	0x3b, r0	; 59
    4502:	0f 90       	pop	r0
    4504:	0f be       	out	0x3f, r0	; 63
    4506:	0f 90       	pop	r0
    4508:	1f 90       	pop	r1
    450a:	18 95       	reti

0000450c <__vector_18>:
    450c:	1f 92       	push	r1
    450e:	0f 92       	push	r0
    4510:	0f b6       	in	r0, 0x3f	; 63
    4512:	0f 92       	push	r0
    4514:	11 24       	eor	r1, r1
    4516:	0b b6       	in	r0, 0x3b	; 59
    4518:	0f 92       	push	r0
    451a:	2f 93       	push	r18
    451c:	3f 93       	push	r19
    451e:	4f 93       	push	r20
    4520:	5f 93       	push	r21
    4522:	6f 93       	push	r22
    4524:	7f 93       	push	r23
    4526:	8f 93       	push	r24
    4528:	9f 93       	push	r25
    452a:	af 93       	push	r26
    452c:	bf 93       	push	r27
    452e:	ef 93       	push	r30
    4530:	ff 93       	push	r31
    4532:	e0 91 3b 27 	lds	r30, 0x273B	; 0x80273b <tc_tcc0_ccc_callback>
    4536:	f0 91 3c 27 	lds	r31, 0x273C	; 0x80273c <tc_tcc0_ccc_callback+0x1>
    453a:	30 97       	sbiw	r30, 0x00	; 0
    453c:	09 f0       	breq	.+2      	; 0x4540 <__vector_18+0x34>
    453e:	19 95       	eicall
    4540:	ff 91       	pop	r31
    4542:	ef 91       	pop	r30
    4544:	bf 91       	pop	r27
    4546:	af 91       	pop	r26
    4548:	9f 91       	pop	r25
    454a:	8f 91       	pop	r24
    454c:	7f 91       	pop	r23
    454e:	6f 91       	pop	r22
    4550:	5f 91       	pop	r21
    4552:	4f 91       	pop	r20
    4554:	3f 91       	pop	r19
    4556:	2f 91       	pop	r18
    4558:	0f 90       	pop	r0
    455a:	0b be       	out	0x3b, r0	; 59
    455c:	0f 90       	pop	r0
    455e:	0f be       	out	0x3f, r0	; 63
    4560:	0f 90       	pop	r0
    4562:	1f 90       	pop	r1
    4564:	18 95       	reti

00004566 <__vector_19>:
    4566:	1f 92       	push	r1
    4568:	0f 92       	push	r0
    456a:	0f b6       	in	r0, 0x3f	; 63
    456c:	0f 92       	push	r0
    456e:	11 24       	eor	r1, r1
    4570:	0b b6       	in	r0, 0x3b	; 59
    4572:	0f 92       	push	r0
    4574:	2f 93       	push	r18
    4576:	3f 93       	push	r19
    4578:	4f 93       	push	r20
    457a:	5f 93       	push	r21
    457c:	6f 93       	push	r22
    457e:	7f 93       	push	r23
    4580:	8f 93       	push	r24
    4582:	9f 93       	push	r25
    4584:	af 93       	push	r26
    4586:	bf 93       	push	r27
    4588:	ef 93       	push	r30
    458a:	ff 93       	push	r31
    458c:	e0 91 39 27 	lds	r30, 0x2739	; 0x802739 <tc_tcc0_ccd_callback>
    4590:	f0 91 3a 27 	lds	r31, 0x273A	; 0x80273a <tc_tcc0_ccd_callback+0x1>
    4594:	30 97       	sbiw	r30, 0x00	; 0
    4596:	09 f0       	breq	.+2      	; 0x459a <__vector_19+0x34>
    4598:	19 95       	eicall
    459a:	ff 91       	pop	r31
    459c:	ef 91       	pop	r30
    459e:	bf 91       	pop	r27
    45a0:	af 91       	pop	r26
    45a2:	9f 91       	pop	r25
    45a4:	8f 91       	pop	r24
    45a6:	7f 91       	pop	r23
    45a8:	6f 91       	pop	r22
    45aa:	5f 91       	pop	r21
    45ac:	4f 91       	pop	r20
    45ae:	3f 91       	pop	r19
    45b0:	2f 91       	pop	r18
    45b2:	0f 90       	pop	r0
    45b4:	0b be       	out	0x3b, r0	; 59
    45b6:	0f 90       	pop	r0
    45b8:	0f be       	out	0x3f, r0	; 63
    45ba:	0f 90       	pop	r0
    45bc:	1f 90       	pop	r1
    45be:	18 95       	reti

000045c0 <__vector_20>:
    45c0:	1f 92       	push	r1
    45c2:	0f 92       	push	r0
    45c4:	0f b6       	in	r0, 0x3f	; 63
    45c6:	0f 92       	push	r0
    45c8:	11 24       	eor	r1, r1
    45ca:	0b b6       	in	r0, 0x3b	; 59
    45cc:	0f 92       	push	r0
    45ce:	2f 93       	push	r18
    45d0:	3f 93       	push	r19
    45d2:	4f 93       	push	r20
    45d4:	5f 93       	push	r21
    45d6:	6f 93       	push	r22
    45d8:	7f 93       	push	r23
    45da:	8f 93       	push	r24
    45dc:	9f 93       	push	r25
    45de:	af 93       	push	r26
    45e0:	bf 93       	push	r27
    45e2:	ef 93       	push	r30
    45e4:	ff 93       	push	r31
    45e6:	e0 91 37 27 	lds	r30, 0x2737	; 0x802737 <tc_tcc1_ovf_callback>
    45ea:	f0 91 38 27 	lds	r31, 0x2738	; 0x802738 <tc_tcc1_ovf_callback+0x1>
    45ee:	30 97       	sbiw	r30, 0x00	; 0
    45f0:	09 f0       	breq	.+2      	; 0x45f4 <__vector_20+0x34>
    45f2:	19 95       	eicall
    45f4:	ff 91       	pop	r31
    45f6:	ef 91       	pop	r30
    45f8:	bf 91       	pop	r27
    45fa:	af 91       	pop	r26
    45fc:	9f 91       	pop	r25
    45fe:	8f 91       	pop	r24
    4600:	7f 91       	pop	r23
    4602:	6f 91       	pop	r22
    4604:	5f 91       	pop	r21
    4606:	4f 91       	pop	r20
    4608:	3f 91       	pop	r19
    460a:	2f 91       	pop	r18
    460c:	0f 90       	pop	r0
    460e:	0b be       	out	0x3b, r0	; 59
    4610:	0f 90       	pop	r0
    4612:	0f be       	out	0x3f, r0	; 63
    4614:	0f 90       	pop	r0
    4616:	1f 90       	pop	r1
    4618:	18 95       	reti

0000461a <__vector_21>:
    461a:	1f 92       	push	r1
    461c:	0f 92       	push	r0
    461e:	0f b6       	in	r0, 0x3f	; 63
    4620:	0f 92       	push	r0
    4622:	11 24       	eor	r1, r1
    4624:	0b b6       	in	r0, 0x3b	; 59
    4626:	0f 92       	push	r0
    4628:	2f 93       	push	r18
    462a:	3f 93       	push	r19
    462c:	4f 93       	push	r20
    462e:	5f 93       	push	r21
    4630:	6f 93       	push	r22
    4632:	7f 93       	push	r23
    4634:	8f 93       	push	r24
    4636:	9f 93       	push	r25
    4638:	af 93       	push	r26
    463a:	bf 93       	push	r27
    463c:	ef 93       	push	r30
    463e:	ff 93       	push	r31
    4640:	e0 91 35 27 	lds	r30, 0x2735	; 0x802735 <tc_tcc1_err_callback>
    4644:	f0 91 36 27 	lds	r31, 0x2736	; 0x802736 <tc_tcc1_err_callback+0x1>
    4648:	30 97       	sbiw	r30, 0x00	; 0
    464a:	09 f0       	breq	.+2      	; 0x464e <__vector_21+0x34>
    464c:	19 95       	eicall
    464e:	ff 91       	pop	r31
    4650:	ef 91       	pop	r30
    4652:	bf 91       	pop	r27
    4654:	af 91       	pop	r26
    4656:	9f 91       	pop	r25
    4658:	8f 91       	pop	r24
    465a:	7f 91       	pop	r23
    465c:	6f 91       	pop	r22
    465e:	5f 91       	pop	r21
    4660:	4f 91       	pop	r20
    4662:	3f 91       	pop	r19
    4664:	2f 91       	pop	r18
    4666:	0f 90       	pop	r0
    4668:	0b be       	out	0x3b, r0	; 59
    466a:	0f 90       	pop	r0
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	0f 90       	pop	r0
    4670:	1f 90       	pop	r1
    4672:	18 95       	reti

00004674 <__vector_22>:
    4674:	1f 92       	push	r1
    4676:	0f 92       	push	r0
    4678:	0f b6       	in	r0, 0x3f	; 63
    467a:	0f 92       	push	r0
    467c:	11 24       	eor	r1, r1
    467e:	0b b6       	in	r0, 0x3b	; 59
    4680:	0f 92       	push	r0
    4682:	2f 93       	push	r18
    4684:	3f 93       	push	r19
    4686:	4f 93       	push	r20
    4688:	5f 93       	push	r21
    468a:	6f 93       	push	r22
    468c:	7f 93       	push	r23
    468e:	8f 93       	push	r24
    4690:	9f 93       	push	r25
    4692:	af 93       	push	r26
    4694:	bf 93       	push	r27
    4696:	ef 93       	push	r30
    4698:	ff 93       	push	r31
    469a:	e0 91 33 27 	lds	r30, 0x2733	; 0x802733 <tc_tcc1_cca_callback>
    469e:	f0 91 34 27 	lds	r31, 0x2734	; 0x802734 <tc_tcc1_cca_callback+0x1>
    46a2:	30 97       	sbiw	r30, 0x00	; 0
    46a4:	09 f0       	breq	.+2      	; 0x46a8 <__vector_22+0x34>
    46a6:	19 95       	eicall
    46a8:	ff 91       	pop	r31
    46aa:	ef 91       	pop	r30
    46ac:	bf 91       	pop	r27
    46ae:	af 91       	pop	r26
    46b0:	9f 91       	pop	r25
    46b2:	8f 91       	pop	r24
    46b4:	7f 91       	pop	r23
    46b6:	6f 91       	pop	r22
    46b8:	5f 91       	pop	r21
    46ba:	4f 91       	pop	r20
    46bc:	3f 91       	pop	r19
    46be:	2f 91       	pop	r18
    46c0:	0f 90       	pop	r0
    46c2:	0b be       	out	0x3b, r0	; 59
    46c4:	0f 90       	pop	r0
    46c6:	0f be       	out	0x3f, r0	; 63
    46c8:	0f 90       	pop	r0
    46ca:	1f 90       	pop	r1
    46cc:	18 95       	reti

000046ce <__vector_23>:
    46ce:	1f 92       	push	r1
    46d0:	0f 92       	push	r0
    46d2:	0f b6       	in	r0, 0x3f	; 63
    46d4:	0f 92       	push	r0
    46d6:	11 24       	eor	r1, r1
    46d8:	0b b6       	in	r0, 0x3b	; 59
    46da:	0f 92       	push	r0
    46dc:	2f 93       	push	r18
    46de:	3f 93       	push	r19
    46e0:	4f 93       	push	r20
    46e2:	5f 93       	push	r21
    46e4:	6f 93       	push	r22
    46e6:	7f 93       	push	r23
    46e8:	8f 93       	push	r24
    46ea:	9f 93       	push	r25
    46ec:	af 93       	push	r26
    46ee:	bf 93       	push	r27
    46f0:	ef 93       	push	r30
    46f2:	ff 93       	push	r31
    46f4:	e0 91 31 27 	lds	r30, 0x2731	; 0x802731 <tc_tcc1_ccb_callback>
    46f8:	f0 91 32 27 	lds	r31, 0x2732	; 0x802732 <tc_tcc1_ccb_callback+0x1>
    46fc:	30 97       	sbiw	r30, 0x00	; 0
    46fe:	09 f0       	breq	.+2      	; 0x4702 <__vector_23+0x34>
    4700:	19 95       	eicall
    4702:	ff 91       	pop	r31
    4704:	ef 91       	pop	r30
    4706:	bf 91       	pop	r27
    4708:	af 91       	pop	r26
    470a:	9f 91       	pop	r25
    470c:	8f 91       	pop	r24
    470e:	7f 91       	pop	r23
    4710:	6f 91       	pop	r22
    4712:	5f 91       	pop	r21
    4714:	4f 91       	pop	r20
    4716:	3f 91       	pop	r19
    4718:	2f 91       	pop	r18
    471a:	0f 90       	pop	r0
    471c:	0b be       	out	0x3b, r0	; 59
    471e:	0f 90       	pop	r0
    4720:	0f be       	out	0x3f, r0	; 63
    4722:	0f 90       	pop	r0
    4724:	1f 90       	pop	r1
    4726:	18 95       	reti

00004728 <__vector_77>:
    4728:	1f 92       	push	r1
    472a:	0f 92       	push	r0
    472c:	0f b6       	in	r0, 0x3f	; 63
    472e:	0f 92       	push	r0
    4730:	11 24       	eor	r1, r1
    4732:	0b b6       	in	r0, 0x3b	; 59
    4734:	0f 92       	push	r0
    4736:	2f 93       	push	r18
    4738:	3f 93       	push	r19
    473a:	4f 93       	push	r20
    473c:	5f 93       	push	r21
    473e:	6f 93       	push	r22
    4740:	7f 93       	push	r23
    4742:	8f 93       	push	r24
    4744:	9f 93       	push	r25
    4746:	af 93       	push	r26
    4748:	bf 93       	push	r27
    474a:	ef 93       	push	r30
    474c:	ff 93       	push	r31
    474e:	e0 91 2f 27 	lds	r30, 0x272F	; 0x80272f <tc_tcd0_ovf_callback>
    4752:	f0 91 30 27 	lds	r31, 0x2730	; 0x802730 <tc_tcd0_ovf_callback+0x1>
    4756:	30 97       	sbiw	r30, 0x00	; 0
    4758:	09 f0       	breq	.+2      	; 0x475c <__vector_77+0x34>
    475a:	19 95       	eicall
    475c:	ff 91       	pop	r31
    475e:	ef 91       	pop	r30
    4760:	bf 91       	pop	r27
    4762:	af 91       	pop	r26
    4764:	9f 91       	pop	r25
    4766:	8f 91       	pop	r24
    4768:	7f 91       	pop	r23
    476a:	6f 91       	pop	r22
    476c:	5f 91       	pop	r21
    476e:	4f 91       	pop	r20
    4770:	3f 91       	pop	r19
    4772:	2f 91       	pop	r18
    4774:	0f 90       	pop	r0
    4776:	0b be       	out	0x3b, r0	; 59
    4778:	0f 90       	pop	r0
    477a:	0f be       	out	0x3f, r0	; 63
    477c:	0f 90       	pop	r0
    477e:	1f 90       	pop	r1
    4780:	18 95       	reti

00004782 <__vector_78>:
    4782:	1f 92       	push	r1
    4784:	0f 92       	push	r0
    4786:	0f b6       	in	r0, 0x3f	; 63
    4788:	0f 92       	push	r0
    478a:	11 24       	eor	r1, r1
    478c:	0b b6       	in	r0, 0x3b	; 59
    478e:	0f 92       	push	r0
    4790:	2f 93       	push	r18
    4792:	3f 93       	push	r19
    4794:	4f 93       	push	r20
    4796:	5f 93       	push	r21
    4798:	6f 93       	push	r22
    479a:	7f 93       	push	r23
    479c:	8f 93       	push	r24
    479e:	9f 93       	push	r25
    47a0:	af 93       	push	r26
    47a2:	bf 93       	push	r27
    47a4:	ef 93       	push	r30
    47a6:	ff 93       	push	r31
    47a8:	e0 91 2d 27 	lds	r30, 0x272D	; 0x80272d <tc_tcd0_err_callback>
    47ac:	f0 91 2e 27 	lds	r31, 0x272E	; 0x80272e <tc_tcd0_err_callback+0x1>
    47b0:	30 97       	sbiw	r30, 0x00	; 0
    47b2:	09 f0       	breq	.+2      	; 0x47b6 <__vector_78+0x34>
    47b4:	19 95       	eicall
    47b6:	ff 91       	pop	r31
    47b8:	ef 91       	pop	r30
    47ba:	bf 91       	pop	r27
    47bc:	af 91       	pop	r26
    47be:	9f 91       	pop	r25
    47c0:	8f 91       	pop	r24
    47c2:	7f 91       	pop	r23
    47c4:	6f 91       	pop	r22
    47c6:	5f 91       	pop	r21
    47c8:	4f 91       	pop	r20
    47ca:	3f 91       	pop	r19
    47cc:	2f 91       	pop	r18
    47ce:	0f 90       	pop	r0
    47d0:	0b be       	out	0x3b, r0	; 59
    47d2:	0f 90       	pop	r0
    47d4:	0f be       	out	0x3f, r0	; 63
    47d6:	0f 90       	pop	r0
    47d8:	1f 90       	pop	r1
    47da:	18 95       	reti

000047dc <__vector_79>:
    47dc:	1f 92       	push	r1
    47de:	0f 92       	push	r0
    47e0:	0f b6       	in	r0, 0x3f	; 63
    47e2:	0f 92       	push	r0
    47e4:	11 24       	eor	r1, r1
    47e6:	0b b6       	in	r0, 0x3b	; 59
    47e8:	0f 92       	push	r0
    47ea:	2f 93       	push	r18
    47ec:	3f 93       	push	r19
    47ee:	4f 93       	push	r20
    47f0:	5f 93       	push	r21
    47f2:	6f 93       	push	r22
    47f4:	7f 93       	push	r23
    47f6:	8f 93       	push	r24
    47f8:	9f 93       	push	r25
    47fa:	af 93       	push	r26
    47fc:	bf 93       	push	r27
    47fe:	ef 93       	push	r30
    4800:	ff 93       	push	r31
    4802:	e0 91 2b 27 	lds	r30, 0x272B	; 0x80272b <tc_tcd0_cca_callback>
    4806:	f0 91 2c 27 	lds	r31, 0x272C	; 0x80272c <tc_tcd0_cca_callback+0x1>
    480a:	30 97       	sbiw	r30, 0x00	; 0
    480c:	09 f0       	breq	.+2      	; 0x4810 <__vector_79+0x34>
    480e:	19 95       	eicall
    4810:	ff 91       	pop	r31
    4812:	ef 91       	pop	r30
    4814:	bf 91       	pop	r27
    4816:	af 91       	pop	r26
    4818:	9f 91       	pop	r25
    481a:	8f 91       	pop	r24
    481c:	7f 91       	pop	r23
    481e:	6f 91       	pop	r22
    4820:	5f 91       	pop	r21
    4822:	4f 91       	pop	r20
    4824:	3f 91       	pop	r19
    4826:	2f 91       	pop	r18
    4828:	0f 90       	pop	r0
    482a:	0b be       	out	0x3b, r0	; 59
    482c:	0f 90       	pop	r0
    482e:	0f be       	out	0x3f, r0	; 63
    4830:	0f 90       	pop	r0
    4832:	1f 90       	pop	r1
    4834:	18 95       	reti

00004836 <__vector_80>:
    4836:	1f 92       	push	r1
    4838:	0f 92       	push	r0
    483a:	0f b6       	in	r0, 0x3f	; 63
    483c:	0f 92       	push	r0
    483e:	11 24       	eor	r1, r1
    4840:	0b b6       	in	r0, 0x3b	; 59
    4842:	0f 92       	push	r0
    4844:	2f 93       	push	r18
    4846:	3f 93       	push	r19
    4848:	4f 93       	push	r20
    484a:	5f 93       	push	r21
    484c:	6f 93       	push	r22
    484e:	7f 93       	push	r23
    4850:	8f 93       	push	r24
    4852:	9f 93       	push	r25
    4854:	af 93       	push	r26
    4856:	bf 93       	push	r27
    4858:	ef 93       	push	r30
    485a:	ff 93       	push	r31
    485c:	e0 91 29 27 	lds	r30, 0x2729	; 0x802729 <tc_tcd0_ccb_callback>
    4860:	f0 91 2a 27 	lds	r31, 0x272A	; 0x80272a <tc_tcd0_ccb_callback+0x1>
    4864:	30 97       	sbiw	r30, 0x00	; 0
    4866:	09 f0       	breq	.+2      	; 0x486a <__vector_80+0x34>
    4868:	19 95       	eicall
    486a:	ff 91       	pop	r31
    486c:	ef 91       	pop	r30
    486e:	bf 91       	pop	r27
    4870:	af 91       	pop	r26
    4872:	9f 91       	pop	r25
    4874:	8f 91       	pop	r24
    4876:	7f 91       	pop	r23
    4878:	6f 91       	pop	r22
    487a:	5f 91       	pop	r21
    487c:	4f 91       	pop	r20
    487e:	3f 91       	pop	r19
    4880:	2f 91       	pop	r18
    4882:	0f 90       	pop	r0
    4884:	0b be       	out	0x3b, r0	; 59
    4886:	0f 90       	pop	r0
    4888:	0f be       	out	0x3f, r0	; 63
    488a:	0f 90       	pop	r0
    488c:	1f 90       	pop	r1
    488e:	18 95       	reti

00004890 <__vector_81>:
    4890:	1f 92       	push	r1
    4892:	0f 92       	push	r0
    4894:	0f b6       	in	r0, 0x3f	; 63
    4896:	0f 92       	push	r0
    4898:	11 24       	eor	r1, r1
    489a:	0b b6       	in	r0, 0x3b	; 59
    489c:	0f 92       	push	r0
    489e:	2f 93       	push	r18
    48a0:	3f 93       	push	r19
    48a2:	4f 93       	push	r20
    48a4:	5f 93       	push	r21
    48a6:	6f 93       	push	r22
    48a8:	7f 93       	push	r23
    48aa:	8f 93       	push	r24
    48ac:	9f 93       	push	r25
    48ae:	af 93       	push	r26
    48b0:	bf 93       	push	r27
    48b2:	ef 93       	push	r30
    48b4:	ff 93       	push	r31
    48b6:	e0 91 27 27 	lds	r30, 0x2727	; 0x802727 <tc_tcd0_ccc_callback>
    48ba:	f0 91 28 27 	lds	r31, 0x2728	; 0x802728 <tc_tcd0_ccc_callback+0x1>
    48be:	30 97       	sbiw	r30, 0x00	; 0
    48c0:	09 f0       	breq	.+2      	; 0x48c4 <__vector_81+0x34>
    48c2:	19 95       	eicall
    48c4:	ff 91       	pop	r31
    48c6:	ef 91       	pop	r30
    48c8:	bf 91       	pop	r27
    48ca:	af 91       	pop	r26
    48cc:	9f 91       	pop	r25
    48ce:	8f 91       	pop	r24
    48d0:	7f 91       	pop	r23
    48d2:	6f 91       	pop	r22
    48d4:	5f 91       	pop	r21
    48d6:	4f 91       	pop	r20
    48d8:	3f 91       	pop	r19
    48da:	2f 91       	pop	r18
    48dc:	0f 90       	pop	r0
    48de:	0b be       	out	0x3b, r0	; 59
    48e0:	0f 90       	pop	r0
    48e2:	0f be       	out	0x3f, r0	; 63
    48e4:	0f 90       	pop	r0
    48e6:	1f 90       	pop	r1
    48e8:	18 95       	reti

000048ea <__vector_82>:
    48ea:	1f 92       	push	r1
    48ec:	0f 92       	push	r0
    48ee:	0f b6       	in	r0, 0x3f	; 63
    48f0:	0f 92       	push	r0
    48f2:	11 24       	eor	r1, r1
    48f4:	0b b6       	in	r0, 0x3b	; 59
    48f6:	0f 92       	push	r0
    48f8:	2f 93       	push	r18
    48fa:	3f 93       	push	r19
    48fc:	4f 93       	push	r20
    48fe:	5f 93       	push	r21
    4900:	6f 93       	push	r22
    4902:	7f 93       	push	r23
    4904:	8f 93       	push	r24
    4906:	9f 93       	push	r25
    4908:	af 93       	push	r26
    490a:	bf 93       	push	r27
    490c:	ef 93       	push	r30
    490e:	ff 93       	push	r31
    4910:	e0 91 25 27 	lds	r30, 0x2725	; 0x802725 <tc_tcd0_ccd_callback>
    4914:	f0 91 26 27 	lds	r31, 0x2726	; 0x802726 <tc_tcd0_ccd_callback+0x1>
    4918:	30 97       	sbiw	r30, 0x00	; 0
    491a:	09 f0       	breq	.+2      	; 0x491e <__vector_82+0x34>
    491c:	19 95       	eicall
    491e:	ff 91       	pop	r31
    4920:	ef 91       	pop	r30
    4922:	bf 91       	pop	r27
    4924:	af 91       	pop	r26
    4926:	9f 91       	pop	r25
    4928:	8f 91       	pop	r24
    492a:	7f 91       	pop	r23
    492c:	6f 91       	pop	r22
    492e:	5f 91       	pop	r21
    4930:	4f 91       	pop	r20
    4932:	3f 91       	pop	r19
    4934:	2f 91       	pop	r18
    4936:	0f 90       	pop	r0
    4938:	0b be       	out	0x3b, r0	; 59
    493a:	0f 90       	pop	r0
    493c:	0f be       	out	0x3f, r0	; 63
    493e:	0f 90       	pop	r0
    4940:	1f 90       	pop	r1
    4942:	18 95       	reti

00004944 <__vector_83>:
    4944:	1f 92       	push	r1
    4946:	0f 92       	push	r0
    4948:	0f b6       	in	r0, 0x3f	; 63
    494a:	0f 92       	push	r0
    494c:	11 24       	eor	r1, r1
    494e:	0b b6       	in	r0, 0x3b	; 59
    4950:	0f 92       	push	r0
    4952:	2f 93       	push	r18
    4954:	3f 93       	push	r19
    4956:	4f 93       	push	r20
    4958:	5f 93       	push	r21
    495a:	6f 93       	push	r22
    495c:	7f 93       	push	r23
    495e:	8f 93       	push	r24
    4960:	9f 93       	push	r25
    4962:	af 93       	push	r26
    4964:	bf 93       	push	r27
    4966:	ef 93       	push	r30
    4968:	ff 93       	push	r31
    496a:	e0 91 23 27 	lds	r30, 0x2723	; 0x802723 <tc_tcd1_ovf_callback>
    496e:	f0 91 24 27 	lds	r31, 0x2724	; 0x802724 <tc_tcd1_ovf_callback+0x1>
    4972:	30 97       	sbiw	r30, 0x00	; 0
    4974:	09 f0       	breq	.+2      	; 0x4978 <__vector_83+0x34>
    4976:	19 95       	eicall
    4978:	ff 91       	pop	r31
    497a:	ef 91       	pop	r30
    497c:	bf 91       	pop	r27
    497e:	af 91       	pop	r26
    4980:	9f 91       	pop	r25
    4982:	8f 91       	pop	r24
    4984:	7f 91       	pop	r23
    4986:	6f 91       	pop	r22
    4988:	5f 91       	pop	r21
    498a:	4f 91       	pop	r20
    498c:	3f 91       	pop	r19
    498e:	2f 91       	pop	r18
    4990:	0f 90       	pop	r0
    4992:	0b be       	out	0x3b, r0	; 59
    4994:	0f 90       	pop	r0
    4996:	0f be       	out	0x3f, r0	; 63
    4998:	0f 90       	pop	r0
    499a:	1f 90       	pop	r1
    499c:	18 95       	reti

0000499e <__vector_84>:
    499e:	1f 92       	push	r1
    49a0:	0f 92       	push	r0
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	0f 92       	push	r0
    49a6:	11 24       	eor	r1, r1
    49a8:	0b b6       	in	r0, 0x3b	; 59
    49aa:	0f 92       	push	r0
    49ac:	2f 93       	push	r18
    49ae:	3f 93       	push	r19
    49b0:	4f 93       	push	r20
    49b2:	5f 93       	push	r21
    49b4:	6f 93       	push	r22
    49b6:	7f 93       	push	r23
    49b8:	8f 93       	push	r24
    49ba:	9f 93       	push	r25
    49bc:	af 93       	push	r26
    49be:	bf 93       	push	r27
    49c0:	ef 93       	push	r30
    49c2:	ff 93       	push	r31
    49c4:	e0 91 21 27 	lds	r30, 0x2721	; 0x802721 <tc_tcd1_err_callback>
    49c8:	f0 91 22 27 	lds	r31, 0x2722	; 0x802722 <tc_tcd1_err_callback+0x1>
    49cc:	30 97       	sbiw	r30, 0x00	; 0
    49ce:	09 f0       	breq	.+2      	; 0x49d2 <__vector_84+0x34>
    49d0:	19 95       	eicall
    49d2:	ff 91       	pop	r31
    49d4:	ef 91       	pop	r30
    49d6:	bf 91       	pop	r27
    49d8:	af 91       	pop	r26
    49da:	9f 91       	pop	r25
    49dc:	8f 91       	pop	r24
    49de:	7f 91       	pop	r23
    49e0:	6f 91       	pop	r22
    49e2:	5f 91       	pop	r21
    49e4:	4f 91       	pop	r20
    49e6:	3f 91       	pop	r19
    49e8:	2f 91       	pop	r18
    49ea:	0f 90       	pop	r0
    49ec:	0b be       	out	0x3b, r0	; 59
    49ee:	0f 90       	pop	r0
    49f0:	0f be       	out	0x3f, r0	; 63
    49f2:	0f 90       	pop	r0
    49f4:	1f 90       	pop	r1
    49f6:	18 95       	reti

000049f8 <__vector_85>:
    49f8:	1f 92       	push	r1
    49fa:	0f 92       	push	r0
    49fc:	0f b6       	in	r0, 0x3f	; 63
    49fe:	0f 92       	push	r0
    4a00:	11 24       	eor	r1, r1
    4a02:	0b b6       	in	r0, 0x3b	; 59
    4a04:	0f 92       	push	r0
    4a06:	2f 93       	push	r18
    4a08:	3f 93       	push	r19
    4a0a:	4f 93       	push	r20
    4a0c:	5f 93       	push	r21
    4a0e:	6f 93       	push	r22
    4a10:	7f 93       	push	r23
    4a12:	8f 93       	push	r24
    4a14:	9f 93       	push	r25
    4a16:	af 93       	push	r26
    4a18:	bf 93       	push	r27
    4a1a:	ef 93       	push	r30
    4a1c:	ff 93       	push	r31
    4a1e:	e0 91 1f 27 	lds	r30, 0x271F	; 0x80271f <tc_tcd1_cca_callback>
    4a22:	f0 91 20 27 	lds	r31, 0x2720	; 0x802720 <tc_tcd1_cca_callback+0x1>
    4a26:	30 97       	sbiw	r30, 0x00	; 0
    4a28:	09 f0       	breq	.+2      	; 0x4a2c <__vector_85+0x34>
    4a2a:	19 95       	eicall
    4a2c:	ff 91       	pop	r31
    4a2e:	ef 91       	pop	r30
    4a30:	bf 91       	pop	r27
    4a32:	af 91       	pop	r26
    4a34:	9f 91       	pop	r25
    4a36:	8f 91       	pop	r24
    4a38:	7f 91       	pop	r23
    4a3a:	6f 91       	pop	r22
    4a3c:	5f 91       	pop	r21
    4a3e:	4f 91       	pop	r20
    4a40:	3f 91       	pop	r19
    4a42:	2f 91       	pop	r18
    4a44:	0f 90       	pop	r0
    4a46:	0b be       	out	0x3b, r0	; 59
    4a48:	0f 90       	pop	r0
    4a4a:	0f be       	out	0x3f, r0	; 63
    4a4c:	0f 90       	pop	r0
    4a4e:	1f 90       	pop	r1
    4a50:	18 95       	reti

00004a52 <__vector_86>:
    4a52:	1f 92       	push	r1
    4a54:	0f 92       	push	r0
    4a56:	0f b6       	in	r0, 0x3f	; 63
    4a58:	0f 92       	push	r0
    4a5a:	11 24       	eor	r1, r1
    4a5c:	0b b6       	in	r0, 0x3b	; 59
    4a5e:	0f 92       	push	r0
    4a60:	2f 93       	push	r18
    4a62:	3f 93       	push	r19
    4a64:	4f 93       	push	r20
    4a66:	5f 93       	push	r21
    4a68:	6f 93       	push	r22
    4a6a:	7f 93       	push	r23
    4a6c:	8f 93       	push	r24
    4a6e:	9f 93       	push	r25
    4a70:	af 93       	push	r26
    4a72:	bf 93       	push	r27
    4a74:	ef 93       	push	r30
    4a76:	ff 93       	push	r31
    4a78:	e0 91 1d 27 	lds	r30, 0x271D	; 0x80271d <tc_tcd1_ccb_callback>
    4a7c:	f0 91 1e 27 	lds	r31, 0x271E	; 0x80271e <tc_tcd1_ccb_callback+0x1>
    4a80:	30 97       	sbiw	r30, 0x00	; 0
    4a82:	09 f0       	breq	.+2      	; 0x4a86 <__vector_86+0x34>
    4a84:	19 95       	eicall
    4a86:	ff 91       	pop	r31
    4a88:	ef 91       	pop	r30
    4a8a:	bf 91       	pop	r27
    4a8c:	af 91       	pop	r26
    4a8e:	9f 91       	pop	r25
    4a90:	8f 91       	pop	r24
    4a92:	7f 91       	pop	r23
    4a94:	6f 91       	pop	r22
    4a96:	5f 91       	pop	r21
    4a98:	4f 91       	pop	r20
    4a9a:	3f 91       	pop	r19
    4a9c:	2f 91       	pop	r18
    4a9e:	0f 90       	pop	r0
    4aa0:	0b be       	out	0x3b, r0	; 59
    4aa2:	0f 90       	pop	r0
    4aa4:	0f be       	out	0x3f, r0	; 63
    4aa6:	0f 90       	pop	r0
    4aa8:	1f 90       	pop	r1
    4aaa:	18 95       	reti

00004aac <__vector_47>:
    4aac:	1f 92       	push	r1
    4aae:	0f 92       	push	r0
    4ab0:	0f b6       	in	r0, 0x3f	; 63
    4ab2:	0f 92       	push	r0
    4ab4:	11 24       	eor	r1, r1
    4ab6:	0b b6       	in	r0, 0x3b	; 59
    4ab8:	0f 92       	push	r0
    4aba:	2f 93       	push	r18
    4abc:	3f 93       	push	r19
    4abe:	4f 93       	push	r20
    4ac0:	5f 93       	push	r21
    4ac2:	6f 93       	push	r22
    4ac4:	7f 93       	push	r23
    4ac6:	8f 93       	push	r24
    4ac8:	9f 93       	push	r25
    4aca:	af 93       	push	r26
    4acc:	bf 93       	push	r27
    4ace:	ef 93       	push	r30
    4ad0:	ff 93       	push	r31
    4ad2:	e0 91 1b 27 	lds	r30, 0x271B	; 0x80271b <tc_tce0_ovf_callback>
    4ad6:	f0 91 1c 27 	lds	r31, 0x271C	; 0x80271c <tc_tce0_ovf_callback+0x1>
    4ada:	30 97       	sbiw	r30, 0x00	; 0
    4adc:	09 f0       	breq	.+2      	; 0x4ae0 <__vector_47+0x34>
    4ade:	19 95       	eicall
    4ae0:	ff 91       	pop	r31
    4ae2:	ef 91       	pop	r30
    4ae4:	bf 91       	pop	r27
    4ae6:	af 91       	pop	r26
    4ae8:	9f 91       	pop	r25
    4aea:	8f 91       	pop	r24
    4aec:	7f 91       	pop	r23
    4aee:	6f 91       	pop	r22
    4af0:	5f 91       	pop	r21
    4af2:	4f 91       	pop	r20
    4af4:	3f 91       	pop	r19
    4af6:	2f 91       	pop	r18
    4af8:	0f 90       	pop	r0
    4afa:	0b be       	out	0x3b, r0	; 59
    4afc:	0f 90       	pop	r0
    4afe:	0f be       	out	0x3f, r0	; 63
    4b00:	0f 90       	pop	r0
    4b02:	1f 90       	pop	r1
    4b04:	18 95       	reti

00004b06 <__vector_48>:
    4b06:	1f 92       	push	r1
    4b08:	0f 92       	push	r0
    4b0a:	0f b6       	in	r0, 0x3f	; 63
    4b0c:	0f 92       	push	r0
    4b0e:	11 24       	eor	r1, r1
    4b10:	0b b6       	in	r0, 0x3b	; 59
    4b12:	0f 92       	push	r0
    4b14:	2f 93       	push	r18
    4b16:	3f 93       	push	r19
    4b18:	4f 93       	push	r20
    4b1a:	5f 93       	push	r21
    4b1c:	6f 93       	push	r22
    4b1e:	7f 93       	push	r23
    4b20:	8f 93       	push	r24
    4b22:	9f 93       	push	r25
    4b24:	af 93       	push	r26
    4b26:	bf 93       	push	r27
    4b28:	ef 93       	push	r30
    4b2a:	ff 93       	push	r31
    4b2c:	e0 91 19 27 	lds	r30, 0x2719	; 0x802719 <tc_tce0_err_callback>
    4b30:	f0 91 1a 27 	lds	r31, 0x271A	; 0x80271a <tc_tce0_err_callback+0x1>
    4b34:	30 97       	sbiw	r30, 0x00	; 0
    4b36:	09 f0       	breq	.+2      	; 0x4b3a <__vector_48+0x34>
    4b38:	19 95       	eicall
    4b3a:	ff 91       	pop	r31
    4b3c:	ef 91       	pop	r30
    4b3e:	bf 91       	pop	r27
    4b40:	af 91       	pop	r26
    4b42:	9f 91       	pop	r25
    4b44:	8f 91       	pop	r24
    4b46:	7f 91       	pop	r23
    4b48:	6f 91       	pop	r22
    4b4a:	5f 91       	pop	r21
    4b4c:	4f 91       	pop	r20
    4b4e:	3f 91       	pop	r19
    4b50:	2f 91       	pop	r18
    4b52:	0f 90       	pop	r0
    4b54:	0b be       	out	0x3b, r0	; 59
    4b56:	0f 90       	pop	r0
    4b58:	0f be       	out	0x3f, r0	; 63
    4b5a:	0f 90       	pop	r0
    4b5c:	1f 90       	pop	r1
    4b5e:	18 95       	reti

00004b60 <__vector_49>:
    4b60:	1f 92       	push	r1
    4b62:	0f 92       	push	r0
    4b64:	0f b6       	in	r0, 0x3f	; 63
    4b66:	0f 92       	push	r0
    4b68:	11 24       	eor	r1, r1
    4b6a:	0b b6       	in	r0, 0x3b	; 59
    4b6c:	0f 92       	push	r0
    4b6e:	2f 93       	push	r18
    4b70:	3f 93       	push	r19
    4b72:	4f 93       	push	r20
    4b74:	5f 93       	push	r21
    4b76:	6f 93       	push	r22
    4b78:	7f 93       	push	r23
    4b7a:	8f 93       	push	r24
    4b7c:	9f 93       	push	r25
    4b7e:	af 93       	push	r26
    4b80:	bf 93       	push	r27
    4b82:	ef 93       	push	r30
    4b84:	ff 93       	push	r31
    4b86:	e0 91 17 27 	lds	r30, 0x2717	; 0x802717 <tc_tce0_cca_callback>
    4b8a:	f0 91 18 27 	lds	r31, 0x2718	; 0x802718 <tc_tce0_cca_callback+0x1>
    4b8e:	30 97       	sbiw	r30, 0x00	; 0
    4b90:	09 f0       	breq	.+2      	; 0x4b94 <__vector_49+0x34>
    4b92:	19 95       	eicall
    4b94:	ff 91       	pop	r31
    4b96:	ef 91       	pop	r30
    4b98:	bf 91       	pop	r27
    4b9a:	af 91       	pop	r26
    4b9c:	9f 91       	pop	r25
    4b9e:	8f 91       	pop	r24
    4ba0:	7f 91       	pop	r23
    4ba2:	6f 91       	pop	r22
    4ba4:	5f 91       	pop	r21
    4ba6:	4f 91       	pop	r20
    4ba8:	3f 91       	pop	r19
    4baa:	2f 91       	pop	r18
    4bac:	0f 90       	pop	r0
    4bae:	0b be       	out	0x3b, r0	; 59
    4bb0:	0f 90       	pop	r0
    4bb2:	0f be       	out	0x3f, r0	; 63
    4bb4:	0f 90       	pop	r0
    4bb6:	1f 90       	pop	r1
    4bb8:	18 95       	reti

00004bba <__vector_50>:
    4bba:	1f 92       	push	r1
    4bbc:	0f 92       	push	r0
    4bbe:	0f b6       	in	r0, 0x3f	; 63
    4bc0:	0f 92       	push	r0
    4bc2:	11 24       	eor	r1, r1
    4bc4:	0b b6       	in	r0, 0x3b	; 59
    4bc6:	0f 92       	push	r0
    4bc8:	2f 93       	push	r18
    4bca:	3f 93       	push	r19
    4bcc:	4f 93       	push	r20
    4bce:	5f 93       	push	r21
    4bd0:	6f 93       	push	r22
    4bd2:	7f 93       	push	r23
    4bd4:	8f 93       	push	r24
    4bd6:	9f 93       	push	r25
    4bd8:	af 93       	push	r26
    4bda:	bf 93       	push	r27
    4bdc:	ef 93       	push	r30
    4bde:	ff 93       	push	r31
    4be0:	e0 91 15 27 	lds	r30, 0x2715	; 0x802715 <tc_tce0_ccb_callback>
    4be4:	f0 91 16 27 	lds	r31, 0x2716	; 0x802716 <tc_tce0_ccb_callback+0x1>
    4be8:	30 97       	sbiw	r30, 0x00	; 0
    4bea:	09 f0       	breq	.+2      	; 0x4bee <__vector_50+0x34>
    4bec:	19 95       	eicall
    4bee:	ff 91       	pop	r31
    4bf0:	ef 91       	pop	r30
    4bf2:	bf 91       	pop	r27
    4bf4:	af 91       	pop	r26
    4bf6:	9f 91       	pop	r25
    4bf8:	8f 91       	pop	r24
    4bfa:	7f 91       	pop	r23
    4bfc:	6f 91       	pop	r22
    4bfe:	5f 91       	pop	r21
    4c00:	4f 91       	pop	r20
    4c02:	3f 91       	pop	r19
    4c04:	2f 91       	pop	r18
    4c06:	0f 90       	pop	r0
    4c08:	0b be       	out	0x3b, r0	; 59
    4c0a:	0f 90       	pop	r0
    4c0c:	0f be       	out	0x3f, r0	; 63
    4c0e:	0f 90       	pop	r0
    4c10:	1f 90       	pop	r1
    4c12:	18 95       	reti

00004c14 <__vector_51>:
    4c14:	1f 92       	push	r1
    4c16:	0f 92       	push	r0
    4c18:	0f b6       	in	r0, 0x3f	; 63
    4c1a:	0f 92       	push	r0
    4c1c:	11 24       	eor	r1, r1
    4c1e:	0b b6       	in	r0, 0x3b	; 59
    4c20:	0f 92       	push	r0
    4c22:	2f 93       	push	r18
    4c24:	3f 93       	push	r19
    4c26:	4f 93       	push	r20
    4c28:	5f 93       	push	r21
    4c2a:	6f 93       	push	r22
    4c2c:	7f 93       	push	r23
    4c2e:	8f 93       	push	r24
    4c30:	9f 93       	push	r25
    4c32:	af 93       	push	r26
    4c34:	bf 93       	push	r27
    4c36:	ef 93       	push	r30
    4c38:	ff 93       	push	r31
    4c3a:	e0 91 13 27 	lds	r30, 0x2713	; 0x802713 <tc_tce0_ccc_callback>
    4c3e:	f0 91 14 27 	lds	r31, 0x2714	; 0x802714 <tc_tce0_ccc_callback+0x1>
    4c42:	30 97       	sbiw	r30, 0x00	; 0
    4c44:	09 f0       	breq	.+2      	; 0x4c48 <__vector_51+0x34>
    4c46:	19 95       	eicall
    4c48:	ff 91       	pop	r31
    4c4a:	ef 91       	pop	r30
    4c4c:	bf 91       	pop	r27
    4c4e:	af 91       	pop	r26
    4c50:	9f 91       	pop	r25
    4c52:	8f 91       	pop	r24
    4c54:	7f 91       	pop	r23
    4c56:	6f 91       	pop	r22
    4c58:	5f 91       	pop	r21
    4c5a:	4f 91       	pop	r20
    4c5c:	3f 91       	pop	r19
    4c5e:	2f 91       	pop	r18
    4c60:	0f 90       	pop	r0
    4c62:	0b be       	out	0x3b, r0	; 59
    4c64:	0f 90       	pop	r0
    4c66:	0f be       	out	0x3f, r0	; 63
    4c68:	0f 90       	pop	r0
    4c6a:	1f 90       	pop	r1
    4c6c:	18 95       	reti

00004c6e <__vector_52>:
    4c6e:	1f 92       	push	r1
    4c70:	0f 92       	push	r0
    4c72:	0f b6       	in	r0, 0x3f	; 63
    4c74:	0f 92       	push	r0
    4c76:	11 24       	eor	r1, r1
    4c78:	0b b6       	in	r0, 0x3b	; 59
    4c7a:	0f 92       	push	r0
    4c7c:	2f 93       	push	r18
    4c7e:	3f 93       	push	r19
    4c80:	4f 93       	push	r20
    4c82:	5f 93       	push	r21
    4c84:	6f 93       	push	r22
    4c86:	7f 93       	push	r23
    4c88:	8f 93       	push	r24
    4c8a:	9f 93       	push	r25
    4c8c:	af 93       	push	r26
    4c8e:	bf 93       	push	r27
    4c90:	ef 93       	push	r30
    4c92:	ff 93       	push	r31
    4c94:	e0 91 11 27 	lds	r30, 0x2711	; 0x802711 <tc_tce0_ccd_callback>
    4c98:	f0 91 12 27 	lds	r31, 0x2712	; 0x802712 <tc_tce0_ccd_callback+0x1>
    4c9c:	30 97       	sbiw	r30, 0x00	; 0
    4c9e:	09 f0       	breq	.+2      	; 0x4ca2 <__vector_52+0x34>
    4ca0:	19 95       	eicall
    4ca2:	ff 91       	pop	r31
    4ca4:	ef 91       	pop	r30
    4ca6:	bf 91       	pop	r27
    4ca8:	af 91       	pop	r26
    4caa:	9f 91       	pop	r25
    4cac:	8f 91       	pop	r24
    4cae:	7f 91       	pop	r23
    4cb0:	6f 91       	pop	r22
    4cb2:	5f 91       	pop	r21
    4cb4:	4f 91       	pop	r20
    4cb6:	3f 91       	pop	r19
    4cb8:	2f 91       	pop	r18
    4cba:	0f 90       	pop	r0
    4cbc:	0b be       	out	0x3b, r0	; 59
    4cbe:	0f 90       	pop	r0
    4cc0:	0f be       	out	0x3f, r0	; 63
    4cc2:	0f 90       	pop	r0
    4cc4:	1f 90       	pop	r1
    4cc6:	18 95       	reti

00004cc8 <__vector_53>:
    4cc8:	1f 92       	push	r1
    4cca:	0f 92       	push	r0
    4ccc:	0f b6       	in	r0, 0x3f	; 63
    4cce:	0f 92       	push	r0
    4cd0:	11 24       	eor	r1, r1
    4cd2:	0b b6       	in	r0, 0x3b	; 59
    4cd4:	0f 92       	push	r0
    4cd6:	2f 93       	push	r18
    4cd8:	3f 93       	push	r19
    4cda:	4f 93       	push	r20
    4cdc:	5f 93       	push	r21
    4cde:	6f 93       	push	r22
    4ce0:	7f 93       	push	r23
    4ce2:	8f 93       	push	r24
    4ce4:	9f 93       	push	r25
    4ce6:	af 93       	push	r26
    4ce8:	bf 93       	push	r27
    4cea:	ef 93       	push	r30
    4cec:	ff 93       	push	r31
    4cee:	e0 91 0f 27 	lds	r30, 0x270F	; 0x80270f <tc_tce1_ovf_callback>
    4cf2:	f0 91 10 27 	lds	r31, 0x2710	; 0x802710 <tc_tce1_ovf_callback+0x1>
    4cf6:	30 97       	sbiw	r30, 0x00	; 0
    4cf8:	09 f0       	breq	.+2      	; 0x4cfc <__vector_53+0x34>
    4cfa:	19 95       	eicall
    4cfc:	ff 91       	pop	r31
    4cfe:	ef 91       	pop	r30
    4d00:	bf 91       	pop	r27
    4d02:	af 91       	pop	r26
    4d04:	9f 91       	pop	r25
    4d06:	8f 91       	pop	r24
    4d08:	7f 91       	pop	r23
    4d0a:	6f 91       	pop	r22
    4d0c:	5f 91       	pop	r21
    4d0e:	4f 91       	pop	r20
    4d10:	3f 91       	pop	r19
    4d12:	2f 91       	pop	r18
    4d14:	0f 90       	pop	r0
    4d16:	0b be       	out	0x3b, r0	; 59
    4d18:	0f 90       	pop	r0
    4d1a:	0f be       	out	0x3f, r0	; 63
    4d1c:	0f 90       	pop	r0
    4d1e:	1f 90       	pop	r1
    4d20:	18 95       	reti

00004d22 <__vector_54>:
    4d22:	1f 92       	push	r1
    4d24:	0f 92       	push	r0
    4d26:	0f b6       	in	r0, 0x3f	; 63
    4d28:	0f 92       	push	r0
    4d2a:	11 24       	eor	r1, r1
    4d2c:	0b b6       	in	r0, 0x3b	; 59
    4d2e:	0f 92       	push	r0
    4d30:	2f 93       	push	r18
    4d32:	3f 93       	push	r19
    4d34:	4f 93       	push	r20
    4d36:	5f 93       	push	r21
    4d38:	6f 93       	push	r22
    4d3a:	7f 93       	push	r23
    4d3c:	8f 93       	push	r24
    4d3e:	9f 93       	push	r25
    4d40:	af 93       	push	r26
    4d42:	bf 93       	push	r27
    4d44:	ef 93       	push	r30
    4d46:	ff 93       	push	r31
    4d48:	e0 91 0d 27 	lds	r30, 0x270D	; 0x80270d <tc_tce1_err_callback>
    4d4c:	f0 91 0e 27 	lds	r31, 0x270E	; 0x80270e <tc_tce1_err_callback+0x1>
    4d50:	30 97       	sbiw	r30, 0x00	; 0
    4d52:	09 f0       	breq	.+2      	; 0x4d56 <__vector_54+0x34>
    4d54:	19 95       	eicall
    4d56:	ff 91       	pop	r31
    4d58:	ef 91       	pop	r30
    4d5a:	bf 91       	pop	r27
    4d5c:	af 91       	pop	r26
    4d5e:	9f 91       	pop	r25
    4d60:	8f 91       	pop	r24
    4d62:	7f 91       	pop	r23
    4d64:	6f 91       	pop	r22
    4d66:	5f 91       	pop	r21
    4d68:	4f 91       	pop	r20
    4d6a:	3f 91       	pop	r19
    4d6c:	2f 91       	pop	r18
    4d6e:	0f 90       	pop	r0
    4d70:	0b be       	out	0x3b, r0	; 59
    4d72:	0f 90       	pop	r0
    4d74:	0f be       	out	0x3f, r0	; 63
    4d76:	0f 90       	pop	r0
    4d78:	1f 90       	pop	r1
    4d7a:	18 95       	reti

00004d7c <__vector_55>:
    4d7c:	1f 92       	push	r1
    4d7e:	0f 92       	push	r0
    4d80:	0f b6       	in	r0, 0x3f	; 63
    4d82:	0f 92       	push	r0
    4d84:	11 24       	eor	r1, r1
    4d86:	0b b6       	in	r0, 0x3b	; 59
    4d88:	0f 92       	push	r0
    4d8a:	2f 93       	push	r18
    4d8c:	3f 93       	push	r19
    4d8e:	4f 93       	push	r20
    4d90:	5f 93       	push	r21
    4d92:	6f 93       	push	r22
    4d94:	7f 93       	push	r23
    4d96:	8f 93       	push	r24
    4d98:	9f 93       	push	r25
    4d9a:	af 93       	push	r26
    4d9c:	bf 93       	push	r27
    4d9e:	ef 93       	push	r30
    4da0:	ff 93       	push	r31
    4da2:	e0 91 0b 27 	lds	r30, 0x270B	; 0x80270b <tc_tce1_cca_callback>
    4da6:	f0 91 0c 27 	lds	r31, 0x270C	; 0x80270c <tc_tce1_cca_callback+0x1>
    4daa:	30 97       	sbiw	r30, 0x00	; 0
    4dac:	09 f0       	breq	.+2      	; 0x4db0 <__vector_55+0x34>
    4dae:	19 95       	eicall
    4db0:	ff 91       	pop	r31
    4db2:	ef 91       	pop	r30
    4db4:	bf 91       	pop	r27
    4db6:	af 91       	pop	r26
    4db8:	9f 91       	pop	r25
    4dba:	8f 91       	pop	r24
    4dbc:	7f 91       	pop	r23
    4dbe:	6f 91       	pop	r22
    4dc0:	5f 91       	pop	r21
    4dc2:	4f 91       	pop	r20
    4dc4:	3f 91       	pop	r19
    4dc6:	2f 91       	pop	r18
    4dc8:	0f 90       	pop	r0
    4dca:	0b be       	out	0x3b, r0	; 59
    4dcc:	0f 90       	pop	r0
    4dce:	0f be       	out	0x3f, r0	; 63
    4dd0:	0f 90       	pop	r0
    4dd2:	1f 90       	pop	r1
    4dd4:	18 95       	reti

00004dd6 <__vector_56>:
    4dd6:	1f 92       	push	r1
    4dd8:	0f 92       	push	r0
    4dda:	0f b6       	in	r0, 0x3f	; 63
    4ddc:	0f 92       	push	r0
    4dde:	11 24       	eor	r1, r1
    4de0:	0b b6       	in	r0, 0x3b	; 59
    4de2:	0f 92       	push	r0
    4de4:	2f 93       	push	r18
    4de6:	3f 93       	push	r19
    4de8:	4f 93       	push	r20
    4dea:	5f 93       	push	r21
    4dec:	6f 93       	push	r22
    4dee:	7f 93       	push	r23
    4df0:	8f 93       	push	r24
    4df2:	9f 93       	push	r25
    4df4:	af 93       	push	r26
    4df6:	bf 93       	push	r27
    4df8:	ef 93       	push	r30
    4dfa:	ff 93       	push	r31
    4dfc:	e0 91 09 27 	lds	r30, 0x2709	; 0x802709 <tc_tce1_ccb_callback>
    4e00:	f0 91 0a 27 	lds	r31, 0x270A	; 0x80270a <tc_tce1_ccb_callback+0x1>
    4e04:	30 97       	sbiw	r30, 0x00	; 0
    4e06:	09 f0       	breq	.+2      	; 0x4e0a <__vector_56+0x34>
    4e08:	19 95       	eicall
    4e0a:	ff 91       	pop	r31
    4e0c:	ef 91       	pop	r30
    4e0e:	bf 91       	pop	r27
    4e10:	af 91       	pop	r26
    4e12:	9f 91       	pop	r25
    4e14:	8f 91       	pop	r24
    4e16:	7f 91       	pop	r23
    4e18:	6f 91       	pop	r22
    4e1a:	5f 91       	pop	r21
    4e1c:	4f 91       	pop	r20
    4e1e:	3f 91       	pop	r19
    4e20:	2f 91       	pop	r18
    4e22:	0f 90       	pop	r0
    4e24:	0b be       	out	0x3b, r0	; 59
    4e26:	0f 90       	pop	r0
    4e28:	0f be       	out	0x3f, r0	; 63
    4e2a:	0f 90       	pop	r0
    4e2c:	1f 90       	pop	r1
    4e2e:	18 95       	reti

00004e30 <__vector_108>:
    4e30:	1f 92       	push	r1
    4e32:	0f 92       	push	r0
    4e34:	0f b6       	in	r0, 0x3f	; 63
    4e36:	0f 92       	push	r0
    4e38:	11 24       	eor	r1, r1
    4e3a:	0b b6       	in	r0, 0x3b	; 59
    4e3c:	0f 92       	push	r0
    4e3e:	2f 93       	push	r18
    4e40:	3f 93       	push	r19
    4e42:	4f 93       	push	r20
    4e44:	5f 93       	push	r21
    4e46:	6f 93       	push	r22
    4e48:	7f 93       	push	r23
    4e4a:	8f 93       	push	r24
    4e4c:	9f 93       	push	r25
    4e4e:	af 93       	push	r26
    4e50:	bf 93       	push	r27
    4e52:	ef 93       	push	r30
    4e54:	ff 93       	push	r31
    4e56:	e0 91 07 27 	lds	r30, 0x2707	; 0x802707 <tc_tcf0_ovf_callback>
    4e5a:	f0 91 08 27 	lds	r31, 0x2708	; 0x802708 <tc_tcf0_ovf_callback+0x1>
    4e5e:	30 97       	sbiw	r30, 0x00	; 0
    4e60:	09 f0       	breq	.+2      	; 0x4e64 <__vector_108+0x34>
    4e62:	19 95       	eicall
    4e64:	ff 91       	pop	r31
    4e66:	ef 91       	pop	r30
    4e68:	bf 91       	pop	r27
    4e6a:	af 91       	pop	r26
    4e6c:	9f 91       	pop	r25
    4e6e:	8f 91       	pop	r24
    4e70:	7f 91       	pop	r23
    4e72:	6f 91       	pop	r22
    4e74:	5f 91       	pop	r21
    4e76:	4f 91       	pop	r20
    4e78:	3f 91       	pop	r19
    4e7a:	2f 91       	pop	r18
    4e7c:	0f 90       	pop	r0
    4e7e:	0b be       	out	0x3b, r0	; 59
    4e80:	0f 90       	pop	r0
    4e82:	0f be       	out	0x3f, r0	; 63
    4e84:	0f 90       	pop	r0
    4e86:	1f 90       	pop	r1
    4e88:	18 95       	reti

00004e8a <__vector_109>:
    4e8a:	1f 92       	push	r1
    4e8c:	0f 92       	push	r0
    4e8e:	0f b6       	in	r0, 0x3f	; 63
    4e90:	0f 92       	push	r0
    4e92:	11 24       	eor	r1, r1
    4e94:	0b b6       	in	r0, 0x3b	; 59
    4e96:	0f 92       	push	r0
    4e98:	2f 93       	push	r18
    4e9a:	3f 93       	push	r19
    4e9c:	4f 93       	push	r20
    4e9e:	5f 93       	push	r21
    4ea0:	6f 93       	push	r22
    4ea2:	7f 93       	push	r23
    4ea4:	8f 93       	push	r24
    4ea6:	9f 93       	push	r25
    4ea8:	af 93       	push	r26
    4eaa:	bf 93       	push	r27
    4eac:	ef 93       	push	r30
    4eae:	ff 93       	push	r31
    4eb0:	e0 91 05 27 	lds	r30, 0x2705	; 0x802705 <tc_tcf0_err_callback>
    4eb4:	f0 91 06 27 	lds	r31, 0x2706	; 0x802706 <tc_tcf0_err_callback+0x1>
    4eb8:	30 97       	sbiw	r30, 0x00	; 0
    4eba:	09 f0       	breq	.+2      	; 0x4ebe <__vector_109+0x34>
    4ebc:	19 95       	eicall
    4ebe:	ff 91       	pop	r31
    4ec0:	ef 91       	pop	r30
    4ec2:	bf 91       	pop	r27
    4ec4:	af 91       	pop	r26
    4ec6:	9f 91       	pop	r25
    4ec8:	8f 91       	pop	r24
    4eca:	7f 91       	pop	r23
    4ecc:	6f 91       	pop	r22
    4ece:	5f 91       	pop	r21
    4ed0:	4f 91       	pop	r20
    4ed2:	3f 91       	pop	r19
    4ed4:	2f 91       	pop	r18
    4ed6:	0f 90       	pop	r0
    4ed8:	0b be       	out	0x3b, r0	; 59
    4eda:	0f 90       	pop	r0
    4edc:	0f be       	out	0x3f, r0	; 63
    4ede:	0f 90       	pop	r0
    4ee0:	1f 90       	pop	r1
    4ee2:	18 95       	reti

00004ee4 <__vector_110>:
    4ee4:	1f 92       	push	r1
    4ee6:	0f 92       	push	r0
    4ee8:	0f b6       	in	r0, 0x3f	; 63
    4eea:	0f 92       	push	r0
    4eec:	11 24       	eor	r1, r1
    4eee:	0b b6       	in	r0, 0x3b	; 59
    4ef0:	0f 92       	push	r0
    4ef2:	2f 93       	push	r18
    4ef4:	3f 93       	push	r19
    4ef6:	4f 93       	push	r20
    4ef8:	5f 93       	push	r21
    4efa:	6f 93       	push	r22
    4efc:	7f 93       	push	r23
    4efe:	8f 93       	push	r24
    4f00:	9f 93       	push	r25
    4f02:	af 93       	push	r26
    4f04:	bf 93       	push	r27
    4f06:	ef 93       	push	r30
    4f08:	ff 93       	push	r31
    4f0a:	e0 91 03 27 	lds	r30, 0x2703	; 0x802703 <tc_tcf0_cca_callback>
    4f0e:	f0 91 04 27 	lds	r31, 0x2704	; 0x802704 <tc_tcf0_cca_callback+0x1>
    4f12:	30 97       	sbiw	r30, 0x00	; 0
    4f14:	09 f0       	breq	.+2      	; 0x4f18 <__vector_110+0x34>
    4f16:	19 95       	eicall
    4f18:	ff 91       	pop	r31
    4f1a:	ef 91       	pop	r30
    4f1c:	bf 91       	pop	r27
    4f1e:	af 91       	pop	r26
    4f20:	9f 91       	pop	r25
    4f22:	8f 91       	pop	r24
    4f24:	7f 91       	pop	r23
    4f26:	6f 91       	pop	r22
    4f28:	5f 91       	pop	r21
    4f2a:	4f 91       	pop	r20
    4f2c:	3f 91       	pop	r19
    4f2e:	2f 91       	pop	r18
    4f30:	0f 90       	pop	r0
    4f32:	0b be       	out	0x3b, r0	; 59
    4f34:	0f 90       	pop	r0
    4f36:	0f be       	out	0x3f, r0	; 63
    4f38:	0f 90       	pop	r0
    4f3a:	1f 90       	pop	r1
    4f3c:	18 95       	reti

00004f3e <__vector_111>:
    4f3e:	1f 92       	push	r1
    4f40:	0f 92       	push	r0
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	0f 92       	push	r0
    4f46:	11 24       	eor	r1, r1
    4f48:	0b b6       	in	r0, 0x3b	; 59
    4f4a:	0f 92       	push	r0
    4f4c:	2f 93       	push	r18
    4f4e:	3f 93       	push	r19
    4f50:	4f 93       	push	r20
    4f52:	5f 93       	push	r21
    4f54:	6f 93       	push	r22
    4f56:	7f 93       	push	r23
    4f58:	8f 93       	push	r24
    4f5a:	9f 93       	push	r25
    4f5c:	af 93       	push	r26
    4f5e:	bf 93       	push	r27
    4f60:	ef 93       	push	r30
    4f62:	ff 93       	push	r31
    4f64:	e0 91 01 27 	lds	r30, 0x2701	; 0x802701 <tc_tcf0_ccb_callback>
    4f68:	f0 91 02 27 	lds	r31, 0x2702	; 0x802702 <tc_tcf0_ccb_callback+0x1>
    4f6c:	30 97       	sbiw	r30, 0x00	; 0
    4f6e:	09 f0       	breq	.+2      	; 0x4f72 <__vector_111+0x34>
    4f70:	19 95       	eicall
    4f72:	ff 91       	pop	r31
    4f74:	ef 91       	pop	r30
    4f76:	bf 91       	pop	r27
    4f78:	af 91       	pop	r26
    4f7a:	9f 91       	pop	r25
    4f7c:	8f 91       	pop	r24
    4f7e:	7f 91       	pop	r23
    4f80:	6f 91       	pop	r22
    4f82:	5f 91       	pop	r21
    4f84:	4f 91       	pop	r20
    4f86:	3f 91       	pop	r19
    4f88:	2f 91       	pop	r18
    4f8a:	0f 90       	pop	r0
    4f8c:	0b be       	out	0x3b, r0	; 59
    4f8e:	0f 90       	pop	r0
    4f90:	0f be       	out	0x3f, r0	; 63
    4f92:	0f 90       	pop	r0
    4f94:	1f 90       	pop	r1
    4f96:	18 95       	reti

00004f98 <__vector_112>:
    4f98:	1f 92       	push	r1
    4f9a:	0f 92       	push	r0
    4f9c:	0f b6       	in	r0, 0x3f	; 63
    4f9e:	0f 92       	push	r0
    4fa0:	11 24       	eor	r1, r1
    4fa2:	0b b6       	in	r0, 0x3b	; 59
    4fa4:	0f 92       	push	r0
    4fa6:	2f 93       	push	r18
    4fa8:	3f 93       	push	r19
    4faa:	4f 93       	push	r20
    4fac:	5f 93       	push	r21
    4fae:	6f 93       	push	r22
    4fb0:	7f 93       	push	r23
    4fb2:	8f 93       	push	r24
    4fb4:	9f 93       	push	r25
    4fb6:	af 93       	push	r26
    4fb8:	bf 93       	push	r27
    4fba:	ef 93       	push	r30
    4fbc:	ff 93       	push	r31
    4fbe:	e0 91 ff 26 	lds	r30, 0x26FF	; 0x8026ff <tc_tcf0_ccc_callback>
    4fc2:	f0 91 00 27 	lds	r31, 0x2700	; 0x802700 <tc_tcf0_ccc_callback+0x1>
    4fc6:	30 97       	sbiw	r30, 0x00	; 0
    4fc8:	09 f0       	breq	.+2      	; 0x4fcc <__vector_112+0x34>
    4fca:	19 95       	eicall
    4fcc:	ff 91       	pop	r31
    4fce:	ef 91       	pop	r30
    4fd0:	bf 91       	pop	r27
    4fd2:	af 91       	pop	r26
    4fd4:	9f 91       	pop	r25
    4fd6:	8f 91       	pop	r24
    4fd8:	7f 91       	pop	r23
    4fda:	6f 91       	pop	r22
    4fdc:	5f 91       	pop	r21
    4fde:	4f 91       	pop	r20
    4fe0:	3f 91       	pop	r19
    4fe2:	2f 91       	pop	r18
    4fe4:	0f 90       	pop	r0
    4fe6:	0b be       	out	0x3b, r0	; 59
    4fe8:	0f 90       	pop	r0
    4fea:	0f be       	out	0x3f, r0	; 63
    4fec:	0f 90       	pop	r0
    4fee:	1f 90       	pop	r1
    4ff0:	18 95       	reti

00004ff2 <__vector_113>:
    4ff2:	1f 92       	push	r1
    4ff4:	0f 92       	push	r0
    4ff6:	0f b6       	in	r0, 0x3f	; 63
    4ff8:	0f 92       	push	r0
    4ffa:	11 24       	eor	r1, r1
    4ffc:	0b b6       	in	r0, 0x3b	; 59
    4ffe:	0f 92       	push	r0
    5000:	2f 93       	push	r18
    5002:	3f 93       	push	r19
    5004:	4f 93       	push	r20
    5006:	5f 93       	push	r21
    5008:	6f 93       	push	r22
    500a:	7f 93       	push	r23
    500c:	8f 93       	push	r24
    500e:	9f 93       	push	r25
    5010:	af 93       	push	r26
    5012:	bf 93       	push	r27
    5014:	ef 93       	push	r30
    5016:	ff 93       	push	r31
    5018:	e0 91 fd 26 	lds	r30, 0x26FD	; 0x8026fd <tc_tcf0_ccd_callback>
    501c:	f0 91 fe 26 	lds	r31, 0x26FE	; 0x8026fe <tc_tcf0_ccd_callback+0x1>
    5020:	30 97       	sbiw	r30, 0x00	; 0
    5022:	09 f0       	breq	.+2      	; 0x5026 <__vector_113+0x34>
    5024:	19 95       	eicall
    5026:	ff 91       	pop	r31
    5028:	ef 91       	pop	r30
    502a:	bf 91       	pop	r27
    502c:	af 91       	pop	r26
    502e:	9f 91       	pop	r25
    5030:	8f 91       	pop	r24
    5032:	7f 91       	pop	r23
    5034:	6f 91       	pop	r22
    5036:	5f 91       	pop	r21
    5038:	4f 91       	pop	r20
    503a:	3f 91       	pop	r19
    503c:	2f 91       	pop	r18
    503e:	0f 90       	pop	r0
    5040:	0b be       	out	0x3b, r0	; 59
    5042:	0f 90       	pop	r0
    5044:	0f be       	out	0x3f, r0	; 63
    5046:	0f 90       	pop	r0
    5048:	1f 90       	pop	r1
    504a:	18 95       	reti

0000504c <tc_enable>:
    504c:	1f 93       	push	r17
    504e:	cf 93       	push	r28
    5050:	df 93       	push	r29
    5052:	1f 92       	push	r1
    5054:	1f 92       	push	r1
    5056:	cd b7       	in	r28, 0x3d	; 61
    5058:	de b7       	in	r29, 0x3e	; 62
    505a:	2f b7       	in	r18, 0x3f	; 63
    505c:	2a 83       	std	Y+2, r18	; 0x02
    505e:	f8 94       	cli
    5060:	1a 81       	ldd	r17, Y+2	; 0x02
    5062:	28 2f       	mov	r18, r24
    5064:	39 2f       	mov	r19, r25
    5066:	21 15       	cp	r18, r1
    5068:	88 e0       	ldi	r24, 0x08	; 8
    506a:	38 07       	cpc	r19, r24
    506c:	49 f4       	brne	.+18     	; 0x5080 <tc_enable+0x34>
    506e:	61 e0       	ldi	r22, 0x01	; 1
    5070:	83 e0       	ldi	r24, 0x03	; 3
    5072:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    5076:	64 e0       	ldi	r22, 0x04	; 4
    5078:	83 e0       	ldi	r24, 0x03	; 3
    507a:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    507e:	4f c0       	rjmp	.+158    	; 0x511e <tc_enable+0xd2>
    5080:	20 34       	cpi	r18, 0x40	; 64
    5082:	88 e0       	ldi	r24, 0x08	; 8
    5084:	38 07       	cpc	r19, r24
    5086:	49 f4       	brne	.+18     	; 0x509a <tc_enable+0x4e>
    5088:	62 e0       	ldi	r22, 0x02	; 2
    508a:	83 e0       	ldi	r24, 0x03	; 3
    508c:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    5090:	64 e0       	ldi	r22, 0x04	; 4
    5092:	83 e0       	ldi	r24, 0x03	; 3
    5094:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    5098:	42 c0       	rjmp	.+132    	; 0x511e <tc_enable+0xd2>
    509a:	21 15       	cp	r18, r1
    509c:	89 e0       	ldi	r24, 0x09	; 9
    509e:	38 07       	cpc	r19, r24
    50a0:	49 f4       	brne	.+18     	; 0x50b4 <tc_enable+0x68>
    50a2:	61 e0       	ldi	r22, 0x01	; 1
    50a4:	84 e0       	ldi	r24, 0x04	; 4
    50a6:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    50aa:	64 e0       	ldi	r22, 0x04	; 4
    50ac:	84 e0       	ldi	r24, 0x04	; 4
    50ae:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    50b2:	35 c0       	rjmp	.+106    	; 0x511e <tc_enable+0xd2>
    50b4:	20 34       	cpi	r18, 0x40	; 64
    50b6:	89 e0       	ldi	r24, 0x09	; 9
    50b8:	38 07       	cpc	r19, r24
    50ba:	49 f4       	brne	.+18     	; 0x50ce <tc_enable+0x82>
    50bc:	62 e0       	ldi	r22, 0x02	; 2
    50be:	84 e0       	ldi	r24, 0x04	; 4
    50c0:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    50c4:	64 e0       	ldi	r22, 0x04	; 4
    50c6:	84 e0       	ldi	r24, 0x04	; 4
    50c8:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    50cc:	28 c0       	rjmp	.+80     	; 0x511e <tc_enable+0xd2>
    50ce:	21 15       	cp	r18, r1
    50d0:	8a e0       	ldi	r24, 0x0A	; 10
    50d2:	38 07       	cpc	r19, r24
    50d4:	49 f4       	brne	.+18     	; 0x50e8 <tc_enable+0x9c>
    50d6:	61 e0       	ldi	r22, 0x01	; 1
    50d8:	85 e0       	ldi	r24, 0x05	; 5
    50da:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    50de:	64 e0       	ldi	r22, 0x04	; 4
    50e0:	85 e0       	ldi	r24, 0x05	; 5
    50e2:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    50e6:	1b c0       	rjmp	.+54     	; 0x511e <tc_enable+0xd2>
    50e8:	20 34       	cpi	r18, 0x40	; 64
    50ea:	8a e0       	ldi	r24, 0x0A	; 10
    50ec:	38 07       	cpc	r19, r24
    50ee:	49 f4       	brne	.+18     	; 0x5102 <tc_enable+0xb6>
    50f0:	62 e0       	ldi	r22, 0x02	; 2
    50f2:	85 e0       	ldi	r24, 0x05	; 5
    50f4:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    50f8:	64 e0       	ldi	r22, 0x04	; 4
    50fa:	85 e0       	ldi	r24, 0x05	; 5
    50fc:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    5100:	0e c0       	rjmp	.+28     	; 0x511e <tc_enable+0xd2>
    5102:	21 15       	cp	r18, r1
    5104:	3b 40       	sbci	r19, 0x0B	; 11
    5106:	49 f4       	brne	.+18     	; 0x511a <tc_enable+0xce>
    5108:	61 e0       	ldi	r22, 0x01	; 1
    510a:	86 e0       	ldi	r24, 0x06	; 6
    510c:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    5110:	64 e0       	ldi	r22, 0x04	; 4
    5112:	86 e0       	ldi	r24, 0x06	; 6
    5114:	0e 94 b7 3c 	call	0x796e	; 0x796e <sysclk_enable_module>
    5118:	02 c0       	rjmp	.+4      	; 0x511e <tc_enable+0xd2>
    511a:	1f bf       	out	0x3f, r17	; 63
    511c:	10 c0       	rjmp	.+32     	; 0x513e <tc_enable+0xf2>
    511e:	80 91 d0 2c 	lds	r24, 0x2CD0	; 0x802cd0 <sleepmgr_locks+0x1>
    5122:	8f 3f       	cpi	r24, 0xFF	; 255
    5124:	09 f4       	brne	.+2      	; 0x5128 <tc_enable+0xdc>
    5126:	ff cf       	rjmp	.-2      	; 0x5126 <tc_enable+0xda>
    5128:	8f b7       	in	r24, 0x3f	; 63
    512a:	89 83       	std	Y+1, r24	; 0x01
    512c:	f8 94       	cli
    512e:	99 81       	ldd	r25, Y+1	; 0x01
    5130:	ef ec       	ldi	r30, 0xCF	; 207
    5132:	fc e2       	ldi	r31, 0x2C	; 44
    5134:	81 81       	ldd	r24, Z+1	; 0x01
    5136:	8f 5f       	subi	r24, 0xFF	; 255
    5138:	81 83       	std	Z+1, r24	; 0x01
    513a:	9f bf       	out	0x3f, r25	; 63
    513c:	1f bf       	out	0x3f, r17	; 63
    513e:	0f 90       	pop	r0
    5140:	0f 90       	pop	r0
    5142:	df 91       	pop	r29
    5144:	cf 91       	pop	r28
    5146:	1f 91       	pop	r17
    5148:	08 95       	ret

0000514a <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    514a:	81 15       	cp	r24, r1
    514c:	28 e0       	ldi	r18, 0x08	; 8
    514e:	92 07       	cpc	r25, r18
    5150:	29 f4       	brne	.+10     	; 0x515c <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    5152:	60 93 43 27 	sts	0x2743, r22	; 0x802743 <tc_tcc0_ovf_callback>
    5156:	70 93 44 27 	sts	0x2744, r23	; 0x802744 <tc_tcc0_ovf_callback+0x1>
    515a:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    515c:	80 34       	cpi	r24, 0x40	; 64
    515e:	28 e0       	ldi	r18, 0x08	; 8
    5160:	92 07       	cpc	r25, r18
    5162:	29 f4       	brne	.+10     	; 0x516e <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    5164:	60 93 37 27 	sts	0x2737, r22	; 0x802737 <tc_tcc1_ovf_callback>
    5168:	70 93 38 27 	sts	0x2738, r23	; 0x802738 <tc_tcc1_ovf_callback+0x1>
    516c:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    516e:	81 15       	cp	r24, r1
    5170:	29 e0       	ldi	r18, 0x09	; 9
    5172:	92 07       	cpc	r25, r18
    5174:	29 f4       	brne	.+10     	; 0x5180 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    5176:	60 93 2f 27 	sts	0x272F, r22	; 0x80272f <tc_tcd0_ovf_callback>
    517a:	70 93 30 27 	sts	0x2730, r23	; 0x802730 <tc_tcd0_ovf_callback+0x1>
    517e:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    5180:	80 34       	cpi	r24, 0x40	; 64
    5182:	29 e0       	ldi	r18, 0x09	; 9
    5184:	92 07       	cpc	r25, r18
    5186:	29 f4       	brne	.+10     	; 0x5192 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    5188:	60 93 23 27 	sts	0x2723, r22	; 0x802723 <tc_tcd1_ovf_callback>
    518c:	70 93 24 27 	sts	0x2724, r23	; 0x802724 <tc_tcd1_ovf_callback+0x1>
    5190:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    5192:	81 15       	cp	r24, r1
    5194:	2a e0       	ldi	r18, 0x0A	; 10
    5196:	92 07       	cpc	r25, r18
    5198:	29 f4       	brne	.+10     	; 0x51a4 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    519a:	60 93 1b 27 	sts	0x271B, r22	; 0x80271b <tc_tce0_ovf_callback>
    519e:	70 93 1c 27 	sts	0x271C, r23	; 0x80271c <tc_tce0_ovf_callback+0x1>
    51a2:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    51a4:	80 34       	cpi	r24, 0x40	; 64
    51a6:	2a e0       	ldi	r18, 0x0A	; 10
    51a8:	92 07       	cpc	r25, r18
    51aa:	29 f4       	brne	.+10     	; 0x51b6 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    51ac:	60 93 0f 27 	sts	0x270F, r22	; 0x80270f <tc_tce1_ovf_callback>
    51b0:	70 93 10 27 	sts	0x2710, r23	; 0x802710 <tc_tce1_ovf_callback+0x1>
    51b4:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    51b6:	81 15       	cp	r24, r1
    51b8:	9b 40       	sbci	r25, 0x0B	; 11
    51ba:	21 f4       	brne	.+8      	; 0x51c4 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    51bc:	60 93 07 27 	sts	0x2707, r22	; 0x802707 <tc_tcf0_ovf_callback>
    51c0:	70 93 08 27 	sts	0x2708, r23	; 0x802708 <tc_tcf0_ovf_callback+0x1>
    51c4:	08 95       	ret

000051c6 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    51c6:	cf 93       	push	r28
    51c8:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    51ca:	e0 91 45 27 	lds	r30, 0x2745	; 0x802745 <transfer>
    51ce:	f0 91 46 27 	lds	r31, 0x2746	; 0x802746 <transfer+0x1>
    51d2:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    51d4:	83 ff       	sbrs	r24, 3
    51d6:	08 c0       	rjmp	.+16     	; 0x51e8 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    51d8:	88 60       	ori	r24, 0x08	; 8
    51da:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    51dc:	83 e0       	ldi	r24, 0x03	; 3
    51de:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    51e0:	86 ef       	ldi	r24, 0xF6	; 246
    51e2:	80 93 4f 27 	sts	0x274F, r24	; 0x80274f <transfer+0xa>
    51e6:	83 c0       	rjmp	.+262    	; 0x52ee <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    51e8:	98 2f       	mov	r25, r24
    51ea:	94 71       	andi	r25, 0x14	; 20
    51ec:	31 f0       	breq	.+12     	; 0x51fa <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    51ee:	83 e0       	ldi	r24, 0x03	; 3
    51f0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    51f2:	8f ef       	ldi	r24, 0xFF	; 255
    51f4:	80 93 4f 27 	sts	0x274F, r24	; 0x80274f <transfer+0xa>
    51f8:	7a c0       	rjmp	.+244    	; 0x52ee <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    51fa:	86 ff       	sbrs	r24, 6
    51fc:	43 c0       	rjmp	.+134    	; 0x5284 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    51fe:	c5 e4       	ldi	r28, 0x45	; 69
    5200:	d7 e2       	ldi	r29, 0x27	; 39
    5202:	aa 81       	ldd	r26, Y+2	; 0x02
    5204:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    5206:	8c 81       	ldd	r24, Y+4	; 0x04
    5208:	9d 81       	ldd	r25, Y+5	; 0x05
    520a:	14 96       	adiw	r26, 0x04	; 4
    520c:	2d 91       	ld	r18, X+
    520e:	3c 91       	ld	r19, X
    5210:	15 97       	sbiw	r26, 0x05	; 5
    5212:	82 17       	cp	r24, r18
    5214:	93 07       	cpc	r25, r19
    5216:	6c f4       	brge	.+26     	; 0x5232 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    5218:	9c 01       	movw	r18, r24
    521a:	2f 5f       	subi	r18, 0xFF	; 255
    521c:	3f 4f       	sbci	r19, 0xFF	; 255
    521e:	20 93 49 27 	sts	0x2749, r18	; 0x802749 <transfer+0x4>
    5222:	30 93 4a 27 	sts	0x274A, r19	; 0x80274a <transfer+0x5>
    5226:	a8 0f       	add	r26, r24
    5228:	b9 1f       	adc	r27, r25
    522a:	11 96       	adiw	r26, 0x01	; 1
    522c:	8c 91       	ld	r24, X
    522e:	87 83       	std	Z+7, r24	; 0x07
    5230:	5e c0       	rjmp	.+188    	; 0x52ee <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    5232:	80 91 4b 27 	lds	r24, 0x274B	; 0x80274b <transfer+0x6>
    5236:	90 91 4c 27 	lds	r25, 0x274C	; 0x80274c <transfer+0x7>
    523a:	18 96       	adiw	r26, 0x08	; 8
    523c:	2d 91       	ld	r18, X+
    523e:	3c 91       	ld	r19, X
    5240:	19 97       	sbiw	r26, 0x09	; 9
    5242:	82 17       	cp	r24, r18
    5244:	93 07       	cpc	r25, r19
    5246:	c8 f4       	brcc	.+50     	; 0x527a <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    5248:	20 91 4d 27 	lds	r18, 0x274D	; 0x80274d <transfer+0x8>
    524c:	22 23       	and	r18, r18
    524e:	21 f0       	breq	.+8      	; 0x5258 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    5250:	86 81       	ldd	r24, Z+6	; 0x06
    5252:	81 60       	ori	r24, 0x01	; 1
    5254:	86 83       	std	Z+6, r24	; 0x06
    5256:	4b c0       	rjmp	.+150    	; 0x52ee <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    5258:	16 96       	adiw	r26, 0x06	; 6
    525a:	2d 91       	ld	r18, X+
    525c:	3c 91       	ld	r19, X
    525e:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    5260:	ac 01       	movw	r20, r24
    5262:	4f 5f       	subi	r20, 0xFF	; 255
    5264:	5f 4f       	sbci	r21, 0xFF	; 255
    5266:	40 93 4b 27 	sts	0x274B, r20	; 0x80274b <transfer+0x6>
    526a:	50 93 4c 27 	sts	0x274C, r21	; 0x80274c <transfer+0x7>
    526e:	d9 01       	movw	r26, r18
    5270:	a8 0f       	add	r26, r24
    5272:	b9 1f       	adc	r27, r25
    5274:	8c 91       	ld	r24, X
    5276:	87 83       	std	Z+7, r24	; 0x07
    5278:	3a c0       	rjmp	.+116    	; 0x52ee <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    527a:	83 e0       	ldi	r24, 0x03	; 3
    527c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    527e:	10 92 4f 27 	sts	0x274F, r1	; 0x80274f <transfer+0xa>
    5282:	35 c0       	rjmp	.+106    	; 0x52ee <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    5284:	88 23       	and	r24, r24
    5286:	84 f5       	brge	.+96     	; 0x52e8 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    5288:	a5 e4       	ldi	r26, 0x45	; 69
    528a:	b7 e2       	ldi	r27, 0x27	; 39
    528c:	12 96       	adiw	r26, 0x02	; 2
    528e:	cd 91       	ld	r28, X+
    5290:	dc 91       	ld	r29, X
    5292:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    5294:	16 96       	adiw	r26, 0x06	; 6
    5296:	8d 91       	ld	r24, X+
    5298:	9c 91       	ld	r25, X
    529a:	17 97       	sbiw	r26, 0x07	; 7
    529c:	28 85       	ldd	r18, Y+8	; 0x08
    529e:	39 85       	ldd	r19, Y+9	; 0x09
    52a0:	82 17       	cp	r24, r18
    52a2:	93 07       	cpc	r25, r19
    52a4:	d8 f4       	brcc	.+54     	; 0x52dc <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    52a6:	6e 81       	ldd	r22, Y+6	; 0x06
    52a8:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    52aa:	9c 01       	movw	r18, r24
    52ac:	2f 5f       	subi	r18, 0xFF	; 255
    52ae:	3f 4f       	sbci	r19, 0xFF	; 255
    52b0:	20 93 4b 27 	sts	0x274B, r18	; 0x80274b <transfer+0x6>
    52b4:	30 93 4c 27 	sts	0x274C, r19	; 0x80274c <transfer+0x7>
    52b8:	47 81       	ldd	r20, Z+7	; 0x07
    52ba:	db 01       	movw	r26, r22
    52bc:	a8 0f       	add	r26, r24
    52be:	b9 1f       	adc	r27, r25
    52c0:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    52c2:	88 85       	ldd	r24, Y+8	; 0x08
    52c4:	99 85       	ldd	r25, Y+9	; 0x09
    52c6:	28 17       	cp	r18, r24
    52c8:	39 07       	cpc	r19, r25
    52ca:	18 f4       	brcc	.+6      	; 0x52d2 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    52cc:	82 e0       	ldi	r24, 0x02	; 2
    52ce:	83 83       	std	Z+3, r24	; 0x03
    52d0:	0e c0       	rjmp	.+28     	; 0x52ee <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    52d2:	87 e0       	ldi	r24, 0x07	; 7
    52d4:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    52d6:	10 92 4f 27 	sts	0x274F, r1	; 0x80274f <transfer+0xa>
    52da:	09 c0       	rjmp	.+18     	; 0x52ee <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    52dc:	83 e0       	ldi	r24, 0x03	; 3
    52de:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    52e0:	89 ef       	ldi	r24, 0xF9	; 249
    52e2:	80 93 4f 27 	sts	0x274F, r24	; 0x80274f <transfer+0xa>
    52e6:	03 c0       	rjmp	.+6      	; 0x52ee <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    52e8:	8b ef       	ldi	r24, 0xFB	; 251
    52ea:	80 93 4f 27 	sts	0x274F, r24	; 0x80274f <transfer+0xa>
	}
}
    52ee:	df 91       	pop	r29
    52f0:	cf 91       	pop	r28
    52f2:	08 95       	ret

000052f4 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    52f4:	1f 92       	push	r1
    52f6:	0f 92       	push	r0
    52f8:	0f b6       	in	r0, 0x3f	; 63
    52fa:	0f 92       	push	r0
    52fc:	11 24       	eor	r1, r1
    52fe:	0b b6       	in	r0, 0x3b	; 59
    5300:	0f 92       	push	r0
    5302:	2f 93       	push	r18
    5304:	3f 93       	push	r19
    5306:	4f 93       	push	r20
    5308:	5f 93       	push	r21
    530a:	6f 93       	push	r22
    530c:	7f 93       	push	r23
    530e:	8f 93       	push	r24
    5310:	9f 93       	push	r25
    5312:	af 93       	push	r26
    5314:	bf 93       	push	r27
    5316:	ef 93       	push	r30
    5318:	ff 93       	push	r31
    531a:	55 df       	rcall	.-342    	; 0x51c6 <twim_interrupt_handler>
    531c:	ff 91       	pop	r31
    531e:	ef 91       	pop	r30
    5320:	bf 91       	pop	r27
    5322:	af 91       	pop	r26
    5324:	9f 91       	pop	r25
    5326:	8f 91       	pop	r24
    5328:	7f 91       	pop	r23
    532a:	6f 91       	pop	r22
    532c:	5f 91       	pop	r21
    532e:	4f 91       	pop	r20
    5330:	3f 91       	pop	r19
    5332:	2f 91       	pop	r18
    5334:	0f 90       	pop	r0
    5336:	0b be       	out	0x3b, r0	; 59
    5338:	0f 90       	pop	r0
    533a:	0f be       	out	0x3f, r0	; 63
    533c:	0f 90       	pop	r0
    533e:	1f 90       	pop	r1
    5340:	18 95       	reti

00005342 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    5342:	1f 92       	push	r1
    5344:	0f 92       	push	r0
    5346:	0f b6       	in	r0, 0x3f	; 63
    5348:	0f 92       	push	r0
    534a:	11 24       	eor	r1, r1
    534c:	0b b6       	in	r0, 0x3b	; 59
    534e:	0f 92       	push	r0
    5350:	2f 93       	push	r18
    5352:	3f 93       	push	r19
    5354:	4f 93       	push	r20
    5356:	5f 93       	push	r21
    5358:	6f 93       	push	r22
    535a:	7f 93       	push	r23
    535c:	8f 93       	push	r24
    535e:	9f 93       	push	r25
    5360:	af 93       	push	r26
    5362:	bf 93       	push	r27
    5364:	ef 93       	push	r30
    5366:	ff 93       	push	r31
    5368:	2e df       	rcall	.-420    	; 0x51c6 <twim_interrupt_handler>
    536a:	ff 91       	pop	r31
    536c:	ef 91       	pop	r30
    536e:	bf 91       	pop	r27
    5370:	af 91       	pop	r26
    5372:	9f 91       	pop	r25
    5374:	8f 91       	pop	r24
    5376:	7f 91       	pop	r23
    5378:	6f 91       	pop	r22
    537a:	5f 91       	pop	r21
    537c:	4f 91       	pop	r20
    537e:	3f 91       	pop	r19
    5380:	2f 91       	pop	r18
    5382:	0f 90       	pop	r0
    5384:	0b be       	out	0x3b, r0	; 59
    5386:	0f 90       	pop	r0
    5388:	0f be       	out	0x3f, r0	; 63
    538a:	0f 90       	pop	r0
    538c:	1f 90       	pop	r1
    538e:	18 95       	reti

00005390 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    5390:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    5392:	db 01       	movw	r26, r22
    5394:	14 96       	adiw	r26, 0x04	; 4
    5396:	8c 91       	ld	r24, X
    5398:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    539a:	88 eb       	ldi	r24, 0xB8	; 184
    539c:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    539e:	81 e0       	ldi	r24, 0x01	; 1
    53a0:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    53a2:	e5 e4       	ldi	r30, 0x45	; 69
    53a4:	f7 e2       	ldi	r31, 0x27	; 39
    53a6:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    53a8:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    53aa:	e0 ea       	ldi	r30, 0xA0	; 160
    53ac:	f0 e0       	ldi	r31, 0x00	; 0
    53ae:	82 81       	ldd	r24, Z+2	; 0x02
    53b0:	82 60       	ori	r24, 0x02	; 2
    53b2:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    53b4:	78 94       	sei

	return STATUS_OK;
}
    53b6:	80 e0       	ldi	r24, 0x00	; 0
    53b8:	08 95       	ret

000053ba <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    53ba:	cf 93       	push	r28
    53bc:	df 93       	push	r29
    53be:	1f 92       	push	r1
    53c0:	cd b7       	in	r28, 0x3d	; 61
    53c2:	de b7       	in	r29, 0x3e	; 62
    53c4:	9c 01       	movw	r18, r24
    53c6:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    53c8:	89 2b       	or	r24, r25
    53ca:	09 f4       	brne	.+2      	; 0x53ce <twi_master_transfer+0x14>
    53cc:	51 c0       	rjmp	.+162    	; 0x5470 <twi_master_transfer+0xb6>
    53ce:	30 97       	sbiw	r30, 0x00	; 0
    53d0:	09 f4       	brne	.+2      	; 0x53d4 <twi_master_transfer+0x1a>
    53d2:	50 c0       	rjmp	.+160    	; 0x5474 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    53d4:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    53d6:	80 91 4e 27 	lds	r24, 0x274E	; 0x80274e <transfer+0x9>
    53da:	88 23       	and	r24, r24
    53dc:	19 f0       	breq	.+6      	; 0x53e4 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    53de:	99 23       	and	r25, r25
    53e0:	f1 f3       	breq	.-4      	; 0x53de <twi_master_transfer+0x24>
    53e2:	4a c0       	rjmp	.+148    	; 0x5478 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    53e4:	8f b7       	in	r24, 0x3f	; 63
    53e6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    53e8:	f8 94       	cli
	return flags;
    53ea:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    53ec:	a5 e4       	ldi	r26, 0x45	; 69
    53ee:	b7 e2       	ldi	r27, 0x27	; 39
    53f0:	91 e0       	ldi	r25, 0x01	; 1
    53f2:	19 96       	adiw	r26, 0x09	; 9
    53f4:	9c 93       	st	X, r25
    53f6:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    53f8:	90 e8       	ldi	r25, 0x80	; 128
    53fa:	1a 96       	adiw	r26, 0x0a	; 10
    53fc:	9c 93       	st	X, r25
    53fe:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5400:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    5402:	2d 93       	st	X+, r18
    5404:	3c 93       	st	X, r19
    5406:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    5408:	12 96       	adiw	r26, 0x02	; 2
    540a:	6d 93       	st	X+, r22
    540c:	7c 93       	st	X, r23
    540e:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    5410:	14 96       	adiw	r26, 0x04	; 4
    5412:	1d 92       	st	X+, r1
    5414:	1c 92       	st	X, r1
    5416:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    5418:	16 96       	adiw	r26, 0x06	; 6
    541a:	1d 92       	st	X+, r1
    541c:	1c 92       	st	X, r1
    541e:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    5420:	18 96       	adiw	r26, 0x08	; 8
    5422:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    5424:	80 81       	ld	r24, Z
    5426:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    5428:	64 81       	ldd	r22, Z+4	; 0x04
    542a:	75 81       	ldd	r23, Z+5	; 0x05
    542c:	67 2b       	or	r22, r23
    542e:	11 f4       	brne	.+4      	; 0x5434 <twi_master_transfer+0x7a>
    5430:	41 11       	cpse	r20, r1
    5432:	03 c0       	rjmp	.+6      	; 0x543a <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    5434:	f9 01       	movw	r30, r18
    5436:	86 83       	std	Z+6, r24	; 0x06
    5438:	03 c0       	rjmp	.+6      	; 0x5440 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    543a:	81 60       	ori	r24, 0x01	; 1
    543c:	f9 01       	movw	r30, r18
    543e:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    5440:	e5 e4       	ldi	r30, 0x45	; 69
    5442:	f7 e2       	ldi	r31, 0x27	; 39
    5444:	92 85       	ldd	r25, Z+10	; 0x0a
    5446:	90 38       	cpi	r25, 0x80	; 128
    5448:	e9 f3       	breq	.-6      	; 0x5444 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    544a:	f9 01       	movw	r30, r18
    544c:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    544e:	83 70       	andi	r24, 0x03	; 3
    5450:	81 30       	cpi	r24, 0x01	; 1
    5452:	49 f0       	breq	.+18     	; 0x5466 <twi_master_transfer+0xac>
    5454:	a5 e4       	ldi	r26, 0x45	; 69
    5456:	b7 e2       	ldi	r27, 0x27	; 39
    5458:	ed 91       	ld	r30, X+
    545a:	fc 91       	ld	r31, X
    545c:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    545e:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    5460:	83 70       	andi	r24, 0x03	; 3
    5462:	81 30       	cpi	r24, 0x01	; 1
    5464:	c9 f7       	brne	.-14     	; 0x5458 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    5466:	e5 e4       	ldi	r30, 0x45	; 69
    5468:	f7 e2       	ldi	r31, 0x27	; 39
    546a:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    546c:	11 86       	std	Z+9, r1	; 0x09
    546e:	05 c0       	rjmp	.+10     	; 0x547a <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    5470:	88 ef       	ldi	r24, 0xF8	; 248
    5472:	03 c0       	rjmp	.+6      	; 0x547a <twi_master_transfer+0xc0>
    5474:	88 ef       	ldi	r24, 0xF8	; 248
    5476:	01 c0       	rjmp	.+2      	; 0x547a <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    5478:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    547a:	0f 90       	pop	r0
    547c:	df 91       	pop	r29
    547e:	cf 91       	pop	r28
    5480:	08 95       	ret

00005482 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    5482:	cf 93       	push	r28
    5484:	df 93       	push	r29
    5486:	1f 92       	push	r1
    5488:	1f 92       	push	r1
    548a:	cd b7       	in	r28, 0x3d	; 61
    548c:	de b7       	in	r29, 0x3e	; 62
    548e:	81 11       	cpse	r24, r1
    5490:	26 c0       	rjmp	.+76     	; 0x54de <udd_sleep_mode+0x5c>
    5492:	90 91 7c 28 	lds	r25, 0x287C	; 0x80287c <udd_b_idle>
    5496:	99 23       	and	r25, r25
    5498:	f9 f0       	breq	.+62     	; 0x54d8 <udd_sleep_mode+0x56>
    549a:	90 91 d0 2c 	lds	r25, 0x2CD0	; 0x802cd0 <sleepmgr_locks+0x1>
    549e:	91 11       	cpse	r25, r1
    54a0:	01 c0       	rjmp	.+2      	; 0x54a4 <udd_sleep_mode+0x22>
    54a2:	ff cf       	rjmp	.-2      	; 0x54a2 <udd_sleep_mode+0x20>
    54a4:	9f b7       	in	r25, 0x3f	; 63
    54a6:	9a 83       	std	Y+2, r25	; 0x02
    54a8:	f8 94       	cli
    54aa:	2a 81       	ldd	r18, Y+2	; 0x02
    54ac:	ef ec       	ldi	r30, 0xCF	; 207
    54ae:	fc e2       	ldi	r31, 0x2C	; 44
    54b0:	91 81       	ldd	r25, Z+1	; 0x01
    54b2:	91 50       	subi	r25, 0x01	; 1
    54b4:	91 83       	std	Z+1, r25	; 0x01
    54b6:	2f bf       	out	0x3f, r18	; 63
    54b8:	0f c0       	rjmp	.+30     	; 0x54d8 <udd_sleep_mode+0x56>
    54ba:	90 91 d0 2c 	lds	r25, 0x2CD0	; 0x802cd0 <sleepmgr_locks+0x1>
    54be:	9f 3f       	cpi	r25, 0xFF	; 255
    54c0:	09 f4       	brne	.+2      	; 0x54c4 <udd_sleep_mode+0x42>
    54c2:	ff cf       	rjmp	.-2      	; 0x54c2 <udd_sleep_mode+0x40>
    54c4:	9f b7       	in	r25, 0x3f	; 63
    54c6:	99 83       	std	Y+1, r25	; 0x01
    54c8:	f8 94       	cli
    54ca:	29 81       	ldd	r18, Y+1	; 0x01
    54cc:	ef ec       	ldi	r30, 0xCF	; 207
    54ce:	fc e2       	ldi	r31, 0x2C	; 44
    54d0:	91 81       	ldd	r25, Z+1	; 0x01
    54d2:	9f 5f       	subi	r25, 0xFF	; 255
    54d4:	91 83       	std	Z+1, r25	; 0x01
    54d6:	2f bf       	out	0x3f, r18	; 63
    54d8:	80 93 7c 28 	sts	0x287C, r24	; 0x80287c <udd_b_idle>
    54dc:	05 c0       	rjmp	.+10     	; 0x54e8 <udd_sleep_mode+0x66>
    54de:	90 91 7c 28 	lds	r25, 0x287C	; 0x80287c <udd_b_idle>
    54e2:	99 23       	and	r25, r25
    54e4:	51 f3       	breq	.-44     	; 0x54ba <udd_sleep_mode+0x38>
    54e6:	f8 cf       	rjmp	.-16     	; 0x54d8 <udd_sleep_mode+0x56>
    54e8:	0f 90       	pop	r0
    54ea:	0f 90       	pop	r0
    54ec:	df 91       	pop	r29
    54ee:	cf 91       	pop	r28
    54f0:	08 95       	ret

000054f2 <udd_ctrl_init>:
    54f2:	0f 93       	push	r16
    54f4:	e8 ec       	ldi	r30, 0xC8	; 200
    54f6:	f4 e0       	ldi	r31, 0x04	; 4
    54f8:	80 81       	ld	r24, Z
    54fa:	8f 7d       	andi	r24, 0xDF	; 223
    54fc:	80 83       	st	Z, r24
    54fe:	80 81       	ld	r24, Z
    5500:	8f 7d       	andi	r24, 0xDF	; 223
    5502:	80 83       	st	Z, r24
    5504:	e0 e5       	ldi	r30, 0x50	; 80
    5506:	f8 e2       	ldi	r31, 0x28	; 40
    5508:	02 e0       	ldi	r16, 0x02	; 2
    550a:	05 93       	las	Z, r16
    550c:	10 92 52 28 	sts	0x2852, r1	; 0x802852 <udd_sram+0x16>
    5510:	10 92 53 28 	sts	0x2853, r1	; 0x802853 <udd_sram+0x17>
    5514:	00 e2       	ldi	r16, 0x20	; 32
    5516:	06 93       	lac	Z, r16
    5518:	00 e4       	ldi	r16, 0x40	; 64
    551a:	06 93       	lac	Z, r16
    551c:	e8 e4       	ldi	r30, 0x48	; 72
    551e:	f8 e2       	ldi	r31, 0x28	; 40
    5520:	00 e4       	ldi	r16, 0x40	; 64
    5522:	06 93       	lac	Z, r16
    5524:	ef eb       	ldi	r30, 0xBF	; 191
    5526:	fc e2       	ldi	r31, 0x2C	; 44
    5528:	14 86       	std	Z+12, r1	; 0x0c
    552a:	15 86       	std	Z+13, r1	; 0x0d
    552c:	16 86       	std	Z+14, r1	; 0x0e
    552e:	17 86       	std	Z+15, r1	; 0x0f
    5530:	12 86       	std	Z+10, r1	; 0x0a
    5532:	13 86       	std	Z+11, r1	; 0x0b
    5534:	10 92 39 28 	sts	0x2839, r1	; 0x802839 <udd_ep_control_state>
    5538:	0f 91       	pop	r16
    553a:	08 95       	ret

0000553c <udd_ctrl_stall_data>:
    553c:	0f 93       	push	r16
    553e:	85 e0       	ldi	r24, 0x05	; 5
    5540:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <udd_ep_control_state>
    5544:	e1 e5       	ldi	r30, 0x51	; 81
    5546:	f8 e2       	ldi	r31, 0x28	; 40
    5548:	04 e0       	ldi	r16, 0x04	; 4
    554a:	05 93       	las	Z, r16
    554c:	e9 e4       	ldi	r30, 0x49	; 73
    554e:	f8 e2       	ldi	r31, 0x28	; 40
    5550:	04 e0       	ldi	r16, 0x04	; 4
    5552:	05 93       	las	Z, r16
    5554:	0f 91       	pop	r16
    5556:	08 95       	ret

00005558 <udd_ctrl_send_zlp_in>:
    5558:	0f 93       	push	r16
    555a:	83 e0       	ldi	r24, 0x03	; 3
    555c:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <udd_ep_control_state>
    5560:	10 92 52 28 	sts	0x2852, r1	; 0x802852 <udd_sram+0x16>
    5564:	10 92 53 28 	sts	0x2853, r1	; 0x802853 <udd_sram+0x17>
    5568:	e0 e5       	ldi	r30, 0x50	; 80
    556a:	f8 e2       	ldi	r31, 0x28	; 40
    556c:	02 e0       	ldi	r16, 0x02	; 2
    556e:	06 93       	lac	Z, r16
    5570:	0f 91       	pop	r16
    5572:	08 95       	ret

00005574 <udd_ctrl_endofrequest>:
    5574:	e0 91 cb 2c 	lds	r30, 0x2CCB	; 0x802ccb <udd_g_ctrlreq+0xc>
    5578:	f0 91 cc 2c 	lds	r31, 0x2CCC	; 0x802ccc <udd_g_ctrlreq+0xd>
    557c:	30 97       	sbiw	r30, 0x00	; 0
    557e:	09 f0       	breq	.+2      	; 0x5582 <udd_ctrl_endofrequest+0xe>
    5580:	19 95       	eicall
    5582:	08 95       	ret

00005584 <udd_ctrl_in_sent>:
    5584:	0f 93       	push	r16
    5586:	cf 93       	push	r28
    5588:	df 93       	push	r29
    558a:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <udd_ep_control_state>
    558e:	83 30       	cpi	r24, 0x03	; 3
    5590:	19 f4       	brne	.+6      	; 0x5598 <udd_ctrl_in_sent+0x14>
    5592:	f0 df       	rcall	.-32     	; 0x5574 <udd_ctrl_endofrequest>
    5594:	ae df       	rcall	.-164    	; 0x54f2 <udd_ctrl_init>
    5596:	5e c0       	rjmp	.+188    	; 0x5654 <udd_ctrl_in_sent+0xd0>
    5598:	80 91 35 28 	lds	r24, 0x2835	; 0x802835 <udd_ctrl_payload_nb_trans>
    559c:	90 91 36 28 	lds	r25, 0x2836	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    55a0:	c0 91 c9 2c 	lds	r28, 0x2CC9	; 0x802cc9 <udd_g_ctrlreq+0xa>
    55a4:	d0 91 ca 2c 	lds	r29, 0x2CCA	; 0x802cca <udd_g_ctrlreq+0xb>
    55a8:	c8 1b       	sub	r28, r24
    55aa:	d9 0b       	sbc	r29, r25
    55ac:	71 f5       	brne	.+92     	; 0x560a <udd_ctrl_in_sent+0x86>
    55ae:	20 91 37 28 	lds	r18, 0x2837	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    55b2:	30 91 38 28 	lds	r19, 0x2838	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
    55b6:	82 0f       	add	r24, r18
    55b8:	93 1f       	adc	r25, r19
    55ba:	80 93 37 28 	sts	0x2837, r24	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    55be:	90 93 38 28 	sts	0x2838, r25	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
    55c2:	20 91 c5 2c 	lds	r18, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    55c6:	30 91 c6 2c 	lds	r19, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    55ca:	82 17       	cp	r24, r18
    55cc:	93 07       	cpc	r25, r19
    55ce:	21 f0       	breq	.+8      	; 0x55d8 <udd_ctrl_in_sent+0x54>
    55d0:	80 91 50 27 	lds	r24, 0x2750	; 0x802750 <b_shortpacket.5472>
    55d4:	88 23       	and	r24, r24
    55d6:	41 f0       	breq	.+16     	; 0x55e8 <udd_ctrl_in_sent+0x64>
    55d8:	84 e0       	ldi	r24, 0x04	; 4
    55da:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <udd_ep_control_state>
    55de:	e8 e4       	ldi	r30, 0x48	; 72
    55e0:	f8 e2       	ldi	r31, 0x28	; 40
    55e2:	02 e0       	ldi	r16, 0x02	; 2
    55e4:	06 93       	lac	Z, r16
    55e6:	36 c0       	rjmp	.+108    	; 0x5654 <udd_ctrl_in_sent+0xd0>
    55e8:	e0 91 cd 2c 	lds	r30, 0x2CCD	; 0x802ccd <udd_g_ctrlreq+0xe>
    55ec:	f0 91 ce 2c 	lds	r31, 0x2CCE	; 0x802cce <udd_g_ctrlreq+0xf>
    55f0:	30 97       	sbiw	r30, 0x00	; 0
    55f2:	99 f0       	breq	.+38     	; 0x561a <udd_ctrl_in_sent+0x96>
    55f4:	19 95       	eicall
    55f6:	88 23       	and	r24, r24
    55f8:	81 f0       	breq	.+32     	; 0x561a <udd_ctrl_in_sent+0x96>
    55fa:	10 92 35 28 	sts	0x2835, r1	; 0x802835 <udd_ctrl_payload_nb_trans>
    55fe:	10 92 36 28 	sts	0x2836, r1	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    5602:	c0 91 c9 2c 	lds	r28, 0x2CC9	; 0x802cc9 <udd_g_ctrlreq+0xa>
    5606:	d0 91 ca 2c 	lds	r29, 0x2CCA	; 0x802cca <udd_g_ctrlreq+0xb>
    560a:	c0 34       	cpi	r28, 0x40	; 64
    560c:	d1 05       	cpc	r29, r1
    560e:	28 f0       	brcs	.+10     	; 0x561a <udd_ctrl_in_sent+0x96>
    5610:	10 92 50 27 	sts	0x2750, r1	; 0x802750 <b_shortpacket.5472>
    5614:	c0 e4       	ldi	r28, 0x40	; 64
    5616:	d0 e0       	ldi	r29, 0x00	; 0
    5618:	03 c0       	rjmp	.+6      	; 0x5620 <udd_ctrl_in_sent+0x9c>
    561a:	81 e0       	ldi	r24, 0x01	; 1
    561c:	80 93 50 27 	sts	0x2750, r24	; 0x802750 <b_shortpacket.5472>
    5620:	ec e3       	ldi	r30, 0x3C	; 60
    5622:	f8 e2       	ldi	r31, 0x28	; 40
    5624:	c6 8b       	std	Z+22, r28	; 0x16
    5626:	d7 8b       	std	Z+23, r29	; 0x17
    5628:	80 91 35 28 	lds	r24, 0x2835	; 0x802835 <udd_ctrl_payload_nb_trans>
    562c:	90 91 36 28 	lds	r25, 0x2836	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    5630:	20 91 c7 2c 	lds	r18, 0x2CC7	; 0x802cc7 <udd_g_ctrlreq+0x8>
    5634:	30 91 c8 2c 	lds	r19, 0x2CC8	; 0x802cc8 <udd_g_ctrlreq+0x9>
    5638:	28 0f       	add	r18, r24
    563a:	39 1f       	adc	r19, r25
    563c:	20 8f       	std	Z+24, r18	; 0x18
    563e:	31 8f       	std	Z+25, r19	; 0x19
    5640:	c8 0f       	add	r28, r24
    5642:	d9 1f       	adc	r29, r25
    5644:	c0 93 35 28 	sts	0x2835, r28	; 0x802835 <udd_ctrl_payload_nb_trans>
    5648:	d0 93 36 28 	sts	0x2836, r29	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    564c:	e0 e5       	ldi	r30, 0x50	; 80
    564e:	f8 e2       	ldi	r31, 0x28	; 40
    5650:	02 e0       	ldi	r16, 0x02	; 2
    5652:	06 93       	lac	Z, r16
    5654:	df 91       	pop	r29
    5656:	cf 91       	pop	r28
    5658:	0f 91       	pop	r16
    565a:	08 95       	ret

0000565c <udd_ep_get_size>:
    565c:	fc 01       	movw	r30, r24
    565e:	81 81       	ldd	r24, Z+1	; 0x01
    5660:	e8 2f       	mov	r30, r24
    5662:	e7 70       	andi	r30, 0x07	; 7
    5664:	8e 2f       	mov	r24, r30
    5666:	90 e0       	ldi	r25, 0x00	; 0
    5668:	fc 01       	movw	r30, r24
    566a:	31 97       	sbiw	r30, 0x01	; 1
    566c:	e7 30       	cpi	r30, 0x07	; 7
    566e:	f1 05       	cpc	r31, r1
    5670:	d8 f4       	brcc	.+54     	; 0x56a8 <udd_ep_get_size+0x4c>
    5672:	88 27       	eor	r24, r24
    5674:	e2 50       	subi	r30, 0x02	; 2
    5676:	ff 4f       	sbci	r31, 0xFF	; 255
    5678:	8f 4f       	sbci	r24, 0xFF	; 255
    567a:	0c 94 44 45 	jmp	0x8a88	; 0x8a88 <__tablejump2__>
    567e:	80 e1       	ldi	r24, 0x10	; 16
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	08 95       	ret
    5684:	80 e2       	ldi	r24, 0x20	; 32
    5686:	90 e0       	ldi	r25, 0x00	; 0
    5688:	08 95       	ret
    568a:	80 e4       	ldi	r24, 0x40	; 64
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	08 95       	ret
    5690:	80 e8       	ldi	r24, 0x80	; 128
    5692:	90 e0       	ldi	r25, 0x00	; 0
    5694:	08 95       	ret
    5696:	80 e0       	ldi	r24, 0x00	; 0
    5698:	91 e0       	ldi	r25, 0x01	; 1
    569a:	08 95       	ret
    569c:	80 e0       	ldi	r24, 0x00	; 0
    569e:	92 e0       	ldi	r25, 0x02	; 2
    56a0:	08 95       	ret
    56a2:	8f ef       	ldi	r24, 0xFF	; 255
    56a4:	93 e0       	ldi	r25, 0x03	; 3
    56a6:	08 95       	ret
    56a8:	88 e0       	ldi	r24, 0x08	; 8
    56aa:	90 e0       	ldi	r25, 0x00	; 0
    56ac:	08 95       	ret

000056ae <udd_ep_get_job>:
    56ae:	28 2f       	mov	r18, r24
    56b0:	2f 70       	andi	r18, 0x0F	; 15
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	22 0f       	add	r18, r18
    56b6:	33 1f       	adc	r19, r19
    56b8:	08 2e       	mov	r0, r24
    56ba:	00 0c       	add	r0, r0
    56bc:	99 0b       	sbc	r25, r25
    56be:	88 27       	eor	r24, r24
    56c0:	99 0f       	add	r25, r25
    56c2:	88 1f       	adc	r24, r24
    56c4:	99 27       	eor	r25, r25
    56c6:	82 0f       	add	r24, r18
    56c8:	93 1f       	adc	r25, r19
    56ca:	02 97       	sbiw	r24, 0x02	; 2
    56cc:	9c 01       	movw	r18, r24
    56ce:	22 0f       	add	r18, r18
    56d0:	33 1f       	adc	r19, r19
    56d2:	22 0f       	add	r18, r18
    56d4:	33 1f       	adc	r19, r19
    56d6:	22 0f       	add	r18, r18
    56d8:	33 1f       	adc	r19, r19
    56da:	82 0f       	add	r24, r18
    56dc:	93 1f       	adc	r25, r19
    56de:	8f 52       	subi	r24, 0x2F	; 47
    56e0:	98 4d       	sbci	r25, 0xD8	; 216
    56e2:	08 95       	ret

000056e4 <udd_ctrl_interrupt_tc_setup>:
    56e4:	0f 93       	push	r16
    56e6:	cf 93       	push	r28
    56e8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    56ec:	80 ff       	sbrs	r24, 0
    56ee:	65 c0       	rjmp	.+202    	; 0x57ba <udd_ctrl_interrupt_tc_setup+0xd6>
    56f0:	81 e0       	ldi	r24, 0x01	; 1
    56f2:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    56f6:	e8 e4       	ldi	r30, 0x48	; 72
    56f8:	f8 e2       	ldi	r31, 0x28	; 40
    56fa:	00 e8       	ldi	r16, 0x80	; 128
    56fc:	06 93       	lac	Z, r16
    56fe:	e0 e5       	ldi	r30, 0x50	; 80
    5700:	f8 e2       	ldi	r31, 0x28	; 40
    5702:	00 e8       	ldi	r16, 0x80	; 128
    5704:	06 93       	lac	Z, r16
    5706:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    570a:	e8 e4       	ldi	r30, 0x48	; 72
    570c:	f8 e2       	ldi	r31, 0x28	; 40
    570e:	00 e1       	ldi	r16, 0x10	; 16
    5710:	06 93       	lac	Z, r16
    5712:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <udd_ep_control_state>
    5716:	88 23       	and	r24, r24
    5718:	29 f0       	breq	.+10     	; 0x5724 <udd_ctrl_interrupt_tc_setup+0x40>
    571a:	83 50       	subi	r24, 0x03	; 3
    571c:	82 30       	cpi	r24, 0x02	; 2
    571e:	08 f4       	brcc	.+2      	; 0x5722 <udd_ctrl_interrupt_tc_setup+0x3e>
    5720:	29 df       	rcall	.-430    	; 0x5574 <udd_ctrl_endofrequest>
    5722:	e7 de       	rcall	.-562    	; 0x54f2 <udd_ctrl_init>
    5724:	80 91 4a 28 	lds	r24, 0x284A	; 0x80284a <udd_sram+0xe>
    5728:	90 91 4b 28 	lds	r25, 0x284B	; 0x80284b <udd_sram+0xf>
    572c:	08 97       	sbiw	r24, 0x08	; 8
    572e:	09 f0       	breq	.+2      	; 0x5732 <udd_ctrl_interrupt_tc_setup+0x4e>
    5730:	46 c0       	rjmp	.+140    	; 0x57be <udd_ctrl_interrupt_tc_setup+0xda>
    5732:	88 e0       	ldi	r24, 0x08	; 8
    5734:	e5 ef       	ldi	r30, 0xF5	; 245
    5736:	f7 e2       	ldi	r31, 0x27	; 39
    5738:	af eb       	ldi	r26, 0xBF	; 191
    573a:	bc e2       	ldi	r27, 0x2C	; 44
    573c:	01 90       	ld	r0, Z+
    573e:	0d 92       	st	X+, r0
    5740:	8a 95       	dec	r24
    5742:	e1 f7       	brne	.-8      	; 0x573c <udd_ctrl_interrupt_tc_setup+0x58>
    5744:	e8 ec       	ldi	r30, 0xC8	; 200
    5746:	f4 e0       	ldi	r31, 0x04	; 4
    5748:	80 81       	ld	r24, Z
    574a:	80 62       	ori	r24, 0x20	; 32
    574c:	80 83       	st	Z, r24
    574e:	80 81       	ld	r24, Z
    5750:	80 62       	ori	r24, 0x20	; 32
    5752:	80 83       	st	Z, r24
    5754:	0e 94 a0 41 	call	0x8340	; 0x8340 <udc_process_setup>
    5758:	c8 2f       	mov	r28, r24
    575a:	81 11       	cpse	r24, r1
    575c:	03 c0       	rjmp	.+6      	; 0x5764 <udd_ctrl_interrupt_tc_setup+0x80>
    575e:	ee de       	rcall	.-548    	; 0x553c <udd_ctrl_stall_data>
    5760:	c1 e0       	ldi	r28, 0x01	; 1
    5762:	2e c0       	rjmp	.+92     	; 0x57c0 <udd_ctrl_interrupt_tc_setup+0xdc>
    5764:	80 91 bf 2c 	lds	r24, 0x2CBF	; 0x802cbf <udd_g_ctrlreq>
    5768:	88 23       	and	r24, r24
    576a:	6c f4       	brge	.+26     	; 0x5786 <udd_ctrl_interrupt_tc_setup+0xa2>
    576c:	10 92 37 28 	sts	0x2837, r1	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    5770:	10 92 38 28 	sts	0x2838, r1	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
    5774:	10 92 35 28 	sts	0x2835, r1	; 0x802835 <udd_ctrl_payload_nb_trans>
    5778:	10 92 36 28 	sts	0x2836, r1	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    577c:	82 e0       	ldi	r24, 0x02	; 2
    577e:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <udd_ep_control_state>
    5782:	00 df       	rcall	.-512    	; 0x5584 <udd_ctrl_in_sent>
    5784:	1d c0       	rjmp	.+58     	; 0x57c0 <udd_ctrl_interrupt_tc_setup+0xdc>
    5786:	80 91 c5 2c 	lds	r24, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    578a:	90 91 c6 2c 	lds	r25, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    578e:	89 2b       	or	r24, r25
    5790:	11 f4       	brne	.+4      	; 0x5796 <udd_ctrl_interrupt_tc_setup+0xb2>
    5792:	e2 de       	rcall	.-572    	; 0x5558 <udd_ctrl_send_zlp_in>
    5794:	15 c0       	rjmp	.+42     	; 0x57c0 <udd_ctrl_interrupt_tc_setup+0xdc>
    5796:	10 92 37 28 	sts	0x2837, r1	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    579a:	10 92 38 28 	sts	0x2838, r1	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
    579e:	10 92 35 28 	sts	0x2835, r1	; 0x802835 <udd_ctrl_payload_nb_trans>
    57a2:	10 92 36 28 	sts	0x2836, r1	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    57a6:	81 e0       	ldi	r24, 0x01	; 1
    57a8:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <udd_ep_control_state>
    57ac:	e8 e4       	ldi	r30, 0x48	; 72
    57ae:	f8 e2       	ldi	r31, 0x28	; 40
    57b0:	02 e0       	ldi	r16, 0x02	; 2
    57b2:	06 93       	lac	Z, r16
    57b4:	00 e2       	ldi	r16, 0x20	; 32
    57b6:	06 93       	lac	Z, r16
    57b8:	03 c0       	rjmp	.+6      	; 0x57c0 <udd_ctrl_interrupt_tc_setup+0xdc>
    57ba:	c0 e0       	ldi	r28, 0x00	; 0
    57bc:	01 c0       	rjmp	.+2      	; 0x57c0 <udd_ctrl_interrupt_tc_setup+0xdc>
    57be:	c1 e0       	ldi	r28, 0x01	; 1
    57c0:	8c 2f       	mov	r24, r28
    57c2:	cf 91       	pop	r28
    57c4:	0f 91       	pop	r16
    57c6:	08 95       	ret

000057c8 <udd_ep_trans_complet>:
    57c8:	8f 92       	push	r8
    57ca:	9f 92       	push	r9
    57cc:	af 92       	push	r10
    57ce:	bf 92       	push	r11
    57d0:	df 92       	push	r13
    57d2:	ef 92       	push	r14
    57d4:	ff 92       	push	r15
    57d6:	0f 93       	push	r16
    57d8:	1f 93       	push	r17
    57da:	cf 93       	push	r28
    57dc:	df 93       	push	r29
    57de:	d8 2e       	mov	r13, r24
    57e0:	66 df       	rcall	.-308    	; 0x56ae <udd_ep_get_job>
    57e2:	8c 01       	movw	r16, r24
    57e4:	cd 2d       	mov	r28, r13
    57e6:	cf 70       	andi	r28, 0x0F	; 15
    57e8:	d0 e0       	ldi	r29, 0x00	; 0
    57ea:	ce 01       	movw	r24, r28
    57ec:	88 0f       	add	r24, r24
    57ee:	99 1f       	adc	r25, r25
    57f0:	cd 2d       	mov	r28, r13
    57f2:	0d 2c       	mov	r0, r13
    57f4:	00 0c       	add	r0, r0
    57f6:	dd 0b       	sbc	r29, r29
    57f8:	cc 27       	eor	r28, r28
    57fa:	dd 0f       	add	r29, r29
    57fc:	cc 1f       	adc	r28, r28
    57fe:	dd 27       	eor	r29, r29
    5800:	c8 0f       	add	r28, r24
    5802:	d9 1f       	adc	r29, r25
    5804:	ce 01       	movw	r24, r28
    5806:	88 0f       	add	r24, r24
    5808:	99 1f       	adc	r25, r25
    580a:	88 0f       	add	r24, r24
    580c:	99 1f       	adc	r25, r25
    580e:	88 0f       	add	r24, r24
    5810:	99 1f       	adc	r25, r25
    5812:	9c 01       	movw	r18, r24
    5814:	28 5b       	subi	r18, 0xB8	; 184
    5816:	37 4d       	sbci	r19, 0xD7	; 215
    5818:	79 01       	movw	r14, r18
    581a:	c9 01       	movw	r24, r18
    581c:	1f df       	rcall	.-450    	; 0x565c <udd_ep_get_size>
    581e:	4c 01       	movw	r8, r24
    5820:	dd 20       	and	r13, r13
    5822:	0c f0       	brlt	.+2      	; 0x5826 <udd_ep_trans_complet+0x5e>
    5824:	7b c0       	rjmp	.+246    	; 0x591c <udd_ep_trans_complet+0x154>
    5826:	fe 01       	movw	r30, r28
    5828:	ee 0f       	add	r30, r30
    582a:	ff 1f       	adc	r31, r31
    582c:	ee 0f       	add	r30, r30
    582e:	ff 1f       	adc	r31, r31
    5830:	ee 0f       	add	r30, r30
    5832:	ff 1f       	adc	r31, r31
    5834:	e4 5c       	subi	r30, 0xC4	; 196
    5836:	f7 4d       	sbci	r31, 0xD7	; 215
    5838:	22 89       	ldd	r18, Z+18	; 0x12
    583a:	33 89       	ldd	r19, Z+19	; 0x13
    583c:	d8 01       	movw	r26, r16
    583e:	15 96       	adiw	r26, 0x05	; 5
    5840:	8d 91       	ld	r24, X+
    5842:	9c 91       	ld	r25, X
    5844:	16 97       	sbiw	r26, 0x06	; 6
    5846:	82 0f       	add	r24, r18
    5848:	93 1f       	adc	r25, r19
    584a:	15 96       	adiw	r26, 0x05	; 5
    584c:	8d 93       	st	X+, r24
    584e:	9c 93       	st	X, r25
    5850:	16 97       	sbiw	r26, 0x06	; 6
    5852:	13 96       	adiw	r26, 0x03	; 3
    5854:	2d 91       	ld	r18, X+
    5856:	3c 91       	ld	r19, X
    5858:	14 97       	sbiw	r26, 0x04	; 4
    585a:	82 17       	cp	r24, r18
    585c:	93 07       	cpc	r25, r19
    585e:	09 f4       	brne	.+2      	; 0x5862 <udd_ep_trans_complet+0x9a>
    5860:	47 c0       	rjmp	.+142    	; 0x58f0 <udd_ep_trans_complet+0x128>
    5862:	28 1b       	sub	r18, r24
    5864:	39 0b       	sbc	r19, r25
    5866:	21 15       	cp	r18, r1
    5868:	b4 e0       	ldi	r27, 0x04	; 4
    586a:	3b 07       	cpc	r19, r27
    586c:	40 f0       	brcs	.+16     	; 0x587e <udd_ep_trans_complet+0xb6>
    586e:	2f ef       	ldi	r18, 0xFF	; 255
    5870:	33 e0       	ldi	r19, 0x03	; 3
    5872:	c9 01       	movw	r24, r18
    5874:	b4 01       	movw	r22, r8
    5876:	0e 94 df 44 	call	0x89be	; 0x89be <__udivmodhi4>
    587a:	28 1b       	sub	r18, r24
    587c:	39 0b       	sbc	r19, r25
    587e:	f8 01       	movw	r30, r16
    5880:	80 81       	ld	r24, Z
    5882:	81 ff       	sbrs	r24, 1
    5884:	0a c0       	rjmp	.+20     	; 0x589a <udd_ep_trans_complet+0xd2>
    5886:	c9 01       	movw	r24, r18
    5888:	b4 01       	movw	r22, r8
    588a:	0e 94 df 44 	call	0x89be	; 0x89be <__udivmodhi4>
    588e:	41 e0       	ldi	r20, 0x01	; 1
    5890:	89 2b       	or	r24, r25
    5892:	09 f0       	breq	.+2      	; 0x5896 <udd_ep_trans_complet+0xce>
    5894:	40 e0       	ldi	r20, 0x00	; 0
    5896:	84 2f       	mov	r24, r20
    5898:	01 c0       	rjmp	.+2      	; 0x589c <udd_ep_trans_complet+0xd4>
    589a:	80 e0       	ldi	r24, 0x00	; 0
    589c:	d8 01       	movw	r26, r16
    589e:	9c 91       	ld	r25, X
    58a0:	80 fb       	bst	r24, 0
    58a2:	91 f9       	bld	r25, 1
    58a4:	9c 93       	st	X, r25
    58a6:	fe 01       	movw	r30, r28
    58a8:	ee 0f       	add	r30, r30
    58aa:	ff 1f       	adc	r31, r31
    58ac:	ee 0f       	add	r30, r30
    58ae:	ff 1f       	adc	r31, r31
    58b0:	ee 0f       	add	r30, r30
    58b2:	ff 1f       	adc	r31, r31
    58b4:	e4 5c       	subi	r30, 0xC4	; 196
    58b6:	f7 4d       	sbci	r31, 0xD7	; 215
    58b8:	12 8a       	std	Z+18, r1	; 0x12
    58ba:	13 8a       	std	Z+19, r1	; 0x13
    58bc:	26 87       	std	Z+14, r18	; 0x0e
    58be:	37 87       	std	Z+15, r19	; 0x0f
    58c0:	11 96       	adiw	r26, 0x01	; 1
    58c2:	2d 91       	ld	r18, X+
    58c4:	3c 91       	ld	r19, X
    58c6:	12 97       	sbiw	r26, 0x02	; 2
    58c8:	15 96       	adiw	r26, 0x05	; 5
    58ca:	8d 91       	ld	r24, X+
    58cc:	9c 91       	ld	r25, X
    58ce:	16 97       	sbiw	r26, 0x06	; 6
    58d0:	82 0f       	add	r24, r18
    58d2:	93 1f       	adc	r25, r19
    58d4:	cc 0f       	add	r28, r28
    58d6:	dd 1f       	adc	r29, r29
    58d8:	cc 0f       	add	r28, r28
    58da:	dd 1f       	adc	r29, r29
    58dc:	cc 0f       	add	r28, r28
    58de:	dd 1f       	adc	r29, r29
    58e0:	c4 5b       	subi	r28, 0xB4	; 180
    58e2:	d7 4d       	sbci	r29, 0xD7	; 215
    58e4:	88 83       	st	Y, r24
    58e6:	99 83       	std	Y+1, r25	; 0x01
    58e8:	f7 01       	movw	r30, r14
    58ea:	02 e0       	ldi	r16, 0x02	; 2
    58ec:	06 93       	lac	Z, r16
    58ee:	e4 c0       	rjmp	.+456    	; 0x5ab8 <udd_ep_trans_complet+0x2f0>
    58f0:	d8 01       	movw	r26, r16
    58f2:	8c 91       	ld	r24, X
    58f4:	81 ff       	sbrs	r24, 1
    58f6:	cd c0       	rjmp	.+410    	; 0x5a92 <udd_ep_trans_complet+0x2ca>
    58f8:	8d 7f       	andi	r24, 0xFD	; 253
    58fa:	8c 93       	st	X, r24
    58fc:	cc 0f       	add	r28, r28
    58fe:	dd 1f       	adc	r29, r29
    5900:	cc 0f       	add	r28, r28
    5902:	dd 1f       	adc	r29, r29
    5904:	cc 0f       	add	r28, r28
    5906:	dd 1f       	adc	r29, r29
    5908:	c4 5c       	subi	r28, 0xC4	; 196
    590a:	d7 4d       	sbci	r29, 0xD7	; 215
    590c:	1a 8a       	std	Y+18, r1	; 0x12
    590e:	1b 8a       	std	Y+19, r1	; 0x13
    5910:	1e 86       	std	Y+14, r1	; 0x0e
    5912:	1f 86       	std	Y+15, r1	; 0x0f
    5914:	f7 01       	movw	r30, r14
    5916:	02 e0       	ldi	r16, 0x02	; 2
    5918:	06 93       	lac	Z, r16
    591a:	ce c0       	rjmp	.+412    	; 0x5ab8 <udd_ep_trans_complet+0x2f0>
    591c:	fe 01       	movw	r30, r28
    591e:	ee 0f       	add	r30, r30
    5920:	ff 1f       	adc	r31, r31
    5922:	ee 0f       	add	r30, r30
    5924:	ff 1f       	adc	r31, r31
    5926:	ee 0f       	add	r30, r30
    5928:	ff 1f       	adc	r31, r31
    592a:	e4 5c       	subi	r30, 0xC4	; 196
    592c:	f7 4d       	sbci	r31, 0xD7	; 215
    592e:	a6 84       	ldd	r10, Z+14	; 0x0e
    5930:	b7 84       	ldd	r11, Z+15	; 0x0f
    5932:	d8 01       	movw	r26, r16
    5934:	8c 91       	ld	r24, X
    5936:	82 ff       	sbrs	r24, 2
    5938:	1b c0       	rjmp	.+54     	; 0x5970 <udd_ep_trans_complet+0x1a8>
    593a:	11 96       	adiw	r26, 0x01	; 1
    593c:	ed 91       	ld	r30, X+
    593e:	fc 91       	ld	r31, X
    5940:	12 97       	sbiw	r26, 0x02	; 2
    5942:	15 96       	adiw	r26, 0x05	; 5
    5944:	2d 91       	ld	r18, X+
    5946:	3c 91       	ld	r19, X
    5948:	16 97       	sbiw	r26, 0x06	; 6
    594a:	13 96       	adiw	r26, 0x03	; 3
    594c:	8d 91       	ld	r24, X+
    594e:	9c 91       	ld	r25, X
    5950:	14 97       	sbiw	r26, 0x04	; 4
    5952:	b4 01       	movw	r22, r8
    5954:	0e 94 df 44 	call	0x89be	; 0x89be <__udivmodhi4>
    5958:	b0 e4       	ldi	r27, 0x40	; 64
    595a:	db 9e       	mul	r13, r27
    595c:	b0 01       	movw	r22, r0
    595e:	11 24       	eor	r1, r1
    5960:	6f 5e       	subi	r22, 0xEF	; 239
    5962:	78 4d       	sbci	r23, 0xD8	; 216
    5964:	ac 01       	movw	r20, r24
    5966:	cf 01       	movw	r24, r30
    5968:	82 0f       	add	r24, r18
    596a:	93 1f       	adc	r25, r19
    596c:	0e 94 ee 47 	call	0x8fdc	; 0x8fdc <memcpy>
    5970:	f8 01       	movw	r30, r16
    5972:	25 81       	ldd	r18, Z+5	; 0x05
    5974:	36 81       	ldd	r19, Z+6	; 0x06
    5976:	2a 0d       	add	r18, r10
    5978:	3b 1d       	adc	r19, r11
    597a:	25 83       	std	Z+5, r18	; 0x05
    597c:	36 83       	std	Z+6, r19	; 0x06
    597e:	83 81       	ldd	r24, Z+3	; 0x03
    5980:	94 81       	ldd	r25, Z+4	; 0x04
    5982:	82 17       	cp	r24, r18
    5984:	93 07       	cpc	r25, r19
    5986:	68 f4       	brcc	.+26     	; 0x59a2 <udd_ep_trans_complet+0x1da>
    5988:	85 83       	std	Z+5, r24	; 0x05
    598a:	96 83       	std	Z+6, r25	; 0x06
    598c:	cc 0f       	add	r28, r28
    598e:	dd 1f       	adc	r29, r29
    5990:	cc 0f       	add	r28, r28
    5992:	dd 1f       	adc	r29, r29
    5994:	cc 0f       	add	r28, r28
    5996:	dd 1f       	adc	r29, r29
    5998:	c4 5c       	subi	r28, 0xC4	; 196
    599a:	d7 4d       	sbci	r29, 0xD7	; 215
    599c:	8a 89       	ldd	r24, Y+18	; 0x12
    599e:	9b 89       	ldd	r25, Y+19	; 0x13
    59a0:	78 c0       	rjmp	.+240    	; 0x5a92 <udd_ep_trans_complet+0x2ca>
    59a2:	fe 01       	movw	r30, r28
    59a4:	ee 0f       	add	r30, r30
    59a6:	ff 1f       	adc	r31, r31
    59a8:	ee 0f       	add	r30, r30
    59aa:	ff 1f       	adc	r31, r31
    59ac:	ee 0f       	add	r30, r30
    59ae:	ff 1f       	adc	r31, r31
    59b0:	e4 5c       	subi	r30, 0xC4	; 196
    59b2:	f7 4d       	sbci	r31, 0xD7	; 215
    59b4:	42 89       	ldd	r20, Z+18	; 0x12
    59b6:	53 89       	ldd	r21, Z+19	; 0x13
    59b8:	a4 16       	cp	r10, r20
    59ba:	b5 06       	cpc	r11, r21
    59bc:	09 f0       	breq	.+2      	; 0x59c0 <udd_ep_trans_complet+0x1f8>
    59be:	69 c0       	rjmp	.+210    	; 0x5a92 <udd_ep_trans_complet+0x2ca>
    59c0:	28 17       	cp	r18, r24
    59c2:	39 07       	cpc	r19, r25
    59c4:	09 f4       	brne	.+2      	; 0x59c8 <udd_ep_trans_complet+0x200>
    59c6:	65 c0       	rjmp	.+202    	; 0x5a92 <udd_ep_trans_complet+0x2ca>
    59c8:	ac 01       	movw	r20, r24
    59ca:	42 1b       	sub	r20, r18
    59cc:	53 0b       	sbc	r21, r19
    59ce:	9a 01       	movw	r18, r20
    59d0:	21 15       	cp	r18, r1
    59d2:	54 e0       	ldi	r21, 0x04	; 4
    59d4:	35 07       	cpc	r19, r21
    59d6:	48 f0       	brcs	.+18     	; 0x59ea <udd_ep_trans_complet+0x222>
    59d8:	2f ef       	ldi	r18, 0xFF	; 255
    59da:	33 e0       	ldi	r19, 0x03	; 3
    59dc:	c9 01       	movw	r24, r18
    59de:	b4 01       	movw	r22, r8
    59e0:	0e 94 df 44 	call	0x89be	; 0x89be <__udivmodhi4>
    59e4:	28 1b       	sub	r18, r24
    59e6:	39 0b       	sbc	r19, r25
    59e8:	06 c0       	rjmp	.+12     	; 0x59f6 <udd_ep_trans_complet+0x22e>
    59ea:	c9 01       	movw	r24, r18
    59ec:	b4 01       	movw	r22, r8
    59ee:	0e 94 df 44 	call	0x89be	; 0x89be <__udivmodhi4>
    59f2:	28 1b       	sub	r18, r24
    59f4:	39 0b       	sbc	r19, r25
    59f6:	fe 01       	movw	r30, r28
    59f8:	ee 0f       	add	r30, r30
    59fa:	ff 1f       	adc	r31, r31
    59fc:	ee 0f       	add	r30, r30
    59fe:	ff 1f       	adc	r31, r31
    5a00:	ee 0f       	add	r30, r30
    5a02:	ff 1f       	adc	r31, r31
    5a04:	e4 5c       	subi	r30, 0xC4	; 196
    5a06:	f7 4d       	sbci	r31, 0xD7	; 215
    5a08:	16 86       	std	Z+14, r1	; 0x0e
    5a0a:	17 86       	std	Z+15, r1	; 0x0f
    5a0c:	28 15       	cp	r18, r8
    5a0e:	39 05       	cpc	r19, r9
    5a10:	00 f5       	brcc	.+64     	; 0x5a52 <udd_ep_trans_complet+0x28a>
    5a12:	d8 01       	movw	r26, r16
    5a14:	8c 91       	ld	r24, X
    5a16:	84 60       	ori	r24, 0x04	; 4
    5a18:	8c 93       	st	X, r24
    5a1a:	b0 e4       	ldi	r27, 0x40	; 64
    5a1c:	db 9e       	mul	r13, r27
    5a1e:	c0 01       	movw	r24, r0
    5a20:	11 24       	eor	r1, r1
    5a22:	8f 5e       	subi	r24, 0xEF	; 239
    5a24:	98 4d       	sbci	r25, 0xD8	; 216
    5a26:	fe 01       	movw	r30, r28
    5a28:	ee 0f       	add	r30, r30
    5a2a:	ff 1f       	adc	r31, r31
    5a2c:	ee 0f       	add	r30, r30
    5a2e:	ff 1f       	adc	r31, r31
    5a30:	ee 0f       	add	r30, r30
    5a32:	ff 1f       	adc	r31, r31
    5a34:	e4 5b       	subi	r30, 0xB4	; 180
    5a36:	f7 4d       	sbci	r31, 0xD7	; 215
    5a38:	80 83       	st	Z, r24
    5a3a:	91 83       	std	Z+1, r25	; 0x01
    5a3c:	cc 0f       	add	r28, r28
    5a3e:	dd 1f       	adc	r29, r29
    5a40:	cc 0f       	add	r28, r28
    5a42:	dd 1f       	adc	r29, r29
    5a44:	cc 0f       	add	r28, r28
    5a46:	dd 1f       	adc	r29, r29
    5a48:	c4 5c       	subi	r28, 0xC4	; 196
    5a4a:	d7 4d       	sbci	r29, 0xD7	; 215
    5a4c:	8a 8a       	std	Y+18, r8	; 0x12
    5a4e:	9b 8a       	std	Y+19, r9	; 0x13
    5a50:	1c c0       	rjmp	.+56     	; 0x5a8a <udd_ep_trans_complet+0x2c2>
    5a52:	f8 01       	movw	r30, r16
    5a54:	41 81       	ldd	r20, Z+1	; 0x01
    5a56:	52 81       	ldd	r21, Z+2	; 0x02
    5a58:	85 81       	ldd	r24, Z+5	; 0x05
    5a5a:	96 81       	ldd	r25, Z+6	; 0x06
    5a5c:	84 0f       	add	r24, r20
    5a5e:	95 1f       	adc	r25, r21
    5a60:	fe 01       	movw	r30, r28
    5a62:	ee 0f       	add	r30, r30
    5a64:	ff 1f       	adc	r31, r31
    5a66:	ee 0f       	add	r30, r30
    5a68:	ff 1f       	adc	r31, r31
    5a6a:	ee 0f       	add	r30, r30
    5a6c:	ff 1f       	adc	r31, r31
    5a6e:	e4 5b       	subi	r30, 0xB4	; 180
    5a70:	f7 4d       	sbci	r31, 0xD7	; 215
    5a72:	80 83       	st	Z, r24
    5a74:	91 83       	std	Z+1, r25	; 0x01
    5a76:	cc 0f       	add	r28, r28
    5a78:	dd 1f       	adc	r29, r29
    5a7a:	cc 0f       	add	r28, r28
    5a7c:	dd 1f       	adc	r29, r29
    5a7e:	cc 0f       	add	r28, r28
    5a80:	dd 1f       	adc	r29, r29
    5a82:	c4 5c       	subi	r28, 0xC4	; 196
    5a84:	d7 4d       	sbci	r29, 0xD7	; 215
    5a86:	2a 8b       	std	Y+18, r18	; 0x12
    5a88:	3b 8b       	std	Y+19, r19	; 0x13
    5a8a:	f7 01       	movw	r30, r14
    5a8c:	02 e0       	ldi	r16, 0x02	; 2
    5a8e:	06 93       	lac	Z, r16
    5a90:	13 c0       	rjmp	.+38     	; 0x5ab8 <udd_ep_trans_complet+0x2f0>
    5a92:	d8 01       	movw	r26, r16
    5a94:	8c 91       	ld	r24, X
    5a96:	80 ff       	sbrs	r24, 0
    5a98:	0f c0       	rjmp	.+30     	; 0x5ab8 <udd_ep_trans_complet+0x2f0>
    5a9a:	8e 7f       	andi	r24, 0xFE	; 254
    5a9c:	8c 93       	st	X, r24
    5a9e:	17 96       	adiw	r26, 0x07	; 7
    5aa0:	ed 91       	ld	r30, X+
    5aa2:	fc 91       	ld	r31, X
    5aa4:	18 97       	sbiw	r26, 0x08	; 8
    5aa6:	30 97       	sbiw	r30, 0x00	; 0
    5aa8:	39 f0       	breq	.+14     	; 0x5ab8 <udd_ep_trans_complet+0x2f0>
    5aaa:	15 96       	adiw	r26, 0x05	; 5
    5aac:	6d 91       	ld	r22, X+
    5aae:	7c 91       	ld	r23, X
    5ab0:	16 97       	sbiw	r26, 0x06	; 6
    5ab2:	4d 2d       	mov	r20, r13
    5ab4:	80 e0       	ldi	r24, 0x00	; 0
    5ab6:	19 95       	eicall
    5ab8:	df 91       	pop	r29
    5aba:	cf 91       	pop	r28
    5abc:	1f 91       	pop	r17
    5abe:	0f 91       	pop	r16
    5ac0:	ff 90       	pop	r15
    5ac2:	ef 90       	pop	r14
    5ac4:	df 90       	pop	r13
    5ac6:	bf 90       	pop	r11
    5ac8:	af 90       	pop	r10
    5aca:	9f 90       	pop	r9
    5acc:	8f 90       	pop	r8
    5ace:	08 95       	ret

00005ad0 <udd_attach>:
    5ad0:	1f 93       	push	r17
    5ad2:	cf 93       	push	r28
    5ad4:	df 93       	push	r29
    5ad6:	1f 92       	push	r1
    5ad8:	cd b7       	in	r28, 0x3d	; 61
    5ada:	de b7       	in	r29, 0x3e	; 62
    5adc:	8f b7       	in	r24, 0x3f	; 63
    5ade:	89 83       	std	Y+1, r24	; 0x01
    5ae0:	f8 94       	cli
    5ae2:	19 81       	ldd	r17, Y+1	; 0x01
    5ae4:	81 e0       	ldi	r24, 0x01	; 1
    5ae6:	cd dc       	rcall	.-1638   	; 0x5482 <udd_sleep_mode>
    5ae8:	ea ec       	ldi	r30, 0xCA	; 202
    5aea:	f4 e0       	ldi	r31, 0x04	; 4
    5aec:	80 e4       	ldi	r24, 0x40	; 64
    5aee:	80 83       	st	Z, r24
    5af0:	80 e2       	ldi	r24, 0x20	; 32
    5af2:	80 83       	st	Z, r24
    5af4:	e1 ec       	ldi	r30, 0xC1	; 193
    5af6:	f4 e0       	ldi	r31, 0x04	; 4
    5af8:	80 81       	ld	r24, Z
    5afa:	81 60       	ori	r24, 0x01	; 1
    5afc:	80 83       	st	Z, r24
    5afe:	a9 ec       	ldi	r26, 0xC9	; 201
    5b00:	b4 e0       	ldi	r27, 0x04	; 4
    5b02:	8c 91       	ld	r24, X
    5b04:	82 60       	ori	r24, 0x02	; 2
    5b06:	8c 93       	st	X, r24
    5b08:	e8 ec       	ldi	r30, 0xC8	; 200
    5b0a:	f4 e0       	ldi	r31, 0x04	; 4
    5b0c:	80 81       	ld	r24, Z
    5b0e:	80 64       	ori	r24, 0x40	; 64
    5b10:	80 83       	st	Z, r24
    5b12:	8c 91       	ld	r24, X
    5b14:	81 60       	ori	r24, 0x01	; 1
    5b16:	8c 93       	st	X, r24
    5b18:	80 81       	ld	r24, Z
    5b1a:	80 68       	ori	r24, 0x80	; 128
    5b1c:	80 83       	st	Z, r24
    5b1e:	1f bf       	out	0x3f, r17	; 63
    5b20:	0f 90       	pop	r0
    5b22:	df 91       	pop	r29
    5b24:	cf 91       	pop	r28
    5b26:	1f 91       	pop	r17
    5b28:	08 95       	ret

00005b2a <udd_enable>:
    5b2a:	0f 93       	push	r16
    5b2c:	1f 93       	push	r17
    5b2e:	cf 93       	push	r28
    5b30:	df 93       	push	r29
    5b32:	1f 92       	push	r1
    5b34:	1f 92       	push	r1
    5b36:	cd b7       	in	r28, 0x3d	; 61
    5b38:	de b7       	in	r29, 0x3e	; 62
    5b3a:	00 e6       	ldi	r16, 0x60	; 96
    5b3c:	10 e0       	ldi	r17, 0x00	; 0
    5b3e:	f8 01       	movw	r30, r16
    5b40:	10 82       	st	Z, r1
    5b42:	80 e3       	ldi	r24, 0x30	; 48
    5b44:	0e 94 e2 3c 	call	0x79c4	; 0x79c4 <sysclk_enable_usb>
    5b48:	e0 ec       	ldi	r30, 0xC0	; 192
    5b4a:	f4 e0       	ldi	r31, 0x04	; 4
    5b4c:	80 81       	ld	r24, Z
    5b4e:	80 64       	ori	r24, 0x40	; 64
    5b50:	80 83       	st	Z, r24
    5b52:	81 e0       	ldi	r24, 0x01	; 1
    5b54:	f8 01       	movw	r30, r16
    5b56:	80 83       	st	Z, r24
    5b58:	8f b7       	in	r24, 0x3f	; 63
    5b5a:	8a 83       	std	Y+2, r24	; 0x02
    5b5c:	f8 94       	cli
    5b5e:	1a 81       	ldd	r17, Y+2	; 0x02
    5b60:	ec e3       	ldi	r30, 0x3C	; 60
    5b62:	f8 e2       	ldi	r31, 0x28	; 40
    5b64:	15 86       	std	Z+13, r1	; 0x0d
    5b66:	15 8a       	std	Z+21, r1	; 0x15
    5b68:	15 8e       	std	Z+29, r1	; 0x1d
    5b6a:	15 a2       	std	Z+37, r1	; 0x25
    5b6c:	15 a6       	std	Z+45, r1	; 0x2d
    5b6e:	15 aa       	std	Z+53, r1	; 0x35
    5b70:	e1 ed       	ldi	r30, 0xD1	; 209
    5b72:	f7 e2       	ldi	r31, 0x27	; 39
    5b74:	80 81       	ld	r24, Z
    5b76:	8e 7f       	andi	r24, 0xFE	; 254
    5b78:	80 83       	st	Z, r24
    5b7a:	ea ed       	ldi	r30, 0xDA	; 218
    5b7c:	f7 e2       	ldi	r31, 0x27	; 39
    5b7e:	80 81       	ld	r24, Z
    5b80:	8e 7f       	andi	r24, 0xFE	; 254
    5b82:	80 83       	st	Z, r24
    5b84:	e3 ee       	ldi	r30, 0xE3	; 227
    5b86:	f7 e2       	ldi	r31, 0x27	; 39
    5b88:	80 81       	ld	r24, Z
    5b8a:	8e 7f       	andi	r24, 0xFE	; 254
    5b8c:	80 83       	st	Z, r24
    5b8e:	ec ee       	ldi	r30, 0xEC	; 236
    5b90:	f7 e2       	ldi	r31, 0x27	; 39
    5b92:	80 81       	ld	r24, Z
    5b94:	8e 7f       	andi	r24, 0xFE	; 254
    5b96:	80 83       	st	Z, r24
    5b98:	6a e1       	ldi	r22, 0x1A	; 26
    5b9a:	70 e0       	ldi	r23, 0x00	; 0
    5b9c:	82 e0       	ldi	r24, 0x02	; 2
    5b9e:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
    5ba2:	8f 3f       	cpi	r24, 0xFF	; 255
    5ba4:	19 f0       	breq	.+6      	; 0x5bac <udd_enable+0x82>
    5ba6:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    5baa:	03 c0       	rjmp	.+6      	; 0x5bb2 <udd_enable+0x88>
    5bac:	8f e1       	ldi	r24, 0x1F	; 31
    5bae:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    5bb2:	6b e1       	ldi	r22, 0x1B	; 27
    5bb4:	70 e0       	ldi	r23, 0x00	; 0
    5bb6:	82 e0       	ldi	r24, 0x02	; 2
    5bb8:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
    5bbc:	8f 3f       	cpi	r24, 0xFF	; 255
    5bbe:	19 f0       	breq	.+6      	; 0x5bc6 <udd_enable+0x9c>
    5bc0:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    5bc4:	03 c0       	rjmp	.+6      	; 0x5bcc <udd_enable+0xa2>
    5bc6:	8f e1       	ldi	r24, 0x1F	; 31
    5bc8:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    5bcc:	e0 ec       	ldi	r30, 0xC0	; 192
    5bce:	f4 e0       	ldi	r31, 0x04	; 4
    5bd0:	80 81       	ld	r24, Z
    5bd2:	82 60       	ori	r24, 0x02	; 2
    5bd4:	80 83       	st	Z, r24
    5bd6:	80 81       	ld	r24, Z
    5bd8:	80 68       	ori	r24, 0x80	; 128
    5bda:	80 83       	st	Z, r24
    5bdc:	80 81       	ld	r24, Z
    5bde:	80 61       	ori	r24, 0x10	; 16
    5be0:	80 83       	st	Z, r24
    5be2:	88 e4       	ldi	r24, 0x48	; 72
    5be4:	98 e2       	ldi	r25, 0x28	; 40
    5be6:	86 83       	std	Z+6, r24	; 0x06
    5be8:	97 83       	std	Z+7, r25	; 0x07
    5bea:	80 81       	ld	r24, Z
    5bec:	80 62       	ori	r24, 0x20	; 32
    5bee:	80 83       	st	Z, r24
    5bf0:	8f ef       	ldi	r24, 0xFF	; 255
    5bf2:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    5bf6:	e8 ec       	ldi	r30, 0xC8	; 200
    5bf8:	f4 e0       	ldi	r31, 0x04	; 4
    5bfa:	80 81       	ld	r24, Z
    5bfc:	81 60       	ori	r24, 0x01	; 1
    5bfe:	80 83       	st	Z, r24
    5c00:	10 92 7c 28 	sts	0x287C, r1	; 0x80287c <udd_b_idle>
    5c04:	80 91 d4 2c 	lds	r24, 0x2CD4	; 0x802cd4 <sleepmgr_locks+0x5>
    5c08:	8f 3f       	cpi	r24, 0xFF	; 255
    5c0a:	09 f4       	brne	.+2      	; 0x5c0e <udd_enable+0xe4>
    5c0c:	ff cf       	rjmp	.-2      	; 0x5c0c <udd_enable+0xe2>
    5c0e:	8f b7       	in	r24, 0x3f	; 63
    5c10:	89 83       	std	Y+1, r24	; 0x01
    5c12:	f8 94       	cli
    5c14:	99 81       	ldd	r25, Y+1	; 0x01
    5c16:	ef ec       	ldi	r30, 0xCF	; 207
    5c18:	fc e2       	ldi	r31, 0x2C	; 44
    5c1a:	85 81       	ldd	r24, Z+5	; 0x05
    5c1c:	8f 5f       	subi	r24, 0xFF	; 255
    5c1e:	85 83       	std	Z+5, r24	; 0x05
    5c20:	9f bf       	out	0x3f, r25	; 63
    5c22:	56 df       	rcall	.-340    	; 0x5ad0 <udd_attach>
    5c24:	1f bf       	out	0x3f, r17	; 63
    5c26:	0f 90       	pop	r0
    5c28:	0f 90       	pop	r0
    5c2a:	df 91       	pop	r29
    5c2c:	cf 91       	pop	r28
    5c2e:	1f 91       	pop	r17
    5c30:	0f 91       	pop	r16
    5c32:	08 95       	ret

00005c34 <udd_is_high_speed>:
    5c34:	80 e0       	ldi	r24, 0x00	; 0
    5c36:	08 95       	ret

00005c38 <udd_set_address>:
    5c38:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    5c3c:	08 95       	ret

00005c3e <udd_getaddress>:
    5c3e:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    5c42:	08 95       	ret

00005c44 <udd_get_frame_number>:
    5c44:	80 91 78 28 	lds	r24, 0x2878	; 0x802878 <udd_sram+0x3c>
    5c48:	90 91 79 28 	lds	r25, 0x2879	; 0x802879 <udd_sram+0x3d>
    5c4c:	08 95       	ret

00005c4e <udd_get_micro_frame_number>:
    5c4e:	80 e0       	ldi	r24, 0x00	; 0
    5c50:	90 e0       	ldi	r25, 0x00	; 0
    5c52:	08 95       	ret

00005c54 <udd_set_setup_payload>:
    5c54:	ef eb       	ldi	r30, 0xBF	; 191
    5c56:	fc e2       	ldi	r31, 0x2C	; 44
    5c58:	80 87       	std	Z+8, r24	; 0x08
    5c5a:	91 87       	std	Z+9, r25	; 0x09
    5c5c:	62 87       	std	Z+10, r22	; 0x0a
    5c5e:	73 87       	std	Z+11, r23	; 0x0b
    5c60:	08 95       	ret

00005c62 <udd_ep_alloc>:
    5c62:	28 2f       	mov	r18, r24
    5c64:	2f 70       	andi	r18, 0x0F	; 15
    5c66:	30 e0       	ldi	r19, 0x00	; 0
    5c68:	22 0f       	add	r18, r18
    5c6a:	33 1f       	adc	r19, r19
    5c6c:	08 2e       	mov	r0, r24
    5c6e:	00 0c       	add	r0, r0
    5c70:	99 0b       	sbc	r25, r25
    5c72:	88 27       	eor	r24, r24
    5c74:	99 0f       	add	r25, r25
    5c76:	88 1f       	adc	r24, r24
    5c78:	99 27       	eor	r25, r25
    5c7a:	82 0f       	add	r24, r18
    5c7c:	93 1f       	adc	r25, r19
    5c7e:	fc 01       	movw	r30, r24
    5c80:	ee 0f       	add	r30, r30
    5c82:	ff 1f       	adc	r31, r31
    5c84:	ee 0f       	add	r30, r30
    5c86:	ff 1f       	adc	r31, r31
    5c88:	ee 0f       	add	r30, r30
    5c8a:	ff 1f       	adc	r31, r31
    5c8c:	e4 5c       	subi	r30, 0xC4	; 196
    5c8e:	f7 4d       	sbci	r31, 0xD7	; 215
    5c90:	25 85       	ldd	r18, Z+13	; 0x0d
    5c92:	20 7c       	andi	r18, 0xC0	; 192
    5c94:	09 f0       	breq	.+2      	; 0x5c98 <udd_ep_alloc+0x36>
    5c96:	69 c0       	rjmp	.+210    	; 0x5d6a <udd_ep_alloc+0x108>
    5c98:	63 70       	andi	r22, 0x03	; 3
    5c9a:	61 30       	cpi	r22, 0x01	; 1
    5c9c:	11 f0       	breq	.+4      	; 0x5ca2 <udd_ep_alloc+0x40>
    5c9e:	18 f4       	brcc	.+6      	; 0x5ca6 <udd_ep_alloc+0x44>
    5ca0:	04 c0       	rjmp	.+8      	; 0x5caa <udd_ep_alloc+0x48>
    5ca2:	60 ec       	ldi	r22, 0xC0	; 192
    5ca4:	03 c0       	rjmp	.+6      	; 0x5cac <udd_ep_alloc+0x4a>
    5ca6:	60 e8       	ldi	r22, 0x80	; 128
    5ca8:	01 c0       	rjmp	.+2      	; 0x5cac <udd_ep_alloc+0x4a>
    5caa:	60 e4       	ldi	r22, 0x40	; 64
    5cac:	40 38       	cpi	r20, 0x80	; 128
    5cae:	51 05       	cpc	r21, r1
    5cb0:	e9 f0       	breq	.+58     	; 0x5cec <udd_ep_alloc+0x8a>
    5cb2:	50 f4       	brcc	.+20     	; 0x5cc8 <udd_ep_alloc+0x66>
    5cb4:	40 32       	cpi	r20, 0x20	; 32
    5cb6:	51 05       	cpc	r21, r1
    5cb8:	a9 f0       	breq	.+42     	; 0x5ce4 <udd_ep_alloc+0x82>
    5cba:	40 34       	cpi	r20, 0x40	; 64
    5cbc:	51 05       	cpc	r21, r1
    5cbe:	a1 f0       	breq	.+40     	; 0x5ce8 <udd_ep_alloc+0x86>
    5cc0:	40 31       	cpi	r20, 0x10	; 16
    5cc2:	51 05       	cpc	r21, r1
    5cc4:	d9 f4       	brne	.+54     	; 0x5cfc <udd_ep_alloc+0x9a>
    5cc6:	0c c0       	rjmp	.+24     	; 0x5ce0 <udd_ep_alloc+0x7e>
    5cc8:	41 15       	cp	r20, r1
    5cca:	22 e0       	ldi	r18, 0x02	; 2
    5ccc:	52 07       	cpc	r21, r18
    5cce:	91 f0       	breq	.+36     	; 0x5cf4 <udd_ep_alloc+0x92>
    5cd0:	4f 3f       	cpi	r20, 0xFF	; 255
    5cd2:	23 e0       	ldi	r18, 0x03	; 3
    5cd4:	52 07       	cpc	r21, r18
    5cd6:	81 f0       	breq	.+32     	; 0x5cf8 <udd_ep_alloc+0x96>
    5cd8:	41 15       	cp	r20, r1
    5cda:	51 40       	sbci	r21, 0x01	; 1
    5cdc:	79 f4       	brne	.+30     	; 0x5cfc <udd_ep_alloc+0x9a>
    5cde:	08 c0       	rjmp	.+16     	; 0x5cf0 <udd_ep_alloc+0x8e>
    5ce0:	21 e0       	ldi	r18, 0x01	; 1
    5ce2:	0d c0       	rjmp	.+26     	; 0x5cfe <udd_ep_alloc+0x9c>
    5ce4:	22 e0       	ldi	r18, 0x02	; 2
    5ce6:	0b c0       	rjmp	.+22     	; 0x5cfe <udd_ep_alloc+0x9c>
    5ce8:	23 e0       	ldi	r18, 0x03	; 3
    5cea:	09 c0       	rjmp	.+18     	; 0x5cfe <udd_ep_alloc+0x9c>
    5cec:	24 e0       	ldi	r18, 0x04	; 4
    5cee:	07 c0       	rjmp	.+14     	; 0x5cfe <udd_ep_alloc+0x9c>
    5cf0:	25 e0       	ldi	r18, 0x05	; 5
    5cf2:	05 c0       	rjmp	.+10     	; 0x5cfe <udd_ep_alloc+0x9c>
    5cf4:	26 e0       	ldi	r18, 0x06	; 6
    5cf6:	03 c0       	rjmp	.+6      	; 0x5cfe <udd_ep_alloc+0x9c>
    5cf8:	27 e0       	ldi	r18, 0x07	; 7
    5cfa:	01 c0       	rjmp	.+2      	; 0x5cfe <udd_ep_alloc+0x9c>
    5cfc:	20 e0       	ldi	r18, 0x00	; 0
    5cfe:	fc 01       	movw	r30, r24
    5d00:	ee 0f       	add	r30, r30
    5d02:	ff 1f       	adc	r31, r31
    5d04:	ee 0f       	add	r30, r30
    5d06:	ff 1f       	adc	r31, r31
    5d08:	ee 0f       	add	r30, r30
    5d0a:	ff 1f       	adc	r31, r31
    5d0c:	e4 5c       	subi	r30, 0xC4	; 196
    5d0e:	f7 4d       	sbci	r31, 0xD7	; 215
    5d10:	15 86       	std	Z+13, r1	; 0x0d
    5d12:	36 e0       	ldi	r19, 0x06	; 6
    5d14:	34 87       	std	Z+12, r19	; 0x0c
    5d16:	26 2b       	or	r18, r22
    5d18:	25 87       	std	Z+13, r18	; 0x0d
    5d1a:	fc 01       	movw	r30, r24
    5d1c:	ee 0f       	add	r30, r30
    5d1e:	ff 1f       	adc	r31, r31
    5d20:	ee 0f       	add	r30, r30
    5d22:	ff 1f       	adc	r31, r31
    5d24:	ee 0f       	add	r30, r30
    5d26:	ff 1f       	adc	r31, r31
    5d28:	e4 5c       	subi	r30, 0xC4	; 196
    5d2a:	f7 4d       	sbci	r31, 0xD7	; 215
    5d2c:	25 85       	ldd	r18, Z+13	; 0x0d
    5d2e:	20 7c       	andi	r18, 0xC0	; 192
    5d30:	20 3c       	cpi	r18, 0xC0	; 192
    5d32:	69 f4       	brne	.+26     	; 0x5d4e <udd_ep_alloc+0xec>
    5d34:	fc 01       	movw	r30, r24
    5d36:	ee 0f       	add	r30, r30
    5d38:	ff 1f       	adc	r31, r31
    5d3a:	ee 0f       	add	r30, r30
    5d3c:	ff 1f       	adc	r31, r31
    5d3e:	ee 0f       	add	r30, r30
    5d40:	ff 1f       	adc	r31, r31
    5d42:	e4 5c       	subi	r30, 0xC4	; 196
    5d44:	f7 4d       	sbci	r31, 0xD7	; 215
    5d46:	25 85       	ldd	r18, Z+13	; 0x0d
    5d48:	27 70       	andi	r18, 0x07	; 7
    5d4a:	27 30       	cpi	r18, 0x07	; 7
    5d4c:	81 f0       	breq	.+32     	; 0x5d6e <udd_ep_alloc+0x10c>
    5d4e:	88 0f       	add	r24, r24
    5d50:	99 1f       	adc	r25, r25
    5d52:	88 0f       	add	r24, r24
    5d54:	99 1f       	adc	r25, r25
    5d56:	88 0f       	add	r24, r24
    5d58:	99 1f       	adc	r25, r25
    5d5a:	fc 01       	movw	r30, r24
    5d5c:	e4 5c       	subi	r30, 0xC4	; 196
    5d5e:	f7 4d       	sbci	r31, 0xD7	; 215
    5d60:	85 85       	ldd	r24, Z+13	; 0x0d
    5d62:	80 62       	ori	r24, 0x20	; 32
    5d64:	85 87       	std	Z+13, r24	; 0x0d
    5d66:	81 e0       	ldi	r24, 0x01	; 1
    5d68:	08 95       	ret
    5d6a:	80 e0       	ldi	r24, 0x00	; 0
    5d6c:	08 95       	ret
    5d6e:	81 e0       	ldi	r24, 0x01	; 1
    5d70:	08 95       	ret

00005d72 <udd_ep_is_halted>:
    5d72:	e8 2f       	mov	r30, r24
    5d74:	ef 70       	andi	r30, 0x0F	; 15
    5d76:	f0 e0       	ldi	r31, 0x00	; 0
    5d78:	ee 0f       	add	r30, r30
    5d7a:	ff 1f       	adc	r31, r31
    5d7c:	08 2e       	mov	r0, r24
    5d7e:	00 0c       	add	r0, r0
    5d80:	99 0b       	sbc	r25, r25
    5d82:	88 27       	eor	r24, r24
    5d84:	99 0f       	add	r25, r25
    5d86:	88 1f       	adc	r24, r24
    5d88:	99 27       	eor	r25, r25
    5d8a:	e8 0f       	add	r30, r24
    5d8c:	f9 1f       	adc	r31, r25
    5d8e:	ee 0f       	add	r30, r30
    5d90:	ff 1f       	adc	r31, r31
    5d92:	ee 0f       	add	r30, r30
    5d94:	ff 1f       	adc	r31, r31
    5d96:	ee 0f       	add	r30, r30
    5d98:	ff 1f       	adc	r31, r31
    5d9a:	e4 5c       	subi	r30, 0xC4	; 196
    5d9c:	f7 4d       	sbci	r31, 0xD7	; 215
    5d9e:	85 85       	ldd	r24, Z+13	; 0x0d
    5da0:	82 fb       	bst	r24, 2
    5da2:	88 27       	eor	r24, r24
    5da4:	80 f9       	bld	r24, 0
    5da6:	08 95       	ret

00005da8 <udd_ep_clear_halt>:
    5da8:	0f 93       	push	r16
    5daa:	28 2f       	mov	r18, r24
    5dac:	2f 70       	andi	r18, 0x0F	; 15
    5dae:	30 e0       	ldi	r19, 0x00	; 0
    5db0:	a9 01       	movw	r20, r18
    5db2:	44 0f       	add	r20, r20
    5db4:	55 1f       	adc	r21, r21
    5db6:	28 2f       	mov	r18, r24
    5db8:	08 2e       	mov	r0, r24
    5dba:	00 0c       	add	r0, r0
    5dbc:	33 0b       	sbc	r19, r19
    5dbe:	22 27       	eor	r18, r18
    5dc0:	33 0f       	add	r19, r19
    5dc2:	22 1f       	adc	r18, r18
    5dc4:	33 27       	eor	r19, r19
    5dc6:	24 0f       	add	r18, r20
    5dc8:	35 1f       	adc	r19, r21
    5dca:	a9 01       	movw	r20, r18
    5dcc:	44 0f       	add	r20, r20
    5dce:	55 1f       	adc	r21, r21
    5dd0:	44 0f       	add	r20, r20
    5dd2:	55 1f       	adc	r21, r21
    5dd4:	44 0f       	add	r20, r20
    5dd6:	55 1f       	adc	r21, r21
    5dd8:	fa 01       	movw	r30, r20
    5dda:	e8 5b       	subi	r30, 0xB8	; 184
    5ddc:	f7 4d       	sbci	r31, 0xD7	; 215
    5dde:	01 e0       	ldi	r16, 0x01	; 1
    5de0:	06 93       	lac	Z, r16
    5de2:	fa 01       	movw	r30, r20
    5de4:	e4 5c       	subi	r30, 0xC4	; 196
    5de6:	f7 4d       	sbci	r31, 0xD7	; 215
    5de8:	95 85       	ldd	r25, Z+13	; 0x0d
    5dea:	92 ff       	sbrs	r25, 2
    5dec:	11 c0       	rjmp	.+34     	; 0x5e10 <udd_ep_clear_halt+0x68>
    5dee:	fa 01       	movw	r30, r20
    5df0:	e4 5c       	subi	r30, 0xC4	; 196
    5df2:	f7 4d       	sbci	r31, 0xD7	; 215
    5df4:	95 85       	ldd	r25, Z+13	; 0x0d
    5df6:	9b 7f       	andi	r25, 0xFB	; 251
    5df8:	95 87       	std	Z+13, r25	; 0x0d
    5dfa:	59 dc       	rcall	.-1870   	; 0x56ae <udd_ep_get_job>
    5dfc:	fc 01       	movw	r30, r24
    5dfe:	80 81       	ld	r24, Z
    5e00:	80 ff       	sbrs	r24, 0
    5e02:	06 c0       	rjmp	.+12     	; 0x5e10 <udd_ep_clear_halt+0x68>
    5e04:	8e 7f       	andi	r24, 0xFE	; 254
    5e06:	80 83       	st	Z, r24
    5e08:	07 80       	ldd	r0, Z+7	; 0x07
    5e0a:	f0 85       	ldd	r31, Z+8	; 0x08
    5e0c:	e0 2d       	mov	r30, r0
    5e0e:	19 95       	eicall
    5e10:	81 e0       	ldi	r24, 0x01	; 1
    5e12:	0f 91       	pop	r16
    5e14:	08 95       	ret

00005e16 <udd_ep_run>:
    5e16:	6f 92       	push	r6
    5e18:	7f 92       	push	r7
    5e1a:	8f 92       	push	r8
    5e1c:	9f 92       	push	r9
    5e1e:	af 92       	push	r10
    5e20:	bf 92       	push	r11
    5e22:	cf 92       	push	r12
    5e24:	df 92       	push	r13
    5e26:	ef 92       	push	r14
    5e28:	ff 92       	push	r15
    5e2a:	0f 93       	push	r16
    5e2c:	1f 93       	push	r17
    5e2e:	cf 93       	push	r28
    5e30:	df 93       	push	r29
    5e32:	1f 92       	push	r1
    5e34:	cd b7       	in	r28, 0x3d	; 61
    5e36:	de b7       	in	r29, 0x3e	; 62
    5e38:	78 2e       	mov	r7, r24
    5e3a:	66 2e       	mov	r6, r22
    5e3c:	4a 01       	movw	r8, r20
    5e3e:	59 01       	movw	r10, r18
    5e40:	36 dc       	rcall	.-1940   	; 0x56ae <udd_ep_get_job>
    5e42:	6c 01       	movw	r12, r24
    5e44:	27 2d       	mov	r18, r7
    5e46:	87 2d       	mov	r24, r7
    5e48:	8f 70       	andi	r24, 0x0F	; 15
    5e4a:	e8 2e       	mov	r14, r24
    5e4c:	f1 2c       	mov	r15, r1
    5e4e:	c7 01       	movw	r24, r14
    5e50:	88 0f       	add	r24, r24
    5e52:	99 1f       	adc	r25, r25
    5e54:	e7 2c       	mov	r14, r7
    5e56:	07 2c       	mov	r0, r7
    5e58:	00 0c       	add	r0, r0
    5e5a:	ff 08       	sbc	r15, r15
    5e5c:	ee 24       	eor	r14, r14
    5e5e:	ff 0c       	add	r15, r15
    5e60:	ee 1c       	adc	r14, r14
    5e62:	ff 24       	eor	r15, r15
    5e64:	e8 0e       	add	r14, r24
    5e66:	f9 1e       	adc	r15, r25
    5e68:	f7 01       	movw	r30, r14
    5e6a:	ee 0f       	add	r30, r30
    5e6c:	ff 1f       	adc	r31, r31
    5e6e:	ee 0f       	add	r30, r30
    5e70:	ff 1f       	adc	r31, r31
    5e72:	ee 0f       	add	r30, r30
    5e74:	ff 1f       	adc	r31, r31
    5e76:	e4 5c       	subi	r30, 0xC4	; 196
    5e78:	f7 4d       	sbci	r31, 0xD7	; 215
    5e7a:	85 85       	ldd	r24, Z+13	; 0x0d
    5e7c:	80 7c       	andi	r24, 0xC0	; 192
    5e7e:	09 f4       	brne	.+2      	; 0x5e82 <udd_ep_run+0x6c>
    5e80:	82 c0       	rjmp	.+260    	; 0x5f86 <udd_ep_run+0x170>
    5e82:	f7 01       	movw	r30, r14
    5e84:	ee 0f       	add	r30, r30
    5e86:	ff 1f       	adc	r31, r31
    5e88:	ee 0f       	add	r30, r30
    5e8a:	ff 1f       	adc	r31, r31
    5e8c:	ee 0f       	add	r30, r30
    5e8e:	ff 1f       	adc	r31, r31
    5e90:	e4 5c       	subi	r30, 0xC4	; 196
    5e92:	f7 4d       	sbci	r31, 0xD7	; 215
    5e94:	85 85       	ldd	r24, Z+13	; 0x0d
    5e96:	80 7c       	andi	r24, 0xC0	; 192
    5e98:	80 3c       	cpi	r24, 0xC0	; 192
    5e9a:	61 f0       	breq	.+24     	; 0x5eb4 <udd_ep_run+0x9e>
    5e9c:	f7 01       	movw	r30, r14
    5e9e:	ee 0f       	add	r30, r30
    5ea0:	ff 1f       	adc	r31, r31
    5ea2:	ee 0f       	add	r30, r30
    5ea4:	ff 1f       	adc	r31, r31
    5ea6:	ee 0f       	add	r30, r30
    5ea8:	ff 1f       	adc	r31, r31
    5eaa:	e4 5c       	subi	r30, 0xC4	; 196
    5eac:	f7 4d       	sbci	r31, 0xD7	; 215
    5eae:	85 85       	ldd	r24, Z+13	; 0x0d
    5eb0:	82 fd       	sbrc	r24, 2
    5eb2:	6b c0       	rjmp	.+214    	; 0x5f8a <udd_ep_run+0x174>
    5eb4:	8f b7       	in	r24, 0x3f	; 63
    5eb6:	89 83       	std	Y+1, r24	; 0x01
    5eb8:	f8 94       	cli
    5eba:	89 81       	ldd	r24, Y+1	; 0x01
    5ebc:	f6 01       	movw	r30, r12
    5ebe:	90 81       	ld	r25, Z
    5ec0:	90 ff       	sbrs	r25, 0
    5ec2:	03 c0       	rjmp	.+6      	; 0x5eca <udd_ep_run+0xb4>
    5ec4:	8f bf       	out	0x3f, r24	; 63
    5ec6:	80 e0       	ldi	r24, 0x00	; 0
    5ec8:	61 c0       	rjmp	.+194    	; 0x5f8c <udd_ep_run+0x176>
    5eca:	f6 01       	movw	r30, r12
    5ecc:	90 81       	ld	r25, Z
    5ece:	91 60       	ori	r25, 0x01	; 1
    5ed0:	90 83       	st	Z, r25
    5ed2:	8f bf       	out	0x3f, r24	; 63
    5ed4:	81 82       	std	Z+1, r8	; 0x01
    5ed6:	92 82       	std	Z+2, r9	; 0x02
    5ed8:	a3 82       	std	Z+3, r10	; 0x03
    5eda:	b4 82       	std	Z+4, r11	; 0x04
    5edc:	15 82       	std	Z+5, r1	; 0x05
    5ede:	16 82       	std	Z+6, r1	; 0x06
    5ee0:	07 83       	std	Z+7, r16	; 0x07
    5ee2:	10 87       	std	Z+8, r17	; 0x08
    5ee4:	61 10       	cpse	r6, r1
    5ee6:	06 c0       	rjmp	.+12     	; 0x5ef4 <udd_ep_run+0xde>
    5ee8:	91 e0       	ldi	r25, 0x01	; 1
    5eea:	a1 14       	cp	r10, r1
    5eec:	b1 04       	cpc	r11, r1
    5eee:	19 f0       	breq	.+6      	; 0x5ef6 <udd_ep_run+0xe0>
    5ef0:	90 e0       	ldi	r25, 0x00	; 0
    5ef2:	01 c0       	rjmp	.+2      	; 0x5ef6 <udd_ep_run+0xe0>
    5ef4:	91 e0       	ldi	r25, 0x01	; 1
    5ef6:	f6 01       	movw	r30, r12
    5ef8:	80 81       	ld	r24, Z
    5efa:	90 fb       	bst	r25, 0
    5efc:	81 f9       	bld	r24, 1
    5efe:	8b 7f       	andi	r24, 0xFB	; 251
    5f00:	80 83       	st	Z, r24
    5f02:	22 23       	and	r18, r18
    5f04:	64 f4       	brge	.+24     	; 0x5f1e <udd_ep_run+0x108>
    5f06:	f7 01       	movw	r30, r14
    5f08:	ee 0f       	add	r30, r30
    5f0a:	ff 1f       	adc	r31, r31
    5f0c:	ee 0f       	add	r30, r30
    5f0e:	ff 1f       	adc	r31, r31
    5f10:	ee 0f       	add	r30, r30
    5f12:	ff 1f       	adc	r31, r31
    5f14:	e4 5c       	subi	r30, 0xC4	; 196
    5f16:	f7 4d       	sbci	r31, 0xD7	; 215
    5f18:	12 8a       	std	Z+18, r1	; 0x12
    5f1a:	13 8a       	std	Z+19, r1	; 0x13
    5f1c:	30 c0       	rjmp	.+96     	; 0x5f7e <udd_ep_run+0x168>
    5f1e:	f7 01       	movw	r30, r14
    5f20:	ee 0f       	add	r30, r30
    5f22:	ff 1f       	adc	r31, r31
    5f24:	ee 0f       	add	r30, r30
    5f26:	ff 1f       	adc	r31, r31
    5f28:	ee 0f       	add	r30, r30
    5f2a:	ff 1f       	adc	r31, r31
    5f2c:	e4 5c       	subi	r30, 0xC4	; 196
    5f2e:	f7 4d       	sbci	r31, 0xD7	; 215
    5f30:	85 85       	ldd	r24, Z+13	; 0x0d
    5f32:	80 7c       	andi	r24, 0xC0	; 192
    5f34:	80 3c       	cpi	r24, 0xC0	; 192
    5f36:	b1 f4       	brne	.+44     	; 0x5f64 <udd_ep_run+0x14e>
    5f38:	c7 01       	movw	r24, r14
    5f3a:	88 0f       	add	r24, r24
    5f3c:	99 1f       	adc	r25, r25
    5f3e:	88 0f       	add	r24, r24
    5f40:	99 1f       	adc	r25, r25
    5f42:	88 0f       	add	r24, r24
    5f44:	99 1f       	adc	r25, r25
    5f46:	88 5b       	subi	r24, 0xB8	; 184
    5f48:	97 4d       	sbci	r25, 0xD7	; 215
    5f4a:	88 db       	rcall	.-2288   	; 0x565c <udd_ep_get_size>
    5f4c:	bc 01       	movw	r22, r24
    5f4e:	c5 01       	movw	r24, r10
    5f50:	0e 94 df 44 	call	0x89be	; 0x89be <__udivmodhi4>
    5f54:	89 2b       	or	r24, r25
    5f56:	31 f0       	breq	.+12     	; 0x5f64 <udd_ep_run+0x14e>
    5f58:	f6 01       	movw	r30, r12
    5f5a:	80 81       	ld	r24, Z
    5f5c:	8e 7f       	andi	r24, 0xFE	; 254
    5f5e:	80 83       	st	Z, r24
    5f60:	80 e0       	ldi	r24, 0x00	; 0
    5f62:	14 c0       	rjmp	.+40     	; 0x5f8c <udd_ep_run+0x176>
    5f64:	f7 01       	movw	r30, r14
    5f66:	ee 0f       	add	r30, r30
    5f68:	ff 1f       	adc	r31, r31
    5f6a:	ee 0f       	add	r30, r30
    5f6c:	ff 1f       	adc	r31, r31
    5f6e:	ee 0f       	add	r30, r30
    5f70:	ff 1f       	adc	r31, r31
    5f72:	e4 5c       	subi	r30, 0xC4	; 196
    5f74:	f7 4d       	sbci	r31, 0xD7	; 215
    5f76:	16 86       	std	Z+14, r1	; 0x0e
    5f78:	17 86       	std	Z+15, r1	; 0x0f
    5f7a:	12 8a       	std	Z+18, r1	; 0x12
    5f7c:	13 8a       	std	Z+19, r1	; 0x13
    5f7e:	87 2d       	mov	r24, r7
    5f80:	23 dc       	rcall	.-1978   	; 0x57c8 <udd_ep_trans_complet>
    5f82:	81 e0       	ldi	r24, 0x01	; 1
    5f84:	03 c0       	rjmp	.+6      	; 0x5f8c <udd_ep_run+0x176>
    5f86:	80 e0       	ldi	r24, 0x00	; 0
    5f88:	01 c0       	rjmp	.+2      	; 0x5f8c <udd_ep_run+0x176>
    5f8a:	80 e0       	ldi	r24, 0x00	; 0
    5f8c:	0f 90       	pop	r0
    5f8e:	df 91       	pop	r29
    5f90:	cf 91       	pop	r28
    5f92:	1f 91       	pop	r17
    5f94:	0f 91       	pop	r16
    5f96:	ff 90       	pop	r15
    5f98:	ef 90       	pop	r14
    5f9a:	df 90       	pop	r13
    5f9c:	cf 90       	pop	r12
    5f9e:	bf 90       	pop	r11
    5fa0:	af 90       	pop	r10
    5fa2:	9f 90       	pop	r9
    5fa4:	8f 90       	pop	r8
    5fa6:	7f 90       	pop	r7
    5fa8:	6f 90       	pop	r6
    5faa:	08 95       	ret

00005fac <udd_ep_abort>:
    5fac:	ff 92       	push	r15
    5fae:	0f 93       	push	r16
    5fb0:	1f 93       	push	r17
    5fb2:	cf 93       	push	r28
    5fb4:	df 93       	push	r29
    5fb6:	18 2f       	mov	r17, r24
    5fb8:	c8 2f       	mov	r28, r24
    5fba:	cf 70       	andi	r28, 0x0F	; 15
    5fbc:	d0 e0       	ldi	r29, 0x00	; 0
    5fbe:	ce 01       	movw	r24, r28
    5fc0:	88 0f       	add	r24, r24
    5fc2:	99 1f       	adc	r25, r25
    5fc4:	c1 2f       	mov	r28, r17
    5fc6:	01 2e       	mov	r0, r17
    5fc8:	00 0c       	add	r0, r0
    5fca:	dd 0b       	sbc	r29, r29
    5fcc:	cc 27       	eor	r28, r28
    5fce:	dd 0f       	add	r29, r29
    5fd0:	cc 1f       	adc	r28, r28
    5fd2:	dd 27       	eor	r29, r29
    5fd4:	c8 0f       	add	r28, r24
    5fd6:	d9 1f       	adc	r29, r25
    5fd8:	81 2f       	mov	r24, r17
    5fda:	69 db       	rcall	.-2350   	; 0x56ae <udd_ep_get_job>
    5fdc:	dc 01       	movw	r26, r24
    5fde:	fe 01       	movw	r30, r28
    5fe0:	ee 0f       	add	r30, r30
    5fe2:	ff 1f       	adc	r31, r31
    5fe4:	ee 0f       	add	r30, r30
    5fe6:	ff 1f       	adc	r31, r31
    5fe8:	ee 0f       	add	r30, r30
    5fea:	ff 1f       	adc	r31, r31
    5fec:	e8 5b       	subi	r30, 0xB8	; 184
    5fee:	f7 4d       	sbci	r31, 0xD7	; 215
    5ff0:	02 e0       	ldi	r16, 0x02	; 2
    5ff2:	05 93       	las	Z, r16
    5ff4:	8c 91       	ld	r24, X
    5ff6:	80 ff       	sbrs	r24, 0
    5ff8:	22 c0       	rjmp	.+68     	; 0x603e <__stack+0x3f>
    5ffa:	8e 7f       	andi	r24, 0xFE	; 254
    5ffc:	8c 93       	st	X, r24
    5ffe:	17 96       	adiw	r26, 0x07	; 7
    6000:	ed 91       	ld	r30, X+
    6002:	fc 91       	ld	r31, X
    6004:	18 97       	sbiw	r26, 0x08	; 8
    6006:	30 97       	sbiw	r30, 0x00	; 0
    6008:	d1 f0       	breq	.+52     	; 0x603e <__stack+0x3f>
    600a:	11 23       	and	r17, r17
    600c:	5c f4       	brge	.+22     	; 0x6024 <__stack+0x25>
    600e:	cc 0f       	add	r28, r28
    6010:	dd 1f       	adc	r29, r29
    6012:	cc 0f       	add	r28, r28
    6014:	dd 1f       	adc	r29, r29
    6016:	cc 0f       	add	r28, r28
    6018:	dd 1f       	adc	r29, r29
    601a:	c4 5c       	subi	r28, 0xC4	; 196
    601c:	d7 4d       	sbci	r29, 0xD7	; 215
    601e:	6a 89       	ldd	r22, Y+18	; 0x12
    6020:	7b 89       	ldd	r23, Y+19	; 0x13
    6022:	0a c0       	rjmp	.+20     	; 0x6038 <__stack+0x39>
    6024:	cc 0f       	add	r28, r28
    6026:	dd 1f       	adc	r29, r29
    6028:	cc 0f       	add	r28, r28
    602a:	dd 1f       	adc	r29, r29
    602c:	cc 0f       	add	r28, r28
    602e:	dd 1f       	adc	r29, r29
    6030:	c4 5c       	subi	r28, 0xC4	; 196
    6032:	d7 4d       	sbci	r29, 0xD7	; 215
    6034:	6e 85       	ldd	r22, Y+14	; 0x0e
    6036:	7f 85       	ldd	r23, Y+15	; 0x0f
    6038:	41 2f       	mov	r20, r17
    603a:	81 e0       	ldi	r24, 0x01	; 1
    603c:	19 95       	eicall
    603e:	df 91       	pop	r29
    6040:	cf 91       	pop	r28
    6042:	1f 91       	pop	r17
    6044:	0f 91       	pop	r16
    6046:	ff 90       	pop	r15
    6048:	08 95       	ret

0000604a <udd_ep_free>:
    604a:	cf 93       	push	r28
    604c:	c8 2f       	mov	r28, r24
    604e:	ae df       	rcall	.-164    	; 0x5fac <udd_ep_abort>
    6050:	ec 2f       	mov	r30, r28
    6052:	ef 70       	andi	r30, 0x0F	; 15
    6054:	f0 e0       	ldi	r31, 0x00	; 0
    6056:	ee 0f       	add	r30, r30
    6058:	ff 1f       	adc	r31, r31
    605a:	8c 2f       	mov	r24, r28
    605c:	cc 0f       	add	r28, r28
    605e:	99 0b       	sbc	r25, r25
    6060:	88 27       	eor	r24, r24
    6062:	99 0f       	add	r25, r25
    6064:	88 1f       	adc	r24, r24
    6066:	99 27       	eor	r25, r25
    6068:	e8 0f       	add	r30, r24
    606a:	f9 1f       	adc	r31, r25
    606c:	ee 0f       	add	r30, r30
    606e:	ff 1f       	adc	r31, r31
    6070:	ee 0f       	add	r30, r30
    6072:	ff 1f       	adc	r31, r31
    6074:	ee 0f       	add	r30, r30
    6076:	ff 1f       	adc	r31, r31
    6078:	e4 5c       	subi	r30, 0xC4	; 196
    607a:	f7 4d       	sbci	r31, 0xD7	; 215
    607c:	15 86       	std	Z+13, r1	; 0x0d
    607e:	cf 91       	pop	r28
    6080:	08 95       	ret

00006082 <udd_ep_set_halt>:
    6082:	e8 2f       	mov	r30, r24
    6084:	ef 70       	andi	r30, 0x0F	; 15
    6086:	f0 e0       	ldi	r31, 0x00	; 0
    6088:	ee 0f       	add	r30, r30
    608a:	ff 1f       	adc	r31, r31
    608c:	28 2f       	mov	r18, r24
    608e:	08 2e       	mov	r0, r24
    6090:	00 0c       	add	r0, r0
    6092:	33 0b       	sbc	r19, r19
    6094:	22 27       	eor	r18, r18
    6096:	33 0f       	add	r19, r19
    6098:	22 1f       	adc	r18, r18
    609a:	33 27       	eor	r19, r19
    609c:	e2 0f       	add	r30, r18
    609e:	f3 1f       	adc	r31, r19
    60a0:	ee 0f       	add	r30, r30
    60a2:	ff 1f       	adc	r31, r31
    60a4:	ee 0f       	add	r30, r30
    60a6:	ff 1f       	adc	r31, r31
    60a8:	ee 0f       	add	r30, r30
    60aa:	ff 1f       	adc	r31, r31
    60ac:	e4 5c       	subi	r30, 0xC4	; 196
    60ae:	f7 4d       	sbci	r31, 0xD7	; 215
    60b0:	95 85       	ldd	r25, Z+13	; 0x0d
    60b2:	94 60       	ori	r25, 0x04	; 4
    60b4:	95 87       	std	Z+13, r25	; 0x0d
    60b6:	7a df       	rcall	.-268    	; 0x5fac <udd_ep_abort>
    60b8:	81 e0       	ldi	r24, 0x01	; 1
    60ba:	08 95       	ret

000060bc <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    60bc:	1f 92       	push	r1
    60be:	0f 92       	push	r0
    60c0:	0f b6       	in	r0, 0x3f	; 63
    60c2:	0f 92       	push	r0
    60c4:	11 24       	eor	r1, r1
    60c6:	0b b6       	in	r0, 0x3b	; 59
    60c8:	0f 92       	push	r0
    60ca:	0f 93       	push	r16
    60cc:	2f 93       	push	r18
    60ce:	3f 93       	push	r19
    60d0:	4f 93       	push	r20
    60d2:	5f 93       	push	r21
    60d4:	6f 93       	push	r22
    60d6:	7f 93       	push	r23
    60d8:	8f 93       	push	r24
    60da:	9f 93       	push	r25
    60dc:	af 93       	push	r26
    60de:	bf 93       	push	r27
    60e0:	ef 93       	push	r30
    60e2:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    60e4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    60e8:	88 23       	and	r24, r24
    60ea:	34 f4       	brge	.+12     	; 0x60f8 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    60ec:	80 e8       	ldi	r24, 0x80	; 128
    60ee:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    60f2:	0e 94 70 41 	call	0x82e0	; 0x82e0 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    60f6:	88 c0       	rjmp	.+272    	; 0x6208 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    60f8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    60fc:	82 ff       	sbrs	r24, 2
    60fe:	20 c0       	rjmp	.+64     	; 0x6140 <__vector_125+0x84>
		udd_ack_underflow_event();
    6100:	84 e0       	ldi	r24, 0x04	; 4
    6102:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    6106:	80 91 50 28 	lds	r24, 0x2850	; 0x802850 <udd_sram+0x14>
    610a:	86 ff       	sbrs	r24, 6
    610c:	7d c0       	rjmp	.+250    	; 0x6208 <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    610e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    6112:	81 fd       	sbrc	r24, 1
    6114:	79 c0       	rjmp	.+242    	; 0x6208 <__vector_125+0x14c>
    6116:	e6 da       	rcall	.-2612   	; 0x56e4 <udd_ctrl_interrupt_tc_setup>
    6118:	81 11       	cpse	r24, r1
    611a:	76 c0       	rjmp	.+236    	; 0x6208 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    611c:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <udd_ep_control_state>
    6120:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    6122:	11 f4       	brne	.+4      	; 0x6128 <__vector_125+0x6c>
    6124:	19 da       	rcall	.-3022   	; 0x5558 <udd_ctrl_send_zlp_in>
    6126:	70 c0       	rjmp	.+224    	; 0x6208 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    6128:	84 30       	cpi	r24, 0x04	; 4
    612a:	09 f0       	breq	.+2      	; 0x612e <__vector_125+0x72>
    612c:	6d c0       	rjmp	.+218    	; 0x6208 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    612e:	e1 e5       	ldi	r30, 0x51	; 81
    6130:	f8 e2       	ldi	r31, 0x28	; 40
    6132:	04 e0       	ldi	r16, 0x04	; 4
    6134:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    6136:	e9 e4       	ldi	r30, 0x49	; 73
    6138:	f8 e2       	ldi	r31, 0x28	; 40
    613a:	04 e0       	ldi	r16, 0x04	; 4
    613c:	05 93       	las	Z, r16
    613e:	64 c0       	rjmp	.+200    	; 0x6208 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    6140:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    6144:	81 ff       	sbrs	r24, 1
    6146:	5b c0       	rjmp	.+182    	; 0x61fe <__vector_125+0x142>
		udd_ack_overflow_event();
    6148:	82 e0       	ldi	r24, 0x02	; 2
    614a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    614e:	80 91 48 28 	lds	r24, 0x2848	; 0x802848 <udd_sram+0xc>
    6152:	86 ff       	sbrs	r24, 6
    6154:	59 c0       	rjmp	.+178    	; 0x6208 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    6156:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    615a:	81 fd       	sbrc	r24, 1
    615c:	55 c0       	rjmp	.+170    	; 0x6208 <__vector_125+0x14c>
    615e:	c2 da       	rcall	.-2684   	; 0x56e4 <udd_ctrl_interrupt_tc_setup>
    6160:	81 11       	cpse	r24, r1
    6162:	52 c0       	rjmp	.+164    	; 0x6208 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    6164:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <udd_ep_control_state>
    6168:	82 30       	cpi	r24, 0x02	; 2
    616a:	41 f4       	brne	.+16     	; 0x617c <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    616c:	84 e0       	ldi	r24, 0x04	; 4
    616e:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    6172:	e8 e4       	ldi	r30, 0x48	; 72
    6174:	f8 e2       	ldi	r31, 0x28	; 40
    6176:	02 e0       	ldi	r16, 0x02	; 2
    6178:	06 93       	lac	Z, r16
    617a:	46 c0       	rjmp	.+140    	; 0x6208 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    617c:	83 30       	cpi	r24, 0x03	; 3
    617e:	09 f0       	breq	.+2      	; 0x6182 <__vector_125+0xc6>
    6180:	43 c0       	rjmp	.+134    	; 0x6208 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    6182:	e1 e5       	ldi	r30, 0x51	; 81
    6184:	f8 e2       	ldi	r31, 0x28	; 40
    6186:	04 e0       	ldi	r16, 0x04	; 4
    6188:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    618a:	e9 e4       	ldi	r30, 0x49	; 73
    618c:	f8 e2       	ldi	r31, 0x28	; 40
    618e:	04 e0       	ldi	r16, 0x04	; 4
    6190:	05 93       	las	Z, r16
    6192:	3a c0       	rjmp	.+116    	; 0x6208 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    6194:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    6196:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    619a:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    619c:	07 df       	rcall	.-498    	; 0x5fac <udd_ep_abort>
    619e:	81 e8       	ldi	r24, 0x81	; 129
    61a0:	05 df       	rcall	.-502    	; 0x5fac <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    61a2:	82 e0       	ldi	r24, 0x02	; 2
    61a4:	03 df       	rcall	.-506    	; 0x5fac <udd_ep_abort>
    61a6:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    61a8:	01 df       	rcall	.-510    	; 0x5fac <udd_ep_abort>
    61aa:	0e 94 46 41 	call	0x828c	; 0x828c <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    61ae:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    61b2:	ec e3       	ldi	r30, 0x3C	; 60
    61b4:	f8 e2       	ldi	r31, 0x28	; 40
	udd_endpoint_clear_status(ep_ctrl);
    61b6:	15 86       	std	Z+13, r1	; 0x0d
    61b8:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    61ba:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    61bc:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    61be:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    61c0:	15 8a       	std	Z+21, r1	; 0x15
    61c2:	94 8b       	std	Z+20, r25	; 0x14
    61c4:	85 8b       	std	Z+21, r24	; 0x15
    61c6:	85 ef       	ldi	r24, 0xF5	; 245
		// Reset endpoint control management
		udd_ctrl_init();
    61c8:	97 e2       	ldi	r25, 0x27	; 39
    61ca:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    61cc:	91 8b       	std	Z+17, r25	; 0x11
    61ce:	91 d9       	rcall	.-3294   	; 0x54f2 <udd_ctrl_init>
		udd_ack_suspend_event();
    61d0:	1b c0       	rjmp	.+54     	; 0x6208 <__vector_125+0x14c>
    61d2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    61d6:	86 ff       	sbrs	r24, 6
    61d8:	07 c0       	rjmp	.+14     	; 0x61e8 <__vector_125+0x12c>
    61da:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    61dc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    61e0:	80 e0       	ldi	r24, 0x00	; 0
    61e2:	4f d9       	rcall	.-3426   	; 0x5482 <udd_sleep_mode>
		udd_ack_resume_event();
    61e4:	ca d5       	rcall	.+2964   	; 0x6d7a <usb_callback_suspend_action>
    61e6:	10 c0       	rjmp	.+32     	; 0x6208 <__vector_125+0x14c>
    61e8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    61ec:	85 ff       	sbrs	r24, 5
    61ee:	0c c0       	rjmp	.+24     	; 0x6208 <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    61f0:	80 e2       	ldi	r24, 0x20	; 32
    61f2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    61f6:	81 e0       	ldi	r24, 0x01	; 1
    61f8:	44 d9       	rcall	.-3448   	; 0x5482 <udd_sleep_mode>
    61fa:	c0 d5       	rcall	.+2944   	; 0x6d7c <usb_callback_resume_action>
    61fc:	05 c0       	rjmp	.+10     	; 0x6208 <__vector_125+0x14c>
    61fe:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    6202:	84 fd       	sbrc	r24, 4
    6204:	c7 cf       	rjmp	.-114    	; 0x6194 <__vector_125+0xd8>
    6206:	e5 cf       	rjmp	.-54     	; 0x61d2 <__vector_125+0x116>
    6208:	ff 91       	pop	r31
    620a:	ef 91       	pop	r30
    620c:	bf 91       	pop	r27
    620e:	af 91       	pop	r26
    6210:	9f 91       	pop	r25
    6212:	8f 91       	pop	r24
    6214:	7f 91       	pop	r23
    6216:	6f 91       	pop	r22
    6218:	5f 91       	pop	r21
    621a:	4f 91       	pop	r20
    621c:	3f 91       	pop	r19
    621e:	2f 91       	pop	r18
    6220:	0f 91       	pop	r16
    6222:	0f 90       	pop	r0
    6224:	0b be       	out	0x3b, r0	; 59
    6226:	0f 90       	pop	r0
    6228:	0f be       	out	0x3f, r0	; 63
    622a:	0f 90       	pop	r0
    622c:	1f 90       	pop	r1
    622e:	18 95       	reti

00006230 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    6230:	1f 92       	push	r1
    6232:	0f 92       	push	r0
    6234:	0f b6       	in	r0, 0x3f	; 63
    6236:	0f 92       	push	r0
    6238:	11 24       	eor	r1, r1
    623a:	0b b6       	in	r0, 0x3b	; 59
    623c:	0f 92       	push	r0
    623e:	0f 93       	push	r16
    6240:	1f 93       	push	r17
    6242:	2f 93       	push	r18
    6244:	3f 93       	push	r19
    6246:	4f 93       	push	r20
    6248:	5f 93       	push	r21
    624a:	6f 93       	push	r22
    624c:	7f 93       	push	r23
    624e:	8f 93       	push	r24
    6250:	9f 93       	push	r25
    6252:	af 93       	push	r26
    6254:	bf 93       	push	r27
    6256:	cf 93       	push	r28
    6258:	df 93       	push	r29
    625a:	ef 93       	push	r30
    625c:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    625e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    6262:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    6264:	03 c0       	rjmp	.+6      	; 0x626c <__vector_126+0x3c>
    6266:	3e da       	rcall	.-2948   	; 0x56e4 <udd_ctrl_interrupt_tc_setup>
    6268:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    626a:	c4 c0       	rjmp	.+392    	; 0x63f4 <__vector_126+0x1c4>
    626c:	82 e0       	ldi	r24, 0x02	; 2
    626e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    6272:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    6276:	81 95       	neg	r24
    6278:	88 0f       	add	r24, r24
    627a:	e8 e4       	ldi	r30, 0x48	; 72
    627c:	f8 e2       	ldi	r31, 0x28	; 40
    627e:	e8 1b       	sub	r30, r24
    6280:	f1 09       	sbc	r31, r1
    6282:	20 81       	ld	r18, Z
    6284:	31 81       	ldd	r19, Z+1	; 0x01
    6286:	28 54       	subi	r18, 0x48	; 72
    6288:	38 42       	sbci	r19, 0x28	; 40
    628a:	36 95       	lsr	r19
    628c:	27 95       	ror	r18
    628e:	36 95       	lsr	r19
    6290:	27 95       	ror	r18
    6292:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    6294:	27 95       	ror	r18
    6296:	82 2f       	mov	r24, r18
    6298:	86 95       	lsr	r24
    629a:	20 fd       	sbrc	r18, 0
    629c:	02 c0       	rjmp	.+4      	; 0x62a2 <__vector_126+0x72>
    629e:	90 e0       	ldi	r25, 0x00	; 0
    62a0:	01 c0       	rjmp	.+2      	; 0x62a4 <__vector_126+0x74>
    62a2:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    62a4:	89 0f       	add	r24, r25
    62a6:	e8 2f       	mov	r30, r24
    62a8:	ef 70       	andi	r30, 0x0F	; 15
    62aa:	f0 e0       	ldi	r31, 0x00	; 0
    62ac:	ee 0f       	add	r30, r30
    62ae:	ff 1f       	adc	r31, r31
    62b0:	28 2f       	mov	r18, r24
    62b2:	08 2e       	mov	r0, r24
    62b4:	00 0c       	add	r0, r0
    62b6:	33 0b       	sbc	r19, r19
    62b8:	22 27       	eor	r18, r18
    62ba:	33 0f       	add	r19, r19
    62bc:	22 1f       	adc	r18, r18
    62be:	33 27       	eor	r19, r19
    62c0:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    62c2:	f3 1f       	adc	r31, r19
    62c4:	df 01       	movw	r26, r30
    62c6:	aa 0f       	add	r26, r26
    62c8:	bb 1f       	adc	r27, r27
    62ca:	aa 0f       	add	r26, r26
    62cc:	bb 1f       	adc	r27, r27
    62ce:	aa 0f       	add	r26, r26
    62d0:	bb 1f       	adc	r27, r27
    62d2:	a4 5c       	subi	r26, 0xC4	; 196
    62d4:	b7 4d       	sbci	r27, 0xD7	; 215
    62d6:	1c 96       	adiw	r26, 0x0c	; 12
    62d8:	9c 91       	ld	r25, X
    62da:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    62dc:	8b c0       	rjmp	.+278    	; 0x63f4 <__vector_126+0x1c4>
    62de:	ee 0f       	add	r30, r30
    62e0:	ff 1f       	adc	r31, r31
    62e2:	ee 0f       	add	r30, r30
    62e4:	ff 1f       	adc	r31, r31
    62e6:	ee 0f       	add	r30, r30
    62e8:	ff 1f       	adc	r31, r31
    62ea:	e8 5b       	subi	r30, 0xB8	; 184
    62ec:	f7 4d       	sbci	r31, 0xD7	; 215
    62ee:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    62f0:	06 93       	lac	Z, r16
    62f2:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    62f4:	7a c0       	rjmp	.+244    	; 0x63ea <__vector_126+0x1ba>
    62f6:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    62fa:	84 30       	cpi	r24, 0x04	; 4
    62fc:	19 f4       	brne	.+6      	; 0x6304 <__vector_126+0xd4>
    62fe:	3a d9       	rcall	.-3468   	; 0x5574 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    6300:	f8 d8       	rcall	.-3600   	; 0x54f2 <udd_ctrl_init>
    6302:	78 c0       	rjmp	.+240    	; 0x63f4 <__vector_126+0x1c4>
    6304:	00 91 4a 28 	lds	r16, 0x284A	; 0x80284a <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    6308:	10 91 4b 28 	lds	r17, 0x284B	; 0x80284b <udd_sram+0xf>
    630c:	80 91 c9 2c 	lds	r24, 0x2CC9	; 0x802cc9 <udd_g_ctrlreq+0xa>
    6310:	90 91 ca 2c 	lds	r25, 0x2CCA	; 0x802cca <udd_g_ctrlreq+0xb>
    6314:	c0 91 35 28 	lds	r28, 0x2835	; 0x802835 <udd_ctrl_payload_nb_trans>
    6318:	d0 91 36 28 	lds	r29, 0x2836	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    631c:	98 01       	movw	r18, r16
    631e:	2c 0f       	add	r18, r28
    6320:	3d 1f       	adc	r19, r29
    6322:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    6324:	93 07       	cpc	r25, r19
    6326:	18 f4       	brcc	.+6      	; 0x632e <__vector_126+0xfe>
    6328:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    632a:	0c 1b       	sub	r16, r28
    632c:	1d 0b       	sbc	r17, r29
    632e:	80 91 c7 2c 	lds	r24, 0x2CC7	; 0x802cc7 <udd_g_ctrlreq+0x8>
    6332:	90 91 c8 2c 	lds	r25, 0x2CC8	; 0x802cc8 <udd_g_ctrlreq+0x9>
    6336:	a8 01       	movw	r20, r16
    6338:	65 ef       	ldi	r22, 0xF5	; 245
    633a:	77 e2       	ldi	r23, 0x27	; 39
    633c:	8c 0f       	add	r24, r28
    633e:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    6340:	0e 94 ee 47 	call	0x8fdc	; 0x8fdc <memcpy>
    6344:	c0 0f       	add	r28, r16
    6346:	d1 1f       	adc	r29, r17
    6348:	c0 93 35 28 	sts	0x2835, r28	; 0x802835 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    634c:	d0 93 36 28 	sts	0x2836, r29	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    6350:	00 34       	cpi	r16, 0x40	; 64
    6352:	11 05       	cpc	r17, r1
    6354:	69 f4       	brne	.+26     	; 0x6370 <__vector_126+0x140>
    6356:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    635a:	90 91 38 28 	lds	r25, 0x2838	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
    635e:	8c 0f       	add	r24, r28
    6360:	9d 1f       	adc	r25, r29
    6362:	20 91 c5 2c 	lds	r18, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    6366:	30 91 c6 2c 	lds	r19, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    636a:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    636c:	93 07       	cpc	r25, r19
    636e:	80 f0       	brcs	.+32     	; 0x6390 <__vector_126+0x160>
    6370:	ef eb       	ldi	r30, 0xBF	; 191
    6372:	fc e2       	ldi	r31, 0x2C	; 44
		if (NULL != udd_g_ctrlreq.over_under_run) {
    6374:	c2 87       	std	Z+10, r28	; 0x0a
    6376:	d3 87       	std	Z+11, r29	; 0x0b
    6378:	06 84       	ldd	r0, Z+14	; 0x0e
    637a:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    637c:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    637e:	30 97       	sbiw	r30, 0x00	; 0
    6380:	29 f0       	breq	.+10     	; 0x638c <__vector_126+0x15c>
    6382:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    6384:	81 11       	cpse	r24, r1
    6386:	02 c0       	rjmp	.+4      	; 0x638c <__vector_126+0x15c>
    6388:	d9 d8       	rcall	.-3662   	; 0x553c <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    638a:	34 c0       	rjmp	.+104    	; 0x63f4 <__vector_126+0x1c4>
    638c:	e5 d8       	rcall	.-3638   	; 0x5558 <udd_ctrl_send_zlp_in>
    638e:	32 c0       	rjmp	.+100    	; 0x63f4 <__vector_126+0x1c4>
    6390:	80 91 c9 2c 	lds	r24, 0x2CC9	; 0x802cc9 <udd_g_ctrlreq+0xa>
    6394:	90 91 ca 2c 	lds	r25, 0x2CCA	; 0x802cca <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    6398:	c8 17       	cp	r28, r24
    639a:	d9 07       	cpc	r29, r25
    639c:	f9 f4       	brne	.+62     	; 0x63dc <__vector_126+0x1ac>
    639e:	e0 91 cd 2c 	lds	r30, 0x2CCD	; 0x802ccd <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    63a2:	f0 91 ce 2c 	lds	r31, 0x2CCE	; 0x802cce <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    63a6:	30 97       	sbiw	r30, 0x00	; 0
    63a8:	11 f4       	brne	.+4      	; 0x63ae <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    63aa:	c8 d8       	rcall	.-3696   	; 0x553c <udd_ctrl_stall_data>
    63ac:	23 c0       	rjmp	.+70     	; 0x63f4 <__vector_126+0x1c4>
    63ae:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    63b0:	81 11       	cpse	r24, r1
    63b2:	02 c0       	rjmp	.+4      	; 0x63b8 <__vector_126+0x188>
    63b4:	c3 d8       	rcall	.-3706   	; 0x553c <udd_ctrl_stall_data>
    63b6:	1e c0       	rjmp	.+60     	; 0x63f4 <__vector_126+0x1c4>
    63b8:	20 91 37 28 	lds	r18, 0x2837	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    63bc:	30 91 38 28 	lds	r19, 0x2838	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
    63c0:	80 91 35 28 	lds	r24, 0x2835	; 0x802835 <udd_ctrl_payload_nb_trans>
    63c4:	90 91 36 28 	lds	r25, 0x2836	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    63c8:	82 0f       	add	r24, r18
    63ca:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    63cc:	80 93 37 28 	sts	0x2837, r24	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    63d0:	90 93 38 28 	sts	0x2838, r25	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    63d4:	10 92 35 28 	sts	0x2835, r1	; 0x802835 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    63d8:	10 92 36 28 	sts	0x2836, r1	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    63dc:	e8 e4       	ldi	r30, 0x48	; 72
    63de:	f8 e2       	ldi	r31, 0x28	; 40
		udd_ctrl_in_sent();
    63e0:	02 e0       	ldi	r16, 0x02	; 2
    63e2:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    63e4:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    63e6:	06 93       	lac	Z, r16
    63e8:	05 c0       	rjmp	.+10     	; 0x63f4 <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    63ea:	80 38       	cpi	r24, 0x80	; 128
    63ec:	11 f4       	brne	.+4      	; 0x63f2 <__vector_126+0x1c2>
    63ee:	ca d8       	rcall	.-3692   	; 0x5584 <udd_ctrl_in_sent>
    63f0:	01 c0       	rjmp	.+2      	; 0x63f4 <__vector_126+0x1c4>
    63f2:	ea d9       	rcall	.-3116   	; 0x57c8 <udd_ep_trans_complet>
    63f4:	ff 91       	pop	r31
    63f6:	ef 91       	pop	r30
    63f8:	df 91       	pop	r29
    63fa:	cf 91       	pop	r28
    63fc:	bf 91       	pop	r27
    63fe:	af 91       	pop	r26
    6400:	9f 91       	pop	r25
    6402:	8f 91       	pop	r24
    6404:	7f 91       	pop	r23
    6406:	6f 91       	pop	r22
    6408:	5f 91       	pop	r21
    640a:	4f 91       	pop	r20
    640c:	3f 91       	pop	r19
    640e:	2f 91       	pop	r18
    6410:	1f 91       	pop	r17
    6412:	0f 91       	pop	r16
    6414:	0f 90       	pop	r0
    6416:	0b be       	out	0x3b, r0	; 59
    6418:	0f 90       	pop	r0
    641a:	0f be       	out	0x3f, r0	; 63
    641c:	0f 90       	pop	r0
    641e:	1f 90       	pop	r1
    6420:	18 95       	reti

00006422 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    6422:	cf 92       	push	r12
    6424:	df 92       	push	r13
    6426:	ef 92       	push	r14
    6428:	ff 92       	push	r15
    642a:	cf 93       	push	r28
    642c:	df 93       	push	r29
    642e:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    6430:	6b 01       	movw	r12, r22
    6432:	e1 2c       	mov	r14, r1
    6434:	f1 2c       	mov	r15, r1
    6436:	60 e8       	ldi	r22, 0x80	; 128
    6438:	73 ec       	ldi	r23, 0xC3	; 195
    643a:	89 ec       	ldi	r24, 0xC9	; 201
    643c:	91 e0       	ldi	r25, 0x01	; 1
    643e:	a7 01       	movw	r20, r14
    6440:	96 01       	movw	r18, r12
    6442:	0e 94 06 45 	call	0x8a0c	; 0x8a0c <__udivmodsi4>
    6446:	ca 01       	movw	r24, r20
    6448:	b9 01       	movw	r22, r18
    644a:	2f ef       	ldi	r18, 0xFF	; 255
    644c:	3f ef       	ldi	r19, 0xFF	; 255
    644e:	40 e0       	ldi	r20, 0x00	; 0
    6450:	50 e0       	ldi	r21, 0x00	; 0
    6452:	0e 94 06 45 	call	0x8a0c	; 0x8a0c <__udivmodsi4>
	if (smallest_div < 1) {
    6456:	21 15       	cp	r18, r1
    6458:	31 05       	cpc	r19, r1
    645a:	29 f4       	brne	.+10     	; 0x6466 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    645c:	81 e0       	ldi	r24, 0x01	; 1
    645e:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    6460:	21 e0       	ldi	r18, 0x01	; 1
    6462:	30 e0       	ldi	r19, 0x00	; 0
    6464:	2d c0       	rjmp	.+90     	; 0x64c0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    6466:	22 30       	cpi	r18, 0x02	; 2
    6468:	31 05       	cpc	r19, r1
    646a:	28 f4       	brcc	.+10     	; 0x6476 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    646c:	82 e0       	ldi	r24, 0x02	; 2
    646e:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    6470:	22 e0       	ldi	r18, 0x02	; 2
    6472:	30 e0       	ldi	r19, 0x00	; 0
    6474:	25 c0       	rjmp	.+74     	; 0x64c0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    6476:	24 30       	cpi	r18, 0x04	; 4
    6478:	31 05       	cpc	r19, r1
    647a:	28 f4       	brcc	.+10     	; 0x6486 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    647c:	83 e0       	ldi	r24, 0x03	; 3
    647e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    6480:	24 e0       	ldi	r18, 0x04	; 4
    6482:	30 e0       	ldi	r19, 0x00	; 0
    6484:	1d c0       	rjmp	.+58     	; 0x64c0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    6486:	28 30       	cpi	r18, 0x08	; 8
    6488:	31 05       	cpc	r19, r1
    648a:	28 f4       	brcc	.+10     	; 0x6496 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    648c:	84 e0       	ldi	r24, 0x04	; 4
    648e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    6490:	28 e0       	ldi	r18, 0x08	; 8
    6492:	30 e0       	ldi	r19, 0x00	; 0
    6494:	15 c0       	rjmp	.+42     	; 0x64c0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    6496:	20 34       	cpi	r18, 0x40	; 64
    6498:	31 05       	cpc	r19, r1
    649a:	28 f4       	brcc	.+10     	; 0x64a6 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    649c:	85 e0       	ldi	r24, 0x05	; 5
    649e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    64a0:	20 e4       	ldi	r18, 0x40	; 64
    64a2:	30 e0       	ldi	r19, 0x00	; 0
    64a4:	0d c0       	rjmp	.+26     	; 0x64c0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    64a6:	2f 3f       	cpi	r18, 0xFF	; 255
    64a8:	31 05       	cpc	r19, r1
    64aa:	09 f0       	breq	.+2      	; 0x64ae <pwm_set_frequency+0x8c>
    64ac:	28 f4       	brcc	.+10     	; 0x64b8 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    64ae:	86 e0       	ldi	r24, 0x06	; 6
    64b0:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    64b2:	20 e0       	ldi	r18, 0x00	; 0
    64b4:	31 e0       	ldi	r19, 0x01	; 1
    64b6:	04 c0       	rjmp	.+8      	; 0x64c0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    64b8:	87 e0       	ldi	r24, 0x07	; 7
    64ba:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    64bc:	20 e0       	ldi	r18, 0x00	; 0
    64be:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    64c0:	40 e0       	ldi	r20, 0x00	; 0
    64c2:	50 e0       	ldi	r21, 0x00	; 0
    64c4:	60 e8       	ldi	r22, 0x80	; 128
    64c6:	73 ec       	ldi	r23, 0xC3	; 195
    64c8:	89 ec       	ldi	r24, 0xC9	; 201
    64ca:	91 e0       	ldi	r25, 0x01	; 1
    64cc:	0e 94 06 45 	call	0x8a0c	; 0x8a0c <__udivmodsi4>
    64d0:	ca 01       	movw	r24, r20
    64d2:	b9 01       	movw	r22, r18
    64d4:	a7 01       	movw	r20, r14
    64d6:	96 01       	movw	r18, r12
    64d8:	0e 94 06 45 	call	0x8a0c	; 0x8a0c <__udivmodsi4>
    64dc:	2d 83       	std	Y+5, r18	; 0x05
    64de:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    64e0:	24 36       	cpi	r18, 0x64	; 100
    64e2:	31 05       	cpc	r19, r1
    64e4:	18 f4       	brcc	.+6      	; 0x64ec <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    64e6:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    64e8:	1d 82       	std	Y+5, r1	; 0x05
    64ea:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    64ec:	df 91       	pop	r29
    64ee:	cf 91       	pop	r28
    64f0:	ff 90       	pop	r15
    64f2:	ef 90       	pop	r14
    64f4:	df 90       	pop	r13
    64f6:	cf 90       	pop	r12
    64f8:	08 95       	ret

000064fa <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    64fa:	0f 93       	push	r16
    64fc:	1f 93       	push	r17
    64fe:	cf 93       	push	r28
    6500:	df 93       	push	r29
    6502:	ec 01       	movw	r28, r24
    6504:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    6506:	86 2f       	mov	r24, r22
    6508:	90 e0       	ldi	r25, 0x00	; 0
    650a:	87 30       	cpi	r24, 0x07	; 7
    650c:	91 05       	cpc	r25, r1
    650e:	08 f0       	brcs	.+2      	; 0x6512 <pwm_init+0x18>
    6510:	8b c0       	rjmp	.+278    	; 0x6628 <pwm_init+0x12e>
    6512:	fc 01       	movw	r30, r24
    6514:	88 27       	eor	r24, r24
    6516:	eb 5f       	subi	r30, 0xFB	; 251
    6518:	fe 4f       	sbci	r31, 0xFE	; 254
    651a:	8f 4f       	sbci	r24, 0xFF	; 255
    651c:	0c 94 44 45 	jmp	0x8a88	; 0x8a88 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    6520:	80 e0       	ldi	r24, 0x00	; 0
    6522:	98 e0       	ldi	r25, 0x08	; 8
    6524:	88 83       	st	Y, r24
    6526:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    6528:	e0 e4       	ldi	r30, 0x40	; 64
    652a:	f6 e0       	ldi	r31, 0x06	; 6
    652c:	30 81       	ld	r19, Z
    652e:	81 e0       	ldi	r24, 0x01	; 1
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	2f ef       	ldi	r18, 0xFF	; 255
    6534:	24 0f       	add	r18, r20
    6536:	02 c0       	rjmp	.+4      	; 0x653c <pwm_init+0x42>
    6538:	88 0f       	add	r24, r24
    653a:	99 1f       	adc	r25, r25
    653c:	2a 95       	dec	r18
    653e:	e2 f7       	brpl	.-8      	; 0x6538 <pwm_init+0x3e>
    6540:	83 2b       	or	r24, r19
    6542:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    6544:	71 c0       	rjmp	.+226    	; 0x6628 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    6546:	80 e4       	ldi	r24, 0x40	; 64
    6548:	98 e0       	ldi	r25, 0x08	; 8
    654a:	88 83       	st	Y, r24
    654c:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    654e:	e0 e4       	ldi	r30, 0x40	; 64
    6550:	f6 e0       	ldi	r31, 0x06	; 6
    6552:	30 81       	ld	r19, Z
    6554:	81 e0       	ldi	r24, 0x01	; 1
    6556:	90 e0       	ldi	r25, 0x00	; 0
    6558:	23 e0       	ldi	r18, 0x03	; 3
    655a:	24 0f       	add	r18, r20
    655c:	02 c0       	rjmp	.+4      	; 0x6562 <pwm_init+0x68>
    655e:	88 0f       	add	r24, r24
    6560:	99 1f       	adc	r25, r25
    6562:	2a 95       	dec	r18
    6564:	e2 f7       	brpl	.-8      	; 0x655e <pwm_init+0x64>
    6566:	83 2b       	or	r24, r19
    6568:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    656a:	5e c0       	rjmp	.+188    	; 0x6628 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    656c:	80 e0       	ldi	r24, 0x00	; 0
    656e:	99 e0       	ldi	r25, 0x09	; 9
    6570:	88 83       	st	Y, r24
    6572:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    6574:	e0 e6       	ldi	r30, 0x60	; 96
    6576:	f6 e0       	ldi	r31, 0x06	; 6
    6578:	30 81       	ld	r19, Z
    657a:	81 e0       	ldi	r24, 0x01	; 1
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	2f ef       	ldi	r18, 0xFF	; 255
    6580:	24 0f       	add	r18, r20
    6582:	02 c0       	rjmp	.+4      	; 0x6588 <pwm_init+0x8e>
    6584:	88 0f       	add	r24, r24
    6586:	99 1f       	adc	r25, r25
    6588:	2a 95       	dec	r18
    658a:	e2 f7       	brpl	.-8      	; 0x6584 <pwm_init+0x8a>
    658c:	83 2b       	or	r24, r19
    658e:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    6590:	4b c0       	rjmp	.+150    	; 0x6628 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    6592:	80 e4       	ldi	r24, 0x40	; 64
    6594:	99 e0       	ldi	r25, 0x09	; 9
    6596:	88 83       	st	Y, r24
    6598:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    659a:	e0 e6       	ldi	r30, 0x60	; 96
    659c:	f6 e0       	ldi	r31, 0x06	; 6
    659e:	30 81       	ld	r19, Z
    65a0:	81 e0       	ldi	r24, 0x01	; 1
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	23 e0       	ldi	r18, 0x03	; 3
    65a6:	24 0f       	add	r18, r20
    65a8:	02 c0       	rjmp	.+4      	; 0x65ae <pwm_init+0xb4>
    65aa:	88 0f       	add	r24, r24
    65ac:	99 1f       	adc	r25, r25
    65ae:	2a 95       	dec	r18
    65b0:	e2 f7       	brpl	.-8      	; 0x65aa <pwm_init+0xb0>
    65b2:	83 2b       	or	r24, r19
    65b4:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    65b6:	38 c0       	rjmp	.+112    	; 0x6628 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    65b8:	80 e0       	ldi	r24, 0x00	; 0
    65ba:	9a e0       	ldi	r25, 0x0A	; 10
    65bc:	88 83       	st	Y, r24
    65be:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    65c0:	e0 e8       	ldi	r30, 0x80	; 128
    65c2:	f6 e0       	ldi	r31, 0x06	; 6
    65c4:	30 81       	ld	r19, Z
    65c6:	81 e0       	ldi	r24, 0x01	; 1
    65c8:	90 e0       	ldi	r25, 0x00	; 0
    65ca:	2f ef       	ldi	r18, 0xFF	; 255
    65cc:	24 0f       	add	r18, r20
    65ce:	02 c0       	rjmp	.+4      	; 0x65d4 <pwm_init+0xda>
    65d0:	88 0f       	add	r24, r24
    65d2:	99 1f       	adc	r25, r25
    65d4:	2a 95       	dec	r18
    65d6:	e2 f7       	brpl	.-8      	; 0x65d0 <pwm_init+0xd6>
    65d8:	83 2b       	or	r24, r19
    65da:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    65dc:	25 c0       	rjmp	.+74     	; 0x6628 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    65de:	80 e4       	ldi	r24, 0x40	; 64
    65e0:	9a e0       	ldi	r25, 0x0A	; 10
    65e2:	88 83       	st	Y, r24
    65e4:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    65e6:	e0 e8       	ldi	r30, 0x80	; 128
    65e8:	f6 e0       	ldi	r31, 0x06	; 6
    65ea:	30 81       	ld	r19, Z
    65ec:	81 e0       	ldi	r24, 0x01	; 1
    65ee:	90 e0       	ldi	r25, 0x00	; 0
    65f0:	23 e0       	ldi	r18, 0x03	; 3
    65f2:	24 0f       	add	r18, r20
    65f4:	02 c0       	rjmp	.+4      	; 0x65fa <pwm_init+0x100>
    65f6:	88 0f       	add	r24, r24
    65f8:	99 1f       	adc	r25, r25
    65fa:	2a 95       	dec	r18
    65fc:	e2 f7       	brpl	.-8      	; 0x65f6 <pwm_init+0xfc>
    65fe:	83 2b       	or	r24, r19
    6600:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    6602:	12 c0       	rjmp	.+36     	; 0x6628 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    6604:	80 e0       	ldi	r24, 0x00	; 0
    6606:	9b e0       	ldi	r25, 0x0B	; 11
    6608:	88 83       	st	Y, r24
    660a:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    660c:	e0 ea       	ldi	r30, 0xA0	; 160
    660e:	f6 e0       	ldi	r31, 0x06	; 6
    6610:	30 81       	ld	r19, Z
    6612:	81 e0       	ldi	r24, 0x01	; 1
    6614:	90 e0       	ldi	r25, 0x00	; 0
    6616:	2f ef       	ldi	r18, 0xFF	; 255
    6618:	24 0f       	add	r18, r20
    661a:	02 c0       	rjmp	.+4      	; 0x6620 <pwm_init+0x126>
    661c:	88 0f       	add	r24, r24
    661e:	99 1f       	adc	r25, r25
    6620:	2a 95       	dec	r18
    6622:	e2 f7       	brpl	.-8      	; 0x661c <pwm_init+0x122>
    6624:	83 2b       	or	r24, r19
    6626:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    6628:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    662a:	42 30       	cpi	r20, 0x02	; 2
    662c:	61 f0       	breq	.+24     	; 0x6646 <pwm_init+0x14c>
    662e:	18 f4       	brcc	.+6      	; 0x6636 <pwm_init+0x13c>
    6630:	41 30       	cpi	r20, 0x01	; 1
    6632:	31 f0       	breq	.+12     	; 0x6640 <pwm_init+0x146>
    6634:	10 c0       	rjmp	.+32     	; 0x6656 <pwm_init+0x15c>
    6636:	43 30       	cpi	r20, 0x03	; 3
    6638:	49 f0       	breq	.+18     	; 0x664c <pwm_init+0x152>
    663a:	44 30       	cpi	r20, 0x04	; 4
    663c:	51 f0       	breq	.+20     	; 0x6652 <pwm_init+0x158>
    663e:	0b c0       	rjmp	.+22     	; 0x6656 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    6640:	80 e1       	ldi	r24, 0x10	; 16
    6642:	8b 83       	std	Y+3, r24	; 0x03
		break;
    6644:	08 c0       	rjmp	.+16     	; 0x6656 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    6646:	80 e2       	ldi	r24, 0x20	; 32
    6648:	8b 83       	std	Y+3, r24	; 0x03
		break;
    664a:	05 c0       	rjmp	.+10     	; 0x6656 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    664c:	80 e4       	ldi	r24, 0x40	; 64
    664e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    6650:	02 c0       	rjmp	.+4      	; 0x6656 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    6652:	80 e8       	ldi	r24, 0x80	; 128
    6654:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    6656:	88 81       	ld	r24, Y
    6658:	99 81       	ldd	r25, Y+1	; 0x01
    665a:	0e 94 26 28 	call	0x504c	; 0x504c <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    665e:	e8 81       	ld	r30, Y
    6660:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    6662:	81 81       	ldd	r24, Z+1	; 0x01
    6664:	88 7f       	andi	r24, 0xF8	; 248
    6666:	83 60       	ori	r24, 0x03	; 3
    6668:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    666a:	1d 82       	std	Y+5, r1	; 0x05
    666c:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    666e:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    6670:	e8 81       	ld	r30, Y
    6672:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    6674:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    6676:	80 7f       	andi	r24, 0xF0	; 240
    6678:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    667a:	b8 01       	movw	r22, r16
    667c:	ce 01       	movw	r24, r28
    667e:	d1 de       	rcall	.-606    	; 0x6422 <pwm_set_frequency>
}
    6680:	df 91       	pop	r29
    6682:	cf 91       	pop	r28
    6684:	1f 91       	pop	r17
    6686:	0f 91       	pop	r16
    6688:	08 95       	ret

0000668a <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    668a:	cf 93       	push	r28
    668c:	df 93       	push	r29
    668e:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    6690:	2d 81       	ldd	r18, Y+5	; 0x05
    6692:	3e 81       	ldd	r19, Y+6	; 0x06
    6694:	a6 2f       	mov	r26, r22
    6696:	b0 e0       	ldi	r27, 0x00	; 0
    6698:	0e 94 4c 45 	call	0x8a98	; 0x8a98 <__umulhisi3>
    669c:	24 e6       	ldi	r18, 0x64	; 100
    669e:	30 e0       	ldi	r19, 0x00	; 0
    66a0:	40 e0       	ldi	r20, 0x00	; 0
    66a2:	50 e0       	ldi	r21, 0x00	; 0
    66a4:	0e 94 06 45 	call	0x8a0c	; 0x8a0c <__udivmodsi4>
    66a8:	8a 81       	ldd	r24, Y+2	; 0x02
    66aa:	e8 81       	ld	r30, Y
    66ac:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    66ae:	e6 fd       	sbrc	r30, 6
    66b0:	17 c0       	rjmp	.+46     	; 0x66e0 <pwm_start+0x56>
		switch (channel_index) {
    66b2:	82 30       	cpi	r24, 0x02	; 2
    66b4:	61 f0       	breq	.+24     	; 0x66ce <pwm_start+0x44>
    66b6:	18 f4       	brcc	.+6      	; 0x66be <pwm_start+0x34>
    66b8:	81 30       	cpi	r24, 0x01	; 1
    66ba:	31 f0       	breq	.+12     	; 0x66c8 <pwm_start+0x3e>
    66bc:	1b c0       	rjmp	.+54     	; 0x66f4 <pwm_start+0x6a>
    66be:	83 30       	cpi	r24, 0x03	; 3
    66c0:	49 f0       	breq	.+18     	; 0x66d4 <pwm_start+0x4a>
    66c2:	84 30       	cpi	r24, 0x04	; 4
    66c4:	51 f0       	breq	.+20     	; 0x66da <pwm_start+0x50>
    66c6:	16 c0       	rjmp	.+44     	; 0x66f4 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    66c8:	20 af       	std	Z+56, r18	; 0x38
    66ca:	31 af       	std	Z+57, r19	; 0x39
    66cc:	13 c0       	rjmp	.+38     	; 0x66f4 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    66ce:	22 af       	std	Z+58, r18	; 0x3a
    66d0:	33 af       	std	Z+59, r19	; 0x3b
    66d2:	10 c0       	rjmp	.+32     	; 0x66f4 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    66d4:	24 af       	std	Z+60, r18	; 0x3c
    66d6:	35 af       	std	Z+61, r19	; 0x3d
    66d8:	0d c0       	rjmp	.+26     	; 0x66f4 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    66da:	26 af       	std	Z+62, r18	; 0x3e
    66dc:	37 af       	std	Z+63, r19	; 0x3f
    66de:	0a c0       	rjmp	.+20     	; 0x66f4 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    66e0:	81 30       	cpi	r24, 0x01	; 1
    66e2:	19 f0       	breq	.+6      	; 0x66ea <pwm_start+0x60>
    66e4:	82 30       	cpi	r24, 0x02	; 2
    66e6:	21 f0       	breq	.+8      	; 0x66f0 <pwm_start+0x66>
    66e8:	05 c0       	rjmp	.+10     	; 0x66f4 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    66ea:	20 af       	std	Z+56, r18	; 0x38
    66ec:	31 af       	std	Z+57, r19	; 0x39
    66ee:	02 c0       	rjmp	.+4      	; 0x66f4 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    66f0:	22 af       	std	Z+58, r18	; 0x3a
    66f2:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    66f4:	8d 81       	ldd	r24, Y+5	; 0x05
    66f6:	9e 81       	ldd	r25, Y+6	; 0x06
    66f8:	e8 81       	ld	r30, Y
    66fa:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    66fc:	86 a3       	std	Z+38, r24	; 0x26
    66fe:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    6700:	8b 81       	ldd	r24, Y+3	; 0x03
    6702:	e8 81       	ld	r30, Y
    6704:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    6706:	e6 fd       	sbrc	r30, 6
    6708:	04 c0       	rjmp	.+8      	; 0x6712 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    670a:	91 81       	ldd	r25, Z+1	; 0x01
    670c:	89 2b       	or	r24, r25
    670e:	81 83       	std	Z+1, r24	; 0x01
    6710:	04 c0       	rjmp	.+8      	; 0x671a <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    6712:	91 81       	ldd	r25, Z+1	; 0x01
    6714:	80 73       	andi	r24, 0x30	; 48
    6716:	89 2b       	or	r24, r25
    6718:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    671a:	e8 81       	ld	r30, Y
    671c:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    671e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    6720:	80 7f       	andi	r24, 0xF0	; 240
    6722:	9c 81       	ldd	r25, Y+4	; 0x04
    6724:	89 2b       	or	r24, r25
    6726:	80 83       	st	Z, r24
}
    6728:	df 91       	pop	r29
    672a:	cf 91       	pop	r28
    672c:	08 95       	ret

0000672e <__portable_avr_delay_cycles>:
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    672e:	04 c0       	rjmp	.+8      	; 0x6738 <__portable_avr_delay_cycles+0xa>
    6730:	61 50       	subi	r22, 0x01	; 1
    6732:	71 09       	sbc	r23, r1
    6734:	81 09       	sbc	r24, r1
    6736:	91 09       	sbc	r25, r1
    6738:	61 15       	cp	r22, r1
    673a:	71 05       	cpc	r23, r1
    673c:	81 05       	cpc	r24, r1
    673e:	91 05       	cpc	r25, r1
    6740:	b9 f7       	brne	.-18     	; 0x6730 <__portable_avr_delay_cycles+0x2>
    6742:	08 95       	ret

00006744 <isr_rtc_alarm>:
    6744:	10 92 72 2b 	sts	0x2B72, r1	; 0x802b72 <g_rtc_alarm>
    6748:	10 92 73 2b 	sts	0x2B73, r1	; 0x802b73 <g_rtc_alarm+0x1>
    674c:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <g_rtc_alarm+0x2>
    6750:	10 92 75 2b 	sts	0x2B75, r1	; 0x802b75 <g_rtc_alarm+0x3>
    6754:	08 95       	ret

00006756 <isr_adc_a>:
    6756:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    675a:	4e 5b       	subi	r20, 0xBE	; 190
    675c:	51 09       	sbc	r21, r1
    675e:	60 ff       	sbrs	r22, 0
    6760:	ba c0       	rjmp	.+372    	; 0x68d6 <isr_adc_a+0x180>
    6762:	82 95       	swap	r24
    6764:	8f 70       	andi	r24, 0x0F	; 15
    6766:	81 30       	cpi	r24, 0x01	; 1
    6768:	29 f0       	breq	.+10     	; 0x6774 <isr_adc_a+0x1e>
    676a:	08 f4       	brcc	.+2      	; 0x676e <isr_adc_a+0x18>
    676c:	79 c0       	rjmp	.+242    	; 0x6860 <isr_adc_a+0x10a>
    676e:	82 30       	cpi	r24, 0x02	; 2
    6770:	e1 f1       	breq	.+120    	; 0x67ea <isr_adc_a+0x94>
    6772:	08 95       	ret
    6774:	05 2e       	mov	r0, r21
    6776:	00 0c       	add	r0, r0
    6778:	66 0b       	sbc	r22, r22
    677a:	77 0b       	sbc	r23, r23
    677c:	80 91 17 2b 	lds	r24, 0x2B17	; 0x802b17 <g_adc_vctcxo_sum>
    6780:	90 91 18 2b 	lds	r25, 0x2B18	; 0x802b18 <g_adc_vctcxo_sum+0x1>
    6784:	a0 91 19 2b 	lds	r26, 0x2B19	; 0x802b19 <g_adc_vctcxo_sum+0x2>
    6788:	b0 91 1a 2b 	lds	r27, 0x2B1A	; 0x802b1a <g_adc_vctcxo_sum+0x3>
    678c:	48 0f       	add	r20, r24
    678e:	59 1f       	adc	r21, r25
    6790:	6a 1f       	adc	r22, r26
    6792:	7b 1f       	adc	r23, r27
    6794:	40 93 17 2b 	sts	0x2B17, r20	; 0x802b17 <g_adc_vctcxo_sum>
    6798:	50 93 18 2b 	sts	0x2B18, r21	; 0x802b18 <g_adc_vctcxo_sum+0x1>
    679c:	60 93 19 2b 	sts	0x2B19, r22	; 0x802b19 <g_adc_vctcxo_sum+0x2>
    67a0:	70 93 1a 2b 	sts	0x2B1A, r23	; 0x802b1a <g_adc_vctcxo_sum+0x3>
    67a4:	80 91 15 2b 	lds	r24, 0x2B15	; 0x802b15 <g_adc_vctcxo_cnt>
    67a8:	90 91 16 2b 	lds	r25, 0x2B16	; 0x802b16 <g_adc_vctcxo_cnt+0x1>
    67ac:	01 96       	adiw	r24, 0x01	; 1
    67ae:	80 93 15 2b 	sts	0x2B15, r24	; 0x802b15 <g_adc_vctcxo_cnt>
    67b2:	90 93 16 2b 	sts	0x2B16, r25	; 0x802b16 <g_adc_vctcxo_cnt+0x1>
    67b6:	8f 3f       	cpi	r24, 0xFF	; 255
    67b8:	91 05       	cpc	r25, r1
    67ba:	09 f0       	breq	.+2      	; 0x67be <isr_adc_a+0x68>
    67bc:	08 f4       	brcc	.+2      	; 0x67c0 <isr_adc_a+0x6a>
    67be:	40 c1       	rjmp	.+640    	; 0x6a40 <isr_adc_a+0x2ea>
    67c0:	40 93 1b 2b 	sts	0x2B1B, r20	; 0x802b1b <g_adc_vctcxo_cur>
    67c4:	50 93 1c 2b 	sts	0x2B1C, r21	; 0x802b1c <g_adc_vctcxo_cur+0x1>
    67c8:	60 93 1d 2b 	sts	0x2B1D, r22	; 0x802b1d <g_adc_vctcxo_cur+0x2>
    67cc:	70 93 1e 2b 	sts	0x2B1E, r23	; 0x802b1e <g_adc_vctcxo_cur+0x3>
    67d0:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <g_adc_vctcxo_cnt>
    67d4:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <g_adc_vctcxo_cnt+0x1>
    67d8:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <g_adc_vctcxo_sum>
    67dc:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <g_adc_vctcxo_sum+0x1>
    67e0:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <g_adc_vctcxo_sum+0x2>
    67e4:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <g_adc_vctcxo_sum+0x3>
    67e8:	08 95       	ret
    67ea:	05 2e       	mov	r0, r21
    67ec:	00 0c       	add	r0, r0
    67ee:	66 0b       	sbc	r22, r22
    67f0:	77 0b       	sbc	r23, r23
    67f2:	80 91 0d 2b 	lds	r24, 0x2B0D	; 0x802b0d <g_adc_5v0_sum>
    67f6:	90 91 0e 2b 	lds	r25, 0x2B0E	; 0x802b0e <g_adc_5v0_sum+0x1>
    67fa:	a0 91 0f 2b 	lds	r26, 0x2B0F	; 0x802b0f <g_adc_5v0_sum+0x2>
    67fe:	b0 91 10 2b 	lds	r27, 0x2B10	; 0x802b10 <g_adc_5v0_sum+0x3>
    6802:	48 0f       	add	r20, r24
    6804:	59 1f       	adc	r21, r25
    6806:	6a 1f       	adc	r22, r26
    6808:	7b 1f       	adc	r23, r27
    680a:	40 93 0d 2b 	sts	0x2B0D, r20	; 0x802b0d <g_adc_5v0_sum>
    680e:	50 93 0e 2b 	sts	0x2B0E, r21	; 0x802b0e <g_adc_5v0_sum+0x1>
    6812:	60 93 0f 2b 	sts	0x2B0F, r22	; 0x802b0f <g_adc_5v0_sum+0x2>
    6816:	70 93 10 2b 	sts	0x2B10, r23	; 0x802b10 <g_adc_5v0_sum+0x3>
    681a:	80 91 0b 2b 	lds	r24, 0x2B0B	; 0x802b0b <g_adc_5v0_cnt>
    681e:	90 91 0c 2b 	lds	r25, 0x2B0C	; 0x802b0c <g_adc_5v0_cnt+0x1>
    6822:	01 96       	adiw	r24, 0x01	; 1
    6824:	80 93 0b 2b 	sts	0x2B0B, r24	; 0x802b0b <g_adc_5v0_cnt>
    6828:	90 93 0c 2b 	sts	0x2B0C, r25	; 0x802b0c <g_adc_5v0_cnt+0x1>
    682c:	8f 3f       	cpi	r24, 0xFF	; 255
    682e:	91 05       	cpc	r25, r1
    6830:	09 f0       	breq	.+2      	; 0x6834 <isr_adc_a+0xde>
    6832:	08 f4       	brcc	.+2      	; 0x6836 <isr_adc_a+0xe0>
    6834:	05 c1       	rjmp	.+522    	; 0x6a40 <isr_adc_a+0x2ea>
    6836:	40 93 11 2b 	sts	0x2B11, r20	; 0x802b11 <g_adc_5v0_cur>
    683a:	50 93 12 2b 	sts	0x2B12, r21	; 0x802b12 <g_adc_5v0_cur+0x1>
    683e:	60 93 13 2b 	sts	0x2B13, r22	; 0x802b13 <g_adc_5v0_cur+0x2>
    6842:	70 93 14 2b 	sts	0x2B14, r23	; 0x802b14 <g_adc_5v0_cur+0x3>
    6846:	10 92 0b 2b 	sts	0x2B0B, r1	; 0x802b0b <g_adc_5v0_cnt>
    684a:	10 92 0c 2b 	sts	0x2B0C, r1	; 0x802b0c <g_adc_5v0_cnt+0x1>
    684e:	10 92 0d 2b 	sts	0x2B0D, r1	; 0x802b0d <g_adc_5v0_sum>
    6852:	10 92 0e 2b 	sts	0x2B0E, r1	; 0x802b0e <g_adc_5v0_sum+0x1>
    6856:	10 92 0f 2b 	sts	0x2B0F, r1	; 0x802b0f <g_adc_5v0_sum+0x2>
    685a:	10 92 10 2b 	sts	0x2B10, r1	; 0x802b10 <g_adc_5v0_sum+0x3>
    685e:	08 95       	ret
    6860:	05 2e       	mov	r0, r21
    6862:	00 0c       	add	r0, r0
    6864:	66 0b       	sbc	r22, r22
    6866:	77 0b       	sbc	r23, r23
    6868:	80 91 03 2b 	lds	r24, 0x2B03	; 0x802b03 <g_adc_vbat_sum>
    686c:	90 91 04 2b 	lds	r25, 0x2B04	; 0x802b04 <g_adc_vbat_sum+0x1>
    6870:	a0 91 05 2b 	lds	r26, 0x2B05	; 0x802b05 <g_adc_vbat_sum+0x2>
    6874:	b0 91 06 2b 	lds	r27, 0x2B06	; 0x802b06 <g_adc_vbat_sum+0x3>
    6878:	48 0f       	add	r20, r24
    687a:	59 1f       	adc	r21, r25
    687c:	6a 1f       	adc	r22, r26
    687e:	7b 1f       	adc	r23, r27
    6880:	40 93 03 2b 	sts	0x2B03, r20	; 0x802b03 <g_adc_vbat_sum>
    6884:	50 93 04 2b 	sts	0x2B04, r21	; 0x802b04 <g_adc_vbat_sum+0x1>
    6888:	60 93 05 2b 	sts	0x2B05, r22	; 0x802b05 <g_adc_vbat_sum+0x2>
    688c:	70 93 06 2b 	sts	0x2B06, r23	; 0x802b06 <g_adc_vbat_sum+0x3>
    6890:	80 91 01 2b 	lds	r24, 0x2B01	; 0x802b01 <g_adc_vbat_cnt>
    6894:	90 91 02 2b 	lds	r25, 0x2B02	; 0x802b02 <g_adc_vbat_cnt+0x1>
    6898:	01 96       	adiw	r24, 0x01	; 1
    689a:	80 93 01 2b 	sts	0x2B01, r24	; 0x802b01 <g_adc_vbat_cnt>
    689e:	90 93 02 2b 	sts	0x2B02, r25	; 0x802b02 <g_adc_vbat_cnt+0x1>
    68a2:	8f 3f       	cpi	r24, 0xFF	; 255
    68a4:	91 05       	cpc	r25, r1
    68a6:	09 f0       	breq	.+2      	; 0x68aa <isr_adc_a+0x154>
    68a8:	08 f4       	brcc	.+2      	; 0x68ac <isr_adc_a+0x156>
    68aa:	ca c0       	rjmp	.+404    	; 0x6a40 <isr_adc_a+0x2ea>
    68ac:	40 93 07 2b 	sts	0x2B07, r20	; 0x802b07 <g_adc_vbat_cur>
    68b0:	50 93 08 2b 	sts	0x2B08, r21	; 0x802b08 <g_adc_vbat_cur+0x1>
    68b4:	60 93 09 2b 	sts	0x2B09, r22	; 0x802b09 <g_adc_vbat_cur+0x2>
    68b8:	70 93 0a 2b 	sts	0x2B0A, r23	; 0x802b0a <g_adc_vbat_cur+0x3>
    68bc:	10 92 01 2b 	sts	0x2B01, r1	; 0x802b01 <g_adc_vbat_cnt>
    68c0:	10 92 02 2b 	sts	0x2B02, r1	; 0x802b02 <g_adc_vbat_cnt+0x1>
    68c4:	10 92 03 2b 	sts	0x2B03, r1	; 0x802b03 <g_adc_vbat_sum>
    68c8:	10 92 04 2b 	sts	0x2B04, r1	; 0x802b04 <g_adc_vbat_sum+0x1>
    68cc:	10 92 05 2b 	sts	0x2B05, r1	; 0x802b05 <g_adc_vbat_sum+0x2>
    68d0:	10 92 06 2b 	sts	0x2B06, r1	; 0x802b06 <g_adc_vbat_sum+0x3>
    68d4:	08 95       	ret
    68d6:	61 ff       	sbrs	r22, 1
    68d8:	3b c0       	rjmp	.+118    	; 0x6950 <isr_adc_a+0x1fa>
    68da:	05 2e       	mov	r0, r21
    68dc:	00 0c       	add	r0, r0
    68de:	66 0b       	sbc	r22, r22
    68e0:	77 0b       	sbc	r23, r23
    68e2:	80 91 f9 2a 	lds	r24, 0x2AF9	; 0x802af9 <g_adc_io_adc4_sum>
    68e6:	90 91 fa 2a 	lds	r25, 0x2AFA	; 0x802afa <g_adc_io_adc4_sum+0x1>
    68ea:	a0 91 fb 2a 	lds	r26, 0x2AFB	; 0x802afb <g_adc_io_adc4_sum+0x2>
    68ee:	b0 91 fc 2a 	lds	r27, 0x2AFC	; 0x802afc <g_adc_io_adc4_sum+0x3>
    68f2:	48 0f       	add	r20, r24
    68f4:	59 1f       	adc	r21, r25
    68f6:	6a 1f       	adc	r22, r26
    68f8:	7b 1f       	adc	r23, r27
    68fa:	40 93 f9 2a 	sts	0x2AF9, r20	; 0x802af9 <g_adc_io_adc4_sum>
    68fe:	50 93 fa 2a 	sts	0x2AFA, r21	; 0x802afa <g_adc_io_adc4_sum+0x1>
    6902:	60 93 fb 2a 	sts	0x2AFB, r22	; 0x802afb <g_adc_io_adc4_sum+0x2>
    6906:	70 93 fc 2a 	sts	0x2AFC, r23	; 0x802afc <g_adc_io_adc4_sum+0x3>
    690a:	80 91 f7 2a 	lds	r24, 0x2AF7	; 0x802af7 <g_adc_io_adc4_cnt>
    690e:	90 91 f8 2a 	lds	r25, 0x2AF8	; 0x802af8 <g_adc_io_adc4_cnt+0x1>
    6912:	01 96       	adiw	r24, 0x01	; 1
    6914:	80 93 f7 2a 	sts	0x2AF7, r24	; 0x802af7 <g_adc_io_adc4_cnt>
    6918:	90 93 f8 2a 	sts	0x2AF8, r25	; 0x802af8 <g_adc_io_adc4_cnt+0x1>
    691c:	8f 3f       	cpi	r24, 0xFF	; 255
    691e:	91 05       	cpc	r25, r1
    6920:	09 f0       	breq	.+2      	; 0x6924 <isr_adc_a+0x1ce>
    6922:	08 f4       	brcc	.+2      	; 0x6926 <isr_adc_a+0x1d0>
    6924:	8d c0       	rjmp	.+282    	; 0x6a40 <isr_adc_a+0x2ea>
    6926:	40 93 fd 2a 	sts	0x2AFD, r20	; 0x802afd <g_adc_io_adc4_cur>
    692a:	50 93 fe 2a 	sts	0x2AFE, r21	; 0x802afe <g_adc_io_adc4_cur+0x1>
    692e:	60 93 ff 2a 	sts	0x2AFF, r22	; 0x802aff <g_adc_io_adc4_cur+0x2>
    6932:	70 93 00 2b 	sts	0x2B00, r23	; 0x802b00 <g_adc_io_adc4_cur+0x3>
    6936:	10 92 f7 2a 	sts	0x2AF7, r1	; 0x802af7 <g_adc_io_adc4_cnt>
    693a:	10 92 f8 2a 	sts	0x2AF8, r1	; 0x802af8 <g_adc_io_adc4_cnt+0x1>
    693e:	10 92 f9 2a 	sts	0x2AF9, r1	; 0x802af9 <g_adc_io_adc4_sum>
    6942:	10 92 fa 2a 	sts	0x2AFA, r1	; 0x802afa <g_adc_io_adc4_sum+0x1>
    6946:	10 92 fb 2a 	sts	0x2AFB, r1	; 0x802afb <g_adc_io_adc4_sum+0x2>
    694a:	10 92 fc 2a 	sts	0x2AFC, r1	; 0x802afc <g_adc_io_adc4_sum+0x3>
    694e:	08 95       	ret
    6950:	62 ff       	sbrs	r22, 2
    6952:	3b c0       	rjmp	.+118    	; 0x69ca <isr_adc_a+0x274>
    6954:	05 2e       	mov	r0, r21
    6956:	00 0c       	add	r0, r0
    6958:	66 0b       	sbc	r22, r22
    695a:	77 0b       	sbc	r23, r23
    695c:	80 91 ef 2a 	lds	r24, 0x2AEF	; 0x802aef <g_adc_io_adc5_sum>
    6960:	90 91 f0 2a 	lds	r25, 0x2AF0	; 0x802af0 <g_adc_io_adc5_sum+0x1>
    6964:	a0 91 f1 2a 	lds	r26, 0x2AF1	; 0x802af1 <g_adc_io_adc5_sum+0x2>
    6968:	b0 91 f2 2a 	lds	r27, 0x2AF2	; 0x802af2 <g_adc_io_adc5_sum+0x3>
    696c:	48 0f       	add	r20, r24
    696e:	59 1f       	adc	r21, r25
    6970:	6a 1f       	adc	r22, r26
    6972:	7b 1f       	adc	r23, r27
    6974:	40 93 ef 2a 	sts	0x2AEF, r20	; 0x802aef <g_adc_io_adc5_sum>
    6978:	50 93 f0 2a 	sts	0x2AF0, r21	; 0x802af0 <g_adc_io_adc5_sum+0x1>
    697c:	60 93 f1 2a 	sts	0x2AF1, r22	; 0x802af1 <g_adc_io_adc5_sum+0x2>
    6980:	70 93 f2 2a 	sts	0x2AF2, r23	; 0x802af2 <g_adc_io_adc5_sum+0x3>
    6984:	80 91 ed 2a 	lds	r24, 0x2AED	; 0x802aed <g_adc_io_adc5_cnt>
    6988:	90 91 ee 2a 	lds	r25, 0x2AEE	; 0x802aee <g_adc_io_adc5_cnt+0x1>
    698c:	01 96       	adiw	r24, 0x01	; 1
    698e:	80 93 ed 2a 	sts	0x2AED, r24	; 0x802aed <g_adc_io_adc5_cnt>
    6992:	90 93 ee 2a 	sts	0x2AEE, r25	; 0x802aee <g_adc_io_adc5_cnt+0x1>
    6996:	8f 3f       	cpi	r24, 0xFF	; 255
    6998:	91 05       	cpc	r25, r1
    699a:	09 f0       	breq	.+2      	; 0x699e <isr_adc_a+0x248>
    699c:	08 f4       	brcc	.+2      	; 0x69a0 <isr_adc_a+0x24a>
    699e:	50 c0       	rjmp	.+160    	; 0x6a40 <isr_adc_a+0x2ea>
    69a0:	40 93 f3 2a 	sts	0x2AF3, r20	; 0x802af3 <g_adc_io_adc5_cur>
    69a4:	50 93 f4 2a 	sts	0x2AF4, r21	; 0x802af4 <g_adc_io_adc5_cur+0x1>
    69a8:	60 93 f5 2a 	sts	0x2AF5, r22	; 0x802af5 <g_adc_io_adc5_cur+0x2>
    69ac:	70 93 f6 2a 	sts	0x2AF6, r23	; 0x802af6 <g_adc_io_adc5_cur+0x3>
    69b0:	10 92 ed 2a 	sts	0x2AED, r1	; 0x802aed <g_adc_io_adc5_cnt>
    69b4:	10 92 ee 2a 	sts	0x2AEE, r1	; 0x802aee <g_adc_io_adc5_cnt+0x1>
    69b8:	10 92 ef 2a 	sts	0x2AEF, r1	; 0x802aef <g_adc_io_adc5_sum>
    69bc:	10 92 f0 2a 	sts	0x2AF0, r1	; 0x802af0 <g_adc_io_adc5_sum+0x1>
    69c0:	10 92 f1 2a 	sts	0x2AF1, r1	; 0x802af1 <g_adc_io_adc5_sum+0x2>
    69c4:	10 92 f2 2a 	sts	0x2AF2, r1	; 0x802af2 <g_adc_io_adc5_sum+0x3>
    69c8:	08 95       	ret
    69ca:	63 ff       	sbrs	r22, 3
    69cc:	39 c0       	rjmp	.+114    	; 0x6a40 <isr_adc_a+0x2ea>
    69ce:	05 2e       	mov	r0, r21
    69d0:	00 0c       	add	r0, r0
    69d2:	66 0b       	sbc	r22, r22
    69d4:	77 0b       	sbc	r23, r23
    69d6:	80 91 e5 2a 	lds	r24, 0x2AE5	; 0x802ae5 <g_adc_silence_sum>
    69da:	90 91 e6 2a 	lds	r25, 0x2AE6	; 0x802ae6 <g_adc_silence_sum+0x1>
    69de:	a0 91 e7 2a 	lds	r26, 0x2AE7	; 0x802ae7 <g_adc_silence_sum+0x2>
    69e2:	b0 91 e8 2a 	lds	r27, 0x2AE8	; 0x802ae8 <g_adc_silence_sum+0x3>
    69e6:	48 0f       	add	r20, r24
    69e8:	59 1f       	adc	r21, r25
    69ea:	6a 1f       	adc	r22, r26
    69ec:	7b 1f       	adc	r23, r27
    69ee:	40 93 e5 2a 	sts	0x2AE5, r20	; 0x802ae5 <g_adc_silence_sum>
    69f2:	50 93 e6 2a 	sts	0x2AE6, r21	; 0x802ae6 <g_adc_silence_sum+0x1>
    69f6:	60 93 e7 2a 	sts	0x2AE7, r22	; 0x802ae7 <g_adc_silence_sum+0x2>
    69fa:	70 93 e8 2a 	sts	0x2AE8, r23	; 0x802ae8 <g_adc_silence_sum+0x3>
    69fe:	80 91 e3 2a 	lds	r24, 0x2AE3	; 0x802ae3 <g_adc_silence_cnt>
    6a02:	90 91 e4 2a 	lds	r25, 0x2AE4	; 0x802ae4 <g_adc_silence_cnt+0x1>
    6a06:	01 96       	adiw	r24, 0x01	; 1
    6a08:	80 93 e3 2a 	sts	0x2AE3, r24	; 0x802ae3 <g_adc_silence_cnt>
    6a0c:	90 93 e4 2a 	sts	0x2AE4, r25	; 0x802ae4 <g_adc_silence_cnt+0x1>
    6a10:	8f 3f       	cpi	r24, 0xFF	; 255
    6a12:	91 05       	cpc	r25, r1
    6a14:	a9 f0       	breq	.+42     	; 0x6a40 <isr_adc_a+0x2ea>
    6a16:	a0 f0       	brcs	.+40     	; 0x6a40 <isr_adc_a+0x2ea>
    6a18:	40 93 e9 2a 	sts	0x2AE9, r20	; 0x802ae9 <g_adc_silence_cur>
    6a1c:	50 93 ea 2a 	sts	0x2AEA, r21	; 0x802aea <g_adc_silence_cur+0x1>
    6a20:	60 93 eb 2a 	sts	0x2AEB, r22	; 0x802aeb <g_adc_silence_cur+0x2>
    6a24:	70 93 ec 2a 	sts	0x2AEC, r23	; 0x802aec <g_adc_silence_cur+0x3>
    6a28:	10 92 e3 2a 	sts	0x2AE3, r1	; 0x802ae3 <g_adc_silence_cnt>
    6a2c:	10 92 e4 2a 	sts	0x2AE4, r1	; 0x802ae4 <g_adc_silence_cnt+0x1>
    6a30:	10 92 e5 2a 	sts	0x2AE5, r1	; 0x802ae5 <g_adc_silence_sum>
    6a34:	10 92 e6 2a 	sts	0x2AE6, r1	; 0x802ae6 <g_adc_silence_sum+0x1>
    6a38:	10 92 e7 2a 	sts	0x2AE7, r1	; 0x802ae7 <g_adc_silence_sum+0x2>
    6a3c:	10 92 e8 2a 	sts	0x2AE8, r1	; 0x802ae8 <g_adc_silence_sum+0x3>
    6a40:	08 95       	ret

00006a42 <isr_adc_b>:
    6a42:	60 ff       	sbrs	r22, 0
    6a44:	3b c0       	rjmp	.+118    	; 0x6abc <isr_adc_b+0x7a>
    6a46:	4e 5b       	subi	r20, 0xBE	; 190
    6a48:	51 09       	sbc	r21, r1
    6a4a:	05 2e       	mov	r0, r21
    6a4c:	00 0c       	add	r0, r0
    6a4e:	66 0b       	sbc	r22, r22
    6a50:	77 0b       	sbc	r23, r23
    6a52:	80 91 db 2a 	lds	r24, 0x2ADB	; 0x802adb <g_adc_temp_sum>
    6a56:	90 91 dc 2a 	lds	r25, 0x2ADC	; 0x802adc <g_adc_temp_sum+0x1>
    6a5a:	a0 91 dd 2a 	lds	r26, 0x2ADD	; 0x802add <g_adc_temp_sum+0x2>
    6a5e:	b0 91 de 2a 	lds	r27, 0x2ADE	; 0x802ade <g_adc_temp_sum+0x3>
    6a62:	48 0f       	add	r20, r24
    6a64:	59 1f       	adc	r21, r25
    6a66:	6a 1f       	adc	r22, r26
    6a68:	7b 1f       	adc	r23, r27
    6a6a:	40 93 db 2a 	sts	0x2ADB, r20	; 0x802adb <g_adc_temp_sum>
    6a6e:	50 93 dc 2a 	sts	0x2ADC, r21	; 0x802adc <g_adc_temp_sum+0x1>
    6a72:	60 93 dd 2a 	sts	0x2ADD, r22	; 0x802add <g_adc_temp_sum+0x2>
    6a76:	70 93 de 2a 	sts	0x2ADE, r23	; 0x802ade <g_adc_temp_sum+0x3>
    6a7a:	80 91 d9 2a 	lds	r24, 0x2AD9	; 0x802ad9 <g_adc_temp_cnt>
    6a7e:	90 91 da 2a 	lds	r25, 0x2ADA	; 0x802ada <g_adc_temp_cnt+0x1>
    6a82:	01 96       	adiw	r24, 0x01	; 1
    6a84:	80 93 d9 2a 	sts	0x2AD9, r24	; 0x802ad9 <g_adc_temp_cnt>
    6a88:	90 93 da 2a 	sts	0x2ADA, r25	; 0x802ada <g_adc_temp_cnt+0x1>
    6a8c:	8f 3f       	cpi	r24, 0xFF	; 255
    6a8e:	91 05       	cpc	r25, r1
    6a90:	a9 f0       	breq	.+42     	; 0x6abc <isr_adc_b+0x7a>
    6a92:	a0 f0       	brcs	.+40     	; 0x6abc <isr_adc_b+0x7a>
    6a94:	40 93 df 2a 	sts	0x2ADF, r20	; 0x802adf <g_adc_temp_cur>
    6a98:	50 93 e0 2a 	sts	0x2AE0, r21	; 0x802ae0 <g_adc_temp_cur+0x1>
    6a9c:	60 93 e1 2a 	sts	0x2AE1, r22	; 0x802ae1 <g_adc_temp_cur+0x2>
    6aa0:	70 93 e2 2a 	sts	0x2AE2, r23	; 0x802ae2 <g_adc_temp_cur+0x3>
    6aa4:	10 92 d9 2a 	sts	0x2AD9, r1	; 0x802ad9 <g_adc_temp_cnt>
    6aa8:	10 92 da 2a 	sts	0x2ADA, r1	; 0x802ada <g_adc_temp_cnt+0x1>
    6aac:	10 92 db 2a 	sts	0x2ADB, r1	; 0x802adb <g_adc_temp_sum>
    6ab0:	10 92 dc 2a 	sts	0x2ADC, r1	; 0x802adc <g_adc_temp_sum+0x1>
    6ab4:	10 92 dd 2a 	sts	0x2ADD, r1	; 0x802add <g_adc_temp_sum+0x2>
    6ab8:	10 92 de 2a 	sts	0x2ADE, r1	; 0x802ade <g_adc_temp_sum+0x3>
    6abc:	08 95       	ret

00006abe <task_dac>:
    6abe:	cf 93       	push	r28
    6ac0:	df 93       	push	r29
    6ac2:	1f 92       	push	r1
    6ac4:	1f 92       	push	r1
    6ac6:	cd b7       	in	r28, 0x3d	; 61
    6ac8:	de b7       	in	r29, 0x3e	; 62
    6aca:	8f b7       	in	r24, 0x3f	; 63
    6acc:	8a 83       	std	Y+2, r24	; 0x02
    6ace:	f8 94       	cli
    6ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ad2:	8f bf       	out	0x3f, r24	; 63
    6ad4:	80 91 89 28 	lds	r24, 0x2889	; 0x802889 <s_dds0_freq_mHz.7489>
    6ad8:	90 91 8a 28 	lds	r25, 0x288A	; 0x80288a <s_dds0_freq_mHz.7489+0x1>
    6adc:	a0 91 8b 28 	lds	r26, 0x288B	; 0x80288b <s_dds0_freq_mHz.7489+0x2>
    6ae0:	b0 91 8c 28 	lds	r27, 0x288C	; 0x80288c <s_dds0_freq_mHz.7489+0x3>
    6ae4:	80 38       	cpi	r24, 0x80	; 128
    6ae6:	94 48       	sbci	r25, 0x84	; 132
    6ae8:	ae 41       	sbci	r26, 0x1E	; 30
    6aea:	b1 05       	cpc	r27, r1
    6aec:	69 f4       	brne	.+26     	; 0x6b08 <task_dac+0x4a>
    6aee:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <s_dds1_freq_mHz.7490>
    6af2:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <s_dds1_freq_mHz.7490+0x1>
    6af6:	a0 91 87 28 	lds	r26, 0x2887	; 0x802887 <s_dds1_freq_mHz.7490+0x2>
    6afa:	b0 91 88 28 	lds	r27, 0x2888	; 0x802888 <s_dds1_freq_mHz.7490+0x3>
    6afe:	8a 30       	cpi	r24, 0x0A	; 10
    6b00:	99 40       	sbci	r25, 0x09	; 9
    6b02:	ad 43       	sbci	r26, 0x3D	; 61
    6b04:	b1 05       	cpc	r27, r1
    6b06:	a9 f1       	breq	.+106    	; 0x6b72 <task_dac+0xb4>
    6b08:	80 e8       	ldi	r24, 0x80	; 128
    6b0a:	94 e8       	ldi	r25, 0x84	; 132
    6b0c:	ae e1       	ldi	r26, 0x1E	; 30
    6b0e:	b0 e0       	ldi	r27, 0x00	; 0
    6b10:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <s_dds0_freq_mHz.7489>
    6b14:	90 93 8a 28 	sts	0x288A, r25	; 0x80288a <s_dds0_freq_mHz.7489+0x1>
    6b18:	a0 93 8b 28 	sts	0x288B, r26	; 0x80288b <s_dds0_freq_mHz.7489+0x2>
    6b1c:	b0 93 8c 28 	sts	0x288C, r27	; 0x80288c <s_dds0_freq_mHz.7489+0x3>
    6b20:	8a e0       	ldi	r24, 0x0A	; 10
    6b22:	99 e0       	ldi	r25, 0x09	; 9
    6b24:	ad e3       	ldi	r26, 0x3D	; 61
    6b26:	b0 e0       	ldi	r27, 0x00	; 0
    6b28:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <s_dds1_freq_mHz.7490>
    6b2c:	90 93 86 28 	sts	0x2886, r25	; 0x802886 <s_dds1_freq_mHz.7490+0x1>
    6b30:	a0 93 87 28 	sts	0x2887, r26	; 0x802887 <s_dds1_freq_mHz.7490+0x2>
    6b34:	b0 93 88 28 	sts	0x2888, r27	; 0x802888 <s_dds1_freq_mHz.7490+0x3>
    6b38:	8f b7       	in	r24, 0x3f	; 63
    6b3a:	89 83       	std	Y+1, r24	; 0x01
    6b3c:	f8 94       	cli
    6b3e:	89 81       	ldd	r24, Y+1	; 0x01
    6b40:	41 e5       	ldi	r20, 0x51	; 81
    6b42:	58 eb       	ldi	r21, 0xB8	; 184
    6b44:	6e e1       	ldi	r22, 0x1E	; 30
    6b46:	75 e0       	ldi	r23, 0x05	; 5
    6b48:	40 93 9d 2a 	sts	0x2A9D, r20	; 0x802a9d <dds0_inc>
    6b4c:	50 93 9e 2a 	sts	0x2A9E, r21	; 0x802a9e <dds0_inc+0x1>
    6b50:	60 93 9f 2a 	sts	0x2A9F, r22	; 0x802a9f <dds0_inc+0x2>
    6b54:	70 93 a0 2a 	sts	0x2AA0, r23	; 0x802aa0 <dds0_inc+0x3>
    6b58:	41 e5       	ldi	r20, 0x51	; 81
    6b5a:	52 e7       	ldi	r21, 0x72	; 114
    6b5c:	6d e3       	ldi	r22, 0x3D	; 61
    6b5e:	7a e0       	ldi	r23, 0x0A	; 10
    6b60:	40 93 95 2a 	sts	0x2A95, r20	; 0x802a95 <dds1_inc>
    6b64:	50 93 96 2a 	sts	0x2A96, r21	; 0x802a96 <dds1_inc+0x1>
    6b68:	60 93 97 2a 	sts	0x2A97, r22	; 0x802a97 <dds1_inc+0x2>
    6b6c:	70 93 98 2a 	sts	0x2A98, r23	; 0x802a98 <dds1_inc+0x3>
    6b70:	8f bf       	out	0x3f, r24	; 63
    6b72:	0f 90       	pop	r0
    6b74:	0f 90       	pop	r0
    6b76:	df 91       	pop	r29
    6b78:	cf 91       	pop	r28
    6b7a:	08 95       	ret

00006b7c <isr_tcc0_ovfl>:
    6b7c:	cf 92       	push	r12
    6b7e:	df 92       	push	r13
    6b80:	ef 92       	push	r14
    6b82:	ff 92       	push	r15
    6b84:	0f 93       	push	r16
    6b86:	1f 93       	push	r17
    6b88:	0e 94 ae 12 	call	0x255c	; 0x255c <rtc_get_time>
    6b8c:	21 e0       	ldi	r18, 0x01	; 1
    6b8e:	20 93 0c 08 	sts	0x080C, r18	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    6b92:	20 91 77 2b 	lds	r18, 0x2B77	; 0x802b77 <g_workmode>
    6b96:	22 30       	cpi	r18, 0x02	; 2
    6b98:	09 f0       	breq	.+2      	; 0x6b9c <isr_tcc0_ovfl+0x20>
    6b9a:	4a c0       	rjmp	.+148    	; 0x6c30 <isr_tcc0_ovfl+0xb4>
    6b9c:	00 91 91 28 	lds	r16, 0x2891	; 0x802891 <last_10ms.7374>
    6ba0:	10 91 92 28 	lds	r17, 0x2892	; 0x802892 <last_10ms.7374+0x1>
    6ba4:	20 91 93 28 	lds	r18, 0x2893	; 0x802893 <last_10ms.7374+0x2>
    6ba8:	30 91 94 28 	lds	r19, 0x2894	; 0x802894 <last_10ms.7374+0x3>
    6bac:	6b 01       	movw	r12, r22
    6bae:	7c 01       	movw	r14, r24
    6bb0:	c0 1a       	sub	r12, r16
    6bb2:	d1 0a       	sbc	r13, r17
    6bb4:	e2 0a       	sbc	r14, r18
    6bb6:	f3 0a       	sbc	r15, r19
    6bb8:	4a e0       	ldi	r20, 0x0A	; 10
    6bba:	c4 16       	cp	r12, r20
    6bbc:	d1 04       	cpc	r13, r1
    6bbe:	e1 04       	cpc	r14, r1
    6bc0:	f1 04       	cpc	r15, r1
    6bc2:	28 f4       	brcc	.+10     	; 0x6bce <isr_tcc0_ovfl+0x52>
    6bc4:	60 17       	cp	r22, r16
    6bc6:	71 07       	cpc	r23, r17
    6bc8:	82 07       	cpc	r24, r18
    6bca:	93 07       	cpc	r25, r19
    6bcc:	58 f4       	brcc	.+22     	; 0x6be4 <isr_tcc0_ovfl+0x68>
    6bce:	60 93 91 28 	sts	0x2891, r22	; 0x802891 <last_10ms.7374>
    6bd2:	70 93 92 28 	sts	0x2892, r23	; 0x802892 <last_10ms.7374+0x1>
    6bd6:	80 93 93 28 	sts	0x2893, r24	; 0x802893 <last_10ms.7374+0x2>
    6bda:	90 93 94 28 	sts	0x2894, r25	; 0x802894 <last_10ms.7374+0x3>
    6bde:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <isr_10ms_twi1_onboard>
    6be2:	26 c0       	rjmp	.+76     	; 0x6c30 <isr_tcc0_ovfl+0xb4>
    6be4:	00 91 8d 28 	lds	r16, 0x288D	; 0x80288d <last_500ms.7375>
    6be8:	10 91 8e 28 	lds	r17, 0x288E	; 0x80288e <last_500ms.7375+0x1>
    6bec:	20 91 8f 28 	lds	r18, 0x288F	; 0x80288f <last_500ms.7375+0x2>
    6bf0:	30 91 90 28 	lds	r19, 0x2890	; 0x802890 <last_500ms.7375+0x3>
    6bf4:	6b 01       	movw	r12, r22
    6bf6:	7c 01       	movw	r14, r24
    6bf8:	c0 1a       	sub	r12, r16
    6bfa:	d1 0a       	sbc	r13, r17
    6bfc:	e2 0a       	sbc	r14, r18
    6bfe:	f3 0a       	sbc	r15, r19
    6c00:	c1 14       	cp	r12, r1
    6c02:	42 e0       	ldi	r20, 0x02	; 2
    6c04:	d4 06       	cpc	r13, r20
    6c06:	e1 04       	cpc	r14, r1
    6c08:	f1 04       	cpc	r15, r1
    6c0a:	28 f4       	brcc	.+10     	; 0x6c16 <isr_tcc0_ovfl+0x9a>
    6c0c:	60 17       	cp	r22, r16
    6c0e:	71 07       	cpc	r23, r17
    6c10:	82 07       	cpc	r24, r18
    6c12:	93 07       	cpc	r25, r19
    6c14:	58 f4       	brcc	.+22     	; 0x6c2c <isr_tcc0_ovfl+0xb0>
    6c16:	60 93 8d 28 	sts	0x288D, r22	; 0x80288d <last_500ms.7375>
    6c1a:	70 93 8e 28 	sts	0x288E, r23	; 0x80288e <last_500ms.7375+0x1>
    6c1e:	80 93 8f 28 	sts	0x288F, r24	; 0x80288f <last_500ms.7375+0x2>
    6c22:	90 93 90 28 	sts	0x2890, r25	; 0x802890 <last_500ms.7375+0x3>
    6c26:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <isr_500ms_twi1_onboard>
    6c2a:	02 c0       	rjmp	.+4      	; 0x6c30 <isr_tcc0_ovfl+0xb4>
    6c2c:	0e 94 9f 18 	call	0x313e	; 0x313e <isr_sparetime_twi1_onboard>
    6c30:	1f 91       	pop	r17
    6c32:	0f 91       	pop	r16
    6c34:	ff 90       	pop	r15
    6c36:	ef 90       	pop	r14
    6c38:	df 90       	pop	r13
    6c3a:	cf 90       	pop	r12
    6c3c:	08 95       	ret

00006c3e <calc_next_frame>:
    6c3e:	8f 92       	push	r8
    6c40:	9f 92       	push	r9
    6c42:	af 92       	push	r10
    6c44:	bf 92       	push	r11
    6c46:	cf 92       	push	r12
    6c48:	df 92       	push	r13
    6c4a:	ef 92       	push	r14
    6c4c:	ff 92       	push	r15
    6c4e:	0f 93       	push	r16
    6c50:	1f 93       	push	r17
    6c52:	cf 93       	push	r28
    6c54:	df 93       	push	r29
    6c56:	6b 01       	movw	r12, r22
    6c58:	5a 01       	movw	r10, r20
    6c5a:	79 01       	movw	r14, r18
    6c5c:	48 01       	movw	r8, r16
    6c5e:	ec 01       	movw	r28, r24
    6c60:	8c 01       	movw	r16, r24
    6c62:	13 95       	inc	r17
    6c64:	f6 01       	movw	r30, r12
    6c66:	82 81       	ldd	r24, Z+2	; 0x02
    6c68:	93 81       	ldd	r25, Z+3	; 0x03
    6c6a:	0e 94 3b 13 	call	0x2676	; 0x2676 <get_interpolated_sine>
    6c6e:	88 83       	st	Y, r24
    6c70:	99 83       	std	Y+1, r25	; 0x01
    6c72:	f7 01       	movw	r30, r14
    6c74:	82 81       	ldd	r24, Z+2	; 0x02
    6c76:	93 81       	ldd	r25, Z+3	; 0x03
    6c78:	0e 94 3b 13 	call	0x2676	; 0x2676 <get_interpolated_sine>
    6c7c:	8a 83       	std	Y+2, r24	; 0x02
    6c7e:	9b 83       	std	Y+3, r25	; 0x03
    6c80:	f6 01       	movw	r30, r12
    6c82:	40 81       	ld	r20, Z
    6c84:	51 81       	ldd	r21, Z+1	; 0x01
    6c86:	62 81       	ldd	r22, Z+2	; 0x02
    6c88:	73 81       	ldd	r23, Z+3	; 0x03
    6c8a:	f5 01       	movw	r30, r10
    6c8c:	80 81       	ld	r24, Z
    6c8e:	91 81       	ldd	r25, Z+1	; 0x01
    6c90:	a2 81       	ldd	r26, Z+2	; 0x02
    6c92:	b3 81       	ldd	r27, Z+3	; 0x03
    6c94:	84 0f       	add	r24, r20
    6c96:	95 1f       	adc	r25, r21
    6c98:	a6 1f       	adc	r26, r22
    6c9a:	b7 1f       	adc	r27, r23
    6c9c:	f6 01       	movw	r30, r12
    6c9e:	80 83       	st	Z, r24
    6ca0:	91 83       	std	Z+1, r25	; 0x01
    6ca2:	a2 83       	std	Z+2, r26	; 0x02
    6ca4:	b3 83       	std	Z+3, r27	; 0x03
    6ca6:	f7 01       	movw	r30, r14
    6ca8:	40 81       	ld	r20, Z
    6caa:	51 81       	ldd	r21, Z+1	; 0x01
    6cac:	62 81       	ldd	r22, Z+2	; 0x02
    6cae:	73 81       	ldd	r23, Z+3	; 0x03
    6cb0:	f4 01       	movw	r30, r8
    6cb2:	80 81       	ld	r24, Z
    6cb4:	91 81       	ldd	r25, Z+1	; 0x01
    6cb6:	a2 81       	ldd	r26, Z+2	; 0x02
    6cb8:	b3 81       	ldd	r27, Z+3	; 0x03
    6cba:	84 0f       	add	r24, r20
    6cbc:	95 1f       	adc	r25, r21
    6cbe:	a6 1f       	adc	r26, r22
    6cc0:	b7 1f       	adc	r27, r23
    6cc2:	f7 01       	movw	r30, r14
    6cc4:	80 83       	st	Z, r24
    6cc6:	91 83       	std	Z+1, r25	; 0x01
    6cc8:	a2 83       	std	Z+2, r26	; 0x02
    6cca:	b3 83       	std	Z+3, r27	; 0x03
    6ccc:	24 96       	adiw	r28, 0x04	; 4
    6cce:	c0 17       	cp	r28, r16
    6cd0:	d1 07       	cpc	r29, r17
    6cd2:	41 f6       	brne	.-112    	; 0x6c64 <calc_next_frame+0x26>
    6cd4:	df 91       	pop	r29
    6cd6:	cf 91       	pop	r28
    6cd8:	1f 91       	pop	r17
    6cda:	0f 91       	pop	r16
    6cdc:	ff 90       	pop	r15
    6cde:	ef 90       	pop	r14
    6ce0:	df 90       	pop	r13
    6ce2:	cf 90       	pop	r12
    6ce4:	bf 90       	pop	r11
    6ce6:	af 90       	pop	r10
    6ce8:	9f 90       	pop	r9
    6cea:	8f 90       	pop	r8
    6cec:	08 95       	ret

00006cee <isr_dma_dac_ch0_B>:
    6cee:	0f 93       	push	r16
    6cf0:	1f 93       	push	r17
    6cf2:	cf 93       	push	r28
    6cf4:	df 93       	push	r29
    6cf6:	1f 92       	push	r1
    6cf8:	cd b7       	in	r28, 0x3d	; 61
    6cfa:	de b7       	in	r29, 0x3e	; 62
    6cfc:	8f b7       	in	r24, 0x3f	; 63
    6cfe:	89 83       	std	Y+1, r24	; 0x01
    6d00:	f8 94       	cli
    6d02:	99 81       	ldd	r25, Y+1	; 0x01
    6d04:	e0 e1       	ldi	r30, 0x10	; 16
    6d06:	f1 e0       	ldi	r31, 0x01	; 1
    6d08:	80 81       	ld	r24, Z
    6d0a:	80 68       	ori	r24, 0x80	; 128
    6d0c:	80 83       	st	Z, r24
    6d0e:	9f bf       	out	0x3f, r25	; 63
    6d10:	78 94       	sei
    6d12:	05 e9       	ldi	r16, 0x95	; 149
    6d14:	1a e2       	ldi	r17, 0x2A	; 42
    6d16:	27 e0       	ldi	r18, 0x07	; 7
    6d18:	30 e2       	ldi	r19, 0x20	; 32
    6d1a:	4d e9       	ldi	r20, 0x9D	; 157
    6d1c:	5a e2       	ldi	r21, 0x2A	; 42
    6d1e:	69 e9       	ldi	r22, 0x99	; 153
    6d20:	7a e2       	ldi	r23, 0x2A	; 42
    6d22:	85 e9       	ldi	r24, 0x95	; 149
    6d24:	99 e2       	ldi	r25, 0x29	; 41
    6d26:	8b df       	rcall	.-234    	; 0x6c3e <calc_next_frame>
    6d28:	0f 90       	pop	r0
    6d2a:	df 91       	pop	r29
    6d2c:	cf 91       	pop	r28
    6d2e:	1f 91       	pop	r17
    6d30:	0f 91       	pop	r16
    6d32:	08 95       	ret

00006d34 <isr_dma_dac_ch0_A>:
    6d34:	0f 93       	push	r16
    6d36:	1f 93       	push	r17
    6d38:	cf 93       	push	r28
    6d3a:	df 93       	push	r29
    6d3c:	1f 92       	push	r1
    6d3e:	cd b7       	in	r28, 0x3d	; 61
    6d40:	de b7       	in	r29, 0x3e	; 62
    6d42:	8f b7       	in	r24, 0x3f	; 63
    6d44:	89 83       	std	Y+1, r24	; 0x01
    6d46:	f8 94       	cli
    6d48:	99 81       	ldd	r25, Y+1	; 0x01
    6d4a:	e0 e2       	ldi	r30, 0x20	; 32
    6d4c:	f1 e0       	ldi	r31, 0x01	; 1
    6d4e:	80 81       	ld	r24, Z
    6d50:	80 68       	ori	r24, 0x80	; 128
    6d52:	80 83       	st	Z, r24
    6d54:	9f bf       	out	0x3f, r25	; 63
    6d56:	78 94       	sei
    6d58:	05 e9       	ldi	r16, 0x95	; 149
    6d5a:	1a e2       	ldi	r17, 0x2A	; 42
    6d5c:	27 e0       	ldi	r18, 0x07	; 7
    6d5e:	30 e2       	ldi	r19, 0x20	; 32
    6d60:	4d e9       	ldi	r20, 0x9D	; 157
    6d62:	5a e2       	ldi	r21, 0x2A	; 42
    6d64:	69 e9       	ldi	r22, 0x99	; 153
    6d66:	7a e2       	ldi	r23, 0x2A	; 42
    6d68:	85 e9       	ldi	r24, 0x95	; 149
    6d6a:	98 e2       	ldi	r25, 0x28	; 40
    6d6c:	68 df       	rcall	.-304    	; 0x6c3e <calc_next_frame>
    6d6e:	0f 90       	pop	r0
    6d70:	df 91       	pop	r29
    6d72:	cf 91       	pop	r28
    6d74:	1f 91       	pop	r17
    6d76:	0f 91       	pop	r16
    6d78:	08 95       	ret

00006d7a <usb_callback_suspend_action>:
    6d7a:	08 95       	ret

00006d7c <usb_callback_resume_action>:
    6d7c:	08 95       	ret

00006d7e <usb_callback_remotewakeup_enable>:
    6d7e:	08 95       	ret

00006d80 <usb_callback_remotewakeup_disable>:
    6d80:	08 95       	ret

00006d82 <usb_callback_cdc_enable>:

bool usb_callback_cdc_enable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = true;
    6d82:	81 e0       	ldi	r24, 0x01	; 1
    6d84:	80 93 76 2b 	sts	0x2B76, r24	; 0x802b76 <usb_cdc_transfers_autorized>
	return true;
}
    6d88:	08 95       	ret

00006d8a <usb_callback_cdc_disable>:

void usb_callback_cdc_disable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = false;
    6d8a:	10 92 76 2b 	sts	0x2B76, r1	; 0x802b76 <usb_cdc_transfers_autorized>
    6d8e:	08 95       	ret

00006d90 <usb_callback_config>:
}

void usb_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    6d90:	08 95       	ret

00006d92 <usb_callback_cdc_set_dtr>:

}

void usb_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
    6d92:	08 95       	ret

00006d94 <usb_callback_cdc_set_rts>:

}

void usb_callback_cdc_set_rts(uint8_t port, bool b_enable)
{
    6d94:	08 95       	ret

00006d96 <usb_callback_rx_notify>:

}

void usb_callback_rx_notify(uint8_t port)
{
    6d96:	08 95       	ret

00006d98 <usb_callback_tx_empty_notify>:

}

void usb_callback_tx_empty_notify(uint8_t port)
{
    6d98:	08 95       	ret

00006d9a <main>:
	}
}


int main(void)
{
    6d9a:	2f 92       	push	r2
    6d9c:	3f 92       	push	r3
    6d9e:	4f 92       	push	r4
    6da0:	5f 92       	push	r5
    6da2:	6f 92       	push	r6
    6da4:	7f 92       	push	r7
    6da6:	8f 92       	push	r8
    6da8:	9f 92       	push	r9
    6daa:	af 92       	push	r10
    6dac:	bf 92       	push	r11
    6dae:	cf 92       	push	r12
    6db0:	df 92       	push	r13
    6db2:	ef 92       	push	r14
    6db4:	ff 92       	push	r15
    6db6:	0f 93       	push	r16
    6db8:	1f 93       	push	r17
    6dba:	cf 93       	push	r28
    6dbc:	df 93       	push	r29
    6dbe:	cd b7       	in	r28, 0x3d	; 61
    6dc0:	de b7       	in	r29, 0x3e	; 62
    6dc2:	a9 97       	sbiw	r28, 0x29	; 41
    6dc4:	cd bf       	out	0x3d, r28	; 61
    6dc6:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	/* Init of interrupt system */
	g_workmode = WORKMODE_INIT;
    6dc8:	22 24       	eor	r2, r2
    6dca:	23 94       	inc	r2
    6dcc:	20 92 77 2b 	sts	0x2B77, r2	; 0x802b77 <g_workmode>
	irq_initialize_vectors();
    6dd0:	e0 ea       	ldi	r30, 0xA0	; 160
    6dd2:	f0 e0       	ldi	r31, 0x00	; 0
    6dd4:	0f 2e       	mov	r0, r31
    6dd6:	f7 e0       	ldi	r31, 0x07	; 7
    6dd8:	df 2e       	mov	r13, r31
    6dda:	f0 2d       	mov	r31, r0
    6ddc:	d2 82       	std	Z+2, r13	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    6dde:	d2 82       	std	Z+2, r13	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    6de0:	82 81       	ldd	r24, Z+2	; 0x02
    6de2:	8f 77       	andi	r24, 0x7F	; 127
    6de4:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);

	sysclk_init();		// Clock configuration set-up
    6de6:	11 82       	std	Z+1, r1	; 0x01
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    6de8:	41 d5       	rcall	.+2690   	; 0x786c <sysclk_init>
    6dea:	ef ec       	ldi	r30, 0xCF	; 207
    6dec:	fc e2       	ldi	r31, 0x2C	; 44
    6dee:	10 82       	st	Z, r1
    6df0:	11 82       	std	Z+1, r1	; 0x01
    6df2:	12 82       	std	Z+2, r1	; 0x02
    6df4:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    6df6:	14 82       	std	Z+4, r1	; 0x04

	sleepmgr_init();	// Unlocks all sleep mode levels

	rtc_init();
    6df8:	25 82       	std	Z+5, r2	; 0x05
    6dfa:	0e 94 c4 12 	call	0x2588	; 0x2588 <rtc_init>
}


static void rtc_start(void)
{
	rtc_set_callback(isr_rtc_alarm);
    6dfe:	82 ea       	ldi	r24, 0xA2	; 162
    6e00:	93 e3       	ldi	r25, 0x33	; 51
    6e02:	0e 94 bf 12 	call	0x257e	; 0x257e <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    6e06:	62 e0       	ldi	r22, 0x02	; 2
    6e08:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event channels 0, 1, 2, 3 */
	EVSYS.CH0MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH0
    6e0a:	b1 d5       	rcall	.+2914   	; 0x796e <sysclk_enable_module>
    6e0c:	e0 e8       	ldi	r30, 0x80	; 128
    6e0e:	f1 e0       	ldi	r31, 0x01	; 1
    6e10:	86 ec       	ldi	r24, 0xC6	; 198
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH0 no digital filtering
    6e12:	80 83       	st	Z, r24
	EVSYS.CH1MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH1
    6e14:	10 86       	std	Z+8, r1	; 0x08
	EVSYS.CH1CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH1 no digital filtering
    6e16:	81 83       	std	Z+1, r24	; 0x01
	EVSYS.CH2MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH2
    6e18:	11 86       	std	Z+9, r1	; 0x09
	EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH2 no digital filtering
    6e1a:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH3MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH3
    6e1c:	12 86       	std	Z+10, r1	; 0x0a
	EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH3 no digital filtering
    6e1e:	83 83       	std	Z+3, r24	; 0x03

	/* DAC - event 4 */
	EVSYS.CH4MUX  = EVSYS_CHMUX_TCE1_OVF_gc;									// TCE1 overflow goes to EVSYS CH4
    6e20:	13 86       	std	Z+11, r1	; 0x0b
    6e22:	88 ee       	ldi	r24, 0xE8	; 232
	EVSYS.CH4CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH4 no digital filtering
    6e24:	84 83       	std	Z+4, r24	; 0x04

static void tc_init(void)
{
	/* TCC0: VCTCXO PWM signal generation and ADCA & ADCB */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 2048);						// Init PWM structure and enable timer - running with 2048 Hz --> 2 Hz averaged data
    6e26:	14 86       	std	Z+12, r1	; 0x0c
    6e28:	20 e0       	ldi	r18, 0x00	; 0
    6e2a:	38 e0       	ldi	r19, 0x08	; 8
    6e2c:	43 e0       	ldi	r20, 0x03	; 3
    6e2e:	60 e0       	ldi	r22, 0x00	; 0
    6e30:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM here. Percentage with 1% granularity is to coarse, use driver access instead
    6e32:	01 96       	adiw	r24, 0x01	; 1
    6e34:	62 db       	rcall	.-2364   	; 0x64fa <pwm_init>
    6e36:	6d e2       	ldi	r22, 0x2D	; 45
    6e38:	ce 01       	movw	r24, r28
	tc_write_cc_buffer(&TCC0, TC_CCC, (uint16_t) (0.5f + pwm_vctcxo_cfg.period * C_VCTCXO_DEFAULT_VOLTS / C_VCTCXO_PWM_HI_VOLTS));	// Initial value for VCTCXO
    6e3a:	01 96       	adiw	r24, 0x01	; 1
    6e3c:	26 dc       	rcall	.-1972   	; 0x668a <pwm_start>
    6e3e:	6e 81       	ldd	r22, Y+6	; 0x06
    6e40:	7f 81       	ldd	r23, Y+7	; 0x07
    6e42:	80 e0       	ldi	r24, 0x00	; 0
    6e44:	90 e0       	ldi	r25, 0x00	; 0
    6e46:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__floatunsisf>
    6e4a:	20 e0       	ldi	r18, 0x00	; 0
    6e4c:	30 e0       	ldi	r19, 0x00	; 0
    6e4e:	40 ec       	ldi	r20, 0xC0	; 192
    6e50:	5f e3       	ldi	r21, 0x3F	; 63
    6e52:	0e 94 8b 47 	call	0x8f16	; 0x8f16 <__mulsf3>
    6e56:	27 e2       	ldi	r18, 0x27	; 39
    6e58:	31 e3       	ldi	r19, 0x31	; 49
    6e5a:	40 e5       	ldi	r20, 0x50	; 80
    6e5c:	50 e4       	ldi	r21, 0x40	; 64
    6e5e:	0e 94 64 46 	call	0x8cc8	; 0x8cc8 <__divsf3>
    6e62:	20 e0       	ldi	r18, 0x00	; 0
    6e64:	30 e0       	ldi	r19, 0x00	; 0
    6e66:	40 e0       	ldi	r20, 0x00	; 0
    6e68:	5f e3       	ldi	r21, 0x3F	; 63
    6e6a:	0e 94 00 46 	call	0x8c00	; 0x8c00 <__addsf3>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    6e6e:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <__fixunssfsi>
    6e72:	00 e0       	ldi	r16, 0x00	; 0
    6e74:	18 e0       	ldi	r17, 0x08	; 8
    6e76:	d8 01       	movw	r26, r16
    6e78:	dc 96       	adiw	r26, 0x3c	; 60
    6e7a:	6d 93       	st	X+, r22

	/* TCE1: DAC clock */
	tc_enable(&TCE1);
    6e7c:	7c 93       	st	X, r23
    6e7e:	dd 97       	sbiw	r26, 0x3d	; 61
    6e80:	80 e4       	ldi	r24, 0x40	; 64
    6e82:	9a e0       	ldi	r25, 0x0A	; 10
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    6e84:	0e 94 26 28 	call	0x504c	; 0x504c <tc_enable>
    6e88:	0f 2e       	mov	r0, r31
    6e8a:	f0 e4       	ldi	r31, 0x40	; 64
    6e8c:	ef 2e       	mov	r14, r31
    6e8e:	fa e0       	ldi	r31, 0x0A	; 10
    6e90:	ff 2e       	mov	r15, r31
    6e92:	f0 2d       	mov	r31, r0
    6e94:	f7 01       	movw	r30, r14
    6e96:	81 81       	ldd	r24, Z+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    6e98:	88 7f       	andi	r24, 0xF8	; 248
    6e9a:	81 83       	std	Z+1, r24	; 0x01
    6e9c:	8b e2       	ldi	r24, 0x2B	; 43
    6e9e:	91 e0       	ldi	r25, 0x01	; 1


static void adc_init(void)
{
	/* Disable digital circuits of ADC pins */
	PORTA_PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6ea0:	86 a3       	std	Z+38, r24	; 0x26
    6ea2:	97 a3       	std	Z+39, r25	; 0x27
    6ea4:	e0 e1       	ldi	r30, 0x10	; 16
    6ea6:	f6 e0       	ldi	r31, 0x06	; 6
    6ea8:	80 81       	ld	r24, Z
	PORTA_PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6eaa:	87 60       	ori	r24, 0x07	; 7
    6eac:	80 83       	st	Z, r24
    6eae:	e1 e1       	ldi	r30, 0x11	; 17
    6eb0:	f6 e0       	ldi	r31, 0x06	; 6
    6eb2:	80 81       	ld	r24, Z
	PORTA_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6eb4:	87 60       	ori	r24, 0x07	; 7
    6eb6:	80 83       	st	Z, r24
    6eb8:	e2 e1       	ldi	r30, 0x12	; 18
    6eba:	f6 e0       	ldi	r31, 0x06	; 6
    6ebc:	80 81       	ld	r24, Z
	PORTA_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6ebe:	87 60       	ori	r24, 0x07	; 7
    6ec0:	80 83       	st	Z, r24
    6ec2:	e3 e1       	ldi	r30, 0x13	; 19
    6ec4:	f6 e0       	ldi	r31, 0x06	; 6
    6ec6:	80 81       	ld	r24, Z
	PORTA_PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6ec8:	87 60       	ori	r24, 0x07	; 7
    6eca:	80 83       	st	Z, r24
    6ecc:	e4 e1       	ldi	r30, 0x14	; 20
    6ece:	f6 e0       	ldi	r31, 0x06	; 6
    6ed0:	80 81       	ld	r24, Z
	PORTA_PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6ed2:	87 60       	ori	r24, 0x07	; 7
    6ed4:	80 83       	st	Z, r24
    6ed6:	e5 e1       	ldi	r30, 0x15	; 21
    6ed8:	f6 e0       	ldi	r31, 0x06	; 6
    6eda:	80 81       	ld	r24, Z
	PORTB_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6edc:	87 60       	ori	r24, 0x07	; 7
    6ede:	80 83       	st	Z, r24
    6ee0:	e2 e3       	ldi	r30, 0x32	; 50
    6ee2:	f6 e0       	ldi	r31, 0x06	; 6
    6ee4:	80 81       	ld	r24, Z
	PORTB_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    6ee6:	87 60       	ori	r24, 0x07	; 7
    6ee8:	80 83       	st	Z, r24
    6eea:	e3 e3       	ldi	r30, 0x33	; 51
    6eec:	f6 e0       	ldi	r31, 0x06	; 6
    6eee:	80 81       	ld	r24, Z

	/* Prepare the structures */
	adc_read_configuration(&ADC_VCTCXO_5V0_VBAT,							&g_adc_a_conf);
    6ef0:	87 60       	ori	r24, 0x07	; 7
    6ef2:	80 83       	st	Z, r24
    6ef4:	6a e3       	ldi	r22, 0x3A	; 58
    6ef6:	7b e2       	ldi	r23, 0x2B	; 43
    6ef8:	80 e0       	ldi	r24, 0x00	; 0
    6efa:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    6efc:	0e 94 2d 20 	call	0x405a	; 0x405a <adc_read_configuration>
    6f00:	46 e3       	ldi	r20, 0x36	; 54
    6f02:	5b e2       	ldi	r21, 0x2B	; 43
    6f04:	61 e0       	ldi	r22, 0x01	; 1
    6f06:	80 e0       	ldi	r24, 0x00	; 0
    6f08:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    6f0a:	0e 94 b1 20 	call	0x4162	; 0x4162 <adcch_read_configuration>
    6f0e:	42 e3       	ldi	r20, 0x32	; 50
    6f10:	5b e2       	ldi	r21, 0x2B	; 43
    6f12:	62 e0       	ldi	r22, 0x02	; 2
    6f14:	80 e0       	ldi	r24, 0x00	; 0
    6f16:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    6f18:	0e 94 b1 20 	call	0x4162	; 0x4162 <adcch_read_configuration>
    6f1c:	4e e2       	ldi	r20, 0x2E	; 46
    6f1e:	5b e2       	ldi	r21, 0x2B	; 43
    6f20:	64 e0       	ldi	r22, 0x04	; 4
    6f22:	80 e0       	ldi	r24, 0x00	; 0
    6f24:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_SILENCE, ADC_SILENCE_CH,					&g_adcch_silence_conf);
    6f26:	0e 94 b1 20 	call	0x4162	; 0x4162 <adcch_read_configuration>
    6f2a:	4a e2       	ldi	r20, 0x2A	; 42
    6f2c:	5b e2       	ldi	r21, 0x2B	; 43
    6f2e:	68 e0       	ldi	r22, 0x08	; 8
    6f30:	80 e0       	ldi	r24, 0x00	; 0
    6f32:	92 e0       	ldi	r25, 0x02	; 2
	adc_read_configuration(&ADC_TEMP,										&g_adc_b_conf);
    6f34:	0e 94 b1 20 	call	0x4162	; 0x4162 <adcch_read_configuration>
    6f38:	63 e2       	ldi	r22, 0x23	; 35
    6f3a:	7b e2       	ldi	r23, 0x2B	; 43
    6f3c:	80 e4       	ldi	r24, 0x40	; 64
    6f3e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    6f40:	0e 94 2d 20 	call	0x405a	; 0x405a <adc_read_configuration>
    6f44:	4f e1       	ldi	r20, 0x1F	; 31
    6f46:	5b e2       	ldi	r21, 0x2B	; 43
    6f48:	61 e0       	ldi	r22, 0x01	; 1
    6f4a:	80 e4       	ldi	r24, 0x40	; 64
    6f4c:	92 e0       	ldi	r25, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    6f4e:	0e 94 b1 20 	call	0x4162	; 0x4162 <adcch_read_configuration>
    6f52:	aa e3       	ldi	r26, 0x3A	; 58
    6f54:	bb e2       	ldi	r27, 0x2B	; 43
    6f56:	83 e0       	ldi	r24, 0x03	; 3
    6f58:	14 96       	adiw	r26, 0x04	; 4
    6f5a:	8c 93       	st	X, r24
    6f5c:	14 97       	sbiw	r26, 0x04	; 4
    6f5e:	63 e2       	ldi	r22, 0x23	; 35
    6f60:	7b e2       	ldi	r23, 0x2B	; 43
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_disable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl &= ~int_inp;
    6f62:	fb 01       	movw	r30, r22
    6f64:	d4 82       	std	Z+4, r13	; 0x04
    6f66:	12 96       	adiw	r26, 0x02	; 2
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    6f68:	3c 91       	ld	r19, X
 * \note Not all device families feature this setting.
 */
static inline void adc_set_current_limit(struct adc_config *conf,
		enum adc_current_limit currlimit)
{
	conf->ctrlb &= ~ADC_CURRLIMIT_gm;
    6f6a:	12 97       	sbiw	r26, 0x02	; 2
    6f6c:	22 81       	ldd	r18, Z+2	; 0x02
    6f6e:	11 96       	adiw	r26, 0x01	; 1
    6f70:	9c 91       	ld	r25, X
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    6f72:	11 97       	sbiw	r26, 0x01	; 1
    6f74:	81 81       	ldd	r24, Z+1	; 0x01
    6f76:	0f 2e       	mov	r0, r31
    6f78:	f6 e3       	ldi	r31, 0x36	; 54
    6f7a:	cf 2e       	mov	r12, r31
    6f7c:	fb e2       	ldi	r31, 0x2B	; 43
    6f7e:	df 2e       	mov	r13, r31
    6f80:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    6f82:	f6 01       	movw	r30, r12
    6f84:	20 82       	st	Z, r2
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    6f86:	48 e0       	ldi	r20, 0x08	; 8
    6f88:	41 83       	std	Z+1, r20	; 0x01
    6f8a:	0f 2e       	mov	r0, r31
    6f8c:	f2 e3       	ldi	r31, 0x32	; 50
    6f8e:	8f 2e       	mov	r8, r31
    6f90:	fb e2       	ldi	r31, 0x2B	; 43
    6f92:	9f 2e       	mov	r9, r31
    6f94:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    6f96:	f4 01       	movw	r30, r8
    6f98:	20 82       	st	Z, r2
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    6f9a:	50 e2       	ldi	r21, 0x20	; 32
    6f9c:	51 83       	std	Z+1, r21	; 0x01
    6f9e:	0f 2e       	mov	r0, r31
    6fa0:	fe e2       	ldi	r31, 0x2E	; 46
    6fa2:	af 2e       	mov	r10, r31
    6fa4:	fb e2       	ldi	r31, 0x2B	; 43
    6fa6:	bf 2e       	mov	r11, r31
    6fa8:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    6faa:	f5 01       	movw	r30, r10
    6fac:	20 82       	st	Z, r2
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    6fae:	58 e2       	ldi	r21, 0x28	; 40
    6fb0:	51 83       	std	Z+1, r21	; 0x01
    6fb2:	0f 2e       	mov	r0, r31
    6fb4:	fa e2       	ldi	r31, 0x2A	; 42
    6fb6:	6f 2e       	mov	r6, r31
    6fb8:	fb e2       	ldi	r31, 0x2B	; 43
    6fba:	7f 2e       	mov	r7, r31
    6fbc:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    6fbe:	f3 01       	movw	r30, r6
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    6fc0:	10 82       	st	Z, r1
    6fc2:	41 83       	std	Z+1, r20	; 0x01
    6fc4:	0f 2e       	mov	r0, r31
    6fc6:	ff e1       	ldi	r31, 0x1F	; 31
    6fc8:	4f 2e       	mov	r4, r31
    6fca:	fb e2       	ldi	r31, 0x2B	; 43
    6fcc:	5f 2e       	mov	r5, r31
    6fce:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    6fd0:	f2 01       	movw	r30, r4
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    6fd2:	10 82       	st	Z, r1
    6fd4:	11 82       	std	Z+1, r1	; 0x01
    6fd6:	3e 78       	andi	r19, 0x8E	; 142
    6fd8:	32 62       	ori	r19, 0x22	; 34
    6fda:	12 96       	adiw	r26, 0x02	; 2
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    6fdc:	3c 93       	st	X, r19
    6fde:	12 97       	sbiw	r26, 0x02	; 2
    6fe0:	2f 78       	andi	r18, 0x8F	; 143
    6fe2:	23 60       	ori	r18, 0x03	; 3
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    6fe4:	fb 01       	movw	r30, r22
    6fe6:	22 83       	std	Z+2, r18	; 0x02
    6fe8:	22 e0       	ldi	r18, 0x02	; 2
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    6fea:	f6 01       	movw	r30, r12
    6fec:	23 83       	std	Z+3, r18	; 0x03
    6fee:	91 70       	andi	r25, 0x01	; 1
    6ff0:	90 64       	ori	r25, 0x40	; 64
    6ff2:	11 96       	adiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    6ff4:	9c 93       	st	X, r25
    6ff6:	11 97       	sbiw	r26, 0x01	; 1
    6ff8:	0f 2e       	mov	r0, r31
    6ffa:	fc e0       	ldi	r31, 0x0C	; 12
    6ffc:	3f 2e       	mov	r3, r31
    6ffe:	f0 2d       	mov	r31, r0
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    7000:	13 96       	adiw	r26, 0x03	; 3
    7002:	3c 92       	st	X, r3
    7004:	81 70       	andi	r24, 0x01	; 1
    7006:	80 66       	ori	r24, 0x60	; 96
    7008:	db 01       	movw	r26, r22
    700a:	11 96       	adiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    700c:	8c 93       	st	X, r24
    700e:	11 97       	sbiw	r26, 0x01	; 1
	/* Trigger */
	adc_set_conversion_trigger(&g_adc_a_conf, ADC_TRIG_EVENT_SINGLE, 4, 1);
	adc_set_conversion_trigger(&g_adc_b_conf, ADC_TRIG_EVENT_SINGLE, 1, 0);

	/* Interrupt service routine */
	adc_set_callback(&ADCA, isr_adc_a);
    7010:	13 96       	adiw	r26, 0x03	; 3
    7012:	2c 92       	st	X, r2
    7014:	6b ea       	ldi	r22, 0xAB	; 171
    7016:	73 e3       	ldi	r23, 0x33	; 51
    7018:	80 e0       	ldi	r24, 0x00	; 0
    701a:	92 e0       	ldi	r25, 0x02	; 2
	adc_set_callback(&ADCB, isr_adc_b);
    701c:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <adc_set_callback>
    7020:	61 e2       	ldi	r22, 0x21	; 33
    7022:	75 e3       	ldi	r23, 0x35	; 53
    7024:	80 e4       	ldi	r24, 0x40	; 64
    7026:	92 e0       	ldi	r25, 0x02	; 2
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    7028:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <adc_set_callback>
    702c:	f4 01       	movw	r30, r8
    702e:	32 81       	ldd	r19, Z+2	; 0x02
    7030:	d5 01       	movw	r26, r10
    7032:	12 96       	adiw	r26, 0x02	; 2
    7034:	2c 91       	ld	r18, X
    7036:	f3 01       	movw	r30, r6
    7038:	92 81       	ldd	r25, Z+2	; 0x02
    703a:	d2 01       	movw	r26, r4
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    703c:	12 96       	adiw	r26, 0x02	; 2
    703e:	8c 91       	ld	r24, X
    7040:	f6 01       	movw	r30, r12
    7042:	42 81       	ldd	r20, Z+2	; 0x02
    7044:	40 7f       	andi	r20, 0xF0	; 240
    7046:	41 60       	ori	r20, 0x01	; 1
    7048:	42 83       	std	Z+2, r20	; 0x02
    704a:	30 7f       	andi	r19, 0xF0	; 240
    704c:	31 60       	ori	r19, 0x01	; 1
    704e:	d4 01       	movw	r26, r8
    7050:	12 96       	adiw	r26, 0x02	; 2
    7052:	3c 93       	st	X, r19
    7054:	20 7f       	andi	r18, 0xF0	; 240
    7056:	21 60       	ori	r18, 0x01	; 1
    7058:	f5 01       	movw	r30, r10
    705a:	22 83       	std	Z+2, r18	; 0x02
    705c:	90 7f       	andi	r25, 0xF0	; 240
    705e:	91 60       	ori	r25, 0x01	; 1
    7060:	d3 01       	movw	r26, r6
    7062:	12 96       	adiw	r26, 0x02	; 2
    7064:	9c 93       	st	X, r25
    7066:	80 7f       	andi	r24, 0xF0	; 240
    7068:	81 60       	ori	r24, 0x01	; 1
	adcch_enable_interrupt(&g_adcch_io_adc5_conf);
	adcch_enable_interrupt(&g_adcch_silence_conf);
	adcch_enable_interrupt(&g_adcch_temp_conf);

	/* Execute the new settings */
	adc_write_configuration(&ADCA,											&g_adc_a_conf);
    706a:	f2 01       	movw	r30, r4
    706c:	82 83       	std	Z+2, r24	; 0x02
    706e:	6a e3       	ldi	r22, 0x3A	; 58
    7070:	7b e2       	ldi	r23, 0x2B	; 43
    7072:	80 e0       	ldi	r24, 0x00	; 0
    7074:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO_5V0_VBAT,	ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    7076:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <adc_write_configuration>
    707a:	a6 01       	movw	r20, r12
    707c:	61 e0       	ldi	r22, 0x01	; 1
    707e:	80 e0       	ldi	r24, 0x00	; 0
    7080:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4,			ADC_IO_ADC4_CH,			&g_adcch_io_adc4_conf);
    7082:	0e 94 66 20 	call	0x40cc	; 0x40cc <adcch_write_configuration>
    7086:	a4 01       	movw	r20, r8
    7088:	62 e0       	ldi	r22, 0x02	; 2
    708a:	80 e0       	ldi	r24, 0x00	; 0
    708c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5,			ADC_IO_ADC5_CH,			&g_adcch_io_adc5_conf);
    708e:	0e 94 66 20 	call	0x40cc	; 0x40cc <adcch_write_configuration>
    7092:	a5 01       	movw	r20, r10
    7094:	64 e0       	ldi	r22, 0x04	; 4
    7096:	80 e0       	ldi	r24, 0x00	; 0
    7098:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_SILENCE,			ADC_SILENCE_CH,			&g_adcch_silence_conf);
    709a:	0e 94 66 20 	call	0x40cc	; 0x40cc <adcch_write_configuration>
    709e:	a3 01       	movw	r20, r6
    70a0:	68 e0       	ldi	r22, 0x08	; 8
    70a2:	80 e0       	ldi	r24, 0x00	; 0
    70a4:	92 e0       	ldi	r25, 0x02	; 2
	adc_write_configuration(&ADCB,											&g_adc_b_conf);
    70a6:	0e 94 66 20 	call	0x40cc	; 0x40cc <adcch_write_configuration>
    70aa:	63 e2       	ldi	r22, 0x23	; 35
    70ac:	7b e2       	ldi	r23, 0x2B	; 43
    70ae:	80 e4       	ldi	r24, 0x40	; 64
    70b0:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_TEMP,			ADC_TEMP_CH,			&g_adcch_temp_conf);
    70b2:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <adc_write_configuration>
    70b6:	a2 01       	movw	r20, r4
    70b8:	61 e0       	ldi	r22, 0x01	; 1
    70ba:	80 e4       	ldi	r24, 0x40	; 64
    70bc:	92 e0       	ldi	r25, 0x02	; 2
    70be:	0e 94 66 20 	call	0x40cc	; 0x40cc <adcch_write_configuration>
    70c2:	61 e2       	ldi	r22, 0x21	; 33
    70c4:	70 e0       	ldi	r23, 0x00	; 0
    70c6:	82 e0       	ldi	r24, 0x02	; 2
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    70c8:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
		data <<= 8;
    70cc:	c8 2e       	mov	r12, r24
    70ce:	d1 2c       	mov	r13, r1
    70d0:	dc 2c       	mov	r13, r12
    70d2:	cc 24       	eor	r12, r12
    70d4:	60 e2       	ldi	r22, 0x20	; 32
    70d6:	70 e0       	ldi	r23, 0x00	; 0
    70d8:	82 e0       	ldi	r24, 0x02	; 2
		data |= nvm_read_production_signature_row(ADCACAL0);
    70da:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>

	/* Get production signature for calibration */
	ADCA_CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    70de:	c8 2a       	or	r12, r24
    70e0:	c0 92 0c 02 	sts	0x020C, r12	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    70e4:	d0 92 0d 02 	sts	0x020D, r13	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    70e8:	65 e2       	ldi	r22, 0x25	; 37
    70ea:	70 e0       	ldi	r23, 0x00	; 0
    70ec:	82 e0       	ldi	r24, 0x02	; 2
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    70ee:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
		data <<= 8;
    70f2:	c8 2e       	mov	r12, r24
    70f4:	d1 2c       	mov	r13, r1
    70f6:	dc 2c       	mov	r13, r12
    70f8:	cc 24       	eor	r12, r12
    70fa:	64 e2       	ldi	r22, 0x24	; 36
    70fc:	70 e0       	ldi	r23, 0x00	; 0
    70fe:	82 e0       	ldi	r24, 0x02	; 2
		data |= nvm_read_production_signature_row(ADCBCAL0);
    7100:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
	ADCB_CAL = adc_get_calibration_data(ADC_CAL_ADCB);
    7104:	c8 2a       	or	r12, r24
    7106:	c0 92 4c 02 	sts	0x024C, r12	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
static void isr_dma_dac_ch0_B(enum dma_channel_status status);
static void task_dac(uint32_t now);

static void dac_init(void)
{
	dac_read_configuration(&DAC_DAC, &dac_conf);
    710a:	d0 92 4d 02 	sts	0x024D, r13	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
    710e:	67 eb       	ldi	r22, 0xB7	; 183
    7110:	7a e2       	ldi	r23, 0x2A	; 42
    7112:	80 e2       	ldi	r24, 0x20	; 32
    7114:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    7116:	0e 94 a3 21 	call	0x4346	; 0x4346 <dac_read_configuration>
    711a:	e7 eb       	ldi	r30, 0xB7	; 183
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    711c:	fa e2       	ldi	r31, 0x2A	; 42
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    711e:	22 82       	std	Z+2, r2	; 0x02
    7120:	30 82       	st	Z, r3
    7122:	81 81       	ldd	r24, Z+1	; 0x01
    7124:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    7126:	83 64       	ori	r24, 0x43	; 67
    7128:	81 83       	std	Z+1, r24	; 0x01
	dac_set_conversion_parameters(&dac_conf, DAC_REF_BANDGAP, DAC_ADJ_LEFT);
	dac_set_active_channel(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 0);
	dac_set_conversion_trigger(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 4);
	dac_write_configuration(&DAC_DAC, &dac_conf);
    712a:	84 e0       	ldi	r24, 0x04	; 4
    712c:	83 83       	std	Z+3, r24	; 0x03
    712e:	bf 01       	movw	r22, r30
    7130:	80 e2       	ldi	r24, 0x20	; 32
    7132:	93 e0       	ldi	r25, 0x03	; 3
    7134:	0e 94 47 21 	call	0x428e	; 0x428e <dac_write_configuration>
    7138:	62 e3       	ldi	r22, 0x32	; 50
    713a:	70 e0       	ldi	r23, 0x00	; 0
    713c:	82 e0       	ldi	r24, 0x02	; 2

	/* Get production signature for calibration */
	DACB_CH0OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB0_OFFSET);
    713e:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
    7142:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    7146:	63 e3       	ldi	r22, 0x33	; 51
    7148:	70 e0       	ldi	r23, 0x00	; 0
    714a:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH0GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB0_GAIN);
    714c:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
    7150:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    7154:	66 e3       	ldi	r22, 0x36	; 54
    7156:	70 e0       	ldi	r23, 0x00	; 0
    7158:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH1OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB1_OFFSET);
    715a:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
    715e:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    7162:	67 e3       	ldi	r22, 0x37	; 55
    7164:	70 e0       	ldi	r23, 0x00	; 0
    7166:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH1GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB1_GAIN);
    7168:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
	}
}

static void dma_init(void)
{
	memset(&dmach_dma0_conf, 0, sizeof(dmach_dma0_conf));	// DACB channel 0 - linked with dma1
    716c:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
    7170:	0f 2e       	mov	r0, r31
    7172:	fc ea       	ldi	r31, 0xAC	; 172
    7174:	af 2e       	mov	r10, r31
    7176:	fa e2       	ldi	r31, 0x2A	; 42
    7178:	bf 2e       	mov	r11, r31
    717a:	f0 2d       	mov	r31, r0
    717c:	8b e0       	ldi	r24, 0x0B	; 11
    717e:	d5 01       	movw	r26, r10
    7180:	e8 2f       	mov	r30, r24
    7182:	1d 92       	st	X+, r1
	memset(&dmach_dma1_conf, 0, sizeof(dmach_dma1_conf));	// DACB channel 0 - linked with dma0
    7184:	ea 95       	dec	r30
    7186:	e9 f7       	brne	.-6      	; 0x7182 <main+0x3e8>
    7188:	0f 2e       	mov	r0, r31
    718a:	f1 ea       	ldi	r31, 0xA1	; 161
    718c:	cf 2e       	mov	r12, r31
    718e:	fa e2       	ldi	r31, 0x2A	; 42
    7190:	df 2e       	mov	r13, r31
    7192:	f0 2d       	mov	r31, r0
    7194:	d6 01       	movw	r26, r12
    7196:	1d 92       	st	X+, r1
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
    7198:	8a 95       	dec	r24
    719a:	e9 f7       	brne	.-6      	; 0x7196 <main+0x3fc>
    719c:	81 2c       	mov	r8, r1
    719e:	99 24       	eor	r9, r9
    71a0:	93 94       	inc	r9
    71a2:	f5 01       	movw	r30, r10
    71a4:	84 82       	std	Z+4, r8	; 0x04
    71a6:	95 82       	std	Z+5, r9	; 0x05
    71a8:	d6 01       	movw	r26, r12
    71aa:	14 96       	adiw	r26, 0x04	; 4
    71ac:	8d 92       	st	X+, r8
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    71ae:	9c 92       	st	X, r9
    71b0:	15 97       	sbiw	r26, 0x05	; 5
    71b2:	85 e9       	ldi	r24, 0x95	; 149
    71b4:	98 e2       	ldi	r25, 0x28	; 40
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    71b6:	87 83       	std	Z+7, r24	; 0x07
    71b8:	90 87       	std	Z+8, r25	; 0x08
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    71ba:	29 ed       	ldi	r18, 0xD9	; 217
    71bc:	22 83       	std	Z+2, r18	; 0x02
    71be:	88 e3       	ldi	r24, 0x38	; 56
    71c0:	93 e0       	ldi	r25, 0x03	; 3
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    71c2:	81 87       	std	Z+9, r24	; 0x09
    71c4:	92 87       	std	Z+10, r25	; 0x0a
    71c6:	45 e9       	ldi	r20, 0x95	; 149
    71c8:	59 e2       	ldi	r21, 0x29	; 41
    71ca:	17 96       	adiw	r26, 0x07	; 7
    71cc:	4d 93       	st	X+, r20
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    71ce:	5c 93       	st	X, r21
    71d0:	18 97       	sbiw	r26, 0x08	; 8
    71d2:	12 96       	adiw	r26, 0x02	; 2
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    71d4:	2c 93       	st	X, r18
    71d6:	12 97       	sbiw	r26, 0x02	; 2
    71d8:	19 96       	adiw	r26, 0x09	; 9
    71da:	8d 93       	st	X+, r24
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    71dc:	9c 93       	st	X, r25
    71de:	1a 97       	sbiw	r26, 0x0a	; 10
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    71e0:	95 e2       	ldi	r25, 0x25	; 37
    71e2:	93 83       	std	Z+3, r25	; 0x03
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    71e4:	86 e0       	ldi	r24, 0x06	; 6
    71e6:	80 83       	st	Z, r24
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    71e8:	13 96       	adiw	r26, 0x03	; 3
	dma_channel_set_single_shot(&dmach_dma0_conf);

	dma_channel_set_trigger_source(&dmach_dma1_conf, DMA_CH_TRIGSRC_DACB_CH0_gc);
	dma_channel_set_single_shot(&dmach_dma1_conf);

	task_dac(rtc_get_time());																		// Calculate DDS increments
    71ea:	9c 93       	st	X, r25
    71ec:	13 97       	sbiw	r26, 0x03	; 3
    71ee:	8c 93       	st	X, r24
    71f0:	0e 94 ae 12 	call	0x255c	; 0x255c <rtc_get_time>
	tc_init();			// Timers
	adc_init();			// ADC
#ifdef USE_DAC
	dac_init();			// DAC
#endif
	twi_init();			// I2C / TWI
    71f4:	64 dc       	rcall	.-1848   	; 0x6abe <task_dac>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    71f6:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <twi_init>

	nvm_init(INT_FLASH);
    71fa:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <board_init>
    71fe:	80 e0       	ldi	r24, 0x00	; 0

	/* All interrupt sources & PMIC are prepared until here - IRQ activation follows */
	cpu_irq_enable();
    7200:	0e 94 2f 11 	call	0x225e	; 0x225e <nvm_init>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    7204:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    7206:	f8 01       	movw	r30, r16
    7208:	80 81       	ld	r24, Z
    720a:	80 7f       	andi	r24, 0xF0	; 240

static void tc_start(void)
{
	/* ADC clock */
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc);							// VCTCXO PWM start, output still is Z-state
	tc_set_overflow_interrupt_callback(&TCC0, isr_tcc0_ovfl);
    720c:	81 60       	ori	r24, 0x01	; 1
    720e:	80 83       	st	Z, r24
    7210:	6e eb       	ldi	r22, 0xBE	; 190
    7212:	75 e3       	ldi	r23, 0x35	; 53
    7214:	80 e0       	ldi	r24, 0x00	; 0
    7216:	98 e0       	ldi	r25, 0x08	; 8
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    7218:	0e 94 a5 28 	call	0x514a	; 0x514a <tc_set_overflow_interrupt_callback>
    721c:	d8 01       	movw	r26, r16
    721e:	16 96       	adiw	r26, 0x06	; 6
    7220:	8c 91       	ld	r24, X
    7222:	16 97       	sbiw	r26, 0x06	; 6
    7224:	8c 7f       	andi	r24, 0xFC	; 252
    7226:	16 96       	adiw	r26, 0x06	; 6
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    7228:	8c 93       	st	X, r24
    722a:	16 97       	sbiw	r26, 0x06	; 6
    722c:	16 96       	adiw	r26, 0x06	; 6
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    722e:	8c 91       	ld	r24, X
    7230:	16 97       	sbiw	r26, 0x06	; 6
    7232:	81 60       	ori	r24, 0x01	; 1
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    7234:	16 96       	adiw	r26, 0x06	; 6
    7236:	8c 93       	st	X, r24
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    7238:	f7 01       	movw	r30, r14
    723a:	80 81       	ld	r24, Z
    723c:	80 7f       	andi	r24, 0xF0	; 240
	dma_init();
}

static void dac_start(void)
{
	dac_enable(&DACB);
    723e:	81 60       	ori	r24, 0x01	; 1
    7240:	80 83       	st	Z, r24
    7242:	80 e2       	ldi	r24, 0x20	; 32
    7244:	93 e0       	ldi	r25, 0x03	; 3
	task_dac(rtc_get_time());																		// Calculate DDS increments
}

static void dma_start(void)
{
	dma_enable();
    7246:	0e 94 1b 21 	call	0x4236	; 0x4236 <dac_enable>

	dma_set_callback(DMA_CHANNEL_DACB_CH0_A, isr_dma_dac_ch0_A);
    724a:	0e 94 95 11 	call	0x232a	; 0x232a <dma_enable>
    724e:	6a e9       	ldi	r22, 0x9A	; 154
    7250:	76 e3       	ldi	r23, 0x36	; 54
    7252:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline void dma_channel_set_interrupt_level(struct dma_channel_config
		*config, enum dma_int_level_t level)
{
	config->ctrlb &= ~(DMA_CH_ERRINTLVL_gm | DMA_CH_TRNINTLVL_gm);
	config->ctrlb |= (level << DMA_CH_ERRINTLVL_gp)
    7254:	0e 94 b7 11 	call	0x236e	; 0x236e <dma_set_callback>
    7258:	d5 01       	movw	r26, r10
    725a:	11 96       	adiw	r26, 0x01	; 1
    725c:	8c 91       	ld	r24, X
    725e:	11 97       	sbiw	r26, 0x01	; 1
    7260:	80 7f       	andi	r24, 0xF0	; 240
    7262:	8a 60       	ori	r24, 0x0A	; 10
	dma_channel_set_interrupt_level(&dmach_dma0_conf, DMA_INT_LVL_MED);

	dma_set_callback(DMA_CHANNEL_DACB_CH0_B, isr_dma_dac_ch0_B);
    7264:	11 96       	adiw	r26, 0x01	; 1
    7266:	8c 93       	st	X, r24
    7268:	67 e7       	ldi	r22, 0x77	; 119
    726a:	76 e3       	ldi	r23, 0x36	; 54
    726c:	81 e0       	ldi	r24, 0x01	; 1
    726e:	0e 94 b7 11 	call	0x236e	; 0x236e <dma_set_callback>
    7272:	f6 01       	movw	r30, r12
    7274:	81 81       	ldd	r24, Z+1	; 0x01
    7276:	80 7f       	andi	r24, 0xF0	; 240

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7278:	8a 60       	ori	r24, 0x0A	; 10
    727a:	81 83       	std	Z+1, r24	; 0x01
	cpu_irq_disable();
    727c:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    727e:	8c 87       	std	Y+12, r24	; 0x0c
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_PRIMODE_gm) | primode;
    7280:	f8 94       	cli
    7282:	9c 85       	ldd	r25, Y+12	; 0x0c
    7284:	d4 01       	movw	r26, r8
    7286:	8c 91       	ld	r24, X
    7288:	8c 7f       	andi	r24, 0xFC	; 252
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    728a:	82 60       	ori	r24, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    728c:	8c 93       	st	X, r24
    728e:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_disable();
    7290:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    7292:	8b 87       	std	Y+11, r24	; 0x0b
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_DBUFMODE_gm) | dbufmode;
    7294:	f8 94       	cli
    7296:	9b 85       	ldd	r25, Y+11	; 0x0b
    7298:	f4 01       	movw	r30, r8
    729a:	80 81       	ld	r24, Z
    729c:	83 7f       	andi	r24, 0xF3	; 243
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    729e:	84 60       	ori	r24, 0x04	; 4
	dma_channel_set_interrupt_level(&dmach_dma1_conf, DMA_INT_LVL_MED);

	dma_set_priority_mode(DMA_PRIMODE_CH01RR23_gc);
	dma_set_double_buffer_mode(DMA_DBUFMODE_CH01_gc);

	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_A, &dmach_dma0_conf);
    72a0:	80 83       	st	Z, r24
    72a2:	9f bf       	out	0x3f, r25	; 63
    72a4:	b5 01       	movw	r22, r10
    72a6:	80 e0       	ldi	r24, 0x00	; 0
	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_B, &dmach_dma1_conf);
    72a8:	0e 94 60 12 	call	0x24c0	; 0x24c0 <dma_channel_write_config>
    72ac:	b6 01       	movw	r22, r12
    72ae:	81 e0       	ldi	r24, 0x01	; 1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    72b0:	0e 94 60 12 	call	0x24c0	; 0x24c0 <dma_channel_write_config>
	cpu_irq_disable();
    72b4:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    72b6:	8e 87       	std	Y+14, r24	; 0x0e
	/* IRQ disabled section */
	{
		irqflags_t flags = cpu_irq_save();

		/* Prepare DMA blocks */
		calc_next_frame(&dac_io_dac0_buf[0][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    72b8:	f8 94       	cli
    72ba:	fe 84       	ldd	r15, Y+14	; 0x0e
    72bc:	05 e9       	ldi	r16, 0x95	; 149
    72be:	1a e2       	ldi	r17, 0x2A	; 42
    72c0:	27 e0       	ldi	r18, 0x07	; 7
    72c2:	30 e2       	ldi	r19, 0x20	; 32
    72c4:	4d e9       	ldi	r20, 0x9D	; 157
    72c6:	5a e2       	ldi	r21, 0x2A	; 42
    72c8:	69 e9       	ldi	r22, 0x99	; 153
    72ca:	7a e2       	ldi	r23, 0x2A	; 42
    72cc:	85 e9       	ldi	r24, 0x95	; 149
		calc_next_frame(&dac_io_dac0_buf[1][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    72ce:	98 e2       	ldi	r25, 0x28	; 40
    72d0:	b6 dc       	rcall	.-1684   	; 0x6c3e <calc_next_frame>
    72d2:	27 e0       	ldi	r18, 0x07	; 7
    72d4:	30 e2       	ldi	r19, 0x20	; 32
    72d6:	4d e9       	ldi	r20, 0x9D	; 157
    72d8:	5a e2       	ldi	r21, 0x2A	; 42
    72da:	69 e9       	ldi	r22, 0x99	; 153
    72dc:	7a e2       	ldi	r23, 0x2A	; 42
    72de:	85 e9       	ldi	r24, 0x95	; 149

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    72e0:	99 e2       	ldi	r25, 0x29	; 41
    72e2:	ad dc       	rcall	.-1702   	; 0x6c3e <calc_next_frame>
	cpu_irq_disable();
    72e4:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    72e6:	8d 87       	std	Y+13, r24	; 0x0d
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    72e8:	f8 94       	cli
    72ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    72ec:	e0 e1       	ldi	r30, 0x10	; 16
    72ee:	f1 e0       	ldi	r31, 0x01	; 1
    72f0:	80 81       	ld	r24, Z
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    72f2:	80 68       	ori	r24, 0x80	; 128
    72f4:	80 83       	st	Z, r24
}

static void adc_start(void)
{
	/* Power up after configurations are being set */
	adc_enable(&ADCA);
    72f6:	9f bf       	out	0x3f, r25	; 63
    72f8:	ff be       	out	0x3f, r15	; 63
    72fa:	80 e0       	ldi	r24, 0x00	; 0
	adc_enable(&ADCB);
    72fc:	92 e0       	ldi	r25, 0x02	; 2
    72fe:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <adc_enable>
    7302:	80 e4       	ldi	r24, 0x40	; 64
}


static void usb_init(void)
{
	udc_start();
    7304:	92 e0       	ldi	r25, 0x02	; 2

#if 1
	stdio_usb_init();	// Init and enable stdio_usb
    7306:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <adc_enable>
	stdio_usb_enable();
    730a:	bd d7       	rcall	.+3962   	; 0x8286 <udc_start>
	delay_ms(140);
    730c:	0e 94 97 44 	call	0x892e	; 0x892e <stdio_usb_init>
    7310:	0e 94 93 44 	call	0x8926	; 0x8926 <stdio_usb_enable>
    7314:	61 e6       	ldi	r22, 0x61	; 97
    7316:	7e ea       	ldi	r23, 0xAE	; 174

	printf("%c\r\n", 0x0c);
    7318:	8a e0       	ldi	r24, 0x0A	; 10
    731a:	90 e0       	ldi	r25, 0x00	; 0
    731c:	08 da       	rcall	.-3056   	; 0x672e <__portable_avr_delay_cycles>
    731e:	1f 92       	push	r1
    7320:	3f 92       	push	r3
    7322:	89 e9       	ldi	r24, 0x99	; 153
    7324:	95 e2       	ldi	r25, 0x25	; 37
    7326:	9f 93       	push	r25
	printf("===============================\r\n");
    7328:	8f 93       	push	r24
    732a:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>
    732e:	8e e9       	ldi	r24, 0x9E	; 158
	printf("FindMeSAT - USB logging started\r\n");
    7330:	95 e2       	ldi	r25, 0x25	; 37
    7332:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
    7336:	8f eb       	ldi	r24, 0xBF	; 191
	printf("===============================\r\n\r\n");
    7338:	95 e2       	ldi	r25, 0x25	; 37
    733a:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>
    733e:	80 ee       	ldi	r24, 0xE0	; 224

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB

	/* Start TWI channels */
	twi_start();		// Start TWI
    7340:	95 e2       	ldi	r25, 0x25	; 37
    7342:	0e 94 54 48 	call	0x90a8	; 0x90a8 <puts>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7346:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <twi_start>
	cpu_irq_disable();
	return flags;
    734a:	8f b7       	in	r24, 0x3f	; 63

	/* The application code */
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode = WORKMODE_RUN;
    734c:	88 8b       	std	Y+16, r24	; 0x10
    734e:	f8 94       	cli
    7350:	88 89       	ldd	r24, Y+16	; 0x10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7352:	f2 e0       	ldi	r31, 0x02	; 2
    7354:	f0 93 77 2b 	sts	0x2B77, r31	; 0x802b77 <g_workmode>
    7358:	8f bf       	out	0x3f, r24	; 63
    735a:	0f 90       	pop	r0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    735c:	0f 90       	pop	r0
    735e:	0f 90       	pop	r0
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    7360:	0f 90       	pop	r0
    7362:	0f ec       	ldi	r16, 0xCF	; 207
    7364:	1c e2       	ldi	r17, 0x2C	; 44
    7366:	0f 2e       	mov	r0, r31
    7368:	f8 e4       	ldi	r31, 0x48	; 72

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    736a:	2f 2e       	mov	r2, r31
    736c:	31 2c       	mov	r3, r1
	cpu_irq_disable();
    736e:	f0 2d       	mov	r31, r0
	return flags;
    7370:	8f b7       	in	r24, 0x3f	; 63
}

static void task(void)
{
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode;
    7372:	8a 87       	std	Y+10, r24	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7374:	f8 94       	cli
	cpu_irq_restore(flags);

	if (l_workmode == WORKMODE_RUN) {
    7376:	9a 85       	ldd	r25, Y+10	; 0x0a
    7378:	80 91 77 2b 	lds	r24, 0x2B77	; 0x802b77 <g_workmode>
		uint32_t now = rtc_get_time();
    737c:	9f bf       	out	0x3f, r25	; 63
    737e:	82 30       	cpi	r24, 0x02	; 2
    7380:	09 f0       	breq	.+2      	; 0x7384 <main+0x5ea>
    7382:	0d c2       	rjmp	.+1050   	; 0x779e <main+0xa04>

		/* TASK when woken up and all ISRs are done */
		task_dac(now);
    7384:	0e 94 ae 12 	call	0x255c	; 0x255c <rtc_get_time>

static void task_adc(uint32_t now)
{	/* Calculations of the ADC values for the presentation layer */
	static uint32_t adc_last = 0;

	if ((now - adc_last) >= 512 || (now < adc_last)) {
    7388:	6b 01       	movw	r12, r22
    738a:	7c 01       	movw	r14, r24
    738c:	98 db       	rcall	.-2256   	; 0x6abe <task_dac>
    738e:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <adc_last.7499>
    7392:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <adc_last.7499+0x1>
    7396:	a0 91 83 28 	lds	r26, 0x2883	; 0x802883 <adc_last.7499+0x2>
    739a:	b0 91 84 28 	lds	r27, 0x2884	; 0x802884 <adc_last.7499+0x3>
    739e:	b7 01       	movw	r22, r14
    73a0:	a6 01       	movw	r20, r12
    73a2:	48 1b       	sub	r20, r24
    73a4:	59 0b       	sbc	r21, r25
    73a6:	6a 0b       	sbc	r22, r26
    73a8:	7b 0b       	sbc	r23, r27
    73aa:	41 15       	cp	r20, r1
    73ac:	52 40       	sbci	r21, 0x02	; 2
    73ae:	61 05       	cpc	r22, r1
    73b0:	71 05       	cpc	r23, r1
    73b2:	30 f4       	brcc	.+12     	; 0x73c0 <main+0x626>
    73b4:	c8 16       	cp	r12, r24
    73b6:	d9 06       	cpc	r13, r25
    73b8:	ea 06       	cpc	r14, r26
		adc_last = now;
    73ba:	fb 06       	cpc	r15, r27
    73bc:	08 f0       	brcs	.+2      	; 0x73c0 <main+0x626>
    73be:	12 c1       	rjmp	.+548    	; 0x75e4 <main+0x84a>
    73c0:	c0 92 81 28 	sts	0x2881, r12	; 0x802881 <adc_last.7499>
    73c4:	d0 92 82 28 	sts	0x2882, r13	; 0x802882 <adc_last.7499+0x1>
    73c8:	e0 92 83 28 	sts	0x2883, r14	; 0x802883 <adc_last.7499+0x2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    73cc:	f0 92 84 28 	sts	0x2884, r15	; 0x802884 <adc_last.7499+0x3>
	cpu_irq_disable();
	return flags;
    73d0:	8f b7       	in	r24, 0x3f	; 63

		irqflags_t flags = cpu_irq_save();
		uint32_t l_adc_vctcxo_cur	= g_adc_vctcxo_cur;
    73d2:	88 87       	std	Y+8, r24	; 0x08
    73d4:	f8 94       	cli
    73d6:	68 85       	ldd	r22, Y+8	; 0x08
    73d8:	20 91 1b 2b 	lds	r18, 0x2B1B	; 0x802b1b <g_adc_vctcxo_cur>
    73dc:	30 91 1c 2b 	lds	r19, 0x2B1C	; 0x802b1c <g_adc_vctcxo_cur+0x1>
    73e0:	40 91 1d 2b 	lds	r20, 0x2B1D	; 0x802b1d <g_adc_vctcxo_cur+0x2>
		uint32_t l_adc_5v0_cur		= g_adc_5v0_cur;
    73e4:	50 91 1e 2b 	lds	r21, 0x2B1E	; 0x802b1e <g_adc_vctcxo_cur+0x3>
    73e8:	40 90 11 2b 	lds	r4, 0x2B11	; 0x802b11 <g_adc_5v0_cur>
    73ec:	50 90 12 2b 	lds	r5, 0x2B12	; 0x802b12 <g_adc_5v0_cur+0x1>
    73f0:	60 90 13 2b 	lds	r6, 0x2B13	; 0x802b13 <g_adc_5v0_cur+0x2>
		uint32_t l_adc_vbat_cur		= g_adc_vbat_cur;
    73f4:	70 90 14 2b 	lds	r7, 0x2B14	; 0x802b14 <g_adc_5v0_cur+0x3>
    73f8:	80 90 07 2b 	lds	r8, 0x2B07	; 0x802b07 <g_adc_vbat_cur>
    73fc:	90 90 08 2b 	lds	r9, 0x2B08	; 0x802b08 <g_adc_vbat_cur+0x1>
    7400:	a0 90 09 2b 	lds	r10, 0x2B09	; 0x802b09 <g_adc_vbat_cur+0x2>
		uint32_t l_adc_io_adc4_cur	= g_adc_io_adc4_cur;
    7404:	b0 90 0a 2b 	lds	r11, 0x2B0A	; 0x802b0a <g_adc_vbat_cur+0x3>
    7408:	80 91 fd 2a 	lds	r24, 0x2AFD	; 0x802afd <g_adc_io_adc4_cur>
    740c:	90 91 fe 2a 	lds	r25, 0x2AFE	; 0x802afe <g_adc_io_adc4_cur+0x1>
    7410:	a0 91 ff 2a 	lds	r26, 0x2AFF	; 0x802aff <g_adc_io_adc4_cur+0x2>
    7414:	b0 91 00 2b 	lds	r27, 0x2B00	; 0x802b00 <g_adc_io_adc4_cur+0x3>
    7418:	89 8b       	std	Y+17, r24	; 0x11
		uint32_t l_adc_io_adc5_cur	= g_adc_io_adc5_cur;
    741a:	9a 8b       	std	Y+18, r25	; 0x12
    741c:	ab 8b       	std	Y+19, r26	; 0x13
    741e:	bc 8b       	std	Y+20, r27	; 0x14
    7420:	80 91 f3 2a 	lds	r24, 0x2AF3	; 0x802af3 <g_adc_io_adc5_cur>
    7424:	90 91 f4 2a 	lds	r25, 0x2AF4	; 0x802af4 <g_adc_io_adc5_cur+0x1>
    7428:	a0 91 f5 2a 	lds	r26, 0x2AF5	; 0x802af5 <g_adc_io_adc5_cur+0x2>
    742c:	b0 91 f6 2a 	lds	r27, 0x2AF6	; 0x802af6 <g_adc_io_adc5_cur+0x3>
    7430:	8d 8b       	std	Y+21, r24	; 0x15
		uint32_t l_adc_silence_cur	= g_adc_silence_cur;
    7432:	9e 8b       	std	Y+22, r25	; 0x16
    7434:	af 8b       	std	Y+23, r26	; 0x17
    7436:	b8 8f       	std	Y+24, r27	; 0x18
    7438:	80 91 e9 2a 	lds	r24, 0x2AE9	; 0x802ae9 <g_adc_silence_cur>
    743c:	90 91 ea 2a 	lds	r25, 0x2AEA	; 0x802aea <g_adc_silence_cur+0x1>
    7440:	a0 91 eb 2a 	lds	r26, 0x2AEB	; 0x802aeb <g_adc_silence_cur+0x2>
    7444:	b0 91 ec 2a 	lds	r27, 0x2AEC	; 0x802aec <g_adc_silence_cur+0x3>
    7448:	89 8f       	std	Y+25, r24	; 0x19
		uint32_t l_adc_temp_cur		= g_adc_temp_cur;
    744a:	9a 8f       	std	Y+26, r25	; 0x1a
    744c:	ab 8f       	std	Y+27, r26	; 0x1b
    744e:	bc 8f       	std	Y+28, r27	; 0x1c
    7450:	80 91 df 2a 	lds	r24, 0x2ADF	; 0x802adf <g_adc_temp_cur>
    7454:	90 91 e0 2a 	lds	r25, 0x2AE0	; 0x802ae0 <g_adc_temp_cur+0x1>
    7458:	a0 91 e1 2a 	lds	r26, 0x2AE1	; 0x802ae1 <g_adc_temp_cur+0x2>
    745c:	b0 91 e2 2a 	lds	r27, 0x2AE2	; 0x802ae2 <g_adc_temp_cur+0x3>
    7460:	8d 8f       	std	Y+29, r24	; 0x1d
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7462:	9e 8f       	std	Y+30, r25	; 0x1e

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7464:	af 8f       	std	Y+31, r26	; 0x1f
    7466:	b8 a3       	std	Y+32, r27	; 0x20
	cpu_irq_disable();
    7468:	6f bf       	out	0x3f, r22	; 63
	return flags;
    746a:	8f b7       	in	r24, 0x3f	; 63
    746c:	89 83       	std	Y+1, r24	; 0x01
		int16_t l_adc_io_adc5_volt_1000	= (int16_t) (((  1000UL * l_adc_io_adc5_cur * C_VCC_3V0_AREF_VOLTS                   ) / C_ADC_STEPS));
		int16_t l_adc_silence_volt_1000	= (int16_t) (((  1000UL * l_adc_silence_cur * C_VCC_3V0_AREF_VOLTS                   ) / C_ADC_STEPS));
		int16_t l_adc_temp_deg_100		= (int16_t) ((((  100UL * l_adc_temp_cur                           * C_TEMPSENSE_MULT) / C_ADC_STEPS))  -  100 * C_0DEGC_K);

		flags = cpu_irq_save();
		g_adc_vctcxo_volt_1000	= l_adc_vctcxo_volt_1000;
    746e:	f8 94       	cli
    7470:	99 81       	ldd	r25, Y+1	; 0x01
    7472:	99 a3       	std	Y+33, r25	; 0x21
    7474:	a8 eb       	ldi	r26, 0xB8	; 184
    7476:	bb e0       	ldi	r27, 0x0B	; 11
    7478:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <__muluhisi3>
    747c:	05 2e       	mov	r0, r21
    747e:	54 e1       	ldi	r21, 0x14	; 20
    7480:	96 95       	lsr	r25
    7482:	87 95       	ror	r24
    7484:	77 95       	ror	r23
    7486:	67 95       	ror	r22
    7488:	5a 95       	dec	r21
    748a:	d1 f7       	brne	.-12     	; 0x7480 <main+0x6e6>
    748c:	50 2d       	mov	r21, r0
    748e:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__floatunsisf>
    7492:	20 e0       	ldi	r18, 0x00	; 0
    7494:	30 e0       	ldi	r19, 0x00	; 0
    7496:	4c e3       	ldi	r20, 0x3C	; 60
    7498:	52 e4       	ldi	r21, 0x42	; 66
    749a:	0e 94 ff 45 	call	0x8bfe	; 0x8bfe <__subsf3>
    749e:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <__fixsfsi>
    74a2:	60 93 d7 2a 	sts	0x2AD7, r22	; 0x802ad7 <g_adc_vctcxo_volt_1000>
		g_adc_5v0_volt_1000		= l_adc_5v0_volt_1000;
    74a6:	70 93 d8 2a 	sts	0x2AD8, r23	; 0x802ad8 <g_adc_vctcxo_volt_1000+0x1>
    74aa:	a8 eb       	ldi	r26, 0xB8	; 184
    74ac:	bb e0       	ldi	r27, 0x0B	; 11
    74ae:	a3 01       	movw	r20, r6
    74b0:	92 01       	movw	r18, r4
    74b2:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <__muluhisi3>
    74b6:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__floatunsisf>
    74ba:	29 ed       	ldi	r18, 0xD9	; 217
    74bc:	38 ed       	ldi	r19, 0xD8	; 216
    74be:	4a e1       	ldi	r20, 0x1A	; 26
    74c0:	50 e4       	ldi	r21, 0x40	; 64
    74c2:	0e 94 8b 47 	call	0x8f16	; 0x8f16 <__mulsf3>
    74c6:	20 e0       	ldi	r18, 0x00	; 0
    74c8:	30 e0       	ldi	r19, 0x00	; 0
    74ca:	40 e8       	ldi	r20, 0x80	; 128
    74cc:	55 e3       	ldi	r21, 0x35	; 53
    74ce:	0e 94 8b 47 	call	0x8f16	; 0x8f16 <__mulsf3>
    74d2:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <__fixsfsi>
    74d6:	60 93 d5 2a 	sts	0x2AD5, r22	; 0x802ad5 <g_adc_5v0_volt_1000>
		g_adc_vbat_volt_1000	= l_adc_vbat_volt_1000;
    74da:	70 93 d6 2a 	sts	0x2AD6, r23	; 0x802ad6 <g_adc_5v0_volt_1000+0x1>
    74de:	a8 eb       	ldi	r26, 0xB8	; 184
    74e0:	bb e0       	ldi	r27, 0x0B	; 11
    74e2:	a5 01       	movw	r20, r10
    74e4:	94 01       	movw	r18, r8
    74e6:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <__muluhisi3>
    74ea:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__floatunsisf>
    74ee:	23 ee       	ldi	r18, 0xE3	; 227
    74f0:	35 e4       	ldi	r19, 0x45	; 69
    74f2:	4b e1       	ldi	r20, 0x1B	; 27
    74f4:	50 e4       	ldi	r21, 0x40	; 64
    74f6:	0e 94 8b 47 	call	0x8f16	; 0x8f16 <__mulsf3>
    74fa:	20 e0       	ldi	r18, 0x00	; 0
    74fc:	30 e0       	ldi	r19, 0x00	; 0
    74fe:	40 e8       	ldi	r20, 0x80	; 128
    7500:	55 e3       	ldi	r21, 0x35	; 53
    7502:	0e 94 8b 47 	call	0x8f16	; 0x8f16 <__mulsf3>
    7506:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <__fixsfsi>
    750a:	60 93 d3 2a 	sts	0x2AD3, r22	; 0x802ad3 <g_adc_vbat_volt_1000>
		g_adc_io_adc4_volt_1000	= l_adc_io_adc4_volt_1000;
    750e:	70 93 d4 2a 	sts	0x2AD4, r23	; 0x802ad4 <g_adc_vbat_volt_1000+0x1>
    7512:	a8 eb       	ldi	r26, 0xB8	; 184
    7514:	bb e0       	ldi	r27, 0x0B	; 11
    7516:	29 89       	ldd	r18, Y+17	; 0x11
    7518:	3a 89       	ldd	r19, Y+18	; 0x12
    751a:	4b 89       	ldd	r20, Y+19	; 0x13
    751c:	5c 89       	ldd	r21, Y+20	; 0x14
    751e:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <__muluhisi3>
    7522:	dc 01       	movw	r26, r24
    7524:	cb 01       	movw	r24, r22
    7526:	07 2e       	mov	r0, r23
    7528:	74 e1       	ldi	r23, 0x14	; 20
    752a:	b6 95       	lsr	r27
    752c:	a7 95       	ror	r26
    752e:	97 95       	ror	r25
    7530:	87 95       	ror	r24
    7532:	7a 95       	dec	r23
    7534:	d1 f7       	brne	.-12     	; 0x752a <main+0x790>
    7536:	70 2d       	mov	r23, r0
    7538:	80 93 d1 2a 	sts	0x2AD1, r24	; 0x802ad1 <g_adc_io_adc4_volt_1000>
		g_adc_io_adc5_volt_1000	= l_adc_io_adc5_volt_1000;
    753c:	90 93 d2 2a 	sts	0x2AD2, r25	; 0x802ad2 <g_adc_io_adc4_volt_1000+0x1>
    7540:	a8 eb       	ldi	r26, 0xB8	; 184
    7542:	bb e0       	ldi	r27, 0x0B	; 11
    7544:	2d 89       	ldd	r18, Y+21	; 0x15
    7546:	3e 89       	ldd	r19, Y+22	; 0x16
    7548:	4f 89       	ldd	r20, Y+23	; 0x17
    754a:	58 8d       	ldd	r21, Y+24	; 0x18
    754c:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <__muluhisi3>
    7550:	dc 01       	movw	r26, r24
    7552:	cb 01       	movw	r24, r22
    7554:	07 2e       	mov	r0, r23
    7556:	74 e1       	ldi	r23, 0x14	; 20
    7558:	b6 95       	lsr	r27
    755a:	a7 95       	ror	r26
    755c:	97 95       	ror	r25
    755e:	87 95       	ror	r24
    7560:	7a 95       	dec	r23
    7562:	d1 f7       	brne	.-12     	; 0x7558 <main+0x7be>
    7564:	70 2d       	mov	r23, r0
    7566:	80 93 cf 2a 	sts	0x2ACF, r24	; 0x802acf <g_adc_io_adc5_volt_1000>
		g_adc_silence_volt_1000	= l_adc_silence_volt_1000;
    756a:	90 93 d0 2a 	sts	0x2AD0, r25	; 0x802ad0 <g_adc_io_adc5_volt_1000+0x1>
    756e:	a8 eb       	ldi	r26, 0xB8	; 184
    7570:	bb e0       	ldi	r27, 0x0B	; 11
    7572:	29 8d       	ldd	r18, Y+25	; 0x19
    7574:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7576:	4b 8d       	ldd	r20, Y+27	; 0x1b
    7578:	5c 8d       	ldd	r21, Y+28	; 0x1c
    757a:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <__muluhisi3>
    757e:	dc 01       	movw	r26, r24
    7580:	cb 01       	movw	r24, r22
    7582:	07 2e       	mov	r0, r23
    7584:	74 e1       	ldi	r23, 0x14	; 20
    7586:	b6 95       	lsr	r27
    7588:	a7 95       	ror	r26
    758a:	97 95       	ror	r25
    758c:	87 95       	ror	r24
    758e:	7a 95       	dec	r23
    7590:	d1 f7       	brne	.-12     	; 0x7586 <main+0x7ec>
    7592:	70 2d       	mov	r23, r0
    7594:	80 93 cd 2a 	sts	0x2ACD, r24	; 0x802acd <g_adc_silence_volt_1000>
		g_adc_temp_deg_100		= l_adc_temp_deg_100;
    7598:	90 93 ce 2a 	sts	0x2ACE, r25	; 0x802ace <g_adc_silence_volt_1000+0x1>
    759c:	a4 e6       	ldi	r26, 0x64	; 100
    759e:	b0 e0       	ldi	r27, 0x00	; 0
    75a0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    75a2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    75a4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    75a6:	58 a1       	ldd	r21, Y+32	; 0x20
    75a8:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <__muluhisi3>
    75ac:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__floatunsisf>
    75b0:	2d ec       	ldi	r18, 0xCD	; 205
    75b2:	3c e4       	ldi	r19, 0x4C	; 76
    75b4:	4d e1       	ldi	r20, 0x1D	; 29
    75b6:	54 e4       	ldi	r21, 0x44	; 68
    75b8:	0e 94 8b 47 	call	0x8f16	; 0x8f16 <__mulsf3>
    75bc:	20 e0       	ldi	r18, 0x00	; 0
    75be:	30 e0       	ldi	r19, 0x00	; 0
    75c0:	40 e8       	ldi	r20, 0x80	; 128
    75c2:	55 e3       	ldi	r21, 0x35	; 53
    75c4:	0e 94 8b 47 	call	0x8f16	; 0x8f16 <__mulsf3>
    75c8:	20 e0       	ldi	r18, 0x00	; 0
    75ca:	36 e6       	ldi	r19, 0x66	; 102
    75cc:	45 ed       	ldi	r20, 0xD5	; 213
    75ce:	56 e4       	ldi	r21, 0x46	; 70
    75d0:	0e 94 ff 45 	call	0x8bfe	; 0x8bfe <__subsf3>
    75d4:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <__fixsfsi>
    75d8:	60 93 cb 2a 	sts	0x2ACB, r22	; 0x802acb <g_adc_temp_deg_100>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    75dc:	70 93 cc 2a 	sts	0x2ACC, r23	; 0x802acc <g_adc_temp_deg_100+0x1>

static void task_twi(uint32_t now)
{	/* Calculations for the presentation layer and display */

	/* TWI1 - SIM808, Hygro, Gyro, Baro devices */
	task_twi1_onboard(now);
    75e0:	a9 a1       	ldd	r26, Y+33	; 0x21
    75e2:	af bf       	out	0x3f, r26	; 63
    75e4:	c7 01       	movw	r24, r14

	/* TWI2 - LCD Port */
	task_twi2_lcd(now);
    75e6:	b6 01       	movw	r22, r12
    75e8:	0e 94 a6 18 	call	0x314c	; 0x314c <task_twi1_onboard>
    75ec:	c7 01       	movw	r24, r14
}

static void task_usb(uint32_t now)
{
	if (usb_cdc_transfers_autorized) {
    75ee:	b6 01       	movw	r22, r12
    75f0:	0e 94 43 1b 	call	0x3686	; 0x3686 <task_twi2_lcd>
    75f4:	80 91 76 2b 	lds	r24, 0x2B76	; 0x802b76 <usb_cdc_transfers_autorized>
		// stdio_usb_init();
		// stdio_usb_enable();
#endif

		/* Monitoring at the USB serial terminal */
		if (((now - usb_last) >= 512) || (now < usb_last)) {
    75f8:	88 23       	and	r24, r24
    75fa:	09 f4       	brne	.+2      	; 0x75fe <main+0x864>
    75fc:	d0 c0       	rjmp	.+416    	; 0x779e <main+0xa04>
    75fe:	80 91 7d 28 	lds	r24, 0x287D	; 0x80287d <usb_last.7521>
    7602:	90 91 7e 28 	lds	r25, 0x287E	; 0x80287e <usb_last.7521+0x1>
    7606:	a0 91 7f 28 	lds	r26, 0x287F	; 0x80287f <usb_last.7521+0x2>
    760a:	b0 91 80 28 	lds	r27, 0x2880	; 0x802880 <usb_last.7521+0x3>
    760e:	b7 01       	movw	r22, r14
    7610:	a6 01       	movw	r20, r12
    7612:	48 1b       	sub	r20, r24
    7614:	59 0b       	sbc	r21, r25
    7616:	6a 0b       	sbc	r22, r26
    7618:	7b 0b       	sbc	r23, r27
    761a:	41 15       	cp	r20, r1
    761c:	52 40       	sbci	r21, 0x02	; 2
    761e:	61 05       	cpc	r22, r1
    7620:	71 05       	cpc	r23, r1
    7622:	30 f4       	brcc	.+12     	; 0x7630 <main+0x896>
    7624:	c8 16       	cp	r12, r24
    7626:	d9 06       	cpc	r13, r25
    7628:	ea 06       	cpc	r14, r26
			usb_last = now;
    762a:	fb 06       	cpc	r15, r27
    762c:	08 f0       	brcs	.+2      	; 0x7630 <main+0x896>
    762e:	b7 c0       	rjmp	.+366    	; 0x779e <main+0xa04>
    7630:	c0 92 7d 28 	sts	0x287D, r12	; 0x80287d <usb_last.7521>
    7634:	d0 92 7e 28 	sts	0x287E, r13	; 0x80287e <usb_last.7521+0x1>
    7638:	e0 92 7f 28 	sts	0x287F, r14	; 0x80287f <usb_last.7521+0x2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    763c:	f0 92 80 28 	sts	0x2880, r15	; 0x802880 <usb_last.7521+0x3>
	cpu_irq_disable();
	return flags;
    7640:	8f b7       	in	r24, 0x3f	; 63

			flags = cpu_irq_save();
			int16_t l_adc_vctcxo_volt_1000	= g_adc_vctcxo_volt_1000;
    7642:	89 87       	std	Y+9, r24	; 0x09
    7644:	f8 94       	cli
    7646:	49 85       	ldd	r20, Y+9	; 0x09
    7648:	f0 91 d7 2a 	lds	r31, 0x2AD7	; 0x802ad7 <g_adc_vctcxo_volt_1000>
    764c:	fd 8b       	std	Y+21, r31	; 0x15
			int16_t l_adc_5v0_volt_1000		= g_adc_5v0_volt_1000;
    764e:	20 91 d8 2a 	lds	r18, 0x2AD8	; 0x802ad8 <g_adc_vctcxo_volt_1000+0x1>
    7652:	29 8f       	std	Y+25, r18	; 0x19
    7654:	80 91 d5 2a 	lds	r24, 0x2AD5	; 0x802ad5 <g_adc_5v0_volt_1000>
    7658:	8d 8f       	std	Y+29, r24	; 0x1d
			int16_t l_adc_vbat_volt_1000	= g_adc_vbat_volt_1000;
    765a:	90 91 d6 2a 	lds	r25, 0x2AD6	; 0x802ad6 <g_adc_5v0_volt_1000+0x1>
    765e:	99 a3       	std	Y+33, r25	; 0x21
    7660:	a0 91 d3 2a 	lds	r26, 0x2AD3	; 0x802ad3 <g_adc_vbat_volt_1000>
    7664:	aa a3       	std	Y+34, r26	; 0x22
			int16_t l_adc_io_adc4_volt_1000	= g_adc_io_adc4_volt_1000;
    7666:	b0 91 d4 2a 	lds	r27, 0x2AD4	; 0x802ad4 <g_adc_vbat_volt_1000+0x1>
    766a:	bb a3       	std	Y+35, r27	; 0x23
    766c:	e0 91 d1 2a 	lds	r30, 0x2AD1	; 0x802ad1 <g_adc_io_adc4_volt_1000>
    7670:	ec a3       	std	Y+36, r30	; 0x24
			int16_t l_adc_io_adc5_volt_1000	= g_adc_io_adc5_volt_1000;
    7672:	f0 91 d2 2a 	lds	r31, 0x2AD2	; 0x802ad2 <g_adc_io_adc4_volt_1000+0x1>
    7676:	fd a3       	std	Y+37, r31	; 0x25
    7678:	20 91 cf 2a 	lds	r18, 0x2ACF	; 0x802acf <g_adc_io_adc5_volt_1000>
    767c:	2e a3       	std	Y+38, r18	; 0x26
			int16_t l_adc_silence_volt_1000	= g_adc_silence_volt_1000;
    767e:	80 91 d0 2a 	lds	r24, 0x2AD0	; 0x802ad0 <g_adc_io_adc5_volt_1000+0x1>
    7682:	8f a3       	std	Y+39, r24	; 0x27
    7684:	90 91 cd 2a 	lds	r25, 0x2ACD	; 0x802acd <g_adc_silence_volt_1000>
    7688:	98 a7       	std	Y+40, r25	; 0x28
			int16_t l_adc_temp_deg_100		= g_adc_temp_deg_100;
    768a:	a0 91 ce 2a 	lds	r26, 0x2ACE	; 0x802ace <g_adc_silence_volt_1000+0x1>
    768e:	a9 a7       	std	Y+41, r26	; 0x29
    7690:	e0 91 cb 2a 	lds	r30, 0x2ACB	; 0x802acb <g_adc_temp_deg_100>
    7694:	f0 91 cc 2a 	lds	r31, 0x2ACC	; 0x802acc <g_adc_temp_deg_100+0x1>
			int32_t l_twi1_baro_temp_100	= g_twi1_baro_temp_100;
    7698:	e9 8b       	std	Y+17, r30	; 0x11
    769a:	fa 8b       	std	Y+18, r31	; 0x12
    769c:	80 90 50 2b 	lds	r8, 0x2B50	; 0x802b50 <g_twi1_baro_temp_100>
    76a0:	90 90 51 2b 	lds	r9, 0x2B51	; 0x802b51 <g_twi1_baro_temp_100+0x1>
    76a4:	a0 90 52 2b 	lds	r10, 0x2B52	; 0x802b52 <g_twi1_baro_temp_100+0x2>
			int32_t l_twi1_baro_p_100		= g_twi1_baro_p_100;
    76a8:	b0 90 53 2b 	lds	r11, 0x2B53	; 0x802b53 <g_twi1_baro_temp_100+0x3>
    76ac:	40 90 4c 2b 	lds	r4, 0x2B4C	; 0x802b4c <g_twi1_baro_p_100>
    76b0:	50 90 4d 2b 	lds	r5, 0x2B4D	; 0x802b4d <g_twi1_baro_p_100+0x1>
    76b4:	60 90 4e 2b 	lds	r6, 0x2B4E	; 0x802b4e <g_twi1_baro_p_100+0x2>
			int16_t l_twi1_hygro_T_100		= g_twi1_hygro_T_100;
    76b8:	70 90 4f 2b 	lds	r7, 0x2B4F	; 0x802b4f <g_twi1_baro_p_100+0x3>
    76bc:	20 91 44 2b 	lds	r18, 0x2B44	; 0x802b44 <g_twi1_hygro_T_100>
			int16_t l_twi1_hygro_RH_100		= g_twi1_hygro_RH_100;
    76c0:	30 91 45 2b 	lds	r19, 0x2B45	; 0x802b45 <g_twi1_hygro_T_100+0x1>
    76c4:	80 91 42 2b 	lds	r24, 0x2B42	; 0x802b42 <g_twi1_hygro_RH_100>
			cpu_irq_restore(flags);

			printf("Time = %5ld: U_vctcxo=%4d mV, U_5v0=%4d mV, U_vbat=%4d mV, U_io_adc4=%4d mV, U_io_adc5=%4d mV, U_silence=%4d mV, mP_Temp=%02d.%02dC,\tBaro_Temp=%02ld.%02ld C, Baro_P=%4ld.%02ld hPa,\tHygro_Temp=%02d.%02d C, Hygro_RelH=%02d.%02d %%\r\n",
    76c8:	90 91 43 2b 	lds	r25, 0x2B43	; 0x802b43 <g_twi1_hygro_RH_100+0x1>
    76cc:	4f bf       	out	0x3f, r20	; 63
    76ce:	64 e6       	ldi	r22, 0x64	; 100
    76d0:	70 e0       	ldi	r23, 0x00	; 0
    76d2:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>
    76d6:	9f 93       	push	r25
    76d8:	8f 93       	push	r24
    76da:	7f 93       	push	r23
    76dc:	6f 93       	push	r22
    76de:	c9 01       	movw	r24, r18
    76e0:	64 e6       	ldi	r22, 0x64	; 100
    76e2:	70 e0       	ldi	r23, 0x00	; 0
    76e4:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>
    76e8:	9f 93       	push	r25
    76ea:	8f 93       	push	r24
    76ec:	7f 93       	push	r23
    76ee:	6f 93       	push	r22
    76f0:	c3 01       	movw	r24, r6
    76f2:	b2 01       	movw	r22, r4
    76f4:	24 e6       	ldi	r18, 0x64	; 100
    76f6:	30 e0       	ldi	r19, 0x00	; 0
    76f8:	40 e0       	ldi	r20, 0x00	; 0
    76fa:	50 e0       	ldi	r21, 0x00	; 0
    76fc:	0e 94 28 45 	call	0x8a50	; 0x8a50 <__divmodsi4>
    7700:	9f 93       	push	r25
    7702:	8f 93       	push	r24
    7704:	7f 93       	push	r23
    7706:	6f 93       	push	r22
    7708:	5f 93       	push	r21
    770a:	4f 93       	push	r20
    770c:	3f 93       	push	r19
    770e:	2f 93       	push	r18
    7710:	c5 01       	movw	r24, r10
    7712:	b4 01       	movw	r22, r8
    7714:	24 e6       	ldi	r18, 0x64	; 100
    7716:	30 e0       	ldi	r19, 0x00	; 0
    7718:	40 e0       	ldi	r20, 0x00	; 0
    771a:	50 e0       	ldi	r21, 0x00	; 0
    771c:	0e 94 28 45 	call	0x8a50	; 0x8a50 <__divmodsi4>
    7720:	9f 93       	push	r25
    7722:	8f 93       	push	r24
    7724:	7f 93       	push	r23
    7726:	6f 93       	push	r22
    7728:	5f 93       	push	r21
    772a:	4f 93       	push	r20
    772c:	3f 93       	push	r19
    772e:	2f 93       	push	r18
    7730:	89 89       	ldd	r24, Y+17	; 0x11
    7732:	9a 89       	ldd	r25, Y+18	; 0x12
    7734:	64 e6       	ldi	r22, 0x64	; 100
    7736:	70 e0       	ldi	r23, 0x00	; 0
    7738:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <__divmodhi4>
    773c:	9f 93       	push	r25
    773e:	8f 93       	push	r24
    7740:	7f 93       	push	r23
    7742:	6f 93       	push	r22
    7744:	f9 a5       	ldd	r31, Y+41	; 0x29
    7746:	ff 93       	push	r31
    7748:	28 a5       	ldd	r18, Y+40	; 0x28
    774a:	2f 93       	push	r18
    774c:	8f a1       	ldd	r24, Y+39	; 0x27
    774e:	8f 93       	push	r24
    7750:	9e a1       	ldd	r25, Y+38	; 0x26
    7752:	9f 93       	push	r25
    7754:	ad a1       	ldd	r26, Y+37	; 0x25
    7756:	af 93       	push	r26
    7758:	bc a1       	ldd	r27, Y+36	; 0x24
    775a:	bf 93       	push	r27
    775c:	eb a1       	ldd	r30, Y+35	; 0x23
    775e:	ef 93       	push	r30
    7760:	fa a1       	ldd	r31, Y+34	; 0x22
    7762:	ff 93       	push	r31
    7764:	29 a1       	ldd	r18, Y+33	; 0x21
    7766:	2f 93       	push	r18
    7768:	8d 8d       	ldd	r24, Y+29	; 0x1d
    776a:	8f 93       	push	r24
    776c:	99 8d       	ldd	r25, Y+25	; 0x19
    776e:	9f 93       	push	r25
    7770:	ad 89       	ldd	r26, Y+21	; 0x15
    7772:	af 93       	push	r26
    7774:	0b 2e       	mov	r0, r27
    7776:	ba e0       	ldi	r27, 0x0A	; 10
    7778:	f6 94       	lsr	r15
    777a:	e7 94       	ror	r14
    777c:	d7 94       	ror	r13
    777e:	c7 94       	ror	r12
    7780:	ba 95       	dec	r27
    7782:	d1 f7       	brne	.-12     	; 0x7778 <main+0x9de>
    7784:	b0 2d       	mov	r27, r0
    7786:	ff 92       	push	r15
    7788:	ef 92       	push	r14
    778a:	df 92       	push	r13
    778c:	cf 92       	push	r12
    778e:	e3 e0       	ldi	r30, 0x03	; 3
    7790:	f6 e2       	ldi	r31, 0x26	; 38
    7792:	ff 93       	push	r31
    7794:	ef 93       	push	r30
    7796:	0e 94 41 48 	call	0x9082	; 0x9082 <printf>
    779a:	cd bf       	out	0x3d, r28	; 61
    779c:	de bf       	out	0x3e, r29	; 62
    779e:	f8 94       	cli
    77a0:	d8 01       	movw	r26, r16
    77a2:	8c 91       	ld	r24, X
    77a4:	81 11       	cpse	r24, r1
    77a6:	09 c0       	rjmp	.+18     	; 0x77ba <main+0xa20>
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    77a8:	a0 ed       	ldi	r26, 0xD0	; 208

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    77aa:	bc e2       	ldi	r27, 0x2C	; 44
    77ac:	e0 e0       	ldi	r30, 0x00	; 0
    77ae:	ef 5f       	subi	r30, 0xFF	; 255
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    77b0:	8d 91       	ld	r24, X+
    77b2:	88 23       	and	r24, r24
		cpu_irq_enable();
    77b4:	e1 f3       	breq	.-8      	; 0x77ae <main+0xa14>
    77b6:	e1 11       	cpse	r30, r1
    77b8:	02 c0       	rjmp	.+4      	; 0x77be <main+0xa24>
    77ba:	78 94       	sei

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    77bc:	12 c0       	rjmp	.+36     	; 0x77e2 <main+0xa48>
    77be:	d1 01       	movw	r26, r2
    77c0:	8c 91       	ld	r24, X
    77c2:	f0 e0       	ldi	r31, 0x00	; 0
    77c4:	ee 5c       	subi	r30, 0xCE	; 206
    77c6:	ff 4d       	sbci	r31, 0xDF	; 223
    77c8:	81 7f       	andi	r24, 0xF1	; 241
	sleep_enable();
    77ca:	90 81       	ld	r25, Z
    77cc:	89 2b       	or	r24, r25
    77ce:	8c 93       	st	X, r24

	cpu_irq_enable();
    77d0:	8c 91       	ld	r24, X
	sleep_enter();
    77d2:	81 60       	ori	r24, 0x01	; 1

	sleep_disable();
    77d4:	8c 93       	st	X, r24
    77d6:	78 94       	sei
    77d8:	88 95       	sleep
    77da:	f1 01       	movw	r30, r2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    77dc:	80 81       	ld	r24, Z
    77de:	8e 7f       	andi	r24, 0xFE	; 254
	cpu_irq_disable();
    77e0:	80 83       	st	Z, r24
	return flags;
    77e2:	8f b7       	in	r24, 0x3f	; 63
    while (l_workmode) {
		task();
		sleepmgr_enter_sleep();

		flags = cpu_irq_save();
		l_workmode = g_workmode;
    77e4:	8f 87       	std	Y+15, r24	; 0x0f
    77e6:	f8 94       	cli
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    77e8:	9f 85       	ldd	r25, Y+15	; 0x0f
	/* The application code */
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode = WORKMODE_RUN;
	cpu_irq_restore(flags);

    while (l_workmode) {
    77ea:	80 91 77 2b 	lds	r24, 0x2B77	; 0x802b77 <g_workmode>
		flags = cpu_irq_save();
		l_workmode = g_workmode;
		cpu_irq_restore(flags);
    }

	cpu_irq_disable();
    77ee:	9f bf       	out	0x3f, r25	; 63
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    77f0:	81 11       	cpse	r24, r1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    77f2:	be cd       	rjmp	.-1156   	; 0x7370 <main+0x5d6>
    77f4:	f8 94       	cli
    77f6:	f8 94       	cli
    77f8:	80 91 cf 2c 	lds	r24, 0x2CCF	; 0x802ccf <sleepmgr_locks>
    77fc:	81 11       	cpse	r24, r1
    77fe:	09 c0       	rjmp	.+18     	; 0x7812 <main+0xa78>
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    7800:	a0 ed       	ldi	r26, 0xD0	; 208

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    7802:	bc e2       	ldi	r27, 0x2C	; 44
    7804:	e0 e0       	ldi	r30, 0x00	; 0
    7806:	ef 5f       	subi	r30, 0xFF	; 255
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    7808:	8d 91       	ld	r24, X+
    780a:	88 23       	and	r24, r24
		cpu_irq_enable();
    780c:	e1 f3       	breq	.-8      	; 0x7806 <main+0xa6c>
    780e:	e1 11       	cpse	r30, r1
    7810:	02 c0       	rjmp	.+4      	; 0x7816 <main+0xa7c>
    7812:	78 94       	sei
    7814:	13 c0       	rjmp	.+38     	; 0x783c <main+0xaa2>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    7816:	a8 e4       	ldi	r26, 0x48	; 72
    7818:	b0 e0       	ldi	r27, 0x00	; 0
    781a:	8c 91       	ld	r24, X
    781c:	f0 e0       	ldi	r31, 0x00	; 0
    781e:	ee 5c       	subi	r30, 0xCE	; 206
    7820:	ff 4d       	sbci	r31, 0xDF	; 223
    7822:	98 2f       	mov	r25, r24
    7824:	91 7f       	andi	r25, 0xF1	; 241
	sleep_enable();
    7826:	80 81       	ld	r24, Z
    7828:	89 2b       	or	r24, r25
    782a:	8c 93       	st	X, r24

	cpu_irq_enable();
    782c:	8c 91       	ld	r24, X
	sleep_enter();
    782e:	81 60       	ori	r24, 0x01	; 1

	sleep_disable();
    7830:	8c 93       	st	X, r24
    7832:	78 94       	sei
    7834:	88 95       	sleep
	sleepmgr_enter_sleep();

	return retcode;
}
    7836:	8c 91       	ld	r24, X
    7838:	8e 7f       	andi	r24, 0xFE	; 254
    783a:	8c 93       	st	X, r24
    783c:	80 e0       	ldi	r24, 0x00	; 0
    783e:	90 e0       	ldi	r25, 0x00	; 0
    7840:	a9 96       	adiw	r28, 0x29	; 41
    7842:	cd bf       	out	0x3d, r28	; 61
    7844:	de bf       	out	0x3e, r29	; 62
    7846:	df 91       	pop	r29
    7848:	cf 91       	pop	r28
    784a:	1f 91       	pop	r17
    784c:	0f 91       	pop	r16
    784e:	ff 90       	pop	r15
    7850:	ef 90       	pop	r14
    7852:	df 90       	pop	r13
    7854:	cf 90       	pop	r12
    7856:	bf 90       	pop	r11
    7858:	af 90       	pop	r10
    785a:	9f 90       	pop	r9
    785c:	8f 90       	pop	r8
    785e:	7f 90       	pop	r7
    7860:	6f 90       	pop	r6
    7862:	5f 90       	pop	r5
    7864:	4f 90       	pop	r4
    7866:	3f 90       	pop	r3
    7868:	2f 90       	pop	r2
    786a:	08 95       	ret

0000786c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    786c:	cf 93       	push	r28
    786e:	df 93       	push	r29
    7870:	cd b7       	in	r28, 0x3d	; 61
    7872:	de b7       	in	r29, 0x3e	; 62
    7874:	28 97       	sbiw	r28, 0x08	; 8
    7876:	cd bf       	out	0x3d, r28	; 61
    7878:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    787a:	8f ef       	ldi	r24, 0xFF	; 255
    787c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    7880:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    7884:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    7888:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    788c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    7890:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    7894:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    7898:	61 e0       	ldi	r22, 0x01	; 1
    789a:	81 e4       	ldi	r24, 0x41	; 65
    789c:	90 e0       	ldi	r25, 0x00	; 0
    789e:	0e 94 ca 44 	call	0x8994	; 0x8994 <ccp_write_io>
    78a2:	6c e1       	ldi	r22, 0x1C	; 28
    78a4:	70 e0       	ldi	r23, 0x00	; 0
    78a6:	82 e0       	ldi	r24, 0x02	; 2
    78a8:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    78ac:	8a 83       	std	Y+2, r24	; 0x02
    78ae:	6d e1       	ldi	r22, 0x1D	; 29
    78b0:	70 e0       	ldi	r23, 0x00	; 0
    78b2:	82 e0       	ldi	r24, 0x02	; 2
    78b4:	0e 94 c0 44 	call	0x8980	; 0x8980 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    78b8:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    78ba:	89 81       	ldd	r24, Y+1	; 0x01
    78bc:	9a 81       	ldd	r25, Y+2	; 0x02
    78be:	01 96       	adiw	r24, 0x01	; 1
    78c0:	21 f4       	brne	.+8      	; 0x78ca <sysclk_init+0x5e>
		cal = 0x2340;
    78c2:	80 e4       	ldi	r24, 0x40	; 64
    78c4:	93 e2       	ldi	r25, 0x23	; 35
    78c6:	89 83       	std	Y+1, r24	; 0x01
    78c8:	9a 83       	std	Y+2, r25	; 0x02
    78ca:	89 81       	ldd	r24, Y+1	; 0x01
    78cc:	9a 81       	ldd	r25, Y+2	; 0x02
    78ce:	8b 83       	std	Y+3, r24	; 0x03
    78d0:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    78d2:	e0 e6       	ldi	r30, 0x60	; 96
    78d4:	f0 e0       	ldi	r31, 0x00	; 0
    78d6:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    78d8:	8c 81       	ldd	r24, Y+4	; 0x04
    78da:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    78dc:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    78e0:	84 fd       	sbrc	r24, 4
    78e2:	21 c0       	rjmp	.+66     	; 0x7926 <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    78e4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    78e8:	83 fd       	sbrc	r24, 3
    78ea:	0e c0       	rjmp	.+28     	; 0x7908 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    78ec:	e0 e5       	ldi	r30, 0x50	; 80
    78ee:	f0 e0       	ldi	r31, 0x00	; 0
    78f0:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    78f2:	8f b7       	in	r24, 0x3f	; 63
    78f4:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    78f6:	f8 94       	cli
	return flags;
    78f8:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    78fa:	80 81       	ld	r24, Z
    78fc:	88 60       	ori	r24, 0x08	; 8
    78fe:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7900:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    7902:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    7904:	83 ff       	sbrs	r24, 3
    7906:	fd cf       	rjmp	.-6      	; 0x7902 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7908:	8f b7       	in	r24, 0x3f	; 63
    790a:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    790c:	f8 94       	cli
	return flags;
    790e:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    7910:	e0 e5       	ldi	r30, 0x50	; 80
    7912:	f0 e0       	ldi	r31, 0x00	; 0
    7914:	83 ec       	ldi	r24, 0xC3	; 195
    7916:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    7918:	80 81       	ld	r24, Z
    791a:	80 61       	ori	r24, 0x10	; 16
    791c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    791e:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    7920:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    7922:	84 ff       	sbrs	r24, 4
    7924:	fd cf       	rjmp	.-6      	; 0x7920 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    7926:	64 e0       	ldi	r22, 0x04	; 4
    7928:	80 e4       	ldi	r24, 0x40	; 64
    792a:	90 e0       	ldi	r25, 0x00	; 0
    792c:	0e 94 ca 44 	call	0x8994	; 0x8994 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7930:	8f b7       	in	r24, 0x3f	; 63
    7932:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    7934:	f8 94       	cli
	return flags;
    7936:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    7938:	e0 e5       	ldi	r30, 0x50	; 80
    793a:	f0 e0       	ldi	r31, 0x00	; 0
    793c:	80 81       	ld	r24, Z
    793e:	8e 7f       	andi	r24, 0xFE	; 254
    7940:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7942:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    7944:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7946:	8f b7       	in	r24, 0x3f	; 63
    7948:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    794a:	f8 94       	cli
	return flags;
    794c:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    794e:	80 81       	ld	r24, Z
    7950:	88 60       	ori	r24, 0x08	; 8
    7952:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7954:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    7956:	81 81       	ldd	r24, Z+1	; 0x01
    7958:	83 ff       	sbrs	r24, 3
    795a:	fd cf       	rjmp	.-6      	; 0x7956 <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    795c:	8b e0       	ldi	r24, 0x0B	; 11
    795e:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    7962:	28 96       	adiw	r28, 0x08	; 8
    7964:	cd bf       	out	0x3d, r28	; 61
    7966:	de bf       	out	0x3e, r29	; 62
    7968:	df 91       	pop	r29
    796a:	cf 91       	pop	r28
    796c:	08 95       	ret

0000796e <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    796e:	cf 93       	push	r28
    7970:	df 93       	push	r29
    7972:	1f 92       	push	r1
    7974:	cd b7       	in	r28, 0x3d	; 61
    7976:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7978:	9f b7       	in	r25, 0x3f	; 63
    797a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    797c:	f8 94       	cli
	return flags;
    797e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    7980:	e8 2f       	mov	r30, r24
    7982:	f0 e0       	ldi	r31, 0x00	; 0
    7984:	e0 59       	subi	r30, 0x90	; 144
    7986:	ff 4f       	sbci	r31, 0xFF	; 255
    7988:	60 95       	com	r22
    798a:	80 81       	ld	r24, Z
    798c:	68 23       	and	r22, r24
    798e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7990:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    7992:	0f 90       	pop	r0
    7994:	df 91       	pop	r29
    7996:	cf 91       	pop	r28
    7998:	08 95       	ret

0000799a <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    799a:	cf 93       	push	r28
    799c:	df 93       	push	r29
    799e:	1f 92       	push	r1
    79a0:	cd b7       	in	r28, 0x3d	; 61
    79a2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    79a4:	9f b7       	in	r25, 0x3f	; 63
    79a6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    79a8:	f8 94       	cli
	return flags;
    79aa:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    79ac:	e8 2f       	mov	r30, r24
    79ae:	f0 e0       	ldi	r31, 0x00	; 0
    79b0:	e0 59       	subi	r30, 0x90	; 144
    79b2:	ff 4f       	sbci	r31, 0xFF	; 255
    79b4:	80 81       	ld	r24, Z
    79b6:	68 2b       	or	r22, r24
    79b8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    79ba:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    79bc:	0f 90       	pop	r0
    79be:	df 91       	pop	r29
    79c0:	cf 91       	pop	r28
    79c2:	08 95       	ret

000079c4 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    79c4:	cf 93       	push	r28
    79c6:	df 93       	push	r29
    79c8:	1f 92       	push	r1
    79ca:	1f 92       	push	r1
    79cc:	cd b7       	in	r28, 0x3d	; 61
    79ce:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    79d0:	86 30       	cpi	r24, 0x06	; 6
    79d2:	11 f0       	breq	.+4      	; 0x79d8 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    79d4:	60 e0       	ldi	r22, 0x00	; 0
    79d6:	01 c0       	rjmp	.+2      	; 0x79da <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    79d8:	68 e1       	ldi	r22, 0x18	; 24
    79da:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    79de:	81 fd       	sbrc	r24, 1
    79e0:	2a c0       	rjmp	.+84     	; 0x7a36 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    79e2:	8f b7       	in	r24, 0x3f	; 63
    79e4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    79e6:	f8 94       	cli
	return flags;
    79e8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    79ea:	e0 e5       	ldi	r30, 0x50	; 80
    79ec:	f0 e0       	ldi	r31, 0x00	; 0
    79ee:	80 81       	ld	r24, Z
    79f0:	82 60       	ori	r24, 0x02	; 2
    79f2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    79f4:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    79f6:	81 81       	ldd	r24, Z+1	; 0x01
    79f8:	81 ff       	sbrs	r24, 1
    79fa:	fd cf       	rjmp	.-6      	; 0x79f6 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    79fc:	8f b7       	in	r24, 0x3f	; 63
    79fe:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    7a00:	f8 94       	cli
	return flags;
    7a02:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    7a04:	a0 e5       	ldi	r26, 0x50	; 80
    7a06:	b0 e0       	ldi	r27, 0x00	; 0
    7a08:	16 96       	adiw	r26, 0x06	; 6
    7a0a:	8c 91       	ld	r24, X
    7a0c:	16 97       	sbiw	r26, 0x06	; 6
    7a0e:	89 7f       	andi	r24, 0xF9	; 249
    7a10:	16 96       	adiw	r26, 0x06	; 6
    7a12:	8c 93       	st	X, r24
    7a14:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    7a16:	e0 e6       	ldi	r30, 0x60	; 96
    7a18:	f0 e0       	ldi	r31, 0x00	; 0
    7a1a:	80 e8       	ldi	r24, 0x80	; 128
    7a1c:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    7a1e:	8b eb       	ldi	r24, 0xBB	; 187
    7a20:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    7a22:	16 96       	adiw	r26, 0x06	; 6
    7a24:	8c 91       	ld	r24, X
    7a26:	16 97       	sbiw	r26, 0x06	; 6
    7a28:	84 60       	ori	r24, 0x04	; 4
    7a2a:	16 96       	adiw	r26, 0x06	; 6
    7a2c:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    7a2e:	80 81       	ld	r24, Z
    7a30:	81 60       	ori	r24, 0x01	; 1
    7a32:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7a34:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    7a36:	63 60       	ori	r22, 0x03	; 3
    7a38:	84 e4       	ldi	r24, 0x44	; 68
    7a3a:	90 e0       	ldi	r25, 0x00	; 0
    7a3c:	ab d7       	rcall	.+3926   	; 0x8994 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    7a3e:	60 e4       	ldi	r22, 0x40	; 64
    7a40:	80 e0       	ldi	r24, 0x00	; 0
    7a42:	95 df       	rcall	.-214    	; 0x796e <sysclk_enable_module>
}
    7a44:	0f 90       	pop	r0
    7a46:	0f 90       	pop	r0
    7a48:	df 91       	pop	r29
    7a4a:	cf 91       	pop	r28
    7a4c:	08 95       	ret

00007a4e <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    7a4e:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <udi_cdc_nb_comm_enabled>
    7a52:	81 50       	subi	r24, 0x01	; 1
    7a54:	80 93 8e 2c 	sts	0x2C8E, r24	; 0x802c8e <udi_cdc_nb_comm_enabled>
    7a58:	08 95       	ret

00007a5a <udi_cdc_data_setup>:
    7a5a:	80 e0       	ldi	r24, 0x00	; 0
    7a5c:	08 95       	ret

00007a5e <udi_cdc_getsetting>:
    7a5e:	80 e0       	ldi	r24, 0x00	; 0
    7a60:	08 95       	ret

00007a62 <udi_cdc_line_coding_received>:
    7a62:	6c e9       	ldi	r22, 0x9C	; 156
    7a64:	7c e2       	ldi	r23, 0x2C	; 44
    7a66:	80 e0       	ldi	r24, 0x00	; 0
    7a68:	93 c9       	rjmp	.-3290   	; 0x6d90 <usb_callback_config>
    7a6a:	08 95       	ret

00007a6c <udi_cdc_comm_enable>:
    7a6c:	10 92 8e 2c 	sts	0x2C8E, r1	; 0x802c8e <udi_cdc_nb_comm_enabled>
    7a70:	10 92 9a 2c 	sts	0x2C9A, r1	; 0x802c9a <udi_cdc_state>
    7a74:	10 92 9b 2c 	sts	0x2C9B, r1	; 0x802c9b <udi_cdc_state+0x1>
    7a78:	e0 e9       	ldi	r30, 0x90	; 144
    7a7a:	fc e2       	ldi	r31, 0x2C	; 44
    7a7c:	81 ea       	ldi	r24, 0xA1	; 161
    7a7e:	80 83       	st	Z, r24
    7a80:	80 e2       	ldi	r24, 0x20	; 32
    7a82:	81 83       	std	Z+1, r24	; 0x01
    7a84:	12 82       	std	Z+2, r1	; 0x02
    7a86:	13 82       	std	Z+3, r1	; 0x03
    7a88:	14 82       	std	Z+4, r1	; 0x04
    7a8a:	15 82       	std	Z+5, r1	; 0x05
    7a8c:	82 e0       	ldi	r24, 0x02	; 2
    7a8e:	90 e0       	ldi	r25, 0x00	; 0
    7a90:	86 83       	std	Z+6, r24	; 0x06
    7a92:	97 83       	std	Z+7, r25	; 0x07
    7a94:	10 86       	std	Z+8, r1	; 0x08
    7a96:	11 86       	std	Z+9, r1	; 0x09
    7a98:	ec e9       	ldi	r30, 0x9C	; 156
    7a9a:	fc e2       	ldi	r31, 0x2C	; 44
    7a9c:	80 e0       	ldi	r24, 0x00	; 0
    7a9e:	92 ec       	ldi	r25, 0xC2	; 194
    7aa0:	a1 e0       	ldi	r26, 0x01	; 1
    7aa2:	b0 e0       	ldi	r27, 0x00	; 0
    7aa4:	80 83       	st	Z, r24
    7aa6:	91 83       	std	Z+1, r25	; 0x01
    7aa8:	a2 83       	std	Z+2, r26	; 0x02
    7aaa:	b3 83       	std	Z+3, r27	; 0x03
    7aac:	14 82       	std	Z+4, r1	; 0x04
    7aae:	15 82       	std	Z+5, r1	; 0x05
    7ab0:	88 e0       	ldi	r24, 0x08	; 8
    7ab2:	86 83       	std	Z+6, r24	; 0x06
    7ab4:	bf 01       	movw	r22, r30
    7ab6:	80 e0       	ldi	r24, 0x00	; 0
    7ab8:	6b d9       	rcall	.-3370   	; 0x6d90 <usb_callback_config>
    7aba:	63 d9       	rcall	.-3386   	; 0x6d82 <usb_callback_cdc_enable>
    7abc:	88 23       	and	r24, r24
    7abe:	29 f0       	breq	.+10     	; 0x7aca <udi_cdc_comm_enable+0x5e>
    7ac0:	90 91 8e 2c 	lds	r25, 0x2C8E	; 0x802c8e <udi_cdc_nb_comm_enabled>
    7ac4:	9f 5f       	subi	r25, 0xFF	; 255
    7ac6:	90 93 8e 2c 	sts	0x2C8E, r25	; 0x802c8e <udi_cdc_nb_comm_enabled>
    7aca:	08 95       	ret

00007acc <udi_cdc_tx_send>:
    7acc:	ff 92       	push	r15
    7ace:	0f 93       	push	r16
    7ad0:	1f 93       	push	r17
    7ad2:	cf 93       	push	r28
    7ad4:	df 93       	push	r29
    7ad6:	1f 92       	push	r1
    7ad8:	cd b7       	in	r28, 0x3d	; 61
    7ada:	de b7       	in	r29, 0x3e	; 62
    7adc:	80 91 7b 2b 	lds	r24, 0x2B7B	; 0x802b7b <udi_cdc_tx_trans_ongoing>
    7ae0:	81 11       	cpse	r24, r1
    7ae2:	9f c0       	rjmp	.+318    	; 0x7c22 <udi_cdc_tx_send+0x156>
    7ae4:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <udd_is_high_speed>
    7ae8:	88 23       	and	r24, r24
    7aea:	51 f0       	breq	.+20     	; 0x7b00 <udi_cdc_tx_send+0x34>
    7aec:	00 91 7c 2b 	lds	r16, 0x2B7C	; 0x802b7c <udi_cdc_tx_sof_num>
    7af0:	10 91 7d 2b 	lds	r17, 0x2B7D	; 0x802b7d <udi_cdc_tx_sof_num+0x1>
    7af4:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <udd_get_micro_frame_number>
    7af8:	08 17       	cp	r16, r24
    7afa:	19 07       	cpc	r17, r25
    7afc:	59 f4       	brne	.+22     	; 0x7b14 <udi_cdc_tx_send+0x48>
    7afe:	91 c0       	rjmp	.+290    	; 0x7c22 <udi_cdc_tx_send+0x156>
    7b00:	00 91 7c 2b 	lds	r16, 0x2B7C	; 0x802b7c <udi_cdc_tx_sof_num>
    7b04:	10 91 7d 2b 	lds	r17, 0x2B7D	; 0x802b7d <udi_cdc_tx_sof_num+0x1>
    7b08:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <udd_get_frame_number>
    7b0c:	08 17       	cp	r16, r24
    7b0e:	19 07       	cpc	r17, r25
    7b10:	09 f4       	brne	.+2      	; 0x7b14 <udi_cdc_tx_send+0x48>
    7b12:	87 c0       	rjmp	.+270    	; 0x7c22 <udi_cdc_tx_send+0x156>
    7b14:	8f b7       	in	r24, 0x3f	; 63
    7b16:	89 83       	std	Y+1, r24	; 0x01
    7b18:	f8 94       	cli
    7b1a:	19 81       	ldd	r17, Y+1	; 0x01
    7b1c:	00 91 7e 2b 	lds	r16, 0x2B7E	; 0x802b7e <udi_cdc_tx_buf_sel>
    7b20:	e0 2f       	mov	r30, r16
    7b22:	f0 e0       	ldi	r31, 0x00	; 0
    7b24:	ee 0f       	add	r30, r30
    7b26:	ff 1f       	adc	r31, r31
    7b28:	e1 58       	subi	r30, 0x81	; 129
    7b2a:	f4 4d       	sbci	r31, 0xD4	; 212
    7b2c:	80 81       	ld	r24, Z
    7b2e:	91 81       	ldd	r25, Z+1	; 0x01
    7b30:	89 2b       	or	r24, r25
    7b32:	09 f5       	brne	.+66     	; 0x7b76 <udi_cdc_tx_send+0xaa>
    7b34:	80 91 78 2b 	lds	r24, 0x2B78	; 0x802b78 <sof_zlp_counter.5059>
    7b38:	90 91 79 2b 	lds	r25, 0x2B79	; 0x802b79 <sof_zlp_counter.5059+0x1>
    7b3c:	01 96       	adiw	r24, 0x01	; 1
    7b3e:	80 93 78 2b 	sts	0x2B78, r24	; 0x802b78 <sof_zlp_counter.5059>
    7b42:	90 93 79 2b 	sts	0x2B79, r25	; 0x802b79 <sof_zlp_counter.5059+0x1>
    7b46:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <udd_is_high_speed>
    7b4a:	81 11       	cpse	r24, r1
    7b4c:	07 c0       	rjmp	.+14     	; 0x7b5c <udi_cdc_tx_send+0x90>
    7b4e:	80 91 78 2b 	lds	r24, 0x2B78	; 0x802b78 <sof_zlp_counter.5059>
    7b52:	90 91 79 2b 	lds	r25, 0x2B79	; 0x802b79 <sof_zlp_counter.5059+0x1>
    7b56:	84 36       	cpi	r24, 0x64	; 100
    7b58:	91 05       	cpc	r25, r1
    7b5a:	58 f0       	brcs	.+22     	; 0x7b72 <udi_cdc_tx_send+0xa6>
    7b5c:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <udd_is_high_speed>
    7b60:	88 23       	and	r24, r24
    7b62:	49 f0       	breq	.+18     	; 0x7b76 <udi_cdc_tx_send+0xaa>
    7b64:	80 91 78 2b 	lds	r24, 0x2B78	; 0x802b78 <sof_zlp_counter.5059>
    7b68:	90 91 79 2b 	lds	r25, 0x2B79	; 0x802b79 <sof_zlp_counter.5059+0x1>
    7b6c:	80 32       	cpi	r24, 0x20	; 32
    7b6e:	93 40       	sbci	r25, 0x03	; 3
    7b70:	10 f4       	brcc	.+4      	; 0x7b76 <udi_cdc_tx_send+0xaa>
    7b72:	1f bf       	out	0x3f, r17	; 63
    7b74:	56 c0       	rjmp	.+172    	; 0x7c22 <udi_cdc_tx_send+0x156>
    7b76:	10 92 78 2b 	sts	0x2B78, r1	; 0x802b78 <sof_zlp_counter.5059>
    7b7a:	10 92 79 2b 	sts	0x2B79, r1	; 0x802b79 <sof_zlp_counter.5059+0x1>
    7b7e:	80 91 7a 2b 	lds	r24, 0x2B7A	; 0x802b7a <udi_cdc_tx_both_buf_to_send>
    7b82:	81 11       	cpse	r24, r1
    7b84:	06 c0       	rjmp	.+12     	; 0x7b92 <udi_cdc_tx_send+0xc6>
    7b86:	81 e0       	ldi	r24, 0x01	; 1
    7b88:	01 11       	cpse	r16, r1
    7b8a:	80 e0       	ldi	r24, 0x00	; 0
    7b8c:	80 93 7e 2b 	sts	0x2B7E, r24	; 0x802b7e <udi_cdc_tx_buf_sel>
    7b90:	04 c0       	rjmp	.+8      	; 0x7b9a <udi_cdc_tx_send+0xce>
    7b92:	81 e0       	ldi	r24, 0x01	; 1
    7b94:	01 11       	cpse	r16, r1
    7b96:	80 e0       	ldi	r24, 0x00	; 0
    7b98:	08 2f       	mov	r16, r24
    7b9a:	81 e0       	ldi	r24, 0x01	; 1
    7b9c:	80 93 7b 2b 	sts	0x2B7B, r24	; 0x802b7b <udi_cdc_tx_trans_ongoing>
    7ba0:	1f bf       	out	0x3f, r17	; 63
    7ba2:	10 e0       	ldi	r17, 0x00	; 0
    7ba4:	f8 01       	movw	r30, r16
    7ba6:	ee 0f       	add	r30, r30
    7ba8:	ff 1f       	adc	r31, r31
    7baa:	e1 58       	subi	r30, 0x81	; 129
    7bac:	f4 4d       	sbci	r31, 0xD4	; 212
    7bae:	80 81       	ld	r24, Z
    7bb0:	91 81       	ldd	r25, Z+1	; 0x01
    7bb2:	ff 24       	eor	r15, r15
    7bb4:	f3 94       	inc	r15
    7bb6:	80 34       	cpi	r24, 0x40	; 64
    7bb8:	91 05       	cpc	r25, r1
    7bba:	09 f4       	brne	.+2      	; 0x7bbe <udi_cdc_tx_send+0xf2>
    7bbc:	f1 2c       	mov	r15, r1
    7bbe:	80 34       	cpi	r24, 0x40	; 64
    7bc0:	91 05       	cpc	r25, r1
    7bc2:	91 f0       	breq	.+36     	; 0x7be8 <udi_cdc_tx_send+0x11c>
    7bc4:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <udd_is_high_speed>
    7bc8:	88 23       	and	r24, r24
    7bca:	39 f0       	breq	.+14     	; 0x7bda <udi_cdc_tx_send+0x10e>
    7bcc:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <udd_get_micro_frame_number>
    7bd0:	80 93 7c 2b 	sts	0x2B7C, r24	; 0x802b7c <udi_cdc_tx_sof_num>
    7bd4:	90 93 7d 2b 	sts	0x2B7D, r25	; 0x802b7d <udi_cdc_tx_sof_num+0x1>
    7bd8:	0b c0       	rjmp	.+22     	; 0x7bf0 <udi_cdc_tx_send+0x124>
    7bda:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <udd_get_frame_number>
    7bde:	80 93 7c 2b 	sts	0x2B7C, r24	; 0x802b7c <udi_cdc_tx_sof_num>
    7be2:	90 93 7d 2b 	sts	0x2B7D, r25	; 0x802b7d <udi_cdc_tx_sof_num+0x1>
    7be6:	04 c0       	rjmp	.+8      	; 0x7bf0 <udi_cdc_tx_send+0x124>
    7be8:	10 92 7c 2b 	sts	0x2B7C, r1	; 0x802b7c <udi_cdc_tx_sof_num>
    7bec:	10 92 7d 2b 	sts	0x2B7D, r1	; 0x802b7d <udi_cdc_tx_sof_num+0x1>
    7bf0:	f8 01       	movw	r30, r16
    7bf2:	ee 0f       	add	r30, r30
    7bf4:	ff 1f       	adc	r31, r31
    7bf6:	e1 58       	subi	r30, 0x81	; 129
    7bf8:	f4 4d       	sbci	r31, 0xD4	; 212
    7bfa:	20 81       	ld	r18, Z
    7bfc:	31 81       	ldd	r19, Z+1	; 0x01
    7bfe:	a8 01       	movw	r20, r16
    7c00:	00 24       	eor	r0, r0
    7c02:	56 95       	lsr	r21
    7c04:	47 95       	ror	r20
    7c06:	07 94       	ror	r0
    7c08:	56 95       	lsr	r21
    7c0a:	47 95       	ror	r20
    7c0c:	07 94       	ror	r0
    7c0e:	54 2f       	mov	r21, r20
    7c10:	40 2d       	mov	r20, r0
    7c12:	4c 57       	subi	r20, 0x7C	; 124
    7c14:	54 4d       	sbci	r21, 0xD4	; 212
    7c16:	0b e1       	ldi	r16, 0x1B	; 27
    7c18:	1e e3       	ldi	r17, 0x3E	; 62
    7c1a:	6f 2d       	mov	r22, r15
    7c1c:	81 e8       	ldi	r24, 0x81	; 129
    7c1e:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <udd_ep_run>
    7c22:	0f 90       	pop	r0
    7c24:	df 91       	pop	r29
    7c26:	cf 91       	pop	r28
    7c28:	1f 91       	pop	r17
    7c2a:	0f 91       	pop	r16
    7c2c:	ff 90       	pop	r15
    7c2e:	08 95       	ret

00007c30 <udi_cdc_data_sof_notify>:
    7c30:	80 e0       	ldi	r24, 0x00	; 0
    7c32:	4c cf       	rjmp	.-360    	; 0x7acc <udi_cdc_tx_send>
    7c34:	08 95       	ret

00007c36 <udi_cdc_data_sent>:
    7c36:	81 11       	cpse	r24, r1
    7c38:	19 c0       	rjmp	.+50     	; 0x7c6c <udi_cdc_data_sent+0x36>
    7c3a:	20 91 7e 2b 	lds	r18, 0x2B7E	; 0x802b7e <udi_cdc_tx_buf_sel>
    7c3e:	81 e0       	ldi	r24, 0x01	; 1
    7c40:	90 e0       	ldi	r25, 0x00	; 0
    7c42:	22 23       	and	r18, r18
    7c44:	11 f0       	breq	.+4      	; 0x7c4a <udi_cdc_data_sent+0x14>
    7c46:	80 e0       	ldi	r24, 0x00	; 0
    7c48:	90 e0       	ldi	r25, 0x00	; 0
    7c4a:	88 0f       	add	r24, r24
    7c4c:	99 1f       	adc	r25, r25
    7c4e:	fc 01       	movw	r30, r24
    7c50:	e1 58       	subi	r30, 0x81	; 129
    7c52:	f4 4d       	sbci	r31, 0xD4	; 212
    7c54:	10 82       	st	Z, r1
    7c56:	11 82       	std	Z+1, r1	; 0x01
    7c58:	10 92 7a 2b 	sts	0x2B7A, r1	; 0x802b7a <udi_cdc_tx_both_buf_to_send>
    7c5c:	10 92 7b 2b 	sts	0x2B7B, r1	; 0x802b7b <udi_cdc_tx_trans_ongoing>
    7c60:	67 2b       	or	r22, r23
    7c62:	11 f0       	breq	.+4      	; 0x7c68 <udi_cdc_data_sent+0x32>
    7c64:	80 e0       	ldi	r24, 0x00	; 0
    7c66:	98 d8       	rcall	.-3792   	; 0x6d98 <usb_callback_tx_empty_notify>
    7c68:	80 e0       	ldi	r24, 0x00	; 0
    7c6a:	30 cf       	rjmp	.-416    	; 0x7acc <udi_cdc_tx_send>
    7c6c:	08 95       	ret

00007c6e <udi_cdc_data_disable>:
    7c6e:	80 91 8d 2c 	lds	r24, 0x2C8D	; 0x802c8d <udi_cdc_nb_data_enabled>
    7c72:	81 50       	subi	r24, 0x01	; 1
    7c74:	80 93 8d 2c 	sts	0x2C8D, r24	; 0x802c8d <udi_cdc_nb_data_enabled>
    7c78:	80 91 8d 2c 	lds	r24, 0x2C8D	; 0x802c8d <udi_cdc_nb_data_enabled>
    7c7c:	86 d8       	rcall	.-3828   	; 0x6d8a <usb_callback_cdc_disable>
    7c7e:	10 92 8c 2c 	sts	0x2C8C, r1	; 0x802c8c <udi_cdc_data_running>
    7c82:	08 95       	ret

00007c84 <udi_cdc_comm_setup>:
    7c84:	cf 93       	push	r28
    7c86:	df 93       	push	r29
    7c88:	80 91 bf 2c 	lds	r24, 0x2CBF	; 0x802cbf <udd_g_ctrlreq>
    7c8c:	88 23       	and	r24, r24
    7c8e:	e4 f4       	brge	.+56     	; 0x7cc8 <udi_cdc_comm_setup+0x44>
    7c90:	80 76       	andi	r24, 0x60	; 96
    7c92:	80 32       	cpi	r24, 0x20	; 32
    7c94:	09 f0       	breq	.+2      	; 0x7c98 <udi_cdc_comm_setup+0x14>
    7c96:	47 c0       	rjmp	.+142    	; 0x7d26 <udi_cdc_comm_setup+0xa2>
    7c98:	80 91 c0 2c 	lds	r24, 0x2CC0	; 0x802cc0 <udd_g_ctrlreq+0x1>
    7c9c:	81 32       	cpi	r24, 0x21	; 33
    7c9e:	09 f0       	breq	.+2      	; 0x7ca2 <udi_cdc_comm_setup+0x1e>
    7ca0:	44 c0       	rjmp	.+136    	; 0x7d2a <udi_cdc_comm_setup+0xa6>
    7ca2:	80 91 c5 2c 	lds	r24, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    7ca6:	90 91 c6 2c 	lds	r25, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    7caa:	07 97       	sbiw	r24, 0x07	; 7
    7cac:	09 f0       	breq	.+2      	; 0x7cb0 <udi_cdc_comm_setup+0x2c>
    7cae:	3f c0       	rjmp	.+126    	; 0x7d2e <udi_cdc_comm_setup+0xaa>
    7cb0:	ef eb       	ldi	r30, 0xBF	; 191
    7cb2:	fc e2       	ldi	r31, 0x2C	; 44
    7cb4:	8c e9       	ldi	r24, 0x9C	; 156
    7cb6:	9c e2       	ldi	r25, 0x2C	; 44
    7cb8:	80 87       	std	Z+8, r24	; 0x08
    7cba:	91 87       	std	Z+9, r25	; 0x09
    7cbc:	87 e0       	ldi	r24, 0x07	; 7
    7cbe:	90 e0       	ldi	r25, 0x00	; 0
    7cc0:	82 87       	std	Z+10, r24	; 0x0a
    7cc2:	93 87       	std	Z+11, r25	; 0x0b
    7cc4:	81 e0       	ldi	r24, 0x01	; 1
    7cc6:	3a c0       	rjmp	.+116    	; 0x7d3c <udi_cdc_comm_setup+0xb8>
    7cc8:	80 76       	andi	r24, 0x60	; 96
    7cca:	80 32       	cpi	r24, 0x20	; 32
    7ccc:	91 f5       	brne	.+100    	; 0x7d32 <udi_cdc_comm_setup+0xae>
    7cce:	80 91 c0 2c 	lds	r24, 0x2CC0	; 0x802cc0 <udd_g_ctrlreq+0x1>
    7cd2:	80 32       	cpi	r24, 0x20	; 32
    7cd4:	19 f0       	breq	.+6      	; 0x7cdc <udi_cdc_comm_setup+0x58>
    7cd6:	82 32       	cpi	r24, 0x22	; 34
    7cd8:	b9 f0       	breq	.+46     	; 0x7d08 <udi_cdc_comm_setup+0x84>
    7cda:	2d c0       	rjmp	.+90     	; 0x7d36 <udi_cdc_comm_setup+0xb2>
    7cdc:	80 91 c5 2c 	lds	r24, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    7ce0:	90 91 c6 2c 	lds	r25, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    7ce4:	07 97       	sbiw	r24, 0x07	; 7
    7ce6:	49 f5       	brne	.+82     	; 0x7d3a <udi_cdc_comm_setup+0xb6>
    7ce8:	ef eb       	ldi	r30, 0xBF	; 191
    7cea:	fc e2       	ldi	r31, 0x2C	; 44
    7cec:	81 e3       	ldi	r24, 0x31	; 49
    7cee:	9d e3       	ldi	r25, 0x3D	; 61
    7cf0:	84 87       	std	Z+12, r24	; 0x0c
    7cf2:	95 87       	std	Z+13, r25	; 0x0d
    7cf4:	8c e9       	ldi	r24, 0x9C	; 156
    7cf6:	9c e2       	ldi	r25, 0x2C	; 44
    7cf8:	80 87       	std	Z+8, r24	; 0x08
    7cfa:	91 87       	std	Z+9, r25	; 0x09
    7cfc:	87 e0       	ldi	r24, 0x07	; 7
    7cfe:	90 e0       	ldi	r25, 0x00	; 0
    7d00:	82 87       	std	Z+10, r24	; 0x0a
    7d02:	93 87       	std	Z+11, r25	; 0x0b
    7d04:	81 e0       	ldi	r24, 0x01	; 1
    7d06:	1a c0       	rjmp	.+52     	; 0x7d3c <udi_cdc_comm_setup+0xb8>
    7d08:	cf eb       	ldi	r28, 0xBF	; 191
    7d0a:	dc e2       	ldi	r29, 0x2C	; 44
    7d0c:	6a 81       	ldd	r22, Y+2	; 0x02
    7d0e:	61 70       	andi	r22, 0x01	; 1
    7d10:	80 e0       	ldi	r24, 0x00	; 0
    7d12:	3f d8       	rcall	.-3970   	; 0x6d92 <usb_callback_cdc_set_dtr>
    7d14:	6a 81       	ldd	r22, Y+2	; 0x02
    7d16:	7b 81       	ldd	r23, Y+3	; 0x03
    7d18:	76 95       	lsr	r23
    7d1a:	67 95       	ror	r22
    7d1c:	61 70       	andi	r22, 0x01	; 1
    7d1e:	80 e0       	ldi	r24, 0x00	; 0
    7d20:	39 d8       	rcall	.-3982   	; 0x6d94 <usb_callback_cdc_set_rts>
    7d22:	81 e0       	ldi	r24, 0x01	; 1
    7d24:	0b c0       	rjmp	.+22     	; 0x7d3c <udi_cdc_comm_setup+0xb8>
    7d26:	80 e0       	ldi	r24, 0x00	; 0
    7d28:	09 c0       	rjmp	.+18     	; 0x7d3c <udi_cdc_comm_setup+0xb8>
    7d2a:	80 e0       	ldi	r24, 0x00	; 0
    7d2c:	07 c0       	rjmp	.+14     	; 0x7d3c <udi_cdc_comm_setup+0xb8>
    7d2e:	80 e0       	ldi	r24, 0x00	; 0
    7d30:	05 c0       	rjmp	.+10     	; 0x7d3c <udi_cdc_comm_setup+0xb8>
    7d32:	80 e0       	ldi	r24, 0x00	; 0
    7d34:	03 c0       	rjmp	.+6      	; 0x7d3c <udi_cdc_comm_setup+0xb8>
    7d36:	80 e0       	ldi	r24, 0x00	; 0
    7d38:	01 c0       	rjmp	.+2      	; 0x7d3c <udi_cdc_comm_setup+0xb8>
    7d3a:	80 e0       	ldi	r24, 0x00	; 0
    7d3c:	df 91       	pop	r29
    7d3e:	cf 91       	pop	r28
    7d40:	08 95       	ret

00007d42 <udi_cdc_multi_get_nb_received_data>:
    7d42:	cf 93       	push	r28
    7d44:	df 93       	push	r29
    7d46:	1f 92       	push	r1
    7d48:	cd b7       	in	r28, 0x3d	; 61
    7d4a:	de b7       	in	r29, 0x3e	; 62
    7d4c:	8f b7       	in	r24, 0x3f	; 63
    7d4e:	89 83       	std	Y+1, r24	; 0x01
    7d50:	f8 94       	cli
    7d52:	49 81       	ldd	r20, Y+1	; 0x01
    7d54:	20 91 05 2c 	lds	r18, 0x2C05	; 0x802c05 <udi_cdc_rx_pos>
    7d58:	30 91 06 2c 	lds	r19, 0x2C06	; 0x802c06 <udi_cdc_rx_pos+0x1>
    7d5c:	e0 91 07 2c 	lds	r30, 0x2C07	; 0x802c07 <udi_cdc_rx_buf_sel>
    7d60:	f0 e0       	ldi	r31, 0x00	; 0
    7d62:	ee 0f       	add	r30, r30
    7d64:	ff 1f       	adc	r31, r31
    7d66:	e8 5f       	subi	r30, 0xF8	; 248
    7d68:	f3 4d       	sbci	r31, 0xD3	; 211
    7d6a:	80 81       	ld	r24, Z
    7d6c:	91 81       	ldd	r25, Z+1	; 0x01
    7d6e:	4f bf       	out	0x3f, r20	; 63
    7d70:	82 1b       	sub	r24, r18
    7d72:	93 0b       	sbc	r25, r19
    7d74:	0f 90       	pop	r0
    7d76:	df 91       	pop	r29
    7d78:	cf 91       	pop	r28
    7d7a:	08 95       	ret

00007d7c <udi_cdc_multi_is_rx_ready>:
    7d7c:	e2 df       	rcall	.-60     	; 0x7d42 <udi_cdc_multi_get_nb_received_data>
    7d7e:	21 e0       	ldi	r18, 0x01	; 1
    7d80:	89 2b       	or	r24, r25
    7d82:	09 f4       	brne	.+2      	; 0x7d86 <udi_cdc_multi_is_rx_ready+0xa>
    7d84:	20 e0       	ldi	r18, 0x00	; 0
    7d86:	82 2f       	mov	r24, r18
    7d88:	08 95       	ret

00007d8a <udi_cdc_rx_start>:
    7d8a:	0f 93       	push	r16
    7d8c:	1f 93       	push	r17
    7d8e:	cf 93       	push	r28
    7d90:	df 93       	push	r29
    7d92:	1f 92       	push	r1
    7d94:	cd b7       	in	r28, 0x3d	; 61
    7d96:	de b7       	in	r29, 0x3e	; 62
    7d98:	8f b7       	in	r24, 0x3f	; 63
    7d9a:	89 83       	std	Y+1, r24	; 0x01
    7d9c:	f8 94       	cli
    7d9e:	99 81       	ldd	r25, Y+1	; 0x01
    7da0:	20 91 07 2c 	lds	r18, 0x2C07	; 0x802c07 <udi_cdc_rx_buf_sel>
    7da4:	80 91 04 2c 	lds	r24, 0x2C04	; 0x802c04 <udi_cdc_rx_trans_ongoing>
    7da8:	81 11       	cpse	r24, r1
    7daa:	10 c0       	rjmp	.+32     	; 0x7dcc <udi_cdc_rx_start+0x42>
    7dac:	60 91 05 2c 	lds	r22, 0x2C05	; 0x802c05 <udi_cdc_rx_pos>
    7db0:	70 91 06 2c 	lds	r23, 0x2C06	; 0x802c06 <udi_cdc_rx_pos+0x1>
    7db4:	02 2f       	mov	r16, r18
    7db6:	10 e0       	ldi	r17, 0x00	; 0
    7db8:	f8 01       	movw	r30, r16
    7dba:	ee 0f       	add	r30, r30
    7dbc:	ff 1f       	adc	r31, r31
    7dbe:	e8 5f       	subi	r30, 0xF8	; 248
    7dc0:	f3 4d       	sbci	r31, 0xD3	; 211
    7dc2:	40 81       	ld	r20, Z
    7dc4:	51 81       	ldd	r21, Z+1	; 0x01
    7dc6:	64 17       	cp	r22, r20
    7dc8:	75 07       	cpc	r23, r21
    7dca:	18 f4       	brcc	.+6      	; 0x7dd2 <udi_cdc_rx_start+0x48>
    7dcc:	9f bf       	out	0x3f, r25	; 63
    7dce:	80 e0       	ldi	r24, 0x00	; 0
    7dd0:	28 c0       	rjmp	.+80     	; 0x7e22 <udi_cdc_rx_start+0x98>
    7dd2:	10 92 05 2c 	sts	0x2C05, r1	; 0x802c05 <udi_cdc_rx_pos>
    7dd6:	10 92 06 2c 	sts	0x2C06, r1	; 0x802c06 <udi_cdc_rx_pos+0x1>
    7dda:	81 e0       	ldi	r24, 0x01	; 1
    7ddc:	21 11       	cpse	r18, r1
    7dde:	80 e0       	ldi	r24, 0x00	; 0
    7de0:	80 93 07 2c 	sts	0x2C07, r24	; 0x802c07 <udi_cdc_rx_buf_sel>
    7de4:	81 e0       	ldi	r24, 0x01	; 1
    7de6:	80 93 04 2c 	sts	0x2C04, r24	; 0x802c04 <udi_cdc_rx_trans_ongoing>
    7dea:	9f bf       	out	0x3f, r25	; 63
    7dec:	80 e0       	ldi	r24, 0x00	; 0
    7dee:	c6 df       	rcall	.-116    	; 0x7d7c <udi_cdc_multi_is_rx_ready>
    7df0:	88 23       	and	r24, r24
    7df2:	19 f0       	breq	.+6      	; 0x7dfa <udi_cdc_rx_start+0x70>
    7df4:	80 e0       	ldi	r24, 0x00	; 0
    7df6:	0e 94 cb 36 	call	0x6d96	; 0x6d96 <usb_callback_rx_notify>
    7dfa:	a8 01       	movw	r20, r16
    7dfc:	00 24       	eor	r0, r0
    7dfe:	56 95       	lsr	r21
    7e00:	47 95       	ror	r20
    7e02:	07 94       	ror	r0
    7e04:	56 95       	lsr	r21
    7e06:	47 95       	ror	r20
    7e08:	07 94       	ror	r0
    7e0a:	54 2f       	mov	r21, r20
    7e0c:	40 2d       	mov	r20, r0
    7e0e:	44 5f       	subi	r20, 0xF4	; 244
    7e10:	53 4d       	sbci	r21, 0xD3	; 211
    7e12:	09 e4       	ldi	r16, 0x49	; 73
    7e14:	1f e3       	ldi	r17, 0x3F	; 63
    7e16:	20 e4       	ldi	r18, 0x40	; 64
    7e18:	30 e0       	ldi	r19, 0x00	; 0
    7e1a:	61 e0       	ldi	r22, 0x01	; 1
    7e1c:	82 e0       	ldi	r24, 0x02	; 2
    7e1e:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <udd_ep_run>
    7e22:	0f 90       	pop	r0
    7e24:	df 91       	pop	r29
    7e26:	cf 91       	pop	r28
    7e28:	1f 91       	pop	r17
    7e2a:	0f 91       	pop	r16
    7e2c:	08 95       	ret

00007e2e <udi_cdc_data_enable>:
    7e2e:	10 92 8d 2c 	sts	0x2C8D, r1	; 0x802c8d <udi_cdc_nb_data_enabled>
    7e32:	10 92 7b 2b 	sts	0x2B7B, r1	; 0x802b7b <udi_cdc_tx_trans_ongoing>
    7e36:	10 92 7a 2b 	sts	0x2B7A, r1	; 0x802b7a <udi_cdc_tx_both_buf_to_send>
    7e3a:	10 92 7e 2b 	sts	0x2B7E, r1	; 0x802b7e <udi_cdc_tx_buf_sel>
    7e3e:	ef e7       	ldi	r30, 0x7F	; 127
    7e40:	fb e2       	ldi	r31, 0x2B	; 43
    7e42:	10 82       	st	Z, r1
    7e44:	11 82       	std	Z+1, r1	; 0x01
    7e46:	12 82       	std	Z+2, r1	; 0x02
    7e48:	13 82       	std	Z+3, r1	; 0x03
    7e4a:	10 92 7c 2b 	sts	0x2B7C, r1	; 0x802b7c <udi_cdc_tx_sof_num>
    7e4e:	10 92 7d 2b 	sts	0x2B7D, r1	; 0x802b7d <udi_cdc_tx_sof_num+0x1>
    7e52:	80 e0       	ldi	r24, 0x00	; 0
    7e54:	3b de       	rcall	.-906    	; 0x7acc <udi_cdc_tx_send>
    7e56:	10 92 04 2c 	sts	0x2C04, r1	; 0x802c04 <udi_cdc_rx_trans_ongoing>
    7e5a:	10 92 07 2c 	sts	0x2C07, r1	; 0x802c07 <udi_cdc_rx_buf_sel>
    7e5e:	e8 e0       	ldi	r30, 0x08	; 8
    7e60:	fc e2       	ldi	r31, 0x2C	; 44
    7e62:	10 82       	st	Z, r1
    7e64:	11 82       	std	Z+1, r1	; 0x01
    7e66:	12 82       	std	Z+2, r1	; 0x02
    7e68:	13 82       	std	Z+3, r1	; 0x03
    7e6a:	10 92 05 2c 	sts	0x2C05, r1	; 0x802c05 <udi_cdc_rx_pos>
    7e6e:	10 92 06 2c 	sts	0x2C06, r1	; 0x802c06 <udi_cdc_rx_pos+0x1>
    7e72:	80 e0       	ldi	r24, 0x00	; 0
    7e74:	8a df       	rcall	.-236    	; 0x7d8a <udi_cdc_rx_start>
    7e76:	88 23       	and	r24, r24
    7e78:	59 f0       	breq	.+22     	; 0x7e90 <udi_cdc_data_enable+0x62>
    7e7a:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <udi_cdc_nb_data_enabled>
    7e7e:	9f 5f       	subi	r25, 0xFF	; 255
    7e80:	90 93 8d 2c 	sts	0x2C8D, r25	; 0x802c8d <udi_cdc_nb_data_enabled>
    7e84:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <udi_cdc_nb_data_enabled>
    7e88:	91 30       	cpi	r25, 0x01	; 1
    7e8a:	11 f4       	brne	.+4      	; 0x7e90 <udi_cdc_data_enable+0x62>
    7e8c:	90 93 8c 2c 	sts	0x2C8C, r25	; 0x802c8c <udi_cdc_data_running>
    7e90:	08 95       	ret

00007e92 <udi_cdc_data_received>:
    7e92:	0f 93       	push	r16
    7e94:	1f 93       	push	r17
    7e96:	81 11       	cpse	r24, r1
    7e98:	29 c0       	rjmp	.+82     	; 0x7eec <udi_cdc_data_received+0x5a>
    7e9a:	80 91 07 2c 	lds	r24, 0x2C07	; 0x802c07 <udi_cdc_rx_buf_sel>
    7e9e:	e1 e0       	ldi	r30, 0x01	; 1
    7ea0:	81 11       	cpse	r24, r1
    7ea2:	e0 e0       	ldi	r30, 0x00	; 0
    7ea4:	84 2f       	mov	r24, r20
    7ea6:	61 15       	cp	r22, r1
    7ea8:	71 05       	cpc	r23, r1
    7eaa:	a9 f4       	brne	.+42     	; 0x7ed6 <udi_cdc_data_received+0x44>
    7eac:	4e 2f       	mov	r20, r30
    7eae:	50 e0       	ldi	r21, 0x00	; 0
    7eb0:	00 24       	eor	r0, r0
    7eb2:	56 95       	lsr	r21
    7eb4:	47 95       	ror	r20
    7eb6:	07 94       	ror	r0
    7eb8:	56 95       	lsr	r21
    7eba:	47 95       	ror	r20
    7ebc:	07 94       	ror	r0
    7ebe:	54 2f       	mov	r21, r20
    7ec0:	40 2d       	mov	r20, r0
    7ec2:	44 5f       	subi	r20, 0xF4	; 244
    7ec4:	53 4d       	sbci	r21, 0xD3	; 211
    7ec6:	09 e4       	ldi	r16, 0x49	; 73
    7ec8:	1f e3       	ldi	r17, 0x3F	; 63
    7eca:	20 e4       	ldi	r18, 0x40	; 64
    7ecc:	30 e0       	ldi	r19, 0x00	; 0
    7ece:	61 e0       	ldi	r22, 0x01	; 1
    7ed0:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <udd_ep_run>
    7ed4:	0b c0       	rjmp	.+22     	; 0x7eec <udi_cdc_data_received+0x5a>
    7ed6:	f0 e0       	ldi	r31, 0x00	; 0
    7ed8:	ee 0f       	add	r30, r30
    7eda:	ff 1f       	adc	r31, r31
    7edc:	e8 5f       	subi	r30, 0xF8	; 248
    7ede:	f3 4d       	sbci	r31, 0xD3	; 211
    7ee0:	60 83       	st	Z, r22
    7ee2:	71 83       	std	Z+1, r23	; 0x01
    7ee4:	10 92 04 2c 	sts	0x2C04, r1	; 0x802c04 <udi_cdc_rx_trans_ongoing>
    7ee8:	80 e0       	ldi	r24, 0x00	; 0
    7eea:	4f df       	rcall	.-354    	; 0x7d8a <udi_cdc_rx_start>
    7eec:	1f 91       	pop	r17
    7eee:	0f 91       	pop	r16
    7ef0:	08 95       	ret

00007ef2 <udi_cdc_multi_getc>:
    7ef2:	ef 92       	push	r14
    7ef4:	ff 92       	push	r15
    7ef6:	1f 93       	push	r17
    7ef8:	cf 93       	push	r28
    7efa:	df 93       	push	r29
    7efc:	1f 92       	push	r1
    7efe:	cd b7       	in	r28, 0x3d	; 61
    7f00:	de b7       	in	r29, 0x3e	; 62
    7f02:	11 e0       	ldi	r17, 0x01	; 1
    7f04:	80 91 a2 2c 	lds	r24, 0x2CA2	; 0x802ca2 <udi_cdc_line_coding+0x6>
    7f08:	89 30       	cpi	r24, 0x09	; 9
    7f0a:	09 f0       	breq	.+2      	; 0x7f0e <udi_cdc_multi_getc+0x1c>
    7f0c:	10 e0       	ldi	r17, 0x00	; 0
    7f0e:	40 e0       	ldi	r20, 0x00	; 0
    7f10:	50 e0       	ldi	r21, 0x00	; 0
    7f12:	8f b7       	in	r24, 0x3f	; 63
    7f14:	89 83       	std	Y+1, r24	; 0x01
    7f16:	f8 94       	cli
    7f18:	a9 81       	ldd	r26, Y+1	; 0x01
    7f1a:	20 91 05 2c 	lds	r18, 0x2C05	; 0x802c05 <udi_cdc_rx_pos>
    7f1e:	30 91 06 2c 	lds	r19, 0x2C06	; 0x802c06 <udi_cdc_rx_pos+0x1>
    7f22:	80 91 07 2c 	lds	r24, 0x2C07	; 0x802c07 <udi_cdc_rx_buf_sel>
    7f26:	90 e0       	ldi	r25, 0x00	; 0
    7f28:	fc 01       	movw	r30, r24
    7f2a:	ee 0f       	add	r30, r30
    7f2c:	ff 1f       	adc	r31, r31
    7f2e:	e8 5f       	subi	r30, 0xF8	; 248
    7f30:	f3 4d       	sbci	r31, 0xD3	; 211
    7f32:	60 81       	ld	r22, Z
    7f34:	71 81       	ldd	r23, Z+1	; 0x01
    7f36:	af bf       	out	0x3f, r26	; 63
    7f38:	26 17       	cp	r18, r22
    7f3a:	37 07       	cpc	r19, r23
    7f3c:	30 f0       	brcs	.+12     	; 0x7f4a <udi_cdc_multi_getc+0x58>
    7f3e:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <udi_cdc_data_running>
    7f42:	81 11       	cpse	r24, r1
    7f44:	e6 cf       	rjmp	.-52     	; 0x7f12 <udi_cdc_multi_getc+0x20>
    7f46:	90 e0       	ldi	r25, 0x00	; 0
    7f48:	21 c0       	rjmp	.+66     	; 0x7f8c <udi_cdc_multi_getc+0x9a>
    7f4a:	fc 01       	movw	r30, r24
    7f4c:	00 24       	eor	r0, r0
    7f4e:	f6 95       	lsr	r31
    7f50:	e7 95       	ror	r30
    7f52:	07 94       	ror	r0
    7f54:	f6 95       	lsr	r31
    7f56:	e7 95       	ror	r30
    7f58:	07 94       	ror	r0
    7f5a:	fe 2f       	mov	r31, r30
    7f5c:	e0 2d       	mov	r30, r0
    7f5e:	e4 5f       	subi	r30, 0xF4	; 244
    7f60:	f3 4d       	sbci	r31, 0xD3	; 211
    7f62:	e2 0f       	add	r30, r18
    7f64:	f3 1f       	adc	r31, r19
    7f66:	80 81       	ld	r24, Z
    7f68:	7a 01       	movw	r14, r20
    7f6a:	e8 2a       	or	r14, r24
    7f6c:	2f 5f       	subi	r18, 0xFF	; 255
    7f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    7f70:	20 93 05 2c 	sts	0x2C05, r18	; 0x802c05 <udi_cdc_rx_pos>
    7f74:	30 93 06 2c 	sts	0x2C06, r19	; 0x802c06 <udi_cdc_rx_pos+0x1>
    7f78:	80 e0       	ldi	r24, 0x00	; 0
    7f7a:	07 df       	rcall	.-498    	; 0x7d8a <udi_cdc_rx_start>
    7f7c:	11 23       	and	r17, r17
    7f7e:	21 f0       	breq	.+8      	; 0x7f88 <udi_cdc_multi_getc+0x96>
    7f80:	5e 2d       	mov	r21, r14
    7f82:	44 27       	eor	r20, r20
    7f84:	10 e0       	ldi	r17, 0x00	; 0
    7f86:	c5 cf       	rjmp	.-118    	; 0x7f12 <udi_cdc_multi_getc+0x20>
    7f88:	8e 2d       	mov	r24, r14
    7f8a:	9f 2d       	mov	r25, r15
    7f8c:	0f 90       	pop	r0
    7f8e:	df 91       	pop	r29
    7f90:	cf 91       	pop	r28
    7f92:	1f 91       	pop	r17
    7f94:	ff 90       	pop	r15
    7f96:	ef 90       	pop	r14
    7f98:	08 95       	ret

00007f9a <udi_cdc_getc>:
    7f9a:	80 e0       	ldi	r24, 0x00	; 0
    7f9c:	aa cf       	rjmp	.-172    	; 0x7ef2 <udi_cdc_multi_getc>
    7f9e:	08 95       	ret

00007fa0 <udi_cdc_multi_get_free_tx_buffer>:
    7fa0:	cf 93       	push	r28
    7fa2:	df 93       	push	r29
    7fa4:	1f 92       	push	r1
    7fa6:	cd b7       	in	r28, 0x3d	; 61
    7fa8:	de b7       	in	r29, 0x3e	; 62
    7faa:	8f b7       	in	r24, 0x3f	; 63
    7fac:	89 83       	std	Y+1, r24	; 0x01
    7fae:	f8 94       	cli
    7fb0:	99 81       	ldd	r25, Y+1	; 0x01
    7fb2:	80 91 7e 2b 	lds	r24, 0x2B7E	; 0x802b7e <udi_cdc_tx_buf_sel>
    7fb6:	e8 2f       	mov	r30, r24
    7fb8:	f0 e0       	ldi	r31, 0x00	; 0
    7fba:	ee 0f       	add	r30, r30
    7fbc:	ff 1f       	adc	r31, r31
    7fbe:	e1 58       	subi	r30, 0x81	; 129
    7fc0:	f4 4d       	sbci	r31, 0xD4	; 212
    7fc2:	20 81       	ld	r18, Z
    7fc4:	31 81       	ldd	r19, Z+1	; 0x01
    7fc6:	20 34       	cpi	r18, 0x40	; 64
    7fc8:	31 05       	cpc	r19, r1
    7fca:	89 f4       	brne	.+34     	; 0x7fee <udi_cdc_multi_get_free_tx_buffer+0x4e>
    7fcc:	40 91 7b 2b 	lds	r20, 0x2B7B	; 0x802b7b <udi_cdc_tx_trans_ongoing>
    7fd0:	41 11       	cpse	r20, r1
    7fd2:	0d c0       	rjmp	.+26     	; 0x7fee <udi_cdc_multi_get_free_tx_buffer+0x4e>
    7fd4:	40 91 7a 2b 	lds	r20, 0x2B7A	; 0x802b7a <udi_cdc_tx_both_buf_to_send>
    7fd8:	41 11       	cpse	r20, r1
    7fda:	09 c0       	rjmp	.+18     	; 0x7fee <udi_cdc_multi_get_free_tx_buffer+0x4e>
    7fdc:	21 e0       	ldi	r18, 0x01	; 1
    7fde:	20 93 7a 2b 	sts	0x2B7A, r18	; 0x802b7a <udi_cdc_tx_both_buf_to_send>
    7fe2:	81 11       	cpse	r24, r1
    7fe4:	20 e0       	ldi	r18, 0x00	; 0
    7fe6:	20 93 7e 2b 	sts	0x2B7E, r18	; 0x802b7e <udi_cdc_tx_buf_sel>
    7fea:	20 e0       	ldi	r18, 0x00	; 0
    7fec:	30 e0       	ldi	r19, 0x00	; 0
    7fee:	9f bf       	out	0x3f, r25	; 63
    7ff0:	80 e4       	ldi	r24, 0x40	; 64
    7ff2:	90 e0       	ldi	r25, 0x00	; 0
    7ff4:	82 1b       	sub	r24, r18
    7ff6:	93 0b       	sbc	r25, r19
    7ff8:	0f 90       	pop	r0
    7ffa:	df 91       	pop	r29
    7ffc:	cf 91       	pop	r28
    7ffe:	08 95       	ret

00008000 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    8000:	cf df       	rcall	.-98     	; 0x7fa0 <udi_cdc_multi_get_free_tx_buffer>
    8002:	21 e0       	ldi	r18, 0x01	; 1
    8004:	89 2b       	or	r24, r25
    8006:	09 f4       	brne	.+2      	; 0x800a <udi_cdc_multi_is_tx_ready+0xa>
    8008:	20 e0       	ldi	r18, 0x00	; 0
    800a:	82 2f       	mov	r24, r18
    800c:	08 95       	ret

0000800e <udi_cdc_multi_putc>:
    800e:	ff 92       	push	r15
    8010:	0f 93       	push	r16
    8012:	1f 93       	push	r17
    8014:	cf 93       	push	r28
    8016:	df 93       	push	r29
    8018:	1f 92       	push	r1
    801a:	cd b7       	in	r28, 0x3d	; 61
    801c:	de b7       	in	r29, 0x3e	; 62
    801e:	f6 2e       	mov	r15, r22
    8020:	17 2f       	mov	r17, r23
    8022:	01 e0       	ldi	r16, 0x01	; 1
    8024:	80 91 a2 2c 	lds	r24, 0x2CA2	; 0x802ca2 <udi_cdc_line_coding+0x6>
    8028:	89 30       	cpi	r24, 0x09	; 9
    802a:	09 f0       	breq	.+2      	; 0x802e <udi_cdc_multi_putc+0x20>
    802c:	00 e0       	ldi	r16, 0x00	; 0
    802e:	80 e0       	ldi	r24, 0x00	; 0
    8030:	e7 df       	rcall	.-50     	; 0x8000 <udi_cdc_multi_is_tx_ready>
    8032:	81 11       	cpse	r24, r1
    8034:	07 c0       	rjmp	.+14     	; 0x8044 <udi_cdc_multi_putc+0x36>
    8036:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <udi_cdc_data_running>
    803a:	81 11       	cpse	r24, r1
    803c:	f8 cf       	rjmp	.-16     	; 0x802e <udi_cdc_multi_putc+0x20>
    803e:	80 e0       	ldi	r24, 0x00	; 0
    8040:	90 e0       	ldi	r25, 0x00	; 0
    8042:	2c c0       	rjmp	.+88     	; 0x809c <udi_cdc_multi_putc+0x8e>
    8044:	8f b7       	in	r24, 0x3f	; 63
    8046:	89 83       	std	Y+1, r24	; 0x01
    8048:	f8 94       	cli
    804a:	49 81       	ldd	r20, Y+1	; 0x01
    804c:	80 91 7e 2b 	lds	r24, 0x2B7E	; 0x802b7e <udi_cdc_tx_buf_sel>
    8050:	90 e0       	ldi	r25, 0x00	; 0
    8052:	fc 01       	movw	r30, r24
    8054:	ee 0f       	add	r30, r30
    8056:	ff 1f       	adc	r31, r31
    8058:	e1 58       	subi	r30, 0x81	; 129
    805a:	f4 4d       	sbci	r31, 0xD4	; 212
    805c:	20 81       	ld	r18, Z
    805e:	31 81       	ldd	r19, Z+1	; 0x01
    8060:	b9 01       	movw	r22, r18
    8062:	6f 5f       	subi	r22, 0xFF	; 255
    8064:	7f 4f       	sbci	r23, 0xFF	; 255
    8066:	60 83       	st	Z, r22
    8068:	71 83       	std	Z+1, r23	; 0x01
    806a:	00 24       	eor	r0, r0
    806c:	96 95       	lsr	r25
    806e:	87 95       	ror	r24
    8070:	07 94       	ror	r0
    8072:	96 95       	lsr	r25
    8074:	87 95       	ror	r24
    8076:	07 94       	ror	r0
    8078:	98 2f       	mov	r25, r24
    807a:	80 2d       	mov	r24, r0
    807c:	8c 57       	subi	r24, 0x7C	; 124
    807e:	94 4d       	sbci	r25, 0xD4	; 212
    8080:	fc 01       	movw	r30, r24
    8082:	e2 0f       	add	r30, r18
    8084:	f3 1f       	adc	r31, r19
    8086:	f0 82       	st	Z, r15
    8088:	4f bf       	out	0x3f, r20	; 63
    808a:	00 23       	and	r16, r16
    808c:	29 f0       	breq	.+10     	; 0x8098 <udi_cdc_multi_putc+0x8a>
    808e:	f1 2e       	mov	r15, r17
    8090:	11 0f       	add	r17, r17
    8092:	11 0b       	sbc	r17, r17
    8094:	00 e0       	ldi	r16, 0x00	; 0
    8096:	cb cf       	rjmp	.-106    	; 0x802e <udi_cdc_multi_putc+0x20>
    8098:	81 e0       	ldi	r24, 0x01	; 1
    809a:	90 e0       	ldi	r25, 0x00	; 0
    809c:	0f 90       	pop	r0
    809e:	df 91       	pop	r29
    80a0:	cf 91       	pop	r28
    80a2:	1f 91       	pop	r17
    80a4:	0f 91       	pop	r16
    80a6:	ff 90       	pop	r15
    80a8:	08 95       	ret

000080aa <udi_cdc_putc>:
    80aa:	bc 01       	movw	r22, r24
    80ac:	80 e0       	ldi	r24, 0x00	; 0
    80ae:	af cf       	rjmp	.-162    	; 0x800e <udi_cdc_multi_putc>
    80b0:	08 95       	ret

000080b2 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    80b2:	e0 91 a8 2c 	lds	r30, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    80b6:	f0 91 a9 2c 	lds	r31, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    80ba:	01 90       	ld	r0, Z+
    80bc:	f0 81       	ld	r31, Z
    80be:	e0 2d       	mov	r30, r0
    80c0:	22 81       	ldd	r18, Z+2	; 0x02
    80c2:	33 81       	ldd	r19, Z+3	; 0x03
    80c4:	2e 0f       	add	r18, r30
    80c6:	3f 1f       	adc	r19, r31
    80c8:	fc 01       	movw	r30, r24
    80ca:	40 81       	ld	r20, Z
    80cc:	e4 0f       	add	r30, r20
    80ce:	f1 1d       	adc	r31, r1
    80d0:	e2 17       	cp	r30, r18
    80d2:	f3 07       	cpc	r31, r19
    80d4:	a0 f4       	brcc	.+40     	; 0x80fe <udc_next_desc_in_iface+0x4c>
    80d6:	81 81       	ldd	r24, Z+1	; 0x01
    80d8:	84 30       	cpi	r24, 0x04	; 4
    80da:	a1 f0       	breq	.+40     	; 0x8104 <udc_next_desc_in_iface+0x52>
    80dc:	86 13       	cpse	r24, r22
    80de:	06 c0       	rjmp	.+12     	; 0x80ec <udc_next_desc_in_iface+0x3a>
    80e0:	14 c0       	rjmp	.+40     	; 0x810a <udc_next_desc_in_iface+0x58>
    80e2:	81 81       	ldd	r24, Z+1	; 0x01
    80e4:	84 30       	cpi	r24, 0x04	; 4
    80e6:	a1 f0       	breq	.+40     	; 0x8110 <udc_next_desc_in_iface+0x5e>
    80e8:	86 17       	cp	r24, r22
    80ea:	a9 f0       	breq	.+42     	; 0x8116 <udc_next_desc_in_iface+0x64>
    80ec:	80 81       	ld	r24, Z
    80ee:	e8 0f       	add	r30, r24
    80f0:	f1 1d       	adc	r31, r1
    80f2:	e2 17       	cp	r30, r18
    80f4:	f3 07       	cpc	r31, r19
    80f6:	a8 f3       	brcs	.-22     	; 0x80e2 <udc_next_desc_in_iface+0x30>
    80f8:	80 e0       	ldi	r24, 0x00	; 0
    80fa:	90 e0       	ldi	r25, 0x00	; 0
    80fc:	08 95       	ret
    80fe:	80 e0       	ldi	r24, 0x00	; 0
    8100:	90 e0       	ldi	r25, 0x00	; 0
    8102:	08 95       	ret
    8104:	80 e0       	ldi	r24, 0x00	; 0
    8106:	90 e0       	ldi	r25, 0x00	; 0
    8108:	08 95       	ret
    810a:	8e 2f       	mov	r24, r30
    810c:	9f 2f       	mov	r25, r31
    810e:	08 95       	ret
    8110:	80 e0       	ldi	r24, 0x00	; 0
    8112:	90 e0       	ldi	r25, 0x00	; 0
    8114:	08 95       	ret
    8116:	8e 2f       	mov	r24, r30
    8118:	9f 2f       	mov	r25, r31
    811a:	08 95       	ret

0000811c <udc_valid_address>:
    811c:	80 91 c1 2c 	lds	r24, 0x2CC1	; 0x802cc1 <udd_g_ctrlreq+0x2>
    8120:	8f 77       	andi	r24, 0x7F	; 127
    8122:	0c 94 1c 2e 	jmp	0x5c38	; 0x5c38 <udd_set_address>
    8126:	08 95       	ret

00008128 <udc_update_iface_desc>:
    8128:	90 91 aa 2c 	lds	r25, 0x2CAA	; 0x802caa <udc_num_configuration>
    812c:	99 23       	and	r25, r25
    812e:	81 f1       	breq	.+96     	; 0x8190 <udc_update_iface_desc+0x68>
    8130:	e0 91 a8 2c 	lds	r30, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    8134:	f0 91 a9 2c 	lds	r31, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    8138:	01 90       	ld	r0, Z+
    813a:	f0 81       	ld	r31, Z
    813c:	e0 2d       	mov	r30, r0
    813e:	94 81       	ldd	r25, Z+4	; 0x04
    8140:	89 17       	cp	r24, r25
    8142:	40 f5       	brcc	.+80     	; 0x8194 <udc_update_iface_desc+0x6c>
    8144:	e0 93 a6 2c 	sts	0x2CA6, r30	; 0x802ca6 <udc_ptr_iface>
    8148:	f0 93 a7 2c 	sts	0x2CA7, r31	; 0x802ca7 <udc_ptr_iface+0x1>
    814c:	22 81       	ldd	r18, Z+2	; 0x02
    814e:	33 81       	ldd	r19, Z+3	; 0x03
    8150:	2e 0f       	add	r18, r30
    8152:	3f 1f       	adc	r19, r31
    8154:	e2 17       	cp	r30, r18
    8156:	f3 07       	cpc	r31, r19
    8158:	f8 f4       	brcc	.+62     	; 0x8198 <udc_update_iface_desc+0x70>
    815a:	91 81       	ldd	r25, Z+1	; 0x01
    815c:	94 30       	cpi	r25, 0x04	; 4
    815e:	61 f4       	brne	.+24     	; 0x8178 <udc_update_iface_desc+0x50>
    8160:	92 81       	ldd	r25, Z+2	; 0x02
    8162:	89 13       	cpse	r24, r25
    8164:	09 c0       	rjmp	.+18     	; 0x8178 <udc_update_iface_desc+0x50>
    8166:	93 81       	ldd	r25, Z+3	; 0x03
    8168:	96 13       	cpse	r25, r22
    816a:	06 c0       	rjmp	.+12     	; 0x8178 <udc_update_iface_desc+0x50>
    816c:	e0 93 a6 2c 	sts	0x2CA6, r30	; 0x802ca6 <udc_ptr_iface>
    8170:	f0 93 a7 2c 	sts	0x2CA7, r31	; 0x802ca7 <udc_ptr_iface+0x1>
    8174:	81 e0       	ldi	r24, 0x01	; 1
    8176:	08 95       	ret
    8178:	90 81       	ld	r25, Z
    817a:	e9 0f       	add	r30, r25
    817c:	f1 1d       	adc	r31, r1
    817e:	e2 17       	cp	r30, r18
    8180:	f3 07       	cpc	r31, r19
    8182:	58 f3       	brcs	.-42     	; 0x815a <udc_update_iface_desc+0x32>
    8184:	e0 93 a6 2c 	sts	0x2CA6, r30	; 0x802ca6 <udc_ptr_iface>
    8188:	f0 93 a7 2c 	sts	0x2CA7, r31	; 0x802ca7 <udc_ptr_iface+0x1>
    818c:	80 e0       	ldi	r24, 0x00	; 0
    818e:	08 95       	ret
    8190:	80 e0       	ldi	r24, 0x00	; 0
    8192:	08 95       	ret
    8194:	80 e0       	ldi	r24, 0x00	; 0
    8196:	08 95       	ret
    8198:	80 e0       	ldi	r24, 0x00	; 0
    819a:	08 95       	ret

0000819c <udc_iface_disable>:
    819c:	ef 92       	push	r14
    819e:	ff 92       	push	r15
    81a0:	1f 93       	push	r17
    81a2:	cf 93       	push	r28
    81a4:	df 93       	push	r29
    81a6:	c8 2f       	mov	r28, r24
    81a8:	60 e0       	ldi	r22, 0x00	; 0
    81aa:	be df       	rcall	.-132    	; 0x8128 <udc_update_iface_desc>
    81ac:	18 2f       	mov	r17, r24
    81ae:	88 23       	and	r24, r24
    81b0:	81 f1       	breq	.+96     	; 0x8212 <udc_iface_disable+0x76>
    81b2:	a0 91 a8 2c 	lds	r26, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    81b6:	b0 91 a9 2c 	lds	r27, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    81ba:	ec 2f       	mov	r30, r28
    81bc:	f0 e0       	ldi	r31, 0x00	; 0
    81be:	ee 0f       	add	r30, r30
    81c0:	ff 1f       	adc	r31, r31
    81c2:	12 96       	adiw	r26, 0x02	; 2
    81c4:	8d 91       	ld	r24, X+
    81c6:	9c 91       	ld	r25, X
    81c8:	13 97       	sbiw	r26, 0x03	; 3
    81ca:	e8 0f       	add	r30, r24
    81cc:	f9 1f       	adc	r31, r25
    81ce:	e0 80       	ld	r14, Z
    81d0:	f1 80       	ldd	r15, Z+1	; 0x01
    81d2:	d7 01       	movw	r26, r14
    81d4:	16 96       	adiw	r26, 0x06	; 6
    81d6:	ed 91       	ld	r30, X+
    81d8:	fc 91       	ld	r31, X
    81da:	17 97       	sbiw	r26, 0x07	; 7
    81dc:	19 95       	eicall
    81de:	68 2f       	mov	r22, r24
    81e0:	8c 2f       	mov	r24, r28
    81e2:	a2 df       	rcall	.-188    	; 0x8128 <udc_update_iface_desc>
    81e4:	18 2f       	mov	r17, r24
    81e6:	88 23       	and	r24, r24
    81e8:	a1 f0       	breq	.+40     	; 0x8212 <udc_iface_disable+0x76>
    81ea:	c0 91 a6 2c 	lds	r28, 0x2CA6	; 0x802ca6 <udc_ptr_iface>
    81ee:	d0 91 a7 2c 	lds	r29, 0x2CA7	; 0x802ca7 <udc_ptr_iface+0x1>
    81f2:	65 e0       	ldi	r22, 0x05	; 5
    81f4:	ce 01       	movw	r24, r28
    81f6:	5d df       	rcall	.-326    	; 0x80b2 <udc_next_desc_in_iface>
    81f8:	ec 01       	movw	r28, r24
    81fa:	89 2b       	or	r24, r25
    81fc:	21 f0       	breq	.+8      	; 0x8206 <udc_iface_disable+0x6a>
    81fe:	8a 81       	ldd	r24, Y+2	; 0x02
    8200:	0e 94 25 30 	call	0x604a	; 0x604a <udd_ep_free>
    8204:	f6 cf       	rjmp	.-20     	; 0x81f2 <udc_iface_disable+0x56>
    8206:	d7 01       	movw	r26, r14
    8208:	12 96       	adiw	r26, 0x02	; 2
    820a:	ed 91       	ld	r30, X+
    820c:	fc 91       	ld	r31, X
    820e:	13 97       	sbiw	r26, 0x03	; 3
    8210:	19 95       	eicall
    8212:	81 2f       	mov	r24, r17
    8214:	df 91       	pop	r29
    8216:	cf 91       	pop	r28
    8218:	1f 91       	pop	r17
    821a:	ff 90       	pop	r15
    821c:	ef 90       	pop	r14
    821e:	08 95       	ret

00008220 <udc_iface_enable>:
    8220:	1f 93       	push	r17
    8222:	cf 93       	push	r28
    8224:	df 93       	push	r29
    8226:	18 2f       	mov	r17, r24
    8228:	7f df       	rcall	.-258    	; 0x8128 <udc_update_iface_desc>
    822a:	88 23       	and	r24, r24
    822c:	41 f1       	breq	.+80     	; 0x827e <udc_iface_enable+0x5e>
    822e:	c0 91 a6 2c 	lds	r28, 0x2CA6	; 0x802ca6 <udc_ptr_iface>
    8232:	d0 91 a7 2c 	lds	r29, 0x2CA7	; 0x802ca7 <udc_ptr_iface+0x1>
    8236:	65 e0       	ldi	r22, 0x05	; 5
    8238:	ce 01       	movw	r24, r28
    823a:	3b df       	rcall	.-394    	; 0x80b2 <udc_next_desc_in_iface>
    823c:	ec 01       	movw	r28, r24
    823e:	89 2b       	or	r24, r25
    8240:	49 f0       	breq	.+18     	; 0x8254 <udc_iface_enable+0x34>
    8242:	4c 81       	ldd	r20, Y+4	; 0x04
    8244:	5d 81       	ldd	r21, Y+5	; 0x05
    8246:	6b 81       	ldd	r22, Y+3	; 0x03
    8248:	8a 81       	ldd	r24, Y+2	; 0x02
    824a:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <udd_ep_alloc>
    824e:	81 11       	cpse	r24, r1
    8250:	f2 cf       	rjmp	.-28     	; 0x8236 <udc_iface_enable+0x16>
    8252:	15 c0       	rjmp	.+42     	; 0x827e <udc_iface_enable+0x5e>
    8254:	a0 91 a8 2c 	lds	r26, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    8258:	b0 91 a9 2c 	lds	r27, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    825c:	e1 2f       	mov	r30, r17
    825e:	f0 e0       	ldi	r31, 0x00	; 0
    8260:	ee 0f       	add	r30, r30
    8262:	ff 1f       	adc	r31, r31
    8264:	12 96       	adiw	r26, 0x02	; 2
    8266:	8d 91       	ld	r24, X+
    8268:	9c 91       	ld	r25, X
    826a:	13 97       	sbiw	r26, 0x03	; 3
    826c:	e8 0f       	add	r30, r24
    826e:	f9 1f       	adc	r31, r25
    8270:	01 90       	ld	r0, Z+
    8272:	f0 81       	ld	r31, Z
    8274:	e0 2d       	mov	r30, r0
    8276:	01 90       	ld	r0, Z+
    8278:	f0 81       	ld	r31, Z
    827a:	e0 2d       	mov	r30, r0
    827c:	19 95       	eicall
    827e:	df 91       	pop	r29
    8280:	cf 91       	pop	r28
    8282:	1f 91       	pop	r17
    8284:	08 95       	ret

00008286 <udc_start>:
    8286:	0c 94 95 2d 	jmp	0x5b2a	; 0x5b2a <udd_enable>
    828a:	08 95       	ret

0000828c <udc_reset>:
    828c:	cf 93       	push	r28
    828e:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <udc_num_configuration>
    8292:	88 23       	and	r24, r24
    8294:	c1 f0       	breq	.+48     	; 0x82c6 <udc_reset+0x3a>
    8296:	e0 91 a8 2c 	lds	r30, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    829a:	f0 91 a9 2c 	lds	r31, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    829e:	01 90       	ld	r0, Z+
    82a0:	f0 81       	ld	r31, Z
    82a2:	e0 2d       	mov	r30, r0
    82a4:	84 81       	ldd	r24, Z+4	; 0x04
    82a6:	88 23       	and	r24, r24
    82a8:	71 f0       	breq	.+28     	; 0x82c6 <udc_reset+0x3a>
    82aa:	c0 e0       	ldi	r28, 0x00	; 0
    82ac:	8c 2f       	mov	r24, r28
    82ae:	76 df       	rcall	.-276    	; 0x819c <udc_iface_disable>
    82b0:	cf 5f       	subi	r28, 0xFF	; 255
    82b2:	e0 91 a8 2c 	lds	r30, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    82b6:	f0 91 a9 2c 	lds	r31, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    82ba:	01 90       	ld	r0, Z+
    82bc:	f0 81       	ld	r31, Z
    82be:	e0 2d       	mov	r30, r0
    82c0:	84 81       	ldd	r24, Z+4	; 0x04
    82c2:	c8 17       	cp	r28, r24
    82c4:	98 f3       	brcs	.-26     	; 0x82ac <udc_reset+0x20>
    82c6:	10 92 aa 2c 	sts	0x2CAA, r1	; 0x802caa <udc_num_configuration>
    82ca:	80 91 ae 2c 	lds	r24, 0x2CAE	; 0x802cae <udc_device_status>
    82ce:	81 fd       	sbrc	r24, 1
    82d0:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <usb_callback_remotewakeup_disable>
    82d4:	10 92 ae 2c 	sts	0x2CAE, r1	; 0x802cae <udc_device_status>
    82d8:	10 92 af 2c 	sts	0x2CAF, r1	; 0x802caf <udc_device_status+0x1>
    82dc:	cf 91       	pop	r28
    82de:	08 95       	ret

000082e0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    82e0:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    82e2:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <udc_num_configuration>
    82e6:	88 23       	and	r24, r24
    82e8:	49 f1       	breq	.+82     	; 0x833c <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    82ea:	a0 91 a8 2c 	lds	r26, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    82ee:	b0 91 a9 2c 	lds	r27, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    82f2:	ed 91       	ld	r30, X+
    82f4:	fc 91       	ld	r31, X
    82f6:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    82f8:	84 81       	ldd	r24, Z+4	; 0x04
    82fa:	88 23       	and	r24, r24
    82fc:	f9 f0       	breq	.+62     	; 0x833c <udc_sof_notify+0x5c>
    82fe:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    8300:	ec 2f       	mov	r30, r28
    8302:	f0 e0       	ldi	r31, 0x00	; 0
    8304:	ee 0f       	add	r30, r30
    8306:	ff 1f       	adc	r31, r31
    8308:	12 96       	adiw	r26, 0x02	; 2
    830a:	8d 91       	ld	r24, X+
    830c:	9c 91       	ld	r25, X
    830e:	13 97       	sbiw	r26, 0x03	; 3
    8310:	e8 0f       	add	r30, r24
    8312:	f9 1f       	adc	r31, r25
    8314:	01 90       	ld	r0, Z+
    8316:	f0 81       	ld	r31, Z
    8318:	e0 2d       	mov	r30, r0
    831a:	00 84       	ldd	r0, Z+8	; 0x08
    831c:	f1 85       	ldd	r31, Z+9	; 0x09
    831e:	e0 2d       	mov	r30, r0
    8320:	30 97       	sbiw	r30, 0x00	; 0
    8322:	09 f0       	breq	.+2      	; 0x8326 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    8324:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    8326:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    8328:	a0 91 a8 2c 	lds	r26, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    832c:	b0 91 a9 2c 	lds	r27, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    8330:	ed 91       	ld	r30, X+
    8332:	fc 91       	ld	r31, X
    8334:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    8336:	84 81       	ldd	r24, Z+4	; 0x04
    8338:	c8 17       	cp	r28, r24
    833a:	10 f3       	brcs	.-60     	; 0x8300 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    833c:	cf 91       	pop	r28
    833e:	08 95       	ret

00008340 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    8340:	0f 93       	push	r16
    8342:	1f 93       	push	r17
    8344:	cf 93       	push	r28
    8346:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    8348:	ef eb       	ldi	r30, 0xBF	; 191
    834a:	fc e2       	ldi	r31, 0x2C	; 44
    834c:	12 86       	std	Z+10, r1	; 0x0a
    834e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    8350:	14 86       	std	Z+12, r1	; 0x0c
    8352:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    8354:	16 86       	std	Z+14, r1	; 0x0e
    8356:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    8358:	80 81       	ld	r24, Z
    835a:	88 23       	and	r24, r24
    835c:	0c f0       	brlt	.+2      	; 0x8360 <udc_process_setup+0x20>
    835e:	95 c2       	rjmp	.+1322   	; 0x888a <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    8360:	20 91 c5 2c 	lds	r18, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    8364:	30 91 c6 2c 	lds	r19, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    8368:	21 15       	cp	r18, r1
    836a:	31 05       	cpc	r19, r1
    836c:	09 f0       	breq	.+2      	; 0x8370 <udc_process_setup+0x30>
    836e:	88 c2       	rjmp	.+1296   	; 0x8880 <udc_process_setup+0x540>
    8370:	7f c2       	rjmp	.+1278   	; 0x8870 <udc_process_setup+0x530>
    8372:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    8374:	09 f0       	breq	.+2      	; 0x8378 <udc_process_setup+0x38>
    8376:	ab c0       	rjmp	.+342    	; 0x84ce <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    8378:	90 91 c0 2c 	lds	r25, 0x2CC0	; 0x802cc0 <udd_g_ctrlreq+0x1>
    837c:	96 30       	cpi	r25, 0x06	; 6
    837e:	81 f0       	breq	.+32     	; 0x83a0 <udc_process_setup+0x60>
    8380:	98 30       	cpi	r25, 0x08	; 8
    8382:	09 f4       	brne	.+2      	; 0x8386 <udc_process_setup+0x46>
    8384:	99 c0       	rjmp	.+306    	; 0x84b8 <udc_process_setup+0x178>
    8386:	91 11       	cpse	r25, r1
    8388:	a2 c0       	rjmp	.+324    	; 0x84ce <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    838a:	22 30       	cpi	r18, 0x02	; 2
    838c:	31 05       	cpc	r19, r1
    838e:	09 f0       	breq	.+2      	; 0x8392 <udc_process_setup+0x52>
    8390:	2b c2       	rjmp	.+1110   	; 0x87e8 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    8392:	62 e0       	ldi	r22, 0x02	; 2
    8394:	70 e0       	ldi	r23, 0x00	; 0
    8396:	8e ea       	ldi	r24, 0xAE	; 174
    8398:	9c e2       	ldi	r25, 0x2C	; 44
    839a:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <udd_set_setup_payload>
    839e:	7e c2       	rjmp	.+1276   	; 0x889c <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    83a0:	80 91 c1 2c 	lds	r24, 0x2CC1	; 0x802cc1 <udd_g_ctrlreq+0x2>
    83a4:	90 91 c2 2c 	lds	r25, 0x2CC2	; 0x802cc2 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    83a8:	29 2f       	mov	r18, r25
    83aa:	33 27       	eor	r19, r19
    83ac:	22 30       	cpi	r18, 0x02	; 2
    83ae:	31 05       	cpc	r19, r1
    83b0:	b1 f0       	breq	.+44     	; 0x83de <udc_process_setup+0x9e>
    83b2:	20 f4       	brcc	.+8      	; 0x83bc <udc_process_setup+0x7c>
    83b4:	21 30       	cpi	r18, 0x01	; 1
    83b6:	31 05       	cpc	r19, r1
    83b8:	41 f0       	breq	.+16     	; 0x83ca <udc_process_setup+0x8a>
    83ba:	d8 c1       	rjmp	.+944    	; 0x876c <udc_process_setup+0x42c>
    83bc:	23 30       	cpi	r18, 0x03	; 3
    83be:	31 05       	cpc	r19, r1
    83c0:	f1 f1       	breq	.+124    	; 0x843e <udc_process_setup+0xfe>
    83c2:	2f 30       	cpi	r18, 0x0F	; 15
    83c4:	31 05       	cpc	r19, r1
    83c6:	61 f1       	breq	.+88     	; 0x8420 <udc_process_setup+0xe0>
    83c8:	d1 c1       	rjmp	.+930    	; 0x876c <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    83ca:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <udc_config>
    83ce:	90 91 4e 20 	lds	r25, 0x204E	; 0x80204e <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    83d2:	dc 01       	movw	r26, r24
    83d4:	6c 91       	ld	r22, X
    83d6:	70 e0       	ldi	r23, 0x00	; 0
    83d8:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <udd_set_setup_payload>
    83dc:	5e c0       	rjmp	.+188    	; 0x849a <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    83de:	e0 91 4d 20 	lds	r30, 0x204D	; 0x80204d <udc_config>
    83e2:	f0 91 4e 20 	lds	r31, 0x204E	; 0x80204e <udc_config+0x1>
    83e6:	21 89       	ldd	r18, Z+17	; 0x11
    83e8:	82 17       	cp	r24, r18
    83ea:	08 f0       	brcs	.+2      	; 0x83ee <udc_process_setup+0xae>
    83ec:	fd c1       	rjmp	.+1018   	; 0x87e8 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    83ee:	99 27       	eor	r25, r25
    83f0:	88 0f       	add	r24, r24
    83f2:	99 1f       	adc	r25, r25
    83f4:	88 0f       	add	r24, r24
    83f6:	99 1f       	adc	r25, r25
    83f8:	e0 91 4f 20 	lds	r30, 0x204F	; 0x80204f <udc_config+0x2>
    83fc:	f0 91 50 20 	lds	r31, 0x2050	; 0x802050 <udc_config+0x3>
    8400:	e8 0f       	add	r30, r24
    8402:	f9 1f       	adc	r31, r25
    8404:	80 81       	ld	r24, Z
    8406:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    8408:	fc 01       	movw	r30, r24
    840a:	62 81       	ldd	r22, Z+2	; 0x02
    840c:	73 81       	ldd	r23, Z+3	; 0x03
    840e:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    8412:	e0 91 c7 2c 	lds	r30, 0x2CC7	; 0x802cc7 <udd_g_ctrlreq+0x8>
    8416:	f0 91 c8 2c 	lds	r31, 0x2CC8	; 0x802cc8 <udd_g_ctrlreq+0x9>
    841a:	82 e0       	ldi	r24, 0x02	; 2
    841c:	81 83       	std	Z+1, r24	; 0x01
    841e:	3d c0       	rjmp	.+122    	; 0x849a <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    8420:	80 91 51 20 	lds	r24, 0x2051	; 0x802051 <udc_config+0x4>
    8424:	90 91 52 20 	lds	r25, 0x2052	; 0x802052 <udc_config+0x5>
    8428:	00 97       	sbiw	r24, 0x00	; 0
    842a:	09 f4       	brne	.+2      	; 0x842e <udc_process_setup+0xee>
    842c:	dd c1       	rjmp	.+954    	; 0x87e8 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    842e:	dc 01       	movw	r26, r24
    8430:	12 96       	adiw	r26, 0x02	; 2
    8432:	6d 91       	ld	r22, X+
    8434:	7c 91       	ld	r23, X
    8436:	13 97       	sbiw	r26, 0x03	; 3
    8438:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <udd_set_setup_payload>
    843c:	2e c0       	rjmp	.+92     	; 0x849a <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    843e:	99 27       	eor	r25, r25
    8440:	81 30       	cpi	r24, 0x01	; 1
    8442:	91 05       	cpc	r25, r1
    8444:	99 f0       	breq	.+38     	; 0x846c <udc_process_setup+0x12c>
    8446:	58 f0       	brcs	.+22     	; 0x845e <udc_process_setup+0x11e>
    8448:	82 30       	cpi	r24, 0x02	; 2
    844a:	91 05       	cpc	r25, r1
    844c:	09 f4       	brne	.+2      	; 0x8450 <udc_process_setup+0x110>
    844e:	22 c2       	rjmp	.+1092   	; 0x8894 <udc_process_setup+0x554>
    8450:	03 97       	sbiw	r24, 0x03	; 3
    8452:	09 f0       	breq	.+2      	; 0x8456 <udc_process_setup+0x116>
    8454:	94 c1       	rjmp	.+808    	; 0x877e <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    8456:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    8458:	ea ee       	ldi	r30, 0xEA	; 234
    845a:	f6 e2       	ldi	r31, 0x26	; 38
    845c:	0a c0       	rjmp	.+20     	; 0x8472 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    845e:	64 e0       	ldi	r22, 0x04	; 4
    8460:	70 e0       	ldi	r23, 0x00	; 0
    8462:	82 ef       	ldi	r24, 0xF2	; 242
    8464:	90 e2       	ldi	r25, 0x20	; 32
    8466:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <udd_set_setup_payload>
    846a:	17 c0       	rjmp	.+46     	; 0x849a <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    846c:	e1 ee       	ldi	r30, 0xE1	; 225
    846e:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    8470:	30 e1       	ldi	r19, 0x10	; 16
    8472:	a4 eb       	ldi	r26, 0xB4	; 180
    8474:	b0 e2       	ldi	r27, 0x20	; 32
    8476:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    8478:	81 91       	ld	r24, Z+
    847a:	90 e0       	ldi	r25, 0x00	; 0
    847c:	8d 93       	st	X+, r24
    847e:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    8480:	2f 5f       	subi	r18, 0xFF	; 255
    8482:	23 17       	cp	r18, r19
    8484:	c8 f3       	brcs	.-14     	; 0x8478 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    8486:	63 2f       	mov	r22, r19
    8488:	66 0f       	add	r22, r22
    848a:	6e 5f       	subi	r22, 0xFE	; 254
    848c:	60 93 b2 20 	sts	0x20B2, r22	; 0x8020b2 <udc_string_desc>
		udd_set_setup_payload(
    8490:	70 e0       	ldi	r23, 0x00	; 0
    8492:	82 eb       	ldi	r24, 0xB2	; 178
    8494:	90 e2       	ldi	r25, 0x20	; 32
    8496:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    849a:	ef eb       	ldi	r30, 0xBF	; 191
    849c:	fc e2       	ldi	r31, 0x2C	; 44
    849e:	86 81       	ldd	r24, Z+6	; 0x06
    84a0:	97 81       	ldd	r25, Z+7	; 0x07
    84a2:	22 85       	ldd	r18, Z+10	; 0x0a
    84a4:	33 85       	ldd	r19, Z+11	; 0x0b
    84a6:	82 17       	cp	r24, r18
    84a8:	93 07       	cpc	r25, r19
    84aa:	08 f0       	brcs	.+2      	; 0x84ae <udc_process_setup+0x16e>
    84ac:	f7 c1       	rjmp	.+1006   	; 0x889c <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    84ae:	80 93 c9 2c 	sts	0x2CC9, r24	; 0x802cc9 <udd_g_ctrlreq+0xa>
    84b2:	90 93 ca 2c 	sts	0x2CCA, r25	; 0x802cca <udd_g_ctrlreq+0xb>
    84b6:	f2 c1       	rjmp	.+996    	; 0x889c <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    84b8:	21 30       	cpi	r18, 0x01	; 1
    84ba:	31 05       	cpc	r19, r1
    84bc:	09 f0       	breq	.+2      	; 0x84c0 <udc_process_setup+0x180>
    84be:	94 c1       	rjmp	.+808    	; 0x87e8 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    84c0:	61 e0       	ldi	r22, 0x01	; 1
    84c2:	70 e0       	ldi	r23, 0x00	; 0
    84c4:	8a ea       	ldi	r24, 0xAA	; 170
    84c6:	9c e2       	ldi	r25, 0x2C	; 44
    84c8:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <udd_set_setup_payload>
    84cc:	e7 c1       	rjmp	.+974    	; 0x889c <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    84ce:	81 30       	cpi	r24, 0x01	; 1
    84d0:	e9 f5       	brne	.+122    	; 0x854c <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    84d2:	90 91 c0 2c 	lds	r25, 0x2CC0	; 0x802cc0 <udd_g_ctrlreq+0x1>
    84d6:	9a 30       	cpi	r25, 0x0A	; 10
    84d8:	c9 f5       	brne	.+114    	; 0x854c <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    84da:	21 30       	cpi	r18, 0x01	; 1
    84dc:	31 05       	cpc	r19, r1
    84de:	09 f0       	breq	.+2      	; 0x84e2 <udc_process_setup+0x1a2>
    84e0:	53 c1       	rjmp	.+678    	; 0x8788 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    84e2:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <udc_num_configuration>
    84e6:	88 23       	and	r24, r24
    84e8:	09 f4       	brne	.+2      	; 0x84ec <udc_process_setup+0x1ac>
    84ea:	4e c1       	rjmp	.+668    	; 0x8788 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    84ec:	c0 91 c3 2c 	lds	r28, 0x2CC3	; 0x802cc3 <udd_g_ctrlreq+0x4>
    84f0:	d0 91 c4 2c 	lds	r29, 0x2CC4	; 0x802cc4 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    84f4:	00 91 a8 2c 	lds	r16, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    84f8:	10 91 a9 2c 	lds	r17, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    84fc:	d8 01       	movw	r26, r16
    84fe:	ed 91       	ld	r30, X+
    8500:	fc 91       	ld	r31, X
    8502:	84 81       	ldd	r24, Z+4	; 0x04
    8504:	c8 17       	cp	r28, r24
    8506:	08 f0       	brcs	.+2      	; 0x850a <udc_process_setup+0x1ca>
    8508:	3f c1       	rjmp	.+638    	; 0x8788 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    850a:	60 e0       	ldi	r22, 0x00	; 0
    850c:	8c 2f       	mov	r24, r28
    850e:	0c de       	rcall	.-1000   	; 0x8128 <udc_update_iface_desc>
    8510:	88 23       	and	r24, r24
    8512:	09 f4       	brne	.+2      	; 0x8516 <udc_process_setup+0x1d6>
    8514:	34 c1       	rjmp	.+616    	; 0x877e <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    8516:	ce 01       	movw	r24, r28
    8518:	99 27       	eor	r25, r25
    851a:	88 0f       	add	r24, r24
    851c:	99 1f       	adc	r25, r25
    851e:	d8 01       	movw	r26, r16
    8520:	12 96       	adiw	r26, 0x02	; 2
    8522:	ed 91       	ld	r30, X+
    8524:	fc 91       	ld	r31, X
    8526:	13 97       	sbiw	r26, 0x03	; 3
    8528:	e8 0f       	add	r30, r24
    852a:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    852c:	01 90       	ld	r0, Z+
    852e:	f0 81       	ld	r31, Z
    8530:	e0 2d       	mov	r30, r0
    8532:	86 81       	ldd	r24, Z+6	; 0x06
    8534:	97 81       	ldd	r25, Z+7	; 0x07
    8536:	fc 01       	movw	r30, r24
    8538:	19 95       	eicall
    853a:	80 93 ac 2c 	sts	0x2CAC, r24	; 0x802cac <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    853e:	61 e0       	ldi	r22, 0x01	; 1
    8540:	70 e0       	ldi	r23, 0x00	; 0
    8542:	8c ea       	ldi	r24, 0xAC	; 172
    8544:	9c e2       	ldi	r25, 0x2C	; 44
    8546:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <udd_set_setup_payload>
    854a:	a8 c1       	rjmp	.+848    	; 0x889c <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    854c:	82 30       	cpi	r24, 0x02	; 2
    854e:	09 f0       	breq	.+2      	; 0x8552 <udc_process_setup+0x212>
    8550:	16 c1       	rjmp	.+556    	; 0x877e <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    8552:	80 91 c0 2c 	lds	r24, 0x2CC0	; 0x802cc0 <udd_g_ctrlreq+0x1>
    8556:	81 11       	cpse	r24, r1
    8558:	0b c1       	rjmp	.+534    	; 0x8770 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    855a:	22 30       	cpi	r18, 0x02	; 2
    855c:	31 05       	cpc	r19, r1
    855e:	09 f0       	breq	.+2      	; 0x8562 <udc_process_setup+0x222>
    8560:	43 c1       	rjmp	.+646    	; 0x87e8 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    8562:	80 91 c3 2c 	lds	r24, 0x2CC3	; 0x802cc3 <udd_g_ctrlreq+0x4>
    8566:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <udd_ep_is_halted>
    856a:	90 e0       	ldi	r25, 0x00	; 0
    856c:	80 93 a4 2c 	sts	0x2CA4, r24	; 0x802ca4 <udc_ep_status.4757>
    8570:	90 93 a5 2c 	sts	0x2CA5, r25	; 0x802ca5 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    8574:	62 e0       	ldi	r22, 0x02	; 2
    8576:	70 e0       	ldi	r23, 0x00	; 0
    8578:	84 ea       	ldi	r24, 0xA4	; 164
    857a:	9c e2       	ldi	r25, 0x2C	; 44
    857c:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <udd_set_setup_payload>
    8580:	8d c1       	rjmp	.+794    	; 0x889c <udc_process_setup+0x55c>
    8582:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    8584:	09 f0       	breq	.+2      	; 0x8588 <udc_process_setup+0x248>
    8586:	a0 c0       	rjmp	.+320    	; 0x86c8 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    8588:	90 91 c0 2c 	lds	r25, 0x2CC0	; 0x802cc0 <udd_g_ctrlreq+0x1>
    858c:	93 30       	cpi	r25, 0x03	; 3
    858e:	91 f1       	breq	.+100    	; 0x85f4 <udc_process_setup+0x2b4>
    8590:	18 f4       	brcc	.+6      	; 0x8598 <udc_process_setup+0x258>
    8592:	91 30       	cpi	r25, 0x01	; 1
    8594:	a9 f0       	breq	.+42     	; 0x85c0 <udc_process_setup+0x280>
    8596:	98 c0       	rjmp	.+304    	; 0x86c8 <udc_process_setup+0x388>
    8598:	95 30       	cpi	r25, 0x05	; 5
    859a:	21 f0       	breq	.+8      	; 0x85a4 <udc_process_setup+0x264>
    859c:	99 30       	cpi	r25, 0x09	; 9
    859e:	09 f4       	brne	.+2      	; 0x85a2 <udc_process_setup+0x262>
    85a0:	43 c0       	rjmp	.+134    	; 0x8628 <udc_process_setup+0x2e8>
    85a2:	92 c0       	rjmp	.+292    	; 0x86c8 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    85a4:	80 91 c5 2c 	lds	r24, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    85a8:	90 91 c6 2c 	lds	r25, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    85ac:	89 2b       	or	r24, r25
    85ae:	09 f0       	breq	.+2      	; 0x85b2 <udc_process_setup+0x272>
    85b0:	1b c1       	rjmp	.+566    	; 0x87e8 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    85b2:	8e e8       	ldi	r24, 0x8E	; 142
    85b4:	90 e4       	ldi	r25, 0x40	; 64
    85b6:	80 93 cb 2c 	sts	0x2CCB, r24	; 0x802ccb <udd_g_ctrlreq+0xc>
    85ba:	90 93 cc 2c 	sts	0x2CCC, r25	; 0x802ccc <udd_g_ctrlreq+0xd>
    85be:	6e c1       	rjmp	.+732    	; 0x889c <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    85c0:	80 91 c5 2c 	lds	r24, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    85c4:	90 91 c6 2c 	lds	r25, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    85c8:	89 2b       	or	r24, r25
    85ca:	09 f0       	breq	.+2      	; 0x85ce <udc_process_setup+0x28e>
    85cc:	0d c1       	rjmp	.+538    	; 0x87e8 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    85ce:	80 91 c1 2c 	lds	r24, 0x2CC1	; 0x802cc1 <udd_g_ctrlreq+0x2>
    85d2:	90 91 c2 2c 	lds	r25, 0x2CC2	; 0x802cc2 <udd_g_ctrlreq+0x3>
    85d6:	01 97       	sbiw	r24, 0x01	; 1
    85d8:	09 f0       	breq	.+2      	; 0x85dc <udc_process_setup+0x29c>
    85da:	06 c1       	rjmp	.+524    	; 0x87e8 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    85dc:	80 91 ae 2c 	lds	r24, 0x2CAE	; 0x802cae <udc_device_status>
    85e0:	90 91 af 2c 	lds	r25, 0x2CAF	; 0x802caf <udc_device_status+0x1>
    85e4:	8d 7f       	andi	r24, 0xFD	; 253
    85e6:	80 93 ae 2c 	sts	0x2CAE, r24	; 0x802cae <udc_device_status>
    85ea:	90 93 af 2c 	sts	0x2CAF, r25	; 0x802caf <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    85ee:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <usb_callback_remotewakeup_disable>
    85f2:	54 c1       	rjmp	.+680    	; 0x889c <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    85f4:	80 91 c5 2c 	lds	r24, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    85f8:	90 91 c6 2c 	lds	r25, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    85fc:	89 2b       	or	r24, r25
    85fe:	09 f0       	breq	.+2      	; 0x8602 <udc_process_setup+0x2c2>
    8600:	f3 c0       	rjmp	.+486    	; 0x87e8 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    8602:	80 91 c1 2c 	lds	r24, 0x2CC1	; 0x802cc1 <udd_g_ctrlreq+0x2>
    8606:	90 91 c2 2c 	lds	r25, 0x2CC2	; 0x802cc2 <udd_g_ctrlreq+0x3>
    860a:	01 97       	sbiw	r24, 0x01	; 1
    860c:	09 f0       	breq	.+2      	; 0x8610 <udc_process_setup+0x2d0>
    860e:	b2 c0       	rjmp	.+356    	; 0x8774 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    8610:	80 91 ae 2c 	lds	r24, 0x2CAE	; 0x802cae <udc_device_status>
    8614:	90 91 af 2c 	lds	r25, 0x2CAF	; 0x802caf <udc_device_status+0x1>
    8618:	82 60       	ori	r24, 0x02	; 2
    861a:	80 93 ae 2c 	sts	0x2CAE, r24	; 0x802cae <udc_device_status>
    861e:	90 93 af 2c 	sts	0x2CAF, r25	; 0x802caf <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    8622:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <usb_callback_remotewakeup_enable>
    8626:	3a c1       	rjmp	.+628    	; 0x889c <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    8628:	80 91 c5 2c 	lds	r24, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    862c:	90 91 c6 2c 	lds	r25, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    8630:	89 2b       	or	r24, r25
    8632:	09 f0       	breq	.+2      	; 0x8636 <udc_process_setup+0x2f6>
    8634:	d9 c0       	rjmp	.+434    	; 0x87e8 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    8636:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <udd_getaddress>
    863a:	88 23       	and	r24, r24
    863c:	09 f4       	brne	.+2      	; 0x8640 <udc_process_setup+0x300>
    863e:	9f c0       	rjmp	.+318    	; 0x877e <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    8640:	20 91 c1 2c 	lds	r18, 0x2CC1	; 0x802cc1 <udd_g_ctrlreq+0x2>
    8644:	30 91 c2 2c 	lds	r19, 0x2CC2	; 0x802cc2 <udd_g_ctrlreq+0x3>
    8648:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    864a:	e0 91 4d 20 	lds	r30, 0x204D	; 0x80204d <udc_config>
    864e:	f0 91 4e 20 	lds	r31, 0x204E	; 0x80204e <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    8652:	81 89       	ldd	r24, Z+17	; 0x11
    8654:	90 e0       	ldi	r25, 0x00	; 0
    8656:	82 17       	cp	r24, r18
    8658:	93 07       	cpc	r25, r19
    865a:	08 f4       	brcc	.+2      	; 0x865e <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    865c:	90 c0       	rjmp	.+288    	; 0x877e <udc_process_setup+0x43e>
    865e:	16 de       	rcall	.-980    	; 0x828c <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    8660:	80 91 c1 2c 	lds	r24, 0x2CC1	; 0x802cc1 <udd_g_ctrlreq+0x2>
    8664:	90 91 c2 2c 	lds	r25, 0x2CC2	; 0x802cc2 <udd_g_ctrlreq+0x3>
    8668:	80 93 aa 2c 	sts	0x2CAA, r24	; 0x802caa <udc_num_configuration>
	if (udc_num_configuration == 0) {
    866c:	88 23       	and	r24, r24
    866e:	09 f4       	brne	.+2      	; 0x8672 <udc_process_setup+0x332>
    8670:	15 c1       	rjmp	.+554    	; 0x889c <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    8672:	99 27       	eor	r25, r25
    8674:	81 50       	subi	r24, 0x01	; 1
    8676:	90 4c       	sbci	r25, 0xC0	; 192
    8678:	88 0f       	add	r24, r24
    867a:	99 1f       	adc	r25, r25
    867c:	88 0f       	add	r24, r24
    867e:	99 1f       	adc	r25, r25
    8680:	e0 91 4f 20 	lds	r30, 0x204F	; 0x80204f <udc_config+0x2>
    8684:	f0 91 50 20 	lds	r31, 0x2050	; 0x802050 <udc_config+0x3>
    8688:	e8 0f       	add	r30, r24
    868a:	f9 1f       	adc	r31, r25
    868c:	e0 93 a8 2c 	sts	0x2CA8, r30	; 0x802ca8 <udc_ptr_conf>
    8690:	f0 93 a9 2c 	sts	0x2CA9, r31	; 0x802ca9 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    8694:	01 90       	ld	r0, Z+
    8696:	f0 81       	ld	r31, Z
    8698:	e0 2d       	mov	r30, r0
    869a:	84 81       	ldd	r24, Z+4	; 0x04
    869c:	88 23       	and	r24, r24
    869e:	09 f4       	brne	.+2      	; 0x86a2 <udc_process_setup+0x362>
    86a0:	fd c0       	rjmp	.+506    	; 0x889c <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    86a2:	c0 e0       	ldi	r28, 0x00	; 0
    86a4:	60 e0       	ldi	r22, 0x00	; 0
    86a6:	8c 2f       	mov	r24, r28
    86a8:	bb dd       	rcall	.-1162   	; 0x8220 <udc_iface_enable>
    86aa:	88 23       	and	r24, r24
    86ac:	09 f4       	brne	.+2      	; 0x86b0 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    86ae:	67 c0       	rjmp	.+206    	; 0x877e <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    86b0:	cf 5f       	subi	r28, 0xFF	; 255
    86b2:	e0 91 a8 2c 	lds	r30, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    86b6:	f0 91 a9 2c 	lds	r31, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    86ba:	01 90       	ld	r0, Z+
    86bc:	f0 81       	ld	r31, Z
    86be:	e0 2d       	mov	r30, r0
    86c0:	84 81       	ldd	r24, Z+4	; 0x04
    86c2:	c8 17       	cp	r28, r24
    86c4:	78 f3       	brcs	.-34     	; 0x86a4 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    86c6:	ea c0       	rjmp	.+468    	; 0x889c <udc_process_setup+0x55c>
    86c8:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    86ca:	e9 f4       	brne	.+58     	; 0x8706 <udc_process_setup+0x3c6>
    86cc:	90 91 c0 2c 	lds	r25, 0x2CC0	; 0x802cc0 <udd_g_ctrlreq+0x1>
    86d0:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    86d2:	c9 f4       	brne	.+50     	; 0x8706 <udc_process_setup+0x3c6>
    86d4:	80 91 c5 2c 	lds	r24, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    86d8:	90 91 c6 2c 	lds	r25, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    86dc:	89 2b       	or	r24, r25
    86de:	09 f0       	breq	.+2      	; 0x86e2 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    86e0:	53 c0       	rjmp	.+166    	; 0x8788 <udc_process_setup+0x448>
    86e2:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <udc_num_configuration>
    86e6:	88 23       	and	r24, r24
    86e8:	09 f4       	brne	.+2      	; 0x86ec <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    86ea:	4e c0       	rjmp	.+156    	; 0x8788 <udc_process_setup+0x448>
    86ec:	ef eb       	ldi	r30, 0xBF	; 191
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    86ee:	fc e2       	ldi	r31, 0x2C	; 44

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    86f0:	c4 81       	ldd	r28, Z+4	; 0x04
    86f2:	d2 81       	ldd	r29, Z+2	; 0x02
    86f4:	8c 2f       	mov	r24, r28
    86f6:	52 dd       	rcall	.-1372   	; 0x819c <udc_iface_disable>
    86f8:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    86fa:	09 f4       	brne	.+2      	; 0x86fe <udc_process_setup+0x3be>
    86fc:	40 c0       	rjmp	.+128    	; 0x877e <udc_process_setup+0x43e>
    86fe:	6d 2f       	mov	r22, r29
    8700:	8c 2f       	mov	r24, r28
    8702:	8e dd       	rcall	.-1252   	; 0x8220 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    8704:	3a c0       	rjmp	.+116    	; 0x877a <udc_process_setup+0x43a>
    8706:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    8708:	d1 f5       	brne	.+116    	; 0x877e <udc_process_setup+0x43e>
    870a:	80 91 c0 2c 	lds	r24, 0x2CC0	; 0x802cc0 <udd_g_ctrlreq+0x1>
    870e:	81 30       	cpi	r24, 0x01	; 1
    8710:	19 f0       	breq	.+6      	; 0x8718 <udc_process_setup+0x3d8>
    8712:	83 30       	cpi	r24, 0x03	; 3
    8714:	a1 f0       	breq	.+40     	; 0x873e <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    8716:	30 c0       	rjmp	.+96     	; 0x8778 <udc_process_setup+0x438>
    8718:	80 91 c5 2c 	lds	r24, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    871c:	90 91 c6 2c 	lds	r25, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    8720:	89 2b       	or	r24, r25
    8722:	09 f0       	breq	.+2      	; 0x8726 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    8724:	61 c0       	rjmp	.+194    	; 0x87e8 <udc_process_setup+0x4a8>
    8726:	80 91 c1 2c 	lds	r24, 0x2CC1	; 0x802cc1 <udd_g_ctrlreq+0x2>
    872a:	90 91 c2 2c 	lds	r25, 0x2CC2	; 0x802cc2 <udd_g_ctrlreq+0x3>
    872e:	89 2b       	or	r24, r25
    8730:	09 f0       	breq	.+2      	; 0x8734 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    8732:	5a c0       	rjmp	.+180    	; 0x87e8 <udc_process_setup+0x4a8>
    8734:	80 91 c3 2c 	lds	r24, 0x2CC3	; 0x802cc3 <udd_g_ctrlreq+0x4>
    8738:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    873c:	1e c0       	rjmp	.+60     	; 0x877a <udc_process_setup+0x43a>
    873e:	80 91 c5 2c 	lds	r24, 0x2CC5	; 0x802cc5 <udd_g_ctrlreq+0x6>
    8742:	90 91 c6 2c 	lds	r25, 0x2CC6	; 0x802cc6 <udd_g_ctrlreq+0x7>
    8746:	89 2b       	or	r24, r25
    8748:	09 f0       	breq	.+2      	; 0x874c <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    874a:	4e c0       	rjmp	.+156    	; 0x87e8 <udc_process_setup+0x4a8>
    874c:	80 91 c1 2c 	lds	r24, 0x2CC1	; 0x802cc1 <udd_g_ctrlreq+0x2>
    8750:	90 91 c2 2c 	lds	r25, 0x2CC2	; 0x802cc2 <udd_g_ctrlreq+0x3>
    8754:	89 2b       	or	r24, r25
    8756:	09 f0       	breq	.+2      	; 0x875a <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    8758:	47 c0       	rjmp	.+142    	; 0x87e8 <udc_process_setup+0x4a8>
    875a:	cf eb       	ldi	r28, 0xBF	; 191
    875c:	dc e2       	ldi	r29, 0x2C	; 44
    875e:	8c 81       	ldd	r24, Y+4	; 0x04
    8760:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    8764:	8c 81       	ldd	r24, Y+4	; 0x04
    8766:	0e 94 41 30 	call	0x6082	; 0x6082 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    876a:	07 c0       	rjmp	.+14     	; 0x877a <udc_process_setup+0x43a>
    876c:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    876e:	05 c0       	rjmp	.+10     	; 0x877a <udc_process_setup+0x43a>
    8770:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    8772:	03 c0       	rjmp	.+6      	; 0x877a <udc_process_setup+0x43a>
    8774:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    8776:	01 c0       	rjmp	.+2      	; 0x877a <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    8778:	80 e0       	ldi	r24, 0x00	; 0
    877a:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    877c:	90 c0       	rjmp	.+288    	; 0x889e <udc_process_setup+0x55e>
    877e:	80 91 bf 2c 	lds	r24, 0x2CBF	; 0x802cbf <udd_g_ctrlreq>
    8782:	8f 71       	andi	r24, 0x1F	; 31
    8784:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    8786:	81 f5       	brne	.+96     	; 0x87e8 <udc_process_setup+0x4a8>
    8788:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <udc_num_configuration>
    878c:	88 23       	and	r24, r24
    878e:	09 f4       	brne	.+2      	; 0x8792 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    8790:	71 c0       	rjmp	.+226    	; 0x8874 <udc_process_setup+0x534>
    8792:	00 91 c3 2c 	lds	r16, 0x2CC3	; 0x802cc3 <udd_g_ctrlreq+0x4>
    8796:	10 91 c4 2c 	lds	r17, 0x2CC4	; 0x802cc4 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    879a:	c0 91 a8 2c 	lds	r28, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    879e:	d0 91 a9 2c 	lds	r29, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    87a2:	e8 81       	ld	r30, Y
    87a4:	f9 81       	ldd	r31, Y+1	; 0x01
    87a6:	84 81       	ldd	r24, Z+4	; 0x04
    87a8:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    87aa:	08 f0       	brcs	.+2      	; 0x87ae <udc_process_setup+0x46e>
    87ac:	65 c0       	rjmp	.+202    	; 0x8878 <udc_process_setup+0x538>
    87ae:	60 e0       	ldi	r22, 0x00	; 0
    87b0:	80 2f       	mov	r24, r16
    87b2:	ba dc       	rcall	.-1676   	; 0x8128 <udc_update_iface_desc>
    87b4:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    87b6:	c1 f0       	breq	.+48     	; 0x87e8 <udc_process_setup+0x4a8>
    87b8:	f8 01       	movw	r30, r16
    87ba:	ff 27       	eor	r31, r31
    87bc:	cf 01       	movw	r24, r30
    87be:	88 0f       	add	r24, r24
    87c0:	99 1f       	adc	r25, r25
    87c2:	ea 81       	ldd	r30, Y+2	; 0x02
    87c4:	fb 81       	ldd	r31, Y+3	; 0x03
    87c6:	e8 0f       	add	r30, r24
    87c8:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    87ca:	c0 81       	ld	r28, Z
    87cc:	d1 81       	ldd	r29, Z+1	; 0x01
    87ce:	ee 81       	ldd	r30, Y+6	; 0x06
    87d0:	ff 81       	ldd	r31, Y+7	; 0x07
    87d2:	19 95       	eicall
    87d4:	68 2f       	mov	r22, r24
    87d6:	80 2f       	mov	r24, r16
    87d8:	a7 dc       	rcall	.-1714   	; 0x8128 <udc_update_iface_desc>
    87da:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    87dc:	29 f0       	breq	.+10     	; 0x87e8 <udc_process_setup+0x4a8>
    87de:	ec 81       	ldd	r30, Y+4	; 0x04
    87e0:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    87e2:	19 95       	eicall
    87e4:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    87e6:	5b c0       	rjmp	.+182    	; 0x889e <udc_process_setup+0x55e>
    87e8:	80 91 bf 2c 	lds	r24, 0x2CBF	; 0x802cbf <udd_g_ctrlreq>
    87ec:	8f 71       	andi	r24, 0x1F	; 31
    87ee:	82 30       	cpi	r24, 0x02	; 2
    87f0:	09 f0       	breq	.+2      	; 0x87f4 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    87f2:	44 c0       	rjmp	.+136    	; 0x887c <udc_process_setup+0x53c>
    87f4:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <udc_num_configuration>
    87f8:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    87fa:	b1 f1       	breq	.+108    	; 0x8868 <udc_process_setup+0x528>
    87fc:	a0 91 a8 2c 	lds	r26, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    8800:	b0 91 a9 2c 	lds	r27, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    8804:	ed 91       	ld	r30, X+
    8806:	fc 91       	ld	r31, X
    8808:	11 97       	sbiw	r26, 0x01	; 1
    880a:	84 81       	ldd	r24, Z+4	; 0x04
    880c:	88 23       	and	r24, r24
    880e:	71 f1       	breq	.+92     	; 0x886c <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    8810:	c0 e0       	ldi	r28, 0x00	; 0
    8812:	ec 2f       	mov	r30, r28
    8814:	f0 e0       	ldi	r31, 0x00	; 0
    8816:	ee 0f       	add	r30, r30
    8818:	ff 1f       	adc	r31, r31
    881a:	12 96       	adiw	r26, 0x02	; 2
    881c:	8d 91       	ld	r24, X+
    881e:	9c 91       	ld	r25, X
    8820:	13 97       	sbiw	r26, 0x03	; 3
    8822:	e8 0f       	add	r30, r24
    8824:	f9 1f       	adc	r31, r25
    8826:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    8828:	11 81       	ldd	r17, Z+1	; 0x01
    882a:	d8 01       	movw	r26, r16
    882c:	16 96       	adiw	r26, 0x06	; 6
    882e:	ed 91       	ld	r30, X+
    8830:	fc 91       	ld	r31, X
    8832:	17 97       	sbiw	r26, 0x07	; 7
    8834:	19 95       	eicall
    8836:	68 2f       	mov	r22, r24
    8838:	8c 2f       	mov	r24, r28
    883a:	76 dc       	rcall	.-1812   	; 0x8128 <udc_update_iface_desc>
    883c:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    883e:	79 f1       	breq	.+94     	; 0x889e <udc_process_setup+0x55e>
    8840:	d8 01       	movw	r26, r16
    8842:	14 96       	adiw	r26, 0x04	; 4
    8844:	ed 91       	ld	r30, X+
    8846:	fc 91       	ld	r31, X
    8848:	15 97       	sbiw	r26, 0x05	; 5
    884a:	19 95       	eicall
    884c:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    884e:	27 c0       	rjmp	.+78     	; 0x889e <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    8850:	cf 5f       	subi	r28, 0xFF	; 255
    8852:	a0 91 a8 2c 	lds	r26, 0x2CA8	; 0x802ca8 <udc_ptr_conf>
    8856:	b0 91 a9 2c 	lds	r27, 0x2CA9	; 0x802ca9 <udc_ptr_conf+0x1>
    885a:	ed 91       	ld	r30, X+
    885c:	fc 91       	ld	r31, X
    885e:	11 97       	sbiw	r26, 0x01	; 1
    8860:	94 81       	ldd	r25, Z+4	; 0x04
    8862:	c9 17       	cp	r28, r25
    8864:	b0 f2       	brcs	.-84     	; 0x8812 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    8866:	1b c0       	rjmp	.+54     	; 0x889e <udc_process_setup+0x55e>
    8868:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    886a:	19 c0       	rjmp	.+50     	; 0x889e <udc_process_setup+0x55e>
    886c:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    886e:	17 c0       	rjmp	.+46     	; 0x889e <udc_process_setup+0x55e>
    8870:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    8872:	15 c0       	rjmp	.+42     	; 0x889e <udc_process_setup+0x55e>
    8874:	80 e0       	ldi	r24, 0x00	; 0
    8876:	13 c0       	rjmp	.+38     	; 0x889e <udc_process_setup+0x55e>
    8878:	80 e0       	ldi	r24, 0x00	; 0
    887a:	11 c0       	rjmp	.+34     	; 0x889e <udc_process_setup+0x55e>
    887c:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    887e:	0f c0       	rjmp	.+30     	; 0x889e <udc_process_setup+0x55e>
    8880:	98 2f       	mov	r25, r24
    8882:	90 76       	andi	r25, 0x60	; 96
    8884:	09 f0       	breq	.+2      	; 0x8888 <udc_process_setup+0x548>
    8886:	7b cf       	rjmp	.-266    	; 0x877e <udc_process_setup+0x43e>
    8888:	74 cd       	rjmp	.-1304   	; 0x8372 <udc_process_setup+0x32>
    888a:	98 2f       	mov	r25, r24
    888c:	90 76       	andi	r25, 0x60	; 96
    888e:	09 f0       	breq	.+2      	; 0x8892 <udc_process_setup+0x552>
    8890:	76 cf       	rjmp	.-276    	; 0x877e <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    8892:	77 ce       	rjmp	.-786    	; 0x8582 <udc_process_setup+0x242>
		str = udc_string_product_name;
    8894:	3c e0       	ldi	r19, 0x0C	; 12
    8896:	e4 ed       	ldi	r30, 0xD4	; 212
    8898:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    889a:	eb cd       	rjmp	.-1066   	; 0x8472 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    889c:	81 e0       	ldi	r24, 0x01	; 1
    889e:	df 91       	pop	r29
    88a0:	cf 91       	pop	r28
    88a2:	1f 91       	pop	r17
    88a4:	0f 91       	pop	r16
    88a6:	08 95       	ret

000088a8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    88a8:	cf 93       	push	r28
    88aa:	df 93       	push	r29
    88ac:	1f 92       	push	r1
    88ae:	cd b7       	in	r28, 0x3d	; 61
    88b0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    88b2:	80 91 d9 2c 	lds	r24, 0x2CD9	; 0x802cd9 <stdio_base>
    88b6:	90 91 da 2c 	lds	r25, 0x2CDA	; 0x802cda <stdio_base+0x1>
    88ba:	e0 91 d5 2c 	lds	r30, 0x2CD5	; 0x802cd5 <ptr_get>
    88be:	f0 91 d6 2c 	lds	r31, 0x2CD6	; 0x802cd6 <ptr_get+0x1>
    88c2:	be 01       	movw	r22, r28
    88c4:	6f 5f       	subi	r22, 0xFF	; 255
    88c6:	7f 4f       	sbci	r23, 0xFF	; 255
    88c8:	19 95       	eicall
	return c;
    88ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    88cc:	08 2e       	mov	r0, r24
    88ce:	00 0c       	add	r0, r0
    88d0:	99 0b       	sbc	r25, r25
    88d2:	0f 90       	pop	r0
    88d4:	df 91       	pop	r29
    88d6:	cf 91       	pop	r28
    88d8:	08 95       	ret

000088da <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    88da:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <stdio_usb_interface_enable>
    88de:	88 23       	and	r24, r24
    88e0:	81 f0       	breq	.+32     	; 0x8902 <stdio_usb_putchar+0x28>
    88e2:	86 2f       	mov	r24, r22
    88e4:	08 2e       	mov	r0, r24
    88e6:	00 0c       	add	r0, r0
    88e8:	99 0b       	sbc	r25, r25
    88ea:	df db       	rcall	.-2114   	; 0x80aa <udi_cdc_putc>
    88ec:	21 e0       	ldi	r18, 0x01	; 1
    88ee:	30 e0       	ldi	r19, 0x00	; 0
    88f0:	89 2b       	or	r24, r25
    88f2:	11 f0       	breq	.+4      	; 0x88f8 <stdio_usb_putchar+0x1e>
    88f4:	20 e0       	ldi	r18, 0x00	; 0
    88f6:	30 e0       	ldi	r19, 0x00	; 0
    88f8:	88 27       	eor	r24, r24
    88fa:	99 27       	eor	r25, r25
    88fc:	82 1b       	sub	r24, r18
    88fe:	93 0b       	sbc	r25, r19
    8900:	08 95       	ret
    8902:	80 e0       	ldi	r24, 0x00	; 0
    8904:	90 e0       	ldi	r25, 0x00	; 0
    8906:	08 95       	ret

00008908 <stdio_usb_getchar>:
    8908:	cf 93       	push	r28
    890a:	df 93       	push	r29
    890c:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <stdio_usb_interface_enable>
    8910:	81 11       	cpse	r24, r1
    8912:	03 c0       	rjmp	.+6      	; 0x891a <stdio_usb_getchar+0x12>
    8914:	fb 01       	movw	r30, r22
    8916:	10 82       	st	Z, r1
    8918:	03 c0       	rjmp	.+6      	; 0x8920 <stdio_usb_getchar+0x18>
    891a:	eb 01       	movw	r28, r22
    891c:	3e db       	rcall	.-2436   	; 0x7f9a <udi_cdc_getc>
    891e:	88 83       	st	Y, r24
    8920:	df 91       	pop	r29
    8922:	cf 91       	pop	r28
    8924:	08 95       	ret

00008926 <stdio_usb_enable>:
    8926:	81 e0       	ldi	r24, 0x01	; 1
    8928:	80 93 b0 2c 	sts	0x2CB0, r24	; 0x802cb0 <stdio_usb_interface_enable>
    892c:	08 95       	ret

0000892e <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    892e:	10 92 d9 2c 	sts	0x2CD9, r1	; 0x802cd9 <stdio_base>
    8932:	10 92 da 2c 	sts	0x2CDA, r1	; 0x802cda <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    8936:	8d e6       	ldi	r24, 0x6D	; 109
    8938:	94 e4       	ldi	r25, 0x44	; 68
    893a:	80 93 d7 2c 	sts	0x2CD7, r24	; 0x802cd7 <ptr_put>
    893e:	90 93 d8 2c 	sts	0x2CD8, r25	; 0x802cd8 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    8942:	84 e8       	ldi	r24, 0x84	; 132
    8944:	94 e4       	ldi	r25, 0x44	; 68
    8946:	80 93 d5 2c 	sts	0x2CD5, r24	; 0x802cd5 <ptr_get>
    894a:	90 93 d6 2c 	sts	0x2CD6, r25	; 0x802cd6 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    894e:	9b dc       	rcall	.-1738   	; 0x8286 <udc_start>
    8950:	64 e5       	ldi	r22, 0x54	; 84
    8952:	74 e4       	ldi	r23, 0x44	; 68
    8954:	8e ea       	ldi	r24, 0xAE	; 174
    8956:	94 e4       	ldi	r25, 0x44	; 68
    8958:	4a c3       	rjmp	.+1684   	; 0x8fee <fdevopen>
    895a:	08 95       	ret

0000895c <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    895c:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    895e:	80 91 d9 2c 	lds	r24, 0x2CD9	; 0x802cd9 <stdio_base>
    8962:	90 91 da 2c 	lds	r25, 0x2CDA	; 0x802cda <stdio_base+0x1>
    8966:	e0 91 d7 2c 	lds	r30, 0x2CD7	; 0x802cd7 <ptr_put>
    896a:	f0 91 d8 2c 	lds	r31, 0x2CD8	; 0x802cd8 <ptr_put+0x1>
    896e:	19 95       	eicall
    8970:	99 23       	and	r25, r25
    8972:	1c f0       	brlt	.+6      	; 0x897a <_write+0x1e>
		return -1;
	}
	return 1;
    8974:	81 e0       	ldi	r24, 0x01	; 1
    8976:	90 e0       	ldi	r25, 0x00	; 0
    8978:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    897a:	8f ef       	ldi	r24, 0xFF	; 255
    897c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    897e:	08 95       	ret

00008980 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    8980:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    8984:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    8986:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    8988:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    898c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    898e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    8992:	08 95       	ret

00008994 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    8994:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    8996:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    8998:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    899a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    899c:	60 83       	st	Z, r22
	ret                             // Return to caller
    899e:	08 95       	ret

000089a0 <__mulsi3>:
    89a0:	db 01       	movw	r26, r22
    89a2:	8f 93       	push	r24
    89a4:	9f 93       	push	r25
    89a6:	87 d0       	rcall	.+270    	; 0x8ab6 <__muluhisi3>
    89a8:	bf 91       	pop	r27
    89aa:	af 91       	pop	r26
    89ac:	a2 9f       	mul	r26, r18
    89ae:	80 0d       	add	r24, r0
    89b0:	91 1d       	adc	r25, r1
    89b2:	a3 9f       	mul	r26, r19
    89b4:	90 0d       	add	r25, r0
    89b6:	b2 9f       	mul	r27, r18
    89b8:	90 0d       	add	r25, r0
    89ba:	11 24       	eor	r1, r1
    89bc:	08 95       	ret

000089be <__udivmodhi4>:
    89be:	aa 1b       	sub	r26, r26
    89c0:	bb 1b       	sub	r27, r27
    89c2:	51 e1       	ldi	r21, 0x11	; 17
    89c4:	07 c0       	rjmp	.+14     	; 0x89d4 <__udivmodhi4_ep>

000089c6 <__udivmodhi4_loop>:
    89c6:	aa 1f       	adc	r26, r26
    89c8:	bb 1f       	adc	r27, r27
    89ca:	a6 17       	cp	r26, r22
    89cc:	b7 07       	cpc	r27, r23
    89ce:	10 f0       	brcs	.+4      	; 0x89d4 <__udivmodhi4_ep>
    89d0:	a6 1b       	sub	r26, r22
    89d2:	b7 0b       	sbc	r27, r23

000089d4 <__udivmodhi4_ep>:
    89d4:	88 1f       	adc	r24, r24
    89d6:	99 1f       	adc	r25, r25
    89d8:	5a 95       	dec	r21
    89da:	a9 f7       	brne	.-22     	; 0x89c6 <__udivmodhi4_loop>
    89dc:	80 95       	com	r24
    89de:	90 95       	com	r25
    89e0:	bc 01       	movw	r22, r24
    89e2:	cd 01       	movw	r24, r26
    89e4:	08 95       	ret

000089e6 <__divmodhi4>:
    89e6:	97 fb       	bst	r25, 7
    89e8:	07 2e       	mov	r0, r23
    89ea:	16 f4       	brtc	.+4      	; 0x89f0 <__divmodhi4+0xa>
    89ec:	00 94       	com	r0
    89ee:	06 d0       	rcall	.+12     	; 0x89fc <__divmodhi4_neg1>
    89f0:	77 fd       	sbrc	r23, 7
    89f2:	08 d0       	rcall	.+16     	; 0x8a04 <__divmodhi4_neg2>
    89f4:	e4 df       	rcall	.-56     	; 0x89be <__udivmodhi4>
    89f6:	07 fc       	sbrc	r0, 7
    89f8:	05 d0       	rcall	.+10     	; 0x8a04 <__divmodhi4_neg2>
    89fa:	3e f4       	brtc	.+14     	; 0x8a0a <__divmodhi4_exit>

000089fc <__divmodhi4_neg1>:
    89fc:	90 95       	com	r25
    89fe:	81 95       	neg	r24
    8a00:	9f 4f       	sbci	r25, 0xFF	; 255
    8a02:	08 95       	ret

00008a04 <__divmodhi4_neg2>:
    8a04:	70 95       	com	r23
    8a06:	61 95       	neg	r22
    8a08:	7f 4f       	sbci	r23, 0xFF	; 255

00008a0a <__divmodhi4_exit>:
    8a0a:	08 95       	ret

00008a0c <__udivmodsi4>:
    8a0c:	a1 e2       	ldi	r26, 0x21	; 33
    8a0e:	1a 2e       	mov	r1, r26
    8a10:	aa 1b       	sub	r26, r26
    8a12:	bb 1b       	sub	r27, r27
    8a14:	fd 01       	movw	r30, r26
    8a16:	0d c0       	rjmp	.+26     	; 0x8a32 <__udivmodsi4_ep>

00008a18 <__udivmodsi4_loop>:
    8a18:	aa 1f       	adc	r26, r26
    8a1a:	bb 1f       	adc	r27, r27
    8a1c:	ee 1f       	adc	r30, r30
    8a1e:	ff 1f       	adc	r31, r31
    8a20:	a2 17       	cp	r26, r18
    8a22:	b3 07       	cpc	r27, r19
    8a24:	e4 07       	cpc	r30, r20
    8a26:	f5 07       	cpc	r31, r21
    8a28:	20 f0       	brcs	.+8      	; 0x8a32 <__udivmodsi4_ep>
    8a2a:	a2 1b       	sub	r26, r18
    8a2c:	b3 0b       	sbc	r27, r19
    8a2e:	e4 0b       	sbc	r30, r20
    8a30:	f5 0b       	sbc	r31, r21

00008a32 <__udivmodsi4_ep>:
    8a32:	66 1f       	adc	r22, r22
    8a34:	77 1f       	adc	r23, r23
    8a36:	88 1f       	adc	r24, r24
    8a38:	99 1f       	adc	r25, r25
    8a3a:	1a 94       	dec	r1
    8a3c:	69 f7       	brne	.-38     	; 0x8a18 <__udivmodsi4_loop>
    8a3e:	60 95       	com	r22
    8a40:	70 95       	com	r23
    8a42:	80 95       	com	r24
    8a44:	90 95       	com	r25
    8a46:	9b 01       	movw	r18, r22
    8a48:	ac 01       	movw	r20, r24
    8a4a:	bd 01       	movw	r22, r26
    8a4c:	cf 01       	movw	r24, r30
    8a4e:	08 95       	ret

00008a50 <__divmodsi4>:
    8a50:	05 2e       	mov	r0, r21
    8a52:	97 fb       	bst	r25, 7
    8a54:	16 f4       	brtc	.+4      	; 0x8a5a <__divmodsi4+0xa>
    8a56:	00 94       	com	r0
    8a58:	0f d0       	rcall	.+30     	; 0x8a78 <__negsi2>
    8a5a:	57 fd       	sbrc	r21, 7
    8a5c:	05 d0       	rcall	.+10     	; 0x8a68 <__divmodsi4_neg2>
    8a5e:	d6 df       	rcall	.-84     	; 0x8a0c <__udivmodsi4>
    8a60:	07 fc       	sbrc	r0, 7
    8a62:	02 d0       	rcall	.+4      	; 0x8a68 <__divmodsi4_neg2>
    8a64:	46 f4       	brtc	.+16     	; 0x8a76 <__divmodsi4_exit>
    8a66:	08 c0       	rjmp	.+16     	; 0x8a78 <__negsi2>

00008a68 <__divmodsi4_neg2>:
    8a68:	50 95       	com	r21
    8a6a:	40 95       	com	r20
    8a6c:	30 95       	com	r19
    8a6e:	21 95       	neg	r18
    8a70:	3f 4f       	sbci	r19, 0xFF	; 255
    8a72:	4f 4f       	sbci	r20, 0xFF	; 255
    8a74:	5f 4f       	sbci	r21, 0xFF	; 255

00008a76 <__divmodsi4_exit>:
    8a76:	08 95       	ret

00008a78 <__negsi2>:
    8a78:	90 95       	com	r25
    8a7a:	80 95       	com	r24
    8a7c:	70 95       	com	r23
    8a7e:	61 95       	neg	r22
    8a80:	7f 4f       	sbci	r23, 0xFF	; 255
    8a82:	8f 4f       	sbci	r24, 0xFF	; 255
    8a84:	9f 4f       	sbci	r25, 0xFF	; 255
    8a86:	08 95       	ret

00008a88 <__tablejump2__>:
    8a88:	ee 0f       	add	r30, r30
    8a8a:	ff 1f       	adc	r31, r31
    8a8c:	88 1f       	adc	r24, r24
    8a8e:	8b bf       	out	0x3b, r24	; 59
    8a90:	07 90       	elpm	r0, Z+
    8a92:	f6 91       	elpm	r31, Z
    8a94:	e0 2d       	mov	r30, r0
    8a96:	19 94       	eijmp

00008a98 <__umulhisi3>:
    8a98:	a2 9f       	mul	r26, r18
    8a9a:	b0 01       	movw	r22, r0
    8a9c:	b3 9f       	mul	r27, r19
    8a9e:	c0 01       	movw	r24, r0
    8aa0:	a3 9f       	mul	r26, r19
    8aa2:	70 0d       	add	r23, r0
    8aa4:	81 1d       	adc	r24, r1
    8aa6:	11 24       	eor	r1, r1
    8aa8:	91 1d       	adc	r25, r1
    8aaa:	b2 9f       	mul	r27, r18
    8aac:	70 0d       	add	r23, r0
    8aae:	81 1d       	adc	r24, r1
    8ab0:	11 24       	eor	r1, r1
    8ab2:	91 1d       	adc	r25, r1
    8ab4:	08 95       	ret

00008ab6 <__muluhisi3>:
    8ab6:	f0 df       	rcall	.-32     	; 0x8a98 <__umulhisi3>
    8ab8:	a5 9f       	mul	r26, r21
    8aba:	90 0d       	add	r25, r0
    8abc:	b4 9f       	mul	r27, r20
    8abe:	90 0d       	add	r25, r0
    8ac0:	a4 9f       	mul	r26, r20
    8ac2:	80 0d       	add	r24, r0
    8ac4:	91 1d       	adc	r25, r1
    8ac6:	11 24       	eor	r1, r1
    8ac8:	08 95       	ret

00008aca <__muldi3>:
    8aca:	df 93       	push	r29
    8acc:	cf 93       	push	r28
    8ace:	1f 93       	push	r17
    8ad0:	0f 93       	push	r16
    8ad2:	9a 9d       	mul	r25, r10
    8ad4:	f0 2d       	mov	r31, r0
    8ad6:	21 9f       	mul	r18, r17
    8ad8:	f0 0d       	add	r31, r0
    8ada:	8b 9d       	mul	r24, r11
    8adc:	f0 0d       	add	r31, r0
    8ade:	8a 9d       	mul	r24, r10
    8ae0:	e0 2d       	mov	r30, r0
    8ae2:	f1 0d       	add	r31, r1
    8ae4:	03 9f       	mul	r16, r19
    8ae6:	f0 0d       	add	r31, r0
    8ae8:	02 9f       	mul	r16, r18
    8aea:	e0 0d       	add	r30, r0
    8aec:	f1 1d       	adc	r31, r1
    8aee:	4e 9d       	mul	r20, r14
    8af0:	e0 0d       	add	r30, r0
    8af2:	f1 1d       	adc	r31, r1
    8af4:	5e 9d       	mul	r21, r14
    8af6:	f0 0d       	add	r31, r0
    8af8:	4f 9d       	mul	r20, r15
    8afa:	f0 0d       	add	r31, r0
    8afc:	7f 93       	push	r23
    8afe:	6f 93       	push	r22
    8b00:	bf 92       	push	r11
    8b02:	af 92       	push	r10
    8b04:	5f 93       	push	r21
    8b06:	4f 93       	push	r20
    8b08:	d5 01       	movw	r26, r10
    8b0a:	c6 df       	rcall	.-116    	; 0x8a98 <__umulhisi3>
    8b0c:	8b 01       	movw	r16, r22
    8b0e:	ac 01       	movw	r20, r24
    8b10:	d7 01       	movw	r26, r14
    8b12:	c2 df       	rcall	.-124    	; 0x8a98 <__umulhisi3>
    8b14:	eb 01       	movw	r28, r22
    8b16:	e8 0f       	add	r30, r24
    8b18:	f9 1f       	adc	r31, r25
    8b1a:	d6 01       	movw	r26, r12
    8b1c:	1f d0       	rcall	.+62     	; 0x8b5c <__muldi3_6>
    8b1e:	2f 91       	pop	r18
    8b20:	3f 91       	pop	r19
    8b22:	d6 01       	movw	r26, r12
    8b24:	b9 df       	rcall	.-142    	; 0x8a98 <__umulhisi3>
    8b26:	c6 0f       	add	r28, r22
    8b28:	d7 1f       	adc	r29, r23
    8b2a:	e8 1f       	adc	r30, r24
    8b2c:	f9 1f       	adc	r31, r25
    8b2e:	af 91       	pop	r26
    8b30:	bf 91       	pop	r27
    8b32:	14 d0       	rcall	.+40     	; 0x8b5c <__muldi3_6>
    8b34:	2f 91       	pop	r18
    8b36:	3f 91       	pop	r19
    8b38:	af df       	rcall	.-162    	; 0x8a98 <__umulhisi3>
    8b3a:	c6 0f       	add	r28, r22
    8b3c:	d7 1f       	adc	r29, r23
    8b3e:	e8 1f       	adc	r30, r24
    8b40:	f9 1f       	adc	r31, r25
    8b42:	d6 01       	movw	r26, r12
    8b44:	a9 df       	rcall	.-174    	; 0x8a98 <__umulhisi3>
    8b46:	e6 0f       	add	r30, r22
    8b48:	f7 1f       	adc	r31, r23
    8b4a:	98 01       	movw	r18, r16
    8b4c:	be 01       	movw	r22, r28
    8b4e:	cf 01       	movw	r24, r30
    8b50:	11 24       	eor	r1, r1
    8b52:	0f 91       	pop	r16
    8b54:	1f 91       	pop	r17
    8b56:	cf 91       	pop	r28
    8b58:	df 91       	pop	r29
    8b5a:	08 95       	ret

00008b5c <__muldi3_6>:
    8b5c:	9d df       	rcall	.-198    	; 0x8a98 <__umulhisi3>
    8b5e:	46 0f       	add	r20, r22
    8b60:	57 1f       	adc	r21, r23
    8b62:	c8 1f       	adc	r28, r24
    8b64:	d9 1f       	adc	r29, r25
    8b66:	08 f4       	brcc	.+2      	; 0x8b6a <__muldi3_6+0xe>
    8b68:	31 96       	adiw	r30, 0x01	; 1
    8b6a:	08 95       	ret

00008b6c <__ashldi3>:
    8b6c:	0f 93       	push	r16
    8b6e:	08 30       	cpi	r16, 0x08	; 8
    8b70:	90 f0       	brcs	.+36     	; 0x8b96 <__ashldi3+0x2a>
    8b72:	98 2f       	mov	r25, r24
    8b74:	87 2f       	mov	r24, r23
    8b76:	76 2f       	mov	r23, r22
    8b78:	65 2f       	mov	r22, r21
    8b7a:	54 2f       	mov	r21, r20
    8b7c:	43 2f       	mov	r20, r19
    8b7e:	32 2f       	mov	r19, r18
    8b80:	22 27       	eor	r18, r18
    8b82:	08 50       	subi	r16, 0x08	; 8
    8b84:	f4 cf       	rjmp	.-24     	; 0x8b6e <__ashldi3+0x2>
    8b86:	22 0f       	add	r18, r18
    8b88:	33 1f       	adc	r19, r19
    8b8a:	44 1f       	adc	r20, r20
    8b8c:	55 1f       	adc	r21, r21
    8b8e:	66 1f       	adc	r22, r22
    8b90:	77 1f       	adc	r23, r23
    8b92:	88 1f       	adc	r24, r24
    8b94:	99 1f       	adc	r25, r25
    8b96:	0a 95       	dec	r16
    8b98:	b2 f7       	brpl	.-20     	; 0x8b86 <__ashldi3+0x1a>
    8b9a:	0f 91       	pop	r16
    8b9c:	08 95       	ret

00008b9e <__ashrdi3>:
    8b9e:	97 fb       	bst	r25, 7
    8ba0:	10 f8       	bld	r1, 0

00008ba2 <__lshrdi3>:
    8ba2:	16 94       	lsr	r1
    8ba4:	00 08       	sbc	r0, r0
    8ba6:	0f 93       	push	r16
    8ba8:	08 30       	cpi	r16, 0x08	; 8
    8baa:	98 f0       	brcs	.+38     	; 0x8bd2 <__lshrdi3+0x30>
    8bac:	08 50       	subi	r16, 0x08	; 8
    8bae:	23 2f       	mov	r18, r19
    8bb0:	34 2f       	mov	r19, r20
    8bb2:	45 2f       	mov	r20, r21
    8bb4:	56 2f       	mov	r21, r22
    8bb6:	67 2f       	mov	r22, r23
    8bb8:	78 2f       	mov	r23, r24
    8bba:	89 2f       	mov	r24, r25
    8bbc:	90 2d       	mov	r25, r0
    8bbe:	f4 cf       	rjmp	.-24     	; 0x8ba8 <__lshrdi3+0x6>
    8bc0:	05 94       	asr	r0
    8bc2:	97 95       	ror	r25
    8bc4:	87 95       	ror	r24
    8bc6:	77 95       	ror	r23
    8bc8:	67 95       	ror	r22
    8bca:	57 95       	ror	r21
    8bcc:	47 95       	ror	r20
    8bce:	37 95       	ror	r19
    8bd0:	27 95       	ror	r18
    8bd2:	0a 95       	dec	r16
    8bd4:	aa f7       	brpl	.-22     	; 0x8bc0 <__lshrdi3+0x1e>
    8bd6:	0f 91       	pop	r16
    8bd8:	08 95       	ret

00008bda <__adddi3>:
    8bda:	2a 0d       	add	r18, r10
    8bdc:	3b 1d       	adc	r19, r11
    8bde:	4c 1d       	adc	r20, r12
    8be0:	5d 1d       	adc	r21, r13
    8be2:	6e 1d       	adc	r22, r14
    8be4:	7f 1d       	adc	r23, r15
    8be6:	80 1f       	adc	r24, r16
    8be8:	91 1f       	adc	r25, r17
    8bea:	08 95       	ret

00008bec <__subdi3>:
    8bec:	2a 19       	sub	r18, r10
    8bee:	3b 09       	sbc	r19, r11
    8bf0:	4c 09       	sbc	r20, r12
    8bf2:	5d 09       	sbc	r21, r13
    8bf4:	6e 09       	sbc	r22, r14
    8bf6:	7f 09       	sbc	r23, r15
    8bf8:	80 0b       	sbc	r24, r16
    8bfa:	91 0b       	sbc	r25, r17
    8bfc:	08 95       	ret

00008bfe <__subsf3>:
    8bfe:	50 58       	subi	r21, 0x80	; 128

00008c00 <__addsf3>:
    8c00:	bb 27       	eor	r27, r27
    8c02:	aa 27       	eor	r26, r26
    8c04:	0e d0       	rcall	.+28     	; 0x8c22 <__addsf3x>
    8c06:	4d c1       	rjmp	.+666    	; 0x8ea2 <__fp_round>
    8c08:	3e d1       	rcall	.+636    	; 0x8e86 <__fp_pscA>
    8c0a:	30 f0       	brcs	.+12     	; 0x8c18 <__addsf3+0x18>
    8c0c:	43 d1       	rcall	.+646    	; 0x8e94 <__fp_pscB>
    8c0e:	20 f0       	brcs	.+8      	; 0x8c18 <__addsf3+0x18>
    8c10:	31 f4       	brne	.+12     	; 0x8c1e <__addsf3+0x1e>
    8c12:	9f 3f       	cpi	r25, 0xFF	; 255
    8c14:	11 f4       	brne	.+4      	; 0x8c1a <__addsf3+0x1a>
    8c16:	1e f4       	brtc	.+6      	; 0x8c1e <__addsf3+0x1e>
    8c18:	33 c1       	rjmp	.+614    	; 0x8e80 <__fp_nan>
    8c1a:	0e f4       	brtc	.+2      	; 0x8c1e <__addsf3+0x1e>
    8c1c:	e0 95       	com	r30
    8c1e:	e7 fb       	bst	r30, 7
    8c20:	29 c1       	rjmp	.+594    	; 0x8e74 <__fp_inf>

00008c22 <__addsf3x>:
    8c22:	e9 2f       	mov	r30, r25
    8c24:	4f d1       	rcall	.+670    	; 0x8ec4 <__fp_split3>
    8c26:	80 f3       	brcs	.-32     	; 0x8c08 <__addsf3+0x8>
    8c28:	ba 17       	cp	r27, r26
    8c2a:	62 07       	cpc	r22, r18
    8c2c:	73 07       	cpc	r23, r19
    8c2e:	84 07       	cpc	r24, r20
    8c30:	95 07       	cpc	r25, r21
    8c32:	18 f0       	brcs	.+6      	; 0x8c3a <__addsf3x+0x18>
    8c34:	71 f4       	brne	.+28     	; 0x8c52 <__addsf3x+0x30>
    8c36:	9e f5       	brtc	.+102    	; 0x8c9e <__addsf3x+0x7c>
    8c38:	67 c1       	rjmp	.+718    	; 0x8f08 <__fp_zero>
    8c3a:	0e f4       	brtc	.+2      	; 0x8c3e <__addsf3x+0x1c>
    8c3c:	e0 95       	com	r30
    8c3e:	0b 2e       	mov	r0, r27
    8c40:	ba 2f       	mov	r27, r26
    8c42:	a0 2d       	mov	r26, r0
    8c44:	0b 01       	movw	r0, r22
    8c46:	b9 01       	movw	r22, r18
    8c48:	90 01       	movw	r18, r0
    8c4a:	0c 01       	movw	r0, r24
    8c4c:	ca 01       	movw	r24, r20
    8c4e:	a0 01       	movw	r20, r0
    8c50:	11 24       	eor	r1, r1
    8c52:	ff 27       	eor	r31, r31
    8c54:	59 1b       	sub	r21, r25
    8c56:	99 f0       	breq	.+38     	; 0x8c7e <__addsf3x+0x5c>
    8c58:	59 3f       	cpi	r21, 0xF9	; 249
    8c5a:	50 f4       	brcc	.+20     	; 0x8c70 <__addsf3x+0x4e>
    8c5c:	50 3e       	cpi	r21, 0xE0	; 224
    8c5e:	68 f1       	brcs	.+90     	; 0x8cba <__addsf3x+0x98>
    8c60:	1a 16       	cp	r1, r26
    8c62:	f0 40       	sbci	r31, 0x00	; 0
    8c64:	a2 2f       	mov	r26, r18
    8c66:	23 2f       	mov	r18, r19
    8c68:	34 2f       	mov	r19, r20
    8c6a:	44 27       	eor	r20, r20
    8c6c:	58 5f       	subi	r21, 0xF8	; 248
    8c6e:	f3 cf       	rjmp	.-26     	; 0x8c56 <__addsf3x+0x34>
    8c70:	46 95       	lsr	r20
    8c72:	37 95       	ror	r19
    8c74:	27 95       	ror	r18
    8c76:	a7 95       	ror	r26
    8c78:	f0 40       	sbci	r31, 0x00	; 0
    8c7a:	53 95       	inc	r21
    8c7c:	c9 f7       	brne	.-14     	; 0x8c70 <__addsf3x+0x4e>
    8c7e:	7e f4       	brtc	.+30     	; 0x8c9e <__addsf3x+0x7c>
    8c80:	1f 16       	cp	r1, r31
    8c82:	ba 0b       	sbc	r27, r26
    8c84:	62 0b       	sbc	r22, r18
    8c86:	73 0b       	sbc	r23, r19
    8c88:	84 0b       	sbc	r24, r20
    8c8a:	ba f0       	brmi	.+46     	; 0x8cba <__addsf3x+0x98>
    8c8c:	91 50       	subi	r25, 0x01	; 1
    8c8e:	a1 f0       	breq	.+40     	; 0x8cb8 <__addsf3x+0x96>
    8c90:	ff 0f       	add	r31, r31
    8c92:	bb 1f       	adc	r27, r27
    8c94:	66 1f       	adc	r22, r22
    8c96:	77 1f       	adc	r23, r23
    8c98:	88 1f       	adc	r24, r24
    8c9a:	c2 f7       	brpl	.-16     	; 0x8c8c <__addsf3x+0x6a>
    8c9c:	0e c0       	rjmp	.+28     	; 0x8cba <__addsf3x+0x98>
    8c9e:	ba 0f       	add	r27, r26
    8ca0:	62 1f       	adc	r22, r18
    8ca2:	73 1f       	adc	r23, r19
    8ca4:	84 1f       	adc	r24, r20
    8ca6:	48 f4       	brcc	.+18     	; 0x8cba <__addsf3x+0x98>
    8ca8:	87 95       	ror	r24
    8caa:	77 95       	ror	r23
    8cac:	67 95       	ror	r22
    8cae:	b7 95       	ror	r27
    8cb0:	f7 95       	ror	r31
    8cb2:	9e 3f       	cpi	r25, 0xFE	; 254
    8cb4:	08 f0       	brcs	.+2      	; 0x8cb8 <__addsf3x+0x96>
    8cb6:	b3 cf       	rjmp	.-154    	; 0x8c1e <__addsf3+0x1e>
    8cb8:	93 95       	inc	r25
    8cba:	88 0f       	add	r24, r24
    8cbc:	08 f0       	brcs	.+2      	; 0x8cc0 <__addsf3x+0x9e>
    8cbe:	99 27       	eor	r25, r25
    8cc0:	ee 0f       	add	r30, r30
    8cc2:	97 95       	ror	r25
    8cc4:	87 95       	ror	r24
    8cc6:	08 95       	ret

00008cc8 <__divsf3>:
    8cc8:	0c d0       	rcall	.+24     	; 0x8ce2 <__divsf3x>
    8cca:	eb c0       	rjmp	.+470    	; 0x8ea2 <__fp_round>
    8ccc:	e3 d0       	rcall	.+454    	; 0x8e94 <__fp_pscB>
    8cce:	40 f0       	brcs	.+16     	; 0x8ce0 <__divsf3+0x18>
    8cd0:	da d0       	rcall	.+436    	; 0x8e86 <__fp_pscA>
    8cd2:	30 f0       	brcs	.+12     	; 0x8ce0 <__divsf3+0x18>
    8cd4:	21 f4       	brne	.+8      	; 0x8cde <__divsf3+0x16>
    8cd6:	5f 3f       	cpi	r21, 0xFF	; 255
    8cd8:	19 f0       	breq	.+6      	; 0x8ce0 <__divsf3+0x18>
    8cda:	cc c0       	rjmp	.+408    	; 0x8e74 <__fp_inf>
    8cdc:	51 11       	cpse	r21, r1
    8cde:	15 c1       	rjmp	.+554    	; 0x8f0a <__fp_szero>
    8ce0:	cf c0       	rjmp	.+414    	; 0x8e80 <__fp_nan>

00008ce2 <__divsf3x>:
    8ce2:	f0 d0       	rcall	.+480    	; 0x8ec4 <__fp_split3>
    8ce4:	98 f3       	brcs	.-26     	; 0x8ccc <__divsf3+0x4>

00008ce6 <__divsf3_pse>:
    8ce6:	99 23       	and	r25, r25
    8ce8:	c9 f3       	breq	.-14     	; 0x8cdc <__divsf3+0x14>
    8cea:	55 23       	and	r21, r21
    8cec:	b1 f3       	breq	.-20     	; 0x8cda <__divsf3+0x12>
    8cee:	95 1b       	sub	r25, r21
    8cf0:	55 0b       	sbc	r21, r21
    8cf2:	bb 27       	eor	r27, r27
    8cf4:	aa 27       	eor	r26, r26
    8cf6:	62 17       	cp	r22, r18
    8cf8:	73 07       	cpc	r23, r19
    8cfa:	84 07       	cpc	r24, r20
    8cfc:	38 f0       	brcs	.+14     	; 0x8d0c <__divsf3_pse+0x26>
    8cfe:	9f 5f       	subi	r25, 0xFF	; 255
    8d00:	5f 4f       	sbci	r21, 0xFF	; 255
    8d02:	22 0f       	add	r18, r18
    8d04:	33 1f       	adc	r19, r19
    8d06:	44 1f       	adc	r20, r20
    8d08:	aa 1f       	adc	r26, r26
    8d0a:	a9 f3       	breq	.-22     	; 0x8cf6 <__divsf3_pse+0x10>
    8d0c:	33 d0       	rcall	.+102    	; 0x8d74 <__divsf3_pse+0x8e>
    8d0e:	0e 2e       	mov	r0, r30
    8d10:	3a f0       	brmi	.+14     	; 0x8d20 <__divsf3_pse+0x3a>
    8d12:	e0 e8       	ldi	r30, 0x80	; 128
    8d14:	30 d0       	rcall	.+96     	; 0x8d76 <__divsf3_pse+0x90>
    8d16:	91 50       	subi	r25, 0x01	; 1
    8d18:	50 40       	sbci	r21, 0x00	; 0
    8d1a:	e6 95       	lsr	r30
    8d1c:	00 1c       	adc	r0, r0
    8d1e:	ca f7       	brpl	.-14     	; 0x8d12 <__divsf3_pse+0x2c>
    8d20:	29 d0       	rcall	.+82     	; 0x8d74 <__divsf3_pse+0x8e>
    8d22:	fe 2f       	mov	r31, r30
    8d24:	27 d0       	rcall	.+78     	; 0x8d74 <__divsf3_pse+0x8e>
    8d26:	66 0f       	add	r22, r22
    8d28:	77 1f       	adc	r23, r23
    8d2a:	88 1f       	adc	r24, r24
    8d2c:	bb 1f       	adc	r27, r27
    8d2e:	26 17       	cp	r18, r22
    8d30:	37 07       	cpc	r19, r23
    8d32:	48 07       	cpc	r20, r24
    8d34:	ab 07       	cpc	r26, r27
    8d36:	b0 e8       	ldi	r27, 0x80	; 128
    8d38:	09 f0       	breq	.+2      	; 0x8d3c <__divsf3_pse+0x56>
    8d3a:	bb 0b       	sbc	r27, r27
    8d3c:	80 2d       	mov	r24, r0
    8d3e:	bf 01       	movw	r22, r30
    8d40:	ff 27       	eor	r31, r31
    8d42:	93 58       	subi	r25, 0x83	; 131
    8d44:	5f 4f       	sbci	r21, 0xFF	; 255
    8d46:	2a f0       	brmi	.+10     	; 0x8d52 <__divsf3_pse+0x6c>
    8d48:	9e 3f       	cpi	r25, 0xFE	; 254
    8d4a:	51 05       	cpc	r21, r1
    8d4c:	68 f0       	brcs	.+26     	; 0x8d68 <__divsf3_pse+0x82>
    8d4e:	92 c0       	rjmp	.+292    	; 0x8e74 <__fp_inf>
    8d50:	dc c0       	rjmp	.+440    	; 0x8f0a <__fp_szero>
    8d52:	5f 3f       	cpi	r21, 0xFF	; 255
    8d54:	ec f3       	brlt	.-6      	; 0x8d50 <__divsf3_pse+0x6a>
    8d56:	98 3e       	cpi	r25, 0xE8	; 232
    8d58:	dc f3       	brlt	.-10     	; 0x8d50 <__divsf3_pse+0x6a>
    8d5a:	86 95       	lsr	r24
    8d5c:	77 95       	ror	r23
    8d5e:	67 95       	ror	r22
    8d60:	b7 95       	ror	r27
    8d62:	f7 95       	ror	r31
    8d64:	9f 5f       	subi	r25, 0xFF	; 255
    8d66:	c9 f7       	brne	.-14     	; 0x8d5a <__divsf3_pse+0x74>
    8d68:	88 0f       	add	r24, r24
    8d6a:	91 1d       	adc	r25, r1
    8d6c:	96 95       	lsr	r25
    8d6e:	87 95       	ror	r24
    8d70:	97 f9       	bld	r25, 7
    8d72:	08 95       	ret
    8d74:	e1 e0       	ldi	r30, 0x01	; 1
    8d76:	66 0f       	add	r22, r22
    8d78:	77 1f       	adc	r23, r23
    8d7a:	88 1f       	adc	r24, r24
    8d7c:	bb 1f       	adc	r27, r27
    8d7e:	62 17       	cp	r22, r18
    8d80:	73 07       	cpc	r23, r19
    8d82:	84 07       	cpc	r24, r20
    8d84:	ba 07       	cpc	r27, r26
    8d86:	20 f0       	brcs	.+8      	; 0x8d90 <__divsf3_pse+0xaa>
    8d88:	62 1b       	sub	r22, r18
    8d8a:	73 0b       	sbc	r23, r19
    8d8c:	84 0b       	sbc	r24, r20
    8d8e:	ba 0b       	sbc	r27, r26
    8d90:	ee 1f       	adc	r30, r30
    8d92:	88 f7       	brcc	.-30     	; 0x8d76 <__divsf3_pse+0x90>
    8d94:	e0 95       	com	r30
    8d96:	08 95       	ret

00008d98 <__fixsfsi>:
    8d98:	04 d0       	rcall	.+8      	; 0x8da2 <__fixunssfsi>
    8d9a:	68 94       	set
    8d9c:	b1 11       	cpse	r27, r1
    8d9e:	b5 c0       	rjmp	.+362    	; 0x8f0a <__fp_szero>
    8da0:	08 95       	ret

00008da2 <__fixunssfsi>:
    8da2:	98 d0       	rcall	.+304    	; 0x8ed4 <__fp_splitA>
    8da4:	88 f0       	brcs	.+34     	; 0x8dc8 <__fixunssfsi+0x26>
    8da6:	9f 57       	subi	r25, 0x7F	; 127
    8da8:	90 f0       	brcs	.+36     	; 0x8dce <__fixunssfsi+0x2c>
    8daa:	b9 2f       	mov	r27, r25
    8dac:	99 27       	eor	r25, r25
    8dae:	b7 51       	subi	r27, 0x17	; 23
    8db0:	a0 f0       	brcs	.+40     	; 0x8dda <__fixunssfsi+0x38>
    8db2:	d1 f0       	breq	.+52     	; 0x8de8 <__fixunssfsi+0x46>
    8db4:	66 0f       	add	r22, r22
    8db6:	77 1f       	adc	r23, r23
    8db8:	88 1f       	adc	r24, r24
    8dba:	99 1f       	adc	r25, r25
    8dbc:	1a f0       	brmi	.+6      	; 0x8dc4 <__fixunssfsi+0x22>
    8dbe:	ba 95       	dec	r27
    8dc0:	c9 f7       	brne	.-14     	; 0x8db4 <__fixunssfsi+0x12>
    8dc2:	12 c0       	rjmp	.+36     	; 0x8de8 <__fixunssfsi+0x46>
    8dc4:	b1 30       	cpi	r27, 0x01	; 1
    8dc6:	81 f0       	breq	.+32     	; 0x8de8 <__fixunssfsi+0x46>
    8dc8:	9f d0       	rcall	.+318    	; 0x8f08 <__fp_zero>
    8dca:	b1 e0       	ldi	r27, 0x01	; 1
    8dcc:	08 95       	ret
    8dce:	9c c0       	rjmp	.+312    	; 0x8f08 <__fp_zero>
    8dd0:	67 2f       	mov	r22, r23
    8dd2:	78 2f       	mov	r23, r24
    8dd4:	88 27       	eor	r24, r24
    8dd6:	b8 5f       	subi	r27, 0xF8	; 248
    8dd8:	39 f0       	breq	.+14     	; 0x8de8 <__fixunssfsi+0x46>
    8dda:	b9 3f       	cpi	r27, 0xF9	; 249
    8ddc:	cc f3       	brlt	.-14     	; 0x8dd0 <__fixunssfsi+0x2e>
    8dde:	86 95       	lsr	r24
    8de0:	77 95       	ror	r23
    8de2:	67 95       	ror	r22
    8de4:	b3 95       	inc	r27
    8de6:	d9 f7       	brne	.-10     	; 0x8dde <__fixunssfsi+0x3c>
    8de8:	3e f4       	brtc	.+14     	; 0x8df8 <__fixunssfsi+0x56>
    8dea:	90 95       	com	r25
    8dec:	80 95       	com	r24
    8dee:	70 95       	com	r23
    8df0:	61 95       	neg	r22
    8df2:	7f 4f       	sbci	r23, 0xFF	; 255
    8df4:	8f 4f       	sbci	r24, 0xFF	; 255
    8df6:	9f 4f       	sbci	r25, 0xFF	; 255
    8df8:	08 95       	ret

00008dfa <__floatunsisf>:
    8dfa:	e8 94       	clt
    8dfc:	09 c0       	rjmp	.+18     	; 0x8e10 <__floatsisf+0x12>

00008dfe <__floatsisf>:
    8dfe:	97 fb       	bst	r25, 7
    8e00:	3e f4       	brtc	.+14     	; 0x8e10 <__floatsisf+0x12>
    8e02:	90 95       	com	r25
    8e04:	80 95       	com	r24
    8e06:	70 95       	com	r23
    8e08:	61 95       	neg	r22
    8e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    8e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    8e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    8e10:	99 23       	and	r25, r25
    8e12:	a9 f0       	breq	.+42     	; 0x8e3e <__floatsisf+0x40>
    8e14:	f9 2f       	mov	r31, r25
    8e16:	96 e9       	ldi	r25, 0x96	; 150
    8e18:	bb 27       	eor	r27, r27
    8e1a:	93 95       	inc	r25
    8e1c:	f6 95       	lsr	r31
    8e1e:	87 95       	ror	r24
    8e20:	77 95       	ror	r23
    8e22:	67 95       	ror	r22
    8e24:	b7 95       	ror	r27
    8e26:	f1 11       	cpse	r31, r1
    8e28:	f8 cf       	rjmp	.-16     	; 0x8e1a <__floatsisf+0x1c>
    8e2a:	fa f4       	brpl	.+62     	; 0x8e6a <__floatsisf+0x6c>
    8e2c:	bb 0f       	add	r27, r27
    8e2e:	11 f4       	brne	.+4      	; 0x8e34 <__floatsisf+0x36>
    8e30:	60 ff       	sbrs	r22, 0
    8e32:	1b c0       	rjmp	.+54     	; 0x8e6a <__floatsisf+0x6c>
    8e34:	6f 5f       	subi	r22, 0xFF	; 255
    8e36:	7f 4f       	sbci	r23, 0xFF	; 255
    8e38:	8f 4f       	sbci	r24, 0xFF	; 255
    8e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    8e3c:	16 c0       	rjmp	.+44     	; 0x8e6a <__floatsisf+0x6c>
    8e3e:	88 23       	and	r24, r24
    8e40:	11 f0       	breq	.+4      	; 0x8e46 <__floatsisf+0x48>
    8e42:	96 e9       	ldi	r25, 0x96	; 150
    8e44:	11 c0       	rjmp	.+34     	; 0x8e68 <__floatsisf+0x6a>
    8e46:	77 23       	and	r23, r23
    8e48:	21 f0       	breq	.+8      	; 0x8e52 <__floatsisf+0x54>
    8e4a:	9e e8       	ldi	r25, 0x8E	; 142
    8e4c:	87 2f       	mov	r24, r23
    8e4e:	76 2f       	mov	r23, r22
    8e50:	05 c0       	rjmp	.+10     	; 0x8e5c <__floatsisf+0x5e>
    8e52:	66 23       	and	r22, r22
    8e54:	71 f0       	breq	.+28     	; 0x8e72 <__floatsisf+0x74>
    8e56:	96 e8       	ldi	r25, 0x86	; 134
    8e58:	86 2f       	mov	r24, r22
    8e5a:	70 e0       	ldi	r23, 0x00	; 0
    8e5c:	60 e0       	ldi	r22, 0x00	; 0
    8e5e:	2a f0       	brmi	.+10     	; 0x8e6a <__floatsisf+0x6c>
    8e60:	9a 95       	dec	r25
    8e62:	66 0f       	add	r22, r22
    8e64:	77 1f       	adc	r23, r23
    8e66:	88 1f       	adc	r24, r24
    8e68:	da f7       	brpl	.-10     	; 0x8e60 <__floatsisf+0x62>
    8e6a:	88 0f       	add	r24, r24
    8e6c:	96 95       	lsr	r25
    8e6e:	87 95       	ror	r24
    8e70:	97 f9       	bld	r25, 7
    8e72:	08 95       	ret

00008e74 <__fp_inf>:
    8e74:	97 f9       	bld	r25, 7
    8e76:	9f 67       	ori	r25, 0x7F	; 127
    8e78:	80 e8       	ldi	r24, 0x80	; 128
    8e7a:	70 e0       	ldi	r23, 0x00	; 0
    8e7c:	60 e0       	ldi	r22, 0x00	; 0
    8e7e:	08 95       	ret

00008e80 <__fp_nan>:
    8e80:	9f ef       	ldi	r25, 0xFF	; 255
    8e82:	80 ec       	ldi	r24, 0xC0	; 192
    8e84:	08 95       	ret

00008e86 <__fp_pscA>:
    8e86:	00 24       	eor	r0, r0
    8e88:	0a 94       	dec	r0
    8e8a:	16 16       	cp	r1, r22
    8e8c:	17 06       	cpc	r1, r23
    8e8e:	18 06       	cpc	r1, r24
    8e90:	09 06       	cpc	r0, r25
    8e92:	08 95       	ret

00008e94 <__fp_pscB>:
    8e94:	00 24       	eor	r0, r0
    8e96:	0a 94       	dec	r0
    8e98:	12 16       	cp	r1, r18
    8e9a:	13 06       	cpc	r1, r19
    8e9c:	14 06       	cpc	r1, r20
    8e9e:	05 06       	cpc	r0, r21
    8ea0:	08 95       	ret

00008ea2 <__fp_round>:
    8ea2:	09 2e       	mov	r0, r25
    8ea4:	03 94       	inc	r0
    8ea6:	00 0c       	add	r0, r0
    8ea8:	11 f4       	brne	.+4      	; 0x8eae <__fp_round+0xc>
    8eaa:	88 23       	and	r24, r24
    8eac:	52 f0       	brmi	.+20     	; 0x8ec2 <__fp_round+0x20>
    8eae:	bb 0f       	add	r27, r27
    8eb0:	40 f4       	brcc	.+16     	; 0x8ec2 <__fp_round+0x20>
    8eb2:	bf 2b       	or	r27, r31
    8eb4:	11 f4       	brne	.+4      	; 0x8eba <__fp_round+0x18>
    8eb6:	60 ff       	sbrs	r22, 0
    8eb8:	04 c0       	rjmp	.+8      	; 0x8ec2 <__fp_round+0x20>
    8eba:	6f 5f       	subi	r22, 0xFF	; 255
    8ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    8ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    8ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    8ec2:	08 95       	ret

00008ec4 <__fp_split3>:
    8ec4:	57 fd       	sbrc	r21, 7
    8ec6:	90 58       	subi	r25, 0x80	; 128
    8ec8:	44 0f       	add	r20, r20
    8eca:	55 1f       	adc	r21, r21
    8ecc:	59 f0       	breq	.+22     	; 0x8ee4 <__fp_splitA+0x10>
    8ece:	5f 3f       	cpi	r21, 0xFF	; 255
    8ed0:	71 f0       	breq	.+28     	; 0x8eee <__fp_splitA+0x1a>
    8ed2:	47 95       	ror	r20

00008ed4 <__fp_splitA>:
    8ed4:	88 0f       	add	r24, r24
    8ed6:	97 fb       	bst	r25, 7
    8ed8:	99 1f       	adc	r25, r25
    8eda:	61 f0       	breq	.+24     	; 0x8ef4 <__fp_splitA+0x20>
    8edc:	9f 3f       	cpi	r25, 0xFF	; 255
    8ede:	79 f0       	breq	.+30     	; 0x8efe <__fp_splitA+0x2a>
    8ee0:	87 95       	ror	r24
    8ee2:	08 95       	ret
    8ee4:	12 16       	cp	r1, r18
    8ee6:	13 06       	cpc	r1, r19
    8ee8:	14 06       	cpc	r1, r20
    8eea:	55 1f       	adc	r21, r21
    8eec:	f2 cf       	rjmp	.-28     	; 0x8ed2 <__fp_split3+0xe>
    8eee:	46 95       	lsr	r20
    8ef0:	f1 df       	rcall	.-30     	; 0x8ed4 <__fp_splitA>
    8ef2:	08 c0       	rjmp	.+16     	; 0x8f04 <__fp_splitA+0x30>
    8ef4:	16 16       	cp	r1, r22
    8ef6:	17 06       	cpc	r1, r23
    8ef8:	18 06       	cpc	r1, r24
    8efa:	99 1f       	adc	r25, r25
    8efc:	f1 cf       	rjmp	.-30     	; 0x8ee0 <__fp_splitA+0xc>
    8efe:	86 95       	lsr	r24
    8f00:	71 05       	cpc	r23, r1
    8f02:	61 05       	cpc	r22, r1
    8f04:	08 94       	sec
    8f06:	08 95       	ret

00008f08 <__fp_zero>:
    8f08:	e8 94       	clt

00008f0a <__fp_szero>:
    8f0a:	bb 27       	eor	r27, r27
    8f0c:	66 27       	eor	r22, r22
    8f0e:	77 27       	eor	r23, r23
    8f10:	cb 01       	movw	r24, r22
    8f12:	97 f9       	bld	r25, 7
    8f14:	08 95       	ret

00008f16 <__mulsf3>:
    8f16:	0b d0       	rcall	.+22     	; 0x8f2e <__mulsf3x>
    8f18:	c4 cf       	rjmp	.-120    	; 0x8ea2 <__fp_round>
    8f1a:	b5 df       	rcall	.-150    	; 0x8e86 <__fp_pscA>
    8f1c:	28 f0       	brcs	.+10     	; 0x8f28 <__mulsf3+0x12>
    8f1e:	ba df       	rcall	.-140    	; 0x8e94 <__fp_pscB>
    8f20:	18 f0       	brcs	.+6      	; 0x8f28 <__mulsf3+0x12>
    8f22:	95 23       	and	r25, r21
    8f24:	09 f0       	breq	.+2      	; 0x8f28 <__mulsf3+0x12>
    8f26:	a6 cf       	rjmp	.-180    	; 0x8e74 <__fp_inf>
    8f28:	ab cf       	rjmp	.-170    	; 0x8e80 <__fp_nan>
    8f2a:	11 24       	eor	r1, r1
    8f2c:	ee cf       	rjmp	.-36     	; 0x8f0a <__fp_szero>

00008f2e <__mulsf3x>:
    8f2e:	ca df       	rcall	.-108    	; 0x8ec4 <__fp_split3>
    8f30:	a0 f3       	brcs	.-24     	; 0x8f1a <__mulsf3+0x4>

00008f32 <__mulsf3_pse>:
    8f32:	95 9f       	mul	r25, r21
    8f34:	d1 f3       	breq	.-12     	; 0x8f2a <__mulsf3+0x14>
    8f36:	95 0f       	add	r25, r21
    8f38:	50 e0       	ldi	r21, 0x00	; 0
    8f3a:	55 1f       	adc	r21, r21
    8f3c:	62 9f       	mul	r22, r18
    8f3e:	f0 01       	movw	r30, r0
    8f40:	72 9f       	mul	r23, r18
    8f42:	bb 27       	eor	r27, r27
    8f44:	f0 0d       	add	r31, r0
    8f46:	b1 1d       	adc	r27, r1
    8f48:	63 9f       	mul	r22, r19
    8f4a:	aa 27       	eor	r26, r26
    8f4c:	f0 0d       	add	r31, r0
    8f4e:	b1 1d       	adc	r27, r1
    8f50:	aa 1f       	adc	r26, r26
    8f52:	64 9f       	mul	r22, r20
    8f54:	66 27       	eor	r22, r22
    8f56:	b0 0d       	add	r27, r0
    8f58:	a1 1d       	adc	r26, r1
    8f5a:	66 1f       	adc	r22, r22
    8f5c:	82 9f       	mul	r24, r18
    8f5e:	22 27       	eor	r18, r18
    8f60:	b0 0d       	add	r27, r0
    8f62:	a1 1d       	adc	r26, r1
    8f64:	62 1f       	adc	r22, r18
    8f66:	73 9f       	mul	r23, r19
    8f68:	b0 0d       	add	r27, r0
    8f6a:	a1 1d       	adc	r26, r1
    8f6c:	62 1f       	adc	r22, r18
    8f6e:	83 9f       	mul	r24, r19
    8f70:	a0 0d       	add	r26, r0
    8f72:	61 1d       	adc	r22, r1
    8f74:	22 1f       	adc	r18, r18
    8f76:	74 9f       	mul	r23, r20
    8f78:	33 27       	eor	r19, r19
    8f7a:	a0 0d       	add	r26, r0
    8f7c:	61 1d       	adc	r22, r1
    8f7e:	23 1f       	adc	r18, r19
    8f80:	84 9f       	mul	r24, r20
    8f82:	60 0d       	add	r22, r0
    8f84:	21 1d       	adc	r18, r1
    8f86:	82 2f       	mov	r24, r18
    8f88:	76 2f       	mov	r23, r22
    8f8a:	6a 2f       	mov	r22, r26
    8f8c:	11 24       	eor	r1, r1
    8f8e:	9f 57       	subi	r25, 0x7F	; 127
    8f90:	50 40       	sbci	r21, 0x00	; 0
    8f92:	8a f0       	brmi	.+34     	; 0x8fb6 <__mulsf3_pse+0x84>
    8f94:	e1 f0       	breq	.+56     	; 0x8fce <__mulsf3_pse+0x9c>
    8f96:	88 23       	and	r24, r24
    8f98:	4a f0       	brmi	.+18     	; 0x8fac <__mulsf3_pse+0x7a>
    8f9a:	ee 0f       	add	r30, r30
    8f9c:	ff 1f       	adc	r31, r31
    8f9e:	bb 1f       	adc	r27, r27
    8fa0:	66 1f       	adc	r22, r22
    8fa2:	77 1f       	adc	r23, r23
    8fa4:	88 1f       	adc	r24, r24
    8fa6:	91 50       	subi	r25, 0x01	; 1
    8fa8:	50 40       	sbci	r21, 0x00	; 0
    8faa:	a9 f7       	brne	.-22     	; 0x8f96 <__mulsf3_pse+0x64>
    8fac:	9e 3f       	cpi	r25, 0xFE	; 254
    8fae:	51 05       	cpc	r21, r1
    8fb0:	70 f0       	brcs	.+28     	; 0x8fce <__mulsf3_pse+0x9c>
    8fb2:	60 cf       	rjmp	.-320    	; 0x8e74 <__fp_inf>
    8fb4:	aa cf       	rjmp	.-172    	; 0x8f0a <__fp_szero>
    8fb6:	5f 3f       	cpi	r21, 0xFF	; 255
    8fb8:	ec f3       	brlt	.-6      	; 0x8fb4 <__mulsf3_pse+0x82>
    8fba:	98 3e       	cpi	r25, 0xE8	; 232
    8fbc:	dc f3       	brlt	.-10     	; 0x8fb4 <__mulsf3_pse+0x82>
    8fbe:	86 95       	lsr	r24
    8fc0:	77 95       	ror	r23
    8fc2:	67 95       	ror	r22
    8fc4:	b7 95       	ror	r27
    8fc6:	f7 95       	ror	r31
    8fc8:	e7 95       	ror	r30
    8fca:	9f 5f       	subi	r25, 0xFF	; 255
    8fcc:	c1 f7       	brne	.-16     	; 0x8fbe <__mulsf3_pse+0x8c>
    8fce:	fe 2b       	or	r31, r30
    8fd0:	88 0f       	add	r24, r24
    8fd2:	91 1d       	adc	r25, r1
    8fd4:	96 95       	lsr	r25
    8fd6:	87 95       	ror	r24
    8fd8:	97 f9       	bld	r25, 7
    8fda:	08 95       	ret

00008fdc <memcpy>:
    8fdc:	fb 01       	movw	r30, r22
    8fde:	dc 01       	movw	r26, r24
    8fe0:	02 c0       	rjmp	.+4      	; 0x8fe6 <memcpy+0xa>
    8fe2:	01 90       	ld	r0, Z+
    8fe4:	0d 92       	st	X+, r0
    8fe6:	41 50       	subi	r20, 0x01	; 1
    8fe8:	50 40       	sbci	r21, 0x00	; 0
    8fea:	d8 f7       	brcc	.-10     	; 0x8fe2 <memcpy+0x6>
    8fec:	08 95       	ret

00008fee <fdevopen>:
    8fee:	0f 93       	push	r16
    8ff0:	1f 93       	push	r17
    8ff2:	cf 93       	push	r28
    8ff4:	df 93       	push	r29
    8ff6:	00 97       	sbiw	r24, 0x00	; 0
    8ff8:	31 f4       	brne	.+12     	; 0x9006 <fdevopen+0x18>
    8ffa:	61 15       	cp	r22, r1
    8ffc:	71 05       	cpc	r23, r1
    8ffe:	19 f4       	brne	.+6      	; 0x9006 <fdevopen+0x18>
    9000:	80 e0       	ldi	r24, 0x00	; 0
    9002:	90 e0       	ldi	r25, 0x00	; 0
    9004:	39 c0       	rjmp	.+114    	; 0x9078 <fdevopen+0x8a>
    9006:	8b 01       	movw	r16, r22
    9008:	ec 01       	movw	r28, r24
    900a:	6e e0       	ldi	r22, 0x0E	; 14
    900c:	70 e0       	ldi	r23, 0x00	; 0
    900e:	81 e0       	ldi	r24, 0x01	; 1
    9010:	90 e0       	ldi	r25, 0x00	; 0
    9012:	99 d2       	rcall	.+1330   	; 0x9546 <calloc>
    9014:	fc 01       	movw	r30, r24
    9016:	89 2b       	or	r24, r25
    9018:	99 f3       	breq	.-26     	; 0x9000 <fdevopen+0x12>
    901a:	80 e8       	ldi	r24, 0x80	; 128
    901c:	83 83       	std	Z+3, r24	; 0x03
    901e:	01 15       	cp	r16, r1
    9020:	11 05       	cpc	r17, r1
    9022:	71 f0       	breq	.+28     	; 0x9040 <fdevopen+0x52>
    9024:	02 87       	std	Z+10, r16	; 0x0a
    9026:	13 87       	std	Z+11, r17	; 0x0b
    9028:	81 e8       	ldi	r24, 0x81	; 129
    902a:	83 83       	std	Z+3, r24	; 0x03
    902c:	80 91 db 2c 	lds	r24, 0x2CDB	; 0x802cdb <__iob>
    9030:	90 91 dc 2c 	lds	r25, 0x2CDC	; 0x802cdc <__iob+0x1>
    9034:	89 2b       	or	r24, r25
    9036:	21 f4       	brne	.+8      	; 0x9040 <fdevopen+0x52>
    9038:	e0 93 db 2c 	sts	0x2CDB, r30	; 0x802cdb <__iob>
    903c:	f0 93 dc 2c 	sts	0x2CDC, r31	; 0x802cdc <__iob+0x1>
    9040:	20 97       	sbiw	r28, 0x00	; 0
    9042:	c9 f0       	breq	.+50     	; 0x9076 <fdevopen+0x88>
    9044:	c0 87       	std	Z+8, r28	; 0x08
    9046:	d1 87       	std	Z+9, r29	; 0x09
    9048:	83 81       	ldd	r24, Z+3	; 0x03
    904a:	82 60       	ori	r24, 0x02	; 2
    904c:	83 83       	std	Z+3, r24	; 0x03
    904e:	80 91 dd 2c 	lds	r24, 0x2CDD	; 0x802cdd <__iob+0x2>
    9052:	90 91 de 2c 	lds	r25, 0x2CDE	; 0x802cde <__iob+0x3>
    9056:	89 2b       	or	r24, r25
    9058:	71 f4       	brne	.+28     	; 0x9076 <fdevopen+0x88>
    905a:	e0 93 dd 2c 	sts	0x2CDD, r30	; 0x802cdd <__iob+0x2>
    905e:	f0 93 de 2c 	sts	0x2CDE, r31	; 0x802cde <__iob+0x3>
    9062:	80 91 df 2c 	lds	r24, 0x2CDF	; 0x802cdf <__iob+0x4>
    9066:	90 91 e0 2c 	lds	r25, 0x2CE0	; 0x802ce0 <__iob+0x5>
    906a:	89 2b       	or	r24, r25
    906c:	21 f4       	brne	.+8      	; 0x9076 <fdevopen+0x88>
    906e:	e0 93 df 2c 	sts	0x2CDF, r30	; 0x802cdf <__iob+0x4>
    9072:	f0 93 e0 2c 	sts	0x2CE0, r31	; 0x802ce0 <__iob+0x5>
    9076:	cf 01       	movw	r24, r30
    9078:	df 91       	pop	r29
    907a:	cf 91       	pop	r28
    907c:	1f 91       	pop	r17
    907e:	0f 91       	pop	r16
    9080:	08 95       	ret

00009082 <printf>:
    9082:	cf 93       	push	r28
    9084:	df 93       	push	r29
    9086:	cd b7       	in	r28, 0x3d	; 61
    9088:	de b7       	in	r29, 0x3e	; 62
    908a:	ae 01       	movw	r20, r28
    908c:	4a 5f       	subi	r20, 0xFA	; 250
    908e:	5f 4f       	sbci	r21, 0xFF	; 255
    9090:	fa 01       	movw	r30, r20
    9092:	61 91       	ld	r22, Z+
    9094:	71 91       	ld	r23, Z+
    9096:	af 01       	movw	r20, r30
    9098:	80 91 dd 2c 	lds	r24, 0x2CDD	; 0x802cdd <__iob+0x2>
    909c:	90 91 de 2c 	lds	r25, 0x2CDE	; 0x802cde <__iob+0x3>
    90a0:	5b d0       	rcall	.+182    	; 0x9158 <vfprintf>
    90a2:	df 91       	pop	r29
    90a4:	cf 91       	pop	r28
    90a6:	08 95       	ret

000090a8 <puts>:
    90a8:	0f 93       	push	r16
    90aa:	1f 93       	push	r17
    90ac:	cf 93       	push	r28
    90ae:	df 93       	push	r29
    90b0:	e0 91 dd 2c 	lds	r30, 0x2CDD	; 0x802cdd <__iob+0x2>
    90b4:	f0 91 de 2c 	lds	r31, 0x2CDE	; 0x802cde <__iob+0x3>
    90b8:	23 81       	ldd	r18, Z+3	; 0x03
    90ba:	21 ff       	sbrs	r18, 1
    90bc:	1b c0       	rjmp	.+54     	; 0x90f4 <puts+0x4c>
    90be:	8c 01       	movw	r16, r24
    90c0:	d0 e0       	ldi	r29, 0x00	; 0
    90c2:	c0 e0       	ldi	r28, 0x00	; 0
    90c4:	f8 01       	movw	r30, r16
    90c6:	81 91       	ld	r24, Z+
    90c8:	8f 01       	movw	r16, r30
    90ca:	60 91 dd 2c 	lds	r22, 0x2CDD	; 0x802cdd <__iob+0x2>
    90ce:	70 91 de 2c 	lds	r23, 0x2CDE	; 0x802cde <__iob+0x3>
    90d2:	db 01       	movw	r26, r22
    90d4:	18 96       	adiw	r26, 0x08	; 8
    90d6:	ed 91       	ld	r30, X+
    90d8:	fc 91       	ld	r31, X
    90da:	19 97       	sbiw	r26, 0x09	; 9
    90dc:	88 23       	and	r24, r24
    90de:	31 f0       	breq	.+12     	; 0x90ec <puts+0x44>
    90e0:	19 95       	eicall
    90e2:	89 2b       	or	r24, r25
    90e4:	79 f3       	breq	.-34     	; 0x90c4 <puts+0x1c>
    90e6:	df ef       	ldi	r29, 0xFF	; 255
    90e8:	cf ef       	ldi	r28, 0xFF	; 255
    90ea:	ec cf       	rjmp	.-40     	; 0x90c4 <puts+0x1c>
    90ec:	8a e0       	ldi	r24, 0x0A	; 10
    90ee:	19 95       	eicall
    90f0:	89 2b       	or	r24, r25
    90f2:	19 f0       	breq	.+6      	; 0x90fa <puts+0x52>
    90f4:	8f ef       	ldi	r24, 0xFF	; 255
    90f6:	9f ef       	ldi	r25, 0xFF	; 255
    90f8:	02 c0       	rjmp	.+4      	; 0x90fe <puts+0x56>
    90fa:	8d 2f       	mov	r24, r29
    90fc:	9c 2f       	mov	r25, r28
    90fe:	df 91       	pop	r29
    9100:	cf 91       	pop	r28
    9102:	1f 91       	pop	r17
    9104:	0f 91       	pop	r16
    9106:	08 95       	ret

00009108 <sprintf>:
    9108:	0f 93       	push	r16
    910a:	1f 93       	push	r17
    910c:	cf 93       	push	r28
    910e:	df 93       	push	r29
    9110:	cd b7       	in	r28, 0x3d	; 61
    9112:	de b7       	in	r29, 0x3e	; 62
    9114:	2e 97       	sbiw	r28, 0x0e	; 14
    9116:	cd bf       	out	0x3d, r28	; 61
    9118:	de bf       	out	0x3e, r29	; 62
    911a:	0e 89       	ldd	r16, Y+22	; 0x16
    911c:	1f 89       	ldd	r17, Y+23	; 0x17
    911e:	86 e0       	ldi	r24, 0x06	; 6
    9120:	8c 83       	std	Y+4, r24	; 0x04
    9122:	09 83       	std	Y+1, r16	; 0x01
    9124:	1a 83       	std	Y+2, r17	; 0x02
    9126:	8f ef       	ldi	r24, 0xFF	; 255
    9128:	9f e7       	ldi	r25, 0x7F	; 127
    912a:	8d 83       	std	Y+5, r24	; 0x05
    912c:	9e 83       	std	Y+6, r25	; 0x06
    912e:	ae 01       	movw	r20, r28
    9130:	46 5e       	subi	r20, 0xE6	; 230
    9132:	5f 4f       	sbci	r21, 0xFF	; 255
    9134:	68 8d       	ldd	r22, Y+24	; 0x18
    9136:	79 8d       	ldd	r23, Y+25	; 0x19
    9138:	ce 01       	movw	r24, r28
    913a:	01 96       	adiw	r24, 0x01	; 1
    913c:	0d d0       	rcall	.+26     	; 0x9158 <vfprintf>
    913e:	ef 81       	ldd	r30, Y+7	; 0x07
    9140:	f8 85       	ldd	r31, Y+8	; 0x08
    9142:	e0 0f       	add	r30, r16
    9144:	f1 1f       	adc	r31, r17
    9146:	10 82       	st	Z, r1
    9148:	2e 96       	adiw	r28, 0x0e	; 14
    914a:	cd bf       	out	0x3d, r28	; 61
    914c:	de bf       	out	0x3e, r29	; 62
    914e:	df 91       	pop	r29
    9150:	cf 91       	pop	r28
    9152:	1f 91       	pop	r17
    9154:	0f 91       	pop	r16
    9156:	08 95       	ret

00009158 <vfprintf>:
    9158:	2f 92       	push	r2
    915a:	3f 92       	push	r3
    915c:	4f 92       	push	r4
    915e:	5f 92       	push	r5
    9160:	6f 92       	push	r6
    9162:	7f 92       	push	r7
    9164:	8f 92       	push	r8
    9166:	9f 92       	push	r9
    9168:	af 92       	push	r10
    916a:	bf 92       	push	r11
    916c:	cf 92       	push	r12
    916e:	df 92       	push	r13
    9170:	ef 92       	push	r14
    9172:	ff 92       	push	r15
    9174:	0f 93       	push	r16
    9176:	1f 93       	push	r17
    9178:	cf 93       	push	r28
    917a:	df 93       	push	r29
    917c:	cd b7       	in	r28, 0x3d	; 61
    917e:	de b7       	in	r29, 0x3e	; 62
    9180:	2b 97       	sbiw	r28, 0x0b	; 11
    9182:	cd bf       	out	0x3d, r28	; 61
    9184:	de bf       	out	0x3e, r29	; 62
    9186:	6c 01       	movw	r12, r24
    9188:	7b 01       	movw	r14, r22
    918a:	8a 01       	movw	r16, r20
    918c:	fc 01       	movw	r30, r24
    918e:	16 82       	std	Z+6, r1	; 0x06
    9190:	17 82       	std	Z+7, r1	; 0x07
    9192:	83 81       	ldd	r24, Z+3	; 0x03
    9194:	81 ff       	sbrs	r24, 1
    9196:	bf c1       	rjmp	.+894    	; 0x9516 <vfprintf+0x3be>
    9198:	ce 01       	movw	r24, r28
    919a:	01 96       	adiw	r24, 0x01	; 1
    919c:	3c 01       	movw	r6, r24
    919e:	f6 01       	movw	r30, r12
    91a0:	93 81       	ldd	r25, Z+3	; 0x03
    91a2:	f7 01       	movw	r30, r14
    91a4:	93 fd       	sbrc	r25, 3
    91a6:	85 91       	lpm	r24, Z+
    91a8:	93 ff       	sbrs	r25, 3
    91aa:	81 91       	ld	r24, Z+
    91ac:	7f 01       	movw	r14, r30
    91ae:	88 23       	and	r24, r24
    91b0:	09 f4       	brne	.+2      	; 0x91b4 <vfprintf+0x5c>
    91b2:	ad c1       	rjmp	.+858    	; 0x950e <vfprintf+0x3b6>
    91b4:	85 32       	cpi	r24, 0x25	; 37
    91b6:	39 f4       	brne	.+14     	; 0x91c6 <vfprintf+0x6e>
    91b8:	93 fd       	sbrc	r25, 3
    91ba:	85 91       	lpm	r24, Z+
    91bc:	93 ff       	sbrs	r25, 3
    91be:	81 91       	ld	r24, Z+
    91c0:	7f 01       	movw	r14, r30
    91c2:	85 32       	cpi	r24, 0x25	; 37
    91c4:	21 f4       	brne	.+8      	; 0x91ce <vfprintf+0x76>
    91c6:	b6 01       	movw	r22, r12
    91c8:	90 e0       	ldi	r25, 0x00	; 0
    91ca:	15 d3       	rcall	.+1578   	; 0x97f6 <fputc>
    91cc:	e8 cf       	rjmp	.-48     	; 0x919e <vfprintf+0x46>
    91ce:	91 2c       	mov	r9, r1
    91d0:	21 2c       	mov	r2, r1
    91d2:	31 2c       	mov	r3, r1
    91d4:	ff e1       	ldi	r31, 0x1F	; 31
    91d6:	f3 15       	cp	r31, r3
    91d8:	d8 f0       	brcs	.+54     	; 0x9210 <vfprintf+0xb8>
    91da:	8b 32       	cpi	r24, 0x2B	; 43
    91dc:	79 f0       	breq	.+30     	; 0x91fc <vfprintf+0xa4>
    91de:	38 f4       	brcc	.+14     	; 0x91ee <vfprintf+0x96>
    91e0:	80 32       	cpi	r24, 0x20	; 32
    91e2:	79 f0       	breq	.+30     	; 0x9202 <vfprintf+0xaa>
    91e4:	83 32       	cpi	r24, 0x23	; 35
    91e6:	a1 f4       	brne	.+40     	; 0x9210 <vfprintf+0xb8>
    91e8:	23 2d       	mov	r18, r3
    91ea:	20 61       	ori	r18, 0x10	; 16
    91ec:	1d c0       	rjmp	.+58     	; 0x9228 <vfprintf+0xd0>
    91ee:	8d 32       	cpi	r24, 0x2D	; 45
    91f0:	61 f0       	breq	.+24     	; 0x920a <vfprintf+0xb2>
    91f2:	80 33       	cpi	r24, 0x30	; 48
    91f4:	69 f4       	brne	.+26     	; 0x9210 <vfprintf+0xb8>
    91f6:	23 2d       	mov	r18, r3
    91f8:	21 60       	ori	r18, 0x01	; 1
    91fa:	16 c0       	rjmp	.+44     	; 0x9228 <vfprintf+0xd0>
    91fc:	83 2d       	mov	r24, r3
    91fe:	82 60       	ori	r24, 0x02	; 2
    9200:	38 2e       	mov	r3, r24
    9202:	e3 2d       	mov	r30, r3
    9204:	e4 60       	ori	r30, 0x04	; 4
    9206:	3e 2e       	mov	r3, r30
    9208:	2a c0       	rjmp	.+84     	; 0x925e <vfprintf+0x106>
    920a:	f3 2d       	mov	r31, r3
    920c:	f8 60       	ori	r31, 0x08	; 8
    920e:	1d c0       	rjmp	.+58     	; 0x924a <vfprintf+0xf2>
    9210:	37 fc       	sbrc	r3, 7
    9212:	2d c0       	rjmp	.+90     	; 0x926e <vfprintf+0x116>
    9214:	20 ed       	ldi	r18, 0xD0	; 208
    9216:	28 0f       	add	r18, r24
    9218:	2a 30       	cpi	r18, 0x0A	; 10
    921a:	40 f0       	brcs	.+16     	; 0x922c <vfprintf+0xd4>
    921c:	8e 32       	cpi	r24, 0x2E	; 46
    921e:	b9 f4       	brne	.+46     	; 0x924e <vfprintf+0xf6>
    9220:	36 fc       	sbrc	r3, 6
    9222:	75 c1       	rjmp	.+746    	; 0x950e <vfprintf+0x3b6>
    9224:	23 2d       	mov	r18, r3
    9226:	20 64       	ori	r18, 0x40	; 64
    9228:	32 2e       	mov	r3, r18
    922a:	19 c0       	rjmp	.+50     	; 0x925e <vfprintf+0x106>
    922c:	36 fe       	sbrs	r3, 6
    922e:	06 c0       	rjmp	.+12     	; 0x923c <vfprintf+0xe4>
    9230:	8a e0       	ldi	r24, 0x0A	; 10
    9232:	98 9e       	mul	r9, r24
    9234:	20 0d       	add	r18, r0
    9236:	11 24       	eor	r1, r1
    9238:	92 2e       	mov	r9, r18
    923a:	11 c0       	rjmp	.+34     	; 0x925e <vfprintf+0x106>
    923c:	ea e0       	ldi	r30, 0x0A	; 10
    923e:	2e 9e       	mul	r2, r30
    9240:	20 0d       	add	r18, r0
    9242:	11 24       	eor	r1, r1
    9244:	22 2e       	mov	r2, r18
    9246:	f3 2d       	mov	r31, r3
    9248:	f0 62       	ori	r31, 0x20	; 32
    924a:	3f 2e       	mov	r3, r31
    924c:	08 c0       	rjmp	.+16     	; 0x925e <vfprintf+0x106>
    924e:	8c 36       	cpi	r24, 0x6C	; 108
    9250:	21 f4       	brne	.+8      	; 0x925a <vfprintf+0x102>
    9252:	83 2d       	mov	r24, r3
    9254:	80 68       	ori	r24, 0x80	; 128
    9256:	38 2e       	mov	r3, r24
    9258:	02 c0       	rjmp	.+4      	; 0x925e <vfprintf+0x106>
    925a:	88 36       	cpi	r24, 0x68	; 104
    925c:	41 f4       	brne	.+16     	; 0x926e <vfprintf+0x116>
    925e:	f7 01       	movw	r30, r14
    9260:	93 fd       	sbrc	r25, 3
    9262:	85 91       	lpm	r24, Z+
    9264:	93 ff       	sbrs	r25, 3
    9266:	81 91       	ld	r24, Z+
    9268:	7f 01       	movw	r14, r30
    926a:	81 11       	cpse	r24, r1
    926c:	b3 cf       	rjmp	.-154    	; 0x91d4 <vfprintf+0x7c>
    926e:	98 2f       	mov	r25, r24
    9270:	9f 7d       	andi	r25, 0xDF	; 223
    9272:	95 54       	subi	r25, 0x45	; 69
    9274:	93 30       	cpi	r25, 0x03	; 3
    9276:	28 f4       	brcc	.+10     	; 0x9282 <vfprintf+0x12a>
    9278:	0c 5f       	subi	r16, 0xFC	; 252
    927a:	1f 4f       	sbci	r17, 0xFF	; 255
    927c:	9f e3       	ldi	r25, 0x3F	; 63
    927e:	99 83       	std	Y+1, r25	; 0x01
    9280:	0d c0       	rjmp	.+26     	; 0x929c <vfprintf+0x144>
    9282:	83 36       	cpi	r24, 0x63	; 99
    9284:	31 f0       	breq	.+12     	; 0x9292 <vfprintf+0x13a>
    9286:	83 37       	cpi	r24, 0x73	; 115
    9288:	71 f0       	breq	.+28     	; 0x92a6 <vfprintf+0x14e>
    928a:	83 35       	cpi	r24, 0x53	; 83
    928c:	09 f0       	breq	.+2      	; 0x9290 <vfprintf+0x138>
    928e:	55 c0       	rjmp	.+170    	; 0x933a <vfprintf+0x1e2>
    9290:	20 c0       	rjmp	.+64     	; 0x92d2 <vfprintf+0x17a>
    9292:	f8 01       	movw	r30, r16
    9294:	80 81       	ld	r24, Z
    9296:	89 83       	std	Y+1, r24	; 0x01
    9298:	0e 5f       	subi	r16, 0xFE	; 254
    929a:	1f 4f       	sbci	r17, 0xFF	; 255
    929c:	88 24       	eor	r8, r8
    929e:	83 94       	inc	r8
    92a0:	91 2c       	mov	r9, r1
    92a2:	53 01       	movw	r10, r6
    92a4:	12 c0       	rjmp	.+36     	; 0x92ca <vfprintf+0x172>
    92a6:	28 01       	movw	r4, r16
    92a8:	f2 e0       	ldi	r31, 0x02	; 2
    92aa:	4f 0e       	add	r4, r31
    92ac:	51 1c       	adc	r5, r1
    92ae:	f8 01       	movw	r30, r16
    92b0:	a0 80       	ld	r10, Z
    92b2:	b1 80       	ldd	r11, Z+1	; 0x01
    92b4:	36 fe       	sbrs	r3, 6
    92b6:	03 c0       	rjmp	.+6      	; 0x92be <vfprintf+0x166>
    92b8:	69 2d       	mov	r22, r9
    92ba:	70 e0       	ldi	r23, 0x00	; 0
    92bc:	02 c0       	rjmp	.+4      	; 0x92c2 <vfprintf+0x16a>
    92be:	6f ef       	ldi	r22, 0xFF	; 255
    92c0:	7f ef       	ldi	r23, 0xFF	; 255
    92c2:	c5 01       	movw	r24, r10
    92c4:	8d d2       	rcall	.+1306   	; 0x97e0 <strnlen>
    92c6:	4c 01       	movw	r8, r24
    92c8:	82 01       	movw	r16, r4
    92ca:	f3 2d       	mov	r31, r3
    92cc:	ff 77       	andi	r31, 0x7F	; 127
    92ce:	3f 2e       	mov	r3, r31
    92d0:	15 c0       	rjmp	.+42     	; 0x92fc <vfprintf+0x1a4>
    92d2:	28 01       	movw	r4, r16
    92d4:	22 e0       	ldi	r18, 0x02	; 2
    92d6:	42 0e       	add	r4, r18
    92d8:	51 1c       	adc	r5, r1
    92da:	f8 01       	movw	r30, r16
    92dc:	a0 80       	ld	r10, Z
    92de:	b1 80       	ldd	r11, Z+1	; 0x01
    92e0:	36 fe       	sbrs	r3, 6
    92e2:	03 c0       	rjmp	.+6      	; 0x92ea <vfprintf+0x192>
    92e4:	69 2d       	mov	r22, r9
    92e6:	70 e0       	ldi	r23, 0x00	; 0
    92e8:	02 c0       	rjmp	.+4      	; 0x92ee <vfprintf+0x196>
    92ea:	6f ef       	ldi	r22, 0xFF	; 255
    92ec:	7f ef       	ldi	r23, 0xFF	; 255
    92ee:	c5 01       	movw	r24, r10
    92f0:	65 d2       	rcall	.+1226   	; 0x97bc <strnlen_P>
    92f2:	4c 01       	movw	r8, r24
    92f4:	f3 2d       	mov	r31, r3
    92f6:	f0 68       	ori	r31, 0x80	; 128
    92f8:	3f 2e       	mov	r3, r31
    92fa:	82 01       	movw	r16, r4
    92fc:	33 fc       	sbrc	r3, 3
    92fe:	19 c0       	rjmp	.+50     	; 0x9332 <vfprintf+0x1da>
    9300:	82 2d       	mov	r24, r2
    9302:	90 e0       	ldi	r25, 0x00	; 0
    9304:	88 16       	cp	r8, r24
    9306:	99 06       	cpc	r9, r25
    9308:	a0 f4       	brcc	.+40     	; 0x9332 <vfprintf+0x1da>
    930a:	b6 01       	movw	r22, r12
    930c:	80 e2       	ldi	r24, 0x20	; 32
    930e:	90 e0       	ldi	r25, 0x00	; 0
    9310:	72 d2       	rcall	.+1252   	; 0x97f6 <fputc>
    9312:	2a 94       	dec	r2
    9314:	f5 cf       	rjmp	.-22     	; 0x9300 <vfprintf+0x1a8>
    9316:	f5 01       	movw	r30, r10
    9318:	37 fc       	sbrc	r3, 7
    931a:	85 91       	lpm	r24, Z+
    931c:	37 fe       	sbrs	r3, 7
    931e:	81 91       	ld	r24, Z+
    9320:	5f 01       	movw	r10, r30
    9322:	b6 01       	movw	r22, r12
    9324:	90 e0       	ldi	r25, 0x00	; 0
    9326:	67 d2       	rcall	.+1230   	; 0x97f6 <fputc>
    9328:	21 10       	cpse	r2, r1
    932a:	2a 94       	dec	r2
    932c:	21 e0       	ldi	r18, 0x01	; 1
    932e:	82 1a       	sub	r8, r18
    9330:	91 08       	sbc	r9, r1
    9332:	81 14       	cp	r8, r1
    9334:	91 04       	cpc	r9, r1
    9336:	79 f7       	brne	.-34     	; 0x9316 <vfprintf+0x1be>
    9338:	e1 c0       	rjmp	.+450    	; 0x94fc <vfprintf+0x3a4>
    933a:	84 36       	cpi	r24, 0x64	; 100
    933c:	11 f0       	breq	.+4      	; 0x9342 <vfprintf+0x1ea>
    933e:	89 36       	cpi	r24, 0x69	; 105
    9340:	39 f5       	brne	.+78     	; 0x9390 <vfprintf+0x238>
    9342:	f8 01       	movw	r30, r16
    9344:	37 fe       	sbrs	r3, 7
    9346:	07 c0       	rjmp	.+14     	; 0x9356 <vfprintf+0x1fe>
    9348:	60 81       	ld	r22, Z
    934a:	71 81       	ldd	r23, Z+1	; 0x01
    934c:	82 81       	ldd	r24, Z+2	; 0x02
    934e:	93 81       	ldd	r25, Z+3	; 0x03
    9350:	0c 5f       	subi	r16, 0xFC	; 252
    9352:	1f 4f       	sbci	r17, 0xFF	; 255
    9354:	08 c0       	rjmp	.+16     	; 0x9366 <vfprintf+0x20e>
    9356:	60 81       	ld	r22, Z
    9358:	71 81       	ldd	r23, Z+1	; 0x01
    935a:	07 2e       	mov	r0, r23
    935c:	00 0c       	add	r0, r0
    935e:	88 0b       	sbc	r24, r24
    9360:	99 0b       	sbc	r25, r25
    9362:	0e 5f       	subi	r16, 0xFE	; 254
    9364:	1f 4f       	sbci	r17, 0xFF	; 255
    9366:	f3 2d       	mov	r31, r3
    9368:	ff 76       	andi	r31, 0x6F	; 111
    936a:	3f 2e       	mov	r3, r31
    936c:	97 ff       	sbrs	r25, 7
    936e:	09 c0       	rjmp	.+18     	; 0x9382 <vfprintf+0x22a>
    9370:	90 95       	com	r25
    9372:	80 95       	com	r24
    9374:	70 95       	com	r23
    9376:	61 95       	neg	r22
    9378:	7f 4f       	sbci	r23, 0xFF	; 255
    937a:	8f 4f       	sbci	r24, 0xFF	; 255
    937c:	9f 4f       	sbci	r25, 0xFF	; 255
    937e:	f0 68       	ori	r31, 0x80	; 128
    9380:	3f 2e       	mov	r3, r31
    9382:	2a e0       	ldi	r18, 0x0A	; 10
    9384:	30 e0       	ldi	r19, 0x00	; 0
    9386:	a3 01       	movw	r20, r6
    9388:	72 d2       	rcall	.+1252   	; 0x986e <__ultoa_invert>
    938a:	88 2e       	mov	r8, r24
    938c:	86 18       	sub	r8, r6
    938e:	44 c0       	rjmp	.+136    	; 0x9418 <vfprintf+0x2c0>
    9390:	85 37       	cpi	r24, 0x75	; 117
    9392:	31 f4       	brne	.+12     	; 0x93a0 <vfprintf+0x248>
    9394:	23 2d       	mov	r18, r3
    9396:	2f 7e       	andi	r18, 0xEF	; 239
    9398:	b2 2e       	mov	r11, r18
    939a:	2a e0       	ldi	r18, 0x0A	; 10
    939c:	30 e0       	ldi	r19, 0x00	; 0
    939e:	25 c0       	rjmp	.+74     	; 0x93ea <vfprintf+0x292>
    93a0:	93 2d       	mov	r25, r3
    93a2:	99 7f       	andi	r25, 0xF9	; 249
    93a4:	b9 2e       	mov	r11, r25
    93a6:	8f 36       	cpi	r24, 0x6F	; 111
    93a8:	c1 f0       	breq	.+48     	; 0x93da <vfprintf+0x282>
    93aa:	18 f4       	brcc	.+6      	; 0x93b2 <vfprintf+0x25a>
    93ac:	88 35       	cpi	r24, 0x58	; 88
    93ae:	79 f0       	breq	.+30     	; 0x93ce <vfprintf+0x276>
    93b0:	ae c0       	rjmp	.+348    	; 0x950e <vfprintf+0x3b6>
    93b2:	80 37       	cpi	r24, 0x70	; 112
    93b4:	19 f0       	breq	.+6      	; 0x93bc <vfprintf+0x264>
    93b6:	88 37       	cpi	r24, 0x78	; 120
    93b8:	21 f0       	breq	.+8      	; 0x93c2 <vfprintf+0x26a>
    93ba:	a9 c0       	rjmp	.+338    	; 0x950e <vfprintf+0x3b6>
    93bc:	e9 2f       	mov	r30, r25
    93be:	e0 61       	ori	r30, 0x10	; 16
    93c0:	be 2e       	mov	r11, r30
    93c2:	b4 fe       	sbrs	r11, 4
    93c4:	0d c0       	rjmp	.+26     	; 0x93e0 <vfprintf+0x288>
    93c6:	fb 2d       	mov	r31, r11
    93c8:	f4 60       	ori	r31, 0x04	; 4
    93ca:	bf 2e       	mov	r11, r31
    93cc:	09 c0       	rjmp	.+18     	; 0x93e0 <vfprintf+0x288>
    93ce:	34 fe       	sbrs	r3, 4
    93d0:	0a c0       	rjmp	.+20     	; 0x93e6 <vfprintf+0x28e>
    93d2:	29 2f       	mov	r18, r25
    93d4:	26 60       	ori	r18, 0x06	; 6
    93d6:	b2 2e       	mov	r11, r18
    93d8:	06 c0       	rjmp	.+12     	; 0x93e6 <vfprintf+0x28e>
    93da:	28 e0       	ldi	r18, 0x08	; 8
    93dc:	30 e0       	ldi	r19, 0x00	; 0
    93de:	05 c0       	rjmp	.+10     	; 0x93ea <vfprintf+0x292>
    93e0:	20 e1       	ldi	r18, 0x10	; 16
    93e2:	30 e0       	ldi	r19, 0x00	; 0
    93e4:	02 c0       	rjmp	.+4      	; 0x93ea <vfprintf+0x292>
    93e6:	20 e1       	ldi	r18, 0x10	; 16
    93e8:	32 e0       	ldi	r19, 0x02	; 2
    93ea:	f8 01       	movw	r30, r16
    93ec:	b7 fe       	sbrs	r11, 7
    93ee:	07 c0       	rjmp	.+14     	; 0x93fe <vfprintf+0x2a6>
    93f0:	60 81       	ld	r22, Z
    93f2:	71 81       	ldd	r23, Z+1	; 0x01
    93f4:	82 81       	ldd	r24, Z+2	; 0x02
    93f6:	93 81       	ldd	r25, Z+3	; 0x03
    93f8:	0c 5f       	subi	r16, 0xFC	; 252
    93fa:	1f 4f       	sbci	r17, 0xFF	; 255
    93fc:	06 c0       	rjmp	.+12     	; 0x940a <vfprintf+0x2b2>
    93fe:	60 81       	ld	r22, Z
    9400:	71 81       	ldd	r23, Z+1	; 0x01
    9402:	80 e0       	ldi	r24, 0x00	; 0
    9404:	90 e0       	ldi	r25, 0x00	; 0
    9406:	0e 5f       	subi	r16, 0xFE	; 254
    9408:	1f 4f       	sbci	r17, 0xFF	; 255
    940a:	a3 01       	movw	r20, r6
    940c:	30 d2       	rcall	.+1120   	; 0x986e <__ultoa_invert>
    940e:	88 2e       	mov	r8, r24
    9410:	86 18       	sub	r8, r6
    9412:	fb 2d       	mov	r31, r11
    9414:	ff 77       	andi	r31, 0x7F	; 127
    9416:	3f 2e       	mov	r3, r31
    9418:	36 fe       	sbrs	r3, 6
    941a:	0d c0       	rjmp	.+26     	; 0x9436 <vfprintf+0x2de>
    941c:	23 2d       	mov	r18, r3
    941e:	2e 7f       	andi	r18, 0xFE	; 254
    9420:	a2 2e       	mov	r10, r18
    9422:	89 14       	cp	r8, r9
    9424:	58 f4       	brcc	.+22     	; 0x943c <vfprintf+0x2e4>
    9426:	34 fe       	sbrs	r3, 4
    9428:	0b c0       	rjmp	.+22     	; 0x9440 <vfprintf+0x2e8>
    942a:	32 fc       	sbrc	r3, 2
    942c:	09 c0       	rjmp	.+18     	; 0x9440 <vfprintf+0x2e8>
    942e:	83 2d       	mov	r24, r3
    9430:	8e 7e       	andi	r24, 0xEE	; 238
    9432:	a8 2e       	mov	r10, r24
    9434:	05 c0       	rjmp	.+10     	; 0x9440 <vfprintf+0x2e8>
    9436:	b8 2c       	mov	r11, r8
    9438:	a3 2c       	mov	r10, r3
    943a:	03 c0       	rjmp	.+6      	; 0x9442 <vfprintf+0x2ea>
    943c:	b8 2c       	mov	r11, r8
    943e:	01 c0       	rjmp	.+2      	; 0x9442 <vfprintf+0x2ea>
    9440:	b9 2c       	mov	r11, r9
    9442:	a4 fe       	sbrs	r10, 4
    9444:	0f c0       	rjmp	.+30     	; 0x9464 <vfprintf+0x30c>
    9446:	fe 01       	movw	r30, r28
    9448:	e8 0d       	add	r30, r8
    944a:	f1 1d       	adc	r31, r1
    944c:	80 81       	ld	r24, Z
    944e:	80 33       	cpi	r24, 0x30	; 48
    9450:	21 f4       	brne	.+8      	; 0x945a <vfprintf+0x302>
    9452:	9a 2d       	mov	r25, r10
    9454:	99 7e       	andi	r25, 0xE9	; 233
    9456:	a9 2e       	mov	r10, r25
    9458:	09 c0       	rjmp	.+18     	; 0x946c <vfprintf+0x314>
    945a:	a2 fe       	sbrs	r10, 2
    945c:	06 c0       	rjmp	.+12     	; 0x946a <vfprintf+0x312>
    945e:	b3 94       	inc	r11
    9460:	b3 94       	inc	r11
    9462:	04 c0       	rjmp	.+8      	; 0x946c <vfprintf+0x314>
    9464:	8a 2d       	mov	r24, r10
    9466:	86 78       	andi	r24, 0x86	; 134
    9468:	09 f0       	breq	.+2      	; 0x946c <vfprintf+0x314>
    946a:	b3 94       	inc	r11
    946c:	a3 fc       	sbrc	r10, 3
    946e:	10 c0       	rjmp	.+32     	; 0x9490 <vfprintf+0x338>
    9470:	a0 fe       	sbrs	r10, 0
    9472:	06 c0       	rjmp	.+12     	; 0x9480 <vfprintf+0x328>
    9474:	b2 14       	cp	r11, r2
    9476:	80 f4       	brcc	.+32     	; 0x9498 <vfprintf+0x340>
    9478:	28 0c       	add	r2, r8
    947a:	92 2c       	mov	r9, r2
    947c:	9b 18       	sub	r9, r11
    947e:	0d c0       	rjmp	.+26     	; 0x949a <vfprintf+0x342>
    9480:	b2 14       	cp	r11, r2
    9482:	58 f4       	brcc	.+22     	; 0x949a <vfprintf+0x342>
    9484:	b6 01       	movw	r22, r12
    9486:	80 e2       	ldi	r24, 0x20	; 32
    9488:	90 e0       	ldi	r25, 0x00	; 0
    948a:	b5 d1       	rcall	.+874    	; 0x97f6 <fputc>
    948c:	b3 94       	inc	r11
    948e:	f8 cf       	rjmp	.-16     	; 0x9480 <vfprintf+0x328>
    9490:	b2 14       	cp	r11, r2
    9492:	18 f4       	brcc	.+6      	; 0x949a <vfprintf+0x342>
    9494:	2b 18       	sub	r2, r11
    9496:	02 c0       	rjmp	.+4      	; 0x949c <vfprintf+0x344>
    9498:	98 2c       	mov	r9, r8
    949a:	21 2c       	mov	r2, r1
    949c:	a4 fe       	sbrs	r10, 4
    949e:	0f c0       	rjmp	.+30     	; 0x94be <vfprintf+0x366>
    94a0:	b6 01       	movw	r22, r12
    94a2:	80 e3       	ldi	r24, 0x30	; 48
    94a4:	90 e0       	ldi	r25, 0x00	; 0
    94a6:	a7 d1       	rcall	.+846    	; 0x97f6 <fputc>
    94a8:	a2 fe       	sbrs	r10, 2
    94aa:	16 c0       	rjmp	.+44     	; 0x94d8 <vfprintf+0x380>
    94ac:	a1 fc       	sbrc	r10, 1
    94ae:	03 c0       	rjmp	.+6      	; 0x94b6 <vfprintf+0x35e>
    94b0:	88 e7       	ldi	r24, 0x78	; 120
    94b2:	90 e0       	ldi	r25, 0x00	; 0
    94b4:	02 c0       	rjmp	.+4      	; 0x94ba <vfprintf+0x362>
    94b6:	88 e5       	ldi	r24, 0x58	; 88
    94b8:	90 e0       	ldi	r25, 0x00	; 0
    94ba:	b6 01       	movw	r22, r12
    94bc:	0c c0       	rjmp	.+24     	; 0x94d6 <vfprintf+0x37e>
    94be:	8a 2d       	mov	r24, r10
    94c0:	86 78       	andi	r24, 0x86	; 134
    94c2:	51 f0       	breq	.+20     	; 0x94d8 <vfprintf+0x380>
    94c4:	a1 fe       	sbrs	r10, 1
    94c6:	02 c0       	rjmp	.+4      	; 0x94cc <vfprintf+0x374>
    94c8:	8b e2       	ldi	r24, 0x2B	; 43
    94ca:	01 c0       	rjmp	.+2      	; 0x94ce <vfprintf+0x376>
    94cc:	80 e2       	ldi	r24, 0x20	; 32
    94ce:	a7 fc       	sbrc	r10, 7
    94d0:	8d e2       	ldi	r24, 0x2D	; 45
    94d2:	b6 01       	movw	r22, r12
    94d4:	90 e0       	ldi	r25, 0x00	; 0
    94d6:	8f d1       	rcall	.+798    	; 0x97f6 <fputc>
    94d8:	89 14       	cp	r8, r9
    94da:	30 f4       	brcc	.+12     	; 0x94e8 <vfprintf+0x390>
    94dc:	b6 01       	movw	r22, r12
    94de:	80 e3       	ldi	r24, 0x30	; 48
    94e0:	90 e0       	ldi	r25, 0x00	; 0
    94e2:	89 d1       	rcall	.+786    	; 0x97f6 <fputc>
    94e4:	9a 94       	dec	r9
    94e6:	f8 cf       	rjmp	.-16     	; 0x94d8 <vfprintf+0x380>
    94e8:	8a 94       	dec	r8
    94ea:	f3 01       	movw	r30, r6
    94ec:	e8 0d       	add	r30, r8
    94ee:	f1 1d       	adc	r31, r1
    94f0:	80 81       	ld	r24, Z
    94f2:	b6 01       	movw	r22, r12
    94f4:	90 e0       	ldi	r25, 0x00	; 0
    94f6:	7f d1       	rcall	.+766    	; 0x97f6 <fputc>
    94f8:	81 10       	cpse	r8, r1
    94fa:	f6 cf       	rjmp	.-20     	; 0x94e8 <vfprintf+0x390>
    94fc:	22 20       	and	r2, r2
    94fe:	09 f4       	brne	.+2      	; 0x9502 <vfprintf+0x3aa>
    9500:	4e ce       	rjmp	.-868    	; 0x919e <vfprintf+0x46>
    9502:	b6 01       	movw	r22, r12
    9504:	80 e2       	ldi	r24, 0x20	; 32
    9506:	90 e0       	ldi	r25, 0x00	; 0
    9508:	76 d1       	rcall	.+748    	; 0x97f6 <fputc>
    950a:	2a 94       	dec	r2
    950c:	f7 cf       	rjmp	.-18     	; 0x94fc <vfprintf+0x3a4>
    950e:	f6 01       	movw	r30, r12
    9510:	86 81       	ldd	r24, Z+6	; 0x06
    9512:	97 81       	ldd	r25, Z+7	; 0x07
    9514:	02 c0       	rjmp	.+4      	; 0x951a <vfprintf+0x3c2>
    9516:	8f ef       	ldi	r24, 0xFF	; 255
    9518:	9f ef       	ldi	r25, 0xFF	; 255
    951a:	2b 96       	adiw	r28, 0x0b	; 11
    951c:	cd bf       	out	0x3d, r28	; 61
    951e:	de bf       	out	0x3e, r29	; 62
    9520:	df 91       	pop	r29
    9522:	cf 91       	pop	r28
    9524:	1f 91       	pop	r17
    9526:	0f 91       	pop	r16
    9528:	ff 90       	pop	r15
    952a:	ef 90       	pop	r14
    952c:	df 90       	pop	r13
    952e:	cf 90       	pop	r12
    9530:	bf 90       	pop	r11
    9532:	af 90       	pop	r10
    9534:	9f 90       	pop	r9
    9536:	8f 90       	pop	r8
    9538:	7f 90       	pop	r7
    953a:	6f 90       	pop	r6
    953c:	5f 90       	pop	r5
    953e:	4f 90       	pop	r4
    9540:	3f 90       	pop	r3
    9542:	2f 90       	pop	r2
    9544:	08 95       	ret

00009546 <calloc>:
    9546:	0f 93       	push	r16
    9548:	1f 93       	push	r17
    954a:	cf 93       	push	r28
    954c:	df 93       	push	r29
    954e:	86 9f       	mul	r24, r22
    9550:	80 01       	movw	r16, r0
    9552:	87 9f       	mul	r24, r23
    9554:	10 0d       	add	r17, r0
    9556:	96 9f       	mul	r25, r22
    9558:	10 0d       	add	r17, r0
    955a:	11 24       	eor	r1, r1
    955c:	c8 01       	movw	r24, r16
    955e:	0d d0       	rcall	.+26     	; 0x957a <malloc>
    9560:	ec 01       	movw	r28, r24
    9562:	00 97       	sbiw	r24, 0x00	; 0
    9564:	21 f0       	breq	.+8      	; 0x956e <calloc+0x28>
    9566:	a8 01       	movw	r20, r16
    9568:	60 e0       	ldi	r22, 0x00	; 0
    956a:	70 e0       	ldi	r23, 0x00	; 0
    956c:	32 d1       	rcall	.+612    	; 0x97d2 <memset>
    956e:	ce 01       	movw	r24, r28
    9570:	df 91       	pop	r29
    9572:	cf 91       	pop	r28
    9574:	1f 91       	pop	r17
    9576:	0f 91       	pop	r16
    9578:	08 95       	ret

0000957a <malloc>:
    957a:	0f 93       	push	r16
    957c:	1f 93       	push	r17
    957e:	cf 93       	push	r28
    9580:	df 93       	push	r29
    9582:	82 30       	cpi	r24, 0x02	; 2
    9584:	91 05       	cpc	r25, r1
    9586:	10 f4       	brcc	.+4      	; 0x958c <malloc+0x12>
    9588:	82 e0       	ldi	r24, 0x02	; 2
    958a:	90 e0       	ldi	r25, 0x00	; 0
    958c:	e0 91 e3 2c 	lds	r30, 0x2CE3	; 0x802ce3 <__flp>
    9590:	f0 91 e4 2c 	lds	r31, 0x2CE4	; 0x802ce4 <__flp+0x1>
    9594:	20 e0       	ldi	r18, 0x00	; 0
    9596:	30 e0       	ldi	r19, 0x00	; 0
    9598:	a0 e0       	ldi	r26, 0x00	; 0
    959a:	b0 e0       	ldi	r27, 0x00	; 0
    959c:	30 97       	sbiw	r30, 0x00	; 0
    959e:	19 f1       	breq	.+70     	; 0x95e6 <malloc+0x6c>
    95a0:	40 81       	ld	r20, Z
    95a2:	51 81       	ldd	r21, Z+1	; 0x01
    95a4:	02 81       	ldd	r16, Z+2	; 0x02
    95a6:	13 81       	ldd	r17, Z+3	; 0x03
    95a8:	48 17       	cp	r20, r24
    95aa:	59 07       	cpc	r21, r25
    95ac:	c8 f0       	brcs	.+50     	; 0x95e0 <malloc+0x66>
    95ae:	84 17       	cp	r24, r20
    95b0:	95 07       	cpc	r25, r21
    95b2:	69 f4       	brne	.+26     	; 0x95ce <malloc+0x54>
    95b4:	10 97       	sbiw	r26, 0x00	; 0
    95b6:	31 f0       	breq	.+12     	; 0x95c4 <malloc+0x4a>
    95b8:	12 96       	adiw	r26, 0x02	; 2
    95ba:	0c 93       	st	X, r16
    95bc:	12 97       	sbiw	r26, 0x02	; 2
    95be:	13 96       	adiw	r26, 0x03	; 3
    95c0:	1c 93       	st	X, r17
    95c2:	27 c0       	rjmp	.+78     	; 0x9612 <malloc+0x98>
    95c4:	00 93 e3 2c 	sts	0x2CE3, r16	; 0x802ce3 <__flp>
    95c8:	10 93 e4 2c 	sts	0x2CE4, r17	; 0x802ce4 <__flp+0x1>
    95cc:	22 c0       	rjmp	.+68     	; 0x9612 <malloc+0x98>
    95ce:	21 15       	cp	r18, r1
    95d0:	31 05       	cpc	r19, r1
    95d2:	19 f0       	breq	.+6      	; 0x95da <malloc+0x60>
    95d4:	42 17       	cp	r20, r18
    95d6:	53 07       	cpc	r21, r19
    95d8:	18 f4       	brcc	.+6      	; 0x95e0 <malloc+0x66>
    95da:	9a 01       	movw	r18, r20
    95dc:	bd 01       	movw	r22, r26
    95de:	ef 01       	movw	r28, r30
    95e0:	df 01       	movw	r26, r30
    95e2:	f8 01       	movw	r30, r16
    95e4:	db cf       	rjmp	.-74     	; 0x959c <malloc+0x22>
    95e6:	21 15       	cp	r18, r1
    95e8:	31 05       	cpc	r19, r1
    95ea:	f9 f0       	breq	.+62     	; 0x962a <malloc+0xb0>
    95ec:	28 1b       	sub	r18, r24
    95ee:	39 0b       	sbc	r19, r25
    95f0:	24 30       	cpi	r18, 0x04	; 4
    95f2:	31 05       	cpc	r19, r1
    95f4:	80 f4       	brcc	.+32     	; 0x9616 <malloc+0x9c>
    95f6:	8a 81       	ldd	r24, Y+2	; 0x02
    95f8:	9b 81       	ldd	r25, Y+3	; 0x03
    95fa:	61 15       	cp	r22, r1
    95fc:	71 05       	cpc	r23, r1
    95fe:	21 f0       	breq	.+8      	; 0x9608 <malloc+0x8e>
    9600:	fb 01       	movw	r30, r22
    9602:	82 83       	std	Z+2, r24	; 0x02
    9604:	93 83       	std	Z+3, r25	; 0x03
    9606:	04 c0       	rjmp	.+8      	; 0x9610 <malloc+0x96>
    9608:	80 93 e3 2c 	sts	0x2CE3, r24	; 0x802ce3 <__flp>
    960c:	90 93 e4 2c 	sts	0x2CE4, r25	; 0x802ce4 <__flp+0x1>
    9610:	fe 01       	movw	r30, r28
    9612:	32 96       	adiw	r30, 0x02	; 2
    9614:	44 c0       	rjmp	.+136    	; 0x969e <malloc+0x124>
    9616:	fe 01       	movw	r30, r28
    9618:	e2 0f       	add	r30, r18
    961a:	f3 1f       	adc	r31, r19
    961c:	81 93       	st	Z+, r24
    961e:	91 93       	st	Z+, r25
    9620:	22 50       	subi	r18, 0x02	; 2
    9622:	31 09       	sbc	r19, r1
    9624:	28 83       	st	Y, r18
    9626:	39 83       	std	Y+1, r19	; 0x01
    9628:	3a c0       	rjmp	.+116    	; 0x969e <malloc+0x124>
    962a:	20 91 e1 2c 	lds	r18, 0x2CE1	; 0x802ce1 <__brkval>
    962e:	30 91 e2 2c 	lds	r19, 0x2CE2	; 0x802ce2 <__brkval+0x1>
    9632:	23 2b       	or	r18, r19
    9634:	41 f4       	brne	.+16     	; 0x9646 <malloc+0xcc>
    9636:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    963a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    963e:	20 93 e1 2c 	sts	0x2CE1, r18	; 0x802ce1 <__brkval>
    9642:	30 93 e2 2c 	sts	0x2CE2, r19	; 0x802ce2 <__brkval+0x1>
    9646:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    964a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    964e:	21 15       	cp	r18, r1
    9650:	31 05       	cpc	r19, r1
    9652:	41 f4       	brne	.+16     	; 0x9664 <malloc+0xea>
    9654:	2d b7       	in	r18, 0x3d	; 61
    9656:	3e b7       	in	r19, 0x3e	; 62
    9658:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    965c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    9660:	24 1b       	sub	r18, r20
    9662:	35 0b       	sbc	r19, r21
    9664:	e0 91 e1 2c 	lds	r30, 0x2CE1	; 0x802ce1 <__brkval>
    9668:	f0 91 e2 2c 	lds	r31, 0x2CE2	; 0x802ce2 <__brkval+0x1>
    966c:	e2 17       	cp	r30, r18
    966e:	f3 07       	cpc	r31, r19
    9670:	a0 f4       	brcc	.+40     	; 0x969a <malloc+0x120>
    9672:	2e 1b       	sub	r18, r30
    9674:	3f 0b       	sbc	r19, r31
    9676:	28 17       	cp	r18, r24
    9678:	39 07       	cpc	r19, r25
    967a:	78 f0       	brcs	.+30     	; 0x969a <malloc+0x120>
    967c:	ac 01       	movw	r20, r24
    967e:	4e 5f       	subi	r20, 0xFE	; 254
    9680:	5f 4f       	sbci	r21, 0xFF	; 255
    9682:	24 17       	cp	r18, r20
    9684:	35 07       	cpc	r19, r21
    9686:	48 f0       	brcs	.+18     	; 0x969a <malloc+0x120>
    9688:	4e 0f       	add	r20, r30
    968a:	5f 1f       	adc	r21, r31
    968c:	40 93 e1 2c 	sts	0x2CE1, r20	; 0x802ce1 <__brkval>
    9690:	50 93 e2 2c 	sts	0x2CE2, r21	; 0x802ce2 <__brkval+0x1>
    9694:	81 93       	st	Z+, r24
    9696:	91 93       	st	Z+, r25
    9698:	02 c0       	rjmp	.+4      	; 0x969e <malloc+0x124>
    969a:	e0 e0       	ldi	r30, 0x00	; 0
    969c:	f0 e0       	ldi	r31, 0x00	; 0
    969e:	cf 01       	movw	r24, r30
    96a0:	df 91       	pop	r29
    96a2:	cf 91       	pop	r28
    96a4:	1f 91       	pop	r17
    96a6:	0f 91       	pop	r16
    96a8:	08 95       	ret

000096aa <free>:
    96aa:	cf 93       	push	r28
    96ac:	df 93       	push	r29
    96ae:	00 97       	sbiw	r24, 0x00	; 0
    96b0:	09 f4       	brne	.+2      	; 0x96b4 <free+0xa>
    96b2:	81 c0       	rjmp	.+258    	; 0x97b6 <free+0x10c>
    96b4:	fc 01       	movw	r30, r24
    96b6:	32 97       	sbiw	r30, 0x02	; 2
    96b8:	12 82       	std	Z+2, r1	; 0x02
    96ba:	13 82       	std	Z+3, r1	; 0x03
    96bc:	a0 91 e3 2c 	lds	r26, 0x2CE3	; 0x802ce3 <__flp>
    96c0:	b0 91 e4 2c 	lds	r27, 0x2CE4	; 0x802ce4 <__flp+0x1>
    96c4:	10 97       	sbiw	r26, 0x00	; 0
    96c6:	81 f4       	brne	.+32     	; 0x96e8 <free+0x3e>
    96c8:	20 81       	ld	r18, Z
    96ca:	31 81       	ldd	r19, Z+1	; 0x01
    96cc:	82 0f       	add	r24, r18
    96ce:	93 1f       	adc	r25, r19
    96d0:	20 91 e1 2c 	lds	r18, 0x2CE1	; 0x802ce1 <__brkval>
    96d4:	30 91 e2 2c 	lds	r19, 0x2CE2	; 0x802ce2 <__brkval+0x1>
    96d8:	28 17       	cp	r18, r24
    96da:	39 07       	cpc	r19, r25
    96dc:	51 f5       	brne	.+84     	; 0x9732 <free+0x88>
    96de:	e0 93 e1 2c 	sts	0x2CE1, r30	; 0x802ce1 <__brkval>
    96e2:	f0 93 e2 2c 	sts	0x2CE2, r31	; 0x802ce2 <__brkval+0x1>
    96e6:	67 c0       	rjmp	.+206    	; 0x97b6 <free+0x10c>
    96e8:	ed 01       	movw	r28, r26
    96ea:	20 e0       	ldi	r18, 0x00	; 0
    96ec:	30 e0       	ldi	r19, 0x00	; 0
    96ee:	ce 17       	cp	r28, r30
    96f0:	df 07       	cpc	r29, r31
    96f2:	40 f4       	brcc	.+16     	; 0x9704 <free+0x5a>
    96f4:	4a 81       	ldd	r20, Y+2	; 0x02
    96f6:	5b 81       	ldd	r21, Y+3	; 0x03
    96f8:	9e 01       	movw	r18, r28
    96fa:	41 15       	cp	r20, r1
    96fc:	51 05       	cpc	r21, r1
    96fe:	f1 f0       	breq	.+60     	; 0x973c <free+0x92>
    9700:	ea 01       	movw	r28, r20
    9702:	f5 cf       	rjmp	.-22     	; 0x96ee <free+0x44>
    9704:	c2 83       	std	Z+2, r28	; 0x02
    9706:	d3 83       	std	Z+3, r29	; 0x03
    9708:	40 81       	ld	r20, Z
    970a:	51 81       	ldd	r21, Z+1	; 0x01
    970c:	84 0f       	add	r24, r20
    970e:	95 1f       	adc	r25, r21
    9710:	c8 17       	cp	r28, r24
    9712:	d9 07       	cpc	r29, r25
    9714:	59 f4       	brne	.+22     	; 0x972c <free+0x82>
    9716:	88 81       	ld	r24, Y
    9718:	99 81       	ldd	r25, Y+1	; 0x01
    971a:	84 0f       	add	r24, r20
    971c:	95 1f       	adc	r25, r21
    971e:	02 96       	adiw	r24, 0x02	; 2
    9720:	80 83       	st	Z, r24
    9722:	91 83       	std	Z+1, r25	; 0x01
    9724:	8a 81       	ldd	r24, Y+2	; 0x02
    9726:	9b 81       	ldd	r25, Y+3	; 0x03
    9728:	82 83       	std	Z+2, r24	; 0x02
    972a:	93 83       	std	Z+3, r25	; 0x03
    972c:	21 15       	cp	r18, r1
    972e:	31 05       	cpc	r19, r1
    9730:	29 f4       	brne	.+10     	; 0x973c <free+0x92>
    9732:	e0 93 e3 2c 	sts	0x2CE3, r30	; 0x802ce3 <__flp>
    9736:	f0 93 e4 2c 	sts	0x2CE4, r31	; 0x802ce4 <__flp+0x1>
    973a:	3d c0       	rjmp	.+122    	; 0x97b6 <free+0x10c>
    973c:	e9 01       	movw	r28, r18
    973e:	ea 83       	std	Y+2, r30	; 0x02
    9740:	fb 83       	std	Y+3, r31	; 0x03
    9742:	49 91       	ld	r20, Y+
    9744:	59 91       	ld	r21, Y+
    9746:	c4 0f       	add	r28, r20
    9748:	d5 1f       	adc	r29, r21
    974a:	ec 17       	cp	r30, r28
    974c:	fd 07       	cpc	r31, r29
    974e:	61 f4       	brne	.+24     	; 0x9768 <free+0xbe>
    9750:	80 81       	ld	r24, Z
    9752:	91 81       	ldd	r25, Z+1	; 0x01
    9754:	84 0f       	add	r24, r20
    9756:	95 1f       	adc	r25, r21
    9758:	02 96       	adiw	r24, 0x02	; 2
    975a:	e9 01       	movw	r28, r18
    975c:	88 83       	st	Y, r24
    975e:	99 83       	std	Y+1, r25	; 0x01
    9760:	82 81       	ldd	r24, Z+2	; 0x02
    9762:	93 81       	ldd	r25, Z+3	; 0x03
    9764:	8a 83       	std	Y+2, r24	; 0x02
    9766:	9b 83       	std	Y+3, r25	; 0x03
    9768:	e0 e0       	ldi	r30, 0x00	; 0
    976a:	f0 e0       	ldi	r31, 0x00	; 0
    976c:	12 96       	adiw	r26, 0x02	; 2
    976e:	8d 91       	ld	r24, X+
    9770:	9c 91       	ld	r25, X
    9772:	13 97       	sbiw	r26, 0x03	; 3
    9774:	00 97       	sbiw	r24, 0x00	; 0
    9776:	19 f0       	breq	.+6      	; 0x977e <free+0xd4>
    9778:	fd 01       	movw	r30, r26
    977a:	dc 01       	movw	r26, r24
    977c:	f7 cf       	rjmp	.-18     	; 0x976c <free+0xc2>
    977e:	8d 91       	ld	r24, X+
    9780:	9c 91       	ld	r25, X
    9782:	11 97       	sbiw	r26, 0x01	; 1
    9784:	9d 01       	movw	r18, r26
    9786:	2e 5f       	subi	r18, 0xFE	; 254
    9788:	3f 4f       	sbci	r19, 0xFF	; 255
    978a:	82 0f       	add	r24, r18
    978c:	93 1f       	adc	r25, r19
    978e:	20 91 e1 2c 	lds	r18, 0x2CE1	; 0x802ce1 <__brkval>
    9792:	30 91 e2 2c 	lds	r19, 0x2CE2	; 0x802ce2 <__brkval+0x1>
    9796:	28 17       	cp	r18, r24
    9798:	39 07       	cpc	r19, r25
    979a:	69 f4       	brne	.+26     	; 0x97b6 <free+0x10c>
    979c:	30 97       	sbiw	r30, 0x00	; 0
    979e:	29 f4       	brne	.+10     	; 0x97aa <free+0x100>
    97a0:	10 92 e3 2c 	sts	0x2CE3, r1	; 0x802ce3 <__flp>
    97a4:	10 92 e4 2c 	sts	0x2CE4, r1	; 0x802ce4 <__flp+0x1>
    97a8:	02 c0       	rjmp	.+4      	; 0x97ae <free+0x104>
    97aa:	12 82       	std	Z+2, r1	; 0x02
    97ac:	13 82       	std	Z+3, r1	; 0x03
    97ae:	a0 93 e1 2c 	sts	0x2CE1, r26	; 0x802ce1 <__brkval>
    97b2:	b0 93 e2 2c 	sts	0x2CE2, r27	; 0x802ce2 <__brkval+0x1>
    97b6:	df 91       	pop	r29
    97b8:	cf 91       	pop	r28
    97ba:	08 95       	ret

000097bc <strnlen_P>:
    97bc:	fc 01       	movw	r30, r24
    97be:	05 90       	lpm	r0, Z+
    97c0:	61 50       	subi	r22, 0x01	; 1
    97c2:	70 40       	sbci	r23, 0x00	; 0
    97c4:	01 10       	cpse	r0, r1
    97c6:	d8 f7       	brcc	.-10     	; 0x97be <strnlen_P+0x2>
    97c8:	80 95       	com	r24
    97ca:	90 95       	com	r25
    97cc:	8e 0f       	add	r24, r30
    97ce:	9f 1f       	adc	r25, r31
    97d0:	08 95       	ret

000097d2 <memset>:
    97d2:	dc 01       	movw	r26, r24
    97d4:	01 c0       	rjmp	.+2      	; 0x97d8 <memset+0x6>
    97d6:	6d 93       	st	X+, r22
    97d8:	41 50       	subi	r20, 0x01	; 1
    97da:	50 40       	sbci	r21, 0x00	; 0
    97dc:	e0 f7       	brcc	.-8      	; 0x97d6 <memset+0x4>
    97de:	08 95       	ret

000097e0 <strnlen>:
    97e0:	fc 01       	movw	r30, r24
    97e2:	61 50       	subi	r22, 0x01	; 1
    97e4:	70 40       	sbci	r23, 0x00	; 0
    97e6:	01 90       	ld	r0, Z+
    97e8:	01 10       	cpse	r0, r1
    97ea:	d8 f7       	brcc	.-10     	; 0x97e2 <strnlen+0x2>
    97ec:	80 95       	com	r24
    97ee:	90 95       	com	r25
    97f0:	8e 0f       	add	r24, r30
    97f2:	9f 1f       	adc	r25, r31
    97f4:	08 95       	ret

000097f6 <fputc>:
    97f6:	0f 93       	push	r16
    97f8:	1f 93       	push	r17
    97fa:	cf 93       	push	r28
    97fc:	df 93       	push	r29
    97fe:	fb 01       	movw	r30, r22
    9800:	23 81       	ldd	r18, Z+3	; 0x03
    9802:	21 fd       	sbrc	r18, 1
    9804:	03 c0       	rjmp	.+6      	; 0x980c <fputc+0x16>
    9806:	8f ef       	ldi	r24, 0xFF	; 255
    9808:	9f ef       	ldi	r25, 0xFF	; 255
    980a:	2c c0       	rjmp	.+88     	; 0x9864 <fputc+0x6e>
    980c:	22 ff       	sbrs	r18, 2
    980e:	16 c0       	rjmp	.+44     	; 0x983c <fputc+0x46>
    9810:	46 81       	ldd	r20, Z+6	; 0x06
    9812:	57 81       	ldd	r21, Z+7	; 0x07
    9814:	24 81       	ldd	r18, Z+4	; 0x04
    9816:	35 81       	ldd	r19, Z+5	; 0x05
    9818:	42 17       	cp	r20, r18
    981a:	53 07       	cpc	r21, r19
    981c:	44 f4       	brge	.+16     	; 0x982e <fputc+0x38>
    981e:	a0 81       	ld	r26, Z
    9820:	b1 81       	ldd	r27, Z+1	; 0x01
    9822:	9d 01       	movw	r18, r26
    9824:	2f 5f       	subi	r18, 0xFF	; 255
    9826:	3f 4f       	sbci	r19, 0xFF	; 255
    9828:	20 83       	st	Z, r18
    982a:	31 83       	std	Z+1, r19	; 0x01
    982c:	8c 93       	st	X, r24
    982e:	26 81       	ldd	r18, Z+6	; 0x06
    9830:	37 81       	ldd	r19, Z+7	; 0x07
    9832:	2f 5f       	subi	r18, 0xFF	; 255
    9834:	3f 4f       	sbci	r19, 0xFF	; 255
    9836:	26 83       	std	Z+6, r18	; 0x06
    9838:	37 83       	std	Z+7, r19	; 0x07
    983a:	14 c0       	rjmp	.+40     	; 0x9864 <fputc+0x6e>
    983c:	8b 01       	movw	r16, r22
    983e:	ec 01       	movw	r28, r24
    9840:	fb 01       	movw	r30, r22
    9842:	00 84       	ldd	r0, Z+8	; 0x08
    9844:	f1 85       	ldd	r31, Z+9	; 0x09
    9846:	e0 2d       	mov	r30, r0
    9848:	19 95       	eicall
    984a:	89 2b       	or	r24, r25
    984c:	e1 f6       	brne	.-72     	; 0x9806 <fputc+0x10>
    984e:	d8 01       	movw	r26, r16
    9850:	16 96       	adiw	r26, 0x06	; 6
    9852:	8d 91       	ld	r24, X+
    9854:	9c 91       	ld	r25, X
    9856:	17 97       	sbiw	r26, 0x07	; 7
    9858:	01 96       	adiw	r24, 0x01	; 1
    985a:	16 96       	adiw	r26, 0x06	; 6
    985c:	8d 93       	st	X+, r24
    985e:	9c 93       	st	X, r25
    9860:	17 97       	sbiw	r26, 0x07	; 7
    9862:	ce 01       	movw	r24, r28
    9864:	df 91       	pop	r29
    9866:	cf 91       	pop	r28
    9868:	1f 91       	pop	r17
    986a:	0f 91       	pop	r16
    986c:	08 95       	ret

0000986e <__ultoa_invert>:
    986e:	fa 01       	movw	r30, r20
    9870:	aa 27       	eor	r26, r26
    9872:	28 30       	cpi	r18, 0x08	; 8
    9874:	51 f1       	breq	.+84     	; 0x98ca <__ultoa_invert+0x5c>
    9876:	20 31       	cpi	r18, 0x10	; 16
    9878:	81 f1       	breq	.+96     	; 0x98da <__ultoa_invert+0x6c>
    987a:	e8 94       	clt
    987c:	6f 93       	push	r22
    987e:	6e 7f       	andi	r22, 0xFE	; 254
    9880:	6e 5f       	subi	r22, 0xFE	; 254
    9882:	7f 4f       	sbci	r23, 0xFF	; 255
    9884:	8f 4f       	sbci	r24, 0xFF	; 255
    9886:	9f 4f       	sbci	r25, 0xFF	; 255
    9888:	af 4f       	sbci	r26, 0xFF	; 255
    988a:	b1 e0       	ldi	r27, 0x01	; 1
    988c:	3e d0       	rcall	.+124    	; 0x990a <__ultoa_invert+0x9c>
    988e:	b4 e0       	ldi	r27, 0x04	; 4
    9890:	3c d0       	rcall	.+120    	; 0x990a <__ultoa_invert+0x9c>
    9892:	67 0f       	add	r22, r23
    9894:	78 1f       	adc	r23, r24
    9896:	89 1f       	adc	r24, r25
    9898:	9a 1f       	adc	r25, r26
    989a:	a1 1d       	adc	r26, r1
    989c:	68 0f       	add	r22, r24
    989e:	79 1f       	adc	r23, r25
    98a0:	8a 1f       	adc	r24, r26
    98a2:	91 1d       	adc	r25, r1
    98a4:	a1 1d       	adc	r26, r1
    98a6:	6a 0f       	add	r22, r26
    98a8:	71 1d       	adc	r23, r1
    98aa:	81 1d       	adc	r24, r1
    98ac:	91 1d       	adc	r25, r1
    98ae:	a1 1d       	adc	r26, r1
    98b0:	20 d0       	rcall	.+64     	; 0x98f2 <__ultoa_invert+0x84>
    98b2:	09 f4       	brne	.+2      	; 0x98b6 <__ultoa_invert+0x48>
    98b4:	68 94       	set
    98b6:	3f 91       	pop	r19
    98b8:	2a e0       	ldi	r18, 0x0A	; 10
    98ba:	26 9f       	mul	r18, r22
    98bc:	11 24       	eor	r1, r1
    98be:	30 19       	sub	r19, r0
    98c0:	30 5d       	subi	r19, 0xD0	; 208
    98c2:	31 93       	st	Z+, r19
    98c4:	de f6       	brtc	.-74     	; 0x987c <__ultoa_invert+0xe>
    98c6:	cf 01       	movw	r24, r30
    98c8:	08 95       	ret
    98ca:	46 2f       	mov	r20, r22
    98cc:	47 70       	andi	r20, 0x07	; 7
    98ce:	40 5d       	subi	r20, 0xD0	; 208
    98d0:	41 93       	st	Z+, r20
    98d2:	b3 e0       	ldi	r27, 0x03	; 3
    98d4:	0f d0       	rcall	.+30     	; 0x98f4 <__ultoa_invert+0x86>
    98d6:	c9 f7       	brne	.-14     	; 0x98ca <__ultoa_invert+0x5c>
    98d8:	f6 cf       	rjmp	.-20     	; 0x98c6 <__ultoa_invert+0x58>
    98da:	46 2f       	mov	r20, r22
    98dc:	4f 70       	andi	r20, 0x0F	; 15
    98de:	40 5d       	subi	r20, 0xD0	; 208
    98e0:	4a 33       	cpi	r20, 0x3A	; 58
    98e2:	18 f0       	brcs	.+6      	; 0x98ea <__ultoa_invert+0x7c>
    98e4:	49 5d       	subi	r20, 0xD9	; 217
    98e6:	31 fd       	sbrc	r19, 1
    98e8:	40 52       	subi	r20, 0x20	; 32
    98ea:	41 93       	st	Z+, r20
    98ec:	02 d0       	rcall	.+4      	; 0x98f2 <__ultoa_invert+0x84>
    98ee:	a9 f7       	brne	.-22     	; 0x98da <__ultoa_invert+0x6c>
    98f0:	ea cf       	rjmp	.-44     	; 0x98c6 <__ultoa_invert+0x58>
    98f2:	b4 e0       	ldi	r27, 0x04	; 4
    98f4:	a6 95       	lsr	r26
    98f6:	97 95       	ror	r25
    98f8:	87 95       	ror	r24
    98fa:	77 95       	ror	r23
    98fc:	67 95       	ror	r22
    98fe:	ba 95       	dec	r27
    9900:	c9 f7       	brne	.-14     	; 0x98f4 <__ultoa_invert+0x86>
    9902:	00 97       	sbiw	r24, 0x00	; 0
    9904:	61 05       	cpc	r22, r1
    9906:	71 05       	cpc	r23, r1
    9908:	08 95       	ret
    990a:	9b 01       	movw	r18, r22
    990c:	ac 01       	movw	r20, r24
    990e:	0a 2e       	mov	r0, r26
    9910:	06 94       	lsr	r0
    9912:	57 95       	ror	r21
    9914:	47 95       	ror	r20
    9916:	37 95       	ror	r19
    9918:	27 95       	ror	r18
    991a:	ba 95       	dec	r27
    991c:	c9 f7       	brne	.-14     	; 0x9910 <__ultoa_invert+0xa2>
    991e:	62 0f       	add	r22, r18
    9920:	73 1f       	adc	r23, r19
    9922:	84 1f       	adc	r24, r20
    9924:	95 1f       	adc	r25, r21
    9926:	a0 1d       	adc	r26, r0
    9928:	08 95       	ret

0000992a <_exit>:
    992a:	f8 94       	cli

0000992c <__stop_program>:
    992c:	ff cf       	rjmp	.-2      	; 0x992c <__stop_program>
