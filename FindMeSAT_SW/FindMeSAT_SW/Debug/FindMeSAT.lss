
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000083c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000034e  00802000  000083c6  0000845a  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000048b  0080234e  0080234e  000087aa  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000087a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00008804  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009b8  00000000  00000000  00008848  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019456  00000000  00000000  00009200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000068f4  00000000  00000000  00022656  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000e4a5  00000000  00000000  00028f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002794  00000000  00000000  000373f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003ed79  00000000  00000000  00039b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000964f  00000000  00000000  000788fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000950  00000000  00000000  00081f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000e395  00000000  00000000  000828a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__ctors_end>
       4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
       8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
       c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      10:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      14:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      18:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_6>
      1c:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__vector_7>
      20:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__vector_8>
      24:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__vector_9>
      28:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      2c:	0c 94 06 13 	jmp	0x260c	; 0x260c <__vector_11>
      30:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      34:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <__vector_13>
      38:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__vector_14>
      3c:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__vector_15>
      40:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__vector_16>
      44:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <__vector_17>
      48:	0c 94 46 1b 	jmp	0x368c	; 0x368c <__vector_18>
      4c:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__vector_19>
      50:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__vector_20>
      54:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <__vector_21>
      58:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__vector_22>
      5c:	0c 94 27 1c 	jmp	0x384e	; 0x384e <__vector_23>
      60:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      64:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      68:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      6c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      70:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      74:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      78:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      7c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      80:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      84:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      88:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      8c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      90:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      94:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      98:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      9c:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__vector_39>
      a0:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <__vector_40>
      a4:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__vector_41>
      a8:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__vector_42>
      ac:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b8:	0c 94 23 22 	jmp	0x4446	; 0x4446 <__vector_46>
      bc:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <__vector_47>
      c0:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__vector_48>
      c4:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__vector_49>
      c8:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__vector_50>
      cc:	0c 94 ca 1e 	jmp	0x3d94	; 0x3d94 <__vector_51>
      d0:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <__vector_52>
      d4:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__vector_53>
      d8:	0c 94 51 1f 	jmp	0x3ea2	; 0x3ea2 <__vector_54>
      dc:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <__vector_55>
      e0:	0c 94 ab 1f 	jmp	0x3f56	; 0x3f56 <__vector_56>
      e4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      e8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      ec:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      fc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     100:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     104:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     108:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     10c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     110:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     114:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     118:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     11c:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__vector_71>
     120:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__vector_72>
     124:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <__vector_73>
     128:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__vector_74>
     12c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     130:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     134:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__vector_77>
     138:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__vector_78>
     13c:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__vector_79>
     140:	0c 94 db 1c 	jmp	0x39b6	; 0x39b6 <__vector_80>
     144:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__vector_81>
     148:	0c 94 35 1d 	jmp	0x3a6a	; 0x3a6a <__vector_82>
     14c:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__vector_83>
     150:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__vector_84>
     154:	0c 94 bc 1d 	jmp	0x3b78	; 0x3b78 <__vector_85>
     158:	0c 94 e9 1d 	jmp	0x3bd2	; 0x3bd2 <__vector_86>
     15c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     160:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     164:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     168:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     16c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     170:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     174:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     178:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     17c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     180:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     184:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     188:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     18c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     190:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     194:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     198:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     19c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1ac:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1b0:	0c 94 d8 1f 	jmp	0x3fb0	; 0x3fb0 <__vector_108>
     1b4:	0c 94 05 20 	jmp	0x400a	; 0x400a <__vector_109>
     1b8:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__vector_110>
     1bc:	0c 94 5f 20 	jmp	0x40be	; 0x40be <__vector_111>
     1c0:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <__vector_112>
     1c4:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <__vector_113>
     1c8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1cc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1dc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1ec:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1f0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1f4:	0c 94 e0 28 	jmp	0x51c0	; 0x51c0 <__vector_125>
     1f8:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__vector_126>
     1fc:	c1 23       	and	r28, r17
     1fe:	c4 23       	and	r28, r20
     200:	c7 23       	and	r28, r23
     202:	ca 23       	and	r28, r26
     204:	cd 23       	and	r28, r29
     206:	d0 23       	and	r29, r16
     208:	d3 23       	and	r29, r19
     20a:	12 2b       	or	r17, r18
     20c:	25 2b       	or	r18, r21
     20e:	38 2b       	or	r19, r24
     210:	4b 2b       	or	r20, r27
     212:	5e 2b       	or	r21, r30
     214:	71 2b       	or	r23, r17
     216:	84 2b       	or	r24, r20

00000218 <PM_SINE>:
     218:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     228:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     238:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     248:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     258:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     268:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     278:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     288:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     298:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     2a8:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     2b8:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     2c8:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     2d8:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     2e8:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     2f8:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     308:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     318:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     328:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     338:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     348:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     358:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     368:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     378:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     388:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     398:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     3a8:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     3b8:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     3c8:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     3d8:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     3e8:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     3f8:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     408:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     418:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     428:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     438:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     448:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     458:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
     468:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
     478:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
     488:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
     498:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
     4a8:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
     4b8:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
     4c8:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
     4d8:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
     4e8:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
     4f8:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
     508:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
     518:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
     528:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
     538:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
     548:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
     558:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
     568:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
     578:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
     588:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
     598:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
     5a8:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
     5b8:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
     5c8:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
     5d8:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
     5e8:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
     5f8:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
     608:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
     618:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
     628:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
     638:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
     648:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
     658:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
     668:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
     678:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
     688:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
     698:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
     6a8:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
     6b8:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
     6c8:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
     6d8:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
     6e8:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
     6f8:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
     708:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
     718:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
     728:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
     738:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
     748:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
     758:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
     768:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
     778:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
     788:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
     798:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
     7a8:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
     7b8:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
     7c8:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
     7d8:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
     7e8:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
     7f8:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
     808:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
     818:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
     828:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
     838:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
     848:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
     858:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
     868:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
     878:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
     888:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
     898:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
     8a8:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
     8b8:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
     8c8:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
     8d8:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
     8e8:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
     8f8:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
     908:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
     918:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
     928:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
     938:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
     948:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
     958:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
     968:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
     978:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
     988:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
     998:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
     9a8:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
     9b8:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
     9c8:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
     9d8:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
     9e8:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
     9f8:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
     a08:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
     a18:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
     a28:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
     a38:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
     a48:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
     a58:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
     a68:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
     a78:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
     a88:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
     a98:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
     aa8:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
     ab8:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
     ac8:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
     ad8:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
     ae8:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
     af8:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
     b08:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
     b18:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
     b28:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
     b38:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
     b48:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
     b58:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
     b68:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
     b78:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
     b88:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
     b98:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
     ba8:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
     bb8:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
     bc8:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
     bd8:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
     be8:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
     bf8:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
     c08:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
     c18:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
     c28:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
     c38:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
     c48:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
     c58:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
     c68:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
     c78:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
     c88:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
     c98:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
     ca8:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
     cb8:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
     cc8:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
     cd8:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
     ce8:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
     cf8:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
     d08:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
     d18:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
     d28:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
     d38:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
     d48:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
     d58:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
     d68:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
     d78:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
     d88:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
     d98:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
     da8:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
     db8:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
     dc8:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
     dd8:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
     de8:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
     df8:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
     e08:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
     e18:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
     e28:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
     e38:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
     e48:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
     e58:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
     e68:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
     e78:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
     e88:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
     e98:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
     ea8:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
     eb8:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
     ec8:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
     ed8:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
     ee8:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
     ef8:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
     f08:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
     f18:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
     f28:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
     f38:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
     f48:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
     f58:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
     f68:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
     f78:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
     f88:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
     f98:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
     fa8:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
     fb8:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
     fc8:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
     fd8:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
     fe8:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
     ff8:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1008:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1018:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    1028:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    1038:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    1048:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    1058:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    1068:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    1078:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1088:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1098:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    10a8:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    10b8:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    10c8:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    10d8:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    10e8:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    10f8:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1108:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1118:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    1128:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    1138:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    1148:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    1158:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    1168:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    1178:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1188:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1198:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    11a8:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    11b8:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    11c8:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    11d8:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    11e8:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    11f8:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1208:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1218:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    1228:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    1238:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    1248:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    1258:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    1268:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    1278:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1288:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1298:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    12a8:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    12b8:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    12c8:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    12d8:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    12e8:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    12f8:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1308:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1318:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    1328:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    1338:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    1348:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    1358:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    1368:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    1378:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1388:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1398:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    13a8:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    13b8:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    13c8:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    13d8:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    13e8:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    13f8:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1408:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1418:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1428:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1438:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1448:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1458:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    1468:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    1478:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    1488:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    1498:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    14a8:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    14b8:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    14c8:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    14d8:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    14e8:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    14f8:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    1508:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    1518:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    1528:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    1538:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    1548:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    1558:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    1568:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    1578:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    1588:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    1598:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    15a8:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    15b8:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    15c8:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    15d8:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    15e8:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    15f8:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    1608:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    1618:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    1628:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    1638:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    1648:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    1658:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    1668:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    1678:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    1688:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    1698:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    16a8:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    16b8:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    16c8:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    16d8:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    16e8:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    16f8:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    1708:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    1718:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    1728:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    1738:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    1748:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    1758:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    1768:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    1778:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    1788:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    1798:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    17a8:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    17b8:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    17c8:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    17d8:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    17e8:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    17f8:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    1808:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    1818:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    1828:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    1838:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    1848:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    1858:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    1868:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    1878:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    1888:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    1898:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    18a8:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    18b8:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    18c8:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    18d8:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    18e8:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    18f8:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    1908:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    1918:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    1928:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    1938:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    1948:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    1958:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    1968:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    1978:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    1988:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    1998:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    19a8:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    19b8:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    19c8:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    19d8:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    19e8:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    19f8:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    1a08:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    1a18:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    1a28:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    1a38:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    1a48:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    1a58:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    1a68:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    1a78:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    1a88:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    1a98:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    1aa8:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    1ab8:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    1ac8:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    1ad8:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    1ae8:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    1af8:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    1b08:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    1b18:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    1b28:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    1b38:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    1b48:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    1b58:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    1b68:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    1b78:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    1b88:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    1b98:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    1ba8:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    1bb8:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    1bc8:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    1bd8:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    1be8:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    1bf8:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    1c08:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    1c18:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    1c28:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    1c38:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    1c48:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    1c58:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    1c68:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    1c78:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    1c88:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    1c98:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    1ca8:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    1cb8:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    1cc8:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    1cd8:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    1ce8:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    1cf8:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    1d08:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    1d18:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    1d28:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    1d38:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    1d48:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    1d58:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    1d68:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    1d78:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    1d88:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    1d98:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    1da8:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    1db8:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    1dc8:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    1dd8:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    1de8:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    1df8:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    1e08:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    1e18:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    1e28:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    1e38:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    1e48:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    1e58:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    1e68:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    1e78:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    1e88:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    1e98:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    1ea8:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    1eb8:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    1ec8:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    1ed8:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    1ee8:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    1ef8:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    1f08:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    1f18:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    1f28:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    1f38:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    1f48:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    1f58:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    1f68:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    1f78:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    1f88:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    1f98:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    1fa8:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    1fb8:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    1fc8:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    1fd8:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    1fe8:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    1ff8:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2008:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2018:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    2028:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    2038:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    2048:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    2058:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    2068:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    2078:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2088:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2098:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    20a8:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    20b8:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    20c8:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    20d8:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    20e8:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    20f8:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2108:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2118:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    2128:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    2138:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    2148:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    2158:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    2168:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    2178:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2188:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2198:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    21a8:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    21b8:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    21c8:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    21d8:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    21e8:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    21f8:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2208:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002218 <__ctors_end>:
    2218:	11 24       	eor	r1, r1
    221a:	1f be       	out	0x3f, r1	; 63
    221c:	cf ef       	ldi	r28, 0xFF	; 255
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	df e5       	ldi	r29, 0x5F	; 95
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	0c bf       	out	0x3c, r16	; 60

00002228 <__do_copy_data>:
    2228:	13 e2       	ldi	r17, 0x23	; 35
    222a:	a0 e0       	ldi	r26, 0x00	; 0
    222c:	b0 e2       	ldi	r27, 0x20	; 32
    222e:	e6 ec       	ldi	r30, 0xC6	; 198
    2230:	f3 e8       	ldi	r31, 0x83	; 131
    2232:	00 e0       	ldi	r16, 0x00	; 0
    2234:	0b bf       	out	0x3b, r16	; 59
    2236:	02 c0       	rjmp	.+4      	; 0x223c <__do_copy_data+0x14>
    2238:	07 90       	elpm	r0, Z+
    223a:	0d 92       	st	X+, r0
    223c:	ae 34       	cpi	r26, 0x4E	; 78
    223e:	b1 07       	cpc	r27, r17
    2240:	d9 f7       	brne	.-10     	; 0x2238 <__do_copy_data+0x10>

00002242 <__do_clear_bss>:
    2242:	27 e2       	ldi	r18, 0x27	; 39
    2244:	ae e4       	ldi	r26, 0x4E	; 78
    2246:	b3 e2       	ldi	r27, 0x23	; 35
    2248:	01 c0       	rjmp	.+2      	; 0x224c <.do_clear_bss_start>

0000224a <.do_clear_bss_loop>:
    224a:	1d 92       	st	X+, r1

0000224c <.do_clear_bss_start>:
    224c:	a9 3d       	cpi	r26, 0xD9	; 217
    224e:	b2 07       	cpc	r27, r18
    2250:	e1 f7       	brne	.-8      	; 0x224a <.do_clear_bss_loop>
    2252:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <main>
    2256:	0c 94 e1 41 	jmp	0x83c2	; 0x83c2 <_exit>

0000225a <__bad_interrupt>:
    225a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000225e <nvm_init>:
#include "conf_nvm.h"
#include "nvm.h"

status_code_t nvm_init(mem_type_t mem)
{
	switch (mem) {
    225e:	83 30       	cpi	r24, 0x03	; 3
    2260:	10 f4       	brcc	.+4      	; 0x2266 <nvm_init+0x8>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	08 95       	ret
		}
		break;
#endif

	default:
		return ERR_INVALID_ARG;
    2266:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    2268:	08 95       	ret

0000226a <dma_interrupt>:
void dma_disable(void)
{
	DMA.CTRL = 0;
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	48 2f       	mov	r20, r24
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	fa 01       	movw	r30, r20
    2274:	71 96       	adiw	r30, 0x11	; 17
    2276:	e2 95       	swap	r30
    2278:	f2 95       	swap	r31
    227a:	f0 7f       	andi	r31, 0xF0	; 240
    227c:	fe 27       	eor	r31, r30
    227e:	e0 7f       	andi	r30, 0xF0	; 240
    2280:	fe 27       	eor	r31, r30
    2282:	a0 e0       	ldi	r26, 0x00	; 0
    2284:	b1 e0       	ldi	r27, 0x01	; 1
    2286:	14 96       	adiw	r26, 0x04	; 4
    2288:	9c 91       	ld	r25, X
    228a:	14 97       	sbiw	r26, 0x04	; 4
    228c:	13 96       	adiw	r26, 0x03	; 3
    228e:	6c 91       	ld	r22, X
    2290:	da 01       	movw	r26, r20
    2292:	14 96       	adiw	r26, 0x04	; 4
    2294:	21 e0       	ldi	r18, 0x01	; 1
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	e9 01       	movw	r28, r18
    229a:	08 2e       	mov	r0, r24
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <dma_interrupt+0x38>
    229e:	cc 0f       	add	r28, r28
    22a0:	dd 1f       	adc	r29, r29
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <dma_interrupt+0x34>
    22a6:	0a 2e       	mov	r0, r26
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <dma_interrupt+0x44>
    22aa:	22 0f       	add	r18, r18
    22ac:	33 1f       	adc	r19, r19
    22ae:	0a 94       	dec	r0
    22b0:	e2 f7       	brpl	.-8      	; 0x22aa <dma_interrupt+0x40>
    22b2:	2c 2b       	or	r18, r28
    22b4:	62 23       	and	r22, r18
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	eb 01       	movw	r28, r22
    22ba:	0a 2e       	mov	r0, r26
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <dma_interrupt+0x58>
    22be:	d5 95       	asr	r29
    22c0:	c7 95       	ror	r28
    22c2:	0a 94       	dec	r0
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <dma_interrupt+0x54>
    22c6:	c0 fd       	sbrc	r28, 0
    22c8:	1a c0       	rjmp	.+52     	; 0x22fe <dma_interrupt+0x94>
    22ca:	08 2e       	mov	r0, r24
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <dma_interrupt+0x68>
    22ce:	75 95       	asr	r23
    22d0:	67 95       	ror	r22
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <dma_interrupt+0x64>
    22d6:	60 fd       	sbrc	r22, 0
    22d8:	14 c0       	rjmp	.+40     	; 0x2302 <dma_interrupt+0x98>
    22da:	29 23       	and	r18, r25
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	b9 01       	movw	r22, r18
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <dma_interrupt+0x7c>
    22e2:	75 95       	asr	r23
    22e4:	67 95       	ror	r22
    22e6:	aa 95       	dec	r26
    22e8:	e2 f7       	brpl	.-8      	; 0x22e2 <dma_interrupt+0x78>
    22ea:	60 fd       	sbrc	r22, 0
    22ec:	0c c0       	rjmp	.+24     	; 0x2306 <dma_interrupt+0x9c>
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <dma_interrupt+0x8a>
    22f0:	35 95       	asr	r19
    22f2:	27 95       	ror	r18
    22f4:	8a 95       	dec	r24
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <dma_interrupt+0x86>
    22f8:	82 2f       	mov	r24, r18
    22fa:	81 70       	andi	r24, 0x01	; 1
    22fc:	05 c0       	rjmp	.+10     	; 0x2308 <dma_interrupt+0x9e>
    22fe:	84 e0       	ldi	r24, 0x04	; 4
    2300:	03 c0       	rjmp	.+6      	; 0x2308 <dma_interrupt+0x9e>
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <dma_interrupt+0x9e>
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	90 63       	ori	r25, 0x30	; 48
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	44 0f       	add	r20, r20
    2310:	55 1f       	adc	r21, r21
    2312:	fa 01       	movw	r30, r20
    2314:	eb 55       	subi	r30, 0x5B	; 91
    2316:	f8 4d       	sbci	r31, 0xD8	; 216
    2318:	01 90       	ld	r0, Z+
    231a:	f0 81       	ld	r31, Z
    231c:	e0 2d       	mov	r30, r0
    231e:	30 97       	sbiw	r30, 0x00	; 0
    2320:	09 f0       	breq	.+2      	; 0x2324 <dma_interrupt+0xba>
    2322:	19 95       	eicall
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	08 95       	ret

0000232a <dma_enable>:
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	1f 92       	push	r1
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
    233c:	80 91 c4 27 	lds	r24, 0x27C4	; 0x8027c4 <sleepmgr_locks+0x1>
    2340:	8f 3f       	cpi	r24, 0xFF	; 255
    2342:	09 f4       	brne	.+2      	; 0x2346 <dma_enable+0x1c>
    2344:	ff cf       	rjmp	.-2      	; 0x2344 <dma_enable+0x1a>
    2346:	8f b7       	in	r24, 0x3f	; 63
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	f8 94       	cli
    234c:	99 81       	ldd	r25, Y+1	; 0x01
    234e:	e3 ec       	ldi	r30, 0xC3	; 195
    2350:	f7 e2       	ldi	r31, 0x27	; 39
    2352:	81 81       	ldd	r24, Z+1	; 0x01
    2354:	8f 5f       	subi	r24, 0xFF	; 255
    2356:	81 83       	std	Z+1, r24	; 0x01
    2358:	9f bf       	out	0x3f, r25	; 63
    235a:	e0 e0       	ldi	r30, 0x00	; 0
    235c:	f1 e0       	ldi	r31, 0x01	; 1
    235e:	80 e4       	ldi	r24, 0x40	; 64
    2360:	80 83       	st	Z, r24
    2362:	80 e8       	ldi	r24, 0x80	; 128
    2364:	80 83       	st	Z, r24
    2366:	0f 90       	pop	r0
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	08 95       	ret

0000236e <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    236e:	e8 2f       	mov	r30, r24
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	ee 0f       	add	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	eb 55       	subi	r30, 0x5B	; 91
    2378:	f8 4d       	sbci	r31, 0xD8	; 216
    237a:	60 83       	st	Z, r22
    237c:	71 83       	std	Z+1, r23	; 0x01
    237e:	08 95       	ret

00002380 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	0b b6       	in	r0, 0x3b	; 59
    238c:	0f 92       	push	r0
    238e:	2f 93       	push	r18
    2390:	3f 93       	push	r19
    2392:	4f 93       	push	r20
    2394:	5f 93       	push	r21
    2396:	6f 93       	push	r22
    2398:	7f 93       	push	r23
    239a:	8f 93       	push	r24
    239c:	9f 93       	push	r25
    239e:	af 93       	push	r26
    23a0:	bf 93       	push	r27
    23a2:	ef 93       	push	r30
    23a4:	ff 93       	push	r31
	dma_interrupt(0);
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	60 df       	rcall	.-320    	; 0x226a <dma_interrupt>
}
    23aa:	ff 91       	pop	r31
    23ac:	ef 91       	pop	r30
    23ae:	bf 91       	pop	r27
    23b0:	af 91       	pop	r26
    23b2:	9f 91       	pop	r25
    23b4:	8f 91       	pop	r24
    23b6:	7f 91       	pop	r23
    23b8:	6f 91       	pop	r22
    23ba:	5f 91       	pop	r21
    23bc:	4f 91       	pop	r20
    23be:	3f 91       	pop	r19
    23c0:	2f 91       	pop	r18
    23c2:	0f 90       	pop	r0
    23c4:	0b be       	out	0x3b, r0	; 59
    23c6:	0f 90       	pop	r0
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	0f 90       	pop	r0
    23cc:	1f 90       	pop	r1
    23ce:	18 95       	reti

000023d0 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    23d0:	1f 92       	push	r1
    23d2:	0f 92       	push	r0
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	0f 92       	push	r0
    23d8:	11 24       	eor	r1, r1
    23da:	0b b6       	in	r0, 0x3b	; 59
    23dc:	0f 92       	push	r0
    23de:	2f 93       	push	r18
    23e0:	3f 93       	push	r19
    23e2:	4f 93       	push	r20
    23e4:	5f 93       	push	r21
    23e6:	6f 93       	push	r22
    23e8:	7f 93       	push	r23
    23ea:	8f 93       	push	r24
    23ec:	9f 93       	push	r25
    23ee:	af 93       	push	r26
    23f0:	bf 93       	push	r27
    23f2:	ef 93       	push	r30
    23f4:	ff 93       	push	r31
	dma_interrupt(1);
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	38 df       	rcall	.-400    	; 0x226a <dma_interrupt>
}
    23fa:	ff 91       	pop	r31
    23fc:	ef 91       	pop	r30
    23fe:	bf 91       	pop	r27
    2400:	af 91       	pop	r26
    2402:	9f 91       	pop	r25
    2404:	8f 91       	pop	r24
    2406:	7f 91       	pop	r23
    2408:	6f 91       	pop	r22
    240a:	5f 91       	pop	r21
    240c:	4f 91       	pop	r20
    240e:	3f 91       	pop	r19
    2410:	2f 91       	pop	r18
    2412:	0f 90       	pop	r0
    2414:	0b be       	out	0x3b, r0	; 59
    2416:	0f 90       	pop	r0
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	0f 90       	pop	r0
    241c:	1f 90       	pop	r1
    241e:	18 95       	reti

00002420 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    2420:	1f 92       	push	r1
    2422:	0f 92       	push	r0
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	0f 92       	push	r0
    2428:	11 24       	eor	r1, r1
    242a:	0b b6       	in	r0, 0x3b	; 59
    242c:	0f 92       	push	r0
    242e:	2f 93       	push	r18
    2430:	3f 93       	push	r19
    2432:	4f 93       	push	r20
    2434:	5f 93       	push	r21
    2436:	6f 93       	push	r22
    2438:	7f 93       	push	r23
    243a:	8f 93       	push	r24
    243c:	9f 93       	push	r25
    243e:	af 93       	push	r26
    2440:	bf 93       	push	r27
    2442:	ef 93       	push	r30
    2444:	ff 93       	push	r31
	dma_interrupt(2);
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	10 df       	rcall	.-480    	; 0x226a <dma_interrupt>
}
    244a:	ff 91       	pop	r31
    244c:	ef 91       	pop	r30
    244e:	bf 91       	pop	r27
    2450:	af 91       	pop	r26
    2452:	9f 91       	pop	r25
    2454:	8f 91       	pop	r24
    2456:	7f 91       	pop	r23
    2458:	6f 91       	pop	r22
    245a:	5f 91       	pop	r21
    245c:	4f 91       	pop	r20
    245e:	3f 91       	pop	r19
    2460:	2f 91       	pop	r18
    2462:	0f 90       	pop	r0
    2464:	0b be       	out	0x3b, r0	; 59
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	0f 90       	pop	r0
    246c:	1f 90       	pop	r1
    246e:	18 95       	reti

00002470 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    2470:	1f 92       	push	r1
    2472:	0f 92       	push	r0
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	0f 92       	push	r0
    2478:	11 24       	eor	r1, r1
    247a:	0b b6       	in	r0, 0x3b	; 59
    247c:	0f 92       	push	r0
    247e:	2f 93       	push	r18
    2480:	3f 93       	push	r19
    2482:	4f 93       	push	r20
    2484:	5f 93       	push	r21
    2486:	6f 93       	push	r22
    2488:	7f 93       	push	r23
    248a:	8f 93       	push	r24
    248c:	9f 93       	push	r25
    248e:	af 93       	push	r26
    2490:	bf 93       	push	r27
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
	dma_interrupt(3);
    2496:	83 e0       	ldi	r24, 0x03	; 3
    2498:	e8 de       	rcall	.-560    	; 0x226a <dma_interrupt>
}
    249a:	ff 91       	pop	r31
    249c:	ef 91       	pop	r30
    249e:	bf 91       	pop	r27
    24a0:	af 91       	pop	r26
    24a2:	9f 91       	pop	r25
    24a4:	8f 91       	pop	r24
    24a6:	7f 91       	pop	r23
    24a8:	6f 91       	pop	r22
    24aa:	5f 91       	pop	r21
    24ac:	4f 91       	pop	r20
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0b be       	out	0x3b, r0	; 59
    24b6:	0f 90       	pop	r0
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	0f 90       	pop	r0
    24bc:	1f 90       	pop	r1
    24be:	18 95       	reti

000024c0 <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	1f 92       	push	r1
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    24cc:	e8 2f       	mov	r30, r24
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	71 96       	adiw	r30, 0x11	; 17
    24d2:	e2 95       	swap	r30
    24d4:	f2 95       	swap	r31
    24d6:	f0 7f       	andi	r31, 0xF0	; 240
    24d8:	fe 27       	eor	r31, r30
    24da:	e0 7f       	andi	r30, 0xF0	; 240
    24dc:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    24de:	8f b7       	in	r24, 0x3f	; 63
    24e0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    24e2:	f8 94       	cli
	return flags;
    24e4:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    24e6:	19 96       	adiw	r26, 0x09	; 9
    24e8:	8c 91       	ld	r24, X
    24ea:	19 97       	sbiw	r26, 0x09	; 9
    24ec:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    24ee:	1a 96       	adiw	r26, 0x0a	; 10
    24f0:	8c 91       	ld	r24, X
    24f2:	1a 97       	sbiw	r26, 0x0a	; 10
    24f4:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    24f6:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    24f8:	17 96       	adiw	r26, 0x07	; 7
    24fa:	8c 91       	ld	r24, X
    24fc:	17 97       	sbiw	r26, 0x07	; 7
    24fe:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    2500:	18 96       	adiw	r26, 0x08	; 8
    2502:	8c 91       	ld	r24, X
    2504:	18 97       	sbiw	r26, 0x08	; 8
    2506:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    2508:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    250a:	12 96       	adiw	r26, 0x02	; 2
    250c:	8c 91       	ld	r24, X
    250e:	12 97       	sbiw	r26, 0x02	; 2
    2510:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    2512:	13 96       	adiw	r26, 0x03	; 3
    2514:	8c 91       	ld	r24, X
    2516:	13 97       	sbiw	r26, 0x03	; 3
    2518:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    251a:	14 96       	adiw	r26, 0x04	; 4
    251c:	2d 91       	ld	r18, X+
    251e:	3c 91       	ld	r19, X
    2520:	15 97       	sbiw	r26, 0x05	; 5
    2522:	24 83       	std	Z+4, r18	; 0x04
    2524:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    2526:	16 96       	adiw	r26, 0x06	; 6
    2528:	8c 91       	ld	r24, X
    252a:	16 97       	sbiw	r26, 0x06	; 6
    252c:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	8c 91       	ld	r24, X
    2532:	11 97       	sbiw	r26, 0x01	; 1
    2534:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    2536:	8c 91       	ld	r24, X
    2538:	8f 77       	andi	r24, 0x7F	; 127
    253a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    253c:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    253e:	0f 90       	pop	r0
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    2546:	04 c0       	rjmp	.+8      	; 0x2550 <__portable_avr_delay_cycles+0xa>
    2548:	61 50       	subi	r22, 0x01	; 1
    254a:	71 09       	sbc	r23, r1
    254c:	81 09       	sbc	r24, r1
    254e:	91 09       	sbc	r25, r1
    2550:	61 15       	cp	r22, r1
    2552:	71 05       	cpc	r23, r1
    2554:	81 05       	cpc	r24, r1
    2556:	91 05       	cpc	r25, r1
    2558:	b9 f7       	brne	.-18     	; 0x2548 <__portable_avr_delay_cycles+0x2>
    255a:	08 95       	ret

0000255c <rtc_get_time>:
    255c:	80 e1       	ldi	r24, 0x10	; 16
    255e:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    2562:	e0 e2       	ldi	r30, 0x20	; 32
    2564:	f4 e0       	ldi	r31, 0x04	; 4
    2566:	81 81       	ldd	r24, Z+1	; 0x01
    2568:	84 fd       	sbrc	r24, 4
    256a:	fd cf       	rjmp	.-6      	; 0x2566 <rtc_get_time+0xa>
    256c:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    2570:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    2574:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    2578:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    257c:	08 95       	ret

0000257e <rtc_set_callback>:
    257e:	80 93 ad 27 	sts	0x27AD, r24	; 0x8027ad <rtc_data>
    2582:	90 93 ae 27 	sts	0x27AE, r25	; 0x8027ae <rtc_data+0x1>
    2586:	08 95       	ret

00002588 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    258c:	64 e0       	ldi	r22, 0x04	; 4
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    2594:	c0 ef       	ldi	r28, 0xF0	; 240
    2596:	d0 e0       	ldi	r29, 0x00	; 0
    2598:	88 81       	ld	r24, Y
    259a:	82 60       	ori	r24, 0x02	; 2
    259c:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    259e:	61 e0       	ldi	r22, 0x01	; 1
    25a0:	80 ef       	ldi	r24, 0xF0	; 240
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 25 3b 	call	0x764a	; 0x764a <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    25a8:	88 81       	ld	r24, Y
    25aa:	84 60       	ori	r24, 0x04	; 4
    25ac:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    25ae:	69 ee       	ldi	r22, 0xE9	; 233
    25b0:	73 e0       	ldi	r23, 0x03	; 3
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	c7 df       	rcall	.-114    	; 0x2546 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    25b8:	88 81       	ld	r24, Y
    25ba:	88 61       	ori	r24, 0x18	; 24
    25bc:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    25be:	e0 ef       	ldi	r30, 0xF0	; 240
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	81 81       	ldd	r24, Z+1	; 0x01
    25c4:	83 ff       	sbrs	r24, 3
    25c6:	fd cf       	rjmp	.-6      	; 0x25c2 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    25c8:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    25cc:	e0 e2       	ldi	r30, 0x20	; 32
    25ce:	f4 e0       	ldi	r31, 0x04	; 4
    25d0:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    25d2:	80 fd       	sbrc	r24, 0
    25d4:	fd cf       	rjmp	.-6      	; 0x25d0 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    25d6:	e0 e2       	ldi	r30, 0x20	; 32
    25d8:	f4 e0       	ldi	r31, 0x04	; 4
    25da:	8f ef       	ldi	r24, 0xFF	; 255
    25dc:	9f ef       	ldi	r25, 0xFF	; 255
    25de:	dc 01       	movw	r26, r24
    25e0:	80 87       	std	Z+8, r24	; 0x08
    25e2:	91 87       	std	Z+9, r25	; 0x09
    25e4:	a2 87       	std	Z+10, r26	; 0x0a
    25e6:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    25e8:	14 82       	std	Z+4, r1	; 0x04
    25ea:	15 82       	std	Z+5, r1	; 0x05
    25ec:	16 82       	std	Z+6, r1	; 0x06
    25ee:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    25f0:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    25f2:	80 fd       	sbrc	r24, 0
    25f4:	fd cf       	rjmp	.-6      	; 0x25f0 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    25f6:	e0 e2       	ldi	r30, 0x20	; 32
    25f8:	f4 e0       	ldi	r31, 0x04	; 4
    25fa:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2600:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    2602:	80 fd       	sbrc	r24, 0
    2604:	fd cf       	rjmp	.-6      	; 0x2600 <rtc_init+0x78>
}
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    260c:	1f 92       	push	r1
    260e:	0f 92       	push	r0
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	0f 92       	push	r0
    2614:	11 24       	eor	r1, r1
    2616:	0b b6       	in	r0, 0x3b	; 59
    2618:	0f 92       	push	r0
    261a:	2f 93       	push	r18
    261c:	3f 93       	push	r19
    261e:	4f 93       	push	r20
    2620:	5f 93       	push	r21
    2622:	6f 93       	push	r22
    2624:	7f 93       	push	r23
    2626:	8f 93       	push	r24
    2628:	9f 93       	push	r25
    262a:	af 93       	push	r26
    262c:	bf 93       	push	r27
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	ef 93       	push	r30
    2634:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    2636:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    263a:	c0 91 ad 27 	lds	r28, 0x27AD	; 0x8027ad <rtc_data>
    263e:	d0 91 ae 27 	lds	r29, 0x27AE	; 0x8027ae <rtc_data+0x1>
    2642:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    2644:	19 f0       	breq	.+6      	; 0x264c <__vector_11+0x40>
    2646:	8a df       	rcall	.-236    	; 0x255c <rtc_get_time>
    2648:	fe 01       	movw	r30, r28
}
    264a:	19 95       	eicall
    264c:	ff 91       	pop	r31
    264e:	ef 91       	pop	r30
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	bf 91       	pop	r27
    2656:	af 91       	pop	r26
    2658:	9f 91       	pop	r25
    265a:	8f 91       	pop	r24
    265c:	7f 91       	pop	r23
    265e:	6f 91       	pop	r22
    2660:	5f 91       	pop	r21
    2662:	4f 91       	pop	r20
    2664:	3f 91       	pop	r19
    2666:	2f 91       	pop	r18
    2668:	0f 90       	pop	r0
    266a:	0b be       	out	0x3b, r0	; 59
    266c:	0f 90       	pop	r0
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	0f 90       	pop	r0
    2672:	1f 90       	pop	r1
    2674:	18 95       	reti

00002676 <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* Interpolate result */
	uint16_t left_x       = phase >> 4;												// left side
	int16_t  left_y       = (int16_t)PGM_READ_WORD(&(PM_SINE[left_x])) - 0x8000;
    2676:	fc 01       	movw	r30, r24
    2678:	f2 95       	swap	r31
    267a:	e2 95       	swap	r30
    267c:	ef 70       	andi	r30, 0x0F	; 15
    267e:	ef 27       	eor	r30, r31
    2680:	ff 70       	andi	r31, 0x0F	; 15
    2682:	ef 27       	eor	r30, r31
    2684:	ee 0f       	add	r30, r30
    2686:	ff 1f       	adc	r31, r31
    2688:	e8 5e       	subi	r30, 0xE8	; 232
    268a:	fd 4f       	sbci	r31, 0xFD	; 253
    268c:	25 91       	lpm	r18, Z+
    268e:	34 91       	lpm	r19, Z
    2690:	30 58       	subi	r19, 0x80	; 128
	uint16_t rght_x       = (phase + 16) >> 4;										// right side
	int16_t  rght_y       = (int16_t)PGM_READ_WORD(&(PM_SINE[rght_x])) - 0x8000;
    2692:	fc 01       	movw	r30, r24
    2694:	70 96       	adiw	r30, 0x10	; 16
    2696:	f2 95       	swap	r31
    2698:	e2 95       	swap	r30
    269a:	ef 70       	andi	r30, 0x0F	; 15
    269c:	ef 27       	eor	r30, r31
    269e:	ff 70       	andi	r31, 0x0F	; 15
    26a0:	ef 27       	eor	r30, r31
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	e8 5e       	subi	r30, 0xE8	; 232
    26a8:	fd 4f       	sbci	r31, 0xFD	; 253
    26aa:	45 91       	lpm	r20, Z+
    26ac:	54 91       	lpm	r21, Z
	int16_t  prob         = phase & 0x0f;											// phase fraction
	int16_t  delta_frac_y = (int16_t) (((rght_y - left_y) * prob) >> 4);			// interpolation
	int16_t  val          = left_y + delta_frac_y;

	return 0x8000U + (uint16_t)val;
    26ae:	50 58       	subi	r21, 0x80	; 128
    26b0:	42 1b       	sub	r20, r18
    26b2:	53 0b       	sbc	r21, r19
    26b4:	8f 70       	andi	r24, 0x0F	; 15
    26b6:	99 27       	eor	r25, r25
    26b8:	48 9f       	mul	r20, r24
    26ba:	b0 01       	movw	r22, r0
    26bc:	49 9f       	mul	r20, r25
    26be:	70 0d       	add	r23, r0
    26c0:	58 9f       	mul	r21, r24
    26c2:	70 0d       	add	r23, r0
    26c4:	11 24       	eor	r1, r1
    26c6:	cb 01       	movw	r24, r22
    26c8:	95 95       	asr	r25
    26ca:	87 95       	ror	r24
    26cc:	95 95       	asr	r25
    26ce:	87 95       	ror	r24
    26d0:	95 95       	asr	r25
    26d2:	87 95       	ror	r24
    26d4:	95 95       	asr	r25
    26d6:	87 95       	ror	r24
    26d8:	82 0f       	add	r24, r18
    26da:	93 1f       	adc	r25, r19
}
    26dc:	90 58       	subi	r25, 0x80	; 128
    26de:	08 95       	ret

000026e0 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    26e0:	04 c0       	rjmp	.+8      	; 0x26ea <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    26e2:	61 50       	subi	r22, 0x01	; 1
    26e4:	71 09       	sbc	r23, r1
    26e6:	81 09       	sbc	r24, r1
    26e8:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    26ea:	61 15       	cp	r22, r1
    26ec:	71 05       	cpc	r23, r1
    26ee:	81 05       	cpc	r24, r1
    26f0:	91 05       	cpc	r25, r1
    26f2:	b9 f7       	brne	.-18     	; 0x26e2 <__portable_avr_delay_cycles+0x2>
    26f4:	08 95       	ret

000026f6 <twi2_waitUntilReady>:
}
#endif


static void twi2_waitUntilReady(void)
{
    26f6:	cf 92       	push	r12
    26f8:	df 92       	push	r13
    26fa:	ef 92       	push	r14
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
	status_code_t status;
	uint8_t isBusy;
	uint8_t isValid;

	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_STATE;
    2704:	ea e0       	ldi	r30, 0x0A	; 10
    2706:	f0 e2       	ldi	r31, 0x20	; 32
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	84 83       	std	Z+4, r24	; 0x04
    2712:	95 83       	std	Z+5, r25	; 0x05

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2714:	8f 01       	movw	r16, r30
    2716:	cc 24       	eor	r12, r12
    2718:	c3 94       	inc	r12
    271a:	d1 2c       	mov	r13, r1
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    271c:	0f 2e       	mov	r0, r31
    271e:	f3 e0       	ldi	r31, 0x03	; 3
    2720:	ef 2e       	mov	r14, r31
    2722:	f6 e2       	ldi	r31, 0x26	; 38
    2724:	ff 2e       	mov	r15, r31
    2726:	f0 2d       	mov	r31, r0
	twi2_packet.addr_length = 1;

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2728:	f8 01       	movw	r30, r16
    272a:	c0 86       	std	Z+8, r12	; 0x08
    272c:	d1 86       	std	Z+9, r13	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	b8 01       	movw	r22, r16
    2732:	80 e8       	ldi	r24, 0x80	; 128
    2734:	94 e0       	ldi	r25, 0x04	; 4
    2736:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    273a:	f7 01       	movw	r30, r14
    273c:	c0 81       	ld	r28, Z
    273e:	9c 2f       	mov	r25, r28
    2740:	90 78       	andi	r25, 0x80	; 128
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
    2742:	81 11       	cpse	r24, r1
    2744:	0d c0       	rjmp	.+26     	; 0x2760 <twi2_waitUntilReady+0x6a>
    2746:	91 f0       	breq	.+36     	; 0x276c <twi2_waitUntilReady+0x76>
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
		} else {
			if (isBusy && isValid) {
    2748:	8c 2f       	mov	r24, r28
    274a:	81 78       	andi	r24, 0x81	; 129
    274c:	81 38       	cpi	r24, 0x81	; 129
    274e:	29 f4       	brne	.+10     	; 0x275a <twi2_waitUntilReady+0x64>
				delay_us(TWI_SMART_LCD_DEVICE_BUSY_DELAY_MIN_US);
    2750:	65 ef       	ldi	r22, 0xF5	; 245
    2752:	71 e0       	ldi	r23, 0x01	; 1
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	c3 df       	rcall	.-122    	; 0x26e0 <__portable_avr_delay_cycles>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
    275a:	c0 fd       	sbrc	r28, 0
    275c:	e5 cf       	rjmp	.-54     	; 0x2728 <twi2_waitUntilReady+0x32>
    275e:	0c c0       	rjmp	.+24     	; 0x2778 <twi2_waitUntilReady+0x82>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2760:	65 e0       	ldi	r22, 0x05	; 5
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	bb df       	rcall	.-138    	; 0x26e0 <__portable_avr_delay_cycles>
    276a:	de cf       	rjmp	.-68     	; 0x2728 <twi2_waitUntilReady+0x32>
    276c:	65 e0       	ldi	r22, 0x05	; 5
    276e:	70 e0       	ldi	r23, 0x00	; 0
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	b5 df       	rcall	.-150    	; 0x26e0 <__portable_avr_delay_cycles>
    2776:	d8 cf       	rjmp	.-80     	; 0x2728 <twi2_waitUntilReady+0x32>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
	//printf("DBG909\r\n");
}
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	df 90       	pop	r13
    2784:	cf 90       	pop	r12
    2786:	08 95       	ret

00002788 <twi_init>:


void twi_init(void) {
#ifdef TWI1_MASTER
	TWI1_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA1
    2788:	e0 e8       	ldi	r30, 0x80	; 128
    278a:	f6 e0       	ldi	r31, 0x06	; 6
    278c:	88 e3       	ldi	r24, 0x38	; 56
    278e:	80 8b       	std	Z+16, r24	; 0x10
	TWI1_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL1
    2790:	81 8b       	std	Z+17, r24	; 0x11
#endif
	
#ifdef TWI2_MASTER
	TWI2_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA2
    2792:	e0 e4       	ldi	r30, 0x40	; 64
    2794:	f6 e0       	ldi	r31, 0x06	; 6
    2796:	80 8b       	std	Z+16, r24	; 0x10
	TWI2_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL2
    2798:	81 8b       	std	Z+17, r24	; 0x11
    279a:	08 95       	ret

0000279c <start_twi_onboard>:
	start_twi_lcd();
}

/* TWI1 - GSM, Gyro, Baro, Hygro devices */
void start_twi_onboard()
{
    279c:	cf 93       	push	r28
		printf("TWI-onboard:  ... device not on board.\r\n");
	}
#endif

	/* Device Gyro MPU-9250 - I2C address: 0x68, 0x0C (or 0x0D or 0x0E or 0x0F) */
	printf("\r\nTWI-onboard: Gyro MPU-9250 - I2C address: 0x%02X, 0x%02X\r\n", TWI1_SLAVE_GYRO_ADDR_1, TWI1_SLAVE_GYRO_ADDR_2);
    279e:	1f 92       	push	r1
    27a0:	8c e0       	ldi	r24, 0x0C	; 12
    27a2:	8f 93       	push	r24
    27a4:	1f 92       	push	r1
    27a6:	c8 e6       	ldi	r28, 0x68	; 104
    27a8:	cf 93       	push	r28
    27aa:	84 ef       	ldi	r24, 0xF4	; 244
    27ac:	90 e2       	ldi	r25, 0x20	; 32
    27ae:	9f 93       	push	r25
    27b0:	8f 93       	push	r24
    27b2:	0e 94 b5 3d 	call	0x7b6a	; 0x7b6a <printf>
	g_twi1_gyro_1_version = 0;
    27b6:	10 92 6a 26 	sts	0x266A, r1	; 0x80266a <g_twi1_gyro_1_version>
	g_twi1_gyro_2_version = 0;
    27ba:	10 92 69 26 	sts	0x2669, r1	; 0x802669 <g_twi1_gyro_2_version>
	//
	twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    27be:	ee e1       	ldi	r30, 0x1E	; 30
    27c0:	f0 e2       	ldi	r31, 0x20	; 32
    27c2:	c0 83       	st	Z, r28
	twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_RESET;
    27c4:	8b e6       	ldi	r24, 0x6B	; 107
    27c6:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr_length = 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	84 83       	std	Z+4, r24	; 0x04
    27ce:	95 83       	std	Z+5, r25	; 0x05
	twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_RESET;
    27d0:	21 e8       	ldi	r18, 0x81	; 129
    27d2:	20 93 0b 26 	sts	0x260B, r18	; 0x80260b <twi1_m_data>
	twi1_packet.length = 1;
    27d6:	80 87       	std	Z+8, r24	; 0x08
    27d8:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    27da:	40 e0       	ldi	r20, 0x00	; 0
    27dc:	bf 01       	movw	r22, r30
    27de:	80 ea       	ldi	r24, 0xA0	; 160
    27e0:	94 e0       	ldi	r25, 0x04	; 4
    27e2:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
	sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
	//
	if (sc == STATUS_OK) {
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	81 11       	cpse	r24, r1
    27f4:	5a c0       	rjmp	.+180    	; 0x28aa <start_twi_onboard+0x10e>
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    27f6:	ee e1       	ldi	r30, 0x1E	; 30
    27f8:	f0 e2       	ldi	r31, 0x20	; 32
    27fa:	8c e0       	ldi	r24, 0x0C	; 12
    27fc:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_RESET;
    27fe:	8a e0       	ldi	r24, 0x0A	; 10
    2800:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	84 83       	std	Z+4, r24	; 0x04
    2808:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_RESET;
    280a:	2f e1       	ldi	r18, 0x1F	; 31
    280c:	20 93 0b 26 	sts	0x260B, r18	; 0x80260b <twi1_m_data>
		twi1_packet.length = 1;
    2810:	80 87       	std	Z+8, r24	; 0x08
    2812:	91 87       	std	Z+9, r25	; 0x09
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	bf 01       	movw	r22, r30
    2818:	80 ea       	ldi	r24, 0xA0	; 160
    281a:	94 e0       	ldi	r25, 0x04	; 4
    281c:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc == STATUS_OK) {
    2820:	81 11       	cpse	r24, r1
    2822:	47 c0       	rjmp	.+142    	; 0x28b2 <start_twi_onboard+0x116>
			delay_ms(10);
    2824:	61 e5       	ldi	r22, 0x51	; 81
    2826:	73 ec       	ldi	r23, 0xC3	; 195
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	59 df       	rcall	.-334    	; 0x26e0 <__portable_avr_delay_cycles>
			//
			twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    282e:	ee e1       	ldi	r30, 0x1E	; 30
    2830:	f0 e2       	ldi	r31, 0x20	; 32
    2832:	88 e6       	ldi	r24, 0x68	; 104
    2834:	80 83       	st	Z, r24
			twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_WHOAMI;
    2836:	85 e7       	ldi	r24, 0x75	; 117
    2838:	81 83       	std	Z+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	84 83       	std	Z+4, r24	; 0x04
    2840:	95 83       	std	Z+5, r25	; 0x05
			twi1_packet.length = 1;
    2842:	80 87       	std	Z+8, r24	; 0x08
    2844:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2846:	41 e0       	ldi	r20, 0x01	; 1
    2848:	bf 01       	movw	r22, r30
    284a:	80 ea       	ldi	r24, 0xA0	; 160
    284c:	94 e0       	ldi	r25, 0x04	; 4
    284e:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2852:	81 11       	cpse	r24, r1
    2854:	15 c0       	rjmp	.+42     	; 0x2880 <start_twi_onboard+0xe4>
				g_twi1_gyro_1_version = twi1_m_data[0];
    2856:	80 91 0b 26 	lds	r24, 0x260B	; 0x80260b <twi1_m_data>
    285a:	80 93 6a 26 	sts	0x266A, r24	; 0x80266a <g_twi1_gyro_1_version>
				//
				twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    285e:	ee e1       	ldi	r30, 0x1E	; 30
    2860:	f0 e2       	ldi	r31, 0x20	; 32
    2862:	8c e0       	ldi	r24, 0x0C	; 12
    2864:	80 83       	st	Z, r24
				twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_DEVICE_ID;
    2866:	11 82       	std	Z+1, r1	; 0x01
    2868:	41 e0       	ldi	r20, 0x01	; 1
    286a:	bf 01       	movw	r22, r30
    286c:	80 ea       	ldi	r24, 0xA0	; 160
    286e:	94 e0       	ldi	r25, 0x04	; 4
    2870:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
				sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
				if (sc == STATUS_OK) {
    2874:	81 11       	cpse	r24, r1
    2876:	04 c0       	rjmp	.+8      	; 0x2880 <start_twi_onboard+0xe4>
					g_twi1_gyro_2_version = twi1_m_data[0];
    2878:	80 91 0b 26 	lds	r24, 0x260B	; 0x80260b <twi1_m_data>
    287c:	80 93 69 26 	sts	0x2669, r24	; 0x802669 <g_twi1_gyro_2_version>
				}
			}
			printf("TWI-onboard: Gyro MPU-9250 -     version: 0x%02X, 0x%02X\r\n", g_twi1_gyro_1_version, g_twi1_gyro_2_version);
    2880:	80 91 69 26 	lds	r24, 0x2669	; 0x802669 <g_twi1_gyro_2_version>
    2884:	1f 92       	push	r1
    2886:	8f 93       	push	r24
    2888:	80 91 6a 26 	lds	r24, 0x266A	; 0x80266a <g_twi1_gyro_1_version>
    288c:	1f 92       	push	r1
    288e:	8f 93       	push	r24
    2890:	81 e3       	ldi	r24, 0x31	; 49
    2892:	91 e2       	ldi	r25, 0x21	; 33
    2894:	9f 93       	push	r25
    2896:	8f 93       	push	r24
    2898:	0e 94 b5 3d 	call	0x7b6a	; 0x7b6a <printf>
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	04 c0       	rjmp	.+8      	; 0x28b2 <start_twi_onboard+0x116>
		}
	} else {
		printf("TWI-onboard:  ... device not on board.\r\n");
    28aa:	8c e6       	ldi	r24, 0x6C	; 108
    28ac:	91 e2       	ldi	r25, 0x21	; 33
    28ae:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <puts>
	}

	/* Device Baro MS560702BA03-50 - I2C address: 0x76 */
	printf("\r\nTWI-onboard: Baro MS560702BA03-50 - I2C address: 0x%02X\r\n", TWI1_SLAVE_BARO_ADDR);
    28b2:	1f 92       	push	r1
    28b4:	c6 e7       	ldi	r28, 0x76	; 118
    28b6:	cf 93       	push	r28
    28b8:	84 e9       	ldi	r24, 0x94	; 148
    28ba:	91 e2       	ldi	r25, 0x21	; 33
    28bc:	9f 93       	push	r25
    28be:	8f 93       	push	r24
    28c0:	0e 94 b5 3d 	call	0x7b6a	; 0x7b6a <printf>
	g_twi1_baro_version = 0;
    28c4:	10 92 68 26 	sts	0x2668, r1	; 0x802668 <g_twi1_baro_version>
	//
	twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    28c8:	ee e1       	ldi	r30, 0x1E	; 30
    28ca:	f0 e2       	ldi	r31, 0x20	; 32
    28cc:	c0 83       	st	Z, r28
	twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_RESET;
    28ce:	8e e1       	ldi	r24, 0x1E	; 30
    28d0:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr_length = 1;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	84 83       	std	Z+4, r24	; 0x04
    28d8:	95 83       	std	Z+5, r25	; 0x05
	twi1_packet.length = 0;
    28da:	10 86       	std	Z+8, r1	; 0x08
    28dc:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	bf 01       	movw	r22, r30
    28e2:	80 ea       	ldi	r24, 0xA0	; 160
    28e4:	94 e0       	ldi	r25, 0x04	; 4
    28e6:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
	sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	81 11       	cpse	r24, r1
    28f4:	35 c0       	rjmp	.+106    	; 0x2960 <start_twi_onboard+0x1c4>
		delay_ms(3);
    28f6:	68 e9       	ldi	r22, 0x98	; 152
    28f8:	7a e3       	ldi	r23, 0x3A	; 58
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	f0 de       	rcall	.-544    	; 0x26e0 <__portable_avr_delay_cycles>
		//
		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_VERSION;
    2900:	ee e1       	ldi	r30, 0x1E	; 30
    2902:	f0 e2       	ldi	r31, 0x20	; 32
    2904:	87 e5       	ldi	r24, 0x57	; 87
    2906:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.length = 2;
    2908:	82 e0       	ldi	r24, 0x02	; 2
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	80 87       	std	Z+8, r24	; 0x08
    290e:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2910:	41 e0       	ldi	r20, 0x01	; 1
    2912:	bf 01       	movw	r22, r30
    2914:	80 ea       	ldi	r24, 0xA0	; 160
    2916:	94 e0       	ldi	r25, 0x04	; 4
    2918:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc == STATUS_OK) {
    291c:	81 11       	cpse	r24, r1
    291e:	24 c0       	rjmp	.+72     	; 0x2968 <start_twi_onboard+0x1cc>
			g_twi1_baro_version = ((twi1_m_data[0] << 8) | twi1_m_data[1]) >> 4;
    2920:	eb e0       	ldi	r30, 0x0B	; 11
    2922:	f6 e2       	ldi	r31, 0x26	; 38
    2924:	80 81       	ld	r24, Z
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	98 2f       	mov	r25, r24
    292a:	88 27       	eor	r24, r24
    292c:	21 81       	ldd	r18, Z+1	; 0x01
    292e:	82 2b       	or	r24, r18
    2930:	95 95       	asr	r25
    2932:	87 95       	ror	r24
    2934:	95 95       	asr	r25
    2936:	87 95       	ror	r24
    2938:	95 95       	asr	r25
    293a:	87 95       	ror	r24
    293c:	95 95       	asr	r25
    293e:	87 95       	ror	r24
    2940:	80 93 68 26 	sts	0x2668, r24	; 0x802668 <g_twi1_baro_version>
			printf("TWI-onboard: Baro MS560702BA03-50 -     version: 0x%04X\r\n", g_twi1_baro_version);
    2944:	99 27       	eor	r25, r25
    2946:	9f 93       	push	r25
    2948:	8f 93       	push	r24
    294a:	80 ed       	ldi	r24, 0xD0	; 208
    294c:	91 e2       	ldi	r25, 0x21	; 33
    294e:	9f 93       	push	r25
    2950:	8f 93       	push	r24
    2952:	0e 94 b5 3d 	call	0x7b6a	; 0x7b6a <printf>
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	04 c0       	rjmp	.+8      	; 0x2968 <start_twi_onboard+0x1cc>
		}
	} else {
		printf("TWI-onboard:  ... device not on board.\r\n");
    2960:	8c e6       	ldi	r24, 0x6C	; 108
    2962:	91 e2       	ldi	r25, 0x21	; 33
    2964:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <puts>
	}

	/* Device Hygro SHT31-DIS - I2C address: 0x44 */
	printf("\r\nTWI-onboard: Hygro SHT31-DIS - I2C address: 0x%02X\r\n", TWI1_SLAVE_HYGRO_ADDR);
    2968:	1f 92       	push	r1
    296a:	c4 e4       	ldi	r28, 0x44	; 68
    296c:	cf 93       	push	r28
    296e:	8a e0       	ldi	r24, 0x0A	; 10
    2970:	92 e2       	ldi	r25, 0x22	; 34
    2972:	9f 93       	push	r25
    2974:	8f 93       	push	r24
    2976:	0e 94 b5 3d 	call	0x7b6a	; 0x7b6a <printf>
	g_twi1_hygro_status = 0;
    297a:	10 92 67 26 	sts	0x2667, r1	; 0x802667 <g_twi1_hygro_status>
	//
	twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    297e:	ee e1       	ldi	r30, 0x1E	; 30
    2980:	f0 e2       	ldi	r31, 0x20	; 32
    2982:	c0 83       	st	Z, r28
	twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_RESET_HI;
    2984:	80 e3       	ldi	r24, 0x30	; 48
    2986:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_RESET_LO;
    2988:	82 ea       	ldi	r24, 0xA2	; 162
    298a:	82 83       	std	Z+2, r24	; 0x02
	twi1_packet.addr_length = 2;
    298c:	82 e0       	ldi	r24, 0x02	; 2
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	84 83       	std	Z+4, r24	; 0x04
    2992:	95 83       	std	Z+5, r25	; 0x05
	twi1_packet.length = 0;
    2994:	10 86       	std	Z+8, r1	; 0x08
    2996:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	bf 01       	movw	r22, r30
    299c:	80 ea       	ldi	r24, 0xA0	; 160
    299e:	94 e0       	ldi	r25, 0x04	; 4
    29a0:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
	sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	81 11       	cpse	r24, r1
    29ae:	28 c0       	rjmp	.+80     	; 0x2a00 <start_twi_onboard+0x264>
		delay_ms(1);
    29b0:	68 e8       	ldi	r22, 0x88	; 136
    29b2:	73 e1       	ldi	r23, 0x13	; 19
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	93 de       	rcall	.-730    	; 0x26e0 <__portable_avr_delay_cycles>
		//
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_STATUS_HI;
    29ba:	ee e1       	ldi	r30, 0x1E	; 30
    29bc:	f0 e2       	ldi	r31, 0x20	; 32
    29be:	83 ef       	ldi	r24, 0xF3	; 243
    29c0:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_STATUS_LO;
    29c2:	8d e2       	ldi	r24, 0x2D	; 45
    29c4:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.length = 2;
    29c6:	82 e0       	ldi	r24, 0x02	; 2
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	80 87       	std	Z+8, r24	; 0x08
    29cc:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    29ce:	41 e0       	ldi	r20, 0x01	; 1
    29d0:	bf 01       	movw	r22, r30
    29d2:	80 ea       	ldi	r24, 0xA0	; 160
    29d4:	94 e0       	ldi	r25, 0x04	; 4
    29d6:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc == STATUS_OK) {
    29da:	81 11       	cpse	r24, r1
    29dc:	15 c0       	rjmp	.+42     	; 0x2a08 <start_twi_onboard+0x26c>
			g_twi1_hygro_status = (twi1_m_data[0] << 8) | twi1_m_data[1];
    29de:	80 91 0c 26 	lds	r24, 0x260C	; 0x80260c <twi1_m_data+0x1>
    29e2:	80 93 67 26 	sts	0x2667, r24	; 0x802667 <g_twi1_hygro_status>
			printf("TWI-onboard: Hygro SHT31-DIS -   status: 0x%02X\r\n", g_twi1_hygro_status);
    29e6:	1f 92       	push	r1
    29e8:	8f 93       	push	r24
    29ea:	81 e4       	ldi	r24, 0x41	; 65
    29ec:	92 e2       	ldi	r25, 0x22	; 34
    29ee:	9f 93       	push	r25
    29f0:	8f 93       	push	r24
    29f2:	0e 94 b5 3d 	call	0x7b6a	; 0x7b6a <printf>
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	04 c0       	rjmp	.+8      	; 0x2a08 <start_twi_onboard+0x26c>
		}
	} else {
		printf("TWI-onboard:  ... device not on board.\r\n");
    2a00:	8c e6       	ldi	r24, 0x6C	; 108
    2a02:	91 e2       	ldi	r25, 0x21	; 33
    2a04:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <puts>
	}
	printf("-----------\r\n\r\n");
    2a08:	83 e7       	ldi	r24, 0x73	; 115
    2a0a:	92 e2       	ldi	r25, 0x22	; 34
    2a0c:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <puts>
}
    2a10:	cf 91       	pop	r28
    2a12:	08 95       	ret

00002a14 <start_twi_lcd>:

/* TWI2 - LCD Port */
void start_twi_lcd()
{
    2a14:	ef 92       	push	r14
    2a16:	ff 92       	push	r15
    2a18:	0f 93       	push	r16
    2a1a:	1f 93       	push	r17
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
    2a20:	ea e0       	ldi	r30, 0x0A	; 10
    2a22:	f0 e2       	ldi	r31, 0x20	; 32
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	84 83       	std	Z+4, r24	; 0x04
    2a2e:	95 83       	std	Z+5, r25	; 0x05
	twi2_packet.length = 1;
    2a30:	80 87       	std	Z+8, r24	; 0x08
    2a32:	91 87       	std	Z+9, r25	; 0x09
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	bf 01       	movw	r22, r30
    2a38:	80 e8       	ldi	r24, 0x80	; 128
    2a3a:	94 e0       	ldi	r25, 0x04	; 4
    2a3c:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
    2a40:	80 91 03 26 	lds	r24, 0x2603	; 0x802603 <twi2_m_data>
    2a44:	80 93 66 26 	sts	0x2666, r24	; 0x802666 <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
    2a48:	81 31       	cpi	r24, 0x11	; 17
    2a4a:	78 f1       	brcs	.+94     	; 0x2aaa <start_twi_lcd+0x96>
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
    2a4c:	ca e0       	ldi	r28, 0x0A	; 10
    2a4e:	d0 e2       	ldi	r29, 0x20	; 32
    2a50:	82 e0       	ldi	r24, 0x02	; 2
    2a52:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = 0x10;
    2a54:	0f 2e       	mov	r0, r31
    2a56:	f3 e0       	ldi	r31, 0x03	; 3
    2a58:	ef 2e       	mov	r14, r31
    2a5a:	f6 e2       	ldi	r31, 0x26	; 38
    2a5c:	ff 2e       	mov	r15, r31
    2a5e:	f0 2d       	mov	r31, r0
    2a60:	80 e1       	ldi	r24, 0x10	; 16
    2a62:	f7 01       	movw	r30, r14
    2a64:	80 83       	st	Z, r24
		twi2_packet.length = 1;
    2a66:	01 e0       	ldi	r16, 0x01	; 1
    2a68:	10 e0       	ldi	r17, 0x00	; 0
    2a6a:	08 87       	std	Y+8, r16	; 0x08
    2a6c:	19 87       	std	Y+9, r17	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	be 01       	movw	r22, r28
    2a72:	80 e8       	ldi	r24, 0x80	; 128
    2a74:	94 e0       	ldi	r25, 0x04	; 4
    2a76:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2a7a:	65 e0       	ldi	r22, 0x05	; 5
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0

		twi2_waitUntilReady();
    2a82:	2e de       	rcall	.-932    	; 0x26e0 <__portable_avr_delay_cycles>
    2a84:	38 de       	rcall	.-912    	; 0x26f6 <twi2_waitUntilReady>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
    2a86:	84 e1       	ldi	r24, 0x14	; 20
    2a88:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = GFX_PIXEL_SET;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	f7 01       	movw	r30, r14
    2a8e:	80 83       	st	Z, r24
		twi2_packet.length = 1;
    2a90:	08 87       	std	Y+8, r16	; 0x08
    2a92:	19 87       	std	Y+9, r17	; 0x09
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	be 01       	movw	r22, r28
    2a98:	80 e8       	ldi	r24, 0x80	; 128
    2a9a:	94 e0       	ldi	r25, 0x04	; 4
    2a9c:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2aa0:	65 e0       	ldi	r22, 0x05	; 5
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	1b de       	rcall	.-970    	; 0x26e0 <__portable_avr_delay_cycles>
	}
}
    2aaa:	df 91       	pop	r29
    2aac:	cf 91       	pop	r28
    2aae:	1f 91       	pop	r17
    2ab0:	0f 91       	pop	r16
    2ab2:	ff 90       	pop	r15
    2ab4:	ef 90       	pop	r14
    2ab6:	08 95       	ret

00002ab8 <twi_start>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2ab8:	60 e4       	ldi	r22, 0x40	; 64
    2aba:	85 e0       	ldi	r24, 0x05	; 5
    2abc:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
#else
#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
    2ac0:	69 e2       	ldi	r22, 0x29	; 41
    2ac2:	70 e2       	ldi	r23, 0x20	; 32
    2ac4:	80 ea       	ldi	r24, 0xA0	; 160
    2ac6:	94 e0       	ldi	r25, 0x04	; 4
    2ac8:	0e 94 4a 22 	call	0x4494	; 0x4494 <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    2acc:	e0 ea       	ldi	r30, 0xA0	; 160
    2ace:	f4 e0       	ldi	r31, 0x04	; 4
    2ad0:	81 81       	ldd	r24, Z+1	; 0x01
    2ad2:	88 60       	ori	r24, 0x08	; 8
    2ad4:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2ad6:	60 e4       	ldi	r22, 0x40	; 64
    2ad8:	83 e0       	ldi	r24, 0x03	; 3
    2ada:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
#else
#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
    2ade:	65 e1       	ldi	r22, 0x15	; 21
    2ae0:	70 e2       	ldi	r23, 0x20	; 32
    2ae2:	80 e8       	ldi	r24, 0x80	; 128
    2ae4:	94 e0       	ldi	r25, 0x04	; 4
    2ae6:	0e 94 4a 22 	call	0x4494	; 0x4494 <twi_master_init>
    2aea:	e0 e8       	ldi	r30, 0x80	; 128
    2aec:	f4 e0       	ldi	r31, 0x04	; 4
    2aee:	81 81       	ldd	r24, Z+1	; 0x01
    2af0:	88 60       	ori	r24, 0x08	; 8
	twi_master_enable(&TWI2_MASTER);
#endif
#endif

	/* Start each TWI channel devices */
	start_twi_onboard();
    2af2:	81 83       	std	Z+1, r24	; 0x01

	delay_ms(250);											// Give Smart-LCD some time being up and ready
    2af4:	53 de       	rcall	.-858    	; 0x279c <start_twi_onboard>
    2af6:	61 ed       	ldi	r22, 0xD1	; 209
    2af8:	72 e1       	ldi	r23, 0x12	; 18
    2afa:	83 e1       	ldi	r24, 0x13	; 19
	start_twi_lcd();
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	f0 dd       	rcall	.-1056   	; 0x26e0 <__portable_avr_delay_cycles>
    2b00:	89 cf       	rjmp	.-238    	; 0x2a14 <start_twi_lcd>
    2b02:	08 95       	ret

00002b04 <task_twi_onboard>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void task_twi_onboard(uint32_t now)
{
    2b04:	08 95       	ret

00002b06 <task_twi_lcd>:

}

/* TWI2 - LCD Port */
void task_twi_lcd(uint32_t now)
{
    2b06:	df 92       	push	r13
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
	if (g_twi2_lcd_version >= 0x11) {
    2b14:	80 91 66 26 	lds	r24, 0x2666	; 0x802666 <g_twi2_lcd_version>
    2b18:	81 31       	cpi	r24, 0x11	; 17
    2b1a:	08 f4       	brcc	.+2      	; 0x2b1e <task_twi_lcd+0x18>
		static uint8_t ofs = 0;

		twi2_waitUntilReady();
    2b1c:	b2 c0       	rjmp	.+356    	; 0x2c82 <task_twi_lcd+0x17c>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2b1e:	eb dd       	rcall	.-1066   	; 0x26f6 <twi2_waitUntilReady>
    2b20:	0a e0       	ldi	r16, 0x0A	; 10
    2b22:	10 e2       	ldi	r17, 0x20	; 32
    2b24:	68 94       	set
    2b26:	dd 24       	eor	r13, r13
    2b28:	d5 f8       	bld	r13, 5
    2b2a:	f8 01       	movw	r30, r16
		twi2_m_data[0] = 16 + ofs;
    2b2c:	d1 82       	std	Z+1, r13	; 0x01
    2b2e:	80 91 4e 23 	lds	r24, 0x234E	; 0x80234e <__data_end>
    2b32:	80 5f       	subi	r24, 0xF0	; 240
    2b34:	c3 e0       	ldi	r28, 0x03	; 3
    2b36:	d6 e2       	ldi	r29, 0x26	; 38
		twi2_m_data[1] = 16 + ofs;
    2b38:	88 83       	st	Y, r24
		twi2_packet.length = 2;
    2b3a:	89 83       	std	Y+1, r24	; 0x01
    2b3c:	68 94       	set
    2b3e:	ee 24       	eor	r14, r14
    2b40:	e1 f8       	bld	r14, 1
    2b42:	f1 2c       	mov	r15, r1
    2b44:	e0 86       	std	Z+8, r14	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2b46:	f1 86       	std	Z+9, r15	; 0x09
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	b8 01       	movw	r22, r16
    2b4c:	80 e8       	ldi	r24, 0x80	; 128
    2b4e:	94 e0       	ldi	r25, 0x04	; 4
    2b50:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2b54:	65 e0       	ldi	r22, 0x05	; 5
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	80 e0       	ldi	r24, 0x00	; 0

#if 1
		twi2_waitUntilReady();
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	c1 dd       	rcall	.-1150   	; 0x26e0 <__portable_avr_delay_cycles>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
    2b5e:	cb dd       	rcall	.-1130   	; 0x26f6 <twi2_waitUntilReady>
    2b60:	82 e3       	ldi	r24, 0x32	; 50
    2b62:	f8 01       	movw	r30, r16
		twi2_m_data[0] = 150 + ofs;
    2b64:	81 83       	std	Z+1, r24	; 0x01
    2b66:	80 91 4e 23 	lds	r24, 0x234E	; 0x80234e <__data_end>
    2b6a:	96 e9       	ldi	r25, 0x96	; 150
    2b6c:	98 0f       	add	r25, r24
		twi2_m_data[1] =  60 + ofs;
    2b6e:	98 83       	st	Y, r25
    2b70:	84 5c       	subi	r24, 0xC4	; 196
		twi2_packet.length = 2;
    2b72:	89 83       	std	Y+1, r24	; 0x01
    2b74:	e0 86       	std	Z+8, r14	; 0x08
    2b76:	f1 86       	std	Z+9, r15	; 0x09
    2b78:	40 e0       	ldi	r20, 0x00	; 0
    2b7a:	b8 01       	movw	r22, r16
    2b7c:	80 e8       	ldi	r24, 0x80	; 128
    2b7e:	94 e0       	ldi	r25, 0x04	; 4
    2b80:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2b84:	65 e0       	ldi	r22, 0x05	; 5
    2b86:	70 e0       	ldi	r23, 0x00	; 0
    2b88:	80 e0       	ldi	r24, 0x00	; 0
#endif

#if 1
		twi2_waitUntilReady();
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	a9 dd       	rcall	.-1198   	; 0x26e0 <__portable_avr_delay_cycles>
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_RECT;
    2b8e:	b3 dd       	rcall	.-1178   	; 0x26f6 <twi2_waitUntilReady>
    2b90:	84 e3       	ldi	r24, 0x34	; 52
    2b92:	f8 01       	movw	r30, r16
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_RECT;
# endif
		twi2_m_data[0] = 30;
    2b94:	81 83       	std	Z+1, r24	; 0x01
    2b96:	8e e1       	ldi	r24, 0x1E	; 30
		twi2_m_data[1] =  30;
    2b98:	88 83       	st	Y, r24
		twi2_packet.length = 2;
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	e0 86       	std	Z+8, r14	; 0x08
    2b9e:	f1 86       	std	Z+9, r15	; 0x09
    2ba0:	40 e0       	ldi	r20, 0x00	; 0
    2ba2:	b8 01       	movw	r22, r16
    2ba4:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2ba6:	94 e0       	ldi	r25, 0x04	; 4
    2ba8:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
    2bac:	65 e0       	ldi	r22, 0x05	; 5
    2bae:	70 e0       	ldi	r23, 0x00	; 0
#endif

#if 1
		twi2_waitUntilReady();
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_CIRC;
    2bb4:	95 dd       	rcall	.-1238   	; 0x26e0 <__portable_avr_delay_cycles>
    2bb6:	9f dd       	rcall	.-1218   	; 0x26f6 <twi2_waitUntilReady>
    2bb8:	88 e3       	ldi	r24, 0x38	; 56
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC;
# endif
		twi2_m_data[0] = 20;
    2bba:	f8 01       	movw	r30, r16
    2bbc:	81 83       	std	Z+1, r24	; 0x01
		twi2_packet.length = 1;
    2bbe:	84 e1       	ldi	r24, 0x14	; 20
    2bc0:	88 83       	st	Y, r24
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	80 87       	std	Z+8, r24	; 0x08
    2bc8:	91 87       	std	Z+9, r25	; 0x09
    2bca:	40 e0       	ldi	r20, 0x00	; 0
    2bcc:	b8 01       	movw	r22, r16
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2bce:	80 e8       	ldi	r24, 0x80	; 128
    2bd0:	94 e0       	ldi	r25, 0x04	; 4
    2bd2:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
    2bd6:	65 e0       	ldi	r22, 0x05	; 5
    2bd8:	70 e0       	ldi	r23, 0x00	; 0
#endif

#if 1
		twi2_waitUntilReady();
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2bde:	80 dd       	rcall	.-1280   	; 0x26e0 <__portable_avr_delay_cycles>
    2be0:	8a dd       	rcall	.-1260   	; 0x26f6 <twi2_waitUntilReady>
		twi2_m_data[0] = 116 + ofs;
    2be2:	f8 01       	movw	r30, r16
    2be4:	d1 82       	std	Z+1, r13	; 0x01
    2be6:	80 91 4e 23 	lds	r24, 0x234E	; 0x80234e <__data_end>
    2bea:	94 e7       	ldi	r25, 0x74	; 116
		twi2_m_data[1] =  16 + ofs;
    2bec:	98 0f       	add	r25, r24
    2bee:	98 83       	st	Y, r25
		twi2_packet.length = 2;
    2bf0:	80 5f       	subi	r24, 0xF0	; 240
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	e0 86       	std	Z+8, r14	; 0x08
    2bf6:	f1 86       	std	Z+9, r15	; 0x09
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	b8 01       	movw	r22, r16
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2bfc:	80 e8       	ldi	r24, 0x80	; 128
    2bfe:	94 e0       	ldi	r25, 0x04	; 4
    2c00:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
    2c04:	65 e0       	ldi	r22, 0x05	; 5
    2c06:	70 e0       	ldi	r23, 0x00	; 0

		twi2_waitUntilReady();
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    2c0c:	69 dd       	rcall	.-1326   	; 0x26e0 <__portable_avr_delay_cycles>
    2c0e:	73 dd       	rcall	.-1306   	; 0x26f6 <twi2_waitUntilReady>
    2c10:	80 e3       	ldi	r24, 0x30	; 48
		twi2_m_data[0] = 4;
    2c12:	f8 01       	movw	r30, r16
    2c14:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[1] = 'A';
    2c16:	84 e0       	ldi	r24, 0x04	; 4
    2c18:	88 83       	st	Y, r24
		twi2_m_data[2] = 'B';
    2c1a:	81 e4       	ldi	r24, 0x41	; 65
    2c1c:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[3] = 'C';
    2c1e:	82 e4       	ldi	r24, 0x42	; 66
    2c20:	8a 83       	std	Y+2, r24	; 0x02
		twi2_m_data[4] = 'D';
    2c22:	83 e4       	ldi	r24, 0x43	; 67
    2c24:	8b 83       	std	Y+3, r24	; 0x03
		twi2_packet.length = twi2_m_data[0] + 1;
    2c26:	84 e4       	ldi	r24, 0x44	; 68
    2c28:	8c 83       	std	Y+4, r24	; 0x04
    2c2a:	85 e0       	ldi	r24, 0x05	; 5
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	80 87       	std	Z+8, r24	; 0x08
    2c30:	91 87       	std	Z+9, r25	; 0x09
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	b8 01       	movw	r22, r16
    2c36:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2c38:	94 e0       	ldi	r25, 0x04	; 4
    2c3a:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
    2c3e:	65 e0       	ldi	r22, 0x05	; 5
    2c40:	70 e0       	ldi	r23, 0x00	; 0
#endif

		if (++ofs > 64) {
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	4c dd       	rcall	.-1384   	; 0x26e0 <__portable_avr_delay_cycles>
    2c48:	80 91 4e 23 	lds	r24, 0x234E	; 0x80234e <__data_end>
    2c4c:	8f 5f       	subi	r24, 0xFF	; 255
    2c4e:	81 34       	cpi	r24, 0x41	; 65
    2c50:	18 f4       	brcc	.+6      	; 0x2c58 <task_twi_lcd+0x152>
			ofs = 0;
    2c52:	80 93 4e 23 	sts	0x234E, r24	; 0x80234e <__data_end>

			twi2_waitUntilReady();
    2c56:	32 c0       	rjmp	.+100    	; 0x2cbc <task_twi_lcd+0x1b6>
    2c58:	10 92 4e 23 	sts	0x234E, r1	; 0x80234e <__data_end>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
    2c5c:	4c dd       	rcall	.-1384   	; 0x26f6 <twi2_waitUntilReady>
    2c5e:	ea e0       	ldi	r30, 0x0A	; 10
			twi2_packet.length = 0;
    2c60:	f0 e2       	ldi	r31, 0x20	; 32
    2c62:	80 e1       	ldi	r24, 0x10	; 16
    2c64:	81 83       	std	Z+1, r24	; 0x01
    2c66:	10 86       	std	Z+8, r1	; 0x08
    2c68:	11 86       	std	Z+9, r1	; 0x09
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	bf 01       	movw	r22, r30
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2c6e:	80 e8       	ldi	r24, 0x80	; 128
    2c70:	94 e0       	ldi	r25, 0x04	; 4
    2c72:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
    2c76:	65 e0       	ldi	r22, 0x05	; 5
    2c78:	70 e0       	ldi	r23, 0x00	; 0
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
		}

	} else if (g_twi2_lcd_version == 0x10) {
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	30 dd       	rcall	.-1440   	; 0x26e0 <__portable_avr_delay_cycles>
#if 1
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi2_waitUntilReady();
    2c80:	1d c0       	rjmp	.+58     	; 0x2cbc <task_twi_lcd+0x1b6>
    2c82:	80 31       	cpi	r24, 0x10	; 16
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
    2c84:	d9 f4       	brne	.+54     	; 0x2cbc <task_twi_lcd+0x1b6>
    2c86:	37 dd       	rcall	.-1426   	; 0x26f6 <twi2_waitUntilReady>
    2c88:	ea e0       	ldi	r30, 0x0A	; 10
    2c8a:	f0 e2       	ldi	r31, 0x20	; 32
		twi2_m_data[0] = 1;
    2c8c:	84 e8       	ldi	r24, 0x84	; 132
    2c8e:	81 83       	std	Z+1, r24	; 0x01
    2c90:	a3 e0       	ldi	r26, 0x03	; 3
    2c92:	b6 e2       	ldi	r27, 0x26	; 38
		twi2_m_data[1] = 128;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	8c 93       	st	X, r24
		twi2_packet.length = 2;
    2c98:	80 e8       	ldi	r24, 0x80	; 128
    2c9a:	11 96       	adiw	r26, 0x01	; 1
    2c9c:	8c 93       	st	X, r24
    2c9e:	82 e0       	ldi	r24, 0x02	; 2
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	80 87       	std	Z+8, r24	; 0x08
    2ca4:	91 87       	std	Z+9, r25	; 0x09
    2ca6:	40 e0       	ldi	r20, 0x00	; 0
    2ca8:	bf 01       	movw	r22, r30
    2caa:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
    2cac:	94 e0       	ldi	r25, 0x04	; 4
    2cae:	0e 94 5f 22 	call	0x44be	; 0x44be <twi_master_transfer>
    2cb2:	69 e8       	ldi	r22, 0x89	; 137
    2cb4:	73 e1       	ldi	r23, 0x13	; 19
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
#endif
	}
}
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	12 dd       	rcall	.-1500   	; 0x26e0 <__portable_avr_delay_cycles>
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	ff 90       	pop	r15
    2cc6:	ef 90       	pop	r14
    2cc8:	df 90       	pop	r13
    2cca:	08 95       	ret

00002ccc <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    2ccc:	08 95       	ret

00002cce <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    2cce:	cf 93       	push	r28
    2cd0:	df 93       	push	r29
    2cd2:	1f 92       	push	r1
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2cd8:	2f b7       	in	r18, 0x3f	; 63
    2cda:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2cdc:	f8 94       	cli
	return flags;
    2cde:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	39 2f       	mov	r19, r25
    2ce4:	21 15       	cp	r18, r1
    2ce6:	82 e0       	ldi	r24, 0x02	; 2
    2ce8:	38 07       	cpc	r19, r24
    2cea:	29 f4       	brne	.+10     	; 0x2cf6 <adc_set_callback+0x28>
		adca_callback = callback;
    2cec:	60 93 b1 27 	sts	0x27B1, r22	; 0x8027b1 <adca_callback>
    2cf0:	70 93 b2 27 	sts	0x27B2, r23	; 0x8027b2 <adca_callback+0x1>
    2cf4:	07 c0       	rjmp	.+14     	; 0x2d04 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    2cf6:	20 34       	cpi	r18, 0x40	; 64
    2cf8:	32 40       	sbci	r19, 0x02	; 2
    2cfa:	21 f4       	brne	.+8      	; 0x2d04 <adc_set_callback+0x36>
		adcb_callback = callback;
    2cfc:	60 93 af 27 	sts	0x27AF, r22	; 0x8027af <adcb_callback>
    2d00:	70 93 b0 27 	sts	0x27B0, r23	; 0x8027b0 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d04:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    2d06:	0f 90       	pop	r0
    2d08:	df 91       	pop	r29
    2d0a:	cf 91       	pop	r28
    2d0c:	08 95       	ret

00002d0e <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2d0e:	81 15       	cp	r24, r1
    2d10:	22 e0       	ldi	r18, 0x02	; 2
    2d12:	92 07       	cpc	r25, r18
    2d14:	69 f4       	brne	.+26     	; 0x2d30 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    2d16:	80 91 50 23 	lds	r24, 0x2350	; 0x802350 <adca_enable_count>
    2d1a:	91 e0       	ldi	r25, 0x01	; 1
    2d1c:	98 0f       	add	r25, r24
    2d1e:	90 93 50 23 	sts	0x2350, r25	; 0x802350 <adca_enable_count>
    2d22:	81 11       	cpse	r24, r1
    2d24:	14 c0       	rjmp	.+40     	; 0x2d4e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2d26:	62 e0       	ldi	r22, 0x02	; 2
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	0c 94 13 33 	jmp	0x6626	; 0x6626 <sysclk_enable_module>
    2d2e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    2d30:	80 34       	cpi	r24, 0x40	; 64
    2d32:	92 40       	sbci	r25, 0x02	; 2
    2d34:	61 f4       	brne	.+24     	; 0x2d4e <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    2d36:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <adcb_enable_count>
    2d3a:	91 e0       	ldi	r25, 0x01	; 1
    2d3c:	98 0f       	add	r25, r24
    2d3e:	90 93 4f 23 	sts	0x234F, r25	; 0x80234f <adcb_enable_count>
    2d42:	81 11       	cpse	r24, r1
    2d44:	04 c0       	rjmp	.+8      	; 0x2d4e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2d46:	62 e0       	ldi	r22, 0x02	; 2
    2d48:	82 e0       	ldi	r24, 0x02	; 2
    2d4a:	0c 94 13 33 	jmp	0x6626	; 0x6626 <sysclk_enable_module>
    2d4e:	08 95       	ret

00002d50 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2d50:	81 15       	cp	r24, r1
    2d52:	22 e0       	ldi	r18, 0x02	; 2
    2d54:	92 07       	cpc	r25, r18
    2d56:	61 f4       	brne	.+24     	; 0x2d70 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    2d58:	80 91 50 23 	lds	r24, 0x2350	; 0x802350 <adca_enable_count>
    2d5c:	81 50       	subi	r24, 0x01	; 1
    2d5e:	80 93 50 23 	sts	0x2350, r24	; 0x802350 <adca_enable_count>
    2d62:	81 11       	cpse	r24, r1
    2d64:	13 c0       	rjmp	.+38     	; 0x2d8c <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2d66:	62 e0       	ldi	r22, 0x02	; 2
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	0c 94 29 33 	jmp	0x6652	; 0x6652 <sysclk_disable_module>
    2d6e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    2d70:	80 34       	cpi	r24, 0x40	; 64
    2d72:	92 40       	sbci	r25, 0x02	; 2
    2d74:	59 f4       	brne	.+22     	; 0x2d8c <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    2d76:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <adcb_enable_count>
    2d7a:	81 50       	subi	r24, 0x01	; 1
    2d7c:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <adcb_enable_count>
    2d80:	81 11       	cpse	r24, r1
    2d82:	04 c0       	rjmp	.+8      	; 0x2d8c <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2d84:	62 e0       	ldi	r22, 0x02	; 2
    2d86:	82 e0       	ldi	r24, 0x02	; 2
    2d88:	0c 94 29 33 	jmp	0x6652	; 0x6652 <sysclk_disable_module>
    2d8c:	08 95       	ret

00002d8e <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    2d8e:	ef 92       	push	r14
    2d90:	ff 92       	push	r15
    2d92:	1f 93       	push	r17
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	1f 92       	push	r1
    2d9a:	1f 92       	push	r1
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2da2:	8f b7       	in	r24, 0x3f	; 63
    2da4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2da6:	f8 94       	cli
	return flags;
    2da8:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    2daa:	c7 01       	movw	r24, r14
    2dac:	b0 df       	rcall	.-160    	; 0x2d0e <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    2dae:	f7 01       	movw	r30, r14
    2db0:	80 81       	ld	r24, Z
    2db2:	81 60       	ori	r24, 0x01	; 1
    2db4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2db6:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2db8:	80 91 c4 27 	lds	r24, 0x27C4	; 0x8027c4 <sleepmgr_locks+0x1>
    2dbc:	8f 3f       	cpi	r24, 0xFF	; 255
    2dbe:	09 f4       	brne	.+2      	; 0x2dc2 <adc_enable+0x34>
    2dc0:	ff cf       	rjmp	.-2      	; 0x2dc0 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2dc2:	8f b7       	in	r24, 0x3f	; 63
    2dc4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2dc6:	f8 94       	cli
	return flags;
    2dc8:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2dca:	e3 ec       	ldi	r30, 0xC3	; 195
    2dcc:	f7 e2       	ldi	r31, 0x27	; 39
    2dce:	81 81       	ldd	r24, Z+1	; 0x01
    2dd0:	8f 5f       	subi	r24, 0xFF	; 255
    2dd2:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2dd4:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	df 91       	pop	r29
    2ddc:	cf 91       	pop	r28
    2dde:	1f 91       	pop	r17
    2de0:	ff 90       	pop	r15
    2de2:	ef 90       	pop	r14
    2de4:	08 95       	ret

00002de6 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2de6:	1f 92       	push	r1
    2de8:	0f 92       	push	r0
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	0f 92       	push	r0
    2dee:	11 24       	eor	r1, r1
    2df0:	0b b6       	in	r0, 0x3b	; 59
    2df2:	0f 92       	push	r0
    2df4:	2f 93       	push	r18
    2df6:	3f 93       	push	r19
    2df8:	4f 93       	push	r20
    2dfa:	5f 93       	push	r21
    2dfc:	6f 93       	push	r22
    2dfe:	7f 93       	push	r23
    2e00:	8f 93       	push	r24
    2e02:	9f 93       	push	r25
    2e04:	af 93       	push	r26
    2e06:	bf 93       	push	r27
    2e08:	ef 93       	push	r30
    2e0a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    2e0c:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    2e10:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    2e14:	e0 91 b1 27 	lds	r30, 0x27B1	; 0x8027b1 <adca_callback>
    2e18:	f0 91 b2 27 	lds	r31, 0x27B2	; 0x8027b2 <adca_callback+0x1>
    2e1c:	61 e0       	ldi	r22, 0x01	; 1
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	92 e0       	ldi	r25, 0x02	; 2
    2e22:	19 95       	eicall
}
    2e24:	ff 91       	pop	r31
    2e26:	ef 91       	pop	r30
    2e28:	bf 91       	pop	r27
    2e2a:	af 91       	pop	r26
    2e2c:	9f 91       	pop	r25
    2e2e:	8f 91       	pop	r24
    2e30:	7f 91       	pop	r23
    2e32:	6f 91       	pop	r22
    2e34:	5f 91       	pop	r21
    2e36:	4f 91       	pop	r20
    2e38:	3f 91       	pop	r19
    2e3a:	2f 91       	pop	r18
    2e3c:	0f 90       	pop	r0
    2e3e:	0b be       	out	0x3b, r0	; 59
    2e40:	0f 90       	pop	r0
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	0f 90       	pop	r0
    2e46:	1f 90       	pop	r1
    2e48:	18 95       	reti

00002e4a <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    2e4a:	1f 92       	push	r1
    2e4c:	0f 92       	push	r0
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	0f 92       	push	r0
    2e52:	11 24       	eor	r1, r1
    2e54:	0b b6       	in	r0, 0x3b	; 59
    2e56:	0f 92       	push	r0
    2e58:	2f 93       	push	r18
    2e5a:	3f 93       	push	r19
    2e5c:	4f 93       	push	r20
    2e5e:	5f 93       	push	r21
    2e60:	6f 93       	push	r22
    2e62:	7f 93       	push	r23
    2e64:	8f 93       	push	r24
    2e66:	9f 93       	push	r25
    2e68:	af 93       	push	r26
    2e6a:	bf 93       	push	r27
    2e6c:	ef 93       	push	r30
    2e6e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    2e70:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    2e74:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    2e78:	e0 91 b1 27 	lds	r30, 0x27B1	; 0x8027b1 <adca_callback>
    2e7c:	f0 91 b2 27 	lds	r31, 0x27B2	; 0x8027b2 <adca_callback+0x1>
    2e80:	62 e0       	ldi	r22, 0x02	; 2
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	92 e0       	ldi	r25, 0x02	; 2
    2e86:	19 95       	eicall
}
    2e88:	ff 91       	pop	r31
    2e8a:	ef 91       	pop	r30
    2e8c:	bf 91       	pop	r27
    2e8e:	af 91       	pop	r26
    2e90:	9f 91       	pop	r25
    2e92:	8f 91       	pop	r24
    2e94:	7f 91       	pop	r23
    2e96:	6f 91       	pop	r22
    2e98:	5f 91       	pop	r21
    2e9a:	4f 91       	pop	r20
    2e9c:	3f 91       	pop	r19
    2e9e:	2f 91       	pop	r18
    2ea0:	0f 90       	pop	r0
    2ea2:	0b be       	out	0x3b, r0	; 59
    2ea4:	0f 90       	pop	r0
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	0f 90       	pop	r0
    2eaa:	1f 90       	pop	r1
    2eac:	18 95       	reti

00002eae <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    2eae:	1f 92       	push	r1
    2eb0:	0f 92       	push	r0
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	0f 92       	push	r0
    2eb6:	11 24       	eor	r1, r1
    2eb8:	0b b6       	in	r0, 0x3b	; 59
    2eba:	0f 92       	push	r0
    2ebc:	2f 93       	push	r18
    2ebe:	3f 93       	push	r19
    2ec0:	4f 93       	push	r20
    2ec2:	5f 93       	push	r21
    2ec4:	6f 93       	push	r22
    2ec6:	7f 93       	push	r23
    2ec8:	8f 93       	push	r24
    2eca:	9f 93       	push	r25
    2ecc:	af 93       	push	r26
    2ece:	bf 93       	push	r27
    2ed0:	ef 93       	push	r30
    2ed2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    2ed4:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    2ed8:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    2edc:	e0 91 b1 27 	lds	r30, 0x27B1	; 0x8027b1 <adca_callback>
    2ee0:	f0 91 b2 27 	lds	r31, 0x27B2	; 0x8027b2 <adca_callback+0x1>
    2ee4:	64 e0       	ldi	r22, 0x04	; 4
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	92 e0       	ldi	r25, 0x02	; 2
    2eea:	19 95       	eicall
}
    2eec:	ff 91       	pop	r31
    2eee:	ef 91       	pop	r30
    2ef0:	bf 91       	pop	r27
    2ef2:	af 91       	pop	r26
    2ef4:	9f 91       	pop	r25
    2ef6:	8f 91       	pop	r24
    2ef8:	7f 91       	pop	r23
    2efa:	6f 91       	pop	r22
    2efc:	5f 91       	pop	r21
    2efe:	4f 91       	pop	r20
    2f00:	3f 91       	pop	r19
    2f02:	2f 91       	pop	r18
    2f04:	0f 90       	pop	r0
    2f06:	0b be       	out	0x3b, r0	; 59
    2f08:	0f 90       	pop	r0
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	0f 90       	pop	r0
    2f0e:	1f 90       	pop	r1
    2f10:	18 95       	reti

00002f12 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    2f12:	1f 92       	push	r1
    2f14:	0f 92       	push	r0
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	0f 92       	push	r0
    2f1a:	11 24       	eor	r1, r1
    2f1c:	0b b6       	in	r0, 0x3b	; 59
    2f1e:	0f 92       	push	r0
    2f20:	2f 93       	push	r18
    2f22:	3f 93       	push	r19
    2f24:	4f 93       	push	r20
    2f26:	5f 93       	push	r21
    2f28:	6f 93       	push	r22
    2f2a:	7f 93       	push	r23
    2f2c:	8f 93       	push	r24
    2f2e:	9f 93       	push	r25
    2f30:	af 93       	push	r26
    2f32:	bf 93       	push	r27
    2f34:	ef 93       	push	r30
    2f36:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    2f38:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    2f3c:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    2f40:	e0 91 b1 27 	lds	r30, 0x27B1	; 0x8027b1 <adca_callback>
    2f44:	f0 91 b2 27 	lds	r31, 0x27B2	; 0x8027b2 <adca_callback+0x1>
    2f48:	68 e0       	ldi	r22, 0x08	; 8
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	92 e0       	ldi	r25, 0x02	; 2
    2f4e:	19 95       	eicall
}
    2f50:	ff 91       	pop	r31
    2f52:	ef 91       	pop	r30
    2f54:	bf 91       	pop	r27
    2f56:	af 91       	pop	r26
    2f58:	9f 91       	pop	r25
    2f5a:	8f 91       	pop	r24
    2f5c:	7f 91       	pop	r23
    2f5e:	6f 91       	pop	r22
    2f60:	5f 91       	pop	r21
    2f62:	4f 91       	pop	r20
    2f64:	3f 91       	pop	r19
    2f66:	2f 91       	pop	r18
    2f68:	0f 90       	pop	r0
    2f6a:	0b be       	out	0x3b, r0	; 59
    2f6c:	0f 90       	pop	r0
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	0f 90       	pop	r0
    2f72:	1f 90       	pop	r1
    2f74:	18 95       	reti

00002f76 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    2f76:	1f 92       	push	r1
    2f78:	0f 92       	push	r0
    2f7a:	0f b6       	in	r0, 0x3f	; 63
    2f7c:	0f 92       	push	r0
    2f7e:	11 24       	eor	r1, r1
    2f80:	0b b6       	in	r0, 0x3b	; 59
    2f82:	0f 92       	push	r0
    2f84:	2f 93       	push	r18
    2f86:	3f 93       	push	r19
    2f88:	4f 93       	push	r20
    2f8a:	5f 93       	push	r21
    2f8c:	6f 93       	push	r22
    2f8e:	7f 93       	push	r23
    2f90:	8f 93       	push	r24
    2f92:	9f 93       	push	r25
    2f94:	af 93       	push	r26
    2f96:	bf 93       	push	r27
    2f98:	ef 93       	push	r30
    2f9a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    2f9c:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    2fa0:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    2fa4:	e0 91 af 27 	lds	r30, 0x27AF	; 0x8027af <adcb_callback>
    2fa8:	f0 91 b0 27 	lds	r31, 0x27B0	; 0x8027b0 <adcb_callback+0x1>
    2fac:	61 e0       	ldi	r22, 0x01	; 1
    2fae:	80 e4       	ldi	r24, 0x40	; 64
    2fb0:	92 e0       	ldi	r25, 0x02	; 2
    2fb2:	19 95       	eicall
}
    2fb4:	ff 91       	pop	r31
    2fb6:	ef 91       	pop	r30
    2fb8:	bf 91       	pop	r27
    2fba:	af 91       	pop	r26
    2fbc:	9f 91       	pop	r25
    2fbe:	8f 91       	pop	r24
    2fc0:	7f 91       	pop	r23
    2fc2:	6f 91       	pop	r22
    2fc4:	5f 91       	pop	r21
    2fc6:	4f 91       	pop	r20
    2fc8:	3f 91       	pop	r19
    2fca:	2f 91       	pop	r18
    2fcc:	0f 90       	pop	r0
    2fce:	0b be       	out	0x3b, r0	; 59
    2fd0:	0f 90       	pop	r0
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	0f 90       	pop	r0
    2fd6:	1f 90       	pop	r1
    2fd8:	18 95       	reti

00002fda <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    2fda:	1f 92       	push	r1
    2fdc:	0f 92       	push	r0
    2fde:	0f b6       	in	r0, 0x3f	; 63
    2fe0:	0f 92       	push	r0
    2fe2:	11 24       	eor	r1, r1
    2fe4:	0b b6       	in	r0, 0x3b	; 59
    2fe6:	0f 92       	push	r0
    2fe8:	2f 93       	push	r18
    2fea:	3f 93       	push	r19
    2fec:	4f 93       	push	r20
    2fee:	5f 93       	push	r21
    2ff0:	6f 93       	push	r22
    2ff2:	7f 93       	push	r23
    2ff4:	8f 93       	push	r24
    2ff6:	9f 93       	push	r25
    2ff8:	af 93       	push	r26
    2ffa:	bf 93       	push	r27
    2ffc:	ef 93       	push	r30
    2ffe:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    3000:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    3004:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    3008:	e0 91 af 27 	lds	r30, 0x27AF	; 0x8027af <adcb_callback>
    300c:	f0 91 b0 27 	lds	r31, 0x27B0	; 0x8027b0 <adcb_callback+0x1>
    3010:	62 e0       	ldi	r22, 0x02	; 2
    3012:	80 e4       	ldi	r24, 0x40	; 64
    3014:	92 e0       	ldi	r25, 0x02	; 2
    3016:	19 95       	eicall
}
    3018:	ff 91       	pop	r31
    301a:	ef 91       	pop	r30
    301c:	bf 91       	pop	r27
    301e:	af 91       	pop	r26
    3020:	9f 91       	pop	r25
    3022:	8f 91       	pop	r24
    3024:	7f 91       	pop	r23
    3026:	6f 91       	pop	r22
    3028:	5f 91       	pop	r21
    302a:	4f 91       	pop	r20
    302c:	3f 91       	pop	r19
    302e:	2f 91       	pop	r18
    3030:	0f 90       	pop	r0
    3032:	0b be       	out	0x3b, r0	; 59
    3034:	0f 90       	pop	r0
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	0f 90       	pop	r0
    303a:	1f 90       	pop	r1
    303c:	18 95       	reti

0000303e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    303e:	1f 92       	push	r1
    3040:	0f 92       	push	r0
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	0f 92       	push	r0
    3046:	11 24       	eor	r1, r1
    3048:	0b b6       	in	r0, 0x3b	; 59
    304a:	0f 92       	push	r0
    304c:	2f 93       	push	r18
    304e:	3f 93       	push	r19
    3050:	4f 93       	push	r20
    3052:	5f 93       	push	r21
    3054:	6f 93       	push	r22
    3056:	7f 93       	push	r23
    3058:	8f 93       	push	r24
    305a:	9f 93       	push	r25
    305c:	af 93       	push	r26
    305e:	bf 93       	push	r27
    3060:	ef 93       	push	r30
    3062:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    3064:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    3068:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    306c:	e0 91 af 27 	lds	r30, 0x27AF	; 0x8027af <adcb_callback>
    3070:	f0 91 b0 27 	lds	r31, 0x27B0	; 0x8027b0 <adcb_callback+0x1>
    3074:	64 e0       	ldi	r22, 0x04	; 4
    3076:	80 e4       	ldi	r24, 0x40	; 64
    3078:	92 e0       	ldi	r25, 0x02	; 2
    307a:	19 95       	eicall
}
    307c:	ff 91       	pop	r31
    307e:	ef 91       	pop	r30
    3080:	bf 91       	pop	r27
    3082:	af 91       	pop	r26
    3084:	9f 91       	pop	r25
    3086:	8f 91       	pop	r24
    3088:	7f 91       	pop	r23
    308a:	6f 91       	pop	r22
    308c:	5f 91       	pop	r21
    308e:	4f 91       	pop	r20
    3090:	3f 91       	pop	r19
    3092:	2f 91       	pop	r18
    3094:	0f 90       	pop	r0
    3096:	0b be       	out	0x3b, r0	; 59
    3098:	0f 90       	pop	r0
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	0f 90       	pop	r0
    309e:	1f 90       	pop	r1
    30a0:	18 95       	reti

000030a2 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    30a2:	1f 92       	push	r1
    30a4:	0f 92       	push	r0
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	0f 92       	push	r0
    30aa:	11 24       	eor	r1, r1
    30ac:	0b b6       	in	r0, 0x3b	; 59
    30ae:	0f 92       	push	r0
    30b0:	2f 93       	push	r18
    30b2:	3f 93       	push	r19
    30b4:	4f 93       	push	r20
    30b6:	5f 93       	push	r21
    30b8:	6f 93       	push	r22
    30ba:	7f 93       	push	r23
    30bc:	8f 93       	push	r24
    30be:	9f 93       	push	r25
    30c0:	af 93       	push	r26
    30c2:	bf 93       	push	r27
    30c4:	ef 93       	push	r30
    30c6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    30c8:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    30cc:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    30d0:	e0 91 af 27 	lds	r30, 0x27AF	; 0x8027af <adcb_callback>
    30d4:	f0 91 b0 27 	lds	r31, 0x27B0	; 0x8027b0 <adcb_callback+0x1>
    30d8:	68 e0       	ldi	r22, 0x08	; 8
    30da:	80 e4       	ldi	r24, 0x40	; 64
    30dc:	92 e0       	ldi	r25, 0x02	; 2
    30de:	19 95       	eicall
}
    30e0:	ff 91       	pop	r31
    30e2:	ef 91       	pop	r30
    30e4:	bf 91       	pop	r27
    30e6:	af 91       	pop	r26
    30e8:	9f 91       	pop	r25
    30ea:	8f 91       	pop	r24
    30ec:	7f 91       	pop	r23
    30ee:	6f 91       	pop	r22
    30f0:	5f 91       	pop	r21
    30f2:	4f 91       	pop	r20
    30f4:	3f 91       	pop	r19
    30f6:	2f 91       	pop	r18
    30f8:	0f 90       	pop	r0
    30fa:	0b be       	out	0x3b, r0	; 59
    30fc:	0f 90       	pop	r0
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	0f 90       	pop	r0
    3102:	1f 90       	pop	r1
    3104:	18 95       	reti

00003106 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    3106:	bf 92       	push	r11
    3108:	cf 92       	push	r12
    310a:	df 92       	push	r13
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	1f 92       	push	r1
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
    311e:	8c 01       	movw	r16, r24
    3120:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    3122:	81 15       	cp	r24, r1
    3124:	22 e0       	ldi	r18, 0x02	; 2
    3126:	92 07       	cpc	r25, r18
    3128:	81 f4       	brne	.+32     	; 0x314a <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    312a:	61 e2       	ldi	r22, 0x21	; 33
    312c:	70 e0       	ldi	r23, 0x00	; 0
    312e:	82 e0       	ldi	r24, 0x02	; 2
    3130:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    3134:	c8 2e       	mov	r12, r24
    3136:	d1 2c       	mov	r13, r1
    3138:	60 e2       	ldi	r22, 0x20	; 32
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	82 e0       	ldi	r24, 0x02	; 2
    313e:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    3142:	dc 2c       	mov	r13, r12
    3144:	cc 24       	eor	r12, r12
    3146:	c8 2a       	or	r12, r24
    3148:	12 c0       	rjmp	.+36     	; 0x316e <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    314a:	80 34       	cpi	r24, 0x40	; 64
    314c:	92 40       	sbci	r25, 0x02	; 2
    314e:	d1 f5       	brne	.+116    	; 0x31c4 <adc_write_configuration+0xbe>
    3150:	65 e2       	ldi	r22, 0x25	; 37
    3152:	70 e0       	ldi	r23, 0x00	; 0
    3154:	82 e0       	ldi	r24, 0x02	; 2
    3156:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    315a:	c8 2e       	mov	r12, r24
    315c:	d1 2c       	mov	r13, r1
    315e:	64 e2       	ldi	r22, 0x24	; 36
    3160:	70 e0       	ldi	r23, 0x00	; 0
    3162:	82 e0       	ldi	r24, 0x02	; 2
    3164:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    3168:	dc 2c       	mov	r13, r12
    316a:	cc 24       	eor	r12, r12
    316c:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    316e:	8f b7       	in	r24, 0x3f	; 63
    3170:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3172:	f8 94       	cli
	return flags;
    3174:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    3176:	c8 01       	movw	r24, r16
    3178:	ca dd       	rcall	.-1132   	; 0x2d0e <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    317a:	f8 01       	movw	r30, r16
    317c:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    317e:	92 e0       	ldi	r25, 0x02	; 2
    3180:	90 83       	st	Z, r25
	adc->CAL = cal;
    3182:	c4 86       	std	Z+12, r12	; 0x0c
    3184:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    3186:	f7 01       	movw	r30, r14
    3188:	25 81       	ldd	r18, Z+5	; 0x05
    318a:	36 81       	ldd	r19, Z+6	; 0x06
    318c:	f8 01       	movw	r30, r16
    318e:	20 8f       	std	Z+24, r18	; 0x18
    3190:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    3192:	f7 01       	movw	r30, r14
    3194:	92 81       	ldd	r25, Z+2	; 0x02
    3196:	f8 01       	movw	r30, r16
    3198:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    319a:	f7 01       	movw	r30, r14
    319c:	94 81       	ldd	r25, Z+4	; 0x04
    319e:	f8 01       	movw	r30, r16
    31a0:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    31a2:	f7 01       	movw	r30, r14
    31a4:	93 81       	ldd	r25, Z+3	; 0x03
    31a6:	f8 01       	movw	r30, r16
    31a8:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    31aa:	f7 01       	movw	r30, r14
    31ac:	91 81       	ldd	r25, Z+1	; 0x01
    31ae:	f8 01       	movw	r30, r16
    31b0:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    31b2:	81 70       	andi	r24, 0x01	; 1
    31b4:	f7 01       	movw	r30, r14
    31b6:	90 81       	ld	r25, Z
    31b8:	89 2b       	or	r24, r25
    31ba:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    31bc:	80 83       	st	Z, r24
    31be:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    31c0:	c7 dd       	rcall	.-1138   	; 0x2d50 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    31c2:	bf be       	out	0x3f, r11	; 63
    31c4:	0f 90       	pop	r0
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	ff 90       	pop	r15
    31d0:	ef 90       	pop	r14
    31d2:	df 90       	pop	r13
    31d4:	cf 90       	pop	r12
    31d6:	bf 90       	pop	r11
    31d8:	08 95       	ret

000031da <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    31da:	df 92       	push	r13
    31dc:	ef 92       	push	r14
    31de:	ff 92       	push	r15
    31e0:	0f 93       	push	r16
    31e2:	1f 93       	push	r17
    31e4:	cf 93       	push	r28
    31e6:	df 93       	push	r29
    31e8:	1f 92       	push	r1
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	8c 01       	movw	r16, r24
    31f0:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    31f2:	8f b7       	in	r24, 0x3f	; 63
    31f4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    31f6:	f8 94       	cli
	return flags;
    31f8:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    31fa:	c8 01       	movw	r24, r16
    31fc:	88 dd       	rcall	.-1264   	; 0x2d0e <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    31fe:	f8 01       	movw	r30, r16
    3200:	80 81       	ld	r24, Z
    3202:	80 7c       	andi	r24, 0xC0	; 192
    3204:	f7 01       	movw	r30, r14
    3206:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    3208:	f8 01       	movw	r30, r16
    320a:	80 8d       	ldd	r24, Z+24	; 0x18
    320c:	91 8d       	ldd	r25, Z+25	; 0x19
    320e:	f7 01       	movw	r30, r14
    3210:	85 83       	std	Z+5, r24	; 0x05
    3212:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    3214:	f8 01       	movw	r30, r16
    3216:	82 81       	ldd	r24, Z+2	; 0x02
    3218:	f7 01       	movw	r30, r14
    321a:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    321c:	f8 01       	movw	r30, r16
    321e:	84 81       	ldd	r24, Z+4	; 0x04
    3220:	f7 01       	movw	r30, r14
    3222:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    3224:	f8 01       	movw	r30, r16
    3226:	83 81       	ldd	r24, Z+3	; 0x03
    3228:	f7 01       	movw	r30, r14
    322a:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    322c:	f8 01       	movw	r30, r16
    322e:	81 81       	ldd	r24, Z+1	; 0x01
    3230:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    3232:	81 83       	std	Z+1, r24	; 0x01
    3234:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3236:	8c dd       	rcall	.-1256   	; 0x2d50 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    3238:	df be       	out	0x3f, r13	; 63
    323a:	0f 90       	pop	r0
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	1f 91       	pop	r17
    3242:	0f 91       	pop	r16
    3244:	ff 90       	pop	r15
    3246:	ef 90       	pop	r14
    3248:	df 90       	pop	r13
    324a:	08 95       	ret

0000324c <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    324c:	af 92       	push	r10
    324e:	bf 92       	push	r11
    3250:	cf 92       	push	r12
    3252:	df 92       	push	r13
    3254:	ef 92       	push	r14
    3256:	ff 92       	push	r15
    3258:	0f 93       	push	r16
    325a:	1f 93       	push	r17
    325c:	cf 93       	push	r28
    325e:	df 93       	push	r29
    3260:	1f 92       	push	r1
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
    3266:	6c 01       	movw	r12, r24
    3268:	b6 2e       	mov	r11, r22
    326a:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    326c:	86 2f       	mov	r24, r22
    326e:	83 70       	andi	r24, 0x03	; 3
    3270:	29 f4       	brne	.+10     	; 0x327c <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    3272:	96 2f       	mov	r25, r22
    3274:	96 95       	lsr	r25
    3276:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    3278:	82 e0       	ldi	r24, 0x02	; 2
    327a:	02 c0       	rjmp	.+4      	; 0x3280 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    327c:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    327e:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    3280:	90 ff       	sbrs	r25, 0
		index++;
    3282:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    3284:	86 01       	movw	r16, r12
    3286:	00 5e       	subi	r16, 0xE0	; 224
    3288:	1f 4f       	sbci	r17, 0xFF	; 255
    328a:	98 e0       	ldi	r25, 0x08	; 8
    328c:	89 9f       	mul	r24, r25
    328e:	00 0d       	add	r16, r0
    3290:	11 1d       	adc	r17, r1
    3292:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3294:	8f b7       	in	r24, 0x3f	; 63
    3296:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3298:	f8 94       	cli
	return flags;
    329a:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    329c:	c6 01       	movw	r24, r12
    329e:	37 dd       	rcall	.-1426   	; 0x2d0e <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    32a0:	f7 01       	movw	r30, r14
    32a2:	80 81       	ld	r24, Z
    32a4:	f8 01       	movw	r30, r16
    32a6:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    32a8:	f7 01       	movw	r30, r14
    32aa:	82 81       	ldd	r24, Z+2	; 0x02
    32ac:	f8 01       	movw	r30, r16
    32ae:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    32b0:	f7 01       	movw	r30, r14
    32b2:	81 81       	ldd	r24, Z+1	; 0x01
    32b4:	f8 01       	movw	r30, r16
    32b6:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    32b8:	b0 fe       	sbrs	r11, 0
    32ba:	04 c0       	rjmp	.+8      	; 0x32c4 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    32bc:	f7 01       	movw	r30, r14
    32be:	83 81       	ldd	r24, Z+3	; 0x03
    32c0:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    32c2:	86 83       	std	Z+6, r24	; 0x06
    32c4:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    32c6:	44 dd       	rcall	.-1400   	; 0x2d50 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    32c8:	af be       	out	0x3f, r10	; 63
    32ca:	0f 90       	pop	r0
    32cc:	df 91       	pop	r29
    32ce:	cf 91       	pop	r28
    32d0:	1f 91       	pop	r17
    32d2:	0f 91       	pop	r16
    32d4:	ff 90       	pop	r15
    32d6:	ef 90       	pop	r14
    32d8:	df 90       	pop	r13
    32da:	cf 90       	pop	r12
    32dc:	bf 90       	pop	r11
    32de:	af 90       	pop	r10
    32e0:	08 95       	ret

000032e2 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    32e2:	af 92       	push	r10
    32e4:	bf 92       	push	r11
    32e6:	cf 92       	push	r12
    32e8:	df 92       	push	r13
    32ea:	ef 92       	push	r14
    32ec:	ff 92       	push	r15
    32ee:	0f 93       	push	r16
    32f0:	1f 93       	push	r17
    32f2:	cf 93       	push	r28
    32f4:	df 93       	push	r29
    32f6:	1f 92       	push	r1
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	6c 01       	movw	r12, r24
    32fe:	b6 2e       	mov	r11, r22
    3300:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3302:	86 2f       	mov	r24, r22
    3304:	83 70       	andi	r24, 0x03	; 3
    3306:	29 f4       	brne	.+10     	; 0x3312 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    3308:	96 2f       	mov	r25, r22
    330a:	96 95       	lsr	r25
    330c:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    330e:	82 e0       	ldi	r24, 0x02	; 2
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3312:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    3314:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    3316:	90 ff       	sbrs	r25, 0
		index++;
    3318:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    331a:	86 01       	movw	r16, r12
    331c:	00 5e       	subi	r16, 0xE0	; 224
    331e:	1f 4f       	sbci	r17, 0xFF	; 255
    3320:	98 e0       	ldi	r25, 0x08	; 8
    3322:	89 9f       	mul	r24, r25
    3324:	00 0d       	add	r16, r0
    3326:	11 1d       	adc	r17, r1
    3328:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    332a:	8f b7       	in	r24, 0x3f	; 63
    332c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    332e:	f8 94       	cli
	return flags;
    3330:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    3332:	c6 01       	movw	r24, r12
    3334:	ec dc       	rcall	.-1576   	; 0x2d0e <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    3336:	f8 01       	movw	r30, r16
    3338:	80 81       	ld	r24, Z
    333a:	f7 01       	movw	r30, r14
    333c:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    333e:	f8 01       	movw	r30, r16
    3340:	82 81       	ldd	r24, Z+2	; 0x02
    3342:	f7 01       	movw	r30, r14
    3344:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    3346:	f8 01       	movw	r30, r16
    3348:	81 81       	ldd	r24, Z+1	; 0x01
    334a:	f7 01       	movw	r30, r14
    334c:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    334e:	b0 fe       	sbrs	r11, 0
    3350:	04 c0       	rjmp	.+8      	; 0x335a <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    3352:	f8 01       	movw	r30, r16
    3354:	86 81       	ldd	r24, Z+6	; 0x06
    3356:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    3358:	83 83       	std	Z+3, r24	; 0x03
    335a:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    335c:	f9 dc       	rcall	.-1550   	; 0x2d50 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    335e:	af be       	out	0x3f, r10	; 63
    3360:	0f 90       	pop	r0
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	ff 90       	pop	r15
    336c:	ef 90       	pop	r14
    336e:	df 90       	pop	r13
    3370:	cf 90       	pop	r12
    3372:	bf 90       	pop	r11
    3374:	af 90       	pop	r10
    3376:	08 95       	ret

00003378 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    3378:	80 32       	cpi	r24, 0x20	; 32
    337a:	93 40       	sbci	r25, 0x03	; 3
    337c:	61 f4       	brne	.+24     	; 0x3396 <dac_enable_clock+0x1e>
    337e:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <dacb_enable_count>
    3382:	91 e0       	ldi	r25, 0x01	; 1
    3384:	98 0f       	add	r25, r24
    3386:	90 93 51 23 	sts	0x2351, r25	; 0x802351 <dacb_enable_count>
    338a:	81 11       	cpse	r24, r1
    338c:	04 c0       	rjmp	.+8      	; 0x3396 <dac_enable_clock+0x1e>
    338e:	64 e0       	ldi	r22, 0x04	; 4
    3390:	82 e0       	ldi	r24, 0x02	; 2
    3392:	0c 94 13 33 	jmp	0x6626	; 0x6626 <sysclk_enable_module>
    3396:	08 95       	ret

00003398 <dac_disable_clock>:
    3398:	80 32       	cpi	r24, 0x20	; 32
    339a:	93 40       	sbci	r25, 0x03	; 3
    339c:	59 f4       	brne	.+22     	; 0x33b4 <dac_disable_clock+0x1c>
    339e:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <dacb_enable_count>
    33a2:	81 50       	subi	r24, 0x01	; 1
    33a4:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <dacb_enable_count>
    33a8:	81 11       	cpse	r24, r1
    33aa:	04 c0       	rjmp	.+8      	; 0x33b4 <dac_disable_clock+0x1c>
    33ac:	64 e0       	ldi	r22, 0x04	; 4
    33ae:	82 e0       	ldi	r24, 0x02	; 2
    33b0:	0c 94 29 33 	jmp	0x6652	; 0x6652 <sysclk_disable_module>
    33b4:	08 95       	ret

000033b6 <dac_enable>:
    33b6:	ef 92       	push	r14
    33b8:	ff 92       	push	r15
    33ba:	1f 93       	push	r17
    33bc:	cf 93       	push	r28
    33be:	df 93       	push	r29
    33c0:	1f 92       	push	r1
    33c2:	1f 92       	push	r1
    33c4:	cd b7       	in	r28, 0x3d	; 61
    33c6:	de b7       	in	r29, 0x3e	; 62
    33c8:	2f b7       	in	r18, 0x3f	; 63
    33ca:	29 83       	std	Y+1, r18	; 0x01
    33cc:	f8 94       	cli
    33ce:	19 81       	ldd	r17, Y+1	; 0x01
    33d0:	20 91 c4 27 	lds	r18, 0x27C4	; 0x8027c4 <sleepmgr_locks+0x1>
    33d4:	2f 3f       	cpi	r18, 0xFF	; 255
    33d6:	09 f4       	brne	.+2      	; 0x33da <dac_enable+0x24>
    33d8:	ff cf       	rjmp	.-2      	; 0x33d8 <dac_enable+0x22>
    33da:	7c 01       	movw	r14, r24
    33dc:	8f b7       	in	r24, 0x3f	; 63
    33de:	8a 83       	std	Y+2, r24	; 0x02
    33e0:	f8 94       	cli
    33e2:	9a 81       	ldd	r25, Y+2	; 0x02
    33e4:	e3 ec       	ldi	r30, 0xC3	; 195
    33e6:	f7 e2       	ldi	r31, 0x27	; 39
    33e8:	81 81       	ldd	r24, Z+1	; 0x01
    33ea:	8f 5f       	subi	r24, 0xFF	; 255
    33ec:	81 83       	std	Z+1, r24	; 0x01
    33ee:	9f bf       	out	0x3f, r25	; 63
    33f0:	c7 01       	movw	r24, r14
    33f2:	c2 df       	rcall	.-124    	; 0x3378 <dac_enable_clock>
    33f4:	f7 01       	movw	r30, r14
    33f6:	80 81       	ld	r24, Z
    33f8:	81 60       	ori	r24, 0x01	; 1
    33fa:	80 83       	st	Z, r24
    33fc:	1f bf       	out	0x3f, r17	; 63
    33fe:	0f 90       	pop	r0
    3400:	0f 90       	pop	r0
    3402:	df 91       	pop	r29
    3404:	cf 91       	pop	r28
    3406:	1f 91       	pop	r17
    3408:	ff 90       	pop	r15
    340a:	ef 90       	pop	r14
    340c:	08 95       	ret

0000340e <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    340e:	9f 92       	push	r9
    3410:	af 92       	push	r10
    3412:	bf 92       	push	r11
    3414:	cf 92       	push	r12
    3416:	df 92       	push	r13
    3418:	ef 92       	push	r14
    341a:	ff 92       	push	r15
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    3420:	cf 93       	push	r28
    3422:	df 93       	push	r29
    3424:	1f 92       	push	r1
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    342a:	80 32       	cpi	r24, 0x20	; 32
    342c:	23 e0       	ldi	r18, 0x03	; 3
    342e:	92 07       	cpc	r25, r18
    3430:	09 f0       	breq	.+2      	; 0x3434 <dac_write_configuration+0x26>
    3432:	3c c0       	rjmp	.+120    	; 0x34ac <dac_write_configuration+0x9e>
    3434:	7b 01       	movw	r14, r22
    3436:	8c 01       	movw	r16, r24
    3438:	63 e3       	ldi	r22, 0x33	; 51
    343a:	70 e0       	ldi	r23, 0x00	; 0
    343c:	82 e0       	ldi	r24, 0x02	; 2
    343e:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
    3442:	98 2e       	mov	r9, r24
    3444:	62 e3       	ldi	r22, 0x32	; 50
    3446:	70 e0       	ldi	r23, 0x00	; 0
    3448:	82 e0       	ldi	r24, 0x02	; 2
    344a:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
    344e:	a8 2e       	mov	r10, r24
    3450:	67 e3       	ldi	r22, 0x37	; 55
    3452:	70 e0       	ldi	r23, 0x00	; 0
    3454:	82 e0       	ldi	r24, 0x02	; 2
    3456:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
    345a:	b8 2e       	mov	r11, r24
    345c:	66 e3       	ldi	r22, 0x36	; 54
    345e:	70 e0       	ldi	r23, 0x00	; 0
    3460:	82 e0       	ldi	r24, 0x02	; 2
    3462:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
    3466:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3468:	8f b7       	in	r24, 0x3f	; 63
    346a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    346c:	f8 94       	cli
	return flags;
    346e:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    3470:	c8 01       	movw	r24, r16
    3472:	82 df       	rcall	.-252    	; 0x3378 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    3474:	f8 01       	movw	r30, r16
    3476:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    3478:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    347a:	f7 01       	movw	r30, r14
    347c:	91 81       	ldd	r25, Z+1	; 0x01
    347e:	f8 01       	movw	r30, r16
    3480:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    3482:	f7 01       	movw	r30, r14
    3484:	92 81       	ldd	r25, Z+2	; 0x02
    3486:	f8 01       	movw	r30, r16
    3488:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    348a:	f7 01       	movw	r30, r14
    348c:	93 81       	ldd	r25, Z+3	; 0x03
    348e:	f8 01       	movw	r30, r16
    3490:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    3492:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    3494:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    3496:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    3498:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    349a:	81 70       	andi	r24, 0x01	; 1
    349c:	f7 01       	movw	r30, r14
    349e:	90 81       	ld	r25, Z
    34a0:	89 2b       	or	r24, r25
    34a2:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    34a4:	80 83       	st	Z, r24
    34a6:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    34a8:	77 df       	rcall	.-274    	; 0x3398 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    34aa:	df be       	out	0x3f, r13	; 63
    34ac:	0f 90       	pop	r0
    34ae:	df 91       	pop	r29
    34b0:	cf 91       	pop	r28
    34b2:	1f 91       	pop	r17
    34b4:	0f 91       	pop	r16
    34b6:	ff 90       	pop	r15
    34b8:	ef 90       	pop	r14
    34ba:	df 90       	pop	r13
    34bc:	cf 90       	pop	r12
    34be:	bf 90       	pop	r11
    34c0:	af 90       	pop	r10
    34c2:	9f 90       	pop	r9
    34c4:	08 95       	ret

000034c6 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    34c6:	df 92       	push	r13
    34c8:	ef 92       	push	r14
    34ca:	ff 92       	push	r15
    34cc:	0f 93       	push	r16
    34ce:	1f 93       	push	r17
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	1f 92       	push	r1
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	8c 01       	movw	r16, r24
    34dc:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    34de:	8f b7       	in	r24, 0x3f	; 63
    34e0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    34e2:	f8 94       	cli
	return flags;
    34e4:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    34e6:	c8 01       	movw	r24, r16
    34e8:	47 df       	rcall	.-370    	; 0x3378 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    34ea:	f8 01       	movw	r30, r16
    34ec:	80 81       	ld	r24, Z
    34ee:	8e 7f       	andi	r24, 0xFE	; 254
    34f0:	f7 01       	movw	r30, r14
    34f2:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    34f4:	f8 01       	movw	r30, r16
    34f6:	81 81       	ldd	r24, Z+1	; 0x01
    34f8:	f7 01       	movw	r30, r14
    34fa:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    34fc:	f8 01       	movw	r30, r16
    34fe:	82 81       	ldd	r24, Z+2	; 0x02
    3500:	f7 01       	movw	r30, r14
    3502:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    3504:	f8 01       	movw	r30, r16
    3506:	83 81       	ldd	r24, Z+3	; 0x03
    3508:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    350a:	83 83       	std	Z+3, r24	; 0x03
    350c:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    350e:	44 df       	rcall	.-376    	; 0x3398 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    3510:	df be       	out	0x3f, r13	; 63
    3512:	0f 90       	pop	r0
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	ff 90       	pop	r15
    351e:	ef 90       	pop	r14
    3520:	df 90       	pop	r13
    3522:	08 95       	ret

00003524 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    3524:	1f 92       	push	r1
    3526:	0f 92       	push	r0
    3528:	0f b6       	in	r0, 0x3f	; 63
    352a:	0f 92       	push	r0
    352c:	11 24       	eor	r1, r1
    352e:	0b b6       	in	r0, 0x3b	; 59
    3530:	0f 92       	push	r0
    3532:	2f 93       	push	r18
    3534:	3f 93       	push	r19
    3536:	4f 93       	push	r20
    3538:	5f 93       	push	r21
    353a:	6f 93       	push	r22
    353c:	7f 93       	push	r23
    353e:	8f 93       	push	r24
    3540:	9f 93       	push	r25
    3542:	af 93       	push	r26
    3544:	bf 93       	push	r27
    3546:	ef 93       	push	r30
    3548:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    354a:	e0 91 98 23 	lds	r30, 0x2398	; 0x802398 <tc_tcc0_ovf_callback>
    354e:	f0 91 99 23 	lds	r31, 0x2399	; 0x802399 <tc_tcc0_ovf_callback+0x1>
    3552:	30 97       	sbiw	r30, 0x00	; 0
    3554:	09 f0       	breq	.+2      	; 0x3558 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
    3556:	19 95       	eicall
	}
}
    3558:	ff 91       	pop	r31
    355a:	ef 91       	pop	r30
    355c:	bf 91       	pop	r27
    355e:	af 91       	pop	r26
    3560:	9f 91       	pop	r25
    3562:	8f 91       	pop	r24
    3564:	7f 91       	pop	r23
    3566:	6f 91       	pop	r22
    3568:	5f 91       	pop	r21
    356a:	4f 91       	pop	r20
    356c:	3f 91       	pop	r19
    356e:	2f 91       	pop	r18
    3570:	0f 90       	pop	r0
    3572:	0b be       	out	0x3b, r0	; 59
    3574:	0f 90       	pop	r0
    3576:	0f be       	out	0x3f, r0	; 63
    3578:	0f 90       	pop	r0
    357a:	1f 90       	pop	r1
    357c:	18 95       	reti

0000357e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    357e:	1f 92       	push	r1
    3580:	0f 92       	push	r0
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	0f 92       	push	r0
    3586:	11 24       	eor	r1, r1
    3588:	0b b6       	in	r0, 0x3b	; 59
    358a:	0f 92       	push	r0
    358c:	2f 93       	push	r18
    358e:	3f 93       	push	r19
    3590:	4f 93       	push	r20
    3592:	5f 93       	push	r21
    3594:	6f 93       	push	r22
    3596:	7f 93       	push	r23
    3598:	8f 93       	push	r24
    359a:	9f 93       	push	r25
    359c:	af 93       	push	r26
    359e:	bf 93       	push	r27
    35a0:	ef 93       	push	r30
    35a2:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    35a4:	e0 91 96 23 	lds	r30, 0x2396	; 0x802396 <tc_tcc0_err_callback>
    35a8:	f0 91 97 23 	lds	r31, 0x2397	; 0x802397 <tc_tcc0_err_callback+0x1>
    35ac:	30 97       	sbiw	r30, 0x00	; 0
    35ae:	09 f0       	breq	.+2      	; 0x35b2 <__vector_15+0x34>
		tc_tcc0_err_callback();
    35b0:	19 95       	eicall
	}
}
    35b2:	ff 91       	pop	r31
    35b4:	ef 91       	pop	r30
    35b6:	bf 91       	pop	r27
    35b8:	af 91       	pop	r26
    35ba:	9f 91       	pop	r25
    35bc:	8f 91       	pop	r24
    35be:	7f 91       	pop	r23
    35c0:	6f 91       	pop	r22
    35c2:	5f 91       	pop	r21
    35c4:	4f 91       	pop	r20
    35c6:	3f 91       	pop	r19
    35c8:	2f 91       	pop	r18
    35ca:	0f 90       	pop	r0
    35cc:	0b be       	out	0x3b, r0	; 59
    35ce:	0f 90       	pop	r0
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	0f 90       	pop	r0
    35d4:	1f 90       	pop	r1
    35d6:	18 95       	reti

000035d8 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    35d8:	1f 92       	push	r1
    35da:	0f 92       	push	r0
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	0f 92       	push	r0
    35e0:	11 24       	eor	r1, r1
    35e2:	0b b6       	in	r0, 0x3b	; 59
    35e4:	0f 92       	push	r0
    35e6:	2f 93       	push	r18
    35e8:	3f 93       	push	r19
    35ea:	4f 93       	push	r20
    35ec:	5f 93       	push	r21
    35ee:	6f 93       	push	r22
    35f0:	7f 93       	push	r23
    35f2:	8f 93       	push	r24
    35f4:	9f 93       	push	r25
    35f6:	af 93       	push	r26
    35f8:	bf 93       	push	r27
    35fa:	ef 93       	push	r30
    35fc:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    35fe:	e0 91 94 23 	lds	r30, 0x2394	; 0x802394 <tc_tcc0_cca_callback>
    3602:	f0 91 95 23 	lds	r31, 0x2395	; 0x802395 <tc_tcc0_cca_callback+0x1>
    3606:	30 97       	sbiw	r30, 0x00	; 0
    3608:	09 f0       	breq	.+2      	; 0x360c <__vector_16+0x34>
		tc_tcc0_cca_callback();
    360a:	19 95       	eicall
	}
}
    360c:	ff 91       	pop	r31
    360e:	ef 91       	pop	r30
    3610:	bf 91       	pop	r27
    3612:	af 91       	pop	r26
    3614:	9f 91       	pop	r25
    3616:	8f 91       	pop	r24
    3618:	7f 91       	pop	r23
    361a:	6f 91       	pop	r22
    361c:	5f 91       	pop	r21
    361e:	4f 91       	pop	r20
    3620:	3f 91       	pop	r19
    3622:	2f 91       	pop	r18
    3624:	0f 90       	pop	r0
    3626:	0b be       	out	0x3b, r0	; 59
    3628:	0f 90       	pop	r0
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	0f 90       	pop	r0
    362e:	1f 90       	pop	r1
    3630:	18 95       	reti

00003632 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    3632:	1f 92       	push	r1
    3634:	0f 92       	push	r0
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	0f 92       	push	r0
    363a:	11 24       	eor	r1, r1
    363c:	0b b6       	in	r0, 0x3b	; 59
    363e:	0f 92       	push	r0
    3640:	2f 93       	push	r18
    3642:	3f 93       	push	r19
    3644:	4f 93       	push	r20
    3646:	5f 93       	push	r21
    3648:	6f 93       	push	r22
    364a:	7f 93       	push	r23
    364c:	8f 93       	push	r24
    364e:	9f 93       	push	r25
    3650:	af 93       	push	r26
    3652:	bf 93       	push	r27
    3654:	ef 93       	push	r30
    3656:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    3658:	e0 91 92 23 	lds	r30, 0x2392	; 0x802392 <tc_tcc0_ccb_callback>
    365c:	f0 91 93 23 	lds	r31, 0x2393	; 0x802393 <tc_tcc0_ccb_callback+0x1>
    3660:	30 97       	sbiw	r30, 0x00	; 0
    3662:	09 f0       	breq	.+2      	; 0x3666 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
    3664:	19 95       	eicall
	}
}
    3666:	ff 91       	pop	r31
    3668:	ef 91       	pop	r30
    366a:	bf 91       	pop	r27
    366c:	af 91       	pop	r26
    366e:	9f 91       	pop	r25
    3670:	8f 91       	pop	r24
    3672:	7f 91       	pop	r23
    3674:	6f 91       	pop	r22
    3676:	5f 91       	pop	r21
    3678:	4f 91       	pop	r20
    367a:	3f 91       	pop	r19
    367c:	2f 91       	pop	r18
    367e:	0f 90       	pop	r0
    3680:	0b be       	out	0x3b, r0	; 59
    3682:	0f 90       	pop	r0
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	0f 90       	pop	r0
    3688:	1f 90       	pop	r1
    368a:	18 95       	reti

0000368c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    368c:	1f 92       	push	r1
    368e:	0f 92       	push	r0
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	0f 92       	push	r0
    3694:	11 24       	eor	r1, r1
    3696:	0b b6       	in	r0, 0x3b	; 59
    3698:	0f 92       	push	r0
    369a:	2f 93       	push	r18
    369c:	3f 93       	push	r19
    369e:	4f 93       	push	r20
    36a0:	5f 93       	push	r21
    36a2:	6f 93       	push	r22
    36a4:	7f 93       	push	r23
    36a6:	8f 93       	push	r24
    36a8:	9f 93       	push	r25
    36aa:	af 93       	push	r26
    36ac:	bf 93       	push	r27
    36ae:	ef 93       	push	r30
    36b0:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    36b2:	e0 91 90 23 	lds	r30, 0x2390	; 0x802390 <tc_tcc0_ccc_callback>
    36b6:	f0 91 91 23 	lds	r31, 0x2391	; 0x802391 <tc_tcc0_ccc_callback+0x1>
    36ba:	30 97       	sbiw	r30, 0x00	; 0
    36bc:	09 f0       	breq	.+2      	; 0x36c0 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    36be:	19 95       	eicall
	}
}
    36c0:	ff 91       	pop	r31
    36c2:	ef 91       	pop	r30
    36c4:	bf 91       	pop	r27
    36c6:	af 91       	pop	r26
    36c8:	9f 91       	pop	r25
    36ca:	8f 91       	pop	r24
    36cc:	7f 91       	pop	r23
    36ce:	6f 91       	pop	r22
    36d0:	5f 91       	pop	r21
    36d2:	4f 91       	pop	r20
    36d4:	3f 91       	pop	r19
    36d6:	2f 91       	pop	r18
    36d8:	0f 90       	pop	r0
    36da:	0b be       	out	0x3b, r0	; 59
    36dc:	0f 90       	pop	r0
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	0f 90       	pop	r0
    36e2:	1f 90       	pop	r1
    36e4:	18 95       	reti

000036e6 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    36e6:	1f 92       	push	r1
    36e8:	0f 92       	push	r0
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	0f 92       	push	r0
    36ee:	11 24       	eor	r1, r1
    36f0:	0b b6       	in	r0, 0x3b	; 59
    36f2:	0f 92       	push	r0
    36f4:	2f 93       	push	r18
    36f6:	3f 93       	push	r19
    36f8:	4f 93       	push	r20
    36fa:	5f 93       	push	r21
    36fc:	6f 93       	push	r22
    36fe:	7f 93       	push	r23
    3700:	8f 93       	push	r24
    3702:	9f 93       	push	r25
    3704:	af 93       	push	r26
    3706:	bf 93       	push	r27
    3708:	ef 93       	push	r30
    370a:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    370c:	e0 91 8e 23 	lds	r30, 0x238E	; 0x80238e <tc_tcc0_ccd_callback>
    3710:	f0 91 8f 23 	lds	r31, 0x238F	; 0x80238f <tc_tcc0_ccd_callback+0x1>
    3714:	30 97       	sbiw	r30, 0x00	; 0
    3716:	09 f0       	breq	.+2      	; 0x371a <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    3718:	19 95       	eicall
	}
}
    371a:	ff 91       	pop	r31
    371c:	ef 91       	pop	r30
    371e:	bf 91       	pop	r27
    3720:	af 91       	pop	r26
    3722:	9f 91       	pop	r25
    3724:	8f 91       	pop	r24
    3726:	7f 91       	pop	r23
    3728:	6f 91       	pop	r22
    372a:	5f 91       	pop	r21
    372c:	4f 91       	pop	r20
    372e:	3f 91       	pop	r19
    3730:	2f 91       	pop	r18
    3732:	0f 90       	pop	r0
    3734:	0b be       	out	0x3b, r0	; 59
    3736:	0f 90       	pop	r0
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	0f 90       	pop	r0
    373c:	1f 90       	pop	r1
    373e:	18 95       	reti

00003740 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    3740:	1f 92       	push	r1
    3742:	0f 92       	push	r0
    3744:	0f b6       	in	r0, 0x3f	; 63
    3746:	0f 92       	push	r0
    3748:	11 24       	eor	r1, r1
    374a:	0b b6       	in	r0, 0x3b	; 59
    374c:	0f 92       	push	r0
    374e:	2f 93       	push	r18
    3750:	3f 93       	push	r19
    3752:	4f 93       	push	r20
    3754:	5f 93       	push	r21
    3756:	6f 93       	push	r22
    3758:	7f 93       	push	r23
    375a:	8f 93       	push	r24
    375c:	9f 93       	push	r25
    375e:	af 93       	push	r26
    3760:	bf 93       	push	r27
    3762:	ef 93       	push	r30
    3764:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    3766:	e0 91 8c 23 	lds	r30, 0x238C	; 0x80238c <tc_tcc1_ovf_callback>
    376a:	f0 91 8d 23 	lds	r31, 0x238D	; 0x80238d <tc_tcc1_ovf_callback+0x1>
    376e:	30 97       	sbiw	r30, 0x00	; 0
    3770:	09 f0       	breq	.+2      	; 0x3774 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    3772:	19 95       	eicall
	}
}
    3774:	ff 91       	pop	r31
    3776:	ef 91       	pop	r30
    3778:	bf 91       	pop	r27
    377a:	af 91       	pop	r26
    377c:	9f 91       	pop	r25
    377e:	8f 91       	pop	r24
    3780:	7f 91       	pop	r23
    3782:	6f 91       	pop	r22
    3784:	5f 91       	pop	r21
    3786:	4f 91       	pop	r20
    3788:	3f 91       	pop	r19
    378a:	2f 91       	pop	r18
    378c:	0f 90       	pop	r0
    378e:	0b be       	out	0x3b, r0	; 59
    3790:	0f 90       	pop	r0
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	0f 90       	pop	r0
    3796:	1f 90       	pop	r1
    3798:	18 95       	reti

0000379a <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    379a:	1f 92       	push	r1
    379c:	0f 92       	push	r0
    379e:	0f b6       	in	r0, 0x3f	; 63
    37a0:	0f 92       	push	r0
    37a2:	11 24       	eor	r1, r1
    37a4:	0b b6       	in	r0, 0x3b	; 59
    37a6:	0f 92       	push	r0
    37a8:	2f 93       	push	r18
    37aa:	3f 93       	push	r19
    37ac:	4f 93       	push	r20
    37ae:	5f 93       	push	r21
    37b0:	6f 93       	push	r22
    37b2:	7f 93       	push	r23
    37b4:	8f 93       	push	r24
    37b6:	9f 93       	push	r25
    37b8:	af 93       	push	r26
    37ba:	bf 93       	push	r27
    37bc:	ef 93       	push	r30
    37be:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    37c0:	e0 91 8a 23 	lds	r30, 0x238A	; 0x80238a <tc_tcc1_err_callback>
    37c4:	f0 91 8b 23 	lds	r31, 0x238B	; 0x80238b <tc_tcc1_err_callback+0x1>
    37c8:	30 97       	sbiw	r30, 0x00	; 0
    37ca:	09 f0       	breq	.+2      	; 0x37ce <__vector_21+0x34>
		tc_tcc1_err_callback();
    37cc:	19 95       	eicall
	}
}
    37ce:	ff 91       	pop	r31
    37d0:	ef 91       	pop	r30
    37d2:	bf 91       	pop	r27
    37d4:	af 91       	pop	r26
    37d6:	9f 91       	pop	r25
    37d8:	8f 91       	pop	r24
    37da:	7f 91       	pop	r23
    37dc:	6f 91       	pop	r22
    37de:	5f 91       	pop	r21
    37e0:	4f 91       	pop	r20
    37e2:	3f 91       	pop	r19
    37e4:	2f 91       	pop	r18
    37e6:	0f 90       	pop	r0
    37e8:	0b be       	out	0x3b, r0	; 59
    37ea:	0f 90       	pop	r0
    37ec:	0f be       	out	0x3f, r0	; 63
    37ee:	0f 90       	pop	r0
    37f0:	1f 90       	pop	r1
    37f2:	18 95       	reti

000037f4 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    37f4:	1f 92       	push	r1
    37f6:	0f 92       	push	r0
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	0f 92       	push	r0
    37fc:	11 24       	eor	r1, r1
    37fe:	0b b6       	in	r0, 0x3b	; 59
    3800:	0f 92       	push	r0
    3802:	2f 93       	push	r18
    3804:	3f 93       	push	r19
    3806:	4f 93       	push	r20
    3808:	5f 93       	push	r21
    380a:	6f 93       	push	r22
    380c:	7f 93       	push	r23
    380e:	8f 93       	push	r24
    3810:	9f 93       	push	r25
    3812:	af 93       	push	r26
    3814:	bf 93       	push	r27
    3816:	ef 93       	push	r30
    3818:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    381a:	e0 91 88 23 	lds	r30, 0x2388	; 0x802388 <tc_tcc1_cca_callback>
    381e:	f0 91 89 23 	lds	r31, 0x2389	; 0x802389 <tc_tcc1_cca_callback+0x1>
    3822:	30 97       	sbiw	r30, 0x00	; 0
    3824:	09 f0       	breq	.+2      	; 0x3828 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    3826:	19 95       	eicall
	}
}
    3828:	ff 91       	pop	r31
    382a:	ef 91       	pop	r30
    382c:	bf 91       	pop	r27
    382e:	af 91       	pop	r26
    3830:	9f 91       	pop	r25
    3832:	8f 91       	pop	r24
    3834:	7f 91       	pop	r23
    3836:	6f 91       	pop	r22
    3838:	5f 91       	pop	r21
    383a:	4f 91       	pop	r20
    383c:	3f 91       	pop	r19
    383e:	2f 91       	pop	r18
    3840:	0f 90       	pop	r0
    3842:	0b be       	out	0x3b, r0	; 59
    3844:	0f 90       	pop	r0
    3846:	0f be       	out	0x3f, r0	; 63
    3848:	0f 90       	pop	r0
    384a:	1f 90       	pop	r1
    384c:	18 95       	reti

0000384e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    384e:	1f 92       	push	r1
    3850:	0f 92       	push	r0
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	0f 92       	push	r0
    3856:	11 24       	eor	r1, r1
    3858:	0b b6       	in	r0, 0x3b	; 59
    385a:	0f 92       	push	r0
    385c:	2f 93       	push	r18
    385e:	3f 93       	push	r19
    3860:	4f 93       	push	r20
    3862:	5f 93       	push	r21
    3864:	6f 93       	push	r22
    3866:	7f 93       	push	r23
    3868:	8f 93       	push	r24
    386a:	9f 93       	push	r25
    386c:	af 93       	push	r26
    386e:	bf 93       	push	r27
    3870:	ef 93       	push	r30
    3872:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    3874:	e0 91 86 23 	lds	r30, 0x2386	; 0x802386 <tc_tcc1_ccb_callback>
    3878:	f0 91 87 23 	lds	r31, 0x2387	; 0x802387 <tc_tcc1_ccb_callback+0x1>
    387c:	30 97       	sbiw	r30, 0x00	; 0
    387e:	09 f0       	breq	.+2      	; 0x3882 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    3880:	19 95       	eicall
	}
}
    3882:	ff 91       	pop	r31
    3884:	ef 91       	pop	r30
    3886:	bf 91       	pop	r27
    3888:	af 91       	pop	r26
    388a:	9f 91       	pop	r25
    388c:	8f 91       	pop	r24
    388e:	7f 91       	pop	r23
    3890:	6f 91       	pop	r22
    3892:	5f 91       	pop	r21
    3894:	4f 91       	pop	r20
    3896:	3f 91       	pop	r19
    3898:	2f 91       	pop	r18
    389a:	0f 90       	pop	r0
    389c:	0b be       	out	0x3b, r0	; 59
    389e:	0f 90       	pop	r0
    38a0:	0f be       	out	0x3f, r0	; 63
    38a2:	0f 90       	pop	r0
    38a4:	1f 90       	pop	r1
    38a6:	18 95       	reti

000038a8 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    38a8:	1f 92       	push	r1
    38aa:	0f 92       	push	r0
    38ac:	0f b6       	in	r0, 0x3f	; 63
    38ae:	0f 92       	push	r0
    38b0:	11 24       	eor	r1, r1
    38b2:	0b b6       	in	r0, 0x3b	; 59
    38b4:	0f 92       	push	r0
    38b6:	2f 93       	push	r18
    38b8:	3f 93       	push	r19
    38ba:	4f 93       	push	r20
    38bc:	5f 93       	push	r21
    38be:	6f 93       	push	r22
    38c0:	7f 93       	push	r23
    38c2:	8f 93       	push	r24
    38c4:	9f 93       	push	r25
    38c6:	af 93       	push	r26
    38c8:	bf 93       	push	r27
    38ca:	ef 93       	push	r30
    38cc:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    38ce:	e0 91 84 23 	lds	r30, 0x2384	; 0x802384 <tc_tcd0_ovf_callback>
    38d2:	f0 91 85 23 	lds	r31, 0x2385	; 0x802385 <tc_tcd0_ovf_callback+0x1>
    38d6:	30 97       	sbiw	r30, 0x00	; 0
    38d8:	09 f0       	breq	.+2      	; 0x38dc <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    38da:	19 95       	eicall
	}
}
    38dc:	ff 91       	pop	r31
    38de:	ef 91       	pop	r30
    38e0:	bf 91       	pop	r27
    38e2:	af 91       	pop	r26
    38e4:	9f 91       	pop	r25
    38e6:	8f 91       	pop	r24
    38e8:	7f 91       	pop	r23
    38ea:	6f 91       	pop	r22
    38ec:	5f 91       	pop	r21
    38ee:	4f 91       	pop	r20
    38f0:	3f 91       	pop	r19
    38f2:	2f 91       	pop	r18
    38f4:	0f 90       	pop	r0
    38f6:	0b be       	out	0x3b, r0	; 59
    38f8:	0f 90       	pop	r0
    38fa:	0f be       	out	0x3f, r0	; 63
    38fc:	0f 90       	pop	r0
    38fe:	1f 90       	pop	r1
    3900:	18 95       	reti

00003902 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    3902:	1f 92       	push	r1
    3904:	0f 92       	push	r0
    3906:	0f b6       	in	r0, 0x3f	; 63
    3908:	0f 92       	push	r0
    390a:	11 24       	eor	r1, r1
    390c:	0b b6       	in	r0, 0x3b	; 59
    390e:	0f 92       	push	r0
    3910:	2f 93       	push	r18
    3912:	3f 93       	push	r19
    3914:	4f 93       	push	r20
    3916:	5f 93       	push	r21
    3918:	6f 93       	push	r22
    391a:	7f 93       	push	r23
    391c:	8f 93       	push	r24
    391e:	9f 93       	push	r25
    3920:	af 93       	push	r26
    3922:	bf 93       	push	r27
    3924:	ef 93       	push	r30
    3926:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    3928:	e0 91 82 23 	lds	r30, 0x2382	; 0x802382 <tc_tcd0_err_callback>
    392c:	f0 91 83 23 	lds	r31, 0x2383	; 0x802383 <tc_tcd0_err_callback+0x1>
    3930:	30 97       	sbiw	r30, 0x00	; 0
    3932:	09 f0       	breq	.+2      	; 0x3936 <__vector_78+0x34>
		tc_tcd0_err_callback();
    3934:	19 95       	eicall
	}
}
    3936:	ff 91       	pop	r31
    3938:	ef 91       	pop	r30
    393a:	bf 91       	pop	r27
    393c:	af 91       	pop	r26
    393e:	9f 91       	pop	r25
    3940:	8f 91       	pop	r24
    3942:	7f 91       	pop	r23
    3944:	6f 91       	pop	r22
    3946:	5f 91       	pop	r21
    3948:	4f 91       	pop	r20
    394a:	3f 91       	pop	r19
    394c:	2f 91       	pop	r18
    394e:	0f 90       	pop	r0
    3950:	0b be       	out	0x3b, r0	; 59
    3952:	0f 90       	pop	r0
    3954:	0f be       	out	0x3f, r0	; 63
    3956:	0f 90       	pop	r0
    3958:	1f 90       	pop	r1
    395a:	18 95       	reti

0000395c <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    395c:	1f 92       	push	r1
    395e:	0f 92       	push	r0
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	0f 92       	push	r0
    3964:	11 24       	eor	r1, r1
    3966:	0b b6       	in	r0, 0x3b	; 59
    3968:	0f 92       	push	r0
    396a:	2f 93       	push	r18
    396c:	3f 93       	push	r19
    396e:	4f 93       	push	r20
    3970:	5f 93       	push	r21
    3972:	6f 93       	push	r22
    3974:	7f 93       	push	r23
    3976:	8f 93       	push	r24
    3978:	9f 93       	push	r25
    397a:	af 93       	push	r26
    397c:	bf 93       	push	r27
    397e:	ef 93       	push	r30
    3980:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    3982:	e0 91 80 23 	lds	r30, 0x2380	; 0x802380 <tc_tcd0_cca_callback>
    3986:	f0 91 81 23 	lds	r31, 0x2381	; 0x802381 <tc_tcd0_cca_callback+0x1>
    398a:	30 97       	sbiw	r30, 0x00	; 0
    398c:	09 f0       	breq	.+2      	; 0x3990 <__vector_79+0x34>
		tc_tcd0_cca_callback();
    398e:	19 95       	eicall
	}
}
    3990:	ff 91       	pop	r31
    3992:	ef 91       	pop	r30
    3994:	bf 91       	pop	r27
    3996:	af 91       	pop	r26
    3998:	9f 91       	pop	r25
    399a:	8f 91       	pop	r24
    399c:	7f 91       	pop	r23
    399e:	6f 91       	pop	r22
    39a0:	5f 91       	pop	r21
    39a2:	4f 91       	pop	r20
    39a4:	3f 91       	pop	r19
    39a6:	2f 91       	pop	r18
    39a8:	0f 90       	pop	r0
    39aa:	0b be       	out	0x3b, r0	; 59
    39ac:	0f 90       	pop	r0
    39ae:	0f be       	out	0x3f, r0	; 63
    39b0:	0f 90       	pop	r0
    39b2:	1f 90       	pop	r1
    39b4:	18 95       	reti

000039b6 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    39b6:	1f 92       	push	r1
    39b8:	0f 92       	push	r0
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	0f 92       	push	r0
    39be:	11 24       	eor	r1, r1
    39c0:	0b b6       	in	r0, 0x3b	; 59
    39c2:	0f 92       	push	r0
    39c4:	2f 93       	push	r18
    39c6:	3f 93       	push	r19
    39c8:	4f 93       	push	r20
    39ca:	5f 93       	push	r21
    39cc:	6f 93       	push	r22
    39ce:	7f 93       	push	r23
    39d0:	8f 93       	push	r24
    39d2:	9f 93       	push	r25
    39d4:	af 93       	push	r26
    39d6:	bf 93       	push	r27
    39d8:	ef 93       	push	r30
    39da:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    39dc:	e0 91 7e 23 	lds	r30, 0x237E	; 0x80237e <tc_tcd0_ccb_callback>
    39e0:	f0 91 7f 23 	lds	r31, 0x237F	; 0x80237f <tc_tcd0_ccb_callback+0x1>
    39e4:	30 97       	sbiw	r30, 0x00	; 0
    39e6:	09 f0       	breq	.+2      	; 0x39ea <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    39e8:	19 95       	eicall
	}
}
    39ea:	ff 91       	pop	r31
    39ec:	ef 91       	pop	r30
    39ee:	bf 91       	pop	r27
    39f0:	af 91       	pop	r26
    39f2:	9f 91       	pop	r25
    39f4:	8f 91       	pop	r24
    39f6:	7f 91       	pop	r23
    39f8:	6f 91       	pop	r22
    39fa:	5f 91       	pop	r21
    39fc:	4f 91       	pop	r20
    39fe:	3f 91       	pop	r19
    3a00:	2f 91       	pop	r18
    3a02:	0f 90       	pop	r0
    3a04:	0b be       	out	0x3b, r0	; 59
    3a06:	0f 90       	pop	r0
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	0f 90       	pop	r0
    3a0c:	1f 90       	pop	r1
    3a0e:	18 95       	reti

00003a10 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    3a10:	1f 92       	push	r1
    3a12:	0f 92       	push	r0
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	0f 92       	push	r0
    3a18:	11 24       	eor	r1, r1
    3a1a:	0b b6       	in	r0, 0x3b	; 59
    3a1c:	0f 92       	push	r0
    3a1e:	2f 93       	push	r18
    3a20:	3f 93       	push	r19
    3a22:	4f 93       	push	r20
    3a24:	5f 93       	push	r21
    3a26:	6f 93       	push	r22
    3a28:	7f 93       	push	r23
    3a2a:	8f 93       	push	r24
    3a2c:	9f 93       	push	r25
    3a2e:	af 93       	push	r26
    3a30:	bf 93       	push	r27
    3a32:	ef 93       	push	r30
    3a34:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    3a36:	e0 91 7c 23 	lds	r30, 0x237C	; 0x80237c <tc_tcd0_ccc_callback>
    3a3a:	f0 91 7d 23 	lds	r31, 0x237D	; 0x80237d <tc_tcd0_ccc_callback+0x1>
    3a3e:	30 97       	sbiw	r30, 0x00	; 0
    3a40:	09 f0       	breq	.+2      	; 0x3a44 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    3a42:	19 95       	eicall
	}
}
    3a44:	ff 91       	pop	r31
    3a46:	ef 91       	pop	r30
    3a48:	bf 91       	pop	r27
    3a4a:	af 91       	pop	r26
    3a4c:	9f 91       	pop	r25
    3a4e:	8f 91       	pop	r24
    3a50:	7f 91       	pop	r23
    3a52:	6f 91       	pop	r22
    3a54:	5f 91       	pop	r21
    3a56:	4f 91       	pop	r20
    3a58:	3f 91       	pop	r19
    3a5a:	2f 91       	pop	r18
    3a5c:	0f 90       	pop	r0
    3a5e:	0b be       	out	0x3b, r0	; 59
    3a60:	0f 90       	pop	r0
    3a62:	0f be       	out	0x3f, r0	; 63
    3a64:	0f 90       	pop	r0
    3a66:	1f 90       	pop	r1
    3a68:	18 95       	reti

00003a6a <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    3a6a:	1f 92       	push	r1
    3a6c:	0f 92       	push	r0
    3a6e:	0f b6       	in	r0, 0x3f	; 63
    3a70:	0f 92       	push	r0
    3a72:	11 24       	eor	r1, r1
    3a74:	0b b6       	in	r0, 0x3b	; 59
    3a76:	0f 92       	push	r0
    3a78:	2f 93       	push	r18
    3a7a:	3f 93       	push	r19
    3a7c:	4f 93       	push	r20
    3a7e:	5f 93       	push	r21
    3a80:	6f 93       	push	r22
    3a82:	7f 93       	push	r23
    3a84:	8f 93       	push	r24
    3a86:	9f 93       	push	r25
    3a88:	af 93       	push	r26
    3a8a:	bf 93       	push	r27
    3a8c:	ef 93       	push	r30
    3a8e:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    3a90:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <tc_tcd0_ccd_callback>
    3a94:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <tc_tcd0_ccd_callback+0x1>
    3a98:	30 97       	sbiw	r30, 0x00	; 0
    3a9a:	09 f0       	breq	.+2      	; 0x3a9e <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    3a9c:	19 95       	eicall
	}
}
    3a9e:	ff 91       	pop	r31
    3aa0:	ef 91       	pop	r30
    3aa2:	bf 91       	pop	r27
    3aa4:	af 91       	pop	r26
    3aa6:	9f 91       	pop	r25
    3aa8:	8f 91       	pop	r24
    3aaa:	7f 91       	pop	r23
    3aac:	6f 91       	pop	r22
    3aae:	5f 91       	pop	r21
    3ab0:	4f 91       	pop	r20
    3ab2:	3f 91       	pop	r19
    3ab4:	2f 91       	pop	r18
    3ab6:	0f 90       	pop	r0
    3ab8:	0b be       	out	0x3b, r0	; 59
    3aba:	0f 90       	pop	r0
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	0f 90       	pop	r0
    3ac0:	1f 90       	pop	r1
    3ac2:	18 95       	reti

00003ac4 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    3ac4:	1f 92       	push	r1
    3ac6:	0f 92       	push	r0
    3ac8:	0f b6       	in	r0, 0x3f	; 63
    3aca:	0f 92       	push	r0
    3acc:	11 24       	eor	r1, r1
    3ace:	0b b6       	in	r0, 0x3b	; 59
    3ad0:	0f 92       	push	r0
    3ad2:	2f 93       	push	r18
    3ad4:	3f 93       	push	r19
    3ad6:	4f 93       	push	r20
    3ad8:	5f 93       	push	r21
    3ada:	6f 93       	push	r22
    3adc:	7f 93       	push	r23
    3ade:	8f 93       	push	r24
    3ae0:	9f 93       	push	r25
    3ae2:	af 93       	push	r26
    3ae4:	bf 93       	push	r27
    3ae6:	ef 93       	push	r30
    3ae8:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    3aea:	e0 91 78 23 	lds	r30, 0x2378	; 0x802378 <tc_tcd1_ovf_callback>
    3aee:	f0 91 79 23 	lds	r31, 0x2379	; 0x802379 <tc_tcd1_ovf_callback+0x1>
    3af2:	30 97       	sbiw	r30, 0x00	; 0
    3af4:	09 f0       	breq	.+2      	; 0x3af8 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    3af6:	19 95       	eicall
	}
}
    3af8:	ff 91       	pop	r31
    3afa:	ef 91       	pop	r30
    3afc:	bf 91       	pop	r27
    3afe:	af 91       	pop	r26
    3b00:	9f 91       	pop	r25
    3b02:	8f 91       	pop	r24
    3b04:	7f 91       	pop	r23
    3b06:	6f 91       	pop	r22
    3b08:	5f 91       	pop	r21
    3b0a:	4f 91       	pop	r20
    3b0c:	3f 91       	pop	r19
    3b0e:	2f 91       	pop	r18
    3b10:	0f 90       	pop	r0
    3b12:	0b be       	out	0x3b, r0	; 59
    3b14:	0f 90       	pop	r0
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	0f 90       	pop	r0
    3b1a:	1f 90       	pop	r1
    3b1c:	18 95       	reti

00003b1e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    3b1e:	1f 92       	push	r1
    3b20:	0f 92       	push	r0
    3b22:	0f b6       	in	r0, 0x3f	; 63
    3b24:	0f 92       	push	r0
    3b26:	11 24       	eor	r1, r1
    3b28:	0b b6       	in	r0, 0x3b	; 59
    3b2a:	0f 92       	push	r0
    3b2c:	2f 93       	push	r18
    3b2e:	3f 93       	push	r19
    3b30:	4f 93       	push	r20
    3b32:	5f 93       	push	r21
    3b34:	6f 93       	push	r22
    3b36:	7f 93       	push	r23
    3b38:	8f 93       	push	r24
    3b3a:	9f 93       	push	r25
    3b3c:	af 93       	push	r26
    3b3e:	bf 93       	push	r27
    3b40:	ef 93       	push	r30
    3b42:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    3b44:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <tc_tcd1_err_callback>
    3b48:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <tc_tcd1_err_callback+0x1>
    3b4c:	30 97       	sbiw	r30, 0x00	; 0
    3b4e:	09 f0       	breq	.+2      	; 0x3b52 <__vector_84+0x34>
		tc_tcd1_err_callback();
    3b50:	19 95       	eicall
	}
}
    3b52:	ff 91       	pop	r31
    3b54:	ef 91       	pop	r30
    3b56:	bf 91       	pop	r27
    3b58:	af 91       	pop	r26
    3b5a:	9f 91       	pop	r25
    3b5c:	8f 91       	pop	r24
    3b5e:	7f 91       	pop	r23
    3b60:	6f 91       	pop	r22
    3b62:	5f 91       	pop	r21
    3b64:	4f 91       	pop	r20
    3b66:	3f 91       	pop	r19
    3b68:	2f 91       	pop	r18
    3b6a:	0f 90       	pop	r0
    3b6c:	0b be       	out	0x3b, r0	; 59
    3b6e:	0f 90       	pop	r0
    3b70:	0f be       	out	0x3f, r0	; 63
    3b72:	0f 90       	pop	r0
    3b74:	1f 90       	pop	r1
    3b76:	18 95       	reti

00003b78 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    3b78:	1f 92       	push	r1
    3b7a:	0f 92       	push	r0
    3b7c:	0f b6       	in	r0, 0x3f	; 63
    3b7e:	0f 92       	push	r0
    3b80:	11 24       	eor	r1, r1
    3b82:	0b b6       	in	r0, 0x3b	; 59
    3b84:	0f 92       	push	r0
    3b86:	2f 93       	push	r18
    3b88:	3f 93       	push	r19
    3b8a:	4f 93       	push	r20
    3b8c:	5f 93       	push	r21
    3b8e:	6f 93       	push	r22
    3b90:	7f 93       	push	r23
    3b92:	8f 93       	push	r24
    3b94:	9f 93       	push	r25
    3b96:	af 93       	push	r26
    3b98:	bf 93       	push	r27
    3b9a:	ef 93       	push	r30
    3b9c:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    3b9e:	e0 91 74 23 	lds	r30, 0x2374	; 0x802374 <tc_tcd1_cca_callback>
    3ba2:	f0 91 75 23 	lds	r31, 0x2375	; 0x802375 <tc_tcd1_cca_callback+0x1>
    3ba6:	30 97       	sbiw	r30, 0x00	; 0
    3ba8:	09 f0       	breq	.+2      	; 0x3bac <__vector_85+0x34>
		tc_tcd1_cca_callback();
    3baa:	19 95       	eicall
	}
}
    3bac:	ff 91       	pop	r31
    3bae:	ef 91       	pop	r30
    3bb0:	bf 91       	pop	r27
    3bb2:	af 91       	pop	r26
    3bb4:	9f 91       	pop	r25
    3bb6:	8f 91       	pop	r24
    3bb8:	7f 91       	pop	r23
    3bba:	6f 91       	pop	r22
    3bbc:	5f 91       	pop	r21
    3bbe:	4f 91       	pop	r20
    3bc0:	3f 91       	pop	r19
    3bc2:	2f 91       	pop	r18
    3bc4:	0f 90       	pop	r0
    3bc6:	0b be       	out	0x3b, r0	; 59
    3bc8:	0f 90       	pop	r0
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	0f 90       	pop	r0
    3bce:	1f 90       	pop	r1
    3bd0:	18 95       	reti

00003bd2 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    3bd2:	1f 92       	push	r1
    3bd4:	0f 92       	push	r0
    3bd6:	0f b6       	in	r0, 0x3f	; 63
    3bd8:	0f 92       	push	r0
    3bda:	11 24       	eor	r1, r1
    3bdc:	0b b6       	in	r0, 0x3b	; 59
    3bde:	0f 92       	push	r0
    3be0:	2f 93       	push	r18
    3be2:	3f 93       	push	r19
    3be4:	4f 93       	push	r20
    3be6:	5f 93       	push	r21
    3be8:	6f 93       	push	r22
    3bea:	7f 93       	push	r23
    3bec:	8f 93       	push	r24
    3bee:	9f 93       	push	r25
    3bf0:	af 93       	push	r26
    3bf2:	bf 93       	push	r27
    3bf4:	ef 93       	push	r30
    3bf6:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    3bf8:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <tc_tcd1_ccb_callback>
    3bfc:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <tc_tcd1_ccb_callback+0x1>
    3c00:	30 97       	sbiw	r30, 0x00	; 0
    3c02:	09 f0       	breq	.+2      	; 0x3c06 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    3c04:	19 95       	eicall
	}
}
    3c06:	ff 91       	pop	r31
    3c08:	ef 91       	pop	r30
    3c0a:	bf 91       	pop	r27
    3c0c:	af 91       	pop	r26
    3c0e:	9f 91       	pop	r25
    3c10:	8f 91       	pop	r24
    3c12:	7f 91       	pop	r23
    3c14:	6f 91       	pop	r22
    3c16:	5f 91       	pop	r21
    3c18:	4f 91       	pop	r20
    3c1a:	3f 91       	pop	r19
    3c1c:	2f 91       	pop	r18
    3c1e:	0f 90       	pop	r0
    3c20:	0b be       	out	0x3b, r0	; 59
    3c22:	0f 90       	pop	r0
    3c24:	0f be       	out	0x3f, r0	; 63
    3c26:	0f 90       	pop	r0
    3c28:	1f 90       	pop	r1
    3c2a:	18 95       	reti

00003c2c <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    3c2c:	1f 92       	push	r1
    3c2e:	0f 92       	push	r0
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	0f 92       	push	r0
    3c34:	11 24       	eor	r1, r1
    3c36:	0b b6       	in	r0, 0x3b	; 59
    3c38:	0f 92       	push	r0
    3c3a:	2f 93       	push	r18
    3c3c:	3f 93       	push	r19
    3c3e:	4f 93       	push	r20
    3c40:	5f 93       	push	r21
    3c42:	6f 93       	push	r22
    3c44:	7f 93       	push	r23
    3c46:	8f 93       	push	r24
    3c48:	9f 93       	push	r25
    3c4a:	af 93       	push	r26
    3c4c:	bf 93       	push	r27
    3c4e:	ef 93       	push	r30
    3c50:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    3c52:	e0 91 70 23 	lds	r30, 0x2370	; 0x802370 <tc_tce0_ovf_callback>
    3c56:	f0 91 71 23 	lds	r31, 0x2371	; 0x802371 <tc_tce0_ovf_callback+0x1>
    3c5a:	30 97       	sbiw	r30, 0x00	; 0
    3c5c:	09 f0       	breq	.+2      	; 0x3c60 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    3c5e:	19 95       	eicall
	}
}
    3c60:	ff 91       	pop	r31
    3c62:	ef 91       	pop	r30
    3c64:	bf 91       	pop	r27
    3c66:	af 91       	pop	r26
    3c68:	9f 91       	pop	r25
    3c6a:	8f 91       	pop	r24
    3c6c:	7f 91       	pop	r23
    3c6e:	6f 91       	pop	r22
    3c70:	5f 91       	pop	r21
    3c72:	4f 91       	pop	r20
    3c74:	3f 91       	pop	r19
    3c76:	2f 91       	pop	r18
    3c78:	0f 90       	pop	r0
    3c7a:	0b be       	out	0x3b, r0	; 59
    3c7c:	0f 90       	pop	r0
    3c7e:	0f be       	out	0x3f, r0	; 63
    3c80:	0f 90       	pop	r0
    3c82:	1f 90       	pop	r1
    3c84:	18 95       	reti

00003c86 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    3c86:	1f 92       	push	r1
    3c88:	0f 92       	push	r0
    3c8a:	0f b6       	in	r0, 0x3f	; 63
    3c8c:	0f 92       	push	r0
    3c8e:	11 24       	eor	r1, r1
    3c90:	0b b6       	in	r0, 0x3b	; 59
    3c92:	0f 92       	push	r0
    3c94:	2f 93       	push	r18
    3c96:	3f 93       	push	r19
    3c98:	4f 93       	push	r20
    3c9a:	5f 93       	push	r21
    3c9c:	6f 93       	push	r22
    3c9e:	7f 93       	push	r23
    3ca0:	8f 93       	push	r24
    3ca2:	9f 93       	push	r25
    3ca4:	af 93       	push	r26
    3ca6:	bf 93       	push	r27
    3ca8:	ef 93       	push	r30
    3caa:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    3cac:	e0 91 6e 23 	lds	r30, 0x236E	; 0x80236e <tc_tce0_err_callback>
    3cb0:	f0 91 6f 23 	lds	r31, 0x236F	; 0x80236f <tc_tce0_err_callback+0x1>
    3cb4:	30 97       	sbiw	r30, 0x00	; 0
    3cb6:	09 f0       	breq	.+2      	; 0x3cba <__vector_48+0x34>
		tc_tce0_err_callback();
    3cb8:	19 95       	eicall
	}
}
    3cba:	ff 91       	pop	r31
    3cbc:	ef 91       	pop	r30
    3cbe:	bf 91       	pop	r27
    3cc0:	af 91       	pop	r26
    3cc2:	9f 91       	pop	r25
    3cc4:	8f 91       	pop	r24
    3cc6:	7f 91       	pop	r23
    3cc8:	6f 91       	pop	r22
    3cca:	5f 91       	pop	r21
    3ccc:	4f 91       	pop	r20
    3cce:	3f 91       	pop	r19
    3cd0:	2f 91       	pop	r18
    3cd2:	0f 90       	pop	r0
    3cd4:	0b be       	out	0x3b, r0	; 59
    3cd6:	0f 90       	pop	r0
    3cd8:	0f be       	out	0x3f, r0	; 63
    3cda:	0f 90       	pop	r0
    3cdc:	1f 90       	pop	r1
    3cde:	18 95       	reti

00003ce0 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    3ce0:	1f 92       	push	r1
    3ce2:	0f 92       	push	r0
    3ce4:	0f b6       	in	r0, 0x3f	; 63
    3ce6:	0f 92       	push	r0
    3ce8:	11 24       	eor	r1, r1
    3cea:	0b b6       	in	r0, 0x3b	; 59
    3cec:	0f 92       	push	r0
    3cee:	2f 93       	push	r18
    3cf0:	3f 93       	push	r19
    3cf2:	4f 93       	push	r20
    3cf4:	5f 93       	push	r21
    3cf6:	6f 93       	push	r22
    3cf8:	7f 93       	push	r23
    3cfa:	8f 93       	push	r24
    3cfc:	9f 93       	push	r25
    3cfe:	af 93       	push	r26
    3d00:	bf 93       	push	r27
    3d02:	ef 93       	push	r30
    3d04:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    3d06:	e0 91 6c 23 	lds	r30, 0x236C	; 0x80236c <tc_tce0_cca_callback>
    3d0a:	f0 91 6d 23 	lds	r31, 0x236D	; 0x80236d <tc_tce0_cca_callback+0x1>
    3d0e:	30 97       	sbiw	r30, 0x00	; 0
    3d10:	09 f0       	breq	.+2      	; 0x3d14 <__vector_49+0x34>
		tc_tce0_cca_callback();
    3d12:	19 95       	eicall
	}
}
    3d14:	ff 91       	pop	r31
    3d16:	ef 91       	pop	r30
    3d18:	bf 91       	pop	r27
    3d1a:	af 91       	pop	r26
    3d1c:	9f 91       	pop	r25
    3d1e:	8f 91       	pop	r24
    3d20:	7f 91       	pop	r23
    3d22:	6f 91       	pop	r22
    3d24:	5f 91       	pop	r21
    3d26:	4f 91       	pop	r20
    3d28:	3f 91       	pop	r19
    3d2a:	2f 91       	pop	r18
    3d2c:	0f 90       	pop	r0
    3d2e:	0b be       	out	0x3b, r0	; 59
    3d30:	0f 90       	pop	r0
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	0f 90       	pop	r0
    3d36:	1f 90       	pop	r1
    3d38:	18 95       	reti

00003d3a <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    3d3a:	1f 92       	push	r1
    3d3c:	0f 92       	push	r0
    3d3e:	0f b6       	in	r0, 0x3f	; 63
    3d40:	0f 92       	push	r0
    3d42:	11 24       	eor	r1, r1
    3d44:	0b b6       	in	r0, 0x3b	; 59
    3d46:	0f 92       	push	r0
    3d48:	2f 93       	push	r18
    3d4a:	3f 93       	push	r19
    3d4c:	4f 93       	push	r20
    3d4e:	5f 93       	push	r21
    3d50:	6f 93       	push	r22
    3d52:	7f 93       	push	r23
    3d54:	8f 93       	push	r24
    3d56:	9f 93       	push	r25
    3d58:	af 93       	push	r26
    3d5a:	bf 93       	push	r27
    3d5c:	ef 93       	push	r30
    3d5e:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    3d60:	e0 91 6a 23 	lds	r30, 0x236A	; 0x80236a <tc_tce0_ccb_callback>
    3d64:	f0 91 6b 23 	lds	r31, 0x236B	; 0x80236b <tc_tce0_ccb_callback+0x1>
    3d68:	30 97       	sbiw	r30, 0x00	; 0
    3d6a:	09 f0       	breq	.+2      	; 0x3d6e <__vector_50+0x34>
		tc_tce0_ccb_callback();
    3d6c:	19 95       	eicall
	}
}
    3d6e:	ff 91       	pop	r31
    3d70:	ef 91       	pop	r30
    3d72:	bf 91       	pop	r27
    3d74:	af 91       	pop	r26
    3d76:	9f 91       	pop	r25
    3d78:	8f 91       	pop	r24
    3d7a:	7f 91       	pop	r23
    3d7c:	6f 91       	pop	r22
    3d7e:	5f 91       	pop	r21
    3d80:	4f 91       	pop	r20
    3d82:	3f 91       	pop	r19
    3d84:	2f 91       	pop	r18
    3d86:	0f 90       	pop	r0
    3d88:	0b be       	out	0x3b, r0	; 59
    3d8a:	0f 90       	pop	r0
    3d8c:	0f be       	out	0x3f, r0	; 63
    3d8e:	0f 90       	pop	r0
    3d90:	1f 90       	pop	r1
    3d92:	18 95       	reti

00003d94 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    3d94:	1f 92       	push	r1
    3d96:	0f 92       	push	r0
    3d98:	0f b6       	in	r0, 0x3f	; 63
    3d9a:	0f 92       	push	r0
    3d9c:	11 24       	eor	r1, r1
    3d9e:	0b b6       	in	r0, 0x3b	; 59
    3da0:	0f 92       	push	r0
    3da2:	2f 93       	push	r18
    3da4:	3f 93       	push	r19
    3da6:	4f 93       	push	r20
    3da8:	5f 93       	push	r21
    3daa:	6f 93       	push	r22
    3dac:	7f 93       	push	r23
    3dae:	8f 93       	push	r24
    3db0:	9f 93       	push	r25
    3db2:	af 93       	push	r26
    3db4:	bf 93       	push	r27
    3db6:	ef 93       	push	r30
    3db8:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    3dba:	e0 91 68 23 	lds	r30, 0x2368	; 0x802368 <tc_tce0_ccc_callback>
    3dbe:	f0 91 69 23 	lds	r31, 0x2369	; 0x802369 <tc_tce0_ccc_callback+0x1>
    3dc2:	30 97       	sbiw	r30, 0x00	; 0
    3dc4:	09 f0       	breq	.+2      	; 0x3dc8 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    3dc6:	19 95       	eicall
	}
}
    3dc8:	ff 91       	pop	r31
    3dca:	ef 91       	pop	r30
    3dcc:	bf 91       	pop	r27
    3dce:	af 91       	pop	r26
    3dd0:	9f 91       	pop	r25
    3dd2:	8f 91       	pop	r24
    3dd4:	7f 91       	pop	r23
    3dd6:	6f 91       	pop	r22
    3dd8:	5f 91       	pop	r21
    3dda:	4f 91       	pop	r20
    3ddc:	3f 91       	pop	r19
    3dde:	2f 91       	pop	r18
    3de0:	0f 90       	pop	r0
    3de2:	0b be       	out	0x3b, r0	; 59
    3de4:	0f 90       	pop	r0
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	0f 90       	pop	r0
    3dea:	1f 90       	pop	r1
    3dec:	18 95       	reti

00003dee <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    3dee:	1f 92       	push	r1
    3df0:	0f 92       	push	r0
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	0f 92       	push	r0
    3df6:	11 24       	eor	r1, r1
    3df8:	0b b6       	in	r0, 0x3b	; 59
    3dfa:	0f 92       	push	r0
    3dfc:	2f 93       	push	r18
    3dfe:	3f 93       	push	r19
    3e00:	4f 93       	push	r20
    3e02:	5f 93       	push	r21
    3e04:	6f 93       	push	r22
    3e06:	7f 93       	push	r23
    3e08:	8f 93       	push	r24
    3e0a:	9f 93       	push	r25
    3e0c:	af 93       	push	r26
    3e0e:	bf 93       	push	r27
    3e10:	ef 93       	push	r30
    3e12:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    3e14:	e0 91 66 23 	lds	r30, 0x2366	; 0x802366 <tc_tce0_ccd_callback>
    3e18:	f0 91 67 23 	lds	r31, 0x2367	; 0x802367 <tc_tce0_ccd_callback+0x1>
    3e1c:	30 97       	sbiw	r30, 0x00	; 0
    3e1e:	09 f0       	breq	.+2      	; 0x3e22 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    3e20:	19 95       	eicall
	}
}
    3e22:	ff 91       	pop	r31
    3e24:	ef 91       	pop	r30
    3e26:	bf 91       	pop	r27
    3e28:	af 91       	pop	r26
    3e2a:	9f 91       	pop	r25
    3e2c:	8f 91       	pop	r24
    3e2e:	7f 91       	pop	r23
    3e30:	6f 91       	pop	r22
    3e32:	5f 91       	pop	r21
    3e34:	4f 91       	pop	r20
    3e36:	3f 91       	pop	r19
    3e38:	2f 91       	pop	r18
    3e3a:	0f 90       	pop	r0
    3e3c:	0b be       	out	0x3b, r0	; 59
    3e3e:	0f 90       	pop	r0
    3e40:	0f be       	out	0x3f, r0	; 63
    3e42:	0f 90       	pop	r0
    3e44:	1f 90       	pop	r1
    3e46:	18 95       	reti

00003e48 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    3e48:	1f 92       	push	r1
    3e4a:	0f 92       	push	r0
    3e4c:	0f b6       	in	r0, 0x3f	; 63
    3e4e:	0f 92       	push	r0
    3e50:	11 24       	eor	r1, r1
    3e52:	0b b6       	in	r0, 0x3b	; 59
    3e54:	0f 92       	push	r0
    3e56:	2f 93       	push	r18
    3e58:	3f 93       	push	r19
    3e5a:	4f 93       	push	r20
    3e5c:	5f 93       	push	r21
    3e5e:	6f 93       	push	r22
    3e60:	7f 93       	push	r23
    3e62:	8f 93       	push	r24
    3e64:	9f 93       	push	r25
    3e66:	af 93       	push	r26
    3e68:	bf 93       	push	r27
    3e6a:	ef 93       	push	r30
    3e6c:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    3e6e:	e0 91 64 23 	lds	r30, 0x2364	; 0x802364 <tc_tce1_ovf_callback>
    3e72:	f0 91 65 23 	lds	r31, 0x2365	; 0x802365 <tc_tce1_ovf_callback+0x1>
    3e76:	30 97       	sbiw	r30, 0x00	; 0
    3e78:	09 f0       	breq	.+2      	; 0x3e7c <__vector_53+0x34>
		tc_tce1_ovf_callback();
    3e7a:	19 95       	eicall
	}
}
    3e7c:	ff 91       	pop	r31
    3e7e:	ef 91       	pop	r30
    3e80:	bf 91       	pop	r27
    3e82:	af 91       	pop	r26
    3e84:	9f 91       	pop	r25
    3e86:	8f 91       	pop	r24
    3e88:	7f 91       	pop	r23
    3e8a:	6f 91       	pop	r22
    3e8c:	5f 91       	pop	r21
    3e8e:	4f 91       	pop	r20
    3e90:	3f 91       	pop	r19
    3e92:	2f 91       	pop	r18
    3e94:	0f 90       	pop	r0
    3e96:	0b be       	out	0x3b, r0	; 59
    3e98:	0f 90       	pop	r0
    3e9a:	0f be       	out	0x3f, r0	; 63
    3e9c:	0f 90       	pop	r0
    3e9e:	1f 90       	pop	r1
    3ea0:	18 95       	reti

00003ea2 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    3ea2:	1f 92       	push	r1
    3ea4:	0f 92       	push	r0
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	0f 92       	push	r0
    3eaa:	11 24       	eor	r1, r1
    3eac:	0b b6       	in	r0, 0x3b	; 59
    3eae:	0f 92       	push	r0
    3eb0:	2f 93       	push	r18
    3eb2:	3f 93       	push	r19
    3eb4:	4f 93       	push	r20
    3eb6:	5f 93       	push	r21
    3eb8:	6f 93       	push	r22
    3eba:	7f 93       	push	r23
    3ebc:	8f 93       	push	r24
    3ebe:	9f 93       	push	r25
    3ec0:	af 93       	push	r26
    3ec2:	bf 93       	push	r27
    3ec4:	ef 93       	push	r30
    3ec6:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    3ec8:	e0 91 62 23 	lds	r30, 0x2362	; 0x802362 <tc_tce1_err_callback>
    3ecc:	f0 91 63 23 	lds	r31, 0x2363	; 0x802363 <tc_tce1_err_callback+0x1>
    3ed0:	30 97       	sbiw	r30, 0x00	; 0
    3ed2:	09 f0       	breq	.+2      	; 0x3ed6 <__vector_54+0x34>
		tc_tce1_err_callback();
    3ed4:	19 95       	eicall
	}
}
    3ed6:	ff 91       	pop	r31
    3ed8:	ef 91       	pop	r30
    3eda:	bf 91       	pop	r27
    3edc:	af 91       	pop	r26
    3ede:	9f 91       	pop	r25
    3ee0:	8f 91       	pop	r24
    3ee2:	7f 91       	pop	r23
    3ee4:	6f 91       	pop	r22
    3ee6:	5f 91       	pop	r21
    3ee8:	4f 91       	pop	r20
    3eea:	3f 91       	pop	r19
    3eec:	2f 91       	pop	r18
    3eee:	0f 90       	pop	r0
    3ef0:	0b be       	out	0x3b, r0	; 59
    3ef2:	0f 90       	pop	r0
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	0f 90       	pop	r0
    3ef8:	1f 90       	pop	r1
    3efa:	18 95       	reti

00003efc <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    3efc:	1f 92       	push	r1
    3efe:	0f 92       	push	r0
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	0f 92       	push	r0
    3f04:	11 24       	eor	r1, r1
    3f06:	0b b6       	in	r0, 0x3b	; 59
    3f08:	0f 92       	push	r0
    3f0a:	2f 93       	push	r18
    3f0c:	3f 93       	push	r19
    3f0e:	4f 93       	push	r20
    3f10:	5f 93       	push	r21
    3f12:	6f 93       	push	r22
    3f14:	7f 93       	push	r23
    3f16:	8f 93       	push	r24
    3f18:	9f 93       	push	r25
    3f1a:	af 93       	push	r26
    3f1c:	bf 93       	push	r27
    3f1e:	ef 93       	push	r30
    3f20:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    3f22:	e0 91 60 23 	lds	r30, 0x2360	; 0x802360 <tc_tce1_cca_callback>
    3f26:	f0 91 61 23 	lds	r31, 0x2361	; 0x802361 <tc_tce1_cca_callback+0x1>
    3f2a:	30 97       	sbiw	r30, 0x00	; 0
    3f2c:	09 f0       	breq	.+2      	; 0x3f30 <__vector_55+0x34>
		tc_tce1_cca_callback();
    3f2e:	19 95       	eicall
	}
}
    3f30:	ff 91       	pop	r31
    3f32:	ef 91       	pop	r30
    3f34:	bf 91       	pop	r27
    3f36:	af 91       	pop	r26
    3f38:	9f 91       	pop	r25
    3f3a:	8f 91       	pop	r24
    3f3c:	7f 91       	pop	r23
    3f3e:	6f 91       	pop	r22
    3f40:	5f 91       	pop	r21
    3f42:	4f 91       	pop	r20
    3f44:	3f 91       	pop	r19
    3f46:	2f 91       	pop	r18
    3f48:	0f 90       	pop	r0
    3f4a:	0b be       	out	0x3b, r0	; 59
    3f4c:	0f 90       	pop	r0
    3f4e:	0f be       	out	0x3f, r0	; 63
    3f50:	0f 90       	pop	r0
    3f52:	1f 90       	pop	r1
    3f54:	18 95       	reti

00003f56 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    3f56:	1f 92       	push	r1
    3f58:	0f 92       	push	r0
    3f5a:	0f b6       	in	r0, 0x3f	; 63
    3f5c:	0f 92       	push	r0
    3f5e:	11 24       	eor	r1, r1
    3f60:	0b b6       	in	r0, 0x3b	; 59
    3f62:	0f 92       	push	r0
    3f64:	2f 93       	push	r18
    3f66:	3f 93       	push	r19
    3f68:	4f 93       	push	r20
    3f6a:	5f 93       	push	r21
    3f6c:	6f 93       	push	r22
    3f6e:	7f 93       	push	r23
    3f70:	8f 93       	push	r24
    3f72:	9f 93       	push	r25
    3f74:	af 93       	push	r26
    3f76:	bf 93       	push	r27
    3f78:	ef 93       	push	r30
    3f7a:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    3f7c:	e0 91 5e 23 	lds	r30, 0x235E	; 0x80235e <tc_tce1_ccb_callback>
    3f80:	f0 91 5f 23 	lds	r31, 0x235F	; 0x80235f <tc_tce1_ccb_callback+0x1>
    3f84:	30 97       	sbiw	r30, 0x00	; 0
    3f86:	09 f0       	breq	.+2      	; 0x3f8a <__vector_56+0x34>
		tc_tce1_ccb_callback();
    3f88:	19 95       	eicall
	}
}
    3f8a:	ff 91       	pop	r31
    3f8c:	ef 91       	pop	r30
    3f8e:	bf 91       	pop	r27
    3f90:	af 91       	pop	r26
    3f92:	9f 91       	pop	r25
    3f94:	8f 91       	pop	r24
    3f96:	7f 91       	pop	r23
    3f98:	6f 91       	pop	r22
    3f9a:	5f 91       	pop	r21
    3f9c:	4f 91       	pop	r20
    3f9e:	3f 91       	pop	r19
    3fa0:	2f 91       	pop	r18
    3fa2:	0f 90       	pop	r0
    3fa4:	0b be       	out	0x3b, r0	; 59
    3fa6:	0f 90       	pop	r0
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	0f 90       	pop	r0
    3fac:	1f 90       	pop	r1
    3fae:	18 95       	reti

00003fb0 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    3fb0:	1f 92       	push	r1
    3fb2:	0f 92       	push	r0
    3fb4:	0f b6       	in	r0, 0x3f	; 63
    3fb6:	0f 92       	push	r0
    3fb8:	11 24       	eor	r1, r1
    3fba:	0b b6       	in	r0, 0x3b	; 59
    3fbc:	0f 92       	push	r0
    3fbe:	2f 93       	push	r18
    3fc0:	3f 93       	push	r19
    3fc2:	4f 93       	push	r20
    3fc4:	5f 93       	push	r21
    3fc6:	6f 93       	push	r22
    3fc8:	7f 93       	push	r23
    3fca:	8f 93       	push	r24
    3fcc:	9f 93       	push	r25
    3fce:	af 93       	push	r26
    3fd0:	bf 93       	push	r27
    3fd2:	ef 93       	push	r30
    3fd4:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    3fd6:	e0 91 5c 23 	lds	r30, 0x235C	; 0x80235c <tc_tcf0_ovf_callback>
    3fda:	f0 91 5d 23 	lds	r31, 0x235D	; 0x80235d <tc_tcf0_ovf_callback+0x1>
    3fde:	30 97       	sbiw	r30, 0x00	; 0
    3fe0:	09 f0       	breq	.+2      	; 0x3fe4 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    3fe2:	19 95       	eicall
	}
}
    3fe4:	ff 91       	pop	r31
    3fe6:	ef 91       	pop	r30
    3fe8:	bf 91       	pop	r27
    3fea:	af 91       	pop	r26
    3fec:	9f 91       	pop	r25
    3fee:	8f 91       	pop	r24
    3ff0:	7f 91       	pop	r23
    3ff2:	6f 91       	pop	r22
    3ff4:	5f 91       	pop	r21
    3ff6:	4f 91       	pop	r20
    3ff8:	3f 91       	pop	r19
    3ffa:	2f 91       	pop	r18
    3ffc:	0f 90       	pop	r0
    3ffe:	0b be       	out	0x3b, r0	; 59
    4000:	0f 90       	pop	r0
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	0f 90       	pop	r0
    4006:	1f 90       	pop	r1
    4008:	18 95       	reti

0000400a <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    400a:	1f 92       	push	r1
    400c:	0f 92       	push	r0
    400e:	0f b6       	in	r0, 0x3f	; 63
    4010:	0f 92       	push	r0
    4012:	11 24       	eor	r1, r1
    4014:	0b b6       	in	r0, 0x3b	; 59
    4016:	0f 92       	push	r0
    4018:	2f 93       	push	r18
    401a:	3f 93       	push	r19
    401c:	4f 93       	push	r20
    401e:	5f 93       	push	r21
    4020:	6f 93       	push	r22
    4022:	7f 93       	push	r23
    4024:	8f 93       	push	r24
    4026:	9f 93       	push	r25
    4028:	af 93       	push	r26
    402a:	bf 93       	push	r27
    402c:	ef 93       	push	r30
    402e:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    4030:	e0 91 5a 23 	lds	r30, 0x235A	; 0x80235a <tc_tcf0_err_callback>
    4034:	f0 91 5b 23 	lds	r31, 0x235B	; 0x80235b <tc_tcf0_err_callback+0x1>
    4038:	30 97       	sbiw	r30, 0x00	; 0
    403a:	09 f0       	breq	.+2      	; 0x403e <__vector_109+0x34>
		tc_tcf0_err_callback();
    403c:	19 95       	eicall
	}
}
    403e:	ff 91       	pop	r31
    4040:	ef 91       	pop	r30
    4042:	bf 91       	pop	r27
    4044:	af 91       	pop	r26
    4046:	9f 91       	pop	r25
    4048:	8f 91       	pop	r24
    404a:	7f 91       	pop	r23
    404c:	6f 91       	pop	r22
    404e:	5f 91       	pop	r21
    4050:	4f 91       	pop	r20
    4052:	3f 91       	pop	r19
    4054:	2f 91       	pop	r18
    4056:	0f 90       	pop	r0
    4058:	0b be       	out	0x3b, r0	; 59
    405a:	0f 90       	pop	r0
    405c:	0f be       	out	0x3f, r0	; 63
    405e:	0f 90       	pop	r0
    4060:	1f 90       	pop	r1
    4062:	18 95       	reti

00004064 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    4064:	1f 92       	push	r1
    4066:	0f 92       	push	r0
    4068:	0f b6       	in	r0, 0x3f	; 63
    406a:	0f 92       	push	r0
    406c:	11 24       	eor	r1, r1
    406e:	0b b6       	in	r0, 0x3b	; 59
    4070:	0f 92       	push	r0
    4072:	2f 93       	push	r18
    4074:	3f 93       	push	r19
    4076:	4f 93       	push	r20
    4078:	5f 93       	push	r21
    407a:	6f 93       	push	r22
    407c:	7f 93       	push	r23
    407e:	8f 93       	push	r24
    4080:	9f 93       	push	r25
    4082:	af 93       	push	r26
    4084:	bf 93       	push	r27
    4086:	ef 93       	push	r30
    4088:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    408a:	e0 91 58 23 	lds	r30, 0x2358	; 0x802358 <tc_tcf0_cca_callback>
    408e:	f0 91 59 23 	lds	r31, 0x2359	; 0x802359 <tc_tcf0_cca_callback+0x1>
    4092:	30 97       	sbiw	r30, 0x00	; 0
    4094:	09 f0       	breq	.+2      	; 0x4098 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    4096:	19 95       	eicall
	}
}
    4098:	ff 91       	pop	r31
    409a:	ef 91       	pop	r30
    409c:	bf 91       	pop	r27
    409e:	af 91       	pop	r26
    40a0:	9f 91       	pop	r25
    40a2:	8f 91       	pop	r24
    40a4:	7f 91       	pop	r23
    40a6:	6f 91       	pop	r22
    40a8:	5f 91       	pop	r21
    40aa:	4f 91       	pop	r20
    40ac:	3f 91       	pop	r19
    40ae:	2f 91       	pop	r18
    40b0:	0f 90       	pop	r0
    40b2:	0b be       	out	0x3b, r0	; 59
    40b4:	0f 90       	pop	r0
    40b6:	0f be       	out	0x3f, r0	; 63
    40b8:	0f 90       	pop	r0
    40ba:	1f 90       	pop	r1
    40bc:	18 95       	reti

000040be <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    40be:	1f 92       	push	r1
    40c0:	0f 92       	push	r0
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	0f 92       	push	r0
    40c6:	11 24       	eor	r1, r1
    40c8:	0b b6       	in	r0, 0x3b	; 59
    40ca:	0f 92       	push	r0
    40cc:	2f 93       	push	r18
    40ce:	3f 93       	push	r19
    40d0:	4f 93       	push	r20
    40d2:	5f 93       	push	r21
    40d4:	6f 93       	push	r22
    40d6:	7f 93       	push	r23
    40d8:	8f 93       	push	r24
    40da:	9f 93       	push	r25
    40dc:	af 93       	push	r26
    40de:	bf 93       	push	r27
    40e0:	ef 93       	push	r30
    40e2:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    40e4:	e0 91 56 23 	lds	r30, 0x2356	; 0x802356 <tc_tcf0_ccb_callback>
    40e8:	f0 91 57 23 	lds	r31, 0x2357	; 0x802357 <tc_tcf0_ccb_callback+0x1>
    40ec:	30 97       	sbiw	r30, 0x00	; 0
    40ee:	09 f0       	breq	.+2      	; 0x40f2 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    40f0:	19 95       	eicall
	}
}
    40f2:	ff 91       	pop	r31
    40f4:	ef 91       	pop	r30
    40f6:	bf 91       	pop	r27
    40f8:	af 91       	pop	r26
    40fa:	9f 91       	pop	r25
    40fc:	8f 91       	pop	r24
    40fe:	7f 91       	pop	r23
    4100:	6f 91       	pop	r22
    4102:	5f 91       	pop	r21
    4104:	4f 91       	pop	r20
    4106:	3f 91       	pop	r19
    4108:	2f 91       	pop	r18
    410a:	0f 90       	pop	r0
    410c:	0b be       	out	0x3b, r0	; 59
    410e:	0f 90       	pop	r0
    4110:	0f be       	out	0x3f, r0	; 63
    4112:	0f 90       	pop	r0
    4114:	1f 90       	pop	r1
    4116:	18 95       	reti

00004118 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    4118:	1f 92       	push	r1
    411a:	0f 92       	push	r0
    411c:	0f b6       	in	r0, 0x3f	; 63
    411e:	0f 92       	push	r0
    4120:	11 24       	eor	r1, r1
    4122:	0b b6       	in	r0, 0x3b	; 59
    4124:	0f 92       	push	r0
    4126:	2f 93       	push	r18
    4128:	3f 93       	push	r19
    412a:	4f 93       	push	r20
    412c:	5f 93       	push	r21
    412e:	6f 93       	push	r22
    4130:	7f 93       	push	r23
    4132:	8f 93       	push	r24
    4134:	9f 93       	push	r25
    4136:	af 93       	push	r26
    4138:	bf 93       	push	r27
    413a:	ef 93       	push	r30
    413c:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    413e:	e0 91 54 23 	lds	r30, 0x2354	; 0x802354 <tc_tcf0_ccc_callback>
    4142:	f0 91 55 23 	lds	r31, 0x2355	; 0x802355 <tc_tcf0_ccc_callback+0x1>
    4146:	30 97       	sbiw	r30, 0x00	; 0
    4148:	09 f0       	breq	.+2      	; 0x414c <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    414a:	19 95       	eicall
	}
}
    414c:	ff 91       	pop	r31
    414e:	ef 91       	pop	r30
    4150:	bf 91       	pop	r27
    4152:	af 91       	pop	r26
    4154:	9f 91       	pop	r25
    4156:	8f 91       	pop	r24
    4158:	7f 91       	pop	r23
    415a:	6f 91       	pop	r22
    415c:	5f 91       	pop	r21
    415e:	4f 91       	pop	r20
    4160:	3f 91       	pop	r19
    4162:	2f 91       	pop	r18
    4164:	0f 90       	pop	r0
    4166:	0b be       	out	0x3b, r0	; 59
    4168:	0f 90       	pop	r0
    416a:	0f be       	out	0x3f, r0	; 63
    416c:	0f 90       	pop	r0
    416e:	1f 90       	pop	r1
    4170:	18 95       	reti

00004172 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    4172:	1f 92       	push	r1
    4174:	0f 92       	push	r0
    4176:	0f b6       	in	r0, 0x3f	; 63
    4178:	0f 92       	push	r0
    417a:	11 24       	eor	r1, r1
    417c:	0b b6       	in	r0, 0x3b	; 59
    417e:	0f 92       	push	r0
    4180:	2f 93       	push	r18
    4182:	3f 93       	push	r19
    4184:	4f 93       	push	r20
    4186:	5f 93       	push	r21
    4188:	6f 93       	push	r22
    418a:	7f 93       	push	r23
    418c:	8f 93       	push	r24
    418e:	9f 93       	push	r25
    4190:	af 93       	push	r26
    4192:	bf 93       	push	r27
    4194:	ef 93       	push	r30
    4196:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    4198:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <tc_tcf0_ccd_callback>
    419c:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <tc_tcf0_ccd_callback+0x1>
    41a0:	30 97       	sbiw	r30, 0x00	; 0
    41a2:	09 f0       	breq	.+2      	; 0x41a6 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    41a4:	19 95       	eicall
	}
}
    41a6:	ff 91       	pop	r31
    41a8:	ef 91       	pop	r30
    41aa:	bf 91       	pop	r27
    41ac:	af 91       	pop	r26
    41ae:	9f 91       	pop	r25
    41b0:	8f 91       	pop	r24
    41b2:	7f 91       	pop	r23
    41b4:	6f 91       	pop	r22
    41b6:	5f 91       	pop	r21
    41b8:	4f 91       	pop	r20
    41ba:	3f 91       	pop	r19
    41bc:	2f 91       	pop	r18
    41be:	0f 90       	pop	r0
    41c0:	0b be       	out	0x3b, r0	; 59
    41c2:	0f 90       	pop	r0
    41c4:	0f be       	out	0x3f, r0	; 63
    41c6:	0f 90       	pop	r0
    41c8:	1f 90       	pop	r1
    41ca:	18 95       	reti

000041cc <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    41cc:	1f 93       	push	r17
    41ce:	cf 93       	push	r28
    41d0:	df 93       	push	r29
    41d2:	1f 92       	push	r1
    41d4:	1f 92       	push	r1
    41d6:	cd b7       	in	r28, 0x3d	; 61
    41d8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    41da:	2f b7       	in	r18, 0x3f	; 63
    41dc:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    41de:	f8 94       	cli
	return flags;
    41e0:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    41e2:	28 2f       	mov	r18, r24
    41e4:	39 2f       	mov	r19, r25
    41e6:	21 15       	cp	r18, r1
    41e8:	88 e0       	ldi	r24, 0x08	; 8
    41ea:	38 07       	cpc	r19, r24
    41ec:	49 f4       	brne	.+18     	; 0x4200 <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    41ee:	61 e0       	ldi	r22, 0x01	; 1
    41f0:	83 e0       	ldi	r24, 0x03	; 3
    41f2:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    41f6:	64 e0       	ldi	r22, 0x04	; 4
    41f8:	83 e0       	ldi	r24, 0x03	; 3
    41fa:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
    41fe:	4f c0       	rjmp	.+158    	; 0x429e <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    4200:	20 34       	cpi	r18, 0x40	; 64
    4202:	88 e0       	ldi	r24, 0x08	; 8
    4204:	38 07       	cpc	r19, r24
    4206:	49 f4       	brne	.+18     	; 0x421a <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    4208:	62 e0       	ldi	r22, 0x02	; 2
    420a:	83 e0       	ldi	r24, 0x03	; 3
    420c:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    4210:	64 e0       	ldi	r22, 0x04	; 4
    4212:	83 e0       	ldi	r24, 0x03	; 3
    4214:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
    4218:	42 c0       	rjmp	.+132    	; 0x429e <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    421a:	21 15       	cp	r18, r1
    421c:	89 e0       	ldi	r24, 0x09	; 9
    421e:	38 07       	cpc	r19, r24
    4220:	49 f4       	brne	.+18     	; 0x4234 <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    4222:	61 e0       	ldi	r22, 0x01	; 1
    4224:	84 e0       	ldi	r24, 0x04	; 4
    4226:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    422a:	64 e0       	ldi	r22, 0x04	; 4
    422c:	84 e0       	ldi	r24, 0x04	; 4
    422e:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
    4232:	35 c0       	rjmp	.+106    	; 0x429e <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    4234:	20 34       	cpi	r18, 0x40	; 64
    4236:	89 e0       	ldi	r24, 0x09	; 9
    4238:	38 07       	cpc	r19, r24
    423a:	49 f4       	brne	.+18     	; 0x424e <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    423c:	62 e0       	ldi	r22, 0x02	; 2
    423e:	84 e0       	ldi	r24, 0x04	; 4
    4240:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    4244:	64 e0       	ldi	r22, 0x04	; 4
    4246:	84 e0       	ldi	r24, 0x04	; 4
    4248:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
    424c:	28 c0       	rjmp	.+80     	; 0x429e <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    424e:	21 15       	cp	r18, r1
    4250:	8a e0       	ldi	r24, 0x0A	; 10
    4252:	38 07       	cpc	r19, r24
    4254:	49 f4       	brne	.+18     	; 0x4268 <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    4256:	61 e0       	ldi	r22, 0x01	; 1
    4258:	85 e0       	ldi	r24, 0x05	; 5
    425a:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    425e:	64 e0       	ldi	r22, 0x04	; 4
    4260:	85 e0       	ldi	r24, 0x05	; 5
    4262:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
    4266:	1b c0       	rjmp	.+54     	; 0x429e <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    4268:	20 34       	cpi	r18, 0x40	; 64
    426a:	8a e0       	ldi	r24, 0x0A	; 10
    426c:	38 07       	cpc	r19, r24
    426e:	49 f4       	brne	.+18     	; 0x4282 <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    4270:	62 e0       	ldi	r22, 0x02	; 2
    4272:	85 e0       	ldi	r24, 0x05	; 5
    4274:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    4278:	64 e0       	ldi	r22, 0x04	; 4
    427a:	85 e0       	ldi	r24, 0x05	; 5
    427c:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
    4280:	0e c0       	rjmp	.+28     	; 0x429e <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    4282:	21 15       	cp	r18, r1
    4284:	3b 40       	sbci	r19, 0x0B	; 11
    4286:	49 f4       	brne	.+18     	; 0x429a <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    4288:	61 e0       	ldi	r22, 0x01	; 1
    428a:	86 e0       	ldi	r24, 0x06	; 6
    428c:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    4290:	64 e0       	ldi	r22, 0x04	; 4
    4292:	86 e0       	ldi	r24, 0x06	; 6
    4294:	0e 94 13 33 	call	0x6626	; 0x6626 <sysclk_enable_module>
    4298:	02 c0       	rjmp	.+4      	; 0x429e <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    429a:	1f bf       	out	0x3f, r17	; 63
    429c:	10 c0       	rjmp	.+32     	; 0x42be <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    429e:	80 91 c4 27 	lds	r24, 0x27C4	; 0x8027c4 <sleepmgr_locks+0x1>
    42a2:	8f 3f       	cpi	r24, 0xFF	; 255
    42a4:	09 f4       	brne	.+2      	; 0x42a8 <tc_enable+0xdc>
    42a6:	ff cf       	rjmp	.-2      	; 0x42a6 <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    42a8:	8f b7       	in	r24, 0x3f	; 63
    42aa:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    42ac:	f8 94       	cli
	return flags;
    42ae:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    42b0:	e3 ec       	ldi	r30, 0xC3	; 195
    42b2:	f7 e2       	ldi	r31, 0x27	; 39
    42b4:	81 81       	ldd	r24, Z+1	; 0x01
    42b6:	8f 5f       	subi	r24, 0xFF	; 255
    42b8:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    42ba:	9f bf       	out	0x3f, r25	; 63
    42bc:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    42be:	0f 90       	pop	r0
    42c0:	0f 90       	pop	r0
    42c2:	df 91       	pop	r29
    42c4:	cf 91       	pop	r28
    42c6:	1f 91       	pop	r17
    42c8:	08 95       	ret

000042ca <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    42ca:	cf 93       	push	r28
    42cc:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    42ce:	e0 91 9a 23 	lds	r30, 0x239A	; 0x80239a <transfer>
    42d2:	f0 91 9b 23 	lds	r31, 0x239B	; 0x80239b <transfer+0x1>
    42d6:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    42d8:	83 ff       	sbrs	r24, 3
    42da:	08 c0       	rjmp	.+16     	; 0x42ec <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    42dc:	88 60       	ori	r24, 0x08	; 8
    42de:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    42e0:	83 e0       	ldi	r24, 0x03	; 3
    42e2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    42e4:	86 ef       	ldi	r24, 0xF6	; 246
    42e6:	80 93 a4 23 	sts	0x23A4, r24	; 0x8023a4 <transfer+0xa>
    42ea:	83 c0       	rjmp	.+262    	; 0x43f2 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    42ec:	98 2f       	mov	r25, r24
    42ee:	94 71       	andi	r25, 0x14	; 20
    42f0:	31 f0       	breq	.+12     	; 0x42fe <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    42f2:	83 e0       	ldi	r24, 0x03	; 3
    42f4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    42f6:	8f ef       	ldi	r24, 0xFF	; 255
    42f8:	80 93 a4 23 	sts	0x23A4, r24	; 0x8023a4 <transfer+0xa>
    42fc:	7a c0       	rjmp	.+244    	; 0x43f2 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    42fe:	86 ff       	sbrs	r24, 6
    4300:	43 c0       	rjmp	.+134    	; 0x4388 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    4302:	ca e9       	ldi	r28, 0x9A	; 154
    4304:	d3 e2       	ldi	r29, 0x23	; 35
    4306:	aa 81       	ldd	r26, Y+2	; 0x02
    4308:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    430a:	8c 81       	ldd	r24, Y+4	; 0x04
    430c:	9d 81       	ldd	r25, Y+5	; 0x05
    430e:	14 96       	adiw	r26, 0x04	; 4
    4310:	2d 91       	ld	r18, X+
    4312:	3c 91       	ld	r19, X
    4314:	15 97       	sbiw	r26, 0x05	; 5
    4316:	82 17       	cp	r24, r18
    4318:	93 07       	cpc	r25, r19
    431a:	6c f4       	brge	.+26     	; 0x4336 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    431c:	9c 01       	movw	r18, r24
    431e:	2f 5f       	subi	r18, 0xFF	; 255
    4320:	3f 4f       	sbci	r19, 0xFF	; 255
    4322:	20 93 9e 23 	sts	0x239E, r18	; 0x80239e <transfer+0x4>
    4326:	30 93 9f 23 	sts	0x239F, r19	; 0x80239f <transfer+0x5>
    432a:	a8 0f       	add	r26, r24
    432c:	b9 1f       	adc	r27, r25
    432e:	11 96       	adiw	r26, 0x01	; 1
    4330:	8c 91       	ld	r24, X
    4332:	87 83       	std	Z+7, r24	; 0x07
    4334:	5e c0       	rjmp	.+188    	; 0x43f2 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    4336:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <transfer+0x6>
    433a:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <transfer+0x7>
    433e:	18 96       	adiw	r26, 0x08	; 8
    4340:	2d 91       	ld	r18, X+
    4342:	3c 91       	ld	r19, X
    4344:	19 97       	sbiw	r26, 0x09	; 9
    4346:	82 17       	cp	r24, r18
    4348:	93 07       	cpc	r25, r19
    434a:	c8 f4       	brcc	.+50     	; 0x437e <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    434c:	20 91 a2 23 	lds	r18, 0x23A2	; 0x8023a2 <transfer+0x8>
    4350:	22 23       	and	r18, r18
    4352:	21 f0       	breq	.+8      	; 0x435c <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    4354:	86 81       	ldd	r24, Z+6	; 0x06
    4356:	81 60       	ori	r24, 0x01	; 1
    4358:	86 83       	std	Z+6, r24	; 0x06
    435a:	4b c0       	rjmp	.+150    	; 0x43f2 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    435c:	16 96       	adiw	r26, 0x06	; 6
    435e:	2d 91       	ld	r18, X+
    4360:	3c 91       	ld	r19, X
    4362:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    4364:	ac 01       	movw	r20, r24
    4366:	4f 5f       	subi	r20, 0xFF	; 255
    4368:	5f 4f       	sbci	r21, 0xFF	; 255
    436a:	40 93 a0 23 	sts	0x23A0, r20	; 0x8023a0 <transfer+0x6>
    436e:	50 93 a1 23 	sts	0x23A1, r21	; 0x8023a1 <transfer+0x7>
    4372:	d9 01       	movw	r26, r18
    4374:	a8 0f       	add	r26, r24
    4376:	b9 1f       	adc	r27, r25
    4378:	8c 91       	ld	r24, X
    437a:	87 83       	std	Z+7, r24	; 0x07
    437c:	3a c0       	rjmp	.+116    	; 0x43f2 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    437e:	83 e0       	ldi	r24, 0x03	; 3
    4380:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    4382:	10 92 a4 23 	sts	0x23A4, r1	; 0x8023a4 <transfer+0xa>
    4386:	35 c0       	rjmp	.+106    	; 0x43f2 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    4388:	88 23       	and	r24, r24
    438a:	84 f5       	brge	.+96     	; 0x43ec <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    438c:	aa e9       	ldi	r26, 0x9A	; 154
    438e:	b3 e2       	ldi	r27, 0x23	; 35
    4390:	12 96       	adiw	r26, 0x02	; 2
    4392:	cd 91       	ld	r28, X+
    4394:	dc 91       	ld	r29, X
    4396:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    4398:	16 96       	adiw	r26, 0x06	; 6
    439a:	8d 91       	ld	r24, X+
    439c:	9c 91       	ld	r25, X
    439e:	17 97       	sbiw	r26, 0x07	; 7
    43a0:	28 85       	ldd	r18, Y+8	; 0x08
    43a2:	39 85       	ldd	r19, Y+9	; 0x09
    43a4:	82 17       	cp	r24, r18
    43a6:	93 07       	cpc	r25, r19
    43a8:	d8 f4       	brcc	.+54     	; 0x43e0 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    43aa:	6e 81       	ldd	r22, Y+6	; 0x06
    43ac:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    43ae:	9c 01       	movw	r18, r24
    43b0:	2f 5f       	subi	r18, 0xFF	; 255
    43b2:	3f 4f       	sbci	r19, 0xFF	; 255
    43b4:	20 93 a0 23 	sts	0x23A0, r18	; 0x8023a0 <transfer+0x6>
    43b8:	30 93 a1 23 	sts	0x23A1, r19	; 0x8023a1 <transfer+0x7>
    43bc:	47 81       	ldd	r20, Z+7	; 0x07
    43be:	db 01       	movw	r26, r22
    43c0:	a8 0f       	add	r26, r24
    43c2:	b9 1f       	adc	r27, r25
    43c4:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    43c6:	88 85       	ldd	r24, Y+8	; 0x08
    43c8:	99 85       	ldd	r25, Y+9	; 0x09
    43ca:	28 17       	cp	r18, r24
    43cc:	39 07       	cpc	r19, r25
    43ce:	18 f4       	brcc	.+6      	; 0x43d6 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    43d0:	82 e0       	ldi	r24, 0x02	; 2
    43d2:	83 83       	std	Z+3, r24	; 0x03
    43d4:	0e c0       	rjmp	.+28     	; 0x43f2 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    43d6:	87 e0       	ldi	r24, 0x07	; 7
    43d8:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    43da:	10 92 a4 23 	sts	0x23A4, r1	; 0x8023a4 <transfer+0xa>
    43de:	09 c0       	rjmp	.+18     	; 0x43f2 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    43e0:	83 e0       	ldi	r24, 0x03	; 3
    43e2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    43e4:	89 ef       	ldi	r24, 0xF9	; 249
    43e6:	80 93 a4 23 	sts	0x23A4, r24	; 0x8023a4 <transfer+0xa>
    43ea:	03 c0       	rjmp	.+6      	; 0x43f2 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    43ec:	8b ef       	ldi	r24, 0xFB	; 251
    43ee:	80 93 a4 23 	sts	0x23A4, r24	; 0x8023a4 <transfer+0xa>
	}
}
    43f2:	df 91       	pop	r29
    43f4:	cf 91       	pop	r28
    43f6:	08 95       	ret

000043f8 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    43f8:	1f 92       	push	r1
    43fa:	0f 92       	push	r0
    43fc:	0f b6       	in	r0, 0x3f	; 63
    43fe:	0f 92       	push	r0
    4400:	11 24       	eor	r1, r1
    4402:	0b b6       	in	r0, 0x3b	; 59
    4404:	0f 92       	push	r0
    4406:	2f 93       	push	r18
    4408:	3f 93       	push	r19
    440a:	4f 93       	push	r20
    440c:	5f 93       	push	r21
    440e:	6f 93       	push	r22
    4410:	7f 93       	push	r23
    4412:	8f 93       	push	r24
    4414:	9f 93       	push	r25
    4416:	af 93       	push	r26
    4418:	bf 93       	push	r27
    441a:	ef 93       	push	r30
    441c:	ff 93       	push	r31
    441e:	55 df       	rcall	.-342    	; 0x42ca <twim_interrupt_handler>
    4420:	ff 91       	pop	r31
    4422:	ef 91       	pop	r30
    4424:	bf 91       	pop	r27
    4426:	af 91       	pop	r26
    4428:	9f 91       	pop	r25
    442a:	8f 91       	pop	r24
    442c:	7f 91       	pop	r23
    442e:	6f 91       	pop	r22
    4430:	5f 91       	pop	r21
    4432:	4f 91       	pop	r20
    4434:	3f 91       	pop	r19
    4436:	2f 91       	pop	r18
    4438:	0f 90       	pop	r0
    443a:	0b be       	out	0x3b, r0	; 59
    443c:	0f 90       	pop	r0
    443e:	0f be       	out	0x3f, r0	; 63
    4440:	0f 90       	pop	r0
    4442:	1f 90       	pop	r1
    4444:	18 95       	reti

00004446 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    4446:	1f 92       	push	r1
    4448:	0f 92       	push	r0
    444a:	0f b6       	in	r0, 0x3f	; 63
    444c:	0f 92       	push	r0
    444e:	11 24       	eor	r1, r1
    4450:	0b b6       	in	r0, 0x3b	; 59
    4452:	0f 92       	push	r0
    4454:	2f 93       	push	r18
    4456:	3f 93       	push	r19
    4458:	4f 93       	push	r20
    445a:	5f 93       	push	r21
    445c:	6f 93       	push	r22
    445e:	7f 93       	push	r23
    4460:	8f 93       	push	r24
    4462:	9f 93       	push	r25
    4464:	af 93       	push	r26
    4466:	bf 93       	push	r27
    4468:	ef 93       	push	r30
    446a:	ff 93       	push	r31
    446c:	2e df       	rcall	.-420    	; 0x42ca <twim_interrupt_handler>
    446e:	ff 91       	pop	r31
    4470:	ef 91       	pop	r30
    4472:	bf 91       	pop	r27
    4474:	af 91       	pop	r26
    4476:	9f 91       	pop	r25
    4478:	8f 91       	pop	r24
    447a:	7f 91       	pop	r23
    447c:	6f 91       	pop	r22
    447e:	5f 91       	pop	r21
    4480:	4f 91       	pop	r20
    4482:	3f 91       	pop	r19
    4484:	2f 91       	pop	r18
    4486:	0f 90       	pop	r0
    4488:	0b be       	out	0x3b, r0	; 59
    448a:	0f 90       	pop	r0
    448c:	0f be       	out	0x3f, r0	; 63
    448e:	0f 90       	pop	r0
    4490:	1f 90       	pop	r1
    4492:	18 95       	reti

00004494 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    4494:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    4496:	db 01       	movw	r26, r22
    4498:	14 96       	adiw	r26, 0x04	; 4
    449a:	8c 91       	ld	r24, X
    449c:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    449e:	88 eb       	ldi	r24, 0xB8	; 184
    44a0:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    44a6:	ea e9       	ldi	r30, 0x9A	; 154
    44a8:	f3 e2       	ldi	r31, 0x23	; 35
    44aa:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    44ac:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    44ae:	e0 ea       	ldi	r30, 0xA0	; 160
    44b0:	f0 e0       	ldi	r31, 0x00	; 0
    44b2:	82 81       	ldd	r24, Z+2	; 0x02
    44b4:	82 60       	ori	r24, 0x02	; 2
    44b6:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    44b8:	78 94       	sei

	return STATUS_OK;
}
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	08 95       	ret

000044be <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    44be:	cf 93       	push	r28
    44c0:	df 93       	push	r29
    44c2:	1f 92       	push	r1
    44c4:	cd b7       	in	r28, 0x3d	; 61
    44c6:	de b7       	in	r29, 0x3e	; 62
    44c8:	9c 01       	movw	r18, r24
    44ca:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    44cc:	89 2b       	or	r24, r25
    44ce:	09 f4       	brne	.+2      	; 0x44d2 <twi_master_transfer+0x14>
    44d0:	51 c0       	rjmp	.+162    	; 0x4574 <twi_master_transfer+0xb6>
    44d2:	30 97       	sbiw	r30, 0x00	; 0
    44d4:	09 f4       	brne	.+2      	; 0x44d8 <twi_master_transfer+0x1a>
    44d6:	50 c0       	rjmp	.+160    	; 0x4578 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    44d8:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    44da:	80 91 a3 23 	lds	r24, 0x23A3	; 0x8023a3 <transfer+0x9>
    44de:	88 23       	and	r24, r24
    44e0:	19 f0       	breq	.+6      	; 0x44e8 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    44e2:	99 23       	and	r25, r25
    44e4:	f1 f3       	breq	.-4      	; 0x44e2 <twi_master_transfer+0x24>
    44e6:	4a c0       	rjmp	.+148    	; 0x457c <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    44e8:	8f b7       	in	r24, 0x3f	; 63
    44ea:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    44ec:	f8 94       	cli
	return flags;
    44ee:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    44f0:	aa e9       	ldi	r26, 0x9A	; 154
    44f2:	b3 e2       	ldi	r27, 0x23	; 35
    44f4:	91 e0       	ldi	r25, 0x01	; 1
    44f6:	19 96       	adiw	r26, 0x09	; 9
    44f8:	9c 93       	st	X, r25
    44fa:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    44fc:	90 e8       	ldi	r25, 0x80	; 128
    44fe:	1a 96       	adiw	r26, 0x0a	; 10
    4500:	9c 93       	st	X, r25
    4502:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4504:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    4506:	2d 93       	st	X+, r18
    4508:	3c 93       	st	X, r19
    450a:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    450c:	12 96       	adiw	r26, 0x02	; 2
    450e:	6d 93       	st	X+, r22
    4510:	7c 93       	st	X, r23
    4512:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    4514:	14 96       	adiw	r26, 0x04	; 4
    4516:	1d 92       	st	X+, r1
    4518:	1c 92       	st	X, r1
    451a:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    451c:	16 96       	adiw	r26, 0x06	; 6
    451e:	1d 92       	st	X+, r1
    4520:	1c 92       	st	X, r1
    4522:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    4524:	18 96       	adiw	r26, 0x08	; 8
    4526:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    4528:	80 81       	ld	r24, Z
    452a:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    452c:	64 81       	ldd	r22, Z+4	; 0x04
    452e:	75 81       	ldd	r23, Z+5	; 0x05
    4530:	67 2b       	or	r22, r23
    4532:	11 f4       	brne	.+4      	; 0x4538 <twi_master_transfer+0x7a>
    4534:	41 11       	cpse	r20, r1
    4536:	03 c0       	rjmp	.+6      	; 0x453e <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    4538:	f9 01       	movw	r30, r18
    453a:	86 83       	std	Z+6, r24	; 0x06
    453c:	03 c0       	rjmp	.+6      	; 0x4544 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    453e:	81 60       	ori	r24, 0x01	; 1
    4540:	f9 01       	movw	r30, r18
    4542:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    4544:	ea e9       	ldi	r30, 0x9A	; 154
    4546:	f3 e2       	ldi	r31, 0x23	; 35
    4548:	92 85       	ldd	r25, Z+10	; 0x0a
    454a:	90 38       	cpi	r25, 0x80	; 128
    454c:	e9 f3       	breq	.-6      	; 0x4548 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    454e:	f9 01       	movw	r30, r18
    4550:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    4552:	83 70       	andi	r24, 0x03	; 3
    4554:	81 30       	cpi	r24, 0x01	; 1
    4556:	49 f0       	breq	.+18     	; 0x456a <twi_master_transfer+0xac>
    4558:	aa e9       	ldi	r26, 0x9A	; 154
    455a:	b3 e2       	ldi	r27, 0x23	; 35
    455c:	ed 91       	ld	r30, X+
    455e:	fc 91       	ld	r31, X
    4560:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    4562:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    4564:	83 70       	andi	r24, 0x03	; 3
    4566:	81 30       	cpi	r24, 0x01	; 1
    4568:	c9 f7       	brne	.-14     	; 0x455c <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    456a:	ea e9       	ldi	r30, 0x9A	; 154
    456c:	f3 e2       	ldi	r31, 0x23	; 35
    456e:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    4570:	11 86       	std	Z+9, r1	; 0x09
    4572:	05 c0       	rjmp	.+10     	; 0x457e <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    4574:	88 ef       	ldi	r24, 0xF8	; 248
    4576:	03 c0       	rjmp	.+6      	; 0x457e <twi_master_transfer+0xc0>
    4578:	88 ef       	ldi	r24, 0xF8	; 248
    457a:	01 c0       	rjmp	.+2      	; 0x457e <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    457c:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    457e:	0f 90       	pop	r0
    4580:	df 91       	pop	r29
    4582:	cf 91       	pop	r28
    4584:	08 95       	ret

00004586 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    4586:	cf 93       	push	r28
    4588:	df 93       	push	r29
    458a:	1f 92       	push	r1
    458c:	1f 92       	push	r1
    458e:	cd b7       	in	r28, 0x3d	; 61
    4590:	de b7       	in	r29, 0x3e	; 62
    4592:	81 11       	cpse	r24, r1
    4594:	26 c0       	rjmp	.+76     	; 0x45e2 <udd_sleep_mode+0x5c>
    4596:	90 91 d0 24 	lds	r25, 0x24D0	; 0x8024d0 <udd_b_idle>
    459a:	99 23       	and	r25, r25
    459c:	f9 f0       	breq	.+62     	; 0x45dc <udd_sleep_mode+0x56>
    459e:	90 91 c4 27 	lds	r25, 0x27C4	; 0x8027c4 <sleepmgr_locks+0x1>
    45a2:	91 11       	cpse	r25, r1
    45a4:	01 c0       	rjmp	.+2      	; 0x45a8 <udd_sleep_mode+0x22>
    45a6:	ff cf       	rjmp	.-2      	; 0x45a6 <udd_sleep_mode+0x20>
    45a8:	9f b7       	in	r25, 0x3f	; 63
    45aa:	9a 83       	std	Y+2, r25	; 0x02
    45ac:	f8 94       	cli
    45ae:	2a 81       	ldd	r18, Y+2	; 0x02
    45b0:	e3 ec       	ldi	r30, 0xC3	; 195
    45b2:	f7 e2       	ldi	r31, 0x27	; 39
    45b4:	91 81       	ldd	r25, Z+1	; 0x01
    45b6:	91 50       	subi	r25, 0x01	; 1
    45b8:	91 83       	std	Z+1, r25	; 0x01
    45ba:	2f bf       	out	0x3f, r18	; 63
    45bc:	0f c0       	rjmp	.+30     	; 0x45dc <udd_sleep_mode+0x56>
    45be:	90 91 c4 27 	lds	r25, 0x27C4	; 0x8027c4 <sleepmgr_locks+0x1>
    45c2:	9f 3f       	cpi	r25, 0xFF	; 255
    45c4:	09 f4       	brne	.+2      	; 0x45c8 <udd_sleep_mode+0x42>
    45c6:	ff cf       	rjmp	.-2      	; 0x45c6 <udd_sleep_mode+0x40>
    45c8:	9f b7       	in	r25, 0x3f	; 63
    45ca:	99 83       	std	Y+1, r25	; 0x01
    45cc:	f8 94       	cli
    45ce:	29 81       	ldd	r18, Y+1	; 0x01
    45d0:	e3 ec       	ldi	r30, 0xC3	; 195
    45d2:	f7 e2       	ldi	r31, 0x27	; 39
    45d4:	91 81       	ldd	r25, Z+1	; 0x01
    45d6:	9f 5f       	subi	r25, 0xFF	; 255
    45d8:	91 83       	std	Z+1, r25	; 0x01
    45da:	2f bf       	out	0x3f, r18	; 63
    45dc:	80 93 d0 24 	sts	0x24D0, r24	; 0x8024d0 <udd_b_idle>
    45e0:	05 c0       	rjmp	.+10     	; 0x45ec <udd_sleep_mode+0x66>
    45e2:	90 91 d0 24 	lds	r25, 0x24D0	; 0x8024d0 <udd_b_idle>
    45e6:	99 23       	and	r25, r25
    45e8:	51 f3       	breq	.-44     	; 0x45be <udd_sleep_mode+0x38>
    45ea:	f8 cf       	rjmp	.-16     	; 0x45dc <udd_sleep_mode+0x56>
    45ec:	0f 90       	pop	r0
    45ee:	0f 90       	pop	r0
    45f0:	df 91       	pop	r29
    45f2:	cf 91       	pop	r28
    45f4:	08 95       	ret

000045f6 <udd_ctrl_init>:
    45f6:	0f 93       	push	r16
    45f8:	e8 ec       	ldi	r30, 0xC8	; 200
    45fa:	f4 e0       	ldi	r31, 0x04	; 4
    45fc:	80 81       	ld	r24, Z
    45fe:	8f 7d       	andi	r24, 0xDF	; 223
    4600:	80 83       	st	Z, r24
    4602:	80 81       	ld	r24, Z
    4604:	8f 7d       	andi	r24, 0xDF	; 223
    4606:	80 83       	st	Z, r24
    4608:	e4 ea       	ldi	r30, 0xA4	; 164
    460a:	f4 e2       	ldi	r31, 0x24	; 36
    460c:	02 e0       	ldi	r16, 0x02	; 2
    460e:	05 93       	las	Z, r16
    4610:	10 92 a6 24 	sts	0x24A6, r1	; 0x8024a6 <udd_sram+0x16>
    4614:	10 92 a7 24 	sts	0x24A7, r1	; 0x8024a7 <udd_sram+0x17>
    4618:	00 e2       	ldi	r16, 0x20	; 32
    461a:	06 93       	lac	Z, r16
    461c:	00 e4       	ldi	r16, 0x40	; 64
    461e:	06 93       	lac	Z, r16
    4620:	ec e9       	ldi	r30, 0x9C	; 156
    4622:	f4 e2       	ldi	r31, 0x24	; 36
    4624:	00 e4       	ldi	r16, 0x40	; 64
    4626:	06 93       	lac	Z, r16
    4628:	e3 eb       	ldi	r30, 0xB3	; 179
    462a:	f7 e2       	ldi	r31, 0x27	; 39
    462c:	14 86       	std	Z+12, r1	; 0x0c
    462e:	15 86       	std	Z+13, r1	; 0x0d
    4630:	16 86       	std	Z+14, r1	; 0x0e
    4632:	17 86       	std	Z+15, r1	; 0x0f
    4634:	12 86       	std	Z+10, r1	; 0x0a
    4636:	13 86       	std	Z+11, r1	; 0x0b
    4638:	10 92 8e 24 	sts	0x248E, r1	; 0x80248e <udd_ep_control_state>
    463c:	0f 91       	pop	r16
    463e:	08 95       	ret

00004640 <udd_ctrl_stall_data>:
    4640:	0f 93       	push	r16
    4642:	85 e0       	ldi	r24, 0x05	; 5
    4644:	80 93 8e 24 	sts	0x248E, r24	; 0x80248e <udd_ep_control_state>
    4648:	e5 ea       	ldi	r30, 0xA5	; 165
    464a:	f4 e2       	ldi	r31, 0x24	; 36
    464c:	04 e0       	ldi	r16, 0x04	; 4
    464e:	05 93       	las	Z, r16
    4650:	ed e9       	ldi	r30, 0x9D	; 157
    4652:	f4 e2       	ldi	r31, 0x24	; 36
    4654:	04 e0       	ldi	r16, 0x04	; 4
    4656:	05 93       	las	Z, r16
    4658:	0f 91       	pop	r16
    465a:	08 95       	ret

0000465c <udd_ctrl_send_zlp_in>:
    465c:	0f 93       	push	r16
    465e:	83 e0       	ldi	r24, 0x03	; 3
    4660:	80 93 8e 24 	sts	0x248E, r24	; 0x80248e <udd_ep_control_state>
    4664:	10 92 a6 24 	sts	0x24A6, r1	; 0x8024a6 <udd_sram+0x16>
    4668:	10 92 a7 24 	sts	0x24A7, r1	; 0x8024a7 <udd_sram+0x17>
    466c:	e4 ea       	ldi	r30, 0xA4	; 164
    466e:	f4 e2       	ldi	r31, 0x24	; 36
    4670:	02 e0       	ldi	r16, 0x02	; 2
    4672:	06 93       	lac	Z, r16
    4674:	0f 91       	pop	r16
    4676:	08 95       	ret

00004678 <udd_ctrl_endofrequest>:
    4678:	e0 91 bf 27 	lds	r30, 0x27BF	; 0x8027bf <udd_g_ctrlreq+0xc>
    467c:	f0 91 c0 27 	lds	r31, 0x27C0	; 0x8027c0 <udd_g_ctrlreq+0xd>
    4680:	30 97       	sbiw	r30, 0x00	; 0
    4682:	09 f0       	breq	.+2      	; 0x4686 <udd_ctrl_endofrequest+0xe>
    4684:	19 95       	eicall
    4686:	08 95       	ret

00004688 <udd_ctrl_in_sent>:
    4688:	0f 93       	push	r16
    468a:	cf 93       	push	r28
    468c:	df 93       	push	r29
    468e:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <udd_ep_control_state>
    4692:	83 30       	cpi	r24, 0x03	; 3
    4694:	19 f4       	brne	.+6      	; 0x469c <udd_ctrl_in_sent+0x14>
    4696:	f0 df       	rcall	.-32     	; 0x4678 <udd_ctrl_endofrequest>
    4698:	ae df       	rcall	.-164    	; 0x45f6 <udd_ctrl_init>
    469a:	5e c0       	rjmp	.+188    	; 0x4758 <udd_ctrl_in_sent+0xd0>
    469c:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udd_ctrl_payload_nb_trans>
    46a0:	90 91 8b 24 	lds	r25, 0x248B	; 0x80248b <udd_ctrl_payload_nb_trans+0x1>
    46a4:	c0 91 bd 27 	lds	r28, 0x27BD	; 0x8027bd <udd_g_ctrlreq+0xa>
    46a8:	d0 91 be 27 	lds	r29, 0x27BE	; 0x8027be <udd_g_ctrlreq+0xb>
    46ac:	c8 1b       	sub	r28, r24
    46ae:	d9 0b       	sbc	r29, r25
    46b0:	71 f5       	brne	.+92     	; 0x470e <udd_ctrl_in_sent+0x86>
    46b2:	20 91 8c 24 	lds	r18, 0x248C	; 0x80248c <udd_ctrl_prev_payload_nb_trans>
    46b6:	30 91 8d 24 	lds	r19, 0x248D	; 0x80248d <udd_ctrl_prev_payload_nb_trans+0x1>
    46ba:	82 0f       	add	r24, r18
    46bc:	93 1f       	adc	r25, r19
    46be:	80 93 8c 24 	sts	0x248C, r24	; 0x80248c <udd_ctrl_prev_payload_nb_trans>
    46c2:	90 93 8d 24 	sts	0x248D, r25	; 0x80248d <udd_ctrl_prev_payload_nb_trans+0x1>
    46c6:	20 91 b9 27 	lds	r18, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    46ca:	30 91 ba 27 	lds	r19, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    46ce:	82 17       	cp	r24, r18
    46d0:	93 07       	cpc	r25, r19
    46d2:	21 f0       	breq	.+8      	; 0x46dc <udd_ctrl_in_sent+0x54>
    46d4:	80 91 a5 23 	lds	r24, 0x23A5	; 0x8023a5 <b_shortpacket.5472>
    46d8:	88 23       	and	r24, r24
    46da:	41 f0       	breq	.+16     	; 0x46ec <udd_ctrl_in_sent+0x64>
    46dc:	84 e0       	ldi	r24, 0x04	; 4
    46de:	80 93 8e 24 	sts	0x248E, r24	; 0x80248e <udd_ep_control_state>
    46e2:	ec e9       	ldi	r30, 0x9C	; 156
    46e4:	f4 e2       	ldi	r31, 0x24	; 36
    46e6:	02 e0       	ldi	r16, 0x02	; 2
    46e8:	06 93       	lac	Z, r16
    46ea:	36 c0       	rjmp	.+108    	; 0x4758 <udd_ctrl_in_sent+0xd0>
    46ec:	e0 91 c1 27 	lds	r30, 0x27C1	; 0x8027c1 <udd_g_ctrlreq+0xe>
    46f0:	f0 91 c2 27 	lds	r31, 0x27C2	; 0x8027c2 <udd_g_ctrlreq+0xf>
    46f4:	30 97       	sbiw	r30, 0x00	; 0
    46f6:	99 f0       	breq	.+38     	; 0x471e <udd_ctrl_in_sent+0x96>
    46f8:	19 95       	eicall
    46fa:	88 23       	and	r24, r24
    46fc:	81 f0       	breq	.+32     	; 0x471e <udd_ctrl_in_sent+0x96>
    46fe:	10 92 8a 24 	sts	0x248A, r1	; 0x80248a <udd_ctrl_payload_nb_trans>
    4702:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <udd_ctrl_payload_nb_trans+0x1>
    4706:	c0 91 bd 27 	lds	r28, 0x27BD	; 0x8027bd <udd_g_ctrlreq+0xa>
    470a:	d0 91 be 27 	lds	r29, 0x27BE	; 0x8027be <udd_g_ctrlreq+0xb>
    470e:	c0 34       	cpi	r28, 0x40	; 64
    4710:	d1 05       	cpc	r29, r1
    4712:	28 f0       	brcs	.+10     	; 0x471e <udd_ctrl_in_sent+0x96>
    4714:	10 92 a5 23 	sts	0x23A5, r1	; 0x8023a5 <b_shortpacket.5472>
    4718:	c0 e4       	ldi	r28, 0x40	; 64
    471a:	d0 e0       	ldi	r29, 0x00	; 0
    471c:	03 c0       	rjmp	.+6      	; 0x4724 <udd_ctrl_in_sent+0x9c>
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	80 93 a5 23 	sts	0x23A5, r24	; 0x8023a5 <b_shortpacket.5472>
    4724:	e0 e9       	ldi	r30, 0x90	; 144
    4726:	f4 e2       	ldi	r31, 0x24	; 36
    4728:	c6 8b       	std	Z+22, r28	; 0x16
    472a:	d7 8b       	std	Z+23, r29	; 0x17
    472c:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udd_ctrl_payload_nb_trans>
    4730:	90 91 8b 24 	lds	r25, 0x248B	; 0x80248b <udd_ctrl_payload_nb_trans+0x1>
    4734:	20 91 bb 27 	lds	r18, 0x27BB	; 0x8027bb <udd_g_ctrlreq+0x8>
    4738:	30 91 bc 27 	lds	r19, 0x27BC	; 0x8027bc <udd_g_ctrlreq+0x9>
    473c:	28 0f       	add	r18, r24
    473e:	39 1f       	adc	r19, r25
    4740:	20 8f       	std	Z+24, r18	; 0x18
    4742:	31 8f       	std	Z+25, r19	; 0x19
    4744:	c8 0f       	add	r28, r24
    4746:	d9 1f       	adc	r29, r25
    4748:	c0 93 8a 24 	sts	0x248A, r28	; 0x80248a <udd_ctrl_payload_nb_trans>
    474c:	d0 93 8b 24 	sts	0x248B, r29	; 0x80248b <udd_ctrl_payload_nb_trans+0x1>
    4750:	e4 ea       	ldi	r30, 0xA4	; 164
    4752:	f4 e2       	ldi	r31, 0x24	; 36
    4754:	02 e0       	ldi	r16, 0x02	; 2
    4756:	06 93       	lac	Z, r16
    4758:	df 91       	pop	r29
    475a:	cf 91       	pop	r28
    475c:	0f 91       	pop	r16
    475e:	08 95       	ret

00004760 <udd_ep_get_size>:
    4760:	fc 01       	movw	r30, r24
    4762:	81 81       	ldd	r24, Z+1	; 0x01
    4764:	e8 2f       	mov	r30, r24
    4766:	e7 70       	andi	r30, 0x07	; 7
    4768:	8e 2f       	mov	r24, r30
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	fc 01       	movw	r30, r24
    476e:	31 97       	sbiw	r30, 0x01	; 1
    4770:	e7 30       	cpi	r30, 0x07	; 7
    4772:	f1 05       	cpc	r31, r1
    4774:	d8 f4       	brcc	.+54     	; 0x47ac <udd_ep_get_size+0x4c>
    4776:	88 27       	eor	r24, r24
    4778:	e2 50       	subi	r30, 0x02	; 2
    477a:	ff 4f       	sbci	r31, 0xFF	; 255
    477c:	8f 4f       	sbci	r24, 0xFF	; 255
    477e:	0c 94 61 3b 	jmp	0x76c2	; 0x76c2 <__tablejump2__>
    4782:	80 e1       	ldi	r24, 0x10	; 16
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	08 95       	ret
    4788:	80 e2       	ldi	r24, 0x20	; 32
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	08 95       	ret
    478e:	80 e4       	ldi	r24, 0x40	; 64
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	08 95       	ret
    4794:	80 e8       	ldi	r24, 0x80	; 128
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	08 95       	ret
    479a:	80 e0       	ldi	r24, 0x00	; 0
    479c:	91 e0       	ldi	r25, 0x01	; 1
    479e:	08 95       	ret
    47a0:	80 e0       	ldi	r24, 0x00	; 0
    47a2:	92 e0       	ldi	r25, 0x02	; 2
    47a4:	08 95       	ret
    47a6:	8f ef       	ldi	r24, 0xFF	; 255
    47a8:	93 e0       	ldi	r25, 0x03	; 3
    47aa:	08 95       	ret
    47ac:	88 e0       	ldi	r24, 0x08	; 8
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	08 95       	ret

000047b2 <udd_ep_get_job>:
    47b2:	28 2f       	mov	r18, r24
    47b4:	2f 70       	andi	r18, 0x0F	; 15
    47b6:	30 e0       	ldi	r19, 0x00	; 0
    47b8:	22 0f       	add	r18, r18
    47ba:	33 1f       	adc	r19, r19
    47bc:	08 2e       	mov	r0, r24
    47be:	00 0c       	add	r0, r0
    47c0:	99 0b       	sbc	r25, r25
    47c2:	88 27       	eor	r24, r24
    47c4:	99 0f       	add	r25, r25
    47c6:	88 1f       	adc	r24, r24
    47c8:	99 27       	eor	r25, r25
    47ca:	82 0f       	add	r24, r18
    47cc:	93 1f       	adc	r25, r19
    47ce:	02 97       	sbiw	r24, 0x02	; 2
    47d0:	9c 01       	movw	r18, r24
    47d2:	22 0f       	add	r18, r18
    47d4:	33 1f       	adc	r19, r19
    47d6:	22 0f       	add	r18, r18
    47d8:	33 1f       	adc	r19, r19
    47da:	22 0f       	add	r18, r18
    47dc:	33 1f       	adc	r19, r19
    47de:	82 0f       	add	r24, r18
    47e0:	93 1f       	adc	r25, r19
    47e2:	8a 5d       	subi	r24, 0xDA	; 218
    47e4:	9b 4d       	sbci	r25, 0xDB	; 219
    47e6:	08 95       	ret

000047e8 <udd_ctrl_interrupt_tc_setup>:
    47e8:	0f 93       	push	r16
    47ea:	cf 93       	push	r28
    47ec:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    47f0:	80 ff       	sbrs	r24, 0
    47f2:	65 c0       	rjmp	.+202    	; 0x48be <udd_ctrl_interrupt_tc_setup+0xd6>
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    47fa:	ec e9       	ldi	r30, 0x9C	; 156
    47fc:	f4 e2       	ldi	r31, 0x24	; 36
    47fe:	00 e8       	ldi	r16, 0x80	; 128
    4800:	06 93       	lac	Z, r16
    4802:	e4 ea       	ldi	r30, 0xA4	; 164
    4804:	f4 e2       	ldi	r31, 0x24	; 36
    4806:	00 e8       	ldi	r16, 0x80	; 128
    4808:	06 93       	lac	Z, r16
    480a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    480e:	ec e9       	ldi	r30, 0x9C	; 156
    4810:	f4 e2       	ldi	r31, 0x24	; 36
    4812:	00 e1       	ldi	r16, 0x10	; 16
    4814:	06 93       	lac	Z, r16
    4816:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <udd_ep_control_state>
    481a:	88 23       	and	r24, r24
    481c:	29 f0       	breq	.+10     	; 0x4828 <udd_ctrl_interrupt_tc_setup+0x40>
    481e:	83 50       	subi	r24, 0x03	; 3
    4820:	82 30       	cpi	r24, 0x02	; 2
    4822:	08 f4       	brcc	.+2      	; 0x4826 <udd_ctrl_interrupt_tc_setup+0x3e>
    4824:	29 df       	rcall	.-430    	; 0x4678 <udd_ctrl_endofrequest>
    4826:	e7 de       	rcall	.-562    	; 0x45f6 <udd_ctrl_init>
    4828:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_sram+0xe>
    482c:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_sram+0xf>
    4830:	08 97       	sbiw	r24, 0x08	; 8
    4832:	09 f0       	breq	.+2      	; 0x4836 <udd_ctrl_interrupt_tc_setup+0x4e>
    4834:	46 c0       	rjmp	.+140    	; 0x48c2 <udd_ctrl_interrupt_tc_setup+0xda>
    4836:	88 e0       	ldi	r24, 0x08	; 8
    4838:	ea e4       	ldi	r30, 0x4A	; 74
    483a:	f4 e2       	ldi	r31, 0x24	; 36
    483c:	a3 eb       	ldi	r26, 0xB3	; 179
    483e:	b7 e2       	ldi	r27, 0x27	; 39
    4840:	01 90       	ld	r0, Z+
    4842:	0d 92       	st	X+, r0
    4844:	8a 95       	dec	r24
    4846:	e1 f7       	brne	.-8      	; 0x4840 <udd_ctrl_interrupt_tc_setup+0x58>
    4848:	e8 ec       	ldi	r30, 0xC8	; 200
    484a:	f4 e0       	ldi	r31, 0x04	; 4
    484c:	80 81       	ld	r24, Z
    484e:	80 62       	ori	r24, 0x20	; 32
    4850:	80 83       	st	Z, r24
    4852:	80 81       	ld	r24, Z
    4854:	80 62       	ori	r24, 0x20	; 32
    4856:	80 83       	st	Z, r24
    4858:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <udc_process_setup>
    485c:	c8 2f       	mov	r28, r24
    485e:	81 11       	cpse	r24, r1
    4860:	03 c0       	rjmp	.+6      	; 0x4868 <udd_ctrl_interrupt_tc_setup+0x80>
    4862:	ee de       	rcall	.-548    	; 0x4640 <udd_ctrl_stall_data>
    4864:	c1 e0       	ldi	r28, 0x01	; 1
    4866:	2e c0       	rjmp	.+92     	; 0x48c4 <udd_ctrl_interrupt_tc_setup+0xdc>
    4868:	80 91 b3 27 	lds	r24, 0x27B3	; 0x8027b3 <udd_g_ctrlreq>
    486c:	88 23       	and	r24, r24
    486e:	6c f4       	brge	.+26     	; 0x488a <udd_ctrl_interrupt_tc_setup+0xa2>
    4870:	10 92 8c 24 	sts	0x248C, r1	; 0x80248c <udd_ctrl_prev_payload_nb_trans>
    4874:	10 92 8d 24 	sts	0x248D, r1	; 0x80248d <udd_ctrl_prev_payload_nb_trans+0x1>
    4878:	10 92 8a 24 	sts	0x248A, r1	; 0x80248a <udd_ctrl_payload_nb_trans>
    487c:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <udd_ctrl_payload_nb_trans+0x1>
    4880:	82 e0       	ldi	r24, 0x02	; 2
    4882:	80 93 8e 24 	sts	0x248E, r24	; 0x80248e <udd_ep_control_state>
    4886:	00 df       	rcall	.-512    	; 0x4688 <udd_ctrl_in_sent>
    4888:	1d c0       	rjmp	.+58     	; 0x48c4 <udd_ctrl_interrupt_tc_setup+0xdc>
    488a:	80 91 b9 27 	lds	r24, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    488e:	90 91 ba 27 	lds	r25, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    4892:	89 2b       	or	r24, r25
    4894:	11 f4       	brne	.+4      	; 0x489a <udd_ctrl_interrupt_tc_setup+0xb2>
    4896:	e2 de       	rcall	.-572    	; 0x465c <udd_ctrl_send_zlp_in>
    4898:	15 c0       	rjmp	.+42     	; 0x48c4 <udd_ctrl_interrupt_tc_setup+0xdc>
    489a:	10 92 8c 24 	sts	0x248C, r1	; 0x80248c <udd_ctrl_prev_payload_nb_trans>
    489e:	10 92 8d 24 	sts	0x248D, r1	; 0x80248d <udd_ctrl_prev_payload_nb_trans+0x1>
    48a2:	10 92 8a 24 	sts	0x248A, r1	; 0x80248a <udd_ctrl_payload_nb_trans>
    48a6:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <udd_ctrl_payload_nb_trans+0x1>
    48aa:	81 e0       	ldi	r24, 0x01	; 1
    48ac:	80 93 8e 24 	sts	0x248E, r24	; 0x80248e <udd_ep_control_state>
    48b0:	ec e9       	ldi	r30, 0x9C	; 156
    48b2:	f4 e2       	ldi	r31, 0x24	; 36
    48b4:	02 e0       	ldi	r16, 0x02	; 2
    48b6:	06 93       	lac	Z, r16
    48b8:	00 e2       	ldi	r16, 0x20	; 32
    48ba:	06 93       	lac	Z, r16
    48bc:	03 c0       	rjmp	.+6      	; 0x48c4 <udd_ctrl_interrupt_tc_setup+0xdc>
    48be:	c0 e0       	ldi	r28, 0x00	; 0
    48c0:	01 c0       	rjmp	.+2      	; 0x48c4 <udd_ctrl_interrupt_tc_setup+0xdc>
    48c2:	c1 e0       	ldi	r28, 0x01	; 1
    48c4:	8c 2f       	mov	r24, r28
    48c6:	cf 91       	pop	r28
    48c8:	0f 91       	pop	r16
    48ca:	08 95       	ret

000048cc <udd_ep_trans_complet>:
    48cc:	8f 92       	push	r8
    48ce:	9f 92       	push	r9
    48d0:	af 92       	push	r10
    48d2:	bf 92       	push	r11
    48d4:	df 92       	push	r13
    48d6:	ef 92       	push	r14
    48d8:	ff 92       	push	r15
    48da:	0f 93       	push	r16
    48dc:	1f 93       	push	r17
    48de:	cf 93       	push	r28
    48e0:	df 93       	push	r29
    48e2:	d8 2e       	mov	r13, r24
    48e4:	66 df       	rcall	.-308    	; 0x47b2 <udd_ep_get_job>
    48e6:	8c 01       	movw	r16, r24
    48e8:	cd 2d       	mov	r28, r13
    48ea:	cf 70       	andi	r28, 0x0F	; 15
    48ec:	d0 e0       	ldi	r29, 0x00	; 0
    48ee:	ce 01       	movw	r24, r28
    48f0:	88 0f       	add	r24, r24
    48f2:	99 1f       	adc	r25, r25
    48f4:	cd 2d       	mov	r28, r13
    48f6:	0d 2c       	mov	r0, r13
    48f8:	00 0c       	add	r0, r0
    48fa:	dd 0b       	sbc	r29, r29
    48fc:	cc 27       	eor	r28, r28
    48fe:	dd 0f       	add	r29, r29
    4900:	cc 1f       	adc	r28, r28
    4902:	dd 27       	eor	r29, r29
    4904:	c8 0f       	add	r28, r24
    4906:	d9 1f       	adc	r29, r25
    4908:	ce 01       	movw	r24, r28
    490a:	88 0f       	add	r24, r24
    490c:	99 1f       	adc	r25, r25
    490e:	88 0f       	add	r24, r24
    4910:	99 1f       	adc	r25, r25
    4912:	88 0f       	add	r24, r24
    4914:	99 1f       	adc	r25, r25
    4916:	9c 01       	movw	r18, r24
    4918:	24 56       	subi	r18, 0x64	; 100
    491a:	3b 4d       	sbci	r19, 0xDB	; 219
    491c:	79 01       	movw	r14, r18
    491e:	c9 01       	movw	r24, r18
    4920:	1f df       	rcall	.-450    	; 0x4760 <udd_ep_get_size>
    4922:	4c 01       	movw	r8, r24
    4924:	dd 20       	and	r13, r13
    4926:	0c f0       	brlt	.+2      	; 0x492a <udd_ep_trans_complet+0x5e>
    4928:	7b c0       	rjmp	.+246    	; 0x4a20 <udd_ep_trans_complet+0x154>
    492a:	fe 01       	movw	r30, r28
    492c:	ee 0f       	add	r30, r30
    492e:	ff 1f       	adc	r31, r31
    4930:	ee 0f       	add	r30, r30
    4932:	ff 1f       	adc	r31, r31
    4934:	ee 0f       	add	r30, r30
    4936:	ff 1f       	adc	r31, r31
    4938:	e0 57       	subi	r30, 0x70	; 112
    493a:	fb 4d       	sbci	r31, 0xDB	; 219
    493c:	22 89       	ldd	r18, Z+18	; 0x12
    493e:	33 89       	ldd	r19, Z+19	; 0x13
    4940:	d8 01       	movw	r26, r16
    4942:	15 96       	adiw	r26, 0x05	; 5
    4944:	8d 91       	ld	r24, X+
    4946:	9c 91       	ld	r25, X
    4948:	16 97       	sbiw	r26, 0x06	; 6
    494a:	82 0f       	add	r24, r18
    494c:	93 1f       	adc	r25, r19
    494e:	15 96       	adiw	r26, 0x05	; 5
    4950:	8d 93       	st	X+, r24
    4952:	9c 93       	st	X, r25
    4954:	16 97       	sbiw	r26, 0x06	; 6
    4956:	13 96       	adiw	r26, 0x03	; 3
    4958:	2d 91       	ld	r18, X+
    495a:	3c 91       	ld	r19, X
    495c:	14 97       	sbiw	r26, 0x04	; 4
    495e:	82 17       	cp	r24, r18
    4960:	93 07       	cpc	r25, r19
    4962:	09 f4       	brne	.+2      	; 0x4966 <udd_ep_trans_complet+0x9a>
    4964:	47 c0       	rjmp	.+142    	; 0x49f4 <udd_ep_trans_complet+0x128>
    4966:	28 1b       	sub	r18, r24
    4968:	39 0b       	sbc	r19, r25
    496a:	21 15       	cp	r18, r1
    496c:	b4 e0       	ldi	r27, 0x04	; 4
    496e:	3b 07       	cpc	r19, r27
    4970:	40 f0       	brcs	.+16     	; 0x4982 <udd_ep_trans_complet+0xb6>
    4972:	2f ef       	ldi	r18, 0xFF	; 255
    4974:	33 e0       	ldi	r19, 0x03	; 3
    4976:	c9 01       	movw	r24, r18
    4978:	b4 01       	movw	r22, r8
    497a:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__udivmodhi4>
    497e:	28 1b       	sub	r18, r24
    4980:	39 0b       	sbc	r19, r25
    4982:	f8 01       	movw	r30, r16
    4984:	80 81       	ld	r24, Z
    4986:	81 ff       	sbrs	r24, 1
    4988:	0a c0       	rjmp	.+20     	; 0x499e <udd_ep_trans_complet+0xd2>
    498a:	c9 01       	movw	r24, r18
    498c:	b4 01       	movw	r22, r8
    498e:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__udivmodhi4>
    4992:	41 e0       	ldi	r20, 0x01	; 1
    4994:	89 2b       	or	r24, r25
    4996:	09 f0       	breq	.+2      	; 0x499a <udd_ep_trans_complet+0xce>
    4998:	40 e0       	ldi	r20, 0x00	; 0
    499a:	84 2f       	mov	r24, r20
    499c:	01 c0       	rjmp	.+2      	; 0x49a0 <udd_ep_trans_complet+0xd4>
    499e:	80 e0       	ldi	r24, 0x00	; 0
    49a0:	d8 01       	movw	r26, r16
    49a2:	9c 91       	ld	r25, X
    49a4:	80 fb       	bst	r24, 0
    49a6:	91 f9       	bld	r25, 1
    49a8:	9c 93       	st	X, r25
    49aa:	fe 01       	movw	r30, r28
    49ac:	ee 0f       	add	r30, r30
    49ae:	ff 1f       	adc	r31, r31
    49b0:	ee 0f       	add	r30, r30
    49b2:	ff 1f       	adc	r31, r31
    49b4:	ee 0f       	add	r30, r30
    49b6:	ff 1f       	adc	r31, r31
    49b8:	e0 57       	subi	r30, 0x70	; 112
    49ba:	fb 4d       	sbci	r31, 0xDB	; 219
    49bc:	12 8a       	std	Z+18, r1	; 0x12
    49be:	13 8a       	std	Z+19, r1	; 0x13
    49c0:	26 87       	std	Z+14, r18	; 0x0e
    49c2:	37 87       	std	Z+15, r19	; 0x0f
    49c4:	11 96       	adiw	r26, 0x01	; 1
    49c6:	2d 91       	ld	r18, X+
    49c8:	3c 91       	ld	r19, X
    49ca:	12 97       	sbiw	r26, 0x02	; 2
    49cc:	15 96       	adiw	r26, 0x05	; 5
    49ce:	8d 91       	ld	r24, X+
    49d0:	9c 91       	ld	r25, X
    49d2:	16 97       	sbiw	r26, 0x06	; 6
    49d4:	82 0f       	add	r24, r18
    49d6:	93 1f       	adc	r25, r19
    49d8:	cc 0f       	add	r28, r28
    49da:	dd 1f       	adc	r29, r29
    49dc:	cc 0f       	add	r28, r28
    49de:	dd 1f       	adc	r29, r29
    49e0:	cc 0f       	add	r28, r28
    49e2:	dd 1f       	adc	r29, r29
    49e4:	c0 56       	subi	r28, 0x60	; 96
    49e6:	db 4d       	sbci	r29, 0xDB	; 219
    49e8:	88 83       	st	Y, r24
    49ea:	99 83       	std	Y+1, r25	; 0x01
    49ec:	f7 01       	movw	r30, r14
    49ee:	02 e0       	ldi	r16, 0x02	; 2
    49f0:	06 93       	lac	Z, r16
    49f2:	e4 c0       	rjmp	.+456    	; 0x4bbc <udd_ep_trans_complet+0x2f0>
    49f4:	d8 01       	movw	r26, r16
    49f6:	8c 91       	ld	r24, X
    49f8:	81 ff       	sbrs	r24, 1
    49fa:	cd c0       	rjmp	.+410    	; 0x4b96 <udd_ep_trans_complet+0x2ca>
    49fc:	8d 7f       	andi	r24, 0xFD	; 253
    49fe:	8c 93       	st	X, r24
    4a00:	cc 0f       	add	r28, r28
    4a02:	dd 1f       	adc	r29, r29
    4a04:	cc 0f       	add	r28, r28
    4a06:	dd 1f       	adc	r29, r29
    4a08:	cc 0f       	add	r28, r28
    4a0a:	dd 1f       	adc	r29, r29
    4a0c:	c0 57       	subi	r28, 0x70	; 112
    4a0e:	db 4d       	sbci	r29, 0xDB	; 219
    4a10:	1a 8a       	std	Y+18, r1	; 0x12
    4a12:	1b 8a       	std	Y+19, r1	; 0x13
    4a14:	1e 86       	std	Y+14, r1	; 0x0e
    4a16:	1f 86       	std	Y+15, r1	; 0x0f
    4a18:	f7 01       	movw	r30, r14
    4a1a:	02 e0       	ldi	r16, 0x02	; 2
    4a1c:	06 93       	lac	Z, r16
    4a1e:	ce c0       	rjmp	.+412    	; 0x4bbc <udd_ep_trans_complet+0x2f0>
    4a20:	fe 01       	movw	r30, r28
    4a22:	ee 0f       	add	r30, r30
    4a24:	ff 1f       	adc	r31, r31
    4a26:	ee 0f       	add	r30, r30
    4a28:	ff 1f       	adc	r31, r31
    4a2a:	ee 0f       	add	r30, r30
    4a2c:	ff 1f       	adc	r31, r31
    4a2e:	e0 57       	subi	r30, 0x70	; 112
    4a30:	fb 4d       	sbci	r31, 0xDB	; 219
    4a32:	a6 84       	ldd	r10, Z+14	; 0x0e
    4a34:	b7 84       	ldd	r11, Z+15	; 0x0f
    4a36:	d8 01       	movw	r26, r16
    4a38:	8c 91       	ld	r24, X
    4a3a:	82 ff       	sbrs	r24, 2
    4a3c:	1b c0       	rjmp	.+54     	; 0x4a74 <udd_ep_trans_complet+0x1a8>
    4a3e:	11 96       	adiw	r26, 0x01	; 1
    4a40:	ed 91       	ld	r30, X+
    4a42:	fc 91       	ld	r31, X
    4a44:	12 97       	sbiw	r26, 0x02	; 2
    4a46:	15 96       	adiw	r26, 0x05	; 5
    4a48:	2d 91       	ld	r18, X+
    4a4a:	3c 91       	ld	r19, X
    4a4c:	16 97       	sbiw	r26, 0x06	; 6
    4a4e:	13 96       	adiw	r26, 0x03	; 3
    4a50:	8d 91       	ld	r24, X+
    4a52:	9c 91       	ld	r25, X
    4a54:	14 97       	sbiw	r26, 0x04	; 4
    4a56:	b4 01       	movw	r22, r8
    4a58:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__udivmodhi4>
    4a5c:	b0 e4       	ldi	r27, 0x40	; 64
    4a5e:	db 9e       	mul	r13, r27
    4a60:	b0 01       	movw	r22, r0
    4a62:	11 24       	eor	r1, r1
    4a64:	6a 59       	subi	r22, 0x9A	; 154
    4a66:	7c 4d       	sbci	r23, 0xDC	; 220
    4a68:	ac 01       	movw	r20, r24
    4a6a:	cf 01       	movw	r24, r30
    4a6c:	82 0f       	add	r24, r18
    4a6e:	93 1f       	adc	r25, r19
    4a70:	0e 94 62 3d 	call	0x7ac4	; 0x7ac4 <memcpy>
    4a74:	f8 01       	movw	r30, r16
    4a76:	25 81       	ldd	r18, Z+5	; 0x05
    4a78:	36 81       	ldd	r19, Z+6	; 0x06
    4a7a:	2a 0d       	add	r18, r10
    4a7c:	3b 1d       	adc	r19, r11
    4a7e:	25 83       	std	Z+5, r18	; 0x05
    4a80:	36 83       	std	Z+6, r19	; 0x06
    4a82:	83 81       	ldd	r24, Z+3	; 0x03
    4a84:	94 81       	ldd	r25, Z+4	; 0x04
    4a86:	82 17       	cp	r24, r18
    4a88:	93 07       	cpc	r25, r19
    4a8a:	68 f4       	brcc	.+26     	; 0x4aa6 <udd_ep_trans_complet+0x1da>
    4a8c:	85 83       	std	Z+5, r24	; 0x05
    4a8e:	96 83       	std	Z+6, r25	; 0x06
    4a90:	cc 0f       	add	r28, r28
    4a92:	dd 1f       	adc	r29, r29
    4a94:	cc 0f       	add	r28, r28
    4a96:	dd 1f       	adc	r29, r29
    4a98:	cc 0f       	add	r28, r28
    4a9a:	dd 1f       	adc	r29, r29
    4a9c:	c0 57       	subi	r28, 0x70	; 112
    4a9e:	db 4d       	sbci	r29, 0xDB	; 219
    4aa0:	8a 89       	ldd	r24, Y+18	; 0x12
    4aa2:	9b 89       	ldd	r25, Y+19	; 0x13
    4aa4:	78 c0       	rjmp	.+240    	; 0x4b96 <udd_ep_trans_complet+0x2ca>
    4aa6:	fe 01       	movw	r30, r28
    4aa8:	ee 0f       	add	r30, r30
    4aaa:	ff 1f       	adc	r31, r31
    4aac:	ee 0f       	add	r30, r30
    4aae:	ff 1f       	adc	r31, r31
    4ab0:	ee 0f       	add	r30, r30
    4ab2:	ff 1f       	adc	r31, r31
    4ab4:	e0 57       	subi	r30, 0x70	; 112
    4ab6:	fb 4d       	sbci	r31, 0xDB	; 219
    4ab8:	42 89       	ldd	r20, Z+18	; 0x12
    4aba:	53 89       	ldd	r21, Z+19	; 0x13
    4abc:	a4 16       	cp	r10, r20
    4abe:	b5 06       	cpc	r11, r21
    4ac0:	09 f0       	breq	.+2      	; 0x4ac4 <udd_ep_trans_complet+0x1f8>
    4ac2:	69 c0       	rjmp	.+210    	; 0x4b96 <udd_ep_trans_complet+0x2ca>
    4ac4:	28 17       	cp	r18, r24
    4ac6:	39 07       	cpc	r19, r25
    4ac8:	09 f4       	brne	.+2      	; 0x4acc <udd_ep_trans_complet+0x200>
    4aca:	65 c0       	rjmp	.+202    	; 0x4b96 <udd_ep_trans_complet+0x2ca>
    4acc:	ac 01       	movw	r20, r24
    4ace:	42 1b       	sub	r20, r18
    4ad0:	53 0b       	sbc	r21, r19
    4ad2:	9a 01       	movw	r18, r20
    4ad4:	21 15       	cp	r18, r1
    4ad6:	54 e0       	ldi	r21, 0x04	; 4
    4ad8:	35 07       	cpc	r19, r21
    4ada:	48 f0       	brcs	.+18     	; 0x4aee <udd_ep_trans_complet+0x222>
    4adc:	2f ef       	ldi	r18, 0xFF	; 255
    4ade:	33 e0       	ldi	r19, 0x03	; 3
    4ae0:	c9 01       	movw	r24, r18
    4ae2:	b4 01       	movw	r22, r8
    4ae4:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__udivmodhi4>
    4ae8:	28 1b       	sub	r18, r24
    4aea:	39 0b       	sbc	r19, r25
    4aec:	06 c0       	rjmp	.+12     	; 0x4afa <udd_ep_trans_complet+0x22e>
    4aee:	c9 01       	movw	r24, r18
    4af0:	b4 01       	movw	r22, r8
    4af2:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__udivmodhi4>
    4af6:	28 1b       	sub	r18, r24
    4af8:	39 0b       	sbc	r19, r25
    4afa:	fe 01       	movw	r30, r28
    4afc:	ee 0f       	add	r30, r30
    4afe:	ff 1f       	adc	r31, r31
    4b00:	ee 0f       	add	r30, r30
    4b02:	ff 1f       	adc	r31, r31
    4b04:	ee 0f       	add	r30, r30
    4b06:	ff 1f       	adc	r31, r31
    4b08:	e0 57       	subi	r30, 0x70	; 112
    4b0a:	fb 4d       	sbci	r31, 0xDB	; 219
    4b0c:	16 86       	std	Z+14, r1	; 0x0e
    4b0e:	17 86       	std	Z+15, r1	; 0x0f
    4b10:	28 15       	cp	r18, r8
    4b12:	39 05       	cpc	r19, r9
    4b14:	00 f5       	brcc	.+64     	; 0x4b56 <udd_ep_trans_complet+0x28a>
    4b16:	d8 01       	movw	r26, r16
    4b18:	8c 91       	ld	r24, X
    4b1a:	84 60       	ori	r24, 0x04	; 4
    4b1c:	8c 93       	st	X, r24
    4b1e:	b0 e4       	ldi	r27, 0x40	; 64
    4b20:	db 9e       	mul	r13, r27
    4b22:	c0 01       	movw	r24, r0
    4b24:	11 24       	eor	r1, r1
    4b26:	8a 59       	subi	r24, 0x9A	; 154
    4b28:	9c 4d       	sbci	r25, 0xDC	; 220
    4b2a:	fe 01       	movw	r30, r28
    4b2c:	ee 0f       	add	r30, r30
    4b2e:	ff 1f       	adc	r31, r31
    4b30:	ee 0f       	add	r30, r30
    4b32:	ff 1f       	adc	r31, r31
    4b34:	ee 0f       	add	r30, r30
    4b36:	ff 1f       	adc	r31, r31
    4b38:	e0 56       	subi	r30, 0x60	; 96
    4b3a:	fb 4d       	sbci	r31, 0xDB	; 219
    4b3c:	80 83       	st	Z, r24
    4b3e:	91 83       	std	Z+1, r25	; 0x01
    4b40:	cc 0f       	add	r28, r28
    4b42:	dd 1f       	adc	r29, r29
    4b44:	cc 0f       	add	r28, r28
    4b46:	dd 1f       	adc	r29, r29
    4b48:	cc 0f       	add	r28, r28
    4b4a:	dd 1f       	adc	r29, r29
    4b4c:	c0 57       	subi	r28, 0x70	; 112
    4b4e:	db 4d       	sbci	r29, 0xDB	; 219
    4b50:	8a 8a       	std	Y+18, r8	; 0x12
    4b52:	9b 8a       	std	Y+19, r9	; 0x13
    4b54:	1c c0       	rjmp	.+56     	; 0x4b8e <udd_ep_trans_complet+0x2c2>
    4b56:	f8 01       	movw	r30, r16
    4b58:	41 81       	ldd	r20, Z+1	; 0x01
    4b5a:	52 81       	ldd	r21, Z+2	; 0x02
    4b5c:	85 81       	ldd	r24, Z+5	; 0x05
    4b5e:	96 81       	ldd	r25, Z+6	; 0x06
    4b60:	84 0f       	add	r24, r20
    4b62:	95 1f       	adc	r25, r21
    4b64:	fe 01       	movw	r30, r28
    4b66:	ee 0f       	add	r30, r30
    4b68:	ff 1f       	adc	r31, r31
    4b6a:	ee 0f       	add	r30, r30
    4b6c:	ff 1f       	adc	r31, r31
    4b6e:	ee 0f       	add	r30, r30
    4b70:	ff 1f       	adc	r31, r31
    4b72:	e0 56       	subi	r30, 0x60	; 96
    4b74:	fb 4d       	sbci	r31, 0xDB	; 219
    4b76:	80 83       	st	Z, r24
    4b78:	91 83       	std	Z+1, r25	; 0x01
    4b7a:	cc 0f       	add	r28, r28
    4b7c:	dd 1f       	adc	r29, r29
    4b7e:	cc 0f       	add	r28, r28
    4b80:	dd 1f       	adc	r29, r29
    4b82:	cc 0f       	add	r28, r28
    4b84:	dd 1f       	adc	r29, r29
    4b86:	c0 57       	subi	r28, 0x70	; 112
    4b88:	db 4d       	sbci	r29, 0xDB	; 219
    4b8a:	2a 8b       	std	Y+18, r18	; 0x12
    4b8c:	3b 8b       	std	Y+19, r19	; 0x13
    4b8e:	f7 01       	movw	r30, r14
    4b90:	02 e0       	ldi	r16, 0x02	; 2
    4b92:	06 93       	lac	Z, r16
    4b94:	13 c0       	rjmp	.+38     	; 0x4bbc <udd_ep_trans_complet+0x2f0>
    4b96:	d8 01       	movw	r26, r16
    4b98:	8c 91       	ld	r24, X
    4b9a:	80 ff       	sbrs	r24, 0
    4b9c:	0f c0       	rjmp	.+30     	; 0x4bbc <udd_ep_trans_complet+0x2f0>
    4b9e:	8e 7f       	andi	r24, 0xFE	; 254
    4ba0:	8c 93       	st	X, r24
    4ba2:	17 96       	adiw	r26, 0x07	; 7
    4ba4:	ed 91       	ld	r30, X+
    4ba6:	fc 91       	ld	r31, X
    4ba8:	18 97       	sbiw	r26, 0x08	; 8
    4baa:	30 97       	sbiw	r30, 0x00	; 0
    4bac:	39 f0       	breq	.+14     	; 0x4bbc <udd_ep_trans_complet+0x2f0>
    4bae:	15 96       	adiw	r26, 0x05	; 5
    4bb0:	6d 91       	ld	r22, X+
    4bb2:	7c 91       	ld	r23, X
    4bb4:	16 97       	sbiw	r26, 0x06	; 6
    4bb6:	4d 2d       	mov	r20, r13
    4bb8:	80 e0       	ldi	r24, 0x00	; 0
    4bba:	19 95       	eicall
    4bbc:	df 91       	pop	r29
    4bbe:	cf 91       	pop	r28
    4bc0:	1f 91       	pop	r17
    4bc2:	0f 91       	pop	r16
    4bc4:	ff 90       	pop	r15
    4bc6:	ef 90       	pop	r14
    4bc8:	df 90       	pop	r13
    4bca:	bf 90       	pop	r11
    4bcc:	af 90       	pop	r10
    4bce:	9f 90       	pop	r9
    4bd0:	8f 90       	pop	r8
    4bd2:	08 95       	ret

00004bd4 <udd_attach>:
    4bd4:	1f 93       	push	r17
    4bd6:	cf 93       	push	r28
    4bd8:	df 93       	push	r29
    4bda:	1f 92       	push	r1
    4bdc:	cd b7       	in	r28, 0x3d	; 61
    4bde:	de b7       	in	r29, 0x3e	; 62
    4be0:	8f b7       	in	r24, 0x3f	; 63
    4be2:	89 83       	std	Y+1, r24	; 0x01
    4be4:	f8 94       	cli
    4be6:	19 81       	ldd	r17, Y+1	; 0x01
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	cd dc       	rcall	.-1638   	; 0x4586 <udd_sleep_mode>
    4bec:	ea ec       	ldi	r30, 0xCA	; 202
    4bee:	f4 e0       	ldi	r31, 0x04	; 4
    4bf0:	80 e4       	ldi	r24, 0x40	; 64
    4bf2:	80 83       	st	Z, r24
    4bf4:	80 e2       	ldi	r24, 0x20	; 32
    4bf6:	80 83       	st	Z, r24
    4bf8:	e1 ec       	ldi	r30, 0xC1	; 193
    4bfa:	f4 e0       	ldi	r31, 0x04	; 4
    4bfc:	80 81       	ld	r24, Z
    4bfe:	81 60       	ori	r24, 0x01	; 1
    4c00:	80 83       	st	Z, r24
    4c02:	a9 ec       	ldi	r26, 0xC9	; 201
    4c04:	b4 e0       	ldi	r27, 0x04	; 4
    4c06:	8c 91       	ld	r24, X
    4c08:	82 60       	ori	r24, 0x02	; 2
    4c0a:	8c 93       	st	X, r24
    4c0c:	e8 ec       	ldi	r30, 0xC8	; 200
    4c0e:	f4 e0       	ldi	r31, 0x04	; 4
    4c10:	80 81       	ld	r24, Z
    4c12:	80 64       	ori	r24, 0x40	; 64
    4c14:	80 83       	st	Z, r24
    4c16:	8c 91       	ld	r24, X
    4c18:	81 60       	ori	r24, 0x01	; 1
    4c1a:	8c 93       	st	X, r24
    4c1c:	80 81       	ld	r24, Z
    4c1e:	80 68       	ori	r24, 0x80	; 128
    4c20:	80 83       	st	Z, r24
    4c22:	1f bf       	out	0x3f, r17	; 63
    4c24:	0f 90       	pop	r0
    4c26:	df 91       	pop	r29
    4c28:	cf 91       	pop	r28
    4c2a:	1f 91       	pop	r17
    4c2c:	08 95       	ret

00004c2e <udd_enable>:
    4c2e:	0f 93       	push	r16
    4c30:	1f 93       	push	r17
    4c32:	cf 93       	push	r28
    4c34:	df 93       	push	r29
    4c36:	1f 92       	push	r1
    4c38:	1f 92       	push	r1
    4c3a:	cd b7       	in	r28, 0x3d	; 61
    4c3c:	de b7       	in	r29, 0x3e	; 62
    4c3e:	00 e6       	ldi	r16, 0x60	; 96
    4c40:	10 e0       	ldi	r17, 0x00	; 0
    4c42:	f8 01       	movw	r30, r16
    4c44:	10 82       	st	Z, r1
    4c46:	80 e3       	ldi	r24, 0x30	; 48
    4c48:	0e 94 3e 33 	call	0x667c	; 0x667c <sysclk_enable_usb>
    4c4c:	e0 ec       	ldi	r30, 0xC0	; 192
    4c4e:	f4 e0       	ldi	r31, 0x04	; 4
    4c50:	80 81       	ld	r24, Z
    4c52:	80 64       	ori	r24, 0x40	; 64
    4c54:	80 83       	st	Z, r24
    4c56:	81 e0       	ldi	r24, 0x01	; 1
    4c58:	f8 01       	movw	r30, r16
    4c5a:	80 83       	st	Z, r24
    4c5c:	8f b7       	in	r24, 0x3f	; 63
    4c5e:	8a 83       	std	Y+2, r24	; 0x02
    4c60:	f8 94       	cli
    4c62:	1a 81       	ldd	r17, Y+2	; 0x02
    4c64:	e0 e9       	ldi	r30, 0x90	; 144
    4c66:	f4 e2       	ldi	r31, 0x24	; 36
    4c68:	15 86       	std	Z+13, r1	; 0x0d
    4c6a:	15 8a       	std	Z+21, r1	; 0x15
    4c6c:	15 8e       	std	Z+29, r1	; 0x1d
    4c6e:	15 a2       	std	Z+37, r1	; 0x25
    4c70:	15 a6       	std	Z+45, r1	; 0x2d
    4c72:	15 aa       	std	Z+53, r1	; 0x35
    4c74:	e6 e2       	ldi	r30, 0x26	; 38
    4c76:	f4 e2       	ldi	r31, 0x24	; 36
    4c78:	80 81       	ld	r24, Z
    4c7a:	8e 7f       	andi	r24, 0xFE	; 254
    4c7c:	80 83       	st	Z, r24
    4c7e:	ef e2       	ldi	r30, 0x2F	; 47
    4c80:	f4 e2       	ldi	r31, 0x24	; 36
    4c82:	80 81       	ld	r24, Z
    4c84:	8e 7f       	andi	r24, 0xFE	; 254
    4c86:	80 83       	st	Z, r24
    4c88:	e8 e3       	ldi	r30, 0x38	; 56
    4c8a:	f4 e2       	ldi	r31, 0x24	; 36
    4c8c:	80 81       	ld	r24, Z
    4c8e:	8e 7f       	andi	r24, 0xFE	; 254
    4c90:	80 83       	st	Z, r24
    4c92:	e1 e4       	ldi	r30, 0x41	; 65
    4c94:	f4 e2       	ldi	r31, 0x24	; 36
    4c96:	80 81       	ld	r24, Z
    4c98:	8e 7f       	andi	r24, 0xFE	; 254
    4c9a:	80 83       	st	Z, r24
    4c9c:	6a e1       	ldi	r22, 0x1A	; 26
    4c9e:	70 e0       	ldi	r23, 0x00	; 0
    4ca0:	82 e0       	ldi	r24, 0x02	; 2
    4ca2:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
    4ca6:	8f 3f       	cpi	r24, 0xFF	; 255
    4ca8:	19 f0       	breq	.+6      	; 0x4cb0 <udd_enable+0x82>
    4caa:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4cae:	03 c0       	rjmp	.+6      	; 0x4cb6 <udd_enable+0x88>
    4cb0:	8f e1       	ldi	r24, 0x1F	; 31
    4cb2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4cb6:	6b e1       	ldi	r22, 0x1B	; 27
    4cb8:	70 e0       	ldi	r23, 0x00	; 0
    4cba:	82 e0       	ldi	r24, 0x02	; 2
    4cbc:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
    4cc0:	8f 3f       	cpi	r24, 0xFF	; 255
    4cc2:	19 f0       	breq	.+6      	; 0x4cca <udd_enable+0x9c>
    4cc4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    4cc8:	03 c0       	rjmp	.+6      	; 0x4cd0 <udd_enable+0xa2>
    4cca:	8f e1       	ldi	r24, 0x1F	; 31
    4ccc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    4cd0:	e0 ec       	ldi	r30, 0xC0	; 192
    4cd2:	f4 e0       	ldi	r31, 0x04	; 4
    4cd4:	80 81       	ld	r24, Z
    4cd6:	82 60       	ori	r24, 0x02	; 2
    4cd8:	80 83       	st	Z, r24
    4cda:	80 81       	ld	r24, Z
    4cdc:	80 68       	ori	r24, 0x80	; 128
    4cde:	80 83       	st	Z, r24
    4ce0:	80 81       	ld	r24, Z
    4ce2:	80 61       	ori	r24, 0x10	; 16
    4ce4:	80 83       	st	Z, r24
    4ce6:	8c e9       	ldi	r24, 0x9C	; 156
    4ce8:	94 e2       	ldi	r25, 0x24	; 36
    4cea:	86 83       	std	Z+6, r24	; 0x06
    4cec:	97 83       	std	Z+7, r25	; 0x07
    4cee:	80 81       	ld	r24, Z
    4cf0:	80 62       	ori	r24, 0x20	; 32
    4cf2:	80 83       	st	Z, r24
    4cf4:	8f ef       	ldi	r24, 0xFF	; 255
    4cf6:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    4cfa:	e8 ec       	ldi	r30, 0xC8	; 200
    4cfc:	f4 e0       	ldi	r31, 0x04	; 4
    4cfe:	80 81       	ld	r24, Z
    4d00:	81 60       	ori	r24, 0x01	; 1
    4d02:	80 83       	st	Z, r24
    4d04:	10 92 d0 24 	sts	0x24D0, r1	; 0x8024d0 <udd_b_idle>
    4d08:	80 91 c8 27 	lds	r24, 0x27C8	; 0x8027c8 <sleepmgr_locks+0x5>
    4d0c:	8f 3f       	cpi	r24, 0xFF	; 255
    4d0e:	09 f4       	brne	.+2      	; 0x4d12 <udd_enable+0xe4>
    4d10:	ff cf       	rjmp	.-2      	; 0x4d10 <udd_enable+0xe2>
    4d12:	8f b7       	in	r24, 0x3f	; 63
    4d14:	89 83       	std	Y+1, r24	; 0x01
    4d16:	f8 94       	cli
    4d18:	99 81       	ldd	r25, Y+1	; 0x01
    4d1a:	e3 ec       	ldi	r30, 0xC3	; 195
    4d1c:	f7 e2       	ldi	r31, 0x27	; 39
    4d1e:	85 81       	ldd	r24, Z+5	; 0x05
    4d20:	8f 5f       	subi	r24, 0xFF	; 255
    4d22:	85 83       	std	Z+5, r24	; 0x05
    4d24:	9f bf       	out	0x3f, r25	; 63
    4d26:	56 df       	rcall	.-340    	; 0x4bd4 <udd_attach>
    4d28:	1f bf       	out	0x3f, r17	; 63
    4d2a:	0f 90       	pop	r0
    4d2c:	0f 90       	pop	r0
    4d2e:	df 91       	pop	r29
    4d30:	cf 91       	pop	r28
    4d32:	1f 91       	pop	r17
    4d34:	0f 91       	pop	r16
    4d36:	08 95       	ret

00004d38 <udd_is_high_speed>:
    4d38:	80 e0       	ldi	r24, 0x00	; 0
    4d3a:	08 95       	ret

00004d3c <udd_set_address>:
    4d3c:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    4d40:	08 95       	ret

00004d42 <udd_getaddress>:
    4d42:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    4d46:	08 95       	ret

00004d48 <udd_get_frame_number>:
    4d48:	80 91 cc 24 	lds	r24, 0x24CC	; 0x8024cc <udd_sram+0x3c>
    4d4c:	90 91 cd 24 	lds	r25, 0x24CD	; 0x8024cd <udd_sram+0x3d>
    4d50:	08 95       	ret

00004d52 <udd_get_micro_frame_number>:
    4d52:	80 e0       	ldi	r24, 0x00	; 0
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	08 95       	ret

00004d58 <udd_set_setup_payload>:
    4d58:	e3 eb       	ldi	r30, 0xB3	; 179
    4d5a:	f7 e2       	ldi	r31, 0x27	; 39
    4d5c:	80 87       	std	Z+8, r24	; 0x08
    4d5e:	91 87       	std	Z+9, r25	; 0x09
    4d60:	62 87       	std	Z+10, r22	; 0x0a
    4d62:	73 87       	std	Z+11, r23	; 0x0b
    4d64:	08 95       	ret

00004d66 <udd_ep_alloc>:
    4d66:	28 2f       	mov	r18, r24
    4d68:	2f 70       	andi	r18, 0x0F	; 15
    4d6a:	30 e0       	ldi	r19, 0x00	; 0
    4d6c:	22 0f       	add	r18, r18
    4d6e:	33 1f       	adc	r19, r19
    4d70:	08 2e       	mov	r0, r24
    4d72:	00 0c       	add	r0, r0
    4d74:	99 0b       	sbc	r25, r25
    4d76:	88 27       	eor	r24, r24
    4d78:	99 0f       	add	r25, r25
    4d7a:	88 1f       	adc	r24, r24
    4d7c:	99 27       	eor	r25, r25
    4d7e:	82 0f       	add	r24, r18
    4d80:	93 1f       	adc	r25, r19
    4d82:	fc 01       	movw	r30, r24
    4d84:	ee 0f       	add	r30, r30
    4d86:	ff 1f       	adc	r31, r31
    4d88:	ee 0f       	add	r30, r30
    4d8a:	ff 1f       	adc	r31, r31
    4d8c:	ee 0f       	add	r30, r30
    4d8e:	ff 1f       	adc	r31, r31
    4d90:	e0 57       	subi	r30, 0x70	; 112
    4d92:	fb 4d       	sbci	r31, 0xDB	; 219
    4d94:	25 85       	ldd	r18, Z+13	; 0x0d
    4d96:	20 7c       	andi	r18, 0xC0	; 192
    4d98:	09 f0       	breq	.+2      	; 0x4d9c <udd_ep_alloc+0x36>
    4d9a:	69 c0       	rjmp	.+210    	; 0x4e6e <udd_ep_alloc+0x108>
    4d9c:	63 70       	andi	r22, 0x03	; 3
    4d9e:	61 30       	cpi	r22, 0x01	; 1
    4da0:	11 f0       	breq	.+4      	; 0x4da6 <udd_ep_alloc+0x40>
    4da2:	18 f4       	brcc	.+6      	; 0x4daa <udd_ep_alloc+0x44>
    4da4:	04 c0       	rjmp	.+8      	; 0x4dae <udd_ep_alloc+0x48>
    4da6:	60 ec       	ldi	r22, 0xC0	; 192
    4da8:	03 c0       	rjmp	.+6      	; 0x4db0 <udd_ep_alloc+0x4a>
    4daa:	60 e8       	ldi	r22, 0x80	; 128
    4dac:	01 c0       	rjmp	.+2      	; 0x4db0 <udd_ep_alloc+0x4a>
    4dae:	60 e4       	ldi	r22, 0x40	; 64
    4db0:	40 38       	cpi	r20, 0x80	; 128
    4db2:	51 05       	cpc	r21, r1
    4db4:	e9 f0       	breq	.+58     	; 0x4df0 <udd_ep_alloc+0x8a>
    4db6:	50 f4       	brcc	.+20     	; 0x4dcc <udd_ep_alloc+0x66>
    4db8:	40 32       	cpi	r20, 0x20	; 32
    4dba:	51 05       	cpc	r21, r1
    4dbc:	a9 f0       	breq	.+42     	; 0x4de8 <udd_ep_alloc+0x82>
    4dbe:	40 34       	cpi	r20, 0x40	; 64
    4dc0:	51 05       	cpc	r21, r1
    4dc2:	a1 f0       	breq	.+40     	; 0x4dec <udd_ep_alloc+0x86>
    4dc4:	40 31       	cpi	r20, 0x10	; 16
    4dc6:	51 05       	cpc	r21, r1
    4dc8:	d9 f4       	brne	.+54     	; 0x4e00 <udd_ep_alloc+0x9a>
    4dca:	0c c0       	rjmp	.+24     	; 0x4de4 <udd_ep_alloc+0x7e>
    4dcc:	41 15       	cp	r20, r1
    4dce:	22 e0       	ldi	r18, 0x02	; 2
    4dd0:	52 07       	cpc	r21, r18
    4dd2:	91 f0       	breq	.+36     	; 0x4df8 <udd_ep_alloc+0x92>
    4dd4:	4f 3f       	cpi	r20, 0xFF	; 255
    4dd6:	23 e0       	ldi	r18, 0x03	; 3
    4dd8:	52 07       	cpc	r21, r18
    4dda:	81 f0       	breq	.+32     	; 0x4dfc <udd_ep_alloc+0x96>
    4ddc:	41 15       	cp	r20, r1
    4dde:	51 40       	sbci	r21, 0x01	; 1
    4de0:	79 f4       	brne	.+30     	; 0x4e00 <udd_ep_alloc+0x9a>
    4de2:	08 c0       	rjmp	.+16     	; 0x4df4 <udd_ep_alloc+0x8e>
    4de4:	21 e0       	ldi	r18, 0x01	; 1
    4de6:	0d c0       	rjmp	.+26     	; 0x4e02 <udd_ep_alloc+0x9c>
    4de8:	22 e0       	ldi	r18, 0x02	; 2
    4dea:	0b c0       	rjmp	.+22     	; 0x4e02 <udd_ep_alloc+0x9c>
    4dec:	23 e0       	ldi	r18, 0x03	; 3
    4dee:	09 c0       	rjmp	.+18     	; 0x4e02 <udd_ep_alloc+0x9c>
    4df0:	24 e0       	ldi	r18, 0x04	; 4
    4df2:	07 c0       	rjmp	.+14     	; 0x4e02 <udd_ep_alloc+0x9c>
    4df4:	25 e0       	ldi	r18, 0x05	; 5
    4df6:	05 c0       	rjmp	.+10     	; 0x4e02 <udd_ep_alloc+0x9c>
    4df8:	26 e0       	ldi	r18, 0x06	; 6
    4dfa:	03 c0       	rjmp	.+6      	; 0x4e02 <udd_ep_alloc+0x9c>
    4dfc:	27 e0       	ldi	r18, 0x07	; 7
    4dfe:	01 c0       	rjmp	.+2      	; 0x4e02 <udd_ep_alloc+0x9c>
    4e00:	20 e0       	ldi	r18, 0x00	; 0
    4e02:	fc 01       	movw	r30, r24
    4e04:	ee 0f       	add	r30, r30
    4e06:	ff 1f       	adc	r31, r31
    4e08:	ee 0f       	add	r30, r30
    4e0a:	ff 1f       	adc	r31, r31
    4e0c:	ee 0f       	add	r30, r30
    4e0e:	ff 1f       	adc	r31, r31
    4e10:	e0 57       	subi	r30, 0x70	; 112
    4e12:	fb 4d       	sbci	r31, 0xDB	; 219
    4e14:	15 86       	std	Z+13, r1	; 0x0d
    4e16:	36 e0       	ldi	r19, 0x06	; 6
    4e18:	34 87       	std	Z+12, r19	; 0x0c
    4e1a:	26 2b       	or	r18, r22
    4e1c:	25 87       	std	Z+13, r18	; 0x0d
    4e1e:	fc 01       	movw	r30, r24
    4e20:	ee 0f       	add	r30, r30
    4e22:	ff 1f       	adc	r31, r31
    4e24:	ee 0f       	add	r30, r30
    4e26:	ff 1f       	adc	r31, r31
    4e28:	ee 0f       	add	r30, r30
    4e2a:	ff 1f       	adc	r31, r31
    4e2c:	e0 57       	subi	r30, 0x70	; 112
    4e2e:	fb 4d       	sbci	r31, 0xDB	; 219
    4e30:	25 85       	ldd	r18, Z+13	; 0x0d
    4e32:	20 7c       	andi	r18, 0xC0	; 192
    4e34:	20 3c       	cpi	r18, 0xC0	; 192
    4e36:	69 f4       	brne	.+26     	; 0x4e52 <udd_ep_alloc+0xec>
    4e38:	fc 01       	movw	r30, r24
    4e3a:	ee 0f       	add	r30, r30
    4e3c:	ff 1f       	adc	r31, r31
    4e3e:	ee 0f       	add	r30, r30
    4e40:	ff 1f       	adc	r31, r31
    4e42:	ee 0f       	add	r30, r30
    4e44:	ff 1f       	adc	r31, r31
    4e46:	e0 57       	subi	r30, 0x70	; 112
    4e48:	fb 4d       	sbci	r31, 0xDB	; 219
    4e4a:	25 85       	ldd	r18, Z+13	; 0x0d
    4e4c:	27 70       	andi	r18, 0x07	; 7
    4e4e:	27 30       	cpi	r18, 0x07	; 7
    4e50:	81 f0       	breq	.+32     	; 0x4e72 <udd_ep_alloc+0x10c>
    4e52:	88 0f       	add	r24, r24
    4e54:	99 1f       	adc	r25, r25
    4e56:	88 0f       	add	r24, r24
    4e58:	99 1f       	adc	r25, r25
    4e5a:	88 0f       	add	r24, r24
    4e5c:	99 1f       	adc	r25, r25
    4e5e:	fc 01       	movw	r30, r24
    4e60:	e0 57       	subi	r30, 0x70	; 112
    4e62:	fb 4d       	sbci	r31, 0xDB	; 219
    4e64:	85 85       	ldd	r24, Z+13	; 0x0d
    4e66:	80 62       	ori	r24, 0x20	; 32
    4e68:	85 87       	std	Z+13, r24	; 0x0d
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	08 95       	ret
    4e6e:	80 e0       	ldi	r24, 0x00	; 0
    4e70:	08 95       	ret
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	08 95       	ret

00004e76 <udd_ep_is_halted>:
    4e76:	e8 2f       	mov	r30, r24
    4e78:	ef 70       	andi	r30, 0x0F	; 15
    4e7a:	f0 e0       	ldi	r31, 0x00	; 0
    4e7c:	ee 0f       	add	r30, r30
    4e7e:	ff 1f       	adc	r31, r31
    4e80:	08 2e       	mov	r0, r24
    4e82:	00 0c       	add	r0, r0
    4e84:	99 0b       	sbc	r25, r25
    4e86:	88 27       	eor	r24, r24
    4e88:	99 0f       	add	r25, r25
    4e8a:	88 1f       	adc	r24, r24
    4e8c:	99 27       	eor	r25, r25
    4e8e:	e8 0f       	add	r30, r24
    4e90:	f9 1f       	adc	r31, r25
    4e92:	ee 0f       	add	r30, r30
    4e94:	ff 1f       	adc	r31, r31
    4e96:	ee 0f       	add	r30, r30
    4e98:	ff 1f       	adc	r31, r31
    4e9a:	ee 0f       	add	r30, r30
    4e9c:	ff 1f       	adc	r31, r31
    4e9e:	e0 57       	subi	r30, 0x70	; 112
    4ea0:	fb 4d       	sbci	r31, 0xDB	; 219
    4ea2:	85 85       	ldd	r24, Z+13	; 0x0d
    4ea4:	82 fb       	bst	r24, 2
    4ea6:	88 27       	eor	r24, r24
    4ea8:	80 f9       	bld	r24, 0
    4eaa:	08 95       	ret

00004eac <udd_ep_clear_halt>:
    4eac:	0f 93       	push	r16
    4eae:	28 2f       	mov	r18, r24
    4eb0:	2f 70       	andi	r18, 0x0F	; 15
    4eb2:	30 e0       	ldi	r19, 0x00	; 0
    4eb4:	a9 01       	movw	r20, r18
    4eb6:	44 0f       	add	r20, r20
    4eb8:	55 1f       	adc	r21, r21
    4eba:	28 2f       	mov	r18, r24
    4ebc:	08 2e       	mov	r0, r24
    4ebe:	00 0c       	add	r0, r0
    4ec0:	33 0b       	sbc	r19, r19
    4ec2:	22 27       	eor	r18, r18
    4ec4:	33 0f       	add	r19, r19
    4ec6:	22 1f       	adc	r18, r18
    4ec8:	33 27       	eor	r19, r19
    4eca:	24 0f       	add	r18, r20
    4ecc:	35 1f       	adc	r19, r21
    4ece:	a9 01       	movw	r20, r18
    4ed0:	44 0f       	add	r20, r20
    4ed2:	55 1f       	adc	r21, r21
    4ed4:	44 0f       	add	r20, r20
    4ed6:	55 1f       	adc	r21, r21
    4ed8:	44 0f       	add	r20, r20
    4eda:	55 1f       	adc	r21, r21
    4edc:	fa 01       	movw	r30, r20
    4ede:	e4 56       	subi	r30, 0x64	; 100
    4ee0:	fb 4d       	sbci	r31, 0xDB	; 219
    4ee2:	01 e0       	ldi	r16, 0x01	; 1
    4ee4:	06 93       	lac	Z, r16
    4ee6:	fa 01       	movw	r30, r20
    4ee8:	e0 57       	subi	r30, 0x70	; 112
    4eea:	fb 4d       	sbci	r31, 0xDB	; 219
    4eec:	95 85       	ldd	r25, Z+13	; 0x0d
    4eee:	92 ff       	sbrs	r25, 2
    4ef0:	11 c0       	rjmp	.+34     	; 0x4f14 <udd_ep_clear_halt+0x68>
    4ef2:	fa 01       	movw	r30, r20
    4ef4:	e0 57       	subi	r30, 0x70	; 112
    4ef6:	fb 4d       	sbci	r31, 0xDB	; 219
    4ef8:	95 85       	ldd	r25, Z+13	; 0x0d
    4efa:	9b 7f       	andi	r25, 0xFB	; 251
    4efc:	95 87       	std	Z+13, r25	; 0x0d
    4efe:	59 dc       	rcall	.-1870   	; 0x47b2 <udd_ep_get_job>
    4f00:	fc 01       	movw	r30, r24
    4f02:	80 81       	ld	r24, Z
    4f04:	80 ff       	sbrs	r24, 0
    4f06:	06 c0       	rjmp	.+12     	; 0x4f14 <udd_ep_clear_halt+0x68>
    4f08:	8e 7f       	andi	r24, 0xFE	; 254
    4f0a:	80 83       	st	Z, r24
    4f0c:	07 80       	ldd	r0, Z+7	; 0x07
    4f0e:	f0 85       	ldd	r31, Z+8	; 0x08
    4f10:	e0 2d       	mov	r30, r0
    4f12:	19 95       	eicall
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	0f 91       	pop	r16
    4f18:	08 95       	ret

00004f1a <udd_ep_run>:
    4f1a:	6f 92       	push	r6
    4f1c:	7f 92       	push	r7
    4f1e:	8f 92       	push	r8
    4f20:	9f 92       	push	r9
    4f22:	af 92       	push	r10
    4f24:	bf 92       	push	r11
    4f26:	cf 92       	push	r12
    4f28:	df 92       	push	r13
    4f2a:	ef 92       	push	r14
    4f2c:	ff 92       	push	r15
    4f2e:	0f 93       	push	r16
    4f30:	1f 93       	push	r17
    4f32:	cf 93       	push	r28
    4f34:	df 93       	push	r29
    4f36:	1f 92       	push	r1
    4f38:	cd b7       	in	r28, 0x3d	; 61
    4f3a:	de b7       	in	r29, 0x3e	; 62
    4f3c:	78 2e       	mov	r7, r24
    4f3e:	66 2e       	mov	r6, r22
    4f40:	4a 01       	movw	r8, r20
    4f42:	59 01       	movw	r10, r18
    4f44:	36 dc       	rcall	.-1940   	; 0x47b2 <udd_ep_get_job>
    4f46:	6c 01       	movw	r12, r24
    4f48:	27 2d       	mov	r18, r7
    4f4a:	87 2d       	mov	r24, r7
    4f4c:	8f 70       	andi	r24, 0x0F	; 15
    4f4e:	e8 2e       	mov	r14, r24
    4f50:	f1 2c       	mov	r15, r1
    4f52:	c7 01       	movw	r24, r14
    4f54:	88 0f       	add	r24, r24
    4f56:	99 1f       	adc	r25, r25
    4f58:	e7 2c       	mov	r14, r7
    4f5a:	07 2c       	mov	r0, r7
    4f5c:	00 0c       	add	r0, r0
    4f5e:	ff 08       	sbc	r15, r15
    4f60:	ee 24       	eor	r14, r14
    4f62:	ff 0c       	add	r15, r15
    4f64:	ee 1c       	adc	r14, r14
    4f66:	ff 24       	eor	r15, r15
    4f68:	e8 0e       	add	r14, r24
    4f6a:	f9 1e       	adc	r15, r25
    4f6c:	f7 01       	movw	r30, r14
    4f6e:	ee 0f       	add	r30, r30
    4f70:	ff 1f       	adc	r31, r31
    4f72:	ee 0f       	add	r30, r30
    4f74:	ff 1f       	adc	r31, r31
    4f76:	ee 0f       	add	r30, r30
    4f78:	ff 1f       	adc	r31, r31
    4f7a:	e0 57       	subi	r30, 0x70	; 112
    4f7c:	fb 4d       	sbci	r31, 0xDB	; 219
    4f7e:	85 85       	ldd	r24, Z+13	; 0x0d
    4f80:	80 7c       	andi	r24, 0xC0	; 192
    4f82:	09 f4       	brne	.+2      	; 0x4f86 <udd_ep_run+0x6c>
    4f84:	82 c0       	rjmp	.+260    	; 0x508a <udd_ep_run+0x170>
    4f86:	f7 01       	movw	r30, r14
    4f88:	ee 0f       	add	r30, r30
    4f8a:	ff 1f       	adc	r31, r31
    4f8c:	ee 0f       	add	r30, r30
    4f8e:	ff 1f       	adc	r31, r31
    4f90:	ee 0f       	add	r30, r30
    4f92:	ff 1f       	adc	r31, r31
    4f94:	e0 57       	subi	r30, 0x70	; 112
    4f96:	fb 4d       	sbci	r31, 0xDB	; 219
    4f98:	85 85       	ldd	r24, Z+13	; 0x0d
    4f9a:	80 7c       	andi	r24, 0xC0	; 192
    4f9c:	80 3c       	cpi	r24, 0xC0	; 192
    4f9e:	61 f0       	breq	.+24     	; 0x4fb8 <udd_ep_run+0x9e>
    4fa0:	f7 01       	movw	r30, r14
    4fa2:	ee 0f       	add	r30, r30
    4fa4:	ff 1f       	adc	r31, r31
    4fa6:	ee 0f       	add	r30, r30
    4fa8:	ff 1f       	adc	r31, r31
    4faa:	ee 0f       	add	r30, r30
    4fac:	ff 1f       	adc	r31, r31
    4fae:	e0 57       	subi	r30, 0x70	; 112
    4fb0:	fb 4d       	sbci	r31, 0xDB	; 219
    4fb2:	85 85       	ldd	r24, Z+13	; 0x0d
    4fb4:	82 fd       	sbrc	r24, 2
    4fb6:	6b c0       	rjmp	.+214    	; 0x508e <udd_ep_run+0x174>
    4fb8:	8f b7       	in	r24, 0x3f	; 63
    4fba:	89 83       	std	Y+1, r24	; 0x01
    4fbc:	f8 94       	cli
    4fbe:	89 81       	ldd	r24, Y+1	; 0x01
    4fc0:	f6 01       	movw	r30, r12
    4fc2:	90 81       	ld	r25, Z
    4fc4:	90 ff       	sbrs	r25, 0
    4fc6:	03 c0       	rjmp	.+6      	; 0x4fce <udd_ep_run+0xb4>
    4fc8:	8f bf       	out	0x3f, r24	; 63
    4fca:	80 e0       	ldi	r24, 0x00	; 0
    4fcc:	61 c0       	rjmp	.+194    	; 0x5090 <udd_ep_run+0x176>
    4fce:	f6 01       	movw	r30, r12
    4fd0:	90 81       	ld	r25, Z
    4fd2:	91 60       	ori	r25, 0x01	; 1
    4fd4:	90 83       	st	Z, r25
    4fd6:	8f bf       	out	0x3f, r24	; 63
    4fd8:	81 82       	std	Z+1, r8	; 0x01
    4fda:	92 82       	std	Z+2, r9	; 0x02
    4fdc:	a3 82       	std	Z+3, r10	; 0x03
    4fde:	b4 82       	std	Z+4, r11	; 0x04
    4fe0:	15 82       	std	Z+5, r1	; 0x05
    4fe2:	16 82       	std	Z+6, r1	; 0x06
    4fe4:	07 83       	std	Z+7, r16	; 0x07
    4fe6:	10 87       	std	Z+8, r17	; 0x08
    4fe8:	61 10       	cpse	r6, r1
    4fea:	06 c0       	rjmp	.+12     	; 0x4ff8 <udd_ep_run+0xde>
    4fec:	91 e0       	ldi	r25, 0x01	; 1
    4fee:	a1 14       	cp	r10, r1
    4ff0:	b1 04       	cpc	r11, r1
    4ff2:	19 f0       	breq	.+6      	; 0x4ffa <udd_ep_run+0xe0>
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	01 c0       	rjmp	.+2      	; 0x4ffa <udd_ep_run+0xe0>
    4ff8:	91 e0       	ldi	r25, 0x01	; 1
    4ffa:	f6 01       	movw	r30, r12
    4ffc:	80 81       	ld	r24, Z
    4ffe:	90 fb       	bst	r25, 0
    5000:	81 f9       	bld	r24, 1
    5002:	8b 7f       	andi	r24, 0xFB	; 251
    5004:	80 83       	st	Z, r24
    5006:	22 23       	and	r18, r18
    5008:	64 f4       	brge	.+24     	; 0x5022 <udd_ep_run+0x108>
    500a:	f7 01       	movw	r30, r14
    500c:	ee 0f       	add	r30, r30
    500e:	ff 1f       	adc	r31, r31
    5010:	ee 0f       	add	r30, r30
    5012:	ff 1f       	adc	r31, r31
    5014:	ee 0f       	add	r30, r30
    5016:	ff 1f       	adc	r31, r31
    5018:	e0 57       	subi	r30, 0x70	; 112
    501a:	fb 4d       	sbci	r31, 0xDB	; 219
    501c:	12 8a       	std	Z+18, r1	; 0x12
    501e:	13 8a       	std	Z+19, r1	; 0x13
    5020:	30 c0       	rjmp	.+96     	; 0x5082 <udd_ep_run+0x168>
    5022:	f7 01       	movw	r30, r14
    5024:	ee 0f       	add	r30, r30
    5026:	ff 1f       	adc	r31, r31
    5028:	ee 0f       	add	r30, r30
    502a:	ff 1f       	adc	r31, r31
    502c:	ee 0f       	add	r30, r30
    502e:	ff 1f       	adc	r31, r31
    5030:	e0 57       	subi	r30, 0x70	; 112
    5032:	fb 4d       	sbci	r31, 0xDB	; 219
    5034:	85 85       	ldd	r24, Z+13	; 0x0d
    5036:	80 7c       	andi	r24, 0xC0	; 192
    5038:	80 3c       	cpi	r24, 0xC0	; 192
    503a:	b1 f4       	brne	.+44     	; 0x5068 <udd_ep_run+0x14e>
    503c:	c7 01       	movw	r24, r14
    503e:	88 0f       	add	r24, r24
    5040:	99 1f       	adc	r25, r25
    5042:	88 0f       	add	r24, r24
    5044:	99 1f       	adc	r25, r25
    5046:	88 0f       	add	r24, r24
    5048:	99 1f       	adc	r25, r25
    504a:	84 56       	subi	r24, 0x64	; 100
    504c:	9b 4d       	sbci	r25, 0xDB	; 219
    504e:	88 db       	rcall	.-2288   	; 0x4760 <udd_ep_get_size>
    5050:	bc 01       	movw	r22, r24
    5052:	c5 01       	movw	r24, r10
    5054:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__udivmodhi4>
    5058:	89 2b       	or	r24, r25
    505a:	31 f0       	breq	.+12     	; 0x5068 <udd_ep_run+0x14e>
    505c:	f6 01       	movw	r30, r12
    505e:	80 81       	ld	r24, Z
    5060:	8e 7f       	andi	r24, 0xFE	; 254
    5062:	80 83       	st	Z, r24
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	14 c0       	rjmp	.+40     	; 0x5090 <udd_ep_run+0x176>
    5068:	f7 01       	movw	r30, r14
    506a:	ee 0f       	add	r30, r30
    506c:	ff 1f       	adc	r31, r31
    506e:	ee 0f       	add	r30, r30
    5070:	ff 1f       	adc	r31, r31
    5072:	ee 0f       	add	r30, r30
    5074:	ff 1f       	adc	r31, r31
    5076:	e0 57       	subi	r30, 0x70	; 112
    5078:	fb 4d       	sbci	r31, 0xDB	; 219
    507a:	16 86       	std	Z+14, r1	; 0x0e
    507c:	17 86       	std	Z+15, r1	; 0x0f
    507e:	12 8a       	std	Z+18, r1	; 0x12
    5080:	13 8a       	std	Z+19, r1	; 0x13
    5082:	87 2d       	mov	r24, r7
    5084:	23 dc       	rcall	.-1978   	; 0x48cc <udd_ep_trans_complet>
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	03 c0       	rjmp	.+6      	; 0x5090 <udd_ep_run+0x176>
    508a:	80 e0       	ldi	r24, 0x00	; 0
    508c:	01 c0       	rjmp	.+2      	; 0x5090 <udd_ep_run+0x176>
    508e:	80 e0       	ldi	r24, 0x00	; 0
    5090:	0f 90       	pop	r0
    5092:	df 91       	pop	r29
    5094:	cf 91       	pop	r28
    5096:	1f 91       	pop	r17
    5098:	0f 91       	pop	r16
    509a:	ff 90       	pop	r15
    509c:	ef 90       	pop	r14
    509e:	df 90       	pop	r13
    50a0:	cf 90       	pop	r12
    50a2:	bf 90       	pop	r11
    50a4:	af 90       	pop	r10
    50a6:	9f 90       	pop	r9
    50a8:	8f 90       	pop	r8
    50aa:	7f 90       	pop	r7
    50ac:	6f 90       	pop	r6
    50ae:	08 95       	ret

000050b0 <udd_ep_abort>:
    50b0:	ff 92       	push	r15
    50b2:	0f 93       	push	r16
    50b4:	1f 93       	push	r17
    50b6:	cf 93       	push	r28
    50b8:	df 93       	push	r29
    50ba:	18 2f       	mov	r17, r24
    50bc:	c8 2f       	mov	r28, r24
    50be:	cf 70       	andi	r28, 0x0F	; 15
    50c0:	d0 e0       	ldi	r29, 0x00	; 0
    50c2:	ce 01       	movw	r24, r28
    50c4:	88 0f       	add	r24, r24
    50c6:	99 1f       	adc	r25, r25
    50c8:	c1 2f       	mov	r28, r17
    50ca:	01 2e       	mov	r0, r17
    50cc:	00 0c       	add	r0, r0
    50ce:	dd 0b       	sbc	r29, r29
    50d0:	cc 27       	eor	r28, r28
    50d2:	dd 0f       	add	r29, r29
    50d4:	cc 1f       	adc	r28, r28
    50d6:	dd 27       	eor	r29, r29
    50d8:	c8 0f       	add	r28, r24
    50da:	d9 1f       	adc	r29, r25
    50dc:	81 2f       	mov	r24, r17
    50de:	69 db       	rcall	.-2350   	; 0x47b2 <udd_ep_get_job>
    50e0:	dc 01       	movw	r26, r24
    50e2:	fe 01       	movw	r30, r28
    50e4:	ee 0f       	add	r30, r30
    50e6:	ff 1f       	adc	r31, r31
    50e8:	ee 0f       	add	r30, r30
    50ea:	ff 1f       	adc	r31, r31
    50ec:	ee 0f       	add	r30, r30
    50ee:	ff 1f       	adc	r31, r31
    50f0:	e4 56       	subi	r30, 0x64	; 100
    50f2:	fb 4d       	sbci	r31, 0xDB	; 219
    50f4:	02 e0       	ldi	r16, 0x02	; 2
    50f6:	05 93       	las	Z, r16
    50f8:	8c 91       	ld	r24, X
    50fa:	80 ff       	sbrs	r24, 0
    50fc:	22 c0       	rjmp	.+68     	; 0x5142 <udd_ep_abort+0x92>
    50fe:	8e 7f       	andi	r24, 0xFE	; 254
    5100:	8c 93       	st	X, r24
    5102:	17 96       	adiw	r26, 0x07	; 7
    5104:	ed 91       	ld	r30, X+
    5106:	fc 91       	ld	r31, X
    5108:	18 97       	sbiw	r26, 0x08	; 8
    510a:	30 97       	sbiw	r30, 0x00	; 0
    510c:	d1 f0       	breq	.+52     	; 0x5142 <udd_ep_abort+0x92>
    510e:	11 23       	and	r17, r17
    5110:	5c f4       	brge	.+22     	; 0x5128 <udd_ep_abort+0x78>
    5112:	cc 0f       	add	r28, r28
    5114:	dd 1f       	adc	r29, r29
    5116:	cc 0f       	add	r28, r28
    5118:	dd 1f       	adc	r29, r29
    511a:	cc 0f       	add	r28, r28
    511c:	dd 1f       	adc	r29, r29
    511e:	c0 57       	subi	r28, 0x70	; 112
    5120:	db 4d       	sbci	r29, 0xDB	; 219
    5122:	6a 89       	ldd	r22, Y+18	; 0x12
    5124:	7b 89       	ldd	r23, Y+19	; 0x13
    5126:	0a c0       	rjmp	.+20     	; 0x513c <udd_ep_abort+0x8c>
    5128:	cc 0f       	add	r28, r28
    512a:	dd 1f       	adc	r29, r29
    512c:	cc 0f       	add	r28, r28
    512e:	dd 1f       	adc	r29, r29
    5130:	cc 0f       	add	r28, r28
    5132:	dd 1f       	adc	r29, r29
    5134:	c0 57       	subi	r28, 0x70	; 112
    5136:	db 4d       	sbci	r29, 0xDB	; 219
    5138:	6e 85       	ldd	r22, Y+14	; 0x0e
    513a:	7f 85       	ldd	r23, Y+15	; 0x0f
    513c:	41 2f       	mov	r20, r17
    513e:	81 e0       	ldi	r24, 0x01	; 1
    5140:	19 95       	eicall
    5142:	df 91       	pop	r29
    5144:	cf 91       	pop	r28
    5146:	1f 91       	pop	r17
    5148:	0f 91       	pop	r16
    514a:	ff 90       	pop	r15
    514c:	08 95       	ret

0000514e <udd_ep_free>:
    514e:	cf 93       	push	r28
    5150:	c8 2f       	mov	r28, r24
    5152:	ae df       	rcall	.-164    	; 0x50b0 <udd_ep_abort>
    5154:	ec 2f       	mov	r30, r28
    5156:	ef 70       	andi	r30, 0x0F	; 15
    5158:	f0 e0       	ldi	r31, 0x00	; 0
    515a:	ee 0f       	add	r30, r30
    515c:	ff 1f       	adc	r31, r31
    515e:	8c 2f       	mov	r24, r28
    5160:	cc 0f       	add	r28, r28
    5162:	99 0b       	sbc	r25, r25
    5164:	88 27       	eor	r24, r24
    5166:	99 0f       	add	r25, r25
    5168:	88 1f       	adc	r24, r24
    516a:	99 27       	eor	r25, r25
    516c:	e8 0f       	add	r30, r24
    516e:	f9 1f       	adc	r31, r25
    5170:	ee 0f       	add	r30, r30
    5172:	ff 1f       	adc	r31, r31
    5174:	ee 0f       	add	r30, r30
    5176:	ff 1f       	adc	r31, r31
    5178:	ee 0f       	add	r30, r30
    517a:	ff 1f       	adc	r31, r31
    517c:	e0 57       	subi	r30, 0x70	; 112
    517e:	fb 4d       	sbci	r31, 0xDB	; 219
    5180:	15 86       	std	Z+13, r1	; 0x0d
    5182:	cf 91       	pop	r28
    5184:	08 95       	ret

00005186 <udd_ep_set_halt>:
    5186:	e8 2f       	mov	r30, r24
    5188:	ef 70       	andi	r30, 0x0F	; 15
    518a:	f0 e0       	ldi	r31, 0x00	; 0
    518c:	ee 0f       	add	r30, r30
    518e:	ff 1f       	adc	r31, r31
    5190:	28 2f       	mov	r18, r24
    5192:	08 2e       	mov	r0, r24
    5194:	00 0c       	add	r0, r0
    5196:	33 0b       	sbc	r19, r19
    5198:	22 27       	eor	r18, r18
    519a:	33 0f       	add	r19, r19
    519c:	22 1f       	adc	r18, r18
    519e:	33 27       	eor	r19, r19
    51a0:	e2 0f       	add	r30, r18
    51a2:	f3 1f       	adc	r31, r19
    51a4:	ee 0f       	add	r30, r30
    51a6:	ff 1f       	adc	r31, r31
    51a8:	ee 0f       	add	r30, r30
    51aa:	ff 1f       	adc	r31, r31
    51ac:	ee 0f       	add	r30, r30
    51ae:	ff 1f       	adc	r31, r31
    51b0:	e0 57       	subi	r30, 0x70	; 112
    51b2:	fb 4d       	sbci	r31, 0xDB	; 219
    51b4:	95 85       	ldd	r25, Z+13	; 0x0d
    51b6:	94 60       	ori	r25, 0x04	; 4
    51b8:	95 87       	std	Z+13, r25	; 0x0d
    51ba:	7a df       	rcall	.-268    	; 0x50b0 <udd_ep_abort>
    51bc:	81 e0       	ldi	r24, 0x01	; 1
    51be:	08 95       	ret

000051c0 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    51c0:	1f 92       	push	r1
    51c2:	0f 92       	push	r0
    51c4:	0f b6       	in	r0, 0x3f	; 63
    51c6:	0f 92       	push	r0
    51c8:	11 24       	eor	r1, r1
    51ca:	0b b6       	in	r0, 0x3b	; 59
    51cc:	0f 92       	push	r0
    51ce:	0f 93       	push	r16
    51d0:	2f 93       	push	r18
    51d2:	3f 93       	push	r19
    51d4:	4f 93       	push	r20
    51d6:	5f 93       	push	r21
    51d8:	6f 93       	push	r22
    51da:	7f 93       	push	r23
    51dc:	8f 93       	push	r24
    51de:	9f 93       	push	r25
    51e0:	af 93       	push	r26
    51e2:	bf 93       	push	r27
    51e4:	ef 93       	push	r30
    51e6:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    51e8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    51ec:	88 23       	and	r24, r24
    51ee:	34 f4       	brge	.+12     	; 0x51fc <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    51f0:	80 e8       	ldi	r24, 0x80	; 128
    51f2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    51f6:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    51fa:	88 c0       	rjmp	.+272    	; 0x530c <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    51fc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5200:	82 ff       	sbrs	r24, 2
    5202:	20 c0       	rjmp	.+64     	; 0x5244 <__vector_125+0x84>
		udd_ack_underflow_event();
    5204:	84 e0       	ldi	r24, 0x04	; 4
    5206:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    520a:	80 91 a4 24 	lds	r24, 0x24A4	; 0x8024a4 <udd_sram+0x14>
    520e:	86 ff       	sbrs	r24, 6
    5210:	7d c0       	rjmp	.+250    	; 0x530c <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    5212:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5216:	81 fd       	sbrc	r24, 1
    5218:	79 c0       	rjmp	.+242    	; 0x530c <__vector_125+0x14c>
    521a:	e6 da       	rcall	.-2612   	; 0x47e8 <udd_ctrl_interrupt_tc_setup>
    521c:	81 11       	cpse	r24, r1
    521e:	76 c0       	rjmp	.+236    	; 0x530c <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    5220:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <udd_ep_control_state>
    5224:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    5226:	11 f4       	brne	.+4      	; 0x522c <__vector_125+0x6c>
    5228:	19 da       	rcall	.-3022   	; 0x465c <udd_ctrl_send_zlp_in>
    522a:	70 c0       	rjmp	.+224    	; 0x530c <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    522c:	84 30       	cpi	r24, 0x04	; 4
    522e:	09 f0       	breq	.+2      	; 0x5232 <__vector_125+0x72>
    5230:	6d c0       	rjmp	.+218    	; 0x530c <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    5232:	e5 ea       	ldi	r30, 0xA5	; 165
    5234:	f4 e2       	ldi	r31, 0x24	; 36
    5236:	04 e0       	ldi	r16, 0x04	; 4
    5238:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    523a:	ed e9       	ldi	r30, 0x9D	; 157
    523c:	f4 e2       	ldi	r31, 0x24	; 36
    523e:	04 e0       	ldi	r16, 0x04	; 4
    5240:	05 93       	las	Z, r16
    5242:	64 c0       	rjmp	.+200    	; 0x530c <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    5244:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5248:	81 ff       	sbrs	r24, 1
    524a:	5b c0       	rjmp	.+182    	; 0x5302 <__vector_125+0x142>
		udd_ack_overflow_event();
    524c:	82 e0       	ldi	r24, 0x02	; 2
    524e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    5252:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_sram+0xc>
    5256:	86 ff       	sbrs	r24, 6
    5258:	59 c0       	rjmp	.+178    	; 0x530c <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    525a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    525e:	81 fd       	sbrc	r24, 1
    5260:	55 c0       	rjmp	.+170    	; 0x530c <__vector_125+0x14c>
    5262:	c2 da       	rcall	.-2684   	; 0x47e8 <udd_ctrl_interrupt_tc_setup>
    5264:	81 11       	cpse	r24, r1
    5266:	52 c0       	rjmp	.+164    	; 0x530c <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    5268:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <udd_ep_control_state>
    526c:	82 30       	cpi	r24, 0x02	; 2
    526e:	41 f4       	brne	.+16     	; 0x5280 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    5270:	84 e0       	ldi	r24, 0x04	; 4
    5272:	80 93 8e 24 	sts	0x248E, r24	; 0x80248e <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    5276:	ec e9       	ldi	r30, 0x9C	; 156
    5278:	f4 e2       	ldi	r31, 0x24	; 36
    527a:	02 e0       	ldi	r16, 0x02	; 2
    527c:	06 93       	lac	Z, r16
    527e:	46 c0       	rjmp	.+140    	; 0x530c <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    5280:	83 30       	cpi	r24, 0x03	; 3
    5282:	09 f0       	breq	.+2      	; 0x5286 <__vector_125+0xc6>
    5284:	43 c0       	rjmp	.+134    	; 0x530c <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    5286:	e5 ea       	ldi	r30, 0xA5	; 165
    5288:	f4 e2       	ldi	r31, 0x24	; 36
    528a:	04 e0       	ldi	r16, 0x04	; 4
    528c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    528e:	ed e9       	ldi	r30, 0x9D	; 157
    5290:	f4 e2       	ldi	r31, 0x24	; 36
    5292:	04 e0       	ldi	r16, 0x04	; 4
    5294:	05 93       	las	Z, r16
    5296:	3a c0       	rjmp	.+116    	; 0x530c <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    5298:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    529a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    529e:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    52a0:	07 df       	rcall	.-498    	; 0x50b0 <udd_ep_abort>
    52a2:	81 e8       	ldi	r24, 0x81	; 129
    52a4:	05 df       	rcall	.-502    	; 0x50b0 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    52a6:	82 e0       	ldi	r24, 0x02	; 2
    52a8:	03 df       	rcall	.-506    	; 0x50b0 <udd_ep_abort>
    52aa:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    52ac:	01 df       	rcall	.-510    	; 0x50b0 <udd_ep_abort>
    52ae:	0e 94 a1 37 	call	0x6f42	; 0x6f42 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    52b2:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    52b6:	e0 e9       	ldi	r30, 0x90	; 144
    52b8:	f4 e2       	ldi	r31, 0x24	; 36
	udd_endpoint_clear_status(ep_ctrl);
    52ba:	15 86       	std	Z+13, r1	; 0x0d
    52bc:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    52be:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    52c0:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    52c2:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    52c4:	15 8a       	std	Z+21, r1	; 0x15
    52c6:	94 8b       	std	Z+20, r25	; 0x14
    52c8:	85 8b       	std	Z+21, r24	; 0x15
    52ca:	8a e4       	ldi	r24, 0x4A	; 74
		// Reset endpoint control management
		udd_ctrl_init();
    52cc:	94 e2       	ldi	r25, 0x24	; 36
    52ce:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    52d0:	91 8b       	std	Z+17, r25	; 0x11
    52d2:	91 d9       	rcall	.-3294   	; 0x45f6 <udd_ctrl_init>
		udd_ack_suspend_event();
    52d4:	1b c0       	rjmp	.+54     	; 0x530c <__vector_125+0x14c>
    52d6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    52da:	86 ff       	sbrs	r24, 6
    52dc:	07 c0       	rjmp	.+14     	; 0x52ec <__vector_125+0x12c>
    52de:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    52e0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    52e4:	80 e0       	ldi	r24, 0x00	; 0
    52e6:	4f d9       	rcall	.-3426   	; 0x4586 <udd_sleep_mode>
		udd_ack_resume_event();
    52e8:	55 d5       	rcall	.+2730   	; 0x5d94 <usb_callback_suspend_action>
    52ea:	10 c0       	rjmp	.+32     	; 0x530c <__vector_125+0x14c>
    52ec:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    52f0:	85 ff       	sbrs	r24, 5
    52f2:	0c c0       	rjmp	.+24     	; 0x530c <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    52f4:	80 e2       	ldi	r24, 0x20	; 32
    52f6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    52fa:	81 e0       	ldi	r24, 0x01	; 1
    52fc:	44 d9       	rcall	.-3448   	; 0x4586 <udd_sleep_mode>
    52fe:	4b d5       	rcall	.+2710   	; 0x5d96 <usb_callback_resume_action>
    5300:	05 c0       	rjmp	.+10     	; 0x530c <__vector_125+0x14c>
    5302:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    5306:	84 fd       	sbrc	r24, 4
    5308:	c7 cf       	rjmp	.-114    	; 0x5298 <__vector_125+0xd8>
    530a:	e5 cf       	rjmp	.-54     	; 0x52d6 <__vector_125+0x116>
    530c:	ff 91       	pop	r31
    530e:	ef 91       	pop	r30
    5310:	bf 91       	pop	r27
    5312:	af 91       	pop	r26
    5314:	9f 91       	pop	r25
    5316:	8f 91       	pop	r24
    5318:	7f 91       	pop	r23
    531a:	6f 91       	pop	r22
    531c:	5f 91       	pop	r21
    531e:	4f 91       	pop	r20
    5320:	3f 91       	pop	r19
    5322:	2f 91       	pop	r18
    5324:	0f 91       	pop	r16
    5326:	0f 90       	pop	r0
    5328:	0b be       	out	0x3b, r0	; 59
    532a:	0f 90       	pop	r0
    532c:	0f be       	out	0x3f, r0	; 63
    532e:	0f 90       	pop	r0
    5330:	1f 90       	pop	r1
    5332:	18 95       	reti

00005334 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    5334:	1f 92       	push	r1
    5336:	0f 92       	push	r0
    5338:	0f b6       	in	r0, 0x3f	; 63
    533a:	0f 92       	push	r0
    533c:	11 24       	eor	r1, r1
    533e:	0b b6       	in	r0, 0x3b	; 59
    5340:	0f 92       	push	r0
    5342:	0f 93       	push	r16
    5344:	1f 93       	push	r17
    5346:	2f 93       	push	r18
    5348:	3f 93       	push	r19
    534a:	4f 93       	push	r20
    534c:	5f 93       	push	r21
    534e:	6f 93       	push	r22
    5350:	7f 93       	push	r23
    5352:	8f 93       	push	r24
    5354:	9f 93       	push	r25
    5356:	af 93       	push	r26
    5358:	bf 93       	push	r27
    535a:	cf 93       	push	r28
    535c:	df 93       	push	r29
    535e:	ef 93       	push	r30
    5360:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    5362:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5366:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    5368:	03 c0       	rjmp	.+6      	; 0x5370 <__vector_126+0x3c>
    536a:	3e da       	rcall	.-2948   	; 0x47e8 <udd_ctrl_interrupt_tc_setup>
    536c:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    536e:	c4 c0       	rjmp	.+392    	; 0x54f8 <__vector_126+0x1c4>
    5370:	82 e0       	ldi	r24, 0x02	; 2
    5372:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    5376:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    537a:	81 95       	neg	r24
    537c:	88 0f       	add	r24, r24
    537e:	ec e9       	ldi	r30, 0x9C	; 156
    5380:	f4 e2       	ldi	r31, 0x24	; 36
    5382:	e8 1b       	sub	r30, r24
    5384:	f1 09       	sbc	r31, r1
    5386:	20 81       	ld	r18, Z
    5388:	31 81       	ldd	r19, Z+1	; 0x01
    538a:	2c 59       	subi	r18, 0x9C	; 156
    538c:	34 42       	sbci	r19, 0x24	; 36
    538e:	36 95       	lsr	r19
    5390:	27 95       	ror	r18
    5392:	36 95       	lsr	r19
    5394:	27 95       	ror	r18
    5396:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    5398:	27 95       	ror	r18
    539a:	82 2f       	mov	r24, r18
    539c:	86 95       	lsr	r24
    539e:	20 fd       	sbrc	r18, 0
    53a0:	02 c0       	rjmp	.+4      	; 0x53a6 <__vector_126+0x72>
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	01 c0       	rjmp	.+2      	; 0x53a8 <__vector_126+0x74>
    53a6:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    53a8:	89 0f       	add	r24, r25
    53aa:	e8 2f       	mov	r30, r24
    53ac:	ef 70       	andi	r30, 0x0F	; 15
    53ae:	f0 e0       	ldi	r31, 0x00	; 0
    53b0:	ee 0f       	add	r30, r30
    53b2:	ff 1f       	adc	r31, r31
    53b4:	28 2f       	mov	r18, r24
    53b6:	08 2e       	mov	r0, r24
    53b8:	00 0c       	add	r0, r0
    53ba:	33 0b       	sbc	r19, r19
    53bc:	22 27       	eor	r18, r18
    53be:	33 0f       	add	r19, r19
    53c0:	22 1f       	adc	r18, r18
    53c2:	33 27       	eor	r19, r19
    53c4:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    53c6:	f3 1f       	adc	r31, r19
    53c8:	df 01       	movw	r26, r30
    53ca:	aa 0f       	add	r26, r26
    53cc:	bb 1f       	adc	r27, r27
    53ce:	aa 0f       	add	r26, r26
    53d0:	bb 1f       	adc	r27, r27
    53d2:	aa 0f       	add	r26, r26
    53d4:	bb 1f       	adc	r27, r27
    53d6:	a0 57       	subi	r26, 0x70	; 112
    53d8:	bb 4d       	sbci	r27, 0xDB	; 219
    53da:	1c 96       	adiw	r26, 0x0c	; 12
    53dc:	9c 91       	ld	r25, X
    53de:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    53e0:	8b c0       	rjmp	.+278    	; 0x54f8 <__vector_126+0x1c4>
    53e2:	ee 0f       	add	r30, r30
    53e4:	ff 1f       	adc	r31, r31
    53e6:	ee 0f       	add	r30, r30
    53e8:	ff 1f       	adc	r31, r31
    53ea:	ee 0f       	add	r30, r30
    53ec:	ff 1f       	adc	r31, r31
    53ee:	e4 56       	subi	r30, 0x64	; 100
    53f0:	fb 4d       	sbci	r31, 0xDB	; 219
    53f2:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    53f4:	06 93       	lac	Z, r16
    53f6:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    53f8:	7a c0       	rjmp	.+244    	; 0x54ee <__vector_126+0x1ba>
    53fa:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    53fe:	84 30       	cpi	r24, 0x04	; 4
    5400:	19 f4       	brne	.+6      	; 0x5408 <__vector_126+0xd4>
    5402:	3a d9       	rcall	.-3468   	; 0x4678 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    5404:	f8 d8       	rcall	.-3600   	; 0x45f6 <udd_ctrl_init>
    5406:	78 c0       	rjmp	.+240    	; 0x54f8 <__vector_126+0x1c4>
    5408:	00 91 9e 24 	lds	r16, 0x249E	; 0x80249e <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    540c:	10 91 9f 24 	lds	r17, 0x249F	; 0x80249f <udd_sram+0xf>
    5410:	80 91 bd 27 	lds	r24, 0x27BD	; 0x8027bd <udd_g_ctrlreq+0xa>
    5414:	90 91 be 27 	lds	r25, 0x27BE	; 0x8027be <udd_g_ctrlreq+0xb>
    5418:	c0 91 8a 24 	lds	r28, 0x248A	; 0x80248a <udd_ctrl_payload_nb_trans>
    541c:	d0 91 8b 24 	lds	r29, 0x248B	; 0x80248b <udd_ctrl_payload_nb_trans+0x1>
    5420:	98 01       	movw	r18, r16
    5422:	2c 0f       	add	r18, r28
    5424:	3d 1f       	adc	r19, r29
    5426:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    5428:	93 07       	cpc	r25, r19
    542a:	18 f4       	brcc	.+6      	; 0x5432 <__vector_126+0xfe>
    542c:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    542e:	0c 1b       	sub	r16, r28
    5430:	1d 0b       	sbc	r17, r29
    5432:	80 91 bb 27 	lds	r24, 0x27BB	; 0x8027bb <udd_g_ctrlreq+0x8>
    5436:	90 91 bc 27 	lds	r25, 0x27BC	; 0x8027bc <udd_g_ctrlreq+0x9>
    543a:	a8 01       	movw	r20, r16
    543c:	6a e4       	ldi	r22, 0x4A	; 74
    543e:	74 e2       	ldi	r23, 0x24	; 36
    5440:	8c 0f       	add	r24, r28
    5442:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    5444:	0e 94 62 3d 	call	0x7ac4	; 0x7ac4 <memcpy>
    5448:	c0 0f       	add	r28, r16
    544a:	d1 1f       	adc	r29, r17
    544c:	c0 93 8a 24 	sts	0x248A, r28	; 0x80248a <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    5450:	d0 93 8b 24 	sts	0x248B, r29	; 0x80248b <udd_ctrl_payload_nb_trans+0x1>
    5454:	00 34       	cpi	r16, 0x40	; 64
    5456:	11 05       	cpc	r17, r1
    5458:	69 f4       	brne	.+26     	; 0x5474 <__vector_126+0x140>
    545a:	80 91 8c 24 	lds	r24, 0x248C	; 0x80248c <udd_ctrl_prev_payload_nb_trans>
    545e:	90 91 8d 24 	lds	r25, 0x248D	; 0x80248d <udd_ctrl_prev_payload_nb_trans+0x1>
    5462:	8c 0f       	add	r24, r28
    5464:	9d 1f       	adc	r25, r29
    5466:	20 91 b9 27 	lds	r18, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    546a:	30 91 ba 27 	lds	r19, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    546e:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    5470:	93 07       	cpc	r25, r19
    5472:	80 f0       	brcs	.+32     	; 0x5494 <__vector_126+0x160>
    5474:	e3 eb       	ldi	r30, 0xB3	; 179
    5476:	f7 e2       	ldi	r31, 0x27	; 39
		if (NULL != udd_g_ctrlreq.over_under_run) {
    5478:	c2 87       	std	Z+10, r28	; 0x0a
    547a:	d3 87       	std	Z+11, r29	; 0x0b
    547c:	06 84       	ldd	r0, Z+14	; 0x0e
    547e:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    5480:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    5482:	30 97       	sbiw	r30, 0x00	; 0
    5484:	29 f0       	breq	.+10     	; 0x5490 <__vector_126+0x15c>
    5486:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    5488:	81 11       	cpse	r24, r1
    548a:	02 c0       	rjmp	.+4      	; 0x5490 <__vector_126+0x15c>
    548c:	d9 d8       	rcall	.-3662   	; 0x4640 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    548e:	34 c0       	rjmp	.+104    	; 0x54f8 <__vector_126+0x1c4>
    5490:	e5 d8       	rcall	.-3638   	; 0x465c <udd_ctrl_send_zlp_in>
    5492:	32 c0       	rjmp	.+100    	; 0x54f8 <__vector_126+0x1c4>
    5494:	80 91 bd 27 	lds	r24, 0x27BD	; 0x8027bd <udd_g_ctrlreq+0xa>
    5498:	90 91 be 27 	lds	r25, 0x27BE	; 0x8027be <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    549c:	c8 17       	cp	r28, r24
    549e:	d9 07       	cpc	r29, r25
    54a0:	f9 f4       	brne	.+62     	; 0x54e0 <__vector_126+0x1ac>
    54a2:	e0 91 c1 27 	lds	r30, 0x27C1	; 0x8027c1 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    54a6:	f0 91 c2 27 	lds	r31, 0x27C2	; 0x8027c2 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    54aa:	30 97       	sbiw	r30, 0x00	; 0
    54ac:	11 f4       	brne	.+4      	; 0x54b2 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    54ae:	c8 d8       	rcall	.-3696   	; 0x4640 <udd_ctrl_stall_data>
    54b0:	23 c0       	rjmp	.+70     	; 0x54f8 <__vector_126+0x1c4>
    54b2:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    54b4:	81 11       	cpse	r24, r1
    54b6:	02 c0       	rjmp	.+4      	; 0x54bc <__vector_126+0x188>
    54b8:	c3 d8       	rcall	.-3706   	; 0x4640 <udd_ctrl_stall_data>
    54ba:	1e c0       	rjmp	.+60     	; 0x54f8 <__vector_126+0x1c4>
    54bc:	20 91 8c 24 	lds	r18, 0x248C	; 0x80248c <udd_ctrl_prev_payload_nb_trans>
    54c0:	30 91 8d 24 	lds	r19, 0x248D	; 0x80248d <udd_ctrl_prev_payload_nb_trans+0x1>
    54c4:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udd_ctrl_payload_nb_trans>
    54c8:	90 91 8b 24 	lds	r25, 0x248B	; 0x80248b <udd_ctrl_payload_nb_trans+0x1>
    54cc:	82 0f       	add	r24, r18
    54ce:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    54d0:	80 93 8c 24 	sts	0x248C, r24	; 0x80248c <udd_ctrl_prev_payload_nb_trans>
    54d4:	90 93 8d 24 	sts	0x248D, r25	; 0x80248d <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    54d8:	10 92 8a 24 	sts	0x248A, r1	; 0x80248a <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    54dc:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    54e0:	ec e9       	ldi	r30, 0x9C	; 156
    54e2:	f4 e2       	ldi	r31, 0x24	; 36
		udd_ctrl_in_sent();
    54e4:	02 e0       	ldi	r16, 0x02	; 2
    54e6:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    54e8:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    54ea:	06 93       	lac	Z, r16
    54ec:	05 c0       	rjmp	.+10     	; 0x54f8 <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    54ee:	80 38       	cpi	r24, 0x80	; 128
    54f0:	11 f4       	brne	.+4      	; 0x54f6 <__vector_126+0x1c2>
    54f2:	ca d8       	rcall	.-3692   	; 0x4688 <udd_ctrl_in_sent>
    54f4:	01 c0       	rjmp	.+2      	; 0x54f8 <__vector_126+0x1c4>
    54f6:	ea d9       	rcall	.-3116   	; 0x48cc <udd_ep_trans_complet>
    54f8:	ff 91       	pop	r31
    54fa:	ef 91       	pop	r30
    54fc:	df 91       	pop	r29
    54fe:	cf 91       	pop	r28
    5500:	bf 91       	pop	r27
    5502:	af 91       	pop	r26
    5504:	9f 91       	pop	r25
    5506:	8f 91       	pop	r24
    5508:	7f 91       	pop	r23
    550a:	6f 91       	pop	r22
    550c:	5f 91       	pop	r21
    550e:	4f 91       	pop	r20
    5510:	3f 91       	pop	r19
    5512:	2f 91       	pop	r18
    5514:	1f 91       	pop	r17
    5516:	0f 91       	pop	r16
    5518:	0f 90       	pop	r0
    551a:	0b be       	out	0x3b, r0	; 59
    551c:	0f 90       	pop	r0
    551e:	0f be       	out	0x3f, r0	; 63
    5520:	0f 90       	pop	r0
    5522:	1f 90       	pop	r1
    5524:	18 95       	reti

00005526 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    5526:	cf 92       	push	r12
    5528:	df 92       	push	r13
    552a:	ef 92       	push	r14
    552c:	ff 92       	push	r15
    552e:	cf 93       	push	r28
    5530:	df 93       	push	r29
    5532:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    5534:	6b 01       	movw	r12, r22
    5536:	e1 2c       	mov	r14, r1
    5538:	f1 2c       	mov	r15, r1
    553a:	60 e8       	ldi	r22, 0x80	; 128
    553c:	73 ec       	ldi	r23, 0xC3	; 195
    553e:	89 ec       	ldi	r24, 0xC9	; 201
    5540:	91 e0       	ldi	r25, 0x01	; 1
    5542:	a7 01       	movw	r20, r14
    5544:	96 01       	movw	r18, r12
    5546:	0e 94 3f 3b 	call	0x767e	; 0x767e <__udivmodsi4>
    554a:	ca 01       	movw	r24, r20
    554c:	b9 01       	movw	r22, r18
    554e:	2f ef       	ldi	r18, 0xFF	; 255
    5550:	3f ef       	ldi	r19, 0xFF	; 255
    5552:	40 e0       	ldi	r20, 0x00	; 0
    5554:	50 e0       	ldi	r21, 0x00	; 0
    5556:	0e 94 3f 3b 	call	0x767e	; 0x767e <__udivmodsi4>
	if (smallest_div < 1) {
    555a:	21 15       	cp	r18, r1
    555c:	31 05       	cpc	r19, r1
    555e:	29 f4       	brne	.+10     	; 0x556a <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    5564:	21 e0       	ldi	r18, 0x01	; 1
    5566:	30 e0       	ldi	r19, 0x00	; 0
    5568:	2d c0       	rjmp	.+90     	; 0x55c4 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    556a:	22 30       	cpi	r18, 0x02	; 2
    556c:	31 05       	cpc	r19, r1
    556e:	28 f4       	brcc	.+10     	; 0x557a <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    5570:	82 e0       	ldi	r24, 0x02	; 2
    5572:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    5574:	22 e0       	ldi	r18, 0x02	; 2
    5576:	30 e0       	ldi	r19, 0x00	; 0
    5578:	25 c0       	rjmp	.+74     	; 0x55c4 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    557a:	24 30       	cpi	r18, 0x04	; 4
    557c:	31 05       	cpc	r19, r1
    557e:	28 f4       	brcc	.+10     	; 0x558a <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    5580:	83 e0       	ldi	r24, 0x03	; 3
    5582:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    5584:	24 e0       	ldi	r18, 0x04	; 4
    5586:	30 e0       	ldi	r19, 0x00	; 0
    5588:	1d c0       	rjmp	.+58     	; 0x55c4 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    558a:	28 30       	cpi	r18, 0x08	; 8
    558c:	31 05       	cpc	r19, r1
    558e:	28 f4       	brcc	.+10     	; 0x559a <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    5590:	84 e0       	ldi	r24, 0x04	; 4
    5592:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    5594:	28 e0       	ldi	r18, 0x08	; 8
    5596:	30 e0       	ldi	r19, 0x00	; 0
    5598:	15 c0       	rjmp	.+42     	; 0x55c4 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    559a:	20 34       	cpi	r18, 0x40	; 64
    559c:	31 05       	cpc	r19, r1
    559e:	28 f4       	brcc	.+10     	; 0x55aa <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    55a0:	85 e0       	ldi	r24, 0x05	; 5
    55a2:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    55a4:	20 e4       	ldi	r18, 0x40	; 64
    55a6:	30 e0       	ldi	r19, 0x00	; 0
    55a8:	0d c0       	rjmp	.+26     	; 0x55c4 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    55aa:	2f 3f       	cpi	r18, 0xFF	; 255
    55ac:	31 05       	cpc	r19, r1
    55ae:	09 f0       	breq	.+2      	; 0x55b2 <pwm_set_frequency+0x8c>
    55b0:	28 f4       	brcc	.+10     	; 0x55bc <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    55b2:	86 e0       	ldi	r24, 0x06	; 6
    55b4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	31 e0       	ldi	r19, 0x01	; 1
    55ba:	04 c0       	rjmp	.+8      	; 0x55c4 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    55bc:	87 e0       	ldi	r24, 0x07	; 7
    55be:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    55c0:	20 e0       	ldi	r18, 0x00	; 0
    55c2:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    55c4:	40 e0       	ldi	r20, 0x00	; 0
    55c6:	50 e0       	ldi	r21, 0x00	; 0
    55c8:	60 e8       	ldi	r22, 0x80	; 128
    55ca:	73 ec       	ldi	r23, 0xC3	; 195
    55cc:	89 ec       	ldi	r24, 0xC9	; 201
    55ce:	91 e0       	ldi	r25, 0x01	; 1
    55d0:	0e 94 3f 3b 	call	0x767e	; 0x767e <__udivmodsi4>
    55d4:	ca 01       	movw	r24, r20
    55d6:	b9 01       	movw	r22, r18
    55d8:	a7 01       	movw	r20, r14
    55da:	96 01       	movw	r18, r12
    55dc:	0e 94 3f 3b 	call	0x767e	; 0x767e <__udivmodsi4>
    55e0:	2d 83       	std	Y+5, r18	; 0x05
    55e2:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    55e4:	24 36       	cpi	r18, 0x64	; 100
    55e6:	31 05       	cpc	r19, r1
    55e8:	18 f4       	brcc	.+6      	; 0x55f0 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    55ea:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    55ec:	1d 82       	std	Y+5, r1	; 0x05
    55ee:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    55f0:	df 91       	pop	r29
    55f2:	cf 91       	pop	r28
    55f4:	ff 90       	pop	r15
    55f6:	ef 90       	pop	r14
    55f8:	df 90       	pop	r13
    55fa:	cf 90       	pop	r12
    55fc:	08 95       	ret

000055fe <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    55fe:	0f 93       	push	r16
    5600:	1f 93       	push	r17
    5602:	cf 93       	push	r28
    5604:	df 93       	push	r29
    5606:	ec 01       	movw	r28, r24
    5608:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    560a:	86 2f       	mov	r24, r22
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	87 30       	cpi	r24, 0x07	; 7
    5610:	91 05       	cpc	r25, r1
    5612:	08 f0       	brcs	.+2      	; 0x5616 <pwm_init+0x18>
    5614:	8b c0       	rjmp	.+278    	; 0x572c <pwm_init+0x12e>
    5616:	fc 01       	movw	r30, r24
    5618:	88 27       	eor	r24, r24
    561a:	eb 5f       	subi	r30, 0xFB	; 251
    561c:	fe 4f       	sbci	r31, 0xFE	; 254
    561e:	8f 4f       	sbci	r24, 0xFF	; 255
    5620:	0c 94 61 3b 	jmp	0x76c2	; 0x76c2 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    5624:	80 e0       	ldi	r24, 0x00	; 0
    5626:	98 e0       	ldi	r25, 0x08	; 8
    5628:	88 83       	st	Y, r24
    562a:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    562c:	e0 e4       	ldi	r30, 0x40	; 64
    562e:	f6 e0       	ldi	r31, 0x06	; 6
    5630:	30 81       	ld	r19, Z
    5632:	81 e0       	ldi	r24, 0x01	; 1
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	2f ef       	ldi	r18, 0xFF	; 255
    5638:	24 0f       	add	r18, r20
    563a:	02 c0       	rjmp	.+4      	; 0x5640 <pwm_init+0x42>
    563c:	88 0f       	add	r24, r24
    563e:	99 1f       	adc	r25, r25
    5640:	2a 95       	dec	r18
    5642:	e2 f7       	brpl	.-8      	; 0x563c <pwm_init+0x3e>
    5644:	83 2b       	or	r24, r19
    5646:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    5648:	71 c0       	rjmp	.+226    	; 0x572c <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    564a:	80 e4       	ldi	r24, 0x40	; 64
    564c:	98 e0       	ldi	r25, 0x08	; 8
    564e:	88 83       	st	Y, r24
    5650:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    5652:	e0 e4       	ldi	r30, 0x40	; 64
    5654:	f6 e0       	ldi	r31, 0x06	; 6
    5656:	30 81       	ld	r19, Z
    5658:	81 e0       	ldi	r24, 0x01	; 1
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	23 e0       	ldi	r18, 0x03	; 3
    565e:	24 0f       	add	r18, r20
    5660:	02 c0       	rjmp	.+4      	; 0x5666 <pwm_init+0x68>
    5662:	88 0f       	add	r24, r24
    5664:	99 1f       	adc	r25, r25
    5666:	2a 95       	dec	r18
    5668:	e2 f7       	brpl	.-8      	; 0x5662 <pwm_init+0x64>
    566a:	83 2b       	or	r24, r19
    566c:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    566e:	5e c0       	rjmp	.+188    	; 0x572c <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    5670:	80 e0       	ldi	r24, 0x00	; 0
    5672:	99 e0       	ldi	r25, 0x09	; 9
    5674:	88 83       	st	Y, r24
    5676:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    5678:	e0 e6       	ldi	r30, 0x60	; 96
    567a:	f6 e0       	ldi	r31, 0x06	; 6
    567c:	30 81       	ld	r19, Z
    567e:	81 e0       	ldi	r24, 0x01	; 1
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	2f ef       	ldi	r18, 0xFF	; 255
    5684:	24 0f       	add	r18, r20
    5686:	02 c0       	rjmp	.+4      	; 0x568c <pwm_init+0x8e>
    5688:	88 0f       	add	r24, r24
    568a:	99 1f       	adc	r25, r25
    568c:	2a 95       	dec	r18
    568e:	e2 f7       	brpl	.-8      	; 0x5688 <pwm_init+0x8a>
    5690:	83 2b       	or	r24, r19
    5692:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    5694:	4b c0       	rjmp	.+150    	; 0x572c <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    5696:	80 e4       	ldi	r24, 0x40	; 64
    5698:	99 e0       	ldi	r25, 0x09	; 9
    569a:	88 83       	st	Y, r24
    569c:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    569e:	e0 e6       	ldi	r30, 0x60	; 96
    56a0:	f6 e0       	ldi	r31, 0x06	; 6
    56a2:	30 81       	ld	r19, Z
    56a4:	81 e0       	ldi	r24, 0x01	; 1
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	23 e0       	ldi	r18, 0x03	; 3
    56aa:	24 0f       	add	r18, r20
    56ac:	02 c0       	rjmp	.+4      	; 0x56b2 <pwm_init+0xb4>
    56ae:	88 0f       	add	r24, r24
    56b0:	99 1f       	adc	r25, r25
    56b2:	2a 95       	dec	r18
    56b4:	e2 f7       	brpl	.-8      	; 0x56ae <pwm_init+0xb0>
    56b6:	83 2b       	or	r24, r19
    56b8:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    56ba:	38 c0       	rjmp	.+112    	; 0x572c <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    56bc:	80 e0       	ldi	r24, 0x00	; 0
    56be:	9a e0       	ldi	r25, 0x0A	; 10
    56c0:	88 83       	st	Y, r24
    56c2:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    56c4:	e0 e8       	ldi	r30, 0x80	; 128
    56c6:	f6 e0       	ldi	r31, 0x06	; 6
    56c8:	30 81       	ld	r19, Z
    56ca:	81 e0       	ldi	r24, 0x01	; 1
    56cc:	90 e0       	ldi	r25, 0x00	; 0
    56ce:	2f ef       	ldi	r18, 0xFF	; 255
    56d0:	24 0f       	add	r18, r20
    56d2:	02 c0       	rjmp	.+4      	; 0x56d8 <pwm_init+0xda>
    56d4:	88 0f       	add	r24, r24
    56d6:	99 1f       	adc	r25, r25
    56d8:	2a 95       	dec	r18
    56da:	e2 f7       	brpl	.-8      	; 0x56d4 <pwm_init+0xd6>
    56dc:	83 2b       	or	r24, r19
    56de:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    56e0:	25 c0       	rjmp	.+74     	; 0x572c <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    56e2:	80 e4       	ldi	r24, 0x40	; 64
    56e4:	9a e0       	ldi	r25, 0x0A	; 10
    56e6:	88 83       	st	Y, r24
    56e8:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    56ea:	e0 e8       	ldi	r30, 0x80	; 128
    56ec:	f6 e0       	ldi	r31, 0x06	; 6
    56ee:	30 81       	ld	r19, Z
    56f0:	81 e0       	ldi	r24, 0x01	; 1
    56f2:	90 e0       	ldi	r25, 0x00	; 0
    56f4:	23 e0       	ldi	r18, 0x03	; 3
    56f6:	24 0f       	add	r18, r20
    56f8:	02 c0       	rjmp	.+4      	; 0x56fe <pwm_init+0x100>
    56fa:	88 0f       	add	r24, r24
    56fc:	99 1f       	adc	r25, r25
    56fe:	2a 95       	dec	r18
    5700:	e2 f7       	brpl	.-8      	; 0x56fa <pwm_init+0xfc>
    5702:	83 2b       	or	r24, r19
    5704:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    5706:	12 c0       	rjmp	.+36     	; 0x572c <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    5708:	80 e0       	ldi	r24, 0x00	; 0
    570a:	9b e0       	ldi	r25, 0x0B	; 11
    570c:	88 83       	st	Y, r24
    570e:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    5710:	e0 ea       	ldi	r30, 0xA0	; 160
    5712:	f6 e0       	ldi	r31, 0x06	; 6
    5714:	30 81       	ld	r19, Z
    5716:	81 e0       	ldi	r24, 0x01	; 1
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	2f ef       	ldi	r18, 0xFF	; 255
    571c:	24 0f       	add	r18, r20
    571e:	02 c0       	rjmp	.+4      	; 0x5724 <pwm_init+0x126>
    5720:	88 0f       	add	r24, r24
    5722:	99 1f       	adc	r25, r25
    5724:	2a 95       	dec	r18
    5726:	e2 f7       	brpl	.-8      	; 0x5720 <pwm_init+0x122>
    5728:	83 2b       	or	r24, r19
    572a:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    572c:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    572e:	42 30       	cpi	r20, 0x02	; 2
    5730:	61 f0       	breq	.+24     	; 0x574a <pwm_init+0x14c>
    5732:	18 f4       	brcc	.+6      	; 0x573a <pwm_init+0x13c>
    5734:	41 30       	cpi	r20, 0x01	; 1
    5736:	31 f0       	breq	.+12     	; 0x5744 <pwm_init+0x146>
    5738:	10 c0       	rjmp	.+32     	; 0x575a <pwm_init+0x15c>
    573a:	43 30       	cpi	r20, 0x03	; 3
    573c:	49 f0       	breq	.+18     	; 0x5750 <pwm_init+0x152>
    573e:	44 30       	cpi	r20, 0x04	; 4
    5740:	51 f0       	breq	.+20     	; 0x5756 <pwm_init+0x158>
    5742:	0b c0       	rjmp	.+22     	; 0x575a <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    5744:	80 e1       	ldi	r24, 0x10	; 16
    5746:	8b 83       	std	Y+3, r24	; 0x03
		break;
    5748:	08 c0       	rjmp	.+16     	; 0x575a <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    574a:	80 e2       	ldi	r24, 0x20	; 32
    574c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    574e:	05 c0       	rjmp	.+10     	; 0x575a <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    5750:	80 e4       	ldi	r24, 0x40	; 64
    5752:	8b 83       	std	Y+3, r24	; 0x03
		break;
    5754:	02 c0       	rjmp	.+4      	; 0x575a <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    5756:	80 e8       	ldi	r24, 0x80	; 128
    5758:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    575a:	88 81       	ld	r24, Y
    575c:	99 81       	ldd	r25, Y+1	; 0x01
    575e:	0e 94 e6 20 	call	0x41cc	; 0x41cc <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    5762:	e8 81       	ld	r30, Y
    5764:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    5766:	81 81       	ldd	r24, Z+1	; 0x01
    5768:	88 7f       	andi	r24, 0xF8	; 248
    576a:	83 60       	ori	r24, 0x03	; 3
    576c:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    576e:	1d 82       	std	Y+5, r1	; 0x05
    5770:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    5772:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    5774:	e8 81       	ld	r30, Y
    5776:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    5778:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    577a:	80 7f       	andi	r24, 0xF0	; 240
    577c:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    577e:	b8 01       	movw	r22, r16
    5780:	ce 01       	movw	r24, r28
    5782:	d1 de       	rcall	.-606    	; 0x5526 <pwm_set_frequency>
}
    5784:	df 91       	pop	r29
    5786:	cf 91       	pop	r28
    5788:	1f 91       	pop	r17
    578a:	0f 91       	pop	r16
    578c:	08 95       	ret

0000578e <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    578e:	cf 93       	push	r28
    5790:	df 93       	push	r29
    5792:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    5794:	2d 81       	ldd	r18, Y+5	; 0x05
    5796:	3e 81       	ldd	r19, Y+6	; 0x06
    5798:	a6 2f       	mov	r26, r22
    579a:	b0 e0       	ldi	r27, 0x00	; 0
    579c:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <__umulhisi3>
    57a0:	24 e6       	ldi	r18, 0x64	; 100
    57a2:	30 e0       	ldi	r19, 0x00	; 0
    57a4:	40 e0       	ldi	r20, 0x00	; 0
    57a6:	50 e0       	ldi	r21, 0x00	; 0
    57a8:	0e 94 3f 3b 	call	0x767e	; 0x767e <__udivmodsi4>
    57ac:	8a 81       	ldd	r24, Y+2	; 0x02
    57ae:	e8 81       	ld	r30, Y
    57b0:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    57b2:	e6 fd       	sbrc	r30, 6
    57b4:	17 c0       	rjmp	.+46     	; 0x57e4 <pwm_start+0x56>
		switch (channel_index) {
    57b6:	82 30       	cpi	r24, 0x02	; 2
    57b8:	61 f0       	breq	.+24     	; 0x57d2 <pwm_start+0x44>
    57ba:	18 f4       	brcc	.+6      	; 0x57c2 <pwm_start+0x34>
    57bc:	81 30       	cpi	r24, 0x01	; 1
    57be:	31 f0       	breq	.+12     	; 0x57cc <pwm_start+0x3e>
    57c0:	1b c0       	rjmp	.+54     	; 0x57f8 <pwm_start+0x6a>
    57c2:	83 30       	cpi	r24, 0x03	; 3
    57c4:	49 f0       	breq	.+18     	; 0x57d8 <pwm_start+0x4a>
    57c6:	84 30       	cpi	r24, 0x04	; 4
    57c8:	51 f0       	breq	.+20     	; 0x57de <pwm_start+0x50>
    57ca:	16 c0       	rjmp	.+44     	; 0x57f8 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    57cc:	20 af       	std	Z+56, r18	; 0x38
    57ce:	31 af       	std	Z+57, r19	; 0x39
    57d0:	13 c0       	rjmp	.+38     	; 0x57f8 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    57d2:	22 af       	std	Z+58, r18	; 0x3a
    57d4:	33 af       	std	Z+59, r19	; 0x3b
    57d6:	10 c0       	rjmp	.+32     	; 0x57f8 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    57d8:	24 af       	std	Z+60, r18	; 0x3c
    57da:	35 af       	std	Z+61, r19	; 0x3d
    57dc:	0d c0       	rjmp	.+26     	; 0x57f8 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    57de:	26 af       	std	Z+62, r18	; 0x3e
    57e0:	37 af       	std	Z+63, r19	; 0x3f
    57e2:	0a c0       	rjmp	.+20     	; 0x57f8 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    57e4:	81 30       	cpi	r24, 0x01	; 1
    57e6:	19 f0       	breq	.+6      	; 0x57ee <pwm_start+0x60>
    57e8:	82 30       	cpi	r24, 0x02	; 2
    57ea:	21 f0       	breq	.+8      	; 0x57f4 <pwm_start+0x66>
    57ec:	05 c0       	rjmp	.+10     	; 0x57f8 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    57ee:	20 af       	std	Z+56, r18	; 0x38
    57f0:	31 af       	std	Z+57, r19	; 0x39
    57f2:	02 c0       	rjmp	.+4      	; 0x57f8 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    57f4:	22 af       	std	Z+58, r18	; 0x3a
    57f6:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    57f8:	8d 81       	ldd	r24, Y+5	; 0x05
    57fa:	9e 81       	ldd	r25, Y+6	; 0x06
    57fc:	e8 81       	ld	r30, Y
    57fe:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    5800:	86 a3       	std	Z+38, r24	; 0x26
    5802:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    5804:	8b 81       	ldd	r24, Y+3	; 0x03
    5806:	e8 81       	ld	r30, Y
    5808:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    580a:	e6 fd       	sbrc	r30, 6
    580c:	04 c0       	rjmp	.+8      	; 0x5816 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    580e:	91 81       	ldd	r25, Z+1	; 0x01
    5810:	89 2b       	or	r24, r25
    5812:	81 83       	std	Z+1, r24	; 0x01
    5814:	04 c0       	rjmp	.+8      	; 0x581e <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    5816:	91 81       	ldd	r25, Z+1	; 0x01
    5818:	80 73       	andi	r24, 0x30	; 48
    581a:	89 2b       	or	r24, r25
    581c:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    581e:	e8 81       	ld	r30, Y
    5820:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    5822:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    5824:	80 7f       	andi	r24, 0xF0	; 240
    5826:	9c 81       	ldd	r25, Y+4	; 0x04
    5828:	89 2b       	or	r24, r25
    582a:	80 83       	st	Z, r24
}
    582c:	df 91       	pop	r29
    582e:	cf 91       	pop	r28
    5830:	08 95       	ret

00005832 <__portable_avr_delay_cycles>:

void halt(void)
{
	/* MAIN Loop Shutdown */

	runmode = 0;
    5832:	04 c0       	rjmp	.+8      	; 0x583c <__portable_avr_delay_cycles+0xa>
    5834:	61 50       	subi	r22, 0x01	; 1
    5836:	71 09       	sbc	r23, r1
    5838:	81 09       	sbc	r24, r1
    583a:	91 09       	sbc	r25, r1
    583c:	61 15       	cp	r22, r1
    583e:	71 05       	cpc	r23, r1
    5840:	81 05       	cpc	r24, r1
    5842:	91 05       	cpc	r25, r1
    5844:	b9 f7       	brne	.-18     	; 0x5834 <__portable_avr_delay_cycles+0x2>
    5846:	08 95       	ret

00005848 <cb_rtc_alarm>:
    5848:	08 95       	ret

0000584a <cb_adc_a>:
    584a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    584e:	4e 5b       	subi	r20, 0xBE	; 190
    5850:	51 09       	sbc	r21, r1
    5852:	60 ff       	sbrs	r22, 0
    5854:	d3 c0       	rjmp	.+422    	; 0x59fc <cb_adc_a+0x1b2>
    5856:	82 95       	swap	r24
    5858:	8f 70       	andi	r24, 0x0F	; 15
    585a:	81 30       	cpi	r24, 0x01	; 1
    585c:	31 f0       	breq	.+12     	; 0x586a <cb_adc_a+0x20>
    585e:	08 f4       	brcc	.+2      	; 0x5862 <cb_adc_a+0x18>
    5860:	8a c0       	rjmp	.+276    	; 0x5976 <cb_adc_a+0x12c>
    5862:	82 30       	cpi	r24, 0x02	; 2
    5864:	09 f4       	brne	.+2      	; 0x5868 <cb_adc_a+0x1e>
    5866:	44 c0       	rjmp	.+136    	; 0x58f0 <cb_adc_a+0xa6>
    5868:	08 95       	ret
    586a:	05 2e       	mov	r0, r21
    586c:	00 0c       	add	r0, r0
    586e:	66 0b       	sbc	r22, r22
    5870:	77 0b       	sbc	r23, r23
    5872:	80 91 47 26 	lds	r24, 0x2647	; 0x802647 <g_adc_vctcxo_sum>
    5876:	90 91 48 26 	lds	r25, 0x2648	; 0x802648 <g_adc_vctcxo_sum+0x1>
    587a:	a0 91 49 26 	lds	r26, 0x2649	; 0x802649 <g_adc_vctcxo_sum+0x2>
    587e:	b0 91 4a 26 	lds	r27, 0x264A	; 0x80264a <g_adc_vctcxo_sum+0x3>
    5882:	48 0f       	add	r20, r24
    5884:	59 1f       	adc	r21, r25
    5886:	6a 1f       	adc	r22, r26
    5888:	7b 1f       	adc	r23, r27
    588a:	40 93 47 26 	sts	0x2647, r20	; 0x802647 <g_adc_vctcxo_sum>
    588e:	50 93 48 26 	sts	0x2648, r21	; 0x802648 <g_adc_vctcxo_sum+0x1>
    5892:	60 93 49 26 	sts	0x2649, r22	; 0x802649 <g_adc_vctcxo_sum+0x2>
    5896:	70 93 4a 26 	sts	0x264A, r23	; 0x80264a <g_adc_vctcxo_sum+0x3>
    589a:	80 91 45 26 	lds	r24, 0x2645	; 0x802645 <g_adc_vctcxo_cnt>
    589e:	90 91 46 26 	lds	r25, 0x2646	; 0x802646 <g_adc_vctcxo_cnt+0x1>
    58a2:	01 96       	adiw	r24, 0x01	; 1
    58a4:	80 93 45 26 	sts	0x2645, r24	; 0x802645 <g_adc_vctcxo_cnt>
    58a8:	90 93 46 26 	sts	0x2646, r25	; 0x802646 <g_adc_vctcxo_cnt+0x1>
    58ac:	8f 3f       	cpi	r24, 0xFF	; 255
    58ae:	91 05       	cpc	r25, r1
    58b0:	09 f0       	breq	.+2      	; 0x58b4 <cb_adc_a+0x6a>
    58b2:	08 f4       	brcc	.+2      	; 0x58b6 <cb_adc_a+0x6c>
    58b4:	70 c1       	rjmp	.+736    	; 0x5b96 <cb_adc_a+0x34c>
    58b6:	68 94       	set
    58b8:	16 f8       	bld	r1, 6
    58ba:	75 95       	asr	r23
    58bc:	67 95       	ror	r22
    58be:	57 95       	ror	r21
    58c0:	47 95       	ror	r20
    58c2:	16 94       	lsr	r1
    58c4:	d1 f7       	brne	.-12     	; 0x58ba <cb_adc_a+0x70>
    58c6:	40 93 4b 26 	sts	0x264B, r20	; 0x80264b <g_adc_vctcxo_cur>
    58ca:	50 93 4c 26 	sts	0x264C, r21	; 0x80264c <g_adc_vctcxo_cur+0x1>
    58ce:	60 93 4d 26 	sts	0x264D, r22	; 0x80264d <g_adc_vctcxo_cur+0x2>
    58d2:	70 93 4e 26 	sts	0x264E, r23	; 0x80264e <g_adc_vctcxo_cur+0x3>
    58d6:	10 92 45 26 	sts	0x2645, r1	; 0x802645 <g_adc_vctcxo_cnt>
    58da:	10 92 46 26 	sts	0x2646, r1	; 0x802646 <g_adc_vctcxo_cnt+0x1>
    58de:	10 92 47 26 	sts	0x2647, r1	; 0x802647 <g_adc_vctcxo_sum>
    58e2:	10 92 48 26 	sts	0x2648, r1	; 0x802648 <g_adc_vctcxo_sum+0x1>
    58e6:	10 92 49 26 	sts	0x2649, r1	; 0x802649 <g_adc_vctcxo_sum+0x2>
    58ea:	10 92 4a 26 	sts	0x264A, r1	; 0x80264a <g_adc_vctcxo_sum+0x3>
    58ee:	08 95       	ret
    58f0:	05 2e       	mov	r0, r21
    58f2:	00 0c       	add	r0, r0
    58f4:	66 0b       	sbc	r22, r22
    58f6:	77 0b       	sbc	r23, r23
    58f8:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <g_adc_5v0_sum>
    58fc:	90 91 3e 26 	lds	r25, 0x263E	; 0x80263e <g_adc_5v0_sum+0x1>
    5900:	a0 91 3f 26 	lds	r26, 0x263F	; 0x80263f <g_adc_5v0_sum+0x2>
    5904:	b0 91 40 26 	lds	r27, 0x2640	; 0x802640 <g_adc_5v0_sum+0x3>
    5908:	48 0f       	add	r20, r24
    590a:	59 1f       	adc	r21, r25
    590c:	6a 1f       	adc	r22, r26
    590e:	7b 1f       	adc	r23, r27
    5910:	40 93 3d 26 	sts	0x263D, r20	; 0x80263d <g_adc_5v0_sum>
    5914:	50 93 3e 26 	sts	0x263E, r21	; 0x80263e <g_adc_5v0_sum+0x1>
    5918:	60 93 3f 26 	sts	0x263F, r22	; 0x80263f <g_adc_5v0_sum+0x2>
    591c:	70 93 40 26 	sts	0x2640, r23	; 0x802640 <g_adc_5v0_sum+0x3>
    5920:	80 91 3b 26 	lds	r24, 0x263B	; 0x80263b <g_adc_5v0_cnt>
    5924:	90 91 3c 26 	lds	r25, 0x263C	; 0x80263c <g_adc_5v0_cnt+0x1>
    5928:	01 96       	adiw	r24, 0x01	; 1
    592a:	80 93 3b 26 	sts	0x263B, r24	; 0x80263b <g_adc_5v0_cnt>
    592e:	90 93 3c 26 	sts	0x263C, r25	; 0x80263c <g_adc_5v0_cnt+0x1>
    5932:	8f 3f       	cpi	r24, 0xFF	; 255
    5934:	91 05       	cpc	r25, r1
    5936:	09 f0       	breq	.+2      	; 0x593a <cb_adc_a+0xf0>
    5938:	08 f4       	brcc	.+2      	; 0x593c <cb_adc_a+0xf2>
    593a:	2d c1       	rjmp	.+602    	; 0x5b96 <cb_adc_a+0x34c>
    593c:	68 94       	set
    593e:	16 f8       	bld	r1, 6
    5940:	75 95       	asr	r23
    5942:	67 95       	ror	r22
    5944:	57 95       	ror	r21
    5946:	47 95       	ror	r20
    5948:	16 94       	lsr	r1
    594a:	d1 f7       	brne	.-12     	; 0x5940 <cb_adc_a+0xf6>
    594c:	40 93 41 26 	sts	0x2641, r20	; 0x802641 <g_adc_5v0_cur>
    5950:	50 93 42 26 	sts	0x2642, r21	; 0x802642 <g_adc_5v0_cur+0x1>
    5954:	60 93 43 26 	sts	0x2643, r22	; 0x802643 <g_adc_5v0_cur+0x2>
    5958:	70 93 44 26 	sts	0x2644, r23	; 0x802644 <g_adc_5v0_cur+0x3>
    595c:	10 92 3b 26 	sts	0x263B, r1	; 0x80263b <g_adc_5v0_cnt>
    5960:	10 92 3c 26 	sts	0x263C, r1	; 0x80263c <g_adc_5v0_cnt+0x1>
    5964:	10 92 3d 26 	sts	0x263D, r1	; 0x80263d <g_adc_5v0_sum>
    5968:	10 92 3e 26 	sts	0x263E, r1	; 0x80263e <g_adc_5v0_sum+0x1>
    596c:	10 92 3f 26 	sts	0x263F, r1	; 0x80263f <g_adc_5v0_sum+0x2>
    5970:	10 92 40 26 	sts	0x2640, r1	; 0x802640 <g_adc_5v0_sum+0x3>
    5974:	08 95       	ret
    5976:	05 2e       	mov	r0, r21
    5978:	00 0c       	add	r0, r0
    597a:	66 0b       	sbc	r22, r22
    597c:	77 0b       	sbc	r23, r23
    597e:	80 91 33 26 	lds	r24, 0x2633	; 0x802633 <g_adc_vbat_sum>
    5982:	90 91 34 26 	lds	r25, 0x2634	; 0x802634 <g_adc_vbat_sum+0x1>
    5986:	a0 91 35 26 	lds	r26, 0x2635	; 0x802635 <g_adc_vbat_sum+0x2>
    598a:	b0 91 36 26 	lds	r27, 0x2636	; 0x802636 <g_adc_vbat_sum+0x3>
    598e:	48 0f       	add	r20, r24
    5990:	59 1f       	adc	r21, r25
    5992:	6a 1f       	adc	r22, r26
    5994:	7b 1f       	adc	r23, r27
    5996:	40 93 33 26 	sts	0x2633, r20	; 0x802633 <g_adc_vbat_sum>
    599a:	50 93 34 26 	sts	0x2634, r21	; 0x802634 <g_adc_vbat_sum+0x1>
    599e:	60 93 35 26 	sts	0x2635, r22	; 0x802635 <g_adc_vbat_sum+0x2>
    59a2:	70 93 36 26 	sts	0x2636, r23	; 0x802636 <g_adc_vbat_sum+0x3>
    59a6:	80 91 31 26 	lds	r24, 0x2631	; 0x802631 <g_adc_vbat_cnt>
    59aa:	90 91 32 26 	lds	r25, 0x2632	; 0x802632 <g_adc_vbat_cnt+0x1>
    59ae:	01 96       	adiw	r24, 0x01	; 1
    59b0:	80 93 31 26 	sts	0x2631, r24	; 0x802631 <g_adc_vbat_cnt>
    59b4:	90 93 32 26 	sts	0x2632, r25	; 0x802632 <g_adc_vbat_cnt+0x1>
    59b8:	8f 3f       	cpi	r24, 0xFF	; 255
    59ba:	91 05       	cpc	r25, r1
    59bc:	09 f0       	breq	.+2      	; 0x59c0 <cb_adc_a+0x176>
    59be:	08 f4       	brcc	.+2      	; 0x59c2 <cb_adc_a+0x178>
    59c0:	ea c0       	rjmp	.+468    	; 0x5b96 <cb_adc_a+0x34c>
    59c2:	68 94       	set
    59c4:	16 f8       	bld	r1, 6
    59c6:	75 95       	asr	r23
    59c8:	67 95       	ror	r22
    59ca:	57 95       	ror	r21
    59cc:	47 95       	ror	r20
    59ce:	16 94       	lsr	r1
    59d0:	d1 f7       	brne	.-12     	; 0x59c6 <cb_adc_a+0x17c>
    59d2:	40 93 37 26 	sts	0x2637, r20	; 0x802637 <g_adc_vbat_cur>
    59d6:	50 93 38 26 	sts	0x2638, r21	; 0x802638 <g_adc_vbat_cur+0x1>
    59da:	60 93 39 26 	sts	0x2639, r22	; 0x802639 <g_adc_vbat_cur+0x2>
    59de:	70 93 3a 26 	sts	0x263A, r23	; 0x80263a <g_adc_vbat_cur+0x3>
    59e2:	10 92 31 26 	sts	0x2631, r1	; 0x802631 <g_adc_vbat_cnt>
    59e6:	10 92 32 26 	sts	0x2632, r1	; 0x802632 <g_adc_vbat_cnt+0x1>
    59ea:	10 92 33 26 	sts	0x2633, r1	; 0x802633 <g_adc_vbat_sum>
    59ee:	10 92 34 26 	sts	0x2634, r1	; 0x802634 <g_adc_vbat_sum+0x1>
    59f2:	10 92 35 26 	sts	0x2635, r1	; 0x802635 <g_adc_vbat_sum+0x2>
    59f6:	10 92 36 26 	sts	0x2636, r1	; 0x802636 <g_adc_vbat_sum+0x3>
    59fa:	08 95       	ret
    59fc:	61 ff       	sbrs	r22, 1
    59fe:	43 c0       	rjmp	.+134    	; 0x5a86 <cb_adc_a+0x23c>
    5a00:	05 2e       	mov	r0, r21
    5a02:	00 0c       	add	r0, r0
    5a04:	66 0b       	sbc	r22, r22
    5a06:	77 0b       	sbc	r23, r23
    5a08:	80 91 29 26 	lds	r24, 0x2629	; 0x802629 <g_adc_io_adc4_sum>
    5a0c:	90 91 2a 26 	lds	r25, 0x262A	; 0x80262a <g_adc_io_adc4_sum+0x1>
    5a10:	a0 91 2b 26 	lds	r26, 0x262B	; 0x80262b <g_adc_io_adc4_sum+0x2>
    5a14:	b0 91 2c 26 	lds	r27, 0x262C	; 0x80262c <g_adc_io_adc4_sum+0x3>
    5a18:	48 0f       	add	r20, r24
    5a1a:	59 1f       	adc	r21, r25
    5a1c:	6a 1f       	adc	r22, r26
    5a1e:	7b 1f       	adc	r23, r27
    5a20:	40 93 29 26 	sts	0x2629, r20	; 0x802629 <g_adc_io_adc4_sum>
    5a24:	50 93 2a 26 	sts	0x262A, r21	; 0x80262a <g_adc_io_adc4_sum+0x1>
    5a28:	60 93 2b 26 	sts	0x262B, r22	; 0x80262b <g_adc_io_adc4_sum+0x2>
    5a2c:	70 93 2c 26 	sts	0x262C, r23	; 0x80262c <g_adc_io_adc4_sum+0x3>
    5a30:	80 91 27 26 	lds	r24, 0x2627	; 0x802627 <g_adc_io_adc4_cnt>
    5a34:	90 91 28 26 	lds	r25, 0x2628	; 0x802628 <g_adc_io_adc4_cnt+0x1>
    5a38:	01 96       	adiw	r24, 0x01	; 1
    5a3a:	80 93 27 26 	sts	0x2627, r24	; 0x802627 <g_adc_io_adc4_cnt>
    5a3e:	90 93 28 26 	sts	0x2628, r25	; 0x802628 <g_adc_io_adc4_cnt+0x1>
    5a42:	8f 3f       	cpi	r24, 0xFF	; 255
    5a44:	91 05       	cpc	r25, r1
    5a46:	09 f0       	breq	.+2      	; 0x5a4a <cb_adc_a+0x200>
    5a48:	08 f4       	brcc	.+2      	; 0x5a4c <cb_adc_a+0x202>
    5a4a:	a5 c0       	rjmp	.+330    	; 0x5b96 <cb_adc_a+0x34c>
    5a4c:	68 94       	set
    5a4e:	16 f8       	bld	r1, 6
    5a50:	75 95       	asr	r23
    5a52:	67 95       	ror	r22
    5a54:	57 95       	ror	r21
    5a56:	47 95       	ror	r20
    5a58:	16 94       	lsr	r1
    5a5a:	d1 f7       	brne	.-12     	; 0x5a50 <cb_adc_a+0x206>
    5a5c:	40 93 2d 26 	sts	0x262D, r20	; 0x80262d <g_adc_io_adc4_cur>
    5a60:	50 93 2e 26 	sts	0x262E, r21	; 0x80262e <g_adc_io_adc4_cur+0x1>
    5a64:	60 93 2f 26 	sts	0x262F, r22	; 0x80262f <g_adc_io_adc4_cur+0x2>
    5a68:	70 93 30 26 	sts	0x2630, r23	; 0x802630 <g_adc_io_adc4_cur+0x3>
    5a6c:	10 92 27 26 	sts	0x2627, r1	; 0x802627 <g_adc_io_adc4_cnt>
    5a70:	10 92 28 26 	sts	0x2628, r1	; 0x802628 <g_adc_io_adc4_cnt+0x1>
    5a74:	10 92 29 26 	sts	0x2629, r1	; 0x802629 <g_adc_io_adc4_sum>
    5a78:	10 92 2a 26 	sts	0x262A, r1	; 0x80262a <g_adc_io_adc4_sum+0x1>
    5a7c:	10 92 2b 26 	sts	0x262B, r1	; 0x80262b <g_adc_io_adc4_sum+0x2>
    5a80:	10 92 2c 26 	sts	0x262C, r1	; 0x80262c <g_adc_io_adc4_sum+0x3>
    5a84:	08 95       	ret
    5a86:	62 ff       	sbrs	r22, 2
    5a88:	43 c0       	rjmp	.+134    	; 0x5b10 <cb_adc_a+0x2c6>
    5a8a:	05 2e       	mov	r0, r21
    5a8c:	00 0c       	add	r0, r0
    5a8e:	66 0b       	sbc	r22, r22
    5a90:	77 0b       	sbc	r23, r23
    5a92:	80 91 1f 26 	lds	r24, 0x261F	; 0x80261f <g_adc_io_adc5_sum>
    5a96:	90 91 20 26 	lds	r25, 0x2620	; 0x802620 <g_adc_io_adc5_sum+0x1>
    5a9a:	a0 91 21 26 	lds	r26, 0x2621	; 0x802621 <g_adc_io_adc5_sum+0x2>
    5a9e:	b0 91 22 26 	lds	r27, 0x2622	; 0x802622 <g_adc_io_adc5_sum+0x3>
    5aa2:	48 0f       	add	r20, r24
    5aa4:	59 1f       	adc	r21, r25
    5aa6:	6a 1f       	adc	r22, r26
    5aa8:	7b 1f       	adc	r23, r27
    5aaa:	40 93 1f 26 	sts	0x261F, r20	; 0x80261f <g_adc_io_adc5_sum>
    5aae:	50 93 20 26 	sts	0x2620, r21	; 0x802620 <g_adc_io_adc5_sum+0x1>
    5ab2:	60 93 21 26 	sts	0x2621, r22	; 0x802621 <g_adc_io_adc5_sum+0x2>
    5ab6:	70 93 22 26 	sts	0x2622, r23	; 0x802622 <g_adc_io_adc5_sum+0x3>
    5aba:	80 91 1d 26 	lds	r24, 0x261D	; 0x80261d <g_adc_io_adc5_cnt>
    5abe:	90 91 1e 26 	lds	r25, 0x261E	; 0x80261e <g_adc_io_adc5_cnt+0x1>
    5ac2:	01 96       	adiw	r24, 0x01	; 1
    5ac4:	80 93 1d 26 	sts	0x261D, r24	; 0x80261d <g_adc_io_adc5_cnt>
    5ac8:	90 93 1e 26 	sts	0x261E, r25	; 0x80261e <g_adc_io_adc5_cnt+0x1>
    5acc:	8f 3f       	cpi	r24, 0xFF	; 255
    5ace:	91 05       	cpc	r25, r1
    5ad0:	09 f0       	breq	.+2      	; 0x5ad4 <cb_adc_a+0x28a>
    5ad2:	08 f4       	brcc	.+2      	; 0x5ad6 <cb_adc_a+0x28c>
    5ad4:	60 c0       	rjmp	.+192    	; 0x5b96 <cb_adc_a+0x34c>
    5ad6:	68 94       	set
    5ad8:	16 f8       	bld	r1, 6
    5ada:	75 95       	asr	r23
    5adc:	67 95       	ror	r22
    5ade:	57 95       	ror	r21
    5ae0:	47 95       	ror	r20
    5ae2:	16 94       	lsr	r1
    5ae4:	d1 f7       	brne	.-12     	; 0x5ada <cb_adc_a+0x290>
    5ae6:	40 93 23 26 	sts	0x2623, r20	; 0x802623 <g_adc_io_adc5_cur>
    5aea:	50 93 24 26 	sts	0x2624, r21	; 0x802624 <g_adc_io_adc5_cur+0x1>
    5aee:	60 93 25 26 	sts	0x2625, r22	; 0x802625 <g_adc_io_adc5_cur+0x2>
    5af2:	70 93 26 26 	sts	0x2626, r23	; 0x802626 <g_adc_io_adc5_cur+0x3>
    5af6:	10 92 1d 26 	sts	0x261D, r1	; 0x80261d <g_adc_io_adc5_cnt>
    5afa:	10 92 1e 26 	sts	0x261E, r1	; 0x80261e <g_adc_io_adc5_cnt+0x1>
    5afe:	10 92 1f 26 	sts	0x261F, r1	; 0x80261f <g_adc_io_adc5_sum>
    5b02:	10 92 20 26 	sts	0x2620, r1	; 0x802620 <g_adc_io_adc5_sum+0x1>
    5b06:	10 92 21 26 	sts	0x2621, r1	; 0x802621 <g_adc_io_adc5_sum+0x2>
    5b0a:	10 92 22 26 	sts	0x2622, r1	; 0x802622 <g_adc_io_adc5_sum+0x3>
    5b0e:	08 95       	ret
    5b10:	63 ff       	sbrs	r22, 3
    5b12:	41 c0       	rjmp	.+130    	; 0x5b96 <cb_adc_a+0x34c>
    5b14:	05 2e       	mov	r0, r21
    5b16:	00 0c       	add	r0, r0
    5b18:	66 0b       	sbc	r22, r22
    5b1a:	77 0b       	sbc	r23, r23
    5b1c:	80 91 15 26 	lds	r24, 0x2615	; 0x802615 <g_adc_temp_sum>
    5b20:	90 91 16 26 	lds	r25, 0x2616	; 0x802616 <g_adc_temp_sum+0x1>
    5b24:	a0 91 17 26 	lds	r26, 0x2617	; 0x802617 <g_adc_temp_sum+0x2>
    5b28:	b0 91 18 26 	lds	r27, 0x2618	; 0x802618 <g_adc_temp_sum+0x3>
    5b2c:	48 0f       	add	r20, r24
    5b2e:	59 1f       	adc	r21, r25
    5b30:	6a 1f       	adc	r22, r26
    5b32:	7b 1f       	adc	r23, r27
    5b34:	40 93 15 26 	sts	0x2615, r20	; 0x802615 <g_adc_temp_sum>
    5b38:	50 93 16 26 	sts	0x2616, r21	; 0x802616 <g_adc_temp_sum+0x1>
    5b3c:	60 93 17 26 	sts	0x2617, r22	; 0x802617 <g_adc_temp_sum+0x2>
    5b40:	70 93 18 26 	sts	0x2618, r23	; 0x802618 <g_adc_temp_sum+0x3>
    5b44:	80 91 13 26 	lds	r24, 0x2613	; 0x802613 <g_adc_temp_cnt>
    5b48:	90 91 14 26 	lds	r25, 0x2614	; 0x802614 <g_adc_temp_cnt+0x1>
    5b4c:	01 96       	adiw	r24, 0x01	; 1
    5b4e:	80 93 13 26 	sts	0x2613, r24	; 0x802613 <g_adc_temp_cnt>
    5b52:	90 93 14 26 	sts	0x2614, r25	; 0x802614 <g_adc_temp_cnt+0x1>
    5b56:	8f 3f       	cpi	r24, 0xFF	; 255
    5b58:	91 05       	cpc	r25, r1
    5b5a:	e9 f0       	breq	.+58     	; 0x5b96 <cb_adc_a+0x34c>
    5b5c:	e0 f0       	brcs	.+56     	; 0x5b96 <cb_adc_a+0x34c>
    5b5e:	68 94       	set
    5b60:	16 f8       	bld	r1, 6
    5b62:	75 95       	asr	r23
    5b64:	67 95       	ror	r22
    5b66:	57 95       	ror	r21
    5b68:	47 95       	ror	r20
    5b6a:	16 94       	lsr	r1
    5b6c:	d1 f7       	brne	.-12     	; 0x5b62 <cb_adc_a+0x318>
    5b6e:	40 93 19 26 	sts	0x2619, r20	; 0x802619 <g_adc_temp_cur>
    5b72:	50 93 1a 26 	sts	0x261A, r21	; 0x80261a <g_adc_temp_cur+0x1>
    5b76:	60 93 1b 26 	sts	0x261B, r22	; 0x80261b <g_adc_temp_cur+0x2>
    5b7a:	70 93 1c 26 	sts	0x261C, r23	; 0x80261c <g_adc_temp_cur+0x3>
    5b7e:	10 92 13 26 	sts	0x2613, r1	; 0x802613 <g_adc_temp_cnt>
    5b82:	10 92 14 26 	sts	0x2614, r1	; 0x802614 <g_adc_temp_cnt+0x1>
    5b86:	10 92 15 26 	sts	0x2615, r1	; 0x802615 <g_adc_temp_sum>
    5b8a:	10 92 16 26 	sts	0x2616, r1	; 0x802616 <g_adc_temp_sum+0x1>
    5b8e:	10 92 17 26 	sts	0x2617, r1	; 0x802617 <g_adc_temp_sum+0x2>
    5b92:	10 92 18 26 	sts	0x2618, r1	; 0x802618 <g_adc_temp_sum+0x3>
    5b96:	08 95       	ret

00005b98 <task_dac>:
    5b98:	cf 93       	push	r28
    5b9a:	df 93       	push	r29
    5b9c:	1f 92       	push	r1
    5b9e:	1f 92       	push	r1
    5ba0:	cd b7       	in	r28, 0x3d	; 61
    5ba2:	de b7       	in	r29, 0x3e	; 62
    5ba4:	8f b7       	in	r24, 0x3f	; 63
    5ba6:	8a 83       	std	Y+2, r24	; 0x02
    5ba8:	f8 94       	cli
    5baa:	8a 81       	ldd	r24, Y+2	; 0x02
    5bac:	8f bf       	out	0x3f, r24	; 63
    5bae:	80 91 d9 24 	lds	r24, 0x24D9	; 0x8024d9 <s_dds0_freq_mHz.7409>
    5bb2:	90 91 da 24 	lds	r25, 0x24DA	; 0x8024da <s_dds0_freq_mHz.7409+0x1>
    5bb6:	a0 91 db 24 	lds	r26, 0x24DB	; 0x8024db <s_dds0_freq_mHz.7409+0x2>
    5bba:	b0 91 dc 24 	lds	r27, 0x24DC	; 0x8024dc <s_dds0_freq_mHz.7409+0x3>
    5bbe:	80 38       	cpi	r24, 0x80	; 128
    5bc0:	94 48       	sbci	r25, 0x84	; 132
    5bc2:	ae 41       	sbci	r26, 0x1E	; 30
    5bc4:	b1 05       	cpc	r27, r1
    5bc6:	69 f4       	brne	.+26     	; 0x5be2 <task_dac+0x4a>
    5bc8:	80 91 d5 24 	lds	r24, 0x24D5	; 0x8024d5 <s_dds1_freq_mHz.7410>
    5bcc:	90 91 d6 24 	lds	r25, 0x24D6	; 0x8024d6 <s_dds1_freq_mHz.7410+0x1>
    5bd0:	a0 91 d7 24 	lds	r26, 0x24D7	; 0x8024d7 <s_dds1_freq_mHz.7410+0x2>
    5bd4:	b0 91 d8 24 	lds	r27, 0x24D8	; 0x8024d8 <s_dds1_freq_mHz.7410+0x3>
    5bd8:	8a 30       	cpi	r24, 0x0A	; 10
    5bda:	99 40       	sbci	r25, 0x09	; 9
    5bdc:	ad 43       	sbci	r26, 0x3D	; 61
    5bde:	b1 05       	cpc	r27, r1
    5be0:	a9 f1       	breq	.+106    	; 0x5c4c <task_dac+0xb4>
    5be2:	80 e8       	ldi	r24, 0x80	; 128
    5be4:	94 e8       	ldi	r25, 0x84	; 132
    5be6:	ae e1       	ldi	r26, 0x1E	; 30
    5be8:	b0 e0       	ldi	r27, 0x00	; 0
    5bea:	80 93 d9 24 	sts	0x24D9, r24	; 0x8024d9 <s_dds0_freq_mHz.7409>
    5bee:	90 93 da 24 	sts	0x24DA, r25	; 0x8024da <s_dds0_freq_mHz.7409+0x1>
    5bf2:	a0 93 db 24 	sts	0x24DB, r26	; 0x8024db <s_dds0_freq_mHz.7409+0x2>
    5bf6:	b0 93 dc 24 	sts	0x24DC, r27	; 0x8024dc <s_dds0_freq_mHz.7409+0x3>
    5bfa:	8a e0       	ldi	r24, 0x0A	; 10
    5bfc:	99 e0       	ldi	r25, 0x09	; 9
    5bfe:	ad e3       	ldi	r26, 0x3D	; 61
    5c00:	b0 e0       	ldi	r27, 0x00	; 0
    5c02:	80 93 d5 24 	sts	0x24D5, r24	; 0x8024d5 <s_dds1_freq_mHz.7410>
    5c06:	90 93 d6 24 	sts	0x24D6, r25	; 0x8024d6 <s_dds1_freq_mHz.7410+0x1>
    5c0a:	a0 93 d7 24 	sts	0x24D7, r26	; 0x8024d7 <s_dds1_freq_mHz.7410+0x2>
    5c0e:	b0 93 d8 24 	sts	0x24D8, r27	; 0x8024d8 <s_dds1_freq_mHz.7410+0x3>
    5c12:	8f b7       	in	r24, 0x3f	; 63
    5c14:	89 83       	std	Y+1, r24	; 0x01
    5c16:	f8 94       	cli
    5c18:	89 81       	ldd	r24, Y+1	; 0x01
    5c1a:	41 e5       	ldi	r20, 0x51	; 81
    5c1c:	58 eb       	ldi	r21, 0xB8	; 184
    5c1e:	6e e1       	ldi	r22, 0x1E	; 30
    5c20:	75 e0       	ldi	r23, 0x05	; 5
    5c22:	40 93 e5 24 	sts	0x24E5, r20	; 0x8024e5 <dds0_inc>
    5c26:	50 93 e6 24 	sts	0x24E6, r21	; 0x8024e6 <dds0_inc+0x1>
    5c2a:	60 93 e7 24 	sts	0x24E7, r22	; 0x8024e7 <dds0_inc+0x2>
    5c2e:	70 93 e8 24 	sts	0x24E8, r23	; 0x8024e8 <dds0_inc+0x3>
    5c32:	41 e5       	ldi	r20, 0x51	; 81
    5c34:	52 e7       	ldi	r21, 0x72	; 114
    5c36:	6d e3       	ldi	r22, 0x3D	; 61
    5c38:	7a e0       	ldi	r23, 0x0A	; 10
    5c3a:	40 93 dd 24 	sts	0x24DD, r20	; 0x8024dd <dds1_inc>
    5c3e:	50 93 de 24 	sts	0x24DE, r21	; 0x8024de <dds1_inc+0x1>
    5c42:	60 93 df 24 	sts	0x24DF, r22	; 0x8024df <dds1_inc+0x2>
    5c46:	70 93 e0 24 	sts	0x24E0, r23	; 0x8024e0 <dds1_inc+0x3>
    5c4a:	8f bf       	out	0x3f, r24	; 63
    5c4c:	0f 90       	pop	r0
    5c4e:	0f 90       	pop	r0
    5c50:	df 91       	pop	r29
    5c52:	cf 91       	pop	r28
    5c54:	08 95       	ret

00005c56 <isr_calc_next_frame>:
    5c56:	8f 92       	push	r8
    5c58:	9f 92       	push	r9
    5c5a:	af 92       	push	r10
    5c5c:	bf 92       	push	r11
    5c5e:	cf 92       	push	r12
    5c60:	df 92       	push	r13
    5c62:	ef 92       	push	r14
    5c64:	ff 92       	push	r15
    5c66:	0f 93       	push	r16
    5c68:	1f 93       	push	r17
    5c6a:	cf 93       	push	r28
    5c6c:	df 93       	push	r29
    5c6e:	6b 01       	movw	r12, r22
    5c70:	5a 01       	movw	r10, r20
    5c72:	79 01       	movw	r14, r18
    5c74:	48 01       	movw	r8, r16
    5c76:	ec 01       	movw	r28, r24
    5c78:	8c 01       	movw	r16, r24
    5c7a:	00 58       	subi	r16, 0x80	; 128
    5c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c7e:	f6 01       	movw	r30, r12
    5c80:	82 81       	ldd	r24, Z+2	; 0x02
    5c82:	93 81       	ldd	r25, Z+3	; 0x03
    5c84:	0e 94 3b 13 	call	0x2676	; 0x2676 <get_interpolated_sine>
    5c88:	88 83       	st	Y, r24
    5c8a:	99 83       	std	Y+1, r25	; 0x01
    5c8c:	f7 01       	movw	r30, r14
    5c8e:	82 81       	ldd	r24, Z+2	; 0x02
    5c90:	93 81       	ldd	r25, Z+3	; 0x03
    5c92:	0e 94 3b 13 	call	0x2676	; 0x2676 <get_interpolated_sine>
    5c96:	8a 83       	std	Y+2, r24	; 0x02
    5c98:	9b 83       	std	Y+3, r25	; 0x03
    5c9a:	f6 01       	movw	r30, r12
    5c9c:	40 81       	ld	r20, Z
    5c9e:	51 81       	ldd	r21, Z+1	; 0x01
    5ca0:	62 81       	ldd	r22, Z+2	; 0x02
    5ca2:	73 81       	ldd	r23, Z+3	; 0x03
    5ca4:	f5 01       	movw	r30, r10
    5ca6:	80 81       	ld	r24, Z
    5ca8:	91 81       	ldd	r25, Z+1	; 0x01
    5caa:	a2 81       	ldd	r26, Z+2	; 0x02
    5cac:	b3 81       	ldd	r27, Z+3	; 0x03
    5cae:	84 0f       	add	r24, r20
    5cb0:	95 1f       	adc	r25, r21
    5cb2:	a6 1f       	adc	r26, r22
    5cb4:	b7 1f       	adc	r27, r23
    5cb6:	f6 01       	movw	r30, r12
    5cb8:	80 83       	st	Z, r24
    5cba:	91 83       	std	Z+1, r25	; 0x01
    5cbc:	a2 83       	std	Z+2, r26	; 0x02
    5cbe:	b3 83       	std	Z+3, r27	; 0x03
    5cc0:	f7 01       	movw	r30, r14
    5cc2:	40 81       	ld	r20, Z
    5cc4:	51 81       	ldd	r21, Z+1	; 0x01
    5cc6:	62 81       	ldd	r22, Z+2	; 0x02
    5cc8:	73 81       	ldd	r23, Z+3	; 0x03
    5cca:	f4 01       	movw	r30, r8
    5ccc:	80 81       	ld	r24, Z
    5cce:	91 81       	ldd	r25, Z+1	; 0x01
    5cd0:	a2 81       	ldd	r26, Z+2	; 0x02
    5cd2:	b3 81       	ldd	r27, Z+3	; 0x03
    5cd4:	84 0f       	add	r24, r20
    5cd6:	95 1f       	adc	r25, r21
    5cd8:	a6 1f       	adc	r26, r22
    5cda:	b7 1f       	adc	r27, r23
    5cdc:	f7 01       	movw	r30, r14
    5cde:	80 83       	st	Z, r24
    5ce0:	91 83       	std	Z+1, r25	; 0x01
    5ce2:	a2 83       	std	Z+2, r26	; 0x02
    5ce4:	b3 83       	std	Z+3, r27	; 0x03
    5ce6:	24 96       	adiw	r28, 0x04	; 4
    5ce8:	c0 17       	cp	r28, r16
    5cea:	d1 07       	cpc	r29, r17
    5cec:	41 f6       	brne	.-112    	; 0x5c7e <isr_calc_next_frame+0x28>
    5cee:	df 91       	pop	r29
    5cf0:	cf 91       	pop	r28
    5cf2:	1f 91       	pop	r17
    5cf4:	0f 91       	pop	r16
    5cf6:	ff 90       	pop	r15
    5cf8:	ef 90       	pop	r14
    5cfa:	df 90       	pop	r13
    5cfc:	cf 90       	pop	r12
    5cfe:	bf 90       	pop	r11
    5d00:	af 90       	pop	r10
    5d02:	9f 90       	pop	r9
    5d04:	8f 90       	pop	r8
    5d06:	08 95       	ret

00005d08 <cb_dma_dac_ch0_B>:
    5d08:	0f 93       	push	r16
    5d0a:	1f 93       	push	r17
    5d0c:	cf 93       	push	r28
    5d0e:	df 93       	push	r29
    5d10:	1f 92       	push	r1
    5d12:	cd b7       	in	r28, 0x3d	; 61
    5d14:	de b7       	in	r29, 0x3e	; 62
    5d16:	8f b7       	in	r24, 0x3f	; 63
    5d18:	89 83       	std	Y+1, r24	; 0x01
    5d1a:	f8 94       	cli
    5d1c:	99 81       	ldd	r25, Y+1	; 0x01
    5d1e:	e0 e1       	ldi	r30, 0x10	; 16
    5d20:	f1 e0       	ldi	r31, 0x01	; 1
    5d22:	80 81       	ld	r24, Z
    5d24:	80 68       	ori	r24, 0x80	; 128
    5d26:	80 83       	st	Z, r24
    5d28:	9f bf       	out	0x3f, r25	; 63
    5d2a:	78 94       	sei
    5d2c:	0d ed       	ldi	r16, 0xDD	; 221
    5d2e:	14 e2       	ldi	r17, 0x24	; 36
    5d30:	26 e0       	ldi	r18, 0x06	; 6
    5d32:	30 e2       	ldi	r19, 0x20	; 32
    5d34:	45 ee       	ldi	r20, 0xE5	; 229
    5d36:	54 e2       	ldi	r21, 0x24	; 36
    5d38:	61 ee       	ldi	r22, 0xE1	; 225
    5d3a:	74 e2       	ldi	r23, 0x24	; 36
    5d3c:	8f e7       	ldi	r24, 0x7F	; 127
    5d3e:	95 e2       	ldi	r25, 0x25	; 37
    5d40:	8a df       	rcall	.-236    	; 0x5c56 <isr_calc_next_frame>
    5d42:	0f 90       	pop	r0
    5d44:	df 91       	pop	r29
    5d46:	cf 91       	pop	r28
    5d48:	1f 91       	pop	r17
    5d4a:	0f 91       	pop	r16
    5d4c:	08 95       	ret

00005d4e <cb_dma_dac_ch0_A>:
    5d4e:	0f 93       	push	r16
    5d50:	1f 93       	push	r17
    5d52:	cf 93       	push	r28
    5d54:	df 93       	push	r29
    5d56:	1f 92       	push	r1
    5d58:	cd b7       	in	r28, 0x3d	; 61
    5d5a:	de b7       	in	r29, 0x3e	; 62
    5d5c:	8f b7       	in	r24, 0x3f	; 63
    5d5e:	89 83       	std	Y+1, r24	; 0x01
    5d60:	f8 94       	cli
    5d62:	99 81       	ldd	r25, Y+1	; 0x01
    5d64:	e0 e2       	ldi	r30, 0x20	; 32
    5d66:	f1 e0       	ldi	r31, 0x01	; 1
    5d68:	80 81       	ld	r24, Z
    5d6a:	80 68       	ori	r24, 0x80	; 128
    5d6c:	80 83       	st	Z, r24
    5d6e:	9f bf       	out	0x3f, r25	; 63
    5d70:	78 94       	sei
    5d72:	0d ed       	ldi	r16, 0xDD	; 221
    5d74:	14 e2       	ldi	r17, 0x24	; 36
    5d76:	26 e0       	ldi	r18, 0x06	; 6
    5d78:	30 e2       	ldi	r19, 0x20	; 32
    5d7a:	45 ee       	ldi	r20, 0xE5	; 229
    5d7c:	54 e2       	ldi	r21, 0x24	; 36
    5d7e:	61 ee       	ldi	r22, 0xE1	; 225
    5d80:	74 e2       	ldi	r23, 0x24	; 36
    5d82:	8f ef       	ldi	r24, 0xFF	; 255
    5d84:	94 e2       	ldi	r25, 0x24	; 36
    5d86:	67 df       	rcall	.-306    	; 0x5c56 <isr_calc_next_frame>
    5d88:	0f 90       	pop	r0
    5d8a:	df 91       	pop	r29
    5d8c:	cf 91       	pop	r28
    5d8e:	1f 91       	pop	r17
    5d90:	0f 91       	pop	r16
    5d92:	08 95       	ret

00005d94 <usb_callback_suspend_action>:
    5d94:	08 95       	ret

00005d96 <usb_callback_resume_action>:
    5d96:	08 95       	ret

00005d98 <usb_callback_remotewakeup_enable>:
    5d98:	08 95       	ret

00005d9a <usb_callback_remotewakeup_disable>:
    5d9a:	08 95       	ret

00005d9c <usb_callback_cdc_enable>:
    5d9c:	81 e0       	ldi	r24, 0x01	; 1
    5d9e:	80 93 6b 26 	sts	0x266B, r24	; 0x80266b <usb_cdc_transfers_autorized>
    5da2:	08 95       	ret

00005da4 <usb_callback_cdc_disable>:
    5da4:	10 92 6b 26 	sts	0x266B, r1	; 0x80266b <usb_cdc_transfers_autorized>
    5da8:	08 95       	ret

00005daa <usb_callback_config>:
    5daa:	08 95       	ret

00005dac <usb_callback_cdc_set_dtr>:
    5dac:	08 95       	ret

00005dae <usb_callback_cdc_set_rts>:
    5dae:	08 95       	ret

00005db0 <usb_callback_rx_notify>:
    5db0:	08 95       	ret

00005db2 <usb_callback_tx_empty_notify>:
    5db2:	08 95       	ret

00005db4 <main>:
}


int main(void)
{
    5db4:	2f 92       	push	r2
    5db6:	3f 92       	push	r3
    5db8:	4f 92       	push	r4
    5dba:	5f 92       	push	r5
    5dbc:	6f 92       	push	r6
    5dbe:	7f 92       	push	r7
    5dc0:	8f 92       	push	r8
    5dc2:	9f 92       	push	r9
    5dc4:	af 92       	push	r10
    5dc6:	bf 92       	push	r11
    5dc8:	cf 92       	push	r12
    5dca:	df 92       	push	r13
    5dcc:	ef 92       	push	r14
    5dce:	ff 92       	push	r15
    5dd0:	0f 93       	push	r16
    5dd2:	1f 93       	push	r17
    5dd4:	cf 93       	push	r28
    5dd6:	df 93       	push	r29
    5dd8:	cd b7       	in	r28, 0x3d	; 61
    5dda:	de b7       	in	r29, 0x3e	; 62
    5ddc:	a1 97       	sbiw	r28, 0x21	; 33
    5dde:	cd bf       	out	0x3d, r28	; 61
    5de0:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	/* Init of interrupt system */
	irq_initialize_vectors();
    5de2:	e0 ea       	ldi	r30, 0xA0	; 160
    5de4:	f0 e0       	ldi	r31, 0x00	; 0
    5de6:	0f 2e       	mov	r0, r31
    5de8:	f7 e0       	ldi	r31, 0x07	; 7
    5dea:	4f 2e       	mov	r4, r31
    5dec:	f0 2d       	mov	r31, r0
    5dee:	42 82       	std	Z+2, r4	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    5df0:	42 82       	std	Z+2, r4	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    5df2:	82 81       	ldd	r24, Z+2	; 0x02
    5df4:	8f 77       	andi	r24, 0x7F	; 127
    5df6:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);

	sysclk_init();		// Clock configuration set-up
    5df8:	11 82       	std	Z+1, r1	; 0x01
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    5dfa:	94 d3       	rcall	.+1832   	; 0x6524 <sysclk_init>
    5dfc:	e3 ec       	ldi	r30, 0xC3	; 195
    5dfe:	f7 e2       	ldi	r31, 0x27	; 39
    5e00:	10 82       	st	Z, r1
    5e02:	11 82       	std	Z+1, r1	; 0x01
    5e04:	12 82       	std	Z+2, r1	; 0x02
    5e06:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    5e08:	14 82       	std	Z+4, r1	; 0x04
    5e0a:	55 24       	eor	r5, r5
    5e0c:	53 94       	inc	r5

	sleepmgr_init();	// Unlocks all sleep mode levels

	rtc_init();
    5e0e:	55 82       	std	Z+5, r5	; 0x05
    5e10:	0e 94 c4 12 	call	0x2588	; 0x2588 <rtc_init>
	rtc_set_callback(cb_rtc_alarm);
    5e14:	84 e2       	ldi	r24, 0x24	; 36
    5e16:	9c e2       	ldi	r25, 0x2C	; 44
    5e18:	0e 94 bf 12 	call	0x257e	; 0x257e <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    5e1c:	62 e0       	ldi	r22, 0x02	; 2
    5e1e:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event channels 0, 1, 2, 3 */
	EVSYS.CH0MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH0
    5e20:	02 d4       	rcall	.+2052   	; 0x6626 <sysclk_enable_module>
    5e22:	e0 e8       	ldi	r30, 0x80	; 128
    5e24:	f1 e0       	ldi	r31, 0x01	; 1
    5e26:	86 ec       	ldi	r24, 0xC6	; 198
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH0 no digital filtering
    5e28:	80 83       	st	Z, r24
	EVSYS.CH1MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH1
    5e2a:	10 86       	std	Z+8, r1	; 0x08
	EVSYS.CH1CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH1 no digital filtering
    5e2c:	81 83       	std	Z+1, r24	; 0x01
	EVSYS.CH2MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH2
    5e2e:	11 86       	std	Z+9, r1	; 0x09
	EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH2 no digital filtering
    5e30:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH3MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH3
    5e32:	12 86       	std	Z+10, r1	; 0x0a
	EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH3 no digital filtering
    5e34:	83 83       	std	Z+3, r24	; 0x03

	/* DAC - event 7 */
	EVSYS.CH7MUX  = EVSYS_CHMUX_TCE1_OVF_gc;									// TCE1 overflow goes to EVSYS CH7
    5e36:	13 86       	std	Z+11, r1	; 0x0b
    5e38:	88 ee       	ldi	r24, 0xE8	; 232
	EVSYS.CH7CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH7 no digital filtering
    5e3a:	87 83       	std	Z+7, r24	; 0x07

static void tc_init(void)
{
	/* TCC0: VCTCXO PWM signal generation and ADCA CH0 */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 2560);						// Init PWM structure and enable timer
    5e3c:	17 86       	std	Z+15, r1	; 0x0f
    5e3e:	20 e0       	ldi	r18, 0x00	; 0
    5e40:	3a e0       	ldi	r19, 0x0A	; 10
    5e42:	43 e0       	ldi	r20, 0x03	; 3
    5e44:	60 e0       	ldi	r22, 0x00	; 0
    5e46:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    5e48:	01 96       	adiw	r24, 0x01	; 1
    5e4a:	d9 db       	rcall	.-2126   	; 0x55fe <pwm_init>
    5e4c:	6d e2       	ldi	r22, 0x2D	; 45
    5e4e:	ce 01       	movw	r24, r28
	tc_write_cc_buffer(&TCC0, TC_CCC, (uint16_t) (0.5f + pwm_vctcxo_cfg.period * C_VCTCXO_DEFAULT_VOLTS / C_VCTCXO_PWM_HI_VOLTS));	// Initial value for VCTCXO
    5e50:	01 96       	adiw	r24, 0x01	; 1
    5e52:	9d dc       	rcall	.-1734   	; 0x578e <pwm_start>
    5e54:	6e 81       	ldd	r22, Y+6	; 0x06
    5e56:	7f 81       	ldd	r23, Y+7	; 0x07
    5e58:	80 e0       	ldi	r24, 0x00	; 0
    5e5a:	90 e0       	ldi	r25, 0x00	; 0
    5e5c:	0e 94 71 3c 	call	0x78e2	; 0x78e2 <__floatunsisf>
    5e60:	20 e0       	ldi	r18, 0x00	; 0
    5e62:	30 e0       	ldi	r19, 0x00	; 0
    5e64:	40 ec       	ldi	r20, 0xC0	; 192
    5e66:	5f e3       	ldi	r21, 0x3F	; 63
    5e68:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <__mulsf3>
    5e6c:	27 e2       	ldi	r18, 0x27	; 39
    5e6e:	31 e3       	ldi	r19, 0x31	; 49
    5e70:	40 e5       	ldi	r20, 0x50	; 80
    5e72:	50 e4       	ldi	r21, 0x40	; 64
    5e74:	0e 94 dd 3b 	call	0x77ba	; 0x77ba <__divsf3>
    5e78:	20 e0       	ldi	r18, 0x00	; 0
    5e7a:	30 e0       	ldi	r19, 0x00	; 0
    5e7c:	40 e0       	ldi	r20, 0x00	; 0
    5e7e:	5f e3       	ldi	r21, 0x3F	; 63
    5e80:	0e 94 79 3b 	call	0x76f2	; 0x76f2 <__addsf3>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    5e84:	0e 94 45 3c 	call	0x788a	; 0x788a <__fixunssfsi>
    5e88:	61 2c       	mov	r6, r1
    5e8a:	68 94       	set
    5e8c:	77 24       	eor	r7, r7
    5e8e:	73 f8       	bld	r7, 3
    5e90:	d3 01       	movw	r26, r6
    5e92:	dc 96       	adiw	r26, 0x3c	; 60
    5e94:	6d 93       	st	X+, r22

	/* TCE1: DAC clock */
	tc_enable(&TCE1);
    5e96:	7c 93       	st	X, r23
    5e98:	dd 97       	sbiw	r26, 0x3d	; 61
    5e9a:	80 e4       	ldi	r24, 0x40	; 64
    5e9c:	9a e0       	ldi	r25, 0x0A	; 10
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    5e9e:	0e 94 e6 20 	call	0x41cc	; 0x41cc <tc_enable>
    5ea2:	00 e4       	ldi	r16, 0x40	; 64
    5ea4:	1a e0       	ldi	r17, 0x0A	; 10
    5ea6:	f8 01       	movw	r30, r16
    5ea8:	81 81       	ldd	r24, Z+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    5eaa:	88 7f       	andi	r24, 0xF8	; 248
    5eac:	81 83       	std	Z+1, r24	; 0x01
    5eae:	8b e2       	ldi	r24, 0x2B	; 43
    5eb0:	91 e0       	ldi	r25, 0x01	; 1
}

static void adc_init(void)
{
	/* Disable input pins */
	PORTA_PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5eb2:	86 a3       	std	Z+38, r24	; 0x26
    5eb4:	97 a3       	std	Z+39, r25	; 0x27
    5eb6:	e0 e1       	ldi	r30, 0x10	; 16
    5eb8:	f6 e0       	ldi	r31, 0x06	; 6
    5eba:	80 81       	ld	r24, Z
	PORTA_PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5ebc:	87 60       	ori	r24, 0x07	; 7
    5ebe:	80 83       	st	Z, r24
    5ec0:	e1 e1       	ldi	r30, 0x11	; 17
    5ec2:	f6 e0       	ldi	r31, 0x06	; 6
    5ec4:	80 81       	ld	r24, Z
	PORTA_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5ec6:	87 60       	ori	r24, 0x07	; 7
    5ec8:	80 83       	st	Z, r24
    5eca:	e2 e1       	ldi	r30, 0x12	; 18
    5ecc:	f6 e0       	ldi	r31, 0x06	; 6
    5ece:	80 81       	ld	r24, Z
	PORTA_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5ed0:	87 60       	ori	r24, 0x07	; 7
    5ed2:	80 83       	st	Z, r24
    5ed4:	e3 e1       	ldi	r30, 0x13	; 19
    5ed6:	f6 e0       	ldi	r31, 0x06	; 6
    5ed8:	80 81       	ld	r24, Z
	PORTA_PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5eda:	87 60       	ori	r24, 0x07	; 7
    5edc:	80 83       	st	Z, r24
    5ede:	e4 e1       	ldi	r30, 0x14	; 20
    5ee0:	f6 e0       	ldi	r31, 0x06	; 6
    5ee2:	80 81       	ld	r24, Z
	PORTA_PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5ee4:	87 60       	ori	r24, 0x07	; 7
    5ee6:	80 83       	st	Z, r24
    5ee8:	e5 e1       	ldi	r30, 0x15	; 21
    5eea:	f6 e0       	ldi	r31, 0x06	; 6
    5eec:	80 81       	ld	r24, Z
	PORTB_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5eee:	87 60       	ori	r24, 0x07	; 7
    5ef0:	80 83       	st	Z, r24
    5ef2:	e2 e3       	ldi	r30, 0x32	; 50
    5ef4:	f6 e0       	ldi	r31, 0x06	; 6
    5ef6:	80 81       	ld	r24, Z
	PORTB_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5ef8:	87 60       	ori	r24, 0x07	; 7
    5efa:	80 83       	st	Z, r24
    5efc:	e3 e3       	ldi	r30, 0x33	; 51
    5efe:	f6 e0       	ldi	r31, 0x06	; 6
    5f00:	80 81       	ld	r24, Z

	/* Prepare the structures */
	adc_read_configuration(&ADC_VCTCXO_5V0_VBAT,							&g_adc_a_conf);
    5f02:	87 60       	ori	r24, 0x07	; 7
    5f04:	80 83       	st	Z, r24
    5f06:	6f e5       	ldi	r22, 0x5F	; 95
    5f08:	76 e2       	ldi	r23, 0x26	; 38
    5f0a:	80 e0       	ldi	r24, 0x00	; 0
    5f0c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    5f0e:	0e 94 ed 18 	call	0x31da	; 0x31da <adc_read_configuration>
    5f12:	4b e5       	ldi	r20, 0x5B	; 91
    5f14:	56 e2       	ldi	r21, 0x26	; 38
    5f16:	61 e0       	ldi	r22, 0x01	; 1
    5f18:	80 e0       	ldi	r24, 0x00	; 0
    5f1a:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    5f1c:	0e 94 71 19 	call	0x32e2	; 0x32e2 <adcch_read_configuration>
    5f20:	47 e5       	ldi	r20, 0x57	; 87
    5f22:	56 e2       	ldi	r21, 0x26	; 38
    5f24:	62 e0       	ldi	r22, 0x02	; 2
    5f26:	80 e0       	ldi	r24, 0x00	; 0
    5f28:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    5f2a:	0e 94 71 19 	call	0x32e2	; 0x32e2 <adcch_read_configuration>
    5f2e:	43 e5       	ldi	r20, 0x53	; 83
    5f30:	56 e2       	ldi	r21, 0x26	; 38
    5f32:	64 e0       	ldi	r22, 0x04	; 4
    5f34:	80 e0       	ldi	r24, 0x00	; 0
    5f36:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    5f38:	0e 94 71 19 	call	0x32e2	; 0x32e2 <adcch_read_configuration>
    5f3c:	4f e4       	ldi	r20, 0x4F	; 79
    5f3e:	56 e2       	ldi	r21, 0x26	; 38
    5f40:	68 e0       	ldi	r22, 0x08	; 8
    5f42:	80 e0       	ldi	r24, 0x00	; 0
    5f44:	92 e0       	ldi	r25, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    5f46:	0e 94 71 19 	call	0x32e2	; 0x32e2 <adcch_read_configuration>
    5f4a:	ef e5       	ldi	r30, 0x5F	; 95
    5f4c:	f6 e2       	ldi	r31, 0x26	; 38
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    5f4e:	24 e0       	ldi	r18, 0x04	; 4
 * \note Not all device families feature this setting.
 */
static inline void adc_set_current_limit(struct adc_config *conf,
		enum adc_current_limit currlimit)
{
	conf->ctrlb &= ~ADC_CURRLIMIT_gm;
    5f50:	24 83       	std	Z+4, r18	; 0x04
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    5f52:	92 81       	ldd	r25, Z+2	; 0x02
    5f54:	81 81       	ldd	r24, Z+1	; 0x01
    5f56:	0f 2e       	mov	r0, r31
    5f58:	fb e5       	ldi	r31, 0x5B	; 91
    5f5a:	ef 2e       	mov	r14, r31
    5f5c:	f6 e2       	ldi	r31, 0x26	; 38
    5f5e:	ff 2e       	mov	r15, r31
    5f60:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    5f62:	d7 01       	movw	r26, r14
    5f64:	5c 92       	st	X, r5
    5f66:	38 e0       	ldi	r19, 0x08	; 8
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    5f68:	11 96       	adiw	r26, 0x01	; 1
    5f6a:	3c 93       	st	X, r19
    5f6c:	0f 2e       	mov	r0, r31
    5f6e:	f7 e5       	ldi	r31, 0x57	; 87
    5f70:	8f 2e       	mov	r8, r31
    5f72:	f6 e2       	ldi	r31, 0x26	; 38
    5f74:	9f 2e       	mov	r9, r31
    5f76:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    5f78:	d4 01       	movw	r26, r8
    5f7a:	5c 92       	st	X, r5
    5f7c:	30 e2       	ldi	r19, 0x20	; 32
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    5f7e:	11 96       	adiw	r26, 0x01	; 1
    5f80:	3c 93       	st	X, r19
    5f82:	0f 2e       	mov	r0, r31
    5f84:	f3 e5       	ldi	r31, 0x53	; 83
    5f86:	af 2e       	mov	r10, r31
    5f88:	f6 e2       	ldi	r31, 0x26	; 38
    5f8a:	bf 2e       	mov	r11, r31
    5f8c:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    5f8e:	d5 01       	movw	r26, r10
    5f90:	5c 92       	st	X, r5
    5f92:	38 e2       	ldi	r19, 0x28	; 40
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    5f94:	11 96       	adiw	r26, 0x01	; 1
    5f96:	3c 93       	st	X, r19
    5f98:	0f 2e       	mov	r0, r31
    5f9a:	ff e4       	ldi	r31, 0x4F	; 79
    5f9c:	cf 2e       	mov	r12, r31
    5f9e:	f6 e2       	ldi	r31, 0x26	; 38
    5fa0:	df 2e       	mov	r13, r31
    5fa2:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    5fa4:	d6 01       	movw	r26, r12
    5fa6:	1c 92       	st	X, r1
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    5fa8:	11 96       	adiw	r26, 0x01	; 1
    5faa:	1c 92       	st	X, r1
    5fac:	9f 78       	andi	r25, 0x8F	; 143
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    5fae:	93 62       	ori	r25, 0x23	; 35
    5fb0:	92 83       	std	Z+2, r25	; 0x02
    5fb2:	92 e0       	ldi	r25, 0x02	; 2
    5fb4:	d7 01       	movw	r26, r14
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    5fb6:	13 96       	adiw	r26, 0x03	; 3
    5fb8:	9c 93       	st	X, r25
    5fba:	81 70       	andi	r24, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    5fbc:	80 62       	ori	r24, 0x20	; 32

	/* Trigger */
	adc_set_conversion_trigger(&g_adc_a_conf, ADC_TRIG_EVENT_SINGLE, 4, 0);

	/* Interrupt service routine */
	adc_set_callback(&ADCA, cb_adc_a);
    5fbe:	81 83       	std	Z+1, r24	; 0x01
    5fc0:	23 83       	std	Z+3, r18	; 0x03
    5fc2:	65 e2       	ldi	r22, 0x25	; 37
    5fc4:	7c e2       	ldi	r23, 0x2C	; 44
    5fc6:	80 e0       	ldi	r24, 0x00	; 0
    5fc8:	92 e0       	ldi	r25, 0x02	; 2
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    5fca:	0e 94 67 16 	call	0x2cce	; 0x2cce <adc_set_callback>
    5fce:	f4 01       	movw	r30, r8
    5fd0:	22 81       	ldd	r18, Z+2	; 0x02
    5fd2:	d5 01       	movw	r26, r10
    5fd4:	12 96       	adiw	r26, 0x02	; 2
    5fd6:	9c 91       	ld	r25, X
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    5fd8:	f6 01       	movw	r30, r12
    5fda:	82 81       	ldd	r24, Z+2	; 0x02
    5fdc:	d7 01       	movw	r26, r14
    5fde:	12 96       	adiw	r26, 0x02	; 2
    5fe0:	3c 91       	ld	r19, X
    5fe2:	12 97       	sbiw	r26, 0x02	; 2
    5fe4:	30 7f       	andi	r19, 0xF0	; 240
    5fe6:	31 60       	ori	r19, 0x01	; 1
    5fe8:	12 96       	adiw	r26, 0x02	; 2
    5fea:	3c 93       	st	X, r19
    5fec:	20 7f       	andi	r18, 0xF0	; 240
    5fee:	21 60       	ori	r18, 0x01	; 1
    5ff0:	f4 01       	movw	r30, r8
    5ff2:	22 83       	std	Z+2, r18	; 0x02
    5ff4:	90 7f       	andi	r25, 0xF0	; 240
    5ff6:	91 60       	ori	r25, 0x01	; 1
    5ff8:	d5 01       	movw	r26, r10
    5ffa:	12 96       	adiw	r26, 0x02	; 2
    5ffc:	9c 93       	st	X, r25
    5ffe:	80 7f       	andi	r24, 0xF0	; 240
    6000:	81 60       	ori	r24, 0x01	; 1
	adcch_enable_interrupt(&g_adcch_io_adc4_conf);
	adcch_enable_interrupt(&g_adcch_io_adc5_conf);
	adcch_enable_interrupt(&g_adcch_temp_conf);

	/* Execute the new settings */
	adc_write_configuration(&ADCA,											&g_adc_a_conf);
    6002:	f6 01       	movw	r30, r12
    6004:	82 83       	std	Z+2, r24	; 0x02
    6006:	6f e5       	ldi	r22, 0x5F	; 95
    6008:	76 e2       	ldi	r23, 0x26	; 38
    600a:	80 e0       	ldi	r24, 0x00	; 0
    600c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    600e:	0e 94 83 18 	call	0x3106	; 0x3106 <adc_write_configuration>
    6012:	a7 01       	movw	r20, r14
    6014:	61 e0       	ldi	r22, 0x01	; 1
    6016:	80 e0       	ldi	r24, 0x00	; 0
    6018:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    601a:	0e 94 26 19 	call	0x324c	; 0x324c <adcch_write_configuration>
    601e:	a4 01       	movw	r20, r8
    6020:	62 e0       	ldi	r22, 0x02	; 2
    6022:	80 e0       	ldi	r24, 0x00	; 0
    6024:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    6026:	0e 94 26 19 	call	0x324c	; 0x324c <adcch_write_configuration>
    602a:	a5 01       	movw	r20, r10
    602c:	64 e0       	ldi	r22, 0x04	; 4
    602e:	80 e0       	ldi	r24, 0x00	; 0
    6030:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    6032:	0e 94 26 19 	call	0x324c	; 0x324c <adcch_write_configuration>
    6036:	a6 01       	movw	r20, r12
    6038:	68 e0       	ldi	r22, 0x08	; 8
    603a:	80 e0       	ldi	r24, 0x00	; 0
    603c:	92 e0       	ldi	r25, 0x02	; 2
    603e:	0e 94 26 19 	call	0x324c	; 0x324c <adcch_write_configuration>
    6042:	65 e2       	ldi	r22, 0x25	; 37
    6044:	70 e0       	ldi	r23, 0x00	; 0
    6046:	82 e0       	ldi	r24, 0x02	; 2
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    6048:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
		data <<= 8;
    604c:	e8 2e       	mov	r14, r24
    604e:	f1 2c       	mov	r15, r1
    6050:	fe 2c       	mov	r15, r14
    6052:	ee 24       	eor	r14, r14
    6054:	64 e2       	ldi	r22, 0x24	; 36
    6056:	70 e0       	ldi	r23, 0x00	; 0
    6058:	82 e0       	ldi	r24, 0x02	; 2
		data |= nvm_read_production_signature_row(ADCBCAL0);
    605a:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>

	/* Get production signature for calibration */
	ADCB_CAL = adc_get_calibration_data(ADC_CAL_ADCB);
    605e:	e8 2a       	or	r14, r24
    6060:	e0 92 4c 02 	sts	0x024C, r14	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_B, &dmach_dma1_conf);
}

static void dac_init(void)
{
    dac_read_configuration(&DAC_DAC, &dac_conf);
    6064:	f0 92 4d 02 	sts	0x024D, r15	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
    6068:	6f ef       	ldi	r22, 0xFF	; 255
    606a:	75 e2       	ldi	r23, 0x25	; 37
    606c:	80 e2       	ldi	r24, 0x20	; 32
    606e:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    6070:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <dac_read_configuration>
    6074:	ef ef       	ldi	r30, 0xFF	; 255
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    6076:	f5 e2       	ldi	r31, 0x25	; 37
    6078:	52 82       	std	Z+2, r5	; 0x02
    607a:	0f 2e       	mov	r0, r31
    607c:	fc e0       	ldi	r31, 0x0C	; 12
    607e:	bf 2e       	mov	r11, r31
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    6080:	f0 2d       	mov	r31, r0
    6082:	b0 82       	st	Z, r11
    6084:	81 81       	ldd	r24, Z+1	; 0x01
    6086:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    6088:	83 64       	ori	r24, 0x43	; 67
    dac_set_conversion_parameters(&dac_conf, DAC_REF_BANDGAP, DAC_ADJ_LEFT);
    dac_set_active_channel(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 0);
    dac_set_conversion_trigger(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 7);
    dac_write_configuration(&DAC_DAC, &dac_conf);
    608a:	81 83       	std	Z+1, r24	; 0x01
    608c:	43 82       	std	Z+3, r4	; 0x03
    608e:	bf 01       	movw	r22, r30
    6090:	80 e2       	ldi	r24, 0x20	; 32
    6092:	93 e0       	ldi	r25, 0x03	; 3
    6094:	0e 94 07 1a 	call	0x340e	; 0x340e <dac_write_configuration>
    6098:	62 e3       	ldi	r22, 0x32	; 50
    609a:	70 e0       	ldi	r23, 0x00	; 0
    609c:	82 e0       	ldi	r24, 0x02	; 2

	/* Get production signature for calibration */
	DACB_CH0OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB0_OFFSET);
    609e:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
    60a2:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    60a6:	63 e3       	ldi	r22, 0x33	; 51
    60a8:	70 e0       	ldi	r23, 0x00	; 0
    60aa:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH0GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB0_GAIN);
    60ac:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
    60b0:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    60b4:	66 e3       	ldi	r22, 0x36	; 54
    60b6:	70 e0       	ldi	r23, 0x00	; 0
    60b8:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH1OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB1_OFFSET);
    60ba:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
    60be:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    60c2:	67 e3       	ldi	r22, 0x37	; 55
    60c4:	70 e0       	ldi	r23, 0x00	; 0
    60c6:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH1GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB1_GAIN);
    60c8:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
static void cb_dma_dac_ch0_A(enum dma_channel_status status);
static void cb_dma_dac_ch0_B(enum dma_channel_status status);

static void dma_init(void)
{
	memset(&dmach_dma0_conf, 0, sizeof(dmach_dma0_conf));	// DACB channel 0 - linked with dma1
    60cc:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
    60d0:	0f 2e       	mov	r0, r31
    60d2:	f4 ef       	ldi	r31, 0xF4	; 244
    60d4:	cf 2e       	mov	r12, r31
    60d6:	f4 e2       	ldi	r31, 0x24	; 36
    60d8:	df 2e       	mov	r13, r31
    60da:	f0 2d       	mov	r31, r0
    60dc:	8b e0       	ldi	r24, 0x0B	; 11
    60de:	d6 01       	movw	r26, r12
    60e0:	e8 2f       	mov	r30, r24
    60e2:	1d 92       	st	X+, r1
	memset(&dmach_dma1_conf, 0, sizeof(dmach_dma1_conf));	// DACB channel 0 - linked with dma0
    60e4:	ea 95       	dec	r30
    60e6:	e9 f7       	brne	.-6      	; 0x60e2 <__stack+0xe3>
    60e8:	0f 2e       	mov	r0, r31
    60ea:	f9 ee       	ldi	r31, 0xE9	; 233
    60ec:	ef 2e       	mov	r14, r31
    60ee:	f4 e2       	ldi	r31, 0x24	; 36
    60f0:	ff 2e       	mov	r15, r31
    60f2:	f0 2d       	mov	r31, r0
    60f4:	d7 01       	movw	r26, r14
    60f6:	1d 92       	st	X+, r1
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
    60f8:	8a 95       	dec	r24
    60fa:	e9 f7       	brne	.-6      	; 0x60f6 <__stack+0xf7>
    60fc:	80 e8       	ldi	r24, 0x80	; 128
    60fe:	90 e0       	ldi	r25, 0x00	; 0
    6100:	f6 01       	movw	r30, r12
    6102:	84 83       	std	Z+4, r24	; 0x04
    6104:	95 83       	std	Z+5, r25	; 0x05
    6106:	d7 01       	movw	r26, r14
    6108:	14 96       	adiw	r26, 0x04	; 4
    610a:	8d 93       	st	X+, r24
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    610c:	9c 93       	st	X, r25
    610e:	15 97       	sbiw	r26, 0x05	; 5
    6110:	8f ef       	ldi	r24, 0xFF	; 255
    6112:	94 e2       	ldi	r25, 0x24	; 36
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    6114:	87 83       	std	Z+7, r24	; 0x07
    6116:	90 87       	std	Z+8, r25	; 0x08
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    6118:	29 ed       	ldi	r18, 0xD9	; 217
    611a:	22 83       	std	Z+2, r18	; 0x02
    611c:	88 e3       	ldi	r24, 0x38	; 56
    611e:	93 e0       	ldi	r25, 0x03	; 3
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    6120:	81 87       	std	Z+9, r24	; 0x09
    6122:	92 87       	std	Z+10, r25	; 0x0a
    6124:	4f e7       	ldi	r20, 0x7F	; 127
    6126:	55 e2       	ldi	r21, 0x25	; 37
    6128:	17 96       	adiw	r26, 0x07	; 7
    612a:	4d 93       	st	X+, r20
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    612c:	5c 93       	st	X, r21
    612e:	18 97       	sbiw	r26, 0x08	; 8
    6130:	12 96       	adiw	r26, 0x02	; 2
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    6132:	2c 93       	st	X, r18
    6134:	12 97       	sbiw	r26, 0x02	; 2
    6136:	19 96       	adiw	r26, 0x09	; 9
    6138:	8d 93       	st	X+, r24
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    613a:	9c 93       	st	X, r25
    613c:	1a 97       	sbiw	r26, 0x0a	; 10
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    613e:	95 e2       	ldi	r25, 0x25	; 37
    6140:	93 83       	std	Z+3, r25	; 0x03
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    6142:	86 e0       	ldi	r24, 0x06	; 6
    6144:	80 83       	st	Z, r24
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    6146:	13 96       	adiw	r26, 0x03	; 3
	dma_channel_set_single_shot(&dmach_dma0_conf);

	dma_channel_set_trigger_source(&dmach_dma1_conf, DMA_CH_TRIGSRC_DACB_CH0_gc);
	dma_channel_set_single_shot(&dmach_dma1_conf);

	task_dac(rtc_get_time());																		// Calculate DDS increments
    6148:	9c 93       	st	X, r25
    614a:	13 97       	sbiw	r26, 0x03	; 3
    614c:	8c 93       	st	X, r24
    614e:	0e 94 ae 12 	call	0x255c	; 0x255c <rtc_get_time>

	evsys_init();		// Event system
	tc_init();			// Timers
	adc_init();			// ADC
	dac_init();			// DAC
	twi_init();			// I2C / TWI
    6152:	22 dd       	rcall	.-1468   	; 0x5b98 <task_dac>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    6154:	0e 94 c4 13 	call	0x2788	; 0x2788 <twi_init>

	nvm_init(INT_FLASH);
    6158:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <board_init>
    615c:	80 e0       	ldi	r24, 0x00	; 0

	/* All interrupt sources & PMIC are prepared until here - IRQ activation follows */
	cpu_irq_enable();
    615e:	0e 94 2f 11 	call	0x225e	; 0x225e <nvm_init>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    6162:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    6164:	f3 01       	movw	r30, r6
    6166:	80 81       	ld	r24, Z
    6168:	80 7f       	andi	r24, 0xF0	; 240
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    616a:	81 60       	ori	r24, 0x01	; 1
    616c:	80 83       	st	Z, r24
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    616e:	d8 01       	movw	r26, r16
    6170:	8c 91       	ld	r24, X
    6172:	80 7f       	andi	r24, 0xF0	; 240
	dma_init();
}

static void dac_start(void)
{
	dac_enable(&DACB);
    6174:	81 60       	ori	r24, 0x01	; 1
    6176:	8c 93       	st	X, r24
    6178:	80 e2       	ldi	r24, 0x20	; 32
    617a:	93 e0       	ldi	r25, 0x03	; 3
	task_dac(rtc_get_time());																		// Calculate DDS increments
}

static void dma_start(void)
{
	dma_enable();
    617c:	0e 94 db 19 	call	0x33b6	; 0x33b6 <dac_enable>

	dma_set_callback(DMA_CHANNEL_DACB_CH0_A, cb_dma_dac_ch0_A);
    6180:	0e 94 95 11 	call	0x232a	; 0x232a <dma_enable>
    6184:	67 ea       	ldi	r22, 0xA7	; 167
    6186:	7e e2       	ldi	r23, 0x2E	; 46
    6188:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline void dma_channel_set_interrupt_level(struct dma_channel_config
		*config, enum dma_int_level_t level)
{
	config->ctrlb &= ~(DMA_CH_ERRINTLVL_gm | DMA_CH_TRNINTLVL_gm);
	config->ctrlb |= (level << DMA_CH_ERRINTLVL_gp)
    618a:	0e 94 b7 11 	call	0x236e	; 0x236e <dma_set_callback>
    618e:	f6 01       	movw	r30, r12
    6190:	81 81       	ldd	r24, Z+1	; 0x01
    6192:	80 7f       	andi	r24, 0xF0	; 240
	dma_channel_set_interrupt_level(&dmach_dma0_conf, DMA_INT_LVL_MED);

	dma_set_callback(DMA_CHANNEL_DACB_CH0_B, cb_dma_dac_ch0_B);
    6194:	8a 60       	ori	r24, 0x0A	; 10
    6196:	81 83       	std	Z+1, r24	; 0x01
    6198:	64 e8       	ldi	r22, 0x84	; 132
    619a:	7e e2       	ldi	r23, 0x2E	; 46
    619c:	81 e0       	ldi	r24, 0x01	; 1
    619e:	0e 94 b7 11 	call	0x236e	; 0x236e <dma_set_callback>
    61a2:	d7 01       	movw	r26, r14
    61a4:	11 96       	adiw	r26, 0x01	; 1
    61a6:	8c 91       	ld	r24, X
    61a8:	11 97       	sbiw	r26, 0x01	; 1
    61aa:	80 7f       	andi	r24, 0xF0	; 240
    61ac:	8a 60       	ori	r24, 0x0A	; 10

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    61ae:	11 96       	adiw	r26, 0x01	; 1
    61b0:	8c 93       	st	X, r24
	cpu_irq_disable();
    61b2:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    61b4:	89 87       	std	Y+9, r24	; 0x09
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_PRIMODE_gm) | primode;
    61b6:	f8 94       	cli
    61b8:	99 85       	ldd	r25, Y+9	; 0x09
    61ba:	e0 e0       	ldi	r30, 0x00	; 0
    61bc:	f1 e0       	ldi	r31, 0x01	; 1
    61be:	80 81       	ld	r24, Z
    61c0:	8c 7f       	andi	r24, 0xFC	; 252
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    61c2:	82 60       	ori	r24, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    61c4:	80 83       	st	Z, r24
    61c6:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_disable();
    61c8:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    61ca:	88 87       	std	Y+8, r24	; 0x08
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_DBUFMODE_gm) | dbufmode;
    61cc:	f8 94       	cli
    61ce:	98 85       	ldd	r25, Y+8	; 0x08
    61d0:	80 81       	ld	r24, Z
    61d2:	83 7f       	andi	r24, 0xF3	; 243
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    61d4:	84 60       	ori	r24, 0x04	; 4
	dma_channel_set_interrupt_level(&dmach_dma1_conf, DMA_INT_LVL_MED);

	dma_set_priority_mode(DMA_PRIMODE_CH01RR23_gc);
	dma_set_double_buffer_mode(DMA_DBUFMODE_CH01_gc);

	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_A, &dmach_dma0_conf);
    61d6:	80 83       	st	Z, r24
    61d8:	9f bf       	out	0x3f, r25	; 63
    61da:	b6 01       	movw	r22, r12
    61dc:	80 e0       	ldi	r24, 0x00	; 0
	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_B, &dmach_dma1_conf);
    61de:	0e 94 60 12 	call	0x24c0	; 0x24c0 <dma_channel_write_config>
    61e2:	b7 01       	movw	r22, r14
    61e4:	81 e0       	ldi	r24, 0x01	; 1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    61e6:	0e 94 60 12 	call	0x24c0	; 0x24c0 <dma_channel_write_config>
	cpu_irq_disable();
    61ea:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    61ec:	8b 87       	std	Y+11, r24	; 0x0b
	/* IRQ disabled section */
	{
		irqflags_t flags = cpu_irq_save();

		/* Prepare DMA blocks */
		isr_calc_next_frame(&dac_io_dac0_buf[0][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    61ee:	f8 94       	cli
    61f0:	fb 84       	ldd	r15, Y+11	; 0x0b
    61f2:	0d ed       	ldi	r16, 0xDD	; 221
    61f4:	14 e2       	ldi	r17, 0x24	; 36
    61f6:	26 e0       	ldi	r18, 0x06	; 6
    61f8:	30 e2       	ldi	r19, 0x20	; 32
    61fa:	45 ee       	ldi	r20, 0xE5	; 229
    61fc:	54 e2       	ldi	r21, 0x24	; 36
    61fe:	61 ee       	ldi	r22, 0xE1	; 225
    6200:	74 e2       	ldi	r23, 0x24	; 36
    6202:	8f ef       	ldi	r24, 0xFF	; 255

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6204:	94 e2       	ldi	r25, 0x24	; 36
    6206:	27 dd       	rcall	.-1458   	; 0x5c56 <isr_calc_next_frame>
	cpu_irq_disable();
    6208:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    620a:	8a 87       	std	Y+10, r24	; 0x0a
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    620c:	f8 94       	cli
    620e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6210:	e0 e1       	ldi	r30, 0x10	; 16
    6212:	f1 e0       	ldi	r31, 0x01	; 1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
    6214:	80 81       	ld	r24, Z
    6216:	80 68       	ori	r24, 0x80	; 128
    6218:	80 83       	st	Z, r24
    621a:	9f bf       	out	0x3f, r25	; 63
    621c:	ff be       	out	0x3f, r15	; 63
    621e:	80 e0       	ldi	r24, 0x00	; 0
    6220:	92 e0       	ldi	r25, 0x02	; 2
    6222:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <adc_enable>
    6226:	8a d6       	rcall	.+3348   	; 0x6f3c <udc_start>
    6228:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <stdio_usb_init>
    622c:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <stdio_usb_enable>
    6230:	69 e6       	ldi	r22, 0x69	; 105
    6232:	79 e8       	ldi	r23, 0x89	; 137
    6234:	89 e0       	ldi	r24, 0x09	; 9
    6236:	90 e0       	ldi	r25, 0x00	; 0
    6238:	fc da       	rcall	.-2568   	; 0x5832 <__portable_avr_delay_cycles>
    623a:	1f 92       	push	r1
    623c:	bf 92       	push	r11
    623e:	82 e8       	ldi	r24, 0x82	; 130
    6240:	92 e2       	ldi	r25, 0x22	; 34
    6242:	9f 93       	push	r25
    6244:	8f 93       	push	r24
    6246:	0e 94 b5 3d 	call	0x7b6a	; 0x7b6a <printf>
    624a:	87 e8       	ldi	r24, 0x87	; 135
    624c:	92 e2       	ldi	r25, 0x22	; 34
    624e:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <puts>
    6252:	88 ea       	ldi	r24, 0xA8	; 168
    6254:	92 e2       	ldi	r25, 0x22	; 34
    6256:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <puts>
    625a:	89 ec       	ldi	r24, 0xC9	; 201
    625c:	92 e2       	ldi	r25, 0x22	; 34
    625e:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <puts>
    6262:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <twi_start>
    6266:	50 92 6c 26 	sts	0x266C, r5	; 0x80266c <runmode>
    626a:	0f 90       	pop	r0
    626c:	0f 90       	pop	r0
    626e:	0f 90       	pop	r0
    6270:	0f 90       	pop	r0
    6272:	0f 2e       	mov	r0, r31
    6274:	f8 e4       	ldi	r31, 0x48	; 72
    6276:	4f 2e       	mov	r4, r31
    6278:	51 2c       	mov	r5, r1
    627a:	f0 2d       	mov	r31, r0
    627c:	0e 94 ae 12 	call	0x255c	; 0x255c <rtc_get_time>
    6280:	6b 01       	movw	r12, r22
    6282:	7c 01       	movw	r14, r24
    6284:	89 dc       	rcall	.-1774   	; 0x5b98 <task_dac>
    6286:	80 91 d1 24 	lds	r24, 0x24D1	; 0x8024d1 <adc_last.7419>
    628a:	90 91 d2 24 	lds	r25, 0x24D2	; 0x8024d2 <adc_last.7419+0x1>
    628e:	a0 91 d3 24 	lds	r26, 0x24D3	; 0x8024d3 <adc_last.7419+0x2>
    6292:	b0 91 d4 24 	lds	r27, 0x24D4	; 0x8024d4 <adc_last.7419+0x3>
    6296:	a7 01       	movw	r20, r14
    6298:	96 01       	movw	r18, r12
    629a:	28 1b       	sub	r18, r24
    629c:	39 0b       	sbc	r19, r25
    629e:	4a 0b       	sbc	r20, r26
    62a0:	5b 0b       	sbc	r21, r27
    62a2:	da 01       	movw	r26, r20
    62a4:	c9 01       	movw	r24, r18
    62a6:	81 15       	cp	r24, r1
    62a8:	92 40       	sbci	r25, 0x02	; 2
    62aa:	a1 05       	cpc	r26, r1
    62ac:	b1 05       	cpc	r27, r1
    62ae:	08 f4       	brcc	.+2      	; 0x62b2 <__stack+0x2b3>
    62b0:	ce c0       	rjmp	.+412    	; 0x644e <__stack+0x44f>
    62b2:	c0 92 d1 24 	sts	0x24D1, r12	; 0x8024d1 <adc_last.7419>
    62b6:	d0 92 d2 24 	sts	0x24D2, r13	; 0x8024d2 <adc_last.7419+0x1>
    62ba:	e0 92 d3 24 	sts	0x24D3, r14	; 0x8024d3 <adc_last.7419+0x2>
    62be:	f0 92 d4 24 	sts	0x24D4, r15	; 0x8024d4 <adc_last.7419+0x3>
    62c2:	8f b7       	in	r24, 0x3f	; 63
    62c4:	89 83       	std	Y+1, r24	; 0x01
    62c6:	f8 94       	cli
    62c8:	89 81       	ldd	r24, Y+1	; 0x01
    62ca:	40 91 4b 26 	lds	r20, 0x264B	; 0x80264b <g_adc_vctcxo_cur>
    62ce:	48 8b       	std	Y+16, r20	; 0x10
    62d0:	50 91 4c 26 	lds	r21, 0x264C	; 0x80264c <g_adc_vctcxo_cur+0x1>
    62d4:	59 8b       	std	Y+17, r21	; 0x11
    62d6:	90 91 4d 26 	lds	r25, 0x264D	; 0x80264d <g_adc_vctcxo_cur+0x2>
    62da:	9a 8b       	std	Y+18, r25	; 0x12
    62dc:	a0 91 4e 26 	lds	r26, 0x264E	; 0x80264e <g_adc_vctcxo_cur+0x3>
    62e0:	ab 8b       	std	Y+19, r26	; 0x13
    62e2:	b0 91 41 26 	lds	r27, 0x2641	; 0x802641 <g_adc_5v0_cur>
    62e6:	bc 8b       	std	Y+20, r27	; 0x14
    62e8:	e0 91 42 26 	lds	r30, 0x2642	; 0x802642 <g_adc_5v0_cur+0x1>
    62ec:	ed 8b       	std	Y+21, r30	; 0x15
    62ee:	f0 91 43 26 	lds	r31, 0x2643	; 0x802643 <g_adc_5v0_cur+0x2>
    62f2:	fe 8b       	std	Y+22, r31	; 0x16
    62f4:	20 91 44 26 	lds	r18, 0x2644	; 0x802644 <g_adc_5v0_cur+0x3>
    62f8:	2f 8b       	std	Y+23, r18	; 0x17
    62fa:	30 91 37 26 	lds	r19, 0x2637	; 0x802637 <g_adc_vbat_cur>
    62fe:	38 8f       	std	Y+24, r19	; 0x18
    6300:	40 91 38 26 	lds	r20, 0x2638	; 0x802638 <g_adc_vbat_cur+0x1>
    6304:	49 8f       	std	Y+25, r20	; 0x19
    6306:	50 91 39 26 	lds	r21, 0x2639	; 0x802639 <g_adc_vbat_cur+0x2>
    630a:	5a 8f       	std	Y+26, r21	; 0x1a
    630c:	90 91 3a 26 	lds	r25, 0x263A	; 0x80263a <g_adc_vbat_cur+0x3>
    6310:	9b 8f       	std	Y+27, r25	; 0x1b
    6312:	a0 91 2d 26 	lds	r26, 0x262D	; 0x80262d <g_adc_io_adc4_cur>
    6316:	ac 8f       	std	Y+28, r26	; 0x1c
    6318:	b0 91 2e 26 	lds	r27, 0x262E	; 0x80262e <g_adc_io_adc4_cur+0x1>
    631c:	bd 8f       	std	Y+29, r27	; 0x1d
    631e:	e0 91 2f 26 	lds	r30, 0x262F	; 0x80262f <g_adc_io_adc4_cur+0x2>
    6322:	ee 8f       	std	Y+30, r30	; 0x1e
    6324:	f0 91 30 26 	lds	r31, 0x2630	; 0x802630 <g_adc_io_adc4_cur+0x3>
    6328:	ff 8f       	std	Y+31, r31	; 0x1f
    632a:	20 91 23 26 	lds	r18, 0x2623	; 0x802623 <g_adc_io_adc5_cur>
    632e:	28 a3       	std	Y+32, r18	; 0x20
    6330:	30 91 24 26 	lds	r19, 0x2624	; 0x802624 <g_adc_io_adc5_cur+0x1>
    6334:	39 a3       	std	Y+33, r19	; 0x21
    6336:	20 90 25 26 	lds	r2, 0x2625	; 0x802625 <g_adc_io_adc5_cur+0x2>
    633a:	30 90 26 26 	lds	r3, 0x2626	; 0x802626 <g_adc_io_adc5_cur+0x3>
    633e:	60 90 19 26 	lds	r6, 0x2619	; 0x802619 <g_adc_temp_cur>
    6342:	10 91 1a 26 	lds	r17, 0x261A	; 0x80261a <g_adc_temp_cur+0x1>
    6346:	00 91 1b 26 	lds	r16, 0x261B	; 0x80261b <g_adc_temp_cur+0x2>
    634a:	70 90 1c 26 	lds	r7, 0x261C	; 0x80261c <g_adc_temp_cur+0x3>
    634e:	8f bf       	out	0x3f, r24	; 63
    6350:	66 2d       	mov	r22, r6
    6352:	71 2f       	mov	r23, r17
    6354:	80 2f       	mov	r24, r16
    6356:	97 2d       	mov	r25, r7
    6358:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <__floatsisf>
    635c:	20 e0       	ldi	r18, 0x00	; 0
    635e:	30 e0       	ldi	r19, 0x00	; 0
    6360:	40 e0       	ldi	r20, 0x00	; 0
    6362:	59 e3       	ldi	r21, 0x39	; 57
    6364:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <__mulsf3>
    6368:	20 e0       	ldi	r18, 0x00	; 0
    636a:	30 e0       	ldi	r19, 0x00	; 0
    636c:	40 e4       	ldi	r20, 0x40	; 64
    636e:	50 e4       	ldi	r21, 0x40	; 64
    6370:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <__mulsf3>
    6374:	24 e7       	ldi	r18, 0x74	; 116
    6376:	3d ea       	ldi	r19, 0xAD	; 173
    6378:	46 ee       	ldi	r20, 0xE6	; 230
    637a:	5a e3       	ldi	r21, 0x3A	; 58
    637c:	0e 94 dd 3b 	call	0x77ba	; 0x77ba <__divsf3>
    6380:	23 e3       	ldi	r18, 0x33	; 51
    6382:	33 e9       	ldi	r19, 0x93	; 147
    6384:	48 e8       	ldi	r20, 0x88	; 136
    6386:	53 e4       	ldi	r21, 0x43	; 67
    6388:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__subsf3>
    638c:	6c 87       	std	Y+12, r22	; 0x0c
    638e:	7d 87       	std	Y+13, r23	; 0x0d
    6390:	8e 87       	std	Y+14, r24	; 0x0e
    6392:	9f 87       	std	Y+15, r25	; 0x0f
    6394:	0e 94 45 3c 	call	0x788a	; 0x788a <__fixunssfsi>
    6398:	4b 01       	movw	r8, r22
    639a:	5c 01       	movw	r10, r24
    639c:	80 e0       	ldi	r24, 0x00	; 0
    639e:	90 e0       	ldi	r25, 0x00	; 0
    63a0:	0e 94 71 3c 	call	0x78e2	; 0x78e2 <__floatunsisf>
    63a4:	9b 01       	movw	r18, r22
    63a6:	ac 01       	movw	r20, r24
    63a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    63aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    63ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    63ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    63b0:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__subsf3>
    63b4:	20 e0       	ldi	r18, 0x00	; 0
    63b6:	30 e0       	ldi	r19, 0x00	; 0
    63b8:	40 e2       	ldi	r20, 0x20	; 32
    63ba:	51 e4       	ldi	r21, 0x41	; 65
    63bc:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <__mulsf3>
    63c0:	0e 94 45 3c 	call	0x788a	; 0x788a <__fixunssfsi>
    63c4:	1f 92       	push	r1
    63c6:	6f 93       	push	r22
    63c8:	9f 92       	push	r9
    63ca:	8f 92       	push	r8
    63cc:	7f 92       	push	r7
    63ce:	0f 93       	push	r16
    63d0:	1f 93       	push	r17
    63d2:	6f 92       	push	r6
    63d4:	3f 92       	push	r3
    63d6:	2f 92       	push	r2
    63d8:	49 a1       	ldd	r20, Y+33	; 0x21
    63da:	4f 93       	push	r20
    63dc:	58 a1       	ldd	r21, Y+32	; 0x20
    63de:	5f 93       	push	r21
    63e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    63e2:	8f 93       	push	r24
    63e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    63e6:	9f 93       	push	r25
    63e8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    63ea:	af 93       	push	r26
    63ec:	bc 8d       	ldd	r27, Y+28	; 0x1c
    63ee:	bf 93       	push	r27
    63f0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    63f2:	ef 93       	push	r30
    63f4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    63f6:	ff 93       	push	r31
    63f8:	29 8d       	ldd	r18, Y+25	; 0x19
    63fa:	2f 93       	push	r18
    63fc:	38 8d       	ldd	r19, Y+24	; 0x18
    63fe:	3f 93       	push	r19
    6400:	4f 89       	ldd	r20, Y+23	; 0x17
    6402:	4f 93       	push	r20
    6404:	5e 89       	ldd	r21, Y+22	; 0x16
    6406:	5f 93       	push	r21
    6408:	8d 89       	ldd	r24, Y+21	; 0x15
    640a:	8f 93       	push	r24
    640c:	9c 89       	ldd	r25, Y+20	; 0x14
    640e:	9f 93       	push	r25
    6410:	ab 89       	ldd	r26, Y+19	; 0x13
    6412:	af 93       	push	r26
    6414:	ba 89       	ldd	r27, Y+18	; 0x12
    6416:	bf 93       	push	r27
    6418:	e9 89       	ldd	r30, Y+17	; 0x11
    641a:	ef 93       	push	r30
    641c:	f8 89       	ldd	r31, Y+16	; 0x10
    641e:	ff 93       	push	r31
    6420:	d7 01       	movw	r26, r14
    6422:	c6 01       	movw	r24, r12
    6424:	07 2e       	mov	r0, r23
    6426:	7a e0       	ldi	r23, 0x0A	; 10
    6428:	b6 95       	lsr	r27
    642a:	a7 95       	ror	r26
    642c:	97 95       	ror	r25
    642e:	87 95       	ror	r24
    6430:	7a 95       	dec	r23
    6432:	d1 f7       	brne	.-12     	; 0x6428 <__stack+0x429>
    6434:	70 2d       	mov	r23, r0
    6436:	bf 93       	push	r27
    6438:	af 93       	push	r26
    643a:	9f 93       	push	r25
    643c:	8f 93       	push	r24
    643e:	2c ee       	ldi	r18, 0xEC	; 236
    6440:	32 e2       	ldi	r19, 0x22	; 34
    6442:	3f 93       	push	r19
    6444:	2f 93       	push	r18
    6446:	0e 94 b5 3d 	call	0x7b6a	; 0x7b6a <printf>
    644a:	cd bf       	out	0x3d, r28	; 61
    644c:	de bf       	out	0x3e, r29	; 62
    644e:	c7 01       	movw	r24, r14
    6450:	b6 01       	movw	r22, r12
    6452:	0e 94 82 15 	call	0x2b04	; 0x2b04 <task_twi_onboard>
    6456:	c7 01       	movw	r24, r14
    6458:	b6 01       	movw	r22, r12
    645a:	0e 94 83 15 	call	0x2b06	; 0x2b06 <task_twi_lcd>
    645e:	f8 94       	cli
    6460:	a3 ec       	ldi	r26, 0xC3	; 195
    6462:	b7 e2       	ldi	r27, 0x27	; 39
    6464:	8c 91       	ld	r24, X
    6466:	81 11       	cpse	r24, r1
    6468:	09 c0       	rjmp	.+18     	; 0x647c <__stack+0x47d>
    646a:	a4 ec       	ldi	r26, 0xC4	; 196
    646c:	b7 e2       	ldi	r27, 0x27	; 39
    646e:	e0 e0       	ldi	r30, 0x00	; 0
    6470:	ef 5f       	subi	r30, 0xFF	; 255
    6472:	8d 91       	ld	r24, X+
    6474:	88 23       	and	r24, r24
    6476:	e1 f3       	breq	.-8      	; 0x6470 <__stack+0x471>
    6478:	e1 11       	cpse	r30, r1
    647a:	02 c0       	rjmp	.+4      	; 0x6480 <__stack+0x481>
    647c:	78 94       	sei
    647e:	12 c0       	rjmp	.+36     	; 0x64a4 <__stack+0x4a5>
    6480:	d2 01       	movw	r26, r4
    6482:	8c 91       	ld	r24, X
    6484:	f0 e0       	ldi	r31, 0x00	; 0
    6486:	ef 5c       	subi	r30, 0xCF	; 207
    6488:	ff 4d       	sbci	r31, 0xDF	; 223
    648a:	81 7f       	andi	r24, 0xF1	; 241
    648c:	90 81       	ld	r25, Z
    648e:	89 2b       	or	r24, r25
    6490:	8c 93       	st	X, r24
    6492:	8c 91       	ld	r24, X
    6494:	81 60       	ori	r24, 0x01	; 1
    6496:	8c 93       	st	X, r24
    6498:	78 94       	sei
    649a:	88 95       	sleep
    649c:	f2 01       	movw	r30, r4
    649e:	80 81       	ld	r24, Z
    64a0:	8e 7f       	andi	r24, 0xFE	; 254
    64a2:	80 83       	st	Z, r24
    64a4:	80 91 6c 26 	lds	r24, 0x266C	; 0x80266c <runmode>
    64a8:	81 11       	cpse	r24, r1
    64aa:	e8 ce       	rjmp	.-560    	; 0x627c <__stack+0x27d>
    64ac:	f8 94       	cli
    64ae:	f8 94       	cli
    64b0:	80 91 c3 27 	lds	r24, 0x27C3	; 0x8027c3 <sleepmgr_locks>
    64b4:	81 11       	cpse	r24, r1
    64b6:	09 c0       	rjmp	.+18     	; 0x64ca <__stack+0x4cb>
    64b8:	a4 ec       	ldi	r26, 0xC4	; 196
    64ba:	b7 e2       	ldi	r27, 0x27	; 39
    64bc:	e0 e0       	ldi	r30, 0x00	; 0
    64be:	ef 5f       	subi	r30, 0xFF	; 255
    64c0:	8d 91       	ld	r24, X+
    64c2:	88 23       	and	r24, r24
    64c4:	e1 f3       	breq	.-8      	; 0x64be <__stack+0x4bf>
    64c6:	e1 11       	cpse	r30, r1
    64c8:	02 c0       	rjmp	.+4      	; 0x64ce <__stack+0x4cf>
    64ca:	78 94       	sei
    64cc:	13 c0       	rjmp	.+38     	; 0x64f4 <__stack+0x4f5>
    64ce:	a8 e4       	ldi	r26, 0x48	; 72
    64d0:	b0 e0       	ldi	r27, 0x00	; 0
    64d2:	8c 91       	ld	r24, X
    64d4:	f0 e0       	ldi	r31, 0x00	; 0
    64d6:	ef 5c       	subi	r30, 0xCF	; 207
    64d8:	ff 4d       	sbci	r31, 0xDF	; 223
    64da:	98 2f       	mov	r25, r24
    64dc:	91 7f       	andi	r25, 0xF1	; 241
    64de:	80 81       	ld	r24, Z
    64e0:	89 2b       	or	r24, r25
    64e2:	8c 93       	st	X, r24
    64e4:	8c 91       	ld	r24, X
    64e6:	81 60       	ori	r24, 0x01	; 1
    64e8:	8c 93       	st	X, r24
    64ea:	78 94       	sei
    64ec:	88 95       	sleep
    64ee:	8c 91       	ld	r24, X
    64f0:	8e 7f       	andi	r24, 0xFE	; 254
    64f2:	8c 93       	st	X, r24
    64f4:	80 e0       	ldi	r24, 0x00	; 0
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	a1 96       	adiw	r28, 0x21	; 33
    64fa:	cd bf       	out	0x3d, r28	; 61
    64fc:	de bf       	out	0x3e, r29	; 62
    64fe:	df 91       	pop	r29
    6500:	cf 91       	pop	r28
    6502:	1f 91       	pop	r17
    6504:	0f 91       	pop	r16
    6506:	ff 90       	pop	r15
    6508:	ef 90       	pop	r14
    650a:	df 90       	pop	r13
    650c:	cf 90       	pop	r12
    650e:	bf 90       	pop	r11
    6510:	af 90       	pop	r10
    6512:	9f 90       	pop	r9
    6514:	8f 90       	pop	r8
    6516:	7f 90       	pop	r7
    6518:	6f 90       	pop	r6
    651a:	5f 90       	pop	r5
    651c:	4f 90       	pop	r4
    651e:	3f 90       	pop	r3
    6520:	2f 90       	pop	r2
    6522:	08 95       	ret

00006524 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    6524:	cf 93       	push	r28
    6526:	df 93       	push	r29
    6528:	cd b7       	in	r28, 0x3d	; 61
    652a:	de b7       	in	r29, 0x3e	; 62
    652c:	28 97       	sbiw	r28, 0x08	; 8
    652e:	cd bf       	out	0x3d, r28	; 61
    6530:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    6532:	8f ef       	ldi	r24, 0xFF	; 255
    6534:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    6538:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    653c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    6540:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    6544:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    6548:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    654c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    6550:	61 e0       	ldi	r22, 0x01	; 1
    6552:	81 e4       	ldi	r24, 0x41	; 65
    6554:	90 e0       	ldi	r25, 0x00	; 0
    6556:	0e 94 25 3b 	call	0x764a	; 0x764a <ccp_write_io>
    655a:	6c e1       	ldi	r22, 0x1C	; 28
    655c:	70 e0       	ldi	r23, 0x00	; 0
    655e:	82 e0       	ldi	r24, 0x02	; 2
    6560:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    6564:	8a 83       	std	Y+2, r24	; 0x02
    6566:	6d e1       	ldi	r22, 0x1D	; 29
    6568:	70 e0       	ldi	r23, 0x00	; 0
    656a:	82 e0       	ldi	r24, 0x02	; 2
    656c:	0e 94 1b 3b 	call	0x7636	; 0x7636 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    6570:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    6572:	89 81       	ldd	r24, Y+1	; 0x01
    6574:	9a 81       	ldd	r25, Y+2	; 0x02
    6576:	01 96       	adiw	r24, 0x01	; 1
    6578:	21 f4       	brne	.+8      	; 0x6582 <sysclk_init+0x5e>
		cal = 0x2340;
    657a:	80 e4       	ldi	r24, 0x40	; 64
    657c:	93 e2       	ldi	r25, 0x23	; 35
    657e:	89 83       	std	Y+1, r24	; 0x01
    6580:	9a 83       	std	Y+2, r25	; 0x02
    6582:	89 81       	ldd	r24, Y+1	; 0x01
    6584:	9a 81       	ldd	r25, Y+2	; 0x02
    6586:	8b 83       	std	Y+3, r24	; 0x03
    6588:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    658a:	e0 e6       	ldi	r30, 0x60	; 96
    658c:	f0 e0       	ldi	r31, 0x00	; 0
    658e:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    6590:	8c 81       	ldd	r24, Y+4	; 0x04
    6592:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    6594:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    6598:	84 fd       	sbrc	r24, 4
    659a:	21 c0       	rjmp	.+66     	; 0x65de <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    659c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    65a0:	83 fd       	sbrc	r24, 3
    65a2:	0e c0       	rjmp	.+28     	; 0x65c0 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    65a4:	e0 e5       	ldi	r30, 0x50	; 80
    65a6:	f0 e0       	ldi	r31, 0x00	; 0
    65a8:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    65aa:	8f b7       	in	r24, 0x3f	; 63
    65ac:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    65ae:	f8 94       	cli
	return flags;
    65b0:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    65b2:	80 81       	ld	r24, Z
    65b4:	88 60       	ori	r24, 0x08	; 8
    65b6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    65b8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    65ba:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    65bc:	83 ff       	sbrs	r24, 3
    65be:	fd cf       	rjmp	.-6      	; 0x65ba <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    65c0:	8f b7       	in	r24, 0x3f	; 63
    65c2:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    65c4:	f8 94       	cli
	return flags;
    65c6:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    65c8:	e0 e5       	ldi	r30, 0x50	; 80
    65ca:	f0 e0       	ldi	r31, 0x00	; 0
    65cc:	83 ec       	ldi	r24, 0xC3	; 195
    65ce:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    65d0:	80 81       	ld	r24, Z
    65d2:	80 61       	ori	r24, 0x10	; 16
    65d4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    65d6:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    65d8:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    65da:	84 ff       	sbrs	r24, 4
    65dc:	fd cf       	rjmp	.-6      	; 0x65d8 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    65de:	64 e0       	ldi	r22, 0x04	; 4
    65e0:	80 e4       	ldi	r24, 0x40	; 64
    65e2:	90 e0       	ldi	r25, 0x00	; 0
    65e4:	0e 94 25 3b 	call	0x764a	; 0x764a <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    65e8:	8f b7       	in	r24, 0x3f	; 63
    65ea:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    65ec:	f8 94       	cli
	return flags;
    65ee:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    65f0:	e0 e5       	ldi	r30, 0x50	; 80
    65f2:	f0 e0       	ldi	r31, 0x00	; 0
    65f4:	80 81       	ld	r24, Z
    65f6:	8e 7f       	andi	r24, 0xFE	; 254
    65f8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    65fa:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    65fc:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    65fe:	8f b7       	in	r24, 0x3f	; 63
    6600:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    6602:	f8 94       	cli
	return flags;
    6604:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    6606:	80 81       	ld	r24, Z
    6608:	88 60       	ori	r24, 0x08	; 8
    660a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    660c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    660e:	81 81       	ldd	r24, Z+1	; 0x01
    6610:	83 ff       	sbrs	r24, 3
    6612:	fd cf       	rjmp	.-6      	; 0x660e <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    6614:	8b e0       	ldi	r24, 0x0B	; 11
    6616:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    661a:	28 96       	adiw	r28, 0x08	; 8
    661c:	cd bf       	out	0x3d, r28	; 61
    661e:	de bf       	out	0x3e, r29	; 62
    6620:	df 91       	pop	r29
    6622:	cf 91       	pop	r28
    6624:	08 95       	ret

00006626 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    6626:	cf 93       	push	r28
    6628:	df 93       	push	r29
    662a:	1f 92       	push	r1
    662c:	cd b7       	in	r28, 0x3d	; 61
    662e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6630:	9f b7       	in	r25, 0x3f	; 63
    6632:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    6634:	f8 94       	cli
	return flags;
    6636:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    6638:	e8 2f       	mov	r30, r24
    663a:	f0 e0       	ldi	r31, 0x00	; 0
    663c:	e0 59       	subi	r30, 0x90	; 144
    663e:	ff 4f       	sbci	r31, 0xFF	; 255
    6640:	60 95       	com	r22
    6642:	80 81       	ld	r24, Z
    6644:	68 23       	and	r22, r24
    6646:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6648:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    664a:	0f 90       	pop	r0
    664c:	df 91       	pop	r29
    664e:	cf 91       	pop	r28
    6650:	08 95       	ret

00006652 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    6652:	cf 93       	push	r28
    6654:	df 93       	push	r29
    6656:	1f 92       	push	r1
    6658:	cd b7       	in	r28, 0x3d	; 61
    665a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    665c:	9f b7       	in	r25, 0x3f	; 63
    665e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    6660:	f8 94       	cli
	return flags;
    6662:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    6664:	e8 2f       	mov	r30, r24
    6666:	f0 e0       	ldi	r31, 0x00	; 0
    6668:	e0 59       	subi	r30, 0x90	; 144
    666a:	ff 4f       	sbci	r31, 0xFF	; 255
    666c:	80 81       	ld	r24, Z
    666e:	68 2b       	or	r22, r24
    6670:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6672:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    6674:	0f 90       	pop	r0
    6676:	df 91       	pop	r29
    6678:	cf 91       	pop	r28
    667a:	08 95       	ret

0000667c <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    667c:	cf 93       	push	r28
    667e:	df 93       	push	r29
    6680:	1f 92       	push	r1
    6682:	1f 92       	push	r1
    6684:	cd b7       	in	r28, 0x3d	; 61
    6686:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    6688:	86 30       	cpi	r24, 0x06	; 6
    668a:	11 f0       	breq	.+4      	; 0x6690 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    668c:	60 e0       	ldi	r22, 0x00	; 0
    668e:	01 c0       	rjmp	.+2      	; 0x6692 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    6690:	68 e1       	ldi	r22, 0x18	; 24
    6692:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    6696:	81 fd       	sbrc	r24, 1
    6698:	2a c0       	rjmp	.+84     	; 0x66ee <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    669a:	8f b7       	in	r24, 0x3f	; 63
    669c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    669e:	f8 94       	cli
	return flags;
    66a0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    66a2:	e0 e5       	ldi	r30, 0x50	; 80
    66a4:	f0 e0       	ldi	r31, 0x00	; 0
    66a6:	80 81       	ld	r24, Z
    66a8:	82 60       	ori	r24, 0x02	; 2
    66aa:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    66ac:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    66ae:	81 81       	ldd	r24, Z+1	; 0x01
    66b0:	81 ff       	sbrs	r24, 1
    66b2:	fd cf       	rjmp	.-6      	; 0x66ae <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    66b4:	8f b7       	in	r24, 0x3f	; 63
    66b6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    66b8:	f8 94       	cli
	return flags;
    66ba:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    66bc:	a0 e5       	ldi	r26, 0x50	; 80
    66be:	b0 e0       	ldi	r27, 0x00	; 0
    66c0:	16 96       	adiw	r26, 0x06	; 6
    66c2:	8c 91       	ld	r24, X
    66c4:	16 97       	sbiw	r26, 0x06	; 6
    66c6:	89 7f       	andi	r24, 0xF9	; 249
    66c8:	16 96       	adiw	r26, 0x06	; 6
    66ca:	8c 93       	st	X, r24
    66cc:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    66ce:	e0 e6       	ldi	r30, 0x60	; 96
    66d0:	f0 e0       	ldi	r31, 0x00	; 0
    66d2:	80 e8       	ldi	r24, 0x80	; 128
    66d4:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    66d6:	8b eb       	ldi	r24, 0xBB	; 187
    66d8:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    66da:	16 96       	adiw	r26, 0x06	; 6
    66dc:	8c 91       	ld	r24, X
    66de:	16 97       	sbiw	r26, 0x06	; 6
    66e0:	84 60       	ori	r24, 0x04	; 4
    66e2:	16 96       	adiw	r26, 0x06	; 6
    66e4:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    66e6:	80 81       	ld	r24, Z
    66e8:	81 60       	ori	r24, 0x01	; 1
    66ea:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    66ec:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    66ee:	63 60       	ori	r22, 0x03	; 3
    66f0:	84 e4       	ldi	r24, 0x44	; 68
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	aa d7       	rcall	.+3924   	; 0x764a <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    66f6:	60 e4       	ldi	r22, 0x40	; 64
    66f8:	80 e0       	ldi	r24, 0x00	; 0
    66fa:	95 df       	rcall	.-214    	; 0x6626 <sysclk_enable_module>
}
    66fc:	0f 90       	pop	r0
    66fe:	0f 90       	pop	r0
    6700:	df 91       	pop	r29
    6702:	cf 91       	pop	r28
    6704:	08 95       	ret

00006706 <udi_cdc_comm_disable>:
	return flags;
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
    6706:	80 91 82 27 	lds	r24, 0x2782	; 0x802782 <udi_cdc_nb_comm_enabled>
    670a:	81 50       	subi	r24, 0x01	; 1
    670c:	80 93 82 27 	sts	0x2782, r24	; 0x802782 <udi_cdc_nb_comm_enabled>
    6710:	08 95       	ret

00006712 <udi_cdc_data_setup>:
    6712:	80 e0       	ldi	r24, 0x00	; 0
    6714:	08 95       	ret

00006716 <udi_cdc_getsetting>:
    6716:	80 e0       	ldi	r24, 0x00	; 0
    6718:	08 95       	ret

0000671a <udi_cdc_line_coding_received>:
    671a:	60 e9       	ldi	r22, 0x90	; 144
    671c:	77 e2       	ldi	r23, 0x27	; 39
    671e:	80 e0       	ldi	r24, 0x00	; 0
    6720:	44 cb       	rjmp	.-2424   	; 0x5daa <usb_callback_config>
    6722:	08 95       	ret

00006724 <udi_cdc_comm_enable>:
    6724:	10 92 82 27 	sts	0x2782, r1	; 0x802782 <udi_cdc_nb_comm_enabled>
    6728:	10 92 8e 27 	sts	0x278E, r1	; 0x80278e <udi_cdc_state>
    672c:	10 92 8f 27 	sts	0x278F, r1	; 0x80278f <udi_cdc_state+0x1>
    6730:	e4 e8       	ldi	r30, 0x84	; 132
    6732:	f7 e2       	ldi	r31, 0x27	; 39
    6734:	81 ea       	ldi	r24, 0xA1	; 161
    6736:	80 83       	st	Z, r24
    6738:	80 e2       	ldi	r24, 0x20	; 32
    673a:	81 83       	std	Z+1, r24	; 0x01
    673c:	12 82       	std	Z+2, r1	; 0x02
    673e:	13 82       	std	Z+3, r1	; 0x03
    6740:	14 82       	std	Z+4, r1	; 0x04
    6742:	15 82       	std	Z+5, r1	; 0x05
    6744:	82 e0       	ldi	r24, 0x02	; 2
    6746:	90 e0       	ldi	r25, 0x00	; 0
    6748:	86 83       	std	Z+6, r24	; 0x06
    674a:	97 83       	std	Z+7, r25	; 0x07
    674c:	10 86       	std	Z+8, r1	; 0x08
    674e:	11 86       	std	Z+9, r1	; 0x09
    6750:	e0 e9       	ldi	r30, 0x90	; 144
    6752:	f7 e2       	ldi	r31, 0x27	; 39
    6754:	80 e0       	ldi	r24, 0x00	; 0
    6756:	92 ec       	ldi	r25, 0xC2	; 194
    6758:	a1 e0       	ldi	r26, 0x01	; 1
    675a:	b0 e0       	ldi	r27, 0x00	; 0
    675c:	80 83       	st	Z, r24
    675e:	91 83       	std	Z+1, r25	; 0x01
    6760:	a2 83       	std	Z+2, r26	; 0x02
    6762:	b3 83       	std	Z+3, r27	; 0x03
    6764:	14 82       	std	Z+4, r1	; 0x04
    6766:	15 82       	std	Z+5, r1	; 0x05
    6768:	88 e0       	ldi	r24, 0x08	; 8
    676a:	86 83       	std	Z+6, r24	; 0x06
    676c:	bf 01       	movw	r22, r30
    676e:	80 e0       	ldi	r24, 0x00	; 0
    6770:	1c db       	rcall	.-2504   	; 0x5daa <usb_callback_config>
    6772:	14 db       	rcall	.-2520   	; 0x5d9c <usb_callback_cdc_enable>
    6774:	88 23       	and	r24, r24
    6776:	29 f0       	breq	.+10     	; 0x6782 <udi_cdc_comm_enable+0x5e>
    6778:	90 91 82 27 	lds	r25, 0x2782	; 0x802782 <udi_cdc_nb_comm_enabled>
    677c:	9f 5f       	subi	r25, 0xFF	; 255
    677e:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <udi_cdc_nb_comm_enabled>
    6782:	08 95       	ret

00006784 <udi_cdc_tx_send>:
    6784:	ff 92       	push	r15
    6786:	0f 93       	push	r16
    6788:	1f 93       	push	r17
    678a:	cf 93       	push	r28
    678c:	df 93       	push	r29
    678e:	1f 92       	push	r1
    6790:	cd b7       	in	r28, 0x3d	; 61
    6792:	de b7       	in	r29, 0x3e	; 62
    6794:	80 91 70 26 	lds	r24, 0x2670	; 0x802670 <udi_cdc_tx_trans_ongoing>
    6798:	81 11       	cpse	r24, r1
    679a:	9f c0       	rjmp	.+318    	; 0x68da <udi_cdc_tx_send+0x156>
    679c:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <udd_is_high_speed>
    67a0:	88 23       	and	r24, r24
    67a2:	51 f0       	breq	.+20     	; 0x67b8 <udi_cdc_tx_send+0x34>
    67a4:	00 91 71 26 	lds	r16, 0x2671	; 0x802671 <udi_cdc_tx_sof_num>
    67a8:	10 91 72 26 	lds	r17, 0x2672	; 0x802672 <udi_cdc_tx_sof_num+0x1>
    67ac:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <udd_get_micro_frame_number>
    67b0:	08 17       	cp	r16, r24
    67b2:	19 07       	cpc	r17, r25
    67b4:	59 f4       	brne	.+22     	; 0x67cc <udi_cdc_tx_send+0x48>
    67b6:	91 c0       	rjmp	.+290    	; 0x68da <udi_cdc_tx_send+0x156>
    67b8:	00 91 71 26 	lds	r16, 0x2671	; 0x802671 <udi_cdc_tx_sof_num>
    67bc:	10 91 72 26 	lds	r17, 0x2672	; 0x802672 <udi_cdc_tx_sof_num+0x1>
    67c0:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <udd_get_frame_number>
    67c4:	08 17       	cp	r16, r24
    67c6:	19 07       	cpc	r17, r25
    67c8:	09 f4       	brne	.+2      	; 0x67cc <udi_cdc_tx_send+0x48>
    67ca:	87 c0       	rjmp	.+270    	; 0x68da <udi_cdc_tx_send+0x156>
    67cc:	8f b7       	in	r24, 0x3f	; 63
    67ce:	89 83       	std	Y+1, r24	; 0x01
    67d0:	f8 94       	cli
    67d2:	19 81       	ldd	r17, Y+1	; 0x01
    67d4:	00 91 73 26 	lds	r16, 0x2673	; 0x802673 <udi_cdc_tx_buf_sel>
    67d8:	e0 2f       	mov	r30, r16
    67da:	f0 e0       	ldi	r31, 0x00	; 0
    67dc:	ee 0f       	add	r30, r30
    67de:	ff 1f       	adc	r31, r31
    67e0:	ec 58       	subi	r30, 0x8C	; 140
    67e2:	f9 4d       	sbci	r31, 0xD9	; 217
    67e4:	80 81       	ld	r24, Z
    67e6:	91 81       	ldd	r25, Z+1	; 0x01
    67e8:	89 2b       	or	r24, r25
    67ea:	09 f5       	brne	.+66     	; 0x682e <udi_cdc_tx_send+0xaa>
    67ec:	80 91 6d 26 	lds	r24, 0x266D	; 0x80266d <sof_zlp_counter.5059>
    67f0:	90 91 6e 26 	lds	r25, 0x266E	; 0x80266e <sof_zlp_counter.5059+0x1>
    67f4:	01 96       	adiw	r24, 0x01	; 1
    67f6:	80 93 6d 26 	sts	0x266D, r24	; 0x80266d <sof_zlp_counter.5059>
    67fa:	90 93 6e 26 	sts	0x266E, r25	; 0x80266e <sof_zlp_counter.5059+0x1>
    67fe:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <udd_is_high_speed>
    6802:	81 11       	cpse	r24, r1
    6804:	07 c0       	rjmp	.+14     	; 0x6814 <udi_cdc_tx_send+0x90>
    6806:	80 91 6d 26 	lds	r24, 0x266D	; 0x80266d <sof_zlp_counter.5059>
    680a:	90 91 6e 26 	lds	r25, 0x266E	; 0x80266e <sof_zlp_counter.5059+0x1>
    680e:	84 36       	cpi	r24, 0x64	; 100
    6810:	91 05       	cpc	r25, r1
    6812:	58 f0       	brcs	.+22     	; 0x682a <udi_cdc_tx_send+0xa6>
    6814:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <udd_is_high_speed>
    6818:	88 23       	and	r24, r24
    681a:	49 f0       	breq	.+18     	; 0x682e <udi_cdc_tx_send+0xaa>
    681c:	80 91 6d 26 	lds	r24, 0x266D	; 0x80266d <sof_zlp_counter.5059>
    6820:	90 91 6e 26 	lds	r25, 0x266E	; 0x80266e <sof_zlp_counter.5059+0x1>
    6824:	80 32       	cpi	r24, 0x20	; 32
    6826:	93 40       	sbci	r25, 0x03	; 3
    6828:	10 f4       	brcc	.+4      	; 0x682e <udi_cdc_tx_send+0xaa>
    682a:	1f bf       	out	0x3f, r17	; 63
    682c:	56 c0       	rjmp	.+172    	; 0x68da <udi_cdc_tx_send+0x156>
    682e:	10 92 6d 26 	sts	0x266D, r1	; 0x80266d <sof_zlp_counter.5059>
    6832:	10 92 6e 26 	sts	0x266E, r1	; 0x80266e <sof_zlp_counter.5059+0x1>
    6836:	80 91 6f 26 	lds	r24, 0x266F	; 0x80266f <udi_cdc_tx_both_buf_to_send>
    683a:	81 11       	cpse	r24, r1
    683c:	06 c0       	rjmp	.+12     	; 0x684a <udi_cdc_tx_send+0xc6>
    683e:	81 e0       	ldi	r24, 0x01	; 1
    6840:	01 11       	cpse	r16, r1
    6842:	80 e0       	ldi	r24, 0x00	; 0
    6844:	80 93 73 26 	sts	0x2673, r24	; 0x802673 <udi_cdc_tx_buf_sel>
    6848:	04 c0       	rjmp	.+8      	; 0x6852 <udi_cdc_tx_send+0xce>
    684a:	81 e0       	ldi	r24, 0x01	; 1
    684c:	01 11       	cpse	r16, r1
    684e:	80 e0       	ldi	r24, 0x00	; 0
    6850:	08 2f       	mov	r16, r24
    6852:	81 e0       	ldi	r24, 0x01	; 1
    6854:	80 93 70 26 	sts	0x2670, r24	; 0x802670 <udi_cdc_tx_trans_ongoing>
    6858:	1f bf       	out	0x3f, r17	; 63
    685a:	10 e0       	ldi	r17, 0x00	; 0
    685c:	f8 01       	movw	r30, r16
    685e:	ee 0f       	add	r30, r30
    6860:	ff 1f       	adc	r31, r31
    6862:	ec 58       	subi	r30, 0x8C	; 140
    6864:	f9 4d       	sbci	r31, 0xD9	; 217
    6866:	80 81       	ld	r24, Z
    6868:	91 81       	ldd	r25, Z+1	; 0x01
    686a:	ff 24       	eor	r15, r15
    686c:	f3 94       	inc	r15
    686e:	80 34       	cpi	r24, 0x40	; 64
    6870:	91 05       	cpc	r25, r1
    6872:	09 f4       	brne	.+2      	; 0x6876 <udi_cdc_tx_send+0xf2>
    6874:	f1 2c       	mov	r15, r1
    6876:	80 34       	cpi	r24, 0x40	; 64
    6878:	91 05       	cpc	r25, r1
    687a:	91 f0       	breq	.+36     	; 0x68a0 <udi_cdc_tx_send+0x11c>
    687c:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <udd_is_high_speed>
    6880:	88 23       	and	r24, r24
    6882:	39 f0       	breq	.+14     	; 0x6892 <udi_cdc_tx_send+0x10e>
    6884:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <udd_get_micro_frame_number>
    6888:	80 93 71 26 	sts	0x2671, r24	; 0x802671 <udi_cdc_tx_sof_num>
    688c:	90 93 72 26 	sts	0x2672, r25	; 0x802672 <udi_cdc_tx_sof_num+0x1>
    6890:	0b c0       	rjmp	.+22     	; 0x68a8 <udi_cdc_tx_send+0x124>
    6892:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <udd_get_frame_number>
    6896:	80 93 71 26 	sts	0x2671, r24	; 0x802671 <udi_cdc_tx_sof_num>
    689a:	90 93 72 26 	sts	0x2672, r25	; 0x802672 <udi_cdc_tx_sof_num+0x1>
    689e:	04 c0       	rjmp	.+8      	; 0x68a8 <udi_cdc_tx_send+0x124>
    68a0:	10 92 71 26 	sts	0x2671, r1	; 0x802671 <udi_cdc_tx_sof_num>
    68a4:	10 92 72 26 	sts	0x2672, r1	; 0x802672 <udi_cdc_tx_sof_num+0x1>
    68a8:	f8 01       	movw	r30, r16
    68aa:	ee 0f       	add	r30, r30
    68ac:	ff 1f       	adc	r31, r31
    68ae:	ec 58       	subi	r30, 0x8C	; 140
    68b0:	f9 4d       	sbci	r31, 0xD9	; 217
    68b2:	20 81       	ld	r18, Z
    68b4:	31 81       	ldd	r19, Z+1	; 0x01
    68b6:	a8 01       	movw	r20, r16
    68b8:	00 24       	eor	r0, r0
    68ba:	56 95       	lsr	r21
    68bc:	47 95       	ror	r20
    68be:	07 94       	ror	r0
    68c0:	56 95       	lsr	r21
    68c2:	47 95       	ror	r20
    68c4:	07 94       	ror	r0
    68c6:	54 2f       	mov	r21, r20
    68c8:	40 2d       	mov	r20, r0
    68ca:	48 58       	subi	r20, 0x88	; 136
    68cc:	59 4d       	sbci	r21, 0xD9	; 217
    68ce:	07 e7       	ldi	r16, 0x77	; 119
    68d0:	14 e3       	ldi	r17, 0x34	; 52
    68d2:	6f 2d       	mov	r22, r15
    68d4:	81 e8       	ldi	r24, 0x81	; 129
    68d6:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <udd_ep_run>
    68da:	0f 90       	pop	r0
    68dc:	df 91       	pop	r29
    68de:	cf 91       	pop	r28
    68e0:	1f 91       	pop	r17
    68e2:	0f 91       	pop	r16
    68e4:	ff 90       	pop	r15
    68e6:	08 95       	ret

000068e8 <udi_cdc_data_sof_notify>:
    68e8:	80 e0       	ldi	r24, 0x00	; 0
    68ea:	4c cf       	rjmp	.-360    	; 0x6784 <udi_cdc_tx_send>
    68ec:	08 95       	ret

000068ee <udi_cdc_data_sent>:
    68ee:	81 11       	cpse	r24, r1
    68f0:	19 c0       	rjmp	.+50     	; 0x6924 <udi_cdc_data_sent+0x36>
    68f2:	20 91 73 26 	lds	r18, 0x2673	; 0x802673 <udi_cdc_tx_buf_sel>
    68f6:	81 e0       	ldi	r24, 0x01	; 1
    68f8:	90 e0       	ldi	r25, 0x00	; 0
    68fa:	22 23       	and	r18, r18
    68fc:	11 f0       	breq	.+4      	; 0x6902 <udi_cdc_data_sent+0x14>
    68fe:	80 e0       	ldi	r24, 0x00	; 0
    6900:	90 e0       	ldi	r25, 0x00	; 0
    6902:	88 0f       	add	r24, r24
    6904:	99 1f       	adc	r25, r25
    6906:	fc 01       	movw	r30, r24
    6908:	ec 58       	subi	r30, 0x8C	; 140
    690a:	f9 4d       	sbci	r31, 0xD9	; 217
    690c:	10 82       	st	Z, r1
    690e:	11 82       	std	Z+1, r1	; 0x01
    6910:	10 92 6f 26 	sts	0x266F, r1	; 0x80266f <udi_cdc_tx_both_buf_to_send>
    6914:	10 92 70 26 	sts	0x2670, r1	; 0x802670 <udi_cdc_tx_trans_ongoing>
    6918:	67 2b       	or	r22, r23
    691a:	11 f0       	breq	.+4      	; 0x6920 <udi_cdc_data_sent+0x32>
    691c:	80 e0       	ldi	r24, 0x00	; 0
    691e:	49 da       	rcall	.-2926   	; 0x5db2 <usb_callback_tx_empty_notify>
    6920:	80 e0       	ldi	r24, 0x00	; 0
    6922:	30 cf       	rjmp	.-416    	; 0x6784 <udi_cdc_tx_send>
    6924:	08 95       	ret

00006926 <udi_cdc_data_disable>:
    6926:	80 91 81 27 	lds	r24, 0x2781	; 0x802781 <udi_cdc_nb_data_enabled>
    692a:	81 50       	subi	r24, 0x01	; 1
    692c:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <udi_cdc_nb_data_enabled>
    6930:	80 91 81 27 	lds	r24, 0x2781	; 0x802781 <udi_cdc_nb_data_enabled>
    6934:	37 da       	rcall	.-2962   	; 0x5da4 <usb_callback_cdc_disable>
    6936:	10 92 80 27 	sts	0x2780, r1	; 0x802780 <udi_cdc_data_running>
    693a:	08 95       	ret

0000693c <udi_cdc_comm_setup>:
    693c:	cf 93       	push	r28
    693e:	df 93       	push	r29
    6940:	80 91 b3 27 	lds	r24, 0x27B3	; 0x8027b3 <udd_g_ctrlreq>
    6944:	88 23       	and	r24, r24
    6946:	e4 f4       	brge	.+56     	; 0x6980 <udi_cdc_comm_setup+0x44>
    6948:	80 76       	andi	r24, 0x60	; 96
    694a:	80 32       	cpi	r24, 0x20	; 32
    694c:	09 f0       	breq	.+2      	; 0x6950 <udi_cdc_comm_setup+0x14>
    694e:	47 c0       	rjmp	.+142    	; 0x69de <udi_cdc_comm_setup+0xa2>
    6950:	80 91 b4 27 	lds	r24, 0x27B4	; 0x8027b4 <udd_g_ctrlreq+0x1>
    6954:	81 32       	cpi	r24, 0x21	; 33
    6956:	09 f0       	breq	.+2      	; 0x695a <udi_cdc_comm_setup+0x1e>
    6958:	44 c0       	rjmp	.+136    	; 0x69e2 <udi_cdc_comm_setup+0xa6>
    695a:	80 91 b9 27 	lds	r24, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    695e:	90 91 ba 27 	lds	r25, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    6962:	07 97       	sbiw	r24, 0x07	; 7
    6964:	09 f0       	breq	.+2      	; 0x6968 <udi_cdc_comm_setup+0x2c>
    6966:	3f c0       	rjmp	.+126    	; 0x69e6 <udi_cdc_comm_setup+0xaa>
    6968:	e3 eb       	ldi	r30, 0xB3	; 179
    696a:	f7 e2       	ldi	r31, 0x27	; 39
    696c:	80 e9       	ldi	r24, 0x90	; 144
    696e:	97 e2       	ldi	r25, 0x27	; 39
    6970:	80 87       	std	Z+8, r24	; 0x08
    6972:	91 87       	std	Z+9, r25	; 0x09
    6974:	87 e0       	ldi	r24, 0x07	; 7
    6976:	90 e0       	ldi	r25, 0x00	; 0
    6978:	82 87       	std	Z+10, r24	; 0x0a
    697a:	93 87       	std	Z+11, r25	; 0x0b
    697c:	81 e0       	ldi	r24, 0x01	; 1
    697e:	3a c0       	rjmp	.+116    	; 0x69f4 <udi_cdc_comm_setup+0xb8>
    6980:	80 76       	andi	r24, 0x60	; 96
    6982:	80 32       	cpi	r24, 0x20	; 32
    6984:	91 f5       	brne	.+100    	; 0x69ea <udi_cdc_comm_setup+0xae>
    6986:	80 91 b4 27 	lds	r24, 0x27B4	; 0x8027b4 <udd_g_ctrlreq+0x1>
    698a:	80 32       	cpi	r24, 0x20	; 32
    698c:	19 f0       	breq	.+6      	; 0x6994 <udi_cdc_comm_setup+0x58>
    698e:	82 32       	cpi	r24, 0x22	; 34
    6990:	b9 f0       	breq	.+46     	; 0x69c0 <udi_cdc_comm_setup+0x84>
    6992:	2d c0       	rjmp	.+90     	; 0x69ee <udi_cdc_comm_setup+0xb2>
    6994:	80 91 b9 27 	lds	r24, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    6998:	90 91 ba 27 	lds	r25, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    699c:	07 97       	sbiw	r24, 0x07	; 7
    699e:	49 f5       	brne	.+82     	; 0x69f2 <udi_cdc_comm_setup+0xb6>
    69a0:	e3 eb       	ldi	r30, 0xB3	; 179
    69a2:	f7 e2       	ldi	r31, 0x27	; 39
    69a4:	8d e8       	ldi	r24, 0x8D	; 141
    69a6:	93 e3       	ldi	r25, 0x33	; 51
    69a8:	84 87       	std	Z+12, r24	; 0x0c
    69aa:	95 87       	std	Z+13, r25	; 0x0d
    69ac:	80 e9       	ldi	r24, 0x90	; 144
    69ae:	97 e2       	ldi	r25, 0x27	; 39
    69b0:	80 87       	std	Z+8, r24	; 0x08
    69b2:	91 87       	std	Z+9, r25	; 0x09
    69b4:	87 e0       	ldi	r24, 0x07	; 7
    69b6:	90 e0       	ldi	r25, 0x00	; 0
    69b8:	82 87       	std	Z+10, r24	; 0x0a
    69ba:	93 87       	std	Z+11, r25	; 0x0b
    69bc:	81 e0       	ldi	r24, 0x01	; 1
    69be:	1a c0       	rjmp	.+52     	; 0x69f4 <udi_cdc_comm_setup+0xb8>
    69c0:	c3 eb       	ldi	r28, 0xB3	; 179
    69c2:	d7 e2       	ldi	r29, 0x27	; 39
    69c4:	6a 81       	ldd	r22, Y+2	; 0x02
    69c6:	61 70       	andi	r22, 0x01	; 1
    69c8:	80 e0       	ldi	r24, 0x00	; 0
    69ca:	f0 d9       	rcall	.-3104   	; 0x5dac <usb_callback_cdc_set_dtr>
    69cc:	6a 81       	ldd	r22, Y+2	; 0x02
    69ce:	7b 81       	ldd	r23, Y+3	; 0x03
    69d0:	76 95       	lsr	r23
    69d2:	67 95       	ror	r22
    69d4:	61 70       	andi	r22, 0x01	; 1
    69d6:	80 e0       	ldi	r24, 0x00	; 0
    69d8:	ea d9       	rcall	.-3116   	; 0x5dae <usb_callback_cdc_set_rts>
    69da:	81 e0       	ldi	r24, 0x01	; 1
    69dc:	0b c0       	rjmp	.+22     	; 0x69f4 <udi_cdc_comm_setup+0xb8>
    69de:	80 e0       	ldi	r24, 0x00	; 0
    69e0:	09 c0       	rjmp	.+18     	; 0x69f4 <udi_cdc_comm_setup+0xb8>
    69e2:	80 e0       	ldi	r24, 0x00	; 0
    69e4:	07 c0       	rjmp	.+14     	; 0x69f4 <udi_cdc_comm_setup+0xb8>
    69e6:	80 e0       	ldi	r24, 0x00	; 0
    69e8:	05 c0       	rjmp	.+10     	; 0x69f4 <udi_cdc_comm_setup+0xb8>
    69ea:	80 e0       	ldi	r24, 0x00	; 0
    69ec:	03 c0       	rjmp	.+6      	; 0x69f4 <udi_cdc_comm_setup+0xb8>
    69ee:	80 e0       	ldi	r24, 0x00	; 0
    69f0:	01 c0       	rjmp	.+2      	; 0x69f4 <udi_cdc_comm_setup+0xb8>
    69f2:	80 e0       	ldi	r24, 0x00	; 0
    69f4:	df 91       	pop	r29
    69f6:	cf 91       	pop	r28
    69f8:	08 95       	ret

000069fa <udi_cdc_multi_get_nb_received_data>:
    69fa:	cf 93       	push	r28
    69fc:	df 93       	push	r29
    69fe:	1f 92       	push	r1
    6a00:	cd b7       	in	r28, 0x3d	; 61
    6a02:	de b7       	in	r29, 0x3e	; 62
    6a04:	8f b7       	in	r24, 0x3f	; 63
    6a06:	89 83       	std	Y+1, r24	; 0x01
    6a08:	f8 94       	cli
    6a0a:	49 81       	ldd	r20, Y+1	; 0x01
    6a0c:	20 91 f9 26 	lds	r18, 0x26F9	; 0x8026f9 <udi_cdc_rx_pos>
    6a10:	30 91 fa 26 	lds	r19, 0x26FA	; 0x8026fa <udi_cdc_rx_pos+0x1>
    6a14:	e0 91 fb 26 	lds	r30, 0x26FB	; 0x8026fb <udi_cdc_rx_buf_sel>
    6a18:	f0 e0       	ldi	r31, 0x00	; 0
    6a1a:	ee 0f       	add	r30, r30
    6a1c:	ff 1f       	adc	r31, r31
    6a1e:	e4 50       	subi	r30, 0x04	; 4
    6a20:	f9 4d       	sbci	r31, 0xD9	; 217
    6a22:	80 81       	ld	r24, Z
    6a24:	91 81       	ldd	r25, Z+1	; 0x01
    6a26:	4f bf       	out	0x3f, r20	; 63
    6a28:	82 1b       	sub	r24, r18
    6a2a:	93 0b       	sbc	r25, r19
    6a2c:	0f 90       	pop	r0
    6a2e:	df 91       	pop	r29
    6a30:	cf 91       	pop	r28
    6a32:	08 95       	ret

00006a34 <udi_cdc_multi_is_rx_ready>:
    6a34:	e2 df       	rcall	.-60     	; 0x69fa <udi_cdc_multi_get_nb_received_data>
    6a36:	21 e0       	ldi	r18, 0x01	; 1
    6a38:	89 2b       	or	r24, r25
    6a3a:	09 f4       	brne	.+2      	; 0x6a3e <udi_cdc_multi_is_rx_ready+0xa>
    6a3c:	20 e0       	ldi	r18, 0x00	; 0
    6a3e:	82 2f       	mov	r24, r18
    6a40:	08 95       	ret

00006a42 <udi_cdc_rx_start>:
    6a42:	0f 93       	push	r16
    6a44:	1f 93       	push	r17
    6a46:	cf 93       	push	r28
    6a48:	df 93       	push	r29
    6a4a:	1f 92       	push	r1
    6a4c:	cd b7       	in	r28, 0x3d	; 61
    6a4e:	de b7       	in	r29, 0x3e	; 62
    6a50:	8f b7       	in	r24, 0x3f	; 63
    6a52:	89 83       	std	Y+1, r24	; 0x01
    6a54:	f8 94       	cli
    6a56:	99 81       	ldd	r25, Y+1	; 0x01
    6a58:	20 91 fb 26 	lds	r18, 0x26FB	; 0x8026fb <udi_cdc_rx_buf_sel>
    6a5c:	80 91 f8 26 	lds	r24, 0x26F8	; 0x8026f8 <udi_cdc_rx_trans_ongoing>
    6a60:	81 11       	cpse	r24, r1
    6a62:	10 c0       	rjmp	.+32     	; 0x6a84 <udi_cdc_rx_start+0x42>
    6a64:	60 91 f9 26 	lds	r22, 0x26F9	; 0x8026f9 <udi_cdc_rx_pos>
    6a68:	70 91 fa 26 	lds	r23, 0x26FA	; 0x8026fa <udi_cdc_rx_pos+0x1>
    6a6c:	02 2f       	mov	r16, r18
    6a6e:	10 e0       	ldi	r17, 0x00	; 0
    6a70:	f8 01       	movw	r30, r16
    6a72:	ee 0f       	add	r30, r30
    6a74:	ff 1f       	adc	r31, r31
    6a76:	e4 50       	subi	r30, 0x04	; 4
    6a78:	f9 4d       	sbci	r31, 0xD9	; 217
    6a7a:	40 81       	ld	r20, Z
    6a7c:	51 81       	ldd	r21, Z+1	; 0x01
    6a7e:	64 17       	cp	r22, r20
    6a80:	75 07       	cpc	r23, r21
    6a82:	18 f4       	brcc	.+6      	; 0x6a8a <udi_cdc_rx_start+0x48>
    6a84:	9f bf       	out	0x3f, r25	; 63
    6a86:	80 e0       	ldi	r24, 0x00	; 0
    6a88:	27 c0       	rjmp	.+78     	; 0x6ad8 <udi_cdc_rx_start+0x96>
    6a8a:	10 92 f9 26 	sts	0x26F9, r1	; 0x8026f9 <udi_cdc_rx_pos>
    6a8e:	10 92 fa 26 	sts	0x26FA, r1	; 0x8026fa <udi_cdc_rx_pos+0x1>
    6a92:	81 e0       	ldi	r24, 0x01	; 1
    6a94:	21 11       	cpse	r18, r1
    6a96:	80 e0       	ldi	r24, 0x00	; 0
    6a98:	80 93 fb 26 	sts	0x26FB, r24	; 0x8026fb <udi_cdc_rx_buf_sel>
    6a9c:	81 e0       	ldi	r24, 0x01	; 1
    6a9e:	80 93 f8 26 	sts	0x26F8, r24	; 0x8026f8 <udi_cdc_rx_trans_ongoing>
    6aa2:	9f bf       	out	0x3f, r25	; 63
    6aa4:	80 e0       	ldi	r24, 0x00	; 0
    6aa6:	c6 df       	rcall	.-116    	; 0x6a34 <udi_cdc_multi_is_rx_ready>
    6aa8:	88 23       	and	r24, r24
    6aaa:	11 f0       	breq	.+4      	; 0x6ab0 <udi_cdc_rx_start+0x6e>
    6aac:	80 e0       	ldi	r24, 0x00	; 0
    6aae:	80 d9       	rcall	.-3328   	; 0x5db0 <usb_callback_rx_notify>
    6ab0:	a8 01       	movw	r20, r16
    6ab2:	00 24       	eor	r0, r0
    6ab4:	56 95       	lsr	r21
    6ab6:	47 95       	ror	r20
    6ab8:	07 94       	ror	r0
    6aba:	56 95       	lsr	r21
    6abc:	47 95       	ror	r20
    6abe:	07 94       	ror	r0
    6ac0:	54 2f       	mov	r21, r20
    6ac2:	40 2d       	mov	r20, r0
    6ac4:	40 50       	subi	r20, 0x00	; 0
    6ac6:	59 4d       	sbci	r21, 0xD9	; 217
    6ac8:	04 ea       	ldi	r16, 0xA4	; 164
    6aca:	15 e3       	ldi	r17, 0x35	; 53
    6acc:	20 e4       	ldi	r18, 0x40	; 64
    6ace:	30 e0       	ldi	r19, 0x00	; 0
    6ad0:	61 e0       	ldi	r22, 0x01	; 1
    6ad2:	82 e0       	ldi	r24, 0x02	; 2
    6ad4:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <udd_ep_run>
    6ad8:	0f 90       	pop	r0
    6ada:	df 91       	pop	r29
    6adc:	cf 91       	pop	r28
    6ade:	1f 91       	pop	r17
    6ae0:	0f 91       	pop	r16
    6ae2:	08 95       	ret

00006ae4 <udi_cdc_data_enable>:
    6ae4:	10 92 81 27 	sts	0x2781, r1	; 0x802781 <udi_cdc_nb_data_enabled>
    6ae8:	10 92 70 26 	sts	0x2670, r1	; 0x802670 <udi_cdc_tx_trans_ongoing>
    6aec:	10 92 6f 26 	sts	0x266F, r1	; 0x80266f <udi_cdc_tx_both_buf_to_send>
    6af0:	10 92 73 26 	sts	0x2673, r1	; 0x802673 <udi_cdc_tx_buf_sel>
    6af4:	e4 e7       	ldi	r30, 0x74	; 116
    6af6:	f6 e2       	ldi	r31, 0x26	; 38
    6af8:	10 82       	st	Z, r1
    6afa:	11 82       	std	Z+1, r1	; 0x01
    6afc:	12 82       	std	Z+2, r1	; 0x02
    6afe:	13 82       	std	Z+3, r1	; 0x03
    6b00:	10 92 71 26 	sts	0x2671, r1	; 0x802671 <udi_cdc_tx_sof_num>
    6b04:	10 92 72 26 	sts	0x2672, r1	; 0x802672 <udi_cdc_tx_sof_num+0x1>
    6b08:	80 e0       	ldi	r24, 0x00	; 0
    6b0a:	3c de       	rcall	.-904    	; 0x6784 <udi_cdc_tx_send>
    6b0c:	10 92 f8 26 	sts	0x26F8, r1	; 0x8026f8 <udi_cdc_rx_trans_ongoing>
    6b10:	10 92 fb 26 	sts	0x26FB, r1	; 0x8026fb <udi_cdc_rx_buf_sel>
    6b14:	ec ef       	ldi	r30, 0xFC	; 252
    6b16:	f6 e2       	ldi	r31, 0x26	; 38
    6b18:	10 82       	st	Z, r1
    6b1a:	11 82       	std	Z+1, r1	; 0x01
    6b1c:	12 82       	std	Z+2, r1	; 0x02
    6b1e:	13 82       	std	Z+3, r1	; 0x03
    6b20:	10 92 f9 26 	sts	0x26F9, r1	; 0x8026f9 <udi_cdc_rx_pos>
    6b24:	10 92 fa 26 	sts	0x26FA, r1	; 0x8026fa <udi_cdc_rx_pos+0x1>
    6b28:	80 e0       	ldi	r24, 0x00	; 0
    6b2a:	8b df       	rcall	.-234    	; 0x6a42 <udi_cdc_rx_start>
    6b2c:	88 23       	and	r24, r24
    6b2e:	59 f0       	breq	.+22     	; 0x6b46 <udi_cdc_data_enable+0x62>
    6b30:	90 91 81 27 	lds	r25, 0x2781	; 0x802781 <udi_cdc_nb_data_enabled>
    6b34:	9f 5f       	subi	r25, 0xFF	; 255
    6b36:	90 93 81 27 	sts	0x2781, r25	; 0x802781 <udi_cdc_nb_data_enabled>
    6b3a:	90 91 81 27 	lds	r25, 0x2781	; 0x802781 <udi_cdc_nb_data_enabled>
    6b3e:	91 30       	cpi	r25, 0x01	; 1
    6b40:	11 f4       	brne	.+4      	; 0x6b46 <udi_cdc_data_enable+0x62>
    6b42:	90 93 80 27 	sts	0x2780, r25	; 0x802780 <udi_cdc_data_running>
    6b46:	08 95       	ret

00006b48 <udi_cdc_data_received>:
    6b48:	0f 93       	push	r16
    6b4a:	1f 93       	push	r17
    6b4c:	81 11       	cpse	r24, r1
    6b4e:	29 c0       	rjmp	.+82     	; 0x6ba2 <udi_cdc_data_received+0x5a>
    6b50:	80 91 fb 26 	lds	r24, 0x26FB	; 0x8026fb <udi_cdc_rx_buf_sel>
    6b54:	e1 e0       	ldi	r30, 0x01	; 1
    6b56:	81 11       	cpse	r24, r1
    6b58:	e0 e0       	ldi	r30, 0x00	; 0
    6b5a:	84 2f       	mov	r24, r20
    6b5c:	61 15       	cp	r22, r1
    6b5e:	71 05       	cpc	r23, r1
    6b60:	a9 f4       	brne	.+42     	; 0x6b8c <udi_cdc_data_received+0x44>
    6b62:	4e 2f       	mov	r20, r30
    6b64:	50 e0       	ldi	r21, 0x00	; 0
    6b66:	00 24       	eor	r0, r0
    6b68:	56 95       	lsr	r21
    6b6a:	47 95       	ror	r20
    6b6c:	07 94       	ror	r0
    6b6e:	56 95       	lsr	r21
    6b70:	47 95       	ror	r20
    6b72:	07 94       	ror	r0
    6b74:	54 2f       	mov	r21, r20
    6b76:	40 2d       	mov	r20, r0
    6b78:	40 50       	subi	r20, 0x00	; 0
    6b7a:	59 4d       	sbci	r21, 0xD9	; 217
    6b7c:	04 ea       	ldi	r16, 0xA4	; 164
    6b7e:	15 e3       	ldi	r17, 0x35	; 53
    6b80:	20 e4       	ldi	r18, 0x40	; 64
    6b82:	30 e0       	ldi	r19, 0x00	; 0
    6b84:	61 e0       	ldi	r22, 0x01	; 1
    6b86:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <udd_ep_run>
    6b8a:	0b c0       	rjmp	.+22     	; 0x6ba2 <udi_cdc_data_received+0x5a>
    6b8c:	f0 e0       	ldi	r31, 0x00	; 0
    6b8e:	ee 0f       	add	r30, r30
    6b90:	ff 1f       	adc	r31, r31
    6b92:	e4 50       	subi	r30, 0x04	; 4
    6b94:	f9 4d       	sbci	r31, 0xD9	; 217
    6b96:	60 83       	st	Z, r22
    6b98:	71 83       	std	Z+1, r23	; 0x01
    6b9a:	10 92 f8 26 	sts	0x26F8, r1	; 0x8026f8 <udi_cdc_rx_trans_ongoing>
    6b9e:	80 e0       	ldi	r24, 0x00	; 0
    6ba0:	50 df       	rcall	.-352    	; 0x6a42 <udi_cdc_rx_start>
    6ba2:	1f 91       	pop	r17
    6ba4:	0f 91       	pop	r16
    6ba6:	08 95       	ret

00006ba8 <udi_cdc_multi_getc>:
    6ba8:	ef 92       	push	r14
    6baa:	ff 92       	push	r15
    6bac:	1f 93       	push	r17
    6bae:	cf 93       	push	r28
    6bb0:	df 93       	push	r29
    6bb2:	1f 92       	push	r1
    6bb4:	cd b7       	in	r28, 0x3d	; 61
    6bb6:	de b7       	in	r29, 0x3e	; 62
    6bb8:	11 e0       	ldi	r17, 0x01	; 1
    6bba:	80 91 96 27 	lds	r24, 0x2796	; 0x802796 <udi_cdc_line_coding+0x6>
    6bbe:	89 30       	cpi	r24, 0x09	; 9
    6bc0:	09 f0       	breq	.+2      	; 0x6bc4 <udi_cdc_multi_getc+0x1c>
    6bc2:	10 e0       	ldi	r17, 0x00	; 0
    6bc4:	40 e0       	ldi	r20, 0x00	; 0
    6bc6:	50 e0       	ldi	r21, 0x00	; 0
    6bc8:	8f b7       	in	r24, 0x3f	; 63
    6bca:	89 83       	std	Y+1, r24	; 0x01
    6bcc:	f8 94       	cli
    6bce:	a9 81       	ldd	r26, Y+1	; 0x01
    6bd0:	20 91 f9 26 	lds	r18, 0x26F9	; 0x8026f9 <udi_cdc_rx_pos>
    6bd4:	30 91 fa 26 	lds	r19, 0x26FA	; 0x8026fa <udi_cdc_rx_pos+0x1>
    6bd8:	80 91 fb 26 	lds	r24, 0x26FB	; 0x8026fb <udi_cdc_rx_buf_sel>
    6bdc:	90 e0       	ldi	r25, 0x00	; 0
    6bde:	fc 01       	movw	r30, r24
    6be0:	ee 0f       	add	r30, r30
    6be2:	ff 1f       	adc	r31, r31
    6be4:	e4 50       	subi	r30, 0x04	; 4
    6be6:	f9 4d       	sbci	r31, 0xD9	; 217
    6be8:	60 81       	ld	r22, Z
    6bea:	71 81       	ldd	r23, Z+1	; 0x01
    6bec:	af bf       	out	0x3f, r26	; 63
    6bee:	26 17       	cp	r18, r22
    6bf0:	37 07       	cpc	r19, r23
    6bf2:	30 f0       	brcs	.+12     	; 0x6c00 <udi_cdc_multi_getc+0x58>
    6bf4:	80 91 80 27 	lds	r24, 0x2780	; 0x802780 <udi_cdc_data_running>
    6bf8:	81 11       	cpse	r24, r1
    6bfa:	e6 cf       	rjmp	.-52     	; 0x6bc8 <udi_cdc_multi_getc+0x20>
    6bfc:	90 e0       	ldi	r25, 0x00	; 0
    6bfe:	21 c0       	rjmp	.+66     	; 0x6c42 <udi_cdc_multi_getc+0x9a>
    6c00:	fc 01       	movw	r30, r24
    6c02:	00 24       	eor	r0, r0
    6c04:	f6 95       	lsr	r31
    6c06:	e7 95       	ror	r30
    6c08:	07 94       	ror	r0
    6c0a:	f6 95       	lsr	r31
    6c0c:	e7 95       	ror	r30
    6c0e:	07 94       	ror	r0
    6c10:	fe 2f       	mov	r31, r30
    6c12:	e0 2d       	mov	r30, r0
    6c14:	e0 50       	subi	r30, 0x00	; 0
    6c16:	f9 4d       	sbci	r31, 0xD9	; 217
    6c18:	e2 0f       	add	r30, r18
    6c1a:	f3 1f       	adc	r31, r19
    6c1c:	80 81       	ld	r24, Z
    6c1e:	7a 01       	movw	r14, r20
    6c20:	e8 2a       	or	r14, r24
    6c22:	2f 5f       	subi	r18, 0xFF	; 255
    6c24:	3f 4f       	sbci	r19, 0xFF	; 255
    6c26:	20 93 f9 26 	sts	0x26F9, r18	; 0x8026f9 <udi_cdc_rx_pos>
    6c2a:	30 93 fa 26 	sts	0x26FA, r19	; 0x8026fa <udi_cdc_rx_pos+0x1>
    6c2e:	80 e0       	ldi	r24, 0x00	; 0
    6c30:	08 df       	rcall	.-496    	; 0x6a42 <udi_cdc_rx_start>
    6c32:	11 23       	and	r17, r17
    6c34:	21 f0       	breq	.+8      	; 0x6c3e <udi_cdc_multi_getc+0x96>
    6c36:	5e 2d       	mov	r21, r14
    6c38:	44 27       	eor	r20, r20
    6c3a:	10 e0       	ldi	r17, 0x00	; 0
    6c3c:	c5 cf       	rjmp	.-118    	; 0x6bc8 <udi_cdc_multi_getc+0x20>
    6c3e:	8e 2d       	mov	r24, r14
    6c40:	9f 2d       	mov	r25, r15
    6c42:	0f 90       	pop	r0
    6c44:	df 91       	pop	r29
    6c46:	cf 91       	pop	r28
    6c48:	1f 91       	pop	r17
    6c4a:	ff 90       	pop	r15
    6c4c:	ef 90       	pop	r14
    6c4e:	08 95       	ret

00006c50 <udi_cdc_getc>:
    6c50:	80 e0       	ldi	r24, 0x00	; 0
    6c52:	aa cf       	rjmp	.-172    	; 0x6ba8 <udi_cdc_multi_getc>
    6c54:	08 95       	ret

00006c56 <udi_cdc_multi_get_free_tx_buffer>:
    6c56:	cf 93       	push	r28
    6c58:	df 93       	push	r29
    6c5a:	1f 92       	push	r1
    6c5c:	cd b7       	in	r28, 0x3d	; 61
    6c5e:	de b7       	in	r29, 0x3e	; 62
    6c60:	8f b7       	in	r24, 0x3f	; 63
    6c62:	89 83       	std	Y+1, r24	; 0x01
    6c64:	f8 94       	cli
    6c66:	99 81       	ldd	r25, Y+1	; 0x01
    6c68:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <udi_cdc_tx_buf_sel>
    6c6c:	e8 2f       	mov	r30, r24
    6c6e:	f0 e0       	ldi	r31, 0x00	; 0
    6c70:	ee 0f       	add	r30, r30
    6c72:	ff 1f       	adc	r31, r31
    6c74:	ec 58       	subi	r30, 0x8C	; 140
    6c76:	f9 4d       	sbci	r31, 0xD9	; 217
    6c78:	20 81       	ld	r18, Z
    6c7a:	31 81       	ldd	r19, Z+1	; 0x01
    6c7c:	20 34       	cpi	r18, 0x40	; 64
    6c7e:	31 05       	cpc	r19, r1
    6c80:	89 f4       	brne	.+34     	; 0x6ca4 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    6c82:	40 91 70 26 	lds	r20, 0x2670	; 0x802670 <udi_cdc_tx_trans_ongoing>
    6c86:	41 11       	cpse	r20, r1
    6c88:	0d c0       	rjmp	.+26     	; 0x6ca4 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    6c8a:	40 91 6f 26 	lds	r20, 0x266F	; 0x80266f <udi_cdc_tx_both_buf_to_send>
    6c8e:	41 11       	cpse	r20, r1
    6c90:	09 c0       	rjmp	.+18     	; 0x6ca4 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    6c92:	21 e0       	ldi	r18, 0x01	; 1
    6c94:	20 93 6f 26 	sts	0x266F, r18	; 0x80266f <udi_cdc_tx_both_buf_to_send>
    6c98:	81 11       	cpse	r24, r1
    6c9a:	20 e0       	ldi	r18, 0x00	; 0
    6c9c:	20 93 73 26 	sts	0x2673, r18	; 0x802673 <udi_cdc_tx_buf_sel>
    6ca0:	20 e0       	ldi	r18, 0x00	; 0
    6ca2:	30 e0       	ldi	r19, 0x00	; 0
    6ca4:	9f bf       	out	0x3f, r25	; 63
    6ca6:	80 e4       	ldi	r24, 0x40	; 64
    6ca8:	90 e0       	ldi	r25, 0x00	; 0
    6caa:	82 1b       	sub	r24, r18
    6cac:	93 0b       	sbc	r25, r19
    6cae:	0f 90       	pop	r0
    6cb0:	df 91       	pop	r29
    6cb2:	cf 91       	pop	r28
    6cb4:	08 95       	ret

00006cb6 <udi_cdc_multi_is_tx_ready>:
    6cb6:	cf df       	rcall	.-98     	; 0x6c56 <udi_cdc_multi_get_free_tx_buffer>
    6cb8:	21 e0       	ldi	r18, 0x01	; 1
    6cba:	89 2b       	or	r24, r25
    6cbc:	09 f4       	brne	.+2      	; 0x6cc0 <udi_cdc_multi_is_tx_ready+0xa>
    6cbe:	20 e0       	ldi	r18, 0x00	; 0
    6cc0:	82 2f       	mov	r24, r18
    6cc2:	08 95       	ret

00006cc4 <udi_cdc_multi_putc>:
    6cc4:	ff 92       	push	r15
    6cc6:	0f 93       	push	r16
    6cc8:	1f 93       	push	r17
    6cca:	cf 93       	push	r28
    6ccc:	df 93       	push	r29
    6cce:	1f 92       	push	r1
    6cd0:	cd b7       	in	r28, 0x3d	; 61
    6cd2:	de b7       	in	r29, 0x3e	; 62
    6cd4:	f6 2e       	mov	r15, r22
    6cd6:	17 2f       	mov	r17, r23
    6cd8:	01 e0       	ldi	r16, 0x01	; 1
    6cda:	80 91 96 27 	lds	r24, 0x2796	; 0x802796 <udi_cdc_line_coding+0x6>
    6cde:	89 30       	cpi	r24, 0x09	; 9
    6ce0:	09 f0       	breq	.+2      	; 0x6ce4 <udi_cdc_multi_putc+0x20>
    6ce2:	00 e0       	ldi	r16, 0x00	; 0
    6ce4:	80 e0       	ldi	r24, 0x00	; 0
    6ce6:	e7 df       	rcall	.-50     	; 0x6cb6 <udi_cdc_multi_is_tx_ready>
    6ce8:	81 11       	cpse	r24, r1
    6cea:	07 c0       	rjmp	.+14     	; 0x6cfa <udi_cdc_multi_putc+0x36>
    6cec:	80 91 80 27 	lds	r24, 0x2780	; 0x802780 <udi_cdc_data_running>
    6cf0:	81 11       	cpse	r24, r1
    6cf2:	f8 cf       	rjmp	.-16     	; 0x6ce4 <udi_cdc_multi_putc+0x20>
    6cf4:	80 e0       	ldi	r24, 0x00	; 0
    6cf6:	90 e0       	ldi	r25, 0x00	; 0
    6cf8:	2c c0       	rjmp	.+88     	; 0x6d52 <udi_cdc_multi_putc+0x8e>
    6cfa:	8f b7       	in	r24, 0x3f	; 63
    6cfc:	89 83       	std	Y+1, r24	; 0x01
    6cfe:	f8 94       	cli
    6d00:	49 81       	ldd	r20, Y+1	; 0x01
    6d02:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <udi_cdc_tx_buf_sel>
    6d06:	90 e0       	ldi	r25, 0x00	; 0
    6d08:	fc 01       	movw	r30, r24
    6d0a:	ee 0f       	add	r30, r30
    6d0c:	ff 1f       	adc	r31, r31
    6d0e:	ec 58       	subi	r30, 0x8C	; 140
    6d10:	f9 4d       	sbci	r31, 0xD9	; 217
    6d12:	20 81       	ld	r18, Z
    6d14:	31 81       	ldd	r19, Z+1	; 0x01
    6d16:	b9 01       	movw	r22, r18
    6d18:	6f 5f       	subi	r22, 0xFF	; 255
    6d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    6d1c:	60 83       	st	Z, r22
    6d1e:	71 83       	std	Z+1, r23	; 0x01
    6d20:	00 24       	eor	r0, r0
    6d22:	96 95       	lsr	r25
    6d24:	87 95       	ror	r24
    6d26:	07 94       	ror	r0
    6d28:	96 95       	lsr	r25
    6d2a:	87 95       	ror	r24
    6d2c:	07 94       	ror	r0
    6d2e:	98 2f       	mov	r25, r24
    6d30:	80 2d       	mov	r24, r0
    6d32:	88 58       	subi	r24, 0x88	; 136
    6d34:	99 4d       	sbci	r25, 0xD9	; 217
    6d36:	fc 01       	movw	r30, r24
    6d38:	e2 0f       	add	r30, r18
    6d3a:	f3 1f       	adc	r31, r19
    6d3c:	f0 82       	st	Z, r15
    6d3e:	4f bf       	out	0x3f, r20	; 63
    6d40:	00 23       	and	r16, r16
    6d42:	29 f0       	breq	.+10     	; 0x6d4e <udi_cdc_multi_putc+0x8a>
    6d44:	f1 2e       	mov	r15, r17
    6d46:	11 0f       	add	r17, r17
    6d48:	11 0b       	sbc	r17, r17
    6d4a:	00 e0       	ldi	r16, 0x00	; 0
    6d4c:	cb cf       	rjmp	.-106    	; 0x6ce4 <udi_cdc_multi_putc+0x20>
    6d4e:	81 e0       	ldi	r24, 0x01	; 1
    6d50:	90 e0       	ldi	r25, 0x00	; 0
    6d52:	0f 90       	pop	r0
    6d54:	df 91       	pop	r29
    6d56:	cf 91       	pop	r28
    6d58:	1f 91       	pop	r17
    6d5a:	0f 91       	pop	r16
    6d5c:	ff 90       	pop	r15
    6d5e:	08 95       	ret

00006d60 <udi_cdc_putc>:
    6d60:	bc 01       	movw	r22, r24
    6d62:	80 e0       	ldi	r24, 0x00	; 0
    6d64:	af cf       	rjmp	.-162    	; 0x6cc4 <udi_cdc_multi_putc>
    6d66:	08 95       	ret

00006d68 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    6d68:	e0 91 9c 27 	lds	r30, 0x279C	; 0x80279c <udc_ptr_conf>
    6d6c:	f0 91 9d 27 	lds	r31, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    6d70:	01 90       	ld	r0, Z+
    6d72:	f0 81       	ld	r31, Z
    6d74:	e0 2d       	mov	r30, r0
    6d76:	22 81       	ldd	r18, Z+2	; 0x02
    6d78:	33 81       	ldd	r19, Z+3	; 0x03
    6d7a:	2e 0f       	add	r18, r30
    6d7c:	3f 1f       	adc	r19, r31
    6d7e:	fc 01       	movw	r30, r24
    6d80:	40 81       	ld	r20, Z
    6d82:	e4 0f       	add	r30, r20
    6d84:	f1 1d       	adc	r31, r1
    6d86:	e2 17       	cp	r30, r18
    6d88:	f3 07       	cpc	r31, r19
    6d8a:	a0 f4       	brcc	.+40     	; 0x6db4 <udc_next_desc_in_iface+0x4c>
    6d8c:	81 81       	ldd	r24, Z+1	; 0x01
    6d8e:	84 30       	cpi	r24, 0x04	; 4
    6d90:	a1 f0       	breq	.+40     	; 0x6dba <udc_next_desc_in_iface+0x52>
    6d92:	86 13       	cpse	r24, r22
    6d94:	06 c0       	rjmp	.+12     	; 0x6da2 <udc_next_desc_in_iface+0x3a>
    6d96:	14 c0       	rjmp	.+40     	; 0x6dc0 <udc_next_desc_in_iface+0x58>
    6d98:	81 81       	ldd	r24, Z+1	; 0x01
    6d9a:	84 30       	cpi	r24, 0x04	; 4
    6d9c:	a1 f0       	breq	.+40     	; 0x6dc6 <udc_next_desc_in_iface+0x5e>
    6d9e:	86 17       	cp	r24, r22
    6da0:	a9 f0       	breq	.+42     	; 0x6dcc <udc_next_desc_in_iface+0x64>
    6da2:	80 81       	ld	r24, Z
    6da4:	e8 0f       	add	r30, r24
    6da6:	f1 1d       	adc	r31, r1
    6da8:	e2 17       	cp	r30, r18
    6daa:	f3 07       	cpc	r31, r19
    6dac:	a8 f3       	brcs	.-22     	; 0x6d98 <udc_next_desc_in_iface+0x30>
    6dae:	80 e0       	ldi	r24, 0x00	; 0
    6db0:	90 e0       	ldi	r25, 0x00	; 0
    6db2:	08 95       	ret
    6db4:	80 e0       	ldi	r24, 0x00	; 0
    6db6:	90 e0       	ldi	r25, 0x00	; 0
    6db8:	08 95       	ret
    6dba:	80 e0       	ldi	r24, 0x00	; 0
    6dbc:	90 e0       	ldi	r25, 0x00	; 0
    6dbe:	08 95       	ret
    6dc0:	8e 2f       	mov	r24, r30
    6dc2:	9f 2f       	mov	r25, r31
    6dc4:	08 95       	ret
    6dc6:	80 e0       	ldi	r24, 0x00	; 0
    6dc8:	90 e0       	ldi	r25, 0x00	; 0
    6dca:	08 95       	ret
    6dcc:	8e 2f       	mov	r24, r30
    6dce:	9f 2f       	mov	r25, r31
    6dd0:	08 95       	ret

00006dd2 <udc_valid_address>:
    6dd2:	80 91 b5 27 	lds	r24, 0x27B5	; 0x8027b5 <udd_g_ctrlreq+0x2>
    6dd6:	8f 77       	andi	r24, 0x7F	; 127
    6dd8:	0c 94 9e 26 	jmp	0x4d3c	; 0x4d3c <udd_set_address>
    6ddc:	08 95       	ret

00006dde <udc_update_iface_desc>:
    6dde:	90 91 9e 27 	lds	r25, 0x279E	; 0x80279e <udc_num_configuration>
    6de2:	99 23       	and	r25, r25
    6de4:	81 f1       	breq	.+96     	; 0x6e46 <udc_update_iface_desc+0x68>
    6de6:	e0 91 9c 27 	lds	r30, 0x279C	; 0x80279c <udc_ptr_conf>
    6dea:	f0 91 9d 27 	lds	r31, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    6dee:	01 90       	ld	r0, Z+
    6df0:	f0 81       	ld	r31, Z
    6df2:	e0 2d       	mov	r30, r0
    6df4:	94 81       	ldd	r25, Z+4	; 0x04
    6df6:	89 17       	cp	r24, r25
    6df8:	40 f5       	brcc	.+80     	; 0x6e4a <udc_update_iface_desc+0x6c>
    6dfa:	e0 93 9a 27 	sts	0x279A, r30	; 0x80279a <udc_ptr_iface>
    6dfe:	f0 93 9b 27 	sts	0x279B, r31	; 0x80279b <udc_ptr_iface+0x1>
    6e02:	22 81       	ldd	r18, Z+2	; 0x02
    6e04:	33 81       	ldd	r19, Z+3	; 0x03
    6e06:	2e 0f       	add	r18, r30
    6e08:	3f 1f       	adc	r19, r31
    6e0a:	e2 17       	cp	r30, r18
    6e0c:	f3 07       	cpc	r31, r19
    6e0e:	f8 f4       	brcc	.+62     	; 0x6e4e <udc_update_iface_desc+0x70>
    6e10:	91 81       	ldd	r25, Z+1	; 0x01
    6e12:	94 30       	cpi	r25, 0x04	; 4
    6e14:	61 f4       	brne	.+24     	; 0x6e2e <udc_update_iface_desc+0x50>
    6e16:	92 81       	ldd	r25, Z+2	; 0x02
    6e18:	89 13       	cpse	r24, r25
    6e1a:	09 c0       	rjmp	.+18     	; 0x6e2e <udc_update_iface_desc+0x50>
    6e1c:	93 81       	ldd	r25, Z+3	; 0x03
    6e1e:	96 13       	cpse	r25, r22
    6e20:	06 c0       	rjmp	.+12     	; 0x6e2e <udc_update_iface_desc+0x50>
    6e22:	e0 93 9a 27 	sts	0x279A, r30	; 0x80279a <udc_ptr_iface>
    6e26:	f0 93 9b 27 	sts	0x279B, r31	; 0x80279b <udc_ptr_iface+0x1>
    6e2a:	81 e0       	ldi	r24, 0x01	; 1
    6e2c:	08 95       	ret
    6e2e:	90 81       	ld	r25, Z
    6e30:	e9 0f       	add	r30, r25
    6e32:	f1 1d       	adc	r31, r1
    6e34:	e2 17       	cp	r30, r18
    6e36:	f3 07       	cpc	r31, r19
    6e38:	58 f3       	brcs	.-42     	; 0x6e10 <udc_update_iface_desc+0x32>
    6e3a:	e0 93 9a 27 	sts	0x279A, r30	; 0x80279a <udc_ptr_iface>
    6e3e:	f0 93 9b 27 	sts	0x279B, r31	; 0x80279b <udc_ptr_iface+0x1>
    6e42:	80 e0       	ldi	r24, 0x00	; 0
    6e44:	08 95       	ret
    6e46:	80 e0       	ldi	r24, 0x00	; 0
    6e48:	08 95       	ret
    6e4a:	80 e0       	ldi	r24, 0x00	; 0
    6e4c:	08 95       	ret
    6e4e:	80 e0       	ldi	r24, 0x00	; 0
    6e50:	08 95       	ret

00006e52 <udc_iface_disable>:
    6e52:	ef 92       	push	r14
    6e54:	ff 92       	push	r15
    6e56:	1f 93       	push	r17
    6e58:	cf 93       	push	r28
    6e5a:	df 93       	push	r29
    6e5c:	c8 2f       	mov	r28, r24
    6e5e:	60 e0       	ldi	r22, 0x00	; 0
    6e60:	be df       	rcall	.-132    	; 0x6dde <udc_update_iface_desc>
    6e62:	18 2f       	mov	r17, r24
    6e64:	88 23       	and	r24, r24
    6e66:	81 f1       	breq	.+96     	; 0x6ec8 <udc_iface_disable+0x76>
    6e68:	a0 91 9c 27 	lds	r26, 0x279C	; 0x80279c <udc_ptr_conf>
    6e6c:	b0 91 9d 27 	lds	r27, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    6e70:	ec 2f       	mov	r30, r28
    6e72:	f0 e0       	ldi	r31, 0x00	; 0
    6e74:	ee 0f       	add	r30, r30
    6e76:	ff 1f       	adc	r31, r31
    6e78:	12 96       	adiw	r26, 0x02	; 2
    6e7a:	8d 91       	ld	r24, X+
    6e7c:	9c 91       	ld	r25, X
    6e7e:	13 97       	sbiw	r26, 0x03	; 3
    6e80:	e8 0f       	add	r30, r24
    6e82:	f9 1f       	adc	r31, r25
    6e84:	e0 80       	ld	r14, Z
    6e86:	f1 80       	ldd	r15, Z+1	; 0x01
    6e88:	d7 01       	movw	r26, r14
    6e8a:	16 96       	adiw	r26, 0x06	; 6
    6e8c:	ed 91       	ld	r30, X+
    6e8e:	fc 91       	ld	r31, X
    6e90:	17 97       	sbiw	r26, 0x07	; 7
    6e92:	19 95       	eicall
    6e94:	68 2f       	mov	r22, r24
    6e96:	8c 2f       	mov	r24, r28
    6e98:	a2 df       	rcall	.-188    	; 0x6dde <udc_update_iface_desc>
    6e9a:	18 2f       	mov	r17, r24
    6e9c:	88 23       	and	r24, r24
    6e9e:	a1 f0       	breq	.+40     	; 0x6ec8 <udc_iface_disable+0x76>
    6ea0:	c0 91 9a 27 	lds	r28, 0x279A	; 0x80279a <udc_ptr_iface>
    6ea4:	d0 91 9b 27 	lds	r29, 0x279B	; 0x80279b <udc_ptr_iface+0x1>
    6ea8:	65 e0       	ldi	r22, 0x05	; 5
    6eaa:	ce 01       	movw	r24, r28
    6eac:	5d df       	rcall	.-326    	; 0x6d68 <udc_next_desc_in_iface>
    6eae:	ec 01       	movw	r28, r24
    6eb0:	89 2b       	or	r24, r25
    6eb2:	21 f0       	breq	.+8      	; 0x6ebc <udc_iface_disable+0x6a>
    6eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    6eb6:	0e 94 a7 28 	call	0x514e	; 0x514e <udd_ep_free>
    6eba:	f6 cf       	rjmp	.-20     	; 0x6ea8 <udc_iface_disable+0x56>
    6ebc:	d7 01       	movw	r26, r14
    6ebe:	12 96       	adiw	r26, 0x02	; 2
    6ec0:	ed 91       	ld	r30, X+
    6ec2:	fc 91       	ld	r31, X
    6ec4:	13 97       	sbiw	r26, 0x03	; 3
    6ec6:	19 95       	eicall
    6ec8:	81 2f       	mov	r24, r17
    6eca:	df 91       	pop	r29
    6ecc:	cf 91       	pop	r28
    6ece:	1f 91       	pop	r17
    6ed0:	ff 90       	pop	r15
    6ed2:	ef 90       	pop	r14
    6ed4:	08 95       	ret

00006ed6 <udc_iface_enable>:
    6ed6:	1f 93       	push	r17
    6ed8:	cf 93       	push	r28
    6eda:	df 93       	push	r29
    6edc:	18 2f       	mov	r17, r24
    6ede:	7f df       	rcall	.-258    	; 0x6dde <udc_update_iface_desc>
    6ee0:	88 23       	and	r24, r24
    6ee2:	41 f1       	breq	.+80     	; 0x6f34 <udc_iface_enable+0x5e>
    6ee4:	c0 91 9a 27 	lds	r28, 0x279A	; 0x80279a <udc_ptr_iface>
    6ee8:	d0 91 9b 27 	lds	r29, 0x279B	; 0x80279b <udc_ptr_iface+0x1>
    6eec:	65 e0       	ldi	r22, 0x05	; 5
    6eee:	ce 01       	movw	r24, r28
    6ef0:	3b df       	rcall	.-394    	; 0x6d68 <udc_next_desc_in_iface>
    6ef2:	ec 01       	movw	r28, r24
    6ef4:	89 2b       	or	r24, r25
    6ef6:	49 f0       	breq	.+18     	; 0x6f0a <udc_iface_enable+0x34>
    6ef8:	4c 81       	ldd	r20, Y+4	; 0x04
    6efa:	5d 81       	ldd	r21, Y+5	; 0x05
    6efc:	6b 81       	ldd	r22, Y+3	; 0x03
    6efe:	8a 81       	ldd	r24, Y+2	; 0x02
    6f00:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <udd_ep_alloc>
    6f04:	81 11       	cpse	r24, r1
    6f06:	f2 cf       	rjmp	.-28     	; 0x6eec <udc_iface_enable+0x16>
    6f08:	15 c0       	rjmp	.+42     	; 0x6f34 <udc_iface_enable+0x5e>
    6f0a:	a0 91 9c 27 	lds	r26, 0x279C	; 0x80279c <udc_ptr_conf>
    6f0e:	b0 91 9d 27 	lds	r27, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    6f12:	e1 2f       	mov	r30, r17
    6f14:	f0 e0       	ldi	r31, 0x00	; 0
    6f16:	ee 0f       	add	r30, r30
    6f18:	ff 1f       	adc	r31, r31
    6f1a:	12 96       	adiw	r26, 0x02	; 2
    6f1c:	8d 91       	ld	r24, X+
    6f1e:	9c 91       	ld	r25, X
    6f20:	13 97       	sbiw	r26, 0x03	; 3
    6f22:	e8 0f       	add	r30, r24
    6f24:	f9 1f       	adc	r31, r25
    6f26:	01 90       	ld	r0, Z+
    6f28:	f0 81       	ld	r31, Z
    6f2a:	e0 2d       	mov	r30, r0
    6f2c:	01 90       	ld	r0, Z+
    6f2e:	f0 81       	ld	r31, Z
    6f30:	e0 2d       	mov	r30, r0
    6f32:	19 95       	eicall
    6f34:	df 91       	pop	r29
    6f36:	cf 91       	pop	r28
    6f38:	1f 91       	pop	r17
    6f3a:	08 95       	ret

00006f3c <udc_start>:
    6f3c:	0c 94 17 26 	jmp	0x4c2e	; 0x4c2e <udd_enable>
    6f40:	08 95       	ret

00006f42 <udc_reset>:
    6f42:	cf 93       	push	r28
    6f44:	80 91 9e 27 	lds	r24, 0x279E	; 0x80279e <udc_num_configuration>
    6f48:	88 23       	and	r24, r24
    6f4a:	c1 f0       	breq	.+48     	; 0x6f7c <udc_reset+0x3a>
    6f4c:	e0 91 9c 27 	lds	r30, 0x279C	; 0x80279c <udc_ptr_conf>
    6f50:	f0 91 9d 27 	lds	r31, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    6f54:	01 90       	ld	r0, Z+
    6f56:	f0 81       	ld	r31, Z
    6f58:	e0 2d       	mov	r30, r0
    6f5a:	84 81       	ldd	r24, Z+4	; 0x04
    6f5c:	88 23       	and	r24, r24
    6f5e:	71 f0       	breq	.+28     	; 0x6f7c <udc_reset+0x3a>
    6f60:	c0 e0       	ldi	r28, 0x00	; 0
    6f62:	8c 2f       	mov	r24, r28
    6f64:	76 df       	rcall	.-276    	; 0x6e52 <udc_iface_disable>
    6f66:	cf 5f       	subi	r28, 0xFF	; 255
    6f68:	e0 91 9c 27 	lds	r30, 0x279C	; 0x80279c <udc_ptr_conf>
    6f6c:	f0 91 9d 27 	lds	r31, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    6f70:	01 90       	ld	r0, Z+
    6f72:	f0 81       	ld	r31, Z
    6f74:	e0 2d       	mov	r30, r0
    6f76:	84 81       	ldd	r24, Z+4	; 0x04
    6f78:	c8 17       	cp	r28, r24
    6f7a:	98 f3       	brcs	.-26     	; 0x6f62 <udc_reset+0x20>
    6f7c:	10 92 9e 27 	sts	0x279E, r1	; 0x80279e <udc_num_configuration>
    6f80:	80 91 a2 27 	lds	r24, 0x27A2	; 0x8027a2 <udc_device_status>
    6f84:	81 fd       	sbrc	r24, 1
    6f86:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <usb_callback_remotewakeup_disable>
    6f8a:	10 92 a2 27 	sts	0x27A2, r1	; 0x8027a2 <udc_device_status>
    6f8e:	10 92 a3 27 	sts	0x27A3, r1	; 0x8027a3 <udc_device_status+0x1>
    6f92:	cf 91       	pop	r28
    6f94:	08 95       	ret

00006f96 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    6f96:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    6f98:	80 91 9e 27 	lds	r24, 0x279E	; 0x80279e <udc_num_configuration>
    6f9c:	88 23       	and	r24, r24
    6f9e:	49 f1       	breq	.+82     	; 0x6ff2 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    6fa0:	a0 91 9c 27 	lds	r26, 0x279C	; 0x80279c <udc_ptr_conf>
    6fa4:	b0 91 9d 27 	lds	r27, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    6fa8:	ed 91       	ld	r30, X+
    6faa:	fc 91       	ld	r31, X
    6fac:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    6fae:	84 81       	ldd	r24, Z+4	; 0x04
    6fb0:	88 23       	and	r24, r24
    6fb2:	f9 f0       	breq	.+62     	; 0x6ff2 <udc_sof_notify+0x5c>
    6fb4:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    6fb6:	ec 2f       	mov	r30, r28
    6fb8:	f0 e0       	ldi	r31, 0x00	; 0
    6fba:	ee 0f       	add	r30, r30
    6fbc:	ff 1f       	adc	r31, r31
    6fbe:	12 96       	adiw	r26, 0x02	; 2
    6fc0:	8d 91       	ld	r24, X+
    6fc2:	9c 91       	ld	r25, X
    6fc4:	13 97       	sbiw	r26, 0x03	; 3
    6fc6:	e8 0f       	add	r30, r24
    6fc8:	f9 1f       	adc	r31, r25
    6fca:	01 90       	ld	r0, Z+
    6fcc:	f0 81       	ld	r31, Z
    6fce:	e0 2d       	mov	r30, r0
    6fd0:	00 84       	ldd	r0, Z+8	; 0x08
    6fd2:	f1 85       	ldd	r31, Z+9	; 0x09
    6fd4:	e0 2d       	mov	r30, r0
    6fd6:	30 97       	sbiw	r30, 0x00	; 0
    6fd8:	09 f0       	breq	.+2      	; 0x6fdc <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    6fda:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    6fdc:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    6fde:	a0 91 9c 27 	lds	r26, 0x279C	; 0x80279c <udc_ptr_conf>
    6fe2:	b0 91 9d 27 	lds	r27, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    6fe6:	ed 91       	ld	r30, X+
    6fe8:	fc 91       	ld	r31, X
    6fea:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    6fec:	84 81       	ldd	r24, Z+4	; 0x04
    6fee:	c8 17       	cp	r28, r24
    6ff0:	10 f3       	brcs	.-60     	; 0x6fb6 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    6ff2:	cf 91       	pop	r28
    6ff4:	08 95       	ret

00006ff6 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    6ff6:	0f 93       	push	r16
    6ff8:	1f 93       	push	r17
    6ffa:	cf 93       	push	r28
    6ffc:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    6ffe:	e3 eb       	ldi	r30, 0xB3	; 179
    7000:	f7 e2       	ldi	r31, 0x27	; 39
    7002:	12 86       	std	Z+10, r1	; 0x0a
    7004:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    7006:	14 86       	std	Z+12, r1	; 0x0c
    7008:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    700a:	16 86       	std	Z+14, r1	; 0x0e
    700c:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    700e:	80 81       	ld	r24, Z
    7010:	88 23       	and	r24, r24
    7012:	0c f0       	brlt	.+2      	; 0x7016 <udc_process_setup+0x20>
    7014:	95 c2       	rjmp	.+1322   	; 0x7540 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    7016:	20 91 b9 27 	lds	r18, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    701a:	30 91 ba 27 	lds	r19, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    701e:	21 15       	cp	r18, r1
    7020:	31 05       	cpc	r19, r1
    7022:	09 f0       	breq	.+2      	; 0x7026 <udc_process_setup+0x30>
    7024:	88 c2       	rjmp	.+1296   	; 0x7536 <udc_process_setup+0x540>
    7026:	7f c2       	rjmp	.+1278   	; 0x7526 <udc_process_setup+0x530>
    7028:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    702a:	09 f0       	breq	.+2      	; 0x702e <udc_process_setup+0x38>
    702c:	ab c0       	rjmp	.+342    	; 0x7184 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    702e:	90 91 b4 27 	lds	r25, 0x27B4	; 0x8027b4 <udd_g_ctrlreq+0x1>
    7032:	96 30       	cpi	r25, 0x06	; 6
    7034:	81 f0       	breq	.+32     	; 0x7056 <udc_process_setup+0x60>
    7036:	98 30       	cpi	r25, 0x08	; 8
    7038:	09 f4       	brne	.+2      	; 0x703c <udc_process_setup+0x46>
    703a:	99 c0       	rjmp	.+306    	; 0x716e <udc_process_setup+0x178>
    703c:	91 11       	cpse	r25, r1
    703e:	a2 c0       	rjmp	.+324    	; 0x7184 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    7040:	22 30       	cpi	r18, 0x02	; 2
    7042:	31 05       	cpc	r19, r1
    7044:	09 f0       	breq	.+2      	; 0x7048 <udc_process_setup+0x52>
    7046:	2b c2       	rjmp	.+1110   	; 0x749e <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    7048:	62 e0       	ldi	r22, 0x02	; 2
    704a:	70 e0       	ldi	r23, 0x00	; 0
    704c:	82 ea       	ldi	r24, 0xA2	; 162
    704e:	97 e2       	ldi	r25, 0x27	; 39
    7050:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <udd_set_setup_payload>
    7054:	7e c2       	rjmp	.+1276   	; 0x7552 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    7056:	80 91 b5 27 	lds	r24, 0x27B5	; 0x8027b5 <udd_g_ctrlreq+0x2>
    705a:	90 91 b6 27 	lds	r25, 0x27B6	; 0x8027b6 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    705e:	29 2f       	mov	r18, r25
    7060:	33 27       	eor	r19, r19
    7062:	22 30       	cpi	r18, 0x02	; 2
    7064:	31 05       	cpc	r19, r1
    7066:	b1 f0       	breq	.+44     	; 0x7094 <udc_process_setup+0x9e>
    7068:	20 f4       	brcc	.+8      	; 0x7072 <udc_process_setup+0x7c>
    706a:	21 30       	cpi	r18, 0x01	; 1
    706c:	31 05       	cpc	r19, r1
    706e:	41 f0       	breq	.+16     	; 0x7080 <udc_process_setup+0x8a>
    7070:	d8 c1       	rjmp	.+944    	; 0x7422 <udc_process_setup+0x42c>
    7072:	23 30       	cpi	r18, 0x03	; 3
    7074:	31 05       	cpc	r19, r1
    7076:	f1 f1       	breq	.+124    	; 0x70f4 <udc_process_setup+0xfe>
    7078:	2f 30       	cpi	r18, 0x0F	; 15
    707a:	31 05       	cpc	r19, r1
    707c:	61 f1       	breq	.+88     	; 0x70d6 <udc_process_setup+0xe0>
    707e:	d1 c1       	rjmp	.+930    	; 0x7422 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    7080:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <udc_config>
    7084:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    7088:	dc 01       	movw	r26, r24
    708a:	6c 91       	ld	r22, X
    708c:	70 e0       	ldi	r23, 0x00	; 0
    708e:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <udd_set_setup_payload>
    7092:	5e c0       	rjmp	.+188    	; 0x7150 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    7094:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <udc_config>
    7098:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <udc_config+0x1>
    709c:	21 89       	ldd	r18, Z+17	; 0x11
    709e:	82 17       	cp	r24, r18
    70a0:	08 f0       	brcs	.+2      	; 0x70a4 <udc_process_setup+0xae>
    70a2:	fd c1       	rjmp	.+1018   	; 0x749e <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    70a4:	99 27       	eor	r25, r25
    70a6:	88 0f       	add	r24, r24
    70a8:	99 1f       	adc	r25, r25
    70aa:	88 0f       	add	r24, r24
    70ac:	99 1f       	adc	r25, r25
    70ae:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <udc_config+0x2>
    70b2:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <udc_config+0x3>
    70b6:	e8 0f       	add	r30, r24
    70b8:	f9 1f       	adc	r31, r25
    70ba:	80 81       	ld	r24, Z
    70bc:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    70be:	fc 01       	movw	r30, r24
    70c0:	62 81       	ldd	r22, Z+2	; 0x02
    70c2:	73 81       	ldd	r23, Z+3	; 0x03
    70c4:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    70c8:	e0 91 bb 27 	lds	r30, 0x27BB	; 0x8027bb <udd_g_ctrlreq+0x8>
    70cc:	f0 91 bc 27 	lds	r31, 0x27BC	; 0x8027bc <udd_g_ctrlreq+0x9>
    70d0:	82 e0       	ldi	r24, 0x02	; 2
    70d2:	81 83       	std	Z+1, r24	; 0x01
    70d4:	3d c0       	rjmp	.+122    	; 0x7150 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    70d6:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <udc_config+0x4>
    70da:	90 91 51 20 	lds	r25, 0x2051	; 0x802051 <udc_config+0x5>
    70de:	00 97       	sbiw	r24, 0x00	; 0
    70e0:	09 f4       	brne	.+2      	; 0x70e4 <udc_process_setup+0xee>
    70e2:	dd c1       	rjmp	.+954    	; 0x749e <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    70e4:	dc 01       	movw	r26, r24
    70e6:	12 96       	adiw	r26, 0x02	; 2
    70e8:	6d 91       	ld	r22, X+
    70ea:	7c 91       	ld	r23, X
    70ec:	13 97       	sbiw	r26, 0x03	; 3
    70ee:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <udd_set_setup_payload>
    70f2:	2e c0       	rjmp	.+92     	; 0x7150 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    70f4:	99 27       	eor	r25, r25
    70f6:	81 30       	cpi	r24, 0x01	; 1
    70f8:	91 05       	cpc	r25, r1
    70fa:	99 f0       	breq	.+38     	; 0x7122 <udc_process_setup+0x12c>
    70fc:	58 f0       	brcs	.+22     	; 0x7114 <udc_process_setup+0x11e>
    70fe:	82 30       	cpi	r24, 0x02	; 2
    7100:	91 05       	cpc	r25, r1
    7102:	09 f4       	brne	.+2      	; 0x7106 <udc_process_setup+0x110>
    7104:	22 c2       	rjmp	.+1092   	; 0x754a <udc_process_setup+0x554>
    7106:	03 97       	sbiw	r24, 0x03	; 3
    7108:	09 f0       	breq	.+2      	; 0x710c <udc_process_setup+0x116>
    710a:	94 c1       	rjmp	.+808    	; 0x7434 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    710c:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    710e:	ec e4       	ldi	r30, 0x4C	; 76
    7110:	f3 e2       	ldi	r31, 0x23	; 35
    7112:	0a c0       	rjmp	.+20     	; 0x7128 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    7114:	64 e0       	ldi	r22, 0x04	; 4
    7116:	70 e0       	ldi	r23, 0x00	; 0
    7118:	80 ef       	ldi	r24, 0xF0	; 240
    711a:	90 e2       	ldi	r25, 0x20	; 32
    711c:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <udd_set_setup_payload>
    7120:	17 c0       	rjmp	.+46     	; 0x7150 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    7122:	ef ed       	ldi	r30, 0xDF	; 223
    7124:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    7126:	30 e1       	ldi	r19, 0x10	; 16
    7128:	a2 eb       	ldi	r26, 0xB2	; 178
    712a:	b0 e2       	ldi	r27, 0x20	; 32
    712c:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    712e:	81 91       	ld	r24, Z+
    7130:	90 e0       	ldi	r25, 0x00	; 0
    7132:	8d 93       	st	X+, r24
    7134:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    7136:	2f 5f       	subi	r18, 0xFF	; 255
    7138:	23 17       	cp	r18, r19
    713a:	c8 f3       	brcs	.-14     	; 0x712e <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    713c:	63 2f       	mov	r22, r19
    713e:	66 0f       	add	r22, r22
    7140:	6e 5f       	subi	r22, 0xFE	; 254
    7142:	60 93 b0 20 	sts	0x20B0, r22	; 0x8020b0 <udc_string_desc>
		udd_set_setup_payload(
    7146:	70 e0       	ldi	r23, 0x00	; 0
    7148:	80 eb       	ldi	r24, 0xB0	; 176
    714a:	90 e2       	ldi	r25, 0x20	; 32
    714c:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    7150:	e3 eb       	ldi	r30, 0xB3	; 179
    7152:	f7 e2       	ldi	r31, 0x27	; 39
    7154:	86 81       	ldd	r24, Z+6	; 0x06
    7156:	97 81       	ldd	r25, Z+7	; 0x07
    7158:	22 85       	ldd	r18, Z+10	; 0x0a
    715a:	33 85       	ldd	r19, Z+11	; 0x0b
    715c:	82 17       	cp	r24, r18
    715e:	93 07       	cpc	r25, r19
    7160:	08 f0       	brcs	.+2      	; 0x7164 <udc_process_setup+0x16e>
    7162:	f7 c1       	rjmp	.+1006   	; 0x7552 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    7164:	80 93 bd 27 	sts	0x27BD, r24	; 0x8027bd <udd_g_ctrlreq+0xa>
    7168:	90 93 be 27 	sts	0x27BE, r25	; 0x8027be <udd_g_ctrlreq+0xb>
    716c:	f2 c1       	rjmp	.+996    	; 0x7552 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    716e:	21 30       	cpi	r18, 0x01	; 1
    7170:	31 05       	cpc	r19, r1
    7172:	09 f0       	breq	.+2      	; 0x7176 <udc_process_setup+0x180>
    7174:	94 c1       	rjmp	.+808    	; 0x749e <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    7176:	61 e0       	ldi	r22, 0x01	; 1
    7178:	70 e0       	ldi	r23, 0x00	; 0
    717a:	8e e9       	ldi	r24, 0x9E	; 158
    717c:	97 e2       	ldi	r25, 0x27	; 39
    717e:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <udd_set_setup_payload>
    7182:	e7 c1       	rjmp	.+974    	; 0x7552 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    7184:	81 30       	cpi	r24, 0x01	; 1
    7186:	e9 f5       	brne	.+122    	; 0x7202 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    7188:	90 91 b4 27 	lds	r25, 0x27B4	; 0x8027b4 <udd_g_ctrlreq+0x1>
    718c:	9a 30       	cpi	r25, 0x0A	; 10
    718e:	c9 f5       	brne	.+114    	; 0x7202 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    7190:	21 30       	cpi	r18, 0x01	; 1
    7192:	31 05       	cpc	r19, r1
    7194:	09 f0       	breq	.+2      	; 0x7198 <udc_process_setup+0x1a2>
    7196:	53 c1       	rjmp	.+678    	; 0x743e <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    7198:	80 91 9e 27 	lds	r24, 0x279E	; 0x80279e <udc_num_configuration>
    719c:	88 23       	and	r24, r24
    719e:	09 f4       	brne	.+2      	; 0x71a2 <udc_process_setup+0x1ac>
    71a0:	4e c1       	rjmp	.+668    	; 0x743e <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    71a2:	c0 91 b7 27 	lds	r28, 0x27B7	; 0x8027b7 <udd_g_ctrlreq+0x4>
    71a6:	d0 91 b8 27 	lds	r29, 0x27B8	; 0x8027b8 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    71aa:	00 91 9c 27 	lds	r16, 0x279C	; 0x80279c <udc_ptr_conf>
    71ae:	10 91 9d 27 	lds	r17, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    71b2:	d8 01       	movw	r26, r16
    71b4:	ed 91       	ld	r30, X+
    71b6:	fc 91       	ld	r31, X
    71b8:	84 81       	ldd	r24, Z+4	; 0x04
    71ba:	c8 17       	cp	r28, r24
    71bc:	08 f0       	brcs	.+2      	; 0x71c0 <udc_process_setup+0x1ca>
    71be:	3f c1       	rjmp	.+638    	; 0x743e <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    71c0:	60 e0       	ldi	r22, 0x00	; 0
    71c2:	8c 2f       	mov	r24, r28
    71c4:	0c de       	rcall	.-1000   	; 0x6dde <udc_update_iface_desc>
    71c6:	88 23       	and	r24, r24
    71c8:	09 f4       	brne	.+2      	; 0x71cc <udc_process_setup+0x1d6>
    71ca:	34 c1       	rjmp	.+616    	; 0x7434 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    71cc:	ce 01       	movw	r24, r28
    71ce:	99 27       	eor	r25, r25
    71d0:	88 0f       	add	r24, r24
    71d2:	99 1f       	adc	r25, r25
    71d4:	d8 01       	movw	r26, r16
    71d6:	12 96       	adiw	r26, 0x02	; 2
    71d8:	ed 91       	ld	r30, X+
    71da:	fc 91       	ld	r31, X
    71dc:	13 97       	sbiw	r26, 0x03	; 3
    71de:	e8 0f       	add	r30, r24
    71e0:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    71e2:	01 90       	ld	r0, Z+
    71e4:	f0 81       	ld	r31, Z
    71e6:	e0 2d       	mov	r30, r0
    71e8:	86 81       	ldd	r24, Z+6	; 0x06
    71ea:	97 81       	ldd	r25, Z+7	; 0x07
    71ec:	fc 01       	movw	r30, r24
    71ee:	19 95       	eicall
    71f0:	80 93 a0 27 	sts	0x27A0, r24	; 0x8027a0 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    71f4:	61 e0       	ldi	r22, 0x01	; 1
    71f6:	70 e0       	ldi	r23, 0x00	; 0
    71f8:	80 ea       	ldi	r24, 0xA0	; 160
    71fa:	97 e2       	ldi	r25, 0x27	; 39
    71fc:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <udd_set_setup_payload>
    7200:	a8 c1       	rjmp	.+848    	; 0x7552 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    7202:	82 30       	cpi	r24, 0x02	; 2
    7204:	09 f0       	breq	.+2      	; 0x7208 <udc_process_setup+0x212>
    7206:	16 c1       	rjmp	.+556    	; 0x7434 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    7208:	80 91 b4 27 	lds	r24, 0x27B4	; 0x8027b4 <udd_g_ctrlreq+0x1>
    720c:	81 11       	cpse	r24, r1
    720e:	0b c1       	rjmp	.+534    	; 0x7426 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    7210:	22 30       	cpi	r18, 0x02	; 2
    7212:	31 05       	cpc	r19, r1
    7214:	09 f0       	breq	.+2      	; 0x7218 <udc_process_setup+0x222>
    7216:	43 c1       	rjmp	.+646    	; 0x749e <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    7218:	80 91 b7 27 	lds	r24, 0x27B7	; 0x8027b7 <udd_g_ctrlreq+0x4>
    721c:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <udd_ep_is_halted>
    7220:	90 e0       	ldi	r25, 0x00	; 0
    7222:	80 93 98 27 	sts	0x2798, r24	; 0x802798 <udc_ep_status.4757>
    7226:	90 93 99 27 	sts	0x2799, r25	; 0x802799 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    722a:	62 e0       	ldi	r22, 0x02	; 2
    722c:	70 e0       	ldi	r23, 0x00	; 0
    722e:	88 e9       	ldi	r24, 0x98	; 152
    7230:	97 e2       	ldi	r25, 0x27	; 39
    7232:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <udd_set_setup_payload>
    7236:	8d c1       	rjmp	.+794    	; 0x7552 <udc_process_setup+0x55c>
    7238:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    723a:	09 f0       	breq	.+2      	; 0x723e <udc_process_setup+0x248>
    723c:	a0 c0       	rjmp	.+320    	; 0x737e <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    723e:	90 91 b4 27 	lds	r25, 0x27B4	; 0x8027b4 <udd_g_ctrlreq+0x1>
    7242:	93 30       	cpi	r25, 0x03	; 3
    7244:	91 f1       	breq	.+100    	; 0x72aa <udc_process_setup+0x2b4>
    7246:	18 f4       	brcc	.+6      	; 0x724e <udc_process_setup+0x258>
    7248:	91 30       	cpi	r25, 0x01	; 1
    724a:	a9 f0       	breq	.+42     	; 0x7276 <udc_process_setup+0x280>
    724c:	98 c0       	rjmp	.+304    	; 0x737e <udc_process_setup+0x388>
    724e:	95 30       	cpi	r25, 0x05	; 5
    7250:	21 f0       	breq	.+8      	; 0x725a <udc_process_setup+0x264>
    7252:	99 30       	cpi	r25, 0x09	; 9
    7254:	09 f4       	brne	.+2      	; 0x7258 <udc_process_setup+0x262>
    7256:	43 c0       	rjmp	.+134    	; 0x72de <udc_process_setup+0x2e8>
    7258:	92 c0       	rjmp	.+292    	; 0x737e <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    725a:	80 91 b9 27 	lds	r24, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    725e:	90 91 ba 27 	lds	r25, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    7262:	89 2b       	or	r24, r25
    7264:	09 f0       	breq	.+2      	; 0x7268 <udc_process_setup+0x272>
    7266:	1b c1       	rjmp	.+566    	; 0x749e <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    7268:	89 ee       	ldi	r24, 0xE9	; 233
    726a:	96 e3       	ldi	r25, 0x36	; 54
    726c:	80 93 bf 27 	sts	0x27BF, r24	; 0x8027bf <udd_g_ctrlreq+0xc>
    7270:	90 93 c0 27 	sts	0x27C0, r25	; 0x8027c0 <udd_g_ctrlreq+0xd>
    7274:	6e c1       	rjmp	.+732    	; 0x7552 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    7276:	80 91 b9 27 	lds	r24, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    727a:	90 91 ba 27 	lds	r25, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    727e:	89 2b       	or	r24, r25
    7280:	09 f0       	breq	.+2      	; 0x7284 <udc_process_setup+0x28e>
    7282:	0d c1       	rjmp	.+538    	; 0x749e <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    7284:	80 91 b5 27 	lds	r24, 0x27B5	; 0x8027b5 <udd_g_ctrlreq+0x2>
    7288:	90 91 b6 27 	lds	r25, 0x27B6	; 0x8027b6 <udd_g_ctrlreq+0x3>
    728c:	01 97       	sbiw	r24, 0x01	; 1
    728e:	09 f0       	breq	.+2      	; 0x7292 <udc_process_setup+0x29c>
    7290:	06 c1       	rjmp	.+524    	; 0x749e <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    7292:	80 91 a2 27 	lds	r24, 0x27A2	; 0x8027a2 <udc_device_status>
    7296:	90 91 a3 27 	lds	r25, 0x27A3	; 0x8027a3 <udc_device_status+0x1>
    729a:	8d 7f       	andi	r24, 0xFD	; 253
    729c:	80 93 a2 27 	sts	0x27A2, r24	; 0x8027a2 <udc_device_status>
    72a0:	90 93 a3 27 	sts	0x27A3, r25	; 0x8027a3 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    72a4:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <usb_callback_remotewakeup_disable>
    72a8:	54 c1       	rjmp	.+680    	; 0x7552 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    72aa:	80 91 b9 27 	lds	r24, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    72ae:	90 91 ba 27 	lds	r25, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    72b2:	89 2b       	or	r24, r25
    72b4:	09 f0       	breq	.+2      	; 0x72b8 <udc_process_setup+0x2c2>
    72b6:	f3 c0       	rjmp	.+486    	; 0x749e <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    72b8:	80 91 b5 27 	lds	r24, 0x27B5	; 0x8027b5 <udd_g_ctrlreq+0x2>
    72bc:	90 91 b6 27 	lds	r25, 0x27B6	; 0x8027b6 <udd_g_ctrlreq+0x3>
    72c0:	01 97       	sbiw	r24, 0x01	; 1
    72c2:	09 f0       	breq	.+2      	; 0x72c6 <udc_process_setup+0x2d0>
    72c4:	b2 c0       	rjmp	.+356    	; 0x742a <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    72c6:	80 91 a2 27 	lds	r24, 0x27A2	; 0x8027a2 <udc_device_status>
    72ca:	90 91 a3 27 	lds	r25, 0x27A3	; 0x8027a3 <udc_device_status+0x1>
    72ce:	82 60       	ori	r24, 0x02	; 2
    72d0:	80 93 a2 27 	sts	0x27A2, r24	; 0x8027a2 <udc_device_status>
    72d4:	90 93 a3 27 	sts	0x27A3, r25	; 0x8027a3 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    72d8:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <usb_callback_remotewakeup_enable>
    72dc:	3a c1       	rjmp	.+628    	; 0x7552 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    72de:	80 91 b9 27 	lds	r24, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    72e2:	90 91 ba 27 	lds	r25, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    72e6:	89 2b       	or	r24, r25
    72e8:	09 f0       	breq	.+2      	; 0x72ec <udc_process_setup+0x2f6>
    72ea:	d9 c0       	rjmp	.+434    	; 0x749e <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    72ec:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <udd_getaddress>
    72f0:	88 23       	and	r24, r24
    72f2:	09 f4       	brne	.+2      	; 0x72f6 <udc_process_setup+0x300>
    72f4:	9f c0       	rjmp	.+318    	; 0x7434 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    72f6:	20 91 b5 27 	lds	r18, 0x27B5	; 0x8027b5 <udd_g_ctrlreq+0x2>
    72fa:	30 91 b6 27 	lds	r19, 0x27B6	; 0x8027b6 <udd_g_ctrlreq+0x3>
    72fe:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    7300:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <udc_config>
    7304:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    7308:	81 89       	ldd	r24, Z+17	; 0x11
    730a:	90 e0       	ldi	r25, 0x00	; 0
    730c:	82 17       	cp	r24, r18
    730e:	93 07       	cpc	r25, r19
    7310:	08 f4       	brcc	.+2      	; 0x7314 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    7312:	90 c0       	rjmp	.+288    	; 0x7434 <udc_process_setup+0x43e>
    7314:	16 de       	rcall	.-980    	; 0x6f42 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    7316:	80 91 b5 27 	lds	r24, 0x27B5	; 0x8027b5 <udd_g_ctrlreq+0x2>
    731a:	90 91 b6 27 	lds	r25, 0x27B6	; 0x8027b6 <udd_g_ctrlreq+0x3>
    731e:	80 93 9e 27 	sts	0x279E, r24	; 0x80279e <udc_num_configuration>
	if (udc_num_configuration == 0) {
    7322:	88 23       	and	r24, r24
    7324:	09 f4       	brne	.+2      	; 0x7328 <udc_process_setup+0x332>
    7326:	15 c1       	rjmp	.+554    	; 0x7552 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    7328:	99 27       	eor	r25, r25
    732a:	81 50       	subi	r24, 0x01	; 1
    732c:	90 4c       	sbci	r25, 0xC0	; 192
    732e:	88 0f       	add	r24, r24
    7330:	99 1f       	adc	r25, r25
    7332:	88 0f       	add	r24, r24
    7334:	99 1f       	adc	r25, r25
    7336:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <udc_config+0x2>
    733a:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <udc_config+0x3>
    733e:	e8 0f       	add	r30, r24
    7340:	f9 1f       	adc	r31, r25
    7342:	e0 93 9c 27 	sts	0x279C, r30	; 0x80279c <udc_ptr_conf>
    7346:	f0 93 9d 27 	sts	0x279D, r31	; 0x80279d <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    734a:	01 90       	ld	r0, Z+
    734c:	f0 81       	ld	r31, Z
    734e:	e0 2d       	mov	r30, r0
    7350:	84 81       	ldd	r24, Z+4	; 0x04
    7352:	88 23       	and	r24, r24
    7354:	09 f4       	brne	.+2      	; 0x7358 <udc_process_setup+0x362>
    7356:	fd c0       	rjmp	.+506    	; 0x7552 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    7358:	c0 e0       	ldi	r28, 0x00	; 0
    735a:	60 e0       	ldi	r22, 0x00	; 0
    735c:	8c 2f       	mov	r24, r28
    735e:	bb dd       	rcall	.-1162   	; 0x6ed6 <udc_iface_enable>
    7360:	88 23       	and	r24, r24
    7362:	09 f4       	brne	.+2      	; 0x7366 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    7364:	67 c0       	rjmp	.+206    	; 0x7434 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7366:	cf 5f       	subi	r28, 0xFF	; 255
    7368:	e0 91 9c 27 	lds	r30, 0x279C	; 0x80279c <udc_ptr_conf>
    736c:	f0 91 9d 27 	lds	r31, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    7370:	01 90       	ld	r0, Z+
    7372:	f0 81       	ld	r31, Z
    7374:	e0 2d       	mov	r30, r0
    7376:	84 81       	ldd	r24, Z+4	; 0x04
    7378:	c8 17       	cp	r28, r24
    737a:	78 f3       	brcs	.-34     	; 0x735a <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    737c:	ea c0       	rjmp	.+468    	; 0x7552 <udc_process_setup+0x55c>
    737e:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    7380:	e9 f4       	brne	.+58     	; 0x73bc <udc_process_setup+0x3c6>
    7382:	90 91 b4 27 	lds	r25, 0x27B4	; 0x8027b4 <udd_g_ctrlreq+0x1>
    7386:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    7388:	c9 f4       	brne	.+50     	; 0x73bc <udc_process_setup+0x3c6>
    738a:	80 91 b9 27 	lds	r24, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    738e:	90 91 ba 27 	lds	r25, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    7392:	89 2b       	or	r24, r25
    7394:	09 f0       	breq	.+2      	; 0x7398 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    7396:	53 c0       	rjmp	.+166    	; 0x743e <udc_process_setup+0x448>
    7398:	80 91 9e 27 	lds	r24, 0x279E	; 0x80279e <udc_num_configuration>
    739c:	88 23       	and	r24, r24
    739e:	09 f4       	brne	.+2      	; 0x73a2 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    73a0:	4e c0       	rjmp	.+156    	; 0x743e <udc_process_setup+0x448>
    73a2:	e3 eb       	ldi	r30, 0xB3	; 179
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    73a4:	f7 e2       	ldi	r31, 0x27	; 39

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    73a6:	c4 81       	ldd	r28, Z+4	; 0x04
    73a8:	d2 81       	ldd	r29, Z+2	; 0x02
    73aa:	8c 2f       	mov	r24, r28
    73ac:	52 dd       	rcall	.-1372   	; 0x6e52 <udc_iface_disable>
    73ae:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    73b0:	09 f4       	brne	.+2      	; 0x73b4 <udc_process_setup+0x3be>
    73b2:	40 c0       	rjmp	.+128    	; 0x7434 <udc_process_setup+0x43e>
    73b4:	6d 2f       	mov	r22, r29
    73b6:	8c 2f       	mov	r24, r28
    73b8:	8e dd       	rcall	.-1252   	; 0x6ed6 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    73ba:	3a c0       	rjmp	.+116    	; 0x7430 <udc_process_setup+0x43a>
    73bc:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    73be:	d1 f5       	brne	.+116    	; 0x7434 <udc_process_setup+0x43e>
    73c0:	80 91 b4 27 	lds	r24, 0x27B4	; 0x8027b4 <udd_g_ctrlreq+0x1>
    73c4:	81 30       	cpi	r24, 0x01	; 1
    73c6:	19 f0       	breq	.+6      	; 0x73ce <udc_process_setup+0x3d8>
    73c8:	83 30       	cpi	r24, 0x03	; 3
    73ca:	a1 f0       	breq	.+40     	; 0x73f4 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    73cc:	30 c0       	rjmp	.+96     	; 0x742e <udc_process_setup+0x438>
    73ce:	80 91 b9 27 	lds	r24, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    73d2:	90 91 ba 27 	lds	r25, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    73d6:	89 2b       	or	r24, r25
    73d8:	09 f0       	breq	.+2      	; 0x73dc <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    73da:	61 c0       	rjmp	.+194    	; 0x749e <udc_process_setup+0x4a8>
    73dc:	80 91 b5 27 	lds	r24, 0x27B5	; 0x8027b5 <udd_g_ctrlreq+0x2>
    73e0:	90 91 b6 27 	lds	r25, 0x27B6	; 0x8027b6 <udd_g_ctrlreq+0x3>
    73e4:	89 2b       	or	r24, r25
    73e6:	09 f0       	breq	.+2      	; 0x73ea <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    73e8:	5a c0       	rjmp	.+180    	; 0x749e <udc_process_setup+0x4a8>
    73ea:	80 91 b7 27 	lds	r24, 0x27B7	; 0x8027b7 <udd_g_ctrlreq+0x4>
    73ee:	0e 94 56 27 	call	0x4eac	; 0x4eac <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    73f2:	1e c0       	rjmp	.+60     	; 0x7430 <udc_process_setup+0x43a>
    73f4:	80 91 b9 27 	lds	r24, 0x27B9	; 0x8027b9 <udd_g_ctrlreq+0x6>
    73f8:	90 91 ba 27 	lds	r25, 0x27BA	; 0x8027ba <udd_g_ctrlreq+0x7>
    73fc:	89 2b       	or	r24, r25
    73fe:	09 f0       	breq	.+2      	; 0x7402 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    7400:	4e c0       	rjmp	.+156    	; 0x749e <udc_process_setup+0x4a8>
    7402:	80 91 b5 27 	lds	r24, 0x27B5	; 0x8027b5 <udd_g_ctrlreq+0x2>
    7406:	90 91 b6 27 	lds	r25, 0x27B6	; 0x8027b6 <udd_g_ctrlreq+0x3>
    740a:	89 2b       	or	r24, r25
    740c:	09 f0       	breq	.+2      	; 0x7410 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    740e:	47 c0       	rjmp	.+142    	; 0x749e <udc_process_setup+0x4a8>
    7410:	c3 eb       	ldi	r28, 0xB3	; 179
    7412:	d7 e2       	ldi	r29, 0x27	; 39
    7414:	8c 81       	ldd	r24, Y+4	; 0x04
    7416:	0e 94 58 28 	call	0x50b0	; 0x50b0 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    741a:	8c 81       	ldd	r24, Y+4	; 0x04
    741c:	0e 94 c3 28 	call	0x5186	; 0x5186 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    7420:	07 c0       	rjmp	.+14     	; 0x7430 <udc_process_setup+0x43a>
    7422:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    7424:	05 c0       	rjmp	.+10     	; 0x7430 <udc_process_setup+0x43a>
    7426:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    7428:	03 c0       	rjmp	.+6      	; 0x7430 <udc_process_setup+0x43a>
    742a:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    742c:	01 c0       	rjmp	.+2      	; 0x7430 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    742e:	80 e0       	ldi	r24, 0x00	; 0
    7430:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    7432:	90 c0       	rjmp	.+288    	; 0x7554 <udc_process_setup+0x55e>
    7434:	80 91 b3 27 	lds	r24, 0x27B3	; 0x8027b3 <udd_g_ctrlreq>
    7438:	8f 71       	andi	r24, 0x1F	; 31
    743a:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    743c:	81 f5       	brne	.+96     	; 0x749e <udc_process_setup+0x4a8>
    743e:	80 91 9e 27 	lds	r24, 0x279E	; 0x80279e <udc_num_configuration>
    7442:	88 23       	and	r24, r24
    7444:	09 f4       	brne	.+2      	; 0x7448 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    7446:	71 c0       	rjmp	.+226    	; 0x752a <udc_process_setup+0x534>
    7448:	00 91 b7 27 	lds	r16, 0x27B7	; 0x8027b7 <udd_g_ctrlreq+0x4>
    744c:	10 91 b8 27 	lds	r17, 0x27B8	; 0x8027b8 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    7450:	c0 91 9c 27 	lds	r28, 0x279C	; 0x80279c <udc_ptr_conf>
    7454:	d0 91 9d 27 	lds	r29, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    7458:	e8 81       	ld	r30, Y
    745a:	f9 81       	ldd	r31, Y+1	; 0x01
    745c:	84 81       	ldd	r24, Z+4	; 0x04
    745e:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    7460:	08 f0       	brcs	.+2      	; 0x7464 <udc_process_setup+0x46e>
    7462:	65 c0       	rjmp	.+202    	; 0x752e <udc_process_setup+0x538>
    7464:	60 e0       	ldi	r22, 0x00	; 0
    7466:	80 2f       	mov	r24, r16
    7468:	ba dc       	rcall	.-1676   	; 0x6dde <udc_update_iface_desc>
    746a:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    746c:	c1 f0       	breq	.+48     	; 0x749e <udc_process_setup+0x4a8>
    746e:	f8 01       	movw	r30, r16
    7470:	ff 27       	eor	r31, r31
    7472:	cf 01       	movw	r24, r30
    7474:	88 0f       	add	r24, r24
    7476:	99 1f       	adc	r25, r25
    7478:	ea 81       	ldd	r30, Y+2	; 0x02
    747a:	fb 81       	ldd	r31, Y+3	; 0x03
    747c:	e8 0f       	add	r30, r24
    747e:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    7480:	c0 81       	ld	r28, Z
    7482:	d1 81       	ldd	r29, Z+1	; 0x01
    7484:	ee 81       	ldd	r30, Y+6	; 0x06
    7486:	ff 81       	ldd	r31, Y+7	; 0x07
    7488:	19 95       	eicall
    748a:	68 2f       	mov	r22, r24
    748c:	80 2f       	mov	r24, r16
    748e:	a7 dc       	rcall	.-1714   	; 0x6dde <udc_update_iface_desc>
    7490:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    7492:	29 f0       	breq	.+10     	; 0x749e <udc_process_setup+0x4a8>
    7494:	ec 81       	ldd	r30, Y+4	; 0x04
    7496:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    7498:	19 95       	eicall
    749a:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    749c:	5b c0       	rjmp	.+182    	; 0x7554 <udc_process_setup+0x55e>
    749e:	80 91 b3 27 	lds	r24, 0x27B3	; 0x8027b3 <udd_g_ctrlreq>
    74a2:	8f 71       	andi	r24, 0x1F	; 31
    74a4:	82 30       	cpi	r24, 0x02	; 2
    74a6:	09 f0       	breq	.+2      	; 0x74aa <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    74a8:	44 c0       	rjmp	.+136    	; 0x7532 <udc_process_setup+0x53c>
    74aa:	80 91 9e 27 	lds	r24, 0x279E	; 0x80279e <udc_num_configuration>
    74ae:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    74b0:	b1 f1       	breq	.+108    	; 0x751e <udc_process_setup+0x528>
    74b2:	a0 91 9c 27 	lds	r26, 0x279C	; 0x80279c <udc_ptr_conf>
    74b6:	b0 91 9d 27 	lds	r27, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    74ba:	ed 91       	ld	r30, X+
    74bc:	fc 91       	ld	r31, X
    74be:	11 97       	sbiw	r26, 0x01	; 1
    74c0:	84 81       	ldd	r24, Z+4	; 0x04
    74c2:	88 23       	and	r24, r24
    74c4:	71 f1       	breq	.+92     	; 0x7522 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    74c6:	c0 e0       	ldi	r28, 0x00	; 0
    74c8:	ec 2f       	mov	r30, r28
    74ca:	f0 e0       	ldi	r31, 0x00	; 0
    74cc:	ee 0f       	add	r30, r30
    74ce:	ff 1f       	adc	r31, r31
    74d0:	12 96       	adiw	r26, 0x02	; 2
    74d2:	8d 91       	ld	r24, X+
    74d4:	9c 91       	ld	r25, X
    74d6:	13 97       	sbiw	r26, 0x03	; 3
    74d8:	e8 0f       	add	r30, r24
    74da:	f9 1f       	adc	r31, r25
    74dc:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    74de:	11 81       	ldd	r17, Z+1	; 0x01
    74e0:	d8 01       	movw	r26, r16
    74e2:	16 96       	adiw	r26, 0x06	; 6
    74e4:	ed 91       	ld	r30, X+
    74e6:	fc 91       	ld	r31, X
    74e8:	17 97       	sbiw	r26, 0x07	; 7
    74ea:	19 95       	eicall
    74ec:	68 2f       	mov	r22, r24
    74ee:	8c 2f       	mov	r24, r28
    74f0:	76 dc       	rcall	.-1812   	; 0x6dde <udc_update_iface_desc>
    74f2:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    74f4:	79 f1       	breq	.+94     	; 0x7554 <udc_process_setup+0x55e>
    74f6:	d8 01       	movw	r26, r16
    74f8:	14 96       	adiw	r26, 0x04	; 4
    74fa:	ed 91       	ld	r30, X+
    74fc:	fc 91       	ld	r31, X
    74fe:	15 97       	sbiw	r26, 0x05	; 5
    7500:	19 95       	eicall
    7502:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    7504:	27 c0       	rjmp	.+78     	; 0x7554 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7506:	cf 5f       	subi	r28, 0xFF	; 255
    7508:	a0 91 9c 27 	lds	r26, 0x279C	; 0x80279c <udc_ptr_conf>
    750c:	b0 91 9d 27 	lds	r27, 0x279D	; 0x80279d <udc_ptr_conf+0x1>
    7510:	ed 91       	ld	r30, X+
    7512:	fc 91       	ld	r31, X
    7514:	11 97       	sbiw	r26, 0x01	; 1
    7516:	94 81       	ldd	r25, Z+4	; 0x04
    7518:	c9 17       	cp	r28, r25
    751a:	b0 f2       	brcs	.-84     	; 0x74c8 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    751c:	1b c0       	rjmp	.+54     	; 0x7554 <udc_process_setup+0x55e>
    751e:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    7520:	19 c0       	rjmp	.+50     	; 0x7554 <udc_process_setup+0x55e>
    7522:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    7524:	17 c0       	rjmp	.+46     	; 0x7554 <udc_process_setup+0x55e>
    7526:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    7528:	15 c0       	rjmp	.+42     	; 0x7554 <udc_process_setup+0x55e>
    752a:	80 e0       	ldi	r24, 0x00	; 0
    752c:	13 c0       	rjmp	.+38     	; 0x7554 <udc_process_setup+0x55e>
    752e:	80 e0       	ldi	r24, 0x00	; 0
    7530:	11 c0       	rjmp	.+34     	; 0x7554 <udc_process_setup+0x55e>
    7532:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    7534:	0f c0       	rjmp	.+30     	; 0x7554 <udc_process_setup+0x55e>
    7536:	98 2f       	mov	r25, r24
    7538:	90 76       	andi	r25, 0x60	; 96
    753a:	09 f0       	breq	.+2      	; 0x753e <udc_process_setup+0x548>
    753c:	7b cf       	rjmp	.-266    	; 0x7434 <udc_process_setup+0x43e>
    753e:	74 cd       	rjmp	.-1304   	; 0x7028 <udc_process_setup+0x32>
    7540:	98 2f       	mov	r25, r24
    7542:	90 76       	andi	r25, 0x60	; 96
    7544:	09 f0       	breq	.+2      	; 0x7548 <udc_process_setup+0x552>
    7546:	76 cf       	rjmp	.-276    	; 0x7434 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    7548:	77 ce       	rjmp	.-786    	; 0x7238 <udc_process_setup+0x242>
		str = udc_string_product_name;
    754a:	3c e0       	ldi	r19, 0x0C	; 12
    754c:	e2 ed       	ldi	r30, 0xD2	; 210
    754e:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    7550:	eb cd       	rjmp	.-1066   	; 0x7128 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    7552:	81 e0       	ldi	r24, 0x01	; 1
    7554:	df 91       	pop	r29
    7556:	cf 91       	pop	r28
    7558:	1f 91       	pop	r17
    755a:	0f 91       	pop	r16
    755c:	08 95       	ret

0000755e <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    755e:	cf 93       	push	r28
    7560:	df 93       	push	r29
    7562:	1f 92       	push	r1
    7564:	cd b7       	in	r28, 0x3d	; 61
    7566:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    7568:	80 91 cd 27 	lds	r24, 0x27CD	; 0x8027cd <stdio_base>
    756c:	90 91 ce 27 	lds	r25, 0x27CE	; 0x8027ce <stdio_base+0x1>
    7570:	e0 91 c9 27 	lds	r30, 0x27C9	; 0x8027c9 <ptr_get>
    7574:	f0 91 ca 27 	lds	r31, 0x27CA	; 0x8027ca <ptr_get+0x1>
    7578:	be 01       	movw	r22, r28
    757a:	6f 5f       	subi	r22, 0xFF	; 255
    757c:	7f 4f       	sbci	r23, 0xFF	; 255
    757e:	19 95       	eicall
	return c;
    7580:	89 81       	ldd	r24, Y+1	; 0x01
}
    7582:	08 2e       	mov	r0, r24
    7584:	00 0c       	add	r0, r0
    7586:	99 0b       	sbc	r25, r25
    7588:	0f 90       	pop	r0
    758a:	df 91       	pop	r29
    758c:	cf 91       	pop	r28
    758e:	08 95       	ret

00007590 <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    7590:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <stdio_usb_interface_enable>
    7594:	88 23       	and	r24, r24
    7596:	81 f0       	breq	.+32     	; 0x75b8 <stdio_usb_putchar+0x28>
    7598:	86 2f       	mov	r24, r22
    759a:	08 2e       	mov	r0, r24
    759c:	00 0c       	add	r0, r0
    759e:	99 0b       	sbc	r25, r25
    75a0:	df db       	rcall	.-2114   	; 0x6d60 <udi_cdc_putc>
    75a2:	21 e0       	ldi	r18, 0x01	; 1
    75a4:	30 e0       	ldi	r19, 0x00	; 0
    75a6:	89 2b       	or	r24, r25
    75a8:	11 f0       	breq	.+4      	; 0x75ae <stdio_usb_putchar+0x1e>
    75aa:	20 e0       	ldi	r18, 0x00	; 0
    75ac:	30 e0       	ldi	r19, 0x00	; 0
    75ae:	88 27       	eor	r24, r24
    75b0:	99 27       	eor	r25, r25
    75b2:	82 1b       	sub	r24, r18
    75b4:	93 0b       	sbc	r25, r19
    75b6:	08 95       	ret
    75b8:	80 e0       	ldi	r24, 0x00	; 0
    75ba:	90 e0       	ldi	r25, 0x00	; 0
    75bc:	08 95       	ret

000075be <stdio_usb_getchar>:
    75be:	cf 93       	push	r28
    75c0:	df 93       	push	r29
    75c2:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <stdio_usb_interface_enable>
    75c6:	81 11       	cpse	r24, r1
    75c8:	03 c0       	rjmp	.+6      	; 0x75d0 <stdio_usb_getchar+0x12>
    75ca:	fb 01       	movw	r30, r22
    75cc:	10 82       	st	Z, r1
    75ce:	03 c0       	rjmp	.+6      	; 0x75d6 <stdio_usb_getchar+0x18>
    75d0:	eb 01       	movw	r28, r22
    75d2:	3e db       	rcall	.-2436   	; 0x6c50 <udi_cdc_getc>
    75d4:	88 83       	st	Y, r24
    75d6:	df 91       	pop	r29
    75d8:	cf 91       	pop	r28
    75da:	08 95       	ret

000075dc <stdio_usb_enable>:
    75dc:	81 e0       	ldi	r24, 0x01	; 1
    75de:	80 93 a4 27 	sts	0x27A4, r24	; 0x8027a4 <stdio_usb_interface_enable>
    75e2:	08 95       	ret

000075e4 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    75e4:	10 92 cd 27 	sts	0x27CD, r1	; 0x8027cd <stdio_base>
    75e8:	10 92 ce 27 	sts	0x27CE, r1	; 0x8027ce <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    75ec:	88 ec       	ldi	r24, 0xC8	; 200
    75ee:	9a e3       	ldi	r25, 0x3A	; 58
    75f0:	80 93 cb 27 	sts	0x27CB, r24	; 0x8027cb <ptr_put>
    75f4:	90 93 cc 27 	sts	0x27CC, r25	; 0x8027cc <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    75f8:	8f ed       	ldi	r24, 0xDF	; 223
    75fa:	9a e3       	ldi	r25, 0x3A	; 58
    75fc:	80 93 c9 27 	sts	0x27C9, r24	; 0x8027c9 <ptr_get>
    7600:	90 93 ca 27 	sts	0x27CA, r25	; 0x8027ca <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    7604:	9b dc       	rcall	.-1738   	; 0x6f3c <udc_start>
    7606:	6f ea       	ldi	r22, 0xAF	; 175
    7608:	7a e3       	ldi	r23, 0x3A	; 58
    760a:	89 e0       	ldi	r24, 0x09	; 9
    760c:	9b e3       	ldi	r25, 0x3B	; 59
    760e:	63 c2       	rjmp	.+1222   	; 0x7ad6 <fdevopen>
    7610:	08 95       	ret

00007612 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    7612:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    7614:	80 91 cd 27 	lds	r24, 0x27CD	; 0x8027cd <stdio_base>
    7618:	90 91 ce 27 	lds	r25, 0x27CE	; 0x8027ce <stdio_base+0x1>
    761c:	e0 91 cb 27 	lds	r30, 0x27CB	; 0x8027cb <ptr_put>
    7620:	f0 91 cc 27 	lds	r31, 0x27CC	; 0x8027cc <ptr_put+0x1>
    7624:	19 95       	eicall
    7626:	99 23       	and	r25, r25
    7628:	1c f0       	brlt	.+6      	; 0x7630 <_write+0x1e>
		return -1;
	}
	return 1;
    762a:	81 e0       	ldi	r24, 0x01	; 1
    762c:	90 e0       	ldi	r25, 0x00	; 0
    762e:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    7630:	8f ef       	ldi	r24, 0xFF	; 255
    7632:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    7634:	08 95       	ret

00007636 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    7636:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    763a:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    763c:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    763e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    7642:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    7644:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    7648:	08 95       	ret

0000764a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    764a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    764c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    764e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    7650:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    7652:	60 83       	st	Z, r22
	ret                             // Return to caller
    7654:	08 95       	ret

00007656 <__udivmodhi4>:
    7656:	aa 1b       	sub	r26, r26
    7658:	bb 1b       	sub	r27, r27
    765a:	51 e1       	ldi	r21, 0x11	; 17
    765c:	07 c0       	rjmp	.+14     	; 0x766c <__udivmodhi4_ep>

0000765e <__udivmodhi4_loop>:
    765e:	aa 1f       	adc	r26, r26
    7660:	bb 1f       	adc	r27, r27
    7662:	a6 17       	cp	r26, r22
    7664:	b7 07       	cpc	r27, r23
    7666:	10 f0       	brcs	.+4      	; 0x766c <__udivmodhi4_ep>
    7668:	a6 1b       	sub	r26, r22
    766a:	b7 0b       	sbc	r27, r23

0000766c <__udivmodhi4_ep>:
    766c:	88 1f       	adc	r24, r24
    766e:	99 1f       	adc	r25, r25
    7670:	5a 95       	dec	r21
    7672:	a9 f7       	brne	.-22     	; 0x765e <__udivmodhi4_loop>
    7674:	80 95       	com	r24
    7676:	90 95       	com	r25
    7678:	bc 01       	movw	r22, r24
    767a:	cd 01       	movw	r24, r26
    767c:	08 95       	ret

0000767e <__udivmodsi4>:
    767e:	a1 e2       	ldi	r26, 0x21	; 33
    7680:	1a 2e       	mov	r1, r26
    7682:	aa 1b       	sub	r26, r26
    7684:	bb 1b       	sub	r27, r27
    7686:	fd 01       	movw	r30, r26
    7688:	0d c0       	rjmp	.+26     	; 0x76a4 <__udivmodsi4_ep>

0000768a <__udivmodsi4_loop>:
    768a:	aa 1f       	adc	r26, r26
    768c:	bb 1f       	adc	r27, r27
    768e:	ee 1f       	adc	r30, r30
    7690:	ff 1f       	adc	r31, r31
    7692:	a2 17       	cp	r26, r18
    7694:	b3 07       	cpc	r27, r19
    7696:	e4 07       	cpc	r30, r20
    7698:	f5 07       	cpc	r31, r21
    769a:	20 f0       	brcs	.+8      	; 0x76a4 <__udivmodsi4_ep>
    769c:	a2 1b       	sub	r26, r18
    769e:	b3 0b       	sbc	r27, r19
    76a0:	e4 0b       	sbc	r30, r20
    76a2:	f5 0b       	sbc	r31, r21

000076a4 <__udivmodsi4_ep>:
    76a4:	66 1f       	adc	r22, r22
    76a6:	77 1f       	adc	r23, r23
    76a8:	88 1f       	adc	r24, r24
    76aa:	99 1f       	adc	r25, r25
    76ac:	1a 94       	dec	r1
    76ae:	69 f7       	brne	.-38     	; 0x768a <__udivmodsi4_loop>
    76b0:	60 95       	com	r22
    76b2:	70 95       	com	r23
    76b4:	80 95       	com	r24
    76b6:	90 95       	com	r25
    76b8:	9b 01       	movw	r18, r22
    76ba:	ac 01       	movw	r20, r24
    76bc:	bd 01       	movw	r22, r26
    76be:	cf 01       	movw	r24, r30
    76c0:	08 95       	ret

000076c2 <__tablejump2__>:
    76c2:	ee 0f       	add	r30, r30
    76c4:	ff 1f       	adc	r31, r31
    76c6:	88 1f       	adc	r24, r24
    76c8:	8b bf       	out	0x3b, r24	; 59
    76ca:	07 90       	elpm	r0, Z+
    76cc:	f6 91       	elpm	r31, Z
    76ce:	e0 2d       	mov	r30, r0
    76d0:	19 94       	eijmp

000076d2 <__umulhisi3>:
    76d2:	a2 9f       	mul	r26, r18
    76d4:	b0 01       	movw	r22, r0
    76d6:	b3 9f       	mul	r27, r19
    76d8:	c0 01       	movw	r24, r0
    76da:	a3 9f       	mul	r26, r19
    76dc:	70 0d       	add	r23, r0
    76de:	81 1d       	adc	r24, r1
    76e0:	11 24       	eor	r1, r1
    76e2:	91 1d       	adc	r25, r1
    76e4:	b2 9f       	mul	r27, r18
    76e6:	70 0d       	add	r23, r0
    76e8:	81 1d       	adc	r24, r1
    76ea:	11 24       	eor	r1, r1
    76ec:	91 1d       	adc	r25, r1
    76ee:	08 95       	ret

000076f0 <__subsf3>:
    76f0:	50 58       	subi	r21, 0x80	; 128

000076f2 <__addsf3>:
    76f2:	bb 27       	eor	r27, r27
    76f4:	aa 27       	eor	r26, r26
    76f6:	0e d0       	rcall	.+28     	; 0x7714 <__addsf3x>
    76f8:	48 c1       	rjmp	.+656    	; 0x798a <__fp_round>
    76fa:	39 d1       	rcall	.+626    	; 0x796e <__fp_pscA>
    76fc:	30 f0       	brcs	.+12     	; 0x770a <__addsf3+0x18>
    76fe:	3e d1       	rcall	.+636    	; 0x797c <__fp_pscB>
    7700:	20 f0       	brcs	.+8      	; 0x770a <__addsf3+0x18>
    7702:	31 f4       	brne	.+12     	; 0x7710 <__addsf3+0x1e>
    7704:	9f 3f       	cpi	r25, 0xFF	; 255
    7706:	11 f4       	brne	.+4      	; 0x770c <__addsf3+0x1a>
    7708:	1e f4       	brtc	.+6      	; 0x7710 <__addsf3+0x1e>
    770a:	2e c1       	rjmp	.+604    	; 0x7968 <__fp_nan>
    770c:	0e f4       	brtc	.+2      	; 0x7710 <__addsf3+0x1e>
    770e:	e0 95       	com	r30
    7710:	e7 fb       	bst	r30, 7
    7712:	24 c1       	rjmp	.+584    	; 0x795c <__fp_inf>

00007714 <__addsf3x>:
    7714:	e9 2f       	mov	r30, r25
    7716:	4a d1       	rcall	.+660    	; 0x79ac <__fp_split3>
    7718:	80 f3       	brcs	.-32     	; 0x76fa <__addsf3+0x8>
    771a:	ba 17       	cp	r27, r26
    771c:	62 07       	cpc	r22, r18
    771e:	73 07       	cpc	r23, r19
    7720:	84 07       	cpc	r24, r20
    7722:	95 07       	cpc	r25, r21
    7724:	18 f0       	brcs	.+6      	; 0x772c <__addsf3x+0x18>
    7726:	71 f4       	brne	.+28     	; 0x7744 <__addsf3x+0x30>
    7728:	9e f5       	brtc	.+102    	; 0x7790 <__addsf3x+0x7c>
    772a:	62 c1       	rjmp	.+708    	; 0x79f0 <__fp_zero>
    772c:	0e f4       	brtc	.+2      	; 0x7730 <__addsf3x+0x1c>
    772e:	e0 95       	com	r30
    7730:	0b 2e       	mov	r0, r27
    7732:	ba 2f       	mov	r27, r26
    7734:	a0 2d       	mov	r26, r0
    7736:	0b 01       	movw	r0, r22
    7738:	b9 01       	movw	r22, r18
    773a:	90 01       	movw	r18, r0
    773c:	0c 01       	movw	r0, r24
    773e:	ca 01       	movw	r24, r20
    7740:	a0 01       	movw	r20, r0
    7742:	11 24       	eor	r1, r1
    7744:	ff 27       	eor	r31, r31
    7746:	59 1b       	sub	r21, r25
    7748:	99 f0       	breq	.+38     	; 0x7770 <__addsf3x+0x5c>
    774a:	59 3f       	cpi	r21, 0xF9	; 249
    774c:	50 f4       	brcc	.+20     	; 0x7762 <__addsf3x+0x4e>
    774e:	50 3e       	cpi	r21, 0xE0	; 224
    7750:	68 f1       	brcs	.+90     	; 0x77ac <__addsf3x+0x98>
    7752:	1a 16       	cp	r1, r26
    7754:	f0 40       	sbci	r31, 0x00	; 0
    7756:	a2 2f       	mov	r26, r18
    7758:	23 2f       	mov	r18, r19
    775a:	34 2f       	mov	r19, r20
    775c:	44 27       	eor	r20, r20
    775e:	58 5f       	subi	r21, 0xF8	; 248
    7760:	f3 cf       	rjmp	.-26     	; 0x7748 <__addsf3x+0x34>
    7762:	46 95       	lsr	r20
    7764:	37 95       	ror	r19
    7766:	27 95       	ror	r18
    7768:	a7 95       	ror	r26
    776a:	f0 40       	sbci	r31, 0x00	; 0
    776c:	53 95       	inc	r21
    776e:	c9 f7       	brne	.-14     	; 0x7762 <__addsf3x+0x4e>
    7770:	7e f4       	brtc	.+30     	; 0x7790 <__addsf3x+0x7c>
    7772:	1f 16       	cp	r1, r31
    7774:	ba 0b       	sbc	r27, r26
    7776:	62 0b       	sbc	r22, r18
    7778:	73 0b       	sbc	r23, r19
    777a:	84 0b       	sbc	r24, r20
    777c:	ba f0       	brmi	.+46     	; 0x77ac <__addsf3x+0x98>
    777e:	91 50       	subi	r25, 0x01	; 1
    7780:	a1 f0       	breq	.+40     	; 0x77aa <__addsf3x+0x96>
    7782:	ff 0f       	add	r31, r31
    7784:	bb 1f       	adc	r27, r27
    7786:	66 1f       	adc	r22, r22
    7788:	77 1f       	adc	r23, r23
    778a:	88 1f       	adc	r24, r24
    778c:	c2 f7       	brpl	.-16     	; 0x777e <__addsf3x+0x6a>
    778e:	0e c0       	rjmp	.+28     	; 0x77ac <__addsf3x+0x98>
    7790:	ba 0f       	add	r27, r26
    7792:	62 1f       	adc	r22, r18
    7794:	73 1f       	adc	r23, r19
    7796:	84 1f       	adc	r24, r20
    7798:	48 f4       	brcc	.+18     	; 0x77ac <__addsf3x+0x98>
    779a:	87 95       	ror	r24
    779c:	77 95       	ror	r23
    779e:	67 95       	ror	r22
    77a0:	b7 95       	ror	r27
    77a2:	f7 95       	ror	r31
    77a4:	9e 3f       	cpi	r25, 0xFE	; 254
    77a6:	08 f0       	brcs	.+2      	; 0x77aa <__addsf3x+0x96>
    77a8:	b3 cf       	rjmp	.-154    	; 0x7710 <__addsf3+0x1e>
    77aa:	93 95       	inc	r25
    77ac:	88 0f       	add	r24, r24
    77ae:	08 f0       	brcs	.+2      	; 0x77b2 <__addsf3x+0x9e>
    77b0:	99 27       	eor	r25, r25
    77b2:	ee 0f       	add	r30, r30
    77b4:	97 95       	ror	r25
    77b6:	87 95       	ror	r24
    77b8:	08 95       	ret

000077ba <__divsf3>:
    77ba:	0c d0       	rcall	.+24     	; 0x77d4 <__divsf3x>
    77bc:	e6 c0       	rjmp	.+460    	; 0x798a <__fp_round>
    77be:	de d0       	rcall	.+444    	; 0x797c <__fp_pscB>
    77c0:	40 f0       	brcs	.+16     	; 0x77d2 <__divsf3+0x18>
    77c2:	d5 d0       	rcall	.+426    	; 0x796e <__fp_pscA>
    77c4:	30 f0       	brcs	.+12     	; 0x77d2 <__divsf3+0x18>
    77c6:	21 f4       	brne	.+8      	; 0x77d0 <__divsf3+0x16>
    77c8:	5f 3f       	cpi	r21, 0xFF	; 255
    77ca:	19 f0       	breq	.+6      	; 0x77d2 <__divsf3+0x18>
    77cc:	c7 c0       	rjmp	.+398    	; 0x795c <__fp_inf>
    77ce:	51 11       	cpse	r21, r1
    77d0:	10 c1       	rjmp	.+544    	; 0x79f2 <__fp_szero>
    77d2:	ca c0       	rjmp	.+404    	; 0x7968 <__fp_nan>

000077d4 <__divsf3x>:
    77d4:	eb d0       	rcall	.+470    	; 0x79ac <__fp_split3>
    77d6:	98 f3       	brcs	.-26     	; 0x77be <__divsf3+0x4>

000077d8 <__divsf3_pse>:
    77d8:	99 23       	and	r25, r25
    77da:	c9 f3       	breq	.-14     	; 0x77ce <__divsf3+0x14>
    77dc:	55 23       	and	r21, r21
    77de:	b1 f3       	breq	.-20     	; 0x77cc <__divsf3+0x12>
    77e0:	95 1b       	sub	r25, r21
    77e2:	55 0b       	sbc	r21, r21
    77e4:	bb 27       	eor	r27, r27
    77e6:	aa 27       	eor	r26, r26
    77e8:	62 17       	cp	r22, r18
    77ea:	73 07       	cpc	r23, r19
    77ec:	84 07       	cpc	r24, r20
    77ee:	38 f0       	brcs	.+14     	; 0x77fe <__divsf3_pse+0x26>
    77f0:	9f 5f       	subi	r25, 0xFF	; 255
    77f2:	5f 4f       	sbci	r21, 0xFF	; 255
    77f4:	22 0f       	add	r18, r18
    77f6:	33 1f       	adc	r19, r19
    77f8:	44 1f       	adc	r20, r20
    77fa:	aa 1f       	adc	r26, r26
    77fc:	a9 f3       	breq	.-22     	; 0x77e8 <__divsf3_pse+0x10>
    77fe:	33 d0       	rcall	.+102    	; 0x7866 <__divsf3_pse+0x8e>
    7800:	0e 2e       	mov	r0, r30
    7802:	3a f0       	brmi	.+14     	; 0x7812 <__divsf3_pse+0x3a>
    7804:	e0 e8       	ldi	r30, 0x80	; 128
    7806:	30 d0       	rcall	.+96     	; 0x7868 <__divsf3_pse+0x90>
    7808:	91 50       	subi	r25, 0x01	; 1
    780a:	50 40       	sbci	r21, 0x00	; 0
    780c:	e6 95       	lsr	r30
    780e:	00 1c       	adc	r0, r0
    7810:	ca f7       	brpl	.-14     	; 0x7804 <__divsf3_pse+0x2c>
    7812:	29 d0       	rcall	.+82     	; 0x7866 <__divsf3_pse+0x8e>
    7814:	fe 2f       	mov	r31, r30
    7816:	27 d0       	rcall	.+78     	; 0x7866 <__divsf3_pse+0x8e>
    7818:	66 0f       	add	r22, r22
    781a:	77 1f       	adc	r23, r23
    781c:	88 1f       	adc	r24, r24
    781e:	bb 1f       	adc	r27, r27
    7820:	26 17       	cp	r18, r22
    7822:	37 07       	cpc	r19, r23
    7824:	48 07       	cpc	r20, r24
    7826:	ab 07       	cpc	r26, r27
    7828:	b0 e8       	ldi	r27, 0x80	; 128
    782a:	09 f0       	breq	.+2      	; 0x782e <__divsf3_pse+0x56>
    782c:	bb 0b       	sbc	r27, r27
    782e:	80 2d       	mov	r24, r0
    7830:	bf 01       	movw	r22, r30
    7832:	ff 27       	eor	r31, r31
    7834:	93 58       	subi	r25, 0x83	; 131
    7836:	5f 4f       	sbci	r21, 0xFF	; 255
    7838:	2a f0       	brmi	.+10     	; 0x7844 <__divsf3_pse+0x6c>
    783a:	9e 3f       	cpi	r25, 0xFE	; 254
    783c:	51 05       	cpc	r21, r1
    783e:	68 f0       	brcs	.+26     	; 0x785a <__divsf3_pse+0x82>
    7840:	8d c0       	rjmp	.+282    	; 0x795c <__fp_inf>
    7842:	d7 c0       	rjmp	.+430    	; 0x79f2 <__fp_szero>
    7844:	5f 3f       	cpi	r21, 0xFF	; 255
    7846:	ec f3       	brlt	.-6      	; 0x7842 <__divsf3_pse+0x6a>
    7848:	98 3e       	cpi	r25, 0xE8	; 232
    784a:	dc f3       	brlt	.-10     	; 0x7842 <__divsf3_pse+0x6a>
    784c:	86 95       	lsr	r24
    784e:	77 95       	ror	r23
    7850:	67 95       	ror	r22
    7852:	b7 95       	ror	r27
    7854:	f7 95       	ror	r31
    7856:	9f 5f       	subi	r25, 0xFF	; 255
    7858:	c9 f7       	brne	.-14     	; 0x784c <__divsf3_pse+0x74>
    785a:	88 0f       	add	r24, r24
    785c:	91 1d       	adc	r25, r1
    785e:	96 95       	lsr	r25
    7860:	87 95       	ror	r24
    7862:	97 f9       	bld	r25, 7
    7864:	08 95       	ret
    7866:	e1 e0       	ldi	r30, 0x01	; 1
    7868:	66 0f       	add	r22, r22
    786a:	77 1f       	adc	r23, r23
    786c:	88 1f       	adc	r24, r24
    786e:	bb 1f       	adc	r27, r27
    7870:	62 17       	cp	r22, r18
    7872:	73 07       	cpc	r23, r19
    7874:	84 07       	cpc	r24, r20
    7876:	ba 07       	cpc	r27, r26
    7878:	20 f0       	brcs	.+8      	; 0x7882 <__divsf3_pse+0xaa>
    787a:	62 1b       	sub	r22, r18
    787c:	73 0b       	sbc	r23, r19
    787e:	84 0b       	sbc	r24, r20
    7880:	ba 0b       	sbc	r27, r26
    7882:	ee 1f       	adc	r30, r30
    7884:	88 f7       	brcc	.-30     	; 0x7868 <__divsf3_pse+0x90>
    7886:	e0 95       	com	r30
    7888:	08 95       	ret

0000788a <__fixunssfsi>:
    788a:	98 d0       	rcall	.+304    	; 0x79bc <__fp_splitA>
    788c:	88 f0       	brcs	.+34     	; 0x78b0 <__fixunssfsi+0x26>
    788e:	9f 57       	subi	r25, 0x7F	; 127
    7890:	90 f0       	brcs	.+36     	; 0x78b6 <__fixunssfsi+0x2c>
    7892:	b9 2f       	mov	r27, r25
    7894:	99 27       	eor	r25, r25
    7896:	b7 51       	subi	r27, 0x17	; 23
    7898:	a0 f0       	brcs	.+40     	; 0x78c2 <__fixunssfsi+0x38>
    789a:	d1 f0       	breq	.+52     	; 0x78d0 <__fixunssfsi+0x46>
    789c:	66 0f       	add	r22, r22
    789e:	77 1f       	adc	r23, r23
    78a0:	88 1f       	adc	r24, r24
    78a2:	99 1f       	adc	r25, r25
    78a4:	1a f0       	brmi	.+6      	; 0x78ac <__fixunssfsi+0x22>
    78a6:	ba 95       	dec	r27
    78a8:	c9 f7       	brne	.-14     	; 0x789c <__fixunssfsi+0x12>
    78aa:	12 c0       	rjmp	.+36     	; 0x78d0 <__fixunssfsi+0x46>
    78ac:	b1 30       	cpi	r27, 0x01	; 1
    78ae:	81 f0       	breq	.+32     	; 0x78d0 <__fixunssfsi+0x46>
    78b0:	9f d0       	rcall	.+318    	; 0x79f0 <__fp_zero>
    78b2:	b1 e0       	ldi	r27, 0x01	; 1
    78b4:	08 95       	ret
    78b6:	9c c0       	rjmp	.+312    	; 0x79f0 <__fp_zero>
    78b8:	67 2f       	mov	r22, r23
    78ba:	78 2f       	mov	r23, r24
    78bc:	88 27       	eor	r24, r24
    78be:	b8 5f       	subi	r27, 0xF8	; 248
    78c0:	39 f0       	breq	.+14     	; 0x78d0 <__fixunssfsi+0x46>
    78c2:	b9 3f       	cpi	r27, 0xF9	; 249
    78c4:	cc f3       	brlt	.-14     	; 0x78b8 <__fixunssfsi+0x2e>
    78c6:	86 95       	lsr	r24
    78c8:	77 95       	ror	r23
    78ca:	67 95       	ror	r22
    78cc:	b3 95       	inc	r27
    78ce:	d9 f7       	brne	.-10     	; 0x78c6 <__fixunssfsi+0x3c>
    78d0:	3e f4       	brtc	.+14     	; 0x78e0 <__fixunssfsi+0x56>
    78d2:	90 95       	com	r25
    78d4:	80 95       	com	r24
    78d6:	70 95       	com	r23
    78d8:	61 95       	neg	r22
    78da:	7f 4f       	sbci	r23, 0xFF	; 255
    78dc:	8f 4f       	sbci	r24, 0xFF	; 255
    78de:	9f 4f       	sbci	r25, 0xFF	; 255
    78e0:	08 95       	ret

000078e2 <__floatunsisf>:
    78e2:	e8 94       	clt
    78e4:	09 c0       	rjmp	.+18     	; 0x78f8 <__floatsisf+0x12>

000078e6 <__floatsisf>:
    78e6:	97 fb       	bst	r25, 7
    78e8:	3e f4       	brtc	.+14     	; 0x78f8 <__floatsisf+0x12>
    78ea:	90 95       	com	r25
    78ec:	80 95       	com	r24
    78ee:	70 95       	com	r23
    78f0:	61 95       	neg	r22
    78f2:	7f 4f       	sbci	r23, 0xFF	; 255
    78f4:	8f 4f       	sbci	r24, 0xFF	; 255
    78f6:	9f 4f       	sbci	r25, 0xFF	; 255
    78f8:	99 23       	and	r25, r25
    78fa:	a9 f0       	breq	.+42     	; 0x7926 <__floatsisf+0x40>
    78fc:	f9 2f       	mov	r31, r25
    78fe:	96 e9       	ldi	r25, 0x96	; 150
    7900:	bb 27       	eor	r27, r27
    7902:	93 95       	inc	r25
    7904:	f6 95       	lsr	r31
    7906:	87 95       	ror	r24
    7908:	77 95       	ror	r23
    790a:	67 95       	ror	r22
    790c:	b7 95       	ror	r27
    790e:	f1 11       	cpse	r31, r1
    7910:	f8 cf       	rjmp	.-16     	; 0x7902 <__floatsisf+0x1c>
    7912:	fa f4       	brpl	.+62     	; 0x7952 <__floatsisf+0x6c>
    7914:	bb 0f       	add	r27, r27
    7916:	11 f4       	brne	.+4      	; 0x791c <__floatsisf+0x36>
    7918:	60 ff       	sbrs	r22, 0
    791a:	1b c0       	rjmp	.+54     	; 0x7952 <__floatsisf+0x6c>
    791c:	6f 5f       	subi	r22, 0xFF	; 255
    791e:	7f 4f       	sbci	r23, 0xFF	; 255
    7920:	8f 4f       	sbci	r24, 0xFF	; 255
    7922:	9f 4f       	sbci	r25, 0xFF	; 255
    7924:	16 c0       	rjmp	.+44     	; 0x7952 <__floatsisf+0x6c>
    7926:	88 23       	and	r24, r24
    7928:	11 f0       	breq	.+4      	; 0x792e <__floatsisf+0x48>
    792a:	96 e9       	ldi	r25, 0x96	; 150
    792c:	11 c0       	rjmp	.+34     	; 0x7950 <__floatsisf+0x6a>
    792e:	77 23       	and	r23, r23
    7930:	21 f0       	breq	.+8      	; 0x793a <__floatsisf+0x54>
    7932:	9e e8       	ldi	r25, 0x8E	; 142
    7934:	87 2f       	mov	r24, r23
    7936:	76 2f       	mov	r23, r22
    7938:	05 c0       	rjmp	.+10     	; 0x7944 <__floatsisf+0x5e>
    793a:	66 23       	and	r22, r22
    793c:	71 f0       	breq	.+28     	; 0x795a <__floatsisf+0x74>
    793e:	96 e8       	ldi	r25, 0x86	; 134
    7940:	86 2f       	mov	r24, r22
    7942:	70 e0       	ldi	r23, 0x00	; 0
    7944:	60 e0       	ldi	r22, 0x00	; 0
    7946:	2a f0       	brmi	.+10     	; 0x7952 <__floatsisf+0x6c>
    7948:	9a 95       	dec	r25
    794a:	66 0f       	add	r22, r22
    794c:	77 1f       	adc	r23, r23
    794e:	88 1f       	adc	r24, r24
    7950:	da f7       	brpl	.-10     	; 0x7948 <__floatsisf+0x62>
    7952:	88 0f       	add	r24, r24
    7954:	96 95       	lsr	r25
    7956:	87 95       	ror	r24
    7958:	97 f9       	bld	r25, 7
    795a:	08 95       	ret

0000795c <__fp_inf>:
    795c:	97 f9       	bld	r25, 7
    795e:	9f 67       	ori	r25, 0x7F	; 127
    7960:	80 e8       	ldi	r24, 0x80	; 128
    7962:	70 e0       	ldi	r23, 0x00	; 0
    7964:	60 e0       	ldi	r22, 0x00	; 0
    7966:	08 95       	ret

00007968 <__fp_nan>:
    7968:	9f ef       	ldi	r25, 0xFF	; 255
    796a:	80 ec       	ldi	r24, 0xC0	; 192
    796c:	08 95       	ret

0000796e <__fp_pscA>:
    796e:	00 24       	eor	r0, r0
    7970:	0a 94       	dec	r0
    7972:	16 16       	cp	r1, r22
    7974:	17 06       	cpc	r1, r23
    7976:	18 06       	cpc	r1, r24
    7978:	09 06       	cpc	r0, r25
    797a:	08 95       	ret

0000797c <__fp_pscB>:
    797c:	00 24       	eor	r0, r0
    797e:	0a 94       	dec	r0
    7980:	12 16       	cp	r1, r18
    7982:	13 06       	cpc	r1, r19
    7984:	14 06       	cpc	r1, r20
    7986:	05 06       	cpc	r0, r21
    7988:	08 95       	ret

0000798a <__fp_round>:
    798a:	09 2e       	mov	r0, r25
    798c:	03 94       	inc	r0
    798e:	00 0c       	add	r0, r0
    7990:	11 f4       	brne	.+4      	; 0x7996 <__fp_round+0xc>
    7992:	88 23       	and	r24, r24
    7994:	52 f0       	brmi	.+20     	; 0x79aa <__fp_round+0x20>
    7996:	bb 0f       	add	r27, r27
    7998:	40 f4       	brcc	.+16     	; 0x79aa <__fp_round+0x20>
    799a:	bf 2b       	or	r27, r31
    799c:	11 f4       	brne	.+4      	; 0x79a2 <__fp_round+0x18>
    799e:	60 ff       	sbrs	r22, 0
    79a0:	04 c0       	rjmp	.+8      	; 0x79aa <__fp_round+0x20>
    79a2:	6f 5f       	subi	r22, 0xFF	; 255
    79a4:	7f 4f       	sbci	r23, 0xFF	; 255
    79a6:	8f 4f       	sbci	r24, 0xFF	; 255
    79a8:	9f 4f       	sbci	r25, 0xFF	; 255
    79aa:	08 95       	ret

000079ac <__fp_split3>:
    79ac:	57 fd       	sbrc	r21, 7
    79ae:	90 58       	subi	r25, 0x80	; 128
    79b0:	44 0f       	add	r20, r20
    79b2:	55 1f       	adc	r21, r21
    79b4:	59 f0       	breq	.+22     	; 0x79cc <__fp_splitA+0x10>
    79b6:	5f 3f       	cpi	r21, 0xFF	; 255
    79b8:	71 f0       	breq	.+28     	; 0x79d6 <__fp_splitA+0x1a>
    79ba:	47 95       	ror	r20

000079bc <__fp_splitA>:
    79bc:	88 0f       	add	r24, r24
    79be:	97 fb       	bst	r25, 7
    79c0:	99 1f       	adc	r25, r25
    79c2:	61 f0       	breq	.+24     	; 0x79dc <__fp_splitA+0x20>
    79c4:	9f 3f       	cpi	r25, 0xFF	; 255
    79c6:	79 f0       	breq	.+30     	; 0x79e6 <__fp_splitA+0x2a>
    79c8:	87 95       	ror	r24
    79ca:	08 95       	ret
    79cc:	12 16       	cp	r1, r18
    79ce:	13 06       	cpc	r1, r19
    79d0:	14 06       	cpc	r1, r20
    79d2:	55 1f       	adc	r21, r21
    79d4:	f2 cf       	rjmp	.-28     	; 0x79ba <__fp_split3+0xe>
    79d6:	46 95       	lsr	r20
    79d8:	f1 df       	rcall	.-30     	; 0x79bc <__fp_splitA>
    79da:	08 c0       	rjmp	.+16     	; 0x79ec <__fp_splitA+0x30>
    79dc:	16 16       	cp	r1, r22
    79de:	17 06       	cpc	r1, r23
    79e0:	18 06       	cpc	r1, r24
    79e2:	99 1f       	adc	r25, r25
    79e4:	f1 cf       	rjmp	.-30     	; 0x79c8 <__fp_splitA+0xc>
    79e6:	86 95       	lsr	r24
    79e8:	71 05       	cpc	r23, r1
    79ea:	61 05       	cpc	r22, r1
    79ec:	08 94       	sec
    79ee:	08 95       	ret

000079f0 <__fp_zero>:
    79f0:	e8 94       	clt

000079f2 <__fp_szero>:
    79f2:	bb 27       	eor	r27, r27
    79f4:	66 27       	eor	r22, r22
    79f6:	77 27       	eor	r23, r23
    79f8:	cb 01       	movw	r24, r22
    79fa:	97 f9       	bld	r25, 7
    79fc:	08 95       	ret

000079fe <__mulsf3>:
    79fe:	0b d0       	rcall	.+22     	; 0x7a16 <__mulsf3x>
    7a00:	c4 cf       	rjmp	.-120    	; 0x798a <__fp_round>
    7a02:	b5 df       	rcall	.-150    	; 0x796e <__fp_pscA>
    7a04:	28 f0       	brcs	.+10     	; 0x7a10 <__mulsf3+0x12>
    7a06:	ba df       	rcall	.-140    	; 0x797c <__fp_pscB>
    7a08:	18 f0       	brcs	.+6      	; 0x7a10 <__mulsf3+0x12>
    7a0a:	95 23       	and	r25, r21
    7a0c:	09 f0       	breq	.+2      	; 0x7a10 <__mulsf3+0x12>
    7a0e:	a6 cf       	rjmp	.-180    	; 0x795c <__fp_inf>
    7a10:	ab cf       	rjmp	.-170    	; 0x7968 <__fp_nan>
    7a12:	11 24       	eor	r1, r1
    7a14:	ee cf       	rjmp	.-36     	; 0x79f2 <__fp_szero>

00007a16 <__mulsf3x>:
    7a16:	ca df       	rcall	.-108    	; 0x79ac <__fp_split3>
    7a18:	a0 f3       	brcs	.-24     	; 0x7a02 <__mulsf3+0x4>

00007a1a <__mulsf3_pse>:
    7a1a:	95 9f       	mul	r25, r21
    7a1c:	d1 f3       	breq	.-12     	; 0x7a12 <__mulsf3+0x14>
    7a1e:	95 0f       	add	r25, r21
    7a20:	50 e0       	ldi	r21, 0x00	; 0
    7a22:	55 1f       	adc	r21, r21
    7a24:	62 9f       	mul	r22, r18
    7a26:	f0 01       	movw	r30, r0
    7a28:	72 9f       	mul	r23, r18
    7a2a:	bb 27       	eor	r27, r27
    7a2c:	f0 0d       	add	r31, r0
    7a2e:	b1 1d       	adc	r27, r1
    7a30:	63 9f       	mul	r22, r19
    7a32:	aa 27       	eor	r26, r26
    7a34:	f0 0d       	add	r31, r0
    7a36:	b1 1d       	adc	r27, r1
    7a38:	aa 1f       	adc	r26, r26
    7a3a:	64 9f       	mul	r22, r20
    7a3c:	66 27       	eor	r22, r22
    7a3e:	b0 0d       	add	r27, r0
    7a40:	a1 1d       	adc	r26, r1
    7a42:	66 1f       	adc	r22, r22
    7a44:	82 9f       	mul	r24, r18
    7a46:	22 27       	eor	r18, r18
    7a48:	b0 0d       	add	r27, r0
    7a4a:	a1 1d       	adc	r26, r1
    7a4c:	62 1f       	adc	r22, r18
    7a4e:	73 9f       	mul	r23, r19
    7a50:	b0 0d       	add	r27, r0
    7a52:	a1 1d       	adc	r26, r1
    7a54:	62 1f       	adc	r22, r18
    7a56:	83 9f       	mul	r24, r19
    7a58:	a0 0d       	add	r26, r0
    7a5a:	61 1d       	adc	r22, r1
    7a5c:	22 1f       	adc	r18, r18
    7a5e:	74 9f       	mul	r23, r20
    7a60:	33 27       	eor	r19, r19
    7a62:	a0 0d       	add	r26, r0
    7a64:	61 1d       	adc	r22, r1
    7a66:	23 1f       	adc	r18, r19
    7a68:	84 9f       	mul	r24, r20
    7a6a:	60 0d       	add	r22, r0
    7a6c:	21 1d       	adc	r18, r1
    7a6e:	82 2f       	mov	r24, r18
    7a70:	76 2f       	mov	r23, r22
    7a72:	6a 2f       	mov	r22, r26
    7a74:	11 24       	eor	r1, r1
    7a76:	9f 57       	subi	r25, 0x7F	; 127
    7a78:	50 40       	sbci	r21, 0x00	; 0
    7a7a:	8a f0       	brmi	.+34     	; 0x7a9e <__mulsf3_pse+0x84>
    7a7c:	e1 f0       	breq	.+56     	; 0x7ab6 <__mulsf3_pse+0x9c>
    7a7e:	88 23       	and	r24, r24
    7a80:	4a f0       	brmi	.+18     	; 0x7a94 <__mulsf3_pse+0x7a>
    7a82:	ee 0f       	add	r30, r30
    7a84:	ff 1f       	adc	r31, r31
    7a86:	bb 1f       	adc	r27, r27
    7a88:	66 1f       	adc	r22, r22
    7a8a:	77 1f       	adc	r23, r23
    7a8c:	88 1f       	adc	r24, r24
    7a8e:	91 50       	subi	r25, 0x01	; 1
    7a90:	50 40       	sbci	r21, 0x00	; 0
    7a92:	a9 f7       	brne	.-22     	; 0x7a7e <__mulsf3_pse+0x64>
    7a94:	9e 3f       	cpi	r25, 0xFE	; 254
    7a96:	51 05       	cpc	r21, r1
    7a98:	70 f0       	brcs	.+28     	; 0x7ab6 <__mulsf3_pse+0x9c>
    7a9a:	60 cf       	rjmp	.-320    	; 0x795c <__fp_inf>
    7a9c:	aa cf       	rjmp	.-172    	; 0x79f2 <__fp_szero>
    7a9e:	5f 3f       	cpi	r21, 0xFF	; 255
    7aa0:	ec f3       	brlt	.-6      	; 0x7a9c <__mulsf3_pse+0x82>
    7aa2:	98 3e       	cpi	r25, 0xE8	; 232
    7aa4:	dc f3       	brlt	.-10     	; 0x7a9c <__mulsf3_pse+0x82>
    7aa6:	86 95       	lsr	r24
    7aa8:	77 95       	ror	r23
    7aaa:	67 95       	ror	r22
    7aac:	b7 95       	ror	r27
    7aae:	f7 95       	ror	r31
    7ab0:	e7 95       	ror	r30
    7ab2:	9f 5f       	subi	r25, 0xFF	; 255
    7ab4:	c1 f7       	brne	.-16     	; 0x7aa6 <__mulsf3_pse+0x8c>
    7ab6:	fe 2b       	or	r31, r30
    7ab8:	88 0f       	add	r24, r24
    7aba:	91 1d       	adc	r25, r1
    7abc:	96 95       	lsr	r25
    7abe:	87 95       	ror	r24
    7ac0:	97 f9       	bld	r25, 7
    7ac2:	08 95       	ret

00007ac4 <memcpy>:
    7ac4:	fb 01       	movw	r30, r22
    7ac6:	dc 01       	movw	r26, r24
    7ac8:	02 c0       	rjmp	.+4      	; 0x7ace <memcpy+0xa>
    7aca:	01 90       	ld	r0, Z+
    7acc:	0d 92       	st	X+, r0
    7ace:	41 50       	subi	r20, 0x01	; 1
    7ad0:	50 40       	sbci	r21, 0x00	; 0
    7ad2:	d8 f7       	brcc	.-10     	; 0x7aca <memcpy+0x6>
    7ad4:	08 95       	ret

00007ad6 <fdevopen>:
    7ad6:	0f 93       	push	r16
    7ad8:	1f 93       	push	r17
    7ada:	cf 93       	push	r28
    7adc:	df 93       	push	r29
    7ade:	00 97       	sbiw	r24, 0x00	; 0
    7ae0:	31 f4       	brne	.+12     	; 0x7aee <fdevopen+0x18>
    7ae2:	61 15       	cp	r22, r1
    7ae4:	71 05       	cpc	r23, r1
    7ae6:	19 f4       	brne	.+6      	; 0x7aee <fdevopen+0x18>
    7ae8:	80 e0       	ldi	r24, 0x00	; 0
    7aea:	90 e0       	ldi	r25, 0x00	; 0
    7aec:	39 c0       	rjmp	.+114    	; 0x7b60 <fdevopen+0x8a>
    7aee:	8b 01       	movw	r16, r22
    7af0:	ec 01       	movw	r28, r24
    7af2:	6e e0       	ldi	r22, 0x0E	; 14
    7af4:	70 e0       	ldi	r23, 0x00	; 0
    7af6:	81 e0       	ldi	r24, 0x01	; 1
    7af8:	90 e0       	ldi	r25, 0x00	; 0
    7afa:	71 d2       	rcall	.+1250   	; 0x7fde <calloc>
    7afc:	fc 01       	movw	r30, r24
    7afe:	89 2b       	or	r24, r25
    7b00:	99 f3       	breq	.-26     	; 0x7ae8 <fdevopen+0x12>
    7b02:	80 e8       	ldi	r24, 0x80	; 128
    7b04:	83 83       	std	Z+3, r24	; 0x03
    7b06:	01 15       	cp	r16, r1
    7b08:	11 05       	cpc	r17, r1
    7b0a:	71 f0       	breq	.+28     	; 0x7b28 <fdevopen+0x52>
    7b0c:	02 87       	std	Z+10, r16	; 0x0a
    7b0e:	13 87       	std	Z+11, r17	; 0x0b
    7b10:	81 e8       	ldi	r24, 0x81	; 129
    7b12:	83 83       	std	Z+3, r24	; 0x03
    7b14:	80 91 cf 27 	lds	r24, 0x27CF	; 0x8027cf <__iob>
    7b18:	90 91 d0 27 	lds	r25, 0x27D0	; 0x8027d0 <__iob+0x1>
    7b1c:	89 2b       	or	r24, r25
    7b1e:	21 f4       	brne	.+8      	; 0x7b28 <fdevopen+0x52>
    7b20:	e0 93 cf 27 	sts	0x27CF, r30	; 0x8027cf <__iob>
    7b24:	f0 93 d0 27 	sts	0x27D0, r31	; 0x8027d0 <__iob+0x1>
    7b28:	20 97       	sbiw	r28, 0x00	; 0
    7b2a:	c9 f0       	breq	.+50     	; 0x7b5e <fdevopen+0x88>
    7b2c:	c0 87       	std	Z+8, r28	; 0x08
    7b2e:	d1 87       	std	Z+9, r29	; 0x09
    7b30:	83 81       	ldd	r24, Z+3	; 0x03
    7b32:	82 60       	ori	r24, 0x02	; 2
    7b34:	83 83       	std	Z+3, r24	; 0x03
    7b36:	80 91 d1 27 	lds	r24, 0x27D1	; 0x8027d1 <__iob+0x2>
    7b3a:	90 91 d2 27 	lds	r25, 0x27D2	; 0x8027d2 <__iob+0x3>
    7b3e:	89 2b       	or	r24, r25
    7b40:	71 f4       	brne	.+28     	; 0x7b5e <fdevopen+0x88>
    7b42:	e0 93 d1 27 	sts	0x27D1, r30	; 0x8027d1 <__iob+0x2>
    7b46:	f0 93 d2 27 	sts	0x27D2, r31	; 0x8027d2 <__iob+0x3>
    7b4a:	80 91 d3 27 	lds	r24, 0x27D3	; 0x8027d3 <__iob+0x4>
    7b4e:	90 91 d4 27 	lds	r25, 0x27D4	; 0x8027d4 <__iob+0x5>
    7b52:	89 2b       	or	r24, r25
    7b54:	21 f4       	brne	.+8      	; 0x7b5e <fdevopen+0x88>
    7b56:	e0 93 d3 27 	sts	0x27D3, r30	; 0x8027d3 <__iob+0x4>
    7b5a:	f0 93 d4 27 	sts	0x27D4, r31	; 0x8027d4 <__iob+0x5>
    7b5e:	cf 01       	movw	r24, r30
    7b60:	df 91       	pop	r29
    7b62:	cf 91       	pop	r28
    7b64:	1f 91       	pop	r17
    7b66:	0f 91       	pop	r16
    7b68:	08 95       	ret

00007b6a <printf>:
    7b6a:	cf 93       	push	r28
    7b6c:	df 93       	push	r29
    7b6e:	cd b7       	in	r28, 0x3d	; 61
    7b70:	de b7       	in	r29, 0x3e	; 62
    7b72:	ae 01       	movw	r20, r28
    7b74:	4a 5f       	subi	r20, 0xFA	; 250
    7b76:	5f 4f       	sbci	r21, 0xFF	; 255
    7b78:	fa 01       	movw	r30, r20
    7b7a:	61 91       	ld	r22, Z+
    7b7c:	71 91       	ld	r23, Z+
    7b7e:	af 01       	movw	r20, r30
    7b80:	80 91 d1 27 	lds	r24, 0x27D1	; 0x8027d1 <__iob+0x2>
    7b84:	90 91 d2 27 	lds	r25, 0x27D2	; 0x8027d2 <__iob+0x3>
    7b88:	33 d0       	rcall	.+102    	; 0x7bf0 <vfprintf>
    7b8a:	df 91       	pop	r29
    7b8c:	cf 91       	pop	r28
    7b8e:	08 95       	ret

00007b90 <puts>:
    7b90:	0f 93       	push	r16
    7b92:	1f 93       	push	r17
    7b94:	cf 93       	push	r28
    7b96:	df 93       	push	r29
    7b98:	e0 91 d1 27 	lds	r30, 0x27D1	; 0x8027d1 <__iob+0x2>
    7b9c:	f0 91 d2 27 	lds	r31, 0x27D2	; 0x8027d2 <__iob+0x3>
    7ba0:	23 81       	ldd	r18, Z+3	; 0x03
    7ba2:	21 ff       	sbrs	r18, 1
    7ba4:	1b c0       	rjmp	.+54     	; 0x7bdc <puts+0x4c>
    7ba6:	8c 01       	movw	r16, r24
    7ba8:	d0 e0       	ldi	r29, 0x00	; 0
    7baa:	c0 e0       	ldi	r28, 0x00	; 0
    7bac:	f8 01       	movw	r30, r16
    7bae:	81 91       	ld	r24, Z+
    7bb0:	8f 01       	movw	r16, r30
    7bb2:	60 91 d1 27 	lds	r22, 0x27D1	; 0x8027d1 <__iob+0x2>
    7bb6:	70 91 d2 27 	lds	r23, 0x27D2	; 0x8027d2 <__iob+0x3>
    7bba:	db 01       	movw	r26, r22
    7bbc:	18 96       	adiw	r26, 0x08	; 8
    7bbe:	ed 91       	ld	r30, X+
    7bc0:	fc 91       	ld	r31, X
    7bc2:	19 97       	sbiw	r26, 0x09	; 9
    7bc4:	88 23       	and	r24, r24
    7bc6:	31 f0       	breq	.+12     	; 0x7bd4 <puts+0x44>
    7bc8:	19 95       	eicall
    7bca:	89 2b       	or	r24, r25
    7bcc:	79 f3       	breq	.-34     	; 0x7bac <puts+0x1c>
    7bce:	df ef       	ldi	r29, 0xFF	; 255
    7bd0:	cf ef       	ldi	r28, 0xFF	; 255
    7bd2:	ec cf       	rjmp	.-40     	; 0x7bac <puts+0x1c>
    7bd4:	8a e0       	ldi	r24, 0x0A	; 10
    7bd6:	19 95       	eicall
    7bd8:	89 2b       	or	r24, r25
    7bda:	19 f0       	breq	.+6      	; 0x7be2 <puts+0x52>
    7bdc:	8f ef       	ldi	r24, 0xFF	; 255
    7bde:	9f ef       	ldi	r25, 0xFF	; 255
    7be0:	02 c0       	rjmp	.+4      	; 0x7be6 <puts+0x56>
    7be2:	8d 2f       	mov	r24, r29
    7be4:	9c 2f       	mov	r25, r28
    7be6:	df 91       	pop	r29
    7be8:	cf 91       	pop	r28
    7bea:	1f 91       	pop	r17
    7bec:	0f 91       	pop	r16
    7bee:	08 95       	ret

00007bf0 <vfprintf>:
    7bf0:	2f 92       	push	r2
    7bf2:	3f 92       	push	r3
    7bf4:	4f 92       	push	r4
    7bf6:	5f 92       	push	r5
    7bf8:	6f 92       	push	r6
    7bfa:	7f 92       	push	r7
    7bfc:	8f 92       	push	r8
    7bfe:	9f 92       	push	r9
    7c00:	af 92       	push	r10
    7c02:	bf 92       	push	r11
    7c04:	cf 92       	push	r12
    7c06:	df 92       	push	r13
    7c08:	ef 92       	push	r14
    7c0a:	ff 92       	push	r15
    7c0c:	0f 93       	push	r16
    7c0e:	1f 93       	push	r17
    7c10:	cf 93       	push	r28
    7c12:	df 93       	push	r29
    7c14:	cd b7       	in	r28, 0x3d	; 61
    7c16:	de b7       	in	r29, 0x3e	; 62
    7c18:	2b 97       	sbiw	r28, 0x0b	; 11
    7c1a:	cd bf       	out	0x3d, r28	; 61
    7c1c:	de bf       	out	0x3e, r29	; 62
    7c1e:	6c 01       	movw	r12, r24
    7c20:	7b 01       	movw	r14, r22
    7c22:	8a 01       	movw	r16, r20
    7c24:	fc 01       	movw	r30, r24
    7c26:	16 82       	std	Z+6, r1	; 0x06
    7c28:	17 82       	std	Z+7, r1	; 0x07
    7c2a:	83 81       	ldd	r24, Z+3	; 0x03
    7c2c:	81 ff       	sbrs	r24, 1
    7c2e:	bf c1       	rjmp	.+894    	; 0x7fae <vfprintf+0x3be>
    7c30:	ce 01       	movw	r24, r28
    7c32:	01 96       	adiw	r24, 0x01	; 1
    7c34:	3c 01       	movw	r6, r24
    7c36:	f6 01       	movw	r30, r12
    7c38:	93 81       	ldd	r25, Z+3	; 0x03
    7c3a:	f7 01       	movw	r30, r14
    7c3c:	93 fd       	sbrc	r25, 3
    7c3e:	85 91       	lpm	r24, Z+
    7c40:	93 ff       	sbrs	r25, 3
    7c42:	81 91       	ld	r24, Z+
    7c44:	7f 01       	movw	r14, r30
    7c46:	88 23       	and	r24, r24
    7c48:	09 f4       	brne	.+2      	; 0x7c4c <vfprintf+0x5c>
    7c4a:	ad c1       	rjmp	.+858    	; 0x7fa6 <vfprintf+0x3b6>
    7c4c:	85 32       	cpi	r24, 0x25	; 37
    7c4e:	39 f4       	brne	.+14     	; 0x7c5e <vfprintf+0x6e>
    7c50:	93 fd       	sbrc	r25, 3
    7c52:	85 91       	lpm	r24, Z+
    7c54:	93 ff       	sbrs	r25, 3
    7c56:	81 91       	ld	r24, Z+
    7c58:	7f 01       	movw	r14, r30
    7c5a:	85 32       	cpi	r24, 0x25	; 37
    7c5c:	21 f4       	brne	.+8      	; 0x7c66 <vfprintf+0x76>
    7c5e:	b6 01       	movw	r22, r12
    7c60:	90 e0       	ldi	r25, 0x00	; 0
    7c62:	15 d3       	rcall	.+1578   	; 0x828e <fputc>
    7c64:	e8 cf       	rjmp	.-48     	; 0x7c36 <vfprintf+0x46>
    7c66:	91 2c       	mov	r9, r1
    7c68:	21 2c       	mov	r2, r1
    7c6a:	31 2c       	mov	r3, r1
    7c6c:	ff e1       	ldi	r31, 0x1F	; 31
    7c6e:	f3 15       	cp	r31, r3
    7c70:	d8 f0       	brcs	.+54     	; 0x7ca8 <vfprintf+0xb8>
    7c72:	8b 32       	cpi	r24, 0x2B	; 43
    7c74:	79 f0       	breq	.+30     	; 0x7c94 <vfprintf+0xa4>
    7c76:	38 f4       	brcc	.+14     	; 0x7c86 <vfprintf+0x96>
    7c78:	80 32       	cpi	r24, 0x20	; 32
    7c7a:	79 f0       	breq	.+30     	; 0x7c9a <vfprintf+0xaa>
    7c7c:	83 32       	cpi	r24, 0x23	; 35
    7c7e:	a1 f4       	brne	.+40     	; 0x7ca8 <vfprintf+0xb8>
    7c80:	23 2d       	mov	r18, r3
    7c82:	20 61       	ori	r18, 0x10	; 16
    7c84:	1d c0       	rjmp	.+58     	; 0x7cc0 <vfprintf+0xd0>
    7c86:	8d 32       	cpi	r24, 0x2D	; 45
    7c88:	61 f0       	breq	.+24     	; 0x7ca2 <vfprintf+0xb2>
    7c8a:	80 33       	cpi	r24, 0x30	; 48
    7c8c:	69 f4       	brne	.+26     	; 0x7ca8 <vfprintf+0xb8>
    7c8e:	23 2d       	mov	r18, r3
    7c90:	21 60       	ori	r18, 0x01	; 1
    7c92:	16 c0       	rjmp	.+44     	; 0x7cc0 <vfprintf+0xd0>
    7c94:	83 2d       	mov	r24, r3
    7c96:	82 60       	ori	r24, 0x02	; 2
    7c98:	38 2e       	mov	r3, r24
    7c9a:	e3 2d       	mov	r30, r3
    7c9c:	e4 60       	ori	r30, 0x04	; 4
    7c9e:	3e 2e       	mov	r3, r30
    7ca0:	2a c0       	rjmp	.+84     	; 0x7cf6 <vfprintf+0x106>
    7ca2:	f3 2d       	mov	r31, r3
    7ca4:	f8 60       	ori	r31, 0x08	; 8
    7ca6:	1d c0       	rjmp	.+58     	; 0x7ce2 <vfprintf+0xf2>
    7ca8:	37 fc       	sbrc	r3, 7
    7caa:	2d c0       	rjmp	.+90     	; 0x7d06 <vfprintf+0x116>
    7cac:	20 ed       	ldi	r18, 0xD0	; 208
    7cae:	28 0f       	add	r18, r24
    7cb0:	2a 30       	cpi	r18, 0x0A	; 10
    7cb2:	40 f0       	brcs	.+16     	; 0x7cc4 <vfprintf+0xd4>
    7cb4:	8e 32       	cpi	r24, 0x2E	; 46
    7cb6:	b9 f4       	brne	.+46     	; 0x7ce6 <vfprintf+0xf6>
    7cb8:	36 fc       	sbrc	r3, 6
    7cba:	75 c1       	rjmp	.+746    	; 0x7fa6 <vfprintf+0x3b6>
    7cbc:	23 2d       	mov	r18, r3
    7cbe:	20 64       	ori	r18, 0x40	; 64
    7cc0:	32 2e       	mov	r3, r18
    7cc2:	19 c0       	rjmp	.+50     	; 0x7cf6 <vfprintf+0x106>
    7cc4:	36 fe       	sbrs	r3, 6
    7cc6:	06 c0       	rjmp	.+12     	; 0x7cd4 <vfprintf+0xe4>
    7cc8:	8a e0       	ldi	r24, 0x0A	; 10
    7cca:	98 9e       	mul	r9, r24
    7ccc:	20 0d       	add	r18, r0
    7cce:	11 24       	eor	r1, r1
    7cd0:	92 2e       	mov	r9, r18
    7cd2:	11 c0       	rjmp	.+34     	; 0x7cf6 <vfprintf+0x106>
    7cd4:	ea e0       	ldi	r30, 0x0A	; 10
    7cd6:	2e 9e       	mul	r2, r30
    7cd8:	20 0d       	add	r18, r0
    7cda:	11 24       	eor	r1, r1
    7cdc:	22 2e       	mov	r2, r18
    7cde:	f3 2d       	mov	r31, r3
    7ce0:	f0 62       	ori	r31, 0x20	; 32
    7ce2:	3f 2e       	mov	r3, r31
    7ce4:	08 c0       	rjmp	.+16     	; 0x7cf6 <vfprintf+0x106>
    7ce6:	8c 36       	cpi	r24, 0x6C	; 108
    7ce8:	21 f4       	brne	.+8      	; 0x7cf2 <vfprintf+0x102>
    7cea:	83 2d       	mov	r24, r3
    7cec:	80 68       	ori	r24, 0x80	; 128
    7cee:	38 2e       	mov	r3, r24
    7cf0:	02 c0       	rjmp	.+4      	; 0x7cf6 <vfprintf+0x106>
    7cf2:	88 36       	cpi	r24, 0x68	; 104
    7cf4:	41 f4       	brne	.+16     	; 0x7d06 <vfprintf+0x116>
    7cf6:	f7 01       	movw	r30, r14
    7cf8:	93 fd       	sbrc	r25, 3
    7cfa:	85 91       	lpm	r24, Z+
    7cfc:	93 ff       	sbrs	r25, 3
    7cfe:	81 91       	ld	r24, Z+
    7d00:	7f 01       	movw	r14, r30
    7d02:	81 11       	cpse	r24, r1
    7d04:	b3 cf       	rjmp	.-154    	; 0x7c6c <vfprintf+0x7c>
    7d06:	98 2f       	mov	r25, r24
    7d08:	9f 7d       	andi	r25, 0xDF	; 223
    7d0a:	95 54       	subi	r25, 0x45	; 69
    7d0c:	93 30       	cpi	r25, 0x03	; 3
    7d0e:	28 f4       	brcc	.+10     	; 0x7d1a <vfprintf+0x12a>
    7d10:	0c 5f       	subi	r16, 0xFC	; 252
    7d12:	1f 4f       	sbci	r17, 0xFF	; 255
    7d14:	9f e3       	ldi	r25, 0x3F	; 63
    7d16:	99 83       	std	Y+1, r25	; 0x01
    7d18:	0d c0       	rjmp	.+26     	; 0x7d34 <vfprintf+0x144>
    7d1a:	83 36       	cpi	r24, 0x63	; 99
    7d1c:	31 f0       	breq	.+12     	; 0x7d2a <vfprintf+0x13a>
    7d1e:	83 37       	cpi	r24, 0x73	; 115
    7d20:	71 f0       	breq	.+28     	; 0x7d3e <vfprintf+0x14e>
    7d22:	83 35       	cpi	r24, 0x53	; 83
    7d24:	09 f0       	breq	.+2      	; 0x7d28 <vfprintf+0x138>
    7d26:	55 c0       	rjmp	.+170    	; 0x7dd2 <vfprintf+0x1e2>
    7d28:	20 c0       	rjmp	.+64     	; 0x7d6a <vfprintf+0x17a>
    7d2a:	f8 01       	movw	r30, r16
    7d2c:	80 81       	ld	r24, Z
    7d2e:	89 83       	std	Y+1, r24	; 0x01
    7d30:	0e 5f       	subi	r16, 0xFE	; 254
    7d32:	1f 4f       	sbci	r17, 0xFF	; 255
    7d34:	88 24       	eor	r8, r8
    7d36:	83 94       	inc	r8
    7d38:	91 2c       	mov	r9, r1
    7d3a:	53 01       	movw	r10, r6
    7d3c:	12 c0       	rjmp	.+36     	; 0x7d62 <vfprintf+0x172>
    7d3e:	28 01       	movw	r4, r16
    7d40:	f2 e0       	ldi	r31, 0x02	; 2
    7d42:	4f 0e       	add	r4, r31
    7d44:	51 1c       	adc	r5, r1
    7d46:	f8 01       	movw	r30, r16
    7d48:	a0 80       	ld	r10, Z
    7d4a:	b1 80       	ldd	r11, Z+1	; 0x01
    7d4c:	36 fe       	sbrs	r3, 6
    7d4e:	03 c0       	rjmp	.+6      	; 0x7d56 <vfprintf+0x166>
    7d50:	69 2d       	mov	r22, r9
    7d52:	70 e0       	ldi	r23, 0x00	; 0
    7d54:	02 c0       	rjmp	.+4      	; 0x7d5a <vfprintf+0x16a>
    7d56:	6f ef       	ldi	r22, 0xFF	; 255
    7d58:	7f ef       	ldi	r23, 0xFF	; 255
    7d5a:	c5 01       	movw	r24, r10
    7d5c:	8d d2       	rcall	.+1306   	; 0x8278 <strnlen>
    7d5e:	4c 01       	movw	r8, r24
    7d60:	82 01       	movw	r16, r4
    7d62:	f3 2d       	mov	r31, r3
    7d64:	ff 77       	andi	r31, 0x7F	; 127
    7d66:	3f 2e       	mov	r3, r31
    7d68:	15 c0       	rjmp	.+42     	; 0x7d94 <vfprintf+0x1a4>
    7d6a:	28 01       	movw	r4, r16
    7d6c:	22 e0       	ldi	r18, 0x02	; 2
    7d6e:	42 0e       	add	r4, r18
    7d70:	51 1c       	adc	r5, r1
    7d72:	f8 01       	movw	r30, r16
    7d74:	a0 80       	ld	r10, Z
    7d76:	b1 80       	ldd	r11, Z+1	; 0x01
    7d78:	36 fe       	sbrs	r3, 6
    7d7a:	03 c0       	rjmp	.+6      	; 0x7d82 <vfprintf+0x192>
    7d7c:	69 2d       	mov	r22, r9
    7d7e:	70 e0       	ldi	r23, 0x00	; 0
    7d80:	02 c0       	rjmp	.+4      	; 0x7d86 <vfprintf+0x196>
    7d82:	6f ef       	ldi	r22, 0xFF	; 255
    7d84:	7f ef       	ldi	r23, 0xFF	; 255
    7d86:	c5 01       	movw	r24, r10
    7d88:	65 d2       	rcall	.+1226   	; 0x8254 <strnlen_P>
    7d8a:	4c 01       	movw	r8, r24
    7d8c:	f3 2d       	mov	r31, r3
    7d8e:	f0 68       	ori	r31, 0x80	; 128
    7d90:	3f 2e       	mov	r3, r31
    7d92:	82 01       	movw	r16, r4
    7d94:	33 fc       	sbrc	r3, 3
    7d96:	19 c0       	rjmp	.+50     	; 0x7dca <vfprintf+0x1da>
    7d98:	82 2d       	mov	r24, r2
    7d9a:	90 e0       	ldi	r25, 0x00	; 0
    7d9c:	88 16       	cp	r8, r24
    7d9e:	99 06       	cpc	r9, r25
    7da0:	a0 f4       	brcc	.+40     	; 0x7dca <vfprintf+0x1da>
    7da2:	b6 01       	movw	r22, r12
    7da4:	80 e2       	ldi	r24, 0x20	; 32
    7da6:	90 e0       	ldi	r25, 0x00	; 0
    7da8:	72 d2       	rcall	.+1252   	; 0x828e <fputc>
    7daa:	2a 94       	dec	r2
    7dac:	f5 cf       	rjmp	.-22     	; 0x7d98 <vfprintf+0x1a8>
    7dae:	f5 01       	movw	r30, r10
    7db0:	37 fc       	sbrc	r3, 7
    7db2:	85 91       	lpm	r24, Z+
    7db4:	37 fe       	sbrs	r3, 7
    7db6:	81 91       	ld	r24, Z+
    7db8:	5f 01       	movw	r10, r30
    7dba:	b6 01       	movw	r22, r12
    7dbc:	90 e0       	ldi	r25, 0x00	; 0
    7dbe:	67 d2       	rcall	.+1230   	; 0x828e <fputc>
    7dc0:	21 10       	cpse	r2, r1
    7dc2:	2a 94       	dec	r2
    7dc4:	21 e0       	ldi	r18, 0x01	; 1
    7dc6:	82 1a       	sub	r8, r18
    7dc8:	91 08       	sbc	r9, r1
    7dca:	81 14       	cp	r8, r1
    7dcc:	91 04       	cpc	r9, r1
    7dce:	79 f7       	brne	.-34     	; 0x7dae <vfprintf+0x1be>
    7dd0:	e1 c0       	rjmp	.+450    	; 0x7f94 <vfprintf+0x3a4>
    7dd2:	84 36       	cpi	r24, 0x64	; 100
    7dd4:	11 f0       	breq	.+4      	; 0x7dda <vfprintf+0x1ea>
    7dd6:	89 36       	cpi	r24, 0x69	; 105
    7dd8:	39 f5       	brne	.+78     	; 0x7e28 <vfprintf+0x238>
    7dda:	f8 01       	movw	r30, r16
    7ddc:	37 fe       	sbrs	r3, 7
    7dde:	07 c0       	rjmp	.+14     	; 0x7dee <vfprintf+0x1fe>
    7de0:	60 81       	ld	r22, Z
    7de2:	71 81       	ldd	r23, Z+1	; 0x01
    7de4:	82 81       	ldd	r24, Z+2	; 0x02
    7de6:	93 81       	ldd	r25, Z+3	; 0x03
    7de8:	0c 5f       	subi	r16, 0xFC	; 252
    7dea:	1f 4f       	sbci	r17, 0xFF	; 255
    7dec:	08 c0       	rjmp	.+16     	; 0x7dfe <vfprintf+0x20e>
    7dee:	60 81       	ld	r22, Z
    7df0:	71 81       	ldd	r23, Z+1	; 0x01
    7df2:	07 2e       	mov	r0, r23
    7df4:	00 0c       	add	r0, r0
    7df6:	88 0b       	sbc	r24, r24
    7df8:	99 0b       	sbc	r25, r25
    7dfa:	0e 5f       	subi	r16, 0xFE	; 254
    7dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    7dfe:	f3 2d       	mov	r31, r3
    7e00:	ff 76       	andi	r31, 0x6F	; 111
    7e02:	3f 2e       	mov	r3, r31
    7e04:	97 ff       	sbrs	r25, 7
    7e06:	09 c0       	rjmp	.+18     	; 0x7e1a <vfprintf+0x22a>
    7e08:	90 95       	com	r25
    7e0a:	80 95       	com	r24
    7e0c:	70 95       	com	r23
    7e0e:	61 95       	neg	r22
    7e10:	7f 4f       	sbci	r23, 0xFF	; 255
    7e12:	8f 4f       	sbci	r24, 0xFF	; 255
    7e14:	9f 4f       	sbci	r25, 0xFF	; 255
    7e16:	f0 68       	ori	r31, 0x80	; 128
    7e18:	3f 2e       	mov	r3, r31
    7e1a:	2a e0       	ldi	r18, 0x0A	; 10
    7e1c:	30 e0       	ldi	r19, 0x00	; 0
    7e1e:	a3 01       	movw	r20, r6
    7e20:	72 d2       	rcall	.+1252   	; 0x8306 <__ultoa_invert>
    7e22:	88 2e       	mov	r8, r24
    7e24:	86 18       	sub	r8, r6
    7e26:	44 c0       	rjmp	.+136    	; 0x7eb0 <vfprintf+0x2c0>
    7e28:	85 37       	cpi	r24, 0x75	; 117
    7e2a:	31 f4       	brne	.+12     	; 0x7e38 <vfprintf+0x248>
    7e2c:	23 2d       	mov	r18, r3
    7e2e:	2f 7e       	andi	r18, 0xEF	; 239
    7e30:	b2 2e       	mov	r11, r18
    7e32:	2a e0       	ldi	r18, 0x0A	; 10
    7e34:	30 e0       	ldi	r19, 0x00	; 0
    7e36:	25 c0       	rjmp	.+74     	; 0x7e82 <vfprintf+0x292>
    7e38:	93 2d       	mov	r25, r3
    7e3a:	99 7f       	andi	r25, 0xF9	; 249
    7e3c:	b9 2e       	mov	r11, r25
    7e3e:	8f 36       	cpi	r24, 0x6F	; 111
    7e40:	c1 f0       	breq	.+48     	; 0x7e72 <vfprintf+0x282>
    7e42:	18 f4       	brcc	.+6      	; 0x7e4a <vfprintf+0x25a>
    7e44:	88 35       	cpi	r24, 0x58	; 88
    7e46:	79 f0       	breq	.+30     	; 0x7e66 <vfprintf+0x276>
    7e48:	ae c0       	rjmp	.+348    	; 0x7fa6 <vfprintf+0x3b6>
    7e4a:	80 37       	cpi	r24, 0x70	; 112
    7e4c:	19 f0       	breq	.+6      	; 0x7e54 <vfprintf+0x264>
    7e4e:	88 37       	cpi	r24, 0x78	; 120
    7e50:	21 f0       	breq	.+8      	; 0x7e5a <vfprintf+0x26a>
    7e52:	a9 c0       	rjmp	.+338    	; 0x7fa6 <vfprintf+0x3b6>
    7e54:	e9 2f       	mov	r30, r25
    7e56:	e0 61       	ori	r30, 0x10	; 16
    7e58:	be 2e       	mov	r11, r30
    7e5a:	b4 fe       	sbrs	r11, 4
    7e5c:	0d c0       	rjmp	.+26     	; 0x7e78 <vfprintf+0x288>
    7e5e:	fb 2d       	mov	r31, r11
    7e60:	f4 60       	ori	r31, 0x04	; 4
    7e62:	bf 2e       	mov	r11, r31
    7e64:	09 c0       	rjmp	.+18     	; 0x7e78 <vfprintf+0x288>
    7e66:	34 fe       	sbrs	r3, 4
    7e68:	0a c0       	rjmp	.+20     	; 0x7e7e <vfprintf+0x28e>
    7e6a:	29 2f       	mov	r18, r25
    7e6c:	26 60       	ori	r18, 0x06	; 6
    7e6e:	b2 2e       	mov	r11, r18
    7e70:	06 c0       	rjmp	.+12     	; 0x7e7e <vfprintf+0x28e>
    7e72:	28 e0       	ldi	r18, 0x08	; 8
    7e74:	30 e0       	ldi	r19, 0x00	; 0
    7e76:	05 c0       	rjmp	.+10     	; 0x7e82 <vfprintf+0x292>
    7e78:	20 e1       	ldi	r18, 0x10	; 16
    7e7a:	30 e0       	ldi	r19, 0x00	; 0
    7e7c:	02 c0       	rjmp	.+4      	; 0x7e82 <vfprintf+0x292>
    7e7e:	20 e1       	ldi	r18, 0x10	; 16
    7e80:	32 e0       	ldi	r19, 0x02	; 2
    7e82:	f8 01       	movw	r30, r16
    7e84:	b7 fe       	sbrs	r11, 7
    7e86:	07 c0       	rjmp	.+14     	; 0x7e96 <vfprintf+0x2a6>
    7e88:	60 81       	ld	r22, Z
    7e8a:	71 81       	ldd	r23, Z+1	; 0x01
    7e8c:	82 81       	ldd	r24, Z+2	; 0x02
    7e8e:	93 81       	ldd	r25, Z+3	; 0x03
    7e90:	0c 5f       	subi	r16, 0xFC	; 252
    7e92:	1f 4f       	sbci	r17, 0xFF	; 255
    7e94:	06 c0       	rjmp	.+12     	; 0x7ea2 <vfprintf+0x2b2>
    7e96:	60 81       	ld	r22, Z
    7e98:	71 81       	ldd	r23, Z+1	; 0x01
    7e9a:	80 e0       	ldi	r24, 0x00	; 0
    7e9c:	90 e0       	ldi	r25, 0x00	; 0
    7e9e:	0e 5f       	subi	r16, 0xFE	; 254
    7ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    7ea2:	a3 01       	movw	r20, r6
    7ea4:	30 d2       	rcall	.+1120   	; 0x8306 <__ultoa_invert>
    7ea6:	88 2e       	mov	r8, r24
    7ea8:	86 18       	sub	r8, r6
    7eaa:	fb 2d       	mov	r31, r11
    7eac:	ff 77       	andi	r31, 0x7F	; 127
    7eae:	3f 2e       	mov	r3, r31
    7eb0:	36 fe       	sbrs	r3, 6
    7eb2:	0d c0       	rjmp	.+26     	; 0x7ece <vfprintf+0x2de>
    7eb4:	23 2d       	mov	r18, r3
    7eb6:	2e 7f       	andi	r18, 0xFE	; 254
    7eb8:	a2 2e       	mov	r10, r18
    7eba:	89 14       	cp	r8, r9
    7ebc:	58 f4       	brcc	.+22     	; 0x7ed4 <vfprintf+0x2e4>
    7ebe:	34 fe       	sbrs	r3, 4
    7ec0:	0b c0       	rjmp	.+22     	; 0x7ed8 <vfprintf+0x2e8>
    7ec2:	32 fc       	sbrc	r3, 2
    7ec4:	09 c0       	rjmp	.+18     	; 0x7ed8 <vfprintf+0x2e8>
    7ec6:	83 2d       	mov	r24, r3
    7ec8:	8e 7e       	andi	r24, 0xEE	; 238
    7eca:	a8 2e       	mov	r10, r24
    7ecc:	05 c0       	rjmp	.+10     	; 0x7ed8 <vfprintf+0x2e8>
    7ece:	b8 2c       	mov	r11, r8
    7ed0:	a3 2c       	mov	r10, r3
    7ed2:	03 c0       	rjmp	.+6      	; 0x7eda <vfprintf+0x2ea>
    7ed4:	b8 2c       	mov	r11, r8
    7ed6:	01 c0       	rjmp	.+2      	; 0x7eda <vfprintf+0x2ea>
    7ed8:	b9 2c       	mov	r11, r9
    7eda:	a4 fe       	sbrs	r10, 4
    7edc:	0f c0       	rjmp	.+30     	; 0x7efc <vfprintf+0x30c>
    7ede:	fe 01       	movw	r30, r28
    7ee0:	e8 0d       	add	r30, r8
    7ee2:	f1 1d       	adc	r31, r1
    7ee4:	80 81       	ld	r24, Z
    7ee6:	80 33       	cpi	r24, 0x30	; 48
    7ee8:	21 f4       	brne	.+8      	; 0x7ef2 <vfprintf+0x302>
    7eea:	9a 2d       	mov	r25, r10
    7eec:	99 7e       	andi	r25, 0xE9	; 233
    7eee:	a9 2e       	mov	r10, r25
    7ef0:	09 c0       	rjmp	.+18     	; 0x7f04 <vfprintf+0x314>
    7ef2:	a2 fe       	sbrs	r10, 2
    7ef4:	06 c0       	rjmp	.+12     	; 0x7f02 <vfprintf+0x312>
    7ef6:	b3 94       	inc	r11
    7ef8:	b3 94       	inc	r11
    7efa:	04 c0       	rjmp	.+8      	; 0x7f04 <vfprintf+0x314>
    7efc:	8a 2d       	mov	r24, r10
    7efe:	86 78       	andi	r24, 0x86	; 134
    7f00:	09 f0       	breq	.+2      	; 0x7f04 <vfprintf+0x314>
    7f02:	b3 94       	inc	r11
    7f04:	a3 fc       	sbrc	r10, 3
    7f06:	10 c0       	rjmp	.+32     	; 0x7f28 <vfprintf+0x338>
    7f08:	a0 fe       	sbrs	r10, 0
    7f0a:	06 c0       	rjmp	.+12     	; 0x7f18 <vfprintf+0x328>
    7f0c:	b2 14       	cp	r11, r2
    7f0e:	80 f4       	brcc	.+32     	; 0x7f30 <vfprintf+0x340>
    7f10:	28 0c       	add	r2, r8
    7f12:	92 2c       	mov	r9, r2
    7f14:	9b 18       	sub	r9, r11
    7f16:	0d c0       	rjmp	.+26     	; 0x7f32 <vfprintf+0x342>
    7f18:	b2 14       	cp	r11, r2
    7f1a:	58 f4       	brcc	.+22     	; 0x7f32 <vfprintf+0x342>
    7f1c:	b6 01       	movw	r22, r12
    7f1e:	80 e2       	ldi	r24, 0x20	; 32
    7f20:	90 e0       	ldi	r25, 0x00	; 0
    7f22:	b5 d1       	rcall	.+874    	; 0x828e <fputc>
    7f24:	b3 94       	inc	r11
    7f26:	f8 cf       	rjmp	.-16     	; 0x7f18 <vfprintf+0x328>
    7f28:	b2 14       	cp	r11, r2
    7f2a:	18 f4       	brcc	.+6      	; 0x7f32 <vfprintf+0x342>
    7f2c:	2b 18       	sub	r2, r11
    7f2e:	02 c0       	rjmp	.+4      	; 0x7f34 <vfprintf+0x344>
    7f30:	98 2c       	mov	r9, r8
    7f32:	21 2c       	mov	r2, r1
    7f34:	a4 fe       	sbrs	r10, 4
    7f36:	0f c0       	rjmp	.+30     	; 0x7f56 <vfprintf+0x366>
    7f38:	b6 01       	movw	r22, r12
    7f3a:	80 e3       	ldi	r24, 0x30	; 48
    7f3c:	90 e0       	ldi	r25, 0x00	; 0
    7f3e:	a7 d1       	rcall	.+846    	; 0x828e <fputc>
    7f40:	a2 fe       	sbrs	r10, 2
    7f42:	16 c0       	rjmp	.+44     	; 0x7f70 <vfprintf+0x380>
    7f44:	a1 fc       	sbrc	r10, 1
    7f46:	03 c0       	rjmp	.+6      	; 0x7f4e <vfprintf+0x35e>
    7f48:	88 e7       	ldi	r24, 0x78	; 120
    7f4a:	90 e0       	ldi	r25, 0x00	; 0
    7f4c:	02 c0       	rjmp	.+4      	; 0x7f52 <vfprintf+0x362>
    7f4e:	88 e5       	ldi	r24, 0x58	; 88
    7f50:	90 e0       	ldi	r25, 0x00	; 0
    7f52:	b6 01       	movw	r22, r12
    7f54:	0c c0       	rjmp	.+24     	; 0x7f6e <vfprintf+0x37e>
    7f56:	8a 2d       	mov	r24, r10
    7f58:	86 78       	andi	r24, 0x86	; 134
    7f5a:	51 f0       	breq	.+20     	; 0x7f70 <vfprintf+0x380>
    7f5c:	a1 fe       	sbrs	r10, 1
    7f5e:	02 c0       	rjmp	.+4      	; 0x7f64 <vfprintf+0x374>
    7f60:	8b e2       	ldi	r24, 0x2B	; 43
    7f62:	01 c0       	rjmp	.+2      	; 0x7f66 <vfprintf+0x376>
    7f64:	80 e2       	ldi	r24, 0x20	; 32
    7f66:	a7 fc       	sbrc	r10, 7
    7f68:	8d e2       	ldi	r24, 0x2D	; 45
    7f6a:	b6 01       	movw	r22, r12
    7f6c:	90 e0       	ldi	r25, 0x00	; 0
    7f6e:	8f d1       	rcall	.+798    	; 0x828e <fputc>
    7f70:	89 14       	cp	r8, r9
    7f72:	30 f4       	brcc	.+12     	; 0x7f80 <vfprintf+0x390>
    7f74:	b6 01       	movw	r22, r12
    7f76:	80 e3       	ldi	r24, 0x30	; 48
    7f78:	90 e0       	ldi	r25, 0x00	; 0
    7f7a:	89 d1       	rcall	.+786    	; 0x828e <fputc>
    7f7c:	9a 94       	dec	r9
    7f7e:	f8 cf       	rjmp	.-16     	; 0x7f70 <vfprintf+0x380>
    7f80:	8a 94       	dec	r8
    7f82:	f3 01       	movw	r30, r6
    7f84:	e8 0d       	add	r30, r8
    7f86:	f1 1d       	adc	r31, r1
    7f88:	80 81       	ld	r24, Z
    7f8a:	b6 01       	movw	r22, r12
    7f8c:	90 e0       	ldi	r25, 0x00	; 0
    7f8e:	7f d1       	rcall	.+766    	; 0x828e <fputc>
    7f90:	81 10       	cpse	r8, r1
    7f92:	f6 cf       	rjmp	.-20     	; 0x7f80 <vfprintf+0x390>
    7f94:	22 20       	and	r2, r2
    7f96:	09 f4       	brne	.+2      	; 0x7f9a <vfprintf+0x3aa>
    7f98:	4e ce       	rjmp	.-868    	; 0x7c36 <vfprintf+0x46>
    7f9a:	b6 01       	movw	r22, r12
    7f9c:	80 e2       	ldi	r24, 0x20	; 32
    7f9e:	90 e0       	ldi	r25, 0x00	; 0
    7fa0:	76 d1       	rcall	.+748    	; 0x828e <fputc>
    7fa2:	2a 94       	dec	r2
    7fa4:	f7 cf       	rjmp	.-18     	; 0x7f94 <vfprintf+0x3a4>
    7fa6:	f6 01       	movw	r30, r12
    7fa8:	86 81       	ldd	r24, Z+6	; 0x06
    7faa:	97 81       	ldd	r25, Z+7	; 0x07
    7fac:	02 c0       	rjmp	.+4      	; 0x7fb2 <vfprintf+0x3c2>
    7fae:	8f ef       	ldi	r24, 0xFF	; 255
    7fb0:	9f ef       	ldi	r25, 0xFF	; 255
    7fb2:	2b 96       	adiw	r28, 0x0b	; 11
    7fb4:	cd bf       	out	0x3d, r28	; 61
    7fb6:	de bf       	out	0x3e, r29	; 62
    7fb8:	df 91       	pop	r29
    7fba:	cf 91       	pop	r28
    7fbc:	1f 91       	pop	r17
    7fbe:	0f 91       	pop	r16
    7fc0:	ff 90       	pop	r15
    7fc2:	ef 90       	pop	r14
    7fc4:	df 90       	pop	r13
    7fc6:	cf 90       	pop	r12
    7fc8:	bf 90       	pop	r11
    7fca:	af 90       	pop	r10
    7fcc:	9f 90       	pop	r9
    7fce:	8f 90       	pop	r8
    7fd0:	7f 90       	pop	r7
    7fd2:	6f 90       	pop	r6
    7fd4:	5f 90       	pop	r5
    7fd6:	4f 90       	pop	r4
    7fd8:	3f 90       	pop	r3
    7fda:	2f 90       	pop	r2
    7fdc:	08 95       	ret

00007fde <calloc>:
    7fde:	0f 93       	push	r16
    7fe0:	1f 93       	push	r17
    7fe2:	cf 93       	push	r28
    7fe4:	df 93       	push	r29
    7fe6:	86 9f       	mul	r24, r22
    7fe8:	80 01       	movw	r16, r0
    7fea:	87 9f       	mul	r24, r23
    7fec:	10 0d       	add	r17, r0
    7fee:	96 9f       	mul	r25, r22
    7ff0:	10 0d       	add	r17, r0
    7ff2:	11 24       	eor	r1, r1
    7ff4:	c8 01       	movw	r24, r16
    7ff6:	0d d0       	rcall	.+26     	; 0x8012 <malloc>
    7ff8:	ec 01       	movw	r28, r24
    7ffa:	00 97       	sbiw	r24, 0x00	; 0
    7ffc:	21 f0       	breq	.+8      	; 0x8006 <calloc+0x28>
    7ffe:	a8 01       	movw	r20, r16
    8000:	60 e0       	ldi	r22, 0x00	; 0
    8002:	70 e0       	ldi	r23, 0x00	; 0
    8004:	32 d1       	rcall	.+612    	; 0x826a <memset>
    8006:	ce 01       	movw	r24, r28
    8008:	df 91       	pop	r29
    800a:	cf 91       	pop	r28
    800c:	1f 91       	pop	r17
    800e:	0f 91       	pop	r16
    8010:	08 95       	ret

00008012 <malloc>:
    8012:	0f 93       	push	r16
    8014:	1f 93       	push	r17
    8016:	cf 93       	push	r28
    8018:	df 93       	push	r29
    801a:	82 30       	cpi	r24, 0x02	; 2
    801c:	91 05       	cpc	r25, r1
    801e:	10 f4       	brcc	.+4      	; 0x8024 <malloc+0x12>
    8020:	82 e0       	ldi	r24, 0x02	; 2
    8022:	90 e0       	ldi	r25, 0x00	; 0
    8024:	e0 91 d7 27 	lds	r30, 0x27D7	; 0x8027d7 <__flp>
    8028:	f0 91 d8 27 	lds	r31, 0x27D8	; 0x8027d8 <__flp+0x1>
    802c:	20 e0       	ldi	r18, 0x00	; 0
    802e:	30 e0       	ldi	r19, 0x00	; 0
    8030:	a0 e0       	ldi	r26, 0x00	; 0
    8032:	b0 e0       	ldi	r27, 0x00	; 0
    8034:	30 97       	sbiw	r30, 0x00	; 0
    8036:	19 f1       	breq	.+70     	; 0x807e <malloc+0x6c>
    8038:	40 81       	ld	r20, Z
    803a:	51 81       	ldd	r21, Z+1	; 0x01
    803c:	02 81       	ldd	r16, Z+2	; 0x02
    803e:	13 81       	ldd	r17, Z+3	; 0x03
    8040:	48 17       	cp	r20, r24
    8042:	59 07       	cpc	r21, r25
    8044:	c8 f0       	brcs	.+50     	; 0x8078 <malloc+0x66>
    8046:	84 17       	cp	r24, r20
    8048:	95 07       	cpc	r25, r21
    804a:	69 f4       	brne	.+26     	; 0x8066 <malloc+0x54>
    804c:	10 97       	sbiw	r26, 0x00	; 0
    804e:	31 f0       	breq	.+12     	; 0x805c <malloc+0x4a>
    8050:	12 96       	adiw	r26, 0x02	; 2
    8052:	0c 93       	st	X, r16
    8054:	12 97       	sbiw	r26, 0x02	; 2
    8056:	13 96       	adiw	r26, 0x03	; 3
    8058:	1c 93       	st	X, r17
    805a:	27 c0       	rjmp	.+78     	; 0x80aa <malloc+0x98>
    805c:	00 93 d7 27 	sts	0x27D7, r16	; 0x8027d7 <__flp>
    8060:	10 93 d8 27 	sts	0x27D8, r17	; 0x8027d8 <__flp+0x1>
    8064:	22 c0       	rjmp	.+68     	; 0x80aa <malloc+0x98>
    8066:	21 15       	cp	r18, r1
    8068:	31 05       	cpc	r19, r1
    806a:	19 f0       	breq	.+6      	; 0x8072 <malloc+0x60>
    806c:	42 17       	cp	r20, r18
    806e:	53 07       	cpc	r21, r19
    8070:	18 f4       	brcc	.+6      	; 0x8078 <malloc+0x66>
    8072:	9a 01       	movw	r18, r20
    8074:	bd 01       	movw	r22, r26
    8076:	ef 01       	movw	r28, r30
    8078:	df 01       	movw	r26, r30
    807a:	f8 01       	movw	r30, r16
    807c:	db cf       	rjmp	.-74     	; 0x8034 <malloc+0x22>
    807e:	21 15       	cp	r18, r1
    8080:	31 05       	cpc	r19, r1
    8082:	f9 f0       	breq	.+62     	; 0x80c2 <malloc+0xb0>
    8084:	28 1b       	sub	r18, r24
    8086:	39 0b       	sbc	r19, r25
    8088:	24 30       	cpi	r18, 0x04	; 4
    808a:	31 05       	cpc	r19, r1
    808c:	80 f4       	brcc	.+32     	; 0x80ae <malloc+0x9c>
    808e:	8a 81       	ldd	r24, Y+2	; 0x02
    8090:	9b 81       	ldd	r25, Y+3	; 0x03
    8092:	61 15       	cp	r22, r1
    8094:	71 05       	cpc	r23, r1
    8096:	21 f0       	breq	.+8      	; 0x80a0 <malloc+0x8e>
    8098:	fb 01       	movw	r30, r22
    809a:	82 83       	std	Z+2, r24	; 0x02
    809c:	93 83       	std	Z+3, r25	; 0x03
    809e:	04 c0       	rjmp	.+8      	; 0x80a8 <malloc+0x96>
    80a0:	80 93 d7 27 	sts	0x27D7, r24	; 0x8027d7 <__flp>
    80a4:	90 93 d8 27 	sts	0x27D8, r25	; 0x8027d8 <__flp+0x1>
    80a8:	fe 01       	movw	r30, r28
    80aa:	32 96       	adiw	r30, 0x02	; 2
    80ac:	44 c0       	rjmp	.+136    	; 0x8136 <malloc+0x124>
    80ae:	fe 01       	movw	r30, r28
    80b0:	e2 0f       	add	r30, r18
    80b2:	f3 1f       	adc	r31, r19
    80b4:	81 93       	st	Z+, r24
    80b6:	91 93       	st	Z+, r25
    80b8:	22 50       	subi	r18, 0x02	; 2
    80ba:	31 09       	sbc	r19, r1
    80bc:	28 83       	st	Y, r18
    80be:	39 83       	std	Y+1, r19	; 0x01
    80c0:	3a c0       	rjmp	.+116    	; 0x8136 <malloc+0x124>
    80c2:	20 91 d5 27 	lds	r18, 0x27D5	; 0x8027d5 <__brkval>
    80c6:	30 91 d6 27 	lds	r19, 0x27D6	; 0x8027d6 <__brkval+0x1>
    80ca:	23 2b       	or	r18, r19
    80cc:	41 f4       	brne	.+16     	; 0x80de <malloc+0xcc>
    80ce:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    80d2:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    80d6:	20 93 d5 27 	sts	0x27D5, r18	; 0x8027d5 <__brkval>
    80da:	30 93 d6 27 	sts	0x27D6, r19	; 0x8027d6 <__brkval+0x1>
    80de:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    80e2:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    80e6:	21 15       	cp	r18, r1
    80e8:	31 05       	cpc	r19, r1
    80ea:	41 f4       	brne	.+16     	; 0x80fc <malloc+0xea>
    80ec:	2d b7       	in	r18, 0x3d	; 61
    80ee:	3e b7       	in	r19, 0x3e	; 62
    80f0:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    80f4:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    80f8:	24 1b       	sub	r18, r20
    80fa:	35 0b       	sbc	r19, r21
    80fc:	e0 91 d5 27 	lds	r30, 0x27D5	; 0x8027d5 <__brkval>
    8100:	f0 91 d6 27 	lds	r31, 0x27D6	; 0x8027d6 <__brkval+0x1>
    8104:	e2 17       	cp	r30, r18
    8106:	f3 07       	cpc	r31, r19
    8108:	a0 f4       	brcc	.+40     	; 0x8132 <malloc+0x120>
    810a:	2e 1b       	sub	r18, r30
    810c:	3f 0b       	sbc	r19, r31
    810e:	28 17       	cp	r18, r24
    8110:	39 07       	cpc	r19, r25
    8112:	78 f0       	brcs	.+30     	; 0x8132 <malloc+0x120>
    8114:	ac 01       	movw	r20, r24
    8116:	4e 5f       	subi	r20, 0xFE	; 254
    8118:	5f 4f       	sbci	r21, 0xFF	; 255
    811a:	24 17       	cp	r18, r20
    811c:	35 07       	cpc	r19, r21
    811e:	48 f0       	brcs	.+18     	; 0x8132 <malloc+0x120>
    8120:	4e 0f       	add	r20, r30
    8122:	5f 1f       	adc	r21, r31
    8124:	40 93 d5 27 	sts	0x27D5, r20	; 0x8027d5 <__brkval>
    8128:	50 93 d6 27 	sts	0x27D6, r21	; 0x8027d6 <__brkval+0x1>
    812c:	81 93       	st	Z+, r24
    812e:	91 93       	st	Z+, r25
    8130:	02 c0       	rjmp	.+4      	; 0x8136 <malloc+0x124>
    8132:	e0 e0       	ldi	r30, 0x00	; 0
    8134:	f0 e0       	ldi	r31, 0x00	; 0
    8136:	cf 01       	movw	r24, r30
    8138:	df 91       	pop	r29
    813a:	cf 91       	pop	r28
    813c:	1f 91       	pop	r17
    813e:	0f 91       	pop	r16
    8140:	08 95       	ret

00008142 <free>:
    8142:	cf 93       	push	r28
    8144:	df 93       	push	r29
    8146:	00 97       	sbiw	r24, 0x00	; 0
    8148:	09 f4       	brne	.+2      	; 0x814c <free+0xa>
    814a:	81 c0       	rjmp	.+258    	; 0x824e <free+0x10c>
    814c:	fc 01       	movw	r30, r24
    814e:	32 97       	sbiw	r30, 0x02	; 2
    8150:	12 82       	std	Z+2, r1	; 0x02
    8152:	13 82       	std	Z+3, r1	; 0x03
    8154:	a0 91 d7 27 	lds	r26, 0x27D7	; 0x8027d7 <__flp>
    8158:	b0 91 d8 27 	lds	r27, 0x27D8	; 0x8027d8 <__flp+0x1>
    815c:	10 97       	sbiw	r26, 0x00	; 0
    815e:	81 f4       	brne	.+32     	; 0x8180 <free+0x3e>
    8160:	20 81       	ld	r18, Z
    8162:	31 81       	ldd	r19, Z+1	; 0x01
    8164:	82 0f       	add	r24, r18
    8166:	93 1f       	adc	r25, r19
    8168:	20 91 d5 27 	lds	r18, 0x27D5	; 0x8027d5 <__brkval>
    816c:	30 91 d6 27 	lds	r19, 0x27D6	; 0x8027d6 <__brkval+0x1>
    8170:	28 17       	cp	r18, r24
    8172:	39 07       	cpc	r19, r25
    8174:	51 f5       	brne	.+84     	; 0x81ca <free+0x88>
    8176:	e0 93 d5 27 	sts	0x27D5, r30	; 0x8027d5 <__brkval>
    817a:	f0 93 d6 27 	sts	0x27D6, r31	; 0x8027d6 <__brkval+0x1>
    817e:	67 c0       	rjmp	.+206    	; 0x824e <free+0x10c>
    8180:	ed 01       	movw	r28, r26
    8182:	20 e0       	ldi	r18, 0x00	; 0
    8184:	30 e0       	ldi	r19, 0x00	; 0
    8186:	ce 17       	cp	r28, r30
    8188:	df 07       	cpc	r29, r31
    818a:	40 f4       	brcc	.+16     	; 0x819c <free+0x5a>
    818c:	4a 81       	ldd	r20, Y+2	; 0x02
    818e:	5b 81       	ldd	r21, Y+3	; 0x03
    8190:	9e 01       	movw	r18, r28
    8192:	41 15       	cp	r20, r1
    8194:	51 05       	cpc	r21, r1
    8196:	f1 f0       	breq	.+60     	; 0x81d4 <free+0x92>
    8198:	ea 01       	movw	r28, r20
    819a:	f5 cf       	rjmp	.-22     	; 0x8186 <free+0x44>
    819c:	c2 83       	std	Z+2, r28	; 0x02
    819e:	d3 83       	std	Z+3, r29	; 0x03
    81a0:	40 81       	ld	r20, Z
    81a2:	51 81       	ldd	r21, Z+1	; 0x01
    81a4:	84 0f       	add	r24, r20
    81a6:	95 1f       	adc	r25, r21
    81a8:	c8 17       	cp	r28, r24
    81aa:	d9 07       	cpc	r29, r25
    81ac:	59 f4       	brne	.+22     	; 0x81c4 <free+0x82>
    81ae:	88 81       	ld	r24, Y
    81b0:	99 81       	ldd	r25, Y+1	; 0x01
    81b2:	84 0f       	add	r24, r20
    81b4:	95 1f       	adc	r25, r21
    81b6:	02 96       	adiw	r24, 0x02	; 2
    81b8:	80 83       	st	Z, r24
    81ba:	91 83       	std	Z+1, r25	; 0x01
    81bc:	8a 81       	ldd	r24, Y+2	; 0x02
    81be:	9b 81       	ldd	r25, Y+3	; 0x03
    81c0:	82 83       	std	Z+2, r24	; 0x02
    81c2:	93 83       	std	Z+3, r25	; 0x03
    81c4:	21 15       	cp	r18, r1
    81c6:	31 05       	cpc	r19, r1
    81c8:	29 f4       	brne	.+10     	; 0x81d4 <free+0x92>
    81ca:	e0 93 d7 27 	sts	0x27D7, r30	; 0x8027d7 <__flp>
    81ce:	f0 93 d8 27 	sts	0x27D8, r31	; 0x8027d8 <__flp+0x1>
    81d2:	3d c0       	rjmp	.+122    	; 0x824e <free+0x10c>
    81d4:	e9 01       	movw	r28, r18
    81d6:	ea 83       	std	Y+2, r30	; 0x02
    81d8:	fb 83       	std	Y+3, r31	; 0x03
    81da:	49 91       	ld	r20, Y+
    81dc:	59 91       	ld	r21, Y+
    81de:	c4 0f       	add	r28, r20
    81e0:	d5 1f       	adc	r29, r21
    81e2:	ec 17       	cp	r30, r28
    81e4:	fd 07       	cpc	r31, r29
    81e6:	61 f4       	brne	.+24     	; 0x8200 <free+0xbe>
    81e8:	80 81       	ld	r24, Z
    81ea:	91 81       	ldd	r25, Z+1	; 0x01
    81ec:	84 0f       	add	r24, r20
    81ee:	95 1f       	adc	r25, r21
    81f0:	02 96       	adiw	r24, 0x02	; 2
    81f2:	e9 01       	movw	r28, r18
    81f4:	88 83       	st	Y, r24
    81f6:	99 83       	std	Y+1, r25	; 0x01
    81f8:	82 81       	ldd	r24, Z+2	; 0x02
    81fa:	93 81       	ldd	r25, Z+3	; 0x03
    81fc:	8a 83       	std	Y+2, r24	; 0x02
    81fe:	9b 83       	std	Y+3, r25	; 0x03
    8200:	e0 e0       	ldi	r30, 0x00	; 0
    8202:	f0 e0       	ldi	r31, 0x00	; 0
    8204:	12 96       	adiw	r26, 0x02	; 2
    8206:	8d 91       	ld	r24, X+
    8208:	9c 91       	ld	r25, X
    820a:	13 97       	sbiw	r26, 0x03	; 3
    820c:	00 97       	sbiw	r24, 0x00	; 0
    820e:	19 f0       	breq	.+6      	; 0x8216 <free+0xd4>
    8210:	fd 01       	movw	r30, r26
    8212:	dc 01       	movw	r26, r24
    8214:	f7 cf       	rjmp	.-18     	; 0x8204 <free+0xc2>
    8216:	8d 91       	ld	r24, X+
    8218:	9c 91       	ld	r25, X
    821a:	11 97       	sbiw	r26, 0x01	; 1
    821c:	9d 01       	movw	r18, r26
    821e:	2e 5f       	subi	r18, 0xFE	; 254
    8220:	3f 4f       	sbci	r19, 0xFF	; 255
    8222:	82 0f       	add	r24, r18
    8224:	93 1f       	adc	r25, r19
    8226:	20 91 d5 27 	lds	r18, 0x27D5	; 0x8027d5 <__brkval>
    822a:	30 91 d6 27 	lds	r19, 0x27D6	; 0x8027d6 <__brkval+0x1>
    822e:	28 17       	cp	r18, r24
    8230:	39 07       	cpc	r19, r25
    8232:	69 f4       	brne	.+26     	; 0x824e <free+0x10c>
    8234:	30 97       	sbiw	r30, 0x00	; 0
    8236:	29 f4       	brne	.+10     	; 0x8242 <free+0x100>
    8238:	10 92 d7 27 	sts	0x27D7, r1	; 0x8027d7 <__flp>
    823c:	10 92 d8 27 	sts	0x27D8, r1	; 0x8027d8 <__flp+0x1>
    8240:	02 c0       	rjmp	.+4      	; 0x8246 <free+0x104>
    8242:	12 82       	std	Z+2, r1	; 0x02
    8244:	13 82       	std	Z+3, r1	; 0x03
    8246:	a0 93 d5 27 	sts	0x27D5, r26	; 0x8027d5 <__brkval>
    824a:	b0 93 d6 27 	sts	0x27D6, r27	; 0x8027d6 <__brkval+0x1>
    824e:	df 91       	pop	r29
    8250:	cf 91       	pop	r28
    8252:	08 95       	ret

00008254 <strnlen_P>:
    8254:	fc 01       	movw	r30, r24
    8256:	05 90       	lpm	r0, Z+
    8258:	61 50       	subi	r22, 0x01	; 1
    825a:	70 40       	sbci	r23, 0x00	; 0
    825c:	01 10       	cpse	r0, r1
    825e:	d8 f7       	brcc	.-10     	; 0x8256 <strnlen_P+0x2>
    8260:	80 95       	com	r24
    8262:	90 95       	com	r25
    8264:	8e 0f       	add	r24, r30
    8266:	9f 1f       	adc	r25, r31
    8268:	08 95       	ret

0000826a <memset>:
    826a:	dc 01       	movw	r26, r24
    826c:	01 c0       	rjmp	.+2      	; 0x8270 <memset+0x6>
    826e:	6d 93       	st	X+, r22
    8270:	41 50       	subi	r20, 0x01	; 1
    8272:	50 40       	sbci	r21, 0x00	; 0
    8274:	e0 f7       	brcc	.-8      	; 0x826e <memset+0x4>
    8276:	08 95       	ret

00008278 <strnlen>:
    8278:	fc 01       	movw	r30, r24
    827a:	61 50       	subi	r22, 0x01	; 1
    827c:	70 40       	sbci	r23, 0x00	; 0
    827e:	01 90       	ld	r0, Z+
    8280:	01 10       	cpse	r0, r1
    8282:	d8 f7       	brcc	.-10     	; 0x827a <strnlen+0x2>
    8284:	80 95       	com	r24
    8286:	90 95       	com	r25
    8288:	8e 0f       	add	r24, r30
    828a:	9f 1f       	adc	r25, r31
    828c:	08 95       	ret

0000828e <fputc>:
    828e:	0f 93       	push	r16
    8290:	1f 93       	push	r17
    8292:	cf 93       	push	r28
    8294:	df 93       	push	r29
    8296:	fb 01       	movw	r30, r22
    8298:	23 81       	ldd	r18, Z+3	; 0x03
    829a:	21 fd       	sbrc	r18, 1
    829c:	03 c0       	rjmp	.+6      	; 0x82a4 <fputc+0x16>
    829e:	8f ef       	ldi	r24, 0xFF	; 255
    82a0:	9f ef       	ldi	r25, 0xFF	; 255
    82a2:	2c c0       	rjmp	.+88     	; 0x82fc <fputc+0x6e>
    82a4:	22 ff       	sbrs	r18, 2
    82a6:	16 c0       	rjmp	.+44     	; 0x82d4 <fputc+0x46>
    82a8:	46 81       	ldd	r20, Z+6	; 0x06
    82aa:	57 81       	ldd	r21, Z+7	; 0x07
    82ac:	24 81       	ldd	r18, Z+4	; 0x04
    82ae:	35 81       	ldd	r19, Z+5	; 0x05
    82b0:	42 17       	cp	r20, r18
    82b2:	53 07       	cpc	r21, r19
    82b4:	44 f4       	brge	.+16     	; 0x82c6 <fputc+0x38>
    82b6:	a0 81       	ld	r26, Z
    82b8:	b1 81       	ldd	r27, Z+1	; 0x01
    82ba:	9d 01       	movw	r18, r26
    82bc:	2f 5f       	subi	r18, 0xFF	; 255
    82be:	3f 4f       	sbci	r19, 0xFF	; 255
    82c0:	20 83       	st	Z, r18
    82c2:	31 83       	std	Z+1, r19	; 0x01
    82c4:	8c 93       	st	X, r24
    82c6:	26 81       	ldd	r18, Z+6	; 0x06
    82c8:	37 81       	ldd	r19, Z+7	; 0x07
    82ca:	2f 5f       	subi	r18, 0xFF	; 255
    82cc:	3f 4f       	sbci	r19, 0xFF	; 255
    82ce:	26 83       	std	Z+6, r18	; 0x06
    82d0:	37 83       	std	Z+7, r19	; 0x07
    82d2:	14 c0       	rjmp	.+40     	; 0x82fc <fputc+0x6e>
    82d4:	8b 01       	movw	r16, r22
    82d6:	ec 01       	movw	r28, r24
    82d8:	fb 01       	movw	r30, r22
    82da:	00 84       	ldd	r0, Z+8	; 0x08
    82dc:	f1 85       	ldd	r31, Z+9	; 0x09
    82de:	e0 2d       	mov	r30, r0
    82e0:	19 95       	eicall
    82e2:	89 2b       	or	r24, r25
    82e4:	e1 f6       	brne	.-72     	; 0x829e <fputc+0x10>
    82e6:	d8 01       	movw	r26, r16
    82e8:	16 96       	adiw	r26, 0x06	; 6
    82ea:	8d 91       	ld	r24, X+
    82ec:	9c 91       	ld	r25, X
    82ee:	17 97       	sbiw	r26, 0x07	; 7
    82f0:	01 96       	adiw	r24, 0x01	; 1
    82f2:	16 96       	adiw	r26, 0x06	; 6
    82f4:	8d 93       	st	X+, r24
    82f6:	9c 93       	st	X, r25
    82f8:	17 97       	sbiw	r26, 0x07	; 7
    82fa:	ce 01       	movw	r24, r28
    82fc:	df 91       	pop	r29
    82fe:	cf 91       	pop	r28
    8300:	1f 91       	pop	r17
    8302:	0f 91       	pop	r16
    8304:	08 95       	ret

00008306 <__ultoa_invert>:
    8306:	fa 01       	movw	r30, r20
    8308:	aa 27       	eor	r26, r26
    830a:	28 30       	cpi	r18, 0x08	; 8
    830c:	51 f1       	breq	.+84     	; 0x8362 <__ultoa_invert+0x5c>
    830e:	20 31       	cpi	r18, 0x10	; 16
    8310:	81 f1       	breq	.+96     	; 0x8372 <__ultoa_invert+0x6c>
    8312:	e8 94       	clt
    8314:	6f 93       	push	r22
    8316:	6e 7f       	andi	r22, 0xFE	; 254
    8318:	6e 5f       	subi	r22, 0xFE	; 254
    831a:	7f 4f       	sbci	r23, 0xFF	; 255
    831c:	8f 4f       	sbci	r24, 0xFF	; 255
    831e:	9f 4f       	sbci	r25, 0xFF	; 255
    8320:	af 4f       	sbci	r26, 0xFF	; 255
    8322:	b1 e0       	ldi	r27, 0x01	; 1
    8324:	3e d0       	rcall	.+124    	; 0x83a2 <__ultoa_invert+0x9c>
    8326:	b4 e0       	ldi	r27, 0x04	; 4
    8328:	3c d0       	rcall	.+120    	; 0x83a2 <__ultoa_invert+0x9c>
    832a:	67 0f       	add	r22, r23
    832c:	78 1f       	adc	r23, r24
    832e:	89 1f       	adc	r24, r25
    8330:	9a 1f       	adc	r25, r26
    8332:	a1 1d       	adc	r26, r1
    8334:	68 0f       	add	r22, r24
    8336:	79 1f       	adc	r23, r25
    8338:	8a 1f       	adc	r24, r26
    833a:	91 1d       	adc	r25, r1
    833c:	a1 1d       	adc	r26, r1
    833e:	6a 0f       	add	r22, r26
    8340:	71 1d       	adc	r23, r1
    8342:	81 1d       	adc	r24, r1
    8344:	91 1d       	adc	r25, r1
    8346:	a1 1d       	adc	r26, r1
    8348:	20 d0       	rcall	.+64     	; 0x838a <__ultoa_invert+0x84>
    834a:	09 f4       	brne	.+2      	; 0x834e <__ultoa_invert+0x48>
    834c:	68 94       	set
    834e:	3f 91       	pop	r19
    8350:	2a e0       	ldi	r18, 0x0A	; 10
    8352:	26 9f       	mul	r18, r22
    8354:	11 24       	eor	r1, r1
    8356:	30 19       	sub	r19, r0
    8358:	30 5d       	subi	r19, 0xD0	; 208
    835a:	31 93       	st	Z+, r19
    835c:	de f6       	brtc	.-74     	; 0x8314 <__ultoa_invert+0xe>
    835e:	cf 01       	movw	r24, r30
    8360:	08 95       	ret
    8362:	46 2f       	mov	r20, r22
    8364:	47 70       	andi	r20, 0x07	; 7
    8366:	40 5d       	subi	r20, 0xD0	; 208
    8368:	41 93       	st	Z+, r20
    836a:	b3 e0       	ldi	r27, 0x03	; 3
    836c:	0f d0       	rcall	.+30     	; 0x838c <__ultoa_invert+0x86>
    836e:	c9 f7       	brne	.-14     	; 0x8362 <__ultoa_invert+0x5c>
    8370:	f6 cf       	rjmp	.-20     	; 0x835e <__ultoa_invert+0x58>
    8372:	46 2f       	mov	r20, r22
    8374:	4f 70       	andi	r20, 0x0F	; 15
    8376:	40 5d       	subi	r20, 0xD0	; 208
    8378:	4a 33       	cpi	r20, 0x3A	; 58
    837a:	18 f0       	brcs	.+6      	; 0x8382 <__ultoa_invert+0x7c>
    837c:	49 5d       	subi	r20, 0xD9	; 217
    837e:	31 fd       	sbrc	r19, 1
    8380:	40 52       	subi	r20, 0x20	; 32
    8382:	41 93       	st	Z+, r20
    8384:	02 d0       	rcall	.+4      	; 0x838a <__ultoa_invert+0x84>
    8386:	a9 f7       	brne	.-22     	; 0x8372 <__ultoa_invert+0x6c>
    8388:	ea cf       	rjmp	.-44     	; 0x835e <__ultoa_invert+0x58>
    838a:	b4 e0       	ldi	r27, 0x04	; 4
    838c:	a6 95       	lsr	r26
    838e:	97 95       	ror	r25
    8390:	87 95       	ror	r24
    8392:	77 95       	ror	r23
    8394:	67 95       	ror	r22
    8396:	ba 95       	dec	r27
    8398:	c9 f7       	brne	.-14     	; 0x838c <__ultoa_invert+0x86>
    839a:	00 97       	sbiw	r24, 0x00	; 0
    839c:	61 05       	cpc	r22, r1
    839e:	71 05       	cpc	r23, r1
    83a0:	08 95       	ret
    83a2:	9b 01       	movw	r18, r22
    83a4:	ac 01       	movw	r20, r24
    83a6:	0a 2e       	mov	r0, r26
    83a8:	06 94       	lsr	r0
    83aa:	57 95       	ror	r21
    83ac:	47 95       	ror	r20
    83ae:	37 95       	ror	r19
    83b0:	27 95       	ror	r18
    83b2:	ba 95       	dec	r27
    83b4:	c9 f7       	brne	.-14     	; 0x83a8 <__ultoa_invert+0xa2>
    83b6:	62 0f       	add	r22, r18
    83b8:	73 1f       	adc	r23, r19
    83ba:	84 1f       	adc	r24, r20
    83bc:	95 1f       	adc	r25, r21
    83be:	a0 1d       	adc	r26, r0
    83c0:	08 95       	ret

000083c2 <_exit>:
    83c2:	f8 94       	cli

000083c4 <__stop_program>:
    83c4:	ff cf       	rjmp	.-2      	; 0x83c4 <__stop_program>
