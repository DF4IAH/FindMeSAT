
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b19a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000067e  00802000  0000b19a  0000b22e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000046f  0080267e  0080267e  0000b8ae  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000b8ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000b908  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a00  00000000  00000000  0000b950  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001ca5a  00000000  00000000  0000c350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000069f1  00000000  00000000  00028daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000f5ab  00000000  00000000  0002f79b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002aa4  00000000  00000000  0003ed48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000418ab  00000000  00000000  000417ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bafb  00000000  00000000  00083097  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000998  00000000  00000000  0008eb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ed92  00000000  00000000  0008f530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__ctors_end>
       4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
       8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
       c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      10:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      14:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      18:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__vector_6>
      1c:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__vector_7>
      20:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__vector_8>
      24:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__vector_9>
      28:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      2c:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__vector_11>
      30:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      34:	0c 94 3d 31 	jmp	0x627a	; 0x627a <__vector_13>
      38:	0c 94 95 29 	jmp	0x532a	; 0x532a <__vector_14>
      3c:	0c 94 c2 29 	jmp	0x5384	; 0x5384 <__vector_15>
      40:	0c 94 ef 29 	jmp	0x53de	; 0x53de <__vector_16>
      44:	0c 94 1c 2a 	jmp	0x5438	; 0x5438 <__vector_17>
      48:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <__vector_18>
      4c:	0c 94 76 2a 	jmp	0x54ec	; 0x54ec <__vector_19>
      50:	0c 94 a3 2a 	jmp	0x5546	; 0x5546 <__vector_20>
      54:	0c 94 d0 2a 	jmp	0x55a0	; 0x55a0 <__vector_21>
      58:	0c 94 fd 2a 	jmp	0x55fa	; 0x55fa <__vector_22>
      5c:	0c 94 2a 2b 	jmp	0x5654	; 0x5654 <__vector_23>
      60:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      64:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      68:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      6c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      70:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      74:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      78:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      7c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      80:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      84:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      88:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      8c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      90:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      94:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      98:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      9c:	0c 94 be 26 	jmp	0x4d7c	; 0x4d7c <__vector_39>
      a0:	0c 94 f0 26 	jmp	0x4de0	; 0x4de0 <__vector_40>
      a4:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__vector_41>
      a8:	0c 94 54 27 	jmp	0x4ea8	; 0x4ea8 <__vector_42>
      ac:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      b0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      b4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      b8:	0c 94 64 31 	jmp	0x62c8	; 0x62c8 <__vector_46>
      bc:	0c 94 19 2d 	jmp	0x5a32	; 0x5a32 <__vector_47>
      c0:	0c 94 46 2d 	jmp	0x5a8c	; 0x5a8c <__vector_48>
      c4:	0c 94 73 2d 	jmp	0x5ae6	; 0x5ae6 <__vector_49>
      c8:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__vector_50>
      cc:	0c 94 cd 2d 	jmp	0x5b9a	; 0x5b9a <__vector_51>
      d0:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <__vector_52>
      d4:	0c 94 27 2e 	jmp	0x5c4e	; 0x5c4e <__vector_53>
      d8:	0c 94 54 2e 	jmp	0x5ca8	; 0x5ca8 <__vector_54>
      dc:	0c 94 81 2e 	jmp	0x5d02	; 0x5d02 <__vector_55>
      e0:	0c 94 ae 2e 	jmp	0x5d5c	; 0x5d5c <__vector_56>
      e4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      e8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      ec:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      f0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      f4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      f8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      fc:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     100:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     104:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     108:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     10c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     110:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     114:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     118:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     11c:	0c 94 f6 25 	jmp	0x4bec	; 0x4bec <__vector_71>
     120:	0c 94 28 26 	jmp	0x4c50	; 0x4c50 <__vector_72>
     124:	0c 94 5a 26 	jmp	0x4cb4	; 0x4cb4 <__vector_73>
     128:	0c 94 8c 26 	jmp	0x4d18	; 0x4d18 <__vector_74>
     12c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     130:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     134:	0c 94 57 2b 	jmp	0x56ae	; 0x56ae <__vector_77>
     138:	0c 94 84 2b 	jmp	0x5708	; 0x5708 <__vector_78>
     13c:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <__vector_79>
     140:	0c 94 de 2b 	jmp	0x57bc	; 0x57bc <__vector_80>
     144:	0c 94 0b 2c 	jmp	0x5816	; 0x5816 <__vector_81>
     148:	0c 94 38 2c 	jmp	0x5870	; 0x5870 <__vector_82>
     14c:	0c 94 65 2c 	jmp	0x58ca	; 0x58ca <__vector_83>
     150:	0c 94 92 2c 	jmp	0x5924	; 0x5924 <__vector_84>
     154:	0c 94 bf 2c 	jmp	0x597e	; 0x597e <__vector_85>
     158:	0c 94 ec 2c 	jmp	0x59d8	; 0x59d8 <__vector_86>
     15c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     160:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     164:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     168:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     16c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     170:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     174:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     178:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     17c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     180:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     184:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     188:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     18c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     190:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     194:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     198:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     19c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1a0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1a4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1a8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1ac:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1b0:	0c 94 db 2e 	jmp	0x5db6	; 0x5db6 <__vector_108>
     1b4:	0c 94 08 2f 	jmp	0x5e10	; 0x5e10 <__vector_109>
     1b8:	0c 94 35 2f 	jmp	0x5e6a	; 0x5e6a <__vector_110>
     1bc:	0c 94 62 2f 	jmp	0x5ec4	; 0x5ec4 <__vector_111>
     1c0:	0c 94 8f 2f 	jmp	0x5f1e	; 0x5f1e <__vector_112>
     1c4:	0c 94 bc 2f 	jmp	0x5f78	; 0x5f78 <__vector_113>
     1c8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1cc:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1d0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1d4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1d8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1dc:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1e0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1e4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1e8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1ec:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1f0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1f4:	0c 94 21 38 	jmp	0x7042	; 0x7042 <__vector_125>
     1f8:	0c 94 db 38 	jmp	0x71b6	; 0x71b6 <__vector_126>
     1fc:	02 33       	cpi	r16, 0x32	; 50
     1fe:	05 33       	cpi	r16, 0x35	; 53
     200:	08 33       	cpi	r16, 0x38	; 56
     202:	0b 33       	cpi	r16, 0x3B	; 59
     204:	0e 33       	cpi	r16, 0x3E	; 62
     206:	11 33       	cpi	r17, 0x31	; 49
     208:	14 33       	cpi	r17, 0x34	; 52
     20a:	53 3a       	cpi	r21, 0xA3	; 163
     20c:	66 3a       	cpi	r22, 0xA6	; 166
     20e:	79 3a       	cpi	r23, 0xA9	; 169
     210:	8c 3a       	cpi	r24, 0xAC	; 172
     212:	9f 3a       	cpi	r25, 0xAF	; 175
     214:	b2 3a       	cpi	r27, 0xA2	; 162
     216:	c5 3a       	cpi	r28, 0xA5	; 165

00000218 <PM_SINE_IP>:
     218:	00 fd f9 f6 f3 f0 ec e9 e6 e3 df dc d9 d6 d2 cf     ................
     228:	00 fd fa f6 f3 f0 ed ea e6 e3 e0 dd da d7 d3 d0     ................
     238:	00 fd fa f7 f3 f0 ed ea e7 e4 e1 de da d7 d4 d1     ................
     248:	00 fd fa f7 f4 f1 ee eb e7 e4 e1 de db d8 d5 d2     ................
     258:	00 fd fa f7 f4 f1 ee eb e8 e5 e2 df dc d9 d6 d3     ................
     268:	00 fd fa f7 f4 f1 ee eb e8 e6 e3 e0 dd da d7 d4     ................
     278:	00 fd fa f7 f4 f2 ef ec e9 e6 e3 e0 dd db d8 d5     ................
     288:	00 fd fa f8 f5 f2 ef ec e9 e7 e4 e1 de db d9 d6     ................
     298:	00 fd fa f8 f5 f2 ef ed ea e7 e4 e2 df dc d9 d7     ................
     2a8:	00 fd fb f8 f5 f3 f0 ed ea e8 e5 e2 e0 dd da d8     ................
     2b8:	00 fd fb f8 f5 f3 f0 ee eb e8 e6 e3 e0 de db d9     ................
     2c8:	00 fd fb f8 f6 f3 f1 ee eb e9 e6 e4 e1 df dc da     ................
     2d8:	00 fd fb f8 f6 f3 f1 ee ec e9 e7 e4 e2 df dd da     ................
     2e8:	00 fe fb f9 f6 f4 f1 ef ec ea e8 e5 e3 e0 de db     ................
     2f8:	00 fe fb f9 f6 f4 f2 ef ed eb e8 e6 e3 e1 df dc     ................
     308:	00 fe fb f9 f7 f4 f2 f0 ed eb e9 e7 e4 e2 e0 dd     ................
     318:	00 fe fb f9 f7 f5 f2 f0 ee ec e9 e7 e5 e3 e0 de     ................
     328:	00 fe fc f9 f7 f5 f3 f1 ee ec ea e8 e6 e4 e1 df     ................
     338:	00 fe fc fa f7 f5 f3 f1 ef ed eb e9 e6 e4 e2 e0     ................
     348:	00 fe fc fa f8 f6 f4 f2 ef ed eb e9 e7 e5 e3 e1     ................
     358:	00 fe fc fa f8 f6 f4 f2 f0 ee ec ea e8 e6 e4 e2     ................
     368:	00 fe fc fa f8 f6 f4 f2 f0 ef ed eb e9 e7 e5 e3     ................
     378:	00 fe fc fa f8 f7 f5 f3 f1 ef ed eb e9 e8 e6 e4     ................
     388:	00 fe fc fb f9 f7 f5 f3 f1 f0 ee ec ea e8 e7 e5     ................
     398:	00 fe fc fb f9 f7 f5 f4 f2 f0 ee ed eb e9 e7 e6     ................
     3a8:	00 fe fd fb f9 f8 f6 f4 f2 f1 ef ed ec ea e8 e7     ................
     3b8:	00 fe fd fb f9 f8 f6 f5 f3 f1 f0 ee ec eb e9 e8     ................
     3c8:	00 fe fd fb fa f8 f7 f5 f3 f2 f0 ef ed ec ea e9     ................
     3d8:	00 fe fd fb fa f8 f7 f5 f4 f2 f1 ef ee ec eb e9     ................
     3e8:	00 ff fd fc fa f9 f7 f6 f4 f3 f2 f0 ef ed ec ea     ................
     3f8:	00 ff fd fc fa f9 f8 f6 f5 f4 f2 f1 ef ee ed eb     ................
     408:	00 ff fd fc fb f9 f8 f7 f5 f4 f3 f2 f0 ef ee ec     ................
     418:	00 ff fd fc fb fa f8 f7 f6 f5 f3 f2 f1 f0 ee ed     ................
     428:	00 ff fe fc fb fa f9 f8 f6 f5 f4 f3 f2 f1 ef ee     ................
     438:	00 ff fe fd fb fa f9 f8 f7 f6 f5 f4 f2 f1 f0 ef     ................
     448:	00 ff fe fd fc fb fa f9 f7 f6 f5 f4 f3 f2 f1 f0     ................
     458:	00 ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1     ................
     468:	00 ff fe fd fc fb fa f9 f8 f8 f7 f6 f5 f4 f3 f2     ................
     478:	00 ff fe fd fc fc fb fa f9 f8 f7 f6 f5 f5 f4 f3     ................
     488:	00 ff fe fe fd fc fb fa f9 f9 f8 f7 f6 f5 f5 f4     ................
     498:	00 ff fe fe fd fc fb fb fa f9 f8 f8 f7 f6 f5 f5     ................
     4a8:	00 ff ff fe fd fd fc fb fa fa f9 f8 f8 f7 f6 f6     ................
     4b8:	00 ff ff fe fd fd fc fc fb fa fa f9 f8 f8 f7 f7     ................
     4c8:	00 ff ff fe fe fd fd fc fb fb fa fa f9 f9 f8 f8     ................
     4d8:	00 ff ff fe fe fd fd fc fc fb fb fa fa f9 f9 f8     ................
     4e8:	00 00 ff ff fe fe fd fd fc fc fc fb fb fa fa f9     ................
     4f8:	00 00 ff ff fe fe fe fd fd fd fc fc fb fb fb fa     ................
     508:	00 00 ff ff ff fe fe fe fd fd fd fd fc fc fc fb     ................
     518:	00 00 ff ff ff ff fe fe fe fe fd fd fd fd fc fc     ................
     528:	00 00 00 ff ff ff ff ff fe fe fe fe fe fe fd fd     ................
     538:	00 00 00 00 ff ff ff ff ff ff ff ff fe fe fe fe     ................
	...
     550:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     570:	01 01 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
     580:	01 01 01 01 02 02 02 02 00 00 00 01 01 01 01 01     ................
     590:	02 02 02 02 02 02 03 03 00 00 01 01 01 01 02 02     ................
     5a0:	02 02 03 03 03 03 04 04 00 00 01 01 01 02 02 02     ................
     5b0:	03 03 03 03 04 04 04 05 00 00 01 01 02 02 02 03     ................
     5c0:	03 03 04 04 05 05 05 06 00 00 01 01 02 02 03 03     ................
     5d0:	04 04 04 05 05 06 06 07 00 01 01 02 02 03 03 04     ................
     5e0:	04 05 05 06 06 07 07 08 00 01 01 02 02 03 03 04     ................
     5f0:	05 05 06 06 07 07 08 08 00 01 01 02 03 03 04 04     ................
     600:	05 06 06 07 08 08 09 09 00 01 01 02 03 03 04 05     ................
     610:	06 06 07 08 08 09 0a 0a 00 01 02 02 03 04 05 05     ................
     620:	06 07 08 08 09 0a 0b 0b 00 01 02 02 03 04 05 06     ................
     630:	07 07 08 09 0a 0b 0b 0c 00 01 02 03 04 04 05 06     ................
     640:	07 08 09 0a 0b 0b 0c 0d 00 01 02 03 04 05 06 07     ................
     650:	08 08 09 0a 0b 0c 0d 0e 00 01 02 03 04 05 06 07     ................
     660:	08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 04 05 06 07     ................
     670:	09 0a 0b 0c 0d 0e 0f 10 00 01 02 03 05 06 07 08     ................
     680:	09 0a 0b 0c 0e 0f 10 11 00 01 02 04 05 06 07 08     ................
     690:	0a 0b 0c 0d 0e 0f 11 12 00 01 03 04 05 06 08 09     ................
     6a0:	0a 0b 0d 0e 0f 10 12 13 00 01 03 04 05 07 08 09     ................
     6b0:	0b 0c 0d 0e 10 11 12 14 00 01 03 04 06 07 08 0a     ................
     6c0:	0b 0c 0e 0f 11 12 13 15 00 01 03 04 06 07 09 0a     ................
     6d0:	0c 0d 0e 10 11 13 14 16 00 02 03 05 06 08 09 0b     ................
     6e0:	0c 0e 0f 11 12 14 15 17 00 02 03 05 06 08 09 0b     ................
     6f0:	0d 0e 10 11 13 14 16 17 00 02 03 05 07 08 0a 0b     ................
     700:	0d 0f 10 12 14 15 17 18 00 02 03 05 07 08 0a 0c     ................
     710:	0e 0f 11 13 14 16 18 19 00 02 04 05 07 09 0b 0c     ................
     720:	0e 10 12 13 15 17 19 1a 00 02 04 05 07 09 0b 0d     ................
     730:	0f 10 12 14 16 18 19 1b 00 02 04 06 08 09 0b 0d     ................
     740:	0f 11 13 15 17 18 1a 1c 00 02 04 06 08 0a 0c 0e     ................
     750:	10 11 13 15 17 19 1b 1d 00 02 04 06 08 0a 0c 0e     ................
     760:	10 12 14 16 18 1a 1c 1e 00 02 04 06 08 0a 0c 0e     ................
     770:	11 13 15 17 19 1b 1d 1f 00 02 04 06 09 0b 0d 0f     ................
     780:	11 13 15 17 1a 1c 1e 20 00 02 04 07 09 0b 0d 0f     ....... ........
     790:	12 14 16 18 1a 1c 1f 21 00 02 05 07 09 0b 0e 10     .......!........
     7a0:	12 14 17 19 1b 1d 20 22 00 02 05 07 09 0c 0e 10     ...... "........
     7b0:	13 15 17 19 1c 1e 20 23 00 02 05 07 0a 0c 0e 11     ...... #........
     7c0:	13 15 18 1a 1d 1f 21 24 00 02 05 07 0a 0c 0f 11     ......!$........
     7d0:	14 16 18 1b 1d 20 22 25 00 03 05 08 0a 0d 0f 12     ..... "%........
     7e0:	14 17 19 1c 1e 21 23 26 00 03 05 08 0a 0d 0f 12     .....!#&........
     7f0:	15 17 1a 1c 1f 21 24 26 00 03 05 08 0b 0d 10 12     .....!$&........
     800:	15 18 1a 1d 20 22 25 27 00 03 05 08 0b 0d 10 13     .... "%'........
     810:	16 18 1b 1e 20 23 26 28 00 03 06 08 0b 0e 11 13     .... #&(........
     820:	16 19 1c 1e 21 24 27 29 00 03 06 08 0b 0e 11 14     ....!$')........
     830:	17 19 1c 1f 22 25 27 2a 00 03 06 09 0c 0e 11 14     ...."%'*........
     840:	17 1a 1d 20 23 25 28 2b 00 03 06 09 0c 0f 12 15     ... #%(+........
     850:	18 1a 1d 20 23 26 29 2c 00 03 06 09 0c 0f 12 15     ... #&),........
     860:	18 1b 1e 21 24 27 2a 2d 00 03 06 09 0c 0f 12 15     ...!$'*-........
     870:	19 1c 1f 22 25 28 2b 2e 00 03 06 09 0d 10 13 16     ..."%(+.........
     880:	19 1c 1f 22 26 29 2c 2f 00 03 06 0a 0d 10 13 16     ..."&),/........
     890:	1a 1d 20 23 26 29 2d 30                             .. #&)-0

00000898 <PM_SINE>:
     898:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     8a8:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     8b8:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     8c8:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     8d8:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     8e8:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     8f8:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     908:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     918:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     928:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     938:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     948:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     958:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     968:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     978:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     988:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     998:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     9a8:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     9b8:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     9c8:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     9d8:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     9e8:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     9f8:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     a08:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     a18:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     a28:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     a38:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     a48:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     a58:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     a68:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     a78:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     a88:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     a98:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     aa8:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     ab8:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     ac8:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     ad8:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
     ae8:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
     af8:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
     b08:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
     b18:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
     b28:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
     b38:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
     b48:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
     b58:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
     b68:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
     b78:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
     b88:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
     b98:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
     ba8:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
     bb8:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
     bc8:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
     bd8:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
     be8:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
     bf8:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
     c08:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
     c18:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
     c28:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
     c38:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
     c48:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
     c58:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
     c68:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
     c78:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
     c88:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
     c98:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
     ca8:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
     cb8:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
     cc8:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
     cd8:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
     ce8:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
     cf8:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
     d08:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
     d18:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
     d28:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
     d38:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
     d48:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
     d58:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
     d68:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
     d78:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
     d88:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
     d98:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
     da8:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
     db8:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
     dc8:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
     dd8:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
     de8:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
     df8:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
     e08:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
     e18:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
     e28:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
     e38:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
     e48:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
     e58:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
     e68:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
     e78:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
     e88:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
     e98:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
     ea8:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
     eb8:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
     ec8:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
     ed8:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
     ee8:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
     ef8:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
     f08:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
     f18:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
     f28:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
     f38:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
     f48:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
     f58:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
     f68:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
     f78:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
     f88:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
     f98:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
     fa8:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
     fb8:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
     fc8:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
     fd8:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
     fe8:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
     ff8:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
    1008:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
    1018:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
    1028:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
    1038:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
    1048:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
    1058:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
    1068:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
    1078:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
    1088:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
    1098:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
    10a8:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
    10b8:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
    10c8:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
    10d8:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
    10e8:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
    10f8:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
    1108:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
    1118:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
    1128:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
    1138:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
    1148:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
    1158:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
    1168:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
    1178:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
    1188:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
    1198:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
    11a8:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
    11b8:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
    11c8:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
    11d8:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
    11e8:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
    11f8:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
    1208:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
    1218:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
    1228:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
    1238:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
    1248:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
    1258:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
    1268:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
    1278:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
    1288:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
    1298:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
    12a8:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
    12b8:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
    12c8:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
    12d8:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
    12e8:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
    12f8:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
    1308:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
    1318:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
    1328:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
    1338:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
    1348:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
    1358:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
    1368:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
    1378:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
    1388:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
    1398:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
    13a8:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
    13b8:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
    13c8:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
    13d8:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
    13e8:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
    13f8:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
    1408:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
    1418:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
    1428:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
    1438:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
    1448:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
    1458:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
    1468:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
    1478:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
    1488:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
    1498:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
    14a8:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
    14b8:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
    14c8:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
    14d8:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
    14e8:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
    14f8:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
    1508:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
    1518:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
    1528:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
    1538:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
    1548:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
    1558:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
    1568:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
    1578:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
    1588:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
    1598:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
    15a8:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
    15b8:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
    15c8:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
    15d8:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
    15e8:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
    15f8:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
    1608:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
    1618:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
    1628:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
    1638:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
    1648:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
    1658:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
    1668:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
    1678:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1688:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1698:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    16a8:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    16b8:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    16c8:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    16d8:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    16e8:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    16f8:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1708:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1718:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    1728:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    1738:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    1748:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    1758:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    1768:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    1778:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1788:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1798:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    17a8:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    17b8:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    17c8:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    17d8:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    17e8:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    17f8:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1808:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1818:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    1828:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    1838:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    1848:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    1858:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    1868:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    1878:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1888:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1898:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    18a8:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    18b8:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    18c8:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    18d8:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    18e8:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    18f8:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1908:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1918:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    1928:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    1938:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    1948:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    1958:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    1968:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    1978:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1988:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1998:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    19a8:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    19b8:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    19c8:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    19d8:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    19e8:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    19f8:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1a08:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1a18:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    1a28:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    1a38:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    1a48:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    1a58:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    1a68:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    1a78:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1a88:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1a98:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1aa8:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1ab8:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1ac8:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1ad8:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    1ae8:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    1af8:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    1b08:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    1b18:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    1b28:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    1b38:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    1b48:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    1b58:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    1b68:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    1b78:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    1b88:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    1b98:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    1ba8:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    1bb8:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    1bc8:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    1bd8:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    1be8:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    1bf8:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    1c08:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    1c18:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    1c28:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    1c38:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    1c48:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    1c58:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    1c68:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    1c78:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    1c88:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    1c98:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    1ca8:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    1cb8:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    1cc8:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    1cd8:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    1ce8:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    1cf8:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    1d08:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    1d18:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    1d28:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    1d38:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    1d48:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    1d58:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    1d68:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    1d78:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    1d88:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    1d98:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    1da8:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    1db8:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    1dc8:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    1dd8:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    1de8:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    1df8:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    1e08:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    1e18:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    1e28:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    1e38:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    1e48:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    1e58:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    1e68:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    1e78:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    1e88:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    1e98:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    1ea8:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    1eb8:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    1ec8:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    1ed8:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    1ee8:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    1ef8:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    1f08:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    1f18:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    1f28:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    1f38:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    1f48:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    1f58:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    1f68:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    1f78:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    1f88:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    1f98:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    1fa8:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    1fb8:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    1fc8:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    1fd8:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    1fe8:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    1ff8:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    2008:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    2018:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    2028:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    2038:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    2048:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    2058:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    2068:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    2078:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    2088:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    2098:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    20a8:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    20b8:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    20c8:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    20d8:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    20e8:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    20f8:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    2108:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    2118:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    2128:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    2138:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    2148:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    2158:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    2168:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    2178:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    2188:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    2198:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    21a8:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    21b8:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    21c8:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    21d8:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    21e8:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    21f8:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    2208:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    2218:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    2228:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    2238:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    2248:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    2258:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    2268:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    2278:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    2288:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    2298:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    22a8:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    22b8:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    22c8:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    22d8:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    22e8:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    22f8:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    2308:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    2318:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    2328:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    2338:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    2348:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    2358:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    2368:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    2378:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    2388:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    2398:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    23a8:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    23b8:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    23c8:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    23d8:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    23e8:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    23f8:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    2408:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    2418:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    2428:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    2438:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    2448:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    2458:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    2468:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    2478:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    2488:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    2498:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    24a8:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    24b8:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    24c8:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    24d8:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    24e8:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    24f8:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    2508:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    2518:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    2528:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    2538:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    2548:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    2558:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    2568:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    2578:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    2588:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    2598:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    25a8:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    25b8:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    25c8:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    25d8:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    25e8:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    25f8:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    2608:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    2618:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    2628:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    2638:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    2648:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    2658:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    2668:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    2678:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2688:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2698:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    26a8:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    26b8:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    26c8:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    26d8:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    26e8:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    26f8:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2708:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2718:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    2728:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    2738:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    2748:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    2758:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    2768:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    2778:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2788:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2798:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    27a8:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    27b8:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    27c8:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    27d8:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    27e8:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    27f8:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2808:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2818:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    2828:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    2838:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    2848:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    2858:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    2868:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    2878:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2888:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002898 <__ctors_end>:
    2898:	11 24       	eor	r1, r1
    289a:	1f be       	out	0x3f, r1	; 63
    289c:	cf ef       	ldi	r28, 0xFF	; 255
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	df e5       	ldi	r29, 0x5F	; 95
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	00 e0       	ldi	r16, 0x00	; 0
    28a6:	0c bf       	out	0x3c, r16	; 60

000028a8 <__do_copy_data>:
    28a8:	16 e2       	ldi	r17, 0x26	; 38
    28aa:	a0 e0       	ldi	r26, 0x00	; 0
    28ac:	b0 e2       	ldi	r27, 0x20	; 32
    28ae:	ea e9       	ldi	r30, 0x9A	; 154
    28b0:	f1 eb       	ldi	r31, 0xB1	; 177
    28b2:	00 e0       	ldi	r16, 0x00	; 0
    28b4:	0b bf       	out	0x3b, r16	; 59
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <__do_copy_data+0x14>
    28b8:	07 90       	elpm	r0, Z+
    28ba:	0d 92       	st	X+, r0
    28bc:	ae 37       	cpi	r26, 0x7E	; 126
    28be:	b1 07       	cpc	r27, r17
    28c0:	d9 f7       	brne	.-10     	; 0x28b8 <__do_copy_data+0x10>

000028c2 <__do_clear_bss>:
    28c2:	2a e2       	ldi	r18, 0x2A	; 42
    28c4:	ae e7       	ldi	r26, 0x7E	; 126
    28c6:	b6 e2       	ldi	r27, 0x26	; 38
    28c8:	01 c0       	rjmp	.+2      	; 0x28cc <.do_clear_bss_start>

000028ca <.do_clear_bss_loop>:
    28ca:	1d 92       	st	X+, r1

000028cc <.do_clear_bss_start>:
    28cc:	ad 3e       	cpi	r26, 0xED	; 237
    28ce:	b2 07       	cpc	r27, r18
    28d0:	e1 f7       	brne	.-8      	; 0x28ca <.do_clear_bss_loop>
    28d2:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <main>
    28d6:	0c 94 cb 58 	jmp	0xb196	; 0xb196 <_exit>

000028da <__bad_interrupt>:
    28da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000028de <nvm_init>:
#include "conf_nvm.h"
#include "nvm.h"

status_code_t nvm_init(mem_type_t mem)
{
	switch (mem) {
    28de:	83 30       	cpi	r24, 0x03	; 3
    28e0:	10 f4       	brcc	.+4      	; 0x28e6 <nvm_init+0x8>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	08 95       	ret
		}
		break;
#endif

	default:
		return ERR_INVALID_ARG;
    28e6:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    28e8:	08 95       	ret

000028ea <dma_interrupt>:
void dma_disable(void)
{
	DMA.CTRL = 0;
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	48 2f       	mov	r20, r24
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	fa 01       	movw	r30, r20
    28f4:	71 96       	adiw	r30, 0x11	; 17
    28f6:	e2 95       	swap	r30
    28f8:	f2 95       	swap	r31
    28fa:	f0 7f       	andi	r31, 0xF0	; 240
    28fc:	fe 27       	eor	r31, r30
    28fe:	e0 7f       	andi	r30, 0xF0	; 240
    2900:	fe 27       	eor	r31, r30
    2902:	a0 e0       	ldi	r26, 0x00	; 0
    2904:	b1 e0       	ldi	r27, 0x01	; 1
    2906:	14 96       	adiw	r26, 0x04	; 4
    2908:	9c 91       	ld	r25, X
    290a:	14 97       	sbiw	r26, 0x04	; 4
    290c:	13 96       	adiw	r26, 0x03	; 3
    290e:	6c 91       	ld	r22, X
    2910:	da 01       	movw	r26, r20
    2912:	14 96       	adiw	r26, 0x04	; 4
    2914:	21 e0       	ldi	r18, 0x01	; 1
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	e9 01       	movw	r28, r18
    291a:	08 2e       	mov	r0, r24
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <dma_interrupt+0x38>
    291e:	cc 0f       	add	r28, r28
    2920:	dd 1f       	adc	r29, r29
    2922:	0a 94       	dec	r0
    2924:	e2 f7       	brpl	.-8      	; 0x291e <dma_interrupt+0x34>
    2926:	0a 2e       	mov	r0, r26
    2928:	02 c0       	rjmp	.+4      	; 0x292e <dma_interrupt+0x44>
    292a:	22 0f       	add	r18, r18
    292c:	33 1f       	adc	r19, r19
    292e:	0a 94       	dec	r0
    2930:	e2 f7       	brpl	.-8      	; 0x292a <dma_interrupt+0x40>
    2932:	2c 2b       	or	r18, r28
    2934:	62 23       	and	r22, r18
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	eb 01       	movw	r28, r22
    293a:	0a 2e       	mov	r0, r26
    293c:	02 c0       	rjmp	.+4      	; 0x2942 <dma_interrupt+0x58>
    293e:	d5 95       	asr	r29
    2940:	c7 95       	ror	r28
    2942:	0a 94       	dec	r0
    2944:	e2 f7       	brpl	.-8      	; 0x293e <dma_interrupt+0x54>
    2946:	c0 fd       	sbrc	r28, 0
    2948:	1a c0       	rjmp	.+52     	; 0x297e <dma_interrupt+0x94>
    294a:	08 2e       	mov	r0, r24
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <dma_interrupt+0x68>
    294e:	75 95       	asr	r23
    2950:	67 95       	ror	r22
    2952:	0a 94       	dec	r0
    2954:	e2 f7       	brpl	.-8      	; 0x294e <dma_interrupt+0x64>
    2956:	60 fd       	sbrc	r22, 0
    2958:	14 c0       	rjmp	.+40     	; 0x2982 <dma_interrupt+0x98>
    295a:	29 23       	and	r18, r25
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	b9 01       	movw	r22, r18
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <dma_interrupt+0x7c>
    2962:	75 95       	asr	r23
    2964:	67 95       	ror	r22
    2966:	aa 95       	dec	r26
    2968:	e2 f7       	brpl	.-8      	; 0x2962 <dma_interrupt+0x78>
    296a:	60 fd       	sbrc	r22, 0
    296c:	0c c0       	rjmp	.+24     	; 0x2986 <dma_interrupt+0x9c>
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <dma_interrupt+0x8a>
    2970:	35 95       	asr	r19
    2972:	27 95       	ror	r18
    2974:	8a 95       	dec	r24
    2976:	e2 f7       	brpl	.-8      	; 0x2970 <dma_interrupt+0x86>
    2978:	82 2f       	mov	r24, r18
    297a:	81 70       	andi	r24, 0x01	; 1
    297c:	05 c0       	rjmp	.+10     	; 0x2988 <dma_interrupt+0x9e>
    297e:	84 e0       	ldi	r24, 0x04	; 4
    2980:	03 c0       	rjmp	.+6      	; 0x2988 <dma_interrupt+0x9e>
    2982:	83 e0       	ldi	r24, 0x03	; 3
    2984:	01 c0       	rjmp	.+2      	; 0x2988 <dma_interrupt+0x9e>
    2986:	82 e0       	ldi	r24, 0x02	; 2
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	90 63       	ori	r25, 0x30	; 48
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	44 0f       	add	r20, r20
    2990:	55 1f       	adc	r21, r21
    2992:	fa 01       	movw	r30, r20
    2994:	e7 54       	subi	r30, 0x47	; 71
    2996:	f5 4d       	sbci	r31, 0xD5	; 213
    2998:	01 90       	ld	r0, Z+
    299a:	f0 81       	ld	r31, Z
    299c:	e0 2d       	mov	r30, r0
    299e:	30 97       	sbiw	r30, 0x00	; 0
    29a0:	09 f0       	breq	.+2      	; 0x29a4 <dma_interrupt+0xba>
    29a2:	19 95       	eicall
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	08 95       	ret

000029aa <dma_enable>:
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	1f 92       	push	r1
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	61 e0       	ldi	r22, 0x01	; 1
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    29bc:	80 91 d8 2a 	lds	r24, 0x2AD8	; 0x802ad8 <sleepmgr_locks+0x1>
    29c0:	8f 3f       	cpi	r24, 0xFF	; 255
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <dma_enable+0x1c>
    29c4:	ff cf       	rjmp	.-2      	; 0x29c4 <dma_enable+0x1a>
    29c6:	8f b7       	in	r24, 0x3f	; 63
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	f8 94       	cli
    29cc:	99 81       	ldd	r25, Y+1	; 0x01
    29ce:	e7 ed       	ldi	r30, 0xD7	; 215
    29d0:	fa e2       	ldi	r31, 0x2A	; 42
    29d2:	81 81       	ldd	r24, Z+1	; 0x01
    29d4:	8f 5f       	subi	r24, 0xFF	; 255
    29d6:	81 83       	std	Z+1, r24	; 0x01
    29d8:	9f bf       	out	0x3f, r25	; 63
    29da:	e0 e0       	ldi	r30, 0x00	; 0
    29dc:	f1 e0       	ldi	r31, 0x01	; 1
    29de:	80 e4       	ldi	r24, 0x40	; 64
    29e0:	80 83       	st	Z, r24
    29e2:	80 e8       	ldi	r24, 0x80	; 128
    29e4:	80 83       	st	Z, r24
    29e6:	0f 90       	pop	r0
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	08 95       	ret

000029ee <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    29ee:	e8 2f       	mov	r30, r24
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	ee 0f       	add	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	e7 54       	subi	r30, 0x47	; 71
    29f8:	f5 4d       	sbci	r31, 0xD5	; 213
    29fa:	60 83       	st	Z, r22
    29fc:	71 83       	std	Z+1, r23	; 0x01
    29fe:	08 95       	ret

00002a00 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    2a00:	1f 92       	push	r1
    2a02:	0f 92       	push	r0
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	0f 92       	push	r0
    2a08:	11 24       	eor	r1, r1
    2a0a:	0b b6       	in	r0, 0x3b	; 59
    2a0c:	0f 92       	push	r0
    2a0e:	2f 93       	push	r18
    2a10:	3f 93       	push	r19
    2a12:	4f 93       	push	r20
    2a14:	5f 93       	push	r21
    2a16:	6f 93       	push	r22
    2a18:	7f 93       	push	r23
    2a1a:	8f 93       	push	r24
    2a1c:	9f 93       	push	r25
    2a1e:	af 93       	push	r26
    2a20:	bf 93       	push	r27
    2a22:	ef 93       	push	r30
    2a24:	ff 93       	push	r31
	dma_interrupt(0);
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	60 df       	rcall	.-320    	; 0x28ea <dma_interrupt>
}
    2a2a:	ff 91       	pop	r31
    2a2c:	ef 91       	pop	r30
    2a2e:	bf 91       	pop	r27
    2a30:	af 91       	pop	r26
    2a32:	9f 91       	pop	r25
    2a34:	8f 91       	pop	r24
    2a36:	7f 91       	pop	r23
    2a38:	6f 91       	pop	r22
    2a3a:	5f 91       	pop	r21
    2a3c:	4f 91       	pop	r20
    2a3e:	3f 91       	pop	r19
    2a40:	2f 91       	pop	r18
    2a42:	0f 90       	pop	r0
    2a44:	0b be       	out	0x3b, r0	; 59
    2a46:	0f 90       	pop	r0
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	0f 90       	pop	r0
    2a4c:	1f 90       	pop	r1
    2a4e:	18 95       	reti

00002a50 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    2a50:	1f 92       	push	r1
    2a52:	0f 92       	push	r0
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	0f 92       	push	r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	0b b6       	in	r0, 0x3b	; 59
    2a5c:	0f 92       	push	r0
    2a5e:	2f 93       	push	r18
    2a60:	3f 93       	push	r19
    2a62:	4f 93       	push	r20
    2a64:	5f 93       	push	r21
    2a66:	6f 93       	push	r22
    2a68:	7f 93       	push	r23
    2a6a:	8f 93       	push	r24
    2a6c:	9f 93       	push	r25
    2a6e:	af 93       	push	r26
    2a70:	bf 93       	push	r27
    2a72:	ef 93       	push	r30
    2a74:	ff 93       	push	r31
	dma_interrupt(1);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	38 df       	rcall	.-400    	; 0x28ea <dma_interrupt>
}
    2a7a:	ff 91       	pop	r31
    2a7c:	ef 91       	pop	r30
    2a7e:	bf 91       	pop	r27
    2a80:	af 91       	pop	r26
    2a82:	9f 91       	pop	r25
    2a84:	8f 91       	pop	r24
    2a86:	7f 91       	pop	r23
    2a88:	6f 91       	pop	r22
    2a8a:	5f 91       	pop	r21
    2a8c:	4f 91       	pop	r20
    2a8e:	3f 91       	pop	r19
    2a90:	2f 91       	pop	r18
    2a92:	0f 90       	pop	r0
    2a94:	0b be       	out	0x3b, r0	; 59
    2a96:	0f 90       	pop	r0
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	0f 90       	pop	r0
    2a9c:	1f 90       	pop	r1
    2a9e:	18 95       	reti

00002aa0 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    2aa0:	1f 92       	push	r1
    2aa2:	0f 92       	push	r0
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	0f 92       	push	r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	0b b6       	in	r0, 0x3b	; 59
    2aac:	0f 92       	push	r0
    2aae:	2f 93       	push	r18
    2ab0:	3f 93       	push	r19
    2ab2:	4f 93       	push	r20
    2ab4:	5f 93       	push	r21
    2ab6:	6f 93       	push	r22
    2ab8:	7f 93       	push	r23
    2aba:	8f 93       	push	r24
    2abc:	9f 93       	push	r25
    2abe:	af 93       	push	r26
    2ac0:	bf 93       	push	r27
    2ac2:	ef 93       	push	r30
    2ac4:	ff 93       	push	r31
	dma_interrupt(2);
    2ac6:	82 e0       	ldi	r24, 0x02	; 2
    2ac8:	10 df       	rcall	.-480    	; 0x28ea <dma_interrupt>
}
    2aca:	ff 91       	pop	r31
    2acc:	ef 91       	pop	r30
    2ace:	bf 91       	pop	r27
    2ad0:	af 91       	pop	r26
    2ad2:	9f 91       	pop	r25
    2ad4:	8f 91       	pop	r24
    2ad6:	7f 91       	pop	r23
    2ad8:	6f 91       	pop	r22
    2ada:	5f 91       	pop	r21
    2adc:	4f 91       	pop	r20
    2ade:	3f 91       	pop	r19
    2ae0:	2f 91       	pop	r18
    2ae2:	0f 90       	pop	r0
    2ae4:	0b be       	out	0x3b, r0	; 59
    2ae6:	0f 90       	pop	r0
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	0f 90       	pop	r0
    2aec:	1f 90       	pop	r1
    2aee:	18 95       	reti

00002af0 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    2af0:	1f 92       	push	r1
    2af2:	0f 92       	push	r0
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	0f 92       	push	r0
    2af8:	11 24       	eor	r1, r1
    2afa:	0b b6       	in	r0, 0x3b	; 59
    2afc:	0f 92       	push	r0
    2afe:	2f 93       	push	r18
    2b00:	3f 93       	push	r19
    2b02:	4f 93       	push	r20
    2b04:	5f 93       	push	r21
    2b06:	6f 93       	push	r22
    2b08:	7f 93       	push	r23
    2b0a:	8f 93       	push	r24
    2b0c:	9f 93       	push	r25
    2b0e:	af 93       	push	r26
    2b10:	bf 93       	push	r27
    2b12:	ef 93       	push	r30
    2b14:	ff 93       	push	r31
	dma_interrupt(3);
    2b16:	83 e0       	ldi	r24, 0x03	; 3
    2b18:	e8 de       	rcall	.-560    	; 0x28ea <dma_interrupt>
}
    2b1a:	ff 91       	pop	r31
    2b1c:	ef 91       	pop	r30
    2b1e:	bf 91       	pop	r27
    2b20:	af 91       	pop	r26
    2b22:	9f 91       	pop	r25
    2b24:	8f 91       	pop	r24
    2b26:	7f 91       	pop	r23
    2b28:	6f 91       	pop	r22
    2b2a:	5f 91       	pop	r21
    2b2c:	4f 91       	pop	r20
    2b2e:	3f 91       	pop	r19
    2b30:	2f 91       	pop	r18
    2b32:	0f 90       	pop	r0
    2b34:	0b be       	out	0x3b, r0	; 59
    2b36:	0f 90       	pop	r0
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	0f 90       	pop	r0
    2b3c:	1f 90       	pop	r1
    2b3e:	18 95       	reti

00002b40 <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	1f 92       	push	r1
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    2b4c:	e8 2f       	mov	r30, r24
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	71 96       	adiw	r30, 0x11	; 17
    2b52:	e2 95       	swap	r30
    2b54:	f2 95       	swap	r31
    2b56:	f0 7f       	andi	r31, 0xF0	; 240
    2b58:	fe 27       	eor	r31, r30
    2b5a:	e0 7f       	andi	r30, 0xF0	; 240
    2b5c:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2b5e:	8f b7       	in	r24, 0x3f	; 63
    2b60:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2b62:	f8 94       	cli
	return flags;
    2b64:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    2b66:	19 96       	adiw	r26, 0x09	; 9
    2b68:	8c 91       	ld	r24, X
    2b6a:	19 97       	sbiw	r26, 0x09	; 9
    2b6c:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    2b6e:	1a 96       	adiw	r26, 0x0a	; 10
    2b70:	8c 91       	ld	r24, X
    2b72:	1a 97       	sbiw	r26, 0x0a	; 10
    2b74:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    2b76:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    2b78:	17 96       	adiw	r26, 0x07	; 7
    2b7a:	8c 91       	ld	r24, X
    2b7c:	17 97       	sbiw	r26, 0x07	; 7
    2b7e:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    2b80:	18 96       	adiw	r26, 0x08	; 8
    2b82:	8c 91       	ld	r24, X
    2b84:	18 97       	sbiw	r26, 0x08	; 8
    2b86:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    2b88:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    2b8a:	12 96       	adiw	r26, 0x02	; 2
    2b8c:	8c 91       	ld	r24, X
    2b8e:	12 97       	sbiw	r26, 0x02	; 2
    2b90:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    2b92:	13 96       	adiw	r26, 0x03	; 3
    2b94:	8c 91       	ld	r24, X
    2b96:	13 97       	sbiw	r26, 0x03	; 3
    2b98:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    2b9a:	14 96       	adiw	r26, 0x04	; 4
    2b9c:	2d 91       	ld	r18, X+
    2b9e:	3c 91       	ld	r19, X
    2ba0:	15 97       	sbiw	r26, 0x05	; 5
    2ba2:	24 83       	std	Z+4, r18	; 0x04
    2ba4:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    2ba6:	16 96       	adiw	r26, 0x06	; 6
    2ba8:	8c 91       	ld	r24, X
    2baa:	16 97       	sbiw	r26, 0x06	; 6
    2bac:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    2bae:	11 96       	adiw	r26, 0x01	; 1
    2bb0:	8c 91       	ld	r24, X
    2bb2:	11 97       	sbiw	r26, 0x01	; 1
    2bb4:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    2bb6:	8c 91       	ld	r24, X
    2bb8:	8f 77       	andi	r24, 0x7F	; 127
    2bba:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2bbc:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    2bbe:	0f 90       	pop	r0
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	08 95       	ret

00002bc6 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    2bc6:	04 c0       	rjmp	.+8      	; 0x2bd0 <__portable_avr_delay_cycles+0xa>
    2bc8:	61 50       	subi	r22, 0x01	; 1
    2bca:	71 09       	sbc	r23, r1
    2bcc:	81 09       	sbc	r24, r1
    2bce:	91 09       	sbc	r25, r1
    2bd0:	61 15       	cp	r22, r1
    2bd2:	71 05       	cpc	r23, r1
    2bd4:	81 05       	cpc	r24, r1
    2bd6:	91 05       	cpc	r25, r1
    2bd8:	b9 f7       	brne	.-18     	; 0x2bc8 <__portable_avr_delay_cycles+0x2>
    2bda:	08 95       	ret

00002bdc <rtc_get_time>:
    2bdc:	80 e1       	ldi	r24, 0x10	; 16
    2bde:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    2be2:	e0 e2       	ldi	r30, 0x20	; 32
    2be4:	f4 e0       	ldi	r31, 0x04	; 4
    2be6:	81 81       	ldd	r24, Z+1	; 0x01
    2be8:	84 fd       	sbrc	r24, 4
    2bea:	fd cf       	rjmp	.-6      	; 0x2be6 <rtc_get_time+0xa>
    2bec:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    2bf0:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    2bf4:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    2bf8:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    2bfc:	08 95       	ret

00002bfe <rtc_set_callback>:
    2bfe:	80 93 c1 2a 	sts	0x2AC1, r24	; 0x802ac1 <rtc_data>
    2c02:	90 93 c2 2a 	sts	0x2AC2, r25	; 0x802ac2 <rtc_data+0x1>
    2c06:	08 95       	ret

00002c08 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2c0c:	64 e0       	ldi	r22, 0x04	; 4
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    2c14:	c0 ef       	ldi	r28, 0xF0	; 240
    2c16:	d0 e0       	ldi	r29, 0x00	; 0
    2c18:	88 81       	ld	r24, Y
    2c1a:	82 60       	ori	r24, 0x02	; 2
    2c1c:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    2c1e:	61 e0       	ldi	r22, 0x01	; 1
    2c20:	80 ef       	ldi	r24, 0xF0	; 240
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	0e 94 f4 50 	call	0xa1e8	; 0xa1e8 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    2c28:	88 81       	ld	r24, Y
    2c2a:	84 60       	ori	r24, 0x04	; 4
    2c2c:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    2c2e:	69 ee       	ldi	r22, 0xE9	; 233
    2c30:	73 e0       	ldi	r23, 0x03	; 3
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	c7 df       	rcall	.-114    	; 0x2bc6 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    2c38:	88 81       	ld	r24, Y
    2c3a:	88 61       	ori	r24, 0x18	; 24
    2c3c:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    2c3e:	e0 ef       	ldi	r30, 0xF0	; 240
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	81 81       	ldd	r24, Z+1	; 0x01
    2c44:	83 ff       	sbrs	r24, 3
    2c46:	fd cf       	rjmp	.-6      	; 0x2c42 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    2c48:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2c4c:	e0 e2       	ldi	r30, 0x20	; 32
    2c4e:	f4 e0       	ldi	r31, 0x04	; 4
    2c50:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    2c52:	80 fd       	sbrc	r24, 0
    2c54:	fd cf       	rjmp	.-6      	; 0x2c50 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    2c56:	e0 e2       	ldi	r30, 0x20	; 32
    2c58:	f4 e0       	ldi	r31, 0x04	; 4
    2c5a:	8f ef       	ldi	r24, 0xFF	; 255
    2c5c:	9f ef       	ldi	r25, 0xFF	; 255
    2c5e:	dc 01       	movw	r26, r24
    2c60:	80 87       	std	Z+8, r24	; 0x08
    2c62:	91 87       	std	Z+9, r25	; 0x09
    2c64:	a2 87       	std	Z+10, r26	; 0x0a
    2c66:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    2c68:	14 82       	std	Z+4, r1	; 0x04
    2c6a:	15 82       	std	Z+5, r1	; 0x05
    2c6c:	16 82       	std	Z+6, r1	; 0x06
    2c6e:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2c70:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    2c72:	80 fd       	sbrc	r24, 0
    2c74:	fd cf       	rjmp	.-6      	; 0x2c70 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    2c76:	e0 e2       	ldi	r30, 0x20	; 32
    2c78:	f4 e0       	ldi	r31, 0x04	; 4
    2c7a:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2c80:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    2c82:	80 fd       	sbrc	r24, 0
    2c84:	fd cf       	rjmp	.-6      	; 0x2c80 <rtc_init+0x78>
}
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	08 95       	ret

00002c8c <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    2c8c:	1f 92       	push	r1
    2c8e:	0f 92       	push	r0
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	0f 92       	push	r0
    2c94:	11 24       	eor	r1, r1
    2c96:	0b b6       	in	r0, 0x3b	; 59
    2c98:	0f 92       	push	r0
    2c9a:	2f 93       	push	r18
    2c9c:	3f 93       	push	r19
    2c9e:	4f 93       	push	r20
    2ca0:	5f 93       	push	r21
    2ca2:	6f 93       	push	r22
    2ca4:	7f 93       	push	r23
    2ca6:	8f 93       	push	r24
    2ca8:	9f 93       	push	r25
    2caa:	af 93       	push	r26
    2cac:	bf 93       	push	r27
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	ef 93       	push	r30
    2cb4:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    2cb6:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    2cba:	c0 91 c1 2a 	lds	r28, 0x2AC1	; 0x802ac1 <rtc_data>
    2cbe:	d0 91 c2 2a 	lds	r29, 0x2AC2	; 0x802ac2 <rtc_data+0x1>
    2cc2:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    2cc4:	19 f0       	breq	.+6      	; 0x2ccc <__vector_11+0x40>
    2cc6:	8a df       	rcall	.-236    	; 0x2bdc <rtc_get_time>
    2cc8:	fe 01       	movw	r30, r28
}
    2cca:	19 95       	eicall
    2ccc:	ff 91       	pop	r31
    2cce:	ef 91       	pop	r30
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	bf 91       	pop	r27
    2cd6:	af 91       	pop	r26
    2cd8:	9f 91       	pop	r25
    2cda:	8f 91       	pop	r24
    2cdc:	7f 91       	pop	r23
    2cde:	6f 91       	pop	r22
    2ce0:	5f 91       	pop	r21
    2ce2:	4f 91       	pop	r20
    2ce4:	3f 91       	pop	r19
    2ce6:	2f 91       	pop	r18
    2ce8:	0f 90       	pop	r0
    2cea:	0b be       	out	0x3b, r0	; 59
    2cec:	0f 90       	pop	r0
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	0f 90       	pop	r0
    2cf2:	1f 90       	pop	r1
    2cf4:	18 95       	reti

00002cf6 <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* SINE LUT */
	uint16_t left_x, rght_x, left_y, rght_y;
	rght_x = left_x = phase >> 4;
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	f2 95       	swap	r31
    2cfa:	e2 95       	swap	r30
    2cfc:	ef 70       	andi	r30, 0x0F	; 15
    2cfe:	ef 27       	eor	r30, r31
    2d00:	ff 70       	andi	r31, 0x0F	; 15
    2d02:	ef 27       	eor	r30, r31
	if (++rght_x >= PM_SINE_COUNT) {
    2d04:	9f 01       	movw	r18, r30
    2d06:	2f 5f       	subi	r18, 0xFF	; 255
    2d08:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0a:	21 15       	cp	r18, r1
    2d0c:	40 e1       	ldi	r20, 0x10	; 16
    2d0e:	34 07       	cpc	r19, r20
    2d10:	08 f0       	brcs	.+2      	; 0x2d14 <get_interpolated_sine+0x1e>
		rght_x -= PM_SINE_COUNT;
    2d12:	30 51       	subi	r19, 0x10	; 16
	}
	left_y = PGM_READ_WORD(&(PM_SINE[left_x]));
    2d14:	ee 0f       	add	r30, r30
    2d16:	ff 1f       	adc	r31, r31
    2d18:	e8 56       	subi	r30, 0x68	; 104
    2d1a:	f7 4f       	sbci	r31, 0xF7	; 247
    2d1c:	45 91       	lpm	r20, Z+
    2d1e:	54 91       	lpm	r21, Z
	rght_y = PGM_READ_WORD(&(PM_SINE[rght_x]));
    2d20:	f9 01       	movw	r30, r18
    2d22:	ee 0f       	add	r30, r30
    2d24:	ff 1f       	adc	r31, r31
    2d26:	e8 56       	subi	r30, 0x68	; 104
    2d28:	f7 4f       	sbci	r31, 0xF7	; 247
    2d2a:	25 91       	lpm	r18, Z+
    2d2c:	34 91       	lpm	r19, Z

	/* INTERPOLATION LUT */
	uint16_t idx_y	= (uint16_t)((uint32_t)PM_SINE_MAX_STEP + rght_y - left_y);		// PM_SINE_MAX_STEP = +/-50
	uint16_t idx	= (idx_y << 4) | (phase & 0x0f);
	return left_y + (int8_t)PGM_READ_BYTE(&(PM_SINE_IP[idx]));
    2d2e:	f9 01       	movw	r30, r18
    2d30:	f4 96       	adiw	r30, 0x34	; 52
    2d32:	e4 1b       	sub	r30, r20
    2d34:	f5 0b       	sbc	r31, r21
    2d36:	e2 95       	swap	r30
    2d38:	f2 95       	swap	r31
    2d3a:	f0 7f       	andi	r31, 0xF0	; 240
    2d3c:	fe 27       	eor	r31, r30
    2d3e:	e0 7f       	andi	r30, 0xF0	; 240
    2d40:	fe 27       	eor	r31, r30
    2d42:	8f 70       	andi	r24, 0x0F	; 15
    2d44:	99 27       	eor	r25, r25
    2d46:	e8 2b       	or	r30, r24
    2d48:	f9 2b       	or	r31, r25
    2d4a:	e8 5e       	subi	r30, 0xE8	; 232
    2d4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d4e:	e4 91       	lpm	r30, Z
}
    2d50:	ca 01       	movw	r24, r20
    2d52:	8e 0f       	add	r24, r30
    2d54:	91 1d       	adc	r25, r1
    2d56:	e7 fd       	sbrc	r30, 7
    2d58:	9a 95       	dec	r25
    2d5a:	08 95       	ret

00002d5c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2d5c:	04 c0       	rjmp	.+8      	; 0x2d66 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2d5e:	61 50       	subi	r22, 0x01	; 1
    2d60:	71 09       	sbc	r23, r1
    2d62:	81 09       	sbc	r24, r1
    2d64:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2d66:	61 15       	cp	r22, r1
    2d68:	71 05       	cpc	r23, r1
    2d6a:	81 05       	cpc	r24, r1
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	b9 f7       	brne	.-18     	; 0x2d5e <__portable_avr_delay_cycles+0x2>
    2d70:	08 95       	ret

00002d72 <twi2_waitUntilReady>:
		return (((int32_t)raw * 1000 * ((int32_t)asa + 128)) - 128) >> 8;
	}
}

static void twi2_waitUntilReady(void)
{
    2d72:	cf 92       	push	r12
    2d74:	df 92       	push	r13
    2d76:	ef 92       	push	r14
    2d78:	ff 92       	push	r15
    2d7a:	0f 93       	push	r16
    2d7c:	1f 93       	push	r17
    2d7e:	cf 93       	push	r28
	status_code_t status;
	uint8_t isBusy;
	uint8_t isValid;

	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_STATE;
    2d80:	eb e0       	ldi	r30, 0x0B	; 11
    2d82:	f0 e2       	ldi	r31, 0x20	; 32
    2d84:	83 e0       	ldi	r24, 0x03	; 3
    2d86:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	84 83       	std	Z+4, r24	; 0x04
    2d8e:	95 83       	std	Z+5, r25	; 0x05

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2d90:	8f 01       	movw	r16, r30
    2d92:	cc 24       	eor	r12, r12
    2d94:	c3 94       	inc	r12
    2d96:	d1 2c       	mov	r13, r1
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    2d98:	0f 2e       	mov	r0, r31
    2d9a:	fb e8       	ldi	r31, 0x8B	; 139
    2d9c:	ef 2e       	mov	r14, r31
    2d9e:	f8 e2       	ldi	r31, 0x28	; 40
    2da0:	ff 2e       	mov	r15, r31
    2da2:	f0 2d       	mov	r31, r0
	twi2_packet.addr_length = 1;

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2da4:	f8 01       	movw	r30, r16
    2da6:	c0 86       	std	Z+8, r12	; 0x08
    2da8:	d1 86       	std	Z+9, r13	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2daa:	41 e0       	ldi	r20, 0x01	; 1
    2dac:	b8 01       	movw	r22, r16
    2dae:	80 e8       	ldi	r24, 0x80	; 128
    2db0:	94 e0       	ldi	r25, 0x04	; 4
    2db2:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    2db6:	f7 01       	movw	r30, r14
    2db8:	c0 81       	ld	r28, Z
    2dba:	9c 2f       	mov	r25, r28
    2dbc:	90 78       	andi	r25, 0x80	; 128
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	0d c0       	rjmp	.+26     	; 0x2ddc <twi2_waitUntilReady+0x6a>
    2dc2:	91 f0       	breq	.+36     	; 0x2de8 <twi2_waitUntilReady+0x76>
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
		} else {
			if (isBusy && isValid) {
    2dc4:	8c 2f       	mov	r24, r28
    2dc6:	81 78       	andi	r24, 0x81	; 129
    2dc8:	81 38       	cpi	r24, 0x81	; 129
    2dca:	29 f4       	brne	.+10     	; 0x2dd6 <twi2_waitUntilReady+0x64>
				delay_us(TWI_SMART_LCD_DEVICE_BUSY_DELAY_MIN_US);
    2dcc:	65 ef       	ldi	r22, 0xF5	; 245
    2dce:	71 e0       	ldi	r23, 0x01	; 1
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	c3 df       	rcall	.-122    	; 0x2d5c <__portable_avr_delay_cycles>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
    2dd6:	c0 fd       	sbrc	r28, 0
    2dd8:	e5 cf       	rjmp	.-54     	; 0x2da4 <twi2_waitUntilReady+0x32>
    2dda:	0c c0       	rjmp	.+24     	; 0x2df4 <twi2_waitUntilReady+0x82>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2ddc:	65 e0       	ldi	r22, 0x05	; 5
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	bb df       	rcall	.-138    	; 0x2d5c <__portable_avr_delay_cycles>
    2de6:	de cf       	rjmp	.-68     	; 0x2da4 <twi2_waitUntilReady+0x32>
    2de8:	65 e0       	ldi	r22, 0x05	; 5
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	b5 df       	rcall	.-150    	; 0x2d5c <__portable_avr_delay_cycles>
    2df2:	d8 cf       	rjmp	.-80     	; 0x2da4 <twi2_waitUntilReady+0x32>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
	//printf("DBG909\r\n");
}
    2df4:	cf 91       	pop	r28
    2df6:	1f 91       	pop	r17
    2df8:	0f 91       	pop	r16
    2dfa:	ff 90       	pop	r15
    2dfc:	ef 90       	pop	r14
    2dfe:	df 90       	pop	r13
    2e00:	cf 90       	pop	r12
    2e02:	08 95       	ret

00002e04 <isr_twi1_baro>:
		}
	} while (false);
}

static void isr_twi1_baro(uint32_t now, bool sync)
{
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	1f 92       	push	r1
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
	static uint8_t  s_step = 100;
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	/* Restart a new cycle if ready */
	if (sync && (s_step >= 100)) {
    2e0e:	44 23       	and	r20, r20
    2e10:	41 f0       	breq	.+16     	; 0x2e22 <isr_twi1_baro+0x1e>
    2e12:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_step.7387>
    2e16:	84 36       	cpi	r24, 0x64	; 100
    2e18:	08 f4       	brcc	.+2      	; 0x2e1c <isr_twi1_baro+0x18>
    2e1a:	bb c0       	rjmp	.+374    	; 0x2f92 <isr_twi1_baro+0x18e>
		s_step = 0;
    2e1c:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <s_step.7387>
    2e20:	09 c0       	rjmp	.+18     	; 0x2e34 <isr_twi1_baro+0x30>
	}

	switch (s_step) {
    2e22:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_step.7387>
    2e26:	85 31       	cpi	r24, 0x15	; 21
    2e28:	09 f1       	breq	.+66     	; 0x2e6c <isr_twi1_baro+0x68>
    2e2a:	8b 32       	cpi	r24, 0x2B	; 43
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <isr_twi1_baro+0x2c>
    2e2e:	59 c0       	rjmp	.+178    	; 0x2ee2 <isr_twi1_baro+0xde>
    2e30:	81 11       	cpse	r24, r1
    2e32:	a9 c0       	rjmp	.+338    	; 0x2f86 <isr_twi1_baro+0x182>
		case 0:
			/* Request D1 */
			twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    2e34:	ef e1       	ldi	r30, 0x1F	; 31
    2e36:	f0 e2       	ldi	r31, 0x20	; 32
    2e38:	86 e7       	ldi	r24, 0x76	; 118
    2e3a:	80 83       	st	Z, r24
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D1_4096;
    2e3c:	88 e4       	ldi	r24, 0x48	; 72
    2e3e:	81 83       	std	Z+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	84 83       	std	Z+4, r24	; 0x04
    2e46:	95 83       	std	Z+5, r25	; 0x05
			twi1_packet.length = 0;
    2e48:	10 86       	std	Z+8, r1	; 0x08
    2e4a:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	bf 01       	movw	r22, r30
    2e50:	80 ea       	ldi	r24, 0xA0	; 160
    2e52:	94 e0       	ldi	r25, 0x04	; 4
    2e54:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
			status_code_t sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2e58:	81 11       	cpse	r24, r1
    2e5a:	04 c0       	rjmp	.+8      	; 0x2e64 <isr_twi1_baro+0x60>
				s_step = 1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7387>
				return;
    2e62:	a0 c0       	rjmp	.+320    	; 0x2fa4 <isr_twi1_baro+0x1a0>
			}

			s_step = 200;										// Failed, stay until new sync triggers
    2e64:	88 ec       	ldi	r24, 0xC8	; 200
    2e66:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7387>
			return;
    2e6a:	9c c0       	rjmp	.+312    	; 0x2fa4 <isr_twi1_baro+0x1a0>
		break;

		case 21:
			/* Get data */
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    2e6c:	ef e1       	ldi	r30, 0x1F	; 31
    2e6e:	f0 e2       	ldi	r31, 0x20	; 32
    2e70:	11 82       	std	Z+1, r1	; 0x01
			twi1_packet.length = 3;
    2e72:	83 e0       	ldi	r24, 0x03	; 3
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	80 87       	std	Z+8, r24	; 0x08
    2e78:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2e7a:	41 e0       	ldi	r20, 0x01	; 1
    2e7c:	bf 01       	movw	r22, r30
    2e7e:	80 ea       	ldi	r24, 0xA0	; 160
    2e80:	94 e0       	ldi	r25, 0x04	; 4
    2e82:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2e86:	81 11       	cpse	r24, r1
    2e88:	28 c0       	rjmp	.+80     	; 0x2eda <isr_twi1_baro+0xd6>
				s_twi1_baro_d1 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    2e8a:	e3 e9       	ldi	r30, 0x93	; 147
    2e8c:	f8 e2       	ldi	r31, 0x28	; 40
    2e8e:	20 81       	ld	r18, Z
    2e90:	81 81       	ldd	r24, Z+1	; 0x01
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	a0 e0       	ldi	r26, 0x00	; 0
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	ba 2f       	mov	r27, r26
    2e9a:	a9 2f       	mov	r26, r25
    2e9c:	98 2f       	mov	r25, r24
    2e9e:	88 27       	eor	r24, r24
    2ea0:	a2 2b       	or	r26, r18
    2ea2:	22 81       	ldd	r18, Z+2	; 0x02
    2ea4:	82 2b       	or	r24, r18
    2ea6:	80 93 88 26 	sts	0x2688, r24	; 0x802688 <s_twi1_baro_d1.7388>
    2eaa:	90 93 89 26 	sts	0x2689, r25	; 0x802689 <s_twi1_baro_d1.7388+0x1>
    2eae:	a0 93 8a 26 	sts	0x268A, r26	; 0x80268a <s_twi1_baro_d1.7388+0x2>
    2eb2:	b0 93 8b 26 	sts	0x268B, r27	; 0x80268b <s_twi1_baro_d1.7388+0x3>

				/* Request D2 */
				twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D2_4096;
    2eb6:	ef e1       	ldi	r30, 0x1F	; 31
    2eb8:	f0 e2       	ldi	r31, 0x20	; 32
    2eba:	88 e5       	ldi	r24, 0x58	; 88
    2ebc:	81 83       	std	Z+1, r24	; 0x01
				twi1_packet.length = 0;
    2ebe:	10 86       	std	Z+8, r1	; 0x08
    2ec0:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2ec2:	40 e0       	ldi	r20, 0x00	; 0
    2ec4:	bf 01       	movw	r22, r30
    2ec6:	80 ea       	ldi	r24, 0xA0	; 160
    2ec8:	94 e0       	ldi	r25, 0x04	; 4
    2eca:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
				sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
				if (sc == STATUS_OK) {
    2ece:	81 11       	cpse	r24, r1
    2ed0:	04 c0       	rjmp	.+8      	; 0x2eda <isr_twi1_baro+0xd6>
					s_step = 22;
    2ed2:	86 e1       	ldi	r24, 0x16	; 22
    2ed4:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7387>
					return;
    2ed8:	65 c0       	rjmp	.+202    	; 0x2fa4 <isr_twi1_baro+0x1a0>
				}
			}

			s_step = 211;										// Failed, stay until new sync triggers
    2eda:	83 ed       	ldi	r24, 0xD3	; 211
    2edc:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7387>
			return;
    2ee0:	61 c0       	rjmp	.+194    	; 0x2fa4 <isr_twi1_baro+0x1a0>
		break;

		case 43:
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    2ee2:	ef e1       	ldi	r30, 0x1F	; 31
    2ee4:	f0 e2       	ldi	r31, 0x20	; 32
    2ee6:	11 82       	std	Z+1, r1	; 0x01
			twi1_packet.length = 3;
    2ee8:	83 e0       	ldi	r24, 0x03	; 3
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	80 87       	std	Z+8, r24	; 0x08
    2eee:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2ef0:	41 e0       	ldi	r20, 0x01	; 1
    2ef2:	bf 01       	movw	r22, r30
    2ef4:	80 ea       	ldi	r24, 0xA0	; 160
    2ef6:	94 e0       	ldi	r25, 0x04	; 4
    2ef8:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2efc:	81 11       	cpse	r24, r1
    2efe:	3f c0       	rjmp	.+126    	; 0x2f7e <isr_twi1_baro+0x17a>
				s_twi1_baro_d2 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    2f00:	e3 e9       	ldi	r30, 0x93	; 147
    2f02:	f8 e2       	ldi	r31, 0x28	; 40
    2f04:	20 81       	ld	r18, Z
    2f06:	81 81       	ldd	r24, Z+1	; 0x01
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	a0 e0       	ldi	r26, 0x00	; 0
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	ba 2f       	mov	r27, r26
    2f10:	a9 2f       	mov	r26, r25
    2f12:	98 2f       	mov	r25, r24
    2f14:	88 27       	eor	r24, r24
    2f16:	a2 2b       	or	r26, r18
    2f18:	22 81       	ldd	r18, Z+2	; 0x02
    2f1a:	82 2b       	or	r24, r18
    2f1c:	80 93 84 26 	sts	0x2684, r24	; 0x802684 <s_twi1_baro_d2.7389>
    2f20:	90 93 85 26 	sts	0x2685, r25	; 0x802685 <s_twi1_baro_d2.7389+0x1>
    2f24:	a0 93 86 26 	sts	0x2686, r26	; 0x802686 <s_twi1_baro_d2.7389+0x2>
    2f28:	b0 93 87 26 	sts	0x2687, r27	; 0x802687 <s_twi1_baro_d2.7389+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f2c:	8f b7       	in	r24, 0x3f	; 63
    2f2e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2f30:	f8 94       	cli
	return flags;
    2f32:	89 81       	ldd	r24, Y+1	; 0x01

				irqflags_t flags = cpu_irq_save();
				g_twi1_baro_d1 = s_twi1_baro_d1;
    2f34:	40 91 88 26 	lds	r20, 0x2688	; 0x802688 <s_twi1_baro_d1.7388>
    2f38:	50 91 89 26 	lds	r21, 0x2689	; 0x802689 <s_twi1_baro_d1.7388+0x1>
    2f3c:	60 91 8a 26 	lds	r22, 0x268A	; 0x80268a <s_twi1_baro_d1.7388+0x2>
    2f40:	70 91 8b 26 	lds	r23, 0x268B	; 0x80268b <s_twi1_baro_d1.7388+0x3>
    2f44:	40 93 28 29 	sts	0x2928, r20	; 0x802928 <g_twi1_baro_d1>
    2f48:	50 93 29 29 	sts	0x2929, r21	; 0x802929 <g_twi1_baro_d1+0x1>
    2f4c:	60 93 2a 29 	sts	0x292A, r22	; 0x80292a <g_twi1_baro_d1+0x2>
    2f50:	70 93 2b 29 	sts	0x292B, r23	; 0x80292b <g_twi1_baro_d1+0x3>
				g_twi1_baro_d2 = s_twi1_baro_d2;
    2f54:	40 91 84 26 	lds	r20, 0x2684	; 0x802684 <s_twi1_baro_d2.7389>
    2f58:	50 91 85 26 	lds	r21, 0x2685	; 0x802685 <s_twi1_baro_d2.7389+0x1>
    2f5c:	60 91 86 26 	lds	r22, 0x2686	; 0x802686 <s_twi1_baro_d2.7389+0x2>
    2f60:	70 91 87 26 	lds	r23, 0x2687	; 0x802687 <s_twi1_baro_d2.7389+0x3>
    2f64:	40 93 24 29 	sts	0x2924, r20	; 0x802924 <g_twi1_baro_d2>
    2f68:	50 93 25 29 	sts	0x2925, r21	; 0x802925 <g_twi1_baro_d2+0x1>
    2f6c:	60 93 26 29 	sts	0x2926, r22	; 0x802926 <g_twi1_baro_d2+0x2>
    2f70:	70 93 27 29 	sts	0x2927, r23	; 0x802927 <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f74:	8f bf       	out	0x3f, r24	; 63
				cpu_irq_restore(flags);

				s_step = 123;									// Success, stay until new sync triggers
    2f76:	8b e7       	ldi	r24, 0x7B	; 123
    2f78:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7387>
				return;
    2f7c:	13 c0       	rjmp	.+38     	; 0x2fa4 <isr_twi1_baro+0x1a0>
			}

			s_step = 223;										// Failed, stay until new sync triggers
    2f7e:	8f ed       	ldi	r24, 0xDF	; 223
    2f80:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7387>
			return;
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <isr_twi1_baro+0x1a0>
		break;

		default:
			/* Delay step of 0.5 ms */
			if (s_step < 100) {
    2f86:	84 36       	cpi	r24, 0x64	; 100
    2f88:	68 f4       	brcc	.+26     	; 0x2fa4 <isr_twi1_baro+0x1a0>
				s_step++;
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7387>
    2f90:	09 c0       	rjmp	.+18     	; 0x2fa4 <isr_twi1_baro+0x1a0>
	/* Restart a new cycle if ready */
	if (sync && (s_step >= 100)) {
		s_step = 0;
	}

	switch (s_step) {
    2f92:	85 31       	cpi	r24, 0x15	; 21
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <isr_twi1_baro+0x194>
    2f96:	6a cf       	rjmp	.-300    	; 0x2e6c <isr_twi1_baro+0x68>
    2f98:	8b 32       	cpi	r24, 0x2B	; 43
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <isr_twi1_baro+0x19a>
    2f9c:	a2 cf       	rjmp	.-188    	; 0x2ee2 <isr_twi1_baro+0xde>
    2f9e:	81 11       	cpse	r24, r1
    2fa0:	f4 cf       	rjmp	.-24     	; 0x2f8a <isr_twi1_baro+0x186>
    2fa2:	48 cf       	rjmp	.-368    	; 0x2e34 <isr_twi1_baro+0x30>
			/* Delay step of 0.5 ms */
			if (s_step < 100) {
				s_step++;
			}
	}
}
    2fa4:	0f 90       	pop	r0
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	08 95       	ret

00002fac <task_twi2_lcd_pos_xy>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_pos_xy(uint8_t x, uint8_t y)
{
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
    2fb0:	d8 2f       	mov	r29, r24
	twi2_waitUntilReady();
    2fb2:	c6 2f       	mov	r28, r22
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2fb4:	de de       	rcall	.-580    	; 0x2d72 <twi2_waitUntilReady>
    2fb6:	eb e0       	ldi	r30, 0x0B	; 11
    2fb8:	f0 e2       	ldi	r31, 0x20	; 32
    2fba:	80 e2       	ldi	r24, 0x20	; 32
	twi2_m_data[0] = x;
    2fbc:	81 83       	std	Z+1, r24	; 0x01
    2fbe:	ab e8       	ldi	r26, 0x8B	; 139
    2fc0:	b8 e2       	ldi	r27, 0x28	; 40
	twi2_m_data[1] = y;
    2fc2:	dc 93       	st	X, r29
    2fc4:	11 96       	adiw	r26, 0x01	; 1
	twi2_packet.length = 2;
    2fc6:	cc 93       	st	X, r28
    2fc8:	82 e0       	ldi	r24, 0x02	; 2
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	80 87       	std	Z+8, r24	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2fce:	91 87       	std	Z+9, r25	; 0x09
    2fd0:	40 e0       	ldi	r20, 0x00	; 0
    2fd2:	bf 01       	movw	r22, r30
    2fd4:	80 e8       	ldi	r24, 0x80	; 128
    2fd6:	94 e0       	ldi	r25, 0x04	; 4
    2fd8:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2fdc:	65 e0       	ldi	r22, 0x05	; 5
    2fde:	70 e0       	ldi	r23, 0x00	; 0
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
}
    2fe4:	bb de       	rcall	.-650    	; 0x2d5c <__portable_avr_delay_cycles>
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	08 95       	ret

00002fec <task_twi2_lcd_str>:

static void task_twi2_lcd_str(uint8_t x, uint8_t y, const char* str)
{
    2fec:	9f 92       	push	r9
    2fee:	af 92       	push	r10
    2ff0:	bf 92       	push	r11
    2ff2:	cf 92       	push	r12
    2ff4:	df 92       	push	r13
    2ff6:	ef 92       	push	r14
    2ff8:	ff 92       	push	r15
    2ffa:	0f 93       	push	r16
    2ffc:	1f 93       	push	r17
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	b8 2e       	mov	r11, r24
    3004:	a6 2e       	mov	r10, r22
    3006:	ea 01       	movw	r28, r20
	uint8_t slen = strlen(str);
    3008:	fa 01       	movw	r30, r20
    300a:	01 90       	ld	r0, Z+
    300c:	00 20       	and	r0, r0
    300e:	e9 f7       	brne	.-6      	; 0x300a <task_twi2_lcd_str+0x1e>
    3010:	31 97       	sbiw	r30, 0x01	; 1
    3012:	ce 2e       	mov	r12, r30
    3014:	c4 1a       	sub	r12, r20
	if (!slen) {
    3016:	09 f4       	brne	.+2      	; 0x301a <task_twi2_lcd_str+0x2e>
    3018:	43 c0       	rjmp	.+134    	; 0x30a0 <task_twi2_lcd_str+0xb4>
		/* Chunk of the string */
		{
			task_twi2_lcd_pos_xy(x, y);

			twi2_waitUntilReady();
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    301a:	0b e0       	ldi	r16, 0x0B	; 11
    301c:	10 e2       	ldi	r17, 0x20	; 32
    301e:	0f 2e       	mov	r0, r31
    3020:	f0 e3       	ldi	r31, 0x30	; 48
    3022:	9f 2e       	mov	r9, r31
    3024:	f0 2d       	mov	r31, r0
			twi2_m_data[0] = this_len;
    3026:	0f 2e       	mov	r0, r31
    3028:	fb e8       	ldi	r31, 0x8B	; 139
    302a:	ef 2e       	mov	r14, r31
    302c:	f8 e2       	ldi	r31, 0x28	; 40
    302e:	ff 2e       	mov	r15, r31
    3030:	f0 2d       	mov	r31, r0
    3032:	dc 2c       	mov	r13, r12
    3034:	e6 e0       	ldi	r30, 0x06	; 6
    3036:	ec 15       	cp	r30, r12
    3038:	20 f4       	brcc	.+8      	; 0x3042 <task_twi2_lcd_str+0x56>
    303a:	0f 2e       	mov	r0, r31
    303c:	f6 e0       	ldi	r31, 0x06	; 6
    303e:	df 2e       	mov	r13, r31
    3040:	f0 2d       	mov	r31, r0
			this_len = TWI2_STR_MAXLEN;
		}

		/* Chunk of the string */
		{
			task_twi2_lcd_pos_xy(x, y);
    3042:	6a 2d       	mov	r22, r10
    3044:	8b 2d       	mov	r24, r11

			twi2_waitUntilReady();
    3046:	b2 df       	rcall	.-156    	; 0x2fac <task_twi2_lcd_pos_xy>
    3048:	94 de       	rcall	.-728    	; 0x2d72 <twi2_waitUntilReady>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    304a:	f8 01       	movw	r30, r16
    304c:	91 82       	std	Z+1, r9	; 0x01
			twi2_m_data[0] = this_len;
    304e:	f7 01       	movw	r30, r14
    3050:	d0 82       	st	Z, r13
			for (uint8_t idx = 1; idx <= this_len; ++idx) {
    3052:	dd 20       	and	r13, r13
    3054:	69 f0       	breq	.+26     	; 0x3070 <task_twi2_lcd_str+0x84>
    3056:	81 e0       	ldi	r24, 0x01	; 1
				twi2_m_data[idx] = *(str++);
    3058:	21 96       	adiw	r28, 0x01	; 1
    305a:	e8 2f       	mov	r30, r24
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	e5 57       	subi	r30, 0x75	; 117
    3060:	f7 4d       	sbci	r31, 0xD7	; 215
    3062:	de 01       	movw	r26, r28
    3064:	11 97       	sbiw	r26, 0x01	; 1
    3066:	9c 91       	ld	r25, X
    3068:	90 83       	st	Z, r25
			task_twi2_lcd_pos_xy(x, y);

			twi2_waitUntilReady();
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
			twi2_m_data[0] = this_len;
			for (uint8_t idx = 1; idx <= this_len; ++idx) {
    306a:	8f 5f       	subi	r24, 0xFF	; 255
    306c:	d8 16       	cp	r13, r24
    306e:	a0 f7       	brcc	.-24     	; 0x3058 <task_twi2_lcd_str+0x6c>
				twi2_m_data[idx] = *(str++);
			}
			twi2_packet.length = this_len + 1;
    3070:	8d 2d       	mov	r24, r13
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	f8 01       	movw	r30, r16
    3078:	80 87       	std	Z+8, r24	; 0x08
    307a:	91 87       	std	Z+9, r25	; 0x09
    307c:	40 e0       	ldi	r20, 0x00	; 0
    307e:	b8 01       	movw	r22, r16
    3080:	80 e8       	ldi	r24, 0x80	; 128
    3082:	94 e0       	ldi	r25, 0x04	; 4
    3084:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3088:	65 e0       	ldi	r22, 0x05	; 5
    308a:	70 e0       	ldi	r23, 0x00	; 0
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	65 de       	rcall	.-822    	; 0x2d5c <__portable_avr_delay_cycles>
		}

		x    += this_len * 6;
    3092:	8d 2d       	mov	r24, r13
    3094:	88 0f       	add	r24, r24
    3096:	8d 0d       	add	r24, r13
    3098:	88 0f       	add	r24, r24
    309a:	b8 0e       	add	r11, r24
		slen -= this_len;
    309c:	cd 18       	sub	r12, r13
	uint8_t slen = strlen(str);
	if (!slen) {
		return;
	}

	while (slen) {
    309e:	49 f6       	brne	.-110    	; 0x3032 <task_twi2_lcd_str+0x46>
		}

		x    += this_len * 6;
		slen -= this_len;
	}
}
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	df 90       	pop	r13
    30ae:	cf 90       	pop	r12
    30b0:	bf 90       	pop	r11
    30b2:	af 90       	pop	r10
    30b4:	9f 90       	pop	r9
    30b6:	08 95       	ret

000030b8 <task_twi2_lcd_print_format_uint32>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_print_format_uint32(uint8_t x, uint8_t y, int32_t adc_i, int32_t adc_f, const char* fmt)
{
    30b8:	8f 92       	push	r8
    30ba:	9f 92       	push	r9
    30bc:	af 92       	push	r10
    30be:	bf 92       	push	r11
    30c0:	cf 92       	push	r12
    30c2:	df 92       	push	r13
    30c4:	ef 92       	push	r14
    30c6:	ff 92       	push	r15
    30c8:	0f 93       	push	r16
    30ca:	1f 93       	push	r17
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	b2 2e       	mov	r11, r18
    30d2:	a3 2e       	mov	r10, r19
    30d4:	94 2e       	mov	r9, r20
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    30d6:	85 2e       	mov	r8, r21
    30d8:	69 df       	rcall	.-302    	; 0x2fac <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    30da:	4b de       	rcall	.-874    	; 0x2d72 <twi2_waitUntilReady>
    30dc:	cb e0       	ldi	r28, 0x0B	; 11
    30de:	d0 e2       	ldi	r29, 0x20	; 32
    30e0:	80 e3       	ldi	r24, 0x30	; 48
	twi2_m_data[0] = sprintf((char*)&(twi2_m_data[1]), fmt, adc_i, adc_f);
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	1f 93       	push	r17
    30e6:	0f 93       	push	r16
    30e8:	ff 92       	push	r15
    30ea:	ef 92       	push	r14
    30ec:	8f 92       	push	r8
    30ee:	9f 92       	push	r9
    30f0:	af 92       	push	r10
    30f2:	bf 92       	push	r11
    30f4:	df 92       	push	r13
    30f6:	cf 92       	push	r12
    30f8:	8c e8       	ldi	r24, 0x8C	; 140
    30fa:	98 e2       	ldi	r25, 0x28	; 40
    30fc:	9f 93       	push	r25
    30fe:	8f 93       	push	r24
    3100:	0e 94 ba 54 	call	0xa974	; 0xa974 <sprintf>
    3104:	80 93 8b 28 	sts	0x288B, r24	; 0x80288b <twi2_m_data>
	twi2_packet.length = twi2_m_data[0] + 1;
    3108:	99 27       	eor	r25, r25
    310a:	01 96       	adiw	r24, 0x01	; 1
    310c:	88 87       	std	Y+8, r24	; 0x08
    310e:	99 87       	std	Y+9, r25	; 0x09
    3110:	40 e0       	ldi	r20, 0x00	; 0
    3112:	be 01       	movw	r22, r28
    3114:	80 e8       	ldi	r24, 0x80	; 128
    3116:	94 e0       	ldi	r25, 0x04	; 4
    3118:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    311c:	65 e0       	ldi	r22, 0x05	; 5
    311e:	70 e0       	ldi	r23, 0x00	; 0
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	90 e0       	ldi	r25, 0x00	; 0
}
    3124:	1b de       	rcall	.-970    	; 0x2d5c <__portable_avr_delay_cycles>
    3126:	8d b7       	in	r24, 0x3d	; 61
    3128:	9e b7       	in	r25, 0x3e	; 62
    312a:	0c 96       	adiw	r24, 0x0c	; 12
    312c:	8d bf       	out	0x3d, r24	; 61
    312e:	9e bf       	out	0x3e, r25	; 62
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	ff 90       	pop	r15
    313a:	ef 90       	pop	r14
    313c:	df 90       	pop	r13
    313e:	cf 90       	pop	r12
    3140:	bf 90       	pop	r11
    3142:	af 90       	pop	r10
    3144:	9f 90       	pop	r9
    3146:	8f 90       	pop	r8
    3148:	08 95       	ret

0000314a <task_twi2_lcd_print_format_uint16>:
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
	task_twi2_lcd_str(6 * 16, (line++) * 10, "%");
}

static void task_twi2_lcd_print_format_uint16(uint8_t x, uint8_t y, int16_t adc_i, int16_t adc_f, const char* fmt)
{
    314a:	cf 92       	push	r12
    314c:	df 92       	push	r13
    314e:	ef 92       	push	r14
    3150:	ff 92       	push	r15
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
    3156:	cf 93       	push	r28
    3158:	df 93       	push	r29
    315a:	f4 2e       	mov	r15, r20
    315c:	e5 2e       	mov	r14, r21
    315e:	d2 2e       	mov	r13, r18
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    3160:	c3 2e       	mov	r12, r19
    3162:	24 df       	rcall	.-440    	; 0x2fac <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    3164:	06 de       	rcall	.-1012   	; 0x2d72 <twi2_waitUntilReady>
    3166:	cb e0       	ldi	r28, 0x0B	; 11
    3168:	d0 e2       	ldi	r29, 0x20	; 32
    316a:	80 e3       	ldi	r24, 0x30	; 48
	twi2_m_data[0] = sprintf((char*)&(twi2_m_data[1]), fmt, adc_i, adc_f);
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	cf 92       	push	r12
    3170:	df 92       	push	r13
    3172:	ef 92       	push	r14
    3174:	ff 92       	push	r15
    3176:	1f 93       	push	r17
    3178:	0f 93       	push	r16
    317a:	8c e8       	ldi	r24, 0x8C	; 140
    317c:	98 e2       	ldi	r25, 0x28	; 40
    317e:	9f 93       	push	r25
    3180:	8f 93       	push	r24
    3182:	0e 94 ba 54 	call	0xa974	; 0xa974 <sprintf>
    3186:	80 93 8b 28 	sts	0x288B, r24	; 0x80288b <twi2_m_data>
	twi2_packet.length = twi2_m_data[0] + 1;
    318a:	99 27       	eor	r25, r25
    318c:	01 96       	adiw	r24, 0x01	; 1
    318e:	88 87       	std	Y+8, r24	; 0x08
    3190:	99 87       	std	Y+9, r25	; 0x09
    3192:	40 e0       	ldi	r20, 0x00	; 0
    3194:	be 01       	movw	r22, r28
    3196:	80 e8       	ldi	r24, 0x80	; 128
    3198:	94 e0       	ldi	r25, 0x04	; 4
    319a:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    319e:	65 e0       	ldi	r22, 0x05	; 5
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	90 e0       	ldi	r25, 0x00	; 0
}
    31a6:	da dd       	rcall	.-1100   	; 0x2d5c <__portable_avr_delay_cycles>
    31a8:	8d b7       	in	r24, 0x3d	; 61
    31aa:	9e b7       	in	r25, 0x3e	; 62
    31ac:	08 96       	adiw	r24, 0x08	; 8
    31ae:	8d bf       	out	0x3d, r24	; 61
    31b0:	9e bf       	out	0x3e, r25	; 62
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <twi_init>:
}


void twi_init(void) {
	#ifdef TWI1_MASTER
	TWI1_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA1
    31c4:	e0 e8       	ldi	r30, 0x80	; 128
    31c6:	f6 e0       	ldi	r31, 0x06	; 6
    31c8:	88 e3       	ldi	r24, 0x38	; 56
    31ca:	80 8b       	std	Z+16, r24	; 0x10
	TWI1_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL1
    31cc:	81 8b       	std	Z+17, r24	; 0x11
	#endif

	#ifdef TWI2_MASTER
	TWI2_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA2
    31ce:	e0 e4       	ldi	r30, 0x40	; 64
    31d0:	f6 e0       	ldi	r31, 0x06	; 6
    31d2:	80 8b       	std	Z+16, r24	; 0x10
	TWI2_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL2
    31d4:	81 8b       	std	Z+17, r24	; 0x11
    31d6:	08 95       	ret

000031d8 <twi_start>:
	#endif
}

void twi_start(void) {
    31d8:	7f 92       	push	r7
    31da:	8f 92       	push	r8
    31dc:	9f 92       	push	r9
    31de:	af 92       	push	r10
    31e0:	bf 92       	push	r11
    31e2:	cf 92       	push	r12
    31e4:	df 92       	push	r13
    31e6:	ef 92       	push	r14
    31e8:	ff 92       	push	r15
    31ea:	0f 93       	push	r16
    31ec:	1f 93       	push	r17
    31ee:	cf 93       	push	r28
    31f0:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    31f2:	60 e4       	ldi	r22, 0x40	; 64
    31f4:	85 e0       	ldi	r24, 0x05	; 5
    31f6:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
	#else
	#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
    31fa:	6a e2       	ldi	r22, 0x2A	; 42
    31fc:	70 e2       	ldi	r23, 0x20	; 32
    31fe:	80 ea       	ldi	r24, 0xA0	; 160
    3200:	94 e0       	ldi	r25, 0x04	; 4
    3202:	0e 94 8b 31 	call	0x6316	; 0x6316 <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    3206:	e0 ea       	ldi	r30, 0xA0	; 160
    3208:	f4 e0       	ldi	r31, 0x04	; 4
    320a:	81 81       	ldd	r24, Z+1	; 0x01
    320c:	88 60       	ori	r24, 0x08	; 8
    320e:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    3210:	60 e4       	ldi	r22, 0x40	; 64
    3212:	83 e0       	ldi	r24, 0x03	; 3
    3214:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
	#else
	#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
    3218:	66 e1       	ldi	r22, 0x16	; 22
    321a:	70 e2       	ldi	r23, 0x20	; 32
    321c:	80 e8       	ldi	r24, 0x80	; 128
    321e:	94 e0       	ldi	r25, 0x04	; 4
    3220:	0e 94 8b 31 	call	0x6316	; 0x6316 <twi_master_init>
    3224:	e0 e8       	ldi	r30, 0x80	; 128
    3226:	f4 e0       	ldi	r31, 0x04	; 4
    3228:	81 81       	ldd	r24, Z+1	; 0x01
    322a:	88 60       	ori	r24, 0x08	; 8
    322c:	81 83       	std	Z+1, r24	; 0x01

static void init_twi1_hygro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Hygro SHT31-DIS - I2C address: 0x%02X\r\n", TWI1_SLAVE_HYGRO_ADDR);
    322e:	1f 92       	push	r1
    3230:	c4 e4       	ldi	r28, 0x44	; 68
    3232:	cf 93       	push	r28
    3234:	8a e0       	ldi	r24, 0x0A	; 10
    3236:	91 e2       	ldi	r25, 0x21	; 33
    3238:	9f 93       	push	r25
    323a:	8f 93       	push	r24
    323c:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>
	g_twi1_hygro_status = 0;
    3240:	10 92 1a 29 	sts	0x291A, r1	; 0x80291a <g_twi1_hygro_status>

	do {
		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    3244:	ef e1       	ldi	r30, 0x1F	; 31
    3246:	f0 e2       	ldi	r31, 0x20	; 32
    3248:	c0 83       	st	Z, r28
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_BREAK_HI;
    324a:	80 e3       	ldi	r24, 0x30	; 48
    324c:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_BREAK_LO;
    324e:	83 e9       	ldi	r24, 0x93	; 147
    3250:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    3252:	82 e0       	ldi	r24, 0x02	; 2
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	84 83       	std	Z+4, r24	; 0x04
    3258:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    325a:	10 86       	std	Z+8, r1	; 0x08
    325c:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	bf 01       	movw	r22, r30
    3262:	80 ea       	ldi	r24, 0xA0	; 160
    3264:	94 e0       	ldi	r25, 0x04	; 4
    3266:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    326a:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	88 23       	and	r24, r24
    3276:	29 f0       	breq	.+10     	; 0x3282 <twi_start+0xaa>
			printf("TWI-onboard: Hygro SHT31-DIS -   address NACK / 'break' bad response\r\n");
    3278:	81 e4       	ldi	r24, 0x41	; 65
    327a:	91 e2       	ldi	r25, 0x21	; 33
    327c:	0e 94 8a 54 	call	0xa914	; 0xa914 <puts>
    3280:	67 c0       	rjmp	.+206    	; 0x3350 <twi_start+0x178>
			break;
		}
		delay_ms(2);
    3282:	60 e1       	ldi	r22, 0x10	; 16
    3284:	77 e2       	ldi	r23, 0x27	; 39
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	68 dd       	rcall	.-1328   	; 0x2d5c <__portable_avr_delay_cycles>

		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    328c:	ef e1       	ldi	r30, 0x1F	; 31
    328e:	f0 e2       	ldi	r31, 0x20	; 32
    3290:	84 e4       	ldi	r24, 0x44	; 68
    3292:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_RESET_HI;
    3294:	80 e3       	ldi	r24, 0x30	; 48
    3296:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_RESET_LO;
    3298:	82 ea       	ldi	r24, 0xA2	; 162
    329a:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    329c:	82 e0       	ldi	r24, 0x02	; 2
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	84 83       	std	Z+4, r24	; 0x04
    32a2:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    32a4:	10 86       	std	Z+8, r1	; 0x08
    32a6:	11 86       	std	Z+9, r1	; 0x09
    32a8:	40 e0       	ldi	r20, 0x00	; 0
    32aa:	bf 01       	movw	r22, r30
    32ac:	80 ea       	ldi	r24, 0xA0	; 160
    32ae:	94 e0       	ldi	r25, 0x04	; 4
    32b0:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    32b4:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    32b6:	81 11       	cpse	r24, r1
    32b8:	4b c0       	rjmp	.+150    	; 0x3350 <twi_start+0x178>
			break;
		}
		delay_ms(2);
    32ba:	60 e1       	ldi	r22, 0x10	; 16
    32bc:	77 e2       	ldi	r23, 0x27	; 39
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	4c dd       	rcall	.-1384   	; 0x2d5c <__portable_avr_delay_cycles>

		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    32c4:	ef e1       	ldi	r30, 0x1F	; 31
    32c6:	f0 e2       	ldi	r31, 0x20	; 32
    32c8:	84 e4       	ldi	r24, 0x44	; 68
    32ca:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_STATUS_HI;
    32cc:	83 ef       	ldi	r24, 0xF3	; 243
    32ce:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_STATUS_LO;
    32d0:	8d e2       	ldi	r24, 0x2D	; 45
    32d2:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	84 83       	std	Z+4, r24	; 0x04
    32da:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 2;
    32dc:	80 87       	std	Z+8, r24	; 0x08
    32de:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	bf 01       	movw	r22, r30
    32e4:	80 ea       	ldi	r24, 0xA0	; 160
    32e6:	94 e0       	ldi	r25, 0x04	; 4
    32e8:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    32ec:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    32ee:	81 11       	cpse	r24, r1
    32f0:	2f c0       	rjmp	.+94     	; 0x3350 <twi_start+0x178>
			break;
		}
		g_twi1_hygro_status = (twi1_m_data[0] << 8) | twi1_m_data[1];
    32f2:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <twi1_m_data+0x1>
    32f6:	80 93 1a 29 	sts	0x291A, r24	; 0x80291a <g_twi1_hygro_status>
		printf("TWI-onboard: Hygro SHT31-DIS -   status: 0x%02X\r\n", g_twi1_hygro_status);
    32fa:	1f 92       	push	r1
    32fc:	8f 93       	push	r24
    32fe:	87 e8       	ldi	r24, 0x87	; 135
    3300:	91 e2       	ldi	r25, 0x21	; 33
    3302:	9f 93       	push	r25
    3304:	8f 93       	push	r24
    3306:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>

		/* Start cyclic measurements with 2 MPS @ high repeatability */
		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    330a:	ef e1       	ldi	r30, 0x1F	; 31
    330c:	f0 e2       	ldi	r31, 0x20	; 32
    330e:	84 e4       	ldi	r24, 0x44	; 68
    3310:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_PERIODIC_2MPS_HIPREC_HI;
    3312:	82 e2       	ldi	r24, 0x22	; 34
    3314:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_PERIODIC_2MPS_HIPREC_LO;
    3316:	86 e3       	ldi	r24, 0x36	; 54
    3318:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    331a:	82 e0       	ldi	r24, 0x02	; 2
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	84 83       	std	Z+4, r24	; 0x04
    3320:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    3322:	10 86       	std	Z+8, r1	; 0x08
    3324:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	bf 01       	movw	r22, r30
    332a:	80 ea       	ldi	r24, 0xA0	; 160
    332c:	94 e0       	ldi	r25, 0x04	; 4
    332e:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    3332:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	81 11       	cpse	r24, r1
    333e:	08 c0       	rjmp	.+16     	; 0x3350 <twi_start+0x178>
			break;
		}

		g_twi1_hygro_valid = true;
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	80 93 1b 29 	sts	0x291B, r24	; 0x80291b <g_twi1_hygro_valid>
		printf("TWI-onboard:  INIT success.\r\n");
    3346:	89 eb       	ldi	r24, 0xB9	; 185
    3348:	91 e2       	ldi	r25, 0x21	; 33
    334a:	0e 94 8a 54 	call	0xa914	; 0xa914 <puts>
    334e:	10 c0       	rjmp	.+32     	; 0x3370 <twi_start+0x198>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    3350:	8c 2f       	mov	r24, r28
    3352:	0c 2e       	mov	r0, r28
    3354:	00 0c       	add	r0, r0
    3356:	99 0b       	sbc	r25, r25
    3358:	9f 93       	push	r25
    335a:	cf 93       	push	r28
    335c:	86 ed       	ldi	r24, 0xD6	; 214
    335e:	91 e2       	ldi	r25, 0x21	; 33
    3360:	9f 93       	push	r25
    3362:	8f 93       	push	r24
    3364:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0

static void init_twi1_gyro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Gyro MPU-9250 - I2C address: 0x%02X, 0x%02X\r\n", TWI1_SLAVE_GYRO_ADDR_1, TWI1_SLAVE_GYRO_ADDR_2);
    3370:	1f 92       	push	r1
    3372:	8c e0       	ldi	r24, 0x0C	; 12
    3374:	8f 93       	push	r24
    3376:	1f 92       	push	r1
    3378:	c8 e6       	ldi	r28, 0x68	; 104
    337a:	cf 93       	push	r28
    337c:	87 e0       	ldi	r24, 0x07	; 7
    337e:	92 e2       	ldi	r25, 0x22	; 34
    3380:	9f 93       	push	r25
    3382:	8f 93       	push	r24
    3384:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>
	g_twi1_gyro_1_version = 0;
    3388:	10 92 79 29 	sts	0x2979, r1	; 0x802979 <g_twi1_gyro_1_version>
	g_twi1_gyro_2_version = 0;
    338c:	10 92 54 29 	sts	0x2954, r1	; 0x802954 <g_twi1_gyro_2_version>

	do {
		/* MPU-9250 6 axis: RESET */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3390:	ef e1       	ldi	r30, 0x1F	; 31
    3392:	f0 e2       	ldi	r31, 0x20	; 32
    3394:	c0 83       	st	Z, r28
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_PWR_MGMT_1;
    3396:	8b e6       	ldi	r24, 0x6B	; 107
    3398:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	84 83       	std	Z+4, r24	; 0x04
    33a0:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_PWR_MGMT_1__HRESET | TWI1_SLAVE_GYRO_DTA_1_PWR_MGMT_1__CLKSEL_VAL;
    33a2:	21 e8       	ldi	r18, 0x81	; 129
    33a4:	20 93 93 28 	sts	0x2893, r18	; 0x802893 <twi1_m_data>
		twi1_packet.length = 1;
    33a8:	80 87       	std	Z+8, r24	; 0x08
    33aa:	91 87       	std	Z+9, r25	; 0x09
    33ac:	40 e0       	ldi	r20, 0x00	; 0
    33ae:	bf 01       	movw	r22, r30
    33b0:	80 ea       	ldi	r24, 0xA0	; 160
    33b2:	94 e0       	ldi	r25, 0x04	; 4
    33b4:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    33b8:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	88 23       	and	r24, r24
    33c8:	29 f0       	breq	.+10     	; 0x33d4 <twi_start+0x1fc>
			printf("TWI-onboard: Gyro MPU-9250   -   'reset 1' bad response\r\n");
    33ca:	84 e4       	ldi	r24, 0x44	; 68
    33cc:	92 e2       	ldi	r25, 0x22	; 34
    33ce:	0e 94 8a 54 	call	0xa914	; 0xa914 <puts>
    33d2:	04 c2       	rjmp	.+1032   	; 0x37dc <twi_start+0x604>
			break;
		}
		delay_ms(10);
    33d4:	61 e5       	ldi	r22, 0x51	; 81
    33d6:	73 ec       	ldi	r23, 0xC3	; 195
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	bf dc       	rcall	.-1666   	; 0x2d5c <__portable_avr_delay_cycles>

		/* MPU-9250 6 axis: read Who Am I control value */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    33de:	ef e1       	ldi	r30, 0x1F	; 31
    33e0:	f0 e2       	ldi	r31, 0x20	; 32
    33e2:	88 e6       	ldi	r24, 0x68	; 104
    33e4:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_WHOAMI;
    33e6:	85 e7       	ldi	r24, 0x75	; 117
    33e8:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	84 83       	std	Z+4, r24	; 0x04
    33f0:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    33f2:	80 87       	std	Z+8, r24	; 0x08
    33f4:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    33f6:	41 e0       	ldi	r20, 0x01	; 1
    33f8:	bf 01       	movw	r22, r30
    33fa:	80 ea       	ldi	r24, 0xA0	; 160
    33fc:	94 e0       	ldi	r25, 0x04	; 4
    33fe:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    3402:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3404:	81 11       	cpse	r24, r1
    3406:	ea c1       	rjmp	.+980    	; 0x37dc <twi_start+0x604>
			break;
		}
		g_twi1_gyro_1_version = twi1_m_data[0];
    3408:	a3 e9       	ldi	r26, 0x93	; 147
    340a:	b8 e2       	ldi	r27, 0x28	; 40
    340c:	8c 91       	ld	r24, X
    340e:	80 93 79 29 	sts	0x2979, r24	; 0x802979 <g_twi1_gyro_1_version>

		/* MPU-9250 6 axis: I2C bypass on to access the Magnetometer chip */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3412:	ef e1       	ldi	r30, 0x1F	; 31
    3414:	f0 e2       	ldi	r31, 0x20	; 32
    3416:	88 e6       	ldi	r24, 0x68	; 104
    3418:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_INT_PIN_CFG;
    341a:	87 e3       	ldi	r24, 0x37	; 55
    341c:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	84 83       	std	Z+4, r24	; 0x04
    3424:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_INT_PIN_CFG__BYPASS_EN;
    3426:	22 e0       	ldi	r18, 0x02	; 2
    3428:	2c 93       	st	X, r18
		twi1_packet.length = 1;
    342a:	80 87       	std	Z+8, r24	; 0x08
    342c:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    342e:	40 e0       	ldi	r20, 0x00	; 0
    3430:	bf 01       	movw	r22, r30
    3432:	80 ea       	ldi	r24, 0xA0	; 160
    3434:	94 e0       	ldi	r25, 0x04	; 4
    3436:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    343a:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    343c:	81 11       	cpse	r24, r1
    343e:	ce c1       	rjmp	.+924    	; 0x37dc <twi_start+0x604>
			break;
		}

		/* Magnetometer: soft reset */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3440:	ef e1       	ldi	r30, 0x1F	; 31
    3442:	f0 e2       	ldi	r31, 0x20	; 32
    3444:	8c e0       	ldi	r24, 0x0C	; 12
    3446:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_CNTL2;
    3448:	8b e0       	ldi	r24, 0x0B	; 11
    344a:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	84 83       	std	Z+4, r24	; 0x04
    3452:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_CNTL2__SRST;
    3454:	21 e0       	ldi	r18, 0x01	; 1
    3456:	20 93 93 28 	sts	0x2893, r18	; 0x802893 <twi1_m_data>
		twi1_packet.length = 1;
    345a:	80 87       	std	Z+8, r24	; 0x08
    345c:	91 87       	std	Z+9, r25	; 0x09
    345e:	40 e0       	ldi	r20, 0x00	; 0
    3460:	bf 01       	movw	r22, r30
    3462:	80 ea       	ldi	r24, 0xA0	; 160
    3464:	94 e0       	ldi	r25, 0x04	; 4
    3466:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    346a:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    346c:	81 11       	cpse	r24, r1
    346e:	b6 c1       	rjmp	.+876    	; 0x37dc <twi_start+0x604>
			break;
		}
		delay_ms(10);
    3470:	61 e5       	ldi	r22, 0x51	; 81
    3472:	73 ec       	ldi	r23, 0xC3	; 195
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	71 dc       	rcall	.-1822   	; 0x2d5c <__portable_avr_delay_cycles>

		/* Magnetometer: read Device ID */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    347a:	ef e1       	ldi	r30, 0x1F	; 31
    347c:	f0 e2       	ldi	r31, 0x20	; 32
    347e:	8c e0       	ldi	r24, 0x0C	; 12
    3480:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_WIA;
    3482:	11 82       	std	Z+1, r1	; 0x01
		twi1_packet.addr_length = 1;
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	84 83       	std	Z+4, r24	; 0x04
    348a:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    348c:	80 87       	std	Z+8, r24	; 0x08
    348e:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3490:	41 e0       	ldi	r20, 0x01	; 1
    3492:	bf 01       	movw	r22, r30
    3494:	80 ea       	ldi	r24, 0xA0	; 160
    3496:	94 e0       	ldi	r25, 0x04	; 4
    3498:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    349c:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    349e:	81 11       	cpse	r24, r1
    34a0:	9d c1       	rjmp	.+826    	; 0x37dc <twi_start+0x604>
			break;
		}
		g_twi1_gyro_2_version = twi1_m_data[0];
    34a2:	c3 e9       	ldi	r28, 0x93	; 147
    34a4:	d8 e2       	ldi	r29, 0x28	; 40
    34a6:	88 81       	ld	r24, Y
    34a8:	80 93 54 29 	sts	0x2954, r24	; 0x802954 <g_twi1_gyro_2_version>
		g_twi1_gyro_valid = true;
    34ac:	91 e0       	ldi	r25, 0x01	; 1
    34ae:	90 93 7a 29 	sts	0x297A, r25	; 0x80297a <g_twi1_gyro_valid>
		printf("TWI-onboard: Gyro MPU-9250 -     version: 0x%02X, 0x%02X\r\n", g_twi1_gyro_1_version, g_twi1_gyro_2_version);
    34b2:	1f 92       	push	r1
    34b4:	8f 93       	push	r24
    34b6:	80 91 79 29 	lds	r24, 0x2979	; 0x802979 <g_twi1_gyro_1_version>
    34ba:	1f 92       	push	r1
    34bc:	8f 93       	push	r24
    34be:	8d e7       	ldi	r24, 0x7D	; 125
    34c0:	92 e2       	ldi	r25, 0x22	; 34
    34c2:	9f 93       	push	r25
    34c4:	8f 93       	push	r24
    34c6:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>

		/* Magnetometer: 16 bit access and prepare for PROM access */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    34ca:	ef e1       	ldi	r30, 0x1F	; 31
    34cc:	f0 e2       	ldi	r31, 0x20	; 32
    34ce:	8c e0       	ldi	r24, 0x0C	; 12
    34d0:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_CNTL1;
    34d2:	8a e0       	ldi	r24, 0x0A	; 10
    34d4:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	84 83       	std	Z+4, r24	; 0x04
    34dc:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_CNTL1__MODE_PROM_VAL;
    34de:	2f e1       	ldi	r18, 0x1F	; 31
    34e0:	28 83       	st	Y, r18
		twi1_packet.length = 1;
    34e2:	80 87       	std	Z+8, r24	; 0x08
    34e4:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    34e6:	40 e0       	ldi	r20, 0x00	; 0
    34e8:	bf 01       	movw	r22, r30
    34ea:	80 ea       	ldi	r24, 0xA0	; 160
    34ec:	94 e0       	ldi	r25, 0x04	; 4
    34ee:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    34f2:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	81 11       	cpse	r24, r1
    3502:	6c c1       	rjmp	.+728    	; 0x37dc <twi_start+0x604>
			break;
		}

		/* Magnetometer: read correction data for X, Y and Z */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3504:	ef e1       	ldi	r30, 0x1F	; 31
    3506:	f0 e2       	ldi	r31, 0x20	; 32
    3508:	8c e0       	ldi	r24, 0x0C	; 12
    350a:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_ASAX;
    350c:	80 e1       	ldi	r24, 0x10	; 16
    350e:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	84 83       	std	Z+4, r24	; 0x04
    3516:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 3;
    3518:	83 e0       	ldi	r24, 0x03	; 3
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	80 87       	std	Z+8, r24	; 0x08
    351e:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3520:	41 e0       	ldi	r20, 0x01	; 1
    3522:	bf 01       	movw	r22, r30
    3524:	80 ea       	ldi	r24, 0xA0	; 160
    3526:	94 e0       	ldi	r25, 0x04	; 4
    3528:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    352c:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    352e:	81 11       	cpse	r24, r1
    3530:	55 c1       	rjmp	.+682    	; 0x37dc <twi_start+0x604>
			break;
		}
		g_twi1_gyro_2_asax = twi1_m_data[0];
    3532:	a3 e9       	ldi	r26, 0x93	; 147
    3534:	b8 e2       	ldi	r27, 0x28	; 40
    3536:	8c 91       	ld	r24, X
    3538:	80 93 53 29 	sts	0x2953, r24	; 0x802953 <g_twi1_gyro_2_asax>
		g_twi1_gyro_2_asay = twi1_m_data[1];
    353c:	11 96       	adiw	r26, 0x01	; 1
    353e:	8c 91       	ld	r24, X
    3540:	11 97       	sbiw	r26, 0x01	; 1
    3542:	80 93 52 29 	sts	0x2952, r24	; 0x802952 <g_twi1_gyro_2_asay>
		g_twi1_gyro_2_asaz = twi1_m_data[2];
    3546:	12 96       	adiw	r26, 0x02	; 2
    3548:	8c 91       	ld	r24, X
    354a:	12 97       	sbiw	r26, 0x02	; 2
    354c:	80 93 51 29 	sts	0x2951, r24	; 0x802951 <g_twi1_gyro_2_asaz>

		/* Magnetometer: mode change via power-down mode */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3550:	ef e1       	ldi	r30, 0x1F	; 31
    3552:	f0 e2       	ldi	r31, 0x20	; 32
    3554:	8c e0       	ldi	r24, 0x0C	; 12
    3556:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_CNTL1;
    3558:	8a e0       	ldi	r24, 0x0A	; 10
    355a:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	84 83       	std	Z+4, r24	; 0x04
    3562:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_CNTL1__MODE_16B_POWER_DOWN;
    3564:	20 e1       	ldi	r18, 0x10	; 16
    3566:	2c 93       	st	X, r18
		twi1_packet.length = 1;
    3568:	80 87       	std	Z+8, r24	; 0x08
    356a:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    356c:	40 e0       	ldi	r20, 0x00	; 0
    356e:	bf 01       	movw	r22, r30
    3570:	80 ea       	ldi	r24, 0xA0	; 160
    3572:	94 e0       	ldi	r25, 0x04	; 4
    3574:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    3578:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    357a:	81 11       	cpse	r24, r1
			break;
		}
		delay_ms(10);
    357c:	2f c1       	rjmp	.+606    	; 0x37dc <twi_start+0x604>
    357e:	61 e5       	ldi	r22, 0x51	; 81
    3580:	73 ec       	ldi	r23, 0xC3	; 195
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	90 e0       	ldi	r25, 0x00	; 0

		/* Magnetometer: mode change for 16bit and run all axis at 8 Hz */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3586:	ea db       	rcall	.-2092   	; 0x2d5c <__portable_avr_delay_cycles>
    3588:	ef e1       	ldi	r30, 0x1F	; 31
    358a:	f0 e2       	ldi	r31, 0x20	; 32
    358c:	8c e0       	ldi	r24, 0x0C	; 12
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_CNTL1;
    358e:	80 83       	st	Z, r24
    3590:	8a e0       	ldi	r24, 0x0A	; 10
		twi1_packet.addr_length = 1;
    3592:	81 83       	std	Z+1, r24	; 0x01
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_CNTL1__MODE_16B_RUN_8HZ_VAL;
    359a:	95 83       	std	Z+5, r25	; 0x05
    359c:	22 e1       	ldi	r18, 0x12	; 18
    359e:	20 93 93 28 	sts	0x2893, r18	; 0x802893 <twi1_m_data>
		twi1_packet.length = 1;
    35a2:	80 87       	std	Z+8, r24	; 0x08
    35a4:	91 87       	std	Z+9, r25	; 0x09
    35a6:	40 e0       	ldi	r20, 0x00	; 0
    35a8:	bf 01       	movw	r22, r30
    35aa:	80 ea       	ldi	r24, 0xA0	; 160
    35ac:	94 e0       	ldi	r25, 0x04	; 4
    35ae:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    35b2:	c8 2f       	mov	r28, r24
    35b4:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: set gyro offset values */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    35b6:	12 c1       	rjmp	.+548    	; 0x37dc <twi_start+0x604>
    35b8:	af e1       	ldi	r26, 0x1F	; 31
    35ba:	b0 e2       	ldi	r27, 0x20	; 32
    35bc:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_GYRO_XG_OFFSET_H;
    35be:	8c 93       	st	X, r24
    35c0:	83 e1       	ldi	r24, 0x13	; 19
    35c2:	11 96       	adiw	r26, 0x01	; 1
    35c4:	8c 93       	st	X, r24
		twi1_packet.addr_length = 1;
    35c6:	11 97       	sbiw	r26, 0x01	; 1
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	14 96       	adiw	r26, 0x04	; 4
    35ce:	8d 93       	st	X+, r24
    35d0:	9c 93       	st	X, r25
		twi1_m_data[0] = (uint8_t) (g_twi1_gyro_1_gyro_ofsx >> 8);
    35d2:	15 97       	sbiw	r26, 0x05	; 5
    35d4:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <g_twi1_gyro_1_gyro_ofsx>
    35d8:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <g_twi1_gyro_1_gyro_ofsx+0x1>
    35dc:	e3 e9       	ldi	r30, 0x93	; 147
    35de:	f8 e2       	ldi	r31, 0x28	; 40
		twi1_m_data[1] = (uint8_t) (g_twi1_gyro_1_gyro_ofsx & 0xFF);
    35e0:	90 83       	st	Z, r25
		twi1_m_data[2] = (uint8_t) (g_twi1_gyro_1_gyro_ofsy >> 8);
    35e2:	81 83       	std	Z+1, r24	; 0x01
    35e4:	80 91 3b 20 	lds	r24, 0x203B	; 0x80203b <g_twi1_gyro_1_gyro_ofsy>
    35e8:	90 91 3c 20 	lds	r25, 0x203C	; 0x80203c <g_twi1_gyro_1_gyro_ofsy+0x1>
		twi1_m_data[3] = (uint8_t) (g_twi1_gyro_1_gyro_ofsy & 0xFF);
    35ec:	92 83       	std	Z+2, r25	; 0x02
		twi1_m_data[4] = (uint8_t) (g_twi1_gyro_1_gyro_ofsz >> 8);
    35ee:	83 83       	std	Z+3, r24	; 0x03
    35f0:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <g_twi1_gyro_1_gyro_ofsz>
    35f4:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <g_twi1_gyro_1_gyro_ofsz+0x1>
		twi1_m_data[5] = (uint8_t) (g_twi1_gyro_1_gyro_ofsz & 0xFF);
    35f8:	94 83       	std	Z+4, r25	; 0x04
		twi1_packet.length = 6;
    35fa:	85 83       	std	Z+5, r24	; 0x05
    35fc:	86 e0       	ldi	r24, 0x06	; 6
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	18 96       	adiw	r26, 0x08	; 8
    3602:	8d 93       	st	X+, r24
    3604:	9c 93       	st	X, r25
    3606:	19 97       	sbiw	r26, 0x09	; 9
    3608:	40 e0       	ldi	r20, 0x00	; 0
    360a:	bd 01       	movw	r22, r26
    360c:	80 ea       	ldi	r24, 0xA0	; 160
    360e:	94 e0       	ldi	r25, 0x04	; 4
    3610:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3614:	c8 2f       	mov	r28, r24
    3616:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: set accel offset values */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3618:	e1 c0       	rjmp	.+450    	; 0x37dc <twi_start+0x604>
    361a:	ef e1       	ldi	r30, 0x1F	; 31
    361c:	f0 e2       	ldi	r31, 0x20	; 32
    361e:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_XA_OFFSET_H;
    3620:	80 83       	st	Z, r24
    3622:	87 e7       	ldi	r24, 0x77	; 119
		twi1_packet.addr_length = 1;
    3624:	81 83       	std	Z+1, r24	; 0x01
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = (uint8_t) ((g_twi1_gyro_1_accel_ofsx & 0x7F80) >> 7);
    362c:	95 83       	std	Z+5, r25	; 0x05
    362e:	80 91 43 20 	lds	r24, 0x2043	; 0x802043 <g_twi1_gyro_1_accel_ofsx>
    3632:	90 91 44 20 	lds	r25, 0x2044	; 0x802044 <g_twi1_gyro_1_accel_ofsx+0x1>
    3636:	a3 e9       	ldi	r26, 0x93	; 147
    3638:	b8 e2       	ldi	r27, 0x28	; 40
    363a:	9c 01       	movw	r18, r24
    363c:	22 0f       	add	r18, r18
    363e:	23 2f       	mov	r18, r19
    3640:	22 1f       	adc	r18, r18
    3642:	33 0b       	sbc	r19, r19
    3644:	31 95       	neg	r19
		twi1_m_data[1] = (uint8_t) ((g_twi1_gyro_1_accel_ofsx &   0x7F) << 1);
    3646:	2c 93       	st	X, r18
    3648:	88 0f       	add	r24, r24
    364a:	11 96       	adiw	r26, 0x01	; 1
		twi1_packet.length = 2;
    364c:	8c 93       	st	X, r24
    364e:	82 e0       	ldi	r24, 0x02	; 2
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	80 87       	std	Z+8, r24	; 0x08
    3654:	91 87       	std	Z+9, r25	; 0x09
    3656:	40 e0       	ldi	r20, 0x00	; 0
    3658:	bf 01       	movw	r22, r30
    365a:	80 ea       	ldi	r24, 0xA0	; 160
    365c:	94 e0       	ldi	r25, 0x04	; 4
    365e:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3662:	c8 2f       	mov	r28, r24
    3664:	81 11       	cpse	r24, r1
			break;
		}

		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_YA_OFFSET_H;
    3666:	ba c0       	rjmp	.+372    	; 0x37dc <twi_start+0x604>
    3668:	8a e7       	ldi	r24, 0x7A	; 122
    366a:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <twi1_packet+0x1>
		twi1_m_data[0] = (uint8_t) ((g_twi1_gyro_1_accel_ofsy & 0x7F80) >> 7);
    366e:	80 91 41 20 	lds	r24, 0x2041	; 0x802041 <g_twi1_gyro_1_accel_ofsy>
    3672:	90 91 42 20 	lds	r25, 0x2042	; 0x802042 <g_twi1_gyro_1_accel_ofsy+0x1>
    3676:	e3 e9       	ldi	r30, 0x93	; 147
    3678:	f8 e2       	ldi	r31, 0x28	; 40
    367a:	9c 01       	movw	r18, r24
    367c:	22 0f       	add	r18, r18
    367e:	23 2f       	mov	r18, r19
    3680:	22 1f       	adc	r18, r18
    3682:	33 0b       	sbc	r19, r19
    3684:	31 95       	neg	r19
		twi1_m_data[1] = (uint8_t) ((g_twi1_gyro_1_accel_ofsy &   0x7F) << 1);
    3686:	20 83       	st	Z, r18
    3688:	88 0f       	add	r24, r24
    368a:	81 83       	std	Z+1, r24	; 0x01
    368c:	40 e0       	ldi	r20, 0x00	; 0
    368e:	6f e1       	ldi	r22, 0x1F	; 31
    3690:	70 e2       	ldi	r23, 0x20	; 32
    3692:	80 ea       	ldi	r24, 0xA0	; 160
    3694:	94 e0       	ldi	r25, 0x04	; 4
    3696:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    369a:	c8 2f       	mov	r28, r24
    369c:	81 11       	cpse	r24, r1
			break;
		}

		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_ZA_OFFSET_H;
    369e:	9e c0       	rjmp	.+316    	; 0x37dc <twi_start+0x604>
    36a0:	8d e7       	ldi	r24, 0x7D	; 125
    36a2:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <twi1_packet+0x1>
		twi1_m_data[0] = (uint8_t) ((g_twi1_gyro_1_accel_ofsz & 0x7F80) >> 7);
    36a6:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <g_twi1_gyro_1_accel_ofsz>
    36aa:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <g_twi1_gyro_1_accel_ofsz+0x1>
    36ae:	e3 e9       	ldi	r30, 0x93	; 147
    36b0:	f8 e2       	ldi	r31, 0x28	; 40
    36b2:	9c 01       	movw	r18, r24
    36b4:	22 0f       	add	r18, r18
    36b6:	23 2f       	mov	r18, r19
    36b8:	22 1f       	adc	r18, r18
    36ba:	33 0b       	sbc	r19, r19
    36bc:	31 95       	neg	r19
		twi1_m_data[1] = (uint8_t) ((g_twi1_gyro_1_accel_ofsz &   0x7F) << 1);
    36be:	20 83       	st	Z, r18
    36c0:	88 0f       	add	r24, r24
    36c2:	81 83       	std	Z+1, r24	; 0x01
    36c4:	40 e0       	ldi	r20, 0x00	; 0
    36c6:	6f e1       	ldi	r22, 0x1F	; 31
    36c8:	70 e2       	ldi	r23, 0x20	; 32
    36ca:	80 ea       	ldi	r24, 0xA0	; 160
    36cc:	94 e0       	ldi	r25, 0x04	; 4
    36ce:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    36d2:	c8 2f       	mov	r28, r24
    36d4:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: FIFO frequency = 10 Hz */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    36d6:	82 c0       	rjmp	.+260    	; 0x37dc <twi_start+0x604>
    36d8:	ef e1       	ldi	r30, 0x1F	; 31
    36da:	f0 e2       	ldi	r31, 0x20	; 32
    36dc:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_SMPLRT_DIV;
    36de:	80 83       	st	Z, r24
    36e0:	89 e1       	ldi	r24, 0x19	; 25
		twi1_packet.addr_length = 1;
    36e2:	81 83       	std	Z+1, r24	; 0x01
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = 99;
    36ea:	95 83       	std	Z+5, r25	; 0x05
    36ec:	23 e6       	ldi	r18, 0x63	; 99
    36ee:	20 93 93 28 	sts	0x2893, r18	; 0x802893 <twi1_m_data>
		twi1_packet.length = 1;
    36f2:	80 87       	std	Z+8, r24	; 0x08
    36f4:	91 87       	std	Z+9, r25	; 0x09
    36f6:	40 e0       	ldi	r20, 0x00	; 0
    36f8:	bf 01       	movw	r22, r30
    36fa:	80 ea       	ldi	r24, 0xA0	; 160
    36fc:	94 e0       	ldi	r25, 0x04	; 4
    36fe:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3702:	c8 2f       	mov	r28, r24
    3704:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: Bandwidth = 5 Hz, Fs = 1 kHz */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3706:	6a c0       	rjmp	.+212    	; 0x37dc <twi_start+0x604>
    3708:	ef e1       	ldi	r30, 0x1F	; 31
    370a:	f0 e2       	ldi	r31, 0x20	; 32
    370c:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_CONFIG;
    370e:	80 83       	st	Z, r24
    3710:	8a e1       	ldi	r24, 0x1A	; 26
		twi1_packet.addr_length = 1;
    3712:	81 83       	std	Z+1, r24	; 0x01
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = 6;
    371a:	95 83       	std	Z+5, r25	; 0x05
    371c:	26 e0       	ldi	r18, 0x06	; 6
    371e:	20 93 93 28 	sts	0x2893, r18	; 0x802893 <twi1_m_data>
		twi1_packet.length = 1;
    3722:	80 87       	std	Z+8, r24	; 0x08
    3724:	91 87       	std	Z+9, r25	; 0x09
    3726:	40 e0       	ldi	r20, 0x00	; 0
    3728:	bf 01       	movw	r22, r30
    372a:	80 ea       	ldi	r24, 0xA0	; 160
    372c:	94 e0       	ldi	r25, 0x04	; 4
    372e:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3732:	c8 2f       	mov	r28, r24
    3734:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: Bandwidth = 5 Hz, Fs = 1 kHz */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3736:	52 c0       	rjmp	.+164    	; 0x37dc <twi_start+0x604>
    3738:	ef e1       	ldi	r30, 0x1F	; 31
    373a:	f0 e2       	ldi	r31, 0x20	; 32
    373c:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_ACCEL_CONFIG2;
    373e:	80 83       	st	Z, r24
    3740:	8d e1       	ldi	r24, 0x1D	; 29
		twi1_packet.addr_length = 1;
    3742:	81 83       	std	Z+1, r24	; 0x01
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = 6;
    374a:	95 83       	std	Z+5, r25	; 0x05
    374c:	26 e0       	ldi	r18, 0x06	; 6
    374e:	20 93 93 28 	sts	0x2893, r18	; 0x802893 <twi1_m_data>
		twi1_packet.length = 1;
    3752:	80 87       	std	Z+8, r24	; 0x08
    3754:	91 87       	std	Z+9, r25	; 0x09
    3756:	40 e0       	ldi	r20, 0x00	; 0
    3758:	bf 01       	movw	r22, r30
    375a:	80 ea       	ldi	r24, 0xA0	; 160
    375c:	94 e0       	ldi	r25, 0x04	; 4
    375e:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3762:	c8 2f       	mov	r28, r24
    3764:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: Wake On Motion interrupt = 0.1 g (1 LSB = 4 mg) */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3766:	3a c0       	rjmp	.+116    	; 0x37dc <twi_start+0x604>
    3768:	ef e1       	ldi	r30, 0x1F	; 31
    376a:	f0 e2       	ldi	r31, 0x20	; 32
    376c:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_WOM_THR;
    376e:	80 83       	st	Z, r24
    3770:	8f e1       	ldi	r24, 0x1F	; 31
		twi1_packet.addr_length = 1;
    3772:	81 83       	std	Z+1, r24	; 0x01
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = 25;
    377a:	95 83       	std	Z+5, r25	; 0x05
    377c:	29 e1       	ldi	r18, 0x19	; 25
    377e:	20 93 93 28 	sts	0x2893, r18	; 0x802893 <twi1_m_data>
		twi1_packet.length = 1;
    3782:	80 87       	std	Z+8, r24	; 0x08
    3784:	91 87       	std	Z+9, r25	; 0x09
    3786:	40 e0       	ldi	r20, 0x00	; 0
    3788:	bf 01       	movw	r22, r30
    378a:	80 ea       	ldi	r24, 0xA0	; 160
    378c:	94 e0       	ldi	r25, 0x04	; 4
    378e:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3792:	c8 2f       	mov	r28, r24
    3794:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: RESET all internal data paths */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3796:	22 c0       	rjmp	.+68     	; 0x37dc <twi_start+0x604>
    3798:	ef e1       	ldi	r30, 0x1F	; 31
    379a:	f0 e2       	ldi	r31, 0x20	; 32
    379c:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_USER_CTRL;
    379e:	80 83       	st	Z, r24
    37a0:	8a e6       	ldi	r24, 0x6A	; 106
		twi1_packet.addr_length = 1;
    37a2:	81 83       	std	Z+1, r24	; 0x01
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_USER_CTRL__SIG_COND_RST;  // | TWI1_SLAVE_GYRO_DTA_1_USER_CTRL__FIFO_EN;
    37aa:	95 83       	std	Z+5, r25	; 0x05
    37ac:	21 e0       	ldi	r18, 0x01	; 1
    37ae:	20 93 93 28 	sts	0x2893, r18	; 0x802893 <twi1_m_data>
		twi1_packet.length = 1;
    37b2:	80 87       	std	Z+8, r24	; 0x08
    37b4:	91 87       	std	Z+9, r25	; 0x09
    37b6:	40 e0       	ldi	r20, 0x00	; 0
    37b8:	bf 01       	movw	r22, r30
    37ba:	80 ea       	ldi	r24, 0xA0	; 160
    37bc:	94 e0       	ldi	r25, 0x04	; 4
    37be:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    37c2:	c8 2f       	mov	r28, r24
			break;
		}
		delay_ms(10);
    37c4:	81 11       	cpse	r24, r1
    37c6:	0a c0       	rjmp	.+20     	; 0x37dc <twi_start+0x604>
    37c8:	61 e5       	ldi	r22, 0x51	; 81
    37ca:	73 ec       	ldi	r23, 0xC3	; 195
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0

		printf("TWI-onboard:  INIT success.\r\n");
    37d0:	c5 da       	rcall	.-2678   	; 0x2d5c <__portable_avr_delay_cycles>
    37d2:	89 eb       	ldi	r24, 0xB9	; 185
    37d4:	91 e2       	ldi	r25, 0x21	; 33
    37d6:	0e 94 8a 54 	call	0xa914	; 0xa914 <puts>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    37da:	10 c0       	rjmp	.+32     	; 0x37fc <twi_start+0x624>
    37dc:	8c 2f       	mov	r24, r28
    37de:	0c 2e       	mov	r0, r28
    37e0:	00 0c       	add	r0, r0
    37e2:	99 0b       	sbc	r25, r25
    37e4:	9f 93       	push	r25
    37e6:	cf 93       	push	r28
    37e8:	86 ed       	ldi	r24, 0xD6	; 214
    37ea:	91 e2       	ldi	r25, 0x21	; 33
    37ec:	9f 93       	push	r25
    37ee:	8f 93       	push	r24
    37f0:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	0f 90       	pop	r0

static void init_twi1_baro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Baro MS560702BA03-50 - I2C address: 0x%02X\r\n", TWI1_SLAVE_BARO_ADDR);
    37fa:	0f 90       	pop	r0
    37fc:	1f 92       	push	r1
    37fe:	c6 e7       	ldi	r28, 0x76	; 118
    3800:	cf 93       	push	r28
    3802:	88 eb       	ldi	r24, 0xB8	; 184
    3804:	92 e2       	ldi	r25, 0x22	; 34
    3806:	9f 93       	push	r25
    3808:	8f 93       	push	r24
    380a:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>

	do {
		twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    380e:	ef e1       	ldi	r30, 0x1F	; 31
    3810:	f0 e2       	ldi	r31, 0x20	; 32
		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_RESET;
    3812:	c0 83       	st	Z, r28
    3814:	8e e1       	ldi	r24, 0x1E	; 30
		twi1_packet.addr_length = 1;
    3816:	81 83       	std	Z+1, r24	; 0x01
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	84 83       	std	Z+4, r24	; 0x04
		twi1_packet.length = 0;
    381e:	95 83       	std	Z+5, r25	; 0x05
    3820:	10 86       	std	Z+8, r1	; 0x08
    3822:	11 86       	std	Z+9, r1	; 0x09
    3824:	40 e0       	ldi	r20, 0x00	; 0
    3826:	bf 01       	movw	r22, r30
    3828:	80 ea       	ldi	r24, 0xA0	; 160
    382a:	94 e0       	ldi	r25, 0x04	; 4
    382c:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3830:	c8 2f       	mov	r28, r24
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
			break;
		}
		delay_ms(3);
    383a:	81 11       	cpse	r24, r1
    383c:	8f c0       	rjmp	.+286    	; 0x395c <twi_start+0x784>
    383e:	68 e9       	ldi	r22, 0x98	; 152
    3840:	7a e3       	ldi	r23, 0x3A	; 58
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	90 e0       	ldi	r25, 0x00	; 0

		twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    3846:	8a da       	rcall	.-2796   	; 0x2d5c <__portable_avr_delay_cycles>
    3848:	ef e1       	ldi	r30, 0x1F	; 31
    384a:	f0 e2       	ldi	r31, 0x20	; 32
    384c:	86 e7       	ldi	r24, 0x76	; 118
		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_VERSION;
    384e:	80 83       	st	Z, r24
    3850:	8e ea       	ldi	r24, 0xAE	; 174
		twi1_packet.addr_length = 1;
    3852:	81 83       	std	Z+1, r24	; 0x01
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	84 83       	std	Z+4, r24	; 0x04
		twi1_packet.length = 2;
    385a:	95 83       	std	Z+5, r25	; 0x05
    385c:	82 e0       	ldi	r24, 0x02	; 2
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	80 87       	std	Z+8, r24	; 0x08
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3862:	91 87       	std	Z+9, r25	; 0x09
    3864:	41 e0       	ldi	r20, 0x01	; 1
    3866:	bf 01       	movw	r22, r30
    3868:	80 ea       	ldi	r24, 0xA0	; 160
    386a:	94 e0       	ldi	r25, 0x04	; 4
    386c:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3870:	c8 2f       	mov	r28, r24
    3872:	88 23       	and	r24, r24
			printf("TWI-onboard:  BAD reading serial/CRC word. (sc=%d)\r\n", sc);
    3874:	89 f0       	breq	.+34     	; 0x3898 <twi_start+0x6c0>
    3876:	8c 2f       	mov	r24, r28
    3878:	0c 2e       	mov	r0, r28
    387a:	00 0c       	add	r0, r0
    387c:	99 0b       	sbc	r25, r25
    387e:	9f 93       	push	r25
    3880:	cf 93       	push	r28
    3882:	84 ef       	ldi	r24, 0xF4	; 244
    3884:	92 e2       	ldi	r25, 0x22	; 34
    3886:	9f 93       	push	r25
    3888:	8f 93       	push	r24
    388a:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
			break;
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
    3896:	62 c0       	rjmp	.+196    	; 0x395c <twi_start+0x784>
    3898:	e3 e9       	ldi	r30, 0x93	; 147
    389a:	f8 e2       	ldi	r31, 0x28	; 40
    389c:	80 81       	ld	r24, Z
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	98 2f       	mov	r25, r24
    38a2:	88 27       	eor	r24, r24
    38a4:	21 81       	ldd	r18, Z+1	; 0x01
    38a6:	82 2b       	or	r24, r18
    38a8:	92 95       	swap	r25
    38aa:	82 95       	swap	r24
    38ac:	8f 70       	andi	r24, 0x0F	; 15
    38ae:	89 27       	eor	r24, r25
    38b0:	9f 70       	andi	r25, 0x0F	; 15
    38b2:	89 27       	eor	r24, r25
    38b4:	80 93 3c 29 	sts	0x293C, r24	; 0x80293c <g_twi1_baro_version>
    38b8:	90 93 3d 29 	sts	0x293D, r25	; 0x80293d <g_twi1_baro_version+0x1>
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);
    38bc:	9f 93       	push	r25
    38be:	8f 93       	push	r24
    38c0:	89 e2       	ldi	r24, 0x29	; 41
    38c2:	93 e2       	ldi	r25, 0x23	; 35
    38c4:	9f 93       	push	r25
    38c6:	8f 93       	push	r24
    38c8:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>
    38cc:	0f 2e       	mov	r0, r31
    38ce:	fe e2       	ldi	r31, 0x2E	; 46
    38d0:	ef 2e       	mov	r14, r31
    38d2:	f9 e2       	ldi	r31, 0x29	; 41
    38d4:	ff 2e       	mov	r15, r31
    38d6:	f0 2d       	mov	r31, r0
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
    38de:	0f 90       	pop	r0
    38e0:	88 24       	eor	r8, r8
    38e2:	83 94       	inc	r8
			twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    38e4:	91 2c       	mov	r9, r1
    38e6:	cf e1       	ldi	r28, 0x1F	; 31
    38e8:	d0 e2       	ldi	r29, 0x20	; 32
    38ea:	0f 2e       	mov	r0, r31
    38ec:	f6 e7       	ldi	r31, 0x76	; 118
    38ee:	7f 2e       	mov	r7, r31
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
			twi1_packet.addr_length = 1;
    38f0:	f0 2d       	mov	r31, r0
    38f2:	aa 24       	eor	r10, r10
    38f4:	a3 94       	inc	r10
			twi1_packet.length = 2;
    38f6:	b1 2c       	mov	r11, r1
    38f8:	68 94       	set
    38fa:	cc 24       	eor	r12, r12
    38fc:	c1 f8       	bld	r12, 1
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc != STATUS_OK) {
				//printf("TWI-onboard:  BAD reading PROM address %d. (sc=%d)\r\n", adr, sc);
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    38fe:	d1 2c       	mov	r13, r1
    3900:	03 e9       	ldi	r16, 0x93	; 147
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
			twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    3902:	18 e2       	ldi	r17, 0x28	; 40
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
    3904:	78 82       	st	Y, r7
    3906:	c4 01       	movw	r24, r8
    3908:	88 0f       	add	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	80 6a       	ori	r24, 0xA0	; 160
			twi1_packet.addr_length = 1;
    390e:	89 83       	std	Y+1, r24	; 0x01
    3910:	ac 82       	std	Y+4, r10	; 0x04
			twi1_packet.length = 2;
    3912:	bd 82       	std	Y+5, r11	; 0x05
    3914:	c8 86       	std	Y+8, r12	; 0x08
    3916:	d9 86       	std	Y+9, r13	; 0x09
    3918:	41 e0       	ldi	r20, 0x01	; 1
    391a:	be 01       	movw	r22, r28
    391c:	80 ea       	ldi	r24, 0xA0	; 160
    391e:	94 e0       	ldi	r25, 0x04	; 4
    3920:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc != STATUS_OK) {
    3924:	81 11       	cpse	r24, r1
				//printf("TWI-onboard:  BAD reading PROM address %d. (sc=%d)\r\n", adr, sc);
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    3926:	12 c0       	rjmp	.+36     	; 0x394c <twi_start+0x774>
    3928:	f8 01       	movw	r30, r16
    392a:	80 81       	ld	r24, Z
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	98 2f       	mov	r25, r24
    3930:	88 27       	eor	r24, r24
    3932:	21 81       	ldd	r18, Z+1	; 0x01
    3934:	82 2b       	or	r24, r18
    3936:	f7 01       	movw	r30, r14
    3938:	81 93       	st	Z+, r24
    393a:	91 93       	st	Z+, r25
			break;
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
    393c:	7f 01       	movw	r14, r30
    393e:	ff ef       	ldi	r31, 0xFF	; 255
    3940:	8f 1a       	sub	r8, r31
    3942:	9f 0a       	sbc	r9, r31
    3944:	88 e0       	ldi	r24, 0x08	; 8
    3946:	88 16       	cp	r8, r24
    3948:	91 04       	cpc	r9, r1
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
		}

		g_twi1_baro_valid = true;
    394a:	e1 f6       	brne	.-72     	; 0x3904 <twi_start+0x72c>
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	80 93 3e 29 	sts	0x293E, r24	; 0x80293e <g_twi1_baro_valid>
		printf("TWI-onboard:  INIT success.\r\n");
    3952:	89 eb       	ldi	r24, 0xB9	; 185
    3954:	91 e2       	ldi	r25, 0x21	; 33
    3956:	0e 94 8a 54 	call	0xa914	; 0xa914 <puts>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    395a:	10 c0       	rjmp	.+32     	; 0x397c <twi_start+0x7a4>
    395c:	8c 2f       	mov	r24, r28
    395e:	0c 2e       	mov	r0, r28
    3960:	00 0c       	add	r0, r0
    3962:	99 0b       	sbc	r25, r25
    3964:	9f 93       	push	r25
    3966:	cf 93       	push	r28
    3968:	86 ed       	ldi	r24, 0xD6	; 214
    396a:	91 e2       	ldi	r25, 0x21	; 33
    396c:	9f 93       	push	r25
    396e:	8f 93       	push	r24
    3970:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
	init_twi1_gyro();

	/* Device Baro MS560702BA03-50 - I2C address: 0x76 */
	init_twi1_baro();

	printf("-----------\r\n\r\n");
    397a:	0f 90       	pop	r0
    397c:	8f e5       	ldi	r24, 0x5F	; 95
    397e:	93 e2       	ldi	r25, 0x23	; 35
	#endif

	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
    3980:	0e 94 8a 54 	call	0xa914	; 0xa914 <puts>
    3984:	61 ed       	ldi	r22, 0xD1	; 209
    3986:	72 e1       	ldi	r23, 0x12	; 18
    3988:	83 e1       	ldi	r24, 0x13	; 19
    398a:	90 e0       	ldi	r25, 0x00	; 0

/* TWI2 - LCD Port */
static void start_twi2_lcd(void)
{
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
    398c:	e7 d9       	rcall	.-3122   	; 0x2d5c <__portable_avr_delay_cycles>
    398e:	eb e0       	ldi	r30, 0x0B	; 11
    3990:	f0 e2       	ldi	r31, 0x20	; 32
    3992:	81 e0       	ldi	r24, 0x01	; 1
	twi2_packet.addr_length = 1;
    3994:	81 83       	std	Z+1, r24	; 0x01
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	84 83       	std	Z+4, r24	; 0x04
	twi2_packet.length = 1;
    399c:	95 83       	std	Z+5, r25	; 0x05
    399e:	80 87       	std	Z+8, r24	; 0x08
    39a0:	91 87       	std	Z+9, r25	; 0x09
    39a2:	41 e0       	ldi	r20, 0x01	; 1
    39a4:	bf 01       	movw	r22, r30
    39a6:	80 e8       	ldi	r24, 0x80	; 128
    39a8:	94 e0       	ldi	r25, 0x04	; 4
    39aa:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
    39ae:	80 91 8b 28 	lds	r24, 0x288B	; 0x80288b <twi2_m_data>
    39b2:	80 93 11 29 	sts	0x2911, r24	; 0x802911 <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
    39b6:	81 31       	cpi	r24, 0x11	; 17
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
    39b8:	78 f1       	brcs	.+94     	; 0x3a18 <twi_start+0x840>
    39ba:	cb e0       	ldi	r28, 0x0B	; 11
    39bc:	d0 e2       	ldi	r29, 0x20	; 32
    39be:	82 e0       	ldi	r24, 0x02	; 2
		twi2_m_data[0] = 0x10;
    39c0:	89 83       	std	Y+1, r24	; 0x01
    39c2:	0f 2e       	mov	r0, r31
    39c4:	fb e8       	ldi	r31, 0x8B	; 139
    39c6:	ef 2e       	mov	r14, r31
    39c8:	f8 e2       	ldi	r31, 0x28	; 40
    39ca:	ff 2e       	mov	r15, r31
    39cc:	f0 2d       	mov	r31, r0
    39ce:	80 e1       	ldi	r24, 0x10	; 16
    39d0:	f7 01       	movw	r30, r14
		twi2_packet.length = 1;
    39d2:	80 83       	st	Z, r24
    39d4:	01 e0       	ldi	r16, 0x01	; 1
    39d6:	10 e0       	ldi	r17, 0x00	; 0
    39d8:	08 87       	std	Y+8, r16	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    39da:	19 87       	std	Y+9, r17	; 0x09
    39dc:	40 e0       	ldi	r20, 0x00	; 0
    39de:	be 01       	movw	r22, r28
    39e0:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    39e2:	94 e0       	ldi	r25, 0x04	; 4
    39e4:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    39e8:	65 e0       	ldi	r22, 0x05	; 5
    39ea:	70 e0       	ldi	r23, 0x00	; 0
    39ec:	80 e0       	ldi	r24, 0x00	; 0

		twi2_waitUntilReady();
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	b5 d9       	rcall	.-3222   	; 0x2d5c <__portable_avr_delay_cycles>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
    39f2:	bf d9       	rcall	.-3202   	; 0x2d72 <twi2_waitUntilReady>
    39f4:	84 e1       	ldi	r24, 0x14	; 20
		twi2_m_data[0] = GFX_PIXEL_SET;
    39f6:	89 83       	std	Y+1, r24	; 0x01
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	f7 01       	movw	r30, r14
		twi2_packet.length = 1;
    39fc:	80 83       	st	Z, r24
    39fe:	08 87       	std	Y+8, r16	; 0x08
    3a00:	19 87       	std	Y+9, r17	; 0x09
    3a02:	40 e0       	ldi	r20, 0x00	; 0
    3a04:	be 01       	movw	r22, r28
    3a06:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3a08:	94 e0       	ldi	r25, 0x04	; 4
    3a0a:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
    3a0e:	65 e0       	ldi	r22, 0x05	; 5
    3a10:	70 e0       	ldi	r23, 0x00	; 0
    3a12:	80 e0       	ldi	r24, 0x00	; 0
	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
	start_twi2_lcd();
}
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	a2 d9       	rcall	.-3260   	; 0x2d5c <__portable_avr_delay_cycles>
    3a18:	df 91       	pop	r29
    3a1a:	cf 91       	pop	r28
    3a1c:	1f 91       	pop	r17
    3a1e:	0f 91       	pop	r16
    3a20:	ff 90       	pop	r15
    3a22:	ef 90       	pop	r14
    3a24:	df 90       	pop	r13
    3a26:	cf 90       	pop	r12
    3a28:	bf 90       	pop	r11
    3a2a:	af 90       	pop	r10
    3a2c:	9f 90       	pop	r9
    3a2e:	8f 90       	pop	r8
    3a30:	7f 90       	pop	r7
    3a32:	08 95       	ret

00003a34 <isr_10ms_twi1_onboard>:
	}
}

/* 10ms TWI1 - Gyro device */
void isr_10ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    3a34:	08 95       	ret

00003a36 <isr_500ms_twi1_onboard>:
}

/* 500ms TWI1 - Baro, Hygro devices */
void isr_500ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    3a36:	cf 92       	push	r12
    3a38:	df 92       	push	r13
    3a3a:	ef 92       	push	r14
    3a3c:	ff 92       	push	r15
    3a3e:	6b 01       	movw	r12, r22
    3a40:	7c 01       	movw	r14, r24
	if (g_twi1_hygro_valid) {
    3a42:	80 91 1b 29 	lds	r24, 0x291B	; 0x80291b <g_twi1_hygro_valid>
    3a46:	88 23       	and	r24, r24
    3a48:	69 f1       	breq	.+90     	; 0x3aa4 <isr_500ms_twi1_onboard+0x6e>
	if (!sync) {
		return;
	}

	/* Read cyclic measurement data */
	twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    3a4a:	ef e1       	ldi	r30, 0x1F	; 31
    3a4c:	f0 e2       	ldi	r31, 0x20	; 32
    3a4e:	84 e4       	ldi	r24, 0x44	; 68
    3a50:	80 83       	st	Z, r24
	twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_FETCH_DATA_HI;
    3a52:	80 ee       	ldi	r24, 0xE0	; 224
    3a54:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_FETCH_DATA_LO;
    3a56:	12 82       	std	Z+2, r1	; 0x02
	twi1_packet.addr_length = 2;
    3a58:	82 e0       	ldi	r24, 0x02	; 2
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	84 83       	std	Z+4, r24	; 0x04
    3a5e:	95 83       	std	Z+5, r25	; 0x05
	twi1_packet.length = 5;
    3a60:	85 e0       	ldi	r24, 0x05	; 5
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	80 87       	std	Z+8, r24	; 0x08
    3a66:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3a68:	41 e0       	ldi	r20, 0x01	; 1
    3a6a:	bf 01       	movw	r22, r30
    3a6c:	80 ea       	ldi	r24, 0xA0	; 160
    3a6e:	94 e0       	ldi	r25, 0x04	; 4
    3a70:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
	status_code_t sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    3a74:	81 11       	cpse	r24, r1
    3a76:	16 c0       	rjmp	.+44     	; 0x3aa4 <isr_500ms_twi1_onboard+0x6e>
		g_twi1_hygro_S_T	= ((uint16_t)twi1_m_data[0] << 8) | twi1_m_data[1];
    3a78:	e3 e9       	ldi	r30, 0x93	; 147
    3a7a:	f8 e2       	ldi	r31, 0x28	; 40
    3a7c:	80 81       	ld	r24, Z
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	98 2f       	mov	r25, r24
    3a82:	88 27       	eor	r24, r24
    3a84:	21 81       	ldd	r18, Z+1	; 0x01
    3a86:	82 2b       	or	r24, r18
    3a88:	80 93 18 29 	sts	0x2918, r24	; 0x802918 <g_twi1_hygro_S_T>
    3a8c:	90 93 19 29 	sts	0x2919, r25	; 0x802919 <g_twi1_hygro_S_T+0x1>
		g_twi1_hygro_S_RH	= ((uint16_t)twi1_m_data[3] << 8) | twi1_m_data[4];
    3a90:	83 81       	ldd	r24, Z+3	; 0x03
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	98 2f       	mov	r25, r24
    3a96:	88 27       	eor	r24, r24
    3a98:	24 81       	ldd	r18, Z+4	; 0x04
    3a9a:	82 2b       	or	r24, r18
    3a9c:	80 93 16 29 	sts	0x2916, r24	; 0x802916 <g_twi1_hygro_S_RH>
    3aa0:	90 93 17 29 	sts	0x2917, r25	; 0x802917 <g_twi1_hygro_S_RH+0x1>
{	/* Service time slot */
	if (g_twi1_hygro_valid) {
		isr_twi1_hygro(now, true);
	}

	if (g_twi1_gyro_valid) {
    3aa4:	80 91 7a 29 	lds	r24, 0x297A	; 0x80297a <g_twi1_gyro_valid>
    3aa8:	88 23       	and	r24, r24
    3aaa:	09 f4       	brne	.+2      	; 0x3aae <isr_500ms_twi1_onboard+0x78>
    3aac:	fa c0       	rjmp	.+500    	; 0x3ca2 <isr_500ms_twi1_onboard+0x26c>
	if (!sync) {
		return;
	}

	do {
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3aae:	ef e1       	ldi	r30, 0x1F	; 31
    3ab0:	f0 e2       	ldi	r31, 0x20	; 32
    3ab2:	88 e6       	ldi	r24, 0x68	; 104
    3ab4:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_ACCEL_XOUT_H;		// Big endian
    3ab6:	8b e3       	ldi	r24, 0x3B	; 59
    3ab8:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	84 83       	std	Z+4, r24	; 0x04
    3ac0:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 8;
    3ac2:	88 e0       	ldi	r24, 0x08	; 8
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	80 87       	std	Z+8, r24	; 0x08
    3ac8:	91 87       	std	Z+9, r25	; 0x09
    3aca:	41 e0       	ldi	r20, 0x01	; 1
    3acc:	bf 01       	movw	r22, r30
    3ace:	80 ea       	ldi	r24, 0xA0	; 160
    3ad0:	94 e0       	ldi	r25, 0x04	; 4
    3ad2:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		status_code_t sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3ad6:	81 11       	cpse	r24, r1
    3ad8:	e4 c0       	rjmp	.+456    	; 0x3ca2 <isr_500ms_twi1_onboard+0x26c>
			break;
		}
		g_twi1_gyro_1_accel_x = ((uint16_t)twi1_m_data[0] << 8) | twi1_m_data[1];
    3ada:	e3 e9       	ldi	r30, 0x93	; 147
    3adc:	f8 e2       	ldi	r31, 0x28	; 40
    3ade:	80 81       	ld	r24, Z
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	98 2f       	mov	r25, r24
    3ae4:	88 27       	eor	r24, r24
    3ae6:	21 81       	ldd	r18, Z+1	; 0x01
    3ae8:	82 2b       	or	r24, r18
    3aea:	80 93 71 29 	sts	0x2971, r24	; 0x802971 <g_twi1_gyro_1_accel_x>
    3aee:	90 93 72 29 	sts	0x2972, r25	; 0x802972 <g_twi1_gyro_1_accel_x+0x1>
		g_twi1_gyro_1_accel_y = ((uint16_t)twi1_m_data[2] << 8) | twi1_m_data[3];
    3af2:	82 81       	ldd	r24, Z+2	; 0x02
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	98 2f       	mov	r25, r24
    3af8:	88 27       	eor	r24, r24
    3afa:	23 81       	ldd	r18, Z+3	; 0x03
    3afc:	82 2b       	or	r24, r18
    3afe:	80 93 6f 29 	sts	0x296F, r24	; 0x80296f <g_twi1_gyro_1_accel_y>
    3b02:	90 93 70 29 	sts	0x2970, r25	; 0x802970 <g_twi1_gyro_1_accel_y+0x1>
		g_twi1_gyro_1_accel_z = ((uint16_t)twi1_m_data[4] << 8) | twi1_m_data[5];
    3b06:	84 81       	ldd	r24, Z+4	; 0x04
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	98 2f       	mov	r25, r24
    3b0c:	88 27       	eor	r24, r24
    3b0e:	25 81       	ldd	r18, Z+5	; 0x05
    3b10:	82 2b       	or	r24, r18
    3b12:	80 93 6d 29 	sts	0x296D, r24	; 0x80296d <g_twi1_gyro_1_accel_z>
    3b16:	90 93 6e 29 	sts	0x296E, r25	; 0x80296e <g_twi1_gyro_1_accel_z+0x1>
		g_twi1_gyro_1_temp    = ((uint16_t)twi1_m_data[6] << 8) | twi1_m_data[7];
    3b1a:	86 81       	ldd	r24, Z+6	; 0x06
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	98 2f       	mov	r25, r24
    3b20:	88 27       	eor	r24, r24
    3b22:	27 81       	ldd	r18, Z+7	; 0x07
    3b24:	82 2b       	or	r24, r18
    3b26:	80 93 77 29 	sts	0x2977, r24	; 0x802977 <g_twi1_gyro_1_temp>
    3b2a:	90 93 78 29 	sts	0x2978, r25	; 0x802978 <g_twi1_gyro_1_temp+0x1>

		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3b2e:	ef e1       	ldi	r30, 0x1F	; 31
    3b30:	f0 e2       	ldi	r31, 0x20	; 32
    3b32:	88 e6       	ldi	r24, 0x68	; 104
    3b34:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_GYRO_XOUT_H;
    3b36:	83 e4       	ldi	r24, 0x43	; 67
    3b38:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	84 83       	std	Z+4, r24	; 0x04
    3b40:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 6;
    3b42:	86 e0       	ldi	r24, 0x06	; 6
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	80 87       	std	Z+8, r24	; 0x08
    3b48:	91 87       	std	Z+9, r25	; 0x09
    3b4a:	41 e0       	ldi	r20, 0x01	; 1
    3b4c:	bf 01       	movw	r22, r30
    3b4e:	80 ea       	ldi	r24, 0xA0	; 160
    3b50:	94 e0       	ldi	r25, 0x04	; 4
    3b52:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3b56:	81 11       	cpse	r24, r1
    3b58:	a4 c0       	rjmp	.+328    	; 0x3ca2 <isr_500ms_twi1_onboard+0x26c>
			break;
		}
		g_twi1_gyro_1_gyro_x = ((uint16_t)twi1_m_data[0] << 8) | twi1_m_data[1];
    3b5a:	e3 e9       	ldi	r30, 0x93	; 147
    3b5c:	f8 e2       	ldi	r31, 0x28	; 40
    3b5e:	80 81       	ld	r24, Z
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	98 2f       	mov	r25, r24
    3b64:	88 27       	eor	r24, r24
    3b66:	21 81       	ldd	r18, Z+1	; 0x01
    3b68:	82 2b       	or	r24, r18
    3b6a:	80 93 65 29 	sts	0x2965, r24	; 0x802965 <g_twi1_gyro_1_gyro_x>
    3b6e:	90 93 66 29 	sts	0x2966, r25	; 0x802966 <g_twi1_gyro_1_gyro_x+0x1>
		g_twi1_gyro_1_gyro_y = ((uint16_t)twi1_m_data[2] << 8) | twi1_m_data[3];
    3b72:	82 81       	ldd	r24, Z+2	; 0x02
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	98 2f       	mov	r25, r24
    3b78:	88 27       	eor	r24, r24
    3b7a:	23 81       	ldd	r18, Z+3	; 0x03
    3b7c:	82 2b       	or	r24, r18
    3b7e:	80 93 63 29 	sts	0x2963, r24	; 0x802963 <g_twi1_gyro_1_gyro_y>
    3b82:	90 93 64 29 	sts	0x2964, r25	; 0x802964 <g_twi1_gyro_1_gyro_y+0x1>
		g_twi1_gyro_1_gyro_z = ((uint16_t)twi1_m_data[4] << 8) | twi1_m_data[5];
    3b86:	84 81       	ldd	r24, Z+4	; 0x04
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	98 2f       	mov	r25, r24
    3b8c:	88 27       	eor	r24, r24
    3b8e:	25 81       	ldd	r18, Z+5	; 0x05
    3b90:	82 2b       	or	r24, r18
    3b92:	80 93 61 29 	sts	0x2961, r24	; 0x802961 <g_twi1_gyro_1_gyro_z>
    3b96:	90 93 62 29 	sts	0x2962, r25	; 0x802962 <g_twi1_gyro_1_gyro_z+0x1>

		/* Magnetometer: check if new data is available */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3b9a:	ef e1       	ldi	r30, 0x1F	; 31
    3b9c:	f0 e2       	ldi	r31, 0x20	; 32
    3b9e:	8c e0       	ldi	r24, 0x0C	; 12
    3ba0:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_ST1;
    3ba2:	82 e0       	ldi	r24, 0x02	; 2
    3ba4:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	84 83       	std	Z+4, r24	; 0x04
    3bac:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    3bae:	80 87       	std	Z+8, r24	; 0x08
    3bb0:	91 87       	std	Z+9, r25	; 0x09
    3bb2:	41 e0       	ldi	r20, 0x01	; 1
    3bb4:	bf 01       	movw	r22, r30
    3bb6:	80 ea       	ldi	r24, 0xA0	; 160
    3bb8:	94 e0       	ldi	r25, 0x04	; 4
    3bba:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3bbe:	81 11       	cpse	r24, r1
    3bc0:	70 c0       	rjmp	.+224    	; 0x3ca2 <isr_500ms_twi1_onboard+0x26c>
			break;
		}
		if (!(twi1_m_data[0] & TWI1_SLAVE_GYRO_DTA_2_ST1__DRDY)) {
    3bc2:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <twi1_m_data>
    3bc6:	80 ff       	sbrs	r24, 0
    3bc8:	6c c0       	rjmp	.+216    	; 0x3ca2 <isr_500ms_twi1_onboard+0x26c>
			/* Data of Magnetometer AK8963 not ready yet */
			break;
		}

		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3bca:	ef e1       	ldi	r30, 0x1F	; 31
    3bcc:	f0 e2       	ldi	r31, 0x20	; 32
    3bce:	8c e0       	ldi	r24, 0x0C	; 12
    3bd0:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_HX_L;			// Little endian
    3bd2:	83 e0       	ldi	r24, 0x03	; 3
    3bd4:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	84 83       	std	Z+4, r24	; 0x04
    3bdc:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 6;
    3bde:	86 e0       	ldi	r24, 0x06	; 6
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	80 87       	std	Z+8, r24	; 0x08
    3be4:	91 87       	std	Z+9, r25	; 0x09
    3be6:	41 e0       	ldi	r20, 0x01	; 1
    3be8:	bf 01       	movw	r22, r30
    3bea:	80 ea       	ldi	r24, 0xA0	; 160
    3bec:	94 e0       	ldi	r25, 0x04	; 4
    3bee:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3bf2:	81 11       	cpse	r24, r1
    3bf4:	56 c0       	rjmp	.+172    	; 0x3ca2 <isr_500ms_twi1_onboard+0x26c>
			break;
		}
		g_twi1_gyro_2_mag_x = ((int16_t) ((((uint16_t)twi1_m_data[1]) << 8) | twi1_m_data[0])) + g_twi1_gyro_2_ofsx;
    3bf6:	e3 e9       	ldi	r30, 0x93	; 147
    3bf8:	f8 e2       	ldi	r31, 0x28	; 40
    3bfa:	81 81       	ldd	r24, Z+1	; 0x01
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	98 2f       	mov	r25, r24
    3c00:	88 27       	eor	r24, r24
    3c02:	20 81       	ld	r18, Z
    3c04:	82 2b       	or	r24, r18
    3c06:	20 91 37 20 	lds	r18, 0x2037	; 0x802037 <g_twi1_gyro_2_ofsx>
    3c0a:	30 91 38 20 	lds	r19, 0x2038	; 0x802038 <g_twi1_gyro_2_ofsx+0x1>
    3c0e:	82 0f       	add	r24, r18
    3c10:	93 1f       	adc	r25, r19
    3c12:	80 93 4f 29 	sts	0x294F, r24	; 0x80294f <g_twi1_gyro_2_mag_x>
    3c16:	90 93 50 29 	sts	0x2950, r25	; 0x802950 <g_twi1_gyro_2_mag_x+0x1>
		g_twi1_gyro_2_mag_y = ((int16_t) ((((uint16_t)twi1_m_data[3]) << 8) | twi1_m_data[2])) + g_twi1_gyro_2_ofsy;
    3c1a:	83 81       	ldd	r24, Z+3	; 0x03
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	98 2f       	mov	r25, r24
    3c20:	88 27       	eor	r24, r24
    3c22:	22 81       	ldd	r18, Z+2	; 0x02
    3c24:	82 2b       	or	r24, r18
    3c26:	20 91 35 20 	lds	r18, 0x2035	; 0x802035 <g_twi1_gyro_2_ofsy>
    3c2a:	30 91 36 20 	lds	r19, 0x2036	; 0x802036 <g_twi1_gyro_2_ofsy+0x1>
    3c2e:	82 0f       	add	r24, r18
    3c30:	93 1f       	adc	r25, r19
    3c32:	80 93 4d 29 	sts	0x294D, r24	; 0x80294d <g_twi1_gyro_2_mag_y>
    3c36:	90 93 4e 29 	sts	0x294E, r25	; 0x80294e <g_twi1_gyro_2_mag_y+0x1>
		g_twi1_gyro_2_mag_z = ((int16_t) ((((uint16_t)twi1_m_data[5]) << 8) | twi1_m_data[4])) + g_twi1_gyro_2_ofsz;
    3c3a:	85 81       	ldd	r24, Z+5	; 0x05
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	98 2f       	mov	r25, r24
    3c40:	88 27       	eor	r24, r24
    3c42:	24 81       	ldd	r18, Z+4	; 0x04
    3c44:	82 2b       	or	r24, r18
    3c46:	20 91 33 20 	lds	r18, 0x2033	; 0x802033 <g_twi1_gyro_2_ofsz>
    3c4a:	30 91 34 20 	lds	r19, 0x2034	; 0x802034 <g_twi1_gyro_2_ofsz+0x1>
    3c4e:	82 0f       	add	r24, r18
    3c50:	93 1f       	adc	r25, r19
    3c52:	80 93 4b 29 	sts	0x294B, r24	; 0x80294b <g_twi1_gyro_2_mag_z>
    3c56:	90 93 4c 29 	sts	0x294C, r25	; 0x80294c <g_twi1_gyro_2_mag_z+0x1>

		/* Magnetometer: check for data validity and release cycle */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3c5a:	ef e1       	ldi	r30, 0x1F	; 31
    3c5c:	f0 e2       	ldi	r31, 0x20	; 32
    3c5e:	8c e0       	ldi	r24, 0x0C	; 12
    3c60:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_ST2;
    3c62:	89 e0       	ldi	r24, 0x09	; 9
    3c64:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	84 83       	std	Z+4, r24	; 0x04
    3c6c:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    3c6e:	80 87       	std	Z+8, r24	; 0x08
    3c70:	91 87       	std	Z+9, r25	; 0x09
    3c72:	41 e0       	ldi	r20, 0x01	; 1
    3c74:	bf 01       	movw	r22, r30
    3c76:	80 ea       	ldi	r24, 0xA0	; 160
    3c78:	94 e0       	ldi	r25, 0x04	; 4
    3c7a:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3c7e:	81 11       	cpse	r24, r1
    3c80:	10 c0       	rjmp	.+32     	; 0x3ca2 <isr_500ms_twi1_onboard+0x26c>
			break;
		}
		if (twi1_m_data[0] & TWI1_SLAVE_GYRO_DTA_2_ST2__HOFL) {
    3c82:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <twi1_m_data>
    3c86:	83 ff       	sbrs	r24, 3
    3c88:	0c c0       	rjmp	.+24     	; 0x3ca2 <isr_500ms_twi1_onboard+0x26c>
			/* Data of Magnetometer AK8963 overflowed */
			g_twi1_gyro_2_mag_z = g_twi1_gyro_2_mag_y = g_twi1_gyro_2_mag_x = 0;
    3c8a:	10 92 4f 29 	sts	0x294F, r1	; 0x80294f <g_twi1_gyro_2_mag_x>
    3c8e:	10 92 50 29 	sts	0x2950, r1	; 0x802950 <g_twi1_gyro_2_mag_x+0x1>
    3c92:	10 92 4d 29 	sts	0x294D, r1	; 0x80294d <g_twi1_gyro_2_mag_y>
    3c96:	10 92 4e 29 	sts	0x294E, r1	; 0x80294e <g_twi1_gyro_2_mag_y+0x1>
    3c9a:	10 92 4b 29 	sts	0x294B, r1	; 0x80294b <g_twi1_gyro_2_mag_z>
    3c9e:	10 92 4c 29 	sts	0x294C, r1	; 0x80294c <g_twi1_gyro_2_mag_z+0x1>

	if (g_twi1_gyro_valid) {
		isr_twi1_gyro(now, true);
	}

	if (g_twi1_baro_valid) {
    3ca2:	80 91 3e 29 	lds	r24, 0x293E	; 0x80293e <g_twi1_baro_valid>
    3ca6:	88 23       	and	r24, r24
    3ca8:	21 f0       	breq	.+8      	; 0x3cb2 <isr_500ms_twi1_onboard+0x27c>
		isr_twi1_baro(now, true);
    3caa:	41 e0       	ldi	r20, 0x01	; 1
    3cac:	c7 01       	movw	r24, r14
    3cae:	b6 01       	movw	r22, r12
    3cb0:	a9 d8       	rcall	.-3758   	; 0x2e04 <isr_twi1_baro>
	}
}
    3cb2:	ff 90       	pop	r15
    3cb4:	ef 90       	pop	r14
    3cb6:	df 90       	pop	r13
    3cb8:	cf 90       	pop	r12
    3cba:	08 95       	ret

00003cbc <isr_sparetime_twi1_onboard>:

	if (g_twi1_gyro_valid) {
		isr_twi1_gyro(now, false);
	}

	if (g_twi1_baro_valid) {
    3cbc:	20 91 3e 29 	lds	r18, 0x293E	; 0x80293e <g_twi1_baro_valid>
    3cc0:	22 23       	and	r18, r18
    3cc2:	11 f0       	breq	.+4      	; 0x3cc8 <isr_sparetime_twi1_onboard+0xc>
		isr_twi1_baro(now, false);
    3cc4:	40 e0       	ldi	r20, 0x00	; 0
    3cc6:	9e c8       	rjmp	.-3780   	; 0x2e04 <isr_twi1_baro>
    3cc8:	08 95       	ret

00003cca <task_twi1_onboard>:
	}
}

/* TWI1 - onboard devices */
void task_twi1_onboard(uint32_t now)
{
    3cca:	2f 92       	push	r2
    3ccc:	3f 92       	push	r3
    3cce:	4f 92       	push	r4
    3cd0:	5f 92       	push	r5
    3cd2:	6f 92       	push	r6
    3cd4:	7f 92       	push	r7
    3cd6:	8f 92       	push	r8
    3cd8:	9f 92       	push	r9
    3cda:	af 92       	push	r10
    3cdc:	bf 92       	push	r11
    3cde:	cf 92       	push	r12
    3ce0:	df 92       	push	r13
    3ce2:	ef 92       	push	r14
    3ce4:	ff 92       	push	r15
    3ce6:	0f 93       	push	r16
    3ce8:	1f 93       	push	r17
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
    3cee:	cd b7       	in	r28, 0x3d	; 61
    3cf0:	de b7       	in	r29, 0x3e	; 62
    3cf2:	e5 97       	sbiw	r28, 0x35	; 53
    3cf4:	cd bf       	out	0x3d, r28	; 61
    3cf6:	de bf       	out	0x3e, r29	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3cf8:	8f b7       	in	r24, 0x3f	; 63
    3cfa:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    3cfc:	f8 94       	cli
	return flags;
    3cfe:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags = cpu_irq_save();
	bool l_twi1_hygro_valid	= g_twi1_hygro_valid;
    3d00:	80 91 1b 29 	lds	r24, 0x291B	; 0x80291b <g_twi1_hygro_valid>
	bool l_twi1_gyro_valid	= g_twi1_gyro_valid;
    3d04:	10 91 7a 29 	lds	r17, 0x297A	; 0x80297a <g_twi1_gyro_valid>
	bool l_twi1_baro_valid	= g_twi1_baro_valid;
    3d08:	70 90 3e 29 	lds	r7, 0x293E	; 0x80293e <g_twi1_baro_valid>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3d0c:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (l_twi1_hygro_valid) {
    3d0e:	88 23       	and	r24, r24
    3d10:	09 f4       	brne	.+2      	; 0x3d14 <task_twi1_onboard+0x4a>
    3d12:	3c c0       	rjmp	.+120    	; 0x3d8c <task_twi1_onboard+0xc2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3d14:	8f b7       	in	r24, 0x3f	; 63
    3d16:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    3d18:	f8 94       	cli
	return flags;
    3d1a:	8f 81       	ldd	r24, Y+7	; 0x07
{	// Calculations for the presentation layer
	static uint16_t s_twi1_hygro_S_T	= 0UL;
	static uint16_t s_twi1_hygro_S_RH	= 0UL;

	irqflags_t flags = cpu_irq_save();
	uint16_t l_twi1_hygro_S_T	= g_twi1_hygro_S_T;
    3d1c:	20 91 18 29 	lds	r18, 0x2918	; 0x802918 <g_twi1_hygro_S_T>
    3d20:	30 91 19 29 	lds	r19, 0x2919	; 0x802919 <g_twi1_hygro_S_T+0x1>
	uint16_t l_twi1_hygro_S_RH	= g_twi1_hygro_S_RH;
    3d24:	e0 90 16 29 	lds	r14, 0x2916	; 0x802916 <g_twi1_hygro_S_RH>
    3d28:	f0 90 17 29 	lds	r15, 0x2917	; 0x802917 <g_twi1_hygro_S_RH+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3d2c:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	/* Calculate and present Temp value when a different measurement has arrived */
	if (l_twi1_hygro_S_T != s_twi1_hygro_S_T) {
    3d2e:	21 15       	cp	r18, r1
    3d30:	31 05       	cpc	r19, r1
    3d32:	a9 f0       	breq	.+42     	; 0x3d5e <task_twi1_onboard+0x94>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3d34:	8f b7       	in	r24, 0x3f	; 63
    3d36:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    3d38:	f8 94       	cli
	return flags;
    3d3a:	0e 81       	ldd	r16, Y+6	; 0x06
		int16_t temp_100 = (int16_t)((((int32_t)l_twi1_hygro_S_T  * 17500) / 0xFFFF) - 4500);

		flags = cpu_irq_save();
		g_twi1_hygro_T_100 = temp_100;
    3d3c:	ac e5       	ldi	r26, 0x5C	; 92
    3d3e:	b4 e4       	ldi	r27, 0x44	; 68
    3d40:	0e 94 76 51 	call	0xa2ec	; 0xa2ec <__umulhisi3>
    3d44:	2f ef       	ldi	r18, 0xFF	; 255
    3d46:	3f ef       	ldi	r19, 0xFF	; 255
    3d48:	40 e0       	ldi	r20, 0x00	; 0
    3d4a:	50 e0       	ldi	r21, 0x00	; 0
    3d4c:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    3d50:	24 59       	subi	r18, 0x94	; 148
    3d52:	31 41       	sbci	r19, 0x11	; 17
    3d54:	20 93 14 29 	sts	0x2914, r18	; 0x802914 <g_twi1_hygro_T_100>
    3d58:	30 93 15 29 	sts	0x2915, r19	; 0x802915 <g_twi1_hygro_T_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3d5c:	0f bf       	out	0x3f, r16	; 63
		cpu_irq_restore(flags);
	}

	/* Calculate and present Hygro value when a different measurement has arrived */
	if (l_twi1_hygro_S_RH != s_twi1_hygro_S_RH) {
    3d5e:	e1 14       	cp	r14, r1
    3d60:	f1 04       	cpc	r15, r1
    3d62:	a1 f0       	breq	.+40     	; 0x3d8c <task_twi1_onboard+0xc2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3d64:	8f b7       	in	r24, 0x3f	; 63
    3d66:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    3d68:	f8 94       	cli
	return flags;
    3d6a:	0d 81       	ldd	r16, Y+5	; 0x05
		int16_t rh_100 = (int16_t)( ((int32_t)l_twi1_hygro_S_RH * 10000) / 0xFFFF);

		flags = cpu_irq_save();
		g_twi1_hygro_RH_100 = rh_100;
    3d6c:	97 01       	movw	r18, r14
    3d6e:	a0 e1       	ldi	r26, 0x10	; 16
    3d70:	b7 e2       	ldi	r27, 0x27	; 39
    3d72:	0e 94 76 51 	call	0xa2ec	; 0xa2ec <__umulhisi3>
    3d76:	2f ef       	ldi	r18, 0xFF	; 255
    3d78:	3f ef       	ldi	r19, 0xFF	; 255
    3d7a:	40 e0       	ldi	r20, 0x00	; 0
    3d7c:	50 e0       	ldi	r21, 0x00	; 0
    3d7e:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    3d82:	20 93 12 29 	sts	0x2912, r18	; 0x802912 <g_twi1_hygro_RH_100>
    3d86:	30 93 13 29 	sts	0x2913, r19	; 0x802913 <g_twi1_hygro_RH_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3d8a:	0f bf       	out	0x3f, r16	; 63

	if (l_twi1_hygro_valid) {
		task_twi1_hygro(now);
	}

	if (l_twi1_gyro_valid) {
    3d8c:	11 23       	and	r17, r17
    3d8e:	09 f4       	brne	.+2      	; 0x3d92 <task_twi1_onboard+0xc8>
    3d90:	e5 c1       	rjmp	.+970    	; 0x415c <task_twi1_onboard+0x492>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3d92:	8f b7       	in	r24, 0x3f	; 63
    3d94:	8c 83       	std	Y+4, r24	; 0x04
	cpu_irq_disable();
    3d96:	f8 94       	cli
	return flags;
    3d98:	8c 81       	ldd	r24, Y+4	; 0x04
}

static void task_twi1_gyro(uint32_t now)
{	// Calculations for the presentation layer
	irqflags_t flags = cpu_irq_save();
	int16_t	l_twi1_gyro_1_accel_x	= g_twi1_gyro_1_accel_x;
    3d9a:	a0 91 71 29 	lds	r26, 0x2971	; 0x802971 <g_twi1_gyro_1_accel_x>
    3d9e:	b0 91 72 29 	lds	r27, 0x2972	; 0x802972 <g_twi1_gyro_1_accel_x+0x1>
	int16_t	l_twi1_gyro_1_accel_y	= g_twi1_gyro_1_accel_y;
    3da2:	80 90 6f 29 	lds	r8, 0x296F	; 0x80296f <g_twi1_gyro_1_accel_y>
    3da6:	90 90 70 29 	lds	r9, 0x2970	; 0x802970 <g_twi1_gyro_1_accel_y+0x1>
	int16_t	l_twi1_gyro_1_accel_z	= g_twi1_gyro_1_accel_z;
    3daa:	a0 90 6d 29 	lds	r10, 0x296D	; 0x80296d <g_twi1_gyro_1_accel_z>
    3dae:	b0 90 6e 29 	lds	r11, 0x296E	; 0x80296e <g_twi1_gyro_1_accel_z+0x1>
	int16_t l_twi1_gyro_1_gyro_x	= g_twi1_gyro_1_gyro_x;
    3db2:	40 91 65 29 	lds	r20, 0x2965	; 0x802965 <g_twi1_gyro_1_gyro_x>
    3db6:	50 91 66 29 	lds	r21, 0x2966	; 0x802966 <g_twi1_gyro_1_gyro_x+0x1>
	int16_t l_twi1_gyro_1_gyro_y	= g_twi1_gyro_1_gyro_y;
    3dba:	c0 90 63 29 	lds	r12, 0x2963	; 0x802963 <g_twi1_gyro_1_gyro_y>
    3dbe:	d0 90 64 29 	lds	r13, 0x2964	; 0x802964 <g_twi1_gyro_1_gyro_y+0x1>
	int16_t l_twi1_gyro_1_gyro_z	= g_twi1_gyro_1_gyro_z;
    3dc2:	20 90 61 29 	lds	r2, 0x2961	; 0x802961 <g_twi1_gyro_1_gyro_z>
    3dc6:	30 90 62 29 	lds	r3, 0x2962	; 0x802962 <g_twi1_gyro_1_gyro_z+0x1>
    3dca:	2b a2       	std	Y+35, r2	; 0x23
    3dcc:	3c a2       	std	Y+36, r3	; 0x24
	int16_t	l_twi1_gyro_1_temp		= g_twi1_gyro_1_temp;
    3dce:	40 90 77 29 	lds	r4, 0x2977	; 0x802977 <g_twi1_gyro_1_temp>
    3dd2:	50 90 78 29 	lds	r5, 0x2978	; 0x802978 <g_twi1_gyro_1_temp+0x1>
    3dd6:	49 86       	std	Y+9, r4	; 0x09
    3dd8:	5a 86       	std	Y+10, r5	; 0x0a
	int16_t l_twi1_gyro_2_mag_x		= g_twi1_gyro_2_mag_x;
    3dda:	00 91 4f 29 	lds	r16, 0x294F	; 0x80294f <g_twi1_gyro_2_mag_x>
    3dde:	10 91 50 29 	lds	r17, 0x2950	; 0x802950 <g_twi1_gyro_2_mag_x+0x1>
	int16_t l_twi1_gyro_2_mag_y		= g_twi1_gyro_2_mag_y;
    3de2:	e0 91 4d 29 	lds	r30, 0x294D	; 0x80294d <g_twi1_gyro_2_mag_y>
    3de6:	f0 91 4e 29 	lds	r31, 0x294E	; 0x80294e <g_twi1_gyro_2_mag_y+0x1>
	int16_t l_twi1_gyro_2_mag_z		= g_twi1_gyro_2_mag_z;
    3dea:	e0 90 4b 29 	lds	r14, 0x294B	; 0x80294b <g_twi1_gyro_2_mag_z>
    3dee:	f0 90 4c 29 	lds	r15, 0x294C	; 0x80294c <g_twi1_gyro_2_mag_z+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3df2:	8f bf       	out	0x3f, r24	; 63


inline
static int16_t calc_gyro1_accel_raw2mg(int16_t raw)
{
	return ((1000L * TWI1_SLAVE_GYRO_DTA_1_ACCEL_CONFIG__02G)		* raw) >> 15;
    3df4:	20 ed       	ldi	r18, 0xD0	; 208
    3df6:	37 e0       	ldi	r19, 0x07	; 7
    3df8:	0e 94 85 51 	call	0xa30a	; 0xa30a <__usmulhisi3>
    3dfc:	1b 01       	movw	r2, r22
    3dfe:	2c 01       	movw	r4, r24
    3e00:	01 2e       	mov	r0, r17
    3e02:	1f e0       	ldi	r17, 0x0F	; 15
    3e04:	55 94       	asr	r5
    3e06:	47 94       	ror	r4
    3e08:	37 94       	ror	r3
    3e0a:	27 94       	ror	r2
    3e0c:	1a 95       	dec	r17
    3e0e:	d1 f7       	brne	.-12     	; 0x3e04 <task_twi1_onboard+0x13a>
    3e10:	10 2d       	mov	r17, r0
    3e12:	2d 8a       	std	Y+21, r2	; 0x15
    3e14:	3e 8a       	std	Y+22, r3	; 0x16
    3e16:	4f 8a       	std	Y+23, r4	; 0x17
    3e18:	58 8e       	std	Y+24, r5	; 0x18
    3e1a:	d4 01       	movw	r26, r8
    3e1c:	0e 94 85 51 	call	0xa30a	; 0xa30a <__usmulhisi3>
    3e20:	1b 01       	movw	r2, r22
    3e22:	2c 01       	movw	r4, r24
    3e24:	01 2e       	mov	r0, r17
    3e26:	1f e0       	ldi	r17, 0x0F	; 15
    3e28:	55 94       	asr	r5
    3e2a:	47 94       	ror	r4
    3e2c:	37 94       	ror	r3
    3e2e:	27 94       	ror	r2
    3e30:	1a 95       	dec	r17
    3e32:	d1 f7       	brne	.-12     	; 0x3e28 <task_twi1_onboard+0x15e>
    3e34:	10 2d       	mov	r17, r0
    3e36:	29 8e       	std	Y+25, r2	; 0x19
    3e38:	3a 8e       	std	Y+26, r3	; 0x1a
    3e3a:	4b 8e       	std	Y+27, r4	; 0x1b
    3e3c:	5c 8e       	std	Y+28, r5	; 0x1c
    3e3e:	d5 01       	movw	r26, r10
    3e40:	0e 94 85 51 	call	0xa30a	; 0xa30a <__usmulhisi3>
    3e44:	4b 01       	movw	r8, r22
    3e46:	5c 01       	movw	r10, r24
    3e48:	07 2e       	mov	r0, r23
    3e4a:	7f e0       	ldi	r23, 0x0F	; 15
    3e4c:	b5 94       	asr	r11
    3e4e:	a7 94       	ror	r10
    3e50:	97 94       	ror	r9
    3e52:	87 94       	ror	r8
    3e54:	7a 95       	dec	r23
    3e56:	d1 f7       	brne	.-12     	; 0x3e4c <task_twi1_onboard+0x182>
    3e58:	70 2d       	mov	r23, r0
    3e5a:	8f a2       	std	Y+39, r8	; 0x27
    3e5c:	98 a6       	std	Y+40, r9	; 0x28
    3e5e:	a9 a6       	std	Y+41, r10	; 0x29
    3e60:	ba a6       	std	Y+42, r11	; 0x2a
}

inline
static int32_t calc_gyro1_gyro_raw2mdps(int16_t raw)
{
	return ((1000L * TWI1_SLAVE_GYRO_DTA_1_GYRO_CONFIG__0250DPS)	* raw) >> 15;
    3e62:	da 01       	movw	r26, r20
    3e64:	20 e9       	ldi	r18, 0x90	; 144
    3e66:	30 ed       	ldi	r19, 0xD0	; 208
    3e68:	43 e0       	ldi	r20, 0x03	; 3
    3e6a:	50 e0       	ldi	r21, 0x00	; 0
    3e6c:	0e 94 95 51 	call	0xa32a	; 0xa32a <__mulshisi3>
    3e70:	1b 01       	movw	r2, r22
    3e72:	2c 01       	movw	r4, r24
    3e74:	01 2e       	mov	r0, r17
    3e76:	1f e0       	ldi	r17, 0x0F	; 15
    3e78:	55 94       	asr	r5
    3e7a:	47 94       	ror	r4
    3e7c:	37 94       	ror	r3
    3e7e:	27 94       	ror	r2
    3e80:	1a 95       	dec	r17
    3e82:	d1 f7       	brne	.-12     	; 0x3e78 <task_twi1_onboard+0x1ae>
    3e84:	10 2d       	mov	r17, r0
    3e86:	29 8a       	std	Y+17, r2	; 0x11
    3e88:	3a 8a       	std	Y+18, r3	; 0x12
    3e8a:	4b 8a       	std	Y+19, r4	; 0x13
    3e8c:	5c 8a       	std	Y+20, r5	; 0x14
    3e8e:	d6 01       	movw	r26, r12
    3e90:	0e 94 95 51 	call	0xa32a	; 0xa32a <__mulshisi3>
    3e94:	4b 01       	movw	r8, r22
    3e96:	5c 01       	movw	r10, r24
    3e98:	07 2e       	mov	r0, r23
    3e9a:	7f e0       	ldi	r23, 0x0F	; 15
    3e9c:	b5 94       	asr	r11
    3e9e:	a7 94       	ror	r10
    3ea0:	97 94       	ror	r9
    3ea2:	87 94       	ror	r8
    3ea4:	7a 95       	dec	r23
    3ea6:	d1 f7       	brne	.-12     	; 0x3e9c <task_twi1_onboard+0x1d2>
    3ea8:	70 2d       	mov	r23, r0
    3eaa:	8d 8e       	std	Y+29, r8	; 0x1d
    3eac:	9e 8e       	std	Y+30, r9	; 0x1e
    3eae:	af 8e       	std	Y+31, r10	; 0x1f
    3eb0:	b8 a2       	std	Y+32, r11	; 0x20
    3eb2:	ab a1       	ldd	r26, Y+35	; 0x23
    3eb4:	bc a1       	ldd	r27, Y+36	; 0x24
    3eb6:	0e 94 95 51 	call	0xa32a	; 0xa32a <__mulshisi3>
    3eba:	1b 01       	movw	r2, r22
    3ebc:	2c 01       	movw	r4, r24
    3ebe:	01 2e       	mov	r0, r17
    3ec0:	1f e0       	ldi	r17, 0x0F	; 15
    3ec2:	55 94       	asr	r5
    3ec4:	47 94       	ror	r4
    3ec6:	37 94       	ror	r3
    3ec8:	27 94       	ror	r2
    3eca:	1a 95       	dec	r17
    3ecc:	d1 f7       	brne	.-12     	; 0x3ec2 <task_twi1_onboard+0x1f8>
    3ece:	10 2d       	mov	r17, r0
    3ed0:	2b a2       	std	Y+35, r2	; 0x23
    3ed2:	3c a2       	std	Y+36, r3	; 0x24
    3ed4:	4d a2       	std	Y+37, r4	; 0x25
    3ed6:	5e a2       	std	Y+38, r5	; 0x26
	int16_t l_twi1_gyro_1_accel_y_mg	= calc_gyro1_accel_raw2mg(l_twi1_gyro_1_accel_y);
	int16_t l_twi1_gyro_1_accel_z_mg	= calc_gyro1_accel_raw2mg(l_twi1_gyro_1_accel_z);
	int32_t l_twi1_gyro_1_gyro_x_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_x);
	int32_t l_twi1_gyro_1_gyro_y_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_y);
	int32_t l_twi1_gyro_1_gyro_z_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_z);
	int32_t l_twi1_gyro_2_mag_x_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_x, g_twi1_gyro_2_asax);
    3ed8:	d0 90 53 29 	lds	r13, 0x2953	; 0x802953 <g_twi1_gyro_2_asax>
}

inline
static int32_t calc_gyro2_correct_mag_2_nT(int16_t raw, int8_t asa)
{
	if (raw >= 0) {
    3edc:	11 23       	and	r17, r17
    3ede:	0c f1       	brlt	.+66     	; 0x3f22 <task_twi1_onboard+0x258>
		//                                       asa decoding
		//                                                     rounding
		//                                                          /256
		return (((int32_t)raw * 1000 * ((int32_t)asa + 128)) + 128) >> 8;
    3ee0:	28 ee       	ldi	r18, 0xE8	; 232
    3ee2:	33 e0       	ldi	r19, 0x03	; 3
    3ee4:	d8 01       	movw	r26, r16
    3ee6:	0e 94 85 51 	call	0xa30a	; 0xa30a <__usmulhisi3>
    3eea:	9b 01       	movw	r18, r22
    3eec:	ac 01       	movw	r20, r24
    3eee:	8d 2d       	mov	r24, r13
    3ef0:	dd 0c       	add	r13, r13
    3ef2:	99 0b       	sbc	r25, r25
    3ef4:	aa 0b       	sbc	r26, r26
    3ef6:	bb 0b       	sbc	r27, r27
    3ef8:	bc 01       	movw	r22, r24
    3efa:	cd 01       	movw	r24, r26
    3efc:	60 58       	subi	r22, 0x80	; 128
    3efe:	7f 4f       	sbci	r23, 0xFF	; 255
    3f00:	8f 4f       	sbci	r24, 0xFF	; 255
    3f02:	9f 4f       	sbci	r25, 0xFF	; 255
    3f04:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulsi3>
    3f08:	dc 01       	movw	r26, r24
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	80 58       	subi	r24, 0x80	; 128
    3f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f10:	af 4f       	sbci	r26, 0xFF	; 255
    3f12:	bf 4f       	sbci	r27, 0xFF	; 255
    3f14:	29 2e       	mov	r2, r25
    3f16:	3a 2e       	mov	r3, r26
    3f18:	4b 2e       	mov	r4, r27
    3f1a:	55 24       	eor	r5, r5
    3f1c:	47 fc       	sbrc	r4, 7
    3f1e:	5a 94       	dec	r5
    3f20:	20 c0       	rjmp	.+64     	; 0x3f62 <task_twi1_onboard+0x298>
	} else {
		return (((int32_t)raw * 1000 * ((int32_t)asa + 128)) - 128) >> 8;
    3f22:	28 ee       	ldi	r18, 0xE8	; 232
    3f24:	33 e0       	ldi	r19, 0x03	; 3
    3f26:	d8 01       	movw	r26, r16
    3f28:	0e 94 85 51 	call	0xa30a	; 0xa30a <__usmulhisi3>
    3f2c:	9b 01       	movw	r18, r22
    3f2e:	ac 01       	movw	r20, r24
    3f30:	8d 2d       	mov	r24, r13
    3f32:	dd 0c       	add	r13, r13
    3f34:	99 0b       	sbc	r25, r25
    3f36:	aa 0b       	sbc	r26, r26
    3f38:	bb 0b       	sbc	r27, r27
    3f3a:	bc 01       	movw	r22, r24
    3f3c:	cd 01       	movw	r24, r26
    3f3e:	60 58       	subi	r22, 0x80	; 128
    3f40:	7f 4f       	sbci	r23, 0xFF	; 255
    3f42:	8f 4f       	sbci	r24, 0xFF	; 255
    3f44:	9f 4f       	sbci	r25, 0xFF	; 255
    3f46:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulsi3>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	80 58       	subi	r24, 0x80	; 128
    3f50:	91 09       	sbc	r25, r1
    3f52:	a1 09       	sbc	r26, r1
    3f54:	b1 09       	sbc	r27, r1
    3f56:	29 2e       	mov	r2, r25
    3f58:	3a 2e       	mov	r3, r26
    3f5a:	4b 2e       	mov	r4, r27
    3f5c:	55 24       	eor	r5, r5
    3f5e:	47 fc       	sbrc	r4, 7
    3f60:	5a 94       	dec	r5
	int16_t l_twi1_gyro_1_accel_z_mg	= calc_gyro1_accel_raw2mg(l_twi1_gyro_1_accel_z);
	int32_t l_twi1_gyro_1_gyro_x_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_x);
	int32_t l_twi1_gyro_1_gyro_y_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_y);
	int32_t l_twi1_gyro_1_gyro_z_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_z);
	int32_t l_twi1_gyro_2_mag_x_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_x, g_twi1_gyro_2_asax);
	int32_t l_twi1_gyro_2_mag_y_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_y, g_twi1_gyro_2_asay);
    3f62:	10 91 52 29 	lds	r17, 0x2952	; 0x802952 <g_twi1_gyro_2_asay>
}

inline
static int32_t calc_gyro2_correct_mag_2_nT(int16_t raw, int8_t asa)
{
	if (raw >= 0) {
    3f66:	ff 23       	and	r31, r31
    3f68:	14 f1       	brlt	.+68     	; 0x3fae <task_twi1_onboard+0x2e4>
		//                                       asa decoding
		//                                                     rounding
		//                                                          /256
		return (((int32_t)raw * 1000 * ((int32_t)asa + 128)) + 128) >> 8;
    3f6a:	28 ee       	ldi	r18, 0xE8	; 232
    3f6c:	33 e0       	ldi	r19, 0x03	; 3
    3f6e:	df 01       	movw	r26, r30
    3f70:	0e 94 85 51 	call	0xa30a	; 0xa30a <__usmulhisi3>
    3f74:	9b 01       	movw	r18, r22
    3f76:	ac 01       	movw	r20, r24
    3f78:	81 2f       	mov	r24, r17
    3f7a:	11 0f       	add	r17, r17
    3f7c:	99 0b       	sbc	r25, r25
    3f7e:	aa 0b       	sbc	r26, r26
    3f80:	bb 0b       	sbc	r27, r27
    3f82:	bc 01       	movw	r22, r24
    3f84:	cd 01       	movw	r24, r26
    3f86:	60 58       	subi	r22, 0x80	; 128
    3f88:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8e:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulsi3>
    3f92:	4b 01       	movw	r8, r22
    3f94:	5c 01       	movw	r10, r24
    3f96:	20 e8       	ldi	r18, 0x80	; 128
    3f98:	82 0e       	add	r8, r18
    3f9a:	91 1c       	adc	r9, r1
    3f9c:	a1 1c       	adc	r10, r1
    3f9e:	b1 1c       	adc	r11, r1
    3fa0:	89 2c       	mov	r8, r9
    3fa2:	9a 2c       	mov	r9, r10
    3fa4:	ab 2c       	mov	r10, r11
    3fa6:	bb 24       	eor	r11, r11
    3fa8:	a7 fc       	sbrc	r10, 7
    3faa:	ba 94       	dec	r11
    3fac:	21 c0       	rjmp	.+66     	; 0x3ff0 <task_twi1_onboard+0x326>
	} else {
		return (((int32_t)raw * 1000 * ((int32_t)asa + 128)) - 128) >> 8;
    3fae:	28 ee       	ldi	r18, 0xE8	; 232
    3fb0:	33 e0       	ldi	r19, 0x03	; 3
    3fb2:	df 01       	movw	r26, r30
    3fb4:	0e 94 85 51 	call	0xa30a	; 0xa30a <__usmulhisi3>
    3fb8:	9b 01       	movw	r18, r22
    3fba:	ac 01       	movw	r20, r24
    3fbc:	81 2f       	mov	r24, r17
    3fbe:	11 0f       	add	r17, r17
    3fc0:	99 0b       	sbc	r25, r25
    3fc2:	aa 0b       	sbc	r26, r26
    3fc4:	bb 0b       	sbc	r27, r27
    3fc6:	bc 01       	movw	r22, r24
    3fc8:	cd 01       	movw	r24, r26
    3fca:	60 58       	subi	r22, 0x80	; 128
    3fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    3fce:	8f 4f       	sbci	r24, 0xFF	; 255
    3fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd2:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulsi3>
    3fd6:	4b 01       	movw	r8, r22
    3fd8:	5c 01       	movw	r10, r24
    3fda:	30 e8       	ldi	r19, 0x80	; 128
    3fdc:	83 1a       	sub	r8, r19
    3fde:	91 08       	sbc	r9, r1
    3fe0:	a1 08       	sbc	r10, r1
    3fe2:	b1 08       	sbc	r11, r1
    3fe4:	89 2c       	mov	r8, r9
    3fe6:	9a 2c       	mov	r9, r10
    3fe8:	ab 2c       	mov	r10, r11
    3fea:	bb 24       	eor	r11, r11
    3fec:	a7 fc       	sbrc	r10, 7
    3fee:	ba 94       	dec	r11
	int32_t l_twi1_gyro_1_gyro_x_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_x);
	int32_t l_twi1_gyro_1_gyro_y_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_y);
	int32_t l_twi1_gyro_1_gyro_z_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_z);
	int32_t l_twi1_gyro_2_mag_x_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_x, g_twi1_gyro_2_asax);
	int32_t l_twi1_gyro_2_mag_y_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_y, g_twi1_gyro_2_asay);
	int32_t l_twi1_gyro_2_mag_z_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_z, g_twi1_gyro_2_asaz);
    3ff0:	e0 91 51 29 	lds	r30, 0x2951	; 0x802951 <g_twi1_gyro_2_asaz>
}

inline
static int32_t calc_gyro2_correct_mag_2_nT(int16_t raw, int8_t asa)
{
	if (raw >= 0) {
    3ff4:	ff 20       	and	r15, r15
    3ff6:	14 f1       	brlt	.+68     	; 0x403c <task_twi1_onboard+0x372>
		//                                       asa decoding
		//                                                     rounding
		//                                                          /256
		return (((int32_t)raw * 1000 * ((int32_t)asa + 128)) + 128) >> 8;
    3ff8:	28 ee       	ldi	r18, 0xE8	; 232
    3ffa:	33 e0       	ldi	r19, 0x03	; 3
    3ffc:	d7 01       	movw	r26, r14
    3ffe:	0e 94 85 51 	call	0xa30a	; 0xa30a <__usmulhisi3>
    4002:	9b 01       	movw	r18, r22
    4004:	ac 01       	movw	r20, r24
    4006:	8e 2f       	mov	r24, r30
    4008:	ee 0f       	add	r30, r30
    400a:	99 0b       	sbc	r25, r25
    400c:	aa 0b       	sbc	r26, r26
    400e:	bb 0b       	sbc	r27, r27
    4010:	bc 01       	movw	r22, r24
    4012:	cd 01       	movw	r24, r26
    4014:	60 58       	subi	r22, 0x80	; 128
    4016:	7f 4f       	sbci	r23, 0xFF	; 255
    4018:	8f 4f       	sbci	r24, 0xFF	; 255
    401a:	9f 4f       	sbci	r25, 0xFF	; 255
    401c:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulsi3>
    4020:	6b 01       	movw	r12, r22
    4022:	7c 01       	movw	r14, r24
    4024:	40 e8       	ldi	r20, 0x80	; 128
    4026:	c4 0e       	add	r12, r20
    4028:	d1 1c       	adc	r13, r1
    402a:	e1 1c       	adc	r14, r1
    402c:	f1 1c       	adc	r15, r1
    402e:	cd 2c       	mov	r12, r13
    4030:	de 2c       	mov	r13, r14
    4032:	ef 2c       	mov	r14, r15
    4034:	ff 24       	eor	r15, r15
    4036:	e7 fc       	sbrc	r14, 7
    4038:	fa 94       	dec	r15
    403a:	21 c0       	rjmp	.+66     	; 0x407e <task_twi1_onboard+0x3b4>
	} else {
		return (((int32_t)raw * 1000 * ((int32_t)asa + 128)) - 128) >> 8;
    403c:	28 ee       	ldi	r18, 0xE8	; 232
    403e:	33 e0       	ldi	r19, 0x03	; 3
    4040:	d7 01       	movw	r26, r14
    4042:	0e 94 85 51 	call	0xa30a	; 0xa30a <__usmulhisi3>
    4046:	9b 01       	movw	r18, r22
    4048:	ac 01       	movw	r20, r24
    404a:	8e 2f       	mov	r24, r30
    404c:	ee 0f       	add	r30, r30
    404e:	99 0b       	sbc	r25, r25
    4050:	aa 0b       	sbc	r26, r26
    4052:	bb 0b       	sbc	r27, r27
    4054:	bc 01       	movw	r22, r24
    4056:	cd 01       	movw	r24, r26
    4058:	60 58       	subi	r22, 0x80	; 128
    405a:	7f 4f       	sbci	r23, 0xFF	; 255
    405c:	8f 4f       	sbci	r24, 0xFF	; 255
    405e:	9f 4f       	sbci	r25, 0xFF	; 255
    4060:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulsi3>
    4064:	6b 01       	movw	r12, r22
    4066:	7c 01       	movw	r14, r24
    4068:	50 e8       	ldi	r21, 0x80	; 128
    406a:	c5 1a       	sub	r12, r21
    406c:	d1 08       	sbc	r13, r1
    406e:	e1 08       	sbc	r14, r1
    4070:	f1 08       	sbc	r15, r1
    4072:	cd 2c       	mov	r12, r13
    4074:	de 2c       	mov	r13, r14
    4076:	ef 2c       	mov	r14, r15
    4078:	ff 24       	eor	r15, r15
    407a:	e7 fc       	sbrc	r14, 7
    407c:	fa 94       	dec	r15
}

inline
static int16_t calc_gyro1_temp_raw2C100(int16_t raw)
{
	return (int16_t) (((100L * (int32_t)(raw - g_twi1_gyro_1_temp_RTofs)) / (int32_t)g_twi1_gyro_1_temp_sens) + 2100);
    407e:	80 91 75 29 	lds	r24, 0x2975	; 0x802975 <g_twi1_gyro_1_temp_RTofs>
    4082:	90 91 76 29 	lds	r25, 0x2976	; 0x802976 <g_twi1_gyro_1_temp_RTofs+0x1>
    4086:	a9 85       	ldd	r26, Y+9	; 0x09
    4088:	ba 85       	ldd	r27, Y+10	; 0x0a
    408a:	a8 1b       	sub	r26, r24
    408c:	b9 0b       	sbc	r27, r25
    408e:	24 e6       	ldi	r18, 0x64	; 100
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	0e 94 85 51 	call	0xa30a	; 0xa30a <__usmulhisi3>
    4096:	20 91 45 20 	lds	r18, 0x2045	; 0x802045 <g_twi1_gyro_1_temp_sens>
    409a:	30 91 46 20 	lds	r19, 0x2046	; 0x802046 <g_twi1_gyro_1_temp_sens+0x1>
    409e:	03 2e       	mov	r0, r19
    40a0:	00 0c       	add	r0, r0
    40a2:	44 0b       	sbc	r20, r20
    40a4:	55 0b       	sbc	r21, r21
    40a6:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    40aa:	2c 5c       	subi	r18, 0xCC	; 204
    40ac:	37 4f       	sbci	r19, 0xF7	; 247

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    40ae:	8f b7       	in	r24, 0x3f	; 63
    40b0:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
    40b2:	f8 94       	cli
	return flags;
    40b4:	8b 81       	ldd	r24, Y+3	; 0x03
	int32_t l_twi1_gyro_2_mag_y_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_y, g_twi1_gyro_2_asay);
	int32_t l_twi1_gyro_2_mag_z_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_z, g_twi1_gyro_2_asaz);
	int16_t	l_twi1_gyro_1_temp_deg_100	= calc_gyro1_temp_raw2C100(l_twi1_gyro_1_temp);

	flags = cpu_irq_save();
	g_twi1_gyro_1_accel_x_mg	= l_twi1_gyro_1_accel_x_mg;
    40b6:	6d 89       	ldd	r22, Y+21	; 0x15
    40b8:	7e 89       	ldd	r23, Y+22	; 0x16
    40ba:	60 93 6b 29 	sts	0x296B, r22	; 0x80296b <g_twi1_gyro_1_accel_x_mg>
    40be:	70 93 6c 29 	sts	0x296C, r23	; 0x80296c <g_twi1_gyro_1_accel_x_mg+0x1>
	g_twi1_gyro_1_accel_y_mg	= l_twi1_gyro_1_accel_y_mg;
    40c2:	a9 8d       	ldd	r26, Y+25	; 0x19
    40c4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    40c6:	a0 93 69 29 	sts	0x2969, r26	; 0x802969 <g_twi1_gyro_1_accel_y_mg>
    40ca:	b0 93 6a 29 	sts	0x296A, r27	; 0x80296a <g_twi1_gyro_1_accel_y_mg+0x1>
	g_twi1_gyro_1_accel_z_mg	= l_twi1_gyro_1_accel_z_mg;
    40ce:	ef a1       	ldd	r30, Y+39	; 0x27
    40d0:	f8 a5       	ldd	r31, Y+40	; 0x28
    40d2:	e0 93 67 29 	sts	0x2967, r30	; 0x802967 <g_twi1_gyro_1_accel_z_mg>
    40d6:	f0 93 68 29 	sts	0x2968, r31	; 0x802968 <g_twi1_gyro_1_accel_z_mg+0x1>
	g_twi1_gyro_1_gyro_x_mdps	= l_twi1_gyro_1_gyro_x_mdps;
    40da:	49 89       	ldd	r20, Y+17	; 0x11
    40dc:	5a 89       	ldd	r21, Y+18	; 0x12
    40de:	6b 89       	ldd	r22, Y+19	; 0x13
    40e0:	7c 89       	ldd	r23, Y+20	; 0x14
    40e2:	40 93 5d 29 	sts	0x295D, r20	; 0x80295d <g_twi1_gyro_1_gyro_x_mdps>
    40e6:	50 93 5e 29 	sts	0x295E, r21	; 0x80295e <g_twi1_gyro_1_gyro_x_mdps+0x1>
    40ea:	60 93 5f 29 	sts	0x295F, r22	; 0x80295f <g_twi1_gyro_1_gyro_x_mdps+0x2>
    40ee:	70 93 60 29 	sts	0x2960, r23	; 0x802960 <g_twi1_gyro_1_gyro_x_mdps+0x3>
	g_twi1_gyro_1_gyro_y_mdps	= l_twi1_gyro_1_gyro_y_mdps;
    40f2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    40f4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    40f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    40f8:	78 a1       	ldd	r23, Y+32	; 0x20
    40fa:	40 93 59 29 	sts	0x2959, r20	; 0x802959 <g_twi1_gyro_1_gyro_y_mdps>
    40fe:	50 93 5a 29 	sts	0x295A, r21	; 0x80295a <g_twi1_gyro_1_gyro_y_mdps+0x1>
    4102:	60 93 5b 29 	sts	0x295B, r22	; 0x80295b <g_twi1_gyro_1_gyro_y_mdps+0x2>
    4106:	70 93 5c 29 	sts	0x295C, r23	; 0x80295c <g_twi1_gyro_1_gyro_y_mdps+0x3>
	g_twi1_gyro_1_gyro_z_mdps	= l_twi1_gyro_1_gyro_z_mdps;
    410a:	4b a1       	ldd	r20, Y+35	; 0x23
    410c:	5c a1       	ldd	r21, Y+36	; 0x24
    410e:	6d a1       	ldd	r22, Y+37	; 0x25
    4110:	7e a1       	ldd	r23, Y+38	; 0x26
    4112:	40 93 55 29 	sts	0x2955, r20	; 0x802955 <g_twi1_gyro_1_gyro_z_mdps>
    4116:	50 93 56 29 	sts	0x2956, r21	; 0x802956 <g_twi1_gyro_1_gyro_z_mdps+0x1>
    411a:	60 93 57 29 	sts	0x2957, r22	; 0x802957 <g_twi1_gyro_1_gyro_z_mdps+0x2>
    411e:	70 93 58 29 	sts	0x2958, r23	; 0x802958 <g_twi1_gyro_1_gyro_z_mdps+0x3>
	g_twi1_gyro_2_mag_x_nT		= l_twi1_gyro_2_mag_x_nT;
    4122:	20 92 47 29 	sts	0x2947, r2	; 0x802947 <g_twi1_gyro_2_mag_x_nT>
    4126:	30 92 48 29 	sts	0x2948, r3	; 0x802948 <g_twi1_gyro_2_mag_x_nT+0x1>
    412a:	40 92 49 29 	sts	0x2949, r4	; 0x802949 <g_twi1_gyro_2_mag_x_nT+0x2>
    412e:	50 92 4a 29 	sts	0x294A, r5	; 0x80294a <g_twi1_gyro_2_mag_x_nT+0x3>
	g_twi1_gyro_2_mag_y_nT		= l_twi1_gyro_2_mag_y_nT;
    4132:	80 92 43 29 	sts	0x2943, r8	; 0x802943 <g_twi1_gyro_2_mag_y_nT>
    4136:	90 92 44 29 	sts	0x2944, r9	; 0x802944 <g_twi1_gyro_2_mag_y_nT+0x1>
    413a:	a0 92 45 29 	sts	0x2945, r10	; 0x802945 <g_twi1_gyro_2_mag_y_nT+0x2>
    413e:	b0 92 46 29 	sts	0x2946, r11	; 0x802946 <g_twi1_gyro_2_mag_y_nT+0x3>
	g_twi1_gyro_2_mag_z_nT		= l_twi1_gyro_2_mag_z_nT;
    4142:	c0 92 3f 29 	sts	0x293F, r12	; 0x80293f <g_twi1_gyro_2_mag_z_nT>
    4146:	d0 92 40 29 	sts	0x2940, r13	; 0x802940 <g_twi1_gyro_2_mag_z_nT+0x1>
    414a:	e0 92 41 29 	sts	0x2941, r14	; 0x802941 <g_twi1_gyro_2_mag_z_nT+0x2>
    414e:	f0 92 42 29 	sts	0x2942, r15	; 0x802942 <g_twi1_gyro_2_mag_z_nT+0x3>
	g_twi1_gyro_1_temp_deg_100	= l_twi1_gyro_1_temp_deg_100;
    4152:	20 93 73 29 	sts	0x2973, r18	; 0x802973 <g_twi1_gyro_1_temp_deg_100>
    4156:	30 93 74 29 	sts	0x2974, r19	; 0x802974 <g_twi1_gyro_1_temp_deg_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    415a:	8f bf       	out	0x3f, r24	; 63

	if (l_twi1_gyro_valid) {
		task_twi1_gyro(now);
	}

	if (l_twi1_baro_valid) {
    415c:	77 20       	and	r7, r7
    415e:	09 f4       	brne	.+2      	; 0x4162 <task_twi1_onboard+0x498>
    4160:	23 c2       	rjmp	.+1094   	; 0x45a8 <task_twi1_onboard+0x8de>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4162:	8f b7       	in	r24, 0x3f	; 63
    4164:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    4166:	f8 94       	cli
	return flags;
    4168:	8a 81       	ldd	r24, Y+2	; 0x02
{	// Calculations for the presentation layer
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	irqflags_t flags = cpu_irq_save();
	uint32_t l_twi1_baro_d1 = g_twi1_baro_d1;
    416a:	20 90 28 29 	lds	r2, 0x2928	; 0x802928 <g_twi1_baro_d1>
    416e:	30 90 29 29 	lds	r3, 0x2929	; 0x802929 <g_twi1_baro_d1+0x1>
    4172:	40 90 2a 29 	lds	r4, 0x292A	; 0x80292a <g_twi1_baro_d1+0x2>
    4176:	50 90 2b 29 	lds	r5, 0x292B	; 0x80292b <g_twi1_baro_d1+0x3>
    417a:	2b a2       	std	Y+35, r2	; 0x23
    417c:	3c a2       	std	Y+36, r3	; 0x24
    417e:	4d a2       	std	Y+37, r4	; 0x25
    4180:	5e a2       	std	Y+38, r5	; 0x26
	uint32_t l_twi1_baro_d2 = g_twi1_baro_d2;
    4182:	40 91 24 29 	lds	r20, 0x2924	; 0x802924 <g_twi1_baro_d2>
    4186:	50 91 25 29 	lds	r21, 0x2925	; 0x802925 <g_twi1_baro_d2+0x1>
    418a:	60 91 26 29 	lds	r22, 0x2926	; 0x802926 <g_twi1_baro_d2+0x2>
    418e:	70 91 27 29 	lds	r23, 0x2927	; 0x802927 <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4192:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	/* Calculate and present Baro and Temp values when a different measurement has arrived */
	if ((l_twi1_baro_d1 != s_twi1_baro_d1) || (l_twi1_baro_d2 != s_twi1_baro_d2)) {
    4194:	23 28       	or	r2, r3
    4196:	24 28       	or	r2, r4
    4198:	25 28       	or	r2, r5
    419a:	31 f4       	brne	.+12     	; 0x41a8 <task_twi1_onboard+0x4de>
    419c:	41 15       	cp	r20, r1
    419e:	51 05       	cpc	r21, r1
    41a0:	61 05       	cpc	r22, r1
    41a2:	71 05       	cpc	r23, r1
    41a4:	09 f4       	brne	.+2      	; 0x41a8 <task_twi1_onboard+0x4de>
    41a6:	00 c2       	rjmp	.+1024   	; 0x45a8 <task_twi1_onboard+0x8de>
		int32_t dT = (int32_t)l_twi1_baro_d2 - ((int32_t)g_twi1_baro_c[5] << 8);
    41a8:	0f 2e       	mov	r0, r31
    41aa:	fc e2       	ldi	r31, 0x2C	; 44
    41ac:	2f 2e       	mov	r2, r31
    41ae:	f9 e2       	ldi	r31, 0x29	; 41
    41b0:	3f 2e       	mov	r3, r31
    41b2:	f0 2d       	mov	r31, r0
		int32_t temp_p20 = (int32_t)(((int64_t)dT * g_twi1_baro_c[6]) >> 23);
    41b4:	d1 01       	movw	r26, r2
    41b6:	1a 96       	adiw	r26, 0x0a	; 10
    41b8:	8d 91       	ld	r24, X+
    41ba:	9c 91       	ld	r25, X
    41bc:	1b 97       	sbiw	r26, 0x0b	; 11
    41be:	a0 e0       	ldi	r26, 0x00	; 0
    41c0:	b0 e0       	ldi	r27, 0x00	; 0
    41c2:	ba 2f       	mov	r27, r26
    41c4:	a9 2f       	mov	r26, r25
    41c6:	98 2f       	mov	r25, r24
    41c8:	88 27       	eor	r24, r24
    41ca:	2a 01       	movw	r4, r20
    41cc:	3b 01       	movw	r6, r22
    41ce:	48 1a       	sub	r4, r24
    41d0:	59 0a       	sbc	r5, r25
    41d2:	6a 0a       	sbc	r6, r26
    41d4:	7b 0a       	sbc	r7, r27
    41d6:	53 01       	movw	r10, r6
    41d8:	42 01       	movw	r8, r4
    41da:	bb 0c       	add	r11, r11
    41dc:	88 08       	sbc	r8, r8
    41de:	98 2c       	mov	r9, r8
    41e0:	54 01       	movw	r10, r8
    41e2:	89 86       	std	Y+9, r8	; 0x09
    41e4:	9a 86       	std	Y+10, r9	; 0x0a
    41e6:	ab 86       	std	Y+11, r10	; 0x0b
    41e8:	bc 86       	std	Y+12, r11	; 0x0c
    41ea:	d1 01       	movw	r26, r2
    41ec:	1c 96       	adiw	r26, 0x0c	; 12
    41ee:	4d 91       	ld	r20, X+
    41f0:	5c 91       	ld	r21, X
    41f2:	1d 97       	sbiw	r26, 0x0d	; 13
    41f4:	a4 2c       	mov	r10, r4
    41f6:	b5 2c       	mov	r11, r5
    41f8:	c6 2c       	mov	r12, r6
    41fa:	d7 2c       	mov	r13, r7
    41fc:	e9 84       	ldd	r14, Y+9	; 0x09
    41fe:	fe 2c       	mov	r15, r14
    4200:	0e 2d       	mov	r16, r14
    4202:	1e 2d       	mov	r17, r14
    4204:	24 2f       	mov	r18, r20
    4206:	35 2f       	mov	r19, r21
    4208:	40 e0       	ldi	r20, 0x00	; 0
    420a:	50 e0       	ldi	r21, 0x00	; 0
    420c:	60 e0       	ldi	r22, 0x00	; 0
    420e:	70 e0       	ldi	r23, 0x00	; 0
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	0e 94 9b 51 	call	0xa336	; 0xa336 <__muldi3>
    4218:	07 e1       	ldi	r16, 0x17	; 23
    421a:	0e 94 05 52 	call	0xa40a	; 0xa40a <__ashrdi3>
    421e:	29 8b       	std	Y+17, r18	; 0x11
    4220:	3a 8b       	std	Y+18, r19	; 0x12
    4222:	4b 8b       	std	Y+19, r20	; 0x13
    4224:	5c 8b       	std	Y+20, r21	; 0x14
    4226:	89 88       	ldd	r8, Y+17	; 0x11
    4228:	9a 88       	ldd	r9, Y+18	; 0x12
    422a:	ab 88       	ldd	r10, Y+19	; 0x13
    422c:	bc 88       	ldd	r11, Y+20	; 0x14
    422e:	8a aa       	std	Y+50, r8	; 0x32
    4230:	9b aa       	std	Y+51, r9	; 0x33
    4232:	ac aa       	std	Y+52, r10	; 0x34
    4234:	bd aa       	std	Y+53, r11	; 0x35
		int32_t temp = temp_p20 + 2000L;
    4236:	a5 01       	movw	r20, r10
    4238:	94 01       	movw	r18, r8
    423a:	20 53       	subi	r18, 0x30	; 48
    423c:	38 4f       	sbci	r19, 0xF8	; 248
    423e:	4f 4f       	sbci	r20, 0xFF	; 255
    4240:	5f 4f       	sbci	r21, 0xFF	; 255
    4242:	2d 8f       	std	Y+29, r18	; 0x1d
    4244:	3e 8f       	std	Y+30, r19	; 0x1e
    4246:	4f 8f       	std	Y+31, r20	; 0x1f
    4248:	58 a3       	std	Y+32, r21	; 0x20
		int64_t off  = ((int64_t)g_twi1_baro_c[2] << 17) + (((int64_t)g_twi1_baro_c[4] * dT) >> 6);
    424a:	d1 01       	movw	r26, r2
    424c:	18 96       	adiw	r26, 0x08	; 8
    424e:	4d 91       	ld	r20, X+
    4250:	5c 91       	ld	r21, X
    4252:	19 97       	sbiw	r26, 0x09	; 9
    4254:	a4 2c       	mov	r10, r4
    4256:	b5 2c       	mov	r11, r5
    4258:	fe 2c       	mov	r15, r14
    425a:	0e 2d       	mov	r16, r14
    425c:	24 2f       	mov	r18, r20
    425e:	35 2f       	mov	r19, r21
    4260:	40 e0       	ldi	r20, 0x00	; 0
    4262:	50 e0       	ldi	r21, 0x00	; 0
    4264:	60 e0       	ldi	r22, 0x00	; 0
    4266:	70 e0       	ldi	r23, 0x00	; 0
    4268:	80 e0       	ldi	r24, 0x00	; 0
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	0e 94 9b 51 	call	0xa336	; 0xa336 <__muldi3>
    4270:	06 e0       	ldi	r16, 0x06	; 6
    4272:	0e 94 05 52 	call	0xa40a	; 0xa40a <__ashrdi3>
    4276:	2d 8b       	std	Y+21, r18	; 0x15
    4278:	39 8f       	std	Y+25, r19	; 0x19
    427a:	84 2e       	mov	r8, r20
    427c:	95 2e       	mov	r9, r21
    427e:	b6 2f       	mov	r27, r22
    4280:	a7 2f       	mov	r26, r23
    4282:	89 a3       	std	Y+33, r24	; 0x21
    4284:	9a a3       	std	Y+34, r25	; 0x22
    4286:	f1 01       	movw	r30, r2
    4288:	a4 80       	ldd	r10, Z+4	; 0x04
    428a:	b5 80       	ldd	r11, Z+5	; 0x05
    428c:	2a 2d       	mov	r18, r10
    428e:	3b 2d       	mov	r19, r11
    4290:	40 e0       	ldi	r20, 0x00	; 0
    4292:	50 e0       	ldi	r21, 0x00	; 0
    4294:	60 e0       	ldi	r22, 0x00	; 0
    4296:	70 e0       	ldi	r23, 0x00	; 0
    4298:	80 e0       	ldi	r24, 0x00	; 0
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	01 e1       	ldi	r16, 0x11	; 17
    429e:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__ashldi3>
    42a2:	a2 2e       	mov	r10, r18
    42a4:	b3 2e       	mov	r11, r19
    42a6:	c4 2e       	mov	r12, r20
    42a8:	d5 2e       	mov	r13, r21
    42aa:	e6 2e       	mov	r14, r22
    42ac:	f7 2e       	mov	r15, r23
    42ae:	08 2f       	mov	r16, r24
    42b0:	19 2f       	mov	r17, r25
    42b2:	2d 89       	ldd	r18, Y+21	; 0x15
    42b4:	39 8d       	ldd	r19, Y+25	; 0x19
    42b6:	48 2d       	mov	r20, r8
    42b8:	59 2d       	mov	r21, r9
    42ba:	6b 2f       	mov	r22, r27
    42bc:	7a 2f       	mov	r23, r26
    42be:	89 a1       	ldd	r24, Y+33	; 0x21
    42c0:	9a a1       	ldd	r25, Y+34	; 0x22
    42c2:	0e 94 23 52 	call	0xa446	; 0xa446 <__adddi3>
    42c6:	2d 8b       	std	Y+21, r18	; 0x15
    42c8:	39 8f       	std	Y+25, r19	; 0x19
    42ca:	4f a3       	std	Y+39, r20	; 0x27
    42cc:	5b a7       	std	Y+43, r21	; 0x2b
    42ce:	6c a7       	std	Y+44, r22	; 0x2c
    42d0:	7d a7       	std	Y+45, r23	; 0x2d
    42d2:	8e a7       	std	Y+46, r24	; 0x2e
    42d4:	9f a7       	std	Y+47, r25	; 0x2f
		int64_t sens = ((int64_t)g_twi1_baro_c[1] << 16) + (((int64_t)g_twi1_baro_c[3] * dT) >> 7);
    42d6:	46 81       	ldd	r20, Z+6	; 0x06
    42d8:	57 81       	ldd	r21, Z+7	; 0x07
    42da:	a4 2c       	mov	r10, r4
    42dc:	b5 2c       	mov	r11, r5
    42de:	c6 2c       	mov	r12, r6
    42e0:	d7 2c       	mov	r13, r7
    42e2:	e9 84       	ldd	r14, Y+9	; 0x09
    42e4:	fe 2c       	mov	r15, r14
    42e6:	0e 2d       	mov	r16, r14
    42e8:	1e 2d       	mov	r17, r14
    42ea:	24 2f       	mov	r18, r20
    42ec:	35 2f       	mov	r19, r21
    42ee:	40 e0       	ldi	r20, 0x00	; 0
    42f0:	50 e0       	ldi	r21, 0x00	; 0
    42f2:	60 e0       	ldi	r22, 0x00	; 0
    42f4:	70 e0       	ldi	r23, 0x00	; 0
    42f6:	80 e0       	ldi	r24, 0x00	; 0
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	0e 94 9b 51 	call	0xa336	; 0xa336 <__muldi3>
    42fe:	07 e0       	ldi	r16, 0x07	; 7
    4300:	0e 94 05 52 	call	0xa40a	; 0xa40a <__ashrdi3>
    4304:	29 a3       	std	Y+33, r18	; 0x21
    4306:	3a a3       	std	Y+34, r19	; 0x22
    4308:	84 2e       	mov	r8, r20
    430a:	95 2e       	mov	r9, r21
    430c:	b6 2f       	mov	r27, r22
    430e:	a7 2f       	mov	r26, r23
    4310:	88 ab       	std	Y+48, r24	; 0x30
    4312:	99 ab       	std	Y+49, r25	; 0x31
    4314:	f1 01       	movw	r30, r2
    4316:	a2 80       	ldd	r10, Z+2	; 0x02
    4318:	b3 80       	ldd	r11, Z+3	; 0x03
    431a:	2a 2d       	mov	r18, r10
    431c:	3b 2d       	mov	r19, r11
    431e:	40 e0       	ldi	r20, 0x00	; 0
    4320:	50 e0       	ldi	r21, 0x00	; 0
    4322:	60 e0       	ldi	r22, 0x00	; 0
    4324:	70 e0       	ldi	r23, 0x00	; 0
    4326:	80 e0       	ldi	r24, 0x00	; 0
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	00 e1       	ldi	r16, 0x10	; 16
    432c:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__ashldi3>
    4330:	a2 2e       	mov	r10, r18
    4332:	b3 2e       	mov	r11, r19
    4334:	c4 2e       	mov	r12, r20
    4336:	d5 2e       	mov	r13, r21
    4338:	e6 2e       	mov	r14, r22
    433a:	f7 2e       	mov	r15, r23
    433c:	08 2f       	mov	r16, r24
    433e:	19 2f       	mov	r17, r25
    4340:	29 a1       	ldd	r18, Y+33	; 0x21
    4342:	3a a1       	ldd	r19, Y+34	; 0x22
    4344:	48 2d       	mov	r20, r8
    4346:	59 2d       	mov	r21, r9
    4348:	6b 2f       	mov	r22, r27
    434a:	7a 2f       	mov	r23, r26
    434c:	88 a9       	ldd	r24, Y+48	; 0x30
    434e:	99 a9       	ldd	r25, Y+49	; 0x31
    4350:	0e 94 23 52 	call	0xa446	; 0xa446 <__adddi3>
    4354:	32 2e       	mov	r3, r18
    4356:	23 2e       	mov	r2, r19
    4358:	49 a3       	std	Y+33, r20	; 0x21
    435a:	5a a3       	std	Y+34, r21	; 0x22
    435c:	68 ab       	std	Y+48, r22	; 0x30
    435e:	79 ab       	std	Y+49, r23	; 0x31
    4360:	98 2e       	mov	r9, r24
    4362:	89 2e       	mov	r8, r25

		/* Low temp and very low temp corrections */
		if (temp < 2000L) {
    4364:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4366:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4368:	4f 8d       	ldd	r20, Y+31	; 0x1f
    436a:	58 a1       	ldd	r21, Y+32	; 0x20
    436c:	20 3d       	cpi	r18, 0xD0	; 208
    436e:	37 40       	sbci	r19, 0x07	; 7
    4370:	41 05       	cpc	r20, r1
    4372:	51 05       	cpc	r21, r1
    4374:	0c f0       	brlt	.+2      	; 0x4378 <task_twi1_onboard+0x6ae>
    4376:	d0 c0       	rjmp	.+416    	; 0x4518 <task_twi1_onboard+0x84e>
			int32_t t2 = (int32_t)(((int64_t)dT * (int64_t)dT) >> 31);
    4378:	a4 2c       	mov	r10, r4
    437a:	b5 2c       	mov	r11, r5
    437c:	c6 2c       	mov	r12, r6
    437e:	d7 2c       	mov	r13, r7
    4380:	e9 84       	ldd	r14, Y+9	; 0x09
    4382:	fe 2c       	mov	r15, r14
    4384:	0e 2d       	mov	r16, r14
    4386:	1e 2d       	mov	r17, r14
    4388:	24 2d       	mov	r18, r4
    438a:	35 2d       	mov	r19, r5
    438c:	46 2d       	mov	r20, r6
    438e:	57 2d       	mov	r21, r7
    4390:	60 2f       	mov	r22, r16
    4392:	70 2f       	mov	r23, r16
    4394:	80 2f       	mov	r24, r16
    4396:	9e 2d       	mov	r25, r14
    4398:	0e 94 9b 51 	call	0xa336	; 0xa336 <__muldi3>
    439c:	0f e1       	ldi	r16, 0x1F	; 31
    439e:	0e 94 05 52 	call	0xa40a	; 0xa40a <__ashrdi3>
    43a2:	29 87       	std	Y+9, r18	; 0x09
    43a4:	3a 87       	std	Y+10, r19	; 0x0a
    43a6:	4b 87       	std	Y+11, r20	; 0x0b
    43a8:	5c 87       	std	Y+12, r21	; 0x0c
			int32_t temp_p20_2 = temp_p20 * temp_p20;
    43aa:	29 89       	ldd	r18, Y+17	; 0x11
    43ac:	3a 89       	ldd	r19, Y+18	; 0x12
    43ae:	4b 89       	ldd	r20, Y+19	; 0x13
    43b0:	5c 89       	ldd	r21, Y+20	; 0x14
    43b2:	ca 01       	movw	r24, r20
    43b4:	b9 01       	movw	r22, r18
    43b6:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulsi3>
    43ba:	2b 01       	movw	r4, r22
    43bc:	3c 01       	movw	r6, r24
			int32_t off2 = (61 * temp_p20_2) >> 4;
    43be:	ad e3       	ldi	r26, 0x3D	; 61
    43c0:	b0 e0       	ldi	r27, 0x00	; 0
    43c2:	9b 01       	movw	r18, r22
    43c4:	ac 01       	movw	r20, r24
    43c6:	0e 94 8b 51 	call	0xa316	; 0xa316 <__muluhisi3>
    43ca:	7b 01       	movw	r14, r22
    43cc:	8c 01       	movw	r16, r24
    43ce:	68 94       	set
    43d0:	13 f8       	bld	r1, 3
    43d2:	15 95       	asr	r17
    43d4:	07 95       	ror	r16
    43d6:	f7 94       	ror	r15
    43d8:	e7 94       	ror	r14
    43da:	16 94       	lsr	r1
    43dc:	d1 f7       	brne	.-12     	; 0x43d2 <task_twi1_onboard+0x708>
			int32_t sens2 = temp_p20_2 << 1;
    43de:	44 0c       	add	r4, r4
    43e0:	55 1c       	adc	r5, r5
    43e2:	66 1c       	adc	r6, r6
    43e4:	77 1c       	adc	r7, r7

			if (temp < -1500L) {
    43e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43ea:	af 8d       	ldd	r26, Y+31	; 0x1f
    43ec:	b8 a1       	ldd	r27, Y+32	; 0x20
    43ee:	84 32       	cpi	r24, 0x24	; 36
    43f0:	9a 4f       	sbci	r25, 0xFA	; 250
    43f2:	af 4f       	sbci	r26, 0xFF	; 255
    43f4:	bf 4f       	sbci	r27, 0xFF	; 255
    43f6:	c4 f5       	brge	.+112    	; 0x4468 <task_twi1_onboard+0x79e>
				int32_t temp_m15 = temp + 1500L;
    43f8:	6a a9       	ldd	r22, Y+50	; 0x32
    43fa:	7b a9       	ldd	r23, Y+51	; 0x33
    43fc:	8c a9       	ldd	r24, Y+52	; 0x34
    43fe:	9d a9       	ldd	r25, Y+53	; 0x35
    4400:	64 55       	subi	r22, 0x54	; 84
    4402:	72 4f       	sbci	r23, 0xF2	; 242
    4404:	8f 4f       	sbci	r24, 0xFF	; 255
    4406:	9f 4f       	sbci	r25, 0xFF	; 255
				int32_t temp_m15_2 = temp_m15 * temp_m15;
    4408:	9b 01       	movw	r18, r22
    440a:	ac 01       	movw	r20, r24
    440c:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulsi3>
				off2  += 15 * temp_m15_2;
    4410:	9b 01       	movw	r18, r22
    4412:	ac 01       	movw	r20, r24
    4414:	22 0f       	add	r18, r18
    4416:	33 1f       	adc	r19, r19
    4418:	44 1f       	adc	r20, r20
    441a:	55 1f       	adc	r21, r21
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	82 0f       	add	r24, r18
    4422:	93 1f       	adc	r25, r19
    4424:	a4 1f       	adc	r26, r20
    4426:	b5 1f       	adc	r27, r21
    4428:	5c 01       	movw	r10, r24
    442a:	6d 01       	movw	r12, r26
    442c:	aa 0c       	add	r10, r10
    442e:	bb 1c       	adc	r11, r11
    4430:	cc 1c       	adc	r12, r12
    4432:	dd 1c       	adc	r13, r13
    4434:	aa 0c       	add	r10, r10
    4436:	bb 1c       	adc	r11, r11
    4438:	cc 1c       	adc	r12, r12
    443a:	dd 1c       	adc	r13, r13
    443c:	8a 0d       	add	r24, r10
    443e:	9b 1d       	adc	r25, r11
    4440:	ac 1d       	adc	r26, r12
    4442:	bd 1d       	adc	r27, r13
    4444:	e8 0e       	add	r14, r24
    4446:	f9 1e       	adc	r15, r25
    4448:	0a 1f       	adc	r16, r26
    444a:	1b 1f       	adc	r17, r27
				sens2 +=  8 * temp_m15_2;
    444c:	da 01       	movw	r26, r20
    444e:	c9 01       	movw	r24, r18
    4450:	88 0f       	add	r24, r24
    4452:	99 1f       	adc	r25, r25
    4454:	aa 1f       	adc	r26, r26
    4456:	bb 1f       	adc	r27, r27
    4458:	88 0f       	add	r24, r24
    445a:	99 1f       	adc	r25, r25
    445c:	aa 1f       	adc	r26, r26
    445e:	bb 1f       	adc	r27, r27
    4460:	48 0e       	add	r4, r24
    4462:	59 1e       	adc	r5, r25
    4464:	6a 1e       	adc	r6, r26
    4466:	7b 1e       	adc	r7, r27
			}
			temp -= t2;
    4468:	2d 8d       	ldd	r18, Y+29	; 0x1d
    446a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    446c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    446e:	58 a1       	ldd	r21, Y+32	; 0x20
    4470:	69 85       	ldd	r22, Y+9	; 0x09
    4472:	7a 85       	ldd	r23, Y+10	; 0x0a
    4474:	8b 85       	ldd	r24, Y+11	; 0x0b
    4476:	9c 85       	ldd	r25, Y+12	; 0x0c
    4478:	26 1b       	sub	r18, r22
    447a:	37 0b       	sbc	r19, r23
    447c:	48 0b       	sbc	r20, r24
    447e:	59 0b       	sbc	r21, r25
    4480:	2d 8f       	std	Y+29, r18	; 0x1d
    4482:	3e 8f       	std	Y+30, r19	; 0x1e
    4484:	4f 8f       	std	Y+31, r20	; 0x1f
    4486:	58 a3       	std	Y+32, r21	; 0x20
			off  -= off2;
    4488:	d8 01       	movw	r26, r16
    448a:	c7 01       	movw	r24, r14
    448c:	bb 0f       	add	r27, r27
    448e:	88 0b       	sbc	r24, r24
    4490:	98 2f       	mov	r25, r24
    4492:	dc 01       	movw	r26, r24
    4494:	89 87       	std	Y+9, r24	; 0x09
    4496:	9a 87       	std	Y+10, r25	; 0x0a
    4498:	ab 87       	std	Y+11, r26	; 0x0b
    449a:	bc 87       	std	Y+12, r27	; 0x0c
    449c:	2d 89       	ldd	r18, Y+21	; 0x15
    449e:	39 8d       	ldd	r19, Y+25	; 0x19
    44a0:	4f a1       	ldd	r20, Y+39	; 0x27
    44a2:	5b a5       	ldd	r21, Y+43	; 0x2b
    44a4:	6c a5       	ldd	r22, Y+44	; 0x2c
    44a6:	7d a5       	ldd	r23, Y+45	; 0x2d
    44a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    44aa:	9f a5       	ldd	r25, Y+47	; 0x2f
    44ac:	ae 2c       	mov	r10, r14
    44ae:	bf 2c       	mov	r11, r15
    44b0:	c0 2e       	mov	r12, r16
    44b2:	d1 2e       	mov	r13, r17
    44b4:	e9 84       	ldd	r14, Y+9	; 0x09
    44b6:	fe 2c       	mov	r15, r14
    44b8:	0e 2d       	mov	r16, r14
    44ba:	1e 2d       	mov	r17, r14
    44bc:	0e 94 2c 52 	call	0xa458	; 0xa458 <__subdi3>
    44c0:	2d 8b       	std	Y+21, r18	; 0x15
    44c2:	39 8f       	std	Y+25, r19	; 0x19
    44c4:	4f a3       	std	Y+39, r20	; 0x27
    44c6:	5b a7       	std	Y+43, r21	; 0x2b
    44c8:	6c a7       	std	Y+44, r22	; 0x2c
    44ca:	7d a7       	std	Y+45, r23	; 0x2d
    44cc:	8e a7       	std	Y+46, r24	; 0x2e
    44ce:	9f a7       	std	Y+47, r25	; 0x2f
			sens -= sens2;
    44d0:	a3 01       	movw	r20, r6
    44d2:	92 01       	movw	r18, r4
    44d4:	55 0f       	add	r21, r21
    44d6:	22 0b       	sbc	r18, r18
    44d8:	32 2f       	mov	r19, r18
    44da:	a9 01       	movw	r20, r18
    44dc:	29 87       	std	Y+9, r18	; 0x09
    44de:	3a 87       	std	Y+10, r19	; 0x0a
    44e0:	4b 87       	std	Y+11, r20	; 0x0b
    44e2:	5c 87       	std	Y+12, r21	; 0x0c
    44e4:	23 2d       	mov	r18, r3
    44e6:	32 2d       	mov	r19, r2
    44e8:	49 a1       	ldd	r20, Y+33	; 0x21
    44ea:	5a a1       	ldd	r21, Y+34	; 0x22
    44ec:	68 a9       	ldd	r22, Y+48	; 0x30
    44ee:	79 a9       	ldd	r23, Y+49	; 0x31
    44f0:	89 2d       	mov	r24, r9
    44f2:	98 2d       	mov	r25, r8
    44f4:	a4 2c       	mov	r10, r4
    44f6:	b5 2c       	mov	r11, r5
    44f8:	c6 2c       	mov	r12, r6
    44fa:	d7 2c       	mov	r13, r7
    44fc:	e9 84       	ldd	r14, Y+9	; 0x09
    44fe:	fe 2c       	mov	r15, r14
    4500:	0e 2d       	mov	r16, r14
    4502:	1e 2d       	mov	r17, r14
    4504:	0e 94 2c 52 	call	0xa458	; 0xa458 <__subdi3>
    4508:	32 2e       	mov	r3, r18
    450a:	23 2e       	mov	r2, r19
    450c:	49 a3       	std	Y+33, r20	; 0x21
    450e:	5a a3       	std	Y+34, r21	; 0x22
    4510:	68 ab       	std	Y+48, r22	; 0x30
    4512:	79 ab       	std	Y+49, r23	; 0x31
    4514:	98 2e       	mov	r9, r24
    4516:	89 2e       	mov	r8, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4518:	8f b7       	in	r24, 0x3f	; 63
    451a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    451c:	f8 94       	cli
	return flags;
    451e:	79 80       	ldd	r7, Y+1	; 0x01
		}
		int32_t p = (int32_t)((((l_twi1_baro_d1 * sens) >> 21) - off) >> 15);

		flags = cpu_irq_save();
		g_twi1_baro_temp_100 = temp;
    4520:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4522:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4524:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4526:	78 a1       	ldd	r23, Y+32	; 0x20
    4528:	40 93 20 29 	sts	0x2920, r20	; 0x802920 <g_twi1_baro_temp_100>
    452c:	50 93 21 29 	sts	0x2921, r21	; 0x802921 <g_twi1_baro_temp_100+0x1>
    4530:	60 93 22 29 	sts	0x2922, r22	; 0x802922 <g_twi1_baro_temp_100+0x2>
    4534:	70 93 23 29 	sts	0x2923, r23	; 0x802923 <g_twi1_baro_temp_100+0x3>
		g_twi1_baro_p_100    = p;
    4538:	4b a1       	ldd	r20, Y+35	; 0x23
    453a:	5c a1       	ldd	r21, Y+36	; 0x24
    453c:	6d a1       	ldd	r22, Y+37	; 0x25
    453e:	7e a1       	ldd	r23, Y+38	; 0x26
    4540:	9a 01       	movw	r18, r20
    4542:	ab 01       	movw	r20, r22
    4544:	60 e0       	ldi	r22, 0x00	; 0
    4546:	70 e0       	ldi	r23, 0x00	; 0
    4548:	cb 01       	movw	r24, r22
    454a:	29 87       	std	Y+9, r18	; 0x09
    454c:	3a 87       	std	Y+10, r19	; 0x0a
    454e:	4b 87       	std	Y+11, r20	; 0x0b
    4550:	5c 87       	std	Y+12, r21	; 0x0c
    4552:	6d 87       	std	Y+13, r22	; 0x0d
    4554:	7e 87       	std	Y+14, r23	; 0x0e
    4556:	8f 87       	std	Y+15, r24	; 0x0f
    4558:	98 8b       	std	Y+16, r25	; 0x10
    455a:	a3 2c       	mov	r10, r3
    455c:	b2 2c       	mov	r11, r2
    455e:	c9 a0       	ldd	r12, Y+33	; 0x21
    4560:	da a0       	ldd	r13, Y+34	; 0x22
    4562:	e8 a8       	ldd	r14, Y+48	; 0x30
    4564:	f9 a8       	ldd	r15, Y+49	; 0x31
    4566:	09 2d       	mov	r16, r9
    4568:	18 2d       	mov	r17, r8
    456a:	60 e0       	ldi	r22, 0x00	; 0
    456c:	70 e0       	ldi	r23, 0x00	; 0
    456e:	80 e0       	ldi	r24, 0x00	; 0
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	0e 94 9b 51 	call	0xa336	; 0xa336 <__muldi3>
    4576:	05 e1       	ldi	r16, 0x15	; 21
    4578:	0e 94 05 52 	call	0xa40a	; 0xa40a <__ashrdi3>
    457c:	ad 88       	ldd	r10, Y+21	; 0x15
    457e:	b9 8c       	ldd	r11, Y+25	; 0x19
    4580:	cf a0       	ldd	r12, Y+39	; 0x27
    4582:	db a4       	ldd	r13, Y+43	; 0x2b
    4584:	ec a4       	ldd	r14, Y+44	; 0x2c
    4586:	fd a4       	ldd	r15, Y+45	; 0x2d
    4588:	0e a5       	ldd	r16, Y+46	; 0x2e
    458a:	1f a5       	ldd	r17, Y+47	; 0x2f
    458c:	0e 94 2c 52 	call	0xa458	; 0xa458 <__subdi3>
    4590:	0f e0       	ldi	r16, 0x0F	; 15
    4592:	0e 94 05 52 	call	0xa40a	; 0xa40a <__ashrdi3>
    4596:	20 93 1c 29 	sts	0x291C, r18	; 0x80291c <g_twi1_baro_p_100>
    459a:	30 93 1d 29 	sts	0x291D, r19	; 0x80291d <g_twi1_baro_p_100+0x1>
    459e:	40 93 1e 29 	sts	0x291E, r20	; 0x80291e <g_twi1_baro_p_100+0x2>
    45a2:	50 93 1f 29 	sts	0x291F, r21	; 0x80291f <g_twi1_baro_p_100+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    45a6:	7f be       	out	0x3f, r7	; 63
	}

	if (l_twi1_baro_valid) {
		task_twi1_baro(now);
	}
}
    45a8:	e5 96       	adiw	r28, 0x35	; 53
    45aa:	cd bf       	out	0x3d, r28	; 61
    45ac:	de bf       	out	0x3e, r29	; 62
    45ae:	df 91       	pop	r29
    45b0:	cf 91       	pop	r28
    45b2:	1f 91       	pop	r17
    45b4:	0f 91       	pop	r16
    45b6:	ff 90       	pop	r15
    45b8:	ef 90       	pop	r14
    45ba:	df 90       	pop	r13
    45bc:	cf 90       	pop	r12
    45be:	bf 90       	pop	r11
    45c0:	af 90       	pop	r10
    45c2:	9f 90       	pop	r9
    45c4:	8f 90       	pop	r8
    45c6:	7f 90       	pop	r7
    45c8:	6f 90       	pop	r6
    45ca:	5f 90       	pop	r5
    45cc:	4f 90       	pop	r4
    45ce:	3f 90       	pop	r3
    45d0:	2f 90       	pop	r2
    45d2:	08 95       	ret

000045d4 <task_twi2_lcd>:
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

/* TWI2 - LCD Port */
void task_twi2_lcd(uint32_t now)
{
    45d4:	2f 92       	push	r2
    45d6:	3f 92       	push	r3
    45d8:	4f 92       	push	r4
    45da:	5f 92       	push	r5
    45dc:	6f 92       	push	r6
    45de:	7f 92       	push	r7
    45e0:	8f 92       	push	r8
    45e2:	9f 92       	push	r9
    45e4:	af 92       	push	r10
    45e6:	bf 92       	push	r11
    45e8:	cf 92       	push	r12
    45ea:	df 92       	push	r13
    45ec:	ef 92       	push	r14
    45ee:	ff 92       	push	r15
    45f0:	0f 93       	push	r16
    45f2:	1f 93       	push	r17
    45f4:	cf 93       	push	r28
    45f6:	df 93       	push	r29
    45f8:	cd b7       	in	r28, 0x3d	; 61
    45fa:	de b7       	in	r29, 0x3e	; 62
    45fc:	2d 97       	sbiw	r28, 0x0d	; 13
    45fe:	cd bf       	out	0x3d, r28	; 61
    4600:	de bf       	out	0x3e, r29	; 62
	static uint16_t s_lcd_entry_cnt = 0U;
	static uint32_t s_lcd_last = 0UL;

	if (g_twi2_lcd_version >= 0x11) {
    4602:	20 91 11 29 	lds	r18, 0x2911	; 0x802911 <g_twi2_lcd_version>
    4606:	21 31       	cpi	r18, 0x11	; 17
    4608:	08 f4       	brcc	.+2      	; 0x460c <task_twi2_lcd+0x38>
    460a:	2e c2       	rjmp	.+1116   	; 0x4a68 <task_twi2_lcd+0x494>
		//static uint8_t s_ofs = 0;

		/* Show current measurement data on the LCD */
		if (((now - s_lcd_last) >= 1024) || (now < s_lcd_last)) {
    460c:	c0 90 80 26 	lds	r12, 0x2680	; 0x802680 <s_lcd_last.7528>
    4610:	d0 90 81 26 	lds	r13, 0x2681	; 0x802681 <s_lcd_last.7528+0x1>
    4614:	e0 90 82 26 	lds	r14, 0x2682	; 0x802682 <s_lcd_last.7528+0x2>
    4618:	f0 90 83 26 	lds	r15, 0x2683	; 0x802683 <s_lcd_last.7528+0x3>
    461c:	8b 01       	movw	r16, r22
    461e:	9c 01       	movw	r18, r24
    4620:	0c 19       	sub	r16, r12
    4622:	1d 09       	sbc	r17, r13
    4624:	2e 09       	sbc	r18, r14
    4626:	3f 09       	sbc	r19, r15
    4628:	01 15       	cp	r16, r1
    462a:	14 40       	sbci	r17, 0x04	; 4
    462c:	21 05       	cpc	r18, r1
    462e:	31 05       	cpc	r19, r1
    4630:	30 f4       	brcc	.+12     	; 0x463e <task_twi2_lcd+0x6a>
    4632:	6c 15       	cp	r22, r12
    4634:	7d 05       	cpc	r23, r13
    4636:	8e 05       	cpc	r24, r14
    4638:	9f 05       	cpc	r25, r15
    463a:	08 f0       	brcs	.+2      	; 0x463e <task_twi2_lcd+0x6a>
    463c:	34 c2       	rjmp	.+1128   	; 0x4aa6 <task_twi2_lcd+0x4d2>
			const uint8_t col_left = 6 * 10;
			uint8_t line = 2;

			s_lcd_last = now;
    463e:	60 93 80 26 	sts	0x2680, r22	; 0x802680 <s_lcd_last.7528>
    4642:	70 93 81 26 	sts	0x2681, r23	; 0x802681 <s_lcd_last.7528+0x1>
    4646:	80 93 82 26 	sts	0x2682, r24	; 0x802682 <s_lcd_last.7528+0x2>
    464a:	90 93 83 26 	sts	0x2683, r25	; 0x802683 <s_lcd_last.7528+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    464e:	8f b7       	in	r24, 0x3f	; 63
    4650:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4652:	f8 94       	cli
	return flags;
    4654:	89 81       	ldd	r24, Y+1	; 0x01

			/* Get up-to-date global data */
			irqflags_t flags = cpu_irq_save();
			int16_t l_adc_vctcxo_volt_1000	= g_adc_vctcxo_volt_1000;
    4656:	c0 90 a7 28 	lds	r12, 0x28A7	; 0x8028a7 <g_adc_vctcxo_volt_1000>
    465a:	d0 90 a8 28 	lds	r13, 0x28A8	; 0x8028a8 <g_adc_vctcxo_volt_1000+0x1>
			int16_t l_adc_5v0_volt_1000		= g_adc_5v0_volt_1000;
    465e:	60 90 a5 28 	lds	r6, 0x28A5	; 0x8028a5 <g_adc_5v0_volt_1000>
    4662:	70 90 a6 28 	lds	r7, 0x28A6	; 0x8028a6 <g_adc_5v0_volt_1000+0x1>
			int16_t l_adc_vbat_volt_1000	= g_adc_vbat_volt_1000;
    4666:	40 90 a3 28 	lds	r4, 0x28A3	; 0x8028a3 <g_adc_vbat_volt_1000>
    466a:	50 90 a4 28 	lds	r5, 0x28A4	; 0x8028a4 <g_adc_vbat_volt_1000+0x1>
			int16_t l_adc_temp_deg_100		= g_adc_temp_deg_100;
    466e:	e0 90 9b 28 	lds	r14, 0x289B	; 0x80289b <g_adc_temp_deg_100>
    4672:	f0 90 9c 28 	lds	r15, 0x289C	; 0x80289c <g_adc_temp_deg_100+0x1>
			int16_t l_adc_io_adc4_volt_1000	= g_adc_io_adc4_volt_1000;
    4676:	80 90 a1 28 	lds	r8, 0x28A1	; 0x8028a1 <g_adc_io_adc4_volt_1000>
    467a:	90 90 a2 28 	lds	r9, 0x28A2	; 0x8028a2 <g_adc_io_adc4_volt_1000+0x1>
			int16_t l_adc_io_adc5_volt_1000	= g_adc_io_adc5_volt_1000;
    467e:	20 90 9f 28 	lds	r2, 0x289F	; 0x80289f <g_adc_io_adc5_volt_1000>
    4682:	30 90 a0 28 	lds	r3, 0x28A0	; 0x8028a0 <g_adc_io_adc5_volt_1000+0x1>
			//int16_t l_adc_silence_volt_1000	= g_adc_silence_volt_1000;
			int32_t l_twi1_baro_temp_100	= g_twi1_baro_temp_100;
    4686:	20 91 20 29 	lds	r18, 0x2920	; 0x802920 <g_twi1_baro_temp_100>
    468a:	30 91 21 29 	lds	r19, 0x2921	; 0x802921 <g_twi1_baro_temp_100+0x1>
    468e:	40 91 22 29 	lds	r20, 0x2922	; 0x802922 <g_twi1_baro_temp_100+0x2>
    4692:	50 91 23 29 	lds	r21, 0x2923	; 0x802923 <g_twi1_baro_temp_100+0x3>
    4696:	2a 83       	std	Y+2, r18	; 0x02
    4698:	3b 83       	std	Y+3, r19	; 0x03
    469a:	4c 83       	std	Y+4, r20	; 0x04
    469c:	5d 83       	std	Y+5, r21	; 0x05
			int32_t l_twi1_baro_p_100		= g_twi1_baro_p_100;
    469e:	20 91 1c 29 	lds	r18, 0x291C	; 0x80291c <g_twi1_baro_p_100>
    46a2:	30 91 1d 29 	lds	r19, 0x291D	; 0x80291d <g_twi1_baro_p_100+0x1>
    46a6:	40 91 1e 29 	lds	r20, 0x291E	; 0x80291e <g_twi1_baro_p_100+0x2>
    46aa:	50 91 1f 29 	lds	r21, 0x291F	; 0x80291f <g_twi1_baro_p_100+0x3>
    46ae:	2e 83       	std	Y+6, r18	; 0x06
    46b0:	3f 83       	std	Y+7, r19	; 0x07
    46b2:	48 87       	std	Y+8, r20	; 0x08
    46b4:	59 87       	std	Y+9, r21	; 0x09
			int16_t l_twi1_hygro_T_100		= g_twi1_hygro_T_100;
    46b6:	40 91 14 29 	lds	r20, 0x2914	; 0x802914 <g_twi1_hygro_T_100>
    46ba:	50 91 15 29 	lds	r21, 0x2915	; 0x802915 <g_twi1_hygro_T_100+0x1>
    46be:	4a 87       	std	Y+10, r20	; 0x0a
    46c0:	5b 87       	std	Y+11, r21	; 0x0b
			int16_t l_twi1_hygro_RH_100		= g_twi1_hygro_RH_100;
    46c2:	e0 91 12 29 	lds	r30, 0x2912	; 0x802912 <g_twi1_hygro_RH_100>
    46c6:	f0 91 13 29 	lds	r31, 0x2913	; 0x802913 <g_twi1_hygro_RH_100+0x1>
    46ca:	ec 87       	std	Y+12, r30	; 0x0c
    46cc:	fd 87       	std	Y+13, r31	; 0x0d
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    46ce:	8f bf       	out	0x3f, r24	; 63
			cpu_irq_restore(flags);

			/* Repaint all items when starting and at some interval */
			if (!(s_lcd_entry_cnt++)) {
    46d0:	80 91 7e 26 	lds	r24, 0x267E	; 0x80267e <__data_end>
    46d4:	90 91 7f 26 	lds	r25, 0x267F	; 0x80267f <__data_end+0x1>
    46d8:	9c 01       	movw	r18, r24
    46da:	2f 5f       	subi	r18, 0xFF	; 255
    46dc:	3f 4f       	sbci	r19, 0xFF	; 255
    46de:	20 93 7e 26 	sts	0x267E, r18	; 0x80267e <__data_end>
    46e2:	30 93 7f 26 	sts	0x267F, r19	; 0x80267f <__data_end+0x1>
    46e6:	89 2b       	or	r24, r25
    46e8:	09 f0       	breq	.+2      	; 0x46ec <task_twi2_lcd+0x118>
    46ea:	1a c1       	rjmp	.+564    	; 0x4920 <task_twi2_lcd+0x34c>
}


static void task_twi2_lcd_cls(void)
{
	twi2_waitUntilReady();
    46ec:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
    46f0:	0f 2e       	mov	r0, r31
    46f2:	fb e0       	ldi	r31, 0x0B	; 11
    46f4:	af 2e       	mov	r10, r31
    46f6:	f0 e2       	ldi	r31, 0x20	; 32
    46f8:	bf 2e       	mov	r11, r31
    46fa:	f0 2d       	mov	r31, r0
    46fc:	80 e1       	ldi	r24, 0x10	; 16
    46fe:	f5 01       	movw	r30, r10
    4700:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.length = 0;
    4702:	10 86       	std	Z+8, r1	; 0x08
    4704:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    4706:	40 e0       	ldi	r20, 0x00	; 0
    4708:	b5 01       	movw	r22, r10
    470a:	80 e8       	ldi	r24, 0x80	; 128
    470c:	94 e0       	ldi	r25, 0x04	; 4
    470e:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    4712:	65 e0       	ldi	r22, 0x05	; 5
    4714:	70 e0       	ldi	r23, 0x00	; 0
    4716:	80 e0       	ldi	r24, 0x00	; 0
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
{
	uint8_t line;

	/* The header line */
	task_twi2_lcd_cls();
	task_twi2_lcd_str(6 * 10, 2, "FindMeSAT");
    471e:	4e e6       	ldi	r20, 0x6E	; 110
    4720:	53 e2       	ldi	r21, 0x23	; 35
    4722:	62 e0       	ldi	r22, 0x02	; 2
    4724:	8c e3       	ldi	r24, 0x3C	; 60
    4726:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 30, 2, "by DF4IAH");
    472a:	48 e7       	ldi	r20, 0x78	; 120
    472c:	53 e2       	ldi	r21, 0x23	; 35
    472e:	62 e0       	ldi	r22, 0x02	; 2
    4730:	84 eb       	ldi	r24, 0xB4	; 180
    4732:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_circ(uint8_t x, uint8_t y, uint8_t radius, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    4736:	64 e0       	ldi	r22, 0x04	; 4
    4738:	89 e0       	ldi	r24, 0x09	; 9
    473a:	0e 94 d6 17 	call	0x2fac	; 0x2fac <task_twi2_lcd_pos_xy>

	twi2_waitUntilReady();
    473e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC : TWI_SMART_LCD_CMD_DRAW_CIRC;
    4742:	8a e3       	ldi	r24, 0x3A	; 58
    4744:	f5 01       	movw	r30, r10
    4746:	81 83       	std	Z+1, r24	; 0x01
	twi2_m_data[0] = radius;
    4748:	0b e8       	ldi	r16, 0x8B	; 139
    474a:	18 e2       	ldi	r17, 0x28	; 40
    474c:	83 e0       	ldi	r24, 0x03	; 3
    474e:	f8 01       	movw	r30, r16
    4750:	80 83       	st	Z, r24
	twi2_packet.length = 1;
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	f5 01       	movw	r30, r10
    4758:	80 87       	std	Z+8, r24	; 0x08
    475a:	91 87       	std	Z+9, r25	; 0x09
    475c:	40 e0       	ldi	r20, 0x00	; 0
    475e:	b5 01       	movw	r22, r10
    4760:	80 e8       	ldi	r24, 0x80	; 128
    4762:	94 e0       	ldi	r25, 0x04	; 4
    4764:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    4768:	65 e0       	ldi	r22, 0x05	; 5
    476a:	70 e0       	ldi	r23, 0x00	; 0
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    4774:	62 e0       	ldi	r22, 0x02	; 2
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	0e 94 d6 17 	call	0x2fac	; 0x2fac <task_twi2_lcd_pos_xy>

	twi2_waitUntilReady();
    477c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_RECT : TWI_SMART_LCD_CMD_DRAW_RECT;
    4780:	24 e3       	ldi	r18, 0x34	; 52
    4782:	f5 01       	movw	r30, r10
    4784:	21 83       	std	Z+1, r18	; 0x01
	twi2_m_data[0] = width;
    4786:	26 e0       	ldi	r18, 0x06	; 6
    4788:	f8 01       	movw	r30, r16
    478a:	20 83       	st	Z, r18
	twi2_m_data[1] = height;
    478c:	34 e0       	ldi	r19, 0x04	; 4
    478e:	31 83       	std	Z+1, r19	; 0x01
	twi2_packet.length = 2;
    4790:	22 e0       	ldi	r18, 0x02	; 2
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	f5 01       	movw	r30, r10
    4796:	20 87       	std	Z+8, r18	; 0x08
    4798:	31 87       	std	Z+9, r19	; 0x09
    479a:	40 e0       	ldi	r20, 0x00	; 0
    479c:	b5 01       	movw	r22, r10
    479e:	80 e8       	ldi	r24, 0x80	; 128
    47a0:	94 e0       	ldi	r25, 0x04	; 4
    47a2:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    47a6:	65 e0       	ldi	r22, 0x05	; 5
    47a8:	70 e0       	ldi	r23, 0x00	; 0
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    47b2:	62 e0       	ldi	r22, 0x02	; 2
    47b4:	8c e0       	ldi	r24, 0x0C	; 12
    47b6:	0e 94 d6 17 	call	0x2fac	; 0x2fac <task_twi2_lcd_pos_xy>

	twi2_waitUntilReady();
    47ba:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_RECT : TWI_SMART_LCD_CMD_DRAW_RECT;
    47be:	24 e3       	ldi	r18, 0x34	; 52
    47c0:	f5 01       	movw	r30, r10
    47c2:	21 83       	std	Z+1, r18	; 0x01
	twi2_m_data[0] = width;
    47c4:	26 e0       	ldi	r18, 0x06	; 6
    47c6:	f8 01       	movw	r30, r16
    47c8:	20 83       	st	Z, r18
	twi2_m_data[1] = height;
    47ca:	34 e0       	ldi	r19, 0x04	; 4
    47cc:	31 83       	std	Z+1, r19	; 0x01
	twi2_packet.length = 2;
    47ce:	22 e0       	ldi	r18, 0x02	; 2
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	f5 01       	movw	r30, r10
    47d4:	20 87       	std	Z+8, r18	; 0x08
    47d6:	31 87       	std	Z+9, r19	; 0x09
    47d8:	40 e0       	ldi	r20, 0x00	; 0
    47da:	b5 01       	movw	r22, r10
    47dc:	80 e8       	ldi	r24, 0x80	; 128
    47de:	94 e0       	ldi	r25, 0x04	; 4
    47e0:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    47e4:	65 e0       	ldi	r22, 0x05	; 5
    47e6:	70 e0       	ldi	r23, 0x00	; 0
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
	}
}

static void task_twi2_lcd_line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
	task_twi2_lcd_pos_xy(x1, y1);
    47f0:	6b e0       	ldi	r22, 0x0B	; 11
    47f2:	80 e0       	ldi	r24, 0x00	; 0
    47f4:	0e 94 d6 17 	call	0x2fac	; 0x2fac <task_twi2_lcd_pos_xy>

	twi2_waitUntilReady();
    47f8:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
    47fc:	82 e3       	ldi	r24, 0x32	; 50
    47fe:	f5 01       	movw	r30, r10
    4800:	81 83       	std	Z+1, r24	; 0x01
	twi2_m_data[0] = x2;
    4802:	8f ee       	ldi	r24, 0xEF	; 239
    4804:	f8 01       	movw	r30, r16
    4806:	80 83       	st	Z, r24
	twi2_m_data[1] = y2;
    4808:	8b e0       	ldi	r24, 0x0B	; 11
    480a:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.length = 2;
    480c:	22 e0       	ldi	r18, 0x02	; 2
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	f5 01       	movw	r30, r10
    4812:	20 87       	std	Z+8, r18	; 0x08
    4814:	31 87       	std	Z+9, r19	; 0x09
    4816:	40 e0       	ldi	r20, 0x00	; 0
    4818:	b5 01       	movw	r22, r10
    481a:	80 e8       	ldi	r24, 0x80	; 128
    481c:	94 e0       	ldi	r25, 0x04	; 4
    481e:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    4822:	65 e0       	ldi	r22, 0x05	; 5
    4824:	70 e0       	ldi	r23, 0x00	; 0
    4826:	80 e0       	ldi	r24, 0x00	; 0
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
	/* Header line separator */
	task_twi2_lcd_line(0, 11, 239, 11);

	/* Left measurement names */
	line = 2;
	task_twi2_lcd_str(6 *  0, (line++) * 10, "mP Temp =");
    482e:	42 e8       	ldi	r20, 0x82	; 130
    4830:	53 e2       	ldi	r21, 0x23	; 35
    4832:	64 e1       	ldi	r22, 0x14	; 20
    4834:	80 e0       	ldi	r24, 0x00	; 0
    4836:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  3, (line++) * 10,    "Vusb =");
    483a:	4c e8       	ldi	r20, 0x8C	; 140
    483c:	53 e2       	ldi	r21, 0x23	; 35
    483e:	6e e1       	ldi	r22, 0x1E	; 30
    4840:	82 e1       	ldi	r24, 0x12	; 18
    4842:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  3, (line++) * 10,    "Vbat =");
    4846:	43 e9       	ldi	r20, 0x93	; 147
    4848:	53 e2       	ldi	r21, 0x23	; 35
    484a:	68 e2       	ldi	r22, 0x28	; 40
    484c:	82 e1       	ldi	r24, 0x12	; 18
    484e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vvctcxo =");
    4852:	4a e9       	ldi	r20, 0x9A	; 154
    4854:	53 e2       	ldi	r21, 0x23	; 35
    4856:	62 e3       	ldi	r22, 0x32	; 50
    4858:	80 e0       	ldi	r24, 0x00	; 0
    485a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vioadc4 =");
    485e:	44 ea       	ldi	r20, 0xA4	; 164
    4860:	53 e2       	ldi	r21, 0x23	; 35
    4862:	6c e3       	ldi	r22, 0x3C	; 60
    4864:	80 e0       	ldi	r24, 0x00	; 0
    4866:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vioadc5 =");
    486a:	4e ea       	ldi	r20, 0xAE	; 174
    486c:	53 e2       	ldi	r21, 0x23	; 35
    486e:	66 e4       	ldi	r22, 0x46	; 70
    4870:	80 e0       	ldi	r24, 0x00	; 0
    4872:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	//task_twi2_lcd_str(6 *  0, (line++) * 10, "Vsilen. =");
	line++;

	task_twi2_lcd_str(6 *  0, (line++) * 10, "Ba_Temp =");
    4876:	48 eb       	ldi	r20, 0xB8	; 184
    4878:	53 e2       	ldi	r21, 0x23	; 35
    487a:	6a e5       	ldi	r22, 0x5A	; 90
    487c:	80 e0       	ldi	r24, 0x00	; 0
    487e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Ba_Pres =");
    4882:	42 ec       	ldi	r20, 0xC2	; 194
    4884:	53 e2       	ldi	r21, 0x23	; 35
    4886:	64 e6       	ldi	r22, 0x64	; 100
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Hy_Temp =");
    488e:	4c ec       	ldi	r20, 0xCC	; 204
    4890:	53 e2       	ldi	r21, 0x23	; 35
    4892:	6e e6       	ldi	r22, 0x6E	; 110
    4894:	80 e0       	ldi	r24, 0x00	; 0
    4896:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Hy_RelH =");
    489a:	46 ed       	ldi	r20, 0xD6	; 214
    489c:	53 e2       	ldi	r21, 0x23	; 35
    489e:	68 e7       	ldi	r22, 0x78	; 120
    48a0:	80 e0       	ldi	r24, 0x00	; 0
    48a2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>

	/* Left measurement units */
	line = 2;
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    48a6:	40 ee       	ldi	r20, 0xE0	; 224
    48a8:	53 e2       	ldi	r21, 0x23	; 35
    48aa:	64 e1       	ldi	r22, 0x14	; 20
    48ac:	80 e6       	ldi	r24, 0x60	; 96
    48ae:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    48b2:	42 ee       	ldi	r20, 0xE2	; 226
    48b4:	53 e2       	ldi	r21, 0x23	; 35
    48b6:	6e e1       	ldi	r22, 0x1E	; 30
    48b8:	80 e6       	ldi	r24, 0x60	; 96
    48ba:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    48be:	42 ee       	ldi	r20, 0xE2	; 226
    48c0:	53 e2       	ldi	r21, 0x23	; 35
    48c2:	68 e2       	ldi	r22, 0x28	; 40
    48c4:	80 e6       	ldi	r24, 0x60	; 96
    48c6:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    48ca:	42 ee       	ldi	r20, 0xE2	; 226
    48cc:	53 e2       	ldi	r21, 0x23	; 35
    48ce:	62 e3       	ldi	r22, 0x32	; 50
    48d0:	80 e6       	ldi	r24, 0x60	; 96
    48d2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    48d6:	42 ee       	ldi	r20, 0xE2	; 226
    48d8:	53 e2       	ldi	r21, 0x23	; 35
    48da:	6c e3       	ldi	r22, 0x3C	; 60
    48dc:	80 e6       	ldi	r24, 0x60	; 96
    48de:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    48e2:	42 ee       	ldi	r20, 0xE2	; 226
    48e4:	53 e2       	ldi	r21, 0x23	; 35
    48e6:	66 e4       	ldi	r22, 0x46	; 70
    48e8:	80 e6       	ldi	r24, 0x60	; 96
    48ea:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	//task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
	line++;

	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    48ee:	40 ee       	ldi	r20, 0xE0	; 224
    48f0:	53 e2       	ldi	r21, 0x23	; 35
    48f2:	6a e5       	ldi	r22, 0x5A	; 90
    48f4:	80 e6       	ldi	r24, 0x60	; 96
    48f6:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 18, (line++) * 10, "hPa");
    48fa:	44 ee       	ldi	r20, 0xE4	; 228
    48fc:	53 e2       	ldi	r21, 0x23	; 35
    48fe:	64 e6       	ldi	r22, 0x64	; 100
    4900:	8c e6       	ldi	r24, 0x6C	; 108
    4902:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    4906:	40 ee       	ldi	r20, 0xE0	; 224
    4908:	53 e2       	ldi	r21, 0x23	; 35
    490a:	6e e6       	ldi	r22, 0x6E	; 110
    490c:	80 e6       	ldi	r24, 0x60	; 96
    490e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "%");
    4912:	48 ee       	ldi	r20, 0xE8	; 232
    4914:	53 e2       	ldi	r21, 0x23	; 35
    4916:	68 e7       	ldi	r22, 0x78	; 120
    4918:	80 e6       	ldi	r24, 0x60	; 96
    491a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
    491e:	07 c0       	rjmp	.+14     	; 0x492e <task_twi2_lcd+0x35a>

			/* Repaint all items when starting and at some interval */
			if (!(s_lcd_entry_cnt++)) {
				task_twi2_lcd_header();
			#if 1
			} else if (s_lcd_entry_cnt >= 120) {
    4920:	28 37       	cpi	r18, 0x78	; 120
    4922:	31 05       	cpc	r19, r1
    4924:	20 f0       	brcs	.+8      	; 0x492e <task_twi2_lcd+0x35a>
				s_lcd_entry_cnt = 0;
    4926:	10 92 7e 26 	sts	0x267E, r1	; 0x80267e <__data_end>
    492a:	10 92 7f 26 	sts	0x267F, r1	; 0x80267f <__data_end+0x1>
			#endif
			}

			/* ADC_TEMP */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_temp_deg_100 / 100,      (l_adc_temp_deg_100 / 10) % 10,  "%02d.%01d");
    492e:	2a e0       	ldi	r18, 0x0A	; 10
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	c7 01       	movw	r24, r14
    4934:	b9 01       	movw	r22, r18
    4936:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    493a:	cb 01       	movw	r24, r22
    493c:	b9 01       	movw	r22, r18
    493e:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    4942:	9c 01       	movw	r18, r24
    4944:	0f 2e       	mov	r0, r31
    4946:	f4 e6       	ldi	r31, 0x64	; 100
    4948:	af 2e       	mov	r10, r31
    494a:	b1 2c       	mov	r11, r1
    494c:	f0 2d       	mov	r31, r0
    494e:	c7 01       	movw	r24, r14
    4950:	b5 01       	movw	r22, r10
    4952:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    4956:	ab 01       	movw	r20, r22
    4958:	0a ee       	ldi	r16, 0xEA	; 234
    495a:	13 e2       	ldi	r17, 0x23	; 35
    495c:	64 e1       	ldi	r22, 0x14	; 20
    495e:	8c e3       	ldi	r24, 0x3C	; 60
    4960:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>

			/* ADC_5V0 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_5v0_volt_1000 / 1000,     l_adc_5v0_volt_1000 % 1000,     "%1d.%03d");
    4964:	0f 2e       	mov	r0, r31
    4966:	f8 ee       	ldi	r31, 0xE8	; 232
    4968:	ef 2e       	mov	r14, r31
    496a:	f3 e0       	ldi	r31, 0x03	; 3
    496c:	ff 2e       	mov	r15, r31
    496e:	f0 2d       	mov	r31, r0
    4970:	c3 01       	movw	r24, r6
    4972:	b7 01       	movw	r22, r14
    4974:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    4978:	ab 01       	movw	r20, r22
    497a:	04 ef       	ldi	r16, 0xF4	; 244
    497c:	13 e2       	ldi	r17, 0x23	; 35
    497e:	9c 01       	movw	r18, r24
    4980:	6e e1       	ldi	r22, 0x1E	; 30
    4982:	8c e3       	ldi	r24, 0x3C	; 60
    4984:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>

			/* ADC_VBAT */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_vbat_volt_1000 / 1000,    l_adc_vbat_volt_1000 % 1000,    "%1d.%03d");
    4988:	c2 01       	movw	r24, r4
    498a:	b7 01       	movw	r22, r14
    498c:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    4990:	ab 01       	movw	r20, r22
    4992:	9c 01       	movw	r18, r24
    4994:	68 e2       	ldi	r22, 0x28	; 40
    4996:	8c e3       	ldi	r24, 0x3C	; 60
    4998:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>

			/* ADC_VCTCXO */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_vctcxo_volt_1000 / 1000,  l_adc_vctcxo_volt_1000 % 1000,  "%1d.%03d");
    499c:	c6 01       	movw	r24, r12
    499e:	b7 01       	movw	r22, r14
    49a0:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    49a4:	ab 01       	movw	r20, r22
    49a6:	9c 01       	movw	r18, r24
    49a8:	62 e3       	ldi	r22, 0x32	; 50
    49aa:	8c e3       	ldi	r24, 0x3C	; 60
    49ac:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>

			/* ADC_IO_ADC4 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_io_adc4_volt_1000 / 1000, l_adc_io_adc4_volt_1000 % 1000, "%1d.%03d");
    49b0:	c4 01       	movw	r24, r8
    49b2:	b7 01       	movw	r22, r14
    49b4:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    49b8:	ab 01       	movw	r20, r22
    49ba:	9c 01       	movw	r18, r24
    49bc:	6c e3       	ldi	r22, 0x3C	; 60
    49be:	8c e3       	ldi	r24, 0x3C	; 60
    49c0:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>

			/* ADC_IO_ADC5 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_io_adc5_volt_1000 / 1000, l_adc_io_adc5_volt_1000 % 1000, "%1d.%03d");
    49c4:	c1 01       	movw	r24, r2
    49c6:	b7 01       	movw	r22, r14
    49c8:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    49cc:	ab 01       	movw	r20, r22
    49ce:	9c 01       	movw	r18, r24
    49d0:	66 e4       	ldi	r22, 0x46	; 70
    49d2:	8c e3       	ldi	r24, 0x3C	; 60
    49d4:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>
			/* ADC_SILENCE */
			//task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_silence_volt_1000 / 1000, l_adc_silence_volt_1000 % 1000, "%1d.%03d");
			line++;

			/* Baro_Temp */
			task_twi2_lcd_print_format_uint32(col_left, (line++) * 10, l_twi1_baro_temp_100 / 100,     l_twi1_baro_temp_100 % 100,     "%02ld.%02ld");
    49d8:	0f 2e       	mov	r0, r31
    49da:	f4 e6       	ldi	r31, 0x64	; 100
    49dc:	4f 2e       	mov	r4, r31
    49de:	51 2c       	mov	r5, r1
    49e0:	61 2c       	mov	r6, r1
    49e2:	71 2c       	mov	r7, r1
    49e4:	f0 2d       	mov	r31, r0
    49e6:	6a 81       	ldd	r22, Y+2	; 0x02
    49e8:	7b 81       	ldd	r23, Y+3	; 0x03
    49ea:	8c 81       	ldd	r24, Y+4	; 0x04
    49ec:	9d 81       	ldd	r25, Y+5	; 0x05
    49ee:	a3 01       	movw	r20, r6
    49f0:	92 01       	movw	r18, r4
    49f2:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    49f6:	0f 2e       	mov	r0, r31
    49f8:	fd ef       	ldi	r31, 0xFD	; 253
    49fa:	cf 2e       	mov	r12, r31
    49fc:	f3 e2       	ldi	r31, 0x23	; 35
    49fe:	df 2e       	mov	r13, r31
    4a00:	f0 2d       	mov	r31, r0
    4a02:	7b 01       	movw	r14, r22
    4a04:	8c 01       	movw	r16, r24
    4a06:	6a e5       	ldi	r22, 0x5A	; 90
    4a08:	8c e3       	ldi	r24, 0x3C	; 60
    4a0a:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <task_twi2_lcd_print_format_uint32>

			/* Baro_P */
			task_twi2_lcd_print_format_uint32(col_left, (line++) * 10, l_twi1_baro_p_100 / 100,        l_twi1_baro_p_100 % 100,        "%04ld.%02ld");
    4a0e:	6e 81       	ldd	r22, Y+6	; 0x06
    4a10:	7f 81       	ldd	r23, Y+7	; 0x07
    4a12:	88 85       	ldd	r24, Y+8	; 0x08
    4a14:	99 85       	ldd	r25, Y+9	; 0x09
    4a16:	a3 01       	movw	r20, r6
    4a18:	92 01       	movw	r18, r4
    4a1a:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    4a1e:	0f 2e       	mov	r0, r31
    4a20:	f9 e0       	ldi	r31, 0x09	; 9
    4a22:	cf 2e       	mov	r12, r31
    4a24:	f4 e2       	ldi	r31, 0x24	; 36
    4a26:	df 2e       	mov	r13, r31
    4a28:	f0 2d       	mov	r31, r0
    4a2a:	7b 01       	movw	r14, r22
    4a2c:	8c 01       	movw	r16, r24
    4a2e:	64 e6       	ldi	r22, 0x64	; 100
    4a30:	8c e3       	ldi	r24, 0x3C	; 60
    4a32:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <task_twi2_lcd_print_format_uint32>

			/* Hygro_Temp */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_twi1_hygro_T_100 / 100,       l_twi1_hygro_T_100 % 100,       "%02d.%02d");
    4a36:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a38:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a3a:	b5 01       	movw	r22, r10
    4a3c:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    4a40:	ab 01       	movw	r20, r22
    4a42:	05 e1       	ldi	r16, 0x15	; 21
    4a44:	14 e2       	ldi	r17, 0x24	; 36
    4a46:	9c 01       	movw	r18, r24
    4a48:	6e e6       	ldi	r22, 0x6E	; 110
    4a4a:	8c e3       	ldi	r24, 0x3C	; 60
    4a4c:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>

			/* Hygro_RH */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_twi1_hygro_RH_100 / 100,      l_twi1_hygro_RH_100 % 100,      "%02d.%02d");
    4a50:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a52:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a54:	b5 01       	movw	r22, r10
    4a56:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    4a5a:	ab 01       	movw	r20, r22
    4a5c:	9c 01       	movw	r18, r24
    4a5e:	68 e7       	ldi	r22, 0x78	; 120
    4a60:	8c e3       	ldi	r24, 0x3C	; 60
    4a62:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>
    4a66:	1f c0       	rjmp	.+62     	; 0x4aa6 <task_twi2_lcd+0x4d2>
				task_twi2_lcd_cls();
			}
		}
		#endif

	} else if (g_twi2_lcd_version == 0x10) {
    4a68:	20 31       	cpi	r18, 0x10	; 16
    4a6a:	e9 f4       	brne	.+58     	; 0x4aa6 <task_twi2_lcd+0x4d2>
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi2_waitUntilReady();
    4a6c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
    4a70:	eb e0       	ldi	r30, 0x0B	; 11
    4a72:	f0 e2       	ldi	r31, 0x20	; 32
    4a74:	84 e8       	ldi	r24, 0x84	; 132
    4a76:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[0] = 1;
    4a78:	ab e8       	ldi	r26, 0x8B	; 139
    4a7a:	b8 e2       	ldi	r27, 0x28	; 40
    4a7c:	81 e0       	ldi	r24, 0x01	; 1
    4a7e:	8c 93       	st	X, r24
		twi2_m_data[1] = 128;
    4a80:	80 e8       	ldi	r24, 0x80	; 128
    4a82:	11 96       	adiw	r26, 0x01	; 1
    4a84:	8c 93       	st	X, r24
		twi2_packet.length = 2;
    4a86:	82 e0       	ldi	r24, 0x02	; 2
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	80 87       	std	Z+8, r24	; 0x08
    4a8c:	91 87       	std	Z+9, r25	; 0x09
    4a8e:	40 e0       	ldi	r20, 0x00	; 0
    4a90:	bf 01       	movw	r22, r30
    4a92:	80 e8       	ldi	r24, 0x80	; 128
    4a94:	94 e0       	ldi	r25, 0x04	; 4
    4a96:	0e 94 a0 31 	call	0x6340	; 0x6340 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
    4a9a:	69 e8       	ldi	r22, 0x89	; 137
    4a9c:	73 e1       	ldi	r23, 0x13	; 19
    4a9e:	80 e0       	ldi	r24, 0x00	; 0
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
	}
}
    4aa6:	2d 96       	adiw	r28, 0x0d	; 13
    4aa8:	cd bf       	out	0x3d, r28	; 61
    4aaa:	de bf       	out	0x3e, r29	; 62
    4aac:	df 91       	pop	r29
    4aae:	cf 91       	pop	r28
    4ab0:	1f 91       	pop	r17
    4ab2:	0f 91       	pop	r16
    4ab4:	ff 90       	pop	r15
    4ab6:	ef 90       	pop	r14
    4ab8:	df 90       	pop	r13
    4aba:	cf 90       	pop	r12
    4abc:	bf 90       	pop	r11
    4abe:	af 90       	pop	r10
    4ac0:	9f 90       	pop	r9
    4ac2:	8f 90       	pop	r8
    4ac4:	7f 90       	pop	r7
    4ac6:	6f 90       	pop	r6
    4ac8:	5f 90       	pop	r5
    4aca:	4f 90       	pop	r4
    4acc:	3f 90       	pop	r3
    4ace:	2f 90       	pop	r2
    4ad0:	08 95       	ret

00004ad2 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    4ad2:	08 95       	ret

00004ad4 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    4ad4:	cf 93       	push	r28
    4ad6:	df 93       	push	r29
    4ad8:	1f 92       	push	r1
    4ada:	cd b7       	in	r28, 0x3d	; 61
    4adc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4ade:	2f b7       	in	r18, 0x3f	; 63
    4ae0:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    4ae2:	f8 94       	cli
	return flags;
    4ae4:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    4ae6:	28 2f       	mov	r18, r24
    4ae8:	39 2f       	mov	r19, r25
    4aea:	21 15       	cp	r18, r1
    4aec:	82 e0       	ldi	r24, 0x02	; 2
    4aee:	38 07       	cpc	r19, r24
    4af0:	29 f4       	brne	.+10     	; 0x4afc <adc_set_callback+0x28>
		adca_callback = callback;
    4af2:	60 93 c5 2a 	sts	0x2AC5, r22	; 0x802ac5 <adca_callback>
    4af6:	70 93 c6 2a 	sts	0x2AC6, r23	; 0x802ac6 <adca_callback+0x1>
    4afa:	07 c0       	rjmp	.+14     	; 0x4b0a <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    4afc:	20 34       	cpi	r18, 0x40	; 64
    4afe:	32 40       	sbci	r19, 0x02	; 2
    4b00:	21 f4       	brne	.+8      	; 0x4b0a <adc_set_callback+0x36>
		adcb_callback = callback;
    4b02:	60 93 c3 2a 	sts	0x2AC3, r22	; 0x802ac3 <adcb_callback>
    4b06:	70 93 c4 2a 	sts	0x2AC4, r23	; 0x802ac4 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4b0a:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    4b0c:	0f 90       	pop	r0
    4b0e:	df 91       	pop	r29
    4b10:	cf 91       	pop	r28
    4b12:	08 95       	ret

00004b14 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    4b14:	81 15       	cp	r24, r1
    4b16:	22 e0       	ldi	r18, 0x02	; 2
    4b18:	92 07       	cpc	r25, r18
    4b1a:	69 f4       	brne	.+26     	; 0x4b36 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    4b1c:	80 91 8d 26 	lds	r24, 0x268D	; 0x80268d <adca_enable_count>
    4b20:	91 e0       	ldi	r25, 0x01	; 1
    4b22:	98 0f       	add	r25, r24
    4b24:	90 93 8d 26 	sts	0x268D, r25	; 0x80268d <adca_enable_count>
    4b28:	81 11       	cpse	r24, r1
    4b2a:	14 c0       	rjmp	.+40     	; 0x4b54 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    4b2c:	62 e0       	ldi	r22, 0x02	; 2
    4b2e:	81 e0       	ldi	r24, 0x01	; 1
    4b30:	0c 94 da 48 	jmp	0x91b4	; 0x91b4 <sysclk_enable_module>
    4b34:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    4b36:	80 34       	cpi	r24, 0x40	; 64
    4b38:	92 40       	sbci	r25, 0x02	; 2
    4b3a:	61 f4       	brne	.+24     	; 0x4b54 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    4b3c:	80 91 8c 26 	lds	r24, 0x268C	; 0x80268c <adcb_enable_count>
    4b40:	91 e0       	ldi	r25, 0x01	; 1
    4b42:	98 0f       	add	r25, r24
    4b44:	90 93 8c 26 	sts	0x268C, r25	; 0x80268c <adcb_enable_count>
    4b48:	81 11       	cpse	r24, r1
    4b4a:	04 c0       	rjmp	.+8      	; 0x4b54 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    4b4c:	62 e0       	ldi	r22, 0x02	; 2
    4b4e:	82 e0       	ldi	r24, 0x02	; 2
    4b50:	0c 94 da 48 	jmp	0x91b4	; 0x91b4 <sysclk_enable_module>
    4b54:	08 95       	ret

00004b56 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    4b56:	81 15       	cp	r24, r1
    4b58:	22 e0       	ldi	r18, 0x02	; 2
    4b5a:	92 07       	cpc	r25, r18
    4b5c:	61 f4       	brne	.+24     	; 0x4b76 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    4b5e:	80 91 8d 26 	lds	r24, 0x268D	; 0x80268d <adca_enable_count>
    4b62:	81 50       	subi	r24, 0x01	; 1
    4b64:	80 93 8d 26 	sts	0x268D, r24	; 0x80268d <adca_enable_count>
    4b68:	81 11       	cpse	r24, r1
    4b6a:	13 c0       	rjmp	.+38     	; 0x4b92 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    4b6c:	62 e0       	ldi	r22, 0x02	; 2
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	0c 94 f0 48 	jmp	0x91e0	; 0x91e0 <sysclk_disable_module>
    4b74:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    4b76:	80 34       	cpi	r24, 0x40	; 64
    4b78:	92 40       	sbci	r25, 0x02	; 2
    4b7a:	59 f4       	brne	.+22     	; 0x4b92 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    4b7c:	80 91 8c 26 	lds	r24, 0x268C	; 0x80268c <adcb_enable_count>
    4b80:	81 50       	subi	r24, 0x01	; 1
    4b82:	80 93 8c 26 	sts	0x268C, r24	; 0x80268c <adcb_enable_count>
    4b86:	81 11       	cpse	r24, r1
    4b88:	04 c0       	rjmp	.+8      	; 0x4b92 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    4b8a:	62 e0       	ldi	r22, 0x02	; 2
    4b8c:	82 e0       	ldi	r24, 0x02	; 2
    4b8e:	0c 94 f0 48 	jmp	0x91e0	; 0x91e0 <sysclk_disable_module>
    4b92:	08 95       	ret

00004b94 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    4b94:	ef 92       	push	r14
    4b96:	ff 92       	push	r15
    4b98:	1f 93       	push	r17
    4b9a:	cf 93       	push	r28
    4b9c:	df 93       	push	r29
    4b9e:	1f 92       	push	r1
    4ba0:	1f 92       	push	r1
    4ba2:	cd b7       	in	r28, 0x3d	; 61
    4ba4:	de b7       	in	r29, 0x3e	; 62
    4ba6:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4ba8:	8f b7       	in	r24, 0x3f	; 63
    4baa:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4bac:	f8 94       	cli
	return flags;
    4bae:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    4bb0:	c7 01       	movw	r24, r14
    4bb2:	b0 df       	rcall	.-160    	; 0x4b14 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    4bb4:	f7 01       	movw	r30, r14
    4bb6:	80 81       	ld	r24, Z
    4bb8:	81 60       	ori	r24, 0x01	; 1
    4bba:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4bbc:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4bbe:	80 91 d8 2a 	lds	r24, 0x2AD8	; 0x802ad8 <sleepmgr_locks+0x1>
    4bc2:	8f 3f       	cpi	r24, 0xFF	; 255
    4bc4:	09 f4       	brne	.+2      	; 0x4bc8 <adc_enable+0x34>
    4bc6:	ff cf       	rjmp	.-2      	; 0x4bc6 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4bc8:	8f b7       	in	r24, 0x3f	; 63
    4bca:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    4bcc:	f8 94       	cli
	return flags;
    4bce:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4bd0:	e7 ed       	ldi	r30, 0xD7	; 215
    4bd2:	fa e2       	ldi	r31, 0x2A	; 42
    4bd4:	81 81       	ldd	r24, Z+1	; 0x01
    4bd6:	8f 5f       	subi	r24, 0xFF	; 255
    4bd8:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4bda:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    4bdc:	0f 90       	pop	r0
    4bde:	0f 90       	pop	r0
    4be0:	df 91       	pop	r29
    4be2:	cf 91       	pop	r28
    4be4:	1f 91       	pop	r17
    4be6:	ff 90       	pop	r15
    4be8:	ef 90       	pop	r14
    4bea:	08 95       	ret

00004bec <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    4bec:	1f 92       	push	r1
    4bee:	0f 92       	push	r0
    4bf0:	0f b6       	in	r0, 0x3f	; 63
    4bf2:	0f 92       	push	r0
    4bf4:	11 24       	eor	r1, r1
    4bf6:	0b b6       	in	r0, 0x3b	; 59
    4bf8:	0f 92       	push	r0
    4bfa:	2f 93       	push	r18
    4bfc:	3f 93       	push	r19
    4bfe:	4f 93       	push	r20
    4c00:	5f 93       	push	r21
    4c02:	6f 93       	push	r22
    4c04:	7f 93       	push	r23
    4c06:	8f 93       	push	r24
    4c08:	9f 93       	push	r25
    4c0a:	af 93       	push	r26
    4c0c:	bf 93       	push	r27
    4c0e:	ef 93       	push	r30
    4c10:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    4c12:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    4c16:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    4c1a:	e0 91 c5 2a 	lds	r30, 0x2AC5	; 0x802ac5 <adca_callback>
    4c1e:	f0 91 c6 2a 	lds	r31, 0x2AC6	; 0x802ac6 <adca_callback+0x1>
    4c22:	61 e0       	ldi	r22, 0x01	; 1
    4c24:	80 e0       	ldi	r24, 0x00	; 0
    4c26:	92 e0       	ldi	r25, 0x02	; 2
    4c28:	19 95       	eicall
}
    4c2a:	ff 91       	pop	r31
    4c2c:	ef 91       	pop	r30
    4c2e:	bf 91       	pop	r27
    4c30:	af 91       	pop	r26
    4c32:	9f 91       	pop	r25
    4c34:	8f 91       	pop	r24
    4c36:	7f 91       	pop	r23
    4c38:	6f 91       	pop	r22
    4c3a:	5f 91       	pop	r21
    4c3c:	4f 91       	pop	r20
    4c3e:	3f 91       	pop	r19
    4c40:	2f 91       	pop	r18
    4c42:	0f 90       	pop	r0
    4c44:	0b be       	out	0x3b, r0	; 59
    4c46:	0f 90       	pop	r0
    4c48:	0f be       	out	0x3f, r0	; 63
    4c4a:	0f 90       	pop	r0
    4c4c:	1f 90       	pop	r1
    4c4e:	18 95       	reti

00004c50 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    4c50:	1f 92       	push	r1
    4c52:	0f 92       	push	r0
    4c54:	0f b6       	in	r0, 0x3f	; 63
    4c56:	0f 92       	push	r0
    4c58:	11 24       	eor	r1, r1
    4c5a:	0b b6       	in	r0, 0x3b	; 59
    4c5c:	0f 92       	push	r0
    4c5e:	2f 93       	push	r18
    4c60:	3f 93       	push	r19
    4c62:	4f 93       	push	r20
    4c64:	5f 93       	push	r21
    4c66:	6f 93       	push	r22
    4c68:	7f 93       	push	r23
    4c6a:	8f 93       	push	r24
    4c6c:	9f 93       	push	r25
    4c6e:	af 93       	push	r26
    4c70:	bf 93       	push	r27
    4c72:	ef 93       	push	r30
    4c74:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    4c76:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    4c7a:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    4c7e:	e0 91 c5 2a 	lds	r30, 0x2AC5	; 0x802ac5 <adca_callback>
    4c82:	f0 91 c6 2a 	lds	r31, 0x2AC6	; 0x802ac6 <adca_callback+0x1>
    4c86:	62 e0       	ldi	r22, 0x02	; 2
    4c88:	80 e0       	ldi	r24, 0x00	; 0
    4c8a:	92 e0       	ldi	r25, 0x02	; 2
    4c8c:	19 95       	eicall
}
    4c8e:	ff 91       	pop	r31
    4c90:	ef 91       	pop	r30
    4c92:	bf 91       	pop	r27
    4c94:	af 91       	pop	r26
    4c96:	9f 91       	pop	r25
    4c98:	8f 91       	pop	r24
    4c9a:	7f 91       	pop	r23
    4c9c:	6f 91       	pop	r22
    4c9e:	5f 91       	pop	r21
    4ca0:	4f 91       	pop	r20
    4ca2:	3f 91       	pop	r19
    4ca4:	2f 91       	pop	r18
    4ca6:	0f 90       	pop	r0
    4ca8:	0b be       	out	0x3b, r0	; 59
    4caa:	0f 90       	pop	r0
    4cac:	0f be       	out	0x3f, r0	; 63
    4cae:	0f 90       	pop	r0
    4cb0:	1f 90       	pop	r1
    4cb2:	18 95       	reti

00004cb4 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    4cb4:	1f 92       	push	r1
    4cb6:	0f 92       	push	r0
    4cb8:	0f b6       	in	r0, 0x3f	; 63
    4cba:	0f 92       	push	r0
    4cbc:	11 24       	eor	r1, r1
    4cbe:	0b b6       	in	r0, 0x3b	; 59
    4cc0:	0f 92       	push	r0
    4cc2:	2f 93       	push	r18
    4cc4:	3f 93       	push	r19
    4cc6:	4f 93       	push	r20
    4cc8:	5f 93       	push	r21
    4cca:	6f 93       	push	r22
    4ccc:	7f 93       	push	r23
    4cce:	8f 93       	push	r24
    4cd0:	9f 93       	push	r25
    4cd2:	af 93       	push	r26
    4cd4:	bf 93       	push	r27
    4cd6:	ef 93       	push	r30
    4cd8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    4cda:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    4cde:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    4ce2:	e0 91 c5 2a 	lds	r30, 0x2AC5	; 0x802ac5 <adca_callback>
    4ce6:	f0 91 c6 2a 	lds	r31, 0x2AC6	; 0x802ac6 <adca_callback+0x1>
    4cea:	64 e0       	ldi	r22, 0x04	; 4
    4cec:	80 e0       	ldi	r24, 0x00	; 0
    4cee:	92 e0       	ldi	r25, 0x02	; 2
    4cf0:	19 95       	eicall
}
    4cf2:	ff 91       	pop	r31
    4cf4:	ef 91       	pop	r30
    4cf6:	bf 91       	pop	r27
    4cf8:	af 91       	pop	r26
    4cfa:	9f 91       	pop	r25
    4cfc:	8f 91       	pop	r24
    4cfe:	7f 91       	pop	r23
    4d00:	6f 91       	pop	r22
    4d02:	5f 91       	pop	r21
    4d04:	4f 91       	pop	r20
    4d06:	3f 91       	pop	r19
    4d08:	2f 91       	pop	r18
    4d0a:	0f 90       	pop	r0
    4d0c:	0b be       	out	0x3b, r0	; 59
    4d0e:	0f 90       	pop	r0
    4d10:	0f be       	out	0x3f, r0	; 63
    4d12:	0f 90       	pop	r0
    4d14:	1f 90       	pop	r1
    4d16:	18 95       	reti

00004d18 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    4d18:	1f 92       	push	r1
    4d1a:	0f 92       	push	r0
    4d1c:	0f b6       	in	r0, 0x3f	; 63
    4d1e:	0f 92       	push	r0
    4d20:	11 24       	eor	r1, r1
    4d22:	0b b6       	in	r0, 0x3b	; 59
    4d24:	0f 92       	push	r0
    4d26:	2f 93       	push	r18
    4d28:	3f 93       	push	r19
    4d2a:	4f 93       	push	r20
    4d2c:	5f 93       	push	r21
    4d2e:	6f 93       	push	r22
    4d30:	7f 93       	push	r23
    4d32:	8f 93       	push	r24
    4d34:	9f 93       	push	r25
    4d36:	af 93       	push	r26
    4d38:	bf 93       	push	r27
    4d3a:	ef 93       	push	r30
    4d3c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    4d3e:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    4d42:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    4d46:	e0 91 c5 2a 	lds	r30, 0x2AC5	; 0x802ac5 <adca_callback>
    4d4a:	f0 91 c6 2a 	lds	r31, 0x2AC6	; 0x802ac6 <adca_callback+0x1>
    4d4e:	68 e0       	ldi	r22, 0x08	; 8
    4d50:	80 e0       	ldi	r24, 0x00	; 0
    4d52:	92 e0       	ldi	r25, 0x02	; 2
    4d54:	19 95       	eicall
}
    4d56:	ff 91       	pop	r31
    4d58:	ef 91       	pop	r30
    4d5a:	bf 91       	pop	r27
    4d5c:	af 91       	pop	r26
    4d5e:	9f 91       	pop	r25
    4d60:	8f 91       	pop	r24
    4d62:	7f 91       	pop	r23
    4d64:	6f 91       	pop	r22
    4d66:	5f 91       	pop	r21
    4d68:	4f 91       	pop	r20
    4d6a:	3f 91       	pop	r19
    4d6c:	2f 91       	pop	r18
    4d6e:	0f 90       	pop	r0
    4d70:	0b be       	out	0x3b, r0	; 59
    4d72:	0f 90       	pop	r0
    4d74:	0f be       	out	0x3f, r0	; 63
    4d76:	0f 90       	pop	r0
    4d78:	1f 90       	pop	r1
    4d7a:	18 95       	reti

00004d7c <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    4d7c:	1f 92       	push	r1
    4d7e:	0f 92       	push	r0
    4d80:	0f b6       	in	r0, 0x3f	; 63
    4d82:	0f 92       	push	r0
    4d84:	11 24       	eor	r1, r1
    4d86:	0b b6       	in	r0, 0x3b	; 59
    4d88:	0f 92       	push	r0
    4d8a:	2f 93       	push	r18
    4d8c:	3f 93       	push	r19
    4d8e:	4f 93       	push	r20
    4d90:	5f 93       	push	r21
    4d92:	6f 93       	push	r22
    4d94:	7f 93       	push	r23
    4d96:	8f 93       	push	r24
    4d98:	9f 93       	push	r25
    4d9a:	af 93       	push	r26
    4d9c:	bf 93       	push	r27
    4d9e:	ef 93       	push	r30
    4da0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    4da2:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    4da6:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    4daa:	e0 91 c3 2a 	lds	r30, 0x2AC3	; 0x802ac3 <adcb_callback>
    4dae:	f0 91 c4 2a 	lds	r31, 0x2AC4	; 0x802ac4 <adcb_callback+0x1>
    4db2:	61 e0       	ldi	r22, 0x01	; 1
    4db4:	80 e4       	ldi	r24, 0x40	; 64
    4db6:	92 e0       	ldi	r25, 0x02	; 2
    4db8:	19 95       	eicall
}
    4dba:	ff 91       	pop	r31
    4dbc:	ef 91       	pop	r30
    4dbe:	bf 91       	pop	r27
    4dc0:	af 91       	pop	r26
    4dc2:	9f 91       	pop	r25
    4dc4:	8f 91       	pop	r24
    4dc6:	7f 91       	pop	r23
    4dc8:	6f 91       	pop	r22
    4dca:	5f 91       	pop	r21
    4dcc:	4f 91       	pop	r20
    4dce:	3f 91       	pop	r19
    4dd0:	2f 91       	pop	r18
    4dd2:	0f 90       	pop	r0
    4dd4:	0b be       	out	0x3b, r0	; 59
    4dd6:	0f 90       	pop	r0
    4dd8:	0f be       	out	0x3f, r0	; 63
    4dda:	0f 90       	pop	r0
    4ddc:	1f 90       	pop	r1
    4dde:	18 95       	reti

00004de0 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    4de0:	1f 92       	push	r1
    4de2:	0f 92       	push	r0
    4de4:	0f b6       	in	r0, 0x3f	; 63
    4de6:	0f 92       	push	r0
    4de8:	11 24       	eor	r1, r1
    4dea:	0b b6       	in	r0, 0x3b	; 59
    4dec:	0f 92       	push	r0
    4dee:	2f 93       	push	r18
    4df0:	3f 93       	push	r19
    4df2:	4f 93       	push	r20
    4df4:	5f 93       	push	r21
    4df6:	6f 93       	push	r22
    4df8:	7f 93       	push	r23
    4dfa:	8f 93       	push	r24
    4dfc:	9f 93       	push	r25
    4dfe:	af 93       	push	r26
    4e00:	bf 93       	push	r27
    4e02:	ef 93       	push	r30
    4e04:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    4e06:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    4e0a:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    4e0e:	e0 91 c3 2a 	lds	r30, 0x2AC3	; 0x802ac3 <adcb_callback>
    4e12:	f0 91 c4 2a 	lds	r31, 0x2AC4	; 0x802ac4 <adcb_callback+0x1>
    4e16:	62 e0       	ldi	r22, 0x02	; 2
    4e18:	80 e4       	ldi	r24, 0x40	; 64
    4e1a:	92 e0       	ldi	r25, 0x02	; 2
    4e1c:	19 95       	eicall
}
    4e1e:	ff 91       	pop	r31
    4e20:	ef 91       	pop	r30
    4e22:	bf 91       	pop	r27
    4e24:	af 91       	pop	r26
    4e26:	9f 91       	pop	r25
    4e28:	8f 91       	pop	r24
    4e2a:	7f 91       	pop	r23
    4e2c:	6f 91       	pop	r22
    4e2e:	5f 91       	pop	r21
    4e30:	4f 91       	pop	r20
    4e32:	3f 91       	pop	r19
    4e34:	2f 91       	pop	r18
    4e36:	0f 90       	pop	r0
    4e38:	0b be       	out	0x3b, r0	; 59
    4e3a:	0f 90       	pop	r0
    4e3c:	0f be       	out	0x3f, r0	; 63
    4e3e:	0f 90       	pop	r0
    4e40:	1f 90       	pop	r1
    4e42:	18 95       	reti

00004e44 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    4e44:	1f 92       	push	r1
    4e46:	0f 92       	push	r0
    4e48:	0f b6       	in	r0, 0x3f	; 63
    4e4a:	0f 92       	push	r0
    4e4c:	11 24       	eor	r1, r1
    4e4e:	0b b6       	in	r0, 0x3b	; 59
    4e50:	0f 92       	push	r0
    4e52:	2f 93       	push	r18
    4e54:	3f 93       	push	r19
    4e56:	4f 93       	push	r20
    4e58:	5f 93       	push	r21
    4e5a:	6f 93       	push	r22
    4e5c:	7f 93       	push	r23
    4e5e:	8f 93       	push	r24
    4e60:	9f 93       	push	r25
    4e62:	af 93       	push	r26
    4e64:	bf 93       	push	r27
    4e66:	ef 93       	push	r30
    4e68:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    4e6a:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    4e6e:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    4e72:	e0 91 c3 2a 	lds	r30, 0x2AC3	; 0x802ac3 <adcb_callback>
    4e76:	f0 91 c4 2a 	lds	r31, 0x2AC4	; 0x802ac4 <adcb_callback+0x1>
    4e7a:	64 e0       	ldi	r22, 0x04	; 4
    4e7c:	80 e4       	ldi	r24, 0x40	; 64
    4e7e:	92 e0       	ldi	r25, 0x02	; 2
    4e80:	19 95       	eicall
}
    4e82:	ff 91       	pop	r31
    4e84:	ef 91       	pop	r30
    4e86:	bf 91       	pop	r27
    4e88:	af 91       	pop	r26
    4e8a:	9f 91       	pop	r25
    4e8c:	8f 91       	pop	r24
    4e8e:	7f 91       	pop	r23
    4e90:	6f 91       	pop	r22
    4e92:	5f 91       	pop	r21
    4e94:	4f 91       	pop	r20
    4e96:	3f 91       	pop	r19
    4e98:	2f 91       	pop	r18
    4e9a:	0f 90       	pop	r0
    4e9c:	0b be       	out	0x3b, r0	; 59
    4e9e:	0f 90       	pop	r0
    4ea0:	0f be       	out	0x3f, r0	; 63
    4ea2:	0f 90       	pop	r0
    4ea4:	1f 90       	pop	r1
    4ea6:	18 95       	reti

00004ea8 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    4ea8:	1f 92       	push	r1
    4eaa:	0f 92       	push	r0
    4eac:	0f b6       	in	r0, 0x3f	; 63
    4eae:	0f 92       	push	r0
    4eb0:	11 24       	eor	r1, r1
    4eb2:	0b b6       	in	r0, 0x3b	; 59
    4eb4:	0f 92       	push	r0
    4eb6:	2f 93       	push	r18
    4eb8:	3f 93       	push	r19
    4eba:	4f 93       	push	r20
    4ebc:	5f 93       	push	r21
    4ebe:	6f 93       	push	r22
    4ec0:	7f 93       	push	r23
    4ec2:	8f 93       	push	r24
    4ec4:	9f 93       	push	r25
    4ec6:	af 93       	push	r26
    4ec8:	bf 93       	push	r27
    4eca:	ef 93       	push	r30
    4ecc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    4ece:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    4ed2:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    4ed6:	e0 91 c3 2a 	lds	r30, 0x2AC3	; 0x802ac3 <adcb_callback>
    4eda:	f0 91 c4 2a 	lds	r31, 0x2AC4	; 0x802ac4 <adcb_callback+0x1>
    4ede:	68 e0       	ldi	r22, 0x08	; 8
    4ee0:	80 e4       	ldi	r24, 0x40	; 64
    4ee2:	92 e0       	ldi	r25, 0x02	; 2
    4ee4:	19 95       	eicall
}
    4ee6:	ff 91       	pop	r31
    4ee8:	ef 91       	pop	r30
    4eea:	bf 91       	pop	r27
    4eec:	af 91       	pop	r26
    4eee:	9f 91       	pop	r25
    4ef0:	8f 91       	pop	r24
    4ef2:	7f 91       	pop	r23
    4ef4:	6f 91       	pop	r22
    4ef6:	5f 91       	pop	r21
    4ef8:	4f 91       	pop	r20
    4efa:	3f 91       	pop	r19
    4efc:	2f 91       	pop	r18
    4efe:	0f 90       	pop	r0
    4f00:	0b be       	out	0x3b, r0	; 59
    4f02:	0f 90       	pop	r0
    4f04:	0f be       	out	0x3f, r0	; 63
    4f06:	0f 90       	pop	r0
    4f08:	1f 90       	pop	r1
    4f0a:	18 95       	reti

00004f0c <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    4f0c:	bf 92       	push	r11
    4f0e:	cf 92       	push	r12
    4f10:	df 92       	push	r13
    4f12:	ef 92       	push	r14
    4f14:	ff 92       	push	r15
    4f16:	0f 93       	push	r16
    4f18:	1f 93       	push	r17
    4f1a:	cf 93       	push	r28
    4f1c:	df 93       	push	r29
    4f1e:	1f 92       	push	r1
    4f20:	cd b7       	in	r28, 0x3d	; 61
    4f22:	de b7       	in	r29, 0x3e	; 62
    4f24:	8c 01       	movw	r16, r24
    4f26:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    4f28:	81 15       	cp	r24, r1
    4f2a:	22 e0       	ldi	r18, 0x02	; 2
    4f2c:	92 07       	cpc	r25, r18
    4f2e:	81 f4       	brne	.+32     	; 0x4f50 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    4f30:	61 e2       	ldi	r22, 0x21	; 33
    4f32:	70 e0       	ldi	r23, 0x00	; 0
    4f34:	82 e0       	ldi	r24, 0x02	; 2
    4f36:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    4f3a:	c8 2e       	mov	r12, r24
    4f3c:	d1 2c       	mov	r13, r1
    4f3e:	60 e2       	ldi	r22, 0x20	; 32
    4f40:	70 e0       	ldi	r23, 0x00	; 0
    4f42:	82 e0       	ldi	r24, 0x02	; 2
    4f44:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    4f48:	dc 2c       	mov	r13, r12
    4f4a:	cc 24       	eor	r12, r12
    4f4c:	c8 2a       	or	r12, r24
    4f4e:	12 c0       	rjmp	.+36     	; 0x4f74 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    4f50:	80 34       	cpi	r24, 0x40	; 64
    4f52:	92 40       	sbci	r25, 0x02	; 2
    4f54:	d1 f5       	brne	.+116    	; 0x4fca <adc_write_configuration+0xbe>
    4f56:	65 e2       	ldi	r22, 0x25	; 37
    4f58:	70 e0       	ldi	r23, 0x00	; 0
    4f5a:	82 e0       	ldi	r24, 0x02	; 2
    4f5c:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    4f60:	c8 2e       	mov	r12, r24
    4f62:	d1 2c       	mov	r13, r1
    4f64:	64 e2       	ldi	r22, 0x24	; 36
    4f66:	70 e0       	ldi	r23, 0x00	; 0
    4f68:	82 e0       	ldi	r24, 0x02	; 2
    4f6a:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    4f6e:	dc 2c       	mov	r13, r12
    4f70:	cc 24       	eor	r12, r12
    4f72:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4f74:	8f b7       	in	r24, 0x3f	; 63
    4f76:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4f78:	f8 94       	cli
	return flags;
    4f7a:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    4f7c:	c8 01       	movw	r24, r16
    4f7e:	ca dd       	rcall	.-1132   	; 0x4b14 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    4f80:	f8 01       	movw	r30, r16
    4f82:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    4f84:	92 e0       	ldi	r25, 0x02	; 2
    4f86:	90 83       	st	Z, r25
	adc->CAL = cal;
    4f88:	c4 86       	std	Z+12, r12	; 0x0c
    4f8a:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    4f8c:	f7 01       	movw	r30, r14
    4f8e:	25 81       	ldd	r18, Z+5	; 0x05
    4f90:	36 81       	ldd	r19, Z+6	; 0x06
    4f92:	f8 01       	movw	r30, r16
    4f94:	20 8f       	std	Z+24, r18	; 0x18
    4f96:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    4f98:	f7 01       	movw	r30, r14
    4f9a:	92 81       	ldd	r25, Z+2	; 0x02
    4f9c:	f8 01       	movw	r30, r16
    4f9e:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    4fa0:	f7 01       	movw	r30, r14
    4fa2:	94 81       	ldd	r25, Z+4	; 0x04
    4fa4:	f8 01       	movw	r30, r16
    4fa6:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    4fa8:	f7 01       	movw	r30, r14
    4faa:	93 81       	ldd	r25, Z+3	; 0x03
    4fac:	f8 01       	movw	r30, r16
    4fae:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    4fb0:	f7 01       	movw	r30, r14
    4fb2:	91 81       	ldd	r25, Z+1	; 0x01
    4fb4:	f8 01       	movw	r30, r16
    4fb6:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    4fb8:	81 70       	andi	r24, 0x01	; 1
    4fba:	f7 01       	movw	r30, r14
    4fbc:	90 81       	ld	r25, Z
    4fbe:	89 2b       	or	r24, r25
    4fc0:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    4fc2:	80 83       	st	Z, r24
    4fc4:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4fc6:	c7 dd       	rcall	.-1138   	; 0x4b56 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    4fc8:	bf be       	out	0x3f, r11	; 63
    4fca:	0f 90       	pop	r0
    4fcc:	df 91       	pop	r29
    4fce:	cf 91       	pop	r28
    4fd0:	1f 91       	pop	r17
    4fd2:	0f 91       	pop	r16
    4fd4:	ff 90       	pop	r15
    4fd6:	ef 90       	pop	r14
    4fd8:	df 90       	pop	r13
    4fda:	cf 90       	pop	r12
    4fdc:	bf 90       	pop	r11
    4fde:	08 95       	ret

00004fe0 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    4fe0:	df 92       	push	r13
    4fe2:	ef 92       	push	r14
    4fe4:	ff 92       	push	r15
    4fe6:	0f 93       	push	r16
    4fe8:	1f 93       	push	r17
    4fea:	cf 93       	push	r28
    4fec:	df 93       	push	r29
    4fee:	1f 92       	push	r1
    4ff0:	cd b7       	in	r28, 0x3d	; 61
    4ff2:	de b7       	in	r29, 0x3e	; 62
    4ff4:	8c 01       	movw	r16, r24
    4ff6:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4ff8:	8f b7       	in	r24, 0x3f	; 63
    4ffa:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4ffc:	f8 94       	cli
	return flags;
    4ffe:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    5000:	c8 01       	movw	r24, r16
    5002:	88 dd       	rcall	.-1264   	; 0x4b14 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    5004:	f8 01       	movw	r30, r16
    5006:	80 81       	ld	r24, Z
    5008:	80 7c       	andi	r24, 0xC0	; 192
    500a:	f7 01       	movw	r30, r14
    500c:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    500e:	f8 01       	movw	r30, r16
    5010:	80 8d       	ldd	r24, Z+24	; 0x18
    5012:	91 8d       	ldd	r25, Z+25	; 0x19
    5014:	f7 01       	movw	r30, r14
    5016:	85 83       	std	Z+5, r24	; 0x05
    5018:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    501a:	f8 01       	movw	r30, r16
    501c:	82 81       	ldd	r24, Z+2	; 0x02
    501e:	f7 01       	movw	r30, r14
    5020:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    5022:	f8 01       	movw	r30, r16
    5024:	84 81       	ldd	r24, Z+4	; 0x04
    5026:	f7 01       	movw	r30, r14
    5028:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    502a:	f8 01       	movw	r30, r16
    502c:	83 81       	ldd	r24, Z+3	; 0x03
    502e:	f7 01       	movw	r30, r14
    5030:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    5032:	f8 01       	movw	r30, r16
    5034:	81 81       	ldd	r24, Z+1	; 0x01
    5036:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    5038:	81 83       	std	Z+1, r24	; 0x01
    503a:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    503c:	8c dd       	rcall	.-1256   	; 0x4b56 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    503e:	df be       	out	0x3f, r13	; 63
    5040:	0f 90       	pop	r0
    5042:	df 91       	pop	r29
    5044:	cf 91       	pop	r28
    5046:	1f 91       	pop	r17
    5048:	0f 91       	pop	r16
    504a:	ff 90       	pop	r15
    504c:	ef 90       	pop	r14
    504e:	df 90       	pop	r13
    5050:	08 95       	ret

00005052 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    5052:	af 92       	push	r10
    5054:	bf 92       	push	r11
    5056:	cf 92       	push	r12
    5058:	df 92       	push	r13
    505a:	ef 92       	push	r14
    505c:	ff 92       	push	r15
    505e:	0f 93       	push	r16
    5060:	1f 93       	push	r17
    5062:	cf 93       	push	r28
    5064:	df 93       	push	r29
    5066:	1f 92       	push	r1
    5068:	cd b7       	in	r28, 0x3d	; 61
    506a:	de b7       	in	r29, 0x3e	; 62
    506c:	6c 01       	movw	r12, r24
    506e:	b6 2e       	mov	r11, r22
    5070:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    5072:	86 2f       	mov	r24, r22
    5074:	83 70       	andi	r24, 0x03	; 3
    5076:	29 f4       	brne	.+10     	; 0x5082 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    5078:	96 2f       	mov	r25, r22
    507a:	96 95       	lsr	r25
    507c:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    507e:	82 e0       	ldi	r24, 0x02	; 2
    5080:	02 c0       	rjmp	.+4      	; 0x5086 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    5082:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    5084:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    5086:	90 ff       	sbrs	r25, 0
		index++;
    5088:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    508a:	86 01       	movw	r16, r12
    508c:	00 5e       	subi	r16, 0xE0	; 224
    508e:	1f 4f       	sbci	r17, 0xFF	; 255
    5090:	98 e0       	ldi	r25, 0x08	; 8
    5092:	89 9f       	mul	r24, r25
    5094:	00 0d       	add	r16, r0
    5096:	11 1d       	adc	r17, r1
    5098:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    509a:	8f b7       	in	r24, 0x3f	; 63
    509c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    509e:	f8 94       	cli
	return flags;
    50a0:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    50a2:	c6 01       	movw	r24, r12
    50a4:	37 dd       	rcall	.-1426   	; 0x4b14 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    50a6:	f7 01       	movw	r30, r14
    50a8:	80 81       	ld	r24, Z
    50aa:	f8 01       	movw	r30, r16
    50ac:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    50ae:	f7 01       	movw	r30, r14
    50b0:	82 81       	ldd	r24, Z+2	; 0x02
    50b2:	f8 01       	movw	r30, r16
    50b4:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    50b6:	f7 01       	movw	r30, r14
    50b8:	81 81       	ldd	r24, Z+1	; 0x01
    50ba:	f8 01       	movw	r30, r16
    50bc:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    50be:	b0 fe       	sbrs	r11, 0
    50c0:	04 c0       	rjmp	.+8      	; 0x50ca <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    50c2:	f7 01       	movw	r30, r14
    50c4:	83 81       	ldd	r24, Z+3	; 0x03
    50c6:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    50c8:	86 83       	std	Z+6, r24	; 0x06
    50ca:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    50cc:	44 dd       	rcall	.-1400   	; 0x4b56 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    50ce:	af be       	out	0x3f, r10	; 63
    50d0:	0f 90       	pop	r0
    50d2:	df 91       	pop	r29
    50d4:	cf 91       	pop	r28
    50d6:	1f 91       	pop	r17
    50d8:	0f 91       	pop	r16
    50da:	ff 90       	pop	r15
    50dc:	ef 90       	pop	r14
    50de:	df 90       	pop	r13
    50e0:	cf 90       	pop	r12
    50e2:	bf 90       	pop	r11
    50e4:	af 90       	pop	r10
    50e6:	08 95       	ret

000050e8 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    50e8:	af 92       	push	r10
    50ea:	bf 92       	push	r11
    50ec:	cf 92       	push	r12
    50ee:	df 92       	push	r13
    50f0:	ef 92       	push	r14
    50f2:	ff 92       	push	r15
    50f4:	0f 93       	push	r16
    50f6:	1f 93       	push	r17
    50f8:	cf 93       	push	r28
    50fa:	df 93       	push	r29
    50fc:	1f 92       	push	r1
    50fe:	cd b7       	in	r28, 0x3d	; 61
    5100:	de b7       	in	r29, 0x3e	; 62
    5102:	6c 01       	movw	r12, r24
    5104:	b6 2e       	mov	r11, r22
    5106:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    5108:	86 2f       	mov	r24, r22
    510a:	83 70       	andi	r24, 0x03	; 3
    510c:	29 f4       	brne	.+10     	; 0x5118 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    510e:	96 2f       	mov	r25, r22
    5110:	96 95       	lsr	r25
    5112:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    5114:	82 e0       	ldi	r24, 0x02	; 2
    5116:	02 c0       	rjmp	.+4      	; 0x511c <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    5118:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    511a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    511c:	90 ff       	sbrs	r25, 0
		index++;
    511e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    5120:	86 01       	movw	r16, r12
    5122:	00 5e       	subi	r16, 0xE0	; 224
    5124:	1f 4f       	sbci	r17, 0xFF	; 255
    5126:	98 e0       	ldi	r25, 0x08	; 8
    5128:	89 9f       	mul	r24, r25
    512a:	00 0d       	add	r16, r0
    512c:	11 1d       	adc	r17, r1
    512e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5130:	8f b7       	in	r24, 0x3f	; 63
    5132:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5134:	f8 94       	cli
	return flags;
    5136:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    5138:	c6 01       	movw	r24, r12
    513a:	ec dc       	rcall	.-1576   	; 0x4b14 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    513c:	f8 01       	movw	r30, r16
    513e:	80 81       	ld	r24, Z
    5140:	f7 01       	movw	r30, r14
    5142:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    5144:	f8 01       	movw	r30, r16
    5146:	82 81       	ldd	r24, Z+2	; 0x02
    5148:	f7 01       	movw	r30, r14
    514a:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    514c:	f8 01       	movw	r30, r16
    514e:	81 81       	ldd	r24, Z+1	; 0x01
    5150:	f7 01       	movw	r30, r14
    5152:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    5154:	b0 fe       	sbrs	r11, 0
    5156:	04 c0       	rjmp	.+8      	; 0x5160 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    5158:	f8 01       	movw	r30, r16
    515a:	86 81       	ldd	r24, Z+6	; 0x06
    515c:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    515e:	83 83       	std	Z+3, r24	; 0x03
    5160:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5162:	f9 dc       	rcall	.-1550   	; 0x4b56 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    5164:	af be       	out	0x3f, r10	; 63
    5166:	0f 90       	pop	r0
    5168:	df 91       	pop	r29
    516a:	cf 91       	pop	r28
    516c:	1f 91       	pop	r17
    516e:	0f 91       	pop	r16
    5170:	ff 90       	pop	r15
    5172:	ef 90       	pop	r14
    5174:	df 90       	pop	r13
    5176:	cf 90       	pop	r12
    5178:	bf 90       	pop	r11
    517a:	af 90       	pop	r10
    517c:	08 95       	ret

0000517e <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    517e:	80 32       	cpi	r24, 0x20	; 32
    5180:	93 40       	sbci	r25, 0x03	; 3
    5182:	61 f4       	brne	.+24     	; 0x519c <dac_enable_clock+0x1e>
    5184:	80 91 8e 26 	lds	r24, 0x268E	; 0x80268e <dacb_enable_count>
    5188:	91 e0       	ldi	r25, 0x01	; 1
    518a:	98 0f       	add	r25, r24
    518c:	90 93 8e 26 	sts	0x268E, r25	; 0x80268e <dacb_enable_count>
    5190:	81 11       	cpse	r24, r1
    5192:	04 c0       	rjmp	.+8      	; 0x519c <dac_enable_clock+0x1e>
    5194:	64 e0       	ldi	r22, 0x04	; 4
    5196:	82 e0       	ldi	r24, 0x02	; 2
    5198:	0c 94 da 48 	jmp	0x91b4	; 0x91b4 <sysclk_enable_module>
    519c:	08 95       	ret

0000519e <dac_disable_clock>:
    519e:	80 32       	cpi	r24, 0x20	; 32
    51a0:	93 40       	sbci	r25, 0x03	; 3
    51a2:	59 f4       	brne	.+22     	; 0x51ba <dac_disable_clock+0x1c>
    51a4:	80 91 8e 26 	lds	r24, 0x268E	; 0x80268e <dacb_enable_count>
    51a8:	81 50       	subi	r24, 0x01	; 1
    51aa:	80 93 8e 26 	sts	0x268E, r24	; 0x80268e <dacb_enable_count>
    51ae:	81 11       	cpse	r24, r1
    51b0:	04 c0       	rjmp	.+8      	; 0x51ba <dac_disable_clock+0x1c>
    51b2:	64 e0       	ldi	r22, 0x04	; 4
    51b4:	82 e0       	ldi	r24, 0x02	; 2
    51b6:	0c 94 f0 48 	jmp	0x91e0	; 0x91e0 <sysclk_disable_module>
    51ba:	08 95       	ret

000051bc <dac_enable>:
    51bc:	ef 92       	push	r14
    51be:	ff 92       	push	r15
    51c0:	1f 93       	push	r17
    51c2:	cf 93       	push	r28
    51c4:	df 93       	push	r29
    51c6:	1f 92       	push	r1
    51c8:	1f 92       	push	r1
    51ca:	cd b7       	in	r28, 0x3d	; 61
    51cc:	de b7       	in	r29, 0x3e	; 62
    51ce:	2f b7       	in	r18, 0x3f	; 63
    51d0:	29 83       	std	Y+1, r18	; 0x01
    51d2:	f8 94       	cli
    51d4:	19 81       	ldd	r17, Y+1	; 0x01
    51d6:	20 91 d8 2a 	lds	r18, 0x2AD8	; 0x802ad8 <sleepmgr_locks+0x1>
    51da:	2f 3f       	cpi	r18, 0xFF	; 255
    51dc:	09 f4       	brne	.+2      	; 0x51e0 <dac_enable+0x24>
    51de:	ff cf       	rjmp	.-2      	; 0x51de <dac_enable+0x22>
    51e0:	7c 01       	movw	r14, r24
    51e2:	8f b7       	in	r24, 0x3f	; 63
    51e4:	8a 83       	std	Y+2, r24	; 0x02
    51e6:	f8 94       	cli
    51e8:	9a 81       	ldd	r25, Y+2	; 0x02
    51ea:	e7 ed       	ldi	r30, 0xD7	; 215
    51ec:	fa e2       	ldi	r31, 0x2A	; 42
    51ee:	81 81       	ldd	r24, Z+1	; 0x01
    51f0:	8f 5f       	subi	r24, 0xFF	; 255
    51f2:	81 83       	std	Z+1, r24	; 0x01
    51f4:	9f bf       	out	0x3f, r25	; 63
    51f6:	c7 01       	movw	r24, r14
    51f8:	c2 df       	rcall	.-124    	; 0x517e <dac_enable_clock>
    51fa:	f7 01       	movw	r30, r14
    51fc:	80 81       	ld	r24, Z
    51fe:	81 60       	ori	r24, 0x01	; 1
    5200:	80 83       	st	Z, r24
    5202:	1f bf       	out	0x3f, r17	; 63
    5204:	0f 90       	pop	r0
    5206:	0f 90       	pop	r0
    5208:	df 91       	pop	r29
    520a:	cf 91       	pop	r28
    520c:	1f 91       	pop	r17
    520e:	ff 90       	pop	r15
    5210:	ef 90       	pop	r14
    5212:	08 95       	ret

00005214 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    5214:	9f 92       	push	r9
    5216:	af 92       	push	r10
    5218:	bf 92       	push	r11
    521a:	cf 92       	push	r12
    521c:	df 92       	push	r13
    521e:	ef 92       	push	r14
    5220:	ff 92       	push	r15
    5222:	0f 93       	push	r16
    5224:	1f 93       	push	r17
    5226:	cf 93       	push	r28
    5228:	df 93       	push	r29
    522a:	1f 92       	push	r1
    522c:	cd b7       	in	r28, 0x3d	; 61
    522e:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    5230:	80 32       	cpi	r24, 0x20	; 32
    5232:	23 e0       	ldi	r18, 0x03	; 3
    5234:	92 07       	cpc	r25, r18
    5236:	09 f0       	breq	.+2      	; 0x523a <dac_write_configuration+0x26>
    5238:	3c c0       	rjmp	.+120    	; 0x52b2 <dac_write_configuration+0x9e>
    523a:	7b 01       	movw	r14, r22
    523c:	8c 01       	movw	r16, r24
    523e:	63 e3       	ldi	r22, 0x33	; 51
    5240:	70 e0       	ldi	r23, 0x00	; 0
    5242:	82 e0       	ldi	r24, 0x02	; 2
    5244:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
    5248:	98 2e       	mov	r9, r24
    524a:	62 e3       	ldi	r22, 0x32	; 50
    524c:	70 e0       	ldi	r23, 0x00	; 0
    524e:	82 e0       	ldi	r24, 0x02	; 2
    5250:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
    5254:	a8 2e       	mov	r10, r24
    5256:	67 e3       	ldi	r22, 0x37	; 55
    5258:	70 e0       	ldi	r23, 0x00	; 0
    525a:	82 e0       	ldi	r24, 0x02	; 2
    525c:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
    5260:	b8 2e       	mov	r11, r24
    5262:	66 e3       	ldi	r22, 0x36	; 54
    5264:	70 e0       	ldi	r23, 0x00	; 0
    5266:	82 e0       	ldi	r24, 0x02	; 2
    5268:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
    526c:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    526e:	8f b7       	in	r24, 0x3f	; 63
    5270:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5272:	f8 94       	cli
	return flags;
    5274:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    5276:	c8 01       	movw	r24, r16
    5278:	82 df       	rcall	.-252    	; 0x517e <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    527a:	f8 01       	movw	r30, r16
    527c:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    527e:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    5280:	f7 01       	movw	r30, r14
    5282:	91 81       	ldd	r25, Z+1	; 0x01
    5284:	f8 01       	movw	r30, r16
    5286:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    5288:	f7 01       	movw	r30, r14
    528a:	92 81       	ldd	r25, Z+2	; 0x02
    528c:	f8 01       	movw	r30, r16
    528e:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    5290:	f7 01       	movw	r30, r14
    5292:	93 81       	ldd	r25, Z+3	; 0x03
    5294:	f8 01       	movw	r30, r16
    5296:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    5298:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    529a:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    529c:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    529e:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    52a0:	81 70       	andi	r24, 0x01	; 1
    52a2:	f7 01       	movw	r30, r14
    52a4:	90 81       	ld	r25, Z
    52a6:	89 2b       	or	r24, r25
    52a8:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    52aa:	80 83       	st	Z, r24
    52ac:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    52ae:	77 df       	rcall	.-274    	; 0x519e <dac_disable_clock>
	cpu_irq_restore(flags);
}
    52b0:	df be       	out	0x3f, r13	; 63
    52b2:	0f 90       	pop	r0
    52b4:	df 91       	pop	r29
    52b6:	cf 91       	pop	r28
    52b8:	1f 91       	pop	r17
    52ba:	0f 91       	pop	r16
    52bc:	ff 90       	pop	r15
    52be:	ef 90       	pop	r14
    52c0:	df 90       	pop	r13
    52c2:	cf 90       	pop	r12
    52c4:	bf 90       	pop	r11
    52c6:	af 90       	pop	r10
    52c8:	9f 90       	pop	r9
    52ca:	08 95       	ret

000052cc <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    52cc:	df 92       	push	r13
    52ce:	ef 92       	push	r14
    52d0:	ff 92       	push	r15
    52d2:	0f 93       	push	r16
    52d4:	1f 93       	push	r17
    52d6:	cf 93       	push	r28
    52d8:	df 93       	push	r29
    52da:	1f 92       	push	r1
    52dc:	cd b7       	in	r28, 0x3d	; 61
    52de:	de b7       	in	r29, 0x3e	; 62
    52e0:	8c 01       	movw	r16, r24
    52e2:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    52e4:	8f b7       	in	r24, 0x3f	; 63
    52e6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    52e8:	f8 94       	cli
	return flags;
    52ea:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    52ec:	c8 01       	movw	r24, r16
    52ee:	47 df       	rcall	.-370    	; 0x517e <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    52f0:	f8 01       	movw	r30, r16
    52f2:	80 81       	ld	r24, Z
    52f4:	8e 7f       	andi	r24, 0xFE	; 254
    52f6:	f7 01       	movw	r30, r14
    52f8:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    52fa:	f8 01       	movw	r30, r16
    52fc:	81 81       	ldd	r24, Z+1	; 0x01
    52fe:	f7 01       	movw	r30, r14
    5300:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    5302:	f8 01       	movw	r30, r16
    5304:	82 81       	ldd	r24, Z+2	; 0x02
    5306:	f7 01       	movw	r30, r14
    5308:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    530a:	f8 01       	movw	r30, r16
    530c:	83 81       	ldd	r24, Z+3	; 0x03
    530e:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    5310:	83 83       	std	Z+3, r24	; 0x03
    5312:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5314:	44 df       	rcall	.-376    	; 0x519e <dac_disable_clock>
	cpu_irq_restore(flags);
}
    5316:	df be       	out	0x3f, r13	; 63
    5318:	0f 90       	pop	r0
    531a:	df 91       	pop	r29
    531c:	cf 91       	pop	r28
    531e:	1f 91       	pop	r17
    5320:	0f 91       	pop	r16
    5322:	ff 90       	pop	r15
    5324:	ef 90       	pop	r14
    5326:	df 90       	pop	r13
    5328:	08 95       	ret

0000532a <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    532a:	1f 92       	push	r1
    532c:	0f 92       	push	r0
    532e:	0f b6       	in	r0, 0x3f	; 63
    5330:	0f 92       	push	r0
    5332:	11 24       	eor	r1, r1
    5334:	0b b6       	in	r0, 0x3b	; 59
    5336:	0f 92       	push	r0
    5338:	2f 93       	push	r18
    533a:	3f 93       	push	r19
    533c:	4f 93       	push	r20
    533e:	5f 93       	push	r21
    5340:	6f 93       	push	r22
    5342:	7f 93       	push	r23
    5344:	8f 93       	push	r24
    5346:	9f 93       	push	r25
    5348:	af 93       	push	r26
    534a:	bf 93       	push	r27
    534c:	ef 93       	push	r30
    534e:	ff 93       	push	r31
    5350:	e0 91 d5 26 	lds	r30, 0x26D5	; 0x8026d5 <tc_tcc0_ovf_callback>
    5354:	f0 91 d6 26 	lds	r31, 0x26D6	; 0x8026d6 <tc_tcc0_ovf_callback+0x1>
    5358:	30 97       	sbiw	r30, 0x00	; 0
    535a:	09 f0       	breq	.+2      	; 0x535e <__vector_14+0x34>
    535c:	19 95       	eicall
    535e:	ff 91       	pop	r31
    5360:	ef 91       	pop	r30
    5362:	bf 91       	pop	r27
    5364:	af 91       	pop	r26
    5366:	9f 91       	pop	r25
    5368:	8f 91       	pop	r24
    536a:	7f 91       	pop	r23
    536c:	6f 91       	pop	r22
    536e:	5f 91       	pop	r21
    5370:	4f 91       	pop	r20
    5372:	3f 91       	pop	r19
    5374:	2f 91       	pop	r18
    5376:	0f 90       	pop	r0
    5378:	0b be       	out	0x3b, r0	; 59
    537a:	0f 90       	pop	r0
    537c:	0f be       	out	0x3f, r0	; 63
    537e:	0f 90       	pop	r0
    5380:	1f 90       	pop	r1
    5382:	18 95       	reti

00005384 <__vector_15>:
    5384:	1f 92       	push	r1
    5386:	0f 92       	push	r0
    5388:	0f b6       	in	r0, 0x3f	; 63
    538a:	0f 92       	push	r0
    538c:	11 24       	eor	r1, r1
    538e:	0b b6       	in	r0, 0x3b	; 59
    5390:	0f 92       	push	r0
    5392:	2f 93       	push	r18
    5394:	3f 93       	push	r19
    5396:	4f 93       	push	r20
    5398:	5f 93       	push	r21
    539a:	6f 93       	push	r22
    539c:	7f 93       	push	r23
    539e:	8f 93       	push	r24
    53a0:	9f 93       	push	r25
    53a2:	af 93       	push	r26
    53a4:	bf 93       	push	r27
    53a6:	ef 93       	push	r30
    53a8:	ff 93       	push	r31
    53aa:	e0 91 d3 26 	lds	r30, 0x26D3	; 0x8026d3 <tc_tcc0_err_callback>
    53ae:	f0 91 d4 26 	lds	r31, 0x26D4	; 0x8026d4 <tc_tcc0_err_callback+0x1>
    53b2:	30 97       	sbiw	r30, 0x00	; 0
    53b4:	09 f0       	breq	.+2      	; 0x53b8 <__vector_15+0x34>
    53b6:	19 95       	eicall
    53b8:	ff 91       	pop	r31
    53ba:	ef 91       	pop	r30
    53bc:	bf 91       	pop	r27
    53be:	af 91       	pop	r26
    53c0:	9f 91       	pop	r25
    53c2:	8f 91       	pop	r24
    53c4:	7f 91       	pop	r23
    53c6:	6f 91       	pop	r22
    53c8:	5f 91       	pop	r21
    53ca:	4f 91       	pop	r20
    53cc:	3f 91       	pop	r19
    53ce:	2f 91       	pop	r18
    53d0:	0f 90       	pop	r0
    53d2:	0b be       	out	0x3b, r0	; 59
    53d4:	0f 90       	pop	r0
    53d6:	0f be       	out	0x3f, r0	; 63
    53d8:	0f 90       	pop	r0
    53da:	1f 90       	pop	r1
    53dc:	18 95       	reti

000053de <__vector_16>:
    53de:	1f 92       	push	r1
    53e0:	0f 92       	push	r0
    53e2:	0f b6       	in	r0, 0x3f	; 63
    53e4:	0f 92       	push	r0
    53e6:	11 24       	eor	r1, r1
    53e8:	0b b6       	in	r0, 0x3b	; 59
    53ea:	0f 92       	push	r0
    53ec:	2f 93       	push	r18
    53ee:	3f 93       	push	r19
    53f0:	4f 93       	push	r20
    53f2:	5f 93       	push	r21
    53f4:	6f 93       	push	r22
    53f6:	7f 93       	push	r23
    53f8:	8f 93       	push	r24
    53fa:	9f 93       	push	r25
    53fc:	af 93       	push	r26
    53fe:	bf 93       	push	r27
    5400:	ef 93       	push	r30
    5402:	ff 93       	push	r31
    5404:	e0 91 d1 26 	lds	r30, 0x26D1	; 0x8026d1 <tc_tcc0_cca_callback>
    5408:	f0 91 d2 26 	lds	r31, 0x26D2	; 0x8026d2 <tc_tcc0_cca_callback+0x1>
    540c:	30 97       	sbiw	r30, 0x00	; 0
    540e:	09 f0       	breq	.+2      	; 0x5412 <__vector_16+0x34>
    5410:	19 95       	eicall
    5412:	ff 91       	pop	r31
    5414:	ef 91       	pop	r30
    5416:	bf 91       	pop	r27
    5418:	af 91       	pop	r26
    541a:	9f 91       	pop	r25
    541c:	8f 91       	pop	r24
    541e:	7f 91       	pop	r23
    5420:	6f 91       	pop	r22
    5422:	5f 91       	pop	r21
    5424:	4f 91       	pop	r20
    5426:	3f 91       	pop	r19
    5428:	2f 91       	pop	r18
    542a:	0f 90       	pop	r0
    542c:	0b be       	out	0x3b, r0	; 59
    542e:	0f 90       	pop	r0
    5430:	0f be       	out	0x3f, r0	; 63
    5432:	0f 90       	pop	r0
    5434:	1f 90       	pop	r1
    5436:	18 95       	reti

00005438 <__vector_17>:
    5438:	1f 92       	push	r1
    543a:	0f 92       	push	r0
    543c:	0f b6       	in	r0, 0x3f	; 63
    543e:	0f 92       	push	r0
    5440:	11 24       	eor	r1, r1
    5442:	0b b6       	in	r0, 0x3b	; 59
    5444:	0f 92       	push	r0
    5446:	2f 93       	push	r18
    5448:	3f 93       	push	r19
    544a:	4f 93       	push	r20
    544c:	5f 93       	push	r21
    544e:	6f 93       	push	r22
    5450:	7f 93       	push	r23
    5452:	8f 93       	push	r24
    5454:	9f 93       	push	r25
    5456:	af 93       	push	r26
    5458:	bf 93       	push	r27
    545a:	ef 93       	push	r30
    545c:	ff 93       	push	r31
    545e:	e0 91 cf 26 	lds	r30, 0x26CF	; 0x8026cf <tc_tcc0_ccb_callback>
    5462:	f0 91 d0 26 	lds	r31, 0x26D0	; 0x8026d0 <tc_tcc0_ccb_callback+0x1>
    5466:	30 97       	sbiw	r30, 0x00	; 0
    5468:	09 f0       	breq	.+2      	; 0x546c <__vector_17+0x34>
    546a:	19 95       	eicall
    546c:	ff 91       	pop	r31
    546e:	ef 91       	pop	r30
    5470:	bf 91       	pop	r27
    5472:	af 91       	pop	r26
    5474:	9f 91       	pop	r25
    5476:	8f 91       	pop	r24
    5478:	7f 91       	pop	r23
    547a:	6f 91       	pop	r22
    547c:	5f 91       	pop	r21
    547e:	4f 91       	pop	r20
    5480:	3f 91       	pop	r19
    5482:	2f 91       	pop	r18
    5484:	0f 90       	pop	r0
    5486:	0b be       	out	0x3b, r0	; 59
    5488:	0f 90       	pop	r0
    548a:	0f be       	out	0x3f, r0	; 63
    548c:	0f 90       	pop	r0
    548e:	1f 90       	pop	r1
    5490:	18 95       	reti

00005492 <__vector_18>:
    5492:	1f 92       	push	r1
    5494:	0f 92       	push	r0
    5496:	0f b6       	in	r0, 0x3f	; 63
    5498:	0f 92       	push	r0
    549a:	11 24       	eor	r1, r1
    549c:	0b b6       	in	r0, 0x3b	; 59
    549e:	0f 92       	push	r0
    54a0:	2f 93       	push	r18
    54a2:	3f 93       	push	r19
    54a4:	4f 93       	push	r20
    54a6:	5f 93       	push	r21
    54a8:	6f 93       	push	r22
    54aa:	7f 93       	push	r23
    54ac:	8f 93       	push	r24
    54ae:	9f 93       	push	r25
    54b0:	af 93       	push	r26
    54b2:	bf 93       	push	r27
    54b4:	ef 93       	push	r30
    54b6:	ff 93       	push	r31
    54b8:	e0 91 cd 26 	lds	r30, 0x26CD	; 0x8026cd <tc_tcc0_ccc_callback>
    54bc:	f0 91 ce 26 	lds	r31, 0x26CE	; 0x8026ce <tc_tcc0_ccc_callback+0x1>
    54c0:	30 97       	sbiw	r30, 0x00	; 0
    54c2:	09 f0       	breq	.+2      	; 0x54c6 <__vector_18+0x34>
    54c4:	19 95       	eicall
    54c6:	ff 91       	pop	r31
    54c8:	ef 91       	pop	r30
    54ca:	bf 91       	pop	r27
    54cc:	af 91       	pop	r26
    54ce:	9f 91       	pop	r25
    54d0:	8f 91       	pop	r24
    54d2:	7f 91       	pop	r23
    54d4:	6f 91       	pop	r22
    54d6:	5f 91       	pop	r21
    54d8:	4f 91       	pop	r20
    54da:	3f 91       	pop	r19
    54dc:	2f 91       	pop	r18
    54de:	0f 90       	pop	r0
    54e0:	0b be       	out	0x3b, r0	; 59
    54e2:	0f 90       	pop	r0
    54e4:	0f be       	out	0x3f, r0	; 63
    54e6:	0f 90       	pop	r0
    54e8:	1f 90       	pop	r1
    54ea:	18 95       	reti

000054ec <__vector_19>:
    54ec:	1f 92       	push	r1
    54ee:	0f 92       	push	r0
    54f0:	0f b6       	in	r0, 0x3f	; 63
    54f2:	0f 92       	push	r0
    54f4:	11 24       	eor	r1, r1
    54f6:	0b b6       	in	r0, 0x3b	; 59
    54f8:	0f 92       	push	r0
    54fa:	2f 93       	push	r18
    54fc:	3f 93       	push	r19
    54fe:	4f 93       	push	r20
    5500:	5f 93       	push	r21
    5502:	6f 93       	push	r22
    5504:	7f 93       	push	r23
    5506:	8f 93       	push	r24
    5508:	9f 93       	push	r25
    550a:	af 93       	push	r26
    550c:	bf 93       	push	r27
    550e:	ef 93       	push	r30
    5510:	ff 93       	push	r31
    5512:	e0 91 cb 26 	lds	r30, 0x26CB	; 0x8026cb <tc_tcc0_ccd_callback>
    5516:	f0 91 cc 26 	lds	r31, 0x26CC	; 0x8026cc <tc_tcc0_ccd_callback+0x1>
    551a:	30 97       	sbiw	r30, 0x00	; 0
    551c:	09 f0       	breq	.+2      	; 0x5520 <__vector_19+0x34>
    551e:	19 95       	eicall
    5520:	ff 91       	pop	r31
    5522:	ef 91       	pop	r30
    5524:	bf 91       	pop	r27
    5526:	af 91       	pop	r26
    5528:	9f 91       	pop	r25
    552a:	8f 91       	pop	r24
    552c:	7f 91       	pop	r23
    552e:	6f 91       	pop	r22
    5530:	5f 91       	pop	r21
    5532:	4f 91       	pop	r20
    5534:	3f 91       	pop	r19
    5536:	2f 91       	pop	r18
    5538:	0f 90       	pop	r0
    553a:	0b be       	out	0x3b, r0	; 59
    553c:	0f 90       	pop	r0
    553e:	0f be       	out	0x3f, r0	; 63
    5540:	0f 90       	pop	r0
    5542:	1f 90       	pop	r1
    5544:	18 95       	reti

00005546 <__vector_20>:
    5546:	1f 92       	push	r1
    5548:	0f 92       	push	r0
    554a:	0f b6       	in	r0, 0x3f	; 63
    554c:	0f 92       	push	r0
    554e:	11 24       	eor	r1, r1
    5550:	0b b6       	in	r0, 0x3b	; 59
    5552:	0f 92       	push	r0
    5554:	2f 93       	push	r18
    5556:	3f 93       	push	r19
    5558:	4f 93       	push	r20
    555a:	5f 93       	push	r21
    555c:	6f 93       	push	r22
    555e:	7f 93       	push	r23
    5560:	8f 93       	push	r24
    5562:	9f 93       	push	r25
    5564:	af 93       	push	r26
    5566:	bf 93       	push	r27
    5568:	ef 93       	push	r30
    556a:	ff 93       	push	r31
    556c:	e0 91 c9 26 	lds	r30, 0x26C9	; 0x8026c9 <tc_tcc1_ovf_callback>
    5570:	f0 91 ca 26 	lds	r31, 0x26CA	; 0x8026ca <tc_tcc1_ovf_callback+0x1>
    5574:	30 97       	sbiw	r30, 0x00	; 0
    5576:	09 f0       	breq	.+2      	; 0x557a <__vector_20+0x34>
    5578:	19 95       	eicall
    557a:	ff 91       	pop	r31
    557c:	ef 91       	pop	r30
    557e:	bf 91       	pop	r27
    5580:	af 91       	pop	r26
    5582:	9f 91       	pop	r25
    5584:	8f 91       	pop	r24
    5586:	7f 91       	pop	r23
    5588:	6f 91       	pop	r22
    558a:	5f 91       	pop	r21
    558c:	4f 91       	pop	r20
    558e:	3f 91       	pop	r19
    5590:	2f 91       	pop	r18
    5592:	0f 90       	pop	r0
    5594:	0b be       	out	0x3b, r0	; 59
    5596:	0f 90       	pop	r0
    5598:	0f be       	out	0x3f, r0	; 63
    559a:	0f 90       	pop	r0
    559c:	1f 90       	pop	r1
    559e:	18 95       	reti

000055a0 <__vector_21>:
    55a0:	1f 92       	push	r1
    55a2:	0f 92       	push	r0
    55a4:	0f b6       	in	r0, 0x3f	; 63
    55a6:	0f 92       	push	r0
    55a8:	11 24       	eor	r1, r1
    55aa:	0b b6       	in	r0, 0x3b	; 59
    55ac:	0f 92       	push	r0
    55ae:	2f 93       	push	r18
    55b0:	3f 93       	push	r19
    55b2:	4f 93       	push	r20
    55b4:	5f 93       	push	r21
    55b6:	6f 93       	push	r22
    55b8:	7f 93       	push	r23
    55ba:	8f 93       	push	r24
    55bc:	9f 93       	push	r25
    55be:	af 93       	push	r26
    55c0:	bf 93       	push	r27
    55c2:	ef 93       	push	r30
    55c4:	ff 93       	push	r31
    55c6:	e0 91 c7 26 	lds	r30, 0x26C7	; 0x8026c7 <tc_tcc1_err_callback>
    55ca:	f0 91 c8 26 	lds	r31, 0x26C8	; 0x8026c8 <tc_tcc1_err_callback+0x1>
    55ce:	30 97       	sbiw	r30, 0x00	; 0
    55d0:	09 f0       	breq	.+2      	; 0x55d4 <__vector_21+0x34>
    55d2:	19 95       	eicall
    55d4:	ff 91       	pop	r31
    55d6:	ef 91       	pop	r30
    55d8:	bf 91       	pop	r27
    55da:	af 91       	pop	r26
    55dc:	9f 91       	pop	r25
    55de:	8f 91       	pop	r24
    55e0:	7f 91       	pop	r23
    55e2:	6f 91       	pop	r22
    55e4:	5f 91       	pop	r21
    55e6:	4f 91       	pop	r20
    55e8:	3f 91       	pop	r19
    55ea:	2f 91       	pop	r18
    55ec:	0f 90       	pop	r0
    55ee:	0b be       	out	0x3b, r0	; 59
    55f0:	0f 90       	pop	r0
    55f2:	0f be       	out	0x3f, r0	; 63
    55f4:	0f 90       	pop	r0
    55f6:	1f 90       	pop	r1
    55f8:	18 95       	reti

000055fa <__vector_22>:
    55fa:	1f 92       	push	r1
    55fc:	0f 92       	push	r0
    55fe:	0f b6       	in	r0, 0x3f	; 63
    5600:	0f 92       	push	r0
    5602:	11 24       	eor	r1, r1
    5604:	0b b6       	in	r0, 0x3b	; 59
    5606:	0f 92       	push	r0
    5608:	2f 93       	push	r18
    560a:	3f 93       	push	r19
    560c:	4f 93       	push	r20
    560e:	5f 93       	push	r21
    5610:	6f 93       	push	r22
    5612:	7f 93       	push	r23
    5614:	8f 93       	push	r24
    5616:	9f 93       	push	r25
    5618:	af 93       	push	r26
    561a:	bf 93       	push	r27
    561c:	ef 93       	push	r30
    561e:	ff 93       	push	r31
    5620:	e0 91 c5 26 	lds	r30, 0x26C5	; 0x8026c5 <tc_tcc1_cca_callback>
    5624:	f0 91 c6 26 	lds	r31, 0x26C6	; 0x8026c6 <tc_tcc1_cca_callback+0x1>
    5628:	30 97       	sbiw	r30, 0x00	; 0
    562a:	09 f0       	breq	.+2      	; 0x562e <__vector_22+0x34>
    562c:	19 95       	eicall
    562e:	ff 91       	pop	r31
    5630:	ef 91       	pop	r30
    5632:	bf 91       	pop	r27
    5634:	af 91       	pop	r26
    5636:	9f 91       	pop	r25
    5638:	8f 91       	pop	r24
    563a:	7f 91       	pop	r23
    563c:	6f 91       	pop	r22
    563e:	5f 91       	pop	r21
    5640:	4f 91       	pop	r20
    5642:	3f 91       	pop	r19
    5644:	2f 91       	pop	r18
    5646:	0f 90       	pop	r0
    5648:	0b be       	out	0x3b, r0	; 59
    564a:	0f 90       	pop	r0
    564c:	0f be       	out	0x3f, r0	; 63
    564e:	0f 90       	pop	r0
    5650:	1f 90       	pop	r1
    5652:	18 95       	reti

00005654 <__vector_23>:
    5654:	1f 92       	push	r1
    5656:	0f 92       	push	r0
    5658:	0f b6       	in	r0, 0x3f	; 63
    565a:	0f 92       	push	r0
    565c:	11 24       	eor	r1, r1
    565e:	0b b6       	in	r0, 0x3b	; 59
    5660:	0f 92       	push	r0
    5662:	2f 93       	push	r18
    5664:	3f 93       	push	r19
    5666:	4f 93       	push	r20
    5668:	5f 93       	push	r21
    566a:	6f 93       	push	r22
    566c:	7f 93       	push	r23
    566e:	8f 93       	push	r24
    5670:	9f 93       	push	r25
    5672:	af 93       	push	r26
    5674:	bf 93       	push	r27
    5676:	ef 93       	push	r30
    5678:	ff 93       	push	r31
    567a:	e0 91 c3 26 	lds	r30, 0x26C3	; 0x8026c3 <tc_tcc1_ccb_callback>
    567e:	f0 91 c4 26 	lds	r31, 0x26C4	; 0x8026c4 <tc_tcc1_ccb_callback+0x1>
    5682:	30 97       	sbiw	r30, 0x00	; 0
    5684:	09 f0       	breq	.+2      	; 0x5688 <__vector_23+0x34>
    5686:	19 95       	eicall
    5688:	ff 91       	pop	r31
    568a:	ef 91       	pop	r30
    568c:	bf 91       	pop	r27
    568e:	af 91       	pop	r26
    5690:	9f 91       	pop	r25
    5692:	8f 91       	pop	r24
    5694:	7f 91       	pop	r23
    5696:	6f 91       	pop	r22
    5698:	5f 91       	pop	r21
    569a:	4f 91       	pop	r20
    569c:	3f 91       	pop	r19
    569e:	2f 91       	pop	r18
    56a0:	0f 90       	pop	r0
    56a2:	0b be       	out	0x3b, r0	; 59
    56a4:	0f 90       	pop	r0
    56a6:	0f be       	out	0x3f, r0	; 63
    56a8:	0f 90       	pop	r0
    56aa:	1f 90       	pop	r1
    56ac:	18 95       	reti

000056ae <__vector_77>:
    56ae:	1f 92       	push	r1
    56b0:	0f 92       	push	r0
    56b2:	0f b6       	in	r0, 0x3f	; 63
    56b4:	0f 92       	push	r0
    56b6:	11 24       	eor	r1, r1
    56b8:	0b b6       	in	r0, 0x3b	; 59
    56ba:	0f 92       	push	r0
    56bc:	2f 93       	push	r18
    56be:	3f 93       	push	r19
    56c0:	4f 93       	push	r20
    56c2:	5f 93       	push	r21
    56c4:	6f 93       	push	r22
    56c6:	7f 93       	push	r23
    56c8:	8f 93       	push	r24
    56ca:	9f 93       	push	r25
    56cc:	af 93       	push	r26
    56ce:	bf 93       	push	r27
    56d0:	ef 93       	push	r30
    56d2:	ff 93       	push	r31
    56d4:	e0 91 c1 26 	lds	r30, 0x26C1	; 0x8026c1 <tc_tcd0_ovf_callback>
    56d8:	f0 91 c2 26 	lds	r31, 0x26C2	; 0x8026c2 <tc_tcd0_ovf_callback+0x1>
    56dc:	30 97       	sbiw	r30, 0x00	; 0
    56de:	09 f0       	breq	.+2      	; 0x56e2 <__vector_77+0x34>
    56e0:	19 95       	eicall
    56e2:	ff 91       	pop	r31
    56e4:	ef 91       	pop	r30
    56e6:	bf 91       	pop	r27
    56e8:	af 91       	pop	r26
    56ea:	9f 91       	pop	r25
    56ec:	8f 91       	pop	r24
    56ee:	7f 91       	pop	r23
    56f0:	6f 91       	pop	r22
    56f2:	5f 91       	pop	r21
    56f4:	4f 91       	pop	r20
    56f6:	3f 91       	pop	r19
    56f8:	2f 91       	pop	r18
    56fa:	0f 90       	pop	r0
    56fc:	0b be       	out	0x3b, r0	; 59
    56fe:	0f 90       	pop	r0
    5700:	0f be       	out	0x3f, r0	; 63
    5702:	0f 90       	pop	r0
    5704:	1f 90       	pop	r1
    5706:	18 95       	reti

00005708 <__vector_78>:
    5708:	1f 92       	push	r1
    570a:	0f 92       	push	r0
    570c:	0f b6       	in	r0, 0x3f	; 63
    570e:	0f 92       	push	r0
    5710:	11 24       	eor	r1, r1
    5712:	0b b6       	in	r0, 0x3b	; 59
    5714:	0f 92       	push	r0
    5716:	2f 93       	push	r18
    5718:	3f 93       	push	r19
    571a:	4f 93       	push	r20
    571c:	5f 93       	push	r21
    571e:	6f 93       	push	r22
    5720:	7f 93       	push	r23
    5722:	8f 93       	push	r24
    5724:	9f 93       	push	r25
    5726:	af 93       	push	r26
    5728:	bf 93       	push	r27
    572a:	ef 93       	push	r30
    572c:	ff 93       	push	r31
    572e:	e0 91 bf 26 	lds	r30, 0x26BF	; 0x8026bf <tc_tcd0_err_callback>
    5732:	f0 91 c0 26 	lds	r31, 0x26C0	; 0x8026c0 <tc_tcd0_err_callback+0x1>
    5736:	30 97       	sbiw	r30, 0x00	; 0
    5738:	09 f0       	breq	.+2      	; 0x573c <__vector_78+0x34>
    573a:	19 95       	eicall
    573c:	ff 91       	pop	r31
    573e:	ef 91       	pop	r30
    5740:	bf 91       	pop	r27
    5742:	af 91       	pop	r26
    5744:	9f 91       	pop	r25
    5746:	8f 91       	pop	r24
    5748:	7f 91       	pop	r23
    574a:	6f 91       	pop	r22
    574c:	5f 91       	pop	r21
    574e:	4f 91       	pop	r20
    5750:	3f 91       	pop	r19
    5752:	2f 91       	pop	r18
    5754:	0f 90       	pop	r0
    5756:	0b be       	out	0x3b, r0	; 59
    5758:	0f 90       	pop	r0
    575a:	0f be       	out	0x3f, r0	; 63
    575c:	0f 90       	pop	r0
    575e:	1f 90       	pop	r1
    5760:	18 95       	reti

00005762 <__vector_79>:
    5762:	1f 92       	push	r1
    5764:	0f 92       	push	r0
    5766:	0f b6       	in	r0, 0x3f	; 63
    5768:	0f 92       	push	r0
    576a:	11 24       	eor	r1, r1
    576c:	0b b6       	in	r0, 0x3b	; 59
    576e:	0f 92       	push	r0
    5770:	2f 93       	push	r18
    5772:	3f 93       	push	r19
    5774:	4f 93       	push	r20
    5776:	5f 93       	push	r21
    5778:	6f 93       	push	r22
    577a:	7f 93       	push	r23
    577c:	8f 93       	push	r24
    577e:	9f 93       	push	r25
    5780:	af 93       	push	r26
    5782:	bf 93       	push	r27
    5784:	ef 93       	push	r30
    5786:	ff 93       	push	r31
    5788:	e0 91 bd 26 	lds	r30, 0x26BD	; 0x8026bd <tc_tcd0_cca_callback>
    578c:	f0 91 be 26 	lds	r31, 0x26BE	; 0x8026be <tc_tcd0_cca_callback+0x1>
    5790:	30 97       	sbiw	r30, 0x00	; 0
    5792:	09 f0       	breq	.+2      	; 0x5796 <__vector_79+0x34>
    5794:	19 95       	eicall
    5796:	ff 91       	pop	r31
    5798:	ef 91       	pop	r30
    579a:	bf 91       	pop	r27
    579c:	af 91       	pop	r26
    579e:	9f 91       	pop	r25
    57a0:	8f 91       	pop	r24
    57a2:	7f 91       	pop	r23
    57a4:	6f 91       	pop	r22
    57a6:	5f 91       	pop	r21
    57a8:	4f 91       	pop	r20
    57aa:	3f 91       	pop	r19
    57ac:	2f 91       	pop	r18
    57ae:	0f 90       	pop	r0
    57b0:	0b be       	out	0x3b, r0	; 59
    57b2:	0f 90       	pop	r0
    57b4:	0f be       	out	0x3f, r0	; 63
    57b6:	0f 90       	pop	r0
    57b8:	1f 90       	pop	r1
    57ba:	18 95       	reti

000057bc <__vector_80>:
    57bc:	1f 92       	push	r1
    57be:	0f 92       	push	r0
    57c0:	0f b6       	in	r0, 0x3f	; 63
    57c2:	0f 92       	push	r0
    57c4:	11 24       	eor	r1, r1
    57c6:	0b b6       	in	r0, 0x3b	; 59
    57c8:	0f 92       	push	r0
    57ca:	2f 93       	push	r18
    57cc:	3f 93       	push	r19
    57ce:	4f 93       	push	r20
    57d0:	5f 93       	push	r21
    57d2:	6f 93       	push	r22
    57d4:	7f 93       	push	r23
    57d6:	8f 93       	push	r24
    57d8:	9f 93       	push	r25
    57da:	af 93       	push	r26
    57dc:	bf 93       	push	r27
    57de:	ef 93       	push	r30
    57e0:	ff 93       	push	r31
    57e2:	e0 91 bb 26 	lds	r30, 0x26BB	; 0x8026bb <tc_tcd0_ccb_callback>
    57e6:	f0 91 bc 26 	lds	r31, 0x26BC	; 0x8026bc <tc_tcd0_ccb_callback+0x1>
    57ea:	30 97       	sbiw	r30, 0x00	; 0
    57ec:	09 f0       	breq	.+2      	; 0x57f0 <__vector_80+0x34>
    57ee:	19 95       	eicall
    57f0:	ff 91       	pop	r31
    57f2:	ef 91       	pop	r30
    57f4:	bf 91       	pop	r27
    57f6:	af 91       	pop	r26
    57f8:	9f 91       	pop	r25
    57fa:	8f 91       	pop	r24
    57fc:	7f 91       	pop	r23
    57fe:	6f 91       	pop	r22
    5800:	5f 91       	pop	r21
    5802:	4f 91       	pop	r20
    5804:	3f 91       	pop	r19
    5806:	2f 91       	pop	r18
    5808:	0f 90       	pop	r0
    580a:	0b be       	out	0x3b, r0	; 59
    580c:	0f 90       	pop	r0
    580e:	0f be       	out	0x3f, r0	; 63
    5810:	0f 90       	pop	r0
    5812:	1f 90       	pop	r1
    5814:	18 95       	reti

00005816 <__vector_81>:
    5816:	1f 92       	push	r1
    5818:	0f 92       	push	r0
    581a:	0f b6       	in	r0, 0x3f	; 63
    581c:	0f 92       	push	r0
    581e:	11 24       	eor	r1, r1
    5820:	0b b6       	in	r0, 0x3b	; 59
    5822:	0f 92       	push	r0
    5824:	2f 93       	push	r18
    5826:	3f 93       	push	r19
    5828:	4f 93       	push	r20
    582a:	5f 93       	push	r21
    582c:	6f 93       	push	r22
    582e:	7f 93       	push	r23
    5830:	8f 93       	push	r24
    5832:	9f 93       	push	r25
    5834:	af 93       	push	r26
    5836:	bf 93       	push	r27
    5838:	ef 93       	push	r30
    583a:	ff 93       	push	r31
    583c:	e0 91 b9 26 	lds	r30, 0x26B9	; 0x8026b9 <tc_tcd0_ccc_callback>
    5840:	f0 91 ba 26 	lds	r31, 0x26BA	; 0x8026ba <tc_tcd0_ccc_callback+0x1>
    5844:	30 97       	sbiw	r30, 0x00	; 0
    5846:	09 f0       	breq	.+2      	; 0x584a <__vector_81+0x34>
    5848:	19 95       	eicall
    584a:	ff 91       	pop	r31
    584c:	ef 91       	pop	r30
    584e:	bf 91       	pop	r27
    5850:	af 91       	pop	r26
    5852:	9f 91       	pop	r25
    5854:	8f 91       	pop	r24
    5856:	7f 91       	pop	r23
    5858:	6f 91       	pop	r22
    585a:	5f 91       	pop	r21
    585c:	4f 91       	pop	r20
    585e:	3f 91       	pop	r19
    5860:	2f 91       	pop	r18
    5862:	0f 90       	pop	r0
    5864:	0b be       	out	0x3b, r0	; 59
    5866:	0f 90       	pop	r0
    5868:	0f be       	out	0x3f, r0	; 63
    586a:	0f 90       	pop	r0
    586c:	1f 90       	pop	r1
    586e:	18 95       	reti

00005870 <__vector_82>:
    5870:	1f 92       	push	r1
    5872:	0f 92       	push	r0
    5874:	0f b6       	in	r0, 0x3f	; 63
    5876:	0f 92       	push	r0
    5878:	11 24       	eor	r1, r1
    587a:	0b b6       	in	r0, 0x3b	; 59
    587c:	0f 92       	push	r0
    587e:	2f 93       	push	r18
    5880:	3f 93       	push	r19
    5882:	4f 93       	push	r20
    5884:	5f 93       	push	r21
    5886:	6f 93       	push	r22
    5888:	7f 93       	push	r23
    588a:	8f 93       	push	r24
    588c:	9f 93       	push	r25
    588e:	af 93       	push	r26
    5890:	bf 93       	push	r27
    5892:	ef 93       	push	r30
    5894:	ff 93       	push	r31
    5896:	e0 91 b7 26 	lds	r30, 0x26B7	; 0x8026b7 <tc_tcd0_ccd_callback>
    589a:	f0 91 b8 26 	lds	r31, 0x26B8	; 0x8026b8 <tc_tcd0_ccd_callback+0x1>
    589e:	30 97       	sbiw	r30, 0x00	; 0
    58a0:	09 f0       	breq	.+2      	; 0x58a4 <__vector_82+0x34>
    58a2:	19 95       	eicall
    58a4:	ff 91       	pop	r31
    58a6:	ef 91       	pop	r30
    58a8:	bf 91       	pop	r27
    58aa:	af 91       	pop	r26
    58ac:	9f 91       	pop	r25
    58ae:	8f 91       	pop	r24
    58b0:	7f 91       	pop	r23
    58b2:	6f 91       	pop	r22
    58b4:	5f 91       	pop	r21
    58b6:	4f 91       	pop	r20
    58b8:	3f 91       	pop	r19
    58ba:	2f 91       	pop	r18
    58bc:	0f 90       	pop	r0
    58be:	0b be       	out	0x3b, r0	; 59
    58c0:	0f 90       	pop	r0
    58c2:	0f be       	out	0x3f, r0	; 63
    58c4:	0f 90       	pop	r0
    58c6:	1f 90       	pop	r1
    58c8:	18 95       	reti

000058ca <__vector_83>:
    58ca:	1f 92       	push	r1
    58cc:	0f 92       	push	r0
    58ce:	0f b6       	in	r0, 0x3f	; 63
    58d0:	0f 92       	push	r0
    58d2:	11 24       	eor	r1, r1
    58d4:	0b b6       	in	r0, 0x3b	; 59
    58d6:	0f 92       	push	r0
    58d8:	2f 93       	push	r18
    58da:	3f 93       	push	r19
    58dc:	4f 93       	push	r20
    58de:	5f 93       	push	r21
    58e0:	6f 93       	push	r22
    58e2:	7f 93       	push	r23
    58e4:	8f 93       	push	r24
    58e6:	9f 93       	push	r25
    58e8:	af 93       	push	r26
    58ea:	bf 93       	push	r27
    58ec:	ef 93       	push	r30
    58ee:	ff 93       	push	r31
    58f0:	e0 91 b5 26 	lds	r30, 0x26B5	; 0x8026b5 <tc_tcd1_ovf_callback>
    58f4:	f0 91 b6 26 	lds	r31, 0x26B6	; 0x8026b6 <tc_tcd1_ovf_callback+0x1>
    58f8:	30 97       	sbiw	r30, 0x00	; 0
    58fa:	09 f0       	breq	.+2      	; 0x58fe <__vector_83+0x34>
    58fc:	19 95       	eicall
    58fe:	ff 91       	pop	r31
    5900:	ef 91       	pop	r30
    5902:	bf 91       	pop	r27
    5904:	af 91       	pop	r26
    5906:	9f 91       	pop	r25
    5908:	8f 91       	pop	r24
    590a:	7f 91       	pop	r23
    590c:	6f 91       	pop	r22
    590e:	5f 91       	pop	r21
    5910:	4f 91       	pop	r20
    5912:	3f 91       	pop	r19
    5914:	2f 91       	pop	r18
    5916:	0f 90       	pop	r0
    5918:	0b be       	out	0x3b, r0	; 59
    591a:	0f 90       	pop	r0
    591c:	0f be       	out	0x3f, r0	; 63
    591e:	0f 90       	pop	r0
    5920:	1f 90       	pop	r1
    5922:	18 95       	reti

00005924 <__vector_84>:
    5924:	1f 92       	push	r1
    5926:	0f 92       	push	r0
    5928:	0f b6       	in	r0, 0x3f	; 63
    592a:	0f 92       	push	r0
    592c:	11 24       	eor	r1, r1
    592e:	0b b6       	in	r0, 0x3b	; 59
    5930:	0f 92       	push	r0
    5932:	2f 93       	push	r18
    5934:	3f 93       	push	r19
    5936:	4f 93       	push	r20
    5938:	5f 93       	push	r21
    593a:	6f 93       	push	r22
    593c:	7f 93       	push	r23
    593e:	8f 93       	push	r24
    5940:	9f 93       	push	r25
    5942:	af 93       	push	r26
    5944:	bf 93       	push	r27
    5946:	ef 93       	push	r30
    5948:	ff 93       	push	r31
    594a:	e0 91 b3 26 	lds	r30, 0x26B3	; 0x8026b3 <tc_tcd1_err_callback>
    594e:	f0 91 b4 26 	lds	r31, 0x26B4	; 0x8026b4 <tc_tcd1_err_callback+0x1>
    5952:	30 97       	sbiw	r30, 0x00	; 0
    5954:	09 f0       	breq	.+2      	; 0x5958 <__vector_84+0x34>
    5956:	19 95       	eicall
    5958:	ff 91       	pop	r31
    595a:	ef 91       	pop	r30
    595c:	bf 91       	pop	r27
    595e:	af 91       	pop	r26
    5960:	9f 91       	pop	r25
    5962:	8f 91       	pop	r24
    5964:	7f 91       	pop	r23
    5966:	6f 91       	pop	r22
    5968:	5f 91       	pop	r21
    596a:	4f 91       	pop	r20
    596c:	3f 91       	pop	r19
    596e:	2f 91       	pop	r18
    5970:	0f 90       	pop	r0
    5972:	0b be       	out	0x3b, r0	; 59
    5974:	0f 90       	pop	r0
    5976:	0f be       	out	0x3f, r0	; 63
    5978:	0f 90       	pop	r0
    597a:	1f 90       	pop	r1
    597c:	18 95       	reti

0000597e <__vector_85>:
    597e:	1f 92       	push	r1
    5980:	0f 92       	push	r0
    5982:	0f b6       	in	r0, 0x3f	; 63
    5984:	0f 92       	push	r0
    5986:	11 24       	eor	r1, r1
    5988:	0b b6       	in	r0, 0x3b	; 59
    598a:	0f 92       	push	r0
    598c:	2f 93       	push	r18
    598e:	3f 93       	push	r19
    5990:	4f 93       	push	r20
    5992:	5f 93       	push	r21
    5994:	6f 93       	push	r22
    5996:	7f 93       	push	r23
    5998:	8f 93       	push	r24
    599a:	9f 93       	push	r25
    599c:	af 93       	push	r26
    599e:	bf 93       	push	r27
    59a0:	ef 93       	push	r30
    59a2:	ff 93       	push	r31
    59a4:	e0 91 b1 26 	lds	r30, 0x26B1	; 0x8026b1 <tc_tcd1_cca_callback>
    59a8:	f0 91 b2 26 	lds	r31, 0x26B2	; 0x8026b2 <tc_tcd1_cca_callback+0x1>
    59ac:	30 97       	sbiw	r30, 0x00	; 0
    59ae:	09 f0       	breq	.+2      	; 0x59b2 <__vector_85+0x34>
    59b0:	19 95       	eicall
    59b2:	ff 91       	pop	r31
    59b4:	ef 91       	pop	r30
    59b6:	bf 91       	pop	r27
    59b8:	af 91       	pop	r26
    59ba:	9f 91       	pop	r25
    59bc:	8f 91       	pop	r24
    59be:	7f 91       	pop	r23
    59c0:	6f 91       	pop	r22
    59c2:	5f 91       	pop	r21
    59c4:	4f 91       	pop	r20
    59c6:	3f 91       	pop	r19
    59c8:	2f 91       	pop	r18
    59ca:	0f 90       	pop	r0
    59cc:	0b be       	out	0x3b, r0	; 59
    59ce:	0f 90       	pop	r0
    59d0:	0f be       	out	0x3f, r0	; 63
    59d2:	0f 90       	pop	r0
    59d4:	1f 90       	pop	r1
    59d6:	18 95       	reti

000059d8 <__vector_86>:
    59d8:	1f 92       	push	r1
    59da:	0f 92       	push	r0
    59dc:	0f b6       	in	r0, 0x3f	; 63
    59de:	0f 92       	push	r0
    59e0:	11 24       	eor	r1, r1
    59e2:	0b b6       	in	r0, 0x3b	; 59
    59e4:	0f 92       	push	r0
    59e6:	2f 93       	push	r18
    59e8:	3f 93       	push	r19
    59ea:	4f 93       	push	r20
    59ec:	5f 93       	push	r21
    59ee:	6f 93       	push	r22
    59f0:	7f 93       	push	r23
    59f2:	8f 93       	push	r24
    59f4:	9f 93       	push	r25
    59f6:	af 93       	push	r26
    59f8:	bf 93       	push	r27
    59fa:	ef 93       	push	r30
    59fc:	ff 93       	push	r31
    59fe:	e0 91 af 26 	lds	r30, 0x26AF	; 0x8026af <tc_tcd1_ccb_callback>
    5a02:	f0 91 b0 26 	lds	r31, 0x26B0	; 0x8026b0 <tc_tcd1_ccb_callback+0x1>
    5a06:	30 97       	sbiw	r30, 0x00	; 0
    5a08:	09 f0       	breq	.+2      	; 0x5a0c <__vector_86+0x34>
    5a0a:	19 95       	eicall
    5a0c:	ff 91       	pop	r31
    5a0e:	ef 91       	pop	r30
    5a10:	bf 91       	pop	r27
    5a12:	af 91       	pop	r26
    5a14:	9f 91       	pop	r25
    5a16:	8f 91       	pop	r24
    5a18:	7f 91       	pop	r23
    5a1a:	6f 91       	pop	r22
    5a1c:	5f 91       	pop	r21
    5a1e:	4f 91       	pop	r20
    5a20:	3f 91       	pop	r19
    5a22:	2f 91       	pop	r18
    5a24:	0f 90       	pop	r0
    5a26:	0b be       	out	0x3b, r0	; 59
    5a28:	0f 90       	pop	r0
    5a2a:	0f be       	out	0x3f, r0	; 63
    5a2c:	0f 90       	pop	r0
    5a2e:	1f 90       	pop	r1
    5a30:	18 95       	reti

00005a32 <__vector_47>:
    5a32:	1f 92       	push	r1
    5a34:	0f 92       	push	r0
    5a36:	0f b6       	in	r0, 0x3f	; 63
    5a38:	0f 92       	push	r0
    5a3a:	11 24       	eor	r1, r1
    5a3c:	0b b6       	in	r0, 0x3b	; 59
    5a3e:	0f 92       	push	r0
    5a40:	2f 93       	push	r18
    5a42:	3f 93       	push	r19
    5a44:	4f 93       	push	r20
    5a46:	5f 93       	push	r21
    5a48:	6f 93       	push	r22
    5a4a:	7f 93       	push	r23
    5a4c:	8f 93       	push	r24
    5a4e:	9f 93       	push	r25
    5a50:	af 93       	push	r26
    5a52:	bf 93       	push	r27
    5a54:	ef 93       	push	r30
    5a56:	ff 93       	push	r31
    5a58:	e0 91 ad 26 	lds	r30, 0x26AD	; 0x8026ad <tc_tce0_ovf_callback>
    5a5c:	f0 91 ae 26 	lds	r31, 0x26AE	; 0x8026ae <tc_tce0_ovf_callback+0x1>
    5a60:	30 97       	sbiw	r30, 0x00	; 0
    5a62:	09 f0       	breq	.+2      	; 0x5a66 <__vector_47+0x34>
    5a64:	19 95       	eicall
    5a66:	ff 91       	pop	r31
    5a68:	ef 91       	pop	r30
    5a6a:	bf 91       	pop	r27
    5a6c:	af 91       	pop	r26
    5a6e:	9f 91       	pop	r25
    5a70:	8f 91       	pop	r24
    5a72:	7f 91       	pop	r23
    5a74:	6f 91       	pop	r22
    5a76:	5f 91       	pop	r21
    5a78:	4f 91       	pop	r20
    5a7a:	3f 91       	pop	r19
    5a7c:	2f 91       	pop	r18
    5a7e:	0f 90       	pop	r0
    5a80:	0b be       	out	0x3b, r0	; 59
    5a82:	0f 90       	pop	r0
    5a84:	0f be       	out	0x3f, r0	; 63
    5a86:	0f 90       	pop	r0
    5a88:	1f 90       	pop	r1
    5a8a:	18 95       	reti

00005a8c <__vector_48>:
    5a8c:	1f 92       	push	r1
    5a8e:	0f 92       	push	r0
    5a90:	0f b6       	in	r0, 0x3f	; 63
    5a92:	0f 92       	push	r0
    5a94:	11 24       	eor	r1, r1
    5a96:	0b b6       	in	r0, 0x3b	; 59
    5a98:	0f 92       	push	r0
    5a9a:	2f 93       	push	r18
    5a9c:	3f 93       	push	r19
    5a9e:	4f 93       	push	r20
    5aa0:	5f 93       	push	r21
    5aa2:	6f 93       	push	r22
    5aa4:	7f 93       	push	r23
    5aa6:	8f 93       	push	r24
    5aa8:	9f 93       	push	r25
    5aaa:	af 93       	push	r26
    5aac:	bf 93       	push	r27
    5aae:	ef 93       	push	r30
    5ab0:	ff 93       	push	r31
    5ab2:	e0 91 ab 26 	lds	r30, 0x26AB	; 0x8026ab <tc_tce0_err_callback>
    5ab6:	f0 91 ac 26 	lds	r31, 0x26AC	; 0x8026ac <tc_tce0_err_callback+0x1>
    5aba:	30 97       	sbiw	r30, 0x00	; 0
    5abc:	09 f0       	breq	.+2      	; 0x5ac0 <__vector_48+0x34>
    5abe:	19 95       	eicall
    5ac0:	ff 91       	pop	r31
    5ac2:	ef 91       	pop	r30
    5ac4:	bf 91       	pop	r27
    5ac6:	af 91       	pop	r26
    5ac8:	9f 91       	pop	r25
    5aca:	8f 91       	pop	r24
    5acc:	7f 91       	pop	r23
    5ace:	6f 91       	pop	r22
    5ad0:	5f 91       	pop	r21
    5ad2:	4f 91       	pop	r20
    5ad4:	3f 91       	pop	r19
    5ad6:	2f 91       	pop	r18
    5ad8:	0f 90       	pop	r0
    5ada:	0b be       	out	0x3b, r0	; 59
    5adc:	0f 90       	pop	r0
    5ade:	0f be       	out	0x3f, r0	; 63
    5ae0:	0f 90       	pop	r0
    5ae2:	1f 90       	pop	r1
    5ae4:	18 95       	reti

00005ae6 <__vector_49>:
    5ae6:	1f 92       	push	r1
    5ae8:	0f 92       	push	r0
    5aea:	0f b6       	in	r0, 0x3f	; 63
    5aec:	0f 92       	push	r0
    5aee:	11 24       	eor	r1, r1
    5af0:	0b b6       	in	r0, 0x3b	; 59
    5af2:	0f 92       	push	r0
    5af4:	2f 93       	push	r18
    5af6:	3f 93       	push	r19
    5af8:	4f 93       	push	r20
    5afa:	5f 93       	push	r21
    5afc:	6f 93       	push	r22
    5afe:	7f 93       	push	r23
    5b00:	8f 93       	push	r24
    5b02:	9f 93       	push	r25
    5b04:	af 93       	push	r26
    5b06:	bf 93       	push	r27
    5b08:	ef 93       	push	r30
    5b0a:	ff 93       	push	r31
    5b0c:	e0 91 a9 26 	lds	r30, 0x26A9	; 0x8026a9 <tc_tce0_cca_callback>
    5b10:	f0 91 aa 26 	lds	r31, 0x26AA	; 0x8026aa <tc_tce0_cca_callback+0x1>
    5b14:	30 97       	sbiw	r30, 0x00	; 0
    5b16:	09 f0       	breq	.+2      	; 0x5b1a <__vector_49+0x34>
    5b18:	19 95       	eicall
    5b1a:	ff 91       	pop	r31
    5b1c:	ef 91       	pop	r30
    5b1e:	bf 91       	pop	r27
    5b20:	af 91       	pop	r26
    5b22:	9f 91       	pop	r25
    5b24:	8f 91       	pop	r24
    5b26:	7f 91       	pop	r23
    5b28:	6f 91       	pop	r22
    5b2a:	5f 91       	pop	r21
    5b2c:	4f 91       	pop	r20
    5b2e:	3f 91       	pop	r19
    5b30:	2f 91       	pop	r18
    5b32:	0f 90       	pop	r0
    5b34:	0b be       	out	0x3b, r0	; 59
    5b36:	0f 90       	pop	r0
    5b38:	0f be       	out	0x3f, r0	; 63
    5b3a:	0f 90       	pop	r0
    5b3c:	1f 90       	pop	r1
    5b3e:	18 95       	reti

00005b40 <__vector_50>:
    5b40:	1f 92       	push	r1
    5b42:	0f 92       	push	r0
    5b44:	0f b6       	in	r0, 0x3f	; 63
    5b46:	0f 92       	push	r0
    5b48:	11 24       	eor	r1, r1
    5b4a:	0b b6       	in	r0, 0x3b	; 59
    5b4c:	0f 92       	push	r0
    5b4e:	2f 93       	push	r18
    5b50:	3f 93       	push	r19
    5b52:	4f 93       	push	r20
    5b54:	5f 93       	push	r21
    5b56:	6f 93       	push	r22
    5b58:	7f 93       	push	r23
    5b5a:	8f 93       	push	r24
    5b5c:	9f 93       	push	r25
    5b5e:	af 93       	push	r26
    5b60:	bf 93       	push	r27
    5b62:	ef 93       	push	r30
    5b64:	ff 93       	push	r31
    5b66:	e0 91 a7 26 	lds	r30, 0x26A7	; 0x8026a7 <tc_tce0_ccb_callback>
    5b6a:	f0 91 a8 26 	lds	r31, 0x26A8	; 0x8026a8 <tc_tce0_ccb_callback+0x1>
    5b6e:	30 97       	sbiw	r30, 0x00	; 0
    5b70:	09 f0       	breq	.+2      	; 0x5b74 <__vector_50+0x34>
    5b72:	19 95       	eicall
    5b74:	ff 91       	pop	r31
    5b76:	ef 91       	pop	r30
    5b78:	bf 91       	pop	r27
    5b7a:	af 91       	pop	r26
    5b7c:	9f 91       	pop	r25
    5b7e:	8f 91       	pop	r24
    5b80:	7f 91       	pop	r23
    5b82:	6f 91       	pop	r22
    5b84:	5f 91       	pop	r21
    5b86:	4f 91       	pop	r20
    5b88:	3f 91       	pop	r19
    5b8a:	2f 91       	pop	r18
    5b8c:	0f 90       	pop	r0
    5b8e:	0b be       	out	0x3b, r0	; 59
    5b90:	0f 90       	pop	r0
    5b92:	0f be       	out	0x3f, r0	; 63
    5b94:	0f 90       	pop	r0
    5b96:	1f 90       	pop	r1
    5b98:	18 95       	reti

00005b9a <__vector_51>:
    5b9a:	1f 92       	push	r1
    5b9c:	0f 92       	push	r0
    5b9e:	0f b6       	in	r0, 0x3f	; 63
    5ba0:	0f 92       	push	r0
    5ba2:	11 24       	eor	r1, r1
    5ba4:	0b b6       	in	r0, 0x3b	; 59
    5ba6:	0f 92       	push	r0
    5ba8:	2f 93       	push	r18
    5baa:	3f 93       	push	r19
    5bac:	4f 93       	push	r20
    5bae:	5f 93       	push	r21
    5bb0:	6f 93       	push	r22
    5bb2:	7f 93       	push	r23
    5bb4:	8f 93       	push	r24
    5bb6:	9f 93       	push	r25
    5bb8:	af 93       	push	r26
    5bba:	bf 93       	push	r27
    5bbc:	ef 93       	push	r30
    5bbe:	ff 93       	push	r31
    5bc0:	e0 91 a5 26 	lds	r30, 0x26A5	; 0x8026a5 <tc_tce0_ccc_callback>
    5bc4:	f0 91 a6 26 	lds	r31, 0x26A6	; 0x8026a6 <tc_tce0_ccc_callback+0x1>
    5bc8:	30 97       	sbiw	r30, 0x00	; 0
    5bca:	09 f0       	breq	.+2      	; 0x5bce <__vector_51+0x34>
    5bcc:	19 95       	eicall
    5bce:	ff 91       	pop	r31
    5bd0:	ef 91       	pop	r30
    5bd2:	bf 91       	pop	r27
    5bd4:	af 91       	pop	r26
    5bd6:	9f 91       	pop	r25
    5bd8:	8f 91       	pop	r24
    5bda:	7f 91       	pop	r23
    5bdc:	6f 91       	pop	r22
    5bde:	5f 91       	pop	r21
    5be0:	4f 91       	pop	r20
    5be2:	3f 91       	pop	r19
    5be4:	2f 91       	pop	r18
    5be6:	0f 90       	pop	r0
    5be8:	0b be       	out	0x3b, r0	; 59
    5bea:	0f 90       	pop	r0
    5bec:	0f be       	out	0x3f, r0	; 63
    5bee:	0f 90       	pop	r0
    5bf0:	1f 90       	pop	r1
    5bf2:	18 95       	reti

00005bf4 <__vector_52>:
    5bf4:	1f 92       	push	r1
    5bf6:	0f 92       	push	r0
    5bf8:	0f b6       	in	r0, 0x3f	; 63
    5bfa:	0f 92       	push	r0
    5bfc:	11 24       	eor	r1, r1
    5bfe:	0b b6       	in	r0, 0x3b	; 59
    5c00:	0f 92       	push	r0
    5c02:	2f 93       	push	r18
    5c04:	3f 93       	push	r19
    5c06:	4f 93       	push	r20
    5c08:	5f 93       	push	r21
    5c0a:	6f 93       	push	r22
    5c0c:	7f 93       	push	r23
    5c0e:	8f 93       	push	r24
    5c10:	9f 93       	push	r25
    5c12:	af 93       	push	r26
    5c14:	bf 93       	push	r27
    5c16:	ef 93       	push	r30
    5c18:	ff 93       	push	r31
    5c1a:	e0 91 a3 26 	lds	r30, 0x26A3	; 0x8026a3 <tc_tce0_ccd_callback>
    5c1e:	f0 91 a4 26 	lds	r31, 0x26A4	; 0x8026a4 <tc_tce0_ccd_callback+0x1>
    5c22:	30 97       	sbiw	r30, 0x00	; 0
    5c24:	09 f0       	breq	.+2      	; 0x5c28 <__vector_52+0x34>
    5c26:	19 95       	eicall
    5c28:	ff 91       	pop	r31
    5c2a:	ef 91       	pop	r30
    5c2c:	bf 91       	pop	r27
    5c2e:	af 91       	pop	r26
    5c30:	9f 91       	pop	r25
    5c32:	8f 91       	pop	r24
    5c34:	7f 91       	pop	r23
    5c36:	6f 91       	pop	r22
    5c38:	5f 91       	pop	r21
    5c3a:	4f 91       	pop	r20
    5c3c:	3f 91       	pop	r19
    5c3e:	2f 91       	pop	r18
    5c40:	0f 90       	pop	r0
    5c42:	0b be       	out	0x3b, r0	; 59
    5c44:	0f 90       	pop	r0
    5c46:	0f be       	out	0x3f, r0	; 63
    5c48:	0f 90       	pop	r0
    5c4a:	1f 90       	pop	r1
    5c4c:	18 95       	reti

00005c4e <__vector_53>:
    5c4e:	1f 92       	push	r1
    5c50:	0f 92       	push	r0
    5c52:	0f b6       	in	r0, 0x3f	; 63
    5c54:	0f 92       	push	r0
    5c56:	11 24       	eor	r1, r1
    5c58:	0b b6       	in	r0, 0x3b	; 59
    5c5a:	0f 92       	push	r0
    5c5c:	2f 93       	push	r18
    5c5e:	3f 93       	push	r19
    5c60:	4f 93       	push	r20
    5c62:	5f 93       	push	r21
    5c64:	6f 93       	push	r22
    5c66:	7f 93       	push	r23
    5c68:	8f 93       	push	r24
    5c6a:	9f 93       	push	r25
    5c6c:	af 93       	push	r26
    5c6e:	bf 93       	push	r27
    5c70:	ef 93       	push	r30
    5c72:	ff 93       	push	r31
    5c74:	e0 91 a1 26 	lds	r30, 0x26A1	; 0x8026a1 <tc_tce1_ovf_callback>
    5c78:	f0 91 a2 26 	lds	r31, 0x26A2	; 0x8026a2 <tc_tce1_ovf_callback+0x1>
    5c7c:	30 97       	sbiw	r30, 0x00	; 0
    5c7e:	09 f0       	breq	.+2      	; 0x5c82 <__vector_53+0x34>
    5c80:	19 95       	eicall
    5c82:	ff 91       	pop	r31
    5c84:	ef 91       	pop	r30
    5c86:	bf 91       	pop	r27
    5c88:	af 91       	pop	r26
    5c8a:	9f 91       	pop	r25
    5c8c:	8f 91       	pop	r24
    5c8e:	7f 91       	pop	r23
    5c90:	6f 91       	pop	r22
    5c92:	5f 91       	pop	r21
    5c94:	4f 91       	pop	r20
    5c96:	3f 91       	pop	r19
    5c98:	2f 91       	pop	r18
    5c9a:	0f 90       	pop	r0
    5c9c:	0b be       	out	0x3b, r0	; 59
    5c9e:	0f 90       	pop	r0
    5ca0:	0f be       	out	0x3f, r0	; 63
    5ca2:	0f 90       	pop	r0
    5ca4:	1f 90       	pop	r1
    5ca6:	18 95       	reti

00005ca8 <__vector_54>:
    5ca8:	1f 92       	push	r1
    5caa:	0f 92       	push	r0
    5cac:	0f b6       	in	r0, 0x3f	; 63
    5cae:	0f 92       	push	r0
    5cb0:	11 24       	eor	r1, r1
    5cb2:	0b b6       	in	r0, 0x3b	; 59
    5cb4:	0f 92       	push	r0
    5cb6:	2f 93       	push	r18
    5cb8:	3f 93       	push	r19
    5cba:	4f 93       	push	r20
    5cbc:	5f 93       	push	r21
    5cbe:	6f 93       	push	r22
    5cc0:	7f 93       	push	r23
    5cc2:	8f 93       	push	r24
    5cc4:	9f 93       	push	r25
    5cc6:	af 93       	push	r26
    5cc8:	bf 93       	push	r27
    5cca:	ef 93       	push	r30
    5ccc:	ff 93       	push	r31
    5cce:	e0 91 9f 26 	lds	r30, 0x269F	; 0x80269f <tc_tce1_err_callback>
    5cd2:	f0 91 a0 26 	lds	r31, 0x26A0	; 0x8026a0 <tc_tce1_err_callback+0x1>
    5cd6:	30 97       	sbiw	r30, 0x00	; 0
    5cd8:	09 f0       	breq	.+2      	; 0x5cdc <__vector_54+0x34>
    5cda:	19 95       	eicall
    5cdc:	ff 91       	pop	r31
    5cde:	ef 91       	pop	r30
    5ce0:	bf 91       	pop	r27
    5ce2:	af 91       	pop	r26
    5ce4:	9f 91       	pop	r25
    5ce6:	8f 91       	pop	r24
    5ce8:	7f 91       	pop	r23
    5cea:	6f 91       	pop	r22
    5cec:	5f 91       	pop	r21
    5cee:	4f 91       	pop	r20
    5cf0:	3f 91       	pop	r19
    5cf2:	2f 91       	pop	r18
    5cf4:	0f 90       	pop	r0
    5cf6:	0b be       	out	0x3b, r0	; 59
    5cf8:	0f 90       	pop	r0
    5cfa:	0f be       	out	0x3f, r0	; 63
    5cfc:	0f 90       	pop	r0
    5cfe:	1f 90       	pop	r1
    5d00:	18 95       	reti

00005d02 <__vector_55>:
    5d02:	1f 92       	push	r1
    5d04:	0f 92       	push	r0
    5d06:	0f b6       	in	r0, 0x3f	; 63
    5d08:	0f 92       	push	r0
    5d0a:	11 24       	eor	r1, r1
    5d0c:	0b b6       	in	r0, 0x3b	; 59
    5d0e:	0f 92       	push	r0
    5d10:	2f 93       	push	r18
    5d12:	3f 93       	push	r19
    5d14:	4f 93       	push	r20
    5d16:	5f 93       	push	r21
    5d18:	6f 93       	push	r22
    5d1a:	7f 93       	push	r23
    5d1c:	8f 93       	push	r24
    5d1e:	9f 93       	push	r25
    5d20:	af 93       	push	r26
    5d22:	bf 93       	push	r27
    5d24:	ef 93       	push	r30
    5d26:	ff 93       	push	r31
    5d28:	e0 91 9d 26 	lds	r30, 0x269D	; 0x80269d <tc_tce1_cca_callback>
    5d2c:	f0 91 9e 26 	lds	r31, 0x269E	; 0x80269e <tc_tce1_cca_callback+0x1>
    5d30:	30 97       	sbiw	r30, 0x00	; 0
    5d32:	09 f0       	breq	.+2      	; 0x5d36 <__vector_55+0x34>
    5d34:	19 95       	eicall
    5d36:	ff 91       	pop	r31
    5d38:	ef 91       	pop	r30
    5d3a:	bf 91       	pop	r27
    5d3c:	af 91       	pop	r26
    5d3e:	9f 91       	pop	r25
    5d40:	8f 91       	pop	r24
    5d42:	7f 91       	pop	r23
    5d44:	6f 91       	pop	r22
    5d46:	5f 91       	pop	r21
    5d48:	4f 91       	pop	r20
    5d4a:	3f 91       	pop	r19
    5d4c:	2f 91       	pop	r18
    5d4e:	0f 90       	pop	r0
    5d50:	0b be       	out	0x3b, r0	; 59
    5d52:	0f 90       	pop	r0
    5d54:	0f be       	out	0x3f, r0	; 63
    5d56:	0f 90       	pop	r0
    5d58:	1f 90       	pop	r1
    5d5a:	18 95       	reti

00005d5c <__vector_56>:
    5d5c:	1f 92       	push	r1
    5d5e:	0f 92       	push	r0
    5d60:	0f b6       	in	r0, 0x3f	; 63
    5d62:	0f 92       	push	r0
    5d64:	11 24       	eor	r1, r1
    5d66:	0b b6       	in	r0, 0x3b	; 59
    5d68:	0f 92       	push	r0
    5d6a:	2f 93       	push	r18
    5d6c:	3f 93       	push	r19
    5d6e:	4f 93       	push	r20
    5d70:	5f 93       	push	r21
    5d72:	6f 93       	push	r22
    5d74:	7f 93       	push	r23
    5d76:	8f 93       	push	r24
    5d78:	9f 93       	push	r25
    5d7a:	af 93       	push	r26
    5d7c:	bf 93       	push	r27
    5d7e:	ef 93       	push	r30
    5d80:	ff 93       	push	r31
    5d82:	e0 91 9b 26 	lds	r30, 0x269B	; 0x80269b <tc_tce1_ccb_callback>
    5d86:	f0 91 9c 26 	lds	r31, 0x269C	; 0x80269c <tc_tce1_ccb_callback+0x1>
    5d8a:	30 97       	sbiw	r30, 0x00	; 0
    5d8c:	09 f0       	breq	.+2      	; 0x5d90 <__vector_56+0x34>
    5d8e:	19 95       	eicall
    5d90:	ff 91       	pop	r31
    5d92:	ef 91       	pop	r30
    5d94:	bf 91       	pop	r27
    5d96:	af 91       	pop	r26
    5d98:	9f 91       	pop	r25
    5d9a:	8f 91       	pop	r24
    5d9c:	7f 91       	pop	r23
    5d9e:	6f 91       	pop	r22
    5da0:	5f 91       	pop	r21
    5da2:	4f 91       	pop	r20
    5da4:	3f 91       	pop	r19
    5da6:	2f 91       	pop	r18
    5da8:	0f 90       	pop	r0
    5daa:	0b be       	out	0x3b, r0	; 59
    5dac:	0f 90       	pop	r0
    5dae:	0f be       	out	0x3f, r0	; 63
    5db0:	0f 90       	pop	r0
    5db2:	1f 90       	pop	r1
    5db4:	18 95       	reti

00005db6 <__vector_108>:
    5db6:	1f 92       	push	r1
    5db8:	0f 92       	push	r0
    5dba:	0f b6       	in	r0, 0x3f	; 63
    5dbc:	0f 92       	push	r0
    5dbe:	11 24       	eor	r1, r1
    5dc0:	0b b6       	in	r0, 0x3b	; 59
    5dc2:	0f 92       	push	r0
    5dc4:	2f 93       	push	r18
    5dc6:	3f 93       	push	r19
    5dc8:	4f 93       	push	r20
    5dca:	5f 93       	push	r21
    5dcc:	6f 93       	push	r22
    5dce:	7f 93       	push	r23
    5dd0:	8f 93       	push	r24
    5dd2:	9f 93       	push	r25
    5dd4:	af 93       	push	r26
    5dd6:	bf 93       	push	r27
    5dd8:	ef 93       	push	r30
    5dda:	ff 93       	push	r31
    5ddc:	e0 91 99 26 	lds	r30, 0x2699	; 0x802699 <tc_tcf0_ovf_callback>
    5de0:	f0 91 9a 26 	lds	r31, 0x269A	; 0x80269a <tc_tcf0_ovf_callback+0x1>
    5de4:	30 97       	sbiw	r30, 0x00	; 0
    5de6:	09 f0       	breq	.+2      	; 0x5dea <__vector_108+0x34>
    5de8:	19 95       	eicall
    5dea:	ff 91       	pop	r31
    5dec:	ef 91       	pop	r30
    5dee:	bf 91       	pop	r27
    5df0:	af 91       	pop	r26
    5df2:	9f 91       	pop	r25
    5df4:	8f 91       	pop	r24
    5df6:	7f 91       	pop	r23
    5df8:	6f 91       	pop	r22
    5dfa:	5f 91       	pop	r21
    5dfc:	4f 91       	pop	r20
    5dfe:	3f 91       	pop	r19
    5e00:	2f 91       	pop	r18
    5e02:	0f 90       	pop	r0
    5e04:	0b be       	out	0x3b, r0	; 59
    5e06:	0f 90       	pop	r0
    5e08:	0f be       	out	0x3f, r0	; 63
    5e0a:	0f 90       	pop	r0
    5e0c:	1f 90       	pop	r1
    5e0e:	18 95       	reti

00005e10 <__vector_109>:
    5e10:	1f 92       	push	r1
    5e12:	0f 92       	push	r0
    5e14:	0f b6       	in	r0, 0x3f	; 63
    5e16:	0f 92       	push	r0
    5e18:	11 24       	eor	r1, r1
    5e1a:	0b b6       	in	r0, 0x3b	; 59
    5e1c:	0f 92       	push	r0
    5e1e:	2f 93       	push	r18
    5e20:	3f 93       	push	r19
    5e22:	4f 93       	push	r20
    5e24:	5f 93       	push	r21
    5e26:	6f 93       	push	r22
    5e28:	7f 93       	push	r23
    5e2a:	8f 93       	push	r24
    5e2c:	9f 93       	push	r25
    5e2e:	af 93       	push	r26
    5e30:	bf 93       	push	r27
    5e32:	ef 93       	push	r30
    5e34:	ff 93       	push	r31
    5e36:	e0 91 97 26 	lds	r30, 0x2697	; 0x802697 <tc_tcf0_err_callback>
    5e3a:	f0 91 98 26 	lds	r31, 0x2698	; 0x802698 <tc_tcf0_err_callback+0x1>
    5e3e:	30 97       	sbiw	r30, 0x00	; 0
    5e40:	09 f0       	breq	.+2      	; 0x5e44 <__vector_109+0x34>
    5e42:	19 95       	eicall
    5e44:	ff 91       	pop	r31
    5e46:	ef 91       	pop	r30
    5e48:	bf 91       	pop	r27
    5e4a:	af 91       	pop	r26
    5e4c:	9f 91       	pop	r25
    5e4e:	8f 91       	pop	r24
    5e50:	7f 91       	pop	r23
    5e52:	6f 91       	pop	r22
    5e54:	5f 91       	pop	r21
    5e56:	4f 91       	pop	r20
    5e58:	3f 91       	pop	r19
    5e5a:	2f 91       	pop	r18
    5e5c:	0f 90       	pop	r0
    5e5e:	0b be       	out	0x3b, r0	; 59
    5e60:	0f 90       	pop	r0
    5e62:	0f be       	out	0x3f, r0	; 63
    5e64:	0f 90       	pop	r0
    5e66:	1f 90       	pop	r1
    5e68:	18 95       	reti

00005e6a <__vector_110>:
    5e6a:	1f 92       	push	r1
    5e6c:	0f 92       	push	r0
    5e6e:	0f b6       	in	r0, 0x3f	; 63
    5e70:	0f 92       	push	r0
    5e72:	11 24       	eor	r1, r1
    5e74:	0b b6       	in	r0, 0x3b	; 59
    5e76:	0f 92       	push	r0
    5e78:	2f 93       	push	r18
    5e7a:	3f 93       	push	r19
    5e7c:	4f 93       	push	r20
    5e7e:	5f 93       	push	r21
    5e80:	6f 93       	push	r22
    5e82:	7f 93       	push	r23
    5e84:	8f 93       	push	r24
    5e86:	9f 93       	push	r25
    5e88:	af 93       	push	r26
    5e8a:	bf 93       	push	r27
    5e8c:	ef 93       	push	r30
    5e8e:	ff 93       	push	r31
    5e90:	e0 91 95 26 	lds	r30, 0x2695	; 0x802695 <tc_tcf0_cca_callback>
    5e94:	f0 91 96 26 	lds	r31, 0x2696	; 0x802696 <tc_tcf0_cca_callback+0x1>
    5e98:	30 97       	sbiw	r30, 0x00	; 0
    5e9a:	09 f0       	breq	.+2      	; 0x5e9e <__vector_110+0x34>
    5e9c:	19 95       	eicall
    5e9e:	ff 91       	pop	r31
    5ea0:	ef 91       	pop	r30
    5ea2:	bf 91       	pop	r27
    5ea4:	af 91       	pop	r26
    5ea6:	9f 91       	pop	r25
    5ea8:	8f 91       	pop	r24
    5eaa:	7f 91       	pop	r23
    5eac:	6f 91       	pop	r22
    5eae:	5f 91       	pop	r21
    5eb0:	4f 91       	pop	r20
    5eb2:	3f 91       	pop	r19
    5eb4:	2f 91       	pop	r18
    5eb6:	0f 90       	pop	r0
    5eb8:	0b be       	out	0x3b, r0	; 59
    5eba:	0f 90       	pop	r0
    5ebc:	0f be       	out	0x3f, r0	; 63
    5ebe:	0f 90       	pop	r0
    5ec0:	1f 90       	pop	r1
    5ec2:	18 95       	reti

00005ec4 <__vector_111>:
    5ec4:	1f 92       	push	r1
    5ec6:	0f 92       	push	r0
    5ec8:	0f b6       	in	r0, 0x3f	; 63
    5eca:	0f 92       	push	r0
    5ecc:	11 24       	eor	r1, r1
    5ece:	0b b6       	in	r0, 0x3b	; 59
    5ed0:	0f 92       	push	r0
    5ed2:	2f 93       	push	r18
    5ed4:	3f 93       	push	r19
    5ed6:	4f 93       	push	r20
    5ed8:	5f 93       	push	r21
    5eda:	6f 93       	push	r22
    5edc:	7f 93       	push	r23
    5ede:	8f 93       	push	r24
    5ee0:	9f 93       	push	r25
    5ee2:	af 93       	push	r26
    5ee4:	bf 93       	push	r27
    5ee6:	ef 93       	push	r30
    5ee8:	ff 93       	push	r31
    5eea:	e0 91 93 26 	lds	r30, 0x2693	; 0x802693 <tc_tcf0_ccb_callback>
    5eee:	f0 91 94 26 	lds	r31, 0x2694	; 0x802694 <tc_tcf0_ccb_callback+0x1>
    5ef2:	30 97       	sbiw	r30, 0x00	; 0
    5ef4:	09 f0       	breq	.+2      	; 0x5ef8 <__vector_111+0x34>
    5ef6:	19 95       	eicall
    5ef8:	ff 91       	pop	r31
    5efa:	ef 91       	pop	r30
    5efc:	bf 91       	pop	r27
    5efe:	af 91       	pop	r26
    5f00:	9f 91       	pop	r25
    5f02:	8f 91       	pop	r24
    5f04:	7f 91       	pop	r23
    5f06:	6f 91       	pop	r22
    5f08:	5f 91       	pop	r21
    5f0a:	4f 91       	pop	r20
    5f0c:	3f 91       	pop	r19
    5f0e:	2f 91       	pop	r18
    5f10:	0f 90       	pop	r0
    5f12:	0b be       	out	0x3b, r0	; 59
    5f14:	0f 90       	pop	r0
    5f16:	0f be       	out	0x3f, r0	; 63
    5f18:	0f 90       	pop	r0
    5f1a:	1f 90       	pop	r1
    5f1c:	18 95       	reti

00005f1e <__vector_112>:
    5f1e:	1f 92       	push	r1
    5f20:	0f 92       	push	r0
    5f22:	0f b6       	in	r0, 0x3f	; 63
    5f24:	0f 92       	push	r0
    5f26:	11 24       	eor	r1, r1
    5f28:	0b b6       	in	r0, 0x3b	; 59
    5f2a:	0f 92       	push	r0
    5f2c:	2f 93       	push	r18
    5f2e:	3f 93       	push	r19
    5f30:	4f 93       	push	r20
    5f32:	5f 93       	push	r21
    5f34:	6f 93       	push	r22
    5f36:	7f 93       	push	r23
    5f38:	8f 93       	push	r24
    5f3a:	9f 93       	push	r25
    5f3c:	af 93       	push	r26
    5f3e:	bf 93       	push	r27
    5f40:	ef 93       	push	r30
    5f42:	ff 93       	push	r31
    5f44:	e0 91 91 26 	lds	r30, 0x2691	; 0x802691 <tc_tcf0_ccc_callback>
    5f48:	f0 91 92 26 	lds	r31, 0x2692	; 0x802692 <tc_tcf0_ccc_callback+0x1>
    5f4c:	30 97       	sbiw	r30, 0x00	; 0
    5f4e:	09 f0       	breq	.+2      	; 0x5f52 <__vector_112+0x34>
    5f50:	19 95       	eicall
    5f52:	ff 91       	pop	r31
    5f54:	ef 91       	pop	r30
    5f56:	bf 91       	pop	r27
    5f58:	af 91       	pop	r26
    5f5a:	9f 91       	pop	r25
    5f5c:	8f 91       	pop	r24
    5f5e:	7f 91       	pop	r23
    5f60:	6f 91       	pop	r22
    5f62:	5f 91       	pop	r21
    5f64:	4f 91       	pop	r20
    5f66:	3f 91       	pop	r19
    5f68:	2f 91       	pop	r18
    5f6a:	0f 90       	pop	r0
    5f6c:	0b be       	out	0x3b, r0	; 59
    5f6e:	0f 90       	pop	r0
    5f70:	0f be       	out	0x3f, r0	; 63
    5f72:	0f 90       	pop	r0
    5f74:	1f 90       	pop	r1
    5f76:	18 95       	reti

00005f78 <__vector_113>:
    5f78:	1f 92       	push	r1
    5f7a:	0f 92       	push	r0
    5f7c:	0f b6       	in	r0, 0x3f	; 63
    5f7e:	0f 92       	push	r0
    5f80:	11 24       	eor	r1, r1
    5f82:	0b b6       	in	r0, 0x3b	; 59
    5f84:	0f 92       	push	r0
    5f86:	2f 93       	push	r18
    5f88:	3f 93       	push	r19
    5f8a:	4f 93       	push	r20
    5f8c:	5f 93       	push	r21
    5f8e:	6f 93       	push	r22
    5f90:	7f 93       	push	r23
    5f92:	8f 93       	push	r24
    5f94:	9f 93       	push	r25
    5f96:	af 93       	push	r26
    5f98:	bf 93       	push	r27
    5f9a:	ef 93       	push	r30
    5f9c:	ff 93       	push	r31
    5f9e:	e0 91 8f 26 	lds	r30, 0x268F	; 0x80268f <tc_tcf0_ccd_callback>
    5fa2:	f0 91 90 26 	lds	r31, 0x2690	; 0x802690 <tc_tcf0_ccd_callback+0x1>
    5fa6:	30 97       	sbiw	r30, 0x00	; 0
    5fa8:	09 f0       	breq	.+2      	; 0x5fac <__vector_113+0x34>
    5faa:	19 95       	eicall
    5fac:	ff 91       	pop	r31
    5fae:	ef 91       	pop	r30
    5fb0:	bf 91       	pop	r27
    5fb2:	af 91       	pop	r26
    5fb4:	9f 91       	pop	r25
    5fb6:	8f 91       	pop	r24
    5fb8:	7f 91       	pop	r23
    5fba:	6f 91       	pop	r22
    5fbc:	5f 91       	pop	r21
    5fbe:	4f 91       	pop	r20
    5fc0:	3f 91       	pop	r19
    5fc2:	2f 91       	pop	r18
    5fc4:	0f 90       	pop	r0
    5fc6:	0b be       	out	0x3b, r0	; 59
    5fc8:	0f 90       	pop	r0
    5fca:	0f be       	out	0x3f, r0	; 63
    5fcc:	0f 90       	pop	r0
    5fce:	1f 90       	pop	r1
    5fd0:	18 95       	reti

00005fd2 <tc_enable>:
    5fd2:	1f 93       	push	r17
    5fd4:	cf 93       	push	r28
    5fd6:	df 93       	push	r29
    5fd8:	1f 92       	push	r1
    5fda:	1f 92       	push	r1
    5fdc:	cd b7       	in	r28, 0x3d	; 61
    5fde:	de b7       	in	r29, 0x3e	; 62
    5fe0:	2f b7       	in	r18, 0x3f	; 63
    5fe2:	2a 83       	std	Y+2, r18	; 0x02
    5fe4:	f8 94       	cli
    5fe6:	1a 81       	ldd	r17, Y+2	; 0x02
    5fe8:	28 2f       	mov	r18, r24
    5fea:	39 2f       	mov	r19, r25
    5fec:	21 15       	cp	r18, r1
    5fee:	88 e0       	ldi	r24, 0x08	; 8
    5ff0:	38 07       	cpc	r19, r24
    5ff2:	49 f4       	brne	.+18     	; 0x6006 <__stack+0x7>
    5ff4:	61 e0       	ldi	r22, 0x01	; 1
    5ff6:	83 e0       	ldi	r24, 0x03	; 3
    5ff8:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    5ffc:	64 e0       	ldi	r22, 0x04	; 4
    5ffe:	83 e0       	ldi	r24, 0x03	; 3
    6000:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    6004:	4f c0       	rjmp	.+158    	; 0x60a4 <__stack+0xa5>
    6006:	20 34       	cpi	r18, 0x40	; 64
    6008:	88 e0       	ldi	r24, 0x08	; 8
    600a:	38 07       	cpc	r19, r24
    600c:	49 f4       	brne	.+18     	; 0x6020 <__stack+0x21>
    600e:	62 e0       	ldi	r22, 0x02	; 2
    6010:	83 e0       	ldi	r24, 0x03	; 3
    6012:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    6016:	64 e0       	ldi	r22, 0x04	; 4
    6018:	83 e0       	ldi	r24, 0x03	; 3
    601a:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    601e:	42 c0       	rjmp	.+132    	; 0x60a4 <__stack+0xa5>
    6020:	21 15       	cp	r18, r1
    6022:	89 e0       	ldi	r24, 0x09	; 9
    6024:	38 07       	cpc	r19, r24
    6026:	49 f4       	brne	.+18     	; 0x603a <__stack+0x3b>
    6028:	61 e0       	ldi	r22, 0x01	; 1
    602a:	84 e0       	ldi	r24, 0x04	; 4
    602c:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    6030:	64 e0       	ldi	r22, 0x04	; 4
    6032:	84 e0       	ldi	r24, 0x04	; 4
    6034:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    6038:	35 c0       	rjmp	.+106    	; 0x60a4 <__stack+0xa5>
    603a:	20 34       	cpi	r18, 0x40	; 64
    603c:	89 e0       	ldi	r24, 0x09	; 9
    603e:	38 07       	cpc	r19, r24
    6040:	49 f4       	brne	.+18     	; 0x6054 <__stack+0x55>
    6042:	62 e0       	ldi	r22, 0x02	; 2
    6044:	84 e0       	ldi	r24, 0x04	; 4
    6046:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    604a:	64 e0       	ldi	r22, 0x04	; 4
    604c:	84 e0       	ldi	r24, 0x04	; 4
    604e:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    6052:	28 c0       	rjmp	.+80     	; 0x60a4 <__stack+0xa5>
    6054:	21 15       	cp	r18, r1
    6056:	8a e0       	ldi	r24, 0x0A	; 10
    6058:	38 07       	cpc	r19, r24
    605a:	49 f4       	brne	.+18     	; 0x606e <__stack+0x6f>
    605c:	61 e0       	ldi	r22, 0x01	; 1
    605e:	85 e0       	ldi	r24, 0x05	; 5
    6060:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    6064:	64 e0       	ldi	r22, 0x04	; 4
    6066:	85 e0       	ldi	r24, 0x05	; 5
    6068:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    606c:	1b c0       	rjmp	.+54     	; 0x60a4 <__stack+0xa5>
    606e:	20 34       	cpi	r18, 0x40	; 64
    6070:	8a e0       	ldi	r24, 0x0A	; 10
    6072:	38 07       	cpc	r19, r24
    6074:	49 f4       	brne	.+18     	; 0x6088 <__stack+0x89>
    6076:	62 e0       	ldi	r22, 0x02	; 2
    6078:	85 e0       	ldi	r24, 0x05	; 5
    607a:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    607e:	64 e0       	ldi	r22, 0x04	; 4
    6080:	85 e0       	ldi	r24, 0x05	; 5
    6082:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    6086:	0e c0       	rjmp	.+28     	; 0x60a4 <__stack+0xa5>
    6088:	21 15       	cp	r18, r1
    608a:	3b 40       	sbci	r19, 0x0B	; 11
    608c:	49 f4       	brne	.+18     	; 0x60a0 <__stack+0xa1>
    608e:	61 e0       	ldi	r22, 0x01	; 1
    6090:	86 e0       	ldi	r24, 0x06	; 6
    6092:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    6096:	64 e0       	ldi	r22, 0x04	; 4
    6098:	86 e0       	ldi	r24, 0x06	; 6
    609a:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>
    609e:	02 c0       	rjmp	.+4      	; 0x60a4 <__stack+0xa5>
    60a0:	1f bf       	out	0x3f, r17	; 63
    60a2:	10 c0       	rjmp	.+32     	; 0x60c4 <__stack+0xc5>
    60a4:	80 91 d8 2a 	lds	r24, 0x2AD8	; 0x802ad8 <sleepmgr_locks+0x1>
    60a8:	8f 3f       	cpi	r24, 0xFF	; 255
    60aa:	09 f4       	brne	.+2      	; 0x60ae <__stack+0xaf>
    60ac:	ff cf       	rjmp	.-2      	; 0x60ac <__stack+0xad>
    60ae:	8f b7       	in	r24, 0x3f	; 63
    60b0:	89 83       	std	Y+1, r24	; 0x01
    60b2:	f8 94       	cli
    60b4:	99 81       	ldd	r25, Y+1	; 0x01
    60b6:	e7 ed       	ldi	r30, 0xD7	; 215
    60b8:	fa e2       	ldi	r31, 0x2A	; 42
    60ba:	81 81       	ldd	r24, Z+1	; 0x01
    60bc:	8f 5f       	subi	r24, 0xFF	; 255
    60be:	81 83       	std	Z+1, r24	; 0x01
    60c0:	9f bf       	out	0x3f, r25	; 63
    60c2:	1f bf       	out	0x3f, r17	; 63
    60c4:	0f 90       	pop	r0
    60c6:	0f 90       	pop	r0
    60c8:	df 91       	pop	r29
    60ca:	cf 91       	pop	r28
    60cc:	1f 91       	pop	r17
    60ce:	08 95       	ret

000060d0 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    60d0:	81 15       	cp	r24, r1
    60d2:	28 e0       	ldi	r18, 0x08	; 8
    60d4:	92 07       	cpc	r25, r18
    60d6:	29 f4       	brne	.+10     	; 0x60e2 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    60d8:	60 93 d5 26 	sts	0x26D5, r22	; 0x8026d5 <tc_tcc0_ovf_callback>
    60dc:	70 93 d6 26 	sts	0x26D6, r23	; 0x8026d6 <tc_tcc0_ovf_callback+0x1>
    60e0:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    60e2:	80 34       	cpi	r24, 0x40	; 64
    60e4:	28 e0       	ldi	r18, 0x08	; 8
    60e6:	92 07       	cpc	r25, r18
    60e8:	29 f4       	brne	.+10     	; 0x60f4 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    60ea:	60 93 c9 26 	sts	0x26C9, r22	; 0x8026c9 <tc_tcc1_ovf_callback>
    60ee:	70 93 ca 26 	sts	0x26CA, r23	; 0x8026ca <tc_tcc1_ovf_callback+0x1>
    60f2:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    60f4:	81 15       	cp	r24, r1
    60f6:	29 e0       	ldi	r18, 0x09	; 9
    60f8:	92 07       	cpc	r25, r18
    60fa:	29 f4       	brne	.+10     	; 0x6106 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    60fc:	60 93 c1 26 	sts	0x26C1, r22	; 0x8026c1 <tc_tcd0_ovf_callback>
    6100:	70 93 c2 26 	sts	0x26C2, r23	; 0x8026c2 <tc_tcd0_ovf_callback+0x1>
    6104:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    6106:	80 34       	cpi	r24, 0x40	; 64
    6108:	29 e0       	ldi	r18, 0x09	; 9
    610a:	92 07       	cpc	r25, r18
    610c:	29 f4       	brne	.+10     	; 0x6118 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    610e:	60 93 b5 26 	sts	0x26B5, r22	; 0x8026b5 <tc_tcd1_ovf_callback>
    6112:	70 93 b6 26 	sts	0x26B6, r23	; 0x8026b6 <tc_tcd1_ovf_callback+0x1>
    6116:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    6118:	81 15       	cp	r24, r1
    611a:	2a e0       	ldi	r18, 0x0A	; 10
    611c:	92 07       	cpc	r25, r18
    611e:	29 f4       	brne	.+10     	; 0x612a <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    6120:	60 93 ad 26 	sts	0x26AD, r22	; 0x8026ad <tc_tce0_ovf_callback>
    6124:	70 93 ae 26 	sts	0x26AE, r23	; 0x8026ae <tc_tce0_ovf_callback+0x1>
    6128:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    612a:	80 34       	cpi	r24, 0x40	; 64
    612c:	2a e0       	ldi	r18, 0x0A	; 10
    612e:	92 07       	cpc	r25, r18
    6130:	29 f4       	brne	.+10     	; 0x613c <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    6132:	60 93 a1 26 	sts	0x26A1, r22	; 0x8026a1 <tc_tce1_ovf_callback>
    6136:	70 93 a2 26 	sts	0x26A2, r23	; 0x8026a2 <tc_tce1_ovf_callback+0x1>
    613a:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    613c:	81 15       	cp	r24, r1
    613e:	9b 40       	sbci	r25, 0x0B	; 11
    6140:	21 f4       	brne	.+8      	; 0x614a <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    6142:	60 93 99 26 	sts	0x2699, r22	; 0x802699 <tc_tcf0_ovf_callback>
    6146:	70 93 9a 26 	sts	0x269A, r23	; 0x80269a <tc_tcf0_ovf_callback+0x1>
    614a:	08 95       	ret

0000614c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    614c:	cf 93       	push	r28
    614e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    6150:	e0 91 d7 26 	lds	r30, 0x26D7	; 0x8026d7 <transfer>
    6154:	f0 91 d8 26 	lds	r31, 0x26D8	; 0x8026d8 <transfer+0x1>
    6158:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    615a:	83 ff       	sbrs	r24, 3
    615c:	08 c0       	rjmp	.+16     	; 0x616e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    615e:	88 60       	ori	r24, 0x08	; 8
    6160:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    6162:	83 e0       	ldi	r24, 0x03	; 3
    6164:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    6166:	86 ef       	ldi	r24, 0xF6	; 246
    6168:	80 93 e1 26 	sts	0x26E1, r24	; 0x8026e1 <transfer+0xa>
    616c:	83 c0       	rjmp	.+262    	; 0x6274 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    616e:	98 2f       	mov	r25, r24
    6170:	94 71       	andi	r25, 0x14	; 20
    6172:	31 f0       	breq	.+12     	; 0x6180 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6174:	83 e0       	ldi	r24, 0x03	; 3
    6176:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    6178:	8f ef       	ldi	r24, 0xFF	; 255
    617a:	80 93 e1 26 	sts	0x26E1, r24	; 0x8026e1 <transfer+0xa>
    617e:	7a c0       	rjmp	.+244    	; 0x6274 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    6180:	86 ff       	sbrs	r24, 6
    6182:	43 c0       	rjmp	.+134    	; 0x620a <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    6184:	c7 ed       	ldi	r28, 0xD7	; 215
    6186:	d6 e2       	ldi	r29, 0x26	; 38
    6188:	aa 81       	ldd	r26, Y+2	; 0x02
    618a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    618c:	8c 81       	ldd	r24, Y+4	; 0x04
    618e:	9d 81       	ldd	r25, Y+5	; 0x05
    6190:	14 96       	adiw	r26, 0x04	; 4
    6192:	2d 91       	ld	r18, X+
    6194:	3c 91       	ld	r19, X
    6196:	15 97       	sbiw	r26, 0x05	; 5
    6198:	82 17       	cp	r24, r18
    619a:	93 07       	cpc	r25, r19
    619c:	6c f4       	brge	.+26     	; 0x61b8 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    619e:	9c 01       	movw	r18, r24
    61a0:	2f 5f       	subi	r18, 0xFF	; 255
    61a2:	3f 4f       	sbci	r19, 0xFF	; 255
    61a4:	20 93 db 26 	sts	0x26DB, r18	; 0x8026db <transfer+0x4>
    61a8:	30 93 dc 26 	sts	0x26DC, r19	; 0x8026dc <transfer+0x5>
    61ac:	a8 0f       	add	r26, r24
    61ae:	b9 1f       	adc	r27, r25
    61b0:	11 96       	adiw	r26, 0x01	; 1
    61b2:	8c 91       	ld	r24, X
    61b4:	87 83       	std	Z+7, r24	; 0x07
    61b6:	5e c0       	rjmp	.+188    	; 0x6274 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    61b8:	80 91 dd 26 	lds	r24, 0x26DD	; 0x8026dd <transfer+0x6>
    61bc:	90 91 de 26 	lds	r25, 0x26DE	; 0x8026de <transfer+0x7>
    61c0:	18 96       	adiw	r26, 0x08	; 8
    61c2:	2d 91       	ld	r18, X+
    61c4:	3c 91       	ld	r19, X
    61c6:	19 97       	sbiw	r26, 0x09	; 9
    61c8:	82 17       	cp	r24, r18
    61ca:	93 07       	cpc	r25, r19
    61cc:	c8 f4       	brcc	.+50     	; 0x6200 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    61ce:	20 91 df 26 	lds	r18, 0x26DF	; 0x8026df <transfer+0x8>
    61d2:	22 23       	and	r18, r18
    61d4:	21 f0       	breq	.+8      	; 0x61de <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    61d6:	86 81       	ldd	r24, Z+6	; 0x06
    61d8:	81 60       	ori	r24, 0x01	; 1
    61da:	86 83       	std	Z+6, r24	; 0x06
    61dc:	4b c0       	rjmp	.+150    	; 0x6274 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    61de:	16 96       	adiw	r26, 0x06	; 6
    61e0:	2d 91       	ld	r18, X+
    61e2:	3c 91       	ld	r19, X
    61e4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    61e6:	ac 01       	movw	r20, r24
    61e8:	4f 5f       	subi	r20, 0xFF	; 255
    61ea:	5f 4f       	sbci	r21, 0xFF	; 255
    61ec:	40 93 dd 26 	sts	0x26DD, r20	; 0x8026dd <transfer+0x6>
    61f0:	50 93 de 26 	sts	0x26DE, r21	; 0x8026de <transfer+0x7>
    61f4:	d9 01       	movw	r26, r18
    61f6:	a8 0f       	add	r26, r24
    61f8:	b9 1f       	adc	r27, r25
    61fa:	8c 91       	ld	r24, X
    61fc:	87 83       	std	Z+7, r24	; 0x07
    61fe:	3a c0       	rjmp	.+116    	; 0x6274 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6200:	83 e0       	ldi	r24, 0x03	; 3
    6202:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    6204:	10 92 e1 26 	sts	0x26E1, r1	; 0x8026e1 <transfer+0xa>
    6208:	35 c0       	rjmp	.+106    	; 0x6274 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    620a:	88 23       	and	r24, r24
    620c:	84 f5       	brge	.+96     	; 0x626e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    620e:	a7 ed       	ldi	r26, 0xD7	; 215
    6210:	b6 e2       	ldi	r27, 0x26	; 38
    6212:	12 96       	adiw	r26, 0x02	; 2
    6214:	cd 91       	ld	r28, X+
    6216:	dc 91       	ld	r29, X
    6218:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    621a:	16 96       	adiw	r26, 0x06	; 6
    621c:	8d 91       	ld	r24, X+
    621e:	9c 91       	ld	r25, X
    6220:	17 97       	sbiw	r26, 0x07	; 7
    6222:	28 85       	ldd	r18, Y+8	; 0x08
    6224:	39 85       	ldd	r19, Y+9	; 0x09
    6226:	82 17       	cp	r24, r18
    6228:	93 07       	cpc	r25, r19
    622a:	d8 f4       	brcc	.+54     	; 0x6262 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    622c:	6e 81       	ldd	r22, Y+6	; 0x06
    622e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    6230:	9c 01       	movw	r18, r24
    6232:	2f 5f       	subi	r18, 0xFF	; 255
    6234:	3f 4f       	sbci	r19, 0xFF	; 255
    6236:	20 93 dd 26 	sts	0x26DD, r18	; 0x8026dd <transfer+0x6>
    623a:	30 93 de 26 	sts	0x26DE, r19	; 0x8026de <transfer+0x7>
    623e:	47 81       	ldd	r20, Z+7	; 0x07
    6240:	db 01       	movw	r26, r22
    6242:	a8 0f       	add	r26, r24
    6244:	b9 1f       	adc	r27, r25
    6246:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    6248:	88 85       	ldd	r24, Y+8	; 0x08
    624a:	99 85       	ldd	r25, Y+9	; 0x09
    624c:	28 17       	cp	r18, r24
    624e:	39 07       	cpc	r19, r25
    6250:	18 f4       	brcc	.+6      	; 0x6258 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6252:	82 e0       	ldi	r24, 0x02	; 2
    6254:	83 83       	std	Z+3, r24	; 0x03
    6256:	0e c0       	rjmp	.+28     	; 0x6274 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    6258:	87 e0       	ldi	r24, 0x07	; 7
    625a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    625c:	10 92 e1 26 	sts	0x26E1, r1	; 0x8026e1 <transfer+0xa>
    6260:	09 c0       	rjmp	.+18     	; 0x6274 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6262:	83 e0       	ldi	r24, 0x03	; 3
    6264:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    6266:	89 ef       	ldi	r24, 0xF9	; 249
    6268:	80 93 e1 26 	sts	0x26E1, r24	; 0x8026e1 <transfer+0xa>
    626c:	03 c0       	rjmp	.+6      	; 0x6274 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    626e:	8b ef       	ldi	r24, 0xFB	; 251
    6270:	80 93 e1 26 	sts	0x26E1, r24	; 0x8026e1 <transfer+0xa>
	}
}
    6274:	df 91       	pop	r29
    6276:	cf 91       	pop	r28
    6278:	08 95       	ret

0000627a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    627a:	1f 92       	push	r1
    627c:	0f 92       	push	r0
    627e:	0f b6       	in	r0, 0x3f	; 63
    6280:	0f 92       	push	r0
    6282:	11 24       	eor	r1, r1
    6284:	0b b6       	in	r0, 0x3b	; 59
    6286:	0f 92       	push	r0
    6288:	2f 93       	push	r18
    628a:	3f 93       	push	r19
    628c:	4f 93       	push	r20
    628e:	5f 93       	push	r21
    6290:	6f 93       	push	r22
    6292:	7f 93       	push	r23
    6294:	8f 93       	push	r24
    6296:	9f 93       	push	r25
    6298:	af 93       	push	r26
    629a:	bf 93       	push	r27
    629c:	ef 93       	push	r30
    629e:	ff 93       	push	r31
    62a0:	55 df       	rcall	.-342    	; 0x614c <twim_interrupt_handler>
    62a2:	ff 91       	pop	r31
    62a4:	ef 91       	pop	r30
    62a6:	bf 91       	pop	r27
    62a8:	af 91       	pop	r26
    62aa:	9f 91       	pop	r25
    62ac:	8f 91       	pop	r24
    62ae:	7f 91       	pop	r23
    62b0:	6f 91       	pop	r22
    62b2:	5f 91       	pop	r21
    62b4:	4f 91       	pop	r20
    62b6:	3f 91       	pop	r19
    62b8:	2f 91       	pop	r18
    62ba:	0f 90       	pop	r0
    62bc:	0b be       	out	0x3b, r0	; 59
    62be:	0f 90       	pop	r0
    62c0:	0f be       	out	0x3f, r0	; 63
    62c2:	0f 90       	pop	r0
    62c4:	1f 90       	pop	r1
    62c6:	18 95       	reti

000062c8 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    62c8:	1f 92       	push	r1
    62ca:	0f 92       	push	r0
    62cc:	0f b6       	in	r0, 0x3f	; 63
    62ce:	0f 92       	push	r0
    62d0:	11 24       	eor	r1, r1
    62d2:	0b b6       	in	r0, 0x3b	; 59
    62d4:	0f 92       	push	r0
    62d6:	2f 93       	push	r18
    62d8:	3f 93       	push	r19
    62da:	4f 93       	push	r20
    62dc:	5f 93       	push	r21
    62de:	6f 93       	push	r22
    62e0:	7f 93       	push	r23
    62e2:	8f 93       	push	r24
    62e4:	9f 93       	push	r25
    62e6:	af 93       	push	r26
    62e8:	bf 93       	push	r27
    62ea:	ef 93       	push	r30
    62ec:	ff 93       	push	r31
    62ee:	2e df       	rcall	.-420    	; 0x614c <twim_interrupt_handler>
    62f0:	ff 91       	pop	r31
    62f2:	ef 91       	pop	r30
    62f4:	bf 91       	pop	r27
    62f6:	af 91       	pop	r26
    62f8:	9f 91       	pop	r25
    62fa:	8f 91       	pop	r24
    62fc:	7f 91       	pop	r23
    62fe:	6f 91       	pop	r22
    6300:	5f 91       	pop	r21
    6302:	4f 91       	pop	r20
    6304:	3f 91       	pop	r19
    6306:	2f 91       	pop	r18
    6308:	0f 90       	pop	r0
    630a:	0b be       	out	0x3b, r0	; 59
    630c:	0f 90       	pop	r0
    630e:	0f be       	out	0x3f, r0	; 63
    6310:	0f 90       	pop	r0
    6312:	1f 90       	pop	r1
    6314:	18 95       	reti

00006316 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    6316:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    6318:	db 01       	movw	r26, r22
    631a:	14 96       	adiw	r26, 0x04	; 4
    631c:	8c 91       	ld	r24, X
    631e:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    6320:	88 eb       	ldi	r24, 0xB8	; 184
    6322:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    6324:	81 e0       	ldi	r24, 0x01	; 1
    6326:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    6328:	e7 ed       	ldi	r30, 0xD7	; 215
    632a:	f6 e2       	ldi	r31, 0x26	; 38
    632c:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    632e:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    6330:	e0 ea       	ldi	r30, 0xA0	; 160
    6332:	f0 e0       	ldi	r31, 0x00	; 0
    6334:	82 81       	ldd	r24, Z+2	; 0x02
    6336:	82 60       	ori	r24, 0x02	; 2
    6338:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    633a:	78 94       	sei

	return STATUS_OK;
}
    633c:	80 e0       	ldi	r24, 0x00	; 0
    633e:	08 95       	ret

00006340 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    6340:	cf 93       	push	r28
    6342:	df 93       	push	r29
    6344:	1f 92       	push	r1
    6346:	cd b7       	in	r28, 0x3d	; 61
    6348:	de b7       	in	r29, 0x3e	; 62
    634a:	9c 01       	movw	r18, r24
    634c:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    634e:	89 2b       	or	r24, r25
    6350:	09 f4       	brne	.+2      	; 0x6354 <twi_master_transfer+0x14>
    6352:	51 c0       	rjmp	.+162    	; 0x63f6 <twi_master_transfer+0xb6>
    6354:	30 97       	sbiw	r30, 0x00	; 0
    6356:	09 f4       	brne	.+2      	; 0x635a <twi_master_transfer+0x1a>
    6358:	50 c0       	rjmp	.+160    	; 0x63fa <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    635a:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    635c:	80 91 e0 26 	lds	r24, 0x26E0	; 0x8026e0 <transfer+0x9>
    6360:	88 23       	and	r24, r24
    6362:	19 f0       	breq	.+6      	; 0x636a <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    6364:	99 23       	and	r25, r25
    6366:	f1 f3       	breq	.-4      	; 0x6364 <twi_master_transfer+0x24>
    6368:	4a c0       	rjmp	.+148    	; 0x63fe <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    636a:	8f b7       	in	r24, 0x3f	; 63
    636c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    636e:	f8 94       	cli
	return flags;
    6370:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    6372:	a7 ed       	ldi	r26, 0xD7	; 215
    6374:	b6 e2       	ldi	r27, 0x26	; 38
    6376:	91 e0       	ldi	r25, 0x01	; 1
    6378:	19 96       	adiw	r26, 0x09	; 9
    637a:	9c 93       	st	X, r25
    637c:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    637e:	90 e8       	ldi	r25, 0x80	; 128
    6380:	1a 96       	adiw	r26, 0x0a	; 10
    6382:	9c 93       	st	X, r25
    6384:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6386:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    6388:	2d 93       	st	X+, r18
    638a:	3c 93       	st	X, r19
    638c:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    638e:	12 96       	adiw	r26, 0x02	; 2
    6390:	6d 93       	st	X+, r22
    6392:	7c 93       	st	X, r23
    6394:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    6396:	14 96       	adiw	r26, 0x04	; 4
    6398:	1d 92       	st	X+, r1
    639a:	1c 92       	st	X, r1
    639c:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    639e:	16 96       	adiw	r26, 0x06	; 6
    63a0:	1d 92       	st	X+, r1
    63a2:	1c 92       	st	X, r1
    63a4:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    63a6:	18 96       	adiw	r26, 0x08	; 8
    63a8:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    63aa:	80 81       	ld	r24, Z
    63ac:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    63ae:	64 81       	ldd	r22, Z+4	; 0x04
    63b0:	75 81       	ldd	r23, Z+5	; 0x05
    63b2:	67 2b       	or	r22, r23
    63b4:	11 f4       	brne	.+4      	; 0x63ba <twi_master_transfer+0x7a>
    63b6:	41 11       	cpse	r20, r1
    63b8:	03 c0       	rjmp	.+6      	; 0x63c0 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    63ba:	f9 01       	movw	r30, r18
    63bc:	86 83       	std	Z+6, r24	; 0x06
    63be:	03 c0       	rjmp	.+6      	; 0x63c6 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    63c0:	81 60       	ori	r24, 0x01	; 1
    63c2:	f9 01       	movw	r30, r18
    63c4:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    63c6:	e7 ed       	ldi	r30, 0xD7	; 215
    63c8:	f6 e2       	ldi	r31, 0x26	; 38
    63ca:	92 85       	ldd	r25, Z+10	; 0x0a
    63cc:	90 38       	cpi	r25, 0x80	; 128
    63ce:	e9 f3       	breq	.-6      	; 0x63ca <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    63d0:	f9 01       	movw	r30, r18
    63d2:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    63d4:	83 70       	andi	r24, 0x03	; 3
    63d6:	81 30       	cpi	r24, 0x01	; 1
    63d8:	49 f0       	breq	.+18     	; 0x63ec <twi_master_transfer+0xac>
    63da:	a7 ed       	ldi	r26, 0xD7	; 215
    63dc:	b6 e2       	ldi	r27, 0x26	; 38
    63de:	ed 91       	ld	r30, X+
    63e0:	fc 91       	ld	r31, X
    63e2:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    63e4:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    63e6:	83 70       	andi	r24, 0x03	; 3
    63e8:	81 30       	cpi	r24, 0x01	; 1
    63ea:	c9 f7       	brne	.-14     	; 0x63de <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    63ec:	e7 ed       	ldi	r30, 0xD7	; 215
    63ee:	f6 e2       	ldi	r31, 0x26	; 38
    63f0:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    63f2:	11 86       	std	Z+9, r1	; 0x09
    63f4:	05 c0       	rjmp	.+10     	; 0x6400 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    63f6:	88 ef       	ldi	r24, 0xF8	; 248
    63f8:	03 c0       	rjmp	.+6      	; 0x6400 <twi_master_transfer+0xc0>
    63fa:	88 ef       	ldi	r24, 0xF8	; 248
    63fc:	01 c0       	rjmp	.+2      	; 0x6400 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    63fe:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    6400:	0f 90       	pop	r0
    6402:	df 91       	pop	r29
    6404:	cf 91       	pop	r28
    6406:	08 95       	ret

00006408 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    6408:	cf 93       	push	r28
    640a:	df 93       	push	r29
    640c:	1f 92       	push	r1
    640e:	1f 92       	push	r1
    6410:	cd b7       	in	r28, 0x3d	; 61
    6412:	de b7       	in	r29, 0x3e	; 62
    6414:	81 11       	cpse	r24, r1
    6416:	26 c0       	rjmp	.+76     	; 0x6464 <udd_sleep_mode+0x5c>
    6418:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <udd_b_idle>
    641c:	99 23       	and	r25, r25
    641e:	f9 f0       	breq	.+62     	; 0x645e <udd_sleep_mode+0x56>
    6420:	90 91 d8 2a 	lds	r25, 0x2AD8	; 0x802ad8 <sleepmgr_locks+0x1>
    6424:	91 11       	cpse	r25, r1
    6426:	01 c0       	rjmp	.+2      	; 0x642a <udd_sleep_mode+0x22>
    6428:	ff cf       	rjmp	.-2      	; 0x6428 <udd_sleep_mode+0x20>
    642a:	9f b7       	in	r25, 0x3f	; 63
    642c:	9a 83       	std	Y+2, r25	; 0x02
    642e:	f8 94       	cli
    6430:	2a 81       	ldd	r18, Y+2	; 0x02
    6432:	e7 ed       	ldi	r30, 0xD7	; 215
    6434:	fa e2       	ldi	r31, 0x2A	; 42
    6436:	91 81       	ldd	r25, Z+1	; 0x01
    6438:	91 50       	subi	r25, 0x01	; 1
    643a:	91 83       	std	Z+1, r25	; 0x01
    643c:	2f bf       	out	0x3f, r18	; 63
    643e:	0f c0       	rjmp	.+30     	; 0x645e <udd_sleep_mode+0x56>
    6440:	90 91 d8 2a 	lds	r25, 0x2AD8	; 0x802ad8 <sleepmgr_locks+0x1>
    6444:	9f 3f       	cpi	r25, 0xFF	; 255
    6446:	09 f4       	brne	.+2      	; 0x644a <udd_sleep_mode+0x42>
    6448:	ff cf       	rjmp	.-2      	; 0x6448 <udd_sleep_mode+0x40>
    644a:	9f b7       	in	r25, 0x3f	; 63
    644c:	99 83       	std	Y+1, r25	; 0x01
    644e:	f8 94       	cli
    6450:	29 81       	ldd	r18, Y+1	; 0x01
    6452:	e7 ed       	ldi	r30, 0xD7	; 215
    6454:	fa e2       	ldi	r31, 0x2A	; 42
    6456:	91 81       	ldd	r25, Z+1	; 0x01
    6458:	9f 5f       	subi	r25, 0xFF	; 255
    645a:	91 83       	std	Z+1, r25	; 0x01
    645c:	2f bf       	out	0x3f, r18	; 63
    645e:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <udd_b_idle>
    6462:	05 c0       	rjmp	.+10     	; 0x646e <udd_sleep_mode+0x66>
    6464:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <udd_b_idle>
    6468:	99 23       	and	r25, r25
    646a:	51 f3       	breq	.-44     	; 0x6440 <udd_sleep_mode+0x38>
    646c:	f8 cf       	rjmp	.-16     	; 0x645e <udd_sleep_mode+0x56>
    646e:	0f 90       	pop	r0
    6470:	0f 90       	pop	r0
    6472:	df 91       	pop	r29
    6474:	cf 91       	pop	r28
    6476:	08 95       	ret

00006478 <udd_ctrl_init>:
    6478:	0f 93       	push	r16
    647a:	e8 ec       	ldi	r30, 0xC8	; 200
    647c:	f4 e0       	ldi	r31, 0x04	; 4
    647e:	80 81       	ld	r24, Z
    6480:	8f 7d       	andi	r24, 0xDF	; 223
    6482:	80 83       	st	Z, r24
    6484:	80 81       	ld	r24, Z
    6486:	8f 7d       	andi	r24, 0xDF	; 223
    6488:	80 83       	st	Z, r24
    648a:	e0 ee       	ldi	r30, 0xE0	; 224
    648c:	f7 e2       	ldi	r31, 0x27	; 39
    648e:	02 e0       	ldi	r16, 0x02	; 2
    6490:	05 93       	las	Z, r16
    6492:	10 92 e2 27 	sts	0x27E2, r1	; 0x8027e2 <udd_sram+0x16>
    6496:	10 92 e3 27 	sts	0x27E3, r1	; 0x8027e3 <udd_sram+0x17>
    649a:	00 e2       	ldi	r16, 0x20	; 32
    649c:	06 93       	lac	Z, r16
    649e:	00 e4       	ldi	r16, 0x40	; 64
    64a0:	06 93       	lac	Z, r16
    64a2:	e8 ed       	ldi	r30, 0xD8	; 216
    64a4:	f7 e2       	ldi	r31, 0x27	; 39
    64a6:	00 e4       	ldi	r16, 0x40	; 64
    64a8:	06 93       	lac	Z, r16
    64aa:	e7 ec       	ldi	r30, 0xC7	; 199
    64ac:	fa e2       	ldi	r31, 0x2A	; 42
    64ae:	14 86       	std	Z+12, r1	; 0x0c
    64b0:	15 86       	std	Z+13, r1	; 0x0d
    64b2:	16 86       	std	Z+14, r1	; 0x0e
    64b4:	17 86       	std	Z+15, r1	; 0x0f
    64b6:	12 86       	std	Z+10, r1	; 0x0a
    64b8:	13 86       	std	Z+11, r1	; 0x0b
    64ba:	10 92 cb 27 	sts	0x27CB, r1	; 0x8027cb <udd_ep_control_state>
    64be:	0f 91       	pop	r16
    64c0:	08 95       	ret

000064c2 <udd_ctrl_stall_data>:
    64c2:	0f 93       	push	r16
    64c4:	85 e0       	ldi	r24, 0x05	; 5
    64c6:	80 93 cb 27 	sts	0x27CB, r24	; 0x8027cb <udd_ep_control_state>
    64ca:	e1 ee       	ldi	r30, 0xE1	; 225
    64cc:	f7 e2       	ldi	r31, 0x27	; 39
    64ce:	04 e0       	ldi	r16, 0x04	; 4
    64d0:	05 93       	las	Z, r16
    64d2:	e9 ed       	ldi	r30, 0xD9	; 217
    64d4:	f7 e2       	ldi	r31, 0x27	; 39
    64d6:	04 e0       	ldi	r16, 0x04	; 4
    64d8:	05 93       	las	Z, r16
    64da:	0f 91       	pop	r16
    64dc:	08 95       	ret

000064de <udd_ctrl_send_zlp_in>:
    64de:	0f 93       	push	r16
    64e0:	83 e0       	ldi	r24, 0x03	; 3
    64e2:	80 93 cb 27 	sts	0x27CB, r24	; 0x8027cb <udd_ep_control_state>
    64e6:	10 92 e2 27 	sts	0x27E2, r1	; 0x8027e2 <udd_sram+0x16>
    64ea:	10 92 e3 27 	sts	0x27E3, r1	; 0x8027e3 <udd_sram+0x17>
    64ee:	e0 ee       	ldi	r30, 0xE0	; 224
    64f0:	f7 e2       	ldi	r31, 0x27	; 39
    64f2:	02 e0       	ldi	r16, 0x02	; 2
    64f4:	06 93       	lac	Z, r16
    64f6:	0f 91       	pop	r16
    64f8:	08 95       	ret

000064fa <udd_ctrl_endofrequest>:
    64fa:	e0 91 d3 2a 	lds	r30, 0x2AD3	; 0x802ad3 <udd_g_ctrlreq+0xc>
    64fe:	f0 91 d4 2a 	lds	r31, 0x2AD4	; 0x802ad4 <udd_g_ctrlreq+0xd>
    6502:	30 97       	sbiw	r30, 0x00	; 0
    6504:	09 f0       	breq	.+2      	; 0x6508 <udd_ctrl_endofrequest+0xe>
    6506:	19 95       	eicall
    6508:	08 95       	ret

0000650a <udd_ctrl_in_sent>:
    650a:	0f 93       	push	r16
    650c:	cf 93       	push	r28
    650e:	df 93       	push	r29
    6510:	80 91 cb 27 	lds	r24, 0x27CB	; 0x8027cb <udd_ep_control_state>
    6514:	83 30       	cpi	r24, 0x03	; 3
    6516:	19 f4       	brne	.+6      	; 0x651e <udd_ctrl_in_sent+0x14>
    6518:	f0 df       	rcall	.-32     	; 0x64fa <udd_ctrl_endofrequest>
    651a:	ae df       	rcall	.-164    	; 0x6478 <udd_ctrl_init>
    651c:	5e c0       	rjmp	.+188    	; 0x65da <udd_ctrl_in_sent+0xd0>
    651e:	80 91 c7 27 	lds	r24, 0x27C7	; 0x8027c7 <udd_ctrl_payload_nb_trans>
    6522:	90 91 c8 27 	lds	r25, 0x27C8	; 0x8027c8 <udd_ctrl_payload_nb_trans+0x1>
    6526:	c0 91 d1 2a 	lds	r28, 0x2AD1	; 0x802ad1 <udd_g_ctrlreq+0xa>
    652a:	d0 91 d2 2a 	lds	r29, 0x2AD2	; 0x802ad2 <udd_g_ctrlreq+0xb>
    652e:	c8 1b       	sub	r28, r24
    6530:	d9 0b       	sbc	r29, r25
    6532:	71 f5       	brne	.+92     	; 0x6590 <udd_ctrl_in_sent+0x86>
    6534:	20 91 c9 27 	lds	r18, 0x27C9	; 0x8027c9 <udd_ctrl_prev_payload_nb_trans>
    6538:	30 91 ca 27 	lds	r19, 0x27CA	; 0x8027ca <udd_ctrl_prev_payload_nb_trans+0x1>
    653c:	82 0f       	add	r24, r18
    653e:	93 1f       	adc	r25, r19
    6540:	80 93 c9 27 	sts	0x27C9, r24	; 0x8027c9 <udd_ctrl_prev_payload_nb_trans>
    6544:	90 93 ca 27 	sts	0x27CA, r25	; 0x8027ca <udd_ctrl_prev_payload_nb_trans+0x1>
    6548:	20 91 cd 2a 	lds	r18, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    654c:	30 91 ce 2a 	lds	r19, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    6550:	82 17       	cp	r24, r18
    6552:	93 07       	cpc	r25, r19
    6554:	21 f0       	breq	.+8      	; 0x655e <udd_ctrl_in_sent+0x54>
    6556:	80 91 e2 26 	lds	r24, 0x26E2	; 0x8026e2 <b_shortpacket.5472>
    655a:	88 23       	and	r24, r24
    655c:	41 f0       	breq	.+16     	; 0x656e <udd_ctrl_in_sent+0x64>
    655e:	84 e0       	ldi	r24, 0x04	; 4
    6560:	80 93 cb 27 	sts	0x27CB, r24	; 0x8027cb <udd_ep_control_state>
    6564:	e8 ed       	ldi	r30, 0xD8	; 216
    6566:	f7 e2       	ldi	r31, 0x27	; 39
    6568:	02 e0       	ldi	r16, 0x02	; 2
    656a:	06 93       	lac	Z, r16
    656c:	36 c0       	rjmp	.+108    	; 0x65da <udd_ctrl_in_sent+0xd0>
    656e:	e0 91 d5 2a 	lds	r30, 0x2AD5	; 0x802ad5 <udd_g_ctrlreq+0xe>
    6572:	f0 91 d6 2a 	lds	r31, 0x2AD6	; 0x802ad6 <udd_g_ctrlreq+0xf>
    6576:	30 97       	sbiw	r30, 0x00	; 0
    6578:	99 f0       	breq	.+38     	; 0x65a0 <udd_ctrl_in_sent+0x96>
    657a:	19 95       	eicall
    657c:	88 23       	and	r24, r24
    657e:	81 f0       	breq	.+32     	; 0x65a0 <udd_ctrl_in_sent+0x96>
    6580:	10 92 c7 27 	sts	0x27C7, r1	; 0x8027c7 <udd_ctrl_payload_nb_trans>
    6584:	10 92 c8 27 	sts	0x27C8, r1	; 0x8027c8 <udd_ctrl_payload_nb_trans+0x1>
    6588:	c0 91 d1 2a 	lds	r28, 0x2AD1	; 0x802ad1 <udd_g_ctrlreq+0xa>
    658c:	d0 91 d2 2a 	lds	r29, 0x2AD2	; 0x802ad2 <udd_g_ctrlreq+0xb>
    6590:	c0 34       	cpi	r28, 0x40	; 64
    6592:	d1 05       	cpc	r29, r1
    6594:	28 f0       	brcs	.+10     	; 0x65a0 <udd_ctrl_in_sent+0x96>
    6596:	10 92 e2 26 	sts	0x26E2, r1	; 0x8026e2 <b_shortpacket.5472>
    659a:	c0 e4       	ldi	r28, 0x40	; 64
    659c:	d0 e0       	ldi	r29, 0x00	; 0
    659e:	03 c0       	rjmp	.+6      	; 0x65a6 <udd_ctrl_in_sent+0x9c>
    65a0:	81 e0       	ldi	r24, 0x01	; 1
    65a2:	80 93 e2 26 	sts	0x26E2, r24	; 0x8026e2 <b_shortpacket.5472>
    65a6:	ec ec       	ldi	r30, 0xCC	; 204
    65a8:	f7 e2       	ldi	r31, 0x27	; 39
    65aa:	c6 8b       	std	Z+22, r28	; 0x16
    65ac:	d7 8b       	std	Z+23, r29	; 0x17
    65ae:	80 91 c7 27 	lds	r24, 0x27C7	; 0x8027c7 <udd_ctrl_payload_nb_trans>
    65b2:	90 91 c8 27 	lds	r25, 0x27C8	; 0x8027c8 <udd_ctrl_payload_nb_trans+0x1>
    65b6:	20 91 cf 2a 	lds	r18, 0x2ACF	; 0x802acf <udd_g_ctrlreq+0x8>
    65ba:	30 91 d0 2a 	lds	r19, 0x2AD0	; 0x802ad0 <udd_g_ctrlreq+0x9>
    65be:	28 0f       	add	r18, r24
    65c0:	39 1f       	adc	r19, r25
    65c2:	20 8f       	std	Z+24, r18	; 0x18
    65c4:	31 8f       	std	Z+25, r19	; 0x19
    65c6:	c8 0f       	add	r28, r24
    65c8:	d9 1f       	adc	r29, r25
    65ca:	c0 93 c7 27 	sts	0x27C7, r28	; 0x8027c7 <udd_ctrl_payload_nb_trans>
    65ce:	d0 93 c8 27 	sts	0x27C8, r29	; 0x8027c8 <udd_ctrl_payload_nb_trans+0x1>
    65d2:	e0 ee       	ldi	r30, 0xE0	; 224
    65d4:	f7 e2       	ldi	r31, 0x27	; 39
    65d6:	02 e0       	ldi	r16, 0x02	; 2
    65d8:	06 93       	lac	Z, r16
    65da:	df 91       	pop	r29
    65dc:	cf 91       	pop	r28
    65de:	0f 91       	pop	r16
    65e0:	08 95       	ret

000065e2 <udd_ep_get_size>:
    65e2:	fc 01       	movw	r30, r24
    65e4:	81 81       	ldd	r24, Z+1	; 0x01
    65e6:	e8 2f       	mov	r30, r24
    65e8:	e7 70       	andi	r30, 0x07	; 7
    65ea:	8e 2f       	mov	r24, r30
    65ec:	90 e0       	ldi	r25, 0x00	; 0
    65ee:	fc 01       	movw	r30, r24
    65f0:	31 97       	sbiw	r30, 0x01	; 1
    65f2:	e7 30       	cpi	r30, 0x07	; 7
    65f4:	f1 05       	cpc	r31, r1
    65f6:	d8 f4       	brcc	.+54     	; 0x662e <udd_ep_get_size+0x4c>
    65f8:	88 27       	eor	r24, r24
    65fa:	e2 50       	subi	r30, 0x02	; 2
    65fc:	ff 4f       	sbci	r31, 0xFF	; 255
    65fe:	8f 4f       	sbci	r24, 0xFF	; 255
    6600:	0c 94 6e 51 	jmp	0xa2dc	; 0xa2dc <__tablejump2__>
    6604:	80 e1       	ldi	r24, 0x10	; 16
    6606:	90 e0       	ldi	r25, 0x00	; 0
    6608:	08 95       	ret
    660a:	80 e2       	ldi	r24, 0x20	; 32
    660c:	90 e0       	ldi	r25, 0x00	; 0
    660e:	08 95       	ret
    6610:	80 e4       	ldi	r24, 0x40	; 64
    6612:	90 e0       	ldi	r25, 0x00	; 0
    6614:	08 95       	ret
    6616:	80 e8       	ldi	r24, 0x80	; 128
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	08 95       	ret
    661c:	80 e0       	ldi	r24, 0x00	; 0
    661e:	91 e0       	ldi	r25, 0x01	; 1
    6620:	08 95       	ret
    6622:	80 e0       	ldi	r24, 0x00	; 0
    6624:	92 e0       	ldi	r25, 0x02	; 2
    6626:	08 95       	ret
    6628:	8f ef       	ldi	r24, 0xFF	; 255
    662a:	93 e0       	ldi	r25, 0x03	; 3
    662c:	08 95       	ret
    662e:	88 e0       	ldi	r24, 0x08	; 8
    6630:	90 e0       	ldi	r25, 0x00	; 0
    6632:	08 95       	ret

00006634 <udd_ep_get_job>:
    6634:	28 2f       	mov	r18, r24
    6636:	2f 70       	andi	r18, 0x0F	; 15
    6638:	30 e0       	ldi	r19, 0x00	; 0
    663a:	22 0f       	add	r18, r18
    663c:	33 1f       	adc	r19, r19
    663e:	08 2e       	mov	r0, r24
    6640:	00 0c       	add	r0, r0
    6642:	99 0b       	sbc	r25, r25
    6644:	88 27       	eor	r24, r24
    6646:	99 0f       	add	r25, r25
    6648:	88 1f       	adc	r24, r24
    664a:	99 27       	eor	r25, r25
    664c:	82 0f       	add	r24, r18
    664e:	93 1f       	adc	r25, r19
    6650:	02 97       	sbiw	r24, 0x02	; 2
    6652:	9c 01       	movw	r18, r24
    6654:	22 0f       	add	r18, r18
    6656:	33 1f       	adc	r19, r19
    6658:	22 0f       	add	r18, r18
    665a:	33 1f       	adc	r19, r19
    665c:	22 0f       	add	r18, r18
    665e:	33 1f       	adc	r19, r19
    6660:	82 0f       	add	r24, r18
    6662:	93 1f       	adc	r25, r19
    6664:	8d 59       	subi	r24, 0x9D	; 157
    6666:	98 4d       	sbci	r25, 0xD8	; 216
    6668:	08 95       	ret

0000666a <udd_ctrl_interrupt_tc_setup>:
    666a:	0f 93       	push	r16
    666c:	cf 93       	push	r28
    666e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    6672:	80 ff       	sbrs	r24, 0
    6674:	65 c0       	rjmp	.+202    	; 0x6740 <udd_ctrl_interrupt_tc_setup+0xd6>
    6676:	81 e0       	ldi	r24, 0x01	; 1
    6678:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    667c:	e8 ed       	ldi	r30, 0xD8	; 216
    667e:	f7 e2       	ldi	r31, 0x27	; 39
    6680:	00 e8       	ldi	r16, 0x80	; 128
    6682:	06 93       	lac	Z, r16
    6684:	e0 ee       	ldi	r30, 0xE0	; 224
    6686:	f7 e2       	ldi	r31, 0x27	; 39
    6688:	00 e8       	ldi	r16, 0x80	; 128
    668a:	06 93       	lac	Z, r16
    668c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    6690:	e8 ed       	ldi	r30, 0xD8	; 216
    6692:	f7 e2       	ldi	r31, 0x27	; 39
    6694:	00 e1       	ldi	r16, 0x10	; 16
    6696:	06 93       	lac	Z, r16
    6698:	80 91 cb 27 	lds	r24, 0x27CB	; 0x8027cb <udd_ep_control_state>
    669c:	88 23       	and	r24, r24
    669e:	29 f0       	breq	.+10     	; 0x66aa <udd_ctrl_interrupt_tc_setup+0x40>
    66a0:	83 50       	subi	r24, 0x03	; 3
    66a2:	82 30       	cpi	r24, 0x02	; 2
    66a4:	08 f4       	brcc	.+2      	; 0x66a8 <udd_ctrl_interrupt_tc_setup+0x3e>
    66a6:	29 df       	rcall	.-430    	; 0x64fa <udd_ctrl_endofrequest>
    66a8:	e7 de       	rcall	.-562    	; 0x6478 <udd_ctrl_init>
    66aa:	80 91 da 27 	lds	r24, 0x27DA	; 0x8027da <udd_sram+0xe>
    66ae:	90 91 db 27 	lds	r25, 0x27DB	; 0x8027db <udd_sram+0xf>
    66b2:	08 97       	sbiw	r24, 0x08	; 8
    66b4:	09 f0       	breq	.+2      	; 0x66b8 <udd_ctrl_interrupt_tc_setup+0x4e>
    66b6:	46 c0       	rjmp	.+140    	; 0x6744 <udd_ctrl_interrupt_tc_setup+0xda>
    66b8:	88 e0       	ldi	r24, 0x08	; 8
    66ba:	e7 e8       	ldi	r30, 0x87	; 135
    66bc:	f7 e2       	ldi	r31, 0x27	; 39
    66be:	a7 ec       	ldi	r26, 0xC7	; 199
    66c0:	ba e2       	ldi	r27, 0x2A	; 42
    66c2:	01 90       	ld	r0, Z+
    66c4:	0d 92       	st	X+, r0
    66c6:	8a 95       	dec	r24
    66c8:	e1 f7       	brne	.-8      	; 0x66c2 <udd_ctrl_interrupt_tc_setup+0x58>
    66ca:	e8 ec       	ldi	r30, 0xC8	; 200
    66cc:	f4 e0       	ldi	r31, 0x04	; 4
    66ce:	80 81       	ld	r24, Z
    66d0:	80 62       	ori	r24, 0x20	; 32
    66d2:	80 83       	st	Z, r24
    66d4:	80 81       	ld	r24, Z
    66d6:	80 62       	ori	r24, 0x20	; 32
    66d8:	80 83       	st	Z, r24
    66da:	0e 94 ca 4d 	call	0x9b94	; 0x9b94 <udc_process_setup>
    66de:	c8 2f       	mov	r28, r24
    66e0:	81 11       	cpse	r24, r1
    66e2:	03 c0       	rjmp	.+6      	; 0x66ea <udd_ctrl_interrupt_tc_setup+0x80>
    66e4:	ee de       	rcall	.-548    	; 0x64c2 <udd_ctrl_stall_data>
    66e6:	c1 e0       	ldi	r28, 0x01	; 1
    66e8:	2e c0       	rjmp	.+92     	; 0x6746 <udd_ctrl_interrupt_tc_setup+0xdc>
    66ea:	80 91 c7 2a 	lds	r24, 0x2AC7	; 0x802ac7 <udd_g_ctrlreq>
    66ee:	88 23       	and	r24, r24
    66f0:	6c f4       	brge	.+26     	; 0x670c <udd_ctrl_interrupt_tc_setup+0xa2>
    66f2:	10 92 c9 27 	sts	0x27C9, r1	; 0x8027c9 <udd_ctrl_prev_payload_nb_trans>
    66f6:	10 92 ca 27 	sts	0x27CA, r1	; 0x8027ca <udd_ctrl_prev_payload_nb_trans+0x1>
    66fa:	10 92 c7 27 	sts	0x27C7, r1	; 0x8027c7 <udd_ctrl_payload_nb_trans>
    66fe:	10 92 c8 27 	sts	0x27C8, r1	; 0x8027c8 <udd_ctrl_payload_nb_trans+0x1>
    6702:	82 e0       	ldi	r24, 0x02	; 2
    6704:	80 93 cb 27 	sts	0x27CB, r24	; 0x8027cb <udd_ep_control_state>
    6708:	00 df       	rcall	.-512    	; 0x650a <udd_ctrl_in_sent>
    670a:	1d c0       	rjmp	.+58     	; 0x6746 <udd_ctrl_interrupt_tc_setup+0xdc>
    670c:	80 91 cd 2a 	lds	r24, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    6710:	90 91 ce 2a 	lds	r25, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    6714:	89 2b       	or	r24, r25
    6716:	11 f4       	brne	.+4      	; 0x671c <udd_ctrl_interrupt_tc_setup+0xb2>
    6718:	e2 de       	rcall	.-572    	; 0x64de <udd_ctrl_send_zlp_in>
    671a:	15 c0       	rjmp	.+42     	; 0x6746 <udd_ctrl_interrupt_tc_setup+0xdc>
    671c:	10 92 c9 27 	sts	0x27C9, r1	; 0x8027c9 <udd_ctrl_prev_payload_nb_trans>
    6720:	10 92 ca 27 	sts	0x27CA, r1	; 0x8027ca <udd_ctrl_prev_payload_nb_trans+0x1>
    6724:	10 92 c7 27 	sts	0x27C7, r1	; 0x8027c7 <udd_ctrl_payload_nb_trans>
    6728:	10 92 c8 27 	sts	0x27C8, r1	; 0x8027c8 <udd_ctrl_payload_nb_trans+0x1>
    672c:	81 e0       	ldi	r24, 0x01	; 1
    672e:	80 93 cb 27 	sts	0x27CB, r24	; 0x8027cb <udd_ep_control_state>
    6732:	e8 ed       	ldi	r30, 0xD8	; 216
    6734:	f7 e2       	ldi	r31, 0x27	; 39
    6736:	02 e0       	ldi	r16, 0x02	; 2
    6738:	06 93       	lac	Z, r16
    673a:	00 e2       	ldi	r16, 0x20	; 32
    673c:	06 93       	lac	Z, r16
    673e:	03 c0       	rjmp	.+6      	; 0x6746 <udd_ctrl_interrupt_tc_setup+0xdc>
    6740:	c0 e0       	ldi	r28, 0x00	; 0
    6742:	01 c0       	rjmp	.+2      	; 0x6746 <udd_ctrl_interrupt_tc_setup+0xdc>
    6744:	c1 e0       	ldi	r28, 0x01	; 1
    6746:	8c 2f       	mov	r24, r28
    6748:	cf 91       	pop	r28
    674a:	0f 91       	pop	r16
    674c:	08 95       	ret

0000674e <udd_ep_trans_complet>:
    674e:	8f 92       	push	r8
    6750:	9f 92       	push	r9
    6752:	af 92       	push	r10
    6754:	bf 92       	push	r11
    6756:	df 92       	push	r13
    6758:	ef 92       	push	r14
    675a:	ff 92       	push	r15
    675c:	0f 93       	push	r16
    675e:	1f 93       	push	r17
    6760:	cf 93       	push	r28
    6762:	df 93       	push	r29
    6764:	d8 2e       	mov	r13, r24
    6766:	66 df       	rcall	.-308    	; 0x6634 <udd_ep_get_job>
    6768:	8c 01       	movw	r16, r24
    676a:	cd 2d       	mov	r28, r13
    676c:	cf 70       	andi	r28, 0x0F	; 15
    676e:	d0 e0       	ldi	r29, 0x00	; 0
    6770:	ce 01       	movw	r24, r28
    6772:	88 0f       	add	r24, r24
    6774:	99 1f       	adc	r25, r25
    6776:	cd 2d       	mov	r28, r13
    6778:	0d 2c       	mov	r0, r13
    677a:	00 0c       	add	r0, r0
    677c:	dd 0b       	sbc	r29, r29
    677e:	cc 27       	eor	r28, r28
    6780:	dd 0f       	add	r29, r29
    6782:	cc 1f       	adc	r28, r28
    6784:	dd 27       	eor	r29, r29
    6786:	c8 0f       	add	r28, r24
    6788:	d9 1f       	adc	r29, r25
    678a:	ce 01       	movw	r24, r28
    678c:	88 0f       	add	r24, r24
    678e:	99 1f       	adc	r25, r25
    6790:	88 0f       	add	r24, r24
    6792:	99 1f       	adc	r25, r25
    6794:	88 0f       	add	r24, r24
    6796:	99 1f       	adc	r25, r25
    6798:	9c 01       	movw	r18, r24
    679a:	28 52       	subi	r18, 0x28	; 40
    679c:	38 4d       	sbci	r19, 0xD8	; 216
    679e:	79 01       	movw	r14, r18
    67a0:	c9 01       	movw	r24, r18
    67a2:	1f df       	rcall	.-450    	; 0x65e2 <udd_ep_get_size>
    67a4:	4c 01       	movw	r8, r24
    67a6:	dd 20       	and	r13, r13
    67a8:	0c f0       	brlt	.+2      	; 0x67ac <udd_ep_trans_complet+0x5e>
    67aa:	7b c0       	rjmp	.+246    	; 0x68a2 <udd_ep_trans_complet+0x154>
    67ac:	fe 01       	movw	r30, r28
    67ae:	ee 0f       	add	r30, r30
    67b0:	ff 1f       	adc	r31, r31
    67b2:	ee 0f       	add	r30, r30
    67b4:	ff 1f       	adc	r31, r31
    67b6:	ee 0f       	add	r30, r30
    67b8:	ff 1f       	adc	r31, r31
    67ba:	e4 53       	subi	r30, 0x34	; 52
    67bc:	f8 4d       	sbci	r31, 0xD8	; 216
    67be:	22 89       	ldd	r18, Z+18	; 0x12
    67c0:	33 89       	ldd	r19, Z+19	; 0x13
    67c2:	d8 01       	movw	r26, r16
    67c4:	15 96       	adiw	r26, 0x05	; 5
    67c6:	8d 91       	ld	r24, X+
    67c8:	9c 91       	ld	r25, X
    67ca:	16 97       	sbiw	r26, 0x06	; 6
    67cc:	82 0f       	add	r24, r18
    67ce:	93 1f       	adc	r25, r19
    67d0:	15 96       	adiw	r26, 0x05	; 5
    67d2:	8d 93       	st	X+, r24
    67d4:	9c 93       	st	X, r25
    67d6:	16 97       	sbiw	r26, 0x06	; 6
    67d8:	13 96       	adiw	r26, 0x03	; 3
    67da:	2d 91       	ld	r18, X+
    67dc:	3c 91       	ld	r19, X
    67de:	14 97       	sbiw	r26, 0x04	; 4
    67e0:	82 17       	cp	r24, r18
    67e2:	93 07       	cpc	r25, r19
    67e4:	09 f4       	brne	.+2      	; 0x67e8 <udd_ep_trans_complet+0x9a>
    67e6:	47 c0       	rjmp	.+142    	; 0x6876 <udd_ep_trans_complet+0x128>
    67e8:	28 1b       	sub	r18, r24
    67ea:	39 0b       	sbc	r19, r25
    67ec:	21 15       	cp	r18, r1
    67ee:	b4 e0       	ldi	r27, 0x04	; 4
    67f0:	3b 07       	cpc	r19, r27
    67f2:	40 f0       	brcs	.+16     	; 0x6804 <udd_ep_trans_complet+0xb6>
    67f4:	2f ef       	ldi	r18, 0xFF	; 255
    67f6:	33 e0       	ldi	r19, 0x03	; 3
    67f8:	c9 01       	movw	r24, r18
    67fa:	b4 01       	movw	r22, r8
    67fc:	0e 94 09 51 	call	0xa212	; 0xa212 <__udivmodhi4>
    6800:	28 1b       	sub	r18, r24
    6802:	39 0b       	sbc	r19, r25
    6804:	f8 01       	movw	r30, r16
    6806:	80 81       	ld	r24, Z
    6808:	81 ff       	sbrs	r24, 1
    680a:	0a c0       	rjmp	.+20     	; 0x6820 <udd_ep_trans_complet+0xd2>
    680c:	c9 01       	movw	r24, r18
    680e:	b4 01       	movw	r22, r8
    6810:	0e 94 09 51 	call	0xa212	; 0xa212 <__udivmodhi4>
    6814:	41 e0       	ldi	r20, 0x01	; 1
    6816:	89 2b       	or	r24, r25
    6818:	09 f0       	breq	.+2      	; 0x681c <udd_ep_trans_complet+0xce>
    681a:	40 e0       	ldi	r20, 0x00	; 0
    681c:	84 2f       	mov	r24, r20
    681e:	01 c0       	rjmp	.+2      	; 0x6822 <udd_ep_trans_complet+0xd4>
    6820:	80 e0       	ldi	r24, 0x00	; 0
    6822:	d8 01       	movw	r26, r16
    6824:	9c 91       	ld	r25, X
    6826:	80 fb       	bst	r24, 0
    6828:	91 f9       	bld	r25, 1
    682a:	9c 93       	st	X, r25
    682c:	fe 01       	movw	r30, r28
    682e:	ee 0f       	add	r30, r30
    6830:	ff 1f       	adc	r31, r31
    6832:	ee 0f       	add	r30, r30
    6834:	ff 1f       	adc	r31, r31
    6836:	ee 0f       	add	r30, r30
    6838:	ff 1f       	adc	r31, r31
    683a:	e4 53       	subi	r30, 0x34	; 52
    683c:	f8 4d       	sbci	r31, 0xD8	; 216
    683e:	12 8a       	std	Z+18, r1	; 0x12
    6840:	13 8a       	std	Z+19, r1	; 0x13
    6842:	26 87       	std	Z+14, r18	; 0x0e
    6844:	37 87       	std	Z+15, r19	; 0x0f
    6846:	11 96       	adiw	r26, 0x01	; 1
    6848:	2d 91       	ld	r18, X+
    684a:	3c 91       	ld	r19, X
    684c:	12 97       	sbiw	r26, 0x02	; 2
    684e:	15 96       	adiw	r26, 0x05	; 5
    6850:	8d 91       	ld	r24, X+
    6852:	9c 91       	ld	r25, X
    6854:	16 97       	sbiw	r26, 0x06	; 6
    6856:	82 0f       	add	r24, r18
    6858:	93 1f       	adc	r25, r19
    685a:	cc 0f       	add	r28, r28
    685c:	dd 1f       	adc	r29, r29
    685e:	cc 0f       	add	r28, r28
    6860:	dd 1f       	adc	r29, r29
    6862:	cc 0f       	add	r28, r28
    6864:	dd 1f       	adc	r29, r29
    6866:	c4 52       	subi	r28, 0x24	; 36
    6868:	d8 4d       	sbci	r29, 0xD8	; 216
    686a:	88 83       	st	Y, r24
    686c:	99 83       	std	Y+1, r25	; 0x01
    686e:	f7 01       	movw	r30, r14
    6870:	02 e0       	ldi	r16, 0x02	; 2
    6872:	06 93       	lac	Z, r16
    6874:	e4 c0       	rjmp	.+456    	; 0x6a3e <udd_ep_trans_complet+0x2f0>
    6876:	d8 01       	movw	r26, r16
    6878:	8c 91       	ld	r24, X
    687a:	81 ff       	sbrs	r24, 1
    687c:	cd c0       	rjmp	.+410    	; 0x6a18 <udd_ep_trans_complet+0x2ca>
    687e:	8d 7f       	andi	r24, 0xFD	; 253
    6880:	8c 93       	st	X, r24
    6882:	cc 0f       	add	r28, r28
    6884:	dd 1f       	adc	r29, r29
    6886:	cc 0f       	add	r28, r28
    6888:	dd 1f       	adc	r29, r29
    688a:	cc 0f       	add	r28, r28
    688c:	dd 1f       	adc	r29, r29
    688e:	c4 53       	subi	r28, 0x34	; 52
    6890:	d8 4d       	sbci	r29, 0xD8	; 216
    6892:	1a 8a       	std	Y+18, r1	; 0x12
    6894:	1b 8a       	std	Y+19, r1	; 0x13
    6896:	1e 86       	std	Y+14, r1	; 0x0e
    6898:	1f 86       	std	Y+15, r1	; 0x0f
    689a:	f7 01       	movw	r30, r14
    689c:	02 e0       	ldi	r16, 0x02	; 2
    689e:	06 93       	lac	Z, r16
    68a0:	ce c0       	rjmp	.+412    	; 0x6a3e <udd_ep_trans_complet+0x2f0>
    68a2:	fe 01       	movw	r30, r28
    68a4:	ee 0f       	add	r30, r30
    68a6:	ff 1f       	adc	r31, r31
    68a8:	ee 0f       	add	r30, r30
    68aa:	ff 1f       	adc	r31, r31
    68ac:	ee 0f       	add	r30, r30
    68ae:	ff 1f       	adc	r31, r31
    68b0:	e4 53       	subi	r30, 0x34	; 52
    68b2:	f8 4d       	sbci	r31, 0xD8	; 216
    68b4:	a6 84       	ldd	r10, Z+14	; 0x0e
    68b6:	b7 84       	ldd	r11, Z+15	; 0x0f
    68b8:	d8 01       	movw	r26, r16
    68ba:	8c 91       	ld	r24, X
    68bc:	82 ff       	sbrs	r24, 2
    68be:	1b c0       	rjmp	.+54     	; 0x68f6 <udd_ep_trans_complet+0x1a8>
    68c0:	11 96       	adiw	r26, 0x01	; 1
    68c2:	ed 91       	ld	r30, X+
    68c4:	fc 91       	ld	r31, X
    68c6:	12 97       	sbiw	r26, 0x02	; 2
    68c8:	15 96       	adiw	r26, 0x05	; 5
    68ca:	2d 91       	ld	r18, X+
    68cc:	3c 91       	ld	r19, X
    68ce:	16 97       	sbiw	r26, 0x06	; 6
    68d0:	13 96       	adiw	r26, 0x03	; 3
    68d2:	8d 91       	ld	r24, X+
    68d4:	9c 91       	ld	r25, X
    68d6:	14 97       	sbiw	r26, 0x04	; 4
    68d8:	b4 01       	movw	r22, r8
    68da:	0e 94 09 51 	call	0xa212	; 0xa212 <__udivmodhi4>
    68de:	b0 e4       	ldi	r27, 0x40	; 64
    68e0:	db 9e       	mul	r13, r27
    68e2:	b0 01       	movw	r22, r0
    68e4:	11 24       	eor	r1, r1
    68e6:	6d 55       	subi	r22, 0x5D	; 93
    68e8:	79 4d       	sbci	r23, 0xD9	; 217
    68ea:	ac 01       	movw	r20, r24
    68ec:	cf 01       	movw	r24, r30
    68ee:	82 0f       	add	r24, r18
    68f0:	93 1f       	adc	r25, r19
    68f2:	0e 94 24 54 	call	0xa848	; 0xa848 <memcpy>
    68f6:	f8 01       	movw	r30, r16
    68f8:	25 81       	ldd	r18, Z+5	; 0x05
    68fa:	36 81       	ldd	r19, Z+6	; 0x06
    68fc:	2a 0d       	add	r18, r10
    68fe:	3b 1d       	adc	r19, r11
    6900:	25 83       	std	Z+5, r18	; 0x05
    6902:	36 83       	std	Z+6, r19	; 0x06
    6904:	83 81       	ldd	r24, Z+3	; 0x03
    6906:	94 81       	ldd	r25, Z+4	; 0x04
    6908:	82 17       	cp	r24, r18
    690a:	93 07       	cpc	r25, r19
    690c:	68 f4       	brcc	.+26     	; 0x6928 <udd_ep_trans_complet+0x1da>
    690e:	85 83       	std	Z+5, r24	; 0x05
    6910:	96 83       	std	Z+6, r25	; 0x06
    6912:	cc 0f       	add	r28, r28
    6914:	dd 1f       	adc	r29, r29
    6916:	cc 0f       	add	r28, r28
    6918:	dd 1f       	adc	r29, r29
    691a:	cc 0f       	add	r28, r28
    691c:	dd 1f       	adc	r29, r29
    691e:	c4 53       	subi	r28, 0x34	; 52
    6920:	d8 4d       	sbci	r29, 0xD8	; 216
    6922:	8a 89       	ldd	r24, Y+18	; 0x12
    6924:	9b 89       	ldd	r25, Y+19	; 0x13
    6926:	78 c0       	rjmp	.+240    	; 0x6a18 <udd_ep_trans_complet+0x2ca>
    6928:	fe 01       	movw	r30, r28
    692a:	ee 0f       	add	r30, r30
    692c:	ff 1f       	adc	r31, r31
    692e:	ee 0f       	add	r30, r30
    6930:	ff 1f       	adc	r31, r31
    6932:	ee 0f       	add	r30, r30
    6934:	ff 1f       	adc	r31, r31
    6936:	e4 53       	subi	r30, 0x34	; 52
    6938:	f8 4d       	sbci	r31, 0xD8	; 216
    693a:	42 89       	ldd	r20, Z+18	; 0x12
    693c:	53 89       	ldd	r21, Z+19	; 0x13
    693e:	a4 16       	cp	r10, r20
    6940:	b5 06       	cpc	r11, r21
    6942:	09 f0       	breq	.+2      	; 0x6946 <udd_ep_trans_complet+0x1f8>
    6944:	69 c0       	rjmp	.+210    	; 0x6a18 <udd_ep_trans_complet+0x2ca>
    6946:	28 17       	cp	r18, r24
    6948:	39 07       	cpc	r19, r25
    694a:	09 f4       	brne	.+2      	; 0x694e <udd_ep_trans_complet+0x200>
    694c:	65 c0       	rjmp	.+202    	; 0x6a18 <udd_ep_trans_complet+0x2ca>
    694e:	ac 01       	movw	r20, r24
    6950:	42 1b       	sub	r20, r18
    6952:	53 0b       	sbc	r21, r19
    6954:	9a 01       	movw	r18, r20
    6956:	21 15       	cp	r18, r1
    6958:	54 e0       	ldi	r21, 0x04	; 4
    695a:	35 07       	cpc	r19, r21
    695c:	48 f0       	brcs	.+18     	; 0x6970 <udd_ep_trans_complet+0x222>
    695e:	2f ef       	ldi	r18, 0xFF	; 255
    6960:	33 e0       	ldi	r19, 0x03	; 3
    6962:	c9 01       	movw	r24, r18
    6964:	b4 01       	movw	r22, r8
    6966:	0e 94 09 51 	call	0xa212	; 0xa212 <__udivmodhi4>
    696a:	28 1b       	sub	r18, r24
    696c:	39 0b       	sbc	r19, r25
    696e:	06 c0       	rjmp	.+12     	; 0x697c <udd_ep_trans_complet+0x22e>
    6970:	c9 01       	movw	r24, r18
    6972:	b4 01       	movw	r22, r8
    6974:	0e 94 09 51 	call	0xa212	; 0xa212 <__udivmodhi4>
    6978:	28 1b       	sub	r18, r24
    697a:	39 0b       	sbc	r19, r25
    697c:	fe 01       	movw	r30, r28
    697e:	ee 0f       	add	r30, r30
    6980:	ff 1f       	adc	r31, r31
    6982:	ee 0f       	add	r30, r30
    6984:	ff 1f       	adc	r31, r31
    6986:	ee 0f       	add	r30, r30
    6988:	ff 1f       	adc	r31, r31
    698a:	e4 53       	subi	r30, 0x34	; 52
    698c:	f8 4d       	sbci	r31, 0xD8	; 216
    698e:	16 86       	std	Z+14, r1	; 0x0e
    6990:	17 86       	std	Z+15, r1	; 0x0f
    6992:	28 15       	cp	r18, r8
    6994:	39 05       	cpc	r19, r9
    6996:	00 f5       	brcc	.+64     	; 0x69d8 <udd_ep_trans_complet+0x28a>
    6998:	d8 01       	movw	r26, r16
    699a:	8c 91       	ld	r24, X
    699c:	84 60       	ori	r24, 0x04	; 4
    699e:	8c 93       	st	X, r24
    69a0:	b0 e4       	ldi	r27, 0x40	; 64
    69a2:	db 9e       	mul	r13, r27
    69a4:	c0 01       	movw	r24, r0
    69a6:	11 24       	eor	r1, r1
    69a8:	8d 55       	subi	r24, 0x5D	; 93
    69aa:	99 4d       	sbci	r25, 0xD9	; 217
    69ac:	fe 01       	movw	r30, r28
    69ae:	ee 0f       	add	r30, r30
    69b0:	ff 1f       	adc	r31, r31
    69b2:	ee 0f       	add	r30, r30
    69b4:	ff 1f       	adc	r31, r31
    69b6:	ee 0f       	add	r30, r30
    69b8:	ff 1f       	adc	r31, r31
    69ba:	e4 52       	subi	r30, 0x24	; 36
    69bc:	f8 4d       	sbci	r31, 0xD8	; 216
    69be:	80 83       	st	Z, r24
    69c0:	91 83       	std	Z+1, r25	; 0x01
    69c2:	cc 0f       	add	r28, r28
    69c4:	dd 1f       	adc	r29, r29
    69c6:	cc 0f       	add	r28, r28
    69c8:	dd 1f       	adc	r29, r29
    69ca:	cc 0f       	add	r28, r28
    69cc:	dd 1f       	adc	r29, r29
    69ce:	c4 53       	subi	r28, 0x34	; 52
    69d0:	d8 4d       	sbci	r29, 0xD8	; 216
    69d2:	8a 8a       	std	Y+18, r8	; 0x12
    69d4:	9b 8a       	std	Y+19, r9	; 0x13
    69d6:	1c c0       	rjmp	.+56     	; 0x6a10 <udd_ep_trans_complet+0x2c2>
    69d8:	f8 01       	movw	r30, r16
    69da:	41 81       	ldd	r20, Z+1	; 0x01
    69dc:	52 81       	ldd	r21, Z+2	; 0x02
    69de:	85 81       	ldd	r24, Z+5	; 0x05
    69e0:	96 81       	ldd	r25, Z+6	; 0x06
    69e2:	84 0f       	add	r24, r20
    69e4:	95 1f       	adc	r25, r21
    69e6:	fe 01       	movw	r30, r28
    69e8:	ee 0f       	add	r30, r30
    69ea:	ff 1f       	adc	r31, r31
    69ec:	ee 0f       	add	r30, r30
    69ee:	ff 1f       	adc	r31, r31
    69f0:	ee 0f       	add	r30, r30
    69f2:	ff 1f       	adc	r31, r31
    69f4:	e4 52       	subi	r30, 0x24	; 36
    69f6:	f8 4d       	sbci	r31, 0xD8	; 216
    69f8:	80 83       	st	Z, r24
    69fa:	91 83       	std	Z+1, r25	; 0x01
    69fc:	cc 0f       	add	r28, r28
    69fe:	dd 1f       	adc	r29, r29
    6a00:	cc 0f       	add	r28, r28
    6a02:	dd 1f       	adc	r29, r29
    6a04:	cc 0f       	add	r28, r28
    6a06:	dd 1f       	adc	r29, r29
    6a08:	c4 53       	subi	r28, 0x34	; 52
    6a0a:	d8 4d       	sbci	r29, 0xD8	; 216
    6a0c:	2a 8b       	std	Y+18, r18	; 0x12
    6a0e:	3b 8b       	std	Y+19, r19	; 0x13
    6a10:	f7 01       	movw	r30, r14
    6a12:	02 e0       	ldi	r16, 0x02	; 2
    6a14:	06 93       	lac	Z, r16
    6a16:	13 c0       	rjmp	.+38     	; 0x6a3e <udd_ep_trans_complet+0x2f0>
    6a18:	d8 01       	movw	r26, r16
    6a1a:	8c 91       	ld	r24, X
    6a1c:	80 ff       	sbrs	r24, 0
    6a1e:	0f c0       	rjmp	.+30     	; 0x6a3e <udd_ep_trans_complet+0x2f0>
    6a20:	8e 7f       	andi	r24, 0xFE	; 254
    6a22:	8c 93       	st	X, r24
    6a24:	17 96       	adiw	r26, 0x07	; 7
    6a26:	ed 91       	ld	r30, X+
    6a28:	fc 91       	ld	r31, X
    6a2a:	18 97       	sbiw	r26, 0x08	; 8
    6a2c:	30 97       	sbiw	r30, 0x00	; 0
    6a2e:	39 f0       	breq	.+14     	; 0x6a3e <udd_ep_trans_complet+0x2f0>
    6a30:	15 96       	adiw	r26, 0x05	; 5
    6a32:	6d 91       	ld	r22, X+
    6a34:	7c 91       	ld	r23, X
    6a36:	16 97       	sbiw	r26, 0x06	; 6
    6a38:	4d 2d       	mov	r20, r13
    6a3a:	80 e0       	ldi	r24, 0x00	; 0
    6a3c:	19 95       	eicall
    6a3e:	df 91       	pop	r29
    6a40:	cf 91       	pop	r28
    6a42:	1f 91       	pop	r17
    6a44:	0f 91       	pop	r16
    6a46:	ff 90       	pop	r15
    6a48:	ef 90       	pop	r14
    6a4a:	df 90       	pop	r13
    6a4c:	bf 90       	pop	r11
    6a4e:	af 90       	pop	r10
    6a50:	9f 90       	pop	r9
    6a52:	8f 90       	pop	r8
    6a54:	08 95       	ret

00006a56 <udd_attach>:
    6a56:	1f 93       	push	r17
    6a58:	cf 93       	push	r28
    6a5a:	df 93       	push	r29
    6a5c:	1f 92       	push	r1
    6a5e:	cd b7       	in	r28, 0x3d	; 61
    6a60:	de b7       	in	r29, 0x3e	; 62
    6a62:	8f b7       	in	r24, 0x3f	; 63
    6a64:	89 83       	std	Y+1, r24	; 0x01
    6a66:	f8 94       	cli
    6a68:	19 81       	ldd	r17, Y+1	; 0x01
    6a6a:	81 e0       	ldi	r24, 0x01	; 1
    6a6c:	cd dc       	rcall	.-1638   	; 0x6408 <udd_sleep_mode>
    6a6e:	ea ec       	ldi	r30, 0xCA	; 202
    6a70:	f4 e0       	ldi	r31, 0x04	; 4
    6a72:	80 e4       	ldi	r24, 0x40	; 64
    6a74:	80 83       	st	Z, r24
    6a76:	80 e2       	ldi	r24, 0x20	; 32
    6a78:	80 83       	st	Z, r24
    6a7a:	e1 ec       	ldi	r30, 0xC1	; 193
    6a7c:	f4 e0       	ldi	r31, 0x04	; 4
    6a7e:	80 81       	ld	r24, Z
    6a80:	81 60       	ori	r24, 0x01	; 1
    6a82:	80 83       	st	Z, r24
    6a84:	a9 ec       	ldi	r26, 0xC9	; 201
    6a86:	b4 e0       	ldi	r27, 0x04	; 4
    6a88:	8c 91       	ld	r24, X
    6a8a:	82 60       	ori	r24, 0x02	; 2
    6a8c:	8c 93       	st	X, r24
    6a8e:	e8 ec       	ldi	r30, 0xC8	; 200
    6a90:	f4 e0       	ldi	r31, 0x04	; 4
    6a92:	80 81       	ld	r24, Z
    6a94:	80 64       	ori	r24, 0x40	; 64
    6a96:	80 83       	st	Z, r24
    6a98:	8c 91       	ld	r24, X
    6a9a:	81 60       	ori	r24, 0x01	; 1
    6a9c:	8c 93       	st	X, r24
    6a9e:	80 81       	ld	r24, Z
    6aa0:	80 68       	ori	r24, 0x80	; 128
    6aa2:	80 83       	st	Z, r24
    6aa4:	1f bf       	out	0x3f, r17	; 63
    6aa6:	0f 90       	pop	r0
    6aa8:	df 91       	pop	r29
    6aaa:	cf 91       	pop	r28
    6aac:	1f 91       	pop	r17
    6aae:	08 95       	ret

00006ab0 <udd_enable>:
    6ab0:	0f 93       	push	r16
    6ab2:	1f 93       	push	r17
    6ab4:	cf 93       	push	r28
    6ab6:	df 93       	push	r29
    6ab8:	1f 92       	push	r1
    6aba:	1f 92       	push	r1
    6abc:	cd b7       	in	r28, 0x3d	; 61
    6abe:	de b7       	in	r29, 0x3e	; 62
    6ac0:	00 e6       	ldi	r16, 0x60	; 96
    6ac2:	10 e0       	ldi	r17, 0x00	; 0
    6ac4:	f8 01       	movw	r30, r16
    6ac6:	10 82       	st	Z, r1
    6ac8:	80 e3       	ldi	r24, 0x30	; 48
    6aca:	0e 94 05 49 	call	0x920a	; 0x920a <sysclk_enable_usb>
    6ace:	e0 ec       	ldi	r30, 0xC0	; 192
    6ad0:	f4 e0       	ldi	r31, 0x04	; 4
    6ad2:	80 81       	ld	r24, Z
    6ad4:	80 64       	ori	r24, 0x40	; 64
    6ad6:	80 83       	st	Z, r24
    6ad8:	81 e0       	ldi	r24, 0x01	; 1
    6ada:	f8 01       	movw	r30, r16
    6adc:	80 83       	st	Z, r24
    6ade:	8f b7       	in	r24, 0x3f	; 63
    6ae0:	8a 83       	std	Y+2, r24	; 0x02
    6ae2:	f8 94       	cli
    6ae4:	1a 81       	ldd	r17, Y+2	; 0x02
    6ae6:	ec ec       	ldi	r30, 0xCC	; 204
    6ae8:	f7 e2       	ldi	r31, 0x27	; 39
    6aea:	15 86       	std	Z+13, r1	; 0x0d
    6aec:	15 8a       	std	Z+21, r1	; 0x15
    6aee:	15 8e       	std	Z+29, r1	; 0x1d
    6af0:	15 a2       	std	Z+37, r1	; 0x25
    6af2:	15 a6       	std	Z+45, r1	; 0x2d
    6af4:	15 aa       	std	Z+53, r1	; 0x35
    6af6:	e3 e6       	ldi	r30, 0x63	; 99
    6af8:	f7 e2       	ldi	r31, 0x27	; 39
    6afa:	80 81       	ld	r24, Z
    6afc:	8e 7f       	andi	r24, 0xFE	; 254
    6afe:	80 83       	st	Z, r24
    6b00:	ec e6       	ldi	r30, 0x6C	; 108
    6b02:	f7 e2       	ldi	r31, 0x27	; 39
    6b04:	80 81       	ld	r24, Z
    6b06:	8e 7f       	andi	r24, 0xFE	; 254
    6b08:	80 83       	st	Z, r24
    6b0a:	e5 e7       	ldi	r30, 0x75	; 117
    6b0c:	f7 e2       	ldi	r31, 0x27	; 39
    6b0e:	80 81       	ld	r24, Z
    6b10:	8e 7f       	andi	r24, 0xFE	; 254
    6b12:	80 83       	st	Z, r24
    6b14:	ee e7       	ldi	r30, 0x7E	; 126
    6b16:	f7 e2       	ldi	r31, 0x27	; 39
    6b18:	80 81       	ld	r24, Z
    6b1a:	8e 7f       	andi	r24, 0xFE	; 254
    6b1c:	80 83       	st	Z, r24
    6b1e:	6a e1       	ldi	r22, 0x1A	; 26
    6b20:	70 e0       	ldi	r23, 0x00	; 0
    6b22:	82 e0       	ldi	r24, 0x02	; 2
    6b24:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
    6b28:	8f 3f       	cpi	r24, 0xFF	; 255
    6b2a:	19 f0       	breq	.+6      	; 0x6b32 <udd_enable+0x82>
    6b2c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    6b30:	03 c0       	rjmp	.+6      	; 0x6b38 <udd_enable+0x88>
    6b32:	8f e1       	ldi	r24, 0x1F	; 31
    6b34:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    6b38:	6b e1       	ldi	r22, 0x1B	; 27
    6b3a:	70 e0       	ldi	r23, 0x00	; 0
    6b3c:	82 e0       	ldi	r24, 0x02	; 2
    6b3e:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
    6b42:	8f 3f       	cpi	r24, 0xFF	; 255
    6b44:	19 f0       	breq	.+6      	; 0x6b4c <udd_enable+0x9c>
    6b46:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    6b4a:	03 c0       	rjmp	.+6      	; 0x6b52 <udd_enable+0xa2>
    6b4c:	8f e1       	ldi	r24, 0x1F	; 31
    6b4e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    6b52:	e0 ec       	ldi	r30, 0xC0	; 192
    6b54:	f4 e0       	ldi	r31, 0x04	; 4
    6b56:	80 81       	ld	r24, Z
    6b58:	82 60       	ori	r24, 0x02	; 2
    6b5a:	80 83       	st	Z, r24
    6b5c:	80 81       	ld	r24, Z
    6b5e:	80 68       	ori	r24, 0x80	; 128
    6b60:	80 83       	st	Z, r24
    6b62:	80 81       	ld	r24, Z
    6b64:	80 61       	ori	r24, 0x10	; 16
    6b66:	80 83       	st	Z, r24
    6b68:	88 ed       	ldi	r24, 0xD8	; 216
    6b6a:	97 e2       	ldi	r25, 0x27	; 39
    6b6c:	86 83       	std	Z+6, r24	; 0x06
    6b6e:	97 83       	std	Z+7, r25	; 0x07
    6b70:	80 81       	ld	r24, Z
    6b72:	80 62       	ori	r24, 0x20	; 32
    6b74:	80 83       	st	Z, r24
    6b76:	8f ef       	ldi	r24, 0xFF	; 255
    6b78:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    6b7c:	e8 ec       	ldi	r30, 0xC8	; 200
    6b7e:	f4 e0       	ldi	r31, 0x04	; 4
    6b80:	80 81       	ld	r24, Z
    6b82:	81 60       	ori	r24, 0x01	; 1
    6b84:	80 83       	st	Z, r24
    6b86:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <udd_b_idle>
    6b8a:	80 91 dc 2a 	lds	r24, 0x2ADC	; 0x802adc <sleepmgr_locks+0x5>
    6b8e:	8f 3f       	cpi	r24, 0xFF	; 255
    6b90:	09 f4       	brne	.+2      	; 0x6b94 <udd_enable+0xe4>
    6b92:	ff cf       	rjmp	.-2      	; 0x6b92 <udd_enable+0xe2>
    6b94:	8f b7       	in	r24, 0x3f	; 63
    6b96:	89 83       	std	Y+1, r24	; 0x01
    6b98:	f8 94       	cli
    6b9a:	99 81       	ldd	r25, Y+1	; 0x01
    6b9c:	e7 ed       	ldi	r30, 0xD7	; 215
    6b9e:	fa e2       	ldi	r31, 0x2A	; 42
    6ba0:	85 81       	ldd	r24, Z+5	; 0x05
    6ba2:	8f 5f       	subi	r24, 0xFF	; 255
    6ba4:	85 83       	std	Z+5, r24	; 0x05
    6ba6:	9f bf       	out	0x3f, r25	; 63
    6ba8:	56 df       	rcall	.-340    	; 0x6a56 <udd_attach>
    6baa:	1f bf       	out	0x3f, r17	; 63
    6bac:	0f 90       	pop	r0
    6bae:	0f 90       	pop	r0
    6bb0:	df 91       	pop	r29
    6bb2:	cf 91       	pop	r28
    6bb4:	1f 91       	pop	r17
    6bb6:	0f 91       	pop	r16
    6bb8:	08 95       	ret

00006bba <udd_is_high_speed>:
    6bba:	80 e0       	ldi	r24, 0x00	; 0
    6bbc:	08 95       	ret

00006bbe <udd_set_address>:
    6bbe:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    6bc2:	08 95       	ret

00006bc4 <udd_getaddress>:
    6bc4:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    6bc8:	08 95       	ret

00006bca <udd_get_frame_number>:
    6bca:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <udd_sram+0x3c>
    6bce:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <udd_sram+0x3d>
    6bd2:	08 95       	ret

00006bd4 <udd_get_micro_frame_number>:
    6bd4:	80 e0       	ldi	r24, 0x00	; 0
    6bd6:	90 e0       	ldi	r25, 0x00	; 0
    6bd8:	08 95       	ret

00006bda <udd_set_setup_payload>:
    6bda:	e7 ec       	ldi	r30, 0xC7	; 199
    6bdc:	fa e2       	ldi	r31, 0x2A	; 42
    6bde:	80 87       	std	Z+8, r24	; 0x08
    6be0:	91 87       	std	Z+9, r25	; 0x09
    6be2:	62 87       	std	Z+10, r22	; 0x0a
    6be4:	73 87       	std	Z+11, r23	; 0x0b
    6be6:	08 95       	ret

00006be8 <udd_ep_alloc>:
    6be8:	28 2f       	mov	r18, r24
    6bea:	2f 70       	andi	r18, 0x0F	; 15
    6bec:	30 e0       	ldi	r19, 0x00	; 0
    6bee:	22 0f       	add	r18, r18
    6bf0:	33 1f       	adc	r19, r19
    6bf2:	08 2e       	mov	r0, r24
    6bf4:	00 0c       	add	r0, r0
    6bf6:	99 0b       	sbc	r25, r25
    6bf8:	88 27       	eor	r24, r24
    6bfa:	99 0f       	add	r25, r25
    6bfc:	88 1f       	adc	r24, r24
    6bfe:	99 27       	eor	r25, r25
    6c00:	82 0f       	add	r24, r18
    6c02:	93 1f       	adc	r25, r19
    6c04:	fc 01       	movw	r30, r24
    6c06:	ee 0f       	add	r30, r30
    6c08:	ff 1f       	adc	r31, r31
    6c0a:	ee 0f       	add	r30, r30
    6c0c:	ff 1f       	adc	r31, r31
    6c0e:	ee 0f       	add	r30, r30
    6c10:	ff 1f       	adc	r31, r31
    6c12:	e4 53       	subi	r30, 0x34	; 52
    6c14:	f8 4d       	sbci	r31, 0xD8	; 216
    6c16:	25 85       	ldd	r18, Z+13	; 0x0d
    6c18:	20 7c       	andi	r18, 0xC0	; 192
    6c1a:	09 f0       	breq	.+2      	; 0x6c1e <udd_ep_alloc+0x36>
    6c1c:	69 c0       	rjmp	.+210    	; 0x6cf0 <udd_ep_alloc+0x108>
    6c1e:	63 70       	andi	r22, 0x03	; 3
    6c20:	61 30       	cpi	r22, 0x01	; 1
    6c22:	11 f0       	breq	.+4      	; 0x6c28 <udd_ep_alloc+0x40>
    6c24:	18 f4       	brcc	.+6      	; 0x6c2c <udd_ep_alloc+0x44>
    6c26:	04 c0       	rjmp	.+8      	; 0x6c30 <udd_ep_alloc+0x48>
    6c28:	60 ec       	ldi	r22, 0xC0	; 192
    6c2a:	03 c0       	rjmp	.+6      	; 0x6c32 <udd_ep_alloc+0x4a>
    6c2c:	60 e8       	ldi	r22, 0x80	; 128
    6c2e:	01 c0       	rjmp	.+2      	; 0x6c32 <udd_ep_alloc+0x4a>
    6c30:	60 e4       	ldi	r22, 0x40	; 64
    6c32:	40 38       	cpi	r20, 0x80	; 128
    6c34:	51 05       	cpc	r21, r1
    6c36:	e9 f0       	breq	.+58     	; 0x6c72 <udd_ep_alloc+0x8a>
    6c38:	50 f4       	brcc	.+20     	; 0x6c4e <udd_ep_alloc+0x66>
    6c3a:	40 32       	cpi	r20, 0x20	; 32
    6c3c:	51 05       	cpc	r21, r1
    6c3e:	a9 f0       	breq	.+42     	; 0x6c6a <udd_ep_alloc+0x82>
    6c40:	40 34       	cpi	r20, 0x40	; 64
    6c42:	51 05       	cpc	r21, r1
    6c44:	a1 f0       	breq	.+40     	; 0x6c6e <udd_ep_alloc+0x86>
    6c46:	40 31       	cpi	r20, 0x10	; 16
    6c48:	51 05       	cpc	r21, r1
    6c4a:	d9 f4       	brne	.+54     	; 0x6c82 <udd_ep_alloc+0x9a>
    6c4c:	0c c0       	rjmp	.+24     	; 0x6c66 <udd_ep_alloc+0x7e>
    6c4e:	41 15       	cp	r20, r1
    6c50:	22 e0       	ldi	r18, 0x02	; 2
    6c52:	52 07       	cpc	r21, r18
    6c54:	91 f0       	breq	.+36     	; 0x6c7a <udd_ep_alloc+0x92>
    6c56:	4f 3f       	cpi	r20, 0xFF	; 255
    6c58:	23 e0       	ldi	r18, 0x03	; 3
    6c5a:	52 07       	cpc	r21, r18
    6c5c:	81 f0       	breq	.+32     	; 0x6c7e <udd_ep_alloc+0x96>
    6c5e:	41 15       	cp	r20, r1
    6c60:	51 40       	sbci	r21, 0x01	; 1
    6c62:	79 f4       	brne	.+30     	; 0x6c82 <udd_ep_alloc+0x9a>
    6c64:	08 c0       	rjmp	.+16     	; 0x6c76 <udd_ep_alloc+0x8e>
    6c66:	21 e0       	ldi	r18, 0x01	; 1
    6c68:	0d c0       	rjmp	.+26     	; 0x6c84 <udd_ep_alloc+0x9c>
    6c6a:	22 e0       	ldi	r18, 0x02	; 2
    6c6c:	0b c0       	rjmp	.+22     	; 0x6c84 <udd_ep_alloc+0x9c>
    6c6e:	23 e0       	ldi	r18, 0x03	; 3
    6c70:	09 c0       	rjmp	.+18     	; 0x6c84 <udd_ep_alloc+0x9c>
    6c72:	24 e0       	ldi	r18, 0x04	; 4
    6c74:	07 c0       	rjmp	.+14     	; 0x6c84 <udd_ep_alloc+0x9c>
    6c76:	25 e0       	ldi	r18, 0x05	; 5
    6c78:	05 c0       	rjmp	.+10     	; 0x6c84 <udd_ep_alloc+0x9c>
    6c7a:	26 e0       	ldi	r18, 0x06	; 6
    6c7c:	03 c0       	rjmp	.+6      	; 0x6c84 <udd_ep_alloc+0x9c>
    6c7e:	27 e0       	ldi	r18, 0x07	; 7
    6c80:	01 c0       	rjmp	.+2      	; 0x6c84 <udd_ep_alloc+0x9c>
    6c82:	20 e0       	ldi	r18, 0x00	; 0
    6c84:	fc 01       	movw	r30, r24
    6c86:	ee 0f       	add	r30, r30
    6c88:	ff 1f       	adc	r31, r31
    6c8a:	ee 0f       	add	r30, r30
    6c8c:	ff 1f       	adc	r31, r31
    6c8e:	ee 0f       	add	r30, r30
    6c90:	ff 1f       	adc	r31, r31
    6c92:	e4 53       	subi	r30, 0x34	; 52
    6c94:	f8 4d       	sbci	r31, 0xD8	; 216
    6c96:	15 86       	std	Z+13, r1	; 0x0d
    6c98:	36 e0       	ldi	r19, 0x06	; 6
    6c9a:	34 87       	std	Z+12, r19	; 0x0c
    6c9c:	26 2b       	or	r18, r22
    6c9e:	25 87       	std	Z+13, r18	; 0x0d
    6ca0:	fc 01       	movw	r30, r24
    6ca2:	ee 0f       	add	r30, r30
    6ca4:	ff 1f       	adc	r31, r31
    6ca6:	ee 0f       	add	r30, r30
    6ca8:	ff 1f       	adc	r31, r31
    6caa:	ee 0f       	add	r30, r30
    6cac:	ff 1f       	adc	r31, r31
    6cae:	e4 53       	subi	r30, 0x34	; 52
    6cb0:	f8 4d       	sbci	r31, 0xD8	; 216
    6cb2:	25 85       	ldd	r18, Z+13	; 0x0d
    6cb4:	20 7c       	andi	r18, 0xC0	; 192
    6cb6:	20 3c       	cpi	r18, 0xC0	; 192
    6cb8:	69 f4       	brne	.+26     	; 0x6cd4 <udd_ep_alloc+0xec>
    6cba:	fc 01       	movw	r30, r24
    6cbc:	ee 0f       	add	r30, r30
    6cbe:	ff 1f       	adc	r31, r31
    6cc0:	ee 0f       	add	r30, r30
    6cc2:	ff 1f       	adc	r31, r31
    6cc4:	ee 0f       	add	r30, r30
    6cc6:	ff 1f       	adc	r31, r31
    6cc8:	e4 53       	subi	r30, 0x34	; 52
    6cca:	f8 4d       	sbci	r31, 0xD8	; 216
    6ccc:	25 85       	ldd	r18, Z+13	; 0x0d
    6cce:	27 70       	andi	r18, 0x07	; 7
    6cd0:	27 30       	cpi	r18, 0x07	; 7
    6cd2:	81 f0       	breq	.+32     	; 0x6cf4 <udd_ep_alloc+0x10c>
    6cd4:	88 0f       	add	r24, r24
    6cd6:	99 1f       	adc	r25, r25
    6cd8:	88 0f       	add	r24, r24
    6cda:	99 1f       	adc	r25, r25
    6cdc:	88 0f       	add	r24, r24
    6cde:	99 1f       	adc	r25, r25
    6ce0:	fc 01       	movw	r30, r24
    6ce2:	e4 53       	subi	r30, 0x34	; 52
    6ce4:	f8 4d       	sbci	r31, 0xD8	; 216
    6ce6:	85 85       	ldd	r24, Z+13	; 0x0d
    6ce8:	80 62       	ori	r24, 0x20	; 32
    6cea:	85 87       	std	Z+13, r24	; 0x0d
    6cec:	81 e0       	ldi	r24, 0x01	; 1
    6cee:	08 95       	ret
    6cf0:	80 e0       	ldi	r24, 0x00	; 0
    6cf2:	08 95       	ret
    6cf4:	81 e0       	ldi	r24, 0x01	; 1
    6cf6:	08 95       	ret

00006cf8 <udd_ep_is_halted>:
    6cf8:	e8 2f       	mov	r30, r24
    6cfa:	ef 70       	andi	r30, 0x0F	; 15
    6cfc:	f0 e0       	ldi	r31, 0x00	; 0
    6cfe:	ee 0f       	add	r30, r30
    6d00:	ff 1f       	adc	r31, r31
    6d02:	08 2e       	mov	r0, r24
    6d04:	00 0c       	add	r0, r0
    6d06:	99 0b       	sbc	r25, r25
    6d08:	88 27       	eor	r24, r24
    6d0a:	99 0f       	add	r25, r25
    6d0c:	88 1f       	adc	r24, r24
    6d0e:	99 27       	eor	r25, r25
    6d10:	e8 0f       	add	r30, r24
    6d12:	f9 1f       	adc	r31, r25
    6d14:	ee 0f       	add	r30, r30
    6d16:	ff 1f       	adc	r31, r31
    6d18:	ee 0f       	add	r30, r30
    6d1a:	ff 1f       	adc	r31, r31
    6d1c:	ee 0f       	add	r30, r30
    6d1e:	ff 1f       	adc	r31, r31
    6d20:	e4 53       	subi	r30, 0x34	; 52
    6d22:	f8 4d       	sbci	r31, 0xD8	; 216
    6d24:	85 85       	ldd	r24, Z+13	; 0x0d
    6d26:	82 fb       	bst	r24, 2
    6d28:	88 27       	eor	r24, r24
    6d2a:	80 f9       	bld	r24, 0
    6d2c:	08 95       	ret

00006d2e <udd_ep_clear_halt>:
    6d2e:	0f 93       	push	r16
    6d30:	28 2f       	mov	r18, r24
    6d32:	2f 70       	andi	r18, 0x0F	; 15
    6d34:	30 e0       	ldi	r19, 0x00	; 0
    6d36:	a9 01       	movw	r20, r18
    6d38:	44 0f       	add	r20, r20
    6d3a:	55 1f       	adc	r21, r21
    6d3c:	28 2f       	mov	r18, r24
    6d3e:	08 2e       	mov	r0, r24
    6d40:	00 0c       	add	r0, r0
    6d42:	33 0b       	sbc	r19, r19
    6d44:	22 27       	eor	r18, r18
    6d46:	33 0f       	add	r19, r19
    6d48:	22 1f       	adc	r18, r18
    6d4a:	33 27       	eor	r19, r19
    6d4c:	24 0f       	add	r18, r20
    6d4e:	35 1f       	adc	r19, r21
    6d50:	a9 01       	movw	r20, r18
    6d52:	44 0f       	add	r20, r20
    6d54:	55 1f       	adc	r21, r21
    6d56:	44 0f       	add	r20, r20
    6d58:	55 1f       	adc	r21, r21
    6d5a:	44 0f       	add	r20, r20
    6d5c:	55 1f       	adc	r21, r21
    6d5e:	fa 01       	movw	r30, r20
    6d60:	e8 52       	subi	r30, 0x28	; 40
    6d62:	f8 4d       	sbci	r31, 0xD8	; 216
    6d64:	01 e0       	ldi	r16, 0x01	; 1
    6d66:	06 93       	lac	Z, r16
    6d68:	fa 01       	movw	r30, r20
    6d6a:	e4 53       	subi	r30, 0x34	; 52
    6d6c:	f8 4d       	sbci	r31, 0xD8	; 216
    6d6e:	95 85       	ldd	r25, Z+13	; 0x0d
    6d70:	92 ff       	sbrs	r25, 2
    6d72:	11 c0       	rjmp	.+34     	; 0x6d96 <udd_ep_clear_halt+0x68>
    6d74:	fa 01       	movw	r30, r20
    6d76:	e4 53       	subi	r30, 0x34	; 52
    6d78:	f8 4d       	sbci	r31, 0xD8	; 216
    6d7a:	95 85       	ldd	r25, Z+13	; 0x0d
    6d7c:	9b 7f       	andi	r25, 0xFB	; 251
    6d7e:	95 87       	std	Z+13, r25	; 0x0d
    6d80:	59 dc       	rcall	.-1870   	; 0x6634 <udd_ep_get_job>
    6d82:	fc 01       	movw	r30, r24
    6d84:	80 81       	ld	r24, Z
    6d86:	80 ff       	sbrs	r24, 0
    6d88:	06 c0       	rjmp	.+12     	; 0x6d96 <udd_ep_clear_halt+0x68>
    6d8a:	8e 7f       	andi	r24, 0xFE	; 254
    6d8c:	80 83       	st	Z, r24
    6d8e:	07 80       	ldd	r0, Z+7	; 0x07
    6d90:	f0 85       	ldd	r31, Z+8	; 0x08
    6d92:	e0 2d       	mov	r30, r0
    6d94:	19 95       	eicall
    6d96:	81 e0       	ldi	r24, 0x01	; 1
    6d98:	0f 91       	pop	r16
    6d9a:	08 95       	ret

00006d9c <udd_ep_run>:
    6d9c:	6f 92       	push	r6
    6d9e:	7f 92       	push	r7
    6da0:	8f 92       	push	r8
    6da2:	9f 92       	push	r9
    6da4:	af 92       	push	r10
    6da6:	bf 92       	push	r11
    6da8:	cf 92       	push	r12
    6daa:	df 92       	push	r13
    6dac:	ef 92       	push	r14
    6dae:	ff 92       	push	r15
    6db0:	0f 93       	push	r16
    6db2:	1f 93       	push	r17
    6db4:	cf 93       	push	r28
    6db6:	df 93       	push	r29
    6db8:	1f 92       	push	r1
    6dba:	cd b7       	in	r28, 0x3d	; 61
    6dbc:	de b7       	in	r29, 0x3e	; 62
    6dbe:	78 2e       	mov	r7, r24
    6dc0:	66 2e       	mov	r6, r22
    6dc2:	4a 01       	movw	r8, r20
    6dc4:	59 01       	movw	r10, r18
    6dc6:	36 dc       	rcall	.-1940   	; 0x6634 <udd_ep_get_job>
    6dc8:	6c 01       	movw	r12, r24
    6dca:	27 2d       	mov	r18, r7
    6dcc:	87 2d       	mov	r24, r7
    6dce:	8f 70       	andi	r24, 0x0F	; 15
    6dd0:	e8 2e       	mov	r14, r24
    6dd2:	f1 2c       	mov	r15, r1
    6dd4:	c7 01       	movw	r24, r14
    6dd6:	88 0f       	add	r24, r24
    6dd8:	99 1f       	adc	r25, r25
    6dda:	e7 2c       	mov	r14, r7
    6ddc:	07 2c       	mov	r0, r7
    6dde:	00 0c       	add	r0, r0
    6de0:	ff 08       	sbc	r15, r15
    6de2:	ee 24       	eor	r14, r14
    6de4:	ff 0c       	add	r15, r15
    6de6:	ee 1c       	adc	r14, r14
    6de8:	ff 24       	eor	r15, r15
    6dea:	e8 0e       	add	r14, r24
    6dec:	f9 1e       	adc	r15, r25
    6dee:	f7 01       	movw	r30, r14
    6df0:	ee 0f       	add	r30, r30
    6df2:	ff 1f       	adc	r31, r31
    6df4:	ee 0f       	add	r30, r30
    6df6:	ff 1f       	adc	r31, r31
    6df8:	ee 0f       	add	r30, r30
    6dfa:	ff 1f       	adc	r31, r31
    6dfc:	e4 53       	subi	r30, 0x34	; 52
    6dfe:	f8 4d       	sbci	r31, 0xD8	; 216
    6e00:	85 85       	ldd	r24, Z+13	; 0x0d
    6e02:	80 7c       	andi	r24, 0xC0	; 192
    6e04:	09 f4       	brne	.+2      	; 0x6e08 <udd_ep_run+0x6c>
    6e06:	82 c0       	rjmp	.+260    	; 0x6f0c <udd_ep_run+0x170>
    6e08:	f7 01       	movw	r30, r14
    6e0a:	ee 0f       	add	r30, r30
    6e0c:	ff 1f       	adc	r31, r31
    6e0e:	ee 0f       	add	r30, r30
    6e10:	ff 1f       	adc	r31, r31
    6e12:	ee 0f       	add	r30, r30
    6e14:	ff 1f       	adc	r31, r31
    6e16:	e4 53       	subi	r30, 0x34	; 52
    6e18:	f8 4d       	sbci	r31, 0xD8	; 216
    6e1a:	85 85       	ldd	r24, Z+13	; 0x0d
    6e1c:	80 7c       	andi	r24, 0xC0	; 192
    6e1e:	80 3c       	cpi	r24, 0xC0	; 192
    6e20:	61 f0       	breq	.+24     	; 0x6e3a <udd_ep_run+0x9e>
    6e22:	f7 01       	movw	r30, r14
    6e24:	ee 0f       	add	r30, r30
    6e26:	ff 1f       	adc	r31, r31
    6e28:	ee 0f       	add	r30, r30
    6e2a:	ff 1f       	adc	r31, r31
    6e2c:	ee 0f       	add	r30, r30
    6e2e:	ff 1f       	adc	r31, r31
    6e30:	e4 53       	subi	r30, 0x34	; 52
    6e32:	f8 4d       	sbci	r31, 0xD8	; 216
    6e34:	85 85       	ldd	r24, Z+13	; 0x0d
    6e36:	82 fd       	sbrc	r24, 2
    6e38:	6b c0       	rjmp	.+214    	; 0x6f10 <udd_ep_run+0x174>
    6e3a:	8f b7       	in	r24, 0x3f	; 63
    6e3c:	89 83       	std	Y+1, r24	; 0x01
    6e3e:	f8 94       	cli
    6e40:	89 81       	ldd	r24, Y+1	; 0x01
    6e42:	f6 01       	movw	r30, r12
    6e44:	90 81       	ld	r25, Z
    6e46:	90 ff       	sbrs	r25, 0
    6e48:	03 c0       	rjmp	.+6      	; 0x6e50 <udd_ep_run+0xb4>
    6e4a:	8f bf       	out	0x3f, r24	; 63
    6e4c:	80 e0       	ldi	r24, 0x00	; 0
    6e4e:	61 c0       	rjmp	.+194    	; 0x6f12 <udd_ep_run+0x176>
    6e50:	f6 01       	movw	r30, r12
    6e52:	90 81       	ld	r25, Z
    6e54:	91 60       	ori	r25, 0x01	; 1
    6e56:	90 83       	st	Z, r25
    6e58:	8f bf       	out	0x3f, r24	; 63
    6e5a:	81 82       	std	Z+1, r8	; 0x01
    6e5c:	92 82       	std	Z+2, r9	; 0x02
    6e5e:	a3 82       	std	Z+3, r10	; 0x03
    6e60:	b4 82       	std	Z+4, r11	; 0x04
    6e62:	15 82       	std	Z+5, r1	; 0x05
    6e64:	16 82       	std	Z+6, r1	; 0x06
    6e66:	07 83       	std	Z+7, r16	; 0x07
    6e68:	10 87       	std	Z+8, r17	; 0x08
    6e6a:	61 10       	cpse	r6, r1
    6e6c:	06 c0       	rjmp	.+12     	; 0x6e7a <udd_ep_run+0xde>
    6e6e:	91 e0       	ldi	r25, 0x01	; 1
    6e70:	a1 14       	cp	r10, r1
    6e72:	b1 04       	cpc	r11, r1
    6e74:	19 f0       	breq	.+6      	; 0x6e7c <udd_ep_run+0xe0>
    6e76:	90 e0       	ldi	r25, 0x00	; 0
    6e78:	01 c0       	rjmp	.+2      	; 0x6e7c <udd_ep_run+0xe0>
    6e7a:	91 e0       	ldi	r25, 0x01	; 1
    6e7c:	f6 01       	movw	r30, r12
    6e7e:	80 81       	ld	r24, Z
    6e80:	90 fb       	bst	r25, 0
    6e82:	81 f9       	bld	r24, 1
    6e84:	8b 7f       	andi	r24, 0xFB	; 251
    6e86:	80 83       	st	Z, r24
    6e88:	22 23       	and	r18, r18
    6e8a:	64 f4       	brge	.+24     	; 0x6ea4 <udd_ep_run+0x108>
    6e8c:	f7 01       	movw	r30, r14
    6e8e:	ee 0f       	add	r30, r30
    6e90:	ff 1f       	adc	r31, r31
    6e92:	ee 0f       	add	r30, r30
    6e94:	ff 1f       	adc	r31, r31
    6e96:	ee 0f       	add	r30, r30
    6e98:	ff 1f       	adc	r31, r31
    6e9a:	e4 53       	subi	r30, 0x34	; 52
    6e9c:	f8 4d       	sbci	r31, 0xD8	; 216
    6e9e:	12 8a       	std	Z+18, r1	; 0x12
    6ea0:	13 8a       	std	Z+19, r1	; 0x13
    6ea2:	30 c0       	rjmp	.+96     	; 0x6f04 <udd_ep_run+0x168>
    6ea4:	f7 01       	movw	r30, r14
    6ea6:	ee 0f       	add	r30, r30
    6ea8:	ff 1f       	adc	r31, r31
    6eaa:	ee 0f       	add	r30, r30
    6eac:	ff 1f       	adc	r31, r31
    6eae:	ee 0f       	add	r30, r30
    6eb0:	ff 1f       	adc	r31, r31
    6eb2:	e4 53       	subi	r30, 0x34	; 52
    6eb4:	f8 4d       	sbci	r31, 0xD8	; 216
    6eb6:	85 85       	ldd	r24, Z+13	; 0x0d
    6eb8:	80 7c       	andi	r24, 0xC0	; 192
    6eba:	80 3c       	cpi	r24, 0xC0	; 192
    6ebc:	b1 f4       	brne	.+44     	; 0x6eea <udd_ep_run+0x14e>
    6ebe:	c7 01       	movw	r24, r14
    6ec0:	88 0f       	add	r24, r24
    6ec2:	99 1f       	adc	r25, r25
    6ec4:	88 0f       	add	r24, r24
    6ec6:	99 1f       	adc	r25, r25
    6ec8:	88 0f       	add	r24, r24
    6eca:	99 1f       	adc	r25, r25
    6ecc:	88 52       	subi	r24, 0x28	; 40
    6ece:	98 4d       	sbci	r25, 0xD8	; 216
    6ed0:	88 db       	rcall	.-2288   	; 0x65e2 <udd_ep_get_size>
    6ed2:	bc 01       	movw	r22, r24
    6ed4:	c5 01       	movw	r24, r10
    6ed6:	0e 94 09 51 	call	0xa212	; 0xa212 <__udivmodhi4>
    6eda:	89 2b       	or	r24, r25
    6edc:	31 f0       	breq	.+12     	; 0x6eea <udd_ep_run+0x14e>
    6ede:	f6 01       	movw	r30, r12
    6ee0:	80 81       	ld	r24, Z
    6ee2:	8e 7f       	andi	r24, 0xFE	; 254
    6ee4:	80 83       	st	Z, r24
    6ee6:	80 e0       	ldi	r24, 0x00	; 0
    6ee8:	14 c0       	rjmp	.+40     	; 0x6f12 <udd_ep_run+0x176>
    6eea:	f7 01       	movw	r30, r14
    6eec:	ee 0f       	add	r30, r30
    6eee:	ff 1f       	adc	r31, r31
    6ef0:	ee 0f       	add	r30, r30
    6ef2:	ff 1f       	adc	r31, r31
    6ef4:	ee 0f       	add	r30, r30
    6ef6:	ff 1f       	adc	r31, r31
    6ef8:	e4 53       	subi	r30, 0x34	; 52
    6efa:	f8 4d       	sbci	r31, 0xD8	; 216
    6efc:	16 86       	std	Z+14, r1	; 0x0e
    6efe:	17 86       	std	Z+15, r1	; 0x0f
    6f00:	12 8a       	std	Z+18, r1	; 0x12
    6f02:	13 8a       	std	Z+19, r1	; 0x13
    6f04:	87 2d       	mov	r24, r7
    6f06:	23 dc       	rcall	.-1978   	; 0x674e <udd_ep_trans_complet>
    6f08:	81 e0       	ldi	r24, 0x01	; 1
    6f0a:	03 c0       	rjmp	.+6      	; 0x6f12 <udd_ep_run+0x176>
    6f0c:	80 e0       	ldi	r24, 0x00	; 0
    6f0e:	01 c0       	rjmp	.+2      	; 0x6f12 <udd_ep_run+0x176>
    6f10:	80 e0       	ldi	r24, 0x00	; 0
    6f12:	0f 90       	pop	r0
    6f14:	df 91       	pop	r29
    6f16:	cf 91       	pop	r28
    6f18:	1f 91       	pop	r17
    6f1a:	0f 91       	pop	r16
    6f1c:	ff 90       	pop	r15
    6f1e:	ef 90       	pop	r14
    6f20:	df 90       	pop	r13
    6f22:	cf 90       	pop	r12
    6f24:	bf 90       	pop	r11
    6f26:	af 90       	pop	r10
    6f28:	9f 90       	pop	r9
    6f2a:	8f 90       	pop	r8
    6f2c:	7f 90       	pop	r7
    6f2e:	6f 90       	pop	r6
    6f30:	08 95       	ret

00006f32 <udd_ep_abort>:
    6f32:	ff 92       	push	r15
    6f34:	0f 93       	push	r16
    6f36:	1f 93       	push	r17
    6f38:	cf 93       	push	r28
    6f3a:	df 93       	push	r29
    6f3c:	18 2f       	mov	r17, r24
    6f3e:	c8 2f       	mov	r28, r24
    6f40:	cf 70       	andi	r28, 0x0F	; 15
    6f42:	d0 e0       	ldi	r29, 0x00	; 0
    6f44:	ce 01       	movw	r24, r28
    6f46:	88 0f       	add	r24, r24
    6f48:	99 1f       	adc	r25, r25
    6f4a:	c1 2f       	mov	r28, r17
    6f4c:	01 2e       	mov	r0, r17
    6f4e:	00 0c       	add	r0, r0
    6f50:	dd 0b       	sbc	r29, r29
    6f52:	cc 27       	eor	r28, r28
    6f54:	dd 0f       	add	r29, r29
    6f56:	cc 1f       	adc	r28, r28
    6f58:	dd 27       	eor	r29, r29
    6f5a:	c8 0f       	add	r28, r24
    6f5c:	d9 1f       	adc	r29, r25
    6f5e:	81 2f       	mov	r24, r17
    6f60:	69 db       	rcall	.-2350   	; 0x6634 <udd_ep_get_job>
    6f62:	dc 01       	movw	r26, r24
    6f64:	fe 01       	movw	r30, r28
    6f66:	ee 0f       	add	r30, r30
    6f68:	ff 1f       	adc	r31, r31
    6f6a:	ee 0f       	add	r30, r30
    6f6c:	ff 1f       	adc	r31, r31
    6f6e:	ee 0f       	add	r30, r30
    6f70:	ff 1f       	adc	r31, r31
    6f72:	e8 52       	subi	r30, 0x28	; 40
    6f74:	f8 4d       	sbci	r31, 0xD8	; 216
    6f76:	02 e0       	ldi	r16, 0x02	; 2
    6f78:	05 93       	las	Z, r16
    6f7a:	8c 91       	ld	r24, X
    6f7c:	80 ff       	sbrs	r24, 0
    6f7e:	22 c0       	rjmp	.+68     	; 0x6fc4 <udd_ep_abort+0x92>
    6f80:	8e 7f       	andi	r24, 0xFE	; 254
    6f82:	8c 93       	st	X, r24
    6f84:	17 96       	adiw	r26, 0x07	; 7
    6f86:	ed 91       	ld	r30, X+
    6f88:	fc 91       	ld	r31, X
    6f8a:	18 97       	sbiw	r26, 0x08	; 8
    6f8c:	30 97       	sbiw	r30, 0x00	; 0
    6f8e:	d1 f0       	breq	.+52     	; 0x6fc4 <udd_ep_abort+0x92>
    6f90:	11 23       	and	r17, r17
    6f92:	5c f4       	brge	.+22     	; 0x6faa <udd_ep_abort+0x78>
    6f94:	cc 0f       	add	r28, r28
    6f96:	dd 1f       	adc	r29, r29
    6f98:	cc 0f       	add	r28, r28
    6f9a:	dd 1f       	adc	r29, r29
    6f9c:	cc 0f       	add	r28, r28
    6f9e:	dd 1f       	adc	r29, r29
    6fa0:	c4 53       	subi	r28, 0x34	; 52
    6fa2:	d8 4d       	sbci	r29, 0xD8	; 216
    6fa4:	6a 89       	ldd	r22, Y+18	; 0x12
    6fa6:	7b 89       	ldd	r23, Y+19	; 0x13
    6fa8:	0a c0       	rjmp	.+20     	; 0x6fbe <udd_ep_abort+0x8c>
    6faa:	cc 0f       	add	r28, r28
    6fac:	dd 1f       	adc	r29, r29
    6fae:	cc 0f       	add	r28, r28
    6fb0:	dd 1f       	adc	r29, r29
    6fb2:	cc 0f       	add	r28, r28
    6fb4:	dd 1f       	adc	r29, r29
    6fb6:	c4 53       	subi	r28, 0x34	; 52
    6fb8:	d8 4d       	sbci	r29, 0xD8	; 216
    6fba:	6e 85       	ldd	r22, Y+14	; 0x0e
    6fbc:	7f 85       	ldd	r23, Y+15	; 0x0f
    6fbe:	41 2f       	mov	r20, r17
    6fc0:	81 e0       	ldi	r24, 0x01	; 1
    6fc2:	19 95       	eicall
    6fc4:	df 91       	pop	r29
    6fc6:	cf 91       	pop	r28
    6fc8:	1f 91       	pop	r17
    6fca:	0f 91       	pop	r16
    6fcc:	ff 90       	pop	r15
    6fce:	08 95       	ret

00006fd0 <udd_ep_free>:
    6fd0:	cf 93       	push	r28
    6fd2:	c8 2f       	mov	r28, r24
    6fd4:	ae df       	rcall	.-164    	; 0x6f32 <udd_ep_abort>
    6fd6:	ec 2f       	mov	r30, r28
    6fd8:	ef 70       	andi	r30, 0x0F	; 15
    6fda:	f0 e0       	ldi	r31, 0x00	; 0
    6fdc:	ee 0f       	add	r30, r30
    6fde:	ff 1f       	adc	r31, r31
    6fe0:	8c 2f       	mov	r24, r28
    6fe2:	cc 0f       	add	r28, r28
    6fe4:	99 0b       	sbc	r25, r25
    6fe6:	88 27       	eor	r24, r24
    6fe8:	99 0f       	add	r25, r25
    6fea:	88 1f       	adc	r24, r24
    6fec:	99 27       	eor	r25, r25
    6fee:	e8 0f       	add	r30, r24
    6ff0:	f9 1f       	adc	r31, r25
    6ff2:	ee 0f       	add	r30, r30
    6ff4:	ff 1f       	adc	r31, r31
    6ff6:	ee 0f       	add	r30, r30
    6ff8:	ff 1f       	adc	r31, r31
    6ffa:	ee 0f       	add	r30, r30
    6ffc:	ff 1f       	adc	r31, r31
    6ffe:	e4 53       	subi	r30, 0x34	; 52
    7000:	f8 4d       	sbci	r31, 0xD8	; 216
    7002:	15 86       	std	Z+13, r1	; 0x0d
    7004:	cf 91       	pop	r28
    7006:	08 95       	ret

00007008 <udd_ep_set_halt>:
    7008:	e8 2f       	mov	r30, r24
    700a:	ef 70       	andi	r30, 0x0F	; 15
    700c:	f0 e0       	ldi	r31, 0x00	; 0
    700e:	ee 0f       	add	r30, r30
    7010:	ff 1f       	adc	r31, r31
    7012:	28 2f       	mov	r18, r24
    7014:	08 2e       	mov	r0, r24
    7016:	00 0c       	add	r0, r0
    7018:	33 0b       	sbc	r19, r19
    701a:	22 27       	eor	r18, r18
    701c:	33 0f       	add	r19, r19
    701e:	22 1f       	adc	r18, r18
    7020:	33 27       	eor	r19, r19
    7022:	e2 0f       	add	r30, r18
    7024:	f3 1f       	adc	r31, r19
    7026:	ee 0f       	add	r30, r30
    7028:	ff 1f       	adc	r31, r31
    702a:	ee 0f       	add	r30, r30
    702c:	ff 1f       	adc	r31, r31
    702e:	ee 0f       	add	r30, r30
    7030:	ff 1f       	adc	r31, r31
    7032:	e4 53       	subi	r30, 0x34	; 52
    7034:	f8 4d       	sbci	r31, 0xD8	; 216
    7036:	95 85       	ldd	r25, Z+13	; 0x0d
    7038:	94 60       	ori	r25, 0x04	; 4
    703a:	95 87       	std	Z+13, r25	; 0x0d
    703c:	7a df       	rcall	.-268    	; 0x6f32 <udd_ep_abort>
    703e:	81 e0       	ldi	r24, 0x01	; 1
    7040:	08 95       	ret

00007042 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    7042:	1f 92       	push	r1
    7044:	0f 92       	push	r0
    7046:	0f b6       	in	r0, 0x3f	; 63
    7048:	0f 92       	push	r0
    704a:	11 24       	eor	r1, r1
    704c:	0b b6       	in	r0, 0x3b	; 59
    704e:	0f 92       	push	r0
    7050:	0f 93       	push	r16
    7052:	2f 93       	push	r18
    7054:	3f 93       	push	r19
    7056:	4f 93       	push	r20
    7058:	5f 93       	push	r21
    705a:	6f 93       	push	r22
    705c:	7f 93       	push	r23
    705e:	8f 93       	push	r24
    7060:	9f 93       	push	r25
    7062:	af 93       	push	r26
    7064:	bf 93       	push	r27
    7066:	ef 93       	push	r30
    7068:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    706a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    706e:	88 23       	and	r24, r24
    7070:	34 f4       	brge	.+12     	; 0x707e <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    7072:	80 e8       	ldi	r24, 0x80	; 128
    7074:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    7078:	0e 94 9a 4d 	call	0x9b34	; 0x9b34 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    707c:	88 c0       	rjmp	.+272    	; 0x718e <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    707e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    7082:	82 ff       	sbrs	r24, 2
    7084:	20 c0       	rjmp	.+64     	; 0x70c6 <__vector_125+0x84>
		udd_ack_underflow_event();
    7086:	84 e0       	ldi	r24, 0x04	; 4
    7088:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    708c:	80 91 e0 27 	lds	r24, 0x27E0	; 0x8027e0 <udd_sram+0x14>
    7090:	86 ff       	sbrs	r24, 6
    7092:	7d c0       	rjmp	.+250    	; 0x718e <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    7094:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    7098:	81 fd       	sbrc	r24, 1
    709a:	79 c0       	rjmp	.+242    	; 0x718e <__vector_125+0x14c>
    709c:	e6 da       	rcall	.-2612   	; 0x666a <udd_ctrl_interrupt_tc_setup>
    709e:	81 11       	cpse	r24, r1
    70a0:	76 c0       	rjmp	.+236    	; 0x718e <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    70a2:	80 91 cb 27 	lds	r24, 0x27CB	; 0x8027cb <udd_ep_control_state>
    70a6:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    70a8:	11 f4       	brne	.+4      	; 0x70ae <__vector_125+0x6c>
    70aa:	19 da       	rcall	.-3022   	; 0x64de <udd_ctrl_send_zlp_in>
    70ac:	70 c0       	rjmp	.+224    	; 0x718e <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    70ae:	84 30       	cpi	r24, 0x04	; 4
    70b0:	09 f0       	breq	.+2      	; 0x70b4 <__vector_125+0x72>
    70b2:	6d c0       	rjmp	.+218    	; 0x718e <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    70b4:	e1 ee       	ldi	r30, 0xE1	; 225
    70b6:	f7 e2       	ldi	r31, 0x27	; 39
    70b8:	04 e0       	ldi	r16, 0x04	; 4
    70ba:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    70bc:	e9 ed       	ldi	r30, 0xD9	; 217
    70be:	f7 e2       	ldi	r31, 0x27	; 39
    70c0:	04 e0       	ldi	r16, 0x04	; 4
    70c2:	05 93       	las	Z, r16
    70c4:	64 c0       	rjmp	.+200    	; 0x718e <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    70c6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    70ca:	81 ff       	sbrs	r24, 1
    70cc:	5b c0       	rjmp	.+182    	; 0x7184 <__vector_125+0x142>
		udd_ack_overflow_event();
    70ce:	82 e0       	ldi	r24, 0x02	; 2
    70d0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    70d4:	80 91 d8 27 	lds	r24, 0x27D8	; 0x8027d8 <udd_sram+0xc>
    70d8:	86 ff       	sbrs	r24, 6
    70da:	59 c0       	rjmp	.+178    	; 0x718e <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    70dc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    70e0:	81 fd       	sbrc	r24, 1
    70e2:	55 c0       	rjmp	.+170    	; 0x718e <__vector_125+0x14c>
    70e4:	c2 da       	rcall	.-2684   	; 0x666a <udd_ctrl_interrupt_tc_setup>
    70e6:	81 11       	cpse	r24, r1
    70e8:	52 c0       	rjmp	.+164    	; 0x718e <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    70ea:	80 91 cb 27 	lds	r24, 0x27CB	; 0x8027cb <udd_ep_control_state>
    70ee:	82 30       	cpi	r24, 0x02	; 2
    70f0:	41 f4       	brne	.+16     	; 0x7102 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    70f2:	84 e0       	ldi	r24, 0x04	; 4
    70f4:	80 93 cb 27 	sts	0x27CB, r24	; 0x8027cb <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    70f8:	e8 ed       	ldi	r30, 0xD8	; 216
    70fa:	f7 e2       	ldi	r31, 0x27	; 39
    70fc:	02 e0       	ldi	r16, 0x02	; 2
    70fe:	06 93       	lac	Z, r16
    7100:	46 c0       	rjmp	.+140    	; 0x718e <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    7102:	83 30       	cpi	r24, 0x03	; 3
    7104:	09 f0       	breq	.+2      	; 0x7108 <__vector_125+0xc6>
    7106:	43 c0       	rjmp	.+134    	; 0x718e <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    7108:	e1 ee       	ldi	r30, 0xE1	; 225
    710a:	f7 e2       	ldi	r31, 0x27	; 39
    710c:	04 e0       	ldi	r16, 0x04	; 4
    710e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    7110:	e9 ed       	ldi	r30, 0xD9	; 217
    7112:	f7 e2       	ldi	r31, 0x27	; 39
    7114:	04 e0       	ldi	r16, 0x04	; 4
    7116:	05 93       	las	Z, r16
    7118:	3a c0       	rjmp	.+116    	; 0x718e <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    711a:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    711c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    7120:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    7122:	07 df       	rcall	.-498    	; 0x6f32 <udd_ep_abort>
    7124:	81 e8       	ldi	r24, 0x81	; 129
    7126:	05 df       	rcall	.-502    	; 0x6f32 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    7128:	82 e0       	ldi	r24, 0x02	; 2
    712a:	03 df       	rcall	.-506    	; 0x6f32 <udd_ep_abort>
    712c:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    712e:	01 df       	rcall	.-510    	; 0x6f32 <udd_ep_abort>
    7130:	0e 94 70 4d 	call	0x9ae0	; 0x9ae0 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    7134:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    7138:	ec ec       	ldi	r30, 0xCC	; 204
    713a:	f7 e2       	ldi	r31, 0x27	; 39
	udd_endpoint_clear_status(ep_ctrl);
    713c:	15 86       	std	Z+13, r1	; 0x0d
    713e:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    7140:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    7142:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    7144:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    7146:	15 8a       	std	Z+21, r1	; 0x15
    7148:	94 8b       	std	Z+20, r25	; 0x14
    714a:	85 8b       	std	Z+21, r24	; 0x15
    714c:	87 e8       	ldi	r24, 0x87	; 135
		// Reset endpoint control management
		udd_ctrl_init();
    714e:	97 e2       	ldi	r25, 0x27	; 39
    7150:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    7152:	91 8b       	std	Z+17, r25	; 0x11
    7154:	91 d9       	rcall	.-3294   	; 0x6478 <udd_ctrl_init>
		udd_ack_suspend_event();
    7156:	1b c0       	rjmp	.+54     	; 0x718e <__vector_125+0x14c>
    7158:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    715c:	86 ff       	sbrs	r24, 6
    715e:	07 c0       	rjmp	.+14     	; 0x716e <__vector_125+0x12c>
    7160:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    7162:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    7166:	80 e0       	ldi	r24, 0x00	; 0
    7168:	4f d9       	rcall	.-3426   	; 0x6408 <udd_sleep_mode>
		udd_ack_resume_event();
    716a:	cb d5       	rcall	.+2966   	; 0x7d02 <usb_callback_suspend_action>
    716c:	10 c0       	rjmp	.+32     	; 0x718e <__vector_125+0x14c>
    716e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    7172:	85 ff       	sbrs	r24, 5
    7174:	0c c0       	rjmp	.+24     	; 0x718e <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    7176:	80 e2       	ldi	r24, 0x20	; 32
    7178:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    717c:	81 e0       	ldi	r24, 0x01	; 1
    717e:	44 d9       	rcall	.-3448   	; 0x6408 <udd_sleep_mode>
    7180:	c1 d5       	rcall	.+2946   	; 0x7d04 <usb_callback_resume_action>
    7182:	05 c0       	rjmp	.+10     	; 0x718e <__vector_125+0x14c>
    7184:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    7188:	84 fd       	sbrc	r24, 4
    718a:	c7 cf       	rjmp	.-114    	; 0x711a <__vector_125+0xd8>
    718c:	e5 cf       	rjmp	.-54     	; 0x7158 <__vector_125+0x116>
    718e:	ff 91       	pop	r31
    7190:	ef 91       	pop	r30
    7192:	bf 91       	pop	r27
    7194:	af 91       	pop	r26
    7196:	9f 91       	pop	r25
    7198:	8f 91       	pop	r24
    719a:	7f 91       	pop	r23
    719c:	6f 91       	pop	r22
    719e:	5f 91       	pop	r21
    71a0:	4f 91       	pop	r20
    71a2:	3f 91       	pop	r19
    71a4:	2f 91       	pop	r18
    71a6:	0f 91       	pop	r16
    71a8:	0f 90       	pop	r0
    71aa:	0b be       	out	0x3b, r0	; 59
    71ac:	0f 90       	pop	r0
    71ae:	0f be       	out	0x3f, r0	; 63
    71b0:	0f 90       	pop	r0
    71b2:	1f 90       	pop	r1
    71b4:	18 95       	reti

000071b6 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    71b6:	1f 92       	push	r1
    71b8:	0f 92       	push	r0
    71ba:	0f b6       	in	r0, 0x3f	; 63
    71bc:	0f 92       	push	r0
    71be:	11 24       	eor	r1, r1
    71c0:	0b b6       	in	r0, 0x3b	; 59
    71c2:	0f 92       	push	r0
    71c4:	0f 93       	push	r16
    71c6:	1f 93       	push	r17
    71c8:	2f 93       	push	r18
    71ca:	3f 93       	push	r19
    71cc:	4f 93       	push	r20
    71ce:	5f 93       	push	r21
    71d0:	6f 93       	push	r22
    71d2:	7f 93       	push	r23
    71d4:	8f 93       	push	r24
    71d6:	9f 93       	push	r25
    71d8:	af 93       	push	r26
    71da:	bf 93       	push	r27
    71dc:	cf 93       	push	r28
    71de:	df 93       	push	r29
    71e0:	ef 93       	push	r30
    71e2:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    71e4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    71e8:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    71ea:	03 c0       	rjmp	.+6      	; 0x71f2 <__vector_126+0x3c>
    71ec:	3e da       	rcall	.-2948   	; 0x666a <udd_ctrl_interrupt_tc_setup>
    71ee:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    71f0:	c4 c0       	rjmp	.+392    	; 0x737a <__vector_126+0x1c4>
    71f2:	82 e0       	ldi	r24, 0x02	; 2
    71f4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    71f8:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    71fc:	81 95       	neg	r24
    71fe:	88 0f       	add	r24, r24
    7200:	e8 ed       	ldi	r30, 0xD8	; 216
    7202:	f7 e2       	ldi	r31, 0x27	; 39
    7204:	e8 1b       	sub	r30, r24
    7206:	f1 09       	sbc	r31, r1
    7208:	20 81       	ld	r18, Z
    720a:	31 81       	ldd	r19, Z+1	; 0x01
    720c:	28 5d       	subi	r18, 0xD8	; 216
    720e:	37 42       	sbci	r19, 0x27	; 39
    7210:	36 95       	lsr	r19
    7212:	27 95       	ror	r18
    7214:	36 95       	lsr	r19
    7216:	27 95       	ror	r18
    7218:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    721a:	27 95       	ror	r18
    721c:	82 2f       	mov	r24, r18
    721e:	86 95       	lsr	r24
    7220:	20 fd       	sbrc	r18, 0
    7222:	02 c0       	rjmp	.+4      	; 0x7228 <__vector_126+0x72>
    7224:	90 e0       	ldi	r25, 0x00	; 0
    7226:	01 c0       	rjmp	.+2      	; 0x722a <__vector_126+0x74>
    7228:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    722a:	89 0f       	add	r24, r25
    722c:	e8 2f       	mov	r30, r24
    722e:	ef 70       	andi	r30, 0x0F	; 15
    7230:	f0 e0       	ldi	r31, 0x00	; 0
    7232:	ee 0f       	add	r30, r30
    7234:	ff 1f       	adc	r31, r31
    7236:	28 2f       	mov	r18, r24
    7238:	08 2e       	mov	r0, r24
    723a:	00 0c       	add	r0, r0
    723c:	33 0b       	sbc	r19, r19
    723e:	22 27       	eor	r18, r18
    7240:	33 0f       	add	r19, r19
    7242:	22 1f       	adc	r18, r18
    7244:	33 27       	eor	r19, r19
    7246:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    7248:	f3 1f       	adc	r31, r19
    724a:	df 01       	movw	r26, r30
    724c:	aa 0f       	add	r26, r26
    724e:	bb 1f       	adc	r27, r27
    7250:	aa 0f       	add	r26, r26
    7252:	bb 1f       	adc	r27, r27
    7254:	aa 0f       	add	r26, r26
    7256:	bb 1f       	adc	r27, r27
    7258:	a4 53       	subi	r26, 0x34	; 52
    725a:	b8 4d       	sbci	r27, 0xD8	; 216
    725c:	1c 96       	adiw	r26, 0x0c	; 12
    725e:	9c 91       	ld	r25, X
    7260:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    7262:	8b c0       	rjmp	.+278    	; 0x737a <__vector_126+0x1c4>
    7264:	ee 0f       	add	r30, r30
    7266:	ff 1f       	adc	r31, r31
    7268:	ee 0f       	add	r30, r30
    726a:	ff 1f       	adc	r31, r31
    726c:	ee 0f       	add	r30, r30
    726e:	ff 1f       	adc	r31, r31
    7270:	e8 52       	subi	r30, 0x28	; 40
    7272:	f8 4d       	sbci	r31, 0xD8	; 216
    7274:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    7276:	06 93       	lac	Z, r16
    7278:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    727a:	7a c0       	rjmp	.+244    	; 0x7370 <__vector_126+0x1ba>
    727c:	80 91 cb 27 	lds	r24, 0x27CB	; 0x8027cb <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    7280:	84 30       	cpi	r24, 0x04	; 4
    7282:	19 f4       	brne	.+6      	; 0x728a <__vector_126+0xd4>
    7284:	3a d9       	rcall	.-3468   	; 0x64fa <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    7286:	f8 d8       	rcall	.-3600   	; 0x6478 <udd_ctrl_init>
    7288:	78 c0       	rjmp	.+240    	; 0x737a <__vector_126+0x1c4>
    728a:	00 91 da 27 	lds	r16, 0x27DA	; 0x8027da <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    728e:	10 91 db 27 	lds	r17, 0x27DB	; 0x8027db <udd_sram+0xf>
    7292:	80 91 d1 2a 	lds	r24, 0x2AD1	; 0x802ad1 <udd_g_ctrlreq+0xa>
    7296:	90 91 d2 2a 	lds	r25, 0x2AD2	; 0x802ad2 <udd_g_ctrlreq+0xb>
    729a:	c0 91 c7 27 	lds	r28, 0x27C7	; 0x8027c7 <udd_ctrl_payload_nb_trans>
    729e:	d0 91 c8 27 	lds	r29, 0x27C8	; 0x8027c8 <udd_ctrl_payload_nb_trans+0x1>
    72a2:	98 01       	movw	r18, r16
    72a4:	2c 0f       	add	r18, r28
    72a6:	3d 1f       	adc	r19, r29
    72a8:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    72aa:	93 07       	cpc	r25, r19
    72ac:	18 f4       	brcc	.+6      	; 0x72b4 <__vector_126+0xfe>
    72ae:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    72b0:	0c 1b       	sub	r16, r28
    72b2:	1d 0b       	sbc	r17, r29
    72b4:	80 91 cf 2a 	lds	r24, 0x2ACF	; 0x802acf <udd_g_ctrlreq+0x8>
    72b8:	90 91 d0 2a 	lds	r25, 0x2AD0	; 0x802ad0 <udd_g_ctrlreq+0x9>
    72bc:	a8 01       	movw	r20, r16
    72be:	67 e8       	ldi	r22, 0x87	; 135
    72c0:	77 e2       	ldi	r23, 0x27	; 39
    72c2:	8c 0f       	add	r24, r28
    72c4:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    72c6:	0e 94 24 54 	call	0xa848	; 0xa848 <memcpy>
    72ca:	c0 0f       	add	r28, r16
    72cc:	d1 1f       	adc	r29, r17
    72ce:	c0 93 c7 27 	sts	0x27C7, r28	; 0x8027c7 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    72d2:	d0 93 c8 27 	sts	0x27C8, r29	; 0x8027c8 <udd_ctrl_payload_nb_trans+0x1>
    72d6:	00 34       	cpi	r16, 0x40	; 64
    72d8:	11 05       	cpc	r17, r1
    72da:	69 f4       	brne	.+26     	; 0x72f6 <__vector_126+0x140>
    72dc:	80 91 c9 27 	lds	r24, 0x27C9	; 0x8027c9 <udd_ctrl_prev_payload_nb_trans>
    72e0:	90 91 ca 27 	lds	r25, 0x27CA	; 0x8027ca <udd_ctrl_prev_payload_nb_trans+0x1>
    72e4:	8c 0f       	add	r24, r28
    72e6:	9d 1f       	adc	r25, r29
    72e8:	20 91 cd 2a 	lds	r18, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    72ec:	30 91 ce 2a 	lds	r19, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    72f0:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    72f2:	93 07       	cpc	r25, r19
    72f4:	80 f0       	brcs	.+32     	; 0x7316 <__vector_126+0x160>
    72f6:	e7 ec       	ldi	r30, 0xC7	; 199
    72f8:	fa e2       	ldi	r31, 0x2A	; 42
		if (NULL != udd_g_ctrlreq.over_under_run) {
    72fa:	c2 87       	std	Z+10, r28	; 0x0a
    72fc:	d3 87       	std	Z+11, r29	; 0x0b
    72fe:	06 84       	ldd	r0, Z+14	; 0x0e
    7300:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    7302:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    7304:	30 97       	sbiw	r30, 0x00	; 0
    7306:	29 f0       	breq	.+10     	; 0x7312 <__vector_126+0x15c>
    7308:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    730a:	81 11       	cpse	r24, r1
    730c:	02 c0       	rjmp	.+4      	; 0x7312 <__vector_126+0x15c>
    730e:	d9 d8       	rcall	.-3662   	; 0x64c2 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    7310:	34 c0       	rjmp	.+104    	; 0x737a <__vector_126+0x1c4>
    7312:	e5 d8       	rcall	.-3638   	; 0x64de <udd_ctrl_send_zlp_in>
    7314:	32 c0       	rjmp	.+100    	; 0x737a <__vector_126+0x1c4>
    7316:	80 91 d1 2a 	lds	r24, 0x2AD1	; 0x802ad1 <udd_g_ctrlreq+0xa>
    731a:	90 91 d2 2a 	lds	r25, 0x2AD2	; 0x802ad2 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    731e:	c8 17       	cp	r28, r24
    7320:	d9 07       	cpc	r29, r25
    7322:	f9 f4       	brne	.+62     	; 0x7362 <__vector_126+0x1ac>
    7324:	e0 91 d5 2a 	lds	r30, 0x2AD5	; 0x802ad5 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    7328:	f0 91 d6 2a 	lds	r31, 0x2AD6	; 0x802ad6 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    732c:	30 97       	sbiw	r30, 0x00	; 0
    732e:	11 f4       	brne	.+4      	; 0x7334 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    7330:	c8 d8       	rcall	.-3696   	; 0x64c2 <udd_ctrl_stall_data>
    7332:	23 c0       	rjmp	.+70     	; 0x737a <__vector_126+0x1c4>
    7334:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    7336:	81 11       	cpse	r24, r1
    7338:	02 c0       	rjmp	.+4      	; 0x733e <__vector_126+0x188>
    733a:	c3 d8       	rcall	.-3706   	; 0x64c2 <udd_ctrl_stall_data>
    733c:	1e c0       	rjmp	.+60     	; 0x737a <__vector_126+0x1c4>
    733e:	20 91 c9 27 	lds	r18, 0x27C9	; 0x8027c9 <udd_ctrl_prev_payload_nb_trans>
    7342:	30 91 ca 27 	lds	r19, 0x27CA	; 0x8027ca <udd_ctrl_prev_payload_nb_trans+0x1>
    7346:	80 91 c7 27 	lds	r24, 0x27C7	; 0x8027c7 <udd_ctrl_payload_nb_trans>
    734a:	90 91 c8 27 	lds	r25, 0x27C8	; 0x8027c8 <udd_ctrl_payload_nb_trans+0x1>
    734e:	82 0f       	add	r24, r18
    7350:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    7352:	80 93 c9 27 	sts	0x27C9, r24	; 0x8027c9 <udd_ctrl_prev_payload_nb_trans>
    7356:	90 93 ca 27 	sts	0x27CA, r25	; 0x8027ca <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    735a:	10 92 c7 27 	sts	0x27C7, r1	; 0x8027c7 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    735e:	10 92 c8 27 	sts	0x27C8, r1	; 0x8027c8 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    7362:	e8 ed       	ldi	r30, 0xD8	; 216
    7364:	f7 e2       	ldi	r31, 0x27	; 39
		udd_ctrl_in_sent();
    7366:	02 e0       	ldi	r16, 0x02	; 2
    7368:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    736a:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    736c:	06 93       	lac	Z, r16
    736e:	05 c0       	rjmp	.+10     	; 0x737a <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    7370:	80 38       	cpi	r24, 0x80	; 128
    7372:	11 f4       	brne	.+4      	; 0x7378 <__vector_126+0x1c2>
    7374:	ca d8       	rcall	.-3692   	; 0x650a <udd_ctrl_in_sent>
    7376:	01 c0       	rjmp	.+2      	; 0x737a <__vector_126+0x1c4>
    7378:	ea d9       	rcall	.-3116   	; 0x674e <udd_ep_trans_complet>
    737a:	ff 91       	pop	r31
    737c:	ef 91       	pop	r30
    737e:	df 91       	pop	r29
    7380:	cf 91       	pop	r28
    7382:	bf 91       	pop	r27
    7384:	af 91       	pop	r26
    7386:	9f 91       	pop	r25
    7388:	8f 91       	pop	r24
    738a:	7f 91       	pop	r23
    738c:	6f 91       	pop	r22
    738e:	5f 91       	pop	r21
    7390:	4f 91       	pop	r20
    7392:	3f 91       	pop	r19
    7394:	2f 91       	pop	r18
    7396:	1f 91       	pop	r17
    7398:	0f 91       	pop	r16
    739a:	0f 90       	pop	r0
    739c:	0b be       	out	0x3b, r0	; 59
    739e:	0f 90       	pop	r0
    73a0:	0f be       	out	0x3f, r0	; 63
    73a2:	0f 90       	pop	r0
    73a4:	1f 90       	pop	r1
    73a6:	18 95       	reti

000073a8 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    73a8:	cf 92       	push	r12
    73aa:	df 92       	push	r13
    73ac:	ef 92       	push	r14
    73ae:	ff 92       	push	r15
    73b0:	cf 93       	push	r28
    73b2:	df 93       	push	r29
    73b4:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    73b6:	6b 01       	movw	r12, r22
    73b8:	e1 2c       	mov	r14, r1
    73ba:	f1 2c       	mov	r15, r1
    73bc:	60 e8       	ldi	r22, 0x80	; 128
    73be:	73 ec       	ldi	r23, 0xC3	; 195
    73c0:	89 ec       	ldi	r24, 0xC9	; 201
    73c2:	91 e0       	ldi	r25, 0x01	; 1
    73c4:	a7 01       	movw	r20, r14
    73c6:	96 01       	movw	r18, r12
    73c8:	0e 94 30 51 	call	0xa260	; 0xa260 <__udivmodsi4>
    73cc:	ca 01       	movw	r24, r20
    73ce:	b9 01       	movw	r22, r18
    73d0:	2f ef       	ldi	r18, 0xFF	; 255
    73d2:	3f ef       	ldi	r19, 0xFF	; 255
    73d4:	40 e0       	ldi	r20, 0x00	; 0
    73d6:	50 e0       	ldi	r21, 0x00	; 0
    73d8:	0e 94 30 51 	call	0xa260	; 0xa260 <__udivmodsi4>
	if (smallest_div < 1) {
    73dc:	21 15       	cp	r18, r1
    73de:	31 05       	cpc	r19, r1
    73e0:	29 f4       	brne	.+10     	; 0x73ec <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    73e2:	81 e0       	ldi	r24, 0x01	; 1
    73e4:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    73e6:	21 e0       	ldi	r18, 0x01	; 1
    73e8:	30 e0       	ldi	r19, 0x00	; 0
    73ea:	2d c0       	rjmp	.+90     	; 0x7446 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    73ec:	22 30       	cpi	r18, 0x02	; 2
    73ee:	31 05       	cpc	r19, r1
    73f0:	28 f4       	brcc	.+10     	; 0x73fc <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    73f2:	82 e0       	ldi	r24, 0x02	; 2
    73f4:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    73f6:	22 e0       	ldi	r18, 0x02	; 2
    73f8:	30 e0       	ldi	r19, 0x00	; 0
    73fa:	25 c0       	rjmp	.+74     	; 0x7446 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    73fc:	24 30       	cpi	r18, 0x04	; 4
    73fe:	31 05       	cpc	r19, r1
    7400:	28 f4       	brcc	.+10     	; 0x740c <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    7402:	83 e0       	ldi	r24, 0x03	; 3
    7404:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    7406:	24 e0       	ldi	r18, 0x04	; 4
    7408:	30 e0       	ldi	r19, 0x00	; 0
    740a:	1d c0       	rjmp	.+58     	; 0x7446 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    740c:	28 30       	cpi	r18, 0x08	; 8
    740e:	31 05       	cpc	r19, r1
    7410:	28 f4       	brcc	.+10     	; 0x741c <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    7412:	84 e0       	ldi	r24, 0x04	; 4
    7414:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    7416:	28 e0       	ldi	r18, 0x08	; 8
    7418:	30 e0       	ldi	r19, 0x00	; 0
    741a:	15 c0       	rjmp	.+42     	; 0x7446 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    741c:	20 34       	cpi	r18, 0x40	; 64
    741e:	31 05       	cpc	r19, r1
    7420:	28 f4       	brcc	.+10     	; 0x742c <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    7422:	85 e0       	ldi	r24, 0x05	; 5
    7424:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    7426:	20 e4       	ldi	r18, 0x40	; 64
    7428:	30 e0       	ldi	r19, 0x00	; 0
    742a:	0d c0       	rjmp	.+26     	; 0x7446 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    742c:	2f 3f       	cpi	r18, 0xFF	; 255
    742e:	31 05       	cpc	r19, r1
    7430:	09 f0       	breq	.+2      	; 0x7434 <pwm_set_frequency+0x8c>
    7432:	28 f4       	brcc	.+10     	; 0x743e <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    7434:	86 e0       	ldi	r24, 0x06	; 6
    7436:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    7438:	20 e0       	ldi	r18, 0x00	; 0
    743a:	31 e0       	ldi	r19, 0x01	; 1
    743c:	04 c0       	rjmp	.+8      	; 0x7446 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    743e:	87 e0       	ldi	r24, 0x07	; 7
    7440:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    7442:	20 e0       	ldi	r18, 0x00	; 0
    7444:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    7446:	40 e0       	ldi	r20, 0x00	; 0
    7448:	50 e0       	ldi	r21, 0x00	; 0
    744a:	60 e8       	ldi	r22, 0x80	; 128
    744c:	73 ec       	ldi	r23, 0xC3	; 195
    744e:	89 ec       	ldi	r24, 0xC9	; 201
    7450:	91 e0       	ldi	r25, 0x01	; 1
    7452:	0e 94 30 51 	call	0xa260	; 0xa260 <__udivmodsi4>
    7456:	ca 01       	movw	r24, r20
    7458:	b9 01       	movw	r22, r18
    745a:	a7 01       	movw	r20, r14
    745c:	96 01       	movw	r18, r12
    745e:	0e 94 30 51 	call	0xa260	; 0xa260 <__udivmodsi4>
    7462:	2d 83       	std	Y+5, r18	; 0x05
    7464:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    7466:	24 36       	cpi	r18, 0x64	; 100
    7468:	31 05       	cpc	r19, r1
    746a:	18 f4       	brcc	.+6      	; 0x7472 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    746c:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    746e:	1d 82       	std	Y+5, r1	; 0x05
    7470:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    7472:	df 91       	pop	r29
    7474:	cf 91       	pop	r28
    7476:	ff 90       	pop	r15
    7478:	ef 90       	pop	r14
    747a:	df 90       	pop	r13
    747c:	cf 90       	pop	r12
    747e:	08 95       	ret

00007480 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    7480:	0f 93       	push	r16
    7482:	1f 93       	push	r17
    7484:	cf 93       	push	r28
    7486:	df 93       	push	r29
    7488:	ec 01       	movw	r28, r24
    748a:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    748c:	86 2f       	mov	r24, r22
    748e:	90 e0       	ldi	r25, 0x00	; 0
    7490:	87 30       	cpi	r24, 0x07	; 7
    7492:	91 05       	cpc	r25, r1
    7494:	08 f0       	brcs	.+2      	; 0x7498 <pwm_init+0x18>
    7496:	8b c0       	rjmp	.+278    	; 0x75ae <pwm_init+0x12e>
    7498:	fc 01       	movw	r30, r24
    749a:	88 27       	eor	r24, r24
    749c:	eb 5f       	subi	r30, 0xFB	; 251
    749e:	fe 4f       	sbci	r31, 0xFE	; 254
    74a0:	8f 4f       	sbci	r24, 0xFF	; 255
    74a2:	0c 94 6e 51 	jmp	0xa2dc	; 0xa2dc <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    74a6:	80 e0       	ldi	r24, 0x00	; 0
    74a8:	98 e0       	ldi	r25, 0x08	; 8
    74aa:	88 83       	st	Y, r24
    74ac:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    74ae:	e0 e4       	ldi	r30, 0x40	; 64
    74b0:	f6 e0       	ldi	r31, 0x06	; 6
    74b2:	30 81       	ld	r19, Z
    74b4:	81 e0       	ldi	r24, 0x01	; 1
    74b6:	90 e0       	ldi	r25, 0x00	; 0
    74b8:	2f ef       	ldi	r18, 0xFF	; 255
    74ba:	24 0f       	add	r18, r20
    74bc:	02 c0       	rjmp	.+4      	; 0x74c2 <pwm_init+0x42>
    74be:	88 0f       	add	r24, r24
    74c0:	99 1f       	adc	r25, r25
    74c2:	2a 95       	dec	r18
    74c4:	e2 f7       	brpl	.-8      	; 0x74be <pwm_init+0x3e>
    74c6:	83 2b       	or	r24, r19
    74c8:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    74ca:	71 c0       	rjmp	.+226    	; 0x75ae <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    74cc:	80 e4       	ldi	r24, 0x40	; 64
    74ce:	98 e0       	ldi	r25, 0x08	; 8
    74d0:	88 83       	st	Y, r24
    74d2:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    74d4:	e0 e4       	ldi	r30, 0x40	; 64
    74d6:	f6 e0       	ldi	r31, 0x06	; 6
    74d8:	30 81       	ld	r19, Z
    74da:	81 e0       	ldi	r24, 0x01	; 1
    74dc:	90 e0       	ldi	r25, 0x00	; 0
    74de:	23 e0       	ldi	r18, 0x03	; 3
    74e0:	24 0f       	add	r18, r20
    74e2:	02 c0       	rjmp	.+4      	; 0x74e8 <pwm_init+0x68>
    74e4:	88 0f       	add	r24, r24
    74e6:	99 1f       	adc	r25, r25
    74e8:	2a 95       	dec	r18
    74ea:	e2 f7       	brpl	.-8      	; 0x74e4 <pwm_init+0x64>
    74ec:	83 2b       	or	r24, r19
    74ee:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    74f0:	5e c0       	rjmp	.+188    	; 0x75ae <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    74f2:	80 e0       	ldi	r24, 0x00	; 0
    74f4:	99 e0       	ldi	r25, 0x09	; 9
    74f6:	88 83       	st	Y, r24
    74f8:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    74fa:	e0 e6       	ldi	r30, 0x60	; 96
    74fc:	f6 e0       	ldi	r31, 0x06	; 6
    74fe:	30 81       	ld	r19, Z
    7500:	81 e0       	ldi	r24, 0x01	; 1
    7502:	90 e0       	ldi	r25, 0x00	; 0
    7504:	2f ef       	ldi	r18, 0xFF	; 255
    7506:	24 0f       	add	r18, r20
    7508:	02 c0       	rjmp	.+4      	; 0x750e <pwm_init+0x8e>
    750a:	88 0f       	add	r24, r24
    750c:	99 1f       	adc	r25, r25
    750e:	2a 95       	dec	r18
    7510:	e2 f7       	brpl	.-8      	; 0x750a <pwm_init+0x8a>
    7512:	83 2b       	or	r24, r19
    7514:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    7516:	4b c0       	rjmp	.+150    	; 0x75ae <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    7518:	80 e4       	ldi	r24, 0x40	; 64
    751a:	99 e0       	ldi	r25, 0x09	; 9
    751c:	88 83       	st	Y, r24
    751e:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    7520:	e0 e6       	ldi	r30, 0x60	; 96
    7522:	f6 e0       	ldi	r31, 0x06	; 6
    7524:	30 81       	ld	r19, Z
    7526:	81 e0       	ldi	r24, 0x01	; 1
    7528:	90 e0       	ldi	r25, 0x00	; 0
    752a:	23 e0       	ldi	r18, 0x03	; 3
    752c:	24 0f       	add	r18, r20
    752e:	02 c0       	rjmp	.+4      	; 0x7534 <pwm_init+0xb4>
    7530:	88 0f       	add	r24, r24
    7532:	99 1f       	adc	r25, r25
    7534:	2a 95       	dec	r18
    7536:	e2 f7       	brpl	.-8      	; 0x7530 <pwm_init+0xb0>
    7538:	83 2b       	or	r24, r19
    753a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    753c:	38 c0       	rjmp	.+112    	; 0x75ae <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    753e:	80 e0       	ldi	r24, 0x00	; 0
    7540:	9a e0       	ldi	r25, 0x0A	; 10
    7542:	88 83       	st	Y, r24
    7544:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    7546:	e0 e8       	ldi	r30, 0x80	; 128
    7548:	f6 e0       	ldi	r31, 0x06	; 6
    754a:	30 81       	ld	r19, Z
    754c:	81 e0       	ldi	r24, 0x01	; 1
    754e:	90 e0       	ldi	r25, 0x00	; 0
    7550:	2f ef       	ldi	r18, 0xFF	; 255
    7552:	24 0f       	add	r18, r20
    7554:	02 c0       	rjmp	.+4      	; 0x755a <pwm_init+0xda>
    7556:	88 0f       	add	r24, r24
    7558:	99 1f       	adc	r25, r25
    755a:	2a 95       	dec	r18
    755c:	e2 f7       	brpl	.-8      	; 0x7556 <pwm_init+0xd6>
    755e:	83 2b       	or	r24, r19
    7560:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    7562:	25 c0       	rjmp	.+74     	; 0x75ae <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    7564:	80 e4       	ldi	r24, 0x40	; 64
    7566:	9a e0       	ldi	r25, 0x0A	; 10
    7568:	88 83       	st	Y, r24
    756a:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    756c:	e0 e8       	ldi	r30, 0x80	; 128
    756e:	f6 e0       	ldi	r31, 0x06	; 6
    7570:	30 81       	ld	r19, Z
    7572:	81 e0       	ldi	r24, 0x01	; 1
    7574:	90 e0       	ldi	r25, 0x00	; 0
    7576:	23 e0       	ldi	r18, 0x03	; 3
    7578:	24 0f       	add	r18, r20
    757a:	02 c0       	rjmp	.+4      	; 0x7580 <pwm_init+0x100>
    757c:	88 0f       	add	r24, r24
    757e:	99 1f       	adc	r25, r25
    7580:	2a 95       	dec	r18
    7582:	e2 f7       	brpl	.-8      	; 0x757c <pwm_init+0xfc>
    7584:	83 2b       	or	r24, r19
    7586:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    7588:	12 c0       	rjmp	.+36     	; 0x75ae <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    758a:	80 e0       	ldi	r24, 0x00	; 0
    758c:	9b e0       	ldi	r25, 0x0B	; 11
    758e:	88 83       	st	Y, r24
    7590:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    7592:	e0 ea       	ldi	r30, 0xA0	; 160
    7594:	f6 e0       	ldi	r31, 0x06	; 6
    7596:	30 81       	ld	r19, Z
    7598:	81 e0       	ldi	r24, 0x01	; 1
    759a:	90 e0       	ldi	r25, 0x00	; 0
    759c:	2f ef       	ldi	r18, 0xFF	; 255
    759e:	24 0f       	add	r18, r20
    75a0:	02 c0       	rjmp	.+4      	; 0x75a6 <pwm_init+0x126>
    75a2:	88 0f       	add	r24, r24
    75a4:	99 1f       	adc	r25, r25
    75a6:	2a 95       	dec	r18
    75a8:	e2 f7       	brpl	.-8      	; 0x75a2 <pwm_init+0x122>
    75aa:	83 2b       	or	r24, r19
    75ac:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    75ae:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    75b0:	42 30       	cpi	r20, 0x02	; 2
    75b2:	61 f0       	breq	.+24     	; 0x75cc <pwm_init+0x14c>
    75b4:	18 f4       	brcc	.+6      	; 0x75bc <pwm_init+0x13c>
    75b6:	41 30       	cpi	r20, 0x01	; 1
    75b8:	31 f0       	breq	.+12     	; 0x75c6 <pwm_init+0x146>
    75ba:	10 c0       	rjmp	.+32     	; 0x75dc <pwm_init+0x15c>
    75bc:	43 30       	cpi	r20, 0x03	; 3
    75be:	49 f0       	breq	.+18     	; 0x75d2 <pwm_init+0x152>
    75c0:	44 30       	cpi	r20, 0x04	; 4
    75c2:	51 f0       	breq	.+20     	; 0x75d8 <pwm_init+0x158>
    75c4:	0b c0       	rjmp	.+22     	; 0x75dc <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    75c6:	80 e1       	ldi	r24, 0x10	; 16
    75c8:	8b 83       	std	Y+3, r24	; 0x03
		break;
    75ca:	08 c0       	rjmp	.+16     	; 0x75dc <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    75cc:	80 e2       	ldi	r24, 0x20	; 32
    75ce:	8b 83       	std	Y+3, r24	; 0x03
		break;
    75d0:	05 c0       	rjmp	.+10     	; 0x75dc <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    75d2:	80 e4       	ldi	r24, 0x40	; 64
    75d4:	8b 83       	std	Y+3, r24	; 0x03
		break;
    75d6:	02 c0       	rjmp	.+4      	; 0x75dc <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    75d8:	80 e8       	ldi	r24, 0x80	; 128
    75da:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    75dc:	88 81       	ld	r24, Y
    75de:	99 81       	ldd	r25, Y+1	; 0x01
    75e0:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    75e4:	e8 81       	ld	r30, Y
    75e6:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    75e8:	81 81       	ldd	r24, Z+1	; 0x01
    75ea:	88 7f       	andi	r24, 0xF8	; 248
    75ec:	83 60       	ori	r24, 0x03	; 3
    75ee:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    75f0:	1d 82       	std	Y+5, r1	; 0x05
    75f2:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    75f4:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    75f6:	e8 81       	ld	r30, Y
    75f8:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    75fa:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    75fc:	80 7f       	andi	r24, 0xF0	; 240
    75fe:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    7600:	b8 01       	movw	r22, r16
    7602:	ce 01       	movw	r24, r28
    7604:	d1 de       	rcall	.-606    	; 0x73a8 <pwm_set_frequency>
}
    7606:	df 91       	pop	r29
    7608:	cf 91       	pop	r28
    760a:	1f 91       	pop	r17
    760c:	0f 91       	pop	r16
    760e:	08 95       	ret

00007610 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    7610:	cf 93       	push	r28
    7612:	df 93       	push	r29
    7614:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    7616:	2d 81       	ldd	r18, Y+5	; 0x05
    7618:	3e 81       	ldd	r19, Y+6	; 0x06
    761a:	a6 2f       	mov	r26, r22
    761c:	b0 e0       	ldi	r27, 0x00	; 0
    761e:	0e 94 76 51 	call	0xa2ec	; 0xa2ec <__umulhisi3>
    7622:	24 e6       	ldi	r18, 0x64	; 100
    7624:	30 e0       	ldi	r19, 0x00	; 0
    7626:	40 e0       	ldi	r20, 0x00	; 0
    7628:	50 e0       	ldi	r21, 0x00	; 0
    762a:	0e 94 30 51 	call	0xa260	; 0xa260 <__udivmodsi4>
    762e:	8a 81       	ldd	r24, Y+2	; 0x02
    7630:	e8 81       	ld	r30, Y
    7632:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    7634:	e6 fd       	sbrc	r30, 6
    7636:	17 c0       	rjmp	.+46     	; 0x7666 <pwm_start+0x56>
		switch (channel_index) {
    7638:	82 30       	cpi	r24, 0x02	; 2
    763a:	61 f0       	breq	.+24     	; 0x7654 <pwm_start+0x44>
    763c:	18 f4       	brcc	.+6      	; 0x7644 <pwm_start+0x34>
    763e:	81 30       	cpi	r24, 0x01	; 1
    7640:	31 f0       	breq	.+12     	; 0x764e <pwm_start+0x3e>
    7642:	1b c0       	rjmp	.+54     	; 0x767a <pwm_start+0x6a>
    7644:	83 30       	cpi	r24, 0x03	; 3
    7646:	49 f0       	breq	.+18     	; 0x765a <pwm_start+0x4a>
    7648:	84 30       	cpi	r24, 0x04	; 4
    764a:	51 f0       	breq	.+20     	; 0x7660 <pwm_start+0x50>
    764c:	16 c0       	rjmp	.+44     	; 0x767a <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    764e:	20 af       	std	Z+56, r18	; 0x38
    7650:	31 af       	std	Z+57, r19	; 0x39
    7652:	13 c0       	rjmp	.+38     	; 0x767a <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    7654:	22 af       	std	Z+58, r18	; 0x3a
    7656:	33 af       	std	Z+59, r19	; 0x3b
    7658:	10 c0       	rjmp	.+32     	; 0x767a <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    765a:	24 af       	std	Z+60, r18	; 0x3c
    765c:	35 af       	std	Z+61, r19	; 0x3d
    765e:	0d c0       	rjmp	.+26     	; 0x767a <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    7660:	26 af       	std	Z+62, r18	; 0x3e
    7662:	37 af       	std	Z+63, r19	; 0x3f
    7664:	0a c0       	rjmp	.+20     	; 0x767a <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    7666:	81 30       	cpi	r24, 0x01	; 1
    7668:	19 f0       	breq	.+6      	; 0x7670 <pwm_start+0x60>
    766a:	82 30       	cpi	r24, 0x02	; 2
    766c:	21 f0       	breq	.+8      	; 0x7676 <pwm_start+0x66>
    766e:	05 c0       	rjmp	.+10     	; 0x767a <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    7670:	20 af       	std	Z+56, r18	; 0x38
    7672:	31 af       	std	Z+57, r19	; 0x39
    7674:	02 c0       	rjmp	.+4      	; 0x767a <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    7676:	22 af       	std	Z+58, r18	; 0x3a
    7678:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    767a:	8d 81       	ldd	r24, Y+5	; 0x05
    767c:	9e 81       	ldd	r25, Y+6	; 0x06
    767e:	e8 81       	ld	r30, Y
    7680:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    7682:	86 a3       	std	Z+38, r24	; 0x26
    7684:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    7686:	8b 81       	ldd	r24, Y+3	; 0x03
    7688:	e8 81       	ld	r30, Y
    768a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    768c:	e6 fd       	sbrc	r30, 6
    768e:	04 c0       	rjmp	.+8      	; 0x7698 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    7690:	91 81       	ldd	r25, Z+1	; 0x01
    7692:	89 2b       	or	r24, r25
    7694:	81 83       	std	Z+1, r24	; 0x01
    7696:	04 c0       	rjmp	.+8      	; 0x76a0 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    7698:	91 81       	ldd	r25, Z+1	; 0x01
    769a:	80 73       	andi	r24, 0x30	; 48
    769c:	89 2b       	or	r24, r25
    769e:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    76a0:	e8 81       	ld	r30, Y
    76a2:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    76a4:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    76a6:	80 7f       	andi	r24, 0xF0	; 240
    76a8:	9c 81       	ldd	r25, Y+4	; 0x04
    76aa:	89 2b       	or	r24, r25
    76ac:	80 83       	st	Z, r24
}
    76ae:	df 91       	pop	r29
    76b0:	cf 91       	pop	r28
    76b2:	08 95       	ret

000076b4 <__portable_avr_delay_cycles>:
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    76b4:	04 c0       	rjmp	.+8      	; 0x76be <__portable_avr_delay_cycles+0xa>
    76b6:	61 50       	subi	r22, 0x01	; 1
    76b8:	71 09       	sbc	r23, r1
    76ba:	81 09       	sbc	r24, r1
    76bc:	91 09       	sbc	r25, r1
    76be:	61 15       	cp	r22, r1
    76c0:	71 05       	cpc	r23, r1
    76c2:	81 05       	cpc	r24, r1
    76c4:	91 05       	cpc	r25, r1
    76c6:	b9 f7       	brne	.-18     	; 0x76b6 <__portable_avr_delay_cycles+0x2>
    76c8:	08 95       	ret

000076ca <isr_rtc_alarm>:
    76ca:	10 92 7b 29 	sts	0x297B, r1	; 0x80297b <g_rtc_alarm>
    76ce:	10 92 7c 29 	sts	0x297C, r1	; 0x80297c <g_rtc_alarm+0x1>
    76d2:	10 92 7d 29 	sts	0x297D, r1	; 0x80297d <g_rtc_alarm+0x2>
    76d6:	10 92 7e 29 	sts	0x297E, r1	; 0x80297e <g_rtc_alarm+0x3>
    76da:	08 95       	ret

000076dc <isr_adc_a>:
    76dc:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    76e0:	4e 5b       	subi	r20, 0xBE	; 190
    76e2:	51 09       	sbc	r21, r1
    76e4:	60 ff       	sbrs	r22, 0
    76e6:	ba c0       	rjmp	.+372    	; 0x785c <isr_adc_a+0x180>
    76e8:	82 95       	swap	r24
    76ea:	8f 70       	andi	r24, 0x0F	; 15
    76ec:	81 30       	cpi	r24, 0x01	; 1
    76ee:	29 f0       	breq	.+10     	; 0x76fa <isr_adc_a+0x1e>
    76f0:	08 f4       	brcc	.+2      	; 0x76f4 <isr_adc_a+0x18>
    76f2:	79 c0       	rjmp	.+242    	; 0x77e6 <isr_adc_a+0x10a>
    76f4:	82 30       	cpi	r24, 0x02	; 2
    76f6:	e1 f1       	breq	.+120    	; 0x7770 <isr_adc_a+0x94>
    76f8:	08 95       	ret
    76fa:	05 2e       	mov	r0, r21
    76fc:	00 0c       	add	r0, r0
    76fe:	66 0b       	sbc	r22, r22
    7700:	77 0b       	sbc	r23, r23
    7702:	80 91 e7 28 	lds	r24, 0x28E7	; 0x8028e7 <g_adc_vctcxo_sum>
    7706:	90 91 e8 28 	lds	r25, 0x28E8	; 0x8028e8 <g_adc_vctcxo_sum+0x1>
    770a:	a0 91 e9 28 	lds	r26, 0x28E9	; 0x8028e9 <g_adc_vctcxo_sum+0x2>
    770e:	b0 91 ea 28 	lds	r27, 0x28EA	; 0x8028ea <g_adc_vctcxo_sum+0x3>
    7712:	48 0f       	add	r20, r24
    7714:	59 1f       	adc	r21, r25
    7716:	6a 1f       	adc	r22, r26
    7718:	7b 1f       	adc	r23, r27
    771a:	40 93 e7 28 	sts	0x28E7, r20	; 0x8028e7 <g_adc_vctcxo_sum>
    771e:	50 93 e8 28 	sts	0x28E8, r21	; 0x8028e8 <g_adc_vctcxo_sum+0x1>
    7722:	60 93 e9 28 	sts	0x28E9, r22	; 0x8028e9 <g_adc_vctcxo_sum+0x2>
    7726:	70 93 ea 28 	sts	0x28EA, r23	; 0x8028ea <g_adc_vctcxo_sum+0x3>
    772a:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <g_adc_vctcxo_cnt>
    772e:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <g_adc_vctcxo_cnt+0x1>
    7732:	01 96       	adiw	r24, 0x01	; 1
    7734:	80 93 e5 28 	sts	0x28E5, r24	; 0x8028e5 <g_adc_vctcxo_cnt>
    7738:	90 93 e6 28 	sts	0x28E6, r25	; 0x8028e6 <g_adc_vctcxo_cnt+0x1>
    773c:	8f 3f       	cpi	r24, 0xFF	; 255
    773e:	91 05       	cpc	r25, r1
    7740:	09 f0       	breq	.+2      	; 0x7744 <isr_adc_a+0x68>
    7742:	08 f4       	brcc	.+2      	; 0x7746 <isr_adc_a+0x6a>
    7744:	40 c1       	rjmp	.+640    	; 0x79c6 <isr_adc_a+0x2ea>
    7746:	40 93 eb 28 	sts	0x28EB, r20	; 0x8028eb <g_adc_vctcxo_cur>
    774a:	50 93 ec 28 	sts	0x28EC, r21	; 0x8028ec <g_adc_vctcxo_cur+0x1>
    774e:	60 93 ed 28 	sts	0x28ED, r22	; 0x8028ed <g_adc_vctcxo_cur+0x2>
    7752:	70 93 ee 28 	sts	0x28EE, r23	; 0x8028ee <g_adc_vctcxo_cur+0x3>
    7756:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <g_adc_vctcxo_cnt>
    775a:	10 92 e6 28 	sts	0x28E6, r1	; 0x8028e6 <g_adc_vctcxo_cnt+0x1>
    775e:	10 92 e7 28 	sts	0x28E7, r1	; 0x8028e7 <g_adc_vctcxo_sum>
    7762:	10 92 e8 28 	sts	0x28E8, r1	; 0x8028e8 <g_adc_vctcxo_sum+0x1>
    7766:	10 92 e9 28 	sts	0x28E9, r1	; 0x8028e9 <g_adc_vctcxo_sum+0x2>
    776a:	10 92 ea 28 	sts	0x28EA, r1	; 0x8028ea <g_adc_vctcxo_sum+0x3>
    776e:	08 95       	ret
    7770:	05 2e       	mov	r0, r21
    7772:	00 0c       	add	r0, r0
    7774:	66 0b       	sbc	r22, r22
    7776:	77 0b       	sbc	r23, r23
    7778:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <g_adc_5v0_sum>
    777c:	90 91 de 28 	lds	r25, 0x28DE	; 0x8028de <g_adc_5v0_sum+0x1>
    7780:	a0 91 df 28 	lds	r26, 0x28DF	; 0x8028df <g_adc_5v0_sum+0x2>
    7784:	b0 91 e0 28 	lds	r27, 0x28E0	; 0x8028e0 <g_adc_5v0_sum+0x3>
    7788:	48 0f       	add	r20, r24
    778a:	59 1f       	adc	r21, r25
    778c:	6a 1f       	adc	r22, r26
    778e:	7b 1f       	adc	r23, r27
    7790:	40 93 dd 28 	sts	0x28DD, r20	; 0x8028dd <g_adc_5v0_sum>
    7794:	50 93 de 28 	sts	0x28DE, r21	; 0x8028de <g_adc_5v0_sum+0x1>
    7798:	60 93 df 28 	sts	0x28DF, r22	; 0x8028df <g_adc_5v0_sum+0x2>
    779c:	70 93 e0 28 	sts	0x28E0, r23	; 0x8028e0 <g_adc_5v0_sum+0x3>
    77a0:	80 91 db 28 	lds	r24, 0x28DB	; 0x8028db <g_adc_5v0_cnt>
    77a4:	90 91 dc 28 	lds	r25, 0x28DC	; 0x8028dc <g_adc_5v0_cnt+0x1>
    77a8:	01 96       	adiw	r24, 0x01	; 1
    77aa:	80 93 db 28 	sts	0x28DB, r24	; 0x8028db <g_adc_5v0_cnt>
    77ae:	90 93 dc 28 	sts	0x28DC, r25	; 0x8028dc <g_adc_5v0_cnt+0x1>
    77b2:	8f 3f       	cpi	r24, 0xFF	; 255
    77b4:	91 05       	cpc	r25, r1
    77b6:	09 f0       	breq	.+2      	; 0x77ba <isr_adc_a+0xde>
    77b8:	08 f4       	brcc	.+2      	; 0x77bc <isr_adc_a+0xe0>
    77ba:	05 c1       	rjmp	.+522    	; 0x79c6 <isr_adc_a+0x2ea>
    77bc:	40 93 e1 28 	sts	0x28E1, r20	; 0x8028e1 <g_adc_5v0_cur>
    77c0:	50 93 e2 28 	sts	0x28E2, r21	; 0x8028e2 <g_adc_5v0_cur+0x1>
    77c4:	60 93 e3 28 	sts	0x28E3, r22	; 0x8028e3 <g_adc_5v0_cur+0x2>
    77c8:	70 93 e4 28 	sts	0x28E4, r23	; 0x8028e4 <g_adc_5v0_cur+0x3>
    77cc:	10 92 db 28 	sts	0x28DB, r1	; 0x8028db <g_adc_5v0_cnt>
    77d0:	10 92 dc 28 	sts	0x28DC, r1	; 0x8028dc <g_adc_5v0_cnt+0x1>
    77d4:	10 92 dd 28 	sts	0x28DD, r1	; 0x8028dd <g_adc_5v0_sum>
    77d8:	10 92 de 28 	sts	0x28DE, r1	; 0x8028de <g_adc_5v0_sum+0x1>
    77dc:	10 92 df 28 	sts	0x28DF, r1	; 0x8028df <g_adc_5v0_sum+0x2>
    77e0:	10 92 e0 28 	sts	0x28E0, r1	; 0x8028e0 <g_adc_5v0_sum+0x3>
    77e4:	08 95       	ret
    77e6:	05 2e       	mov	r0, r21
    77e8:	00 0c       	add	r0, r0
    77ea:	66 0b       	sbc	r22, r22
    77ec:	77 0b       	sbc	r23, r23
    77ee:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <g_adc_vbat_sum>
    77f2:	90 91 d4 28 	lds	r25, 0x28D4	; 0x8028d4 <g_adc_vbat_sum+0x1>
    77f6:	a0 91 d5 28 	lds	r26, 0x28D5	; 0x8028d5 <g_adc_vbat_sum+0x2>
    77fa:	b0 91 d6 28 	lds	r27, 0x28D6	; 0x8028d6 <g_adc_vbat_sum+0x3>
    77fe:	48 0f       	add	r20, r24
    7800:	59 1f       	adc	r21, r25
    7802:	6a 1f       	adc	r22, r26
    7804:	7b 1f       	adc	r23, r27
    7806:	40 93 d3 28 	sts	0x28D3, r20	; 0x8028d3 <g_adc_vbat_sum>
    780a:	50 93 d4 28 	sts	0x28D4, r21	; 0x8028d4 <g_adc_vbat_sum+0x1>
    780e:	60 93 d5 28 	sts	0x28D5, r22	; 0x8028d5 <g_adc_vbat_sum+0x2>
    7812:	70 93 d6 28 	sts	0x28D6, r23	; 0x8028d6 <g_adc_vbat_sum+0x3>
    7816:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <g_adc_vbat_cnt>
    781a:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <g_adc_vbat_cnt+0x1>
    781e:	01 96       	adiw	r24, 0x01	; 1
    7820:	80 93 d1 28 	sts	0x28D1, r24	; 0x8028d1 <g_adc_vbat_cnt>
    7824:	90 93 d2 28 	sts	0x28D2, r25	; 0x8028d2 <g_adc_vbat_cnt+0x1>
    7828:	8f 3f       	cpi	r24, 0xFF	; 255
    782a:	91 05       	cpc	r25, r1
    782c:	09 f0       	breq	.+2      	; 0x7830 <isr_adc_a+0x154>
    782e:	08 f4       	brcc	.+2      	; 0x7832 <isr_adc_a+0x156>
    7830:	ca c0       	rjmp	.+404    	; 0x79c6 <isr_adc_a+0x2ea>
    7832:	40 93 d7 28 	sts	0x28D7, r20	; 0x8028d7 <g_adc_vbat_cur>
    7836:	50 93 d8 28 	sts	0x28D8, r21	; 0x8028d8 <g_adc_vbat_cur+0x1>
    783a:	60 93 d9 28 	sts	0x28D9, r22	; 0x8028d9 <g_adc_vbat_cur+0x2>
    783e:	70 93 da 28 	sts	0x28DA, r23	; 0x8028da <g_adc_vbat_cur+0x3>
    7842:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <g_adc_vbat_cnt>
    7846:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <g_adc_vbat_cnt+0x1>
    784a:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <g_adc_vbat_sum>
    784e:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <g_adc_vbat_sum+0x1>
    7852:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <g_adc_vbat_sum+0x2>
    7856:	10 92 d6 28 	sts	0x28D6, r1	; 0x8028d6 <g_adc_vbat_sum+0x3>
    785a:	08 95       	ret
    785c:	61 ff       	sbrs	r22, 1
    785e:	3b c0       	rjmp	.+118    	; 0x78d6 <isr_adc_a+0x1fa>
    7860:	05 2e       	mov	r0, r21
    7862:	00 0c       	add	r0, r0
    7864:	66 0b       	sbc	r22, r22
    7866:	77 0b       	sbc	r23, r23
    7868:	80 91 c9 28 	lds	r24, 0x28C9	; 0x8028c9 <g_adc_io_adc4_sum>
    786c:	90 91 ca 28 	lds	r25, 0x28CA	; 0x8028ca <g_adc_io_adc4_sum+0x1>
    7870:	a0 91 cb 28 	lds	r26, 0x28CB	; 0x8028cb <g_adc_io_adc4_sum+0x2>
    7874:	b0 91 cc 28 	lds	r27, 0x28CC	; 0x8028cc <g_adc_io_adc4_sum+0x3>
    7878:	48 0f       	add	r20, r24
    787a:	59 1f       	adc	r21, r25
    787c:	6a 1f       	adc	r22, r26
    787e:	7b 1f       	adc	r23, r27
    7880:	40 93 c9 28 	sts	0x28C9, r20	; 0x8028c9 <g_adc_io_adc4_sum>
    7884:	50 93 ca 28 	sts	0x28CA, r21	; 0x8028ca <g_adc_io_adc4_sum+0x1>
    7888:	60 93 cb 28 	sts	0x28CB, r22	; 0x8028cb <g_adc_io_adc4_sum+0x2>
    788c:	70 93 cc 28 	sts	0x28CC, r23	; 0x8028cc <g_adc_io_adc4_sum+0x3>
    7890:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <g_adc_io_adc4_cnt>
    7894:	90 91 c8 28 	lds	r25, 0x28C8	; 0x8028c8 <g_adc_io_adc4_cnt+0x1>
    7898:	01 96       	adiw	r24, 0x01	; 1
    789a:	80 93 c7 28 	sts	0x28C7, r24	; 0x8028c7 <g_adc_io_adc4_cnt>
    789e:	90 93 c8 28 	sts	0x28C8, r25	; 0x8028c8 <g_adc_io_adc4_cnt+0x1>
    78a2:	8f 3f       	cpi	r24, 0xFF	; 255
    78a4:	91 05       	cpc	r25, r1
    78a6:	09 f0       	breq	.+2      	; 0x78aa <isr_adc_a+0x1ce>
    78a8:	08 f4       	brcc	.+2      	; 0x78ac <isr_adc_a+0x1d0>
    78aa:	8d c0       	rjmp	.+282    	; 0x79c6 <isr_adc_a+0x2ea>
    78ac:	40 93 cd 28 	sts	0x28CD, r20	; 0x8028cd <g_adc_io_adc4_cur>
    78b0:	50 93 ce 28 	sts	0x28CE, r21	; 0x8028ce <g_adc_io_adc4_cur+0x1>
    78b4:	60 93 cf 28 	sts	0x28CF, r22	; 0x8028cf <g_adc_io_adc4_cur+0x2>
    78b8:	70 93 d0 28 	sts	0x28D0, r23	; 0x8028d0 <g_adc_io_adc4_cur+0x3>
    78bc:	10 92 c7 28 	sts	0x28C7, r1	; 0x8028c7 <g_adc_io_adc4_cnt>
    78c0:	10 92 c8 28 	sts	0x28C8, r1	; 0x8028c8 <g_adc_io_adc4_cnt+0x1>
    78c4:	10 92 c9 28 	sts	0x28C9, r1	; 0x8028c9 <g_adc_io_adc4_sum>
    78c8:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <g_adc_io_adc4_sum+0x1>
    78cc:	10 92 cb 28 	sts	0x28CB, r1	; 0x8028cb <g_adc_io_adc4_sum+0x2>
    78d0:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <g_adc_io_adc4_sum+0x3>
    78d4:	08 95       	ret
    78d6:	62 ff       	sbrs	r22, 2
    78d8:	3b c0       	rjmp	.+118    	; 0x7950 <isr_adc_a+0x274>
    78da:	05 2e       	mov	r0, r21
    78dc:	00 0c       	add	r0, r0
    78de:	66 0b       	sbc	r22, r22
    78e0:	77 0b       	sbc	r23, r23
    78e2:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <g_adc_io_adc5_sum>
    78e6:	90 91 c0 28 	lds	r25, 0x28C0	; 0x8028c0 <g_adc_io_adc5_sum+0x1>
    78ea:	a0 91 c1 28 	lds	r26, 0x28C1	; 0x8028c1 <g_adc_io_adc5_sum+0x2>
    78ee:	b0 91 c2 28 	lds	r27, 0x28C2	; 0x8028c2 <g_adc_io_adc5_sum+0x3>
    78f2:	48 0f       	add	r20, r24
    78f4:	59 1f       	adc	r21, r25
    78f6:	6a 1f       	adc	r22, r26
    78f8:	7b 1f       	adc	r23, r27
    78fa:	40 93 bf 28 	sts	0x28BF, r20	; 0x8028bf <g_adc_io_adc5_sum>
    78fe:	50 93 c0 28 	sts	0x28C0, r21	; 0x8028c0 <g_adc_io_adc5_sum+0x1>
    7902:	60 93 c1 28 	sts	0x28C1, r22	; 0x8028c1 <g_adc_io_adc5_sum+0x2>
    7906:	70 93 c2 28 	sts	0x28C2, r23	; 0x8028c2 <g_adc_io_adc5_sum+0x3>
    790a:	80 91 bd 28 	lds	r24, 0x28BD	; 0x8028bd <g_adc_io_adc5_cnt>
    790e:	90 91 be 28 	lds	r25, 0x28BE	; 0x8028be <g_adc_io_adc5_cnt+0x1>
    7912:	01 96       	adiw	r24, 0x01	; 1
    7914:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <g_adc_io_adc5_cnt>
    7918:	90 93 be 28 	sts	0x28BE, r25	; 0x8028be <g_adc_io_adc5_cnt+0x1>
    791c:	8f 3f       	cpi	r24, 0xFF	; 255
    791e:	91 05       	cpc	r25, r1
    7920:	09 f0       	breq	.+2      	; 0x7924 <isr_adc_a+0x248>
    7922:	08 f4       	brcc	.+2      	; 0x7926 <isr_adc_a+0x24a>
    7924:	50 c0       	rjmp	.+160    	; 0x79c6 <isr_adc_a+0x2ea>
    7926:	40 93 c3 28 	sts	0x28C3, r20	; 0x8028c3 <g_adc_io_adc5_cur>
    792a:	50 93 c4 28 	sts	0x28C4, r21	; 0x8028c4 <g_adc_io_adc5_cur+0x1>
    792e:	60 93 c5 28 	sts	0x28C5, r22	; 0x8028c5 <g_adc_io_adc5_cur+0x2>
    7932:	70 93 c6 28 	sts	0x28C6, r23	; 0x8028c6 <g_adc_io_adc5_cur+0x3>
    7936:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <g_adc_io_adc5_cnt>
    793a:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <g_adc_io_adc5_cnt+0x1>
    793e:	10 92 bf 28 	sts	0x28BF, r1	; 0x8028bf <g_adc_io_adc5_sum>
    7942:	10 92 c0 28 	sts	0x28C0, r1	; 0x8028c0 <g_adc_io_adc5_sum+0x1>
    7946:	10 92 c1 28 	sts	0x28C1, r1	; 0x8028c1 <g_adc_io_adc5_sum+0x2>
    794a:	10 92 c2 28 	sts	0x28C2, r1	; 0x8028c2 <g_adc_io_adc5_sum+0x3>
    794e:	08 95       	ret
    7950:	63 ff       	sbrs	r22, 3
    7952:	39 c0       	rjmp	.+114    	; 0x79c6 <isr_adc_a+0x2ea>
    7954:	05 2e       	mov	r0, r21
    7956:	00 0c       	add	r0, r0
    7958:	66 0b       	sbc	r22, r22
    795a:	77 0b       	sbc	r23, r23
    795c:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <g_adc_silence_sum>
    7960:	90 91 b6 28 	lds	r25, 0x28B6	; 0x8028b6 <g_adc_silence_sum+0x1>
    7964:	a0 91 b7 28 	lds	r26, 0x28B7	; 0x8028b7 <g_adc_silence_sum+0x2>
    7968:	b0 91 b8 28 	lds	r27, 0x28B8	; 0x8028b8 <g_adc_silence_sum+0x3>
    796c:	48 0f       	add	r20, r24
    796e:	59 1f       	adc	r21, r25
    7970:	6a 1f       	adc	r22, r26
    7972:	7b 1f       	adc	r23, r27
    7974:	40 93 b5 28 	sts	0x28B5, r20	; 0x8028b5 <g_adc_silence_sum>
    7978:	50 93 b6 28 	sts	0x28B6, r21	; 0x8028b6 <g_adc_silence_sum+0x1>
    797c:	60 93 b7 28 	sts	0x28B7, r22	; 0x8028b7 <g_adc_silence_sum+0x2>
    7980:	70 93 b8 28 	sts	0x28B8, r23	; 0x8028b8 <g_adc_silence_sum+0x3>
    7984:	80 91 b3 28 	lds	r24, 0x28B3	; 0x8028b3 <g_adc_silence_cnt>
    7988:	90 91 b4 28 	lds	r25, 0x28B4	; 0x8028b4 <g_adc_silence_cnt+0x1>
    798c:	01 96       	adiw	r24, 0x01	; 1
    798e:	80 93 b3 28 	sts	0x28B3, r24	; 0x8028b3 <g_adc_silence_cnt>
    7992:	90 93 b4 28 	sts	0x28B4, r25	; 0x8028b4 <g_adc_silence_cnt+0x1>
    7996:	8f 3f       	cpi	r24, 0xFF	; 255
    7998:	91 05       	cpc	r25, r1
    799a:	a9 f0       	breq	.+42     	; 0x79c6 <isr_adc_a+0x2ea>
    799c:	a0 f0       	brcs	.+40     	; 0x79c6 <isr_adc_a+0x2ea>
    799e:	40 93 b9 28 	sts	0x28B9, r20	; 0x8028b9 <g_adc_silence_cur>
    79a2:	50 93 ba 28 	sts	0x28BA, r21	; 0x8028ba <g_adc_silence_cur+0x1>
    79a6:	60 93 bb 28 	sts	0x28BB, r22	; 0x8028bb <g_adc_silence_cur+0x2>
    79aa:	70 93 bc 28 	sts	0x28BC, r23	; 0x8028bc <g_adc_silence_cur+0x3>
    79ae:	10 92 b3 28 	sts	0x28B3, r1	; 0x8028b3 <g_adc_silence_cnt>
    79b2:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <g_adc_silence_cnt+0x1>
    79b6:	10 92 b5 28 	sts	0x28B5, r1	; 0x8028b5 <g_adc_silence_sum>
    79ba:	10 92 b6 28 	sts	0x28B6, r1	; 0x8028b6 <g_adc_silence_sum+0x1>
    79be:	10 92 b7 28 	sts	0x28B7, r1	; 0x8028b7 <g_adc_silence_sum+0x2>
    79c2:	10 92 b8 28 	sts	0x28B8, r1	; 0x8028b8 <g_adc_silence_sum+0x3>
    79c6:	08 95       	ret

000079c8 <isr_adc_b>:
    79c8:	60 ff       	sbrs	r22, 0
    79ca:	3b c0       	rjmp	.+118    	; 0x7a42 <isr_adc_b+0x7a>
    79cc:	4e 5b       	subi	r20, 0xBE	; 190
    79ce:	51 09       	sbc	r21, r1
    79d0:	05 2e       	mov	r0, r21
    79d2:	00 0c       	add	r0, r0
    79d4:	66 0b       	sbc	r22, r22
    79d6:	77 0b       	sbc	r23, r23
    79d8:	80 91 ab 28 	lds	r24, 0x28AB	; 0x8028ab <g_adc_temp_sum>
    79dc:	90 91 ac 28 	lds	r25, 0x28AC	; 0x8028ac <g_adc_temp_sum+0x1>
    79e0:	a0 91 ad 28 	lds	r26, 0x28AD	; 0x8028ad <g_adc_temp_sum+0x2>
    79e4:	b0 91 ae 28 	lds	r27, 0x28AE	; 0x8028ae <g_adc_temp_sum+0x3>
    79e8:	48 0f       	add	r20, r24
    79ea:	59 1f       	adc	r21, r25
    79ec:	6a 1f       	adc	r22, r26
    79ee:	7b 1f       	adc	r23, r27
    79f0:	40 93 ab 28 	sts	0x28AB, r20	; 0x8028ab <g_adc_temp_sum>
    79f4:	50 93 ac 28 	sts	0x28AC, r21	; 0x8028ac <g_adc_temp_sum+0x1>
    79f8:	60 93 ad 28 	sts	0x28AD, r22	; 0x8028ad <g_adc_temp_sum+0x2>
    79fc:	70 93 ae 28 	sts	0x28AE, r23	; 0x8028ae <g_adc_temp_sum+0x3>
    7a00:	80 91 a9 28 	lds	r24, 0x28A9	; 0x8028a9 <g_adc_temp_cnt>
    7a04:	90 91 aa 28 	lds	r25, 0x28AA	; 0x8028aa <g_adc_temp_cnt+0x1>
    7a08:	01 96       	adiw	r24, 0x01	; 1
    7a0a:	80 93 a9 28 	sts	0x28A9, r24	; 0x8028a9 <g_adc_temp_cnt>
    7a0e:	90 93 aa 28 	sts	0x28AA, r25	; 0x8028aa <g_adc_temp_cnt+0x1>
    7a12:	8f 3f       	cpi	r24, 0xFF	; 255
    7a14:	91 05       	cpc	r25, r1
    7a16:	a9 f0       	breq	.+42     	; 0x7a42 <isr_adc_b+0x7a>
    7a18:	a0 f0       	brcs	.+40     	; 0x7a42 <isr_adc_b+0x7a>
    7a1a:	40 93 af 28 	sts	0x28AF, r20	; 0x8028af <g_adc_temp_cur>
    7a1e:	50 93 b0 28 	sts	0x28B0, r21	; 0x8028b0 <g_adc_temp_cur+0x1>
    7a22:	60 93 b1 28 	sts	0x28B1, r22	; 0x8028b1 <g_adc_temp_cur+0x2>
    7a26:	70 93 b2 28 	sts	0x28B2, r23	; 0x8028b2 <g_adc_temp_cur+0x3>
    7a2a:	10 92 a9 28 	sts	0x28A9, r1	; 0x8028a9 <g_adc_temp_cnt>
    7a2e:	10 92 aa 28 	sts	0x28AA, r1	; 0x8028aa <g_adc_temp_cnt+0x1>
    7a32:	10 92 ab 28 	sts	0x28AB, r1	; 0x8028ab <g_adc_temp_sum>
    7a36:	10 92 ac 28 	sts	0x28AC, r1	; 0x8028ac <g_adc_temp_sum+0x1>
    7a3a:	10 92 ad 28 	sts	0x28AD, r1	; 0x8028ad <g_adc_temp_sum+0x2>
    7a3e:	10 92 ae 28 	sts	0x28AE, r1	; 0x8028ae <g_adc_temp_sum+0x3>
    7a42:	08 95       	ret

00007a44 <task_dac>:
    7a44:	cf 93       	push	r28
    7a46:	df 93       	push	r29
    7a48:	1f 92       	push	r1
    7a4a:	1f 92       	push	r1
    7a4c:	cd b7       	in	r28, 0x3d	; 61
    7a4e:	de b7       	in	r29, 0x3e	; 62
    7a50:	8f b7       	in	r24, 0x3f	; 63
    7a52:	8a 83       	std	Y+2, r24	; 0x02
    7a54:	f8 94       	cli
    7a56:	8a 81       	ldd	r24, Y+2	; 0x02
    7a58:	8f bf       	out	0x3f, r24	; 63
    7a5a:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <s_dds0_freq_mHz.7533>
    7a5e:	90 91 1a 28 	lds	r25, 0x281A	; 0x80281a <s_dds0_freq_mHz.7533+0x1>
    7a62:	a0 91 1b 28 	lds	r26, 0x281B	; 0x80281b <s_dds0_freq_mHz.7533+0x2>
    7a66:	b0 91 1c 28 	lds	r27, 0x281C	; 0x80281c <s_dds0_freq_mHz.7533+0x3>
    7a6a:	80 38       	cpi	r24, 0x80	; 128
    7a6c:	94 48       	sbci	r25, 0x84	; 132
    7a6e:	ae 41       	sbci	r26, 0x1E	; 30
    7a70:	b1 05       	cpc	r27, r1
    7a72:	69 f4       	brne	.+26     	; 0x7a8e <task_dac+0x4a>
    7a74:	80 91 15 28 	lds	r24, 0x2815	; 0x802815 <s_dds1_freq_mHz.7534>
    7a78:	90 91 16 28 	lds	r25, 0x2816	; 0x802816 <s_dds1_freq_mHz.7534+0x1>
    7a7c:	a0 91 17 28 	lds	r26, 0x2817	; 0x802817 <s_dds1_freq_mHz.7534+0x2>
    7a80:	b0 91 18 28 	lds	r27, 0x2818	; 0x802818 <s_dds1_freq_mHz.7534+0x3>
    7a84:	8a 30       	cpi	r24, 0x0A	; 10
    7a86:	99 40       	sbci	r25, 0x09	; 9
    7a88:	ad 43       	sbci	r26, 0x3D	; 61
    7a8a:	b1 05       	cpc	r27, r1
    7a8c:	a9 f1       	breq	.+106    	; 0x7af8 <task_dac+0xb4>
    7a8e:	80 e8       	ldi	r24, 0x80	; 128
    7a90:	94 e8       	ldi	r25, 0x84	; 132
    7a92:	ae e1       	ldi	r26, 0x1E	; 30
    7a94:	b0 e0       	ldi	r27, 0x00	; 0
    7a96:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <s_dds0_freq_mHz.7533>
    7a9a:	90 93 1a 28 	sts	0x281A, r25	; 0x80281a <s_dds0_freq_mHz.7533+0x1>
    7a9e:	a0 93 1b 28 	sts	0x281B, r26	; 0x80281b <s_dds0_freq_mHz.7533+0x2>
    7aa2:	b0 93 1c 28 	sts	0x281C, r27	; 0x80281c <s_dds0_freq_mHz.7533+0x3>
    7aa6:	8a e0       	ldi	r24, 0x0A	; 10
    7aa8:	99 e0       	ldi	r25, 0x09	; 9
    7aaa:	ad e3       	ldi	r26, 0x3D	; 61
    7aac:	b0 e0       	ldi	r27, 0x00	; 0
    7aae:	80 93 15 28 	sts	0x2815, r24	; 0x802815 <s_dds1_freq_mHz.7534>
    7ab2:	90 93 16 28 	sts	0x2816, r25	; 0x802816 <s_dds1_freq_mHz.7534+0x1>
    7ab6:	a0 93 17 28 	sts	0x2817, r26	; 0x802817 <s_dds1_freq_mHz.7534+0x2>
    7aba:	b0 93 18 28 	sts	0x2818, r27	; 0x802818 <s_dds1_freq_mHz.7534+0x3>
    7abe:	8f b7       	in	r24, 0x3f	; 63
    7ac0:	89 83       	std	Y+1, r24	; 0x01
    7ac2:	f8 94       	cli
    7ac4:	89 81       	ldd	r24, Y+1	; 0x01
    7ac6:	4a ea       	ldi	r20, 0xAA	; 170
    7ac8:	5a ea       	ldi	r21, 0xAA	; 170
    7aca:	6a ea       	ldi	r22, 0xAA	; 170
    7acc:	7a e0       	ldi	r23, 0x0A	; 10
    7ace:	40 93 6d 28 	sts	0x286D, r20	; 0x80286d <dds0_inc>
    7ad2:	50 93 6e 28 	sts	0x286E, r21	; 0x80286e <dds0_inc+0x1>
    7ad6:	60 93 6f 28 	sts	0x286F, r22	; 0x80286f <dds0_inc+0x2>
    7ada:	70 93 70 28 	sts	0x2870, r23	; 0x802870 <dds0_inc+0x3>
    7ade:	44 ed       	ldi	r20, 0xD4	; 212
    7ae0:	58 e5       	ldi	r21, 0x58	; 88
    7ae2:	65 e5       	ldi	r22, 0x55	; 85
    7ae4:	75 e1       	ldi	r23, 0x15	; 21
    7ae6:	40 93 65 28 	sts	0x2865, r20	; 0x802865 <dds1_inc>
    7aea:	50 93 66 28 	sts	0x2866, r21	; 0x802866 <dds1_inc+0x1>
    7aee:	60 93 67 28 	sts	0x2867, r22	; 0x802867 <dds1_inc+0x2>
    7af2:	70 93 68 28 	sts	0x2868, r23	; 0x802868 <dds1_inc+0x3>
    7af6:	8f bf       	out	0x3f, r24	; 63
    7af8:	0f 90       	pop	r0
    7afa:	0f 90       	pop	r0
    7afc:	df 91       	pop	r29
    7afe:	cf 91       	pop	r28
    7b00:	08 95       	ret

00007b02 <isr_tcc0_ovfl>:
    7b02:	cf 92       	push	r12
    7b04:	df 92       	push	r13
    7b06:	ef 92       	push	r14
    7b08:	ff 92       	push	r15
    7b0a:	0f 93       	push	r16
    7b0c:	1f 93       	push	r17
    7b0e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <rtc_get_time>
    7b12:	21 e0       	ldi	r18, 0x01	; 1
    7b14:	20 93 0c 08 	sts	0x080C, r18	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    7b18:	20 91 80 29 	lds	r18, 0x2980	; 0x802980 <g_workmode>
    7b1c:	22 30       	cpi	r18, 0x02	; 2
    7b1e:	09 f0       	breq	.+2      	; 0x7b22 <isr_tcc0_ovfl+0x20>
    7b20:	4a c0       	rjmp	.+148    	; 0x7bb6 <isr_tcc0_ovfl+0xb4>
    7b22:	00 91 21 28 	lds	r16, 0x2821	; 0x802821 <last_10ms.7418>
    7b26:	10 91 22 28 	lds	r17, 0x2822	; 0x802822 <last_10ms.7418+0x1>
    7b2a:	20 91 23 28 	lds	r18, 0x2823	; 0x802823 <last_10ms.7418+0x2>
    7b2e:	30 91 24 28 	lds	r19, 0x2824	; 0x802824 <last_10ms.7418+0x3>
    7b32:	6b 01       	movw	r12, r22
    7b34:	7c 01       	movw	r14, r24
    7b36:	c0 1a       	sub	r12, r16
    7b38:	d1 0a       	sbc	r13, r17
    7b3a:	e2 0a       	sbc	r14, r18
    7b3c:	f3 0a       	sbc	r15, r19
    7b3e:	4a e0       	ldi	r20, 0x0A	; 10
    7b40:	c4 16       	cp	r12, r20
    7b42:	d1 04       	cpc	r13, r1
    7b44:	e1 04       	cpc	r14, r1
    7b46:	f1 04       	cpc	r15, r1
    7b48:	28 f4       	brcc	.+10     	; 0x7b54 <isr_tcc0_ovfl+0x52>
    7b4a:	60 17       	cp	r22, r16
    7b4c:	71 07       	cpc	r23, r17
    7b4e:	82 07       	cpc	r24, r18
    7b50:	93 07       	cpc	r25, r19
    7b52:	58 f4       	brcc	.+22     	; 0x7b6a <isr_tcc0_ovfl+0x68>
    7b54:	60 93 21 28 	sts	0x2821, r22	; 0x802821 <last_10ms.7418>
    7b58:	70 93 22 28 	sts	0x2822, r23	; 0x802822 <last_10ms.7418+0x1>
    7b5c:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <last_10ms.7418+0x2>
    7b60:	90 93 24 28 	sts	0x2824, r25	; 0x802824 <last_10ms.7418+0x3>
    7b64:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <isr_10ms_twi1_onboard>
    7b68:	26 c0       	rjmp	.+76     	; 0x7bb6 <isr_tcc0_ovfl+0xb4>
    7b6a:	00 91 1d 28 	lds	r16, 0x281D	; 0x80281d <last_500ms.7419>
    7b6e:	10 91 1e 28 	lds	r17, 0x281E	; 0x80281e <last_500ms.7419+0x1>
    7b72:	20 91 1f 28 	lds	r18, 0x281F	; 0x80281f <last_500ms.7419+0x2>
    7b76:	30 91 20 28 	lds	r19, 0x2820	; 0x802820 <last_500ms.7419+0x3>
    7b7a:	6b 01       	movw	r12, r22
    7b7c:	7c 01       	movw	r14, r24
    7b7e:	c0 1a       	sub	r12, r16
    7b80:	d1 0a       	sbc	r13, r17
    7b82:	e2 0a       	sbc	r14, r18
    7b84:	f3 0a       	sbc	r15, r19
    7b86:	c1 14       	cp	r12, r1
    7b88:	42 e0       	ldi	r20, 0x02	; 2
    7b8a:	d4 06       	cpc	r13, r20
    7b8c:	e1 04       	cpc	r14, r1
    7b8e:	f1 04       	cpc	r15, r1
    7b90:	28 f4       	brcc	.+10     	; 0x7b9c <isr_tcc0_ovfl+0x9a>
    7b92:	60 17       	cp	r22, r16
    7b94:	71 07       	cpc	r23, r17
    7b96:	82 07       	cpc	r24, r18
    7b98:	93 07       	cpc	r25, r19
    7b9a:	58 f4       	brcc	.+22     	; 0x7bb2 <isr_tcc0_ovfl+0xb0>
    7b9c:	60 93 1d 28 	sts	0x281D, r22	; 0x80281d <last_500ms.7419>
    7ba0:	70 93 1e 28 	sts	0x281E, r23	; 0x80281e <last_500ms.7419+0x1>
    7ba4:	80 93 1f 28 	sts	0x281F, r24	; 0x80281f <last_500ms.7419+0x2>
    7ba8:	90 93 20 28 	sts	0x2820, r25	; 0x802820 <last_500ms.7419+0x3>
    7bac:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <isr_500ms_twi1_onboard>
    7bb0:	02 c0       	rjmp	.+4      	; 0x7bb6 <isr_tcc0_ovfl+0xb4>
    7bb2:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <isr_sparetime_twi1_onboard>
    7bb6:	1f 91       	pop	r17
    7bb8:	0f 91       	pop	r16
    7bba:	ff 90       	pop	r15
    7bbc:	ef 90       	pop	r14
    7bbe:	df 90       	pop	r13
    7bc0:	cf 90       	pop	r12
    7bc2:	08 95       	ret

00007bc4 <calc_next_frame>:
    7bc4:	8f 92       	push	r8
    7bc6:	9f 92       	push	r9
    7bc8:	af 92       	push	r10
    7bca:	bf 92       	push	r11
    7bcc:	cf 92       	push	r12
    7bce:	df 92       	push	r13
    7bd0:	ef 92       	push	r14
    7bd2:	ff 92       	push	r15
    7bd4:	0f 93       	push	r16
    7bd6:	1f 93       	push	r17
    7bd8:	cf 93       	push	r28
    7bda:	df 93       	push	r29
    7bdc:	6b 01       	movw	r12, r22
    7bde:	5a 01       	movw	r10, r20
    7be0:	79 01       	movw	r14, r18
    7be2:	48 01       	movw	r8, r16
    7be4:	ec 01       	movw	r28, r24
    7be6:	8c 01       	movw	r16, r24
    7be8:	00 5e       	subi	r16, 0xE0	; 224
    7bea:	1f 4f       	sbci	r17, 0xFF	; 255
    7bec:	f6 01       	movw	r30, r12
    7bee:	82 81       	ldd	r24, Z+2	; 0x02
    7bf0:	93 81       	ldd	r25, Z+3	; 0x03
    7bf2:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <get_interpolated_sine>
    7bf6:	88 83       	st	Y, r24
    7bf8:	99 83       	std	Y+1, r25	; 0x01
    7bfa:	f7 01       	movw	r30, r14
    7bfc:	82 81       	ldd	r24, Z+2	; 0x02
    7bfe:	93 81       	ldd	r25, Z+3	; 0x03
    7c00:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <get_interpolated_sine>
    7c04:	8a 83       	std	Y+2, r24	; 0x02
    7c06:	9b 83       	std	Y+3, r25	; 0x03
    7c08:	f6 01       	movw	r30, r12
    7c0a:	40 81       	ld	r20, Z
    7c0c:	51 81       	ldd	r21, Z+1	; 0x01
    7c0e:	62 81       	ldd	r22, Z+2	; 0x02
    7c10:	73 81       	ldd	r23, Z+3	; 0x03
    7c12:	f5 01       	movw	r30, r10
    7c14:	80 81       	ld	r24, Z
    7c16:	91 81       	ldd	r25, Z+1	; 0x01
    7c18:	a2 81       	ldd	r26, Z+2	; 0x02
    7c1a:	b3 81       	ldd	r27, Z+3	; 0x03
    7c1c:	84 0f       	add	r24, r20
    7c1e:	95 1f       	adc	r25, r21
    7c20:	a6 1f       	adc	r26, r22
    7c22:	b7 1f       	adc	r27, r23
    7c24:	f6 01       	movw	r30, r12
    7c26:	80 83       	st	Z, r24
    7c28:	91 83       	std	Z+1, r25	; 0x01
    7c2a:	a2 83       	std	Z+2, r26	; 0x02
    7c2c:	b3 83       	std	Z+3, r27	; 0x03
    7c2e:	f7 01       	movw	r30, r14
    7c30:	40 81       	ld	r20, Z
    7c32:	51 81       	ldd	r21, Z+1	; 0x01
    7c34:	62 81       	ldd	r22, Z+2	; 0x02
    7c36:	73 81       	ldd	r23, Z+3	; 0x03
    7c38:	f4 01       	movw	r30, r8
    7c3a:	80 81       	ld	r24, Z
    7c3c:	91 81       	ldd	r25, Z+1	; 0x01
    7c3e:	a2 81       	ldd	r26, Z+2	; 0x02
    7c40:	b3 81       	ldd	r27, Z+3	; 0x03
    7c42:	84 0f       	add	r24, r20
    7c44:	95 1f       	adc	r25, r21
    7c46:	a6 1f       	adc	r26, r22
    7c48:	b7 1f       	adc	r27, r23
    7c4a:	f7 01       	movw	r30, r14
    7c4c:	80 83       	st	Z, r24
    7c4e:	91 83       	std	Z+1, r25	; 0x01
    7c50:	a2 83       	std	Z+2, r26	; 0x02
    7c52:	b3 83       	std	Z+3, r27	; 0x03
    7c54:	24 96       	adiw	r28, 0x04	; 4
    7c56:	c0 17       	cp	r28, r16
    7c58:	d1 07       	cpc	r29, r17
    7c5a:	41 f6       	brne	.-112    	; 0x7bec <calc_next_frame+0x28>
    7c5c:	df 91       	pop	r29
    7c5e:	cf 91       	pop	r28
    7c60:	1f 91       	pop	r17
    7c62:	0f 91       	pop	r16
    7c64:	ff 90       	pop	r15
    7c66:	ef 90       	pop	r14
    7c68:	df 90       	pop	r13
    7c6a:	cf 90       	pop	r12
    7c6c:	bf 90       	pop	r11
    7c6e:	af 90       	pop	r10
    7c70:	9f 90       	pop	r9
    7c72:	8f 90       	pop	r8
    7c74:	08 95       	ret

00007c76 <isr_dma_dac_ch0_B>:
    7c76:	0f 93       	push	r16
    7c78:	1f 93       	push	r17
    7c7a:	cf 93       	push	r28
    7c7c:	df 93       	push	r29
    7c7e:	1f 92       	push	r1
    7c80:	cd b7       	in	r28, 0x3d	; 61
    7c82:	de b7       	in	r29, 0x3e	; 62
    7c84:	8f b7       	in	r24, 0x3f	; 63
    7c86:	89 83       	std	Y+1, r24	; 0x01
    7c88:	f8 94       	cli
    7c8a:	99 81       	ldd	r25, Y+1	; 0x01
    7c8c:	e0 e1       	ldi	r30, 0x10	; 16
    7c8e:	f1 e0       	ldi	r31, 0x01	; 1
    7c90:	80 81       	ld	r24, Z
    7c92:	80 68       	ori	r24, 0x80	; 128
    7c94:	80 83       	st	Z, r24
    7c96:	9f bf       	out	0x3f, r25	; 63
    7c98:	78 94       	sei
    7c9a:	05 e6       	ldi	r16, 0x65	; 101
    7c9c:	18 e2       	ldi	r17, 0x28	; 40
    7c9e:	27 e0       	ldi	r18, 0x07	; 7
    7ca0:	30 e2       	ldi	r19, 0x20	; 32
    7ca2:	4d e6       	ldi	r20, 0x6D	; 109
    7ca4:	58 e2       	ldi	r21, 0x28	; 40
    7ca6:	69 e6       	ldi	r22, 0x69	; 105
    7ca8:	78 e2       	ldi	r23, 0x28	; 40
    7caa:	85 e4       	ldi	r24, 0x45	; 69
    7cac:	98 e2       	ldi	r25, 0x28	; 40
    7cae:	8a df       	rcall	.-236    	; 0x7bc4 <calc_next_frame>
    7cb0:	0f 90       	pop	r0
    7cb2:	df 91       	pop	r29
    7cb4:	cf 91       	pop	r28
    7cb6:	1f 91       	pop	r17
    7cb8:	0f 91       	pop	r16
    7cba:	08 95       	ret

00007cbc <isr_dma_dac_ch0_A>:
    7cbc:	0f 93       	push	r16
    7cbe:	1f 93       	push	r17
    7cc0:	cf 93       	push	r28
    7cc2:	df 93       	push	r29
    7cc4:	1f 92       	push	r1
    7cc6:	cd b7       	in	r28, 0x3d	; 61
    7cc8:	de b7       	in	r29, 0x3e	; 62
    7cca:	8f b7       	in	r24, 0x3f	; 63
    7ccc:	89 83       	std	Y+1, r24	; 0x01
    7cce:	f8 94       	cli
    7cd0:	99 81       	ldd	r25, Y+1	; 0x01
    7cd2:	e0 e2       	ldi	r30, 0x20	; 32
    7cd4:	f1 e0       	ldi	r31, 0x01	; 1
    7cd6:	80 81       	ld	r24, Z
    7cd8:	80 68       	ori	r24, 0x80	; 128
    7cda:	80 83       	st	Z, r24
    7cdc:	9f bf       	out	0x3f, r25	; 63
    7cde:	78 94       	sei
    7ce0:	05 e6       	ldi	r16, 0x65	; 101
    7ce2:	18 e2       	ldi	r17, 0x28	; 40
    7ce4:	27 e0       	ldi	r18, 0x07	; 7
    7ce6:	30 e2       	ldi	r19, 0x20	; 32
    7ce8:	4d e6       	ldi	r20, 0x6D	; 109
    7cea:	58 e2       	ldi	r21, 0x28	; 40
    7cec:	69 e6       	ldi	r22, 0x69	; 105
    7cee:	78 e2       	ldi	r23, 0x28	; 40
    7cf0:	85 e2       	ldi	r24, 0x25	; 37
    7cf2:	98 e2       	ldi	r25, 0x28	; 40
    7cf4:	67 df       	rcall	.-306    	; 0x7bc4 <calc_next_frame>
    7cf6:	0f 90       	pop	r0
    7cf8:	df 91       	pop	r29
    7cfa:	cf 91       	pop	r28
    7cfc:	1f 91       	pop	r17
    7cfe:	0f 91       	pop	r16
    7d00:	08 95       	ret

00007d02 <usb_callback_suspend_action>:
    7d02:	08 95       	ret

00007d04 <usb_callback_resume_action>:
    7d04:	08 95       	ret

00007d06 <usb_callback_remotewakeup_enable>:
    7d06:	08 95       	ret

00007d08 <usb_callback_remotewakeup_disable>:
    7d08:	08 95       	ret

00007d0a <usb_callback_cdc_enable>:

bool usb_callback_cdc_enable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = true;
    7d0a:	81 e0       	ldi	r24, 0x01	; 1
    7d0c:	80 93 7f 29 	sts	0x297F, r24	; 0x80297f <usb_cdc_transfers_autorized>
	return true;
}
    7d10:	08 95       	ret

00007d12 <usb_callback_cdc_disable>:

void usb_callback_cdc_disable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = false;
    7d12:	10 92 7f 29 	sts	0x297F, r1	; 0x80297f <usb_cdc_transfers_autorized>
    7d16:	08 95       	ret

00007d18 <usb_callback_config>:
}

void usb_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    7d18:	08 95       	ret

00007d1a <usb_callback_cdc_set_dtr>:

}

void usb_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
    7d1a:	08 95       	ret

00007d1c <usb_callback_cdc_set_rts>:

}

void usb_callback_cdc_set_rts(uint8_t port, bool b_enable)
{
    7d1c:	08 95       	ret

00007d1e <usb_callback_rx_notify>:

}

void usb_callback_rx_notify(uint8_t port)
{
    7d1e:	08 95       	ret

00007d20 <usb_callback_tx_empty_notify>:

}

void usb_callback_tx_empty_notify(uint8_t port)
{
    7d20:	08 95       	ret

00007d22 <main>:
	}
}


int main(void)
{
    7d22:	2f 92       	push	r2
    7d24:	3f 92       	push	r3
    7d26:	4f 92       	push	r4
    7d28:	5f 92       	push	r5
    7d2a:	6f 92       	push	r6
    7d2c:	7f 92       	push	r7
    7d2e:	8f 92       	push	r8
    7d30:	9f 92       	push	r9
    7d32:	af 92       	push	r10
    7d34:	bf 92       	push	r11
    7d36:	cf 92       	push	r12
    7d38:	df 92       	push	r13
    7d3a:	ef 92       	push	r14
    7d3c:	ff 92       	push	r15
    7d3e:	0f 93       	push	r16
    7d40:	1f 93       	push	r17
    7d42:	cf 93       	push	r28
    7d44:	df 93       	push	r29
    7d46:	cd b7       	in	r28, 0x3d	; 61
    7d48:	de b7       	in	r29, 0x3e	; 62
    7d4a:	ce 57       	subi	r28, 0x7E	; 126
    7d4c:	d1 09       	sbc	r29, r1
    7d4e:	cd bf       	out	0x3d, r28	; 61
    7d50:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	/* Init of interrupt system */
	g_workmode = WORKMODE_INIT;
    7d52:	22 24       	eor	r2, r2
    7d54:	23 94       	inc	r2
    7d56:	20 92 80 29 	sts	0x2980, r2	; 0x802980 <g_workmode>
	irq_initialize_vectors();
    7d5a:	e0 ea       	ldi	r30, 0xA0	; 160
    7d5c:	f0 e0       	ldi	r31, 0x00	; 0
    7d5e:	0f 2e       	mov	r0, r31
    7d60:	f7 e0       	ldi	r31, 0x07	; 7
    7d62:	df 2e       	mov	r13, r31
    7d64:	f0 2d       	mov	r31, r0
    7d66:	d2 82       	std	Z+2, r13	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    7d68:	d2 82       	std	Z+2, r13	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    7d6a:	82 81       	ldd	r24, Z+2	; 0x02
    7d6c:	8f 77       	andi	r24, 0x7F	; 127
    7d6e:	82 83       	std	Z+2, r24	; 0x02
		PMIC.INTPRI = 0;
    7d70:	11 82       	std	Z+1, r1	; 0x01
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);

	sysclk_init();		// Clock configuration set-up
    7d72:	0e 94 59 48 	call	0x90b2	; 0x90b2 <sysclk_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    7d76:	e7 ed       	ldi	r30, 0xD7	; 215
    7d78:	fa e2       	ldi	r31, 0x2A	; 42
    7d7a:	10 82       	st	Z, r1
    7d7c:	11 82       	std	Z+1, r1	; 0x01
    7d7e:	12 82       	std	Z+2, r1	; 0x02
    7d80:	13 82       	std	Z+3, r1	; 0x03
    7d82:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    7d84:	25 82       	std	Z+5, r2	; 0x05

	sleepmgr_init();	// Unlocks all sleep mode levels

	rtc_init();
    7d86:	0e 94 04 16 	call	0x2c08	; 0x2c08 <rtc_init>
}


static void rtc_start(void)
{
	rtc_set_callback(isr_rtc_alarm);
    7d8a:	85 e6       	ldi	r24, 0x65	; 101
    7d8c:	9b e3       	ldi	r25, 0x3B	; 59
    7d8e:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    7d92:	62 e0       	ldi	r22, 0x02	; 2
    7d94:	80 e0       	ldi	r24, 0x00	; 0
    7d96:	0e 94 da 48 	call	0x91b4	; 0x91b4 <sysclk_enable_module>

	/* ADC - event channels 0, 1, 2, 3 */
	EVSYS.CH0MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH0
    7d9a:	e0 e8       	ldi	r30, 0x80	; 128
    7d9c:	f1 e0       	ldi	r31, 0x01	; 1
    7d9e:	86 ec       	ldi	r24, 0xC6	; 198
    7da0:	80 83       	st	Z, r24
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH0 no digital filtering
    7da2:	10 86       	std	Z+8, r1	; 0x08
	EVSYS.CH1MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH1
    7da4:	81 83       	std	Z+1, r24	; 0x01
	EVSYS.CH1CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH1 no digital filtering
    7da6:	11 86       	std	Z+9, r1	; 0x09
	EVSYS.CH2MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH2
    7da8:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH2 no digital filtering
    7daa:	12 86       	std	Z+10, r1	; 0x0a
	EVSYS.CH3MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH3
    7dac:	83 83       	std	Z+3, r24	; 0x03
	EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH3 no digital filtering
    7dae:	13 86       	std	Z+11, r1	; 0x0b

	/* DAC - event 4 */
	EVSYS.CH4MUX  = EVSYS_CHMUX_TCE1_OVF_gc;									// TCE1 overflow goes to EVSYS CH4
    7db0:	88 ee       	ldi	r24, 0xE8	; 232
    7db2:	84 83       	std	Z+4, r24	; 0x04
	EVSYS.CH4CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH4 no digital filtering
    7db4:	14 86       	std	Z+12, r1	; 0x0c

static void tc_init(void)
{
	/* TCC0: VCTCXO PWM signal generation and ADCA & ADCB */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 2048);						// Init PWM structure and enable timer - running with 2048 Hz --> 2 Hz averaged data
    7db6:	20 e0       	ldi	r18, 0x00	; 0
    7db8:	38 e0       	ldi	r19, 0x08	; 8
    7dba:	43 e0       	ldi	r20, 0x03	; 3
    7dbc:	60 e0       	ldi	r22, 0x00	; 0
    7dbe:	ce 01       	movw	r24, r28
    7dc0:	01 96       	adiw	r24, 0x01	; 1
    7dc2:	5e db       	rcall	.-2372   	; 0x7480 <pwm_init>
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM here. Percentage with 1% granularity is to coarse, use driver access instead
    7dc4:	6d e2       	ldi	r22, 0x2D	; 45
    7dc6:	ce 01       	movw	r24, r28
    7dc8:	01 96       	adiw	r24, 0x01	; 1
    7dca:	22 dc       	rcall	.-1980   	; 0x7610 <pwm_start>
	tc_write_cc_buffer(&TCC0, TC_CCC, (uint16_t) (0.5f + pwm_vctcxo_cfg.period * C_VCTCXO_DEFAULT_VOLTS / C_VCTCXO_PWM_HI_VOLTS));	// Initial value for VCTCXO
    7dcc:	6e 81       	ldd	r22, Y+6	; 0x06
    7dce:	7f 81       	ldd	r23, Y+7	; 0x07
    7dd0:	80 e0       	ldi	r24, 0x00	; 0
    7dd2:	90 e0       	ldi	r25, 0x00	; 0
    7dd4:	0e 94 33 53 	call	0xa666	; 0xa666 <__floatunsisf>
    7dd8:	20 e0       	ldi	r18, 0x00	; 0
    7dda:	30 e0       	ldi	r19, 0x00	; 0
    7ddc:	40 ec       	ldi	r20, 0xC0	; 192
    7dde:	5f e3       	ldi	r21, 0x3F	; 63
    7de0:	0e 94 c1 53 	call	0xa782	; 0xa782 <__mulsf3>
    7de4:	27 e2       	ldi	r18, 0x27	; 39
    7de6:	31 e3       	ldi	r19, 0x31	; 49
    7de8:	40 e5       	ldi	r20, 0x50	; 80
    7dea:	50 e4       	ldi	r21, 0x40	; 64
    7dec:	0e 94 9a 52 	call	0xa534	; 0xa534 <__divsf3>
    7df0:	20 e0       	ldi	r18, 0x00	; 0
    7df2:	30 e0       	ldi	r19, 0x00	; 0
    7df4:	40 e0       	ldi	r20, 0x00	; 0
    7df6:	5f e3       	ldi	r21, 0x3F	; 63
    7df8:	0e 94 36 52 	call	0xa46c	; 0xa46c <__addsf3>
    7dfc:	0e 94 07 53 	call	0xa60e	; 0xa60e <__fixunssfsi>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    7e00:	00 e0       	ldi	r16, 0x00	; 0
    7e02:	18 e0       	ldi	r17, 0x08	; 8
    7e04:	d8 01       	movw	r26, r16
    7e06:	dc 96       	adiw	r26, 0x3c	; 60
    7e08:	6d 93       	st	X+, r22
    7e0a:	7c 93       	st	X, r23
    7e0c:	dd 97       	sbiw	r26, 0x3d	; 61

	/* TCE1: DAC clock */
	tc_enable(&TCE1);
    7e0e:	80 e4       	ldi	r24, 0x40	; 64
    7e10:	9a e0       	ldi	r25, 0x0A	; 10
    7e12:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    7e16:	0f 2e       	mov	r0, r31
    7e18:	f0 e4       	ldi	r31, 0x40	; 64
    7e1a:	ef 2e       	mov	r14, r31
    7e1c:	fa e0       	ldi	r31, 0x0A	; 10
    7e1e:	ff 2e       	mov	r15, r31
    7e20:	f0 2d       	mov	r31, r0
    7e22:	f7 01       	movw	r30, r14
    7e24:	81 81       	ldd	r24, Z+1	; 0x01
    7e26:	88 7f       	andi	r24, 0xF8	; 248
    7e28:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    7e2a:	80 e7       	ldi	r24, 0x70	; 112
    7e2c:	92 e0       	ldi	r25, 0x02	; 2
    7e2e:	86 a3       	std	Z+38, r24	; 0x26
    7e30:	97 a3       	std	Z+39, r25	; 0x27


static void adc_init(void)
{
	/* Disable digital circuits of ADC pins */
	PORTA_PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7e32:	e0 e1       	ldi	r30, 0x10	; 16
    7e34:	f6 e0       	ldi	r31, 0x06	; 6
    7e36:	80 81       	ld	r24, Z
    7e38:	87 60       	ori	r24, 0x07	; 7
    7e3a:	80 83       	st	Z, r24
	PORTA_PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7e3c:	e1 e1       	ldi	r30, 0x11	; 17
    7e3e:	f6 e0       	ldi	r31, 0x06	; 6
    7e40:	80 81       	ld	r24, Z
    7e42:	87 60       	ori	r24, 0x07	; 7
    7e44:	80 83       	st	Z, r24
	PORTA_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7e46:	e2 e1       	ldi	r30, 0x12	; 18
    7e48:	f6 e0       	ldi	r31, 0x06	; 6
    7e4a:	80 81       	ld	r24, Z
    7e4c:	87 60       	ori	r24, 0x07	; 7
    7e4e:	80 83       	st	Z, r24
	PORTA_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7e50:	e3 e1       	ldi	r30, 0x13	; 19
    7e52:	f6 e0       	ldi	r31, 0x06	; 6
    7e54:	80 81       	ld	r24, Z
    7e56:	87 60       	ori	r24, 0x07	; 7
    7e58:	80 83       	st	Z, r24
	PORTA_PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7e5a:	e4 e1       	ldi	r30, 0x14	; 20
    7e5c:	f6 e0       	ldi	r31, 0x06	; 6
    7e5e:	80 81       	ld	r24, Z
    7e60:	87 60       	ori	r24, 0x07	; 7
    7e62:	80 83       	st	Z, r24
	PORTA_PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7e64:	e5 e1       	ldi	r30, 0x15	; 21
    7e66:	f6 e0       	ldi	r31, 0x06	; 6
    7e68:	80 81       	ld	r24, Z
    7e6a:	87 60       	ori	r24, 0x07	; 7
    7e6c:	80 83       	st	Z, r24
	PORTB_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7e6e:	e2 e3       	ldi	r30, 0x32	; 50
    7e70:	f6 e0       	ldi	r31, 0x06	; 6
    7e72:	80 81       	ld	r24, Z
    7e74:	87 60       	ori	r24, 0x07	; 7
    7e76:	80 83       	st	Z, r24
	PORTB_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7e78:	e3 e3       	ldi	r30, 0x33	; 51
    7e7a:	f6 e0       	ldi	r31, 0x06	; 6
    7e7c:	80 81       	ld	r24, Z
    7e7e:	87 60       	ori	r24, 0x07	; 7
    7e80:	80 83       	st	Z, r24

	/* Prepare the structures */
	adc_read_configuration(&ADC_VCTCXO_5V0_VBAT,							&g_adc_a_conf);
    7e82:	6a e0       	ldi	r22, 0x0A	; 10
    7e84:	79 e2       	ldi	r23, 0x29	; 41
    7e86:	80 e0       	ldi	r24, 0x00	; 0
    7e88:	92 e0       	ldi	r25, 0x02	; 2
    7e8a:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <adc_read_configuration>
	adcch_read_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    7e8e:	46 e0       	ldi	r20, 0x06	; 6
    7e90:	59 e2       	ldi	r21, 0x29	; 41
    7e92:	61 e0       	ldi	r22, 0x01	; 1
    7e94:	80 e0       	ldi	r24, 0x00	; 0
    7e96:	92 e0       	ldi	r25, 0x02	; 2
    7e98:	0e 94 74 28 	call	0x50e8	; 0x50e8 <adcch_read_configuration>
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    7e9c:	42 e0       	ldi	r20, 0x02	; 2
    7e9e:	59 e2       	ldi	r21, 0x29	; 41
    7ea0:	62 e0       	ldi	r22, 0x02	; 2
    7ea2:	80 e0       	ldi	r24, 0x00	; 0
    7ea4:	92 e0       	ldi	r25, 0x02	; 2
    7ea6:	0e 94 74 28 	call	0x50e8	; 0x50e8 <adcch_read_configuration>
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    7eaa:	4e ef       	ldi	r20, 0xFE	; 254
    7eac:	58 e2       	ldi	r21, 0x28	; 40
    7eae:	64 e0       	ldi	r22, 0x04	; 4
    7eb0:	80 e0       	ldi	r24, 0x00	; 0
    7eb2:	92 e0       	ldi	r25, 0x02	; 2
    7eb4:	0e 94 74 28 	call	0x50e8	; 0x50e8 <adcch_read_configuration>
	adcch_read_configuration(&ADC_SILENCE, ADC_SILENCE_CH,					&g_adcch_silence_conf);
    7eb8:	4a ef       	ldi	r20, 0xFA	; 250
    7eba:	58 e2       	ldi	r21, 0x28	; 40
    7ebc:	68 e0       	ldi	r22, 0x08	; 8
    7ebe:	80 e0       	ldi	r24, 0x00	; 0
    7ec0:	92 e0       	ldi	r25, 0x02	; 2
    7ec2:	0e 94 74 28 	call	0x50e8	; 0x50e8 <adcch_read_configuration>
	adc_read_configuration(&ADC_TEMP,										&g_adc_b_conf);
    7ec6:	63 ef       	ldi	r22, 0xF3	; 243
    7ec8:	78 e2       	ldi	r23, 0x28	; 40
    7eca:	80 e4       	ldi	r24, 0x40	; 64
    7ecc:	92 e0       	ldi	r25, 0x02	; 2
    7ece:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <adc_read_configuration>
	adcch_read_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    7ed2:	4f ee       	ldi	r20, 0xEF	; 239
    7ed4:	58 e2       	ldi	r21, 0x28	; 40
    7ed6:	61 e0       	ldi	r22, 0x01	; 1
    7ed8:	80 e4       	ldi	r24, 0x40	; 64
    7eda:	92 e0       	ldi	r25, 0x02	; 2
    7edc:	0e 94 74 28 	call	0x50e8	; 0x50e8 <adcch_read_configuration>
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    7ee0:	aa e0       	ldi	r26, 0x0A	; 10
    7ee2:	b9 e2       	ldi	r27, 0x29	; 41
    7ee4:	83 e0       	ldi	r24, 0x03	; 3
    7ee6:	14 96       	adiw	r26, 0x04	; 4
    7ee8:	8c 93       	st	X, r24
    7eea:	14 97       	sbiw	r26, 0x04	; 4
    7eec:	63 ef       	ldi	r22, 0xF3	; 243
    7eee:	78 e2       	ldi	r23, 0x28	; 40
    7ef0:	fb 01       	movw	r30, r22
    7ef2:	d4 82       	std	Z+4, r13	; 0x04
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_disable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl &= ~int_inp;
    7ef4:	12 96       	adiw	r26, 0x02	; 2
    7ef6:	3c 91       	ld	r19, X
    7ef8:	12 97       	sbiw	r26, 0x02	; 2
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    7efa:	22 81       	ldd	r18, Z+2	; 0x02
 * \note Not all device families feature this setting.
 */
static inline void adc_set_current_limit(struct adc_config *conf,
		enum adc_current_limit currlimit)
{
	conf->ctrlb &= ~ADC_CURRLIMIT_gm;
    7efc:	11 96       	adiw	r26, 0x01	; 1
    7efe:	9c 91       	ld	r25, X
    7f00:	11 97       	sbiw	r26, 0x01	; 1
    7f02:	81 81       	ldd	r24, Z+1	; 0x01
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    7f04:	0f 2e       	mov	r0, r31
    7f06:	f6 e0       	ldi	r31, 0x06	; 6
    7f08:	cf 2e       	mov	r12, r31
    7f0a:	f9 e2       	ldi	r31, 0x29	; 41
    7f0c:	df 2e       	mov	r13, r31
    7f0e:	f0 2d       	mov	r31, r0
    7f10:	f6 01       	movw	r30, r12
    7f12:	20 82       	st	Z, r2
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    7f14:	48 e0       	ldi	r20, 0x08	; 8
    7f16:	41 83       	std	Z+1, r20	; 0x01
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    7f18:	0f 2e       	mov	r0, r31
    7f1a:	f2 e0       	ldi	r31, 0x02	; 2
    7f1c:	8f 2e       	mov	r8, r31
    7f1e:	f9 e2       	ldi	r31, 0x29	; 41
    7f20:	9f 2e       	mov	r9, r31
    7f22:	f0 2d       	mov	r31, r0
    7f24:	f4 01       	movw	r30, r8
    7f26:	20 82       	st	Z, r2
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    7f28:	50 e2       	ldi	r21, 0x20	; 32
    7f2a:	51 83       	std	Z+1, r21	; 0x01
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    7f2c:	0f 2e       	mov	r0, r31
    7f2e:	fe ef       	ldi	r31, 0xFE	; 254
    7f30:	af 2e       	mov	r10, r31
    7f32:	f8 e2       	ldi	r31, 0x28	; 40
    7f34:	bf 2e       	mov	r11, r31
    7f36:	f0 2d       	mov	r31, r0
    7f38:	f5 01       	movw	r30, r10
    7f3a:	20 82       	st	Z, r2
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    7f3c:	58 e2       	ldi	r21, 0x28	; 40
    7f3e:	51 83       	std	Z+1, r21	; 0x01
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    7f40:	0f 2e       	mov	r0, r31
    7f42:	fa ef       	ldi	r31, 0xFA	; 250
    7f44:	6f 2e       	mov	r6, r31
    7f46:	f8 e2       	ldi	r31, 0x28	; 40
    7f48:	7f 2e       	mov	r7, r31
    7f4a:	f0 2d       	mov	r31, r0
    7f4c:	f3 01       	movw	r30, r6
    7f4e:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    7f50:	41 83       	std	Z+1, r20	; 0x01
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    7f52:	0f 2e       	mov	r0, r31
    7f54:	ff ee       	ldi	r31, 0xEF	; 239
    7f56:	4f 2e       	mov	r4, r31
    7f58:	f8 e2       	ldi	r31, 0x28	; 40
    7f5a:	5f 2e       	mov	r5, r31
    7f5c:	f0 2d       	mov	r31, r0
    7f5e:	f2 01       	movw	r30, r4
    7f60:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    7f62:	11 82       	std	Z+1, r1	; 0x01
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    7f64:	3e 78       	andi	r19, 0x8E	; 142
    7f66:	32 62       	ori	r19, 0x22	; 34
    7f68:	12 96       	adiw	r26, 0x02	; 2
    7f6a:	3c 93       	st	X, r19
    7f6c:	12 97       	sbiw	r26, 0x02	; 2
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    7f6e:	2f 78       	andi	r18, 0x8F	; 143
    7f70:	23 60       	ori	r18, 0x03	; 3
    7f72:	fb 01       	movw	r30, r22
    7f74:	22 83       	std	Z+2, r18	; 0x02
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    7f76:	22 e0       	ldi	r18, 0x02	; 2
    7f78:	f6 01       	movw	r30, r12
    7f7a:	23 83       	std	Z+3, r18	; 0x03
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    7f7c:	91 70       	andi	r25, 0x01	; 1
    7f7e:	90 64       	ori	r25, 0x40	; 64
    7f80:	11 96       	adiw	r26, 0x01	; 1
    7f82:	9c 93       	st	X, r25
    7f84:	11 97       	sbiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    7f86:	0f 2e       	mov	r0, r31
    7f88:	fc e0       	ldi	r31, 0x0C	; 12
    7f8a:	3f 2e       	mov	r3, r31
    7f8c:	f0 2d       	mov	r31, r0
    7f8e:	13 96       	adiw	r26, 0x03	; 3
    7f90:	3c 92       	st	X, r3
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    7f92:	81 70       	andi	r24, 0x01	; 1
    7f94:	80 66       	ori	r24, 0x60	; 96
    7f96:	db 01       	movw	r26, r22
    7f98:	11 96       	adiw	r26, 0x01	; 1
    7f9a:	8c 93       	st	X, r24
    7f9c:	11 97       	sbiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    7f9e:	13 96       	adiw	r26, 0x03	; 3
    7fa0:	2c 92       	st	X, r2
	/* Trigger */
	adc_set_conversion_trigger(&g_adc_a_conf, ADC_TRIG_EVENT_SINGLE, 4, 1);
	adc_set_conversion_trigger(&g_adc_b_conf, ADC_TRIG_EVENT_SINGLE, 1, 0);

	/* Interrupt service routine */
	adc_set_callback(&ADCA, isr_adc_a);
    7fa2:	6e e6       	ldi	r22, 0x6E	; 110
    7fa4:	7b e3       	ldi	r23, 0x3B	; 59
    7fa6:	80 e0       	ldi	r24, 0x00	; 0
    7fa8:	92 e0       	ldi	r25, 0x02	; 2
    7faa:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <adc_set_callback>
	adc_set_callback(&ADCB, isr_adc_b);
    7fae:	64 ee       	ldi	r22, 0xE4	; 228
    7fb0:	7c e3       	ldi	r23, 0x3C	; 60
    7fb2:	80 e4       	ldi	r24, 0x40	; 64
    7fb4:	92 e0       	ldi	r25, 0x02	; 2
    7fb6:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <adc_set_callback>
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    7fba:	f4 01       	movw	r30, r8
    7fbc:	32 81       	ldd	r19, Z+2	; 0x02
    7fbe:	d5 01       	movw	r26, r10
    7fc0:	12 96       	adiw	r26, 0x02	; 2
    7fc2:	2c 91       	ld	r18, X
    7fc4:	f3 01       	movw	r30, r6
    7fc6:	92 81       	ldd	r25, Z+2	; 0x02
    7fc8:	d2 01       	movw	r26, r4
    7fca:	12 96       	adiw	r26, 0x02	; 2
    7fcc:	8c 91       	ld	r24, X
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    7fce:	f6 01       	movw	r30, r12
    7fd0:	42 81       	ldd	r20, Z+2	; 0x02
    7fd2:	40 7f       	andi	r20, 0xF0	; 240
    7fd4:	41 60       	ori	r20, 0x01	; 1
    7fd6:	42 83       	std	Z+2, r20	; 0x02
    7fd8:	30 7f       	andi	r19, 0xF0	; 240
    7fda:	31 60       	ori	r19, 0x01	; 1
    7fdc:	d4 01       	movw	r26, r8
    7fde:	12 96       	adiw	r26, 0x02	; 2
    7fe0:	3c 93       	st	X, r19
    7fe2:	20 7f       	andi	r18, 0xF0	; 240
    7fe4:	21 60       	ori	r18, 0x01	; 1
    7fe6:	f5 01       	movw	r30, r10
    7fe8:	22 83       	std	Z+2, r18	; 0x02
    7fea:	90 7f       	andi	r25, 0xF0	; 240
    7fec:	91 60       	ori	r25, 0x01	; 1
    7fee:	d3 01       	movw	r26, r6
    7ff0:	12 96       	adiw	r26, 0x02	; 2
    7ff2:	9c 93       	st	X, r25
    7ff4:	80 7f       	andi	r24, 0xF0	; 240
    7ff6:	81 60       	ori	r24, 0x01	; 1
    7ff8:	f2 01       	movw	r30, r4
    7ffa:	82 83       	std	Z+2, r24	; 0x02
	adcch_enable_interrupt(&g_adcch_io_adc5_conf);
	adcch_enable_interrupt(&g_adcch_silence_conf);
	adcch_enable_interrupt(&g_adcch_temp_conf);

	/* Execute the new settings */
	adc_write_configuration(&ADCA,											&g_adc_a_conf);
    7ffc:	6a e0       	ldi	r22, 0x0A	; 10
    7ffe:	79 e2       	ldi	r23, 0x29	; 41
    8000:	80 e0       	ldi	r24, 0x00	; 0
    8002:	92 e0       	ldi	r25, 0x02	; 2
    8004:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <adc_write_configuration>
	adcch_write_configuration(&ADC_VCTCXO_5V0_VBAT,	ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    8008:	a6 01       	movw	r20, r12
    800a:	61 e0       	ldi	r22, 0x01	; 1
    800c:	80 e0       	ldi	r24, 0x00	; 0
    800e:	92 e0       	ldi	r25, 0x02	; 2
    8010:	0e 94 29 28 	call	0x5052	; 0x5052 <adcch_write_configuration>
	adcch_write_configuration(&ADC_IO_ADC4,			ADC_IO_ADC4_CH,			&g_adcch_io_adc4_conf);
    8014:	a4 01       	movw	r20, r8
    8016:	62 e0       	ldi	r22, 0x02	; 2
    8018:	80 e0       	ldi	r24, 0x00	; 0
    801a:	92 e0       	ldi	r25, 0x02	; 2
    801c:	0e 94 29 28 	call	0x5052	; 0x5052 <adcch_write_configuration>
	adcch_write_configuration(&ADC_IO_ADC5,			ADC_IO_ADC5_CH,			&g_adcch_io_adc5_conf);
    8020:	a5 01       	movw	r20, r10
    8022:	64 e0       	ldi	r22, 0x04	; 4
    8024:	80 e0       	ldi	r24, 0x00	; 0
    8026:	92 e0       	ldi	r25, 0x02	; 2
    8028:	0e 94 29 28 	call	0x5052	; 0x5052 <adcch_write_configuration>
	adcch_write_configuration(&ADC_SILENCE,			ADC_SILENCE_CH,			&g_adcch_silence_conf);
    802c:	a3 01       	movw	r20, r6
    802e:	68 e0       	ldi	r22, 0x08	; 8
    8030:	80 e0       	ldi	r24, 0x00	; 0
    8032:	92 e0       	ldi	r25, 0x02	; 2
    8034:	0e 94 29 28 	call	0x5052	; 0x5052 <adcch_write_configuration>
	adc_write_configuration(&ADCB,											&g_adc_b_conf);
    8038:	63 ef       	ldi	r22, 0xF3	; 243
    803a:	78 e2       	ldi	r23, 0x28	; 40
    803c:	80 e4       	ldi	r24, 0x40	; 64
    803e:	92 e0       	ldi	r25, 0x02	; 2
    8040:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <adc_write_configuration>
	adcch_write_configuration(&ADC_TEMP,			ADC_TEMP_CH,			&g_adcch_temp_conf);
    8044:	a2 01       	movw	r20, r4
    8046:	61 e0       	ldi	r22, 0x01	; 1
    8048:	80 e4       	ldi	r24, 0x40	; 64
    804a:	92 e0       	ldi	r25, 0x02	; 2
    804c:	0e 94 29 28 	call	0x5052	; 0x5052 <adcch_write_configuration>
    8050:	61 e2       	ldi	r22, 0x21	; 33
    8052:	70 e0       	ldi	r23, 0x00	; 0
    8054:	82 e0       	ldi	r24, 0x02	; 2
    8056:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    805a:	c8 2e       	mov	r12, r24
    805c:	d1 2c       	mov	r13, r1
		data <<= 8;
    805e:	dc 2c       	mov	r13, r12
    8060:	cc 24       	eor	r12, r12
    8062:	60 e2       	ldi	r22, 0x20	; 32
    8064:	70 e0       	ldi	r23, 0x00	; 0
    8066:	82 e0       	ldi	r24, 0x02	; 2
    8068:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    806c:	c8 2a       	or	r12, r24

	/* Get production signature for calibration */
	ADCA_CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    806e:	c0 92 0c 02 	sts	0x020C, r12	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    8072:	d0 92 0d 02 	sts	0x020D, r13	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    8076:	65 e2       	ldi	r22, 0x25	; 37
    8078:	70 e0       	ldi	r23, 0x00	; 0
    807a:	82 e0       	ldi	r24, 0x02	; 2
    807c:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    8080:	c8 2e       	mov	r12, r24
    8082:	d1 2c       	mov	r13, r1
		data <<= 8;
    8084:	dc 2c       	mov	r13, r12
    8086:	cc 24       	eor	r12, r12
    8088:	64 e2       	ldi	r22, 0x24	; 36
    808a:	70 e0       	ldi	r23, 0x00	; 0
    808c:	82 e0       	ldi	r24, 0x02	; 2
    808e:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCBCAL0);
    8092:	c8 2a       	or	r12, r24
	ADCB_CAL = adc_get_calibration_data(ADC_CAL_ADCB);
    8094:	c0 92 4c 02 	sts	0x024C, r12	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
    8098:	d0 92 4d 02 	sts	0x024D, r13	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
static void isr_dma_dac_ch0_B(enum dma_channel_status status);
static void task_dac(uint32_t now);

static void dac_init(void)
{
	dac_read_configuration(&DAC_DAC, &dac_conf);
    809c:	67 e8       	ldi	r22, 0x87	; 135
    809e:	78 e2       	ldi	r23, 0x28	; 40
    80a0:	80 e2       	ldi	r24, 0x20	; 32
    80a2:	93 e0       	ldi	r25, 0x03	; 3
    80a4:	0e 94 66 29 	call	0x52cc	; 0x52cc <dac_read_configuration>
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    80a8:	e7 e8       	ldi	r30, 0x87	; 135
    80aa:	f8 e2       	ldi	r31, 0x28	; 40
    80ac:	22 82       	std	Z+2, r2	; 0x02
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    80ae:	30 82       	st	Z, r3
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    80b0:	81 81       	ldd	r24, Z+1	; 0x01
    80b2:	8c 79       	andi	r24, 0x9C	; 156
    80b4:	83 64       	ori	r24, 0x43	; 67
    80b6:	81 83       	std	Z+1, r24	; 0x01
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    80b8:	84 e0       	ldi	r24, 0x04	; 4
    80ba:	83 83       	std	Z+3, r24	; 0x03
	dac_set_conversion_parameters(&dac_conf, DAC_REF_BANDGAP, DAC_ADJ_LEFT);
	dac_set_active_channel(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 0);
	dac_set_conversion_trigger(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 4);
	dac_write_configuration(&DAC_DAC, &dac_conf);
    80bc:	bf 01       	movw	r22, r30
    80be:	80 e2       	ldi	r24, 0x20	; 32
    80c0:	93 e0       	ldi	r25, 0x03	; 3
    80c2:	0e 94 0a 29 	call	0x5214	; 0x5214 <dac_write_configuration>
    80c6:	62 e3       	ldi	r22, 0x32	; 50
    80c8:	70 e0       	ldi	r23, 0x00	; 0
    80ca:	82 e0       	ldi	r24, 0x02	; 2
    80cc:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>

	/* Get production signature for calibration */
	DACB_CH0OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB0_OFFSET);
    80d0:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    80d4:	63 e3       	ldi	r22, 0x33	; 51
    80d6:	70 e0       	ldi	r23, 0x00	; 0
    80d8:	82 e0       	ldi	r24, 0x02	; 2
    80da:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
	DACB_CH0GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB0_GAIN);
    80de:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    80e2:	66 e3       	ldi	r22, 0x36	; 54
    80e4:	70 e0       	ldi	r23, 0x00	; 0
    80e6:	82 e0       	ldi	r24, 0x02	; 2
    80e8:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
	DACB_CH1OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB1_OFFSET);
    80ec:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    80f0:	67 e3       	ldi	r22, 0x37	; 55
    80f2:	70 e0       	ldi	r23, 0x00	; 0
    80f4:	82 e0       	ldi	r24, 0x02	; 2
    80f6:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
	DACB_CH1GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB1_GAIN);
    80fa:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
	}
}

static void dma_init(void)
{
	memset(&dmach_dma0_conf, 0, sizeof(dmach_dma0_conf));	// DACB channel 0 - linked with dma1
    80fe:	0f 2e       	mov	r0, r31
    8100:	fc e7       	ldi	r31, 0x7C	; 124
    8102:	af 2e       	mov	r10, r31
    8104:	f8 e2       	ldi	r31, 0x28	; 40
    8106:	bf 2e       	mov	r11, r31
    8108:	f0 2d       	mov	r31, r0
    810a:	8b e0       	ldi	r24, 0x0B	; 11
    810c:	d5 01       	movw	r26, r10
    810e:	e8 2f       	mov	r30, r24
    8110:	1d 92       	st	X+, r1
    8112:	ea 95       	dec	r30
    8114:	e9 f7       	brne	.-6      	; 0x8110 <main+0x3ee>
	memset(&dmach_dma1_conf, 0, sizeof(dmach_dma1_conf));	// DACB channel 0 - linked with dma0
    8116:	0f 2e       	mov	r0, r31
    8118:	f1 e7       	ldi	r31, 0x71	; 113
    811a:	cf 2e       	mov	r12, r31
    811c:	f8 e2       	ldi	r31, 0x28	; 40
    811e:	df 2e       	mov	r13, r31
    8120:	f0 2d       	mov	r31, r0
    8122:	d6 01       	movw	r26, r12
    8124:	1d 92       	st	X+, r1
    8126:	8a 95       	dec	r24
    8128:	e9 f7       	brne	.-6      	; 0x8124 <main+0x402>
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
    812a:	80 e2       	ldi	r24, 0x20	; 32
    812c:	90 e0       	ldi	r25, 0x00	; 0
    812e:	f5 01       	movw	r30, r10
    8130:	84 83       	std	Z+4, r24	; 0x04
    8132:	95 83       	std	Z+5, r25	; 0x05
    8134:	d6 01       	movw	r26, r12
    8136:	14 96       	adiw	r26, 0x04	; 4
    8138:	8d 93       	st	X+, r24
    813a:	9c 93       	st	X, r25
    813c:	15 97       	sbiw	r26, 0x05	; 5
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    813e:	85 e2       	ldi	r24, 0x25	; 37
    8140:	98 e2       	ldi	r25, 0x28	; 40
    8142:	87 83       	std	Z+7, r24	; 0x07
    8144:	90 87       	std	Z+8, r25	; 0x08
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    8146:	29 ed       	ldi	r18, 0xD9	; 217
    8148:	22 83       	std	Z+2, r18	; 0x02
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    814a:	88 e3       	ldi	r24, 0x38	; 56
    814c:	93 e0       	ldi	r25, 0x03	; 3
    814e:	81 87       	std	Z+9, r24	; 0x09
    8150:	92 87       	std	Z+10, r25	; 0x0a
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    8152:	45 e4       	ldi	r20, 0x45	; 69
    8154:	58 e2       	ldi	r21, 0x28	; 40
    8156:	17 96       	adiw	r26, 0x07	; 7
    8158:	4d 93       	st	X+, r20
    815a:	5c 93       	st	X, r21
    815c:	18 97       	sbiw	r26, 0x08	; 8
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    815e:	12 96       	adiw	r26, 0x02	; 2
    8160:	2c 93       	st	X, r18
    8162:	12 97       	sbiw	r26, 0x02	; 2
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    8164:	19 96       	adiw	r26, 0x09	; 9
    8166:	8d 93       	st	X+, r24
    8168:	9c 93       	st	X, r25
    816a:	1a 97       	sbiw	r26, 0x0a	; 10
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    816c:	95 e2       	ldi	r25, 0x25	; 37
    816e:	93 83       	std	Z+3, r25	; 0x03
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    8170:	86 e0       	ldi	r24, 0x06	; 6
    8172:	80 83       	st	Z, r24
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    8174:	13 96       	adiw	r26, 0x03	; 3
    8176:	9c 93       	st	X, r25
    8178:	13 97       	sbiw	r26, 0x03	; 3
	dma_channel_set_single_shot(&dmach_dma0_conf);

	dma_channel_set_trigger_source(&dmach_dma1_conf, DMA_CH_TRIGSRC_DACB_CH0_gc);
	dma_channel_set_single_shot(&dmach_dma1_conf);

	task_dac(rtc_get_time());																		// Calculate DDS increments
    817a:	8c 93       	st	X, r24
    817c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <rtc_get_time>
	tc_init();			// Timers
	adc_init();			// ADC
#ifdef USE_DAC
	dac_init();			// DAC
#endif
	twi_init();			// I2C / TWI
    8180:	61 dc       	rcall	.-1854   	; 0x7a44 <task_dac>
    8182:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <twi_init>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    8186:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <board_init>

	nvm_init(INT_FLASH);
    818a:	80 e0       	ldi	r24, 0x00	; 0
    818c:	0e 94 6f 14 	call	0x28de	; 0x28de <nvm_init>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    8190:	78 94       	sei
    8192:	f8 01       	movw	r30, r16
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    8194:	80 81       	ld	r24, Z
    8196:	80 7f       	andi	r24, 0xF0	; 240
    8198:	81 60       	ori	r24, 0x01	; 1

static void tc_start(void)
{
	/* ADC clock */
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc);							// VCTCXO PWM start, output still is Z-state
	tc_set_overflow_interrupt_callback(&TCC0, isr_tcc0_ovfl);
    819a:	80 83       	st	Z, r24
    819c:	61 e8       	ldi	r22, 0x81	; 129
    819e:	7d e3       	ldi	r23, 0x3D	; 61
    81a0:	80 e0       	ldi	r24, 0x00	; 0
    81a2:	98 e0       	ldi	r25, 0x08	; 8
    81a4:	0e 94 68 30 	call	0x60d0	; 0x60d0 <tc_set_overflow_interrupt_callback>
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    81a8:	d8 01       	movw	r26, r16
    81aa:	16 96       	adiw	r26, 0x06	; 6
    81ac:	8c 91       	ld	r24, X
    81ae:	16 97       	sbiw	r26, 0x06	; 6
    81b0:	8c 7f       	andi	r24, 0xFC	; 252
    81b2:	16 96       	adiw	r26, 0x06	; 6
    81b4:	8c 93       	st	X, r24
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    81b6:	16 97       	sbiw	r26, 0x06	; 6
    81b8:	16 96       	adiw	r26, 0x06	; 6
    81ba:	8c 91       	ld	r24, X
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    81bc:	16 97       	sbiw	r26, 0x06	; 6
    81be:	81 60       	ori	r24, 0x01	; 1
    81c0:	16 96       	adiw	r26, 0x06	; 6
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    81c2:	8c 93       	st	X, r24
    81c4:	f7 01       	movw	r30, r14
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    81c6:	80 81       	ld	r24, Z
    81c8:	80 7f       	andi	r24, 0xF0	; 240
    81ca:	81 60       	ori	r24, 0x01	; 1
	dma_init();
}

static void dac_start(void)
{
	dac_enable(&DACB);
    81cc:	80 83       	st	Z, r24
    81ce:	80 e2       	ldi	r24, 0x20	; 32
    81d0:	93 e0       	ldi	r25, 0x03	; 3
    81d2:	0e 94 de 28 	call	0x51bc	; 0x51bc <dac_enable>
	task_dac(rtc_get_time());																		// Calculate DDS increments
}

static void dma_start(void)
{
	dma_enable();
    81d6:	0e 94 d5 14 	call	0x29aa	; 0x29aa <dma_enable>

	dma_set_callback(DMA_CHANNEL_DACB_CH0_A, isr_dma_dac_ch0_A);
    81da:	6e e5       	ldi	r22, 0x5E	; 94
    81dc:	7e e3       	ldi	r23, 0x3E	; 62
    81de:	80 e0       	ldi	r24, 0x00	; 0
    81e0:	0e 94 f7 14 	call	0x29ee	; 0x29ee <dma_set_callback>
 */
static inline void dma_channel_set_interrupt_level(struct dma_channel_config
		*config, enum dma_int_level_t level)
{
	config->ctrlb &= ~(DMA_CH_ERRINTLVL_gm | DMA_CH_TRNINTLVL_gm);
	config->ctrlb |= (level << DMA_CH_ERRINTLVL_gp)
    81e4:	d5 01       	movw	r26, r10
    81e6:	11 96       	adiw	r26, 0x01	; 1
    81e8:	8c 91       	ld	r24, X
    81ea:	11 97       	sbiw	r26, 0x01	; 1
    81ec:	80 7f       	andi	r24, 0xF0	; 240
    81ee:	8a 60       	ori	r24, 0x0A	; 10
    81f0:	11 96       	adiw	r26, 0x01	; 1
	dma_channel_set_interrupt_level(&dmach_dma0_conf, DMA_INT_LVL_MED);

	dma_set_callback(DMA_CHANNEL_DACB_CH0_B, isr_dma_dac_ch0_B);
    81f2:	8c 93       	st	X, r24
    81f4:	6b e3       	ldi	r22, 0x3B	; 59
    81f6:	7e e3       	ldi	r23, 0x3E	; 62
    81f8:	81 e0       	ldi	r24, 0x01	; 1
    81fa:	0e 94 f7 14 	call	0x29ee	; 0x29ee <dma_set_callback>
    81fe:	f6 01       	movw	r30, r12
    8200:	81 81       	ldd	r24, Z+1	; 0x01
    8202:	80 7f       	andi	r24, 0xF0	; 240
    8204:	8a 60       	ori	r24, 0x0A	; 10

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8206:	81 83       	std	Z+1, r24	; 0x01
    8208:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    820a:	8c 87       	std	Y+12, r24	; 0x0c
	return flags;
    820c:	f8 94       	cli
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_PRIMODE_gm) | primode;
    820e:	9c 85       	ldd	r25, Y+12	; 0x0c
    8210:	e0 e0       	ldi	r30, 0x00	; 0
    8212:	f1 e0       	ldi	r31, 0x01	; 1
    8214:	80 81       	ld	r24, Z
    8216:	8c 7f       	andi	r24, 0xFC	; 252
    8218:	82 60       	ori	r24, 0x02	; 2
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    821a:	80 83       	st	Z, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    821c:	9f bf       	out	0x3f, r25	; 63
    821e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    8220:	8b 87       	std	Y+11, r24	; 0x0b
	return flags;
    8222:	f8 94       	cli
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_DBUFMODE_gm) | dbufmode;
    8224:	9b 85       	ldd	r25, Y+11	; 0x0b
    8226:	80 81       	ld	r24, Z
    8228:	83 7f       	andi	r24, 0xF3	; 243
    822a:	84 60       	ori	r24, 0x04	; 4
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    822c:	80 83       	st	Z, r24
	dma_channel_set_interrupt_level(&dmach_dma1_conf, DMA_INT_LVL_MED);

	dma_set_priority_mode(DMA_PRIMODE_CH01RR23_gc);
	dma_set_double_buffer_mode(DMA_DBUFMODE_CH01_gc);

	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_A, &dmach_dma0_conf);
    822e:	9f bf       	out	0x3f, r25	; 63
    8230:	b5 01       	movw	r22, r10
    8232:	80 e0       	ldi	r24, 0x00	; 0
    8234:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <dma_channel_write_config>
	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_B, &dmach_dma1_conf);
    8238:	b6 01       	movw	r22, r12
    823a:	81 e0       	ldi	r24, 0x01	; 1
    823c:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <dma_channel_write_config>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8240:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    8242:	8e 87       	std	Y+14, r24	; 0x0e
	return flags;
    8244:	f8 94       	cli
	/* IRQ disabled section */
	{
		irqflags_t flags = cpu_irq_save();

		/* Prepare DMA blocks */
		calc_next_frame(&dac_io_dac0_buf[0][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    8246:	fe 84       	ldd	r15, Y+14	; 0x0e
    8248:	05 e6       	ldi	r16, 0x65	; 101
    824a:	18 e2       	ldi	r17, 0x28	; 40
    824c:	27 e0       	ldi	r18, 0x07	; 7
    824e:	30 e2       	ldi	r19, 0x20	; 32
    8250:	4d e6       	ldi	r20, 0x6D	; 109
    8252:	58 e2       	ldi	r21, 0x28	; 40
    8254:	69 e6       	ldi	r22, 0x69	; 105
    8256:	78 e2       	ldi	r23, 0x28	; 40
    8258:	85 e2       	ldi	r24, 0x25	; 37
    825a:	98 e2       	ldi	r25, 0x28	; 40
		calc_next_frame(&dac_io_dac0_buf[1][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    825c:	b3 dc       	rcall	.-1690   	; 0x7bc4 <calc_next_frame>
    825e:	27 e0       	ldi	r18, 0x07	; 7
    8260:	30 e2       	ldi	r19, 0x20	; 32
    8262:	4d e6       	ldi	r20, 0x6D	; 109
    8264:	58 e2       	ldi	r21, 0x28	; 40
    8266:	69 e6       	ldi	r22, 0x69	; 105
    8268:	78 e2       	ldi	r23, 0x28	; 40
    826a:	85 e4       	ldi	r24, 0x45	; 69
    826c:	98 e2       	ldi	r25, 0x28	; 40

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    826e:	aa dc       	rcall	.-1708   	; 0x7bc4 <calc_next_frame>
    8270:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    8272:	8d 87       	std	Y+13, r24	; 0x0d
	return flags;
    8274:	f8 94       	cli
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    8276:	9d 85       	ldd	r25, Y+13	; 0x0d
    8278:	e0 e1       	ldi	r30, 0x10	; 16
    827a:	f1 e0       	ldi	r31, 0x01	; 1
    827c:	80 81       	ld	r24, Z
    827e:	80 68       	ori	r24, 0x80	; 128
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8280:	80 83       	st	Z, r24
    8282:	9f bf       	out	0x3f, r25	; 63
}

static void adc_start(void)
{
	/* Power up after configurations are being set */
	adc_enable(&ADCA);
    8284:	ff be       	out	0x3f, r15	; 63
    8286:	80 e0       	ldi	r24, 0x00	; 0
    8288:	92 e0       	ldi	r25, 0x02	; 2
    828a:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <adc_enable>
	adc_enable(&ADCB);
    828e:	80 e4       	ldi	r24, 0x40	; 64
    8290:	92 e0       	ldi	r25, 0x02	; 2
    8292:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <adc_enable>
}


static void usb_init(void)
{
	udc_start();
    8296:	0e 94 6d 4d 	call	0x9ada	; 0x9ada <udc_start>

#if 1
	stdio_usb_init();	// Init and enable stdio_usb
    829a:	0e 94 c1 50 	call	0xa182	; 0xa182 <stdio_usb_init>
	stdio_usb_enable();
	delay_ms(140);
    829e:	0e 94 bd 50 	call	0xa17a	; 0xa17a <stdio_usb_enable>
    82a2:	61 e6       	ldi	r22, 0x61	; 97
    82a4:	7e ea       	ldi	r23, 0xAE	; 174
    82a6:	8a e0       	ldi	r24, 0x0A	; 10
    82a8:	90 e0       	ldi	r25, 0x00	; 0

	printf("%c\r\n", 0x0c);
    82aa:	04 da       	rcall	.-3064   	; 0x76b4 <__portable_avr_delay_cycles>
    82ac:	1f 92       	push	r1
    82ae:	3f 92       	push	r3
    82b0:	8f e1       	ldi	r24, 0x1F	; 31
    82b2:	94 e2       	ldi	r25, 0x24	; 36
    82b4:	9f 93       	push	r25
    82b6:	8f 93       	push	r24
    82b8:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>
	printf("===============================\r\n");
    82bc:	84 e2       	ldi	r24, 0x24	; 36
    82be:	94 e2       	ldi	r25, 0x24	; 36
    82c0:	0e 94 8a 54 	call	0xa914	; 0xa914 <puts>
	printf("FindMeSAT - USB logging started\r\n");
    82c4:	85 e4       	ldi	r24, 0x45	; 69
    82c6:	94 e2       	ldi	r25, 0x24	; 36
    82c8:	0e 94 8a 54 	call	0xa914	; 0xa914 <puts>
	printf("===============================\r\n\r\n");
    82cc:	86 e6       	ldi	r24, 0x66	; 102
    82ce:	94 e2       	ldi	r25, 0x24	; 36
    82d0:	0e 94 8a 54 	call	0xa914	; 0xa914 <puts>

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB

	/* Start TWI channels */
	twi_start();		// Start TWI
    82d4:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <twi_start>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    82d8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    82da:	88 8b       	std	Y+16, r24	; 0x10
	return flags;
    82dc:	f8 94       	cli

	/* The application code */
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode = WORKMODE_RUN;
    82de:	88 89       	ldd	r24, Y+16	; 0x10
    82e0:	f2 e0       	ldi	r31, 0x02	; 2
    82e2:	f0 93 80 29 	sts	0x2980, r31	; 0x802980 <g_workmode>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    82e6:	8f bf       	out	0x3f, r24	; 63
    82e8:	0f 90       	pop	r0
    82ea:	0f 90       	pop	r0
    82ec:	0f 90       	pop	r0
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    82ee:	0f 90       	pop	r0
    82f0:	0f 2e       	mov	r0, r31
    82f2:	f8 e4       	ldi	r31, 0x48	; 72
    82f4:	2f 2e       	mov	r2, r31
    82f6:	31 2c       	mov	r3, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    82f8:	f0 2d       	mov	r31, r0
    82fa:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    82fc:	8a 87       	std	Y+10, r24	; 0x0a
	return flags;
    82fe:	f8 94       	cli
}

static void task(void)
{
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode;
    8300:	9a 85       	ldd	r25, Y+10	; 0x0a
    8302:	80 91 80 29 	lds	r24, 0x2980	; 0x802980 <g_workmode>
	cpu_irq_restore(flags);

	if (l_workmode == WORKMODE_RUN) {
    8306:	9f bf       	out	0x3f, r25	; 63
    8308:	82 30       	cpi	r24, 0x02	; 2
		uint32_t now = rtc_get_time();
    830a:	09 f0       	breq	.+2      	; 0x830e <main+0x5ec>
    830c:	69 c6       	rjmp	.+3282   	; 0x8fe0 <main+0x12be>
    830e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <rtc_get_time>

		/* TASK when woken up and all ISRs are done */
		task_dac(now);
    8312:	6b 01       	movw	r12, r22
    8314:	7c 01       	movw	r14, r24

static void task_adc(uint32_t now)
{	/* Calculations of the ADC values for the presentation layer */
	static uint32_t adc_last = 0;

	if ((now - adc_last) >= 512 || (now < adc_last)) {
    8316:	96 db       	rcall	.-2260   	; 0x7a44 <task_dac>
    8318:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <adc_last.7543>
    831c:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <adc_last.7543+0x1>
    8320:	a0 91 13 28 	lds	r26, 0x2813	; 0x802813 <adc_last.7543+0x2>
    8324:	b0 91 14 28 	lds	r27, 0x2814	; 0x802814 <adc_last.7543+0x3>
    8328:	b7 01       	movw	r22, r14
    832a:	a6 01       	movw	r20, r12
    832c:	48 1b       	sub	r20, r24
    832e:	59 0b       	sbc	r21, r25
    8330:	6a 0b       	sbc	r22, r26
    8332:	7b 0b       	sbc	r23, r27
    8334:	41 15       	cp	r20, r1
    8336:	52 40       	sbci	r21, 0x02	; 2
    8338:	61 05       	cpc	r22, r1
    833a:	71 05       	cpc	r23, r1
    833c:	30 f4       	brcc	.+12     	; 0x834a <main+0x628>
    833e:	c8 16       	cp	r12, r24
    8340:	d9 06       	cpc	r13, r25
    8342:	ea 06       	cpc	r14, r26
    8344:	fb 06       	cpc	r15, r27
    8346:	08 f0       	brcs	.+2      	; 0x834a <main+0x628>
		adc_last = now;
    8348:	10 c1       	rjmp	.+544    	; 0x856a <main+0x848>
    834a:	c0 92 11 28 	sts	0x2811, r12	; 0x802811 <adc_last.7543>
    834e:	d0 92 12 28 	sts	0x2812, r13	; 0x802812 <adc_last.7543+0x1>
    8352:	e0 92 13 28 	sts	0x2813, r14	; 0x802813 <adc_last.7543+0x2>
    8356:	f0 92 14 28 	sts	0x2814, r15	; 0x802814 <adc_last.7543+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    835a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    835c:	88 87       	std	Y+8, r24	; 0x08
	return flags;
    835e:	f8 94       	cli

		irqflags_t flags = cpu_irq_save();
		uint32_t l_adc_vctcxo_cur	= g_adc_vctcxo_cur;
    8360:	68 85       	ldd	r22, Y+8	; 0x08
    8362:	20 91 eb 28 	lds	r18, 0x28EB	; 0x8028eb <g_adc_vctcxo_cur>
    8366:	30 91 ec 28 	lds	r19, 0x28EC	; 0x8028ec <g_adc_vctcxo_cur+0x1>
    836a:	40 91 ed 28 	lds	r20, 0x28ED	; 0x8028ed <g_adc_vctcxo_cur+0x2>
    836e:	50 91 ee 28 	lds	r21, 0x28EE	; 0x8028ee <g_adc_vctcxo_cur+0x3>
		uint32_t l_adc_5v0_cur		= g_adc_5v0_cur;
    8372:	40 90 e1 28 	lds	r4, 0x28E1	; 0x8028e1 <g_adc_5v0_cur>
    8376:	50 90 e2 28 	lds	r5, 0x28E2	; 0x8028e2 <g_adc_5v0_cur+0x1>
    837a:	60 90 e3 28 	lds	r6, 0x28E3	; 0x8028e3 <g_adc_5v0_cur+0x2>
    837e:	70 90 e4 28 	lds	r7, 0x28E4	; 0x8028e4 <g_adc_5v0_cur+0x3>
		uint32_t l_adc_vbat_cur		= g_adc_vbat_cur;
    8382:	80 90 d7 28 	lds	r8, 0x28D7	; 0x8028d7 <g_adc_vbat_cur>
    8386:	90 90 d8 28 	lds	r9, 0x28D8	; 0x8028d8 <g_adc_vbat_cur+0x1>
    838a:	a0 90 d9 28 	lds	r10, 0x28D9	; 0x8028d9 <g_adc_vbat_cur+0x2>
    838e:	b0 90 da 28 	lds	r11, 0x28DA	; 0x8028da <g_adc_vbat_cur+0x3>
		uint32_t l_adc_io_adc4_cur	= g_adc_io_adc4_cur;
    8392:	80 91 cd 28 	lds	r24, 0x28CD	; 0x8028cd <g_adc_io_adc4_cur>
    8396:	90 91 ce 28 	lds	r25, 0x28CE	; 0x8028ce <g_adc_io_adc4_cur+0x1>
    839a:	a0 91 cf 28 	lds	r26, 0x28CF	; 0x8028cf <g_adc_io_adc4_cur+0x2>
    839e:	b0 91 d0 28 	lds	r27, 0x28D0	; 0x8028d0 <g_adc_io_adc4_cur+0x3>
    83a2:	89 8b       	std	Y+17, r24	; 0x11
    83a4:	9a 8b       	std	Y+18, r25	; 0x12
    83a6:	ab 8b       	std	Y+19, r26	; 0x13
		uint32_t l_adc_io_adc5_cur	= g_adc_io_adc5_cur;
    83a8:	bc 8b       	std	Y+20, r27	; 0x14
    83aa:	80 91 c3 28 	lds	r24, 0x28C3	; 0x8028c3 <g_adc_io_adc5_cur>
    83ae:	90 91 c4 28 	lds	r25, 0x28C4	; 0x8028c4 <g_adc_io_adc5_cur+0x1>
    83b2:	a0 91 c5 28 	lds	r26, 0x28C5	; 0x8028c5 <g_adc_io_adc5_cur+0x2>
    83b6:	b0 91 c6 28 	lds	r27, 0x28C6	; 0x8028c6 <g_adc_io_adc5_cur+0x3>
    83ba:	89 8f       	std	Y+25, r24	; 0x19
    83bc:	9a 8f       	std	Y+26, r25	; 0x1a
    83be:	ab 8f       	std	Y+27, r26	; 0x1b
		uint32_t l_adc_silence_cur	= g_adc_silence_cur;
    83c0:	bc 8f       	std	Y+28, r27	; 0x1c
    83c2:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <g_adc_silence_cur>
    83c6:	90 91 ba 28 	lds	r25, 0x28BA	; 0x8028ba <g_adc_silence_cur+0x1>
    83ca:	a0 91 bb 28 	lds	r26, 0x28BB	; 0x8028bb <g_adc_silence_cur+0x2>
    83ce:	b0 91 bc 28 	lds	r27, 0x28BC	; 0x8028bc <g_adc_silence_cur+0x3>
    83d2:	8d 8f       	std	Y+29, r24	; 0x1d
    83d4:	9e 8f       	std	Y+30, r25	; 0x1e
    83d6:	af 8f       	std	Y+31, r26	; 0x1f
		uint32_t l_adc_temp_cur		= g_adc_temp_cur;
    83d8:	b8 a3       	std	Y+32, r27	; 0x20
    83da:	80 91 af 28 	lds	r24, 0x28AF	; 0x8028af <g_adc_temp_cur>
    83de:	90 91 b0 28 	lds	r25, 0x28B0	; 0x8028b0 <g_adc_temp_cur+0x1>
    83e2:	a0 91 b1 28 	lds	r26, 0x28B1	; 0x8028b1 <g_adc_temp_cur+0x2>
    83e6:	b0 91 b2 28 	lds	r27, 0x28B2	; 0x8028b2 <g_adc_temp_cur+0x3>
    83ea:	8d 8b       	std	Y+21, r24	; 0x15
    83ec:	9e 8b       	std	Y+22, r25	; 0x16
    83ee:	af 8b       	std	Y+23, r26	; 0x17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    83f0:	b8 8f       	std	Y+24, r27	; 0x18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    83f2:	6f bf       	out	0x3f, r22	; 63
    83f4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    83f6:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    83f8:	f8 94       	cli
		int16_t l_adc_io_adc5_volt_1000	= (int16_t) (((  1000UL * l_adc_io_adc5_cur * C_VCC_3V0_AREF_VOLTS                   ) / C_ADC_STEPS));
		int16_t l_adc_silence_volt_1000	= (int16_t) (((  1000UL * l_adc_silence_cur * C_VCC_3V0_AREF_VOLTS                   ) / C_ADC_STEPS));
		int16_t l_adc_temp_deg_100		= (int16_t) ((((  100UL * l_adc_temp_cur                           * C_TEMPSENSE_MULT) / C_ADC_STEPS))  -  100 * C_0DEGC_K);

		flags = cpu_irq_save();
		g_adc_vctcxo_volt_1000	= l_adc_vctcxo_volt_1000;
    83fa:	19 81       	ldd	r17, Y+1	; 0x01
    83fc:	a8 eb       	ldi	r26, 0xB8	; 184
    83fe:	bb e0       	ldi	r27, 0x0B	; 11
    8400:	0e 94 8b 51 	call	0xa316	; 0xa316 <__muluhisi3>
    8404:	05 2e       	mov	r0, r21
    8406:	54 e1       	ldi	r21, 0x14	; 20
    8408:	96 95       	lsr	r25
    840a:	87 95       	ror	r24
    840c:	77 95       	ror	r23
    840e:	67 95       	ror	r22
    8410:	5a 95       	dec	r21
    8412:	d1 f7       	brne	.-12     	; 0x8408 <main+0x6e6>
    8414:	50 2d       	mov	r21, r0
    8416:	0e 94 33 53 	call	0xa666	; 0xa666 <__floatunsisf>
    841a:	20 e0       	ldi	r18, 0x00	; 0
    841c:	30 e0       	ldi	r19, 0x00	; 0
    841e:	4c e3       	ldi	r20, 0x3C	; 60
    8420:	52 e4       	ldi	r21, 0x42	; 66
    8422:	0e 94 35 52 	call	0xa46a	; 0xa46a <__subsf3>
    8426:	0e 94 02 53 	call	0xa604	; 0xa604 <__fixsfsi>
    842a:	60 93 a7 28 	sts	0x28A7, r22	; 0x8028a7 <g_adc_vctcxo_volt_1000>
    842e:	70 93 a8 28 	sts	0x28A8, r23	; 0x8028a8 <g_adc_vctcxo_volt_1000+0x1>
		g_adc_5v0_volt_1000		= l_adc_5v0_volt_1000;
    8432:	a8 eb       	ldi	r26, 0xB8	; 184
    8434:	bb e0       	ldi	r27, 0x0B	; 11
    8436:	a3 01       	movw	r20, r6
    8438:	92 01       	movw	r18, r4
    843a:	0e 94 8b 51 	call	0xa316	; 0xa316 <__muluhisi3>
    843e:	0e 94 33 53 	call	0xa666	; 0xa666 <__floatunsisf>
    8442:	29 ed       	ldi	r18, 0xD9	; 217
    8444:	38 ed       	ldi	r19, 0xD8	; 216
    8446:	4a e1       	ldi	r20, 0x1A	; 26
    8448:	50 e4       	ldi	r21, 0x40	; 64
    844a:	0e 94 c1 53 	call	0xa782	; 0xa782 <__mulsf3>
    844e:	20 e0       	ldi	r18, 0x00	; 0
    8450:	30 e0       	ldi	r19, 0x00	; 0
    8452:	40 e8       	ldi	r20, 0x80	; 128
    8454:	55 e3       	ldi	r21, 0x35	; 53
    8456:	0e 94 c1 53 	call	0xa782	; 0xa782 <__mulsf3>
    845a:	0e 94 02 53 	call	0xa604	; 0xa604 <__fixsfsi>
    845e:	60 93 a5 28 	sts	0x28A5, r22	; 0x8028a5 <g_adc_5v0_volt_1000>
    8462:	70 93 a6 28 	sts	0x28A6, r23	; 0x8028a6 <g_adc_5v0_volt_1000+0x1>
		g_adc_vbat_volt_1000	= l_adc_vbat_volt_1000;
    8466:	a8 eb       	ldi	r26, 0xB8	; 184
    8468:	bb e0       	ldi	r27, 0x0B	; 11
    846a:	a5 01       	movw	r20, r10
    846c:	94 01       	movw	r18, r8
    846e:	0e 94 8b 51 	call	0xa316	; 0xa316 <__muluhisi3>
    8472:	0e 94 33 53 	call	0xa666	; 0xa666 <__floatunsisf>
    8476:	23 ee       	ldi	r18, 0xE3	; 227
    8478:	35 e4       	ldi	r19, 0x45	; 69
    847a:	4b e1       	ldi	r20, 0x1B	; 27
    847c:	50 e4       	ldi	r21, 0x40	; 64
    847e:	0e 94 c1 53 	call	0xa782	; 0xa782 <__mulsf3>
    8482:	20 e0       	ldi	r18, 0x00	; 0
    8484:	30 e0       	ldi	r19, 0x00	; 0
    8486:	40 e8       	ldi	r20, 0x80	; 128
    8488:	55 e3       	ldi	r21, 0x35	; 53
    848a:	0e 94 c1 53 	call	0xa782	; 0xa782 <__mulsf3>
    848e:	0e 94 02 53 	call	0xa604	; 0xa604 <__fixsfsi>
    8492:	60 93 a3 28 	sts	0x28A3, r22	; 0x8028a3 <g_adc_vbat_volt_1000>
    8496:	70 93 a4 28 	sts	0x28A4, r23	; 0x8028a4 <g_adc_vbat_volt_1000+0x1>
		g_adc_io_adc4_volt_1000	= l_adc_io_adc4_volt_1000;
    849a:	a8 eb       	ldi	r26, 0xB8	; 184
    849c:	bb e0       	ldi	r27, 0x0B	; 11
    849e:	29 89       	ldd	r18, Y+17	; 0x11
    84a0:	3a 89       	ldd	r19, Y+18	; 0x12
    84a2:	4b 89       	ldd	r20, Y+19	; 0x13
    84a4:	5c 89       	ldd	r21, Y+20	; 0x14
    84a6:	0e 94 8b 51 	call	0xa316	; 0xa316 <__muluhisi3>
    84aa:	dc 01       	movw	r26, r24
    84ac:	cb 01       	movw	r24, r22
    84ae:	07 2e       	mov	r0, r23
    84b0:	74 e1       	ldi	r23, 0x14	; 20
    84b2:	b6 95       	lsr	r27
    84b4:	a7 95       	ror	r26
    84b6:	97 95       	ror	r25
    84b8:	87 95       	ror	r24
    84ba:	7a 95       	dec	r23
    84bc:	d1 f7       	brne	.-12     	; 0x84b2 <main+0x790>
    84be:	70 2d       	mov	r23, r0
    84c0:	80 93 a1 28 	sts	0x28A1, r24	; 0x8028a1 <g_adc_io_adc4_volt_1000>
    84c4:	90 93 a2 28 	sts	0x28A2, r25	; 0x8028a2 <g_adc_io_adc4_volt_1000+0x1>
		g_adc_io_adc5_volt_1000	= l_adc_io_adc5_volt_1000;
    84c8:	a8 eb       	ldi	r26, 0xB8	; 184
    84ca:	bb e0       	ldi	r27, 0x0B	; 11
    84cc:	29 8d       	ldd	r18, Y+25	; 0x19
    84ce:	3a 8d       	ldd	r19, Y+26	; 0x1a
    84d0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    84d2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    84d4:	0e 94 8b 51 	call	0xa316	; 0xa316 <__muluhisi3>
    84d8:	dc 01       	movw	r26, r24
    84da:	cb 01       	movw	r24, r22
    84dc:	07 2e       	mov	r0, r23
    84de:	74 e1       	ldi	r23, 0x14	; 20
    84e0:	b6 95       	lsr	r27
    84e2:	a7 95       	ror	r26
    84e4:	97 95       	ror	r25
    84e6:	87 95       	ror	r24
    84e8:	7a 95       	dec	r23
    84ea:	d1 f7       	brne	.-12     	; 0x84e0 <main+0x7be>
    84ec:	70 2d       	mov	r23, r0
    84ee:	80 93 9f 28 	sts	0x289F, r24	; 0x80289f <g_adc_io_adc5_volt_1000>
    84f2:	90 93 a0 28 	sts	0x28A0, r25	; 0x8028a0 <g_adc_io_adc5_volt_1000+0x1>
		g_adc_silence_volt_1000	= l_adc_silence_volt_1000;
    84f6:	a8 eb       	ldi	r26, 0xB8	; 184
    84f8:	bb e0       	ldi	r27, 0x0B	; 11
    84fa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    84fc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    84fe:	4f 8d       	ldd	r20, Y+31	; 0x1f
    8500:	58 a1       	ldd	r21, Y+32	; 0x20
    8502:	0e 94 8b 51 	call	0xa316	; 0xa316 <__muluhisi3>
    8506:	dc 01       	movw	r26, r24
    8508:	cb 01       	movw	r24, r22
    850a:	07 2e       	mov	r0, r23
    850c:	74 e1       	ldi	r23, 0x14	; 20
    850e:	b6 95       	lsr	r27
    8510:	a7 95       	ror	r26
    8512:	97 95       	ror	r25
    8514:	87 95       	ror	r24
    8516:	7a 95       	dec	r23
    8518:	d1 f7       	brne	.-12     	; 0x850e <main+0x7ec>
    851a:	70 2d       	mov	r23, r0
    851c:	80 93 9d 28 	sts	0x289D, r24	; 0x80289d <g_adc_silence_volt_1000>
    8520:	90 93 9e 28 	sts	0x289E, r25	; 0x80289e <g_adc_silence_volt_1000+0x1>
		g_adc_temp_deg_100		= l_adc_temp_deg_100;
    8524:	a4 e6       	ldi	r26, 0x64	; 100
    8526:	b0 e0       	ldi	r27, 0x00	; 0
    8528:	2d 89       	ldd	r18, Y+21	; 0x15
    852a:	3e 89       	ldd	r19, Y+22	; 0x16
    852c:	4f 89       	ldd	r20, Y+23	; 0x17
    852e:	58 8d       	ldd	r21, Y+24	; 0x18
    8530:	0e 94 8b 51 	call	0xa316	; 0xa316 <__muluhisi3>
    8534:	0e 94 33 53 	call	0xa666	; 0xa666 <__floatunsisf>
    8538:	2d ec       	ldi	r18, 0xCD	; 205
    853a:	3c e4       	ldi	r19, 0x4C	; 76
    853c:	4d e1       	ldi	r20, 0x1D	; 29
    853e:	54 e4       	ldi	r21, 0x44	; 68
    8540:	0e 94 c1 53 	call	0xa782	; 0xa782 <__mulsf3>
    8544:	20 e0       	ldi	r18, 0x00	; 0
    8546:	30 e0       	ldi	r19, 0x00	; 0
    8548:	40 e8       	ldi	r20, 0x80	; 128
    854a:	55 e3       	ldi	r21, 0x35	; 53
    854c:	0e 94 c1 53 	call	0xa782	; 0xa782 <__mulsf3>
    8550:	20 e0       	ldi	r18, 0x00	; 0
    8552:	36 e6       	ldi	r19, 0x66	; 102
    8554:	45 ed       	ldi	r20, 0xD5	; 213
    8556:	56 e4       	ldi	r21, 0x46	; 70
    8558:	0e 94 35 52 	call	0xa46a	; 0xa46a <__subsf3>
    855c:	0e 94 02 53 	call	0xa604	; 0xa604 <__fixsfsi>
    8560:	60 93 9b 28 	sts	0x289B, r22	; 0x80289b <g_adc_temp_deg_100>
    8564:	70 93 9c 28 	sts	0x289C, r23	; 0x80289c <g_adc_temp_deg_100+0x1>

static void task_twi(uint32_t now)
{	/* Calculations for the presentation layer and display */

	/* TWI1 - SIM808, Hygro, Gyro, Baro devices */
	task_twi1_onboard(now);
    8568:	1f bf       	out	0x3f, r17	; 63
    856a:	c7 01       	movw	r24, r14
    856c:	b6 01       	movw	r22, r12
    856e:	0e 94 65 1e 	call	0x3cca	; 0x3cca <task_twi1_onboard>

	/* TWI2 - LCD Port */
	task_twi2_lcd(now);
    8572:	c7 01       	movw	r24, r14
    8574:	b6 01       	movw	r22, r12
    8576:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <task_twi2_lcd>
}

static void task_usb(uint32_t now)
{
	if (usb_cdc_transfers_autorized) {
    857a:	80 91 7f 29 	lds	r24, 0x297F	; 0x80297f <usb_cdc_transfers_autorized>
    857e:	88 23       	and	r24, r24
    8580:	09 f4       	brne	.+2      	; 0x8584 <main+0x862>
		// stdio_usb_init();
		// stdio_usb_enable();
#endif

		/* Monitoring at the USB serial terminal */
		if (((now - usb_last) >= 512) || (now < usb_last)) {
    8582:	2e c5       	rjmp	.+2652   	; 0x8fe0 <main+0x12be>
    8584:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <usb_last.7565>
    8588:	90 91 0e 28 	lds	r25, 0x280E	; 0x80280e <usb_last.7565+0x1>
    858c:	a0 91 0f 28 	lds	r26, 0x280F	; 0x80280f <usb_last.7565+0x2>
    8590:	b0 91 10 28 	lds	r27, 0x2810	; 0x802810 <usb_last.7565+0x3>
    8594:	b7 01       	movw	r22, r14
    8596:	a6 01       	movw	r20, r12
    8598:	48 1b       	sub	r20, r24
    859a:	59 0b       	sbc	r21, r25
    859c:	6a 0b       	sbc	r22, r26
    859e:	7b 0b       	sbc	r23, r27
    85a0:	41 15       	cp	r20, r1
    85a2:	52 40       	sbci	r21, 0x02	; 2
    85a4:	61 05       	cpc	r22, r1
    85a6:	71 05       	cpc	r23, r1
    85a8:	30 f4       	brcc	.+12     	; 0x85b6 <main+0x894>
    85aa:	c8 16       	cp	r12, r24
    85ac:	d9 06       	cpc	r13, r25
    85ae:	ea 06       	cpc	r14, r26
    85b0:	fb 06       	cpc	r15, r27
    85b2:	08 f0       	brcs	.+2      	; 0x85b6 <main+0x894>
			usb_last = now;
    85b4:	15 c5       	rjmp	.+2602   	; 0x8fe0 <main+0x12be>
    85b6:	c0 92 0d 28 	sts	0x280D, r12	; 0x80280d <usb_last.7565>
    85ba:	d0 92 0e 28 	sts	0x280E, r13	; 0x80280e <usb_last.7565+0x1>
    85be:	e0 92 0f 28 	sts	0x280F, r14	; 0x80280f <usb_last.7565+0x2>
    85c2:	f0 92 10 28 	sts	0x2810, r15	; 0x802810 <usb_last.7565+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    85c6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    85c8:	89 87       	std	Y+9, r24	; 0x09
	return flags;
    85ca:	f8 94       	cli

			flags = cpu_irq_save();
			int16_t l_adc_vctcxo_volt_1000		= g_adc_vctcxo_volt_1000;
    85cc:	49 85       	ldd	r20, Y+9	; 0x09
    85ce:	80 90 a7 28 	lds	r8, 0x28A7	; 0x8028a7 <g_adc_vctcxo_volt_1000>
    85d2:	89 ae       	std	Y+57, r8	; 0x39
    85d4:	90 90 a8 28 	lds	r9, 0x28A8	; 0x8028a8 <g_adc_vctcxo_volt_1000+0x1>
			int16_t l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    85d8:	9a ae       	std	Y+58, r9	; 0x3a
    85da:	a0 90 a5 28 	lds	r10, 0x28A5	; 0x8028a5 <g_adc_5v0_volt_1000>
    85de:	ab ae       	std	Y+59, r10	; 0x3b
    85e0:	b0 90 a6 28 	lds	r11, 0x28A6	; 0x8028a6 <g_adc_5v0_volt_1000+0x1>
			int16_t l_adc_vbat_volt_1000		= g_adc_vbat_volt_1000;
    85e4:	bc ae       	std	Y+60, r11	; 0x3c
    85e6:	80 90 a3 28 	lds	r8, 0x28A3	; 0x8028a3 <g_adc_vbat_volt_1000>
    85ea:	8d ae       	std	Y+61, r8	; 0x3d
    85ec:	90 90 a4 28 	lds	r9, 0x28A4	; 0x8028a4 <g_adc_vbat_volt_1000+0x1>
			int16_t l_adc_io_adc4_volt_1000		= g_adc_io_adc4_volt_1000;
    85f0:	9e ae       	std	Y+62, r9	; 0x3e
    85f2:	a0 90 a1 28 	lds	r10, 0x28A1	; 0x8028a1 <g_adc_io_adc4_volt_1000>
    85f6:	af ae       	std	Y+63, r10	; 0x3f
    85f8:	b0 90 a2 28 	lds	r11, 0x28A2	; 0x8028a2 <g_adc_io_adc4_volt_1000+0x1>
    85fc:	21 96       	adiw	r28, 0x01	; 1
    85fe:	bf ae       	std	Y+63, r11	; 0x3f
			int16_t l_adc_io_adc5_volt_1000		= g_adc_io_adc5_volt_1000;
    8600:	21 97       	sbiw	r28, 0x01	; 1
    8602:	80 90 9f 28 	lds	r8, 0x289F	; 0x80289f <g_adc_io_adc5_volt_1000>
    8606:	22 96       	adiw	r28, 0x02	; 2
    8608:	8f ae       	std	Y+63, r8	; 0x3f
    860a:	22 97       	sbiw	r28, 0x02	; 2
    860c:	90 90 a0 28 	lds	r9, 0x28A0	; 0x8028a0 <g_adc_io_adc5_volt_1000+0x1>
    8610:	23 96       	adiw	r28, 0x03	; 3
    8612:	9f ae       	std	Y+63, r9	; 0x3f
			int16_t l_adc_silence_volt_1000		= g_adc_silence_volt_1000;
    8614:	23 97       	sbiw	r28, 0x03	; 3
    8616:	a0 90 9d 28 	lds	r10, 0x289D	; 0x80289d <g_adc_silence_volt_1000>
    861a:	24 96       	adiw	r28, 0x04	; 4
    861c:	af ae       	std	Y+63, r10	; 0x3f
    861e:	24 97       	sbiw	r28, 0x04	; 4
    8620:	b0 90 9e 28 	lds	r11, 0x289E	; 0x80289e <g_adc_silence_volt_1000+0x1>
    8624:	25 96       	adiw	r28, 0x05	; 5
    8626:	bf ae       	std	Y+63, r11	; 0x3f
			int16_t l_adc_temp_deg_100			= g_adc_temp_deg_100;
    8628:	25 97       	sbiw	r28, 0x05	; 5
    862a:	80 90 9b 28 	lds	r8, 0x289B	; 0x80289b <g_adc_temp_deg_100>
    862e:	90 90 9c 28 	lds	r9, 0x289C	; 0x80289c <g_adc_temp_deg_100+0x1>
    8632:	89 8a       	std	Y+17, r8	; 0x11
			int32_t l_twi1_baro_temp_100		= g_twi1_baro_temp_100;
    8634:	9a 8a       	std	Y+18, r9	; 0x12
    8636:	40 90 20 29 	lds	r4, 0x2920	; 0x802920 <g_twi1_baro_temp_100>
    863a:	50 90 21 29 	lds	r5, 0x2921	; 0x802921 <g_twi1_baro_temp_100+0x1>
    863e:	60 90 22 29 	lds	r6, 0x2922	; 0x802922 <g_twi1_baro_temp_100+0x2>
    8642:	70 90 23 29 	lds	r7, 0x2923	; 0x802923 <g_twi1_baro_temp_100+0x3>
			int32_t l_twi1_baro_p_100			= g_twi1_baro_p_100;
    8646:	00 91 1c 29 	lds	r16, 0x291C	; 0x80291c <g_twi1_baro_p_100>
    864a:	10 91 1d 29 	lds	r17, 0x291D	; 0x80291d <g_twi1_baro_p_100+0x1>
    864e:	20 91 1e 29 	lds	r18, 0x291E	; 0x80291e <g_twi1_baro_p_100+0x2>
    8652:	30 91 1f 29 	lds	r19, 0x291F	; 0x80291f <g_twi1_baro_p_100+0x3>
			int16_t l_twi1_hygro_T_100			= g_twi1_hygro_T_100;
    8656:	e0 91 14 29 	lds	r30, 0x2914	; 0x802914 <g_twi1_hygro_T_100>
    865a:	f0 91 15 29 	lds	r31, 0x2915	; 0x802915 <g_twi1_hygro_T_100+0x1>
			int16_t l_twi1_hygro_RH_100			= g_twi1_hygro_RH_100;
    865e:	80 91 12 29 	lds	r24, 0x2912	; 0x802912 <g_twi1_hygro_RH_100>
    8662:	90 91 13 29 	lds	r25, 0x2913	; 0x802913 <g_twi1_hygro_RH_100+0x1>
			int16_t	l_twi1_gyro_1_accel_x		= g_twi1_gyro_1_accel_x;
    8666:	90 90 71 29 	lds	r9, 0x2971	; 0x802971 <g_twi1_gyro_1_accel_x>
    866a:	69 96       	adiw	r28, 0x19	; 25
    866c:	9f ae       	std	Y+63, r9	; 0x3f
    866e:	69 97       	sbiw	r28, 0x19	; 25
    8670:	a0 90 72 29 	lds	r10, 0x2972	; 0x802972 <g_twi1_gyro_1_accel_x+0x1>
    8674:	6a 96       	adiw	r28, 0x1a	; 26
    8676:	af ae       	std	Y+63, r10	; 0x3f
			int16_t	l_twi1_gyro_1_accel_y		= g_twi1_gyro_1_accel_y;
    8678:	6a 97       	sbiw	r28, 0x1a	; 26
    867a:	b0 90 6f 29 	lds	r11, 0x296F	; 0x80296f <g_twi1_gyro_1_accel_y>
    867e:	6b 96       	adiw	r28, 0x1b	; 27
    8680:	bf ae       	std	Y+63, r11	; 0x3f
    8682:	6b 97       	sbiw	r28, 0x1b	; 27
    8684:	80 90 70 29 	lds	r8, 0x2970	; 0x802970 <g_twi1_gyro_1_accel_y+0x1>
    8688:	6c 96       	adiw	r28, 0x1c	; 28
    868a:	8f ae       	std	Y+63, r8	; 0x3f
			int16_t	l_twi1_gyro_1_accel_z		= g_twi1_gyro_1_accel_z;
    868c:	6c 97       	sbiw	r28, 0x1c	; 28
    868e:	90 90 6d 29 	lds	r9, 0x296D	; 0x80296d <g_twi1_gyro_1_accel_z>
    8692:	6d 96       	adiw	r28, 0x1d	; 29
    8694:	9f ae       	std	Y+63, r9	; 0x3f
    8696:	6d 97       	sbiw	r28, 0x1d	; 29
    8698:	a0 90 6e 29 	lds	r10, 0x296E	; 0x80296e <g_twi1_gyro_1_accel_z+0x1>
    869c:	6e 96       	adiw	r28, 0x1e	; 30
    869e:	af ae       	std	Y+63, r10	; 0x3f
			int16_t	l_twi1_gyro_1_accel_x_mg	= g_twi1_gyro_1_accel_x_mg;
    86a0:	6e 97       	sbiw	r28, 0x1e	; 30
    86a2:	80 90 6b 29 	lds	r8, 0x296B	; 0x80296b <g_twi1_gyro_1_accel_x_mg>
    86a6:	90 90 6c 29 	lds	r9, 0x296C	; 0x80296c <g_twi1_gyro_1_accel_x_mg+0x1>
    86aa:	89 8e       	std	Y+25, r8	; 0x19
			int16_t	l_twi1_gyro_1_accel_y_mg	= g_twi1_gyro_1_accel_y_mg;
    86ac:	9a 8e       	std	Y+26, r9	; 0x1a
    86ae:	a0 90 69 29 	lds	r10, 0x2969	; 0x802969 <g_twi1_gyro_1_accel_y_mg>
    86b2:	b0 90 6a 29 	lds	r11, 0x296A	; 0x80296a <g_twi1_gyro_1_accel_y_mg+0x1>
    86b6:	ad 8e       	std	Y+29, r10	; 0x1d
			int16_t	l_twi1_gyro_1_accel_z_mg	= g_twi1_gyro_1_accel_z_mg;
    86b8:	be 8e       	std	Y+30, r11	; 0x1e
    86ba:	80 90 67 29 	lds	r8, 0x2967	; 0x802967 <g_twi1_gyro_1_accel_z_mg>
    86be:	90 90 68 29 	lds	r9, 0x2968	; 0x802968 <g_twi1_gyro_1_accel_z_mg+0x1>
    86c2:	8d 8a       	std	Y+21, r8	; 0x15
			int16_t l_twi1_gyro_1_gyro_x		= g_twi1_gyro_1_gyro_x;
    86c4:	9e 8a       	std	Y+22, r9	; 0x16
    86c6:	90 90 65 29 	lds	r9, 0x2965	; 0x802965 <g_twi1_gyro_1_gyro_x>
    86ca:	6f 96       	adiw	r28, 0x1f	; 31
    86cc:	9f ae       	std	Y+63, r9	; 0x3f
    86ce:	6f 97       	sbiw	r28, 0x1f	; 31
    86d0:	a0 90 66 29 	lds	r10, 0x2966	; 0x802966 <g_twi1_gyro_1_gyro_x+0x1>
    86d4:	a0 96       	adiw	r28, 0x20	; 32
    86d6:	af ae       	std	Y+63, r10	; 0x3f
			int16_t l_twi1_gyro_1_gyro_y		= g_twi1_gyro_1_gyro_y;
    86d8:	a0 97       	sbiw	r28, 0x20	; 32
    86da:	b0 90 63 29 	lds	r11, 0x2963	; 0x802963 <g_twi1_gyro_1_gyro_y>
    86de:	a1 96       	adiw	r28, 0x21	; 33
    86e0:	bf ae       	std	Y+63, r11	; 0x3f
    86e2:	a1 97       	sbiw	r28, 0x21	; 33
    86e4:	80 90 64 29 	lds	r8, 0x2964	; 0x802964 <g_twi1_gyro_1_gyro_y+0x1>
    86e8:	a2 96       	adiw	r28, 0x22	; 34
    86ea:	8f ae       	std	Y+63, r8	; 0x3f
			int16_t l_twi1_gyro_1_gyro_z		= g_twi1_gyro_1_gyro_z;
    86ec:	a2 97       	sbiw	r28, 0x22	; 34
    86ee:	90 90 61 29 	lds	r9, 0x2961	; 0x802961 <g_twi1_gyro_1_gyro_z>
    86f2:	a3 96       	adiw	r28, 0x23	; 35
    86f4:	9f ae       	std	Y+63, r9	; 0x3f
    86f6:	a3 97       	sbiw	r28, 0x23	; 35
    86f8:	a0 90 62 29 	lds	r10, 0x2962	; 0x802962 <g_twi1_gyro_1_gyro_z+0x1>
    86fc:	a4 96       	adiw	r28, 0x24	; 36
    86fe:	af ae       	std	Y+63, r10	; 0x3f
			int32_t	l_twi1_gyro_1_gyro_x_mdps	= g_twi1_gyro_1_gyro_x_mdps;
    8700:	a4 97       	sbiw	r28, 0x24	; 36
    8702:	80 90 5d 29 	lds	r8, 0x295D	; 0x80295d <g_twi1_gyro_1_gyro_x_mdps>
    8706:	90 90 5e 29 	lds	r9, 0x295E	; 0x80295e <g_twi1_gyro_1_gyro_x_mdps+0x1>
    870a:	a0 90 5f 29 	lds	r10, 0x295F	; 0x80295f <g_twi1_gyro_1_gyro_x_mdps+0x2>
    870e:	b0 90 60 29 	lds	r11, 0x2960	; 0x802960 <g_twi1_gyro_1_gyro_x_mdps+0x3>
    8712:	89 a2       	std	Y+33, r8	; 0x21
    8714:	9a a2       	std	Y+34, r9	; 0x22
    8716:	ab a2       	std	Y+35, r10	; 0x23
			int32_t	l_twi1_gyro_1_gyro_y_mdps	= g_twi1_gyro_1_gyro_y_mdps;
    8718:	bc a2       	std	Y+36, r11	; 0x24
    871a:	80 90 59 29 	lds	r8, 0x2959	; 0x802959 <g_twi1_gyro_1_gyro_y_mdps>
    871e:	90 90 5a 29 	lds	r9, 0x295A	; 0x80295a <g_twi1_gyro_1_gyro_y_mdps+0x1>
    8722:	a0 90 5b 29 	lds	r10, 0x295B	; 0x80295b <g_twi1_gyro_1_gyro_y_mdps+0x2>
    8726:	b0 90 5c 29 	lds	r11, 0x295C	; 0x80295c <g_twi1_gyro_1_gyro_y_mdps+0x3>
    872a:	8d a2       	std	Y+37, r8	; 0x25
    872c:	9e a2       	std	Y+38, r9	; 0x26
    872e:	af a2       	std	Y+39, r10	; 0x27
			int32_t	l_twi1_gyro_1_gyro_z_mdps	= g_twi1_gyro_1_gyro_z_mdps;
    8730:	b8 a6       	std	Y+40, r11	; 0x28
    8732:	80 90 55 29 	lds	r8, 0x2955	; 0x802955 <g_twi1_gyro_1_gyro_z_mdps>
    8736:	90 90 56 29 	lds	r9, 0x2956	; 0x802956 <g_twi1_gyro_1_gyro_z_mdps+0x1>
    873a:	a0 90 57 29 	lds	r10, 0x2957	; 0x802957 <g_twi1_gyro_1_gyro_z_mdps+0x2>
    873e:	b0 90 58 29 	lds	r11, 0x2958	; 0x802958 <g_twi1_gyro_1_gyro_z_mdps+0x3>
    8742:	89 a6       	std	Y+41, r8	; 0x29
    8744:	9a a6       	std	Y+42, r9	; 0x2a
    8746:	ab a6       	std	Y+43, r10	; 0x2b
			int16_t	l_twi1_gyro_1_temp			= g_twi1_gyro_1_temp;
    8748:	bc a6       	std	Y+44, r11	; 0x2c
    874a:	90 90 77 29 	lds	r9, 0x2977	; 0x802977 <g_twi1_gyro_1_temp>
    874e:	a5 96       	adiw	r28, 0x25	; 37
    8750:	9f ae       	std	Y+63, r9	; 0x3f
    8752:	a5 97       	sbiw	r28, 0x25	; 37
    8754:	a0 90 78 29 	lds	r10, 0x2978	; 0x802978 <g_twi1_gyro_1_temp+0x1>
    8758:	a6 96       	adiw	r28, 0x26	; 38
    875a:	af ae       	std	Y+63, r10	; 0x3f
			int16_t	l_twi1_gyro_1_temp_deg_100	= g_twi1_gyro_1_temp_deg_100;
    875c:	a6 97       	sbiw	r28, 0x26	; 38
    875e:	80 90 73 29 	lds	r8, 0x2973	; 0x802973 <g_twi1_gyro_1_temp_deg_100>
    8762:	90 90 74 29 	lds	r9, 0x2974	; 0x802974 <g_twi1_gyro_1_temp_deg_100+0x1>
    8766:	8d a6       	std	Y+45, r8	; 0x2d
			int16_t l_twi1_gyro_2_mag_x			= g_twi1_gyro_2_mag_x;
    8768:	9e a6       	std	Y+46, r9	; 0x2e
    876a:	90 90 4f 29 	lds	r9, 0x294F	; 0x80294f <g_twi1_gyro_2_mag_x>
    876e:	a7 96       	adiw	r28, 0x27	; 39
    8770:	9f ae       	std	Y+63, r9	; 0x3f
    8772:	a7 97       	sbiw	r28, 0x27	; 39
    8774:	a0 90 50 29 	lds	r10, 0x2950	; 0x802950 <g_twi1_gyro_2_mag_x+0x1>
    8778:	a8 96       	adiw	r28, 0x28	; 40
    877a:	af ae       	std	Y+63, r10	; 0x3f
			int16_t l_twi1_gyro_2_mag_y			= g_twi1_gyro_2_mag_y;
    877c:	a8 97       	sbiw	r28, 0x28	; 40
    877e:	b0 90 4d 29 	lds	r11, 0x294D	; 0x80294d <g_twi1_gyro_2_mag_y>
    8782:	a9 96       	adiw	r28, 0x29	; 41
    8784:	bf ae       	std	Y+63, r11	; 0x3f
    8786:	a9 97       	sbiw	r28, 0x29	; 41
    8788:	80 90 4e 29 	lds	r8, 0x294E	; 0x80294e <g_twi1_gyro_2_mag_y+0x1>
    878c:	aa 96       	adiw	r28, 0x2a	; 42
    878e:	8f ae       	std	Y+63, r8	; 0x3f
			int16_t l_twi1_gyro_2_mag_z			= g_twi1_gyro_2_mag_z;
    8790:	aa 97       	sbiw	r28, 0x2a	; 42
    8792:	90 90 4b 29 	lds	r9, 0x294B	; 0x80294b <g_twi1_gyro_2_mag_z>
    8796:	ab 96       	adiw	r28, 0x2b	; 43
    8798:	9f ae       	std	Y+63, r9	; 0x3f
    879a:	ab 97       	sbiw	r28, 0x2b	; 43
    879c:	a0 90 4c 29 	lds	r10, 0x294C	; 0x80294c <g_twi1_gyro_2_mag_z+0x1>
    87a0:	ac 96       	adiw	r28, 0x2c	; 44
    87a2:	af ae       	std	Y+63, r10	; 0x3f
			int32_t	l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
    87a4:	ac 97       	sbiw	r28, 0x2c	; 44
    87a6:	80 90 47 29 	lds	r8, 0x2947	; 0x802947 <g_twi1_gyro_2_mag_x_nT>
    87aa:	90 90 48 29 	lds	r9, 0x2948	; 0x802948 <g_twi1_gyro_2_mag_x_nT+0x1>
    87ae:	a0 90 49 29 	lds	r10, 0x2949	; 0x802949 <g_twi1_gyro_2_mag_x_nT+0x2>
    87b2:	b0 90 4a 29 	lds	r11, 0x294A	; 0x80294a <g_twi1_gyro_2_mag_x_nT+0x3>
    87b6:	8f a6       	std	Y+47, r8	; 0x2f
    87b8:	98 aa       	std	Y+48, r9	; 0x30
    87ba:	a9 aa       	std	Y+49, r10	; 0x31
			int32_t	l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
    87bc:	ba aa       	std	Y+50, r11	; 0x32
    87be:	80 90 43 29 	lds	r8, 0x2943	; 0x802943 <g_twi1_gyro_2_mag_y_nT>
    87c2:	90 90 44 29 	lds	r9, 0x2944	; 0x802944 <g_twi1_gyro_2_mag_y_nT+0x1>
    87c6:	a0 90 45 29 	lds	r10, 0x2945	; 0x802945 <g_twi1_gyro_2_mag_y_nT+0x2>
    87ca:	b0 90 46 29 	lds	r11, 0x2946	; 0x802946 <g_twi1_gyro_2_mag_y_nT+0x3>
    87ce:	8b aa       	std	Y+51, r8	; 0x33
    87d0:	9c aa       	std	Y+52, r9	; 0x34
    87d2:	ad aa       	std	Y+53, r10	; 0x35
			int32_t	l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
    87d4:	be aa       	std	Y+54, r11	; 0x36
    87d6:	80 90 3f 29 	lds	r8, 0x293F	; 0x80293f <g_twi1_gyro_2_mag_z_nT>
    87da:	90 90 40 29 	lds	r9, 0x2940	; 0x802940 <g_twi1_gyro_2_mag_z_nT+0x1>
    87de:	a0 90 41 29 	lds	r10, 0x2941	; 0x802941 <g_twi1_gyro_2_mag_z_nT+0x2>
    87e2:	b0 90 42 29 	lds	r11, 0x2942	; 0x802942 <g_twi1_gyro_2_mag_z_nT+0x3>
			cpu_irq_restore(flags);

			printf("Time = %06ld: Uvco=%4d mV, U5v=%4d mV, Ubat=%4d mV, Uadc4=%4d mV, Uadc5=%4d mV, Usil=%4d mV, mP_Temp=%c%02d.%02dC\t \t" \
    87e6:	4f bf       	out	0x3f, r20	; 63
    87e8:	64 e6       	ldi	r22, 0x64	; 100
    87ea:	70 e0       	ldi	r23, 0x00	; 0
    87ec:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    87f0:	28 96       	adiw	r28, 0x08	; 8
    87f2:	6f af       	std	Y+63, r22	; 0x3f
    87f4:	28 97       	sbiw	r28, 0x08	; 8
    87f6:	29 96       	adiw	r28, 0x09	; 9
    87f8:	7f af       	std	Y+63, r23	; 0x3f
    87fa:	29 97       	sbiw	r28, 0x09	; 9
    87fc:	26 96       	adiw	r28, 0x06	; 6
    87fe:	8f af       	std	Y+63, r24	; 0x3f
    8800:	26 97       	sbiw	r28, 0x06	; 6
    8802:	27 96       	adiw	r28, 0x07	; 7
    8804:	9f af       	std	Y+63, r25	; 0x3f
    8806:	27 97       	sbiw	r28, 0x07	; 7
    8808:	cf 01       	movw	r24, r30
    880a:	ff 23       	and	r31, r31
    880c:	24 f4       	brge	.+8      	; 0x8816 <main+0xaf4>
    880e:	88 27       	eor	r24, r24
    8810:	99 27       	eor	r25, r25
    8812:	8e 1b       	sub	r24, r30
    8814:	9f 0b       	sbc	r25, r31
    8816:	64 e6       	ldi	r22, 0x64	; 100
    8818:	70 e0       	ldi	r23, 0x00	; 0
    881a:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    881e:	2c 96       	adiw	r28, 0x0c	; 12
    8820:	6f af       	std	Y+63, r22	; 0x3f
    8822:	2c 97       	sbiw	r28, 0x0c	; 12
    8824:	2d 96       	adiw	r28, 0x0d	; 13
    8826:	7f af       	std	Y+63, r23	; 0x3f
    8828:	2d 97       	sbiw	r28, 0x0d	; 13
    882a:	2a 96       	adiw	r28, 0x0a	; 10
    882c:	8f af       	std	Y+63, r24	; 0x3f
    882e:	2a 97       	sbiw	r28, 0x0a	; 10
    8830:	2b 96       	adiw	r28, 0x0b	; 11
    8832:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8834:	2b 97       	sbiw	r28, 0x0b	; 11
    8836:	ff 23       	and	r31, r31
    8838:	14 f4       	brge	.+4      	; 0x883e <main+0xb1c>
    883a:	8d e2       	ldi	r24, 0x2D	; 45
    883c:	01 c0       	rjmp	.+2      	; 0x8840 <main+0xb1e>
			int32_t	l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
			int32_t	l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
			int32_t	l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
			cpu_irq_restore(flags);

			printf("Time = %06ld: Uvco=%4d mV, U5v=%4d mV, Ubat=%4d mV, Uadc4=%4d mV, Uadc5=%4d mV, Usil=%4d mV, mP_Temp=%c%02d.%02dC\t \t" \
    883e:	8b e2       	ldi	r24, 0x2B	; 43
    8840:	48 2f       	mov	r20, r24
    8842:	88 0f       	add	r24, r24
    8844:	55 0b       	sbc	r21, r21
    8846:	4f ab       	std	Y+55, r20	; 0x37
    8848:	58 af       	std	Y+56, r21	; 0x38
    884a:	c9 01       	movw	r24, r18
    884c:	b8 01       	movw	r22, r16
    884e:	24 e6       	ldi	r18, 0x64	; 100
    8850:	30 e0       	ldi	r19, 0x00	; 0
    8852:	40 e0       	ldi	r20, 0x00	; 0
    8854:	50 e0       	ldi	r21, 0x00	; 0
    8856:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    885a:	60 96       	adiw	r28, 0x10	; 16
    885c:	2f af       	std	Y+63, r18	; 0x3f
    885e:	60 97       	sbiw	r28, 0x10	; 16
    8860:	61 96       	adiw	r28, 0x11	; 17
    8862:	3f af       	std	Y+63, r19	; 0x3f
    8864:	61 97       	sbiw	r28, 0x11	; 17
    8866:	62 96       	adiw	r28, 0x12	; 18
    8868:	4f af       	std	Y+63, r20	; 0x3f
    886a:	62 97       	sbiw	r28, 0x12	; 18
    886c:	63 96       	adiw	r28, 0x13	; 19
    886e:	5f af       	std	Y+63, r21	; 0x3f
    8870:	63 97       	sbiw	r28, 0x13	; 19
    8872:	2e 96       	adiw	r28, 0x0e	; 14
    8874:	6f af       	std	Y+63, r22	; 0x3f
    8876:	2e 97       	sbiw	r28, 0x0e	; 14
    8878:	2f 96       	adiw	r28, 0x0f	; 15
    887a:	7f af       	std	Y+63, r23	; 0x3f
    887c:	2f 97       	sbiw	r28, 0x0f	; 15
    887e:	08 2f       	mov	r16, r24
    8880:	19 2f       	mov	r17, r25
    8882:	c3 01       	movw	r24, r6
    8884:	b2 01       	movw	r22, r4
    8886:	77 20       	and	r7, r7
    8888:	3c f4       	brge	.+14     	; 0x8898 <main+0xb76>
    888a:	66 27       	eor	r22, r22
    888c:	77 27       	eor	r23, r23
    888e:	cb 01       	movw	r24, r22
    8890:	64 19       	sub	r22, r4
    8892:	75 09       	sbc	r23, r5
    8894:	86 09       	sbc	r24, r6
    8896:	97 09       	sbc	r25, r7
    8898:	24 e6       	ldi	r18, 0x64	; 100
    889a:	30 e0       	ldi	r19, 0x00	; 0
    889c:	40 e0       	ldi	r20, 0x00	; 0
    889e:	50 e0       	ldi	r21, 0x00	; 0
    88a0:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    88a4:	66 96       	adiw	r28, 0x16	; 22
    88a6:	2f af       	std	Y+63, r18	; 0x3f
    88a8:	66 97       	sbiw	r28, 0x16	; 22
    88aa:	67 96       	adiw	r28, 0x17	; 23
    88ac:	3f af       	std	Y+63, r19	; 0x3f
    88ae:	67 97       	sbiw	r28, 0x17	; 23
    88b0:	68 96       	adiw	r28, 0x18	; 24
    88b2:	5f af       	std	Y+63, r21	; 0x3f
    88b4:	68 97       	sbiw	r28, 0x18	; 24
    88b6:	64 96       	adiw	r28, 0x14	; 20
    88b8:	6f af       	std	Y+63, r22	; 0x3f
    88ba:	64 97       	sbiw	r28, 0x14	; 20
    88bc:	f7 2f       	mov	r31, r23
    88be:	e8 2f       	mov	r30, r24
    88c0:	65 96       	adiw	r28, 0x15	; 21
    88c2:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    88c4:	65 97       	sbiw	r28, 0x15	; 21
    88c6:	77 20       	and	r7, r7
    88c8:	14 f4       	brge	.+4      	; 0x88ce <main+0xbac>
    88ca:	2d e2       	ldi	r18, 0x2D	; 45
    88cc:	01 c0       	rjmp	.+2      	; 0x88d0 <main+0xbae>
			int32_t	l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
			int32_t	l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
			int32_t	l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
			cpu_irq_restore(flags);

			printf("Time = %06ld: Uvco=%4d mV, U5v=%4d mV, Ubat=%4d mV, Uadc4=%4d mV, Uadc5=%4d mV, Usil=%4d mV, mP_Temp=%c%02d.%02dC\t \t" \
    88ce:	2b e2       	ldi	r18, 0x2B	; 43
    88d0:	02 2e       	mov	r0, r18
    88d2:	00 0c       	add	r0, r0
    88d4:	33 0b       	sbc	r19, r19
    88d6:	89 89       	ldd	r24, Y+17	; 0x11
    88d8:	9a 89       	ldd	r25, Y+18	; 0x12
    88da:	99 23       	and	r25, r25
    88dc:	1c f4       	brge	.+6      	; 0x88e4 <main+0xbc2>
    88de:	91 95       	neg	r25
    88e0:	81 95       	neg	r24
    88e2:	91 09       	sbc	r25, r1
    88e4:	64 e6       	ldi	r22, 0x64	; 100
    88e6:	70 e0       	ldi	r23, 0x00	; 0
    88e8:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    88ec:	a9 89       	ldd	r26, Y+17	; 0x11
    88ee:	ba 89       	ldd	r27, Y+18	; 0x12
    88f0:	bb 23       	and	r27, r27
    88f2:	14 f4       	brge	.+4      	; 0x88f8 <main+0xbd6>
    88f4:	5d e2       	ldi	r21, 0x2D	; 45
    88f6:	01 c0       	rjmp	.+2      	; 0x88fa <main+0xbd8>
			int32_t	l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
			int32_t	l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
			int32_t	l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
			cpu_irq_restore(flags);

			printf("Time = %06ld: Uvco=%4d mV, U5v=%4d mV, Ubat=%4d mV, Uadc4=%4d mV, Uadc5=%4d mV, Usil=%4d mV, mP_Temp=%c%02d.%02dC\t \t" \
    88f8:	5b e2       	ldi	r21, 0x2B	; 43
    88fa:	27 96       	adiw	r28, 0x07	; 7
    88fc:	bf ad       	ldd	r27, Y+63	; 0x3f
    88fe:	27 97       	sbiw	r28, 0x07	; 7
    8900:	bf 93       	push	r27
    8902:	26 96       	adiw	r28, 0x06	; 6
    8904:	af ad       	ldd	r26, Y+63	; 0x3f
    8906:	26 97       	sbiw	r28, 0x06	; 6
    8908:	af 93       	push	r26
    890a:	29 96       	adiw	r28, 0x09	; 9
    890c:	bf ad       	ldd	r27, Y+63	; 0x3f
    890e:	29 97       	sbiw	r28, 0x09	; 9
    8910:	bf 93       	push	r27
    8912:	28 96       	adiw	r28, 0x08	; 8
    8914:	af ad       	ldd	r26, Y+63	; 0x3f
    8916:	28 97       	sbiw	r28, 0x08	; 8
    8918:	af 93       	push	r26
    891a:	2b 96       	adiw	r28, 0x0b	; 11
    891c:	bf ad       	ldd	r27, Y+63	; 0x3f
    891e:	2b 97       	sbiw	r28, 0x0b	; 11
    8920:	bf 93       	push	r27
    8922:	2a 96       	adiw	r28, 0x0a	; 10
    8924:	af ad       	ldd	r26, Y+63	; 0x3f
    8926:	2a 97       	sbiw	r28, 0x0a	; 10
    8928:	af 93       	push	r26
    892a:	2d 96       	adiw	r28, 0x0d	; 13
    892c:	bf ad       	ldd	r27, Y+63	; 0x3f
    892e:	2d 97       	sbiw	r28, 0x0d	; 13
    8930:	bf 93       	push	r27
    8932:	2c 96       	adiw	r28, 0x0c	; 12
    8934:	af ad       	ldd	r26, Y+63	; 0x3f
    8936:	2c 97       	sbiw	r28, 0x0c	; 12
    8938:	af 93       	push	r26
    893a:	b8 ad       	ldd	r27, Y+56	; 0x38
    893c:	bf 93       	push	r27
    893e:	af a9       	ldd	r26, Y+55	; 0x37
    8940:	af 93       	push	r26
    8942:	1f 93       	push	r17
    8944:	0f 93       	push	r16
    8946:	2f 96       	adiw	r28, 0x0f	; 15
    8948:	bf ad       	ldd	r27, Y+63	; 0x3f
    894a:	2f 97       	sbiw	r28, 0x0f	; 15
    894c:	bf 93       	push	r27
    894e:	2e 96       	adiw	r28, 0x0e	; 14
    8950:	af ad       	ldd	r26, Y+63	; 0x3f
    8952:	2e 97       	sbiw	r28, 0x0e	; 14
    8954:	af 93       	push	r26
    8956:	63 96       	adiw	r28, 0x13	; 19
    8958:	bf ad       	ldd	r27, Y+63	; 0x3f
    895a:	63 97       	sbiw	r28, 0x13	; 19
    895c:	bf 93       	push	r27
    895e:	62 96       	adiw	r28, 0x12	; 18
    8960:	af ad       	ldd	r26, Y+63	; 0x3f
    8962:	62 97       	sbiw	r28, 0x12	; 18
    8964:	af 93       	push	r26
    8966:	61 96       	adiw	r28, 0x11	; 17
    8968:	bf ad       	ldd	r27, Y+63	; 0x3f
    896a:	61 97       	sbiw	r28, 0x11	; 17
    896c:	bf 93       	push	r27
    896e:	60 96       	adiw	r28, 0x10	; 16
    8970:	af ad       	ldd	r26, Y+63	; 0x3f
    8972:	60 97       	sbiw	r28, 0x10	; 16
    8974:	af 93       	push	r26
    8976:	65 96       	adiw	r28, 0x15	; 21
    8978:	bf ad       	ldd	r27, Y+63	; 0x3f
    897a:	65 97       	sbiw	r28, 0x15	; 21
    897c:	bf 93       	push	r27
    897e:	ef 93       	push	r30
    8980:	ff 93       	push	r31
    8982:	64 96       	adiw	r28, 0x14	; 20
    8984:	ef ad       	ldd	r30, Y+63	; 0x3f
    8986:	64 97       	sbiw	r28, 0x14	; 20
    8988:	ef 93       	push	r30
    898a:	68 96       	adiw	r28, 0x18	; 24
    898c:	ff ad       	ldd	r31, Y+63	; 0x3f
    898e:	68 97       	sbiw	r28, 0x18	; 24
    8990:	ff 93       	push	r31
    8992:	4f 93       	push	r20
    8994:	67 96       	adiw	r28, 0x17	; 23
    8996:	ef ad       	ldd	r30, Y+63	; 0x3f
    8998:	67 97       	sbiw	r28, 0x17	; 23
    899a:	ef 93       	push	r30
    899c:	66 96       	adiw	r28, 0x16	; 22
    899e:	ff ad       	ldd	r31, Y+63	; 0x3f
    89a0:	66 97       	sbiw	r28, 0x16	; 22
    89a2:	ff 93       	push	r31
    89a4:	3f 93       	push	r19
    89a6:	2f 93       	push	r18
    89a8:	9f 93       	push	r25
    89aa:	8f 93       	push	r24
    89ac:	7f 93       	push	r23
    89ae:	6f 93       	push	r22
    89b0:	85 2f       	mov	r24, r21
    89b2:	05 2e       	mov	r0, r21
    89b4:	00 0c       	add	r0, r0
    89b6:	99 0b       	sbc	r25, r25
    89b8:	9f 93       	push	r25
    89ba:	5f 93       	push	r21
    89bc:	25 96       	adiw	r28, 0x05	; 5
    89be:	2f ad       	ldd	r18, Y+63	; 0x3f
    89c0:	25 97       	sbiw	r28, 0x05	; 5
    89c2:	2f 93       	push	r18
    89c4:	24 96       	adiw	r28, 0x04	; 4
    89c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    89c8:	24 97       	sbiw	r28, 0x04	; 4
    89ca:	3f 93       	push	r19
    89cc:	23 96       	adiw	r28, 0x03	; 3
    89ce:	4f ad       	ldd	r20, Y+63	; 0x3f
    89d0:	23 97       	sbiw	r28, 0x03	; 3
    89d2:	4f 93       	push	r20
    89d4:	22 96       	adiw	r28, 0x02	; 2
    89d6:	5f ad       	ldd	r21, Y+63	; 0x3f
    89d8:	22 97       	sbiw	r28, 0x02	; 2
    89da:	5f 93       	push	r21
    89dc:	21 96       	adiw	r28, 0x01	; 1
    89de:	6f ad       	ldd	r22, Y+63	; 0x3f
    89e0:	21 97       	sbiw	r28, 0x01	; 1
    89e2:	6f 93       	push	r22
    89e4:	7f ad       	ldd	r23, Y+63	; 0x3f
    89e6:	7f 93       	push	r23
    89e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    89ea:	8f 93       	push	r24
    89ec:	9d ad       	ldd	r25, Y+61	; 0x3d
    89ee:	9f 93       	push	r25
    89f0:	ac ad       	ldd	r26, Y+60	; 0x3c
    89f2:	af 93       	push	r26
    89f4:	bb ad       	ldd	r27, Y+59	; 0x3b
    89f6:	bf 93       	push	r27
    89f8:	ea ad       	ldd	r30, Y+58	; 0x3a
    89fa:	ef 93       	push	r30
    89fc:	f9 ad       	ldd	r31, Y+57	; 0x39
    89fe:	ff 93       	push	r31
    8a00:	0b 2e       	mov	r0, r27
    8a02:	ba e0       	ldi	r27, 0x0A	; 10
    8a04:	f6 94       	lsr	r15
    8a06:	e7 94       	ror	r14
    8a08:	d7 94       	ror	r13
    8a0a:	c7 94       	ror	r12
    8a0c:	ba 95       	dec	r27
    8a0e:	d1 f7       	brne	.-12     	; 0x8a04 <main+0xce2>
    8a10:	b0 2d       	mov	r27, r0
    8a12:	ff 92       	push	r15
    8a14:	ef 92       	push	r14
    8a16:	df 92       	push	r13
    8a18:	cf 92       	push	r12
    8a1a:	29 e8       	ldi	r18, 0x89	; 137
    8a1c:	34 e2       	ldi	r19, 0x24	; 36
    8a1e:	3f 93       	push	r19
    8a20:	2f 93       	push	r18
    8a22:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>
    8a26:	8d a5       	ldd	r24, Y+45	; 0x2d
    8a28:	9e a5       	ldd	r25, Y+46	; 0x2e
    8a2a:	99 23       	and	r25, r25
    8a2c:	1c f4       	brge	.+6      	; 0x8a34 <main+0xd12>
    8a2e:	91 95       	neg	r25
    8a30:	81 95       	neg	r24
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8a32:	91 09       	sbc	r25, r1
    8a34:	64 e6       	ldi	r22, 0x64	; 100
    8a36:	70 e0       	ldi	r23, 0x00	; 0
    8a38:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    8a3c:	69 af       	std	Y+57, r22	; 0x39
    8a3e:	7a af       	std	Y+58, r23	; 0x3a
    8a40:	89 8b       	std	Y+17, r24	; 0x11


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8a42:	9f ab       	std	Y+55, r25	; 0x37
    8a44:	cd bf       	out	0x3d, r28	; 61
    8a46:	de bf       	out	0x3e, r29	; 62
    8a48:	8d a5       	ldd	r24, Y+45	; 0x2d
    8a4a:	9e a5       	ldd	r25, Y+46	; 0x2e
    8a4c:	99 23       	and	r25, r25
    8a4e:	14 f4       	brge	.+4      	; 0x8a54 <main+0xd32>
    8a50:	0d e2       	ldi	r16, 0x2D	; 45
    8a52:	01 c0       	rjmp	.+2      	; 0x8a56 <main+0xd34>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8a54:	0b e2       	ldi	r16, 0x2B	; 43
    8a56:	00 2e       	mov	r0, r16
    8a58:	00 0c       	add	r0, r0
    8a5a:	11 0b       	sbc	r17, r17
    8a5c:	c5 01       	movw	r24, r10
    8a5e:	b4 01       	movw	r22, r8
    8a60:	bb 20       	and	r11, r11
    8a62:	3c f4       	brge	.+14     	; 0x8a72 <main+0xd50>
    8a64:	66 27       	eor	r22, r22
    8a66:	77 27       	eor	r23, r23
    8a68:	cb 01       	movw	r24, r22
    8a6a:	68 19       	sub	r22, r8
    8a6c:	79 09       	sbc	r23, r9
    8a6e:	8a 09       	sbc	r24, r10
    8a70:	9b 09       	sbc	r25, r11
    8a72:	28 ee       	ldi	r18, 0xE8	; 232
    8a74:	33 e0       	ldi	r19, 0x03	; 3
    8a76:	40 e0       	ldi	r20, 0x00	; 0
    8a78:	50 e0       	ldi	r21, 0x00	; 0
    8a7a:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    8a7e:	2e af       	std	Y+62, r18	; 0x3e
    8a80:	3f af       	std	Y+63, r19	; 0x3f
    8a82:	21 96       	adiw	r28, 0x01	; 1
    8a84:	4f af       	std	Y+63, r20	; 0x3f
    8a86:	21 97       	sbiw	r28, 0x01	; 1
    8a88:	22 96       	adiw	r28, 0x02	; 2
    8a8a:	5f af       	std	Y+63, r21	; 0x3f
    8a8c:	22 97       	sbiw	r28, 0x02	; 2
    8a8e:	6d a7       	std	Y+45, r22	; 0x2d
    8a90:	7b af       	std	Y+59, r23	; 0x3b
    8a92:	8c af       	std	Y+60, r24	; 0x3c


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8a94:	9d af       	std	Y+61, r25	; 0x3d
    8a96:	bb 20       	and	r11, r11
    8a98:	14 f4       	brge	.+4      	; 0x8a9e <main+0xd7c>
    8a9a:	8d e2       	ldi	r24, 0x2D	; 45
    8a9c:	01 c0       	rjmp	.+2      	; 0x8aa0 <main+0xd7e>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8a9e:	8b e2       	ldi	r24, 0x2B	; 43
    8aa0:	e8 2e       	mov	r14, r24
    8aa2:	88 0f       	add	r24, r24
    8aa4:	ff 08       	sbc	r15, r15
    8aa6:	6b a9       	ldd	r22, Y+51	; 0x33
    8aa8:	7c a9       	ldd	r23, Y+52	; 0x34
    8aaa:	8d a9       	ldd	r24, Y+53	; 0x35
    8aac:	9e a9       	ldd	r25, Y+54	; 0x36
    8aae:	99 23       	and	r25, r25
    8ab0:	3c f4       	brge	.+14     	; 0x8ac0 <main+0xd9e>
    8ab2:	90 95       	com	r25
    8ab4:	80 95       	com	r24
    8ab6:	70 95       	com	r23
    8ab8:	61 95       	neg	r22
    8aba:	7f 4f       	sbci	r23, 0xFF	; 255
    8abc:	8f 4f       	sbci	r24, 0xFF	; 255
    8abe:	9f 4f       	sbci	r25, 0xFF	; 255
    8ac0:	28 ee       	ldi	r18, 0xE8	; 232
    8ac2:	33 e0       	ldi	r19, 0x03	; 3
    8ac4:	40 e0       	ldi	r20, 0x00	; 0
    8ac6:	50 e0       	ldi	r21, 0x00	; 0
    8ac8:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    8acc:	27 96       	adiw	r28, 0x07	; 7
    8ace:	2f af       	std	Y+63, r18	; 0x3f
    8ad0:	27 97       	sbiw	r28, 0x07	; 7
    8ad2:	28 96       	adiw	r28, 0x08	; 8
    8ad4:	3f af       	std	Y+63, r19	; 0x3f
    8ad6:	28 97       	sbiw	r28, 0x08	; 8
    8ad8:	29 96       	adiw	r28, 0x09	; 9
    8ada:	4f af       	std	Y+63, r20	; 0x3f
    8adc:	29 97       	sbiw	r28, 0x09	; 9
    8ade:	2a 96       	adiw	r28, 0x0a	; 10
    8ae0:	5f af       	std	Y+63, r21	; 0x3f
    8ae2:	2a 97       	sbiw	r28, 0x0a	; 10
    8ae4:	23 96       	adiw	r28, 0x03	; 3
    8ae6:	6f af       	std	Y+63, r22	; 0x3f
    8ae8:	23 97       	sbiw	r28, 0x03	; 3
    8aea:	24 96       	adiw	r28, 0x04	; 4
    8aec:	7f af       	std	Y+63, r23	; 0x3f
    8aee:	24 97       	sbiw	r28, 0x04	; 4
    8af0:	25 96       	adiw	r28, 0x05	; 5
    8af2:	8f af       	std	Y+63, r24	; 0x3f
    8af4:	25 97       	sbiw	r28, 0x05	; 5
    8af6:	26 96       	adiw	r28, 0x06	; 6
    8af8:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8afa:	26 97       	sbiw	r28, 0x06	; 6
    8afc:	8b a8       	ldd	r8, Y+51	; 0x33
    8afe:	9c a8       	ldd	r9, Y+52	; 0x34
    8b00:	ad a8       	ldd	r10, Y+53	; 0x35
    8b02:	be a8       	ldd	r11, Y+54	; 0x36
    8b04:	bb 20       	and	r11, r11
    8b06:	14 f4       	brge	.+4      	; 0x8b0c <main+0xdea>
    8b08:	8d e2       	ldi	r24, 0x2D	; 45
    8b0a:	01 c0       	rjmp	.+2      	; 0x8b0e <main+0xdec>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8b0c:	8b e2       	ldi	r24, 0x2B	; 43
    8b0e:	c8 2e       	mov	r12, r24
    8b10:	88 0f       	add	r24, r24
    8b12:	dd 08       	sbc	r13, r13
    8b14:	6f a5       	ldd	r22, Y+47	; 0x2f
    8b16:	78 a9       	ldd	r23, Y+48	; 0x30
    8b18:	89 a9       	ldd	r24, Y+49	; 0x31
    8b1a:	9a a9       	ldd	r25, Y+50	; 0x32
    8b1c:	99 23       	and	r25, r25
    8b1e:	3c f4       	brge	.+14     	; 0x8b2e <main+0xe0c>
    8b20:	90 95       	com	r25
    8b22:	80 95       	com	r24
    8b24:	70 95       	com	r23
    8b26:	61 95       	neg	r22
    8b28:	7f 4f       	sbci	r23, 0xFF	; 255
    8b2a:	8f 4f       	sbci	r24, 0xFF	; 255
    8b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    8b2e:	28 ee       	ldi	r18, 0xE8	; 232
    8b30:	33 e0       	ldi	r19, 0x03	; 3
    8b32:	40 e0       	ldi	r20, 0x00	; 0
    8b34:	50 e0       	ldi	r21, 0x00	; 0
    8b36:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    8b3a:	2e 96       	adiw	r28, 0x0e	; 14
    8b3c:	2f af       	std	Y+63, r18	; 0x3f
    8b3e:	2e 97       	sbiw	r28, 0x0e	; 14
    8b40:	2f 96       	adiw	r28, 0x0f	; 15
    8b42:	3f af       	std	Y+63, r19	; 0x3f
    8b44:	2f 97       	sbiw	r28, 0x0f	; 15
    8b46:	60 96       	adiw	r28, 0x10	; 16
    8b48:	4f af       	std	Y+63, r20	; 0x3f
    8b4a:	60 97       	sbiw	r28, 0x10	; 16
    8b4c:	61 96       	adiw	r28, 0x11	; 17
    8b4e:	5f af       	std	Y+63, r21	; 0x3f
    8b50:	61 97       	sbiw	r28, 0x11	; 17
    8b52:	6b ab       	std	Y+51, r22	; 0x33
    8b54:	2b 96       	adiw	r28, 0x0b	; 11
    8b56:	7f af       	std	Y+63, r23	; 0x3f
    8b58:	2b 97       	sbiw	r28, 0x0b	; 11
    8b5a:	2c 96       	adiw	r28, 0x0c	; 12
    8b5c:	8f af       	std	Y+63, r24	; 0x3f
    8b5e:	2c 97       	sbiw	r28, 0x0c	; 12
    8b60:	2d 96       	adiw	r28, 0x0d	; 13
    8b62:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8b64:	2d 97       	sbiw	r28, 0x0d	; 13
    8b66:	8f a4       	ldd	r8, Y+47	; 0x2f
    8b68:	98 a8       	ldd	r9, Y+48	; 0x30
    8b6a:	a9 a8       	ldd	r10, Y+49	; 0x31
    8b6c:	ba a8       	ldd	r11, Y+50	; 0x32
    8b6e:	bb 20       	and	r11, r11
    8b70:	14 f4       	brge	.+4      	; 0x8b76 <main+0xe54>
    8b72:	8d e2       	ldi	r24, 0x2D	; 45
    8b74:	01 c0       	rjmp	.+2      	; 0x8b78 <main+0xe56>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8b76:	8b e2       	ldi	r24, 0x2B	; 43
    8b78:	a8 2e       	mov	r10, r24
    8b7a:	88 0f       	add	r24, r24
    8b7c:	bb 08       	sbc	r11, r11
    8b7e:	69 a5       	ldd	r22, Y+41	; 0x29
    8b80:	7a a5       	ldd	r23, Y+42	; 0x2a
    8b82:	8b a5       	ldd	r24, Y+43	; 0x2b
    8b84:	9c a5       	ldd	r25, Y+44	; 0x2c
    8b86:	99 23       	and	r25, r25
    8b88:	3c f4       	brge	.+14     	; 0x8b98 <main+0xe76>
    8b8a:	90 95       	com	r25
    8b8c:	80 95       	com	r24
    8b8e:	70 95       	com	r23
    8b90:	61 95       	neg	r22
    8b92:	7f 4f       	sbci	r23, 0xFF	; 255
    8b94:	8f 4f       	sbci	r24, 0xFF	; 255
    8b96:	9f 4f       	sbci	r25, 0xFF	; 255
    8b98:	28 ee       	ldi	r18, 0xE8	; 232
    8b9a:	33 e0       	ldi	r19, 0x03	; 3
    8b9c:	40 e0       	ldi	r20, 0x00	; 0
    8b9e:	50 e0       	ldi	r21, 0x00	; 0
    8ba0:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    8ba4:	65 96       	adiw	r28, 0x15	; 21
    8ba6:	2f af       	std	Y+63, r18	; 0x3f
    8ba8:	65 97       	sbiw	r28, 0x15	; 21
    8baa:	66 96       	adiw	r28, 0x16	; 22
    8bac:	3f af       	std	Y+63, r19	; 0x3f
    8bae:	66 97       	sbiw	r28, 0x16	; 22
    8bb0:	67 96       	adiw	r28, 0x17	; 23
    8bb2:	4f af       	std	Y+63, r20	; 0x3f
    8bb4:	67 97       	sbiw	r28, 0x17	; 23
    8bb6:	68 96       	adiw	r28, 0x18	; 24
    8bb8:	5f af       	std	Y+63, r21	; 0x3f
    8bba:	68 97       	sbiw	r28, 0x18	; 24
    8bbc:	6f a7       	std	Y+47, r22	; 0x2f
    8bbe:	62 96       	adiw	r28, 0x12	; 18
    8bc0:	7f af       	std	Y+63, r23	; 0x3f
    8bc2:	62 97       	sbiw	r28, 0x12	; 18
    8bc4:	63 96       	adiw	r28, 0x13	; 19
    8bc6:	8f af       	std	Y+63, r24	; 0x3f
    8bc8:	63 97       	sbiw	r28, 0x13	; 19
    8bca:	64 96       	adiw	r28, 0x14	; 20
    8bcc:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8bce:	64 97       	sbiw	r28, 0x14	; 20
    8bd0:	29 a5       	ldd	r18, Y+41	; 0x29
    8bd2:	3a a5       	ldd	r19, Y+42	; 0x2a
    8bd4:	4b a5       	ldd	r20, Y+43	; 0x2b
    8bd6:	5c a5       	ldd	r21, Y+44	; 0x2c
    8bd8:	55 23       	and	r21, r21
    8bda:	14 f4       	brge	.+4      	; 0x8be0 <main+0xebe>
    8bdc:	8d e2       	ldi	r24, 0x2D	; 45
    8bde:	01 c0       	rjmp	.+2      	; 0x8be2 <main+0xec0>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8be0:	8b e2       	ldi	r24, 0x2B	; 43
    8be2:	88 2e       	mov	r8, r24
    8be4:	88 0f       	add	r24, r24
    8be6:	99 08       	sbc	r9, r9
    8be8:	6d a1       	ldd	r22, Y+37	; 0x25
    8bea:	7e a1       	ldd	r23, Y+38	; 0x26
    8bec:	8f a1       	ldd	r24, Y+39	; 0x27
    8bee:	98 a5       	ldd	r25, Y+40	; 0x28
    8bf0:	99 23       	and	r25, r25
    8bf2:	3c f4       	brge	.+14     	; 0x8c02 <main+0xee0>
    8bf4:	90 95       	com	r25
    8bf6:	80 95       	com	r24
    8bf8:	70 95       	com	r23
    8bfa:	61 95       	neg	r22
    8bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    8bfe:	8f 4f       	sbci	r24, 0xFF	; 255
    8c00:	9f 4f       	sbci	r25, 0xFF	; 255
    8c02:	28 ee       	ldi	r18, 0xE8	; 232
    8c04:	33 e0       	ldi	r19, 0x03	; 3
    8c06:	40 e0       	ldi	r20, 0x00	; 0
    8c08:	50 e0       	ldi	r21, 0x00	; 0
    8c0a:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    8c0e:	e0 96       	adiw	r28, 0x30	; 48
    8c10:	2f af       	std	Y+63, r18	; 0x3f
    8c12:	e0 97       	sbiw	r28, 0x30	; 48
    8c14:	e1 96       	adiw	r28, 0x31	; 49
    8c16:	3f af       	std	Y+63, r19	; 0x3f
    8c18:	e1 97       	sbiw	r28, 0x31	; 49
    8c1a:	e2 96       	adiw	r28, 0x32	; 50
    8c1c:	4f af       	std	Y+63, r20	; 0x3f
    8c1e:	e2 97       	sbiw	r28, 0x32	; 50
    8c20:	e3 96       	adiw	r28, 0x33	; 51
    8c22:	5f af       	std	Y+63, r21	; 0x3f
    8c24:	e3 97       	sbiw	r28, 0x33	; 51
    8c26:	69 a7       	std	Y+41, r22	; 0x29
    8c28:	ad 96       	adiw	r28, 0x2d	; 45
    8c2a:	7f af       	std	Y+63, r23	; 0x3f
    8c2c:	ad 97       	sbiw	r28, 0x2d	; 45
    8c2e:	ae 96       	adiw	r28, 0x2e	; 46
    8c30:	8f af       	std	Y+63, r24	; 0x3f
    8c32:	ae 97       	sbiw	r28, 0x2e	; 46
    8c34:	af 96       	adiw	r28, 0x2f	; 47
    8c36:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8c38:	af 97       	sbiw	r28, 0x2f	; 47
    8c3a:	4d a1       	ldd	r20, Y+37	; 0x25
    8c3c:	5e a1       	ldd	r21, Y+38	; 0x26
    8c3e:	6f a1       	ldd	r22, Y+39	; 0x27
    8c40:	78 a5       	ldd	r23, Y+40	; 0x28
    8c42:	77 23       	and	r23, r23
    8c44:	14 f4       	brge	.+4      	; 0x8c4a <main+0xf28>
    8c46:	8d e2       	ldi	r24, 0x2D	; 45
    8c48:	01 c0       	rjmp	.+2      	; 0x8c4c <main+0xf2a>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8c4a:	8b e2       	ldi	r24, 0x2B	; 43
    8c4c:	68 2e       	mov	r6, r24
    8c4e:	88 0f       	add	r24, r24
    8c50:	77 08       	sbc	r7, r7
    8c52:	69 a1       	ldd	r22, Y+33	; 0x21
    8c54:	7a a1       	ldd	r23, Y+34	; 0x22
    8c56:	8b a1       	ldd	r24, Y+35	; 0x23
    8c58:	9c a1       	ldd	r25, Y+36	; 0x24
    8c5a:	99 23       	and	r25, r25
    8c5c:	3c f4       	brge	.+14     	; 0x8c6c <main+0xf4a>
    8c5e:	90 95       	com	r25
    8c60:	80 95       	com	r24
    8c62:	70 95       	com	r23
    8c64:	61 95       	neg	r22
    8c66:	7f 4f       	sbci	r23, 0xFF	; 255
    8c68:	8f 4f       	sbci	r24, 0xFF	; 255
    8c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    8c6c:	28 ee       	ldi	r18, 0xE8	; 232
    8c6e:	33 e0       	ldi	r19, 0x03	; 3
    8c70:	40 e0       	ldi	r20, 0x00	; 0
    8c72:	50 e0       	ldi	r21, 0x00	; 0
    8c74:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <__divmodsi4>
    8c78:	e7 96       	adiw	r28, 0x37	; 55
    8c7a:	2f af       	std	Y+63, r18	; 0x3f
    8c7c:	e7 97       	sbiw	r28, 0x37	; 55
    8c7e:	e8 96       	adiw	r28, 0x38	; 56
    8c80:	3f af       	std	Y+63, r19	; 0x3f
    8c82:	e8 97       	sbiw	r28, 0x38	; 56
    8c84:	e9 96       	adiw	r28, 0x39	; 57
    8c86:	5f af       	std	Y+63, r21	; 0x3f
    8c88:	e9 97       	sbiw	r28, 0x39	; 57
    8c8a:	6d a3       	std	Y+37, r22	; 0x25
    8c8c:	e4 96       	adiw	r28, 0x34	; 52
    8c8e:	7f af       	std	Y+63, r23	; 0x3f
    8c90:	e4 97       	sbiw	r28, 0x34	; 52
    8c92:	e5 96       	adiw	r28, 0x35	; 53
    8c94:	8f af       	std	Y+63, r24	; 0x3f
    8c96:	e5 97       	sbiw	r28, 0x35	; 53
    8c98:	e6 96       	adiw	r28, 0x36	; 54
    8c9a:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8c9c:	e6 97       	sbiw	r28, 0x36	; 54
    8c9e:	69 a1       	ldd	r22, Y+33	; 0x21
    8ca0:	7a a1       	ldd	r23, Y+34	; 0x22
    8ca2:	8b a1       	ldd	r24, Y+35	; 0x23
    8ca4:	9c a1       	ldd	r25, Y+36	; 0x24
    8ca6:	99 23       	and	r25, r25
    8ca8:	14 f4       	brge	.+4      	; 0x8cae <main+0xf8c>
    8caa:	2d e2       	ldi	r18, 0x2D	; 45
    8cac:	01 c0       	rjmp	.+2      	; 0x8cb0 <main+0xf8e>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8cae:	2b e2       	ldi	r18, 0x2B	; 43
    8cb0:	02 2e       	mov	r0, r18
    8cb2:	00 0c       	add	r0, r0
    8cb4:	33 0b       	sbc	r19, r19
    8cb6:	8d 89       	ldd	r24, Y+21	; 0x15
    8cb8:	9e 89       	ldd	r25, Y+22	; 0x16
    8cba:	99 23       	and	r25, r25
    8cbc:	1c f4       	brge	.+6      	; 0x8cc4 <main+0xfa2>
    8cbe:	91 95       	neg	r25
    8cc0:	81 95       	neg	r24
    8cc2:	91 09       	sbc	r25, r1
    8cc4:	68 ee       	ldi	r22, 0xE8	; 232
    8cc6:	73 e0       	ldi	r23, 0x03	; 3
    8cc8:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    8ccc:	eb 96       	adiw	r28, 0x3b	; 59
    8cce:	6f af       	std	Y+63, r22	; 0x3f
    8cd0:	eb 97       	sbiw	r28, 0x3b	; 59
    8cd2:	ec 96       	adiw	r28, 0x3c	; 60
    8cd4:	7f af       	std	Y+63, r23	; 0x3f
    8cd6:	ec 97       	sbiw	r28, 0x3c	; 60
    8cd8:	89 a3       	std	Y+33, r24	; 0x21
    8cda:	ea 96       	adiw	r28, 0x3a	; 58
    8cdc:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8cde:	ea 97       	sbiw	r28, 0x3a	; 58
    8ce0:	8d 89       	ldd	r24, Y+21	; 0x15
    8ce2:	9e 89       	ldd	r25, Y+22	; 0x16
    8ce4:	99 23       	and	r25, r25
    8ce6:	14 f4       	brge	.+4      	; 0x8cec <main+0xfca>
    8ce8:	ed e2       	ldi	r30, 0x2D	; 45
    8cea:	01 c0       	rjmp	.+2      	; 0x8cee <main+0xfcc>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8cec:	eb e2       	ldi	r30, 0x2B	; 43
    8cee:	0e 2e       	mov	r0, r30
    8cf0:	00 0c       	add	r0, r0
    8cf2:	ff 0b       	sbc	r31, r31
    8cf4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8cf6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8cf8:	99 23       	and	r25, r25
    8cfa:	1c f4       	brge	.+6      	; 0x8d02 <main+0xfe0>
    8cfc:	91 95       	neg	r25
    8cfe:	81 95       	neg	r24
    8d00:	91 09       	sbc	r25, r1
    8d02:	68 ee       	ldi	r22, 0xE8	; 232
    8d04:	73 e0       	ldi	r23, 0x03	; 3
    8d06:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>
    8d0a:	ee 96       	adiw	r28, 0x3e	; 62
    8d0c:	6f af       	std	Y+63, r22	; 0x3f
    8d0e:	ee 97       	sbiw	r28, 0x3e	; 62
    8d10:	ef 96       	adiw	r28, 0x3f	; 63
    8d12:	7f af       	std	Y+63, r23	; 0x3f
    8d14:	ef 97       	sbiw	r28, 0x3f	; 63
    8d16:	8d 8b       	std	Y+21, r24	; 0x15
    8d18:	ed 96       	adiw	r28, 0x3d	; 61
    8d1a:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8d1c:	ed 97       	sbiw	r28, 0x3d	; 61
    8d1e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    8d20:	be 8d       	ldd	r27, Y+30	; 0x1e
    8d22:	bb 23       	and	r27, r27
    8d24:	14 f4       	brge	.+4      	; 0x8d2a <main+0x1008>
    8d26:	8d e2       	ldi	r24, 0x2D	; 45
    8d28:	01 c0       	rjmp	.+2      	; 0x8d2c <main+0x100a>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8d2a:	8b e2       	ldi	r24, 0x2B	; 43
    8d2c:	48 2e       	mov	r4, r24
    8d2e:	88 0f       	add	r24, r24
    8d30:	55 08       	sbc	r5, r5
    8d32:	89 8d       	ldd	r24, Y+25	; 0x19
    8d34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    8d36:	99 23       	and	r25, r25
    8d38:	1c f4       	brge	.+6      	; 0x8d40 <main+0x101e>
    8d3a:	91 95       	neg	r25
    8d3c:	81 95       	neg	r24
    8d3e:	91 09       	sbc	r25, r1
    8d40:	68 ee       	ldi	r22, 0xE8	; 232
    8d42:	73 e0       	ldi	r23, 0x03	; 3
    8d44:	0e 94 1d 51 	call	0xa23a	; 0xa23a <__divmodhi4>


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8d48:	a9 8d       	ldd	r26, Y+25	; 0x19
    8d4a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    8d4c:	bb 23       	and	r27, r27
    8d4e:	14 f4       	brge	.+4      	; 0x8d54 <main+0x1032>
    8d50:	5d e2       	ldi	r21, 0x2D	; 45
    8d52:	01 c0       	rjmp	.+2      	; 0x8d56 <main+0x1034>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8d54:	5b e2       	ldi	r21, 0x2B	; 43
    8d56:	a6 96       	adiw	r28, 0x26	; 38
    8d58:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d5a:	a6 97       	sbiw	r28, 0x26	; 38
    8d5c:	bf 93       	push	r27
    8d5e:	a5 96       	adiw	r28, 0x25	; 37
    8d60:	af ad       	ldd	r26, Y+63	; 0x3f
    8d62:	a5 97       	sbiw	r28, 0x25	; 37
    8d64:	af 93       	push	r26
    8d66:	bf a9       	ldd	r27, Y+55	; 0x37
    8d68:	bf 93       	push	r27
    8d6a:	a9 89       	ldd	r26, Y+17	; 0x11
    8d6c:	af 93       	push	r26
    8d6e:	ba ad       	ldd	r27, Y+58	; 0x3a
    8d70:	bf 93       	push	r27
    8d72:	a9 ad       	ldd	r26, Y+57	; 0x39
    8d74:	af 93       	push	r26
    8d76:	1f 93       	push	r17
    8d78:	0f 93       	push	r16
    8d7a:	ac 96       	adiw	r28, 0x2c	; 44
    8d7c:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d7e:	ac 97       	sbiw	r28, 0x2c	; 44
    8d80:	bf 93       	push	r27
    8d82:	ab 96       	adiw	r28, 0x2b	; 43
    8d84:	af ad       	ldd	r26, Y+63	; 0x3f
    8d86:	ab 97       	sbiw	r28, 0x2b	; 43
    8d88:	af 93       	push	r26
    8d8a:	bd ad       	ldd	r27, Y+61	; 0x3d
    8d8c:	bf 93       	push	r27
    8d8e:	ac ad       	ldd	r26, Y+60	; 0x3c
    8d90:	af 93       	push	r26
    8d92:	bb ad       	ldd	r27, Y+59	; 0x3b
    8d94:	bf 93       	push	r27
    8d96:	ad a5       	ldd	r26, Y+45	; 0x2d
    8d98:	af 93       	push	r26
    8d9a:	22 96       	adiw	r28, 0x02	; 2
    8d9c:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d9e:	22 97       	sbiw	r28, 0x02	; 2
    8da0:	bf 93       	push	r27
    8da2:	21 96       	adiw	r28, 0x01	; 1
    8da4:	af ad       	ldd	r26, Y+63	; 0x3f
    8da6:	21 97       	sbiw	r28, 0x01	; 1
    8da8:	af 93       	push	r26
    8daa:	bf ad       	ldd	r27, Y+63	; 0x3f
    8dac:	bf 93       	push	r27
    8dae:	ae ad       	ldd	r26, Y+62	; 0x3e
    8db0:	af 93       	push	r26
    8db2:	ff 92       	push	r15
    8db4:	ef 92       	push	r14
    8db6:	aa 96       	adiw	r28, 0x2a	; 42
    8db8:	bf ad       	ldd	r27, Y+63	; 0x3f
    8dba:	aa 97       	sbiw	r28, 0x2a	; 42
    8dbc:	bf 93       	push	r27
    8dbe:	a9 96       	adiw	r28, 0x29	; 41
    8dc0:	af ad       	ldd	r26, Y+63	; 0x3f
    8dc2:	a9 97       	sbiw	r28, 0x29	; 41
    8dc4:	af 93       	push	r26
    8dc6:	26 96       	adiw	r28, 0x06	; 6
    8dc8:	bf ad       	ldd	r27, Y+63	; 0x3f
    8dca:	26 97       	sbiw	r28, 0x06	; 6
    8dcc:	bf 93       	push	r27
    8dce:	25 96       	adiw	r28, 0x05	; 5
    8dd0:	af ad       	ldd	r26, Y+63	; 0x3f
    8dd2:	25 97       	sbiw	r28, 0x05	; 5
    8dd4:	af 93       	push	r26
    8dd6:	24 96       	adiw	r28, 0x04	; 4
    8dd8:	bf ad       	ldd	r27, Y+63	; 0x3f
    8dda:	24 97       	sbiw	r28, 0x04	; 4
    8ddc:	bf 93       	push	r27
    8dde:	23 96       	adiw	r28, 0x03	; 3
    8de0:	af ad       	ldd	r26, Y+63	; 0x3f
    8de2:	23 97       	sbiw	r28, 0x03	; 3
    8de4:	af 93       	push	r26
    8de6:	2a 96       	adiw	r28, 0x0a	; 10
    8de8:	bf ad       	ldd	r27, Y+63	; 0x3f
    8dea:	2a 97       	sbiw	r28, 0x0a	; 10
    8dec:	bf 93       	push	r27
    8dee:	29 96       	adiw	r28, 0x09	; 9
    8df0:	af ad       	ldd	r26, Y+63	; 0x3f
    8df2:	29 97       	sbiw	r28, 0x09	; 9
    8df4:	af 93       	push	r26
    8df6:	28 96       	adiw	r28, 0x08	; 8
    8df8:	bf ad       	ldd	r27, Y+63	; 0x3f
    8dfa:	28 97       	sbiw	r28, 0x08	; 8
    8dfc:	bf 93       	push	r27
    8dfe:	27 96       	adiw	r28, 0x07	; 7
    8e00:	af ad       	ldd	r26, Y+63	; 0x3f
    8e02:	27 97       	sbiw	r28, 0x07	; 7
    8e04:	af 93       	push	r26
    8e06:	df 92       	push	r13
    8e08:	cf 92       	push	r12
    8e0a:	a8 96       	adiw	r28, 0x28	; 40
    8e0c:	bf ad       	ldd	r27, Y+63	; 0x3f
    8e0e:	a8 97       	sbiw	r28, 0x28	; 40
    8e10:	bf 93       	push	r27
    8e12:	a7 96       	adiw	r28, 0x27	; 39
    8e14:	af ad       	ldd	r26, Y+63	; 0x3f
    8e16:	a7 97       	sbiw	r28, 0x27	; 39
    8e18:	af 93       	push	r26
    8e1a:	2d 96       	adiw	r28, 0x0d	; 13
    8e1c:	bf ad       	ldd	r27, Y+63	; 0x3f
    8e1e:	2d 97       	sbiw	r28, 0x0d	; 13
    8e20:	bf 93       	push	r27
    8e22:	2c 96       	adiw	r28, 0x0c	; 12
    8e24:	af ad       	ldd	r26, Y+63	; 0x3f
    8e26:	2c 97       	sbiw	r28, 0x0c	; 12
    8e28:	af 93       	push	r26
    8e2a:	2b 96       	adiw	r28, 0x0b	; 11
    8e2c:	bf ad       	ldd	r27, Y+63	; 0x3f
    8e2e:	2b 97       	sbiw	r28, 0x0b	; 11
    8e30:	bf 93       	push	r27
    8e32:	ab a9       	ldd	r26, Y+51	; 0x33
    8e34:	af 93       	push	r26
    8e36:	61 96       	adiw	r28, 0x11	; 17
    8e38:	bf ad       	ldd	r27, Y+63	; 0x3f
    8e3a:	61 97       	sbiw	r28, 0x11	; 17
    8e3c:	bf 93       	push	r27
    8e3e:	60 96       	adiw	r28, 0x10	; 16
    8e40:	af ad       	ldd	r26, Y+63	; 0x3f
    8e42:	60 97       	sbiw	r28, 0x10	; 16
    8e44:	af 93       	push	r26
    8e46:	2f 96       	adiw	r28, 0x0f	; 15
    8e48:	bf ad       	ldd	r27, Y+63	; 0x3f
    8e4a:	2f 97       	sbiw	r28, 0x0f	; 15
    8e4c:	bf 93       	push	r27
    8e4e:	2e 96       	adiw	r28, 0x0e	; 14
    8e50:	af ad       	ldd	r26, Y+63	; 0x3f
    8e52:	2e 97       	sbiw	r28, 0x0e	; 14
    8e54:	af 93       	push	r26
    8e56:	bf 92       	push	r11
    8e58:	af 92       	push	r10
    8e5a:	a4 96       	adiw	r28, 0x24	; 36
    8e5c:	af ac       	ldd	r10, Y+63	; 0x3f
    8e5e:	a4 97       	sbiw	r28, 0x24	; 36
    8e60:	af 92       	push	r10
    8e62:	a3 96       	adiw	r28, 0x23	; 35
    8e64:	bf ac       	ldd	r11, Y+63	; 0x3f
    8e66:	a3 97       	sbiw	r28, 0x23	; 35
    8e68:	bf 92       	push	r11
    8e6a:	64 96       	adiw	r28, 0x14	; 20
    8e6c:	af ac       	ldd	r10, Y+63	; 0x3f
    8e6e:	64 97       	sbiw	r28, 0x14	; 20
    8e70:	af 92       	push	r10
    8e72:	63 96       	adiw	r28, 0x13	; 19
    8e74:	bf ac       	ldd	r11, Y+63	; 0x3f
    8e76:	63 97       	sbiw	r28, 0x13	; 19
    8e78:	bf 92       	push	r11
    8e7a:	62 96       	adiw	r28, 0x12	; 18
    8e7c:	af ac       	ldd	r10, Y+63	; 0x3f
    8e7e:	62 97       	sbiw	r28, 0x12	; 18
    8e80:	af 92       	push	r10
    8e82:	bf a4       	ldd	r11, Y+47	; 0x2f
    8e84:	bf 92       	push	r11
    8e86:	68 96       	adiw	r28, 0x18	; 24
    8e88:	af ac       	ldd	r10, Y+63	; 0x3f
    8e8a:	68 97       	sbiw	r28, 0x18	; 24
    8e8c:	af 92       	push	r10
    8e8e:	67 96       	adiw	r28, 0x17	; 23
    8e90:	bf ac       	ldd	r11, Y+63	; 0x3f
    8e92:	67 97       	sbiw	r28, 0x17	; 23
    8e94:	bf 92       	push	r11
    8e96:	66 96       	adiw	r28, 0x16	; 22
    8e98:	af ac       	ldd	r10, Y+63	; 0x3f
    8e9a:	66 97       	sbiw	r28, 0x16	; 22
    8e9c:	af 92       	push	r10
    8e9e:	65 96       	adiw	r28, 0x15	; 21
    8ea0:	bf ac       	ldd	r11, Y+63	; 0x3f
    8ea2:	65 97       	sbiw	r28, 0x15	; 21
    8ea4:	bf 92       	push	r11
    8ea6:	9f 92       	push	r9
    8ea8:	8f 92       	push	r8
    8eaa:	a2 96       	adiw	r28, 0x22	; 34
    8eac:	8f ac       	ldd	r8, Y+63	; 0x3f
    8eae:	a2 97       	sbiw	r28, 0x22	; 34
    8eb0:	8f 92       	push	r8
    8eb2:	a1 96       	adiw	r28, 0x21	; 33
    8eb4:	9f ac       	ldd	r9, Y+63	; 0x3f
    8eb6:	a1 97       	sbiw	r28, 0x21	; 33
    8eb8:	9f 92       	push	r9
    8eba:	af 96       	adiw	r28, 0x2f	; 47
    8ebc:	af ac       	ldd	r10, Y+63	; 0x3f
    8ebe:	af 97       	sbiw	r28, 0x2f	; 47
    8ec0:	af 92       	push	r10
    8ec2:	ae 96       	adiw	r28, 0x2e	; 46
    8ec4:	bf ac       	ldd	r11, Y+63	; 0x3f
    8ec6:	ae 97       	sbiw	r28, 0x2e	; 46
    8ec8:	bf 92       	push	r11
    8eca:	ad 96       	adiw	r28, 0x2d	; 45
    8ecc:	8f ac       	ldd	r8, Y+63	; 0x3f
    8ece:	ad 97       	sbiw	r28, 0x2d	; 45
    8ed0:	8f 92       	push	r8
    8ed2:	99 a4       	ldd	r9, Y+41	; 0x29
    8ed4:	9f 92       	push	r9
    8ed6:	e3 96       	adiw	r28, 0x33	; 51
    8ed8:	af ac       	ldd	r10, Y+63	; 0x3f
    8eda:	e3 97       	sbiw	r28, 0x33	; 51
    8edc:	af 92       	push	r10
    8ede:	e2 96       	adiw	r28, 0x32	; 50
    8ee0:	bf ac       	ldd	r11, Y+63	; 0x3f
    8ee2:	e2 97       	sbiw	r28, 0x32	; 50
    8ee4:	bf 92       	push	r11
    8ee6:	e1 96       	adiw	r28, 0x31	; 49
    8ee8:	8f ac       	ldd	r8, Y+63	; 0x3f
    8eea:	e1 97       	sbiw	r28, 0x31	; 49
    8eec:	8f 92       	push	r8
    8eee:	e0 96       	adiw	r28, 0x30	; 48
    8ef0:	9f ac       	ldd	r9, Y+63	; 0x3f
    8ef2:	e0 97       	sbiw	r28, 0x30	; 48
    8ef4:	9f 92       	push	r9
    8ef6:	7f 92       	push	r7
    8ef8:	6f 92       	push	r6
    8efa:	a0 96       	adiw	r28, 0x20	; 32
    8efc:	af ac       	ldd	r10, Y+63	; 0x3f
    8efe:	a0 97       	sbiw	r28, 0x20	; 32
    8f00:	af 92       	push	r10
    8f02:	6f 96       	adiw	r28, 0x1f	; 31
    8f04:	bf ac       	ldd	r11, Y+63	; 0x3f
    8f06:	6f 97       	sbiw	r28, 0x1f	; 31
    8f08:	bf 92       	push	r11
    8f0a:	e6 96       	adiw	r28, 0x36	; 54
    8f0c:	8f ac       	ldd	r8, Y+63	; 0x3f
    8f0e:	e6 97       	sbiw	r28, 0x36	; 54
    8f10:	8f 92       	push	r8
    8f12:	e5 96       	adiw	r28, 0x35	; 53
    8f14:	9f ac       	ldd	r9, Y+63	; 0x3f
    8f16:	e5 97       	sbiw	r28, 0x35	; 53
    8f18:	9f 92       	push	r9
    8f1a:	e4 96       	adiw	r28, 0x34	; 52
    8f1c:	af ac       	ldd	r10, Y+63	; 0x3f
    8f1e:	e4 97       	sbiw	r28, 0x34	; 52
    8f20:	af 92       	push	r10
    8f22:	bd a0       	ldd	r11, Y+37	; 0x25
    8f24:	bf 92       	push	r11
    8f26:	e9 96       	adiw	r28, 0x39	; 57
    8f28:	8f ac       	ldd	r8, Y+63	; 0x3f
    8f2a:	e9 97       	sbiw	r28, 0x39	; 57
    8f2c:	8f 92       	push	r8
    8f2e:	4f 93       	push	r20
    8f30:	e8 96       	adiw	r28, 0x38	; 56
    8f32:	9f ac       	ldd	r9, Y+63	; 0x3f
    8f34:	e8 97       	sbiw	r28, 0x38	; 56
    8f36:	9f 92       	push	r9
    8f38:	e7 96       	adiw	r28, 0x37	; 55
    8f3a:	af ac       	ldd	r10, Y+63	; 0x3f
    8f3c:	e7 97       	sbiw	r28, 0x37	; 55
    8f3e:	af 92       	push	r10
    8f40:	3f 93       	push	r19
    8f42:	2f 93       	push	r18
    8f44:	6e 96       	adiw	r28, 0x1e	; 30
    8f46:	bf ac       	ldd	r11, Y+63	; 0x3f
    8f48:	6e 97       	sbiw	r28, 0x1e	; 30
    8f4a:	bf 92       	push	r11
    8f4c:	6d 96       	adiw	r28, 0x1d	; 29
    8f4e:	8f ac       	ldd	r8, Y+63	; 0x3f
    8f50:	6d 97       	sbiw	r28, 0x1d	; 29
    8f52:	8f 92       	push	r8
    8f54:	ea 96       	adiw	r28, 0x3a	; 58
    8f56:	9f ac       	ldd	r9, Y+63	; 0x3f
    8f58:	ea 97       	sbiw	r28, 0x3a	; 58
    8f5a:	9f 92       	push	r9
    8f5c:	a9 a0       	ldd	r10, Y+33	; 0x21
    8f5e:	af 92       	push	r10
    8f60:	ec 96       	adiw	r28, 0x3c	; 60
    8f62:	bf ac       	ldd	r11, Y+63	; 0x3f
    8f64:	ec 97       	sbiw	r28, 0x3c	; 60
    8f66:	bf 92       	push	r11
    8f68:	eb 96       	adiw	r28, 0x3b	; 59
    8f6a:	2f ad       	ldd	r18, Y+63	; 0x3f
    8f6c:	eb 97       	sbiw	r28, 0x3b	; 59
    8f6e:	2f 93       	push	r18
    8f70:	ff 93       	push	r31
    8f72:	ef 93       	push	r30
    8f74:	6c 96       	adiw	r28, 0x1c	; 28
    8f76:	8f ac       	ldd	r8, Y+63	; 0x3f
    8f78:	6c 97       	sbiw	r28, 0x1c	; 28
    8f7a:	8f 92       	push	r8
    8f7c:	6b 96       	adiw	r28, 0x1b	; 27
    8f7e:	9f ac       	ldd	r9, Y+63	; 0x3f
    8f80:	6b 97       	sbiw	r28, 0x1b	; 27
    8f82:	9f 92       	push	r9
    8f84:	ed 96       	adiw	r28, 0x3d	; 61
    8f86:	af ac       	ldd	r10, Y+63	; 0x3f
    8f88:	ed 97       	sbiw	r28, 0x3d	; 61
    8f8a:	af 92       	push	r10
    8f8c:	bd 88       	ldd	r11, Y+21	; 0x15
    8f8e:	bf 92       	push	r11
    8f90:	ef 96       	adiw	r28, 0x3f	; 63
    8f92:	2f ad       	ldd	r18, Y+63	; 0x3f
    8f94:	ef 97       	sbiw	r28, 0x3f	; 63
    8f96:	2f 93       	push	r18
    8f98:	ee 96       	adiw	r28, 0x3e	; 62
    8f9a:	3f ad       	ldd	r19, Y+63	; 0x3f
    8f9c:	ee 97       	sbiw	r28, 0x3e	; 62
    8f9e:	3f 93       	push	r19
    8fa0:	5f 92       	push	r5
    8fa2:	4f 92       	push	r4
    8fa4:	6a 96       	adiw	r28, 0x1a	; 26
    8fa6:	8f ac       	ldd	r8, Y+63	; 0x3f
    8fa8:	6a 97       	sbiw	r28, 0x1a	; 26
    8faa:	8f 92       	push	r8
    8fac:	69 96       	adiw	r28, 0x19	; 25
    8fae:	9f ac       	ldd	r9, Y+63	; 0x3f
    8fb0:	69 97       	sbiw	r28, 0x19	; 25
    8fb2:	9f 92       	push	r9
    8fb4:	9f 93       	push	r25
    8fb6:	8f 93       	push	r24
    8fb8:	7f 93       	push	r23
    8fba:	6f 93       	push	r22
    8fbc:	85 2f       	mov	r24, r21
    8fbe:	05 2e       	mov	r0, r21
    8fc0:	00 0c       	add	r0, r0
    8fc2:	99 0b       	sbc	r25, r25
    8fc4:	9f 93       	push	r25
    8fc6:	5f 93       	push	r21
    8fc8:	0f 2e       	mov	r0, r31
    8fca:	f0 e6       	ldi	r31, 0x60	; 96
    8fcc:	af 2e       	mov	r10, r31
    8fce:	f5 e2       	ldi	r31, 0x25	; 37
    8fd0:	bf 2e       	mov	r11, r31
    8fd2:	f0 2d       	mov	r31, r0
    8fd4:	bf 92       	push	r11
    8fd6:	af 92       	push	r10
    8fd8:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <printf>
    8fdc:	cd bf       	out	0x3d, r28	; 61
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    8fde:	de bf       	out	0x3e, r29	; 62

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    8fe0:	f8 94       	cli
    8fe2:	a7 ed       	ldi	r26, 0xD7	; 215
    8fe4:	ba e2       	ldi	r27, 0x2A	; 42
    8fe6:	8c 91       	ld	r24, X
    8fe8:	81 11       	cpse	r24, r1
    8fea:	09 c0       	rjmp	.+18     	; 0x8ffe <main+0x12dc>
    8fec:	a8 ed       	ldi	r26, 0xD8	; 216
    8fee:	ba e2       	ldi	r27, 0x2A	; 42
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    8ff0:	e0 e0       	ldi	r30, 0x00	; 0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    8ff2:	ef 5f       	subi	r30, 0xFF	; 255
    8ff4:	8d 91       	ld	r24, X+
    8ff6:	88 23       	and	r24, r24
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    8ff8:	e1 f3       	breq	.-8      	; 0x8ff2 <main+0x12d0>
    8ffa:	e1 11       	cpse	r30, r1
		cpu_irq_enable();
    8ffc:	02 c0       	rjmp	.+4      	; 0x9002 <main+0x12e0>
    8ffe:	78 94       	sei
    9000:	12 c0       	rjmp	.+36     	; 0x9026 <main+0x1304>
    9002:	d1 01       	movw	r26, r2

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    9004:	8c 91       	ld	r24, X
    9006:	f0 e0       	ldi	r31, 0x00	; 0
    9008:	ea 5b       	subi	r30, 0xBA	; 186
    900a:	ff 4d       	sbci	r31, 0xDF	; 223
    900c:	81 7f       	andi	r24, 0xF1	; 241
    900e:	90 81       	ld	r25, Z
    9010:	89 2b       	or	r24, r25
	sleep_enable();
    9012:	8c 93       	st	X, r24
    9014:	8c 91       	ld	r24, X
    9016:	81 60       	ori	r24, 0x01	; 1

	cpu_irq_enable();
    9018:	8c 93       	st	X, r24
	sleep_enter();
    901a:	78 94       	sei

	sleep_disable();
    901c:	88 95       	sleep
    901e:	f1 01       	movw	r30, r2
    9020:	80 81       	ld	r24, Z
    9022:	8e 7f       	andi	r24, 0xFE	; 254

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9024:	80 83       	st	Z, r24
    9026:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    9028:	8f 87       	std	Y+15, r24	; 0x0f
	return flags;
    902a:	f8 94       	cli
    while (l_workmode) {
		task();
		sleepmgr_enter_sleep();

		flags = cpu_irq_save();
		l_workmode = g_workmode;
    902c:	9f 85       	ldd	r25, Y+15	; 0x0f
    902e:	80 91 80 29 	lds	r24, 0x2980	; 0x802980 <g_workmode>
	/* The application code */
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode = WORKMODE_RUN;
	cpu_irq_restore(flags);

    while (l_workmode) {
    9032:	9f bf       	out	0x3f, r25	; 63
    9034:	81 11       	cpse	r24, r1
		flags = cpu_irq_save();
		l_workmode = g_workmode;
		cpu_irq_restore(flags);
    }

	cpu_irq_disable();
    9036:	61 c9       	rjmp	.-3390   	; 0x82fa <main+0x5d8>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    9038:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    903a:	f8 94       	cli
    903c:	80 91 d7 2a 	lds	r24, 0x2AD7	; 0x802ad7 <sleepmgr_locks>
    9040:	81 11       	cpse	r24, r1
    9042:	09 c0       	rjmp	.+18     	; 0x9056 <main+0x1334>
    9044:	a8 ed       	ldi	r26, 0xD8	; 216
    9046:	ba e2       	ldi	r27, 0x2A	; 42
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    9048:	e0 e0       	ldi	r30, 0x00	; 0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    904a:	ef 5f       	subi	r30, 0xFF	; 255
    904c:	8d 91       	ld	r24, X+
    904e:	88 23       	and	r24, r24
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    9050:	e1 f3       	breq	.-8      	; 0x904a <main+0x1328>
    9052:	e1 11       	cpse	r30, r1
		cpu_irq_enable();
    9054:	02 c0       	rjmp	.+4      	; 0x905a <main+0x1338>
    9056:	78 94       	sei
    9058:	13 c0       	rjmp	.+38     	; 0x9080 <main+0x135e>
    905a:	a8 e4       	ldi	r26, 0x48	; 72
    905c:	b0 e0       	ldi	r27, 0x00	; 0

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    905e:	8c 91       	ld	r24, X
    9060:	f0 e0       	ldi	r31, 0x00	; 0
    9062:	ea 5b       	subi	r30, 0xBA	; 186
    9064:	ff 4d       	sbci	r31, 0xDF	; 223
    9066:	98 2f       	mov	r25, r24
    9068:	91 7f       	andi	r25, 0xF1	; 241
    906a:	80 81       	ld	r24, Z
    906c:	89 2b       	or	r24, r25
	sleep_enable();
    906e:	8c 93       	st	X, r24
    9070:	8c 91       	ld	r24, X
    9072:	81 60       	ori	r24, 0x01	; 1

	cpu_irq_enable();
    9074:	8c 93       	st	X, r24
	sleep_enter();
    9076:	78 94       	sei

	sleep_disable();
    9078:	88 95       	sleep
    907a:	8c 91       	ld	r24, X
    907c:	8e 7f       	andi	r24, 0xFE	; 254
	sleepmgr_enter_sleep();

	return retcode;
}
    907e:	8c 93       	st	X, r24
    9080:	80 e0       	ldi	r24, 0x00	; 0
    9082:	90 e0       	ldi	r25, 0x00	; 0
    9084:	c2 58       	subi	r28, 0x82	; 130
    9086:	df 4f       	sbci	r29, 0xFF	; 255
    9088:	cd bf       	out	0x3d, r28	; 61
    908a:	de bf       	out	0x3e, r29	; 62
    908c:	df 91       	pop	r29
    908e:	cf 91       	pop	r28
    9090:	1f 91       	pop	r17
    9092:	0f 91       	pop	r16
    9094:	ff 90       	pop	r15
    9096:	ef 90       	pop	r14
    9098:	df 90       	pop	r13
    909a:	cf 90       	pop	r12
    909c:	bf 90       	pop	r11
    909e:	af 90       	pop	r10
    90a0:	9f 90       	pop	r9
    90a2:	8f 90       	pop	r8
    90a4:	7f 90       	pop	r7
    90a6:	6f 90       	pop	r6
    90a8:	5f 90       	pop	r5
    90aa:	4f 90       	pop	r4
    90ac:	3f 90       	pop	r3
    90ae:	2f 90       	pop	r2
    90b0:	08 95       	ret

000090b2 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    90b2:	cf 93       	push	r28
    90b4:	df 93       	push	r29
    90b6:	cd b7       	in	r28, 0x3d	; 61
    90b8:	de b7       	in	r29, 0x3e	; 62
    90ba:	28 97       	sbiw	r28, 0x08	; 8
    90bc:	cd bf       	out	0x3d, r28	; 61
    90be:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    90c0:	8f ef       	ldi	r24, 0xFF	; 255
    90c2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    90c6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    90ca:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    90ce:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    90d2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    90d6:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    90da:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    90de:	61 e0       	ldi	r22, 0x01	; 1
    90e0:	81 e4       	ldi	r24, 0x41	; 65
    90e2:	90 e0       	ldi	r25, 0x00	; 0
    90e4:	0e 94 f4 50 	call	0xa1e8	; 0xa1e8 <ccp_write_io>
    90e8:	6c e1       	ldi	r22, 0x1C	; 28
    90ea:	70 e0       	ldi	r23, 0x00	; 0
    90ec:	82 e0       	ldi	r24, 0x02	; 2
    90ee:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    90f2:	8a 83       	std	Y+2, r24	; 0x02
    90f4:	6d e1       	ldi	r22, 0x1D	; 29
    90f6:	70 e0       	ldi	r23, 0x00	; 0
    90f8:	82 e0       	ldi	r24, 0x02	; 2
    90fa:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    90fe:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    9100:	89 81       	ldd	r24, Y+1	; 0x01
    9102:	9a 81       	ldd	r25, Y+2	; 0x02
    9104:	01 96       	adiw	r24, 0x01	; 1
    9106:	21 f4       	brne	.+8      	; 0x9110 <sysclk_init+0x5e>
		cal = 0x2340;
    9108:	80 e4       	ldi	r24, 0x40	; 64
    910a:	93 e2       	ldi	r25, 0x23	; 35
    910c:	89 83       	std	Y+1, r24	; 0x01
    910e:	9a 83       	std	Y+2, r25	; 0x02
    9110:	89 81       	ldd	r24, Y+1	; 0x01
    9112:	9a 81       	ldd	r25, Y+2	; 0x02
    9114:	8b 83       	std	Y+3, r24	; 0x03
    9116:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    9118:	e0 e6       	ldi	r30, 0x60	; 96
    911a:	f0 e0       	ldi	r31, 0x00	; 0
    911c:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    911e:	8c 81       	ldd	r24, Y+4	; 0x04
    9120:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    9122:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    9126:	84 fd       	sbrc	r24, 4
    9128:	21 c0       	rjmp	.+66     	; 0x916c <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    912a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    912e:	83 fd       	sbrc	r24, 3
    9130:	0e c0       	rjmp	.+28     	; 0x914e <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    9132:	e0 e5       	ldi	r30, 0x50	; 80
    9134:	f0 e0       	ldi	r31, 0x00	; 0
    9136:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9138:	8f b7       	in	r24, 0x3f	; 63
    913a:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    913c:	f8 94       	cli
	return flags;
    913e:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    9140:	80 81       	ld	r24, Z
    9142:	88 60       	ori	r24, 0x08	; 8
    9144:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9146:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    9148:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    914a:	83 ff       	sbrs	r24, 3
    914c:	fd cf       	rjmp	.-6      	; 0x9148 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    914e:	8f b7       	in	r24, 0x3f	; 63
    9150:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    9152:	f8 94       	cli
	return flags;
    9154:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    9156:	e0 e5       	ldi	r30, 0x50	; 80
    9158:	f0 e0       	ldi	r31, 0x00	; 0
    915a:	83 ec       	ldi	r24, 0xC3	; 195
    915c:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    915e:	80 81       	ld	r24, Z
    9160:	80 61       	ori	r24, 0x10	; 16
    9162:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9164:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    9166:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    9168:	84 ff       	sbrs	r24, 4
    916a:	fd cf       	rjmp	.-6      	; 0x9166 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    916c:	64 e0       	ldi	r22, 0x04	; 4
    916e:	80 e4       	ldi	r24, 0x40	; 64
    9170:	90 e0       	ldi	r25, 0x00	; 0
    9172:	0e 94 f4 50 	call	0xa1e8	; 0xa1e8 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9176:	8f b7       	in	r24, 0x3f	; 63
    9178:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    917a:	f8 94       	cli
	return flags;
    917c:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    917e:	e0 e5       	ldi	r30, 0x50	; 80
    9180:	f0 e0       	ldi	r31, 0x00	; 0
    9182:	80 81       	ld	r24, Z
    9184:	8e 7f       	andi	r24, 0xFE	; 254
    9186:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9188:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    918a:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    918c:	8f b7       	in	r24, 0x3f	; 63
    918e:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    9190:	f8 94       	cli
	return flags;
    9192:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    9194:	80 81       	ld	r24, Z
    9196:	88 60       	ori	r24, 0x08	; 8
    9198:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    919a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    919c:	81 81       	ldd	r24, Z+1	; 0x01
    919e:	83 ff       	sbrs	r24, 3
    91a0:	fd cf       	rjmp	.-6      	; 0x919c <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    91a2:	8b e0       	ldi	r24, 0x0B	; 11
    91a4:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    91a8:	28 96       	adiw	r28, 0x08	; 8
    91aa:	cd bf       	out	0x3d, r28	; 61
    91ac:	de bf       	out	0x3e, r29	; 62
    91ae:	df 91       	pop	r29
    91b0:	cf 91       	pop	r28
    91b2:	08 95       	ret

000091b4 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    91b4:	cf 93       	push	r28
    91b6:	df 93       	push	r29
    91b8:	1f 92       	push	r1
    91ba:	cd b7       	in	r28, 0x3d	; 61
    91bc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    91be:	9f b7       	in	r25, 0x3f	; 63
    91c0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    91c2:	f8 94       	cli
	return flags;
    91c4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    91c6:	e8 2f       	mov	r30, r24
    91c8:	f0 e0       	ldi	r31, 0x00	; 0
    91ca:	e0 59       	subi	r30, 0x90	; 144
    91cc:	ff 4f       	sbci	r31, 0xFF	; 255
    91ce:	60 95       	com	r22
    91d0:	80 81       	ld	r24, Z
    91d2:	68 23       	and	r22, r24
    91d4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    91d6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    91d8:	0f 90       	pop	r0
    91da:	df 91       	pop	r29
    91dc:	cf 91       	pop	r28
    91de:	08 95       	ret

000091e0 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    91e0:	cf 93       	push	r28
    91e2:	df 93       	push	r29
    91e4:	1f 92       	push	r1
    91e6:	cd b7       	in	r28, 0x3d	; 61
    91e8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    91ea:	9f b7       	in	r25, 0x3f	; 63
    91ec:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    91ee:	f8 94       	cli
	return flags;
    91f0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    91f2:	e8 2f       	mov	r30, r24
    91f4:	f0 e0       	ldi	r31, 0x00	; 0
    91f6:	e0 59       	subi	r30, 0x90	; 144
    91f8:	ff 4f       	sbci	r31, 0xFF	; 255
    91fa:	80 81       	ld	r24, Z
    91fc:	68 2b       	or	r22, r24
    91fe:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9200:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    9202:	0f 90       	pop	r0
    9204:	df 91       	pop	r29
    9206:	cf 91       	pop	r28
    9208:	08 95       	ret

0000920a <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    920a:	cf 93       	push	r28
    920c:	df 93       	push	r29
    920e:	1f 92       	push	r1
    9210:	1f 92       	push	r1
    9212:	cd b7       	in	r28, 0x3d	; 61
    9214:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    9216:	86 30       	cpi	r24, 0x06	; 6
    9218:	11 f0       	breq	.+4      	; 0x921e <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    921a:	60 e0       	ldi	r22, 0x00	; 0
    921c:	01 c0       	rjmp	.+2      	; 0x9220 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    921e:	68 e1       	ldi	r22, 0x18	; 24
    9220:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    9224:	81 fd       	sbrc	r24, 1
    9226:	2a c0       	rjmp	.+84     	; 0x927c <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9228:	8f b7       	in	r24, 0x3f	; 63
    922a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    922c:	f8 94       	cli
	return flags;
    922e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    9230:	e0 e5       	ldi	r30, 0x50	; 80
    9232:	f0 e0       	ldi	r31, 0x00	; 0
    9234:	80 81       	ld	r24, Z
    9236:	82 60       	ori	r24, 0x02	; 2
    9238:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    923a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    923c:	81 81       	ldd	r24, Z+1	; 0x01
    923e:	81 ff       	sbrs	r24, 1
    9240:	fd cf       	rjmp	.-6      	; 0x923c <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9242:	8f b7       	in	r24, 0x3f	; 63
    9244:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    9246:	f8 94       	cli
	return flags;
    9248:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    924a:	a0 e5       	ldi	r26, 0x50	; 80
    924c:	b0 e0       	ldi	r27, 0x00	; 0
    924e:	16 96       	adiw	r26, 0x06	; 6
    9250:	8c 91       	ld	r24, X
    9252:	16 97       	sbiw	r26, 0x06	; 6
    9254:	89 7f       	andi	r24, 0xF9	; 249
    9256:	16 96       	adiw	r26, 0x06	; 6
    9258:	8c 93       	st	X, r24
    925a:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    925c:	e0 e6       	ldi	r30, 0x60	; 96
    925e:	f0 e0       	ldi	r31, 0x00	; 0
    9260:	80 e8       	ldi	r24, 0x80	; 128
    9262:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    9264:	8b eb       	ldi	r24, 0xBB	; 187
    9266:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    9268:	16 96       	adiw	r26, 0x06	; 6
    926a:	8c 91       	ld	r24, X
    926c:	16 97       	sbiw	r26, 0x06	; 6
    926e:	84 60       	ori	r24, 0x04	; 4
    9270:	16 96       	adiw	r26, 0x06	; 6
    9272:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    9274:	80 81       	ld	r24, Z
    9276:	81 60       	ori	r24, 0x01	; 1
    9278:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    927a:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    927c:	63 60       	ori	r22, 0x03	; 3
    927e:	84 e4       	ldi	r24, 0x44	; 68
    9280:	90 e0       	ldi	r25, 0x00	; 0
    9282:	b2 d7       	rcall	.+3940   	; 0xa1e8 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    9284:	60 e4       	ldi	r22, 0x40	; 64
    9286:	80 e0       	ldi	r24, 0x00	; 0
    9288:	95 df       	rcall	.-214    	; 0x91b4 <sysclk_enable_module>
}
    928a:	0f 90       	pop	r0
    928c:	0f 90       	pop	r0
    928e:	df 91       	pop	r29
    9290:	cf 91       	pop	r28
    9292:	08 95       	ret

00009294 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    9294:	80 91 96 2a 	lds	r24, 0x2A96	; 0x802a96 <udi_cdc_nb_comm_enabled>
    9298:	81 50       	subi	r24, 0x01	; 1
    929a:	80 93 96 2a 	sts	0x2A96, r24	; 0x802a96 <udi_cdc_nb_comm_enabled>
    929e:	08 95       	ret

000092a0 <udi_cdc_data_setup>:
    92a0:	80 e0       	ldi	r24, 0x00	; 0
    92a2:	08 95       	ret

000092a4 <udi_cdc_getsetting>:
    92a4:	80 e0       	ldi	r24, 0x00	; 0
    92a6:	08 95       	ret

000092a8 <udi_cdc_line_coding_received>:
    92a8:	64 ea       	ldi	r22, 0xA4	; 164
    92aa:	7a e2       	ldi	r23, 0x2A	; 42
    92ac:	80 e0       	ldi	r24, 0x00	; 0
    92ae:	0c 94 8c 3e 	jmp	0x7d18	; 0x7d18 <usb_callback_config>
    92b2:	08 95       	ret

000092b4 <udi_cdc_comm_enable>:
    92b4:	10 92 96 2a 	sts	0x2A96, r1	; 0x802a96 <udi_cdc_nb_comm_enabled>
    92b8:	10 92 a2 2a 	sts	0x2AA2, r1	; 0x802aa2 <udi_cdc_state>
    92bc:	10 92 a3 2a 	sts	0x2AA3, r1	; 0x802aa3 <udi_cdc_state+0x1>
    92c0:	e8 e9       	ldi	r30, 0x98	; 152
    92c2:	fa e2       	ldi	r31, 0x2A	; 42
    92c4:	81 ea       	ldi	r24, 0xA1	; 161
    92c6:	80 83       	st	Z, r24
    92c8:	80 e2       	ldi	r24, 0x20	; 32
    92ca:	81 83       	std	Z+1, r24	; 0x01
    92cc:	12 82       	std	Z+2, r1	; 0x02
    92ce:	13 82       	std	Z+3, r1	; 0x03
    92d0:	14 82       	std	Z+4, r1	; 0x04
    92d2:	15 82       	std	Z+5, r1	; 0x05
    92d4:	82 e0       	ldi	r24, 0x02	; 2
    92d6:	90 e0       	ldi	r25, 0x00	; 0
    92d8:	86 83       	std	Z+6, r24	; 0x06
    92da:	97 83       	std	Z+7, r25	; 0x07
    92dc:	10 86       	std	Z+8, r1	; 0x08
    92de:	11 86       	std	Z+9, r1	; 0x09
    92e0:	e4 ea       	ldi	r30, 0xA4	; 164
    92e2:	fa e2       	ldi	r31, 0x2A	; 42
    92e4:	80 e0       	ldi	r24, 0x00	; 0
    92e6:	92 ec       	ldi	r25, 0xC2	; 194
    92e8:	a1 e0       	ldi	r26, 0x01	; 1
    92ea:	b0 e0       	ldi	r27, 0x00	; 0
    92ec:	80 83       	st	Z, r24
    92ee:	91 83       	std	Z+1, r25	; 0x01
    92f0:	a2 83       	std	Z+2, r26	; 0x02
    92f2:	b3 83       	std	Z+3, r27	; 0x03
    92f4:	14 82       	std	Z+4, r1	; 0x04
    92f6:	15 82       	std	Z+5, r1	; 0x05
    92f8:	88 e0       	ldi	r24, 0x08	; 8
    92fa:	86 83       	std	Z+6, r24	; 0x06
    92fc:	bf 01       	movw	r22, r30
    92fe:	80 e0       	ldi	r24, 0x00	; 0
    9300:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <usb_callback_config>
    9304:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <usb_callback_cdc_enable>
    9308:	88 23       	and	r24, r24
    930a:	29 f0       	breq	.+10     	; 0x9316 <udi_cdc_comm_enable+0x62>
    930c:	90 91 96 2a 	lds	r25, 0x2A96	; 0x802a96 <udi_cdc_nb_comm_enabled>
    9310:	9f 5f       	subi	r25, 0xFF	; 255
    9312:	90 93 96 2a 	sts	0x2A96, r25	; 0x802a96 <udi_cdc_nb_comm_enabled>
    9316:	08 95       	ret

00009318 <udi_cdc_tx_send>:
    9318:	ff 92       	push	r15
    931a:	0f 93       	push	r16
    931c:	1f 93       	push	r17
    931e:	cf 93       	push	r28
    9320:	df 93       	push	r29
    9322:	1f 92       	push	r1
    9324:	cd b7       	in	r28, 0x3d	; 61
    9326:	de b7       	in	r29, 0x3e	; 62
    9328:	80 91 84 29 	lds	r24, 0x2984	; 0x802984 <udi_cdc_tx_trans_ongoing>
    932c:	81 11       	cpse	r24, r1
    932e:	9f c0       	rjmp	.+318    	; 0x946e <udi_cdc_tx_send+0x156>
    9330:	0e 94 dd 35 	call	0x6bba	; 0x6bba <udd_is_high_speed>
    9334:	88 23       	and	r24, r24
    9336:	51 f0       	breq	.+20     	; 0x934c <udi_cdc_tx_send+0x34>
    9338:	00 91 85 29 	lds	r16, 0x2985	; 0x802985 <udi_cdc_tx_sof_num>
    933c:	10 91 86 29 	lds	r17, 0x2986	; 0x802986 <udi_cdc_tx_sof_num+0x1>
    9340:	0e 94 ea 35 	call	0x6bd4	; 0x6bd4 <udd_get_micro_frame_number>
    9344:	08 17       	cp	r16, r24
    9346:	19 07       	cpc	r17, r25
    9348:	59 f4       	brne	.+22     	; 0x9360 <udi_cdc_tx_send+0x48>
    934a:	91 c0       	rjmp	.+290    	; 0x946e <udi_cdc_tx_send+0x156>
    934c:	00 91 85 29 	lds	r16, 0x2985	; 0x802985 <udi_cdc_tx_sof_num>
    9350:	10 91 86 29 	lds	r17, 0x2986	; 0x802986 <udi_cdc_tx_sof_num+0x1>
    9354:	0e 94 e5 35 	call	0x6bca	; 0x6bca <udd_get_frame_number>
    9358:	08 17       	cp	r16, r24
    935a:	19 07       	cpc	r17, r25
    935c:	09 f4       	brne	.+2      	; 0x9360 <udi_cdc_tx_send+0x48>
    935e:	87 c0       	rjmp	.+270    	; 0x946e <udi_cdc_tx_send+0x156>
    9360:	8f b7       	in	r24, 0x3f	; 63
    9362:	89 83       	std	Y+1, r24	; 0x01
    9364:	f8 94       	cli
    9366:	19 81       	ldd	r17, Y+1	; 0x01
    9368:	00 91 87 29 	lds	r16, 0x2987	; 0x802987 <udi_cdc_tx_buf_sel>
    936c:	e0 2f       	mov	r30, r16
    936e:	f0 e0       	ldi	r31, 0x00	; 0
    9370:	ee 0f       	add	r30, r30
    9372:	ff 1f       	adc	r31, r31
    9374:	e8 57       	subi	r30, 0x78	; 120
    9376:	f6 4d       	sbci	r31, 0xD6	; 214
    9378:	80 81       	ld	r24, Z
    937a:	91 81       	ldd	r25, Z+1	; 0x01
    937c:	89 2b       	or	r24, r25
    937e:	09 f5       	brne	.+66     	; 0x93c2 <udi_cdc_tx_send+0xaa>
    9380:	80 91 81 29 	lds	r24, 0x2981	; 0x802981 <sof_zlp_counter.5059>
    9384:	90 91 82 29 	lds	r25, 0x2982	; 0x802982 <sof_zlp_counter.5059+0x1>
    9388:	01 96       	adiw	r24, 0x01	; 1
    938a:	80 93 81 29 	sts	0x2981, r24	; 0x802981 <sof_zlp_counter.5059>
    938e:	90 93 82 29 	sts	0x2982, r25	; 0x802982 <sof_zlp_counter.5059+0x1>
    9392:	0e 94 dd 35 	call	0x6bba	; 0x6bba <udd_is_high_speed>
    9396:	81 11       	cpse	r24, r1
    9398:	07 c0       	rjmp	.+14     	; 0x93a8 <udi_cdc_tx_send+0x90>
    939a:	80 91 81 29 	lds	r24, 0x2981	; 0x802981 <sof_zlp_counter.5059>
    939e:	90 91 82 29 	lds	r25, 0x2982	; 0x802982 <sof_zlp_counter.5059+0x1>
    93a2:	84 36       	cpi	r24, 0x64	; 100
    93a4:	91 05       	cpc	r25, r1
    93a6:	58 f0       	brcs	.+22     	; 0x93be <udi_cdc_tx_send+0xa6>
    93a8:	0e 94 dd 35 	call	0x6bba	; 0x6bba <udd_is_high_speed>
    93ac:	88 23       	and	r24, r24
    93ae:	49 f0       	breq	.+18     	; 0x93c2 <udi_cdc_tx_send+0xaa>
    93b0:	80 91 81 29 	lds	r24, 0x2981	; 0x802981 <sof_zlp_counter.5059>
    93b4:	90 91 82 29 	lds	r25, 0x2982	; 0x802982 <sof_zlp_counter.5059+0x1>
    93b8:	80 32       	cpi	r24, 0x20	; 32
    93ba:	93 40       	sbci	r25, 0x03	; 3
    93bc:	10 f4       	brcc	.+4      	; 0x93c2 <udi_cdc_tx_send+0xaa>
    93be:	1f bf       	out	0x3f, r17	; 63
    93c0:	56 c0       	rjmp	.+172    	; 0x946e <udi_cdc_tx_send+0x156>
    93c2:	10 92 81 29 	sts	0x2981, r1	; 0x802981 <sof_zlp_counter.5059>
    93c6:	10 92 82 29 	sts	0x2982, r1	; 0x802982 <sof_zlp_counter.5059+0x1>
    93ca:	80 91 83 29 	lds	r24, 0x2983	; 0x802983 <udi_cdc_tx_both_buf_to_send>
    93ce:	81 11       	cpse	r24, r1
    93d0:	06 c0       	rjmp	.+12     	; 0x93de <udi_cdc_tx_send+0xc6>
    93d2:	81 e0       	ldi	r24, 0x01	; 1
    93d4:	01 11       	cpse	r16, r1
    93d6:	80 e0       	ldi	r24, 0x00	; 0
    93d8:	80 93 87 29 	sts	0x2987, r24	; 0x802987 <udi_cdc_tx_buf_sel>
    93dc:	04 c0       	rjmp	.+8      	; 0x93e6 <udi_cdc_tx_send+0xce>
    93de:	81 e0       	ldi	r24, 0x01	; 1
    93e0:	01 11       	cpse	r16, r1
    93e2:	80 e0       	ldi	r24, 0x00	; 0
    93e4:	08 2f       	mov	r16, r24
    93e6:	81 e0       	ldi	r24, 0x01	; 1
    93e8:	80 93 84 29 	sts	0x2984, r24	; 0x802984 <udi_cdc_tx_trans_ongoing>
    93ec:	1f bf       	out	0x3f, r17	; 63
    93ee:	10 e0       	ldi	r17, 0x00	; 0
    93f0:	f8 01       	movw	r30, r16
    93f2:	ee 0f       	add	r30, r30
    93f4:	ff 1f       	adc	r31, r31
    93f6:	e8 57       	subi	r30, 0x78	; 120
    93f8:	f6 4d       	sbci	r31, 0xD6	; 214
    93fa:	80 81       	ld	r24, Z
    93fc:	91 81       	ldd	r25, Z+1	; 0x01
    93fe:	ff 24       	eor	r15, r15
    9400:	f3 94       	inc	r15
    9402:	80 34       	cpi	r24, 0x40	; 64
    9404:	91 05       	cpc	r25, r1
    9406:	09 f4       	brne	.+2      	; 0x940a <udi_cdc_tx_send+0xf2>
    9408:	f1 2c       	mov	r15, r1
    940a:	80 34       	cpi	r24, 0x40	; 64
    940c:	91 05       	cpc	r25, r1
    940e:	91 f0       	breq	.+36     	; 0x9434 <udi_cdc_tx_send+0x11c>
    9410:	0e 94 dd 35 	call	0x6bba	; 0x6bba <udd_is_high_speed>
    9414:	88 23       	and	r24, r24
    9416:	39 f0       	breq	.+14     	; 0x9426 <udi_cdc_tx_send+0x10e>
    9418:	0e 94 ea 35 	call	0x6bd4	; 0x6bd4 <udd_get_micro_frame_number>
    941c:	80 93 85 29 	sts	0x2985, r24	; 0x802985 <udi_cdc_tx_sof_num>
    9420:	90 93 86 29 	sts	0x2986, r25	; 0x802986 <udi_cdc_tx_sof_num+0x1>
    9424:	0b c0       	rjmp	.+22     	; 0x943c <udi_cdc_tx_send+0x124>
    9426:	0e 94 e5 35 	call	0x6bca	; 0x6bca <udd_get_frame_number>
    942a:	80 93 85 29 	sts	0x2985, r24	; 0x802985 <udi_cdc_tx_sof_num>
    942e:	90 93 86 29 	sts	0x2986, r25	; 0x802986 <udi_cdc_tx_sof_num+0x1>
    9432:	04 c0       	rjmp	.+8      	; 0x943c <udi_cdc_tx_send+0x124>
    9434:	10 92 85 29 	sts	0x2985, r1	; 0x802985 <udi_cdc_tx_sof_num>
    9438:	10 92 86 29 	sts	0x2986, r1	; 0x802986 <udi_cdc_tx_sof_num+0x1>
    943c:	f8 01       	movw	r30, r16
    943e:	ee 0f       	add	r30, r30
    9440:	ff 1f       	adc	r31, r31
    9442:	e8 57       	subi	r30, 0x78	; 120
    9444:	f6 4d       	sbci	r31, 0xD6	; 214
    9446:	20 81       	ld	r18, Z
    9448:	31 81       	ldd	r19, Z+1	; 0x01
    944a:	a8 01       	movw	r20, r16
    944c:	00 24       	eor	r0, r0
    944e:	56 95       	lsr	r21
    9450:	47 95       	ror	r20
    9452:	07 94       	ror	r0
    9454:	56 95       	lsr	r21
    9456:	47 95       	ror	r20
    9458:	07 94       	ror	r0
    945a:	54 2f       	mov	r21, r20
    945c:	40 2d       	mov	r20, r0
    945e:	44 57       	subi	r20, 0x74	; 116
    9460:	56 4d       	sbci	r21, 0xD6	; 214
    9462:	01 e4       	ldi	r16, 0x41	; 65
    9464:	1a e4       	ldi	r17, 0x4A	; 74
    9466:	6f 2d       	mov	r22, r15
    9468:	81 e8       	ldi	r24, 0x81	; 129
    946a:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <udd_ep_run>
    946e:	0f 90       	pop	r0
    9470:	df 91       	pop	r29
    9472:	cf 91       	pop	r28
    9474:	1f 91       	pop	r17
    9476:	0f 91       	pop	r16
    9478:	ff 90       	pop	r15
    947a:	08 95       	ret

0000947c <udi_cdc_data_sof_notify>:
    947c:	80 e0       	ldi	r24, 0x00	; 0
    947e:	4c cf       	rjmp	.-360    	; 0x9318 <udi_cdc_tx_send>
    9480:	08 95       	ret

00009482 <udi_cdc_data_sent>:
    9482:	81 11       	cpse	r24, r1
    9484:	1a c0       	rjmp	.+52     	; 0x94ba <udi_cdc_data_sent+0x38>
    9486:	20 91 87 29 	lds	r18, 0x2987	; 0x802987 <udi_cdc_tx_buf_sel>
    948a:	81 e0       	ldi	r24, 0x01	; 1
    948c:	90 e0       	ldi	r25, 0x00	; 0
    948e:	22 23       	and	r18, r18
    9490:	11 f0       	breq	.+4      	; 0x9496 <udi_cdc_data_sent+0x14>
    9492:	80 e0       	ldi	r24, 0x00	; 0
    9494:	90 e0       	ldi	r25, 0x00	; 0
    9496:	88 0f       	add	r24, r24
    9498:	99 1f       	adc	r25, r25
    949a:	fc 01       	movw	r30, r24
    949c:	e8 57       	subi	r30, 0x78	; 120
    949e:	f6 4d       	sbci	r31, 0xD6	; 214
    94a0:	10 82       	st	Z, r1
    94a2:	11 82       	std	Z+1, r1	; 0x01
    94a4:	10 92 83 29 	sts	0x2983, r1	; 0x802983 <udi_cdc_tx_both_buf_to_send>
    94a8:	10 92 84 29 	sts	0x2984, r1	; 0x802984 <udi_cdc_tx_trans_ongoing>
    94ac:	67 2b       	or	r22, r23
    94ae:	19 f0       	breq	.+6      	; 0x94b6 <udi_cdc_data_sent+0x34>
    94b0:	80 e0       	ldi	r24, 0x00	; 0
    94b2:	0e 94 90 3e 	call	0x7d20	; 0x7d20 <usb_callback_tx_empty_notify>
    94b6:	80 e0       	ldi	r24, 0x00	; 0
    94b8:	2f cf       	rjmp	.-418    	; 0x9318 <udi_cdc_tx_send>
    94ba:	08 95       	ret

000094bc <udi_cdc_data_disable>:
    94bc:	80 91 95 2a 	lds	r24, 0x2A95	; 0x802a95 <udi_cdc_nb_data_enabled>
    94c0:	81 50       	subi	r24, 0x01	; 1
    94c2:	80 93 95 2a 	sts	0x2A95, r24	; 0x802a95 <udi_cdc_nb_data_enabled>
    94c6:	80 91 95 2a 	lds	r24, 0x2A95	; 0x802a95 <udi_cdc_nb_data_enabled>
    94ca:	0e 94 89 3e 	call	0x7d12	; 0x7d12 <usb_callback_cdc_disable>
    94ce:	10 92 94 2a 	sts	0x2A94, r1	; 0x802a94 <udi_cdc_data_running>
    94d2:	08 95       	ret

000094d4 <udi_cdc_comm_setup>:
    94d4:	cf 93       	push	r28
    94d6:	df 93       	push	r29
    94d8:	80 91 c7 2a 	lds	r24, 0x2AC7	; 0x802ac7 <udd_g_ctrlreq>
    94dc:	88 23       	and	r24, r24
    94de:	e4 f4       	brge	.+56     	; 0x9518 <udi_cdc_comm_setup+0x44>
    94e0:	80 76       	andi	r24, 0x60	; 96
    94e2:	80 32       	cpi	r24, 0x20	; 32
    94e4:	09 f0       	breq	.+2      	; 0x94e8 <udi_cdc_comm_setup+0x14>
    94e6:	49 c0       	rjmp	.+146    	; 0x957a <udi_cdc_comm_setup+0xa6>
    94e8:	80 91 c8 2a 	lds	r24, 0x2AC8	; 0x802ac8 <udd_g_ctrlreq+0x1>
    94ec:	81 32       	cpi	r24, 0x21	; 33
    94ee:	09 f0       	breq	.+2      	; 0x94f2 <udi_cdc_comm_setup+0x1e>
    94f0:	46 c0       	rjmp	.+140    	; 0x957e <udi_cdc_comm_setup+0xaa>
    94f2:	80 91 cd 2a 	lds	r24, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    94f6:	90 91 ce 2a 	lds	r25, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    94fa:	07 97       	sbiw	r24, 0x07	; 7
    94fc:	09 f0       	breq	.+2      	; 0x9500 <udi_cdc_comm_setup+0x2c>
    94fe:	41 c0       	rjmp	.+130    	; 0x9582 <udi_cdc_comm_setup+0xae>
    9500:	e7 ec       	ldi	r30, 0xC7	; 199
    9502:	fa e2       	ldi	r31, 0x2A	; 42
    9504:	84 ea       	ldi	r24, 0xA4	; 164
    9506:	9a e2       	ldi	r25, 0x2A	; 42
    9508:	80 87       	std	Z+8, r24	; 0x08
    950a:	91 87       	std	Z+9, r25	; 0x09
    950c:	87 e0       	ldi	r24, 0x07	; 7
    950e:	90 e0       	ldi	r25, 0x00	; 0
    9510:	82 87       	std	Z+10, r24	; 0x0a
    9512:	93 87       	std	Z+11, r25	; 0x0b
    9514:	81 e0       	ldi	r24, 0x01	; 1
    9516:	3c c0       	rjmp	.+120    	; 0x9590 <udi_cdc_comm_setup+0xbc>
    9518:	80 76       	andi	r24, 0x60	; 96
    951a:	80 32       	cpi	r24, 0x20	; 32
    951c:	a1 f5       	brne	.+104    	; 0x9586 <udi_cdc_comm_setup+0xb2>
    951e:	80 91 c8 2a 	lds	r24, 0x2AC8	; 0x802ac8 <udd_g_ctrlreq+0x1>
    9522:	80 32       	cpi	r24, 0x20	; 32
    9524:	19 f0       	breq	.+6      	; 0x952c <udi_cdc_comm_setup+0x58>
    9526:	82 32       	cpi	r24, 0x22	; 34
    9528:	b9 f0       	breq	.+46     	; 0x9558 <udi_cdc_comm_setup+0x84>
    952a:	2f c0       	rjmp	.+94     	; 0x958a <udi_cdc_comm_setup+0xb6>
    952c:	80 91 cd 2a 	lds	r24, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    9530:	90 91 ce 2a 	lds	r25, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    9534:	07 97       	sbiw	r24, 0x07	; 7
    9536:	59 f5       	brne	.+86     	; 0x958e <udi_cdc_comm_setup+0xba>
    9538:	e7 ec       	ldi	r30, 0xC7	; 199
    953a:	fa e2       	ldi	r31, 0x2A	; 42
    953c:	84 e5       	ldi	r24, 0x54	; 84
    953e:	99 e4       	ldi	r25, 0x49	; 73
    9540:	84 87       	std	Z+12, r24	; 0x0c
    9542:	95 87       	std	Z+13, r25	; 0x0d
    9544:	84 ea       	ldi	r24, 0xA4	; 164
    9546:	9a e2       	ldi	r25, 0x2A	; 42
    9548:	80 87       	std	Z+8, r24	; 0x08
    954a:	91 87       	std	Z+9, r25	; 0x09
    954c:	87 e0       	ldi	r24, 0x07	; 7
    954e:	90 e0       	ldi	r25, 0x00	; 0
    9550:	82 87       	std	Z+10, r24	; 0x0a
    9552:	93 87       	std	Z+11, r25	; 0x0b
    9554:	81 e0       	ldi	r24, 0x01	; 1
    9556:	1c c0       	rjmp	.+56     	; 0x9590 <udi_cdc_comm_setup+0xbc>
    9558:	c7 ec       	ldi	r28, 0xC7	; 199
    955a:	da e2       	ldi	r29, 0x2A	; 42
    955c:	6a 81       	ldd	r22, Y+2	; 0x02
    955e:	61 70       	andi	r22, 0x01	; 1
    9560:	80 e0       	ldi	r24, 0x00	; 0
    9562:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <usb_callback_cdc_set_dtr>
    9566:	6a 81       	ldd	r22, Y+2	; 0x02
    9568:	7b 81       	ldd	r23, Y+3	; 0x03
    956a:	76 95       	lsr	r23
    956c:	67 95       	ror	r22
    956e:	61 70       	andi	r22, 0x01	; 1
    9570:	80 e0       	ldi	r24, 0x00	; 0
    9572:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <usb_callback_cdc_set_rts>
    9576:	81 e0       	ldi	r24, 0x01	; 1
    9578:	0b c0       	rjmp	.+22     	; 0x9590 <udi_cdc_comm_setup+0xbc>
    957a:	80 e0       	ldi	r24, 0x00	; 0
    957c:	09 c0       	rjmp	.+18     	; 0x9590 <udi_cdc_comm_setup+0xbc>
    957e:	80 e0       	ldi	r24, 0x00	; 0
    9580:	07 c0       	rjmp	.+14     	; 0x9590 <udi_cdc_comm_setup+0xbc>
    9582:	80 e0       	ldi	r24, 0x00	; 0
    9584:	05 c0       	rjmp	.+10     	; 0x9590 <udi_cdc_comm_setup+0xbc>
    9586:	80 e0       	ldi	r24, 0x00	; 0
    9588:	03 c0       	rjmp	.+6      	; 0x9590 <udi_cdc_comm_setup+0xbc>
    958a:	80 e0       	ldi	r24, 0x00	; 0
    958c:	01 c0       	rjmp	.+2      	; 0x9590 <udi_cdc_comm_setup+0xbc>
    958e:	80 e0       	ldi	r24, 0x00	; 0
    9590:	df 91       	pop	r29
    9592:	cf 91       	pop	r28
    9594:	08 95       	ret

00009596 <udi_cdc_multi_get_nb_received_data>:
    9596:	cf 93       	push	r28
    9598:	df 93       	push	r29
    959a:	1f 92       	push	r1
    959c:	cd b7       	in	r28, 0x3d	; 61
    959e:	de b7       	in	r29, 0x3e	; 62
    95a0:	8f b7       	in	r24, 0x3f	; 63
    95a2:	89 83       	std	Y+1, r24	; 0x01
    95a4:	f8 94       	cli
    95a6:	49 81       	ldd	r20, Y+1	; 0x01
    95a8:	20 91 0d 2a 	lds	r18, 0x2A0D	; 0x802a0d <udi_cdc_rx_pos>
    95ac:	30 91 0e 2a 	lds	r19, 0x2A0E	; 0x802a0e <udi_cdc_rx_pos+0x1>
    95b0:	e0 91 0f 2a 	lds	r30, 0x2A0F	; 0x802a0f <udi_cdc_rx_buf_sel>
    95b4:	f0 e0       	ldi	r31, 0x00	; 0
    95b6:	ee 0f       	add	r30, r30
    95b8:	ff 1f       	adc	r31, r31
    95ba:	e0 5f       	subi	r30, 0xF0	; 240
    95bc:	f5 4d       	sbci	r31, 0xD5	; 213
    95be:	80 81       	ld	r24, Z
    95c0:	91 81       	ldd	r25, Z+1	; 0x01
    95c2:	4f bf       	out	0x3f, r20	; 63
    95c4:	82 1b       	sub	r24, r18
    95c6:	93 0b       	sbc	r25, r19
    95c8:	0f 90       	pop	r0
    95ca:	df 91       	pop	r29
    95cc:	cf 91       	pop	r28
    95ce:	08 95       	ret

000095d0 <udi_cdc_multi_is_rx_ready>:
    95d0:	e2 df       	rcall	.-60     	; 0x9596 <udi_cdc_multi_get_nb_received_data>
    95d2:	21 e0       	ldi	r18, 0x01	; 1
    95d4:	89 2b       	or	r24, r25
    95d6:	09 f4       	brne	.+2      	; 0x95da <udi_cdc_multi_is_rx_ready+0xa>
    95d8:	20 e0       	ldi	r18, 0x00	; 0
    95da:	82 2f       	mov	r24, r18
    95dc:	08 95       	ret

000095de <udi_cdc_rx_start>:
    95de:	0f 93       	push	r16
    95e0:	1f 93       	push	r17
    95e2:	cf 93       	push	r28
    95e4:	df 93       	push	r29
    95e6:	1f 92       	push	r1
    95e8:	cd b7       	in	r28, 0x3d	; 61
    95ea:	de b7       	in	r29, 0x3e	; 62
    95ec:	8f b7       	in	r24, 0x3f	; 63
    95ee:	89 83       	std	Y+1, r24	; 0x01
    95f0:	f8 94       	cli
    95f2:	99 81       	ldd	r25, Y+1	; 0x01
    95f4:	20 91 0f 2a 	lds	r18, 0x2A0F	; 0x802a0f <udi_cdc_rx_buf_sel>
    95f8:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <udi_cdc_rx_trans_ongoing>
    95fc:	81 11       	cpse	r24, r1
    95fe:	10 c0       	rjmp	.+32     	; 0x9620 <udi_cdc_rx_start+0x42>
    9600:	60 91 0d 2a 	lds	r22, 0x2A0D	; 0x802a0d <udi_cdc_rx_pos>
    9604:	70 91 0e 2a 	lds	r23, 0x2A0E	; 0x802a0e <udi_cdc_rx_pos+0x1>
    9608:	02 2f       	mov	r16, r18
    960a:	10 e0       	ldi	r17, 0x00	; 0
    960c:	f8 01       	movw	r30, r16
    960e:	ee 0f       	add	r30, r30
    9610:	ff 1f       	adc	r31, r31
    9612:	e0 5f       	subi	r30, 0xF0	; 240
    9614:	f5 4d       	sbci	r31, 0xD5	; 213
    9616:	40 81       	ld	r20, Z
    9618:	51 81       	ldd	r21, Z+1	; 0x01
    961a:	64 17       	cp	r22, r20
    961c:	75 07       	cpc	r23, r21
    961e:	18 f4       	brcc	.+6      	; 0x9626 <udi_cdc_rx_start+0x48>
    9620:	9f bf       	out	0x3f, r25	; 63
    9622:	80 e0       	ldi	r24, 0x00	; 0
    9624:	28 c0       	rjmp	.+80     	; 0x9676 <udi_cdc_rx_start+0x98>
    9626:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <udi_cdc_rx_pos>
    962a:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <udi_cdc_rx_pos+0x1>
    962e:	81 e0       	ldi	r24, 0x01	; 1
    9630:	21 11       	cpse	r18, r1
    9632:	80 e0       	ldi	r24, 0x00	; 0
    9634:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <udi_cdc_rx_buf_sel>
    9638:	81 e0       	ldi	r24, 0x01	; 1
    963a:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <udi_cdc_rx_trans_ongoing>
    963e:	9f bf       	out	0x3f, r25	; 63
    9640:	80 e0       	ldi	r24, 0x00	; 0
    9642:	c6 df       	rcall	.-116    	; 0x95d0 <udi_cdc_multi_is_rx_ready>
    9644:	88 23       	and	r24, r24
    9646:	19 f0       	breq	.+6      	; 0x964e <udi_cdc_rx_start+0x70>
    9648:	80 e0       	ldi	r24, 0x00	; 0
    964a:	0e 94 8f 3e 	call	0x7d1e	; 0x7d1e <usb_callback_rx_notify>
    964e:	a8 01       	movw	r20, r16
    9650:	00 24       	eor	r0, r0
    9652:	56 95       	lsr	r21
    9654:	47 95       	ror	r20
    9656:	07 94       	ror	r0
    9658:	56 95       	lsr	r21
    965a:	47 95       	ror	r20
    965c:	07 94       	ror	r0
    965e:	54 2f       	mov	r21, r20
    9660:	40 2d       	mov	r20, r0
    9662:	4c 5e       	subi	r20, 0xEC	; 236
    9664:	55 4d       	sbci	r21, 0xD5	; 213
    9666:	03 e7       	ldi	r16, 0x73	; 115
    9668:	1b e4       	ldi	r17, 0x4B	; 75
    966a:	20 e4       	ldi	r18, 0x40	; 64
    966c:	30 e0       	ldi	r19, 0x00	; 0
    966e:	61 e0       	ldi	r22, 0x01	; 1
    9670:	82 e0       	ldi	r24, 0x02	; 2
    9672:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <udd_ep_run>
    9676:	0f 90       	pop	r0
    9678:	df 91       	pop	r29
    967a:	cf 91       	pop	r28
    967c:	1f 91       	pop	r17
    967e:	0f 91       	pop	r16
    9680:	08 95       	ret

00009682 <udi_cdc_data_enable>:
    9682:	10 92 95 2a 	sts	0x2A95, r1	; 0x802a95 <udi_cdc_nb_data_enabled>
    9686:	10 92 84 29 	sts	0x2984, r1	; 0x802984 <udi_cdc_tx_trans_ongoing>
    968a:	10 92 83 29 	sts	0x2983, r1	; 0x802983 <udi_cdc_tx_both_buf_to_send>
    968e:	10 92 87 29 	sts	0x2987, r1	; 0x802987 <udi_cdc_tx_buf_sel>
    9692:	e8 e8       	ldi	r30, 0x88	; 136
    9694:	f9 e2       	ldi	r31, 0x29	; 41
    9696:	10 82       	st	Z, r1
    9698:	11 82       	std	Z+1, r1	; 0x01
    969a:	12 82       	std	Z+2, r1	; 0x02
    969c:	13 82       	std	Z+3, r1	; 0x03
    969e:	10 92 85 29 	sts	0x2985, r1	; 0x802985 <udi_cdc_tx_sof_num>
    96a2:	10 92 86 29 	sts	0x2986, r1	; 0x802986 <udi_cdc_tx_sof_num+0x1>
    96a6:	80 e0       	ldi	r24, 0x00	; 0
    96a8:	37 de       	rcall	.-914    	; 0x9318 <udi_cdc_tx_send>
    96aa:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <udi_cdc_rx_trans_ongoing>
    96ae:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <udi_cdc_rx_buf_sel>
    96b2:	e0 e1       	ldi	r30, 0x10	; 16
    96b4:	fa e2       	ldi	r31, 0x2A	; 42
    96b6:	10 82       	st	Z, r1
    96b8:	11 82       	std	Z+1, r1	; 0x01
    96ba:	12 82       	std	Z+2, r1	; 0x02
    96bc:	13 82       	std	Z+3, r1	; 0x03
    96be:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <udi_cdc_rx_pos>
    96c2:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <udi_cdc_rx_pos+0x1>
    96c6:	80 e0       	ldi	r24, 0x00	; 0
    96c8:	8a df       	rcall	.-236    	; 0x95de <udi_cdc_rx_start>
    96ca:	88 23       	and	r24, r24
    96cc:	59 f0       	breq	.+22     	; 0x96e4 <udi_cdc_data_enable+0x62>
    96ce:	90 91 95 2a 	lds	r25, 0x2A95	; 0x802a95 <udi_cdc_nb_data_enabled>
    96d2:	9f 5f       	subi	r25, 0xFF	; 255
    96d4:	90 93 95 2a 	sts	0x2A95, r25	; 0x802a95 <udi_cdc_nb_data_enabled>
    96d8:	90 91 95 2a 	lds	r25, 0x2A95	; 0x802a95 <udi_cdc_nb_data_enabled>
    96dc:	91 30       	cpi	r25, 0x01	; 1
    96de:	11 f4       	brne	.+4      	; 0x96e4 <udi_cdc_data_enable+0x62>
    96e0:	90 93 94 2a 	sts	0x2A94, r25	; 0x802a94 <udi_cdc_data_running>
    96e4:	08 95       	ret

000096e6 <udi_cdc_data_received>:
    96e6:	0f 93       	push	r16
    96e8:	1f 93       	push	r17
    96ea:	81 11       	cpse	r24, r1
    96ec:	29 c0       	rjmp	.+82     	; 0x9740 <udi_cdc_data_received+0x5a>
    96ee:	80 91 0f 2a 	lds	r24, 0x2A0F	; 0x802a0f <udi_cdc_rx_buf_sel>
    96f2:	e1 e0       	ldi	r30, 0x01	; 1
    96f4:	81 11       	cpse	r24, r1
    96f6:	e0 e0       	ldi	r30, 0x00	; 0
    96f8:	84 2f       	mov	r24, r20
    96fa:	61 15       	cp	r22, r1
    96fc:	71 05       	cpc	r23, r1
    96fe:	a9 f4       	brne	.+42     	; 0x972a <udi_cdc_data_received+0x44>
    9700:	4e 2f       	mov	r20, r30
    9702:	50 e0       	ldi	r21, 0x00	; 0
    9704:	00 24       	eor	r0, r0
    9706:	56 95       	lsr	r21
    9708:	47 95       	ror	r20
    970a:	07 94       	ror	r0
    970c:	56 95       	lsr	r21
    970e:	47 95       	ror	r20
    9710:	07 94       	ror	r0
    9712:	54 2f       	mov	r21, r20
    9714:	40 2d       	mov	r20, r0
    9716:	4c 5e       	subi	r20, 0xEC	; 236
    9718:	55 4d       	sbci	r21, 0xD5	; 213
    971a:	03 e7       	ldi	r16, 0x73	; 115
    971c:	1b e4       	ldi	r17, 0x4B	; 75
    971e:	20 e4       	ldi	r18, 0x40	; 64
    9720:	30 e0       	ldi	r19, 0x00	; 0
    9722:	61 e0       	ldi	r22, 0x01	; 1
    9724:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <udd_ep_run>
    9728:	0b c0       	rjmp	.+22     	; 0x9740 <udi_cdc_data_received+0x5a>
    972a:	f0 e0       	ldi	r31, 0x00	; 0
    972c:	ee 0f       	add	r30, r30
    972e:	ff 1f       	adc	r31, r31
    9730:	e0 5f       	subi	r30, 0xF0	; 240
    9732:	f5 4d       	sbci	r31, 0xD5	; 213
    9734:	60 83       	st	Z, r22
    9736:	71 83       	std	Z+1, r23	; 0x01
    9738:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <udi_cdc_rx_trans_ongoing>
    973c:	80 e0       	ldi	r24, 0x00	; 0
    973e:	4f df       	rcall	.-354    	; 0x95de <udi_cdc_rx_start>
    9740:	1f 91       	pop	r17
    9742:	0f 91       	pop	r16
    9744:	08 95       	ret

00009746 <udi_cdc_multi_getc>:
    9746:	ef 92       	push	r14
    9748:	ff 92       	push	r15
    974a:	1f 93       	push	r17
    974c:	cf 93       	push	r28
    974e:	df 93       	push	r29
    9750:	1f 92       	push	r1
    9752:	cd b7       	in	r28, 0x3d	; 61
    9754:	de b7       	in	r29, 0x3e	; 62
    9756:	11 e0       	ldi	r17, 0x01	; 1
    9758:	80 91 aa 2a 	lds	r24, 0x2AAA	; 0x802aaa <udi_cdc_line_coding+0x6>
    975c:	89 30       	cpi	r24, 0x09	; 9
    975e:	09 f0       	breq	.+2      	; 0x9762 <udi_cdc_multi_getc+0x1c>
    9760:	10 e0       	ldi	r17, 0x00	; 0
    9762:	40 e0       	ldi	r20, 0x00	; 0
    9764:	50 e0       	ldi	r21, 0x00	; 0
    9766:	8f b7       	in	r24, 0x3f	; 63
    9768:	89 83       	std	Y+1, r24	; 0x01
    976a:	f8 94       	cli
    976c:	a9 81       	ldd	r26, Y+1	; 0x01
    976e:	20 91 0d 2a 	lds	r18, 0x2A0D	; 0x802a0d <udi_cdc_rx_pos>
    9772:	30 91 0e 2a 	lds	r19, 0x2A0E	; 0x802a0e <udi_cdc_rx_pos+0x1>
    9776:	80 91 0f 2a 	lds	r24, 0x2A0F	; 0x802a0f <udi_cdc_rx_buf_sel>
    977a:	90 e0       	ldi	r25, 0x00	; 0
    977c:	fc 01       	movw	r30, r24
    977e:	ee 0f       	add	r30, r30
    9780:	ff 1f       	adc	r31, r31
    9782:	e0 5f       	subi	r30, 0xF0	; 240
    9784:	f5 4d       	sbci	r31, 0xD5	; 213
    9786:	60 81       	ld	r22, Z
    9788:	71 81       	ldd	r23, Z+1	; 0x01
    978a:	af bf       	out	0x3f, r26	; 63
    978c:	26 17       	cp	r18, r22
    978e:	37 07       	cpc	r19, r23
    9790:	30 f0       	brcs	.+12     	; 0x979e <udi_cdc_multi_getc+0x58>
    9792:	80 91 94 2a 	lds	r24, 0x2A94	; 0x802a94 <udi_cdc_data_running>
    9796:	81 11       	cpse	r24, r1
    9798:	e6 cf       	rjmp	.-52     	; 0x9766 <udi_cdc_multi_getc+0x20>
    979a:	90 e0       	ldi	r25, 0x00	; 0
    979c:	21 c0       	rjmp	.+66     	; 0x97e0 <udi_cdc_multi_getc+0x9a>
    979e:	fc 01       	movw	r30, r24
    97a0:	00 24       	eor	r0, r0
    97a2:	f6 95       	lsr	r31
    97a4:	e7 95       	ror	r30
    97a6:	07 94       	ror	r0
    97a8:	f6 95       	lsr	r31
    97aa:	e7 95       	ror	r30
    97ac:	07 94       	ror	r0
    97ae:	fe 2f       	mov	r31, r30
    97b0:	e0 2d       	mov	r30, r0
    97b2:	ec 5e       	subi	r30, 0xEC	; 236
    97b4:	f5 4d       	sbci	r31, 0xD5	; 213
    97b6:	e2 0f       	add	r30, r18
    97b8:	f3 1f       	adc	r31, r19
    97ba:	80 81       	ld	r24, Z
    97bc:	7a 01       	movw	r14, r20
    97be:	e8 2a       	or	r14, r24
    97c0:	2f 5f       	subi	r18, 0xFF	; 255
    97c2:	3f 4f       	sbci	r19, 0xFF	; 255
    97c4:	20 93 0d 2a 	sts	0x2A0D, r18	; 0x802a0d <udi_cdc_rx_pos>
    97c8:	30 93 0e 2a 	sts	0x2A0E, r19	; 0x802a0e <udi_cdc_rx_pos+0x1>
    97cc:	80 e0       	ldi	r24, 0x00	; 0
    97ce:	07 df       	rcall	.-498    	; 0x95de <udi_cdc_rx_start>
    97d0:	11 23       	and	r17, r17
    97d2:	21 f0       	breq	.+8      	; 0x97dc <udi_cdc_multi_getc+0x96>
    97d4:	5e 2d       	mov	r21, r14
    97d6:	44 27       	eor	r20, r20
    97d8:	10 e0       	ldi	r17, 0x00	; 0
    97da:	c5 cf       	rjmp	.-118    	; 0x9766 <udi_cdc_multi_getc+0x20>
    97dc:	8e 2d       	mov	r24, r14
    97de:	9f 2d       	mov	r25, r15
    97e0:	0f 90       	pop	r0
    97e2:	df 91       	pop	r29
    97e4:	cf 91       	pop	r28
    97e6:	1f 91       	pop	r17
    97e8:	ff 90       	pop	r15
    97ea:	ef 90       	pop	r14
    97ec:	08 95       	ret

000097ee <udi_cdc_getc>:
    97ee:	80 e0       	ldi	r24, 0x00	; 0
    97f0:	aa cf       	rjmp	.-172    	; 0x9746 <udi_cdc_multi_getc>
    97f2:	08 95       	ret

000097f4 <udi_cdc_multi_get_free_tx_buffer>:
    97f4:	cf 93       	push	r28
    97f6:	df 93       	push	r29
    97f8:	1f 92       	push	r1
    97fa:	cd b7       	in	r28, 0x3d	; 61
    97fc:	de b7       	in	r29, 0x3e	; 62
    97fe:	8f b7       	in	r24, 0x3f	; 63
    9800:	89 83       	std	Y+1, r24	; 0x01
    9802:	f8 94       	cli
    9804:	99 81       	ldd	r25, Y+1	; 0x01
    9806:	80 91 87 29 	lds	r24, 0x2987	; 0x802987 <udi_cdc_tx_buf_sel>
    980a:	e8 2f       	mov	r30, r24
    980c:	f0 e0       	ldi	r31, 0x00	; 0
    980e:	ee 0f       	add	r30, r30
    9810:	ff 1f       	adc	r31, r31
    9812:	e8 57       	subi	r30, 0x78	; 120
    9814:	f6 4d       	sbci	r31, 0xD6	; 214
    9816:	20 81       	ld	r18, Z
    9818:	31 81       	ldd	r19, Z+1	; 0x01
    981a:	20 34       	cpi	r18, 0x40	; 64
    981c:	31 05       	cpc	r19, r1
    981e:	89 f4       	brne	.+34     	; 0x9842 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    9820:	40 91 84 29 	lds	r20, 0x2984	; 0x802984 <udi_cdc_tx_trans_ongoing>
    9824:	41 11       	cpse	r20, r1
    9826:	0d c0       	rjmp	.+26     	; 0x9842 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    9828:	40 91 83 29 	lds	r20, 0x2983	; 0x802983 <udi_cdc_tx_both_buf_to_send>
    982c:	41 11       	cpse	r20, r1
    982e:	09 c0       	rjmp	.+18     	; 0x9842 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    9830:	21 e0       	ldi	r18, 0x01	; 1
    9832:	20 93 83 29 	sts	0x2983, r18	; 0x802983 <udi_cdc_tx_both_buf_to_send>
    9836:	81 11       	cpse	r24, r1
    9838:	20 e0       	ldi	r18, 0x00	; 0
    983a:	20 93 87 29 	sts	0x2987, r18	; 0x802987 <udi_cdc_tx_buf_sel>
    983e:	20 e0       	ldi	r18, 0x00	; 0
    9840:	30 e0       	ldi	r19, 0x00	; 0
    9842:	9f bf       	out	0x3f, r25	; 63
    9844:	80 e4       	ldi	r24, 0x40	; 64
    9846:	90 e0       	ldi	r25, 0x00	; 0
    9848:	82 1b       	sub	r24, r18
    984a:	93 0b       	sbc	r25, r19
    984c:	0f 90       	pop	r0
    984e:	df 91       	pop	r29
    9850:	cf 91       	pop	r28
    9852:	08 95       	ret

00009854 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    9854:	cf df       	rcall	.-98     	; 0x97f4 <udi_cdc_multi_get_free_tx_buffer>
    9856:	21 e0       	ldi	r18, 0x01	; 1
    9858:	89 2b       	or	r24, r25
    985a:	09 f4       	brne	.+2      	; 0x985e <udi_cdc_multi_is_tx_ready+0xa>
    985c:	20 e0       	ldi	r18, 0x00	; 0
    985e:	82 2f       	mov	r24, r18
    9860:	08 95       	ret

00009862 <udi_cdc_multi_putc>:
    9862:	ff 92       	push	r15
    9864:	0f 93       	push	r16
    9866:	1f 93       	push	r17
    9868:	cf 93       	push	r28
    986a:	df 93       	push	r29
    986c:	1f 92       	push	r1
    986e:	cd b7       	in	r28, 0x3d	; 61
    9870:	de b7       	in	r29, 0x3e	; 62
    9872:	f6 2e       	mov	r15, r22
    9874:	17 2f       	mov	r17, r23
    9876:	01 e0       	ldi	r16, 0x01	; 1
    9878:	80 91 aa 2a 	lds	r24, 0x2AAA	; 0x802aaa <udi_cdc_line_coding+0x6>
    987c:	89 30       	cpi	r24, 0x09	; 9
    987e:	09 f0       	breq	.+2      	; 0x9882 <udi_cdc_multi_putc+0x20>
    9880:	00 e0       	ldi	r16, 0x00	; 0
    9882:	80 e0       	ldi	r24, 0x00	; 0
    9884:	e7 df       	rcall	.-50     	; 0x9854 <udi_cdc_multi_is_tx_ready>
    9886:	81 11       	cpse	r24, r1
    9888:	07 c0       	rjmp	.+14     	; 0x9898 <udi_cdc_multi_putc+0x36>
    988a:	80 91 94 2a 	lds	r24, 0x2A94	; 0x802a94 <udi_cdc_data_running>
    988e:	81 11       	cpse	r24, r1
    9890:	f8 cf       	rjmp	.-16     	; 0x9882 <udi_cdc_multi_putc+0x20>
    9892:	80 e0       	ldi	r24, 0x00	; 0
    9894:	90 e0       	ldi	r25, 0x00	; 0
    9896:	2c c0       	rjmp	.+88     	; 0x98f0 <udi_cdc_multi_putc+0x8e>
    9898:	8f b7       	in	r24, 0x3f	; 63
    989a:	89 83       	std	Y+1, r24	; 0x01
    989c:	f8 94       	cli
    989e:	49 81       	ldd	r20, Y+1	; 0x01
    98a0:	80 91 87 29 	lds	r24, 0x2987	; 0x802987 <udi_cdc_tx_buf_sel>
    98a4:	90 e0       	ldi	r25, 0x00	; 0
    98a6:	fc 01       	movw	r30, r24
    98a8:	ee 0f       	add	r30, r30
    98aa:	ff 1f       	adc	r31, r31
    98ac:	e8 57       	subi	r30, 0x78	; 120
    98ae:	f6 4d       	sbci	r31, 0xD6	; 214
    98b0:	20 81       	ld	r18, Z
    98b2:	31 81       	ldd	r19, Z+1	; 0x01
    98b4:	b9 01       	movw	r22, r18
    98b6:	6f 5f       	subi	r22, 0xFF	; 255
    98b8:	7f 4f       	sbci	r23, 0xFF	; 255
    98ba:	60 83       	st	Z, r22
    98bc:	71 83       	std	Z+1, r23	; 0x01
    98be:	00 24       	eor	r0, r0
    98c0:	96 95       	lsr	r25
    98c2:	87 95       	ror	r24
    98c4:	07 94       	ror	r0
    98c6:	96 95       	lsr	r25
    98c8:	87 95       	ror	r24
    98ca:	07 94       	ror	r0
    98cc:	98 2f       	mov	r25, r24
    98ce:	80 2d       	mov	r24, r0
    98d0:	84 57       	subi	r24, 0x74	; 116
    98d2:	96 4d       	sbci	r25, 0xD6	; 214
    98d4:	fc 01       	movw	r30, r24
    98d6:	e2 0f       	add	r30, r18
    98d8:	f3 1f       	adc	r31, r19
    98da:	f0 82       	st	Z, r15
    98dc:	4f bf       	out	0x3f, r20	; 63
    98de:	00 23       	and	r16, r16
    98e0:	29 f0       	breq	.+10     	; 0x98ec <udi_cdc_multi_putc+0x8a>
    98e2:	f1 2e       	mov	r15, r17
    98e4:	11 0f       	add	r17, r17
    98e6:	11 0b       	sbc	r17, r17
    98e8:	00 e0       	ldi	r16, 0x00	; 0
    98ea:	cb cf       	rjmp	.-106    	; 0x9882 <udi_cdc_multi_putc+0x20>
    98ec:	81 e0       	ldi	r24, 0x01	; 1
    98ee:	90 e0       	ldi	r25, 0x00	; 0
    98f0:	0f 90       	pop	r0
    98f2:	df 91       	pop	r29
    98f4:	cf 91       	pop	r28
    98f6:	1f 91       	pop	r17
    98f8:	0f 91       	pop	r16
    98fa:	ff 90       	pop	r15
    98fc:	08 95       	ret

000098fe <udi_cdc_putc>:
    98fe:	bc 01       	movw	r22, r24
    9900:	80 e0       	ldi	r24, 0x00	; 0
    9902:	af cf       	rjmp	.-162    	; 0x9862 <udi_cdc_multi_putc>
    9904:	08 95       	ret

00009906 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    9906:	e0 91 b0 2a 	lds	r30, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    990a:	f0 91 b1 2a 	lds	r31, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    990e:	01 90       	ld	r0, Z+
    9910:	f0 81       	ld	r31, Z
    9912:	e0 2d       	mov	r30, r0
    9914:	22 81       	ldd	r18, Z+2	; 0x02
    9916:	33 81       	ldd	r19, Z+3	; 0x03
    9918:	2e 0f       	add	r18, r30
    991a:	3f 1f       	adc	r19, r31
    991c:	fc 01       	movw	r30, r24
    991e:	40 81       	ld	r20, Z
    9920:	e4 0f       	add	r30, r20
    9922:	f1 1d       	adc	r31, r1
    9924:	e2 17       	cp	r30, r18
    9926:	f3 07       	cpc	r31, r19
    9928:	a0 f4       	brcc	.+40     	; 0x9952 <udc_next_desc_in_iface+0x4c>
    992a:	81 81       	ldd	r24, Z+1	; 0x01
    992c:	84 30       	cpi	r24, 0x04	; 4
    992e:	a1 f0       	breq	.+40     	; 0x9958 <udc_next_desc_in_iface+0x52>
    9930:	86 13       	cpse	r24, r22
    9932:	06 c0       	rjmp	.+12     	; 0x9940 <udc_next_desc_in_iface+0x3a>
    9934:	14 c0       	rjmp	.+40     	; 0x995e <udc_next_desc_in_iface+0x58>
    9936:	81 81       	ldd	r24, Z+1	; 0x01
    9938:	84 30       	cpi	r24, 0x04	; 4
    993a:	a1 f0       	breq	.+40     	; 0x9964 <udc_next_desc_in_iface+0x5e>
    993c:	86 17       	cp	r24, r22
    993e:	a9 f0       	breq	.+42     	; 0x996a <udc_next_desc_in_iface+0x64>
    9940:	80 81       	ld	r24, Z
    9942:	e8 0f       	add	r30, r24
    9944:	f1 1d       	adc	r31, r1
    9946:	e2 17       	cp	r30, r18
    9948:	f3 07       	cpc	r31, r19
    994a:	a8 f3       	brcs	.-22     	; 0x9936 <udc_next_desc_in_iface+0x30>
    994c:	80 e0       	ldi	r24, 0x00	; 0
    994e:	90 e0       	ldi	r25, 0x00	; 0
    9950:	08 95       	ret
    9952:	80 e0       	ldi	r24, 0x00	; 0
    9954:	90 e0       	ldi	r25, 0x00	; 0
    9956:	08 95       	ret
    9958:	80 e0       	ldi	r24, 0x00	; 0
    995a:	90 e0       	ldi	r25, 0x00	; 0
    995c:	08 95       	ret
    995e:	8e 2f       	mov	r24, r30
    9960:	9f 2f       	mov	r25, r31
    9962:	08 95       	ret
    9964:	80 e0       	ldi	r24, 0x00	; 0
    9966:	90 e0       	ldi	r25, 0x00	; 0
    9968:	08 95       	ret
    996a:	8e 2f       	mov	r24, r30
    996c:	9f 2f       	mov	r25, r31
    996e:	08 95       	ret

00009970 <udc_valid_address>:
    9970:	80 91 c9 2a 	lds	r24, 0x2AC9	; 0x802ac9 <udd_g_ctrlreq+0x2>
    9974:	8f 77       	andi	r24, 0x7F	; 127
    9976:	0c 94 df 35 	jmp	0x6bbe	; 0x6bbe <udd_set_address>
    997a:	08 95       	ret

0000997c <udc_update_iface_desc>:
    997c:	90 91 b2 2a 	lds	r25, 0x2AB2	; 0x802ab2 <udc_num_configuration>
    9980:	99 23       	and	r25, r25
    9982:	81 f1       	breq	.+96     	; 0x99e4 <udc_update_iface_desc+0x68>
    9984:	e0 91 b0 2a 	lds	r30, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    9988:	f0 91 b1 2a 	lds	r31, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    998c:	01 90       	ld	r0, Z+
    998e:	f0 81       	ld	r31, Z
    9990:	e0 2d       	mov	r30, r0
    9992:	94 81       	ldd	r25, Z+4	; 0x04
    9994:	89 17       	cp	r24, r25
    9996:	40 f5       	brcc	.+80     	; 0x99e8 <udc_update_iface_desc+0x6c>
    9998:	e0 93 ae 2a 	sts	0x2AAE, r30	; 0x802aae <udc_ptr_iface>
    999c:	f0 93 af 2a 	sts	0x2AAF, r31	; 0x802aaf <udc_ptr_iface+0x1>
    99a0:	22 81       	ldd	r18, Z+2	; 0x02
    99a2:	33 81       	ldd	r19, Z+3	; 0x03
    99a4:	2e 0f       	add	r18, r30
    99a6:	3f 1f       	adc	r19, r31
    99a8:	e2 17       	cp	r30, r18
    99aa:	f3 07       	cpc	r31, r19
    99ac:	f8 f4       	brcc	.+62     	; 0x99ec <udc_update_iface_desc+0x70>
    99ae:	91 81       	ldd	r25, Z+1	; 0x01
    99b0:	94 30       	cpi	r25, 0x04	; 4
    99b2:	61 f4       	brne	.+24     	; 0x99cc <udc_update_iface_desc+0x50>
    99b4:	92 81       	ldd	r25, Z+2	; 0x02
    99b6:	89 13       	cpse	r24, r25
    99b8:	09 c0       	rjmp	.+18     	; 0x99cc <udc_update_iface_desc+0x50>
    99ba:	93 81       	ldd	r25, Z+3	; 0x03
    99bc:	96 13       	cpse	r25, r22
    99be:	06 c0       	rjmp	.+12     	; 0x99cc <udc_update_iface_desc+0x50>
    99c0:	e0 93 ae 2a 	sts	0x2AAE, r30	; 0x802aae <udc_ptr_iface>
    99c4:	f0 93 af 2a 	sts	0x2AAF, r31	; 0x802aaf <udc_ptr_iface+0x1>
    99c8:	81 e0       	ldi	r24, 0x01	; 1
    99ca:	08 95       	ret
    99cc:	90 81       	ld	r25, Z
    99ce:	e9 0f       	add	r30, r25
    99d0:	f1 1d       	adc	r31, r1
    99d2:	e2 17       	cp	r30, r18
    99d4:	f3 07       	cpc	r31, r19
    99d6:	58 f3       	brcs	.-42     	; 0x99ae <udc_update_iface_desc+0x32>
    99d8:	e0 93 ae 2a 	sts	0x2AAE, r30	; 0x802aae <udc_ptr_iface>
    99dc:	f0 93 af 2a 	sts	0x2AAF, r31	; 0x802aaf <udc_ptr_iface+0x1>
    99e0:	80 e0       	ldi	r24, 0x00	; 0
    99e2:	08 95       	ret
    99e4:	80 e0       	ldi	r24, 0x00	; 0
    99e6:	08 95       	ret
    99e8:	80 e0       	ldi	r24, 0x00	; 0
    99ea:	08 95       	ret
    99ec:	80 e0       	ldi	r24, 0x00	; 0
    99ee:	08 95       	ret

000099f0 <udc_iface_disable>:
    99f0:	ef 92       	push	r14
    99f2:	ff 92       	push	r15
    99f4:	1f 93       	push	r17
    99f6:	cf 93       	push	r28
    99f8:	df 93       	push	r29
    99fa:	c8 2f       	mov	r28, r24
    99fc:	60 e0       	ldi	r22, 0x00	; 0
    99fe:	be df       	rcall	.-132    	; 0x997c <udc_update_iface_desc>
    9a00:	18 2f       	mov	r17, r24
    9a02:	88 23       	and	r24, r24
    9a04:	81 f1       	breq	.+96     	; 0x9a66 <udc_iface_disable+0x76>
    9a06:	a0 91 b0 2a 	lds	r26, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    9a0a:	b0 91 b1 2a 	lds	r27, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    9a0e:	ec 2f       	mov	r30, r28
    9a10:	f0 e0       	ldi	r31, 0x00	; 0
    9a12:	ee 0f       	add	r30, r30
    9a14:	ff 1f       	adc	r31, r31
    9a16:	12 96       	adiw	r26, 0x02	; 2
    9a18:	8d 91       	ld	r24, X+
    9a1a:	9c 91       	ld	r25, X
    9a1c:	13 97       	sbiw	r26, 0x03	; 3
    9a1e:	e8 0f       	add	r30, r24
    9a20:	f9 1f       	adc	r31, r25
    9a22:	e0 80       	ld	r14, Z
    9a24:	f1 80       	ldd	r15, Z+1	; 0x01
    9a26:	d7 01       	movw	r26, r14
    9a28:	16 96       	adiw	r26, 0x06	; 6
    9a2a:	ed 91       	ld	r30, X+
    9a2c:	fc 91       	ld	r31, X
    9a2e:	17 97       	sbiw	r26, 0x07	; 7
    9a30:	19 95       	eicall
    9a32:	68 2f       	mov	r22, r24
    9a34:	8c 2f       	mov	r24, r28
    9a36:	a2 df       	rcall	.-188    	; 0x997c <udc_update_iface_desc>
    9a38:	18 2f       	mov	r17, r24
    9a3a:	88 23       	and	r24, r24
    9a3c:	a1 f0       	breq	.+40     	; 0x9a66 <udc_iface_disable+0x76>
    9a3e:	c0 91 ae 2a 	lds	r28, 0x2AAE	; 0x802aae <udc_ptr_iface>
    9a42:	d0 91 af 2a 	lds	r29, 0x2AAF	; 0x802aaf <udc_ptr_iface+0x1>
    9a46:	65 e0       	ldi	r22, 0x05	; 5
    9a48:	ce 01       	movw	r24, r28
    9a4a:	5d df       	rcall	.-326    	; 0x9906 <udc_next_desc_in_iface>
    9a4c:	ec 01       	movw	r28, r24
    9a4e:	89 2b       	or	r24, r25
    9a50:	21 f0       	breq	.+8      	; 0x9a5a <udc_iface_disable+0x6a>
    9a52:	8a 81       	ldd	r24, Y+2	; 0x02
    9a54:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <udd_ep_free>
    9a58:	f6 cf       	rjmp	.-20     	; 0x9a46 <udc_iface_disable+0x56>
    9a5a:	d7 01       	movw	r26, r14
    9a5c:	12 96       	adiw	r26, 0x02	; 2
    9a5e:	ed 91       	ld	r30, X+
    9a60:	fc 91       	ld	r31, X
    9a62:	13 97       	sbiw	r26, 0x03	; 3
    9a64:	19 95       	eicall
    9a66:	81 2f       	mov	r24, r17
    9a68:	df 91       	pop	r29
    9a6a:	cf 91       	pop	r28
    9a6c:	1f 91       	pop	r17
    9a6e:	ff 90       	pop	r15
    9a70:	ef 90       	pop	r14
    9a72:	08 95       	ret

00009a74 <udc_iface_enable>:
    9a74:	1f 93       	push	r17
    9a76:	cf 93       	push	r28
    9a78:	df 93       	push	r29
    9a7a:	18 2f       	mov	r17, r24
    9a7c:	7f df       	rcall	.-258    	; 0x997c <udc_update_iface_desc>
    9a7e:	88 23       	and	r24, r24
    9a80:	41 f1       	breq	.+80     	; 0x9ad2 <udc_iface_enable+0x5e>
    9a82:	c0 91 ae 2a 	lds	r28, 0x2AAE	; 0x802aae <udc_ptr_iface>
    9a86:	d0 91 af 2a 	lds	r29, 0x2AAF	; 0x802aaf <udc_ptr_iface+0x1>
    9a8a:	65 e0       	ldi	r22, 0x05	; 5
    9a8c:	ce 01       	movw	r24, r28
    9a8e:	3b df       	rcall	.-394    	; 0x9906 <udc_next_desc_in_iface>
    9a90:	ec 01       	movw	r28, r24
    9a92:	89 2b       	or	r24, r25
    9a94:	49 f0       	breq	.+18     	; 0x9aa8 <udc_iface_enable+0x34>
    9a96:	4c 81       	ldd	r20, Y+4	; 0x04
    9a98:	5d 81       	ldd	r21, Y+5	; 0x05
    9a9a:	6b 81       	ldd	r22, Y+3	; 0x03
    9a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    9a9e:	0e 94 f4 35 	call	0x6be8	; 0x6be8 <udd_ep_alloc>
    9aa2:	81 11       	cpse	r24, r1
    9aa4:	f2 cf       	rjmp	.-28     	; 0x9a8a <udc_iface_enable+0x16>
    9aa6:	15 c0       	rjmp	.+42     	; 0x9ad2 <udc_iface_enable+0x5e>
    9aa8:	a0 91 b0 2a 	lds	r26, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    9aac:	b0 91 b1 2a 	lds	r27, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    9ab0:	e1 2f       	mov	r30, r17
    9ab2:	f0 e0       	ldi	r31, 0x00	; 0
    9ab4:	ee 0f       	add	r30, r30
    9ab6:	ff 1f       	adc	r31, r31
    9ab8:	12 96       	adiw	r26, 0x02	; 2
    9aba:	8d 91       	ld	r24, X+
    9abc:	9c 91       	ld	r25, X
    9abe:	13 97       	sbiw	r26, 0x03	; 3
    9ac0:	e8 0f       	add	r30, r24
    9ac2:	f9 1f       	adc	r31, r25
    9ac4:	01 90       	ld	r0, Z+
    9ac6:	f0 81       	ld	r31, Z
    9ac8:	e0 2d       	mov	r30, r0
    9aca:	01 90       	ld	r0, Z+
    9acc:	f0 81       	ld	r31, Z
    9ace:	e0 2d       	mov	r30, r0
    9ad0:	19 95       	eicall
    9ad2:	df 91       	pop	r29
    9ad4:	cf 91       	pop	r28
    9ad6:	1f 91       	pop	r17
    9ad8:	08 95       	ret

00009ada <udc_start>:
    9ada:	0c 94 58 35 	jmp	0x6ab0	; 0x6ab0 <udd_enable>
    9ade:	08 95       	ret

00009ae0 <udc_reset>:
    9ae0:	cf 93       	push	r28
    9ae2:	80 91 b2 2a 	lds	r24, 0x2AB2	; 0x802ab2 <udc_num_configuration>
    9ae6:	88 23       	and	r24, r24
    9ae8:	c1 f0       	breq	.+48     	; 0x9b1a <udc_reset+0x3a>
    9aea:	e0 91 b0 2a 	lds	r30, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    9aee:	f0 91 b1 2a 	lds	r31, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    9af2:	01 90       	ld	r0, Z+
    9af4:	f0 81       	ld	r31, Z
    9af6:	e0 2d       	mov	r30, r0
    9af8:	84 81       	ldd	r24, Z+4	; 0x04
    9afa:	88 23       	and	r24, r24
    9afc:	71 f0       	breq	.+28     	; 0x9b1a <udc_reset+0x3a>
    9afe:	c0 e0       	ldi	r28, 0x00	; 0
    9b00:	8c 2f       	mov	r24, r28
    9b02:	76 df       	rcall	.-276    	; 0x99f0 <udc_iface_disable>
    9b04:	cf 5f       	subi	r28, 0xFF	; 255
    9b06:	e0 91 b0 2a 	lds	r30, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    9b0a:	f0 91 b1 2a 	lds	r31, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    9b0e:	01 90       	ld	r0, Z+
    9b10:	f0 81       	ld	r31, Z
    9b12:	e0 2d       	mov	r30, r0
    9b14:	84 81       	ldd	r24, Z+4	; 0x04
    9b16:	c8 17       	cp	r28, r24
    9b18:	98 f3       	brcs	.-26     	; 0x9b00 <udc_reset+0x20>
    9b1a:	10 92 b2 2a 	sts	0x2AB2, r1	; 0x802ab2 <udc_num_configuration>
    9b1e:	80 91 b6 2a 	lds	r24, 0x2AB6	; 0x802ab6 <udc_device_status>
    9b22:	81 fd       	sbrc	r24, 1
    9b24:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <usb_callback_remotewakeup_disable>
    9b28:	10 92 b6 2a 	sts	0x2AB6, r1	; 0x802ab6 <udc_device_status>
    9b2c:	10 92 b7 2a 	sts	0x2AB7, r1	; 0x802ab7 <udc_device_status+0x1>
    9b30:	cf 91       	pop	r28
    9b32:	08 95       	ret

00009b34 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    9b34:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    9b36:	80 91 b2 2a 	lds	r24, 0x2AB2	; 0x802ab2 <udc_num_configuration>
    9b3a:	88 23       	and	r24, r24
    9b3c:	49 f1       	breq	.+82     	; 0x9b90 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    9b3e:	a0 91 b0 2a 	lds	r26, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    9b42:	b0 91 b1 2a 	lds	r27, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    9b46:	ed 91       	ld	r30, X+
    9b48:	fc 91       	ld	r31, X
    9b4a:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    9b4c:	84 81       	ldd	r24, Z+4	; 0x04
    9b4e:	88 23       	and	r24, r24
    9b50:	f9 f0       	breq	.+62     	; 0x9b90 <udc_sof_notify+0x5c>
    9b52:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    9b54:	ec 2f       	mov	r30, r28
    9b56:	f0 e0       	ldi	r31, 0x00	; 0
    9b58:	ee 0f       	add	r30, r30
    9b5a:	ff 1f       	adc	r31, r31
    9b5c:	12 96       	adiw	r26, 0x02	; 2
    9b5e:	8d 91       	ld	r24, X+
    9b60:	9c 91       	ld	r25, X
    9b62:	13 97       	sbiw	r26, 0x03	; 3
    9b64:	e8 0f       	add	r30, r24
    9b66:	f9 1f       	adc	r31, r25
    9b68:	01 90       	ld	r0, Z+
    9b6a:	f0 81       	ld	r31, Z
    9b6c:	e0 2d       	mov	r30, r0
    9b6e:	00 84       	ldd	r0, Z+8	; 0x08
    9b70:	f1 85       	ldd	r31, Z+9	; 0x09
    9b72:	e0 2d       	mov	r30, r0
    9b74:	30 97       	sbiw	r30, 0x00	; 0
    9b76:	09 f0       	breq	.+2      	; 0x9b7a <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    9b78:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    9b7a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    9b7c:	a0 91 b0 2a 	lds	r26, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    9b80:	b0 91 b1 2a 	lds	r27, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    9b84:	ed 91       	ld	r30, X+
    9b86:	fc 91       	ld	r31, X
    9b88:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    9b8a:	84 81       	ldd	r24, Z+4	; 0x04
    9b8c:	c8 17       	cp	r28, r24
    9b8e:	10 f3       	brcs	.-60     	; 0x9b54 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    9b90:	cf 91       	pop	r28
    9b92:	08 95       	ret

00009b94 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    9b94:	0f 93       	push	r16
    9b96:	1f 93       	push	r17
    9b98:	cf 93       	push	r28
    9b9a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    9b9c:	e7 ec       	ldi	r30, 0xC7	; 199
    9b9e:	fa e2       	ldi	r31, 0x2A	; 42
    9ba0:	12 86       	std	Z+10, r1	; 0x0a
    9ba2:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    9ba4:	14 86       	std	Z+12, r1	; 0x0c
    9ba6:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    9ba8:	16 86       	std	Z+14, r1	; 0x0e
    9baa:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    9bac:	80 81       	ld	r24, Z
    9bae:	88 23       	and	r24, r24
    9bb0:	0c f0       	brlt	.+2      	; 0x9bb4 <udc_process_setup+0x20>
    9bb2:	95 c2       	rjmp	.+1322   	; 0xa0de <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    9bb4:	20 91 cd 2a 	lds	r18, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    9bb8:	30 91 ce 2a 	lds	r19, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    9bbc:	21 15       	cp	r18, r1
    9bbe:	31 05       	cpc	r19, r1
    9bc0:	09 f0       	breq	.+2      	; 0x9bc4 <udc_process_setup+0x30>
    9bc2:	88 c2       	rjmp	.+1296   	; 0xa0d4 <udc_process_setup+0x540>
    9bc4:	7f c2       	rjmp	.+1278   	; 0xa0c4 <udc_process_setup+0x530>
    9bc6:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    9bc8:	09 f0       	breq	.+2      	; 0x9bcc <udc_process_setup+0x38>
    9bca:	ab c0       	rjmp	.+342    	; 0x9d22 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    9bcc:	90 91 c8 2a 	lds	r25, 0x2AC8	; 0x802ac8 <udd_g_ctrlreq+0x1>
    9bd0:	96 30       	cpi	r25, 0x06	; 6
    9bd2:	81 f0       	breq	.+32     	; 0x9bf4 <udc_process_setup+0x60>
    9bd4:	98 30       	cpi	r25, 0x08	; 8
    9bd6:	09 f4       	brne	.+2      	; 0x9bda <udc_process_setup+0x46>
    9bd8:	99 c0       	rjmp	.+306    	; 0x9d0c <udc_process_setup+0x178>
    9bda:	91 11       	cpse	r25, r1
    9bdc:	a2 c0       	rjmp	.+324    	; 0x9d22 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    9bde:	22 30       	cpi	r18, 0x02	; 2
    9be0:	31 05       	cpc	r19, r1
    9be2:	09 f0       	breq	.+2      	; 0x9be6 <udc_process_setup+0x52>
    9be4:	2b c2       	rjmp	.+1110   	; 0xa03c <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    9be6:	62 e0       	ldi	r22, 0x02	; 2
    9be8:	70 e0       	ldi	r23, 0x00	; 0
    9bea:	86 eb       	ldi	r24, 0xB6	; 182
    9bec:	9a e2       	ldi	r25, 0x2A	; 42
    9bee:	0e 94 ed 35 	call	0x6bda	; 0x6bda <udd_set_setup_payload>
    9bf2:	7e c2       	rjmp	.+1276   	; 0xa0f0 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    9bf4:	80 91 c9 2a 	lds	r24, 0x2AC9	; 0x802ac9 <udd_g_ctrlreq+0x2>
    9bf8:	90 91 ca 2a 	lds	r25, 0x2ACA	; 0x802aca <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    9bfc:	29 2f       	mov	r18, r25
    9bfe:	33 27       	eor	r19, r19
    9c00:	22 30       	cpi	r18, 0x02	; 2
    9c02:	31 05       	cpc	r19, r1
    9c04:	b1 f0       	breq	.+44     	; 0x9c32 <udc_process_setup+0x9e>
    9c06:	20 f4       	brcc	.+8      	; 0x9c10 <udc_process_setup+0x7c>
    9c08:	21 30       	cpi	r18, 0x01	; 1
    9c0a:	31 05       	cpc	r19, r1
    9c0c:	41 f0       	breq	.+16     	; 0x9c1e <udc_process_setup+0x8a>
    9c0e:	d8 c1       	rjmp	.+944    	; 0x9fc0 <udc_process_setup+0x42c>
    9c10:	23 30       	cpi	r18, 0x03	; 3
    9c12:	31 05       	cpc	r19, r1
    9c14:	f1 f1       	breq	.+124    	; 0x9c92 <udc_process_setup+0xfe>
    9c16:	2f 30       	cpi	r18, 0x0F	; 15
    9c18:	31 05       	cpc	r19, r1
    9c1a:	61 f1       	breq	.+88     	; 0x9c74 <udc_process_setup+0xe0>
    9c1c:	d1 c1       	rjmp	.+930    	; 0x9fc0 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    9c1e:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <udc_config>
    9c22:	90 91 62 20 	lds	r25, 0x2062	; 0x802062 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    9c26:	dc 01       	movw	r26, r24
    9c28:	6c 91       	ld	r22, X
    9c2a:	70 e0       	ldi	r23, 0x00	; 0
    9c2c:	0e 94 ed 35 	call	0x6bda	; 0x6bda <udd_set_setup_payload>
    9c30:	5e c0       	rjmp	.+188    	; 0x9cee <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    9c32:	e0 91 61 20 	lds	r30, 0x2061	; 0x802061 <udc_config>
    9c36:	f0 91 62 20 	lds	r31, 0x2062	; 0x802062 <udc_config+0x1>
    9c3a:	21 89       	ldd	r18, Z+17	; 0x11
    9c3c:	82 17       	cp	r24, r18
    9c3e:	08 f0       	brcs	.+2      	; 0x9c42 <udc_process_setup+0xae>
    9c40:	fd c1       	rjmp	.+1018   	; 0xa03c <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    9c42:	99 27       	eor	r25, r25
    9c44:	88 0f       	add	r24, r24
    9c46:	99 1f       	adc	r25, r25
    9c48:	88 0f       	add	r24, r24
    9c4a:	99 1f       	adc	r25, r25
    9c4c:	e0 91 63 20 	lds	r30, 0x2063	; 0x802063 <udc_config+0x2>
    9c50:	f0 91 64 20 	lds	r31, 0x2064	; 0x802064 <udc_config+0x3>
    9c54:	e8 0f       	add	r30, r24
    9c56:	f9 1f       	adc	r31, r25
    9c58:	80 81       	ld	r24, Z
    9c5a:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    9c5c:	fc 01       	movw	r30, r24
    9c5e:	62 81       	ldd	r22, Z+2	; 0x02
    9c60:	73 81       	ldd	r23, Z+3	; 0x03
    9c62:	0e 94 ed 35 	call	0x6bda	; 0x6bda <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    9c66:	e0 91 cf 2a 	lds	r30, 0x2ACF	; 0x802acf <udd_g_ctrlreq+0x8>
    9c6a:	f0 91 d0 2a 	lds	r31, 0x2AD0	; 0x802ad0 <udd_g_ctrlreq+0x9>
    9c6e:	82 e0       	ldi	r24, 0x02	; 2
    9c70:	81 83       	std	Z+1, r24	; 0x01
    9c72:	3d c0       	rjmp	.+122    	; 0x9cee <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    9c74:	80 91 65 20 	lds	r24, 0x2065	; 0x802065 <udc_config+0x4>
    9c78:	90 91 66 20 	lds	r25, 0x2066	; 0x802066 <udc_config+0x5>
    9c7c:	00 97       	sbiw	r24, 0x00	; 0
    9c7e:	09 f4       	brne	.+2      	; 0x9c82 <udc_process_setup+0xee>
    9c80:	dd c1       	rjmp	.+954    	; 0xa03c <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    9c82:	dc 01       	movw	r26, r24
    9c84:	12 96       	adiw	r26, 0x02	; 2
    9c86:	6d 91       	ld	r22, X+
    9c88:	7c 91       	ld	r23, X
    9c8a:	13 97       	sbiw	r26, 0x03	; 3
    9c8c:	0e 94 ed 35 	call	0x6bda	; 0x6bda <udd_set_setup_payload>
    9c90:	2e c0       	rjmp	.+92     	; 0x9cee <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    9c92:	99 27       	eor	r25, r25
    9c94:	81 30       	cpi	r24, 0x01	; 1
    9c96:	91 05       	cpc	r25, r1
    9c98:	99 f0       	breq	.+38     	; 0x9cc0 <udc_process_setup+0x12c>
    9c9a:	58 f0       	brcs	.+22     	; 0x9cb2 <udc_process_setup+0x11e>
    9c9c:	82 30       	cpi	r24, 0x02	; 2
    9c9e:	91 05       	cpc	r25, r1
    9ca0:	09 f4       	brne	.+2      	; 0x9ca4 <udc_process_setup+0x110>
    9ca2:	22 c2       	rjmp	.+1092   	; 0xa0e8 <udc_process_setup+0x554>
    9ca4:	03 97       	sbiw	r24, 0x03	; 3
    9ca6:	09 f0       	breq	.+2      	; 0x9caa <udc_process_setup+0x116>
    9ca8:	94 c1       	rjmp	.+808    	; 0x9fd2 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    9caa:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    9cac:	ec e7       	ldi	r30, 0x7C	; 124
    9cae:	f6 e2       	ldi	r31, 0x26	; 38
    9cb0:	0a c0       	rjmp	.+20     	; 0x9cc6 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    9cb2:	64 e0       	ldi	r22, 0x04	; 4
    9cb4:	70 e0       	ldi	r23, 0x00	; 0
    9cb6:	86 e0       	ldi	r24, 0x06	; 6
    9cb8:	91 e2       	ldi	r25, 0x21	; 33
    9cba:	0e 94 ed 35 	call	0x6bda	; 0x6bda <udd_set_setup_payload>
    9cbe:	17 c0       	rjmp	.+46     	; 0x9cee <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    9cc0:	e5 ef       	ldi	r30, 0xF5	; 245
    9cc2:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    9cc4:	30 e1       	ldi	r19, 0x10	; 16
    9cc6:	a8 ec       	ldi	r26, 0xC8	; 200
    9cc8:	b0 e2       	ldi	r27, 0x20	; 32
    9cca:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    9ccc:	81 91       	ld	r24, Z+
    9cce:	90 e0       	ldi	r25, 0x00	; 0
    9cd0:	8d 93       	st	X+, r24
    9cd2:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    9cd4:	2f 5f       	subi	r18, 0xFF	; 255
    9cd6:	23 17       	cp	r18, r19
    9cd8:	c8 f3       	brcs	.-14     	; 0x9ccc <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    9cda:	63 2f       	mov	r22, r19
    9cdc:	66 0f       	add	r22, r22
    9cde:	6e 5f       	subi	r22, 0xFE	; 254
    9ce0:	60 93 c6 20 	sts	0x20C6, r22	; 0x8020c6 <udc_string_desc>
		udd_set_setup_payload(
    9ce4:	70 e0       	ldi	r23, 0x00	; 0
    9ce6:	86 ec       	ldi	r24, 0xC6	; 198
    9ce8:	90 e2       	ldi	r25, 0x20	; 32
    9cea:	0e 94 ed 35 	call	0x6bda	; 0x6bda <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    9cee:	e7 ec       	ldi	r30, 0xC7	; 199
    9cf0:	fa e2       	ldi	r31, 0x2A	; 42
    9cf2:	86 81       	ldd	r24, Z+6	; 0x06
    9cf4:	97 81       	ldd	r25, Z+7	; 0x07
    9cf6:	22 85       	ldd	r18, Z+10	; 0x0a
    9cf8:	33 85       	ldd	r19, Z+11	; 0x0b
    9cfa:	82 17       	cp	r24, r18
    9cfc:	93 07       	cpc	r25, r19
    9cfe:	08 f0       	brcs	.+2      	; 0x9d02 <udc_process_setup+0x16e>
    9d00:	f7 c1       	rjmp	.+1006   	; 0xa0f0 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    9d02:	80 93 d1 2a 	sts	0x2AD1, r24	; 0x802ad1 <udd_g_ctrlreq+0xa>
    9d06:	90 93 d2 2a 	sts	0x2AD2, r25	; 0x802ad2 <udd_g_ctrlreq+0xb>
    9d0a:	f2 c1       	rjmp	.+996    	; 0xa0f0 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    9d0c:	21 30       	cpi	r18, 0x01	; 1
    9d0e:	31 05       	cpc	r19, r1
    9d10:	09 f0       	breq	.+2      	; 0x9d14 <udc_process_setup+0x180>
    9d12:	94 c1       	rjmp	.+808    	; 0xa03c <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    9d14:	61 e0       	ldi	r22, 0x01	; 1
    9d16:	70 e0       	ldi	r23, 0x00	; 0
    9d18:	82 eb       	ldi	r24, 0xB2	; 178
    9d1a:	9a e2       	ldi	r25, 0x2A	; 42
    9d1c:	0e 94 ed 35 	call	0x6bda	; 0x6bda <udd_set_setup_payload>
    9d20:	e7 c1       	rjmp	.+974    	; 0xa0f0 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    9d22:	81 30       	cpi	r24, 0x01	; 1
    9d24:	e9 f5       	brne	.+122    	; 0x9da0 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    9d26:	90 91 c8 2a 	lds	r25, 0x2AC8	; 0x802ac8 <udd_g_ctrlreq+0x1>
    9d2a:	9a 30       	cpi	r25, 0x0A	; 10
    9d2c:	c9 f5       	brne	.+114    	; 0x9da0 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    9d2e:	21 30       	cpi	r18, 0x01	; 1
    9d30:	31 05       	cpc	r19, r1
    9d32:	09 f0       	breq	.+2      	; 0x9d36 <udc_process_setup+0x1a2>
    9d34:	53 c1       	rjmp	.+678    	; 0x9fdc <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    9d36:	80 91 b2 2a 	lds	r24, 0x2AB2	; 0x802ab2 <udc_num_configuration>
    9d3a:	88 23       	and	r24, r24
    9d3c:	09 f4       	brne	.+2      	; 0x9d40 <udc_process_setup+0x1ac>
    9d3e:	4e c1       	rjmp	.+668    	; 0x9fdc <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    9d40:	c0 91 cb 2a 	lds	r28, 0x2ACB	; 0x802acb <udd_g_ctrlreq+0x4>
    9d44:	d0 91 cc 2a 	lds	r29, 0x2ACC	; 0x802acc <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    9d48:	00 91 b0 2a 	lds	r16, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    9d4c:	10 91 b1 2a 	lds	r17, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    9d50:	d8 01       	movw	r26, r16
    9d52:	ed 91       	ld	r30, X+
    9d54:	fc 91       	ld	r31, X
    9d56:	84 81       	ldd	r24, Z+4	; 0x04
    9d58:	c8 17       	cp	r28, r24
    9d5a:	08 f0       	brcs	.+2      	; 0x9d5e <udc_process_setup+0x1ca>
    9d5c:	3f c1       	rjmp	.+638    	; 0x9fdc <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    9d5e:	60 e0       	ldi	r22, 0x00	; 0
    9d60:	8c 2f       	mov	r24, r28
    9d62:	0c de       	rcall	.-1000   	; 0x997c <udc_update_iface_desc>
    9d64:	88 23       	and	r24, r24
    9d66:	09 f4       	brne	.+2      	; 0x9d6a <udc_process_setup+0x1d6>
    9d68:	34 c1       	rjmp	.+616    	; 0x9fd2 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    9d6a:	ce 01       	movw	r24, r28
    9d6c:	99 27       	eor	r25, r25
    9d6e:	88 0f       	add	r24, r24
    9d70:	99 1f       	adc	r25, r25
    9d72:	d8 01       	movw	r26, r16
    9d74:	12 96       	adiw	r26, 0x02	; 2
    9d76:	ed 91       	ld	r30, X+
    9d78:	fc 91       	ld	r31, X
    9d7a:	13 97       	sbiw	r26, 0x03	; 3
    9d7c:	e8 0f       	add	r30, r24
    9d7e:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    9d80:	01 90       	ld	r0, Z+
    9d82:	f0 81       	ld	r31, Z
    9d84:	e0 2d       	mov	r30, r0
    9d86:	86 81       	ldd	r24, Z+6	; 0x06
    9d88:	97 81       	ldd	r25, Z+7	; 0x07
    9d8a:	fc 01       	movw	r30, r24
    9d8c:	19 95       	eicall
    9d8e:	80 93 b4 2a 	sts	0x2AB4, r24	; 0x802ab4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    9d92:	61 e0       	ldi	r22, 0x01	; 1
    9d94:	70 e0       	ldi	r23, 0x00	; 0
    9d96:	84 eb       	ldi	r24, 0xB4	; 180
    9d98:	9a e2       	ldi	r25, 0x2A	; 42
    9d9a:	0e 94 ed 35 	call	0x6bda	; 0x6bda <udd_set_setup_payload>
    9d9e:	a8 c1       	rjmp	.+848    	; 0xa0f0 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    9da0:	82 30       	cpi	r24, 0x02	; 2
    9da2:	09 f0       	breq	.+2      	; 0x9da6 <udc_process_setup+0x212>
    9da4:	16 c1       	rjmp	.+556    	; 0x9fd2 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    9da6:	80 91 c8 2a 	lds	r24, 0x2AC8	; 0x802ac8 <udd_g_ctrlreq+0x1>
    9daa:	81 11       	cpse	r24, r1
    9dac:	0b c1       	rjmp	.+534    	; 0x9fc4 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    9dae:	22 30       	cpi	r18, 0x02	; 2
    9db0:	31 05       	cpc	r19, r1
    9db2:	09 f0       	breq	.+2      	; 0x9db6 <udc_process_setup+0x222>
    9db4:	43 c1       	rjmp	.+646    	; 0xa03c <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    9db6:	80 91 cb 2a 	lds	r24, 0x2ACB	; 0x802acb <udd_g_ctrlreq+0x4>
    9dba:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <udd_ep_is_halted>
    9dbe:	90 e0       	ldi	r25, 0x00	; 0
    9dc0:	80 93 ac 2a 	sts	0x2AAC, r24	; 0x802aac <udc_ep_status.4757>
    9dc4:	90 93 ad 2a 	sts	0x2AAD, r25	; 0x802aad <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    9dc8:	62 e0       	ldi	r22, 0x02	; 2
    9dca:	70 e0       	ldi	r23, 0x00	; 0
    9dcc:	8c ea       	ldi	r24, 0xAC	; 172
    9dce:	9a e2       	ldi	r25, 0x2A	; 42
    9dd0:	0e 94 ed 35 	call	0x6bda	; 0x6bda <udd_set_setup_payload>
    9dd4:	8d c1       	rjmp	.+794    	; 0xa0f0 <udc_process_setup+0x55c>
    9dd6:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    9dd8:	09 f0       	breq	.+2      	; 0x9ddc <udc_process_setup+0x248>
    9dda:	a0 c0       	rjmp	.+320    	; 0x9f1c <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    9ddc:	90 91 c8 2a 	lds	r25, 0x2AC8	; 0x802ac8 <udd_g_ctrlreq+0x1>
    9de0:	93 30       	cpi	r25, 0x03	; 3
    9de2:	91 f1       	breq	.+100    	; 0x9e48 <udc_process_setup+0x2b4>
    9de4:	18 f4       	brcc	.+6      	; 0x9dec <udc_process_setup+0x258>
    9de6:	91 30       	cpi	r25, 0x01	; 1
    9de8:	a9 f0       	breq	.+42     	; 0x9e14 <udc_process_setup+0x280>
    9dea:	98 c0       	rjmp	.+304    	; 0x9f1c <udc_process_setup+0x388>
    9dec:	95 30       	cpi	r25, 0x05	; 5
    9dee:	21 f0       	breq	.+8      	; 0x9df8 <udc_process_setup+0x264>
    9df0:	99 30       	cpi	r25, 0x09	; 9
    9df2:	09 f4       	brne	.+2      	; 0x9df6 <udc_process_setup+0x262>
    9df4:	43 c0       	rjmp	.+134    	; 0x9e7c <udc_process_setup+0x2e8>
    9df6:	92 c0       	rjmp	.+292    	; 0x9f1c <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    9df8:	80 91 cd 2a 	lds	r24, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    9dfc:	90 91 ce 2a 	lds	r25, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    9e00:	89 2b       	or	r24, r25
    9e02:	09 f0       	breq	.+2      	; 0x9e06 <udc_process_setup+0x272>
    9e04:	1b c1       	rjmp	.+566    	; 0xa03c <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    9e06:	88 eb       	ldi	r24, 0xB8	; 184
    9e08:	9c e4       	ldi	r25, 0x4C	; 76
    9e0a:	80 93 d3 2a 	sts	0x2AD3, r24	; 0x802ad3 <udd_g_ctrlreq+0xc>
    9e0e:	90 93 d4 2a 	sts	0x2AD4, r25	; 0x802ad4 <udd_g_ctrlreq+0xd>
    9e12:	6e c1       	rjmp	.+732    	; 0xa0f0 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    9e14:	80 91 cd 2a 	lds	r24, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    9e18:	90 91 ce 2a 	lds	r25, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    9e1c:	89 2b       	or	r24, r25
    9e1e:	09 f0       	breq	.+2      	; 0x9e22 <udc_process_setup+0x28e>
    9e20:	0d c1       	rjmp	.+538    	; 0xa03c <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    9e22:	80 91 c9 2a 	lds	r24, 0x2AC9	; 0x802ac9 <udd_g_ctrlreq+0x2>
    9e26:	90 91 ca 2a 	lds	r25, 0x2ACA	; 0x802aca <udd_g_ctrlreq+0x3>
    9e2a:	01 97       	sbiw	r24, 0x01	; 1
    9e2c:	09 f0       	breq	.+2      	; 0x9e30 <udc_process_setup+0x29c>
    9e2e:	06 c1       	rjmp	.+524    	; 0xa03c <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    9e30:	80 91 b6 2a 	lds	r24, 0x2AB6	; 0x802ab6 <udc_device_status>
    9e34:	90 91 b7 2a 	lds	r25, 0x2AB7	; 0x802ab7 <udc_device_status+0x1>
    9e38:	8d 7f       	andi	r24, 0xFD	; 253
    9e3a:	80 93 b6 2a 	sts	0x2AB6, r24	; 0x802ab6 <udc_device_status>
    9e3e:	90 93 b7 2a 	sts	0x2AB7, r25	; 0x802ab7 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    9e42:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <usb_callback_remotewakeup_disable>
    9e46:	54 c1       	rjmp	.+680    	; 0xa0f0 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    9e48:	80 91 cd 2a 	lds	r24, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    9e4c:	90 91 ce 2a 	lds	r25, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    9e50:	89 2b       	or	r24, r25
    9e52:	09 f0       	breq	.+2      	; 0x9e56 <udc_process_setup+0x2c2>
    9e54:	f3 c0       	rjmp	.+486    	; 0xa03c <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    9e56:	80 91 c9 2a 	lds	r24, 0x2AC9	; 0x802ac9 <udd_g_ctrlreq+0x2>
    9e5a:	90 91 ca 2a 	lds	r25, 0x2ACA	; 0x802aca <udd_g_ctrlreq+0x3>
    9e5e:	01 97       	sbiw	r24, 0x01	; 1
    9e60:	09 f0       	breq	.+2      	; 0x9e64 <udc_process_setup+0x2d0>
    9e62:	b2 c0       	rjmp	.+356    	; 0x9fc8 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    9e64:	80 91 b6 2a 	lds	r24, 0x2AB6	; 0x802ab6 <udc_device_status>
    9e68:	90 91 b7 2a 	lds	r25, 0x2AB7	; 0x802ab7 <udc_device_status+0x1>
    9e6c:	82 60       	ori	r24, 0x02	; 2
    9e6e:	80 93 b6 2a 	sts	0x2AB6, r24	; 0x802ab6 <udc_device_status>
    9e72:	90 93 b7 2a 	sts	0x2AB7, r25	; 0x802ab7 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    9e76:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <usb_callback_remotewakeup_enable>
    9e7a:	3a c1       	rjmp	.+628    	; 0xa0f0 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    9e7c:	80 91 cd 2a 	lds	r24, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    9e80:	90 91 ce 2a 	lds	r25, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    9e84:	89 2b       	or	r24, r25
    9e86:	09 f0       	breq	.+2      	; 0x9e8a <udc_process_setup+0x2f6>
    9e88:	d9 c0       	rjmp	.+434    	; 0xa03c <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    9e8a:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <udd_getaddress>
    9e8e:	88 23       	and	r24, r24
    9e90:	09 f4       	brne	.+2      	; 0x9e94 <udc_process_setup+0x300>
    9e92:	9f c0       	rjmp	.+318    	; 0x9fd2 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    9e94:	20 91 c9 2a 	lds	r18, 0x2AC9	; 0x802ac9 <udd_g_ctrlreq+0x2>
    9e98:	30 91 ca 2a 	lds	r19, 0x2ACA	; 0x802aca <udd_g_ctrlreq+0x3>
    9e9c:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    9e9e:	e0 91 61 20 	lds	r30, 0x2061	; 0x802061 <udc_config>
    9ea2:	f0 91 62 20 	lds	r31, 0x2062	; 0x802062 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    9ea6:	81 89       	ldd	r24, Z+17	; 0x11
    9ea8:	90 e0       	ldi	r25, 0x00	; 0
    9eaa:	82 17       	cp	r24, r18
    9eac:	93 07       	cpc	r25, r19
    9eae:	08 f4       	brcc	.+2      	; 0x9eb2 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    9eb0:	90 c0       	rjmp	.+288    	; 0x9fd2 <udc_process_setup+0x43e>
    9eb2:	16 de       	rcall	.-980    	; 0x9ae0 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    9eb4:	80 91 c9 2a 	lds	r24, 0x2AC9	; 0x802ac9 <udd_g_ctrlreq+0x2>
    9eb8:	90 91 ca 2a 	lds	r25, 0x2ACA	; 0x802aca <udd_g_ctrlreq+0x3>
    9ebc:	80 93 b2 2a 	sts	0x2AB2, r24	; 0x802ab2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    9ec0:	88 23       	and	r24, r24
    9ec2:	09 f4       	brne	.+2      	; 0x9ec6 <udc_process_setup+0x332>
    9ec4:	15 c1       	rjmp	.+554    	; 0xa0f0 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    9ec6:	99 27       	eor	r25, r25
    9ec8:	81 50       	subi	r24, 0x01	; 1
    9eca:	90 4c       	sbci	r25, 0xC0	; 192
    9ecc:	88 0f       	add	r24, r24
    9ece:	99 1f       	adc	r25, r25
    9ed0:	88 0f       	add	r24, r24
    9ed2:	99 1f       	adc	r25, r25
    9ed4:	e0 91 63 20 	lds	r30, 0x2063	; 0x802063 <udc_config+0x2>
    9ed8:	f0 91 64 20 	lds	r31, 0x2064	; 0x802064 <udc_config+0x3>
    9edc:	e8 0f       	add	r30, r24
    9ede:	f9 1f       	adc	r31, r25
    9ee0:	e0 93 b0 2a 	sts	0x2AB0, r30	; 0x802ab0 <udc_ptr_conf>
    9ee4:	f0 93 b1 2a 	sts	0x2AB1, r31	; 0x802ab1 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    9ee8:	01 90       	ld	r0, Z+
    9eea:	f0 81       	ld	r31, Z
    9eec:	e0 2d       	mov	r30, r0
    9eee:	84 81       	ldd	r24, Z+4	; 0x04
    9ef0:	88 23       	and	r24, r24
    9ef2:	09 f4       	brne	.+2      	; 0x9ef6 <udc_process_setup+0x362>
    9ef4:	fd c0       	rjmp	.+506    	; 0xa0f0 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    9ef6:	c0 e0       	ldi	r28, 0x00	; 0
    9ef8:	60 e0       	ldi	r22, 0x00	; 0
    9efa:	8c 2f       	mov	r24, r28
    9efc:	bb dd       	rcall	.-1162   	; 0x9a74 <udc_iface_enable>
    9efe:	88 23       	and	r24, r24
    9f00:	09 f4       	brne	.+2      	; 0x9f04 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    9f02:	67 c0       	rjmp	.+206    	; 0x9fd2 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    9f04:	cf 5f       	subi	r28, 0xFF	; 255
    9f06:	e0 91 b0 2a 	lds	r30, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    9f0a:	f0 91 b1 2a 	lds	r31, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    9f0e:	01 90       	ld	r0, Z+
    9f10:	f0 81       	ld	r31, Z
    9f12:	e0 2d       	mov	r30, r0
    9f14:	84 81       	ldd	r24, Z+4	; 0x04
    9f16:	c8 17       	cp	r28, r24
    9f18:	78 f3       	brcs	.-34     	; 0x9ef8 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    9f1a:	ea c0       	rjmp	.+468    	; 0xa0f0 <udc_process_setup+0x55c>
    9f1c:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    9f1e:	e9 f4       	brne	.+58     	; 0x9f5a <udc_process_setup+0x3c6>
    9f20:	90 91 c8 2a 	lds	r25, 0x2AC8	; 0x802ac8 <udd_g_ctrlreq+0x1>
    9f24:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    9f26:	c9 f4       	brne	.+50     	; 0x9f5a <udc_process_setup+0x3c6>
    9f28:	80 91 cd 2a 	lds	r24, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    9f2c:	90 91 ce 2a 	lds	r25, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    9f30:	89 2b       	or	r24, r25
    9f32:	09 f0       	breq	.+2      	; 0x9f36 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    9f34:	53 c0       	rjmp	.+166    	; 0x9fdc <udc_process_setup+0x448>
    9f36:	80 91 b2 2a 	lds	r24, 0x2AB2	; 0x802ab2 <udc_num_configuration>
    9f3a:	88 23       	and	r24, r24
    9f3c:	09 f4       	brne	.+2      	; 0x9f40 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    9f3e:	4e c0       	rjmp	.+156    	; 0x9fdc <udc_process_setup+0x448>
    9f40:	e7 ec       	ldi	r30, 0xC7	; 199
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    9f42:	fa e2       	ldi	r31, 0x2A	; 42

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    9f44:	c4 81       	ldd	r28, Z+4	; 0x04
    9f46:	d2 81       	ldd	r29, Z+2	; 0x02
    9f48:	8c 2f       	mov	r24, r28
    9f4a:	52 dd       	rcall	.-1372   	; 0x99f0 <udc_iface_disable>
    9f4c:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    9f4e:	09 f4       	brne	.+2      	; 0x9f52 <udc_process_setup+0x3be>
    9f50:	40 c0       	rjmp	.+128    	; 0x9fd2 <udc_process_setup+0x43e>
    9f52:	6d 2f       	mov	r22, r29
    9f54:	8c 2f       	mov	r24, r28
    9f56:	8e dd       	rcall	.-1252   	; 0x9a74 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    9f58:	3a c0       	rjmp	.+116    	; 0x9fce <udc_process_setup+0x43a>
    9f5a:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    9f5c:	d1 f5       	brne	.+116    	; 0x9fd2 <udc_process_setup+0x43e>
    9f5e:	80 91 c8 2a 	lds	r24, 0x2AC8	; 0x802ac8 <udd_g_ctrlreq+0x1>
    9f62:	81 30       	cpi	r24, 0x01	; 1
    9f64:	19 f0       	breq	.+6      	; 0x9f6c <udc_process_setup+0x3d8>
    9f66:	83 30       	cpi	r24, 0x03	; 3
    9f68:	a1 f0       	breq	.+40     	; 0x9f92 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    9f6a:	30 c0       	rjmp	.+96     	; 0x9fcc <udc_process_setup+0x438>
    9f6c:	80 91 cd 2a 	lds	r24, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    9f70:	90 91 ce 2a 	lds	r25, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    9f74:	89 2b       	or	r24, r25
    9f76:	09 f0       	breq	.+2      	; 0x9f7a <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    9f78:	61 c0       	rjmp	.+194    	; 0xa03c <udc_process_setup+0x4a8>
    9f7a:	80 91 c9 2a 	lds	r24, 0x2AC9	; 0x802ac9 <udd_g_ctrlreq+0x2>
    9f7e:	90 91 ca 2a 	lds	r25, 0x2ACA	; 0x802aca <udd_g_ctrlreq+0x3>
    9f82:	89 2b       	or	r24, r25
    9f84:	09 f0       	breq	.+2      	; 0x9f88 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    9f86:	5a c0       	rjmp	.+180    	; 0xa03c <udc_process_setup+0x4a8>
    9f88:	80 91 cb 2a 	lds	r24, 0x2ACB	; 0x802acb <udd_g_ctrlreq+0x4>
    9f8c:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    9f90:	1e c0       	rjmp	.+60     	; 0x9fce <udc_process_setup+0x43a>
    9f92:	80 91 cd 2a 	lds	r24, 0x2ACD	; 0x802acd <udd_g_ctrlreq+0x6>
    9f96:	90 91 ce 2a 	lds	r25, 0x2ACE	; 0x802ace <udd_g_ctrlreq+0x7>
    9f9a:	89 2b       	or	r24, r25
    9f9c:	09 f0       	breq	.+2      	; 0x9fa0 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    9f9e:	4e c0       	rjmp	.+156    	; 0xa03c <udc_process_setup+0x4a8>
    9fa0:	80 91 c9 2a 	lds	r24, 0x2AC9	; 0x802ac9 <udd_g_ctrlreq+0x2>
    9fa4:	90 91 ca 2a 	lds	r25, 0x2ACA	; 0x802aca <udd_g_ctrlreq+0x3>
    9fa8:	89 2b       	or	r24, r25
    9faa:	09 f0       	breq	.+2      	; 0x9fae <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    9fac:	47 c0       	rjmp	.+142    	; 0xa03c <udc_process_setup+0x4a8>
    9fae:	c7 ec       	ldi	r28, 0xC7	; 199
    9fb0:	da e2       	ldi	r29, 0x2A	; 42
    9fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    9fb4:	0e 94 99 37 	call	0x6f32	; 0x6f32 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    9fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    9fba:	0e 94 04 38 	call	0x7008	; 0x7008 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    9fbe:	07 c0       	rjmp	.+14     	; 0x9fce <udc_process_setup+0x43a>
    9fc0:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    9fc2:	05 c0       	rjmp	.+10     	; 0x9fce <udc_process_setup+0x43a>
    9fc4:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    9fc6:	03 c0       	rjmp	.+6      	; 0x9fce <udc_process_setup+0x43a>
    9fc8:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    9fca:	01 c0       	rjmp	.+2      	; 0x9fce <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    9fcc:	80 e0       	ldi	r24, 0x00	; 0
    9fce:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    9fd0:	90 c0       	rjmp	.+288    	; 0xa0f2 <udc_process_setup+0x55e>
    9fd2:	80 91 c7 2a 	lds	r24, 0x2AC7	; 0x802ac7 <udd_g_ctrlreq>
    9fd6:	8f 71       	andi	r24, 0x1F	; 31
    9fd8:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    9fda:	81 f5       	brne	.+96     	; 0xa03c <udc_process_setup+0x4a8>
    9fdc:	80 91 b2 2a 	lds	r24, 0x2AB2	; 0x802ab2 <udc_num_configuration>
    9fe0:	88 23       	and	r24, r24
    9fe2:	09 f4       	brne	.+2      	; 0x9fe6 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    9fe4:	71 c0       	rjmp	.+226    	; 0xa0c8 <udc_process_setup+0x534>
    9fe6:	00 91 cb 2a 	lds	r16, 0x2ACB	; 0x802acb <udd_g_ctrlreq+0x4>
    9fea:	10 91 cc 2a 	lds	r17, 0x2ACC	; 0x802acc <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    9fee:	c0 91 b0 2a 	lds	r28, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    9ff2:	d0 91 b1 2a 	lds	r29, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    9ff6:	e8 81       	ld	r30, Y
    9ff8:	f9 81       	ldd	r31, Y+1	; 0x01
    9ffa:	84 81       	ldd	r24, Z+4	; 0x04
    9ffc:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    9ffe:	08 f0       	brcs	.+2      	; 0xa002 <udc_process_setup+0x46e>
    a000:	65 c0       	rjmp	.+202    	; 0xa0cc <udc_process_setup+0x538>
    a002:	60 e0       	ldi	r22, 0x00	; 0
    a004:	80 2f       	mov	r24, r16
    a006:	ba dc       	rcall	.-1676   	; 0x997c <udc_update_iface_desc>
    a008:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    a00a:	c1 f0       	breq	.+48     	; 0xa03c <udc_process_setup+0x4a8>
    a00c:	f8 01       	movw	r30, r16
    a00e:	ff 27       	eor	r31, r31
    a010:	cf 01       	movw	r24, r30
    a012:	88 0f       	add	r24, r24
    a014:	99 1f       	adc	r25, r25
    a016:	ea 81       	ldd	r30, Y+2	; 0x02
    a018:	fb 81       	ldd	r31, Y+3	; 0x03
    a01a:	e8 0f       	add	r30, r24
    a01c:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    a01e:	c0 81       	ld	r28, Z
    a020:	d1 81       	ldd	r29, Z+1	; 0x01
    a022:	ee 81       	ldd	r30, Y+6	; 0x06
    a024:	ff 81       	ldd	r31, Y+7	; 0x07
    a026:	19 95       	eicall
    a028:	68 2f       	mov	r22, r24
    a02a:	80 2f       	mov	r24, r16
    a02c:	a7 dc       	rcall	.-1714   	; 0x997c <udc_update_iface_desc>
    a02e:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    a030:	29 f0       	breq	.+10     	; 0xa03c <udc_process_setup+0x4a8>
    a032:	ec 81       	ldd	r30, Y+4	; 0x04
    a034:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    a036:	19 95       	eicall
    a038:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    a03a:	5b c0       	rjmp	.+182    	; 0xa0f2 <udc_process_setup+0x55e>
    a03c:	80 91 c7 2a 	lds	r24, 0x2AC7	; 0x802ac7 <udd_g_ctrlreq>
    a040:	8f 71       	andi	r24, 0x1F	; 31
    a042:	82 30       	cpi	r24, 0x02	; 2
    a044:	09 f0       	breq	.+2      	; 0xa048 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    a046:	44 c0       	rjmp	.+136    	; 0xa0d0 <udc_process_setup+0x53c>
    a048:	80 91 b2 2a 	lds	r24, 0x2AB2	; 0x802ab2 <udc_num_configuration>
    a04c:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    a04e:	b1 f1       	breq	.+108    	; 0xa0bc <udc_process_setup+0x528>
    a050:	a0 91 b0 2a 	lds	r26, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    a054:	b0 91 b1 2a 	lds	r27, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    a058:	ed 91       	ld	r30, X+
    a05a:	fc 91       	ld	r31, X
    a05c:	11 97       	sbiw	r26, 0x01	; 1
    a05e:	84 81       	ldd	r24, Z+4	; 0x04
    a060:	88 23       	and	r24, r24
    a062:	71 f1       	breq	.+92     	; 0xa0c0 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    a064:	c0 e0       	ldi	r28, 0x00	; 0
    a066:	ec 2f       	mov	r30, r28
    a068:	f0 e0       	ldi	r31, 0x00	; 0
    a06a:	ee 0f       	add	r30, r30
    a06c:	ff 1f       	adc	r31, r31
    a06e:	12 96       	adiw	r26, 0x02	; 2
    a070:	8d 91       	ld	r24, X+
    a072:	9c 91       	ld	r25, X
    a074:	13 97       	sbiw	r26, 0x03	; 3
    a076:	e8 0f       	add	r30, r24
    a078:	f9 1f       	adc	r31, r25
    a07a:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    a07c:	11 81       	ldd	r17, Z+1	; 0x01
    a07e:	d8 01       	movw	r26, r16
    a080:	16 96       	adiw	r26, 0x06	; 6
    a082:	ed 91       	ld	r30, X+
    a084:	fc 91       	ld	r31, X
    a086:	17 97       	sbiw	r26, 0x07	; 7
    a088:	19 95       	eicall
    a08a:	68 2f       	mov	r22, r24
    a08c:	8c 2f       	mov	r24, r28
    a08e:	76 dc       	rcall	.-1812   	; 0x997c <udc_update_iface_desc>
    a090:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    a092:	79 f1       	breq	.+94     	; 0xa0f2 <udc_process_setup+0x55e>
    a094:	d8 01       	movw	r26, r16
    a096:	14 96       	adiw	r26, 0x04	; 4
    a098:	ed 91       	ld	r30, X+
    a09a:	fc 91       	ld	r31, X
    a09c:	15 97       	sbiw	r26, 0x05	; 5
    a09e:	19 95       	eicall
    a0a0:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    a0a2:	27 c0       	rjmp	.+78     	; 0xa0f2 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    a0a4:	cf 5f       	subi	r28, 0xFF	; 255
    a0a6:	a0 91 b0 2a 	lds	r26, 0x2AB0	; 0x802ab0 <udc_ptr_conf>
    a0aa:	b0 91 b1 2a 	lds	r27, 0x2AB1	; 0x802ab1 <udc_ptr_conf+0x1>
    a0ae:	ed 91       	ld	r30, X+
    a0b0:	fc 91       	ld	r31, X
    a0b2:	11 97       	sbiw	r26, 0x01	; 1
    a0b4:	94 81       	ldd	r25, Z+4	; 0x04
    a0b6:	c9 17       	cp	r28, r25
    a0b8:	b0 f2       	brcs	.-84     	; 0xa066 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    a0ba:	1b c0       	rjmp	.+54     	; 0xa0f2 <udc_process_setup+0x55e>
    a0bc:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    a0be:	19 c0       	rjmp	.+50     	; 0xa0f2 <udc_process_setup+0x55e>
    a0c0:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    a0c2:	17 c0       	rjmp	.+46     	; 0xa0f2 <udc_process_setup+0x55e>
    a0c4:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    a0c6:	15 c0       	rjmp	.+42     	; 0xa0f2 <udc_process_setup+0x55e>
    a0c8:	80 e0       	ldi	r24, 0x00	; 0
    a0ca:	13 c0       	rjmp	.+38     	; 0xa0f2 <udc_process_setup+0x55e>
    a0cc:	80 e0       	ldi	r24, 0x00	; 0
    a0ce:	11 c0       	rjmp	.+34     	; 0xa0f2 <udc_process_setup+0x55e>
    a0d0:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    a0d2:	0f c0       	rjmp	.+30     	; 0xa0f2 <udc_process_setup+0x55e>
    a0d4:	98 2f       	mov	r25, r24
    a0d6:	90 76       	andi	r25, 0x60	; 96
    a0d8:	09 f0       	breq	.+2      	; 0xa0dc <udc_process_setup+0x548>
    a0da:	7b cf       	rjmp	.-266    	; 0x9fd2 <udc_process_setup+0x43e>
    a0dc:	74 cd       	rjmp	.-1304   	; 0x9bc6 <udc_process_setup+0x32>
    a0de:	98 2f       	mov	r25, r24
    a0e0:	90 76       	andi	r25, 0x60	; 96
    a0e2:	09 f0       	breq	.+2      	; 0xa0e6 <udc_process_setup+0x552>
    a0e4:	76 cf       	rjmp	.-276    	; 0x9fd2 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    a0e6:	77 ce       	rjmp	.-786    	; 0x9dd6 <udc_process_setup+0x242>
		str = udc_string_product_name;
    a0e8:	3c e0       	ldi	r19, 0x0C	; 12
    a0ea:	e8 ee       	ldi	r30, 0xE8	; 232
    a0ec:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    a0ee:	eb cd       	rjmp	.-1066   	; 0x9cc6 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    a0f0:	81 e0       	ldi	r24, 0x01	; 1
    a0f2:	df 91       	pop	r29
    a0f4:	cf 91       	pop	r28
    a0f6:	1f 91       	pop	r17
    a0f8:	0f 91       	pop	r16
    a0fa:	08 95       	ret

0000a0fc <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    a0fc:	cf 93       	push	r28
    a0fe:	df 93       	push	r29
    a100:	1f 92       	push	r1
    a102:	cd b7       	in	r28, 0x3d	; 61
    a104:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    a106:	80 91 e1 2a 	lds	r24, 0x2AE1	; 0x802ae1 <stdio_base>
    a10a:	90 91 e2 2a 	lds	r25, 0x2AE2	; 0x802ae2 <stdio_base+0x1>
    a10e:	e0 91 dd 2a 	lds	r30, 0x2ADD	; 0x802add <ptr_get>
    a112:	f0 91 de 2a 	lds	r31, 0x2ADE	; 0x802ade <ptr_get+0x1>
    a116:	be 01       	movw	r22, r28
    a118:	6f 5f       	subi	r22, 0xFF	; 255
    a11a:	7f 4f       	sbci	r23, 0xFF	; 255
    a11c:	19 95       	eicall
	return c;
    a11e:	89 81       	ldd	r24, Y+1	; 0x01
}
    a120:	08 2e       	mov	r0, r24
    a122:	00 0c       	add	r0, r0
    a124:	99 0b       	sbc	r25, r25
    a126:	0f 90       	pop	r0
    a128:	df 91       	pop	r29
    a12a:	cf 91       	pop	r28
    a12c:	08 95       	ret

0000a12e <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    a12e:	80 91 b8 2a 	lds	r24, 0x2AB8	; 0x802ab8 <stdio_usb_interface_enable>
    a132:	88 23       	and	r24, r24
    a134:	81 f0       	breq	.+32     	; 0xa156 <stdio_usb_putchar+0x28>
    a136:	86 2f       	mov	r24, r22
    a138:	08 2e       	mov	r0, r24
    a13a:	00 0c       	add	r0, r0
    a13c:	99 0b       	sbc	r25, r25
    a13e:	df db       	rcall	.-2114   	; 0x98fe <udi_cdc_putc>
    a140:	21 e0       	ldi	r18, 0x01	; 1
    a142:	30 e0       	ldi	r19, 0x00	; 0
    a144:	89 2b       	or	r24, r25
    a146:	11 f0       	breq	.+4      	; 0xa14c <stdio_usb_putchar+0x1e>
    a148:	20 e0       	ldi	r18, 0x00	; 0
    a14a:	30 e0       	ldi	r19, 0x00	; 0
    a14c:	88 27       	eor	r24, r24
    a14e:	99 27       	eor	r25, r25
    a150:	82 1b       	sub	r24, r18
    a152:	93 0b       	sbc	r25, r19
    a154:	08 95       	ret
    a156:	80 e0       	ldi	r24, 0x00	; 0
    a158:	90 e0       	ldi	r25, 0x00	; 0
    a15a:	08 95       	ret

0000a15c <stdio_usb_getchar>:
    a15c:	cf 93       	push	r28
    a15e:	df 93       	push	r29
    a160:	80 91 b8 2a 	lds	r24, 0x2AB8	; 0x802ab8 <stdio_usb_interface_enable>
    a164:	81 11       	cpse	r24, r1
    a166:	03 c0       	rjmp	.+6      	; 0xa16e <stdio_usb_getchar+0x12>
    a168:	fb 01       	movw	r30, r22
    a16a:	10 82       	st	Z, r1
    a16c:	03 c0       	rjmp	.+6      	; 0xa174 <stdio_usb_getchar+0x18>
    a16e:	eb 01       	movw	r28, r22
    a170:	3e db       	rcall	.-2436   	; 0x97ee <udi_cdc_getc>
    a172:	88 83       	st	Y, r24
    a174:	df 91       	pop	r29
    a176:	cf 91       	pop	r28
    a178:	08 95       	ret

0000a17a <stdio_usb_enable>:
    a17a:	81 e0       	ldi	r24, 0x01	; 1
    a17c:	80 93 b8 2a 	sts	0x2AB8, r24	; 0x802ab8 <stdio_usb_interface_enable>
    a180:	08 95       	ret

0000a182 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    a182:	10 92 e1 2a 	sts	0x2AE1, r1	; 0x802ae1 <stdio_base>
    a186:	10 92 e2 2a 	sts	0x2AE2, r1	; 0x802ae2 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    a18a:	87 e9       	ldi	r24, 0x97	; 151
    a18c:	90 e5       	ldi	r25, 0x50	; 80
    a18e:	80 93 df 2a 	sts	0x2ADF, r24	; 0x802adf <ptr_put>
    a192:	90 93 e0 2a 	sts	0x2AE0, r25	; 0x802ae0 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    a196:	8e ea       	ldi	r24, 0xAE	; 174
    a198:	90 e5       	ldi	r25, 0x50	; 80
    a19a:	80 93 dd 2a 	sts	0x2ADD, r24	; 0x802add <ptr_get>
    a19e:	90 93 de 2a 	sts	0x2ADE, r25	; 0x802ade <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    a1a2:	9b dc       	rcall	.-1738   	; 0x9ada <udc_start>
    a1a4:	6e e7       	ldi	r22, 0x7E	; 126
    a1a6:	70 e5       	ldi	r23, 0x50	; 80
    a1a8:	88 ed       	ldi	r24, 0xD8	; 216
    a1aa:	90 e5       	ldi	r25, 0x50	; 80
    a1ac:	56 c3       	rjmp	.+1708   	; 0xa85a <fdevopen>
    a1ae:	08 95       	ret

0000a1b0 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    a1b0:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    a1b2:	80 91 e1 2a 	lds	r24, 0x2AE1	; 0x802ae1 <stdio_base>
    a1b6:	90 91 e2 2a 	lds	r25, 0x2AE2	; 0x802ae2 <stdio_base+0x1>
    a1ba:	e0 91 df 2a 	lds	r30, 0x2ADF	; 0x802adf <ptr_put>
    a1be:	f0 91 e0 2a 	lds	r31, 0x2AE0	; 0x802ae0 <ptr_put+0x1>
    a1c2:	19 95       	eicall
    a1c4:	99 23       	and	r25, r25
    a1c6:	1c f0       	brlt	.+6      	; 0xa1ce <_write+0x1e>
		return -1;
	}
	return 1;
    a1c8:	81 e0       	ldi	r24, 0x01	; 1
    a1ca:	90 e0       	ldi	r25, 0x00	; 0
    a1cc:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    a1ce:	8f ef       	ldi	r24, 0xFF	; 255
    a1d0:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    a1d2:	08 95       	ret

0000a1d4 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    a1d4:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    a1d8:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    a1da:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    a1dc:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    a1e0:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    a1e2:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    a1e6:	08 95       	ret

0000a1e8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    a1e8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    a1ea:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    a1ec:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    a1ee:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    a1f0:	60 83       	st	Z, r22
	ret                             // Return to caller
    a1f2:	08 95       	ret

0000a1f4 <__mulsi3>:
    a1f4:	db 01       	movw	r26, r22
    a1f6:	8f 93       	push	r24
    a1f8:	9f 93       	push	r25
    a1fa:	8d d0       	rcall	.+282    	; 0xa316 <__muluhisi3>
    a1fc:	bf 91       	pop	r27
    a1fe:	af 91       	pop	r26
    a200:	a2 9f       	mul	r26, r18
    a202:	80 0d       	add	r24, r0
    a204:	91 1d       	adc	r25, r1
    a206:	a3 9f       	mul	r26, r19
    a208:	90 0d       	add	r25, r0
    a20a:	b2 9f       	mul	r27, r18
    a20c:	90 0d       	add	r25, r0
    a20e:	11 24       	eor	r1, r1
    a210:	08 95       	ret

0000a212 <__udivmodhi4>:
    a212:	aa 1b       	sub	r26, r26
    a214:	bb 1b       	sub	r27, r27
    a216:	51 e1       	ldi	r21, 0x11	; 17
    a218:	07 c0       	rjmp	.+14     	; 0xa228 <__udivmodhi4_ep>

0000a21a <__udivmodhi4_loop>:
    a21a:	aa 1f       	adc	r26, r26
    a21c:	bb 1f       	adc	r27, r27
    a21e:	a6 17       	cp	r26, r22
    a220:	b7 07       	cpc	r27, r23
    a222:	10 f0       	brcs	.+4      	; 0xa228 <__udivmodhi4_ep>
    a224:	a6 1b       	sub	r26, r22
    a226:	b7 0b       	sbc	r27, r23

0000a228 <__udivmodhi4_ep>:
    a228:	88 1f       	adc	r24, r24
    a22a:	99 1f       	adc	r25, r25
    a22c:	5a 95       	dec	r21
    a22e:	a9 f7       	brne	.-22     	; 0xa21a <__udivmodhi4_loop>
    a230:	80 95       	com	r24
    a232:	90 95       	com	r25
    a234:	bc 01       	movw	r22, r24
    a236:	cd 01       	movw	r24, r26
    a238:	08 95       	ret

0000a23a <__divmodhi4>:
    a23a:	97 fb       	bst	r25, 7
    a23c:	07 2e       	mov	r0, r23
    a23e:	16 f4       	brtc	.+4      	; 0xa244 <__divmodhi4+0xa>
    a240:	00 94       	com	r0
    a242:	06 d0       	rcall	.+12     	; 0xa250 <__divmodhi4_neg1>
    a244:	77 fd       	sbrc	r23, 7
    a246:	08 d0       	rcall	.+16     	; 0xa258 <__divmodhi4_neg2>
    a248:	e4 df       	rcall	.-56     	; 0xa212 <__udivmodhi4>
    a24a:	07 fc       	sbrc	r0, 7
    a24c:	05 d0       	rcall	.+10     	; 0xa258 <__divmodhi4_neg2>
    a24e:	3e f4       	brtc	.+14     	; 0xa25e <__divmodhi4_exit>

0000a250 <__divmodhi4_neg1>:
    a250:	90 95       	com	r25
    a252:	81 95       	neg	r24
    a254:	9f 4f       	sbci	r25, 0xFF	; 255
    a256:	08 95       	ret

0000a258 <__divmodhi4_neg2>:
    a258:	70 95       	com	r23
    a25a:	61 95       	neg	r22
    a25c:	7f 4f       	sbci	r23, 0xFF	; 255

0000a25e <__divmodhi4_exit>:
    a25e:	08 95       	ret

0000a260 <__udivmodsi4>:
    a260:	a1 e2       	ldi	r26, 0x21	; 33
    a262:	1a 2e       	mov	r1, r26
    a264:	aa 1b       	sub	r26, r26
    a266:	bb 1b       	sub	r27, r27
    a268:	fd 01       	movw	r30, r26
    a26a:	0d c0       	rjmp	.+26     	; 0xa286 <__udivmodsi4_ep>

0000a26c <__udivmodsi4_loop>:
    a26c:	aa 1f       	adc	r26, r26
    a26e:	bb 1f       	adc	r27, r27
    a270:	ee 1f       	adc	r30, r30
    a272:	ff 1f       	adc	r31, r31
    a274:	a2 17       	cp	r26, r18
    a276:	b3 07       	cpc	r27, r19
    a278:	e4 07       	cpc	r30, r20
    a27a:	f5 07       	cpc	r31, r21
    a27c:	20 f0       	brcs	.+8      	; 0xa286 <__udivmodsi4_ep>
    a27e:	a2 1b       	sub	r26, r18
    a280:	b3 0b       	sbc	r27, r19
    a282:	e4 0b       	sbc	r30, r20
    a284:	f5 0b       	sbc	r31, r21

0000a286 <__udivmodsi4_ep>:
    a286:	66 1f       	adc	r22, r22
    a288:	77 1f       	adc	r23, r23
    a28a:	88 1f       	adc	r24, r24
    a28c:	99 1f       	adc	r25, r25
    a28e:	1a 94       	dec	r1
    a290:	69 f7       	brne	.-38     	; 0xa26c <__udivmodsi4_loop>
    a292:	60 95       	com	r22
    a294:	70 95       	com	r23
    a296:	80 95       	com	r24
    a298:	90 95       	com	r25
    a29a:	9b 01       	movw	r18, r22
    a29c:	ac 01       	movw	r20, r24
    a29e:	bd 01       	movw	r22, r26
    a2a0:	cf 01       	movw	r24, r30
    a2a2:	08 95       	ret

0000a2a4 <__divmodsi4>:
    a2a4:	05 2e       	mov	r0, r21
    a2a6:	97 fb       	bst	r25, 7
    a2a8:	16 f4       	brtc	.+4      	; 0xa2ae <__divmodsi4+0xa>
    a2aa:	00 94       	com	r0
    a2ac:	0f d0       	rcall	.+30     	; 0xa2cc <__negsi2>
    a2ae:	57 fd       	sbrc	r21, 7
    a2b0:	05 d0       	rcall	.+10     	; 0xa2bc <__divmodsi4_neg2>
    a2b2:	d6 df       	rcall	.-84     	; 0xa260 <__udivmodsi4>
    a2b4:	07 fc       	sbrc	r0, 7
    a2b6:	02 d0       	rcall	.+4      	; 0xa2bc <__divmodsi4_neg2>
    a2b8:	46 f4       	brtc	.+16     	; 0xa2ca <__divmodsi4_exit>
    a2ba:	08 c0       	rjmp	.+16     	; 0xa2cc <__negsi2>

0000a2bc <__divmodsi4_neg2>:
    a2bc:	50 95       	com	r21
    a2be:	40 95       	com	r20
    a2c0:	30 95       	com	r19
    a2c2:	21 95       	neg	r18
    a2c4:	3f 4f       	sbci	r19, 0xFF	; 255
    a2c6:	4f 4f       	sbci	r20, 0xFF	; 255
    a2c8:	5f 4f       	sbci	r21, 0xFF	; 255

0000a2ca <__divmodsi4_exit>:
    a2ca:	08 95       	ret

0000a2cc <__negsi2>:
    a2cc:	90 95       	com	r25
    a2ce:	80 95       	com	r24
    a2d0:	70 95       	com	r23
    a2d2:	61 95       	neg	r22
    a2d4:	7f 4f       	sbci	r23, 0xFF	; 255
    a2d6:	8f 4f       	sbci	r24, 0xFF	; 255
    a2d8:	9f 4f       	sbci	r25, 0xFF	; 255
    a2da:	08 95       	ret

0000a2dc <__tablejump2__>:
    a2dc:	ee 0f       	add	r30, r30
    a2de:	ff 1f       	adc	r31, r31
    a2e0:	88 1f       	adc	r24, r24
    a2e2:	8b bf       	out	0x3b, r24	; 59
    a2e4:	07 90       	elpm	r0, Z+
    a2e6:	f6 91       	elpm	r31, Z
    a2e8:	e0 2d       	mov	r30, r0
    a2ea:	19 94       	eijmp

0000a2ec <__umulhisi3>:
    a2ec:	a2 9f       	mul	r26, r18
    a2ee:	b0 01       	movw	r22, r0
    a2f0:	b3 9f       	mul	r27, r19
    a2f2:	c0 01       	movw	r24, r0
    a2f4:	a3 9f       	mul	r26, r19
    a2f6:	70 0d       	add	r23, r0
    a2f8:	81 1d       	adc	r24, r1
    a2fa:	11 24       	eor	r1, r1
    a2fc:	91 1d       	adc	r25, r1
    a2fe:	b2 9f       	mul	r27, r18
    a300:	70 0d       	add	r23, r0
    a302:	81 1d       	adc	r24, r1
    a304:	11 24       	eor	r1, r1
    a306:	91 1d       	adc	r25, r1
    a308:	08 95       	ret

0000a30a <__usmulhisi3>:
    a30a:	f0 df       	rcall	.-32     	; 0xa2ec <__umulhisi3>

0000a30c <__usmulhisi3_tail>:
    a30c:	b7 ff       	sbrs	r27, 7
    a30e:	08 95       	ret
    a310:	82 1b       	sub	r24, r18
    a312:	93 0b       	sbc	r25, r19
    a314:	08 95       	ret

0000a316 <__muluhisi3>:
    a316:	ea df       	rcall	.-44     	; 0xa2ec <__umulhisi3>
    a318:	a5 9f       	mul	r26, r21
    a31a:	90 0d       	add	r25, r0
    a31c:	b4 9f       	mul	r27, r20
    a31e:	90 0d       	add	r25, r0
    a320:	a4 9f       	mul	r26, r20
    a322:	80 0d       	add	r24, r0
    a324:	91 1d       	adc	r25, r1
    a326:	11 24       	eor	r1, r1
    a328:	08 95       	ret

0000a32a <__mulshisi3>:
    a32a:	b7 ff       	sbrs	r27, 7
    a32c:	f4 cf       	rjmp	.-24     	; 0xa316 <__muluhisi3>

0000a32e <__mulohisi3>:
    a32e:	f3 df       	rcall	.-26     	; 0xa316 <__muluhisi3>
    a330:	82 1b       	sub	r24, r18
    a332:	93 0b       	sbc	r25, r19
    a334:	08 95       	ret

0000a336 <__muldi3>:
    a336:	df 93       	push	r29
    a338:	cf 93       	push	r28
    a33a:	1f 93       	push	r17
    a33c:	0f 93       	push	r16
    a33e:	9a 9d       	mul	r25, r10
    a340:	f0 2d       	mov	r31, r0
    a342:	21 9f       	mul	r18, r17
    a344:	f0 0d       	add	r31, r0
    a346:	8b 9d       	mul	r24, r11
    a348:	f0 0d       	add	r31, r0
    a34a:	8a 9d       	mul	r24, r10
    a34c:	e0 2d       	mov	r30, r0
    a34e:	f1 0d       	add	r31, r1
    a350:	03 9f       	mul	r16, r19
    a352:	f0 0d       	add	r31, r0
    a354:	02 9f       	mul	r16, r18
    a356:	e0 0d       	add	r30, r0
    a358:	f1 1d       	adc	r31, r1
    a35a:	4e 9d       	mul	r20, r14
    a35c:	e0 0d       	add	r30, r0
    a35e:	f1 1d       	adc	r31, r1
    a360:	5e 9d       	mul	r21, r14
    a362:	f0 0d       	add	r31, r0
    a364:	4f 9d       	mul	r20, r15
    a366:	f0 0d       	add	r31, r0
    a368:	7f 93       	push	r23
    a36a:	6f 93       	push	r22
    a36c:	bf 92       	push	r11
    a36e:	af 92       	push	r10
    a370:	5f 93       	push	r21
    a372:	4f 93       	push	r20
    a374:	d5 01       	movw	r26, r10
    a376:	ba df       	rcall	.-140    	; 0xa2ec <__umulhisi3>
    a378:	8b 01       	movw	r16, r22
    a37a:	ac 01       	movw	r20, r24
    a37c:	d7 01       	movw	r26, r14
    a37e:	b6 df       	rcall	.-148    	; 0xa2ec <__umulhisi3>
    a380:	eb 01       	movw	r28, r22
    a382:	e8 0f       	add	r30, r24
    a384:	f9 1f       	adc	r31, r25
    a386:	d6 01       	movw	r26, r12
    a388:	1f d0       	rcall	.+62     	; 0xa3c8 <__muldi3_6>
    a38a:	2f 91       	pop	r18
    a38c:	3f 91       	pop	r19
    a38e:	d6 01       	movw	r26, r12
    a390:	ad df       	rcall	.-166    	; 0xa2ec <__umulhisi3>
    a392:	c6 0f       	add	r28, r22
    a394:	d7 1f       	adc	r29, r23
    a396:	e8 1f       	adc	r30, r24
    a398:	f9 1f       	adc	r31, r25
    a39a:	af 91       	pop	r26
    a39c:	bf 91       	pop	r27
    a39e:	14 d0       	rcall	.+40     	; 0xa3c8 <__muldi3_6>
    a3a0:	2f 91       	pop	r18
    a3a2:	3f 91       	pop	r19
    a3a4:	a3 df       	rcall	.-186    	; 0xa2ec <__umulhisi3>
    a3a6:	c6 0f       	add	r28, r22
    a3a8:	d7 1f       	adc	r29, r23
    a3aa:	e8 1f       	adc	r30, r24
    a3ac:	f9 1f       	adc	r31, r25
    a3ae:	d6 01       	movw	r26, r12
    a3b0:	9d df       	rcall	.-198    	; 0xa2ec <__umulhisi3>
    a3b2:	e6 0f       	add	r30, r22
    a3b4:	f7 1f       	adc	r31, r23
    a3b6:	98 01       	movw	r18, r16
    a3b8:	be 01       	movw	r22, r28
    a3ba:	cf 01       	movw	r24, r30
    a3bc:	11 24       	eor	r1, r1
    a3be:	0f 91       	pop	r16
    a3c0:	1f 91       	pop	r17
    a3c2:	cf 91       	pop	r28
    a3c4:	df 91       	pop	r29
    a3c6:	08 95       	ret

0000a3c8 <__muldi3_6>:
    a3c8:	91 df       	rcall	.-222    	; 0xa2ec <__umulhisi3>
    a3ca:	46 0f       	add	r20, r22
    a3cc:	57 1f       	adc	r21, r23
    a3ce:	c8 1f       	adc	r28, r24
    a3d0:	d9 1f       	adc	r29, r25
    a3d2:	08 f4       	brcc	.+2      	; 0xa3d6 <__muldi3_6+0xe>
    a3d4:	31 96       	adiw	r30, 0x01	; 1
    a3d6:	08 95       	ret

0000a3d8 <__ashldi3>:
    a3d8:	0f 93       	push	r16
    a3da:	08 30       	cpi	r16, 0x08	; 8
    a3dc:	90 f0       	brcs	.+36     	; 0xa402 <__ashldi3+0x2a>
    a3de:	98 2f       	mov	r25, r24
    a3e0:	87 2f       	mov	r24, r23
    a3e2:	76 2f       	mov	r23, r22
    a3e4:	65 2f       	mov	r22, r21
    a3e6:	54 2f       	mov	r21, r20
    a3e8:	43 2f       	mov	r20, r19
    a3ea:	32 2f       	mov	r19, r18
    a3ec:	22 27       	eor	r18, r18
    a3ee:	08 50       	subi	r16, 0x08	; 8
    a3f0:	f4 cf       	rjmp	.-24     	; 0xa3da <__ashldi3+0x2>
    a3f2:	22 0f       	add	r18, r18
    a3f4:	33 1f       	adc	r19, r19
    a3f6:	44 1f       	adc	r20, r20
    a3f8:	55 1f       	adc	r21, r21
    a3fa:	66 1f       	adc	r22, r22
    a3fc:	77 1f       	adc	r23, r23
    a3fe:	88 1f       	adc	r24, r24
    a400:	99 1f       	adc	r25, r25
    a402:	0a 95       	dec	r16
    a404:	b2 f7       	brpl	.-20     	; 0xa3f2 <__ashldi3+0x1a>
    a406:	0f 91       	pop	r16
    a408:	08 95       	ret

0000a40a <__ashrdi3>:
    a40a:	97 fb       	bst	r25, 7
    a40c:	10 f8       	bld	r1, 0

0000a40e <__lshrdi3>:
    a40e:	16 94       	lsr	r1
    a410:	00 08       	sbc	r0, r0
    a412:	0f 93       	push	r16
    a414:	08 30       	cpi	r16, 0x08	; 8
    a416:	98 f0       	brcs	.+38     	; 0xa43e <__lshrdi3+0x30>
    a418:	08 50       	subi	r16, 0x08	; 8
    a41a:	23 2f       	mov	r18, r19
    a41c:	34 2f       	mov	r19, r20
    a41e:	45 2f       	mov	r20, r21
    a420:	56 2f       	mov	r21, r22
    a422:	67 2f       	mov	r22, r23
    a424:	78 2f       	mov	r23, r24
    a426:	89 2f       	mov	r24, r25
    a428:	90 2d       	mov	r25, r0
    a42a:	f4 cf       	rjmp	.-24     	; 0xa414 <__lshrdi3+0x6>
    a42c:	05 94       	asr	r0
    a42e:	97 95       	ror	r25
    a430:	87 95       	ror	r24
    a432:	77 95       	ror	r23
    a434:	67 95       	ror	r22
    a436:	57 95       	ror	r21
    a438:	47 95       	ror	r20
    a43a:	37 95       	ror	r19
    a43c:	27 95       	ror	r18
    a43e:	0a 95       	dec	r16
    a440:	aa f7       	brpl	.-22     	; 0xa42c <__lshrdi3+0x1e>
    a442:	0f 91       	pop	r16
    a444:	08 95       	ret

0000a446 <__adddi3>:
    a446:	2a 0d       	add	r18, r10
    a448:	3b 1d       	adc	r19, r11
    a44a:	4c 1d       	adc	r20, r12
    a44c:	5d 1d       	adc	r21, r13
    a44e:	6e 1d       	adc	r22, r14
    a450:	7f 1d       	adc	r23, r15
    a452:	80 1f       	adc	r24, r16
    a454:	91 1f       	adc	r25, r17
    a456:	08 95       	ret

0000a458 <__subdi3>:
    a458:	2a 19       	sub	r18, r10
    a45a:	3b 09       	sbc	r19, r11
    a45c:	4c 09       	sbc	r20, r12
    a45e:	5d 09       	sbc	r21, r13
    a460:	6e 09       	sbc	r22, r14
    a462:	7f 09       	sbc	r23, r15
    a464:	80 0b       	sbc	r24, r16
    a466:	91 0b       	sbc	r25, r17
    a468:	08 95       	ret

0000a46a <__subsf3>:
    a46a:	50 58       	subi	r21, 0x80	; 128

0000a46c <__addsf3>:
    a46c:	bb 27       	eor	r27, r27
    a46e:	aa 27       	eor	r26, r26
    a470:	0e d0       	rcall	.+28     	; 0xa48e <__addsf3x>
    a472:	4d c1       	rjmp	.+666    	; 0xa70e <__fp_round>
    a474:	3e d1       	rcall	.+636    	; 0xa6f2 <__fp_pscA>
    a476:	30 f0       	brcs	.+12     	; 0xa484 <__addsf3+0x18>
    a478:	43 d1       	rcall	.+646    	; 0xa700 <__fp_pscB>
    a47a:	20 f0       	brcs	.+8      	; 0xa484 <__addsf3+0x18>
    a47c:	31 f4       	brne	.+12     	; 0xa48a <__addsf3+0x1e>
    a47e:	9f 3f       	cpi	r25, 0xFF	; 255
    a480:	11 f4       	brne	.+4      	; 0xa486 <__addsf3+0x1a>
    a482:	1e f4       	brtc	.+6      	; 0xa48a <__addsf3+0x1e>
    a484:	33 c1       	rjmp	.+614    	; 0xa6ec <__fp_nan>
    a486:	0e f4       	brtc	.+2      	; 0xa48a <__addsf3+0x1e>
    a488:	e0 95       	com	r30
    a48a:	e7 fb       	bst	r30, 7
    a48c:	29 c1       	rjmp	.+594    	; 0xa6e0 <__fp_inf>

0000a48e <__addsf3x>:
    a48e:	e9 2f       	mov	r30, r25
    a490:	4f d1       	rcall	.+670    	; 0xa730 <__fp_split3>
    a492:	80 f3       	brcs	.-32     	; 0xa474 <__addsf3+0x8>
    a494:	ba 17       	cp	r27, r26
    a496:	62 07       	cpc	r22, r18
    a498:	73 07       	cpc	r23, r19
    a49a:	84 07       	cpc	r24, r20
    a49c:	95 07       	cpc	r25, r21
    a49e:	18 f0       	brcs	.+6      	; 0xa4a6 <__addsf3x+0x18>
    a4a0:	71 f4       	brne	.+28     	; 0xa4be <__addsf3x+0x30>
    a4a2:	9e f5       	brtc	.+102    	; 0xa50a <__addsf3x+0x7c>
    a4a4:	67 c1       	rjmp	.+718    	; 0xa774 <__fp_zero>
    a4a6:	0e f4       	brtc	.+2      	; 0xa4aa <__addsf3x+0x1c>
    a4a8:	e0 95       	com	r30
    a4aa:	0b 2e       	mov	r0, r27
    a4ac:	ba 2f       	mov	r27, r26
    a4ae:	a0 2d       	mov	r26, r0
    a4b0:	0b 01       	movw	r0, r22
    a4b2:	b9 01       	movw	r22, r18
    a4b4:	90 01       	movw	r18, r0
    a4b6:	0c 01       	movw	r0, r24
    a4b8:	ca 01       	movw	r24, r20
    a4ba:	a0 01       	movw	r20, r0
    a4bc:	11 24       	eor	r1, r1
    a4be:	ff 27       	eor	r31, r31
    a4c0:	59 1b       	sub	r21, r25
    a4c2:	99 f0       	breq	.+38     	; 0xa4ea <__addsf3x+0x5c>
    a4c4:	59 3f       	cpi	r21, 0xF9	; 249
    a4c6:	50 f4       	brcc	.+20     	; 0xa4dc <__addsf3x+0x4e>
    a4c8:	50 3e       	cpi	r21, 0xE0	; 224
    a4ca:	68 f1       	brcs	.+90     	; 0xa526 <__addsf3x+0x98>
    a4cc:	1a 16       	cp	r1, r26
    a4ce:	f0 40       	sbci	r31, 0x00	; 0
    a4d0:	a2 2f       	mov	r26, r18
    a4d2:	23 2f       	mov	r18, r19
    a4d4:	34 2f       	mov	r19, r20
    a4d6:	44 27       	eor	r20, r20
    a4d8:	58 5f       	subi	r21, 0xF8	; 248
    a4da:	f3 cf       	rjmp	.-26     	; 0xa4c2 <__addsf3x+0x34>
    a4dc:	46 95       	lsr	r20
    a4de:	37 95       	ror	r19
    a4e0:	27 95       	ror	r18
    a4e2:	a7 95       	ror	r26
    a4e4:	f0 40       	sbci	r31, 0x00	; 0
    a4e6:	53 95       	inc	r21
    a4e8:	c9 f7       	brne	.-14     	; 0xa4dc <__addsf3x+0x4e>
    a4ea:	7e f4       	brtc	.+30     	; 0xa50a <__addsf3x+0x7c>
    a4ec:	1f 16       	cp	r1, r31
    a4ee:	ba 0b       	sbc	r27, r26
    a4f0:	62 0b       	sbc	r22, r18
    a4f2:	73 0b       	sbc	r23, r19
    a4f4:	84 0b       	sbc	r24, r20
    a4f6:	ba f0       	brmi	.+46     	; 0xa526 <__addsf3x+0x98>
    a4f8:	91 50       	subi	r25, 0x01	; 1
    a4fa:	a1 f0       	breq	.+40     	; 0xa524 <__addsf3x+0x96>
    a4fc:	ff 0f       	add	r31, r31
    a4fe:	bb 1f       	adc	r27, r27
    a500:	66 1f       	adc	r22, r22
    a502:	77 1f       	adc	r23, r23
    a504:	88 1f       	adc	r24, r24
    a506:	c2 f7       	brpl	.-16     	; 0xa4f8 <__addsf3x+0x6a>
    a508:	0e c0       	rjmp	.+28     	; 0xa526 <__addsf3x+0x98>
    a50a:	ba 0f       	add	r27, r26
    a50c:	62 1f       	adc	r22, r18
    a50e:	73 1f       	adc	r23, r19
    a510:	84 1f       	adc	r24, r20
    a512:	48 f4       	brcc	.+18     	; 0xa526 <__addsf3x+0x98>
    a514:	87 95       	ror	r24
    a516:	77 95       	ror	r23
    a518:	67 95       	ror	r22
    a51a:	b7 95       	ror	r27
    a51c:	f7 95       	ror	r31
    a51e:	9e 3f       	cpi	r25, 0xFE	; 254
    a520:	08 f0       	brcs	.+2      	; 0xa524 <__addsf3x+0x96>
    a522:	b3 cf       	rjmp	.-154    	; 0xa48a <__addsf3+0x1e>
    a524:	93 95       	inc	r25
    a526:	88 0f       	add	r24, r24
    a528:	08 f0       	brcs	.+2      	; 0xa52c <__addsf3x+0x9e>
    a52a:	99 27       	eor	r25, r25
    a52c:	ee 0f       	add	r30, r30
    a52e:	97 95       	ror	r25
    a530:	87 95       	ror	r24
    a532:	08 95       	ret

0000a534 <__divsf3>:
    a534:	0c d0       	rcall	.+24     	; 0xa54e <__divsf3x>
    a536:	eb c0       	rjmp	.+470    	; 0xa70e <__fp_round>
    a538:	e3 d0       	rcall	.+454    	; 0xa700 <__fp_pscB>
    a53a:	40 f0       	brcs	.+16     	; 0xa54c <__divsf3+0x18>
    a53c:	da d0       	rcall	.+436    	; 0xa6f2 <__fp_pscA>
    a53e:	30 f0       	brcs	.+12     	; 0xa54c <__divsf3+0x18>
    a540:	21 f4       	brne	.+8      	; 0xa54a <__divsf3+0x16>
    a542:	5f 3f       	cpi	r21, 0xFF	; 255
    a544:	19 f0       	breq	.+6      	; 0xa54c <__divsf3+0x18>
    a546:	cc c0       	rjmp	.+408    	; 0xa6e0 <__fp_inf>
    a548:	51 11       	cpse	r21, r1
    a54a:	15 c1       	rjmp	.+554    	; 0xa776 <__fp_szero>
    a54c:	cf c0       	rjmp	.+414    	; 0xa6ec <__fp_nan>

0000a54e <__divsf3x>:
    a54e:	f0 d0       	rcall	.+480    	; 0xa730 <__fp_split3>
    a550:	98 f3       	brcs	.-26     	; 0xa538 <__divsf3+0x4>

0000a552 <__divsf3_pse>:
    a552:	99 23       	and	r25, r25
    a554:	c9 f3       	breq	.-14     	; 0xa548 <__divsf3+0x14>
    a556:	55 23       	and	r21, r21
    a558:	b1 f3       	breq	.-20     	; 0xa546 <__divsf3+0x12>
    a55a:	95 1b       	sub	r25, r21
    a55c:	55 0b       	sbc	r21, r21
    a55e:	bb 27       	eor	r27, r27
    a560:	aa 27       	eor	r26, r26
    a562:	62 17       	cp	r22, r18
    a564:	73 07       	cpc	r23, r19
    a566:	84 07       	cpc	r24, r20
    a568:	38 f0       	brcs	.+14     	; 0xa578 <__divsf3_pse+0x26>
    a56a:	9f 5f       	subi	r25, 0xFF	; 255
    a56c:	5f 4f       	sbci	r21, 0xFF	; 255
    a56e:	22 0f       	add	r18, r18
    a570:	33 1f       	adc	r19, r19
    a572:	44 1f       	adc	r20, r20
    a574:	aa 1f       	adc	r26, r26
    a576:	a9 f3       	breq	.-22     	; 0xa562 <__divsf3_pse+0x10>
    a578:	33 d0       	rcall	.+102    	; 0xa5e0 <__divsf3_pse+0x8e>
    a57a:	0e 2e       	mov	r0, r30
    a57c:	3a f0       	brmi	.+14     	; 0xa58c <__divsf3_pse+0x3a>
    a57e:	e0 e8       	ldi	r30, 0x80	; 128
    a580:	30 d0       	rcall	.+96     	; 0xa5e2 <__divsf3_pse+0x90>
    a582:	91 50       	subi	r25, 0x01	; 1
    a584:	50 40       	sbci	r21, 0x00	; 0
    a586:	e6 95       	lsr	r30
    a588:	00 1c       	adc	r0, r0
    a58a:	ca f7       	brpl	.-14     	; 0xa57e <__divsf3_pse+0x2c>
    a58c:	29 d0       	rcall	.+82     	; 0xa5e0 <__divsf3_pse+0x8e>
    a58e:	fe 2f       	mov	r31, r30
    a590:	27 d0       	rcall	.+78     	; 0xa5e0 <__divsf3_pse+0x8e>
    a592:	66 0f       	add	r22, r22
    a594:	77 1f       	adc	r23, r23
    a596:	88 1f       	adc	r24, r24
    a598:	bb 1f       	adc	r27, r27
    a59a:	26 17       	cp	r18, r22
    a59c:	37 07       	cpc	r19, r23
    a59e:	48 07       	cpc	r20, r24
    a5a0:	ab 07       	cpc	r26, r27
    a5a2:	b0 e8       	ldi	r27, 0x80	; 128
    a5a4:	09 f0       	breq	.+2      	; 0xa5a8 <__divsf3_pse+0x56>
    a5a6:	bb 0b       	sbc	r27, r27
    a5a8:	80 2d       	mov	r24, r0
    a5aa:	bf 01       	movw	r22, r30
    a5ac:	ff 27       	eor	r31, r31
    a5ae:	93 58       	subi	r25, 0x83	; 131
    a5b0:	5f 4f       	sbci	r21, 0xFF	; 255
    a5b2:	2a f0       	brmi	.+10     	; 0xa5be <__divsf3_pse+0x6c>
    a5b4:	9e 3f       	cpi	r25, 0xFE	; 254
    a5b6:	51 05       	cpc	r21, r1
    a5b8:	68 f0       	brcs	.+26     	; 0xa5d4 <__divsf3_pse+0x82>
    a5ba:	92 c0       	rjmp	.+292    	; 0xa6e0 <__fp_inf>
    a5bc:	dc c0       	rjmp	.+440    	; 0xa776 <__fp_szero>
    a5be:	5f 3f       	cpi	r21, 0xFF	; 255
    a5c0:	ec f3       	brlt	.-6      	; 0xa5bc <__divsf3_pse+0x6a>
    a5c2:	98 3e       	cpi	r25, 0xE8	; 232
    a5c4:	dc f3       	brlt	.-10     	; 0xa5bc <__divsf3_pse+0x6a>
    a5c6:	86 95       	lsr	r24
    a5c8:	77 95       	ror	r23
    a5ca:	67 95       	ror	r22
    a5cc:	b7 95       	ror	r27
    a5ce:	f7 95       	ror	r31
    a5d0:	9f 5f       	subi	r25, 0xFF	; 255
    a5d2:	c9 f7       	brne	.-14     	; 0xa5c6 <__divsf3_pse+0x74>
    a5d4:	88 0f       	add	r24, r24
    a5d6:	91 1d       	adc	r25, r1
    a5d8:	96 95       	lsr	r25
    a5da:	87 95       	ror	r24
    a5dc:	97 f9       	bld	r25, 7
    a5de:	08 95       	ret
    a5e0:	e1 e0       	ldi	r30, 0x01	; 1
    a5e2:	66 0f       	add	r22, r22
    a5e4:	77 1f       	adc	r23, r23
    a5e6:	88 1f       	adc	r24, r24
    a5e8:	bb 1f       	adc	r27, r27
    a5ea:	62 17       	cp	r22, r18
    a5ec:	73 07       	cpc	r23, r19
    a5ee:	84 07       	cpc	r24, r20
    a5f0:	ba 07       	cpc	r27, r26
    a5f2:	20 f0       	brcs	.+8      	; 0xa5fc <__divsf3_pse+0xaa>
    a5f4:	62 1b       	sub	r22, r18
    a5f6:	73 0b       	sbc	r23, r19
    a5f8:	84 0b       	sbc	r24, r20
    a5fa:	ba 0b       	sbc	r27, r26
    a5fc:	ee 1f       	adc	r30, r30
    a5fe:	88 f7       	brcc	.-30     	; 0xa5e2 <__divsf3_pse+0x90>
    a600:	e0 95       	com	r30
    a602:	08 95       	ret

0000a604 <__fixsfsi>:
    a604:	04 d0       	rcall	.+8      	; 0xa60e <__fixunssfsi>
    a606:	68 94       	set
    a608:	b1 11       	cpse	r27, r1
    a60a:	b5 c0       	rjmp	.+362    	; 0xa776 <__fp_szero>
    a60c:	08 95       	ret

0000a60e <__fixunssfsi>:
    a60e:	98 d0       	rcall	.+304    	; 0xa740 <__fp_splitA>
    a610:	88 f0       	brcs	.+34     	; 0xa634 <__fixunssfsi+0x26>
    a612:	9f 57       	subi	r25, 0x7F	; 127
    a614:	90 f0       	brcs	.+36     	; 0xa63a <__fixunssfsi+0x2c>
    a616:	b9 2f       	mov	r27, r25
    a618:	99 27       	eor	r25, r25
    a61a:	b7 51       	subi	r27, 0x17	; 23
    a61c:	a0 f0       	brcs	.+40     	; 0xa646 <__fixunssfsi+0x38>
    a61e:	d1 f0       	breq	.+52     	; 0xa654 <__fixunssfsi+0x46>
    a620:	66 0f       	add	r22, r22
    a622:	77 1f       	adc	r23, r23
    a624:	88 1f       	adc	r24, r24
    a626:	99 1f       	adc	r25, r25
    a628:	1a f0       	brmi	.+6      	; 0xa630 <__fixunssfsi+0x22>
    a62a:	ba 95       	dec	r27
    a62c:	c9 f7       	brne	.-14     	; 0xa620 <__fixunssfsi+0x12>
    a62e:	12 c0       	rjmp	.+36     	; 0xa654 <__fixunssfsi+0x46>
    a630:	b1 30       	cpi	r27, 0x01	; 1
    a632:	81 f0       	breq	.+32     	; 0xa654 <__fixunssfsi+0x46>
    a634:	9f d0       	rcall	.+318    	; 0xa774 <__fp_zero>
    a636:	b1 e0       	ldi	r27, 0x01	; 1
    a638:	08 95       	ret
    a63a:	9c c0       	rjmp	.+312    	; 0xa774 <__fp_zero>
    a63c:	67 2f       	mov	r22, r23
    a63e:	78 2f       	mov	r23, r24
    a640:	88 27       	eor	r24, r24
    a642:	b8 5f       	subi	r27, 0xF8	; 248
    a644:	39 f0       	breq	.+14     	; 0xa654 <__fixunssfsi+0x46>
    a646:	b9 3f       	cpi	r27, 0xF9	; 249
    a648:	cc f3       	brlt	.-14     	; 0xa63c <__fixunssfsi+0x2e>
    a64a:	86 95       	lsr	r24
    a64c:	77 95       	ror	r23
    a64e:	67 95       	ror	r22
    a650:	b3 95       	inc	r27
    a652:	d9 f7       	brne	.-10     	; 0xa64a <__fixunssfsi+0x3c>
    a654:	3e f4       	brtc	.+14     	; 0xa664 <__fixunssfsi+0x56>
    a656:	90 95       	com	r25
    a658:	80 95       	com	r24
    a65a:	70 95       	com	r23
    a65c:	61 95       	neg	r22
    a65e:	7f 4f       	sbci	r23, 0xFF	; 255
    a660:	8f 4f       	sbci	r24, 0xFF	; 255
    a662:	9f 4f       	sbci	r25, 0xFF	; 255
    a664:	08 95       	ret

0000a666 <__floatunsisf>:
    a666:	e8 94       	clt
    a668:	09 c0       	rjmp	.+18     	; 0xa67c <__floatsisf+0x12>

0000a66a <__floatsisf>:
    a66a:	97 fb       	bst	r25, 7
    a66c:	3e f4       	brtc	.+14     	; 0xa67c <__floatsisf+0x12>
    a66e:	90 95       	com	r25
    a670:	80 95       	com	r24
    a672:	70 95       	com	r23
    a674:	61 95       	neg	r22
    a676:	7f 4f       	sbci	r23, 0xFF	; 255
    a678:	8f 4f       	sbci	r24, 0xFF	; 255
    a67a:	9f 4f       	sbci	r25, 0xFF	; 255
    a67c:	99 23       	and	r25, r25
    a67e:	a9 f0       	breq	.+42     	; 0xa6aa <__floatsisf+0x40>
    a680:	f9 2f       	mov	r31, r25
    a682:	96 e9       	ldi	r25, 0x96	; 150
    a684:	bb 27       	eor	r27, r27
    a686:	93 95       	inc	r25
    a688:	f6 95       	lsr	r31
    a68a:	87 95       	ror	r24
    a68c:	77 95       	ror	r23
    a68e:	67 95       	ror	r22
    a690:	b7 95       	ror	r27
    a692:	f1 11       	cpse	r31, r1
    a694:	f8 cf       	rjmp	.-16     	; 0xa686 <__floatsisf+0x1c>
    a696:	fa f4       	brpl	.+62     	; 0xa6d6 <__floatsisf+0x6c>
    a698:	bb 0f       	add	r27, r27
    a69a:	11 f4       	brne	.+4      	; 0xa6a0 <__floatsisf+0x36>
    a69c:	60 ff       	sbrs	r22, 0
    a69e:	1b c0       	rjmp	.+54     	; 0xa6d6 <__floatsisf+0x6c>
    a6a0:	6f 5f       	subi	r22, 0xFF	; 255
    a6a2:	7f 4f       	sbci	r23, 0xFF	; 255
    a6a4:	8f 4f       	sbci	r24, 0xFF	; 255
    a6a6:	9f 4f       	sbci	r25, 0xFF	; 255
    a6a8:	16 c0       	rjmp	.+44     	; 0xa6d6 <__floatsisf+0x6c>
    a6aa:	88 23       	and	r24, r24
    a6ac:	11 f0       	breq	.+4      	; 0xa6b2 <__floatsisf+0x48>
    a6ae:	96 e9       	ldi	r25, 0x96	; 150
    a6b0:	11 c0       	rjmp	.+34     	; 0xa6d4 <__floatsisf+0x6a>
    a6b2:	77 23       	and	r23, r23
    a6b4:	21 f0       	breq	.+8      	; 0xa6be <__floatsisf+0x54>
    a6b6:	9e e8       	ldi	r25, 0x8E	; 142
    a6b8:	87 2f       	mov	r24, r23
    a6ba:	76 2f       	mov	r23, r22
    a6bc:	05 c0       	rjmp	.+10     	; 0xa6c8 <__floatsisf+0x5e>
    a6be:	66 23       	and	r22, r22
    a6c0:	71 f0       	breq	.+28     	; 0xa6de <__floatsisf+0x74>
    a6c2:	96 e8       	ldi	r25, 0x86	; 134
    a6c4:	86 2f       	mov	r24, r22
    a6c6:	70 e0       	ldi	r23, 0x00	; 0
    a6c8:	60 e0       	ldi	r22, 0x00	; 0
    a6ca:	2a f0       	brmi	.+10     	; 0xa6d6 <__floatsisf+0x6c>
    a6cc:	9a 95       	dec	r25
    a6ce:	66 0f       	add	r22, r22
    a6d0:	77 1f       	adc	r23, r23
    a6d2:	88 1f       	adc	r24, r24
    a6d4:	da f7       	brpl	.-10     	; 0xa6cc <__floatsisf+0x62>
    a6d6:	88 0f       	add	r24, r24
    a6d8:	96 95       	lsr	r25
    a6da:	87 95       	ror	r24
    a6dc:	97 f9       	bld	r25, 7
    a6de:	08 95       	ret

0000a6e0 <__fp_inf>:
    a6e0:	97 f9       	bld	r25, 7
    a6e2:	9f 67       	ori	r25, 0x7F	; 127
    a6e4:	80 e8       	ldi	r24, 0x80	; 128
    a6e6:	70 e0       	ldi	r23, 0x00	; 0
    a6e8:	60 e0       	ldi	r22, 0x00	; 0
    a6ea:	08 95       	ret

0000a6ec <__fp_nan>:
    a6ec:	9f ef       	ldi	r25, 0xFF	; 255
    a6ee:	80 ec       	ldi	r24, 0xC0	; 192
    a6f0:	08 95       	ret

0000a6f2 <__fp_pscA>:
    a6f2:	00 24       	eor	r0, r0
    a6f4:	0a 94       	dec	r0
    a6f6:	16 16       	cp	r1, r22
    a6f8:	17 06       	cpc	r1, r23
    a6fa:	18 06       	cpc	r1, r24
    a6fc:	09 06       	cpc	r0, r25
    a6fe:	08 95       	ret

0000a700 <__fp_pscB>:
    a700:	00 24       	eor	r0, r0
    a702:	0a 94       	dec	r0
    a704:	12 16       	cp	r1, r18
    a706:	13 06       	cpc	r1, r19
    a708:	14 06       	cpc	r1, r20
    a70a:	05 06       	cpc	r0, r21
    a70c:	08 95       	ret

0000a70e <__fp_round>:
    a70e:	09 2e       	mov	r0, r25
    a710:	03 94       	inc	r0
    a712:	00 0c       	add	r0, r0
    a714:	11 f4       	brne	.+4      	; 0xa71a <__fp_round+0xc>
    a716:	88 23       	and	r24, r24
    a718:	52 f0       	brmi	.+20     	; 0xa72e <__fp_round+0x20>
    a71a:	bb 0f       	add	r27, r27
    a71c:	40 f4       	brcc	.+16     	; 0xa72e <__fp_round+0x20>
    a71e:	bf 2b       	or	r27, r31
    a720:	11 f4       	brne	.+4      	; 0xa726 <__fp_round+0x18>
    a722:	60 ff       	sbrs	r22, 0
    a724:	04 c0       	rjmp	.+8      	; 0xa72e <__fp_round+0x20>
    a726:	6f 5f       	subi	r22, 0xFF	; 255
    a728:	7f 4f       	sbci	r23, 0xFF	; 255
    a72a:	8f 4f       	sbci	r24, 0xFF	; 255
    a72c:	9f 4f       	sbci	r25, 0xFF	; 255
    a72e:	08 95       	ret

0000a730 <__fp_split3>:
    a730:	57 fd       	sbrc	r21, 7
    a732:	90 58       	subi	r25, 0x80	; 128
    a734:	44 0f       	add	r20, r20
    a736:	55 1f       	adc	r21, r21
    a738:	59 f0       	breq	.+22     	; 0xa750 <__fp_splitA+0x10>
    a73a:	5f 3f       	cpi	r21, 0xFF	; 255
    a73c:	71 f0       	breq	.+28     	; 0xa75a <__fp_splitA+0x1a>
    a73e:	47 95       	ror	r20

0000a740 <__fp_splitA>:
    a740:	88 0f       	add	r24, r24
    a742:	97 fb       	bst	r25, 7
    a744:	99 1f       	adc	r25, r25
    a746:	61 f0       	breq	.+24     	; 0xa760 <__fp_splitA+0x20>
    a748:	9f 3f       	cpi	r25, 0xFF	; 255
    a74a:	79 f0       	breq	.+30     	; 0xa76a <__fp_splitA+0x2a>
    a74c:	87 95       	ror	r24
    a74e:	08 95       	ret
    a750:	12 16       	cp	r1, r18
    a752:	13 06       	cpc	r1, r19
    a754:	14 06       	cpc	r1, r20
    a756:	55 1f       	adc	r21, r21
    a758:	f2 cf       	rjmp	.-28     	; 0xa73e <__fp_split3+0xe>
    a75a:	46 95       	lsr	r20
    a75c:	f1 df       	rcall	.-30     	; 0xa740 <__fp_splitA>
    a75e:	08 c0       	rjmp	.+16     	; 0xa770 <__fp_splitA+0x30>
    a760:	16 16       	cp	r1, r22
    a762:	17 06       	cpc	r1, r23
    a764:	18 06       	cpc	r1, r24
    a766:	99 1f       	adc	r25, r25
    a768:	f1 cf       	rjmp	.-30     	; 0xa74c <__fp_splitA+0xc>
    a76a:	86 95       	lsr	r24
    a76c:	71 05       	cpc	r23, r1
    a76e:	61 05       	cpc	r22, r1
    a770:	08 94       	sec
    a772:	08 95       	ret

0000a774 <__fp_zero>:
    a774:	e8 94       	clt

0000a776 <__fp_szero>:
    a776:	bb 27       	eor	r27, r27
    a778:	66 27       	eor	r22, r22
    a77a:	77 27       	eor	r23, r23
    a77c:	cb 01       	movw	r24, r22
    a77e:	97 f9       	bld	r25, 7
    a780:	08 95       	ret

0000a782 <__mulsf3>:
    a782:	0b d0       	rcall	.+22     	; 0xa79a <__mulsf3x>
    a784:	c4 cf       	rjmp	.-120    	; 0xa70e <__fp_round>
    a786:	b5 df       	rcall	.-150    	; 0xa6f2 <__fp_pscA>
    a788:	28 f0       	brcs	.+10     	; 0xa794 <__mulsf3+0x12>
    a78a:	ba df       	rcall	.-140    	; 0xa700 <__fp_pscB>
    a78c:	18 f0       	brcs	.+6      	; 0xa794 <__mulsf3+0x12>
    a78e:	95 23       	and	r25, r21
    a790:	09 f0       	breq	.+2      	; 0xa794 <__mulsf3+0x12>
    a792:	a6 cf       	rjmp	.-180    	; 0xa6e0 <__fp_inf>
    a794:	ab cf       	rjmp	.-170    	; 0xa6ec <__fp_nan>
    a796:	11 24       	eor	r1, r1
    a798:	ee cf       	rjmp	.-36     	; 0xa776 <__fp_szero>

0000a79a <__mulsf3x>:
    a79a:	ca df       	rcall	.-108    	; 0xa730 <__fp_split3>
    a79c:	a0 f3       	brcs	.-24     	; 0xa786 <__mulsf3+0x4>

0000a79e <__mulsf3_pse>:
    a79e:	95 9f       	mul	r25, r21
    a7a0:	d1 f3       	breq	.-12     	; 0xa796 <__mulsf3+0x14>
    a7a2:	95 0f       	add	r25, r21
    a7a4:	50 e0       	ldi	r21, 0x00	; 0
    a7a6:	55 1f       	adc	r21, r21
    a7a8:	62 9f       	mul	r22, r18
    a7aa:	f0 01       	movw	r30, r0
    a7ac:	72 9f       	mul	r23, r18
    a7ae:	bb 27       	eor	r27, r27
    a7b0:	f0 0d       	add	r31, r0
    a7b2:	b1 1d       	adc	r27, r1
    a7b4:	63 9f       	mul	r22, r19
    a7b6:	aa 27       	eor	r26, r26
    a7b8:	f0 0d       	add	r31, r0
    a7ba:	b1 1d       	adc	r27, r1
    a7bc:	aa 1f       	adc	r26, r26
    a7be:	64 9f       	mul	r22, r20
    a7c0:	66 27       	eor	r22, r22
    a7c2:	b0 0d       	add	r27, r0
    a7c4:	a1 1d       	adc	r26, r1
    a7c6:	66 1f       	adc	r22, r22
    a7c8:	82 9f       	mul	r24, r18
    a7ca:	22 27       	eor	r18, r18
    a7cc:	b0 0d       	add	r27, r0
    a7ce:	a1 1d       	adc	r26, r1
    a7d0:	62 1f       	adc	r22, r18
    a7d2:	73 9f       	mul	r23, r19
    a7d4:	b0 0d       	add	r27, r0
    a7d6:	a1 1d       	adc	r26, r1
    a7d8:	62 1f       	adc	r22, r18
    a7da:	83 9f       	mul	r24, r19
    a7dc:	a0 0d       	add	r26, r0
    a7de:	61 1d       	adc	r22, r1
    a7e0:	22 1f       	adc	r18, r18
    a7e2:	74 9f       	mul	r23, r20
    a7e4:	33 27       	eor	r19, r19
    a7e6:	a0 0d       	add	r26, r0
    a7e8:	61 1d       	adc	r22, r1
    a7ea:	23 1f       	adc	r18, r19
    a7ec:	84 9f       	mul	r24, r20
    a7ee:	60 0d       	add	r22, r0
    a7f0:	21 1d       	adc	r18, r1
    a7f2:	82 2f       	mov	r24, r18
    a7f4:	76 2f       	mov	r23, r22
    a7f6:	6a 2f       	mov	r22, r26
    a7f8:	11 24       	eor	r1, r1
    a7fa:	9f 57       	subi	r25, 0x7F	; 127
    a7fc:	50 40       	sbci	r21, 0x00	; 0
    a7fe:	8a f0       	brmi	.+34     	; 0xa822 <__mulsf3_pse+0x84>
    a800:	e1 f0       	breq	.+56     	; 0xa83a <__mulsf3_pse+0x9c>
    a802:	88 23       	and	r24, r24
    a804:	4a f0       	brmi	.+18     	; 0xa818 <__mulsf3_pse+0x7a>
    a806:	ee 0f       	add	r30, r30
    a808:	ff 1f       	adc	r31, r31
    a80a:	bb 1f       	adc	r27, r27
    a80c:	66 1f       	adc	r22, r22
    a80e:	77 1f       	adc	r23, r23
    a810:	88 1f       	adc	r24, r24
    a812:	91 50       	subi	r25, 0x01	; 1
    a814:	50 40       	sbci	r21, 0x00	; 0
    a816:	a9 f7       	brne	.-22     	; 0xa802 <__mulsf3_pse+0x64>
    a818:	9e 3f       	cpi	r25, 0xFE	; 254
    a81a:	51 05       	cpc	r21, r1
    a81c:	70 f0       	brcs	.+28     	; 0xa83a <__mulsf3_pse+0x9c>
    a81e:	60 cf       	rjmp	.-320    	; 0xa6e0 <__fp_inf>
    a820:	aa cf       	rjmp	.-172    	; 0xa776 <__fp_szero>
    a822:	5f 3f       	cpi	r21, 0xFF	; 255
    a824:	ec f3       	brlt	.-6      	; 0xa820 <__mulsf3_pse+0x82>
    a826:	98 3e       	cpi	r25, 0xE8	; 232
    a828:	dc f3       	brlt	.-10     	; 0xa820 <__mulsf3_pse+0x82>
    a82a:	86 95       	lsr	r24
    a82c:	77 95       	ror	r23
    a82e:	67 95       	ror	r22
    a830:	b7 95       	ror	r27
    a832:	f7 95       	ror	r31
    a834:	e7 95       	ror	r30
    a836:	9f 5f       	subi	r25, 0xFF	; 255
    a838:	c1 f7       	brne	.-16     	; 0xa82a <__mulsf3_pse+0x8c>
    a83a:	fe 2b       	or	r31, r30
    a83c:	88 0f       	add	r24, r24
    a83e:	91 1d       	adc	r25, r1
    a840:	96 95       	lsr	r25
    a842:	87 95       	ror	r24
    a844:	97 f9       	bld	r25, 7
    a846:	08 95       	ret

0000a848 <memcpy>:
    a848:	fb 01       	movw	r30, r22
    a84a:	dc 01       	movw	r26, r24
    a84c:	02 c0       	rjmp	.+4      	; 0xa852 <memcpy+0xa>
    a84e:	01 90       	ld	r0, Z+
    a850:	0d 92       	st	X+, r0
    a852:	41 50       	subi	r20, 0x01	; 1
    a854:	50 40       	sbci	r21, 0x00	; 0
    a856:	d8 f7       	brcc	.-10     	; 0xa84e <memcpy+0x6>
    a858:	08 95       	ret

0000a85a <fdevopen>:
    a85a:	0f 93       	push	r16
    a85c:	1f 93       	push	r17
    a85e:	cf 93       	push	r28
    a860:	df 93       	push	r29
    a862:	00 97       	sbiw	r24, 0x00	; 0
    a864:	31 f4       	brne	.+12     	; 0xa872 <fdevopen+0x18>
    a866:	61 15       	cp	r22, r1
    a868:	71 05       	cpc	r23, r1
    a86a:	19 f4       	brne	.+6      	; 0xa872 <fdevopen+0x18>
    a86c:	80 e0       	ldi	r24, 0x00	; 0
    a86e:	90 e0       	ldi	r25, 0x00	; 0
    a870:	39 c0       	rjmp	.+114    	; 0xa8e4 <fdevopen+0x8a>
    a872:	8b 01       	movw	r16, r22
    a874:	ec 01       	movw	r28, r24
    a876:	6e e0       	ldi	r22, 0x0E	; 14
    a878:	70 e0       	ldi	r23, 0x00	; 0
    a87a:	81 e0       	ldi	r24, 0x01	; 1
    a87c:	90 e0       	ldi	r25, 0x00	; 0
    a87e:	99 d2       	rcall	.+1330   	; 0xadb2 <calloc>
    a880:	fc 01       	movw	r30, r24
    a882:	89 2b       	or	r24, r25
    a884:	99 f3       	breq	.-26     	; 0xa86c <fdevopen+0x12>
    a886:	80 e8       	ldi	r24, 0x80	; 128
    a888:	83 83       	std	Z+3, r24	; 0x03
    a88a:	01 15       	cp	r16, r1
    a88c:	11 05       	cpc	r17, r1
    a88e:	71 f0       	breq	.+28     	; 0xa8ac <fdevopen+0x52>
    a890:	02 87       	std	Z+10, r16	; 0x0a
    a892:	13 87       	std	Z+11, r17	; 0x0b
    a894:	81 e8       	ldi	r24, 0x81	; 129
    a896:	83 83       	std	Z+3, r24	; 0x03
    a898:	80 91 e3 2a 	lds	r24, 0x2AE3	; 0x802ae3 <__iob>
    a89c:	90 91 e4 2a 	lds	r25, 0x2AE4	; 0x802ae4 <__iob+0x1>
    a8a0:	89 2b       	or	r24, r25
    a8a2:	21 f4       	brne	.+8      	; 0xa8ac <fdevopen+0x52>
    a8a4:	e0 93 e3 2a 	sts	0x2AE3, r30	; 0x802ae3 <__iob>
    a8a8:	f0 93 e4 2a 	sts	0x2AE4, r31	; 0x802ae4 <__iob+0x1>
    a8ac:	20 97       	sbiw	r28, 0x00	; 0
    a8ae:	c9 f0       	breq	.+50     	; 0xa8e2 <fdevopen+0x88>
    a8b0:	c0 87       	std	Z+8, r28	; 0x08
    a8b2:	d1 87       	std	Z+9, r29	; 0x09
    a8b4:	83 81       	ldd	r24, Z+3	; 0x03
    a8b6:	82 60       	ori	r24, 0x02	; 2
    a8b8:	83 83       	std	Z+3, r24	; 0x03
    a8ba:	80 91 e5 2a 	lds	r24, 0x2AE5	; 0x802ae5 <__iob+0x2>
    a8be:	90 91 e6 2a 	lds	r25, 0x2AE6	; 0x802ae6 <__iob+0x3>
    a8c2:	89 2b       	or	r24, r25
    a8c4:	71 f4       	brne	.+28     	; 0xa8e2 <fdevopen+0x88>
    a8c6:	e0 93 e5 2a 	sts	0x2AE5, r30	; 0x802ae5 <__iob+0x2>
    a8ca:	f0 93 e6 2a 	sts	0x2AE6, r31	; 0x802ae6 <__iob+0x3>
    a8ce:	80 91 e7 2a 	lds	r24, 0x2AE7	; 0x802ae7 <__iob+0x4>
    a8d2:	90 91 e8 2a 	lds	r25, 0x2AE8	; 0x802ae8 <__iob+0x5>
    a8d6:	89 2b       	or	r24, r25
    a8d8:	21 f4       	brne	.+8      	; 0xa8e2 <fdevopen+0x88>
    a8da:	e0 93 e7 2a 	sts	0x2AE7, r30	; 0x802ae7 <__iob+0x4>
    a8de:	f0 93 e8 2a 	sts	0x2AE8, r31	; 0x802ae8 <__iob+0x5>
    a8e2:	cf 01       	movw	r24, r30
    a8e4:	df 91       	pop	r29
    a8e6:	cf 91       	pop	r28
    a8e8:	1f 91       	pop	r17
    a8ea:	0f 91       	pop	r16
    a8ec:	08 95       	ret

0000a8ee <printf>:
    a8ee:	cf 93       	push	r28
    a8f0:	df 93       	push	r29
    a8f2:	cd b7       	in	r28, 0x3d	; 61
    a8f4:	de b7       	in	r29, 0x3e	; 62
    a8f6:	ae 01       	movw	r20, r28
    a8f8:	4a 5f       	subi	r20, 0xFA	; 250
    a8fa:	5f 4f       	sbci	r21, 0xFF	; 255
    a8fc:	fa 01       	movw	r30, r20
    a8fe:	61 91       	ld	r22, Z+
    a900:	71 91       	ld	r23, Z+
    a902:	af 01       	movw	r20, r30
    a904:	80 91 e5 2a 	lds	r24, 0x2AE5	; 0x802ae5 <__iob+0x2>
    a908:	90 91 e6 2a 	lds	r25, 0x2AE6	; 0x802ae6 <__iob+0x3>
    a90c:	5b d0       	rcall	.+182    	; 0xa9c4 <vfprintf>
    a90e:	df 91       	pop	r29
    a910:	cf 91       	pop	r28
    a912:	08 95       	ret

0000a914 <puts>:
    a914:	0f 93       	push	r16
    a916:	1f 93       	push	r17
    a918:	cf 93       	push	r28
    a91a:	df 93       	push	r29
    a91c:	e0 91 e5 2a 	lds	r30, 0x2AE5	; 0x802ae5 <__iob+0x2>
    a920:	f0 91 e6 2a 	lds	r31, 0x2AE6	; 0x802ae6 <__iob+0x3>
    a924:	23 81       	ldd	r18, Z+3	; 0x03
    a926:	21 ff       	sbrs	r18, 1
    a928:	1b c0       	rjmp	.+54     	; 0xa960 <puts+0x4c>
    a92a:	8c 01       	movw	r16, r24
    a92c:	d0 e0       	ldi	r29, 0x00	; 0
    a92e:	c0 e0       	ldi	r28, 0x00	; 0
    a930:	f8 01       	movw	r30, r16
    a932:	81 91       	ld	r24, Z+
    a934:	8f 01       	movw	r16, r30
    a936:	60 91 e5 2a 	lds	r22, 0x2AE5	; 0x802ae5 <__iob+0x2>
    a93a:	70 91 e6 2a 	lds	r23, 0x2AE6	; 0x802ae6 <__iob+0x3>
    a93e:	db 01       	movw	r26, r22
    a940:	18 96       	adiw	r26, 0x08	; 8
    a942:	ed 91       	ld	r30, X+
    a944:	fc 91       	ld	r31, X
    a946:	19 97       	sbiw	r26, 0x09	; 9
    a948:	88 23       	and	r24, r24
    a94a:	31 f0       	breq	.+12     	; 0xa958 <puts+0x44>
    a94c:	19 95       	eicall
    a94e:	89 2b       	or	r24, r25
    a950:	79 f3       	breq	.-34     	; 0xa930 <puts+0x1c>
    a952:	df ef       	ldi	r29, 0xFF	; 255
    a954:	cf ef       	ldi	r28, 0xFF	; 255
    a956:	ec cf       	rjmp	.-40     	; 0xa930 <puts+0x1c>
    a958:	8a e0       	ldi	r24, 0x0A	; 10
    a95a:	19 95       	eicall
    a95c:	89 2b       	or	r24, r25
    a95e:	19 f0       	breq	.+6      	; 0xa966 <puts+0x52>
    a960:	8f ef       	ldi	r24, 0xFF	; 255
    a962:	9f ef       	ldi	r25, 0xFF	; 255
    a964:	02 c0       	rjmp	.+4      	; 0xa96a <puts+0x56>
    a966:	8d 2f       	mov	r24, r29
    a968:	9c 2f       	mov	r25, r28
    a96a:	df 91       	pop	r29
    a96c:	cf 91       	pop	r28
    a96e:	1f 91       	pop	r17
    a970:	0f 91       	pop	r16
    a972:	08 95       	ret

0000a974 <sprintf>:
    a974:	0f 93       	push	r16
    a976:	1f 93       	push	r17
    a978:	cf 93       	push	r28
    a97a:	df 93       	push	r29
    a97c:	cd b7       	in	r28, 0x3d	; 61
    a97e:	de b7       	in	r29, 0x3e	; 62
    a980:	2e 97       	sbiw	r28, 0x0e	; 14
    a982:	cd bf       	out	0x3d, r28	; 61
    a984:	de bf       	out	0x3e, r29	; 62
    a986:	0e 89       	ldd	r16, Y+22	; 0x16
    a988:	1f 89       	ldd	r17, Y+23	; 0x17
    a98a:	86 e0       	ldi	r24, 0x06	; 6
    a98c:	8c 83       	std	Y+4, r24	; 0x04
    a98e:	09 83       	std	Y+1, r16	; 0x01
    a990:	1a 83       	std	Y+2, r17	; 0x02
    a992:	8f ef       	ldi	r24, 0xFF	; 255
    a994:	9f e7       	ldi	r25, 0x7F	; 127
    a996:	8d 83       	std	Y+5, r24	; 0x05
    a998:	9e 83       	std	Y+6, r25	; 0x06
    a99a:	ae 01       	movw	r20, r28
    a99c:	46 5e       	subi	r20, 0xE6	; 230
    a99e:	5f 4f       	sbci	r21, 0xFF	; 255
    a9a0:	68 8d       	ldd	r22, Y+24	; 0x18
    a9a2:	79 8d       	ldd	r23, Y+25	; 0x19
    a9a4:	ce 01       	movw	r24, r28
    a9a6:	01 96       	adiw	r24, 0x01	; 1
    a9a8:	0d d0       	rcall	.+26     	; 0xa9c4 <vfprintf>
    a9aa:	ef 81       	ldd	r30, Y+7	; 0x07
    a9ac:	f8 85       	ldd	r31, Y+8	; 0x08
    a9ae:	e0 0f       	add	r30, r16
    a9b0:	f1 1f       	adc	r31, r17
    a9b2:	10 82       	st	Z, r1
    a9b4:	2e 96       	adiw	r28, 0x0e	; 14
    a9b6:	cd bf       	out	0x3d, r28	; 61
    a9b8:	de bf       	out	0x3e, r29	; 62
    a9ba:	df 91       	pop	r29
    a9bc:	cf 91       	pop	r28
    a9be:	1f 91       	pop	r17
    a9c0:	0f 91       	pop	r16
    a9c2:	08 95       	ret

0000a9c4 <vfprintf>:
    a9c4:	2f 92       	push	r2
    a9c6:	3f 92       	push	r3
    a9c8:	4f 92       	push	r4
    a9ca:	5f 92       	push	r5
    a9cc:	6f 92       	push	r6
    a9ce:	7f 92       	push	r7
    a9d0:	8f 92       	push	r8
    a9d2:	9f 92       	push	r9
    a9d4:	af 92       	push	r10
    a9d6:	bf 92       	push	r11
    a9d8:	cf 92       	push	r12
    a9da:	df 92       	push	r13
    a9dc:	ef 92       	push	r14
    a9de:	ff 92       	push	r15
    a9e0:	0f 93       	push	r16
    a9e2:	1f 93       	push	r17
    a9e4:	cf 93       	push	r28
    a9e6:	df 93       	push	r29
    a9e8:	cd b7       	in	r28, 0x3d	; 61
    a9ea:	de b7       	in	r29, 0x3e	; 62
    a9ec:	2b 97       	sbiw	r28, 0x0b	; 11
    a9ee:	cd bf       	out	0x3d, r28	; 61
    a9f0:	de bf       	out	0x3e, r29	; 62
    a9f2:	6c 01       	movw	r12, r24
    a9f4:	7b 01       	movw	r14, r22
    a9f6:	8a 01       	movw	r16, r20
    a9f8:	fc 01       	movw	r30, r24
    a9fa:	16 82       	std	Z+6, r1	; 0x06
    a9fc:	17 82       	std	Z+7, r1	; 0x07
    a9fe:	83 81       	ldd	r24, Z+3	; 0x03
    aa00:	81 ff       	sbrs	r24, 1
    aa02:	bf c1       	rjmp	.+894    	; 0xad82 <vfprintf+0x3be>
    aa04:	ce 01       	movw	r24, r28
    aa06:	01 96       	adiw	r24, 0x01	; 1
    aa08:	3c 01       	movw	r6, r24
    aa0a:	f6 01       	movw	r30, r12
    aa0c:	93 81       	ldd	r25, Z+3	; 0x03
    aa0e:	f7 01       	movw	r30, r14
    aa10:	93 fd       	sbrc	r25, 3
    aa12:	85 91       	lpm	r24, Z+
    aa14:	93 ff       	sbrs	r25, 3
    aa16:	81 91       	ld	r24, Z+
    aa18:	7f 01       	movw	r14, r30
    aa1a:	88 23       	and	r24, r24
    aa1c:	09 f4       	brne	.+2      	; 0xaa20 <vfprintf+0x5c>
    aa1e:	ad c1       	rjmp	.+858    	; 0xad7a <vfprintf+0x3b6>
    aa20:	85 32       	cpi	r24, 0x25	; 37
    aa22:	39 f4       	brne	.+14     	; 0xaa32 <vfprintf+0x6e>
    aa24:	93 fd       	sbrc	r25, 3
    aa26:	85 91       	lpm	r24, Z+
    aa28:	93 ff       	sbrs	r25, 3
    aa2a:	81 91       	ld	r24, Z+
    aa2c:	7f 01       	movw	r14, r30
    aa2e:	85 32       	cpi	r24, 0x25	; 37
    aa30:	21 f4       	brne	.+8      	; 0xaa3a <vfprintf+0x76>
    aa32:	b6 01       	movw	r22, r12
    aa34:	90 e0       	ldi	r25, 0x00	; 0
    aa36:	15 d3       	rcall	.+1578   	; 0xb062 <fputc>
    aa38:	e8 cf       	rjmp	.-48     	; 0xaa0a <vfprintf+0x46>
    aa3a:	91 2c       	mov	r9, r1
    aa3c:	21 2c       	mov	r2, r1
    aa3e:	31 2c       	mov	r3, r1
    aa40:	ff e1       	ldi	r31, 0x1F	; 31
    aa42:	f3 15       	cp	r31, r3
    aa44:	d8 f0       	brcs	.+54     	; 0xaa7c <vfprintf+0xb8>
    aa46:	8b 32       	cpi	r24, 0x2B	; 43
    aa48:	79 f0       	breq	.+30     	; 0xaa68 <vfprintf+0xa4>
    aa4a:	38 f4       	brcc	.+14     	; 0xaa5a <vfprintf+0x96>
    aa4c:	80 32       	cpi	r24, 0x20	; 32
    aa4e:	79 f0       	breq	.+30     	; 0xaa6e <vfprintf+0xaa>
    aa50:	83 32       	cpi	r24, 0x23	; 35
    aa52:	a1 f4       	brne	.+40     	; 0xaa7c <vfprintf+0xb8>
    aa54:	23 2d       	mov	r18, r3
    aa56:	20 61       	ori	r18, 0x10	; 16
    aa58:	1d c0       	rjmp	.+58     	; 0xaa94 <vfprintf+0xd0>
    aa5a:	8d 32       	cpi	r24, 0x2D	; 45
    aa5c:	61 f0       	breq	.+24     	; 0xaa76 <vfprintf+0xb2>
    aa5e:	80 33       	cpi	r24, 0x30	; 48
    aa60:	69 f4       	brne	.+26     	; 0xaa7c <vfprintf+0xb8>
    aa62:	23 2d       	mov	r18, r3
    aa64:	21 60       	ori	r18, 0x01	; 1
    aa66:	16 c0       	rjmp	.+44     	; 0xaa94 <vfprintf+0xd0>
    aa68:	83 2d       	mov	r24, r3
    aa6a:	82 60       	ori	r24, 0x02	; 2
    aa6c:	38 2e       	mov	r3, r24
    aa6e:	e3 2d       	mov	r30, r3
    aa70:	e4 60       	ori	r30, 0x04	; 4
    aa72:	3e 2e       	mov	r3, r30
    aa74:	2a c0       	rjmp	.+84     	; 0xaaca <vfprintf+0x106>
    aa76:	f3 2d       	mov	r31, r3
    aa78:	f8 60       	ori	r31, 0x08	; 8
    aa7a:	1d c0       	rjmp	.+58     	; 0xaab6 <vfprintf+0xf2>
    aa7c:	37 fc       	sbrc	r3, 7
    aa7e:	2d c0       	rjmp	.+90     	; 0xaada <vfprintf+0x116>
    aa80:	20 ed       	ldi	r18, 0xD0	; 208
    aa82:	28 0f       	add	r18, r24
    aa84:	2a 30       	cpi	r18, 0x0A	; 10
    aa86:	40 f0       	brcs	.+16     	; 0xaa98 <vfprintf+0xd4>
    aa88:	8e 32       	cpi	r24, 0x2E	; 46
    aa8a:	b9 f4       	brne	.+46     	; 0xaaba <vfprintf+0xf6>
    aa8c:	36 fc       	sbrc	r3, 6
    aa8e:	75 c1       	rjmp	.+746    	; 0xad7a <vfprintf+0x3b6>
    aa90:	23 2d       	mov	r18, r3
    aa92:	20 64       	ori	r18, 0x40	; 64
    aa94:	32 2e       	mov	r3, r18
    aa96:	19 c0       	rjmp	.+50     	; 0xaaca <vfprintf+0x106>
    aa98:	36 fe       	sbrs	r3, 6
    aa9a:	06 c0       	rjmp	.+12     	; 0xaaa8 <vfprintf+0xe4>
    aa9c:	8a e0       	ldi	r24, 0x0A	; 10
    aa9e:	98 9e       	mul	r9, r24
    aaa0:	20 0d       	add	r18, r0
    aaa2:	11 24       	eor	r1, r1
    aaa4:	92 2e       	mov	r9, r18
    aaa6:	11 c0       	rjmp	.+34     	; 0xaaca <vfprintf+0x106>
    aaa8:	ea e0       	ldi	r30, 0x0A	; 10
    aaaa:	2e 9e       	mul	r2, r30
    aaac:	20 0d       	add	r18, r0
    aaae:	11 24       	eor	r1, r1
    aab0:	22 2e       	mov	r2, r18
    aab2:	f3 2d       	mov	r31, r3
    aab4:	f0 62       	ori	r31, 0x20	; 32
    aab6:	3f 2e       	mov	r3, r31
    aab8:	08 c0       	rjmp	.+16     	; 0xaaca <vfprintf+0x106>
    aaba:	8c 36       	cpi	r24, 0x6C	; 108
    aabc:	21 f4       	brne	.+8      	; 0xaac6 <vfprintf+0x102>
    aabe:	83 2d       	mov	r24, r3
    aac0:	80 68       	ori	r24, 0x80	; 128
    aac2:	38 2e       	mov	r3, r24
    aac4:	02 c0       	rjmp	.+4      	; 0xaaca <vfprintf+0x106>
    aac6:	88 36       	cpi	r24, 0x68	; 104
    aac8:	41 f4       	brne	.+16     	; 0xaada <vfprintf+0x116>
    aaca:	f7 01       	movw	r30, r14
    aacc:	93 fd       	sbrc	r25, 3
    aace:	85 91       	lpm	r24, Z+
    aad0:	93 ff       	sbrs	r25, 3
    aad2:	81 91       	ld	r24, Z+
    aad4:	7f 01       	movw	r14, r30
    aad6:	81 11       	cpse	r24, r1
    aad8:	b3 cf       	rjmp	.-154    	; 0xaa40 <vfprintf+0x7c>
    aada:	98 2f       	mov	r25, r24
    aadc:	9f 7d       	andi	r25, 0xDF	; 223
    aade:	95 54       	subi	r25, 0x45	; 69
    aae0:	93 30       	cpi	r25, 0x03	; 3
    aae2:	28 f4       	brcc	.+10     	; 0xaaee <vfprintf+0x12a>
    aae4:	0c 5f       	subi	r16, 0xFC	; 252
    aae6:	1f 4f       	sbci	r17, 0xFF	; 255
    aae8:	9f e3       	ldi	r25, 0x3F	; 63
    aaea:	99 83       	std	Y+1, r25	; 0x01
    aaec:	0d c0       	rjmp	.+26     	; 0xab08 <vfprintf+0x144>
    aaee:	83 36       	cpi	r24, 0x63	; 99
    aaf0:	31 f0       	breq	.+12     	; 0xaafe <vfprintf+0x13a>
    aaf2:	83 37       	cpi	r24, 0x73	; 115
    aaf4:	71 f0       	breq	.+28     	; 0xab12 <vfprintf+0x14e>
    aaf6:	83 35       	cpi	r24, 0x53	; 83
    aaf8:	09 f0       	breq	.+2      	; 0xaafc <vfprintf+0x138>
    aafa:	55 c0       	rjmp	.+170    	; 0xaba6 <vfprintf+0x1e2>
    aafc:	20 c0       	rjmp	.+64     	; 0xab3e <vfprintf+0x17a>
    aafe:	f8 01       	movw	r30, r16
    ab00:	80 81       	ld	r24, Z
    ab02:	89 83       	std	Y+1, r24	; 0x01
    ab04:	0e 5f       	subi	r16, 0xFE	; 254
    ab06:	1f 4f       	sbci	r17, 0xFF	; 255
    ab08:	88 24       	eor	r8, r8
    ab0a:	83 94       	inc	r8
    ab0c:	91 2c       	mov	r9, r1
    ab0e:	53 01       	movw	r10, r6
    ab10:	12 c0       	rjmp	.+36     	; 0xab36 <vfprintf+0x172>
    ab12:	28 01       	movw	r4, r16
    ab14:	f2 e0       	ldi	r31, 0x02	; 2
    ab16:	4f 0e       	add	r4, r31
    ab18:	51 1c       	adc	r5, r1
    ab1a:	f8 01       	movw	r30, r16
    ab1c:	a0 80       	ld	r10, Z
    ab1e:	b1 80       	ldd	r11, Z+1	; 0x01
    ab20:	36 fe       	sbrs	r3, 6
    ab22:	03 c0       	rjmp	.+6      	; 0xab2a <vfprintf+0x166>
    ab24:	69 2d       	mov	r22, r9
    ab26:	70 e0       	ldi	r23, 0x00	; 0
    ab28:	02 c0       	rjmp	.+4      	; 0xab2e <vfprintf+0x16a>
    ab2a:	6f ef       	ldi	r22, 0xFF	; 255
    ab2c:	7f ef       	ldi	r23, 0xFF	; 255
    ab2e:	c5 01       	movw	r24, r10
    ab30:	8d d2       	rcall	.+1306   	; 0xb04c <strnlen>
    ab32:	4c 01       	movw	r8, r24
    ab34:	82 01       	movw	r16, r4
    ab36:	f3 2d       	mov	r31, r3
    ab38:	ff 77       	andi	r31, 0x7F	; 127
    ab3a:	3f 2e       	mov	r3, r31
    ab3c:	15 c0       	rjmp	.+42     	; 0xab68 <vfprintf+0x1a4>
    ab3e:	28 01       	movw	r4, r16
    ab40:	22 e0       	ldi	r18, 0x02	; 2
    ab42:	42 0e       	add	r4, r18
    ab44:	51 1c       	adc	r5, r1
    ab46:	f8 01       	movw	r30, r16
    ab48:	a0 80       	ld	r10, Z
    ab4a:	b1 80       	ldd	r11, Z+1	; 0x01
    ab4c:	36 fe       	sbrs	r3, 6
    ab4e:	03 c0       	rjmp	.+6      	; 0xab56 <vfprintf+0x192>
    ab50:	69 2d       	mov	r22, r9
    ab52:	70 e0       	ldi	r23, 0x00	; 0
    ab54:	02 c0       	rjmp	.+4      	; 0xab5a <vfprintf+0x196>
    ab56:	6f ef       	ldi	r22, 0xFF	; 255
    ab58:	7f ef       	ldi	r23, 0xFF	; 255
    ab5a:	c5 01       	movw	r24, r10
    ab5c:	65 d2       	rcall	.+1226   	; 0xb028 <strnlen_P>
    ab5e:	4c 01       	movw	r8, r24
    ab60:	f3 2d       	mov	r31, r3
    ab62:	f0 68       	ori	r31, 0x80	; 128
    ab64:	3f 2e       	mov	r3, r31
    ab66:	82 01       	movw	r16, r4
    ab68:	33 fc       	sbrc	r3, 3
    ab6a:	19 c0       	rjmp	.+50     	; 0xab9e <vfprintf+0x1da>
    ab6c:	82 2d       	mov	r24, r2
    ab6e:	90 e0       	ldi	r25, 0x00	; 0
    ab70:	88 16       	cp	r8, r24
    ab72:	99 06       	cpc	r9, r25
    ab74:	a0 f4       	brcc	.+40     	; 0xab9e <vfprintf+0x1da>
    ab76:	b6 01       	movw	r22, r12
    ab78:	80 e2       	ldi	r24, 0x20	; 32
    ab7a:	90 e0       	ldi	r25, 0x00	; 0
    ab7c:	72 d2       	rcall	.+1252   	; 0xb062 <fputc>
    ab7e:	2a 94       	dec	r2
    ab80:	f5 cf       	rjmp	.-22     	; 0xab6c <vfprintf+0x1a8>
    ab82:	f5 01       	movw	r30, r10
    ab84:	37 fc       	sbrc	r3, 7
    ab86:	85 91       	lpm	r24, Z+
    ab88:	37 fe       	sbrs	r3, 7
    ab8a:	81 91       	ld	r24, Z+
    ab8c:	5f 01       	movw	r10, r30
    ab8e:	b6 01       	movw	r22, r12
    ab90:	90 e0       	ldi	r25, 0x00	; 0
    ab92:	67 d2       	rcall	.+1230   	; 0xb062 <fputc>
    ab94:	21 10       	cpse	r2, r1
    ab96:	2a 94       	dec	r2
    ab98:	21 e0       	ldi	r18, 0x01	; 1
    ab9a:	82 1a       	sub	r8, r18
    ab9c:	91 08       	sbc	r9, r1
    ab9e:	81 14       	cp	r8, r1
    aba0:	91 04       	cpc	r9, r1
    aba2:	79 f7       	brne	.-34     	; 0xab82 <vfprintf+0x1be>
    aba4:	e1 c0       	rjmp	.+450    	; 0xad68 <vfprintf+0x3a4>
    aba6:	84 36       	cpi	r24, 0x64	; 100
    aba8:	11 f0       	breq	.+4      	; 0xabae <vfprintf+0x1ea>
    abaa:	89 36       	cpi	r24, 0x69	; 105
    abac:	39 f5       	brne	.+78     	; 0xabfc <vfprintf+0x238>
    abae:	f8 01       	movw	r30, r16
    abb0:	37 fe       	sbrs	r3, 7
    abb2:	07 c0       	rjmp	.+14     	; 0xabc2 <vfprintf+0x1fe>
    abb4:	60 81       	ld	r22, Z
    abb6:	71 81       	ldd	r23, Z+1	; 0x01
    abb8:	82 81       	ldd	r24, Z+2	; 0x02
    abba:	93 81       	ldd	r25, Z+3	; 0x03
    abbc:	0c 5f       	subi	r16, 0xFC	; 252
    abbe:	1f 4f       	sbci	r17, 0xFF	; 255
    abc0:	08 c0       	rjmp	.+16     	; 0xabd2 <vfprintf+0x20e>
    abc2:	60 81       	ld	r22, Z
    abc4:	71 81       	ldd	r23, Z+1	; 0x01
    abc6:	07 2e       	mov	r0, r23
    abc8:	00 0c       	add	r0, r0
    abca:	88 0b       	sbc	r24, r24
    abcc:	99 0b       	sbc	r25, r25
    abce:	0e 5f       	subi	r16, 0xFE	; 254
    abd0:	1f 4f       	sbci	r17, 0xFF	; 255
    abd2:	f3 2d       	mov	r31, r3
    abd4:	ff 76       	andi	r31, 0x6F	; 111
    abd6:	3f 2e       	mov	r3, r31
    abd8:	97 ff       	sbrs	r25, 7
    abda:	09 c0       	rjmp	.+18     	; 0xabee <vfprintf+0x22a>
    abdc:	90 95       	com	r25
    abde:	80 95       	com	r24
    abe0:	70 95       	com	r23
    abe2:	61 95       	neg	r22
    abe4:	7f 4f       	sbci	r23, 0xFF	; 255
    abe6:	8f 4f       	sbci	r24, 0xFF	; 255
    abe8:	9f 4f       	sbci	r25, 0xFF	; 255
    abea:	f0 68       	ori	r31, 0x80	; 128
    abec:	3f 2e       	mov	r3, r31
    abee:	2a e0       	ldi	r18, 0x0A	; 10
    abf0:	30 e0       	ldi	r19, 0x00	; 0
    abf2:	a3 01       	movw	r20, r6
    abf4:	72 d2       	rcall	.+1252   	; 0xb0da <__ultoa_invert>
    abf6:	88 2e       	mov	r8, r24
    abf8:	86 18       	sub	r8, r6
    abfa:	44 c0       	rjmp	.+136    	; 0xac84 <vfprintf+0x2c0>
    abfc:	85 37       	cpi	r24, 0x75	; 117
    abfe:	31 f4       	brne	.+12     	; 0xac0c <vfprintf+0x248>
    ac00:	23 2d       	mov	r18, r3
    ac02:	2f 7e       	andi	r18, 0xEF	; 239
    ac04:	b2 2e       	mov	r11, r18
    ac06:	2a e0       	ldi	r18, 0x0A	; 10
    ac08:	30 e0       	ldi	r19, 0x00	; 0
    ac0a:	25 c0       	rjmp	.+74     	; 0xac56 <vfprintf+0x292>
    ac0c:	93 2d       	mov	r25, r3
    ac0e:	99 7f       	andi	r25, 0xF9	; 249
    ac10:	b9 2e       	mov	r11, r25
    ac12:	8f 36       	cpi	r24, 0x6F	; 111
    ac14:	c1 f0       	breq	.+48     	; 0xac46 <vfprintf+0x282>
    ac16:	18 f4       	brcc	.+6      	; 0xac1e <vfprintf+0x25a>
    ac18:	88 35       	cpi	r24, 0x58	; 88
    ac1a:	79 f0       	breq	.+30     	; 0xac3a <vfprintf+0x276>
    ac1c:	ae c0       	rjmp	.+348    	; 0xad7a <vfprintf+0x3b6>
    ac1e:	80 37       	cpi	r24, 0x70	; 112
    ac20:	19 f0       	breq	.+6      	; 0xac28 <vfprintf+0x264>
    ac22:	88 37       	cpi	r24, 0x78	; 120
    ac24:	21 f0       	breq	.+8      	; 0xac2e <vfprintf+0x26a>
    ac26:	a9 c0       	rjmp	.+338    	; 0xad7a <vfprintf+0x3b6>
    ac28:	e9 2f       	mov	r30, r25
    ac2a:	e0 61       	ori	r30, 0x10	; 16
    ac2c:	be 2e       	mov	r11, r30
    ac2e:	b4 fe       	sbrs	r11, 4
    ac30:	0d c0       	rjmp	.+26     	; 0xac4c <vfprintf+0x288>
    ac32:	fb 2d       	mov	r31, r11
    ac34:	f4 60       	ori	r31, 0x04	; 4
    ac36:	bf 2e       	mov	r11, r31
    ac38:	09 c0       	rjmp	.+18     	; 0xac4c <vfprintf+0x288>
    ac3a:	34 fe       	sbrs	r3, 4
    ac3c:	0a c0       	rjmp	.+20     	; 0xac52 <vfprintf+0x28e>
    ac3e:	29 2f       	mov	r18, r25
    ac40:	26 60       	ori	r18, 0x06	; 6
    ac42:	b2 2e       	mov	r11, r18
    ac44:	06 c0       	rjmp	.+12     	; 0xac52 <vfprintf+0x28e>
    ac46:	28 e0       	ldi	r18, 0x08	; 8
    ac48:	30 e0       	ldi	r19, 0x00	; 0
    ac4a:	05 c0       	rjmp	.+10     	; 0xac56 <vfprintf+0x292>
    ac4c:	20 e1       	ldi	r18, 0x10	; 16
    ac4e:	30 e0       	ldi	r19, 0x00	; 0
    ac50:	02 c0       	rjmp	.+4      	; 0xac56 <vfprintf+0x292>
    ac52:	20 e1       	ldi	r18, 0x10	; 16
    ac54:	32 e0       	ldi	r19, 0x02	; 2
    ac56:	f8 01       	movw	r30, r16
    ac58:	b7 fe       	sbrs	r11, 7
    ac5a:	07 c0       	rjmp	.+14     	; 0xac6a <vfprintf+0x2a6>
    ac5c:	60 81       	ld	r22, Z
    ac5e:	71 81       	ldd	r23, Z+1	; 0x01
    ac60:	82 81       	ldd	r24, Z+2	; 0x02
    ac62:	93 81       	ldd	r25, Z+3	; 0x03
    ac64:	0c 5f       	subi	r16, 0xFC	; 252
    ac66:	1f 4f       	sbci	r17, 0xFF	; 255
    ac68:	06 c0       	rjmp	.+12     	; 0xac76 <vfprintf+0x2b2>
    ac6a:	60 81       	ld	r22, Z
    ac6c:	71 81       	ldd	r23, Z+1	; 0x01
    ac6e:	80 e0       	ldi	r24, 0x00	; 0
    ac70:	90 e0       	ldi	r25, 0x00	; 0
    ac72:	0e 5f       	subi	r16, 0xFE	; 254
    ac74:	1f 4f       	sbci	r17, 0xFF	; 255
    ac76:	a3 01       	movw	r20, r6
    ac78:	30 d2       	rcall	.+1120   	; 0xb0da <__ultoa_invert>
    ac7a:	88 2e       	mov	r8, r24
    ac7c:	86 18       	sub	r8, r6
    ac7e:	fb 2d       	mov	r31, r11
    ac80:	ff 77       	andi	r31, 0x7F	; 127
    ac82:	3f 2e       	mov	r3, r31
    ac84:	36 fe       	sbrs	r3, 6
    ac86:	0d c0       	rjmp	.+26     	; 0xaca2 <vfprintf+0x2de>
    ac88:	23 2d       	mov	r18, r3
    ac8a:	2e 7f       	andi	r18, 0xFE	; 254
    ac8c:	a2 2e       	mov	r10, r18
    ac8e:	89 14       	cp	r8, r9
    ac90:	58 f4       	brcc	.+22     	; 0xaca8 <vfprintf+0x2e4>
    ac92:	34 fe       	sbrs	r3, 4
    ac94:	0b c0       	rjmp	.+22     	; 0xacac <vfprintf+0x2e8>
    ac96:	32 fc       	sbrc	r3, 2
    ac98:	09 c0       	rjmp	.+18     	; 0xacac <vfprintf+0x2e8>
    ac9a:	83 2d       	mov	r24, r3
    ac9c:	8e 7e       	andi	r24, 0xEE	; 238
    ac9e:	a8 2e       	mov	r10, r24
    aca0:	05 c0       	rjmp	.+10     	; 0xacac <vfprintf+0x2e8>
    aca2:	b8 2c       	mov	r11, r8
    aca4:	a3 2c       	mov	r10, r3
    aca6:	03 c0       	rjmp	.+6      	; 0xacae <vfprintf+0x2ea>
    aca8:	b8 2c       	mov	r11, r8
    acaa:	01 c0       	rjmp	.+2      	; 0xacae <vfprintf+0x2ea>
    acac:	b9 2c       	mov	r11, r9
    acae:	a4 fe       	sbrs	r10, 4
    acb0:	0f c0       	rjmp	.+30     	; 0xacd0 <vfprintf+0x30c>
    acb2:	fe 01       	movw	r30, r28
    acb4:	e8 0d       	add	r30, r8
    acb6:	f1 1d       	adc	r31, r1
    acb8:	80 81       	ld	r24, Z
    acba:	80 33       	cpi	r24, 0x30	; 48
    acbc:	21 f4       	brne	.+8      	; 0xacc6 <vfprintf+0x302>
    acbe:	9a 2d       	mov	r25, r10
    acc0:	99 7e       	andi	r25, 0xE9	; 233
    acc2:	a9 2e       	mov	r10, r25
    acc4:	09 c0       	rjmp	.+18     	; 0xacd8 <vfprintf+0x314>
    acc6:	a2 fe       	sbrs	r10, 2
    acc8:	06 c0       	rjmp	.+12     	; 0xacd6 <vfprintf+0x312>
    acca:	b3 94       	inc	r11
    accc:	b3 94       	inc	r11
    acce:	04 c0       	rjmp	.+8      	; 0xacd8 <vfprintf+0x314>
    acd0:	8a 2d       	mov	r24, r10
    acd2:	86 78       	andi	r24, 0x86	; 134
    acd4:	09 f0       	breq	.+2      	; 0xacd8 <vfprintf+0x314>
    acd6:	b3 94       	inc	r11
    acd8:	a3 fc       	sbrc	r10, 3
    acda:	10 c0       	rjmp	.+32     	; 0xacfc <vfprintf+0x338>
    acdc:	a0 fe       	sbrs	r10, 0
    acde:	06 c0       	rjmp	.+12     	; 0xacec <vfprintf+0x328>
    ace0:	b2 14       	cp	r11, r2
    ace2:	80 f4       	brcc	.+32     	; 0xad04 <vfprintf+0x340>
    ace4:	28 0c       	add	r2, r8
    ace6:	92 2c       	mov	r9, r2
    ace8:	9b 18       	sub	r9, r11
    acea:	0d c0       	rjmp	.+26     	; 0xad06 <vfprintf+0x342>
    acec:	b2 14       	cp	r11, r2
    acee:	58 f4       	brcc	.+22     	; 0xad06 <vfprintf+0x342>
    acf0:	b6 01       	movw	r22, r12
    acf2:	80 e2       	ldi	r24, 0x20	; 32
    acf4:	90 e0       	ldi	r25, 0x00	; 0
    acf6:	b5 d1       	rcall	.+874    	; 0xb062 <fputc>
    acf8:	b3 94       	inc	r11
    acfa:	f8 cf       	rjmp	.-16     	; 0xacec <vfprintf+0x328>
    acfc:	b2 14       	cp	r11, r2
    acfe:	18 f4       	brcc	.+6      	; 0xad06 <vfprintf+0x342>
    ad00:	2b 18       	sub	r2, r11
    ad02:	02 c0       	rjmp	.+4      	; 0xad08 <vfprintf+0x344>
    ad04:	98 2c       	mov	r9, r8
    ad06:	21 2c       	mov	r2, r1
    ad08:	a4 fe       	sbrs	r10, 4
    ad0a:	0f c0       	rjmp	.+30     	; 0xad2a <vfprintf+0x366>
    ad0c:	b6 01       	movw	r22, r12
    ad0e:	80 e3       	ldi	r24, 0x30	; 48
    ad10:	90 e0       	ldi	r25, 0x00	; 0
    ad12:	a7 d1       	rcall	.+846    	; 0xb062 <fputc>
    ad14:	a2 fe       	sbrs	r10, 2
    ad16:	16 c0       	rjmp	.+44     	; 0xad44 <vfprintf+0x380>
    ad18:	a1 fc       	sbrc	r10, 1
    ad1a:	03 c0       	rjmp	.+6      	; 0xad22 <vfprintf+0x35e>
    ad1c:	88 e7       	ldi	r24, 0x78	; 120
    ad1e:	90 e0       	ldi	r25, 0x00	; 0
    ad20:	02 c0       	rjmp	.+4      	; 0xad26 <vfprintf+0x362>
    ad22:	88 e5       	ldi	r24, 0x58	; 88
    ad24:	90 e0       	ldi	r25, 0x00	; 0
    ad26:	b6 01       	movw	r22, r12
    ad28:	0c c0       	rjmp	.+24     	; 0xad42 <vfprintf+0x37e>
    ad2a:	8a 2d       	mov	r24, r10
    ad2c:	86 78       	andi	r24, 0x86	; 134
    ad2e:	51 f0       	breq	.+20     	; 0xad44 <vfprintf+0x380>
    ad30:	a1 fe       	sbrs	r10, 1
    ad32:	02 c0       	rjmp	.+4      	; 0xad38 <vfprintf+0x374>
    ad34:	8b e2       	ldi	r24, 0x2B	; 43
    ad36:	01 c0       	rjmp	.+2      	; 0xad3a <vfprintf+0x376>
    ad38:	80 e2       	ldi	r24, 0x20	; 32
    ad3a:	a7 fc       	sbrc	r10, 7
    ad3c:	8d e2       	ldi	r24, 0x2D	; 45
    ad3e:	b6 01       	movw	r22, r12
    ad40:	90 e0       	ldi	r25, 0x00	; 0
    ad42:	8f d1       	rcall	.+798    	; 0xb062 <fputc>
    ad44:	89 14       	cp	r8, r9
    ad46:	30 f4       	brcc	.+12     	; 0xad54 <vfprintf+0x390>
    ad48:	b6 01       	movw	r22, r12
    ad4a:	80 e3       	ldi	r24, 0x30	; 48
    ad4c:	90 e0       	ldi	r25, 0x00	; 0
    ad4e:	89 d1       	rcall	.+786    	; 0xb062 <fputc>
    ad50:	9a 94       	dec	r9
    ad52:	f8 cf       	rjmp	.-16     	; 0xad44 <vfprintf+0x380>
    ad54:	8a 94       	dec	r8
    ad56:	f3 01       	movw	r30, r6
    ad58:	e8 0d       	add	r30, r8
    ad5a:	f1 1d       	adc	r31, r1
    ad5c:	80 81       	ld	r24, Z
    ad5e:	b6 01       	movw	r22, r12
    ad60:	90 e0       	ldi	r25, 0x00	; 0
    ad62:	7f d1       	rcall	.+766    	; 0xb062 <fputc>
    ad64:	81 10       	cpse	r8, r1
    ad66:	f6 cf       	rjmp	.-20     	; 0xad54 <vfprintf+0x390>
    ad68:	22 20       	and	r2, r2
    ad6a:	09 f4       	brne	.+2      	; 0xad6e <vfprintf+0x3aa>
    ad6c:	4e ce       	rjmp	.-868    	; 0xaa0a <vfprintf+0x46>
    ad6e:	b6 01       	movw	r22, r12
    ad70:	80 e2       	ldi	r24, 0x20	; 32
    ad72:	90 e0       	ldi	r25, 0x00	; 0
    ad74:	76 d1       	rcall	.+748    	; 0xb062 <fputc>
    ad76:	2a 94       	dec	r2
    ad78:	f7 cf       	rjmp	.-18     	; 0xad68 <vfprintf+0x3a4>
    ad7a:	f6 01       	movw	r30, r12
    ad7c:	86 81       	ldd	r24, Z+6	; 0x06
    ad7e:	97 81       	ldd	r25, Z+7	; 0x07
    ad80:	02 c0       	rjmp	.+4      	; 0xad86 <vfprintf+0x3c2>
    ad82:	8f ef       	ldi	r24, 0xFF	; 255
    ad84:	9f ef       	ldi	r25, 0xFF	; 255
    ad86:	2b 96       	adiw	r28, 0x0b	; 11
    ad88:	cd bf       	out	0x3d, r28	; 61
    ad8a:	de bf       	out	0x3e, r29	; 62
    ad8c:	df 91       	pop	r29
    ad8e:	cf 91       	pop	r28
    ad90:	1f 91       	pop	r17
    ad92:	0f 91       	pop	r16
    ad94:	ff 90       	pop	r15
    ad96:	ef 90       	pop	r14
    ad98:	df 90       	pop	r13
    ad9a:	cf 90       	pop	r12
    ad9c:	bf 90       	pop	r11
    ad9e:	af 90       	pop	r10
    ada0:	9f 90       	pop	r9
    ada2:	8f 90       	pop	r8
    ada4:	7f 90       	pop	r7
    ada6:	6f 90       	pop	r6
    ada8:	5f 90       	pop	r5
    adaa:	4f 90       	pop	r4
    adac:	3f 90       	pop	r3
    adae:	2f 90       	pop	r2
    adb0:	08 95       	ret

0000adb2 <calloc>:
    adb2:	0f 93       	push	r16
    adb4:	1f 93       	push	r17
    adb6:	cf 93       	push	r28
    adb8:	df 93       	push	r29
    adba:	86 9f       	mul	r24, r22
    adbc:	80 01       	movw	r16, r0
    adbe:	87 9f       	mul	r24, r23
    adc0:	10 0d       	add	r17, r0
    adc2:	96 9f       	mul	r25, r22
    adc4:	10 0d       	add	r17, r0
    adc6:	11 24       	eor	r1, r1
    adc8:	c8 01       	movw	r24, r16
    adca:	0d d0       	rcall	.+26     	; 0xade6 <malloc>
    adcc:	ec 01       	movw	r28, r24
    adce:	00 97       	sbiw	r24, 0x00	; 0
    add0:	21 f0       	breq	.+8      	; 0xadda <calloc+0x28>
    add2:	a8 01       	movw	r20, r16
    add4:	60 e0       	ldi	r22, 0x00	; 0
    add6:	70 e0       	ldi	r23, 0x00	; 0
    add8:	32 d1       	rcall	.+612    	; 0xb03e <memset>
    adda:	ce 01       	movw	r24, r28
    addc:	df 91       	pop	r29
    adde:	cf 91       	pop	r28
    ade0:	1f 91       	pop	r17
    ade2:	0f 91       	pop	r16
    ade4:	08 95       	ret

0000ade6 <malloc>:
    ade6:	0f 93       	push	r16
    ade8:	1f 93       	push	r17
    adea:	cf 93       	push	r28
    adec:	df 93       	push	r29
    adee:	82 30       	cpi	r24, 0x02	; 2
    adf0:	91 05       	cpc	r25, r1
    adf2:	10 f4       	brcc	.+4      	; 0xadf8 <malloc+0x12>
    adf4:	82 e0       	ldi	r24, 0x02	; 2
    adf6:	90 e0       	ldi	r25, 0x00	; 0
    adf8:	e0 91 eb 2a 	lds	r30, 0x2AEB	; 0x802aeb <__flp>
    adfc:	f0 91 ec 2a 	lds	r31, 0x2AEC	; 0x802aec <__flp+0x1>
    ae00:	20 e0       	ldi	r18, 0x00	; 0
    ae02:	30 e0       	ldi	r19, 0x00	; 0
    ae04:	a0 e0       	ldi	r26, 0x00	; 0
    ae06:	b0 e0       	ldi	r27, 0x00	; 0
    ae08:	30 97       	sbiw	r30, 0x00	; 0
    ae0a:	19 f1       	breq	.+70     	; 0xae52 <malloc+0x6c>
    ae0c:	40 81       	ld	r20, Z
    ae0e:	51 81       	ldd	r21, Z+1	; 0x01
    ae10:	02 81       	ldd	r16, Z+2	; 0x02
    ae12:	13 81       	ldd	r17, Z+3	; 0x03
    ae14:	48 17       	cp	r20, r24
    ae16:	59 07       	cpc	r21, r25
    ae18:	c8 f0       	brcs	.+50     	; 0xae4c <malloc+0x66>
    ae1a:	84 17       	cp	r24, r20
    ae1c:	95 07       	cpc	r25, r21
    ae1e:	69 f4       	brne	.+26     	; 0xae3a <malloc+0x54>
    ae20:	10 97       	sbiw	r26, 0x00	; 0
    ae22:	31 f0       	breq	.+12     	; 0xae30 <malloc+0x4a>
    ae24:	12 96       	adiw	r26, 0x02	; 2
    ae26:	0c 93       	st	X, r16
    ae28:	12 97       	sbiw	r26, 0x02	; 2
    ae2a:	13 96       	adiw	r26, 0x03	; 3
    ae2c:	1c 93       	st	X, r17
    ae2e:	27 c0       	rjmp	.+78     	; 0xae7e <malloc+0x98>
    ae30:	00 93 eb 2a 	sts	0x2AEB, r16	; 0x802aeb <__flp>
    ae34:	10 93 ec 2a 	sts	0x2AEC, r17	; 0x802aec <__flp+0x1>
    ae38:	22 c0       	rjmp	.+68     	; 0xae7e <malloc+0x98>
    ae3a:	21 15       	cp	r18, r1
    ae3c:	31 05       	cpc	r19, r1
    ae3e:	19 f0       	breq	.+6      	; 0xae46 <malloc+0x60>
    ae40:	42 17       	cp	r20, r18
    ae42:	53 07       	cpc	r21, r19
    ae44:	18 f4       	brcc	.+6      	; 0xae4c <malloc+0x66>
    ae46:	9a 01       	movw	r18, r20
    ae48:	bd 01       	movw	r22, r26
    ae4a:	ef 01       	movw	r28, r30
    ae4c:	df 01       	movw	r26, r30
    ae4e:	f8 01       	movw	r30, r16
    ae50:	db cf       	rjmp	.-74     	; 0xae08 <malloc+0x22>
    ae52:	21 15       	cp	r18, r1
    ae54:	31 05       	cpc	r19, r1
    ae56:	f9 f0       	breq	.+62     	; 0xae96 <malloc+0xb0>
    ae58:	28 1b       	sub	r18, r24
    ae5a:	39 0b       	sbc	r19, r25
    ae5c:	24 30       	cpi	r18, 0x04	; 4
    ae5e:	31 05       	cpc	r19, r1
    ae60:	80 f4       	brcc	.+32     	; 0xae82 <malloc+0x9c>
    ae62:	8a 81       	ldd	r24, Y+2	; 0x02
    ae64:	9b 81       	ldd	r25, Y+3	; 0x03
    ae66:	61 15       	cp	r22, r1
    ae68:	71 05       	cpc	r23, r1
    ae6a:	21 f0       	breq	.+8      	; 0xae74 <malloc+0x8e>
    ae6c:	fb 01       	movw	r30, r22
    ae6e:	82 83       	std	Z+2, r24	; 0x02
    ae70:	93 83       	std	Z+3, r25	; 0x03
    ae72:	04 c0       	rjmp	.+8      	; 0xae7c <malloc+0x96>
    ae74:	80 93 eb 2a 	sts	0x2AEB, r24	; 0x802aeb <__flp>
    ae78:	90 93 ec 2a 	sts	0x2AEC, r25	; 0x802aec <__flp+0x1>
    ae7c:	fe 01       	movw	r30, r28
    ae7e:	32 96       	adiw	r30, 0x02	; 2
    ae80:	44 c0       	rjmp	.+136    	; 0xaf0a <malloc+0x124>
    ae82:	fe 01       	movw	r30, r28
    ae84:	e2 0f       	add	r30, r18
    ae86:	f3 1f       	adc	r31, r19
    ae88:	81 93       	st	Z+, r24
    ae8a:	91 93       	st	Z+, r25
    ae8c:	22 50       	subi	r18, 0x02	; 2
    ae8e:	31 09       	sbc	r19, r1
    ae90:	28 83       	st	Y, r18
    ae92:	39 83       	std	Y+1, r19	; 0x01
    ae94:	3a c0       	rjmp	.+116    	; 0xaf0a <malloc+0x124>
    ae96:	20 91 e9 2a 	lds	r18, 0x2AE9	; 0x802ae9 <__brkval>
    ae9a:	30 91 ea 2a 	lds	r19, 0x2AEA	; 0x802aea <__brkval+0x1>
    ae9e:	23 2b       	or	r18, r19
    aea0:	41 f4       	brne	.+16     	; 0xaeb2 <malloc+0xcc>
    aea2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    aea6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    aeaa:	20 93 e9 2a 	sts	0x2AE9, r18	; 0x802ae9 <__brkval>
    aeae:	30 93 ea 2a 	sts	0x2AEA, r19	; 0x802aea <__brkval+0x1>
    aeb2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    aeb6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    aeba:	21 15       	cp	r18, r1
    aebc:	31 05       	cpc	r19, r1
    aebe:	41 f4       	brne	.+16     	; 0xaed0 <malloc+0xea>
    aec0:	2d b7       	in	r18, 0x3d	; 61
    aec2:	3e b7       	in	r19, 0x3e	; 62
    aec4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    aec8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    aecc:	24 1b       	sub	r18, r20
    aece:	35 0b       	sbc	r19, r21
    aed0:	e0 91 e9 2a 	lds	r30, 0x2AE9	; 0x802ae9 <__brkval>
    aed4:	f0 91 ea 2a 	lds	r31, 0x2AEA	; 0x802aea <__brkval+0x1>
    aed8:	e2 17       	cp	r30, r18
    aeda:	f3 07       	cpc	r31, r19
    aedc:	a0 f4       	brcc	.+40     	; 0xaf06 <malloc+0x120>
    aede:	2e 1b       	sub	r18, r30
    aee0:	3f 0b       	sbc	r19, r31
    aee2:	28 17       	cp	r18, r24
    aee4:	39 07       	cpc	r19, r25
    aee6:	78 f0       	brcs	.+30     	; 0xaf06 <malloc+0x120>
    aee8:	ac 01       	movw	r20, r24
    aeea:	4e 5f       	subi	r20, 0xFE	; 254
    aeec:	5f 4f       	sbci	r21, 0xFF	; 255
    aeee:	24 17       	cp	r18, r20
    aef0:	35 07       	cpc	r19, r21
    aef2:	48 f0       	brcs	.+18     	; 0xaf06 <malloc+0x120>
    aef4:	4e 0f       	add	r20, r30
    aef6:	5f 1f       	adc	r21, r31
    aef8:	40 93 e9 2a 	sts	0x2AE9, r20	; 0x802ae9 <__brkval>
    aefc:	50 93 ea 2a 	sts	0x2AEA, r21	; 0x802aea <__brkval+0x1>
    af00:	81 93       	st	Z+, r24
    af02:	91 93       	st	Z+, r25
    af04:	02 c0       	rjmp	.+4      	; 0xaf0a <malloc+0x124>
    af06:	e0 e0       	ldi	r30, 0x00	; 0
    af08:	f0 e0       	ldi	r31, 0x00	; 0
    af0a:	cf 01       	movw	r24, r30
    af0c:	df 91       	pop	r29
    af0e:	cf 91       	pop	r28
    af10:	1f 91       	pop	r17
    af12:	0f 91       	pop	r16
    af14:	08 95       	ret

0000af16 <free>:
    af16:	cf 93       	push	r28
    af18:	df 93       	push	r29
    af1a:	00 97       	sbiw	r24, 0x00	; 0
    af1c:	09 f4       	brne	.+2      	; 0xaf20 <free+0xa>
    af1e:	81 c0       	rjmp	.+258    	; 0xb022 <free+0x10c>
    af20:	fc 01       	movw	r30, r24
    af22:	32 97       	sbiw	r30, 0x02	; 2
    af24:	12 82       	std	Z+2, r1	; 0x02
    af26:	13 82       	std	Z+3, r1	; 0x03
    af28:	a0 91 eb 2a 	lds	r26, 0x2AEB	; 0x802aeb <__flp>
    af2c:	b0 91 ec 2a 	lds	r27, 0x2AEC	; 0x802aec <__flp+0x1>
    af30:	10 97       	sbiw	r26, 0x00	; 0
    af32:	81 f4       	brne	.+32     	; 0xaf54 <free+0x3e>
    af34:	20 81       	ld	r18, Z
    af36:	31 81       	ldd	r19, Z+1	; 0x01
    af38:	82 0f       	add	r24, r18
    af3a:	93 1f       	adc	r25, r19
    af3c:	20 91 e9 2a 	lds	r18, 0x2AE9	; 0x802ae9 <__brkval>
    af40:	30 91 ea 2a 	lds	r19, 0x2AEA	; 0x802aea <__brkval+0x1>
    af44:	28 17       	cp	r18, r24
    af46:	39 07       	cpc	r19, r25
    af48:	51 f5       	brne	.+84     	; 0xaf9e <free+0x88>
    af4a:	e0 93 e9 2a 	sts	0x2AE9, r30	; 0x802ae9 <__brkval>
    af4e:	f0 93 ea 2a 	sts	0x2AEA, r31	; 0x802aea <__brkval+0x1>
    af52:	67 c0       	rjmp	.+206    	; 0xb022 <free+0x10c>
    af54:	ed 01       	movw	r28, r26
    af56:	20 e0       	ldi	r18, 0x00	; 0
    af58:	30 e0       	ldi	r19, 0x00	; 0
    af5a:	ce 17       	cp	r28, r30
    af5c:	df 07       	cpc	r29, r31
    af5e:	40 f4       	brcc	.+16     	; 0xaf70 <free+0x5a>
    af60:	4a 81       	ldd	r20, Y+2	; 0x02
    af62:	5b 81       	ldd	r21, Y+3	; 0x03
    af64:	9e 01       	movw	r18, r28
    af66:	41 15       	cp	r20, r1
    af68:	51 05       	cpc	r21, r1
    af6a:	f1 f0       	breq	.+60     	; 0xafa8 <free+0x92>
    af6c:	ea 01       	movw	r28, r20
    af6e:	f5 cf       	rjmp	.-22     	; 0xaf5a <free+0x44>
    af70:	c2 83       	std	Z+2, r28	; 0x02
    af72:	d3 83       	std	Z+3, r29	; 0x03
    af74:	40 81       	ld	r20, Z
    af76:	51 81       	ldd	r21, Z+1	; 0x01
    af78:	84 0f       	add	r24, r20
    af7a:	95 1f       	adc	r25, r21
    af7c:	c8 17       	cp	r28, r24
    af7e:	d9 07       	cpc	r29, r25
    af80:	59 f4       	brne	.+22     	; 0xaf98 <free+0x82>
    af82:	88 81       	ld	r24, Y
    af84:	99 81       	ldd	r25, Y+1	; 0x01
    af86:	84 0f       	add	r24, r20
    af88:	95 1f       	adc	r25, r21
    af8a:	02 96       	adiw	r24, 0x02	; 2
    af8c:	80 83       	st	Z, r24
    af8e:	91 83       	std	Z+1, r25	; 0x01
    af90:	8a 81       	ldd	r24, Y+2	; 0x02
    af92:	9b 81       	ldd	r25, Y+3	; 0x03
    af94:	82 83       	std	Z+2, r24	; 0x02
    af96:	93 83       	std	Z+3, r25	; 0x03
    af98:	21 15       	cp	r18, r1
    af9a:	31 05       	cpc	r19, r1
    af9c:	29 f4       	brne	.+10     	; 0xafa8 <free+0x92>
    af9e:	e0 93 eb 2a 	sts	0x2AEB, r30	; 0x802aeb <__flp>
    afa2:	f0 93 ec 2a 	sts	0x2AEC, r31	; 0x802aec <__flp+0x1>
    afa6:	3d c0       	rjmp	.+122    	; 0xb022 <free+0x10c>
    afa8:	e9 01       	movw	r28, r18
    afaa:	ea 83       	std	Y+2, r30	; 0x02
    afac:	fb 83       	std	Y+3, r31	; 0x03
    afae:	49 91       	ld	r20, Y+
    afb0:	59 91       	ld	r21, Y+
    afb2:	c4 0f       	add	r28, r20
    afb4:	d5 1f       	adc	r29, r21
    afb6:	ec 17       	cp	r30, r28
    afb8:	fd 07       	cpc	r31, r29
    afba:	61 f4       	brne	.+24     	; 0xafd4 <free+0xbe>
    afbc:	80 81       	ld	r24, Z
    afbe:	91 81       	ldd	r25, Z+1	; 0x01
    afc0:	84 0f       	add	r24, r20
    afc2:	95 1f       	adc	r25, r21
    afc4:	02 96       	adiw	r24, 0x02	; 2
    afc6:	e9 01       	movw	r28, r18
    afc8:	88 83       	st	Y, r24
    afca:	99 83       	std	Y+1, r25	; 0x01
    afcc:	82 81       	ldd	r24, Z+2	; 0x02
    afce:	93 81       	ldd	r25, Z+3	; 0x03
    afd0:	8a 83       	std	Y+2, r24	; 0x02
    afd2:	9b 83       	std	Y+3, r25	; 0x03
    afd4:	e0 e0       	ldi	r30, 0x00	; 0
    afd6:	f0 e0       	ldi	r31, 0x00	; 0
    afd8:	12 96       	adiw	r26, 0x02	; 2
    afda:	8d 91       	ld	r24, X+
    afdc:	9c 91       	ld	r25, X
    afde:	13 97       	sbiw	r26, 0x03	; 3
    afe0:	00 97       	sbiw	r24, 0x00	; 0
    afe2:	19 f0       	breq	.+6      	; 0xafea <free+0xd4>
    afe4:	fd 01       	movw	r30, r26
    afe6:	dc 01       	movw	r26, r24
    afe8:	f7 cf       	rjmp	.-18     	; 0xafd8 <free+0xc2>
    afea:	8d 91       	ld	r24, X+
    afec:	9c 91       	ld	r25, X
    afee:	11 97       	sbiw	r26, 0x01	; 1
    aff0:	9d 01       	movw	r18, r26
    aff2:	2e 5f       	subi	r18, 0xFE	; 254
    aff4:	3f 4f       	sbci	r19, 0xFF	; 255
    aff6:	82 0f       	add	r24, r18
    aff8:	93 1f       	adc	r25, r19
    affa:	20 91 e9 2a 	lds	r18, 0x2AE9	; 0x802ae9 <__brkval>
    affe:	30 91 ea 2a 	lds	r19, 0x2AEA	; 0x802aea <__brkval+0x1>
    b002:	28 17       	cp	r18, r24
    b004:	39 07       	cpc	r19, r25
    b006:	69 f4       	brne	.+26     	; 0xb022 <free+0x10c>
    b008:	30 97       	sbiw	r30, 0x00	; 0
    b00a:	29 f4       	brne	.+10     	; 0xb016 <free+0x100>
    b00c:	10 92 eb 2a 	sts	0x2AEB, r1	; 0x802aeb <__flp>
    b010:	10 92 ec 2a 	sts	0x2AEC, r1	; 0x802aec <__flp+0x1>
    b014:	02 c0       	rjmp	.+4      	; 0xb01a <free+0x104>
    b016:	12 82       	std	Z+2, r1	; 0x02
    b018:	13 82       	std	Z+3, r1	; 0x03
    b01a:	a0 93 e9 2a 	sts	0x2AE9, r26	; 0x802ae9 <__brkval>
    b01e:	b0 93 ea 2a 	sts	0x2AEA, r27	; 0x802aea <__brkval+0x1>
    b022:	df 91       	pop	r29
    b024:	cf 91       	pop	r28
    b026:	08 95       	ret

0000b028 <strnlen_P>:
    b028:	fc 01       	movw	r30, r24
    b02a:	05 90       	lpm	r0, Z+
    b02c:	61 50       	subi	r22, 0x01	; 1
    b02e:	70 40       	sbci	r23, 0x00	; 0
    b030:	01 10       	cpse	r0, r1
    b032:	d8 f7       	brcc	.-10     	; 0xb02a <strnlen_P+0x2>
    b034:	80 95       	com	r24
    b036:	90 95       	com	r25
    b038:	8e 0f       	add	r24, r30
    b03a:	9f 1f       	adc	r25, r31
    b03c:	08 95       	ret

0000b03e <memset>:
    b03e:	dc 01       	movw	r26, r24
    b040:	01 c0       	rjmp	.+2      	; 0xb044 <memset+0x6>
    b042:	6d 93       	st	X+, r22
    b044:	41 50       	subi	r20, 0x01	; 1
    b046:	50 40       	sbci	r21, 0x00	; 0
    b048:	e0 f7       	brcc	.-8      	; 0xb042 <memset+0x4>
    b04a:	08 95       	ret

0000b04c <strnlen>:
    b04c:	fc 01       	movw	r30, r24
    b04e:	61 50       	subi	r22, 0x01	; 1
    b050:	70 40       	sbci	r23, 0x00	; 0
    b052:	01 90       	ld	r0, Z+
    b054:	01 10       	cpse	r0, r1
    b056:	d8 f7       	brcc	.-10     	; 0xb04e <strnlen+0x2>
    b058:	80 95       	com	r24
    b05a:	90 95       	com	r25
    b05c:	8e 0f       	add	r24, r30
    b05e:	9f 1f       	adc	r25, r31
    b060:	08 95       	ret

0000b062 <fputc>:
    b062:	0f 93       	push	r16
    b064:	1f 93       	push	r17
    b066:	cf 93       	push	r28
    b068:	df 93       	push	r29
    b06a:	fb 01       	movw	r30, r22
    b06c:	23 81       	ldd	r18, Z+3	; 0x03
    b06e:	21 fd       	sbrc	r18, 1
    b070:	03 c0       	rjmp	.+6      	; 0xb078 <fputc+0x16>
    b072:	8f ef       	ldi	r24, 0xFF	; 255
    b074:	9f ef       	ldi	r25, 0xFF	; 255
    b076:	2c c0       	rjmp	.+88     	; 0xb0d0 <fputc+0x6e>
    b078:	22 ff       	sbrs	r18, 2
    b07a:	16 c0       	rjmp	.+44     	; 0xb0a8 <fputc+0x46>
    b07c:	46 81       	ldd	r20, Z+6	; 0x06
    b07e:	57 81       	ldd	r21, Z+7	; 0x07
    b080:	24 81       	ldd	r18, Z+4	; 0x04
    b082:	35 81       	ldd	r19, Z+5	; 0x05
    b084:	42 17       	cp	r20, r18
    b086:	53 07       	cpc	r21, r19
    b088:	44 f4       	brge	.+16     	; 0xb09a <fputc+0x38>
    b08a:	a0 81       	ld	r26, Z
    b08c:	b1 81       	ldd	r27, Z+1	; 0x01
    b08e:	9d 01       	movw	r18, r26
    b090:	2f 5f       	subi	r18, 0xFF	; 255
    b092:	3f 4f       	sbci	r19, 0xFF	; 255
    b094:	20 83       	st	Z, r18
    b096:	31 83       	std	Z+1, r19	; 0x01
    b098:	8c 93       	st	X, r24
    b09a:	26 81       	ldd	r18, Z+6	; 0x06
    b09c:	37 81       	ldd	r19, Z+7	; 0x07
    b09e:	2f 5f       	subi	r18, 0xFF	; 255
    b0a0:	3f 4f       	sbci	r19, 0xFF	; 255
    b0a2:	26 83       	std	Z+6, r18	; 0x06
    b0a4:	37 83       	std	Z+7, r19	; 0x07
    b0a6:	14 c0       	rjmp	.+40     	; 0xb0d0 <fputc+0x6e>
    b0a8:	8b 01       	movw	r16, r22
    b0aa:	ec 01       	movw	r28, r24
    b0ac:	fb 01       	movw	r30, r22
    b0ae:	00 84       	ldd	r0, Z+8	; 0x08
    b0b0:	f1 85       	ldd	r31, Z+9	; 0x09
    b0b2:	e0 2d       	mov	r30, r0
    b0b4:	19 95       	eicall
    b0b6:	89 2b       	or	r24, r25
    b0b8:	e1 f6       	brne	.-72     	; 0xb072 <fputc+0x10>
    b0ba:	d8 01       	movw	r26, r16
    b0bc:	16 96       	adiw	r26, 0x06	; 6
    b0be:	8d 91       	ld	r24, X+
    b0c0:	9c 91       	ld	r25, X
    b0c2:	17 97       	sbiw	r26, 0x07	; 7
    b0c4:	01 96       	adiw	r24, 0x01	; 1
    b0c6:	16 96       	adiw	r26, 0x06	; 6
    b0c8:	8d 93       	st	X+, r24
    b0ca:	9c 93       	st	X, r25
    b0cc:	17 97       	sbiw	r26, 0x07	; 7
    b0ce:	ce 01       	movw	r24, r28
    b0d0:	df 91       	pop	r29
    b0d2:	cf 91       	pop	r28
    b0d4:	1f 91       	pop	r17
    b0d6:	0f 91       	pop	r16
    b0d8:	08 95       	ret

0000b0da <__ultoa_invert>:
    b0da:	fa 01       	movw	r30, r20
    b0dc:	aa 27       	eor	r26, r26
    b0de:	28 30       	cpi	r18, 0x08	; 8
    b0e0:	51 f1       	breq	.+84     	; 0xb136 <__ultoa_invert+0x5c>
    b0e2:	20 31       	cpi	r18, 0x10	; 16
    b0e4:	81 f1       	breq	.+96     	; 0xb146 <__ultoa_invert+0x6c>
    b0e6:	e8 94       	clt
    b0e8:	6f 93       	push	r22
    b0ea:	6e 7f       	andi	r22, 0xFE	; 254
    b0ec:	6e 5f       	subi	r22, 0xFE	; 254
    b0ee:	7f 4f       	sbci	r23, 0xFF	; 255
    b0f0:	8f 4f       	sbci	r24, 0xFF	; 255
    b0f2:	9f 4f       	sbci	r25, 0xFF	; 255
    b0f4:	af 4f       	sbci	r26, 0xFF	; 255
    b0f6:	b1 e0       	ldi	r27, 0x01	; 1
    b0f8:	3e d0       	rcall	.+124    	; 0xb176 <__ultoa_invert+0x9c>
    b0fa:	b4 e0       	ldi	r27, 0x04	; 4
    b0fc:	3c d0       	rcall	.+120    	; 0xb176 <__ultoa_invert+0x9c>
    b0fe:	67 0f       	add	r22, r23
    b100:	78 1f       	adc	r23, r24
    b102:	89 1f       	adc	r24, r25
    b104:	9a 1f       	adc	r25, r26
    b106:	a1 1d       	adc	r26, r1
    b108:	68 0f       	add	r22, r24
    b10a:	79 1f       	adc	r23, r25
    b10c:	8a 1f       	adc	r24, r26
    b10e:	91 1d       	adc	r25, r1
    b110:	a1 1d       	adc	r26, r1
    b112:	6a 0f       	add	r22, r26
    b114:	71 1d       	adc	r23, r1
    b116:	81 1d       	adc	r24, r1
    b118:	91 1d       	adc	r25, r1
    b11a:	a1 1d       	adc	r26, r1
    b11c:	20 d0       	rcall	.+64     	; 0xb15e <__ultoa_invert+0x84>
    b11e:	09 f4       	brne	.+2      	; 0xb122 <__ultoa_invert+0x48>
    b120:	68 94       	set
    b122:	3f 91       	pop	r19
    b124:	2a e0       	ldi	r18, 0x0A	; 10
    b126:	26 9f       	mul	r18, r22
    b128:	11 24       	eor	r1, r1
    b12a:	30 19       	sub	r19, r0
    b12c:	30 5d       	subi	r19, 0xD0	; 208
    b12e:	31 93       	st	Z+, r19
    b130:	de f6       	brtc	.-74     	; 0xb0e8 <__ultoa_invert+0xe>
    b132:	cf 01       	movw	r24, r30
    b134:	08 95       	ret
    b136:	46 2f       	mov	r20, r22
    b138:	47 70       	andi	r20, 0x07	; 7
    b13a:	40 5d       	subi	r20, 0xD0	; 208
    b13c:	41 93       	st	Z+, r20
    b13e:	b3 e0       	ldi	r27, 0x03	; 3
    b140:	0f d0       	rcall	.+30     	; 0xb160 <__ultoa_invert+0x86>
    b142:	c9 f7       	brne	.-14     	; 0xb136 <__ultoa_invert+0x5c>
    b144:	f6 cf       	rjmp	.-20     	; 0xb132 <__ultoa_invert+0x58>
    b146:	46 2f       	mov	r20, r22
    b148:	4f 70       	andi	r20, 0x0F	; 15
    b14a:	40 5d       	subi	r20, 0xD0	; 208
    b14c:	4a 33       	cpi	r20, 0x3A	; 58
    b14e:	18 f0       	brcs	.+6      	; 0xb156 <__ultoa_invert+0x7c>
    b150:	49 5d       	subi	r20, 0xD9	; 217
    b152:	31 fd       	sbrc	r19, 1
    b154:	40 52       	subi	r20, 0x20	; 32
    b156:	41 93       	st	Z+, r20
    b158:	02 d0       	rcall	.+4      	; 0xb15e <__ultoa_invert+0x84>
    b15a:	a9 f7       	brne	.-22     	; 0xb146 <__ultoa_invert+0x6c>
    b15c:	ea cf       	rjmp	.-44     	; 0xb132 <__ultoa_invert+0x58>
    b15e:	b4 e0       	ldi	r27, 0x04	; 4
    b160:	a6 95       	lsr	r26
    b162:	97 95       	ror	r25
    b164:	87 95       	ror	r24
    b166:	77 95       	ror	r23
    b168:	67 95       	ror	r22
    b16a:	ba 95       	dec	r27
    b16c:	c9 f7       	brne	.-14     	; 0xb160 <__ultoa_invert+0x86>
    b16e:	00 97       	sbiw	r24, 0x00	; 0
    b170:	61 05       	cpc	r22, r1
    b172:	71 05       	cpc	r23, r1
    b174:	08 95       	ret
    b176:	9b 01       	movw	r18, r22
    b178:	ac 01       	movw	r20, r24
    b17a:	0a 2e       	mov	r0, r26
    b17c:	06 94       	lsr	r0
    b17e:	57 95       	ror	r21
    b180:	47 95       	ror	r20
    b182:	37 95       	ror	r19
    b184:	27 95       	ror	r18
    b186:	ba 95       	dec	r27
    b188:	c9 f7       	brne	.-14     	; 0xb17c <__ultoa_invert+0xa2>
    b18a:	62 0f       	add	r22, r18
    b18c:	73 1f       	adc	r23, r19
    b18e:	84 1f       	adc	r24, r20
    b190:	95 1f       	adc	r25, r21
    b192:	a0 1d       	adc	r26, r0
    b194:	08 95       	ret

0000b196 <_exit>:
    b196:	f8 94       	cli

0000b198 <__stop_program>:
    b198:	ff cf       	rjmp	.-2      	; 0xb198 <__stop_program>
