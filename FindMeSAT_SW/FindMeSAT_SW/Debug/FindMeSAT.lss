
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008f80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003d4  00802000  00008f80  00009014  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004d1  008023d4  008023d4  000093e8  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000093e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00009444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009c8  00000000  00000000  00009488  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001a33e  00000000  00000000  00009e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000069d1  00000000  00000000  0002418e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000e8cd  00000000  00000000  0002ab5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002890  00000000  00000000  0003942c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003f2bb  00000000  00000000  0003bcbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a10c  00000000  00000000  0007af77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009a8  00000000  00000000  00085088  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000e434  00000000  00000000  00085a30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__ctors_end>
       4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
       8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
       c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      10:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      14:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      18:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_6>
      1c:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__vector_7>
      20:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__vector_8>
      24:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__vector_9>
      28:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      2c:	0c 94 06 13 	jmp	0x260c	; 0x260c <__vector_11>
      30:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      34:	0c 94 1d 26 	jmp	0x4c3a	; 0x4c3a <__vector_13>
      38:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__vector_14>
      3c:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__vector_15>
      40:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__vector_16>
      44:	0c 94 fc 1e 	jmp	0x3df8	; 0x3df8 <__vector_17>
      48:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__vector_18>
      4c:	0c 94 56 1f 	jmp	0x3eac	; 0x3eac <__vector_19>
      50:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__vector_20>
      54:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__vector_21>
      58:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__vector_22>
      5c:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <__vector_23>
      60:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      64:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      68:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      6c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      70:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      74:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      78:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      7c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      80:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      84:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      88:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      8c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      90:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      94:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      98:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      9c:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__vector_39>
      a0:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__vector_40>
      a4:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <__vector_41>
      a8:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <__vector_42>
      ac:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b8:	0c 94 44 26 	jmp	0x4c88	; 0x4c88 <__vector_46>
      bc:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__vector_47>
      c0:	0c 94 26 22 	jmp	0x444c	; 0x444c <__vector_48>
      c4:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <__vector_49>
      c8:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__vector_50>
      cc:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__vector_51>
      d0:	0c 94 da 22 	jmp	0x45b4	; 0x45b4 <__vector_52>
      d4:	0c 94 07 23 	jmp	0x460e	; 0x460e <__vector_53>
      d8:	0c 94 34 23 	jmp	0x4668	; 0x4668 <__vector_54>
      dc:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__vector_55>
      e0:	0c 94 8e 23 	jmp	0x471c	; 0x471c <__vector_56>
      e4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      e8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      ec:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      fc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     100:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     104:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     108:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     10c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     110:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     114:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     118:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     11c:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__vector_71>
     120:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <__vector_72>
     124:	0c 94 3a 1b 	jmp	0x3674	; 0x3674 <__vector_73>
     128:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__vector_74>
     12c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     130:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     134:	0c 94 37 20 	jmp	0x406e	; 0x406e <__vector_77>
     138:	0c 94 64 20 	jmp	0x40c8	; 0x40c8 <__vector_78>
     13c:	0c 94 91 20 	jmp	0x4122	; 0x4122 <__vector_79>
     140:	0c 94 be 20 	jmp	0x417c	; 0x417c <__vector_80>
     144:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__vector_81>
     148:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__vector_82>
     14c:	0c 94 45 21 	jmp	0x428a	; 0x428a <__vector_83>
     150:	0c 94 72 21 	jmp	0x42e4	; 0x42e4 <__vector_84>
     154:	0c 94 9f 21 	jmp	0x433e	; 0x433e <__vector_85>
     158:	0c 94 cc 21 	jmp	0x4398	; 0x4398 <__vector_86>
     15c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     160:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     164:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     168:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     16c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     170:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     174:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     178:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     17c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     180:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     184:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     188:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     18c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     190:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     194:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     198:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     19c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1ac:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1b0:	0c 94 bb 23 	jmp	0x4776	; 0x4776 <__vector_108>
     1b4:	0c 94 e8 23 	jmp	0x47d0	; 0x47d0 <__vector_109>
     1b8:	0c 94 15 24 	jmp	0x482a	; 0x482a <__vector_110>
     1bc:	0c 94 42 24 	jmp	0x4884	; 0x4884 <__vector_111>
     1c0:	0c 94 6f 24 	jmp	0x48de	; 0x48de <__vector_112>
     1c4:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__vector_113>
     1c8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1cc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1dc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1ec:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1f0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1f4:	0c 94 01 2d 	jmp	0x5a02	; 0x5a02 <__vector_125>
     1f8:	0c 94 bb 2d 	jmp	0x5b76	; 0x5b76 <__vector_126>
     1fc:	e2 27       	eor	r30, r18
     1fe:	e5 27       	eor	r30, r21
     200:	e8 27       	eor	r30, r24
     202:	eb 27       	eor	r30, r27
     204:	ee 27       	eor	r30, r30
     206:	f1 27       	eor	r31, r17
     208:	f4 27       	eor	r31, r20
     20a:	33 2f       	mov	r19, r19
     20c:	46 2f       	mov	r20, r22
     20e:	59 2f       	mov	r21, r25
     210:	6c 2f       	mov	r22, r28
     212:	7f 2f       	mov	r23, r31
     214:	92 2f       	mov	r25, r18
     216:	a5 2f       	mov	r26, r21

00000218 <PM_SINE>:
     218:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     228:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     238:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     248:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     258:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     268:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     278:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     288:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     298:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     2a8:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     2b8:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     2c8:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     2d8:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     2e8:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     2f8:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     308:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     318:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     328:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     338:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     348:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     358:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     368:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     378:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     388:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     398:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     3a8:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     3b8:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     3c8:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     3d8:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     3e8:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     3f8:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     408:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     418:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     428:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     438:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     448:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     458:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
     468:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
     478:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
     488:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
     498:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
     4a8:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
     4b8:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
     4c8:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
     4d8:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
     4e8:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
     4f8:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
     508:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
     518:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
     528:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
     538:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
     548:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
     558:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
     568:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
     578:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
     588:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
     598:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
     5a8:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
     5b8:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
     5c8:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
     5d8:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
     5e8:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
     5f8:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
     608:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
     618:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
     628:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
     638:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
     648:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
     658:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
     668:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
     678:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
     688:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
     698:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
     6a8:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
     6b8:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
     6c8:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
     6d8:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
     6e8:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
     6f8:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
     708:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
     718:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
     728:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
     738:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
     748:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
     758:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
     768:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
     778:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
     788:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
     798:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
     7a8:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
     7b8:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
     7c8:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
     7d8:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
     7e8:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
     7f8:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
     808:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
     818:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
     828:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
     838:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
     848:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
     858:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
     868:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
     878:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
     888:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
     898:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
     8a8:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
     8b8:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
     8c8:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
     8d8:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
     8e8:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
     8f8:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
     908:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
     918:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
     928:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
     938:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
     948:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
     958:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
     968:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
     978:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
     988:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
     998:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
     9a8:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
     9b8:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
     9c8:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
     9d8:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
     9e8:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
     9f8:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
     a08:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
     a18:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
     a28:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
     a38:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
     a48:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
     a58:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
     a68:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
     a78:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
     a88:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
     a98:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
     aa8:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
     ab8:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
     ac8:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
     ad8:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
     ae8:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
     af8:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
     b08:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
     b18:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
     b28:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
     b38:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
     b48:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
     b58:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
     b68:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
     b78:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
     b88:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
     b98:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
     ba8:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
     bb8:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
     bc8:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
     bd8:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
     be8:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
     bf8:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
     c08:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
     c18:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
     c28:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
     c38:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
     c48:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
     c58:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
     c68:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
     c78:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
     c88:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
     c98:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
     ca8:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
     cb8:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
     cc8:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
     cd8:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
     ce8:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
     cf8:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
     d08:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
     d18:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
     d28:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
     d38:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
     d48:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
     d58:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
     d68:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
     d78:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
     d88:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
     d98:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
     da8:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
     db8:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
     dc8:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
     dd8:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
     de8:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
     df8:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
     e08:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
     e18:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
     e28:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
     e38:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
     e48:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
     e58:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
     e68:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
     e78:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
     e88:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
     e98:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
     ea8:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
     eb8:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
     ec8:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
     ed8:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
     ee8:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
     ef8:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
     f08:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
     f18:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
     f28:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
     f38:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
     f48:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
     f58:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
     f68:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
     f78:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
     f88:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
     f98:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
     fa8:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
     fb8:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
     fc8:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
     fd8:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
     fe8:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
     ff8:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1008:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1018:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    1028:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    1038:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    1048:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    1058:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    1068:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    1078:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1088:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1098:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    10a8:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    10b8:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    10c8:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    10d8:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    10e8:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    10f8:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1108:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1118:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    1128:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    1138:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    1148:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    1158:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    1168:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    1178:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1188:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1198:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    11a8:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    11b8:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    11c8:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    11d8:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    11e8:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    11f8:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1208:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1218:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    1228:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    1238:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    1248:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    1258:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    1268:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    1278:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1288:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1298:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    12a8:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    12b8:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    12c8:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    12d8:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    12e8:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    12f8:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1308:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1318:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    1328:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    1338:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    1348:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    1358:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    1368:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    1378:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1388:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1398:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    13a8:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    13b8:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    13c8:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    13d8:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    13e8:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    13f8:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1408:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1418:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1428:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1438:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1448:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1458:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    1468:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    1478:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    1488:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    1498:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    14a8:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    14b8:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    14c8:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    14d8:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    14e8:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    14f8:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    1508:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    1518:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    1528:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    1538:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    1548:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    1558:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    1568:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    1578:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    1588:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    1598:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    15a8:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    15b8:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    15c8:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    15d8:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    15e8:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    15f8:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    1608:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    1618:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    1628:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    1638:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    1648:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    1658:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    1668:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    1678:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    1688:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    1698:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    16a8:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    16b8:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    16c8:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    16d8:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    16e8:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    16f8:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    1708:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    1718:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    1728:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    1738:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    1748:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    1758:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    1768:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    1778:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    1788:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    1798:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    17a8:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    17b8:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    17c8:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    17d8:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    17e8:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    17f8:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    1808:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    1818:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    1828:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    1838:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    1848:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    1858:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    1868:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    1878:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    1888:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    1898:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    18a8:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    18b8:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    18c8:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    18d8:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    18e8:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    18f8:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    1908:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    1918:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    1928:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    1938:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    1948:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    1958:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    1968:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    1978:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    1988:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    1998:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    19a8:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    19b8:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    19c8:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    19d8:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    19e8:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    19f8:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    1a08:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    1a18:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    1a28:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    1a38:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    1a48:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    1a58:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    1a68:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    1a78:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    1a88:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    1a98:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    1aa8:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    1ab8:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    1ac8:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    1ad8:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    1ae8:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    1af8:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    1b08:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    1b18:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    1b28:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    1b38:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    1b48:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    1b58:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    1b68:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    1b78:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    1b88:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    1b98:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    1ba8:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    1bb8:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    1bc8:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    1bd8:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    1be8:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    1bf8:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    1c08:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    1c18:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    1c28:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    1c38:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    1c48:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    1c58:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    1c68:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    1c78:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    1c88:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    1c98:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    1ca8:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    1cb8:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    1cc8:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    1cd8:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    1ce8:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    1cf8:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    1d08:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    1d18:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    1d28:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    1d38:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    1d48:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    1d58:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    1d68:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    1d78:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    1d88:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    1d98:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    1da8:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    1db8:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    1dc8:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    1dd8:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    1de8:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    1df8:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    1e08:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    1e18:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    1e28:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    1e38:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    1e48:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    1e58:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    1e68:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    1e78:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    1e88:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    1e98:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    1ea8:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    1eb8:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    1ec8:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    1ed8:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    1ee8:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    1ef8:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    1f08:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    1f18:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    1f28:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    1f38:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    1f48:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    1f58:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    1f68:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    1f78:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    1f88:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    1f98:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    1fa8:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    1fb8:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    1fc8:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    1fd8:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    1fe8:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    1ff8:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2008:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2018:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    2028:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    2038:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    2048:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    2058:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    2068:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    2078:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2088:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2098:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    20a8:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    20b8:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    20c8:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    20d8:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    20e8:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    20f8:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2108:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2118:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    2128:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    2138:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    2148:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    2158:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    2168:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    2178:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2188:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2198:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    21a8:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    21b8:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    21c8:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    21d8:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    21e8:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    21f8:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2208:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002218 <__ctors_end>:
    2218:	11 24       	eor	r1, r1
    221a:	1f be       	out	0x3f, r1	; 63
    221c:	cf ef       	ldi	r28, 0xFF	; 255
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	df e5       	ldi	r29, 0x5F	; 95
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	0c bf       	out	0x3c, r16	; 60

00002228 <__do_copy_data>:
    2228:	13 e2       	ldi	r17, 0x23	; 35
    222a:	a0 e0       	ldi	r26, 0x00	; 0
    222c:	b0 e2       	ldi	r27, 0x20	; 32
    222e:	e0 e8       	ldi	r30, 0x80	; 128
    2230:	ff e8       	ldi	r31, 0x8F	; 143
    2232:	00 e0       	ldi	r16, 0x00	; 0
    2234:	0b bf       	out	0x3b, r16	; 59
    2236:	02 c0       	rjmp	.+4      	; 0x223c <__do_copy_data+0x14>
    2238:	07 90       	elpm	r0, Z+
    223a:	0d 92       	st	X+, r0
    223c:	a4 3d       	cpi	r26, 0xD4	; 212
    223e:	b1 07       	cpc	r27, r17
    2240:	d9 f7       	brne	.-10     	; 0x2238 <__do_copy_data+0x10>

00002242 <__do_clear_bss>:
    2242:	28 e2       	ldi	r18, 0x28	; 40
    2244:	a4 ed       	ldi	r26, 0xD4	; 212
    2246:	b3 e2       	ldi	r27, 0x23	; 35
    2248:	01 c0       	rjmp	.+2      	; 0x224c <.do_clear_bss_start>

0000224a <.do_clear_bss_loop>:
    224a:	1d 92       	st	X+, r1

0000224c <.do_clear_bss_start>:
    224c:	a5 3a       	cpi	r26, 0xA5	; 165
    224e:	b2 07       	cpc	r27, r18
    2250:	e1 f7       	brne	.-8      	; 0x224a <.do_clear_bss_loop>
    2252:	0e 94 52 33 	call	0x66a4	; 0x66a4 <main>
    2256:	0c 94 be 47 	jmp	0x8f7c	; 0x8f7c <_exit>

0000225a <__bad_interrupt>:
    225a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000225e <nvm_init>:
#include "conf_nvm.h"
#include "nvm.h"

status_code_t nvm_init(mem_type_t mem)
{
	switch (mem) {
    225e:	83 30       	cpi	r24, 0x03	; 3
    2260:	10 f4       	brcc	.+4      	; 0x2266 <nvm_init+0x8>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	08 95       	ret
		}
		break;
#endif

	default:
		return ERR_INVALID_ARG;
    2266:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    2268:	08 95       	ret

0000226a <dma_interrupt>:
void dma_disable(void)
{
	DMA.CTRL = 0;
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	48 2f       	mov	r20, r24
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	fa 01       	movw	r30, r20
    2274:	71 96       	adiw	r30, 0x11	; 17
    2276:	e2 95       	swap	r30
    2278:	f2 95       	swap	r31
    227a:	f0 7f       	andi	r31, 0xF0	; 240
    227c:	fe 27       	eor	r31, r30
    227e:	e0 7f       	andi	r30, 0xF0	; 240
    2280:	fe 27       	eor	r31, r30
    2282:	a0 e0       	ldi	r26, 0x00	; 0
    2284:	b1 e0       	ldi	r27, 0x01	; 1
    2286:	14 96       	adiw	r26, 0x04	; 4
    2288:	9c 91       	ld	r25, X
    228a:	14 97       	sbiw	r26, 0x04	; 4
    228c:	13 96       	adiw	r26, 0x03	; 3
    228e:	6c 91       	ld	r22, X
    2290:	da 01       	movw	r26, r20
    2292:	14 96       	adiw	r26, 0x04	; 4
    2294:	21 e0       	ldi	r18, 0x01	; 1
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	e9 01       	movw	r28, r18
    229a:	08 2e       	mov	r0, r24
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <dma_interrupt+0x38>
    229e:	cc 0f       	add	r28, r28
    22a0:	dd 1f       	adc	r29, r29
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <dma_interrupt+0x34>
    22a6:	0a 2e       	mov	r0, r26
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <dma_interrupt+0x44>
    22aa:	22 0f       	add	r18, r18
    22ac:	33 1f       	adc	r19, r19
    22ae:	0a 94       	dec	r0
    22b0:	e2 f7       	brpl	.-8      	; 0x22aa <dma_interrupt+0x40>
    22b2:	2c 2b       	or	r18, r28
    22b4:	62 23       	and	r22, r18
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	eb 01       	movw	r28, r22
    22ba:	0a 2e       	mov	r0, r26
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <dma_interrupt+0x58>
    22be:	d5 95       	asr	r29
    22c0:	c7 95       	ror	r28
    22c2:	0a 94       	dec	r0
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <dma_interrupt+0x54>
    22c6:	c0 fd       	sbrc	r28, 0
    22c8:	1a c0       	rjmp	.+52     	; 0x22fe <dma_interrupt+0x94>
    22ca:	08 2e       	mov	r0, r24
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <dma_interrupt+0x68>
    22ce:	75 95       	asr	r23
    22d0:	67 95       	ror	r22
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <dma_interrupt+0x64>
    22d6:	60 fd       	sbrc	r22, 0
    22d8:	14 c0       	rjmp	.+40     	; 0x2302 <dma_interrupt+0x98>
    22da:	29 23       	and	r18, r25
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	b9 01       	movw	r22, r18
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <dma_interrupt+0x7c>
    22e2:	75 95       	asr	r23
    22e4:	67 95       	ror	r22
    22e6:	aa 95       	dec	r26
    22e8:	e2 f7       	brpl	.-8      	; 0x22e2 <dma_interrupt+0x78>
    22ea:	60 fd       	sbrc	r22, 0
    22ec:	0c c0       	rjmp	.+24     	; 0x2306 <dma_interrupt+0x9c>
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <dma_interrupt+0x8a>
    22f0:	35 95       	asr	r19
    22f2:	27 95       	ror	r18
    22f4:	8a 95       	dec	r24
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <dma_interrupt+0x86>
    22f8:	82 2f       	mov	r24, r18
    22fa:	81 70       	andi	r24, 0x01	; 1
    22fc:	05 c0       	rjmp	.+10     	; 0x2308 <dma_interrupt+0x9e>
    22fe:	84 e0       	ldi	r24, 0x04	; 4
    2300:	03 c0       	rjmp	.+6      	; 0x2308 <dma_interrupt+0x9e>
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <dma_interrupt+0x9e>
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	90 63       	ori	r25, 0x30	; 48
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	44 0f       	add	r20, r20
    2310:	55 1f       	adc	r21, r21
    2312:	fa 01       	movw	r30, r20
    2314:	ef 58       	subi	r30, 0x8F	; 143
    2316:	f7 4d       	sbci	r31, 0xD7	; 215
    2318:	01 90       	ld	r0, Z+
    231a:	f0 81       	ld	r31, Z
    231c:	e0 2d       	mov	r30, r0
    231e:	30 97       	sbiw	r30, 0x00	; 0
    2320:	09 f0       	breq	.+2      	; 0x2324 <dma_interrupt+0xba>
    2322:	19 95       	eicall
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	08 95       	ret

0000232a <dma_enable>:
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	1f 92       	push	r1
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    233c:	80 91 90 28 	lds	r24, 0x2890	; 0x802890 <sleepmgr_locks+0x1>
    2340:	8f 3f       	cpi	r24, 0xFF	; 255
    2342:	09 f4       	brne	.+2      	; 0x2346 <dma_enable+0x1c>
    2344:	ff cf       	rjmp	.-2      	; 0x2344 <dma_enable+0x1a>
    2346:	8f b7       	in	r24, 0x3f	; 63
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	f8 94       	cli
    234c:	99 81       	ldd	r25, Y+1	; 0x01
    234e:	ef e8       	ldi	r30, 0x8F	; 143
    2350:	f8 e2       	ldi	r31, 0x28	; 40
    2352:	81 81       	ldd	r24, Z+1	; 0x01
    2354:	8f 5f       	subi	r24, 0xFF	; 255
    2356:	81 83       	std	Z+1, r24	; 0x01
    2358:	9f bf       	out	0x3f, r25	; 63
    235a:	e0 e0       	ldi	r30, 0x00	; 0
    235c:	f1 e0       	ldi	r31, 0x01	; 1
    235e:	80 e4       	ldi	r24, 0x40	; 64
    2360:	80 83       	st	Z, r24
    2362:	80 e8       	ldi	r24, 0x80	; 128
    2364:	80 83       	st	Z, r24
    2366:	0f 90       	pop	r0
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	08 95       	ret

0000236e <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    236e:	e8 2f       	mov	r30, r24
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	ee 0f       	add	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	ef 58       	subi	r30, 0x8F	; 143
    2378:	f7 4d       	sbci	r31, 0xD7	; 215
    237a:	60 83       	st	Z, r22
    237c:	71 83       	std	Z+1, r23	; 0x01
    237e:	08 95       	ret

00002380 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	0b b6       	in	r0, 0x3b	; 59
    238c:	0f 92       	push	r0
    238e:	2f 93       	push	r18
    2390:	3f 93       	push	r19
    2392:	4f 93       	push	r20
    2394:	5f 93       	push	r21
    2396:	6f 93       	push	r22
    2398:	7f 93       	push	r23
    239a:	8f 93       	push	r24
    239c:	9f 93       	push	r25
    239e:	af 93       	push	r26
    23a0:	bf 93       	push	r27
    23a2:	ef 93       	push	r30
    23a4:	ff 93       	push	r31
	dma_interrupt(0);
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	60 df       	rcall	.-320    	; 0x226a <dma_interrupt>
}
    23aa:	ff 91       	pop	r31
    23ac:	ef 91       	pop	r30
    23ae:	bf 91       	pop	r27
    23b0:	af 91       	pop	r26
    23b2:	9f 91       	pop	r25
    23b4:	8f 91       	pop	r24
    23b6:	7f 91       	pop	r23
    23b8:	6f 91       	pop	r22
    23ba:	5f 91       	pop	r21
    23bc:	4f 91       	pop	r20
    23be:	3f 91       	pop	r19
    23c0:	2f 91       	pop	r18
    23c2:	0f 90       	pop	r0
    23c4:	0b be       	out	0x3b, r0	; 59
    23c6:	0f 90       	pop	r0
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	0f 90       	pop	r0
    23cc:	1f 90       	pop	r1
    23ce:	18 95       	reti

000023d0 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    23d0:	1f 92       	push	r1
    23d2:	0f 92       	push	r0
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	0f 92       	push	r0
    23d8:	11 24       	eor	r1, r1
    23da:	0b b6       	in	r0, 0x3b	; 59
    23dc:	0f 92       	push	r0
    23de:	2f 93       	push	r18
    23e0:	3f 93       	push	r19
    23e2:	4f 93       	push	r20
    23e4:	5f 93       	push	r21
    23e6:	6f 93       	push	r22
    23e8:	7f 93       	push	r23
    23ea:	8f 93       	push	r24
    23ec:	9f 93       	push	r25
    23ee:	af 93       	push	r26
    23f0:	bf 93       	push	r27
    23f2:	ef 93       	push	r30
    23f4:	ff 93       	push	r31
	dma_interrupt(1);
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	38 df       	rcall	.-400    	; 0x226a <dma_interrupt>
}
    23fa:	ff 91       	pop	r31
    23fc:	ef 91       	pop	r30
    23fe:	bf 91       	pop	r27
    2400:	af 91       	pop	r26
    2402:	9f 91       	pop	r25
    2404:	8f 91       	pop	r24
    2406:	7f 91       	pop	r23
    2408:	6f 91       	pop	r22
    240a:	5f 91       	pop	r21
    240c:	4f 91       	pop	r20
    240e:	3f 91       	pop	r19
    2410:	2f 91       	pop	r18
    2412:	0f 90       	pop	r0
    2414:	0b be       	out	0x3b, r0	; 59
    2416:	0f 90       	pop	r0
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	0f 90       	pop	r0
    241c:	1f 90       	pop	r1
    241e:	18 95       	reti

00002420 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    2420:	1f 92       	push	r1
    2422:	0f 92       	push	r0
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	0f 92       	push	r0
    2428:	11 24       	eor	r1, r1
    242a:	0b b6       	in	r0, 0x3b	; 59
    242c:	0f 92       	push	r0
    242e:	2f 93       	push	r18
    2430:	3f 93       	push	r19
    2432:	4f 93       	push	r20
    2434:	5f 93       	push	r21
    2436:	6f 93       	push	r22
    2438:	7f 93       	push	r23
    243a:	8f 93       	push	r24
    243c:	9f 93       	push	r25
    243e:	af 93       	push	r26
    2440:	bf 93       	push	r27
    2442:	ef 93       	push	r30
    2444:	ff 93       	push	r31
	dma_interrupt(2);
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	10 df       	rcall	.-480    	; 0x226a <dma_interrupt>
}
    244a:	ff 91       	pop	r31
    244c:	ef 91       	pop	r30
    244e:	bf 91       	pop	r27
    2450:	af 91       	pop	r26
    2452:	9f 91       	pop	r25
    2454:	8f 91       	pop	r24
    2456:	7f 91       	pop	r23
    2458:	6f 91       	pop	r22
    245a:	5f 91       	pop	r21
    245c:	4f 91       	pop	r20
    245e:	3f 91       	pop	r19
    2460:	2f 91       	pop	r18
    2462:	0f 90       	pop	r0
    2464:	0b be       	out	0x3b, r0	; 59
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	0f 90       	pop	r0
    246c:	1f 90       	pop	r1
    246e:	18 95       	reti

00002470 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    2470:	1f 92       	push	r1
    2472:	0f 92       	push	r0
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	0f 92       	push	r0
    2478:	11 24       	eor	r1, r1
    247a:	0b b6       	in	r0, 0x3b	; 59
    247c:	0f 92       	push	r0
    247e:	2f 93       	push	r18
    2480:	3f 93       	push	r19
    2482:	4f 93       	push	r20
    2484:	5f 93       	push	r21
    2486:	6f 93       	push	r22
    2488:	7f 93       	push	r23
    248a:	8f 93       	push	r24
    248c:	9f 93       	push	r25
    248e:	af 93       	push	r26
    2490:	bf 93       	push	r27
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
	dma_interrupt(3);
    2496:	83 e0       	ldi	r24, 0x03	; 3
    2498:	e8 de       	rcall	.-560    	; 0x226a <dma_interrupt>
}
    249a:	ff 91       	pop	r31
    249c:	ef 91       	pop	r30
    249e:	bf 91       	pop	r27
    24a0:	af 91       	pop	r26
    24a2:	9f 91       	pop	r25
    24a4:	8f 91       	pop	r24
    24a6:	7f 91       	pop	r23
    24a8:	6f 91       	pop	r22
    24aa:	5f 91       	pop	r21
    24ac:	4f 91       	pop	r20
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0b be       	out	0x3b, r0	; 59
    24b6:	0f 90       	pop	r0
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	0f 90       	pop	r0
    24bc:	1f 90       	pop	r1
    24be:	18 95       	reti

000024c0 <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	1f 92       	push	r1
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    24cc:	e8 2f       	mov	r30, r24
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	71 96       	adiw	r30, 0x11	; 17
    24d2:	e2 95       	swap	r30
    24d4:	f2 95       	swap	r31
    24d6:	f0 7f       	andi	r31, 0xF0	; 240
    24d8:	fe 27       	eor	r31, r30
    24da:	e0 7f       	andi	r30, 0xF0	; 240
    24dc:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    24de:	8f b7       	in	r24, 0x3f	; 63
    24e0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    24e2:	f8 94       	cli
	return flags;
    24e4:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    24e6:	19 96       	adiw	r26, 0x09	; 9
    24e8:	8c 91       	ld	r24, X
    24ea:	19 97       	sbiw	r26, 0x09	; 9
    24ec:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    24ee:	1a 96       	adiw	r26, 0x0a	; 10
    24f0:	8c 91       	ld	r24, X
    24f2:	1a 97       	sbiw	r26, 0x0a	; 10
    24f4:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    24f6:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    24f8:	17 96       	adiw	r26, 0x07	; 7
    24fa:	8c 91       	ld	r24, X
    24fc:	17 97       	sbiw	r26, 0x07	; 7
    24fe:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    2500:	18 96       	adiw	r26, 0x08	; 8
    2502:	8c 91       	ld	r24, X
    2504:	18 97       	sbiw	r26, 0x08	; 8
    2506:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    2508:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    250a:	12 96       	adiw	r26, 0x02	; 2
    250c:	8c 91       	ld	r24, X
    250e:	12 97       	sbiw	r26, 0x02	; 2
    2510:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    2512:	13 96       	adiw	r26, 0x03	; 3
    2514:	8c 91       	ld	r24, X
    2516:	13 97       	sbiw	r26, 0x03	; 3
    2518:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    251a:	14 96       	adiw	r26, 0x04	; 4
    251c:	2d 91       	ld	r18, X+
    251e:	3c 91       	ld	r19, X
    2520:	15 97       	sbiw	r26, 0x05	; 5
    2522:	24 83       	std	Z+4, r18	; 0x04
    2524:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    2526:	16 96       	adiw	r26, 0x06	; 6
    2528:	8c 91       	ld	r24, X
    252a:	16 97       	sbiw	r26, 0x06	; 6
    252c:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	8c 91       	ld	r24, X
    2532:	11 97       	sbiw	r26, 0x01	; 1
    2534:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    2536:	8c 91       	ld	r24, X
    2538:	8f 77       	andi	r24, 0x7F	; 127
    253a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    253c:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    253e:	0f 90       	pop	r0
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    2546:	04 c0       	rjmp	.+8      	; 0x2550 <__portable_avr_delay_cycles+0xa>
    2548:	61 50       	subi	r22, 0x01	; 1
    254a:	71 09       	sbc	r23, r1
    254c:	81 09       	sbc	r24, r1
    254e:	91 09       	sbc	r25, r1
    2550:	61 15       	cp	r22, r1
    2552:	71 05       	cpc	r23, r1
    2554:	81 05       	cpc	r24, r1
    2556:	91 05       	cpc	r25, r1
    2558:	b9 f7       	brne	.-18     	; 0x2548 <__portable_avr_delay_cycles+0x2>
    255a:	08 95       	ret

0000255c <rtc_get_time>:
    255c:	80 e1       	ldi	r24, 0x10	; 16
    255e:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    2562:	e0 e2       	ldi	r30, 0x20	; 32
    2564:	f4 e0       	ldi	r31, 0x04	; 4
    2566:	81 81       	ldd	r24, Z+1	; 0x01
    2568:	84 fd       	sbrc	r24, 4
    256a:	fd cf       	rjmp	.-6      	; 0x2566 <rtc_get_time+0xa>
    256c:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    2570:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    2574:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    2578:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    257c:	08 95       	ret

0000257e <rtc_set_callback>:
    257e:	80 93 79 28 	sts	0x2879, r24	; 0x802879 <rtc_data>
    2582:	90 93 7a 28 	sts	0x287A, r25	; 0x80287a <rtc_data+0x1>
    2586:	08 95       	ret

00002588 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    258c:	64 e0       	ldi	r22, 0x04	; 4
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    2594:	c0 ef       	ldi	r28, 0xF0	; 240
    2596:	d0 e0       	ldi	r29, 0x00	; 0
    2598:	88 81       	ld	r24, Y
    259a:	82 60       	ori	r24, 0x02	; 2
    259c:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    259e:	61 e0       	ldi	r22, 0x01	; 1
    25a0:	80 ef       	ldi	r24, 0xF0	; 240
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 3c 40 	call	0x8078	; 0x8078 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    25a8:	88 81       	ld	r24, Y
    25aa:	84 60       	ori	r24, 0x04	; 4
    25ac:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    25ae:	69 ee       	ldi	r22, 0xE9	; 233
    25b0:	73 e0       	ldi	r23, 0x03	; 3
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	c7 df       	rcall	.-114    	; 0x2546 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    25b8:	88 81       	ld	r24, Y
    25ba:	88 61       	ori	r24, 0x18	; 24
    25bc:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    25be:	e0 ef       	ldi	r30, 0xF0	; 240
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	81 81       	ldd	r24, Z+1	; 0x01
    25c4:	83 ff       	sbrs	r24, 3
    25c6:	fd cf       	rjmp	.-6      	; 0x25c2 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    25c8:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    25cc:	e0 e2       	ldi	r30, 0x20	; 32
    25ce:	f4 e0       	ldi	r31, 0x04	; 4
    25d0:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    25d2:	80 fd       	sbrc	r24, 0
    25d4:	fd cf       	rjmp	.-6      	; 0x25d0 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    25d6:	e0 e2       	ldi	r30, 0x20	; 32
    25d8:	f4 e0       	ldi	r31, 0x04	; 4
    25da:	8f ef       	ldi	r24, 0xFF	; 255
    25dc:	9f ef       	ldi	r25, 0xFF	; 255
    25de:	dc 01       	movw	r26, r24
    25e0:	80 87       	std	Z+8, r24	; 0x08
    25e2:	91 87       	std	Z+9, r25	; 0x09
    25e4:	a2 87       	std	Z+10, r26	; 0x0a
    25e6:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    25e8:	14 82       	std	Z+4, r1	; 0x04
    25ea:	15 82       	std	Z+5, r1	; 0x05
    25ec:	16 82       	std	Z+6, r1	; 0x06
    25ee:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    25f0:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    25f2:	80 fd       	sbrc	r24, 0
    25f4:	fd cf       	rjmp	.-6      	; 0x25f0 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    25f6:	e0 e2       	ldi	r30, 0x20	; 32
    25f8:	f4 e0       	ldi	r31, 0x04	; 4
    25fa:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2600:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    2602:	80 fd       	sbrc	r24, 0
    2604:	fd cf       	rjmp	.-6      	; 0x2600 <rtc_init+0x78>
}
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    260c:	1f 92       	push	r1
    260e:	0f 92       	push	r0
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	0f 92       	push	r0
    2614:	11 24       	eor	r1, r1
    2616:	0b b6       	in	r0, 0x3b	; 59
    2618:	0f 92       	push	r0
    261a:	2f 93       	push	r18
    261c:	3f 93       	push	r19
    261e:	4f 93       	push	r20
    2620:	5f 93       	push	r21
    2622:	6f 93       	push	r22
    2624:	7f 93       	push	r23
    2626:	8f 93       	push	r24
    2628:	9f 93       	push	r25
    262a:	af 93       	push	r26
    262c:	bf 93       	push	r27
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	ef 93       	push	r30
    2634:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    2636:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    263a:	c0 91 79 28 	lds	r28, 0x2879	; 0x802879 <rtc_data>
    263e:	d0 91 7a 28 	lds	r29, 0x287A	; 0x80287a <rtc_data+0x1>
    2642:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    2644:	19 f0       	breq	.+6      	; 0x264c <__vector_11+0x40>
    2646:	8a df       	rcall	.-236    	; 0x255c <rtc_get_time>
    2648:	fe 01       	movw	r30, r28
}
    264a:	19 95       	eicall
    264c:	ff 91       	pop	r31
    264e:	ef 91       	pop	r30
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	bf 91       	pop	r27
    2656:	af 91       	pop	r26
    2658:	9f 91       	pop	r25
    265a:	8f 91       	pop	r24
    265c:	7f 91       	pop	r23
    265e:	6f 91       	pop	r22
    2660:	5f 91       	pop	r21
    2662:	4f 91       	pop	r20
    2664:	3f 91       	pop	r19
    2666:	2f 91       	pop	r18
    2668:	0f 90       	pop	r0
    266a:	0b be       	out	0x3b, r0	; 59
    266c:	0f 90       	pop	r0
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	0f 90       	pop	r0
    2672:	1f 90       	pop	r1
    2674:	18 95       	reti

00002676 <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* Interpolate result */
	uint16_t left_x       = phase >> 4;												// left side
	int16_t  left_y       = (int16_t)PGM_READ_WORD(&(PM_SINE[left_x])) - 0x8000;
    2676:	fc 01       	movw	r30, r24
    2678:	f2 95       	swap	r31
    267a:	e2 95       	swap	r30
    267c:	ef 70       	andi	r30, 0x0F	; 15
    267e:	ef 27       	eor	r30, r31
    2680:	ff 70       	andi	r31, 0x0F	; 15
    2682:	ef 27       	eor	r30, r31
    2684:	ee 0f       	add	r30, r30
    2686:	ff 1f       	adc	r31, r31
    2688:	e8 5e       	subi	r30, 0xE8	; 232
    268a:	fd 4f       	sbci	r31, 0xFD	; 253
    268c:	25 91       	lpm	r18, Z+
    268e:	34 91       	lpm	r19, Z
    2690:	30 58       	subi	r19, 0x80	; 128
	uint16_t rght_x       = (phase + 16) >> 4;										// right side
	int16_t  rght_y       = (int16_t)PGM_READ_WORD(&(PM_SINE[rght_x])) - 0x8000;
    2692:	fc 01       	movw	r30, r24
    2694:	70 96       	adiw	r30, 0x10	; 16
    2696:	f2 95       	swap	r31
    2698:	e2 95       	swap	r30
    269a:	ef 70       	andi	r30, 0x0F	; 15
    269c:	ef 27       	eor	r30, r31
    269e:	ff 70       	andi	r31, 0x0F	; 15
    26a0:	ef 27       	eor	r30, r31
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	e8 5e       	subi	r30, 0xE8	; 232
    26a8:	fd 4f       	sbci	r31, 0xFD	; 253
    26aa:	45 91       	lpm	r20, Z+
    26ac:	54 91       	lpm	r21, Z
	int16_t  prob         = phase & 0x0f;											// phase fraction
	int16_t  delta_frac_y = (int16_t) (((rght_y - left_y) * prob) >> 4);			// interpolation
	int16_t  val          = left_y + delta_frac_y;

	return 0x8000U + (uint16_t)val;
    26ae:	50 58       	subi	r21, 0x80	; 128
    26b0:	42 1b       	sub	r20, r18
    26b2:	53 0b       	sbc	r21, r19
    26b4:	8f 70       	andi	r24, 0x0F	; 15
    26b6:	99 27       	eor	r25, r25
    26b8:	48 9f       	mul	r20, r24
    26ba:	b0 01       	movw	r22, r0
    26bc:	49 9f       	mul	r20, r25
    26be:	70 0d       	add	r23, r0
    26c0:	58 9f       	mul	r21, r24
    26c2:	70 0d       	add	r23, r0
    26c4:	11 24       	eor	r1, r1
    26c6:	cb 01       	movw	r24, r22
    26c8:	95 95       	asr	r25
    26ca:	87 95       	ror	r24
    26cc:	95 95       	asr	r25
    26ce:	87 95       	ror	r24
    26d0:	95 95       	asr	r25
    26d2:	87 95       	ror	r24
    26d4:	95 95       	asr	r25
    26d6:	87 95       	ror	r24
    26d8:	82 0f       	add	r24, r18
    26da:	93 1f       	adc	r25, r19
}
    26dc:	90 58       	subi	r25, 0x80	; 128
    26de:	08 95       	ret

000026e0 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    26e0:	04 c0       	rjmp	.+8      	; 0x26ea <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    26e2:	61 50       	subi	r22, 0x01	; 1
    26e4:	71 09       	sbc	r23, r1
    26e6:	81 09       	sbc	r24, r1
    26e8:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    26ea:	61 15       	cp	r22, r1
    26ec:	71 05       	cpc	r23, r1
    26ee:	81 05       	cpc	r24, r1
    26f0:	91 05       	cpc	r25, r1
    26f2:	b9 f7       	brne	.-18     	; 0x26e2 <__portable_avr_delay_cycles+0x2>
    26f4:	08 95       	ret

000026f6 <twi2_waitUntilReady>:
}
#endif


static void twi2_waitUntilReady(void)
{
    26f6:	cf 92       	push	r12
    26f8:	df 92       	push	r13
    26fa:	ef 92       	push	r14
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
	status_code_t status;
	uint8_t isBusy;
	uint8_t isValid;

	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_STATE;
    2704:	ea e0       	ldi	r30, 0x0A	; 10
    2706:	f0 e2       	ldi	r31, 0x20	; 32
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	84 83       	std	Z+4, r24	; 0x04
    2712:	95 83       	std	Z+5, r25	; 0x05

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2714:	8f 01       	movw	r16, r30
    2716:	cc 24       	eor	r12, r12
    2718:	c3 94       	inc	r12
    271a:	d1 2c       	mov	r13, r1
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    271c:	0f 2e       	mov	r0, r31
    271e:	f7 e9       	ldi	r31, 0x97	; 151
    2720:	ef 2e       	mov	r14, r31
    2722:	f6 e2       	ldi	r31, 0x26	; 38
    2724:	ff 2e       	mov	r15, r31
    2726:	f0 2d       	mov	r31, r0
	twi2_packet.addr_length = 1;

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2728:	f8 01       	movw	r30, r16
    272a:	c0 86       	std	Z+8, r12	; 0x08
    272c:	d1 86       	std	Z+9, r13	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	b8 01       	movw	r22, r16
    2732:	80 e8       	ldi	r24, 0x80	; 128
    2734:	94 e0       	ldi	r25, 0x04	; 4
    2736:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    273a:	f7 01       	movw	r30, r14
    273c:	c0 81       	ld	r28, Z
    273e:	9c 2f       	mov	r25, r28
    2740:	90 78       	andi	r25, 0x80	; 128
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
    2742:	81 11       	cpse	r24, r1
    2744:	0d c0       	rjmp	.+26     	; 0x2760 <twi2_waitUntilReady+0x6a>
    2746:	91 f0       	breq	.+36     	; 0x276c <twi2_waitUntilReady+0x76>
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
		} else {
			if (isBusy && isValid) {
    2748:	8c 2f       	mov	r24, r28
    274a:	81 78       	andi	r24, 0x81	; 129
    274c:	81 38       	cpi	r24, 0x81	; 129
    274e:	29 f4       	brne	.+10     	; 0x275a <twi2_waitUntilReady+0x64>
				delay_us(TWI_SMART_LCD_DEVICE_BUSY_DELAY_MIN_US);
    2750:	65 ef       	ldi	r22, 0xF5	; 245
    2752:	71 e0       	ldi	r23, 0x01	; 1
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	c3 df       	rcall	.-122    	; 0x26e0 <__portable_avr_delay_cycles>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
    275a:	c0 fd       	sbrc	r28, 0
    275c:	e5 cf       	rjmp	.-54     	; 0x2728 <twi2_waitUntilReady+0x32>
    275e:	0c c0       	rjmp	.+24     	; 0x2778 <twi2_waitUntilReady+0x82>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2760:	65 e0       	ldi	r22, 0x05	; 5
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	bb df       	rcall	.-138    	; 0x26e0 <__portable_avr_delay_cycles>
    276a:	de cf       	rjmp	.-68     	; 0x2728 <twi2_waitUntilReady+0x32>
    276c:	65 e0       	ldi	r22, 0x05	; 5
    276e:	70 e0       	ldi	r23, 0x00	; 0
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	b5 df       	rcall	.-150    	; 0x26e0 <__portable_avr_delay_cycles>
    2776:	d8 cf       	rjmp	.-80     	; 0x2728 <twi2_waitUntilReady+0x32>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
	//printf("DBG909\r\n");
}
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	df 90       	pop	r13
    2784:	cf 90       	pop	r12
    2786:	08 95       	ret

00002788 <twi_init>:
}


void twi_init(void) {
	#ifdef TWI1_MASTER
	TWI1_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA1
    2788:	e0 e8       	ldi	r30, 0x80	; 128
    278a:	f6 e0       	ldi	r31, 0x06	; 6
    278c:	88 e3       	ldi	r24, 0x38	; 56
    278e:	80 8b       	std	Z+16, r24	; 0x10
	TWI1_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL1
    2790:	81 8b       	std	Z+17, r24	; 0x11
	#endif

	#ifdef TWI2_MASTER
	TWI2_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA2
    2792:	e0 e4       	ldi	r30, 0x40	; 64
    2794:	f6 e0       	ldi	r31, 0x06	; 6
    2796:	80 8b       	std	Z+16, r24	; 0x10
	TWI2_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL2
    2798:	81 8b       	std	Z+17, r24	; 0x11
    279a:	08 95       	ret

0000279c <twi_start>:
	#endif
}

void twi_start(void) {
    279c:	8f 92       	push	r8
    279e:	9f 92       	push	r9
    27a0:	af 92       	push	r10
    27a2:	bf 92       	push	r11
    27a4:	cf 92       	push	r12
    27a6:	df 92       	push	r13
    27a8:	ef 92       	push	r14
    27aa:	ff 92       	push	r15
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    27b4:	60 e4       	ldi	r22, 0x40	; 64
    27b6:	85 e0       	ldi	r24, 0x05	; 5
    27b8:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
	#else
	#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
    27bc:	69 e2       	ldi	r22, 0x29	; 41
    27be:	70 e2       	ldi	r23, 0x20	; 32
    27c0:	80 ea       	ldi	r24, 0xA0	; 160
    27c2:	94 e0       	ldi	r25, 0x04	; 4
    27c4:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    27c8:	e0 ea       	ldi	r30, 0xA0	; 160
    27ca:	f4 e0       	ldi	r31, 0x04	; 4
    27cc:	81 81       	ldd	r24, Z+1	; 0x01
    27ce:	88 60       	ori	r24, 0x08	; 8
    27d0:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    27d2:	60 e4       	ldi	r22, 0x40	; 64
    27d4:	83 e0       	ldi	r24, 0x03	; 3
    27d6:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
	#else
	#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
    27da:	65 e1       	ldi	r22, 0x15	; 21
    27dc:	70 e2       	ldi	r23, 0x20	; 32
    27de:	80 e8       	ldi	r24, 0x80	; 128
    27e0:	94 e0       	ldi	r25, 0x04	; 4
    27e2:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <twi_master_init>
    27e6:	e0 e8       	ldi	r30, 0x80	; 128
    27e8:	f4 e0       	ldi	r31, 0x04	; 4
    27ea:	81 81       	ldd	r24, Z+1	; 0x01
    27ec:	88 60       	ori	r24, 0x08	; 8
    27ee:	81 83       	std	Z+1, r24	; 0x01

static void twi1_hygro_init(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Hygro SHT31-DIS - I2C address: 0x%02X\r\n", TWI1_SLAVE_HYGRO_ADDR);
    27f0:	1f 92       	push	r1
    27f2:	c4 e4       	ldi	r28, 0x44	; 68
    27f4:	cf 93       	push	r28
    27f6:	84 ef       	ldi	r24, 0xF4	; 244
    27f8:	90 e2       	ldi	r25, 0x20	; 32
    27fa:	9f 93       	push	r25
    27fc:	8f 93       	push	r24
    27fe:	0e 94 92 43 	call	0x8724	; 0x8724 <printf>
	g_twi1_hygro_status = 0;
    2802:	10 92 0e 27 	sts	0x270E, r1	; 0x80270e <g_twi1_hygro_status>
	//
	twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    2806:	ee e1       	ldi	r30, 0x1E	; 30
    2808:	f0 e2       	ldi	r31, 0x20	; 32
    280a:	c0 83       	st	Z, r28
	twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_RESET_HI;
    280c:	80 e3       	ldi	r24, 0x30	; 48
    280e:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_RESET_LO;
    2810:	82 ea       	ldi	r24, 0xA2	; 162
    2812:	82 83       	std	Z+2, r24	; 0x02
	twi1_packet.addr_length = 2;
    2814:	82 e0       	ldi	r24, 0x02	; 2
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	84 83       	std	Z+4, r24	; 0x04
    281a:	95 83       	std	Z+5, r25	; 0x05
	twi1_packet.length = 0;
    281c:	10 86       	std	Z+8, r1	; 0x08
    281e:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2820:	40 e0       	ldi	r20, 0x00	; 0
    2822:	bf 01       	movw	r22, r30
    2824:	80 ea       	ldi	r24, 0xA0	; 160
    2826:	94 e0       	ldi	r25, 0x04	; 4
    2828:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
	sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	81 11       	cpse	r24, r1
    2836:	2b c0       	rjmp	.+86     	; 0x288e <twi_start+0xf2>
		delay_ms(1);
    2838:	68 e8       	ldi	r22, 0x88	; 136
    283a:	73 e1       	ldi	r23, 0x13	; 19
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	4f df       	rcall	.-354    	; 0x26e0 <__portable_avr_delay_cycles>
		//
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_STATUS_HI;
    2842:	ee e1       	ldi	r30, 0x1E	; 30
    2844:	f0 e2       	ldi	r31, 0x20	; 32
    2846:	83 ef       	ldi	r24, 0xF3	; 243
    2848:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_STATUS_LO;
    284a:	8d e2       	ldi	r24, 0x2D	; 45
    284c:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.length = 2;
    284e:	82 e0       	ldi	r24, 0x02	; 2
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	80 87       	std	Z+8, r24	; 0x08
    2854:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2856:	41 e0       	ldi	r20, 0x01	; 1
    2858:	bf 01       	movw	r22, r30
    285a:	80 ea       	ldi	r24, 0xA0	; 160
    285c:	94 e0       	ldi	r25, 0x04	; 4
    285e:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc == STATUS_OK) {
    2862:	81 11       	cpse	r24, r1
    2864:	18 c0       	rjmp	.+48     	; 0x2896 <twi_start+0xfa>
			g_twi1_hygro_status = (twi1_m_data[0] << 8) | twi1_m_data[1];
    2866:	80 91 a0 26 	lds	r24, 0x26A0	; 0x8026a0 <twi1_m_data+0x1>
    286a:	80 93 0e 27 	sts	0x270E, r24	; 0x80270e <g_twi1_hygro_status>
			g_twi1_hygro_valid = true;
    286e:	91 e0       	ldi	r25, 0x01	; 1
    2870:	90 93 0f 27 	sts	0x270F, r25	; 0x80270f <g_twi1_hygro_valid>
			printf("TWI-onboard: Hygro SHT31-DIS -   status: 0x%02X\r\n", g_twi1_hygro_status);
    2874:	1f 92       	push	r1
    2876:	8f 93       	push	r24
    2878:	8b e2       	ldi	r24, 0x2B	; 43
    287a:	91 e2       	ldi	r25, 0x21	; 33
    287c:	9f 93       	push	r25
    287e:	8f 93       	push	r24
    2880:	0e 94 92 43 	call	0x8724	; 0x8724 <printf>
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	04 c0       	rjmp	.+8      	; 0x2896 <twi_start+0xfa>
		}
	} else {
		printf("TWI-onboard:  ... device not on board.\r\n");
    288e:	8d e5       	ldi	r24, 0x5D	; 93
    2890:	91 e2       	ldi	r25, 0x21	; 33
    2892:	0e 94 a5 43 	call	0x874a	; 0x874a <puts>

static void twi1_gyro_init(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Gyro MPU-9250 - I2C address: 0x%02X, 0x%02X\r\n", TWI1_SLAVE_GYRO_ADDR_1, TWI1_SLAVE_GYRO_ADDR_2);
    2896:	1f 92       	push	r1
    2898:	8c e0       	ldi	r24, 0x0C	; 12
    289a:	8f 93       	push	r24
    289c:	1f 92       	push	r1
    289e:	c8 e6       	ldi	r28, 0x68	; 104
    28a0:	cf 93       	push	r28
    28a2:	85 e8       	ldi	r24, 0x85	; 133
    28a4:	91 e2       	ldi	r25, 0x21	; 33
    28a6:	9f 93       	push	r25
    28a8:	8f 93       	push	r24
    28aa:	0e 94 92 43 	call	0x8724	; 0x8724 <printf>
	g_twi1_gyro_1_version = 0;
    28ae:	10 92 34 27 	sts	0x2734, r1	; 0x802734 <g_twi1_gyro_1_version>
	g_twi1_gyro_2_version = 0;
    28b2:	10 92 33 27 	sts	0x2733, r1	; 0x802733 <g_twi1_gyro_2_version>
	//
	twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    28b6:	ee e1       	ldi	r30, 0x1E	; 30
    28b8:	f0 e2       	ldi	r31, 0x20	; 32
    28ba:	c0 83       	st	Z, r28
	twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_RESET;
    28bc:	8b e6       	ldi	r24, 0x6B	; 107
    28be:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr_length = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	84 83       	std	Z+4, r24	; 0x04
    28c6:	95 83       	std	Z+5, r25	; 0x05
	twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_RESET;
    28c8:	21 e8       	ldi	r18, 0x81	; 129
    28ca:	20 93 9f 26 	sts	0x269F, r18	; 0x80269f <twi1_m_data>
	twi1_packet.length = 1;
    28ce:	80 87       	std	Z+8, r24	; 0x08
    28d0:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	bf 01       	movw	r22, r30
    28d6:	80 ea       	ldi	r24, 0xA0	; 160
    28d8:	94 e0       	ldi	r25, 0x04	; 4
    28da:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
	sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
	//
	if (sc == STATUS_OK) {
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	81 11       	cpse	r24, r1
    28ec:	5b c0       	rjmp	.+182    	; 0x29a4 <twi_start+0x208>
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    28ee:	ee e1       	ldi	r30, 0x1E	; 30
    28f0:	f0 e2       	ldi	r31, 0x20	; 32
    28f2:	8c e0       	ldi	r24, 0x0C	; 12
    28f4:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_RESET;
    28f6:	8a e0       	ldi	r24, 0x0A	; 10
    28f8:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	84 83       	std	Z+4, r24	; 0x04
    2900:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_RESET;
    2902:	2f e1       	ldi	r18, 0x1F	; 31
    2904:	20 93 9f 26 	sts	0x269F, r18	; 0x80269f <twi1_m_data>
		twi1_packet.length = 1;
    2908:	80 87       	std	Z+8, r24	; 0x08
    290a:	91 87       	std	Z+9, r25	; 0x09
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	bf 01       	movw	r22, r30
    2910:	80 ea       	ldi	r24, 0xA0	; 160
    2912:	94 e0       	ldi	r25, 0x04	; 4
    2914:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc == STATUS_OK) {
    2918:	81 11       	cpse	r24, r1
    291a:	48 c0       	rjmp	.+144    	; 0x29ac <twi_start+0x210>
			delay_ms(10);
    291c:	61 e5       	ldi	r22, 0x51	; 81
    291e:	73 ec       	ldi	r23, 0xC3	; 195
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	dd de       	rcall	.-582    	; 0x26e0 <__portable_avr_delay_cycles>
			//
			twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    2926:	ee e1       	ldi	r30, 0x1E	; 30
    2928:	f0 e2       	ldi	r31, 0x20	; 32
    292a:	88 e6       	ldi	r24, 0x68	; 104
    292c:	80 83       	st	Z, r24
			twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_WHOAMI;
    292e:	85 e7       	ldi	r24, 0x75	; 117
    2930:	81 83       	std	Z+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	84 83       	std	Z+4, r24	; 0x04
    2938:	95 83       	std	Z+5, r25	; 0x05
			twi1_packet.length = 1;
    293a:	80 87       	std	Z+8, r24	; 0x08
    293c:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    293e:	41 e0       	ldi	r20, 0x01	; 1
    2940:	bf 01       	movw	r22, r30
    2942:	80 ea       	ldi	r24, 0xA0	; 160
    2944:	94 e0       	ldi	r25, 0x04	; 4
    2946:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    294a:	81 11       	cpse	r24, r1
    294c:	2f c0       	rjmp	.+94     	; 0x29ac <twi_start+0x210>
				g_twi1_gyro_1_version = twi1_m_data[0];
    294e:	80 91 9f 26 	lds	r24, 0x269F	; 0x80269f <twi1_m_data>
    2952:	80 93 34 27 	sts	0x2734, r24	; 0x802734 <g_twi1_gyro_1_version>
				//
				twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    2956:	ee e1       	ldi	r30, 0x1E	; 30
    2958:	f0 e2       	ldi	r31, 0x20	; 32
    295a:	8c e0       	ldi	r24, 0x0C	; 12
    295c:	80 83       	st	Z, r24
				twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_DEVICE_ID;
    295e:	11 82       	std	Z+1, r1	; 0x01
    2960:	41 e0       	ldi	r20, 0x01	; 1
    2962:	bf 01       	movw	r22, r30
    2964:	80 ea       	ldi	r24, 0xA0	; 160
    2966:	94 e0       	ldi	r25, 0x04	; 4
    2968:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
				sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
				if (sc == STATUS_OK) {
    296c:	81 11       	cpse	r24, r1
    296e:	1e c0       	rjmp	.+60     	; 0x29ac <twi_start+0x210>
					g_twi1_gyro_2_version = twi1_m_data[0];
    2970:	80 91 9f 26 	lds	r24, 0x269F	; 0x80269f <twi1_m_data>
    2974:	80 93 33 27 	sts	0x2733, r24	; 0x802733 <g_twi1_gyro_2_version>
					g_twi1_gyro_valid = true;
    2978:	91 e0       	ldi	r25, 0x01	; 1
    297a:	90 93 35 27 	sts	0x2735, r25	; 0x802735 <g_twi1_gyro_valid>
					printf("TWI-onboard: Gyro MPU-9250 -     version: 0x%02X, 0x%02X\r\n", g_twi1_gyro_1_version, g_twi1_gyro_2_version);
    297e:	1f 92       	push	r1
    2980:	8f 93       	push	r24
    2982:	80 91 34 27 	lds	r24, 0x2734	; 0x802734 <g_twi1_gyro_1_version>
    2986:	1f 92       	push	r1
    2988:	8f 93       	push	r24
    298a:	82 ec       	ldi	r24, 0xC2	; 194
    298c:	91 e2       	ldi	r25, 0x21	; 33
    298e:	9f 93       	push	r25
    2990:	8f 93       	push	r24
    2992:	0e 94 92 43 	call	0x8724	; 0x8724 <printf>
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	04 c0       	rjmp	.+8      	; 0x29ac <twi_start+0x210>
				}
			}
		}
	} else {
		printf("TWI-onboard:  ... device not on board.\r\n");
    29a4:	8d e5       	ldi	r24, 0x5D	; 93
    29a6:	91 e2       	ldi	r25, 0x21	; 33
    29a8:	0e 94 a5 43 	call	0x874a	; 0x874a <puts>

static void twi1_baro_init(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Baro MS560702BA03-50 - I2C address: 0x%02X\r\n", TWI1_SLAVE_BARO_ADDR);
    29ac:	1f 92       	push	r1
    29ae:	c6 e7       	ldi	r28, 0x76	; 118
    29b0:	cf 93       	push	r28
    29b2:	8d ef       	ldi	r24, 0xFD	; 253
    29b4:	91 e2       	ldi	r25, 0x21	; 33
    29b6:	9f 93       	push	r25
    29b8:	8f 93       	push	r24
    29ba:	0e 94 92 43 	call	0x8724	; 0x8724 <printf>

	twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    29be:	ee e1       	ldi	r30, 0x1E	; 30
    29c0:	f0 e2       	ldi	r31, 0x20	; 32
    29c2:	c0 83       	st	Z, r28
	twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_RESET;
    29c4:	8e e1       	ldi	r24, 0x1E	; 30
    29c6:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr_length = 1;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	84 83       	std	Z+4, r24	; 0x04
    29ce:	95 83       	std	Z+5, r25	; 0x05
	twi1_packet.length = 0;
    29d0:	10 86       	std	Z+8, r1	; 0x08
    29d2:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	bf 01       	movw	r22, r30
    29d8:	80 ea       	ldi	r24, 0xA0	; 160
    29da:	94 e0       	ldi	r25, 0x04	; 4
    29dc:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
	sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	81 11       	cpse	r24, r1
    29ea:	75 c0       	rjmp	.+234    	; 0x2ad6 <twi_start+0x33a>
		delay_ms(3);
    29ec:	68 e9       	ldi	r22, 0x98	; 152
    29ee:	7a e3       	ldi	r23, 0x3A	; 58
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	75 de       	rcall	.-790    	; 0x26e0 <__portable_avr_delay_cycles>

		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_VERSION;
    29f6:	ee e1       	ldi	r30, 0x1E	; 30
    29f8:	f0 e2       	ldi	r31, 0x20	; 32
    29fa:	87 e5       	ldi	r24, 0x57	; 87
    29fc:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.length = 2;
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	80 87       	std	Z+8, r24	; 0x08
    2a04:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2a06:	41 e0       	ldi	r20, 0x01	; 1
    2a08:	bf 01       	movw	r22, r30
    2a0a:	80 ea       	ldi	r24, 0xA0	; 160
    2a0c:	94 e0       	ldi	r25, 0x04	; 4
    2a0e:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc == STATUS_OK) {
    2a12:	81 11       	cpse	r24, r1
    2a14:	21 c0       	rjmp	.+66     	; 0x2a58 <twi_start+0x2bc>
			g_twi1_baro_version = ((twi1_m_data[0] << 8) | twi1_m_data[1]) >> 4;
    2a16:	ef e9       	ldi	r30, 0x9F	; 159
    2a18:	f6 e2       	ldi	r31, 0x26	; 38
    2a1a:	80 81       	ld	r24, Z
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	98 2f       	mov	r25, r24
    2a20:	88 27       	eor	r24, r24
    2a22:	21 81       	ldd	r18, Z+1	; 0x01
    2a24:	82 2b       	or	r24, r18
    2a26:	95 95       	asr	r25
    2a28:	87 95       	ror	r24
    2a2a:	95 95       	asr	r25
    2a2c:	87 95       	ror	r24
    2a2e:	95 95       	asr	r25
    2a30:	87 95       	ror	r24
    2a32:	95 95       	asr	r25
    2a34:	87 95       	ror	r24
    2a36:	80 93 30 27 	sts	0x2730, r24	; 0x802730 <g_twi1_baro_version>
    2a3a:	90 93 31 27 	sts	0x2731, r25	; 0x802731 <g_twi1_baro_version+0x1>
			printf("TWI-onboard: Baro MS560702BA03-50 -     version: 0x%04X\r\n", g_twi1_baro_version);
    2a3e:	9f 93       	push	r25
    2a40:	8f 93       	push	r24
    2a42:	89 e3       	ldi	r24, 0x39	; 57
    2a44:	92 e2       	ldi	r25, 0x22	; 34
    2a46:	9f 93       	push	r25
    2a48:	8f 93       	push	r24
    2a4a:	0e 94 92 43 	call	0x8724	; 0x8724 <printf>
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	93 c0       	rjmp	.+294    	; 0x2b7e <twi_start+0x3e2>
		} else {
			printf("TWI-onboard:  BAD reading serial/CRC word.\r\n");
    2a58:	83 e7       	ldi	r24, 0x73	; 115
    2a5a:	92 e2       	ldi	r25, 0x22	; 34
    2a5c:	0e 94 a5 43 	call	0x874a	; 0x874a <puts>
    2a60:	8e c0       	rjmp	.+284    	; 0x2b7e <twi_start+0x3e2>
		}

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
    2a62:	ce 01       	movw	r24, r28
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	80 6a       	ori	r24, 0xA0	; 160
    2a6a:	f4 01       	movw	r30, r8
    2a6c:	81 83       	std	Z+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    2a6e:	a4 82       	std	Z+4, r10	; 0x04
    2a70:	b5 82       	std	Z+5, r11	; 0x05
			twi1_packet.length = 2;
    2a72:	c0 86       	std	Z+8, r12	; 0x08
    2a74:	d1 86       	std	Z+9, r13	; 0x09
    2a76:	41 e0       	ldi	r20, 0x01	; 1
    2a78:	b4 01       	movw	r22, r8
    2a7a:	80 ea       	ldi	r24, 0xA0	; 160
    2a7c:	94 e0       	ldi	r25, 0x04	; 4
    2a7e:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2a82:	81 11       	cpse	r24, r1
    2a84:	16 c0       	rjmp	.+44     	; 0x2ab2 <twi_start+0x316>
				g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    2a86:	f8 01       	movw	r30, r16
    2a88:	80 81       	ld	r24, Z
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	98 2f       	mov	r25, r24
    2a8e:	88 27       	eor	r24, r24
    2a90:	21 81       	ldd	r18, Z+1	; 0x01
    2a92:	82 2b       	or	r24, r18
    2a94:	f7 01       	movw	r30, r14
    2a96:	81 93       	st	Z+, r24
    2a98:	91 93       	st	Z+, r25
    2a9a:	7f 01       	movw	r14, r30
				if (adr == C_TWI1_BARO_C_CNT - 1) {
    2a9c:	c7 30       	cpi	r28, 0x07	; 7
    2a9e:	d1 05       	cpc	r29, r1
    2aa0:	a9 f4       	brne	.+42     	; 0x2acc <twi_start+0x330>
					g_twi1_baro_valid = true;
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	80 93 32 27 	sts	0x2732, r24	; 0x802732 <g_twi1_baro_valid>
					printf("TWI-onboard:  INIT success-\r\n");
    2aa8:	8f e9       	ldi	r24, 0x9F	; 159
    2aaa:	92 e2       	ldi	r25, 0x22	; 34
    2aac:	0e 94 a5 43 	call	0x874a	; 0x874a <puts>
    2ab0:	16 c0       	rjmp	.+44     	; 0x2ade <twi_start+0x342>
				}
			} else {
				printf("TWI-onboard:  BAD reading PROM address %d.\r\n", adr);
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	8c eb       	ldi	r24, 0xBC	; 188
    2ab8:	92 e2       	ldi	r25, 0x22	; 34
    2aba:	9f 93       	push	r25
    2abc:	8f 93       	push	r24
    2abe:	0e 94 92 43 	call	0x8724	; 0x8724 <printf>
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	09 c0       	rjmp	.+18     	; 0x2ade <twi_start+0x342>
			printf("TWI-onboard: Baro MS560702BA03-50 -     version: 0x%04X\r\n", g_twi1_baro_version);
		} else {
			printf("TWI-onboard:  BAD reading serial/CRC word.\r\n");
		}

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
    2acc:	21 96       	adiw	r28, 0x01	; 1
    2ace:	c8 30       	cpi	r28, 0x08	; 8
    2ad0:	d1 05       	cpc	r29, r1
    2ad2:	39 f6       	brne	.-114    	; 0x2a62 <twi_start+0x2c6>
    2ad4:	04 c0       	rjmp	.+8      	; 0x2ade <twi_start+0x342>
				printf("TWI-onboard:  BAD reading PROM address %d.\r\n", adr);
				break;
			}
		}
	} else {
		printf("TWI-onboard:  ... device not on board.\r\n");
    2ad6:	8d e5       	ldi	r24, 0x5D	; 93
    2ad8:	91 e2       	ldi	r25, 0x21	; 33
    2ada:	0e 94 a5 43 	call	0x874a	; 0x874a <puts>
	twi1_gyro_init();

	/* Device Baro MS560702BA03-50 - I2C address: 0x76 */
	twi1_baro_init();

	printf("-----------\r\n\r\n");
    2ade:	89 ee       	ldi	r24, 0xE9	; 233
    2ae0:	92 e2       	ldi	r25, 0x22	; 34
    2ae2:	0e 94 a5 43 	call	0x874a	; 0x874a <puts>
	#endif

	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
    2ae6:	61 ed       	ldi	r22, 0xD1	; 209
    2ae8:	72 e1       	ldi	r23, 0x12	; 18
    2aea:	83 e1       	ldi	r24, 0x13	; 19
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	f8 dd       	rcall	.-1040   	; 0x26e0 <__portable_avr_delay_cycles>

/* TWI2 - LCD Port */
static void start_twi2_lcd(void)
{
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
    2af0:	ea e0       	ldi	r30, 0x0A	; 10
    2af2:	f0 e2       	ldi	r31, 0x20	; 32
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	84 83       	std	Z+4, r24	; 0x04
    2afe:	95 83       	std	Z+5, r25	; 0x05
	twi2_packet.length = 1;
    2b00:	80 87       	std	Z+8, r24	; 0x08
    2b02:	91 87       	std	Z+9, r25	; 0x09
    2b04:	41 e0       	ldi	r20, 0x01	; 1
    2b06:	bf 01       	movw	r22, r30
    2b08:	80 e8       	ldi	r24, 0x80	; 128
    2b0a:	94 e0       	ldi	r25, 0x04	; 4
    2b0c:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
    2b10:	80 91 97 26 	lds	r24, 0x2697	; 0x802697 <twi2_m_data>
    2b14:	80 93 0d 27 	sts	0x270D, r24	; 0x80270d <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
    2b18:	81 31       	cpi	r24, 0x11	; 17
    2b1a:	08 f4       	brcc	.+2      	; 0x2b1e <twi_start+0x382>
    2b1c:	48 c0       	rjmp	.+144    	; 0x2bae <twi_start+0x412>
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
    2b1e:	ca e0       	ldi	r28, 0x0A	; 10
    2b20:	d0 e2       	ldi	r29, 0x20	; 32
    2b22:	82 e0       	ldi	r24, 0x02	; 2
    2b24:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = 0x10;
    2b26:	0f 2e       	mov	r0, r31
    2b28:	f7 e9       	ldi	r31, 0x97	; 151
    2b2a:	ef 2e       	mov	r14, r31
    2b2c:	f6 e2       	ldi	r31, 0x26	; 38
    2b2e:	ff 2e       	mov	r15, r31
    2b30:	f0 2d       	mov	r31, r0
    2b32:	80 e1       	ldi	r24, 0x10	; 16
    2b34:	f7 01       	movw	r30, r14
    2b36:	80 83       	st	Z, r24
		twi2_packet.length = 1;
    2b38:	01 e0       	ldi	r16, 0x01	; 1
    2b3a:	10 e0       	ldi	r17, 0x00	; 0
    2b3c:	08 87       	std	Y+8, r16	; 0x08
    2b3e:	19 87       	std	Y+9, r17	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	be 01       	movw	r22, r28
    2b44:	80 e8       	ldi	r24, 0x80	; 128
    2b46:	94 e0       	ldi	r25, 0x04	; 4
    2b48:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2b4c:	65 e0       	ldi	r22, 0x05	; 5
    2b4e:	70 e0       	ldi	r23, 0x00	; 0
    2b50:	80 e0       	ldi	r24, 0x00	; 0

		twi2_waitUntilReady();
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	c5 dd       	rcall	.-1142   	; 0x26e0 <__portable_avr_delay_cycles>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
    2b56:	cf dd       	rcall	.-1122   	; 0x26f6 <twi2_waitUntilReady>
    2b58:	84 e1       	ldi	r24, 0x14	; 20
		twi2_m_data[0] = GFX_PIXEL_SET;
    2b5a:	89 83       	std	Y+1, r24	; 0x01
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	f7 01       	movw	r30, r14
		twi2_packet.length = 1;
    2b60:	80 83       	st	Z, r24
    2b62:	08 87       	std	Y+8, r16	; 0x08
    2b64:	19 87       	std	Y+9, r17	; 0x09
    2b66:	40 e0       	ldi	r20, 0x00	; 0
    2b68:	be 01       	movw	r22, r28
    2b6a:	80 e8       	ldi	r24, 0x80	; 128
    2b6c:	94 e0       	ldi	r25, 0x04	; 4
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2b6e:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
    2b72:	65 e0       	ldi	r22, 0x05	; 5
    2b74:	70 e0       	ldi	r23, 0x00	; 0
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
	start_twi2_lcd();
}
    2b7a:	b2 dd       	rcall	.-1180   	; 0x26e0 <__portable_avr_delay_cycles>
    2b7c:	18 c0       	rjmp	.+48     	; 0x2bae <twi_start+0x412>
    2b7e:	0f 2e       	mov	r0, r31
    2b80:	f2 e2       	ldi	r31, 0x22	; 34
    2b82:	ef 2e       	mov	r14, r31
    2b84:	f7 e2       	ldi	r31, 0x27	; 39
    2b86:	ff 2e       	mov	r15, r31
	TWI2_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA2
	TWI2_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL2
	#endif
}

void twi_start(void) {
    2b88:	f0 2d       	mov	r31, r0
    2b8a:	c1 e0       	ldi	r28, 0x01	; 1
		} else {
			printf("TWI-onboard:  BAD reading serial/CRC word.\r\n");
		}

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
    2b8c:	d0 e0       	ldi	r29, 0x00	; 0
    2b8e:	0f 2e       	mov	r0, r31
    2b90:	fe e1       	ldi	r31, 0x1E	; 30
    2b92:	8f 2e       	mov	r8, r31
    2b94:	f0 e2       	ldi	r31, 0x20	; 32
    2b96:	9f 2e       	mov	r9, r31
			twi1_packet.addr_length = 1;
    2b98:	f0 2d       	mov	r31, r0
    2b9a:	aa 24       	eor	r10, r10
    2b9c:	a3 94       	inc	r10
			twi1_packet.length = 2;
    2b9e:	b1 2c       	mov	r11, r1
    2ba0:	68 94       	set
    2ba2:	cc 24       	eor	r12, r12
    2ba4:	c1 f8       	bld	r12, 1
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
				g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    2ba6:	d1 2c       	mov	r13, r1
    2ba8:	0f e9       	ldi	r16, 0x9F	; 159
    2baa:	16 e2       	ldi	r17, 0x26	; 38
	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
	start_twi2_lcd();
}
    2bac:	5a cf       	rjmp	.-332    	; 0x2a62 <twi_start+0x2c6>
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	1f 91       	pop	r17
    2bb4:	0f 91       	pop	r16
    2bb6:	ff 90       	pop	r15
    2bb8:	ef 90       	pop	r14
    2bba:	df 90       	pop	r13
    2bbc:	cf 90       	pop	r12
    2bbe:	bf 90       	pop	r11
    2bc0:	af 90       	pop	r10
    2bc2:	9f 90       	pop	r9
    2bc4:	8f 90       	pop	r8
    2bc6:	08 95       	ret

00002bc8 <service_10ms_twi1_onboard>:
	cpu_irq_restore(flags);
}

/* 10ms TWI1 - Gyro device */
void service_10ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    2bc8:	08 95       	ret

00002bca <service_500ms_twi1_onboard>:
	}
}

/* 500ms TWI1 - Baro, Hygro devices */
void service_500ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    2bca:	cf 92       	push	r12
    2bcc:	df 92       	push	r13
    2bce:	ef 92       	push	r14
    2bd0:	ff 92       	push	r15
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	1f 92       	push	r1
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
	if (g_twi1_hygro_valid) {
		service_twi1_hygro(now);
	}

	if (g_twi1_baro_valid) {
    2bdc:	80 91 32 27 	lds	r24, 0x2732	; 0x802732 <g_twi1_baro_valid>
    2be0:	88 23       	and	r24, r24
    2be2:	09 f4       	brne	.+2      	; 0x2be6 <service_500ms_twi1_onboard+0x1c>
    2be4:	8b c0       	rjmp	.+278    	; 0x2cfc <service_500ms_twi1_onboard+0x132>
static void service_twi1_baro(uint32_t now)
{
	uint32_t l_twi1_baro_d1 = 0UL;
	uint32_t l_twi1_baro_d2 = 0UL;

	twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    2be6:	ee e1       	ldi	r30, 0x1E	; 30
    2be8:	f0 e2       	ldi	r31, 0x20	; 32
    2bea:	86 e7       	ldi	r24, 0x76	; 118
    2bec:	80 83       	st	Z, r24
	twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D1_4096;
    2bee:	88 e4       	ldi	r24, 0x48	; 72
    2bf0:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr_length = 1;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	84 83       	std	Z+4, r24	; 0x04
    2bf8:	95 83       	std	Z+5, r25	; 0x05
	twi1_packet.length = 0;
    2bfa:	10 86       	std	Z+8, r1	; 0x08
    2bfc:	11 86       	std	Z+9, r1	; 0x09
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	bf 01       	movw	r22, r30
    2c02:	80 ea       	ldi	r24, 0xA0	; 160
    2c04:	94 e0       	ldi	r25, 0x04	; 4
    2c06:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
	status_code_t sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    2c0a:	81 11       	cpse	r24, r1
    2c0c:	23 c0       	rjmp	.+70     	; 0x2c54 <service_500ms_twi1_onboard+0x8a>
		delay_ms(10);
    2c0e:	61 e5       	ldi	r22, 0x51	; 81
    2c10:	73 ec       	ldi	r23, 0xC3	; 195
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	64 dd       	rcall	.-1336   	; 0x26e0 <__portable_avr_delay_cycles>

		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    2c18:	ee e1       	ldi	r30, 0x1E	; 30
    2c1a:	f0 e2       	ldi	r31, 0x20	; 32
    2c1c:	11 82       	std	Z+1, r1	; 0x01
		twi1_packet.length = 3;
    2c1e:	83 e0       	ldi	r24, 0x03	; 3
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	80 87       	std	Z+8, r24	; 0x08
    2c24:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2c26:	41 e0       	ldi	r20, 0x01	; 1
    2c28:	bf 01       	movw	r22, r30
    2c2a:	80 ea       	ldi	r24, 0xA0	; 160
    2c2c:	94 e0       	ldi	r25, 0x04	; 4
    2c2e:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc == STATUS_OK) {
    2c32:	81 11       	cpse	r24, r1
    2c34:	13 c0       	rjmp	.+38     	; 0x2c5c <service_500ms_twi1_onboard+0x92>
			l_twi1_baro_d1 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    2c36:	ef e9       	ldi	r30, 0x9F	; 159
    2c38:	f6 e2       	ldi	r31, 0x26	; 38
    2c3a:	80 81       	ld	r24, Z
    2c3c:	c1 80       	ldd	r12, Z+1	; 0x01
    2c3e:	d1 2c       	mov	r13, r1
    2c40:	e1 2c       	mov	r14, r1
    2c42:	f1 2c       	mov	r15, r1
    2c44:	fe 2c       	mov	r15, r14
    2c46:	ed 2c       	mov	r14, r13
    2c48:	dc 2c       	mov	r13, r12
    2c4a:	cc 24       	eor	r12, r12
    2c4c:	e8 2a       	or	r14, r24
    2c4e:	82 81       	ldd	r24, Z+2	; 0x02
    2c50:	c8 2a       	or	r12, r24
    2c52:	07 c0       	rjmp	.+14     	; 0x2c62 <service_500ms_twi1_onboard+0x98>
{
}

static void service_twi1_baro(uint32_t now)
{
	uint32_t l_twi1_baro_d1 = 0UL;
    2c54:	c1 2c       	mov	r12, r1
    2c56:	d1 2c       	mov	r13, r1
    2c58:	76 01       	movw	r14, r12
    2c5a:	03 c0       	rjmp	.+6      	; 0x2c62 <service_500ms_twi1_onboard+0x98>
    2c5c:	c1 2c       	mov	r12, r1
    2c5e:	d1 2c       	mov	r13, r1
    2c60:	76 01       	movw	r14, r12
		if (sc == STATUS_OK) {
			l_twi1_baro_d1 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
		}
	}

	twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D2_4096;
    2c62:	ee e1       	ldi	r30, 0x1E	; 30
    2c64:	f0 e2       	ldi	r31, 0x20	; 32
    2c66:	88 e5       	ldi	r24, 0x58	; 88
    2c68:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.length = 0;
    2c6a:	10 86       	std	Z+8, r1	; 0x08
    2c6c:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2c6e:	40 e0       	ldi	r20, 0x00	; 0
    2c70:	bf 01       	movw	r22, r30
    2c72:	80 ea       	ldi	r24, 0xA0	; 160
    2c74:	94 e0       	ldi	r25, 0x04	; 4
    2c76:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
	sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    2c7a:	81 11       	cpse	r24, r1
    2c7c:	23 c0       	rjmp	.+70     	; 0x2cc4 <service_500ms_twi1_onboard+0xfa>
		delay_ms(10);
    2c7e:	61 e5       	ldi	r22, 0x51	; 81
    2c80:	73 ec       	ldi	r23, 0xC3	; 195
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	2c dd       	rcall	.-1448   	; 0x26e0 <__portable_avr_delay_cycles>

		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    2c88:	ee e1       	ldi	r30, 0x1E	; 30
    2c8a:	f0 e2       	ldi	r31, 0x20	; 32
    2c8c:	11 82       	std	Z+1, r1	; 0x01
		twi1_packet.length = 3;
    2c8e:	83 e0       	ldi	r24, 0x03	; 3
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	80 87       	std	Z+8, r24	; 0x08
    2c94:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2c96:	41 e0       	ldi	r20, 0x01	; 1
    2c98:	bf 01       	movw	r22, r30
    2c9a:	80 ea       	ldi	r24, 0xA0	; 160
    2c9c:	94 e0       	ldi	r25, 0x04	; 4
    2c9e:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc == STATUS_OK) {
    2ca2:	81 11       	cpse	r24, r1
    2ca4:	13 c0       	rjmp	.+38     	; 0x2ccc <service_500ms_twi1_onboard+0x102>
			l_twi1_baro_d2 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    2ca6:	ef e9       	ldi	r30, 0x9F	; 159
    2ca8:	f6 e2       	ldi	r31, 0x26	; 38
    2caa:	20 81       	ld	r18, Z
    2cac:	81 81       	ldd	r24, Z+1	; 0x01
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	a0 e0       	ldi	r26, 0x00	; 0
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	ba 2f       	mov	r27, r26
    2cb6:	a9 2f       	mov	r26, r25
    2cb8:	98 2f       	mov	r25, r24
    2cba:	88 27       	eor	r24, r24
    2cbc:	a2 2b       	or	r26, r18
    2cbe:	22 81       	ldd	r18, Z+2	; 0x02
    2cc0:	82 2b       	or	r24, r18
    2cc2:	07 c0       	rjmp	.+14     	; 0x2cd2 <service_500ms_twi1_onboard+0x108>
}

static void service_twi1_baro(uint32_t now)
{
	uint32_t l_twi1_baro_d1 = 0UL;
	uint32_t l_twi1_baro_d2 = 0UL;
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	dc 01       	movw	r26, r24
    2cca:	03 c0       	rjmp	.+6      	; 0x2cd2 <service_500ms_twi1_onboard+0x108>
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	dc 01       	movw	r26, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2cd2:	2f b7       	in	r18, 0x3f	; 63
    2cd4:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2cd6:	f8 94       	cli
	return flags;
    2cd8:	29 81       	ldd	r18, Y+1	; 0x01
			l_twi1_baro_d2 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
		}
	}

	irqflags_t flags = cpu_irq_save();
	g_twi1_baro_d1 = l_twi1_baro_d1;
    2cda:	c0 92 1c 27 	sts	0x271C, r12	; 0x80271c <g_twi1_baro_d1>
    2cde:	d0 92 1d 27 	sts	0x271D, r13	; 0x80271d <g_twi1_baro_d1+0x1>
    2ce2:	e0 92 1e 27 	sts	0x271E, r14	; 0x80271e <g_twi1_baro_d1+0x2>
    2ce6:	f0 92 1f 27 	sts	0x271F, r15	; 0x80271f <g_twi1_baro_d1+0x3>
	g_twi1_baro_d2 = l_twi1_baro_d2;
    2cea:	80 93 18 27 	sts	0x2718, r24	; 0x802718 <g_twi1_baro_d2>
    2cee:	90 93 19 27 	sts	0x2719, r25	; 0x802719 <g_twi1_baro_d2+0x1>
    2cf2:	a0 93 1a 27 	sts	0x271A, r26	; 0x80271a <g_twi1_baro_d2+0x2>
    2cf6:	b0 93 1b 27 	sts	0x271B, r27	; 0x80271b <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2cfa:	2f bf       	out	0x3f, r18	; 63
	}

	if (g_twi1_baro_valid) {
		service_twi1_baro(now);
	}
}
    2cfc:	0f 90       	pop	r0
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	ff 90       	pop	r15
    2d04:	ef 90       	pop	r14
    2d06:	df 90       	pop	r13
    2d08:	cf 90       	pop	r12
    2d0a:	08 95       	ret

00002d0c <task_twi1_onboard>:
	}
}

/* TWI1 - onboard devices */
void task_twi1_onboard(uint32_t now)
{
    2d0c:	2f 92       	push	r2
    2d0e:	3f 92       	push	r3
    2d10:	4f 92       	push	r4
    2d12:	5f 92       	push	r5
    2d14:	6f 92       	push	r6
    2d16:	7f 92       	push	r7
    2d18:	8f 92       	push	r8
    2d1a:	9f 92       	push	r9
    2d1c:	af 92       	push	r10
    2d1e:	bf 92       	push	r11
    2d20:	cf 92       	push	r12
    2d22:	df 92       	push	r13
    2d24:	ef 92       	push	r14
    2d26:	ff 92       	push	r15
    2d28:	0f 93       	push	r16
    2d2a:	1f 93       	push	r17
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	e3 97       	sbiw	r28, 0x33	; 51
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	de bf       	out	0x3e, r29	; 62

	if (g_twi1_gyro_valid) {
		task_twi1_gyro(now);
	}

	if (g_twi1_baro_valid) {
    2d3a:	80 91 32 27 	lds	r24, 0x2732	; 0x802732 <g_twi1_baro_valid>
    2d3e:	88 23       	and	r24, r24
    2d40:	09 f4       	brne	.+2      	; 0x2d44 <task_twi1_onboard+0x38>
    2d42:	1f c2       	rjmp	.+1086   	; 0x3182 <task_twi1_onboard+0x476>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2d44:	8f b7       	in	r24, 0x3f	; 63
    2d46:	8b 8b       	std	Y+19, r24	; 0x13
	cpu_irq_disable();
    2d48:	f8 94       	cli
	return flags;
    2d4a:	8b 89       	ldd	r24, Y+19	; 0x13
{	// Calculations for the presentation layer
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	irqflags_t flags = cpu_irq_save();
	uint32_t l_twi1_baro_d1 = g_twi1_baro_d1;
    2d4c:	20 91 1c 27 	lds	r18, 0x271C	; 0x80271c <g_twi1_baro_d1>
    2d50:	30 91 1d 27 	lds	r19, 0x271D	; 0x80271d <g_twi1_baro_d1+0x1>
    2d54:	40 91 1e 27 	lds	r20, 0x271E	; 0x80271e <g_twi1_baro_d1+0x2>
    2d58:	50 91 1f 27 	lds	r21, 0x271F	; 0x80271f <g_twi1_baro_d1+0x3>
    2d5c:	2c a7       	std	Y+44, r18	; 0x2c
    2d5e:	3d a7       	std	Y+45, r19	; 0x2d
    2d60:	4e a7       	std	Y+46, r20	; 0x2e
    2d62:	5f a7       	std	Y+47, r21	; 0x2f
	uint32_t l_twi1_baro_d2 = g_twi1_baro_d2;
    2d64:	40 90 18 27 	lds	r4, 0x2718	; 0x802718 <g_twi1_baro_d2>
    2d68:	50 90 19 27 	lds	r5, 0x2719	; 0x802719 <g_twi1_baro_d2+0x1>
    2d6c:	60 90 1a 27 	lds	r6, 0x271A	; 0x80271a <g_twi1_baro_d2+0x2>
    2d70:	70 90 1b 27 	lds	r7, 0x271B	; 0x80271b <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d74:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	/* Calculate and present Baro and Temp values when a different measurement has arrived */
	if ((l_twi1_baro_d1 != s_twi1_baro_d1) || (l_twi1_baro_d2 != s_twi1_baro_d2)) {
    2d76:	23 2b       	or	r18, r19
    2d78:	24 2b       	or	r18, r20
    2d7a:	25 2b       	or	r18, r21
    2d7c:	31 f4       	brne	.+12     	; 0x2d8a <task_twi1_onboard+0x7e>
    2d7e:	41 14       	cp	r4, r1
    2d80:	51 04       	cpc	r5, r1
    2d82:	61 04       	cpc	r6, r1
    2d84:	71 04       	cpc	r7, r1
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <task_twi1_onboard+0x7e>
    2d88:	fc c1       	rjmp	.+1016   	; 0x3182 <task_twi1_onboard+0x476>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2d8a:	8f b7       	in	r24, 0x3f	; 63
    2d8c:	89 8b       	std	Y+17, r24	; 0x11
	cpu_irq_disable();
    2d8e:	f8 94       	cli
	return flags;
    2d90:	49 89       	ldd	r20, Y+17	; 0x11
    2d92:	a2 e2       	ldi	r26, 0x22	; 34
    2d94:	b7 e2       	ldi	r27, 0x27	; 39
    2d96:	fe 01       	movw	r30, r28
    2d98:	33 96       	adiw	r30, 0x03	; 3
    2d9a:	9e 01       	movw	r18, r28
    2d9c:	21 5f       	subi	r18, 0xF1	; 241
    2d9e:	3f 4f       	sbci	r19, 0xFF	; 255
		uint16_t l_twi1_baro_c[C_TWI1_BARO_C_CNT];
		uint8_t adr, cnt;

		flags = cpu_irq_save();
		for (adr = 1, cnt = C_TWI1_BARO_C_CNT - 2; cnt; --cnt, ++adr) {
			l_twi1_baro_c[adr] = g_twi1_baro_c[adr];
    2da0:	8d 91       	ld	r24, X+
    2da2:	9d 91       	ld	r25, X+
    2da4:	81 93       	st	Z+, r24
    2da6:	91 93       	st	Z+, r25
	if ((l_twi1_baro_d1 != s_twi1_baro_d1) || (l_twi1_baro_d2 != s_twi1_baro_d2)) {
		uint16_t l_twi1_baro_c[C_TWI1_BARO_C_CNT];
		uint8_t adr, cnt;

		flags = cpu_irq_save();
		for (adr = 1, cnt = C_TWI1_BARO_C_CNT - 2; cnt; --cnt, ++adr) {
    2da8:	e2 17       	cp	r30, r18
    2daa:	f3 07       	cpc	r31, r19
    2dac:	c9 f7       	brne	.-14     	; 0x2da0 <task_twi1_onboard+0x94>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2dae:	4f bf       	out	0x3f, r20	; 63
			l_twi1_baro_c[adr] = g_twi1_baro_c[adr];
		}
		cpu_irq_restore(flags);

		int32_t dT = (int32_t)l_twi1_baro_d2 - ((int32_t)l_twi1_baro_c[5] << 8);
    2db0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2db2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2db4:	a0 e0       	ldi	r26, 0x00	; 0
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	ba 2f       	mov	r27, r26
    2dba:	a9 2f       	mov	r26, r25
    2dbc:	98 2f       	mov	r25, r24
    2dbe:	88 27       	eor	r24, r24
    2dc0:	48 1a       	sub	r4, r24
    2dc2:	59 0a       	sbc	r5, r25
    2dc4:	6a 0a       	sbc	r6, r26
    2dc6:	7b 0a       	sbc	r7, r27
		int32_t temp_p20 = (dT * l_twi1_baro_c[6]) >> 23;
    2dc8:	ad 85       	ldd	r26, Y+13	; 0x0d
    2dca:	be 85       	ldd	r27, Y+14	; 0x0e
    2dcc:	a3 01       	movw	r20, r6
    2dce:	92 01       	movw	r18, r4
    2dd0:	0e 94 b1 40 	call	0x8162	; 0x8162 <__muluhisi3>
    2dd4:	9b 01       	movw	r18, r22
    2dd6:	ac 01       	movw	r20, r24
    2dd8:	01 2e       	mov	r0, r17
    2dda:	17 e1       	ldi	r17, 0x17	; 23
    2ddc:	55 95       	asr	r21
    2dde:	47 95       	ror	r20
    2de0:	37 95       	ror	r19
    2de2:	27 95       	ror	r18
    2de4:	1a 95       	dec	r17
    2de6:	d1 f7       	brne	.-12     	; 0x2ddc <task_twi1_onboard+0xd0>
    2de8:	10 2d       	mov	r17, r0
    2dea:	28 a7       	std	Y+40, r18	; 0x28
    2dec:	39 a7       	std	Y+41, r19	; 0x29
    2dee:	4a a7       	std	Y+42, r20	; 0x2a
    2df0:	5b a7       	std	Y+43, r21	; 0x2b
		int32_t temp = temp_p20 + 2000L;
    2df2:	20 53       	subi	r18, 0x30	; 48
    2df4:	38 4f       	sbci	r19, 0xF8	; 248
    2df6:	4f 4f       	sbci	r20, 0xFF	; 255
    2df8:	5f 4f       	sbci	r21, 0xFF	; 255
    2dfa:	2c a3       	std	Y+36, r18	; 0x24
    2dfc:	3d a3       	std	Y+37, r19	; 0x25
    2dfe:	4e a3       	std	Y+38, r20	; 0x26
    2e00:	5f a3       	std	Y+39, r21	; 0x27
		int64_t off  = ((int64_t)l_twi1_baro_c[2] << 17) + (((int64_t)l_twi1_baro_c[4] * dT) >> 6);
    2e02:	b3 01       	movw	r22, r6
    2e04:	a2 01       	movw	r20, r4
    2e06:	77 0f       	add	r23, r23
    2e08:	44 0b       	sbc	r20, r20
    2e0a:	54 2f       	mov	r21, r20
    2e0c:	ba 01       	movw	r22, r20
    2e0e:	4c 8b       	std	Y+20, r20	; 0x14
    2e10:	5d 8b       	std	Y+21, r21	; 0x15
    2e12:	6e 8b       	std	Y+22, r22	; 0x16
    2e14:	7f 8b       	std	Y+23, r23	; 0x17
    2e16:	49 85       	ldd	r20, Y+9	; 0x09
    2e18:	5a 85       	ldd	r21, Y+10	; 0x0a
    2e1a:	a4 2c       	mov	r10, r4
    2e1c:	b5 2c       	mov	r11, r5
    2e1e:	c6 2c       	mov	r12, r6
    2e20:	d7 2c       	mov	r13, r7
    2e22:	ec 88       	ldd	r14, Y+20	; 0x14
    2e24:	fe 2c       	mov	r15, r14
    2e26:	0e 2d       	mov	r16, r14
    2e28:	1e 2d       	mov	r17, r14
    2e2a:	24 2f       	mov	r18, r20
    2e2c:	35 2f       	mov	r19, r21
    2e2e:	40 e0       	ldi	r20, 0x00	; 0
    2e30:	50 e0       	ldi	r21, 0x00	; 0
    2e32:	60 e0       	ldi	r22, 0x00	; 0
    2e34:	70 e0       	ldi	r23, 0x00	; 0
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	0e 94 bb 40 	call	0x8176	; 0x8176 <__muldi3>
    2e3e:	06 e0       	ldi	r16, 0x06	; 6
    2e40:	0e 94 25 41 	call	0x824a	; 0x824a <__ashrdi3>
    2e44:	22 2e       	mov	r2, r18
    2e46:	33 2e       	mov	r3, r19
    2e48:	84 2e       	mov	r8, r20
    2e4a:	95 2e       	mov	r9, r21
    2e4c:	b6 2f       	mov	r27, r22
    2e4e:	a7 2f       	mov	r26, r23
    2e50:	f8 2f       	mov	r31, r24
    2e52:	e9 2f       	mov	r30, r25
    2e54:	ad 80       	ldd	r10, Y+5	; 0x05
    2e56:	be 80       	ldd	r11, Y+6	; 0x06
    2e58:	2a 2d       	mov	r18, r10
    2e5a:	3b 2d       	mov	r19, r11
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	50 e0       	ldi	r21, 0x00	; 0
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	70 e0       	ldi	r23, 0x00	; 0
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	01 e1       	ldi	r16, 0x11	; 17
    2e6a:	0e 94 0c 41 	call	0x8218	; 0x8218 <__ashldi3>
    2e6e:	a2 2e       	mov	r10, r18
    2e70:	b3 2e       	mov	r11, r19
    2e72:	c4 2e       	mov	r12, r20
    2e74:	d5 2e       	mov	r13, r21
    2e76:	e6 2e       	mov	r14, r22
    2e78:	f7 2e       	mov	r15, r23
    2e7a:	08 2f       	mov	r16, r24
    2e7c:	19 2f       	mov	r17, r25
    2e7e:	22 2d       	mov	r18, r2
    2e80:	33 2d       	mov	r19, r3
    2e82:	48 2d       	mov	r20, r8
    2e84:	59 2d       	mov	r21, r9
    2e86:	6b 2f       	mov	r22, r27
    2e88:	7a 2f       	mov	r23, r26
    2e8a:	8f 2f       	mov	r24, r31
    2e8c:	9e 2f       	mov	r25, r30
    2e8e:	0e 94 43 41 	call	0x8286	; 0x8286 <__adddi3>
    2e92:	2c 8f       	std	Y+28, r18	; 0x1c
    2e94:	3d 8f       	std	Y+29, r19	; 0x1d
    2e96:	4e 8f       	std	Y+30, r20	; 0x1e
    2e98:	5f 8f       	std	Y+31, r21	; 0x1f
    2e9a:	68 a3       	std	Y+32, r22	; 0x20
    2e9c:	79 a3       	std	Y+33, r23	; 0x21
    2e9e:	8a a3       	std	Y+34, r24	; 0x22
    2ea0:	9b a3       	std	Y+35, r25	; 0x23
		int64_t sens = ((int64_t)l_twi1_baro_c[1] << 16) + (((int64_t)l_twi1_baro_c[3] * dT) >> 7);
    2ea2:	4f 81       	ldd	r20, Y+7	; 0x07
    2ea4:	58 85       	ldd	r21, Y+8	; 0x08
    2ea6:	a4 2c       	mov	r10, r4
    2ea8:	b5 2c       	mov	r11, r5
    2eaa:	c6 2c       	mov	r12, r6
    2eac:	d7 2c       	mov	r13, r7
    2eae:	ec 88       	ldd	r14, Y+20	; 0x14
    2eb0:	fe 2c       	mov	r15, r14
    2eb2:	0e 2d       	mov	r16, r14
    2eb4:	1e 2d       	mov	r17, r14
    2eb6:	24 2f       	mov	r18, r20
    2eb8:	35 2f       	mov	r19, r21
    2eba:	40 e0       	ldi	r20, 0x00	; 0
    2ebc:	50 e0       	ldi	r21, 0x00	; 0
    2ebe:	60 e0       	ldi	r22, 0x00	; 0
    2ec0:	70 e0       	ldi	r23, 0x00	; 0
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	0e 94 bb 40 	call	0x8176	; 0x8176 <__muldi3>
    2eca:	07 e0       	ldi	r16, 0x07	; 7
    2ecc:	0e 94 25 41 	call	0x824a	; 0x824a <__ashrdi3>
    2ed0:	22 2e       	mov	r2, r18
    2ed2:	33 2e       	mov	r3, r19
    2ed4:	84 2e       	mov	r8, r20
    2ed6:	95 2e       	mov	r9, r21
    2ed8:	b6 2f       	mov	r27, r22
    2eda:	a7 2f       	mov	r26, r23
    2edc:	f8 2f       	mov	r31, r24
    2ede:	e9 2f       	mov	r30, r25
    2ee0:	ab 80       	ldd	r10, Y+3	; 0x03
    2ee2:	bc 80       	ldd	r11, Y+4	; 0x04
    2ee4:	2a 2d       	mov	r18, r10
    2ee6:	3b 2d       	mov	r19, r11
    2ee8:	40 e0       	ldi	r20, 0x00	; 0
    2eea:	50 e0       	ldi	r21, 0x00	; 0
    2eec:	60 e0       	ldi	r22, 0x00	; 0
    2eee:	70 e0       	ldi	r23, 0x00	; 0
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	00 e1       	ldi	r16, 0x10	; 16
    2ef6:	0e 94 0c 41 	call	0x8218	; 0x8218 <__ashldi3>
    2efa:	a2 2e       	mov	r10, r18
    2efc:	b3 2e       	mov	r11, r19
    2efe:	c4 2e       	mov	r12, r20
    2f00:	d5 2e       	mov	r13, r21
    2f02:	e6 2e       	mov	r14, r22
    2f04:	f7 2e       	mov	r15, r23
    2f06:	08 2f       	mov	r16, r24
    2f08:	19 2f       	mov	r17, r25
    2f0a:	22 2d       	mov	r18, r2
    2f0c:	33 2d       	mov	r19, r3
    2f0e:	48 2d       	mov	r20, r8
    2f10:	59 2d       	mov	r21, r9
    2f12:	6b 2f       	mov	r22, r27
    2f14:	7a 2f       	mov	r23, r26
    2f16:	8f 2f       	mov	r24, r31
    2f18:	9e 2f       	mov	r25, r30
    2f1a:	0e 94 43 41 	call	0x8286	; 0x8286 <__adddi3>
    2f1e:	32 2e       	mov	r3, r18
    2f20:	23 2e       	mov	r2, r19
    2f22:	48 ab       	std	Y+48, r20	; 0x30
    2f24:	59 ab       	std	Y+49, r21	; 0x31
    2f26:	6a ab       	std	Y+50, r22	; 0x32
    2f28:	7b ab       	std	Y+51, r23	; 0x33
    2f2a:	98 2e       	mov	r9, r24
    2f2c:	89 2e       	mov	r8, r25

		/* Low temp and very low temp corrections */
		if (temp < 2000L) {
    2f2e:	6c a1       	ldd	r22, Y+36	; 0x24
    2f30:	7d a1       	ldd	r23, Y+37	; 0x25
    2f32:	8e a1       	ldd	r24, Y+38	; 0x26
    2f34:	9f a1       	ldd	r25, Y+39	; 0x27
    2f36:	60 3d       	cpi	r22, 0xD0	; 208
    2f38:	77 40       	sbci	r23, 0x07	; 7
    2f3a:	81 05       	cpc	r24, r1
    2f3c:	91 05       	cpc	r25, r1
    2f3e:	0c f0       	brlt	.+2      	; 0x2f42 <task_twi1_onboard+0x236>
    2f40:	d0 c0       	rjmp	.+416    	; 0x30e2 <task_twi1_onboard+0x3d6>
			int32_t t2 = (int32_t)(((int64_t)dT * (int64_t)dT) >> 31);
    2f42:	a4 2c       	mov	r10, r4
    2f44:	b5 2c       	mov	r11, r5
    2f46:	c6 2c       	mov	r12, r6
    2f48:	d7 2c       	mov	r13, r7
    2f4a:	ec 88       	ldd	r14, Y+20	; 0x14
    2f4c:	fe 2c       	mov	r15, r14
    2f4e:	0e 2d       	mov	r16, r14
    2f50:	1e 2d       	mov	r17, r14
    2f52:	24 2d       	mov	r18, r4
    2f54:	35 2d       	mov	r19, r5
    2f56:	46 2d       	mov	r20, r6
    2f58:	57 2d       	mov	r21, r7
    2f5a:	60 2f       	mov	r22, r16
    2f5c:	70 2f       	mov	r23, r16
    2f5e:	80 2f       	mov	r24, r16
    2f60:	9e 2d       	mov	r25, r14
    2f62:	0e 94 bb 40 	call	0x8176	; 0x8176 <__muldi3>
    2f66:	0f e1       	ldi	r16, 0x1F	; 31
    2f68:	0e 94 25 41 	call	0x824a	; 0x824a <__ashrdi3>
    2f6c:	2c 8b       	std	Y+20, r18	; 0x14
    2f6e:	3d 8b       	std	Y+21, r19	; 0x15
    2f70:	4e 8b       	std	Y+22, r20	; 0x16
    2f72:	5f 8b       	std	Y+23, r21	; 0x17
			int32_t temp_p20_2 = temp_p20 * temp_p20;
    2f74:	28 a5       	ldd	r18, Y+40	; 0x28
    2f76:	39 a5       	ldd	r19, Y+41	; 0x29
    2f78:	4a a5       	ldd	r20, Y+42	; 0x2a
    2f7a:	5b a5       	ldd	r21, Y+43	; 0x2b
    2f7c:	ca 01       	movw	r24, r20
    2f7e:	b9 01       	movw	r22, r18
    2f80:	0e 94 42 40 	call	0x8084	; 0x8084 <__mulsi3>
    2f84:	2b 01       	movw	r4, r22
    2f86:	3c 01       	movw	r6, r24
			int32_t off2 = (61 * temp_p20_2) >> 4;
    2f88:	ad e3       	ldi	r26, 0x3D	; 61
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	9b 01       	movw	r18, r22
    2f8e:	ac 01       	movw	r20, r24
    2f90:	0e 94 b1 40 	call	0x8162	; 0x8162 <__muluhisi3>
    2f94:	7b 01       	movw	r14, r22
    2f96:	8c 01       	movw	r16, r24
    2f98:	68 94       	set
    2f9a:	13 f8       	bld	r1, 3
    2f9c:	15 95       	asr	r17
    2f9e:	07 95       	ror	r16
    2fa0:	f7 94       	ror	r15
    2fa2:	e7 94       	ror	r14
    2fa4:	16 94       	lsr	r1
    2fa6:	d1 f7       	brne	.-12     	; 0x2f9c <task_twi1_onboard+0x290>
			int32_t sens2 = temp_p20_2 << 1;
    2fa8:	44 0c       	add	r4, r4
    2faa:	55 1c       	adc	r5, r5
    2fac:	66 1c       	adc	r6, r6
    2fae:	77 1c       	adc	r7, r7

			if (temp < -1500L) {
    2fb0:	2c a1       	ldd	r18, Y+36	; 0x24
    2fb2:	3d a1       	ldd	r19, Y+37	; 0x25
    2fb4:	4e a1       	ldd	r20, Y+38	; 0x26
    2fb6:	5f a1       	ldd	r21, Y+39	; 0x27
    2fb8:	24 32       	cpi	r18, 0x24	; 36
    2fba:	3a 4f       	sbci	r19, 0xFA	; 250
    2fbc:	4f 4f       	sbci	r20, 0xFF	; 255
    2fbe:	5f 4f       	sbci	r21, 0xFF	; 255
    2fc0:	c4 f5       	brge	.+112    	; 0x3032 <task_twi1_onboard+0x326>
				int32_t temp_m15 = temp + 1500L;
    2fc2:	68 a5       	ldd	r22, Y+40	; 0x28
    2fc4:	79 a5       	ldd	r23, Y+41	; 0x29
    2fc6:	8a a5       	ldd	r24, Y+42	; 0x2a
    2fc8:	9b a5       	ldd	r25, Y+43	; 0x2b
    2fca:	64 55       	subi	r22, 0x54	; 84
    2fcc:	72 4f       	sbci	r23, 0xF2	; 242
    2fce:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd0:	9f 4f       	sbci	r25, 0xFF	; 255
				int32_t temp_m15_2 = temp_m15 * temp_m15;
    2fd2:	9b 01       	movw	r18, r22
    2fd4:	ac 01       	movw	r20, r24
    2fd6:	0e 94 42 40 	call	0x8084	; 0x8084 <__mulsi3>
				off2 += 15 * temp_m15_2;
    2fda:	9b 01       	movw	r18, r22
    2fdc:	ac 01       	movw	r20, r24
    2fde:	22 0f       	add	r18, r18
    2fe0:	33 1f       	adc	r19, r19
    2fe2:	44 1f       	adc	r20, r20
    2fe4:	55 1f       	adc	r21, r21
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	82 0f       	add	r24, r18
    2fec:	93 1f       	adc	r25, r19
    2fee:	a4 1f       	adc	r26, r20
    2ff0:	b5 1f       	adc	r27, r21
    2ff2:	5c 01       	movw	r10, r24
    2ff4:	6d 01       	movw	r12, r26
    2ff6:	aa 0c       	add	r10, r10
    2ff8:	bb 1c       	adc	r11, r11
    2ffa:	cc 1c       	adc	r12, r12
    2ffc:	dd 1c       	adc	r13, r13
    2ffe:	aa 0c       	add	r10, r10
    3000:	bb 1c       	adc	r11, r11
    3002:	cc 1c       	adc	r12, r12
    3004:	dd 1c       	adc	r13, r13
    3006:	8a 0d       	add	r24, r10
    3008:	9b 1d       	adc	r25, r11
    300a:	ac 1d       	adc	r26, r12
    300c:	bd 1d       	adc	r27, r13
    300e:	e8 0e       	add	r14, r24
    3010:	f9 1e       	adc	r15, r25
    3012:	0a 1f       	adc	r16, r26
    3014:	1b 1f       	adc	r17, r27
				sens2 += 8 * temp_m15_2;
    3016:	da 01       	movw	r26, r20
    3018:	c9 01       	movw	r24, r18
    301a:	88 0f       	add	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	aa 1f       	adc	r26, r26
    3020:	bb 1f       	adc	r27, r27
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	aa 1f       	adc	r26, r26
    3028:	bb 1f       	adc	r27, r27
    302a:	48 0e       	add	r4, r24
    302c:	59 1e       	adc	r5, r25
    302e:	6a 1e       	adc	r6, r26
    3030:	7b 1e       	adc	r7, r27
			}
			temp -= t2;
    3032:	8c a1       	ldd	r24, Y+36	; 0x24
    3034:	9d a1       	ldd	r25, Y+37	; 0x25
    3036:	ae a1       	ldd	r26, Y+38	; 0x26
    3038:	bf a1       	ldd	r27, Y+39	; 0x27
    303a:	2c 89       	ldd	r18, Y+20	; 0x14
    303c:	3d 89       	ldd	r19, Y+21	; 0x15
    303e:	4e 89       	ldd	r20, Y+22	; 0x16
    3040:	5f 89       	ldd	r21, Y+23	; 0x17
    3042:	82 1b       	sub	r24, r18
    3044:	93 0b       	sbc	r25, r19
    3046:	a4 0b       	sbc	r26, r20
    3048:	b5 0b       	sbc	r27, r21
    304a:	8c a3       	std	Y+36, r24	; 0x24
    304c:	9d a3       	std	Y+37, r25	; 0x25
    304e:	ae a3       	std	Y+38, r26	; 0x26
    3050:	bf a3       	std	Y+39, r27	; 0x27
			off  -= off2;
    3052:	b8 01       	movw	r22, r16
    3054:	a7 01       	movw	r20, r14
    3056:	77 0f       	add	r23, r23
    3058:	44 0b       	sbc	r20, r20
    305a:	54 2f       	mov	r21, r20
    305c:	ba 01       	movw	r22, r20
    305e:	4c 8b       	std	Y+20, r20	; 0x14
    3060:	5d 8b       	std	Y+21, r21	; 0x15
    3062:	6e 8b       	std	Y+22, r22	; 0x16
    3064:	7f 8b       	std	Y+23, r23	; 0x17
    3066:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3068:	3d 8d       	ldd	r19, Y+29	; 0x1d
    306a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    306c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    306e:	68 a1       	ldd	r22, Y+32	; 0x20
    3070:	79 a1       	ldd	r23, Y+33	; 0x21
    3072:	8a a1       	ldd	r24, Y+34	; 0x22
    3074:	9b a1       	ldd	r25, Y+35	; 0x23
    3076:	ae 2c       	mov	r10, r14
    3078:	bf 2c       	mov	r11, r15
    307a:	c0 2e       	mov	r12, r16
    307c:	d1 2e       	mov	r13, r17
    307e:	ec 88       	ldd	r14, Y+20	; 0x14
    3080:	fe 2c       	mov	r15, r14
    3082:	0e 2d       	mov	r16, r14
    3084:	1e 2d       	mov	r17, r14
    3086:	0e 94 4c 41 	call	0x8298	; 0x8298 <__subdi3>
    308a:	2c 8f       	std	Y+28, r18	; 0x1c
    308c:	3d 8f       	std	Y+29, r19	; 0x1d
    308e:	4e 8f       	std	Y+30, r20	; 0x1e
    3090:	5f 8f       	std	Y+31, r21	; 0x1f
    3092:	68 a3       	std	Y+32, r22	; 0x20
    3094:	79 a3       	std	Y+33, r23	; 0x21
    3096:	8a a3       	std	Y+34, r24	; 0x22
    3098:	9b a3       	std	Y+35, r25	; 0x23
			sens -= sens2;
    309a:	c3 01       	movw	r24, r6
    309c:	b2 01       	movw	r22, r4
    309e:	99 0f       	add	r25, r25
    30a0:	66 0b       	sbc	r22, r22
    30a2:	76 2f       	mov	r23, r22
    30a4:	cb 01       	movw	r24, r22
    30a6:	6c 8b       	std	Y+20, r22	; 0x14
    30a8:	7d 8b       	std	Y+21, r23	; 0x15
    30aa:	8e 8b       	std	Y+22, r24	; 0x16
    30ac:	9f 8b       	std	Y+23, r25	; 0x17
    30ae:	23 2d       	mov	r18, r3
    30b0:	32 2d       	mov	r19, r2
    30b2:	48 a9       	ldd	r20, Y+48	; 0x30
    30b4:	59 a9       	ldd	r21, Y+49	; 0x31
    30b6:	6a a9       	ldd	r22, Y+50	; 0x32
    30b8:	7b a9       	ldd	r23, Y+51	; 0x33
    30ba:	89 2d       	mov	r24, r9
    30bc:	98 2d       	mov	r25, r8
    30be:	a4 2c       	mov	r10, r4
    30c0:	b5 2c       	mov	r11, r5
    30c2:	c6 2c       	mov	r12, r6
    30c4:	d7 2c       	mov	r13, r7
    30c6:	ec 88       	ldd	r14, Y+20	; 0x14
    30c8:	fe 2c       	mov	r15, r14
    30ca:	0e 2d       	mov	r16, r14
    30cc:	1e 2d       	mov	r17, r14
    30ce:	0e 94 4c 41 	call	0x8298	; 0x8298 <__subdi3>
    30d2:	32 2e       	mov	r3, r18
    30d4:	23 2e       	mov	r2, r19
    30d6:	48 ab       	std	Y+48, r20	; 0x30
    30d8:	59 ab       	std	Y+49, r21	; 0x31
    30da:	6a ab       	std	Y+50, r22	; 0x32
    30dc:	7b ab       	std	Y+51, r23	; 0x33
    30de:	98 2e       	mov	r9, r24
    30e0:	89 2e       	mov	r8, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    30e2:	8f b7       	in	r24, 0x3f	; 63
    30e4:	8a 8b       	std	Y+18, r24	; 0x12
	cpu_irq_disable();
    30e6:	f8 94       	cli
	return flags;
    30e8:	7a 88       	ldd	r7, Y+18	; 0x12
		}
		int32_t p = (int32_t)(((l_twi1_baro_d1 * sens) >> 21) - off) >> 15;

		flags = cpu_irq_save();
		g_twi1_baro_temp_100 = temp;
    30ea:	8c a1       	ldd	r24, Y+36	; 0x24
    30ec:	9d a1       	ldd	r25, Y+37	; 0x25
    30ee:	ae a1       	ldd	r26, Y+38	; 0x26
    30f0:	bf a1       	ldd	r27, Y+39	; 0x27
    30f2:	80 93 14 27 	sts	0x2714, r24	; 0x802714 <g_twi1_baro_temp_100>
    30f6:	90 93 15 27 	sts	0x2715, r25	; 0x802715 <g_twi1_baro_temp_100+0x1>
    30fa:	a0 93 16 27 	sts	0x2716, r26	; 0x802716 <g_twi1_baro_temp_100+0x2>
    30fe:	b0 93 17 27 	sts	0x2717, r27	; 0x802717 <g_twi1_baro_temp_100+0x3>
		g_twi1_baro_p_100 = p;
    3102:	4c a5       	ldd	r20, Y+44	; 0x2c
    3104:	5d a5       	ldd	r21, Y+45	; 0x2d
    3106:	6e a5       	ldd	r22, Y+46	; 0x2e
    3108:	7f a5       	ldd	r23, Y+47	; 0x2f
    310a:	9a 01       	movw	r18, r20
    310c:	ab 01       	movw	r20, r22
    310e:	60 e0       	ldi	r22, 0x00	; 0
    3110:	70 e0       	ldi	r23, 0x00	; 0
    3112:	cb 01       	movw	r24, r22
    3114:	2c 8b       	std	Y+20, r18	; 0x14
    3116:	3d 8b       	std	Y+21, r19	; 0x15
    3118:	4e 8b       	std	Y+22, r20	; 0x16
    311a:	5f 8b       	std	Y+23, r21	; 0x17
    311c:	68 8f       	std	Y+24, r22	; 0x18
    311e:	79 8f       	std	Y+25, r23	; 0x19
    3120:	8a 8f       	std	Y+26, r24	; 0x1a
    3122:	9b 8f       	std	Y+27, r25	; 0x1b
    3124:	a3 2c       	mov	r10, r3
    3126:	b2 2c       	mov	r11, r2
    3128:	c8 a8       	ldd	r12, Y+48	; 0x30
    312a:	d9 a8       	ldd	r13, Y+49	; 0x31
    312c:	ea a8       	ldd	r14, Y+50	; 0x32
    312e:	fb a8       	ldd	r15, Y+51	; 0x33
    3130:	09 2d       	mov	r16, r9
    3132:	18 2d       	mov	r17, r8
    3134:	60 e0       	ldi	r22, 0x00	; 0
    3136:	70 e0       	ldi	r23, 0x00	; 0
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	0e 94 bb 40 	call	0x8176	; 0x8176 <__muldi3>
    3140:	05 e1       	ldi	r16, 0x15	; 21
    3142:	0e 94 25 41 	call	0x824a	; 0x824a <__ashrdi3>
    3146:	82 2e       	mov	r8, r18
    3148:	93 2e       	mov	r9, r19
    314a:	a4 2e       	mov	r10, r20
    314c:	b5 2e       	mov	r11, r21
    314e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3150:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3152:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3154:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3156:	86 1a       	sub	r8, r22
    3158:	97 0a       	sbc	r9, r23
    315a:	a8 0a       	sbc	r10, r24
    315c:	b9 0a       	sbc	r11, r25
    315e:	07 2e       	mov	r0, r23
    3160:	7f e0       	ldi	r23, 0x0F	; 15
    3162:	b5 94       	asr	r11
    3164:	a7 94       	ror	r10
    3166:	97 94       	ror	r9
    3168:	87 94       	ror	r8
    316a:	7a 95       	dec	r23
    316c:	d1 f7       	brne	.-12     	; 0x3162 <task_twi1_onboard+0x456>
    316e:	70 2d       	mov	r23, r0
    3170:	80 92 10 27 	sts	0x2710, r8	; 0x802710 <g_twi1_baro_p_100>
    3174:	90 92 11 27 	sts	0x2711, r9	; 0x802711 <g_twi1_baro_p_100+0x1>
    3178:	a0 92 12 27 	sts	0x2712, r10	; 0x802712 <g_twi1_baro_p_100+0x2>
    317c:	b0 92 13 27 	sts	0x2713, r11	; 0x802713 <g_twi1_baro_p_100+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3180:	7f be       	out	0x3f, r7	; 63
	}

	if (g_twi1_baro_valid) {
		task_twi1_baro(now);
	}
}
    3182:	e3 96       	adiw	r28, 0x33	; 51
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	df 91       	pop	r29
    318a:	cf 91       	pop	r28
    318c:	1f 91       	pop	r17
    318e:	0f 91       	pop	r16
    3190:	ff 90       	pop	r15
    3192:	ef 90       	pop	r14
    3194:	df 90       	pop	r13
    3196:	cf 90       	pop	r12
    3198:	bf 90       	pop	r11
    319a:	af 90       	pop	r10
    319c:	9f 90       	pop	r9
    319e:	8f 90       	pop	r8
    31a0:	7f 90       	pop	r7
    31a2:	6f 90       	pop	r6
    31a4:	5f 90       	pop	r5
    31a6:	4f 90       	pop	r4
    31a8:	3f 90       	pop	r3
    31aa:	2f 90       	pop	r2
    31ac:	08 95       	ret

000031ae <task_twi2_lcd>:

/* TWI2 - LCD Port */
void task_twi2_lcd(uint32_t now)
{
    31ae:	9f 92       	push	r9
    31b0:	af 92       	push	r10
    31b2:	bf 92       	push	r11
    31b4:	cf 92       	push	r12
    31b6:	df 92       	push	r13
    31b8:	ef 92       	push	r14
    31ba:	ff 92       	push	r15
    31bc:	0f 93       	push	r16
    31be:	1f 93       	push	r17
    31c0:	cf 93       	push	r28
    31c2:	df 93       	push	r29
    31c4:	1f 92       	push	r1
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	8b 01       	movw	r16, r22
    31cc:	9c 01       	movw	r18, r24
	static uint32_t lcd_last = 0UL;
	irqflags_t flags = 0;

	if (((now - lcd_last) >= 512) || (now < lcd_last)) {
    31ce:	80 91 d5 23 	lds	r24, 0x23D5	; 0x8023d5 <lcd_last.7364>
    31d2:	90 91 d6 23 	lds	r25, 0x23D6	; 0x8023d6 <lcd_last.7364+0x1>
    31d6:	a0 91 d7 23 	lds	r26, 0x23D7	; 0x8023d7 <lcd_last.7364+0x2>
    31da:	b0 91 d8 23 	lds	r27, 0x23D8	; 0x8023d8 <lcd_last.7364+0x3>
    31de:	b9 01       	movw	r22, r18
    31e0:	a8 01       	movw	r20, r16
    31e2:	48 1b       	sub	r20, r24
    31e4:	59 0b       	sbc	r21, r25
    31e6:	6a 0b       	sbc	r22, r26
    31e8:	7b 0b       	sbc	r23, r27
    31ea:	41 15       	cp	r20, r1
    31ec:	52 40       	sbci	r21, 0x02	; 2
    31ee:	61 05       	cpc	r22, r1
    31f0:	71 05       	cpc	r23, r1
    31f2:	30 f4       	brcc	.+12     	; 0x3200 <task_twi2_lcd+0x52>
    31f4:	08 17       	cp	r16, r24
    31f6:	19 07       	cpc	r17, r25
    31f8:	2a 07       	cpc	r18, r26
    31fa:	3b 07       	cpc	r19, r27
    31fc:	08 f0       	brcs	.+2      	; 0x3200 <task_twi2_lcd+0x52>
    31fe:	58 c0       	rjmp	.+176    	; 0x32b0 <task_twi2_lcd+0x102>
		lcd_last = now;
    3200:	00 93 d5 23 	sts	0x23D5, r16	; 0x8023d5 <lcd_last.7364>
    3204:	10 93 d6 23 	sts	0x23D6, r17	; 0x8023d6 <lcd_last.7364+0x1>
    3208:	20 93 d7 23 	sts	0x23D7, r18	; 0x8023d7 <lcd_last.7364+0x2>
    320c:	30 93 d8 23 	sts	0x23D8, r19	; 0x8023d8 <lcd_last.7364+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3210:	8f b7       	in	r24, 0x3f	; 63
    3212:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3214:	f8 94       	cli
	return flags;
    3216:	b9 81       	ldd	r27, Y+1	; 0x01

		flags = cpu_irq_save();
		int16_t l_adc_vctcxo_volt_1000	= g_adc_vctcxo_volt_1000;
    3218:	40 91 b1 26 	lds	r20, 0x26B1	; 0x8026b1 <g_adc_vctcxo_volt_1000>
    321c:	e0 91 b2 26 	lds	r30, 0x26B2	; 0x8026b2 <g_adc_vctcxo_volt_1000+0x1>
		int16_t l_adc_5v0_volt_1000		= g_adc_5v0_volt_1000;
    3220:	f0 91 af 26 	lds	r31, 0x26AF	; 0x8026af <g_adc_5v0_volt_1000>
    3224:	f0 90 b0 26 	lds	r15, 0x26B0	; 0x8026b0 <g_adc_5v0_volt_1000+0x1>
		int16_t l_adc_vbat_volt_1000	= g_adc_vbat_volt_1000;
    3228:	e0 90 ad 26 	lds	r14, 0x26AD	; 0x8026ad <g_adc_vbat_volt_1000>
    322c:	d0 90 ae 26 	lds	r13, 0x26AE	; 0x8026ae <g_adc_vbat_volt_1000+0x1>
		int16_t l_adc_io_adc4_volt_1000	= g_adc_io_adc4_volt_1000;
    3230:	c0 90 ab 26 	lds	r12, 0x26AB	; 0x8026ab <g_adc_io_adc4_volt_1000>
    3234:	b0 90 ac 26 	lds	r11, 0x26AC	; 0x8026ac <g_adc_io_adc4_volt_1000+0x1>
		int16_t l_adc_io_adc5_volt_1000	= g_adc_io_adc5_volt_1000;
    3238:	a0 90 a9 26 	lds	r10, 0x26A9	; 0x8026a9 <g_adc_io_adc5_volt_1000>
    323c:	90 90 aa 26 	lds	r9, 0x26AA	; 0x8026aa <g_adc_io_adc5_volt_1000+0x1>
		int16_t l_adc_temp_deg_100		= g_adc_temp_deg_100;
    3240:	80 91 a7 26 	lds	r24, 0x26A7	; 0x8026a7 <g_adc_temp_deg_100>
    3244:	90 91 a8 26 	lds	r25, 0x26A8	; 0x8026a8 <g_adc_temp_deg_100+0x1>
		int32_t l_adc_temp_cur			= g_adc_temp_cur;
    3248:	50 91 b9 26 	lds	r21, 0x26B9	; 0x8026b9 <g_adc_temp_cur>
    324c:	60 91 ba 26 	lds	r22, 0x26BA	; 0x8026ba <g_adc_temp_cur+0x1>
    3250:	70 91 bb 26 	lds	r23, 0x26BB	; 0x8026bb <g_adc_temp_cur+0x2>
    3254:	a0 91 bc 26 	lds	r26, 0x26BC	; 0x8026bc <g_adc_temp_cur+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3258:	bf bf       	out	0x3f, r27	; 63
		cpu_irq_restore(flags);

		printf("time = %5ld: vctcxo=%4d mV, 5v0=%4d mV, vbat=%4d mV, adc4=%4d mV, adc5=%4d mV, temp=%+2d.%02dC (ADC_cur=%ld)\r\n", now >> 10,
    325a:	af 93       	push	r26
    325c:	7f 93       	push	r23
    325e:	6f 93       	push	r22
    3260:	5f 93       	push	r21
    3262:	64 e6       	ldi	r22, 0x64	; 100
    3264:	70 e0       	ldi	r23, 0x00	; 0
    3266:	0e 94 65 40 	call	0x80ca	; 0x80ca <__divmodhi4>
    326a:	9f 93       	push	r25
    326c:	8f 93       	push	r24
    326e:	7f 93       	push	r23
    3270:	6f 93       	push	r22
    3272:	9f 92       	push	r9
    3274:	af 92       	push	r10
    3276:	bf 92       	push	r11
    3278:	cf 92       	push	r12
    327a:	df 92       	push	r13
    327c:	ef 92       	push	r14
    327e:	ff 92       	push	r15
    3280:	ff 93       	push	r31
    3282:	ef 93       	push	r30
    3284:	4f 93       	push	r20
    3286:	0f 2e       	mov	r0, r31
    3288:	fa e0       	ldi	r31, 0x0A	; 10
    328a:	36 95       	lsr	r19
    328c:	27 95       	ror	r18
    328e:	17 95       	ror	r17
    3290:	07 95       	ror	r16
    3292:	fa 95       	dec	r31
    3294:	d1 f7       	brne	.-12     	; 0x328a <task_twi2_lcd+0xdc>
    3296:	f0 2d       	mov	r31, r0
    3298:	3f 93       	push	r19
    329a:	2f 93       	push	r18
    329c:	1f 93       	push	r17
    329e:	0f 93       	push	r16
    32a0:	88 ef       	ldi	r24, 0xF8	; 248
    32a2:	92 e2       	ldi	r25, 0x22	; 34
    32a4:	9f 93       	push	r25
    32a6:	8f 93       	push	r24
    32a8:	0e 94 92 43 	call	0x8724	; 0x8724 <printf>
    32ac:	cd bf       	out	0x3d, r28	; 61
    32ae:	de bf       	out	0x3e, r29	; 62
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_temp_deg_100 / 100, l_adc_temp_deg_100 % 100, l_adc_temp_cur);
	}

	if (g_twi2_lcd_version >= 0x11) {
    32b0:	80 91 0d 27 	lds	r24, 0x270D	; 0x80270d <g_twi2_lcd_version>
    32b4:	81 31       	cpi	r24, 0x11	; 17
    32b6:	08 f4       	brcc	.+2      	; 0x32ba <task_twi2_lcd+0x10c>
		static uint8_t ofs = 0;

		twi2_waitUntilReady();
    32b8:	c2 c0       	rjmp	.+388    	; 0x343e <task_twi2_lcd+0x290>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    32ba:	1d da       	rcall	.-3014   	; 0x26f6 <twi2_waitUntilReady>
    32bc:	0f 2e       	mov	r0, r31
    32be:	fa e0       	ldi	r31, 0x0A	; 10
    32c0:	ef 2e       	mov	r14, r31
    32c2:	f0 e2       	ldi	r31, 0x20	; 32
    32c4:	ff 2e       	mov	r15, r31
    32c6:	f0 2d       	mov	r31, r0
    32c8:	68 94       	set
    32ca:	bb 24       	eor	r11, r11
    32cc:	b5 f8       	bld	r11, 5
    32ce:	f7 01       	movw	r30, r14
		twi2_m_data[0] = 16 + ofs;
    32d0:	b1 82       	std	Z+1, r11	; 0x01
    32d2:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <__data_end>
    32d6:	80 5f       	subi	r24, 0xF0	; 240
    32d8:	07 e9       	ldi	r16, 0x97	; 151
    32da:	16 e2       	ldi	r17, 0x26	; 38
    32dc:	f8 01       	movw	r30, r16
		twi2_m_data[1] = 16 + ofs;
    32de:	80 83       	st	Z, r24
		twi2_packet.length = 2;
    32e0:	81 83       	std	Z+1, r24	; 0x01
    32e2:	68 94       	set
    32e4:	cc 24       	eor	r12, r12
    32e6:	c1 f8       	bld	r12, 1
    32e8:	d1 2c       	mov	r13, r1
    32ea:	f7 01       	movw	r30, r14
    32ec:	c0 86       	std	Z+8, r12	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    32ee:	d1 86       	std	Z+9, r13	; 0x09
    32f0:	40 e0       	ldi	r20, 0x00	; 0
    32f2:	b7 01       	movw	r22, r14
    32f4:	80 e8       	ldi	r24, 0x80	; 128
    32f6:	94 e0       	ldi	r25, 0x04	; 4
    32f8:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    32fc:	65 e0       	ldi	r22, 0x05	; 5
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	80 e0       	ldi	r24, 0x00	; 0

		#if 1
		twi2_waitUntilReady();
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	ed d9       	rcall	.-3110   	; 0x26e0 <__portable_avr_delay_cycles>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
    3306:	f7 d9       	rcall	.-3090   	; 0x26f6 <twi2_waitUntilReady>
    3308:	82 e3       	ldi	r24, 0x32	; 50
    330a:	f7 01       	movw	r30, r14
		twi2_m_data[0] = 150 + ofs;
    330c:	81 83       	std	Z+1, r24	; 0x01
    330e:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <__data_end>
    3312:	96 e9       	ldi	r25, 0x96	; 150
    3314:	98 0f       	add	r25, r24
    3316:	f8 01       	movw	r30, r16
		twi2_m_data[1] =  60 + ofs;
    3318:	90 83       	st	Z, r25
    331a:	84 5c       	subi	r24, 0xC4	; 196
		twi2_packet.length = 2;
    331c:	81 83       	std	Z+1, r24	; 0x01
    331e:	f7 01       	movw	r30, r14
    3320:	c0 86       	std	Z+8, r12	; 0x08
    3322:	d1 86       	std	Z+9, r13	; 0x09
    3324:	40 e0       	ldi	r20, 0x00	; 0
    3326:	b7 01       	movw	r22, r14
    3328:	80 e8       	ldi	r24, 0x80	; 128
    332a:	94 e0       	ldi	r25, 0x04	; 4
    332c:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3330:	65 e0       	ldi	r22, 0x05	; 5
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	80 e0       	ldi	r24, 0x00	; 0
		#endif

		#if 1
		twi2_waitUntilReady();
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	d3 d9       	rcall	.-3162   	; 0x26e0 <__portable_avr_delay_cycles>
		# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_RECT;
    333a:	dd d9       	rcall	.-3142   	; 0x26f6 <twi2_waitUntilReady>
    333c:	84 e3       	ldi	r24, 0x34	; 52
    333e:	f7 01       	movw	r30, r14
		# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_RECT;
		# endif
		twi2_m_data[0] = 30;
    3340:	81 83       	std	Z+1, r24	; 0x01
    3342:	8e e1       	ldi	r24, 0x1E	; 30
    3344:	f8 01       	movw	r30, r16
		twi2_m_data[1] =  30;
    3346:	80 83       	st	Z, r24
		twi2_packet.length = 2;
    3348:	81 83       	std	Z+1, r24	; 0x01
    334a:	f7 01       	movw	r30, r14
    334c:	c0 86       	std	Z+8, r12	; 0x08
    334e:	d1 86       	std	Z+9, r13	; 0x09
    3350:	40 e0       	ldi	r20, 0x00	; 0
    3352:	b7 01       	movw	r22, r14
    3354:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3356:	94 e0       	ldi	r25, 0x04	; 4
    3358:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
    335c:	65 e0       	ldi	r22, 0x05	; 5
    335e:	70 e0       	ldi	r23, 0x00	; 0
		#endif

		#if 1
		twi2_waitUntilReady();
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	90 e0       	ldi	r25, 0x00	; 0
		# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_CIRC;
    3364:	bd d9       	rcall	.-3206   	; 0x26e0 <__portable_avr_delay_cycles>
    3366:	c7 d9       	rcall	.-3186   	; 0x26f6 <twi2_waitUntilReady>
    3368:	88 e3       	ldi	r24, 0x38	; 56
		# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC;
		# endif
		twi2_m_data[0] = 20;
    336a:	f7 01       	movw	r30, r14
    336c:	81 83       	std	Z+1, r24	; 0x01
    336e:	84 e1       	ldi	r24, 0x14	; 20
		twi2_packet.length = 1;
    3370:	f8 01       	movw	r30, r16
    3372:	80 83       	st	Z, r24
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	f7 01       	movw	r30, r14
    337a:	80 87       	std	Z+8, r24	; 0x08
    337c:	91 87       	std	Z+9, r25	; 0x09
    337e:	40 e0       	ldi	r20, 0x00	; 0
    3380:	b7 01       	movw	r22, r14
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3382:	80 e8       	ldi	r24, 0x80	; 128
    3384:	94 e0       	ldi	r25, 0x04	; 4
    3386:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
    338a:	65 e0       	ldi	r22, 0x05	; 5
    338c:	70 e0       	ldi	r23, 0x00	; 0
		#endif

		#if 1
		twi2_waitUntilReady();
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    3392:	a6 d9       	rcall	.-3252   	; 0x26e0 <__portable_avr_delay_cycles>
    3394:	b0 d9       	rcall	.-3232   	; 0x26f6 <twi2_waitUntilReady>
		twi2_m_data[0] = 116 + ofs;
    3396:	f7 01       	movw	r30, r14
    3398:	b1 82       	std	Z+1, r11	; 0x01
    339a:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <__data_end>
    339e:	94 e7       	ldi	r25, 0x74	; 116
    33a0:	98 0f       	add	r25, r24
		twi2_m_data[1] =  16 + ofs;
    33a2:	f8 01       	movw	r30, r16
    33a4:	90 83       	st	Z, r25
		twi2_packet.length = 2;
    33a6:	80 5f       	subi	r24, 0xF0	; 240
    33a8:	81 83       	std	Z+1, r24	; 0x01
    33aa:	f7 01       	movw	r30, r14
    33ac:	c0 86       	std	Z+8, r12	; 0x08
    33ae:	d1 86       	std	Z+9, r13	; 0x09
    33b0:	40 e0       	ldi	r20, 0x00	; 0
    33b2:	b7 01       	movw	r22, r14
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    33b4:	80 e8       	ldi	r24, 0x80	; 128
    33b6:	94 e0       	ldi	r25, 0x04	; 4
    33b8:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
    33bc:	65 e0       	ldi	r22, 0x05	; 5
    33be:	70 e0       	ldi	r23, 0x00	; 0

		twi2_waitUntilReady();
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    33c4:	8d d9       	rcall	.-3302   	; 0x26e0 <__portable_avr_delay_cycles>
    33c6:	97 d9       	rcall	.-3282   	; 0x26f6 <twi2_waitUntilReady>
    33c8:	80 e3       	ldi	r24, 0x30	; 48
		twi2_m_data[0] = 4;
    33ca:	f7 01       	movw	r30, r14
    33cc:	81 83       	std	Z+1, r24	; 0x01
    33ce:	84 e0       	ldi	r24, 0x04	; 4
		twi2_m_data[1] = 'A';
    33d0:	f8 01       	movw	r30, r16
    33d2:	80 83       	st	Z, r24
		twi2_m_data[2] = 'B';
    33d4:	81 e4       	ldi	r24, 0x41	; 65
    33d6:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[3] = 'C';
    33d8:	82 e4       	ldi	r24, 0x42	; 66
    33da:	82 83       	std	Z+2, r24	; 0x02
		twi2_m_data[4] = 'D';
    33dc:	83 e4       	ldi	r24, 0x43	; 67
    33de:	83 83       	std	Z+3, r24	; 0x03
		twi2_packet.length = twi2_m_data[0] + 1;
    33e0:	84 e4       	ldi	r24, 0x44	; 68
    33e2:	84 83       	std	Z+4, r24	; 0x04
    33e4:	85 e0       	ldi	r24, 0x05	; 5
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	f7 01       	movw	r30, r14
    33ea:	80 87       	std	Z+8, r24	; 0x08
    33ec:	91 87       	std	Z+9, r25	; 0x09
    33ee:	40 e0       	ldi	r20, 0x00	; 0
    33f0:	b7 01       	movw	r22, r14
    33f2:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    33f4:	94 e0       	ldi	r25, 0x04	; 4
    33f6:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
    33fa:	65 e0       	ldi	r22, 0x05	; 5
    33fc:	70 e0       	ldi	r23, 0x00	; 0
		#endif

		if (++ofs > 64) {
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	6e d9       	rcall	.-3364   	; 0x26e0 <__portable_avr_delay_cycles>
    3404:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <__data_end>
    3408:	8f 5f       	subi	r24, 0xFF	; 255
    340a:	81 34       	cpi	r24, 0x41	; 65
    340c:	18 f4       	brcc	.+6      	; 0x3414 <task_twi2_lcd+0x266>
			ofs = 0;
    340e:	80 93 d4 23 	sts	0x23D4, r24	; 0x8023d4 <__data_end>

			twi2_waitUntilReady();
    3412:	32 c0       	rjmp	.+100    	; 0x3478 <task_twi2_lcd+0x2ca>
    3414:	10 92 d4 23 	sts	0x23D4, r1	; 0x8023d4 <__data_end>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
    3418:	6e d9       	rcall	.-3364   	; 0x26f6 <twi2_waitUntilReady>
    341a:	ea e0       	ldi	r30, 0x0A	; 10
			twi2_packet.length = 0;
    341c:	f0 e2       	ldi	r31, 0x20	; 32
    341e:	80 e1       	ldi	r24, 0x10	; 16
    3420:	81 83       	std	Z+1, r24	; 0x01
    3422:	10 86       	std	Z+8, r1	; 0x08
    3424:	11 86       	std	Z+9, r1	; 0x09
    3426:	40 e0       	ldi	r20, 0x00	; 0
    3428:	bf 01       	movw	r22, r30
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    342a:	80 e8       	ldi	r24, 0x80	; 128
    342c:	94 e0       	ldi	r25, 0x04	; 4
    342e:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
    3432:	65 e0       	ldi	r22, 0x05	; 5
    3434:	70 e0       	ldi	r23, 0x00	; 0
    3436:	80 e0       	ldi	r24, 0x00	; 0
		}

		} else if (g_twi2_lcd_version == 0x10) {
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	52 d9       	rcall	.-3420   	; 0x26e0 <__portable_avr_delay_cycles>
		#if 1
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi2_waitUntilReady();
    343c:	1d c0       	rjmp	.+58     	; 0x3478 <task_twi2_lcd+0x2ca>
    343e:	80 31       	cpi	r24, 0x10	; 16
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
    3440:	d9 f4       	brne	.+54     	; 0x3478 <task_twi2_lcd+0x2ca>
    3442:	59 d9       	rcall	.-3406   	; 0x26f6 <twi2_waitUntilReady>
    3444:	ea e0       	ldi	r30, 0x0A	; 10
    3446:	f0 e2       	ldi	r31, 0x20	; 32
		twi2_m_data[0] = 1;
    3448:	84 e8       	ldi	r24, 0x84	; 132
    344a:	81 83       	std	Z+1, r24	; 0x01
    344c:	a7 e9       	ldi	r26, 0x97	; 151
    344e:	b6 e2       	ldi	r27, 0x26	; 38
		twi2_m_data[1] = 128;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	8c 93       	st	X, r24
		twi2_packet.length = 2;
    3454:	80 e8       	ldi	r24, 0x80	; 128
    3456:	11 96       	adiw	r26, 0x01	; 1
    3458:	8c 93       	st	X, r24
    345a:	82 e0       	ldi	r24, 0x02	; 2
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	80 87       	std	Z+8, r24	; 0x08
    3460:	91 87       	std	Z+9, r25	; 0x09
    3462:	40 e0       	ldi	r20, 0x00	; 0
    3464:	bf 01       	movw	r22, r30
    3466:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
    3468:	94 e0       	ldi	r25, 0x04	; 4
    346a:	0e 94 80 26 	call	0x4d00	; 0x4d00 <twi_master_transfer>
    346e:	69 e8       	ldi	r22, 0x89	; 137
    3470:	73 e1       	ldi	r23, 0x13	; 19
    3472:	80 e0       	ldi	r24, 0x00	; 0
		#endif
	}
}
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	34 d9       	rcall	.-3480   	; 0x26e0 <__portable_avr_delay_cycles>
    3478:	0f 90       	pop	r0
    347a:	df 91       	pop	r29
    347c:	cf 91       	pop	r28
    347e:	1f 91       	pop	r17
    3480:	0f 91       	pop	r16
    3482:	ff 90       	pop	r15
    3484:	ef 90       	pop	r14
    3486:	df 90       	pop	r13
    3488:	cf 90       	pop	r12
    348a:	bf 90       	pop	r11
    348c:	af 90       	pop	r10
    348e:	9f 90       	pop	r9
    3490:	08 95       	ret

00003492 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    3492:	08 95       	ret

00003494 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    3494:	cf 93       	push	r28
    3496:	df 93       	push	r29
    3498:	1f 92       	push	r1
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    349e:	2f b7       	in	r18, 0x3f	; 63
    34a0:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    34a2:	f8 94       	cli
	return flags;
    34a4:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    34a6:	28 2f       	mov	r18, r24
    34a8:	39 2f       	mov	r19, r25
    34aa:	21 15       	cp	r18, r1
    34ac:	82 e0       	ldi	r24, 0x02	; 2
    34ae:	38 07       	cpc	r19, r24
    34b0:	29 f4       	brne	.+10     	; 0x34bc <adc_set_callback+0x28>
		adca_callback = callback;
    34b2:	60 93 7d 28 	sts	0x287D, r22	; 0x80287d <adca_callback>
    34b6:	70 93 7e 28 	sts	0x287E, r23	; 0x80287e <adca_callback+0x1>
    34ba:	07 c0       	rjmp	.+14     	; 0x34ca <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    34bc:	20 34       	cpi	r18, 0x40	; 64
    34be:	32 40       	sbci	r19, 0x02	; 2
    34c0:	21 f4       	brne	.+8      	; 0x34ca <adc_set_callback+0x36>
		adcb_callback = callback;
    34c2:	60 93 7b 28 	sts	0x287B, r22	; 0x80287b <adcb_callback>
    34c6:	70 93 7c 28 	sts	0x287C, r23	; 0x80287c <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    34ca:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    34cc:	0f 90       	pop	r0
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	08 95       	ret

000034d4 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    34d4:	81 15       	cp	r24, r1
    34d6:	22 e0       	ldi	r18, 0x02	; 2
    34d8:	92 07       	cpc	r25, r18
    34da:	69 f4       	brne	.+26     	; 0x34f6 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    34dc:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <adca_enable_count>
    34e0:	91 e0       	ldi	r25, 0x01	; 1
    34e2:	98 0f       	add	r25, r24
    34e4:	90 93 da 23 	sts	0x23DA, r25	; 0x8023da <adca_enable_count>
    34e8:	81 11       	cpse	r24, r1
    34ea:	14 c0       	rjmp	.+40     	; 0x3514 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    34ec:	62 e0       	ldi	r22, 0x02	; 2
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	0c 94 2a 38 	jmp	0x7054	; 0x7054 <sysclk_enable_module>
    34f4:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    34f6:	80 34       	cpi	r24, 0x40	; 64
    34f8:	92 40       	sbci	r25, 0x02	; 2
    34fa:	61 f4       	brne	.+24     	; 0x3514 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    34fc:	80 91 d9 23 	lds	r24, 0x23D9	; 0x8023d9 <adcb_enable_count>
    3500:	91 e0       	ldi	r25, 0x01	; 1
    3502:	98 0f       	add	r25, r24
    3504:	90 93 d9 23 	sts	0x23D9, r25	; 0x8023d9 <adcb_enable_count>
    3508:	81 11       	cpse	r24, r1
    350a:	04 c0       	rjmp	.+8      	; 0x3514 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    350c:	62 e0       	ldi	r22, 0x02	; 2
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	0c 94 2a 38 	jmp	0x7054	; 0x7054 <sysclk_enable_module>
    3514:	08 95       	ret

00003516 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    3516:	81 15       	cp	r24, r1
    3518:	22 e0       	ldi	r18, 0x02	; 2
    351a:	92 07       	cpc	r25, r18
    351c:	61 f4       	brne	.+24     	; 0x3536 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    351e:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <adca_enable_count>
    3522:	81 50       	subi	r24, 0x01	; 1
    3524:	80 93 da 23 	sts	0x23DA, r24	; 0x8023da <adca_enable_count>
    3528:	81 11       	cpse	r24, r1
    352a:	13 c0       	rjmp	.+38     	; 0x3552 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    352c:	62 e0       	ldi	r22, 0x02	; 2
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	0c 94 40 38 	jmp	0x7080	; 0x7080 <sysclk_disable_module>
    3534:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    3536:	80 34       	cpi	r24, 0x40	; 64
    3538:	92 40       	sbci	r25, 0x02	; 2
    353a:	59 f4       	brne	.+22     	; 0x3552 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    353c:	80 91 d9 23 	lds	r24, 0x23D9	; 0x8023d9 <adcb_enable_count>
    3540:	81 50       	subi	r24, 0x01	; 1
    3542:	80 93 d9 23 	sts	0x23D9, r24	; 0x8023d9 <adcb_enable_count>
    3546:	81 11       	cpse	r24, r1
    3548:	04 c0       	rjmp	.+8      	; 0x3552 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    354a:	62 e0       	ldi	r22, 0x02	; 2
    354c:	82 e0       	ldi	r24, 0x02	; 2
    354e:	0c 94 40 38 	jmp	0x7080	; 0x7080 <sysclk_disable_module>
    3552:	08 95       	ret

00003554 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    3554:	ef 92       	push	r14
    3556:	ff 92       	push	r15
    3558:	1f 93       	push	r17
    355a:	cf 93       	push	r28
    355c:	df 93       	push	r29
    355e:	1f 92       	push	r1
    3560:	1f 92       	push	r1
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3568:	8f b7       	in	r24, 0x3f	; 63
    356a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    356c:	f8 94       	cli
	return flags;
    356e:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    3570:	c7 01       	movw	r24, r14
    3572:	b0 df       	rcall	.-160    	; 0x34d4 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    3574:	f7 01       	movw	r30, r14
    3576:	80 81       	ld	r24, Z
    3578:	81 60       	ori	r24, 0x01	; 1
    357a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    357c:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    357e:	80 91 90 28 	lds	r24, 0x2890	; 0x802890 <sleepmgr_locks+0x1>
    3582:	8f 3f       	cpi	r24, 0xFF	; 255
    3584:	09 f4       	brne	.+2      	; 0x3588 <adc_enable+0x34>
    3586:	ff cf       	rjmp	.-2      	; 0x3586 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3588:	8f b7       	in	r24, 0x3f	; 63
    358a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    358c:	f8 94       	cli
	return flags;
    358e:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    3590:	ef e8       	ldi	r30, 0x8F	; 143
    3592:	f8 e2       	ldi	r31, 0x28	; 40
    3594:	81 81       	ldd	r24, Z+1	; 0x01
    3596:	8f 5f       	subi	r24, 0xFF	; 255
    3598:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    359a:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	df 91       	pop	r29
    35a2:	cf 91       	pop	r28
    35a4:	1f 91       	pop	r17
    35a6:	ff 90       	pop	r15
    35a8:	ef 90       	pop	r14
    35aa:	08 95       	ret

000035ac <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    35ac:	1f 92       	push	r1
    35ae:	0f 92       	push	r0
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	0f 92       	push	r0
    35b4:	11 24       	eor	r1, r1
    35b6:	0b b6       	in	r0, 0x3b	; 59
    35b8:	0f 92       	push	r0
    35ba:	2f 93       	push	r18
    35bc:	3f 93       	push	r19
    35be:	4f 93       	push	r20
    35c0:	5f 93       	push	r21
    35c2:	6f 93       	push	r22
    35c4:	7f 93       	push	r23
    35c6:	8f 93       	push	r24
    35c8:	9f 93       	push	r25
    35ca:	af 93       	push	r26
    35cc:	bf 93       	push	r27
    35ce:	ef 93       	push	r30
    35d0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    35d2:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    35d6:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    35da:	e0 91 7d 28 	lds	r30, 0x287D	; 0x80287d <adca_callback>
    35de:	f0 91 7e 28 	lds	r31, 0x287E	; 0x80287e <adca_callback+0x1>
    35e2:	61 e0       	ldi	r22, 0x01	; 1
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	92 e0       	ldi	r25, 0x02	; 2
    35e8:	19 95       	eicall
}
    35ea:	ff 91       	pop	r31
    35ec:	ef 91       	pop	r30
    35ee:	bf 91       	pop	r27
    35f0:	af 91       	pop	r26
    35f2:	9f 91       	pop	r25
    35f4:	8f 91       	pop	r24
    35f6:	7f 91       	pop	r23
    35f8:	6f 91       	pop	r22
    35fa:	5f 91       	pop	r21
    35fc:	4f 91       	pop	r20
    35fe:	3f 91       	pop	r19
    3600:	2f 91       	pop	r18
    3602:	0f 90       	pop	r0
    3604:	0b be       	out	0x3b, r0	; 59
    3606:	0f 90       	pop	r0
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	0f 90       	pop	r0
    360c:	1f 90       	pop	r1
    360e:	18 95       	reti

00003610 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    3610:	1f 92       	push	r1
    3612:	0f 92       	push	r0
    3614:	0f b6       	in	r0, 0x3f	; 63
    3616:	0f 92       	push	r0
    3618:	11 24       	eor	r1, r1
    361a:	0b b6       	in	r0, 0x3b	; 59
    361c:	0f 92       	push	r0
    361e:	2f 93       	push	r18
    3620:	3f 93       	push	r19
    3622:	4f 93       	push	r20
    3624:	5f 93       	push	r21
    3626:	6f 93       	push	r22
    3628:	7f 93       	push	r23
    362a:	8f 93       	push	r24
    362c:	9f 93       	push	r25
    362e:	af 93       	push	r26
    3630:	bf 93       	push	r27
    3632:	ef 93       	push	r30
    3634:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    3636:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    363a:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    363e:	e0 91 7d 28 	lds	r30, 0x287D	; 0x80287d <adca_callback>
    3642:	f0 91 7e 28 	lds	r31, 0x287E	; 0x80287e <adca_callback+0x1>
    3646:	62 e0       	ldi	r22, 0x02	; 2
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	92 e0       	ldi	r25, 0x02	; 2
    364c:	19 95       	eicall
}
    364e:	ff 91       	pop	r31
    3650:	ef 91       	pop	r30
    3652:	bf 91       	pop	r27
    3654:	af 91       	pop	r26
    3656:	9f 91       	pop	r25
    3658:	8f 91       	pop	r24
    365a:	7f 91       	pop	r23
    365c:	6f 91       	pop	r22
    365e:	5f 91       	pop	r21
    3660:	4f 91       	pop	r20
    3662:	3f 91       	pop	r19
    3664:	2f 91       	pop	r18
    3666:	0f 90       	pop	r0
    3668:	0b be       	out	0x3b, r0	; 59
    366a:	0f 90       	pop	r0
    366c:	0f be       	out	0x3f, r0	; 63
    366e:	0f 90       	pop	r0
    3670:	1f 90       	pop	r1
    3672:	18 95       	reti

00003674 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    3674:	1f 92       	push	r1
    3676:	0f 92       	push	r0
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	0f 92       	push	r0
    367c:	11 24       	eor	r1, r1
    367e:	0b b6       	in	r0, 0x3b	; 59
    3680:	0f 92       	push	r0
    3682:	2f 93       	push	r18
    3684:	3f 93       	push	r19
    3686:	4f 93       	push	r20
    3688:	5f 93       	push	r21
    368a:	6f 93       	push	r22
    368c:	7f 93       	push	r23
    368e:	8f 93       	push	r24
    3690:	9f 93       	push	r25
    3692:	af 93       	push	r26
    3694:	bf 93       	push	r27
    3696:	ef 93       	push	r30
    3698:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    369a:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    369e:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    36a2:	e0 91 7d 28 	lds	r30, 0x287D	; 0x80287d <adca_callback>
    36a6:	f0 91 7e 28 	lds	r31, 0x287E	; 0x80287e <adca_callback+0x1>
    36aa:	64 e0       	ldi	r22, 0x04	; 4
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	92 e0       	ldi	r25, 0x02	; 2
    36b0:	19 95       	eicall
}
    36b2:	ff 91       	pop	r31
    36b4:	ef 91       	pop	r30
    36b6:	bf 91       	pop	r27
    36b8:	af 91       	pop	r26
    36ba:	9f 91       	pop	r25
    36bc:	8f 91       	pop	r24
    36be:	7f 91       	pop	r23
    36c0:	6f 91       	pop	r22
    36c2:	5f 91       	pop	r21
    36c4:	4f 91       	pop	r20
    36c6:	3f 91       	pop	r19
    36c8:	2f 91       	pop	r18
    36ca:	0f 90       	pop	r0
    36cc:	0b be       	out	0x3b, r0	; 59
    36ce:	0f 90       	pop	r0
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	0f 90       	pop	r0
    36d4:	1f 90       	pop	r1
    36d6:	18 95       	reti

000036d8 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    36d8:	1f 92       	push	r1
    36da:	0f 92       	push	r0
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	0f 92       	push	r0
    36e0:	11 24       	eor	r1, r1
    36e2:	0b b6       	in	r0, 0x3b	; 59
    36e4:	0f 92       	push	r0
    36e6:	2f 93       	push	r18
    36e8:	3f 93       	push	r19
    36ea:	4f 93       	push	r20
    36ec:	5f 93       	push	r21
    36ee:	6f 93       	push	r22
    36f0:	7f 93       	push	r23
    36f2:	8f 93       	push	r24
    36f4:	9f 93       	push	r25
    36f6:	af 93       	push	r26
    36f8:	bf 93       	push	r27
    36fa:	ef 93       	push	r30
    36fc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    36fe:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    3702:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    3706:	e0 91 7d 28 	lds	r30, 0x287D	; 0x80287d <adca_callback>
    370a:	f0 91 7e 28 	lds	r31, 0x287E	; 0x80287e <adca_callback+0x1>
    370e:	68 e0       	ldi	r22, 0x08	; 8
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	92 e0       	ldi	r25, 0x02	; 2
    3714:	19 95       	eicall
}
    3716:	ff 91       	pop	r31
    3718:	ef 91       	pop	r30
    371a:	bf 91       	pop	r27
    371c:	af 91       	pop	r26
    371e:	9f 91       	pop	r25
    3720:	8f 91       	pop	r24
    3722:	7f 91       	pop	r23
    3724:	6f 91       	pop	r22
    3726:	5f 91       	pop	r21
    3728:	4f 91       	pop	r20
    372a:	3f 91       	pop	r19
    372c:	2f 91       	pop	r18
    372e:	0f 90       	pop	r0
    3730:	0b be       	out	0x3b, r0	; 59
    3732:	0f 90       	pop	r0
    3734:	0f be       	out	0x3f, r0	; 63
    3736:	0f 90       	pop	r0
    3738:	1f 90       	pop	r1
    373a:	18 95       	reti

0000373c <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    373c:	1f 92       	push	r1
    373e:	0f 92       	push	r0
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	0f 92       	push	r0
    3744:	11 24       	eor	r1, r1
    3746:	0b b6       	in	r0, 0x3b	; 59
    3748:	0f 92       	push	r0
    374a:	2f 93       	push	r18
    374c:	3f 93       	push	r19
    374e:	4f 93       	push	r20
    3750:	5f 93       	push	r21
    3752:	6f 93       	push	r22
    3754:	7f 93       	push	r23
    3756:	8f 93       	push	r24
    3758:	9f 93       	push	r25
    375a:	af 93       	push	r26
    375c:	bf 93       	push	r27
    375e:	ef 93       	push	r30
    3760:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    3762:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    3766:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    376a:	e0 91 7b 28 	lds	r30, 0x287B	; 0x80287b <adcb_callback>
    376e:	f0 91 7c 28 	lds	r31, 0x287C	; 0x80287c <adcb_callback+0x1>
    3772:	61 e0       	ldi	r22, 0x01	; 1
    3774:	80 e4       	ldi	r24, 0x40	; 64
    3776:	92 e0       	ldi	r25, 0x02	; 2
    3778:	19 95       	eicall
}
    377a:	ff 91       	pop	r31
    377c:	ef 91       	pop	r30
    377e:	bf 91       	pop	r27
    3780:	af 91       	pop	r26
    3782:	9f 91       	pop	r25
    3784:	8f 91       	pop	r24
    3786:	7f 91       	pop	r23
    3788:	6f 91       	pop	r22
    378a:	5f 91       	pop	r21
    378c:	4f 91       	pop	r20
    378e:	3f 91       	pop	r19
    3790:	2f 91       	pop	r18
    3792:	0f 90       	pop	r0
    3794:	0b be       	out	0x3b, r0	; 59
    3796:	0f 90       	pop	r0
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	0f 90       	pop	r0
    379c:	1f 90       	pop	r1
    379e:	18 95       	reti

000037a0 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    37a0:	1f 92       	push	r1
    37a2:	0f 92       	push	r0
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	0f 92       	push	r0
    37a8:	11 24       	eor	r1, r1
    37aa:	0b b6       	in	r0, 0x3b	; 59
    37ac:	0f 92       	push	r0
    37ae:	2f 93       	push	r18
    37b0:	3f 93       	push	r19
    37b2:	4f 93       	push	r20
    37b4:	5f 93       	push	r21
    37b6:	6f 93       	push	r22
    37b8:	7f 93       	push	r23
    37ba:	8f 93       	push	r24
    37bc:	9f 93       	push	r25
    37be:	af 93       	push	r26
    37c0:	bf 93       	push	r27
    37c2:	ef 93       	push	r30
    37c4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    37c6:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    37ca:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    37ce:	e0 91 7b 28 	lds	r30, 0x287B	; 0x80287b <adcb_callback>
    37d2:	f0 91 7c 28 	lds	r31, 0x287C	; 0x80287c <adcb_callback+0x1>
    37d6:	62 e0       	ldi	r22, 0x02	; 2
    37d8:	80 e4       	ldi	r24, 0x40	; 64
    37da:	92 e0       	ldi	r25, 0x02	; 2
    37dc:	19 95       	eicall
}
    37de:	ff 91       	pop	r31
    37e0:	ef 91       	pop	r30
    37e2:	bf 91       	pop	r27
    37e4:	af 91       	pop	r26
    37e6:	9f 91       	pop	r25
    37e8:	8f 91       	pop	r24
    37ea:	7f 91       	pop	r23
    37ec:	6f 91       	pop	r22
    37ee:	5f 91       	pop	r21
    37f0:	4f 91       	pop	r20
    37f2:	3f 91       	pop	r19
    37f4:	2f 91       	pop	r18
    37f6:	0f 90       	pop	r0
    37f8:	0b be       	out	0x3b, r0	; 59
    37fa:	0f 90       	pop	r0
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	0f 90       	pop	r0
    3800:	1f 90       	pop	r1
    3802:	18 95       	reti

00003804 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    3804:	1f 92       	push	r1
    3806:	0f 92       	push	r0
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	0f 92       	push	r0
    380c:	11 24       	eor	r1, r1
    380e:	0b b6       	in	r0, 0x3b	; 59
    3810:	0f 92       	push	r0
    3812:	2f 93       	push	r18
    3814:	3f 93       	push	r19
    3816:	4f 93       	push	r20
    3818:	5f 93       	push	r21
    381a:	6f 93       	push	r22
    381c:	7f 93       	push	r23
    381e:	8f 93       	push	r24
    3820:	9f 93       	push	r25
    3822:	af 93       	push	r26
    3824:	bf 93       	push	r27
    3826:	ef 93       	push	r30
    3828:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    382a:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    382e:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    3832:	e0 91 7b 28 	lds	r30, 0x287B	; 0x80287b <adcb_callback>
    3836:	f0 91 7c 28 	lds	r31, 0x287C	; 0x80287c <adcb_callback+0x1>
    383a:	64 e0       	ldi	r22, 0x04	; 4
    383c:	80 e4       	ldi	r24, 0x40	; 64
    383e:	92 e0       	ldi	r25, 0x02	; 2
    3840:	19 95       	eicall
}
    3842:	ff 91       	pop	r31
    3844:	ef 91       	pop	r30
    3846:	bf 91       	pop	r27
    3848:	af 91       	pop	r26
    384a:	9f 91       	pop	r25
    384c:	8f 91       	pop	r24
    384e:	7f 91       	pop	r23
    3850:	6f 91       	pop	r22
    3852:	5f 91       	pop	r21
    3854:	4f 91       	pop	r20
    3856:	3f 91       	pop	r19
    3858:	2f 91       	pop	r18
    385a:	0f 90       	pop	r0
    385c:	0b be       	out	0x3b, r0	; 59
    385e:	0f 90       	pop	r0
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	0f 90       	pop	r0
    3864:	1f 90       	pop	r1
    3866:	18 95       	reti

00003868 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    3868:	1f 92       	push	r1
    386a:	0f 92       	push	r0
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	0f 92       	push	r0
    3870:	11 24       	eor	r1, r1
    3872:	0b b6       	in	r0, 0x3b	; 59
    3874:	0f 92       	push	r0
    3876:	2f 93       	push	r18
    3878:	3f 93       	push	r19
    387a:	4f 93       	push	r20
    387c:	5f 93       	push	r21
    387e:	6f 93       	push	r22
    3880:	7f 93       	push	r23
    3882:	8f 93       	push	r24
    3884:	9f 93       	push	r25
    3886:	af 93       	push	r26
    3888:	bf 93       	push	r27
    388a:	ef 93       	push	r30
    388c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    388e:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    3892:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    3896:	e0 91 7b 28 	lds	r30, 0x287B	; 0x80287b <adcb_callback>
    389a:	f0 91 7c 28 	lds	r31, 0x287C	; 0x80287c <adcb_callback+0x1>
    389e:	68 e0       	ldi	r22, 0x08	; 8
    38a0:	80 e4       	ldi	r24, 0x40	; 64
    38a2:	92 e0       	ldi	r25, 0x02	; 2
    38a4:	19 95       	eicall
}
    38a6:	ff 91       	pop	r31
    38a8:	ef 91       	pop	r30
    38aa:	bf 91       	pop	r27
    38ac:	af 91       	pop	r26
    38ae:	9f 91       	pop	r25
    38b0:	8f 91       	pop	r24
    38b2:	7f 91       	pop	r23
    38b4:	6f 91       	pop	r22
    38b6:	5f 91       	pop	r21
    38b8:	4f 91       	pop	r20
    38ba:	3f 91       	pop	r19
    38bc:	2f 91       	pop	r18
    38be:	0f 90       	pop	r0
    38c0:	0b be       	out	0x3b, r0	; 59
    38c2:	0f 90       	pop	r0
    38c4:	0f be       	out	0x3f, r0	; 63
    38c6:	0f 90       	pop	r0
    38c8:	1f 90       	pop	r1
    38ca:	18 95       	reti

000038cc <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    38cc:	bf 92       	push	r11
    38ce:	cf 92       	push	r12
    38d0:	df 92       	push	r13
    38d2:	ef 92       	push	r14
    38d4:	ff 92       	push	r15
    38d6:	0f 93       	push	r16
    38d8:	1f 93       	push	r17
    38da:	cf 93       	push	r28
    38dc:	df 93       	push	r29
    38de:	1f 92       	push	r1
    38e0:	cd b7       	in	r28, 0x3d	; 61
    38e2:	de b7       	in	r29, 0x3e	; 62
    38e4:	8c 01       	movw	r16, r24
    38e6:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    38e8:	81 15       	cp	r24, r1
    38ea:	22 e0       	ldi	r18, 0x02	; 2
    38ec:	92 07       	cpc	r25, r18
    38ee:	81 f4       	brne	.+32     	; 0x3910 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    38f0:	61 e2       	ldi	r22, 0x21	; 33
    38f2:	70 e0       	ldi	r23, 0x00	; 0
    38f4:	82 e0       	ldi	r24, 0x02	; 2
    38f6:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    38fa:	c8 2e       	mov	r12, r24
    38fc:	d1 2c       	mov	r13, r1
    38fe:	60 e2       	ldi	r22, 0x20	; 32
    3900:	70 e0       	ldi	r23, 0x00	; 0
    3902:	82 e0       	ldi	r24, 0x02	; 2
    3904:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    3908:	dc 2c       	mov	r13, r12
    390a:	cc 24       	eor	r12, r12
    390c:	c8 2a       	or	r12, r24
    390e:	12 c0       	rjmp	.+36     	; 0x3934 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    3910:	80 34       	cpi	r24, 0x40	; 64
    3912:	92 40       	sbci	r25, 0x02	; 2
    3914:	d1 f5       	brne	.+116    	; 0x398a <adc_write_configuration+0xbe>
    3916:	65 e2       	ldi	r22, 0x25	; 37
    3918:	70 e0       	ldi	r23, 0x00	; 0
    391a:	82 e0       	ldi	r24, 0x02	; 2
    391c:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    3920:	c8 2e       	mov	r12, r24
    3922:	d1 2c       	mov	r13, r1
    3924:	64 e2       	ldi	r22, 0x24	; 36
    3926:	70 e0       	ldi	r23, 0x00	; 0
    3928:	82 e0       	ldi	r24, 0x02	; 2
    392a:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    392e:	dc 2c       	mov	r13, r12
    3930:	cc 24       	eor	r12, r12
    3932:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3934:	8f b7       	in	r24, 0x3f	; 63
    3936:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3938:	f8 94       	cli
	return flags;
    393a:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    393c:	c8 01       	movw	r24, r16
    393e:	ca dd       	rcall	.-1132   	; 0x34d4 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    3940:	f8 01       	movw	r30, r16
    3942:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    3944:	92 e0       	ldi	r25, 0x02	; 2
    3946:	90 83       	st	Z, r25
	adc->CAL = cal;
    3948:	c4 86       	std	Z+12, r12	; 0x0c
    394a:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    394c:	f7 01       	movw	r30, r14
    394e:	25 81       	ldd	r18, Z+5	; 0x05
    3950:	36 81       	ldd	r19, Z+6	; 0x06
    3952:	f8 01       	movw	r30, r16
    3954:	20 8f       	std	Z+24, r18	; 0x18
    3956:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    3958:	f7 01       	movw	r30, r14
    395a:	92 81       	ldd	r25, Z+2	; 0x02
    395c:	f8 01       	movw	r30, r16
    395e:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    3960:	f7 01       	movw	r30, r14
    3962:	94 81       	ldd	r25, Z+4	; 0x04
    3964:	f8 01       	movw	r30, r16
    3966:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    3968:	f7 01       	movw	r30, r14
    396a:	93 81       	ldd	r25, Z+3	; 0x03
    396c:	f8 01       	movw	r30, r16
    396e:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    3970:	f7 01       	movw	r30, r14
    3972:	91 81       	ldd	r25, Z+1	; 0x01
    3974:	f8 01       	movw	r30, r16
    3976:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    3978:	81 70       	andi	r24, 0x01	; 1
    397a:	f7 01       	movw	r30, r14
    397c:	90 81       	ld	r25, Z
    397e:	89 2b       	or	r24, r25
    3980:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    3982:	80 83       	st	Z, r24
    3984:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3986:	c7 dd       	rcall	.-1138   	; 0x3516 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    3988:	bf be       	out	0x3f, r11	; 63
    398a:	0f 90       	pop	r0
    398c:	df 91       	pop	r29
    398e:	cf 91       	pop	r28
    3990:	1f 91       	pop	r17
    3992:	0f 91       	pop	r16
    3994:	ff 90       	pop	r15
    3996:	ef 90       	pop	r14
    3998:	df 90       	pop	r13
    399a:	cf 90       	pop	r12
    399c:	bf 90       	pop	r11
    399e:	08 95       	ret

000039a0 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    39a0:	df 92       	push	r13
    39a2:	ef 92       	push	r14
    39a4:	ff 92       	push	r15
    39a6:	0f 93       	push	r16
    39a8:	1f 93       	push	r17
    39aa:	cf 93       	push	r28
    39ac:	df 93       	push	r29
    39ae:	1f 92       	push	r1
    39b0:	cd b7       	in	r28, 0x3d	; 61
    39b2:	de b7       	in	r29, 0x3e	; 62
    39b4:	8c 01       	movw	r16, r24
    39b6:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    39b8:	8f b7       	in	r24, 0x3f	; 63
    39ba:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    39bc:	f8 94       	cli
	return flags;
    39be:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    39c0:	c8 01       	movw	r24, r16
    39c2:	88 dd       	rcall	.-1264   	; 0x34d4 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    39c4:	f8 01       	movw	r30, r16
    39c6:	80 81       	ld	r24, Z
    39c8:	80 7c       	andi	r24, 0xC0	; 192
    39ca:	f7 01       	movw	r30, r14
    39cc:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    39ce:	f8 01       	movw	r30, r16
    39d0:	80 8d       	ldd	r24, Z+24	; 0x18
    39d2:	91 8d       	ldd	r25, Z+25	; 0x19
    39d4:	f7 01       	movw	r30, r14
    39d6:	85 83       	std	Z+5, r24	; 0x05
    39d8:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    39da:	f8 01       	movw	r30, r16
    39dc:	82 81       	ldd	r24, Z+2	; 0x02
    39de:	f7 01       	movw	r30, r14
    39e0:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    39e2:	f8 01       	movw	r30, r16
    39e4:	84 81       	ldd	r24, Z+4	; 0x04
    39e6:	f7 01       	movw	r30, r14
    39e8:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    39ea:	f8 01       	movw	r30, r16
    39ec:	83 81       	ldd	r24, Z+3	; 0x03
    39ee:	f7 01       	movw	r30, r14
    39f0:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    39f2:	f8 01       	movw	r30, r16
    39f4:	81 81       	ldd	r24, Z+1	; 0x01
    39f6:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    39f8:	81 83       	std	Z+1, r24	; 0x01
    39fa:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39fc:	8c dd       	rcall	.-1256   	; 0x3516 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    39fe:	df be       	out	0x3f, r13	; 63
    3a00:	0f 90       	pop	r0
    3a02:	df 91       	pop	r29
    3a04:	cf 91       	pop	r28
    3a06:	1f 91       	pop	r17
    3a08:	0f 91       	pop	r16
    3a0a:	ff 90       	pop	r15
    3a0c:	ef 90       	pop	r14
    3a0e:	df 90       	pop	r13
    3a10:	08 95       	ret

00003a12 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    3a12:	af 92       	push	r10
    3a14:	bf 92       	push	r11
    3a16:	cf 92       	push	r12
    3a18:	df 92       	push	r13
    3a1a:	ef 92       	push	r14
    3a1c:	ff 92       	push	r15
    3a1e:	0f 93       	push	r16
    3a20:	1f 93       	push	r17
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	1f 92       	push	r1
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	6c 01       	movw	r12, r24
    3a2e:	b6 2e       	mov	r11, r22
    3a30:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3a32:	86 2f       	mov	r24, r22
    3a34:	83 70       	andi	r24, 0x03	; 3
    3a36:	29 f4       	brne	.+10     	; 0x3a42 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    3a38:	96 2f       	mov	r25, r22
    3a3a:	96 95       	lsr	r25
    3a3c:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    3a3e:	82 e0       	ldi	r24, 0x02	; 2
    3a40:	02 c0       	rjmp	.+4      	; 0x3a46 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3a42:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    3a44:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    3a46:	90 ff       	sbrs	r25, 0
		index++;
    3a48:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    3a4a:	86 01       	movw	r16, r12
    3a4c:	00 5e       	subi	r16, 0xE0	; 224
    3a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a50:	98 e0       	ldi	r25, 0x08	; 8
    3a52:	89 9f       	mul	r24, r25
    3a54:	00 0d       	add	r16, r0
    3a56:	11 1d       	adc	r17, r1
    3a58:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3a5a:	8f b7       	in	r24, 0x3f	; 63
    3a5c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3a5e:	f8 94       	cli
	return flags;
    3a60:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    3a62:	c6 01       	movw	r24, r12
    3a64:	37 dd       	rcall	.-1426   	; 0x34d4 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    3a66:	f7 01       	movw	r30, r14
    3a68:	80 81       	ld	r24, Z
    3a6a:	f8 01       	movw	r30, r16
    3a6c:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    3a6e:	f7 01       	movw	r30, r14
    3a70:	82 81       	ldd	r24, Z+2	; 0x02
    3a72:	f8 01       	movw	r30, r16
    3a74:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    3a76:	f7 01       	movw	r30, r14
    3a78:	81 81       	ldd	r24, Z+1	; 0x01
    3a7a:	f8 01       	movw	r30, r16
    3a7c:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    3a7e:	b0 fe       	sbrs	r11, 0
    3a80:	04 c0       	rjmp	.+8      	; 0x3a8a <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    3a82:	f7 01       	movw	r30, r14
    3a84:	83 81       	ldd	r24, Z+3	; 0x03
    3a86:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    3a88:	86 83       	std	Z+6, r24	; 0x06
    3a8a:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a8c:	44 dd       	rcall	.-1400   	; 0x3516 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    3a8e:	af be       	out	0x3f, r10	; 63
    3a90:	0f 90       	pop	r0
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	1f 91       	pop	r17
    3a98:	0f 91       	pop	r16
    3a9a:	ff 90       	pop	r15
    3a9c:	ef 90       	pop	r14
    3a9e:	df 90       	pop	r13
    3aa0:	cf 90       	pop	r12
    3aa2:	bf 90       	pop	r11
    3aa4:	af 90       	pop	r10
    3aa6:	08 95       	ret

00003aa8 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    3aa8:	af 92       	push	r10
    3aaa:	bf 92       	push	r11
    3aac:	cf 92       	push	r12
    3aae:	df 92       	push	r13
    3ab0:	ef 92       	push	r14
    3ab2:	ff 92       	push	r15
    3ab4:	0f 93       	push	r16
    3ab6:	1f 93       	push	r17
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	1f 92       	push	r1
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
    3ac2:	6c 01       	movw	r12, r24
    3ac4:	b6 2e       	mov	r11, r22
    3ac6:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3ac8:	86 2f       	mov	r24, r22
    3aca:	83 70       	andi	r24, 0x03	; 3
    3acc:	29 f4       	brne	.+10     	; 0x3ad8 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    3ace:	96 2f       	mov	r25, r22
    3ad0:	96 95       	lsr	r25
    3ad2:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    3ad4:	82 e0       	ldi	r24, 0x02	; 2
    3ad6:	02 c0       	rjmp	.+4      	; 0x3adc <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3ad8:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    3ada:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    3adc:	90 ff       	sbrs	r25, 0
		index++;
    3ade:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    3ae0:	86 01       	movw	r16, r12
    3ae2:	00 5e       	subi	r16, 0xE0	; 224
    3ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae6:	98 e0       	ldi	r25, 0x08	; 8
    3ae8:	89 9f       	mul	r24, r25
    3aea:	00 0d       	add	r16, r0
    3aec:	11 1d       	adc	r17, r1
    3aee:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3af0:	8f b7       	in	r24, 0x3f	; 63
    3af2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3af4:	f8 94       	cli
	return flags;
    3af6:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    3af8:	c6 01       	movw	r24, r12
    3afa:	ec dc       	rcall	.-1576   	; 0x34d4 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    3afc:	f8 01       	movw	r30, r16
    3afe:	80 81       	ld	r24, Z
    3b00:	f7 01       	movw	r30, r14
    3b02:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    3b04:	f8 01       	movw	r30, r16
    3b06:	82 81       	ldd	r24, Z+2	; 0x02
    3b08:	f7 01       	movw	r30, r14
    3b0a:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    3b0c:	f8 01       	movw	r30, r16
    3b0e:	81 81       	ldd	r24, Z+1	; 0x01
    3b10:	f7 01       	movw	r30, r14
    3b12:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    3b14:	b0 fe       	sbrs	r11, 0
    3b16:	04 c0       	rjmp	.+8      	; 0x3b20 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    3b18:	f8 01       	movw	r30, r16
    3b1a:	86 81       	ldd	r24, Z+6	; 0x06
    3b1c:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    3b1e:	83 83       	std	Z+3, r24	; 0x03
    3b20:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b22:	f9 dc       	rcall	.-1550   	; 0x3516 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    3b24:	af be       	out	0x3f, r10	; 63
    3b26:	0f 90       	pop	r0
    3b28:	df 91       	pop	r29
    3b2a:	cf 91       	pop	r28
    3b2c:	1f 91       	pop	r17
    3b2e:	0f 91       	pop	r16
    3b30:	ff 90       	pop	r15
    3b32:	ef 90       	pop	r14
    3b34:	df 90       	pop	r13
    3b36:	cf 90       	pop	r12
    3b38:	bf 90       	pop	r11
    3b3a:	af 90       	pop	r10
    3b3c:	08 95       	ret

00003b3e <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    3b3e:	80 32       	cpi	r24, 0x20	; 32
    3b40:	93 40       	sbci	r25, 0x03	; 3
    3b42:	61 f4       	brne	.+24     	; 0x3b5c <dac_enable_clock+0x1e>
    3b44:	80 91 db 23 	lds	r24, 0x23DB	; 0x8023db <dacb_enable_count>
    3b48:	91 e0       	ldi	r25, 0x01	; 1
    3b4a:	98 0f       	add	r25, r24
    3b4c:	90 93 db 23 	sts	0x23DB, r25	; 0x8023db <dacb_enable_count>
    3b50:	81 11       	cpse	r24, r1
    3b52:	04 c0       	rjmp	.+8      	; 0x3b5c <dac_enable_clock+0x1e>
    3b54:	64 e0       	ldi	r22, 0x04	; 4
    3b56:	82 e0       	ldi	r24, 0x02	; 2
    3b58:	0c 94 2a 38 	jmp	0x7054	; 0x7054 <sysclk_enable_module>
    3b5c:	08 95       	ret

00003b5e <dac_disable_clock>:
    3b5e:	80 32       	cpi	r24, 0x20	; 32
    3b60:	93 40       	sbci	r25, 0x03	; 3
    3b62:	59 f4       	brne	.+22     	; 0x3b7a <dac_disable_clock+0x1c>
    3b64:	80 91 db 23 	lds	r24, 0x23DB	; 0x8023db <dacb_enable_count>
    3b68:	81 50       	subi	r24, 0x01	; 1
    3b6a:	80 93 db 23 	sts	0x23DB, r24	; 0x8023db <dacb_enable_count>
    3b6e:	81 11       	cpse	r24, r1
    3b70:	04 c0       	rjmp	.+8      	; 0x3b7a <dac_disable_clock+0x1c>
    3b72:	64 e0       	ldi	r22, 0x04	; 4
    3b74:	82 e0       	ldi	r24, 0x02	; 2
    3b76:	0c 94 40 38 	jmp	0x7080	; 0x7080 <sysclk_disable_module>
    3b7a:	08 95       	ret

00003b7c <dac_enable>:
    3b7c:	ef 92       	push	r14
    3b7e:	ff 92       	push	r15
    3b80:	1f 93       	push	r17
    3b82:	cf 93       	push	r28
    3b84:	df 93       	push	r29
    3b86:	1f 92       	push	r1
    3b88:	1f 92       	push	r1
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
    3b8e:	2f b7       	in	r18, 0x3f	; 63
    3b90:	29 83       	std	Y+1, r18	; 0x01
    3b92:	f8 94       	cli
    3b94:	19 81       	ldd	r17, Y+1	; 0x01
    3b96:	20 91 90 28 	lds	r18, 0x2890	; 0x802890 <sleepmgr_locks+0x1>
    3b9a:	2f 3f       	cpi	r18, 0xFF	; 255
    3b9c:	09 f4       	brne	.+2      	; 0x3ba0 <dac_enable+0x24>
    3b9e:	ff cf       	rjmp	.-2      	; 0x3b9e <dac_enable+0x22>
    3ba0:	7c 01       	movw	r14, r24
    3ba2:	8f b7       	in	r24, 0x3f	; 63
    3ba4:	8a 83       	std	Y+2, r24	; 0x02
    3ba6:	f8 94       	cli
    3ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    3baa:	ef e8       	ldi	r30, 0x8F	; 143
    3bac:	f8 e2       	ldi	r31, 0x28	; 40
    3bae:	81 81       	ldd	r24, Z+1	; 0x01
    3bb0:	8f 5f       	subi	r24, 0xFF	; 255
    3bb2:	81 83       	std	Z+1, r24	; 0x01
    3bb4:	9f bf       	out	0x3f, r25	; 63
    3bb6:	c7 01       	movw	r24, r14
    3bb8:	c2 df       	rcall	.-124    	; 0x3b3e <dac_enable_clock>
    3bba:	f7 01       	movw	r30, r14
    3bbc:	80 81       	ld	r24, Z
    3bbe:	81 60       	ori	r24, 0x01	; 1
    3bc0:	80 83       	st	Z, r24
    3bc2:	1f bf       	out	0x3f, r17	; 63
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	df 91       	pop	r29
    3bca:	cf 91       	pop	r28
    3bcc:	1f 91       	pop	r17
    3bce:	ff 90       	pop	r15
    3bd0:	ef 90       	pop	r14
    3bd2:	08 95       	ret

00003bd4 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    3bd4:	9f 92       	push	r9
    3bd6:	af 92       	push	r10
    3bd8:	bf 92       	push	r11
    3bda:	cf 92       	push	r12
    3bdc:	df 92       	push	r13
    3bde:	ef 92       	push	r14
    3be0:	ff 92       	push	r15
    3be2:	0f 93       	push	r16
    3be4:	1f 93       	push	r17
    3be6:	cf 93       	push	r28
    3be8:	df 93       	push	r29
    3bea:	1f 92       	push	r1
    3bec:	cd b7       	in	r28, 0x3d	; 61
    3bee:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    3bf0:	80 32       	cpi	r24, 0x20	; 32
    3bf2:	23 e0       	ldi	r18, 0x03	; 3
    3bf4:	92 07       	cpc	r25, r18
    3bf6:	09 f0       	breq	.+2      	; 0x3bfa <dac_write_configuration+0x26>
    3bf8:	3c c0       	rjmp	.+120    	; 0x3c72 <dac_write_configuration+0x9e>
    3bfa:	7b 01       	movw	r14, r22
    3bfc:	8c 01       	movw	r16, r24
    3bfe:	63 e3       	ldi	r22, 0x33	; 51
    3c00:	70 e0       	ldi	r23, 0x00	; 0
    3c02:	82 e0       	ldi	r24, 0x02	; 2
    3c04:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
    3c08:	98 2e       	mov	r9, r24
    3c0a:	62 e3       	ldi	r22, 0x32	; 50
    3c0c:	70 e0       	ldi	r23, 0x00	; 0
    3c0e:	82 e0       	ldi	r24, 0x02	; 2
    3c10:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
    3c14:	a8 2e       	mov	r10, r24
    3c16:	67 e3       	ldi	r22, 0x37	; 55
    3c18:	70 e0       	ldi	r23, 0x00	; 0
    3c1a:	82 e0       	ldi	r24, 0x02	; 2
    3c1c:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
    3c20:	b8 2e       	mov	r11, r24
    3c22:	66 e3       	ldi	r22, 0x36	; 54
    3c24:	70 e0       	ldi	r23, 0x00	; 0
    3c26:	82 e0       	ldi	r24, 0x02	; 2
    3c28:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
    3c2c:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c2e:	8f b7       	in	r24, 0x3f	; 63
    3c30:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3c32:	f8 94       	cli
	return flags;
    3c34:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    3c36:	c8 01       	movw	r24, r16
    3c38:	82 df       	rcall	.-252    	; 0x3b3e <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    3c3a:	f8 01       	movw	r30, r16
    3c3c:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    3c3e:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    3c40:	f7 01       	movw	r30, r14
    3c42:	91 81       	ldd	r25, Z+1	; 0x01
    3c44:	f8 01       	movw	r30, r16
    3c46:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    3c48:	f7 01       	movw	r30, r14
    3c4a:	92 81       	ldd	r25, Z+2	; 0x02
    3c4c:	f8 01       	movw	r30, r16
    3c4e:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    3c50:	f7 01       	movw	r30, r14
    3c52:	93 81       	ldd	r25, Z+3	; 0x03
    3c54:	f8 01       	movw	r30, r16
    3c56:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    3c58:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    3c5a:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    3c5c:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    3c5e:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    3c60:	81 70       	andi	r24, 0x01	; 1
    3c62:	f7 01       	movw	r30, r14
    3c64:	90 81       	ld	r25, Z
    3c66:	89 2b       	or	r24, r25
    3c68:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    3c6a:	80 83       	st	Z, r24
    3c6c:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c6e:	77 df       	rcall	.-274    	; 0x3b5e <dac_disable_clock>
	cpu_irq_restore(flags);
}
    3c70:	df be       	out	0x3f, r13	; 63
    3c72:	0f 90       	pop	r0
    3c74:	df 91       	pop	r29
    3c76:	cf 91       	pop	r28
    3c78:	1f 91       	pop	r17
    3c7a:	0f 91       	pop	r16
    3c7c:	ff 90       	pop	r15
    3c7e:	ef 90       	pop	r14
    3c80:	df 90       	pop	r13
    3c82:	cf 90       	pop	r12
    3c84:	bf 90       	pop	r11
    3c86:	af 90       	pop	r10
    3c88:	9f 90       	pop	r9
    3c8a:	08 95       	ret

00003c8c <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    3c8c:	df 92       	push	r13
    3c8e:	ef 92       	push	r14
    3c90:	ff 92       	push	r15
    3c92:	0f 93       	push	r16
    3c94:	1f 93       	push	r17
    3c96:	cf 93       	push	r28
    3c98:	df 93       	push	r29
    3c9a:	1f 92       	push	r1
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	8c 01       	movw	r16, r24
    3ca2:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3ca4:	8f b7       	in	r24, 0x3f	; 63
    3ca6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3ca8:	f8 94       	cli
	return flags;
    3caa:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    3cac:	c8 01       	movw	r24, r16
    3cae:	47 df       	rcall	.-370    	; 0x3b3e <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    3cb0:	f8 01       	movw	r30, r16
    3cb2:	80 81       	ld	r24, Z
    3cb4:	8e 7f       	andi	r24, 0xFE	; 254
    3cb6:	f7 01       	movw	r30, r14
    3cb8:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    3cba:	f8 01       	movw	r30, r16
    3cbc:	81 81       	ldd	r24, Z+1	; 0x01
    3cbe:	f7 01       	movw	r30, r14
    3cc0:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    3cc2:	f8 01       	movw	r30, r16
    3cc4:	82 81       	ldd	r24, Z+2	; 0x02
    3cc6:	f7 01       	movw	r30, r14
    3cc8:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    3cca:	f8 01       	movw	r30, r16
    3ccc:	83 81       	ldd	r24, Z+3	; 0x03
    3cce:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    3cd0:	83 83       	std	Z+3, r24	; 0x03
    3cd2:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3cd4:	44 df       	rcall	.-376    	; 0x3b5e <dac_disable_clock>
	cpu_irq_restore(flags);
}
    3cd6:	df be       	out	0x3f, r13	; 63
    3cd8:	0f 90       	pop	r0
    3cda:	df 91       	pop	r29
    3cdc:	cf 91       	pop	r28
    3cde:	1f 91       	pop	r17
    3ce0:	0f 91       	pop	r16
    3ce2:	ff 90       	pop	r15
    3ce4:	ef 90       	pop	r14
    3ce6:	df 90       	pop	r13
    3ce8:	08 95       	ret

00003cea <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    3cea:	1f 92       	push	r1
    3cec:	0f 92       	push	r0
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	0f 92       	push	r0
    3cf2:	11 24       	eor	r1, r1
    3cf4:	0b b6       	in	r0, 0x3b	; 59
    3cf6:	0f 92       	push	r0
    3cf8:	2f 93       	push	r18
    3cfa:	3f 93       	push	r19
    3cfc:	4f 93       	push	r20
    3cfe:	5f 93       	push	r21
    3d00:	6f 93       	push	r22
    3d02:	7f 93       	push	r23
    3d04:	8f 93       	push	r24
    3d06:	9f 93       	push	r25
    3d08:	af 93       	push	r26
    3d0a:	bf 93       	push	r27
    3d0c:	ef 93       	push	r30
    3d0e:	ff 93       	push	r31
    3d10:	e0 91 22 24 	lds	r30, 0x2422	; 0x802422 <tc_tcc0_ovf_callback>
    3d14:	f0 91 23 24 	lds	r31, 0x2423	; 0x802423 <tc_tcc0_ovf_callback+0x1>
    3d18:	30 97       	sbiw	r30, 0x00	; 0
    3d1a:	09 f0       	breq	.+2      	; 0x3d1e <__vector_14+0x34>
    3d1c:	19 95       	eicall
    3d1e:	ff 91       	pop	r31
    3d20:	ef 91       	pop	r30
    3d22:	bf 91       	pop	r27
    3d24:	af 91       	pop	r26
    3d26:	9f 91       	pop	r25
    3d28:	8f 91       	pop	r24
    3d2a:	7f 91       	pop	r23
    3d2c:	6f 91       	pop	r22
    3d2e:	5f 91       	pop	r21
    3d30:	4f 91       	pop	r20
    3d32:	3f 91       	pop	r19
    3d34:	2f 91       	pop	r18
    3d36:	0f 90       	pop	r0
    3d38:	0b be       	out	0x3b, r0	; 59
    3d3a:	0f 90       	pop	r0
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	0f 90       	pop	r0
    3d40:	1f 90       	pop	r1
    3d42:	18 95       	reti

00003d44 <__vector_15>:
    3d44:	1f 92       	push	r1
    3d46:	0f 92       	push	r0
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	0f 92       	push	r0
    3d4c:	11 24       	eor	r1, r1
    3d4e:	0b b6       	in	r0, 0x3b	; 59
    3d50:	0f 92       	push	r0
    3d52:	2f 93       	push	r18
    3d54:	3f 93       	push	r19
    3d56:	4f 93       	push	r20
    3d58:	5f 93       	push	r21
    3d5a:	6f 93       	push	r22
    3d5c:	7f 93       	push	r23
    3d5e:	8f 93       	push	r24
    3d60:	9f 93       	push	r25
    3d62:	af 93       	push	r26
    3d64:	bf 93       	push	r27
    3d66:	ef 93       	push	r30
    3d68:	ff 93       	push	r31
    3d6a:	e0 91 20 24 	lds	r30, 0x2420	; 0x802420 <tc_tcc0_err_callback>
    3d6e:	f0 91 21 24 	lds	r31, 0x2421	; 0x802421 <tc_tcc0_err_callback+0x1>
    3d72:	30 97       	sbiw	r30, 0x00	; 0
    3d74:	09 f0       	breq	.+2      	; 0x3d78 <__vector_15+0x34>
    3d76:	19 95       	eicall
    3d78:	ff 91       	pop	r31
    3d7a:	ef 91       	pop	r30
    3d7c:	bf 91       	pop	r27
    3d7e:	af 91       	pop	r26
    3d80:	9f 91       	pop	r25
    3d82:	8f 91       	pop	r24
    3d84:	7f 91       	pop	r23
    3d86:	6f 91       	pop	r22
    3d88:	5f 91       	pop	r21
    3d8a:	4f 91       	pop	r20
    3d8c:	3f 91       	pop	r19
    3d8e:	2f 91       	pop	r18
    3d90:	0f 90       	pop	r0
    3d92:	0b be       	out	0x3b, r0	; 59
    3d94:	0f 90       	pop	r0
    3d96:	0f be       	out	0x3f, r0	; 63
    3d98:	0f 90       	pop	r0
    3d9a:	1f 90       	pop	r1
    3d9c:	18 95       	reti

00003d9e <__vector_16>:
    3d9e:	1f 92       	push	r1
    3da0:	0f 92       	push	r0
    3da2:	0f b6       	in	r0, 0x3f	; 63
    3da4:	0f 92       	push	r0
    3da6:	11 24       	eor	r1, r1
    3da8:	0b b6       	in	r0, 0x3b	; 59
    3daa:	0f 92       	push	r0
    3dac:	2f 93       	push	r18
    3dae:	3f 93       	push	r19
    3db0:	4f 93       	push	r20
    3db2:	5f 93       	push	r21
    3db4:	6f 93       	push	r22
    3db6:	7f 93       	push	r23
    3db8:	8f 93       	push	r24
    3dba:	9f 93       	push	r25
    3dbc:	af 93       	push	r26
    3dbe:	bf 93       	push	r27
    3dc0:	ef 93       	push	r30
    3dc2:	ff 93       	push	r31
    3dc4:	e0 91 1e 24 	lds	r30, 0x241E	; 0x80241e <tc_tcc0_cca_callback>
    3dc8:	f0 91 1f 24 	lds	r31, 0x241F	; 0x80241f <tc_tcc0_cca_callback+0x1>
    3dcc:	30 97       	sbiw	r30, 0x00	; 0
    3dce:	09 f0       	breq	.+2      	; 0x3dd2 <__vector_16+0x34>
    3dd0:	19 95       	eicall
    3dd2:	ff 91       	pop	r31
    3dd4:	ef 91       	pop	r30
    3dd6:	bf 91       	pop	r27
    3dd8:	af 91       	pop	r26
    3dda:	9f 91       	pop	r25
    3ddc:	8f 91       	pop	r24
    3dde:	7f 91       	pop	r23
    3de0:	6f 91       	pop	r22
    3de2:	5f 91       	pop	r21
    3de4:	4f 91       	pop	r20
    3de6:	3f 91       	pop	r19
    3de8:	2f 91       	pop	r18
    3dea:	0f 90       	pop	r0
    3dec:	0b be       	out	0x3b, r0	; 59
    3dee:	0f 90       	pop	r0
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	0f 90       	pop	r0
    3df4:	1f 90       	pop	r1
    3df6:	18 95       	reti

00003df8 <__vector_17>:
    3df8:	1f 92       	push	r1
    3dfa:	0f 92       	push	r0
    3dfc:	0f b6       	in	r0, 0x3f	; 63
    3dfe:	0f 92       	push	r0
    3e00:	11 24       	eor	r1, r1
    3e02:	0b b6       	in	r0, 0x3b	; 59
    3e04:	0f 92       	push	r0
    3e06:	2f 93       	push	r18
    3e08:	3f 93       	push	r19
    3e0a:	4f 93       	push	r20
    3e0c:	5f 93       	push	r21
    3e0e:	6f 93       	push	r22
    3e10:	7f 93       	push	r23
    3e12:	8f 93       	push	r24
    3e14:	9f 93       	push	r25
    3e16:	af 93       	push	r26
    3e18:	bf 93       	push	r27
    3e1a:	ef 93       	push	r30
    3e1c:	ff 93       	push	r31
    3e1e:	e0 91 1c 24 	lds	r30, 0x241C	; 0x80241c <tc_tcc0_ccb_callback>
    3e22:	f0 91 1d 24 	lds	r31, 0x241D	; 0x80241d <tc_tcc0_ccb_callback+0x1>
    3e26:	30 97       	sbiw	r30, 0x00	; 0
    3e28:	09 f0       	breq	.+2      	; 0x3e2c <__vector_17+0x34>
    3e2a:	19 95       	eicall
    3e2c:	ff 91       	pop	r31
    3e2e:	ef 91       	pop	r30
    3e30:	bf 91       	pop	r27
    3e32:	af 91       	pop	r26
    3e34:	9f 91       	pop	r25
    3e36:	8f 91       	pop	r24
    3e38:	7f 91       	pop	r23
    3e3a:	6f 91       	pop	r22
    3e3c:	5f 91       	pop	r21
    3e3e:	4f 91       	pop	r20
    3e40:	3f 91       	pop	r19
    3e42:	2f 91       	pop	r18
    3e44:	0f 90       	pop	r0
    3e46:	0b be       	out	0x3b, r0	; 59
    3e48:	0f 90       	pop	r0
    3e4a:	0f be       	out	0x3f, r0	; 63
    3e4c:	0f 90       	pop	r0
    3e4e:	1f 90       	pop	r1
    3e50:	18 95       	reti

00003e52 <__vector_18>:
    3e52:	1f 92       	push	r1
    3e54:	0f 92       	push	r0
    3e56:	0f b6       	in	r0, 0x3f	; 63
    3e58:	0f 92       	push	r0
    3e5a:	11 24       	eor	r1, r1
    3e5c:	0b b6       	in	r0, 0x3b	; 59
    3e5e:	0f 92       	push	r0
    3e60:	2f 93       	push	r18
    3e62:	3f 93       	push	r19
    3e64:	4f 93       	push	r20
    3e66:	5f 93       	push	r21
    3e68:	6f 93       	push	r22
    3e6a:	7f 93       	push	r23
    3e6c:	8f 93       	push	r24
    3e6e:	9f 93       	push	r25
    3e70:	af 93       	push	r26
    3e72:	bf 93       	push	r27
    3e74:	ef 93       	push	r30
    3e76:	ff 93       	push	r31
    3e78:	e0 91 1a 24 	lds	r30, 0x241A	; 0x80241a <tc_tcc0_ccc_callback>
    3e7c:	f0 91 1b 24 	lds	r31, 0x241B	; 0x80241b <tc_tcc0_ccc_callback+0x1>
    3e80:	30 97       	sbiw	r30, 0x00	; 0
    3e82:	09 f0       	breq	.+2      	; 0x3e86 <__vector_18+0x34>
    3e84:	19 95       	eicall
    3e86:	ff 91       	pop	r31
    3e88:	ef 91       	pop	r30
    3e8a:	bf 91       	pop	r27
    3e8c:	af 91       	pop	r26
    3e8e:	9f 91       	pop	r25
    3e90:	8f 91       	pop	r24
    3e92:	7f 91       	pop	r23
    3e94:	6f 91       	pop	r22
    3e96:	5f 91       	pop	r21
    3e98:	4f 91       	pop	r20
    3e9a:	3f 91       	pop	r19
    3e9c:	2f 91       	pop	r18
    3e9e:	0f 90       	pop	r0
    3ea0:	0b be       	out	0x3b, r0	; 59
    3ea2:	0f 90       	pop	r0
    3ea4:	0f be       	out	0x3f, r0	; 63
    3ea6:	0f 90       	pop	r0
    3ea8:	1f 90       	pop	r1
    3eaa:	18 95       	reti

00003eac <__vector_19>:
    3eac:	1f 92       	push	r1
    3eae:	0f 92       	push	r0
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	0f 92       	push	r0
    3eb4:	11 24       	eor	r1, r1
    3eb6:	0b b6       	in	r0, 0x3b	; 59
    3eb8:	0f 92       	push	r0
    3eba:	2f 93       	push	r18
    3ebc:	3f 93       	push	r19
    3ebe:	4f 93       	push	r20
    3ec0:	5f 93       	push	r21
    3ec2:	6f 93       	push	r22
    3ec4:	7f 93       	push	r23
    3ec6:	8f 93       	push	r24
    3ec8:	9f 93       	push	r25
    3eca:	af 93       	push	r26
    3ecc:	bf 93       	push	r27
    3ece:	ef 93       	push	r30
    3ed0:	ff 93       	push	r31
    3ed2:	e0 91 18 24 	lds	r30, 0x2418	; 0x802418 <tc_tcc0_ccd_callback>
    3ed6:	f0 91 19 24 	lds	r31, 0x2419	; 0x802419 <tc_tcc0_ccd_callback+0x1>
    3eda:	30 97       	sbiw	r30, 0x00	; 0
    3edc:	09 f0       	breq	.+2      	; 0x3ee0 <__vector_19+0x34>
    3ede:	19 95       	eicall
    3ee0:	ff 91       	pop	r31
    3ee2:	ef 91       	pop	r30
    3ee4:	bf 91       	pop	r27
    3ee6:	af 91       	pop	r26
    3ee8:	9f 91       	pop	r25
    3eea:	8f 91       	pop	r24
    3eec:	7f 91       	pop	r23
    3eee:	6f 91       	pop	r22
    3ef0:	5f 91       	pop	r21
    3ef2:	4f 91       	pop	r20
    3ef4:	3f 91       	pop	r19
    3ef6:	2f 91       	pop	r18
    3ef8:	0f 90       	pop	r0
    3efa:	0b be       	out	0x3b, r0	; 59
    3efc:	0f 90       	pop	r0
    3efe:	0f be       	out	0x3f, r0	; 63
    3f00:	0f 90       	pop	r0
    3f02:	1f 90       	pop	r1
    3f04:	18 95       	reti

00003f06 <__vector_20>:
    3f06:	1f 92       	push	r1
    3f08:	0f 92       	push	r0
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	0f 92       	push	r0
    3f0e:	11 24       	eor	r1, r1
    3f10:	0b b6       	in	r0, 0x3b	; 59
    3f12:	0f 92       	push	r0
    3f14:	2f 93       	push	r18
    3f16:	3f 93       	push	r19
    3f18:	4f 93       	push	r20
    3f1a:	5f 93       	push	r21
    3f1c:	6f 93       	push	r22
    3f1e:	7f 93       	push	r23
    3f20:	8f 93       	push	r24
    3f22:	9f 93       	push	r25
    3f24:	af 93       	push	r26
    3f26:	bf 93       	push	r27
    3f28:	ef 93       	push	r30
    3f2a:	ff 93       	push	r31
    3f2c:	e0 91 16 24 	lds	r30, 0x2416	; 0x802416 <tc_tcc1_ovf_callback>
    3f30:	f0 91 17 24 	lds	r31, 0x2417	; 0x802417 <tc_tcc1_ovf_callback+0x1>
    3f34:	30 97       	sbiw	r30, 0x00	; 0
    3f36:	09 f0       	breq	.+2      	; 0x3f3a <__vector_20+0x34>
    3f38:	19 95       	eicall
    3f3a:	ff 91       	pop	r31
    3f3c:	ef 91       	pop	r30
    3f3e:	bf 91       	pop	r27
    3f40:	af 91       	pop	r26
    3f42:	9f 91       	pop	r25
    3f44:	8f 91       	pop	r24
    3f46:	7f 91       	pop	r23
    3f48:	6f 91       	pop	r22
    3f4a:	5f 91       	pop	r21
    3f4c:	4f 91       	pop	r20
    3f4e:	3f 91       	pop	r19
    3f50:	2f 91       	pop	r18
    3f52:	0f 90       	pop	r0
    3f54:	0b be       	out	0x3b, r0	; 59
    3f56:	0f 90       	pop	r0
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	0f 90       	pop	r0
    3f5c:	1f 90       	pop	r1
    3f5e:	18 95       	reti

00003f60 <__vector_21>:
    3f60:	1f 92       	push	r1
    3f62:	0f 92       	push	r0
    3f64:	0f b6       	in	r0, 0x3f	; 63
    3f66:	0f 92       	push	r0
    3f68:	11 24       	eor	r1, r1
    3f6a:	0b b6       	in	r0, 0x3b	; 59
    3f6c:	0f 92       	push	r0
    3f6e:	2f 93       	push	r18
    3f70:	3f 93       	push	r19
    3f72:	4f 93       	push	r20
    3f74:	5f 93       	push	r21
    3f76:	6f 93       	push	r22
    3f78:	7f 93       	push	r23
    3f7a:	8f 93       	push	r24
    3f7c:	9f 93       	push	r25
    3f7e:	af 93       	push	r26
    3f80:	bf 93       	push	r27
    3f82:	ef 93       	push	r30
    3f84:	ff 93       	push	r31
    3f86:	e0 91 14 24 	lds	r30, 0x2414	; 0x802414 <tc_tcc1_err_callback>
    3f8a:	f0 91 15 24 	lds	r31, 0x2415	; 0x802415 <tc_tcc1_err_callback+0x1>
    3f8e:	30 97       	sbiw	r30, 0x00	; 0
    3f90:	09 f0       	breq	.+2      	; 0x3f94 <__vector_21+0x34>
    3f92:	19 95       	eicall
    3f94:	ff 91       	pop	r31
    3f96:	ef 91       	pop	r30
    3f98:	bf 91       	pop	r27
    3f9a:	af 91       	pop	r26
    3f9c:	9f 91       	pop	r25
    3f9e:	8f 91       	pop	r24
    3fa0:	7f 91       	pop	r23
    3fa2:	6f 91       	pop	r22
    3fa4:	5f 91       	pop	r21
    3fa6:	4f 91       	pop	r20
    3fa8:	3f 91       	pop	r19
    3faa:	2f 91       	pop	r18
    3fac:	0f 90       	pop	r0
    3fae:	0b be       	out	0x3b, r0	; 59
    3fb0:	0f 90       	pop	r0
    3fb2:	0f be       	out	0x3f, r0	; 63
    3fb4:	0f 90       	pop	r0
    3fb6:	1f 90       	pop	r1
    3fb8:	18 95       	reti

00003fba <__vector_22>:
    3fba:	1f 92       	push	r1
    3fbc:	0f 92       	push	r0
    3fbe:	0f b6       	in	r0, 0x3f	; 63
    3fc0:	0f 92       	push	r0
    3fc2:	11 24       	eor	r1, r1
    3fc4:	0b b6       	in	r0, 0x3b	; 59
    3fc6:	0f 92       	push	r0
    3fc8:	2f 93       	push	r18
    3fca:	3f 93       	push	r19
    3fcc:	4f 93       	push	r20
    3fce:	5f 93       	push	r21
    3fd0:	6f 93       	push	r22
    3fd2:	7f 93       	push	r23
    3fd4:	8f 93       	push	r24
    3fd6:	9f 93       	push	r25
    3fd8:	af 93       	push	r26
    3fda:	bf 93       	push	r27
    3fdc:	ef 93       	push	r30
    3fde:	ff 93       	push	r31
    3fe0:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <tc_tcc1_cca_callback>
    3fe4:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <tc_tcc1_cca_callback+0x1>
    3fe8:	30 97       	sbiw	r30, 0x00	; 0
    3fea:	09 f0       	breq	.+2      	; 0x3fee <__vector_22+0x34>
    3fec:	19 95       	eicall
    3fee:	ff 91       	pop	r31
    3ff0:	ef 91       	pop	r30
    3ff2:	bf 91       	pop	r27
    3ff4:	af 91       	pop	r26
    3ff6:	9f 91       	pop	r25
    3ff8:	8f 91       	pop	r24
    3ffa:	7f 91       	pop	r23
    3ffc:	6f 91       	pop	r22
    3ffe:	5f 91       	pop	r21
    4000:	4f 91       	pop	r20
    4002:	3f 91       	pop	r19
    4004:	2f 91       	pop	r18
    4006:	0f 90       	pop	r0
    4008:	0b be       	out	0x3b, r0	; 59
    400a:	0f 90       	pop	r0
    400c:	0f be       	out	0x3f, r0	; 63
    400e:	0f 90       	pop	r0
    4010:	1f 90       	pop	r1
    4012:	18 95       	reti

00004014 <__vector_23>:
    4014:	1f 92       	push	r1
    4016:	0f 92       	push	r0
    4018:	0f b6       	in	r0, 0x3f	; 63
    401a:	0f 92       	push	r0
    401c:	11 24       	eor	r1, r1
    401e:	0b b6       	in	r0, 0x3b	; 59
    4020:	0f 92       	push	r0
    4022:	2f 93       	push	r18
    4024:	3f 93       	push	r19
    4026:	4f 93       	push	r20
    4028:	5f 93       	push	r21
    402a:	6f 93       	push	r22
    402c:	7f 93       	push	r23
    402e:	8f 93       	push	r24
    4030:	9f 93       	push	r25
    4032:	af 93       	push	r26
    4034:	bf 93       	push	r27
    4036:	ef 93       	push	r30
    4038:	ff 93       	push	r31
    403a:	e0 91 10 24 	lds	r30, 0x2410	; 0x802410 <tc_tcc1_ccb_callback>
    403e:	f0 91 11 24 	lds	r31, 0x2411	; 0x802411 <tc_tcc1_ccb_callback+0x1>
    4042:	30 97       	sbiw	r30, 0x00	; 0
    4044:	09 f0       	breq	.+2      	; 0x4048 <__vector_23+0x34>
    4046:	19 95       	eicall
    4048:	ff 91       	pop	r31
    404a:	ef 91       	pop	r30
    404c:	bf 91       	pop	r27
    404e:	af 91       	pop	r26
    4050:	9f 91       	pop	r25
    4052:	8f 91       	pop	r24
    4054:	7f 91       	pop	r23
    4056:	6f 91       	pop	r22
    4058:	5f 91       	pop	r21
    405a:	4f 91       	pop	r20
    405c:	3f 91       	pop	r19
    405e:	2f 91       	pop	r18
    4060:	0f 90       	pop	r0
    4062:	0b be       	out	0x3b, r0	; 59
    4064:	0f 90       	pop	r0
    4066:	0f be       	out	0x3f, r0	; 63
    4068:	0f 90       	pop	r0
    406a:	1f 90       	pop	r1
    406c:	18 95       	reti

0000406e <__vector_77>:
    406e:	1f 92       	push	r1
    4070:	0f 92       	push	r0
    4072:	0f b6       	in	r0, 0x3f	; 63
    4074:	0f 92       	push	r0
    4076:	11 24       	eor	r1, r1
    4078:	0b b6       	in	r0, 0x3b	; 59
    407a:	0f 92       	push	r0
    407c:	2f 93       	push	r18
    407e:	3f 93       	push	r19
    4080:	4f 93       	push	r20
    4082:	5f 93       	push	r21
    4084:	6f 93       	push	r22
    4086:	7f 93       	push	r23
    4088:	8f 93       	push	r24
    408a:	9f 93       	push	r25
    408c:	af 93       	push	r26
    408e:	bf 93       	push	r27
    4090:	ef 93       	push	r30
    4092:	ff 93       	push	r31
    4094:	e0 91 0e 24 	lds	r30, 0x240E	; 0x80240e <tc_tcd0_ovf_callback>
    4098:	f0 91 0f 24 	lds	r31, 0x240F	; 0x80240f <tc_tcd0_ovf_callback+0x1>
    409c:	30 97       	sbiw	r30, 0x00	; 0
    409e:	09 f0       	breq	.+2      	; 0x40a2 <__vector_77+0x34>
    40a0:	19 95       	eicall
    40a2:	ff 91       	pop	r31
    40a4:	ef 91       	pop	r30
    40a6:	bf 91       	pop	r27
    40a8:	af 91       	pop	r26
    40aa:	9f 91       	pop	r25
    40ac:	8f 91       	pop	r24
    40ae:	7f 91       	pop	r23
    40b0:	6f 91       	pop	r22
    40b2:	5f 91       	pop	r21
    40b4:	4f 91       	pop	r20
    40b6:	3f 91       	pop	r19
    40b8:	2f 91       	pop	r18
    40ba:	0f 90       	pop	r0
    40bc:	0b be       	out	0x3b, r0	; 59
    40be:	0f 90       	pop	r0
    40c0:	0f be       	out	0x3f, r0	; 63
    40c2:	0f 90       	pop	r0
    40c4:	1f 90       	pop	r1
    40c6:	18 95       	reti

000040c8 <__vector_78>:
    40c8:	1f 92       	push	r1
    40ca:	0f 92       	push	r0
    40cc:	0f b6       	in	r0, 0x3f	; 63
    40ce:	0f 92       	push	r0
    40d0:	11 24       	eor	r1, r1
    40d2:	0b b6       	in	r0, 0x3b	; 59
    40d4:	0f 92       	push	r0
    40d6:	2f 93       	push	r18
    40d8:	3f 93       	push	r19
    40da:	4f 93       	push	r20
    40dc:	5f 93       	push	r21
    40de:	6f 93       	push	r22
    40e0:	7f 93       	push	r23
    40e2:	8f 93       	push	r24
    40e4:	9f 93       	push	r25
    40e6:	af 93       	push	r26
    40e8:	bf 93       	push	r27
    40ea:	ef 93       	push	r30
    40ec:	ff 93       	push	r31
    40ee:	e0 91 0c 24 	lds	r30, 0x240C	; 0x80240c <tc_tcd0_err_callback>
    40f2:	f0 91 0d 24 	lds	r31, 0x240D	; 0x80240d <tc_tcd0_err_callback+0x1>
    40f6:	30 97       	sbiw	r30, 0x00	; 0
    40f8:	09 f0       	breq	.+2      	; 0x40fc <__vector_78+0x34>
    40fa:	19 95       	eicall
    40fc:	ff 91       	pop	r31
    40fe:	ef 91       	pop	r30
    4100:	bf 91       	pop	r27
    4102:	af 91       	pop	r26
    4104:	9f 91       	pop	r25
    4106:	8f 91       	pop	r24
    4108:	7f 91       	pop	r23
    410a:	6f 91       	pop	r22
    410c:	5f 91       	pop	r21
    410e:	4f 91       	pop	r20
    4110:	3f 91       	pop	r19
    4112:	2f 91       	pop	r18
    4114:	0f 90       	pop	r0
    4116:	0b be       	out	0x3b, r0	; 59
    4118:	0f 90       	pop	r0
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	0f 90       	pop	r0
    411e:	1f 90       	pop	r1
    4120:	18 95       	reti

00004122 <__vector_79>:
    4122:	1f 92       	push	r1
    4124:	0f 92       	push	r0
    4126:	0f b6       	in	r0, 0x3f	; 63
    4128:	0f 92       	push	r0
    412a:	11 24       	eor	r1, r1
    412c:	0b b6       	in	r0, 0x3b	; 59
    412e:	0f 92       	push	r0
    4130:	2f 93       	push	r18
    4132:	3f 93       	push	r19
    4134:	4f 93       	push	r20
    4136:	5f 93       	push	r21
    4138:	6f 93       	push	r22
    413a:	7f 93       	push	r23
    413c:	8f 93       	push	r24
    413e:	9f 93       	push	r25
    4140:	af 93       	push	r26
    4142:	bf 93       	push	r27
    4144:	ef 93       	push	r30
    4146:	ff 93       	push	r31
    4148:	e0 91 0a 24 	lds	r30, 0x240A	; 0x80240a <tc_tcd0_cca_callback>
    414c:	f0 91 0b 24 	lds	r31, 0x240B	; 0x80240b <tc_tcd0_cca_callback+0x1>
    4150:	30 97       	sbiw	r30, 0x00	; 0
    4152:	09 f0       	breq	.+2      	; 0x4156 <__vector_79+0x34>
    4154:	19 95       	eicall
    4156:	ff 91       	pop	r31
    4158:	ef 91       	pop	r30
    415a:	bf 91       	pop	r27
    415c:	af 91       	pop	r26
    415e:	9f 91       	pop	r25
    4160:	8f 91       	pop	r24
    4162:	7f 91       	pop	r23
    4164:	6f 91       	pop	r22
    4166:	5f 91       	pop	r21
    4168:	4f 91       	pop	r20
    416a:	3f 91       	pop	r19
    416c:	2f 91       	pop	r18
    416e:	0f 90       	pop	r0
    4170:	0b be       	out	0x3b, r0	; 59
    4172:	0f 90       	pop	r0
    4174:	0f be       	out	0x3f, r0	; 63
    4176:	0f 90       	pop	r0
    4178:	1f 90       	pop	r1
    417a:	18 95       	reti

0000417c <__vector_80>:
    417c:	1f 92       	push	r1
    417e:	0f 92       	push	r0
    4180:	0f b6       	in	r0, 0x3f	; 63
    4182:	0f 92       	push	r0
    4184:	11 24       	eor	r1, r1
    4186:	0b b6       	in	r0, 0x3b	; 59
    4188:	0f 92       	push	r0
    418a:	2f 93       	push	r18
    418c:	3f 93       	push	r19
    418e:	4f 93       	push	r20
    4190:	5f 93       	push	r21
    4192:	6f 93       	push	r22
    4194:	7f 93       	push	r23
    4196:	8f 93       	push	r24
    4198:	9f 93       	push	r25
    419a:	af 93       	push	r26
    419c:	bf 93       	push	r27
    419e:	ef 93       	push	r30
    41a0:	ff 93       	push	r31
    41a2:	e0 91 08 24 	lds	r30, 0x2408	; 0x802408 <tc_tcd0_ccb_callback>
    41a6:	f0 91 09 24 	lds	r31, 0x2409	; 0x802409 <tc_tcd0_ccb_callback+0x1>
    41aa:	30 97       	sbiw	r30, 0x00	; 0
    41ac:	09 f0       	breq	.+2      	; 0x41b0 <__vector_80+0x34>
    41ae:	19 95       	eicall
    41b0:	ff 91       	pop	r31
    41b2:	ef 91       	pop	r30
    41b4:	bf 91       	pop	r27
    41b6:	af 91       	pop	r26
    41b8:	9f 91       	pop	r25
    41ba:	8f 91       	pop	r24
    41bc:	7f 91       	pop	r23
    41be:	6f 91       	pop	r22
    41c0:	5f 91       	pop	r21
    41c2:	4f 91       	pop	r20
    41c4:	3f 91       	pop	r19
    41c6:	2f 91       	pop	r18
    41c8:	0f 90       	pop	r0
    41ca:	0b be       	out	0x3b, r0	; 59
    41cc:	0f 90       	pop	r0
    41ce:	0f be       	out	0x3f, r0	; 63
    41d0:	0f 90       	pop	r0
    41d2:	1f 90       	pop	r1
    41d4:	18 95       	reti

000041d6 <__vector_81>:
    41d6:	1f 92       	push	r1
    41d8:	0f 92       	push	r0
    41da:	0f b6       	in	r0, 0x3f	; 63
    41dc:	0f 92       	push	r0
    41de:	11 24       	eor	r1, r1
    41e0:	0b b6       	in	r0, 0x3b	; 59
    41e2:	0f 92       	push	r0
    41e4:	2f 93       	push	r18
    41e6:	3f 93       	push	r19
    41e8:	4f 93       	push	r20
    41ea:	5f 93       	push	r21
    41ec:	6f 93       	push	r22
    41ee:	7f 93       	push	r23
    41f0:	8f 93       	push	r24
    41f2:	9f 93       	push	r25
    41f4:	af 93       	push	r26
    41f6:	bf 93       	push	r27
    41f8:	ef 93       	push	r30
    41fa:	ff 93       	push	r31
    41fc:	e0 91 06 24 	lds	r30, 0x2406	; 0x802406 <tc_tcd0_ccc_callback>
    4200:	f0 91 07 24 	lds	r31, 0x2407	; 0x802407 <tc_tcd0_ccc_callback+0x1>
    4204:	30 97       	sbiw	r30, 0x00	; 0
    4206:	09 f0       	breq	.+2      	; 0x420a <__vector_81+0x34>
    4208:	19 95       	eicall
    420a:	ff 91       	pop	r31
    420c:	ef 91       	pop	r30
    420e:	bf 91       	pop	r27
    4210:	af 91       	pop	r26
    4212:	9f 91       	pop	r25
    4214:	8f 91       	pop	r24
    4216:	7f 91       	pop	r23
    4218:	6f 91       	pop	r22
    421a:	5f 91       	pop	r21
    421c:	4f 91       	pop	r20
    421e:	3f 91       	pop	r19
    4220:	2f 91       	pop	r18
    4222:	0f 90       	pop	r0
    4224:	0b be       	out	0x3b, r0	; 59
    4226:	0f 90       	pop	r0
    4228:	0f be       	out	0x3f, r0	; 63
    422a:	0f 90       	pop	r0
    422c:	1f 90       	pop	r1
    422e:	18 95       	reti

00004230 <__vector_82>:
    4230:	1f 92       	push	r1
    4232:	0f 92       	push	r0
    4234:	0f b6       	in	r0, 0x3f	; 63
    4236:	0f 92       	push	r0
    4238:	11 24       	eor	r1, r1
    423a:	0b b6       	in	r0, 0x3b	; 59
    423c:	0f 92       	push	r0
    423e:	2f 93       	push	r18
    4240:	3f 93       	push	r19
    4242:	4f 93       	push	r20
    4244:	5f 93       	push	r21
    4246:	6f 93       	push	r22
    4248:	7f 93       	push	r23
    424a:	8f 93       	push	r24
    424c:	9f 93       	push	r25
    424e:	af 93       	push	r26
    4250:	bf 93       	push	r27
    4252:	ef 93       	push	r30
    4254:	ff 93       	push	r31
    4256:	e0 91 04 24 	lds	r30, 0x2404	; 0x802404 <tc_tcd0_ccd_callback>
    425a:	f0 91 05 24 	lds	r31, 0x2405	; 0x802405 <tc_tcd0_ccd_callback+0x1>
    425e:	30 97       	sbiw	r30, 0x00	; 0
    4260:	09 f0       	breq	.+2      	; 0x4264 <__vector_82+0x34>
    4262:	19 95       	eicall
    4264:	ff 91       	pop	r31
    4266:	ef 91       	pop	r30
    4268:	bf 91       	pop	r27
    426a:	af 91       	pop	r26
    426c:	9f 91       	pop	r25
    426e:	8f 91       	pop	r24
    4270:	7f 91       	pop	r23
    4272:	6f 91       	pop	r22
    4274:	5f 91       	pop	r21
    4276:	4f 91       	pop	r20
    4278:	3f 91       	pop	r19
    427a:	2f 91       	pop	r18
    427c:	0f 90       	pop	r0
    427e:	0b be       	out	0x3b, r0	; 59
    4280:	0f 90       	pop	r0
    4282:	0f be       	out	0x3f, r0	; 63
    4284:	0f 90       	pop	r0
    4286:	1f 90       	pop	r1
    4288:	18 95       	reti

0000428a <__vector_83>:
    428a:	1f 92       	push	r1
    428c:	0f 92       	push	r0
    428e:	0f b6       	in	r0, 0x3f	; 63
    4290:	0f 92       	push	r0
    4292:	11 24       	eor	r1, r1
    4294:	0b b6       	in	r0, 0x3b	; 59
    4296:	0f 92       	push	r0
    4298:	2f 93       	push	r18
    429a:	3f 93       	push	r19
    429c:	4f 93       	push	r20
    429e:	5f 93       	push	r21
    42a0:	6f 93       	push	r22
    42a2:	7f 93       	push	r23
    42a4:	8f 93       	push	r24
    42a6:	9f 93       	push	r25
    42a8:	af 93       	push	r26
    42aa:	bf 93       	push	r27
    42ac:	ef 93       	push	r30
    42ae:	ff 93       	push	r31
    42b0:	e0 91 02 24 	lds	r30, 0x2402	; 0x802402 <tc_tcd1_ovf_callback>
    42b4:	f0 91 03 24 	lds	r31, 0x2403	; 0x802403 <tc_tcd1_ovf_callback+0x1>
    42b8:	30 97       	sbiw	r30, 0x00	; 0
    42ba:	09 f0       	breq	.+2      	; 0x42be <__vector_83+0x34>
    42bc:	19 95       	eicall
    42be:	ff 91       	pop	r31
    42c0:	ef 91       	pop	r30
    42c2:	bf 91       	pop	r27
    42c4:	af 91       	pop	r26
    42c6:	9f 91       	pop	r25
    42c8:	8f 91       	pop	r24
    42ca:	7f 91       	pop	r23
    42cc:	6f 91       	pop	r22
    42ce:	5f 91       	pop	r21
    42d0:	4f 91       	pop	r20
    42d2:	3f 91       	pop	r19
    42d4:	2f 91       	pop	r18
    42d6:	0f 90       	pop	r0
    42d8:	0b be       	out	0x3b, r0	; 59
    42da:	0f 90       	pop	r0
    42dc:	0f be       	out	0x3f, r0	; 63
    42de:	0f 90       	pop	r0
    42e0:	1f 90       	pop	r1
    42e2:	18 95       	reti

000042e4 <__vector_84>:
    42e4:	1f 92       	push	r1
    42e6:	0f 92       	push	r0
    42e8:	0f b6       	in	r0, 0x3f	; 63
    42ea:	0f 92       	push	r0
    42ec:	11 24       	eor	r1, r1
    42ee:	0b b6       	in	r0, 0x3b	; 59
    42f0:	0f 92       	push	r0
    42f2:	2f 93       	push	r18
    42f4:	3f 93       	push	r19
    42f6:	4f 93       	push	r20
    42f8:	5f 93       	push	r21
    42fa:	6f 93       	push	r22
    42fc:	7f 93       	push	r23
    42fe:	8f 93       	push	r24
    4300:	9f 93       	push	r25
    4302:	af 93       	push	r26
    4304:	bf 93       	push	r27
    4306:	ef 93       	push	r30
    4308:	ff 93       	push	r31
    430a:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <tc_tcd1_err_callback>
    430e:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <tc_tcd1_err_callback+0x1>
    4312:	30 97       	sbiw	r30, 0x00	; 0
    4314:	09 f0       	breq	.+2      	; 0x4318 <__vector_84+0x34>
    4316:	19 95       	eicall
    4318:	ff 91       	pop	r31
    431a:	ef 91       	pop	r30
    431c:	bf 91       	pop	r27
    431e:	af 91       	pop	r26
    4320:	9f 91       	pop	r25
    4322:	8f 91       	pop	r24
    4324:	7f 91       	pop	r23
    4326:	6f 91       	pop	r22
    4328:	5f 91       	pop	r21
    432a:	4f 91       	pop	r20
    432c:	3f 91       	pop	r19
    432e:	2f 91       	pop	r18
    4330:	0f 90       	pop	r0
    4332:	0b be       	out	0x3b, r0	; 59
    4334:	0f 90       	pop	r0
    4336:	0f be       	out	0x3f, r0	; 63
    4338:	0f 90       	pop	r0
    433a:	1f 90       	pop	r1
    433c:	18 95       	reti

0000433e <__vector_85>:
    433e:	1f 92       	push	r1
    4340:	0f 92       	push	r0
    4342:	0f b6       	in	r0, 0x3f	; 63
    4344:	0f 92       	push	r0
    4346:	11 24       	eor	r1, r1
    4348:	0b b6       	in	r0, 0x3b	; 59
    434a:	0f 92       	push	r0
    434c:	2f 93       	push	r18
    434e:	3f 93       	push	r19
    4350:	4f 93       	push	r20
    4352:	5f 93       	push	r21
    4354:	6f 93       	push	r22
    4356:	7f 93       	push	r23
    4358:	8f 93       	push	r24
    435a:	9f 93       	push	r25
    435c:	af 93       	push	r26
    435e:	bf 93       	push	r27
    4360:	ef 93       	push	r30
    4362:	ff 93       	push	r31
    4364:	e0 91 fe 23 	lds	r30, 0x23FE	; 0x8023fe <tc_tcd1_cca_callback>
    4368:	f0 91 ff 23 	lds	r31, 0x23FF	; 0x8023ff <tc_tcd1_cca_callback+0x1>
    436c:	30 97       	sbiw	r30, 0x00	; 0
    436e:	09 f0       	breq	.+2      	; 0x4372 <__vector_85+0x34>
    4370:	19 95       	eicall
    4372:	ff 91       	pop	r31
    4374:	ef 91       	pop	r30
    4376:	bf 91       	pop	r27
    4378:	af 91       	pop	r26
    437a:	9f 91       	pop	r25
    437c:	8f 91       	pop	r24
    437e:	7f 91       	pop	r23
    4380:	6f 91       	pop	r22
    4382:	5f 91       	pop	r21
    4384:	4f 91       	pop	r20
    4386:	3f 91       	pop	r19
    4388:	2f 91       	pop	r18
    438a:	0f 90       	pop	r0
    438c:	0b be       	out	0x3b, r0	; 59
    438e:	0f 90       	pop	r0
    4390:	0f be       	out	0x3f, r0	; 63
    4392:	0f 90       	pop	r0
    4394:	1f 90       	pop	r1
    4396:	18 95       	reti

00004398 <__vector_86>:
    4398:	1f 92       	push	r1
    439a:	0f 92       	push	r0
    439c:	0f b6       	in	r0, 0x3f	; 63
    439e:	0f 92       	push	r0
    43a0:	11 24       	eor	r1, r1
    43a2:	0b b6       	in	r0, 0x3b	; 59
    43a4:	0f 92       	push	r0
    43a6:	2f 93       	push	r18
    43a8:	3f 93       	push	r19
    43aa:	4f 93       	push	r20
    43ac:	5f 93       	push	r21
    43ae:	6f 93       	push	r22
    43b0:	7f 93       	push	r23
    43b2:	8f 93       	push	r24
    43b4:	9f 93       	push	r25
    43b6:	af 93       	push	r26
    43b8:	bf 93       	push	r27
    43ba:	ef 93       	push	r30
    43bc:	ff 93       	push	r31
    43be:	e0 91 fc 23 	lds	r30, 0x23FC	; 0x8023fc <tc_tcd1_ccb_callback>
    43c2:	f0 91 fd 23 	lds	r31, 0x23FD	; 0x8023fd <tc_tcd1_ccb_callback+0x1>
    43c6:	30 97       	sbiw	r30, 0x00	; 0
    43c8:	09 f0       	breq	.+2      	; 0x43cc <__vector_86+0x34>
    43ca:	19 95       	eicall
    43cc:	ff 91       	pop	r31
    43ce:	ef 91       	pop	r30
    43d0:	bf 91       	pop	r27
    43d2:	af 91       	pop	r26
    43d4:	9f 91       	pop	r25
    43d6:	8f 91       	pop	r24
    43d8:	7f 91       	pop	r23
    43da:	6f 91       	pop	r22
    43dc:	5f 91       	pop	r21
    43de:	4f 91       	pop	r20
    43e0:	3f 91       	pop	r19
    43e2:	2f 91       	pop	r18
    43e4:	0f 90       	pop	r0
    43e6:	0b be       	out	0x3b, r0	; 59
    43e8:	0f 90       	pop	r0
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	0f 90       	pop	r0
    43ee:	1f 90       	pop	r1
    43f0:	18 95       	reti

000043f2 <__vector_47>:
    43f2:	1f 92       	push	r1
    43f4:	0f 92       	push	r0
    43f6:	0f b6       	in	r0, 0x3f	; 63
    43f8:	0f 92       	push	r0
    43fa:	11 24       	eor	r1, r1
    43fc:	0b b6       	in	r0, 0x3b	; 59
    43fe:	0f 92       	push	r0
    4400:	2f 93       	push	r18
    4402:	3f 93       	push	r19
    4404:	4f 93       	push	r20
    4406:	5f 93       	push	r21
    4408:	6f 93       	push	r22
    440a:	7f 93       	push	r23
    440c:	8f 93       	push	r24
    440e:	9f 93       	push	r25
    4410:	af 93       	push	r26
    4412:	bf 93       	push	r27
    4414:	ef 93       	push	r30
    4416:	ff 93       	push	r31
    4418:	e0 91 fa 23 	lds	r30, 0x23FA	; 0x8023fa <tc_tce0_ovf_callback>
    441c:	f0 91 fb 23 	lds	r31, 0x23FB	; 0x8023fb <tc_tce0_ovf_callback+0x1>
    4420:	30 97       	sbiw	r30, 0x00	; 0
    4422:	09 f0       	breq	.+2      	; 0x4426 <__vector_47+0x34>
    4424:	19 95       	eicall
    4426:	ff 91       	pop	r31
    4428:	ef 91       	pop	r30
    442a:	bf 91       	pop	r27
    442c:	af 91       	pop	r26
    442e:	9f 91       	pop	r25
    4430:	8f 91       	pop	r24
    4432:	7f 91       	pop	r23
    4434:	6f 91       	pop	r22
    4436:	5f 91       	pop	r21
    4438:	4f 91       	pop	r20
    443a:	3f 91       	pop	r19
    443c:	2f 91       	pop	r18
    443e:	0f 90       	pop	r0
    4440:	0b be       	out	0x3b, r0	; 59
    4442:	0f 90       	pop	r0
    4444:	0f be       	out	0x3f, r0	; 63
    4446:	0f 90       	pop	r0
    4448:	1f 90       	pop	r1
    444a:	18 95       	reti

0000444c <__vector_48>:
    444c:	1f 92       	push	r1
    444e:	0f 92       	push	r0
    4450:	0f b6       	in	r0, 0x3f	; 63
    4452:	0f 92       	push	r0
    4454:	11 24       	eor	r1, r1
    4456:	0b b6       	in	r0, 0x3b	; 59
    4458:	0f 92       	push	r0
    445a:	2f 93       	push	r18
    445c:	3f 93       	push	r19
    445e:	4f 93       	push	r20
    4460:	5f 93       	push	r21
    4462:	6f 93       	push	r22
    4464:	7f 93       	push	r23
    4466:	8f 93       	push	r24
    4468:	9f 93       	push	r25
    446a:	af 93       	push	r26
    446c:	bf 93       	push	r27
    446e:	ef 93       	push	r30
    4470:	ff 93       	push	r31
    4472:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <tc_tce0_err_callback>
    4476:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <tc_tce0_err_callback+0x1>
    447a:	30 97       	sbiw	r30, 0x00	; 0
    447c:	09 f0       	breq	.+2      	; 0x4480 <__vector_48+0x34>
    447e:	19 95       	eicall
    4480:	ff 91       	pop	r31
    4482:	ef 91       	pop	r30
    4484:	bf 91       	pop	r27
    4486:	af 91       	pop	r26
    4488:	9f 91       	pop	r25
    448a:	8f 91       	pop	r24
    448c:	7f 91       	pop	r23
    448e:	6f 91       	pop	r22
    4490:	5f 91       	pop	r21
    4492:	4f 91       	pop	r20
    4494:	3f 91       	pop	r19
    4496:	2f 91       	pop	r18
    4498:	0f 90       	pop	r0
    449a:	0b be       	out	0x3b, r0	; 59
    449c:	0f 90       	pop	r0
    449e:	0f be       	out	0x3f, r0	; 63
    44a0:	0f 90       	pop	r0
    44a2:	1f 90       	pop	r1
    44a4:	18 95       	reti

000044a6 <__vector_49>:
    44a6:	1f 92       	push	r1
    44a8:	0f 92       	push	r0
    44aa:	0f b6       	in	r0, 0x3f	; 63
    44ac:	0f 92       	push	r0
    44ae:	11 24       	eor	r1, r1
    44b0:	0b b6       	in	r0, 0x3b	; 59
    44b2:	0f 92       	push	r0
    44b4:	2f 93       	push	r18
    44b6:	3f 93       	push	r19
    44b8:	4f 93       	push	r20
    44ba:	5f 93       	push	r21
    44bc:	6f 93       	push	r22
    44be:	7f 93       	push	r23
    44c0:	8f 93       	push	r24
    44c2:	9f 93       	push	r25
    44c4:	af 93       	push	r26
    44c6:	bf 93       	push	r27
    44c8:	ef 93       	push	r30
    44ca:	ff 93       	push	r31
    44cc:	e0 91 f6 23 	lds	r30, 0x23F6	; 0x8023f6 <tc_tce0_cca_callback>
    44d0:	f0 91 f7 23 	lds	r31, 0x23F7	; 0x8023f7 <tc_tce0_cca_callback+0x1>
    44d4:	30 97       	sbiw	r30, 0x00	; 0
    44d6:	09 f0       	breq	.+2      	; 0x44da <__vector_49+0x34>
    44d8:	19 95       	eicall
    44da:	ff 91       	pop	r31
    44dc:	ef 91       	pop	r30
    44de:	bf 91       	pop	r27
    44e0:	af 91       	pop	r26
    44e2:	9f 91       	pop	r25
    44e4:	8f 91       	pop	r24
    44e6:	7f 91       	pop	r23
    44e8:	6f 91       	pop	r22
    44ea:	5f 91       	pop	r21
    44ec:	4f 91       	pop	r20
    44ee:	3f 91       	pop	r19
    44f0:	2f 91       	pop	r18
    44f2:	0f 90       	pop	r0
    44f4:	0b be       	out	0x3b, r0	; 59
    44f6:	0f 90       	pop	r0
    44f8:	0f be       	out	0x3f, r0	; 63
    44fa:	0f 90       	pop	r0
    44fc:	1f 90       	pop	r1
    44fe:	18 95       	reti

00004500 <__vector_50>:
    4500:	1f 92       	push	r1
    4502:	0f 92       	push	r0
    4504:	0f b6       	in	r0, 0x3f	; 63
    4506:	0f 92       	push	r0
    4508:	11 24       	eor	r1, r1
    450a:	0b b6       	in	r0, 0x3b	; 59
    450c:	0f 92       	push	r0
    450e:	2f 93       	push	r18
    4510:	3f 93       	push	r19
    4512:	4f 93       	push	r20
    4514:	5f 93       	push	r21
    4516:	6f 93       	push	r22
    4518:	7f 93       	push	r23
    451a:	8f 93       	push	r24
    451c:	9f 93       	push	r25
    451e:	af 93       	push	r26
    4520:	bf 93       	push	r27
    4522:	ef 93       	push	r30
    4524:	ff 93       	push	r31
    4526:	e0 91 f4 23 	lds	r30, 0x23F4	; 0x8023f4 <tc_tce0_ccb_callback>
    452a:	f0 91 f5 23 	lds	r31, 0x23F5	; 0x8023f5 <tc_tce0_ccb_callback+0x1>
    452e:	30 97       	sbiw	r30, 0x00	; 0
    4530:	09 f0       	breq	.+2      	; 0x4534 <__vector_50+0x34>
    4532:	19 95       	eicall
    4534:	ff 91       	pop	r31
    4536:	ef 91       	pop	r30
    4538:	bf 91       	pop	r27
    453a:	af 91       	pop	r26
    453c:	9f 91       	pop	r25
    453e:	8f 91       	pop	r24
    4540:	7f 91       	pop	r23
    4542:	6f 91       	pop	r22
    4544:	5f 91       	pop	r21
    4546:	4f 91       	pop	r20
    4548:	3f 91       	pop	r19
    454a:	2f 91       	pop	r18
    454c:	0f 90       	pop	r0
    454e:	0b be       	out	0x3b, r0	; 59
    4550:	0f 90       	pop	r0
    4552:	0f be       	out	0x3f, r0	; 63
    4554:	0f 90       	pop	r0
    4556:	1f 90       	pop	r1
    4558:	18 95       	reti

0000455a <__vector_51>:
    455a:	1f 92       	push	r1
    455c:	0f 92       	push	r0
    455e:	0f b6       	in	r0, 0x3f	; 63
    4560:	0f 92       	push	r0
    4562:	11 24       	eor	r1, r1
    4564:	0b b6       	in	r0, 0x3b	; 59
    4566:	0f 92       	push	r0
    4568:	2f 93       	push	r18
    456a:	3f 93       	push	r19
    456c:	4f 93       	push	r20
    456e:	5f 93       	push	r21
    4570:	6f 93       	push	r22
    4572:	7f 93       	push	r23
    4574:	8f 93       	push	r24
    4576:	9f 93       	push	r25
    4578:	af 93       	push	r26
    457a:	bf 93       	push	r27
    457c:	ef 93       	push	r30
    457e:	ff 93       	push	r31
    4580:	e0 91 f2 23 	lds	r30, 0x23F2	; 0x8023f2 <tc_tce0_ccc_callback>
    4584:	f0 91 f3 23 	lds	r31, 0x23F3	; 0x8023f3 <tc_tce0_ccc_callback+0x1>
    4588:	30 97       	sbiw	r30, 0x00	; 0
    458a:	09 f0       	breq	.+2      	; 0x458e <__vector_51+0x34>
    458c:	19 95       	eicall
    458e:	ff 91       	pop	r31
    4590:	ef 91       	pop	r30
    4592:	bf 91       	pop	r27
    4594:	af 91       	pop	r26
    4596:	9f 91       	pop	r25
    4598:	8f 91       	pop	r24
    459a:	7f 91       	pop	r23
    459c:	6f 91       	pop	r22
    459e:	5f 91       	pop	r21
    45a0:	4f 91       	pop	r20
    45a2:	3f 91       	pop	r19
    45a4:	2f 91       	pop	r18
    45a6:	0f 90       	pop	r0
    45a8:	0b be       	out	0x3b, r0	; 59
    45aa:	0f 90       	pop	r0
    45ac:	0f be       	out	0x3f, r0	; 63
    45ae:	0f 90       	pop	r0
    45b0:	1f 90       	pop	r1
    45b2:	18 95       	reti

000045b4 <__vector_52>:
    45b4:	1f 92       	push	r1
    45b6:	0f 92       	push	r0
    45b8:	0f b6       	in	r0, 0x3f	; 63
    45ba:	0f 92       	push	r0
    45bc:	11 24       	eor	r1, r1
    45be:	0b b6       	in	r0, 0x3b	; 59
    45c0:	0f 92       	push	r0
    45c2:	2f 93       	push	r18
    45c4:	3f 93       	push	r19
    45c6:	4f 93       	push	r20
    45c8:	5f 93       	push	r21
    45ca:	6f 93       	push	r22
    45cc:	7f 93       	push	r23
    45ce:	8f 93       	push	r24
    45d0:	9f 93       	push	r25
    45d2:	af 93       	push	r26
    45d4:	bf 93       	push	r27
    45d6:	ef 93       	push	r30
    45d8:	ff 93       	push	r31
    45da:	e0 91 f0 23 	lds	r30, 0x23F0	; 0x8023f0 <tc_tce0_ccd_callback>
    45de:	f0 91 f1 23 	lds	r31, 0x23F1	; 0x8023f1 <tc_tce0_ccd_callback+0x1>
    45e2:	30 97       	sbiw	r30, 0x00	; 0
    45e4:	09 f0       	breq	.+2      	; 0x45e8 <__vector_52+0x34>
    45e6:	19 95       	eicall
    45e8:	ff 91       	pop	r31
    45ea:	ef 91       	pop	r30
    45ec:	bf 91       	pop	r27
    45ee:	af 91       	pop	r26
    45f0:	9f 91       	pop	r25
    45f2:	8f 91       	pop	r24
    45f4:	7f 91       	pop	r23
    45f6:	6f 91       	pop	r22
    45f8:	5f 91       	pop	r21
    45fa:	4f 91       	pop	r20
    45fc:	3f 91       	pop	r19
    45fe:	2f 91       	pop	r18
    4600:	0f 90       	pop	r0
    4602:	0b be       	out	0x3b, r0	; 59
    4604:	0f 90       	pop	r0
    4606:	0f be       	out	0x3f, r0	; 63
    4608:	0f 90       	pop	r0
    460a:	1f 90       	pop	r1
    460c:	18 95       	reti

0000460e <__vector_53>:
    460e:	1f 92       	push	r1
    4610:	0f 92       	push	r0
    4612:	0f b6       	in	r0, 0x3f	; 63
    4614:	0f 92       	push	r0
    4616:	11 24       	eor	r1, r1
    4618:	0b b6       	in	r0, 0x3b	; 59
    461a:	0f 92       	push	r0
    461c:	2f 93       	push	r18
    461e:	3f 93       	push	r19
    4620:	4f 93       	push	r20
    4622:	5f 93       	push	r21
    4624:	6f 93       	push	r22
    4626:	7f 93       	push	r23
    4628:	8f 93       	push	r24
    462a:	9f 93       	push	r25
    462c:	af 93       	push	r26
    462e:	bf 93       	push	r27
    4630:	ef 93       	push	r30
    4632:	ff 93       	push	r31
    4634:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <tc_tce1_ovf_callback>
    4638:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <tc_tce1_ovf_callback+0x1>
    463c:	30 97       	sbiw	r30, 0x00	; 0
    463e:	09 f0       	breq	.+2      	; 0x4642 <__vector_53+0x34>
    4640:	19 95       	eicall
    4642:	ff 91       	pop	r31
    4644:	ef 91       	pop	r30
    4646:	bf 91       	pop	r27
    4648:	af 91       	pop	r26
    464a:	9f 91       	pop	r25
    464c:	8f 91       	pop	r24
    464e:	7f 91       	pop	r23
    4650:	6f 91       	pop	r22
    4652:	5f 91       	pop	r21
    4654:	4f 91       	pop	r20
    4656:	3f 91       	pop	r19
    4658:	2f 91       	pop	r18
    465a:	0f 90       	pop	r0
    465c:	0b be       	out	0x3b, r0	; 59
    465e:	0f 90       	pop	r0
    4660:	0f be       	out	0x3f, r0	; 63
    4662:	0f 90       	pop	r0
    4664:	1f 90       	pop	r1
    4666:	18 95       	reti

00004668 <__vector_54>:
    4668:	1f 92       	push	r1
    466a:	0f 92       	push	r0
    466c:	0f b6       	in	r0, 0x3f	; 63
    466e:	0f 92       	push	r0
    4670:	11 24       	eor	r1, r1
    4672:	0b b6       	in	r0, 0x3b	; 59
    4674:	0f 92       	push	r0
    4676:	2f 93       	push	r18
    4678:	3f 93       	push	r19
    467a:	4f 93       	push	r20
    467c:	5f 93       	push	r21
    467e:	6f 93       	push	r22
    4680:	7f 93       	push	r23
    4682:	8f 93       	push	r24
    4684:	9f 93       	push	r25
    4686:	af 93       	push	r26
    4688:	bf 93       	push	r27
    468a:	ef 93       	push	r30
    468c:	ff 93       	push	r31
    468e:	e0 91 ec 23 	lds	r30, 0x23EC	; 0x8023ec <tc_tce1_err_callback>
    4692:	f0 91 ed 23 	lds	r31, 0x23ED	; 0x8023ed <tc_tce1_err_callback+0x1>
    4696:	30 97       	sbiw	r30, 0x00	; 0
    4698:	09 f0       	breq	.+2      	; 0x469c <__vector_54+0x34>
    469a:	19 95       	eicall
    469c:	ff 91       	pop	r31
    469e:	ef 91       	pop	r30
    46a0:	bf 91       	pop	r27
    46a2:	af 91       	pop	r26
    46a4:	9f 91       	pop	r25
    46a6:	8f 91       	pop	r24
    46a8:	7f 91       	pop	r23
    46aa:	6f 91       	pop	r22
    46ac:	5f 91       	pop	r21
    46ae:	4f 91       	pop	r20
    46b0:	3f 91       	pop	r19
    46b2:	2f 91       	pop	r18
    46b4:	0f 90       	pop	r0
    46b6:	0b be       	out	0x3b, r0	; 59
    46b8:	0f 90       	pop	r0
    46ba:	0f be       	out	0x3f, r0	; 63
    46bc:	0f 90       	pop	r0
    46be:	1f 90       	pop	r1
    46c0:	18 95       	reti

000046c2 <__vector_55>:
    46c2:	1f 92       	push	r1
    46c4:	0f 92       	push	r0
    46c6:	0f b6       	in	r0, 0x3f	; 63
    46c8:	0f 92       	push	r0
    46ca:	11 24       	eor	r1, r1
    46cc:	0b b6       	in	r0, 0x3b	; 59
    46ce:	0f 92       	push	r0
    46d0:	2f 93       	push	r18
    46d2:	3f 93       	push	r19
    46d4:	4f 93       	push	r20
    46d6:	5f 93       	push	r21
    46d8:	6f 93       	push	r22
    46da:	7f 93       	push	r23
    46dc:	8f 93       	push	r24
    46de:	9f 93       	push	r25
    46e0:	af 93       	push	r26
    46e2:	bf 93       	push	r27
    46e4:	ef 93       	push	r30
    46e6:	ff 93       	push	r31
    46e8:	e0 91 ea 23 	lds	r30, 0x23EA	; 0x8023ea <tc_tce1_cca_callback>
    46ec:	f0 91 eb 23 	lds	r31, 0x23EB	; 0x8023eb <tc_tce1_cca_callback+0x1>
    46f0:	30 97       	sbiw	r30, 0x00	; 0
    46f2:	09 f0       	breq	.+2      	; 0x46f6 <__vector_55+0x34>
    46f4:	19 95       	eicall
    46f6:	ff 91       	pop	r31
    46f8:	ef 91       	pop	r30
    46fa:	bf 91       	pop	r27
    46fc:	af 91       	pop	r26
    46fe:	9f 91       	pop	r25
    4700:	8f 91       	pop	r24
    4702:	7f 91       	pop	r23
    4704:	6f 91       	pop	r22
    4706:	5f 91       	pop	r21
    4708:	4f 91       	pop	r20
    470a:	3f 91       	pop	r19
    470c:	2f 91       	pop	r18
    470e:	0f 90       	pop	r0
    4710:	0b be       	out	0x3b, r0	; 59
    4712:	0f 90       	pop	r0
    4714:	0f be       	out	0x3f, r0	; 63
    4716:	0f 90       	pop	r0
    4718:	1f 90       	pop	r1
    471a:	18 95       	reti

0000471c <__vector_56>:
    471c:	1f 92       	push	r1
    471e:	0f 92       	push	r0
    4720:	0f b6       	in	r0, 0x3f	; 63
    4722:	0f 92       	push	r0
    4724:	11 24       	eor	r1, r1
    4726:	0b b6       	in	r0, 0x3b	; 59
    4728:	0f 92       	push	r0
    472a:	2f 93       	push	r18
    472c:	3f 93       	push	r19
    472e:	4f 93       	push	r20
    4730:	5f 93       	push	r21
    4732:	6f 93       	push	r22
    4734:	7f 93       	push	r23
    4736:	8f 93       	push	r24
    4738:	9f 93       	push	r25
    473a:	af 93       	push	r26
    473c:	bf 93       	push	r27
    473e:	ef 93       	push	r30
    4740:	ff 93       	push	r31
    4742:	e0 91 e8 23 	lds	r30, 0x23E8	; 0x8023e8 <tc_tce1_ccb_callback>
    4746:	f0 91 e9 23 	lds	r31, 0x23E9	; 0x8023e9 <tc_tce1_ccb_callback+0x1>
    474a:	30 97       	sbiw	r30, 0x00	; 0
    474c:	09 f0       	breq	.+2      	; 0x4750 <__vector_56+0x34>
    474e:	19 95       	eicall
    4750:	ff 91       	pop	r31
    4752:	ef 91       	pop	r30
    4754:	bf 91       	pop	r27
    4756:	af 91       	pop	r26
    4758:	9f 91       	pop	r25
    475a:	8f 91       	pop	r24
    475c:	7f 91       	pop	r23
    475e:	6f 91       	pop	r22
    4760:	5f 91       	pop	r21
    4762:	4f 91       	pop	r20
    4764:	3f 91       	pop	r19
    4766:	2f 91       	pop	r18
    4768:	0f 90       	pop	r0
    476a:	0b be       	out	0x3b, r0	; 59
    476c:	0f 90       	pop	r0
    476e:	0f be       	out	0x3f, r0	; 63
    4770:	0f 90       	pop	r0
    4772:	1f 90       	pop	r1
    4774:	18 95       	reti

00004776 <__vector_108>:
    4776:	1f 92       	push	r1
    4778:	0f 92       	push	r0
    477a:	0f b6       	in	r0, 0x3f	; 63
    477c:	0f 92       	push	r0
    477e:	11 24       	eor	r1, r1
    4780:	0b b6       	in	r0, 0x3b	; 59
    4782:	0f 92       	push	r0
    4784:	2f 93       	push	r18
    4786:	3f 93       	push	r19
    4788:	4f 93       	push	r20
    478a:	5f 93       	push	r21
    478c:	6f 93       	push	r22
    478e:	7f 93       	push	r23
    4790:	8f 93       	push	r24
    4792:	9f 93       	push	r25
    4794:	af 93       	push	r26
    4796:	bf 93       	push	r27
    4798:	ef 93       	push	r30
    479a:	ff 93       	push	r31
    479c:	e0 91 e6 23 	lds	r30, 0x23E6	; 0x8023e6 <tc_tcf0_ovf_callback>
    47a0:	f0 91 e7 23 	lds	r31, 0x23E7	; 0x8023e7 <tc_tcf0_ovf_callback+0x1>
    47a4:	30 97       	sbiw	r30, 0x00	; 0
    47a6:	09 f0       	breq	.+2      	; 0x47aa <__vector_108+0x34>
    47a8:	19 95       	eicall
    47aa:	ff 91       	pop	r31
    47ac:	ef 91       	pop	r30
    47ae:	bf 91       	pop	r27
    47b0:	af 91       	pop	r26
    47b2:	9f 91       	pop	r25
    47b4:	8f 91       	pop	r24
    47b6:	7f 91       	pop	r23
    47b8:	6f 91       	pop	r22
    47ba:	5f 91       	pop	r21
    47bc:	4f 91       	pop	r20
    47be:	3f 91       	pop	r19
    47c0:	2f 91       	pop	r18
    47c2:	0f 90       	pop	r0
    47c4:	0b be       	out	0x3b, r0	; 59
    47c6:	0f 90       	pop	r0
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	0f 90       	pop	r0
    47cc:	1f 90       	pop	r1
    47ce:	18 95       	reti

000047d0 <__vector_109>:
    47d0:	1f 92       	push	r1
    47d2:	0f 92       	push	r0
    47d4:	0f b6       	in	r0, 0x3f	; 63
    47d6:	0f 92       	push	r0
    47d8:	11 24       	eor	r1, r1
    47da:	0b b6       	in	r0, 0x3b	; 59
    47dc:	0f 92       	push	r0
    47de:	2f 93       	push	r18
    47e0:	3f 93       	push	r19
    47e2:	4f 93       	push	r20
    47e4:	5f 93       	push	r21
    47e6:	6f 93       	push	r22
    47e8:	7f 93       	push	r23
    47ea:	8f 93       	push	r24
    47ec:	9f 93       	push	r25
    47ee:	af 93       	push	r26
    47f0:	bf 93       	push	r27
    47f2:	ef 93       	push	r30
    47f4:	ff 93       	push	r31
    47f6:	e0 91 e4 23 	lds	r30, 0x23E4	; 0x8023e4 <tc_tcf0_err_callback>
    47fa:	f0 91 e5 23 	lds	r31, 0x23E5	; 0x8023e5 <tc_tcf0_err_callback+0x1>
    47fe:	30 97       	sbiw	r30, 0x00	; 0
    4800:	09 f0       	breq	.+2      	; 0x4804 <__vector_109+0x34>
    4802:	19 95       	eicall
    4804:	ff 91       	pop	r31
    4806:	ef 91       	pop	r30
    4808:	bf 91       	pop	r27
    480a:	af 91       	pop	r26
    480c:	9f 91       	pop	r25
    480e:	8f 91       	pop	r24
    4810:	7f 91       	pop	r23
    4812:	6f 91       	pop	r22
    4814:	5f 91       	pop	r21
    4816:	4f 91       	pop	r20
    4818:	3f 91       	pop	r19
    481a:	2f 91       	pop	r18
    481c:	0f 90       	pop	r0
    481e:	0b be       	out	0x3b, r0	; 59
    4820:	0f 90       	pop	r0
    4822:	0f be       	out	0x3f, r0	; 63
    4824:	0f 90       	pop	r0
    4826:	1f 90       	pop	r1
    4828:	18 95       	reti

0000482a <__vector_110>:
    482a:	1f 92       	push	r1
    482c:	0f 92       	push	r0
    482e:	0f b6       	in	r0, 0x3f	; 63
    4830:	0f 92       	push	r0
    4832:	11 24       	eor	r1, r1
    4834:	0b b6       	in	r0, 0x3b	; 59
    4836:	0f 92       	push	r0
    4838:	2f 93       	push	r18
    483a:	3f 93       	push	r19
    483c:	4f 93       	push	r20
    483e:	5f 93       	push	r21
    4840:	6f 93       	push	r22
    4842:	7f 93       	push	r23
    4844:	8f 93       	push	r24
    4846:	9f 93       	push	r25
    4848:	af 93       	push	r26
    484a:	bf 93       	push	r27
    484c:	ef 93       	push	r30
    484e:	ff 93       	push	r31
    4850:	e0 91 e2 23 	lds	r30, 0x23E2	; 0x8023e2 <tc_tcf0_cca_callback>
    4854:	f0 91 e3 23 	lds	r31, 0x23E3	; 0x8023e3 <tc_tcf0_cca_callback+0x1>
    4858:	30 97       	sbiw	r30, 0x00	; 0
    485a:	09 f0       	breq	.+2      	; 0x485e <__vector_110+0x34>
    485c:	19 95       	eicall
    485e:	ff 91       	pop	r31
    4860:	ef 91       	pop	r30
    4862:	bf 91       	pop	r27
    4864:	af 91       	pop	r26
    4866:	9f 91       	pop	r25
    4868:	8f 91       	pop	r24
    486a:	7f 91       	pop	r23
    486c:	6f 91       	pop	r22
    486e:	5f 91       	pop	r21
    4870:	4f 91       	pop	r20
    4872:	3f 91       	pop	r19
    4874:	2f 91       	pop	r18
    4876:	0f 90       	pop	r0
    4878:	0b be       	out	0x3b, r0	; 59
    487a:	0f 90       	pop	r0
    487c:	0f be       	out	0x3f, r0	; 63
    487e:	0f 90       	pop	r0
    4880:	1f 90       	pop	r1
    4882:	18 95       	reti

00004884 <__vector_111>:
    4884:	1f 92       	push	r1
    4886:	0f 92       	push	r0
    4888:	0f b6       	in	r0, 0x3f	; 63
    488a:	0f 92       	push	r0
    488c:	11 24       	eor	r1, r1
    488e:	0b b6       	in	r0, 0x3b	; 59
    4890:	0f 92       	push	r0
    4892:	2f 93       	push	r18
    4894:	3f 93       	push	r19
    4896:	4f 93       	push	r20
    4898:	5f 93       	push	r21
    489a:	6f 93       	push	r22
    489c:	7f 93       	push	r23
    489e:	8f 93       	push	r24
    48a0:	9f 93       	push	r25
    48a2:	af 93       	push	r26
    48a4:	bf 93       	push	r27
    48a6:	ef 93       	push	r30
    48a8:	ff 93       	push	r31
    48aa:	e0 91 e0 23 	lds	r30, 0x23E0	; 0x8023e0 <tc_tcf0_ccb_callback>
    48ae:	f0 91 e1 23 	lds	r31, 0x23E1	; 0x8023e1 <tc_tcf0_ccb_callback+0x1>
    48b2:	30 97       	sbiw	r30, 0x00	; 0
    48b4:	09 f0       	breq	.+2      	; 0x48b8 <__vector_111+0x34>
    48b6:	19 95       	eicall
    48b8:	ff 91       	pop	r31
    48ba:	ef 91       	pop	r30
    48bc:	bf 91       	pop	r27
    48be:	af 91       	pop	r26
    48c0:	9f 91       	pop	r25
    48c2:	8f 91       	pop	r24
    48c4:	7f 91       	pop	r23
    48c6:	6f 91       	pop	r22
    48c8:	5f 91       	pop	r21
    48ca:	4f 91       	pop	r20
    48cc:	3f 91       	pop	r19
    48ce:	2f 91       	pop	r18
    48d0:	0f 90       	pop	r0
    48d2:	0b be       	out	0x3b, r0	; 59
    48d4:	0f 90       	pop	r0
    48d6:	0f be       	out	0x3f, r0	; 63
    48d8:	0f 90       	pop	r0
    48da:	1f 90       	pop	r1
    48dc:	18 95       	reti

000048de <__vector_112>:
    48de:	1f 92       	push	r1
    48e0:	0f 92       	push	r0
    48e2:	0f b6       	in	r0, 0x3f	; 63
    48e4:	0f 92       	push	r0
    48e6:	11 24       	eor	r1, r1
    48e8:	0b b6       	in	r0, 0x3b	; 59
    48ea:	0f 92       	push	r0
    48ec:	2f 93       	push	r18
    48ee:	3f 93       	push	r19
    48f0:	4f 93       	push	r20
    48f2:	5f 93       	push	r21
    48f4:	6f 93       	push	r22
    48f6:	7f 93       	push	r23
    48f8:	8f 93       	push	r24
    48fa:	9f 93       	push	r25
    48fc:	af 93       	push	r26
    48fe:	bf 93       	push	r27
    4900:	ef 93       	push	r30
    4902:	ff 93       	push	r31
    4904:	e0 91 de 23 	lds	r30, 0x23DE	; 0x8023de <tc_tcf0_ccc_callback>
    4908:	f0 91 df 23 	lds	r31, 0x23DF	; 0x8023df <tc_tcf0_ccc_callback+0x1>
    490c:	30 97       	sbiw	r30, 0x00	; 0
    490e:	09 f0       	breq	.+2      	; 0x4912 <__vector_112+0x34>
    4910:	19 95       	eicall
    4912:	ff 91       	pop	r31
    4914:	ef 91       	pop	r30
    4916:	bf 91       	pop	r27
    4918:	af 91       	pop	r26
    491a:	9f 91       	pop	r25
    491c:	8f 91       	pop	r24
    491e:	7f 91       	pop	r23
    4920:	6f 91       	pop	r22
    4922:	5f 91       	pop	r21
    4924:	4f 91       	pop	r20
    4926:	3f 91       	pop	r19
    4928:	2f 91       	pop	r18
    492a:	0f 90       	pop	r0
    492c:	0b be       	out	0x3b, r0	; 59
    492e:	0f 90       	pop	r0
    4930:	0f be       	out	0x3f, r0	; 63
    4932:	0f 90       	pop	r0
    4934:	1f 90       	pop	r1
    4936:	18 95       	reti

00004938 <__vector_113>:
    4938:	1f 92       	push	r1
    493a:	0f 92       	push	r0
    493c:	0f b6       	in	r0, 0x3f	; 63
    493e:	0f 92       	push	r0
    4940:	11 24       	eor	r1, r1
    4942:	0b b6       	in	r0, 0x3b	; 59
    4944:	0f 92       	push	r0
    4946:	2f 93       	push	r18
    4948:	3f 93       	push	r19
    494a:	4f 93       	push	r20
    494c:	5f 93       	push	r21
    494e:	6f 93       	push	r22
    4950:	7f 93       	push	r23
    4952:	8f 93       	push	r24
    4954:	9f 93       	push	r25
    4956:	af 93       	push	r26
    4958:	bf 93       	push	r27
    495a:	ef 93       	push	r30
    495c:	ff 93       	push	r31
    495e:	e0 91 dc 23 	lds	r30, 0x23DC	; 0x8023dc <tc_tcf0_ccd_callback>
    4962:	f0 91 dd 23 	lds	r31, 0x23DD	; 0x8023dd <tc_tcf0_ccd_callback+0x1>
    4966:	30 97       	sbiw	r30, 0x00	; 0
    4968:	09 f0       	breq	.+2      	; 0x496c <__vector_113+0x34>
    496a:	19 95       	eicall
    496c:	ff 91       	pop	r31
    496e:	ef 91       	pop	r30
    4970:	bf 91       	pop	r27
    4972:	af 91       	pop	r26
    4974:	9f 91       	pop	r25
    4976:	8f 91       	pop	r24
    4978:	7f 91       	pop	r23
    497a:	6f 91       	pop	r22
    497c:	5f 91       	pop	r21
    497e:	4f 91       	pop	r20
    4980:	3f 91       	pop	r19
    4982:	2f 91       	pop	r18
    4984:	0f 90       	pop	r0
    4986:	0b be       	out	0x3b, r0	; 59
    4988:	0f 90       	pop	r0
    498a:	0f be       	out	0x3f, r0	; 63
    498c:	0f 90       	pop	r0
    498e:	1f 90       	pop	r1
    4990:	18 95       	reti

00004992 <tc_enable>:
    4992:	1f 93       	push	r17
    4994:	cf 93       	push	r28
    4996:	df 93       	push	r29
    4998:	1f 92       	push	r1
    499a:	1f 92       	push	r1
    499c:	cd b7       	in	r28, 0x3d	; 61
    499e:	de b7       	in	r29, 0x3e	; 62
    49a0:	2f b7       	in	r18, 0x3f	; 63
    49a2:	2a 83       	std	Y+2, r18	; 0x02
    49a4:	f8 94       	cli
    49a6:	1a 81       	ldd	r17, Y+2	; 0x02
    49a8:	28 2f       	mov	r18, r24
    49aa:	39 2f       	mov	r19, r25
    49ac:	21 15       	cp	r18, r1
    49ae:	88 e0       	ldi	r24, 0x08	; 8
    49b0:	38 07       	cpc	r19, r24
    49b2:	49 f4       	brne	.+18     	; 0x49c6 <tc_enable+0x34>
    49b4:	61 e0       	ldi	r22, 0x01	; 1
    49b6:	83 e0       	ldi	r24, 0x03	; 3
    49b8:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    49bc:	64 e0       	ldi	r22, 0x04	; 4
    49be:	83 e0       	ldi	r24, 0x03	; 3
    49c0:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    49c4:	4f c0       	rjmp	.+158    	; 0x4a64 <tc_enable+0xd2>
    49c6:	20 34       	cpi	r18, 0x40	; 64
    49c8:	88 e0       	ldi	r24, 0x08	; 8
    49ca:	38 07       	cpc	r19, r24
    49cc:	49 f4       	brne	.+18     	; 0x49e0 <tc_enable+0x4e>
    49ce:	62 e0       	ldi	r22, 0x02	; 2
    49d0:	83 e0       	ldi	r24, 0x03	; 3
    49d2:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    49d6:	64 e0       	ldi	r22, 0x04	; 4
    49d8:	83 e0       	ldi	r24, 0x03	; 3
    49da:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    49de:	42 c0       	rjmp	.+132    	; 0x4a64 <tc_enable+0xd2>
    49e0:	21 15       	cp	r18, r1
    49e2:	89 e0       	ldi	r24, 0x09	; 9
    49e4:	38 07       	cpc	r19, r24
    49e6:	49 f4       	brne	.+18     	; 0x49fa <tc_enable+0x68>
    49e8:	61 e0       	ldi	r22, 0x01	; 1
    49ea:	84 e0       	ldi	r24, 0x04	; 4
    49ec:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    49f0:	64 e0       	ldi	r22, 0x04	; 4
    49f2:	84 e0       	ldi	r24, 0x04	; 4
    49f4:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    49f8:	35 c0       	rjmp	.+106    	; 0x4a64 <tc_enable+0xd2>
    49fa:	20 34       	cpi	r18, 0x40	; 64
    49fc:	89 e0       	ldi	r24, 0x09	; 9
    49fe:	38 07       	cpc	r19, r24
    4a00:	49 f4       	brne	.+18     	; 0x4a14 <tc_enable+0x82>
    4a02:	62 e0       	ldi	r22, 0x02	; 2
    4a04:	84 e0       	ldi	r24, 0x04	; 4
    4a06:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    4a0a:	64 e0       	ldi	r22, 0x04	; 4
    4a0c:	84 e0       	ldi	r24, 0x04	; 4
    4a0e:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    4a12:	28 c0       	rjmp	.+80     	; 0x4a64 <tc_enable+0xd2>
    4a14:	21 15       	cp	r18, r1
    4a16:	8a e0       	ldi	r24, 0x0A	; 10
    4a18:	38 07       	cpc	r19, r24
    4a1a:	49 f4       	brne	.+18     	; 0x4a2e <tc_enable+0x9c>
    4a1c:	61 e0       	ldi	r22, 0x01	; 1
    4a1e:	85 e0       	ldi	r24, 0x05	; 5
    4a20:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    4a24:	64 e0       	ldi	r22, 0x04	; 4
    4a26:	85 e0       	ldi	r24, 0x05	; 5
    4a28:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    4a2c:	1b c0       	rjmp	.+54     	; 0x4a64 <tc_enable+0xd2>
    4a2e:	20 34       	cpi	r18, 0x40	; 64
    4a30:	8a e0       	ldi	r24, 0x0A	; 10
    4a32:	38 07       	cpc	r19, r24
    4a34:	49 f4       	brne	.+18     	; 0x4a48 <tc_enable+0xb6>
    4a36:	62 e0       	ldi	r22, 0x02	; 2
    4a38:	85 e0       	ldi	r24, 0x05	; 5
    4a3a:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    4a3e:	64 e0       	ldi	r22, 0x04	; 4
    4a40:	85 e0       	ldi	r24, 0x05	; 5
    4a42:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    4a46:	0e c0       	rjmp	.+28     	; 0x4a64 <tc_enable+0xd2>
    4a48:	21 15       	cp	r18, r1
    4a4a:	3b 40       	sbci	r19, 0x0B	; 11
    4a4c:	49 f4       	brne	.+18     	; 0x4a60 <tc_enable+0xce>
    4a4e:	61 e0       	ldi	r22, 0x01	; 1
    4a50:	86 e0       	ldi	r24, 0x06	; 6
    4a52:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    4a56:	64 e0       	ldi	r22, 0x04	; 4
    4a58:	86 e0       	ldi	r24, 0x06	; 6
    4a5a:	0e 94 2a 38 	call	0x7054	; 0x7054 <sysclk_enable_module>
    4a5e:	02 c0       	rjmp	.+4      	; 0x4a64 <tc_enable+0xd2>
    4a60:	1f bf       	out	0x3f, r17	; 63
    4a62:	10 c0       	rjmp	.+32     	; 0x4a84 <tc_enable+0xf2>
    4a64:	80 91 90 28 	lds	r24, 0x2890	; 0x802890 <sleepmgr_locks+0x1>
    4a68:	8f 3f       	cpi	r24, 0xFF	; 255
    4a6a:	09 f4       	brne	.+2      	; 0x4a6e <tc_enable+0xdc>
    4a6c:	ff cf       	rjmp	.-2      	; 0x4a6c <tc_enable+0xda>
    4a6e:	8f b7       	in	r24, 0x3f	; 63
    4a70:	89 83       	std	Y+1, r24	; 0x01
    4a72:	f8 94       	cli
    4a74:	99 81       	ldd	r25, Y+1	; 0x01
    4a76:	ef e8       	ldi	r30, 0x8F	; 143
    4a78:	f8 e2       	ldi	r31, 0x28	; 40
    4a7a:	81 81       	ldd	r24, Z+1	; 0x01
    4a7c:	8f 5f       	subi	r24, 0xFF	; 255
    4a7e:	81 83       	std	Z+1, r24	; 0x01
    4a80:	9f bf       	out	0x3f, r25	; 63
    4a82:	1f bf       	out	0x3f, r17	; 63
    4a84:	0f 90       	pop	r0
    4a86:	0f 90       	pop	r0
    4a88:	df 91       	pop	r29
    4a8a:	cf 91       	pop	r28
    4a8c:	1f 91       	pop	r17
    4a8e:	08 95       	ret

00004a90 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    4a90:	81 15       	cp	r24, r1
    4a92:	28 e0       	ldi	r18, 0x08	; 8
    4a94:	92 07       	cpc	r25, r18
    4a96:	29 f4       	brne	.+10     	; 0x4aa2 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    4a98:	60 93 22 24 	sts	0x2422, r22	; 0x802422 <tc_tcc0_ovf_callback>
    4a9c:	70 93 23 24 	sts	0x2423, r23	; 0x802423 <tc_tcc0_ovf_callback+0x1>
    4aa0:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    4aa2:	80 34       	cpi	r24, 0x40	; 64
    4aa4:	28 e0       	ldi	r18, 0x08	; 8
    4aa6:	92 07       	cpc	r25, r18
    4aa8:	29 f4       	brne	.+10     	; 0x4ab4 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    4aaa:	60 93 16 24 	sts	0x2416, r22	; 0x802416 <tc_tcc1_ovf_callback>
    4aae:	70 93 17 24 	sts	0x2417, r23	; 0x802417 <tc_tcc1_ovf_callback+0x1>
    4ab2:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    4ab4:	81 15       	cp	r24, r1
    4ab6:	29 e0       	ldi	r18, 0x09	; 9
    4ab8:	92 07       	cpc	r25, r18
    4aba:	29 f4       	brne	.+10     	; 0x4ac6 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    4abc:	60 93 0e 24 	sts	0x240E, r22	; 0x80240e <tc_tcd0_ovf_callback>
    4ac0:	70 93 0f 24 	sts	0x240F, r23	; 0x80240f <tc_tcd0_ovf_callback+0x1>
    4ac4:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    4ac6:	80 34       	cpi	r24, 0x40	; 64
    4ac8:	29 e0       	ldi	r18, 0x09	; 9
    4aca:	92 07       	cpc	r25, r18
    4acc:	29 f4       	brne	.+10     	; 0x4ad8 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    4ace:	60 93 02 24 	sts	0x2402, r22	; 0x802402 <tc_tcd1_ovf_callback>
    4ad2:	70 93 03 24 	sts	0x2403, r23	; 0x802403 <tc_tcd1_ovf_callback+0x1>
    4ad6:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    4ad8:	81 15       	cp	r24, r1
    4ada:	2a e0       	ldi	r18, 0x0A	; 10
    4adc:	92 07       	cpc	r25, r18
    4ade:	29 f4       	brne	.+10     	; 0x4aea <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    4ae0:	60 93 fa 23 	sts	0x23FA, r22	; 0x8023fa <tc_tce0_ovf_callback>
    4ae4:	70 93 fb 23 	sts	0x23FB, r23	; 0x8023fb <tc_tce0_ovf_callback+0x1>
    4ae8:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    4aea:	80 34       	cpi	r24, 0x40	; 64
    4aec:	2a e0       	ldi	r18, 0x0A	; 10
    4aee:	92 07       	cpc	r25, r18
    4af0:	29 f4       	brne	.+10     	; 0x4afc <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    4af2:	60 93 ee 23 	sts	0x23EE, r22	; 0x8023ee <tc_tce1_ovf_callback>
    4af6:	70 93 ef 23 	sts	0x23EF, r23	; 0x8023ef <tc_tce1_ovf_callback+0x1>
    4afa:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    4afc:	81 15       	cp	r24, r1
    4afe:	9b 40       	sbci	r25, 0x0B	; 11
    4b00:	21 f4       	brne	.+8      	; 0x4b0a <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    4b02:	60 93 e6 23 	sts	0x23E6, r22	; 0x8023e6 <tc_tcf0_ovf_callback>
    4b06:	70 93 e7 23 	sts	0x23E7, r23	; 0x8023e7 <tc_tcf0_ovf_callback+0x1>
    4b0a:	08 95       	ret

00004b0c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    4b0c:	cf 93       	push	r28
    4b0e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    4b10:	e0 91 24 24 	lds	r30, 0x2424	; 0x802424 <transfer>
    4b14:	f0 91 25 24 	lds	r31, 0x2425	; 0x802425 <transfer+0x1>
    4b18:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    4b1a:	83 ff       	sbrs	r24, 3
    4b1c:	08 c0       	rjmp	.+16     	; 0x4b2e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    4b1e:	88 60       	ori	r24, 0x08	; 8
    4b20:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    4b22:	83 e0       	ldi	r24, 0x03	; 3
    4b24:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    4b26:	86 ef       	ldi	r24, 0xF6	; 246
    4b28:	80 93 2e 24 	sts	0x242E, r24	; 0x80242e <transfer+0xa>
    4b2c:	83 c0       	rjmp	.+262    	; 0x4c34 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    4b2e:	98 2f       	mov	r25, r24
    4b30:	94 71       	andi	r25, 0x14	; 20
    4b32:	31 f0       	breq	.+12     	; 0x4b40 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4b34:	83 e0       	ldi	r24, 0x03	; 3
    4b36:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    4b38:	8f ef       	ldi	r24, 0xFF	; 255
    4b3a:	80 93 2e 24 	sts	0x242E, r24	; 0x80242e <transfer+0xa>
    4b3e:	7a c0       	rjmp	.+244    	; 0x4c34 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    4b40:	86 ff       	sbrs	r24, 6
    4b42:	43 c0       	rjmp	.+134    	; 0x4bca <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    4b44:	c4 e2       	ldi	r28, 0x24	; 36
    4b46:	d4 e2       	ldi	r29, 0x24	; 36
    4b48:	aa 81       	ldd	r26, Y+2	; 0x02
    4b4a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    4b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    4b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    4b50:	14 96       	adiw	r26, 0x04	; 4
    4b52:	2d 91       	ld	r18, X+
    4b54:	3c 91       	ld	r19, X
    4b56:	15 97       	sbiw	r26, 0x05	; 5
    4b58:	82 17       	cp	r24, r18
    4b5a:	93 07       	cpc	r25, r19
    4b5c:	6c f4       	brge	.+26     	; 0x4b78 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    4b5e:	9c 01       	movw	r18, r24
    4b60:	2f 5f       	subi	r18, 0xFF	; 255
    4b62:	3f 4f       	sbci	r19, 0xFF	; 255
    4b64:	20 93 28 24 	sts	0x2428, r18	; 0x802428 <transfer+0x4>
    4b68:	30 93 29 24 	sts	0x2429, r19	; 0x802429 <transfer+0x5>
    4b6c:	a8 0f       	add	r26, r24
    4b6e:	b9 1f       	adc	r27, r25
    4b70:	11 96       	adiw	r26, 0x01	; 1
    4b72:	8c 91       	ld	r24, X
    4b74:	87 83       	std	Z+7, r24	; 0x07
    4b76:	5e c0       	rjmp	.+188    	; 0x4c34 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    4b78:	80 91 2a 24 	lds	r24, 0x242A	; 0x80242a <transfer+0x6>
    4b7c:	90 91 2b 24 	lds	r25, 0x242B	; 0x80242b <transfer+0x7>
    4b80:	18 96       	adiw	r26, 0x08	; 8
    4b82:	2d 91       	ld	r18, X+
    4b84:	3c 91       	ld	r19, X
    4b86:	19 97       	sbiw	r26, 0x09	; 9
    4b88:	82 17       	cp	r24, r18
    4b8a:	93 07       	cpc	r25, r19
    4b8c:	c8 f4       	brcc	.+50     	; 0x4bc0 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    4b8e:	20 91 2c 24 	lds	r18, 0x242C	; 0x80242c <transfer+0x8>
    4b92:	22 23       	and	r18, r18
    4b94:	21 f0       	breq	.+8      	; 0x4b9e <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    4b96:	86 81       	ldd	r24, Z+6	; 0x06
    4b98:	81 60       	ori	r24, 0x01	; 1
    4b9a:	86 83       	std	Z+6, r24	; 0x06
    4b9c:	4b c0       	rjmp	.+150    	; 0x4c34 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    4b9e:	16 96       	adiw	r26, 0x06	; 6
    4ba0:	2d 91       	ld	r18, X+
    4ba2:	3c 91       	ld	r19, X
    4ba4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    4ba6:	ac 01       	movw	r20, r24
    4ba8:	4f 5f       	subi	r20, 0xFF	; 255
    4baa:	5f 4f       	sbci	r21, 0xFF	; 255
    4bac:	40 93 2a 24 	sts	0x242A, r20	; 0x80242a <transfer+0x6>
    4bb0:	50 93 2b 24 	sts	0x242B, r21	; 0x80242b <transfer+0x7>
    4bb4:	d9 01       	movw	r26, r18
    4bb6:	a8 0f       	add	r26, r24
    4bb8:	b9 1f       	adc	r27, r25
    4bba:	8c 91       	ld	r24, X
    4bbc:	87 83       	std	Z+7, r24	; 0x07
    4bbe:	3a c0       	rjmp	.+116    	; 0x4c34 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4bc0:	83 e0       	ldi	r24, 0x03	; 3
    4bc2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    4bc4:	10 92 2e 24 	sts	0x242E, r1	; 0x80242e <transfer+0xa>
    4bc8:	35 c0       	rjmp	.+106    	; 0x4c34 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    4bca:	88 23       	and	r24, r24
    4bcc:	84 f5       	brge	.+96     	; 0x4c2e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    4bce:	a4 e2       	ldi	r26, 0x24	; 36
    4bd0:	b4 e2       	ldi	r27, 0x24	; 36
    4bd2:	12 96       	adiw	r26, 0x02	; 2
    4bd4:	cd 91       	ld	r28, X+
    4bd6:	dc 91       	ld	r29, X
    4bd8:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    4bda:	16 96       	adiw	r26, 0x06	; 6
    4bdc:	8d 91       	ld	r24, X+
    4bde:	9c 91       	ld	r25, X
    4be0:	17 97       	sbiw	r26, 0x07	; 7
    4be2:	28 85       	ldd	r18, Y+8	; 0x08
    4be4:	39 85       	ldd	r19, Y+9	; 0x09
    4be6:	82 17       	cp	r24, r18
    4be8:	93 07       	cpc	r25, r19
    4bea:	d8 f4       	brcc	.+54     	; 0x4c22 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    4bec:	6e 81       	ldd	r22, Y+6	; 0x06
    4bee:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    4bf0:	9c 01       	movw	r18, r24
    4bf2:	2f 5f       	subi	r18, 0xFF	; 255
    4bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf6:	20 93 2a 24 	sts	0x242A, r18	; 0x80242a <transfer+0x6>
    4bfa:	30 93 2b 24 	sts	0x242B, r19	; 0x80242b <transfer+0x7>
    4bfe:	47 81       	ldd	r20, Z+7	; 0x07
    4c00:	db 01       	movw	r26, r22
    4c02:	a8 0f       	add	r26, r24
    4c04:	b9 1f       	adc	r27, r25
    4c06:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    4c08:	88 85       	ldd	r24, Y+8	; 0x08
    4c0a:	99 85       	ldd	r25, Y+9	; 0x09
    4c0c:	28 17       	cp	r18, r24
    4c0e:	39 07       	cpc	r19, r25
    4c10:	18 f4       	brcc	.+6      	; 0x4c18 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    4c12:	82 e0       	ldi	r24, 0x02	; 2
    4c14:	83 83       	std	Z+3, r24	; 0x03
    4c16:	0e c0       	rjmp	.+28     	; 0x4c34 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    4c18:	87 e0       	ldi	r24, 0x07	; 7
    4c1a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    4c1c:	10 92 2e 24 	sts	0x242E, r1	; 0x80242e <transfer+0xa>
    4c20:	09 c0       	rjmp	.+18     	; 0x4c34 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4c22:	83 e0       	ldi	r24, 0x03	; 3
    4c24:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    4c26:	89 ef       	ldi	r24, 0xF9	; 249
    4c28:	80 93 2e 24 	sts	0x242E, r24	; 0x80242e <transfer+0xa>
    4c2c:	03 c0       	rjmp	.+6      	; 0x4c34 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    4c2e:	8b ef       	ldi	r24, 0xFB	; 251
    4c30:	80 93 2e 24 	sts	0x242E, r24	; 0x80242e <transfer+0xa>
	}
}
    4c34:	df 91       	pop	r29
    4c36:	cf 91       	pop	r28
    4c38:	08 95       	ret

00004c3a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    4c3a:	1f 92       	push	r1
    4c3c:	0f 92       	push	r0
    4c3e:	0f b6       	in	r0, 0x3f	; 63
    4c40:	0f 92       	push	r0
    4c42:	11 24       	eor	r1, r1
    4c44:	0b b6       	in	r0, 0x3b	; 59
    4c46:	0f 92       	push	r0
    4c48:	2f 93       	push	r18
    4c4a:	3f 93       	push	r19
    4c4c:	4f 93       	push	r20
    4c4e:	5f 93       	push	r21
    4c50:	6f 93       	push	r22
    4c52:	7f 93       	push	r23
    4c54:	8f 93       	push	r24
    4c56:	9f 93       	push	r25
    4c58:	af 93       	push	r26
    4c5a:	bf 93       	push	r27
    4c5c:	ef 93       	push	r30
    4c5e:	ff 93       	push	r31
    4c60:	55 df       	rcall	.-342    	; 0x4b0c <twim_interrupt_handler>
    4c62:	ff 91       	pop	r31
    4c64:	ef 91       	pop	r30
    4c66:	bf 91       	pop	r27
    4c68:	af 91       	pop	r26
    4c6a:	9f 91       	pop	r25
    4c6c:	8f 91       	pop	r24
    4c6e:	7f 91       	pop	r23
    4c70:	6f 91       	pop	r22
    4c72:	5f 91       	pop	r21
    4c74:	4f 91       	pop	r20
    4c76:	3f 91       	pop	r19
    4c78:	2f 91       	pop	r18
    4c7a:	0f 90       	pop	r0
    4c7c:	0b be       	out	0x3b, r0	; 59
    4c7e:	0f 90       	pop	r0
    4c80:	0f be       	out	0x3f, r0	; 63
    4c82:	0f 90       	pop	r0
    4c84:	1f 90       	pop	r1
    4c86:	18 95       	reti

00004c88 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    4c88:	1f 92       	push	r1
    4c8a:	0f 92       	push	r0
    4c8c:	0f b6       	in	r0, 0x3f	; 63
    4c8e:	0f 92       	push	r0
    4c90:	11 24       	eor	r1, r1
    4c92:	0b b6       	in	r0, 0x3b	; 59
    4c94:	0f 92       	push	r0
    4c96:	2f 93       	push	r18
    4c98:	3f 93       	push	r19
    4c9a:	4f 93       	push	r20
    4c9c:	5f 93       	push	r21
    4c9e:	6f 93       	push	r22
    4ca0:	7f 93       	push	r23
    4ca2:	8f 93       	push	r24
    4ca4:	9f 93       	push	r25
    4ca6:	af 93       	push	r26
    4ca8:	bf 93       	push	r27
    4caa:	ef 93       	push	r30
    4cac:	ff 93       	push	r31
    4cae:	2e df       	rcall	.-420    	; 0x4b0c <twim_interrupt_handler>
    4cb0:	ff 91       	pop	r31
    4cb2:	ef 91       	pop	r30
    4cb4:	bf 91       	pop	r27
    4cb6:	af 91       	pop	r26
    4cb8:	9f 91       	pop	r25
    4cba:	8f 91       	pop	r24
    4cbc:	7f 91       	pop	r23
    4cbe:	6f 91       	pop	r22
    4cc0:	5f 91       	pop	r21
    4cc2:	4f 91       	pop	r20
    4cc4:	3f 91       	pop	r19
    4cc6:	2f 91       	pop	r18
    4cc8:	0f 90       	pop	r0
    4cca:	0b be       	out	0x3b, r0	; 59
    4ccc:	0f 90       	pop	r0
    4cce:	0f be       	out	0x3f, r0	; 63
    4cd0:	0f 90       	pop	r0
    4cd2:	1f 90       	pop	r1
    4cd4:	18 95       	reti

00004cd6 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    4cd6:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    4cd8:	db 01       	movw	r26, r22
    4cda:	14 96       	adiw	r26, 0x04	; 4
    4cdc:	8c 91       	ld	r24, X
    4cde:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    4ce0:	88 eb       	ldi	r24, 0xB8	; 184
    4ce2:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    4ce4:	81 e0       	ldi	r24, 0x01	; 1
    4ce6:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    4ce8:	e4 e2       	ldi	r30, 0x24	; 36
    4cea:	f4 e2       	ldi	r31, 0x24	; 36
    4cec:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    4cee:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    4cf0:	e0 ea       	ldi	r30, 0xA0	; 160
    4cf2:	f0 e0       	ldi	r31, 0x00	; 0
    4cf4:	82 81       	ldd	r24, Z+2	; 0x02
    4cf6:	82 60       	ori	r24, 0x02	; 2
    4cf8:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    4cfa:	78 94       	sei

	return STATUS_OK;
}
    4cfc:	80 e0       	ldi	r24, 0x00	; 0
    4cfe:	08 95       	ret

00004d00 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    4d00:	cf 93       	push	r28
    4d02:	df 93       	push	r29
    4d04:	1f 92       	push	r1
    4d06:	cd b7       	in	r28, 0x3d	; 61
    4d08:	de b7       	in	r29, 0x3e	; 62
    4d0a:	9c 01       	movw	r18, r24
    4d0c:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    4d0e:	89 2b       	or	r24, r25
    4d10:	09 f4       	brne	.+2      	; 0x4d14 <twi_master_transfer+0x14>
    4d12:	51 c0       	rjmp	.+162    	; 0x4db6 <twi_master_transfer+0xb6>
    4d14:	30 97       	sbiw	r30, 0x00	; 0
    4d16:	09 f4       	brne	.+2      	; 0x4d1a <twi_master_transfer+0x1a>
    4d18:	50 c0       	rjmp	.+160    	; 0x4dba <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    4d1a:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    4d1c:	80 91 2d 24 	lds	r24, 0x242D	; 0x80242d <transfer+0x9>
    4d20:	88 23       	and	r24, r24
    4d22:	19 f0       	breq	.+6      	; 0x4d2a <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    4d24:	99 23       	and	r25, r25
    4d26:	f1 f3       	breq	.-4      	; 0x4d24 <twi_master_transfer+0x24>
    4d28:	4a c0       	rjmp	.+148    	; 0x4dbe <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4d2a:	8f b7       	in	r24, 0x3f	; 63
    4d2c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4d2e:	f8 94       	cli
	return flags;
    4d30:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    4d32:	a4 e2       	ldi	r26, 0x24	; 36
    4d34:	b4 e2       	ldi	r27, 0x24	; 36
    4d36:	91 e0       	ldi	r25, 0x01	; 1
    4d38:	19 96       	adiw	r26, 0x09	; 9
    4d3a:	9c 93       	st	X, r25
    4d3c:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    4d3e:	90 e8       	ldi	r25, 0x80	; 128
    4d40:	1a 96       	adiw	r26, 0x0a	; 10
    4d42:	9c 93       	st	X, r25
    4d44:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4d46:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    4d48:	2d 93       	st	X+, r18
    4d4a:	3c 93       	st	X, r19
    4d4c:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    4d4e:	12 96       	adiw	r26, 0x02	; 2
    4d50:	6d 93       	st	X+, r22
    4d52:	7c 93       	st	X, r23
    4d54:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    4d56:	14 96       	adiw	r26, 0x04	; 4
    4d58:	1d 92       	st	X+, r1
    4d5a:	1c 92       	st	X, r1
    4d5c:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    4d5e:	16 96       	adiw	r26, 0x06	; 6
    4d60:	1d 92       	st	X+, r1
    4d62:	1c 92       	st	X, r1
    4d64:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    4d66:	18 96       	adiw	r26, 0x08	; 8
    4d68:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    4d6a:	80 81       	ld	r24, Z
    4d6c:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    4d6e:	64 81       	ldd	r22, Z+4	; 0x04
    4d70:	75 81       	ldd	r23, Z+5	; 0x05
    4d72:	67 2b       	or	r22, r23
    4d74:	11 f4       	brne	.+4      	; 0x4d7a <twi_master_transfer+0x7a>
    4d76:	41 11       	cpse	r20, r1
    4d78:	03 c0       	rjmp	.+6      	; 0x4d80 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    4d7a:	f9 01       	movw	r30, r18
    4d7c:	86 83       	std	Z+6, r24	; 0x06
    4d7e:	03 c0       	rjmp	.+6      	; 0x4d86 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    4d80:	81 60       	ori	r24, 0x01	; 1
    4d82:	f9 01       	movw	r30, r18
    4d84:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    4d86:	e4 e2       	ldi	r30, 0x24	; 36
    4d88:	f4 e2       	ldi	r31, 0x24	; 36
    4d8a:	92 85       	ldd	r25, Z+10	; 0x0a
    4d8c:	90 38       	cpi	r25, 0x80	; 128
    4d8e:	e9 f3       	breq	.-6      	; 0x4d8a <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    4d90:	f9 01       	movw	r30, r18
    4d92:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    4d94:	83 70       	andi	r24, 0x03	; 3
    4d96:	81 30       	cpi	r24, 0x01	; 1
    4d98:	49 f0       	breq	.+18     	; 0x4dac <twi_master_transfer+0xac>
    4d9a:	a4 e2       	ldi	r26, 0x24	; 36
    4d9c:	b4 e2       	ldi	r27, 0x24	; 36
    4d9e:	ed 91       	ld	r30, X+
    4da0:	fc 91       	ld	r31, X
    4da2:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    4da4:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    4da6:	83 70       	andi	r24, 0x03	; 3
    4da8:	81 30       	cpi	r24, 0x01	; 1
    4daa:	c9 f7       	brne	.-14     	; 0x4d9e <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    4dac:	e4 e2       	ldi	r30, 0x24	; 36
    4dae:	f4 e2       	ldi	r31, 0x24	; 36
    4db0:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    4db2:	11 86       	std	Z+9, r1	; 0x09
    4db4:	05 c0       	rjmp	.+10     	; 0x4dc0 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    4db6:	88 ef       	ldi	r24, 0xF8	; 248
    4db8:	03 c0       	rjmp	.+6      	; 0x4dc0 <twi_master_transfer+0xc0>
    4dba:	88 ef       	ldi	r24, 0xF8	; 248
    4dbc:	01 c0       	rjmp	.+2      	; 0x4dc0 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    4dbe:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    4dc0:	0f 90       	pop	r0
    4dc2:	df 91       	pop	r29
    4dc4:	cf 91       	pop	r28
    4dc6:	08 95       	ret

00004dc8 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    4dc8:	cf 93       	push	r28
    4dca:	df 93       	push	r29
    4dcc:	1f 92       	push	r1
    4dce:	1f 92       	push	r1
    4dd0:	cd b7       	in	r28, 0x3d	; 61
    4dd2:	de b7       	in	r29, 0x3e	; 62
    4dd4:	81 11       	cpse	r24, r1
    4dd6:	26 c0       	rjmp	.+76     	; 0x4e24 <udd_sleep_mode+0x5c>
    4dd8:	90 91 5c 25 	lds	r25, 0x255C	; 0x80255c <udd_b_idle>
    4ddc:	99 23       	and	r25, r25
    4dde:	f9 f0       	breq	.+62     	; 0x4e1e <udd_sleep_mode+0x56>
    4de0:	90 91 90 28 	lds	r25, 0x2890	; 0x802890 <sleepmgr_locks+0x1>
    4de4:	91 11       	cpse	r25, r1
    4de6:	01 c0       	rjmp	.+2      	; 0x4dea <udd_sleep_mode+0x22>
    4de8:	ff cf       	rjmp	.-2      	; 0x4de8 <udd_sleep_mode+0x20>
    4dea:	9f b7       	in	r25, 0x3f	; 63
    4dec:	9a 83       	std	Y+2, r25	; 0x02
    4dee:	f8 94       	cli
    4df0:	2a 81       	ldd	r18, Y+2	; 0x02
    4df2:	ef e8       	ldi	r30, 0x8F	; 143
    4df4:	f8 e2       	ldi	r31, 0x28	; 40
    4df6:	91 81       	ldd	r25, Z+1	; 0x01
    4df8:	91 50       	subi	r25, 0x01	; 1
    4dfa:	91 83       	std	Z+1, r25	; 0x01
    4dfc:	2f bf       	out	0x3f, r18	; 63
    4dfe:	0f c0       	rjmp	.+30     	; 0x4e1e <udd_sleep_mode+0x56>
    4e00:	90 91 90 28 	lds	r25, 0x2890	; 0x802890 <sleepmgr_locks+0x1>
    4e04:	9f 3f       	cpi	r25, 0xFF	; 255
    4e06:	09 f4       	brne	.+2      	; 0x4e0a <udd_sleep_mode+0x42>
    4e08:	ff cf       	rjmp	.-2      	; 0x4e08 <udd_sleep_mode+0x40>
    4e0a:	9f b7       	in	r25, 0x3f	; 63
    4e0c:	99 83       	std	Y+1, r25	; 0x01
    4e0e:	f8 94       	cli
    4e10:	29 81       	ldd	r18, Y+1	; 0x01
    4e12:	ef e8       	ldi	r30, 0x8F	; 143
    4e14:	f8 e2       	ldi	r31, 0x28	; 40
    4e16:	91 81       	ldd	r25, Z+1	; 0x01
    4e18:	9f 5f       	subi	r25, 0xFF	; 255
    4e1a:	91 83       	std	Z+1, r25	; 0x01
    4e1c:	2f bf       	out	0x3f, r18	; 63
    4e1e:	80 93 5c 25 	sts	0x255C, r24	; 0x80255c <udd_b_idle>
    4e22:	05 c0       	rjmp	.+10     	; 0x4e2e <udd_sleep_mode+0x66>
    4e24:	90 91 5c 25 	lds	r25, 0x255C	; 0x80255c <udd_b_idle>
    4e28:	99 23       	and	r25, r25
    4e2a:	51 f3       	breq	.-44     	; 0x4e00 <udd_sleep_mode+0x38>
    4e2c:	f8 cf       	rjmp	.-16     	; 0x4e1e <udd_sleep_mode+0x56>
    4e2e:	0f 90       	pop	r0
    4e30:	0f 90       	pop	r0
    4e32:	df 91       	pop	r29
    4e34:	cf 91       	pop	r28
    4e36:	08 95       	ret

00004e38 <udd_ctrl_init>:
    4e38:	0f 93       	push	r16
    4e3a:	e8 ec       	ldi	r30, 0xC8	; 200
    4e3c:	f4 e0       	ldi	r31, 0x04	; 4
    4e3e:	80 81       	ld	r24, Z
    4e40:	8f 7d       	andi	r24, 0xDF	; 223
    4e42:	80 83       	st	Z, r24
    4e44:	80 81       	ld	r24, Z
    4e46:	8f 7d       	andi	r24, 0xDF	; 223
    4e48:	80 83       	st	Z, r24
    4e4a:	e0 e3       	ldi	r30, 0x30	; 48
    4e4c:	f5 e2       	ldi	r31, 0x25	; 37
    4e4e:	02 e0       	ldi	r16, 0x02	; 2
    4e50:	05 93       	las	Z, r16
    4e52:	10 92 32 25 	sts	0x2532, r1	; 0x802532 <udd_sram+0x16>
    4e56:	10 92 33 25 	sts	0x2533, r1	; 0x802533 <udd_sram+0x17>
    4e5a:	00 e2       	ldi	r16, 0x20	; 32
    4e5c:	06 93       	lac	Z, r16
    4e5e:	00 e4       	ldi	r16, 0x40	; 64
    4e60:	06 93       	lac	Z, r16
    4e62:	e8 e2       	ldi	r30, 0x28	; 40
    4e64:	f5 e2       	ldi	r31, 0x25	; 37
    4e66:	00 e4       	ldi	r16, 0x40	; 64
    4e68:	06 93       	lac	Z, r16
    4e6a:	ef e7       	ldi	r30, 0x7F	; 127
    4e6c:	f8 e2       	ldi	r31, 0x28	; 40
    4e6e:	14 86       	std	Z+12, r1	; 0x0c
    4e70:	15 86       	std	Z+13, r1	; 0x0d
    4e72:	16 86       	std	Z+14, r1	; 0x0e
    4e74:	17 86       	std	Z+15, r1	; 0x0f
    4e76:	12 86       	std	Z+10, r1	; 0x0a
    4e78:	13 86       	std	Z+11, r1	; 0x0b
    4e7a:	10 92 18 25 	sts	0x2518, r1	; 0x802518 <udd_ep_control_state>
    4e7e:	0f 91       	pop	r16
    4e80:	08 95       	ret

00004e82 <udd_ctrl_stall_data>:
    4e82:	0f 93       	push	r16
    4e84:	85 e0       	ldi	r24, 0x05	; 5
    4e86:	80 93 18 25 	sts	0x2518, r24	; 0x802518 <udd_ep_control_state>
    4e8a:	e1 e3       	ldi	r30, 0x31	; 49
    4e8c:	f5 e2       	ldi	r31, 0x25	; 37
    4e8e:	04 e0       	ldi	r16, 0x04	; 4
    4e90:	05 93       	las	Z, r16
    4e92:	e9 e2       	ldi	r30, 0x29	; 41
    4e94:	f5 e2       	ldi	r31, 0x25	; 37
    4e96:	04 e0       	ldi	r16, 0x04	; 4
    4e98:	05 93       	las	Z, r16
    4e9a:	0f 91       	pop	r16
    4e9c:	08 95       	ret

00004e9e <udd_ctrl_send_zlp_in>:
    4e9e:	0f 93       	push	r16
    4ea0:	83 e0       	ldi	r24, 0x03	; 3
    4ea2:	80 93 18 25 	sts	0x2518, r24	; 0x802518 <udd_ep_control_state>
    4ea6:	10 92 32 25 	sts	0x2532, r1	; 0x802532 <udd_sram+0x16>
    4eaa:	10 92 33 25 	sts	0x2533, r1	; 0x802533 <udd_sram+0x17>
    4eae:	e0 e3       	ldi	r30, 0x30	; 48
    4eb0:	f5 e2       	ldi	r31, 0x25	; 37
    4eb2:	02 e0       	ldi	r16, 0x02	; 2
    4eb4:	06 93       	lac	Z, r16
    4eb6:	0f 91       	pop	r16
    4eb8:	08 95       	ret

00004eba <udd_ctrl_endofrequest>:
    4eba:	e0 91 8b 28 	lds	r30, 0x288B	; 0x80288b <udd_g_ctrlreq+0xc>
    4ebe:	f0 91 8c 28 	lds	r31, 0x288C	; 0x80288c <udd_g_ctrlreq+0xd>
    4ec2:	30 97       	sbiw	r30, 0x00	; 0
    4ec4:	09 f0       	breq	.+2      	; 0x4ec8 <udd_ctrl_endofrequest+0xe>
    4ec6:	19 95       	eicall
    4ec8:	08 95       	ret

00004eca <udd_ctrl_in_sent>:
    4eca:	0f 93       	push	r16
    4ecc:	cf 93       	push	r28
    4ece:	df 93       	push	r29
    4ed0:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_ep_control_state>
    4ed4:	83 30       	cpi	r24, 0x03	; 3
    4ed6:	19 f4       	brne	.+6      	; 0x4ede <udd_ctrl_in_sent+0x14>
    4ed8:	f0 df       	rcall	.-32     	; 0x4eba <udd_ctrl_endofrequest>
    4eda:	ae df       	rcall	.-164    	; 0x4e38 <udd_ctrl_init>
    4edc:	5e c0       	rjmp	.+188    	; 0x4f9a <udd_ctrl_in_sent+0xd0>
    4ede:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <udd_ctrl_payload_nb_trans>
    4ee2:	90 91 15 25 	lds	r25, 0x2515	; 0x802515 <udd_ctrl_payload_nb_trans+0x1>
    4ee6:	c0 91 89 28 	lds	r28, 0x2889	; 0x802889 <udd_g_ctrlreq+0xa>
    4eea:	d0 91 8a 28 	lds	r29, 0x288A	; 0x80288a <udd_g_ctrlreq+0xb>
    4eee:	c8 1b       	sub	r28, r24
    4ef0:	d9 0b       	sbc	r29, r25
    4ef2:	71 f5       	brne	.+92     	; 0x4f50 <udd_ctrl_in_sent+0x86>
    4ef4:	20 91 16 25 	lds	r18, 0x2516	; 0x802516 <udd_ctrl_prev_payload_nb_trans>
    4ef8:	30 91 17 25 	lds	r19, 0x2517	; 0x802517 <udd_ctrl_prev_payload_nb_trans+0x1>
    4efc:	82 0f       	add	r24, r18
    4efe:	93 1f       	adc	r25, r19
    4f00:	80 93 16 25 	sts	0x2516, r24	; 0x802516 <udd_ctrl_prev_payload_nb_trans>
    4f04:	90 93 17 25 	sts	0x2517, r25	; 0x802517 <udd_ctrl_prev_payload_nb_trans+0x1>
    4f08:	20 91 85 28 	lds	r18, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    4f0c:	30 91 86 28 	lds	r19, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    4f10:	82 17       	cp	r24, r18
    4f12:	93 07       	cpc	r25, r19
    4f14:	21 f0       	breq	.+8      	; 0x4f1e <udd_ctrl_in_sent+0x54>
    4f16:	80 91 2f 24 	lds	r24, 0x242F	; 0x80242f <b_shortpacket.5472>
    4f1a:	88 23       	and	r24, r24
    4f1c:	41 f0       	breq	.+16     	; 0x4f2e <udd_ctrl_in_sent+0x64>
    4f1e:	84 e0       	ldi	r24, 0x04	; 4
    4f20:	80 93 18 25 	sts	0x2518, r24	; 0x802518 <udd_ep_control_state>
    4f24:	e8 e2       	ldi	r30, 0x28	; 40
    4f26:	f5 e2       	ldi	r31, 0x25	; 37
    4f28:	02 e0       	ldi	r16, 0x02	; 2
    4f2a:	06 93       	lac	Z, r16
    4f2c:	36 c0       	rjmp	.+108    	; 0x4f9a <udd_ctrl_in_sent+0xd0>
    4f2e:	e0 91 8d 28 	lds	r30, 0x288D	; 0x80288d <udd_g_ctrlreq+0xe>
    4f32:	f0 91 8e 28 	lds	r31, 0x288E	; 0x80288e <udd_g_ctrlreq+0xf>
    4f36:	30 97       	sbiw	r30, 0x00	; 0
    4f38:	99 f0       	breq	.+38     	; 0x4f60 <udd_ctrl_in_sent+0x96>
    4f3a:	19 95       	eicall
    4f3c:	88 23       	and	r24, r24
    4f3e:	81 f0       	breq	.+32     	; 0x4f60 <udd_ctrl_in_sent+0x96>
    4f40:	10 92 14 25 	sts	0x2514, r1	; 0x802514 <udd_ctrl_payload_nb_trans>
    4f44:	10 92 15 25 	sts	0x2515, r1	; 0x802515 <udd_ctrl_payload_nb_trans+0x1>
    4f48:	c0 91 89 28 	lds	r28, 0x2889	; 0x802889 <udd_g_ctrlreq+0xa>
    4f4c:	d0 91 8a 28 	lds	r29, 0x288A	; 0x80288a <udd_g_ctrlreq+0xb>
    4f50:	c0 34       	cpi	r28, 0x40	; 64
    4f52:	d1 05       	cpc	r29, r1
    4f54:	28 f0       	brcs	.+10     	; 0x4f60 <udd_ctrl_in_sent+0x96>
    4f56:	10 92 2f 24 	sts	0x242F, r1	; 0x80242f <b_shortpacket.5472>
    4f5a:	c0 e4       	ldi	r28, 0x40	; 64
    4f5c:	d0 e0       	ldi	r29, 0x00	; 0
    4f5e:	03 c0       	rjmp	.+6      	; 0x4f66 <udd_ctrl_in_sent+0x9c>
    4f60:	81 e0       	ldi	r24, 0x01	; 1
    4f62:	80 93 2f 24 	sts	0x242F, r24	; 0x80242f <b_shortpacket.5472>
    4f66:	ec e1       	ldi	r30, 0x1C	; 28
    4f68:	f5 e2       	ldi	r31, 0x25	; 37
    4f6a:	c6 8b       	std	Z+22, r28	; 0x16
    4f6c:	d7 8b       	std	Z+23, r29	; 0x17
    4f6e:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <udd_ctrl_payload_nb_trans>
    4f72:	90 91 15 25 	lds	r25, 0x2515	; 0x802515 <udd_ctrl_payload_nb_trans+0x1>
    4f76:	20 91 87 28 	lds	r18, 0x2887	; 0x802887 <udd_g_ctrlreq+0x8>
    4f7a:	30 91 88 28 	lds	r19, 0x2888	; 0x802888 <udd_g_ctrlreq+0x9>
    4f7e:	28 0f       	add	r18, r24
    4f80:	39 1f       	adc	r19, r25
    4f82:	20 8f       	std	Z+24, r18	; 0x18
    4f84:	31 8f       	std	Z+25, r19	; 0x19
    4f86:	c8 0f       	add	r28, r24
    4f88:	d9 1f       	adc	r29, r25
    4f8a:	c0 93 14 25 	sts	0x2514, r28	; 0x802514 <udd_ctrl_payload_nb_trans>
    4f8e:	d0 93 15 25 	sts	0x2515, r29	; 0x802515 <udd_ctrl_payload_nb_trans+0x1>
    4f92:	e0 e3       	ldi	r30, 0x30	; 48
    4f94:	f5 e2       	ldi	r31, 0x25	; 37
    4f96:	02 e0       	ldi	r16, 0x02	; 2
    4f98:	06 93       	lac	Z, r16
    4f9a:	df 91       	pop	r29
    4f9c:	cf 91       	pop	r28
    4f9e:	0f 91       	pop	r16
    4fa0:	08 95       	ret

00004fa2 <udd_ep_get_size>:
    4fa2:	fc 01       	movw	r30, r24
    4fa4:	81 81       	ldd	r24, Z+1	; 0x01
    4fa6:	e8 2f       	mov	r30, r24
    4fa8:	e7 70       	andi	r30, 0x07	; 7
    4faa:	8e 2f       	mov	r24, r30
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	fc 01       	movw	r30, r24
    4fb0:	31 97       	sbiw	r30, 0x01	; 1
    4fb2:	e7 30       	cpi	r30, 0x07	; 7
    4fb4:	f1 05       	cpc	r31, r1
    4fb6:	d8 f4       	brcc	.+54     	; 0x4fee <udd_ep_get_size+0x4c>
    4fb8:	88 27       	eor	r24, r24
    4fba:	e2 50       	subi	r30, 0x02	; 2
    4fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4fbe:	8f 4f       	sbci	r24, 0xFF	; 255
    4fc0:	0c 94 9a 40 	jmp	0x8134	; 0x8134 <__tablejump2__>
    4fc4:	80 e1       	ldi	r24, 0x10	; 16
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	08 95       	ret
    4fca:	80 e2       	ldi	r24, 0x20	; 32
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	08 95       	ret
    4fd0:	80 e4       	ldi	r24, 0x40	; 64
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	08 95       	ret
    4fd6:	80 e8       	ldi	r24, 0x80	; 128
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	08 95       	ret
    4fdc:	80 e0       	ldi	r24, 0x00	; 0
    4fde:	91 e0       	ldi	r25, 0x01	; 1
    4fe0:	08 95       	ret
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	92 e0       	ldi	r25, 0x02	; 2
    4fe6:	08 95       	ret
    4fe8:	8f ef       	ldi	r24, 0xFF	; 255
    4fea:	93 e0       	ldi	r25, 0x03	; 3
    4fec:	08 95       	ret
    4fee:	88 e0       	ldi	r24, 0x08	; 8
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	08 95       	ret

00004ff4 <udd_ep_get_job>:
    4ff4:	28 2f       	mov	r18, r24
    4ff6:	2f 70       	andi	r18, 0x0F	; 15
    4ff8:	30 e0       	ldi	r19, 0x00	; 0
    4ffa:	22 0f       	add	r18, r18
    4ffc:	33 1f       	adc	r19, r19
    4ffe:	08 2e       	mov	r0, r24
    5000:	00 0c       	add	r0, r0
    5002:	99 0b       	sbc	r25, r25
    5004:	88 27       	eor	r24, r24
    5006:	99 0f       	add	r25, r25
    5008:	88 1f       	adc	r24, r24
    500a:	99 27       	eor	r25, r25
    500c:	82 0f       	add	r24, r18
    500e:	93 1f       	adc	r25, r19
    5010:	02 97       	sbiw	r24, 0x02	; 2
    5012:	9c 01       	movw	r18, r24
    5014:	22 0f       	add	r18, r18
    5016:	33 1f       	adc	r19, r19
    5018:	22 0f       	add	r18, r18
    501a:	33 1f       	adc	r19, r19
    501c:	22 0f       	add	r18, r18
    501e:	33 1f       	adc	r19, r19
    5020:	82 0f       	add	r24, r18
    5022:	93 1f       	adc	r25, r19
    5024:	80 55       	subi	r24, 0x50	; 80
    5026:	9b 4d       	sbci	r25, 0xDB	; 219
    5028:	08 95       	ret

0000502a <udd_ctrl_interrupt_tc_setup>:
    502a:	0f 93       	push	r16
    502c:	cf 93       	push	r28
    502e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5032:	80 ff       	sbrs	r24, 0
    5034:	65 c0       	rjmp	.+202    	; 0x5100 <udd_ctrl_interrupt_tc_setup+0xd6>
    5036:	81 e0       	ldi	r24, 0x01	; 1
    5038:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    503c:	e8 e2       	ldi	r30, 0x28	; 40
    503e:	f5 e2       	ldi	r31, 0x25	; 37
    5040:	00 e8       	ldi	r16, 0x80	; 128
    5042:	06 93       	lac	Z, r16
    5044:	e0 e3       	ldi	r30, 0x30	; 48
    5046:	f5 e2       	ldi	r31, 0x25	; 37
    5048:	00 e8       	ldi	r16, 0x80	; 128
    504a:	06 93       	lac	Z, r16
    504c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    5050:	e8 e2       	ldi	r30, 0x28	; 40
    5052:	f5 e2       	ldi	r31, 0x25	; 37
    5054:	00 e1       	ldi	r16, 0x10	; 16
    5056:	06 93       	lac	Z, r16
    5058:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_ep_control_state>
    505c:	88 23       	and	r24, r24
    505e:	29 f0       	breq	.+10     	; 0x506a <udd_ctrl_interrupt_tc_setup+0x40>
    5060:	83 50       	subi	r24, 0x03	; 3
    5062:	82 30       	cpi	r24, 0x02	; 2
    5064:	08 f4       	brcc	.+2      	; 0x5068 <udd_ctrl_interrupt_tc_setup+0x3e>
    5066:	29 df       	rcall	.-430    	; 0x4eba <udd_ctrl_endofrequest>
    5068:	e7 de       	rcall	.-562    	; 0x4e38 <udd_ctrl_init>
    506a:	80 91 2a 25 	lds	r24, 0x252A	; 0x80252a <udd_sram+0xe>
    506e:	90 91 2b 25 	lds	r25, 0x252B	; 0x80252b <udd_sram+0xf>
    5072:	08 97       	sbiw	r24, 0x08	; 8
    5074:	09 f0       	breq	.+2      	; 0x5078 <udd_ctrl_interrupt_tc_setup+0x4e>
    5076:	46 c0       	rjmp	.+140    	; 0x5104 <udd_ctrl_interrupt_tc_setup+0xda>
    5078:	88 e0       	ldi	r24, 0x08	; 8
    507a:	e4 ed       	ldi	r30, 0xD4	; 212
    507c:	f4 e2       	ldi	r31, 0x24	; 36
    507e:	af e7       	ldi	r26, 0x7F	; 127
    5080:	b8 e2       	ldi	r27, 0x28	; 40
    5082:	01 90       	ld	r0, Z+
    5084:	0d 92       	st	X+, r0
    5086:	8a 95       	dec	r24
    5088:	e1 f7       	brne	.-8      	; 0x5082 <udd_ctrl_interrupt_tc_setup+0x58>
    508a:	e8 ec       	ldi	r30, 0xC8	; 200
    508c:	f4 e0       	ldi	r31, 0x04	; 4
    508e:	80 81       	ld	r24, Z
    5090:	80 62       	ori	r24, 0x20	; 32
    5092:	80 83       	st	Z, r24
    5094:	80 81       	ld	r24, Z
    5096:	80 62       	ori	r24, 0x20	; 32
    5098:	80 83       	st	Z, r24
    509a:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <udc_process_setup>
    509e:	c8 2f       	mov	r28, r24
    50a0:	81 11       	cpse	r24, r1
    50a2:	03 c0       	rjmp	.+6      	; 0x50aa <udd_ctrl_interrupt_tc_setup+0x80>
    50a4:	ee de       	rcall	.-548    	; 0x4e82 <udd_ctrl_stall_data>
    50a6:	c1 e0       	ldi	r28, 0x01	; 1
    50a8:	2e c0       	rjmp	.+92     	; 0x5106 <udd_ctrl_interrupt_tc_setup+0xdc>
    50aa:	80 91 7f 28 	lds	r24, 0x287F	; 0x80287f <udd_g_ctrlreq>
    50ae:	88 23       	and	r24, r24
    50b0:	6c f4       	brge	.+26     	; 0x50cc <udd_ctrl_interrupt_tc_setup+0xa2>
    50b2:	10 92 16 25 	sts	0x2516, r1	; 0x802516 <udd_ctrl_prev_payload_nb_trans>
    50b6:	10 92 17 25 	sts	0x2517, r1	; 0x802517 <udd_ctrl_prev_payload_nb_trans+0x1>
    50ba:	10 92 14 25 	sts	0x2514, r1	; 0x802514 <udd_ctrl_payload_nb_trans>
    50be:	10 92 15 25 	sts	0x2515, r1	; 0x802515 <udd_ctrl_payload_nb_trans+0x1>
    50c2:	82 e0       	ldi	r24, 0x02	; 2
    50c4:	80 93 18 25 	sts	0x2518, r24	; 0x802518 <udd_ep_control_state>
    50c8:	00 df       	rcall	.-512    	; 0x4eca <udd_ctrl_in_sent>
    50ca:	1d c0       	rjmp	.+58     	; 0x5106 <udd_ctrl_interrupt_tc_setup+0xdc>
    50cc:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    50d0:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    50d4:	89 2b       	or	r24, r25
    50d6:	11 f4       	brne	.+4      	; 0x50dc <udd_ctrl_interrupt_tc_setup+0xb2>
    50d8:	e2 de       	rcall	.-572    	; 0x4e9e <udd_ctrl_send_zlp_in>
    50da:	15 c0       	rjmp	.+42     	; 0x5106 <udd_ctrl_interrupt_tc_setup+0xdc>
    50dc:	10 92 16 25 	sts	0x2516, r1	; 0x802516 <udd_ctrl_prev_payload_nb_trans>
    50e0:	10 92 17 25 	sts	0x2517, r1	; 0x802517 <udd_ctrl_prev_payload_nb_trans+0x1>
    50e4:	10 92 14 25 	sts	0x2514, r1	; 0x802514 <udd_ctrl_payload_nb_trans>
    50e8:	10 92 15 25 	sts	0x2515, r1	; 0x802515 <udd_ctrl_payload_nb_trans+0x1>
    50ec:	81 e0       	ldi	r24, 0x01	; 1
    50ee:	80 93 18 25 	sts	0x2518, r24	; 0x802518 <udd_ep_control_state>
    50f2:	e8 e2       	ldi	r30, 0x28	; 40
    50f4:	f5 e2       	ldi	r31, 0x25	; 37
    50f6:	02 e0       	ldi	r16, 0x02	; 2
    50f8:	06 93       	lac	Z, r16
    50fa:	00 e2       	ldi	r16, 0x20	; 32
    50fc:	06 93       	lac	Z, r16
    50fe:	03 c0       	rjmp	.+6      	; 0x5106 <udd_ctrl_interrupt_tc_setup+0xdc>
    5100:	c0 e0       	ldi	r28, 0x00	; 0
    5102:	01 c0       	rjmp	.+2      	; 0x5106 <udd_ctrl_interrupt_tc_setup+0xdc>
    5104:	c1 e0       	ldi	r28, 0x01	; 1
    5106:	8c 2f       	mov	r24, r28
    5108:	cf 91       	pop	r28
    510a:	0f 91       	pop	r16
    510c:	08 95       	ret

0000510e <udd_ep_trans_complet>:
    510e:	8f 92       	push	r8
    5110:	9f 92       	push	r9
    5112:	af 92       	push	r10
    5114:	bf 92       	push	r11
    5116:	df 92       	push	r13
    5118:	ef 92       	push	r14
    511a:	ff 92       	push	r15
    511c:	0f 93       	push	r16
    511e:	1f 93       	push	r17
    5120:	cf 93       	push	r28
    5122:	df 93       	push	r29
    5124:	d8 2e       	mov	r13, r24
    5126:	66 df       	rcall	.-308    	; 0x4ff4 <udd_ep_get_job>
    5128:	8c 01       	movw	r16, r24
    512a:	cd 2d       	mov	r28, r13
    512c:	cf 70       	andi	r28, 0x0F	; 15
    512e:	d0 e0       	ldi	r29, 0x00	; 0
    5130:	ce 01       	movw	r24, r28
    5132:	88 0f       	add	r24, r24
    5134:	99 1f       	adc	r25, r25
    5136:	cd 2d       	mov	r28, r13
    5138:	0d 2c       	mov	r0, r13
    513a:	00 0c       	add	r0, r0
    513c:	dd 0b       	sbc	r29, r29
    513e:	cc 27       	eor	r28, r28
    5140:	dd 0f       	add	r29, r29
    5142:	cc 1f       	adc	r28, r28
    5144:	dd 27       	eor	r29, r29
    5146:	c8 0f       	add	r28, r24
    5148:	d9 1f       	adc	r29, r25
    514a:	ce 01       	movw	r24, r28
    514c:	88 0f       	add	r24, r24
    514e:	99 1f       	adc	r25, r25
    5150:	88 0f       	add	r24, r24
    5152:	99 1f       	adc	r25, r25
    5154:	88 0f       	add	r24, r24
    5156:	99 1f       	adc	r25, r25
    5158:	9c 01       	movw	r18, r24
    515a:	28 5d       	subi	r18, 0xD8	; 216
    515c:	3a 4d       	sbci	r19, 0xDA	; 218
    515e:	79 01       	movw	r14, r18
    5160:	c9 01       	movw	r24, r18
    5162:	1f df       	rcall	.-450    	; 0x4fa2 <udd_ep_get_size>
    5164:	4c 01       	movw	r8, r24
    5166:	dd 20       	and	r13, r13
    5168:	0c f0       	brlt	.+2      	; 0x516c <udd_ep_trans_complet+0x5e>
    516a:	7b c0       	rjmp	.+246    	; 0x5262 <udd_ep_trans_complet+0x154>
    516c:	fe 01       	movw	r30, r28
    516e:	ee 0f       	add	r30, r30
    5170:	ff 1f       	adc	r31, r31
    5172:	ee 0f       	add	r30, r30
    5174:	ff 1f       	adc	r31, r31
    5176:	ee 0f       	add	r30, r30
    5178:	ff 1f       	adc	r31, r31
    517a:	e4 5e       	subi	r30, 0xE4	; 228
    517c:	fa 4d       	sbci	r31, 0xDA	; 218
    517e:	22 89       	ldd	r18, Z+18	; 0x12
    5180:	33 89       	ldd	r19, Z+19	; 0x13
    5182:	d8 01       	movw	r26, r16
    5184:	15 96       	adiw	r26, 0x05	; 5
    5186:	8d 91       	ld	r24, X+
    5188:	9c 91       	ld	r25, X
    518a:	16 97       	sbiw	r26, 0x06	; 6
    518c:	82 0f       	add	r24, r18
    518e:	93 1f       	adc	r25, r19
    5190:	15 96       	adiw	r26, 0x05	; 5
    5192:	8d 93       	st	X+, r24
    5194:	9c 93       	st	X, r25
    5196:	16 97       	sbiw	r26, 0x06	; 6
    5198:	13 96       	adiw	r26, 0x03	; 3
    519a:	2d 91       	ld	r18, X+
    519c:	3c 91       	ld	r19, X
    519e:	14 97       	sbiw	r26, 0x04	; 4
    51a0:	82 17       	cp	r24, r18
    51a2:	93 07       	cpc	r25, r19
    51a4:	09 f4       	brne	.+2      	; 0x51a8 <udd_ep_trans_complet+0x9a>
    51a6:	47 c0       	rjmp	.+142    	; 0x5236 <udd_ep_trans_complet+0x128>
    51a8:	28 1b       	sub	r18, r24
    51aa:	39 0b       	sbc	r19, r25
    51ac:	21 15       	cp	r18, r1
    51ae:	b4 e0       	ldi	r27, 0x04	; 4
    51b0:	3b 07       	cpc	r19, r27
    51b2:	40 f0       	brcs	.+16     	; 0x51c4 <udd_ep_trans_complet+0xb6>
    51b4:	2f ef       	ldi	r18, 0xFF	; 255
    51b6:	33 e0       	ldi	r19, 0x03	; 3
    51b8:	c9 01       	movw	r24, r18
    51ba:	b4 01       	movw	r22, r8
    51bc:	0e 94 51 40 	call	0x80a2	; 0x80a2 <__udivmodhi4>
    51c0:	28 1b       	sub	r18, r24
    51c2:	39 0b       	sbc	r19, r25
    51c4:	f8 01       	movw	r30, r16
    51c6:	80 81       	ld	r24, Z
    51c8:	81 ff       	sbrs	r24, 1
    51ca:	0a c0       	rjmp	.+20     	; 0x51e0 <udd_ep_trans_complet+0xd2>
    51cc:	c9 01       	movw	r24, r18
    51ce:	b4 01       	movw	r22, r8
    51d0:	0e 94 51 40 	call	0x80a2	; 0x80a2 <__udivmodhi4>
    51d4:	41 e0       	ldi	r20, 0x01	; 1
    51d6:	89 2b       	or	r24, r25
    51d8:	09 f0       	breq	.+2      	; 0x51dc <udd_ep_trans_complet+0xce>
    51da:	40 e0       	ldi	r20, 0x00	; 0
    51dc:	84 2f       	mov	r24, r20
    51de:	01 c0       	rjmp	.+2      	; 0x51e2 <udd_ep_trans_complet+0xd4>
    51e0:	80 e0       	ldi	r24, 0x00	; 0
    51e2:	d8 01       	movw	r26, r16
    51e4:	9c 91       	ld	r25, X
    51e6:	80 fb       	bst	r24, 0
    51e8:	91 f9       	bld	r25, 1
    51ea:	9c 93       	st	X, r25
    51ec:	fe 01       	movw	r30, r28
    51ee:	ee 0f       	add	r30, r30
    51f0:	ff 1f       	adc	r31, r31
    51f2:	ee 0f       	add	r30, r30
    51f4:	ff 1f       	adc	r31, r31
    51f6:	ee 0f       	add	r30, r30
    51f8:	ff 1f       	adc	r31, r31
    51fa:	e4 5e       	subi	r30, 0xE4	; 228
    51fc:	fa 4d       	sbci	r31, 0xDA	; 218
    51fe:	12 8a       	std	Z+18, r1	; 0x12
    5200:	13 8a       	std	Z+19, r1	; 0x13
    5202:	26 87       	std	Z+14, r18	; 0x0e
    5204:	37 87       	std	Z+15, r19	; 0x0f
    5206:	11 96       	adiw	r26, 0x01	; 1
    5208:	2d 91       	ld	r18, X+
    520a:	3c 91       	ld	r19, X
    520c:	12 97       	sbiw	r26, 0x02	; 2
    520e:	15 96       	adiw	r26, 0x05	; 5
    5210:	8d 91       	ld	r24, X+
    5212:	9c 91       	ld	r25, X
    5214:	16 97       	sbiw	r26, 0x06	; 6
    5216:	82 0f       	add	r24, r18
    5218:	93 1f       	adc	r25, r19
    521a:	cc 0f       	add	r28, r28
    521c:	dd 1f       	adc	r29, r29
    521e:	cc 0f       	add	r28, r28
    5220:	dd 1f       	adc	r29, r29
    5222:	cc 0f       	add	r28, r28
    5224:	dd 1f       	adc	r29, r29
    5226:	c4 5d       	subi	r28, 0xD4	; 212
    5228:	da 4d       	sbci	r29, 0xDA	; 218
    522a:	88 83       	st	Y, r24
    522c:	99 83       	std	Y+1, r25	; 0x01
    522e:	f7 01       	movw	r30, r14
    5230:	02 e0       	ldi	r16, 0x02	; 2
    5232:	06 93       	lac	Z, r16
    5234:	e4 c0       	rjmp	.+456    	; 0x53fe <udd_ep_trans_complet+0x2f0>
    5236:	d8 01       	movw	r26, r16
    5238:	8c 91       	ld	r24, X
    523a:	81 ff       	sbrs	r24, 1
    523c:	cd c0       	rjmp	.+410    	; 0x53d8 <udd_ep_trans_complet+0x2ca>
    523e:	8d 7f       	andi	r24, 0xFD	; 253
    5240:	8c 93       	st	X, r24
    5242:	cc 0f       	add	r28, r28
    5244:	dd 1f       	adc	r29, r29
    5246:	cc 0f       	add	r28, r28
    5248:	dd 1f       	adc	r29, r29
    524a:	cc 0f       	add	r28, r28
    524c:	dd 1f       	adc	r29, r29
    524e:	c4 5e       	subi	r28, 0xE4	; 228
    5250:	da 4d       	sbci	r29, 0xDA	; 218
    5252:	1a 8a       	std	Y+18, r1	; 0x12
    5254:	1b 8a       	std	Y+19, r1	; 0x13
    5256:	1e 86       	std	Y+14, r1	; 0x0e
    5258:	1f 86       	std	Y+15, r1	; 0x0f
    525a:	f7 01       	movw	r30, r14
    525c:	02 e0       	ldi	r16, 0x02	; 2
    525e:	06 93       	lac	Z, r16
    5260:	ce c0       	rjmp	.+412    	; 0x53fe <udd_ep_trans_complet+0x2f0>
    5262:	fe 01       	movw	r30, r28
    5264:	ee 0f       	add	r30, r30
    5266:	ff 1f       	adc	r31, r31
    5268:	ee 0f       	add	r30, r30
    526a:	ff 1f       	adc	r31, r31
    526c:	ee 0f       	add	r30, r30
    526e:	ff 1f       	adc	r31, r31
    5270:	e4 5e       	subi	r30, 0xE4	; 228
    5272:	fa 4d       	sbci	r31, 0xDA	; 218
    5274:	a6 84       	ldd	r10, Z+14	; 0x0e
    5276:	b7 84       	ldd	r11, Z+15	; 0x0f
    5278:	d8 01       	movw	r26, r16
    527a:	8c 91       	ld	r24, X
    527c:	82 ff       	sbrs	r24, 2
    527e:	1b c0       	rjmp	.+54     	; 0x52b6 <udd_ep_trans_complet+0x1a8>
    5280:	11 96       	adiw	r26, 0x01	; 1
    5282:	ed 91       	ld	r30, X+
    5284:	fc 91       	ld	r31, X
    5286:	12 97       	sbiw	r26, 0x02	; 2
    5288:	15 96       	adiw	r26, 0x05	; 5
    528a:	2d 91       	ld	r18, X+
    528c:	3c 91       	ld	r19, X
    528e:	16 97       	sbiw	r26, 0x06	; 6
    5290:	13 96       	adiw	r26, 0x03	; 3
    5292:	8d 91       	ld	r24, X+
    5294:	9c 91       	ld	r25, X
    5296:	14 97       	sbiw	r26, 0x04	; 4
    5298:	b4 01       	movw	r22, r8
    529a:	0e 94 51 40 	call	0x80a2	; 0x80a2 <__udivmodhi4>
    529e:	b0 e4       	ldi	r27, 0x40	; 64
    52a0:	db 9e       	mul	r13, r27
    52a2:	b0 01       	movw	r22, r0
    52a4:	11 24       	eor	r1, r1
    52a6:	60 51       	subi	r22, 0x10	; 16
    52a8:	7c 4d       	sbci	r23, 0xDC	; 220
    52aa:	ac 01       	movw	r20, r24
    52ac:	cf 01       	movw	r24, r30
    52ae:	82 0f       	add	r24, r18
    52b0:	93 1f       	adc	r25, r19
    52b2:	0e 94 3f 43 	call	0x867e	; 0x867e <memcpy>
    52b6:	f8 01       	movw	r30, r16
    52b8:	25 81       	ldd	r18, Z+5	; 0x05
    52ba:	36 81       	ldd	r19, Z+6	; 0x06
    52bc:	2a 0d       	add	r18, r10
    52be:	3b 1d       	adc	r19, r11
    52c0:	25 83       	std	Z+5, r18	; 0x05
    52c2:	36 83       	std	Z+6, r19	; 0x06
    52c4:	83 81       	ldd	r24, Z+3	; 0x03
    52c6:	94 81       	ldd	r25, Z+4	; 0x04
    52c8:	82 17       	cp	r24, r18
    52ca:	93 07       	cpc	r25, r19
    52cc:	68 f4       	brcc	.+26     	; 0x52e8 <udd_ep_trans_complet+0x1da>
    52ce:	85 83       	std	Z+5, r24	; 0x05
    52d0:	96 83       	std	Z+6, r25	; 0x06
    52d2:	cc 0f       	add	r28, r28
    52d4:	dd 1f       	adc	r29, r29
    52d6:	cc 0f       	add	r28, r28
    52d8:	dd 1f       	adc	r29, r29
    52da:	cc 0f       	add	r28, r28
    52dc:	dd 1f       	adc	r29, r29
    52de:	c4 5e       	subi	r28, 0xE4	; 228
    52e0:	da 4d       	sbci	r29, 0xDA	; 218
    52e2:	8a 89       	ldd	r24, Y+18	; 0x12
    52e4:	9b 89       	ldd	r25, Y+19	; 0x13
    52e6:	78 c0       	rjmp	.+240    	; 0x53d8 <udd_ep_trans_complet+0x2ca>
    52e8:	fe 01       	movw	r30, r28
    52ea:	ee 0f       	add	r30, r30
    52ec:	ff 1f       	adc	r31, r31
    52ee:	ee 0f       	add	r30, r30
    52f0:	ff 1f       	adc	r31, r31
    52f2:	ee 0f       	add	r30, r30
    52f4:	ff 1f       	adc	r31, r31
    52f6:	e4 5e       	subi	r30, 0xE4	; 228
    52f8:	fa 4d       	sbci	r31, 0xDA	; 218
    52fa:	42 89       	ldd	r20, Z+18	; 0x12
    52fc:	53 89       	ldd	r21, Z+19	; 0x13
    52fe:	a4 16       	cp	r10, r20
    5300:	b5 06       	cpc	r11, r21
    5302:	09 f0       	breq	.+2      	; 0x5306 <udd_ep_trans_complet+0x1f8>
    5304:	69 c0       	rjmp	.+210    	; 0x53d8 <udd_ep_trans_complet+0x2ca>
    5306:	28 17       	cp	r18, r24
    5308:	39 07       	cpc	r19, r25
    530a:	09 f4       	brne	.+2      	; 0x530e <udd_ep_trans_complet+0x200>
    530c:	65 c0       	rjmp	.+202    	; 0x53d8 <udd_ep_trans_complet+0x2ca>
    530e:	ac 01       	movw	r20, r24
    5310:	42 1b       	sub	r20, r18
    5312:	53 0b       	sbc	r21, r19
    5314:	9a 01       	movw	r18, r20
    5316:	21 15       	cp	r18, r1
    5318:	54 e0       	ldi	r21, 0x04	; 4
    531a:	35 07       	cpc	r19, r21
    531c:	48 f0       	brcs	.+18     	; 0x5330 <udd_ep_trans_complet+0x222>
    531e:	2f ef       	ldi	r18, 0xFF	; 255
    5320:	33 e0       	ldi	r19, 0x03	; 3
    5322:	c9 01       	movw	r24, r18
    5324:	b4 01       	movw	r22, r8
    5326:	0e 94 51 40 	call	0x80a2	; 0x80a2 <__udivmodhi4>
    532a:	28 1b       	sub	r18, r24
    532c:	39 0b       	sbc	r19, r25
    532e:	06 c0       	rjmp	.+12     	; 0x533c <udd_ep_trans_complet+0x22e>
    5330:	c9 01       	movw	r24, r18
    5332:	b4 01       	movw	r22, r8
    5334:	0e 94 51 40 	call	0x80a2	; 0x80a2 <__udivmodhi4>
    5338:	28 1b       	sub	r18, r24
    533a:	39 0b       	sbc	r19, r25
    533c:	fe 01       	movw	r30, r28
    533e:	ee 0f       	add	r30, r30
    5340:	ff 1f       	adc	r31, r31
    5342:	ee 0f       	add	r30, r30
    5344:	ff 1f       	adc	r31, r31
    5346:	ee 0f       	add	r30, r30
    5348:	ff 1f       	adc	r31, r31
    534a:	e4 5e       	subi	r30, 0xE4	; 228
    534c:	fa 4d       	sbci	r31, 0xDA	; 218
    534e:	16 86       	std	Z+14, r1	; 0x0e
    5350:	17 86       	std	Z+15, r1	; 0x0f
    5352:	28 15       	cp	r18, r8
    5354:	39 05       	cpc	r19, r9
    5356:	00 f5       	brcc	.+64     	; 0x5398 <udd_ep_trans_complet+0x28a>
    5358:	d8 01       	movw	r26, r16
    535a:	8c 91       	ld	r24, X
    535c:	84 60       	ori	r24, 0x04	; 4
    535e:	8c 93       	st	X, r24
    5360:	b0 e4       	ldi	r27, 0x40	; 64
    5362:	db 9e       	mul	r13, r27
    5364:	c0 01       	movw	r24, r0
    5366:	11 24       	eor	r1, r1
    5368:	80 51       	subi	r24, 0x10	; 16
    536a:	9c 4d       	sbci	r25, 0xDC	; 220
    536c:	fe 01       	movw	r30, r28
    536e:	ee 0f       	add	r30, r30
    5370:	ff 1f       	adc	r31, r31
    5372:	ee 0f       	add	r30, r30
    5374:	ff 1f       	adc	r31, r31
    5376:	ee 0f       	add	r30, r30
    5378:	ff 1f       	adc	r31, r31
    537a:	e4 5d       	subi	r30, 0xD4	; 212
    537c:	fa 4d       	sbci	r31, 0xDA	; 218
    537e:	80 83       	st	Z, r24
    5380:	91 83       	std	Z+1, r25	; 0x01
    5382:	cc 0f       	add	r28, r28
    5384:	dd 1f       	adc	r29, r29
    5386:	cc 0f       	add	r28, r28
    5388:	dd 1f       	adc	r29, r29
    538a:	cc 0f       	add	r28, r28
    538c:	dd 1f       	adc	r29, r29
    538e:	c4 5e       	subi	r28, 0xE4	; 228
    5390:	da 4d       	sbci	r29, 0xDA	; 218
    5392:	8a 8a       	std	Y+18, r8	; 0x12
    5394:	9b 8a       	std	Y+19, r9	; 0x13
    5396:	1c c0       	rjmp	.+56     	; 0x53d0 <udd_ep_trans_complet+0x2c2>
    5398:	f8 01       	movw	r30, r16
    539a:	41 81       	ldd	r20, Z+1	; 0x01
    539c:	52 81       	ldd	r21, Z+2	; 0x02
    539e:	85 81       	ldd	r24, Z+5	; 0x05
    53a0:	96 81       	ldd	r25, Z+6	; 0x06
    53a2:	84 0f       	add	r24, r20
    53a4:	95 1f       	adc	r25, r21
    53a6:	fe 01       	movw	r30, r28
    53a8:	ee 0f       	add	r30, r30
    53aa:	ff 1f       	adc	r31, r31
    53ac:	ee 0f       	add	r30, r30
    53ae:	ff 1f       	adc	r31, r31
    53b0:	ee 0f       	add	r30, r30
    53b2:	ff 1f       	adc	r31, r31
    53b4:	e4 5d       	subi	r30, 0xD4	; 212
    53b6:	fa 4d       	sbci	r31, 0xDA	; 218
    53b8:	80 83       	st	Z, r24
    53ba:	91 83       	std	Z+1, r25	; 0x01
    53bc:	cc 0f       	add	r28, r28
    53be:	dd 1f       	adc	r29, r29
    53c0:	cc 0f       	add	r28, r28
    53c2:	dd 1f       	adc	r29, r29
    53c4:	cc 0f       	add	r28, r28
    53c6:	dd 1f       	adc	r29, r29
    53c8:	c4 5e       	subi	r28, 0xE4	; 228
    53ca:	da 4d       	sbci	r29, 0xDA	; 218
    53cc:	2a 8b       	std	Y+18, r18	; 0x12
    53ce:	3b 8b       	std	Y+19, r19	; 0x13
    53d0:	f7 01       	movw	r30, r14
    53d2:	02 e0       	ldi	r16, 0x02	; 2
    53d4:	06 93       	lac	Z, r16
    53d6:	13 c0       	rjmp	.+38     	; 0x53fe <udd_ep_trans_complet+0x2f0>
    53d8:	d8 01       	movw	r26, r16
    53da:	8c 91       	ld	r24, X
    53dc:	80 ff       	sbrs	r24, 0
    53de:	0f c0       	rjmp	.+30     	; 0x53fe <udd_ep_trans_complet+0x2f0>
    53e0:	8e 7f       	andi	r24, 0xFE	; 254
    53e2:	8c 93       	st	X, r24
    53e4:	17 96       	adiw	r26, 0x07	; 7
    53e6:	ed 91       	ld	r30, X+
    53e8:	fc 91       	ld	r31, X
    53ea:	18 97       	sbiw	r26, 0x08	; 8
    53ec:	30 97       	sbiw	r30, 0x00	; 0
    53ee:	39 f0       	breq	.+14     	; 0x53fe <udd_ep_trans_complet+0x2f0>
    53f0:	15 96       	adiw	r26, 0x05	; 5
    53f2:	6d 91       	ld	r22, X+
    53f4:	7c 91       	ld	r23, X
    53f6:	16 97       	sbiw	r26, 0x06	; 6
    53f8:	4d 2d       	mov	r20, r13
    53fa:	80 e0       	ldi	r24, 0x00	; 0
    53fc:	19 95       	eicall
    53fe:	df 91       	pop	r29
    5400:	cf 91       	pop	r28
    5402:	1f 91       	pop	r17
    5404:	0f 91       	pop	r16
    5406:	ff 90       	pop	r15
    5408:	ef 90       	pop	r14
    540a:	df 90       	pop	r13
    540c:	bf 90       	pop	r11
    540e:	af 90       	pop	r10
    5410:	9f 90       	pop	r9
    5412:	8f 90       	pop	r8
    5414:	08 95       	ret

00005416 <udd_attach>:
    5416:	1f 93       	push	r17
    5418:	cf 93       	push	r28
    541a:	df 93       	push	r29
    541c:	1f 92       	push	r1
    541e:	cd b7       	in	r28, 0x3d	; 61
    5420:	de b7       	in	r29, 0x3e	; 62
    5422:	8f b7       	in	r24, 0x3f	; 63
    5424:	89 83       	std	Y+1, r24	; 0x01
    5426:	f8 94       	cli
    5428:	19 81       	ldd	r17, Y+1	; 0x01
    542a:	81 e0       	ldi	r24, 0x01	; 1
    542c:	cd dc       	rcall	.-1638   	; 0x4dc8 <udd_sleep_mode>
    542e:	ea ec       	ldi	r30, 0xCA	; 202
    5430:	f4 e0       	ldi	r31, 0x04	; 4
    5432:	80 e4       	ldi	r24, 0x40	; 64
    5434:	80 83       	st	Z, r24
    5436:	80 e2       	ldi	r24, 0x20	; 32
    5438:	80 83       	st	Z, r24
    543a:	e1 ec       	ldi	r30, 0xC1	; 193
    543c:	f4 e0       	ldi	r31, 0x04	; 4
    543e:	80 81       	ld	r24, Z
    5440:	81 60       	ori	r24, 0x01	; 1
    5442:	80 83       	st	Z, r24
    5444:	a9 ec       	ldi	r26, 0xC9	; 201
    5446:	b4 e0       	ldi	r27, 0x04	; 4
    5448:	8c 91       	ld	r24, X
    544a:	82 60       	ori	r24, 0x02	; 2
    544c:	8c 93       	st	X, r24
    544e:	e8 ec       	ldi	r30, 0xC8	; 200
    5450:	f4 e0       	ldi	r31, 0x04	; 4
    5452:	80 81       	ld	r24, Z
    5454:	80 64       	ori	r24, 0x40	; 64
    5456:	80 83       	st	Z, r24
    5458:	8c 91       	ld	r24, X
    545a:	81 60       	ori	r24, 0x01	; 1
    545c:	8c 93       	st	X, r24
    545e:	80 81       	ld	r24, Z
    5460:	80 68       	ori	r24, 0x80	; 128
    5462:	80 83       	st	Z, r24
    5464:	1f bf       	out	0x3f, r17	; 63
    5466:	0f 90       	pop	r0
    5468:	df 91       	pop	r29
    546a:	cf 91       	pop	r28
    546c:	1f 91       	pop	r17
    546e:	08 95       	ret

00005470 <udd_enable>:
    5470:	0f 93       	push	r16
    5472:	1f 93       	push	r17
    5474:	cf 93       	push	r28
    5476:	df 93       	push	r29
    5478:	1f 92       	push	r1
    547a:	1f 92       	push	r1
    547c:	cd b7       	in	r28, 0x3d	; 61
    547e:	de b7       	in	r29, 0x3e	; 62
    5480:	00 e6       	ldi	r16, 0x60	; 96
    5482:	10 e0       	ldi	r17, 0x00	; 0
    5484:	f8 01       	movw	r30, r16
    5486:	10 82       	st	Z, r1
    5488:	80 e3       	ldi	r24, 0x30	; 48
    548a:	0e 94 55 38 	call	0x70aa	; 0x70aa <sysclk_enable_usb>
    548e:	e0 ec       	ldi	r30, 0xC0	; 192
    5490:	f4 e0       	ldi	r31, 0x04	; 4
    5492:	80 81       	ld	r24, Z
    5494:	80 64       	ori	r24, 0x40	; 64
    5496:	80 83       	st	Z, r24
    5498:	81 e0       	ldi	r24, 0x01	; 1
    549a:	f8 01       	movw	r30, r16
    549c:	80 83       	st	Z, r24
    549e:	8f b7       	in	r24, 0x3f	; 63
    54a0:	8a 83       	std	Y+2, r24	; 0x02
    54a2:	f8 94       	cli
    54a4:	1a 81       	ldd	r17, Y+2	; 0x02
    54a6:	ec e1       	ldi	r30, 0x1C	; 28
    54a8:	f5 e2       	ldi	r31, 0x25	; 37
    54aa:	15 86       	std	Z+13, r1	; 0x0d
    54ac:	15 8a       	std	Z+21, r1	; 0x15
    54ae:	15 8e       	std	Z+29, r1	; 0x1d
    54b0:	15 a2       	std	Z+37, r1	; 0x25
    54b2:	15 a6       	std	Z+45, r1	; 0x2d
    54b4:	15 aa       	std	Z+53, r1	; 0x35
    54b6:	e0 eb       	ldi	r30, 0xB0	; 176
    54b8:	f4 e2       	ldi	r31, 0x24	; 36
    54ba:	80 81       	ld	r24, Z
    54bc:	8e 7f       	andi	r24, 0xFE	; 254
    54be:	80 83       	st	Z, r24
    54c0:	e9 eb       	ldi	r30, 0xB9	; 185
    54c2:	f4 e2       	ldi	r31, 0x24	; 36
    54c4:	80 81       	ld	r24, Z
    54c6:	8e 7f       	andi	r24, 0xFE	; 254
    54c8:	80 83       	st	Z, r24
    54ca:	e2 ec       	ldi	r30, 0xC2	; 194
    54cc:	f4 e2       	ldi	r31, 0x24	; 36
    54ce:	80 81       	ld	r24, Z
    54d0:	8e 7f       	andi	r24, 0xFE	; 254
    54d2:	80 83       	st	Z, r24
    54d4:	eb ec       	ldi	r30, 0xCB	; 203
    54d6:	f4 e2       	ldi	r31, 0x24	; 36
    54d8:	80 81       	ld	r24, Z
    54da:	8e 7f       	andi	r24, 0xFE	; 254
    54dc:	80 83       	st	Z, r24
    54de:	6a e1       	ldi	r22, 0x1A	; 26
    54e0:	70 e0       	ldi	r23, 0x00	; 0
    54e2:	82 e0       	ldi	r24, 0x02	; 2
    54e4:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
    54e8:	8f 3f       	cpi	r24, 0xFF	; 255
    54ea:	19 f0       	breq	.+6      	; 0x54f2 <udd_enable+0x82>
    54ec:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    54f0:	03 c0       	rjmp	.+6      	; 0x54f8 <udd_enable+0x88>
    54f2:	8f e1       	ldi	r24, 0x1F	; 31
    54f4:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    54f8:	6b e1       	ldi	r22, 0x1B	; 27
    54fa:	70 e0       	ldi	r23, 0x00	; 0
    54fc:	82 e0       	ldi	r24, 0x02	; 2
    54fe:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
    5502:	8f 3f       	cpi	r24, 0xFF	; 255
    5504:	19 f0       	breq	.+6      	; 0x550c <udd_enable+0x9c>
    5506:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    550a:	03 c0       	rjmp	.+6      	; 0x5512 <udd_enable+0xa2>
    550c:	8f e1       	ldi	r24, 0x1F	; 31
    550e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    5512:	e0 ec       	ldi	r30, 0xC0	; 192
    5514:	f4 e0       	ldi	r31, 0x04	; 4
    5516:	80 81       	ld	r24, Z
    5518:	82 60       	ori	r24, 0x02	; 2
    551a:	80 83       	st	Z, r24
    551c:	80 81       	ld	r24, Z
    551e:	80 68       	ori	r24, 0x80	; 128
    5520:	80 83       	st	Z, r24
    5522:	80 81       	ld	r24, Z
    5524:	80 61       	ori	r24, 0x10	; 16
    5526:	80 83       	st	Z, r24
    5528:	88 e2       	ldi	r24, 0x28	; 40
    552a:	95 e2       	ldi	r25, 0x25	; 37
    552c:	86 83       	std	Z+6, r24	; 0x06
    552e:	97 83       	std	Z+7, r25	; 0x07
    5530:	80 81       	ld	r24, Z
    5532:	80 62       	ori	r24, 0x20	; 32
    5534:	80 83       	st	Z, r24
    5536:	8f ef       	ldi	r24, 0xFF	; 255
    5538:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    553c:	e8 ec       	ldi	r30, 0xC8	; 200
    553e:	f4 e0       	ldi	r31, 0x04	; 4
    5540:	80 81       	ld	r24, Z
    5542:	81 60       	ori	r24, 0x01	; 1
    5544:	80 83       	st	Z, r24
    5546:	10 92 5c 25 	sts	0x255C, r1	; 0x80255c <udd_b_idle>
    554a:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <sleepmgr_locks+0x5>
    554e:	8f 3f       	cpi	r24, 0xFF	; 255
    5550:	09 f4       	brne	.+2      	; 0x5554 <udd_enable+0xe4>
    5552:	ff cf       	rjmp	.-2      	; 0x5552 <udd_enable+0xe2>
    5554:	8f b7       	in	r24, 0x3f	; 63
    5556:	89 83       	std	Y+1, r24	; 0x01
    5558:	f8 94       	cli
    555a:	99 81       	ldd	r25, Y+1	; 0x01
    555c:	ef e8       	ldi	r30, 0x8F	; 143
    555e:	f8 e2       	ldi	r31, 0x28	; 40
    5560:	85 81       	ldd	r24, Z+5	; 0x05
    5562:	8f 5f       	subi	r24, 0xFF	; 255
    5564:	85 83       	std	Z+5, r24	; 0x05
    5566:	9f bf       	out	0x3f, r25	; 63
    5568:	56 df       	rcall	.-340    	; 0x5416 <udd_attach>
    556a:	1f bf       	out	0x3f, r17	; 63
    556c:	0f 90       	pop	r0
    556e:	0f 90       	pop	r0
    5570:	df 91       	pop	r29
    5572:	cf 91       	pop	r28
    5574:	1f 91       	pop	r17
    5576:	0f 91       	pop	r16
    5578:	08 95       	ret

0000557a <udd_is_high_speed>:
    557a:	80 e0       	ldi	r24, 0x00	; 0
    557c:	08 95       	ret

0000557e <udd_set_address>:
    557e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    5582:	08 95       	ret

00005584 <udd_getaddress>:
    5584:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    5588:	08 95       	ret

0000558a <udd_get_frame_number>:
    558a:	80 91 58 25 	lds	r24, 0x2558	; 0x802558 <udd_sram+0x3c>
    558e:	90 91 59 25 	lds	r25, 0x2559	; 0x802559 <udd_sram+0x3d>
    5592:	08 95       	ret

00005594 <udd_get_micro_frame_number>:
    5594:	80 e0       	ldi	r24, 0x00	; 0
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	08 95       	ret

0000559a <udd_set_setup_payload>:
    559a:	ef e7       	ldi	r30, 0x7F	; 127
    559c:	f8 e2       	ldi	r31, 0x28	; 40
    559e:	80 87       	std	Z+8, r24	; 0x08
    55a0:	91 87       	std	Z+9, r25	; 0x09
    55a2:	62 87       	std	Z+10, r22	; 0x0a
    55a4:	73 87       	std	Z+11, r23	; 0x0b
    55a6:	08 95       	ret

000055a8 <udd_ep_alloc>:
    55a8:	28 2f       	mov	r18, r24
    55aa:	2f 70       	andi	r18, 0x0F	; 15
    55ac:	30 e0       	ldi	r19, 0x00	; 0
    55ae:	22 0f       	add	r18, r18
    55b0:	33 1f       	adc	r19, r19
    55b2:	08 2e       	mov	r0, r24
    55b4:	00 0c       	add	r0, r0
    55b6:	99 0b       	sbc	r25, r25
    55b8:	88 27       	eor	r24, r24
    55ba:	99 0f       	add	r25, r25
    55bc:	88 1f       	adc	r24, r24
    55be:	99 27       	eor	r25, r25
    55c0:	82 0f       	add	r24, r18
    55c2:	93 1f       	adc	r25, r19
    55c4:	fc 01       	movw	r30, r24
    55c6:	ee 0f       	add	r30, r30
    55c8:	ff 1f       	adc	r31, r31
    55ca:	ee 0f       	add	r30, r30
    55cc:	ff 1f       	adc	r31, r31
    55ce:	ee 0f       	add	r30, r30
    55d0:	ff 1f       	adc	r31, r31
    55d2:	e4 5e       	subi	r30, 0xE4	; 228
    55d4:	fa 4d       	sbci	r31, 0xDA	; 218
    55d6:	25 85       	ldd	r18, Z+13	; 0x0d
    55d8:	20 7c       	andi	r18, 0xC0	; 192
    55da:	09 f0       	breq	.+2      	; 0x55de <udd_ep_alloc+0x36>
    55dc:	69 c0       	rjmp	.+210    	; 0x56b0 <udd_ep_alloc+0x108>
    55de:	63 70       	andi	r22, 0x03	; 3
    55e0:	61 30       	cpi	r22, 0x01	; 1
    55e2:	11 f0       	breq	.+4      	; 0x55e8 <udd_ep_alloc+0x40>
    55e4:	18 f4       	brcc	.+6      	; 0x55ec <udd_ep_alloc+0x44>
    55e6:	04 c0       	rjmp	.+8      	; 0x55f0 <udd_ep_alloc+0x48>
    55e8:	60 ec       	ldi	r22, 0xC0	; 192
    55ea:	03 c0       	rjmp	.+6      	; 0x55f2 <udd_ep_alloc+0x4a>
    55ec:	60 e8       	ldi	r22, 0x80	; 128
    55ee:	01 c0       	rjmp	.+2      	; 0x55f2 <udd_ep_alloc+0x4a>
    55f0:	60 e4       	ldi	r22, 0x40	; 64
    55f2:	40 38       	cpi	r20, 0x80	; 128
    55f4:	51 05       	cpc	r21, r1
    55f6:	e9 f0       	breq	.+58     	; 0x5632 <udd_ep_alloc+0x8a>
    55f8:	50 f4       	brcc	.+20     	; 0x560e <udd_ep_alloc+0x66>
    55fa:	40 32       	cpi	r20, 0x20	; 32
    55fc:	51 05       	cpc	r21, r1
    55fe:	a9 f0       	breq	.+42     	; 0x562a <udd_ep_alloc+0x82>
    5600:	40 34       	cpi	r20, 0x40	; 64
    5602:	51 05       	cpc	r21, r1
    5604:	a1 f0       	breq	.+40     	; 0x562e <udd_ep_alloc+0x86>
    5606:	40 31       	cpi	r20, 0x10	; 16
    5608:	51 05       	cpc	r21, r1
    560a:	d9 f4       	brne	.+54     	; 0x5642 <udd_ep_alloc+0x9a>
    560c:	0c c0       	rjmp	.+24     	; 0x5626 <udd_ep_alloc+0x7e>
    560e:	41 15       	cp	r20, r1
    5610:	22 e0       	ldi	r18, 0x02	; 2
    5612:	52 07       	cpc	r21, r18
    5614:	91 f0       	breq	.+36     	; 0x563a <udd_ep_alloc+0x92>
    5616:	4f 3f       	cpi	r20, 0xFF	; 255
    5618:	23 e0       	ldi	r18, 0x03	; 3
    561a:	52 07       	cpc	r21, r18
    561c:	81 f0       	breq	.+32     	; 0x563e <udd_ep_alloc+0x96>
    561e:	41 15       	cp	r20, r1
    5620:	51 40       	sbci	r21, 0x01	; 1
    5622:	79 f4       	brne	.+30     	; 0x5642 <udd_ep_alloc+0x9a>
    5624:	08 c0       	rjmp	.+16     	; 0x5636 <udd_ep_alloc+0x8e>
    5626:	21 e0       	ldi	r18, 0x01	; 1
    5628:	0d c0       	rjmp	.+26     	; 0x5644 <udd_ep_alloc+0x9c>
    562a:	22 e0       	ldi	r18, 0x02	; 2
    562c:	0b c0       	rjmp	.+22     	; 0x5644 <udd_ep_alloc+0x9c>
    562e:	23 e0       	ldi	r18, 0x03	; 3
    5630:	09 c0       	rjmp	.+18     	; 0x5644 <udd_ep_alloc+0x9c>
    5632:	24 e0       	ldi	r18, 0x04	; 4
    5634:	07 c0       	rjmp	.+14     	; 0x5644 <udd_ep_alloc+0x9c>
    5636:	25 e0       	ldi	r18, 0x05	; 5
    5638:	05 c0       	rjmp	.+10     	; 0x5644 <udd_ep_alloc+0x9c>
    563a:	26 e0       	ldi	r18, 0x06	; 6
    563c:	03 c0       	rjmp	.+6      	; 0x5644 <udd_ep_alloc+0x9c>
    563e:	27 e0       	ldi	r18, 0x07	; 7
    5640:	01 c0       	rjmp	.+2      	; 0x5644 <udd_ep_alloc+0x9c>
    5642:	20 e0       	ldi	r18, 0x00	; 0
    5644:	fc 01       	movw	r30, r24
    5646:	ee 0f       	add	r30, r30
    5648:	ff 1f       	adc	r31, r31
    564a:	ee 0f       	add	r30, r30
    564c:	ff 1f       	adc	r31, r31
    564e:	ee 0f       	add	r30, r30
    5650:	ff 1f       	adc	r31, r31
    5652:	e4 5e       	subi	r30, 0xE4	; 228
    5654:	fa 4d       	sbci	r31, 0xDA	; 218
    5656:	15 86       	std	Z+13, r1	; 0x0d
    5658:	36 e0       	ldi	r19, 0x06	; 6
    565a:	34 87       	std	Z+12, r19	; 0x0c
    565c:	26 2b       	or	r18, r22
    565e:	25 87       	std	Z+13, r18	; 0x0d
    5660:	fc 01       	movw	r30, r24
    5662:	ee 0f       	add	r30, r30
    5664:	ff 1f       	adc	r31, r31
    5666:	ee 0f       	add	r30, r30
    5668:	ff 1f       	adc	r31, r31
    566a:	ee 0f       	add	r30, r30
    566c:	ff 1f       	adc	r31, r31
    566e:	e4 5e       	subi	r30, 0xE4	; 228
    5670:	fa 4d       	sbci	r31, 0xDA	; 218
    5672:	25 85       	ldd	r18, Z+13	; 0x0d
    5674:	20 7c       	andi	r18, 0xC0	; 192
    5676:	20 3c       	cpi	r18, 0xC0	; 192
    5678:	69 f4       	brne	.+26     	; 0x5694 <udd_ep_alloc+0xec>
    567a:	fc 01       	movw	r30, r24
    567c:	ee 0f       	add	r30, r30
    567e:	ff 1f       	adc	r31, r31
    5680:	ee 0f       	add	r30, r30
    5682:	ff 1f       	adc	r31, r31
    5684:	ee 0f       	add	r30, r30
    5686:	ff 1f       	adc	r31, r31
    5688:	e4 5e       	subi	r30, 0xE4	; 228
    568a:	fa 4d       	sbci	r31, 0xDA	; 218
    568c:	25 85       	ldd	r18, Z+13	; 0x0d
    568e:	27 70       	andi	r18, 0x07	; 7
    5690:	27 30       	cpi	r18, 0x07	; 7
    5692:	81 f0       	breq	.+32     	; 0x56b4 <udd_ep_alloc+0x10c>
    5694:	88 0f       	add	r24, r24
    5696:	99 1f       	adc	r25, r25
    5698:	88 0f       	add	r24, r24
    569a:	99 1f       	adc	r25, r25
    569c:	88 0f       	add	r24, r24
    569e:	99 1f       	adc	r25, r25
    56a0:	fc 01       	movw	r30, r24
    56a2:	e4 5e       	subi	r30, 0xE4	; 228
    56a4:	fa 4d       	sbci	r31, 0xDA	; 218
    56a6:	85 85       	ldd	r24, Z+13	; 0x0d
    56a8:	80 62       	ori	r24, 0x20	; 32
    56aa:	85 87       	std	Z+13, r24	; 0x0d
    56ac:	81 e0       	ldi	r24, 0x01	; 1
    56ae:	08 95       	ret
    56b0:	80 e0       	ldi	r24, 0x00	; 0
    56b2:	08 95       	ret
    56b4:	81 e0       	ldi	r24, 0x01	; 1
    56b6:	08 95       	ret

000056b8 <udd_ep_is_halted>:
    56b8:	e8 2f       	mov	r30, r24
    56ba:	ef 70       	andi	r30, 0x0F	; 15
    56bc:	f0 e0       	ldi	r31, 0x00	; 0
    56be:	ee 0f       	add	r30, r30
    56c0:	ff 1f       	adc	r31, r31
    56c2:	08 2e       	mov	r0, r24
    56c4:	00 0c       	add	r0, r0
    56c6:	99 0b       	sbc	r25, r25
    56c8:	88 27       	eor	r24, r24
    56ca:	99 0f       	add	r25, r25
    56cc:	88 1f       	adc	r24, r24
    56ce:	99 27       	eor	r25, r25
    56d0:	e8 0f       	add	r30, r24
    56d2:	f9 1f       	adc	r31, r25
    56d4:	ee 0f       	add	r30, r30
    56d6:	ff 1f       	adc	r31, r31
    56d8:	ee 0f       	add	r30, r30
    56da:	ff 1f       	adc	r31, r31
    56dc:	ee 0f       	add	r30, r30
    56de:	ff 1f       	adc	r31, r31
    56e0:	e4 5e       	subi	r30, 0xE4	; 228
    56e2:	fa 4d       	sbci	r31, 0xDA	; 218
    56e4:	85 85       	ldd	r24, Z+13	; 0x0d
    56e6:	82 fb       	bst	r24, 2
    56e8:	88 27       	eor	r24, r24
    56ea:	80 f9       	bld	r24, 0
    56ec:	08 95       	ret

000056ee <udd_ep_clear_halt>:
    56ee:	0f 93       	push	r16
    56f0:	28 2f       	mov	r18, r24
    56f2:	2f 70       	andi	r18, 0x0F	; 15
    56f4:	30 e0       	ldi	r19, 0x00	; 0
    56f6:	a9 01       	movw	r20, r18
    56f8:	44 0f       	add	r20, r20
    56fa:	55 1f       	adc	r21, r21
    56fc:	28 2f       	mov	r18, r24
    56fe:	08 2e       	mov	r0, r24
    5700:	00 0c       	add	r0, r0
    5702:	33 0b       	sbc	r19, r19
    5704:	22 27       	eor	r18, r18
    5706:	33 0f       	add	r19, r19
    5708:	22 1f       	adc	r18, r18
    570a:	33 27       	eor	r19, r19
    570c:	24 0f       	add	r18, r20
    570e:	35 1f       	adc	r19, r21
    5710:	a9 01       	movw	r20, r18
    5712:	44 0f       	add	r20, r20
    5714:	55 1f       	adc	r21, r21
    5716:	44 0f       	add	r20, r20
    5718:	55 1f       	adc	r21, r21
    571a:	44 0f       	add	r20, r20
    571c:	55 1f       	adc	r21, r21
    571e:	fa 01       	movw	r30, r20
    5720:	e8 5d       	subi	r30, 0xD8	; 216
    5722:	fa 4d       	sbci	r31, 0xDA	; 218
    5724:	01 e0       	ldi	r16, 0x01	; 1
    5726:	06 93       	lac	Z, r16
    5728:	fa 01       	movw	r30, r20
    572a:	e4 5e       	subi	r30, 0xE4	; 228
    572c:	fa 4d       	sbci	r31, 0xDA	; 218
    572e:	95 85       	ldd	r25, Z+13	; 0x0d
    5730:	92 ff       	sbrs	r25, 2
    5732:	11 c0       	rjmp	.+34     	; 0x5756 <udd_ep_clear_halt+0x68>
    5734:	fa 01       	movw	r30, r20
    5736:	e4 5e       	subi	r30, 0xE4	; 228
    5738:	fa 4d       	sbci	r31, 0xDA	; 218
    573a:	95 85       	ldd	r25, Z+13	; 0x0d
    573c:	9b 7f       	andi	r25, 0xFB	; 251
    573e:	95 87       	std	Z+13, r25	; 0x0d
    5740:	59 dc       	rcall	.-1870   	; 0x4ff4 <udd_ep_get_job>
    5742:	fc 01       	movw	r30, r24
    5744:	80 81       	ld	r24, Z
    5746:	80 ff       	sbrs	r24, 0
    5748:	06 c0       	rjmp	.+12     	; 0x5756 <udd_ep_clear_halt+0x68>
    574a:	8e 7f       	andi	r24, 0xFE	; 254
    574c:	80 83       	st	Z, r24
    574e:	07 80       	ldd	r0, Z+7	; 0x07
    5750:	f0 85       	ldd	r31, Z+8	; 0x08
    5752:	e0 2d       	mov	r30, r0
    5754:	19 95       	eicall
    5756:	81 e0       	ldi	r24, 0x01	; 1
    5758:	0f 91       	pop	r16
    575a:	08 95       	ret

0000575c <udd_ep_run>:
    575c:	6f 92       	push	r6
    575e:	7f 92       	push	r7
    5760:	8f 92       	push	r8
    5762:	9f 92       	push	r9
    5764:	af 92       	push	r10
    5766:	bf 92       	push	r11
    5768:	cf 92       	push	r12
    576a:	df 92       	push	r13
    576c:	ef 92       	push	r14
    576e:	ff 92       	push	r15
    5770:	0f 93       	push	r16
    5772:	1f 93       	push	r17
    5774:	cf 93       	push	r28
    5776:	df 93       	push	r29
    5778:	1f 92       	push	r1
    577a:	cd b7       	in	r28, 0x3d	; 61
    577c:	de b7       	in	r29, 0x3e	; 62
    577e:	78 2e       	mov	r7, r24
    5780:	66 2e       	mov	r6, r22
    5782:	4a 01       	movw	r8, r20
    5784:	59 01       	movw	r10, r18
    5786:	36 dc       	rcall	.-1940   	; 0x4ff4 <udd_ep_get_job>
    5788:	6c 01       	movw	r12, r24
    578a:	27 2d       	mov	r18, r7
    578c:	87 2d       	mov	r24, r7
    578e:	8f 70       	andi	r24, 0x0F	; 15
    5790:	e8 2e       	mov	r14, r24
    5792:	f1 2c       	mov	r15, r1
    5794:	c7 01       	movw	r24, r14
    5796:	88 0f       	add	r24, r24
    5798:	99 1f       	adc	r25, r25
    579a:	e7 2c       	mov	r14, r7
    579c:	07 2c       	mov	r0, r7
    579e:	00 0c       	add	r0, r0
    57a0:	ff 08       	sbc	r15, r15
    57a2:	ee 24       	eor	r14, r14
    57a4:	ff 0c       	add	r15, r15
    57a6:	ee 1c       	adc	r14, r14
    57a8:	ff 24       	eor	r15, r15
    57aa:	e8 0e       	add	r14, r24
    57ac:	f9 1e       	adc	r15, r25
    57ae:	f7 01       	movw	r30, r14
    57b0:	ee 0f       	add	r30, r30
    57b2:	ff 1f       	adc	r31, r31
    57b4:	ee 0f       	add	r30, r30
    57b6:	ff 1f       	adc	r31, r31
    57b8:	ee 0f       	add	r30, r30
    57ba:	ff 1f       	adc	r31, r31
    57bc:	e4 5e       	subi	r30, 0xE4	; 228
    57be:	fa 4d       	sbci	r31, 0xDA	; 218
    57c0:	85 85       	ldd	r24, Z+13	; 0x0d
    57c2:	80 7c       	andi	r24, 0xC0	; 192
    57c4:	09 f4       	brne	.+2      	; 0x57c8 <udd_ep_run+0x6c>
    57c6:	82 c0       	rjmp	.+260    	; 0x58cc <udd_ep_run+0x170>
    57c8:	f7 01       	movw	r30, r14
    57ca:	ee 0f       	add	r30, r30
    57cc:	ff 1f       	adc	r31, r31
    57ce:	ee 0f       	add	r30, r30
    57d0:	ff 1f       	adc	r31, r31
    57d2:	ee 0f       	add	r30, r30
    57d4:	ff 1f       	adc	r31, r31
    57d6:	e4 5e       	subi	r30, 0xE4	; 228
    57d8:	fa 4d       	sbci	r31, 0xDA	; 218
    57da:	85 85       	ldd	r24, Z+13	; 0x0d
    57dc:	80 7c       	andi	r24, 0xC0	; 192
    57de:	80 3c       	cpi	r24, 0xC0	; 192
    57e0:	61 f0       	breq	.+24     	; 0x57fa <udd_ep_run+0x9e>
    57e2:	f7 01       	movw	r30, r14
    57e4:	ee 0f       	add	r30, r30
    57e6:	ff 1f       	adc	r31, r31
    57e8:	ee 0f       	add	r30, r30
    57ea:	ff 1f       	adc	r31, r31
    57ec:	ee 0f       	add	r30, r30
    57ee:	ff 1f       	adc	r31, r31
    57f0:	e4 5e       	subi	r30, 0xE4	; 228
    57f2:	fa 4d       	sbci	r31, 0xDA	; 218
    57f4:	85 85       	ldd	r24, Z+13	; 0x0d
    57f6:	82 fd       	sbrc	r24, 2
    57f8:	6b c0       	rjmp	.+214    	; 0x58d0 <udd_ep_run+0x174>
    57fa:	8f b7       	in	r24, 0x3f	; 63
    57fc:	89 83       	std	Y+1, r24	; 0x01
    57fe:	f8 94       	cli
    5800:	89 81       	ldd	r24, Y+1	; 0x01
    5802:	f6 01       	movw	r30, r12
    5804:	90 81       	ld	r25, Z
    5806:	90 ff       	sbrs	r25, 0
    5808:	03 c0       	rjmp	.+6      	; 0x5810 <udd_ep_run+0xb4>
    580a:	8f bf       	out	0x3f, r24	; 63
    580c:	80 e0       	ldi	r24, 0x00	; 0
    580e:	61 c0       	rjmp	.+194    	; 0x58d2 <udd_ep_run+0x176>
    5810:	f6 01       	movw	r30, r12
    5812:	90 81       	ld	r25, Z
    5814:	91 60       	ori	r25, 0x01	; 1
    5816:	90 83       	st	Z, r25
    5818:	8f bf       	out	0x3f, r24	; 63
    581a:	81 82       	std	Z+1, r8	; 0x01
    581c:	92 82       	std	Z+2, r9	; 0x02
    581e:	a3 82       	std	Z+3, r10	; 0x03
    5820:	b4 82       	std	Z+4, r11	; 0x04
    5822:	15 82       	std	Z+5, r1	; 0x05
    5824:	16 82       	std	Z+6, r1	; 0x06
    5826:	07 83       	std	Z+7, r16	; 0x07
    5828:	10 87       	std	Z+8, r17	; 0x08
    582a:	61 10       	cpse	r6, r1
    582c:	06 c0       	rjmp	.+12     	; 0x583a <udd_ep_run+0xde>
    582e:	91 e0       	ldi	r25, 0x01	; 1
    5830:	a1 14       	cp	r10, r1
    5832:	b1 04       	cpc	r11, r1
    5834:	19 f0       	breq	.+6      	; 0x583c <udd_ep_run+0xe0>
    5836:	90 e0       	ldi	r25, 0x00	; 0
    5838:	01 c0       	rjmp	.+2      	; 0x583c <udd_ep_run+0xe0>
    583a:	91 e0       	ldi	r25, 0x01	; 1
    583c:	f6 01       	movw	r30, r12
    583e:	80 81       	ld	r24, Z
    5840:	90 fb       	bst	r25, 0
    5842:	81 f9       	bld	r24, 1
    5844:	8b 7f       	andi	r24, 0xFB	; 251
    5846:	80 83       	st	Z, r24
    5848:	22 23       	and	r18, r18
    584a:	64 f4       	brge	.+24     	; 0x5864 <udd_ep_run+0x108>
    584c:	f7 01       	movw	r30, r14
    584e:	ee 0f       	add	r30, r30
    5850:	ff 1f       	adc	r31, r31
    5852:	ee 0f       	add	r30, r30
    5854:	ff 1f       	adc	r31, r31
    5856:	ee 0f       	add	r30, r30
    5858:	ff 1f       	adc	r31, r31
    585a:	e4 5e       	subi	r30, 0xE4	; 228
    585c:	fa 4d       	sbci	r31, 0xDA	; 218
    585e:	12 8a       	std	Z+18, r1	; 0x12
    5860:	13 8a       	std	Z+19, r1	; 0x13
    5862:	30 c0       	rjmp	.+96     	; 0x58c4 <udd_ep_run+0x168>
    5864:	f7 01       	movw	r30, r14
    5866:	ee 0f       	add	r30, r30
    5868:	ff 1f       	adc	r31, r31
    586a:	ee 0f       	add	r30, r30
    586c:	ff 1f       	adc	r31, r31
    586e:	ee 0f       	add	r30, r30
    5870:	ff 1f       	adc	r31, r31
    5872:	e4 5e       	subi	r30, 0xE4	; 228
    5874:	fa 4d       	sbci	r31, 0xDA	; 218
    5876:	85 85       	ldd	r24, Z+13	; 0x0d
    5878:	80 7c       	andi	r24, 0xC0	; 192
    587a:	80 3c       	cpi	r24, 0xC0	; 192
    587c:	b1 f4       	brne	.+44     	; 0x58aa <udd_ep_run+0x14e>
    587e:	c7 01       	movw	r24, r14
    5880:	88 0f       	add	r24, r24
    5882:	99 1f       	adc	r25, r25
    5884:	88 0f       	add	r24, r24
    5886:	99 1f       	adc	r25, r25
    5888:	88 0f       	add	r24, r24
    588a:	99 1f       	adc	r25, r25
    588c:	88 5d       	subi	r24, 0xD8	; 216
    588e:	9a 4d       	sbci	r25, 0xDA	; 218
    5890:	88 db       	rcall	.-2288   	; 0x4fa2 <udd_ep_get_size>
    5892:	bc 01       	movw	r22, r24
    5894:	c5 01       	movw	r24, r10
    5896:	0e 94 51 40 	call	0x80a2	; 0x80a2 <__udivmodhi4>
    589a:	89 2b       	or	r24, r25
    589c:	31 f0       	breq	.+12     	; 0x58aa <udd_ep_run+0x14e>
    589e:	f6 01       	movw	r30, r12
    58a0:	80 81       	ld	r24, Z
    58a2:	8e 7f       	andi	r24, 0xFE	; 254
    58a4:	80 83       	st	Z, r24
    58a6:	80 e0       	ldi	r24, 0x00	; 0
    58a8:	14 c0       	rjmp	.+40     	; 0x58d2 <udd_ep_run+0x176>
    58aa:	f7 01       	movw	r30, r14
    58ac:	ee 0f       	add	r30, r30
    58ae:	ff 1f       	adc	r31, r31
    58b0:	ee 0f       	add	r30, r30
    58b2:	ff 1f       	adc	r31, r31
    58b4:	ee 0f       	add	r30, r30
    58b6:	ff 1f       	adc	r31, r31
    58b8:	e4 5e       	subi	r30, 0xE4	; 228
    58ba:	fa 4d       	sbci	r31, 0xDA	; 218
    58bc:	16 86       	std	Z+14, r1	; 0x0e
    58be:	17 86       	std	Z+15, r1	; 0x0f
    58c0:	12 8a       	std	Z+18, r1	; 0x12
    58c2:	13 8a       	std	Z+19, r1	; 0x13
    58c4:	87 2d       	mov	r24, r7
    58c6:	23 dc       	rcall	.-1978   	; 0x510e <udd_ep_trans_complet>
    58c8:	81 e0       	ldi	r24, 0x01	; 1
    58ca:	03 c0       	rjmp	.+6      	; 0x58d2 <udd_ep_run+0x176>
    58cc:	80 e0       	ldi	r24, 0x00	; 0
    58ce:	01 c0       	rjmp	.+2      	; 0x58d2 <udd_ep_run+0x176>
    58d0:	80 e0       	ldi	r24, 0x00	; 0
    58d2:	0f 90       	pop	r0
    58d4:	df 91       	pop	r29
    58d6:	cf 91       	pop	r28
    58d8:	1f 91       	pop	r17
    58da:	0f 91       	pop	r16
    58dc:	ff 90       	pop	r15
    58de:	ef 90       	pop	r14
    58e0:	df 90       	pop	r13
    58e2:	cf 90       	pop	r12
    58e4:	bf 90       	pop	r11
    58e6:	af 90       	pop	r10
    58e8:	9f 90       	pop	r9
    58ea:	8f 90       	pop	r8
    58ec:	7f 90       	pop	r7
    58ee:	6f 90       	pop	r6
    58f0:	08 95       	ret

000058f2 <udd_ep_abort>:
    58f2:	ff 92       	push	r15
    58f4:	0f 93       	push	r16
    58f6:	1f 93       	push	r17
    58f8:	cf 93       	push	r28
    58fa:	df 93       	push	r29
    58fc:	18 2f       	mov	r17, r24
    58fe:	c8 2f       	mov	r28, r24
    5900:	cf 70       	andi	r28, 0x0F	; 15
    5902:	d0 e0       	ldi	r29, 0x00	; 0
    5904:	ce 01       	movw	r24, r28
    5906:	88 0f       	add	r24, r24
    5908:	99 1f       	adc	r25, r25
    590a:	c1 2f       	mov	r28, r17
    590c:	01 2e       	mov	r0, r17
    590e:	00 0c       	add	r0, r0
    5910:	dd 0b       	sbc	r29, r29
    5912:	cc 27       	eor	r28, r28
    5914:	dd 0f       	add	r29, r29
    5916:	cc 1f       	adc	r28, r28
    5918:	dd 27       	eor	r29, r29
    591a:	c8 0f       	add	r28, r24
    591c:	d9 1f       	adc	r29, r25
    591e:	81 2f       	mov	r24, r17
    5920:	69 db       	rcall	.-2350   	; 0x4ff4 <udd_ep_get_job>
    5922:	dc 01       	movw	r26, r24
    5924:	fe 01       	movw	r30, r28
    5926:	ee 0f       	add	r30, r30
    5928:	ff 1f       	adc	r31, r31
    592a:	ee 0f       	add	r30, r30
    592c:	ff 1f       	adc	r31, r31
    592e:	ee 0f       	add	r30, r30
    5930:	ff 1f       	adc	r31, r31
    5932:	e8 5d       	subi	r30, 0xD8	; 216
    5934:	fa 4d       	sbci	r31, 0xDA	; 218
    5936:	02 e0       	ldi	r16, 0x02	; 2
    5938:	05 93       	las	Z, r16
    593a:	8c 91       	ld	r24, X
    593c:	80 ff       	sbrs	r24, 0
    593e:	22 c0       	rjmp	.+68     	; 0x5984 <udd_ep_abort+0x92>
    5940:	8e 7f       	andi	r24, 0xFE	; 254
    5942:	8c 93       	st	X, r24
    5944:	17 96       	adiw	r26, 0x07	; 7
    5946:	ed 91       	ld	r30, X+
    5948:	fc 91       	ld	r31, X
    594a:	18 97       	sbiw	r26, 0x08	; 8
    594c:	30 97       	sbiw	r30, 0x00	; 0
    594e:	d1 f0       	breq	.+52     	; 0x5984 <udd_ep_abort+0x92>
    5950:	11 23       	and	r17, r17
    5952:	5c f4       	brge	.+22     	; 0x596a <udd_ep_abort+0x78>
    5954:	cc 0f       	add	r28, r28
    5956:	dd 1f       	adc	r29, r29
    5958:	cc 0f       	add	r28, r28
    595a:	dd 1f       	adc	r29, r29
    595c:	cc 0f       	add	r28, r28
    595e:	dd 1f       	adc	r29, r29
    5960:	c4 5e       	subi	r28, 0xE4	; 228
    5962:	da 4d       	sbci	r29, 0xDA	; 218
    5964:	6a 89       	ldd	r22, Y+18	; 0x12
    5966:	7b 89       	ldd	r23, Y+19	; 0x13
    5968:	0a c0       	rjmp	.+20     	; 0x597e <udd_ep_abort+0x8c>
    596a:	cc 0f       	add	r28, r28
    596c:	dd 1f       	adc	r29, r29
    596e:	cc 0f       	add	r28, r28
    5970:	dd 1f       	adc	r29, r29
    5972:	cc 0f       	add	r28, r28
    5974:	dd 1f       	adc	r29, r29
    5976:	c4 5e       	subi	r28, 0xE4	; 228
    5978:	da 4d       	sbci	r29, 0xDA	; 218
    597a:	6e 85       	ldd	r22, Y+14	; 0x0e
    597c:	7f 85       	ldd	r23, Y+15	; 0x0f
    597e:	41 2f       	mov	r20, r17
    5980:	81 e0       	ldi	r24, 0x01	; 1
    5982:	19 95       	eicall
    5984:	df 91       	pop	r29
    5986:	cf 91       	pop	r28
    5988:	1f 91       	pop	r17
    598a:	0f 91       	pop	r16
    598c:	ff 90       	pop	r15
    598e:	08 95       	ret

00005990 <udd_ep_free>:
    5990:	cf 93       	push	r28
    5992:	c8 2f       	mov	r28, r24
    5994:	ae df       	rcall	.-164    	; 0x58f2 <udd_ep_abort>
    5996:	ec 2f       	mov	r30, r28
    5998:	ef 70       	andi	r30, 0x0F	; 15
    599a:	f0 e0       	ldi	r31, 0x00	; 0
    599c:	ee 0f       	add	r30, r30
    599e:	ff 1f       	adc	r31, r31
    59a0:	8c 2f       	mov	r24, r28
    59a2:	cc 0f       	add	r28, r28
    59a4:	99 0b       	sbc	r25, r25
    59a6:	88 27       	eor	r24, r24
    59a8:	99 0f       	add	r25, r25
    59aa:	88 1f       	adc	r24, r24
    59ac:	99 27       	eor	r25, r25
    59ae:	e8 0f       	add	r30, r24
    59b0:	f9 1f       	adc	r31, r25
    59b2:	ee 0f       	add	r30, r30
    59b4:	ff 1f       	adc	r31, r31
    59b6:	ee 0f       	add	r30, r30
    59b8:	ff 1f       	adc	r31, r31
    59ba:	ee 0f       	add	r30, r30
    59bc:	ff 1f       	adc	r31, r31
    59be:	e4 5e       	subi	r30, 0xE4	; 228
    59c0:	fa 4d       	sbci	r31, 0xDA	; 218
    59c2:	15 86       	std	Z+13, r1	; 0x0d
    59c4:	cf 91       	pop	r28
    59c6:	08 95       	ret

000059c8 <udd_ep_set_halt>:
    59c8:	e8 2f       	mov	r30, r24
    59ca:	ef 70       	andi	r30, 0x0F	; 15
    59cc:	f0 e0       	ldi	r31, 0x00	; 0
    59ce:	ee 0f       	add	r30, r30
    59d0:	ff 1f       	adc	r31, r31
    59d2:	28 2f       	mov	r18, r24
    59d4:	08 2e       	mov	r0, r24
    59d6:	00 0c       	add	r0, r0
    59d8:	33 0b       	sbc	r19, r19
    59da:	22 27       	eor	r18, r18
    59dc:	33 0f       	add	r19, r19
    59de:	22 1f       	adc	r18, r18
    59e0:	33 27       	eor	r19, r19
    59e2:	e2 0f       	add	r30, r18
    59e4:	f3 1f       	adc	r31, r19
    59e6:	ee 0f       	add	r30, r30
    59e8:	ff 1f       	adc	r31, r31
    59ea:	ee 0f       	add	r30, r30
    59ec:	ff 1f       	adc	r31, r31
    59ee:	ee 0f       	add	r30, r30
    59f0:	ff 1f       	adc	r31, r31
    59f2:	e4 5e       	subi	r30, 0xE4	; 228
    59f4:	fa 4d       	sbci	r31, 0xDA	; 218
    59f6:	95 85       	ldd	r25, Z+13	; 0x0d
    59f8:	94 60       	ori	r25, 0x04	; 4
    59fa:	95 87       	std	Z+13, r25	; 0x0d
    59fc:	7a df       	rcall	.-268    	; 0x58f2 <udd_ep_abort>
    59fe:	81 e0       	ldi	r24, 0x01	; 1
    5a00:	08 95       	ret

00005a02 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    5a02:	1f 92       	push	r1
    5a04:	0f 92       	push	r0
    5a06:	0f b6       	in	r0, 0x3f	; 63
    5a08:	0f 92       	push	r0
    5a0a:	11 24       	eor	r1, r1
    5a0c:	0b b6       	in	r0, 0x3b	; 59
    5a0e:	0f 92       	push	r0
    5a10:	0f 93       	push	r16
    5a12:	2f 93       	push	r18
    5a14:	3f 93       	push	r19
    5a16:	4f 93       	push	r20
    5a18:	5f 93       	push	r21
    5a1a:	6f 93       	push	r22
    5a1c:	7f 93       	push	r23
    5a1e:	8f 93       	push	r24
    5a20:	9f 93       	push	r25
    5a22:	af 93       	push	r26
    5a24:	bf 93       	push	r27
    5a26:	ef 93       	push	r30
    5a28:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    5a2a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5a2e:	88 23       	and	r24, r24
    5a30:	34 f4       	brge	.+12     	; 0x5a3e <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    5a32:	80 e8       	ldi	r24, 0x80	; 128
    5a34:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    5a38:	0e 94 e2 3c 	call	0x79c4	; 0x79c4 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    5a3c:	88 c0       	rjmp	.+272    	; 0x5b4e <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    5a3e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5a42:	82 ff       	sbrs	r24, 2
    5a44:	20 c0       	rjmp	.+64     	; 0x5a86 <__vector_125+0x84>
		udd_ack_underflow_event();
    5a46:	84 e0       	ldi	r24, 0x04	; 4
    5a48:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    5a4c:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <udd_sram+0x14>
    5a50:	86 ff       	sbrs	r24, 6
    5a52:	7d c0       	rjmp	.+250    	; 0x5b4e <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    5a54:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5a58:	81 fd       	sbrc	r24, 1
    5a5a:	79 c0       	rjmp	.+242    	; 0x5b4e <__vector_125+0x14c>
    5a5c:	e6 da       	rcall	.-2612   	; 0x502a <udd_ctrl_interrupt_tc_setup>
    5a5e:	81 11       	cpse	r24, r1
    5a60:	76 c0       	rjmp	.+236    	; 0x5b4e <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    5a62:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_ep_control_state>
    5a66:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    5a68:	11 f4       	brne	.+4      	; 0x5a6e <__vector_125+0x6c>
    5a6a:	19 da       	rcall	.-3022   	; 0x4e9e <udd_ctrl_send_zlp_in>
    5a6c:	70 c0       	rjmp	.+224    	; 0x5b4e <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    5a6e:	84 30       	cpi	r24, 0x04	; 4
    5a70:	09 f0       	breq	.+2      	; 0x5a74 <__vector_125+0x72>
    5a72:	6d c0       	rjmp	.+218    	; 0x5b4e <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    5a74:	e1 e3       	ldi	r30, 0x31	; 49
    5a76:	f5 e2       	ldi	r31, 0x25	; 37
    5a78:	04 e0       	ldi	r16, 0x04	; 4
    5a7a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5a7c:	e9 e2       	ldi	r30, 0x29	; 41
    5a7e:	f5 e2       	ldi	r31, 0x25	; 37
    5a80:	04 e0       	ldi	r16, 0x04	; 4
    5a82:	05 93       	las	Z, r16
    5a84:	64 c0       	rjmp	.+200    	; 0x5b4e <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    5a86:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5a8a:	81 ff       	sbrs	r24, 1
    5a8c:	5b c0       	rjmp	.+182    	; 0x5b44 <__vector_125+0x142>
		udd_ack_overflow_event();
    5a8e:	82 e0       	ldi	r24, 0x02	; 2
    5a90:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    5a94:	80 91 28 25 	lds	r24, 0x2528	; 0x802528 <udd_sram+0xc>
    5a98:	86 ff       	sbrs	r24, 6
    5a9a:	59 c0       	rjmp	.+178    	; 0x5b4e <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    5a9c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5aa0:	81 fd       	sbrc	r24, 1
    5aa2:	55 c0       	rjmp	.+170    	; 0x5b4e <__vector_125+0x14c>
    5aa4:	c2 da       	rcall	.-2684   	; 0x502a <udd_ctrl_interrupt_tc_setup>
    5aa6:	81 11       	cpse	r24, r1
    5aa8:	52 c0       	rjmp	.+164    	; 0x5b4e <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    5aaa:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_ep_control_state>
    5aae:	82 30       	cpi	r24, 0x02	; 2
    5ab0:	41 f4       	brne	.+16     	; 0x5ac2 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    5ab2:	84 e0       	ldi	r24, 0x04	; 4
    5ab4:	80 93 18 25 	sts	0x2518, r24	; 0x802518 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    5ab8:	e8 e2       	ldi	r30, 0x28	; 40
    5aba:	f5 e2       	ldi	r31, 0x25	; 37
    5abc:	02 e0       	ldi	r16, 0x02	; 2
    5abe:	06 93       	lac	Z, r16
    5ac0:	46 c0       	rjmp	.+140    	; 0x5b4e <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    5ac2:	83 30       	cpi	r24, 0x03	; 3
    5ac4:	09 f0       	breq	.+2      	; 0x5ac8 <__vector_125+0xc6>
    5ac6:	43 c0       	rjmp	.+134    	; 0x5b4e <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    5ac8:	e1 e3       	ldi	r30, 0x31	; 49
    5aca:	f5 e2       	ldi	r31, 0x25	; 37
    5acc:	04 e0       	ldi	r16, 0x04	; 4
    5ace:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5ad0:	e9 e2       	ldi	r30, 0x29	; 41
    5ad2:	f5 e2       	ldi	r31, 0x25	; 37
    5ad4:	04 e0       	ldi	r16, 0x04	; 4
    5ad6:	05 93       	las	Z, r16
    5ad8:	3a c0       	rjmp	.+116    	; 0x5b4e <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    5ada:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    5adc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5ae0:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    5ae2:	07 df       	rcall	.-498    	; 0x58f2 <udd_ep_abort>
    5ae4:	81 e8       	ldi	r24, 0x81	; 129
    5ae6:	05 df       	rcall	.-502    	; 0x58f2 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5ae8:	82 e0       	ldi	r24, 0x02	; 2
    5aea:	03 df       	rcall	.-506    	; 0x58f2 <udd_ep_abort>
    5aec:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    5aee:	01 df       	rcall	.-510    	; 0x58f2 <udd_ep_abort>
    5af0:	0e 94 b8 3c 	call	0x7970	; 0x7970 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    5af4:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    5af8:	ec e1       	ldi	r30, 0x1C	; 28
    5afa:	f5 e2       	ldi	r31, 0x25	; 37
	udd_endpoint_clear_status(ep_ctrl);
    5afc:	15 86       	std	Z+13, r1	; 0x0d
    5afe:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5b00:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    5b02:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5b04:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    5b06:	15 8a       	std	Z+21, r1	; 0x15
    5b08:	94 8b       	std	Z+20, r25	; 0x14
    5b0a:	85 8b       	std	Z+21, r24	; 0x15
    5b0c:	84 ed       	ldi	r24, 0xD4	; 212
		// Reset endpoint control management
		udd_ctrl_init();
    5b0e:	94 e2       	ldi	r25, 0x24	; 36
    5b10:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    5b12:	91 8b       	std	Z+17, r25	; 0x11
    5b14:	91 d9       	rcall	.-3294   	; 0x4e38 <udd_ctrl_init>
		udd_ack_suspend_event();
    5b16:	1b c0       	rjmp	.+54     	; 0x5b4e <__vector_125+0x14c>
    5b18:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    5b1c:	86 ff       	sbrs	r24, 6
    5b1e:	07 c0       	rjmp	.+14     	; 0x5b2e <__vector_125+0x12c>
    5b20:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    5b22:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    5b26:	80 e0       	ldi	r24, 0x00	; 0
    5b28:	4f d9       	rcall	.-3426   	; 0x4dc8 <udd_sleep_mode>
		udd_ack_resume_event();
    5b2a:	ac d5       	rcall	.+2904   	; 0x6684 <usb_callback_suspend_action>
    5b2c:	10 c0       	rjmp	.+32     	; 0x5b4e <__vector_125+0x14c>
    5b2e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    5b32:	85 ff       	sbrs	r24, 5
    5b34:	0c c0       	rjmp	.+24     	; 0x5b4e <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    5b36:	80 e2       	ldi	r24, 0x20	; 32
    5b38:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    5b3c:	81 e0       	ldi	r24, 0x01	; 1
    5b3e:	44 d9       	rcall	.-3448   	; 0x4dc8 <udd_sleep_mode>
    5b40:	a2 d5       	rcall	.+2884   	; 0x6686 <usb_callback_resume_action>
    5b42:	05 c0       	rjmp	.+10     	; 0x5b4e <__vector_125+0x14c>
    5b44:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    5b48:	84 fd       	sbrc	r24, 4
    5b4a:	c7 cf       	rjmp	.-114    	; 0x5ada <__vector_125+0xd8>
    5b4c:	e5 cf       	rjmp	.-54     	; 0x5b18 <__vector_125+0x116>
    5b4e:	ff 91       	pop	r31
    5b50:	ef 91       	pop	r30
    5b52:	bf 91       	pop	r27
    5b54:	af 91       	pop	r26
    5b56:	9f 91       	pop	r25
    5b58:	8f 91       	pop	r24
    5b5a:	7f 91       	pop	r23
    5b5c:	6f 91       	pop	r22
    5b5e:	5f 91       	pop	r21
    5b60:	4f 91       	pop	r20
    5b62:	3f 91       	pop	r19
    5b64:	2f 91       	pop	r18
    5b66:	0f 91       	pop	r16
    5b68:	0f 90       	pop	r0
    5b6a:	0b be       	out	0x3b, r0	; 59
    5b6c:	0f 90       	pop	r0
    5b6e:	0f be       	out	0x3f, r0	; 63
    5b70:	0f 90       	pop	r0
    5b72:	1f 90       	pop	r1
    5b74:	18 95       	reti

00005b76 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    5b76:	1f 92       	push	r1
    5b78:	0f 92       	push	r0
    5b7a:	0f b6       	in	r0, 0x3f	; 63
    5b7c:	0f 92       	push	r0
    5b7e:	11 24       	eor	r1, r1
    5b80:	0b b6       	in	r0, 0x3b	; 59
    5b82:	0f 92       	push	r0
    5b84:	0f 93       	push	r16
    5b86:	1f 93       	push	r17
    5b88:	2f 93       	push	r18
    5b8a:	3f 93       	push	r19
    5b8c:	4f 93       	push	r20
    5b8e:	5f 93       	push	r21
    5b90:	6f 93       	push	r22
    5b92:	7f 93       	push	r23
    5b94:	8f 93       	push	r24
    5b96:	9f 93       	push	r25
    5b98:	af 93       	push	r26
    5b9a:	bf 93       	push	r27
    5b9c:	cf 93       	push	r28
    5b9e:	df 93       	push	r29
    5ba0:	ef 93       	push	r30
    5ba2:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    5ba4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5ba8:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    5baa:	03 c0       	rjmp	.+6      	; 0x5bb2 <__vector_126+0x3c>
    5bac:	3e da       	rcall	.-2948   	; 0x502a <udd_ctrl_interrupt_tc_setup>
    5bae:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    5bb0:	c4 c0       	rjmp	.+392    	; 0x5d3a <__vector_126+0x1c4>
    5bb2:	82 e0       	ldi	r24, 0x02	; 2
    5bb4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    5bb8:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    5bbc:	81 95       	neg	r24
    5bbe:	88 0f       	add	r24, r24
    5bc0:	e8 e2       	ldi	r30, 0x28	; 40
    5bc2:	f5 e2       	ldi	r31, 0x25	; 37
    5bc4:	e8 1b       	sub	r30, r24
    5bc6:	f1 09       	sbc	r31, r1
    5bc8:	20 81       	ld	r18, Z
    5bca:	31 81       	ldd	r19, Z+1	; 0x01
    5bcc:	28 52       	subi	r18, 0x28	; 40
    5bce:	35 42       	sbci	r19, 0x25	; 37
    5bd0:	36 95       	lsr	r19
    5bd2:	27 95       	ror	r18
    5bd4:	36 95       	lsr	r19
    5bd6:	27 95       	ror	r18
    5bd8:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    5bda:	27 95       	ror	r18
    5bdc:	82 2f       	mov	r24, r18
    5bde:	86 95       	lsr	r24
    5be0:	20 fd       	sbrc	r18, 0
    5be2:	02 c0       	rjmp	.+4      	; 0x5be8 <__vector_126+0x72>
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	01 c0       	rjmp	.+2      	; 0x5bea <__vector_126+0x74>
    5be8:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    5bea:	89 0f       	add	r24, r25
    5bec:	e8 2f       	mov	r30, r24
    5bee:	ef 70       	andi	r30, 0x0F	; 15
    5bf0:	f0 e0       	ldi	r31, 0x00	; 0
    5bf2:	ee 0f       	add	r30, r30
    5bf4:	ff 1f       	adc	r31, r31
    5bf6:	28 2f       	mov	r18, r24
    5bf8:	08 2e       	mov	r0, r24
    5bfa:	00 0c       	add	r0, r0
    5bfc:	33 0b       	sbc	r19, r19
    5bfe:	22 27       	eor	r18, r18
    5c00:	33 0f       	add	r19, r19
    5c02:	22 1f       	adc	r18, r18
    5c04:	33 27       	eor	r19, r19
    5c06:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    5c08:	f3 1f       	adc	r31, r19
    5c0a:	df 01       	movw	r26, r30
    5c0c:	aa 0f       	add	r26, r26
    5c0e:	bb 1f       	adc	r27, r27
    5c10:	aa 0f       	add	r26, r26
    5c12:	bb 1f       	adc	r27, r27
    5c14:	aa 0f       	add	r26, r26
    5c16:	bb 1f       	adc	r27, r27
    5c18:	a4 5e       	subi	r26, 0xE4	; 228
    5c1a:	ba 4d       	sbci	r27, 0xDA	; 218
    5c1c:	1c 96       	adiw	r26, 0x0c	; 12
    5c1e:	9c 91       	ld	r25, X
    5c20:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    5c22:	8b c0       	rjmp	.+278    	; 0x5d3a <__vector_126+0x1c4>
    5c24:	ee 0f       	add	r30, r30
    5c26:	ff 1f       	adc	r31, r31
    5c28:	ee 0f       	add	r30, r30
    5c2a:	ff 1f       	adc	r31, r31
    5c2c:	ee 0f       	add	r30, r30
    5c2e:	ff 1f       	adc	r31, r31
    5c30:	e8 5d       	subi	r30, 0xD8	; 216
    5c32:	fa 4d       	sbci	r31, 0xDA	; 218
    5c34:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    5c36:	06 93       	lac	Z, r16
    5c38:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    5c3a:	7a c0       	rjmp	.+244    	; 0x5d30 <__vector_126+0x1ba>
    5c3c:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    5c40:	84 30       	cpi	r24, 0x04	; 4
    5c42:	19 f4       	brne	.+6      	; 0x5c4a <__vector_126+0xd4>
    5c44:	3a d9       	rcall	.-3468   	; 0x4eba <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    5c46:	f8 d8       	rcall	.-3600   	; 0x4e38 <udd_ctrl_init>
    5c48:	78 c0       	rjmp	.+240    	; 0x5d3a <__vector_126+0x1c4>
    5c4a:	00 91 2a 25 	lds	r16, 0x252A	; 0x80252a <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    5c4e:	10 91 2b 25 	lds	r17, 0x252B	; 0x80252b <udd_sram+0xf>
    5c52:	80 91 89 28 	lds	r24, 0x2889	; 0x802889 <udd_g_ctrlreq+0xa>
    5c56:	90 91 8a 28 	lds	r25, 0x288A	; 0x80288a <udd_g_ctrlreq+0xb>
    5c5a:	c0 91 14 25 	lds	r28, 0x2514	; 0x802514 <udd_ctrl_payload_nb_trans>
    5c5e:	d0 91 15 25 	lds	r29, 0x2515	; 0x802515 <udd_ctrl_payload_nb_trans+0x1>
    5c62:	98 01       	movw	r18, r16
    5c64:	2c 0f       	add	r18, r28
    5c66:	3d 1f       	adc	r19, r29
    5c68:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    5c6a:	93 07       	cpc	r25, r19
    5c6c:	18 f4       	brcc	.+6      	; 0x5c74 <__vector_126+0xfe>
    5c6e:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    5c70:	0c 1b       	sub	r16, r28
    5c72:	1d 0b       	sbc	r17, r29
    5c74:	80 91 87 28 	lds	r24, 0x2887	; 0x802887 <udd_g_ctrlreq+0x8>
    5c78:	90 91 88 28 	lds	r25, 0x2888	; 0x802888 <udd_g_ctrlreq+0x9>
    5c7c:	a8 01       	movw	r20, r16
    5c7e:	64 ed       	ldi	r22, 0xD4	; 212
    5c80:	74 e2       	ldi	r23, 0x24	; 36
    5c82:	8c 0f       	add	r24, r28
    5c84:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    5c86:	0e 94 3f 43 	call	0x867e	; 0x867e <memcpy>
    5c8a:	c0 0f       	add	r28, r16
    5c8c:	d1 1f       	adc	r29, r17
    5c8e:	c0 93 14 25 	sts	0x2514, r28	; 0x802514 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    5c92:	d0 93 15 25 	sts	0x2515, r29	; 0x802515 <udd_ctrl_payload_nb_trans+0x1>
    5c96:	00 34       	cpi	r16, 0x40	; 64
    5c98:	11 05       	cpc	r17, r1
    5c9a:	69 f4       	brne	.+26     	; 0x5cb6 <__vector_126+0x140>
    5c9c:	80 91 16 25 	lds	r24, 0x2516	; 0x802516 <udd_ctrl_prev_payload_nb_trans>
    5ca0:	90 91 17 25 	lds	r25, 0x2517	; 0x802517 <udd_ctrl_prev_payload_nb_trans+0x1>
    5ca4:	8c 0f       	add	r24, r28
    5ca6:	9d 1f       	adc	r25, r29
    5ca8:	20 91 85 28 	lds	r18, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    5cac:	30 91 86 28 	lds	r19, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    5cb0:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    5cb2:	93 07       	cpc	r25, r19
    5cb4:	80 f0       	brcs	.+32     	; 0x5cd6 <__vector_126+0x160>
    5cb6:	ef e7       	ldi	r30, 0x7F	; 127
    5cb8:	f8 e2       	ldi	r31, 0x28	; 40
		if (NULL != udd_g_ctrlreq.over_under_run) {
    5cba:	c2 87       	std	Z+10, r28	; 0x0a
    5cbc:	d3 87       	std	Z+11, r29	; 0x0b
    5cbe:	06 84       	ldd	r0, Z+14	; 0x0e
    5cc0:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    5cc2:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    5cc4:	30 97       	sbiw	r30, 0x00	; 0
    5cc6:	29 f0       	breq	.+10     	; 0x5cd2 <__vector_126+0x15c>
    5cc8:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    5cca:	81 11       	cpse	r24, r1
    5ccc:	02 c0       	rjmp	.+4      	; 0x5cd2 <__vector_126+0x15c>
    5cce:	d9 d8       	rcall	.-3662   	; 0x4e82 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    5cd0:	34 c0       	rjmp	.+104    	; 0x5d3a <__vector_126+0x1c4>
    5cd2:	e5 d8       	rcall	.-3638   	; 0x4e9e <udd_ctrl_send_zlp_in>
    5cd4:	32 c0       	rjmp	.+100    	; 0x5d3a <__vector_126+0x1c4>
    5cd6:	80 91 89 28 	lds	r24, 0x2889	; 0x802889 <udd_g_ctrlreq+0xa>
    5cda:	90 91 8a 28 	lds	r25, 0x288A	; 0x80288a <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    5cde:	c8 17       	cp	r28, r24
    5ce0:	d9 07       	cpc	r29, r25
    5ce2:	f9 f4       	brne	.+62     	; 0x5d22 <__vector_126+0x1ac>
    5ce4:	e0 91 8d 28 	lds	r30, 0x288D	; 0x80288d <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    5ce8:	f0 91 8e 28 	lds	r31, 0x288E	; 0x80288e <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    5cec:	30 97       	sbiw	r30, 0x00	; 0
    5cee:	11 f4       	brne	.+4      	; 0x5cf4 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    5cf0:	c8 d8       	rcall	.-3696   	; 0x4e82 <udd_ctrl_stall_data>
    5cf2:	23 c0       	rjmp	.+70     	; 0x5d3a <__vector_126+0x1c4>
    5cf4:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    5cf6:	81 11       	cpse	r24, r1
    5cf8:	02 c0       	rjmp	.+4      	; 0x5cfe <__vector_126+0x188>
    5cfa:	c3 d8       	rcall	.-3706   	; 0x4e82 <udd_ctrl_stall_data>
    5cfc:	1e c0       	rjmp	.+60     	; 0x5d3a <__vector_126+0x1c4>
    5cfe:	20 91 16 25 	lds	r18, 0x2516	; 0x802516 <udd_ctrl_prev_payload_nb_trans>
    5d02:	30 91 17 25 	lds	r19, 0x2517	; 0x802517 <udd_ctrl_prev_payload_nb_trans+0x1>
    5d06:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <udd_ctrl_payload_nb_trans>
    5d0a:	90 91 15 25 	lds	r25, 0x2515	; 0x802515 <udd_ctrl_payload_nb_trans+0x1>
    5d0e:	82 0f       	add	r24, r18
    5d10:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    5d12:	80 93 16 25 	sts	0x2516, r24	; 0x802516 <udd_ctrl_prev_payload_nb_trans>
    5d16:	90 93 17 25 	sts	0x2517, r25	; 0x802517 <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    5d1a:	10 92 14 25 	sts	0x2514, r1	; 0x802514 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    5d1e:	10 92 15 25 	sts	0x2515, r1	; 0x802515 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    5d22:	e8 e2       	ldi	r30, 0x28	; 40
    5d24:	f5 e2       	ldi	r31, 0x25	; 37
		udd_ctrl_in_sent();
    5d26:	02 e0       	ldi	r16, 0x02	; 2
    5d28:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    5d2a:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    5d2c:	06 93       	lac	Z, r16
    5d2e:	05 c0       	rjmp	.+10     	; 0x5d3a <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    5d30:	80 38       	cpi	r24, 0x80	; 128
    5d32:	11 f4       	brne	.+4      	; 0x5d38 <__vector_126+0x1c2>
    5d34:	ca d8       	rcall	.-3692   	; 0x4eca <udd_ctrl_in_sent>
    5d36:	01 c0       	rjmp	.+2      	; 0x5d3a <__vector_126+0x1c4>
    5d38:	ea d9       	rcall	.-3116   	; 0x510e <udd_ep_trans_complet>
    5d3a:	ff 91       	pop	r31
    5d3c:	ef 91       	pop	r30
    5d3e:	df 91       	pop	r29
    5d40:	cf 91       	pop	r28
    5d42:	bf 91       	pop	r27
    5d44:	af 91       	pop	r26
    5d46:	9f 91       	pop	r25
    5d48:	8f 91       	pop	r24
    5d4a:	7f 91       	pop	r23
    5d4c:	6f 91       	pop	r22
    5d4e:	5f 91       	pop	r21
    5d50:	4f 91       	pop	r20
    5d52:	3f 91       	pop	r19
    5d54:	2f 91       	pop	r18
    5d56:	1f 91       	pop	r17
    5d58:	0f 91       	pop	r16
    5d5a:	0f 90       	pop	r0
    5d5c:	0b be       	out	0x3b, r0	; 59
    5d5e:	0f 90       	pop	r0
    5d60:	0f be       	out	0x3f, r0	; 63
    5d62:	0f 90       	pop	r0
    5d64:	1f 90       	pop	r1
    5d66:	18 95       	reti

00005d68 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    5d68:	cf 92       	push	r12
    5d6a:	df 92       	push	r13
    5d6c:	ef 92       	push	r14
    5d6e:	ff 92       	push	r15
    5d70:	cf 93       	push	r28
    5d72:	df 93       	push	r29
    5d74:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    5d76:	6b 01       	movw	r12, r22
    5d78:	e1 2c       	mov	r14, r1
    5d7a:	f1 2c       	mov	r15, r1
    5d7c:	60 e8       	ldi	r22, 0x80	; 128
    5d7e:	73 ec       	ldi	r23, 0xC3	; 195
    5d80:	89 ec       	ldi	r24, 0xC9	; 201
    5d82:	91 e0       	ldi	r25, 0x01	; 1
    5d84:	a7 01       	movw	r20, r14
    5d86:	96 01       	movw	r18, r12
    5d88:	0e 94 78 40 	call	0x80f0	; 0x80f0 <__udivmodsi4>
    5d8c:	ca 01       	movw	r24, r20
    5d8e:	b9 01       	movw	r22, r18
    5d90:	2f ef       	ldi	r18, 0xFF	; 255
    5d92:	3f ef       	ldi	r19, 0xFF	; 255
    5d94:	40 e0       	ldi	r20, 0x00	; 0
    5d96:	50 e0       	ldi	r21, 0x00	; 0
    5d98:	0e 94 78 40 	call	0x80f0	; 0x80f0 <__udivmodsi4>
	if (smallest_div < 1) {
    5d9c:	21 15       	cp	r18, r1
    5d9e:	31 05       	cpc	r19, r1
    5da0:	29 f4       	brne	.+10     	; 0x5dac <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    5da2:	81 e0       	ldi	r24, 0x01	; 1
    5da4:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    5da6:	21 e0       	ldi	r18, 0x01	; 1
    5da8:	30 e0       	ldi	r19, 0x00	; 0
    5daa:	2d c0       	rjmp	.+90     	; 0x5e06 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    5dac:	22 30       	cpi	r18, 0x02	; 2
    5dae:	31 05       	cpc	r19, r1
    5db0:	28 f4       	brcc	.+10     	; 0x5dbc <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    5db2:	82 e0       	ldi	r24, 0x02	; 2
    5db4:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    5db6:	22 e0       	ldi	r18, 0x02	; 2
    5db8:	30 e0       	ldi	r19, 0x00	; 0
    5dba:	25 c0       	rjmp	.+74     	; 0x5e06 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    5dbc:	24 30       	cpi	r18, 0x04	; 4
    5dbe:	31 05       	cpc	r19, r1
    5dc0:	28 f4       	brcc	.+10     	; 0x5dcc <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    5dc2:	83 e0       	ldi	r24, 0x03	; 3
    5dc4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    5dc6:	24 e0       	ldi	r18, 0x04	; 4
    5dc8:	30 e0       	ldi	r19, 0x00	; 0
    5dca:	1d c0       	rjmp	.+58     	; 0x5e06 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    5dcc:	28 30       	cpi	r18, 0x08	; 8
    5dce:	31 05       	cpc	r19, r1
    5dd0:	28 f4       	brcc	.+10     	; 0x5ddc <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    5dd2:	84 e0       	ldi	r24, 0x04	; 4
    5dd4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    5dd6:	28 e0       	ldi	r18, 0x08	; 8
    5dd8:	30 e0       	ldi	r19, 0x00	; 0
    5dda:	15 c0       	rjmp	.+42     	; 0x5e06 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    5ddc:	20 34       	cpi	r18, 0x40	; 64
    5dde:	31 05       	cpc	r19, r1
    5de0:	28 f4       	brcc	.+10     	; 0x5dec <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    5de2:	85 e0       	ldi	r24, 0x05	; 5
    5de4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    5de6:	20 e4       	ldi	r18, 0x40	; 64
    5de8:	30 e0       	ldi	r19, 0x00	; 0
    5dea:	0d c0       	rjmp	.+26     	; 0x5e06 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    5dec:	2f 3f       	cpi	r18, 0xFF	; 255
    5dee:	31 05       	cpc	r19, r1
    5df0:	09 f0       	breq	.+2      	; 0x5df4 <pwm_set_frequency+0x8c>
    5df2:	28 f4       	brcc	.+10     	; 0x5dfe <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    5df4:	86 e0       	ldi	r24, 0x06	; 6
    5df6:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    5df8:	20 e0       	ldi	r18, 0x00	; 0
    5dfa:	31 e0       	ldi	r19, 0x01	; 1
    5dfc:	04 c0       	rjmp	.+8      	; 0x5e06 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    5dfe:	87 e0       	ldi	r24, 0x07	; 7
    5e00:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    5e02:	20 e0       	ldi	r18, 0x00	; 0
    5e04:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    5e06:	40 e0       	ldi	r20, 0x00	; 0
    5e08:	50 e0       	ldi	r21, 0x00	; 0
    5e0a:	60 e8       	ldi	r22, 0x80	; 128
    5e0c:	73 ec       	ldi	r23, 0xC3	; 195
    5e0e:	89 ec       	ldi	r24, 0xC9	; 201
    5e10:	91 e0       	ldi	r25, 0x01	; 1
    5e12:	0e 94 78 40 	call	0x80f0	; 0x80f0 <__udivmodsi4>
    5e16:	ca 01       	movw	r24, r20
    5e18:	b9 01       	movw	r22, r18
    5e1a:	a7 01       	movw	r20, r14
    5e1c:	96 01       	movw	r18, r12
    5e1e:	0e 94 78 40 	call	0x80f0	; 0x80f0 <__udivmodsi4>
    5e22:	2d 83       	std	Y+5, r18	; 0x05
    5e24:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    5e26:	24 36       	cpi	r18, 0x64	; 100
    5e28:	31 05       	cpc	r19, r1
    5e2a:	18 f4       	brcc	.+6      	; 0x5e32 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    5e2c:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    5e2e:	1d 82       	std	Y+5, r1	; 0x05
    5e30:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    5e32:	df 91       	pop	r29
    5e34:	cf 91       	pop	r28
    5e36:	ff 90       	pop	r15
    5e38:	ef 90       	pop	r14
    5e3a:	df 90       	pop	r13
    5e3c:	cf 90       	pop	r12
    5e3e:	08 95       	ret

00005e40 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    5e40:	0f 93       	push	r16
    5e42:	1f 93       	push	r17
    5e44:	cf 93       	push	r28
    5e46:	df 93       	push	r29
    5e48:	ec 01       	movw	r28, r24
    5e4a:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    5e4c:	86 2f       	mov	r24, r22
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
    5e50:	87 30       	cpi	r24, 0x07	; 7
    5e52:	91 05       	cpc	r25, r1
    5e54:	08 f0       	brcs	.+2      	; 0x5e58 <pwm_init+0x18>
    5e56:	8b c0       	rjmp	.+278    	; 0x5f6e <pwm_init+0x12e>
    5e58:	fc 01       	movw	r30, r24
    5e5a:	88 27       	eor	r24, r24
    5e5c:	eb 5f       	subi	r30, 0xFB	; 251
    5e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    5e60:	8f 4f       	sbci	r24, 0xFF	; 255
    5e62:	0c 94 9a 40 	jmp	0x8134	; 0x8134 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    5e66:	80 e0       	ldi	r24, 0x00	; 0
    5e68:	98 e0       	ldi	r25, 0x08	; 8
    5e6a:	88 83       	st	Y, r24
    5e6c:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    5e6e:	e0 e4       	ldi	r30, 0x40	; 64
    5e70:	f6 e0       	ldi	r31, 0x06	; 6
    5e72:	30 81       	ld	r19, Z
    5e74:	81 e0       	ldi	r24, 0x01	; 1
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	2f ef       	ldi	r18, 0xFF	; 255
    5e7a:	24 0f       	add	r18, r20
    5e7c:	02 c0       	rjmp	.+4      	; 0x5e82 <pwm_init+0x42>
    5e7e:	88 0f       	add	r24, r24
    5e80:	99 1f       	adc	r25, r25
    5e82:	2a 95       	dec	r18
    5e84:	e2 f7       	brpl	.-8      	; 0x5e7e <pwm_init+0x3e>
    5e86:	83 2b       	or	r24, r19
    5e88:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    5e8a:	71 c0       	rjmp	.+226    	; 0x5f6e <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    5e8c:	80 e4       	ldi	r24, 0x40	; 64
    5e8e:	98 e0       	ldi	r25, 0x08	; 8
    5e90:	88 83       	st	Y, r24
    5e92:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    5e94:	e0 e4       	ldi	r30, 0x40	; 64
    5e96:	f6 e0       	ldi	r31, 0x06	; 6
    5e98:	30 81       	ld	r19, Z
    5e9a:	81 e0       	ldi	r24, 0x01	; 1
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	23 e0       	ldi	r18, 0x03	; 3
    5ea0:	24 0f       	add	r18, r20
    5ea2:	02 c0       	rjmp	.+4      	; 0x5ea8 <pwm_init+0x68>
    5ea4:	88 0f       	add	r24, r24
    5ea6:	99 1f       	adc	r25, r25
    5ea8:	2a 95       	dec	r18
    5eaa:	e2 f7       	brpl	.-8      	; 0x5ea4 <pwm_init+0x64>
    5eac:	83 2b       	or	r24, r19
    5eae:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    5eb0:	5e c0       	rjmp	.+188    	; 0x5f6e <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    5eb2:	80 e0       	ldi	r24, 0x00	; 0
    5eb4:	99 e0       	ldi	r25, 0x09	; 9
    5eb6:	88 83       	st	Y, r24
    5eb8:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    5eba:	e0 e6       	ldi	r30, 0x60	; 96
    5ebc:	f6 e0       	ldi	r31, 0x06	; 6
    5ebe:	30 81       	ld	r19, Z
    5ec0:	81 e0       	ldi	r24, 0x01	; 1
    5ec2:	90 e0       	ldi	r25, 0x00	; 0
    5ec4:	2f ef       	ldi	r18, 0xFF	; 255
    5ec6:	24 0f       	add	r18, r20
    5ec8:	02 c0       	rjmp	.+4      	; 0x5ece <pwm_init+0x8e>
    5eca:	88 0f       	add	r24, r24
    5ecc:	99 1f       	adc	r25, r25
    5ece:	2a 95       	dec	r18
    5ed0:	e2 f7       	brpl	.-8      	; 0x5eca <pwm_init+0x8a>
    5ed2:	83 2b       	or	r24, r19
    5ed4:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    5ed6:	4b c0       	rjmp	.+150    	; 0x5f6e <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    5ed8:	80 e4       	ldi	r24, 0x40	; 64
    5eda:	99 e0       	ldi	r25, 0x09	; 9
    5edc:	88 83       	st	Y, r24
    5ede:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    5ee0:	e0 e6       	ldi	r30, 0x60	; 96
    5ee2:	f6 e0       	ldi	r31, 0x06	; 6
    5ee4:	30 81       	ld	r19, Z
    5ee6:	81 e0       	ldi	r24, 0x01	; 1
    5ee8:	90 e0       	ldi	r25, 0x00	; 0
    5eea:	23 e0       	ldi	r18, 0x03	; 3
    5eec:	24 0f       	add	r18, r20
    5eee:	02 c0       	rjmp	.+4      	; 0x5ef4 <pwm_init+0xb4>
    5ef0:	88 0f       	add	r24, r24
    5ef2:	99 1f       	adc	r25, r25
    5ef4:	2a 95       	dec	r18
    5ef6:	e2 f7       	brpl	.-8      	; 0x5ef0 <pwm_init+0xb0>
    5ef8:	83 2b       	or	r24, r19
    5efa:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    5efc:	38 c0       	rjmp	.+112    	; 0x5f6e <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    5efe:	80 e0       	ldi	r24, 0x00	; 0
    5f00:	9a e0       	ldi	r25, 0x0A	; 10
    5f02:	88 83       	st	Y, r24
    5f04:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    5f06:	e0 e8       	ldi	r30, 0x80	; 128
    5f08:	f6 e0       	ldi	r31, 0x06	; 6
    5f0a:	30 81       	ld	r19, Z
    5f0c:	81 e0       	ldi	r24, 0x01	; 1
    5f0e:	90 e0       	ldi	r25, 0x00	; 0
    5f10:	2f ef       	ldi	r18, 0xFF	; 255
    5f12:	24 0f       	add	r18, r20
    5f14:	02 c0       	rjmp	.+4      	; 0x5f1a <pwm_init+0xda>
    5f16:	88 0f       	add	r24, r24
    5f18:	99 1f       	adc	r25, r25
    5f1a:	2a 95       	dec	r18
    5f1c:	e2 f7       	brpl	.-8      	; 0x5f16 <pwm_init+0xd6>
    5f1e:	83 2b       	or	r24, r19
    5f20:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    5f22:	25 c0       	rjmp	.+74     	; 0x5f6e <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    5f24:	80 e4       	ldi	r24, 0x40	; 64
    5f26:	9a e0       	ldi	r25, 0x0A	; 10
    5f28:	88 83       	st	Y, r24
    5f2a:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    5f2c:	e0 e8       	ldi	r30, 0x80	; 128
    5f2e:	f6 e0       	ldi	r31, 0x06	; 6
    5f30:	30 81       	ld	r19, Z
    5f32:	81 e0       	ldi	r24, 0x01	; 1
    5f34:	90 e0       	ldi	r25, 0x00	; 0
    5f36:	23 e0       	ldi	r18, 0x03	; 3
    5f38:	24 0f       	add	r18, r20
    5f3a:	02 c0       	rjmp	.+4      	; 0x5f40 <pwm_init+0x100>
    5f3c:	88 0f       	add	r24, r24
    5f3e:	99 1f       	adc	r25, r25
    5f40:	2a 95       	dec	r18
    5f42:	e2 f7       	brpl	.-8      	; 0x5f3c <pwm_init+0xfc>
    5f44:	83 2b       	or	r24, r19
    5f46:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    5f48:	12 c0       	rjmp	.+36     	; 0x5f6e <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    5f4a:	80 e0       	ldi	r24, 0x00	; 0
    5f4c:	9b e0       	ldi	r25, 0x0B	; 11
    5f4e:	88 83       	st	Y, r24
    5f50:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    5f52:	e0 ea       	ldi	r30, 0xA0	; 160
    5f54:	f6 e0       	ldi	r31, 0x06	; 6
    5f56:	30 81       	ld	r19, Z
    5f58:	81 e0       	ldi	r24, 0x01	; 1
    5f5a:	90 e0       	ldi	r25, 0x00	; 0
    5f5c:	2f ef       	ldi	r18, 0xFF	; 255
    5f5e:	24 0f       	add	r18, r20
    5f60:	02 c0       	rjmp	.+4      	; 0x5f66 <pwm_init+0x126>
    5f62:	88 0f       	add	r24, r24
    5f64:	99 1f       	adc	r25, r25
    5f66:	2a 95       	dec	r18
    5f68:	e2 f7       	brpl	.-8      	; 0x5f62 <pwm_init+0x122>
    5f6a:	83 2b       	or	r24, r19
    5f6c:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    5f6e:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    5f70:	42 30       	cpi	r20, 0x02	; 2
    5f72:	61 f0       	breq	.+24     	; 0x5f8c <pwm_init+0x14c>
    5f74:	18 f4       	brcc	.+6      	; 0x5f7c <pwm_init+0x13c>
    5f76:	41 30       	cpi	r20, 0x01	; 1
    5f78:	31 f0       	breq	.+12     	; 0x5f86 <pwm_init+0x146>
    5f7a:	10 c0       	rjmp	.+32     	; 0x5f9c <pwm_init+0x15c>
    5f7c:	43 30       	cpi	r20, 0x03	; 3
    5f7e:	49 f0       	breq	.+18     	; 0x5f92 <pwm_init+0x152>
    5f80:	44 30       	cpi	r20, 0x04	; 4
    5f82:	51 f0       	breq	.+20     	; 0x5f98 <pwm_init+0x158>
    5f84:	0b c0       	rjmp	.+22     	; 0x5f9c <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    5f86:	80 e1       	ldi	r24, 0x10	; 16
    5f88:	8b 83       	std	Y+3, r24	; 0x03
		break;
    5f8a:	08 c0       	rjmp	.+16     	; 0x5f9c <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    5f8c:	80 e2       	ldi	r24, 0x20	; 32
    5f8e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    5f90:	05 c0       	rjmp	.+10     	; 0x5f9c <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    5f92:	80 e4       	ldi	r24, 0x40	; 64
    5f94:	8b 83       	std	Y+3, r24	; 0x03
		break;
    5f96:	02 c0       	rjmp	.+4      	; 0x5f9c <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    5f98:	80 e8       	ldi	r24, 0x80	; 128
    5f9a:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    5f9c:	88 81       	ld	r24, Y
    5f9e:	99 81       	ldd	r25, Y+1	; 0x01
    5fa0:	0e 94 c9 24 	call	0x4992	; 0x4992 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    5fa4:	e8 81       	ld	r30, Y
    5fa6:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    5fa8:	81 81       	ldd	r24, Z+1	; 0x01
    5faa:	88 7f       	andi	r24, 0xF8	; 248
    5fac:	83 60       	ori	r24, 0x03	; 3
    5fae:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    5fb0:	1d 82       	std	Y+5, r1	; 0x05
    5fb2:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    5fb4:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    5fb6:	e8 81       	ld	r30, Y
    5fb8:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    5fba:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    5fbc:	80 7f       	andi	r24, 0xF0	; 240
    5fbe:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    5fc0:	b8 01       	movw	r22, r16
    5fc2:	ce 01       	movw	r24, r28
    5fc4:	d1 de       	rcall	.-606    	; 0x5d68 <pwm_set_frequency>
}
    5fc6:	df 91       	pop	r29
    5fc8:	cf 91       	pop	r28
    5fca:	1f 91       	pop	r17
    5fcc:	0f 91       	pop	r16
    5fce:	08 95       	ret

00005fd0 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    5fd0:	cf 93       	push	r28
    5fd2:	df 93       	push	r29
    5fd4:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    5fd6:	2d 81       	ldd	r18, Y+5	; 0x05
    5fd8:	3e 81       	ldd	r19, Y+6	; 0x06
    5fda:	a6 2f       	mov	r26, r22
    5fdc:	b0 e0       	ldi	r27, 0x00	; 0
    5fde:	0e 94 a2 40 	call	0x8144	; 0x8144 <__umulhisi3>
    5fe2:	24 e6       	ldi	r18, 0x64	; 100
    5fe4:	30 e0       	ldi	r19, 0x00	; 0
    5fe6:	40 e0       	ldi	r20, 0x00	; 0
    5fe8:	50 e0       	ldi	r21, 0x00	; 0
    5fea:	0e 94 78 40 	call	0x80f0	; 0x80f0 <__udivmodsi4>
    5fee:	8a 81       	ldd	r24, Y+2	; 0x02
    5ff0:	e8 81       	ld	r30, Y
    5ff2:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    5ff4:	e6 fd       	sbrc	r30, 6
    5ff6:	17 c0       	rjmp	.+46     	; 0x6026 <__stack+0x27>
		switch (channel_index) {
    5ff8:	82 30       	cpi	r24, 0x02	; 2
    5ffa:	61 f0       	breq	.+24     	; 0x6014 <__stack+0x15>
    5ffc:	18 f4       	brcc	.+6      	; 0x6004 <__stack+0x5>
    5ffe:	81 30       	cpi	r24, 0x01	; 1
    6000:	31 f0       	breq	.+12     	; 0x600e <__stack+0xf>
    6002:	1b c0       	rjmp	.+54     	; 0x603a <__stack+0x3b>
    6004:	83 30       	cpi	r24, 0x03	; 3
    6006:	49 f0       	breq	.+18     	; 0x601a <__stack+0x1b>
    6008:	84 30       	cpi	r24, 0x04	; 4
    600a:	51 f0       	breq	.+20     	; 0x6020 <__stack+0x21>
    600c:	16 c0       	rjmp	.+44     	; 0x603a <__stack+0x3b>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    600e:	20 af       	std	Z+56, r18	; 0x38
    6010:	31 af       	std	Z+57, r19	; 0x39
    6012:	13 c0       	rjmp	.+38     	; 0x603a <__stack+0x3b>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    6014:	22 af       	std	Z+58, r18	; 0x3a
    6016:	33 af       	std	Z+59, r19	; 0x3b
    6018:	10 c0       	rjmp	.+32     	; 0x603a <__stack+0x3b>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    601a:	24 af       	std	Z+60, r18	; 0x3c
    601c:	35 af       	std	Z+61, r19	; 0x3d
    601e:	0d c0       	rjmp	.+26     	; 0x603a <__stack+0x3b>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    6020:	26 af       	std	Z+62, r18	; 0x3e
    6022:	37 af       	std	Z+63, r19	; 0x3f
    6024:	0a c0       	rjmp	.+20     	; 0x603a <__stack+0x3b>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    6026:	81 30       	cpi	r24, 0x01	; 1
    6028:	19 f0       	breq	.+6      	; 0x6030 <__stack+0x31>
    602a:	82 30       	cpi	r24, 0x02	; 2
    602c:	21 f0       	breq	.+8      	; 0x6036 <__stack+0x37>
    602e:	05 c0       	rjmp	.+10     	; 0x603a <__stack+0x3b>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    6030:	20 af       	std	Z+56, r18	; 0x38
    6032:	31 af       	std	Z+57, r19	; 0x39
    6034:	02 c0       	rjmp	.+4      	; 0x603a <__stack+0x3b>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    6036:	22 af       	std	Z+58, r18	; 0x3a
    6038:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    603a:	8d 81       	ldd	r24, Y+5	; 0x05
    603c:	9e 81       	ldd	r25, Y+6	; 0x06
    603e:	e8 81       	ld	r30, Y
    6040:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    6042:	86 a3       	std	Z+38, r24	; 0x26
    6044:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    6046:	8b 81       	ldd	r24, Y+3	; 0x03
    6048:	e8 81       	ld	r30, Y
    604a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    604c:	e6 fd       	sbrc	r30, 6
    604e:	04 c0       	rjmp	.+8      	; 0x6058 <__stack+0x59>
		((TC0_t *)tc)->CTRLB |= enablemask;
    6050:	91 81       	ldd	r25, Z+1	; 0x01
    6052:	89 2b       	or	r24, r25
    6054:	81 83       	std	Z+1, r24	; 0x01
    6056:	04 c0       	rjmp	.+8      	; 0x6060 <__stack+0x61>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    6058:	91 81       	ldd	r25, Z+1	; 0x01
    605a:	80 73       	andi	r24, 0x30	; 48
    605c:	89 2b       	or	r24, r25
    605e:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    6060:	e8 81       	ld	r30, Y
    6062:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    6064:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    6066:	80 7f       	andi	r24, 0xF0	; 240
    6068:	9c 81       	ldd	r25, Y+4	; 0x04
    606a:	89 2b       	or	r24, r25
    606c:	80 83       	st	Z, r24
}
    606e:	df 91       	pop	r29
    6070:	cf 91       	pop	r28
    6072:	08 95       	ret

00006074 <__portable_avr_delay_cycles>:
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    6074:	04 c0       	rjmp	.+8      	; 0x607e <__portable_avr_delay_cycles+0xa>
    6076:	61 50       	subi	r22, 0x01	; 1
    6078:	71 09       	sbc	r23, r1
    607a:	81 09       	sbc	r24, r1
    607c:	91 09       	sbc	r25, r1
    607e:	61 15       	cp	r22, r1
    6080:	71 05       	cpc	r23, r1
    6082:	81 05       	cpc	r24, r1
    6084:	91 05       	cpc	r25, r1
    6086:	b9 f7       	brne	.-18     	; 0x6076 <__portable_avr_delay_cycles+0x2>
    6088:	08 95       	ret

0000608a <isr_rtc_alarm>:
    608a:	08 95       	ret

0000608c <isr_adc_a>:
    608c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    6090:	4e 5b       	subi	r20, 0xBE	; 190
    6092:	51 09       	sbc	r21, r1
    6094:	60 ff       	sbrs	r22, 0
    6096:	d3 c0       	rjmp	.+422    	; 0x623e <isr_adc_a+0x1b2>
    6098:	82 95       	swap	r24
    609a:	8f 70       	andi	r24, 0x0F	; 15
    609c:	81 30       	cpi	r24, 0x01	; 1
    609e:	31 f0       	breq	.+12     	; 0x60ac <isr_adc_a+0x20>
    60a0:	08 f4       	brcc	.+2      	; 0x60a4 <isr_adc_a+0x18>
    60a2:	8a c0       	rjmp	.+276    	; 0x61b8 <isr_adc_a+0x12c>
    60a4:	82 30       	cpi	r24, 0x02	; 2
    60a6:	09 f4       	brne	.+2      	; 0x60aa <isr_adc_a+0x1e>
    60a8:	44 c0       	rjmp	.+136    	; 0x6132 <isr_adc_a+0xa6>
    60aa:	08 95       	ret
    60ac:	05 2e       	mov	r0, r21
    60ae:	00 0c       	add	r0, r0
    60b0:	66 0b       	sbc	r22, r22
    60b2:	77 0b       	sbc	r23, r23
    60b4:	80 91 e7 26 	lds	r24, 0x26E7	; 0x8026e7 <g_adc_vctcxo_sum>
    60b8:	90 91 e8 26 	lds	r25, 0x26E8	; 0x8026e8 <g_adc_vctcxo_sum+0x1>
    60bc:	a0 91 e9 26 	lds	r26, 0x26E9	; 0x8026e9 <g_adc_vctcxo_sum+0x2>
    60c0:	b0 91 ea 26 	lds	r27, 0x26EA	; 0x8026ea <g_adc_vctcxo_sum+0x3>
    60c4:	48 0f       	add	r20, r24
    60c6:	59 1f       	adc	r21, r25
    60c8:	6a 1f       	adc	r22, r26
    60ca:	7b 1f       	adc	r23, r27
    60cc:	40 93 e7 26 	sts	0x26E7, r20	; 0x8026e7 <g_adc_vctcxo_sum>
    60d0:	50 93 e8 26 	sts	0x26E8, r21	; 0x8026e8 <g_adc_vctcxo_sum+0x1>
    60d4:	60 93 e9 26 	sts	0x26E9, r22	; 0x8026e9 <g_adc_vctcxo_sum+0x2>
    60d8:	70 93 ea 26 	sts	0x26EA, r23	; 0x8026ea <g_adc_vctcxo_sum+0x3>
    60dc:	80 91 e5 26 	lds	r24, 0x26E5	; 0x8026e5 <g_adc_vctcxo_cnt>
    60e0:	90 91 e6 26 	lds	r25, 0x26E6	; 0x8026e6 <g_adc_vctcxo_cnt+0x1>
    60e4:	01 96       	adiw	r24, 0x01	; 1
    60e6:	80 93 e5 26 	sts	0x26E5, r24	; 0x8026e5 <g_adc_vctcxo_cnt>
    60ea:	90 93 e6 26 	sts	0x26E6, r25	; 0x8026e6 <g_adc_vctcxo_cnt+0x1>
    60ee:	8f 3f       	cpi	r24, 0xFF	; 255
    60f0:	91 05       	cpc	r25, r1
    60f2:	09 f0       	breq	.+2      	; 0x60f6 <isr_adc_a+0x6a>
    60f4:	08 f4       	brcc	.+2      	; 0x60f8 <isr_adc_a+0x6c>
    60f6:	2b c1       	rjmp	.+598    	; 0x634e <isr_adc_a+0x2c2>
    60f8:	68 94       	set
    60fa:	16 f8       	bld	r1, 6
    60fc:	75 95       	asr	r23
    60fe:	67 95       	ror	r22
    6100:	57 95       	ror	r21
    6102:	47 95       	ror	r20
    6104:	16 94       	lsr	r1
    6106:	d1 f7       	brne	.-12     	; 0x60fc <isr_adc_a+0x70>
    6108:	40 93 eb 26 	sts	0x26EB, r20	; 0x8026eb <g_adc_vctcxo_cur>
    610c:	50 93 ec 26 	sts	0x26EC, r21	; 0x8026ec <g_adc_vctcxo_cur+0x1>
    6110:	60 93 ed 26 	sts	0x26ED, r22	; 0x8026ed <g_adc_vctcxo_cur+0x2>
    6114:	70 93 ee 26 	sts	0x26EE, r23	; 0x8026ee <g_adc_vctcxo_cur+0x3>
    6118:	10 92 e5 26 	sts	0x26E5, r1	; 0x8026e5 <g_adc_vctcxo_cnt>
    611c:	10 92 e6 26 	sts	0x26E6, r1	; 0x8026e6 <g_adc_vctcxo_cnt+0x1>
    6120:	10 92 e7 26 	sts	0x26E7, r1	; 0x8026e7 <g_adc_vctcxo_sum>
    6124:	10 92 e8 26 	sts	0x26E8, r1	; 0x8026e8 <g_adc_vctcxo_sum+0x1>
    6128:	10 92 e9 26 	sts	0x26E9, r1	; 0x8026e9 <g_adc_vctcxo_sum+0x2>
    612c:	10 92 ea 26 	sts	0x26EA, r1	; 0x8026ea <g_adc_vctcxo_sum+0x3>
    6130:	08 95       	ret
    6132:	05 2e       	mov	r0, r21
    6134:	00 0c       	add	r0, r0
    6136:	66 0b       	sbc	r22, r22
    6138:	77 0b       	sbc	r23, r23
    613a:	80 91 dd 26 	lds	r24, 0x26DD	; 0x8026dd <g_adc_5v0_sum>
    613e:	90 91 de 26 	lds	r25, 0x26DE	; 0x8026de <g_adc_5v0_sum+0x1>
    6142:	a0 91 df 26 	lds	r26, 0x26DF	; 0x8026df <g_adc_5v0_sum+0x2>
    6146:	b0 91 e0 26 	lds	r27, 0x26E0	; 0x8026e0 <g_adc_5v0_sum+0x3>
    614a:	48 0f       	add	r20, r24
    614c:	59 1f       	adc	r21, r25
    614e:	6a 1f       	adc	r22, r26
    6150:	7b 1f       	adc	r23, r27
    6152:	40 93 dd 26 	sts	0x26DD, r20	; 0x8026dd <g_adc_5v0_sum>
    6156:	50 93 de 26 	sts	0x26DE, r21	; 0x8026de <g_adc_5v0_sum+0x1>
    615a:	60 93 df 26 	sts	0x26DF, r22	; 0x8026df <g_adc_5v0_sum+0x2>
    615e:	70 93 e0 26 	sts	0x26E0, r23	; 0x8026e0 <g_adc_5v0_sum+0x3>
    6162:	80 91 db 26 	lds	r24, 0x26DB	; 0x8026db <g_adc_5v0_cnt>
    6166:	90 91 dc 26 	lds	r25, 0x26DC	; 0x8026dc <g_adc_5v0_cnt+0x1>
    616a:	01 96       	adiw	r24, 0x01	; 1
    616c:	80 93 db 26 	sts	0x26DB, r24	; 0x8026db <g_adc_5v0_cnt>
    6170:	90 93 dc 26 	sts	0x26DC, r25	; 0x8026dc <g_adc_5v0_cnt+0x1>
    6174:	8f 3f       	cpi	r24, 0xFF	; 255
    6176:	91 05       	cpc	r25, r1
    6178:	09 f0       	breq	.+2      	; 0x617c <isr_adc_a+0xf0>
    617a:	08 f4       	brcc	.+2      	; 0x617e <isr_adc_a+0xf2>
    617c:	e8 c0       	rjmp	.+464    	; 0x634e <isr_adc_a+0x2c2>
    617e:	68 94       	set
    6180:	16 f8       	bld	r1, 6
    6182:	75 95       	asr	r23
    6184:	67 95       	ror	r22
    6186:	57 95       	ror	r21
    6188:	47 95       	ror	r20
    618a:	16 94       	lsr	r1
    618c:	d1 f7       	brne	.-12     	; 0x6182 <isr_adc_a+0xf6>
    618e:	40 93 e1 26 	sts	0x26E1, r20	; 0x8026e1 <g_adc_5v0_cur>
    6192:	50 93 e2 26 	sts	0x26E2, r21	; 0x8026e2 <g_adc_5v0_cur+0x1>
    6196:	60 93 e3 26 	sts	0x26E3, r22	; 0x8026e3 <g_adc_5v0_cur+0x2>
    619a:	70 93 e4 26 	sts	0x26E4, r23	; 0x8026e4 <g_adc_5v0_cur+0x3>
    619e:	10 92 db 26 	sts	0x26DB, r1	; 0x8026db <g_adc_5v0_cnt>
    61a2:	10 92 dc 26 	sts	0x26DC, r1	; 0x8026dc <g_adc_5v0_cnt+0x1>
    61a6:	10 92 dd 26 	sts	0x26DD, r1	; 0x8026dd <g_adc_5v0_sum>
    61aa:	10 92 de 26 	sts	0x26DE, r1	; 0x8026de <g_adc_5v0_sum+0x1>
    61ae:	10 92 df 26 	sts	0x26DF, r1	; 0x8026df <g_adc_5v0_sum+0x2>
    61b2:	10 92 e0 26 	sts	0x26E0, r1	; 0x8026e0 <g_adc_5v0_sum+0x3>
    61b6:	08 95       	ret
    61b8:	05 2e       	mov	r0, r21
    61ba:	00 0c       	add	r0, r0
    61bc:	66 0b       	sbc	r22, r22
    61be:	77 0b       	sbc	r23, r23
    61c0:	80 91 d3 26 	lds	r24, 0x26D3	; 0x8026d3 <g_adc_vbat_sum>
    61c4:	90 91 d4 26 	lds	r25, 0x26D4	; 0x8026d4 <g_adc_vbat_sum+0x1>
    61c8:	a0 91 d5 26 	lds	r26, 0x26D5	; 0x8026d5 <g_adc_vbat_sum+0x2>
    61cc:	b0 91 d6 26 	lds	r27, 0x26D6	; 0x8026d6 <g_adc_vbat_sum+0x3>
    61d0:	48 0f       	add	r20, r24
    61d2:	59 1f       	adc	r21, r25
    61d4:	6a 1f       	adc	r22, r26
    61d6:	7b 1f       	adc	r23, r27
    61d8:	40 93 d3 26 	sts	0x26D3, r20	; 0x8026d3 <g_adc_vbat_sum>
    61dc:	50 93 d4 26 	sts	0x26D4, r21	; 0x8026d4 <g_adc_vbat_sum+0x1>
    61e0:	60 93 d5 26 	sts	0x26D5, r22	; 0x8026d5 <g_adc_vbat_sum+0x2>
    61e4:	70 93 d6 26 	sts	0x26D6, r23	; 0x8026d6 <g_adc_vbat_sum+0x3>
    61e8:	80 91 d1 26 	lds	r24, 0x26D1	; 0x8026d1 <g_adc_vbat_cnt>
    61ec:	90 91 d2 26 	lds	r25, 0x26D2	; 0x8026d2 <g_adc_vbat_cnt+0x1>
    61f0:	01 96       	adiw	r24, 0x01	; 1
    61f2:	80 93 d1 26 	sts	0x26D1, r24	; 0x8026d1 <g_adc_vbat_cnt>
    61f6:	90 93 d2 26 	sts	0x26D2, r25	; 0x8026d2 <g_adc_vbat_cnt+0x1>
    61fa:	8f 3f       	cpi	r24, 0xFF	; 255
    61fc:	91 05       	cpc	r25, r1
    61fe:	09 f0       	breq	.+2      	; 0x6202 <isr_adc_a+0x176>
    6200:	08 f4       	brcc	.+2      	; 0x6204 <isr_adc_a+0x178>
    6202:	a5 c0       	rjmp	.+330    	; 0x634e <isr_adc_a+0x2c2>
    6204:	68 94       	set
    6206:	16 f8       	bld	r1, 6
    6208:	75 95       	asr	r23
    620a:	67 95       	ror	r22
    620c:	57 95       	ror	r21
    620e:	47 95       	ror	r20
    6210:	16 94       	lsr	r1
    6212:	d1 f7       	brne	.-12     	; 0x6208 <isr_adc_a+0x17c>
    6214:	40 93 d7 26 	sts	0x26D7, r20	; 0x8026d7 <g_adc_vbat_cur>
    6218:	50 93 d8 26 	sts	0x26D8, r21	; 0x8026d8 <g_adc_vbat_cur+0x1>
    621c:	60 93 d9 26 	sts	0x26D9, r22	; 0x8026d9 <g_adc_vbat_cur+0x2>
    6220:	70 93 da 26 	sts	0x26DA, r23	; 0x8026da <g_adc_vbat_cur+0x3>
    6224:	10 92 d1 26 	sts	0x26D1, r1	; 0x8026d1 <g_adc_vbat_cnt>
    6228:	10 92 d2 26 	sts	0x26D2, r1	; 0x8026d2 <g_adc_vbat_cnt+0x1>
    622c:	10 92 d3 26 	sts	0x26D3, r1	; 0x8026d3 <g_adc_vbat_sum>
    6230:	10 92 d4 26 	sts	0x26D4, r1	; 0x8026d4 <g_adc_vbat_sum+0x1>
    6234:	10 92 d5 26 	sts	0x26D5, r1	; 0x8026d5 <g_adc_vbat_sum+0x2>
    6238:	10 92 d6 26 	sts	0x26D6, r1	; 0x8026d6 <g_adc_vbat_sum+0x3>
    623c:	08 95       	ret
    623e:	61 ff       	sbrs	r22, 1
    6240:	43 c0       	rjmp	.+134    	; 0x62c8 <isr_adc_a+0x23c>
    6242:	05 2e       	mov	r0, r21
    6244:	00 0c       	add	r0, r0
    6246:	66 0b       	sbc	r22, r22
    6248:	77 0b       	sbc	r23, r23
    624a:	80 91 c9 26 	lds	r24, 0x26C9	; 0x8026c9 <g_adc_io_adc4_sum>
    624e:	90 91 ca 26 	lds	r25, 0x26CA	; 0x8026ca <g_adc_io_adc4_sum+0x1>
    6252:	a0 91 cb 26 	lds	r26, 0x26CB	; 0x8026cb <g_adc_io_adc4_sum+0x2>
    6256:	b0 91 cc 26 	lds	r27, 0x26CC	; 0x8026cc <g_adc_io_adc4_sum+0x3>
    625a:	48 0f       	add	r20, r24
    625c:	59 1f       	adc	r21, r25
    625e:	6a 1f       	adc	r22, r26
    6260:	7b 1f       	adc	r23, r27
    6262:	40 93 c9 26 	sts	0x26C9, r20	; 0x8026c9 <g_adc_io_adc4_sum>
    6266:	50 93 ca 26 	sts	0x26CA, r21	; 0x8026ca <g_adc_io_adc4_sum+0x1>
    626a:	60 93 cb 26 	sts	0x26CB, r22	; 0x8026cb <g_adc_io_adc4_sum+0x2>
    626e:	70 93 cc 26 	sts	0x26CC, r23	; 0x8026cc <g_adc_io_adc4_sum+0x3>
    6272:	80 91 c7 26 	lds	r24, 0x26C7	; 0x8026c7 <g_adc_io_adc4_cnt>
    6276:	90 91 c8 26 	lds	r25, 0x26C8	; 0x8026c8 <g_adc_io_adc4_cnt+0x1>
    627a:	01 96       	adiw	r24, 0x01	; 1
    627c:	80 93 c7 26 	sts	0x26C7, r24	; 0x8026c7 <g_adc_io_adc4_cnt>
    6280:	90 93 c8 26 	sts	0x26C8, r25	; 0x8026c8 <g_adc_io_adc4_cnt+0x1>
    6284:	8f 3f       	cpi	r24, 0xFF	; 255
    6286:	91 05       	cpc	r25, r1
    6288:	09 f0       	breq	.+2      	; 0x628c <isr_adc_a+0x200>
    628a:	08 f4       	brcc	.+2      	; 0x628e <isr_adc_a+0x202>
    628c:	60 c0       	rjmp	.+192    	; 0x634e <isr_adc_a+0x2c2>
    628e:	68 94       	set
    6290:	16 f8       	bld	r1, 6
    6292:	75 95       	asr	r23
    6294:	67 95       	ror	r22
    6296:	57 95       	ror	r21
    6298:	47 95       	ror	r20
    629a:	16 94       	lsr	r1
    629c:	d1 f7       	brne	.-12     	; 0x6292 <isr_adc_a+0x206>
    629e:	40 93 cd 26 	sts	0x26CD, r20	; 0x8026cd <g_adc_io_adc4_cur>
    62a2:	50 93 ce 26 	sts	0x26CE, r21	; 0x8026ce <g_adc_io_adc4_cur+0x1>
    62a6:	60 93 cf 26 	sts	0x26CF, r22	; 0x8026cf <g_adc_io_adc4_cur+0x2>
    62aa:	70 93 d0 26 	sts	0x26D0, r23	; 0x8026d0 <g_adc_io_adc4_cur+0x3>
    62ae:	10 92 c7 26 	sts	0x26C7, r1	; 0x8026c7 <g_adc_io_adc4_cnt>
    62b2:	10 92 c8 26 	sts	0x26C8, r1	; 0x8026c8 <g_adc_io_adc4_cnt+0x1>
    62b6:	10 92 c9 26 	sts	0x26C9, r1	; 0x8026c9 <g_adc_io_adc4_sum>
    62ba:	10 92 ca 26 	sts	0x26CA, r1	; 0x8026ca <g_adc_io_adc4_sum+0x1>
    62be:	10 92 cb 26 	sts	0x26CB, r1	; 0x8026cb <g_adc_io_adc4_sum+0x2>
    62c2:	10 92 cc 26 	sts	0x26CC, r1	; 0x8026cc <g_adc_io_adc4_sum+0x3>
    62c6:	08 95       	ret
    62c8:	62 ff       	sbrs	r22, 2
    62ca:	41 c0       	rjmp	.+130    	; 0x634e <isr_adc_a+0x2c2>
    62cc:	05 2e       	mov	r0, r21
    62ce:	00 0c       	add	r0, r0
    62d0:	66 0b       	sbc	r22, r22
    62d2:	77 0b       	sbc	r23, r23
    62d4:	80 91 bf 26 	lds	r24, 0x26BF	; 0x8026bf <g_adc_io_adc5_sum>
    62d8:	90 91 c0 26 	lds	r25, 0x26C0	; 0x8026c0 <g_adc_io_adc5_sum+0x1>
    62dc:	a0 91 c1 26 	lds	r26, 0x26C1	; 0x8026c1 <g_adc_io_adc5_sum+0x2>
    62e0:	b0 91 c2 26 	lds	r27, 0x26C2	; 0x8026c2 <g_adc_io_adc5_sum+0x3>
    62e4:	48 0f       	add	r20, r24
    62e6:	59 1f       	adc	r21, r25
    62e8:	6a 1f       	adc	r22, r26
    62ea:	7b 1f       	adc	r23, r27
    62ec:	40 93 bf 26 	sts	0x26BF, r20	; 0x8026bf <g_adc_io_adc5_sum>
    62f0:	50 93 c0 26 	sts	0x26C0, r21	; 0x8026c0 <g_adc_io_adc5_sum+0x1>
    62f4:	60 93 c1 26 	sts	0x26C1, r22	; 0x8026c1 <g_adc_io_adc5_sum+0x2>
    62f8:	70 93 c2 26 	sts	0x26C2, r23	; 0x8026c2 <g_adc_io_adc5_sum+0x3>
    62fc:	80 91 bd 26 	lds	r24, 0x26BD	; 0x8026bd <g_adc_io_adc5_cnt>
    6300:	90 91 be 26 	lds	r25, 0x26BE	; 0x8026be <g_adc_io_adc5_cnt+0x1>
    6304:	01 96       	adiw	r24, 0x01	; 1
    6306:	80 93 bd 26 	sts	0x26BD, r24	; 0x8026bd <g_adc_io_adc5_cnt>
    630a:	90 93 be 26 	sts	0x26BE, r25	; 0x8026be <g_adc_io_adc5_cnt+0x1>
    630e:	8f 3f       	cpi	r24, 0xFF	; 255
    6310:	91 05       	cpc	r25, r1
    6312:	e9 f0       	breq	.+58     	; 0x634e <isr_adc_a+0x2c2>
    6314:	e0 f0       	brcs	.+56     	; 0x634e <isr_adc_a+0x2c2>
    6316:	68 94       	set
    6318:	16 f8       	bld	r1, 6
    631a:	75 95       	asr	r23
    631c:	67 95       	ror	r22
    631e:	57 95       	ror	r21
    6320:	47 95       	ror	r20
    6322:	16 94       	lsr	r1
    6324:	d1 f7       	brne	.-12     	; 0x631a <isr_adc_a+0x28e>
    6326:	40 93 c3 26 	sts	0x26C3, r20	; 0x8026c3 <g_adc_io_adc5_cur>
    632a:	50 93 c4 26 	sts	0x26C4, r21	; 0x8026c4 <g_adc_io_adc5_cur+0x1>
    632e:	60 93 c5 26 	sts	0x26C5, r22	; 0x8026c5 <g_adc_io_adc5_cur+0x2>
    6332:	70 93 c6 26 	sts	0x26C6, r23	; 0x8026c6 <g_adc_io_adc5_cur+0x3>
    6336:	10 92 bd 26 	sts	0x26BD, r1	; 0x8026bd <g_adc_io_adc5_cnt>
    633a:	10 92 be 26 	sts	0x26BE, r1	; 0x8026be <g_adc_io_adc5_cnt+0x1>
    633e:	10 92 bf 26 	sts	0x26BF, r1	; 0x8026bf <g_adc_io_adc5_sum>
    6342:	10 92 c0 26 	sts	0x26C0, r1	; 0x8026c0 <g_adc_io_adc5_sum+0x1>
    6346:	10 92 c1 26 	sts	0x26C1, r1	; 0x8026c1 <g_adc_io_adc5_sum+0x2>
    634a:	10 92 c2 26 	sts	0x26C2, r1	; 0x8026c2 <g_adc_io_adc5_sum+0x3>
    634e:	08 95       	ret

00006350 <isr_adc_b>:
    6350:	60 ff       	sbrs	r22, 0
    6352:	43 c0       	rjmp	.+134    	; 0x63da <isr_adc_b+0x8a>
    6354:	4e 5b       	subi	r20, 0xBE	; 190
    6356:	51 09       	sbc	r21, r1
    6358:	05 2e       	mov	r0, r21
    635a:	00 0c       	add	r0, r0
    635c:	66 0b       	sbc	r22, r22
    635e:	77 0b       	sbc	r23, r23
    6360:	80 91 b5 26 	lds	r24, 0x26B5	; 0x8026b5 <g_adc_temp_sum>
    6364:	90 91 b6 26 	lds	r25, 0x26B6	; 0x8026b6 <g_adc_temp_sum+0x1>
    6368:	a0 91 b7 26 	lds	r26, 0x26B7	; 0x8026b7 <g_adc_temp_sum+0x2>
    636c:	b0 91 b8 26 	lds	r27, 0x26B8	; 0x8026b8 <g_adc_temp_sum+0x3>
    6370:	48 0f       	add	r20, r24
    6372:	59 1f       	adc	r21, r25
    6374:	6a 1f       	adc	r22, r26
    6376:	7b 1f       	adc	r23, r27
    6378:	40 93 b5 26 	sts	0x26B5, r20	; 0x8026b5 <g_adc_temp_sum>
    637c:	50 93 b6 26 	sts	0x26B6, r21	; 0x8026b6 <g_adc_temp_sum+0x1>
    6380:	60 93 b7 26 	sts	0x26B7, r22	; 0x8026b7 <g_adc_temp_sum+0x2>
    6384:	70 93 b8 26 	sts	0x26B8, r23	; 0x8026b8 <g_adc_temp_sum+0x3>
    6388:	80 91 b3 26 	lds	r24, 0x26B3	; 0x8026b3 <g_adc_temp_cnt>
    638c:	90 91 b4 26 	lds	r25, 0x26B4	; 0x8026b4 <g_adc_temp_cnt+0x1>
    6390:	01 96       	adiw	r24, 0x01	; 1
    6392:	80 93 b3 26 	sts	0x26B3, r24	; 0x8026b3 <g_adc_temp_cnt>
    6396:	90 93 b4 26 	sts	0x26B4, r25	; 0x8026b4 <g_adc_temp_cnt+0x1>
    639a:	8f 3f       	cpi	r24, 0xFF	; 255
    639c:	91 05       	cpc	r25, r1
    639e:	e9 f0       	breq	.+58     	; 0x63da <isr_adc_b+0x8a>
    63a0:	e0 f0       	brcs	.+56     	; 0x63da <isr_adc_b+0x8a>
    63a2:	68 94       	set
    63a4:	16 f8       	bld	r1, 6
    63a6:	75 95       	asr	r23
    63a8:	67 95       	ror	r22
    63aa:	57 95       	ror	r21
    63ac:	47 95       	ror	r20
    63ae:	16 94       	lsr	r1
    63b0:	d1 f7       	brne	.-12     	; 0x63a6 <isr_adc_b+0x56>
    63b2:	40 93 b9 26 	sts	0x26B9, r20	; 0x8026b9 <g_adc_temp_cur>
    63b6:	50 93 ba 26 	sts	0x26BA, r21	; 0x8026ba <g_adc_temp_cur+0x1>
    63ba:	60 93 bb 26 	sts	0x26BB, r22	; 0x8026bb <g_adc_temp_cur+0x2>
    63be:	70 93 bc 26 	sts	0x26BC, r23	; 0x8026bc <g_adc_temp_cur+0x3>
    63c2:	10 92 b3 26 	sts	0x26B3, r1	; 0x8026b3 <g_adc_temp_cnt>
    63c6:	10 92 b4 26 	sts	0x26B4, r1	; 0x8026b4 <g_adc_temp_cnt+0x1>
    63ca:	10 92 b5 26 	sts	0x26B5, r1	; 0x8026b5 <g_adc_temp_sum>
    63ce:	10 92 b6 26 	sts	0x26B6, r1	; 0x8026b6 <g_adc_temp_sum+0x1>
    63d2:	10 92 b7 26 	sts	0x26B7, r1	; 0x8026b7 <g_adc_temp_sum+0x2>
    63d6:	10 92 b8 26 	sts	0x26B8, r1	; 0x8026b8 <g_adc_temp_sum+0x3>
    63da:	08 95       	ret

000063dc <task_dac>:
    63dc:	cf 93       	push	r28
    63de:	df 93       	push	r29
    63e0:	1f 92       	push	r1
    63e2:	1f 92       	push	r1
    63e4:	cd b7       	in	r28, 0x3d	; 61
    63e6:	de b7       	in	r29, 0x3e	; 62
    63e8:	8f b7       	in	r24, 0x3f	; 63
    63ea:	8a 83       	std	Y+2, r24	; 0x02
    63ec:	f8 94       	cli
    63ee:	8a 81       	ldd	r24, Y+2	; 0x02
    63f0:	8f bf       	out	0x3f, r24	; 63
    63f2:	80 91 65 25 	lds	r24, 0x2565	; 0x802565 <s_dds0_freq_mHz.7455>
    63f6:	90 91 66 25 	lds	r25, 0x2566	; 0x802566 <s_dds0_freq_mHz.7455+0x1>
    63fa:	a0 91 67 25 	lds	r26, 0x2567	; 0x802567 <s_dds0_freq_mHz.7455+0x2>
    63fe:	b0 91 68 25 	lds	r27, 0x2568	; 0x802568 <s_dds0_freq_mHz.7455+0x3>
    6402:	80 38       	cpi	r24, 0x80	; 128
    6404:	94 48       	sbci	r25, 0x84	; 132
    6406:	ae 41       	sbci	r26, 0x1E	; 30
    6408:	b1 05       	cpc	r27, r1
    640a:	69 f4       	brne	.+26     	; 0x6426 <task_dac+0x4a>
    640c:	80 91 61 25 	lds	r24, 0x2561	; 0x802561 <s_dds1_freq_mHz.7456>
    6410:	90 91 62 25 	lds	r25, 0x2562	; 0x802562 <s_dds1_freq_mHz.7456+0x1>
    6414:	a0 91 63 25 	lds	r26, 0x2563	; 0x802563 <s_dds1_freq_mHz.7456+0x2>
    6418:	b0 91 64 25 	lds	r27, 0x2564	; 0x802564 <s_dds1_freq_mHz.7456+0x3>
    641c:	8a 30       	cpi	r24, 0x0A	; 10
    641e:	99 40       	sbci	r25, 0x09	; 9
    6420:	ad 43       	sbci	r26, 0x3D	; 61
    6422:	b1 05       	cpc	r27, r1
    6424:	a9 f1       	breq	.+106    	; 0x6490 <task_dac+0xb4>
    6426:	80 e8       	ldi	r24, 0x80	; 128
    6428:	94 e8       	ldi	r25, 0x84	; 132
    642a:	ae e1       	ldi	r26, 0x1E	; 30
    642c:	b0 e0       	ldi	r27, 0x00	; 0
    642e:	80 93 65 25 	sts	0x2565, r24	; 0x802565 <s_dds0_freq_mHz.7455>
    6432:	90 93 66 25 	sts	0x2566, r25	; 0x802566 <s_dds0_freq_mHz.7455+0x1>
    6436:	a0 93 67 25 	sts	0x2567, r26	; 0x802567 <s_dds0_freq_mHz.7455+0x2>
    643a:	b0 93 68 25 	sts	0x2568, r27	; 0x802568 <s_dds0_freq_mHz.7455+0x3>
    643e:	8a e0       	ldi	r24, 0x0A	; 10
    6440:	99 e0       	ldi	r25, 0x09	; 9
    6442:	ad e3       	ldi	r26, 0x3D	; 61
    6444:	b0 e0       	ldi	r27, 0x00	; 0
    6446:	80 93 61 25 	sts	0x2561, r24	; 0x802561 <s_dds1_freq_mHz.7456>
    644a:	90 93 62 25 	sts	0x2562, r25	; 0x802562 <s_dds1_freq_mHz.7456+0x1>
    644e:	a0 93 63 25 	sts	0x2563, r26	; 0x802563 <s_dds1_freq_mHz.7456+0x2>
    6452:	b0 93 64 25 	sts	0x2564, r27	; 0x802564 <s_dds1_freq_mHz.7456+0x3>
    6456:	8f b7       	in	r24, 0x3f	; 63
    6458:	89 83       	std	Y+1, r24	; 0x01
    645a:	f8 94       	cli
    645c:	89 81       	ldd	r24, Y+1	; 0x01
    645e:	41 e5       	ldi	r20, 0x51	; 81
    6460:	58 eb       	ldi	r21, 0xB8	; 184
    6462:	6e e1       	ldi	r22, 0x1E	; 30
    6464:	75 e0       	ldi	r23, 0x05	; 5
    6466:	40 93 79 26 	sts	0x2679, r20	; 0x802679 <dds0_inc>
    646a:	50 93 7a 26 	sts	0x267A, r21	; 0x80267a <dds0_inc+0x1>
    646e:	60 93 7b 26 	sts	0x267B, r22	; 0x80267b <dds0_inc+0x2>
    6472:	70 93 7c 26 	sts	0x267C, r23	; 0x80267c <dds0_inc+0x3>
    6476:	41 e5       	ldi	r20, 0x51	; 81
    6478:	52 e7       	ldi	r21, 0x72	; 114
    647a:	6d e3       	ldi	r22, 0x3D	; 61
    647c:	7a e0       	ldi	r23, 0x0A	; 10
    647e:	40 93 71 26 	sts	0x2671, r20	; 0x802671 <dds1_inc>
    6482:	50 93 72 26 	sts	0x2672, r21	; 0x802672 <dds1_inc+0x1>
    6486:	60 93 73 26 	sts	0x2673, r22	; 0x802673 <dds1_inc+0x2>
    648a:	70 93 74 26 	sts	0x2674, r23	; 0x802674 <dds1_inc+0x3>
    648e:	8f bf       	out	0x3f, r24	; 63
    6490:	0f 90       	pop	r0
    6492:	0f 90       	pop	r0
    6494:	df 91       	pop	r29
    6496:	cf 91       	pop	r28
    6498:	08 95       	ret

0000649a <isr_tcc0_ovfl>:
    649a:	cf 92       	push	r12
    649c:	df 92       	push	r13
    649e:	ef 92       	push	r14
    64a0:	ff 92       	push	r15
    64a2:	0e 94 ae 12 	call	0x255c	; 0x255c <rtc_get_time>
    64a6:	6b 01       	movw	r12, r22
    64a8:	7c 01       	movw	r14, r24
    64aa:	78 94       	sei
    64ac:	80 91 6d 25 	lds	r24, 0x256D	; 0x80256d <last_10ms.7343>
    64b0:	90 91 6e 25 	lds	r25, 0x256E	; 0x80256e <last_10ms.7343+0x1>
    64b4:	a0 91 6f 25 	lds	r26, 0x256F	; 0x80256f <last_10ms.7343+0x2>
    64b8:	b0 91 70 25 	lds	r27, 0x2570	; 0x802570 <last_10ms.7343+0x3>
    64bc:	b7 01       	movw	r22, r14
    64be:	a6 01       	movw	r20, r12
    64c0:	48 1b       	sub	r20, r24
    64c2:	59 0b       	sbc	r21, r25
    64c4:	6a 0b       	sbc	r22, r26
    64c6:	7b 0b       	sbc	r23, r27
    64c8:	4a 30       	cpi	r20, 0x0A	; 10
    64ca:	51 05       	cpc	r21, r1
    64cc:	61 05       	cpc	r22, r1
    64ce:	71 05       	cpc	r23, r1
    64d0:	28 f4       	brcc	.+10     	; 0x64dc <isr_tcc0_ovfl+0x42>
    64d2:	c8 16       	cp	r12, r24
    64d4:	d9 06       	cpc	r13, r25
    64d6:	ea 06       	cpc	r14, r26
    64d8:	fb 06       	cpc	r15, r27
    64da:	60 f4       	brcc	.+24     	; 0x64f4 <isr_tcc0_ovfl+0x5a>
    64dc:	c0 92 6d 25 	sts	0x256D, r12	; 0x80256d <last_10ms.7343>
    64e0:	d0 92 6e 25 	sts	0x256E, r13	; 0x80256e <last_10ms.7343+0x1>
    64e4:	e0 92 6f 25 	sts	0x256F, r14	; 0x80256f <last_10ms.7343+0x2>
    64e8:	f0 92 70 25 	sts	0x2570, r15	; 0x802570 <last_10ms.7343+0x3>
    64ec:	c7 01       	movw	r24, r14
    64ee:	b6 01       	movw	r22, r12
    64f0:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <service_10ms_twi1_onboard>
    64f4:	80 91 69 25 	lds	r24, 0x2569	; 0x802569 <last_500ms.7344>
    64f8:	90 91 6a 25 	lds	r25, 0x256A	; 0x80256a <last_500ms.7344+0x1>
    64fc:	a0 91 6b 25 	lds	r26, 0x256B	; 0x80256b <last_500ms.7344+0x2>
    6500:	b0 91 6c 25 	lds	r27, 0x256C	; 0x80256c <last_500ms.7344+0x3>
    6504:	b7 01       	movw	r22, r14
    6506:	a6 01       	movw	r20, r12
    6508:	48 1b       	sub	r20, r24
    650a:	59 0b       	sbc	r21, r25
    650c:	6a 0b       	sbc	r22, r26
    650e:	7b 0b       	sbc	r23, r27
    6510:	41 15       	cp	r20, r1
    6512:	52 40       	sbci	r21, 0x02	; 2
    6514:	61 05       	cpc	r22, r1
    6516:	71 05       	cpc	r23, r1
    6518:	28 f4       	brcc	.+10     	; 0x6524 <isr_tcc0_ovfl+0x8a>
    651a:	c8 16       	cp	r12, r24
    651c:	d9 06       	cpc	r13, r25
    651e:	ea 06       	cpc	r14, r26
    6520:	fb 06       	cpc	r15, r27
    6522:	60 f4       	brcc	.+24     	; 0x653c <isr_tcc0_ovfl+0xa2>
    6524:	c0 92 69 25 	sts	0x2569, r12	; 0x802569 <last_500ms.7344>
    6528:	d0 92 6a 25 	sts	0x256A, r13	; 0x80256a <last_500ms.7344+0x1>
    652c:	e0 92 6b 25 	sts	0x256B, r14	; 0x80256b <last_500ms.7344+0x2>
    6530:	f0 92 6c 25 	sts	0x256C, r15	; 0x80256c <last_500ms.7344+0x3>
    6534:	c7 01       	movw	r24, r14
    6536:	b6 01       	movw	r22, r12
    6538:	0e 94 e5 15 	call	0x2bca	; 0x2bca <service_500ms_twi1_onboard>
    653c:	ff 90       	pop	r15
    653e:	ef 90       	pop	r14
    6540:	df 90       	pop	r13
    6542:	cf 90       	pop	r12
    6544:	08 95       	ret

00006546 <calc_next_frame>:
    6546:	8f 92       	push	r8
    6548:	9f 92       	push	r9
    654a:	af 92       	push	r10
    654c:	bf 92       	push	r11
    654e:	cf 92       	push	r12
    6550:	df 92       	push	r13
    6552:	ef 92       	push	r14
    6554:	ff 92       	push	r15
    6556:	0f 93       	push	r16
    6558:	1f 93       	push	r17
    655a:	cf 93       	push	r28
    655c:	df 93       	push	r29
    655e:	6b 01       	movw	r12, r22
    6560:	5a 01       	movw	r10, r20
    6562:	79 01       	movw	r14, r18
    6564:	48 01       	movw	r8, r16
    6566:	ec 01       	movw	r28, r24
    6568:	8c 01       	movw	r16, r24
    656a:	00 58       	subi	r16, 0x80	; 128
    656c:	1f 4f       	sbci	r17, 0xFF	; 255
    656e:	f6 01       	movw	r30, r12
    6570:	82 81       	ldd	r24, Z+2	; 0x02
    6572:	93 81       	ldd	r25, Z+3	; 0x03
    6574:	0e 94 3b 13 	call	0x2676	; 0x2676 <get_interpolated_sine>
    6578:	88 83       	st	Y, r24
    657a:	99 83       	std	Y+1, r25	; 0x01
    657c:	f7 01       	movw	r30, r14
    657e:	82 81       	ldd	r24, Z+2	; 0x02
    6580:	93 81       	ldd	r25, Z+3	; 0x03
    6582:	0e 94 3b 13 	call	0x2676	; 0x2676 <get_interpolated_sine>
    6586:	8a 83       	std	Y+2, r24	; 0x02
    6588:	9b 83       	std	Y+3, r25	; 0x03
    658a:	f6 01       	movw	r30, r12
    658c:	40 81       	ld	r20, Z
    658e:	51 81       	ldd	r21, Z+1	; 0x01
    6590:	62 81       	ldd	r22, Z+2	; 0x02
    6592:	73 81       	ldd	r23, Z+3	; 0x03
    6594:	f5 01       	movw	r30, r10
    6596:	80 81       	ld	r24, Z
    6598:	91 81       	ldd	r25, Z+1	; 0x01
    659a:	a2 81       	ldd	r26, Z+2	; 0x02
    659c:	b3 81       	ldd	r27, Z+3	; 0x03
    659e:	84 0f       	add	r24, r20
    65a0:	95 1f       	adc	r25, r21
    65a2:	a6 1f       	adc	r26, r22
    65a4:	b7 1f       	adc	r27, r23
    65a6:	f6 01       	movw	r30, r12
    65a8:	80 83       	st	Z, r24
    65aa:	91 83       	std	Z+1, r25	; 0x01
    65ac:	a2 83       	std	Z+2, r26	; 0x02
    65ae:	b3 83       	std	Z+3, r27	; 0x03
    65b0:	f7 01       	movw	r30, r14
    65b2:	40 81       	ld	r20, Z
    65b4:	51 81       	ldd	r21, Z+1	; 0x01
    65b6:	62 81       	ldd	r22, Z+2	; 0x02
    65b8:	73 81       	ldd	r23, Z+3	; 0x03
    65ba:	f4 01       	movw	r30, r8
    65bc:	80 81       	ld	r24, Z
    65be:	91 81       	ldd	r25, Z+1	; 0x01
    65c0:	a2 81       	ldd	r26, Z+2	; 0x02
    65c2:	b3 81       	ldd	r27, Z+3	; 0x03
    65c4:	84 0f       	add	r24, r20
    65c6:	95 1f       	adc	r25, r21
    65c8:	a6 1f       	adc	r26, r22
    65ca:	b7 1f       	adc	r27, r23
    65cc:	f7 01       	movw	r30, r14
    65ce:	80 83       	st	Z, r24
    65d0:	91 83       	std	Z+1, r25	; 0x01
    65d2:	a2 83       	std	Z+2, r26	; 0x02
    65d4:	b3 83       	std	Z+3, r27	; 0x03
    65d6:	24 96       	adiw	r28, 0x04	; 4
    65d8:	c0 17       	cp	r28, r16
    65da:	d1 07       	cpc	r29, r17
    65dc:	41 f6       	brne	.-112    	; 0x656e <calc_next_frame+0x28>
    65de:	df 91       	pop	r29
    65e0:	cf 91       	pop	r28
    65e2:	1f 91       	pop	r17
    65e4:	0f 91       	pop	r16
    65e6:	ff 90       	pop	r15
    65e8:	ef 90       	pop	r14
    65ea:	df 90       	pop	r13
    65ec:	cf 90       	pop	r12
    65ee:	bf 90       	pop	r11
    65f0:	af 90       	pop	r10
    65f2:	9f 90       	pop	r9
    65f4:	8f 90       	pop	r8
    65f6:	08 95       	ret

000065f8 <isr_dma_dac_ch0_B>:
    65f8:	0f 93       	push	r16
    65fa:	1f 93       	push	r17
    65fc:	cf 93       	push	r28
    65fe:	df 93       	push	r29
    6600:	1f 92       	push	r1
    6602:	cd b7       	in	r28, 0x3d	; 61
    6604:	de b7       	in	r29, 0x3e	; 62
    6606:	8f b7       	in	r24, 0x3f	; 63
    6608:	89 83       	std	Y+1, r24	; 0x01
    660a:	f8 94       	cli
    660c:	99 81       	ldd	r25, Y+1	; 0x01
    660e:	e0 e1       	ldi	r30, 0x10	; 16
    6610:	f1 e0       	ldi	r31, 0x01	; 1
    6612:	80 81       	ld	r24, Z
    6614:	80 68       	ori	r24, 0x80	; 128
    6616:	80 83       	st	Z, r24
    6618:	9f bf       	out	0x3f, r25	; 63
    661a:	78 94       	sei
    661c:	01 e7       	ldi	r16, 0x71	; 113
    661e:	16 e2       	ldi	r17, 0x26	; 38
    6620:	26 e0       	ldi	r18, 0x06	; 6
    6622:	30 e2       	ldi	r19, 0x20	; 32
    6624:	49 e7       	ldi	r20, 0x79	; 121
    6626:	56 e2       	ldi	r21, 0x26	; 38
    6628:	65 e7       	ldi	r22, 0x75	; 117
    662a:	76 e2       	ldi	r23, 0x26	; 38
    662c:	81 ef       	ldi	r24, 0xF1	; 241
    662e:	95 e2       	ldi	r25, 0x25	; 37
    6630:	8a df       	rcall	.-236    	; 0x6546 <calc_next_frame>
    6632:	0f 90       	pop	r0
    6634:	df 91       	pop	r29
    6636:	cf 91       	pop	r28
    6638:	1f 91       	pop	r17
    663a:	0f 91       	pop	r16
    663c:	08 95       	ret

0000663e <isr_dma_dac_ch0_A>:
    663e:	0f 93       	push	r16
    6640:	1f 93       	push	r17
    6642:	cf 93       	push	r28
    6644:	df 93       	push	r29
    6646:	1f 92       	push	r1
    6648:	cd b7       	in	r28, 0x3d	; 61
    664a:	de b7       	in	r29, 0x3e	; 62
    664c:	8f b7       	in	r24, 0x3f	; 63
    664e:	89 83       	std	Y+1, r24	; 0x01
    6650:	f8 94       	cli
    6652:	99 81       	ldd	r25, Y+1	; 0x01
    6654:	e0 e2       	ldi	r30, 0x20	; 32
    6656:	f1 e0       	ldi	r31, 0x01	; 1
    6658:	80 81       	ld	r24, Z
    665a:	80 68       	ori	r24, 0x80	; 128
    665c:	80 83       	st	Z, r24
    665e:	9f bf       	out	0x3f, r25	; 63
    6660:	78 94       	sei
    6662:	01 e7       	ldi	r16, 0x71	; 113
    6664:	16 e2       	ldi	r17, 0x26	; 38
    6666:	26 e0       	ldi	r18, 0x06	; 6
    6668:	30 e2       	ldi	r19, 0x20	; 32
    666a:	49 e7       	ldi	r20, 0x79	; 121
    666c:	56 e2       	ldi	r21, 0x26	; 38
    666e:	65 e7       	ldi	r22, 0x75	; 117
    6670:	76 e2       	ldi	r23, 0x26	; 38
    6672:	81 e7       	ldi	r24, 0x71	; 113
    6674:	95 e2       	ldi	r25, 0x25	; 37
    6676:	67 df       	rcall	.-306    	; 0x6546 <calc_next_frame>
    6678:	0f 90       	pop	r0
    667a:	df 91       	pop	r29
    667c:	cf 91       	pop	r28
    667e:	1f 91       	pop	r17
    6680:	0f 91       	pop	r16
    6682:	08 95       	ret

00006684 <usb_callback_suspend_action>:
    6684:	08 95       	ret

00006686 <usb_callback_resume_action>:
    6686:	08 95       	ret

00006688 <usb_callback_remotewakeup_enable>:
    6688:	08 95       	ret

0000668a <usb_callback_remotewakeup_disable>:
    668a:	08 95       	ret

0000668c <usb_callback_cdc_enable>:

bool usb_callback_cdc_enable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = true;
    668c:	81 e0       	ldi	r24, 0x01	; 1
    668e:	80 93 36 27 	sts	0x2736, r24	; 0x802736 <usb_cdc_transfers_autorized>
	return true;
}
    6692:	08 95       	ret

00006694 <usb_callback_cdc_disable>:

void usb_callback_cdc_disable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = false;
    6694:	10 92 36 27 	sts	0x2736, r1	; 0x802736 <usb_cdc_transfers_autorized>
    6698:	08 95       	ret

0000669a <usb_callback_config>:
}

void usb_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    669a:	08 95       	ret

0000669c <usb_callback_cdc_set_dtr>:

}

void usb_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
    669c:	08 95       	ret

0000669e <usb_callback_cdc_set_rts>:

}

void usb_callback_cdc_set_rts(uint8_t port, bool b_enable)
{
    669e:	08 95       	ret

000066a0 <usb_callback_rx_notify>:

}

void usb_callback_rx_notify(uint8_t port)
{
    66a0:	08 95       	ret

000066a2 <usb_callback_tx_empty_notify>:

}

void usb_callback_tx_empty_notify(uint8_t port)
{
    66a2:	08 95       	ret

000066a4 <main>:
	task_usb();												// Handling the USB connection
}


int main(void)
{
    66a4:	2f 92       	push	r2
    66a6:	3f 92       	push	r3
    66a8:	4f 92       	push	r4
    66aa:	5f 92       	push	r5
    66ac:	6f 92       	push	r6
    66ae:	7f 92       	push	r7
    66b0:	8f 92       	push	r8
    66b2:	9f 92       	push	r9
    66b4:	af 92       	push	r10
    66b6:	bf 92       	push	r11
    66b8:	cf 92       	push	r12
    66ba:	df 92       	push	r13
    66bc:	ef 92       	push	r14
    66be:	ff 92       	push	r15
    66c0:	0f 93       	push	r16
    66c2:	1f 93       	push	r17
    66c4:	cf 93       	push	r28
    66c6:	df 93       	push	r29
    66c8:	cd b7       	in	r28, 0x3d	; 61
    66ca:	de b7       	in	r29, 0x3e	; 62
    66cc:	68 97       	sbiw	r28, 0x18	; 24
    66ce:	cd bf       	out	0x3d, r28	; 61
    66d0:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	/* Init of interrupt system */
	irq_initialize_vectors();
    66d2:	e0 ea       	ldi	r30, 0xA0	; 160
    66d4:	f0 e0       	ldi	r31, 0x00	; 0
    66d6:	0f 2e       	mov	r0, r31
    66d8:	f7 e0       	ldi	r31, 0x07	; 7
    66da:	df 2e       	mov	r13, r31
    66dc:	f0 2d       	mov	r31, r0
    66de:	d2 82       	std	Z+2, r13	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    66e0:	d2 82       	std	Z+2, r13	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    66e2:	82 81       	ldd	r24, Z+2	; 0x02
    66e4:	8f 77       	andi	r24, 0x7F	; 127
    66e6:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);

	sysclk_init();		// Clock configuration set-up
    66e8:	11 82       	std	Z+1, r1	; 0x01
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    66ea:	33 d4       	rcall	.+2150   	; 0x6f52 <sysclk_init>
    66ec:	ef e8       	ldi	r30, 0x8F	; 143
    66ee:	f8 e2       	ldi	r31, 0x28	; 40
    66f0:	10 82       	st	Z, r1
    66f2:	11 82       	std	Z+1, r1	; 0x01
    66f4:	12 82       	std	Z+2, r1	; 0x02
    66f6:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    66f8:	14 82       	std	Z+4, r1	; 0x04
    66fa:	55 24       	eor	r5, r5
    66fc:	53 94       	inc	r5

	sleepmgr_init();	// Unlocks all sleep mode levels

	rtc_init();
    66fe:	55 82       	std	Z+5, r5	; 0x05
    6700:	0e 94 c4 12 	call	0x2588	; 0x2588 <rtc_init>
}


static void rtc_start(void)
{
	rtc_set_callback(isr_rtc_alarm);
    6704:	85 e4       	ldi	r24, 0x45	; 69
    6706:	90 e3       	ldi	r25, 0x30	; 48
    6708:	0e 94 bf 12 	call	0x257e	; 0x257e <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    670c:	62 e0       	ldi	r22, 0x02	; 2
    670e:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event channels 0, 1, 2, 3 */
	EVSYS.CH0MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH0
    6710:	a1 d4       	rcall	.+2370   	; 0x7054 <sysclk_enable_module>
    6712:	e0 e8       	ldi	r30, 0x80	; 128
    6714:	f1 e0       	ldi	r31, 0x01	; 1
    6716:	86 ec       	ldi	r24, 0xC6	; 198
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH0 no digital filtering
    6718:	80 83       	st	Z, r24
	EVSYS.CH1MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH1
    671a:	10 86       	std	Z+8, r1	; 0x08
	EVSYS.CH1CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH1 no digital filtering
    671c:	81 83       	std	Z+1, r24	; 0x01
	EVSYS.CH2MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH2
    671e:	11 86       	std	Z+9, r1	; 0x09
	EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH2 no digital filtering
    6720:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH3MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH3
    6722:	12 86       	std	Z+10, r1	; 0x0a
	EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH3 no digital filtering
    6724:	83 83       	std	Z+3, r24	; 0x03

	/* DAC - event 4 */
	EVSYS.CH4MUX  = EVSYS_CHMUX_TCE1_OVF_gc;									// TCE1 overflow goes to EVSYS CH4
    6726:	13 86       	std	Z+11, r1	; 0x0b
    6728:	88 ee       	ldi	r24, 0xE8	; 232
	EVSYS.CH4CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH4 no digital filtering
    672a:	84 83       	std	Z+4, r24	; 0x04

static void tc_init(void)
{
	/* TCC0: VCTCXO PWM signal generation and ADCA & ADCB */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 2560);						// Init PWM structure and enable timer - running with 2560 Hz
    672c:	14 86       	std	Z+12, r1	; 0x0c
    672e:	20 e0       	ldi	r18, 0x00	; 0
    6730:	3a e0       	ldi	r19, 0x0A	; 10
    6732:	43 e0       	ldi	r20, 0x03	; 3
    6734:	60 e0       	ldi	r22, 0x00	; 0
    6736:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM here. Percentage with 1% granularity is to coarse, use driver access instead
    6738:	01 96       	adiw	r24, 0x01	; 1
    673a:	82 db       	rcall	.-2300   	; 0x5e40 <pwm_init>
    673c:	6d e2       	ldi	r22, 0x2D	; 45
    673e:	ce 01       	movw	r24, r28
	tc_write_cc_buffer(&TCC0, TC_CCC, (uint16_t) (0.5f + pwm_vctcxo_cfg.period * C_VCTCXO_DEFAULT_VOLTS / C_VCTCXO_PWM_HI_VOLTS));	// Initial value for VCTCXO
    6740:	01 96       	adiw	r24, 0x01	; 1
    6742:	46 dc       	rcall	.-1908   	; 0x5fd0 <pwm_start>
    6744:	6e 81       	ldd	r22, Y+6	; 0x06
    6746:	7f 81       	ldd	r23, Y+7	; 0x07
    6748:	80 e0       	ldi	r24, 0x00	; 0
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	0e 94 4e 42 	call	0x849c	; 0x849c <__floatunsisf>
    6750:	20 e0       	ldi	r18, 0x00	; 0
    6752:	30 e0       	ldi	r19, 0x00	; 0
    6754:	40 ec       	ldi	r20, 0xC0	; 192
    6756:	5f e3       	ldi	r21, 0x3F	; 63
    6758:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    675c:	27 e2       	ldi	r18, 0x27	; 39
    675e:	31 e3       	ldi	r19, 0x31	; 49
    6760:	40 e5       	ldi	r20, 0x50	; 80
    6762:	50 e4       	ldi	r21, 0x40	; 64
    6764:	0e 94 ba 41 	call	0x8374	; 0x8374 <__divsf3>
    6768:	20 e0       	ldi	r18, 0x00	; 0
    676a:	30 e0       	ldi	r19, 0x00	; 0
    676c:	40 e0       	ldi	r20, 0x00	; 0
    676e:	5f e3       	ldi	r21, 0x3F	; 63
    6770:	0e 94 56 41 	call	0x82ac	; 0x82ac <__addsf3>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    6774:	0e 94 22 42 	call	0x8444	; 0x8444 <__fixunssfsi>
    6778:	00 e0       	ldi	r16, 0x00	; 0
    677a:	18 e0       	ldi	r17, 0x08	; 8
    677c:	d8 01       	movw	r26, r16
    677e:	dc 96       	adiw	r26, 0x3c	; 60
    6780:	6d 93       	st	X+, r22

	/* TCE1: DAC clock */
	tc_enable(&TCE1);
    6782:	7c 93       	st	X, r23
    6784:	dd 97       	sbiw	r26, 0x3d	; 61
    6786:	80 e4       	ldi	r24, 0x40	; 64
    6788:	9a e0       	ldi	r25, 0x0A	; 10
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    678a:	0e 94 c9 24 	call	0x4992	; 0x4992 <tc_enable>
    678e:	0f 2e       	mov	r0, r31
    6790:	f0 e4       	ldi	r31, 0x40	; 64
    6792:	ef 2e       	mov	r14, r31
    6794:	fa e0       	ldi	r31, 0x0A	; 10
    6796:	ff 2e       	mov	r15, r31
    6798:	f0 2d       	mov	r31, r0
    679a:	f7 01       	movw	r30, r14
    679c:	81 81       	ldd	r24, Z+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    679e:	88 7f       	andi	r24, 0xF8	; 248
    67a0:	81 83       	std	Z+1, r24	; 0x01
    67a2:	8b e2       	ldi	r24, 0x2B	; 43
    67a4:	91 e0       	ldi	r25, 0x01	; 1


static void adc_init(void)
{
	/* Disable digital circuits of ADC pins */
	PORTA_PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    67a6:	86 a3       	std	Z+38, r24	; 0x26
    67a8:	97 a3       	std	Z+39, r25	; 0x27
    67aa:	e0 e1       	ldi	r30, 0x10	; 16
    67ac:	f6 e0       	ldi	r31, 0x06	; 6
    67ae:	80 81       	ld	r24, Z
	PORTA_PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    67b0:	87 60       	ori	r24, 0x07	; 7
    67b2:	80 83       	st	Z, r24
    67b4:	e1 e1       	ldi	r30, 0x11	; 17
    67b6:	f6 e0       	ldi	r31, 0x06	; 6
    67b8:	80 81       	ld	r24, Z
	PORTA_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    67ba:	87 60       	ori	r24, 0x07	; 7
    67bc:	80 83       	st	Z, r24
    67be:	e2 e1       	ldi	r30, 0x12	; 18
    67c0:	f6 e0       	ldi	r31, 0x06	; 6
    67c2:	80 81       	ld	r24, Z
	PORTA_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    67c4:	87 60       	ori	r24, 0x07	; 7
    67c6:	80 83       	st	Z, r24
    67c8:	e3 e1       	ldi	r30, 0x13	; 19
    67ca:	f6 e0       	ldi	r31, 0x06	; 6
    67cc:	80 81       	ld	r24, Z
	PORTA_PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    67ce:	87 60       	ori	r24, 0x07	; 7
    67d0:	80 83       	st	Z, r24
    67d2:	e4 e1       	ldi	r30, 0x14	; 20
    67d4:	f6 e0       	ldi	r31, 0x06	; 6
    67d6:	80 81       	ld	r24, Z
	PORTA_PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    67d8:	87 60       	ori	r24, 0x07	; 7
    67da:	80 83       	st	Z, r24
    67dc:	e5 e1       	ldi	r30, 0x15	; 21
    67de:	f6 e0       	ldi	r31, 0x06	; 6
    67e0:	80 81       	ld	r24, Z
	PORTB_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    67e2:	87 60       	ori	r24, 0x07	; 7
    67e4:	80 83       	st	Z, r24
    67e6:	e2 e3       	ldi	r30, 0x32	; 50
    67e8:	f6 e0       	ldi	r31, 0x06	; 6
    67ea:	80 81       	ld	r24, Z
	PORTB_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    67ec:	87 60       	ori	r24, 0x07	; 7
    67ee:	80 83       	st	Z, r24
    67f0:	e3 e3       	ldi	r30, 0x33	; 51
    67f2:	f6 e0       	ldi	r31, 0x06	; 6
    67f4:	80 81       	ld	r24, Z

	/* Prepare the structures */
	adc_read_configuration(&ADC_VCTCXO_5V0_VBAT,							&g_adc_a_conf);
    67f6:	87 60       	ori	r24, 0x07	; 7
    67f8:	80 83       	st	Z, r24
    67fa:	66 e0       	ldi	r22, 0x06	; 6
    67fc:	77 e2       	ldi	r23, 0x27	; 39
    67fe:	80 e0       	ldi	r24, 0x00	; 0
    6800:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    6802:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <adc_read_configuration>
    6806:	42 e0       	ldi	r20, 0x02	; 2
    6808:	57 e2       	ldi	r21, 0x27	; 39
    680a:	61 e0       	ldi	r22, 0x01	; 1
    680c:	80 e0       	ldi	r24, 0x00	; 0
    680e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    6810:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <adcch_read_configuration>
    6814:	4e ef       	ldi	r20, 0xFE	; 254
    6816:	56 e2       	ldi	r21, 0x26	; 38
    6818:	62 e0       	ldi	r22, 0x02	; 2
    681a:	80 e0       	ldi	r24, 0x00	; 0
    681c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    681e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <adcch_read_configuration>
    6822:	4a ef       	ldi	r20, 0xFA	; 250
    6824:	56 e2       	ldi	r21, 0x26	; 38
    6826:	64 e0       	ldi	r22, 0x04	; 4
    6828:	80 e0       	ldi	r24, 0x00	; 0
    682a:	92 e0       	ldi	r25, 0x02	; 2
	adc_read_configuration(&ADC_TEMP,										&g_adc_b_conf);
    682c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <adcch_read_configuration>
    6830:	63 ef       	ldi	r22, 0xF3	; 243
    6832:	76 e2       	ldi	r23, 0x26	; 38
    6834:	80 e4       	ldi	r24, 0x40	; 64
    6836:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    6838:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <adc_read_configuration>
    683c:	4f ee       	ldi	r20, 0xEF	; 239
    683e:	56 e2       	ldi	r21, 0x26	; 38
    6840:	61 e0       	ldi	r22, 0x01	; 1
    6842:	80 e4       	ldi	r24, 0x40	; 64
    6844:	92 e0       	ldi	r25, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    6846:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <adcch_read_configuration>
    684a:	a6 e0       	ldi	r26, 0x06	; 6
    684c:	b7 e2       	ldi	r27, 0x27	; 39
    684e:	83 e0       	ldi	r24, 0x03	; 3
    6850:	14 96       	adiw	r26, 0x04	; 4
    6852:	8c 93       	st	X, r24
    6854:	14 97       	sbiw	r26, 0x04	; 4
    6856:	63 ef       	ldi	r22, 0xF3	; 243
    6858:	76 e2       	ldi	r23, 0x26	; 38
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_disable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl &= ~int_inp;
    685a:	fb 01       	movw	r30, r22
    685c:	d4 82       	std	Z+4, r13	; 0x04
    685e:	12 96       	adiw	r26, 0x02	; 2
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    6860:	3c 91       	ld	r19, X
 * \note Not all device families feature this setting.
 */
static inline void adc_set_current_limit(struct adc_config *conf,
		enum adc_current_limit currlimit)
{
	conf->ctrlb &= ~ADC_CURRLIMIT_gm;
    6862:	12 97       	sbiw	r26, 0x02	; 2
    6864:	22 81       	ldd	r18, Z+2	; 0x02
    6866:	11 96       	adiw	r26, 0x01	; 1
    6868:	9c 91       	ld	r25, X
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    686a:	11 97       	sbiw	r26, 0x01	; 1
    686c:	81 81       	ldd	r24, Z+1	; 0x01
    686e:	0f 2e       	mov	r0, r31
    6870:	f2 e0       	ldi	r31, 0x02	; 2
    6872:	cf 2e       	mov	r12, r31
    6874:	f7 e2       	ldi	r31, 0x27	; 39
    6876:	df 2e       	mov	r13, r31
    6878:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    687a:	f6 01       	movw	r30, r12
    687c:	50 82       	st	Z, r5
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    687e:	48 e0       	ldi	r20, 0x08	; 8
    6880:	41 83       	std	Z+1, r20	; 0x01
    6882:	0f 2e       	mov	r0, r31
    6884:	fe ef       	ldi	r31, 0xFE	; 254
    6886:	8f 2e       	mov	r8, r31
    6888:	f6 e2       	ldi	r31, 0x26	; 38
    688a:	9f 2e       	mov	r9, r31
    688c:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    688e:	f4 01       	movw	r30, r8
    6890:	50 82       	st	Z, r5
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    6892:	40 e2       	ldi	r20, 0x20	; 32
    6894:	41 83       	std	Z+1, r20	; 0x01
    6896:	0f 2e       	mov	r0, r31
    6898:	fa ef       	ldi	r31, 0xFA	; 250
    689a:	af 2e       	mov	r10, r31
    689c:	f6 e2       	ldi	r31, 0x26	; 38
    689e:	bf 2e       	mov	r11, r31
    68a0:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    68a2:	f5 01       	movw	r30, r10
    68a4:	50 82       	st	Z, r5
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    68a6:	48 e2       	ldi	r20, 0x28	; 40
    68a8:	41 83       	std	Z+1, r20	; 0x01
    68aa:	0f 2e       	mov	r0, r31
    68ac:	ff ee       	ldi	r31, 0xEF	; 239
    68ae:	6f 2e       	mov	r6, r31
    68b0:	f6 e2       	ldi	r31, 0x26	; 38
    68b2:	7f 2e       	mov	r7, r31
    68b4:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    68b6:	f3 01       	movw	r30, r6
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    68b8:	10 82       	st	Z, r1
    68ba:	11 82       	std	Z+1, r1	; 0x01
    68bc:	3c 78       	andi	r19, 0x8C	; 140
    68be:	30 62       	ori	r19, 0x20	; 32
    68c0:	12 96       	adiw	r26, 0x02	; 2
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    68c2:	3c 93       	st	X, r19
    68c4:	12 97       	sbiw	r26, 0x02	; 2
    68c6:	2f 78       	andi	r18, 0x8F	; 143
    68c8:	23 60       	ori	r18, 0x03	; 3
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    68ca:	fb 01       	movw	r30, r22
    68cc:	22 83       	std	Z+2, r18	; 0x02
    68ce:	22 e0       	ldi	r18, 0x02	; 2
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    68d0:	f6 01       	movw	r30, r12
    68d2:	23 83       	std	Z+3, r18	; 0x03
    68d4:	91 70       	andi	r25, 0x01	; 1
    68d6:	90 62       	ori	r25, 0x20	; 32
    68d8:	11 96       	adiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    68da:	9c 93       	st	X, r25
    68dc:	11 97       	sbiw	r26, 0x01	; 1
    68de:	0f 2e       	mov	r0, r31
    68e0:	fb e0       	ldi	r31, 0x0B	; 11
    68e2:	4f 2e       	mov	r4, r31
    68e4:	f0 2d       	mov	r31, r0
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    68e6:	13 96       	adiw	r26, 0x03	; 3
    68e8:	4c 92       	st	X, r4
    68ea:	81 70       	andi	r24, 0x01	; 1
    68ec:	80 66       	ori	r24, 0x60	; 96
    68ee:	db 01       	movw	r26, r22
    68f0:	11 96       	adiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    68f2:	8c 93       	st	X, r24
    68f4:	11 97       	sbiw	r26, 0x01	; 1
	/* Trigger */
	adc_set_conversion_trigger(&g_adc_a_conf, ADC_TRIG_EVENT_SINGLE, 3, 1);
	adc_set_conversion_trigger(&g_adc_b_conf, ADC_TRIG_EVENT_SINGLE, 1, 0);

	/* Interrupt service routine */
	adc_set_callback(&ADCA, isr_adc_a);
    68f6:	13 96       	adiw	r26, 0x03	; 3
    68f8:	5c 92       	st	X, r5
    68fa:	66 e4       	ldi	r22, 0x46	; 70
    68fc:	70 e3       	ldi	r23, 0x30	; 48
    68fe:	80 e0       	ldi	r24, 0x00	; 0
    6900:	92 e0       	ldi	r25, 0x02	; 2
	adc_set_callback(&ADCB, isr_adc_b);
    6902:	0e 94 4a 1a 	call	0x3494	; 0x3494 <adc_set_callback>
    6906:	68 ea       	ldi	r22, 0xA8	; 168
    6908:	71 e3       	ldi	r23, 0x31	; 49
    690a:	80 e4       	ldi	r24, 0x40	; 64
    690c:	92 e0       	ldi	r25, 0x02	; 2
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    690e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <adc_set_callback>
    6912:	f4 01       	movw	r30, r8
    6914:	22 81       	ldd	r18, Z+2	; 0x02
    6916:	d5 01       	movw	r26, r10
    6918:	12 96       	adiw	r26, 0x02	; 2
    691a:	9c 91       	ld	r25, X
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    691c:	f3 01       	movw	r30, r6
    691e:	82 81       	ldd	r24, Z+2	; 0x02
    6920:	d6 01       	movw	r26, r12
    6922:	12 96       	adiw	r26, 0x02	; 2
    6924:	3c 91       	ld	r19, X
    6926:	12 97       	sbiw	r26, 0x02	; 2
    6928:	30 7f       	andi	r19, 0xF0	; 240
    692a:	31 60       	ori	r19, 0x01	; 1
    692c:	12 96       	adiw	r26, 0x02	; 2
    692e:	3c 93       	st	X, r19
    6930:	20 7f       	andi	r18, 0xF0	; 240
    6932:	21 60       	ori	r18, 0x01	; 1
    6934:	f4 01       	movw	r30, r8
    6936:	22 83       	std	Z+2, r18	; 0x02
    6938:	90 7f       	andi	r25, 0xF0	; 240
    693a:	91 60       	ori	r25, 0x01	; 1
    693c:	d5 01       	movw	r26, r10
    693e:	12 96       	adiw	r26, 0x02	; 2
    6940:	9c 93       	st	X, r25
    6942:	80 7f       	andi	r24, 0xF0	; 240
    6944:	81 60       	ori	r24, 0x01	; 1
	adcch_enable_interrupt(&g_adcch_io_adc4_conf);
	adcch_enable_interrupt(&g_adcch_io_adc5_conf);
	adcch_enable_interrupt(&g_adcch_temp_conf);

	/* Execute the new settings */
	adc_write_configuration(&ADCA,											&g_adc_a_conf);
    6946:	f3 01       	movw	r30, r6
    6948:	82 83       	std	Z+2, r24	; 0x02
    694a:	66 e0       	ldi	r22, 0x06	; 6
    694c:	77 e2       	ldi	r23, 0x27	; 39
    694e:	80 e0       	ldi	r24, 0x00	; 0
    6950:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO_5V0_VBAT,	ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    6952:	0e 94 66 1c 	call	0x38cc	; 0x38cc <adc_write_configuration>
    6956:	a6 01       	movw	r20, r12
    6958:	61 e0       	ldi	r22, 0x01	; 1
    695a:	80 e0       	ldi	r24, 0x00	; 0
    695c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4,			ADC_IO_ADC4_CH,			&g_adcch_io_adc4_conf);
    695e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <adcch_write_configuration>
    6962:	a4 01       	movw	r20, r8
    6964:	62 e0       	ldi	r22, 0x02	; 2
    6966:	80 e0       	ldi	r24, 0x00	; 0
    6968:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5,			ADC_IO_ADC5_CH,			&g_adcch_io_adc5_conf);
    696a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <adcch_write_configuration>
    696e:	a5 01       	movw	r20, r10
    6970:	64 e0       	ldi	r22, 0x04	; 4
    6972:	80 e0       	ldi	r24, 0x00	; 0
    6974:	92 e0       	ldi	r25, 0x02	; 2
	adc_write_configuration(&ADCB,											&g_adc_b_conf);
    6976:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <adcch_write_configuration>
    697a:	63 ef       	ldi	r22, 0xF3	; 243
    697c:	76 e2       	ldi	r23, 0x26	; 38
    697e:	80 e4       	ldi	r24, 0x40	; 64
    6980:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_TEMP,			ADC_TEMP_CH,			&g_adcch_temp_conf);
    6982:	0e 94 66 1c 	call	0x38cc	; 0x38cc <adc_write_configuration>
    6986:	a3 01       	movw	r20, r6
    6988:	61 e0       	ldi	r22, 0x01	; 1
    698a:	80 e4       	ldi	r24, 0x40	; 64
    698c:	92 e0       	ldi	r25, 0x02	; 2
    698e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <adcch_write_configuration>
    6992:	61 e2       	ldi	r22, 0x21	; 33
    6994:	70 e0       	ldi	r23, 0x00	; 0
    6996:	82 e0       	ldi	r24, 0x02	; 2
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    6998:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
		data <<= 8;
    699c:	c8 2e       	mov	r12, r24
    699e:	d1 2c       	mov	r13, r1
    69a0:	dc 2c       	mov	r13, r12
    69a2:	cc 24       	eor	r12, r12
    69a4:	60 e2       	ldi	r22, 0x20	; 32
    69a6:	70 e0       	ldi	r23, 0x00	; 0
    69a8:	82 e0       	ldi	r24, 0x02	; 2
		data |= nvm_read_production_signature_row(ADCACAL0);
    69aa:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>

	/* Get production signature for calibration */
	ADCA_CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    69ae:	c8 2a       	or	r12, r24
    69b0:	c0 92 0c 02 	sts	0x020C, r12	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    69b4:	d0 92 0d 02 	sts	0x020D, r13	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    69b8:	65 e2       	ldi	r22, 0x25	; 37
    69ba:	70 e0       	ldi	r23, 0x00	; 0
    69bc:	82 e0       	ldi	r24, 0x02	; 2
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    69be:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
		data <<= 8;
    69c2:	c8 2e       	mov	r12, r24
    69c4:	d1 2c       	mov	r13, r1
    69c6:	dc 2c       	mov	r13, r12
    69c8:	cc 24       	eor	r12, r12
    69ca:	64 e2       	ldi	r22, 0x24	; 36
    69cc:	70 e0       	ldi	r23, 0x00	; 0
    69ce:	82 e0       	ldi	r24, 0x02	; 2
		data |= nvm_read_production_signature_row(ADCBCAL0);
    69d0:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
	ADCB_CAL = adc_get_calibration_data(ADC_CAL_ADCB);
    69d4:	c8 2a       	or	r12, r24
    69d6:	c0 92 4c 02 	sts	0x024C, r12	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
static void isr_dma_dac_ch0_B(enum dma_channel_status status);
static void task_dac(uint32_t now);

static void dac_init(void)
{
	dac_read_configuration(&DAC_DAC, &dac_conf);
    69da:	d0 92 4d 02 	sts	0x024D, r13	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
    69de:	63 e9       	ldi	r22, 0x93	; 147
    69e0:	76 e2       	ldi	r23, 0x26	; 38
    69e2:	80 e2       	ldi	r24, 0x20	; 32
    69e4:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    69e6:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <dac_read_configuration>
    69ea:	e3 e9       	ldi	r30, 0x93	; 147
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    69ec:	f6 e2       	ldi	r31, 0x26	; 38
    69ee:	52 82       	std	Z+2, r5	; 0x02
    69f0:	0f 2e       	mov	r0, r31
    69f2:	fc e0       	ldi	r31, 0x0C	; 12
    69f4:	9f 2e       	mov	r9, r31
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    69f6:	f0 2d       	mov	r31, r0
    69f8:	90 82       	st	Z, r9
    69fa:	81 81       	ldd	r24, Z+1	; 0x01
    69fc:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    69fe:	83 64       	ori	r24, 0x43	; 67
    6a00:	81 83       	std	Z+1, r24	; 0x01
	dac_set_conversion_parameters(&dac_conf, DAC_REF_BANDGAP, DAC_ADJ_LEFT);
	dac_set_active_channel(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 0);
	dac_set_conversion_trigger(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 4);
	dac_write_configuration(&DAC_DAC, &dac_conf);
    6a02:	84 e0       	ldi	r24, 0x04	; 4
    6a04:	83 83       	std	Z+3, r24	; 0x03
    6a06:	bf 01       	movw	r22, r30
    6a08:	80 e2       	ldi	r24, 0x20	; 32
    6a0a:	93 e0       	ldi	r25, 0x03	; 3
    6a0c:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <dac_write_configuration>
    6a10:	62 e3       	ldi	r22, 0x32	; 50
    6a12:	70 e0       	ldi	r23, 0x00	; 0
    6a14:	82 e0       	ldi	r24, 0x02	; 2

	/* Get production signature for calibration */
	DACB_CH0OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB0_OFFSET);
    6a16:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
    6a1a:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    6a1e:	63 e3       	ldi	r22, 0x33	; 51
    6a20:	70 e0       	ldi	r23, 0x00	; 0
    6a22:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH0GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB0_GAIN);
    6a24:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
    6a28:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    6a2c:	66 e3       	ldi	r22, 0x36	; 54
    6a2e:	70 e0       	ldi	r23, 0x00	; 0
    6a30:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH1OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB1_OFFSET);
    6a32:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
    6a36:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    6a3a:	67 e3       	ldi	r22, 0x37	; 55
    6a3c:	70 e0       	ldi	r23, 0x00	; 0
    6a3e:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH1GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB1_GAIN);
    6a40:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
	}
}

static void dma_init(void)
{
	memset(&dmach_dma0_conf, 0, sizeof(dmach_dma0_conf));	// DACB channel 0 - linked with dma1
    6a44:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
    6a48:	0f 2e       	mov	r0, r31
    6a4a:	f8 e8       	ldi	r31, 0x88	; 136
    6a4c:	af 2e       	mov	r10, r31
    6a4e:	f6 e2       	ldi	r31, 0x26	; 38
    6a50:	bf 2e       	mov	r11, r31
    6a52:	f0 2d       	mov	r31, r0
    6a54:	d5 01       	movw	r26, r10
    6a56:	e4 2d       	mov	r30, r4
    6a58:	1d 92       	st	X+, r1
	memset(&dmach_dma1_conf, 0, sizeof(dmach_dma1_conf));	// DACB channel 0 - linked with dma0
    6a5a:	ea 95       	dec	r30
    6a5c:	e9 f7       	brne	.-6      	; 0x6a58 <main+0x3b4>
    6a5e:	0f 2e       	mov	r0, r31
    6a60:	fd e7       	ldi	r31, 0x7D	; 125
    6a62:	cf 2e       	mov	r12, r31
    6a64:	f6 e2       	ldi	r31, 0x26	; 38
    6a66:	df 2e       	mov	r13, r31
    6a68:	f0 2d       	mov	r31, r0
    6a6a:	d6 01       	movw	r26, r12
    6a6c:	1d 92       	st	X+, r1
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
    6a6e:	4a 94       	dec	r4
    6a70:	e9 f7       	brne	.-6      	; 0x6a6c <main+0x3c8>
    6a72:	80 e8       	ldi	r24, 0x80	; 128
    6a74:	90 e0       	ldi	r25, 0x00	; 0
    6a76:	f5 01       	movw	r30, r10
    6a78:	84 83       	std	Z+4, r24	; 0x04
    6a7a:	95 83       	std	Z+5, r25	; 0x05
    6a7c:	d6 01       	movw	r26, r12
    6a7e:	14 96       	adiw	r26, 0x04	; 4
    6a80:	8d 93       	st	X+, r24
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    6a82:	9c 93       	st	X, r25
    6a84:	15 97       	sbiw	r26, 0x05	; 5
    6a86:	81 e7       	ldi	r24, 0x71	; 113
    6a88:	95 e2       	ldi	r25, 0x25	; 37
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    6a8a:	87 83       	std	Z+7, r24	; 0x07
    6a8c:	90 87       	std	Z+8, r25	; 0x08
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    6a8e:	29 ed       	ldi	r18, 0xD9	; 217
    6a90:	22 83       	std	Z+2, r18	; 0x02
    6a92:	88 e3       	ldi	r24, 0x38	; 56
    6a94:	93 e0       	ldi	r25, 0x03	; 3
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    6a96:	81 87       	std	Z+9, r24	; 0x09
    6a98:	92 87       	std	Z+10, r25	; 0x0a
    6a9a:	41 ef       	ldi	r20, 0xF1	; 241
    6a9c:	55 e2       	ldi	r21, 0x25	; 37
    6a9e:	17 96       	adiw	r26, 0x07	; 7
    6aa0:	4d 93       	st	X+, r20
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    6aa2:	5c 93       	st	X, r21
    6aa4:	18 97       	sbiw	r26, 0x08	; 8
    6aa6:	12 96       	adiw	r26, 0x02	; 2
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    6aa8:	2c 93       	st	X, r18
    6aaa:	12 97       	sbiw	r26, 0x02	; 2
    6aac:	19 96       	adiw	r26, 0x09	; 9
    6aae:	8d 93       	st	X+, r24
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    6ab0:	9c 93       	st	X, r25
    6ab2:	1a 97       	sbiw	r26, 0x0a	; 10
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    6ab4:	95 e2       	ldi	r25, 0x25	; 37
    6ab6:	93 83       	std	Z+3, r25	; 0x03
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    6ab8:	86 e0       	ldi	r24, 0x06	; 6
    6aba:	80 83       	st	Z, r24
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    6abc:	13 96       	adiw	r26, 0x03	; 3
	dma_channel_set_single_shot(&dmach_dma0_conf);

	dma_channel_set_trigger_source(&dmach_dma1_conf, DMA_CH_TRIGSRC_DACB_CH0_gc);
	dma_channel_set_single_shot(&dmach_dma1_conf);

	task_dac(rtc_get_time());																		// Calculate DDS increments
    6abe:	9c 93       	st	X, r25
    6ac0:	13 97       	sbiw	r26, 0x03	; 3
    6ac2:	8c 93       	st	X, r24
    6ac4:	0e 94 ae 12 	call	0x255c	; 0x255c <rtc_get_time>

	evsys_init();		// Event system
	tc_init();			// Timers
	adc_init();			// ADC
	dac_init();			// DAC
	twi_init();			// I2C / TWI
    6ac8:	89 dc       	rcall	.-1774   	; 0x63dc <task_dac>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    6aca:	0e 94 c4 13 	call	0x2788	; 0x2788 <twi_init>

	nvm_init(INT_FLASH);
    6ace:	0e 94 49 1a 	call	0x3492	; 0x3492 <board_init>
    6ad2:	80 e0       	ldi	r24, 0x00	; 0

	/* All interrupt sources & PMIC are prepared until here - IRQ activation follows */
	cpu_irq_enable();
    6ad4:	0e 94 2f 11 	call	0x225e	; 0x225e <nvm_init>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    6ad8:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    6ada:	f8 01       	movw	r30, r16
    6adc:	80 81       	ld	r24, Z
    6ade:	80 7f       	andi	r24, 0xF0	; 240

static void tc_start(void)
{
	/* ADC clock */
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc);							// VCTCXO PWM start, output still is Z-state
	tc_set_overflow_interrupt_callback(&TCC0, isr_tcc0_ovfl);
    6ae0:	81 60       	ori	r24, 0x01	; 1
    6ae2:	80 83       	st	Z, r24
    6ae4:	6d e4       	ldi	r22, 0x4D	; 77
    6ae6:	72 e3       	ldi	r23, 0x32	; 50
    6ae8:	80 e0       	ldi	r24, 0x00	; 0
    6aea:	98 e0       	ldi	r25, 0x08	; 8
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    6aec:	0e 94 48 25 	call	0x4a90	; 0x4a90 <tc_set_overflow_interrupt_callback>
    6af0:	d8 01       	movw	r26, r16
    6af2:	16 96       	adiw	r26, 0x06	; 6
    6af4:	8c 91       	ld	r24, X
    6af6:	16 97       	sbiw	r26, 0x06	; 6
    6af8:	8c 7f       	andi	r24, 0xFC	; 252
    6afa:	16 96       	adiw	r26, 0x06	; 6
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    6afc:	8c 93       	st	X, r24
    6afe:	16 97       	sbiw	r26, 0x06	; 6
    6b00:	16 96       	adiw	r26, 0x06	; 6
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    6b02:	8c 91       	ld	r24, X
    6b04:	16 97       	sbiw	r26, 0x06	; 6
    6b06:	81 60       	ori	r24, 0x01	; 1
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    6b08:	16 96       	adiw	r26, 0x06	; 6
    6b0a:	8c 93       	st	X, r24
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    6b0c:	f7 01       	movw	r30, r14
    6b0e:	80 81       	ld	r24, Z
    6b10:	80 7f       	andi	r24, 0xF0	; 240
	dma_init();
}

static void dac_start(void)
{
	dac_enable(&DACB);
    6b12:	81 60       	ori	r24, 0x01	; 1
    6b14:	80 83       	st	Z, r24
    6b16:	80 e2       	ldi	r24, 0x20	; 32
    6b18:	93 e0       	ldi	r25, 0x03	; 3
	task_dac(rtc_get_time());																		// Calculate DDS increments
}

static void dma_start(void)
{
	dma_enable();
    6b1a:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <dac_enable>

	dma_set_callback(DMA_CHANNEL_DACB_CH0_A, isr_dma_dac_ch0_A);
    6b1e:	0e 94 95 11 	call	0x232a	; 0x232a <dma_enable>
    6b22:	6f e1       	ldi	r22, 0x1F	; 31
    6b24:	73 e3       	ldi	r23, 0x33	; 51
    6b26:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline void dma_channel_set_interrupt_level(struct dma_channel_config
		*config, enum dma_int_level_t level)
{
	config->ctrlb &= ~(DMA_CH_ERRINTLVL_gm | DMA_CH_TRNINTLVL_gm);
	config->ctrlb |= (level << DMA_CH_ERRINTLVL_gp)
    6b28:	0e 94 b7 11 	call	0x236e	; 0x236e <dma_set_callback>
    6b2c:	d5 01       	movw	r26, r10
    6b2e:	11 96       	adiw	r26, 0x01	; 1
    6b30:	8c 91       	ld	r24, X
    6b32:	11 97       	sbiw	r26, 0x01	; 1
    6b34:	80 7f       	andi	r24, 0xF0	; 240
    6b36:	8a 60       	ori	r24, 0x0A	; 10
	dma_channel_set_interrupt_level(&dmach_dma0_conf, DMA_INT_LVL_MED);

	dma_set_callback(DMA_CHANNEL_DACB_CH0_B, isr_dma_dac_ch0_B);
    6b38:	11 96       	adiw	r26, 0x01	; 1
    6b3a:	8c 93       	st	X, r24
    6b3c:	6c ef       	ldi	r22, 0xFC	; 252
    6b3e:	72 e3       	ldi	r23, 0x32	; 50
    6b40:	81 e0       	ldi	r24, 0x01	; 1
    6b42:	0e 94 b7 11 	call	0x236e	; 0x236e <dma_set_callback>
    6b46:	f6 01       	movw	r30, r12
    6b48:	81 81       	ldd	r24, Z+1	; 0x01
    6b4a:	80 7f       	andi	r24, 0xF0	; 240

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6b4c:	8a 60       	ori	r24, 0x0A	; 10
    6b4e:	81 83       	std	Z+1, r24	; 0x01
	cpu_irq_disable();
    6b50:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    6b52:	8a 87       	std	Y+10, r24	; 0x0a
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_PRIMODE_gm) | primode;
    6b54:	f8 94       	cli
    6b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b58:	e0 e0       	ldi	r30, 0x00	; 0
    6b5a:	f1 e0       	ldi	r31, 0x01	; 1
    6b5c:	80 81       	ld	r24, Z
    6b5e:	8c 7f       	andi	r24, 0xFC	; 252
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6b60:	82 60       	ori	r24, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6b62:	80 83       	st	Z, r24
    6b64:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_disable();
    6b66:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    6b68:	89 87       	std	Y+9, r24	; 0x09
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_DBUFMODE_gm) | dbufmode;
    6b6a:	f8 94       	cli
    6b6c:	99 85       	ldd	r25, Y+9	; 0x09
    6b6e:	80 81       	ld	r24, Z
    6b70:	83 7f       	andi	r24, 0xF3	; 243
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6b72:	84 60       	ori	r24, 0x04	; 4
	dma_channel_set_interrupt_level(&dmach_dma1_conf, DMA_INT_LVL_MED);

	dma_set_priority_mode(DMA_PRIMODE_CH01RR23_gc);
	dma_set_double_buffer_mode(DMA_DBUFMODE_CH01_gc);

	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_A, &dmach_dma0_conf);
    6b74:	80 83       	st	Z, r24
    6b76:	9f bf       	out	0x3f, r25	; 63
    6b78:	b5 01       	movw	r22, r10
    6b7a:	80 e0       	ldi	r24, 0x00	; 0
	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_B, &dmach_dma1_conf);
    6b7c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <dma_channel_write_config>
    6b80:	b6 01       	movw	r22, r12
    6b82:	81 e0       	ldi	r24, 0x01	; 1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6b84:	0e 94 60 12 	call	0x24c0	; 0x24c0 <dma_channel_write_config>
	cpu_irq_disable();
    6b88:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    6b8a:	8c 87       	std	Y+12, r24	; 0x0c
	/* IRQ disabled section */
	{
		irqflags_t flags = cpu_irq_save();

		/* Prepare DMA blocks */
		calc_next_frame(&dac_io_dac0_buf[0][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    6b8c:	f8 94       	cli
    6b8e:	fc 84       	ldd	r15, Y+12	; 0x0c
    6b90:	01 e7       	ldi	r16, 0x71	; 113
    6b92:	16 e2       	ldi	r17, 0x26	; 38
    6b94:	26 e0       	ldi	r18, 0x06	; 6
    6b96:	30 e2       	ldi	r19, 0x20	; 32
    6b98:	49 e7       	ldi	r20, 0x79	; 121
    6b9a:	56 e2       	ldi	r21, 0x26	; 38
    6b9c:	65 e7       	ldi	r22, 0x75	; 117
    6b9e:	76 e2       	ldi	r23, 0x26	; 38
    6ba0:	81 e7       	ldi	r24, 0x71	; 113
		calc_next_frame(&dac_io_dac0_buf[1][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    6ba2:	95 e2       	ldi	r25, 0x25	; 37
    6ba4:	d0 dc       	rcall	.-1632   	; 0x6546 <calc_next_frame>
    6ba6:	26 e0       	ldi	r18, 0x06	; 6
    6ba8:	30 e2       	ldi	r19, 0x20	; 32
    6baa:	49 e7       	ldi	r20, 0x79	; 121
    6bac:	56 e2       	ldi	r21, 0x26	; 38
    6bae:	65 e7       	ldi	r22, 0x75	; 117
    6bb0:	76 e2       	ldi	r23, 0x26	; 38
    6bb2:	81 ef       	ldi	r24, 0xF1	; 241

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6bb4:	95 e2       	ldi	r25, 0x25	; 37
    6bb6:	c7 dc       	rcall	.-1650   	; 0x6546 <calc_next_frame>
	cpu_irq_disable();
    6bb8:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    6bba:	8b 87       	std	Y+11, r24	; 0x0b
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    6bbc:	f8 94       	cli
    6bbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    6bc0:	e0 e1       	ldi	r30, 0x10	; 16
    6bc2:	f1 e0       	ldi	r31, 0x01	; 1
    6bc4:	80 81       	ld	r24, Z
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6bc6:	80 68       	ori	r24, 0x80	; 128
    6bc8:	80 83       	st	Z, r24
}

static void adc_start(void)
{
	/* Power up after configurations are being set */
	adc_enable(&ADCA);
    6bca:	9f bf       	out	0x3f, r25	; 63
    6bcc:	ff be       	out	0x3f, r15	; 63
    6bce:	80 e0       	ldi	r24, 0x00	; 0
	adc_enable(&ADCB);
    6bd0:	92 e0       	ldi	r25, 0x02	; 2
    6bd2:	0e 94 aa 1a 	call	0x3554	; 0x3554 <adc_enable>
    6bd6:	80 e4       	ldi	r24, 0x40	; 64
}


static void usb_init(void)
{
	udc_start();
    6bd8:	92 e0       	ldi	r25, 0x02	; 2

#if 1
	stdio_usb_init();	// Init and enable stdio_usb
    6bda:	0e 94 aa 1a 	call	0x3554	; 0x3554 <adc_enable>
	stdio_usb_enable();
    6bde:	c5 d6       	rcall	.+3466   	; 0x796a <udc_start>
	delay_ms(140);
    6be0:	0e 94 09 40 	call	0x8012	; 0x8012 <stdio_usb_init>
    6be4:	0e 94 05 40 	call	0x800a	; 0x800a <stdio_usb_enable>
    6be8:	61 e6       	ldi	r22, 0x61	; 97
    6bea:	7e ea       	ldi	r23, 0xAE	; 174

	printf("%c\r\n", 0x0c);
    6bec:	8a e0       	ldi	r24, 0x0A	; 10
    6bee:	90 e0       	ldi	r25, 0x00	; 0
    6bf0:	41 da       	rcall	.-2942   	; 0x6074 <__portable_avr_delay_cycles>
    6bf2:	1f 92       	push	r1
    6bf4:	9f 92       	push	r9
    6bf6:	87 e6       	ldi	r24, 0x67	; 103
    6bf8:	93 e2       	ldi	r25, 0x23	; 35
    6bfa:	9f 93       	push	r25
	printf("===============================\r\n");
    6bfc:	8f 93       	push	r24
    6bfe:	0e 94 92 43 	call	0x8724	; 0x8724 <printf>
    6c02:	8c e6       	ldi	r24, 0x6C	; 108
	printf("FindMeSAT - USB logging started\r\n");
    6c04:	93 e2       	ldi	r25, 0x23	; 35
    6c06:	0e 94 a5 43 	call	0x874a	; 0x874a <puts>
    6c0a:	8d e8       	ldi	r24, 0x8D	; 141
	printf("===============================\r\n\r\n");
    6c0c:	93 e2       	ldi	r25, 0x23	; 35
    6c0e:	0e 94 a5 43 	call	0x874a	; 0x874a <puts>
    6c12:	8e ea       	ldi	r24, 0xAE	; 174

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB

	/* Start TWI channels */
	twi_start();		// Start TWI
    6c14:	93 e2       	ldi	r25, 0x23	; 35
    6c16:	0e 94 a5 43 	call	0x874a	; 0x874a <puts>

	/* The application code */
	runmode = 1;
    6c1a:	0e 94 ce 13 	call	0x279c	; 0x279c <twi_start>
    6c1e:	50 92 37 27 	sts	0x2737, r5	; 0x802737 <runmode>
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    6c22:	0f 90       	pop	r0
    6c24:	0f 90       	pop	r0
    6c26:	0f 90       	pop	r0
    6c28:	0f 90       	pop	r0
	}
}

static void task(void)
{
	uint32_t now = rtc_get_time();
    6c2a:	0f 2e       	mov	r0, r31
    6c2c:	f8 e4       	ldi	r31, 0x48	; 72
    6c2e:	2f 2e       	mov	r2, r31
    6c30:	31 2c       	mov	r3, r1

	/* TASK when woken up and all ISRs are done */
	task_dac(now);
    6c32:	f0 2d       	mov	r31, r0
    6c34:	0e 94 ae 12 	call	0x255c	; 0x255c <rtc_get_time>

static void task_adc(uint32_t now)
{	/* Calculations of the ADC values for the presentation layer */
	static uint32_t adc_last = 0;

	if ((now - adc_last) >= 512 || (now < adc_last)) {
    6c38:	6b 01       	movw	r12, r22
    6c3a:	7c 01       	movw	r14, r24
    6c3c:	cf db       	rcall	.-2146   	; 0x63dc <task_dac>
    6c3e:	80 91 5d 25 	lds	r24, 0x255D	; 0x80255d <adc_last.7465>
    6c42:	90 91 5e 25 	lds	r25, 0x255E	; 0x80255e <adc_last.7465+0x1>
    6c46:	a0 91 5f 25 	lds	r26, 0x255F	; 0x80255f <adc_last.7465+0x2>
    6c4a:	b0 91 60 25 	lds	r27, 0x2560	; 0x802560 <adc_last.7465+0x3>
    6c4e:	b7 01       	movw	r22, r14
    6c50:	a6 01       	movw	r20, r12
    6c52:	48 1b       	sub	r20, r24
    6c54:	59 0b       	sbc	r21, r25
    6c56:	6a 0b       	sbc	r22, r26
    6c58:	7b 0b       	sbc	r23, r27
    6c5a:	41 15       	cp	r20, r1
    6c5c:	52 40       	sbci	r21, 0x02	; 2
    6c5e:	61 05       	cpc	r22, r1
    6c60:	71 05       	cpc	r23, r1
    6c62:	30 f4       	brcc	.+12     	; 0x6c70 <main+0x5cc>
    6c64:	c8 16       	cp	r12, r24
    6c66:	d9 06       	cpc	r13, r25
		adc_last = now;
    6c68:	ea 06       	cpc	r14, r26
    6c6a:	fb 06       	cpc	r15, r27
    6c6c:	08 f0       	brcs	.+2      	; 0x6c70 <main+0x5cc>
    6c6e:	06 c1       	rjmp	.+524    	; 0x6e7c <main+0x7d8>
    6c70:	c0 92 5d 25 	sts	0x255D, r12	; 0x80255d <adc_last.7465>
    6c74:	d0 92 5e 25 	sts	0x255E, r13	; 0x80255e <adc_last.7465+0x1>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6c78:	e0 92 5f 25 	sts	0x255F, r14	; 0x80255f <adc_last.7465+0x2>
	cpu_irq_disable();
    6c7c:	f0 92 60 25 	sts	0x2560, r15	; 0x802560 <adc_last.7465+0x3>

		irqflags_t flags = cpu_irq_save();
		int32_t l_adc_vctcxo_cur	= g_adc_vctcxo_cur;
    6c80:	8f b7       	in	r24, 0x3f	; 63
    6c82:	88 87       	std	Y+8, r24	; 0x08
    6c84:	f8 94       	cli
    6c86:	68 85       	ldd	r22, Y+8	; 0x08
    6c88:	20 91 eb 26 	lds	r18, 0x26EB	; 0x8026eb <g_adc_vctcxo_cur>
    6c8c:	30 91 ec 26 	lds	r19, 0x26EC	; 0x8026ec <g_adc_vctcxo_cur+0x1>
		int32_t l_adc_5v0_cur		= g_adc_5v0_cur;
    6c90:	40 91 ed 26 	lds	r20, 0x26ED	; 0x8026ed <g_adc_vctcxo_cur+0x2>
    6c94:	50 91 ee 26 	lds	r21, 0x26EE	; 0x8026ee <g_adc_vctcxo_cur+0x3>
    6c98:	40 90 e1 26 	lds	r4, 0x26E1	; 0x8026e1 <g_adc_5v0_cur>
    6c9c:	50 90 e2 26 	lds	r5, 0x26E2	; 0x8026e2 <g_adc_5v0_cur+0x1>
		int32_t l_adc_vbat_cur		= g_adc_vbat_cur;
    6ca0:	60 90 e3 26 	lds	r6, 0x26E3	; 0x8026e3 <g_adc_5v0_cur+0x2>
    6ca4:	70 90 e4 26 	lds	r7, 0x26E4	; 0x8026e4 <g_adc_5v0_cur+0x3>
    6ca8:	80 90 d7 26 	lds	r8, 0x26D7	; 0x8026d7 <g_adc_vbat_cur>
    6cac:	90 90 d8 26 	lds	r9, 0x26D8	; 0x8026d8 <g_adc_vbat_cur+0x1>
		int32_t l_adc_io_adc4_cur	= g_adc_io_adc4_cur;
    6cb0:	a0 90 d9 26 	lds	r10, 0x26D9	; 0x8026d9 <g_adc_vbat_cur+0x2>
    6cb4:	b0 90 da 26 	lds	r11, 0x26DA	; 0x8026da <g_adc_vbat_cur+0x3>
    6cb8:	80 91 cd 26 	lds	r24, 0x26CD	; 0x8026cd <g_adc_io_adc4_cur>
    6cbc:	90 91 ce 26 	lds	r25, 0x26CE	; 0x8026ce <g_adc_io_adc4_cur+0x1>
    6cc0:	a0 91 cf 26 	lds	r26, 0x26CF	; 0x8026cf <g_adc_io_adc4_cur+0x2>
    6cc4:	b0 91 d0 26 	lds	r27, 0x26D0	; 0x8026d0 <g_adc_io_adc4_cur+0x3>
		int32_t l_adc_io_adc5_cur	= g_adc_io_adc5_cur;
    6cc8:	8d 87       	std	Y+13, r24	; 0x0d
    6cca:	9e 87       	std	Y+14, r25	; 0x0e
    6ccc:	af 87       	std	Y+15, r26	; 0x0f
    6cce:	b8 8b       	std	Y+16, r27	; 0x10
    6cd0:	80 91 c3 26 	lds	r24, 0x26C3	; 0x8026c3 <g_adc_io_adc5_cur>
    6cd4:	90 91 c4 26 	lds	r25, 0x26C4	; 0x8026c4 <g_adc_io_adc5_cur+0x1>
    6cd8:	a0 91 c5 26 	lds	r26, 0x26C5	; 0x8026c5 <g_adc_io_adc5_cur+0x2>
    6cdc:	b0 91 c6 26 	lds	r27, 0x26C6	; 0x8026c6 <g_adc_io_adc5_cur+0x3>
		int32_t l_adc_temp_cur		= g_adc_temp_cur;
    6ce0:	89 8b       	std	Y+17, r24	; 0x11
    6ce2:	9a 8b       	std	Y+18, r25	; 0x12
    6ce4:	ab 8b       	std	Y+19, r26	; 0x13
    6ce6:	bc 8b       	std	Y+20, r27	; 0x14
    6ce8:	80 91 b9 26 	lds	r24, 0x26B9	; 0x8026b9 <g_adc_temp_cur>
    6cec:	90 91 ba 26 	lds	r25, 0x26BA	; 0x8026ba <g_adc_temp_cur+0x1>
    6cf0:	a0 91 bb 26 	lds	r26, 0x26BB	; 0x8026bb <g_adc_temp_cur+0x2>
    6cf4:	b0 91 bc 26 	lds	r27, 0x26BC	; 0x8026bc <g_adc_temp_cur+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6cf8:	8d 8b       	std	Y+21, r24	; 0x15

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6cfa:	9e 8b       	std	Y+22, r25	; 0x16
    6cfc:	af 8b       	std	Y+23, r26	; 0x17
	cpu_irq_disable();
    6cfe:	b8 8f       	std	Y+24, r27	; 0x18
	return flags;
    6d00:	6f bf       	out	0x3f, r22	; 63
		int16_t l_adc_io_adc4_volt_1000	= (uint16_t) (((  1000 * l_adc_io_adc4_cur) / ((float)C_ADC_STEPS)) * C_VCC_3V0_AREF_VOLTS                    );
		int16_t l_adc_io_adc5_volt_1000	= (uint16_t) (((  1000 * l_adc_io_adc5_cur) / ((float)C_ADC_STEPS)) * C_VCC_3V0_AREF_VOLTS                    );
		int16_t l_adc_temp_deg_100		= (uint16_t) ((((  100 * l_adc_temp_cur   ) / ((float)C_ADC_STEPS))                        * C_TEMPSENSE_MULT )  -  100 * C_0DEGC_K);

		flags = cpu_irq_save();
		g_adc_vctcxo_volt_1000	= l_adc_vctcxo_volt_1000;
    6d02:	8f b7       	in	r24, 0x3f	; 63
    6d04:	89 83       	std	Y+1, r24	; 0x01
    6d06:	f8 94       	cli
    6d08:	19 81       	ldd	r17, Y+1	; 0x01
    6d0a:	a8 ee       	ldi	r26, 0xE8	; 232
    6d0c:	b3 e0       	ldi	r27, 0x03	; 3
    6d0e:	0e 94 b1 40 	call	0x8162	; 0x8162 <__muluhisi3>
    6d12:	0e 94 50 42 	call	0x84a0	; 0x84a0 <__floatsisf>
    6d16:	20 e0       	ldi	r18, 0x00	; 0
    6d18:	30 e0       	ldi	r19, 0x00	; 0
    6d1a:	40 e0       	ldi	r20, 0x00	; 0
    6d1c:	59 e3       	ldi	r21, 0x39	; 57
    6d1e:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6d22:	20 e0       	ldi	r18, 0x00	; 0
    6d24:	30 e0       	ldi	r19, 0x00	; 0
    6d26:	40 e4       	ldi	r20, 0x40	; 64
    6d28:	50 e4       	ldi	r21, 0x40	; 64
    6d2a:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6d2e:	20 e0       	ldi	r18, 0x00	; 0
    6d30:	30 e0       	ldi	r19, 0x00	; 0
    6d32:	4c e3       	ldi	r20, 0x3C	; 60
    6d34:	52 e4       	ldi	r21, 0x42	; 66
    6d36:	0e 94 55 41 	call	0x82aa	; 0x82aa <__subsf3>
    6d3a:	0e 94 22 42 	call	0x8444	; 0x8444 <__fixunssfsi>
		g_adc_5v0_volt_1000		= l_adc_5v0_volt_1000;
    6d3e:	60 93 b1 26 	sts	0x26B1, r22	; 0x8026b1 <g_adc_vctcxo_volt_1000>
    6d42:	70 93 b2 26 	sts	0x26B2, r23	; 0x8026b2 <g_adc_vctcxo_volt_1000+0x1>
    6d46:	a8 ee       	ldi	r26, 0xE8	; 232
    6d48:	b3 e0       	ldi	r27, 0x03	; 3
    6d4a:	a3 01       	movw	r20, r6
    6d4c:	92 01       	movw	r18, r4
    6d4e:	0e 94 b1 40 	call	0x8162	; 0x8162 <__muluhisi3>
    6d52:	0e 94 50 42 	call	0x84a0	; 0x84a0 <__floatsisf>
    6d56:	20 e0       	ldi	r18, 0x00	; 0
    6d58:	30 e0       	ldi	r19, 0x00	; 0
    6d5a:	40 e0       	ldi	r20, 0x00	; 0
    6d5c:	59 e3       	ldi	r21, 0x39	; 57
    6d5e:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6d62:	20 e0       	ldi	r18, 0x00	; 0
    6d64:	30 e0       	ldi	r19, 0x00	; 0
    6d66:	40 e4       	ldi	r20, 0x40	; 64
    6d68:	50 e4       	ldi	r21, 0x40	; 64
    6d6a:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6d6e:	29 ed       	ldi	r18, 0xD9	; 217
    6d70:	38 ed       	ldi	r19, 0xD8	; 216
    6d72:	4a e1       	ldi	r20, 0x1A	; 26
    6d74:	50 e4       	ldi	r21, 0x40	; 64
    6d76:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6d7a:	0e 94 22 42 	call	0x8444	; 0x8444 <__fixunssfsi>
		g_adc_vbat_volt_1000	= l_adc_vbat_volt_1000;
    6d7e:	60 93 af 26 	sts	0x26AF, r22	; 0x8026af <g_adc_5v0_volt_1000>
    6d82:	70 93 b0 26 	sts	0x26B0, r23	; 0x8026b0 <g_adc_5v0_volt_1000+0x1>
    6d86:	a8 ee       	ldi	r26, 0xE8	; 232
    6d88:	b3 e0       	ldi	r27, 0x03	; 3
    6d8a:	a5 01       	movw	r20, r10
    6d8c:	94 01       	movw	r18, r8
    6d8e:	0e 94 b1 40 	call	0x8162	; 0x8162 <__muluhisi3>
    6d92:	0e 94 50 42 	call	0x84a0	; 0x84a0 <__floatsisf>
    6d96:	20 e0       	ldi	r18, 0x00	; 0
    6d98:	30 e0       	ldi	r19, 0x00	; 0
    6d9a:	40 e0       	ldi	r20, 0x00	; 0
    6d9c:	59 e3       	ldi	r21, 0x39	; 57
    6d9e:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6da2:	20 e0       	ldi	r18, 0x00	; 0
    6da4:	30 e0       	ldi	r19, 0x00	; 0
    6da6:	40 e4       	ldi	r20, 0x40	; 64
    6da8:	50 e4       	ldi	r21, 0x40	; 64
    6daa:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6dae:	23 ee       	ldi	r18, 0xE3	; 227
    6db0:	35 e4       	ldi	r19, 0x45	; 69
    6db2:	4b e1       	ldi	r20, 0x1B	; 27
    6db4:	50 e4       	ldi	r21, 0x40	; 64
    6db6:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6dba:	0e 94 22 42 	call	0x8444	; 0x8444 <__fixunssfsi>
		g_adc_io_adc4_volt_1000	= l_adc_io_adc4_volt_1000;
    6dbe:	60 93 ad 26 	sts	0x26AD, r22	; 0x8026ad <g_adc_vbat_volt_1000>
    6dc2:	70 93 ae 26 	sts	0x26AE, r23	; 0x8026ae <g_adc_vbat_volt_1000+0x1>
    6dc6:	a8 ee       	ldi	r26, 0xE8	; 232
    6dc8:	b3 e0       	ldi	r27, 0x03	; 3
    6dca:	2d 85       	ldd	r18, Y+13	; 0x0d
    6dcc:	3e 85       	ldd	r19, Y+14	; 0x0e
    6dce:	4f 85       	ldd	r20, Y+15	; 0x0f
    6dd0:	58 89       	ldd	r21, Y+16	; 0x10
    6dd2:	0e 94 b1 40 	call	0x8162	; 0x8162 <__muluhisi3>
    6dd6:	0e 94 50 42 	call	0x84a0	; 0x84a0 <__floatsisf>
    6dda:	20 e0       	ldi	r18, 0x00	; 0
    6ddc:	30 e0       	ldi	r19, 0x00	; 0
    6dde:	40 e0       	ldi	r20, 0x00	; 0
    6de0:	59 e3       	ldi	r21, 0x39	; 57
    6de2:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6de6:	20 e0       	ldi	r18, 0x00	; 0
    6de8:	30 e0       	ldi	r19, 0x00	; 0
    6dea:	40 e4       	ldi	r20, 0x40	; 64
    6dec:	50 e4       	ldi	r21, 0x40	; 64
    6dee:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6df2:	0e 94 22 42 	call	0x8444	; 0x8444 <__fixunssfsi>
		g_adc_io_adc5_volt_1000	= l_adc_io_adc5_volt_1000;
    6df6:	60 93 ab 26 	sts	0x26AB, r22	; 0x8026ab <g_adc_io_adc4_volt_1000>
    6dfa:	70 93 ac 26 	sts	0x26AC, r23	; 0x8026ac <g_adc_io_adc4_volt_1000+0x1>
    6dfe:	a8 ee       	ldi	r26, 0xE8	; 232
    6e00:	b3 e0       	ldi	r27, 0x03	; 3
    6e02:	29 89       	ldd	r18, Y+17	; 0x11
    6e04:	3a 89       	ldd	r19, Y+18	; 0x12
    6e06:	4b 89       	ldd	r20, Y+19	; 0x13
    6e08:	5c 89       	ldd	r21, Y+20	; 0x14
    6e0a:	0e 94 b1 40 	call	0x8162	; 0x8162 <__muluhisi3>
    6e0e:	0e 94 50 42 	call	0x84a0	; 0x84a0 <__floatsisf>
    6e12:	20 e0       	ldi	r18, 0x00	; 0
    6e14:	30 e0       	ldi	r19, 0x00	; 0
    6e16:	40 e0       	ldi	r20, 0x00	; 0
    6e18:	59 e3       	ldi	r21, 0x39	; 57
    6e1a:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6e1e:	20 e0       	ldi	r18, 0x00	; 0
    6e20:	30 e0       	ldi	r19, 0x00	; 0
    6e22:	40 e4       	ldi	r20, 0x40	; 64
    6e24:	50 e4       	ldi	r21, 0x40	; 64
    6e26:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6e2a:	0e 94 22 42 	call	0x8444	; 0x8444 <__fixunssfsi>
		g_adc_temp_deg_100		= l_adc_temp_deg_100;
    6e2e:	60 93 a9 26 	sts	0x26A9, r22	; 0x8026a9 <g_adc_io_adc5_volt_1000>
    6e32:	70 93 aa 26 	sts	0x26AA, r23	; 0x8026aa <g_adc_io_adc5_volt_1000+0x1>
    6e36:	a4 e6       	ldi	r26, 0x64	; 100
    6e38:	b0 e0       	ldi	r27, 0x00	; 0
    6e3a:	2d 89       	ldd	r18, Y+21	; 0x15
    6e3c:	3e 89       	ldd	r19, Y+22	; 0x16
    6e3e:	4f 89       	ldd	r20, Y+23	; 0x17
    6e40:	58 8d       	ldd	r21, Y+24	; 0x18
    6e42:	0e 94 b1 40 	call	0x8162	; 0x8162 <__muluhisi3>
    6e46:	0e 94 50 42 	call	0x84a0	; 0x84a0 <__floatsisf>
    6e4a:	20 e0       	ldi	r18, 0x00	; 0
    6e4c:	30 e0       	ldi	r19, 0x00	; 0
    6e4e:	40 e0       	ldi	r20, 0x00	; 0
    6e50:	59 e3       	ldi	r21, 0x39	; 57
    6e52:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6e56:	2d ec       	ldi	r18, 0xCD	; 205
    6e58:	3c e4       	ldi	r19, 0x4C	; 76
    6e5a:	4d e1       	ldi	r20, 0x1D	; 29
    6e5c:	54 e4       	ldi	r21, 0x44	; 68
    6e5e:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <__mulsf3>
    6e62:	20 e0       	ldi	r18, 0x00	; 0
    6e64:	36 e6       	ldi	r19, 0x66	; 102
    6e66:	45 ed       	ldi	r20, 0xD5	; 213
    6e68:	56 e4       	ldi	r21, 0x46	; 70
    6e6a:	0e 94 55 41 	call	0x82aa	; 0x82aa <__subsf3>
    6e6e:	0e 94 22 42 	call	0x8444	; 0x8444 <__fixunssfsi>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6e72:	60 93 a7 26 	sts	0x26A7, r22	; 0x8026a7 <g_adc_temp_deg_100>

static void task_twi(uint32_t now)
{	/* Calculations for the presentation layer and display */

	/* TWI1 - SIM808, Hygro, Gyro, Baro devices */
	task_twi1_onboard(now);
    6e76:	70 93 a8 26 	sts	0x26A8, r23	; 0x8026a8 <g_adc_temp_deg_100+0x1>
    6e7a:	1f bf       	out	0x3f, r17	; 63

	/* TWI2 - LCD Port */
	task_twi2_lcd(now);
    6e7c:	c7 01       	movw	r24, r14
    6e7e:	b6 01       	movw	r22, r12
    6e80:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <task_twi1_onboard>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    6e84:	c7 01       	movw	r24, r14

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    6e86:	b6 01       	movw	r22, r12
    6e88:	0e 94 d7 18 	call	0x31ae	; 0x31ae <task_twi2_lcd>
    6e8c:	f8 94       	cli
    6e8e:	af e8       	ldi	r26, 0x8F	; 143
    6e90:	b8 e2       	ldi	r27, 0x28	; 40
    6e92:	8c 91       	ld	r24, X
    6e94:	81 11       	cpse	r24, r1
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    6e96:	09 c0       	rjmp	.+18     	; 0x6eaa <main+0x806>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    6e98:	a0 e9       	ldi	r26, 0x90	; 144
    6e9a:	b8 e2       	ldi	r27, 0x28	; 40
    6e9c:	e0 e0       	ldi	r30, 0x00	; 0
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    6e9e:	ef 5f       	subi	r30, 0xFF	; 255
    6ea0:	8d 91       	ld	r24, X+
		cpu_irq_enable();
    6ea2:	88 23       	and	r24, r24
    6ea4:	e1 f3       	breq	.-8      	; 0x6e9e <main+0x7fa>
    6ea6:	e1 11       	cpse	r30, r1
    6ea8:	02 c0       	rjmp	.+4      	; 0x6eae <main+0x80a>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    6eaa:	78 94       	sei
    6eac:	12 c0       	rjmp	.+36     	; 0x6ed2 <main+0x82e>
    6eae:	d1 01       	movw	r26, r2
    6eb0:	8c 91       	ld	r24, X
    6eb2:	f0 e0       	ldi	r31, 0x00	; 0
    6eb4:	ef 5c       	subi	r30, 0xCF	; 207
    6eb6:	ff 4d       	sbci	r31, 0xDF	; 223
	sleep_enable();
    6eb8:	81 7f       	andi	r24, 0xF1	; 241
    6eba:	90 81       	ld	r25, Z
    6ebc:	89 2b       	or	r24, r25

	cpu_irq_enable();
    6ebe:	8c 93       	st	X, r24
	sleep_enter();
    6ec0:	8c 91       	ld	r24, X

	sleep_disable();
    6ec2:	81 60       	ori	r24, 0x01	; 1
    6ec4:	8c 93       	st	X, r24
    6ec6:	78 94       	sei
    6ec8:	88 95       	sleep
	/* Start TWI channels */
	twi_start();		// Start TWI

	/* The application code */
	runmode = 1;
    while (runmode) {
    6eca:	f1 01       	movw	r30, r2
    6ecc:	80 81       	ld	r24, Z
    6ece:	8e 7f       	andi	r24, 0xFE	; 254
    6ed0:	80 83       	st	Z, r24
		task();
		sleepmgr_enter_sleep();
    }

	cpu_irq_disable();
    6ed2:	80 91 37 27 	lds	r24, 0x2737	; 0x802737 <runmode>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    6ed6:	81 11       	cpse	r24, r1
    6ed8:	ad ce       	rjmp	.-678    	; 0x6c34 <main+0x590>
    6eda:	f8 94       	cli
    6edc:	f8 94       	cli
    6ede:	80 91 8f 28 	lds	r24, 0x288F	; 0x80288f <sleepmgr_locks>
    6ee2:	81 11       	cpse	r24, r1
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    6ee4:	09 c0       	rjmp	.+18     	; 0x6ef8 <main+0x854>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    6ee6:	a0 e9       	ldi	r26, 0x90	; 144
    6ee8:	b8 e2       	ldi	r27, 0x28	; 40
    6eea:	e0 e0       	ldi	r30, 0x00	; 0
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    6eec:	ef 5f       	subi	r30, 0xFF	; 255
    6eee:	8d 91       	ld	r24, X+
		cpu_irq_enable();
    6ef0:	88 23       	and	r24, r24
    6ef2:	e1 f3       	breq	.-8      	; 0x6eec <main+0x848>
    6ef4:	e1 11       	cpse	r30, r1
    6ef6:	02 c0       	rjmp	.+4      	; 0x6efc <main+0x858>
    6ef8:	78 94       	sei

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    6efa:	13 c0       	rjmp	.+38     	; 0x6f22 <main+0x87e>
    6efc:	a8 e4       	ldi	r26, 0x48	; 72
    6efe:	b0 e0       	ldi	r27, 0x00	; 0
    6f00:	8c 91       	ld	r24, X
    6f02:	f0 e0       	ldi	r31, 0x00	; 0
    6f04:	ef 5c       	subi	r30, 0xCF	; 207
    6f06:	ff 4d       	sbci	r31, 0xDF	; 223
    6f08:	98 2f       	mov	r25, r24
	sleep_enable();
    6f0a:	91 7f       	andi	r25, 0xF1	; 241
    6f0c:	80 81       	ld	r24, Z
    6f0e:	89 2b       	or	r24, r25

	cpu_irq_enable();
    6f10:	8c 93       	st	X, r24
	sleep_enter();
    6f12:	8c 91       	ld	r24, X

	sleep_disable();
    6f14:	81 60       	ori	r24, 0x01	; 1
    6f16:	8c 93       	st	X, r24
    6f18:	78 94       	sei
	sleepmgr_enter_sleep();

	return retcode;
}
    6f1a:	88 95       	sleep
    6f1c:	8c 91       	ld	r24, X
    6f1e:	8e 7f       	andi	r24, 0xFE	; 254
    6f20:	8c 93       	st	X, r24
    6f22:	80 e0       	ldi	r24, 0x00	; 0
    6f24:	90 e0       	ldi	r25, 0x00	; 0
    6f26:	68 96       	adiw	r28, 0x18	; 24
    6f28:	cd bf       	out	0x3d, r28	; 61
    6f2a:	de bf       	out	0x3e, r29	; 62
    6f2c:	df 91       	pop	r29
    6f2e:	cf 91       	pop	r28
    6f30:	1f 91       	pop	r17
    6f32:	0f 91       	pop	r16
    6f34:	ff 90       	pop	r15
    6f36:	ef 90       	pop	r14
    6f38:	df 90       	pop	r13
    6f3a:	cf 90       	pop	r12
    6f3c:	bf 90       	pop	r11
    6f3e:	af 90       	pop	r10
    6f40:	9f 90       	pop	r9
    6f42:	8f 90       	pop	r8
    6f44:	7f 90       	pop	r7
    6f46:	6f 90       	pop	r6
    6f48:	5f 90       	pop	r5
    6f4a:	4f 90       	pop	r4
    6f4c:	3f 90       	pop	r3
    6f4e:	2f 90       	pop	r2
    6f50:	08 95       	ret

00006f52 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    6f52:	cf 93       	push	r28
    6f54:	df 93       	push	r29
    6f56:	cd b7       	in	r28, 0x3d	; 61
    6f58:	de b7       	in	r29, 0x3e	; 62
    6f5a:	28 97       	sbiw	r28, 0x08	; 8
    6f5c:	cd bf       	out	0x3d, r28	; 61
    6f5e:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    6f60:	8f ef       	ldi	r24, 0xFF	; 255
    6f62:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    6f66:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    6f6a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    6f6e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    6f72:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    6f76:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    6f7a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    6f7e:	61 e0       	ldi	r22, 0x01	; 1
    6f80:	81 e4       	ldi	r24, 0x41	; 65
    6f82:	90 e0       	ldi	r25, 0x00	; 0
    6f84:	0e 94 3c 40 	call	0x8078	; 0x8078 <ccp_write_io>
    6f88:	6c e1       	ldi	r22, 0x1C	; 28
    6f8a:	70 e0       	ldi	r23, 0x00	; 0
    6f8c:	82 e0       	ldi	r24, 0x02	; 2
    6f8e:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    6f92:	8a 83       	std	Y+2, r24	; 0x02
    6f94:	6d e1       	ldi	r22, 0x1D	; 29
    6f96:	70 e0       	ldi	r23, 0x00	; 0
    6f98:	82 e0       	ldi	r24, 0x02	; 2
    6f9a:	0e 94 32 40 	call	0x8064	; 0x8064 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    6f9e:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    6fa0:	89 81       	ldd	r24, Y+1	; 0x01
    6fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    6fa4:	01 96       	adiw	r24, 0x01	; 1
    6fa6:	21 f4       	brne	.+8      	; 0x6fb0 <sysclk_init+0x5e>
		cal = 0x2340;
    6fa8:	80 e4       	ldi	r24, 0x40	; 64
    6faa:	93 e2       	ldi	r25, 0x23	; 35
    6fac:	89 83       	std	Y+1, r24	; 0x01
    6fae:	9a 83       	std	Y+2, r25	; 0x02
    6fb0:	89 81       	ldd	r24, Y+1	; 0x01
    6fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    6fb4:	8b 83       	std	Y+3, r24	; 0x03
    6fb6:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    6fb8:	e0 e6       	ldi	r30, 0x60	; 96
    6fba:	f0 e0       	ldi	r31, 0x00	; 0
    6fbc:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    6fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    6fc0:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    6fc2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    6fc6:	84 fd       	sbrc	r24, 4
    6fc8:	21 c0       	rjmp	.+66     	; 0x700c <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    6fca:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    6fce:	83 fd       	sbrc	r24, 3
    6fd0:	0e c0       	rjmp	.+28     	; 0x6fee <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    6fd2:	e0 e5       	ldi	r30, 0x50	; 80
    6fd4:	f0 e0       	ldi	r31, 0x00	; 0
    6fd6:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6fd8:	8f b7       	in	r24, 0x3f	; 63
    6fda:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    6fdc:	f8 94       	cli
	return flags;
    6fde:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    6fe0:	80 81       	ld	r24, Z
    6fe2:	88 60       	ori	r24, 0x08	; 8
    6fe4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6fe6:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    6fe8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    6fea:	83 ff       	sbrs	r24, 3
    6fec:	fd cf       	rjmp	.-6      	; 0x6fe8 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6fee:	8f b7       	in	r24, 0x3f	; 63
    6ff0:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    6ff2:	f8 94       	cli
	return flags;
    6ff4:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    6ff6:	e0 e5       	ldi	r30, 0x50	; 80
    6ff8:	f0 e0       	ldi	r31, 0x00	; 0
    6ffa:	83 ec       	ldi	r24, 0xC3	; 195
    6ffc:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    6ffe:	80 81       	ld	r24, Z
    7000:	80 61       	ori	r24, 0x10	; 16
    7002:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7004:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    7006:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    7008:	84 ff       	sbrs	r24, 4
    700a:	fd cf       	rjmp	.-6      	; 0x7006 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    700c:	64 e0       	ldi	r22, 0x04	; 4
    700e:	80 e4       	ldi	r24, 0x40	; 64
    7010:	90 e0       	ldi	r25, 0x00	; 0
    7012:	0e 94 3c 40 	call	0x8078	; 0x8078 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7016:	8f b7       	in	r24, 0x3f	; 63
    7018:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    701a:	f8 94       	cli
	return flags;
    701c:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    701e:	e0 e5       	ldi	r30, 0x50	; 80
    7020:	f0 e0       	ldi	r31, 0x00	; 0
    7022:	80 81       	ld	r24, Z
    7024:	8e 7f       	andi	r24, 0xFE	; 254
    7026:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7028:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    702a:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    702c:	8f b7       	in	r24, 0x3f	; 63
    702e:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    7030:	f8 94       	cli
	return flags;
    7032:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    7034:	80 81       	ld	r24, Z
    7036:	88 60       	ori	r24, 0x08	; 8
    7038:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    703a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    703c:	81 81       	ldd	r24, Z+1	; 0x01
    703e:	83 ff       	sbrs	r24, 3
    7040:	fd cf       	rjmp	.-6      	; 0x703c <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    7042:	8b e0       	ldi	r24, 0x0B	; 11
    7044:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    7048:	28 96       	adiw	r28, 0x08	; 8
    704a:	cd bf       	out	0x3d, r28	; 61
    704c:	de bf       	out	0x3e, r29	; 62
    704e:	df 91       	pop	r29
    7050:	cf 91       	pop	r28
    7052:	08 95       	ret

00007054 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    7054:	cf 93       	push	r28
    7056:	df 93       	push	r29
    7058:	1f 92       	push	r1
    705a:	cd b7       	in	r28, 0x3d	; 61
    705c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    705e:	9f b7       	in	r25, 0x3f	; 63
    7060:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    7062:	f8 94       	cli
	return flags;
    7064:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    7066:	e8 2f       	mov	r30, r24
    7068:	f0 e0       	ldi	r31, 0x00	; 0
    706a:	e0 59       	subi	r30, 0x90	; 144
    706c:	ff 4f       	sbci	r31, 0xFF	; 255
    706e:	60 95       	com	r22
    7070:	80 81       	ld	r24, Z
    7072:	68 23       	and	r22, r24
    7074:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7076:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    7078:	0f 90       	pop	r0
    707a:	df 91       	pop	r29
    707c:	cf 91       	pop	r28
    707e:	08 95       	ret

00007080 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    7080:	cf 93       	push	r28
    7082:	df 93       	push	r29
    7084:	1f 92       	push	r1
    7086:	cd b7       	in	r28, 0x3d	; 61
    7088:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    708a:	9f b7       	in	r25, 0x3f	; 63
    708c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    708e:	f8 94       	cli
	return flags;
    7090:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    7092:	e8 2f       	mov	r30, r24
    7094:	f0 e0       	ldi	r31, 0x00	; 0
    7096:	e0 59       	subi	r30, 0x90	; 144
    7098:	ff 4f       	sbci	r31, 0xFF	; 255
    709a:	80 81       	ld	r24, Z
    709c:	68 2b       	or	r22, r24
    709e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    70a0:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    70a2:	0f 90       	pop	r0
    70a4:	df 91       	pop	r29
    70a6:	cf 91       	pop	r28
    70a8:	08 95       	ret

000070aa <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    70aa:	cf 93       	push	r28
    70ac:	df 93       	push	r29
    70ae:	1f 92       	push	r1
    70b0:	1f 92       	push	r1
    70b2:	cd b7       	in	r28, 0x3d	; 61
    70b4:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    70b6:	86 30       	cpi	r24, 0x06	; 6
    70b8:	11 f0       	breq	.+4      	; 0x70be <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    70ba:	60 e0       	ldi	r22, 0x00	; 0
    70bc:	01 c0       	rjmp	.+2      	; 0x70c0 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    70be:	68 e1       	ldi	r22, 0x18	; 24
    70c0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    70c4:	81 fd       	sbrc	r24, 1
    70c6:	2a c0       	rjmp	.+84     	; 0x711c <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    70c8:	8f b7       	in	r24, 0x3f	; 63
    70ca:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    70cc:	f8 94       	cli
	return flags;
    70ce:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    70d0:	e0 e5       	ldi	r30, 0x50	; 80
    70d2:	f0 e0       	ldi	r31, 0x00	; 0
    70d4:	80 81       	ld	r24, Z
    70d6:	82 60       	ori	r24, 0x02	; 2
    70d8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    70da:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    70dc:	81 81       	ldd	r24, Z+1	; 0x01
    70de:	81 ff       	sbrs	r24, 1
    70e0:	fd cf       	rjmp	.-6      	; 0x70dc <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    70e2:	8f b7       	in	r24, 0x3f	; 63
    70e4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    70e6:	f8 94       	cli
	return flags;
    70e8:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    70ea:	a0 e5       	ldi	r26, 0x50	; 80
    70ec:	b0 e0       	ldi	r27, 0x00	; 0
    70ee:	16 96       	adiw	r26, 0x06	; 6
    70f0:	8c 91       	ld	r24, X
    70f2:	16 97       	sbiw	r26, 0x06	; 6
    70f4:	89 7f       	andi	r24, 0xF9	; 249
    70f6:	16 96       	adiw	r26, 0x06	; 6
    70f8:	8c 93       	st	X, r24
    70fa:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    70fc:	e0 e6       	ldi	r30, 0x60	; 96
    70fe:	f0 e0       	ldi	r31, 0x00	; 0
    7100:	80 e8       	ldi	r24, 0x80	; 128
    7102:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    7104:	8b eb       	ldi	r24, 0xBB	; 187
    7106:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    7108:	16 96       	adiw	r26, 0x06	; 6
    710a:	8c 91       	ld	r24, X
    710c:	16 97       	sbiw	r26, 0x06	; 6
    710e:	84 60       	ori	r24, 0x04	; 4
    7110:	16 96       	adiw	r26, 0x06	; 6
    7112:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    7114:	80 81       	ld	r24, Z
    7116:	81 60       	ori	r24, 0x01	; 1
    7118:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    711a:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    711c:	63 60       	ori	r22, 0x03	; 3
    711e:	84 e4       	ldi	r24, 0x44	; 68
    7120:	90 e0       	ldi	r25, 0x00	; 0
    7122:	aa d7       	rcall	.+3924   	; 0x8078 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    7124:	60 e4       	ldi	r22, 0x40	; 64
    7126:	80 e0       	ldi	r24, 0x00	; 0
    7128:	95 df       	rcall	.-214    	; 0x7054 <sysclk_enable_module>
}
    712a:	0f 90       	pop	r0
    712c:	0f 90       	pop	r0
    712e:	df 91       	pop	r29
    7130:	cf 91       	pop	r28
    7132:	08 95       	ret

00007134 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    7134:	80 91 4e 28 	lds	r24, 0x284E	; 0x80284e <udi_cdc_nb_comm_enabled>
    7138:	81 50       	subi	r24, 0x01	; 1
    713a:	80 93 4e 28 	sts	0x284E, r24	; 0x80284e <udi_cdc_nb_comm_enabled>
    713e:	08 95       	ret

00007140 <udi_cdc_data_setup>:
    7140:	80 e0       	ldi	r24, 0x00	; 0
    7142:	08 95       	ret

00007144 <udi_cdc_getsetting>:
    7144:	80 e0       	ldi	r24, 0x00	; 0
    7146:	08 95       	ret

00007148 <udi_cdc_line_coding_received>:
    7148:	6c e5       	ldi	r22, 0x5C	; 92
    714a:	78 e2       	ldi	r23, 0x28	; 40
    714c:	80 e0       	ldi	r24, 0x00	; 0
    714e:	a5 ca       	rjmp	.-2742   	; 0x669a <usb_callback_config>
    7150:	08 95       	ret

00007152 <udi_cdc_comm_enable>:
    7152:	10 92 4e 28 	sts	0x284E, r1	; 0x80284e <udi_cdc_nb_comm_enabled>
    7156:	10 92 5a 28 	sts	0x285A, r1	; 0x80285a <udi_cdc_state>
    715a:	10 92 5b 28 	sts	0x285B, r1	; 0x80285b <udi_cdc_state+0x1>
    715e:	e0 e5       	ldi	r30, 0x50	; 80
    7160:	f8 e2       	ldi	r31, 0x28	; 40
    7162:	81 ea       	ldi	r24, 0xA1	; 161
    7164:	80 83       	st	Z, r24
    7166:	80 e2       	ldi	r24, 0x20	; 32
    7168:	81 83       	std	Z+1, r24	; 0x01
    716a:	12 82       	std	Z+2, r1	; 0x02
    716c:	13 82       	std	Z+3, r1	; 0x03
    716e:	14 82       	std	Z+4, r1	; 0x04
    7170:	15 82       	std	Z+5, r1	; 0x05
    7172:	82 e0       	ldi	r24, 0x02	; 2
    7174:	90 e0       	ldi	r25, 0x00	; 0
    7176:	86 83       	std	Z+6, r24	; 0x06
    7178:	97 83       	std	Z+7, r25	; 0x07
    717a:	10 86       	std	Z+8, r1	; 0x08
    717c:	11 86       	std	Z+9, r1	; 0x09
    717e:	ec e5       	ldi	r30, 0x5C	; 92
    7180:	f8 e2       	ldi	r31, 0x28	; 40
    7182:	80 e0       	ldi	r24, 0x00	; 0
    7184:	92 ec       	ldi	r25, 0xC2	; 194
    7186:	a1 e0       	ldi	r26, 0x01	; 1
    7188:	b0 e0       	ldi	r27, 0x00	; 0
    718a:	80 83       	st	Z, r24
    718c:	91 83       	std	Z+1, r25	; 0x01
    718e:	a2 83       	std	Z+2, r26	; 0x02
    7190:	b3 83       	std	Z+3, r27	; 0x03
    7192:	14 82       	std	Z+4, r1	; 0x04
    7194:	15 82       	std	Z+5, r1	; 0x05
    7196:	88 e0       	ldi	r24, 0x08	; 8
    7198:	86 83       	std	Z+6, r24	; 0x06
    719a:	bf 01       	movw	r22, r30
    719c:	80 e0       	ldi	r24, 0x00	; 0
    719e:	7d da       	rcall	.-2822   	; 0x669a <usb_callback_config>
    71a0:	75 da       	rcall	.-2838   	; 0x668c <usb_callback_cdc_enable>
    71a2:	88 23       	and	r24, r24
    71a4:	29 f0       	breq	.+10     	; 0x71b0 <udi_cdc_comm_enable+0x5e>
    71a6:	90 91 4e 28 	lds	r25, 0x284E	; 0x80284e <udi_cdc_nb_comm_enabled>
    71aa:	9f 5f       	subi	r25, 0xFF	; 255
    71ac:	90 93 4e 28 	sts	0x284E, r25	; 0x80284e <udi_cdc_nb_comm_enabled>
    71b0:	08 95       	ret

000071b2 <udi_cdc_tx_send>:
    71b2:	ff 92       	push	r15
    71b4:	0f 93       	push	r16
    71b6:	1f 93       	push	r17
    71b8:	cf 93       	push	r28
    71ba:	df 93       	push	r29
    71bc:	1f 92       	push	r1
    71be:	cd b7       	in	r28, 0x3d	; 61
    71c0:	de b7       	in	r29, 0x3e	; 62
    71c2:	80 91 3b 27 	lds	r24, 0x273B	; 0x80273b <udi_cdc_tx_trans_ongoing>
    71c6:	81 11       	cpse	r24, r1
    71c8:	9f c0       	rjmp	.+318    	; 0x7308 <udi_cdc_tx_send+0x156>
    71ca:	0e 94 bd 2a 	call	0x557a	; 0x557a <udd_is_high_speed>
    71ce:	88 23       	and	r24, r24
    71d0:	51 f0       	breq	.+20     	; 0x71e6 <udi_cdc_tx_send+0x34>
    71d2:	00 91 3c 27 	lds	r16, 0x273C	; 0x80273c <udi_cdc_tx_sof_num>
    71d6:	10 91 3d 27 	lds	r17, 0x273D	; 0x80273d <udi_cdc_tx_sof_num+0x1>
    71da:	0e 94 ca 2a 	call	0x5594	; 0x5594 <udd_get_micro_frame_number>
    71de:	08 17       	cp	r16, r24
    71e0:	19 07       	cpc	r17, r25
    71e2:	59 f4       	brne	.+22     	; 0x71fa <udi_cdc_tx_send+0x48>
    71e4:	91 c0       	rjmp	.+290    	; 0x7308 <udi_cdc_tx_send+0x156>
    71e6:	00 91 3c 27 	lds	r16, 0x273C	; 0x80273c <udi_cdc_tx_sof_num>
    71ea:	10 91 3d 27 	lds	r17, 0x273D	; 0x80273d <udi_cdc_tx_sof_num+0x1>
    71ee:	0e 94 c5 2a 	call	0x558a	; 0x558a <udd_get_frame_number>
    71f2:	08 17       	cp	r16, r24
    71f4:	19 07       	cpc	r17, r25
    71f6:	09 f4       	brne	.+2      	; 0x71fa <udi_cdc_tx_send+0x48>
    71f8:	87 c0       	rjmp	.+270    	; 0x7308 <udi_cdc_tx_send+0x156>
    71fa:	8f b7       	in	r24, 0x3f	; 63
    71fc:	89 83       	std	Y+1, r24	; 0x01
    71fe:	f8 94       	cli
    7200:	19 81       	ldd	r17, Y+1	; 0x01
    7202:	00 91 3e 27 	lds	r16, 0x273E	; 0x80273e <udi_cdc_tx_buf_sel>
    7206:	e0 2f       	mov	r30, r16
    7208:	f0 e0       	ldi	r31, 0x00	; 0
    720a:	ee 0f       	add	r30, r30
    720c:	ff 1f       	adc	r31, r31
    720e:	e1 5c       	subi	r30, 0xC1	; 193
    7210:	f8 4d       	sbci	r31, 0xD8	; 216
    7212:	80 81       	ld	r24, Z
    7214:	91 81       	ldd	r25, Z+1	; 0x01
    7216:	89 2b       	or	r24, r25
    7218:	09 f5       	brne	.+66     	; 0x725c <udi_cdc_tx_send+0xaa>
    721a:	80 91 38 27 	lds	r24, 0x2738	; 0x802738 <sof_zlp_counter.5059>
    721e:	90 91 39 27 	lds	r25, 0x2739	; 0x802739 <sof_zlp_counter.5059+0x1>
    7222:	01 96       	adiw	r24, 0x01	; 1
    7224:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <sof_zlp_counter.5059>
    7228:	90 93 39 27 	sts	0x2739, r25	; 0x802739 <sof_zlp_counter.5059+0x1>
    722c:	0e 94 bd 2a 	call	0x557a	; 0x557a <udd_is_high_speed>
    7230:	81 11       	cpse	r24, r1
    7232:	07 c0       	rjmp	.+14     	; 0x7242 <udi_cdc_tx_send+0x90>
    7234:	80 91 38 27 	lds	r24, 0x2738	; 0x802738 <sof_zlp_counter.5059>
    7238:	90 91 39 27 	lds	r25, 0x2739	; 0x802739 <sof_zlp_counter.5059+0x1>
    723c:	84 36       	cpi	r24, 0x64	; 100
    723e:	91 05       	cpc	r25, r1
    7240:	58 f0       	brcs	.+22     	; 0x7258 <udi_cdc_tx_send+0xa6>
    7242:	0e 94 bd 2a 	call	0x557a	; 0x557a <udd_is_high_speed>
    7246:	88 23       	and	r24, r24
    7248:	49 f0       	breq	.+18     	; 0x725c <udi_cdc_tx_send+0xaa>
    724a:	80 91 38 27 	lds	r24, 0x2738	; 0x802738 <sof_zlp_counter.5059>
    724e:	90 91 39 27 	lds	r25, 0x2739	; 0x802739 <sof_zlp_counter.5059+0x1>
    7252:	80 32       	cpi	r24, 0x20	; 32
    7254:	93 40       	sbci	r25, 0x03	; 3
    7256:	10 f4       	brcc	.+4      	; 0x725c <udi_cdc_tx_send+0xaa>
    7258:	1f bf       	out	0x3f, r17	; 63
    725a:	56 c0       	rjmp	.+172    	; 0x7308 <udi_cdc_tx_send+0x156>
    725c:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <sof_zlp_counter.5059>
    7260:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <sof_zlp_counter.5059+0x1>
    7264:	80 91 3a 27 	lds	r24, 0x273A	; 0x80273a <udi_cdc_tx_both_buf_to_send>
    7268:	81 11       	cpse	r24, r1
    726a:	06 c0       	rjmp	.+12     	; 0x7278 <udi_cdc_tx_send+0xc6>
    726c:	81 e0       	ldi	r24, 0x01	; 1
    726e:	01 11       	cpse	r16, r1
    7270:	80 e0       	ldi	r24, 0x00	; 0
    7272:	80 93 3e 27 	sts	0x273E, r24	; 0x80273e <udi_cdc_tx_buf_sel>
    7276:	04 c0       	rjmp	.+8      	; 0x7280 <udi_cdc_tx_send+0xce>
    7278:	81 e0       	ldi	r24, 0x01	; 1
    727a:	01 11       	cpse	r16, r1
    727c:	80 e0       	ldi	r24, 0x00	; 0
    727e:	08 2f       	mov	r16, r24
    7280:	81 e0       	ldi	r24, 0x01	; 1
    7282:	80 93 3b 27 	sts	0x273B, r24	; 0x80273b <udi_cdc_tx_trans_ongoing>
    7286:	1f bf       	out	0x3f, r17	; 63
    7288:	10 e0       	ldi	r17, 0x00	; 0
    728a:	f8 01       	movw	r30, r16
    728c:	ee 0f       	add	r30, r30
    728e:	ff 1f       	adc	r31, r31
    7290:	e1 5c       	subi	r30, 0xC1	; 193
    7292:	f8 4d       	sbci	r31, 0xD8	; 216
    7294:	80 81       	ld	r24, Z
    7296:	91 81       	ldd	r25, Z+1	; 0x01
    7298:	ff 24       	eor	r15, r15
    729a:	f3 94       	inc	r15
    729c:	80 34       	cpi	r24, 0x40	; 64
    729e:	91 05       	cpc	r25, r1
    72a0:	09 f4       	brne	.+2      	; 0x72a4 <udi_cdc_tx_send+0xf2>
    72a2:	f1 2c       	mov	r15, r1
    72a4:	80 34       	cpi	r24, 0x40	; 64
    72a6:	91 05       	cpc	r25, r1
    72a8:	91 f0       	breq	.+36     	; 0x72ce <udi_cdc_tx_send+0x11c>
    72aa:	0e 94 bd 2a 	call	0x557a	; 0x557a <udd_is_high_speed>
    72ae:	88 23       	and	r24, r24
    72b0:	39 f0       	breq	.+14     	; 0x72c0 <udi_cdc_tx_send+0x10e>
    72b2:	0e 94 ca 2a 	call	0x5594	; 0x5594 <udd_get_micro_frame_number>
    72b6:	80 93 3c 27 	sts	0x273C, r24	; 0x80273c <udi_cdc_tx_sof_num>
    72ba:	90 93 3d 27 	sts	0x273D, r25	; 0x80273d <udi_cdc_tx_sof_num+0x1>
    72be:	0b c0       	rjmp	.+22     	; 0x72d6 <udi_cdc_tx_send+0x124>
    72c0:	0e 94 c5 2a 	call	0x558a	; 0x558a <udd_get_frame_number>
    72c4:	80 93 3c 27 	sts	0x273C, r24	; 0x80273c <udi_cdc_tx_sof_num>
    72c8:	90 93 3d 27 	sts	0x273D, r25	; 0x80273d <udi_cdc_tx_sof_num+0x1>
    72cc:	04 c0       	rjmp	.+8      	; 0x72d6 <udi_cdc_tx_send+0x124>
    72ce:	10 92 3c 27 	sts	0x273C, r1	; 0x80273c <udi_cdc_tx_sof_num>
    72d2:	10 92 3d 27 	sts	0x273D, r1	; 0x80273d <udi_cdc_tx_sof_num+0x1>
    72d6:	f8 01       	movw	r30, r16
    72d8:	ee 0f       	add	r30, r30
    72da:	ff 1f       	adc	r31, r31
    72dc:	e1 5c       	subi	r30, 0xC1	; 193
    72de:	f8 4d       	sbci	r31, 0xD8	; 216
    72e0:	20 81       	ld	r18, Z
    72e2:	31 81       	ldd	r19, Z+1	; 0x01
    72e4:	a8 01       	movw	r20, r16
    72e6:	00 24       	eor	r0, r0
    72e8:	56 95       	lsr	r21
    72ea:	47 95       	ror	r20
    72ec:	07 94       	ror	r0
    72ee:	56 95       	lsr	r21
    72f0:	47 95       	ror	r20
    72f2:	07 94       	ror	r0
    72f4:	54 2f       	mov	r21, r20
    72f6:	40 2d       	mov	r20, r0
    72f8:	4c 5b       	subi	r20, 0xBC	; 188
    72fa:	58 4d       	sbci	r21, 0xD8	; 216
    72fc:	0e e8       	ldi	r16, 0x8E	; 142
    72fe:	19 e3       	ldi	r17, 0x39	; 57
    7300:	6f 2d       	mov	r22, r15
    7302:	81 e8       	ldi	r24, 0x81	; 129
    7304:	0e 94 ae 2b 	call	0x575c	; 0x575c <udd_ep_run>
    7308:	0f 90       	pop	r0
    730a:	df 91       	pop	r29
    730c:	cf 91       	pop	r28
    730e:	1f 91       	pop	r17
    7310:	0f 91       	pop	r16
    7312:	ff 90       	pop	r15
    7314:	08 95       	ret

00007316 <udi_cdc_data_sof_notify>:
    7316:	80 e0       	ldi	r24, 0x00	; 0
    7318:	4c cf       	rjmp	.-360    	; 0x71b2 <udi_cdc_tx_send>
    731a:	08 95       	ret

0000731c <udi_cdc_data_sent>:
    731c:	81 11       	cpse	r24, r1
    731e:	19 c0       	rjmp	.+50     	; 0x7352 <udi_cdc_data_sent+0x36>
    7320:	20 91 3e 27 	lds	r18, 0x273E	; 0x80273e <udi_cdc_tx_buf_sel>
    7324:	81 e0       	ldi	r24, 0x01	; 1
    7326:	90 e0       	ldi	r25, 0x00	; 0
    7328:	22 23       	and	r18, r18
    732a:	11 f0       	breq	.+4      	; 0x7330 <udi_cdc_data_sent+0x14>
    732c:	80 e0       	ldi	r24, 0x00	; 0
    732e:	90 e0       	ldi	r25, 0x00	; 0
    7330:	88 0f       	add	r24, r24
    7332:	99 1f       	adc	r25, r25
    7334:	fc 01       	movw	r30, r24
    7336:	e1 5c       	subi	r30, 0xC1	; 193
    7338:	f8 4d       	sbci	r31, 0xD8	; 216
    733a:	10 82       	st	Z, r1
    733c:	11 82       	std	Z+1, r1	; 0x01
    733e:	10 92 3a 27 	sts	0x273A, r1	; 0x80273a <udi_cdc_tx_both_buf_to_send>
    7342:	10 92 3b 27 	sts	0x273B, r1	; 0x80273b <udi_cdc_tx_trans_ongoing>
    7346:	67 2b       	or	r22, r23
    7348:	11 f0       	breq	.+4      	; 0x734e <udi_cdc_data_sent+0x32>
    734a:	80 e0       	ldi	r24, 0x00	; 0
    734c:	aa d9       	rcall	.-3244   	; 0x66a2 <usb_callback_tx_empty_notify>
    734e:	80 e0       	ldi	r24, 0x00	; 0
    7350:	30 cf       	rjmp	.-416    	; 0x71b2 <udi_cdc_tx_send>
    7352:	08 95       	ret

00007354 <udi_cdc_data_disable>:
    7354:	80 91 4d 28 	lds	r24, 0x284D	; 0x80284d <udi_cdc_nb_data_enabled>
    7358:	81 50       	subi	r24, 0x01	; 1
    735a:	80 93 4d 28 	sts	0x284D, r24	; 0x80284d <udi_cdc_nb_data_enabled>
    735e:	80 91 4d 28 	lds	r24, 0x284D	; 0x80284d <udi_cdc_nb_data_enabled>
    7362:	98 d9       	rcall	.-3280   	; 0x6694 <usb_callback_cdc_disable>
    7364:	10 92 4c 28 	sts	0x284C, r1	; 0x80284c <udi_cdc_data_running>
    7368:	08 95       	ret

0000736a <udi_cdc_comm_setup>:
    736a:	cf 93       	push	r28
    736c:	df 93       	push	r29
    736e:	80 91 7f 28 	lds	r24, 0x287F	; 0x80287f <udd_g_ctrlreq>
    7372:	88 23       	and	r24, r24
    7374:	e4 f4       	brge	.+56     	; 0x73ae <udi_cdc_comm_setup+0x44>
    7376:	80 76       	andi	r24, 0x60	; 96
    7378:	80 32       	cpi	r24, 0x20	; 32
    737a:	09 f0       	breq	.+2      	; 0x737e <udi_cdc_comm_setup+0x14>
    737c:	47 c0       	rjmp	.+142    	; 0x740c <udi_cdc_comm_setup+0xa2>
    737e:	80 91 80 28 	lds	r24, 0x2880	; 0x802880 <udd_g_ctrlreq+0x1>
    7382:	81 32       	cpi	r24, 0x21	; 33
    7384:	09 f0       	breq	.+2      	; 0x7388 <udi_cdc_comm_setup+0x1e>
    7386:	44 c0       	rjmp	.+136    	; 0x7410 <udi_cdc_comm_setup+0xa6>
    7388:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    738c:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    7390:	07 97       	sbiw	r24, 0x07	; 7
    7392:	09 f0       	breq	.+2      	; 0x7396 <udi_cdc_comm_setup+0x2c>
    7394:	3f c0       	rjmp	.+126    	; 0x7414 <udi_cdc_comm_setup+0xaa>
    7396:	ef e7       	ldi	r30, 0x7F	; 127
    7398:	f8 e2       	ldi	r31, 0x28	; 40
    739a:	8c e5       	ldi	r24, 0x5C	; 92
    739c:	98 e2       	ldi	r25, 0x28	; 40
    739e:	80 87       	std	Z+8, r24	; 0x08
    73a0:	91 87       	std	Z+9, r25	; 0x09
    73a2:	87 e0       	ldi	r24, 0x07	; 7
    73a4:	90 e0       	ldi	r25, 0x00	; 0
    73a6:	82 87       	std	Z+10, r24	; 0x0a
    73a8:	93 87       	std	Z+11, r25	; 0x0b
    73aa:	81 e0       	ldi	r24, 0x01	; 1
    73ac:	3a c0       	rjmp	.+116    	; 0x7422 <udi_cdc_comm_setup+0xb8>
    73ae:	80 76       	andi	r24, 0x60	; 96
    73b0:	80 32       	cpi	r24, 0x20	; 32
    73b2:	91 f5       	brne	.+100    	; 0x7418 <udi_cdc_comm_setup+0xae>
    73b4:	80 91 80 28 	lds	r24, 0x2880	; 0x802880 <udd_g_ctrlreq+0x1>
    73b8:	80 32       	cpi	r24, 0x20	; 32
    73ba:	19 f0       	breq	.+6      	; 0x73c2 <udi_cdc_comm_setup+0x58>
    73bc:	82 32       	cpi	r24, 0x22	; 34
    73be:	b9 f0       	breq	.+46     	; 0x73ee <udi_cdc_comm_setup+0x84>
    73c0:	2d c0       	rjmp	.+90     	; 0x741c <udi_cdc_comm_setup+0xb2>
    73c2:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    73c6:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    73ca:	07 97       	sbiw	r24, 0x07	; 7
    73cc:	49 f5       	brne	.+82     	; 0x7420 <udi_cdc_comm_setup+0xb6>
    73ce:	ef e7       	ldi	r30, 0x7F	; 127
    73d0:	f8 e2       	ldi	r31, 0x28	; 40
    73d2:	84 ea       	ldi	r24, 0xA4	; 164
    73d4:	98 e3       	ldi	r25, 0x38	; 56
    73d6:	84 87       	std	Z+12, r24	; 0x0c
    73d8:	95 87       	std	Z+13, r25	; 0x0d
    73da:	8c e5       	ldi	r24, 0x5C	; 92
    73dc:	98 e2       	ldi	r25, 0x28	; 40
    73de:	80 87       	std	Z+8, r24	; 0x08
    73e0:	91 87       	std	Z+9, r25	; 0x09
    73e2:	87 e0       	ldi	r24, 0x07	; 7
    73e4:	90 e0       	ldi	r25, 0x00	; 0
    73e6:	82 87       	std	Z+10, r24	; 0x0a
    73e8:	93 87       	std	Z+11, r25	; 0x0b
    73ea:	81 e0       	ldi	r24, 0x01	; 1
    73ec:	1a c0       	rjmp	.+52     	; 0x7422 <udi_cdc_comm_setup+0xb8>
    73ee:	cf e7       	ldi	r28, 0x7F	; 127
    73f0:	d8 e2       	ldi	r29, 0x28	; 40
    73f2:	6a 81       	ldd	r22, Y+2	; 0x02
    73f4:	61 70       	andi	r22, 0x01	; 1
    73f6:	80 e0       	ldi	r24, 0x00	; 0
    73f8:	51 d9       	rcall	.-3422   	; 0x669c <usb_callback_cdc_set_dtr>
    73fa:	6a 81       	ldd	r22, Y+2	; 0x02
    73fc:	7b 81       	ldd	r23, Y+3	; 0x03
    73fe:	76 95       	lsr	r23
    7400:	67 95       	ror	r22
    7402:	61 70       	andi	r22, 0x01	; 1
    7404:	80 e0       	ldi	r24, 0x00	; 0
    7406:	4b d9       	rcall	.-3434   	; 0x669e <usb_callback_cdc_set_rts>
    7408:	81 e0       	ldi	r24, 0x01	; 1
    740a:	0b c0       	rjmp	.+22     	; 0x7422 <udi_cdc_comm_setup+0xb8>
    740c:	80 e0       	ldi	r24, 0x00	; 0
    740e:	09 c0       	rjmp	.+18     	; 0x7422 <udi_cdc_comm_setup+0xb8>
    7410:	80 e0       	ldi	r24, 0x00	; 0
    7412:	07 c0       	rjmp	.+14     	; 0x7422 <udi_cdc_comm_setup+0xb8>
    7414:	80 e0       	ldi	r24, 0x00	; 0
    7416:	05 c0       	rjmp	.+10     	; 0x7422 <udi_cdc_comm_setup+0xb8>
    7418:	80 e0       	ldi	r24, 0x00	; 0
    741a:	03 c0       	rjmp	.+6      	; 0x7422 <udi_cdc_comm_setup+0xb8>
    741c:	80 e0       	ldi	r24, 0x00	; 0
    741e:	01 c0       	rjmp	.+2      	; 0x7422 <udi_cdc_comm_setup+0xb8>
    7420:	80 e0       	ldi	r24, 0x00	; 0
    7422:	df 91       	pop	r29
    7424:	cf 91       	pop	r28
    7426:	08 95       	ret

00007428 <udi_cdc_multi_get_nb_received_data>:
    7428:	cf 93       	push	r28
    742a:	df 93       	push	r29
    742c:	1f 92       	push	r1
    742e:	cd b7       	in	r28, 0x3d	; 61
    7430:	de b7       	in	r29, 0x3e	; 62
    7432:	8f b7       	in	r24, 0x3f	; 63
    7434:	89 83       	std	Y+1, r24	; 0x01
    7436:	f8 94       	cli
    7438:	49 81       	ldd	r20, Y+1	; 0x01
    743a:	20 91 c5 27 	lds	r18, 0x27C5	; 0x8027c5 <udi_cdc_rx_pos>
    743e:	30 91 c6 27 	lds	r19, 0x27C6	; 0x8027c6 <udi_cdc_rx_pos+0x1>
    7442:	e0 91 c7 27 	lds	r30, 0x27C7	; 0x8027c7 <udi_cdc_rx_buf_sel>
    7446:	f0 e0       	ldi	r31, 0x00	; 0
    7448:	ee 0f       	add	r30, r30
    744a:	ff 1f       	adc	r31, r31
    744c:	e8 53       	subi	r30, 0x38	; 56
    744e:	f8 4d       	sbci	r31, 0xD8	; 216
    7450:	80 81       	ld	r24, Z
    7452:	91 81       	ldd	r25, Z+1	; 0x01
    7454:	4f bf       	out	0x3f, r20	; 63
    7456:	82 1b       	sub	r24, r18
    7458:	93 0b       	sbc	r25, r19
    745a:	0f 90       	pop	r0
    745c:	df 91       	pop	r29
    745e:	cf 91       	pop	r28
    7460:	08 95       	ret

00007462 <udi_cdc_multi_is_rx_ready>:
    7462:	e2 df       	rcall	.-60     	; 0x7428 <udi_cdc_multi_get_nb_received_data>
    7464:	21 e0       	ldi	r18, 0x01	; 1
    7466:	89 2b       	or	r24, r25
    7468:	09 f4       	brne	.+2      	; 0x746c <udi_cdc_multi_is_rx_ready+0xa>
    746a:	20 e0       	ldi	r18, 0x00	; 0
    746c:	82 2f       	mov	r24, r18
    746e:	08 95       	ret

00007470 <udi_cdc_rx_start>:
    7470:	0f 93       	push	r16
    7472:	1f 93       	push	r17
    7474:	cf 93       	push	r28
    7476:	df 93       	push	r29
    7478:	1f 92       	push	r1
    747a:	cd b7       	in	r28, 0x3d	; 61
    747c:	de b7       	in	r29, 0x3e	; 62
    747e:	8f b7       	in	r24, 0x3f	; 63
    7480:	89 83       	std	Y+1, r24	; 0x01
    7482:	f8 94       	cli
    7484:	99 81       	ldd	r25, Y+1	; 0x01
    7486:	20 91 c7 27 	lds	r18, 0x27C7	; 0x8027c7 <udi_cdc_rx_buf_sel>
    748a:	80 91 c4 27 	lds	r24, 0x27C4	; 0x8027c4 <udi_cdc_rx_trans_ongoing>
    748e:	81 11       	cpse	r24, r1
    7490:	10 c0       	rjmp	.+32     	; 0x74b2 <udi_cdc_rx_start+0x42>
    7492:	60 91 c5 27 	lds	r22, 0x27C5	; 0x8027c5 <udi_cdc_rx_pos>
    7496:	70 91 c6 27 	lds	r23, 0x27C6	; 0x8027c6 <udi_cdc_rx_pos+0x1>
    749a:	02 2f       	mov	r16, r18
    749c:	10 e0       	ldi	r17, 0x00	; 0
    749e:	f8 01       	movw	r30, r16
    74a0:	ee 0f       	add	r30, r30
    74a2:	ff 1f       	adc	r31, r31
    74a4:	e8 53       	subi	r30, 0x38	; 56
    74a6:	f8 4d       	sbci	r31, 0xD8	; 216
    74a8:	40 81       	ld	r20, Z
    74aa:	51 81       	ldd	r21, Z+1	; 0x01
    74ac:	64 17       	cp	r22, r20
    74ae:	75 07       	cpc	r23, r21
    74b0:	18 f4       	brcc	.+6      	; 0x74b8 <udi_cdc_rx_start+0x48>
    74b2:	9f bf       	out	0x3f, r25	; 63
    74b4:	80 e0       	ldi	r24, 0x00	; 0
    74b6:	27 c0       	rjmp	.+78     	; 0x7506 <udi_cdc_rx_start+0x96>
    74b8:	10 92 c5 27 	sts	0x27C5, r1	; 0x8027c5 <udi_cdc_rx_pos>
    74bc:	10 92 c6 27 	sts	0x27C6, r1	; 0x8027c6 <udi_cdc_rx_pos+0x1>
    74c0:	81 e0       	ldi	r24, 0x01	; 1
    74c2:	21 11       	cpse	r18, r1
    74c4:	80 e0       	ldi	r24, 0x00	; 0
    74c6:	80 93 c7 27 	sts	0x27C7, r24	; 0x8027c7 <udi_cdc_rx_buf_sel>
    74ca:	81 e0       	ldi	r24, 0x01	; 1
    74cc:	80 93 c4 27 	sts	0x27C4, r24	; 0x8027c4 <udi_cdc_rx_trans_ongoing>
    74d0:	9f bf       	out	0x3f, r25	; 63
    74d2:	80 e0       	ldi	r24, 0x00	; 0
    74d4:	c6 df       	rcall	.-116    	; 0x7462 <udi_cdc_multi_is_rx_ready>
    74d6:	88 23       	and	r24, r24
    74d8:	11 f0       	breq	.+4      	; 0x74de <udi_cdc_rx_start+0x6e>
    74da:	80 e0       	ldi	r24, 0x00	; 0
    74dc:	e1 d8       	rcall	.-3646   	; 0x66a0 <usb_callback_rx_notify>
    74de:	a8 01       	movw	r20, r16
    74e0:	00 24       	eor	r0, r0
    74e2:	56 95       	lsr	r21
    74e4:	47 95       	ror	r20
    74e6:	07 94       	ror	r0
    74e8:	56 95       	lsr	r21
    74ea:	47 95       	ror	r20
    74ec:	07 94       	ror	r0
    74ee:	54 2f       	mov	r21, r20
    74f0:	40 2d       	mov	r20, r0
    74f2:	44 53       	subi	r20, 0x34	; 52
    74f4:	58 4d       	sbci	r21, 0xD8	; 216
    74f6:	0b eb       	ldi	r16, 0xBB	; 187
    74f8:	1a e3       	ldi	r17, 0x3A	; 58
    74fa:	20 e4       	ldi	r18, 0x40	; 64
    74fc:	30 e0       	ldi	r19, 0x00	; 0
    74fe:	61 e0       	ldi	r22, 0x01	; 1
    7500:	82 e0       	ldi	r24, 0x02	; 2
    7502:	0e 94 ae 2b 	call	0x575c	; 0x575c <udd_ep_run>
    7506:	0f 90       	pop	r0
    7508:	df 91       	pop	r29
    750a:	cf 91       	pop	r28
    750c:	1f 91       	pop	r17
    750e:	0f 91       	pop	r16
    7510:	08 95       	ret

00007512 <udi_cdc_data_enable>:
    7512:	10 92 4d 28 	sts	0x284D, r1	; 0x80284d <udi_cdc_nb_data_enabled>
    7516:	10 92 3b 27 	sts	0x273B, r1	; 0x80273b <udi_cdc_tx_trans_ongoing>
    751a:	10 92 3a 27 	sts	0x273A, r1	; 0x80273a <udi_cdc_tx_both_buf_to_send>
    751e:	10 92 3e 27 	sts	0x273E, r1	; 0x80273e <udi_cdc_tx_buf_sel>
    7522:	ef e3       	ldi	r30, 0x3F	; 63
    7524:	f7 e2       	ldi	r31, 0x27	; 39
    7526:	10 82       	st	Z, r1
    7528:	11 82       	std	Z+1, r1	; 0x01
    752a:	12 82       	std	Z+2, r1	; 0x02
    752c:	13 82       	std	Z+3, r1	; 0x03
    752e:	10 92 3c 27 	sts	0x273C, r1	; 0x80273c <udi_cdc_tx_sof_num>
    7532:	10 92 3d 27 	sts	0x273D, r1	; 0x80273d <udi_cdc_tx_sof_num+0x1>
    7536:	80 e0       	ldi	r24, 0x00	; 0
    7538:	3c de       	rcall	.-904    	; 0x71b2 <udi_cdc_tx_send>
    753a:	10 92 c4 27 	sts	0x27C4, r1	; 0x8027c4 <udi_cdc_rx_trans_ongoing>
    753e:	10 92 c7 27 	sts	0x27C7, r1	; 0x8027c7 <udi_cdc_rx_buf_sel>
    7542:	e8 ec       	ldi	r30, 0xC8	; 200
    7544:	f7 e2       	ldi	r31, 0x27	; 39
    7546:	10 82       	st	Z, r1
    7548:	11 82       	std	Z+1, r1	; 0x01
    754a:	12 82       	std	Z+2, r1	; 0x02
    754c:	13 82       	std	Z+3, r1	; 0x03
    754e:	10 92 c5 27 	sts	0x27C5, r1	; 0x8027c5 <udi_cdc_rx_pos>
    7552:	10 92 c6 27 	sts	0x27C6, r1	; 0x8027c6 <udi_cdc_rx_pos+0x1>
    7556:	80 e0       	ldi	r24, 0x00	; 0
    7558:	8b df       	rcall	.-234    	; 0x7470 <udi_cdc_rx_start>
    755a:	88 23       	and	r24, r24
    755c:	59 f0       	breq	.+22     	; 0x7574 <udi_cdc_data_enable+0x62>
    755e:	90 91 4d 28 	lds	r25, 0x284D	; 0x80284d <udi_cdc_nb_data_enabled>
    7562:	9f 5f       	subi	r25, 0xFF	; 255
    7564:	90 93 4d 28 	sts	0x284D, r25	; 0x80284d <udi_cdc_nb_data_enabled>
    7568:	90 91 4d 28 	lds	r25, 0x284D	; 0x80284d <udi_cdc_nb_data_enabled>
    756c:	91 30       	cpi	r25, 0x01	; 1
    756e:	11 f4       	brne	.+4      	; 0x7574 <udi_cdc_data_enable+0x62>
    7570:	90 93 4c 28 	sts	0x284C, r25	; 0x80284c <udi_cdc_data_running>
    7574:	08 95       	ret

00007576 <udi_cdc_data_received>:
    7576:	0f 93       	push	r16
    7578:	1f 93       	push	r17
    757a:	81 11       	cpse	r24, r1
    757c:	29 c0       	rjmp	.+82     	; 0x75d0 <udi_cdc_data_received+0x5a>
    757e:	80 91 c7 27 	lds	r24, 0x27C7	; 0x8027c7 <udi_cdc_rx_buf_sel>
    7582:	e1 e0       	ldi	r30, 0x01	; 1
    7584:	81 11       	cpse	r24, r1
    7586:	e0 e0       	ldi	r30, 0x00	; 0
    7588:	84 2f       	mov	r24, r20
    758a:	61 15       	cp	r22, r1
    758c:	71 05       	cpc	r23, r1
    758e:	a9 f4       	brne	.+42     	; 0x75ba <udi_cdc_data_received+0x44>
    7590:	4e 2f       	mov	r20, r30
    7592:	50 e0       	ldi	r21, 0x00	; 0
    7594:	00 24       	eor	r0, r0
    7596:	56 95       	lsr	r21
    7598:	47 95       	ror	r20
    759a:	07 94       	ror	r0
    759c:	56 95       	lsr	r21
    759e:	47 95       	ror	r20
    75a0:	07 94       	ror	r0
    75a2:	54 2f       	mov	r21, r20
    75a4:	40 2d       	mov	r20, r0
    75a6:	44 53       	subi	r20, 0x34	; 52
    75a8:	58 4d       	sbci	r21, 0xD8	; 216
    75aa:	0b eb       	ldi	r16, 0xBB	; 187
    75ac:	1a e3       	ldi	r17, 0x3A	; 58
    75ae:	20 e4       	ldi	r18, 0x40	; 64
    75b0:	30 e0       	ldi	r19, 0x00	; 0
    75b2:	61 e0       	ldi	r22, 0x01	; 1
    75b4:	0e 94 ae 2b 	call	0x575c	; 0x575c <udd_ep_run>
    75b8:	0b c0       	rjmp	.+22     	; 0x75d0 <udi_cdc_data_received+0x5a>
    75ba:	f0 e0       	ldi	r31, 0x00	; 0
    75bc:	ee 0f       	add	r30, r30
    75be:	ff 1f       	adc	r31, r31
    75c0:	e8 53       	subi	r30, 0x38	; 56
    75c2:	f8 4d       	sbci	r31, 0xD8	; 216
    75c4:	60 83       	st	Z, r22
    75c6:	71 83       	std	Z+1, r23	; 0x01
    75c8:	10 92 c4 27 	sts	0x27C4, r1	; 0x8027c4 <udi_cdc_rx_trans_ongoing>
    75cc:	80 e0       	ldi	r24, 0x00	; 0
    75ce:	50 df       	rcall	.-352    	; 0x7470 <udi_cdc_rx_start>
    75d0:	1f 91       	pop	r17
    75d2:	0f 91       	pop	r16
    75d4:	08 95       	ret

000075d6 <udi_cdc_multi_getc>:
    75d6:	ef 92       	push	r14
    75d8:	ff 92       	push	r15
    75da:	1f 93       	push	r17
    75dc:	cf 93       	push	r28
    75de:	df 93       	push	r29
    75e0:	1f 92       	push	r1
    75e2:	cd b7       	in	r28, 0x3d	; 61
    75e4:	de b7       	in	r29, 0x3e	; 62
    75e6:	11 e0       	ldi	r17, 0x01	; 1
    75e8:	80 91 62 28 	lds	r24, 0x2862	; 0x802862 <udi_cdc_line_coding+0x6>
    75ec:	89 30       	cpi	r24, 0x09	; 9
    75ee:	09 f0       	breq	.+2      	; 0x75f2 <udi_cdc_multi_getc+0x1c>
    75f0:	10 e0       	ldi	r17, 0x00	; 0
    75f2:	40 e0       	ldi	r20, 0x00	; 0
    75f4:	50 e0       	ldi	r21, 0x00	; 0
    75f6:	8f b7       	in	r24, 0x3f	; 63
    75f8:	89 83       	std	Y+1, r24	; 0x01
    75fa:	f8 94       	cli
    75fc:	a9 81       	ldd	r26, Y+1	; 0x01
    75fe:	20 91 c5 27 	lds	r18, 0x27C5	; 0x8027c5 <udi_cdc_rx_pos>
    7602:	30 91 c6 27 	lds	r19, 0x27C6	; 0x8027c6 <udi_cdc_rx_pos+0x1>
    7606:	80 91 c7 27 	lds	r24, 0x27C7	; 0x8027c7 <udi_cdc_rx_buf_sel>
    760a:	90 e0       	ldi	r25, 0x00	; 0
    760c:	fc 01       	movw	r30, r24
    760e:	ee 0f       	add	r30, r30
    7610:	ff 1f       	adc	r31, r31
    7612:	e8 53       	subi	r30, 0x38	; 56
    7614:	f8 4d       	sbci	r31, 0xD8	; 216
    7616:	60 81       	ld	r22, Z
    7618:	71 81       	ldd	r23, Z+1	; 0x01
    761a:	af bf       	out	0x3f, r26	; 63
    761c:	26 17       	cp	r18, r22
    761e:	37 07       	cpc	r19, r23
    7620:	30 f0       	brcs	.+12     	; 0x762e <udi_cdc_multi_getc+0x58>
    7622:	80 91 4c 28 	lds	r24, 0x284C	; 0x80284c <udi_cdc_data_running>
    7626:	81 11       	cpse	r24, r1
    7628:	e6 cf       	rjmp	.-52     	; 0x75f6 <udi_cdc_multi_getc+0x20>
    762a:	90 e0       	ldi	r25, 0x00	; 0
    762c:	21 c0       	rjmp	.+66     	; 0x7670 <udi_cdc_multi_getc+0x9a>
    762e:	fc 01       	movw	r30, r24
    7630:	00 24       	eor	r0, r0
    7632:	f6 95       	lsr	r31
    7634:	e7 95       	ror	r30
    7636:	07 94       	ror	r0
    7638:	f6 95       	lsr	r31
    763a:	e7 95       	ror	r30
    763c:	07 94       	ror	r0
    763e:	fe 2f       	mov	r31, r30
    7640:	e0 2d       	mov	r30, r0
    7642:	e4 53       	subi	r30, 0x34	; 52
    7644:	f8 4d       	sbci	r31, 0xD8	; 216
    7646:	e2 0f       	add	r30, r18
    7648:	f3 1f       	adc	r31, r19
    764a:	80 81       	ld	r24, Z
    764c:	7a 01       	movw	r14, r20
    764e:	e8 2a       	or	r14, r24
    7650:	2f 5f       	subi	r18, 0xFF	; 255
    7652:	3f 4f       	sbci	r19, 0xFF	; 255
    7654:	20 93 c5 27 	sts	0x27C5, r18	; 0x8027c5 <udi_cdc_rx_pos>
    7658:	30 93 c6 27 	sts	0x27C6, r19	; 0x8027c6 <udi_cdc_rx_pos+0x1>
    765c:	80 e0       	ldi	r24, 0x00	; 0
    765e:	08 df       	rcall	.-496    	; 0x7470 <udi_cdc_rx_start>
    7660:	11 23       	and	r17, r17
    7662:	21 f0       	breq	.+8      	; 0x766c <udi_cdc_multi_getc+0x96>
    7664:	5e 2d       	mov	r21, r14
    7666:	44 27       	eor	r20, r20
    7668:	10 e0       	ldi	r17, 0x00	; 0
    766a:	c5 cf       	rjmp	.-118    	; 0x75f6 <udi_cdc_multi_getc+0x20>
    766c:	8e 2d       	mov	r24, r14
    766e:	9f 2d       	mov	r25, r15
    7670:	0f 90       	pop	r0
    7672:	df 91       	pop	r29
    7674:	cf 91       	pop	r28
    7676:	1f 91       	pop	r17
    7678:	ff 90       	pop	r15
    767a:	ef 90       	pop	r14
    767c:	08 95       	ret

0000767e <udi_cdc_getc>:
    767e:	80 e0       	ldi	r24, 0x00	; 0
    7680:	aa cf       	rjmp	.-172    	; 0x75d6 <udi_cdc_multi_getc>
    7682:	08 95       	ret

00007684 <udi_cdc_multi_get_free_tx_buffer>:
    7684:	cf 93       	push	r28
    7686:	df 93       	push	r29
    7688:	1f 92       	push	r1
    768a:	cd b7       	in	r28, 0x3d	; 61
    768c:	de b7       	in	r29, 0x3e	; 62
    768e:	8f b7       	in	r24, 0x3f	; 63
    7690:	89 83       	std	Y+1, r24	; 0x01
    7692:	f8 94       	cli
    7694:	99 81       	ldd	r25, Y+1	; 0x01
    7696:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <udi_cdc_tx_buf_sel>
    769a:	e8 2f       	mov	r30, r24
    769c:	f0 e0       	ldi	r31, 0x00	; 0
    769e:	ee 0f       	add	r30, r30
    76a0:	ff 1f       	adc	r31, r31
    76a2:	e1 5c       	subi	r30, 0xC1	; 193
    76a4:	f8 4d       	sbci	r31, 0xD8	; 216
    76a6:	20 81       	ld	r18, Z
    76a8:	31 81       	ldd	r19, Z+1	; 0x01
    76aa:	20 34       	cpi	r18, 0x40	; 64
    76ac:	31 05       	cpc	r19, r1
    76ae:	89 f4       	brne	.+34     	; 0x76d2 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    76b0:	40 91 3b 27 	lds	r20, 0x273B	; 0x80273b <udi_cdc_tx_trans_ongoing>
    76b4:	41 11       	cpse	r20, r1
    76b6:	0d c0       	rjmp	.+26     	; 0x76d2 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    76b8:	40 91 3a 27 	lds	r20, 0x273A	; 0x80273a <udi_cdc_tx_both_buf_to_send>
    76bc:	41 11       	cpse	r20, r1
    76be:	09 c0       	rjmp	.+18     	; 0x76d2 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    76c0:	21 e0       	ldi	r18, 0x01	; 1
    76c2:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <udi_cdc_tx_both_buf_to_send>
    76c6:	81 11       	cpse	r24, r1
    76c8:	20 e0       	ldi	r18, 0x00	; 0
    76ca:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <udi_cdc_tx_buf_sel>
    76ce:	20 e0       	ldi	r18, 0x00	; 0
    76d0:	30 e0       	ldi	r19, 0x00	; 0
    76d2:	9f bf       	out	0x3f, r25	; 63
    76d4:	80 e4       	ldi	r24, 0x40	; 64
    76d6:	90 e0       	ldi	r25, 0x00	; 0
    76d8:	82 1b       	sub	r24, r18
    76da:	93 0b       	sbc	r25, r19
    76dc:	0f 90       	pop	r0
    76de:	df 91       	pop	r29
    76e0:	cf 91       	pop	r28
    76e2:	08 95       	ret

000076e4 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    76e4:	cf df       	rcall	.-98     	; 0x7684 <udi_cdc_multi_get_free_tx_buffer>
    76e6:	21 e0       	ldi	r18, 0x01	; 1
    76e8:	89 2b       	or	r24, r25
    76ea:	09 f4       	brne	.+2      	; 0x76ee <udi_cdc_multi_is_tx_ready+0xa>
    76ec:	20 e0       	ldi	r18, 0x00	; 0
    76ee:	82 2f       	mov	r24, r18
    76f0:	08 95       	ret

000076f2 <udi_cdc_multi_putc>:
    76f2:	ff 92       	push	r15
    76f4:	0f 93       	push	r16
    76f6:	1f 93       	push	r17
    76f8:	cf 93       	push	r28
    76fa:	df 93       	push	r29
    76fc:	1f 92       	push	r1
    76fe:	cd b7       	in	r28, 0x3d	; 61
    7700:	de b7       	in	r29, 0x3e	; 62
    7702:	f6 2e       	mov	r15, r22
    7704:	17 2f       	mov	r17, r23
    7706:	01 e0       	ldi	r16, 0x01	; 1
    7708:	80 91 62 28 	lds	r24, 0x2862	; 0x802862 <udi_cdc_line_coding+0x6>
    770c:	89 30       	cpi	r24, 0x09	; 9
    770e:	09 f0       	breq	.+2      	; 0x7712 <udi_cdc_multi_putc+0x20>
    7710:	00 e0       	ldi	r16, 0x00	; 0
    7712:	80 e0       	ldi	r24, 0x00	; 0
    7714:	e7 df       	rcall	.-50     	; 0x76e4 <udi_cdc_multi_is_tx_ready>
    7716:	81 11       	cpse	r24, r1
    7718:	07 c0       	rjmp	.+14     	; 0x7728 <udi_cdc_multi_putc+0x36>
    771a:	80 91 4c 28 	lds	r24, 0x284C	; 0x80284c <udi_cdc_data_running>
    771e:	81 11       	cpse	r24, r1
    7720:	f8 cf       	rjmp	.-16     	; 0x7712 <udi_cdc_multi_putc+0x20>
    7722:	80 e0       	ldi	r24, 0x00	; 0
    7724:	90 e0       	ldi	r25, 0x00	; 0
    7726:	2c c0       	rjmp	.+88     	; 0x7780 <udi_cdc_multi_putc+0x8e>
    7728:	8f b7       	in	r24, 0x3f	; 63
    772a:	89 83       	std	Y+1, r24	; 0x01
    772c:	f8 94       	cli
    772e:	49 81       	ldd	r20, Y+1	; 0x01
    7730:	80 91 3e 27 	lds	r24, 0x273E	; 0x80273e <udi_cdc_tx_buf_sel>
    7734:	90 e0       	ldi	r25, 0x00	; 0
    7736:	fc 01       	movw	r30, r24
    7738:	ee 0f       	add	r30, r30
    773a:	ff 1f       	adc	r31, r31
    773c:	e1 5c       	subi	r30, 0xC1	; 193
    773e:	f8 4d       	sbci	r31, 0xD8	; 216
    7740:	20 81       	ld	r18, Z
    7742:	31 81       	ldd	r19, Z+1	; 0x01
    7744:	b9 01       	movw	r22, r18
    7746:	6f 5f       	subi	r22, 0xFF	; 255
    7748:	7f 4f       	sbci	r23, 0xFF	; 255
    774a:	60 83       	st	Z, r22
    774c:	71 83       	std	Z+1, r23	; 0x01
    774e:	00 24       	eor	r0, r0
    7750:	96 95       	lsr	r25
    7752:	87 95       	ror	r24
    7754:	07 94       	ror	r0
    7756:	96 95       	lsr	r25
    7758:	87 95       	ror	r24
    775a:	07 94       	ror	r0
    775c:	98 2f       	mov	r25, r24
    775e:	80 2d       	mov	r24, r0
    7760:	8c 5b       	subi	r24, 0xBC	; 188
    7762:	98 4d       	sbci	r25, 0xD8	; 216
    7764:	fc 01       	movw	r30, r24
    7766:	e2 0f       	add	r30, r18
    7768:	f3 1f       	adc	r31, r19
    776a:	f0 82       	st	Z, r15
    776c:	4f bf       	out	0x3f, r20	; 63
    776e:	00 23       	and	r16, r16
    7770:	29 f0       	breq	.+10     	; 0x777c <udi_cdc_multi_putc+0x8a>
    7772:	f1 2e       	mov	r15, r17
    7774:	11 0f       	add	r17, r17
    7776:	11 0b       	sbc	r17, r17
    7778:	00 e0       	ldi	r16, 0x00	; 0
    777a:	cb cf       	rjmp	.-106    	; 0x7712 <udi_cdc_multi_putc+0x20>
    777c:	81 e0       	ldi	r24, 0x01	; 1
    777e:	90 e0       	ldi	r25, 0x00	; 0
    7780:	0f 90       	pop	r0
    7782:	df 91       	pop	r29
    7784:	cf 91       	pop	r28
    7786:	1f 91       	pop	r17
    7788:	0f 91       	pop	r16
    778a:	ff 90       	pop	r15
    778c:	08 95       	ret

0000778e <udi_cdc_putc>:
    778e:	bc 01       	movw	r22, r24
    7790:	80 e0       	ldi	r24, 0x00	; 0
    7792:	af cf       	rjmp	.-162    	; 0x76f2 <udi_cdc_multi_putc>
    7794:	08 95       	ret

00007796 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    7796:	e0 91 68 28 	lds	r30, 0x2868	; 0x802868 <udc_ptr_conf>
    779a:	f0 91 69 28 	lds	r31, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    779e:	01 90       	ld	r0, Z+
    77a0:	f0 81       	ld	r31, Z
    77a2:	e0 2d       	mov	r30, r0
    77a4:	22 81       	ldd	r18, Z+2	; 0x02
    77a6:	33 81       	ldd	r19, Z+3	; 0x03
    77a8:	2e 0f       	add	r18, r30
    77aa:	3f 1f       	adc	r19, r31
    77ac:	fc 01       	movw	r30, r24
    77ae:	40 81       	ld	r20, Z
    77b0:	e4 0f       	add	r30, r20
    77b2:	f1 1d       	adc	r31, r1
    77b4:	e2 17       	cp	r30, r18
    77b6:	f3 07       	cpc	r31, r19
    77b8:	a0 f4       	brcc	.+40     	; 0x77e2 <udc_next_desc_in_iface+0x4c>
    77ba:	81 81       	ldd	r24, Z+1	; 0x01
    77bc:	84 30       	cpi	r24, 0x04	; 4
    77be:	a1 f0       	breq	.+40     	; 0x77e8 <udc_next_desc_in_iface+0x52>
    77c0:	86 13       	cpse	r24, r22
    77c2:	06 c0       	rjmp	.+12     	; 0x77d0 <udc_next_desc_in_iface+0x3a>
    77c4:	14 c0       	rjmp	.+40     	; 0x77ee <udc_next_desc_in_iface+0x58>
    77c6:	81 81       	ldd	r24, Z+1	; 0x01
    77c8:	84 30       	cpi	r24, 0x04	; 4
    77ca:	a1 f0       	breq	.+40     	; 0x77f4 <udc_next_desc_in_iface+0x5e>
    77cc:	86 17       	cp	r24, r22
    77ce:	a9 f0       	breq	.+42     	; 0x77fa <udc_next_desc_in_iface+0x64>
    77d0:	80 81       	ld	r24, Z
    77d2:	e8 0f       	add	r30, r24
    77d4:	f1 1d       	adc	r31, r1
    77d6:	e2 17       	cp	r30, r18
    77d8:	f3 07       	cpc	r31, r19
    77da:	a8 f3       	brcs	.-22     	; 0x77c6 <udc_next_desc_in_iface+0x30>
    77dc:	80 e0       	ldi	r24, 0x00	; 0
    77de:	90 e0       	ldi	r25, 0x00	; 0
    77e0:	08 95       	ret
    77e2:	80 e0       	ldi	r24, 0x00	; 0
    77e4:	90 e0       	ldi	r25, 0x00	; 0
    77e6:	08 95       	ret
    77e8:	80 e0       	ldi	r24, 0x00	; 0
    77ea:	90 e0       	ldi	r25, 0x00	; 0
    77ec:	08 95       	ret
    77ee:	8e 2f       	mov	r24, r30
    77f0:	9f 2f       	mov	r25, r31
    77f2:	08 95       	ret
    77f4:	80 e0       	ldi	r24, 0x00	; 0
    77f6:	90 e0       	ldi	r25, 0x00	; 0
    77f8:	08 95       	ret
    77fa:	8e 2f       	mov	r24, r30
    77fc:	9f 2f       	mov	r25, r31
    77fe:	08 95       	ret

00007800 <udc_valid_address>:
    7800:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <udd_g_ctrlreq+0x2>
    7804:	8f 77       	andi	r24, 0x7F	; 127
    7806:	0c 94 bf 2a 	jmp	0x557e	; 0x557e <udd_set_address>
    780a:	08 95       	ret

0000780c <udc_update_iface_desc>:
    780c:	90 91 6a 28 	lds	r25, 0x286A	; 0x80286a <udc_num_configuration>
    7810:	99 23       	and	r25, r25
    7812:	81 f1       	breq	.+96     	; 0x7874 <udc_update_iface_desc+0x68>
    7814:	e0 91 68 28 	lds	r30, 0x2868	; 0x802868 <udc_ptr_conf>
    7818:	f0 91 69 28 	lds	r31, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    781c:	01 90       	ld	r0, Z+
    781e:	f0 81       	ld	r31, Z
    7820:	e0 2d       	mov	r30, r0
    7822:	94 81       	ldd	r25, Z+4	; 0x04
    7824:	89 17       	cp	r24, r25
    7826:	40 f5       	brcc	.+80     	; 0x7878 <udc_update_iface_desc+0x6c>
    7828:	e0 93 66 28 	sts	0x2866, r30	; 0x802866 <udc_ptr_iface>
    782c:	f0 93 67 28 	sts	0x2867, r31	; 0x802867 <udc_ptr_iface+0x1>
    7830:	22 81       	ldd	r18, Z+2	; 0x02
    7832:	33 81       	ldd	r19, Z+3	; 0x03
    7834:	2e 0f       	add	r18, r30
    7836:	3f 1f       	adc	r19, r31
    7838:	e2 17       	cp	r30, r18
    783a:	f3 07       	cpc	r31, r19
    783c:	f8 f4       	brcc	.+62     	; 0x787c <udc_update_iface_desc+0x70>
    783e:	91 81       	ldd	r25, Z+1	; 0x01
    7840:	94 30       	cpi	r25, 0x04	; 4
    7842:	61 f4       	brne	.+24     	; 0x785c <udc_update_iface_desc+0x50>
    7844:	92 81       	ldd	r25, Z+2	; 0x02
    7846:	89 13       	cpse	r24, r25
    7848:	09 c0       	rjmp	.+18     	; 0x785c <udc_update_iface_desc+0x50>
    784a:	93 81       	ldd	r25, Z+3	; 0x03
    784c:	96 13       	cpse	r25, r22
    784e:	06 c0       	rjmp	.+12     	; 0x785c <udc_update_iface_desc+0x50>
    7850:	e0 93 66 28 	sts	0x2866, r30	; 0x802866 <udc_ptr_iface>
    7854:	f0 93 67 28 	sts	0x2867, r31	; 0x802867 <udc_ptr_iface+0x1>
    7858:	81 e0       	ldi	r24, 0x01	; 1
    785a:	08 95       	ret
    785c:	90 81       	ld	r25, Z
    785e:	e9 0f       	add	r30, r25
    7860:	f1 1d       	adc	r31, r1
    7862:	e2 17       	cp	r30, r18
    7864:	f3 07       	cpc	r31, r19
    7866:	58 f3       	brcs	.-42     	; 0x783e <udc_update_iface_desc+0x32>
    7868:	e0 93 66 28 	sts	0x2866, r30	; 0x802866 <udc_ptr_iface>
    786c:	f0 93 67 28 	sts	0x2867, r31	; 0x802867 <udc_ptr_iface+0x1>
    7870:	80 e0       	ldi	r24, 0x00	; 0
    7872:	08 95       	ret
    7874:	80 e0       	ldi	r24, 0x00	; 0
    7876:	08 95       	ret
    7878:	80 e0       	ldi	r24, 0x00	; 0
    787a:	08 95       	ret
    787c:	80 e0       	ldi	r24, 0x00	; 0
    787e:	08 95       	ret

00007880 <udc_iface_disable>:
    7880:	ef 92       	push	r14
    7882:	ff 92       	push	r15
    7884:	1f 93       	push	r17
    7886:	cf 93       	push	r28
    7888:	df 93       	push	r29
    788a:	c8 2f       	mov	r28, r24
    788c:	60 e0       	ldi	r22, 0x00	; 0
    788e:	be df       	rcall	.-132    	; 0x780c <udc_update_iface_desc>
    7890:	18 2f       	mov	r17, r24
    7892:	88 23       	and	r24, r24
    7894:	81 f1       	breq	.+96     	; 0x78f6 <udc_iface_disable+0x76>
    7896:	a0 91 68 28 	lds	r26, 0x2868	; 0x802868 <udc_ptr_conf>
    789a:	b0 91 69 28 	lds	r27, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    789e:	ec 2f       	mov	r30, r28
    78a0:	f0 e0       	ldi	r31, 0x00	; 0
    78a2:	ee 0f       	add	r30, r30
    78a4:	ff 1f       	adc	r31, r31
    78a6:	12 96       	adiw	r26, 0x02	; 2
    78a8:	8d 91       	ld	r24, X+
    78aa:	9c 91       	ld	r25, X
    78ac:	13 97       	sbiw	r26, 0x03	; 3
    78ae:	e8 0f       	add	r30, r24
    78b0:	f9 1f       	adc	r31, r25
    78b2:	e0 80       	ld	r14, Z
    78b4:	f1 80       	ldd	r15, Z+1	; 0x01
    78b6:	d7 01       	movw	r26, r14
    78b8:	16 96       	adiw	r26, 0x06	; 6
    78ba:	ed 91       	ld	r30, X+
    78bc:	fc 91       	ld	r31, X
    78be:	17 97       	sbiw	r26, 0x07	; 7
    78c0:	19 95       	eicall
    78c2:	68 2f       	mov	r22, r24
    78c4:	8c 2f       	mov	r24, r28
    78c6:	a2 df       	rcall	.-188    	; 0x780c <udc_update_iface_desc>
    78c8:	18 2f       	mov	r17, r24
    78ca:	88 23       	and	r24, r24
    78cc:	a1 f0       	breq	.+40     	; 0x78f6 <udc_iface_disable+0x76>
    78ce:	c0 91 66 28 	lds	r28, 0x2866	; 0x802866 <udc_ptr_iface>
    78d2:	d0 91 67 28 	lds	r29, 0x2867	; 0x802867 <udc_ptr_iface+0x1>
    78d6:	65 e0       	ldi	r22, 0x05	; 5
    78d8:	ce 01       	movw	r24, r28
    78da:	5d df       	rcall	.-326    	; 0x7796 <udc_next_desc_in_iface>
    78dc:	ec 01       	movw	r28, r24
    78de:	89 2b       	or	r24, r25
    78e0:	21 f0       	breq	.+8      	; 0x78ea <udc_iface_disable+0x6a>
    78e2:	8a 81       	ldd	r24, Y+2	; 0x02
    78e4:	0e 94 c8 2c 	call	0x5990	; 0x5990 <udd_ep_free>
    78e8:	f6 cf       	rjmp	.-20     	; 0x78d6 <udc_iface_disable+0x56>
    78ea:	d7 01       	movw	r26, r14
    78ec:	12 96       	adiw	r26, 0x02	; 2
    78ee:	ed 91       	ld	r30, X+
    78f0:	fc 91       	ld	r31, X
    78f2:	13 97       	sbiw	r26, 0x03	; 3
    78f4:	19 95       	eicall
    78f6:	81 2f       	mov	r24, r17
    78f8:	df 91       	pop	r29
    78fa:	cf 91       	pop	r28
    78fc:	1f 91       	pop	r17
    78fe:	ff 90       	pop	r15
    7900:	ef 90       	pop	r14
    7902:	08 95       	ret

00007904 <udc_iface_enable>:
    7904:	1f 93       	push	r17
    7906:	cf 93       	push	r28
    7908:	df 93       	push	r29
    790a:	18 2f       	mov	r17, r24
    790c:	7f df       	rcall	.-258    	; 0x780c <udc_update_iface_desc>
    790e:	88 23       	and	r24, r24
    7910:	41 f1       	breq	.+80     	; 0x7962 <udc_iface_enable+0x5e>
    7912:	c0 91 66 28 	lds	r28, 0x2866	; 0x802866 <udc_ptr_iface>
    7916:	d0 91 67 28 	lds	r29, 0x2867	; 0x802867 <udc_ptr_iface+0x1>
    791a:	65 e0       	ldi	r22, 0x05	; 5
    791c:	ce 01       	movw	r24, r28
    791e:	3b df       	rcall	.-394    	; 0x7796 <udc_next_desc_in_iface>
    7920:	ec 01       	movw	r28, r24
    7922:	89 2b       	or	r24, r25
    7924:	49 f0       	breq	.+18     	; 0x7938 <udc_iface_enable+0x34>
    7926:	4c 81       	ldd	r20, Y+4	; 0x04
    7928:	5d 81       	ldd	r21, Y+5	; 0x05
    792a:	6b 81       	ldd	r22, Y+3	; 0x03
    792c:	8a 81       	ldd	r24, Y+2	; 0x02
    792e:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <udd_ep_alloc>
    7932:	81 11       	cpse	r24, r1
    7934:	f2 cf       	rjmp	.-28     	; 0x791a <udc_iface_enable+0x16>
    7936:	15 c0       	rjmp	.+42     	; 0x7962 <udc_iface_enable+0x5e>
    7938:	a0 91 68 28 	lds	r26, 0x2868	; 0x802868 <udc_ptr_conf>
    793c:	b0 91 69 28 	lds	r27, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    7940:	e1 2f       	mov	r30, r17
    7942:	f0 e0       	ldi	r31, 0x00	; 0
    7944:	ee 0f       	add	r30, r30
    7946:	ff 1f       	adc	r31, r31
    7948:	12 96       	adiw	r26, 0x02	; 2
    794a:	8d 91       	ld	r24, X+
    794c:	9c 91       	ld	r25, X
    794e:	13 97       	sbiw	r26, 0x03	; 3
    7950:	e8 0f       	add	r30, r24
    7952:	f9 1f       	adc	r31, r25
    7954:	01 90       	ld	r0, Z+
    7956:	f0 81       	ld	r31, Z
    7958:	e0 2d       	mov	r30, r0
    795a:	01 90       	ld	r0, Z+
    795c:	f0 81       	ld	r31, Z
    795e:	e0 2d       	mov	r30, r0
    7960:	19 95       	eicall
    7962:	df 91       	pop	r29
    7964:	cf 91       	pop	r28
    7966:	1f 91       	pop	r17
    7968:	08 95       	ret

0000796a <udc_start>:
    796a:	0c 94 38 2a 	jmp	0x5470	; 0x5470 <udd_enable>
    796e:	08 95       	ret

00007970 <udc_reset>:
    7970:	cf 93       	push	r28
    7972:	80 91 6a 28 	lds	r24, 0x286A	; 0x80286a <udc_num_configuration>
    7976:	88 23       	and	r24, r24
    7978:	c1 f0       	breq	.+48     	; 0x79aa <udc_reset+0x3a>
    797a:	e0 91 68 28 	lds	r30, 0x2868	; 0x802868 <udc_ptr_conf>
    797e:	f0 91 69 28 	lds	r31, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    7982:	01 90       	ld	r0, Z+
    7984:	f0 81       	ld	r31, Z
    7986:	e0 2d       	mov	r30, r0
    7988:	84 81       	ldd	r24, Z+4	; 0x04
    798a:	88 23       	and	r24, r24
    798c:	71 f0       	breq	.+28     	; 0x79aa <udc_reset+0x3a>
    798e:	c0 e0       	ldi	r28, 0x00	; 0
    7990:	8c 2f       	mov	r24, r28
    7992:	76 df       	rcall	.-276    	; 0x7880 <udc_iface_disable>
    7994:	cf 5f       	subi	r28, 0xFF	; 255
    7996:	e0 91 68 28 	lds	r30, 0x2868	; 0x802868 <udc_ptr_conf>
    799a:	f0 91 69 28 	lds	r31, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    799e:	01 90       	ld	r0, Z+
    79a0:	f0 81       	ld	r31, Z
    79a2:	e0 2d       	mov	r30, r0
    79a4:	84 81       	ldd	r24, Z+4	; 0x04
    79a6:	c8 17       	cp	r28, r24
    79a8:	98 f3       	brcs	.-26     	; 0x7990 <udc_reset+0x20>
    79aa:	10 92 6a 28 	sts	0x286A, r1	; 0x80286a <udc_num_configuration>
    79ae:	80 91 6e 28 	lds	r24, 0x286E	; 0x80286e <udc_device_status>
    79b2:	81 fd       	sbrc	r24, 1
    79b4:	0e 94 45 33 	call	0x668a	; 0x668a <usb_callback_remotewakeup_disable>
    79b8:	10 92 6e 28 	sts	0x286E, r1	; 0x80286e <udc_device_status>
    79bc:	10 92 6f 28 	sts	0x286F, r1	; 0x80286f <udc_device_status+0x1>
    79c0:	cf 91       	pop	r28
    79c2:	08 95       	ret

000079c4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    79c4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    79c6:	80 91 6a 28 	lds	r24, 0x286A	; 0x80286a <udc_num_configuration>
    79ca:	88 23       	and	r24, r24
    79cc:	49 f1       	breq	.+82     	; 0x7a20 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    79ce:	a0 91 68 28 	lds	r26, 0x2868	; 0x802868 <udc_ptr_conf>
    79d2:	b0 91 69 28 	lds	r27, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    79d6:	ed 91       	ld	r30, X+
    79d8:	fc 91       	ld	r31, X
    79da:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    79dc:	84 81       	ldd	r24, Z+4	; 0x04
    79de:	88 23       	and	r24, r24
    79e0:	f9 f0       	breq	.+62     	; 0x7a20 <udc_sof_notify+0x5c>
    79e2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    79e4:	ec 2f       	mov	r30, r28
    79e6:	f0 e0       	ldi	r31, 0x00	; 0
    79e8:	ee 0f       	add	r30, r30
    79ea:	ff 1f       	adc	r31, r31
    79ec:	12 96       	adiw	r26, 0x02	; 2
    79ee:	8d 91       	ld	r24, X+
    79f0:	9c 91       	ld	r25, X
    79f2:	13 97       	sbiw	r26, 0x03	; 3
    79f4:	e8 0f       	add	r30, r24
    79f6:	f9 1f       	adc	r31, r25
    79f8:	01 90       	ld	r0, Z+
    79fa:	f0 81       	ld	r31, Z
    79fc:	e0 2d       	mov	r30, r0
    79fe:	00 84       	ldd	r0, Z+8	; 0x08
    7a00:	f1 85       	ldd	r31, Z+9	; 0x09
    7a02:	e0 2d       	mov	r30, r0
    7a04:	30 97       	sbiw	r30, 0x00	; 0
    7a06:	09 f0       	breq	.+2      	; 0x7a0a <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    7a08:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    7a0a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7a0c:	a0 91 68 28 	lds	r26, 0x2868	; 0x802868 <udc_ptr_conf>
    7a10:	b0 91 69 28 	lds	r27, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    7a14:	ed 91       	ld	r30, X+
    7a16:	fc 91       	ld	r31, X
    7a18:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    7a1a:	84 81       	ldd	r24, Z+4	; 0x04
    7a1c:	c8 17       	cp	r28, r24
    7a1e:	10 f3       	brcs	.-60     	; 0x79e4 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    7a20:	cf 91       	pop	r28
    7a22:	08 95       	ret

00007a24 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    7a24:	0f 93       	push	r16
    7a26:	1f 93       	push	r17
    7a28:	cf 93       	push	r28
    7a2a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    7a2c:	ef e7       	ldi	r30, 0x7F	; 127
    7a2e:	f8 e2       	ldi	r31, 0x28	; 40
    7a30:	12 86       	std	Z+10, r1	; 0x0a
    7a32:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    7a34:	14 86       	std	Z+12, r1	; 0x0c
    7a36:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    7a38:	16 86       	std	Z+14, r1	; 0x0e
    7a3a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    7a3c:	80 81       	ld	r24, Z
    7a3e:	88 23       	and	r24, r24
    7a40:	0c f0       	brlt	.+2      	; 0x7a44 <udc_process_setup+0x20>
    7a42:	95 c2       	rjmp	.+1322   	; 0x7f6e <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    7a44:	20 91 85 28 	lds	r18, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    7a48:	30 91 86 28 	lds	r19, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    7a4c:	21 15       	cp	r18, r1
    7a4e:	31 05       	cpc	r19, r1
    7a50:	09 f0       	breq	.+2      	; 0x7a54 <udc_process_setup+0x30>
    7a52:	88 c2       	rjmp	.+1296   	; 0x7f64 <udc_process_setup+0x540>
    7a54:	7f c2       	rjmp	.+1278   	; 0x7f54 <udc_process_setup+0x530>
    7a56:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    7a58:	09 f0       	breq	.+2      	; 0x7a5c <udc_process_setup+0x38>
    7a5a:	ab c0       	rjmp	.+342    	; 0x7bb2 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    7a5c:	90 91 80 28 	lds	r25, 0x2880	; 0x802880 <udd_g_ctrlreq+0x1>
    7a60:	96 30       	cpi	r25, 0x06	; 6
    7a62:	81 f0       	breq	.+32     	; 0x7a84 <udc_process_setup+0x60>
    7a64:	98 30       	cpi	r25, 0x08	; 8
    7a66:	09 f4       	brne	.+2      	; 0x7a6a <udc_process_setup+0x46>
    7a68:	99 c0       	rjmp	.+306    	; 0x7b9c <udc_process_setup+0x178>
    7a6a:	91 11       	cpse	r25, r1
    7a6c:	a2 c0       	rjmp	.+324    	; 0x7bb2 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    7a6e:	22 30       	cpi	r18, 0x02	; 2
    7a70:	31 05       	cpc	r19, r1
    7a72:	09 f0       	breq	.+2      	; 0x7a76 <udc_process_setup+0x52>
    7a74:	2b c2       	rjmp	.+1110   	; 0x7ecc <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    7a76:	62 e0       	ldi	r22, 0x02	; 2
    7a78:	70 e0       	ldi	r23, 0x00	; 0
    7a7a:	8e e6       	ldi	r24, 0x6E	; 110
    7a7c:	98 e2       	ldi	r25, 0x28	; 40
    7a7e:	0e 94 cd 2a 	call	0x559a	; 0x559a <udd_set_setup_payload>
    7a82:	7e c2       	rjmp	.+1276   	; 0x7f80 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    7a84:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <udd_g_ctrlreq+0x2>
    7a88:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    7a8c:	29 2f       	mov	r18, r25
    7a8e:	33 27       	eor	r19, r19
    7a90:	22 30       	cpi	r18, 0x02	; 2
    7a92:	31 05       	cpc	r19, r1
    7a94:	b1 f0       	breq	.+44     	; 0x7ac2 <udc_process_setup+0x9e>
    7a96:	20 f4       	brcc	.+8      	; 0x7aa0 <udc_process_setup+0x7c>
    7a98:	21 30       	cpi	r18, 0x01	; 1
    7a9a:	31 05       	cpc	r19, r1
    7a9c:	41 f0       	breq	.+16     	; 0x7aae <udc_process_setup+0x8a>
    7a9e:	d8 c1       	rjmp	.+944    	; 0x7e50 <udc_process_setup+0x42c>
    7aa0:	23 30       	cpi	r18, 0x03	; 3
    7aa2:	31 05       	cpc	r19, r1
    7aa4:	f1 f1       	breq	.+124    	; 0x7b22 <udc_process_setup+0xfe>
    7aa6:	2f 30       	cpi	r18, 0x0F	; 15
    7aa8:	31 05       	cpc	r19, r1
    7aaa:	61 f1       	breq	.+88     	; 0x7b04 <udc_process_setup+0xe0>
    7aac:	d1 c1       	rjmp	.+930    	; 0x7e50 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    7aae:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <udc_config>
    7ab2:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    7ab6:	dc 01       	movw	r26, r24
    7ab8:	6c 91       	ld	r22, X
    7aba:	70 e0       	ldi	r23, 0x00	; 0
    7abc:	0e 94 cd 2a 	call	0x559a	; 0x559a <udd_set_setup_payload>
    7ac0:	5e c0       	rjmp	.+188    	; 0x7b7e <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    7ac2:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <udc_config>
    7ac6:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <udc_config+0x1>
    7aca:	21 89       	ldd	r18, Z+17	; 0x11
    7acc:	82 17       	cp	r24, r18
    7ace:	08 f0       	brcs	.+2      	; 0x7ad2 <udc_process_setup+0xae>
    7ad0:	fd c1       	rjmp	.+1018   	; 0x7ecc <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    7ad2:	99 27       	eor	r25, r25
    7ad4:	88 0f       	add	r24, r24
    7ad6:	99 1f       	adc	r25, r25
    7ad8:	88 0f       	add	r24, r24
    7ada:	99 1f       	adc	r25, r25
    7adc:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <udc_config+0x2>
    7ae0:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <udc_config+0x3>
    7ae4:	e8 0f       	add	r30, r24
    7ae6:	f9 1f       	adc	r31, r25
    7ae8:	80 81       	ld	r24, Z
    7aea:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    7aec:	fc 01       	movw	r30, r24
    7aee:	62 81       	ldd	r22, Z+2	; 0x02
    7af0:	73 81       	ldd	r23, Z+3	; 0x03
    7af2:	0e 94 cd 2a 	call	0x559a	; 0x559a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    7af6:	e0 91 87 28 	lds	r30, 0x2887	; 0x802887 <udd_g_ctrlreq+0x8>
    7afa:	f0 91 88 28 	lds	r31, 0x2888	; 0x802888 <udd_g_ctrlreq+0x9>
    7afe:	82 e0       	ldi	r24, 0x02	; 2
    7b00:	81 83       	std	Z+1, r24	; 0x01
    7b02:	3d c0       	rjmp	.+122    	; 0x7b7e <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    7b04:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <udc_config+0x4>
    7b08:	90 91 51 20 	lds	r25, 0x2051	; 0x802051 <udc_config+0x5>
    7b0c:	00 97       	sbiw	r24, 0x00	; 0
    7b0e:	09 f4       	brne	.+2      	; 0x7b12 <udc_process_setup+0xee>
    7b10:	dd c1       	rjmp	.+954    	; 0x7ecc <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    7b12:	dc 01       	movw	r26, r24
    7b14:	12 96       	adiw	r26, 0x02	; 2
    7b16:	6d 91       	ld	r22, X+
    7b18:	7c 91       	ld	r23, X
    7b1a:	13 97       	sbiw	r26, 0x03	; 3
    7b1c:	0e 94 cd 2a 	call	0x559a	; 0x559a <udd_set_setup_payload>
    7b20:	2e c0       	rjmp	.+92     	; 0x7b7e <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    7b22:	99 27       	eor	r25, r25
    7b24:	81 30       	cpi	r24, 0x01	; 1
    7b26:	91 05       	cpc	r25, r1
    7b28:	99 f0       	breq	.+38     	; 0x7b50 <udc_process_setup+0x12c>
    7b2a:	58 f0       	brcs	.+22     	; 0x7b42 <udc_process_setup+0x11e>
    7b2c:	82 30       	cpi	r24, 0x02	; 2
    7b2e:	91 05       	cpc	r25, r1
    7b30:	09 f4       	brne	.+2      	; 0x7b34 <udc_process_setup+0x110>
    7b32:	22 c2       	rjmp	.+1092   	; 0x7f78 <udc_process_setup+0x554>
    7b34:	03 97       	sbiw	r24, 0x03	; 3
    7b36:	09 f0       	breq	.+2      	; 0x7b3a <udc_process_setup+0x116>
    7b38:	94 c1       	rjmp	.+808    	; 0x7e62 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    7b3a:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    7b3c:	e1 ed       	ldi	r30, 0xD1	; 209
    7b3e:	f3 e2       	ldi	r31, 0x23	; 35
    7b40:	0a c0       	rjmp	.+20     	; 0x7b56 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    7b42:	64 e0       	ldi	r22, 0x04	; 4
    7b44:	70 e0       	ldi	r23, 0x00	; 0
    7b46:	80 ef       	ldi	r24, 0xF0	; 240
    7b48:	90 e2       	ldi	r25, 0x20	; 32
    7b4a:	0e 94 cd 2a 	call	0x559a	; 0x559a <udd_set_setup_payload>
    7b4e:	17 c0       	rjmp	.+46     	; 0x7b7e <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    7b50:	ef ed       	ldi	r30, 0xDF	; 223
    7b52:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    7b54:	30 e1       	ldi	r19, 0x10	; 16
    7b56:	a2 eb       	ldi	r26, 0xB2	; 178
    7b58:	b0 e2       	ldi	r27, 0x20	; 32
    7b5a:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    7b5c:	81 91       	ld	r24, Z+
    7b5e:	90 e0       	ldi	r25, 0x00	; 0
    7b60:	8d 93       	st	X+, r24
    7b62:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    7b64:	2f 5f       	subi	r18, 0xFF	; 255
    7b66:	23 17       	cp	r18, r19
    7b68:	c8 f3       	brcs	.-14     	; 0x7b5c <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    7b6a:	63 2f       	mov	r22, r19
    7b6c:	66 0f       	add	r22, r22
    7b6e:	6e 5f       	subi	r22, 0xFE	; 254
    7b70:	60 93 b0 20 	sts	0x20B0, r22	; 0x8020b0 <udc_string_desc>
		udd_set_setup_payload(
    7b74:	70 e0       	ldi	r23, 0x00	; 0
    7b76:	80 eb       	ldi	r24, 0xB0	; 176
    7b78:	90 e2       	ldi	r25, 0x20	; 32
    7b7a:	0e 94 cd 2a 	call	0x559a	; 0x559a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    7b7e:	ef e7       	ldi	r30, 0x7F	; 127
    7b80:	f8 e2       	ldi	r31, 0x28	; 40
    7b82:	86 81       	ldd	r24, Z+6	; 0x06
    7b84:	97 81       	ldd	r25, Z+7	; 0x07
    7b86:	22 85       	ldd	r18, Z+10	; 0x0a
    7b88:	33 85       	ldd	r19, Z+11	; 0x0b
    7b8a:	82 17       	cp	r24, r18
    7b8c:	93 07       	cpc	r25, r19
    7b8e:	08 f0       	brcs	.+2      	; 0x7b92 <udc_process_setup+0x16e>
    7b90:	f7 c1       	rjmp	.+1006   	; 0x7f80 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    7b92:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <udd_g_ctrlreq+0xa>
    7b96:	90 93 8a 28 	sts	0x288A, r25	; 0x80288a <udd_g_ctrlreq+0xb>
    7b9a:	f2 c1       	rjmp	.+996    	; 0x7f80 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    7b9c:	21 30       	cpi	r18, 0x01	; 1
    7b9e:	31 05       	cpc	r19, r1
    7ba0:	09 f0       	breq	.+2      	; 0x7ba4 <udc_process_setup+0x180>
    7ba2:	94 c1       	rjmp	.+808    	; 0x7ecc <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    7ba4:	61 e0       	ldi	r22, 0x01	; 1
    7ba6:	70 e0       	ldi	r23, 0x00	; 0
    7ba8:	8a e6       	ldi	r24, 0x6A	; 106
    7baa:	98 e2       	ldi	r25, 0x28	; 40
    7bac:	0e 94 cd 2a 	call	0x559a	; 0x559a <udd_set_setup_payload>
    7bb0:	e7 c1       	rjmp	.+974    	; 0x7f80 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    7bb2:	81 30       	cpi	r24, 0x01	; 1
    7bb4:	e9 f5       	brne	.+122    	; 0x7c30 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    7bb6:	90 91 80 28 	lds	r25, 0x2880	; 0x802880 <udd_g_ctrlreq+0x1>
    7bba:	9a 30       	cpi	r25, 0x0A	; 10
    7bbc:	c9 f5       	brne	.+114    	; 0x7c30 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    7bbe:	21 30       	cpi	r18, 0x01	; 1
    7bc0:	31 05       	cpc	r19, r1
    7bc2:	09 f0       	breq	.+2      	; 0x7bc6 <udc_process_setup+0x1a2>
    7bc4:	53 c1       	rjmp	.+678    	; 0x7e6c <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    7bc6:	80 91 6a 28 	lds	r24, 0x286A	; 0x80286a <udc_num_configuration>
    7bca:	88 23       	and	r24, r24
    7bcc:	09 f4       	brne	.+2      	; 0x7bd0 <udc_process_setup+0x1ac>
    7bce:	4e c1       	rjmp	.+668    	; 0x7e6c <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    7bd0:	c0 91 83 28 	lds	r28, 0x2883	; 0x802883 <udd_g_ctrlreq+0x4>
    7bd4:	d0 91 84 28 	lds	r29, 0x2884	; 0x802884 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    7bd8:	00 91 68 28 	lds	r16, 0x2868	; 0x802868 <udc_ptr_conf>
    7bdc:	10 91 69 28 	lds	r17, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    7be0:	d8 01       	movw	r26, r16
    7be2:	ed 91       	ld	r30, X+
    7be4:	fc 91       	ld	r31, X
    7be6:	84 81       	ldd	r24, Z+4	; 0x04
    7be8:	c8 17       	cp	r28, r24
    7bea:	08 f0       	brcs	.+2      	; 0x7bee <udc_process_setup+0x1ca>
    7bec:	3f c1       	rjmp	.+638    	; 0x7e6c <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    7bee:	60 e0       	ldi	r22, 0x00	; 0
    7bf0:	8c 2f       	mov	r24, r28
    7bf2:	0c de       	rcall	.-1000   	; 0x780c <udc_update_iface_desc>
    7bf4:	88 23       	and	r24, r24
    7bf6:	09 f4       	brne	.+2      	; 0x7bfa <udc_process_setup+0x1d6>
    7bf8:	34 c1       	rjmp	.+616    	; 0x7e62 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    7bfa:	ce 01       	movw	r24, r28
    7bfc:	99 27       	eor	r25, r25
    7bfe:	88 0f       	add	r24, r24
    7c00:	99 1f       	adc	r25, r25
    7c02:	d8 01       	movw	r26, r16
    7c04:	12 96       	adiw	r26, 0x02	; 2
    7c06:	ed 91       	ld	r30, X+
    7c08:	fc 91       	ld	r31, X
    7c0a:	13 97       	sbiw	r26, 0x03	; 3
    7c0c:	e8 0f       	add	r30, r24
    7c0e:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    7c10:	01 90       	ld	r0, Z+
    7c12:	f0 81       	ld	r31, Z
    7c14:	e0 2d       	mov	r30, r0
    7c16:	86 81       	ldd	r24, Z+6	; 0x06
    7c18:	97 81       	ldd	r25, Z+7	; 0x07
    7c1a:	fc 01       	movw	r30, r24
    7c1c:	19 95       	eicall
    7c1e:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    7c22:	61 e0       	ldi	r22, 0x01	; 1
    7c24:	70 e0       	ldi	r23, 0x00	; 0
    7c26:	8c e6       	ldi	r24, 0x6C	; 108
    7c28:	98 e2       	ldi	r25, 0x28	; 40
    7c2a:	0e 94 cd 2a 	call	0x559a	; 0x559a <udd_set_setup_payload>
    7c2e:	a8 c1       	rjmp	.+848    	; 0x7f80 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    7c30:	82 30       	cpi	r24, 0x02	; 2
    7c32:	09 f0       	breq	.+2      	; 0x7c36 <udc_process_setup+0x212>
    7c34:	16 c1       	rjmp	.+556    	; 0x7e62 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    7c36:	80 91 80 28 	lds	r24, 0x2880	; 0x802880 <udd_g_ctrlreq+0x1>
    7c3a:	81 11       	cpse	r24, r1
    7c3c:	0b c1       	rjmp	.+534    	; 0x7e54 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    7c3e:	22 30       	cpi	r18, 0x02	; 2
    7c40:	31 05       	cpc	r19, r1
    7c42:	09 f0       	breq	.+2      	; 0x7c46 <udc_process_setup+0x222>
    7c44:	43 c1       	rjmp	.+646    	; 0x7ecc <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    7c46:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <udd_g_ctrlreq+0x4>
    7c4a:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <udd_ep_is_halted>
    7c4e:	90 e0       	ldi	r25, 0x00	; 0
    7c50:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <udc_ep_status.4757>
    7c54:	90 93 65 28 	sts	0x2865, r25	; 0x802865 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    7c58:	62 e0       	ldi	r22, 0x02	; 2
    7c5a:	70 e0       	ldi	r23, 0x00	; 0
    7c5c:	84 e6       	ldi	r24, 0x64	; 100
    7c5e:	98 e2       	ldi	r25, 0x28	; 40
    7c60:	0e 94 cd 2a 	call	0x559a	; 0x559a <udd_set_setup_payload>
    7c64:	8d c1       	rjmp	.+794    	; 0x7f80 <udc_process_setup+0x55c>
    7c66:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    7c68:	09 f0       	breq	.+2      	; 0x7c6c <udc_process_setup+0x248>
    7c6a:	a0 c0       	rjmp	.+320    	; 0x7dac <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    7c6c:	90 91 80 28 	lds	r25, 0x2880	; 0x802880 <udd_g_ctrlreq+0x1>
    7c70:	93 30       	cpi	r25, 0x03	; 3
    7c72:	91 f1       	breq	.+100    	; 0x7cd8 <udc_process_setup+0x2b4>
    7c74:	18 f4       	brcc	.+6      	; 0x7c7c <udc_process_setup+0x258>
    7c76:	91 30       	cpi	r25, 0x01	; 1
    7c78:	a9 f0       	breq	.+42     	; 0x7ca4 <udc_process_setup+0x280>
    7c7a:	98 c0       	rjmp	.+304    	; 0x7dac <udc_process_setup+0x388>
    7c7c:	95 30       	cpi	r25, 0x05	; 5
    7c7e:	21 f0       	breq	.+8      	; 0x7c88 <udc_process_setup+0x264>
    7c80:	99 30       	cpi	r25, 0x09	; 9
    7c82:	09 f4       	brne	.+2      	; 0x7c86 <udc_process_setup+0x262>
    7c84:	43 c0       	rjmp	.+134    	; 0x7d0c <udc_process_setup+0x2e8>
    7c86:	92 c0       	rjmp	.+292    	; 0x7dac <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    7c88:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    7c8c:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    7c90:	89 2b       	or	r24, r25
    7c92:	09 f0       	breq	.+2      	; 0x7c96 <udc_process_setup+0x272>
    7c94:	1b c1       	rjmp	.+566    	; 0x7ecc <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    7c96:	80 e0       	ldi	r24, 0x00	; 0
    7c98:	9c e3       	ldi	r25, 0x3C	; 60
    7c9a:	80 93 8b 28 	sts	0x288B, r24	; 0x80288b <udd_g_ctrlreq+0xc>
    7c9e:	90 93 8c 28 	sts	0x288C, r25	; 0x80288c <udd_g_ctrlreq+0xd>
    7ca2:	6e c1       	rjmp	.+732    	; 0x7f80 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    7ca4:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    7ca8:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    7cac:	89 2b       	or	r24, r25
    7cae:	09 f0       	breq	.+2      	; 0x7cb2 <udc_process_setup+0x28e>
    7cb0:	0d c1       	rjmp	.+538    	; 0x7ecc <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    7cb2:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <udd_g_ctrlreq+0x2>
    7cb6:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <udd_g_ctrlreq+0x3>
    7cba:	01 97       	sbiw	r24, 0x01	; 1
    7cbc:	09 f0       	breq	.+2      	; 0x7cc0 <udc_process_setup+0x29c>
    7cbe:	06 c1       	rjmp	.+524    	; 0x7ecc <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    7cc0:	80 91 6e 28 	lds	r24, 0x286E	; 0x80286e <udc_device_status>
    7cc4:	90 91 6f 28 	lds	r25, 0x286F	; 0x80286f <udc_device_status+0x1>
    7cc8:	8d 7f       	andi	r24, 0xFD	; 253
    7cca:	80 93 6e 28 	sts	0x286E, r24	; 0x80286e <udc_device_status>
    7cce:	90 93 6f 28 	sts	0x286F, r25	; 0x80286f <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    7cd2:	0e 94 45 33 	call	0x668a	; 0x668a <usb_callback_remotewakeup_disable>
    7cd6:	54 c1       	rjmp	.+680    	; 0x7f80 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    7cd8:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    7cdc:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    7ce0:	89 2b       	or	r24, r25
    7ce2:	09 f0       	breq	.+2      	; 0x7ce6 <udc_process_setup+0x2c2>
    7ce4:	f3 c0       	rjmp	.+486    	; 0x7ecc <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    7ce6:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <udd_g_ctrlreq+0x2>
    7cea:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <udd_g_ctrlreq+0x3>
    7cee:	01 97       	sbiw	r24, 0x01	; 1
    7cf0:	09 f0       	breq	.+2      	; 0x7cf4 <udc_process_setup+0x2d0>
    7cf2:	b2 c0       	rjmp	.+356    	; 0x7e58 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    7cf4:	80 91 6e 28 	lds	r24, 0x286E	; 0x80286e <udc_device_status>
    7cf8:	90 91 6f 28 	lds	r25, 0x286F	; 0x80286f <udc_device_status+0x1>
    7cfc:	82 60       	ori	r24, 0x02	; 2
    7cfe:	80 93 6e 28 	sts	0x286E, r24	; 0x80286e <udc_device_status>
    7d02:	90 93 6f 28 	sts	0x286F, r25	; 0x80286f <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    7d06:	0e 94 44 33 	call	0x6688	; 0x6688 <usb_callback_remotewakeup_enable>
    7d0a:	3a c1       	rjmp	.+628    	; 0x7f80 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    7d0c:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    7d10:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    7d14:	89 2b       	or	r24, r25
    7d16:	09 f0       	breq	.+2      	; 0x7d1a <udc_process_setup+0x2f6>
    7d18:	d9 c0       	rjmp	.+434    	; 0x7ecc <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    7d1a:	0e 94 c2 2a 	call	0x5584	; 0x5584 <udd_getaddress>
    7d1e:	88 23       	and	r24, r24
    7d20:	09 f4       	brne	.+2      	; 0x7d24 <udc_process_setup+0x300>
    7d22:	9f c0       	rjmp	.+318    	; 0x7e62 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    7d24:	20 91 81 28 	lds	r18, 0x2881	; 0x802881 <udd_g_ctrlreq+0x2>
    7d28:	30 91 82 28 	lds	r19, 0x2882	; 0x802882 <udd_g_ctrlreq+0x3>
    7d2c:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    7d2e:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <udc_config>
    7d32:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    7d36:	81 89       	ldd	r24, Z+17	; 0x11
    7d38:	90 e0       	ldi	r25, 0x00	; 0
    7d3a:	82 17       	cp	r24, r18
    7d3c:	93 07       	cpc	r25, r19
    7d3e:	08 f4       	brcc	.+2      	; 0x7d42 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    7d40:	90 c0       	rjmp	.+288    	; 0x7e62 <udc_process_setup+0x43e>
    7d42:	16 de       	rcall	.-980    	; 0x7970 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    7d44:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <udd_g_ctrlreq+0x2>
    7d48:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <udd_g_ctrlreq+0x3>
    7d4c:	80 93 6a 28 	sts	0x286A, r24	; 0x80286a <udc_num_configuration>
	if (udc_num_configuration == 0) {
    7d50:	88 23       	and	r24, r24
    7d52:	09 f4       	brne	.+2      	; 0x7d56 <udc_process_setup+0x332>
    7d54:	15 c1       	rjmp	.+554    	; 0x7f80 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    7d56:	99 27       	eor	r25, r25
    7d58:	81 50       	subi	r24, 0x01	; 1
    7d5a:	90 4c       	sbci	r25, 0xC0	; 192
    7d5c:	88 0f       	add	r24, r24
    7d5e:	99 1f       	adc	r25, r25
    7d60:	88 0f       	add	r24, r24
    7d62:	99 1f       	adc	r25, r25
    7d64:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <udc_config+0x2>
    7d68:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <udc_config+0x3>
    7d6c:	e8 0f       	add	r30, r24
    7d6e:	f9 1f       	adc	r31, r25
    7d70:	e0 93 68 28 	sts	0x2868, r30	; 0x802868 <udc_ptr_conf>
    7d74:	f0 93 69 28 	sts	0x2869, r31	; 0x802869 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7d78:	01 90       	ld	r0, Z+
    7d7a:	f0 81       	ld	r31, Z
    7d7c:	e0 2d       	mov	r30, r0
    7d7e:	84 81       	ldd	r24, Z+4	; 0x04
    7d80:	88 23       	and	r24, r24
    7d82:	09 f4       	brne	.+2      	; 0x7d86 <udc_process_setup+0x362>
    7d84:	fd c0       	rjmp	.+506    	; 0x7f80 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    7d86:	c0 e0       	ldi	r28, 0x00	; 0
    7d88:	60 e0       	ldi	r22, 0x00	; 0
    7d8a:	8c 2f       	mov	r24, r28
    7d8c:	bb dd       	rcall	.-1162   	; 0x7904 <udc_iface_enable>
    7d8e:	88 23       	and	r24, r24
    7d90:	09 f4       	brne	.+2      	; 0x7d94 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    7d92:	67 c0       	rjmp	.+206    	; 0x7e62 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7d94:	cf 5f       	subi	r28, 0xFF	; 255
    7d96:	e0 91 68 28 	lds	r30, 0x2868	; 0x802868 <udc_ptr_conf>
    7d9a:	f0 91 69 28 	lds	r31, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    7d9e:	01 90       	ld	r0, Z+
    7da0:	f0 81       	ld	r31, Z
    7da2:	e0 2d       	mov	r30, r0
    7da4:	84 81       	ldd	r24, Z+4	; 0x04
    7da6:	c8 17       	cp	r28, r24
    7da8:	78 f3       	brcs	.-34     	; 0x7d88 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    7daa:	ea c0       	rjmp	.+468    	; 0x7f80 <udc_process_setup+0x55c>
    7dac:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    7dae:	e9 f4       	brne	.+58     	; 0x7dea <udc_process_setup+0x3c6>
    7db0:	90 91 80 28 	lds	r25, 0x2880	; 0x802880 <udd_g_ctrlreq+0x1>
    7db4:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    7db6:	c9 f4       	brne	.+50     	; 0x7dea <udc_process_setup+0x3c6>
    7db8:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    7dbc:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    7dc0:	89 2b       	or	r24, r25
    7dc2:	09 f0       	breq	.+2      	; 0x7dc6 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    7dc4:	53 c0       	rjmp	.+166    	; 0x7e6c <udc_process_setup+0x448>
    7dc6:	80 91 6a 28 	lds	r24, 0x286A	; 0x80286a <udc_num_configuration>
    7dca:	88 23       	and	r24, r24
    7dcc:	09 f4       	brne	.+2      	; 0x7dd0 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    7dce:	4e c0       	rjmp	.+156    	; 0x7e6c <udc_process_setup+0x448>
    7dd0:	ef e7       	ldi	r30, 0x7F	; 127
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    7dd2:	f8 e2       	ldi	r31, 0x28	; 40

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    7dd4:	c4 81       	ldd	r28, Z+4	; 0x04
    7dd6:	d2 81       	ldd	r29, Z+2	; 0x02
    7dd8:	8c 2f       	mov	r24, r28
    7dda:	52 dd       	rcall	.-1372   	; 0x7880 <udc_iface_disable>
    7ddc:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    7dde:	09 f4       	brne	.+2      	; 0x7de2 <udc_process_setup+0x3be>
    7de0:	40 c0       	rjmp	.+128    	; 0x7e62 <udc_process_setup+0x43e>
    7de2:	6d 2f       	mov	r22, r29
    7de4:	8c 2f       	mov	r24, r28
    7de6:	8e dd       	rcall	.-1252   	; 0x7904 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    7de8:	3a c0       	rjmp	.+116    	; 0x7e5e <udc_process_setup+0x43a>
    7dea:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    7dec:	d1 f5       	brne	.+116    	; 0x7e62 <udc_process_setup+0x43e>
    7dee:	80 91 80 28 	lds	r24, 0x2880	; 0x802880 <udd_g_ctrlreq+0x1>
    7df2:	81 30       	cpi	r24, 0x01	; 1
    7df4:	19 f0       	breq	.+6      	; 0x7dfc <udc_process_setup+0x3d8>
    7df6:	83 30       	cpi	r24, 0x03	; 3
    7df8:	a1 f0       	breq	.+40     	; 0x7e22 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    7dfa:	30 c0       	rjmp	.+96     	; 0x7e5c <udc_process_setup+0x438>
    7dfc:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    7e00:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    7e04:	89 2b       	or	r24, r25
    7e06:	09 f0       	breq	.+2      	; 0x7e0a <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    7e08:	61 c0       	rjmp	.+194    	; 0x7ecc <udc_process_setup+0x4a8>
    7e0a:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <udd_g_ctrlreq+0x2>
    7e0e:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <udd_g_ctrlreq+0x3>
    7e12:	89 2b       	or	r24, r25
    7e14:	09 f0       	breq	.+2      	; 0x7e18 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    7e16:	5a c0       	rjmp	.+180    	; 0x7ecc <udc_process_setup+0x4a8>
    7e18:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <udd_g_ctrlreq+0x4>
    7e1c:	0e 94 77 2b 	call	0x56ee	; 0x56ee <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    7e20:	1e c0       	rjmp	.+60     	; 0x7e5e <udc_process_setup+0x43a>
    7e22:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <udd_g_ctrlreq+0x6>
    7e26:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <udd_g_ctrlreq+0x7>
    7e2a:	89 2b       	or	r24, r25
    7e2c:	09 f0       	breq	.+2      	; 0x7e30 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    7e2e:	4e c0       	rjmp	.+156    	; 0x7ecc <udc_process_setup+0x4a8>
    7e30:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <udd_g_ctrlreq+0x2>
    7e34:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <udd_g_ctrlreq+0x3>
    7e38:	89 2b       	or	r24, r25
    7e3a:	09 f0       	breq	.+2      	; 0x7e3e <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    7e3c:	47 c0       	rjmp	.+142    	; 0x7ecc <udc_process_setup+0x4a8>
    7e3e:	cf e7       	ldi	r28, 0x7F	; 127
    7e40:	d8 e2       	ldi	r29, 0x28	; 40
    7e42:	8c 81       	ldd	r24, Y+4	; 0x04
    7e44:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    7e48:	8c 81       	ldd	r24, Y+4	; 0x04
    7e4a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    7e4e:	07 c0       	rjmp	.+14     	; 0x7e5e <udc_process_setup+0x43a>
    7e50:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    7e52:	05 c0       	rjmp	.+10     	; 0x7e5e <udc_process_setup+0x43a>
    7e54:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    7e56:	03 c0       	rjmp	.+6      	; 0x7e5e <udc_process_setup+0x43a>
    7e58:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    7e5a:	01 c0       	rjmp	.+2      	; 0x7e5e <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    7e5c:	80 e0       	ldi	r24, 0x00	; 0
    7e5e:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    7e60:	90 c0       	rjmp	.+288    	; 0x7f82 <udc_process_setup+0x55e>
    7e62:	80 91 7f 28 	lds	r24, 0x287F	; 0x80287f <udd_g_ctrlreq>
    7e66:	8f 71       	andi	r24, 0x1F	; 31
    7e68:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    7e6a:	81 f5       	brne	.+96     	; 0x7ecc <udc_process_setup+0x4a8>
    7e6c:	80 91 6a 28 	lds	r24, 0x286A	; 0x80286a <udc_num_configuration>
    7e70:	88 23       	and	r24, r24
    7e72:	09 f4       	brne	.+2      	; 0x7e76 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    7e74:	71 c0       	rjmp	.+226    	; 0x7f58 <udc_process_setup+0x534>
    7e76:	00 91 83 28 	lds	r16, 0x2883	; 0x802883 <udd_g_ctrlreq+0x4>
    7e7a:	10 91 84 28 	lds	r17, 0x2884	; 0x802884 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    7e7e:	c0 91 68 28 	lds	r28, 0x2868	; 0x802868 <udc_ptr_conf>
    7e82:	d0 91 69 28 	lds	r29, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    7e86:	e8 81       	ld	r30, Y
    7e88:	f9 81       	ldd	r31, Y+1	; 0x01
    7e8a:	84 81       	ldd	r24, Z+4	; 0x04
    7e8c:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    7e8e:	08 f0       	brcs	.+2      	; 0x7e92 <udc_process_setup+0x46e>
    7e90:	65 c0       	rjmp	.+202    	; 0x7f5c <udc_process_setup+0x538>
    7e92:	60 e0       	ldi	r22, 0x00	; 0
    7e94:	80 2f       	mov	r24, r16
    7e96:	ba dc       	rcall	.-1676   	; 0x780c <udc_update_iface_desc>
    7e98:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    7e9a:	c1 f0       	breq	.+48     	; 0x7ecc <udc_process_setup+0x4a8>
    7e9c:	f8 01       	movw	r30, r16
    7e9e:	ff 27       	eor	r31, r31
    7ea0:	cf 01       	movw	r24, r30
    7ea2:	88 0f       	add	r24, r24
    7ea4:	99 1f       	adc	r25, r25
    7ea6:	ea 81       	ldd	r30, Y+2	; 0x02
    7ea8:	fb 81       	ldd	r31, Y+3	; 0x03
    7eaa:	e8 0f       	add	r30, r24
    7eac:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    7eae:	c0 81       	ld	r28, Z
    7eb0:	d1 81       	ldd	r29, Z+1	; 0x01
    7eb2:	ee 81       	ldd	r30, Y+6	; 0x06
    7eb4:	ff 81       	ldd	r31, Y+7	; 0x07
    7eb6:	19 95       	eicall
    7eb8:	68 2f       	mov	r22, r24
    7eba:	80 2f       	mov	r24, r16
    7ebc:	a7 dc       	rcall	.-1714   	; 0x780c <udc_update_iface_desc>
    7ebe:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    7ec0:	29 f0       	breq	.+10     	; 0x7ecc <udc_process_setup+0x4a8>
    7ec2:	ec 81       	ldd	r30, Y+4	; 0x04
    7ec4:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    7ec6:	19 95       	eicall
    7ec8:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    7eca:	5b c0       	rjmp	.+182    	; 0x7f82 <udc_process_setup+0x55e>
    7ecc:	80 91 7f 28 	lds	r24, 0x287F	; 0x80287f <udd_g_ctrlreq>
    7ed0:	8f 71       	andi	r24, 0x1F	; 31
    7ed2:	82 30       	cpi	r24, 0x02	; 2
    7ed4:	09 f0       	breq	.+2      	; 0x7ed8 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    7ed6:	44 c0       	rjmp	.+136    	; 0x7f60 <udc_process_setup+0x53c>
    7ed8:	80 91 6a 28 	lds	r24, 0x286A	; 0x80286a <udc_num_configuration>
    7edc:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7ede:	b1 f1       	breq	.+108    	; 0x7f4c <udc_process_setup+0x528>
    7ee0:	a0 91 68 28 	lds	r26, 0x2868	; 0x802868 <udc_ptr_conf>
    7ee4:	b0 91 69 28 	lds	r27, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    7ee8:	ed 91       	ld	r30, X+
    7eea:	fc 91       	ld	r31, X
    7eec:	11 97       	sbiw	r26, 0x01	; 1
    7eee:	84 81       	ldd	r24, Z+4	; 0x04
    7ef0:	88 23       	and	r24, r24
    7ef2:	71 f1       	breq	.+92     	; 0x7f50 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    7ef4:	c0 e0       	ldi	r28, 0x00	; 0
    7ef6:	ec 2f       	mov	r30, r28
    7ef8:	f0 e0       	ldi	r31, 0x00	; 0
    7efa:	ee 0f       	add	r30, r30
    7efc:	ff 1f       	adc	r31, r31
    7efe:	12 96       	adiw	r26, 0x02	; 2
    7f00:	8d 91       	ld	r24, X+
    7f02:	9c 91       	ld	r25, X
    7f04:	13 97       	sbiw	r26, 0x03	; 3
    7f06:	e8 0f       	add	r30, r24
    7f08:	f9 1f       	adc	r31, r25
    7f0a:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    7f0c:	11 81       	ldd	r17, Z+1	; 0x01
    7f0e:	d8 01       	movw	r26, r16
    7f10:	16 96       	adiw	r26, 0x06	; 6
    7f12:	ed 91       	ld	r30, X+
    7f14:	fc 91       	ld	r31, X
    7f16:	17 97       	sbiw	r26, 0x07	; 7
    7f18:	19 95       	eicall
    7f1a:	68 2f       	mov	r22, r24
    7f1c:	8c 2f       	mov	r24, r28
    7f1e:	76 dc       	rcall	.-1812   	; 0x780c <udc_update_iface_desc>
    7f20:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    7f22:	79 f1       	breq	.+94     	; 0x7f82 <udc_process_setup+0x55e>
    7f24:	d8 01       	movw	r26, r16
    7f26:	14 96       	adiw	r26, 0x04	; 4
    7f28:	ed 91       	ld	r30, X+
    7f2a:	fc 91       	ld	r31, X
    7f2c:	15 97       	sbiw	r26, 0x05	; 5
    7f2e:	19 95       	eicall
    7f30:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    7f32:	27 c0       	rjmp	.+78     	; 0x7f82 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7f34:	cf 5f       	subi	r28, 0xFF	; 255
    7f36:	a0 91 68 28 	lds	r26, 0x2868	; 0x802868 <udc_ptr_conf>
    7f3a:	b0 91 69 28 	lds	r27, 0x2869	; 0x802869 <udc_ptr_conf+0x1>
    7f3e:	ed 91       	ld	r30, X+
    7f40:	fc 91       	ld	r31, X
    7f42:	11 97       	sbiw	r26, 0x01	; 1
    7f44:	94 81       	ldd	r25, Z+4	; 0x04
    7f46:	c9 17       	cp	r28, r25
    7f48:	b0 f2       	brcs	.-84     	; 0x7ef6 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    7f4a:	1b c0       	rjmp	.+54     	; 0x7f82 <udc_process_setup+0x55e>
    7f4c:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    7f4e:	19 c0       	rjmp	.+50     	; 0x7f82 <udc_process_setup+0x55e>
    7f50:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    7f52:	17 c0       	rjmp	.+46     	; 0x7f82 <udc_process_setup+0x55e>
    7f54:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    7f56:	15 c0       	rjmp	.+42     	; 0x7f82 <udc_process_setup+0x55e>
    7f58:	80 e0       	ldi	r24, 0x00	; 0
    7f5a:	13 c0       	rjmp	.+38     	; 0x7f82 <udc_process_setup+0x55e>
    7f5c:	80 e0       	ldi	r24, 0x00	; 0
    7f5e:	11 c0       	rjmp	.+34     	; 0x7f82 <udc_process_setup+0x55e>
    7f60:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    7f62:	0f c0       	rjmp	.+30     	; 0x7f82 <udc_process_setup+0x55e>
    7f64:	98 2f       	mov	r25, r24
    7f66:	90 76       	andi	r25, 0x60	; 96
    7f68:	09 f0       	breq	.+2      	; 0x7f6c <udc_process_setup+0x548>
    7f6a:	7b cf       	rjmp	.-266    	; 0x7e62 <udc_process_setup+0x43e>
    7f6c:	74 cd       	rjmp	.-1304   	; 0x7a56 <udc_process_setup+0x32>
    7f6e:	98 2f       	mov	r25, r24
    7f70:	90 76       	andi	r25, 0x60	; 96
    7f72:	09 f0       	breq	.+2      	; 0x7f76 <udc_process_setup+0x552>
    7f74:	76 cf       	rjmp	.-276    	; 0x7e62 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    7f76:	77 ce       	rjmp	.-786    	; 0x7c66 <udc_process_setup+0x242>
		str = udc_string_product_name;
    7f78:	3c e0       	ldi	r19, 0x0C	; 12
    7f7a:	e2 ed       	ldi	r30, 0xD2	; 210
    7f7c:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    7f7e:	eb cd       	rjmp	.-1066   	; 0x7b56 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    7f80:	81 e0       	ldi	r24, 0x01	; 1
    7f82:	df 91       	pop	r29
    7f84:	cf 91       	pop	r28
    7f86:	1f 91       	pop	r17
    7f88:	0f 91       	pop	r16
    7f8a:	08 95       	ret

00007f8c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    7f8c:	cf 93       	push	r28
    7f8e:	df 93       	push	r29
    7f90:	1f 92       	push	r1
    7f92:	cd b7       	in	r28, 0x3d	; 61
    7f94:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    7f96:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <stdio_base>
    7f9a:	90 91 9a 28 	lds	r25, 0x289A	; 0x80289a <stdio_base+0x1>
    7f9e:	e0 91 95 28 	lds	r30, 0x2895	; 0x802895 <ptr_get>
    7fa2:	f0 91 96 28 	lds	r31, 0x2896	; 0x802896 <ptr_get+0x1>
    7fa6:	be 01       	movw	r22, r28
    7fa8:	6f 5f       	subi	r22, 0xFF	; 255
    7faa:	7f 4f       	sbci	r23, 0xFF	; 255
    7fac:	19 95       	eicall
	return c;
    7fae:	89 81       	ldd	r24, Y+1	; 0x01
}
    7fb0:	08 2e       	mov	r0, r24
    7fb2:	00 0c       	add	r0, r0
    7fb4:	99 0b       	sbc	r25, r25
    7fb6:	0f 90       	pop	r0
    7fb8:	df 91       	pop	r29
    7fba:	cf 91       	pop	r28
    7fbc:	08 95       	ret

00007fbe <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    7fbe:	80 91 70 28 	lds	r24, 0x2870	; 0x802870 <stdio_usb_interface_enable>
    7fc2:	88 23       	and	r24, r24
    7fc4:	81 f0       	breq	.+32     	; 0x7fe6 <stdio_usb_putchar+0x28>
    7fc6:	86 2f       	mov	r24, r22
    7fc8:	08 2e       	mov	r0, r24
    7fca:	00 0c       	add	r0, r0
    7fcc:	99 0b       	sbc	r25, r25
    7fce:	df db       	rcall	.-2114   	; 0x778e <udi_cdc_putc>
    7fd0:	21 e0       	ldi	r18, 0x01	; 1
    7fd2:	30 e0       	ldi	r19, 0x00	; 0
    7fd4:	89 2b       	or	r24, r25
    7fd6:	11 f0       	breq	.+4      	; 0x7fdc <stdio_usb_putchar+0x1e>
    7fd8:	20 e0       	ldi	r18, 0x00	; 0
    7fda:	30 e0       	ldi	r19, 0x00	; 0
    7fdc:	88 27       	eor	r24, r24
    7fde:	99 27       	eor	r25, r25
    7fe0:	82 1b       	sub	r24, r18
    7fe2:	93 0b       	sbc	r25, r19
    7fe4:	08 95       	ret
    7fe6:	80 e0       	ldi	r24, 0x00	; 0
    7fe8:	90 e0       	ldi	r25, 0x00	; 0
    7fea:	08 95       	ret

00007fec <stdio_usb_getchar>:
    7fec:	cf 93       	push	r28
    7fee:	df 93       	push	r29
    7ff0:	80 91 70 28 	lds	r24, 0x2870	; 0x802870 <stdio_usb_interface_enable>
    7ff4:	81 11       	cpse	r24, r1
    7ff6:	03 c0       	rjmp	.+6      	; 0x7ffe <stdio_usb_getchar+0x12>
    7ff8:	fb 01       	movw	r30, r22
    7ffa:	10 82       	st	Z, r1
    7ffc:	03 c0       	rjmp	.+6      	; 0x8004 <stdio_usb_getchar+0x18>
    7ffe:	eb 01       	movw	r28, r22
    8000:	3e db       	rcall	.-2436   	; 0x767e <udi_cdc_getc>
    8002:	88 83       	st	Y, r24
    8004:	df 91       	pop	r29
    8006:	cf 91       	pop	r28
    8008:	08 95       	ret

0000800a <stdio_usb_enable>:
    800a:	81 e0       	ldi	r24, 0x01	; 1
    800c:	80 93 70 28 	sts	0x2870, r24	; 0x802870 <stdio_usb_interface_enable>
    8010:	08 95       	ret

00008012 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    8012:	10 92 99 28 	sts	0x2899, r1	; 0x802899 <stdio_base>
    8016:	10 92 9a 28 	sts	0x289A, r1	; 0x80289a <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    801a:	8f ed       	ldi	r24, 0xDF	; 223
    801c:	9f e3       	ldi	r25, 0x3F	; 63
    801e:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <ptr_put>
    8022:	90 93 98 28 	sts	0x2898, r25	; 0x802898 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    8026:	86 ef       	ldi	r24, 0xF6	; 246
    8028:	9f e3       	ldi	r25, 0x3F	; 63
    802a:	80 93 95 28 	sts	0x2895, r24	; 0x802895 <ptr_get>
    802e:	90 93 96 28 	sts	0x2896, r25	; 0x802896 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    8032:	9b dc       	rcall	.-1738   	; 0x796a <udc_start>
    8034:	66 ec       	ldi	r22, 0xC6	; 198
    8036:	7f e3       	ldi	r23, 0x3F	; 63
    8038:	80 e2       	ldi	r24, 0x20	; 32
    803a:	90 e4       	ldi	r25, 0x40	; 64
    803c:	29 c3       	rjmp	.+1618   	; 0x8690 <fdevopen>
    803e:	08 95       	ret

00008040 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    8040:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    8042:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <stdio_base>
    8046:	90 91 9a 28 	lds	r25, 0x289A	; 0x80289a <stdio_base+0x1>
    804a:	e0 91 97 28 	lds	r30, 0x2897	; 0x802897 <ptr_put>
    804e:	f0 91 98 28 	lds	r31, 0x2898	; 0x802898 <ptr_put+0x1>
    8052:	19 95       	eicall
    8054:	99 23       	and	r25, r25
    8056:	1c f0       	brlt	.+6      	; 0x805e <_write+0x1e>
		return -1;
	}
	return 1;
    8058:	81 e0       	ldi	r24, 0x01	; 1
    805a:	90 e0       	ldi	r25, 0x00	; 0
    805c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    805e:	8f ef       	ldi	r24, 0xFF	; 255
    8060:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    8062:	08 95       	ret

00008064 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    8064:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    8068:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    806a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    806c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    8070:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    8072:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    8076:	08 95       	ret

00008078 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    8078:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    807a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    807c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    807e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    8080:	60 83       	st	Z, r22
	ret                             // Return to caller
    8082:	08 95       	ret

00008084 <__mulsi3>:
    8084:	db 01       	movw	r26, r22
    8086:	8f 93       	push	r24
    8088:	9f 93       	push	r25
    808a:	6b d0       	rcall	.+214    	; 0x8162 <__muluhisi3>
    808c:	bf 91       	pop	r27
    808e:	af 91       	pop	r26
    8090:	a2 9f       	mul	r26, r18
    8092:	80 0d       	add	r24, r0
    8094:	91 1d       	adc	r25, r1
    8096:	a3 9f       	mul	r26, r19
    8098:	90 0d       	add	r25, r0
    809a:	b2 9f       	mul	r27, r18
    809c:	90 0d       	add	r25, r0
    809e:	11 24       	eor	r1, r1
    80a0:	08 95       	ret

000080a2 <__udivmodhi4>:
    80a2:	aa 1b       	sub	r26, r26
    80a4:	bb 1b       	sub	r27, r27
    80a6:	51 e1       	ldi	r21, 0x11	; 17
    80a8:	07 c0       	rjmp	.+14     	; 0x80b8 <__udivmodhi4_ep>

000080aa <__udivmodhi4_loop>:
    80aa:	aa 1f       	adc	r26, r26
    80ac:	bb 1f       	adc	r27, r27
    80ae:	a6 17       	cp	r26, r22
    80b0:	b7 07       	cpc	r27, r23
    80b2:	10 f0       	brcs	.+4      	; 0x80b8 <__udivmodhi4_ep>
    80b4:	a6 1b       	sub	r26, r22
    80b6:	b7 0b       	sbc	r27, r23

000080b8 <__udivmodhi4_ep>:
    80b8:	88 1f       	adc	r24, r24
    80ba:	99 1f       	adc	r25, r25
    80bc:	5a 95       	dec	r21
    80be:	a9 f7       	brne	.-22     	; 0x80aa <__udivmodhi4_loop>
    80c0:	80 95       	com	r24
    80c2:	90 95       	com	r25
    80c4:	bc 01       	movw	r22, r24
    80c6:	cd 01       	movw	r24, r26
    80c8:	08 95       	ret

000080ca <__divmodhi4>:
    80ca:	97 fb       	bst	r25, 7
    80cc:	07 2e       	mov	r0, r23
    80ce:	16 f4       	brtc	.+4      	; 0x80d4 <__divmodhi4+0xa>
    80d0:	00 94       	com	r0
    80d2:	06 d0       	rcall	.+12     	; 0x80e0 <__divmodhi4_neg1>
    80d4:	77 fd       	sbrc	r23, 7
    80d6:	08 d0       	rcall	.+16     	; 0x80e8 <__divmodhi4_neg2>
    80d8:	e4 df       	rcall	.-56     	; 0x80a2 <__udivmodhi4>
    80da:	07 fc       	sbrc	r0, 7
    80dc:	05 d0       	rcall	.+10     	; 0x80e8 <__divmodhi4_neg2>
    80de:	3e f4       	brtc	.+14     	; 0x80ee <__divmodhi4_exit>

000080e0 <__divmodhi4_neg1>:
    80e0:	90 95       	com	r25
    80e2:	81 95       	neg	r24
    80e4:	9f 4f       	sbci	r25, 0xFF	; 255
    80e6:	08 95       	ret

000080e8 <__divmodhi4_neg2>:
    80e8:	70 95       	com	r23
    80ea:	61 95       	neg	r22
    80ec:	7f 4f       	sbci	r23, 0xFF	; 255

000080ee <__divmodhi4_exit>:
    80ee:	08 95       	ret

000080f0 <__udivmodsi4>:
    80f0:	a1 e2       	ldi	r26, 0x21	; 33
    80f2:	1a 2e       	mov	r1, r26
    80f4:	aa 1b       	sub	r26, r26
    80f6:	bb 1b       	sub	r27, r27
    80f8:	fd 01       	movw	r30, r26
    80fa:	0d c0       	rjmp	.+26     	; 0x8116 <__udivmodsi4_ep>

000080fc <__udivmodsi4_loop>:
    80fc:	aa 1f       	adc	r26, r26
    80fe:	bb 1f       	adc	r27, r27
    8100:	ee 1f       	adc	r30, r30
    8102:	ff 1f       	adc	r31, r31
    8104:	a2 17       	cp	r26, r18
    8106:	b3 07       	cpc	r27, r19
    8108:	e4 07       	cpc	r30, r20
    810a:	f5 07       	cpc	r31, r21
    810c:	20 f0       	brcs	.+8      	; 0x8116 <__udivmodsi4_ep>
    810e:	a2 1b       	sub	r26, r18
    8110:	b3 0b       	sbc	r27, r19
    8112:	e4 0b       	sbc	r30, r20
    8114:	f5 0b       	sbc	r31, r21

00008116 <__udivmodsi4_ep>:
    8116:	66 1f       	adc	r22, r22
    8118:	77 1f       	adc	r23, r23
    811a:	88 1f       	adc	r24, r24
    811c:	99 1f       	adc	r25, r25
    811e:	1a 94       	dec	r1
    8120:	69 f7       	brne	.-38     	; 0x80fc <__udivmodsi4_loop>
    8122:	60 95       	com	r22
    8124:	70 95       	com	r23
    8126:	80 95       	com	r24
    8128:	90 95       	com	r25
    812a:	9b 01       	movw	r18, r22
    812c:	ac 01       	movw	r20, r24
    812e:	bd 01       	movw	r22, r26
    8130:	cf 01       	movw	r24, r30
    8132:	08 95       	ret

00008134 <__tablejump2__>:
    8134:	ee 0f       	add	r30, r30
    8136:	ff 1f       	adc	r31, r31
    8138:	88 1f       	adc	r24, r24
    813a:	8b bf       	out	0x3b, r24	; 59
    813c:	07 90       	elpm	r0, Z+
    813e:	f6 91       	elpm	r31, Z
    8140:	e0 2d       	mov	r30, r0
    8142:	19 94       	eijmp

00008144 <__umulhisi3>:
    8144:	a2 9f       	mul	r26, r18
    8146:	b0 01       	movw	r22, r0
    8148:	b3 9f       	mul	r27, r19
    814a:	c0 01       	movw	r24, r0
    814c:	a3 9f       	mul	r26, r19
    814e:	70 0d       	add	r23, r0
    8150:	81 1d       	adc	r24, r1
    8152:	11 24       	eor	r1, r1
    8154:	91 1d       	adc	r25, r1
    8156:	b2 9f       	mul	r27, r18
    8158:	70 0d       	add	r23, r0
    815a:	81 1d       	adc	r24, r1
    815c:	11 24       	eor	r1, r1
    815e:	91 1d       	adc	r25, r1
    8160:	08 95       	ret

00008162 <__muluhisi3>:
    8162:	f0 df       	rcall	.-32     	; 0x8144 <__umulhisi3>
    8164:	a5 9f       	mul	r26, r21
    8166:	90 0d       	add	r25, r0
    8168:	b4 9f       	mul	r27, r20
    816a:	90 0d       	add	r25, r0
    816c:	a4 9f       	mul	r26, r20
    816e:	80 0d       	add	r24, r0
    8170:	91 1d       	adc	r25, r1
    8172:	11 24       	eor	r1, r1
    8174:	08 95       	ret

00008176 <__muldi3>:
    8176:	df 93       	push	r29
    8178:	cf 93       	push	r28
    817a:	1f 93       	push	r17
    817c:	0f 93       	push	r16
    817e:	9a 9d       	mul	r25, r10
    8180:	f0 2d       	mov	r31, r0
    8182:	21 9f       	mul	r18, r17
    8184:	f0 0d       	add	r31, r0
    8186:	8b 9d       	mul	r24, r11
    8188:	f0 0d       	add	r31, r0
    818a:	8a 9d       	mul	r24, r10
    818c:	e0 2d       	mov	r30, r0
    818e:	f1 0d       	add	r31, r1
    8190:	03 9f       	mul	r16, r19
    8192:	f0 0d       	add	r31, r0
    8194:	02 9f       	mul	r16, r18
    8196:	e0 0d       	add	r30, r0
    8198:	f1 1d       	adc	r31, r1
    819a:	4e 9d       	mul	r20, r14
    819c:	e0 0d       	add	r30, r0
    819e:	f1 1d       	adc	r31, r1
    81a0:	5e 9d       	mul	r21, r14
    81a2:	f0 0d       	add	r31, r0
    81a4:	4f 9d       	mul	r20, r15
    81a6:	f0 0d       	add	r31, r0
    81a8:	7f 93       	push	r23
    81aa:	6f 93       	push	r22
    81ac:	bf 92       	push	r11
    81ae:	af 92       	push	r10
    81b0:	5f 93       	push	r21
    81b2:	4f 93       	push	r20
    81b4:	d5 01       	movw	r26, r10
    81b6:	c6 df       	rcall	.-116    	; 0x8144 <__umulhisi3>
    81b8:	8b 01       	movw	r16, r22
    81ba:	ac 01       	movw	r20, r24
    81bc:	d7 01       	movw	r26, r14
    81be:	c2 df       	rcall	.-124    	; 0x8144 <__umulhisi3>
    81c0:	eb 01       	movw	r28, r22
    81c2:	e8 0f       	add	r30, r24
    81c4:	f9 1f       	adc	r31, r25
    81c6:	d6 01       	movw	r26, r12
    81c8:	1f d0       	rcall	.+62     	; 0x8208 <__muldi3_6>
    81ca:	2f 91       	pop	r18
    81cc:	3f 91       	pop	r19
    81ce:	d6 01       	movw	r26, r12
    81d0:	b9 df       	rcall	.-142    	; 0x8144 <__umulhisi3>
    81d2:	c6 0f       	add	r28, r22
    81d4:	d7 1f       	adc	r29, r23
    81d6:	e8 1f       	adc	r30, r24
    81d8:	f9 1f       	adc	r31, r25
    81da:	af 91       	pop	r26
    81dc:	bf 91       	pop	r27
    81de:	14 d0       	rcall	.+40     	; 0x8208 <__muldi3_6>
    81e0:	2f 91       	pop	r18
    81e2:	3f 91       	pop	r19
    81e4:	af df       	rcall	.-162    	; 0x8144 <__umulhisi3>
    81e6:	c6 0f       	add	r28, r22
    81e8:	d7 1f       	adc	r29, r23
    81ea:	e8 1f       	adc	r30, r24
    81ec:	f9 1f       	adc	r31, r25
    81ee:	d6 01       	movw	r26, r12
    81f0:	a9 df       	rcall	.-174    	; 0x8144 <__umulhisi3>
    81f2:	e6 0f       	add	r30, r22
    81f4:	f7 1f       	adc	r31, r23
    81f6:	98 01       	movw	r18, r16
    81f8:	be 01       	movw	r22, r28
    81fa:	cf 01       	movw	r24, r30
    81fc:	11 24       	eor	r1, r1
    81fe:	0f 91       	pop	r16
    8200:	1f 91       	pop	r17
    8202:	cf 91       	pop	r28
    8204:	df 91       	pop	r29
    8206:	08 95       	ret

00008208 <__muldi3_6>:
    8208:	9d df       	rcall	.-198    	; 0x8144 <__umulhisi3>
    820a:	46 0f       	add	r20, r22
    820c:	57 1f       	adc	r21, r23
    820e:	c8 1f       	adc	r28, r24
    8210:	d9 1f       	adc	r29, r25
    8212:	08 f4       	brcc	.+2      	; 0x8216 <__muldi3_6+0xe>
    8214:	31 96       	adiw	r30, 0x01	; 1
    8216:	08 95       	ret

00008218 <__ashldi3>:
    8218:	0f 93       	push	r16
    821a:	08 30       	cpi	r16, 0x08	; 8
    821c:	90 f0       	brcs	.+36     	; 0x8242 <__ashldi3+0x2a>
    821e:	98 2f       	mov	r25, r24
    8220:	87 2f       	mov	r24, r23
    8222:	76 2f       	mov	r23, r22
    8224:	65 2f       	mov	r22, r21
    8226:	54 2f       	mov	r21, r20
    8228:	43 2f       	mov	r20, r19
    822a:	32 2f       	mov	r19, r18
    822c:	22 27       	eor	r18, r18
    822e:	08 50       	subi	r16, 0x08	; 8
    8230:	f4 cf       	rjmp	.-24     	; 0x821a <__ashldi3+0x2>
    8232:	22 0f       	add	r18, r18
    8234:	33 1f       	adc	r19, r19
    8236:	44 1f       	adc	r20, r20
    8238:	55 1f       	adc	r21, r21
    823a:	66 1f       	adc	r22, r22
    823c:	77 1f       	adc	r23, r23
    823e:	88 1f       	adc	r24, r24
    8240:	99 1f       	adc	r25, r25
    8242:	0a 95       	dec	r16
    8244:	b2 f7       	brpl	.-20     	; 0x8232 <__ashldi3+0x1a>
    8246:	0f 91       	pop	r16
    8248:	08 95       	ret

0000824a <__ashrdi3>:
    824a:	97 fb       	bst	r25, 7
    824c:	10 f8       	bld	r1, 0

0000824e <__lshrdi3>:
    824e:	16 94       	lsr	r1
    8250:	00 08       	sbc	r0, r0
    8252:	0f 93       	push	r16
    8254:	08 30       	cpi	r16, 0x08	; 8
    8256:	98 f0       	brcs	.+38     	; 0x827e <__lshrdi3+0x30>
    8258:	08 50       	subi	r16, 0x08	; 8
    825a:	23 2f       	mov	r18, r19
    825c:	34 2f       	mov	r19, r20
    825e:	45 2f       	mov	r20, r21
    8260:	56 2f       	mov	r21, r22
    8262:	67 2f       	mov	r22, r23
    8264:	78 2f       	mov	r23, r24
    8266:	89 2f       	mov	r24, r25
    8268:	90 2d       	mov	r25, r0
    826a:	f4 cf       	rjmp	.-24     	; 0x8254 <__lshrdi3+0x6>
    826c:	05 94       	asr	r0
    826e:	97 95       	ror	r25
    8270:	87 95       	ror	r24
    8272:	77 95       	ror	r23
    8274:	67 95       	ror	r22
    8276:	57 95       	ror	r21
    8278:	47 95       	ror	r20
    827a:	37 95       	ror	r19
    827c:	27 95       	ror	r18
    827e:	0a 95       	dec	r16
    8280:	aa f7       	brpl	.-22     	; 0x826c <__lshrdi3+0x1e>
    8282:	0f 91       	pop	r16
    8284:	08 95       	ret

00008286 <__adddi3>:
    8286:	2a 0d       	add	r18, r10
    8288:	3b 1d       	adc	r19, r11
    828a:	4c 1d       	adc	r20, r12
    828c:	5d 1d       	adc	r21, r13
    828e:	6e 1d       	adc	r22, r14
    8290:	7f 1d       	adc	r23, r15
    8292:	80 1f       	adc	r24, r16
    8294:	91 1f       	adc	r25, r17
    8296:	08 95       	ret

00008298 <__subdi3>:
    8298:	2a 19       	sub	r18, r10
    829a:	3b 09       	sbc	r19, r11
    829c:	4c 09       	sbc	r20, r12
    829e:	5d 09       	sbc	r21, r13
    82a0:	6e 09       	sbc	r22, r14
    82a2:	7f 09       	sbc	r23, r15
    82a4:	80 0b       	sbc	r24, r16
    82a6:	91 0b       	sbc	r25, r17
    82a8:	08 95       	ret

000082aa <__subsf3>:
    82aa:	50 58       	subi	r21, 0x80	; 128

000082ac <__addsf3>:
    82ac:	bb 27       	eor	r27, r27
    82ae:	aa 27       	eor	r26, r26
    82b0:	0e d0       	rcall	.+28     	; 0x82ce <__addsf3x>
    82b2:	48 c1       	rjmp	.+656    	; 0x8544 <__fp_round>
    82b4:	39 d1       	rcall	.+626    	; 0x8528 <__fp_pscA>
    82b6:	30 f0       	brcs	.+12     	; 0x82c4 <__addsf3+0x18>
    82b8:	3e d1       	rcall	.+636    	; 0x8536 <__fp_pscB>
    82ba:	20 f0       	brcs	.+8      	; 0x82c4 <__addsf3+0x18>
    82bc:	31 f4       	brne	.+12     	; 0x82ca <__addsf3+0x1e>
    82be:	9f 3f       	cpi	r25, 0xFF	; 255
    82c0:	11 f4       	brne	.+4      	; 0x82c6 <__addsf3+0x1a>
    82c2:	1e f4       	brtc	.+6      	; 0x82ca <__addsf3+0x1e>
    82c4:	2e c1       	rjmp	.+604    	; 0x8522 <__fp_nan>
    82c6:	0e f4       	brtc	.+2      	; 0x82ca <__addsf3+0x1e>
    82c8:	e0 95       	com	r30
    82ca:	e7 fb       	bst	r30, 7
    82cc:	24 c1       	rjmp	.+584    	; 0x8516 <__fp_inf>

000082ce <__addsf3x>:
    82ce:	e9 2f       	mov	r30, r25
    82d0:	4a d1       	rcall	.+660    	; 0x8566 <__fp_split3>
    82d2:	80 f3       	brcs	.-32     	; 0x82b4 <__addsf3+0x8>
    82d4:	ba 17       	cp	r27, r26
    82d6:	62 07       	cpc	r22, r18
    82d8:	73 07       	cpc	r23, r19
    82da:	84 07       	cpc	r24, r20
    82dc:	95 07       	cpc	r25, r21
    82de:	18 f0       	brcs	.+6      	; 0x82e6 <__addsf3x+0x18>
    82e0:	71 f4       	brne	.+28     	; 0x82fe <__addsf3x+0x30>
    82e2:	9e f5       	brtc	.+102    	; 0x834a <__addsf3x+0x7c>
    82e4:	62 c1       	rjmp	.+708    	; 0x85aa <__fp_zero>
    82e6:	0e f4       	brtc	.+2      	; 0x82ea <__addsf3x+0x1c>
    82e8:	e0 95       	com	r30
    82ea:	0b 2e       	mov	r0, r27
    82ec:	ba 2f       	mov	r27, r26
    82ee:	a0 2d       	mov	r26, r0
    82f0:	0b 01       	movw	r0, r22
    82f2:	b9 01       	movw	r22, r18
    82f4:	90 01       	movw	r18, r0
    82f6:	0c 01       	movw	r0, r24
    82f8:	ca 01       	movw	r24, r20
    82fa:	a0 01       	movw	r20, r0
    82fc:	11 24       	eor	r1, r1
    82fe:	ff 27       	eor	r31, r31
    8300:	59 1b       	sub	r21, r25
    8302:	99 f0       	breq	.+38     	; 0x832a <__addsf3x+0x5c>
    8304:	59 3f       	cpi	r21, 0xF9	; 249
    8306:	50 f4       	brcc	.+20     	; 0x831c <__addsf3x+0x4e>
    8308:	50 3e       	cpi	r21, 0xE0	; 224
    830a:	68 f1       	brcs	.+90     	; 0x8366 <__addsf3x+0x98>
    830c:	1a 16       	cp	r1, r26
    830e:	f0 40       	sbci	r31, 0x00	; 0
    8310:	a2 2f       	mov	r26, r18
    8312:	23 2f       	mov	r18, r19
    8314:	34 2f       	mov	r19, r20
    8316:	44 27       	eor	r20, r20
    8318:	58 5f       	subi	r21, 0xF8	; 248
    831a:	f3 cf       	rjmp	.-26     	; 0x8302 <__addsf3x+0x34>
    831c:	46 95       	lsr	r20
    831e:	37 95       	ror	r19
    8320:	27 95       	ror	r18
    8322:	a7 95       	ror	r26
    8324:	f0 40       	sbci	r31, 0x00	; 0
    8326:	53 95       	inc	r21
    8328:	c9 f7       	brne	.-14     	; 0x831c <__addsf3x+0x4e>
    832a:	7e f4       	brtc	.+30     	; 0x834a <__addsf3x+0x7c>
    832c:	1f 16       	cp	r1, r31
    832e:	ba 0b       	sbc	r27, r26
    8330:	62 0b       	sbc	r22, r18
    8332:	73 0b       	sbc	r23, r19
    8334:	84 0b       	sbc	r24, r20
    8336:	ba f0       	brmi	.+46     	; 0x8366 <__addsf3x+0x98>
    8338:	91 50       	subi	r25, 0x01	; 1
    833a:	a1 f0       	breq	.+40     	; 0x8364 <__addsf3x+0x96>
    833c:	ff 0f       	add	r31, r31
    833e:	bb 1f       	adc	r27, r27
    8340:	66 1f       	adc	r22, r22
    8342:	77 1f       	adc	r23, r23
    8344:	88 1f       	adc	r24, r24
    8346:	c2 f7       	brpl	.-16     	; 0x8338 <__addsf3x+0x6a>
    8348:	0e c0       	rjmp	.+28     	; 0x8366 <__addsf3x+0x98>
    834a:	ba 0f       	add	r27, r26
    834c:	62 1f       	adc	r22, r18
    834e:	73 1f       	adc	r23, r19
    8350:	84 1f       	adc	r24, r20
    8352:	48 f4       	brcc	.+18     	; 0x8366 <__addsf3x+0x98>
    8354:	87 95       	ror	r24
    8356:	77 95       	ror	r23
    8358:	67 95       	ror	r22
    835a:	b7 95       	ror	r27
    835c:	f7 95       	ror	r31
    835e:	9e 3f       	cpi	r25, 0xFE	; 254
    8360:	08 f0       	brcs	.+2      	; 0x8364 <__addsf3x+0x96>
    8362:	b3 cf       	rjmp	.-154    	; 0x82ca <__addsf3+0x1e>
    8364:	93 95       	inc	r25
    8366:	88 0f       	add	r24, r24
    8368:	08 f0       	brcs	.+2      	; 0x836c <__addsf3x+0x9e>
    836a:	99 27       	eor	r25, r25
    836c:	ee 0f       	add	r30, r30
    836e:	97 95       	ror	r25
    8370:	87 95       	ror	r24
    8372:	08 95       	ret

00008374 <__divsf3>:
    8374:	0c d0       	rcall	.+24     	; 0x838e <__divsf3x>
    8376:	e6 c0       	rjmp	.+460    	; 0x8544 <__fp_round>
    8378:	de d0       	rcall	.+444    	; 0x8536 <__fp_pscB>
    837a:	40 f0       	brcs	.+16     	; 0x838c <__divsf3+0x18>
    837c:	d5 d0       	rcall	.+426    	; 0x8528 <__fp_pscA>
    837e:	30 f0       	brcs	.+12     	; 0x838c <__divsf3+0x18>
    8380:	21 f4       	brne	.+8      	; 0x838a <__divsf3+0x16>
    8382:	5f 3f       	cpi	r21, 0xFF	; 255
    8384:	19 f0       	breq	.+6      	; 0x838c <__divsf3+0x18>
    8386:	c7 c0       	rjmp	.+398    	; 0x8516 <__fp_inf>
    8388:	51 11       	cpse	r21, r1
    838a:	10 c1       	rjmp	.+544    	; 0x85ac <__fp_szero>
    838c:	ca c0       	rjmp	.+404    	; 0x8522 <__fp_nan>

0000838e <__divsf3x>:
    838e:	eb d0       	rcall	.+470    	; 0x8566 <__fp_split3>
    8390:	98 f3       	brcs	.-26     	; 0x8378 <__divsf3+0x4>

00008392 <__divsf3_pse>:
    8392:	99 23       	and	r25, r25
    8394:	c9 f3       	breq	.-14     	; 0x8388 <__divsf3+0x14>
    8396:	55 23       	and	r21, r21
    8398:	b1 f3       	breq	.-20     	; 0x8386 <__divsf3+0x12>
    839a:	95 1b       	sub	r25, r21
    839c:	55 0b       	sbc	r21, r21
    839e:	bb 27       	eor	r27, r27
    83a0:	aa 27       	eor	r26, r26
    83a2:	62 17       	cp	r22, r18
    83a4:	73 07       	cpc	r23, r19
    83a6:	84 07       	cpc	r24, r20
    83a8:	38 f0       	brcs	.+14     	; 0x83b8 <__divsf3_pse+0x26>
    83aa:	9f 5f       	subi	r25, 0xFF	; 255
    83ac:	5f 4f       	sbci	r21, 0xFF	; 255
    83ae:	22 0f       	add	r18, r18
    83b0:	33 1f       	adc	r19, r19
    83b2:	44 1f       	adc	r20, r20
    83b4:	aa 1f       	adc	r26, r26
    83b6:	a9 f3       	breq	.-22     	; 0x83a2 <__divsf3_pse+0x10>
    83b8:	33 d0       	rcall	.+102    	; 0x8420 <__divsf3_pse+0x8e>
    83ba:	0e 2e       	mov	r0, r30
    83bc:	3a f0       	brmi	.+14     	; 0x83cc <__divsf3_pse+0x3a>
    83be:	e0 e8       	ldi	r30, 0x80	; 128
    83c0:	30 d0       	rcall	.+96     	; 0x8422 <__divsf3_pse+0x90>
    83c2:	91 50       	subi	r25, 0x01	; 1
    83c4:	50 40       	sbci	r21, 0x00	; 0
    83c6:	e6 95       	lsr	r30
    83c8:	00 1c       	adc	r0, r0
    83ca:	ca f7       	brpl	.-14     	; 0x83be <__divsf3_pse+0x2c>
    83cc:	29 d0       	rcall	.+82     	; 0x8420 <__divsf3_pse+0x8e>
    83ce:	fe 2f       	mov	r31, r30
    83d0:	27 d0       	rcall	.+78     	; 0x8420 <__divsf3_pse+0x8e>
    83d2:	66 0f       	add	r22, r22
    83d4:	77 1f       	adc	r23, r23
    83d6:	88 1f       	adc	r24, r24
    83d8:	bb 1f       	adc	r27, r27
    83da:	26 17       	cp	r18, r22
    83dc:	37 07       	cpc	r19, r23
    83de:	48 07       	cpc	r20, r24
    83e0:	ab 07       	cpc	r26, r27
    83e2:	b0 e8       	ldi	r27, 0x80	; 128
    83e4:	09 f0       	breq	.+2      	; 0x83e8 <__divsf3_pse+0x56>
    83e6:	bb 0b       	sbc	r27, r27
    83e8:	80 2d       	mov	r24, r0
    83ea:	bf 01       	movw	r22, r30
    83ec:	ff 27       	eor	r31, r31
    83ee:	93 58       	subi	r25, 0x83	; 131
    83f0:	5f 4f       	sbci	r21, 0xFF	; 255
    83f2:	2a f0       	brmi	.+10     	; 0x83fe <__divsf3_pse+0x6c>
    83f4:	9e 3f       	cpi	r25, 0xFE	; 254
    83f6:	51 05       	cpc	r21, r1
    83f8:	68 f0       	brcs	.+26     	; 0x8414 <__divsf3_pse+0x82>
    83fa:	8d c0       	rjmp	.+282    	; 0x8516 <__fp_inf>
    83fc:	d7 c0       	rjmp	.+430    	; 0x85ac <__fp_szero>
    83fe:	5f 3f       	cpi	r21, 0xFF	; 255
    8400:	ec f3       	brlt	.-6      	; 0x83fc <__divsf3_pse+0x6a>
    8402:	98 3e       	cpi	r25, 0xE8	; 232
    8404:	dc f3       	brlt	.-10     	; 0x83fc <__divsf3_pse+0x6a>
    8406:	86 95       	lsr	r24
    8408:	77 95       	ror	r23
    840a:	67 95       	ror	r22
    840c:	b7 95       	ror	r27
    840e:	f7 95       	ror	r31
    8410:	9f 5f       	subi	r25, 0xFF	; 255
    8412:	c9 f7       	brne	.-14     	; 0x8406 <__divsf3_pse+0x74>
    8414:	88 0f       	add	r24, r24
    8416:	91 1d       	adc	r25, r1
    8418:	96 95       	lsr	r25
    841a:	87 95       	ror	r24
    841c:	97 f9       	bld	r25, 7
    841e:	08 95       	ret
    8420:	e1 e0       	ldi	r30, 0x01	; 1
    8422:	66 0f       	add	r22, r22
    8424:	77 1f       	adc	r23, r23
    8426:	88 1f       	adc	r24, r24
    8428:	bb 1f       	adc	r27, r27
    842a:	62 17       	cp	r22, r18
    842c:	73 07       	cpc	r23, r19
    842e:	84 07       	cpc	r24, r20
    8430:	ba 07       	cpc	r27, r26
    8432:	20 f0       	brcs	.+8      	; 0x843c <__divsf3_pse+0xaa>
    8434:	62 1b       	sub	r22, r18
    8436:	73 0b       	sbc	r23, r19
    8438:	84 0b       	sbc	r24, r20
    843a:	ba 0b       	sbc	r27, r26
    843c:	ee 1f       	adc	r30, r30
    843e:	88 f7       	brcc	.-30     	; 0x8422 <__divsf3_pse+0x90>
    8440:	e0 95       	com	r30
    8442:	08 95       	ret

00008444 <__fixunssfsi>:
    8444:	98 d0       	rcall	.+304    	; 0x8576 <__fp_splitA>
    8446:	88 f0       	brcs	.+34     	; 0x846a <__fixunssfsi+0x26>
    8448:	9f 57       	subi	r25, 0x7F	; 127
    844a:	90 f0       	brcs	.+36     	; 0x8470 <__fixunssfsi+0x2c>
    844c:	b9 2f       	mov	r27, r25
    844e:	99 27       	eor	r25, r25
    8450:	b7 51       	subi	r27, 0x17	; 23
    8452:	a0 f0       	brcs	.+40     	; 0x847c <__fixunssfsi+0x38>
    8454:	d1 f0       	breq	.+52     	; 0x848a <__fixunssfsi+0x46>
    8456:	66 0f       	add	r22, r22
    8458:	77 1f       	adc	r23, r23
    845a:	88 1f       	adc	r24, r24
    845c:	99 1f       	adc	r25, r25
    845e:	1a f0       	brmi	.+6      	; 0x8466 <__fixunssfsi+0x22>
    8460:	ba 95       	dec	r27
    8462:	c9 f7       	brne	.-14     	; 0x8456 <__fixunssfsi+0x12>
    8464:	12 c0       	rjmp	.+36     	; 0x848a <__fixunssfsi+0x46>
    8466:	b1 30       	cpi	r27, 0x01	; 1
    8468:	81 f0       	breq	.+32     	; 0x848a <__fixunssfsi+0x46>
    846a:	9f d0       	rcall	.+318    	; 0x85aa <__fp_zero>
    846c:	b1 e0       	ldi	r27, 0x01	; 1
    846e:	08 95       	ret
    8470:	9c c0       	rjmp	.+312    	; 0x85aa <__fp_zero>
    8472:	67 2f       	mov	r22, r23
    8474:	78 2f       	mov	r23, r24
    8476:	88 27       	eor	r24, r24
    8478:	b8 5f       	subi	r27, 0xF8	; 248
    847a:	39 f0       	breq	.+14     	; 0x848a <__fixunssfsi+0x46>
    847c:	b9 3f       	cpi	r27, 0xF9	; 249
    847e:	cc f3       	brlt	.-14     	; 0x8472 <__fixunssfsi+0x2e>
    8480:	86 95       	lsr	r24
    8482:	77 95       	ror	r23
    8484:	67 95       	ror	r22
    8486:	b3 95       	inc	r27
    8488:	d9 f7       	brne	.-10     	; 0x8480 <__fixunssfsi+0x3c>
    848a:	3e f4       	brtc	.+14     	; 0x849a <__fixunssfsi+0x56>
    848c:	90 95       	com	r25
    848e:	80 95       	com	r24
    8490:	70 95       	com	r23
    8492:	61 95       	neg	r22
    8494:	7f 4f       	sbci	r23, 0xFF	; 255
    8496:	8f 4f       	sbci	r24, 0xFF	; 255
    8498:	9f 4f       	sbci	r25, 0xFF	; 255
    849a:	08 95       	ret

0000849c <__floatunsisf>:
    849c:	e8 94       	clt
    849e:	09 c0       	rjmp	.+18     	; 0x84b2 <__floatsisf+0x12>

000084a0 <__floatsisf>:
    84a0:	97 fb       	bst	r25, 7
    84a2:	3e f4       	brtc	.+14     	; 0x84b2 <__floatsisf+0x12>
    84a4:	90 95       	com	r25
    84a6:	80 95       	com	r24
    84a8:	70 95       	com	r23
    84aa:	61 95       	neg	r22
    84ac:	7f 4f       	sbci	r23, 0xFF	; 255
    84ae:	8f 4f       	sbci	r24, 0xFF	; 255
    84b0:	9f 4f       	sbci	r25, 0xFF	; 255
    84b2:	99 23       	and	r25, r25
    84b4:	a9 f0       	breq	.+42     	; 0x84e0 <__floatsisf+0x40>
    84b6:	f9 2f       	mov	r31, r25
    84b8:	96 e9       	ldi	r25, 0x96	; 150
    84ba:	bb 27       	eor	r27, r27
    84bc:	93 95       	inc	r25
    84be:	f6 95       	lsr	r31
    84c0:	87 95       	ror	r24
    84c2:	77 95       	ror	r23
    84c4:	67 95       	ror	r22
    84c6:	b7 95       	ror	r27
    84c8:	f1 11       	cpse	r31, r1
    84ca:	f8 cf       	rjmp	.-16     	; 0x84bc <__floatsisf+0x1c>
    84cc:	fa f4       	brpl	.+62     	; 0x850c <__floatsisf+0x6c>
    84ce:	bb 0f       	add	r27, r27
    84d0:	11 f4       	brne	.+4      	; 0x84d6 <__floatsisf+0x36>
    84d2:	60 ff       	sbrs	r22, 0
    84d4:	1b c0       	rjmp	.+54     	; 0x850c <__floatsisf+0x6c>
    84d6:	6f 5f       	subi	r22, 0xFF	; 255
    84d8:	7f 4f       	sbci	r23, 0xFF	; 255
    84da:	8f 4f       	sbci	r24, 0xFF	; 255
    84dc:	9f 4f       	sbci	r25, 0xFF	; 255
    84de:	16 c0       	rjmp	.+44     	; 0x850c <__floatsisf+0x6c>
    84e0:	88 23       	and	r24, r24
    84e2:	11 f0       	breq	.+4      	; 0x84e8 <__floatsisf+0x48>
    84e4:	96 e9       	ldi	r25, 0x96	; 150
    84e6:	11 c0       	rjmp	.+34     	; 0x850a <__floatsisf+0x6a>
    84e8:	77 23       	and	r23, r23
    84ea:	21 f0       	breq	.+8      	; 0x84f4 <__floatsisf+0x54>
    84ec:	9e e8       	ldi	r25, 0x8E	; 142
    84ee:	87 2f       	mov	r24, r23
    84f0:	76 2f       	mov	r23, r22
    84f2:	05 c0       	rjmp	.+10     	; 0x84fe <__floatsisf+0x5e>
    84f4:	66 23       	and	r22, r22
    84f6:	71 f0       	breq	.+28     	; 0x8514 <__floatsisf+0x74>
    84f8:	96 e8       	ldi	r25, 0x86	; 134
    84fa:	86 2f       	mov	r24, r22
    84fc:	70 e0       	ldi	r23, 0x00	; 0
    84fe:	60 e0       	ldi	r22, 0x00	; 0
    8500:	2a f0       	brmi	.+10     	; 0x850c <__floatsisf+0x6c>
    8502:	9a 95       	dec	r25
    8504:	66 0f       	add	r22, r22
    8506:	77 1f       	adc	r23, r23
    8508:	88 1f       	adc	r24, r24
    850a:	da f7       	brpl	.-10     	; 0x8502 <__floatsisf+0x62>
    850c:	88 0f       	add	r24, r24
    850e:	96 95       	lsr	r25
    8510:	87 95       	ror	r24
    8512:	97 f9       	bld	r25, 7
    8514:	08 95       	ret

00008516 <__fp_inf>:
    8516:	97 f9       	bld	r25, 7
    8518:	9f 67       	ori	r25, 0x7F	; 127
    851a:	80 e8       	ldi	r24, 0x80	; 128
    851c:	70 e0       	ldi	r23, 0x00	; 0
    851e:	60 e0       	ldi	r22, 0x00	; 0
    8520:	08 95       	ret

00008522 <__fp_nan>:
    8522:	9f ef       	ldi	r25, 0xFF	; 255
    8524:	80 ec       	ldi	r24, 0xC0	; 192
    8526:	08 95       	ret

00008528 <__fp_pscA>:
    8528:	00 24       	eor	r0, r0
    852a:	0a 94       	dec	r0
    852c:	16 16       	cp	r1, r22
    852e:	17 06       	cpc	r1, r23
    8530:	18 06       	cpc	r1, r24
    8532:	09 06       	cpc	r0, r25
    8534:	08 95       	ret

00008536 <__fp_pscB>:
    8536:	00 24       	eor	r0, r0
    8538:	0a 94       	dec	r0
    853a:	12 16       	cp	r1, r18
    853c:	13 06       	cpc	r1, r19
    853e:	14 06       	cpc	r1, r20
    8540:	05 06       	cpc	r0, r21
    8542:	08 95       	ret

00008544 <__fp_round>:
    8544:	09 2e       	mov	r0, r25
    8546:	03 94       	inc	r0
    8548:	00 0c       	add	r0, r0
    854a:	11 f4       	brne	.+4      	; 0x8550 <__fp_round+0xc>
    854c:	88 23       	and	r24, r24
    854e:	52 f0       	brmi	.+20     	; 0x8564 <__fp_round+0x20>
    8550:	bb 0f       	add	r27, r27
    8552:	40 f4       	brcc	.+16     	; 0x8564 <__fp_round+0x20>
    8554:	bf 2b       	or	r27, r31
    8556:	11 f4       	brne	.+4      	; 0x855c <__fp_round+0x18>
    8558:	60 ff       	sbrs	r22, 0
    855a:	04 c0       	rjmp	.+8      	; 0x8564 <__fp_round+0x20>
    855c:	6f 5f       	subi	r22, 0xFF	; 255
    855e:	7f 4f       	sbci	r23, 0xFF	; 255
    8560:	8f 4f       	sbci	r24, 0xFF	; 255
    8562:	9f 4f       	sbci	r25, 0xFF	; 255
    8564:	08 95       	ret

00008566 <__fp_split3>:
    8566:	57 fd       	sbrc	r21, 7
    8568:	90 58       	subi	r25, 0x80	; 128
    856a:	44 0f       	add	r20, r20
    856c:	55 1f       	adc	r21, r21
    856e:	59 f0       	breq	.+22     	; 0x8586 <__fp_splitA+0x10>
    8570:	5f 3f       	cpi	r21, 0xFF	; 255
    8572:	71 f0       	breq	.+28     	; 0x8590 <__fp_splitA+0x1a>
    8574:	47 95       	ror	r20

00008576 <__fp_splitA>:
    8576:	88 0f       	add	r24, r24
    8578:	97 fb       	bst	r25, 7
    857a:	99 1f       	adc	r25, r25
    857c:	61 f0       	breq	.+24     	; 0x8596 <__fp_splitA+0x20>
    857e:	9f 3f       	cpi	r25, 0xFF	; 255
    8580:	79 f0       	breq	.+30     	; 0x85a0 <__fp_splitA+0x2a>
    8582:	87 95       	ror	r24
    8584:	08 95       	ret
    8586:	12 16       	cp	r1, r18
    8588:	13 06       	cpc	r1, r19
    858a:	14 06       	cpc	r1, r20
    858c:	55 1f       	adc	r21, r21
    858e:	f2 cf       	rjmp	.-28     	; 0x8574 <__fp_split3+0xe>
    8590:	46 95       	lsr	r20
    8592:	f1 df       	rcall	.-30     	; 0x8576 <__fp_splitA>
    8594:	08 c0       	rjmp	.+16     	; 0x85a6 <__fp_splitA+0x30>
    8596:	16 16       	cp	r1, r22
    8598:	17 06       	cpc	r1, r23
    859a:	18 06       	cpc	r1, r24
    859c:	99 1f       	adc	r25, r25
    859e:	f1 cf       	rjmp	.-30     	; 0x8582 <__fp_splitA+0xc>
    85a0:	86 95       	lsr	r24
    85a2:	71 05       	cpc	r23, r1
    85a4:	61 05       	cpc	r22, r1
    85a6:	08 94       	sec
    85a8:	08 95       	ret

000085aa <__fp_zero>:
    85aa:	e8 94       	clt

000085ac <__fp_szero>:
    85ac:	bb 27       	eor	r27, r27
    85ae:	66 27       	eor	r22, r22
    85b0:	77 27       	eor	r23, r23
    85b2:	cb 01       	movw	r24, r22
    85b4:	97 f9       	bld	r25, 7
    85b6:	08 95       	ret

000085b8 <__mulsf3>:
    85b8:	0b d0       	rcall	.+22     	; 0x85d0 <__mulsf3x>
    85ba:	c4 cf       	rjmp	.-120    	; 0x8544 <__fp_round>
    85bc:	b5 df       	rcall	.-150    	; 0x8528 <__fp_pscA>
    85be:	28 f0       	brcs	.+10     	; 0x85ca <__mulsf3+0x12>
    85c0:	ba df       	rcall	.-140    	; 0x8536 <__fp_pscB>
    85c2:	18 f0       	brcs	.+6      	; 0x85ca <__mulsf3+0x12>
    85c4:	95 23       	and	r25, r21
    85c6:	09 f0       	breq	.+2      	; 0x85ca <__mulsf3+0x12>
    85c8:	a6 cf       	rjmp	.-180    	; 0x8516 <__fp_inf>
    85ca:	ab cf       	rjmp	.-170    	; 0x8522 <__fp_nan>
    85cc:	11 24       	eor	r1, r1
    85ce:	ee cf       	rjmp	.-36     	; 0x85ac <__fp_szero>

000085d0 <__mulsf3x>:
    85d0:	ca df       	rcall	.-108    	; 0x8566 <__fp_split3>
    85d2:	a0 f3       	brcs	.-24     	; 0x85bc <__mulsf3+0x4>

000085d4 <__mulsf3_pse>:
    85d4:	95 9f       	mul	r25, r21
    85d6:	d1 f3       	breq	.-12     	; 0x85cc <__mulsf3+0x14>
    85d8:	95 0f       	add	r25, r21
    85da:	50 e0       	ldi	r21, 0x00	; 0
    85dc:	55 1f       	adc	r21, r21
    85de:	62 9f       	mul	r22, r18
    85e0:	f0 01       	movw	r30, r0
    85e2:	72 9f       	mul	r23, r18
    85e4:	bb 27       	eor	r27, r27
    85e6:	f0 0d       	add	r31, r0
    85e8:	b1 1d       	adc	r27, r1
    85ea:	63 9f       	mul	r22, r19
    85ec:	aa 27       	eor	r26, r26
    85ee:	f0 0d       	add	r31, r0
    85f0:	b1 1d       	adc	r27, r1
    85f2:	aa 1f       	adc	r26, r26
    85f4:	64 9f       	mul	r22, r20
    85f6:	66 27       	eor	r22, r22
    85f8:	b0 0d       	add	r27, r0
    85fa:	a1 1d       	adc	r26, r1
    85fc:	66 1f       	adc	r22, r22
    85fe:	82 9f       	mul	r24, r18
    8600:	22 27       	eor	r18, r18
    8602:	b0 0d       	add	r27, r0
    8604:	a1 1d       	adc	r26, r1
    8606:	62 1f       	adc	r22, r18
    8608:	73 9f       	mul	r23, r19
    860a:	b0 0d       	add	r27, r0
    860c:	a1 1d       	adc	r26, r1
    860e:	62 1f       	adc	r22, r18
    8610:	83 9f       	mul	r24, r19
    8612:	a0 0d       	add	r26, r0
    8614:	61 1d       	adc	r22, r1
    8616:	22 1f       	adc	r18, r18
    8618:	74 9f       	mul	r23, r20
    861a:	33 27       	eor	r19, r19
    861c:	a0 0d       	add	r26, r0
    861e:	61 1d       	adc	r22, r1
    8620:	23 1f       	adc	r18, r19
    8622:	84 9f       	mul	r24, r20
    8624:	60 0d       	add	r22, r0
    8626:	21 1d       	adc	r18, r1
    8628:	82 2f       	mov	r24, r18
    862a:	76 2f       	mov	r23, r22
    862c:	6a 2f       	mov	r22, r26
    862e:	11 24       	eor	r1, r1
    8630:	9f 57       	subi	r25, 0x7F	; 127
    8632:	50 40       	sbci	r21, 0x00	; 0
    8634:	8a f0       	brmi	.+34     	; 0x8658 <__mulsf3_pse+0x84>
    8636:	e1 f0       	breq	.+56     	; 0x8670 <__mulsf3_pse+0x9c>
    8638:	88 23       	and	r24, r24
    863a:	4a f0       	brmi	.+18     	; 0x864e <__mulsf3_pse+0x7a>
    863c:	ee 0f       	add	r30, r30
    863e:	ff 1f       	adc	r31, r31
    8640:	bb 1f       	adc	r27, r27
    8642:	66 1f       	adc	r22, r22
    8644:	77 1f       	adc	r23, r23
    8646:	88 1f       	adc	r24, r24
    8648:	91 50       	subi	r25, 0x01	; 1
    864a:	50 40       	sbci	r21, 0x00	; 0
    864c:	a9 f7       	brne	.-22     	; 0x8638 <__mulsf3_pse+0x64>
    864e:	9e 3f       	cpi	r25, 0xFE	; 254
    8650:	51 05       	cpc	r21, r1
    8652:	70 f0       	brcs	.+28     	; 0x8670 <__mulsf3_pse+0x9c>
    8654:	60 cf       	rjmp	.-320    	; 0x8516 <__fp_inf>
    8656:	aa cf       	rjmp	.-172    	; 0x85ac <__fp_szero>
    8658:	5f 3f       	cpi	r21, 0xFF	; 255
    865a:	ec f3       	brlt	.-6      	; 0x8656 <__mulsf3_pse+0x82>
    865c:	98 3e       	cpi	r25, 0xE8	; 232
    865e:	dc f3       	brlt	.-10     	; 0x8656 <__mulsf3_pse+0x82>
    8660:	86 95       	lsr	r24
    8662:	77 95       	ror	r23
    8664:	67 95       	ror	r22
    8666:	b7 95       	ror	r27
    8668:	f7 95       	ror	r31
    866a:	e7 95       	ror	r30
    866c:	9f 5f       	subi	r25, 0xFF	; 255
    866e:	c1 f7       	brne	.-16     	; 0x8660 <__mulsf3_pse+0x8c>
    8670:	fe 2b       	or	r31, r30
    8672:	88 0f       	add	r24, r24
    8674:	91 1d       	adc	r25, r1
    8676:	96 95       	lsr	r25
    8678:	87 95       	ror	r24
    867a:	97 f9       	bld	r25, 7
    867c:	08 95       	ret

0000867e <memcpy>:
    867e:	fb 01       	movw	r30, r22
    8680:	dc 01       	movw	r26, r24
    8682:	02 c0       	rjmp	.+4      	; 0x8688 <memcpy+0xa>
    8684:	01 90       	ld	r0, Z+
    8686:	0d 92       	st	X+, r0
    8688:	41 50       	subi	r20, 0x01	; 1
    868a:	50 40       	sbci	r21, 0x00	; 0
    868c:	d8 f7       	brcc	.-10     	; 0x8684 <memcpy+0x6>
    868e:	08 95       	ret

00008690 <fdevopen>:
    8690:	0f 93       	push	r16
    8692:	1f 93       	push	r17
    8694:	cf 93       	push	r28
    8696:	df 93       	push	r29
    8698:	00 97       	sbiw	r24, 0x00	; 0
    869a:	31 f4       	brne	.+12     	; 0x86a8 <fdevopen+0x18>
    869c:	61 15       	cp	r22, r1
    869e:	71 05       	cpc	r23, r1
    86a0:	19 f4       	brne	.+6      	; 0x86a8 <fdevopen+0x18>
    86a2:	80 e0       	ldi	r24, 0x00	; 0
    86a4:	90 e0       	ldi	r25, 0x00	; 0
    86a6:	39 c0       	rjmp	.+114    	; 0x871a <fdevopen+0x8a>
    86a8:	8b 01       	movw	r16, r22
    86aa:	ec 01       	movw	r28, r24
    86ac:	6e e0       	ldi	r22, 0x0E	; 14
    86ae:	70 e0       	ldi	r23, 0x00	; 0
    86b0:	81 e0       	ldi	r24, 0x01	; 1
    86b2:	90 e0       	ldi	r25, 0x00	; 0
    86b4:	71 d2       	rcall	.+1250   	; 0x8b98 <calloc>
    86b6:	fc 01       	movw	r30, r24
    86b8:	89 2b       	or	r24, r25
    86ba:	99 f3       	breq	.-26     	; 0x86a2 <fdevopen+0x12>
    86bc:	80 e8       	ldi	r24, 0x80	; 128
    86be:	83 83       	std	Z+3, r24	; 0x03
    86c0:	01 15       	cp	r16, r1
    86c2:	11 05       	cpc	r17, r1
    86c4:	71 f0       	breq	.+28     	; 0x86e2 <fdevopen+0x52>
    86c6:	02 87       	std	Z+10, r16	; 0x0a
    86c8:	13 87       	std	Z+11, r17	; 0x0b
    86ca:	81 e8       	ldi	r24, 0x81	; 129
    86cc:	83 83       	std	Z+3, r24	; 0x03
    86ce:	80 91 9b 28 	lds	r24, 0x289B	; 0x80289b <__iob>
    86d2:	90 91 9c 28 	lds	r25, 0x289C	; 0x80289c <__iob+0x1>
    86d6:	89 2b       	or	r24, r25
    86d8:	21 f4       	brne	.+8      	; 0x86e2 <fdevopen+0x52>
    86da:	e0 93 9b 28 	sts	0x289B, r30	; 0x80289b <__iob>
    86de:	f0 93 9c 28 	sts	0x289C, r31	; 0x80289c <__iob+0x1>
    86e2:	20 97       	sbiw	r28, 0x00	; 0
    86e4:	c9 f0       	breq	.+50     	; 0x8718 <fdevopen+0x88>
    86e6:	c0 87       	std	Z+8, r28	; 0x08
    86e8:	d1 87       	std	Z+9, r29	; 0x09
    86ea:	83 81       	ldd	r24, Z+3	; 0x03
    86ec:	82 60       	ori	r24, 0x02	; 2
    86ee:	83 83       	std	Z+3, r24	; 0x03
    86f0:	80 91 9d 28 	lds	r24, 0x289D	; 0x80289d <__iob+0x2>
    86f4:	90 91 9e 28 	lds	r25, 0x289E	; 0x80289e <__iob+0x3>
    86f8:	89 2b       	or	r24, r25
    86fa:	71 f4       	brne	.+28     	; 0x8718 <fdevopen+0x88>
    86fc:	e0 93 9d 28 	sts	0x289D, r30	; 0x80289d <__iob+0x2>
    8700:	f0 93 9e 28 	sts	0x289E, r31	; 0x80289e <__iob+0x3>
    8704:	80 91 9f 28 	lds	r24, 0x289F	; 0x80289f <__iob+0x4>
    8708:	90 91 a0 28 	lds	r25, 0x28A0	; 0x8028a0 <__iob+0x5>
    870c:	89 2b       	or	r24, r25
    870e:	21 f4       	brne	.+8      	; 0x8718 <fdevopen+0x88>
    8710:	e0 93 9f 28 	sts	0x289F, r30	; 0x80289f <__iob+0x4>
    8714:	f0 93 a0 28 	sts	0x28A0, r31	; 0x8028a0 <__iob+0x5>
    8718:	cf 01       	movw	r24, r30
    871a:	df 91       	pop	r29
    871c:	cf 91       	pop	r28
    871e:	1f 91       	pop	r17
    8720:	0f 91       	pop	r16
    8722:	08 95       	ret

00008724 <printf>:
    8724:	cf 93       	push	r28
    8726:	df 93       	push	r29
    8728:	cd b7       	in	r28, 0x3d	; 61
    872a:	de b7       	in	r29, 0x3e	; 62
    872c:	ae 01       	movw	r20, r28
    872e:	4a 5f       	subi	r20, 0xFA	; 250
    8730:	5f 4f       	sbci	r21, 0xFF	; 255
    8732:	fa 01       	movw	r30, r20
    8734:	61 91       	ld	r22, Z+
    8736:	71 91       	ld	r23, Z+
    8738:	af 01       	movw	r20, r30
    873a:	80 91 9d 28 	lds	r24, 0x289D	; 0x80289d <__iob+0x2>
    873e:	90 91 9e 28 	lds	r25, 0x289E	; 0x80289e <__iob+0x3>
    8742:	33 d0       	rcall	.+102    	; 0x87aa <vfprintf>
    8744:	df 91       	pop	r29
    8746:	cf 91       	pop	r28
    8748:	08 95       	ret

0000874a <puts>:
    874a:	0f 93       	push	r16
    874c:	1f 93       	push	r17
    874e:	cf 93       	push	r28
    8750:	df 93       	push	r29
    8752:	e0 91 9d 28 	lds	r30, 0x289D	; 0x80289d <__iob+0x2>
    8756:	f0 91 9e 28 	lds	r31, 0x289E	; 0x80289e <__iob+0x3>
    875a:	23 81       	ldd	r18, Z+3	; 0x03
    875c:	21 ff       	sbrs	r18, 1
    875e:	1b c0       	rjmp	.+54     	; 0x8796 <puts+0x4c>
    8760:	8c 01       	movw	r16, r24
    8762:	d0 e0       	ldi	r29, 0x00	; 0
    8764:	c0 e0       	ldi	r28, 0x00	; 0
    8766:	f8 01       	movw	r30, r16
    8768:	81 91       	ld	r24, Z+
    876a:	8f 01       	movw	r16, r30
    876c:	60 91 9d 28 	lds	r22, 0x289D	; 0x80289d <__iob+0x2>
    8770:	70 91 9e 28 	lds	r23, 0x289E	; 0x80289e <__iob+0x3>
    8774:	db 01       	movw	r26, r22
    8776:	18 96       	adiw	r26, 0x08	; 8
    8778:	ed 91       	ld	r30, X+
    877a:	fc 91       	ld	r31, X
    877c:	19 97       	sbiw	r26, 0x09	; 9
    877e:	88 23       	and	r24, r24
    8780:	31 f0       	breq	.+12     	; 0x878e <puts+0x44>
    8782:	19 95       	eicall
    8784:	89 2b       	or	r24, r25
    8786:	79 f3       	breq	.-34     	; 0x8766 <puts+0x1c>
    8788:	df ef       	ldi	r29, 0xFF	; 255
    878a:	cf ef       	ldi	r28, 0xFF	; 255
    878c:	ec cf       	rjmp	.-40     	; 0x8766 <puts+0x1c>
    878e:	8a e0       	ldi	r24, 0x0A	; 10
    8790:	19 95       	eicall
    8792:	89 2b       	or	r24, r25
    8794:	19 f0       	breq	.+6      	; 0x879c <puts+0x52>
    8796:	8f ef       	ldi	r24, 0xFF	; 255
    8798:	9f ef       	ldi	r25, 0xFF	; 255
    879a:	02 c0       	rjmp	.+4      	; 0x87a0 <puts+0x56>
    879c:	8d 2f       	mov	r24, r29
    879e:	9c 2f       	mov	r25, r28
    87a0:	df 91       	pop	r29
    87a2:	cf 91       	pop	r28
    87a4:	1f 91       	pop	r17
    87a6:	0f 91       	pop	r16
    87a8:	08 95       	ret

000087aa <vfprintf>:
    87aa:	2f 92       	push	r2
    87ac:	3f 92       	push	r3
    87ae:	4f 92       	push	r4
    87b0:	5f 92       	push	r5
    87b2:	6f 92       	push	r6
    87b4:	7f 92       	push	r7
    87b6:	8f 92       	push	r8
    87b8:	9f 92       	push	r9
    87ba:	af 92       	push	r10
    87bc:	bf 92       	push	r11
    87be:	cf 92       	push	r12
    87c0:	df 92       	push	r13
    87c2:	ef 92       	push	r14
    87c4:	ff 92       	push	r15
    87c6:	0f 93       	push	r16
    87c8:	1f 93       	push	r17
    87ca:	cf 93       	push	r28
    87cc:	df 93       	push	r29
    87ce:	cd b7       	in	r28, 0x3d	; 61
    87d0:	de b7       	in	r29, 0x3e	; 62
    87d2:	2b 97       	sbiw	r28, 0x0b	; 11
    87d4:	cd bf       	out	0x3d, r28	; 61
    87d6:	de bf       	out	0x3e, r29	; 62
    87d8:	6c 01       	movw	r12, r24
    87da:	7b 01       	movw	r14, r22
    87dc:	8a 01       	movw	r16, r20
    87de:	fc 01       	movw	r30, r24
    87e0:	16 82       	std	Z+6, r1	; 0x06
    87e2:	17 82       	std	Z+7, r1	; 0x07
    87e4:	83 81       	ldd	r24, Z+3	; 0x03
    87e6:	81 ff       	sbrs	r24, 1
    87e8:	bf c1       	rjmp	.+894    	; 0x8b68 <vfprintf+0x3be>
    87ea:	ce 01       	movw	r24, r28
    87ec:	01 96       	adiw	r24, 0x01	; 1
    87ee:	3c 01       	movw	r6, r24
    87f0:	f6 01       	movw	r30, r12
    87f2:	93 81       	ldd	r25, Z+3	; 0x03
    87f4:	f7 01       	movw	r30, r14
    87f6:	93 fd       	sbrc	r25, 3
    87f8:	85 91       	lpm	r24, Z+
    87fa:	93 ff       	sbrs	r25, 3
    87fc:	81 91       	ld	r24, Z+
    87fe:	7f 01       	movw	r14, r30
    8800:	88 23       	and	r24, r24
    8802:	09 f4       	brne	.+2      	; 0x8806 <vfprintf+0x5c>
    8804:	ad c1       	rjmp	.+858    	; 0x8b60 <vfprintf+0x3b6>
    8806:	85 32       	cpi	r24, 0x25	; 37
    8808:	39 f4       	brne	.+14     	; 0x8818 <vfprintf+0x6e>
    880a:	93 fd       	sbrc	r25, 3
    880c:	85 91       	lpm	r24, Z+
    880e:	93 ff       	sbrs	r25, 3
    8810:	81 91       	ld	r24, Z+
    8812:	7f 01       	movw	r14, r30
    8814:	85 32       	cpi	r24, 0x25	; 37
    8816:	21 f4       	brne	.+8      	; 0x8820 <vfprintf+0x76>
    8818:	b6 01       	movw	r22, r12
    881a:	90 e0       	ldi	r25, 0x00	; 0
    881c:	15 d3       	rcall	.+1578   	; 0x8e48 <fputc>
    881e:	e8 cf       	rjmp	.-48     	; 0x87f0 <vfprintf+0x46>
    8820:	91 2c       	mov	r9, r1
    8822:	21 2c       	mov	r2, r1
    8824:	31 2c       	mov	r3, r1
    8826:	ff e1       	ldi	r31, 0x1F	; 31
    8828:	f3 15       	cp	r31, r3
    882a:	d8 f0       	brcs	.+54     	; 0x8862 <vfprintf+0xb8>
    882c:	8b 32       	cpi	r24, 0x2B	; 43
    882e:	79 f0       	breq	.+30     	; 0x884e <vfprintf+0xa4>
    8830:	38 f4       	brcc	.+14     	; 0x8840 <vfprintf+0x96>
    8832:	80 32       	cpi	r24, 0x20	; 32
    8834:	79 f0       	breq	.+30     	; 0x8854 <vfprintf+0xaa>
    8836:	83 32       	cpi	r24, 0x23	; 35
    8838:	a1 f4       	brne	.+40     	; 0x8862 <vfprintf+0xb8>
    883a:	23 2d       	mov	r18, r3
    883c:	20 61       	ori	r18, 0x10	; 16
    883e:	1d c0       	rjmp	.+58     	; 0x887a <vfprintf+0xd0>
    8840:	8d 32       	cpi	r24, 0x2D	; 45
    8842:	61 f0       	breq	.+24     	; 0x885c <vfprintf+0xb2>
    8844:	80 33       	cpi	r24, 0x30	; 48
    8846:	69 f4       	brne	.+26     	; 0x8862 <vfprintf+0xb8>
    8848:	23 2d       	mov	r18, r3
    884a:	21 60       	ori	r18, 0x01	; 1
    884c:	16 c0       	rjmp	.+44     	; 0x887a <vfprintf+0xd0>
    884e:	83 2d       	mov	r24, r3
    8850:	82 60       	ori	r24, 0x02	; 2
    8852:	38 2e       	mov	r3, r24
    8854:	e3 2d       	mov	r30, r3
    8856:	e4 60       	ori	r30, 0x04	; 4
    8858:	3e 2e       	mov	r3, r30
    885a:	2a c0       	rjmp	.+84     	; 0x88b0 <vfprintf+0x106>
    885c:	f3 2d       	mov	r31, r3
    885e:	f8 60       	ori	r31, 0x08	; 8
    8860:	1d c0       	rjmp	.+58     	; 0x889c <vfprintf+0xf2>
    8862:	37 fc       	sbrc	r3, 7
    8864:	2d c0       	rjmp	.+90     	; 0x88c0 <vfprintf+0x116>
    8866:	20 ed       	ldi	r18, 0xD0	; 208
    8868:	28 0f       	add	r18, r24
    886a:	2a 30       	cpi	r18, 0x0A	; 10
    886c:	40 f0       	brcs	.+16     	; 0x887e <vfprintf+0xd4>
    886e:	8e 32       	cpi	r24, 0x2E	; 46
    8870:	b9 f4       	brne	.+46     	; 0x88a0 <vfprintf+0xf6>
    8872:	36 fc       	sbrc	r3, 6
    8874:	75 c1       	rjmp	.+746    	; 0x8b60 <vfprintf+0x3b6>
    8876:	23 2d       	mov	r18, r3
    8878:	20 64       	ori	r18, 0x40	; 64
    887a:	32 2e       	mov	r3, r18
    887c:	19 c0       	rjmp	.+50     	; 0x88b0 <vfprintf+0x106>
    887e:	36 fe       	sbrs	r3, 6
    8880:	06 c0       	rjmp	.+12     	; 0x888e <vfprintf+0xe4>
    8882:	8a e0       	ldi	r24, 0x0A	; 10
    8884:	98 9e       	mul	r9, r24
    8886:	20 0d       	add	r18, r0
    8888:	11 24       	eor	r1, r1
    888a:	92 2e       	mov	r9, r18
    888c:	11 c0       	rjmp	.+34     	; 0x88b0 <vfprintf+0x106>
    888e:	ea e0       	ldi	r30, 0x0A	; 10
    8890:	2e 9e       	mul	r2, r30
    8892:	20 0d       	add	r18, r0
    8894:	11 24       	eor	r1, r1
    8896:	22 2e       	mov	r2, r18
    8898:	f3 2d       	mov	r31, r3
    889a:	f0 62       	ori	r31, 0x20	; 32
    889c:	3f 2e       	mov	r3, r31
    889e:	08 c0       	rjmp	.+16     	; 0x88b0 <vfprintf+0x106>
    88a0:	8c 36       	cpi	r24, 0x6C	; 108
    88a2:	21 f4       	brne	.+8      	; 0x88ac <vfprintf+0x102>
    88a4:	83 2d       	mov	r24, r3
    88a6:	80 68       	ori	r24, 0x80	; 128
    88a8:	38 2e       	mov	r3, r24
    88aa:	02 c0       	rjmp	.+4      	; 0x88b0 <vfprintf+0x106>
    88ac:	88 36       	cpi	r24, 0x68	; 104
    88ae:	41 f4       	brne	.+16     	; 0x88c0 <vfprintf+0x116>
    88b0:	f7 01       	movw	r30, r14
    88b2:	93 fd       	sbrc	r25, 3
    88b4:	85 91       	lpm	r24, Z+
    88b6:	93 ff       	sbrs	r25, 3
    88b8:	81 91       	ld	r24, Z+
    88ba:	7f 01       	movw	r14, r30
    88bc:	81 11       	cpse	r24, r1
    88be:	b3 cf       	rjmp	.-154    	; 0x8826 <vfprintf+0x7c>
    88c0:	98 2f       	mov	r25, r24
    88c2:	9f 7d       	andi	r25, 0xDF	; 223
    88c4:	95 54       	subi	r25, 0x45	; 69
    88c6:	93 30       	cpi	r25, 0x03	; 3
    88c8:	28 f4       	brcc	.+10     	; 0x88d4 <vfprintf+0x12a>
    88ca:	0c 5f       	subi	r16, 0xFC	; 252
    88cc:	1f 4f       	sbci	r17, 0xFF	; 255
    88ce:	9f e3       	ldi	r25, 0x3F	; 63
    88d0:	99 83       	std	Y+1, r25	; 0x01
    88d2:	0d c0       	rjmp	.+26     	; 0x88ee <vfprintf+0x144>
    88d4:	83 36       	cpi	r24, 0x63	; 99
    88d6:	31 f0       	breq	.+12     	; 0x88e4 <vfprintf+0x13a>
    88d8:	83 37       	cpi	r24, 0x73	; 115
    88da:	71 f0       	breq	.+28     	; 0x88f8 <vfprintf+0x14e>
    88dc:	83 35       	cpi	r24, 0x53	; 83
    88de:	09 f0       	breq	.+2      	; 0x88e2 <vfprintf+0x138>
    88e0:	55 c0       	rjmp	.+170    	; 0x898c <vfprintf+0x1e2>
    88e2:	20 c0       	rjmp	.+64     	; 0x8924 <vfprintf+0x17a>
    88e4:	f8 01       	movw	r30, r16
    88e6:	80 81       	ld	r24, Z
    88e8:	89 83       	std	Y+1, r24	; 0x01
    88ea:	0e 5f       	subi	r16, 0xFE	; 254
    88ec:	1f 4f       	sbci	r17, 0xFF	; 255
    88ee:	88 24       	eor	r8, r8
    88f0:	83 94       	inc	r8
    88f2:	91 2c       	mov	r9, r1
    88f4:	53 01       	movw	r10, r6
    88f6:	12 c0       	rjmp	.+36     	; 0x891c <vfprintf+0x172>
    88f8:	28 01       	movw	r4, r16
    88fa:	f2 e0       	ldi	r31, 0x02	; 2
    88fc:	4f 0e       	add	r4, r31
    88fe:	51 1c       	adc	r5, r1
    8900:	f8 01       	movw	r30, r16
    8902:	a0 80       	ld	r10, Z
    8904:	b1 80       	ldd	r11, Z+1	; 0x01
    8906:	36 fe       	sbrs	r3, 6
    8908:	03 c0       	rjmp	.+6      	; 0x8910 <vfprintf+0x166>
    890a:	69 2d       	mov	r22, r9
    890c:	70 e0       	ldi	r23, 0x00	; 0
    890e:	02 c0       	rjmp	.+4      	; 0x8914 <vfprintf+0x16a>
    8910:	6f ef       	ldi	r22, 0xFF	; 255
    8912:	7f ef       	ldi	r23, 0xFF	; 255
    8914:	c5 01       	movw	r24, r10
    8916:	8d d2       	rcall	.+1306   	; 0x8e32 <strnlen>
    8918:	4c 01       	movw	r8, r24
    891a:	82 01       	movw	r16, r4
    891c:	f3 2d       	mov	r31, r3
    891e:	ff 77       	andi	r31, 0x7F	; 127
    8920:	3f 2e       	mov	r3, r31
    8922:	15 c0       	rjmp	.+42     	; 0x894e <vfprintf+0x1a4>
    8924:	28 01       	movw	r4, r16
    8926:	22 e0       	ldi	r18, 0x02	; 2
    8928:	42 0e       	add	r4, r18
    892a:	51 1c       	adc	r5, r1
    892c:	f8 01       	movw	r30, r16
    892e:	a0 80       	ld	r10, Z
    8930:	b1 80       	ldd	r11, Z+1	; 0x01
    8932:	36 fe       	sbrs	r3, 6
    8934:	03 c0       	rjmp	.+6      	; 0x893c <vfprintf+0x192>
    8936:	69 2d       	mov	r22, r9
    8938:	70 e0       	ldi	r23, 0x00	; 0
    893a:	02 c0       	rjmp	.+4      	; 0x8940 <vfprintf+0x196>
    893c:	6f ef       	ldi	r22, 0xFF	; 255
    893e:	7f ef       	ldi	r23, 0xFF	; 255
    8940:	c5 01       	movw	r24, r10
    8942:	65 d2       	rcall	.+1226   	; 0x8e0e <strnlen_P>
    8944:	4c 01       	movw	r8, r24
    8946:	f3 2d       	mov	r31, r3
    8948:	f0 68       	ori	r31, 0x80	; 128
    894a:	3f 2e       	mov	r3, r31
    894c:	82 01       	movw	r16, r4
    894e:	33 fc       	sbrc	r3, 3
    8950:	19 c0       	rjmp	.+50     	; 0x8984 <vfprintf+0x1da>
    8952:	82 2d       	mov	r24, r2
    8954:	90 e0       	ldi	r25, 0x00	; 0
    8956:	88 16       	cp	r8, r24
    8958:	99 06       	cpc	r9, r25
    895a:	a0 f4       	brcc	.+40     	; 0x8984 <vfprintf+0x1da>
    895c:	b6 01       	movw	r22, r12
    895e:	80 e2       	ldi	r24, 0x20	; 32
    8960:	90 e0       	ldi	r25, 0x00	; 0
    8962:	72 d2       	rcall	.+1252   	; 0x8e48 <fputc>
    8964:	2a 94       	dec	r2
    8966:	f5 cf       	rjmp	.-22     	; 0x8952 <vfprintf+0x1a8>
    8968:	f5 01       	movw	r30, r10
    896a:	37 fc       	sbrc	r3, 7
    896c:	85 91       	lpm	r24, Z+
    896e:	37 fe       	sbrs	r3, 7
    8970:	81 91       	ld	r24, Z+
    8972:	5f 01       	movw	r10, r30
    8974:	b6 01       	movw	r22, r12
    8976:	90 e0       	ldi	r25, 0x00	; 0
    8978:	67 d2       	rcall	.+1230   	; 0x8e48 <fputc>
    897a:	21 10       	cpse	r2, r1
    897c:	2a 94       	dec	r2
    897e:	21 e0       	ldi	r18, 0x01	; 1
    8980:	82 1a       	sub	r8, r18
    8982:	91 08       	sbc	r9, r1
    8984:	81 14       	cp	r8, r1
    8986:	91 04       	cpc	r9, r1
    8988:	79 f7       	brne	.-34     	; 0x8968 <vfprintf+0x1be>
    898a:	e1 c0       	rjmp	.+450    	; 0x8b4e <vfprintf+0x3a4>
    898c:	84 36       	cpi	r24, 0x64	; 100
    898e:	11 f0       	breq	.+4      	; 0x8994 <vfprintf+0x1ea>
    8990:	89 36       	cpi	r24, 0x69	; 105
    8992:	39 f5       	brne	.+78     	; 0x89e2 <vfprintf+0x238>
    8994:	f8 01       	movw	r30, r16
    8996:	37 fe       	sbrs	r3, 7
    8998:	07 c0       	rjmp	.+14     	; 0x89a8 <vfprintf+0x1fe>
    899a:	60 81       	ld	r22, Z
    899c:	71 81       	ldd	r23, Z+1	; 0x01
    899e:	82 81       	ldd	r24, Z+2	; 0x02
    89a0:	93 81       	ldd	r25, Z+3	; 0x03
    89a2:	0c 5f       	subi	r16, 0xFC	; 252
    89a4:	1f 4f       	sbci	r17, 0xFF	; 255
    89a6:	08 c0       	rjmp	.+16     	; 0x89b8 <vfprintf+0x20e>
    89a8:	60 81       	ld	r22, Z
    89aa:	71 81       	ldd	r23, Z+1	; 0x01
    89ac:	07 2e       	mov	r0, r23
    89ae:	00 0c       	add	r0, r0
    89b0:	88 0b       	sbc	r24, r24
    89b2:	99 0b       	sbc	r25, r25
    89b4:	0e 5f       	subi	r16, 0xFE	; 254
    89b6:	1f 4f       	sbci	r17, 0xFF	; 255
    89b8:	f3 2d       	mov	r31, r3
    89ba:	ff 76       	andi	r31, 0x6F	; 111
    89bc:	3f 2e       	mov	r3, r31
    89be:	97 ff       	sbrs	r25, 7
    89c0:	09 c0       	rjmp	.+18     	; 0x89d4 <vfprintf+0x22a>
    89c2:	90 95       	com	r25
    89c4:	80 95       	com	r24
    89c6:	70 95       	com	r23
    89c8:	61 95       	neg	r22
    89ca:	7f 4f       	sbci	r23, 0xFF	; 255
    89cc:	8f 4f       	sbci	r24, 0xFF	; 255
    89ce:	9f 4f       	sbci	r25, 0xFF	; 255
    89d0:	f0 68       	ori	r31, 0x80	; 128
    89d2:	3f 2e       	mov	r3, r31
    89d4:	2a e0       	ldi	r18, 0x0A	; 10
    89d6:	30 e0       	ldi	r19, 0x00	; 0
    89d8:	a3 01       	movw	r20, r6
    89da:	72 d2       	rcall	.+1252   	; 0x8ec0 <__ultoa_invert>
    89dc:	88 2e       	mov	r8, r24
    89de:	86 18       	sub	r8, r6
    89e0:	44 c0       	rjmp	.+136    	; 0x8a6a <vfprintf+0x2c0>
    89e2:	85 37       	cpi	r24, 0x75	; 117
    89e4:	31 f4       	brne	.+12     	; 0x89f2 <vfprintf+0x248>
    89e6:	23 2d       	mov	r18, r3
    89e8:	2f 7e       	andi	r18, 0xEF	; 239
    89ea:	b2 2e       	mov	r11, r18
    89ec:	2a e0       	ldi	r18, 0x0A	; 10
    89ee:	30 e0       	ldi	r19, 0x00	; 0
    89f0:	25 c0       	rjmp	.+74     	; 0x8a3c <vfprintf+0x292>
    89f2:	93 2d       	mov	r25, r3
    89f4:	99 7f       	andi	r25, 0xF9	; 249
    89f6:	b9 2e       	mov	r11, r25
    89f8:	8f 36       	cpi	r24, 0x6F	; 111
    89fa:	c1 f0       	breq	.+48     	; 0x8a2c <vfprintf+0x282>
    89fc:	18 f4       	brcc	.+6      	; 0x8a04 <vfprintf+0x25a>
    89fe:	88 35       	cpi	r24, 0x58	; 88
    8a00:	79 f0       	breq	.+30     	; 0x8a20 <vfprintf+0x276>
    8a02:	ae c0       	rjmp	.+348    	; 0x8b60 <vfprintf+0x3b6>
    8a04:	80 37       	cpi	r24, 0x70	; 112
    8a06:	19 f0       	breq	.+6      	; 0x8a0e <vfprintf+0x264>
    8a08:	88 37       	cpi	r24, 0x78	; 120
    8a0a:	21 f0       	breq	.+8      	; 0x8a14 <vfprintf+0x26a>
    8a0c:	a9 c0       	rjmp	.+338    	; 0x8b60 <vfprintf+0x3b6>
    8a0e:	e9 2f       	mov	r30, r25
    8a10:	e0 61       	ori	r30, 0x10	; 16
    8a12:	be 2e       	mov	r11, r30
    8a14:	b4 fe       	sbrs	r11, 4
    8a16:	0d c0       	rjmp	.+26     	; 0x8a32 <vfprintf+0x288>
    8a18:	fb 2d       	mov	r31, r11
    8a1a:	f4 60       	ori	r31, 0x04	; 4
    8a1c:	bf 2e       	mov	r11, r31
    8a1e:	09 c0       	rjmp	.+18     	; 0x8a32 <vfprintf+0x288>
    8a20:	34 fe       	sbrs	r3, 4
    8a22:	0a c0       	rjmp	.+20     	; 0x8a38 <vfprintf+0x28e>
    8a24:	29 2f       	mov	r18, r25
    8a26:	26 60       	ori	r18, 0x06	; 6
    8a28:	b2 2e       	mov	r11, r18
    8a2a:	06 c0       	rjmp	.+12     	; 0x8a38 <vfprintf+0x28e>
    8a2c:	28 e0       	ldi	r18, 0x08	; 8
    8a2e:	30 e0       	ldi	r19, 0x00	; 0
    8a30:	05 c0       	rjmp	.+10     	; 0x8a3c <vfprintf+0x292>
    8a32:	20 e1       	ldi	r18, 0x10	; 16
    8a34:	30 e0       	ldi	r19, 0x00	; 0
    8a36:	02 c0       	rjmp	.+4      	; 0x8a3c <vfprintf+0x292>
    8a38:	20 e1       	ldi	r18, 0x10	; 16
    8a3a:	32 e0       	ldi	r19, 0x02	; 2
    8a3c:	f8 01       	movw	r30, r16
    8a3e:	b7 fe       	sbrs	r11, 7
    8a40:	07 c0       	rjmp	.+14     	; 0x8a50 <vfprintf+0x2a6>
    8a42:	60 81       	ld	r22, Z
    8a44:	71 81       	ldd	r23, Z+1	; 0x01
    8a46:	82 81       	ldd	r24, Z+2	; 0x02
    8a48:	93 81       	ldd	r25, Z+3	; 0x03
    8a4a:	0c 5f       	subi	r16, 0xFC	; 252
    8a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    8a4e:	06 c0       	rjmp	.+12     	; 0x8a5c <vfprintf+0x2b2>
    8a50:	60 81       	ld	r22, Z
    8a52:	71 81       	ldd	r23, Z+1	; 0x01
    8a54:	80 e0       	ldi	r24, 0x00	; 0
    8a56:	90 e0       	ldi	r25, 0x00	; 0
    8a58:	0e 5f       	subi	r16, 0xFE	; 254
    8a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    8a5c:	a3 01       	movw	r20, r6
    8a5e:	30 d2       	rcall	.+1120   	; 0x8ec0 <__ultoa_invert>
    8a60:	88 2e       	mov	r8, r24
    8a62:	86 18       	sub	r8, r6
    8a64:	fb 2d       	mov	r31, r11
    8a66:	ff 77       	andi	r31, 0x7F	; 127
    8a68:	3f 2e       	mov	r3, r31
    8a6a:	36 fe       	sbrs	r3, 6
    8a6c:	0d c0       	rjmp	.+26     	; 0x8a88 <vfprintf+0x2de>
    8a6e:	23 2d       	mov	r18, r3
    8a70:	2e 7f       	andi	r18, 0xFE	; 254
    8a72:	a2 2e       	mov	r10, r18
    8a74:	89 14       	cp	r8, r9
    8a76:	58 f4       	brcc	.+22     	; 0x8a8e <vfprintf+0x2e4>
    8a78:	34 fe       	sbrs	r3, 4
    8a7a:	0b c0       	rjmp	.+22     	; 0x8a92 <vfprintf+0x2e8>
    8a7c:	32 fc       	sbrc	r3, 2
    8a7e:	09 c0       	rjmp	.+18     	; 0x8a92 <vfprintf+0x2e8>
    8a80:	83 2d       	mov	r24, r3
    8a82:	8e 7e       	andi	r24, 0xEE	; 238
    8a84:	a8 2e       	mov	r10, r24
    8a86:	05 c0       	rjmp	.+10     	; 0x8a92 <vfprintf+0x2e8>
    8a88:	b8 2c       	mov	r11, r8
    8a8a:	a3 2c       	mov	r10, r3
    8a8c:	03 c0       	rjmp	.+6      	; 0x8a94 <vfprintf+0x2ea>
    8a8e:	b8 2c       	mov	r11, r8
    8a90:	01 c0       	rjmp	.+2      	; 0x8a94 <vfprintf+0x2ea>
    8a92:	b9 2c       	mov	r11, r9
    8a94:	a4 fe       	sbrs	r10, 4
    8a96:	0f c0       	rjmp	.+30     	; 0x8ab6 <vfprintf+0x30c>
    8a98:	fe 01       	movw	r30, r28
    8a9a:	e8 0d       	add	r30, r8
    8a9c:	f1 1d       	adc	r31, r1
    8a9e:	80 81       	ld	r24, Z
    8aa0:	80 33       	cpi	r24, 0x30	; 48
    8aa2:	21 f4       	brne	.+8      	; 0x8aac <vfprintf+0x302>
    8aa4:	9a 2d       	mov	r25, r10
    8aa6:	99 7e       	andi	r25, 0xE9	; 233
    8aa8:	a9 2e       	mov	r10, r25
    8aaa:	09 c0       	rjmp	.+18     	; 0x8abe <vfprintf+0x314>
    8aac:	a2 fe       	sbrs	r10, 2
    8aae:	06 c0       	rjmp	.+12     	; 0x8abc <vfprintf+0x312>
    8ab0:	b3 94       	inc	r11
    8ab2:	b3 94       	inc	r11
    8ab4:	04 c0       	rjmp	.+8      	; 0x8abe <vfprintf+0x314>
    8ab6:	8a 2d       	mov	r24, r10
    8ab8:	86 78       	andi	r24, 0x86	; 134
    8aba:	09 f0       	breq	.+2      	; 0x8abe <vfprintf+0x314>
    8abc:	b3 94       	inc	r11
    8abe:	a3 fc       	sbrc	r10, 3
    8ac0:	10 c0       	rjmp	.+32     	; 0x8ae2 <vfprintf+0x338>
    8ac2:	a0 fe       	sbrs	r10, 0
    8ac4:	06 c0       	rjmp	.+12     	; 0x8ad2 <vfprintf+0x328>
    8ac6:	b2 14       	cp	r11, r2
    8ac8:	80 f4       	brcc	.+32     	; 0x8aea <vfprintf+0x340>
    8aca:	28 0c       	add	r2, r8
    8acc:	92 2c       	mov	r9, r2
    8ace:	9b 18       	sub	r9, r11
    8ad0:	0d c0       	rjmp	.+26     	; 0x8aec <vfprintf+0x342>
    8ad2:	b2 14       	cp	r11, r2
    8ad4:	58 f4       	brcc	.+22     	; 0x8aec <vfprintf+0x342>
    8ad6:	b6 01       	movw	r22, r12
    8ad8:	80 e2       	ldi	r24, 0x20	; 32
    8ada:	90 e0       	ldi	r25, 0x00	; 0
    8adc:	b5 d1       	rcall	.+874    	; 0x8e48 <fputc>
    8ade:	b3 94       	inc	r11
    8ae0:	f8 cf       	rjmp	.-16     	; 0x8ad2 <vfprintf+0x328>
    8ae2:	b2 14       	cp	r11, r2
    8ae4:	18 f4       	brcc	.+6      	; 0x8aec <vfprintf+0x342>
    8ae6:	2b 18       	sub	r2, r11
    8ae8:	02 c0       	rjmp	.+4      	; 0x8aee <vfprintf+0x344>
    8aea:	98 2c       	mov	r9, r8
    8aec:	21 2c       	mov	r2, r1
    8aee:	a4 fe       	sbrs	r10, 4
    8af0:	0f c0       	rjmp	.+30     	; 0x8b10 <vfprintf+0x366>
    8af2:	b6 01       	movw	r22, r12
    8af4:	80 e3       	ldi	r24, 0x30	; 48
    8af6:	90 e0       	ldi	r25, 0x00	; 0
    8af8:	a7 d1       	rcall	.+846    	; 0x8e48 <fputc>
    8afa:	a2 fe       	sbrs	r10, 2
    8afc:	16 c0       	rjmp	.+44     	; 0x8b2a <vfprintf+0x380>
    8afe:	a1 fc       	sbrc	r10, 1
    8b00:	03 c0       	rjmp	.+6      	; 0x8b08 <vfprintf+0x35e>
    8b02:	88 e7       	ldi	r24, 0x78	; 120
    8b04:	90 e0       	ldi	r25, 0x00	; 0
    8b06:	02 c0       	rjmp	.+4      	; 0x8b0c <vfprintf+0x362>
    8b08:	88 e5       	ldi	r24, 0x58	; 88
    8b0a:	90 e0       	ldi	r25, 0x00	; 0
    8b0c:	b6 01       	movw	r22, r12
    8b0e:	0c c0       	rjmp	.+24     	; 0x8b28 <vfprintf+0x37e>
    8b10:	8a 2d       	mov	r24, r10
    8b12:	86 78       	andi	r24, 0x86	; 134
    8b14:	51 f0       	breq	.+20     	; 0x8b2a <vfprintf+0x380>
    8b16:	a1 fe       	sbrs	r10, 1
    8b18:	02 c0       	rjmp	.+4      	; 0x8b1e <vfprintf+0x374>
    8b1a:	8b e2       	ldi	r24, 0x2B	; 43
    8b1c:	01 c0       	rjmp	.+2      	; 0x8b20 <vfprintf+0x376>
    8b1e:	80 e2       	ldi	r24, 0x20	; 32
    8b20:	a7 fc       	sbrc	r10, 7
    8b22:	8d e2       	ldi	r24, 0x2D	; 45
    8b24:	b6 01       	movw	r22, r12
    8b26:	90 e0       	ldi	r25, 0x00	; 0
    8b28:	8f d1       	rcall	.+798    	; 0x8e48 <fputc>
    8b2a:	89 14       	cp	r8, r9
    8b2c:	30 f4       	brcc	.+12     	; 0x8b3a <vfprintf+0x390>
    8b2e:	b6 01       	movw	r22, r12
    8b30:	80 e3       	ldi	r24, 0x30	; 48
    8b32:	90 e0       	ldi	r25, 0x00	; 0
    8b34:	89 d1       	rcall	.+786    	; 0x8e48 <fputc>
    8b36:	9a 94       	dec	r9
    8b38:	f8 cf       	rjmp	.-16     	; 0x8b2a <vfprintf+0x380>
    8b3a:	8a 94       	dec	r8
    8b3c:	f3 01       	movw	r30, r6
    8b3e:	e8 0d       	add	r30, r8
    8b40:	f1 1d       	adc	r31, r1
    8b42:	80 81       	ld	r24, Z
    8b44:	b6 01       	movw	r22, r12
    8b46:	90 e0       	ldi	r25, 0x00	; 0
    8b48:	7f d1       	rcall	.+766    	; 0x8e48 <fputc>
    8b4a:	81 10       	cpse	r8, r1
    8b4c:	f6 cf       	rjmp	.-20     	; 0x8b3a <vfprintf+0x390>
    8b4e:	22 20       	and	r2, r2
    8b50:	09 f4       	brne	.+2      	; 0x8b54 <vfprintf+0x3aa>
    8b52:	4e ce       	rjmp	.-868    	; 0x87f0 <vfprintf+0x46>
    8b54:	b6 01       	movw	r22, r12
    8b56:	80 e2       	ldi	r24, 0x20	; 32
    8b58:	90 e0       	ldi	r25, 0x00	; 0
    8b5a:	76 d1       	rcall	.+748    	; 0x8e48 <fputc>
    8b5c:	2a 94       	dec	r2
    8b5e:	f7 cf       	rjmp	.-18     	; 0x8b4e <vfprintf+0x3a4>
    8b60:	f6 01       	movw	r30, r12
    8b62:	86 81       	ldd	r24, Z+6	; 0x06
    8b64:	97 81       	ldd	r25, Z+7	; 0x07
    8b66:	02 c0       	rjmp	.+4      	; 0x8b6c <vfprintf+0x3c2>
    8b68:	8f ef       	ldi	r24, 0xFF	; 255
    8b6a:	9f ef       	ldi	r25, 0xFF	; 255
    8b6c:	2b 96       	adiw	r28, 0x0b	; 11
    8b6e:	cd bf       	out	0x3d, r28	; 61
    8b70:	de bf       	out	0x3e, r29	; 62
    8b72:	df 91       	pop	r29
    8b74:	cf 91       	pop	r28
    8b76:	1f 91       	pop	r17
    8b78:	0f 91       	pop	r16
    8b7a:	ff 90       	pop	r15
    8b7c:	ef 90       	pop	r14
    8b7e:	df 90       	pop	r13
    8b80:	cf 90       	pop	r12
    8b82:	bf 90       	pop	r11
    8b84:	af 90       	pop	r10
    8b86:	9f 90       	pop	r9
    8b88:	8f 90       	pop	r8
    8b8a:	7f 90       	pop	r7
    8b8c:	6f 90       	pop	r6
    8b8e:	5f 90       	pop	r5
    8b90:	4f 90       	pop	r4
    8b92:	3f 90       	pop	r3
    8b94:	2f 90       	pop	r2
    8b96:	08 95       	ret

00008b98 <calloc>:
    8b98:	0f 93       	push	r16
    8b9a:	1f 93       	push	r17
    8b9c:	cf 93       	push	r28
    8b9e:	df 93       	push	r29
    8ba0:	86 9f       	mul	r24, r22
    8ba2:	80 01       	movw	r16, r0
    8ba4:	87 9f       	mul	r24, r23
    8ba6:	10 0d       	add	r17, r0
    8ba8:	96 9f       	mul	r25, r22
    8baa:	10 0d       	add	r17, r0
    8bac:	11 24       	eor	r1, r1
    8bae:	c8 01       	movw	r24, r16
    8bb0:	0d d0       	rcall	.+26     	; 0x8bcc <malloc>
    8bb2:	ec 01       	movw	r28, r24
    8bb4:	00 97       	sbiw	r24, 0x00	; 0
    8bb6:	21 f0       	breq	.+8      	; 0x8bc0 <calloc+0x28>
    8bb8:	a8 01       	movw	r20, r16
    8bba:	60 e0       	ldi	r22, 0x00	; 0
    8bbc:	70 e0       	ldi	r23, 0x00	; 0
    8bbe:	32 d1       	rcall	.+612    	; 0x8e24 <memset>
    8bc0:	ce 01       	movw	r24, r28
    8bc2:	df 91       	pop	r29
    8bc4:	cf 91       	pop	r28
    8bc6:	1f 91       	pop	r17
    8bc8:	0f 91       	pop	r16
    8bca:	08 95       	ret

00008bcc <malloc>:
    8bcc:	0f 93       	push	r16
    8bce:	1f 93       	push	r17
    8bd0:	cf 93       	push	r28
    8bd2:	df 93       	push	r29
    8bd4:	82 30       	cpi	r24, 0x02	; 2
    8bd6:	91 05       	cpc	r25, r1
    8bd8:	10 f4       	brcc	.+4      	; 0x8bde <malloc+0x12>
    8bda:	82 e0       	ldi	r24, 0x02	; 2
    8bdc:	90 e0       	ldi	r25, 0x00	; 0
    8bde:	e0 91 a3 28 	lds	r30, 0x28A3	; 0x8028a3 <__flp>
    8be2:	f0 91 a4 28 	lds	r31, 0x28A4	; 0x8028a4 <__flp+0x1>
    8be6:	20 e0       	ldi	r18, 0x00	; 0
    8be8:	30 e0       	ldi	r19, 0x00	; 0
    8bea:	a0 e0       	ldi	r26, 0x00	; 0
    8bec:	b0 e0       	ldi	r27, 0x00	; 0
    8bee:	30 97       	sbiw	r30, 0x00	; 0
    8bf0:	19 f1       	breq	.+70     	; 0x8c38 <malloc+0x6c>
    8bf2:	40 81       	ld	r20, Z
    8bf4:	51 81       	ldd	r21, Z+1	; 0x01
    8bf6:	02 81       	ldd	r16, Z+2	; 0x02
    8bf8:	13 81       	ldd	r17, Z+3	; 0x03
    8bfa:	48 17       	cp	r20, r24
    8bfc:	59 07       	cpc	r21, r25
    8bfe:	c8 f0       	brcs	.+50     	; 0x8c32 <malloc+0x66>
    8c00:	84 17       	cp	r24, r20
    8c02:	95 07       	cpc	r25, r21
    8c04:	69 f4       	brne	.+26     	; 0x8c20 <malloc+0x54>
    8c06:	10 97       	sbiw	r26, 0x00	; 0
    8c08:	31 f0       	breq	.+12     	; 0x8c16 <malloc+0x4a>
    8c0a:	12 96       	adiw	r26, 0x02	; 2
    8c0c:	0c 93       	st	X, r16
    8c0e:	12 97       	sbiw	r26, 0x02	; 2
    8c10:	13 96       	adiw	r26, 0x03	; 3
    8c12:	1c 93       	st	X, r17
    8c14:	27 c0       	rjmp	.+78     	; 0x8c64 <malloc+0x98>
    8c16:	00 93 a3 28 	sts	0x28A3, r16	; 0x8028a3 <__flp>
    8c1a:	10 93 a4 28 	sts	0x28A4, r17	; 0x8028a4 <__flp+0x1>
    8c1e:	22 c0       	rjmp	.+68     	; 0x8c64 <malloc+0x98>
    8c20:	21 15       	cp	r18, r1
    8c22:	31 05       	cpc	r19, r1
    8c24:	19 f0       	breq	.+6      	; 0x8c2c <malloc+0x60>
    8c26:	42 17       	cp	r20, r18
    8c28:	53 07       	cpc	r21, r19
    8c2a:	18 f4       	brcc	.+6      	; 0x8c32 <malloc+0x66>
    8c2c:	9a 01       	movw	r18, r20
    8c2e:	bd 01       	movw	r22, r26
    8c30:	ef 01       	movw	r28, r30
    8c32:	df 01       	movw	r26, r30
    8c34:	f8 01       	movw	r30, r16
    8c36:	db cf       	rjmp	.-74     	; 0x8bee <malloc+0x22>
    8c38:	21 15       	cp	r18, r1
    8c3a:	31 05       	cpc	r19, r1
    8c3c:	f9 f0       	breq	.+62     	; 0x8c7c <malloc+0xb0>
    8c3e:	28 1b       	sub	r18, r24
    8c40:	39 0b       	sbc	r19, r25
    8c42:	24 30       	cpi	r18, 0x04	; 4
    8c44:	31 05       	cpc	r19, r1
    8c46:	80 f4       	brcc	.+32     	; 0x8c68 <malloc+0x9c>
    8c48:	8a 81       	ldd	r24, Y+2	; 0x02
    8c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    8c4c:	61 15       	cp	r22, r1
    8c4e:	71 05       	cpc	r23, r1
    8c50:	21 f0       	breq	.+8      	; 0x8c5a <malloc+0x8e>
    8c52:	fb 01       	movw	r30, r22
    8c54:	82 83       	std	Z+2, r24	; 0x02
    8c56:	93 83       	std	Z+3, r25	; 0x03
    8c58:	04 c0       	rjmp	.+8      	; 0x8c62 <malloc+0x96>
    8c5a:	80 93 a3 28 	sts	0x28A3, r24	; 0x8028a3 <__flp>
    8c5e:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <__flp+0x1>
    8c62:	fe 01       	movw	r30, r28
    8c64:	32 96       	adiw	r30, 0x02	; 2
    8c66:	44 c0       	rjmp	.+136    	; 0x8cf0 <malloc+0x124>
    8c68:	fe 01       	movw	r30, r28
    8c6a:	e2 0f       	add	r30, r18
    8c6c:	f3 1f       	adc	r31, r19
    8c6e:	81 93       	st	Z+, r24
    8c70:	91 93       	st	Z+, r25
    8c72:	22 50       	subi	r18, 0x02	; 2
    8c74:	31 09       	sbc	r19, r1
    8c76:	28 83       	st	Y, r18
    8c78:	39 83       	std	Y+1, r19	; 0x01
    8c7a:	3a c0       	rjmp	.+116    	; 0x8cf0 <malloc+0x124>
    8c7c:	20 91 a1 28 	lds	r18, 0x28A1	; 0x8028a1 <__brkval>
    8c80:	30 91 a2 28 	lds	r19, 0x28A2	; 0x8028a2 <__brkval+0x1>
    8c84:	23 2b       	or	r18, r19
    8c86:	41 f4       	brne	.+16     	; 0x8c98 <malloc+0xcc>
    8c88:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    8c8c:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    8c90:	20 93 a1 28 	sts	0x28A1, r18	; 0x8028a1 <__brkval>
    8c94:	30 93 a2 28 	sts	0x28A2, r19	; 0x8028a2 <__brkval+0x1>
    8c98:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    8c9c:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    8ca0:	21 15       	cp	r18, r1
    8ca2:	31 05       	cpc	r19, r1
    8ca4:	41 f4       	brne	.+16     	; 0x8cb6 <malloc+0xea>
    8ca6:	2d b7       	in	r18, 0x3d	; 61
    8ca8:	3e b7       	in	r19, 0x3e	; 62
    8caa:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    8cae:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    8cb2:	24 1b       	sub	r18, r20
    8cb4:	35 0b       	sbc	r19, r21
    8cb6:	e0 91 a1 28 	lds	r30, 0x28A1	; 0x8028a1 <__brkval>
    8cba:	f0 91 a2 28 	lds	r31, 0x28A2	; 0x8028a2 <__brkval+0x1>
    8cbe:	e2 17       	cp	r30, r18
    8cc0:	f3 07       	cpc	r31, r19
    8cc2:	a0 f4       	brcc	.+40     	; 0x8cec <malloc+0x120>
    8cc4:	2e 1b       	sub	r18, r30
    8cc6:	3f 0b       	sbc	r19, r31
    8cc8:	28 17       	cp	r18, r24
    8cca:	39 07       	cpc	r19, r25
    8ccc:	78 f0       	brcs	.+30     	; 0x8cec <malloc+0x120>
    8cce:	ac 01       	movw	r20, r24
    8cd0:	4e 5f       	subi	r20, 0xFE	; 254
    8cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    8cd4:	24 17       	cp	r18, r20
    8cd6:	35 07       	cpc	r19, r21
    8cd8:	48 f0       	brcs	.+18     	; 0x8cec <malloc+0x120>
    8cda:	4e 0f       	add	r20, r30
    8cdc:	5f 1f       	adc	r21, r31
    8cde:	40 93 a1 28 	sts	0x28A1, r20	; 0x8028a1 <__brkval>
    8ce2:	50 93 a2 28 	sts	0x28A2, r21	; 0x8028a2 <__brkval+0x1>
    8ce6:	81 93       	st	Z+, r24
    8ce8:	91 93       	st	Z+, r25
    8cea:	02 c0       	rjmp	.+4      	; 0x8cf0 <malloc+0x124>
    8cec:	e0 e0       	ldi	r30, 0x00	; 0
    8cee:	f0 e0       	ldi	r31, 0x00	; 0
    8cf0:	cf 01       	movw	r24, r30
    8cf2:	df 91       	pop	r29
    8cf4:	cf 91       	pop	r28
    8cf6:	1f 91       	pop	r17
    8cf8:	0f 91       	pop	r16
    8cfa:	08 95       	ret

00008cfc <free>:
    8cfc:	cf 93       	push	r28
    8cfe:	df 93       	push	r29
    8d00:	00 97       	sbiw	r24, 0x00	; 0
    8d02:	09 f4       	brne	.+2      	; 0x8d06 <free+0xa>
    8d04:	81 c0       	rjmp	.+258    	; 0x8e08 <free+0x10c>
    8d06:	fc 01       	movw	r30, r24
    8d08:	32 97       	sbiw	r30, 0x02	; 2
    8d0a:	12 82       	std	Z+2, r1	; 0x02
    8d0c:	13 82       	std	Z+3, r1	; 0x03
    8d0e:	a0 91 a3 28 	lds	r26, 0x28A3	; 0x8028a3 <__flp>
    8d12:	b0 91 a4 28 	lds	r27, 0x28A4	; 0x8028a4 <__flp+0x1>
    8d16:	10 97       	sbiw	r26, 0x00	; 0
    8d18:	81 f4       	brne	.+32     	; 0x8d3a <free+0x3e>
    8d1a:	20 81       	ld	r18, Z
    8d1c:	31 81       	ldd	r19, Z+1	; 0x01
    8d1e:	82 0f       	add	r24, r18
    8d20:	93 1f       	adc	r25, r19
    8d22:	20 91 a1 28 	lds	r18, 0x28A1	; 0x8028a1 <__brkval>
    8d26:	30 91 a2 28 	lds	r19, 0x28A2	; 0x8028a2 <__brkval+0x1>
    8d2a:	28 17       	cp	r18, r24
    8d2c:	39 07       	cpc	r19, r25
    8d2e:	51 f5       	brne	.+84     	; 0x8d84 <free+0x88>
    8d30:	e0 93 a1 28 	sts	0x28A1, r30	; 0x8028a1 <__brkval>
    8d34:	f0 93 a2 28 	sts	0x28A2, r31	; 0x8028a2 <__brkval+0x1>
    8d38:	67 c0       	rjmp	.+206    	; 0x8e08 <free+0x10c>
    8d3a:	ed 01       	movw	r28, r26
    8d3c:	20 e0       	ldi	r18, 0x00	; 0
    8d3e:	30 e0       	ldi	r19, 0x00	; 0
    8d40:	ce 17       	cp	r28, r30
    8d42:	df 07       	cpc	r29, r31
    8d44:	40 f4       	brcc	.+16     	; 0x8d56 <free+0x5a>
    8d46:	4a 81       	ldd	r20, Y+2	; 0x02
    8d48:	5b 81       	ldd	r21, Y+3	; 0x03
    8d4a:	9e 01       	movw	r18, r28
    8d4c:	41 15       	cp	r20, r1
    8d4e:	51 05       	cpc	r21, r1
    8d50:	f1 f0       	breq	.+60     	; 0x8d8e <free+0x92>
    8d52:	ea 01       	movw	r28, r20
    8d54:	f5 cf       	rjmp	.-22     	; 0x8d40 <free+0x44>
    8d56:	c2 83       	std	Z+2, r28	; 0x02
    8d58:	d3 83       	std	Z+3, r29	; 0x03
    8d5a:	40 81       	ld	r20, Z
    8d5c:	51 81       	ldd	r21, Z+1	; 0x01
    8d5e:	84 0f       	add	r24, r20
    8d60:	95 1f       	adc	r25, r21
    8d62:	c8 17       	cp	r28, r24
    8d64:	d9 07       	cpc	r29, r25
    8d66:	59 f4       	brne	.+22     	; 0x8d7e <free+0x82>
    8d68:	88 81       	ld	r24, Y
    8d6a:	99 81       	ldd	r25, Y+1	; 0x01
    8d6c:	84 0f       	add	r24, r20
    8d6e:	95 1f       	adc	r25, r21
    8d70:	02 96       	adiw	r24, 0x02	; 2
    8d72:	80 83       	st	Z, r24
    8d74:	91 83       	std	Z+1, r25	; 0x01
    8d76:	8a 81       	ldd	r24, Y+2	; 0x02
    8d78:	9b 81       	ldd	r25, Y+3	; 0x03
    8d7a:	82 83       	std	Z+2, r24	; 0x02
    8d7c:	93 83       	std	Z+3, r25	; 0x03
    8d7e:	21 15       	cp	r18, r1
    8d80:	31 05       	cpc	r19, r1
    8d82:	29 f4       	brne	.+10     	; 0x8d8e <free+0x92>
    8d84:	e0 93 a3 28 	sts	0x28A3, r30	; 0x8028a3 <__flp>
    8d88:	f0 93 a4 28 	sts	0x28A4, r31	; 0x8028a4 <__flp+0x1>
    8d8c:	3d c0       	rjmp	.+122    	; 0x8e08 <free+0x10c>
    8d8e:	e9 01       	movw	r28, r18
    8d90:	ea 83       	std	Y+2, r30	; 0x02
    8d92:	fb 83       	std	Y+3, r31	; 0x03
    8d94:	49 91       	ld	r20, Y+
    8d96:	59 91       	ld	r21, Y+
    8d98:	c4 0f       	add	r28, r20
    8d9a:	d5 1f       	adc	r29, r21
    8d9c:	ec 17       	cp	r30, r28
    8d9e:	fd 07       	cpc	r31, r29
    8da0:	61 f4       	brne	.+24     	; 0x8dba <free+0xbe>
    8da2:	80 81       	ld	r24, Z
    8da4:	91 81       	ldd	r25, Z+1	; 0x01
    8da6:	84 0f       	add	r24, r20
    8da8:	95 1f       	adc	r25, r21
    8daa:	02 96       	adiw	r24, 0x02	; 2
    8dac:	e9 01       	movw	r28, r18
    8dae:	88 83       	st	Y, r24
    8db0:	99 83       	std	Y+1, r25	; 0x01
    8db2:	82 81       	ldd	r24, Z+2	; 0x02
    8db4:	93 81       	ldd	r25, Z+3	; 0x03
    8db6:	8a 83       	std	Y+2, r24	; 0x02
    8db8:	9b 83       	std	Y+3, r25	; 0x03
    8dba:	e0 e0       	ldi	r30, 0x00	; 0
    8dbc:	f0 e0       	ldi	r31, 0x00	; 0
    8dbe:	12 96       	adiw	r26, 0x02	; 2
    8dc0:	8d 91       	ld	r24, X+
    8dc2:	9c 91       	ld	r25, X
    8dc4:	13 97       	sbiw	r26, 0x03	; 3
    8dc6:	00 97       	sbiw	r24, 0x00	; 0
    8dc8:	19 f0       	breq	.+6      	; 0x8dd0 <free+0xd4>
    8dca:	fd 01       	movw	r30, r26
    8dcc:	dc 01       	movw	r26, r24
    8dce:	f7 cf       	rjmp	.-18     	; 0x8dbe <free+0xc2>
    8dd0:	8d 91       	ld	r24, X+
    8dd2:	9c 91       	ld	r25, X
    8dd4:	11 97       	sbiw	r26, 0x01	; 1
    8dd6:	9d 01       	movw	r18, r26
    8dd8:	2e 5f       	subi	r18, 0xFE	; 254
    8dda:	3f 4f       	sbci	r19, 0xFF	; 255
    8ddc:	82 0f       	add	r24, r18
    8dde:	93 1f       	adc	r25, r19
    8de0:	20 91 a1 28 	lds	r18, 0x28A1	; 0x8028a1 <__brkval>
    8de4:	30 91 a2 28 	lds	r19, 0x28A2	; 0x8028a2 <__brkval+0x1>
    8de8:	28 17       	cp	r18, r24
    8dea:	39 07       	cpc	r19, r25
    8dec:	69 f4       	brne	.+26     	; 0x8e08 <free+0x10c>
    8dee:	30 97       	sbiw	r30, 0x00	; 0
    8df0:	29 f4       	brne	.+10     	; 0x8dfc <free+0x100>
    8df2:	10 92 a3 28 	sts	0x28A3, r1	; 0x8028a3 <__flp>
    8df6:	10 92 a4 28 	sts	0x28A4, r1	; 0x8028a4 <__flp+0x1>
    8dfa:	02 c0       	rjmp	.+4      	; 0x8e00 <free+0x104>
    8dfc:	12 82       	std	Z+2, r1	; 0x02
    8dfe:	13 82       	std	Z+3, r1	; 0x03
    8e00:	a0 93 a1 28 	sts	0x28A1, r26	; 0x8028a1 <__brkval>
    8e04:	b0 93 a2 28 	sts	0x28A2, r27	; 0x8028a2 <__brkval+0x1>
    8e08:	df 91       	pop	r29
    8e0a:	cf 91       	pop	r28
    8e0c:	08 95       	ret

00008e0e <strnlen_P>:
    8e0e:	fc 01       	movw	r30, r24
    8e10:	05 90       	lpm	r0, Z+
    8e12:	61 50       	subi	r22, 0x01	; 1
    8e14:	70 40       	sbci	r23, 0x00	; 0
    8e16:	01 10       	cpse	r0, r1
    8e18:	d8 f7       	brcc	.-10     	; 0x8e10 <strnlen_P+0x2>
    8e1a:	80 95       	com	r24
    8e1c:	90 95       	com	r25
    8e1e:	8e 0f       	add	r24, r30
    8e20:	9f 1f       	adc	r25, r31
    8e22:	08 95       	ret

00008e24 <memset>:
    8e24:	dc 01       	movw	r26, r24
    8e26:	01 c0       	rjmp	.+2      	; 0x8e2a <memset+0x6>
    8e28:	6d 93       	st	X+, r22
    8e2a:	41 50       	subi	r20, 0x01	; 1
    8e2c:	50 40       	sbci	r21, 0x00	; 0
    8e2e:	e0 f7       	brcc	.-8      	; 0x8e28 <memset+0x4>
    8e30:	08 95       	ret

00008e32 <strnlen>:
    8e32:	fc 01       	movw	r30, r24
    8e34:	61 50       	subi	r22, 0x01	; 1
    8e36:	70 40       	sbci	r23, 0x00	; 0
    8e38:	01 90       	ld	r0, Z+
    8e3a:	01 10       	cpse	r0, r1
    8e3c:	d8 f7       	brcc	.-10     	; 0x8e34 <strnlen+0x2>
    8e3e:	80 95       	com	r24
    8e40:	90 95       	com	r25
    8e42:	8e 0f       	add	r24, r30
    8e44:	9f 1f       	adc	r25, r31
    8e46:	08 95       	ret

00008e48 <fputc>:
    8e48:	0f 93       	push	r16
    8e4a:	1f 93       	push	r17
    8e4c:	cf 93       	push	r28
    8e4e:	df 93       	push	r29
    8e50:	fb 01       	movw	r30, r22
    8e52:	23 81       	ldd	r18, Z+3	; 0x03
    8e54:	21 fd       	sbrc	r18, 1
    8e56:	03 c0       	rjmp	.+6      	; 0x8e5e <fputc+0x16>
    8e58:	8f ef       	ldi	r24, 0xFF	; 255
    8e5a:	9f ef       	ldi	r25, 0xFF	; 255
    8e5c:	2c c0       	rjmp	.+88     	; 0x8eb6 <fputc+0x6e>
    8e5e:	22 ff       	sbrs	r18, 2
    8e60:	16 c0       	rjmp	.+44     	; 0x8e8e <fputc+0x46>
    8e62:	46 81       	ldd	r20, Z+6	; 0x06
    8e64:	57 81       	ldd	r21, Z+7	; 0x07
    8e66:	24 81       	ldd	r18, Z+4	; 0x04
    8e68:	35 81       	ldd	r19, Z+5	; 0x05
    8e6a:	42 17       	cp	r20, r18
    8e6c:	53 07       	cpc	r21, r19
    8e6e:	44 f4       	brge	.+16     	; 0x8e80 <fputc+0x38>
    8e70:	a0 81       	ld	r26, Z
    8e72:	b1 81       	ldd	r27, Z+1	; 0x01
    8e74:	9d 01       	movw	r18, r26
    8e76:	2f 5f       	subi	r18, 0xFF	; 255
    8e78:	3f 4f       	sbci	r19, 0xFF	; 255
    8e7a:	20 83       	st	Z, r18
    8e7c:	31 83       	std	Z+1, r19	; 0x01
    8e7e:	8c 93       	st	X, r24
    8e80:	26 81       	ldd	r18, Z+6	; 0x06
    8e82:	37 81       	ldd	r19, Z+7	; 0x07
    8e84:	2f 5f       	subi	r18, 0xFF	; 255
    8e86:	3f 4f       	sbci	r19, 0xFF	; 255
    8e88:	26 83       	std	Z+6, r18	; 0x06
    8e8a:	37 83       	std	Z+7, r19	; 0x07
    8e8c:	14 c0       	rjmp	.+40     	; 0x8eb6 <fputc+0x6e>
    8e8e:	8b 01       	movw	r16, r22
    8e90:	ec 01       	movw	r28, r24
    8e92:	fb 01       	movw	r30, r22
    8e94:	00 84       	ldd	r0, Z+8	; 0x08
    8e96:	f1 85       	ldd	r31, Z+9	; 0x09
    8e98:	e0 2d       	mov	r30, r0
    8e9a:	19 95       	eicall
    8e9c:	89 2b       	or	r24, r25
    8e9e:	e1 f6       	brne	.-72     	; 0x8e58 <fputc+0x10>
    8ea0:	d8 01       	movw	r26, r16
    8ea2:	16 96       	adiw	r26, 0x06	; 6
    8ea4:	8d 91       	ld	r24, X+
    8ea6:	9c 91       	ld	r25, X
    8ea8:	17 97       	sbiw	r26, 0x07	; 7
    8eaa:	01 96       	adiw	r24, 0x01	; 1
    8eac:	16 96       	adiw	r26, 0x06	; 6
    8eae:	8d 93       	st	X+, r24
    8eb0:	9c 93       	st	X, r25
    8eb2:	17 97       	sbiw	r26, 0x07	; 7
    8eb4:	ce 01       	movw	r24, r28
    8eb6:	df 91       	pop	r29
    8eb8:	cf 91       	pop	r28
    8eba:	1f 91       	pop	r17
    8ebc:	0f 91       	pop	r16
    8ebe:	08 95       	ret

00008ec0 <__ultoa_invert>:
    8ec0:	fa 01       	movw	r30, r20
    8ec2:	aa 27       	eor	r26, r26
    8ec4:	28 30       	cpi	r18, 0x08	; 8
    8ec6:	51 f1       	breq	.+84     	; 0x8f1c <__ultoa_invert+0x5c>
    8ec8:	20 31       	cpi	r18, 0x10	; 16
    8eca:	81 f1       	breq	.+96     	; 0x8f2c <__ultoa_invert+0x6c>
    8ecc:	e8 94       	clt
    8ece:	6f 93       	push	r22
    8ed0:	6e 7f       	andi	r22, 0xFE	; 254
    8ed2:	6e 5f       	subi	r22, 0xFE	; 254
    8ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    8ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    8ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    8eda:	af 4f       	sbci	r26, 0xFF	; 255
    8edc:	b1 e0       	ldi	r27, 0x01	; 1
    8ede:	3e d0       	rcall	.+124    	; 0x8f5c <__ultoa_invert+0x9c>
    8ee0:	b4 e0       	ldi	r27, 0x04	; 4
    8ee2:	3c d0       	rcall	.+120    	; 0x8f5c <__ultoa_invert+0x9c>
    8ee4:	67 0f       	add	r22, r23
    8ee6:	78 1f       	adc	r23, r24
    8ee8:	89 1f       	adc	r24, r25
    8eea:	9a 1f       	adc	r25, r26
    8eec:	a1 1d       	adc	r26, r1
    8eee:	68 0f       	add	r22, r24
    8ef0:	79 1f       	adc	r23, r25
    8ef2:	8a 1f       	adc	r24, r26
    8ef4:	91 1d       	adc	r25, r1
    8ef6:	a1 1d       	adc	r26, r1
    8ef8:	6a 0f       	add	r22, r26
    8efa:	71 1d       	adc	r23, r1
    8efc:	81 1d       	adc	r24, r1
    8efe:	91 1d       	adc	r25, r1
    8f00:	a1 1d       	adc	r26, r1
    8f02:	20 d0       	rcall	.+64     	; 0x8f44 <__ultoa_invert+0x84>
    8f04:	09 f4       	brne	.+2      	; 0x8f08 <__ultoa_invert+0x48>
    8f06:	68 94       	set
    8f08:	3f 91       	pop	r19
    8f0a:	2a e0       	ldi	r18, 0x0A	; 10
    8f0c:	26 9f       	mul	r18, r22
    8f0e:	11 24       	eor	r1, r1
    8f10:	30 19       	sub	r19, r0
    8f12:	30 5d       	subi	r19, 0xD0	; 208
    8f14:	31 93       	st	Z+, r19
    8f16:	de f6       	brtc	.-74     	; 0x8ece <__ultoa_invert+0xe>
    8f18:	cf 01       	movw	r24, r30
    8f1a:	08 95       	ret
    8f1c:	46 2f       	mov	r20, r22
    8f1e:	47 70       	andi	r20, 0x07	; 7
    8f20:	40 5d       	subi	r20, 0xD0	; 208
    8f22:	41 93       	st	Z+, r20
    8f24:	b3 e0       	ldi	r27, 0x03	; 3
    8f26:	0f d0       	rcall	.+30     	; 0x8f46 <__ultoa_invert+0x86>
    8f28:	c9 f7       	brne	.-14     	; 0x8f1c <__ultoa_invert+0x5c>
    8f2a:	f6 cf       	rjmp	.-20     	; 0x8f18 <__ultoa_invert+0x58>
    8f2c:	46 2f       	mov	r20, r22
    8f2e:	4f 70       	andi	r20, 0x0F	; 15
    8f30:	40 5d       	subi	r20, 0xD0	; 208
    8f32:	4a 33       	cpi	r20, 0x3A	; 58
    8f34:	18 f0       	brcs	.+6      	; 0x8f3c <__ultoa_invert+0x7c>
    8f36:	49 5d       	subi	r20, 0xD9	; 217
    8f38:	31 fd       	sbrc	r19, 1
    8f3a:	40 52       	subi	r20, 0x20	; 32
    8f3c:	41 93       	st	Z+, r20
    8f3e:	02 d0       	rcall	.+4      	; 0x8f44 <__ultoa_invert+0x84>
    8f40:	a9 f7       	brne	.-22     	; 0x8f2c <__ultoa_invert+0x6c>
    8f42:	ea cf       	rjmp	.-44     	; 0x8f18 <__ultoa_invert+0x58>
    8f44:	b4 e0       	ldi	r27, 0x04	; 4
    8f46:	a6 95       	lsr	r26
    8f48:	97 95       	ror	r25
    8f4a:	87 95       	ror	r24
    8f4c:	77 95       	ror	r23
    8f4e:	67 95       	ror	r22
    8f50:	ba 95       	dec	r27
    8f52:	c9 f7       	brne	.-14     	; 0x8f46 <__ultoa_invert+0x86>
    8f54:	00 97       	sbiw	r24, 0x00	; 0
    8f56:	61 05       	cpc	r22, r1
    8f58:	71 05       	cpc	r23, r1
    8f5a:	08 95       	ret
    8f5c:	9b 01       	movw	r18, r22
    8f5e:	ac 01       	movw	r20, r24
    8f60:	0a 2e       	mov	r0, r26
    8f62:	06 94       	lsr	r0
    8f64:	57 95       	ror	r21
    8f66:	47 95       	ror	r20
    8f68:	37 95       	ror	r19
    8f6a:	27 95       	ror	r18
    8f6c:	ba 95       	dec	r27
    8f6e:	c9 f7       	brne	.-14     	; 0x8f62 <__ultoa_invert+0xa2>
    8f70:	62 0f       	add	r22, r18
    8f72:	73 1f       	adc	r23, r19
    8f74:	84 1f       	adc	r24, r20
    8f76:	95 1f       	adc	r25, r21
    8f78:	a0 1d       	adc	r26, r0
    8f7a:	08 95       	ret

00008f7c <_exit>:
    8f7c:	f8 94       	cli

00008f7e <__stop_program>:
    8f7e:	ff cf       	rjmp	.-2      	; 0x8f7e <__stop_program>
