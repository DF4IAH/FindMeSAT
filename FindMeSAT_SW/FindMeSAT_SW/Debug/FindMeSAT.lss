
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00802000  00002136  000021ca  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027c  008020cc  008020cc  00002298  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000022c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  00002310  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009f38  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000045e1  00000000  00000000  0000c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000055b8  00000000  00000000  00010c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b60  00000000  00000000  00016254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036554  00000000  00000000  00016db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f94  00000000  00000000  0004d308  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  000502a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b5c7  00000000  00000000  00050758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	22 c1       	rjmp	.+580    	; 0x24a <__bad_interrupt>
       6:	00 00       	nop
       8:	20 c1       	rjmp	.+576    	; 0x24a <__bad_interrupt>
       a:	00 00       	nop
       c:	1e c1       	rjmp	.+572    	; 0x24a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c1       	rjmp	.+568    	; 0x24a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c1       	rjmp	.+564    	; 0x24a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c1       	rjmp	.+560    	; 0x24a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c1       	rjmp	.+556    	; 0x24a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c1       	rjmp	.+552    	; 0x24a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c1       	rjmp	.+548    	; 0x24a <__bad_interrupt>
      26:	00 00       	nop
      28:	10 c1       	rjmp	.+544    	; 0x24a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0e c1       	rjmp	.+540    	; 0x24a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c c1       	rjmp	.+536    	; 0x24a <__bad_interrupt>
      32:	00 00       	nop
      34:	0a c1       	rjmp	.+532    	; 0x24a <__bad_interrupt>
      36:	00 00       	nop
      38:	08 c1       	rjmp	.+528    	; 0x24a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	06 c1       	rjmp	.+524    	; 0x24a <__bad_interrupt>
      3e:	00 00       	nop
      40:	04 c1       	rjmp	.+520    	; 0x24a <__bad_interrupt>
      42:	00 00       	nop
      44:	02 c1       	rjmp	.+516    	; 0x24a <__bad_interrupt>
      46:	00 00       	nop
      48:	00 c1       	rjmp	.+512    	; 0x24a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fe c0       	rjmp	.+508    	; 0x24a <__bad_interrupt>
      4e:	00 00       	nop
      50:	fc c0       	rjmp	.+504    	; 0x24a <__bad_interrupt>
      52:	00 00       	nop
      54:	fa c0       	rjmp	.+500    	; 0x24a <__bad_interrupt>
      56:	00 00       	nop
      58:	f8 c0       	rjmp	.+496    	; 0x24a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f6 c0       	rjmp	.+492    	; 0x24a <__bad_interrupt>
      5e:	00 00       	nop
      60:	f4 c0       	rjmp	.+488    	; 0x24a <__bad_interrupt>
      62:	00 00       	nop
      64:	f2 c0       	rjmp	.+484    	; 0x24a <__bad_interrupt>
      66:	00 00       	nop
      68:	f0 c0       	rjmp	.+480    	; 0x24a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ee c0       	rjmp	.+476    	; 0x24a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c0       	rjmp	.+472    	; 0x24a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c0       	rjmp	.+468    	; 0x24a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c0       	rjmp	.+464    	; 0x24a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c0       	rjmp	.+460    	; 0x24a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e4 c0       	rjmp	.+456    	; 0x24a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c0       	rjmp	.+452    	; 0x24a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c0       	rjmp	.+448    	; 0x24a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	de c0       	rjmp	.+444    	; 0x24a <__bad_interrupt>
      8e:	00 00       	nop
      90:	dc c0       	rjmp	.+440    	; 0x24a <__bad_interrupt>
      92:	00 00       	nop
      94:	da c0       	rjmp	.+436    	; 0x24a <__bad_interrupt>
      96:	00 00       	nop
      98:	d8 c0       	rjmp	.+432    	; 0x24a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d6 c0       	rjmp	.+428    	; 0x24a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d4 c0       	rjmp	.+424    	; 0x24a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d2 c0       	rjmp	.+420    	; 0x24a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d0 c0       	rjmp	.+416    	; 0x24a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ce c0       	rjmp	.+412    	; 0x24a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cc c0       	rjmp	.+408    	; 0x24a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ca c0       	rjmp	.+404    	; 0x24a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c8 c0       	rjmp	.+400    	; 0x24a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c6 c0       	rjmp	.+396    	; 0x24a <__bad_interrupt>
      be:	00 00       	nop
      c0:	c4 c0       	rjmp	.+392    	; 0x24a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c2 c0       	rjmp	.+388    	; 0x24a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c0 c0       	rjmp	.+384    	; 0x24a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	be c0       	rjmp	.+380    	; 0x24a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bc c0       	rjmp	.+376    	; 0x24a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ba c0       	rjmp	.+372    	; 0x24a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b8 c0       	rjmp	.+368    	; 0x24a <__bad_interrupt>
      da:	00 00       	nop
      dc:	b6 c0       	rjmp	.+364    	; 0x24a <__bad_interrupt>
      de:	00 00       	nop
      e0:	b4 c0       	rjmp	.+360    	; 0x24a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b2 c0       	rjmp	.+356    	; 0x24a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b0 c0       	rjmp	.+352    	; 0x24a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ae c0       	rjmp	.+348    	; 0x24a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ac c0       	rjmp	.+344    	; 0x24a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	aa c0       	rjmp	.+340    	; 0x24a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a8 c0       	rjmp	.+336    	; 0x24a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a6 c0       	rjmp	.+332    	; 0x24a <__bad_interrupt>
      fe:	00 00       	nop
     100:	a4 c0       	rjmp	.+328    	; 0x24a <__bad_interrupt>
     102:	00 00       	nop
     104:	a2 c0       	rjmp	.+324    	; 0x24a <__bad_interrupt>
     106:	00 00       	nop
     108:	a0 c0       	rjmp	.+320    	; 0x24a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9e c0       	rjmp	.+316    	; 0x24a <__bad_interrupt>
     10e:	00 00       	nop
     110:	9c c0       	rjmp	.+312    	; 0x24a <__bad_interrupt>
     112:	00 00       	nop
     114:	9a c0       	rjmp	.+308    	; 0x24a <__bad_interrupt>
     116:	00 00       	nop
     118:	98 c0       	rjmp	.+304    	; 0x24a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	96 c0       	rjmp	.+300    	; 0x24a <__bad_interrupt>
     11e:	00 00       	nop
     120:	94 c0       	rjmp	.+296    	; 0x24a <__bad_interrupt>
     122:	00 00       	nop
     124:	92 c0       	rjmp	.+292    	; 0x24a <__bad_interrupt>
     126:	00 00       	nop
     128:	90 c0       	rjmp	.+288    	; 0x24a <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8e c0       	rjmp	.+284    	; 0x24a <__bad_interrupt>
     12e:	00 00       	nop
     130:	8c c0       	rjmp	.+280    	; 0x24a <__bad_interrupt>
     132:	00 00       	nop
     134:	8a c0       	rjmp	.+276    	; 0x24a <__bad_interrupt>
     136:	00 00       	nop
     138:	88 c0       	rjmp	.+272    	; 0x24a <__bad_interrupt>
     13a:	00 00       	nop
     13c:	86 c0       	rjmp	.+268    	; 0x24a <__bad_interrupt>
     13e:	00 00       	nop
     140:	84 c0       	rjmp	.+264    	; 0x24a <__bad_interrupt>
     142:	00 00       	nop
     144:	82 c0       	rjmp	.+260    	; 0x24a <__bad_interrupt>
     146:	00 00       	nop
     148:	80 c0       	rjmp	.+256    	; 0x24a <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7e c0       	rjmp	.+252    	; 0x24a <__bad_interrupt>
     14e:	00 00       	nop
     150:	7c c0       	rjmp	.+248    	; 0x24a <__bad_interrupt>
     152:	00 00       	nop
     154:	7a c0       	rjmp	.+244    	; 0x24a <__bad_interrupt>
     156:	00 00       	nop
     158:	78 c0       	rjmp	.+240    	; 0x24a <__bad_interrupt>
     15a:	00 00       	nop
     15c:	76 c0       	rjmp	.+236    	; 0x24a <__bad_interrupt>
     15e:	00 00       	nop
     160:	74 c0       	rjmp	.+232    	; 0x24a <__bad_interrupt>
     162:	00 00       	nop
     164:	72 c0       	rjmp	.+228    	; 0x24a <__bad_interrupt>
     166:	00 00       	nop
     168:	70 c0       	rjmp	.+224    	; 0x24a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6e c0       	rjmp	.+220    	; 0x24a <__bad_interrupt>
     16e:	00 00       	nop
     170:	6c c0       	rjmp	.+216    	; 0x24a <__bad_interrupt>
     172:	00 00       	nop
     174:	6a c0       	rjmp	.+212    	; 0x24a <__bad_interrupt>
     176:	00 00       	nop
     178:	68 c0       	rjmp	.+208    	; 0x24a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	66 c0       	rjmp	.+204    	; 0x24a <__bad_interrupt>
     17e:	00 00       	nop
     180:	64 c0       	rjmp	.+200    	; 0x24a <__bad_interrupt>
     182:	00 00       	nop
     184:	62 c0       	rjmp	.+196    	; 0x24a <__bad_interrupt>
     186:	00 00       	nop
     188:	60 c0       	rjmp	.+192    	; 0x24a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5e c0       	rjmp	.+188    	; 0x24a <__bad_interrupt>
     18e:	00 00       	nop
     190:	5c c0       	rjmp	.+184    	; 0x24a <__bad_interrupt>
     192:	00 00       	nop
     194:	5a c0       	rjmp	.+180    	; 0x24a <__bad_interrupt>
     196:	00 00       	nop
     198:	58 c0       	rjmp	.+176    	; 0x24a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	56 c0       	rjmp	.+172    	; 0x24a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	54 c0       	rjmp	.+168    	; 0x24a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	52 c0       	rjmp	.+164    	; 0x24a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	50 c0       	rjmp	.+160    	; 0x24a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4e c0       	rjmp	.+156    	; 0x24a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4c c0       	rjmp	.+152    	; 0x24a <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4a c0       	rjmp	.+148    	; 0x24a <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	48 c0       	rjmp	.+144    	; 0x24a <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	46 c0       	rjmp	.+140    	; 0x24a <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	44 c0       	rjmp	.+136    	; 0x24a <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	42 c0       	rjmp	.+132    	; 0x24a <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	40 c0       	rjmp	.+128    	; 0x24a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3e c0       	rjmp	.+124    	; 0x24a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3c c0       	rjmp	.+120    	; 0x24a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3a c0       	rjmp	.+116    	; 0x24a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	38 c0       	rjmp	.+112    	; 0x24a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	36 c0       	rjmp	.+108    	; 0x24a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	34 c0       	rjmp	.+104    	; 0x24a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	32 c0       	rjmp	.+100    	; 0x24a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	30 c0       	rjmp	.+96     	; 0x24a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2e c0       	rjmp	.+92     	; 0x24a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2c c0       	rjmp	.+88     	; 0x24a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	3e c6       	rjmp	.+3196   	; 0xe72 <__vector_125>
     1f6:	00 00       	nop
     1f8:	f4 c6       	rjmp	.+3560   	; 0xfe2 <__vector_126>
     1fa:	00 00       	nop
     1fc:	25 02       	muls	r18, r21
     1fe:	28 02       	muls	r18, r24
     200:	2b 02       	muls	r18, r27
     202:	2e 02       	muls	r18, r30
     204:	31 02       	muls	r19, r17
     206:	34 02       	muls	r19, r20
     208:	37 02       	muls	r19, r23

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e5       	ldi	r29, 0x5F	; 95
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
     21a:	10 e2       	ldi	r17, 0x20	; 32
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	e6 e3       	ldi	r30, 0x36	; 54
     222:	f1 e2       	ldi	r31, 0x21	; 33
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	ac 3c       	cpi	r26, 0xCC	; 204
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
     234:	23 e2       	ldi	r18, 0x23	; 35
     236:	ac ec       	ldi	r26, 0xCC	; 204
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	a8 34       	cpi	r26, 0x48	; 72
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	d7 d7       	rcall	.+4014   	; 0x11f4 <main>
     246:	0c 94 99 10 	jmp	0x2132	; 0x2132 <_exit>

0000024a <__bad_interrupt>:
     24a:	da ce       	rjmp	.-588    	; 0x0 <__vectors>

0000024c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     24c:	08 95       	ret

0000024e <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	1f 92       	push	r1
     254:	1f 92       	push	r1
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	81 11       	cpse	r24, r1
     25c:	26 c0       	rjmp	.+76     	; 0x2aa <udd_sleep_mode+0x5c>
     25e:	90 91 f8 21 	lds	r25, 0x21F8	; 0x8021f8 <udd_b_idle>
     262:	99 23       	and	r25, r25
     264:	f9 f0       	breq	.+62     	; 0x2a4 <udd_sleep_mode+0x56>
     266:	90 91 43 23 	lds	r25, 0x2343	; 0x802343 <sleepmgr_locks+0x1>
     26a:	91 11       	cpse	r25, r1
     26c:	01 c0       	rjmp	.+2      	; 0x270 <udd_sleep_mode+0x22>
     26e:	ff cf       	rjmp	.-2      	; 0x26e <udd_sleep_mode+0x20>
     270:	9f b7       	in	r25, 0x3f	; 63
     272:	9a 83       	std	Y+2, r25	; 0x02
     274:	f8 94       	cli
     276:	2a 81       	ldd	r18, Y+2	; 0x02
     278:	e2 e4       	ldi	r30, 0x42	; 66
     27a:	f3 e2       	ldi	r31, 0x23	; 35
     27c:	91 81       	ldd	r25, Z+1	; 0x01
     27e:	91 50       	subi	r25, 0x01	; 1
     280:	91 83       	std	Z+1, r25	; 0x01
     282:	2f bf       	out	0x3f, r18	; 63
     284:	0f c0       	rjmp	.+30     	; 0x2a4 <udd_sleep_mode+0x56>
     286:	90 91 43 23 	lds	r25, 0x2343	; 0x802343 <sleepmgr_locks+0x1>
     28a:	9f 3f       	cpi	r25, 0xFF	; 255
     28c:	09 f4       	brne	.+2      	; 0x290 <udd_sleep_mode+0x42>
     28e:	ff cf       	rjmp	.-2      	; 0x28e <udd_sleep_mode+0x40>
     290:	9f b7       	in	r25, 0x3f	; 63
     292:	99 83       	std	Y+1, r25	; 0x01
     294:	f8 94       	cli
     296:	29 81       	ldd	r18, Y+1	; 0x01
     298:	e2 e4       	ldi	r30, 0x42	; 66
     29a:	f3 e2       	ldi	r31, 0x23	; 35
     29c:	91 81       	ldd	r25, Z+1	; 0x01
     29e:	9f 5f       	subi	r25, 0xFF	; 255
     2a0:	91 83       	std	Z+1, r25	; 0x01
     2a2:	2f bf       	out	0x3f, r18	; 63
     2a4:	80 93 f8 21 	sts	0x21F8, r24	; 0x8021f8 <udd_b_idle>
     2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <udd_sleep_mode+0x66>
     2aa:	90 91 f8 21 	lds	r25, 0x21F8	; 0x8021f8 <udd_b_idle>
     2ae:	99 23       	and	r25, r25
     2b0:	51 f3       	breq	.-44     	; 0x286 <udd_sleep_mode+0x38>
     2b2:	f8 cf       	rjmp	.-16     	; 0x2a4 <udd_sleep_mode+0x56>
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <udd_ctrl_init>:
     2be:	0f 93       	push	r16
     2c0:	e8 ec       	ldi	r30, 0xC8	; 200
     2c2:	f4 e0       	ldi	r31, 0x04	; 4
     2c4:	80 81       	ld	r24, Z
     2c6:	8f 7d       	andi	r24, 0xDF	; 223
     2c8:	80 83       	st	Z, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	8f 7d       	andi	r24, 0xDF	; 223
     2ce:	80 83       	st	Z, r24
     2d0:	ec ec       	ldi	r30, 0xCC	; 204
     2d2:	f1 e2       	ldi	r31, 0x21	; 33
     2d4:	02 e0       	ldi	r16, 0x02	; 2
     2d6:	05 93       	las	Z, r16
     2d8:	10 92 ce 21 	sts	0x21CE, r1	; 0x8021ce <udd_sram+0x16>
     2dc:	10 92 cf 21 	sts	0x21CF, r1	; 0x8021cf <udd_sram+0x17>
     2e0:	00 e2       	ldi	r16, 0x20	; 32
     2e2:	06 93       	lac	Z, r16
     2e4:	00 e4       	ldi	r16, 0x40	; 64
     2e6:	06 93       	lac	Z, r16
     2e8:	e4 ec       	ldi	r30, 0xC4	; 196
     2ea:	f1 e2       	ldi	r31, 0x21	; 33
     2ec:	00 e4       	ldi	r16, 0x40	; 64
     2ee:	06 93       	lac	Z, r16
     2f0:	e2 e3       	ldi	r30, 0x32	; 50
     2f2:	f3 e2       	ldi	r31, 0x23	; 35
     2f4:	14 86       	std	Z+12, r1	; 0x0c
     2f6:	15 86       	std	Z+13, r1	; 0x0d
     2f8:	16 86       	std	Z+14, r1	; 0x0e
     2fa:	17 86       	std	Z+15, r1	; 0x0f
     2fc:	12 86       	std	Z+10, r1	; 0x0a
     2fe:	13 86       	std	Z+11, r1	; 0x0b
     300:	10 92 b5 21 	sts	0x21B5, r1	; 0x8021b5 <udd_ep_control_state>
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <udd_ctrl_stall_data>:
     308:	0f 93       	push	r16
     30a:	85 e0       	ldi	r24, 0x05	; 5
     30c:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <udd_ep_control_state>
     310:	ed ec       	ldi	r30, 0xCD	; 205
     312:	f1 e2       	ldi	r31, 0x21	; 33
     314:	04 e0       	ldi	r16, 0x04	; 4
     316:	05 93       	las	Z, r16
     318:	e5 ec       	ldi	r30, 0xC5	; 197
     31a:	f1 e2       	ldi	r31, 0x21	; 33
     31c:	04 e0       	ldi	r16, 0x04	; 4
     31e:	05 93       	las	Z, r16
     320:	0f 91       	pop	r16
     322:	08 95       	ret

00000324 <udd_ctrl_send_zlp_in>:
     324:	0f 93       	push	r16
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <udd_ep_control_state>
     32c:	10 92 ce 21 	sts	0x21CE, r1	; 0x8021ce <udd_sram+0x16>
     330:	10 92 cf 21 	sts	0x21CF, r1	; 0x8021cf <udd_sram+0x17>
     334:	ec ec       	ldi	r30, 0xCC	; 204
     336:	f1 e2       	ldi	r31, 0x21	; 33
     338:	02 e0       	ldi	r16, 0x02	; 2
     33a:	06 93       	lac	Z, r16
     33c:	0f 91       	pop	r16
     33e:	08 95       	ret

00000340 <udd_ctrl_endofrequest>:
     340:	e0 91 3e 23 	lds	r30, 0x233E	; 0x80233e <udd_g_ctrlreq+0xc>
     344:	f0 91 3f 23 	lds	r31, 0x233F	; 0x80233f <udd_g_ctrlreq+0xd>
     348:	30 97       	sbiw	r30, 0x00	; 0
     34a:	09 f0       	breq	.+2      	; 0x34e <udd_ctrl_endofrequest+0xe>
     34c:	19 95       	eicall
     34e:	08 95       	ret

00000350 <udd_ctrl_in_sent>:
     350:	0f 93       	push	r16
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <udd_ep_control_state>
     35a:	83 30       	cpi	r24, 0x03	; 3
     35c:	19 f4       	brne	.+6      	; 0x364 <udd_ctrl_in_sent+0x14>
     35e:	f0 df       	rcall	.-32     	; 0x340 <udd_ctrl_endofrequest>
     360:	ae df       	rcall	.-164    	; 0x2be <udd_ctrl_init>
     362:	5e c0       	rjmp	.+188    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     364:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <udd_ctrl_payload_nb_trans>
     368:	90 91 b2 21 	lds	r25, 0x21B2	; 0x8021b2 <udd_ctrl_payload_nb_trans+0x1>
     36c:	c0 91 3c 23 	lds	r28, 0x233C	; 0x80233c <udd_g_ctrlreq+0xa>
     370:	d0 91 3d 23 	lds	r29, 0x233D	; 0x80233d <udd_g_ctrlreq+0xb>
     374:	c8 1b       	sub	r28, r24
     376:	d9 0b       	sbc	r29, r25
     378:	71 f5       	brne	.+92     	; 0x3d6 <udd_ctrl_in_sent+0x86>
     37a:	20 91 b3 21 	lds	r18, 0x21B3	; 0x8021b3 <udd_ctrl_prev_payload_nb_trans>
     37e:	30 91 b4 21 	lds	r19, 0x21B4	; 0x8021b4 <udd_ctrl_prev_payload_nb_trans+0x1>
     382:	82 0f       	add	r24, r18
     384:	93 1f       	adc	r25, r19
     386:	80 93 b3 21 	sts	0x21B3, r24	; 0x8021b3 <udd_ctrl_prev_payload_nb_trans>
     38a:	90 93 b4 21 	sts	0x21B4, r25	; 0x8021b4 <udd_ctrl_prev_payload_nb_trans+0x1>
     38e:	20 91 38 23 	lds	r18, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
     392:	30 91 39 23 	lds	r19, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
     396:	82 17       	cp	r24, r18
     398:	93 07       	cpc	r25, r19
     39a:	21 f0       	breq	.+8      	; 0x3a4 <udd_ctrl_in_sent+0x54>
     39c:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <__data_end>
     3a0:	88 23       	and	r24, r24
     3a2:	41 f0       	breq	.+16     	; 0x3b4 <udd_ctrl_in_sent+0x64>
     3a4:	84 e0       	ldi	r24, 0x04	; 4
     3a6:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <udd_ep_control_state>
     3aa:	e4 ec       	ldi	r30, 0xC4	; 196
     3ac:	f1 e2       	ldi	r31, 0x21	; 33
     3ae:	02 e0       	ldi	r16, 0x02	; 2
     3b0:	06 93       	lac	Z, r16
     3b2:	36 c0       	rjmp	.+108    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3b4:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <udd_g_ctrlreq+0xe>
     3b8:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <udd_g_ctrlreq+0xf>
     3bc:	30 97       	sbiw	r30, 0x00	; 0
     3be:	99 f0       	breq	.+38     	; 0x3e6 <udd_ctrl_in_sent+0x96>
     3c0:	19 95       	eicall
     3c2:	88 23       	and	r24, r24
     3c4:	81 f0       	breq	.+32     	; 0x3e6 <udd_ctrl_in_sent+0x96>
     3c6:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <udd_ctrl_payload_nb_trans>
     3ca:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <udd_ctrl_payload_nb_trans+0x1>
     3ce:	c0 91 3c 23 	lds	r28, 0x233C	; 0x80233c <udd_g_ctrlreq+0xa>
     3d2:	d0 91 3d 23 	lds	r29, 0x233D	; 0x80233d <udd_g_ctrlreq+0xb>
     3d6:	c0 34       	cpi	r28, 0x40	; 64
     3d8:	d1 05       	cpc	r29, r1
     3da:	28 f0       	brcs	.+10     	; 0x3e6 <udd_ctrl_in_sent+0x96>
     3dc:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <__data_end>
     3e0:	c0 e4       	ldi	r28, 0x40	; 64
     3e2:	d0 e0       	ldi	r29, 0x00	; 0
     3e4:	03 c0       	rjmp	.+6      	; 0x3ec <udd_ctrl_in_sent+0x9c>
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <__data_end>
     3ec:	e8 eb       	ldi	r30, 0xB8	; 184
     3ee:	f1 e2       	ldi	r31, 0x21	; 33
     3f0:	c6 8b       	std	Z+22, r28	; 0x16
     3f2:	d7 8b       	std	Z+23, r29	; 0x17
     3f4:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <udd_ctrl_payload_nb_trans>
     3f8:	90 91 b2 21 	lds	r25, 0x21B2	; 0x8021b2 <udd_ctrl_payload_nb_trans+0x1>
     3fc:	20 91 3a 23 	lds	r18, 0x233A	; 0x80233a <udd_g_ctrlreq+0x8>
     400:	30 91 3b 23 	lds	r19, 0x233B	; 0x80233b <udd_g_ctrlreq+0x9>
     404:	28 0f       	add	r18, r24
     406:	39 1f       	adc	r19, r25
     408:	20 8f       	std	Z+24, r18	; 0x18
     40a:	31 8f       	std	Z+25, r19	; 0x19
     40c:	c8 0f       	add	r28, r24
     40e:	d9 1f       	adc	r29, r25
     410:	c0 93 b1 21 	sts	0x21B1, r28	; 0x8021b1 <udd_ctrl_payload_nb_trans>
     414:	d0 93 b2 21 	sts	0x21B2, r29	; 0x8021b2 <udd_ctrl_payload_nb_trans+0x1>
     418:	ec ec       	ldi	r30, 0xCC	; 204
     41a:	f1 e2       	ldi	r31, 0x21	; 33
     41c:	02 e0       	ldi	r16, 0x02	; 2
     41e:	06 93       	lac	Z, r16
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	0f 91       	pop	r16
     426:	08 95       	ret

00000428 <udd_ep_get_size>:
     428:	fc 01       	movw	r30, r24
     42a:	81 81       	ldd	r24, Z+1	; 0x01
     42c:	e8 2f       	mov	r30, r24
     42e:	e7 70       	andi	r30, 0x07	; 7
     430:	8e 2f       	mov	r24, r30
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	fc 01       	movw	r30, r24
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	e7 30       	cpi	r30, 0x07	; 7
     43a:	f1 05       	cpc	r31, r1
     43c:	d8 f4       	brcc	.+54     	; 0x474 <udd_ep_get_size+0x4c>
     43e:	88 27       	eor	r24, r24
     440:	e2 50       	subi	r30, 0x02	; 2
     442:	ff 4f       	sbci	r31, 0xFF	; 255
     444:	8f 4f       	sbci	r24, 0xFF	; 255
     446:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__tablejump2__>
     44a:	80 e1       	ldi	r24, 0x10	; 16
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	08 95       	ret
     450:	80 e2       	ldi	r24, 0x20	; 32
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	08 95       	ret
     456:	80 e4       	ldi	r24, 0x40	; 64
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	08 95       	ret
     45c:	80 e8       	ldi	r24, 0x80	; 128
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	08 95       	ret
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	08 95       	ret
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	08 95       	ret
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	93 e0       	ldi	r25, 0x03	; 3
     472:	08 95       	ret
     474:	88 e0       	ldi	r24, 0x08	; 8
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	08 95       	ret

0000047a <udd_ep_get_job>:
     47a:	28 2f       	mov	r18, r24
     47c:	2f 70       	andi	r18, 0x0F	; 15
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	22 0f       	add	r18, r18
     482:	33 1f       	adc	r19, r19
     484:	08 2e       	mov	r0, r24
     486:	00 0c       	add	r0, r0
     488:	99 0b       	sbc	r25, r25
     48a:	88 27       	eor	r24, r24
     48c:	99 0f       	add	r25, r25
     48e:	88 1f       	adc	r24, r24
     490:	99 27       	eor	r25, r25
     492:	82 0f       	add	r24, r18
     494:	93 1f       	adc	r25, r19
     496:	02 97       	sbiw	r24, 0x02	; 2
     498:	9c 01       	movw	r18, r24
     49a:	22 0f       	add	r18, r18
     49c:	33 1f       	adc	r19, r19
     49e:	22 0f       	add	r18, r18
     4a0:	33 1f       	adc	r19, r19
     4a2:	22 0f       	add	r18, r18
     4a4:	33 1f       	adc	r19, r19
     4a6:	82 0f       	add	r24, r18
     4a8:	93 1f       	adc	r25, r19
     4aa:	83 5b       	subi	r24, 0xB3	; 179
     4ac:	9e 4d       	sbci	r25, 0xDE	; 222
     4ae:	08 95       	ret

000004b0 <udd_ctrl_interrupt_tc_setup>:
     4b0:	0f 93       	push	r16
     4b2:	cf 93       	push	r28
     4b4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
     4b8:	80 ff       	sbrs	r24, 0
     4ba:	65 c0       	rjmp	.+202    	; 0x586 <udd_ctrl_interrupt_tc_setup+0xd6>
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
     4c2:	e4 ec       	ldi	r30, 0xC4	; 196
     4c4:	f1 e2       	ldi	r31, 0x21	; 33
     4c6:	00 e8       	ldi	r16, 0x80	; 128
     4c8:	06 93       	lac	Z, r16
     4ca:	ec ec       	ldi	r30, 0xCC	; 204
     4cc:	f1 e2       	ldi	r31, 0x21	; 33
     4ce:	00 e8       	ldi	r16, 0x80	; 128
     4d0:	06 93       	lac	Z, r16
     4d2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
     4d6:	e4 ec       	ldi	r30, 0xC4	; 196
     4d8:	f1 e2       	ldi	r31, 0x21	; 33
     4da:	00 e1       	ldi	r16, 0x10	; 16
     4dc:	06 93       	lac	Z, r16
     4de:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <udd_ep_control_state>
     4e2:	88 23       	and	r24, r24
     4e4:	29 f0       	breq	.+10     	; 0x4f0 <udd_ctrl_interrupt_tc_setup+0x40>
     4e6:	83 50       	subi	r24, 0x03	; 3
     4e8:	82 30       	cpi	r24, 0x02	; 2
     4ea:	08 f4       	brcc	.+2      	; 0x4ee <udd_ctrl_interrupt_tc_setup+0x3e>
     4ec:	29 df       	rcall	.-430    	; 0x340 <udd_ctrl_endofrequest>
     4ee:	e7 de       	rcall	.-562    	; 0x2be <udd_ctrl_init>
     4f0:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <udd_sram+0xe>
     4f4:	90 91 c7 21 	lds	r25, 0x21C7	; 0x8021c7 <udd_sram+0xf>
     4f8:	08 97       	sbiw	r24, 0x08	; 8
     4fa:	09 f0       	breq	.+2      	; 0x4fe <udd_ctrl_interrupt_tc_setup+0x4e>
     4fc:	46 c0       	rjmp	.+140    	; 0x58a <udd_ctrl_interrupt_tc_setup+0xda>
     4fe:	88 e0       	ldi	r24, 0x08	; 8
     500:	e1 e7       	ldi	r30, 0x71	; 113
     502:	f1 e2       	ldi	r31, 0x21	; 33
     504:	a2 e3       	ldi	r26, 0x32	; 50
     506:	b3 e2       	ldi	r27, 0x23	; 35
     508:	01 90       	ld	r0, Z+
     50a:	0d 92       	st	X+, r0
     50c:	8a 95       	dec	r24
     50e:	e1 f7       	brne	.-8      	; 0x508 <udd_ctrl_interrupt_tc_setup+0x58>
     510:	e8 ec       	ldi	r30, 0xC8	; 200
     512:	f4 e0       	ldi	r31, 0x04	; 4
     514:	80 81       	ld	r24, Z
     516:	80 62       	ori	r24, 0x20	; 32
     518:	80 83       	st	Z, r24
     51a:	80 81       	ld	r24, Z
     51c:	80 62       	ori	r24, 0x20	; 32
     51e:	80 83       	st	Z, r24
     520:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <udc_process_setup>
     524:	c8 2f       	mov	r28, r24
     526:	81 11       	cpse	r24, r1
     528:	03 c0       	rjmp	.+6      	; 0x530 <udd_ctrl_interrupt_tc_setup+0x80>
     52a:	ee de       	rcall	.-548    	; 0x308 <udd_ctrl_stall_data>
     52c:	c1 e0       	ldi	r28, 0x01	; 1
     52e:	2e c0       	rjmp	.+92     	; 0x58c <udd_ctrl_interrupt_tc_setup+0xdc>
     530:	80 91 32 23 	lds	r24, 0x2332	; 0x802332 <udd_g_ctrlreq>
     534:	88 23       	and	r24, r24
     536:	6c f4       	brge	.+26     	; 0x552 <udd_ctrl_interrupt_tc_setup+0xa2>
     538:	10 92 b3 21 	sts	0x21B3, r1	; 0x8021b3 <udd_ctrl_prev_payload_nb_trans>
     53c:	10 92 b4 21 	sts	0x21B4, r1	; 0x8021b4 <udd_ctrl_prev_payload_nb_trans+0x1>
     540:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <udd_ctrl_payload_nb_trans>
     544:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <udd_ctrl_payload_nb_trans+0x1>
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <udd_ep_control_state>
     54e:	00 df       	rcall	.-512    	; 0x350 <udd_ctrl_in_sent>
     550:	1d c0       	rjmp	.+58     	; 0x58c <udd_ctrl_interrupt_tc_setup+0xdc>
     552:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
     556:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
     55a:	89 2b       	or	r24, r25
     55c:	11 f4       	brne	.+4      	; 0x562 <udd_ctrl_interrupt_tc_setup+0xb2>
     55e:	e2 de       	rcall	.-572    	; 0x324 <udd_ctrl_send_zlp_in>
     560:	15 c0       	rjmp	.+42     	; 0x58c <udd_ctrl_interrupt_tc_setup+0xdc>
     562:	10 92 b3 21 	sts	0x21B3, r1	; 0x8021b3 <udd_ctrl_prev_payload_nb_trans>
     566:	10 92 b4 21 	sts	0x21B4, r1	; 0x8021b4 <udd_ctrl_prev_payload_nb_trans+0x1>
     56a:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <udd_ctrl_payload_nb_trans>
     56e:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <udd_ctrl_payload_nb_trans+0x1>
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <udd_ep_control_state>
     578:	e4 ec       	ldi	r30, 0xC4	; 196
     57a:	f1 e2       	ldi	r31, 0x21	; 33
     57c:	02 e0       	ldi	r16, 0x02	; 2
     57e:	06 93       	lac	Z, r16
     580:	00 e2       	ldi	r16, 0x20	; 32
     582:	06 93       	lac	Z, r16
     584:	03 c0       	rjmp	.+6      	; 0x58c <udd_ctrl_interrupt_tc_setup+0xdc>
     586:	c0 e0       	ldi	r28, 0x00	; 0
     588:	01 c0       	rjmp	.+2      	; 0x58c <udd_ctrl_interrupt_tc_setup+0xdc>
     58a:	c1 e0       	ldi	r28, 0x01	; 1
     58c:	8c 2f       	mov	r24, r28
     58e:	cf 91       	pop	r28
     590:	0f 91       	pop	r16
     592:	08 95       	ret

00000594 <udd_ep_trans_complet>:
     594:	8f 92       	push	r8
     596:	9f 92       	push	r9
     598:	af 92       	push	r10
     59a:	bf 92       	push	r11
     59c:	df 92       	push	r13
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	d8 2e       	mov	r13, r24
     5ac:	66 df       	rcall	.-308    	; 0x47a <udd_ep_get_job>
     5ae:	8c 01       	movw	r16, r24
     5b0:	bd 2c       	mov	r11, r13
     5b2:	bb 1c       	adc	r11, r11
     5b4:	bb 24       	eor	r11, r11
     5b6:	bb 1c       	adc	r11, r11
     5b8:	cd 2d       	mov	r28, r13
     5ba:	cf 70       	andi	r28, 0x0F	; 15
     5bc:	d0 e0       	ldi	r29, 0x00	; 0
     5be:	cc 0f       	add	r28, r28
     5c0:	dd 1f       	adc	r29, r29
     5c2:	cb 0d       	add	r28, r11
     5c4:	d1 1d       	adc	r29, r1
     5c6:	ce 01       	movw	r24, r28
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	9c 01       	movw	r18, r24
     5d6:	2c 53       	subi	r18, 0x3C	; 60
     5d8:	3e 4d       	sbci	r19, 0xDE	; 222
     5da:	79 01       	movw	r14, r18
     5dc:	c9 01       	movw	r24, r18
     5de:	24 df       	rcall	.-440    	; 0x428 <udd_ep_get_size>
     5e0:	4c 01       	movw	r8, r24
     5e2:	bb 20       	and	r11, r11
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <udd_ep_trans_complet+0x54>
     5e6:	7b c0       	rjmp	.+246    	; 0x6de <udd_ep_trans_complet+0x14a>
     5e8:	fe 01       	movw	r30, r28
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	ee 0f       	add	r30, r30
     5f0:	ff 1f       	adc	r31, r31
     5f2:	ee 0f       	add	r30, r30
     5f4:	ff 1f       	adc	r31, r31
     5f6:	e8 54       	subi	r30, 0x48	; 72
     5f8:	fe 4d       	sbci	r31, 0xDE	; 222
     5fa:	22 89       	ldd	r18, Z+18	; 0x12
     5fc:	33 89       	ldd	r19, Z+19	; 0x13
     5fe:	d8 01       	movw	r26, r16
     600:	15 96       	adiw	r26, 0x05	; 5
     602:	8d 91       	ld	r24, X+
     604:	9c 91       	ld	r25, X
     606:	16 97       	sbiw	r26, 0x06	; 6
     608:	82 0f       	add	r24, r18
     60a:	93 1f       	adc	r25, r19
     60c:	15 96       	adiw	r26, 0x05	; 5
     60e:	8d 93       	st	X+, r24
     610:	9c 93       	st	X, r25
     612:	16 97       	sbiw	r26, 0x06	; 6
     614:	13 96       	adiw	r26, 0x03	; 3
     616:	2d 91       	ld	r18, X+
     618:	3c 91       	ld	r19, X
     61a:	14 97       	sbiw	r26, 0x04	; 4
     61c:	82 17       	cp	r24, r18
     61e:	93 07       	cpc	r25, r19
     620:	09 f4       	brne	.+2      	; 0x624 <udd_ep_trans_complet+0x90>
     622:	47 c0       	rjmp	.+142    	; 0x6b2 <udd_ep_trans_complet+0x11e>
     624:	28 1b       	sub	r18, r24
     626:	39 0b       	sbc	r19, r25
     628:	21 15       	cp	r18, r1
     62a:	b4 e0       	ldi	r27, 0x04	; 4
     62c:	3b 07       	cpc	r19, r27
     62e:	40 f0       	brcs	.+16     	; 0x640 <udd_ep_trans_complet+0xac>
     630:	2f ef       	ldi	r18, 0xFF	; 255
     632:	33 e0       	ldi	r19, 0x03	; 3
     634:	c9 01       	movw	r24, r18
     636:	b4 01       	movw	r22, r8
     638:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__udivmodhi4>
     63c:	28 1b       	sub	r18, r24
     63e:	39 0b       	sbc	r19, r25
     640:	f8 01       	movw	r30, r16
     642:	80 81       	ld	r24, Z
     644:	81 ff       	sbrs	r24, 1
     646:	0a c0       	rjmp	.+20     	; 0x65c <udd_ep_trans_complet+0xc8>
     648:	c9 01       	movw	r24, r18
     64a:	b4 01       	movw	r22, r8
     64c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__udivmodhi4>
     650:	41 e0       	ldi	r20, 0x01	; 1
     652:	89 2b       	or	r24, r25
     654:	09 f0       	breq	.+2      	; 0x658 <udd_ep_trans_complet+0xc4>
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	84 2f       	mov	r24, r20
     65a:	01 c0       	rjmp	.+2      	; 0x65e <udd_ep_trans_complet+0xca>
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	d8 01       	movw	r26, r16
     660:	9c 91       	ld	r25, X
     662:	80 fb       	bst	r24, 0
     664:	91 f9       	bld	r25, 1
     666:	9c 93       	st	X, r25
     668:	fe 01       	movw	r30, r28
     66a:	ee 0f       	add	r30, r30
     66c:	ff 1f       	adc	r31, r31
     66e:	ee 0f       	add	r30, r30
     670:	ff 1f       	adc	r31, r31
     672:	ee 0f       	add	r30, r30
     674:	ff 1f       	adc	r31, r31
     676:	e8 54       	subi	r30, 0x48	; 72
     678:	fe 4d       	sbci	r31, 0xDE	; 222
     67a:	12 8a       	std	Z+18, r1	; 0x12
     67c:	13 8a       	std	Z+19, r1	; 0x13
     67e:	26 87       	std	Z+14, r18	; 0x0e
     680:	37 87       	std	Z+15, r19	; 0x0f
     682:	11 96       	adiw	r26, 0x01	; 1
     684:	2d 91       	ld	r18, X+
     686:	3c 91       	ld	r19, X
     688:	12 97       	sbiw	r26, 0x02	; 2
     68a:	15 96       	adiw	r26, 0x05	; 5
     68c:	8d 91       	ld	r24, X+
     68e:	9c 91       	ld	r25, X
     690:	16 97       	sbiw	r26, 0x06	; 6
     692:	82 0f       	add	r24, r18
     694:	93 1f       	adc	r25, r19
     696:	cc 0f       	add	r28, r28
     698:	dd 1f       	adc	r29, r29
     69a:	cc 0f       	add	r28, r28
     69c:	dd 1f       	adc	r29, r29
     69e:	cc 0f       	add	r28, r28
     6a0:	dd 1f       	adc	r29, r29
     6a2:	c8 53       	subi	r28, 0x38	; 56
     6a4:	de 4d       	sbci	r29, 0xDE	; 222
     6a6:	88 83       	st	Y, r24
     6a8:	99 83       	std	Y+1, r25	; 0x01
     6aa:	f7 01       	movw	r30, r14
     6ac:	02 e0       	ldi	r16, 0x02	; 2
     6ae:	06 93       	lac	Z, r16
     6b0:	e8 c0       	rjmp	.+464    	; 0x882 <udd_ep_trans_complet+0x2ee>
     6b2:	d8 01       	movw	r26, r16
     6b4:	8c 91       	ld	r24, X
     6b6:	81 ff       	sbrs	r24, 1
     6b8:	d1 c0       	rjmp	.+418    	; 0x85c <udd_ep_trans_complet+0x2c8>
     6ba:	8d 7f       	andi	r24, 0xFD	; 253
     6bc:	8c 93       	st	X, r24
     6be:	cc 0f       	add	r28, r28
     6c0:	dd 1f       	adc	r29, r29
     6c2:	cc 0f       	add	r28, r28
     6c4:	dd 1f       	adc	r29, r29
     6c6:	cc 0f       	add	r28, r28
     6c8:	dd 1f       	adc	r29, r29
     6ca:	c8 54       	subi	r28, 0x48	; 72
     6cc:	de 4d       	sbci	r29, 0xDE	; 222
     6ce:	1a 8a       	std	Y+18, r1	; 0x12
     6d0:	1b 8a       	std	Y+19, r1	; 0x13
     6d2:	1e 86       	std	Y+14, r1	; 0x0e
     6d4:	1f 86       	std	Y+15, r1	; 0x0f
     6d6:	f7 01       	movw	r30, r14
     6d8:	02 e0       	ldi	r16, 0x02	; 2
     6da:	06 93       	lac	Z, r16
     6dc:	d2 c0       	rjmp	.+420    	; 0x882 <udd_ep_trans_complet+0x2ee>
     6de:	fe 01       	movw	r30, r28
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ee 0f       	add	r30, r30
     6e6:	ff 1f       	adc	r31, r31
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	e8 54       	subi	r30, 0x48	; 72
     6ee:	fe 4d       	sbci	r31, 0xDE	; 222
     6f0:	a6 84       	ldd	r10, Z+14	; 0x0e
     6f2:	b7 84       	ldd	r11, Z+15	; 0x0f
     6f4:	d8 01       	movw	r26, r16
     6f6:	8c 91       	ld	r24, X
     6f8:	82 ff       	sbrs	r24, 2
     6fa:	1b c0       	rjmp	.+54     	; 0x732 <udd_ep_trans_complet+0x19e>
     6fc:	11 96       	adiw	r26, 0x01	; 1
     6fe:	ed 91       	ld	r30, X+
     700:	fc 91       	ld	r31, X
     702:	12 97       	sbiw	r26, 0x02	; 2
     704:	15 96       	adiw	r26, 0x05	; 5
     706:	2d 91       	ld	r18, X+
     708:	3c 91       	ld	r19, X
     70a:	16 97       	sbiw	r26, 0x06	; 6
     70c:	13 96       	adiw	r26, 0x03	; 3
     70e:	8d 91       	ld	r24, X+
     710:	9c 91       	ld	r25, X
     712:	14 97       	sbiw	r26, 0x04	; 4
     714:	b4 01       	movw	r22, r8
     716:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__udivmodhi4>
     71a:	b0 e4       	ldi	r27, 0x40	; 64
     71c:	db 9e       	mul	r13, r27
     71e:	b0 01       	movw	r22, r0
     720:	11 24       	eor	r1, r1
     722:	63 57       	subi	r22, 0x73	; 115
     724:	7f 4d       	sbci	r23, 0xDF	; 223
     726:	ac 01       	movw	r20, r24
     728:	cf 01       	movw	r24, r30
     72a:	82 0f       	add	r24, r18
     72c:	93 1f       	adc	r25, r19
     72e:	0e 94 90 10 	call	0x2120	; 0x2120 <memcpy>
     732:	f8 01       	movw	r30, r16
     734:	25 81       	ldd	r18, Z+5	; 0x05
     736:	36 81       	ldd	r19, Z+6	; 0x06
     738:	2a 0d       	add	r18, r10
     73a:	3b 1d       	adc	r19, r11
     73c:	25 83       	std	Z+5, r18	; 0x05
     73e:	36 83       	std	Z+6, r19	; 0x06
     740:	83 81       	ldd	r24, Z+3	; 0x03
     742:	94 81       	ldd	r25, Z+4	; 0x04
     744:	82 17       	cp	r24, r18
     746:	93 07       	cpc	r25, r19
     748:	68 f4       	brcc	.+26     	; 0x764 <udd_ep_trans_complet+0x1d0>
     74a:	85 83       	std	Z+5, r24	; 0x05
     74c:	96 83       	std	Z+6, r25	; 0x06
     74e:	cc 0f       	add	r28, r28
     750:	dd 1f       	adc	r29, r29
     752:	cc 0f       	add	r28, r28
     754:	dd 1f       	adc	r29, r29
     756:	cc 0f       	add	r28, r28
     758:	dd 1f       	adc	r29, r29
     75a:	c8 54       	subi	r28, 0x48	; 72
     75c:	de 4d       	sbci	r29, 0xDE	; 222
     75e:	8a 89       	ldd	r24, Y+18	; 0x12
     760:	9b 89       	ldd	r25, Y+19	; 0x13
     762:	7c c0       	rjmp	.+248    	; 0x85c <udd_ep_trans_complet+0x2c8>
     764:	fe 01       	movw	r30, r28
     766:	ee 0f       	add	r30, r30
     768:	ff 1f       	adc	r31, r31
     76a:	ee 0f       	add	r30, r30
     76c:	ff 1f       	adc	r31, r31
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	e8 54       	subi	r30, 0x48	; 72
     774:	fe 4d       	sbci	r31, 0xDE	; 222
     776:	42 89       	ldd	r20, Z+18	; 0x12
     778:	53 89       	ldd	r21, Z+19	; 0x13
     77a:	4a 15       	cp	r20, r10
     77c:	5b 05       	cpc	r21, r11
     77e:	09 f0       	breq	.+2      	; 0x782 <udd_ep_trans_complet+0x1ee>
     780:	6d c0       	rjmp	.+218    	; 0x85c <udd_ep_trans_complet+0x2c8>
     782:	28 17       	cp	r18, r24
     784:	39 07       	cpc	r19, r25
     786:	09 f4       	brne	.+2      	; 0x78a <udd_ep_trans_complet+0x1f6>
     788:	69 c0       	rjmp	.+210    	; 0x85c <udd_ep_trans_complet+0x2c8>
     78a:	ac 01       	movw	r20, r24
     78c:	42 1b       	sub	r20, r18
     78e:	53 0b       	sbc	r21, r19
     790:	9a 01       	movw	r18, r20
     792:	21 15       	cp	r18, r1
     794:	54 e0       	ldi	r21, 0x04	; 4
     796:	35 07       	cpc	r19, r21
     798:	58 f0       	brcs	.+22     	; 0x7b0 <udd_ep_trans_complet+0x21c>
     79a:	2f ef       	ldi	r18, 0xFF	; 255
     79c:	33 e0       	ldi	r19, 0x03	; 3
     79e:	c9 01       	movw	r24, r18
     7a0:	b4 01       	movw	r22, r8
     7a2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__udivmodhi4>
     7a6:	d9 01       	movw	r26, r18
     7a8:	a8 1b       	sub	r26, r24
     7aa:	b9 0b       	sbc	r27, r25
     7ac:	cd 01       	movw	r24, r26
     7ae:	08 c0       	rjmp	.+16     	; 0x7c0 <udd_ep_trans_complet+0x22c>
     7b0:	c9 01       	movw	r24, r18
     7b2:	b4 01       	movw	r22, r8
     7b4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__udivmodhi4>
     7b8:	f9 01       	movw	r30, r18
     7ba:	e8 1b       	sub	r30, r24
     7bc:	f9 0b       	sbc	r31, r25
     7be:	cf 01       	movw	r24, r30
     7c0:	fe 01       	movw	r30, r28
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	e8 54       	subi	r30, 0x48	; 72
     7d0:	fe 4d       	sbci	r31, 0xDE	; 222
     7d2:	16 86       	std	Z+14, r1	; 0x0e
     7d4:	17 86       	std	Z+15, r1	; 0x0f
     7d6:	88 15       	cp	r24, r8
     7d8:	99 05       	cpc	r25, r9
     7da:	00 f5       	brcc	.+64     	; 0x81c <udd_ep_trans_complet+0x288>
     7dc:	d8 01       	movw	r26, r16
     7de:	8c 91       	ld	r24, X
     7e0:	84 60       	ori	r24, 0x04	; 4
     7e2:	8c 93       	st	X, r24
     7e4:	b0 e4       	ldi	r27, 0x40	; 64
     7e6:	db 9e       	mul	r13, r27
     7e8:	c0 01       	movw	r24, r0
     7ea:	11 24       	eor	r1, r1
     7ec:	83 57       	subi	r24, 0x73	; 115
     7ee:	9f 4d       	sbci	r25, 0xDF	; 223
     7f0:	fe 01       	movw	r30, r28
     7f2:	ee 0f       	add	r30, r30
     7f4:	ff 1f       	adc	r31, r31
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	e8 53       	subi	r30, 0x38	; 56
     800:	fe 4d       	sbci	r31, 0xDE	; 222
     802:	80 83       	st	Z, r24
     804:	91 83       	std	Z+1, r25	; 0x01
     806:	cc 0f       	add	r28, r28
     808:	dd 1f       	adc	r29, r29
     80a:	cc 0f       	add	r28, r28
     80c:	dd 1f       	adc	r29, r29
     80e:	cc 0f       	add	r28, r28
     810:	dd 1f       	adc	r29, r29
     812:	c8 54       	subi	r28, 0x48	; 72
     814:	de 4d       	sbci	r29, 0xDE	; 222
     816:	8a 8a       	std	Y+18, r8	; 0x12
     818:	9b 8a       	std	Y+19, r9	; 0x13
     81a:	1c c0       	rjmp	.+56     	; 0x854 <udd_ep_trans_complet+0x2c0>
     81c:	f8 01       	movw	r30, r16
     81e:	41 81       	ldd	r20, Z+1	; 0x01
     820:	52 81       	ldd	r21, Z+2	; 0x02
     822:	25 81       	ldd	r18, Z+5	; 0x05
     824:	36 81       	ldd	r19, Z+6	; 0x06
     826:	24 0f       	add	r18, r20
     828:	35 1f       	adc	r19, r21
     82a:	fe 01       	movw	r30, r28
     82c:	ee 0f       	add	r30, r30
     82e:	ff 1f       	adc	r31, r31
     830:	ee 0f       	add	r30, r30
     832:	ff 1f       	adc	r31, r31
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	e8 53       	subi	r30, 0x38	; 56
     83a:	fe 4d       	sbci	r31, 0xDE	; 222
     83c:	20 83       	st	Z, r18
     83e:	31 83       	std	Z+1, r19	; 0x01
     840:	cc 0f       	add	r28, r28
     842:	dd 1f       	adc	r29, r29
     844:	cc 0f       	add	r28, r28
     846:	dd 1f       	adc	r29, r29
     848:	cc 0f       	add	r28, r28
     84a:	dd 1f       	adc	r29, r29
     84c:	c8 54       	subi	r28, 0x48	; 72
     84e:	de 4d       	sbci	r29, 0xDE	; 222
     850:	8a 8b       	std	Y+18, r24	; 0x12
     852:	9b 8b       	std	Y+19, r25	; 0x13
     854:	f7 01       	movw	r30, r14
     856:	02 e0       	ldi	r16, 0x02	; 2
     858:	06 93       	lac	Z, r16
     85a:	13 c0       	rjmp	.+38     	; 0x882 <udd_ep_trans_complet+0x2ee>
     85c:	d8 01       	movw	r26, r16
     85e:	8c 91       	ld	r24, X
     860:	80 ff       	sbrs	r24, 0
     862:	0f c0       	rjmp	.+30     	; 0x882 <udd_ep_trans_complet+0x2ee>
     864:	8e 7f       	andi	r24, 0xFE	; 254
     866:	8c 93       	st	X, r24
     868:	17 96       	adiw	r26, 0x07	; 7
     86a:	ed 91       	ld	r30, X+
     86c:	fc 91       	ld	r31, X
     86e:	18 97       	sbiw	r26, 0x08	; 8
     870:	30 97       	sbiw	r30, 0x00	; 0
     872:	39 f0       	breq	.+14     	; 0x882 <udd_ep_trans_complet+0x2ee>
     874:	15 96       	adiw	r26, 0x05	; 5
     876:	6d 91       	ld	r22, X+
     878:	7c 91       	ld	r23, X
     87a:	16 97       	sbiw	r26, 0x06	; 6
     87c:	4d 2d       	mov	r20, r13
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	19 95       	eicall
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	08 95       	ret

0000089a <udd_attach>:
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	1f 92       	push	r1
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	8f b7       	in	r24, 0x3f	; 63
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	f8 94       	cli
     8ac:	19 81       	ldd	r17, Y+1	; 0x01
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	ce dc       	rcall	.-1636   	; 0x24e <udd_sleep_mode>
     8b2:	ea ec       	ldi	r30, 0xCA	; 202
     8b4:	f4 e0       	ldi	r31, 0x04	; 4
     8b6:	80 e4       	ldi	r24, 0x40	; 64
     8b8:	80 83       	st	Z, r24
     8ba:	80 e2       	ldi	r24, 0x20	; 32
     8bc:	80 83       	st	Z, r24
     8be:	e1 ec       	ldi	r30, 0xC1	; 193
     8c0:	f4 e0       	ldi	r31, 0x04	; 4
     8c2:	80 81       	ld	r24, Z
     8c4:	81 60       	ori	r24, 0x01	; 1
     8c6:	80 83       	st	Z, r24
     8c8:	a9 ec       	ldi	r26, 0xC9	; 201
     8ca:	b4 e0       	ldi	r27, 0x04	; 4
     8cc:	8c 91       	ld	r24, X
     8ce:	82 60       	ori	r24, 0x02	; 2
     8d0:	8c 93       	st	X, r24
     8d2:	e8 ec       	ldi	r30, 0xC8	; 200
     8d4:	f4 e0       	ldi	r31, 0x04	; 4
     8d6:	80 81       	ld	r24, Z
     8d8:	80 64       	ori	r24, 0x40	; 64
     8da:	80 83       	st	Z, r24
     8dc:	8c 91       	ld	r24, X
     8de:	81 60       	ori	r24, 0x01	; 1
     8e0:	8c 93       	st	X, r24
     8e2:	80 81       	ld	r24, Z
     8e4:	80 68       	ori	r24, 0x80	; 128
     8e6:	80 83       	st	Z, r24
     8e8:	1f bf       	out	0x3f, r17	; 63
     8ea:	0f 90       	pop	r0
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	08 95       	ret

000008f4 <udd_enable>:
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	1f 92       	push	r1
     8fe:	1f 92       	push	r1
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	00 e6       	ldi	r16, 0x60	; 96
     906:	10 e0       	ldi	r17, 0x00	; 0
     908:	f8 01       	movw	r30, r16
     90a:	10 82       	st	Z, r1
     90c:	80 e3       	ldi	r24, 0x30	; 48
     90e:	67 d5       	rcall	.+2766   	; 0x13de <sysclk_enable_usb>
     910:	e0 ec       	ldi	r30, 0xC0	; 192
     912:	f4 e0       	ldi	r31, 0x04	; 4
     914:	80 81       	ld	r24, Z
     916:	80 64       	ori	r24, 0x40	; 64
     918:	80 83       	st	Z, r24
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	f8 01       	movw	r30, r16
     91e:	80 83       	st	Z, r24
     920:	8f b7       	in	r24, 0x3f	; 63
     922:	8a 83       	std	Y+2, r24	; 0x02
     924:	f8 94       	cli
     926:	1a 81       	ldd	r17, Y+2	; 0x02
     928:	e8 eb       	ldi	r30, 0xB8	; 184
     92a:	f1 e2       	ldi	r31, 0x21	; 33
     92c:	15 86       	std	Z+13, r1	; 0x0d
     92e:	15 8a       	std	Z+21, r1	; 0x15
     930:	15 8e       	std	Z+29, r1	; 0x1d
     932:	15 a2       	std	Z+37, r1	; 0x25
     934:	15 a6       	std	Z+45, r1	; 0x2d
     936:	15 aa       	std	Z+53, r1	; 0x35
     938:	ed e4       	ldi	r30, 0x4D	; 77
     93a:	f1 e2       	ldi	r31, 0x21	; 33
     93c:	80 81       	ld	r24, Z
     93e:	8e 7f       	andi	r24, 0xFE	; 254
     940:	80 83       	st	Z, r24
     942:	e6 e5       	ldi	r30, 0x56	; 86
     944:	f1 e2       	ldi	r31, 0x21	; 33
     946:	80 81       	ld	r24, Z
     948:	8e 7f       	andi	r24, 0xFE	; 254
     94a:	80 83       	st	Z, r24
     94c:	ef e5       	ldi	r30, 0x5F	; 95
     94e:	f1 e2       	ldi	r31, 0x21	; 33
     950:	80 81       	ld	r24, Z
     952:	8e 7f       	andi	r24, 0xFE	; 254
     954:	80 83       	st	Z, r24
     956:	e8 e6       	ldi	r30, 0x68	; 104
     958:	f1 e2       	ldi	r31, 0x21	; 33
     95a:	80 81       	ld	r24, Z
     95c:	8e 7f       	andi	r24, 0xFE	; 254
     95e:	80 83       	st	Z, r24
     960:	6a e1       	ldi	r22, 0x1A	; 26
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	0e 94 64 10 	call	0x20c8	; 0x20c8 <nvm_read_byte>
     96a:	8f 3f       	cpi	r24, 0xFF	; 255
     96c:	19 f0       	breq	.+6      	; 0x974 <udd_enable+0x80>
     96e:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
     972:	03 c0       	rjmp	.+6      	; 0x97a <udd_enable+0x86>
     974:	8f e1       	ldi	r24, 0x1F	; 31
     976:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
     97a:	6b e1       	ldi	r22, 0x1B	; 27
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	0e 94 64 10 	call	0x20c8	; 0x20c8 <nvm_read_byte>
     984:	8f 3f       	cpi	r24, 0xFF	; 255
     986:	19 f0       	breq	.+6      	; 0x98e <udd_enable+0x9a>
     988:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
     98c:	03 c0       	rjmp	.+6      	; 0x994 <udd_enable+0xa0>
     98e:	8f e1       	ldi	r24, 0x1F	; 31
     990:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
     994:	e0 ec       	ldi	r30, 0xC0	; 192
     996:	f4 e0       	ldi	r31, 0x04	; 4
     998:	80 81       	ld	r24, Z
     99a:	82 60       	ori	r24, 0x02	; 2
     99c:	80 83       	st	Z, r24
     99e:	80 81       	ld	r24, Z
     9a0:	80 68       	ori	r24, 0x80	; 128
     9a2:	80 83       	st	Z, r24
     9a4:	80 81       	ld	r24, Z
     9a6:	80 61       	ori	r24, 0x10	; 16
     9a8:	80 83       	st	Z, r24
     9aa:	84 ec       	ldi	r24, 0xC4	; 196
     9ac:	91 e2       	ldi	r25, 0x21	; 33
     9ae:	86 83       	std	Z+6, r24	; 0x06
     9b0:	97 83       	std	Z+7, r25	; 0x07
     9b2:	80 81       	ld	r24, Z
     9b4:	80 62       	ori	r24, 0x20	; 32
     9b6:	80 83       	st	Z, r24
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
     9be:	e8 ec       	ldi	r30, 0xC8	; 200
     9c0:	f4 e0       	ldi	r31, 0x04	; 4
     9c2:	80 81       	ld	r24, Z
     9c4:	81 60       	ori	r24, 0x01	; 1
     9c6:	80 83       	st	Z, r24
     9c8:	10 92 f8 21 	sts	0x21F8, r1	; 0x8021f8 <udd_b_idle>
     9cc:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <sleepmgr_locks+0x5>
     9d0:	8f 3f       	cpi	r24, 0xFF	; 255
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <udd_enable+0xe2>
     9d4:	ff cf       	rjmp	.-2      	; 0x9d4 <udd_enable+0xe0>
     9d6:	8f b7       	in	r24, 0x3f	; 63
     9d8:	89 83       	std	Y+1, r24	; 0x01
     9da:	f8 94       	cli
     9dc:	99 81       	ldd	r25, Y+1	; 0x01
     9de:	e2 e4       	ldi	r30, 0x42	; 66
     9e0:	f3 e2       	ldi	r31, 0x23	; 35
     9e2:	85 81       	ldd	r24, Z+5	; 0x05
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	85 83       	std	Z+5, r24	; 0x05
     9e8:	9f bf       	out	0x3f, r25	; 63
     9ea:	57 df       	rcall	.-338    	; 0x89a <udd_attach>
     9ec:	1f bf       	out	0x3f, r17	; 63
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	08 95       	ret

000009fc <udd_is_high_speed>:
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	08 95       	ret

00000a00 <udd_set_address>:
     a00:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
     a04:	08 95       	ret

00000a06 <udd_getaddress>:
     a06:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
     a0a:	08 95       	ret

00000a0c <udd_get_frame_number>:
     a0c:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udd_sram+0x3c>
     a10:	90 91 f5 21 	lds	r25, 0x21F5	; 0x8021f5 <udd_sram+0x3d>
     a14:	08 95       	ret

00000a16 <udd_get_micro_frame_number>:
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	08 95       	ret

00000a1c <udd_set_setup_payload>:
     a1c:	e2 e3       	ldi	r30, 0x32	; 50
     a1e:	f3 e2       	ldi	r31, 0x23	; 35
     a20:	80 87       	std	Z+8, r24	; 0x08
     a22:	91 87       	std	Z+9, r25	; 0x09
     a24:	62 87       	std	Z+10, r22	; 0x0a
     a26:	73 87       	std	Z+11, r23	; 0x0b
     a28:	08 95       	ret

00000a2a <udd_ep_alloc>:
     a2a:	28 2f       	mov	r18, r24
     a2c:	2f 70       	andi	r18, 0x0F	; 15
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	22 0f       	add	r18, r18
     a32:	33 1f       	adc	r19, r19
     a34:	08 2e       	mov	r0, r24
     a36:	00 0c       	add	r0, r0
     a38:	99 0b       	sbc	r25, r25
     a3a:	88 27       	eor	r24, r24
     a3c:	99 0f       	add	r25, r25
     a3e:	88 1f       	adc	r24, r24
     a40:	99 27       	eor	r25, r25
     a42:	82 0f       	add	r24, r18
     a44:	93 1f       	adc	r25, r19
     a46:	fc 01       	movw	r30, r24
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 1f       	adc	r31, r31
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	e8 54       	subi	r30, 0x48	; 72
     a56:	fe 4d       	sbci	r31, 0xDE	; 222
     a58:	25 85       	ldd	r18, Z+13	; 0x0d
     a5a:	20 7c       	andi	r18, 0xC0	; 192
     a5c:	09 f0       	breq	.+2      	; 0xa60 <udd_ep_alloc+0x36>
     a5e:	69 c0       	rjmp	.+210    	; 0xb32 <udd_ep_alloc+0x108>
     a60:	63 70       	andi	r22, 0x03	; 3
     a62:	61 30       	cpi	r22, 0x01	; 1
     a64:	11 f0       	breq	.+4      	; 0xa6a <udd_ep_alloc+0x40>
     a66:	18 f4       	brcc	.+6      	; 0xa6e <udd_ep_alloc+0x44>
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <udd_ep_alloc+0x48>
     a6a:	20 ec       	ldi	r18, 0xC0	; 192
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <udd_ep_alloc+0x4a>
     a6e:	20 e8       	ldi	r18, 0x80	; 128
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <udd_ep_alloc+0x4a>
     a72:	20 e4       	ldi	r18, 0x40	; 64
     a74:	40 38       	cpi	r20, 0x80	; 128
     a76:	51 05       	cpc	r21, r1
     a78:	e9 f0       	breq	.+58     	; 0xab4 <udd_ep_alloc+0x8a>
     a7a:	50 f4       	brcc	.+20     	; 0xa90 <udd_ep_alloc+0x66>
     a7c:	40 32       	cpi	r20, 0x20	; 32
     a7e:	51 05       	cpc	r21, r1
     a80:	a9 f0       	breq	.+42     	; 0xaac <udd_ep_alloc+0x82>
     a82:	40 34       	cpi	r20, 0x40	; 64
     a84:	51 05       	cpc	r21, r1
     a86:	a1 f0       	breq	.+40     	; 0xab0 <udd_ep_alloc+0x86>
     a88:	40 31       	cpi	r20, 0x10	; 16
     a8a:	51 05       	cpc	r21, r1
     a8c:	d9 f4       	brne	.+54     	; 0xac4 <udd_ep_alloc+0x9a>
     a8e:	0c c0       	rjmp	.+24     	; 0xaa8 <udd_ep_alloc+0x7e>
     a90:	41 15       	cp	r20, r1
     a92:	32 e0       	ldi	r19, 0x02	; 2
     a94:	53 07       	cpc	r21, r19
     a96:	91 f0       	breq	.+36     	; 0xabc <udd_ep_alloc+0x92>
     a98:	4f 3f       	cpi	r20, 0xFF	; 255
     a9a:	33 e0       	ldi	r19, 0x03	; 3
     a9c:	53 07       	cpc	r21, r19
     a9e:	81 f0       	breq	.+32     	; 0xac0 <udd_ep_alloc+0x96>
     aa0:	41 15       	cp	r20, r1
     aa2:	51 40       	sbci	r21, 0x01	; 1
     aa4:	79 f4       	brne	.+30     	; 0xac4 <udd_ep_alloc+0x9a>
     aa6:	08 c0       	rjmp	.+16     	; 0xab8 <udd_ep_alloc+0x8e>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	0d c0       	rjmp	.+26     	; 0xac6 <udd_ep_alloc+0x9c>
     aac:	42 e0       	ldi	r20, 0x02	; 2
     aae:	0b c0       	rjmp	.+22     	; 0xac6 <udd_ep_alloc+0x9c>
     ab0:	43 e0       	ldi	r20, 0x03	; 3
     ab2:	09 c0       	rjmp	.+18     	; 0xac6 <udd_ep_alloc+0x9c>
     ab4:	44 e0       	ldi	r20, 0x04	; 4
     ab6:	07 c0       	rjmp	.+14     	; 0xac6 <udd_ep_alloc+0x9c>
     ab8:	45 e0       	ldi	r20, 0x05	; 5
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <udd_ep_alloc+0x9c>
     abc:	46 e0       	ldi	r20, 0x06	; 6
     abe:	03 c0       	rjmp	.+6      	; 0xac6 <udd_ep_alloc+0x9c>
     ac0:	47 e0       	ldi	r20, 0x07	; 7
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <udd_ep_alloc+0x9c>
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	fc 01       	movw	r30, r24
     ac8:	ee 0f       	add	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	e8 54       	subi	r30, 0x48	; 72
     ad6:	fe 4d       	sbci	r31, 0xDE	; 222
     ad8:	15 86       	std	Z+13, r1	; 0x0d
     ada:	36 e0       	ldi	r19, 0x06	; 6
     adc:	34 87       	std	Z+12, r19	; 0x0c
     ade:	24 2b       	or	r18, r20
     ae0:	25 87       	std	Z+13, r18	; 0x0d
     ae2:	fc 01       	movw	r30, r24
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	ee 0f       	add	r30, r30
     aee:	ff 1f       	adc	r31, r31
     af0:	e8 54       	subi	r30, 0x48	; 72
     af2:	fe 4d       	sbci	r31, 0xDE	; 222
     af4:	25 85       	ldd	r18, Z+13	; 0x0d
     af6:	20 7c       	andi	r18, 0xC0	; 192
     af8:	20 3c       	cpi	r18, 0xC0	; 192
     afa:	69 f4       	brne	.+26     	; 0xb16 <udd_ep_alloc+0xec>
     afc:	fc 01       	movw	r30, r24
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	ee 0f       	add	r30, r30
     b04:	ff 1f       	adc	r31, r31
     b06:	ee 0f       	add	r30, r30
     b08:	ff 1f       	adc	r31, r31
     b0a:	e8 54       	subi	r30, 0x48	; 72
     b0c:	fe 4d       	sbci	r31, 0xDE	; 222
     b0e:	25 85       	ldd	r18, Z+13	; 0x0d
     b10:	27 70       	andi	r18, 0x07	; 7
     b12:	27 30       	cpi	r18, 0x07	; 7
     b14:	81 f0       	breq	.+32     	; 0xb36 <udd_ep_alloc+0x10c>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	fc 01       	movw	r30, r24
     b24:	e8 54       	subi	r30, 0x48	; 72
     b26:	fe 4d       	sbci	r31, 0xDE	; 222
     b28:	85 85       	ldd	r24, Z+13	; 0x0d
     b2a:	80 62       	ori	r24, 0x20	; 32
     b2c:	85 87       	std	Z+13, r24	; 0x0d
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	08 95       	ret
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	08 95       	ret
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	08 95       	ret

00000b3a <udd_ep_is_halted>:
     b3a:	e8 2f       	mov	r30, r24
     b3c:	ef 70       	andi	r30, 0x0F	; 15
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	08 2e       	mov	r0, r24
     b46:	00 0c       	add	r0, r0
     b48:	99 0b       	sbc	r25, r25
     b4a:	88 27       	eor	r24, r24
     b4c:	99 0f       	add	r25, r25
     b4e:	88 1f       	adc	r24, r24
     b50:	99 27       	eor	r25, r25
     b52:	e8 0f       	add	r30, r24
     b54:	f9 1f       	adc	r31, r25
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	ee 0f       	add	r30, r30
     b5c:	ff 1f       	adc	r31, r31
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31
     b62:	e8 54       	subi	r30, 0x48	; 72
     b64:	fe 4d       	sbci	r31, 0xDE	; 222
     b66:	85 85       	ldd	r24, Z+13	; 0x0d
     b68:	82 fb       	bst	r24, 2
     b6a:	88 27       	eor	r24, r24
     b6c:	80 f9       	bld	r24, 0
     b6e:	08 95       	ret

00000b70 <udd_ep_clear_halt>:
     b70:	0f 93       	push	r16
     b72:	28 2f       	mov	r18, r24
     b74:	2f 70       	andi	r18, 0x0F	; 15
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	a9 01       	movw	r20, r18
     b7a:	44 0f       	add	r20, r20
     b7c:	55 1f       	adc	r21, r21
     b7e:	28 2f       	mov	r18, r24
     b80:	08 2e       	mov	r0, r24
     b82:	00 0c       	add	r0, r0
     b84:	33 0b       	sbc	r19, r19
     b86:	22 27       	eor	r18, r18
     b88:	33 0f       	add	r19, r19
     b8a:	22 1f       	adc	r18, r18
     b8c:	33 27       	eor	r19, r19
     b8e:	24 0f       	add	r18, r20
     b90:	35 1f       	adc	r19, r21
     b92:	a9 01       	movw	r20, r18
     b94:	44 0f       	add	r20, r20
     b96:	55 1f       	adc	r21, r21
     b98:	44 0f       	add	r20, r20
     b9a:	55 1f       	adc	r21, r21
     b9c:	44 0f       	add	r20, r20
     b9e:	55 1f       	adc	r21, r21
     ba0:	fa 01       	movw	r30, r20
     ba2:	ec 53       	subi	r30, 0x3C	; 60
     ba4:	fe 4d       	sbci	r31, 0xDE	; 222
     ba6:	01 e0       	ldi	r16, 0x01	; 1
     ba8:	06 93       	lac	Z, r16
     baa:	fa 01       	movw	r30, r20
     bac:	e8 54       	subi	r30, 0x48	; 72
     bae:	fe 4d       	sbci	r31, 0xDE	; 222
     bb0:	95 85       	ldd	r25, Z+13	; 0x0d
     bb2:	92 ff       	sbrs	r25, 2
     bb4:	11 c0       	rjmp	.+34     	; 0xbd8 <udd_ep_clear_halt+0x68>
     bb6:	fa 01       	movw	r30, r20
     bb8:	e8 54       	subi	r30, 0x48	; 72
     bba:	fe 4d       	sbci	r31, 0xDE	; 222
     bbc:	95 85       	ldd	r25, Z+13	; 0x0d
     bbe:	9b 7f       	andi	r25, 0xFB	; 251
     bc0:	95 87       	std	Z+13, r25	; 0x0d
     bc2:	5b dc       	rcall	.-1866   	; 0x47a <udd_ep_get_job>
     bc4:	fc 01       	movw	r30, r24
     bc6:	80 81       	ld	r24, Z
     bc8:	80 ff       	sbrs	r24, 0
     bca:	06 c0       	rjmp	.+12     	; 0xbd8 <udd_ep_clear_halt+0x68>
     bcc:	8e 7f       	andi	r24, 0xFE	; 254
     bce:	80 83       	st	Z, r24
     bd0:	07 80       	ldd	r0, Z+7	; 0x07
     bd2:	f0 85       	ldd	r31, Z+8	; 0x08
     bd4:	e0 2d       	mov	r30, r0
     bd6:	19 95       	eicall
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	0f 91       	pop	r16
     bdc:	08 95       	ret

00000bde <udd_ep_run>:
     bde:	5f 92       	push	r5
     be0:	6f 92       	push	r6
     be2:	7f 92       	push	r7
     be4:	8f 92       	push	r8
     be6:	9f 92       	push	r9
     be8:	af 92       	push	r10
     bea:	bf 92       	push	r11
     bec:	cf 92       	push	r12
     bee:	df 92       	push	r13
     bf0:	ef 92       	push	r14
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	1f 92       	push	r1
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	78 2e       	mov	r7, r24
     c04:	66 2e       	mov	r6, r22
     c06:	4a 01       	movw	r8, r20
     c08:	59 01       	movw	r10, r18
     c0a:	37 dc       	rcall	.-1938   	; 0x47a <udd_ep_get_job>
     c0c:	6c 01       	movw	r12, r24
     c0e:	57 2c       	mov	r5, r7
     c10:	55 1c       	adc	r5, r5
     c12:	55 24       	eor	r5, r5
     c14:	55 1c       	adc	r5, r5
     c16:	87 2d       	mov	r24, r7
     c18:	8f 70       	andi	r24, 0x0F	; 15
     c1a:	e8 2e       	mov	r14, r24
     c1c:	f1 2c       	mov	r15, r1
     c1e:	ee 0c       	add	r14, r14
     c20:	ff 1c       	adc	r15, r15
     c22:	e5 0c       	add	r14, r5
     c24:	f1 1c       	adc	r15, r1
     c26:	f7 01       	movw	r30, r14
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	e8 54       	subi	r30, 0x48	; 72
     c36:	fe 4d       	sbci	r31, 0xDE	; 222
     c38:	85 85       	ldd	r24, Z+13	; 0x0d
     c3a:	80 7c       	andi	r24, 0xC0	; 192
     c3c:	09 f4       	brne	.+2      	; 0xc40 <udd_ep_run+0x62>
     c3e:	82 c0       	rjmp	.+260    	; 0xd44 <udd_ep_run+0x166>
     c40:	f7 01       	movw	r30, r14
     c42:	ee 0f       	add	r30, r30
     c44:	ff 1f       	adc	r31, r31
     c46:	ee 0f       	add	r30, r30
     c48:	ff 1f       	adc	r31, r31
     c4a:	ee 0f       	add	r30, r30
     c4c:	ff 1f       	adc	r31, r31
     c4e:	e8 54       	subi	r30, 0x48	; 72
     c50:	fe 4d       	sbci	r31, 0xDE	; 222
     c52:	85 85       	ldd	r24, Z+13	; 0x0d
     c54:	80 7c       	andi	r24, 0xC0	; 192
     c56:	80 3c       	cpi	r24, 0xC0	; 192
     c58:	61 f0       	breq	.+24     	; 0xc72 <udd_ep_run+0x94>
     c5a:	f7 01       	movw	r30, r14
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	ee 0f       	add	r30, r30
     c66:	ff 1f       	adc	r31, r31
     c68:	e8 54       	subi	r30, 0x48	; 72
     c6a:	fe 4d       	sbci	r31, 0xDE	; 222
     c6c:	85 85       	ldd	r24, Z+13	; 0x0d
     c6e:	82 fd       	sbrc	r24, 2
     c70:	6b c0       	rjmp	.+214    	; 0xd48 <udd_ep_run+0x16a>
     c72:	8f b7       	in	r24, 0x3f	; 63
     c74:	89 83       	std	Y+1, r24	; 0x01
     c76:	f8 94       	cli
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	f6 01       	movw	r30, r12
     c7c:	90 81       	ld	r25, Z
     c7e:	90 ff       	sbrs	r25, 0
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <udd_ep_run+0xaa>
     c82:	8f bf       	out	0x3f, r24	; 63
     c84:	51 2c       	mov	r5, r1
     c86:	61 c0       	rjmp	.+194    	; 0xd4a <udd_ep_run+0x16c>
     c88:	f6 01       	movw	r30, r12
     c8a:	90 81       	ld	r25, Z
     c8c:	91 60       	ori	r25, 0x01	; 1
     c8e:	90 83       	st	Z, r25
     c90:	8f bf       	out	0x3f, r24	; 63
     c92:	81 82       	std	Z+1, r8	; 0x01
     c94:	92 82       	std	Z+2, r9	; 0x02
     c96:	a3 82       	std	Z+3, r10	; 0x03
     c98:	b4 82       	std	Z+4, r11	; 0x04
     c9a:	15 82       	std	Z+5, r1	; 0x05
     c9c:	16 82       	std	Z+6, r1	; 0x06
     c9e:	07 83       	std	Z+7, r16	; 0x07
     ca0:	10 87       	std	Z+8, r17	; 0x08
     ca2:	61 10       	cpse	r6, r1
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <udd_ep_run+0xd4>
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	a1 14       	cp	r10, r1
     caa:	b1 04       	cpc	r11, r1
     cac:	19 f0       	breq	.+6      	; 0xcb4 <udd_ep_run+0xd6>
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <udd_ep_run+0xd6>
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	f6 01       	movw	r30, r12
     cb6:	80 81       	ld	r24, Z
     cb8:	90 fb       	bst	r25, 0
     cba:	81 f9       	bld	r24, 1
     cbc:	8b 7f       	andi	r24, 0xFB	; 251
     cbe:	80 83       	st	Z, r24
     cc0:	55 20       	and	r5, r5
     cc2:	61 f0       	breq	.+24     	; 0xcdc <udd_ep_run+0xfe>
     cc4:	f7 01       	movw	r30, r14
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	ee 0f       	add	r30, r30
     cd0:	ff 1f       	adc	r31, r31
     cd2:	e8 54       	subi	r30, 0x48	; 72
     cd4:	fe 4d       	sbci	r31, 0xDE	; 222
     cd6:	12 8a       	std	Z+18, r1	; 0x12
     cd8:	13 8a       	std	Z+19, r1	; 0x13
     cda:	2f c0       	rjmp	.+94     	; 0xd3a <udd_ep_run+0x15c>
     cdc:	f7 01       	movw	r30, r14
     cde:	ee 0f       	add	r30, r30
     ce0:	ff 1f       	adc	r31, r31
     ce2:	ee 0f       	add	r30, r30
     ce4:	ff 1f       	adc	r31, r31
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	e8 54       	subi	r30, 0x48	; 72
     cec:	fe 4d       	sbci	r31, 0xDE	; 222
     cee:	85 85       	ldd	r24, Z+13	; 0x0d
     cf0:	80 7c       	andi	r24, 0xC0	; 192
     cf2:	80 3c       	cpi	r24, 0xC0	; 192
     cf4:	a9 f4       	brne	.+42     	; 0xd20 <udd_ep_run+0x142>
     cf6:	c7 01       	movw	r24, r14
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	8c 53       	subi	r24, 0x3C	; 60
     d06:	9e 4d       	sbci	r25, 0xDE	; 222
     d08:	8f db       	rcall	.-2274   	; 0x428 <udd_ep_get_size>
     d0a:	bc 01       	movw	r22, r24
     d0c:	c5 01       	movw	r24, r10
     d0e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__udivmodhi4>
     d12:	89 2b       	or	r24, r25
     d14:	29 f0       	breq	.+10     	; 0xd20 <udd_ep_run+0x142>
     d16:	f6 01       	movw	r30, r12
     d18:	80 81       	ld	r24, Z
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	80 83       	st	Z, r24
     d1e:	15 c0       	rjmp	.+42     	; 0xd4a <udd_ep_run+0x16c>
     d20:	f7 01       	movw	r30, r14
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	ee 0f       	add	r30, r30
     d2c:	ff 1f       	adc	r31, r31
     d2e:	e8 54       	subi	r30, 0x48	; 72
     d30:	fe 4d       	sbci	r31, 0xDE	; 222
     d32:	16 86       	std	Z+14, r1	; 0x0e
     d34:	17 86       	std	Z+15, r1	; 0x0f
     d36:	12 8a       	std	Z+18, r1	; 0x12
     d38:	13 8a       	std	Z+19, r1	; 0x13
     d3a:	87 2d       	mov	r24, r7
     d3c:	2b dc       	rcall	.-1962   	; 0x594 <udd_ep_trans_complet>
     d3e:	55 24       	eor	r5, r5
     d40:	53 94       	inc	r5
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <udd_ep_run+0x16c>
     d44:	51 2c       	mov	r5, r1
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <udd_ep_run+0x16c>
     d48:	51 2c       	mov	r5, r1
     d4a:	85 2d       	mov	r24, r5
     d4c:	0f 90       	pop	r0
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	cf 90       	pop	r12
     d5e:	bf 90       	pop	r11
     d60:	af 90       	pop	r10
     d62:	9f 90       	pop	r9
     d64:	8f 90       	pop	r8
     d66:	7f 90       	pop	r7
     d68:	6f 90       	pop	r6
     d6a:	5f 90       	pop	r5
     d6c:	08 95       	ret

00000d6e <udd_ep_abort>:
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	18 2f       	mov	r17, r24
     d7a:	f8 2e       	mov	r15, r24
     d7c:	ff 1c       	adc	r15, r15
     d7e:	ff 24       	eor	r15, r15
     d80:	ff 1c       	adc	r15, r15
     d82:	c8 2f       	mov	r28, r24
     d84:	cf 70       	andi	r28, 0x0F	; 15
     d86:	d0 e0       	ldi	r29, 0x00	; 0
     d88:	cc 0f       	add	r28, r28
     d8a:	dd 1f       	adc	r29, r29
     d8c:	cf 0d       	add	r28, r15
     d8e:	d1 1d       	adc	r29, r1
     d90:	74 db       	rcall	.-2328   	; 0x47a <udd_ep_get_job>
     d92:	dc 01       	movw	r26, r24
     d94:	fe 01       	movw	r30, r28
     d96:	ee 0f       	add	r30, r30
     d98:	ff 1f       	adc	r31, r31
     d9a:	ee 0f       	add	r30, r30
     d9c:	ff 1f       	adc	r31, r31
     d9e:	ee 0f       	add	r30, r30
     da0:	ff 1f       	adc	r31, r31
     da2:	ec 53       	subi	r30, 0x3C	; 60
     da4:	fe 4d       	sbci	r31, 0xDE	; 222
     da6:	02 e0       	ldi	r16, 0x02	; 2
     da8:	05 93       	las	Z, r16
     daa:	8c 91       	ld	r24, X
     dac:	80 ff       	sbrs	r24, 0
     dae:	22 c0       	rjmp	.+68     	; 0xdf4 <udd_ep_abort+0x86>
     db0:	8e 7f       	andi	r24, 0xFE	; 254
     db2:	8c 93       	st	X, r24
     db4:	17 96       	adiw	r26, 0x07	; 7
     db6:	ed 91       	ld	r30, X+
     db8:	fc 91       	ld	r31, X
     dba:	18 97       	sbiw	r26, 0x08	; 8
     dbc:	30 97       	sbiw	r30, 0x00	; 0
     dbe:	d1 f0       	breq	.+52     	; 0xdf4 <udd_ep_abort+0x86>
     dc0:	ff 20       	and	r15, r15
     dc2:	59 f0       	breq	.+22     	; 0xdda <udd_ep_abort+0x6c>
     dc4:	cc 0f       	add	r28, r28
     dc6:	dd 1f       	adc	r29, r29
     dc8:	cc 0f       	add	r28, r28
     dca:	dd 1f       	adc	r29, r29
     dcc:	cc 0f       	add	r28, r28
     dce:	dd 1f       	adc	r29, r29
     dd0:	c8 54       	subi	r28, 0x48	; 72
     dd2:	de 4d       	sbci	r29, 0xDE	; 222
     dd4:	6a 89       	ldd	r22, Y+18	; 0x12
     dd6:	7b 89       	ldd	r23, Y+19	; 0x13
     dd8:	0a c0       	rjmp	.+20     	; 0xdee <udd_ep_abort+0x80>
     dda:	cc 0f       	add	r28, r28
     ddc:	dd 1f       	adc	r29, r29
     dde:	cc 0f       	add	r28, r28
     de0:	dd 1f       	adc	r29, r29
     de2:	cc 0f       	add	r28, r28
     de4:	dd 1f       	adc	r29, r29
     de6:	c8 54       	subi	r28, 0x48	; 72
     de8:	de 4d       	sbci	r29, 0xDE	; 222
     dea:	6e 85       	ldd	r22, Y+14	; 0x0e
     dec:	7f 85       	ldd	r23, Y+15	; 0x0f
     dee:	41 2f       	mov	r20, r17
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	19 95       	eicall
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	08 95       	ret

00000e00 <udd_ep_free>:
     e00:	cf 93       	push	r28
     e02:	c8 2f       	mov	r28, r24
     e04:	b4 df       	rcall	.-152    	; 0xd6e <udd_ep_abort>
     e06:	ec 2f       	mov	r30, r28
     e08:	ef 70       	andi	r30, 0x0F	; 15
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	ee 0f       	add	r30, r30
     e0e:	ff 1f       	adc	r31, r31
     e10:	8c 2f       	mov	r24, r28
     e12:	cc 0f       	add	r28, r28
     e14:	99 0b       	sbc	r25, r25
     e16:	88 27       	eor	r24, r24
     e18:	99 0f       	add	r25, r25
     e1a:	88 1f       	adc	r24, r24
     e1c:	99 27       	eor	r25, r25
     e1e:	e8 0f       	add	r30, r24
     e20:	f9 1f       	adc	r31, r25
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	e8 54       	subi	r30, 0x48	; 72
     e30:	fe 4d       	sbci	r31, 0xDE	; 222
     e32:	15 86       	std	Z+13, r1	; 0x0d
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <udd_ep_set_halt>:
     e38:	e8 2f       	mov	r30, r24
     e3a:	ef 70       	andi	r30, 0x0F	; 15
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	ee 0f       	add	r30, r30
     e40:	ff 1f       	adc	r31, r31
     e42:	28 2f       	mov	r18, r24
     e44:	08 2e       	mov	r0, r24
     e46:	00 0c       	add	r0, r0
     e48:	33 0b       	sbc	r19, r19
     e4a:	22 27       	eor	r18, r18
     e4c:	33 0f       	add	r19, r19
     e4e:	22 1f       	adc	r18, r18
     e50:	33 27       	eor	r19, r19
     e52:	e2 0f       	add	r30, r18
     e54:	f3 1f       	adc	r31, r19
     e56:	ee 0f       	add	r30, r30
     e58:	ff 1f       	adc	r31, r31
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	ee 0f       	add	r30, r30
     e60:	ff 1f       	adc	r31, r31
     e62:	e8 54       	subi	r30, 0x48	; 72
     e64:	fe 4d       	sbci	r31, 0xDE	; 222
     e66:	95 85       	ldd	r25, Z+13	; 0x0d
     e68:	94 60       	ori	r25, 0x04	; 4
     e6a:	95 87       	std	Z+13, r25	; 0x0d
     e6c:	80 df       	rcall	.-256    	; 0xd6e <udd_ep_abort>
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	08 95       	ret

00000e72 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
     e72:	1f 92       	push	r1
     e74:	0f 92       	push	r0
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	0f 92       	push	r0
     e7a:	11 24       	eor	r1, r1
     e7c:	0b b6       	in	r0, 0x3b	; 59
     e7e:	0f 92       	push	r0
     e80:	0f 93       	push	r16
     e82:	2f 93       	push	r18
     e84:	3f 93       	push	r19
     e86:	4f 93       	push	r20
     e88:	5f 93       	push	r21
     e8a:	6f 93       	push	r22
     e8c:	7f 93       	push	r23
     e8e:	8f 93       	push	r24
     e90:	9f 93       	push	r25
     e92:	af 93       	push	r26
     e94:	bf 93       	push	r27
     e96:	ef 93       	push	r30
     e98:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
     e9a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
     e9e:	88 23       	and	r24, r24
     ea0:	2c f4       	brge	.+10     	; 0xeac <__vector_125+0x3a>
		udd_ack_start_of_frame_event();
     ea2:	80 e8       	ldi	r24, 0x80	; 128
     ea4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
     ea8:	35 d6       	rcall	.+3178   	; 0x1b14 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
     eaa:	87 c0       	rjmp	.+270    	; 0xfba <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
     eac:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
     eb0:	82 ff       	sbrs	r24, 2
     eb2:	20 c0       	rjmp	.+64     	; 0xef4 <__vector_125+0x82>
		udd_ack_underflow_event();
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
     eba:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <udd_sram+0x14>
     ebe:	86 ff       	sbrs	r24, 6
     ec0:	7c c0       	rjmp	.+248    	; 0xfba <__vector_125+0x148>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
     ec2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
     ec6:	81 fd       	sbrc	r24, 1
     ec8:	78 c0       	rjmp	.+240    	; 0xfba <__vector_125+0x148>
     eca:	f2 da       	rcall	.-2588   	; 0x4b0 <udd_ctrl_interrupt_tc_setup>
     ecc:	81 11       	cpse	r24, r1
     ece:	75 c0       	rjmp	.+234    	; 0xfba <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
     ed0:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <udd_ep_control_state>
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	11 f4       	brne	.+4      	; 0xedc <__vector_125+0x6a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
     ed8:	25 da       	rcall	.-2998   	; 0x324 <udd_ctrl_send_zlp_in>
     eda:	6f c0       	rjmp	.+222    	; 0xfba <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
     edc:	84 30       	cpi	r24, 0x04	; 4
     ede:	09 f0       	breq	.+2      	; 0xee2 <__vector_125+0x70>
     ee0:	6c c0       	rjmp	.+216    	; 0xfba <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
     ee2:	ed ec       	ldi	r30, 0xCD	; 205
     ee4:	f1 e2       	ldi	r31, 0x21	; 33
     ee6:	04 e0       	ldi	r16, 0x04	; 4
     ee8:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
     eea:	e5 ec       	ldi	r30, 0xC5	; 197
     eec:	f1 e2       	ldi	r31, 0x21	; 33
     eee:	04 e0       	ldi	r16, 0x04	; 4
     ef0:	05 93       	las	Z, r16
     ef2:	63 c0       	rjmp	.+198    	; 0xfba <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
     ef4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
     ef8:	81 ff       	sbrs	r24, 1
     efa:	5a c0       	rjmp	.+180    	; 0xfb0 <__vector_125+0x13e>
		udd_ack_overflow_event();
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
     f02:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <udd_sram+0xc>
     f06:	86 ff       	sbrs	r24, 6
     f08:	58 c0       	rjmp	.+176    	; 0xfba <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
     f0a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
     f0e:	81 fd       	sbrc	r24, 1
     f10:	54 c0       	rjmp	.+168    	; 0xfba <__vector_125+0x148>
     f12:	ce da       	rcall	.-2660   	; 0x4b0 <udd_ctrl_interrupt_tc_setup>
     f14:	81 11       	cpse	r24, r1
     f16:	51 c0       	rjmp	.+162    	; 0xfba <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
     f18:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <udd_ep_control_state>
     f1c:	82 30       	cpi	r24, 0x02	; 2
     f1e:	41 f4       	brne	.+16     	; 0xf30 <__vector_125+0xbe>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
     f20:	84 e0       	ldi	r24, 0x04	; 4
     f22:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
     f26:	e4 ec       	ldi	r30, 0xC4	; 196
     f28:	f1 e2       	ldi	r31, 0x21	; 33
     f2a:	02 e0       	ldi	r16, 0x02	; 2
     f2c:	06 93       	lac	Z, r16
     f2e:	45 c0       	rjmp	.+138    	; 0xfba <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	09 f0       	breq	.+2      	; 0xf36 <__vector_125+0xc4>
     f34:	42 c0       	rjmp	.+132    	; 0xfba <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
     f36:	ed ec       	ldi	r30, 0xCD	; 205
     f38:	f1 e2       	ldi	r31, 0x21	; 33
     f3a:	04 e0       	ldi	r16, 0x04	; 4
     f3c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
     f3e:	e5 ec       	ldi	r30, 0xC5	; 197
     f40:	f1 e2       	ldi	r31, 0x21	; 33
     f42:	04 e0       	ldi	r16, 0x04	; 4
     f44:	05 93       	las	Z, r16
     f46:	39 c0       	rjmp	.+114    	; 0xfba <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
     f48:	80 e1       	ldi	r24, 0x10	; 16
     f4a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	0e df       	rcall	.-484    	; 0xd6e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
     f52:	81 e8       	ldi	r24, 0x81	; 129
     f54:	0c df       	rcall	.-488    	; 0xd6e <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	0a df       	rcall	.-492    	; 0xd6e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
     f5a:	82 e8       	ldi	r24, 0x82	; 130
     f5c:	08 df       	rcall	.-496    	; 0xd6e <udd_ep_abort>
		}
#endif
		udc_reset();
     f5e:	b1 d5       	rcall	.+2914   	; 0x1ac2 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
     f60:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
     f64:	e8 eb       	ldi	r30, 0xB8	; 184
     f66:	f1 e2       	ldi	r31, 0x21	; 33
     f68:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
     f6a:	96 e0       	ldi	r25, 0x06	; 6
     f6c:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
     f6e:	83 e4       	ldi	r24, 0x43	; 67
     f70:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
     f72:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
     f74:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
     f76:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
     f78:	81 e7       	ldi	r24, 0x71	; 113
     f7a:	91 e2       	ldi	r25, 0x21	; 33
     f7c:	80 8b       	std	Z+16, r24	; 0x10
     f7e:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
     f80:	9e d9       	rcall	.-3268   	; 0x2be <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
     f82:	1b c0       	rjmp	.+54     	; 0xfba <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
     f84:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
     f88:	86 ff       	sbrs	r24, 6
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <__vector_125+0x128>
		udd_ack_suspend_event();
     f8c:	80 e4       	ldi	r24, 0x40	; 64
     f8e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	5c d9       	rcall	.-3400   	; 0x24e <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
     f96:	1e d1       	rcall	.+572    	; 0x11d4 <usb_callback_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
     f98:	10 c0       	rjmp	.+32     	; 0xfba <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
     f9a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
     f9e:	85 ff       	sbrs	r24, 5
     fa0:	0c c0       	rjmp	.+24     	; 0xfba <__vector_125+0x148>
		udd_ack_resume_event();
     fa2:	80 e2       	ldi	r24, 0x20	; 32
     fa4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	51 d9       	rcall	.-3422   	; 0x24e <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
     fac:	14 d1       	rcall	.+552    	; 0x11d6 <usb_callback_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
     fae:	05 c0       	rjmp	.+10     	; 0xfba <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
     fb0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
     fb4:	84 fd       	sbrc	r24, 4
     fb6:	c8 cf       	rjmp	.-112    	; 0xf48 <__vector_125+0xd6>
     fb8:	e5 cf       	rjmp	.-54     	; 0xf84 <__vector_125+0x112>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
     fba:	ff 91       	pop	r31
     fbc:	ef 91       	pop	r30
     fbe:	bf 91       	pop	r27
     fc0:	af 91       	pop	r26
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	7f 91       	pop	r23
     fc8:	6f 91       	pop	r22
     fca:	5f 91       	pop	r21
     fcc:	4f 91       	pop	r20
     fce:	3f 91       	pop	r19
     fd0:	2f 91       	pop	r18
     fd2:	0f 91       	pop	r16
     fd4:	0f 90       	pop	r0
     fd6:	0b be       	out	0x3b, r0	; 59
     fd8:	0f 90       	pop	r0
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	0f 90       	pop	r0
     fde:	1f 90       	pop	r1
     fe0:	18 95       	reti

00000fe2 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
     fe2:	1f 92       	push	r1
     fe4:	0f 92       	push	r0
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	0f 92       	push	r0
     fea:	11 24       	eor	r1, r1
     fec:	0b b6       	in	r0, 0x3b	; 59
     fee:	0f 92       	push	r0
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	2f 93       	push	r18
     ff6:	3f 93       	push	r19
     ff8:	4f 93       	push	r20
     ffa:	5f 93       	push	r21
     ffc:	6f 93       	push	r22
     ffe:	7f 93       	push	r23
    1000:	8f 93       	push	r24
    1002:	9f 93       	push	r25
    1004:	af 93       	push	r26
    1006:	bf 93       	push	r27
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	ef 93       	push	r30
    100e:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1010:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1014:	81 fd       	sbrc	r24, 1
    1016:	03 c0       	rjmp	.+6      	; 0x101e <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1018:	4b da       	rcall	.-2922   	; 0x4b0 <udd_ctrl_interrupt_tc_setup>
    101a:	81 11       	cpse	r24, r1
    101c:	c4 c0       	rjmp	.+392    	; 0x11a6 <__vector_126+0x1c4>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1024:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    1028:	81 95       	neg	r24
    102a:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    102c:	e4 ec       	ldi	r30, 0xC4	; 196
    102e:	f1 e2       	ldi	r31, 0x21	; 33
    1030:	e8 1b       	sub	r30, r24
    1032:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1034:	20 81       	ld	r18, Z
    1036:	31 81       	ldd	r19, Z+1	; 0x01
    1038:	24 5c       	subi	r18, 0xC4	; 196
    103a:	31 42       	sbci	r19, 0x21	; 33
    103c:	36 95       	lsr	r19
    103e:	27 95       	ror	r18
    1040:	36 95       	lsr	r19
    1042:	27 95       	ror	r18
    1044:	36 95       	lsr	r19
    1046:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1048:	82 2f       	mov	r24, r18
    104a:	86 95       	lsr	r24
    104c:	20 fd       	sbrc	r18, 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <__vector_126+0x72>
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <__vector_126+0x74>
    1054:	90 e8       	ldi	r25, 0x80	; 128
    1056:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1058:	e8 2f       	mov	r30, r24
    105a:	ef 70       	andi	r30, 0x0F	; 15
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1062:	28 2f       	mov	r18, r24
    1064:	08 2e       	mov	r0, r24
    1066:	00 0c       	add	r0, r0
    1068:	33 0b       	sbc	r19, r19
    106a:	22 27       	eor	r18, r18
    106c:	33 0f       	add	r19, r19
    106e:	22 1f       	adc	r18, r18
    1070:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1072:	e2 0f       	add	r30, r18
    1074:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1076:	df 01       	movw	r26, r30
    1078:	aa 0f       	add	r26, r26
    107a:	bb 1f       	adc	r27, r27
    107c:	aa 0f       	add	r26, r26
    107e:	bb 1f       	adc	r27, r27
    1080:	aa 0f       	add	r26, r26
    1082:	bb 1f       	adc	r27, r27
    1084:	a8 54       	subi	r26, 0x48	; 72
    1086:	be 4d       	sbci	r27, 0xDE	; 222
    1088:	1c 96       	adiw	r26, 0x0c	; 12
    108a:	9c 91       	ld	r25, X
    108c:	95 ff       	sbrs	r25, 5
    108e:	8b c0       	rjmp	.+278    	; 0x11a6 <__vector_126+0x1c4>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	ec 53       	subi	r30, 0x3C	; 60
    109e:	fe 4d       	sbci	r31, 0xDE	; 222
    10a0:	00 e2       	ldi	r16, 0x20	; 32
    10a2:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    10a4:	81 11       	cpse	r24, r1
    10a6:	7a c0       	rjmp	.+244    	; 0x119c <__vector_126+0x1ba>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    10a8:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <udd_ep_control_state>
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	19 f4       	brne	.+6      	; 0x10b6 <__vector_126+0xd4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    10b0:	47 d9       	rcall	.-3442   	; 0x340 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    10b2:	05 d9       	rcall	.-3574   	; 0x2be <udd_ctrl_init>
    10b4:	78 c0       	rjmp	.+240    	; 0x11a6 <__vector_126+0x1c4>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    10b6:	00 91 c6 21 	lds	r16, 0x21C6	; 0x8021c6 <udd_sram+0xe>
    10ba:	10 91 c7 21 	lds	r17, 0x21C7	; 0x8021c7 <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    10be:	80 91 3c 23 	lds	r24, 0x233C	; 0x80233c <udd_g_ctrlreq+0xa>
    10c2:	90 91 3d 23 	lds	r25, 0x233D	; 0x80233d <udd_g_ctrlreq+0xb>
    10c6:	c0 91 b1 21 	lds	r28, 0x21B1	; 0x8021b1 <udd_ctrl_payload_nb_trans>
    10ca:	d0 91 b2 21 	lds	r29, 0x21B2	; 0x8021b2 <udd_ctrl_payload_nb_trans+0x1>
    10ce:	9e 01       	movw	r18, r28
    10d0:	20 0f       	add	r18, r16
    10d2:	31 1f       	adc	r19, r17
    10d4:	82 17       	cp	r24, r18
    10d6:	93 07       	cpc	r25, r19
    10d8:	18 f4       	brcc	.+6      	; 0x10e0 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    10da:	8c 01       	movw	r16, r24
    10dc:	0c 1b       	sub	r16, r28
    10de:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    10e0:	80 91 3a 23 	lds	r24, 0x233A	; 0x80233a <udd_g_ctrlreq+0x8>
    10e4:	90 91 3b 23 	lds	r25, 0x233B	; 0x80233b <udd_g_ctrlreq+0x9>
    10e8:	a8 01       	movw	r20, r16
    10ea:	61 e7       	ldi	r22, 0x71	; 113
    10ec:	71 e2       	ldi	r23, 0x21	; 33
    10ee:	8c 0f       	add	r24, r28
    10f0:	9d 1f       	adc	r25, r29
    10f2:	0e 94 90 10 	call	0x2120	; 0x2120 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    10f6:	c0 0f       	add	r28, r16
    10f8:	d1 1f       	adc	r29, r17
    10fa:	c0 93 b1 21 	sts	0x21B1, r28	; 0x8021b1 <udd_ctrl_payload_nb_trans>
    10fe:	d0 93 b2 21 	sts	0x21B2, r29	; 0x8021b2 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1102:	00 34       	cpi	r16, 0x40	; 64
    1104:	11 05       	cpc	r17, r1
    1106:	69 f4       	brne	.+26     	; 0x1122 <__vector_126+0x140>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1108:	80 91 b3 21 	lds	r24, 0x21B3	; 0x8021b3 <udd_ctrl_prev_payload_nb_trans>
    110c:	90 91 b4 21 	lds	r25, 0x21B4	; 0x8021b4 <udd_ctrl_prev_payload_nb_trans+0x1>
    1110:	8c 0f       	add	r24, r28
    1112:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1114:	20 91 38 23 	lds	r18, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
    1118:	30 91 39 23 	lds	r19, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
    111c:	82 17       	cp	r24, r18
    111e:	93 07       	cpc	r25, r19
    1120:	80 f0       	brcs	.+32     	; 0x1142 <__vector_126+0x160>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f3 e2       	ldi	r31, 0x23	; 35
    1126:	c2 87       	std	Z+10, r28	; 0x0a
    1128:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    112a:	06 84       	ldd	r0, Z+14	; 0x0e
    112c:	f7 85       	ldd	r31, Z+15	; 0x0f
    112e:	e0 2d       	mov	r30, r0
    1130:	30 97       	sbiw	r30, 0x00	; 0
    1132:	29 f0       	breq	.+10     	; 0x113e <__vector_126+0x15c>
			if (!udd_g_ctrlreq.over_under_run()) {
    1134:	19 95       	eicall
    1136:	81 11       	cpse	r24, r1
    1138:	02 c0       	rjmp	.+4      	; 0x113e <__vector_126+0x15c>
				// Stall ZLP
				udd_ctrl_stall_data();
    113a:	e6 d8       	rcall	.-3636   	; 0x308 <udd_ctrl_stall_data>
    113c:	34 c0       	rjmp	.+104    	; 0x11a6 <__vector_126+0x1c4>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    113e:	f2 d8       	rcall	.-3612   	; 0x324 <udd_ctrl_send_zlp_in>
    1140:	32 c0       	rjmp	.+100    	; 0x11a6 <__vector_126+0x1c4>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1142:	80 91 3c 23 	lds	r24, 0x233C	; 0x80233c <udd_g_ctrlreq+0xa>
    1146:	90 91 3d 23 	lds	r25, 0x233D	; 0x80233d <udd_g_ctrlreq+0xb>
    114a:	c8 17       	cp	r28, r24
    114c:	d9 07       	cpc	r29, r25
    114e:	f9 f4       	brne	.+62     	; 0x118e <__vector_126+0x1ac>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1150:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <udd_g_ctrlreq+0xe>
    1154:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <udd_g_ctrlreq+0xf>
    1158:	30 97       	sbiw	r30, 0x00	; 0
    115a:	11 f4       	brne	.+4      	; 0x1160 <__vector_126+0x17e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    115c:	d5 d8       	rcall	.-3670   	; 0x308 <udd_ctrl_stall_data>
    115e:	23 c0       	rjmp	.+70     	; 0x11a6 <__vector_126+0x1c4>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1160:	19 95       	eicall
    1162:	81 11       	cpse	r24, r1
    1164:	02 c0       	rjmp	.+4      	; 0x116a <__vector_126+0x188>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1166:	d0 d8       	rcall	.-3680   	; 0x308 <udd_ctrl_stall_data>
    1168:	1e c0       	rjmp	.+60     	; 0x11a6 <__vector_126+0x1c4>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    116a:	20 91 b3 21 	lds	r18, 0x21B3	; 0x8021b3 <udd_ctrl_prev_payload_nb_trans>
    116e:	30 91 b4 21 	lds	r19, 0x21B4	; 0x8021b4 <udd_ctrl_prev_payload_nb_trans+0x1>
    1172:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <udd_ctrl_payload_nb_trans>
    1176:	90 91 b2 21 	lds	r25, 0x21B2	; 0x8021b2 <udd_ctrl_payload_nb_trans+0x1>
    117a:	82 0f       	add	r24, r18
    117c:	93 1f       	adc	r25, r19
    117e:	80 93 b3 21 	sts	0x21B3, r24	; 0x8021b3 <udd_ctrl_prev_payload_nb_trans>
    1182:	90 93 b4 21 	sts	0x21B4, r25	; 0x8021b4 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1186:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <udd_ctrl_payload_nb_trans>
    118a:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    118e:	e4 ec       	ldi	r30, 0xC4	; 196
    1190:	f1 e2       	ldi	r31, 0x21	; 33
    1192:	02 e0       	ldi	r16, 0x02	; 2
    1194:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    1196:	00 e2       	ldi	r16, 0x20	; 32
    1198:	06 93       	lac	Z, r16
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <__vector_126+0x1c4>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    119c:	80 38       	cpi	r24, 0x80	; 128
    119e:	11 f4       	brne	.+4      	; 0x11a4 <__vector_126+0x1c2>
		udd_ctrl_in_sent();
    11a0:	d7 d8       	rcall	.-3666   	; 0x350 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <__vector_126+0x1c4>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    11a4:	f7 d9       	rcall	.-3090   	; 0x594 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    11a6:	ff 91       	pop	r31
    11a8:	ef 91       	pop	r30
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	bf 91       	pop	r27
    11b0:	af 91       	pop	r26
    11b2:	9f 91       	pop	r25
    11b4:	8f 91       	pop	r24
    11b6:	7f 91       	pop	r23
    11b8:	6f 91       	pop	r22
    11ba:	5f 91       	pop	r21
    11bc:	4f 91       	pop	r20
    11be:	3f 91       	pop	r19
    11c0:	2f 91       	pop	r18
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	0f 90       	pop	r0
    11c8:	0b be       	out	0x3b, r0	; 59
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <usb_callback_suspend_action>:

/* MAIN Loop Shutdown */

void halt(void)
{
	runmode = (uint8_t) 0;
    11d4:	08 95       	ret

000011d6 <usb_callback_resume_action>:
    11d6:	08 95       	ret

000011d8 <usb_callback_remotewakeup_enable>:
    11d8:	08 95       	ret

000011da <usb_callback_remotewakeup_disable>:
    11da:	08 95       	ret

000011dc <usb_callback_cdc_enable>:
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	80 93 f9 21 	sts	0x21F9, r24	; 0x8021f9 <my_flag_autorize_cdc_transfert>
    11e2:	08 95       	ret

000011e4 <usb_callback_cdc_disable>:
    11e4:	10 92 f9 21 	sts	0x21F9, r1	; 0x8021f9 <my_flag_autorize_cdc_transfert>
    11e8:	08 95       	ret

000011ea <usb_callback_config>:
    11ea:	08 95       	ret

000011ec <usb_callback_cdc_set_dtr>:
    11ec:	08 95       	ret

000011ee <usb_callback_cdc_set_rts>:
    11ee:	08 95       	ret

000011f0 <usb_callback_rx_notify>:
    11f0:	08 95       	ret

000011f2 <usb_callback_tx_empty_notify>:
    11f2:	08 95       	ret

000011f4 <main>:


/* main() function implementation */

int main(void)
{
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
	uint8_t retcode = 0;
	
	sysclk_init();
    11f8:	63 d0       	rcall	.+198    	; 0x12c0 <sysclk_init>
	irq_initialize_vectors();
    11fa:	87 e0       	ldi	r24, 0x07	; 7
    11fc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    1200:	78 94       	sei
	board_init();
    1202:	24 d8       	rcall	.-4024   	; 0x24c <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    1204:	e2 e4       	ldi	r30, 0x42	; 66
    1206:	f3 e2       	ldi	r31, 0x23	; 35
    1208:	10 82       	st	Z, r1
    120a:	11 82       	std	Z+1, r1	; 0x01
    120c:	12 82       	std	Z+2, r1	; 0x02
    120e:	13 82       	std	Z+3, r1	; 0x03
    1210:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    1212:	c1 e0       	ldi	r28, 0x01	; 1
    1214:	c5 83       	std	Z+5, r28	; 0x05
	sleepmgr_init();
		
	/* USB device stack start function to enable stack and start USB */
	udc_start();
    1216:	52 d4       	rcall	.+2212   	; 0x1abc <udc_start>

	/* Insert application code here, after the board has been initialized. */
    /* Replace with your application code */
	runmode = (uint8_t) 1;
    1218:	c0 93 fa 21 	sts	0x21FA, r28	; 0x8021fa <runmode>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    121c:	22 e4       	ldi	r18, 0x42	; 66
    121e:	33 e2       	ldi	r19, 0x23	; 35
    1220:	43 e4       	ldi	r20, 0x43	; 67
    1222:	53 e2       	ldi	r21, 0x23	; 35
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    1224:	c8 e4       	ldi	r28, 0x48	; 72
    1226:	d0 e0       	ldi	r29, 0x00	; 0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    1228:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    122a:	f9 01       	movw	r30, r18
    122c:	80 81       	ld	r24, Z
    122e:	81 11       	cpse	r24, r1
    1230:	08 c0       	rjmp	.+16     	; 0x1242 <main+0x4e>
    1232:	da 01       	movw	r26, r20
    1234:	e0 e0       	ldi	r30, 0x00	; 0
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    1236:	ef 5f       	subi	r30, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1238:	8d 91       	ld	r24, X+
    123a:	88 23       	and	r24, r24
    123c:	e1 f3       	breq	.-8      	; 0x1236 <main+0x42>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    123e:	e1 11       	cpse	r30, r1
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <main+0x52>
		cpu_irq_enable();
    1242:	78 94       	sei
    1244:	10 c0       	rjmp	.+32     	; 0x1266 <main+0x72>
    1246:	88 81       	ld	r24, Y

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	e1 50       	subi	r30, 0x01	; 1
    124c:	f0 4e       	sbci	r31, 0xE0	; 224
    124e:	81 7f       	andi	r24, 0xF1	; 241
    1250:	90 81       	ld	r25, Z
    1252:	89 2b       	or	r24, r25
    1254:	88 83       	st	Y, r24
	sleep_enable();
    1256:	88 81       	ld	r24, Y
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	88 83       	st	Y, r24

	cpu_irq_enable();
    125c:	78 94       	sei
	sleep_enter();
    125e:	88 95       	sleep

	sleep_disable();
    1260:	88 81       	ld	r24, Y
    1262:	8e 7f       	andi	r24, 0xFE	; 254
    1264:	88 83       	st	Y, r24
    while (runmode) {
    1266:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <runmode>
    126a:	81 11       	cpse	r24, r1
    126c:	dd cf       	rjmp	.-70     	; 0x1228 <main+0x34>
		task();
		sleepmgr_enter_sleep();
    }

	cpu_irq_disable();
    126e:	f8 94       	cli
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    1270:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1272:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <sleepmgr_locks>
    1276:	81 11       	cpse	r24, r1
    1278:	09 c0       	rjmp	.+18     	; 0x128c <main+0x98>
    127a:	a3 e4       	ldi	r26, 0x43	; 67
    127c:	b3 e2       	ldi	r27, 0x23	; 35
    127e:	e0 e0       	ldi	r30, 0x00	; 0
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    1280:	ef 5f       	subi	r30, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1282:	8d 91       	ld	r24, X+
    1284:	88 23       	and	r24, r24
    1286:	e1 f3       	breq	.-8      	; 0x1280 <main+0x8c>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    1288:	e1 11       	cpse	r30, r1
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <main+0x9c>
		cpu_irq_enable();
    128c:	78 94       	sei
    128e:	13 c0       	rjmp	.+38     	; 0x12b6 <main+0xc2>
    1290:	a8 e4       	ldi	r26, 0x48	; 72
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	8c 91       	ld	r24, X

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	e1 50       	subi	r30, 0x01	; 1
    129a:	f0 4e       	sbci	r31, 0xE0	; 224
    129c:	98 2f       	mov	r25, r24
    129e:	91 7f       	andi	r25, 0xF1	; 241
    12a0:	80 81       	ld	r24, Z
    12a2:	89 2b       	or	r24, r25
    12a4:	8c 93       	st	X, r24
	sleep_enable();
    12a6:	8c 91       	ld	r24, X
    12a8:	81 60       	ori	r24, 0x01	; 1
    12aa:	8c 93       	st	X, r24

	cpu_irq_enable();
    12ac:	78 94       	sei
	sleep_enter();
    12ae:	88 95       	sleep

	sleep_disable();
    12b0:	8c 91       	ld	r24, X
    12b2:	8e 7f       	andi	r24, 0xFE	; 254
    12b4:	8c 93       	st	X, r24
	sleepmgr_enter_sleep();
	
	return retcode;
}
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	28 97       	sbiw	r28, 0x08	; 8
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    12d4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    12d8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    12dc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    12e0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    12e4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    12e8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    12ec:	6c e1       	ldi	r22, 0x1C	; 28
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	ea d6       	rcall	.+3540   	; 0x20c8 <nvm_read_byte>
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	6d e1       	ldi	r22, 0x1D	; 29
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	e5 d6       	rcall	.+3530   	; 0x20c8 <nvm_read_byte>
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	21 f4       	brne	.+8      	; 0x1310 <sysclk_init+0x50>
    1308:	80 e4       	ldi	r24, 0x40	; 64
    130a:	93 e2       	ldi	r25, 0x23	; 35
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	9a 81       	ldd	r25, Y+2	; 0x02
    1314:	8b 83       	std	Y+3, r24	; 0x03
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	e0 e6       	ldi	r30, 0x60	; 96
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	82 83       	std	Z+2, r24	; 0x02
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	83 83       	std	Z+3, r24	; 0x03
    1322:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    1326:	84 fd       	sbrc	r24, 4
    1328:	21 c0       	rjmp	.+66     	; 0x136c <sysclk_init+0xac>
    132a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    132e:	83 fd       	sbrc	r24, 3
    1330:	0e c0       	rjmp	.+28     	; 0x134e <sysclk_init+0x8e>
    1332:	e0 e5       	ldi	r30, 0x50	; 80
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	12 82       	std	Z+2, r1	; 0x02
    1338:	8f b7       	in	r24, 0x3f	; 63
    133a:	8e 83       	std	Y+6, r24	; 0x06
    133c:	f8 94       	cli
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	80 81       	ld	r24, Z
    1342:	88 60       	ori	r24, 0x08	; 8
    1344:	80 83       	st	Z, r24
    1346:	9f bf       	out	0x3f, r25	; 63
    1348:	81 81       	ldd	r24, Z+1	; 0x01
    134a:	83 ff       	sbrs	r24, 3
    134c:	fd cf       	rjmp	.-6      	; 0x1348 <sysclk_init+0x88>
    134e:	8f b7       	in	r24, 0x3f	; 63
    1350:	8f 83       	std	Y+7, r24	; 0x07
    1352:	f8 94       	cli
    1354:	9f 81       	ldd	r25, Y+7	; 0x07
    1356:	e0 e5       	ldi	r30, 0x50	; 80
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	83 ec       	ldi	r24, 0xC3	; 195
    135c:	85 83       	std	Z+5, r24	; 0x05
    135e:	80 81       	ld	r24, Z
    1360:	80 61       	ori	r24, 0x10	; 16
    1362:	80 83       	st	Z, r24
    1364:	9f bf       	out	0x3f, r25	; 63
    1366:	81 81       	ldd	r24, Z+1	; 0x01
    1368:	84 ff       	sbrs	r24, 4
    136a:	fd cf       	rjmp	.-6      	; 0x1366 <sysclk_init+0xa6>
    136c:	64 e0       	ldi	r22, 0x04	; 4
    136e:	80 e4       	ldi	r24, 0x40	; 64
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	b4 d6       	rcall	.+3432   	; 0x20dc <ccp_write_io>
    1374:	8f b7       	in	r24, 0x3f	; 63
    1376:	88 87       	std	Y+8, r24	; 0x08
    1378:	f8 94       	cli
    137a:	98 85       	ldd	r25, Y+8	; 0x08
    137c:	e0 e5       	ldi	r30, 0x50	; 80
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	8e 7f       	andi	r24, 0xFE	; 254
    1384:	80 83       	st	Z, r24
    1386:	9f bf       	out	0x3f, r25	; 63
    1388:	12 82       	std	Z+2, r1	; 0x02
    138a:	8f b7       	in	r24, 0x3f	; 63
    138c:	8d 83       	std	Y+5, r24	; 0x05
    138e:	f8 94       	cli
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	80 81       	ld	r24, Z
    1394:	88 60       	ori	r24, 0x08	; 8
    1396:	80 83       	st	Z, r24
    1398:	9f bf       	out	0x3f, r25	; 63
    139a:	81 81       	ldd	r24, Z+1	; 0x01
    139c:	83 ff       	sbrs	r24, 3
    139e:	fd cf       	rjmp	.-6      	; 0x139a <sysclk_init+0xda>
    13a0:	8b e0       	ldi	r24, 0x0B	; 11
    13a2:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
    13a6:	28 96       	adiw	r28, 0x08	; 8
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <sysclk_enable_module>:
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	1f 92       	push	r1
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	9f b7       	in	r25, 0x3f	; 63
    13be:	99 83       	std	Y+1, r25	; 0x01
    13c0:	f8 94       	cli
    13c2:	99 81       	ldd	r25, Y+1	; 0x01
    13c4:	e8 2f       	mov	r30, r24
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	e0 59       	subi	r30, 0x90	; 144
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	60 95       	com	r22
    13ce:	80 81       	ld	r24, Z
    13d0:	68 23       	and	r22, r24
    13d2:	60 83       	st	Z, r22
    13d4:	9f bf       	out	0x3f, r25	; 63
    13d6:	0f 90       	pop	r0
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	08 95       	ret

000013de <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	1f 92       	push	r1
    13e4:	1f 92       	push	r1
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    13ea:	86 30       	cpi	r24, 0x06	; 6
    13ec:	11 f0       	breq	.+4      	; 0x13f2 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    13f2:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    13f4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    13f8:	81 fd       	sbrc	r24, 1
    13fa:	2a c0       	rjmp	.+84     	; 0x1450 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    13fc:	8f b7       	in	r24, 0x3f	; 63
    13fe:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1400:	f8 94       	cli
	return flags;
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1404:	e0 e5       	ldi	r30, 0x50	; 80
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	82 60       	ori	r24, 0x02	; 2
    140c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    140e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1410:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1412:	81 ff       	sbrs	r24, 1
    1414:	fd cf       	rjmp	.-6      	; 0x1410 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1416:	8f b7       	in	r24, 0x3f	; 63
    1418:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    141a:	f8 94       	cli
	return flags;
    141c:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    141e:	a0 e5       	ldi	r26, 0x50	; 80
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	16 96       	adiw	r26, 0x06	; 6
    1424:	8c 91       	ld	r24, X
    1426:	16 97       	sbiw	r26, 0x06	; 6
    1428:	89 7f       	andi	r24, 0xF9	; 249
    142a:	16 96       	adiw	r26, 0x06	; 6
    142c:	8c 93       	st	X, r24
    142e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1430:	e0 e6       	ldi	r30, 0x60	; 96
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 e8       	ldi	r24, 0x80	; 128
    1436:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1438:	8b eb       	ldi	r24, 0xBB	; 187
    143a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    143c:	16 96       	adiw	r26, 0x06	; 6
    143e:	8c 91       	ld	r24, X
    1440:	16 97       	sbiw	r26, 0x06	; 6
    1442:	84 60       	ori	r24, 0x04	; 4
    1444:	16 96       	adiw	r26, 0x06	; 6
    1446:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1448:	80 81       	ld	r24, Z
    144a:	81 60       	ori	r24, 0x01	; 1
    144c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    144e:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1450:	63 60       	ori	r22, 0x03	; 3
    1452:	84 e4       	ldi	r24, 0x44	; 68
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	42 d6       	rcall	.+3204   	; 0x20dc <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1458:	60 e4       	ldi	r22, 0x40	; 64
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	aa df       	rcall	.-172    	; 0x13b2 <sysclk_enable_module>
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	08 95       	ret

00001468 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
    1468:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <udi_cdc_nb_comm_enabled>
    146c:	81 50       	subi	r24, 0x01	; 1
    146e:	80 93 10 23 	sts	0x2310, r24	; 0x802310 <udi_cdc_nb_comm_enabled>
    1472:	08 95       	ret

00001474 <udi_cdc_data_setup>:
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	08 95       	ret

00001478 <udi_cdc_getsetting>:
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	08 95       	ret

0000147c <udi_cdc_line_coding_received>:
    147c:	6e e1       	ldi	r22, 0x1E	; 30
    147e:	73 e2       	ldi	r23, 0x23	; 35
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	b3 ce       	rjmp	.-666    	; 0x11ea <usb_callback_config>
    1484:	08 95       	ret

00001486 <udi_cdc_comm_enable>:
    1486:	10 92 10 23 	sts	0x2310, r1	; 0x802310 <udi_cdc_nb_comm_enabled>
    148a:	10 92 1c 23 	sts	0x231C, r1	; 0x80231c <udi_cdc_state>
    148e:	10 92 1d 23 	sts	0x231D, r1	; 0x80231d <udi_cdc_state+0x1>
    1492:	e2 e1       	ldi	r30, 0x12	; 18
    1494:	f3 e2       	ldi	r31, 0x23	; 35
    1496:	81 ea       	ldi	r24, 0xA1	; 161
    1498:	80 83       	st	Z, r24
    149a:	80 e2       	ldi	r24, 0x20	; 32
    149c:	81 83       	std	Z+1, r24	; 0x01
    149e:	12 82       	std	Z+2, r1	; 0x02
    14a0:	13 82       	std	Z+3, r1	; 0x03
    14a2:	14 82       	std	Z+4, r1	; 0x04
    14a4:	15 82       	std	Z+5, r1	; 0x05
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	86 83       	std	Z+6, r24	; 0x06
    14ac:	97 83       	std	Z+7, r25	; 0x07
    14ae:	10 86       	std	Z+8, r1	; 0x08
    14b0:	11 86       	std	Z+9, r1	; 0x09
    14b2:	ee e1       	ldi	r30, 0x1E	; 30
    14b4:	f3 e2       	ldi	r31, 0x23	; 35
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	92 ec       	ldi	r25, 0xC2	; 194
    14ba:	a1 e0       	ldi	r26, 0x01	; 1
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	80 83       	st	Z, r24
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	a2 83       	std	Z+2, r26	; 0x02
    14c4:	b3 83       	std	Z+3, r27	; 0x03
    14c6:	14 82       	std	Z+4, r1	; 0x04
    14c8:	15 82       	std	Z+5, r1	; 0x05
    14ca:	88 e0       	ldi	r24, 0x08	; 8
    14cc:	86 83       	std	Z+6, r24	; 0x06
    14ce:	bf 01       	movw	r22, r30
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	8b de       	rcall	.-746    	; 0x11ea <usb_callback_config>
    14d4:	83 de       	rcall	.-762    	; 0x11dc <usb_callback_cdc_enable>
    14d6:	88 23       	and	r24, r24
    14d8:	29 f0       	breq	.+10     	; 0x14e4 <udi_cdc_comm_enable+0x5e>
    14da:	90 91 10 23 	lds	r25, 0x2310	; 0x802310 <udi_cdc_nb_comm_enabled>
    14de:	9f 5f       	subi	r25, 0xFF	; 255
    14e0:	90 93 10 23 	sts	0x2310, r25	; 0x802310 <udi_cdc_nb_comm_enabled>
    14e4:	08 95       	ret

000014e6 <udi_cdc_tx_send>:
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	1f 92       	push	r1
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <udi_cdc_tx_trans_ongoing>
    14fa:	81 11       	cpse	r24, r1
    14fc:	95 c0       	rjmp	.+298    	; 0x1628 <udi_cdc_tx_send+0x142>
    14fe:	7e da       	rcall	.-2820   	; 0x9fc <udd_is_high_speed>
    1500:	88 23       	and	r24, r24
    1502:	49 f0       	breq	.+18     	; 0x1516 <udi_cdc_tx_send+0x30>
    1504:	00 91 ff 21 	lds	r16, 0x21FF	; 0x8021ff <udi_cdc_tx_sof_num>
    1508:	10 91 00 22 	lds	r17, 0x2200	; 0x802200 <udi_cdc_tx_sof_num+0x1>
    150c:	84 da       	rcall	.-2808   	; 0xa16 <udd_get_micro_frame_number>
    150e:	08 17       	cp	r16, r24
    1510:	19 07       	cpc	r17, r25
    1512:	51 f4       	brne	.+20     	; 0x1528 <udi_cdc_tx_send+0x42>
    1514:	89 c0       	rjmp	.+274    	; 0x1628 <udi_cdc_tx_send+0x142>
    1516:	00 91 ff 21 	lds	r16, 0x21FF	; 0x8021ff <udi_cdc_tx_sof_num>
    151a:	10 91 00 22 	lds	r17, 0x2200	; 0x802200 <udi_cdc_tx_sof_num+0x1>
    151e:	76 da       	rcall	.-2836   	; 0xa0c <udd_get_frame_number>
    1520:	08 17       	cp	r16, r24
    1522:	19 07       	cpc	r17, r25
    1524:	09 f4       	brne	.+2      	; 0x1528 <udi_cdc_tx_send+0x42>
    1526:	80 c0       	rjmp	.+256    	; 0x1628 <udi_cdc_tx_send+0x142>
    1528:	8f b7       	in	r24, 0x3f	; 63
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	f8 94       	cli
    152e:	19 81       	ldd	r17, Y+1	; 0x01
    1530:	00 91 01 22 	lds	r16, 0x2201	; 0x802201 <udi_cdc_tx_buf_sel>
    1534:	e0 2f       	mov	r30, r16
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	ee 0f       	add	r30, r30
    153a:	ff 1f       	adc	r31, r31
    153c:	ee 5f       	subi	r30, 0xFE	; 254
    153e:	fd 4d       	sbci	r31, 0xDD	; 221
    1540:	80 81       	ld	r24, Z
    1542:	91 81       	ldd	r25, Z+1	; 0x01
    1544:	89 2b       	or	r24, r25
    1546:	f9 f4       	brne	.+62     	; 0x1586 <udi_cdc_tx_send+0xa0>
    1548:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <sof_zlp_counter.4986>
    154c:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <sof_zlp_counter.4986+0x1>
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	80 93 fb 21 	sts	0x21FB, r24	; 0x8021fb <sof_zlp_counter.4986>
    1556:	90 93 fc 21 	sts	0x21FC, r25	; 0x8021fc <sof_zlp_counter.4986+0x1>
    155a:	50 da       	rcall	.-2912   	; 0x9fc <udd_is_high_speed>
    155c:	81 11       	cpse	r24, r1
    155e:	07 c0       	rjmp	.+14     	; 0x156e <udi_cdc_tx_send+0x88>
    1560:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <sof_zlp_counter.4986>
    1564:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <sof_zlp_counter.4986+0x1>
    1568:	84 36       	cpi	r24, 0x64	; 100
    156a:	91 05       	cpc	r25, r1
    156c:	50 f0       	brcs	.+20     	; 0x1582 <udi_cdc_tx_send+0x9c>
    156e:	46 da       	rcall	.-2932   	; 0x9fc <udd_is_high_speed>
    1570:	88 23       	and	r24, r24
    1572:	49 f0       	breq	.+18     	; 0x1586 <udi_cdc_tx_send+0xa0>
    1574:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <sof_zlp_counter.4986>
    1578:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <sof_zlp_counter.4986+0x1>
    157c:	80 32       	cpi	r24, 0x20	; 32
    157e:	93 40       	sbci	r25, 0x03	; 3
    1580:	10 f4       	brcc	.+4      	; 0x1586 <udi_cdc_tx_send+0xa0>
    1582:	1f bf       	out	0x3f, r17	; 63
    1584:	51 c0       	rjmp	.+162    	; 0x1628 <udi_cdc_tx_send+0x142>
    1586:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <sof_zlp_counter.4986>
    158a:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <sof_zlp_counter.4986+0x1>
    158e:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udi_cdc_tx_both_buf_to_send>
    1592:	81 11       	cpse	r24, r1
    1594:	06 c0       	rjmp	.+12     	; 0x15a2 <udi_cdc_tx_send+0xbc>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	01 11       	cpse	r16, r1
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udi_cdc_tx_buf_sel>
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <udi_cdc_tx_send+0xc4>
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	01 11       	cpse	r16, r1
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	08 2f       	mov	r16, r24
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 93 fe 21 	sts	0x21FE, r24	; 0x8021fe <udi_cdc_tx_trans_ongoing>
    15b0:	1f bf       	out	0x3f, r17	; 63
    15b2:	10 e0       	ldi	r17, 0x00	; 0
    15b4:	f8 01       	movw	r30, r16
    15b6:	ee 0f       	add	r30, r30
    15b8:	ff 1f       	adc	r31, r31
    15ba:	ee 5f       	subi	r30, 0xFE	; 254
    15bc:	fd 4d       	sbci	r31, 0xDD	; 221
    15be:	ff 24       	eor	r15, r15
    15c0:	f3 94       	inc	r15
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	80 34       	cpi	r24, 0x40	; 64
    15c8:	91 05       	cpc	r25, r1
    15ca:	09 f4       	brne	.+2      	; 0x15ce <udi_cdc_tx_send+0xe8>
    15cc:	f1 2c       	mov	r15, r1
    15ce:	ff 20       	and	r15, r15
    15d0:	79 f0       	breq	.+30     	; 0x15f0 <udi_cdc_tx_send+0x10a>
    15d2:	14 da       	rcall	.-3032   	; 0x9fc <udd_is_high_speed>
    15d4:	88 23       	and	r24, r24
    15d6:	31 f0       	breq	.+12     	; 0x15e4 <udi_cdc_tx_send+0xfe>
    15d8:	1e da       	rcall	.-3012   	; 0xa16 <udd_get_micro_frame_number>
    15da:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udi_cdc_tx_sof_num>
    15de:	90 93 00 22 	sts	0x2200, r25	; 0x802200 <udi_cdc_tx_sof_num+0x1>
    15e2:	0a c0       	rjmp	.+20     	; 0x15f8 <udi_cdc_tx_send+0x112>
    15e4:	13 da       	rcall	.-3034   	; 0xa0c <udd_get_frame_number>
    15e6:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udi_cdc_tx_sof_num>
    15ea:	90 93 00 22 	sts	0x2200, r25	; 0x802200 <udi_cdc_tx_sof_num+0x1>
    15ee:	04 c0       	rjmp	.+8      	; 0x15f8 <udi_cdc_tx_send+0x112>
    15f0:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udi_cdc_tx_sof_num>
    15f4:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udi_cdc_tx_sof_num+0x1>
    15f8:	f8 01       	movw	r30, r16
    15fa:	ee 0f       	add	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	ee 5f       	subi	r30, 0xFE	; 254
    1600:	fd 4d       	sbci	r31, 0xDD	; 221
    1602:	20 81       	ld	r18, Z
    1604:	31 81       	ldd	r19, Z+1	; 0x01
    1606:	a8 01       	movw	r20, r16
    1608:	00 24       	eor	r0, r0
    160a:	56 95       	lsr	r21
    160c:	47 95       	ror	r20
    160e:	07 94       	ror	r0
    1610:	56 95       	lsr	r21
    1612:	47 95       	ror	r20
    1614:	07 94       	ror	r0
    1616:	54 2f       	mov	r21, r20
    1618:	40 2d       	mov	r20, r0
    161a:	4a 5f       	subi	r20, 0xFA	; 250
    161c:	5d 4d       	sbci	r21, 0xDD	; 221
    161e:	0e e1       	ldi	r16, 0x1E	; 30
    1620:	1b e0       	ldi	r17, 0x0B	; 11
    1622:	6f 2d       	mov	r22, r15
    1624:	81 e8       	ldi	r24, 0x81	; 129
    1626:	db da       	rcall	.-2634   	; 0xbde <udd_ep_run>
    1628:	0f 90       	pop	r0
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	08 95       	ret

00001636 <udi_cdc_data_sof_notify>:
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	56 cf       	rjmp	.-340    	; 0x14e6 <udi_cdc_tx_send>
    163a:	08 95       	ret

0000163c <udi_cdc_data_sent>:
    163c:	81 11       	cpse	r24, r1
    163e:	19 c0       	rjmp	.+50     	; 0x1672 <udi_cdc_data_sent+0x36>
    1640:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <udi_cdc_tx_buf_sel>
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	22 23       	and	r18, r18
    164a:	11 f0       	breq	.+4      	; 0x1650 <udi_cdc_data_sent+0x14>
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	fc 01       	movw	r30, r24
    1656:	ee 5f       	subi	r30, 0xFE	; 254
    1658:	fd 4d       	sbci	r31, 0xDD	; 221
    165a:	10 82       	st	Z, r1
    165c:	11 82       	std	Z+1, r1	; 0x01
    165e:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udi_cdc_tx_both_buf_to_send>
    1662:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udi_cdc_tx_trans_ongoing>
    1666:	67 2b       	or	r22, r23
    1668:	11 f0       	breq	.+4      	; 0x166e <udi_cdc_data_sent+0x32>
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	c2 dd       	rcall	.-1148   	; 0x11f2 <usb_callback_tx_empty_notify>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	3a cf       	rjmp	.-396    	; 0x14e6 <udi_cdc_tx_send>
    1672:	08 95       	ret

00001674 <udi_cdc_data_disable>:
    1674:	80 91 0f 23 	lds	r24, 0x230F	; 0x80230f <udi_cdc_nb_data_enabled>
    1678:	81 50       	subi	r24, 0x01	; 1
    167a:	80 93 0f 23 	sts	0x230F, r24	; 0x80230f <udi_cdc_nb_data_enabled>
    167e:	80 91 0f 23 	lds	r24, 0x230F	; 0x80230f <udi_cdc_nb_data_enabled>
    1682:	b0 dd       	rcall	.-1184   	; 0x11e4 <usb_callback_cdc_disable>
    1684:	10 92 0e 23 	sts	0x230E, r1	; 0x80230e <udi_cdc_data_running>
    1688:	08 95       	ret

0000168a <udi_cdc_comm_setup>:
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	80 91 32 23 	lds	r24, 0x2332	; 0x802332 <udd_g_ctrlreq>
    1692:	88 23       	and	r24, r24
    1694:	e4 f4       	brge	.+56     	; 0x16ce <udi_cdc_comm_setup+0x44>
    1696:	80 76       	andi	r24, 0x60	; 96
    1698:	80 32       	cpi	r24, 0x20	; 32
    169a:	09 f0       	breq	.+2      	; 0x169e <udi_cdc_comm_setup+0x14>
    169c:	47 c0       	rjmp	.+142    	; 0x172c <udi_cdc_comm_setup+0xa2>
    169e:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <udd_g_ctrlreq+0x1>
    16a2:	81 32       	cpi	r24, 0x21	; 33
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <udi_cdc_comm_setup+0x1e>
    16a6:	44 c0       	rjmp	.+136    	; 0x1730 <udi_cdc_comm_setup+0xa6>
    16a8:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
    16ac:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
    16b0:	07 97       	sbiw	r24, 0x07	; 7
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <udi_cdc_comm_setup+0x2c>
    16b4:	3f c0       	rjmp	.+126    	; 0x1734 <udi_cdc_comm_setup+0xaa>
    16b6:	e2 e3       	ldi	r30, 0x32	; 50
    16b8:	f3 e2       	ldi	r31, 0x23	; 35
    16ba:	8e e1       	ldi	r24, 0x1E	; 30
    16bc:	93 e2       	ldi	r25, 0x23	; 35
    16be:	80 87       	std	Z+8, r24	; 0x08
    16c0:	91 87       	std	Z+9, r25	; 0x09
    16c2:	87 e0       	ldi	r24, 0x07	; 7
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	82 87       	std	Z+10, r24	; 0x0a
    16c8:	93 87       	std	Z+11, r25	; 0x0b
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	3a c0       	rjmp	.+116    	; 0x1742 <udi_cdc_comm_setup+0xb8>
    16ce:	80 76       	andi	r24, 0x60	; 96
    16d0:	80 32       	cpi	r24, 0x20	; 32
    16d2:	91 f5       	brne	.+100    	; 0x1738 <udi_cdc_comm_setup+0xae>
    16d4:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <udd_g_ctrlreq+0x1>
    16d8:	80 32       	cpi	r24, 0x20	; 32
    16da:	19 f0       	breq	.+6      	; 0x16e2 <udi_cdc_comm_setup+0x58>
    16dc:	82 32       	cpi	r24, 0x22	; 34
    16de:	b9 f0       	breq	.+46     	; 0x170e <udi_cdc_comm_setup+0x84>
    16e0:	2d c0       	rjmp	.+90     	; 0x173c <udi_cdc_comm_setup+0xb2>
    16e2:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
    16e6:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
    16ea:	07 97       	sbiw	r24, 0x07	; 7
    16ec:	49 f5       	brne	.+82     	; 0x1740 <udi_cdc_comm_setup+0xb6>
    16ee:	e2 e3       	ldi	r30, 0x32	; 50
    16f0:	f3 e2       	ldi	r31, 0x23	; 35
    16f2:	8e e3       	ldi	r24, 0x3E	; 62
    16f4:	9a e0       	ldi	r25, 0x0A	; 10
    16f6:	84 87       	std	Z+12, r24	; 0x0c
    16f8:	95 87       	std	Z+13, r25	; 0x0d
    16fa:	8e e1       	ldi	r24, 0x1E	; 30
    16fc:	93 e2       	ldi	r25, 0x23	; 35
    16fe:	80 87       	std	Z+8, r24	; 0x08
    1700:	91 87       	std	Z+9, r25	; 0x09
    1702:	87 e0       	ldi	r24, 0x07	; 7
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	82 87       	std	Z+10, r24	; 0x0a
    1708:	93 87       	std	Z+11, r25	; 0x0b
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	1a c0       	rjmp	.+52     	; 0x1742 <udi_cdc_comm_setup+0xb8>
    170e:	c2 e3       	ldi	r28, 0x32	; 50
    1710:	d3 e2       	ldi	r29, 0x23	; 35
    1712:	6a 81       	ldd	r22, Y+2	; 0x02
    1714:	61 70       	andi	r22, 0x01	; 1
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	69 dd       	rcall	.-1326   	; 0x11ec <usb_callback_cdc_set_dtr>
    171a:	6a 81       	ldd	r22, Y+2	; 0x02
    171c:	7b 81       	ldd	r23, Y+3	; 0x03
    171e:	76 95       	lsr	r23
    1720:	67 95       	ror	r22
    1722:	61 70       	andi	r22, 0x01	; 1
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	63 dd       	rcall	.-1338   	; 0x11ee <usb_callback_cdc_set_rts>
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	0b c0       	rjmp	.+22     	; 0x1742 <udi_cdc_comm_setup+0xb8>
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	09 c0       	rjmp	.+18     	; 0x1742 <udi_cdc_comm_setup+0xb8>
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	07 c0       	rjmp	.+14     	; 0x1742 <udi_cdc_comm_setup+0xb8>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <udi_cdc_comm_setup+0xb8>
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <udi_cdc_comm_setup+0xb8>
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <udi_cdc_comm_setup+0xb8>
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	08 95       	ret

00001748 <udi_cdc_multi_get_nb_received_data>:
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	1f 92       	push	r1
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	8f b7       	in	r24, 0x3f	; 63
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	f8 94       	cli
    1758:	49 81       	ldd	r20, Y+1	; 0x01
    175a:	20 91 87 22 	lds	r18, 0x2287	; 0x802287 <udi_cdc_rx_pos>
    175e:	30 91 88 22 	lds	r19, 0x2288	; 0x802288 <udi_cdc_rx_pos+0x1>
    1762:	e0 91 89 22 	lds	r30, 0x2289	; 0x802289 <udi_cdc_rx_buf_sel>
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	e6 57       	subi	r30, 0x76	; 118
    176e:	fd 4d       	sbci	r31, 0xDD	; 221
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	4f bf       	out	0x3f, r20	; 63
    1776:	82 1b       	sub	r24, r18
    1778:	93 0b       	sbc	r25, r19
    177a:	0f 90       	pop	r0
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	08 95       	ret

00001782 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    1782:	e2 df       	rcall	.-60     	; 0x1748 <udi_cdc_multi_get_nb_received_data>
    1784:	21 e0       	ldi	r18, 0x01	; 1
    1786:	89 2b       	or	r24, r25
    1788:	09 f4       	brne	.+2      	; 0x178c <udi_cdc_multi_is_rx_ready+0xa>
    178a:	20 e0       	ldi	r18, 0x00	; 0
}
    178c:	82 2f       	mov	r24, r18
    178e:	08 95       	ret

00001790 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	1f 92       	push	r1
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    179e:	8f b7       	in	r24, 0x3f	; 63
    17a0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    17a2:	f8 94       	cli
	return flags;
    17a4:	99 81       	ldd	r25, Y+1	; 0x01
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    17a6:	20 91 89 22 	lds	r18, 0x2289	; 0x802289 <udi_cdc_rx_buf_sel>
	if (udi_cdc_rx_trans_ongoing[port] ||
    17aa:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <udi_cdc_rx_trans_ongoing>
    17ae:	81 11       	cpse	r24, r1
    17b0:	10 c0       	rjmp	.+32     	; 0x17d2 <udi_cdc_rx_start+0x42>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    17b2:	60 91 87 22 	lds	r22, 0x2287	; 0x802287 <udi_cdc_rx_pos>
    17b6:	70 91 88 22 	lds	r23, 0x2288	; 0x802288 <udi_cdc_rx_pos+0x1>
    17ba:	02 2f       	mov	r16, r18
    17bc:	10 e0       	ldi	r17, 0x00	; 0
    17be:	f8 01       	movw	r30, r16
    17c0:	ee 0f       	add	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	e6 57       	subi	r30, 0x76	; 118
    17c6:	fd 4d       	sbci	r31, 0xDD	; 221
    17c8:	40 81       	ld	r20, Z
    17ca:	51 81       	ldd	r21, Z+1	; 0x01
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    17cc:	64 17       	cp	r22, r20
    17ce:	75 07       	cpc	r23, r21
    17d0:	18 f4       	brcc	.+6      	; 0x17d8 <udi_cdc_rx_start+0x48>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17d2:	9f bf       	out	0x3f, r25	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	26 c0       	rjmp	.+76     	; 0x1824 <udi_cdc_rx_start+0x94>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    17d8:	10 92 87 22 	sts	0x2287, r1	; 0x802287 <udi_cdc_rx_pos>
    17dc:	10 92 88 22 	sts	0x2288, r1	; 0x802288 <udi_cdc_rx_pos+0x1>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	21 11       	cpse	r18, r1
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	80 93 89 22 	sts	0x2289, r24	; 0x802289 <udi_cdc_rx_buf_sel>

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <udi_cdc_rx_trans_ongoing>
    17f0:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	c6 df       	rcall	.-116    	; 0x1782 <udi_cdc_multi_is_rx_ready>
    17f6:	88 23       	and	r24, r24
    17f8:	11 f0       	breq	.+4      	; 0x17fe <udi_cdc_rx_start+0x6e>
		UDI_CDC_RX_NOTIFY(port);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	f9 dc       	rcall	.-1550   	; 0x11f0 <usb_callback_rx_notify>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    17fe:	a8 01       	movw	r20, r16
    1800:	00 24       	eor	r0, r0
    1802:	56 95       	lsr	r21
    1804:	47 95       	ror	r20
    1806:	07 94       	ror	r0
    1808:	56 95       	lsr	r21
    180a:	47 95       	ror	r20
    180c:	07 94       	ror	r0
    180e:	54 2f       	mov	r21, r20
    1810:	40 2d       	mov	r20, r0
    1812:	42 57       	subi	r20, 0x72	; 114
    1814:	5d 4d       	sbci	r21, 0xDD	; 221
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    1816:	0a e4       	ldi	r16, 0x4A	; 74
    1818:	1c e0       	ldi	r17, 0x0C	; 12
    181a:	20 e4       	ldi	r18, 0x40	; 64
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	dd d9       	rcall	.-3142   	; 0xbde <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	08 95       	ret

00001830 <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
    1830:	10 92 0f 23 	sts	0x230F, r1	; 0x80230f <udi_cdc_nb_data_enabled>
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    1834:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udi_cdc_tx_trans_ongoing>
	udi_cdc_tx_both_buf_to_send[port] = false;
    1838:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_buf_sel[port] = 0;
    183c:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf_nb[port][0] = 0;
    1840:	e2 e0       	ldi	r30, 0x02	; 2
    1842:	f2 e2       	ldi	r31, 0x22	; 34
    1844:	10 82       	st	Z, r1
    1846:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_buf_nb[port][1] = 0;
    1848:	12 82       	std	Z+2, r1	; 0x02
    184a:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_tx_sof_num[port] = 0;
    184c:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udi_cdc_tx_sof_num>
    1850:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udi_cdc_tx_sof_num+0x1>
	udi_cdc_tx_send(port);
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	47 de       	rcall	.-882    	; 0x14e6 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    1858:	10 92 86 22 	sts	0x2286, r1	; 0x802286 <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_buf_sel[port] = 0;
    185c:	10 92 89 22 	sts	0x2289, r1	; 0x802289 <udi_cdc_rx_buf_sel>
	udi_cdc_rx_buf_nb[port][0] = 0;
    1860:	ea e8       	ldi	r30, 0x8A	; 138
    1862:	f2 e2       	ldi	r31, 0x22	; 34
    1864:	10 82       	st	Z, r1
    1866:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_rx_buf_nb[port][1] = 0;
    1868:	12 82       	std	Z+2, r1	; 0x02
    186a:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_rx_pos[port] = 0;
    186c:	10 92 87 22 	sts	0x2287, r1	; 0x802287 <udi_cdc_rx_pos>
    1870:	10 92 88 22 	sts	0x2288, r1	; 0x802288 <udi_cdc_rx_pos+0x1>
	if (!udi_cdc_rx_start(port)) {
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	8c df       	rcall	.-232    	; 0x1790 <udi_cdc_rx_start>
    1878:	88 23       	and	r24, r24
    187a:	59 f0       	breq	.+22     	; 0x1892 <udi_cdc_data_enable+0x62>
		return false;
	}
	udi_cdc_nb_data_enabled++;
    187c:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <udi_cdc_nb_data_enabled>
    1880:	9f 5f       	subi	r25, 0xFF	; 255
    1882:	90 93 0f 23 	sts	0x230F, r25	; 0x80230f <udi_cdc_nb_data_enabled>
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    1886:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <udi_cdc_nb_data_enabled>
    188a:	91 30       	cpi	r25, 0x01	; 1
    188c:	11 f4       	brne	.+4      	; 0x1892 <udi_cdc_data_enable+0x62>
		udi_cdc_data_running = true;
    188e:	90 93 0e 23 	sts	0x230E, r25	; 0x80230e <udi_cdc_data_running>
	}
	return true;
}
    1892:	08 95       	ret

00001894 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    1894:	0f 93       	push	r16
    1896:	1f 93       	push	r17
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
    1898:	81 11       	cpse	r24, r1
    189a:	28 c0       	rjmp	.+80     	; 0x18ec <udi_cdc_data_received+0x58>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    189c:	80 91 89 22 	lds	r24, 0x2289	; 0x802289 <udi_cdc_rx_buf_sel>
    18a0:	e1 e0       	ldi	r30, 0x01	; 1
    18a2:	81 11       	cpse	r24, r1
    18a4:	e0 e0       	ldi	r30, 0x00	; 0
    18a6:	84 2f       	mov	r24, r20
	if (!n) {
    18a8:	61 15       	cp	r22, r1
    18aa:	71 05       	cpc	r23, r1
    18ac:	a1 f4       	brne	.+40     	; 0x18d6 <udi_cdc_data_received+0x42>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	00 24       	eor	r0, r0
    18b2:	f6 95       	lsr	r31
    18b4:	e7 95       	ror	r30
    18b6:	07 94       	ror	r0
    18b8:	f6 95       	lsr	r31
    18ba:	e7 95       	ror	r30
    18bc:	07 94       	ror	r0
    18be:	fe 2f       	mov	r31, r30
    18c0:	e0 2d       	mov	r30, r0
    18c2:	af 01       	movw	r20, r30
    18c4:	42 57       	subi	r20, 0x72	; 114
    18c6:	5d 4d       	sbci	r21, 0xDD	; 221
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    18c8:	0a e4       	ldi	r16, 0x4A	; 74
    18ca:	1c e0       	ldi	r17, 0x0C	; 12
    18cc:	20 e4       	ldi	r18, 0x40	; 64
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	85 d9       	rcall	.-3318   	; 0xbde <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    18d4:	0b c0       	rjmp	.+22     	; 0x18ec <udi_cdc_data_received+0x58>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	ee 0f       	add	r30, r30
    18da:	ff 1f       	adc	r31, r31
    18dc:	e6 57       	subi	r30, 0x76	; 118
    18de:	fd 4d       	sbci	r31, 0xDD	; 221
    18e0:	60 83       	st	Z, r22
    18e2:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
    18e4:	10 92 86 22 	sts	0x2286, r1	; 0x802286 <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_start(port);
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	52 df       	rcall	.-348    	; 0x1790 <udi_cdc_rx_start>
}
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	08 95       	ret

000018f2 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    18f2:	e0 91 2a 23 	lds	r30, 0x232A	; 0x80232a <udc_ptr_conf>
    18f6:	f0 91 2b 23 	lds	r31, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    18fa:	01 90       	ld	r0, Z+
    18fc:	f0 81       	ld	r31, Z
    18fe:	e0 2d       	mov	r30, r0
    1900:	22 81       	ldd	r18, Z+2	; 0x02
    1902:	33 81       	ldd	r19, Z+3	; 0x03
    1904:	2e 0f       	add	r18, r30
    1906:	3f 1f       	adc	r19, r31
    1908:	fc 01       	movw	r30, r24
    190a:	40 81       	ld	r20, Z
    190c:	e4 0f       	add	r30, r20
    190e:	f1 1d       	adc	r31, r1
    1910:	e2 17       	cp	r30, r18
    1912:	f3 07       	cpc	r31, r19
    1914:	b8 f4       	brcc	.+46     	; 0x1944 <udc_next_desc_in_iface+0x52>
    1916:	81 81       	ldd	r24, Z+1	; 0x01
    1918:	84 30       	cpi	r24, 0x04	; 4
    191a:	b9 f0       	breq	.+46     	; 0x194a <udc_next_desc_in_iface+0x58>
    191c:	86 13       	cpse	r24, r22
    191e:	09 c0       	rjmp	.+18     	; 0x1932 <udc_next_desc_in_iface+0x40>
    1920:	05 c0       	rjmp	.+10     	; 0x192c <udc_next_desc_in_iface+0x3a>
    1922:	81 81       	ldd	r24, Z+1	; 0x01
    1924:	84 30       	cpi	r24, 0x04	; 4
    1926:	a1 f0       	breq	.+40     	; 0x1950 <udc_next_desc_in_iface+0x5e>
    1928:	86 13       	cpse	r24, r22
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <udc_next_desc_in_iface+0x40>
    192c:	8e 2f       	mov	r24, r30
    192e:	9f 2f       	mov	r25, r31
    1930:	08 95       	ret
    1932:	80 81       	ld	r24, Z
    1934:	e8 0f       	add	r30, r24
    1936:	f1 1d       	adc	r31, r1
    1938:	e2 17       	cp	r30, r18
    193a:	f3 07       	cpc	r31, r19
    193c:	90 f3       	brcs	.-28     	; 0x1922 <udc_next_desc_in_iface+0x30>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	08 95       	ret
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	08 95       	ret
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	08 95       	ret
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	08 95       	ret

00001956 <udc_valid_address>:
    1956:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <udd_g_ctrlreq+0x2>
    195a:	8f 77       	andi	r24, 0x7F	; 127
    195c:	51 c8       	rjmp	.-3934   	; 0xa00 <udd_set_address>
    195e:	08 95       	ret

00001960 <udc_update_iface_desc>:
    1960:	90 91 2c 23 	lds	r25, 0x232C	; 0x80232c <udc_num_configuration>
    1964:	99 23       	and	r25, r25
    1966:	81 f1       	breq	.+96     	; 0x19c8 <udc_update_iface_desc+0x68>
    1968:	e0 91 2a 23 	lds	r30, 0x232A	; 0x80232a <udc_ptr_conf>
    196c:	f0 91 2b 23 	lds	r31, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    1970:	01 90       	ld	r0, Z+
    1972:	f0 81       	ld	r31, Z
    1974:	e0 2d       	mov	r30, r0
    1976:	94 81       	ldd	r25, Z+4	; 0x04
    1978:	89 17       	cp	r24, r25
    197a:	40 f5       	brcc	.+80     	; 0x19cc <udc_update_iface_desc+0x6c>
    197c:	e0 93 28 23 	sts	0x2328, r30	; 0x802328 <udc_ptr_iface>
    1980:	f0 93 29 23 	sts	0x2329, r31	; 0x802329 <udc_ptr_iface+0x1>
    1984:	22 81       	ldd	r18, Z+2	; 0x02
    1986:	33 81       	ldd	r19, Z+3	; 0x03
    1988:	2e 0f       	add	r18, r30
    198a:	3f 1f       	adc	r19, r31
    198c:	e2 17       	cp	r30, r18
    198e:	f3 07       	cpc	r31, r19
    1990:	f8 f4       	brcc	.+62     	; 0x19d0 <udc_update_iface_desc+0x70>
    1992:	91 81       	ldd	r25, Z+1	; 0x01
    1994:	94 30       	cpi	r25, 0x04	; 4
    1996:	61 f4       	brne	.+24     	; 0x19b0 <udc_update_iface_desc+0x50>
    1998:	92 81       	ldd	r25, Z+2	; 0x02
    199a:	98 13       	cpse	r25, r24
    199c:	09 c0       	rjmp	.+18     	; 0x19b0 <udc_update_iface_desc+0x50>
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	96 13       	cpse	r25, r22
    19a2:	06 c0       	rjmp	.+12     	; 0x19b0 <udc_update_iface_desc+0x50>
    19a4:	e0 93 28 23 	sts	0x2328, r30	; 0x802328 <udc_ptr_iface>
    19a8:	f0 93 29 23 	sts	0x2329, r31	; 0x802329 <udc_ptr_iface+0x1>
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	08 95       	ret
    19b0:	90 81       	ld	r25, Z
    19b2:	e9 0f       	add	r30, r25
    19b4:	f1 1d       	adc	r31, r1
    19b6:	e2 17       	cp	r30, r18
    19b8:	f3 07       	cpc	r31, r19
    19ba:	58 f3       	brcs	.-42     	; 0x1992 <udc_update_iface_desc+0x32>
    19bc:	e0 93 28 23 	sts	0x2328, r30	; 0x802328 <udc_ptr_iface>
    19c0:	f0 93 29 23 	sts	0x2329, r31	; 0x802329 <udc_ptr_iface+0x1>
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	08 95       	ret
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	08 95       	ret
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	08 95       	ret
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	08 95       	ret

000019d4 <udc_iface_disable>:
    19d4:	ef 92       	push	r14
    19d6:	ff 92       	push	r15
    19d8:	1f 93       	push	r17
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	c8 2f       	mov	r28, r24
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	be df       	rcall	.-132    	; 0x1960 <udc_update_iface_desc>
    19e4:	18 2f       	mov	r17, r24
    19e6:	88 23       	and	r24, r24
    19e8:	79 f1       	breq	.+94     	; 0x1a48 <udc_iface_disable+0x74>
    19ea:	a0 91 2a 23 	lds	r26, 0x232A	; 0x80232a <udc_ptr_conf>
    19ee:	b0 91 2b 23 	lds	r27, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    19f2:	ec 2f       	mov	r30, r28
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	ee 0f       	add	r30, r30
    19f8:	ff 1f       	adc	r31, r31
    19fa:	12 96       	adiw	r26, 0x02	; 2
    19fc:	8d 91       	ld	r24, X+
    19fe:	9c 91       	ld	r25, X
    1a00:	13 97       	sbiw	r26, 0x03	; 3
    1a02:	e8 0f       	add	r30, r24
    1a04:	f9 1f       	adc	r31, r25
    1a06:	e0 80       	ld	r14, Z
    1a08:	f1 80       	ldd	r15, Z+1	; 0x01
    1a0a:	d7 01       	movw	r26, r14
    1a0c:	16 96       	adiw	r26, 0x06	; 6
    1a0e:	ed 91       	ld	r30, X+
    1a10:	fc 91       	ld	r31, X
    1a12:	17 97       	sbiw	r26, 0x07	; 7
    1a14:	19 95       	eicall
    1a16:	68 2f       	mov	r22, r24
    1a18:	8c 2f       	mov	r24, r28
    1a1a:	a2 df       	rcall	.-188    	; 0x1960 <udc_update_iface_desc>
    1a1c:	18 2f       	mov	r17, r24
    1a1e:	88 23       	and	r24, r24
    1a20:	99 f0       	breq	.+38     	; 0x1a48 <udc_iface_disable+0x74>
    1a22:	c0 91 28 23 	lds	r28, 0x2328	; 0x802328 <udc_ptr_iface>
    1a26:	d0 91 29 23 	lds	r29, 0x2329	; 0x802329 <udc_ptr_iface+0x1>
    1a2a:	65 e0       	ldi	r22, 0x05	; 5
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	61 df       	rcall	.-318    	; 0x18f2 <udc_next_desc_in_iface>
    1a30:	ec 01       	movw	r28, r24
    1a32:	89 2b       	or	r24, r25
    1a34:	19 f0       	breq	.+6      	; 0x1a3c <udc_iface_disable+0x68>
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	e3 d9       	rcall	.-3130   	; 0xe00 <udd_ep_free>
    1a3a:	f7 cf       	rjmp	.-18     	; 0x1a2a <udc_iface_disable+0x56>
    1a3c:	d7 01       	movw	r26, r14
    1a3e:	12 96       	adiw	r26, 0x02	; 2
    1a40:	ed 91       	ld	r30, X+
    1a42:	fc 91       	ld	r31, X
    1a44:	13 97       	sbiw	r26, 0x03	; 3
    1a46:	19 95       	eicall
    1a48:	81 2f       	mov	r24, r17
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	ff 90       	pop	r15
    1a52:	ef 90       	pop	r14
    1a54:	08 95       	ret

00001a56 <udc_iface_enable>:
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	18 2f       	mov	r17, r24
    1a5e:	80 df       	rcall	.-256    	; 0x1960 <udc_update_iface_desc>
    1a60:	88 23       	and	r24, r24
    1a62:	41 f1       	breq	.+80     	; 0x1ab4 <udc_iface_enable+0x5e>
    1a64:	c0 91 28 23 	lds	r28, 0x2328	; 0x802328 <udc_ptr_iface>
    1a68:	d0 91 29 23 	lds	r29, 0x2329	; 0x802329 <udc_ptr_iface+0x1>
    1a6c:	65 e0       	ldi	r22, 0x05	; 5
    1a6e:	ce 01       	movw	r24, r28
    1a70:	40 df       	rcall	.-384    	; 0x18f2 <udc_next_desc_in_iface>
    1a72:	ec 01       	movw	r28, r24
    1a74:	89 2b       	or	r24, r25
    1a76:	49 f0       	breq	.+18     	; 0x1a8a <udc_iface_enable+0x34>
    1a78:	4c 81       	ldd	r20, Y+4	; 0x04
    1a7a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a7c:	6b 81       	ldd	r22, Y+3	; 0x03
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	0e 94 15 05 	call	0xa2a	; 0xa2a <udd_ep_alloc>
    1a84:	81 11       	cpse	r24, r1
    1a86:	f2 cf       	rjmp	.-28     	; 0x1a6c <udc_iface_enable+0x16>
    1a88:	15 c0       	rjmp	.+42     	; 0x1ab4 <udc_iface_enable+0x5e>
    1a8a:	a0 91 2a 23 	lds	r26, 0x232A	; 0x80232a <udc_ptr_conf>
    1a8e:	b0 91 2b 23 	lds	r27, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    1a92:	e1 2f       	mov	r30, r17
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	ee 0f       	add	r30, r30
    1a98:	ff 1f       	adc	r31, r31
    1a9a:	12 96       	adiw	r26, 0x02	; 2
    1a9c:	8d 91       	ld	r24, X+
    1a9e:	9c 91       	ld	r25, X
    1aa0:	13 97       	sbiw	r26, 0x03	; 3
    1aa2:	e8 0f       	add	r30, r24
    1aa4:	f9 1f       	adc	r31, r25
    1aa6:	01 90       	ld	r0, Z+
    1aa8:	f0 81       	ld	r31, Z
    1aaa:	e0 2d       	mov	r30, r0
    1aac:	01 90       	ld	r0, Z+
    1aae:	f0 81       	ld	r31, Z
    1ab0:	e0 2d       	mov	r30, r0
    1ab2:	19 95       	eicall
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	08 95       	ret

00001abc <udc_start>:
    1abc:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <udd_enable>
    1ac0:	08 95       	ret

00001ac2 <udc_reset>:
    1ac2:	cf 93       	push	r28
    1ac4:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <udc_num_configuration>
    1ac8:	88 23       	and	r24, r24
    1aca:	c1 f0       	breq	.+48     	; 0x1afc <udc_reset+0x3a>
    1acc:	e0 91 2a 23 	lds	r30, 0x232A	; 0x80232a <udc_ptr_conf>
    1ad0:	f0 91 2b 23 	lds	r31, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    1ad4:	01 90       	ld	r0, Z+
    1ad6:	f0 81       	ld	r31, Z
    1ad8:	e0 2d       	mov	r30, r0
    1ada:	84 81       	ldd	r24, Z+4	; 0x04
    1adc:	88 23       	and	r24, r24
    1ade:	71 f0       	breq	.+28     	; 0x1afc <udc_reset+0x3a>
    1ae0:	c0 e0       	ldi	r28, 0x00	; 0
    1ae2:	8c 2f       	mov	r24, r28
    1ae4:	77 df       	rcall	.-274    	; 0x19d4 <udc_iface_disable>
    1ae6:	cf 5f       	subi	r28, 0xFF	; 255
    1ae8:	e0 91 2a 23 	lds	r30, 0x232A	; 0x80232a <udc_ptr_conf>
    1aec:	f0 91 2b 23 	lds	r31, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    1af0:	01 90       	ld	r0, Z+
    1af2:	f0 81       	ld	r31, Z
    1af4:	e0 2d       	mov	r30, r0
    1af6:	84 81       	ldd	r24, Z+4	; 0x04
    1af8:	c8 17       	cp	r28, r24
    1afa:	98 f3       	brcs	.-26     	; 0x1ae2 <udc_reset+0x20>
    1afc:	10 92 2c 23 	sts	0x232C, r1	; 0x80232c <udc_num_configuration>
    1b00:	80 91 30 23 	lds	r24, 0x2330	; 0x802330 <udc_device_status>
    1b04:	81 fd       	sbrc	r24, 1
    1b06:	69 db       	rcall	.-2350   	; 0x11da <usb_callback_remotewakeup_disable>
    1b08:	10 92 30 23 	sts	0x2330, r1	; 0x802330 <udc_device_status>
    1b0c:	10 92 31 23 	sts	0x2331, r1	; 0x802331 <udc_device_status+0x1>
    1b10:	cf 91       	pop	r28
    1b12:	08 95       	ret

00001b14 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1b14:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1b16:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <udc_num_configuration>
    1b1a:	88 23       	and	r24, r24
    1b1c:	49 f1       	breq	.+82     	; 0x1b70 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b1e:	a0 91 2a 23 	lds	r26, 0x232A	; 0x80232a <udc_ptr_conf>
    1b22:	b0 91 2b 23 	lds	r27, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    1b26:	ed 91       	ld	r30, X+
    1b28:	fc 91       	ld	r31, X
    1b2a:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1b2c:	84 81       	ldd	r24, Z+4	; 0x04
    1b2e:	88 23       	and	r24, r24
    1b30:	f9 f0       	breq	.+62     	; 0x1b70 <udc_sof_notify+0x5c>
    1b32:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1b34:	ec 2f       	mov	r30, r28
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	ee 0f       	add	r30, r30
    1b3a:	ff 1f       	adc	r31, r31
    1b3c:	12 96       	adiw	r26, 0x02	; 2
    1b3e:	8d 91       	ld	r24, X+
    1b40:	9c 91       	ld	r25, X
    1b42:	13 97       	sbiw	r26, 0x03	; 3
    1b44:	e8 0f       	add	r30, r24
    1b46:	f9 1f       	adc	r31, r25
    1b48:	01 90       	ld	r0, Z+
    1b4a:	f0 81       	ld	r31, Z
    1b4c:	e0 2d       	mov	r30, r0
    1b4e:	00 84       	ldd	r0, Z+8	; 0x08
    1b50:	f1 85       	ldd	r31, Z+9	; 0x09
    1b52:	e0 2d       	mov	r30, r0
    1b54:	30 97       	sbiw	r30, 0x00	; 0
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1b58:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1b5a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b5c:	a0 91 2a 23 	lds	r26, 0x232A	; 0x80232a <udc_ptr_conf>
    1b60:	b0 91 2b 23 	lds	r27, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    1b64:	ed 91       	ld	r30, X+
    1b66:	fc 91       	ld	r31, X
    1b68:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1b6a:	84 81       	ldd	r24, Z+4	; 0x04
    1b6c:	c8 17       	cp	r28, r24
    1b6e:	10 f3       	brcs	.-60     	; 0x1b34 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1b70:	cf 91       	pop	r28
    1b72:	08 95       	ret

00001b74 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1b7c:	e2 e3       	ldi	r30, 0x32	; 50
    1b7e:	f3 e2       	ldi	r31, 0x23	; 35
    1b80:	12 86       	std	Z+10, r1	; 0x0a
    1b82:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1b84:	14 86       	std	Z+12, r1	; 0x0c
    1b86:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1b88:	16 86       	std	Z+14, r1	; 0x0e
    1b8a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1b8c:	80 81       	ld	r24, Z
    1b8e:	88 23       	and	r24, r24
    1b90:	0c f0       	brlt	.+2      	; 0x1b94 <udc_process_setup+0x20>
    1b92:	8b c2       	rjmp	.+1302   	; 0x20aa <udc_process_setup+0x536>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1b94:	20 91 38 23 	lds	r18, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
    1b98:	30 91 39 23 	lds	r19, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
    1b9c:	21 15       	cp	r18, r1
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <udc_process_setup+0x30>
    1ba2:	7e c2       	rjmp	.+1276   	; 0x20a0 <udc_process_setup+0x52c>
    1ba4:	79 c2       	rjmp	.+1266   	; 0x2098 <udc_process_setup+0x524>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1ba6:	8f 71       	andi	r24, 0x1F	; 31
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <udc_process_setup+0x38>
    1baa:	ae c0       	rjmp	.+348    	; 0x1d08 <udc_process_setup+0x194>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1bac:	90 91 33 23 	lds	r25, 0x2333	; 0x802333 <udd_g_ctrlreq+0x1>
    1bb0:	96 30       	cpi	r25, 0x06	; 6
    1bb2:	81 f0       	breq	.+32     	; 0x1bd4 <udc_process_setup+0x60>
    1bb4:	98 30       	cpi	r25, 0x08	; 8
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <udc_process_setup+0x46>
    1bb8:	9c c0       	rjmp	.+312    	; 0x1cf2 <udc_process_setup+0x17e>
    1bba:	91 11       	cpse	r25, r1
    1bbc:	a5 c0       	rjmp	.+330    	; 0x1d08 <udc_process_setup+0x194>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1bbe:	22 30       	cpi	r18, 0x02	; 2
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	09 f0       	breq	.+2      	; 0x1bc6 <udc_process_setup+0x52>
    1bc4:	f2 c1       	rjmp	.+996    	; 0x1faa <udc_process_setup+0x436>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1bc6:	62 e0       	ldi	r22, 0x02	; 2
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	80 e3       	ldi	r24, 0x30	; 48
    1bcc:	93 e2       	ldi	r25, 0x23	; 35
    1bce:	0e 94 0e 05 	call	0xa1c	; 0xa1c <udd_set_setup_payload>
    1bd2:	74 c2       	rjmp	.+1256   	; 0x20bc <udc_process_setup+0x548>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1bd4:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <udd_g_ctrlreq+0x2>
    1bd8:	90 91 35 23 	lds	r25, 0x2335	; 0x802335 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1bdc:	29 2f       	mov	r18, r25
    1bde:	33 27       	eor	r19, r19
    1be0:	22 30       	cpi	r18, 0x02	; 2
    1be2:	31 05       	cpc	r19, r1
    1be4:	b1 f0       	breq	.+44     	; 0x1c12 <udc_process_setup+0x9e>
    1be6:	24 f4       	brge	.+8      	; 0x1bf0 <udc_process_setup+0x7c>
    1be8:	21 30       	cpi	r18, 0x01	; 1
    1bea:	31 05       	cpc	r19, r1
    1bec:	41 f0       	breq	.+16     	; 0x1bfe <udc_process_setup+0x8a>
    1bee:	d4 c1       	rjmp	.+936    	; 0x1f98 <udc_process_setup+0x424>
    1bf0:	23 30       	cpi	r18, 0x03	; 3
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	f1 f1       	breq	.+124    	; 0x1c72 <udc_process_setup+0xfe>
    1bf6:	2f 30       	cpi	r18, 0x0F	; 15
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	61 f1       	breq	.+88     	; 0x1c54 <udc_process_setup+0xe0>
    1bfc:	cd c1       	rjmp	.+922    	; 0x1f98 <udc_process_setup+0x424>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1bfe:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <udc_config>
    1c02:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1c06:	dc 01       	movw	r26, r24
    1c08:	6c 91       	ld	r22, X
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <udd_set_setup_payload>
    1c10:	61 c0       	rjmp	.+194    	; 0x1cd4 <udc_process_setup+0x160>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1c12:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <udc_config>
    1c16:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <udc_config+0x1>
    1c1a:	21 89       	ldd	r18, Z+17	; 0x11
    1c1c:	82 17       	cp	r24, r18
    1c1e:	08 f0       	brcs	.+2      	; 0x1c22 <udc_process_setup+0xae>
    1c20:	c4 c1       	rjmp	.+904    	; 0x1faa <udc_process_setup+0x436>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1c22:	99 27       	eor	r25, r25
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config+0x2>
    1c30:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x3>
    1c34:	e8 0f       	add	r30, r24
    1c36:	f9 1f       	adc	r31, r25
    1c38:	80 81       	ld	r24, Z
    1c3a:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	62 81       	ldd	r22, Z+2	; 0x02
    1c40:	73 81       	ldd	r23, Z+3	; 0x03
    1c42:	0e 94 0e 05 	call	0xa1c	; 0xa1c <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1c46:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <udd_g_ctrlreq+0x8>
    1c4a:	f0 91 3b 23 	lds	r31, 0x233B	; 0x80233b <udd_g_ctrlreq+0x9>
    1c4e:	82 e0       	ldi	r24, 0x02	; 2
    1c50:	81 83       	std	Z+1, r24	; 0x01
    1c52:	40 c0       	rjmp	.+128    	; 0x1cd4 <udc_process_setup+0x160>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1c54:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <udc_config+0x4>
    1c58:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <udc_config+0x5>
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <udc_process_setup+0xee>
    1c60:	a4 c1       	rjmp	.+840    	; 0x1faa <udc_process_setup+0x436>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1c62:	dc 01       	movw	r26, r24
    1c64:	12 96       	adiw	r26, 0x02	; 2
    1c66:	6d 91       	ld	r22, X+
    1c68:	7c 91       	ld	r23, X
    1c6a:	13 97       	sbiw	r26, 0x03	; 3
    1c6c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <udd_set_setup_payload>
    1c70:	31 c0       	rjmp	.+98     	; 0x1cd4 <udc_process_setup+0x160>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1c72:	99 27       	eor	r25, r25
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	91 05       	cpc	r25, r1
    1c78:	99 f0       	breq	.+38     	; 0x1ca0 <udc_process_setup+0x12c>
    1c7a:	58 f0       	brcs	.+22     	; 0x1c92 <udc_process_setup+0x11e>
    1c7c:	82 30       	cpi	r24, 0x02	; 2
    1c7e:	91 05       	cpc	r25, r1
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <udc_process_setup+0x110>
    1c82:	18 c2       	rjmp	.+1072   	; 0x20b4 <udc_process_setup+0x540>
    1c84:	03 97       	sbiw	r24, 0x03	; 3
    1c86:	09 f0       	breq	.+2      	; 0x1c8a <udc_process_setup+0x116>
    1c88:	90 c1       	rjmp	.+800    	; 0x1faa <udc_process_setup+0x436>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1c8a:	26 e0       	ldi	r18, 0x06	; 6
		str = udc_get_string_serial_name();
    1c8c:	84 ec       	ldi	r24, 0xC4	; 196
    1c8e:	90 e2       	ldi	r25, 0x20	; 32
    1c90:	0a c0       	rjmp	.+20     	; 0x1ca6 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1c92:	64 e0       	ldi	r22, 0x04	; 4
    1c94:	70 e0       	ldi	r23, 0x00	; 0
    1c96:	80 ec       	ldi	r24, 0xC0	; 192
    1c98:	90 e2       	ldi	r25, 0x20	; 32
    1c9a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <udd_set_setup_payload>
    1c9e:	1a c0       	rjmp	.+52     	; 0x1cd4 <udc_process_setup+0x160>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1ca0:	8f ea       	ldi	r24, 0xAF	; 175
    1ca2:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1ca4:	20 e1       	ldi	r18, 0x10	; 16
    1ca6:	38 2f       	mov	r19, r24
    1ca8:	a0 e8       	ldi	r26, 0x80	; 128
    1caa:	b0 e2       	ldi	r27, 0x20	; 32
    1cac:	e8 2f       	mov	r30, r24
    1cae:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1cb0:	81 91       	ld	r24, Z+
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	8d 93       	st	X+, r24
    1cb6:	9d 93       	st	X+, r25
    1cb8:	8e 2f       	mov	r24, r30
    1cba:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1cbc:	82 17       	cp	r24, r18
    1cbe:	c0 f3       	brcs	.-16     	; 0x1cb0 <udc_process_setup+0x13c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1cc0:	62 2f       	mov	r22, r18
    1cc2:	66 0f       	add	r22, r22
    1cc4:	6e 5f       	subi	r22, 0xFE	; 254
    1cc6:	60 93 7e 20 	sts	0x207E, r22	; 0x80207e <udc_string_desc>
		udd_set_setup_payload(
    1cca:	70 e0       	ldi	r23, 0x00	; 0
    1ccc:	8e e7       	ldi	r24, 0x7E	; 126
    1cce:	90 e2       	ldi	r25, 0x20	; 32
    1cd0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1cd4:	e2 e3       	ldi	r30, 0x32	; 50
    1cd6:	f3 e2       	ldi	r31, 0x23	; 35
    1cd8:	86 81       	ldd	r24, Z+6	; 0x06
    1cda:	97 81       	ldd	r25, Z+7	; 0x07
    1cdc:	22 85       	ldd	r18, Z+10	; 0x0a
    1cde:	33 85       	ldd	r19, Z+11	; 0x0b
    1ce0:	82 17       	cp	r24, r18
    1ce2:	93 07       	cpc	r25, r19
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <udc_process_setup+0x174>
    1ce6:	ea c1       	rjmp	.+980    	; 0x20bc <udc_process_setup+0x548>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1ce8:	80 93 3c 23 	sts	0x233C, r24	; 0x80233c <udd_g_ctrlreq+0xa>
    1cec:	90 93 3d 23 	sts	0x233D, r25	; 0x80233d <udd_g_ctrlreq+0xb>
    1cf0:	e5 c1       	rjmp	.+970    	; 0x20bc <udc_process_setup+0x548>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1cf2:	21 30       	cpi	r18, 0x01	; 1
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <udc_process_setup+0x186>
    1cf8:	58 c1       	rjmp	.+688    	; 0x1faa <udc_process_setup+0x436>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	8c e2       	ldi	r24, 0x2C	; 44
    1d00:	93 e2       	ldi	r25, 0x23	; 35
    1d02:	0e 94 0e 05 	call	0xa1c	; 0xa1c <udd_set_setup_payload>
    1d06:	da c1       	rjmp	.+948    	; 0x20bc <udc_process_setup+0x548>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1d08:	81 30       	cpi	r24, 0x01	; 1
    1d0a:	e9 f5       	brne	.+122    	; 0x1d86 <udc_process_setup+0x212>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d0c:	90 91 33 23 	lds	r25, 0x2333	; 0x802333 <udd_g_ctrlreq+0x1>
    1d10:	9a 30       	cpi	r25, 0x0A	; 10
    1d12:	c9 f5       	brne	.+114    	; 0x1d86 <udc_process_setup+0x212>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1d14:	21 30       	cpi	r18, 0x01	; 1
    1d16:	31 05       	cpc	r19, r1
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <udc_process_setup+0x1a8>
    1d1a:	47 c1       	rjmp	.+654    	; 0x1faa <udc_process_setup+0x436>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1d1c:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <udc_num_configuration>
    1d20:	88 23       	and	r24, r24
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <udc_process_setup+0x1b2>
    1d24:	42 c1       	rjmp	.+644    	; 0x1faa <udc_process_setup+0x436>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d26:	c0 91 36 23 	lds	r28, 0x2336	; 0x802336 <udd_g_ctrlreq+0x4>
    1d2a:	d0 91 37 23 	lds	r29, 0x2337	; 0x802337 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1d2e:	00 91 2a 23 	lds	r16, 0x232A	; 0x80232a <udc_ptr_conf>
    1d32:	10 91 2b 23 	lds	r17, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    1d36:	d8 01       	movw	r26, r16
    1d38:	ed 91       	ld	r30, X+
    1d3a:	fc 91       	ld	r31, X
    1d3c:	84 81       	ldd	r24, Z+4	; 0x04
    1d3e:	c8 17       	cp	r28, r24
    1d40:	08 f0       	brcs	.+2      	; 0x1d44 <udc_process_setup+0x1d0>
    1d42:	33 c1       	rjmp	.+614    	; 0x1faa <udc_process_setup+0x436>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	8c 2f       	mov	r24, r28
    1d48:	0b de       	rcall	.-1002   	; 0x1960 <udc_update_iface_desc>
    1d4a:	88 23       	and	r24, r24
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <udc_process_setup+0x1dc>
    1d4e:	2d c1       	rjmp	.+602    	; 0x1faa <udc_process_setup+0x436>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d50:	ce 01       	movw	r24, r28
    1d52:	99 27       	eor	r25, r25
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	d8 01       	movw	r26, r16
    1d5a:	12 96       	adiw	r26, 0x02	; 2
    1d5c:	ed 91       	ld	r30, X+
    1d5e:	fc 91       	ld	r31, X
    1d60:	13 97       	sbiw	r26, 0x03	; 3
    1d62:	e8 0f       	add	r30, r24
    1d64:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1d66:	01 90       	ld	r0, Z+
    1d68:	f0 81       	ld	r31, Z
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	86 81       	ldd	r24, Z+6	; 0x06
    1d6e:	97 81       	ldd	r25, Z+7	; 0x07
    1d70:	fc 01       	movw	r30, r24
    1d72:	19 95       	eicall
    1d74:	80 93 2e 23 	sts	0x232E, r24	; 0x80232e <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1d78:	61 e0       	ldi	r22, 0x01	; 1
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	8e e2       	ldi	r24, 0x2E	; 46
    1d7e:	93 e2       	ldi	r25, 0x23	; 35
    1d80:	0e 94 0e 05 	call	0xa1c	; 0xa1c <udd_set_setup_payload>
    1d84:	9b c1       	rjmp	.+822    	; 0x20bc <udc_process_setup+0x548>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1d86:	82 30       	cpi	r24, 0x02	; 2
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <udc_process_setup+0x218>
    1d8a:	0f c1       	rjmp	.+542    	; 0x1faa <udc_process_setup+0x436>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d8c:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <udd_g_ctrlreq+0x1>
    1d90:	81 11       	cpse	r24, r1
    1d92:	04 c1       	rjmp	.+520    	; 0x1f9c <udc_process_setup+0x428>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1d94:	22 30       	cpi	r18, 0x02	; 2
    1d96:	31 05       	cpc	r19, r1
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <udc_process_setup+0x228>
    1d9a:	07 c1       	rjmp	.+526    	; 0x1faa <udc_process_setup+0x436>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1d9c:	80 91 36 23 	lds	r24, 0x2336	; 0x802336 <udd_g_ctrlreq+0x4>
    1da0:	0e 94 9d 05 	call	0xb3a	; 0xb3a <udd_ep_is_halted>
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	80 93 26 23 	sts	0x2326, r24	; 0x802326 <udc_ep_status.4684>
    1daa:	90 93 27 23 	sts	0x2327, r25	; 0x802327 <udc_ep_status.4684+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1dae:	62 e0       	ldi	r22, 0x02	; 2
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	86 e2       	ldi	r24, 0x26	; 38
    1db4:	93 e2       	ldi	r25, 0x23	; 35
    1db6:	0e 94 0e 05 	call	0xa1c	; 0xa1c <udd_set_setup_payload>
    1dba:	80 c1       	rjmp	.+768    	; 0x20bc <udc_process_setup+0x548>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1dbc:	8f 71       	andi	r24, 0x1F	; 31
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <udc_process_setup+0x24e>
    1dc0:	9e c0       	rjmp	.+316    	; 0x1efe <udc_process_setup+0x38a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1dc2:	90 91 33 23 	lds	r25, 0x2333	; 0x802333 <udd_g_ctrlreq+0x1>
    1dc6:	93 30       	cpi	r25, 0x03	; 3
    1dc8:	89 f1       	breq	.+98     	; 0x1e2c <udc_process_setup+0x2b8>
    1dca:	18 f4       	brcc	.+6      	; 0x1dd2 <udc_process_setup+0x25e>
    1dcc:	91 30       	cpi	r25, 0x01	; 1
    1dce:	a9 f0       	breq	.+42     	; 0x1dfa <udc_process_setup+0x286>
    1dd0:	96 c0       	rjmp	.+300    	; 0x1efe <udc_process_setup+0x38a>
    1dd2:	95 30       	cpi	r25, 0x05	; 5
    1dd4:	21 f0       	breq	.+8      	; 0x1dde <udc_process_setup+0x26a>
    1dd6:	99 30       	cpi	r25, 0x09	; 9
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <udc_process_setup+0x268>
    1dda:	41 c0       	rjmp	.+130    	; 0x1e5e <udc_process_setup+0x2ea>
    1ddc:	90 c0       	rjmp	.+288    	; 0x1efe <udc_process_setup+0x38a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1dde:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
    1de2:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
    1de6:	89 2b       	or	r24, r25
    1de8:	09 f0       	breq	.+2      	; 0x1dec <udc_process_setup+0x278>
    1dea:	df c0       	rjmp	.+446    	; 0x1faa <udc_process_setup+0x436>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1dec:	8b ea       	ldi	r24, 0xAB	; 171
    1dee:	9c e0       	ldi	r25, 0x0C	; 12
    1df0:	80 93 3e 23 	sts	0x233E, r24	; 0x80233e <udd_g_ctrlreq+0xc>
    1df4:	90 93 3f 23 	sts	0x233F, r25	; 0x80233f <udd_g_ctrlreq+0xd>
    1df8:	61 c1       	rjmp	.+706    	; 0x20bc <udc_process_setup+0x548>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1dfa:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
    1dfe:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
    1e02:	89 2b       	or	r24, r25
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <udc_process_setup+0x294>
    1e06:	d1 c0       	rjmp	.+418    	; 0x1faa <udc_process_setup+0x436>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1e08:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <udd_g_ctrlreq+0x2>
    1e0c:	90 91 35 23 	lds	r25, 0x2335	; 0x802335 <udd_g_ctrlreq+0x3>
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <udc_process_setup+0x2a2>
    1e14:	ca c0       	rjmp	.+404    	; 0x1faa <udc_process_setup+0x436>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1e16:	80 91 30 23 	lds	r24, 0x2330	; 0x802330 <udc_device_status>
    1e1a:	90 91 31 23 	lds	r25, 0x2331	; 0x802331 <udc_device_status+0x1>
    1e1e:	8d 7f       	andi	r24, 0xFD	; 253
    1e20:	80 93 30 23 	sts	0x2330, r24	; 0x802330 <udc_device_status>
    1e24:	90 93 31 23 	sts	0x2331, r25	; 0x802331 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1e28:	d8 d9       	rcall	.-3152   	; 0x11da <usb_callback_remotewakeup_disable>
    1e2a:	48 c1       	rjmp	.+656    	; 0x20bc <udc_process_setup+0x548>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e2c:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
    1e30:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
    1e34:	89 2b       	or	r24, r25
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <udc_process_setup+0x2c6>
    1e38:	b8 c0       	rjmp	.+368    	; 0x1faa <udc_process_setup+0x436>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1e3a:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <udd_g_ctrlreq+0x2>
    1e3e:	90 91 35 23 	lds	r25, 0x2335	; 0x802335 <udd_g_ctrlreq+0x3>
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <udc_process_setup+0x2d4>
    1e46:	ac c0       	rjmp	.+344    	; 0x1fa0 <udc_process_setup+0x42c>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1e48:	80 91 30 23 	lds	r24, 0x2330	; 0x802330 <udc_device_status>
    1e4c:	90 91 31 23 	lds	r25, 0x2331	; 0x802331 <udc_device_status+0x1>
    1e50:	82 60       	ori	r24, 0x02	; 2
    1e52:	80 93 30 23 	sts	0x2330, r24	; 0x802330 <udc_device_status>
    1e56:	90 93 31 23 	sts	0x2331, r25	; 0x802331 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1e5a:	be d9       	rcall	.-3204   	; 0x11d8 <usb_callback_remotewakeup_enable>
    1e5c:	2f c1       	rjmp	.+606    	; 0x20bc <udc_process_setup+0x548>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1e5e:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
    1e62:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
    1e66:	89 2b       	or	r24, r25
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <udc_process_setup+0x2f8>
    1e6a:	9f c0       	rjmp	.+318    	; 0x1faa <udc_process_setup+0x436>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1e6c:	0e 94 03 05 	call	0xa06	; 0xa06 <udd_getaddress>
    1e70:	88 23       	and	r24, r24
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <udc_process_setup+0x302>
    1e74:	9a c0       	rjmp	.+308    	; 0x1faa <udc_process_setup+0x436>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1e76:	20 91 34 23 	lds	r18, 0x2334	; 0x802334 <udd_g_ctrlreq+0x2>
    1e7a:	30 91 35 23 	lds	r19, 0x2335	; 0x802335 <udd_g_ctrlreq+0x3>
    1e7e:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1e80:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <udc_config>
    1e84:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1e88:	81 89       	ldd	r24, Z+17	; 0x11
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	82 17       	cp	r24, r18
    1e8e:	93 07       	cpc	r25, r19
    1e90:	08 f4       	brcc	.+2      	; 0x1e94 <udc_process_setup+0x320>
    1e92:	8b c0       	rjmp	.+278    	; 0x1faa <udc_process_setup+0x436>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1e94:	16 de       	rcall	.-980    	; 0x1ac2 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1e96:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <udd_g_ctrlreq+0x2>
    1e9a:	90 91 35 23 	lds	r25, 0x2335	; 0x802335 <udd_g_ctrlreq+0x3>
    1e9e:	80 93 2c 23 	sts	0x232C, r24	; 0x80232c <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1ea2:	88 23       	and	r24, r24
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <udc_process_setup+0x334>
    1ea6:	0a c1       	rjmp	.+532    	; 0x20bc <udc_process_setup+0x548>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1ea8:	99 27       	eor	r25, r25
    1eaa:	81 50       	subi	r24, 0x01	; 1
    1eac:	90 4c       	sbci	r25, 0xC0	; 192
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config+0x2>
    1eba:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x3>
    1ebe:	e8 0f       	add	r30, r24
    1ec0:	f9 1f       	adc	r31, r25
    1ec2:	e0 93 2a 23 	sts	0x232A, r30	; 0x80232a <udc_ptr_conf>
    1ec6:	f0 93 2b 23 	sts	0x232B, r31	; 0x80232b <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1eca:	01 90       	ld	r0, Z+
    1ecc:	f0 81       	ld	r31, Z
    1ece:	e0 2d       	mov	r30, r0
    1ed0:	84 81       	ldd	r24, Z+4	; 0x04
    1ed2:	88 23       	and	r24, r24
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <udc_process_setup+0x364>
    1ed6:	f2 c0       	rjmp	.+484    	; 0x20bc <udc_process_setup+0x548>
    1ed8:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	8c 2f       	mov	r24, r28
    1ede:	bb dd       	rcall	.-1162   	; 0x1a56 <udc_iface_enable>
    1ee0:	88 23       	and	r24, r24
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <udc_process_setup+0x372>
    1ee4:	62 c0       	rjmp	.+196    	; 0x1faa <udc_process_setup+0x436>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1ee6:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ee8:	e0 91 2a 23 	lds	r30, 0x232A	; 0x80232a <udc_ptr_conf>
    1eec:	f0 91 2b 23 	lds	r31, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    1ef0:	01 90       	ld	r0, Z+
    1ef2:	f0 81       	ld	r31, Z
    1ef4:	e0 2d       	mov	r30, r0
    1ef6:	84 81       	ldd	r24, Z+4	; 0x04
    1ef8:	c8 17       	cp	r28, r24
    1efa:	78 f3       	brcs	.-34     	; 0x1eda <udc_process_setup+0x366>
    1efc:	df c0       	rjmp	.+446    	; 0x20bc <udc_process_setup+0x548>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1efe:	81 30       	cpi	r24, 0x01	; 1
    1f00:	e1 f4       	brne	.+56     	; 0x1f3a <udc_process_setup+0x3c6>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1f02:	90 91 33 23 	lds	r25, 0x2333	; 0x802333 <udd_g_ctrlreq+0x1>
    1f06:	9b 30       	cpi	r25, 0x0B	; 11
    1f08:	c1 f4       	brne	.+48     	; 0x1f3a <udc_process_setup+0x3c6>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1f0a:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
    1f0e:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
    1f12:	89 2b       	or	r24, r25
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <udc_process_setup+0x3a4>
    1f16:	49 c0       	rjmp	.+146    	; 0x1faa <udc_process_setup+0x436>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1f18:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <udc_num_configuration>
    1f1c:	88 23       	and	r24, r24
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <udc_process_setup+0x3ae>
    1f20:	44 c0       	rjmp	.+136    	; 0x1faa <udc_process_setup+0x436>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1f22:	e2 e3       	ldi	r30, 0x32	; 50
    1f24:	f3 e2       	ldi	r31, 0x23	; 35
    1f26:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1f28:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1f2a:	8c 2f       	mov	r24, r28
    1f2c:	53 dd       	rcall	.-1370   	; 0x19d4 <udc_iface_disable>
    1f2e:	88 23       	and	r24, r24
    1f30:	e1 f1       	breq	.+120    	; 0x1faa <udc_process_setup+0x436>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1f32:	6d 2f       	mov	r22, r29
    1f34:	8c 2f       	mov	r24, r28
    1f36:	8f dd       	rcall	.-1250   	; 0x1a56 <udc_iface_enable>
    1f38:	36 c0       	rjmp	.+108    	; 0x1fa6 <udc_process_setup+0x432>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1f3a:	82 30       	cpi	r24, 0x02	; 2
    1f3c:	b1 f5       	brne	.+108    	; 0x1faa <udc_process_setup+0x436>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1f3e:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <udd_g_ctrlreq+0x1>
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	19 f0       	breq	.+6      	; 0x1f4c <udc_process_setup+0x3d8>
    1f46:	83 30       	cpi	r24, 0x03	; 3
    1f48:	91 f0       	breq	.+36     	; 0x1f6e <udc_process_setup+0x3fa>
    1f4a:	2c c0       	rjmp	.+88     	; 0x1fa4 <udc_process_setup+0x430>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1f4c:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
    1f50:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
    1f54:	89 2b       	or	r24, r25
    1f56:	49 f5       	brne	.+82     	; 0x1faa <udc_process_setup+0x436>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1f58:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <udd_g_ctrlreq+0x2>
    1f5c:	90 91 35 23 	lds	r25, 0x2335	; 0x802335 <udd_g_ctrlreq+0x3>
    1f60:	89 2b       	or	r24, r25
    1f62:	19 f5       	brne	.+70     	; 0x1faa <udc_process_setup+0x436>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1f64:	80 91 36 23 	lds	r24, 0x2336	; 0x802336 <udd_g_ctrlreq+0x4>
    1f68:	0e 94 b8 05 	call	0xb70	; 0xb70 <udd_ep_clear_halt>
    1f6c:	1c c0       	rjmp	.+56     	; 0x1fa6 <udc_process_setup+0x432>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1f6e:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq+0x6>
    1f72:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x7>
    1f76:	89 2b       	or	r24, r25
    1f78:	c1 f4       	brne	.+48     	; 0x1faa <udc_process_setup+0x436>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1f7a:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <udd_g_ctrlreq+0x2>
    1f7e:	90 91 35 23 	lds	r25, 0x2335	; 0x802335 <udd_g_ctrlreq+0x3>
    1f82:	89 2b       	or	r24, r25
    1f84:	91 f4       	brne	.+36     	; 0x1faa <udc_process_setup+0x436>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1f86:	c2 e3       	ldi	r28, 0x32	; 50
    1f88:	d3 e2       	ldi	r29, 0x23	; 35
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	0e 94 1c 07 	call	0xe38	; 0xe38 <udd_ep_set_halt>
    1f96:	07 c0       	rjmp	.+14     	; 0x1fa6 <udc_process_setup+0x432>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	05 c0       	rjmp	.+10     	; 0x1fa6 <udc_process_setup+0x432>
				break;
			}
		}
#endif
	}
	return false;
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	03 c0       	rjmp	.+6      	; 0x1fa6 <udc_process_setup+0x432>
		break;
#endif
	default:
		break;
	}
	return false;
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	01 c0       	rjmp	.+2      	; 0x1fa6 <udc_process_setup+0x432>
				break;
			}
		}
#endif
	}
	return false;
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1fa6:	81 11       	cpse	r24, r1
    1fa8:	8a c0       	rjmp	.+276    	; 0x20be <udc_process_setup+0x54a>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1faa:	80 91 32 23 	lds	r24, 0x2332	; 0x802332 <udd_g_ctrlreq>
    1fae:	8f 71       	andi	r24, 0x1F	; 31
    1fb0:	81 30       	cpi	r24, 0x01	; 1
    1fb2:	71 f5       	brne	.+92     	; 0x2010 <udc_process_setup+0x49c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1fb4:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <udc_num_configuration>
    1fb8:	88 23       	and	r24, r24
    1fba:	51 f1       	breq	.+84     	; 0x2010 <udc_process_setup+0x49c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1fbc:	00 91 36 23 	lds	r16, 0x2336	; 0x802336 <udd_g_ctrlreq+0x4>
    1fc0:	10 91 37 23 	lds	r17, 0x2337	; 0x802337 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1fc4:	c0 91 2a 23 	lds	r28, 0x232A	; 0x80232a <udc_ptr_conf>
    1fc8:	d0 91 2b 23 	lds	r29, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    1fcc:	e8 81       	ld	r30, Y
    1fce:	f9 81       	ldd	r31, Y+1	; 0x01
    1fd0:	84 81       	ldd	r24, Z+4	; 0x04
    1fd2:	08 17       	cp	r16, r24
    1fd4:	e8 f4       	brcc	.+58     	; 0x2010 <udc_process_setup+0x49c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	80 2f       	mov	r24, r16
    1fda:	c2 dc       	rcall	.-1660   	; 0x1960 <udc_update_iface_desc>
    1fdc:	88 23       	and	r24, r24
    1fde:	c1 f0       	breq	.+48     	; 0x2010 <udc_process_setup+0x49c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	ff 27       	eor	r31, r31
    1fe4:	cf 01       	movw	r24, r30
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	ea 81       	ldd	r30, Y+2	; 0x02
    1fec:	fb 81       	ldd	r31, Y+3	; 0x03
    1fee:	e8 0f       	add	r30, r24
    1ff0:	f9 1f       	adc	r31, r25
    1ff2:	c0 81       	ld	r28, Z
    1ff4:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1ff6:	ee 81       	ldd	r30, Y+6	; 0x06
    1ff8:	ff 81       	ldd	r31, Y+7	; 0x07
    1ffa:	19 95       	eicall
    1ffc:	68 2f       	mov	r22, r24
    1ffe:	80 2f       	mov	r24, r16
    2000:	af dc       	rcall	.-1698   	; 0x1960 <udc_update_iface_desc>
    2002:	88 23       	and	r24, r24
    2004:	29 f0       	breq	.+10     	; 0x2010 <udc_process_setup+0x49c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    2006:	ec 81       	ldd	r30, Y+4	; 0x04
    2008:	fd 81       	ldd	r31, Y+5	; 0x05
    200a:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    200c:	81 11       	cpse	r24, r1
    200e:	57 c0       	rjmp	.+174    	; 0x20be <udc_process_setup+0x54a>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    2010:	80 91 32 23 	lds	r24, 0x2332	; 0x802332 <udd_g_ctrlreq>
    2014:	8f 71       	andi	r24, 0x1F	; 31
    2016:	82 30       	cpi	r24, 0x02	; 2
    2018:	09 f0       	breq	.+2      	; 0x201c <udc_process_setup+0x4a8>
    201a:	40 c0       	rjmp	.+128    	; 0x209c <udc_process_setup+0x528>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    201c:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <udc_num_configuration>
    2020:	88 23       	and	r24, r24
    2022:	b1 f1       	breq	.+108    	; 0x2090 <udc_process_setup+0x51c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2024:	a0 91 2a 23 	lds	r26, 0x232A	; 0x80232a <udc_ptr_conf>
    2028:	b0 91 2b 23 	lds	r27, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    202c:	ed 91       	ld	r30, X+
    202e:	fc 91       	ld	r31, X
    2030:	11 97       	sbiw	r26, 0x01	; 1
    2032:	84 81       	ldd	r24, Z+4	; 0x04
    2034:	88 23       	and	r24, r24
    2036:	71 f1       	breq	.+92     	; 0x2094 <udc_process_setup+0x520>
    2038:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    203a:	ec 2f       	mov	r30, r28
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	ee 0f       	add	r30, r30
    2040:	ff 1f       	adc	r31, r31
    2042:	12 96       	adiw	r26, 0x02	; 2
    2044:	8d 91       	ld	r24, X+
    2046:	9c 91       	ld	r25, X
    2048:	13 97       	sbiw	r26, 0x03	; 3
    204a:	e8 0f       	add	r30, r24
    204c:	f9 1f       	adc	r31, r25
    204e:	00 81       	ld	r16, Z
    2050:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2052:	d8 01       	movw	r26, r16
    2054:	16 96       	adiw	r26, 0x06	; 6
    2056:	ed 91       	ld	r30, X+
    2058:	fc 91       	ld	r31, X
    205a:	17 97       	sbiw	r26, 0x07	; 7
    205c:	19 95       	eicall
    205e:	68 2f       	mov	r22, r24
    2060:	8c 2f       	mov	r24, r28
    2062:	7e dc       	rcall	.-1796   	; 0x1960 <udc_update_iface_desc>
    2064:	88 23       	and	r24, r24
    2066:	59 f1       	breq	.+86     	; 0x20be <udc_process_setup+0x54a>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    2068:	d8 01       	movw	r26, r16
    206a:	14 96       	adiw	r26, 0x04	; 4
    206c:	ed 91       	ld	r30, X+
    206e:	fc 91       	ld	r31, X
    2070:	15 97       	sbiw	r26, 0x05	; 5
    2072:	19 95       	eicall
    2074:	81 11       	cpse	r24, r1
    2076:	23 c0       	rjmp	.+70     	; 0x20be <udc_process_setup+0x54a>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    2078:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    207a:	a0 91 2a 23 	lds	r26, 0x232A	; 0x80232a <udc_ptr_conf>
    207e:	b0 91 2b 23 	lds	r27, 0x232B	; 0x80232b <udc_ptr_conf+0x1>
    2082:	ed 91       	ld	r30, X+
    2084:	fc 91       	ld	r31, X
    2086:	11 97       	sbiw	r26, 0x01	; 1
    2088:	94 81       	ldd	r25, Z+4	; 0x04
    208a:	c9 17       	cp	r28, r25
    208c:	b0 f2       	brcs	.-84     	; 0x203a <udc_process_setup+0x4c6>
    208e:	17 c0       	rjmp	.+46     	; 0x20be <udc_process_setup+0x54a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	15 c0       	rjmp	.+42     	; 0x20be <udc_process_setup+0x54a>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	13 c0       	rjmp	.+38     	; 0x20be <udc_process_setup+0x54a>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	11 c0       	rjmp	.+34     	; 0x20be <udc_process_setup+0x54a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	0f c0       	rjmp	.+30     	; 0x20be <udc_process_setup+0x54a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    20a0:	98 2f       	mov	r25, r24
    20a2:	90 76       	andi	r25, 0x60	; 96
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <udc_process_setup+0x534>
    20a6:	81 cf       	rjmp	.-254    	; 0x1faa <udc_process_setup+0x436>
    20a8:	7e cd       	rjmp	.-1284   	; 0x1ba6 <udc_process_setup+0x32>
    20aa:	98 2f       	mov	r25, r24
    20ac:	90 76       	andi	r25, 0x60	; 96
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <udc_process_setup+0x53e>
    20b0:	7c cf       	rjmp	.-264    	; 0x1faa <udc_process_setup+0x436>
    20b2:	84 ce       	rjmp	.-760    	; 0x1dbc <udc_process_setup+0x248>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    20b4:	2e e0       	ldi	r18, 0x0E	; 14
		str = udc_string_product_name;
    20b6:	80 ea       	ldi	r24, 0xA0	; 160
    20b8:	90 e2       	ldi	r25, 0x20	; 32
    20ba:	f5 cd       	rjmp	.-1046   	; 0x1ca6 <udc_process_setup+0x132>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	1f 91       	pop	r17
    20c4:	0f 91       	pop	r16
    20c6:	08 95       	ret

000020c8 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    20c8:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    20cc:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    20ce:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    20d0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    20d4:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    20d6:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    20da:	08 95       	ret

000020dc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    20dc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    20de:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    20e0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    20e2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    20e4:	60 83       	st	Z, r22
	ret                             // Return to caller
    20e6:	08 95       	ret

000020e8 <__udivmodhi4>:
    20e8:	aa 1b       	sub	r26, r26
    20ea:	bb 1b       	sub	r27, r27
    20ec:	51 e1       	ldi	r21, 0x11	; 17
    20ee:	07 c0       	rjmp	.+14     	; 0x20fe <__udivmodhi4_ep>

000020f0 <__udivmodhi4_loop>:
    20f0:	aa 1f       	adc	r26, r26
    20f2:	bb 1f       	adc	r27, r27
    20f4:	a6 17       	cp	r26, r22
    20f6:	b7 07       	cpc	r27, r23
    20f8:	10 f0       	brcs	.+4      	; 0x20fe <__udivmodhi4_ep>
    20fa:	a6 1b       	sub	r26, r22
    20fc:	b7 0b       	sbc	r27, r23

000020fe <__udivmodhi4_ep>:
    20fe:	88 1f       	adc	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	5a 95       	dec	r21
    2104:	a9 f7       	brne	.-22     	; 0x20f0 <__udivmodhi4_loop>
    2106:	80 95       	com	r24
    2108:	90 95       	com	r25
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	08 95       	ret

00002110 <__tablejump2__>:
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	88 1f       	adc	r24, r24
    2116:	8b bf       	out	0x3b, r24	; 59
    2118:	07 90       	elpm	r0, Z+
    211a:	f6 91       	elpm	r31, Z
    211c:	e0 2d       	mov	r30, r0
    211e:	19 94       	eijmp

00002120 <memcpy>:
    2120:	fb 01       	movw	r30, r22
    2122:	dc 01       	movw	r26, r24
    2124:	02 c0       	rjmp	.+4      	; 0x212a <memcpy+0xa>
    2126:	01 90       	ld	r0, Z+
    2128:	0d 92       	st	X+, r0
    212a:	41 50       	subi	r20, 0x01	; 1
    212c:	50 40       	sbci	r21, 0x00	; 0
    212e:	d8 f7       	brcc	.-10     	; 0x2126 <memcpy+0x6>
    2130:	08 95       	ret

00002132 <_exit>:
    2132:	f8 94       	cli

00002134 <__stop_program>:
    2134:	ff cf       	rjmp	.-2      	; 0x2134 <__stop_program>
