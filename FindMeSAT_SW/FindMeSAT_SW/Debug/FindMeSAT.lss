
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000111c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .BOOT         00000044  000111c6  000111c6  0001125a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000001ce  00802000  0001120a  0001129e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000cc1  008021ce  008021ce  0001146e  2**2
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0001146c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000114c8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000d70  00000000  00000000  00011510  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0002848d  00000000  00000000  00012280  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007df8  00000000  00000000  0003a70d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00015e76  00000000  00000000  00042505  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003e94  00000000  00000000  0005837c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00044a2e  00000000  00000000  0005c210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000128a0  00000000  00000000  000a0c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e00  00000000  00000000  000b34e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00010634  00000000  00000000  000b42e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__ctors_end>
       4:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
       8:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
       c:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      10:	0c 94 cd 6c 	jmp	0xd99a	; 0xd99a <__vector_4>
      14:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      18:	0c 94 63 26 	jmp	0x4cc6	; 0x4cc6 <__vector_6>
      1c:	0c 94 8b 26 	jmp	0x4d16	; 0x4d16 <__vector_7>
      20:	0c 94 b3 26 	jmp	0x4d66	; 0x4d66 <__vector_8>
      24:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__vector_9>
      28:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      2c:	0c 94 b4 27 	jmp	0x4f68	; 0x4f68 <__vector_11>
      30:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      34:	0c 94 2e 53 	jmp	0xa65c	; 0xa65c <__vector_13>
      38:	0c 94 86 4b 	jmp	0x970c	; 0x970c <__vector_14>
      3c:	0c 94 b3 4b 	jmp	0x9766	; 0x9766 <__vector_15>
      40:	0c 94 e0 4b 	jmp	0x97c0	; 0x97c0 <__vector_16>
      44:	0c 94 0d 4c 	jmp	0x981a	; 0x981a <__vector_17>
      48:	0c 94 3a 4c 	jmp	0x9874	; 0x9874 <__vector_18>
      4c:	0c 94 67 4c 	jmp	0x98ce	; 0x98ce <__vector_19>
      50:	0c 94 94 4c 	jmp	0x9928	; 0x9928 <__vector_20>
      54:	0c 94 c1 4c 	jmp	0x9982	; 0x9982 <__vector_21>
      58:	0c 94 ee 4c 	jmp	0x99dc	; 0x99dc <__vector_22>
      5c:	0c 94 1b 4d 	jmp	0x9a36	; 0x9a36 <__vector_23>
      60:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      64:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      68:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      6c:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      70:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      74:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      78:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      7c:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      80:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      84:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      88:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      8c:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      90:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      94:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      98:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      9c:	0c 94 89 48 	jmp	0x9112	; 0x9112 <__vector_39>
      a0:	0c 94 bb 48 	jmp	0x9176	; 0x9176 <__vector_40>
      a4:	0c 94 ed 48 	jmp	0x91da	; 0x91da <__vector_41>
      a8:	0c 94 1f 49 	jmp	0x923e	; 0x923e <__vector_42>
      ac:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      b0:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      b4:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      b8:	0c 94 55 53 	jmp	0xa6aa	; 0xa6aa <__vector_46>
      bc:	0c 94 0a 4f 	jmp	0x9e14	; 0x9e14 <__vector_47>
      c0:	0c 94 37 4f 	jmp	0x9e6e	; 0x9e6e <__vector_48>
      c4:	0c 94 64 4f 	jmp	0x9ec8	; 0x9ec8 <__vector_49>
      c8:	0c 94 91 4f 	jmp	0x9f22	; 0x9f22 <__vector_50>
      cc:	0c 94 be 4f 	jmp	0x9f7c	; 0x9f7c <__vector_51>
      d0:	0c 94 eb 4f 	jmp	0x9fd6	; 0x9fd6 <__vector_52>
      d4:	0c 94 18 50 	jmp	0xa030	; 0xa030 <__vector_53>
      d8:	0c 94 45 50 	jmp	0xa08a	; 0xa08a <__vector_54>
      dc:	0c 94 72 50 	jmp	0xa0e4	; 0xa0e4 <__vector_55>
      e0:	0c 94 9f 50 	jmp	0xa13e	; 0xa13e <__vector_56>
      e4:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      e8:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      ec:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      f0:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      f4:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      f8:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
      fc:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     100:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     104:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     108:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     10c:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     110:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     114:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     118:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     11c:	0c 94 c1 47 	jmp	0x8f82	; 0x8f82 <__vector_71>
     120:	0c 94 f3 47 	jmp	0x8fe6	; 0x8fe6 <__vector_72>
     124:	0c 94 25 48 	jmp	0x904a	; 0x904a <__vector_73>
     128:	0c 94 57 48 	jmp	0x90ae	; 0x90ae <__vector_74>
     12c:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     130:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     134:	0c 94 48 4d 	jmp	0x9a90	; 0x9a90 <__vector_77>
     138:	0c 94 75 4d 	jmp	0x9aea	; 0x9aea <__vector_78>
     13c:	0c 94 a2 4d 	jmp	0x9b44	; 0x9b44 <__vector_79>
     140:	0c 94 cf 4d 	jmp	0x9b9e	; 0x9b9e <__vector_80>
     144:	0c 94 fc 4d 	jmp	0x9bf8	; 0x9bf8 <__vector_81>
     148:	0c 94 29 4e 	jmp	0x9c52	; 0x9c52 <__vector_82>
     14c:	0c 94 56 4e 	jmp	0x9cac	; 0x9cac <__vector_83>
     150:	0c 94 83 4e 	jmp	0x9d06	; 0x9d06 <__vector_84>
     154:	0c 94 b0 4e 	jmp	0x9d60	; 0x9d60 <__vector_85>
     158:	0c 94 dd 4e 	jmp	0x9dba	; 0x9dba <__vector_86>
     15c:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     160:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     164:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     168:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     16c:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     170:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     174:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     178:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     17c:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     180:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     184:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     188:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     18c:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     190:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     194:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     198:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     19c:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1a0:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1a4:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1a8:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1ac:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1b0:	0c 94 cc 50 	jmp	0xa198	; 0xa198 <__vector_108>
     1b4:	0c 94 f9 50 	jmp	0xa1f2	; 0xa1f2 <__vector_109>
     1b8:	0c 94 26 51 	jmp	0xa24c	; 0xa24c <__vector_110>
     1bc:	0c 94 53 51 	jmp	0xa2a6	; 0xa2a6 <__vector_111>
     1c0:	0c 94 80 51 	jmp	0xa300	; 0xa300 <__vector_112>
     1c4:	0c 94 ad 51 	jmp	0xa35a	; 0xa35a <__vector_113>
     1c8:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1cc:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1d0:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1d4:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1d8:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1dc:	0c 94 d0 1c 	jmp	0x39a0	; 0x39a0 <__vector_119>
     1e0:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1e4:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1e8:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1ec:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1f0:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__bad_interrupt>
     1f4:	0c 94 3f 5a 	jmp	0xb47e	; 0xb47e <__vector_125>
     1f8:	0c 94 fb 5a 	jmp	0xb5f6	; 0xb5f6 <__vector_126>
     1fc:	f3 54       	subi	r31, 0x43	; 67
     1fe:	f6 54       	subi	r31, 0x46	; 70
     200:	f9 54       	subi	r31, 0x49	; 73
     202:	fc 54       	subi	r31, 0x4C	; 76
     204:	ff 54       	subi	r31, 0x4F	; 79
     206:	02 55       	subi	r16, 0x52	; 82
     208:	05 55       	subi	r16, 0x55	; 85
     20a:	73 5c       	subi	r23, 0xC3	; 195
     20c:	86 5c       	subi	r24, 0xC6	; 198
     20e:	99 5c       	subi	r25, 0xC9	; 201
     210:	ac 5c       	subi	r26, 0xCC	; 204
     212:	bf 5c       	subi	r27, 0xCF	; 207
     214:	d2 5c       	subi	r29, 0xC2	; 194
     216:	e5 5c       	subi	r30, 0xC5	; 197
     218:	05 a8       	ldd	r0, Z+53	; 0x35
     21a:	4c cd       	rjmp	.-1384   	; 0xfffffcb4 <__eeprom_end+0xff7efcb4>
     21c:	b2 d4       	rcall	.+2404   	; 0xb82 <PM_SINE_IP+0x446>
     21e:	4e b9       	out	0x0e, r20	; 14
     220:	38 36       	cpi	r19, 0x68	; 104
     222:	a9 02       	muls	r26, r25
     224:	0c 50       	subi	r16, 0x0C	; 12
     226:	b9 91       	ld	r27, Y+
     228:	86 88       	ldd	r8, Z+22	; 0x16
     22a:	08 3c       	cpi	r16, 0xC8	; 200
     22c:	a6 aa       	std	Z+54, r10	; 0x36
     22e:	aa 2a       	or	r10, r26
     230:	be 00       	.word	0x00be	; ????
     232:	00 00       	nop
     234:	80 3f       	cpi	r24, 0xF0	; 240
     236:	07 63       	ori	r16, 0x37	; 55
     238:	42 36       	cpi	r20, 0x62	; 98
     23a:	b7 9b       	sbis	0x16, 7	; 22
     23c:	d8 a7       	std	Y+40, r29	; 0x28
     23e:	1a 39       	cpi	r17, 0x9A	; 154
     240:	68 56       	subi	r22, 0x68	; 104
     242:	18 ae       	std	Y+56, r1	; 0x38
     244:	ba ab       	std	Y+50, r27	; 0x32
     246:	55 8c       	ldd	r5, Z+29	; 0x1d
     248:	1d 3c       	cpi	r17, 0xCD	; 205
     24a:	b7 cc       	rjmp	.-1682   	; 0xfffffbba <__eeprom_end+0xff7efbba>
     24c:	57 63       	ori	r21, 0x37	; 55
     24e:	bd 6d       	ori	r27, 0xDD	; 221
     250:	ed fd       	.word	0xfded	; ????
     252:	75 3e       	cpi	r23, 0xE5	; 229
     254:	f6 17       	cp	r31, r22
     256:	72 31       	cpi	r23, 0x12	; 18
     258:	bf 00       	.word	0x00bf	; ????
     25a:	00 00       	nop
     25c:	80 3f       	cpi	r24, 0xF0	; 240
     25e:	08 00       	.word	0x0008	; ????
     260:	00 00       	nop
     262:	be 92       	st	-X, r11
     264:	24 49       	sbci	r18, 0x94	; 148
     266:	12 3e       	cpi	r17, 0xE2	; 226
     268:	ab aa       	std	Y+51, r10	; 0x33
     26a:	aa 2a       	or	r10, r26
     26c:	be cd       	rjmp	.-1156   	; 0xfffffdea <__eeprom_end+0xff7efdea>
     26e:	cc cc       	rjmp	.-1640   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
     270:	4c 3e       	cpi	r20, 0xEC	; 236
     272:	00 00       	nop
     274:	00 80       	ld	r0, Z
     276:	be ab       	std	Y+54, r27	; 0x36
     278:	aa aa       	std	Y+50, r10	; 0x32
     27a:	aa 3e       	cpi	r26, 0xEA	; 234
     27c:	00 00       	nop
     27e:	00 00       	nop
     280:	bf 00       	.word	0x00bf	; ????
     282:	00 00       	nop
     284:	80 3f       	cpi	r24, 0xF0	; 240
     286:	00 00       	nop
     288:	00 00       	nop
     28a:	00 08       	sbc	r0, r0
     28c:	41 78       	andi	r20, 0x81	; 129
     28e:	d3 bb       	out	0x13, r29	; 19
     290:	43 87       	std	Z+11, r20	; 0x0b
     292:	d1 13       	cpse	r29, r17
     294:	3d 19       	sub	r19, r13
     296:	0e 3c       	cpi	r16, 0xCE	; 206
     298:	c3 bd       	out	0x23, r28	; 35
     29a:	42 82       	std	Z+2, r4	; 0x02
     29c:	ad 2b       	or	r26, r29
     29e:	3e 68       	ori	r19, 0x8E	; 142
     2a0:	ec 82       	std	Y+4, r14	; 0x04
     2a2:	76 be       	out	0x36, r7	; 54
     2a4:	d9 8f       	std	Y+25, r29	; 0x19
     2a6:	e1 a9       	ldd	r30, Z+49	; 0x31
     2a8:	3e 4c       	sbci	r19, 0xCE	; 206
     2aa:	80 ef       	ldi	r24, 0xF0	; 240
     2ac:	ff be       	out	0x3f, r15	; 63
     2ae:	01 c4       	rjmp	.+2050   	; 0xab2 <PM_SINE_IP+0x376>
     2b0:	ff 7f       	andi	r31, 0xFF	; 255
     2b2:	3f 00       	.word	0x003f	; ????
     2b4:	00 00       	nop
	...

000002b8 <__trampolines_end>:
     2b8:	6e 61       	ori	r22, 0x1E	; 30
     2ba:	6e 00       	.word	0x006e	; ????

000002bc <__c.2332>:
     2bc:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2cc:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2dc:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2ec:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2fc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     30c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     31c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     32c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     33c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     34c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     35c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     36c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     37c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     38c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     39c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3ac:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003ba <pstr_nan>:
     3ba:	4e 41 4e                                            NAN

000003bd <pstr_inity>:
     3bd:	49 4e 49 54 59                                      INITY

000003c2 <pstr_inf>:
     3c2:	49 4e 46                                            INF

000003c5 <pwr_m10>:
     3c5:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     3d5:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000003dd <pwr_p10>:
     3dd:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     3ed:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000003f5 <PM_TWI1_INIT_ONBOARD_SIM808_GPS_02>:
     3f5:	41 54 2b 43 47 4e 53 49 4e 46 0d 0a 00              AT+CGNSINF...

00000402 <PM_TWI1_INIT_ONBOARD_SIM808_GPS_01>:
     402:	41 54 2b 43 47 4e 53 50 57 52 3d 25 64 0d 0a 00     AT+CGNSPWR=%d...

00000412 <PM_TWI1_INIT_ONBOARD_SIM808_INFO_01>:
     412:	41 54 49 0d 0a 00                                   ATI...

00000418 <PM_TWI1_INIT_ONBOARD_SIM808_CFUN0>:
     418:	41 54 2b 43 46 55 4e 3d 30 0d 0a 00                 AT+CFUN=0...

00000424 <PM_TWI1_INIT_ONBOARD_SIM808_IPR>:
     424:	41 54 2b 49 50 52 3d 25 6c 64 0d 0a 00              AT+IPR=%ld...

00000431 <PM_TWI1_INIT_ONBOARD_SIM808_OK>:
     431:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 73 75 63     Init: SIM808 suc
     441:	63 65 73 73 00                                      cess.

00000446 <PM_TWI1_INIT_ONBOARD_SIM808_RESTART>:
     446:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 72 65 73     Init: SIM808 res
     456:	74 61 72 74 69 6e 67 20 2e 2e 2e 00                 tarting ....

00000462 <PM_TWI1_INIT_ONBOARD_SIM808_START>:
     462:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 73 74 61     Init: SIM808 sta
     472:	72 74 69 6e 67 20 2e 2e 2e 00                       rting ....

0000047c <PM_SIM808_INFO_SYNCED>:
     47c:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 20 62     SIM808 ser1:   b
     48c:	61 75 64 20 72 61 74 65 20 73 79 6e 63 65 64 0d     aud rate synced.
     49c:	0a 00                                               ..

0000049e <PM_SIM808_INFO_RESTART>:
     49e:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 53 74     SIM808 ser1:  St
     4ae:	61 72 74 69 6e 67 20 74 68 65 20 64 65 76 69 63     arting the devic
     4be:	65 20 2e 2e 2e 0d 0a 00                             e ......

000004c6 <PM_SIM808_INFO_START>:
     4c6:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 53 74     SIM808 ser1:  St
     4d6:	61 72 74 69 6e 67 20 74 68 65 20 64 65 76 69 63     arting the devic
     4e6:	65 20 2e 2e 2e 0d 0a 00                             e ......

000004ee <PM_SIM808_OK>:
     4ee:	4f 4b 00                                            OK.

000004f1 <PM_INFO_PART_PLL1>:
     4f1:	50 4c 4c 3a 20 25 38 6c 64 2e 25 30 33 6c 64 20     PLL: %8ld.%03ld 
     501:	2b 20 25 30 33 64 2f 33 30 45 2b 36 20 73 65 63     + %03d/30E+6 sec
     511:	0d 0a 0d 0a 00                                      .....

00000516 <PM_INFO_PART_L2P4>:
     516:	47 79 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e 32     Gyro_Temp=%+06.2
     526:	66 43 20 28 25 2b 30 36 64 29 0d 0a 0d 0a 00        fC (%+06d).....

00000535 <PM_INFO_PART_L2P3B>:
     535:	4d 7a 3d 25 2b 30 37 2e 33 66 75 54 20 28 25 2b     Mz=%+07.3fuT (%+
     545:	30 36 64 29 09 20 09 00                             06d). ..

0000054d <PM_INFO_PART_L2P3A>:
     54d:	4d 78 3d 25 2b 30 37 2e 33 66 75 54 20 28 25 2b     Mx=%+07.3fuT (%+
     55d:	30 36 64 29 2c 20 4d 79 3d 25 2b 30 37 2e 33 66     06d), My=%+07.3f
     56d:	75 54 20 28 25 2b 30 36 64 29 2c 20 00              uT (%+06d), .

0000057a <PM_INFO_PART_L2P2B>:
     57a:	47 7a 3d 25 2b 30 37 2e 32 66 64 70 73 20 28 25     Gz=%+07.2fdps (%
     58a:	30 36 64 29 09 20 09 00                             06d). ..

00000592 <PM_INFO_PART_L2P2A>:
     592:	47 78 3d 25 2b 30 37 2e 32 66 64 70 73 20 28 25     Gx=%+07.2fdps (%
     5a2:	2b 30 36 64 29 2c 20 47 79 3d 25 2b 30 37 2e 32     +06d), Gy=%+07.2
     5b2:	66 64 70 73 20 28 25 2b 30 36 64 29 2c 20 00        fdps (%+06d), .

000005c1 <PM_INFO_PART_L2P1B>:
     5c1:	41 7a 3d 25 2b 30 35 2e 33 66 67 20 28 25 2b 30     Az=%+05.3fg (%+0
     5d1:	36 64 29 09 20 09 00                                6d). ..

000005d8 <PM_INFO_PART_L2P1A>:
     5d8:	09 41 78 3d 25 2b 30 35 2e 33 66 67 20 28 25 2b     .Ax=%+05.3fg (%+
     5e8:	30 36 64 29 2c 20 41 79 3d 25 2b 30 35 2e 33 66     06d), Ay=%+05.3f
     5f8:	67 20 28 25 2b 30 36 64 29 2c 20 00                 g (%+06d), .

00000604 <PM_INFO_PART_L1P3>:
     604:	48 79 67 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e     Hygro_Temp=%+06.
     614:	32 66 43 2c 20 48 79 67 72 6f 5f 52 65 6c 48 3d     2fC, Hygro_RelH=
     624:	25 30 35 2e 32 66 25 25 0d 0a 00                    %05.2f%%...

0000062f <PM_INFO_PART_L1P2>:
     62f:	42 61 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e 32     Baro_Temp=%+06.2
     63f:	66 43 2c 20 42 61 72 6f 5f 50 3d 25 37 2e 32 66     fC, Baro_P=%7.2f
     64f:	68 50 61 09 20 09 00                                hPa. ..

00000656 <PM_INFO_PART_L1P1C>:
     656:	6d 50 5f 54 65 6d 70 3d 25 2b 30 36 2e 32 66 43     mP_Temp=%+06.2fC
     666:	09 20 09 00                                         . ..

0000066a <PM_INFO_PART_L1P1B>:
     66a:	55 61 64 63 34 3d 25 34 64 20 6d 56 2c 20 55 61     Uadc4=%4d mV, Ua
     67a:	64 63 35 3d 25 34 64 20 6d 56 2c 20 55 73 69 6c     dc5=%4d mV, Usil
     68a:	3d 25 34 64 20 6d 56 2c 20 00                       =%4d mV, .

00000694 <PM_INFO_PART_L1P1A>:
     694:	54 69 6d 65 20 3d 20 25 30 36 6c 64 3a 20 55 76     Time = %06ld: Uv
     6a4:	63 6f 3d 25 34 64 20 6d 56 2c 20 55 35 76 3d 25     co=%4d mV, U5v=%
     6b4:	34 64 20 6d 56 2c 20 55 62 61 74 3d 25 34 64 20     4d mV, Ubat=%4d 
     6c4:	6d 56 2c 20 00                                      mV, .

000006c9 <PM_USBINIT_HEADER_4>:
     6c9:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     6d9:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0d     ===============.
     6e9:	0a 0d 0a 00                                         ....

000006ed <PM_USBINIT_HEADER_3>:
     6ed:	46 69 6e 64 4d 65 53 41 54 20 2d 20 55 53 42 20     FindMeSAT - USB 
     6fd:	6c 6f 67 67 69 6e 67 20 73 74 61 72 74 65 64 0d     logging started.
     70d:	0a 00                                               ..

0000070f <PM_USBINIT_HEADER_2>:
     70f:	25 63 0d 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     %c..============
     71f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     72f:	3d 3d 3d 0d 0a 00                                   ===...

00000735 <PM_USBINIT_HEADER_1>:
     735:	0d 0a 0d 0a 0d 0a 00                                .......

0000073c <PM_SINE_IP>:
     73c:	00 fd f9 f6 f3 f0 ec e9 e6 e3 df dc d9 d6 d2 cf     ................
     74c:	00 fd fa f6 f3 f0 ed ea e6 e3 e0 dd da d7 d3 d0     ................
     75c:	00 fd fa f7 f3 f0 ed ea e7 e4 e1 de da d7 d4 d1     ................
     76c:	00 fd fa f7 f4 f1 ee eb e7 e4 e1 de db d8 d5 d2     ................
     77c:	00 fd fa f7 f4 f1 ee eb e8 e5 e2 df dc d9 d6 d3     ................
     78c:	00 fd fa f7 f4 f1 ee eb e8 e6 e3 e0 dd da d7 d4     ................
     79c:	00 fd fa f7 f4 f2 ef ec e9 e6 e3 e0 dd db d8 d5     ................
     7ac:	00 fd fa f8 f5 f2 ef ec e9 e7 e4 e1 de db d9 d6     ................
     7bc:	00 fd fa f8 f5 f2 ef ed ea e7 e4 e2 df dc d9 d7     ................
     7cc:	00 fd fb f8 f5 f3 f0 ed ea e8 e5 e2 e0 dd da d8     ................
     7dc:	00 fd fb f8 f5 f3 f0 ee eb e8 e6 e3 e0 de db d9     ................
     7ec:	00 fd fb f8 f6 f3 f1 ee eb e9 e6 e4 e1 df dc da     ................
     7fc:	00 fd fb f8 f6 f3 f1 ee ec e9 e7 e4 e2 df dd da     ................
     80c:	00 fe fb f9 f6 f4 f1 ef ec ea e8 e5 e3 e0 de db     ................
     81c:	00 fe fb f9 f6 f4 f2 ef ed eb e8 e6 e3 e1 df dc     ................
     82c:	00 fe fb f9 f7 f4 f2 f0 ed eb e9 e7 e4 e2 e0 dd     ................
     83c:	00 fe fb f9 f7 f5 f2 f0 ee ec e9 e7 e5 e3 e0 de     ................
     84c:	00 fe fc f9 f7 f5 f3 f1 ee ec ea e8 e6 e4 e1 df     ................
     85c:	00 fe fc fa f7 f5 f3 f1 ef ed eb e9 e6 e4 e2 e0     ................
     86c:	00 fe fc fa f8 f6 f4 f2 ef ed eb e9 e7 e5 e3 e1     ................
     87c:	00 fe fc fa f8 f6 f4 f2 f0 ee ec ea e8 e6 e4 e2     ................
     88c:	00 fe fc fa f8 f6 f4 f2 f0 ef ed eb e9 e7 e5 e3     ................
     89c:	00 fe fc fa f8 f7 f5 f3 f1 ef ed eb e9 e8 e6 e4     ................
     8ac:	00 fe fc fb f9 f7 f5 f3 f1 f0 ee ec ea e8 e7 e5     ................
     8bc:	00 fe fc fb f9 f7 f5 f4 f2 f0 ee ed eb e9 e7 e6     ................
     8cc:	00 fe fd fb f9 f8 f6 f4 f2 f1 ef ed ec ea e8 e7     ................
     8dc:	00 fe fd fb f9 f8 f6 f5 f3 f1 f0 ee ec eb e9 e8     ................
     8ec:	00 fe fd fb fa f8 f7 f5 f3 f2 f0 ef ed ec ea e9     ................
     8fc:	00 fe fd fb fa f8 f7 f5 f4 f2 f1 ef ee ec eb e9     ................
     90c:	00 ff fd fc fa f9 f7 f6 f4 f3 f2 f0 ef ed ec ea     ................
     91c:	00 ff fd fc fa f9 f8 f6 f5 f4 f2 f1 ef ee ed eb     ................
     92c:	00 ff fd fc fb f9 f8 f7 f5 f4 f3 f2 f0 ef ee ec     ................
     93c:	00 ff fd fc fb fa f8 f7 f6 f5 f3 f2 f1 f0 ee ed     ................
     94c:	00 ff fe fc fb fa f9 f8 f6 f5 f4 f3 f2 f1 ef ee     ................
     95c:	00 ff fe fd fb fa f9 f8 f7 f6 f5 f4 f2 f1 f0 ef     ................
     96c:	00 ff fe fd fc fb fa f9 f7 f6 f5 f4 f3 f2 f1 f0     ................
     97c:	00 ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1     ................
     98c:	00 ff fe fd fc fb fa f9 f8 f8 f7 f6 f5 f4 f3 f2     ................
     99c:	00 ff fe fd fc fc fb fa f9 f8 f7 f6 f5 f5 f4 f3     ................
     9ac:	00 ff fe fe fd fc fb fa f9 f9 f8 f7 f6 f5 f5 f4     ................
     9bc:	00 ff fe fe fd fc fb fb fa f9 f8 f8 f7 f6 f5 f5     ................
     9cc:	00 ff ff fe fd fd fc fb fa fa f9 f8 f8 f7 f6 f6     ................
     9dc:	00 ff ff fe fd fd fc fc fb fa fa f9 f8 f8 f7 f7     ................
     9ec:	00 ff ff fe fe fd fd fc fb fb fa fa f9 f9 f8 f8     ................
     9fc:	00 ff ff fe fe fd fd fc fc fb fb fa fa f9 f9 f8     ................
     a0c:	00 00 ff ff fe fe fd fd fc fc fc fb fb fa fa f9     ................
     a1c:	00 00 ff ff fe fe fe fd fd fd fc fc fb fb fb fa     ................
     a2c:	00 00 ff ff ff fe fe fe fd fd fd fd fc fc fc fb     ................
     a3c:	00 00 ff ff ff ff fe fe fe fe fd fd fd fd fc fc     ................
     a4c:	00 00 00 ff ff ff ff ff fe fe fe fe fe fe fd fd     ................
     a5c:	00 00 00 00 ff ff ff ff ff ff ff ff fe fe fe fe     ................
	...
     a74:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     a94:	01 01 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
     aa4:	01 01 01 01 02 02 02 02 00 00 00 01 01 01 01 01     ................
     ab4:	02 02 02 02 02 02 03 03 00 00 01 01 01 01 02 02     ................
     ac4:	02 02 03 03 03 03 04 04 00 00 01 01 01 02 02 02     ................
     ad4:	03 03 03 03 04 04 04 05 00 00 01 01 02 02 02 03     ................
     ae4:	03 03 04 04 05 05 05 06 00 00 01 01 02 02 03 03     ................
     af4:	04 04 04 05 05 06 06 07 00 01 01 02 02 03 03 04     ................
     b04:	04 05 05 06 06 07 07 08 00 01 01 02 02 03 03 04     ................
     b14:	05 05 06 06 07 07 08 08 00 01 01 02 03 03 04 04     ................
     b24:	05 06 06 07 08 08 09 09 00 01 01 02 03 03 04 05     ................
     b34:	06 06 07 08 08 09 0a 0a 00 01 02 02 03 04 05 05     ................
     b44:	06 07 08 08 09 0a 0b 0b 00 01 02 02 03 04 05 06     ................
     b54:	07 07 08 09 0a 0b 0b 0c 00 01 02 03 04 04 05 06     ................
     b64:	07 08 09 0a 0b 0b 0c 0d 00 01 02 03 04 05 06 07     ................
     b74:	08 08 09 0a 0b 0c 0d 0e 00 01 02 03 04 05 06 07     ................
     b84:	08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 04 05 06 07     ................
     b94:	09 0a 0b 0c 0d 0e 0f 10 00 01 02 03 05 06 07 08     ................
     ba4:	09 0a 0b 0c 0e 0f 10 11 00 01 02 04 05 06 07 08     ................
     bb4:	0a 0b 0c 0d 0e 0f 11 12 00 01 03 04 05 06 08 09     ................
     bc4:	0a 0b 0d 0e 0f 10 12 13 00 01 03 04 05 07 08 09     ................
     bd4:	0b 0c 0d 0e 10 11 12 14 00 01 03 04 06 07 08 0a     ................
     be4:	0b 0c 0e 0f 11 12 13 15 00 01 03 04 06 07 09 0a     ................
     bf4:	0c 0d 0e 10 11 13 14 16 00 02 03 05 06 08 09 0b     ................
     c04:	0c 0e 0f 11 12 14 15 17 00 02 03 05 06 08 09 0b     ................
     c14:	0d 0e 10 11 13 14 16 17 00 02 03 05 07 08 0a 0b     ................
     c24:	0d 0f 10 12 14 15 17 18 00 02 03 05 07 08 0a 0c     ................
     c34:	0e 0f 11 13 14 16 18 19 00 02 04 05 07 09 0b 0c     ................
     c44:	0e 10 12 13 15 17 19 1a 00 02 04 05 07 09 0b 0d     ................
     c54:	0f 10 12 14 16 18 19 1b 00 02 04 06 08 09 0b 0d     ................
     c64:	0f 11 13 15 17 18 1a 1c 00 02 04 06 08 0a 0c 0e     ................
     c74:	10 11 13 15 17 19 1b 1d 00 02 04 06 08 0a 0c 0e     ................
     c84:	10 12 14 16 18 1a 1c 1e 00 02 04 06 08 0a 0c 0e     ................
     c94:	11 13 15 17 19 1b 1d 1f 00 02 04 06 09 0b 0d 0f     ................
     ca4:	11 13 15 17 1a 1c 1e 20 00 02 04 07 09 0b 0d 0f     ....... ........
     cb4:	12 14 16 18 1a 1c 1f 21 00 02 05 07 09 0b 0e 10     .......!........
     cc4:	12 14 17 19 1b 1d 20 22 00 02 05 07 09 0c 0e 10     ...... "........
     cd4:	13 15 17 19 1c 1e 20 23 00 02 05 07 0a 0c 0e 11     ...... #........
     ce4:	13 15 18 1a 1d 1f 21 24 00 02 05 07 0a 0c 0f 11     ......!$........
     cf4:	14 16 18 1b 1d 20 22 25 00 03 05 08 0a 0d 0f 12     ..... "%........
     d04:	14 17 19 1c 1e 21 23 26 00 03 05 08 0a 0d 0f 12     .....!#&........
     d14:	15 17 1a 1c 1f 21 24 26 00 03 05 08 0b 0d 10 12     .....!$&........
     d24:	15 18 1a 1d 20 22 25 27 00 03 05 08 0b 0d 10 13     .... "%'........
     d34:	16 18 1b 1e 20 23 26 28 00 03 06 08 0b 0e 11 13     .... #&(........
     d44:	16 19 1c 1e 21 24 27 29 00 03 06 08 0b 0e 11 14     ....!$')........
     d54:	17 19 1c 1f 22 25 27 2a 00 03 06 09 0c 0e 11 14     ...."%'*........
     d64:	17 1a 1d 20 23 25 28 2b 00 03 06 09 0c 0f 12 15     ... #%(+........
     d74:	18 1a 1d 20 23 26 29 2c 00 03 06 09 0c 0f 12 15     ... #&),........
     d84:	18 1b 1e 21 24 27 2a 2d 00 03 06 09 0c 0f 12 15     ...!$'*-........
     d94:	19 1c 1f 22 25 28 2b 2e 00 03 06 09 0d 10 13 16     ..."%(+.........
     da4:	19 1c 1f 22 26 29 2c 2f 00 03 06 0a 0d 10 13 16     ..."&),/........
     db4:	1a 1d 20 23 26 29 2d 30                             .. #&)-0

00000dbc <PM_SINE>:
     dbc:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     dcc:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     ddc:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     dec:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     dfc:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     e0c:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     e1c:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     e2c:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     e3c:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     e4c:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     e5c:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     e6c:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     e7c:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     e8c:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     e9c:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     eac:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     ebc:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     ecc:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     edc:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     eec:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     efc:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     f0c:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     f1c:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     f2c:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     f3c:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     f4c:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     f5c:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     f6c:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     f7c:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     f8c:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     f9c:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     fac:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     fbc:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     fcc:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     fdc:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     fec:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     ffc:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
    100c:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
    101c:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
    102c:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
    103c:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
    104c:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
    105c:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
    106c:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
    107c:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
    108c:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
    109c:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
    10ac:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
    10bc:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
    10cc:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
    10dc:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
    10ec:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
    10fc:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
    110c:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
    111c:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
    112c:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
    113c:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
    114c:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
    115c:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
    116c:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
    117c:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
    118c:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
    119c:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
    11ac:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
    11bc:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
    11cc:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
    11dc:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
    11ec:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
    11fc:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
    120c:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
    121c:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
    122c:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
    123c:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
    124c:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
    125c:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
    126c:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
    127c:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
    128c:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
    129c:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
    12ac:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
    12bc:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
    12cc:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
    12dc:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
    12ec:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
    12fc:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
    130c:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
    131c:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
    132c:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
    133c:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
    134c:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
    135c:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
    136c:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
    137c:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
    138c:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
    139c:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
    13ac:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
    13bc:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
    13cc:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
    13dc:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
    13ec:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
    13fc:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
    140c:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
    141c:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
    142c:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
    143c:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
    144c:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
    145c:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
    146c:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
    147c:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
    148c:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
    149c:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
    14ac:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
    14bc:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
    14cc:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
    14dc:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
    14ec:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
    14fc:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
    150c:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
    151c:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
    152c:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
    153c:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
    154c:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
    155c:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
    156c:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
    157c:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
    158c:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
    159c:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
    15ac:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
    15bc:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
    15cc:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
    15dc:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
    15ec:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
    15fc:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
    160c:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
    161c:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
    162c:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
    163c:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
    164c:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
    165c:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
    166c:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
    167c:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
    168c:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
    169c:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
    16ac:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
    16bc:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
    16cc:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
    16dc:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
    16ec:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
    16fc:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
    170c:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
    171c:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
    172c:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
    173c:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
    174c:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
    175c:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
    176c:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
    177c:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
    178c:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
    179c:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
    17ac:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
    17bc:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
    17cc:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
    17dc:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
    17ec:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
    17fc:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
    180c:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
    181c:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
    182c:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
    183c:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
    184c:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
    185c:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
    186c:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
    187c:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
    188c:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
    189c:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
    18ac:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
    18bc:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
    18cc:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
    18dc:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
    18ec:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
    18fc:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
    190c:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
    191c:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
    192c:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
    193c:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
    194c:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
    195c:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
    196c:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
    197c:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
    198c:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
    199c:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
    19ac:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
    19bc:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
    19cc:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
    19dc:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
    19ec:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
    19fc:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
    1a0c:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
    1a1c:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
    1a2c:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
    1a3c:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
    1a4c:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
    1a5c:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
    1a6c:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
    1a7c:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
    1a8c:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
    1a9c:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
    1aac:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
    1abc:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
    1acc:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
    1adc:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
    1aec:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
    1afc:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
    1b0c:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
    1b1c:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
    1b2c:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
    1b3c:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
    1b4c:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
    1b5c:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
    1b6c:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
    1b7c:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
    1b8c:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
    1b9c:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1bac:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1bbc:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    1bcc:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    1bdc:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    1bec:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    1bfc:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    1c0c:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    1c1c:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1c2c:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1c3c:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    1c4c:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    1c5c:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    1c6c:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    1c7c:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    1c8c:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    1c9c:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1cac:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1cbc:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    1ccc:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    1cdc:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    1cec:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    1cfc:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    1d0c:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    1d1c:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1d2c:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1d3c:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    1d4c:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    1d5c:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    1d6c:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    1d7c:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    1d8c:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    1d9c:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1dac:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1dbc:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    1dcc:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    1ddc:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    1dec:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    1dfc:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    1e0c:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    1e1c:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1e2c:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1e3c:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    1e4c:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    1e5c:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    1e6c:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    1e7c:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    1e8c:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    1e9c:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1eac:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1ebc:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    1ecc:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    1edc:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    1eec:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    1efc:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    1f0c:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    1f1c:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1f2c:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1f3c:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    1f4c:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    1f5c:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    1f6c:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    1f7c:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    1f8c:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    1f9c:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1fac:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1fbc:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1fcc:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1fdc:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1fec:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1ffc:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    200c:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    201c:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    202c:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    203c:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    204c:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    205c:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    206c:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    207c:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    208c:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    209c:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    20ac:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    20bc:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    20cc:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    20dc:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    20ec:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    20fc:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    210c:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    211c:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    212c:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    213c:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    214c:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    215c:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    216c:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    217c:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    218c:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    219c:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    21ac:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    21bc:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    21cc:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    21dc:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    21ec:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    21fc:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    220c:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    221c:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    222c:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    223c:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    224c:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    225c:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    226c:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    227c:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    228c:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    229c:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    22ac:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    22bc:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    22cc:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    22dc:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    22ec:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    22fc:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    230c:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    231c:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    232c:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    233c:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    234c:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    235c:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    236c:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    237c:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    238c:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    239c:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    23ac:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    23bc:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    23cc:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    23dc:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    23ec:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    23fc:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    240c:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    241c:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    242c:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    243c:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    244c:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    245c:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    246c:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    247c:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    248c:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    249c:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    24ac:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    24bc:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    24cc:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    24dc:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    24ec:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    24fc:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    250c:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    251c:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    252c:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    253c:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    254c:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    255c:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    256c:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    257c:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    258c:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    259c:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    25ac:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    25bc:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    25cc:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    25dc:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    25ec:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    25fc:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    260c:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    261c:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    262c:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    263c:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    264c:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    265c:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    266c:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    267c:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    268c:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    269c:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    26ac:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    26bc:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    26cc:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    26dc:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    26ec:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    26fc:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    270c:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    271c:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    272c:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    273c:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    274c:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    275c:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    276c:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    277c:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    278c:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    279c:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    27ac:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    27bc:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    27cc:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    27dc:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    27ec:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    27fc:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    280c:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    281c:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    282c:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    283c:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    284c:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    285c:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    286c:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    287c:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    288c:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    289c:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    28ac:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    28bc:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    28cc:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    28dc:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    28ec:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    28fc:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    290c:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    291c:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    292c:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    293c:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    294c:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    295c:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    296c:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    297c:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    298c:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    299c:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    29ac:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    29bc:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    29cc:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    29dc:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    29ec:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    29fc:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    2a0c:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    2a1c:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    2a2c:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    2a3c:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    2a4c:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    2a5c:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    2a6c:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    2a7c:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    2a8c:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    2a9c:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    2aac:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    2abc:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    2acc:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    2adc:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    2aec:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    2afc:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    2b0c:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    2b1c:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    2b2c:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    2b3c:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    2b4c:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    2b5c:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    2b6c:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    2b7c:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    2b8c:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    2b9c:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2bac:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2bbc:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    2bcc:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    2bdc:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    2bec:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    2bfc:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    2c0c:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    2c1c:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2c2c:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2c3c:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    2c4c:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    2c5c:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    2c6c:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    2c7c:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    2c8c:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    2c9c:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2cac:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2cbc:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    2ccc:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    2cdc:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    2cec:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    2cfc:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    2d0c:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    2d1c:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2d2c:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2d3c:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    2d4c:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    2d5c:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    2d6c:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    2d7c:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    2d8c:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    2d9c:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2dac:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002dbc <PM_UNKNOWN_01>:
    2dbc:	0d 0a 3f 3f 3f 20 75 6e 6b 6e 6f 77 6e 20 63 6f     ..??? unknown co
    2dcc:	6d 6d 61 6e 64 20 2d 20 66 6f 72 20 61 73 73 69     mmand - for assi
    2ddc:	73 74 61 6e 63 65 20 65 6e 74 65 72 20 20 68 65     stance enter  he
    2dec:	6c 70 0d 0a 00                                      lp...

00002df1 <PM_IP_CMD_xo>:
    2df1:	78 6f 3d 00                                         xo=.

00002df5 <PM_IP_CMD_reset>:
    2df5:	72 65 73 65 74 3d 00                                reset=.

00002dfc <PM_IP_CMD_pt>:
    2dfc:	70 74 3d 00                                         pt=.

00002e00 <PM_IP_CMD_kb>:
    2e00:	6b 62 3d 00                                         kb=.

00002e04 <PM_IP_CMD_help>:
    2e04:	68 65 6c 70 00                                      help.

00002e09 <PM_IP_CMD_info>:
    2e09:	69 6e 66 6f 3d 00                                   info=.

00002e0f <PM_IP_CMD_eb>:
    2e0f:	65 62 3d 00                                         eb=.

00002e13 <PM_IP_CMD_dds>:
    2e13:	64 64 73 3d 00                                      dds=.

00002e18 <PM_IP_CMD_dac>:
    2e18:	64 61 63 3d 00                                      dac=.

00002e1d <PM_IP_CMD_bl>:
    2e1d:	62 6c 3d 00                                         bl=.

00002e21 <PM_IP_CMD_bias>:
    2e21:	62 69 61 73 3d 00                                   bias=.

00002e27 <PM_IP_CMD_A_slash>:
    2e27:	41 2f 00                                            A/.

00002e2a <PM_IP_CMD_AT>:
    2e2a:	41 54 00                                            AT.

00002e2d <PM_IP_CMD_adc>:
    2e2d:	61 64 63 3d 00                                      adc=.

00002e32 <PM_IP_CMD_CmdLine>:
    2e32:	0d 0a 3e 20 00                                      ..> .

00002e37 <PM_IP_CMD_NewLine>:
    2e37:	0d 0a 00                                            ...

00002e3a <PM_HELP_XO_2>:
    2e3a:	2d 31 3a 20 50 4c 4c 20 4f 4e 0d 0a 00              -1: PLL ON...

00002e47 <PM_HELP_XO_1>:
    2e47:	78 6f 3d 09 09 30 2d 36 35 35 33 35 3a 20 56 43     xo=..0-65535: VC
    2e57:	54 43 58 4f 20 70 75 6c 6c 20 76 6f 6c 74 61 67     TCXO pull voltag
    2e67:	65 2c 20 00                                         e, .

00002e6b <PM_HELP_RESET_1>:
    2e6b:	72 65 73 65 74 3d 09 09 31 3a 20 72 65 62 6f 6f     reset=..1: reboo
    2e7b:	74 20 41 4c 4c 0d 0a 00                             t ALL...

00002e83 <PM_HELP_PT_2>:
    2e83:	31 3a 20 74 75 72 6e 20 73 70 65 65 64 2c 20 32     1: turn speed, 2
    2e93:	3a 20 76 61 72 69 6f 6d 65 74 65 72 0d 0a 00        : variometer...

00002ea2 <PM_HELP_PT_1>:
    2ea2:	70 74 3d 09 09 30 3a 20 70 69 74 63 68 20 74 6f     pt=..0: pitch to
    2eb2:	6e 65 20 4f 46 46 2c 20 00                          ne OFF, .

00002ebb <PM_HELP_KB_1>:
    2ebb:	6b 62 3d 09 09 30 3a 20 6b 65 79 20 62 65 65 70     kb=..0: key beep
    2ecb:	20 4f 46 46 2c 20 31 3a 20 4f 4e 0d 0a 00            OFF, 1: ON...

00002ed9 <PM_HELP_INFO_2>:
    2ed9:	30 78 30 32 3a 20 53 49 4d 38 30 38 0d 0a 00        0x02: SIM808...

00002ee8 <PM_HELP_INFO_1>:
    2ee8:	69 6e 66 6f 3d 09 09 30 3a 20 4f 46 46 2c 20 30     info=..0: OFF, 0
    2ef8:	78 30 31 3a 20 41 54 78 6d 65 67 61 2c 20 00        x01: ATxmega, .

00002f07 <PM_HELP_HELP_2>:
    2f07:	61 62 6f 75 74 20 61 6c 6c 20 61 76 61 69 6c 61     about all availa
    2f17:	62 6c 65 20 63 6f 6d 6d 61 6e 64 73 0d 0a 00        ble commands...

00002f26 <PM_HELP_HELP_1>:
    2f26:	68 65 6c 70 09 09 54 68 69 73 20 69 6e 66 6f 72     help..This infor
    2f36:	6d 61 74 69 6f 6e 20 70 61 67 65 20 00              mation page .

00002f43 <PM_HELP_EB_1>:
    2f43:	65 62 3d 09 09 30 3a 20 65 72 72 6f 72 20 62 65     eb=..0: error be
    2f53:	65 70 20 4f 46 46 2c 20 31 3a 20 4f 4e 0d 0a 00     ep OFF, 1: ON...

00002f63 <PM_HELP_DDS_3>:
    2f63:	63 3a 20 73 74 61 72 74 69 6e 67 20 70 68 61 73     c: starting phas
    2f73:	65 20 6f 66 20 44 44 53 31 2d 44 44 53 30 20 64     e of DDS1-DDS0 d
    2f83:	65 67 0d 0a 00                                      eg...

00002f88 <PM_HELP_DDS_2>:
    2f88:	62 3a 20 44 44 53 31 20 6d 48 7a 2c 20 00           b: DDS1 mHz, .

00002f96 <PM_HELP_DDS_1>:
    2f96:	64 64 73 3d 61 2c 62 2c 63 09 61 3a 20 44 44 53     dds=a,b,c.a: DDS
    2fa6:	30 20 66 72 65 71 75 65 6e 63 79 20 6d 48 7a 2c     0 frequency mHz,
    2fb6:	20 00                                                .

00002fb8 <PM_HELP_DAC_2>:
    2fb8:	31 3a 20 74 75 72 6e 20 44 41 43 42 20 6f 6e 0d     1: turn DACB on.
    2fc8:	0a 00                                               ..

00002fca <PM_HELP_DAC_1>:
    2fca:	64 61 63 3d 09 09 30 3a 20 74 75 72 6e 20 44 41     dac=..0: turn DA
    2fda:	43 42 20 6f 66 66 2c 20 00                          CB off, .

00002fe3 <PM_HELP_BL_2>:
    2fe3:	2d 31 3a 20 41 55 54 4f 2c 20 2d 32 3a 20 54 55     -1: AUTO, -2: TU
    2ff3:	52 4e 4c 49 47 48 54 20 73 70 65 63 69 61 6c 0d     RNLIGHT special.
    3003:	0a 00                                               ..

00003005 <PM_HELP_BL_1>:
    3005:	62 6c 3d 09 09 30 2d 32 35 35 3a 20 62 61 63 6b     bl=..0-255: back
    3015:	6c 69 67 68 74 20 50 57 4d 2c 20 00                 light PWM, .

00003021 <PM_HELP_BIAS_2>:
    3021:	66 6f 72 20 4c 43 44 20 63 6f 6e 74 72 61 73 74     for LCD contrast
    3031:	0d 0a 00                                            ...

00003034 <PM_HELP_BIAS_1>:
    3034:	62 69 61 73 3d 09 09 30 2d 36 33 3a 20 62 69 61     bias=..0-63: bia
    3044:	73 20 76 6f 6c 74 61 67 65 20 00                    s voltage .

0000304f <PM_HELP_AT_1>:
    304f:	41 54 09 09 43 4d 44 20 74 6f 20 73 65 6e 64 20     AT..CMD to send 
    305f:	74 6f 20 74 68 65 20 53 49 4d 38 30 38 0d 0a 00     to the SIM808...

0000306f <PM_HELP_ADC_2>:
    306f:	31 3a 20 74 75 72 6e 20 41 44 43 41 20 61 6e 64     1: turn ADCA and
    307f:	20 41 44 43 42 20 6f 6e 0d 0a 00                     ADCB on...

0000308a <PM_HELP_ADC_1>:
    308a:	61 64 63 3d 09 09 30 3a 20 74 75 72 6e 20 41 44     adc=..0: turn AD
    309a:	43 41 20 61 6e 64 20 41 44 43 42 20 6f 66 66 2c     CA and ADCB off,
    30aa:	20 00                                                .

000030ac <PM_HELP_HDR_2>:
    30ac:	2a 20 43 4f 4d 4d 41 4e 44 53 20 2a 0d 0a 2a 2a     * COMMANDS *..**
    30bc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0d 0a 0d 0a 00        **********.....

000030cb <PM_HELP_HDR_1>:
    30cb:	0d 0a 0d 0a 0d 0a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ......**********
    30db:	2a 2a 0d 0a 00                                      **...

000030e0 <PM_FORMAT_5F3>:
    30e0:	25 35 2e 33 66 00                                   %5.3f.

000030e6 <PM_FORMAT_4F1>:
    30e6:	25 34 2e 31 66 00                                   %4.1f.

000030ec <PM_FORMAT_07F2>:
    30ec:	25 30 37 2e 32 66 00                                %07.2f.

000030f3 <PM_FORMAT_05F2>:
    30f3:	25 30 35 2e 32 66 00                                %05.2f.

000030fa <PM_TWI1_INIT_ONBOARD_01>:
    30fa:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d 0a 0d 0a 00     -----------.....

0000310a <PM_TWI1_INIT_ONBOARD_BARO_OK>:
    310a:	49 6e 69 74 3a 20 42 61 72 6f 20 20 73 75 63 63     Init: Baro  succ
    311a:	65 73 73 00                                         ess.

0000311e <PM_TWI1_INIT_BARO_06>:
    311e:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    312e:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    313e:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

0000314f <PM_TWI1_INIT_BARO_05>:
    314f:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    315f:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

0000316d <PM_TWI1_INIT_BARO_04>:
    316d:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 42 41     TWI-onboard:  BA
    317d:	44 20 72 65 61 64 69 6e 67 20 50 52 4f 4d 20 61     D reading PROM a
    318d:	64 64 72 65 73 73 20 25 64 2e 20 28 73 63 3d 25     ddress %d. (sc=%
    319d:	64 29 0d 0a 00                                      d)...

000031a2 <PM_TWI1_INIT_BARO_03>:
    31a2:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 42 61 72     TWI-onboard: Bar
    31b2:	6f 20 4d 53 35 36 30 37 30 32 42 41 30 33 2d 35     o MS560702BA03-5
    31c2:	30 20 2d 20 20 20 20 20 73 65 72 69 61 6c 23 3a     0 -     serial#:
    31d2:	20 25 64 0d 0a 00                                    %d...

000031d8 <PM_TWI1_INIT_BARO_02>:
    31d8:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 42 41     TWI-onboard:  BA
    31e8:	44 20 72 65 61 64 69 6e 67 20 73 65 72 69 61 6c     D reading serial
    31f8:	2f 43 52 43 20 77 6f 72 64 2e 20 28 73 63 3d 25     /CRC word. (sc=%
    3208:	64 29 0d 0a 00                                      d)...

0000320d <PM_TWI1_INIT_BARO_01>:
    320d:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 42     ..TWI-onboard: B
    321d:	61 72 6f 20 4d 53 35 36 30 37 30 32 42 41 30 33     aro MS560702BA03
    322d:	2d 35 30 20 2d 20 49 32 43 20 61 64 64 72 65 73     -50 - I2C addres
    323d:	73 3a 20 30 78 25 30 32 58 0d 0a 00                 s: 0x%02X...

00003249 <PM_TWI1_INIT_ONBOARD_GYRO_OK>:
    3249:	49 6e 69 74 3a 20 47 79 72 6f 20 20 73 75 63 63     Init: Gyro  succ
    3259:	65 73 73 00                                         ess.

0000325d <PM_TWI1_INIT_GYRO_05>:
    325d:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    326d:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    327d:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

0000328e <PM_TWI1_INIT_GYRO_04>:
    328e:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    329e:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

000032ac <PM_TWI1_INIT_GYRO_03>:
    32ac:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47 79 72     TWI-onboard: Gyr
    32bc:	6f 20 4d 50 55 2d 39 32 35 30 20 2d 20 20 20 20     o MPU-9250 -    
    32cc:	20 76 65 72 73 69 6f 6e 3a 20 30 78 25 30 32 58      version: 0x%02X
    32dc:	2c 20 30 78 25 30 32 58 0d 0a 00                    , 0x%02X...

000032e7 <PM_TWI1_INIT_GYRO_02>:
    32e7:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47 79 72     TWI-onboard: Gyr
    32f7:	6f 20 4d 50 55 2d 39 32 35 30 20 20 20 2d 20 20     o MPU-9250   -  
    3307:	20 27 72 65 73 65 74 20 31 27 20 62 61 64 20 72      'reset 1' bad r
    3317:	65 73 70 6f 6e 73 65 0d 0a 00                       esponse...

00003321 <PM_TWI1_INIT_GYRO_01>:
    3321:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47     ..TWI-onboard: G
    3331:	79 72 6f 20 4d 50 55 2d 39 32 35 30 20 2d 20 49     yro MPU-9250 - I
    3341:	32 43 20 61 64 64 72 65 73 73 3a 20 30 78 25 30     2C address: 0x%0
    3351:	32 58 2c 20 30 78 25 30 32 58 0d 0a 00              2X, 0x%02X...

0000335e <PM_TWI1_INIT_ONBOARD_HYGRO_OK>:
    335e:	49 6e 69 74 3a 20 48 79 67 72 6f 20 73 75 63 63     Init: Hygro succ
    336e:	65 73 73 00                                         ess.

00003372 <PM_TWI1_INIT_HYGRO_05>:
    3372:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    3382:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    3392:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

000033a3 <PM_TWI1_INIT_HYGRO_04>:
    33a3:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    33b3:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

000033c1 <PM_TWI1_INIT_HYGRO_03>:
    33c1:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48 79 67     TWI-onboard: Hyg
    33d1:	72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d 20 20     ro SHT31-DIS -  
    33e1:	20 73 74 61 74 75 73 3a 20 30 78 25 30 32 58 0d      status: 0x%02X.
    33f1:	0a 00                                               ..

000033f3 <PM_TWI1_INIT_HYGRO_02>:
    33f3:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48 79 67     TWI-onboard: Hyg
    3403:	72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d 20 20     ro SHT31-DIS -  
    3413:	20 61 64 64 72 65 73 73 20 4e 41 43 4b 20 2f 20      address NACK / 
    3423:	27 62 72 65 61 6b 27 20 62 61 64 20 72 65 73 70     'break' bad resp
    3433:	6f 6e 73 65 0d 0a 00                                onse...

0000343a <PM_TWI1_INIT_HYGRO_01>:
    343a:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48     ..TWI-onboard: H
    344a:	79 67 72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d     ygro SHT31-DIS -
    345a:	20 49 32 43 20 61 64 64 72 65 73 73 3a 20 30 78      I2C address: 0x
    346a:	25 30 32 58 0d 0a 00 00                             %02X....

00003472 <__ctors_end>:
    3472:	11 24       	eor	r1, r1
    3474:	1f be       	out	0x3f, r1	; 63
    3476:	cf ef       	ldi	r28, 0xFF	; 255
    3478:	cd bf       	out	0x3d, r28	; 61
    347a:	df e5       	ldi	r29, 0x5F	; 95
    347c:	de bf       	out	0x3e, r29	; 62
    347e:	00 e0       	ldi	r16, 0x00	; 0
    3480:	0c bf       	out	0x3c, r16	; 60

00003482 <__do_copy_data>:
    3482:	11 e2       	ldi	r17, 0x21	; 33
    3484:	a0 e0       	ldi	r26, 0x00	; 0
    3486:	b0 e2       	ldi	r27, 0x20	; 32
    3488:	ea e0       	ldi	r30, 0x0A	; 10
    348a:	f2 e1       	ldi	r31, 0x12	; 18
    348c:	01 e0       	ldi	r16, 0x01	; 1
    348e:	0b bf       	out	0x3b, r16	; 59
    3490:	02 c0       	rjmp	.+4      	; 0x3496 <__do_copy_data+0x14>
    3492:	07 90       	elpm	r0, Z+
    3494:	0d 92       	st	X+, r0
    3496:	ae 3c       	cpi	r26, 0xCE	; 206
    3498:	b1 07       	cpc	r27, r17
    349a:	d9 f7       	brne	.-10     	; 0x3492 <__do_copy_data+0x10>

0000349c <__do_clear_bss>:
    349c:	2e e2       	ldi	r18, 0x2E	; 46
    349e:	ae ec       	ldi	r26, 0xCE	; 206
    34a0:	b1 e2       	ldi	r27, 0x21	; 33
    34a2:	01 c0       	rjmp	.+2      	; 0x34a6 <.do_clear_bss_start>

000034a4 <.do_clear_bss_loop>:
    34a4:	1d 92       	st	X+, r1

000034a6 <.do_clear_bss_start>:
    34a6:	af 38       	cpi	r26, 0x8F	; 143
    34a8:	b2 07       	cpc	r27, r18
    34aa:	e1 f7       	brne	.-8      	; 0x34a4 <.do_clear_bss_loop>
    34ac:	0e 94 06 6d 	call	0xda0c	; 0xda0c <main>
    34b0:	0c 94 e1 88 	jmp	0x111c2	; 0x111c2 <_exit>

000034b4 <__bad_interrupt>:
    34b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000034b8 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    34b8:	ef 92       	push	r14
    34ba:	ff 92       	push	r15
    34bc:	0f 93       	push	r16
    34be:	1f 93       	push	r17
    34c0:	cf 93       	push	r28
    34c2:	df 93       	push	r29
    34c4:	7c 01       	movw	r14, r24
    34c6:	8b 01       	movw	r16, r22
    34c8:	ea 01       	movw	r28, r20
	while (len) {
    34ca:	20 97       	sbiw	r28, 0x00	; 0
    34cc:	39 f0       	breq	.+14     	; 0x34dc <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    34ce:	f8 01       	movw	r30, r16
    34d0:	61 91       	ld	r22, Z+
    34d2:	8f 01       	movw	r16, r30
    34d4:	c7 01       	movw	r24, r14
    34d6:	0a d0       	rcall	.+20     	; 0x34ec <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
    34d8:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    34da:	c9 f7       	brne	.-14     	; 0x34ce <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	df 91       	pop	r29
    34e0:	cf 91       	pop	r28
    34e2:	1f 91       	pop	r17
    34e4:	0f 91       	pop	r16
    34e6:	ff 90       	pop	r15
    34e8:	ef 90       	pop	r14
    34ea:	08 95       	ret

000034ec <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    34ec:	fc 01       	movw	r30, r24
    34ee:	91 81       	ldd	r25, Z+1	; 0x01
    34f0:	95 ff       	sbrs	r25, 5
    34f2:	fd cf       	rjmp	.-6      	; 0x34ee <usart_putchar+0x2>
    34f4:	60 83       	st	Z, r22
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	08 95       	ret

000034fc <usart_getchar>:
    34fc:	fc 01       	movw	r30, r24
    34fe:	91 81       	ldd	r25, Z+1	; 0x01
    3500:	99 23       	and	r25, r25
    3502:	ec f7       	brge	.-6      	; 0x34fe <usart_getchar+0x2>
    3504:	80 81       	ld	r24, Z
    3506:	08 95       	ret

00003508 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    3508:	4f 92       	push	r4
    350a:	5f 92       	push	r5
    350c:	6f 92       	push	r6
    350e:	7f 92       	push	r7
    3510:	8f 92       	push	r8
    3512:	9f 92       	push	r9
    3514:	af 92       	push	r10
    3516:	bf 92       	push	r11
    3518:	ef 92       	push	r14
    351a:	ff 92       	push	r15
    351c:	0f 93       	push	r16
    351e:	1f 93       	push	r17
    3520:	cf 93       	push	r28
    3522:	7c 01       	movw	r14, r24
    3524:	4a 01       	movw	r8, r20
    3526:	5b 01       	movw	r10, r22
    3528:	28 01       	movw	r4, r16
    352a:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    352c:	fc 01       	movw	r30, r24
    352e:	84 81       	ldd	r24, Z+4	; 0x04
    3530:	82 ff       	sbrs	r24, 2
    3532:	16 c0       	rjmp	.+44     	; 0x3560 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    3534:	d9 01       	movw	r26, r18
    3536:	c8 01       	movw	r24, r16
    3538:	68 94       	set
    353a:	12 f8       	bld	r1, 2
    353c:	b6 95       	lsr	r27
    353e:	a7 95       	ror	r26
    3540:	97 95       	ror	r25
    3542:	87 95       	ror	r24
    3544:	16 94       	lsr	r1
    3546:	d1 f7       	brne	.-12     	; 0x353c <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    3548:	b9 01       	movw	r22, r18
    354a:	a8 01       	movw	r20, r16
    354c:	03 2e       	mov	r0, r19
    354e:	36 e1       	ldi	r19, 0x16	; 22
    3550:	76 95       	lsr	r23
    3552:	67 95       	ror	r22
    3554:	57 95       	ror	r21
    3556:	47 95       	ror	r20
    3558:	3a 95       	dec	r19
    355a:	d1 f7       	brne	.-12     	; 0x3550 <usart_set_baudrate+0x48>
    355c:	30 2d       	mov	r19, r0
    355e:	15 c0       	rjmp	.+42     	; 0x358a <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    3560:	d9 01       	movw	r26, r18
    3562:	c8 01       	movw	r24, r16
    3564:	68 94       	set
    3566:	13 f8       	bld	r1, 3
    3568:	b6 95       	lsr	r27
    356a:	a7 95       	ror	r26
    356c:	97 95       	ror	r25
    356e:	87 95       	ror	r24
    3570:	16 94       	lsr	r1
    3572:	d1 f7       	brne	.-12     	; 0x3568 <usart_set_baudrate+0x60>
		min_rate /= 2;
    3574:	b9 01       	movw	r22, r18
    3576:	a8 01       	movw	r20, r16
    3578:	03 2e       	mov	r0, r19
    357a:	37 e1       	ldi	r19, 0x17	; 23
    357c:	76 95       	lsr	r23
    357e:	67 95       	ror	r22
    3580:	57 95       	ror	r21
    3582:	47 95       	ror	r20
    3584:	3a 95       	dec	r19
    3586:	d1 f7       	brne	.-12     	; 0x357c <usart_set_baudrate+0x74>
    3588:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    358a:	88 15       	cp	r24, r8
    358c:	99 05       	cpc	r25, r9
    358e:	aa 05       	cpc	r26, r10
    3590:	bb 05       	cpc	r27, r11
    3592:	08 f4       	brcc	.+2      	; 0x3596 <usart_set_baudrate+0x8e>
    3594:	a6 c0       	rjmp	.+332    	; 0x36e2 <usart_set_baudrate+0x1da>
    3596:	84 16       	cp	r8, r20
    3598:	95 06       	cpc	r9, r21
    359a:	a6 06       	cpc	r10, r22
    359c:	b7 06       	cpc	r11, r23
    359e:	08 f4       	brcc	.+2      	; 0x35a2 <usart_set_baudrate+0x9a>
    35a0:	a2 c0       	rjmp	.+324    	; 0x36e6 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    35a2:	f7 01       	movw	r30, r14
    35a4:	84 81       	ldd	r24, Z+4	; 0x04
    35a6:	82 fd       	sbrc	r24, 2
    35a8:	04 c0       	rjmp	.+8      	; 0x35b2 <usart_set_baudrate+0xaa>
		baud *= 2;
    35aa:	88 0c       	add	r8, r8
    35ac:	99 1c       	adc	r9, r9
    35ae:	aa 1c       	adc	r10, r10
    35b0:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    35b2:	c3 01       	movw	r24, r6
    35b4:	b2 01       	movw	r22, r4
    35b6:	a5 01       	movw	r20, r10
    35b8:	94 01       	movw	r18, r8
    35ba:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    35be:	2f 3f       	cpi	r18, 0xFF	; 255
    35c0:	31 05       	cpc	r19, r1
    35c2:	41 05       	cpc	r20, r1
    35c4:	51 05       	cpc	r21, r1
    35c6:	08 f4       	brcc	.+2      	; 0x35ca <usart_set_baudrate+0xc2>
    35c8:	90 c0       	rjmp	.+288    	; 0x36ea <usart_set_baudrate+0x1e2>
    35ca:	8f ef       	ldi	r24, 0xFF	; 255
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	a0 e0       	ldi	r26, 0x00	; 0
    35d0:	b0 e0       	ldi	r27, 0x00	; 0
    35d2:	c9 ef       	ldi	r28, 0xF9	; 249
    35d4:	05 c0       	rjmp	.+10     	; 0x35e0 <usart_set_baudrate+0xd8>
    35d6:	28 17       	cp	r18, r24
    35d8:	39 07       	cpc	r19, r25
    35da:	4a 07       	cpc	r20, r26
    35dc:	5b 07       	cpc	r21, r27
    35de:	58 f0       	brcs	.+22     	; 0x35f6 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    35e0:	88 0f       	add	r24, r24
    35e2:	99 1f       	adc	r25, r25
    35e4:	aa 1f       	adc	r26, r26
    35e6:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    35e8:	cd 3f       	cpi	r28, 0xFD	; 253
    35ea:	0c f4       	brge	.+2      	; 0x35ee <usart_set_baudrate+0xe6>
			limit |= 1;
    35ec:	81 60       	ori	r24, 0x01	; 1
    35ee:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    35f0:	c7 30       	cpi	r28, 0x07	; 7
    35f2:	89 f7       	brne	.-30     	; 0x35d6 <usart_set_baudrate+0xce>
    35f4:	4f c0       	rjmp	.+158    	; 0x3694 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    35f6:	cc 23       	and	r28, r28
    35f8:	0c f0       	brlt	.+2      	; 0x35fc <usart_set_baudrate+0xf4>
    35fa:	4c c0       	rjmp	.+152    	; 0x3694 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    35fc:	d5 01       	movw	r26, r10
    35fe:	c4 01       	movw	r24, r8
    3600:	88 0f       	add	r24, r24
    3602:	99 1f       	adc	r25, r25
    3604:	aa 1f       	adc	r26, r26
    3606:	bb 1f       	adc	r27, r27
    3608:	88 0f       	add	r24, r24
    360a:	99 1f       	adc	r25, r25
    360c:	aa 1f       	adc	r26, r26
    360e:	bb 1f       	adc	r27, r27
    3610:	88 0f       	add	r24, r24
    3612:	99 1f       	adc	r25, r25
    3614:	aa 1f       	adc	r26, r26
    3616:	bb 1f       	adc	r27, r27
    3618:	48 1a       	sub	r4, r24
    361a:	59 0a       	sbc	r5, r25
    361c:	6a 0a       	sbc	r6, r26
    361e:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    3620:	ce 3f       	cpi	r28, 0xFE	; 254
    3622:	f4 f4       	brge	.+60     	; 0x3660 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    3624:	8d ef       	ldi	r24, 0xFD	; 253
    3626:	9f ef       	ldi	r25, 0xFF	; 255
    3628:	8c 1b       	sub	r24, r28
    362a:	91 09       	sbc	r25, r1
    362c:	c7 fd       	sbrc	r28, 7
    362e:	93 95       	inc	r25
    3630:	04 c0       	rjmp	.+8      	; 0x363a <usart_set_baudrate+0x132>
    3632:	44 0c       	add	r4, r4
    3634:	55 1c       	adc	r5, r5
    3636:	66 1c       	adc	r6, r6
    3638:	77 1c       	adc	r7, r7
    363a:	8a 95       	dec	r24
    363c:	d2 f7       	brpl	.-12     	; 0x3632 <usart_set_baudrate+0x12a>
    363e:	d5 01       	movw	r26, r10
    3640:	c4 01       	movw	r24, r8
    3642:	b6 95       	lsr	r27
    3644:	a7 95       	ror	r26
    3646:	97 95       	ror	r25
    3648:	87 95       	ror	r24
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	64 0d       	add	r22, r4
    3650:	75 1d       	adc	r23, r5
    3652:	86 1d       	adc	r24, r6
    3654:	97 1d       	adc	r25, r7
    3656:	a5 01       	movw	r20, r10
    3658:	94 01       	movw	r18, r8
    365a:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>
    365e:	37 c0       	rjmp	.+110    	; 0x36ce <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    3660:	83 e0       	ldi	r24, 0x03	; 3
    3662:	8c 0f       	add	r24, r28
    3664:	a5 01       	movw	r20, r10
    3666:	94 01       	movw	r18, r8
    3668:	04 c0       	rjmp	.+8      	; 0x3672 <usart_set_baudrate+0x16a>
    366a:	22 0f       	add	r18, r18
    366c:	33 1f       	adc	r19, r19
    366e:	44 1f       	adc	r20, r20
    3670:	55 1f       	adc	r21, r21
    3672:	8a 95       	dec	r24
    3674:	d2 f7       	brpl	.-12     	; 0x366a <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    3676:	da 01       	movw	r26, r20
    3678:	c9 01       	movw	r24, r18
    367a:	b6 95       	lsr	r27
    367c:	a7 95       	ror	r26
    367e:	97 95       	ror	r25
    3680:	87 95       	ror	r24
    3682:	bc 01       	movw	r22, r24
    3684:	cd 01       	movw	r24, r26
    3686:	64 0d       	add	r22, r4
    3688:	75 1d       	adc	r23, r5
    368a:	86 1d       	adc	r24, r6
    368c:	97 1d       	adc	r25, r7
    368e:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>
    3692:	1d c0       	rjmp	.+58     	; 0x36ce <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    3694:	83 e0       	ldi	r24, 0x03	; 3
    3696:	8c 0f       	add	r24, r28
    3698:	a5 01       	movw	r20, r10
    369a:	94 01       	movw	r18, r8
    369c:	04 c0       	rjmp	.+8      	; 0x36a6 <usart_set_baudrate+0x19e>
    369e:	22 0f       	add	r18, r18
    36a0:	33 1f       	adc	r19, r19
    36a2:	44 1f       	adc	r20, r20
    36a4:	55 1f       	adc	r21, r21
    36a6:	8a 95       	dec	r24
    36a8:	d2 f7       	brpl	.-12     	; 0x369e <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    36aa:	da 01       	movw	r26, r20
    36ac:	c9 01       	movw	r24, r18
    36ae:	b6 95       	lsr	r27
    36b0:	a7 95       	ror	r26
    36b2:	97 95       	ror	r25
    36b4:	87 95       	ror	r24
    36b6:	bc 01       	movw	r22, r24
    36b8:	cd 01       	movw	r24, r26
    36ba:	64 0d       	add	r22, r4
    36bc:	75 1d       	adc	r23, r5
    36be:	86 1d       	adc	r24, r6
    36c0:	97 1d       	adc	r25, r7
    36c2:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>
    36c6:	21 50       	subi	r18, 0x01	; 1
    36c8:	31 09       	sbc	r19, r1
    36ca:	41 09       	sbc	r20, r1
    36cc:	51 09       	sbc	r21, r1
	volatile uint8_t reg_b = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	volatile uint8_t reg_a = (uint8_t)div;
	volatile uint16_t pre  = ((uint16_t)reg_b) | ((uint16_t)reg_a << 8);
#endif

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    36ce:	83 2f       	mov	r24, r19
    36d0:	8f 70       	andi	r24, 0x0F	; 15
    36d2:	c2 95       	swap	r28
    36d4:	c0 7f       	andi	r28, 0xF0	; 240
    36d6:	c8 2b       	or	r28, r24
    36d8:	f7 01       	movw	r30, r14
    36da:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    36dc:	26 83       	std	Z+6, r18	; 0x06

	return true;
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	18 c0       	rjmp	.+48     	; 0x3712 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	16 c0       	rjmp	.+44     	; 0x3712 <usart_set_baudrate+0x20a>
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	14 c0       	rjmp	.+40     	; 0x3712 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    36ea:	d5 01       	movw	r26, r10
    36ec:	c4 01       	movw	r24, r8
    36ee:	88 0f       	add	r24, r24
    36f0:	99 1f       	adc	r25, r25
    36f2:	aa 1f       	adc	r26, r26
    36f4:	bb 1f       	adc	r27, r27
    36f6:	88 0f       	add	r24, r24
    36f8:	99 1f       	adc	r25, r25
    36fa:	aa 1f       	adc	r26, r26
    36fc:	bb 1f       	adc	r27, r27
    36fe:	88 0f       	add	r24, r24
    3700:	99 1f       	adc	r25, r25
    3702:	aa 1f       	adc	r26, r26
    3704:	bb 1f       	adc	r27, r27
    3706:	48 1a       	sub	r4, r24
    3708:	59 0a       	sbc	r5, r25
    370a:	6a 0a       	sbc	r6, r26
    370c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    370e:	c9 ef       	ldi	r28, 0xF9	; 249
    3710:	89 cf       	rjmp	.-238    	; 0x3624 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    3712:	cf 91       	pop	r28
    3714:	1f 91       	pop	r17
    3716:	0f 91       	pop	r16
    3718:	ff 90       	pop	r15
    371a:	ef 90       	pop	r14
    371c:	bf 90       	pop	r11
    371e:	af 90       	pop	r10
    3720:	9f 90       	pop	r9
    3722:	8f 90       	pop	r8
    3724:	7f 90       	pop	r7
    3726:	6f 90       	pop	r6
    3728:	5f 90       	pop	r5
    372a:	4f 90       	pop	r4
    372c:	08 95       	ret

0000372e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    372e:	0f 93       	push	r16
    3730:	1f 93       	push	r17
    3732:	cf 93       	push	r28
    3734:	df 93       	push	r29
    3736:	ec 01       	movw	r28, r24
    3738:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	09 f4       	brne	.+2      	; 0x3740 <usart_init_rs232+0x12>
    373e:	03 c1       	rjmp	.+518    	; 0x3946 <usart_init_rs232+0x218>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    3740:	80 3c       	cpi	r24, 0xC0	; 192
    3742:	91 05       	cpc	r25, r1
    3744:	29 f4       	brne	.+10     	; 0x3750 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    3746:	60 e1       	ldi	r22, 0x10	; 16
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    374e:	fb c0       	rjmp	.+502    	; 0x3946 <usart_init_rs232+0x218>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    3750:	c0 38       	cpi	r28, 0x80	; 128
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	d8 07       	cpc	r29, r24
    3756:	29 f4       	brne	.+10     	; 0x3762 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3758:	62 e0       	ldi	r22, 0x02	; 2
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3760:	f2 c0       	rjmp	.+484    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    3762:	c1 15       	cp	r28, r1
    3764:	e1 e0       	ldi	r30, 0x01	; 1
    3766:	de 07       	cpc	r29, r30
    3768:	29 f4       	brne	.+10     	; 0x3774 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    376a:	61 e0       	ldi	r22, 0x01	; 1
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3772:	e9 c0       	rjmp	.+466    	; 0x3946 <usart_init_rs232+0x218>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    3774:	c0 38       	cpi	r28, 0x80	; 128
    3776:	f3 e0       	ldi	r31, 0x03	; 3
    3778:	df 07       	cpc	r29, r31
    377a:	29 f4       	brne	.+10     	; 0x3786 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    377c:	61 e0       	ldi	r22, 0x01	; 1
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3784:	e0 c0       	rjmp	.+448    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    3786:	c0 39       	cpi	r28, 0x90	; 144
    3788:	83 e0       	ldi	r24, 0x03	; 3
    378a:	d8 07       	cpc	r29, r24
    378c:	29 f4       	brne	.+10     	; 0x3798 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    378e:	61 e0       	ldi	r22, 0x01	; 1
    3790:	82 e0       	ldi	r24, 0x02	; 2
    3792:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3796:	d7 c0       	rjmp	.+430    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    3798:	c1 15       	cp	r28, r1
    379a:	e2 e0       	ldi	r30, 0x02	; 2
    379c:	de 07       	cpc	r29, r30
    379e:	29 f4       	brne	.+10     	; 0x37aa <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    37a0:	62 e0       	ldi	r22, 0x02	; 2
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    37a8:	ce c0       	rjmp	.+412    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    37aa:	c0 34       	cpi	r28, 0x40	; 64
    37ac:	f2 e0       	ldi	r31, 0x02	; 2
    37ae:	df 07       	cpc	r29, r31
    37b0:	29 f4       	brne	.+10     	; 0x37bc <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    37b2:	62 e0       	ldi	r22, 0x02	; 2
    37b4:	82 e0       	ldi	r24, 0x02	; 2
    37b6:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    37ba:	c5 c0       	rjmp	.+394    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    37bc:	c0 32       	cpi	r28, 0x20	; 32
    37be:	83 e0       	ldi	r24, 0x03	; 3
    37c0:	d8 07       	cpc	r29, r24
    37c2:	29 f4       	brne	.+10     	; 0x37ce <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    37c4:	64 e0       	ldi	r22, 0x04	; 4
    37c6:	82 e0       	ldi	r24, 0x02	; 2
    37c8:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    37cc:	bc c0       	rjmp	.+376    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    37ce:	c1 15       	cp	r28, r1
    37d0:	e8 e0       	ldi	r30, 0x08	; 8
    37d2:	de 07       	cpc	r29, r30
    37d4:	29 f4       	brne	.+10     	; 0x37e0 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    37d6:	61 e0       	ldi	r22, 0x01	; 1
    37d8:	83 e0       	ldi	r24, 0x03	; 3
    37da:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    37de:	b3 c0       	rjmp	.+358    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    37e0:	c1 15       	cp	r28, r1
    37e2:	f9 e0       	ldi	r31, 0x09	; 9
    37e4:	df 07       	cpc	r29, r31
    37e6:	29 f4       	brne	.+10     	; 0x37f2 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    37e8:	61 e0       	ldi	r22, 0x01	; 1
    37ea:	84 e0       	ldi	r24, 0x04	; 4
    37ec:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    37f0:	aa c0       	rjmp	.+340    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    37f2:	c1 15       	cp	r28, r1
    37f4:	8a e0       	ldi	r24, 0x0A	; 10
    37f6:	d8 07       	cpc	r29, r24
    37f8:	29 f4       	brne	.+10     	; 0x3804 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    37fa:	61 e0       	ldi	r22, 0x01	; 1
    37fc:	85 e0       	ldi	r24, 0x05	; 5
    37fe:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3802:	a1 c0       	rjmp	.+322    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    3804:	c1 15       	cp	r28, r1
    3806:	eb e0       	ldi	r30, 0x0B	; 11
    3808:	de 07       	cpc	r29, r30
    380a:	29 f4       	brne	.+10     	; 0x3816 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    380c:	61 e0       	ldi	r22, 0x01	; 1
    380e:	86 e0       	ldi	r24, 0x06	; 6
    3810:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3814:	98 c0       	rjmp	.+304    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    3816:	c0 34       	cpi	r28, 0x40	; 64
    3818:	f8 e0       	ldi	r31, 0x08	; 8
    381a:	df 07       	cpc	r29, r31
    381c:	29 f4       	brne	.+10     	; 0x3828 <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    381e:	62 e0       	ldi	r22, 0x02	; 2
    3820:	83 e0       	ldi	r24, 0x03	; 3
    3822:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3826:	8f c0       	rjmp	.+286    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    3828:	c0 34       	cpi	r28, 0x40	; 64
    382a:	89 e0       	ldi	r24, 0x09	; 9
    382c:	d8 07       	cpc	r29, r24
    382e:	29 f4       	brne	.+10     	; 0x383a <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    3830:	62 e0       	ldi	r22, 0x02	; 2
    3832:	84 e0       	ldi	r24, 0x04	; 4
    3834:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3838:	86 c0       	rjmp	.+268    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    383a:	c0 34       	cpi	r28, 0x40	; 64
    383c:	ea e0       	ldi	r30, 0x0A	; 10
    383e:	de 07       	cpc	r29, r30
    3840:	29 f4       	brne	.+10     	; 0x384c <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    3842:	62 e0       	ldi	r22, 0x02	; 2
    3844:	85 e0       	ldi	r24, 0x05	; 5
    3846:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    384a:	7d c0       	rjmp	.+250    	; 0x3946 <usart_init_rs232+0x218>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    384c:	c0 39       	cpi	r28, 0x90	; 144
    384e:	f8 e0       	ldi	r31, 0x08	; 8
    3850:	df 07       	cpc	r29, r31
    3852:	29 f4       	brne	.+10     	; 0x385e <usart_init_rs232+0x130>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3854:	64 e0       	ldi	r22, 0x04	; 4
    3856:	83 e0       	ldi	r24, 0x03	; 3
    3858:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    385c:	74 c0       	rjmp	.+232    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    385e:	c0 39       	cpi	r28, 0x90	; 144
    3860:	89 e0       	ldi	r24, 0x09	; 9
    3862:	d8 07       	cpc	r29, r24
    3864:	29 f4       	brne	.+10     	; 0x3870 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3866:	64 e0       	ldi	r22, 0x04	; 4
    3868:	84 e0       	ldi	r24, 0x04	; 4
    386a:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    386e:	6b c0       	rjmp	.+214    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    3870:	c0 39       	cpi	r28, 0x90	; 144
    3872:	ea e0       	ldi	r30, 0x0A	; 10
    3874:	de 07       	cpc	r29, r30
    3876:	29 f4       	brne	.+10     	; 0x3882 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    3878:	64 e0       	ldi	r22, 0x04	; 4
    387a:	85 e0       	ldi	r24, 0x05	; 5
    387c:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3880:	62 c0       	rjmp	.+196    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    3882:	c0 39       	cpi	r28, 0x90	; 144
    3884:	fb e0       	ldi	r31, 0x0B	; 11
    3886:	df 07       	cpc	r29, r31
    3888:	29 f4       	brne	.+10     	; 0x3894 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    388a:	64 e0       	ldi	r22, 0x04	; 4
    388c:	86 e0       	ldi	r24, 0x06	; 6
    388e:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3892:	59 c0       	rjmp	.+178    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    3894:	c0 3c       	cpi	r28, 0xC0	; 192
    3896:	88 e0       	ldi	r24, 0x08	; 8
    3898:	d8 07       	cpc	r29, r24
    389a:	29 f4       	brne	.+10     	; 0x38a6 <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    389c:	68 e0       	ldi	r22, 0x08	; 8
    389e:	83 e0       	ldi	r24, 0x03	; 3
    38a0:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    38a4:	50 c0       	rjmp	.+160    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    38a6:	c0 3c       	cpi	r28, 0xC0	; 192
    38a8:	e9 e0       	ldi	r30, 0x09	; 9
    38aa:	de 07       	cpc	r29, r30
    38ac:	29 f4       	brne	.+10     	; 0x38b8 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    38ae:	68 e0       	ldi	r22, 0x08	; 8
    38b0:	84 e0       	ldi	r24, 0x04	; 4
    38b2:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    38b6:	47 c0       	rjmp	.+142    	; 0x3946 <usart_init_rs232+0x218>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    38b8:	c0 3a       	cpi	r28, 0xA0	; 160
    38ba:	f8 e0       	ldi	r31, 0x08	; 8
    38bc:	df 07       	cpc	r29, r31
    38be:	29 f4       	brne	.+10     	; 0x38ca <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    38c0:	60 e1       	ldi	r22, 0x10	; 16
    38c2:	83 e0       	ldi	r24, 0x03	; 3
    38c4:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    38c8:	3e c0       	rjmp	.+124    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    38ca:	c0 3a       	cpi	r28, 0xA0	; 160
    38cc:	89 e0       	ldi	r24, 0x09	; 9
    38ce:	d8 07       	cpc	r29, r24
    38d0:	29 f4       	brne	.+10     	; 0x38dc <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    38d2:	60 e1       	ldi	r22, 0x10	; 16
    38d4:	84 e0       	ldi	r24, 0x04	; 4
    38d6:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    38da:	35 c0       	rjmp	.+106    	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    38dc:	c0 3a       	cpi	r28, 0xA0	; 160
    38de:	ea e0       	ldi	r30, 0x0A	; 10
    38e0:	de 07       	cpc	r29, r30
    38e2:	29 f4       	brne	.+10     	; 0x38ee <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    38e4:	60 e1       	ldi	r22, 0x10	; 16
    38e6:	85 e0       	ldi	r24, 0x05	; 5
    38e8:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    38ec:	2c c0       	rjmp	.+88     	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    38ee:	c0 3a       	cpi	r28, 0xA0	; 160
    38f0:	fb e0       	ldi	r31, 0x0B	; 11
    38f2:	df 07       	cpc	r29, r31
    38f4:	29 f4       	brne	.+10     	; 0x3900 <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    38f6:	60 e1       	ldi	r22, 0x10	; 16
    38f8:	86 e0       	ldi	r24, 0x06	; 6
    38fa:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    38fe:	23 c0       	rjmp	.+70     	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    3900:	c0 3b       	cpi	r28, 0xB0	; 176
    3902:	88 e0       	ldi	r24, 0x08	; 8
    3904:	d8 07       	cpc	r29, r24
    3906:	29 f4       	brne	.+10     	; 0x3912 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    3908:	60 e2       	ldi	r22, 0x20	; 32
    390a:	83 e0       	ldi	r24, 0x03	; 3
    390c:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3910:	1a c0       	rjmp	.+52     	; 0x3946 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    3912:	c0 3b       	cpi	r28, 0xB0	; 176
    3914:	e9 e0       	ldi	r30, 0x09	; 9
    3916:	de 07       	cpc	r29, r30
    3918:	29 f4       	brne	.+10     	; 0x3924 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    391a:	60 e2       	ldi	r22, 0x20	; 32
    391c:	84 e0       	ldi	r24, 0x04	; 4
    391e:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3922:	11 c0       	rjmp	.+34     	; 0x3946 <usart_init_rs232+0x218>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    3924:	c0 38       	cpi	r28, 0x80	; 128
    3926:	f4 e0       	ldi	r31, 0x04	; 4
    3928:	df 07       	cpc	r29, r31
    392a:	29 f4       	brne	.+10     	; 0x3936 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    392c:	60 e4       	ldi	r22, 0x40	; 64
    392e:	83 e0       	ldi	r24, 0x03	; 3
    3930:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    3934:	08 c0       	rjmp	.+16     	; 0x3946 <usart_init_rs232+0x218>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    3936:	c0 3a       	cpi	r28, 0xA0	; 160
    3938:	84 e0       	ldi	r24, 0x04	; 4
    393a:	d8 07       	cpc	r29, r24
    393c:	21 f4       	brne	.+8      	; 0x3946 <usart_init_rs232+0x218>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    393e:	60 e4       	ldi	r22, 0x40	; 64
    3940:	85 e0       	ldi	r24, 0x05	; 5
    3942:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    3946:	8d 81       	ldd	r24, Y+5	; 0x05
    3948:	8f 73       	andi	r24, 0x3F	; 63
    394a:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    394c:	f8 01       	movw	r30, r16
    394e:	95 81       	ldd	r25, Z+5	; 0x05
    3950:	84 81       	ldd	r24, Z+4	; 0x04
    3952:	89 2b       	or	r24, r25
    3954:	96 81       	ldd	r25, Z+6	; 0x06
    3956:	91 11       	cpse	r25, r1
    3958:	98 e0       	ldi	r25, 0x08	; 8
    395a:	89 2b       	or	r24, r25
    395c:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    395e:	f8 01       	movw	r30, r16
    3960:	40 81       	ld	r20, Z
    3962:	51 81       	ldd	r21, Z+1	; 0x01
    3964:	62 81       	ldd	r22, Z+2	; 0x02
    3966:	73 81       	ldd	r23, Z+3	; 0x03
    3968:	00 e8       	ldi	r16, 0x80	; 128
    396a:	13 ec       	ldi	r17, 0xC3	; 195
    396c:	29 ec       	ldi	r18, 0xC9	; 201
    396e:	31 e0       	ldi	r19, 0x01	; 1
    3970:	ce 01       	movw	r24, r28
    3972:	ca dd       	rcall	.-1132   	; 0x3508 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    3974:	9c 81       	ldd	r25, Y+4	; 0x04
    3976:	98 60       	ori	r25, 0x08	; 8
    3978:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    397a:	9c 81       	ldd	r25, Y+4	; 0x04
    397c:	90 61       	ori	r25, 0x10	; 16
    397e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    3980:	df 91       	pop	r29
    3982:	cf 91       	pop	r28
    3984:	1f 91       	pop	r17
    3986:	0f 91       	pop	r16
    3988:	08 95       	ret

0000398a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    398a:	04 c0       	rjmp	.+8      	; 0x3994 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    398c:	61 50       	subi	r22, 0x01	; 1
    398e:	71 09       	sbc	r23, r1
    3990:	81 09       	sbc	r24, r1
    3992:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    3994:	61 15       	cp	r22, r1
    3996:	71 05       	cpc	r23, r1
    3998:	81 05       	cpc	r24, r1
    399a:	91 05       	cpc	r25, r1
    399c:	b9 f7       	brne	.-18     	; 0x398c <__portable_avr_delay_cycles+0x2>
    399e:	08 95       	ret

000039a0 <__vector_119>:

/* ISR routines */

/* Serial data received */
ISR(USARTF0_RXC_vect)
{
    39a0:	1f 92       	push	r1
    39a2:	0f 92       	push	r0
    39a4:	0f b6       	in	r0, 0x3f	; 63
    39a6:	0f 92       	push	r0
    39a8:	11 24       	eor	r1, r1
    39aa:	0b b6       	in	r0, 0x3b	; 59
    39ac:	0f 92       	push	r0
    39ae:	2f 93       	push	r18
    39b0:	3f 93       	push	r19
    39b2:	4f 93       	push	r20
    39b4:	5f 93       	push	r21
    39b6:	6f 93       	push	r22
    39b8:	7f 93       	push	r23
    39ba:	8f 93       	push	r24
    39bc:	9f 93       	push	r25
    39be:	af 93       	push	r26
    39c0:	bf 93       	push	r27
    39c2:	ef 93       	push	r30
    39c4:	ff 93       	push	r31
	/* Byte received */
	uint8_t ser1_rxd = usart_getchar(USART_SERIAL1);
    39c6:	80 ea       	ldi	r24, 0xA0	; 160
    39c8:	9b e0       	ldi	r25, 0x0B	; 11
    39ca:	98 dd       	rcall	.-1232   	; 0x34fc <usart_getchar>

	if (g_usart1_rx_idx < C_USART1_RX_BUF_LEN) {
    39cc:	20 91 73 28 	lds	r18, 0x2873	; 0x802873 <g_usart1_rx_idx>
    39d0:	30 91 74 28 	lds	r19, 0x2874	; 0x802874 <g_usart1_rx_idx+0x1>
    39d4:	2f 3f       	cpi	r18, 0xFF	; 255
    39d6:	31 05       	cpc	r19, r1
    39d8:	09 f0       	breq	.+2      	; 0x39dc <__vector_119+0x3c>
    39da:	58 f4       	brcc	.+22     	; 0x39f2 <__vector_119+0x52>
		g_usart1_rx_buf[g_usart1_rx_idx++] = ser1_rxd;
    39dc:	a9 01       	movw	r20, r18
    39de:	4f 5f       	subi	r20, 0xFF	; 255
    39e0:	5f 4f       	sbci	r21, 0xFF	; 255
    39e2:	40 93 73 28 	sts	0x2873, r20	; 0x802873 <g_usart1_rx_idx>
    39e6:	50 93 74 28 	sts	0x2874, r21	; 0x802874 <g_usart1_rx_idx+0x1>
    39ea:	f9 01       	movw	r30, r18
    39ec:	ed 58       	subi	r30, 0x8D	; 141
    39ee:	f8 4d       	sbci	r31, 0xD8	; 216
    39f0:	80 83       	st	Z, r24
	}

	/* Input string ready to read */
	g_usart1_rx_ready = true;
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	80 93 75 28 	sts	0x2875, r24	; 0x802875 <g_usart1_rx_ready>
}
    39f8:	ff 91       	pop	r31
    39fa:	ef 91       	pop	r30
    39fc:	bf 91       	pop	r27
    39fe:	af 91       	pop	r26
    3a00:	9f 91       	pop	r25
    3a02:	8f 91       	pop	r24
    3a04:	7f 91       	pop	r23
    3a06:	6f 91       	pop	r22
    3a08:	5f 91       	pop	r21
    3a0a:	4f 91       	pop	r20
    3a0c:	3f 91       	pop	r19
    3a0e:	2f 91       	pop	r18
    3a10:	0f 90       	pop	r0
    3a12:	0b be       	out	0x3b, r0	; 59
    3a14:	0f 90       	pop	r0
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	0f 90       	pop	r0
    3a1a:	1f 90       	pop	r1
    3a1c:	18 95       	reti

00003a1e <serial_sim808_send>:


/* Functions */

void serial_sim808_send(const char* cmd, uint8_t len)
{
    3a1e:	dc 01       	movw	r26, r24
	/* Make a copy */
	for (uint8_t cnt = len, idx = len - 1; cnt; --cnt, --idx) {
    3a20:	9f ef       	ldi	r25, 0xFF	; 255
    3a22:	96 0f       	add	r25, r22
    3a24:	66 23       	and	r22, r22
    3a26:	61 f0       	breq	.+24     	; 0x3a40 <serial_sim808_send+0x22>
		g_prepare_buf[idx] = cmd[idx];
    3a28:	29 2f       	mov	r18, r25
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	fd 01       	movw	r30, r26
    3a2e:	e2 0f       	add	r30, r18
    3a30:	f3 1f       	adc	r31, r19
    3a32:	50 81       	ld	r21, Z
    3a34:	f9 01       	movw	r30, r18
    3a36:	e5 5c       	subi	r30, 0xC5	; 197
    3a38:	fa 4d       	sbci	r31, 0xDA	; 218
    3a3a:	50 83       	st	Z, r21
/* Functions */

void serial_sim808_send(const char* cmd, uint8_t len)
{
	/* Make a copy */
	for (uint8_t cnt = len, idx = len - 1; cnt; --cnt, --idx) {
    3a3c:	91 50       	subi	r25, 0x01	; 1
    3a3e:	a0 f7       	brcc	.-24     	; 0x3a28 <serial_sim808_send+0xa>
		g_prepare_buf[idx] = cmd[idx];
	}
	g_prepare_buf[len]		= '\r';
    3a40:	46 2f       	mov	r20, r22
    3a42:	50 e0       	ldi	r21, 0x00	; 0
    3a44:	fa 01       	movw	r30, r20
    3a46:	e5 5c       	subi	r30, 0xC5	; 197
    3a48:	fa 4d       	sbci	r31, 0xDA	; 218
    3a4a:	8d e0       	ldi	r24, 0x0D	; 13
    3a4c:	80 83       	st	Z, r24
	g_prepare_buf[len + 1]	= 0;
    3a4e:	11 82       	std	Z+1, r1	; 0x01

	/* Send the string to the SIM808 */
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3a50:	6b e3       	ldi	r22, 0x3B	; 59
    3a52:	75 e2       	ldi	r23, 0x25	; 37
    3a54:	80 ea       	ldi	r24, 0xA0	; 160
    3a56:	9b e0       	ldi	r25, 0x0B	; 11
    3a58:	2f cd       	rjmp	.-1442   	; 0x34b8 <usart_serial_write_packet>
    3a5a:	08 95       	ret

00003a5c <serial_init>:
}

/* Set up serial connection to the SIM808 */
void serial_init(void)
{
    3a5c:	cf 92       	push	r12
    3a5e:	df 92       	push	r13
    3a60:	ff 92       	push	r15
    3a62:	0f 93       	push	r16
    3a64:	1f 93       	push	r17
    3a66:	cf 93       	push	r28
    3a68:	df 93       	push	r29
    3a6a:	cd b7       	in	r28, 0x3d	; 61
    3a6c:	de b7       	in	r29, 0x3e	; 62
    3a6e:	27 97       	sbiw	r28, 0x07	; 7
    3a70:	cd bf       	out	0x3d, r28	; 61
    3a72:	de bf       	out	0x3e, r29	; 62
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3a74:	e0 ea       	ldi	r30, 0xA0	; 160
    3a76:	f6 e0       	ldi	r31, 0x06	; 6
    3a78:	92 e0       	ldi	r25, 0x02	; 2
    3a7a:	95 83       	std	Z+5, r25	; 0x05
    3a7c:	88 e0       	ldi	r24, 0x08	; 8
    3a7e:	85 83       	std	Z+5, r24	; 0x05
    3a80:	60 e8       	ldi	r22, 0x80	; 128
    3a82:	65 83       	std	Z+5, r22	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3a84:	20 e8       	ldi	r18, 0x80	; 128
    3a86:	36 e0       	ldi	r19, 0x06	; 6
    3a88:	00 e2       	ldi	r16, 0x20	; 32
    3a8a:	d9 01       	movw	r26, r18
    3a8c:	16 96       	adiw	r26, 0x06	; 6
    3a8e:	0c 93       	st	X, r16
    3a90:	16 97       	sbiw	r26, 0x06	; 6
    3a92:	70 e1       	ldi	r23, 0x10	; 16
    3a94:	16 96       	adiw	r26, 0x06	; 6
    3a96:	7c 93       	st	X, r23
    3a98:	0f 2e       	mov	r0, r31
    3a9a:	f0 e6       	ldi	r31, 0x60	; 96
    3a9c:	cf 2e       	mov	r12, r31
    3a9e:	f6 e0       	ldi	r31, 0x06	; 6
    3aa0:	df 2e       	mov	r13, r31
    3aa2:	f0 2d       	mov	r31, r0
    3aa4:	d6 01       	movw	r26, r12
    3aa6:	16 96       	adiw	r26, 0x06	; 6
    3aa8:	9c 93       	st	X, r25
    3aaa:	16 97       	sbiw	r26, 0x06	; 6
    3aac:	16 96       	adiw	r26, 0x06	; 6
    3aae:	8c 93       	st	X, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3ab0:	4f b7       	in	r20, 0x3f	; 63
    3ab2:	49 83       	std	Y+1, r20	; 0x01
	cpu_irq_disable();
    3ab4:	f8 94       	cli
	return flags;
    3ab6:	f9 80       	ldd	r15, Y+1	; 0x01
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3ab8:	41 eb       	ldi	r20, 0xB1	; 177
    3aba:	56 e0       	ldi	r21, 0x06	; 6
    3abc:	da 01       	movw	r26, r20
    3abe:	1c 91       	ld	r17, X
    3ac0:	17 70       	andi	r17, 0x07	; 7
    3ac2:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3ac4:	1c 91       	ld	r17, X
    3ac6:	10 68       	ori	r17, 0x80	; 128
    3ac8:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3aca:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3acc:	4f b7       	in	r20, 0x3f	; 63
    3ace:	4a 83       	std	Y+2, r20	; 0x02
	cpu_irq_disable();
    3ad0:	f8 94       	cli
	return flags;
    3ad2:	fa 80       	ldd	r15, Y+2	; 0x02
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3ad4:	43 eb       	ldi	r20, 0xB3	; 179
    3ad6:	56 e0       	ldi	r21, 0x06	; 6
    3ad8:	da 01       	movw	r26, r20
    3ada:	1c 91       	ld	r17, X
    3adc:	17 70       	andi	r17, 0x07	; 7
    3ade:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3ae0:	1c 91       	ld	r17, X
    3ae2:	10 68       	ori	r17, 0x80	; 128
    3ae4:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3ae6:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3ae8:	4f b7       	in	r20, 0x3f	; 63
    3aea:	4b 83       	std	Y+3, r20	; 0x03
	cpu_irq_disable();
    3aec:	f8 94       	cli
	return flags;
    3aee:	fb 80       	ldd	r15, Y+3	; 0x03
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3af0:	47 eb       	ldi	r20, 0xB7	; 183
    3af2:	56 e0       	ldi	r21, 0x06	; 6
    3af4:	da 01       	movw	r26, r20
    3af6:	1c 91       	ld	r17, X
    3af8:	17 70       	andi	r17, 0x07	; 7
    3afa:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3afc:	1c 91       	ld	r17, X
    3afe:	10 68       	ori	r17, 0x80	; 128
    3b00:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b02:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b04:	4f b7       	in	r20, 0x3f	; 63
    3b06:	4c 83       	std	Y+4, r20	; 0x04
	cpu_irq_disable();
    3b08:	f8 94       	cli
	return flags;
    3b0a:	fc 80       	ldd	r15, Y+4	; 0x04
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3b0c:	45 e9       	ldi	r20, 0x95	; 149
    3b0e:	56 e0       	ldi	r21, 0x06	; 6
    3b10:	da 01       	movw	r26, r20
    3b12:	1c 91       	ld	r17, X
    3b14:	17 70       	andi	r17, 0x07	; 7
    3b16:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3b18:	1c 91       	ld	r17, X
    3b1a:	10 69       	ori	r17, 0x90	; 144
    3b1c:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b1e:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b20:	4f b7       	in	r20, 0x3f	; 63
    3b22:	4d 83       	std	Y+5, r20	; 0x05
	cpu_irq_disable();
    3b24:	f8 94       	cli
	return flags;
    3b26:	fd 80       	ldd	r15, Y+5	; 0x05
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3b28:	44 e9       	ldi	r20, 0x94	; 148
    3b2a:	56 e0       	ldi	r21, 0x06	; 6
    3b2c:	da 01       	movw	r26, r20
    3b2e:	1c 91       	ld	r17, X
    3b30:	17 70       	andi	r17, 0x07	; 7
    3b32:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3b34:	1c 91       	ld	r17, X
    3b36:	10 69       	ori	r17, 0x90	; 144
    3b38:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b3a:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b3c:	4f b7       	in	r20, 0x3f	; 63
    3b3e:	4e 83       	std	Y+6, r20	; 0x06
	cpu_irq_disable();
    3b40:	f8 94       	cli
	return flags;
    3b42:	fe 80       	ldd	r15, Y+6	; 0x06
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3b44:	41 e7       	ldi	r20, 0x71	; 113
    3b46:	56 e0       	ldi	r21, 0x06	; 6
    3b48:	da 01       	movw	r26, r20
    3b4a:	1c 91       	ld	r17, X
    3b4c:	17 70       	andi	r17, 0x07	; 7
    3b4e:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3b50:	1c 91       	ld	r17, X
    3b52:	10 69       	ori	r17, 0x90	; 144
    3b54:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b56:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b58:	4f b7       	in	r20, 0x3f	; 63
    3b5a:	4f 83       	std	Y+7, r20	; 0x07
	cpu_irq_disable();
    3b5c:	f8 94       	cli
	return flags;
    3b5e:	ff 80       	ldd	r15, Y+7	; 0x07
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3b60:	43 e7       	ldi	r20, 0x73	; 115
    3b62:	56 e0       	ldi	r21, 0x06	; 6
    3b64:	da 01       	movw	r26, r20
    3b66:	1c 91       	ld	r17, X
    3b68:	17 70       	andi	r17, 0x07	; 7
    3b6a:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3b6c:	1c 91       	ld	r17, X
    3b6e:	10 69       	ori	r17, 0x90	; 144
    3b70:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b72:	ff be       	out	0x3f, r15	; 63
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3b74:	91 83       	std	Z+1, r25	; 0x01
    3b76:	81 83       	std	Z+1, r24	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3b78:	54 e0       	ldi	r21, 0x04	; 4
    3b7a:	52 83       	std	Z+2, r21	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3b7c:	61 83       	std	Z+1, r22	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3b7e:	10 e4       	ldi	r17, 0x40	; 64
    3b80:	12 83       	std	Z+2, r17	; 0x02
    3b82:	72 83       	std	Z+2, r23	; 0x02
    3b84:	41 e0       	ldi	r20, 0x01	; 1
    3b86:	42 83       	std	Z+2, r20	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3b88:	f9 01       	movw	r30, r18
    3b8a:	01 83       	std	Z+1, r16	; 0x01
    3b8c:	71 83       	std	Z+1, r23	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3b8e:	82 83       	std	Z+2, r24	; 0x02
    3b90:	e0 e0       	ldi	r30, 0x00	; 0
    3b92:	f6 e0       	ldi	r31, 0x06	; 6
    3b94:	62 83       	std	Z+2, r22	; 0x02
    3b96:	12 83       	std	Z+2, r17	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3b98:	d6 01       	movw	r26, r12
    3b9a:	11 96       	adiw	r26, 0x01	; 1
    3b9c:	9c 93       	st	X, r25
    3b9e:	11 97       	sbiw	r26, 0x01	; 1
    3ba0:	11 96       	adiw	r26, 0x01	; 1
    3ba2:	8c 93       	st	X, r24
    3ba4:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3ba6:	12 96       	adiw	r26, 0x02	; 2
    3ba8:	5c 93       	st	X, r21
    3baa:	12 97       	sbiw	r26, 0x02	; 2
    3bac:	12 96       	adiw	r26, 0x02	; 2
    3bae:	4c 93       	st	X, r20
    3bb0:	40 93 e2 07 	sts	0x07E2, r20	; 0x8007e2 <__TEXT_REGION_LENGTH__+0x7007e2>

	ioport_set_pin_dir(GPS_GSM_1PPS_GPIO,			IOPORT_DIR_INPUT);


	/* Prepare to use ASF USART service */
	g_usart1_options.baudrate	= USART_SERIAL1_BAUDRATE;
    3bb4:	e6 e7       	ldi	r30, 0x76	; 118
    3bb6:	f8 e2       	ldi	r31, 0x28	; 40
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	96 e9       	ldi	r25, 0x96	; 150
    3bbc:	a0 e0       	ldi	r26, 0x00	; 0
    3bbe:	b0 e0       	ldi	r27, 0x00	; 0
    3bc0:	80 83       	st	Z, r24
    3bc2:	91 83       	std	Z+1, r25	; 0x01
    3bc4:	a2 83       	std	Z+2, r26	; 0x02
    3bc6:	b3 83       	std	Z+3, r27	; 0x03
	g_usart1_options.charlength	= USART_SERIAL1_CHAR_LENGTH;
    3bc8:	83 e0       	ldi	r24, 0x03	; 3
    3bca:	84 83       	std	Z+4, r24	; 0x04
	g_usart1_options.paritytype	= USART_SERIAL1_PARITY;
    3bcc:	15 82       	std	Z+5, r1	; 0x05
	g_usart1_options.stopbits	= USART_SERIAL1_STOP_BIT;
    3bce:	16 82       	std	Z+6, r1	; 0x06
}
    3bd0:	27 96       	adiw	r28, 0x07	; 7
    3bd2:	cd bf       	out	0x3d, r28	; 61
    3bd4:	de bf       	out	0x3e, r29	; 62
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	ff 90       	pop	r15
    3be0:	df 90       	pop	r13
    3be2:	cf 90       	pop	r12
    3be4:	08 95       	ret

00003be6 <serial_start>:
PROGMEM_DECLARE(const char, PM_TWI1_INIT_ONBOARD_SIM808_GPS_01[]);
PROGMEM_DECLARE(const char, PM_TWI1_INIT_ONBOARD_SIM808_GPS_02[]);

/* USB device stack start function to enable stack and start USB */
void serial_start(void)
{
    3be6:	2f 92       	push	r2
    3be8:	3f 92       	push	r3
    3bea:	4f 92       	push	r4
    3bec:	5f 92       	push	r5
    3bee:	6f 92       	push	r6
    3bf0:	7f 92       	push	r7
    3bf2:	8f 92       	push	r8
    3bf4:	9f 92       	push	r9
    3bf6:	af 92       	push	r10
    3bf8:	bf 92       	push	r11
    3bfa:	cf 92       	push	r12
    3bfc:	df 92       	push	r13
    3bfe:	ef 92       	push	r14
    3c00:	ff 92       	push	r15
    3c02:	0f 93       	push	r16
    3c04:	1f 93       	push	r17
    3c06:	cf 93       	push	r28
    3c08:	df 93       	push	r29
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
    3c0e:	27 97       	sbiw	r28, 0x07	; 7
    3c10:	cd bf       	out	0x3d, r28	; 61
    3c12:	de bf       	out	0x3e, r29	; 62
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    3c14:	e6 e7       	ldi	r30, 0x76	; 118
    3c16:	f8 e2       	ldi	r31, 0x28	; 40
    3c18:	84 81       	ldd	r24, Z+4	; 0x04
    3c1a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    3c1c:	85 81       	ldd	r24, Z+5	; 0x05
    3c1e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    3c20:	86 81       	ldd	r24, Z+6	; 0x06
    3c22:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    3c24:	80 81       	ld	r24, Z
    3c26:	91 81       	ldd	r25, Z+1	; 0x01
    3c28:	a2 81       	ldd	r26, Z+2	; 0x02
    3c2a:	b3 81       	ldd	r27, Z+3	; 0x03
    3c2c:	89 83       	std	Y+1, r24	; 0x01
    3c2e:	9a 83       	std	Y+2, r25	; 0x02
    3c30:	ab 83       	std	Y+3, r26	; 0x03
    3c32:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
	}
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    3c34:	60 e1       	ldi	r22, 0x10	; 16
    3c36:	86 e0       	ldi	r24, 0x06	; 6
    3c38:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    3c3c:	be 01       	movw	r22, r28
    3c3e:	6f 5f       	subi	r22, 0xFF	; 255
    3c40:	7f 4f       	sbci	r23, 0xFF	; 255
    3c42:	80 ea       	ldi	r24, 0xA0	; 160
    3c44:	9b e0       	ldi	r25, 0x0B	; 11
    3c46:	73 dd       	rcall	.-1306   	; 0x372e <usart_init_rs232>

	/* Init and start of the ASF USART service/device */
	usart_serial_init(USART_SERIAL1, &g_usart1_options);

	/* ISR interrupt levels */
	((USART_t*)USART_SERIAL1)->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    3c48:	80 e1       	ldi	r24, 0x10	; 16
    3c4a:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>

	/* Inform about to start the SIM808 - LCD */
	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_START);
    3c4e:	82 e6       	ldi	r24, 0x62	; 98
    3c50:	94 e0       	ldi	r25, 0x04	; 4
    3c52:	9f 93       	push	r25
    3c54:	8f 93       	push	r24
    3c56:	1f 92       	push	r1
    3c58:	68 94       	set
    3c5a:	ff 24       	eor	r15, r15
    3c5c:	f6 f8       	bld	r15, 6
    3c5e:	ff 92       	push	r15
    3c60:	0b e3       	ldi	r16, 0x3B	; 59
    3c62:	15 e2       	ldi	r17, 0x25	; 37
    3c64:	1f 93       	push	r17
    3c66:	0f 93       	push	r16
    3c68:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3c6c:	a8 01       	movw	r20, r16
    3c6e:	66 e4       	ldi	r22, 0x46	; 70
    3c70:	88 e0       	ldi	r24, 0x08	; 8
    3c72:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>

	/* Inform about to start the SIM808 - USB */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_START);
    3c76:	86 ec       	ldi	r24, 0xC6	; 198
    3c78:	94 e0       	ldi	r25, 0x04	; 4
    3c7a:	9f 93       	push	r25
    3c7c:	8f 93       	push	r24
    3c7e:	1f 92       	push	r1
    3c80:	ff 92       	push	r15
    3c82:	1f 93       	push	r17
    3c84:	0f 93       	push	r16
    3c86:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, len, false);
    3c8a:	40 e0       	ldi	r20, 0x00	; 0
    3c8c:	68 2f       	mov	r22, r24
    3c8e:	c8 01       	movw	r24, r16
    3c90:	d0 d1       	rcall	.+928    	; 0x4032 <udi_write_tx_buf>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3c92:	80 e2       	ldi	r24, 0x20	; 32
    3c94:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

	/* Release the GSM_RESETn */
	ioport_set_pin_level(GSM_RESET_DRV_GPIO, HIGH);
	delay_ms(500);
    3c98:	61 ea       	ldi	r22, 0xA1	; 161
    3c9a:	75 e2       	ldi	r23, 0x25	; 37
    3c9c:	86 e2       	ldi	r24, 0x26	; 38
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	74 de       	rcall	.-792    	; 0x398a <__portable_avr_delay_cycles>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3ca2:	00 ea       	ldi	r16, 0xA0	; 160
    3ca4:	16 e0       	ldi	r17, 0x06	; 6
    3ca6:	82 e0       	ldi	r24, 0x02	; 2
    3ca8:	f8 01       	movw	r30, r16
    3caa:	86 83       	std	Z+6, r24	; 0x06

	/* Data Terminal Ready is true */
	ioport_set_pin_level(GSM_DTR1_DRV, LOW);	// Activate SIM808 (non SLEEP mode)
	delay_ms(100);
    3cac:	61 e2       	ldi	r22, 0x21	; 33
    3cae:	71 ea       	ldi	r23, 0xA1	; 161
    3cb0:	87 e0       	ldi	r24, 0x07	; 7
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	6a de       	rcall	.-812    	; 0x398a <__portable_avr_delay_cycles>
    3cb6:	80 e8       	ldi	r24, 0x80	; 128
    3cb8:	f8 01       	movw	r30, r16
	ioport_set_pin_level(GSM_RTS1_DRV, LOW);	// Serial line ready
	delay_ms(1);
    3cba:	86 83       	std	Z+6, r24	; 0x06
    3cbc:	68 e8       	ldi	r22, 0x88	; 136
    3cbe:	73 e1       	ldi	r23, 0x13	; 19
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	62 de       	rcall	.-828    	; 0x398a <__portable_avr_delay_cycles>
    3cc6:	cd bf       	out	0x3d, r28	; 61
	/* ISR interrupt levels */
	((USART_t*)USART_SERIAL1)->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;

	/* Inform about to start the SIM808 - LCD */
	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_START);
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3cc8:	de bf       	out	0x3e, r29	; 62
    3cca:	68 94       	set
    3ccc:	bb 24       	eor	r11, r11
				g_usart1_rx_ready = false;
				cpu_irq_restore(flags);
			}

			/* Leave loop when SIM808 responds */
			if (g_prepare_buf[0] && strstr_P(g_prepare_buf, PM_SIM808_OK))
    3cce:	b3 f8       	bld	r11, 3
    3cd0:	0f 2e       	mov	r0, r31
    3cd2:	fb e3       	ldi	r31, 0x3B	; 59
    3cd4:	ef 2e       	mov	r14, r31
    3cd6:	f5 e2       	ldi	r31, 0x25	; 37
    3cd8:	ff 2e       	mov	r15, r31
    3cda:	f0 2d       	mov	r31, r0
    3cdc:	9e 2c       	mov	r9, r14
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3cde:	af 2c       	mov	r10, r15
    3ce0:	0f 2e       	mov	r0, r31
    3ce2:	f0 ea       	ldi	r31, 0xA0	; 160
    3ce4:	cf 2e       	mov	r12, r31
    3ce6:	f6 e0       	ldi	r31, 0x06	; 6
    3ce8:	df 2e       	mov	r13, r31
    3cea:	f0 2d       	mov	r31, r0
    3cec:	68 94       	set
    3cee:	88 24       	eor	r8, r8
    3cf0:	87 f8       	bld	r8, 7
    3cf2:	68 94       	set
    3cf4:	77 24       	eor	r7, r7
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3cf6:	71 f8       	bld	r7, 1
    3cf8:	68 94       	set
    3cfa:	66 24       	eor	r6, r6
				/* Inform about restart - LCD */
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
    3cfc:	65 f8       	bld	r6, 5
    3cfe:	0f 2e       	mov	r0, r31
    3d00:	f6 e4       	ldi	r31, 0x46	; 70
    3d02:	4f 2e       	mov	r4, r31
    3d04:	f4 e0       	ldi	r31, 0x04	; 4
    3d06:	5f 2e       	mov	r5, r31
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);

				/* Inform about restart - USB */
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_RESTART);
    3d08:	f0 2d       	mov	r31, r0
    3d0a:	0f 2e       	mov	r0, r31
    3d0c:	fe e9       	ldi	r31, 0x9E	; 158
    3d0e:	2f 2e       	mov	r2, r31
    3d10:	f4 e0       	ldi	r31, 0x04	; 4
    3d12:	3f 2e       	mov	r3, r31
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3d14:	f0 2d       	mov	r31, r0
    3d16:	0c e0       	ldi	r16, 0x0C	; 12
	ioport_set_pin_level(GSM_RTS1_DRV, LOW);	// Serial line ready
	delay_ms(1);

	/* Synchronize with SIM808 */
	while (true) {
		usart_serial_write_packet(USART_SERIAL1, (const uint8_t*)"AT\r", 3);
    3d18:	10 e0       	ldi	r17, 0x00	; 0
    3d1a:	43 e0       	ldi	r20, 0x03	; 3
    3d1c:	50 e0       	ldi	r21, 0x00	; 0
    3d1e:	62 e3       	ldi	r22, 0x32	; 50
    3d20:	71 e2       	ldi	r23, 0x21	; 33
    3d22:	80 ea       	ldi	r24, 0xA0	; 160
		delay_ms(100);
    3d24:	9b e0       	ldi	r25, 0x0B	; 11
    3d26:	c8 db       	rcall	.-2160   	; 0x34b8 <usart_serial_write_packet>
    3d28:	61 e2       	ldi	r22, 0x21	; 33
    3d2a:	71 ea       	ldi	r23, 0xA1	; 161
    3d2c:	87 e0       	ldi	r24, 0x07	; 7
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
		if (g_usart1_rx_ready) {
    3d30:	2c de       	rcall	.-936    	; 0x398a <__portable_avr_delay_cycles>
    3d32:	80 91 75 28 	lds	r24, 0x2875	; 0x802875 <g_usart1_rx_ready>
    3d36:	88 23       	and	r24, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3d38:	81 f3       	breq	.-32     	; 0x3d1a <serial_start+0x134>
    3d3a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    3d3c:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    3d3e:	f8 94       	cli
			{
				irqflags_t flags = cpu_irq_save();
				for (int16_t idx = g_usart1_rx_idx - 1; idx >= 0; --idx) {
    3d40:	39 81       	ldd	r19, Y+1	; 0x01
    3d42:	e0 91 73 28 	lds	r30, 0x2873	; 0x802873 <g_usart1_rx_idx>
    3d46:	f0 91 74 28 	lds	r31, 0x2874	; 0x802874 <g_usart1_rx_idx+0x1>
    3d4a:	cf 01       	movw	r24, r30
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	4a f0       	brmi	.+18     	; 0x3d62 <serial_start+0x17c>
    3d50:	df 01       	movw	r26, r30
    3d52:	ad 58       	subi	r26, 0x8D	; 141
    3d54:	b8 4d       	sbci	r27, 0xD8	; 216
    3d56:	e5 5c       	subi	r30, 0xC5	; 197
					g_prepare_buf[idx] = g_usart1_rx_buf[idx];
    3d58:	fa 4d       	sbci	r31, 0xDA	; 218
    3d5a:	2e 91       	ld	r18, -X
		usart_serial_write_packet(USART_SERIAL1, (const uint8_t*)"AT\r", 3);
		delay_ms(100);
		if (g_usart1_rx_ready) {
			{
				irqflags_t flags = cpu_irq_save();
				for (int16_t idx = g_usart1_rx_idx - 1; idx >= 0; --idx) {
    3d5c:	22 93       	st	-Z, r18
    3d5e:	01 97       	sbiw	r24, 0x01	; 1
					g_prepare_buf[idx] = g_usart1_rx_buf[idx];
				}
				g_usart1_rx_idx = 0;
    3d60:	e2 f7       	brpl	.-8      	; 0x3d5a <serial_start+0x174>
    3d62:	10 92 73 28 	sts	0x2873, r1	; 0x802873 <g_usart1_rx_idx>
    3d66:	10 92 74 28 	sts	0x2874, r1	; 0x802874 <g_usart1_rx_idx+0x1>
				g_usart1_rx_ready = false;
    3d6a:	10 92 75 28 	sts	0x2875, r1	; 0x802875 <g_usart1_rx_ready>
				cpu_irq_restore(flags);
			}

			/* Leave loop when SIM808 responds */
			if (g_prepare_buf[0] && strstr_P(g_prepare_buf, PM_SIM808_OK))
    3d6e:	3f bf       	out	0x3f, r19	; 63
    3d70:	f7 01       	movw	r30, r14
    3d72:	80 81       	ld	r24, Z
    3d74:	88 23       	and	r24, r24
    3d76:	49 f0       	breq	.+18     	; 0x3d8a <serial_start+0x1a4>
    3d78:	6e ee       	ldi	r22, 0xEE	; 238
    3d7a:	74 e0       	ldi	r23, 0x04	; 4
    3d7c:	89 2d       	mov	r24, r9
    3d7e:	9a 2d       	mov	r25, r10
    3d80:	0e 94 96 84 	call	0x1092c	; 0x1092c <strstr_P>
    3d84:	89 2b       	or	r24, r25
    3d86:	09 f0       	breq	.+2      	; 0x3d8a <serial_start+0x1a4>
    3d88:	52 c0       	rjmp	.+164    	; 0x3e2e <serial_start+0x248>
    3d8a:	01 50       	subi	r16, 0x01	; 1
				break;

			if (loop_ctr++ > 10) {
    3d8c:	11 09       	sbc	r17, r1
    3d8e:	09 f0       	breq	.+2      	; 0x3d92 <serial_start+0x1ac>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3d90:	c4 cf       	rjmp	.-120    	; 0x3d1a <serial_start+0x134>
    3d92:	f6 01       	movw	r30, r12
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3d94:	85 82       	std	Z+5, r8	; 0x05
    3d96:	75 82       	std	Z+5, r7	; 0x05

				/* Turn off SIM808 */
				ioport_set_pin_level(GSM_RTS1_DRV,			HIGH);	// Serial line NOT ready
				ioport_set_pin_level(GSM_DTR1_DRV,			HIGH);	// DTR inactive
				ioport_set_pin_level(GSM_RESET_DRV_GPIO,	LOW);	// RESETn active
				delay_ms(150);
    3d98:	60 92 86 06 	sts	0x0686, r6	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    3d9c:	61 eb       	ldi	r22, 0xB1	; 177
    3d9e:	71 e7       	ldi	r23, 0x71	; 113
    3da0:	8b e0       	ldi	r24, 0x0B	; 11
    3da2:	90 e0       	ldi	r25, 0x00	; 0

				/* Inform about restart - LCD */
				if (line > 12) {
    3da4:	f2 dd       	rcall	.-1052   	; 0x398a <__portable_avr_delay_cycles>
    3da6:	fc e0       	ldi	r31, 0x0C	; 12
    3da8:	fb 15       	cp	r31, r11
					task_twi2_lcd_header();
    3daa:	30 f4       	brcc	.+12     	; 0x3db8 <serial_start+0x1d2>
    3dac:	0e 94 6a 37 	call	0x6ed4	; 0x6ed4 <task_twi2_lcd_header>
					line = 3;
    3db0:	0f 2e       	mov	r0, r31
    3db2:	f3 e0       	ldi	r31, 0x03	; 3
    3db4:	bf 2e       	mov	r11, r31
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
    3db6:	f0 2d       	mov	r31, r0
    3db8:	5f 92       	push	r5
    3dba:	4f 92       	push	r4
    3dbc:	1f 92       	push	r1
    3dbe:	20 e4       	ldi	r18, 0x40	; 64
    3dc0:	2f 93       	push	r18
    3dc2:	ff 92       	push	r15
    3dc4:	ef 92       	push	r14
    3dc6:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3dca:	11 e0       	ldi	r17, 0x01	; 1
    3dcc:	1b 0d       	add	r17, r11
    3dce:	6b 2d       	mov	r22, r11
    3dd0:	66 0f       	add	r22, r22
    3dd2:	86 2f       	mov	r24, r22
    3dd4:	88 0f       	add	r24, r24
    3dd6:	88 0f       	add	r24, r24
    3dd8:	68 0f       	add	r22, r24
    3dda:	a7 01       	movw	r20, r14
    3ddc:	88 e0       	ldi	r24, 0x08	; 8
    3dde:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>

				/* Inform about restart - USB */
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_RESTART);
    3de2:	3f 92       	push	r3
    3de4:	2f 92       	push	r2
    3de6:	1f 92       	push	r1
    3de8:	30 e4       	ldi	r19, 0x40	; 64
    3dea:	3f 93       	push	r19
    3dec:	ff 92       	push	r15
    3dee:	ef 92       	push	r14
				udi_write_tx_buf(g_prepare_buf, len, false);
    3df0:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    3df4:	40 e0       	ldi	r20, 0x00	; 0
    3df6:	68 2f       	mov	r22, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3df8:	c7 01       	movw	r24, r14
    3dfa:	1b d1       	rcall	.+566    	; 0x4032 <udi_write_tx_buf>

				/* Restart SIM808 */
				ioport_set_pin_level(GSM_RESET_DRV_GPIO,	HIGH);	// Release the RESETn line
				delay_ms(500);
    3dfc:	60 92 85 06 	sts	0x0685, r6	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    3e00:	61 ea       	ldi	r22, 0xA1	; 161
    3e02:	75 e2       	ldi	r23, 0x25	; 37
    3e04:	86 e2       	ldi	r24, 0x26	; 38
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	c0 dd       	rcall	.-1152   	; 0x398a <__portable_avr_delay_cycles>
				ioport_set_pin_level(GSM_DTR1_DRV,			LOW);	// DTR active
				delay_ms(100);
    3e0a:	f6 01       	movw	r30, r12
    3e0c:	76 82       	std	Z+6, r7	; 0x06
    3e0e:	61 e2       	ldi	r22, 0x21	; 33
    3e10:	71 ea       	ldi	r23, 0xA1	; 161
    3e12:	87 e0       	ldi	r24, 0x07	; 7
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	b9 dd       	rcall	.-1166   	; 0x398a <__portable_avr_delay_cycles>
				ioport_set_pin_level(GSM_RTS1_DRV,			LOW);	// Serial line ready
				delay_ms(1);
    3e18:	f6 01       	movw	r30, r12
    3e1a:	86 82       	std	Z+6, r8	; 0x06
    3e1c:	68 e8       	ldi	r22, 0x88	; 136
    3e1e:	73 e1       	ldi	r23, 0x13	; 19
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	b2 dd       	rcall	.-1180   	; 0x398a <__portable_avr_delay_cycles>
    3e26:	cd bf       	out	0x3d, r28	; 61
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3e28:	de bf       	out	0x3e, r29	; 62
    3e2a:	b1 2e       	mov	r11, r17
			}
		}
	}

	/* Set the auto baud rate to fix rate */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_IPR, USART_SERIAL1_BAUDRATE);
    3e2c:	74 cf       	rjmp	.-280    	; 0x3d16 <serial_start+0x130>
    3e2e:	1f 92       	push	r1
    3e30:	1f 92       	push	r1
    3e32:	86 e9       	ldi	r24, 0x96	; 150
    3e34:	8f 93       	push	r24
    3e36:	1f 92       	push	r1
    3e38:	84 e2       	ldi	r24, 0x24	; 36
    3e3a:	94 e0       	ldi	r25, 0x04	; 4
    3e3c:	9f 93       	push	r25
    3e3e:	8f 93       	push	r24
    3e40:	1f 92       	push	r1
    3e42:	68 94       	set
    3e44:	ff 24       	eor	r15, r15
    3e46:	f6 f8       	bld	r15, 6
    3e48:	ff 92       	push	r15
    3e4a:	0b e3       	ldi	r16, 0x3B	; 59
    3e4c:	15 e2       	ldi	r17, 0x25	; 37
    3e4e:	1f 93       	push	r17
    3e50:	0f 93       	push	r16
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3e52:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    3e56:	ac 01       	movw	r20, r24
    3e58:	b8 01       	movw	r22, r16
    3e5a:	80 ea       	ldi	r24, 0xA0	; 160
    3e5c:	9b e0       	ldi	r25, 0x0B	; 11
	yield_ms(500);
    3e5e:	2c db       	rcall	.-2472   	; 0x34b8 <usart_serial_write_packet>
    3e60:	84 ef       	ldi	r24, 0xF4	; 244
    3e62:	91 e0       	ldi	r25, 0x01	; 1
    3e64:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>

#if 1
	/* Request the version number of the firmware */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_INFO_01);
    3e68:	82 e1       	ldi	r24, 0x12	; 18
    3e6a:	94 e0       	ldi	r25, 0x04	; 4
    3e6c:	9f 93       	push	r25
    3e6e:	8f 93       	push	r24
    3e70:	1f 92       	push	r1
    3e72:	ff 92       	push	r15
    3e74:	1f 93       	push	r17
    3e76:	0f 93       	push	r16
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3e78:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    3e7c:	ac 01       	movw	r20, r24
    3e7e:	b8 01       	movw	r22, r16
    3e80:	80 ea       	ldi	r24, 0xA0	; 160
    3e82:	9b e0       	ldi	r25, 0x0B	; 11
	yield_ms(1000);
    3e84:	19 db       	rcall	.-2510   	; 0x34b8 <usart_serial_write_packet>
    3e86:	88 ee       	ldi	r24, 0xE8	; 232
    3e88:	93 e0       	ldi	r25, 0x03	; 3
	yield_ms(1000);
#endif

#if 1
	/* Minimize functionality - do not do GSM */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_CFUN0);
    3e8a:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
    3e8e:	88 e1       	ldi	r24, 0x18	; 24
    3e90:	94 e0       	ldi	r25, 0x04	; 4
    3e92:	9f 93       	push	r25
    3e94:	8f 93       	push	r24
    3e96:	1f 92       	push	r1
    3e98:	ff 92       	push	r15
    3e9a:	1f 93       	push	r17
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3e9c:	0f 93       	push	r16
    3e9e:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    3ea2:	ac 01       	movw	r20, r24
    3ea4:	b8 01       	movw	r22, r16
    3ea6:	80 ea       	ldi	r24, 0xA0	; 160
	yield_ms(500);
    3ea8:	9b e0       	ldi	r25, 0x0B	; 11
    3eaa:	06 db       	rcall	.-2548   	; 0x34b8 <usart_serial_write_packet>
    3eac:	84 ef       	ldi	r24, 0xF4	; 244
    3eae:	91 e0       	ldi	r25, 0x01	; 1
#endif

#if 1
	/* Enable GNSS (GPS, Glonass, ...) */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_GPS_01, 1);
    3eb0:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
    3eb4:	1f 92       	push	r1
    3eb6:	ee 24       	eor	r14, r14
    3eb8:	e3 94       	inc	r14
    3eba:	ef 92       	push	r14
    3ebc:	82 e0       	ldi	r24, 0x02	; 2
    3ebe:	94 e0       	ldi	r25, 0x04	; 4
    3ec0:	9f 93       	push	r25
    3ec2:	8f 93       	push	r24
    3ec4:	1f 92       	push	r1
    3ec6:	ff 92       	push	r15
    3ec8:	1f 93       	push	r17
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3eca:	0f 93       	push	r16
    3ecc:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    3ed0:	ac 01       	movw	r20, r24
    3ed2:	b8 01       	movw	r22, r16
    3ed4:	80 ea       	ldi	r24, 0xA0	; 160
	yield_ms(500);
    3ed6:	9b e0       	ldi	r25, 0x0B	; 11
    3ed8:	ef da       	rcall	.-2594   	; 0x34b8 <usart_serial_write_packet>
    3eda:	84 ef       	ldi	r24, 0xF4	; 244
    3edc:	91 e0       	ldi	r25, 0x01	; 1
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_GPS_02, 1);
    3ede:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
    3ee2:	1f 92       	push	r1
    3ee4:	ef 92       	push	r14
    3ee6:	85 ef       	ldi	r24, 0xF5	; 245
    3ee8:	93 e0       	ldi	r25, 0x03	; 3
    3eea:	9f 93       	push	r25
    3eec:	8f 93       	push	r24
    3eee:	1f 92       	push	r1
    3ef0:	ff 92       	push	r15
    3ef2:	1f 93       	push	r17
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3ef4:	0f 93       	push	r16
    3ef6:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    3efa:	cd bf       	out	0x3d, r28	; 61
    3efc:	de bf       	out	0x3e, r29	; 62
    3efe:	ac 01       	movw	r20, r24
    3f00:	b8 01       	movw	r22, r16
    3f02:	80 ea       	ldi	r24, 0xA0	; 160
	yield_ms(500);
    3f04:	9b e0       	ldi	r25, 0x0B	; 11
    3f06:	d8 da       	rcall	.-2640   	; 0x34b8 <usart_serial_write_packet>
    3f08:	84 ef       	ldi	r24, 0xF4	; 244
    3f0a:	91 e0       	ldi	r25, 0x01	; 1
#endif

	/* Inform about baud rate match - LCD */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_OK);
    3f0c:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
    3f10:	81 e3       	ldi	r24, 0x31	; 49
    3f12:	94 e0       	ldi	r25, 0x04	; 4
    3f14:	9f 93       	push	r25
    3f16:	8f 93       	push	r24
    3f18:	1f 92       	push	r1
    3f1a:	ff 92       	push	r15
    3f1c:	1f 93       	push	r17
    3f1e:	0f 93       	push	r16
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3f20:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    3f24:	bb 0c       	add	r11, r11
    3f26:	6b 2d       	mov	r22, r11
    3f28:	66 0f       	add	r22, r22
    3f2a:	66 0f       	add	r22, r22
    3f2c:	6b 0d       	add	r22, r11
    3f2e:	a8 01       	movw	r20, r16

	/* Inform about baud rate match - USB */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_SYNCED);
    3f30:	88 e0       	ldi	r24, 0x08	; 8
    3f32:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    3f36:	8c e7       	ldi	r24, 0x7C	; 124
    3f38:	94 e0       	ldi	r25, 0x04	; 4
    3f3a:	9f 93       	push	r25
    3f3c:	8f 93       	push	r24
    3f3e:	1f 92       	push	r1
    3f40:	ff 92       	push	r15
    3f42:	1f 93       	push	r17
	udi_write_tx_buf(g_prepare_buf, len, false);
    3f44:	0f 93       	push	r16
    3f46:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    3f4a:	40 e0       	ldi	r20, 0x00	; 0
    3f4c:	68 2f       	mov	r22, r24
}
    3f4e:	c8 01       	movw	r24, r16
    3f50:	70 d0       	rcall	.+224    	; 0x4032 <udi_write_tx_buf>
    3f52:	cd bf       	out	0x3d, r28	; 61
    3f54:	de bf       	out	0x3e, r29	; 62
    3f56:	27 96       	adiw	r28, 0x07	; 7
    3f58:	cd bf       	out	0x3d, r28	; 61
    3f5a:	de bf       	out	0x3e, r29	; 62
    3f5c:	df 91       	pop	r29
    3f5e:	cf 91       	pop	r28
    3f60:	1f 91       	pop	r17
    3f62:	0f 91       	pop	r16
    3f64:	ff 90       	pop	r15
    3f66:	ef 90       	pop	r14
    3f68:	df 90       	pop	r13
    3f6a:	cf 90       	pop	r12
    3f6c:	bf 90       	pop	r11
    3f6e:	af 90       	pop	r10
    3f70:	9f 90       	pop	r9
    3f72:	8f 90       	pop	r8
    3f74:	7f 90       	pop	r7
    3f76:	6f 90       	pop	r6
    3f78:	5f 90       	pop	r5
    3f7a:	4f 90       	pop	r4
    3f7c:	3f 90       	pop	r3
    3f7e:	2f 90       	pop	r2
    3f80:	08 95       	ret

00003f82 <task_serial>:


void task_serial(uint32_t now)
{
    3f82:	1f 93       	push	r17
    3f84:	cf 93       	push	r28
    3f86:	df 93       	push	r29
    3f88:	1f 92       	push	r1
    3f8a:	cd b7       	in	r28, 0x3d	; 61
    3f8c:	de b7       	in	r29, 0x3e	; 62
	uint16_t len = 0;
	uint16_t move = 0;

	/* Leave when nothing to do */
	if (!g_usart1_rx_ready) {
    3f8e:	80 91 75 28 	lds	r24, 0x2875	; 0x802875 <g_usart1_rx_ready>
    3f92:	88 23       	and	r24, r24
    3f94:	09 f4       	brne	.+2      	; 0x3f98 <task_serial+0x16>
    3f96:	48 c0       	rjmp	.+144    	; 0x4028 <task_serial+0xa6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3f98:	8f b7       	in	r24, 0x3f	; 63
    3f9a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3f9c:	f8 94       	cli
	return flags;
    3f9e:	19 81       	ldd	r17, Y+1	; 0x01
	}

	/* Take out own copy and reset */
	{
		irqflags_t flags = cpu_irq_save();
		if (g_usart1_rx_idx) {
    3fa0:	60 91 73 28 	lds	r22, 0x2873	; 0x802873 <g_usart1_rx_idx>
    3fa4:	70 91 74 28 	lds	r23, 0x2874	; 0x802874 <g_usart1_rx_idx+0x1>
    3fa8:	61 15       	cp	r22, r1
    3faa:	71 05       	cpc	r23, r1
    3fac:	a9 f1       	breq	.+106    	; 0x4018 <task_serial+0x96>
			/* Do a chunk each time */
			len = g_usart1_rx_idx;
			if (len > C_USART1_RX_BUF_CHUNK) {
    3fae:	61 34       	cpi	r22, 0x41	; 65
    3fb0:	71 05       	cpc	r23, r1
    3fb2:	40 f0       	brcs	.+16     	; 0x3fc4 <task_serial+0x42>
				move = len - C_USART1_RX_BUF_CHUNK;
    3fb4:	ab 01       	movw	r20, r22
    3fb6:	40 54       	subi	r20, 0x40	; 64
    3fb8:	51 09       	sbc	r21, r1
				len = C_USART1_RX_BUF_CHUNK;
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
    3fba:	8f e3       	ldi	r24, 0x3F	; 63
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
		if (g_usart1_rx_idx) {
			/* Do a chunk each time */
			len = g_usart1_rx_idx;
			if (len > C_USART1_RX_BUF_CHUNK) {
				move = len - C_USART1_RX_BUF_CHUNK;
				len = C_USART1_RX_BUF_CHUNK;
    3fbe:	60 e4       	ldi	r22, 0x40	; 64
    3fc0:	70 e0       	ldi	r23, 0x00	; 0
    3fc2:	05 c0       	rjmp	.+10     	; 0x3fce <task_serial+0x4c>
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	01 97       	sbiw	r24, 0x01	; 1
    3fc8:	0a f1       	brmi	.+66     	; 0x400c <task_serial+0x8a>


void task_serial(uint32_t now)
{
	uint16_t len = 0;
	uint16_t move = 0;
    3fca:	40 e0       	ldi	r20, 0x00	; 0
    3fcc:	50 e0       	ldi	r21, 0x00	; 0
    3fce:	fc 01       	movw	r30, r24
    3fd0:	31 96       	adiw	r30, 0x01	; 1
    3fd2:	df 01       	movw	r26, r30
    3fd4:	ad 58       	subi	r26, 0x8D	; 141
    3fd6:	b8 4d       	sbci	r27, 0xD8	; 216
    3fd8:	e5 5c       	subi	r30, 0xC5	; 197
    3fda:	fa 4d       	sbci	r31, 0xDA	; 218
				len = C_USART1_RX_BUF_CHUNK;
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
    3fdc:	2e 91       	ld	r18, -X
    3fde:	22 93       	st	-Z, r18
				move = len - C_USART1_RX_BUF_CHUNK;
				len = C_USART1_RX_BUF_CHUNK;
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
    3fe0:	01 97       	sbiw	r24, 0x01	; 1
    3fe2:	e2 f7       	brpl	.-8      	; 0x3fdc <task_serial+0x5a>
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
			}

			/* If more data is available move that part down */
			if (move) {
    3fe4:	41 15       	cp	r20, r1
    3fe6:	51 05       	cpc	r21, r1
    3fe8:	89 f0       	breq	.+34     	; 0x400c <task_serial+0x8a>
    3fea:	e3 eb       	ldi	r30, 0xB3	; 179
    3fec:	f7 e2       	ldi	r31, 0x27	; 39
    3fee:	a3 e7       	ldi	r26, 0x73	; 115
    3ff0:	b7 e2       	ldi	r27, 0x27	; 39
    3ff2:	9a 01       	movw	r18, r20
    3ff4:	2d 54       	subi	r18, 0x4D	; 77
    3ff6:	38 4d       	sbci	r19, 0xD8	; 216
				for (int16_t mov_idx = 0; mov_idx < move; ++mov_idx) {
					g_usart1_rx_buf[mov_idx] = g_usart1_rx_buf[mov_idx + C_USART1_RX_BUF_CHUNK];
    3ff8:	81 91       	ld	r24, Z+
    3ffa:	8d 93       	st	X+, r24
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
			}

			/* If more data is available move that part down */
			if (move) {
				for (int16_t mov_idx = 0; mov_idx < move; ++mov_idx) {
    3ffc:	2e 17       	cp	r18, r30
    3ffe:	3f 07       	cpc	r19, r31
    4000:	d9 f7       	brne	.-10     	; 0x3ff8 <task_serial+0x76>
					g_usart1_rx_buf[mov_idx] = g_usart1_rx_buf[mov_idx + C_USART1_RX_BUF_CHUNK];
				}
				g_usart1_rx_idx = move;
    4002:	40 93 73 28 	sts	0x2873, r20	; 0x802873 <g_usart1_rx_idx>
    4006:	50 93 74 28 	sts	0x2874, r21	; 0x802874 <g_usart1_rx_idx+0x1>
    400a:	06 c0       	rjmp	.+12     	; 0x4018 <task_serial+0x96>

			} else {
				/* Buffer empty */
				g_usart1_rx_idx = 0;
    400c:	10 92 73 28 	sts	0x2873, r1	; 0x802873 <g_usart1_rx_idx>
    4010:	10 92 74 28 	sts	0x2874, r1	; 0x802874 <g_usart1_rx_idx+0x1>
				g_usart1_rx_ready = false;
    4014:	10 92 75 28 	sts	0x2875, r1	; 0x802875 <g_usart1_rx_ready>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4018:	1f bf       	out	0x3f, r17	; 63
		}
		cpu_irq_restore(flags);
	}

	/* Copy chunk of data to USB_CDC */
	if (len) {
    401a:	61 15       	cp	r22, r1
    401c:	71 05       	cpc	r23, r1
    401e:	21 f0       	breq	.+8      	; 0x4028 <task_serial+0xa6>
		udi_write_tx_buf(g_prepare_buf, (uint8_t)len, false);
    4020:	40 e0       	ldi	r20, 0x00	; 0
    4022:	8b e3       	ldi	r24, 0x3B	; 59
    4024:	95 e2       	ldi	r25, 0x25	; 37
    4026:	05 d0       	rcall	.+10     	; 0x4032 <udi_write_tx_buf>
	}
}
    4028:	0f 90       	pop	r0
    402a:	df 91       	pop	r29
    402c:	cf 91       	pop	r28
    402e:	1f 91       	pop	r17
    4030:	08 95       	ret

00004032 <udi_write_tx_buf>:
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    4032:	ef 92       	push	r14
    4034:	ff 92       	push	r15
    4036:	0f 93       	push	r16
    4038:	1f 93       	push	r17
    403a:	cf 93       	push	r28
    403c:	df 93       	push	r29
    403e:	20 91 7f 28 	lds	r18, 0x287F	; 0x80287f <g_usb_cdc_transfers_authorized>
    4042:	21 11       	cpse	r18, r1
    4044:	3a c0       	rjmp	.+116    	; 0x40ba <udi_write_tx_buf+0x88>
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	3f c0       	rjmp	.+126    	; 0x40c8 <udi_write_tx_buf+0x96>
    404a:	04 2f       	mov	r16, r20
    404c:	16 2f       	mov	r17, r22
    404e:	7c 01       	movw	r14, r24
    4050:	d0 e0       	ldi	r29, 0x00	; 0
    4052:	c0 e0       	ldi	r28, 0x00	; 0
    4054:	0e 94 74 72 	call	0xe4e8	; 0xe4e8 <udi_cdc_is_tx_ready>
    4058:	81 11       	cpse	r24, r1
    405a:	06 c0       	rjmp	.+12     	; 0x4068 <udi_write_tx_buf+0x36>
    405c:	df 5f       	subi	r29, 0xFF	; 255
    405e:	89 e1       	ldi	r24, 0x19	; 25
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
    4066:	23 c0       	rjmp	.+70     	; 0x40ae <udi_write_tx_buf+0x7c>
    4068:	f7 01       	movw	r30, r14
    406a:	ec 0f       	add	r30, r28
    406c:	f1 1d       	adc	r31, r1
    406e:	80 81       	ld	r24, Z
    4070:	00 23       	and	r16, r16
    4072:	49 f0       	breq	.+18     	; 0x4086 <udi_write_tx_buf+0x54>
    4074:	28 2f       	mov	r18, r24
    4076:	08 2e       	mov	r0, r24
    4078:	00 0c       	add	r0, r0
    407a:	33 0b       	sbc	r19, r19
    407c:	20 52       	subi	r18, 0x20	; 32
    407e:	31 09       	sbc	r19, r1
    4080:	20 36       	cpi	r18, 0x60	; 96
    4082:	31 05       	cpc	r19, r1
    4084:	88 f4       	brcc	.+34     	; 0x40a8 <udi_write_tx_buf+0x76>
    4086:	90 91 7e 28 	lds	r25, 0x287E	; 0x80287e <g_usb_cdc_access_blocked>
    408a:	91 11       	cpse	r25, r1
    408c:	0d c0       	rjmp	.+26     	; 0x40a8 <udi_write_tx_buf+0x76>
    408e:	08 2e       	mov	r0, r24
    4090:	00 0c       	add	r0, r0
    4092:	99 0b       	sbc	r25, r25
    4094:	0e 94 cb 72 	call	0xe596	; 0xe596 <udi_cdc_putc>
    4098:	89 2b       	or	r24, r25
    409a:	31 f4       	brne	.+12     	; 0x40a8 <udi_write_tx_buf+0x76>
    409c:	df 5f       	subi	r29, 0xFF	; 255
    409e:	89 e1       	ldi	r24, 0x19	; 25
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
    40a6:	03 c0       	rjmp	.+6      	; 0x40ae <udi_write_tx_buf+0x7c>
    40a8:	cf 5f       	subi	r28, 0xFF	; 255
    40aa:	d0 e0       	ldi	r29, 0x00	; 0
    40ac:	0a c0       	rjmp	.+20     	; 0x40c2 <udi_write_tx_buf+0x90>
    40ae:	d9 3c       	cpi	r29, 0xC9	; 201
    40b0:	40 f0       	brcs	.+16     	; 0x40c2 <udi_write_tx_buf+0x90>
    40b2:	10 92 7f 28 	sts	0x287F, r1	; 0x80287f <g_usb_cdc_transfers_authorized>
    40b6:	8c 2f       	mov	r24, r28
    40b8:	07 c0       	rjmp	.+14     	; 0x40c8 <udi_write_tx_buf+0x96>
    40ba:	61 11       	cpse	r22, r1
    40bc:	c6 cf       	rjmp	.-116    	; 0x404a <udi_write_tx_buf+0x18>
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	03 c0       	rjmp	.+6      	; 0x40c8 <udi_write_tx_buf+0x96>
    40c2:	c1 17       	cp	r28, r17
    40c4:	38 f2       	brcs	.-114    	; 0x4054 <udi_write_tx_buf+0x22>
    40c6:	8c 2f       	mov	r24, r28
    40c8:	df 91       	pop	r29
    40ca:	cf 91       	pop	r28
    40cc:	1f 91       	pop	r17
    40ce:	0f 91       	pop	r16
    40d0:	ff 90       	pop	r15
    40d2:	ef 90       	pop	r14
    40d4:	08 95       	ret

000040d6 <usb_init>:
    40d6:	0e 94 14 77 	call	0xee28	; 0xee28 <stdio_usb_init>
    40da:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <g_usb_cdc_stdout_enabled>
    40de:	81 11       	cpse	r24, r1
    40e0:	0e 94 0d 77 	call	0xee1a	; 0xee1a <stdio_usb_enable>
    40e4:	88 ee       	ldi	r24, 0xE8	; 232
    40e6:	93 e0       	ldi	r25, 0x03	; 3
    40e8:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
    40ec:	85 e3       	ldi	r24, 0x35	; 53
    40ee:	97 e0       	ldi	r25, 0x07	; 7
    40f0:	9f 93       	push	r25
    40f2:	8f 93       	push	r24
    40f4:	1f 92       	push	r1
    40f6:	80 e4       	ldi	r24, 0x40	; 64
    40f8:	8f 93       	push	r24
    40fa:	8b e3       	ldi	r24, 0x3B	; 59
    40fc:	95 e2       	ldi	r25, 0x25	; 37
    40fe:	9f 93       	push	r25
    4100:	8f 93       	push	r24
    4102:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    4106:	81 34       	cpi	r24, 0x41	; 65
    4108:	91 05       	cpc	r25, r1
    410a:	10 f0       	brcs	.+4      	; 0x4110 <usb_init+0x3a>
    410c:	80 e4       	ldi	r24, 0x40	; 64
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	40 e0       	ldi	r20, 0x00	; 0
    4112:	68 2f       	mov	r22, r24
    4114:	8b e3       	ldi	r24, 0x3B	; 59
    4116:	95 e2       	ldi	r25, 0x25	; 37
    4118:	8c df       	rcall	.-232    	; 0x4032 <udi_write_tx_buf>
    411a:	84 ef       	ldi	r24, 0xF4	; 244
    411c:	91 e0       	ldi	r25, 0x01	; 1
    411e:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
    4122:	1f 92       	push	r1
    4124:	8c e0       	ldi	r24, 0x0C	; 12
    4126:	8f 93       	push	r24
    4128:	8f e0       	ldi	r24, 0x0F	; 15
    412a:	97 e0       	ldi	r25, 0x07	; 7
    412c:	9f 93       	push	r25
    412e:	8f 93       	push	r24
    4130:	1f 92       	push	r1
    4132:	80 e4       	ldi	r24, 0x40	; 64
    4134:	8f 93       	push	r24
    4136:	8b e3       	ldi	r24, 0x3B	; 59
    4138:	95 e2       	ldi	r25, 0x25	; 37
    413a:	9f 93       	push	r25
    413c:	8f 93       	push	r24
    413e:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    4142:	81 34       	cpi	r24, 0x41	; 65
    4144:	91 05       	cpc	r25, r1
    4146:	10 f0       	brcs	.+4      	; 0x414c <usb_init+0x76>
    4148:	80 e4       	ldi	r24, 0x40	; 64
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	40 e0       	ldi	r20, 0x00	; 0
    414e:	68 2f       	mov	r22, r24
    4150:	8b e3       	ldi	r24, 0x3B	; 59
    4152:	95 e2       	ldi	r25, 0x25	; 37
    4154:	6e df       	rcall	.-292    	; 0x4032 <udi_write_tx_buf>
    4156:	8a ef       	ldi	r24, 0xFA	; 250
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
    415e:	8d ee       	ldi	r24, 0xED	; 237
    4160:	96 e0       	ldi	r25, 0x06	; 6
    4162:	9f 93       	push	r25
    4164:	8f 93       	push	r24
    4166:	1f 92       	push	r1
    4168:	80 e4       	ldi	r24, 0x40	; 64
    416a:	8f 93       	push	r24
    416c:	8b e3       	ldi	r24, 0x3B	; 59
    416e:	95 e2       	ldi	r25, 0x25	; 37
    4170:	9f 93       	push	r25
    4172:	8f 93       	push	r24
    4174:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    4178:	81 34       	cpi	r24, 0x41	; 65
    417a:	91 05       	cpc	r25, r1
    417c:	10 f0       	brcs	.+4      	; 0x4182 <usb_init+0xac>
    417e:	80 e4       	ldi	r24, 0x40	; 64
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	40 e0       	ldi	r20, 0x00	; 0
    4184:	68 2f       	mov	r22, r24
    4186:	8b e3       	ldi	r24, 0x3B	; 59
    4188:	95 e2       	ldi	r25, 0x25	; 37
    418a:	53 df       	rcall	.-346    	; 0x4032 <udi_write_tx_buf>
    418c:	8a ef       	ldi	r24, 0xFA	; 250
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
    4194:	89 ec       	ldi	r24, 0xC9	; 201
    4196:	96 e0       	ldi	r25, 0x06	; 6
    4198:	9f 93       	push	r25
    419a:	8f 93       	push	r24
    419c:	1f 92       	push	r1
    419e:	80 e4       	ldi	r24, 0x40	; 64
    41a0:	8f 93       	push	r24
    41a2:	8b e3       	ldi	r24, 0x3B	; 59
    41a4:	95 e2       	ldi	r25, 0x25	; 37
    41a6:	9f 93       	push	r25
    41a8:	8f 93       	push	r24
    41aa:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    41ae:	81 34       	cpi	r24, 0x41	; 65
    41b0:	91 05       	cpc	r25, r1
    41b2:	10 f0       	brcs	.+4      	; 0x41b8 <usb_init+0xe2>
    41b4:	80 e4       	ldi	r24, 0x40	; 64
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	40 e0       	ldi	r20, 0x00	; 0
    41ba:	68 2f       	mov	r22, r24
    41bc:	8b e3       	ldi	r24, 0x3B	; 59
    41be:	95 e2       	ldi	r25, 0x25	; 37
    41c0:	38 df       	rcall	.-400    	; 0x4032 <udi_write_tx_buf>
    41c2:	8d b7       	in	r24, 0x3d	; 61
    41c4:	9e b7       	in	r25, 0x3e	; 62
    41c6:	4a 96       	adiw	r24, 0x1a	; 26
    41c8:	8d bf       	out	0x3d, r24	; 61
    41ca:	9e bf       	out	0x3e, r25	; 62
    41cc:	08 95       	ret

000041ce <usb_callback_suspend_action>:
    41ce:	83 e0       	ldi	r24, 0x03	; 3
    41d0:	80 93 7d 28 	sts	0x287D, r24	; 0x80287d <g_workmode>
    41d4:	08 95       	ret

000041d6 <usb_callback_resume_action>:
    41d6:	82 e0       	ldi	r24, 0x02	; 2
    41d8:	80 93 7d 28 	sts	0x287D, r24	; 0x80287d <g_workmode>
    41dc:	08 95       	ret

000041de <usb_callback_remotewakeup_enable>:
    41de:	08 95       	ret

000041e0 <usb_callback_remotewakeup_disable>:
    41e0:	08 95       	ret

000041e2 <usb_callback_cdc_enable>:
}

bool usb_callback_cdc_enable(void)
{
	/* USB CDC feature for serial communication */
	g_usb_cdc_transfers_authorized = true;
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	80 93 7f 28 	sts	0x287F, r24	; 0x80287f <g_usb_cdc_transfers_authorized>
	return true;
}
    41e8:	08 95       	ret

000041ea <usb_callback_cdc_disable>:

void usb_callback_cdc_disable(void)
{
	/* USB CDC feature for serial communication */
	g_usb_cdc_transfers_authorized = false;
    41ea:	10 92 7f 28 	sts	0x287F, r1	; 0x80287f <g_usb_cdc_transfers_authorized>
    41ee:	08 95       	ret

000041f0 <usb_callback_config>:
}

void usb_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    41f0:	08 95       	ret

000041f2 <usb_callback_cdc_set_dtr>:

}

void usb_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
    41f2:	08 95       	ret

000041f4 <usb_callback_cdc_set_rts>:

}

void usb_callback_cdc_set_rts(uint8_t port, bool b_enable)
{
    41f4:	08 95       	ret

000041f6 <usb_callback_rx_notify>:

}

void usb_callback_rx_notify(uint8_t port)
{
	g_usb_cdc_rx_received = true;
    41f6:	81 e0       	ldi	r24, 0x01	; 1
    41f8:	80 93 80 28 	sts	0x2880, r24	; 0x802880 <g_usb_cdc_rx_received>
    41fc:	08 95       	ret

000041fe <usb_callback_tx_empty_notify>:
}

void usb_callback_tx_empty_notify(uint8_t port)
{
	g_usb_cdc_access_blocked = false;
    41fe:	10 92 7e 28 	sts	0x287E, r1	; 0x80287e <g_usb_cdc_access_blocked>
    4202:	08 95       	ret

00004204 <task_usb>:
PROGMEM_DECLARE(const char, PM_INFO_PART_L2P3B[]);
PROGMEM_DECLARE(const char, PM_INFO_PART_L2P4[]);
PROGMEM_DECLARE(const char, PM_INFO_PART_PLL1[]);

void task_usb(uint32_t now)
{
    4204:	2f 92       	push	r2
    4206:	3f 92       	push	r3
    4208:	4f 92       	push	r4
    420a:	5f 92       	push	r5
    420c:	6f 92       	push	r6
    420e:	7f 92       	push	r7
    4210:	8f 92       	push	r8
    4212:	9f 92       	push	r9
    4214:	af 92       	push	r10
    4216:	bf 92       	push	r11
    4218:	cf 92       	push	r12
    421a:	df 92       	push	r13
    421c:	ef 92       	push	r14
    421e:	ff 92       	push	r15
    4220:	0f 93       	push	r16
    4222:	1f 93       	push	r17
    4224:	cf 93       	push	r28
    4226:	df 93       	push	r29
    4228:	cd b7       	in	r28, 0x3d	; 61
    422a:	de b7       	in	r29, 0x3e	; 62
    422c:	c3 54       	subi	r28, 0x43	; 67
    422e:	d1 09       	sbc	r29, r1
    4230:	cd bf       	out	0x3d, r28	; 61
    4232:	de bf       	out	0x3e, r29	; 62
	/* Monitoring at the USB serial terminal */
	if (g_usb_cdc_transfers_authorized) {
    4234:	20 91 7f 28 	lds	r18, 0x287F	; 0x80287f <g_usb_cdc_transfers_authorized>
    4238:	22 23       	and	r18, r18
    423a:	09 f4       	brne	.+2      	; 0x423e <task_usb+0x3a>
    423c:	1e c4       	rjmp	.+2108   	; 0x4a7a <task_usb+0x876>
    423e:	2b 01       	movw	r4, r22
    4240:	3c 01       	movw	r6, r24
		static uint32_t usb_last = 0UL;

		/* Get command lines from the USB host */
		if (g_usb_cdc_rx_received) {
    4242:	80 91 80 28 	lds	r24, 0x2880	; 0x802880 <g_usb_cdc_rx_received>
    4246:	88 23       	and	r24, r24
    4248:	d1 f1       	breq	.+116    	; 0x42be <task_usb+0xba>
			g_usb_cdc_rx_received = false;
    424a:	10 92 80 28 	sts	0x2880, r1	; 0x802880 <g_usb_cdc_rx_received>
	if (!g_usb_cdc_transfers_authorized) {
		return;
	}

	/* Single thread only */
	if (!sched_getLock(&g_interpreter_lock)) {
    424e:	8e e7       	ldi	r24, 0x7E	; 126
    4250:	96 e2       	ldi	r25, 0x26	; 38
    4252:	0e 94 92 67 	call	0xcf24	; 0xcf24 <sched_getLock>
    4256:	88 23       	and	r24, r24
    4258:	91 f1       	breq	.+100    	; 0x42be <task_usb+0xba>
		return;
	}

	/* Get command lines from the USB host */
	iram_size_t cdc_rx_len = udi_cdc_get_nb_received_data();
    425a:	0e 94 c6 70 	call	0xe18c	; 0xe18c <udi_cdc_get_nb_received_data>
    425e:	8c 01       	movw	r16, r24
	cdc_rx_len = min(cdc_rx_len, sizeof(cdc_rx_buf));
    4260:	05 97       	sbiw	r24, 0x05	; 5
    4262:	10 f0       	brcs	.+4      	; 0x4268 <task_usb+0x64>
    4264:	04 e0       	ldi	r16, 0x04	; 4
    4266:	10 e0       	ldi	r17, 0x00	; 0
	while (cdc_rx_len) {
    4268:	01 15       	cp	r16, r1
    426a:	11 05       	cpc	r17, r1
    426c:	21 f1       	breq	.+72     	; 0x42b6 <task_usb+0xb2>
		if (g_keyBeep_enable) {
    426e:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <g_keyBeep_enable>
    4272:	88 23       	and	r24, r24
    4274:	41 f0       	breq	.+16     	; 0x4286 <task_usb+0x82>
			twi2_set_beep(176, 1);  // Click sound
    4276:	61 e0       	ldi	r22, 0x01	; 1
    4278:	80 eb       	ldi	r24, 0xB0	; 176
    427a:	0e 94 45 34 	call	0x688a	; 0x688a <twi2_set_beep>
			yield_ms(10);
    427e:	8a e0       	ldi	r24, 0x0A	; 10
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
		}

		/* Read the data block */
		udi_cdc_read_no_polling(cdc_rx_buf, cdc_rx_len);
    4286:	b8 01       	movw	r22, r16
    4288:	ce 01       	movw	r24, r28
    428a:	01 96       	adiw	r24, 0x01	; 1
    428c:	0e 94 db 71 	call	0xe3b6	; 0xe3b6 <udi_cdc_read_no_polling>

		/* Echo back when not monitoring information are enabled */
		if (!g_usb_cdc_printStatusLines_atxmega) {
    4290:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <g_usb_cdc_printStatusLines_atxmega>
    4294:	81 11       	cpse	r24, r1
    4296:	05 c0       	rjmp	.+10     	; 0x42a2 <task_usb+0x9e>
			udi_write_tx_buf(cdc_rx_buf, cdc_rx_len, true);
    4298:	41 e0       	ldi	r20, 0x01	; 1
    429a:	60 2f       	mov	r22, r16
    429c:	ce 01       	movw	r24, r28
    429e:	01 96       	adiw	r24, 0x01	; 1
    42a0:	c8 de       	rcall	.-624    	; 0x4032 <udi_write_tx_buf>
		}

		/* Call the interpreter */
		interpreter_doProcess(cdc_rx_buf, cdc_rx_len);
    42a2:	b8 01       	movw	r22, r16
    42a4:	ce 01       	movw	r24, r28
    42a6:	01 96       	adiw	r24, 0x01	; 1
    42a8:	0e 94 cf 2a 	call	0x559e	; 0x559e <interpreter_doProcess>

		/* Check for more available data */
		cdc_rx_len = udi_cdc_get_nb_received_data();
    42ac:	0e 94 c6 70 	call	0xe18c	; 0xe18c <udi_cdc_get_nb_received_data>
    42b0:	8c 01       	movw	r16, r24
	}

	/* Get command lines from the USB host */
	iram_size_t cdc_rx_len = udi_cdc_get_nb_received_data();
	cdc_rx_len = min(cdc_rx_len, sizeof(cdc_rx_buf));
	while (cdc_rx_len) {
    42b2:	89 2b       	or	r24, r25
    42b4:	e1 f6       	brne	.-72     	; 0x426e <task_usb+0x6a>
		/* Check for more available data */
		cdc_rx_len = udi_cdc_get_nb_received_data();
	}

	/* Release this lock */
	sched_freeLock(&g_interpreter_lock);
    42b6:	8e e7       	ldi	r24, 0x7E	; 126
    42b8:	96 e2       	ldi	r25, 0x26	; 38
    42ba:	0e 94 aa 67 	call	0xcf54	; 0xcf54 <sched_freeLock>
			g_usb_cdc_rx_received = false;
			usb_rx_process(now);
		}

		/* Status of the PLL unit */
		if (g_usb_cdc_printStatusLines_sim808 && g_1pps_last_new) {
    42be:	80 91 5f 20 	lds	r24, 0x205F	; 0x80205f <g_usb_cdc_printStatusLines_sim808>
    42c2:	88 23       	and	r24, r24
    42c4:	09 f4       	brne	.+2      	; 0x42c8 <task_usb+0xc4>
    42c6:	67 c0       	rjmp	.+206    	; 0x4396 <task_usb+0x192>
    42c8:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <g_1pps_last_new>
    42cc:	88 23       	and	r24, r24
    42ce:	09 f4       	brne	.+2      	; 0x42d2 <task_usb+0xce>
    42d0:	62 c0       	rjmp	.+196    	; 0x4396 <task_usb+0x192>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    42d2:	8f b7       	in	r24, 0x3f	; 63
    42d4:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    42d6:	f8 94       	cli
	return flags;
    42d8:	2d 81       	ldd	r18, Y+5	; 0x05
			uint16_t l_pll_lo;
			uint64_t l_pll_hi;
			{
				irqflags_t flags = cpu_irq_save();
				l_pll_lo = g_1pps_last_lo;
    42da:	80 91 8c 28 	lds	r24, 0x288C	; 0x80288c <g_1pps_last_lo>
    42de:	90 91 8d 28 	lds	r25, 0x288D	; 0x80288d <g_1pps_last_lo+0x1>
				l_pll_hi = g_1pps_last_hi;
    42e2:	20 90 84 28 	lds	r2, 0x2884	; 0x802884 <g_1pps_last_hi>
    42e6:	30 90 85 28 	lds	r3, 0x2885	; 0x802885 <g_1pps_last_hi+0x1>
    42ea:	c0 90 86 28 	lds	r12, 0x2886	; 0x802886 <g_1pps_last_hi+0x2>
    42ee:	ce 82       	std	Y+6, r12	; 0x06
    42f0:	d0 90 87 28 	lds	r13, 0x2887	; 0x802887 <g_1pps_last_hi+0x3>
    42f4:	d8 86       	std	Y+8, r13	; 0x08
    42f6:	e0 90 88 28 	lds	r14, 0x2888	; 0x802888 <g_1pps_last_hi+0x4>
    42fa:	ec 86       	std	Y+12, r14	; 0x0c
    42fc:	f0 90 89 28 	lds	r15, 0x2889	; 0x802889 <g_1pps_last_hi+0x5>
    4300:	fe 86       	std	Y+14, r15	; 0x0e
    4302:	80 90 8a 28 	lds	r8, 0x288A	; 0x80288a <g_1pps_last_hi+0x6>
    4306:	90 90 8b 28 	lds	r9, 0x288B	; 0x80288b <g_1pps_last_hi+0x7>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    430a:	2f bf       	out	0x3f, r18	; 63
				cpu_irq_restore(flags);
			}

			int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_PLL1, (uint32_t)(l_pll_hi / 1000U), (uint32_t) (l_pll_hi % 1000), l_pll_lo);
    430c:	9f 93       	push	r25
    430e:	8f 93       	push	r24
    4310:	0f 2e       	mov	r0, r31
    4312:	f8 ee       	ldi	r31, 0xE8	; 232
    4314:	af 2e       	mov	r10, r31
    4316:	f0 2d       	mov	r31, r0
    4318:	0f 2e       	mov	r0, r31
    431a:	f3 e0       	ldi	r31, 0x03	; 3
    431c:	bf 2e       	mov	r11, r31
    431e:	f0 2d       	mov	r31, r0
    4320:	c1 2c       	mov	r12, r1
    4322:	d1 2c       	mov	r13, r1
    4324:	e1 2c       	mov	r14, r1
    4326:	f1 2c       	mov	r15, r1
    4328:	00 e0       	ldi	r16, 0x00	; 0
    432a:	10 e0       	ldi	r17, 0x00	; 0
    432c:	22 2d       	mov	r18, r2
    432e:	33 2d       	mov	r19, r3
    4330:	4e 81       	ldd	r20, Y+6	; 0x06
    4332:	58 85       	ldd	r21, Y+8	; 0x08
    4334:	6c 85       	ldd	r22, Y+12	; 0x0c
    4336:	7e 85       	ldd	r23, Y+14	; 0x0e
    4338:	88 2d       	mov	r24, r8
    433a:	99 2d       	mov	r25, r9
    433c:	0e 94 53 82 	call	0x104a6	; 0x104a6 <__umoddi3>
    4340:	5f 93       	push	r21
    4342:	4f 93       	push	r20
    4344:	3f 93       	push	r19
    4346:	2f 93       	push	r18
    4348:	22 2d       	mov	r18, r2
    434a:	33 2d       	mov	r19, r3
    434c:	4e 81       	ldd	r20, Y+6	; 0x06
    434e:	58 85       	ldd	r21, Y+8	; 0x08
    4350:	6c 85       	ldd	r22, Y+12	; 0x0c
    4352:	7e 85       	ldd	r23, Y+14	; 0x0e
    4354:	88 2d       	mov	r24, r8
    4356:	99 2d       	mov	r25, r9
    4358:	0e 94 55 82 	call	0x104aa	; 0x104aa <__udivdi3>
    435c:	5f 93       	push	r21
    435e:	4f 93       	push	r20
    4360:	3f 93       	push	r19
    4362:	2f 93       	push	r18
    4364:	81 ef       	ldi	r24, 0xF1	; 241
    4366:	94 e0       	ldi	r25, 0x04	; 4
    4368:	9f 93       	push	r25
    436a:	8f 93       	push	r24
    436c:	1f 92       	push	r1
    436e:	80 e4       	ldi	r24, 0x40	; 64
    4370:	8f 93       	push	r24
    4372:	8b e3       	ldi	r24, 0x3B	; 59
    4374:	95 e2       	ldi	r25, 0x25	; 37
    4376:	9f 93       	push	r25
    4378:	8f 93       	push	r24
    437a:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
			udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    437e:	81 34       	cpi	r24, 0x41	; 65
    4380:	91 05       	cpc	r25, r1
    4382:	10 f0       	brcs	.+4      	; 0x4388 <task_usb+0x184>
    4384:	80 e4       	ldi	r24, 0x40	; 64
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	40 e0       	ldi	r20, 0x00	; 0
    438a:	68 2f       	mov	r22, r24
    438c:	8b e3       	ldi	r24, 0x3B	; 59
    438e:	95 e2       	ldi	r25, 0x25	; 37
    4390:	50 de       	rcall	.-864    	; 0x4032 <udi_write_tx_buf>
    4392:	cd bf       	out	0x3d, r28	; 61
    4394:	de bf       	out	0x3e, r29	; 62
		}

		/* Status output when requested */
		if (g_usb_cdc_printStatusLines_atxmega) {
    4396:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <g_usb_cdc_printStatusLines_atxmega>
    439a:	88 23       	and	r24, r24
    439c:	09 f4       	brne	.+2      	; 0x43a0 <task_usb+0x19c>
    439e:	6d c3       	rjmp	.+1754   	; 0x4a7a <task_usb+0x876>
			if (((now - usb_last) >= 512) || (now < usb_last)) {
    43a0:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <__data_end>
    43a4:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <__data_end+0x1>
    43a8:	a0 91 d0 21 	lds	r26, 0x21D0	; 0x8021d0 <__data_end+0x2>
    43ac:	b0 91 d1 21 	lds	r27, 0x21D1	; 0x8021d1 <__data_end+0x3>
    43b0:	b3 01       	movw	r22, r6
    43b2:	a2 01       	movw	r20, r4
    43b4:	48 1b       	sub	r20, r24
    43b6:	59 0b       	sbc	r21, r25
    43b8:	6a 0b       	sbc	r22, r26
    43ba:	7b 0b       	sbc	r23, r27
    43bc:	41 15       	cp	r20, r1
    43be:	52 40       	sbci	r21, 0x02	; 2
    43c0:	61 05       	cpc	r22, r1
    43c2:	71 05       	cpc	r23, r1
    43c4:	30 f4       	brcc	.+12     	; 0x43d2 <task_usb+0x1ce>
    43c6:	48 16       	cp	r4, r24
    43c8:	59 06       	cpc	r5, r25
    43ca:	6a 06       	cpc	r6, r26
    43cc:	7b 06       	cpc	r7, r27
    43ce:	08 f0       	brcs	.+2      	; 0x43d2 <task_usb+0x1ce>
    43d0:	54 c3       	rjmp	.+1704   	; 0x4a7a <task_usb+0x876>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    43d2:	8f b7       	in	r24, 0x3f	; 63
    43d4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    43d6:	f8 94       	cli
	return flags;
    43d8:	69 81       	ldd	r22, Y+1	; 0x01
				int32_t	l_twi1_gyro_2_mag_z_nT;

				/* Getting a copy of the values */
				{
					irqflags_t flags			= cpu_irq_save();
					l_adc_vctcxo_volt_1000		= g_adc_vctcxo_volt_1000;
    43da:	70 91 9a 26 	lds	r23, 0x269A	; 0x80269a <g_adc_vctcxo_volt_1000>
    43de:	23 96       	adiw	r28, 0x03	; 3
    43e0:	7f af       	std	Y+63, r23	; 0x3f
    43e2:	23 97       	sbiw	r28, 0x03	; 3
    43e4:	80 91 9b 26 	lds	r24, 0x269B	; 0x80269b <g_adc_vctcxo_volt_1000+0x1>
    43e8:	24 96       	adiw	r28, 0x04	; 4
    43ea:	8f af       	std	Y+63, r24	; 0x3f
    43ec:	24 97       	sbiw	r28, 0x04	; 4
					l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    43ee:	20 91 98 26 	lds	r18, 0x2698	; 0x802698 <g_adc_5v0_volt_1000>
    43f2:	30 91 99 26 	lds	r19, 0x2699	; 0x802699 <g_adc_5v0_volt_1000+0x1>
					l_adc_vbat_volt_1000		= g_adc_vbat_volt_1000;
    43f6:	40 91 96 26 	lds	r20, 0x2696	; 0x802696 <g_adc_vbat_volt_1000>
    43fa:	50 91 97 26 	lds	r21, 0x2697	; 0x802697 <g_adc_vbat_volt_1000+0x1>
					l_adc_io_adc4_volt_1000		= g_adc_io_adc4_volt_1000;
    43fe:	c0 90 94 26 	lds	r12, 0x2694	; 0x802694 <g_adc_io_adc4_volt_1000>
    4402:	cc a6       	std	Y+44, r12	; 0x2c
    4404:	d0 90 95 26 	lds	r13, 0x2695	; 0x802695 <g_adc_io_adc4_volt_1000+0x1>
    4408:	dd a6       	std	Y+45, r13	; 0x2d
					l_adc_io_adc5_volt_1000		= g_adc_io_adc5_volt_1000;
    440a:	20 90 92 26 	lds	r2, 0x2692	; 0x802692 <g_adc_io_adc5_volt_1000>
    440e:	30 90 93 26 	lds	r3, 0x2693	; 0x802693 <g_adc_io_adc5_volt_1000+0x1>
					l_adc_silence_volt_1000		= g_adc_silence_volt_1000;
    4412:	00 91 90 26 	lds	r16, 0x2690	; 0x802690 <g_adc_silence_volt_1000>
    4416:	10 91 91 26 	lds	r17, 0x2691	; 0x802691 <g_adc_silence_volt_1000+0x1>
					l_adc_temp_deg_100			= g_adc_temp_deg_100;
    441a:	e0 90 8e 26 	lds	r14, 0x268E	; 0x80268e <g_adc_temp_deg_100>
    441e:	f0 90 8f 26 	lds	r15, 0x268F	; 0x80268f <g_adc_temp_deg_100+0x1>
    4422:	ee 82       	std	Y+6, r14	; 0x06
    4424:	ff 82       	std	Y+7, r15	; 0x07
					l_twi1_baro_temp_100		= g_twi1_baro_temp_100;
    4426:	80 90 18 27 	lds	r8, 0x2718	; 0x802718 <g_twi1_baro_temp_100>
    442a:	90 90 19 27 	lds	r9, 0x2719	; 0x802719 <g_twi1_baro_temp_100+0x1>
    442e:	a0 90 1a 27 	lds	r10, 0x271A	; 0x80271a <g_twi1_baro_temp_100+0x2>
    4432:	b0 90 1b 27 	lds	r11, 0x271B	; 0x80271b <g_twi1_baro_temp_100+0x3>
					l_twi1_baro_p_100			= g_twi1_baro_p_100;
    4436:	c0 90 14 27 	lds	r12, 0x2714	; 0x802714 <g_twi1_baro_p_100>
    443a:	d0 90 15 27 	lds	r13, 0x2715	; 0x802715 <g_twi1_baro_p_100+0x1>
    443e:	e0 90 16 27 	lds	r14, 0x2716	; 0x802716 <g_twi1_baro_p_100+0x2>
    4442:	f0 90 17 27 	lds	r15, 0x2717	; 0x802717 <g_twi1_baro_p_100+0x3>
    4446:	c8 86       	std	Y+8, r12	; 0x08
    4448:	d9 86       	std	Y+9, r13	; 0x09
    444a:	ea 86       	std	Y+10, r14	; 0x0a
    444c:	fb 86       	std	Y+11, r15	; 0x0b
					l_twi1_hygro_T_100			= g_twi1_hygro_T_100;
    444e:	e0 90 0c 27 	lds	r14, 0x270C	; 0x80270c <g_twi1_hygro_T_100>
    4452:	f0 90 0d 27 	lds	r15, 0x270D	; 0x80270d <g_twi1_hygro_T_100+0x1>
    4456:	ec 86       	std	Y+12, r14	; 0x0c
    4458:	fd 86       	std	Y+13, r15	; 0x0d
					l_twi1_hygro_RH_100			= g_twi1_hygro_RH_100;
    445a:	c0 90 0a 27 	lds	r12, 0x270A	; 0x80270a <g_twi1_hygro_RH_100>
    445e:	d0 90 0b 27 	lds	r13, 0x270B	; 0x80270b <g_twi1_hygro_RH_100+0x1>
    4462:	ce 86       	std	Y+14, r12	; 0x0e
    4464:	df 86       	std	Y+15, r13	; 0x0f
					l_twi1_gyro_1_accel_x		= g_twi1_gyro_1_accel_x;
    4466:	d0 90 69 27 	lds	r13, 0x2769	; 0x802769 <g_twi1_gyro_1_accel_x>
    446a:	de a6       	std	Y+46, r13	; 0x2e
    446c:	e0 90 6a 27 	lds	r14, 0x276A	; 0x80276a <g_twi1_gyro_1_accel_x+0x1>
    4470:	ef a6       	std	Y+47, r14	; 0x2f
					l_twi1_gyro_1_accel_y		= g_twi1_gyro_1_accel_y;
    4472:	f0 90 67 27 	lds	r15, 0x2767	; 0x802767 <g_twi1_gyro_1_accel_y>
    4476:	f8 aa       	std	Y+48, r15	; 0x30
    4478:	c0 90 68 27 	lds	r12, 0x2768	; 0x802768 <g_twi1_gyro_1_accel_y+0x1>
    447c:	c9 aa       	std	Y+49, r12	; 0x31
					l_twi1_gyro_1_accel_z		= g_twi1_gyro_1_accel_z;
    447e:	d0 90 65 27 	lds	r13, 0x2765	; 0x802765 <g_twi1_gyro_1_accel_z>
    4482:	da aa       	std	Y+50, r13	; 0x32
    4484:	e0 90 66 27 	lds	r14, 0x2766	; 0x802766 <g_twi1_gyro_1_accel_z+0x1>
    4488:	eb aa       	std	Y+51, r14	; 0x33
					l_twi1_gyro_1_accel_x_mg	= g_twi1_gyro_1_accel_x_mg;
    448a:	c0 90 63 27 	lds	r12, 0x2763	; 0x802763 <g_twi1_gyro_1_accel_x_mg>
    448e:	d0 90 64 27 	lds	r13, 0x2764	; 0x802764 <g_twi1_gyro_1_accel_x_mg+0x1>
    4492:	c8 8a       	std	Y+16, r12	; 0x10
    4494:	d9 8a       	std	Y+17, r13	; 0x11
					l_twi1_gyro_1_accel_y_mg	= g_twi1_gyro_1_accel_y_mg;
    4496:	e0 90 61 27 	lds	r14, 0x2761	; 0x802761 <g_twi1_gyro_1_accel_y_mg>
    449a:	f0 90 62 27 	lds	r15, 0x2762	; 0x802762 <g_twi1_gyro_1_accel_y_mg+0x1>
    449e:	ea 8a       	std	Y+18, r14	; 0x12
    44a0:	fb 8a       	std	Y+19, r15	; 0x13
					l_twi1_gyro_1_accel_z_mg	= g_twi1_gyro_1_accel_z_mg;
    44a2:	c0 90 5f 27 	lds	r12, 0x275F	; 0x80275f <g_twi1_gyro_1_accel_z_mg>
    44a6:	d0 90 60 27 	lds	r13, 0x2760	; 0x802760 <g_twi1_gyro_1_accel_z_mg+0x1>
    44aa:	cc 8a       	std	Y+20, r12	; 0x14
    44ac:	dd 8a       	std	Y+21, r13	; 0x15
					l_twi1_gyro_1_gyro_x		= g_twi1_gyro_1_gyro_x;
    44ae:	d0 90 5d 27 	lds	r13, 0x275D	; 0x80275d <g_twi1_gyro_1_gyro_x>
    44b2:	dc aa       	std	Y+52, r13	; 0x34
    44b4:	e0 90 5e 27 	lds	r14, 0x275E	; 0x80275e <g_twi1_gyro_1_gyro_x+0x1>
    44b8:	ed aa       	std	Y+53, r14	; 0x35
					l_twi1_gyro_1_gyro_y		= g_twi1_gyro_1_gyro_y;
    44ba:	f0 90 5b 27 	lds	r15, 0x275B	; 0x80275b <g_twi1_gyro_1_gyro_y>
    44be:	fe aa       	std	Y+54, r15	; 0x36
    44c0:	c0 90 5c 27 	lds	r12, 0x275C	; 0x80275c <g_twi1_gyro_1_gyro_y+0x1>
    44c4:	cf aa       	std	Y+55, r12	; 0x37
					l_twi1_gyro_1_gyro_z		= g_twi1_gyro_1_gyro_z;
    44c6:	d0 90 59 27 	lds	r13, 0x2759	; 0x802759 <g_twi1_gyro_1_gyro_z>
    44ca:	d8 ae       	std	Y+56, r13	; 0x38
    44cc:	e0 90 5a 27 	lds	r14, 0x275A	; 0x80275a <g_twi1_gyro_1_gyro_z+0x1>
    44d0:	e9 ae       	std	Y+57, r14	; 0x39
					l_twi1_gyro_1_gyro_x_mdps	= g_twi1_gyro_1_gyro_x_mdps;
    44d2:	c0 90 55 27 	lds	r12, 0x2755	; 0x802755 <g_twi1_gyro_1_gyro_x_mdps>
    44d6:	d0 90 56 27 	lds	r13, 0x2756	; 0x802756 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    44da:	e0 90 57 27 	lds	r14, 0x2757	; 0x802757 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    44de:	f0 90 58 27 	lds	r15, 0x2758	; 0x802758 <g_twi1_gyro_1_gyro_x_mdps+0x3>
    44e2:	ce 8a       	std	Y+22, r12	; 0x16
    44e4:	df 8a       	std	Y+23, r13	; 0x17
    44e6:	e8 8e       	std	Y+24, r14	; 0x18
    44e8:	f9 8e       	std	Y+25, r15	; 0x19
					l_twi1_gyro_1_gyro_y_mdps	= g_twi1_gyro_1_gyro_y_mdps;
    44ea:	c0 90 51 27 	lds	r12, 0x2751	; 0x802751 <g_twi1_gyro_1_gyro_y_mdps>
    44ee:	d0 90 52 27 	lds	r13, 0x2752	; 0x802752 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    44f2:	e0 90 53 27 	lds	r14, 0x2753	; 0x802753 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    44f6:	f0 90 54 27 	lds	r15, 0x2754	; 0x802754 <g_twi1_gyro_1_gyro_y_mdps+0x3>
					l_twi1_gyro_1_gyro_z_mdps	= g_twi1_gyro_1_gyro_z_mdps;
    44fa:	80 91 4d 27 	lds	r24, 0x274D	; 0x80274d <g_twi1_gyro_1_gyro_z_mdps>
    44fe:	90 91 4e 27 	lds	r25, 0x274E	; 0x80274e <g_twi1_gyro_1_gyro_z_mdps+0x1>
    4502:	a0 91 4f 27 	lds	r26, 0x274F	; 0x80274f <g_twi1_gyro_1_gyro_z_mdps+0x2>
    4506:	b0 91 50 27 	lds	r27, 0x2750	; 0x802750 <g_twi1_gyro_1_gyro_z_mdps+0x3>
    450a:	8a 8f       	std	Y+26, r24	; 0x1a
    450c:	9b 8f       	std	Y+27, r25	; 0x1b
    450e:	ac 8f       	std	Y+28, r26	; 0x1c
    4510:	bd 8f       	std	Y+29, r27	; 0x1d
					l_twi1_gyro_1_temp			= g_twi1_gyro_1_temp;
    4512:	90 91 6f 27 	lds	r25, 0x276F	; 0x80276f <g_twi1_gyro_1_temp>
    4516:	9a af       	std	Y+58, r25	; 0x3a
    4518:	a0 91 70 27 	lds	r26, 0x2770	; 0x802770 <g_twi1_gyro_1_temp+0x1>
    451c:	ab af       	std	Y+59, r26	; 0x3b
					l_twi1_gyro_1_temp_deg_100	= g_twi1_gyro_1_temp_deg_100;
    451e:	e0 91 6b 27 	lds	r30, 0x276B	; 0x80276b <g_twi1_gyro_1_temp_deg_100>
    4522:	f0 91 6c 27 	lds	r31, 0x276C	; 0x80276c <g_twi1_gyro_1_temp_deg_100+0x1>
    4526:	ee 8f       	std	Y+30, r30	; 0x1e
    4528:	ff 8f       	std	Y+31, r31	; 0x1f
					l_twi1_gyro_2_mag_x			= g_twi1_gyro_2_mag_x;
    452a:	f0 91 47 27 	lds	r31, 0x2747	; 0x802747 <g_twi1_gyro_2_mag_x>
    452e:	fc af       	std	Y+60, r31	; 0x3c
    4530:	70 91 48 27 	lds	r23, 0x2748	; 0x802748 <g_twi1_gyro_2_mag_x+0x1>
    4534:	7d af       	std	Y+61, r23	; 0x3d
					l_twi1_gyro_2_mag_y			= g_twi1_gyro_2_mag_y;
    4536:	80 91 45 27 	lds	r24, 0x2745	; 0x802745 <g_twi1_gyro_2_mag_y>
    453a:	8e af       	std	Y+62, r24	; 0x3e
    453c:	90 91 46 27 	lds	r25, 0x2746	; 0x802746 <g_twi1_gyro_2_mag_y+0x1>
    4540:	9f af       	std	Y+63, r25	; 0x3f
					l_twi1_gyro_2_mag_z			= g_twi1_gyro_2_mag_z;
    4542:	a0 91 43 27 	lds	r26, 0x2743	; 0x802743 <g_twi1_gyro_2_mag_z>
    4546:	21 96       	adiw	r28, 0x01	; 1
    4548:	af af       	std	Y+63, r26	; 0x3f
    454a:	21 97       	sbiw	r28, 0x01	; 1
    454c:	b0 91 44 27 	lds	r27, 0x2744	; 0x802744 <g_twi1_gyro_2_mag_z+0x1>
    4550:	22 96       	adiw	r28, 0x02	; 2
    4552:	bf af       	std	Y+63, r27	; 0x3f
    4554:	22 97       	sbiw	r28, 0x02	; 2
					l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
    4556:	80 91 3f 27 	lds	r24, 0x273F	; 0x80273f <g_twi1_gyro_2_mag_x_nT>
    455a:	90 91 40 27 	lds	r25, 0x2740	; 0x802740 <g_twi1_gyro_2_mag_x_nT+0x1>
    455e:	a0 91 41 27 	lds	r26, 0x2741	; 0x802741 <g_twi1_gyro_2_mag_x_nT+0x2>
    4562:	b0 91 42 27 	lds	r27, 0x2742	; 0x802742 <g_twi1_gyro_2_mag_x_nT+0x3>
    4566:	88 a3       	std	Y+32, r24	; 0x20
    4568:	99 a3       	std	Y+33, r25	; 0x21
    456a:	aa a3       	std	Y+34, r26	; 0x22
    456c:	bb a3       	std	Y+35, r27	; 0x23
					l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
    456e:	80 91 3b 27 	lds	r24, 0x273B	; 0x80273b <g_twi1_gyro_2_mag_y_nT>
    4572:	90 91 3c 27 	lds	r25, 0x273C	; 0x80273c <g_twi1_gyro_2_mag_y_nT+0x1>
    4576:	a0 91 3d 27 	lds	r26, 0x273D	; 0x80273d <g_twi1_gyro_2_mag_y_nT+0x2>
    457a:	b0 91 3e 27 	lds	r27, 0x273E	; 0x80273e <g_twi1_gyro_2_mag_y_nT+0x3>
    457e:	8c a3       	std	Y+36, r24	; 0x24
    4580:	9d a3       	std	Y+37, r25	; 0x25
    4582:	ae a3       	std	Y+38, r26	; 0x26
    4584:	bf a3       	std	Y+39, r27	; 0x27
					l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
    4586:	80 91 37 27 	lds	r24, 0x2737	; 0x802737 <g_twi1_gyro_2_mag_z_nT>
    458a:	90 91 38 27 	lds	r25, 0x2738	; 0x802738 <g_twi1_gyro_2_mag_z_nT+0x1>
    458e:	a0 91 39 27 	lds	r26, 0x2739	; 0x802739 <g_twi1_gyro_2_mag_z_nT+0x2>
    4592:	b0 91 3a 27 	lds	r27, 0x273A	; 0x80273a <g_twi1_gyro_2_mag_z_nT+0x3>
    4596:	88 a7       	std	Y+40, r24	; 0x28
    4598:	99 a7       	std	Y+41, r25	; 0x29
    459a:	aa a7       	std	Y+42, r26	; 0x2a
    459c:	bb a7       	std	Y+43, r27	; 0x2b
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    459e:	6f bf       	out	0x3f, r22	; 63
					cpu_irq_restore(flags);
				}

				int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1A,
    45a0:	5f 93       	push	r21
    45a2:	4f 93       	push	r20
    45a4:	3f 93       	push	r19
    45a6:	2f 93       	push	r18
    45a8:	24 96       	adiw	r28, 0x04	; 4
    45aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    45ac:	24 97       	sbiw	r28, 0x04	; 4
    45ae:	9f 93       	push	r25
    45b0:	23 96       	adiw	r28, 0x03	; 3
    45b2:	af ad       	ldd	r26, Y+63	; 0x3f
    45b4:	23 97       	sbiw	r28, 0x03	; 3
    45b6:	af 93       	push	r26
    45b8:	d3 01       	movw	r26, r6
    45ba:	c2 01       	movw	r24, r4
    45bc:	07 2e       	mov	r0, r23
    45be:	7a e0       	ldi	r23, 0x0A	; 10
    45c0:	b6 95       	lsr	r27
    45c2:	a7 95       	ror	r26
    45c4:	97 95       	ror	r25
    45c6:	87 95       	ror	r24
    45c8:	7a 95       	dec	r23
    45ca:	d1 f7       	brne	.-12     	; 0x45c0 <task_usb+0x3bc>
    45cc:	70 2d       	mov	r23, r0
    45ce:	bf 93       	push	r27
    45d0:	af 93       	push	r26
    45d2:	9f 93       	push	r25
    45d4:	8f 93       	push	r24
    45d6:	84 e9       	ldi	r24, 0x94	; 148
    45d8:	96 e0       	ldi	r25, 0x06	; 6
    45da:	9f 93       	push	r25
    45dc:	8f 93       	push	r24
    45de:	1f 92       	push	r1
    45e0:	80 e4       	ldi	r24, 0x40	; 64
    45e2:	8f 93       	push	r24
    45e4:	8b e3       	ldi	r24, 0x3B	; 59
    45e6:	95 e2       	ldi	r25, 0x25	; 37
    45e8:	9f 93       	push	r25
    45ea:	8f 93       	push	r24
    45ec:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
				now >> 10,
				l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    45f0:	81 34       	cpi	r24, 0x41	; 65
    45f2:	91 05       	cpc	r25, r1
    45f4:	10 f0       	brcs	.+4      	; 0x45fa <task_usb+0x3f6>
    45f6:	80 e4       	ldi	r24, 0x40	; 64
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	40 e0       	ldi	r20, 0x00	; 0
    45fc:	68 2f       	mov	r22, r24
    45fe:	8b e3       	ldi	r24, 0x3B	; 59
    4600:	95 e2       	ldi	r25, 0x25	; 37
    4602:	17 dd       	rcall	.-1490   	; 0x4032 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1B,
    4604:	1f 93       	push	r17
    4606:	0f 93       	push	r16
    4608:	3f 92       	push	r3
    460a:	2f 92       	push	r2
    460c:	bd a5       	ldd	r27, Y+45	; 0x2d
    460e:	bf 93       	push	r27
    4610:	ec a5       	ldd	r30, Y+44	; 0x2c
    4612:	ef 93       	push	r30
    4614:	8a e6       	ldi	r24, 0x6A	; 106
    4616:	96 e0       	ldi	r25, 0x06	; 6
    4618:	9f 93       	push	r25
    461a:	8f 93       	push	r24
    461c:	1f 92       	push	r1
    461e:	80 e4       	ldi	r24, 0x40	; 64
    4620:	8f 93       	push	r24
    4622:	8b e3       	ldi	r24, 0x3B	; 59
    4624:	95 e2       	ldi	r25, 0x25	; 37
    4626:	9f 93       	push	r25
    4628:	8f 93       	push	r24
    462a:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
				l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    462e:	81 34       	cpi	r24, 0x41	; 65
    4630:	91 05       	cpc	r25, r1
    4632:	10 f0       	brcs	.+4      	; 0x4638 <task_usb+0x434>
    4634:	80 e4       	ldi	r24, 0x40	; 64
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	40 e0       	ldi	r20, 0x00	; 0
    463a:	68 2f       	mov	r22, r24
    463c:	8b e3       	ldi	r24, 0x3B	; 59
    463e:	95 e2       	ldi	r25, 0x25	; 37
    4640:	f8 dc       	rcall	.-1552   	; 0x4032 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1C,
    4642:	2e 81       	ldd	r18, Y+6	; 0x06
    4644:	3f 81       	ldd	r19, Y+7	; 0x07
    4646:	b9 01       	movw	r22, r18
    4648:	33 0f       	add	r19, r19
    464a:	88 0b       	sbc	r24, r24
    464c:	99 0b       	sbc	r25, r25
    464e:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	48 ec       	ldi	r20, 0xC8	; 200
    4658:	52 e4       	ldi	r21, 0x42	; 66
    465a:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    465e:	9f 93       	push	r25
    4660:	8f 93       	push	r24
    4662:	7f 93       	push	r23
    4664:	6f 93       	push	r22
    4666:	86 e5       	ldi	r24, 0x56	; 86
    4668:	96 e0       	ldi	r25, 0x06	; 6
    466a:	9f 93       	push	r25
    466c:	8f 93       	push	r24
    466e:	1f 92       	push	r1
    4670:	80 e4       	ldi	r24, 0x40	; 64
    4672:	8f 93       	push	r24
    4674:	8b e3       	ldi	r24, 0x3B	; 59
    4676:	95 e2       	ldi	r25, 0x25	; 37
    4678:	9f 93       	push	r25
    467a:	8f 93       	push	r24
    467c:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
				l_adc_temp_deg_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4680:	cd bf       	out	0x3d, r28	; 61
    4682:	de bf       	out	0x3e, r29	; 62
    4684:	81 34       	cpi	r24, 0x41	; 65
    4686:	91 05       	cpc	r25, r1
    4688:	10 f0       	brcs	.+4      	; 0x468e <task_usb+0x48a>
    468a:	80 e4       	ldi	r24, 0x40	; 64
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	40 e0       	ldi	r20, 0x00	; 0
    4690:	68 2f       	mov	r22, r24
    4692:	8b e3       	ldi	r24, 0x3B	; 59
    4694:	95 e2       	ldi	r25, 0x25	; 37
    4696:	cd dc       	rcall	.-1638   	; 0x4032 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P2,
    4698:	68 85       	ldd	r22, Y+8	; 0x08
    469a:	79 85       	ldd	r23, Y+9	; 0x09
    469c:	8a 85       	ldd	r24, Y+10	; 0x0a
    469e:	9b 85       	ldd	r25, Y+11	; 0x0b
    46a0:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    46a4:	20 e0       	ldi	r18, 0x00	; 0
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	48 ec       	ldi	r20, 0xC8	; 200
    46aa:	52 e4       	ldi	r21, 0x42	; 66
    46ac:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    46b0:	9f 93       	push	r25
    46b2:	8f 93       	push	r24
    46b4:	7f 93       	push	r23
    46b6:	6f 93       	push	r22
    46b8:	c5 01       	movw	r24, r10
    46ba:	b4 01       	movw	r22, r8
    46bc:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    46c0:	20 e0       	ldi	r18, 0x00	; 0
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	48 ec       	ldi	r20, 0xC8	; 200
    46c6:	52 e4       	ldi	r21, 0x42	; 66
    46c8:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    46cc:	9f 93       	push	r25
    46ce:	8f 93       	push	r24
    46d0:	7f 93       	push	r23
    46d2:	6f 93       	push	r22
    46d4:	8f e2       	ldi	r24, 0x2F	; 47
    46d6:	96 e0       	ldi	r25, 0x06	; 6
    46d8:	9f 93       	push	r25
    46da:	8f 93       	push	r24
    46dc:	1f 92       	push	r1
    46de:	80 e4       	ldi	r24, 0x40	; 64
    46e0:	8f 93       	push	r24
    46e2:	8b e3       	ldi	r24, 0x3B	; 59
    46e4:	95 e2       	ldi	r25, 0x25	; 37
    46e6:	9f 93       	push	r25
    46e8:	8f 93       	push	r24
    46ea:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
				l_twi1_baro_temp_100 / 100.f, l_twi1_baro_p_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    46ee:	81 34       	cpi	r24, 0x41	; 65
    46f0:	91 05       	cpc	r25, r1
    46f2:	10 f0       	brcs	.+4      	; 0x46f8 <task_usb+0x4f4>
    46f4:	80 e4       	ldi	r24, 0x40	; 64
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	40 e0       	ldi	r20, 0x00	; 0
    46fa:	68 2f       	mov	r22, r24
    46fc:	8b e3       	ldi	r24, 0x3B	; 59
    46fe:	95 e2       	ldi	r25, 0x25	; 37
    4700:	98 dc       	rcall	.-1744   	; 0x4032 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P3,
    4702:	ee 85       	ldd	r30, Y+14	; 0x0e
    4704:	ff 85       	ldd	r31, Y+15	; 0x0f
    4706:	bf 01       	movw	r22, r30
    4708:	ff 0f       	add	r31, r31
    470a:	88 0b       	sbc	r24, r24
    470c:	99 0b       	sbc	r25, r25
    470e:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	48 ec       	ldi	r20, 0xC8	; 200
    4718:	52 e4       	ldi	r21, 0x42	; 66
    471a:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    471e:	9f 93       	push	r25
    4720:	8f 93       	push	r24
    4722:	7f 93       	push	r23
    4724:	6f 93       	push	r22
    4726:	2c 85       	ldd	r18, Y+12	; 0x0c
    4728:	3d 85       	ldd	r19, Y+13	; 0x0d
    472a:	b9 01       	movw	r22, r18
    472c:	33 0f       	add	r19, r19
    472e:	88 0b       	sbc	r24, r24
    4730:	99 0b       	sbc	r25, r25
    4732:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	30 e0       	ldi	r19, 0x00	; 0
    473a:	48 ec       	ldi	r20, 0xC8	; 200
    473c:	52 e4       	ldi	r21, 0x42	; 66
    473e:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    4742:	9f 93       	push	r25
    4744:	8f 93       	push	r24
    4746:	7f 93       	push	r23
    4748:	6f 93       	push	r22
    474a:	84 e0       	ldi	r24, 0x04	; 4
    474c:	96 e0       	ldi	r25, 0x06	; 6
    474e:	9f 93       	push	r25
    4750:	8f 93       	push	r24
    4752:	1f 92       	push	r1
    4754:	80 e4       	ldi	r24, 0x40	; 64
    4756:	8f 93       	push	r24
    4758:	8b e3       	ldi	r24, 0x3B	; 59
    475a:	95 e2       	ldi	r25, 0x25	; 37
    475c:	9f 93       	push	r25
    475e:	8f 93       	push	r24
    4760:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
				l_twi1_hygro_T_100 / 100.f, l_twi1_hygro_RH_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4764:	81 34       	cpi	r24, 0x41	; 65
    4766:	91 05       	cpc	r25, r1
    4768:	10 f0       	brcs	.+4      	; 0x476e <task_usb+0x56a>
    476a:	80 e4       	ldi	r24, 0x40	; 64
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	40 e0       	ldi	r20, 0x00	; 0
    4770:	68 2f       	mov	r22, r24
    4772:	8b e3       	ldi	r24, 0x3B	; 59
    4774:	95 e2       	ldi	r25, 0x25	; 37
    4776:	5d dc       	rcall	.-1862   	; 0x4032 <udi_write_tx_buf>


				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P1A,
    4778:	39 a9       	ldd	r19, Y+49	; 0x31
    477a:	3f 93       	push	r19
    477c:	78 a9       	ldd	r23, Y+48	; 0x30
    477e:	7f 93       	push	r23
    4780:	aa 89       	ldd	r26, Y+18	; 0x12
    4782:	bb 89       	ldd	r27, Y+19	; 0x13
    4784:	bd 01       	movw	r22, r26
    4786:	bb 0f       	add	r27, r27
    4788:	88 0b       	sbc	r24, r24
    478a:	99 0b       	sbc	r25, r25
    478c:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	4a e7       	ldi	r20, 0x7A	; 122
    4796:	54 e4       	ldi	r21, 0x44	; 68
    4798:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    479c:	9f 93       	push	r25
    479e:	8f 93       	push	r24
    47a0:	7f 93       	push	r23
    47a2:	6f 93       	push	r22
    47a4:	bf a5       	ldd	r27, Y+47	; 0x2f
    47a6:	bf 93       	push	r27
    47a8:	ee a5       	ldd	r30, Y+46	; 0x2e
    47aa:	ef 93       	push	r30
    47ac:	28 89       	ldd	r18, Y+16	; 0x10
    47ae:	39 89       	ldd	r19, Y+17	; 0x11
    47b0:	b9 01       	movw	r22, r18
    47b2:	33 0f       	add	r19, r19
    47b4:	88 0b       	sbc	r24, r24
    47b6:	99 0b       	sbc	r25, r25
    47b8:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    47bc:	20 e0       	ldi	r18, 0x00	; 0
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	4a e7       	ldi	r20, 0x7A	; 122
    47c2:	54 e4       	ldi	r21, 0x44	; 68
    47c4:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    47c8:	9f 93       	push	r25
    47ca:	8f 93       	push	r24
    47cc:	7f 93       	push	r23
    47ce:	6f 93       	push	r22
    47d0:	88 ed       	ldi	r24, 0xD8	; 216
    47d2:	95 e0       	ldi	r25, 0x05	; 5
    47d4:	9f 93       	push	r25
    47d6:	8f 93       	push	r24
    47d8:	1f 92       	push	r1
    47da:	80 e4       	ldi	r24, 0x40	; 64
    47dc:	8f 93       	push	r24
    47de:	8b e3       	ldi	r24, 0x3B	; 59
    47e0:	95 e2       	ldi	r25, 0x25	; 37
    47e2:	9f 93       	push	r25
    47e4:	8f 93       	push	r24
    47e6:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
				l_twi1_gyro_1_accel_x_mg / 1000.f, l_twi1_gyro_1_accel_x,
				l_twi1_gyro_1_accel_y_mg / 1000.f, l_twi1_gyro_1_accel_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    47ea:	cd bf       	out	0x3d, r28	; 61
    47ec:	de bf       	out	0x3e, r29	; 62
    47ee:	81 34       	cpi	r24, 0x41	; 65
    47f0:	91 05       	cpc	r25, r1
    47f2:	10 f0       	brcs	.+4      	; 0x47f8 <task_usb+0x5f4>
    47f4:	80 e4       	ldi	r24, 0x40	; 64
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	40 e0       	ldi	r20, 0x00	; 0
    47fa:	68 2f       	mov	r22, r24
    47fc:	8b e3       	ldi	r24, 0x3B	; 59
    47fe:	95 e2       	ldi	r25, 0x25	; 37
    4800:	18 dc       	rcall	.-2000   	; 0x4032 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P1B,
    4802:	bb a9       	ldd	r27, Y+51	; 0x33
    4804:	bf 93       	push	r27
    4806:	ea a9       	ldd	r30, Y+50	; 0x32
    4808:	ef 93       	push	r30
    480a:	2c 89       	ldd	r18, Y+20	; 0x14
    480c:	3d 89       	ldd	r19, Y+21	; 0x15
    480e:	b9 01       	movw	r22, r18
    4810:	33 0f       	add	r19, r19
    4812:	88 0b       	sbc	r24, r24
    4814:	99 0b       	sbc	r25, r25
    4816:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	4a e7       	ldi	r20, 0x7A	; 122
    4820:	54 e4       	ldi	r21, 0x44	; 68
    4822:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    4826:	9f 93       	push	r25
    4828:	8f 93       	push	r24
    482a:	7f 93       	push	r23
    482c:	6f 93       	push	r22
    482e:	81 ec       	ldi	r24, 0xC1	; 193
    4830:	95 e0       	ldi	r25, 0x05	; 5
    4832:	9f 93       	push	r25
    4834:	8f 93       	push	r24
    4836:	1f 92       	push	r1
    4838:	80 e4       	ldi	r24, 0x40	; 64
    483a:	8f 93       	push	r24
    483c:	8b e3       	ldi	r24, 0x3B	; 59
    483e:	95 e2       	ldi	r25, 0x25	; 37
    4840:	9f 93       	push	r25
    4842:	8f 93       	push	r24
    4844:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
				l_twi1_gyro_1_accel_z_mg / 1000.f, l_twi1_gyro_1_accel_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4848:	81 34       	cpi	r24, 0x41	; 65
    484a:	91 05       	cpc	r25, r1
    484c:	10 f0       	brcs	.+4      	; 0x4852 <task_usb+0x64e>
    484e:	80 e4       	ldi	r24, 0x40	; 64
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	40 e0       	ldi	r20, 0x00	; 0
    4854:	68 2f       	mov	r22, r24
    4856:	8b e3       	ldi	r24, 0x3B	; 59
    4858:	95 e2       	ldi	r25, 0x25	; 37
    485a:	eb db       	rcall	.-2090   	; 0x4032 <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P2A,
    485c:	3f a9       	ldd	r19, Y+55	; 0x37
    485e:	3f 93       	push	r19
    4860:	7e a9       	ldd	r23, Y+54	; 0x36
    4862:	7f 93       	push	r23
    4864:	c7 01       	movw	r24, r14
    4866:	b6 01       	movw	r22, r12
    4868:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    486c:	20 e0       	ldi	r18, 0x00	; 0
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	4a e7       	ldi	r20, 0x7A	; 122
    4872:	54 e4       	ldi	r21, 0x44	; 68
    4874:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    4878:	9f 93       	push	r25
    487a:	8f 93       	push	r24
    487c:	7f 93       	push	r23
    487e:	6f 93       	push	r22
    4880:	cd a8       	ldd	r12, Y+53	; 0x35
    4882:	cf 92       	push	r12
    4884:	dc a8       	ldd	r13, Y+52	; 0x34
    4886:	df 92       	push	r13
    4888:	6e 89       	ldd	r22, Y+22	; 0x16
    488a:	7f 89       	ldd	r23, Y+23	; 0x17
    488c:	88 8d       	ldd	r24, Y+24	; 0x18
    488e:	99 8d       	ldd	r25, Y+25	; 0x19
    4890:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    4894:	20 e0       	ldi	r18, 0x00	; 0
    4896:	30 e0       	ldi	r19, 0x00	; 0
    4898:	4a e7       	ldi	r20, 0x7A	; 122
    489a:	54 e4       	ldi	r21, 0x44	; 68
    489c:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    48a0:	9f 93       	push	r25
    48a2:	8f 93       	push	r24
    48a4:	7f 93       	push	r23
    48a6:	6f 93       	push	r22
    48a8:	82 e9       	ldi	r24, 0x92	; 146
    48aa:	95 e0       	ldi	r25, 0x05	; 5
    48ac:	9f 93       	push	r25
    48ae:	8f 93       	push	r24
    48b0:	1f 92       	push	r1
    48b2:	80 e4       	ldi	r24, 0x40	; 64
    48b4:	8f 93       	push	r24
    48b6:	8b e3       	ldi	r24, 0x3B	; 59
    48b8:	95 e2       	ldi	r25, 0x25	; 37
    48ba:	9f 93       	push	r25
    48bc:	8f 93       	push	r24
    48be:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
				l_twi1_gyro_1_gyro_x_mdps / 1000.f, l_twi1_gyro_1_gyro_x,
				l_twi1_gyro_1_gyro_y_mdps / 1000.f, l_twi1_gyro_1_gyro_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    48c2:	81 34       	cpi	r24, 0x41	; 65
    48c4:	91 05       	cpc	r25, r1
    48c6:	10 f0       	brcs	.+4      	; 0x48cc <task_usb+0x6c8>
    48c8:	80 e4       	ldi	r24, 0x40	; 64
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	40 e0       	ldi	r20, 0x00	; 0
    48ce:	68 2f       	mov	r22, r24
    48d0:	8b e3       	ldi	r24, 0x3B	; 59
    48d2:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P2B,
    48d4:	ae db       	rcall	.-2212   	; 0x4032 <udi_write_tx_buf>
    48d6:	e9 ac       	ldd	r14, Y+57	; 0x39
    48d8:	ef 92       	push	r14
    48da:	f8 ac       	ldd	r15, Y+56	; 0x38
    48dc:	ff 92       	push	r15
    48de:	6a 8d       	ldd	r22, Y+26	; 0x1a
    48e0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    48e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    48e4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    48e6:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    48ea:	20 e0       	ldi	r18, 0x00	; 0
    48ec:	30 e0       	ldi	r19, 0x00	; 0
    48ee:	4a e7       	ldi	r20, 0x7A	; 122
    48f0:	54 e4       	ldi	r21, 0x44	; 68
    48f2:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    48f6:	9f 93       	push	r25
    48f8:	8f 93       	push	r24
    48fa:	7f 93       	push	r23
    48fc:	6f 93       	push	r22
    48fe:	8a e7       	ldi	r24, 0x7A	; 122
    4900:	95 e0       	ldi	r25, 0x05	; 5
    4902:	9f 93       	push	r25
    4904:	8f 93       	push	r24
    4906:	1f 92       	push	r1
    4908:	80 e4       	ldi	r24, 0x40	; 64
    490a:	8f 93       	push	r24
    490c:	8b e3       	ldi	r24, 0x3B	; 59
    490e:	95 e2       	ldi	r25, 0x25	; 37
    4910:	9f 93       	push	r25
    4912:	8f 93       	push	r24
    4914:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
				l_twi1_gyro_1_gyro_z_mdps / 1000.f, l_twi1_gyro_1_gyro_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4918:	cd bf       	out	0x3d, r28	; 61
    491a:	de bf       	out	0x3e, r29	; 62
    491c:	81 34       	cpi	r24, 0x41	; 65
    491e:	91 05       	cpc	r25, r1
    4920:	10 f0       	brcs	.+4      	; 0x4926 <task_usb+0x722>
    4922:	80 e4       	ldi	r24, 0x40	; 64
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	40 e0       	ldi	r20, 0x00	; 0
    4928:	68 2f       	mov	r22, r24
    492a:	8b e3       	ldi	r24, 0x3B	; 59
    492c:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P3A,
    492e:	81 db       	rcall	.-2302   	; 0x4032 <udi_write_tx_buf>
    4930:	cf ac       	ldd	r12, Y+63	; 0x3f
    4932:	cf 92       	push	r12
    4934:	de ac       	ldd	r13, Y+62	; 0x3e
    4936:	df 92       	push	r13
    4938:	6c a1       	ldd	r22, Y+36	; 0x24
    493a:	7d a1       	ldd	r23, Y+37	; 0x25
    493c:	8e a1       	ldd	r24, Y+38	; 0x26
    493e:	9f a1       	ldd	r25, Y+39	; 0x27
    4940:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    4944:	20 e0       	ldi	r18, 0x00	; 0
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	4a e7       	ldi	r20, 0x7A	; 122
    494a:	54 e4       	ldi	r21, 0x44	; 68
    494c:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    4950:	9f 93       	push	r25
    4952:	8f 93       	push	r24
    4954:	7f 93       	push	r23
    4956:	6f 93       	push	r22
    4958:	ed ac       	ldd	r14, Y+61	; 0x3d
    495a:	ef 92       	push	r14
    495c:	fc ac       	ldd	r15, Y+60	; 0x3c
    495e:	ff 92       	push	r15
    4960:	68 a1       	ldd	r22, Y+32	; 0x20
    4962:	79 a1       	ldd	r23, Y+33	; 0x21
    4964:	8a a1       	ldd	r24, Y+34	; 0x22
    4966:	9b a1       	ldd	r25, Y+35	; 0x23
    4968:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	4a e7       	ldi	r20, 0x7A	; 122
    4972:	54 e4       	ldi	r21, 0x44	; 68
    4974:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    4978:	9f 93       	push	r25
    497a:	8f 93       	push	r24
    497c:	7f 93       	push	r23
    497e:	6f 93       	push	r22
    4980:	8d e4       	ldi	r24, 0x4D	; 77
    4982:	95 e0       	ldi	r25, 0x05	; 5
    4984:	9f 93       	push	r25
    4986:	8f 93       	push	r24
    4988:	1f 92       	push	r1
    498a:	80 e4       	ldi	r24, 0x40	; 64
    498c:	8f 93       	push	r24
    498e:	8b e3       	ldi	r24, 0x3B	; 59
    4990:	95 e2       	ldi	r25, 0x25	; 37
    4992:	9f 93       	push	r25
    4994:	8f 93       	push	r24
				l_twi1_gyro_2_mag_x_nT / 1000.f, l_twi1_gyro_2_mag_x,
				l_twi1_gyro_2_mag_y_nT / 1000.f, l_twi1_gyro_2_mag_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4996:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    499a:	81 34       	cpi	r24, 0x41	; 65
    499c:	91 05       	cpc	r25, r1
    499e:	10 f0       	brcs	.+4      	; 0x49a4 <task_usb+0x7a0>
    49a0:	80 e4       	ldi	r24, 0x40	; 64
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	40 e0       	ldi	r20, 0x00	; 0
    49a6:	68 2f       	mov	r22, r24
    49a8:	8b e3       	ldi	r24, 0x3B	; 59
    49aa:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P3B,
    49ac:	42 db       	rcall	.-2428   	; 0x4032 <udi_write_tx_buf>
    49ae:	22 96       	adiw	r28, 0x02	; 2
    49b0:	cf ac       	ldd	r12, Y+63	; 0x3f
    49b2:	22 97       	sbiw	r28, 0x02	; 2
    49b4:	cf 92       	push	r12
    49b6:	21 96       	adiw	r28, 0x01	; 1
    49b8:	df ac       	ldd	r13, Y+63	; 0x3f
    49ba:	21 97       	sbiw	r28, 0x01	; 1
    49bc:	df 92       	push	r13
    49be:	68 a5       	ldd	r22, Y+40	; 0x28
    49c0:	79 a5       	ldd	r23, Y+41	; 0x29
    49c2:	8a a5       	ldd	r24, Y+42	; 0x2a
    49c4:	9b a5       	ldd	r25, Y+43	; 0x2b
    49c6:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    49ca:	20 e0       	ldi	r18, 0x00	; 0
    49cc:	30 e0       	ldi	r19, 0x00	; 0
    49ce:	4a e7       	ldi	r20, 0x7A	; 122
    49d0:	54 e4       	ldi	r21, 0x44	; 68
    49d2:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    49d6:	9f 93       	push	r25
    49d8:	8f 93       	push	r24
    49da:	7f 93       	push	r23
    49dc:	6f 93       	push	r22
    49de:	85 e3       	ldi	r24, 0x35	; 53
    49e0:	95 e0       	ldi	r25, 0x05	; 5
    49e2:	9f 93       	push	r25
    49e4:	8f 93       	push	r24
    49e6:	1f 92       	push	r1
    49e8:	80 e4       	ldi	r24, 0x40	; 64
    49ea:	8f 93       	push	r24
    49ec:	8b e3       	ldi	r24, 0x3B	; 59
    49ee:	95 e2       	ldi	r25, 0x25	; 37
    49f0:	9f 93       	push	r25
    49f2:	8f 93       	push	r24
				l_twi1_gyro_2_mag_z_nT / 1000.f, l_twi1_gyro_2_mag_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    49f4:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    49f8:	81 34       	cpi	r24, 0x41	; 65
    49fa:	91 05       	cpc	r25, r1
    49fc:	10 f0       	brcs	.+4      	; 0x4a02 <task_usb+0x7fe>
    49fe:	80 e4       	ldi	r24, 0x40	; 64
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	40 e0       	ldi	r20, 0x00	; 0
    4a04:	68 2f       	mov	r22, r24
    4a06:	8b e3       	ldi	r24, 0x3B	; 59
    4a08:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P4,
    4a0a:	13 db       	rcall	.-2522   	; 0x4032 <udi_write_tx_buf>
    4a0c:	eb ac       	ldd	r14, Y+59	; 0x3b
    4a0e:	ef 92       	push	r14
    4a10:	fa ac       	ldd	r15, Y+58	; 0x3a
    4a12:	ff 92       	push	r15
    4a14:	ce 8c       	ldd	r12, Y+30	; 0x1e
    4a16:	df 8c       	ldd	r13, Y+31	; 0x1f
    4a18:	b6 01       	movw	r22, r12
    4a1a:	dd 0c       	add	r13, r13
    4a1c:	88 0b       	sbc	r24, r24
    4a1e:	99 0b       	sbc	r25, r25
    4a20:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    4a24:	20 e0       	ldi	r18, 0x00	; 0
    4a26:	30 e0       	ldi	r19, 0x00	; 0
    4a28:	48 ec       	ldi	r20, 0xC8	; 200
    4a2a:	52 e4       	ldi	r21, 0x42	; 66
    4a2c:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    4a30:	9f 93       	push	r25
    4a32:	8f 93       	push	r24
    4a34:	7f 93       	push	r23
    4a36:	6f 93       	push	r22
    4a38:	86 e1       	ldi	r24, 0x16	; 22
    4a3a:	95 e0       	ldi	r25, 0x05	; 5
    4a3c:	9f 93       	push	r25
    4a3e:	8f 93       	push	r24
    4a40:	1f 92       	push	r1
    4a42:	80 e4       	ldi	r24, 0x40	; 64
    4a44:	8f 93       	push	r24
    4a46:	8b e3       	ldi	r24, 0x3B	; 59
    4a48:	95 e2       	ldi	r25, 0x25	; 37
    4a4a:	9f 93       	push	r25
    4a4c:	8f 93       	push	r24
				l_twi1_gyro_1_temp_deg_100 / 100.f, l_twi1_gyro_1_temp);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4a4e:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    4a52:	cd bf       	out	0x3d, r28	; 61
    4a54:	de bf       	out	0x3e, r29	; 62
    4a56:	81 34       	cpi	r24, 0x41	; 65
    4a58:	91 05       	cpc	r25, r1
    4a5a:	10 f0       	brcs	.+4      	; 0x4a60 <task_usb+0x85c>
    4a5c:	80 e4       	ldi	r24, 0x40	; 64
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	40 e0       	ldi	r20, 0x00	; 0
    4a62:	68 2f       	mov	r22, r24
    4a64:	8b e3       	ldi	r24, 0x3B	; 59
    4a66:	95 e2       	ldi	r25, 0x25	; 37

				/* Store last time of status line */
				usb_last = now;
    4a68:	e4 da       	rcall	.-2616   	; 0x4032 <udi_write_tx_buf>
    4a6a:	40 92 ce 21 	sts	0x21CE, r4	; 0x8021ce <__data_end>
    4a6e:	50 92 cf 21 	sts	0x21CF, r5	; 0x8021cf <__data_end+0x1>
    4a72:	60 92 d0 21 	sts	0x21D0, r6	; 0x8021d0 <__data_end+0x2>
    4a76:	70 92 d1 21 	sts	0x21D1, r7	; 0x8021d1 <__data_end+0x3>
			}
		}
	}
}
    4a7a:	cd 5b       	subi	r28, 0xBD	; 189
    4a7c:	df 4f       	sbci	r29, 0xFF	; 255
    4a7e:	cd bf       	out	0x3d, r28	; 61
    4a80:	de bf       	out	0x3e, r29	; 62
    4a82:	df 91       	pop	r29
    4a84:	cf 91       	pop	r28
    4a86:	1f 91       	pop	r17
    4a88:	0f 91       	pop	r16
    4a8a:	ff 90       	pop	r15
    4a8c:	ef 90       	pop	r14
    4a8e:	df 90       	pop	r13
    4a90:	cf 90       	pop	r12
    4a92:	bf 90       	pop	r11
    4a94:	af 90       	pop	r10
    4a96:	9f 90       	pop	r9
    4a98:	8f 90       	pop	r8
    4a9a:	7f 90       	pop	r7
    4a9c:	6f 90       	pop	r6
    4a9e:	5f 90       	pop	r5
    4aa0:	4f 90       	pop	r4
    4aa2:	3f 90       	pop	r3
    4aa4:	2f 90       	pop	r2
    4aa6:	08 95       	ret

00004aa8 <nvm_init>:
	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    4aa8:	83 30       	cpi	r24, 0x03	; 3
    4aaa:	10 f4       	brcc	.+4      	; 0x4ab0 <nvm_init+0x8>
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	08 95       	ret
    4ab0:	88 ef       	ldi	r24, 0xF8	; 248
    4ab2:	08 95       	ret

00004ab4 <nvm_read>:

status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    4ab4:	ef 92       	push	r14
    4ab6:	ff 92       	push	r15
    4ab8:	0f 93       	push	r16
    4aba:	1f 93       	push	r17
    4abc:	e8 2f       	mov	r30, r24
    4abe:	db 01       	movw	r26, r22
    4ac0:	ca 01       	movw	r24, r20
    4ac2:	b9 01       	movw	r22, r18
	switch (mem) {
    4ac4:	e1 30       	cpi	r30, 0x01	; 1
    4ac6:	61 f0       	breq	.+24     	; 0x4ae0 <nvm_read+0x2c>
    4ac8:	18 f0       	brcs	.+6      	; 0x4ad0 <nvm_read+0x1c>
    4aca:	e2 30       	cpi	r30, 0x02	; 2
    4acc:	89 f0       	breq	.+34     	; 0x4af0 <nvm_read+0x3c>
    4ace:	15 c0       	rjmp	.+42     	; 0x4afa <nvm_read+0x46>
	case INT_FLASH:
		nvm_flash_read_buffer((flash_addr_t)address, buffer,
    4ad0:	97 01       	movw	r18, r14
    4ad2:	ab 01       	movw	r20, r22
    4ad4:	bc 01       	movw	r22, r24
    4ad6:	cd 01       	movw	r24, r26
    4ad8:	0e 94 12 78 	call	0xf024	; 0xf024 <nvm_flash_read_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4adc:	80 e0       	ldi	r24, 0x00	; 0
{
	switch (mem) {
	case INT_FLASH:
		nvm_flash_read_buffer((flash_addr_t)address, buffer,
				(uint16_t)len);
		break;
    4ade:	0e c0       	rjmp	.+28     	; 0x4afc <nvm_read+0x48>

	case INT_USERPAGE:
		nvm_user_sig_read_buffer((flash_addr_t)address, buffer,
    4ae0:	97 01       	movw	r18, r14
    4ae2:	ab 01       	movw	r20, r22
    4ae4:	bc 01       	movw	r22, r24
    4ae6:	cd 01       	movw	r24, r26
    4ae8:	0e 94 2a 78 	call	0xf054	; 0xf054 <nvm_user_sig_read_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4aec:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_USERPAGE:
		nvm_user_sig_read_buffer((flash_addr_t)address, buffer,
				(uint16_t)len);
		break;
    4aee:	06 c0       	rjmp	.+12     	; 0x4afc <nvm_read+0x48>

	case INT_EEPROM:
		nvm_eeprom_read_buffer((eeprom_addr_t)address, buffer,
    4af0:	a7 01       	movw	r20, r14
    4af2:	0e 94 3e 77 	call	0xee7c	; 0xee7c <nvm_eeprom_read_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4af6:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_EEPROM:
		nvm_eeprom_read_buffer((eeprom_addr_t)address, buffer,
				(uint16_t)len);
		break;
    4af8:	01 c0       	rjmp	.+2      	; 0x4afc <nvm_read+0x48>
	}
	break;
#endif

	default:
		return ERR_INVALID_ARG;
    4afa:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    4afc:	1f 91       	pop	r17
    4afe:	0f 91       	pop	r16
    4b00:	ff 90       	pop	r15
    4b02:	ef 90       	pop	r14
    4b04:	08 95       	ret

00004b06 <nvm_write>:

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    4b06:	ef 92       	push	r14
    4b08:	ff 92       	push	r15
    4b0a:	0f 93       	push	r16
    4b0c:	1f 93       	push	r17
    4b0e:	e8 2f       	mov	r30, r24
    4b10:	db 01       	movw	r26, r22
    4b12:	ca 01       	movw	r24, r20
    4b14:	b9 01       	movw	r22, r18
    4b16:	a8 01       	movw	r20, r16
    4b18:	97 01       	movw	r18, r14
	switch (mem) {
    4b1a:	e1 30       	cpi	r30, 0x01	; 1
    4b1c:	61 f0       	breq	.+24     	; 0x4b36 <nvm_write+0x30>
    4b1e:	18 f0       	brcs	.+6      	; 0x4b26 <nvm_write+0x20>
    4b20:	e2 30       	cpi	r30, 0x02	; 2
    4b22:	89 f0       	breq	.+34     	; 0x4b46 <nvm_write+0x40>
    4b24:	15 c0       	rjmp	.+42     	; 0x4b50 <nvm_write+0x4a>
	case INT_FLASH:
		nvm_flash_erase_and_write_buffer((flash_addr_t)address,
    4b26:	01 e0       	ldi	r16, 0x01	; 1
    4b28:	ab 01       	movw	r20, r22
    4b2a:	bc 01       	movw	r22, r24
    4b2c:	cd 01       	movw	r24, r26
    4b2e:	0e 94 ec 78 	call	0xf1d8	; 0xf1d8 <nvm_flash_erase_and_write_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4b32:	80 e0       	ldi	r24, 0x00	; 0
{
	switch (mem) {
	case INT_FLASH:
		nvm_flash_erase_and_write_buffer((flash_addr_t)address,
				(const void *)buffer, len, true);
		break;
    4b34:	0e c0       	rjmp	.+28     	; 0x4b52 <nvm_write+0x4c>

	case INT_USERPAGE:
		nvm_user_sig_write_buffer((flash_addr_t)address,
    4b36:	01 e0       	ldi	r16, 0x01	; 1
    4b38:	ab 01       	movw	r20, r22
    4b3a:	bc 01       	movw	r22, r24
    4b3c:	cd 01       	movw	r24, r26
    4b3e:	0e 94 47 78 	call	0xf08e	; 0xf08e <nvm_user_sig_write_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4b42:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_USERPAGE:
		nvm_user_sig_write_buffer((flash_addr_t)address,
				(const void *)buffer, len, true);
		break;
    4b44:	06 c0       	rjmp	.+12     	; 0x4b52 <nvm_write+0x4c>

	case INT_EEPROM:
		nvm_eeprom_erase_and_write_buffer((eeprom_addr_t)address,
    4b46:	a7 01       	movw	r20, r14
    4b48:	0e 94 d2 77 	call	0xefa4	; 0xefa4 <nvm_eeprom_erase_and_write_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4b4c:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_EEPROM:
		nvm_eeprom_erase_and_write_buffer((eeprom_addr_t)address,
				(const void *)buffer, len);
		break;
    4b4e:	01 c0       	rjmp	.+2      	; 0x4b52 <nvm_write+0x4c>
	}
	break;
#endif

	default:
		return ERR_INVALID_ARG;
    4b50:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    4b52:	1f 91       	pop	r17
    4b54:	0f 91       	pop	r16
    4b56:	ff 90       	pop	r15
    4b58:	ef 90       	pop	r14
    4b5a:	08 95       	ret

00004b5c <fifo_init>:
 */

#include "fifo.h"

int fifo_init(fifo_desc_t *fifo_desc, void *buffer, uint8_t size)
{
    4b5c:	fc 01       	movw	r30, r24
	// ... and must fit in a uint8_t. Since the read and write indexes are using a
	// double-index range implementation, the max FIFO size is thus 128 items.
	Assert (size <= 128);

	// Fifo starts empty.
	fifo_desc->read_index  = 0;
    4b5e:	12 82       	std	Z+2, r1	; 0x02
	fifo_desc->write_index = 0;
    4b60:	13 82       	std	Z+3, r1	; 0x03

	// Save the size parameter.
	fifo_desc->size = size;
    4b62:	44 83       	std	Z+4, r20	; 0x04

	// Create a mask to speed up the FIFO management (index swapping).
	fifo_desc->mask = (2 * (uint16_t)size) - 1;
    4b64:	44 0f       	add	r20, r20
    4b66:	41 50       	subi	r20, 0x01	; 1
    4b68:	45 83       	std	Z+5, r20	; 0x05

	// Save the buffer pointer.
	fifo_desc->buffer.u8ptr = buffer;
    4b6a:	60 83       	st	Z, r22
    4b6c:	71 83       	std	Z+1, r23	; 0x01

	return FIFO_OK;
}
    4b6e:	80 e0       	ldi	r24, 0x00	; 0
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	08 95       	ret

00004b74 <dma_interrupt>:
 * dma_set_callback() function.
 *
 * \param num DMA channel number to handle interrupt for
 */
static void dma_interrupt(const dma_channel_num_t num)
{
    4b74:	cf 93       	push	r28
    4b76:	df 93       	push	r29
	enum dma_channel_status status;
	DMA_CH_t *channel;

	channel = dma_get_channel_address_from_num(num);
    4b78:	48 2f       	mov	r20, r24
    4b7a:	50 e0       	ldi	r21, 0x00	; 0
    4b7c:	fa 01       	movw	r30, r20
    4b7e:	71 96       	adiw	r30, 0x11	; 17
    4b80:	e2 95       	swap	r30
    4b82:	f2 95       	swap	r31
    4b84:	f0 7f       	andi	r31, 0xF0	; 240
    4b86:	fe 27       	eor	r31, r30
    4b88:	e0 7f       	andi	r30, 0xF0	; 240
    4b8a:	fe 27       	eor	r31, r30
 * \return Channel status given by a \ref dma_channel_status
 */
static inline enum dma_channel_status dma_get_channel_status(
		dma_channel_num_t num)
{
	uint8_t busy_pending    = DMA.STATUS;
    4b8c:	a0 e0       	ldi	r26, 0x00	; 0
    4b8e:	b1 e0       	ldi	r27, 0x01	; 1
    4b90:	14 96       	adiw	r26, 0x04	; 4
    4b92:	9c 91       	ld	r25, X
    4b94:	14 97       	sbiw	r26, 0x04	; 4
	uint8_t error_completed = DMA.INTFLAGS;
    4b96:	13 96       	adiw	r26, 0x03	; 3
    4b98:	6c 91       	ld	r22, X

	/*
	 * Check lower and upper nibble of INTFLAGS register to find possible
	 * error or transfer completed status.
	 */
	error_completed &= (1 << num) | (1 << (num + 4));
    4b9a:	da 01       	movw	r26, r20
    4b9c:	14 96       	adiw	r26, 0x04	; 4
    4b9e:	21 e0       	ldi	r18, 0x01	; 1
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	e9 01       	movw	r28, r18
    4ba4:	08 2e       	mov	r0, r24
    4ba6:	02 c0       	rjmp	.+4      	; 0x4bac <dma_interrupt+0x38>
    4ba8:	cc 0f       	add	r28, r28
    4baa:	dd 1f       	adc	r29, r29
    4bac:	0a 94       	dec	r0
    4bae:	e2 f7       	brpl	.-8      	; 0x4ba8 <dma_interrupt+0x34>
    4bb0:	0a 2e       	mov	r0, r26
    4bb2:	02 c0       	rjmp	.+4      	; 0x4bb8 <dma_interrupt+0x44>
    4bb4:	22 0f       	add	r18, r18
    4bb6:	33 1f       	adc	r19, r19
    4bb8:	0a 94       	dec	r0
    4bba:	e2 f7       	brpl	.-8      	; 0x4bb4 <dma_interrupt+0x40>
    4bbc:	2c 2b       	or	r18, r28
    4bbe:	62 23       	and	r22, r18
	if (error_completed & (1 << (num + 4))) {
    4bc0:	70 e0       	ldi	r23, 0x00	; 0
    4bc2:	eb 01       	movw	r28, r22
    4bc4:	0a 2e       	mov	r0, r26
    4bc6:	02 c0       	rjmp	.+4      	; 0x4bcc <dma_interrupt+0x58>
    4bc8:	d5 95       	asr	r29
    4bca:	c7 95       	ror	r28
    4bcc:	0a 94       	dec	r0
    4bce:	e2 f7       	brpl	.-8      	; 0x4bc8 <dma_interrupt+0x54>
    4bd0:	c0 fd       	sbrc	r28, 0
    4bd2:	1a c0       	rjmp	.+52     	; 0x4c08 <dma_interrupt+0x94>
		return DMA_CH_TRANSFER_ERROR;
	} else if (error_completed & (1 << num)) {
    4bd4:	08 2e       	mov	r0, r24
    4bd6:	02 c0       	rjmp	.+4      	; 0x4bdc <dma_interrupt+0x68>
    4bd8:	75 95       	asr	r23
    4bda:	67 95       	ror	r22
    4bdc:	0a 94       	dec	r0
    4bde:	e2 f7       	brpl	.-8      	; 0x4bd8 <dma_interrupt+0x64>
    4be0:	60 fd       	sbrc	r22, 0
    4be2:	14 c0       	rjmp	.+40     	; 0x4c0c <dma_interrupt+0x98>

	/*
	 * Check lower and upper nibble of STATUS register to find possible
	 * busy or pending completed status.
	 */
	busy_pending &= (1 << num) | (1 << (num + 4));
    4be4:	29 23       	and	r18, r25
	if (busy_pending & (1 << (num + 4))) {
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	b9 01       	movw	r22, r18
    4bea:	02 c0       	rjmp	.+4      	; 0x4bf0 <dma_interrupt+0x7c>
    4bec:	75 95       	asr	r23
    4bee:	67 95       	ror	r22
    4bf0:	aa 95       	dec	r26
    4bf2:	e2 f7       	brpl	.-8      	; 0x4bec <dma_interrupt+0x78>
    4bf4:	60 fd       	sbrc	r22, 0
    4bf6:	0c c0       	rjmp	.+24     	; 0x4c10 <dma_interrupt+0x9c>
	 * Check lower and upper nibble of INTFLAGS register to find possible
	 * error or transfer completed status.
	 */
	error_completed &= (1 << num) | (1 << (num + 4));
	if (error_completed & (1 << (num + 4))) {
		return DMA_CH_TRANSFER_ERROR;
    4bf8:	02 c0       	rjmp	.+4      	; 0x4bfe <dma_interrupt+0x8a>
    4bfa:	35 95       	asr	r19
    4bfc:	27 95       	ror	r18
    4bfe:	8a 95       	dec	r24
    4c00:	e2 f7       	brpl	.-8      	; 0x4bfa <dma_interrupt+0x86>
    4c02:	82 2f       	mov	r24, r18
    4c04:	81 70       	andi	r24, 0x01	; 1
    4c06:	05 c0       	rjmp	.+10     	; 0x4c12 <dma_interrupt+0x9e>
    4c08:	84 e0       	ldi	r24, 0x04	; 4
    4c0a:	03 c0       	rjmp	.+6      	; 0x4c12 <dma_interrupt+0x9e>
	} else if (error_completed & (1 << num)) {
		return DMA_CH_TRANSFER_COMPLETED;
    4c0c:	83 e0       	ldi	r24, 0x03	; 3
    4c0e:	01 c0       	rjmp	.+2      	; 0x4c12 <dma_interrupt+0x9e>
	 * Check lower and upper nibble of STATUS register to find possible
	 * busy or pending completed status.
	 */
	busy_pending &= (1 << num) | (1 << (num + 4));
	if (busy_pending & (1 << (num + 4))) {
		return DMA_CH_BUSY;
    4c10:	82 e0       	ldi	r24, 0x02	; 2
	status  = dma_get_channel_status(num);

	/* Clear all interrupt flags to be sure */
	channel->CTRLB |= DMA_CH_TRNIF_bm | DMA_CH_ERRIF_bm;
    4c12:	91 81       	ldd	r25, Z+1	; 0x01
    4c14:	90 63       	ori	r25, 0x30	; 48
    4c16:	91 83       	std	Z+1, r25	; 0x01

	if (dma_data[num].callback) {
    4c18:	44 0f       	add	r20, r20
    4c1a:	55 1f       	adc	r21, r21
    4c1c:	fa 01       	movw	r30, r20
    4c1e:	ed 52       	subi	r30, 0x2D	; 45
    4c20:	f2 4d       	sbci	r31, 0xD2	; 210
    4c22:	01 90       	ld	r0, Z+
    4c24:	f0 81       	ld	r31, Z
    4c26:	e0 2d       	mov	r30, r0
    4c28:	30 97       	sbiw	r30, 0x00	; 0
    4c2a:	09 f0       	breq	.+2      	; 0x4c2e <dma_interrupt+0xba>
		dma_data[num].callback(status);
    4c2c:	19 95       	eicall
	}
}
    4c2e:	df 91       	pop	r29
    4c30:	cf 91       	pop	r28
    4c32:	08 95       	ret

00004c34 <dma_enable>:
 *
 * \note This function will do a soft reset of the DMA controller, clearing all
 * previous configuration.
 */
void dma_enable(void)
{
    4c34:	cf 93       	push	r28
    4c36:	df 93       	push	r29
    4c38:	1f 92       	push	r1
    4c3a:	cd b7       	in	r28, 0x3d	; 61
    4c3c:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4c3e:	61 e0       	ldi	r22, 0x01	; 1
    4c40:	80 e0       	ldi	r24, 0x00	; 0
    4c42:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4c46:	80 91 78 2e 	lds	r24, 0x2E78	; 0x802e78 <sleepmgr_locks+0x1>
    4c4a:	8f 3f       	cpi	r24, 0xFF	; 255
    4c4c:	09 f4       	brne	.+2      	; 0x4c50 <dma_enable+0x1c>
    4c4e:	ff cf       	rjmp	.-2      	; 0x4c4e <dma_enable+0x1a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4c50:	8f b7       	in	r24, 0x3f	; 63
    4c52:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4c54:	f8 94       	cli
	return flags;
    4c56:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4c58:	e7 e7       	ldi	r30, 0x77	; 119
    4c5a:	fe e2       	ldi	r31, 0x2E	; 46
    4c5c:	81 81       	ldd	r24, Z+1	; 0x01
    4c5e:	8f 5f       	subi	r24, 0xFF	; 255
    4c60:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4c62:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_lock_mode(SLEEPMGR_IDLE);

	/* Reset DMA controller just to make sure everything is from scratch */
	DMA.CTRL = DMA_RESET_bm;
    4c64:	e0 e0       	ldi	r30, 0x00	; 0
    4c66:	f1 e0       	ldi	r31, 0x01	; 1
    4c68:	80 e4       	ldi	r24, 0x40	; 64
    4c6a:	80 83       	st	Z, r24
	DMA.CTRL = DMA_ENABLE_bm;
    4c6c:	80 e8       	ldi	r24, 0x80	; 128
    4c6e:	80 83       	st	Z, r24
}
    4c70:	0f 90       	pop	r0
    4c72:	df 91       	pop	r29
    4c74:	cf 91       	pop	r28
    4c76:	08 95       	ret

00004c78 <dma_disable>:

/**
 * \brief Disable DMA controller
 */
void dma_disable(void)
{
    4c78:	cf 93       	push	r28
    4c7a:	df 93       	push	r29
    4c7c:	1f 92       	push	r1
    4c7e:	cd b7       	in	r28, 0x3d	; 61
    4c80:	de b7       	in	r29, 0x3e	; 62
	DMA.CTRL = 0;
    4c82:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4c86:	61 e0       	ldi	r22, 0x01	; 1
    4c88:	80 e0       	ldi	r24, 0x00	; 0
    4c8a:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <sysclk_disable_module>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4c8e:	80 91 78 2e 	lds	r24, 0x2E78	; 0x802e78 <sleepmgr_locks+0x1>
    4c92:	81 11       	cpse	r24, r1
    4c94:	01 c0       	rjmp	.+2      	; 0x4c98 <dma_disable+0x20>
    4c96:	ff cf       	rjmp	.-2      	; 0x4c96 <dma_disable+0x1e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4c98:	8f b7       	in	r24, 0x3f	; 63
    4c9a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4c9c:	f8 94       	cli
	return flags;
    4c9e:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    4ca0:	e7 e7       	ldi	r30, 0x77	; 119
    4ca2:	fe e2       	ldi	r31, 0x2E	; 46
    4ca4:	81 81       	ldd	r24, Z+1	; 0x01
    4ca6:	81 50       	subi	r24, 0x01	; 1
    4ca8:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4caa:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    4cac:	0f 90       	pop	r0
    4cae:	df 91       	pop	r29
    4cb0:	cf 91       	pop	r28
    4cb2:	08 95       	ret

00004cb4 <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    4cb4:	e8 2f       	mov	r30, r24
    4cb6:	f0 e0       	ldi	r31, 0x00	; 0
    4cb8:	ee 0f       	add	r30, r30
    4cba:	ff 1f       	adc	r31, r31
    4cbc:	ed 52       	subi	r30, 0x2D	; 45
    4cbe:	f2 4d       	sbci	r31, 0xD2	; 210
    4cc0:	60 83       	st	Z, r22
    4cc2:	71 83       	std	Z+1, r23	; 0x01
    4cc4:	08 95       	ret

00004cc6 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    4cc6:	1f 92       	push	r1
    4cc8:	0f 92       	push	r0
    4cca:	0f b6       	in	r0, 0x3f	; 63
    4ccc:	0f 92       	push	r0
    4cce:	11 24       	eor	r1, r1
    4cd0:	0b b6       	in	r0, 0x3b	; 59
    4cd2:	0f 92       	push	r0
    4cd4:	2f 93       	push	r18
    4cd6:	3f 93       	push	r19
    4cd8:	4f 93       	push	r20
    4cda:	5f 93       	push	r21
    4cdc:	6f 93       	push	r22
    4cde:	7f 93       	push	r23
    4ce0:	8f 93       	push	r24
    4ce2:	9f 93       	push	r25
    4ce4:	af 93       	push	r26
    4ce6:	bf 93       	push	r27
    4ce8:	ef 93       	push	r30
    4cea:	ff 93       	push	r31
	dma_interrupt(0);
    4cec:	80 e0       	ldi	r24, 0x00	; 0
    4cee:	42 df       	rcall	.-380    	; 0x4b74 <dma_interrupt>
}
    4cf0:	ff 91       	pop	r31
    4cf2:	ef 91       	pop	r30
    4cf4:	bf 91       	pop	r27
    4cf6:	af 91       	pop	r26
    4cf8:	9f 91       	pop	r25
    4cfa:	8f 91       	pop	r24
    4cfc:	7f 91       	pop	r23
    4cfe:	6f 91       	pop	r22
    4d00:	5f 91       	pop	r21
    4d02:	4f 91       	pop	r20
    4d04:	3f 91       	pop	r19
    4d06:	2f 91       	pop	r18
    4d08:	0f 90       	pop	r0
    4d0a:	0b be       	out	0x3b, r0	; 59
    4d0c:	0f 90       	pop	r0
    4d0e:	0f be       	out	0x3f, r0	; 63
    4d10:	0f 90       	pop	r0
    4d12:	1f 90       	pop	r1
    4d14:	18 95       	reti

00004d16 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    4d16:	1f 92       	push	r1
    4d18:	0f 92       	push	r0
    4d1a:	0f b6       	in	r0, 0x3f	; 63
    4d1c:	0f 92       	push	r0
    4d1e:	11 24       	eor	r1, r1
    4d20:	0b b6       	in	r0, 0x3b	; 59
    4d22:	0f 92       	push	r0
    4d24:	2f 93       	push	r18
    4d26:	3f 93       	push	r19
    4d28:	4f 93       	push	r20
    4d2a:	5f 93       	push	r21
    4d2c:	6f 93       	push	r22
    4d2e:	7f 93       	push	r23
    4d30:	8f 93       	push	r24
    4d32:	9f 93       	push	r25
    4d34:	af 93       	push	r26
    4d36:	bf 93       	push	r27
    4d38:	ef 93       	push	r30
    4d3a:	ff 93       	push	r31
	dma_interrupt(1);
    4d3c:	81 e0       	ldi	r24, 0x01	; 1
    4d3e:	1a df       	rcall	.-460    	; 0x4b74 <dma_interrupt>
}
    4d40:	ff 91       	pop	r31
    4d42:	ef 91       	pop	r30
    4d44:	bf 91       	pop	r27
    4d46:	af 91       	pop	r26
    4d48:	9f 91       	pop	r25
    4d4a:	8f 91       	pop	r24
    4d4c:	7f 91       	pop	r23
    4d4e:	6f 91       	pop	r22
    4d50:	5f 91       	pop	r21
    4d52:	4f 91       	pop	r20
    4d54:	3f 91       	pop	r19
    4d56:	2f 91       	pop	r18
    4d58:	0f 90       	pop	r0
    4d5a:	0b be       	out	0x3b, r0	; 59
    4d5c:	0f 90       	pop	r0
    4d5e:	0f be       	out	0x3f, r0	; 63
    4d60:	0f 90       	pop	r0
    4d62:	1f 90       	pop	r1
    4d64:	18 95       	reti

00004d66 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    4d66:	1f 92       	push	r1
    4d68:	0f 92       	push	r0
    4d6a:	0f b6       	in	r0, 0x3f	; 63
    4d6c:	0f 92       	push	r0
    4d6e:	11 24       	eor	r1, r1
    4d70:	0b b6       	in	r0, 0x3b	; 59
    4d72:	0f 92       	push	r0
    4d74:	2f 93       	push	r18
    4d76:	3f 93       	push	r19
    4d78:	4f 93       	push	r20
    4d7a:	5f 93       	push	r21
    4d7c:	6f 93       	push	r22
    4d7e:	7f 93       	push	r23
    4d80:	8f 93       	push	r24
    4d82:	9f 93       	push	r25
    4d84:	af 93       	push	r26
    4d86:	bf 93       	push	r27
    4d88:	ef 93       	push	r30
    4d8a:	ff 93       	push	r31
	dma_interrupt(2);
    4d8c:	82 e0       	ldi	r24, 0x02	; 2
    4d8e:	f2 de       	rcall	.-540    	; 0x4b74 <dma_interrupt>
}
    4d90:	ff 91       	pop	r31
    4d92:	ef 91       	pop	r30
    4d94:	bf 91       	pop	r27
    4d96:	af 91       	pop	r26
    4d98:	9f 91       	pop	r25
    4d9a:	8f 91       	pop	r24
    4d9c:	7f 91       	pop	r23
    4d9e:	6f 91       	pop	r22
    4da0:	5f 91       	pop	r21
    4da2:	4f 91       	pop	r20
    4da4:	3f 91       	pop	r19
    4da6:	2f 91       	pop	r18
    4da8:	0f 90       	pop	r0
    4daa:	0b be       	out	0x3b, r0	; 59
    4dac:	0f 90       	pop	r0
    4dae:	0f be       	out	0x3f, r0	; 63
    4db0:	0f 90       	pop	r0
    4db2:	1f 90       	pop	r1
    4db4:	18 95       	reti

00004db6 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    4db6:	1f 92       	push	r1
    4db8:	0f 92       	push	r0
    4dba:	0f b6       	in	r0, 0x3f	; 63
    4dbc:	0f 92       	push	r0
    4dbe:	11 24       	eor	r1, r1
    4dc0:	0b b6       	in	r0, 0x3b	; 59
    4dc2:	0f 92       	push	r0
    4dc4:	2f 93       	push	r18
    4dc6:	3f 93       	push	r19
    4dc8:	4f 93       	push	r20
    4dca:	5f 93       	push	r21
    4dcc:	6f 93       	push	r22
    4dce:	7f 93       	push	r23
    4dd0:	8f 93       	push	r24
    4dd2:	9f 93       	push	r25
    4dd4:	af 93       	push	r26
    4dd6:	bf 93       	push	r27
    4dd8:	ef 93       	push	r30
    4dda:	ff 93       	push	r31
	dma_interrupt(3);
    4ddc:	83 e0       	ldi	r24, 0x03	; 3
    4dde:	ca de       	rcall	.-620    	; 0x4b74 <dma_interrupt>
}
    4de0:	ff 91       	pop	r31
    4de2:	ef 91       	pop	r30
    4de4:	bf 91       	pop	r27
    4de6:	af 91       	pop	r26
    4de8:	9f 91       	pop	r25
    4dea:	8f 91       	pop	r24
    4dec:	7f 91       	pop	r23
    4dee:	6f 91       	pop	r22
    4df0:	5f 91       	pop	r21
    4df2:	4f 91       	pop	r20
    4df4:	3f 91       	pop	r19
    4df6:	2f 91       	pop	r18
    4df8:	0f 90       	pop	r0
    4dfa:	0b be       	out	0x3b, r0	; 59
    4dfc:	0f 90       	pop	r0
    4dfe:	0f be       	out	0x3f, r0	; 63
    4e00:	0f 90       	pop	r0
    4e02:	1f 90       	pop	r1
    4e04:	18 95       	reti

00004e06 <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    4e06:	cf 93       	push	r28
    4e08:	df 93       	push	r29
    4e0a:	1f 92       	push	r1
    4e0c:	cd b7       	in	r28, 0x3d	; 61
    4e0e:	de b7       	in	r29, 0x3e	; 62
    4e10:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    4e12:	e8 2f       	mov	r30, r24
    4e14:	f0 e0       	ldi	r31, 0x00	; 0
    4e16:	71 96       	adiw	r30, 0x11	; 17
    4e18:	e2 95       	swap	r30
    4e1a:	f2 95       	swap	r31
    4e1c:	f0 7f       	andi	r31, 0xF0	; 240
    4e1e:	fe 27       	eor	r31, r30
    4e20:	e0 7f       	andi	r30, 0xF0	; 240
    4e22:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4e24:	8f b7       	in	r24, 0x3f	; 63
    4e26:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4e28:	f8 94       	cli
	return flags;
    4e2a:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    4e2c:	19 96       	adiw	r26, 0x09	; 9
    4e2e:	8c 91       	ld	r24, X
    4e30:	19 97       	sbiw	r26, 0x09	; 9
    4e32:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    4e34:	1a 96       	adiw	r26, 0x0a	; 10
    4e36:	8c 91       	ld	r24, X
    4e38:	1a 97       	sbiw	r26, 0x0a	; 10
    4e3a:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    4e3c:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    4e3e:	17 96       	adiw	r26, 0x07	; 7
    4e40:	8c 91       	ld	r24, X
    4e42:	17 97       	sbiw	r26, 0x07	; 7
    4e44:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    4e46:	18 96       	adiw	r26, 0x08	; 8
    4e48:	8c 91       	ld	r24, X
    4e4a:	18 97       	sbiw	r26, 0x08	; 8
    4e4c:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    4e4e:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    4e50:	12 96       	adiw	r26, 0x02	; 2
    4e52:	8c 91       	ld	r24, X
    4e54:	12 97       	sbiw	r26, 0x02	; 2
    4e56:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    4e58:	13 96       	adiw	r26, 0x03	; 3
    4e5a:	8c 91       	ld	r24, X
    4e5c:	13 97       	sbiw	r26, 0x03	; 3
    4e5e:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    4e60:	14 96       	adiw	r26, 0x04	; 4
    4e62:	2d 91       	ld	r18, X+
    4e64:	3c 91       	ld	r19, X
    4e66:	15 97       	sbiw	r26, 0x05	; 5
    4e68:	24 83       	std	Z+4, r18	; 0x04
    4e6a:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    4e6c:	16 96       	adiw	r26, 0x06	; 6
    4e6e:	8c 91       	ld	r24, X
    4e70:	16 97       	sbiw	r26, 0x06	; 6
    4e72:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    4e74:	11 96       	adiw	r26, 0x01	; 1
    4e76:	8c 91       	ld	r24, X
    4e78:	11 97       	sbiw	r26, 0x01	; 1
    4e7a:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    4e7c:	8c 91       	ld	r24, X
    4e7e:	8f 77       	andi	r24, 0x7F	; 127
    4e80:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4e82:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    4e84:	0f 90       	pop	r0
    4e86:	df 91       	pop	r29
    4e88:	cf 91       	pop	r28
    4e8a:	08 95       	ret

00004e8c <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    4e8c:	04 c0       	rjmp	.+8      	; 0x4e96 <__portable_avr_delay_cycles+0xa>
    4e8e:	61 50       	subi	r22, 0x01	; 1
    4e90:	71 09       	sbc	r23, r1
    4e92:	81 09       	sbc	r24, r1
    4e94:	91 09       	sbc	r25, r1
    4e96:	61 15       	cp	r22, r1
    4e98:	71 05       	cpc	r23, r1
    4e9a:	81 05       	cpc	r24, r1
    4e9c:	91 05       	cpc	r25, r1
    4e9e:	b9 f7       	brne	.-18     	; 0x4e8e <__portable_avr_delay_cycles+0x2>
    4ea0:	08 95       	ret

00004ea2 <rtc_get_time>:
    4ea2:	80 e1       	ldi	r24, 0x10	; 16
    4ea4:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    4ea8:	e0 e2       	ldi	r30, 0x20	; 32
    4eaa:	f4 e0       	ldi	r31, 0x04	; 4
    4eac:	81 81       	ldd	r24, Z+1	; 0x01
    4eae:	84 fd       	sbrc	r24, 4
    4eb0:	fd cf       	rjmp	.-6      	; 0x4eac <rtc_get_time+0xa>
    4eb2:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    4eb6:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    4eba:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    4ebe:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    4ec2:	08 95       	ret

00004ec4 <rtc_set_alarm>:
    4ec4:	e0 e2       	ldi	r30, 0x20	; 32
    4ec6:	f4 e0       	ldi	r31, 0x04	; 4
    4ec8:	24 e0       	ldi	r18, 0x04	; 4
    4eca:	22 83       	std	Z+2, r18	; 0x02
    4ecc:	64 87       	std	Z+12, r22	; 0x0c
    4ece:	75 87       	std	Z+13, r23	; 0x0d
    4ed0:	86 87       	std	Z+14, r24	; 0x0e
    4ed2:	97 87       	std	Z+15, r25	; 0x0f
    4ed4:	82 e0       	ldi	r24, 0x02	; 2
    4ed6:	83 83       	std	Z+3, r24	; 0x03
    4ed8:	08 95       	ret

00004eda <rtc_set_callback>:
    4eda:	80 93 db 2d 	sts	0x2DDB, r24	; 0x802ddb <rtc_data>
    4ede:	90 93 dc 2d 	sts	0x2DDC, r25	; 0x802ddc <rtc_data+0x1>
    4ee2:	08 95       	ret

00004ee4 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    4ee4:	cf 93       	push	r28
    4ee6:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    4ee8:	64 e0       	ldi	r22, 0x04	; 4
    4eea:	80 e0       	ldi	r24, 0x00	; 0
    4eec:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    4ef0:	c0 ef       	ldi	r28, 0xF0	; 240
    4ef2:	d0 e0       	ldi	r29, 0x00	; 0
    4ef4:	88 81       	ld	r24, Y
    4ef6:	82 60       	ori	r24, 0x02	; 2
    4ef8:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    4efa:	61 e0       	ldi	r22, 0x01	; 1
    4efc:	80 ef       	ldi	r24, 0xF0	; 240
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	0e 94 bd 79 	call	0xf37a	; 0xf37a <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    4f04:	88 81       	ld	r24, Y
    4f06:	84 60       	ori	r24, 0x04	; 4
    4f08:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    4f0a:	69 ee       	ldi	r22, 0xE9	; 233
    4f0c:	73 e0       	ldi	r23, 0x03	; 3
    4f0e:	80 e0       	ldi	r24, 0x00	; 0
    4f10:	90 e0       	ldi	r25, 0x00	; 0
    4f12:	bc df       	rcall	.-136    	; 0x4e8c <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    4f14:	88 81       	ld	r24, Y
    4f16:	88 61       	ori	r24, 0x18	; 24
    4f18:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    4f1a:	e0 ef       	ldi	r30, 0xF0	; 240
    4f1c:	f0 e0       	ldi	r31, 0x00	; 0
    4f1e:	81 81       	ldd	r24, Z+1	; 0x01
    4f20:	83 ff       	sbrs	r24, 3
    4f22:	fd cf       	rjmp	.-6      	; 0x4f1e <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    4f24:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4f28:	e0 e2       	ldi	r30, 0x20	; 32
    4f2a:	f4 e0       	ldi	r31, 0x04	; 4
    4f2c:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    4f2e:	80 fd       	sbrc	r24, 0
    4f30:	fd cf       	rjmp	.-6      	; 0x4f2c <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    4f32:	e0 e2       	ldi	r30, 0x20	; 32
    4f34:	f4 e0       	ldi	r31, 0x04	; 4
    4f36:	8f ef       	ldi	r24, 0xFF	; 255
    4f38:	9f ef       	ldi	r25, 0xFF	; 255
    4f3a:	dc 01       	movw	r26, r24
    4f3c:	80 87       	std	Z+8, r24	; 0x08
    4f3e:	91 87       	std	Z+9, r25	; 0x09
    4f40:	a2 87       	std	Z+10, r26	; 0x0a
    4f42:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    4f44:	14 82       	std	Z+4, r1	; 0x04
    4f46:	15 82       	std	Z+5, r1	; 0x05
    4f48:	16 82       	std	Z+6, r1	; 0x06
    4f4a:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4f4c:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    4f4e:	80 fd       	sbrc	r24, 0
    4f50:	fd cf       	rjmp	.-6      	; 0x4f4c <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    4f52:	e0 e2       	ldi	r30, 0x20	; 32
    4f54:	f4 e0       	ldi	r31, 0x04	; 4
    4f56:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    4f58:	81 e0       	ldi	r24, 0x01	; 1
    4f5a:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4f5c:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    4f5e:	80 fd       	sbrc	r24, 0
    4f60:	fd cf       	rjmp	.-6      	; 0x4f5c <rtc_init+0x78>
}
    4f62:	df 91       	pop	r29
    4f64:	cf 91       	pop	r28
    4f66:	08 95       	ret

00004f68 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    4f68:	1f 92       	push	r1
    4f6a:	0f 92       	push	r0
    4f6c:	0f b6       	in	r0, 0x3f	; 63
    4f6e:	0f 92       	push	r0
    4f70:	11 24       	eor	r1, r1
    4f72:	0b b6       	in	r0, 0x3b	; 59
    4f74:	0f 92       	push	r0
    4f76:	2f 93       	push	r18
    4f78:	3f 93       	push	r19
    4f7a:	4f 93       	push	r20
    4f7c:	5f 93       	push	r21
    4f7e:	6f 93       	push	r22
    4f80:	7f 93       	push	r23
    4f82:	8f 93       	push	r24
    4f84:	9f 93       	push	r25
    4f86:	af 93       	push	r26
    4f88:	bf 93       	push	r27
    4f8a:	cf 93       	push	r28
    4f8c:	df 93       	push	r29
    4f8e:	ef 93       	push	r30
    4f90:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    4f92:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    4f96:	c0 91 db 2d 	lds	r28, 0x2DDB	; 0x802ddb <rtc_data>
    4f9a:	d0 91 dc 2d 	lds	r29, 0x2DDC	; 0x802ddc <rtc_data+0x1>
    4f9e:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    4fa0:	19 f0       	breq	.+6      	; 0x4fa8 <__vector_11+0x40>
    4fa2:	7f df       	rcall	.-258    	; 0x4ea2 <rtc_get_time>
    4fa4:	fe 01       	movw	r30, r28
}
    4fa6:	19 95       	eicall
    4fa8:	ff 91       	pop	r31
    4faa:	ef 91       	pop	r30
    4fac:	df 91       	pop	r29
    4fae:	cf 91       	pop	r28
    4fb0:	bf 91       	pop	r27
    4fb2:	af 91       	pop	r26
    4fb4:	9f 91       	pop	r25
    4fb6:	8f 91       	pop	r24
    4fb8:	7f 91       	pop	r23
    4fba:	6f 91       	pop	r22
    4fbc:	5f 91       	pop	r21
    4fbe:	4f 91       	pop	r20
    4fc0:	3f 91       	pop	r19
    4fc2:	2f 91       	pop	r18
    4fc4:	0f 90       	pop	r0
    4fc6:	0b be       	out	0x3b, r0	; 59
    4fc8:	0f 90       	pop	r0
    4fca:	0f be       	out	0x3f, r0	; 63
    4fcc:	0f 90       	pop	r0
    4fce:	1f 90       	pop	r1
    4fd0:	18 95       	reti

00004fd2 <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* SINE LUT */
	uint16_t left_x, rght_x, left_y, rght_y;
	rght_x = left_x = phase >> 4;
    4fd2:	fc 01       	movw	r30, r24
    4fd4:	f2 95       	swap	r31
    4fd6:	e2 95       	swap	r30
    4fd8:	ef 70       	andi	r30, 0x0F	; 15
    4fda:	ef 27       	eor	r30, r31
    4fdc:	ff 70       	andi	r31, 0x0F	; 15
    4fde:	ef 27       	eor	r30, r31
	if (++rght_x >= PM_SINE_COUNT) {
    4fe0:	9f 01       	movw	r18, r30
    4fe2:	2f 5f       	subi	r18, 0xFF	; 255
    4fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    4fe6:	21 15       	cp	r18, r1
    4fe8:	40 e1       	ldi	r20, 0x10	; 16
    4fea:	34 07       	cpc	r19, r20
    4fec:	08 f0       	brcs	.+2      	; 0x4ff0 <get_interpolated_sine+0x1e>
		rght_x -= PM_SINE_COUNT;
    4fee:	30 51       	subi	r19, 0x10	; 16
	}
	left_y = PGM_READ_WORD(&(PM_SINE[left_x]));
    4ff0:	ee 0f       	add	r30, r30
    4ff2:	ff 1f       	adc	r31, r31
    4ff4:	e4 54       	subi	r30, 0x44	; 68
    4ff6:	f2 4f       	sbci	r31, 0xF2	; 242
    4ff8:	45 91       	lpm	r20, Z+
    4ffa:	54 91       	lpm	r21, Z
	rght_y = PGM_READ_WORD(&(PM_SINE[rght_x]));
    4ffc:	f9 01       	movw	r30, r18
    4ffe:	ee 0f       	add	r30, r30
    5000:	ff 1f       	adc	r31, r31
    5002:	e4 54       	subi	r30, 0x44	; 68
    5004:	f2 4f       	sbci	r31, 0xF2	; 242
    5006:	25 91       	lpm	r18, Z+
    5008:	34 91       	lpm	r19, Z

	/* INTERPOLATION LUT */
	uint16_t idx_y	= (uint16_t)((uint32_t)PM_SINE_MAX_STEP + rght_y - left_y);		// PM_SINE_MAX_STEP = +/-50
	uint16_t idx	= (idx_y << 4) | (phase & 0x0f);
	return left_y + (int8_t)PGM_READ_BYTE(&(PM_SINE_IP[idx]));
    500a:	f9 01       	movw	r30, r18
    500c:	f4 96       	adiw	r30, 0x34	; 52
    500e:	e4 1b       	sub	r30, r20
    5010:	f5 0b       	sbc	r31, r21
    5012:	e2 95       	swap	r30
    5014:	f2 95       	swap	r31
    5016:	f0 7f       	andi	r31, 0xF0	; 240
    5018:	fe 27       	eor	r31, r30
    501a:	e0 7f       	andi	r30, 0xF0	; 240
    501c:	fe 27       	eor	r31, r30
    501e:	8f 70       	andi	r24, 0x0F	; 15
    5020:	99 27       	eor	r25, r25
    5022:	e8 2b       	or	r30, r24
    5024:	f9 2b       	or	r31, r25
    5026:	e4 5c       	subi	r30, 0xC4	; 196
    5028:	f8 4f       	sbci	r31, 0xF8	; 248
    502a:	e4 91       	lpm	r30, Z
}
    502c:	ca 01       	movw	r24, r20
    502e:	8e 0f       	add	r24, r30
    5030:	91 1d       	adc	r25, r1
    5032:	e7 fd       	sbrc	r30, 7
    5034:	9a 95       	dec	r25
    5036:	08 95       	ret

00005038 <printHelp>:

void printHelp(void)
{
	static bool s_again = false;

	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HDR_1);
    5038:	8b ec       	ldi	r24, 0xCB	; 203
    503a:	90 e3       	ldi	r25, 0x30	; 48
    503c:	9f 93       	push	r25
    503e:	8f 93       	push	r24
    5040:	1f 92       	push	r1
    5042:	80 e4       	ldi	r24, 0x40	; 64
    5044:	8f 93       	push	r24
    5046:	8b e3       	ldi	r24, 0x3B	; 59
    5048:	95 e2       	ldi	r25, 0x25	; 37
    504a:	9f 93       	push	r25
    504c:	8f 93       	push	r24
    504e:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5052:	81 34       	cpi	r24, 0x41	; 65
    5054:	91 05       	cpc	r25, r1
    5056:	10 f0       	brcs	.+4      	; 0x505c <printHelp+0x24>
    5058:	80 e4       	ldi	r24, 0x40	; 64
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	40 e0       	ldi	r20, 0x00	; 0
    505e:	68 2f       	mov	r22, r24
    5060:	8b e3       	ldi	r24, 0x3B	; 59
    5062:	95 e2       	ldi	r25, 0x25	; 37
    5064:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HDR_2);
    5068:	8c ea       	ldi	r24, 0xAC	; 172
    506a:	90 e3       	ldi	r25, 0x30	; 48
    506c:	9f 93       	push	r25
    506e:	8f 93       	push	r24
    5070:	1f 92       	push	r1
    5072:	80 e4       	ldi	r24, 0x40	; 64
    5074:	8f 93       	push	r24
    5076:	8b e3       	ldi	r24, 0x3B	; 59
    5078:	95 e2       	ldi	r25, 0x25	; 37
    507a:	9f 93       	push	r25
    507c:	8f 93       	push	r24
    507e:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5082:	81 34       	cpi	r24, 0x41	; 65
    5084:	91 05       	cpc	r25, r1
    5086:	10 f0       	brcs	.+4      	; 0x508c <printHelp+0x54>
    5088:	80 e4       	ldi	r24, 0x40	; 64
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	40 e0       	ldi	r20, 0x00	; 0
    508e:	68 2f       	mov	r22, r24
    5090:	8b e3       	ldi	r24, 0x3B	; 59
    5092:	95 e2       	ldi	r25, 0x25	; 37
    5094:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_ADC_1);
    5098:	8a e8       	ldi	r24, 0x8A	; 138
    509a:	90 e3       	ldi	r25, 0x30	; 48
    509c:	9f 93       	push	r25
    509e:	8f 93       	push	r24
    50a0:	1f 92       	push	r1
    50a2:	80 e4       	ldi	r24, 0x40	; 64
    50a4:	8f 93       	push	r24
    50a6:	8b e3       	ldi	r24, 0x3B	; 59
    50a8:	95 e2       	ldi	r25, 0x25	; 37
    50aa:	9f 93       	push	r25
    50ac:	8f 93       	push	r24
    50ae:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    50b2:	81 34       	cpi	r24, 0x41	; 65
    50b4:	91 05       	cpc	r25, r1
    50b6:	10 f0       	brcs	.+4      	; 0x50bc <printHelp+0x84>
    50b8:	80 e4       	ldi	r24, 0x40	; 64
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	40 e0       	ldi	r20, 0x00	; 0
    50be:	68 2f       	mov	r22, r24
    50c0:	8b e3       	ldi	r24, 0x3B	; 59
    50c2:	95 e2       	ldi	r25, 0x25	; 37
    50c4:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_ADC_2);
    50c8:	8f e6       	ldi	r24, 0x6F	; 111
    50ca:	90 e3       	ldi	r25, 0x30	; 48
    50cc:	9f 93       	push	r25
    50ce:	8f 93       	push	r24
    50d0:	1f 92       	push	r1
    50d2:	80 e4       	ldi	r24, 0x40	; 64
    50d4:	8f 93       	push	r24
    50d6:	8b e3       	ldi	r24, 0x3B	; 59
    50d8:	95 e2       	ldi	r25, 0x25	; 37
    50da:	9f 93       	push	r25
    50dc:	8f 93       	push	r24
    50de:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    50e2:	81 34       	cpi	r24, 0x41	; 65
    50e4:	91 05       	cpc	r25, r1
    50e6:	10 f0       	brcs	.+4      	; 0x50ec <printHelp+0xb4>
    50e8:	80 e4       	ldi	r24, 0x40	; 64
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	40 e0       	ldi	r20, 0x00	; 0
    50ee:	68 2f       	mov	r22, r24
    50f0:	8b e3       	ldi	r24, 0x3B	; 59
    50f2:	95 e2       	ldi	r25, 0x25	; 37
    50f4:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_AT_1);
    50f8:	8f e4       	ldi	r24, 0x4F	; 79
    50fa:	90 e3       	ldi	r25, 0x30	; 48
    50fc:	9f 93       	push	r25
    50fe:	8f 93       	push	r24
    5100:	1f 92       	push	r1
    5102:	80 e4       	ldi	r24, 0x40	; 64
    5104:	8f 93       	push	r24
    5106:	8b e3       	ldi	r24, 0x3B	; 59
    5108:	95 e2       	ldi	r25, 0x25	; 37
    510a:	9f 93       	push	r25
    510c:	8f 93       	push	r24
    510e:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5112:	81 34       	cpi	r24, 0x41	; 65
    5114:	91 05       	cpc	r25, r1
    5116:	10 f0       	brcs	.+4      	; 0x511c <printHelp+0xe4>
    5118:	80 e4       	ldi	r24, 0x40	; 64
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	40 e0       	ldi	r20, 0x00	; 0
    511e:	68 2f       	mov	r22, r24
    5120:	8b e3       	ldi	r24, 0x3B	; 59
    5122:	95 e2       	ldi	r25, 0x25	; 37
    5124:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BIAS_1);
    5128:	84 e3       	ldi	r24, 0x34	; 52
    512a:	90 e3       	ldi	r25, 0x30	; 48
    512c:	9f 93       	push	r25
    512e:	8f 93       	push	r24
    5130:	1f 92       	push	r1
    5132:	80 e4       	ldi	r24, 0x40	; 64
    5134:	8f 93       	push	r24
    5136:	8b e3       	ldi	r24, 0x3B	; 59
    5138:	95 e2       	ldi	r25, 0x25	; 37
    513a:	9f 93       	push	r25
    513c:	8f 93       	push	r24
    513e:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5142:	2d b7       	in	r18, 0x3d	; 61
    5144:	3e b7       	in	r19, 0x3e	; 62
    5146:	2c 5d       	subi	r18, 0xDC	; 220
    5148:	3f 4f       	sbci	r19, 0xFF	; 255
    514a:	2d bf       	out	0x3d, r18	; 61
    514c:	3e bf       	out	0x3e, r19	; 62
    514e:	81 34       	cpi	r24, 0x41	; 65
    5150:	91 05       	cpc	r25, r1
    5152:	10 f0       	brcs	.+4      	; 0x5158 <printHelp+0x120>
    5154:	80 e4       	ldi	r24, 0x40	; 64
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	40 e0       	ldi	r20, 0x00	; 0
    515a:	68 2f       	mov	r22, r24
    515c:	8b e3       	ldi	r24, 0x3B	; 59
    515e:	95 e2       	ldi	r25, 0x25	; 37
    5160:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BIAS_2);
    5164:	81 e2       	ldi	r24, 0x21	; 33
    5166:	90 e3       	ldi	r25, 0x30	; 48
    5168:	9f 93       	push	r25
    516a:	8f 93       	push	r24
    516c:	1f 92       	push	r1
    516e:	80 e4       	ldi	r24, 0x40	; 64
    5170:	8f 93       	push	r24
    5172:	8b e3       	ldi	r24, 0x3B	; 59
    5174:	95 e2       	ldi	r25, 0x25	; 37
    5176:	9f 93       	push	r25
    5178:	8f 93       	push	r24
    517a:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    517e:	81 34       	cpi	r24, 0x41	; 65
    5180:	91 05       	cpc	r25, r1
    5182:	10 f0       	brcs	.+4      	; 0x5188 <printHelp+0x150>
    5184:	80 e4       	ldi	r24, 0x40	; 64
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	40 e0       	ldi	r20, 0x00	; 0
    518a:	68 2f       	mov	r22, r24
    518c:	8b e3       	ldi	r24, 0x3B	; 59
    518e:	95 e2       	ldi	r25, 0x25	; 37
    5190:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BL_1);
    5194:	85 e0       	ldi	r24, 0x05	; 5
    5196:	90 e3       	ldi	r25, 0x30	; 48
    5198:	9f 93       	push	r25
    519a:	8f 93       	push	r24
    519c:	1f 92       	push	r1
    519e:	80 e4       	ldi	r24, 0x40	; 64
    51a0:	8f 93       	push	r24
    51a2:	8b e3       	ldi	r24, 0x3B	; 59
    51a4:	95 e2       	ldi	r25, 0x25	; 37
    51a6:	9f 93       	push	r25
    51a8:	8f 93       	push	r24
    51aa:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    51ae:	81 34       	cpi	r24, 0x41	; 65
    51b0:	91 05       	cpc	r25, r1
    51b2:	10 f0       	brcs	.+4      	; 0x51b8 <printHelp+0x180>
    51b4:	80 e4       	ldi	r24, 0x40	; 64
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	40 e0       	ldi	r20, 0x00	; 0
    51ba:	68 2f       	mov	r22, r24
    51bc:	8b e3       	ldi	r24, 0x3B	; 59
    51be:	95 e2       	ldi	r25, 0x25	; 37
    51c0:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BL_2);
    51c4:	83 ee       	ldi	r24, 0xE3	; 227
    51c6:	9f e2       	ldi	r25, 0x2F	; 47
    51c8:	9f 93       	push	r25
    51ca:	8f 93       	push	r24
    51cc:	1f 92       	push	r1
    51ce:	80 e4       	ldi	r24, 0x40	; 64
    51d0:	8f 93       	push	r24
    51d2:	8b e3       	ldi	r24, 0x3B	; 59
    51d4:	95 e2       	ldi	r25, 0x25	; 37
    51d6:	9f 93       	push	r25
    51d8:	8f 93       	push	r24
    51da:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    51de:	81 34       	cpi	r24, 0x41	; 65
    51e0:	91 05       	cpc	r25, r1
    51e2:	10 f0       	brcs	.+4      	; 0x51e8 <printHelp+0x1b0>
    51e4:	80 e4       	ldi	r24, 0x40	; 64
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	40 e0       	ldi	r20, 0x00	; 0
    51ea:	68 2f       	mov	r22, r24
    51ec:	8b e3       	ldi	r24, 0x3B	; 59
    51ee:	95 e2       	ldi	r25, 0x25	; 37
    51f0:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DAC_1);
    51f4:	8a ec       	ldi	r24, 0xCA	; 202
    51f6:	9f e2       	ldi	r25, 0x2F	; 47
    51f8:	9f 93       	push	r25
    51fa:	8f 93       	push	r24
    51fc:	1f 92       	push	r1
    51fe:	80 e4       	ldi	r24, 0x40	; 64
    5200:	8f 93       	push	r24
    5202:	8b e3       	ldi	r24, 0x3B	; 59
    5204:	95 e2       	ldi	r25, 0x25	; 37
    5206:	9f 93       	push	r25
    5208:	8f 93       	push	r24
    520a:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    520e:	81 34       	cpi	r24, 0x41	; 65
    5210:	91 05       	cpc	r25, r1
    5212:	10 f0       	brcs	.+4      	; 0x5218 <printHelp+0x1e0>
    5214:	80 e4       	ldi	r24, 0x40	; 64
    5216:	90 e0       	ldi	r25, 0x00	; 0
    5218:	40 e0       	ldi	r20, 0x00	; 0
    521a:	68 2f       	mov	r22, r24
    521c:	8b e3       	ldi	r24, 0x3B	; 59
    521e:	95 e2       	ldi	r25, 0x25	; 37
    5220:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DAC_2);
    5224:	88 eb       	ldi	r24, 0xB8	; 184
    5226:	9f e2       	ldi	r25, 0x2F	; 47
    5228:	9f 93       	push	r25
    522a:	8f 93       	push	r24
    522c:	1f 92       	push	r1
    522e:	80 e4       	ldi	r24, 0x40	; 64
    5230:	8f 93       	push	r24
    5232:	8b e3       	ldi	r24, 0x3B	; 59
    5234:	95 e2       	ldi	r25, 0x25	; 37
    5236:	9f 93       	push	r25
    5238:	8f 93       	push	r24
    523a:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    523e:	81 34       	cpi	r24, 0x41	; 65
    5240:	91 05       	cpc	r25, r1
    5242:	10 f0       	brcs	.+4      	; 0x5248 <printHelp+0x210>
    5244:	80 e4       	ldi	r24, 0x40	; 64
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	40 e0       	ldi	r20, 0x00	; 0
    524a:	68 2f       	mov	r22, r24
    524c:	8b e3       	ldi	r24, 0x3B	; 59
    524e:	95 e2       	ldi	r25, 0x25	; 37
    5250:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_1);
    5254:	86 e9       	ldi	r24, 0x96	; 150
    5256:	9f e2       	ldi	r25, 0x2F	; 47
    5258:	9f 93       	push	r25
    525a:	8f 93       	push	r24
    525c:	1f 92       	push	r1
    525e:	80 e4       	ldi	r24, 0x40	; 64
    5260:	8f 93       	push	r24
    5262:	8b e3       	ldi	r24, 0x3B	; 59
    5264:	95 e2       	ldi	r25, 0x25	; 37
    5266:	9f 93       	push	r25
    5268:	8f 93       	push	r24
    526a:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    526e:	2d b7       	in	r18, 0x3d	; 61
    5270:	3e b7       	in	r19, 0x3e	; 62
    5272:	2c 5d       	subi	r18, 0xDC	; 220
    5274:	3f 4f       	sbci	r19, 0xFF	; 255
    5276:	2d bf       	out	0x3d, r18	; 61
    5278:	3e bf       	out	0x3e, r19	; 62
    527a:	81 34       	cpi	r24, 0x41	; 65
    527c:	91 05       	cpc	r25, r1
    527e:	10 f0       	brcs	.+4      	; 0x5284 <printHelp+0x24c>
    5280:	80 e4       	ldi	r24, 0x40	; 64
    5282:	90 e0       	ldi	r25, 0x00	; 0
    5284:	40 e0       	ldi	r20, 0x00	; 0
    5286:	68 2f       	mov	r22, r24
    5288:	8b e3       	ldi	r24, 0x3B	; 59
    528a:	95 e2       	ldi	r25, 0x25	; 37
    528c:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_2);
    5290:	88 e8       	ldi	r24, 0x88	; 136
    5292:	9f e2       	ldi	r25, 0x2F	; 47
    5294:	9f 93       	push	r25
    5296:	8f 93       	push	r24
    5298:	1f 92       	push	r1
    529a:	80 e4       	ldi	r24, 0x40	; 64
    529c:	8f 93       	push	r24
    529e:	8b e3       	ldi	r24, 0x3B	; 59
    52a0:	95 e2       	ldi	r25, 0x25	; 37
    52a2:	9f 93       	push	r25
    52a4:	8f 93       	push	r24
    52a6:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    52aa:	81 34       	cpi	r24, 0x41	; 65
    52ac:	91 05       	cpc	r25, r1
    52ae:	10 f0       	brcs	.+4      	; 0x52b4 <printHelp+0x27c>
    52b0:	80 e4       	ldi	r24, 0x40	; 64
    52b2:	90 e0       	ldi	r25, 0x00	; 0
    52b4:	40 e0       	ldi	r20, 0x00	; 0
    52b6:	68 2f       	mov	r22, r24
    52b8:	8b e3       	ldi	r24, 0x3B	; 59
    52ba:	95 e2       	ldi	r25, 0x25	; 37
    52bc:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_3);
    52c0:	83 e6       	ldi	r24, 0x63	; 99
    52c2:	9f e2       	ldi	r25, 0x2F	; 47
    52c4:	9f 93       	push	r25
    52c6:	8f 93       	push	r24
    52c8:	1f 92       	push	r1
    52ca:	80 e4       	ldi	r24, 0x40	; 64
    52cc:	8f 93       	push	r24
    52ce:	8b e3       	ldi	r24, 0x3B	; 59
    52d0:	95 e2       	ldi	r25, 0x25	; 37
    52d2:	9f 93       	push	r25
    52d4:	8f 93       	push	r24
    52d6:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    52da:	81 34       	cpi	r24, 0x41	; 65
    52dc:	91 05       	cpc	r25, r1
    52de:	10 f0       	brcs	.+4      	; 0x52e4 <printHelp+0x2ac>
    52e0:	80 e4       	ldi	r24, 0x40	; 64
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	40 e0       	ldi	r20, 0x00	; 0
    52e6:	68 2f       	mov	r22, r24
    52e8:	8b e3       	ldi	r24, 0x3B	; 59
    52ea:	95 e2       	ldi	r25, 0x25	; 37
    52ec:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_EB_1);
    52f0:	83 e4       	ldi	r24, 0x43	; 67
    52f2:	9f e2       	ldi	r25, 0x2F	; 47
    52f4:	9f 93       	push	r25
    52f6:	8f 93       	push	r24
    52f8:	1f 92       	push	r1
    52fa:	80 e4       	ldi	r24, 0x40	; 64
    52fc:	8f 93       	push	r24
    52fe:	8b e3       	ldi	r24, 0x3B	; 59
    5300:	95 e2       	ldi	r25, 0x25	; 37
    5302:	9f 93       	push	r25
    5304:	8f 93       	push	r24
    5306:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    530a:	81 34       	cpi	r24, 0x41	; 65
    530c:	91 05       	cpc	r25, r1
    530e:	10 f0       	brcs	.+4      	; 0x5314 <printHelp+0x2dc>
    5310:	80 e4       	ldi	r24, 0x40	; 64
    5312:	90 e0       	ldi	r25, 0x00	; 0
    5314:	40 e0       	ldi	r20, 0x00	; 0
    5316:	68 2f       	mov	r22, r24
    5318:	8b e3       	ldi	r24, 0x3B	; 59
    531a:	95 e2       	ldi	r25, 0x25	; 37
    531c:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HELP_1);
    5320:	86 e2       	ldi	r24, 0x26	; 38
    5322:	9f e2       	ldi	r25, 0x2F	; 47
    5324:	9f 93       	push	r25
    5326:	8f 93       	push	r24
    5328:	1f 92       	push	r1
    532a:	80 e4       	ldi	r24, 0x40	; 64
    532c:	8f 93       	push	r24
    532e:	8b e3       	ldi	r24, 0x3B	; 59
    5330:	95 e2       	ldi	r25, 0x25	; 37
    5332:	9f 93       	push	r25
    5334:	8f 93       	push	r24
    5336:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    533a:	81 34       	cpi	r24, 0x41	; 65
    533c:	91 05       	cpc	r25, r1
    533e:	10 f0       	brcs	.+4      	; 0x5344 <printHelp+0x30c>
    5340:	80 e4       	ldi	r24, 0x40	; 64
    5342:	90 e0       	ldi	r25, 0x00	; 0
    5344:	40 e0       	ldi	r20, 0x00	; 0
    5346:	68 2f       	mov	r22, r24
    5348:	8b e3       	ldi	r24, 0x3B	; 59
    534a:	95 e2       	ldi	r25, 0x25	; 37
    534c:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HELP_2);
    5350:	87 e0       	ldi	r24, 0x07	; 7
    5352:	9f e2       	ldi	r25, 0x2F	; 47
    5354:	9f 93       	push	r25
    5356:	8f 93       	push	r24
    5358:	1f 92       	push	r1
    535a:	80 e4       	ldi	r24, 0x40	; 64
    535c:	8f 93       	push	r24
    535e:	8b e3       	ldi	r24, 0x3B	; 59
    5360:	95 e2       	ldi	r25, 0x25	; 37
    5362:	9f 93       	push	r25
    5364:	8f 93       	push	r24
    5366:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    536a:	81 34       	cpi	r24, 0x41	; 65
    536c:	91 05       	cpc	r25, r1
    536e:	10 f0       	brcs	.+4      	; 0x5374 <printHelp+0x33c>
    5370:	80 e4       	ldi	r24, 0x40	; 64
    5372:	90 e0       	ldi	r25, 0x00	; 0
    5374:	40 e0       	ldi	r20, 0x00	; 0
    5376:	68 2f       	mov	r22, r24
    5378:	8b e3       	ldi	r24, 0x3B	; 59
    537a:	95 e2       	ldi	r25, 0x25	; 37
    537c:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_INFO_1);
    5380:	88 ee       	ldi	r24, 0xE8	; 232
    5382:	9e e2       	ldi	r25, 0x2E	; 46
    5384:	9f 93       	push	r25
    5386:	8f 93       	push	r24
    5388:	1f 92       	push	r1
    538a:	80 e4       	ldi	r24, 0x40	; 64
    538c:	8f 93       	push	r24
    538e:	8b e3       	ldi	r24, 0x3B	; 59
    5390:	95 e2       	ldi	r25, 0x25	; 37
    5392:	9f 93       	push	r25
    5394:	8f 93       	push	r24
    5396:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    539a:	2d b7       	in	r18, 0x3d	; 61
    539c:	3e b7       	in	r19, 0x3e	; 62
    539e:	2c 5d       	subi	r18, 0xDC	; 220
    53a0:	3f 4f       	sbci	r19, 0xFF	; 255
    53a2:	2d bf       	out	0x3d, r18	; 61
    53a4:	3e bf       	out	0x3e, r19	; 62
    53a6:	81 34       	cpi	r24, 0x41	; 65
    53a8:	91 05       	cpc	r25, r1
    53aa:	10 f0       	brcs	.+4      	; 0x53b0 <printHelp+0x378>
    53ac:	80 e4       	ldi	r24, 0x40	; 64
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	40 e0       	ldi	r20, 0x00	; 0
    53b2:	68 2f       	mov	r22, r24
    53b4:	8b e3       	ldi	r24, 0x3B	; 59
    53b6:	95 e2       	ldi	r25, 0x25	; 37
    53b8:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_INFO_2);
    53bc:	89 ed       	ldi	r24, 0xD9	; 217
    53be:	9e e2       	ldi	r25, 0x2E	; 46
    53c0:	9f 93       	push	r25
    53c2:	8f 93       	push	r24
    53c4:	1f 92       	push	r1
    53c6:	80 e4       	ldi	r24, 0x40	; 64
    53c8:	8f 93       	push	r24
    53ca:	8b e3       	ldi	r24, 0x3B	; 59
    53cc:	95 e2       	ldi	r25, 0x25	; 37
    53ce:	9f 93       	push	r25
    53d0:	8f 93       	push	r24
    53d2:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    53d6:	81 34       	cpi	r24, 0x41	; 65
    53d8:	91 05       	cpc	r25, r1
    53da:	10 f0       	brcs	.+4      	; 0x53e0 <printHelp+0x3a8>
    53dc:	80 e4       	ldi	r24, 0x40	; 64
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	40 e0       	ldi	r20, 0x00	; 0
    53e2:	68 2f       	mov	r22, r24
    53e4:	8b e3       	ldi	r24, 0x3B	; 59
    53e6:	95 e2       	ldi	r25, 0x25	; 37
    53e8:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_KB_1);
    53ec:	8b eb       	ldi	r24, 0xBB	; 187
    53ee:	9e e2       	ldi	r25, 0x2E	; 46
    53f0:	9f 93       	push	r25
    53f2:	8f 93       	push	r24
    53f4:	1f 92       	push	r1
    53f6:	80 e4       	ldi	r24, 0x40	; 64
    53f8:	8f 93       	push	r24
    53fa:	8b e3       	ldi	r24, 0x3B	; 59
    53fc:	95 e2       	ldi	r25, 0x25	; 37
    53fe:	9f 93       	push	r25
    5400:	8f 93       	push	r24
    5402:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5406:	81 34       	cpi	r24, 0x41	; 65
    5408:	91 05       	cpc	r25, r1
    540a:	10 f0       	brcs	.+4      	; 0x5410 <printHelp+0x3d8>
    540c:	80 e4       	ldi	r24, 0x40	; 64
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	40 e0       	ldi	r20, 0x00	; 0
    5412:	68 2f       	mov	r22, r24
    5414:	8b e3       	ldi	r24, 0x3B	; 59
    5416:	95 e2       	ldi	r25, 0x25	; 37
    5418:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_PT_1);
    541c:	82 ea       	ldi	r24, 0xA2	; 162
    541e:	9e e2       	ldi	r25, 0x2E	; 46
    5420:	9f 93       	push	r25
    5422:	8f 93       	push	r24
    5424:	1f 92       	push	r1
    5426:	80 e4       	ldi	r24, 0x40	; 64
    5428:	8f 93       	push	r24
    542a:	8b e3       	ldi	r24, 0x3B	; 59
    542c:	95 e2       	ldi	r25, 0x25	; 37
    542e:	9f 93       	push	r25
    5430:	8f 93       	push	r24
    5432:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5436:	81 34       	cpi	r24, 0x41	; 65
    5438:	91 05       	cpc	r25, r1
    543a:	10 f0       	brcs	.+4      	; 0x5440 <printHelp+0x408>
    543c:	80 e4       	ldi	r24, 0x40	; 64
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	40 e0       	ldi	r20, 0x00	; 0
    5442:	68 2f       	mov	r22, r24
    5444:	8b e3       	ldi	r24, 0x3B	; 59
    5446:	95 e2       	ldi	r25, 0x25	; 37
    5448:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_PT_2);
    544c:	83 e8       	ldi	r24, 0x83	; 131
    544e:	9e e2       	ldi	r25, 0x2E	; 46
    5450:	9f 93       	push	r25
    5452:	8f 93       	push	r24
    5454:	1f 92       	push	r1
    5456:	80 e4       	ldi	r24, 0x40	; 64
    5458:	8f 93       	push	r24
    545a:	8b e3       	ldi	r24, 0x3B	; 59
    545c:	95 e2       	ldi	r25, 0x25	; 37
    545e:	9f 93       	push	r25
    5460:	8f 93       	push	r24
    5462:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5466:	81 34       	cpi	r24, 0x41	; 65
    5468:	91 05       	cpc	r25, r1
    546a:	10 f0       	brcs	.+4      	; 0x5470 <printHelp+0x438>
    546c:	80 e4       	ldi	r24, 0x40	; 64
    546e:	90 e0       	ldi	r25, 0x00	; 0
    5470:	40 e0       	ldi	r20, 0x00	; 0
    5472:	68 2f       	mov	r22, r24
    5474:	8b e3       	ldi	r24, 0x3B	; 59
    5476:	95 e2       	ldi	r25, 0x25	; 37
    5478:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_RESET_1);
    547c:	8b e6       	ldi	r24, 0x6B	; 107
    547e:	9e e2       	ldi	r25, 0x2E	; 46
    5480:	9f 93       	push	r25
    5482:	8f 93       	push	r24
    5484:	1f 92       	push	r1
    5486:	80 e4       	ldi	r24, 0x40	; 64
    5488:	8f 93       	push	r24
    548a:	8b e3       	ldi	r24, 0x3B	; 59
    548c:	95 e2       	ldi	r25, 0x25	; 37
    548e:	9f 93       	push	r25
    5490:	8f 93       	push	r24
    5492:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5496:	81 34       	cpi	r24, 0x41	; 65
    5498:	91 05       	cpc	r25, r1
    549a:	10 f0       	brcs	.+4      	; 0x54a0 <printHelp+0x468>
    549c:	80 e4       	ldi	r24, 0x40	; 64
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	40 e0       	ldi	r20, 0x00	; 0
    54a2:	68 2f       	mov	r22, r24
    54a4:	8b e3       	ldi	r24, 0x3B	; 59
    54a6:	95 e2       	ldi	r25, 0x25	; 37
    54a8:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_XO_1);
    54ac:	87 e4       	ldi	r24, 0x47	; 71
    54ae:	9e e2       	ldi	r25, 0x2E	; 46
    54b0:	9f 93       	push	r25
    54b2:	8f 93       	push	r24
    54b4:	1f 92       	push	r1
    54b6:	80 e4       	ldi	r24, 0x40	; 64
    54b8:	8f 93       	push	r24
    54ba:	8b e3       	ldi	r24, 0x3B	; 59
    54bc:	95 e2       	ldi	r25, 0x25	; 37
    54be:	9f 93       	push	r25
    54c0:	8f 93       	push	r24
    54c2:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    54c6:	2d b7       	in	r18, 0x3d	; 61
    54c8:	3e b7       	in	r19, 0x3e	; 62
    54ca:	2c 5d       	subi	r18, 0xDC	; 220
    54cc:	3f 4f       	sbci	r19, 0xFF	; 255
    54ce:	2d bf       	out	0x3d, r18	; 61
    54d0:	3e bf       	out	0x3e, r19	; 62
    54d2:	81 34       	cpi	r24, 0x41	; 65
    54d4:	91 05       	cpc	r25, r1
    54d6:	10 f0       	brcs	.+4      	; 0x54dc <printHelp+0x4a4>
    54d8:	80 e4       	ldi	r24, 0x40	; 64
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	40 e0       	ldi	r20, 0x00	; 0
    54de:	68 2f       	mov	r22, r24
    54e0:	8b e3       	ldi	r24, 0x3B	; 59
    54e2:	95 e2       	ldi	r25, 0x25	; 37
    54e4:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_XO_2);
    54e8:	8a e3       	ldi	r24, 0x3A	; 58
    54ea:	9e e2       	ldi	r25, 0x2E	; 46
    54ec:	9f 93       	push	r25
    54ee:	8f 93       	push	r24
    54f0:	1f 92       	push	r1
    54f2:	80 e4       	ldi	r24, 0x40	; 64
    54f4:	8f 93       	push	r24
    54f6:	8b e3       	ldi	r24, 0x3B	; 59
    54f8:	95 e2       	ldi	r25, 0x25	; 37
    54fa:	9f 93       	push	r25
    54fc:	8f 93       	push	r24
    54fe:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5502:	81 34       	cpi	r24, 0x41	; 65
    5504:	91 05       	cpc	r25, r1
    5506:	10 f0       	brcs	.+4      	; 0x550c <printHelp+0x4d4>
    5508:	80 e4       	ldi	r24, 0x40	; 64
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	40 e0       	ldi	r20, 0x00	; 0
    550e:	68 2f       	mov	r22, r24
    5510:	8b e3       	ldi	r24, 0x3B	; 59
    5512:	95 e2       	ldi	r25, 0x25	; 37
    5514:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_NewLine);
    5518:	87 e3       	ldi	r24, 0x37	; 55
    551a:	9e e2       	ldi	r25, 0x2E	; 46
    551c:	9f 93       	push	r25
    551e:	8f 93       	push	r24
    5520:	1f 92       	push	r1
    5522:	80 e4       	ldi	r24, 0x40	; 64
    5524:	8f 93       	push	r24
    5526:	8b e3       	ldi	r24, 0x3B	; 59
    5528:	95 e2       	ldi	r25, 0x25	; 37
    552a:	9f 93       	push	r25
    552c:	8f 93       	push	r24
    552e:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5532:	81 34       	cpi	r24, 0x41	; 65
    5534:	91 05       	cpc	r25, r1
    5536:	10 f0       	brcs	.+4      	; 0x553c <printHelp+0x504>
    5538:	80 e4       	ldi	r24, 0x40	; 64
    553a:	90 e0       	ldi	r25, 0x00	; 0
    553c:	40 e0       	ldi	r20, 0x00	; 0
    553e:	68 2f       	mov	r22, r24
    5540:	8b e3       	ldi	r24, 0x3B	; 59
    5542:	95 e2       	ldi	r25, 0x25	; 37
    5544:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	if (!s_again) {
    5548:	8d b7       	in	r24, 0x3d	; 61
    554a:	9e b7       	in	r25, 0x3e	; 62
    554c:	0c 96       	adiw	r24, 0x0c	; 12
    554e:	8d bf       	out	0x3d, r24	; 61
    5550:	9e bf       	out	0x3e, r25	; 62
    5552:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <s_again.7714>
    5556:	81 11       	cpse	r24, r1
    5558:	21 c0       	rjmp	.+66     	; 0x559c <printHelp+0x564>
		s_again = true;
    555a:	81 e0       	ldi	r24, 0x01	; 1
    555c:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <s_again.7714>
		len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_CmdLine);
    5560:	82 e3       	ldi	r24, 0x32	; 50
    5562:	9e e2       	ldi	r25, 0x2E	; 46
    5564:	9f 93       	push	r25
    5566:	8f 93       	push	r24
    5568:	1f 92       	push	r1
    556a:	80 e4       	ldi	r24, 0x40	; 64
    556c:	8f 93       	push	r24
    556e:	8b e3       	ldi	r24, 0x3B	; 59
    5570:	95 e2       	ldi	r25, 0x25	; 37
    5572:	9f 93       	push	r25
    5574:	8f 93       	push	r24
    5576:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
		udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    557a:	81 34       	cpi	r24, 0x41	; 65
    557c:	91 05       	cpc	r25, r1
    557e:	10 f0       	brcs	.+4      	; 0x5584 <printHelp+0x54c>
    5580:	80 e4       	ldi	r24, 0x40	; 64
    5582:	90 e0       	ldi	r25, 0x00	; 0
    5584:	40 e0       	ldi	r20, 0x00	; 0
    5586:	68 2f       	mov	r22, r24
    5588:	8b e3       	ldi	r24, 0x3B	; 59
    558a:	95 e2       	ldi	r25, 0x25	; 37
    558c:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    5590:	0f 90       	pop	r0
    5592:	0f 90       	pop	r0
    5594:	0f 90       	pop	r0
    5596:	0f 90       	pop	r0
    5598:	0f 90       	pop	r0
    559a:	0f 90       	pop	r0
    559c:	08 95       	ret

0000559e <interpreter_doProcess>:
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
}


void interpreter_doProcess(char rx_buf[], iram_size_t rx_len)
{
    559e:	df 92       	push	r13
    55a0:	ef 92       	push	r14
    55a2:	ff 92       	push	r15
    55a4:	0f 93       	push	r16
    55a6:	1f 93       	push	r17
    55a8:	cf 93       	push	r28
    55aa:	df 93       	push	r29
    55ac:	cd b7       	in	r28, 0x3d	; 61
    55ae:	de b7       	in	r29, 0x3e	; 62
    55b0:	2c 97       	sbiw	r28, 0x0c	; 12
    55b2:	cd bf       	out	0x3d, r28	; 61
    55b4:	de bf       	out	0x3e, r29	; 62
    55b6:	7c 01       	movw	r14, r24
    55b8:	8b 01       	movw	r16, r22
	/* Sanity checks */
	if (!rx_buf || !rx_len || (rx_len >= (C_RX_CMDLINE_BUF_SIZE - 1))) {
    55ba:	89 2b       	or	r24, r25
    55bc:	09 f4       	brne	.+2      	; 0x55c0 <interpreter_doProcess+0x22>
    55be:	56 c2       	rjmp	.+1196   	; 0x5a6c <interpreter_doProcess+0x4ce>
    55c0:	cb 01       	movw	r24, r22
    55c2:	01 97       	sbiw	r24, 0x01	; 1
    55c4:	8e 3f       	cpi	r24, 0xFE	; 254
    55c6:	91 05       	cpc	r25, r1
    55c8:	08 f0       	brcs	.+2      	; 0x55cc <interpreter_doProcess+0x2e>
    55ca:	50 c2       	rjmp	.+1184   	; 0x5a6c <interpreter_doProcess+0x4ce>
		return;
	}

	/* Look for line termination */
	char* pos = memchr(rx_buf, '\r', rx_len);
    55cc:	ab 01       	movw	r20, r22
    55ce:	6d e0       	ldi	r22, 0x0D	; 13
    55d0:	70 e0       	ldi	r23, 0x00	; 0
    55d2:	c7 01       	movw	r24, r14
    55d4:	0e 94 b0 84 	call	0x10960	; 0x10960 <memchr>

	/* Clipping */
	if ((s_rx_cmdLine_idx + rx_len) >= C_RX_CMDLINE_BUF_SIZE) {
    55d8:	d0 90 d3 21 	lds	r13, 0x21D3	; 0x8021d3 <s_rx_cmdLine_idx>
    55dc:	2d 2d       	mov	r18, r13
    55de:	30 e0       	ldi	r19, 0x00	; 0
    55e0:	a8 01       	movw	r20, r16
    55e2:	42 0f       	add	r20, r18
    55e4:	53 1f       	adc	r21, r19
    55e6:	4f 3f       	cpi	r20, 0xFF	; 255
    55e8:	51 05       	cpc	r21, r1
    55ea:	51 f0       	breq	.+20     	; 0x5600 <interpreter_doProcess+0x62>
    55ec:	48 f0       	brcs	.+18     	; 0x5600 <interpreter_doProcess+0x62>
		/* Over sized - clip incoming data on the buffer size limit */
		rx_len = (C_RX_CMDLINE_BUF_SIZE - 1) - s_rx_cmdLine_idx;
    55ee:	0f ef       	ldi	r16, 0xFF	; 255
    55f0:	10 e0       	ldi	r17, 0x00	; 0
    55f2:	0d 19       	sub	r16, r13
    55f4:	11 09       	sbc	r17, r1

		/* Adjust pos if the line ending exists */
		if (pos) {
    55f6:	89 2b       	or	r24, r25
    55f8:	f9 f0       	breq	.+62     	; 0x5638 <interpreter_doProcess+0x9a>
			pos = rx_buf + rx_len;
    55fa:	c7 01       	movw	r24, r14
    55fc:	80 0f       	add	r24, r16
    55fe:	91 1f       	adc	r25, r17
		}
	}

	/* Add new chunk to buffer */
	uint8_t pos_len = pos ?  ((pos - rx_buf) + 1) : rx_len;
    5600:	00 97       	sbiw	r24, 0x00	; 0
    5602:	d1 f0       	breq	.+52     	; 0x5638 <interpreter_doProcess+0x9a>
    5604:	8e 19       	sub	r24, r14
    5606:	9f 09       	sbc	r25, r15
    5608:	11 e0       	ldi	r17, 0x01	; 1
    560a:	18 0f       	add	r17, r24
	memcpy(s_rx_cmdLine_buf + s_rx_cmdLine_idx, rx_buf, pos_len);
    560c:	41 2f       	mov	r20, r17
    560e:	50 e0       	ldi	r21, 0x00	; 0
    5610:	b7 01       	movw	r22, r14
    5612:	c9 01       	movw	r24, r18
    5614:	8c 52       	subi	r24, 0x2C	; 44
    5616:	9e 4d       	sbci	r25, 0xDE	; 222
    5618:	0e 94 bd 84 	call	0x1097a	; 0x1097a <memcpy>
	s_rx_cmdLine_idx += pos_len;
    561c:	1d 0d       	add	r17, r13
    561e:	10 93 d3 21 	sts	0x21D3, r17	; 0x8021d3 <s_rx_cmdLine_idx>

static void executeCmdLine(char* cmdLine_buf, uint8_t cmdLine_len)
{
	/* Process command */
	{
		if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_adc, sizeof(PM_IP_CMD_adc) - 1)) {
    5622:	44 e0       	ldi	r20, 0x04	; 4
    5624:	50 e0       	ldi	r21, 0x00	; 0
    5626:	6d e2       	ldi	r22, 0x2D	; 45
    5628:	7e e2       	ldi	r23, 0x2E	; 46
    562a:	84 ed       	ldi	r24, 0xD4	; 212
    562c:	91 e2       	ldi	r25, 0x21	; 33
    562e:	0e 94 7d 84 	call	0x108fa	; 0x108fa <strncmp_P>
    5632:	89 2b       	or	r24, r25
    5634:	51 f5       	brne	.+84     	; 0x568a <interpreter_doProcess+0xec>
    5636:	0c c0       	rjmp	.+24     	; 0x5650 <interpreter_doProcess+0xb2>
		}
	}

	/* Add new chunk to buffer */
	uint8_t pos_len = pos ?  ((pos - rx_buf) + 1) : rx_len;
	memcpy(s_rx_cmdLine_buf + s_rx_cmdLine_idx, rx_buf, pos_len);
    5638:	a8 01       	movw	r20, r16
    563a:	55 27       	eor	r21, r21
    563c:	b7 01       	movw	r22, r14
    563e:	c9 01       	movw	r24, r18
    5640:	8c 52       	subi	r24, 0x2C	; 44
    5642:	9e 4d       	sbci	r25, 0xDE	; 222
    5644:	0e 94 bd 84 	call	0x1097a	; 0x1097a <memcpy>
	s_rx_cmdLine_idx += pos_len;
    5648:	0d 0d       	add	r16, r13
    564a:	00 93 d3 21 	sts	0x21D3, r16	; 0x8021d3 <s_rx_cmdLine_idx>
    564e:	0e c2       	rjmp	.+1052   	; 0x5a6c <interpreter_doProcess+0x4ce>
static void executeCmdLine(char* cmdLine_buf, uint8_t cmdLine_len)
{
	/* Process command */
	{
		if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_adc, sizeof(PM_IP_CMD_adc) - 1)) {
			int val[1] = { 0 };
    5650:	19 82       	std	Y+1, r1	; 0x01
    5652:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_adc) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5654:	ce 01       	movw	r24, r28
    5656:	01 96       	adiw	r24, 0x01	; 1
    5658:	7c 01       	movw	r14, r24
    565a:	00 e0       	ldi	r16, 0x00	; 0
    565c:	10 e0       	ldi	r17, 0x00	; 0
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	43 e0       	ldi	r20, 0x03	; 3
    5664:	50 e0       	ldi	r21, 0x00	; 0
    5666:	60 e0       	ldi	r22, 0x00	; 0
    5668:	70 e0       	ldi	r23, 0x00	; 0
    566a:	88 ed       	ldi	r24, 0xD8	; 216
    566c:	91 e2       	ldi	r25, 0x21	; 33
    566e:	0e 94 d2 65 	call	0xcba4	; 0xcba4 <myStringToVar>
    5672:	89 2b       	or	r24, r25
    5674:	09 f4       	brne	.+2      	; 0x5678 <interpreter_doProcess+0xda>
    5676:	da c1       	rjmp	.+948    	; 0x5a2c <interpreter_doProcess+0x48e>
				adc_app_enable(val[0]);
    5678:	81 e0       	ldi	r24, 0x01	; 1
    567a:	29 81       	ldd	r18, Y+1	; 0x01
    567c:	3a 81       	ldd	r19, Y+2	; 0x02
    567e:	23 2b       	or	r18, r19
    5680:	09 f4       	brne	.+2      	; 0x5684 <interpreter_doProcess+0xe6>
    5682:	80 e0       	ldi	r24, 0x00	; 0
    5684:	0e 94 72 66 	call	0xcce4	; 0xcce4 <adc_app_enable>
    5688:	d1 c1       	rjmp	.+930    	; 0x5a2c <interpreter_doProcess+0x48e>
			}

		} else if ((!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_AT,		sizeof(PM_IP_CMD_AT) - 1))		||
    568a:	42 e0       	ldi	r20, 0x02	; 2
    568c:	50 e0       	ldi	r21, 0x00	; 0
    568e:	6a e2       	ldi	r22, 0x2A	; 42
    5690:	7e e2       	ldi	r23, 0x2E	; 46
    5692:	84 ed       	ldi	r24, 0xD4	; 212
    5694:	91 e2       	ldi	r25, 0x21	; 33
    5696:	0e 94 65 84 	call	0x108ca	; 0x108ca <strncasecmp_P>
    569a:	89 2b       	or	r24, r25
    569c:	51 f0       	breq	.+20     	; 0x56b2 <interpreter_doProcess+0x114>
				   (!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_A_slash,	sizeof(PM_IP_CMD_A_slash) - 1))) {
    569e:	42 e0       	ldi	r20, 0x02	; 2
    56a0:	50 e0       	ldi	r21, 0x00	; 0
    56a2:	67 e2       	ldi	r22, 0x27	; 39
    56a4:	7e e2       	ldi	r23, 0x2E	; 46
    56a6:	84 ed       	ldi	r24, 0xD4	; 212
    56a8:	91 e2       	ldi	r25, 0x21	; 33
    56aa:	0e 94 65 84 	call	0x108ca	; 0x108ca <strncasecmp_P>
			int val[1] = { 0 };
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_adc) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
				adc_app_enable(val[0]);
			}

		} else if ((!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_AT,		sizeof(PM_IP_CMD_AT) - 1))		||
    56ae:	89 2b       	or	r24, r25
    56b0:	31 f4       	brne	.+12     	; 0x56be <interpreter_doProcess+0x120>
				   (!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_A_slash,	sizeof(PM_IP_CMD_A_slash) - 1))) {
				serial_sim808_send(cmdLine_buf, cmdLine_len);
    56b2:	61 2f       	mov	r22, r17
    56b4:	84 ed       	ldi	r24, 0xD4	; 212
    56b6:	91 e2       	ldi	r25, 0x21	; 33
    56b8:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <serial_sim808_send>
    56bc:	b7 c1       	rjmp	.+878    	; 0x5a2c <interpreter_doProcess+0x48e>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_bias, sizeof(PM_IP_CMD_bias) - 1)) {
    56be:	45 e0       	ldi	r20, 0x05	; 5
    56c0:	50 e0       	ldi	r21, 0x00	; 0
    56c2:	61 e2       	ldi	r22, 0x21	; 33
    56c4:	7e e2       	ldi	r23, 0x2E	; 46
    56c6:	84 ed       	ldi	r24, 0xD4	; 212
    56c8:	91 e2       	ldi	r25, 0x21	; 33
    56ca:	0e 94 7d 84 	call	0x108fa	; 0x108fa <strncmp_P>
    56ce:	89 2b       	or	r24, r25
    56d0:	c1 f4       	brne	.+48     	; 0x5702 <interpreter_doProcess+0x164>
			int val[1] = { 0 };
    56d2:	19 82       	std	Y+1, r1	; 0x01
    56d4:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_bias) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    56d6:	ce 01       	movw	r24, r28
    56d8:	01 96       	adiw	r24, 0x01	; 1
    56da:	7c 01       	movw	r14, r24
    56dc:	00 e0       	ldi	r16, 0x00	; 0
    56de:	10 e0       	ldi	r17, 0x00	; 0
    56e0:	20 e0       	ldi	r18, 0x00	; 0
    56e2:	30 e0       	ldi	r19, 0x00	; 0
    56e4:	43 e0       	ldi	r20, 0x03	; 3
    56e6:	50 e0       	ldi	r21, 0x00	; 0
    56e8:	60 e0       	ldi	r22, 0x00	; 0
    56ea:	70 e0       	ldi	r23, 0x00	; 0
    56ec:	89 ed       	ldi	r24, 0xD9	; 217
    56ee:	91 e2       	ldi	r25, 0x21	; 33
    56f0:	0e 94 d2 65 	call	0xcba4	; 0xcba4 <myStringToVar>
    56f4:	89 2b       	or	r24, r25
    56f6:	09 f4       	brne	.+2      	; 0x56fa <interpreter_doProcess+0x15c>
    56f8:	99 c1       	rjmp	.+818    	; 0x5a2c <interpreter_doProcess+0x48e>
				bias_update(val[0]);
    56fa:	89 81       	ldd	r24, Y+1	; 0x01
    56fc:	0e 94 b2 66 	call	0xcd64	; 0xcd64 <bias_update>
    5700:	95 c1       	rjmp	.+810    	; 0x5a2c <interpreter_doProcess+0x48e>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_bl, sizeof(PM_IP_CMD_bl) - 1)) {
    5702:	43 e0       	ldi	r20, 0x03	; 3
    5704:	50 e0       	ldi	r21, 0x00	; 0
    5706:	6d e1       	ldi	r22, 0x1D	; 29
    5708:	7e e2       	ldi	r23, 0x2E	; 46
    570a:	84 ed       	ldi	r24, 0xD4	; 212
    570c:	91 e2       	ldi	r25, 0x21	; 33
    570e:	0e 94 7d 84 	call	0x108fa	; 0x108fa <strncmp_P>
    5712:	89 2b       	or	r24, r25
    5714:	c9 f4       	brne	.+50     	; 0x5748 <interpreter_doProcess+0x1aa>
			int val[1] = { 0 };
    5716:	19 82       	std	Y+1, r1	; 0x01
    5718:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_bl) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    571a:	ce 01       	movw	r24, r28
    571c:	01 96       	adiw	r24, 0x01	; 1
    571e:	7c 01       	movw	r14, r24
    5720:	00 e0       	ldi	r16, 0x00	; 0
    5722:	10 e0       	ldi	r17, 0x00	; 0
    5724:	20 e0       	ldi	r18, 0x00	; 0
    5726:	30 e0       	ldi	r19, 0x00	; 0
    5728:	43 e0       	ldi	r20, 0x03	; 3
    572a:	50 e0       	ldi	r21, 0x00	; 0
    572c:	60 e0       	ldi	r22, 0x00	; 0
    572e:	70 e0       	ldi	r23, 0x00	; 0
    5730:	87 ed       	ldi	r24, 0xD7	; 215
    5732:	91 e2       	ldi	r25, 0x21	; 33
    5734:	0e 94 d2 65 	call	0xcba4	; 0xcba4 <myStringToVar>
    5738:	89 2b       	or	r24, r25
    573a:	09 f4       	brne	.+2      	; 0x573e <interpreter_doProcess+0x1a0>
    573c:	77 c1       	rjmp	.+750    	; 0x5a2c <interpreter_doProcess+0x48e>
				backlight_mode_pwm(val[0]);
    573e:	89 81       	ldd	r24, Y+1	; 0x01
    5740:	9a 81       	ldd	r25, Y+2	; 0x02
    5742:	0e 94 95 66 	call	0xcd2a	; 0xcd2a <backlight_mode_pwm>
    5746:	72 c1       	rjmp	.+740    	; 0x5a2c <interpreter_doProcess+0x48e>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_dac, sizeof(PM_IP_CMD_dac) - 1)) {
    5748:	44 e0       	ldi	r20, 0x04	; 4
    574a:	50 e0       	ldi	r21, 0x00	; 0
    574c:	68 e1       	ldi	r22, 0x18	; 24
    574e:	7e e2       	ldi	r23, 0x2E	; 46
    5750:	84 ed       	ldi	r24, 0xD4	; 212
    5752:	91 e2       	ldi	r25, 0x21	; 33
    5754:	0e 94 7d 84 	call	0x108fa	; 0x108fa <strncmp_P>
    5758:	89 2b       	or	r24, r25
    575a:	e9 f4       	brne	.+58     	; 0x5796 <interpreter_doProcess+0x1f8>
			int val[1] = { 0 };
    575c:	19 82       	std	Y+1, r1	; 0x01
    575e:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_dac) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5760:	ce 01       	movw	r24, r28
    5762:	01 96       	adiw	r24, 0x01	; 1
    5764:	7c 01       	movw	r14, r24
    5766:	00 e0       	ldi	r16, 0x00	; 0
    5768:	10 e0       	ldi	r17, 0x00	; 0
    576a:	20 e0       	ldi	r18, 0x00	; 0
    576c:	30 e0       	ldi	r19, 0x00	; 0
    576e:	43 e0       	ldi	r20, 0x03	; 3
    5770:	50 e0       	ldi	r21, 0x00	; 0
    5772:	60 e0       	ldi	r22, 0x00	; 0
    5774:	70 e0       	ldi	r23, 0x00	; 0
    5776:	88 ed       	ldi	r24, 0xD8	; 216
    5778:	91 e2       	ldi	r25, 0x21	; 33
    577a:	0e 94 d2 65 	call	0xcba4	; 0xcba4 <myStringToVar>
    577e:	89 2b       	or	r24, r25
    5780:	09 f4       	brne	.+2      	; 0x5784 <interpreter_doProcess+0x1e6>
    5782:	54 c1       	rjmp	.+680    	; 0x5a2c <interpreter_doProcess+0x48e>
				dac_app_enable(val[0]);
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	29 81       	ldd	r18, Y+1	; 0x01
    5788:	3a 81       	ldd	r19, Y+2	; 0x02
    578a:	23 2b       	or	r18, r19
    578c:	09 f4       	brne	.+2      	; 0x5790 <interpreter_doProcess+0x1f2>
    578e:	80 e0       	ldi	r24, 0x00	; 0
    5790:	0e 94 b8 66 	call	0xcd70	; 0xcd70 <dac_app_enable>
    5794:	4b c1       	rjmp	.+662    	; 0x5a2c <interpreter_doProcess+0x48e>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_dds, sizeof(PM_IP_CMD_dds) - 1)) {
    5796:	44 e0       	ldi	r20, 0x04	; 4
    5798:	50 e0       	ldi	r21, 0x00	; 0
    579a:	63 e1       	ldi	r22, 0x13	; 19
    579c:	7e e2       	ldi	r23, 0x2E	; 46
    579e:	84 ed       	ldi	r24, 0xD4	; 212
    57a0:	91 e2       	ldi	r25, 0x21	; 33
    57a2:	0e 94 7d 84 	call	0x108fa	; 0x108fa <strncmp_P>
    57a6:	89 2b       	or	r24, r25
    57a8:	51 f5       	brne	.+84     	; 0x57fe <interpreter_doProcess+0x260>
			float val[3] = { -1.f, -1.f, -1.f };
    57aa:	8c e0       	ldi	r24, 0x0C	; 12
    57ac:	e6 e2       	ldi	r30, 0x26	; 38
    57ae:	f1 e2       	ldi	r31, 0x21	; 33
    57b0:	de 01       	movw	r26, r28
    57b2:	11 96       	adiw	r26, 0x01	; 1
    57b4:	01 90       	ld	r0, Z+
    57b6:	0d 92       	st	X+, r0
    57b8:	8a 95       	dec	r24
    57ba:	e1 f7       	brne	.-8      	; 0x57b4 <interpreter_doProcess+0x216>
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_dds) - 1), MY_STRING_TO_VAR_FLOAT | (MY_STRING_TO_VAR_FLOAT << 2) | (MY_STRING_TO_VAR_FLOAT << 4), &(val[0]), NULL, NULL)) {
    57bc:	e1 2c       	mov	r14, r1
    57be:	f1 2c       	mov	r15, r1
    57c0:	00 e0       	ldi	r16, 0x00	; 0
    57c2:	10 e0       	ldi	r17, 0x00	; 0
    57c4:	9e 01       	movw	r18, r28
    57c6:	2f 5f       	subi	r18, 0xFF	; 255
    57c8:	3f 4f       	sbci	r19, 0xFF	; 255
    57ca:	45 e1       	ldi	r20, 0x15	; 21
    57cc:	50 e0       	ldi	r21, 0x00	; 0
    57ce:	60 e0       	ldi	r22, 0x00	; 0
    57d0:	70 e0       	ldi	r23, 0x00	; 0
    57d2:	88 ed       	ldi	r24, 0xD8	; 216
    57d4:	91 e2       	ldi	r25, 0x21	; 33
    57d6:	0e 94 d2 65 	call	0xcba4	; 0xcba4 <myStringToVar>
    57da:	89 2b       	or	r24, r25
    57dc:	09 f4       	brne	.+2      	; 0x57e0 <interpreter_doProcess+0x242>
    57de:	26 c1       	rjmp	.+588    	; 0x5a2c <interpreter_doProcess+0x48e>
				dds_update(val[0], val[1], val[2]);
    57e0:	e9 84       	ldd	r14, Y+9	; 0x09
    57e2:	fa 84       	ldd	r15, Y+10	; 0x0a
    57e4:	0b 85       	ldd	r16, Y+11	; 0x0b
    57e6:	1c 85       	ldd	r17, Y+12	; 0x0c
    57e8:	2d 81       	ldd	r18, Y+5	; 0x05
    57ea:	3e 81       	ldd	r19, Y+6	; 0x06
    57ec:	4f 81       	ldd	r20, Y+7	; 0x07
    57ee:	58 85       	ldd	r21, Y+8	; 0x08
    57f0:	69 81       	ldd	r22, Y+1	; 0x01
    57f2:	7a 81       	ldd	r23, Y+2	; 0x02
    57f4:	8b 81       	ldd	r24, Y+3	; 0x03
    57f6:	9c 81       	ldd	r25, Y+4	; 0x04
    57f8:	0e 94 4f 6a 	call	0xd49e	; 0xd49e <dds_update>
    57fc:	17 c1       	rjmp	.+558    	; 0x5a2c <interpreter_doProcess+0x48e>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_eb, sizeof(PM_IP_CMD_eb) - 1)) {
    57fe:	43 e0       	ldi	r20, 0x03	; 3
    5800:	50 e0       	ldi	r21, 0x00	; 0
    5802:	6f e0       	ldi	r22, 0x0F	; 15
    5804:	7e e2       	ldi	r23, 0x2E	; 46
    5806:	84 ed       	ldi	r24, 0xD4	; 212
    5808:	91 e2       	ldi	r25, 0x21	; 33
    580a:	0e 94 7d 84 	call	0x108fa	; 0x108fa <strncmp_P>
    580e:	89 2b       	or	r24, r25
    5810:	e9 f4       	brne	.+58     	; 0x584c <interpreter_doProcess+0x2ae>
			int val[1] = { 0 };
    5812:	19 82       	std	Y+1, r1	; 0x01
    5814:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_eb) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5816:	ce 01       	movw	r24, r28
    5818:	01 96       	adiw	r24, 0x01	; 1
    581a:	7c 01       	movw	r14, r24
    581c:	00 e0       	ldi	r16, 0x00	; 0
    581e:	10 e0       	ldi	r17, 0x00	; 0
    5820:	20 e0       	ldi	r18, 0x00	; 0
    5822:	30 e0       	ldi	r19, 0x00	; 0
    5824:	43 e0       	ldi	r20, 0x03	; 3
    5826:	50 e0       	ldi	r21, 0x00	; 0
    5828:	60 e0       	ldi	r22, 0x00	; 0
    582a:	70 e0       	ldi	r23, 0x00	; 0
    582c:	87 ed       	ldi	r24, 0xD7	; 215
    582e:	91 e2       	ldi	r25, 0x21	; 33
    5830:	0e 94 d2 65 	call	0xcba4	; 0xcba4 <myStringToVar>
    5834:	89 2b       	or	r24, r25
    5836:	09 f4       	brne	.+2      	; 0x583a <interpreter_doProcess+0x29c>
    5838:	f9 c0       	rjmp	.+498    	; 0x5a2c <interpreter_doProcess+0x48e>
				errorBeep_enable(val[0]);
    583a:	81 e0       	ldi	r24, 0x01	; 1
    583c:	29 81       	ldd	r18, Y+1	; 0x01
    583e:	3a 81       	ldd	r19, Y+2	; 0x02
    5840:	23 2b       	or	r18, r19
    5842:	09 f4       	brne	.+2      	; 0x5846 <interpreter_doProcess+0x2a8>
    5844:	80 e0       	ldi	r24, 0x00	; 0
    5846:	0e 94 08 67 	call	0xce10	; 0xce10 <errorBeep_enable>
    584a:	f0 c0       	rjmp	.+480    	; 0x5a2c <interpreter_doProcess+0x48e>
			}

		} else if (!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_help, sizeof(PM_IP_CMD_help) - 1)) {
    584c:	44 e0       	ldi	r20, 0x04	; 4
    584e:	50 e0       	ldi	r21, 0x00	; 0
    5850:	64 e0       	ldi	r22, 0x04	; 4
    5852:	7e e2       	ldi	r23, 0x2E	; 46
    5854:	84 ed       	ldi	r24, 0xD4	; 212
    5856:	91 e2       	ldi	r25, 0x21	; 33
    5858:	0e 94 65 84 	call	0x108ca	; 0x108ca <strncasecmp_P>
    585c:	89 2b       	or	r24, r25
			printHelp();
    585e:	11 f4       	brne	.+4      	; 0x5864 <interpreter_doProcess+0x2c6>
    5860:	eb db       	rcall	.-2090   	; 0x5038 <printHelp>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_info, sizeof(PM_IP_CMD_info) - 1)) {
    5862:	e4 c0       	rjmp	.+456    	; 0x5a2c <interpreter_doProcess+0x48e>
    5864:	45 e0       	ldi	r20, 0x05	; 5
    5866:	50 e0       	ldi	r21, 0x00	; 0
    5868:	69 e0       	ldi	r22, 0x09	; 9
    586a:	7e e2       	ldi	r23, 0x2E	; 46
    586c:	84 ed       	ldi	r24, 0xD4	; 212
    586e:	91 e2       	ldi	r25, 0x21	; 33
    5870:	0e 94 7d 84 	call	0x108fa	; 0x108fa <strncmp_P>
    5874:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5876:	c1 f4       	brne	.+48     	; 0x58a8 <interpreter_doProcess+0x30a>
    5878:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_info) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    587a:	1a 82       	std	Y+2, r1	; 0x02
    587c:	ce 01       	movw	r24, r28
    587e:	01 96       	adiw	r24, 0x01	; 1
    5880:	7c 01       	movw	r14, r24
    5882:	00 e0       	ldi	r16, 0x00	; 0
    5884:	10 e0       	ldi	r17, 0x00	; 0
    5886:	20 e0       	ldi	r18, 0x00	; 0
    5888:	30 e0       	ldi	r19, 0x00	; 0
    588a:	43 e0       	ldi	r20, 0x03	; 3
    588c:	50 e0       	ldi	r21, 0x00	; 0
    588e:	60 e0       	ldi	r22, 0x00	; 0
    5890:	70 e0       	ldi	r23, 0x00	; 0
    5892:	89 ed       	ldi	r24, 0xD9	; 217
    5894:	91 e2       	ldi	r25, 0x21	; 33
    5896:	0e 94 d2 65 	call	0xcba4	; 0xcba4 <myStringToVar>
    589a:	89 2b       	or	r24, r25
    589c:	09 f4       	brne	.+2      	; 0x58a0 <interpreter_doProcess+0x302>
				printStatusLines_bitfield(val[0]);
    589e:	c6 c0       	rjmp	.+396    	; 0x5a2c <interpreter_doProcess+0x48e>
    58a0:	89 81       	ldd	r24, Y+1	; 0x01
    58a2:	0e 94 11 67 	call	0xce22	; 0xce22 <printStatusLines_bitfield>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_kb, sizeof(PM_IP_CMD_kb) - 1)) {
    58a6:	c2 c0       	rjmp	.+388    	; 0x5a2c <interpreter_doProcess+0x48e>
    58a8:	43 e0       	ldi	r20, 0x03	; 3
    58aa:	50 e0       	ldi	r21, 0x00	; 0
    58ac:	60 e0       	ldi	r22, 0x00	; 0
    58ae:	7e e2       	ldi	r23, 0x2E	; 46
    58b0:	84 ed       	ldi	r24, 0xD4	; 212
    58b2:	91 e2       	ldi	r25, 0x21	; 33
    58b4:	0e 94 7d 84 	call	0x108fa	; 0x108fa <strncmp_P>
    58b8:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    58ba:	e9 f4       	brne	.+58     	; 0x58f6 <interpreter_doProcess+0x358>
    58bc:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_kb) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    58be:	1a 82       	std	Y+2, r1	; 0x02
    58c0:	ce 01       	movw	r24, r28
    58c2:	01 96       	adiw	r24, 0x01	; 1
    58c4:	7c 01       	movw	r14, r24
    58c6:	00 e0       	ldi	r16, 0x00	; 0
    58c8:	10 e0       	ldi	r17, 0x00	; 0
    58ca:	20 e0       	ldi	r18, 0x00	; 0
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	43 e0       	ldi	r20, 0x03	; 3
    58d0:	50 e0       	ldi	r21, 0x00	; 0
    58d2:	60 e0       	ldi	r22, 0x00	; 0
    58d4:	70 e0       	ldi	r23, 0x00	; 0
    58d6:	87 ed       	ldi	r24, 0xD7	; 215
    58d8:	91 e2       	ldi	r25, 0x21	; 33
    58da:	0e 94 d2 65 	call	0xcba4	; 0xcba4 <myStringToVar>
    58de:	89 2b       	or	r24, r25
    58e0:	09 f4       	brne	.+2      	; 0x58e4 <interpreter_doProcess+0x346>
				keyBeep_enable(val[0]);
    58e2:	a4 c0       	rjmp	.+328    	; 0x5a2c <interpreter_doProcess+0x48e>
    58e4:	81 e0       	ldi	r24, 0x01	; 1
    58e6:	29 81       	ldd	r18, Y+1	; 0x01
    58e8:	3a 81       	ldd	r19, Y+2	; 0x02
    58ea:	23 2b       	or	r18, r19
    58ec:	09 f4       	brne	.+2      	; 0x58f0 <interpreter_doProcess+0x352>
    58ee:	80 e0       	ldi	r24, 0x00	; 0
    58f0:	0e 94 0b 67 	call	0xce16	; 0xce16 <keyBeep_enable>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_pt, sizeof(PM_IP_CMD_pt) - 1)) {
    58f4:	9b c0       	rjmp	.+310    	; 0x5a2c <interpreter_doProcess+0x48e>
    58f6:	43 e0       	ldi	r20, 0x03	; 3
    58f8:	50 e0       	ldi	r21, 0x00	; 0
    58fa:	6c ef       	ldi	r22, 0xFC	; 252
    58fc:	7d e2       	ldi	r23, 0x2D	; 45
    58fe:	84 ed       	ldi	r24, 0xD4	; 212
    5900:	91 e2       	ldi	r25, 0x21	; 33
    5902:	0e 94 7d 84 	call	0x108fa	; 0x108fa <strncmp_P>
    5906:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5908:	c1 f4       	brne	.+48     	; 0x593a <interpreter_doProcess+0x39c>
    590a:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_pt) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    590c:	1a 82       	std	Y+2, r1	; 0x02
    590e:	ce 01       	movw	r24, r28
    5910:	01 96       	adiw	r24, 0x01	; 1
    5912:	7c 01       	movw	r14, r24
    5914:	00 e0       	ldi	r16, 0x00	; 0
    5916:	10 e0       	ldi	r17, 0x00	; 0
    5918:	20 e0       	ldi	r18, 0x00	; 0
    591a:	30 e0       	ldi	r19, 0x00	; 0
    591c:	43 e0       	ldi	r20, 0x03	; 3
    591e:	50 e0       	ldi	r21, 0x00	; 0
    5920:	60 e0       	ldi	r22, 0x00	; 0
    5922:	70 e0       	ldi	r23, 0x00	; 0
    5924:	87 ed       	ldi	r24, 0xD7	; 215
    5926:	91 e2       	ldi	r25, 0x21	; 33
    5928:	0e 94 d2 65 	call	0xcba4	; 0xcba4 <myStringToVar>
    592c:	89 2b       	or	r24, r25
    592e:	09 f4       	brne	.+2      	; 0x5932 <interpreter_doProcess+0x394>
				pitchTone_mode(val[0]);
    5930:	7d c0       	rjmp	.+250    	; 0x5a2c <interpreter_doProcess+0x48e>
    5932:	89 81       	ldd	r24, Y+1	; 0x01
    5934:	0e 94 0e 67 	call	0xce1c	; 0xce1c <pitchTone_mode>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_reset, sizeof(PM_IP_CMD_reset) - 1)) {
    5938:	79 c0       	rjmp	.+242    	; 0x5a2c <interpreter_doProcess+0x48e>
    593a:	46 e0       	ldi	r20, 0x06	; 6
    593c:	50 e0       	ldi	r21, 0x00	; 0
    593e:	65 ef       	ldi	r22, 0xF5	; 245
    5940:	7d e2       	ldi	r23, 0x2D	; 45
    5942:	84 ed       	ldi	r24, 0xD4	; 212
    5944:	91 e2       	ldi	r25, 0x21	; 33
    5946:	0e 94 7d 84 	call	0x108fa	; 0x108fa <strncmp_P>
    594a:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    594c:	01 f5       	brne	.+64     	; 0x598e <interpreter_doProcess+0x3f0>
    594e:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_reset) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5950:	1a 82       	std	Y+2, r1	; 0x02
    5952:	ce 01       	movw	r24, r28
    5954:	01 96       	adiw	r24, 0x01	; 1
    5956:	7c 01       	movw	r14, r24
    5958:	00 e0       	ldi	r16, 0x00	; 0
    595a:	10 e0       	ldi	r17, 0x00	; 0
    595c:	20 e0       	ldi	r18, 0x00	; 0
    595e:	30 e0       	ldi	r19, 0x00	; 0
    5960:	43 e0       	ldi	r20, 0x03	; 3
    5962:	50 e0       	ldi	r21, 0x00	; 0
    5964:	60 e0       	ldi	r22, 0x00	; 0
    5966:	70 e0       	ldi	r23, 0x00	; 0
    5968:	8a ed       	ldi	r24, 0xDA	; 218
    596a:	91 e2       	ldi	r25, 0x21	; 33
    596c:	0e 94 d2 65 	call	0xcba4	; 0xcba4 <myStringToVar>
    5970:	89 2b       	or	r24, r25
    5972:	09 f4       	brne	.+2      	; 0x5976 <interpreter_doProcess+0x3d8>
				if (val[0] == 1) {
    5974:	5b c0       	rjmp	.+182    	; 0x5a2c <interpreter_doProcess+0x48e>
    5976:	89 81       	ldd	r24, Y+1	; 0x01
    5978:	9a 81       	ldd	r25, Y+2	; 0x02
    597a:	01 97       	sbiw	r24, 0x01	; 1
    597c:	09 f0       	breq	.+2      	; 0x5980 <interpreter_doProcess+0x3e2>
					/* Terminate the USB connection */
					stdio_usb_disable();
    597e:	56 c0       	rjmp	.+172    	; 0x5a2c <interpreter_doProcess+0x48e>
    5980:	0e 94 11 77 	call	0xee22	; 0xee22 <stdio_usb_disable>
					udc_stop();
    5984:	0e 94 e6 73 	call	0xe7cc	; 0xe7cc <udc_stop>

					asm volatile(
    5988:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
						:
					);
				}
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_xo, sizeof(PM_IP_CMD_xo) - 1)) {
    598c:	4f c0       	rjmp	.+158    	; 0x5a2c <interpreter_doProcess+0x48e>
    598e:	43 e0       	ldi	r20, 0x03	; 3
    5990:	50 e0       	ldi	r21, 0x00	; 0
    5992:	61 ef       	ldi	r22, 0xF1	; 241
    5994:	7d e2       	ldi	r23, 0x2D	; 45
    5996:	84 ed       	ldi	r24, 0xD4	; 212
    5998:	91 e2       	ldi	r25, 0x21	; 33
    599a:	0e 94 7d 84 	call	0x108fa	; 0x108fa <strncmp_P>
    599e:	89 2b       	or	r24, r25
			long val[1] = { 0 };
    59a0:	e1 f4       	brne	.+56     	; 0x59da <interpreter_doProcess+0x43c>
    59a2:	19 82       	std	Y+1, r1	; 0x01
    59a4:	1a 82       	std	Y+2, r1	; 0x02
    59a6:	1b 82       	std	Y+3, r1	; 0x03
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_xo) - 1), MY_STRING_TO_VAR_LONG, NULL, &(val[0]), NULL)) {
    59a8:	1c 82       	std	Y+4, r1	; 0x04
    59aa:	e1 2c       	mov	r14, r1
    59ac:	f1 2c       	mov	r15, r1
    59ae:	8e 01       	movw	r16, r28
    59b0:	0f 5f       	subi	r16, 0xFF	; 255
    59b2:	1f 4f       	sbci	r17, 0xFF	; 255
    59b4:	20 e0       	ldi	r18, 0x00	; 0
    59b6:	30 e0       	ldi	r19, 0x00	; 0
    59b8:	42 e0       	ldi	r20, 0x02	; 2
    59ba:	50 e0       	ldi	r21, 0x00	; 0
    59bc:	60 e0       	ldi	r22, 0x00	; 0
    59be:	70 e0       	ldi	r23, 0x00	; 0
    59c0:	87 ed       	ldi	r24, 0xD7	; 215
    59c2:	91 e2       	ldi	r25, 0x21	; 33
    59c4:	0e 94 d2 65 	call	0xcba4	; 0xcba4 <myStringToVar>
    59c8:	89 2b       	or	r24, r25
				xoPwm_set(val[0]);
    59ca:	81 f1       	breq	.+96     	; 0x5a2c <interpreter_doProcess+0x48e>
    59cc:	69 81       	ldd	r22, Y+1	; 0x01
    59ce:	7a 81       	ldd	r23, Y+2	; 0x02
    59d0:	8b 81       	ldd	r24, Y+3	; 0x03
    59d2:	9c 81       	ldd	r25, Y+4	; 0x04
    59d4:	0e 94 1c 67 	call	0xce38	; 0xce38 <xoPwm_set>
			}

		} else {
			int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_UNKNOWN_01);
    59d8:	29 c0       	rjmp	.+82     	; 0x5a2c <interpreter_doProcess+0x48e>
    59da:	8c eb       	ldi	r24, 0xBC	; 188
    59dc:	9d e2       	ldi	r25, 0x2D	; 45
    59de:	9f 93       	push	r25
    59e0:	8f 93       	push	r24
    59e2:	1f 92       	push	r1
    59e4:	80 e4       	ldi	r24, 0x40	; 64
    59e6:	8f 93       	push	r24
    59e8:	8b e3       	ldi	r24, 0x3B	; 59
    59ea:	95 e2       	ldi	r25, 0x25	; 37
    59ec:	9f 93       	push	r25
    59ee:	8f 93       	push	r24
    59f0:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
			udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    59f4:	81 34       	cpi	r24, 0x41	; 65
    59f6:	91 05       	cpc	r25, r1
    59f8:	10 f0       	brcs	.+4      	; 0x59fe <interpreter_doProcess+0x460>
    59fa:	80 e4       	ldi	r24, 0x40	; 64
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	40 e0       	ldi	r20, 0x00	; 0
    5a00:	68 2f       	mov	r22, r24
    5a02:	8b e3       	ldi	r24, 0x3B	; 59
    5a04:	95 e2       	ldi	r25, 0x25	; 37
    5a06:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

			if (g_errorBeep_enable) {
    5a0a:	0f 90       	pop	r0
    5a0c:	0f 90       	pop	r0
    5a0e:	0f 90       	pop	r0
    5a10:	0f 90       	pop	r0
    5a12:	0f 90       	pop	r0
    5a14:	0f 90       	pop	r0
    5a16:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <g_errorBeep_enable>
    5a1a:	88 23       	and	r24, r24
				twi2_set_beep(100, 10);  // Bad sound
    5a1c:	39 f0       	breq	.+14     	; 0x5a2c <interpreter_doProcess+0x48e>
    5a1e:	6a e0       	ldi	r22, 0x0A	; 10
    5a20:	84 e6       	ldi	r24, 0x64	; 100
				yield_ms(125);
    5a22:	33 d7       	rcall	.+3686   	; 0x688a <twi2_set_beep>
    5a24:	8d e7       	ldi	r24, 0x7D	; 125
    5a26:	90 e0       	ldi	r25, 0x00	; 0
    5a28:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
			}
		}
	}

	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_CmdLine);
    5a2c:	82 e3       	ldi	r24, 0x32	; 50
    5a2e:	9e e2       	ldi	r25, 0x2E	; 46
    5a30:	9f 93       	push	r25
    5a32:	8f 93       	push	r24
    5a34:	1f 92       	push	r1
    5a36:	80 e4       	ldi	r24, 0x40	; 64
    5a38:	8f 93       	push	r24
    5a3a:	8b e3       	ldi	r24, 0x3B	; 59
    5a3c:	95 e2       	ldi	r25, 0x25	; 37
    5a3e:	9f 93       	push	r25
    5a40:	8f 93       	push	r24
    5a42:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5a46:	81 34       	cpi	r24, 0x41	; 65
    5a48:	91 05       	cpc	r25, r1
    5a4a:	10 f0       	brcs	.+4      	; 0x5a50 <interpreter_doProcess+0x4b2>
    5a4c:	80 e4       	ldi	r24, 0x40	; 64
    5a4e:	90 e0       	ldi	r25, 0x00	; 0
    5a50:	40 e0       	ldi	r20, 0x00	; 0
    5a52:	68 2f       	mov	r22, r24
    5a54:	8b e3       	ldi	r24, 0x3B	; 59
    5a56:	95 e2       	ldi	r25, 0x25	; 37
    5a58:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>

	/* Execute line */
	if (pos) {
		/* Feed interpreter with line data */
		executeCmdLine(s_rx_cmdLine_buf, s_rx_cmdLine_idx);
		s_rx_cmdLine_idx = 0;
    5a5c:	10 92 d3 21 	sts	0x21D3, r1	; 0x8021d3 <s_rx_cmdLine_idx>
    5a60:	0f 90       	pop	r0
    5a62:	0f 90       	pop	r0
    5a64:	0f 90       	pop	r0
    5a66:	0f 90       	pop	r0
    5a68:	0f 90       	pop	r0
	}
}
    5a6a:	0f 90       	pop	r0
    5a6c:	2c 96       	adiw	r28, 0x0c	; 12
    5a6e:	cd bf       	out	0x3d, r28	; 61
    5a70:	de bf       	out	0x3e, r29	; 62
    5a72:	df 91       	pop	r29
    5a74:	cf 91       	pop	r28
    5a76:	1f 91       	pop	r17
    5a78:	0f 91       	pop	r16
    5a7a:	ff 90       	pop	r15
    5a7c:	ef 90       	pop	r14
    5a7e:	df 90       	pop	r13
    5a80:	08 95       	ret

00005a82 <__portable_avr_delay_cycles>:
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
	twi2_m_data[0] = sprintf_P((char*)&(twi2_m_data[1]), fmt_P);
	twi2_packet.length = twi2_m_data[0] + 1;
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}
    5a82:	04 c0       	rjmp	.+8      	; 0x5a8c <__portable_avr_delay_cycles+0xa>
    5a84:	61 50       	subi	r22, 0x01	; 1
    5a86:	71 09       	sbc	r23, r1
    5a88:	81 09       	sbc	r24, r1
    5a8a:	91 09       	sbc	r25, r1
    5a8c:	61 15       	cp	r22, r1
    5a8e:	71 05       	cpc	r23, r1
    5a90:	81 05       	cpc	r24, r1
    5a92:	91 05       	cpc	r25, r1
    5a94:	b9 f7       	brne	.-18     	; 0x5a84 <__portable_avr_delay_cycles+0x2>
    5a96:	08 95       	ret

00005a98 <task_twi1_hygro>:
    5a98:	ff 92       	push	r15
    5a9a:	0f 93       	push	r16
    5a9c:	1f 93       	push	r17
    5a9e:	cf 93       	push	r28
    5aa0:	df 93       	push	r29
    5aa2:	00 d0       	rcall	.+0      	; 0x5aa4 <task_twi1_hygro+0xc>
    5aa4:	cd b7       	in	r28, 0x3d	; 61
    5aa6:	de b7       	in	r29, 0x3e	; 62
    5aa8:	8f b7       	in	r24, 0x3f	; 63
    5aaa:	8b 83       	std	Y+3, r24	; 0x03
    5aac:	f8 94       	cli
    5aae:	8b 81       	ldd	r24, Y+3	; 0x03
    5ab0:	20 91 10 27 	lds	r18, 0x2710	; 0x802710 <g_twi1_hygro_S_T>
    5ab4:	30 91 11 27 	lds	r19, 0x2711	; 0x802711 <g_twi1_hygro_S_T+0x1>
    5ab8:	00 91 0e 27 	lds	r16, 0x270E	; 0x80270e <g_twi1_hygro_S_RH>
    5abc:	10 91 0f 27 	lds	r17, 0x270F	; 0x80270f <g_twi1_hygro_S_RH+0x1>
    5ac0:	8f bf       	out	0x3f, r24	; 63
    5ac2:	21 15       	cp	r18, r1
    5ac4:	31 05       	cpc	r19, r1
    5ac6:	a9 f0       	breq	.+42     	; 0x5af2 <task_twi1_hygro+0x5a>
    5ac8:	8f b7       	in	r24, 0x3f	; 63
    5aca:	8a 83       	std	Y+2, r24	; 0x02
    5acc:	f8 94       	cli
    5ace:	fa 80       	ldd	r15, Y+2	; 0x02
    5ad0:	ac e5       	ldi	r26, 0x5C	; 92
    5ad2:	b4 e4       	ldi	r27, 0x44	; 68
    5ad4:	0e 94 b8 81 	call	0x10370	; 0x10370 <__umulhisi3>
    5ad8:	2f ef       	ldi	r18, 0xFF	; 255
    5ada:	3f ef       	ldi	r19, 0xFF	; 255
    5adc:	40 e0       	ldi	r20, 0x00	; 0
    5ade:	50 e0       	ldi	r21, 0x00	; 0
    5ae0:	0e 94 8e 81 	call	0x1031c	; 0x1031c <__divmodsi4>
    5ae4:	24 59       	subi	r18, 0x94	; 148
    5ae6:	31 41       	sbci	r19, 0x11	; 17
    5ae8:	20 93 0c 27 	sts	0x270C, r18	; 0x80270c <g_twi1_hygro_T_100>
    5aec:	30 93 0d 27 	sts	0x270D, r19	; 0x80270d <g_twi1_hygro_T_100+0x1>
    5af0:	ff be       	out	0x3f, r15	; 63
    5af2:	01 15       	cp	r16, r1
    5af4:	11 05       	cpc	r17, r1
    5af6:	a1 f0       	breq	.+40     	; 0x5b20 <task_twi1_hygro+0x88>
    5af8:	8f b7       	in	r24, 0x3f	; 63
    5afa:	89 83       	std	Y+1, r24	; 0x01
    5afc:	f8 94       	cli
    5afe:	f9 80       	ldd	r15, Y+1	; 0x01
    5b00:	98 01       	movw	r18, r16
    5b02:	a0 e1       	ldi	r26, 0x10	; 16
    5b04:	b7 e2       	ldi	r27, 0x27	; 39
    5b06:	0e 94 b8 81 	call	0x10370	; 0x10370 <__umulhisi3>
    5b0a:	2f ef       	ldi	r18, 0xFF	; 255
    5b0c:	3f ef       	ldi	r19, 0xFF	; 255
    5b0e:	40 e0       	ldi	r20, 0x00	; 0
    5b10:	50 e0       	ldi	r21, 0x00	; 0
    5b12:	0e 94 8e 81 	call	0x1031c	; 0x1031c <__divmodsi4>
    5b16:	20 93 0a 27 	sts	0x270A, r18	; 0x80270a <g_twi1_hygro_RH_100>
    5b1a:	30 93 0b 27 	sts	0x270B, r19	; 0x80270b <g_twi1_hygro_RH_100+0x1>
    5b1e:	ff be       	out	0x3f, r15	; 63
    5b20:	23 96       	adiw	r28, 0x03	; 3
    5b22:	cd bf       	out	0x3d, r28	; 61
    5b24:	de bf       	out	0x3e, r29	; 62
    5b26:	df 91       	pop	r29
    5b28:	cf 91       	pop	r28
    5b2a:	1f 91       	pop	r17
    5b2c:	0f 91       	pop	r16
    5b2e:	ff 90       	pop	r15
    5b30:	08 95       	ret

00005b32 <task_twi1_gyro>:
    5b32:	4f 92       	push	r4
    5b34:	5f 92       	push	r5
    5b36:	6f 92       	push	r6
    5b38:	7f 92       	push	r7
    5b3a:	8f 92       	push	r8
    5b3c:	9f 92       	push	r9
    5b3e:	af 92       	push	r10
    5b40:	bf 92       	push	r11
    5b42:	cf 92       	push	r12
    5b44:	df 92       	push	r13
    5b46:	ef 92       	push	r14
    5b48:	ff 92       	push	r15
    5b4a:	0f 93       	push	r16
    5b4c:	1f 93       	push	r17
    5b4e:	cf 93       	push	r28
    5b50:	df 93       	push	r29
    5b52:	00 d0       	rcall	.+0      	; 0x5b54 <task_twi1_gyro+0x22>
    5b54:	00 d0       	rcall	.+0      	; 0x5b56 <task_twi1_gyro+0x24>
    5b56:	cd b7       	in	r28, 0x3d	; 61
    5b58:	de b7       	in	r29, 0x3e	; 62
    5b5a:	8f b7       	in	r24, 0x3f	; 63
    5b5c:	89 83       	std	Y+1, r24	; 0x01
    5b5e:	f8 94       	cli
    5b60:	99 81       	ldd	r25, Y+1	; 0x01
    5b62:	80 91 69 27 	lds	r24, 0x2769	; 0x802769 <g_twi1_gyro_1_accel_x>
    5b66:	f0 91 6a 27 	lds	r31, 0x276A	; 0x80276a <g_twi1_gyro_1_accel_x+0x1>
    5b6a:	40 90 67 27 	lds	r4, 0x2767	; 0x802767 <g_twi1_gyro_1_accel_y>
    5b6e:	50 90 68 27 	lds	r5, 0x2768	; 0x802768 <g_twi1_gyro_1_accel_y+0x1>
    5b72:	60 90 65 27 	lds	r6, 0x2765	; 0x802765 <g_twi1_gyro_1_accel_z>
    5b76:	90 90 66 27 	lds	r9, 0x2766	; 0x802766 <g_twi1_gyro_1_accel_z+0x1>
    5b7a:	9f bf       	out	0x3f, r25	; 63
    5b7c:	a8 2f       	mov	r26, r24
    5b7e:	ef 2f       	mov	r30, r31
    5b80:	ee 0f       	add	r30, r30
    5b82:	ee 0b       	sbc	r30, r30
    5b84:	28 2f       	mov	r18, r24
    5b86:	3f 2f       	mov	r19, r31
    5b88:	4e 2f       	mov	r20, r30
    5b8a:	5e 2f       	mov	r21, r30
    5b8c:	6e 2f       	mov	r22, r30
    5b8e:	7e 2f       	mov	r23, r30
    5b90:	8e 2f       	mov	r24, r30
    5b92:	9e 2f       	mov	r25, r30
    5b94:	02 e0       	ldi	r16, 0x02	; 2
    5b96:	0e 94 f2 82 	call	0x105e4	; 0x105e4 <__ashldi3>
    5b9a:	a2 2e       	mov	r10, r18
    5b9c:	b3 2e       	mov	r11, r19
    5b9e:	c4 2e       	mov	r12, r20
    5ba0:	d5 2e       	mov	r13, r21
    5ba2:	e6 2e       	mov	r14, r22
    5ba4:	f7 2e       	mov	r15, r23
    5ba6:	b8 2f       	mov	r27, r24
    5ba8:	19 2f       	mov	r17, r25
    5baa:	05 e0       	ldi	r16, 0x05	; 5
    5bac:	0e 94 f2 82 	call	0x105e4	; 0x105e4 <__ashldi3>
    5bb0:	0b 2f       	mov	r16, r27
    5bb2:	0e 94 3e 83 	call	0x1067c	; 0x1067c <__subdi3>
    5bb6:	aa 2e       	mov	r10, r26
    5bb8:	bf 2e       	mov	r11, r31
    5bba:	ce 2e       	mov	r12, r30
    5bbc:	de 2e       	mov	r13, r30
    5bbe:	ee 2e       	mov	r14, r30
    5bc0:	fe 2e       	mov	r15, r30
    5bc2:	0e 2f       	mov	r16, r30
    5bc4:	1e 2f       	mov	r17, r30
    5bc6:	0e 94 29 83 	call	0x10652	; 0x10652 <__adddi3>
    5bca:	04 e0       	ldi	r16, 0x04	; 4
    5bcc:	0e 94 f2 82 	call	0x105e4	; 0x105e4 <__ashldi3>
    5bd0:	b0 90 56 20 	lds	r11, 0x2056	; 0x802056 <g_twi1_gyro_1_accel_factx+0x1>
    5bd4:	a0 90 55 20 	lds	r10, 0x2055	; 0x802055 <g_twi1_gyro_1_accel_factx>
    5bd8:	1b 2d       	mov	r17, r11
    5bda:	11 0f       	add	r17, r17
    5bdc:	11 0b       	sbc	r17, r17
    5bde:	c1 2e       	mov	r12, r17
    5be0:	d1 2e       	mov	r13, r17
    5be2:	e1 2e       	mov	r14, r17
    5be4:	f1 2e       	mov	r15, r17
    5be6:	01 2f       	mov	r16, r17
    5be8:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    5bec:	68 94       	set
    5bee:	aa 24       	eor	r10, r10
    5bf0:	a4 f8       	bld	r10, 4
    5bf2:	0f 2e       	mov	r0, r31
    5bf4:	f7 e2       	ldi	r31, 0x27	; 39
    5bf6:	bf 2e       	mov	r11, r31
    5bf8:	f0 2d       	mov	r31, r0
    5bfa:	c1 2c       	mov	r12, r1
    5bfc:	d1 2c       	mov	r13, r1
    5bfe:	e1 2c       	mov	r14, r1
    5c00:	f1 2c       	mov	r15, r1
    5c02:	00 e0       	ldi	r16, 0x00	; 0
    5c04:	10 e0       	ldi	r17, 0x00	; 0
    5c06:	0e 94 2a 82 	call	0x10454	; 0x10454 <__divdi3>
    5c0a:	0f e0       	ldi	r16, 0x0F	; 15
    5c0c:	0e 94 0b 83 	call	0x10616	; 0x10616 <__ashrdi3>
    5c10:	72 2e       	mov	r7, r18
    5c12:	83 2e       	mov	r8, r19
    5c14:	e5 2d       	mov	r30, r5
    5c16:	ee 0f       	add	r30, r30
    5c18:	ee 0b       	sbc	r30, r30
    5c1a:	24 2d       	mov	r18, r4
    5c1c:	35 2d       	mov	r19, r5
    5c1e:	4e 2f       	mov	r20, r30
    5c20:	5e 2f       	mov	r21, r30
    5c22:	6e 2f       	mov	r22, r30
    5c24:	7e 2f       	mov	r23, r30
    5c26:	8e 2f       	mov	r24, r30
    5c28:	9e 2f       	mov	r25, r30
    5c2a:	02 e0       	ldi	r16, 0x02	; 2
    5c2c:	0e 94 f2 82 	call	0x105e4	; 0x105e4 <__ashldi3>
    5c30:	a2 2e       	mov	r10, r18
    5c32:	b3 2e       	mov	r11, r19
    5c34:	c4 2e       	mov	r12, r20
    5c36:	d5 2e       	mov	r13, r21
    5c38:	e6 2e       	mov	r14, r22
    5c3a:	f7 2e       	mov	r15, r23
    5c3c:	a8 2f       	mov	r26, r24
    5c3e:	19 2f       	mov	r17, r25
    5c40:	05 e0       	ldi	r16, 0x05	; 5
    5c42:	0e 94 f2 82 	call	0x105e4	; 0x105e4 <__ashldi3>
    5c46:	0a 2f       	mov	r16, r26
    5c48:	0e 94 3e 83 	call	0x1067c	; 0x1067c <__subdi3>
    5c4c:	a4 2c       	mov	r10, r4
    5c4e:	b5 2c       	mov	r11, r5
    5c50:	ce 2e       	mov	r12, r30
    5c52:	de 2e       	mov	r13, r30
    5c54:	ee 2e       	mov	r14, r30
    5c56:	fe 2e       	mov	r15, r30
    5c58:	0e 2f       	mov	r16, r30
    5c5a:	1e 2f       	mov	r17, r30
    5c5c:	0e 94 29 83 	call	0x10652	; 0x10652 <__adddi3>
    5c60:	04 e0       	ldi	r16, 0x04	; 4
    5c62:	0e 94 f2 82 	call	0x105e4	; 0x105e4 <__ashldi3>
    5c66:	b0 90 54 20 	lds	r11, 0x2054	; 0x802054 <g_twi1_gyro_1_accel_facty+0x1>
    5c6a:	a0 90 53 20 	lds	r10, 0x2053	; 0x802053 <g_twi1_gyro_1_accel_facty>
    5c6e:	1b 2d       	mov	r17, r11
    5c70:	11 0f       	add	r17, r17
    5c72:	11 0b       	sbc	r17, r17
    5c74:	c1 2e       	mov	r12, r17
    5c76:	d1 2e       	mov	r13, r17
    5c78:	e1 2e       	mov	r14, r17
    5c7a:	f1 2e       	mov	r15, r17
    5c7c:	01 2f       	mov	r16, r17
    5c7e:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    5c82:	68 94       	set
    5c84:	aa 24       	eor	r10, r10
    5c86:	a4 f8       	bld	r10, 4
    5c88:	0f 2e       	mov	r0, r31
    5c8a:	f7 e2       	ldi	r31, 0x27	; 39
    5c8c:	bf 2e       	mov	r11, r31
    5c8e:	f0 2d       	mov	r31, r0
    5c90:	c1 2c       	mov	r12, r1
    5c92:	d1 2c       	mov	r13, r1
    5c94:	e1 2c       	mov	r14, r1
    5c96:	f1 2c       	mov	r15, r1
    5c98:	00 e0       	ldi	r16, 0x00	; 0
    5c9a:	10 e0       	ldi	r17, 0x00	; 0
    5c9c:	0e 94 2a 82 	call	0x10454	; 0x10454 <__divdi3>
    5ca0:	0f e0       	ldi	r16, 0x0F	; 15
    5ca2:	0e 94 0b 83 	call	0x10616	; 0x10616 <__ashrdi3>
    5ca6:	42 2e       	mov	r4, r18
    5ca8:	53 2e       	mov	r5, r19
    5caa:	e9 2d       	mov	r30, r9
    5cac:	ee 0f       	add	r30, r30
    5cae:	ee 0b       	sbc	r30, r30
    5cb0:	26 2d       	mov	r18, r6
    5cb2:	39 2d       	mov	r19, r9
    5cb4:	4e 2f       	mov	r20, r30
    5cb6:	5e 2f       	mov	r21, r30
    5cb8:	6e 2f       	mov	r22, r30
    5cba:	7e 2f       	mov	r23, r30
    5cbc:	8e 2f       	mov	r24, r30
    5cbe:	9e 2f       	mov	r25, r30
    5cc0:	02 e0       	ldi	r16, 0x02	; 2
    5cc2:	0e 94 f2 82 	call	0x105e4	; 0x105e4 <__ashldi3>
    5cc6:	a2 2e       	mov	r10, r18
    5cc8:	b3 2e       	mov	r11, r19
    5cca:	c4 2e       	mov	r12, r20
    5ccc:	d5 2e       	mov	r13, r21
    5cce:	e6 2e       	mov	r14, r22
    5cd0:	f7 2e       	mov	r15, r23
    5cd2:	a8 2f       	mov	r26, r24
    5cd4:	19 2f       	mov	r17, r25
    5cd6:	05 e0       	ldi	r16, 0x05	; 5
    5cd8:	0e 94 f2 82 	call	0x105e4	; 0x105e4 <__ashldi3>
    5cdc:	0a 2f       	mov	r16, r26
    5cde:	0e 94 3e 83 	call	0x1067c	; 0x1067c <__subdi3>
    5ce2:	a6 2c       	mov	r10, r6
    5ce4:	b9 2c       	mov	r11, r9
    5ce6:	ce 2e       	mov	r12, r30
    5ce8:	de 2e       	mov	r13, r30
    5cea:	ee 2e       	mov	r14, r30
    5cec:	fe 2e       	mov	r15, r30
    5cee:	0e 2f       	mov	r16, r30
    5cf0:	1e 2f       	mov	r17, r30
    5cf2:	0e 94 29 83 	call	0x10652	; 0x10652 <__adddi3>
    5cf6:	04 e0       	ldi	r16, 0x04	; 4
    5cf8:	0e 94 f2 82 	call	0x105e4	; 0x105e4 <__ashldi3>
    5cfc:	b0 90 52 20 	lds	r11, 0x2052	; 0x802052 <g_twi1_gyro_1_accel_factz+0x1>
    5d00:	a0 90 51 20 	lds	r10, 0x2051	; 0x802051 <g_twi1_gyro_1_accel_factz>
    5d04:	1b 2d       	mov	r17, r11
    5d06:	11 0f       	add	r17, r17
    5d08:	11 0b       	sbc	r17, r17
    5d0a:	c1 2e       	mov	r12, r17
    5d0c:	d1 2e       	mov	r13, r17
    5d0e:	e1 2e       	mov	r14, r17
    5d10:	f1 2e       	mov	r15, r17
    5d12:	01 2f       	mov	r16, r17
    5d14:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    5d18:	68 94       	set
    5d1a:	aa 24       	eor	r10, r10
    5d1c:	a4 f8       	bld	r10, 4
    5d1e:	0f 2e       	mov	r0, r31
    5d20:	f7 e2       	ldi	r31, 0x27	; 39
    5d22:	bf 2e       	mov	r11, r31
    5d24:	f0 2d       	mov	r31, r0
    5d26:	c1 2c       	mov	r12, r1
    5d28:	d1 2c       	mov	r13, r1
    5d2a:	e1 2c       	mov	r14, r1
    5d2c:	f1 2c       	mov	r15, r1
    5d2e:	00 e0       	ldi	r16, 0x00	; 0
    5d30:	10 e0       	ldi	r17, 0x00	; 0
    5d32:	0e 94 2a 82 	call	0x10454	; 0x10454 <__divdi3>
    5d36:	0f e0       	ldi	r16, 0x0F	; 15
    5d38:	0e 94 0b 83 	call	0x10616	; 0x10616 <__ashrdi3>
    5d3c:	92 2f       	mov	r25, r18
    5d3e:	2f b7       	in	r18, 0x3f	; 63
    5d40:	2a 83       	std	Y+2, r18	; 0x02
    5d42:	f8 94       	cli
    5d44:	2a 81       	ldd	r18, Y+2	; 0x02
    5d46:	70 92 63 27 	sts	0x2763, r7	; 0x802763 <g_twi1_gyro_1_accel_x_mg>
    5d4a:	80 92 64 27 	sts	0x2764, r8	; 0x802764 <g_twi1_gyro_1_accel_x_mg+0x1>
    5d4e:	40 92 61 27 	sts	0x2761, r4	; 0x802761 <g_twi1_gyro_1_accel_y_mg>
    5d52:	50 92 62 27 	sts	0x2762, r5	; 0x802762 <g_twi1_gyro_1_accel_y_mg+0x1>
    5d56:	90 93 5f 27 	sts	0x275F, r25	; 0x80275f <g_twi1_gyro_1_accel_z_mg>
    5d5a:	30 93 60 27 	sts	0x2760, r19	; 0x802760 <g_twi1_gyro_1_accel_z_mg+0x1>
    5d5e:	2f bf       	out	0x3f, r18	; 63
    5d60:	8f b7       	in	r24, 0x3f	; 63
    5d62:	8b 83       	std	Y+3, r24	; 0x03
    5d64:	f8 94       	cli
    5d66:	9b 81       	ldd	r25, Y+3	; 0x03
    5d68:	80 91 5d 27 	lds	r24, 0x275D	; 0x80275d <g_twi1_gyro_1_gyro_x>
    5d6c:	30 91 5e 27 	lds	r19, 0x275E	; 0x80275e <g_twi1_gyro_1_gyro_x+0x1>
    5d70:	50 90 5b 27 	lds	r5, 0x275B	; 0x80275b <g_twi1_gyro_1_gyro_y>
    5d74:	60 90 5c 27 	lds	r6, 0x275C	; 0x80275c <g_twi1_gyro_1_gyro_y+0x1>
    5d78:	70 90 59 27 	lds	r7, 0x2759	; 0x802759 <g_twi1_gyro_1_gyro_z>
    5d7c:	80 90 5a 27 	lds	r8, 0x275A	; 0x80275a <g_twi1_gyro_1_gyro_z+0x1>
    5d80:	9f bf       	out	0x3f, r25	; 63
    5d82:	9f b7       	in	r25, 0x3f	; 63
    5d84:	9c 83       	std	Y+4, r25	; 0x04
    5d86:	f8 94       	cli
    5d88:	9c 80       	ldd	r9, Y+4	; 0x04
    5d8a:	28 2f       	mov	r18, r24
    5d8c:	93 2f       	mov	r25, r19
    5d8e:	99 0f       	add	r25, r25
    5d90:	99 0b       	sbc	r25, r25
    5d92:	0f 2e       	mov	r0, r31
    5d94:	f0 e9       	ldi	r31, 0x90	; 144
    5d96:	af 2e       	mov	r10, r31
    5d98:	f0 2d       	mov	r31, r0
    5d9a:	0f 2e       	mov	r0, r31
    5d9c:	f0 ed       	ldi	r31, 0xD0	; 208
    5d9e:	bf 2e       	mov	r11, r31
    5da0:	f0 2d       	mov	r31, r0
    5da2:	0f 2e       	mov	r0, r31
    5da4:	f3 e0       	ldi	r31, 0x03	; 3
    5da6:	cf 2e       	mov	r12, r31
    5da8:	f0 2d       	mov	r31, r0
    5daa:	00 e0       	ldi	r16, 0x00	; 0
    5dac:	49 2f       	mov	r20, r25
    5dae:	59 2f       	mov	r21, r25
    5db0:	69 2f       	mov	r22, r25
    5db2:	79 2f       	mov	r23, r25
    5db4:	89 2f       	mov	r24, r25
    5db6:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    5dba:	0f e0       	ldi	r16, 0x0F	; 15
    5dbc:	0e 94 0b 83 	call	0x10616	; 0x10616 <__ashrdi3>
    5dc0:	20 93 55 27 	sts	0x2755, r18	; 0x802755 <g_twi1_gyro_1_gyro_x_mdps>
    5dc4:	30 93 56 27 	sts	0x2756, r19	; 0x802756 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    5dc8:	40 93 57 27 	sts	0x2757, r20	; 0x802757 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    5dcc:	50 93 58 27 	sts	0x2758, r21	; 0x802758 <g_twi1_gyro_1_gyro_x_mdps+0x3>
    5dd0:	25 2d       	mov	r18, r5
    5dd2:	96 2d       	mov	r25, r6
    5dd4:	99 0f       	add	r25, r25
    5dd6:	99 0b       	sbc	r25, r25
    5dd8:	00 e0       	ldi	r16, 0x00	; 0
    5dda:	36 2d       	mov	r19, r6
    5ddc:	49 2f       	mov	r20, r25
    5dde:	59 2f       	mov	r21, r25
    5de0:	69 2f       	mov	r22, r25
    5de2:	79 2f       	mov	r23, r25
    5de4:	89 2f       	mov	r24, r25
    5de6:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    5dea:	0f e0       	ldi	r16, 0x0F	; 15
    5dec:	0e 94 0b 83 	call	0x10616	; 0x10616 <__ashrdi3>
    5df0:	20 93 51 27 	sts	0x2751, r18	; 0x802751 <g_twi1_gyro_1_gyro_y_mdps>
    5df4:	30 93 52 27 	sts	0x2752, r19	; 0x802752 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    5df8:	40 93 53 27 	sts	0x2753, r20	; 0x802753 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    5dfc:	50 93 54 27 	sts	0x2754, r21	; 0x802754 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    5e00:	27 2d       	mov	r18, r7
    5e02:	98 2d       	mov	r25, r8
    5e04:	99 0f       	add	r25, r25
    5e06:	99 0b       	sbc	r25, r25
    5e08:	00 e0       	ldi	r16, 0x00	; 0
    5e0a:	38 2d       	mov	r19, r8
    5e0c:	49 2f       	mov	r20, r25
    5e0e:	59 2f       	mov	r21, r25
    5e10:	69 2f       	mov	r22, r25
    5e12:	79 2f       	mov	r23, r25
    5e14:	89 2f       	mov	r24, r25
    5e16:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    5e1a:	0f e0       	ldi	r16, 0x0F	; 15
    5e1c:	0e 94 0b 83 	call	0x10616	; 0x10616 <__ashrdi3>
    5e20:	20 93 4d 27 	sts	0x274D, r18	; 0x80274d <g_twi1_gyro_1_gyro_z_mdps>
    5e24:	30 93 4e 27 	sts	0x274E, r19	; 0x80274e <g_twi1_gyro_1_gyro_z_mdps+0x1>
    5e28:	40 93 4f 27 	sts	0x274F, r20	; 0x80274f <g_twi1_gyro_1_gyro_z_mdps+0x2>
    5e2c:	50 93 50 27 	sts	0x2750, r21	; 0x802750 <g_twi1_gyro_1_gyro_z_mdps+0x3>
    5e30:	9f be       	out	0x3f, r9	; 63
    5e32:	8f b7       	in	r24, 0x3f	; 63
    5e34:	8d 83       	std	Y+5, r24	; 0x05
    5e36:	f8 94       	cli
    5e38:	8d 81       	ldd	r24, Y+5	; 0x05
    5e3a:	20 91 47 27 	lds	r18, 0x2747	; 0x802747 <g_twi1_gyro_2_mag_x>
    5e3e:	30 91 48 27 	lds	r19, 0x2748	; 0x802748 <g_twi1_gyro_2_mag_x+0x1>
    5e42:	e0 90 45 27 	lds	r14, 0x2745	; 0x802745 <g_twi1_gyro_2_mag_y>
    5e46:	f0 90 46 27 	lds	r15, 0x2746	; 0x802746 <g_twi1_gyro_2_mag_y+0x1>
    5e4a:	a0 90 43 27 	lds	r10, 0x2743	; 0x802743 <g_twi1_gyro_2_mag_z>
    5e4e:	b0 90 44 27 	lds	r11, 0x2744	; 0x802744 <g_twi1_gyro_2_mag_z+0x1>
    5e52:	00 91 6f 27 	lds	r16, 0x276F	; 0x80276f <g_twi1_gyro_1_temp>
    5e56:	10 91 70 27 	lds	r17, 0x2770	; 0x802770 <g_twi1_gyro_1_temp+0x1>
    5e5a:	8f bf       	out	0x3f, r24	; 63
    5e5c:	a0 91 43 20 	lds	r26, 0x2043	; 0x802043 <g_twi1_gyro_2_mag_factx>
    5e60:	b0 91 44 20 	lds	r27, 0x2044	; 0x802044 <g_twi1_gyro_2_mag_factx+0x1>
    5e64:	e0 91 4b 27 	lds	r30, 0x274B	; 0x80274b <g_twi1_gyro_2_asax>
    5e68:	33 23       	and	r19, r19
    5e6a:	2c f1       	brlt	.+74     	; 0x5eb6 <task_twi1_gyro+0x384>
    5e6c:	0e 94 b2 81 	call	0x10364	; 0x10364 <__mulhisi3>
    5e70:	9b 01       	movw	r18, r22
    5e72:	ac 01       	movw	r20, r24
    5e74:	8e 2f       	mov	r24, r30
    5e76:	ee 0f       	add	r30, r30
    5e78:	99 0b       	sbc	r25, r25
    5e7a:	aa 0b       	sbc	r26, r26
    5e7c:	bb 0b       	sbc	r27, r27
    5e7e:	bc 01       	movw	r22, r24
    5e80:	cd 01       	movw	r24, r26
    5e82:	60 58       	subi	r22, 0x80	; 128
    5e84:	7f 4f       	sbci	r23, 0xFF	; 255
    5e86:	8f 4f       	sbci	r24, 0xFF	; 255
    5e88:	9f 4f       	sbci	r25, 0xFF	; 255
    5e8a:	0e 94 36 81 	call	0x1026c	; 0x1026c <__mulsi3>
    5e8e:	2a e0       	ldi	r18, 0x0A	; 10
    5e90:	30 e0       	ldi	r19, 0x00	; 0
    5e92:	40 e0       	ldi	r20, 0x00	; 0
    5e94:	50 e0       	ldi	r21, 0x00	; 0
    5e96:	0e 94 8e 81 	call	0x1031c	; 0x1031c <__divmodsi4>
    5e9a:	29 01       	movw	r4, r18
    5e9c:	3a 01       	movw	r6, r20
    5e9e:	80 e8       	ldi	r24, 0x80	; 128
    5ea0:	48 0e       	add	r4, r24
    5ea2:	51 1c       	adc	r5, r1
    5ea4:	61 1c       	adc	r6, r1
    5ea6:	71 1c       	adc	r7, r1
    5ea8:	45 2c       	mov	r4, r5
    5eaa:	56 2c       	mov	r5, r6
    5eac:	67 2c       	mov	r6, r7
    5eae:	77 24       	eor	r7, r7
    5eb0:	67 fc       	sbrc	r6, 7
    5eb2:	7a 94       	dec	r7
    5eb4:	24 c0       	rjmp	.+72     	; 0x5efe <task_twi1_gyro+0x3cc>
    5eb6:	0e 94 b2 81 	call	0x10364	; 0x10364 <__mulhisi3>
    5eba:	9b 01       	movw	r18, r22
    5ebc:	ac 01       	movw	r20, r24
    5ebe:	8e 2f       	mov	r24, r30
    5ec0:	ee 0f       	add	r30, r30
    5ec2:	99 0b       	sbc	r25, r25
    5ec4:	aa 0b       	sbc	r26, r26
    5ec6:	bb 0b       	sbc	r27, r27
    5ec8:	bc 01       	movw	r22, r24
    5eca:	cd 01       	movw	r24, r26
    5ecc:	60 58       	subi	r22, 0x80	; 128
    5ece:	7f 4f       	sbci	r23, 0xFF	; 255
    5ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ed4:	0e 94 36 81 	call	0x1026c	; 0x1026c <__mulsi3>
    5ed8:	2a e0       	ldi	r18, 0x0A	; 10
    5eda:	30 e0       	ldi	r19, 0x00	; 0
    5edc:	40 e0       	ldi	r20, 0x00	; 0
    5ede:	50 e0       	ldi	r21, 0x00	; 0
    5ee0:	0e 94 8e 81 	call	0x1031c	; 0x1031c <__divmodsi4>
    5ee4:	29 01       	movw	r4, r18
    5ee6:	3a 01       	movw	r6, r20
    5ee8:	80 e8       	ldi	r24, 0x80	; 128
    5eea:	48 1a       	sub	r4, r24
    5eec:	51 08       	sbc	r5, r1
    5eee:	61 08       	sbc	r6, r1
    5ef0:	71 08       	sbc	r7, r1
    5ef2:	45 2c       	mov	r4, r5
    5ef4:	56 2c       	mov	r5, r6
    5ef6:	67 2c       	mov	r6, r7
    5ef8:	77 24       	eor	r7, r7
    5efa:	67 fc       	sbrc	r6, 7
    5efc:	7a 94       	dec	r7
    5efe:	a0 91 41 20 	lds	r26, 0x2041	; 0x802041 <g_twi1_gyro_2_mag_facty>
    5f02:	b0 91 42 20 	lds	r27, 0x2042	; 0x802042 <g_twi1_gyro_2_mag_facty+0x1>
    5f06:	e0 91 4a 27 	lds	r30, 0x274A	; 0x80274a <g_twi1_gyro_2_asay>
    5f0a:	ff 20       	and	r15, r15
    5f0c:	34 f1       	brlt	.+76     	; 0x5f5a <task_twi1_gyro+0x428>
    5f0e:	97 01       	movw	r18, r14
    5f10:	0e 94 b2 81 	call	0x10364	; 0x10364 <__mulhisi3>
    5f14:	9b 01       	movw	r18, r22
    5f16:	ac 01       	movw	r20, r24
    5f18:	8e 2f       	mov	r24, r30
    5f1a:	ee 0f       	add	r30, r30
    5f1c:	99 0b       	sbc	r25, r25
    5f1e:	aa 0b       	sbc	r26, r26
    5f20:	bb 0b       	sbc	r27, r27
    5f22:	bc 01       	movw	r22, r24
    5f24:	cd 01       	movw	r24, r26
    5f26:	60 58       	subi	r22, 0x80	; 128
    5f28:	7f 4f       	sbci	r23, 0xFF	; 255
    5f2a:	8f 4f       	sbci	r24, 0xFF	; 255
    5f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f2e:	0e 94 36 81 	call	0x1026c	; 0x1026c <__mulsi3>
    5f32:	2a e0       	ldi	r18, 0x0A	; 10
    5f34:	30 e0       	ldi	r19, 0x00	; 0
    5f36:	40 e0       	ldi	r20, 0x00	; 0
    5f38:	50 e0       	ldi	r21, 0x00	; 0
    5f3a:	0e 94 8e 81 	call	0x1031c	; 0x1031c <__divmodsi4>
    5f3e:	69 01       	movw	r12, r18
    5f40:	7a 01       	movw	r14, r20
    5f42:	80 e8       	ldi	r24, 0x80	; 128
    5f44:	c8 0e       	add	r12, r24
    5f46:	d1 1c       	adc	r13, r1
    5f48:	e1 1c       	adc	r14, r1
    5f4a:	f1 1c       	adc	r15, r1
    5f4c:	cd 2c       	mov	r12, r13
    5f4e:	de 2c       	mov	r13, r14
    5f50:	ef 2c       	mov	r14, r15
    5f52:	ff 24       	eor	r15, r15
    5f54:	e7 fc       	sbrc	r14, 7
    5f56:	fa 94       	dec	r15
    5f58:	25 c0       	rjmp	.+74     	; 0x5fa4 <task_twi1_gyro+0x472>
    5f5a:	97 01       	movw	r18, r14
    5f5c:	0e 94 b2 81 	call	0x10364	; 0x10364 <__mulhisi3>
    5f60:	9b 01       	movw	r18, r22
    5f62:	ac 01       	movw	r20, r24
    5f64:	8e 2f       	mov	r24, r30
    5f66:	ee 0f       	add	r30, r30
    5f68:	99 0b       	sbc	r25, r25
    5f6a:	aa 0b       	sbc	r26, r26
    5f6c:	bb 0b       	sbc	r27, r27
    5f6e:	bc 01       	movw	r22, r24
    5f70:	cd 01       	movw	r24, r26
    5f72:	60 58       	subi	r22, 0x80	; 128
    5f74:	7f 4f       	sbci	r23, 0xFF	; 255
    5f76:	8f 4f       	sbci	r24, 0xFF	; 255
    5f78:	9f 4f       	sbci	r25, 0xFF	; 255
    5f7a:	0e 94 36 81 	call	0x1026c	; 0x1026c <__mulsi3>
    5f7e:	2a e0       	ldi	r18, 0x0A	; 10
    5f80:	30 e0       	ldi	r19, 0x00	; 0
    5f82:	40 e0       	ldi	r20, 0x00	; 0
    5f84:	50 e0       	ldi	r21, 0x00	; 0
    5f86:	0e 94 8e 81 	call	0x1031c	; 0x1031c <__divmodsi4>
    5f8a:	69 01       	movw	r12, r18
    5f8c:	7a 01       	movw	r14, r20
    5f8e:	80 e8       	ldi	r24, 0x80	; 128
    5f90:	c8 1a       	sub	r12, r24
    5f92:	d1 08       	sbc	r13, r1
    5f94:	e1 08       	sbc	r14, r1
    5f96:	f1 08       	sbc	r15, r1
    5f98:	cd 2c       	mov	r12, r13
    5f9a:	de 2c       	mov	r13, r14
    5f9c:	ef 2c       	mov	r14, r15
    5f9e:	ff 24       	eor	r15, r15
    5fa0:	e7 fc       	sbrc	r14, 7
    5fa2:	fa 94       	dec	r15
    5fa4:	a0 91 3f 20 	lds	r26, 0x203F	; 0x80203f <g_twi1_gyro_2_mag_factz>
    5fa8:	b0 91 40 20 	lds	r27, 0x2040	; 0x802040 <g_twi1_gyro_2_mag_factz+0x1>
    5fac:	e0 91 49 27 	lds	r30, 0x2749	; 0x802749 <g_twi1_gyro_2_asaz>
    5fb0:	bb 20       	and	r11, r11
    5fb2:	34 f1       	brlt	.+76     	; 0x6000 <__stack+0x1>
    5fb4:	95 01       	movw	r18, r10
    5fb6:	0e 94 b2 81 	call	0x10364	; 0x10364 <__mulhisi3>
    5fba:	9b 01       	movw	r18, r22
    5fbc:	ac 01       	movw	r20, r24
    5fbe:	8e 2f       	mov	r24, r30
    5fc0:	ee 0f       	add	r30, r30
    5fc2:	99 0b       	sbc	r25, r25
    5fc4:	aa 0b       	sbc	r26, r26
    5fc6:	bb 0b       	sbc	r27, r27
    5fc8:	bc 01       	movw	r22, r24
    5fca:	cd 01       	movw	r24, r26
    5fcc:	60 58       	subi	r22, 0x80	; 128
    5fce:	7f 4f       	sbci	r23, 0xFF	; 255
    5fd0:	8f 4f       	sbci	r24, 0xFF	; 255
    5fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fd4:	0e 94 36 81 	call	0x1026c	; 0x1026c <__mulsi3>
    5fd8:	2a e0       	ldi	r18, 0x0A	; 10
    5fda:	30 e0       	ldi	r19, 0x00	; 0
    5fdc:	40 e0       	ldi	r20, 0x00	; 0
    5fde:	50 e0       	ldi	r21, 0x00	; 0
    5fe0:	0e 94 8e 81 	call	0x1031c	; 0x1031c <__divmodsi4>
    5fe4:	49 01       	movw	r8, r18
    5fe6:	5a 01       	movw	r10, r20
    5fe8:	80 e8       	ldi	r24, 0x80	; 128
    5fea:	88 0e       	add	r8, r24
    5fec:	91 1c       	adc	r9, r1
    5fee:	a1 1c       	adc	r10, r1
    5ff0:	b1 1c       	adc	r11, r1
    5ff2:	89 2c       	mov	r8, r9
    5ff4:	9a 2c       	mov	r9, r10
    5ff6:	ab 2c       	mov	r10, r11
    5ff8:	bb 24       	eor	r11, r11
    5ffa:	a7 fc       	sbrc	r10, 7
    5ffc:	ba 94       	dec	r11
    5ffe:	25 c0       	rjmp	.+74     	; 0x604a <__stack+0x4b>
    6000:	95 01       	movw	r18, r10
    6002:	0e 94 b2 81 	call	0x10364	; 0x10364 <__mulhisi3>
    6006:	9b 01       	movw	r18, r22
    6008:	ac 01       	movw	r20, r24
    600a:	8e 2f       	mov	r24, r30
    600c:	ee 0f       	add	r30, r30
    600e:	99 0b       	sbc	r25, r25
    6010:	aa 0b       	sbc	r26, r26
    6012:	bb 0b       	sbc	r27, r27
    6014:	bc 01       	movw	r22, r24
    6016:	cd 01       	movw	r24, r26
    6018:	60 58       	subi	r22, 0x80	; 128
    601a:	7f 4f       	sbci	r23, 0xFF	; 255
    601c:	8f 4f       	sbci	r24, 0xFF	; 255
    601e:	9f 4f       	sbci	r25, 0xFF	; 255
    6020:	0e 94 36 81 	call	0x1026c	; 0x1026c <__mulsi3>
    6024:	2a e0       	ldi	r18, 0x0A	; 10
    6026:	30 e0       	ldi	r19, 0x00	; 0
    6028:	40 e0       	ldi	r20, 0x00	; 0
    602a:	50 e0       	ldi	r21, 0x00	; 0
    602c:	0e 94 8e 81 	call	0x1031c	; 0x1031c <__divmodsi4>
    6030:	49 01       	movw	r8, r18
    6032:	5a 01       	movw	r10, r20
    6034:	80 e8       	ldi	r24, 0x80	; 128
    6036:	88 1a       	sub	r8, r24
    6038:	91 08       	sbc	r9, r1
    603a:	a1 08       	sbc	r10, r1
    603c:	b1 08       	sbc	r11, r1
    603e:	89 2c       	mov	r8, r9
    6040:	9a 2c       	mov	r9, r10
    6042:	ab 2c       	mov	r10, r11
    6044:	bb 24       	eor	r11, r11
    6046:	a7 fc       	sbrc	r10, 7
    6048:	ba 94       	dec	r11
    604a:	80 91 6d 27 	lds	r24, 0x276D	; 0x80276d <g_twi1_gyro_1_temp_RTofs>
    604e:	90 91 6e 27 	lds	r25, 0x276E	; 0x80276e <g_twi1_gyro_1_temp_RTofs+0x1>
    6052:	d8 01       	movw	r26, r16
    6054:	a8 1b       	sub	r26, r24
    6056:	b9 0b       	sbc	r27, r25
    6058:	24 e6       	ldi	r18, 0x64	; 100
    605a:	30 e0       	ldi	r19, 0x00	; 0
    605c:	0e 94 c7 81 	call	0x1038e	; 0x1038e <__usmulhisi3>
    6060:	20 91 5d 20 	lds	r18, 0x205D	; 0x80205d <g_twi1_gyro_1_temp_sens>
    6064:	30 91 5e 20 	lds	r19, 0x205E	; 0x80205e <g_twi1_gyro_1_temp_sens+0x1>
    6068:	03 2e       	mov	r0, r19
    606a:	00 0c       	add	r0, r0
    606c:	44 0b       	sbc	r20, r20
    606e:	55 0b       	sbc	r21, r21
    6070:	0e 94 8e 81 	call	0x1031c	; 0x1031c <__divmodsi4>
    6074:	2c 5c       	subi	r18, 0xCC	; 204
    6076:	37 4f       	sbci	r19, 0xF7	; 247
    6078:	8f b7       	in	r24, 0x3f	; 63
    607a:	8e 83       	std	Y+6, r24	; 0x06
    607c:	f8 94       	cli
    607e:	8e 81       	ldd	r24, Y+6	; 0x06
    6080:	40 92 3f 27 	sts	0x273F, r4	; 0x80273f <g_twi1_gyro_2_mag_x_nT>
    6084:	50 92 40 27 	sts	0x2740, r5	; 0x802740 <g_twi1_gyro_2_mag_x_nT+0x1>
    6088:	60 92 41 27 	sts	0x2741, r6	; 0x802741 <g_twi1_gyro_2_mag_x_nT+0x2>
    608c:	70 92 42 27 	sts	0x2742, r7	; 0x802742 <g_twi1_gyro_2_mag_x_nT+0x3>
    6090:	c0 92 3b 27 	sts	0x273B, r12	; 0x80273b <g_twi1_gyro_2_mag_y_nT>
    6094:	d0 92 3c 27 	sts	0x273C, r13	; 0x80273c <g_twi1_gyro_2_mag_y_nT+0x1>
    6098:	e0 92 3d 27 	sts	0x273D, r14	; 0x80273d <g_twi1_gyro_2_mag_y_nT+0x2>
    609c:	f0 92 3e 27 	sts	0x273E, r15	; 0x80273e <g_twi1_gyro_2_mag_y_nT+0x3>
    60a0:	80 92 37 27 	sts	0x2737, r8	; 0x802737 <g_twi1_gyro_2_mag_z_nT>
    60a4:	90 92 38 27 	sts	0x2738, r9	; 0x802738 <g_twi1_gyro_2_mag_z_nT+0x1>
    60a8:	a0 92 39 27 	sts	0x2739, r10	; 0x802739 <g_twi1_gyro_2_mag_z_nT+0x2>
    60ac:	b0 92 3a 27 	sts	0x273A, r11	; 0x80273a <g_twi1_gyro_2_mag_z_nT+0x3>
    60b0:	20 93 6b 27 	sts	0x276B, r18	; 0x80276b <g_twi1_gyro_1_temp_deg_100>
    60b4:	30 93 6c 27 	sts	0x276C, r19	; 0x80276c <g_twi1_gyro_1_temp_deg_100+0x1>
    60b8:	8f bf       	out	0x3f, r24	; 63
    60ba:	26 96       	adiw	r28, 0x06	; 6
    60bc:	cd bf       	out	0x3d, r28	; 61
    60be:	de bf       	out	0x3e, r29	; 62
    60c0:	df 91       	pop	r29
    60c2:	cf 91       	pop	r28
    60c4:	1f 91       	pop	r17
    60c6:	0f 91       	pop	r16
    60c8:	ff 90       	pop	r15
    60ca:	ef 90       	pop	r14
    60cc:	df 90       	pop	r13
    60ce:	cf 90       	pop	r12
    60d0:	bf 90       	pop	r11
    60d2:	af 90       	pop	r10
    60d4:	9f 90       	pop	r9
    60d6:	8f 90       	pop	r8
    60d8:	7f 90       	pop	r7
    60da:	6f 90       	pop	r6
    60dc:	5f 90       	pop	r5
    60de:	4f 90       	pop	r4
    60e0:	08 95       	ret

000060e2 <task_twi1_baro>:
    60e2:	2f 92       	push	r2
    60e4:	3f 92       	push	r3
    60e6:	4f 92       	push	r4
    60e8:	5f 92       	push	r5
    60ea:	6f 92       	push	r6
    60ec:	7f 92       	push	r7
    60ee:	8f 92       	push	r8
    60f0:	9f 92       	push	r9
    60f2:	af 92       	push	r10
    60f4:	bf 92       	push	r11
    60f6:	cf 92       	push	r12
    60f8:	df 92       	push	r13
    60fa:	ef 92       	push	r14
    60fc:	ff 92       	push	r15
    60fe:	0f 93       	push	r16
    6100:	1f 93       	push	r17
    6102:	cf 93       	push	r28
    6104:	df 93       	push	r29
    6106:	cd b7       	in	r28, 0x3d	; 61
    6108:	de b7       	in	r29, 0x3e	; 62
    610a:	a6 97       	sbiw	r28, 0x26	; 38
    610c:	cd bf       	out	0x3d, r28	; 61
    610e:	de bf       	out	0x3e, r29	; 62
    6110:	8f b7       	in	r24, 0x3f	; 63
    6112:	8a 83       	std	Y+2, r24	; 0x02
    6114:	f8 94       	cli
    6116:	8a 81       	ldd	r24, Y+2	; 0x02
    6118:	20 91 20 27 	lds	r18, 0x2720	; 0x802720 <g_twi1_baro_d1>
    611c:	30 91 21 27 	lds	r19, 0x2721	; 0x802721 <g_twi1_baro_d1+0x1>
    6120:	40 91 22 27 	lds	r20, 0x2722	; 0x802722 <g_twi1_baro_d1+0x2>
    6124:	50 91 23 27 	lds	r21, 0x2723	; 0x802723 <g_twi1_baro_d1+0x3>
    6128:	2f 8b       	std	Y+23, r18	; 0x17
    612a:	38 8f       	std	Y+24, r19	; 0x18
    612c:	49 8f       	std	Y+25, r20	; 0x19
    612e:	5a 8f       	std	Y+26, r21	; 0x1a
    6130:	40 91 1c 27 	lds	r20, 0x271C	; 0x80271c <g_twi1_baro_d2>
    6134:	50 91 1d 27 	lds	r21, 0x271D	; 0x80271d <g_twi1_baro_d2+0x1>
    6138:	60 91 1e 27 	lds	r22, 0x271E	; 0x80271e <g_twi1_baro_d2+0x2>
    613c:	70 91 1f 27 	lds	r23, 0x271F	; 0x80271f <g_twi1_baro_d2+0x3>
    6140:	8f bf       	out	0x3f, r24	; 63
    6142:	8f 89       	ldd	r24, Y+23	; 0x17
    6144:	98 8d       	ldd	r25, Y+24	; 0x18
    6146:	a9 8d       	ldd	r26, Y+25	; 0x19
    6148:	ba 8d       	ldd	r27, Y+26	; 0x1a
    614a:	89 2b       	or	r24, r25
    614c:	8a 2b       	or	r24, r26
    614e:	8b 2b       	or	r24, r27
    6150:	31 f4       	brne	.+12     	; 0x615e <task_twi1_baro+0x7c>
    6152:	41 15       	cp	r20, r1
    6154:	51 05       	cpc	r21, r1
    6156:	61 05       	cpc	r22, r1
    6158:	71 05       	cpc	r23, r1
    615a:	09 f4       	brne	.+2      	; 0x615e <task_twi1_baro+0x7c>
    615c:	fe c1       	rjmp	.+1020   	; 0x655a <task_twi1_baro+0x478>
    615e:	0f 2e       	mov	r0, r31
    6160:	f4 e2       	ldi	r31, 0x24	; 36
    6162:	2f 2e       	mov	r2, r31
    6164:	f7 e2       	ldi	r31, 0x27	; 39
    6166:	3f 2e       	mov	r3, r31
    6168:	f0 2d       	mov	r31, r0
    616a:	d1 01       	movw	r26, r2
    616c:	1a 96       	adiw	r26, 0x0a	; 10
    616e:	8d 91       	ld	r24, X+
    6170:	9c 91       	ld	r25, X
    6172:	1b 97       	sbiw	r26, 0x0b	; 11
    6174:	a0 e0       	ldi	r26, 0x00	; 0
    6176:	b0 e0       	ldi	r27, 0x00	; 0
    6178:	ba 2f       	mov	r27, r26
    617a:	a9 2f       	mov	r26, r25
    617c:	98 2f       	mov	r25, r24
    617e:	88 27       	eor	r24, r24
    6180:	2a 01       	movw	r4, r20
    6182:	3b 01       	movw	r6, r22
    6184:	48 1a       	sub	r4, r24
    6186:	59 0a       	sbc	r5, r25
    6188:	6a 0a       	sbc	r6, r26
    618a:	7b 0a       	sbc	r7, r27
    618c:	a3 01       	movw	r20, r6
    618e:	92 01       	movw	r18, r4
    6190:	55 0f       	add	r21, r21
    6192:	22 0b       	sbc	r18, r18
    6194:	32 2f       	mov	r19, r18
    6196:	a9 01       	movw	r20, r18
    6198:	2b 83       	std	Y+3, r18	; 0x03
    619a:	3c 83       	std	Y+4, r19	; 0x04
    619c:	4d 83       	std	Y+5, r20	; 0x05
    619e:	5e 83       	std	Y+6, r21	; 0x06
    61a0:	d1 01       	movw	r26, r2
    61a2:	1c 96       	adiw	r26, 0x0c	; 12
    61a4:	4d 91       	ld	r20, X+
    61a6:	5c 91       	ld	r21, X
    61a8:	1d 97       	sbiw	r26, 0x0d	; 13
    61aa:	a4 2c       	mov	r10, r4
    61ac:	b5 2c       	mov	r11, r5
    61ae:	c6 2c       	mov	r12, r6
    61b0:	d7 2c       	mov	r13, r7
    61b2:	eb 80       	ldd	r14, Y+3	; 0x03
    61b4:	fe 2c       	mov	r15, r14
    61b6:	0e 2d       	mov	r16, r14
    61b8:	1e 2d       	mov	r17, r14
    61ba:	24 2f       	mov	r18, r20
    61bc:	35 2f       	mov	r19, r21
    61be:	40 e0       	ldi	r20, 0x00	; 0
    61c0:	50 e0       	ldi	r21, 0x00	; 0
    61c2:	60 e0       	ldi	r22, 0x00	; 0
    61c4:	70 e0       	ldi	r23, 0x00	; 0
    61c6:	80 e0       	ldi	r24, 0x00	; 0
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    61ce:	07 e1       	ldi	r16, 0x17	; 23
    61d0:	0e 94 0b 83 	call	0x10616	; 0x10616 <__ashrdi3>
    61d4:	2b 87       	std	Y+11, r18	; 0x0b
    61d6:	3c 87       	std	Y+12, r19	; 0x0c
    61d8:	4d 87       	std	Y+13, r20	; 0x0d
    61da:	5e 87       	std	Y+14, r21	; 0x0e
    61dc:	2b 85       	ldd	r18, Y+11	; 0x0b
    61de:	3c 85       	ldd	r19, Y+12	; 0x0c
    61e0:	4d 85       	ldd	r20, Y+13	; 0x0d
    61e2:	5e 85       	ldd	r21, Y+14	; 0x0e
    61e4:	2b a3       	std	Y+35, r18	; 0x23
    61e6:	3c a3       	std	Y+36, r19	; 0x24
    61e8:	4d a3       	std	Y+37, r20	; 0x25
    61ea:	5e a3       	std	Y+38, r21	; 0x26
    61ec:	ba 01       	movw	r22, r20
    61ee:	a9 01       	movw	r20, r18
    61f0:	40 53       	subi	r20, 0x30	; 48
    61f2:	58 4f       	sbci	r21, 0xF8	; 248
    61f4:	6f 4f       	sbci	r22, 0xFF	; 255
    61f6:	7f 4f       	sbci	r23, 0xFF	; 255
    61f8:	4b 8b       	std	Y+19, r20	; 0x13
    61fa:	5c 8b       	std	Y+20, r21	; 0x14
    61fc:	6d 8b       	std	Y+21, r22	; 0x15
    61fe:	7e 8b       	std	Y+22, r23	; 0x16
    6200:	d1 01       	movw	r26, r2
    6202:	18 96       	adiw	r26, 0x08	; 8
    6204:	4d 91       	ld	r20, X+
    6206:	5c 91       	ld	r21, X
    6208:	19 97       	sbiw	r26, 0x09	; 9
    620a:	fe 2c       	mov	r15, r14
    620c:	0e 2d       	mov	r16, r14
    620e:	24 2f       	mov	r18, r20
    6210:	35 2f       	mov	r19, r21
    6212:	40 e0       	ldi	r20, 0x00	; 0
    6214:	50 e0       	ldi	r21, 0x00	; 0
    6216:	60 e0       	ldi	r22, 0x00	; 0
    6218:	70 e0       	ldi	r23, 0x00	; 0
    621a:	80 e0       	ldi	r24, 0x00	; 0
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    6222:	06 e0       	ldi	r16, 0x06	; 6
    6224:	0e 94 0b 83 	call	0x10616	; 0x10616 <__ashrdi3>
    6228:	2f 87       	std	Y+15, r18	; 0x0f
    622a:	38 8b       	std	Y+16, r19	; 0x10
    622c:	84 2e       	mov	r8, r20
    622e:	95 2e       	mov	r9, r21
    6230:	b6 2f       	mov	r27, r22
    6232:	a7 2f       	mov	r26, r23
    6234:	89 8b       	std	Y+17, r24	; 0x11
    6236:	9a 8b       	std	Y+18, r25	; 0x12
    6238:	f1 01       	movw	r30, r2
    623a:	a4 80       	ldd	r10, Z+4	; 0x04
    623c:	b5 80       	ldd	r11, Z+5	; 0x05
    623e:	2a 2d       	mov	r18, r10
    6240:	3b 2d       	mov	r19, r11
    6242:	40 e0       	ldi	r20, 0x00	; 0
    6244:	50 e0       	ldi	r21, 0x00	; 0
    6246:	60 e0       	ldi	r22, 0x00	; 0
    6248:	70 e0       	ldi	r23, 0x00	; 0
    624a:	80 e0       	ldi	r24, 0x00	; 0
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	01 e1       	ldi	r16, 0x11	; 17
    6250:	0e 94 f2 82 	call	0x105e4	; 0x105e4 <__ashldi3>
    6254:	a2 2e       	mov	r10, r18
    6256:	b3 2e       	mov	r11, r19
    6258:	c4 2e       	mov	r12, r20
    625a:	d5 2e       	mov	r13, r21
    625c:	e6 2e       	mov	r14, r22
    625e:	f7 2e       	mov	r15, r23
    6260:	08 2f       	mov	r16, r24
    6262:	19 2f       	mov	r17, r25
    6264:	2f 85       	ldd	r18, Y+15	; 0x0f
    6266:	38 89       	ldd	r19, Y+16	; 0x10
    6268:	48 2d       	mov	r20, r8
    626a:	59 2d       	mov	r21, r9
    626c:	6b 2f       	mov	r22, r27
    626e:	7a 2f       	mov	r23, r26
    6270:	89 89       	ldd	r24, Y+17	; 0x11
    6272:	9a 89       	ldd	r25, Y+18	; 0x12
    6274:	0e 94 29 83 	call	0x10652	; 0x10652 <__adddi3>
    6278:	2f 87       	std	Y+15, r18	; 0x0f
    627a:	38 8b       	std	Y+16, r19	; 0x10
    627c:	4b 8f       	std	Y+27, r20	; 0x1b
    627e:	5c 8f       	std	Y+28, r21	; 0x1c
    6280:	6d 8f       	std	Y+29, r22	; 0x1d
    6282:	7e 8f       	std	Y+30, r23	; 0x1e
    6284:	8f 8f       	std	Y+31, r24	; 0x1f
    6286:	98 a3       	std	Y+32, r25	; 0x20
    6288:	46 81       	ldd	r20, Z+6	; 0x06
    628a:	57 81       	ldd	r21, Z+7	; 0x07
    628c:	a4 2c       	mov	r10, r4
    628e:	b5 2c       	mov	r11, r5
    6290:	c6 2c       	mov	r12, r6
    6292:	d7 2c       	mov	r13, r7
    6294:	eb 80       	ldd	r14, Y+3	; 0x03
    6296:	fe 2c       	mov	r15, r14
    6298:	0e 2d       	mov	r16, r14
    629a:	1e 2d       	mov	r17, r14
    629c:	24 2f       	mov	r18, r20
    629e:	35 2f       	mov	r19, r21
    62a0:	40 e0       	ldi	r20, 0x00	; 0
    62a2:	50 e0       	ldi	r21, 0x00	; 0
    62a4:	60 e0       	ldi	r22, 0x00	; 0
    62a6:	70 e0       	ldi	r23, 0x00	; 0
    62a8:	80 e0       	ldi	r24, 0x00	; 0
    62aa:	90 e0       	ldi	r25, 0x00	; 0
    62ac:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    62b0:	07 e0       	ldi	r16, 0x07	; 7
    62b2:	0e 94 0b 83 	call	0x10616	; 0x10616 <__ashrdi3>
    62b6:	29 8b       	std	Y+17, r18	; 0x11
    62b8:	3a 8b       	std	Y+18, r19	; 0x12
    62ba:	84 2e       	mov	r8, r20
    62bc:	95 2e       	mov	r9, r21
    62be:	b6 2f       	mov	r27, r22
    62c0:	a7 2f       	mov	r26, r23
    62c2:	89 a3       	std	Y+33, r24	; 0x21
    62c4:	9a a3       	std	Y+34, r25	; 0x22
    62c6:	f1 01       	movw	r30, r2
    62c8:	a2 80       	ldd	r10, Z+2	; 0x02
    62ca:	b3 80       	ldd	r11, Z+3	; 0x03
    62cc:	2a 2d       	mov	r18, r10
    62ce:	3b 2d       	mov	r19, r11
    62d0:	40 e0       	ldi	r20, 0x00	; 0
    62d2:	50 e0       	ldi	r21, 0x00	; 0
    62d4:	60 e0       	ldi	r22, 0x00	; 0
    62d6:	70 e0       	ldi	r23, 0x00	; 0
    62d8:	80 e0       	ldi	r24, 0x00	; 0
    62da:	90 e0       	ldi	r25, 0x00	; 0
    62dc:	00 e1       	ldi	r16, 0x10	; 16
    62de:	0e 94 f2 82 	call	0x105e4	; 0x105e4 <__ashldi3>
    62e2:	a2 2e       	mov	r10, r18
    62e4:	b3 2e       	mov	r11, r19
    62e6:	c4 2e       	mov	r12, r20
    62e8:	d5 2e       	mov	r13, r21
    62ea:	e6 2e       	mov	r14, r22
    62ec:	f7 2e       	mov	r15, r23
    62ee:	08 2f       	mov	r16, r24
    62f0:	19 2f       	mov	r17, r25
    62f2:	29 89       	ldd	r18, Y+17	; 0x11
    62f4:	3a 89       	ldd	r19, Y+18	; 0x12
    62f6:	48 2d       	mov	r20, r8
    62f8:	59 2d       	mov	r21, r9
    62fa:	6b 2f       	mov	r22, r27
    62fc:	7a 2f       	mov	r23, r26
    62fe:	89 a1       	ldd	r24, Y+33	; 0x21
    6300:	9a a1       	ldd	r25, Y+34	; 0x22
    6302:	0e 94 29 83 	call	0x10652	; 0x10652 <__adddi3>
    6306:	32 2e       	mov	r3, r18
    6308:	23 2e       	mov	r2, r19
    630a:	49 8b       	std	Y+17, r20	; 0x11
    630c:	5a 8b       	std	Y+18, r21	; 0x12
    630e:	69 a3       	std	Y+33, r22	; 0x21
    6310:	7a a3       	std	Y+34, r23	; 0x22
    6312:	98 2e       	mov	r9, r24
    6314:	89 2e       	mov	r8, r25
    6316:	2b 89       	ldd	r18, Y+19	; 0x13
    6318:	3c 89       	ldd	r19, Y+20	; 0x14
    631a:	4d 89       	ldd	r20, Y+21	; 0x15
    631c:	5e 89       	ldd	r21, Y+22	; 0x16
    631e:	20 3d       	cpi	r18, 0xD0	; 208
    6320:	37 40       	sbci	r19, 0x07	; 7
    6322:	41 05       	cpc	r20, r1
    6324:	51 05       	cpc	r21, r1
    6326:	0c f0       	brlt	.+2      	; 0x632a <task_twi1_baro+0x248>
    6328:	d0 c0       	rjmp	.+416    	; 0x64ca <task_twi1_baro+0x3e8>
    632a:	a4 2c       	mov	r10, r4
    632c:	b5 2c       	mov	r11, r5
    632e:	c6 2c       	mov	r12, r6
    6330:	d7 2c       	mov	r13, r7
    6332:	eb 80       	ldd	r14, Y+3	; 0x03
    6334:	fe 2c       	mov	r15, r14
    6336:	0e 2d       	mov	r16, r14
    6338:	1e 2d       	mov	r17, r14
    633a:	24 2d       	mov	r18, r4
    633c:	35 2d       	mov	r19, r5
    633e:	46 2d       	mov	r20, r6
    6340:	57 2d       	mov	r21, r7
    6342:	60 2f       	mov	r22, r16
    6344:	70 2f       	mov	r23, r16
    6346:	80 2f       	mov	r24, r16
    6348:	9e 2d       	mov	r25, r14
    634a:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    634e:	0f e1       	ldi	r16, 0x1F	; 31
    6350:	0e 94 0b 83 	call	0x10616	; 0x10616 <__ashrdi3>
    6354:	2b 83       	std	Y+3, r18	; 0x03
    6356:	3c 83       	std	Y+4, r19	; 0x04
    6358:	4d 83       	std	Y+5, r20	; 0x05
    635a:	5e 83       	std	Y+6, r21	; 0x06
    635c:	2b 85       	ldd	r18, Y+11	; 0x0b
    635e:	3c 85       	ldd	r19, Y+12	; 0x0c
    6360:	4d 85       	ldd	r20, Y+13	; 0x0d
    6362:	5e 85       	ldd	r21, Y+14	; 0x0e
    6364:	ca 01       	movw	r24, r20
    6366:	b9 01       	movw	r22, r18
    6368:	0e 94 36 81 	call	0x1026c	; 0x1026c <__mulsi3>
    636c:	2b 01       	movw	r4, r22
    636e:	3c 01       	movw	r6, r24
    6370:	ad e3       	ldi	r26, 0x3D	; 61
    6372:	b0 e0       	ldi	r27, 0x00	; 0
    6374:	9b 01       	movw	r18, r22
    6376:	ac 01       	movw	r20, r24
    6378:	0e 94 cd 81 	call	0x1039a	; 0x1039a <__muluhisi3>
    637c:	7b 01       	movw	r14, r22
    637e:	8c 01       	movw	r16, r24
    6380:	68 94       	set
    6382:	13 f8       	bld	r1, 3
    6384:	15 95       	asr	r17
    6386:	07 95       	ror	r16
    6388:	f7 94       	ror	r15
    638a:	e7 94       	ror	r14
    638c:	16 94       	lsr	r1
    638e:	d1 f7       	brne	.-12     	; 0x6384 <task_twi1_baro+0x2a2>
    6390:	44 0c       	add	r4, r4
    6392:	55 1c       	adc	r5, r5
    6394:	66 1c       	adc	r6, r6
    6396:	77 1c       	adc	r7, r7
    6398:	8b 89       	ldd	r24, Y+19	; 0x13
    639a:	9c 89       	ldd	r25, Y+20	; 0x14
    639c:	ad 89       	ldd	r26, Y+21	; 0x15
    639e:	be 89       	ldd	r27, Y+22	; 0x16
    63a0:	84 32       	cpi	r24, 0x24	; 36
    63a2:	9a 4f       	sbci	r25, 0xFA	; 250
    63a4:	af 4f       	sbci	r26, 0xFF	; 255
    63a6:	bf 4f       	sbci	r27, 0xFF	; 255
    63a8:	c4 f5       	brge	.+112    	; 0x641a <task_twi1_baro+0x338>
    63aa:	6b a1       	ldd	r22, Y+35	; 0x23
    63ac:	7c a1       	ldd	r23, Y+36	; 0x24
    63ae:	8d a1       	ldd	r24, Y+37	; 0x25
    63b0:	9e a1       	ldd	r25, Y+38	; 0x26
    63b2:	64 55       	subi	r22, 0x54	; 84
    63b4:	72 4f       	sbci	r23, 0xF2	; 242
    63b6:	8f 4f       	sbci	r24, 0xFF	; 255
    63b8:	9f 4f       	sbci	r25, 0xFF	; 255
    63ba:	9b 01       	movw	r18, r22
    63bc:	ac 01       	movw	r20, r24
    63be:	0e 94 36 81 	call	0x1026c	; 0x1026c <__mulsi3>
    63c2:	9b 01       	movw	r18, r22
    63c4:	ac 01       	movw	r20, r24
    63c6:	22 0f       	add	r18, r18
    63c8:	33 1f       	adc	r19, r19
    63ca:	44 1f       	adc	r20, r20
    63cc:	55 1f       	adc	r21, r21
    63ce:	dc 01       	movw	r26, r24
    63d0:	cb 01       	movw	r24, r22
    63d2:	82 0f       	add	r24, r18
    63d4:	93 1f       	adc	r25, r19
    63d6:	a4 1f       	adc	r26, r20
    63d8:	b5 1f       	adc	r27, r21
    63da:	5c 01       	movw	r10, r24
    63dc:	6d 01       	movw	r12, r26
    63de:	aa 0c       	add	r10, r10
    63e0:	bb 1c       	adc	r11, r11
    63e2:	cc 1c       	adc	r12, r12
    63e4:	dd 1c       	adc	r13, r13
    63e6:	aa 0c       	add	r10, r10
    63e8:	bb 1c       	adc	r11, r11
    63ea:	cc 1c       	adc	r12, r12
    63ec:	dd 1c       	adc	r13, r13
    63ee:	8a 0d       	add	r24, r10
    63f0:	9b 1d       	adc	r25, r11
    63f2:	ac 1d       	adc	r26, r12
    63f4:	bd 1d       	adc	r27, r13
    63f6:	e8 0e       	add	r14, r24
    63f8:	f9 1e       	adc	r15, r25
    63fa:	0a 1f       	adc	r16, r26
    63fc:	1b 1f       	adc	r17, r27
    63fe:	da 01       	movw	r26, r20
    6400:	c9 01       	movw	r24, r18
    6402:	88 0f       	add	r24, r24
    6404:	99 1f       	adc	r25, r25
    6406:	aa 1f       	adc	r26, r26
    6408:	bb 1f       	adc	r27, r27
    640a:	88 0f       	add	r24, r24
    640c:	99 1f       	adc	r25, r25
    640e:	aa 1f       	adc	r26, r26
    6410:	bb 1f       	adc	r27, r27
    6412:	48 0e       	add	r4, r24
    6414:	59 1e       	adc	r5, r25
    6416:	6a 1e       	adc	r6, r26
    6418:	7b 1e       	adc	r7, r27
    641a:	2b 89       	ldd	r18, Y+19	; 0x13
    641c:	3c 89       	ldd	r19, Y+20	; 0x14
    641e:	4d 89       	ldd	r20, Y+21	; 0x15
    6420:	5e 89       	ldd	r21, Y+22	; 0x16
    6422:	6b 81       	ldd	r22, Y+3	; 0x03
    6424:	7c 81       	ldd	r23, Y+4	; 0x04
    6426:	8d 81       	ldd	r24, Y+5	; 0x05
    6428:	9e 81       	ldd	r25, Y+6	; 0x06
    642a:	26 1b       	sub	r18, r22
    642c:	37 0b       	sbc	r19, r23
    642e:	48 0b       	sbc	r20, r24
    6430:	59 0b       	sbc	r21, r25
    6432:	2b 8b       	std	Y+19, r18	; 0x13
    6434:	3c 8b       	std	Y+20, r19	; 0x14
    6436:	4d 8b       	std	Y+21, r20	; 0x15
    6438:	5e 8b       	std	Y+22, r21	; 0x16
    643a:	d8 01       	movw	r26, r16
    643c:	c7 01       	movw	r24, r14
    643e:	bb 0f       	add	r27, r27
    6440:	88 0b       	sbc	r24, r24
    6442:	98 2f       	mov	r25, r24
    6444:	dc 01       	movw	r26, r24
    6446:	8b 83       	std	Y+3, r24	; 0x03
    6448:	9c 83       	std	Y+4, r25	; 0x04
    644a:	ad 83       	std	Y+5, r26	; 0x05
    644c:	be 83       	std	Y+6, r27	; 0x06
    644e:	2f 85       	ldd	r18, Y+15	; 0x0f
    6450:	38 89       	ldd	r19, Y+16	; 0x10
    6452:	4b 8d       	ldd	r20, Y+27	; 0x1b
    6454:	5c 8d       	ldd	r21, Y+28	; 0x1c
    6456:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6458:	7e 8d       	ldd	r23, Y+30	; 0x1e
    645a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    645c:	98 a1       	ldd	r25, Y+32	; 0x20
    645e:	ae 2c       	mov	r10, r14
    6460:	bf 2c       	mov	r11, r15
    6462:	c0 2e       	mov	r12, r16
    6464:	d1 2e       	mov	r13, r17
    6466:	eb 80       	ldd	r14, Y+3	; 0x03
    6468:	fe 2c       	mov	r15, r14
    646a:	0e 2d       	mov	r16, r14
    646c:	1e 2d       	mov	r17, r14
    646e:	0e 94 3e 83 	call	0x1067c	; 0x1067c <__subdi3>
    6472:	2f 87       	std	Y+15, r18	; 0x0f
    6474:	38 8b       	std	Y+16, r19	; 0x10
    6476:	4b 8f       	std	Y+27, r20	; 0x1b
    6478:	5c 8f       	std	Y+28, r21	; 0x1c
    647a:	6d 8f       	std	Y+29, r22	; 0x1d
    647c:	7e 8f       	std	Y+30, r23	; 0x1e
    647e:	8f 8f       	std	Y+31, r24	; 0x1f
    6480:	98 a3       	std	Y+32, r25	; 0x20
    6482:	a3 01       	movw	r20, r6
    6484:	92 01       	movw	r18, r4
    6486:	55 0f       	add	r21, r21
    6488:	22 0b       	sbc	r18, r18
    648a:	32 2f       	mov	r19, r18
    648c:	a9 01       	movw	r20, r18
    648e:	2b 83       	std	Y+3, r18	; 0x03
    6490:	3c 83       	std	Y+4, r19	; 0x04
    6492:	4d 83       	std	Y+5, r20	; 0x05
    6494:	5e 83       	std	Y+6, r21	; 0x06
    6496:	23 2d       	mov	r18, r3
    6498:	32 2d       	mov	r19, r2
    649a:	49 89       	ldd	r20, Y+17	; 0x11
    649c:	5a 89       	ldd	r21, Y+18	; 0x12
    649e:	69 a1       	ldd	r22, Y+33	; 0x21
    64a0:	7a a1       	ldd	r23, Y+34	; 0x22
    64a2:	89 2d       	mov	r24, r9
    64a4:	98 2d       	mov	r25, r8
    64a6:	a4 2c       	mov	r10, r4
    64a8:	b5 2c       	mov	r11, r5
    64aa:	c6 2c       	mov	r12, r6
    64ac:	d7 2c       	mov	r13, r7
    64ae:	eb 80       	ldd	r14, Y+3	; 0x03
    64b0:	fe 2c       	mov	r15, r14
    64b2:	0e 2d       	mov	r16, r14
    64b4:	1e 2d       	mov	r17, r14
    64b6:	0e 94 3e 83 	call	0x1067c	; 0x1067c <__subdi3>
    64ba:	32 2e       	mov	r3, r18
    64bc:	23 2e       	mov	r2, r19
    64be:	49 8b       	std	Y+17, r20	; 0x11
    64c0:	5a 8b       	std	Y+18, r21	; 0x12
    64c2:	69 a3       	std	Y+33, r22	; 0x21
    64c4:	7a a3       	std	Y+34, r23	; 0x22
    64c6:	98 2e       	mov	r9, r24
    64c8:	89 2e       	mov	r8, r25
    64ca:	8f b7       	in	r24, 0x3f	; 63
    64cc:	89 83       	std	Y+1, r24	; 0x01
    64ce:	f8 94       	cli
    64d0:	79 80       	ldd	r7, Y+1	; 0x01
    64d2:	4b 89       	ldd	r20, Y+19	; 0x13
    64d4:	5c 89       	ldd	r21, Y+20	; 0x14
    64d6:	6d 89       	ldd	r22, Y+21	; 0x15
    64d8:	7e 89       	ldd	r23, Y+22	; 0x16
    64da:	40 93 18 27 	sts	0x2718, r20	; 0x802718 <g_twi1_baro_temp_100>
    64de:	50 93 19 27 	sts	0x2719, r21	; 0x802719 <g_twi1_baro_temp_100+0x1>
    64e2:	60 93 1a 27 	sts	0x271A, r22	; 0x80271a <g_twi1_baro_temp_100+0x2>
    64e6:	70 93 1b 27 	sts	0x271B, r23	; 0x80271b <g_twi1_baro_temp_100+0x3>
    64ea:	4f 89       	ldd	r20, Y+23	; 0x17
    64ec:	58 8d       	ldd	r21, Y+24	; 0x18
    64ee:	69 8d       	ldd	r22, Y+25	; 0x19
    64f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    64f2:	9a 01       	movw	r18, r20
    64f4:	ab 01       	movw	r20, r22
    64f6:	60 e0       	ldi	r22, 0x00	; 0
    64f8:	70 e0       	ldi	r23, 0x00	; 0
    64fa:	cb 01       	movw	r24, r22
    64fc:	2b 83       	std	Y+3, r18	; 0x03
    64fe:	3c 83       	std	Y+4, r19	; 0x04
    6500:	4d 83       	std	Y+5, r20	; 0x05
    6502:	5e 83       	std	Y+6, r21	; 0x06
    6504:	6f 83       	std	Y+7, r22	; 0x07
    6506:	78 87       	std	Y+8, r23	; 0x08
    6508:	89 87       	std	Y+9, r24	; 0x09
    650a:	9a 87       	std	Y+10, r25	; 0x0a
    650c:	a3 2c       	mov	r10, r3
    650e:	b2 2c       	mov	r11, r2
    6510:	c9 88       	ldd	r12, Y+17	; 0x11
    6512:	da 88       	ldd	r13, Y+18	; 0x12
    6514:	e9 a0       	ldd	r14, Y+33	; 0x21
    6516:	fa a0       	ldd	r15, Y+34	; 0x22
    6518:	09 2d       	mov	r16, r9
    651a:	18 2d       	mov	r17, r8
    651c:	60 e0       	ldi	r22, 0x00	; 0
    651e:	70 e0       	ldi	r23, 0x00	; 0
    6520:	80 e0       	ldi	r24, 0x00	; 0
    6522:	90 e0       	ldi	r25, 0x00	; 0
    6524:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    6528:	05 e1       	ldi	r16, 0x15	; 21
    652a:	0e 94 0b 83 	call	0x10616	; 0x10616 <__ashrdi3>
    652e:	af 84       	ldd	r10, Y+15	; 0x0f
    6530:	b8 88       	ldd	r11, Y+16	; 0x10
    6532:	cb 8c       	ldd	r12, Y+27	; 0x1b
    6534:	dc 8c       	ldd	r13, Y+28	; 0x1c
    6536:	ed 8c       	ldd	r14, Y+29	; 0x1d
    6538:	fe 8c       	ldd	r15, Y+30	; 0x1e
    653a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    653c:	18 a1       	ldd	r17, Y+32	; 0x20
    653e:	0e 94 3e 83 	call	0x1067c	; 0x1067c <__subdi3>
    6542:	0f e0       	ldi	r16, 0x0F	; 15
    6544:	0e 94 0b 83 	call	0x10616	; 0x10616 <__ashrdi3>
    6548:	20 93 14 27 	sts	0x2714, r18	; 0x802714 <g_twi1_baro_p_100>
    654c:	30 93 15 27 	sts	0x2715, r19	; 0x802715 <g_twi1_baro_p_100+0x1>
    6550:	40 93 16 27 	sts	0x2716, r20	; 0x802716 <g_twi1_baro_p_100+0x2>
    6554:	50 93 17 27 	sts	0x2717, r21	; 0x802717 <g_twi1_baro_p_100+0x3>
    6558:	7f be       	out	0x3f, r7	; 63
    655a:	a6 96       	adiw	r28, 0x26	; 38
    655c:	cd bf       	out	0x3d, r28	; 61
    655e:	de bf       	out	0x3e, r29	; 62
    6560:	df 91       	pop	r29
    6562:	cf 91       	pop	r28
    6564:	1f 91       	pop	r17
    6566:	0f 91       	pop	r16
    6568:	ff 90       	pop	r15
    656a:	ef 90       	pop	r14
    656c:	df 90       	pop	r13
    656e:	cf 90       	pop	r12
    6570:	bf 90       	pop	r11
    6572:	af 90       	pop	r10
    6574:	9f 90       	pop	r9
    6576:	8f 90       	pop	r8
    6578:	7f 90       	pop	r7
    657a:	6f 90       	pop	r6
    657c:	5f 90       	pop	r5
    657e:	4f 90       	pop	r4
    6580:	3f 90       	pop	r3
    6582:	2f 90       	pop	r2
    6584:	08 95       	ret

00006586 <service_twi1_baro>:
    6586:	cf 93       	push	r28
    6588:	df 93       	push	r29
    658a:	1f 92       	push	r1
    658c:	cd b7       	in	r28, 0x3d	; 61
    658e:	de b7       	in	r29, 0x3e	; 62
    6590:	44 23       	and	r20, r20
    6592:	59 f0       	breq	.+22     	; 0x65aa <service_twi1_baro+0x24>
    6594:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <s_step.7966>
    6598:	84 36       	cpi	r24, 0x64	; 100
    659a:	08 f4       	brcc	.+2      	; 0x659e <service_twi1_baro+0x18>
    659c:	cb c0       	rjmp	.+406    	; 0x6734 <service_twi1_baro+0x1ae>
    659e:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <s_step.7966>
    65a2:	81 e0       	ldi	r24, 0x01	; 1
    65a4:	80 93 7d 26 	sts	0x267D, r24	; 0x80267d <g_twi1_lock>
    65a8:	09 c0       	rjmp	.+18     	; 0x65bc <service_twi1_baro+0x36>
    65aa:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <s_step.7966>
    65ae:	85 31       	cpi	r24, 0x15	; 21
    65b0:	19 f1       	breq	.+70     	; 0x65f8 <service_twi1_baro+0x72>
    65b2:	8b 32       	cpi	r24, 0x2B	; 43
    65b4:	09 f4       	brne	.+2      	; 0x65b8 <service_twi1_baro+0x32>
    65b6:	5d c0       	rjmp	.+186    	; 0x6672 <service_twi1_baro+0xec>
    65b8:	81 11       	cpse	r24, r1
    65ba:	b1 c0       	rjmp	.+354    	; 0x671e <service_twi1_baro+0x198>
    65bc:	eb e2       	ldi	r30, 0x2B	; 43
    65be:	f0 e2       	ldi	r31, 0x20	; 32
    65c0:	86 e7       	ldi	r24, 0x76	; 118
    65c2:	80 83       	st	Z, r24
    65c4:	88 e4       	ldi	r24, 0x48	; 72
    65c6:	81 83       	std	Z+1, r24	; 0x01
    65c8:	81 e0       	ldi	r24, 0x01	; 1
    65ca:	90 e0       	ldi	r25, 0x00	; 0
    65cc:	84 83       	std	Z+4, r24	; 0x04
    65ce:	95 83       	std	Z+5, r25	; 0x05
    65d0:	10 86       	std	Z+8, r1	; 0x08
    65d2:	11 86       	std	Z+9, r1	; 0x09
    65d4:	40 e0       	ldi	r20, 0x00	; 0
    65d6:	bf 01       	movw	r22, r30
    65d8:	80 ea       	ldi	r24, 0xA0	; 160
    65da:	94 e0       	ldi	r25, 0x04	; 4
    65dc:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    65e0:	81 11       	cpse	r24, r1
    65e2:	05 c0       	rjmp	.+10     	; 0x65ee <service_twi1_baro+0x68>
    65e4:	81 e0       	ldi	r24, 0x01	; 1
    65e6:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7966>
    65ea:	80 e0       	ldi	r24, 0x00	; 0
    65ec:	ac c0       	rjmp	.+344    	; 0x6746 <service_twi1_baro+0x1c0>
    65ee:	88 ec       	ldi	r24, 0xC8	; 200
    65f0:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7966>
    65f4:	80 e0       	ldi	r24, 0x00	; 0
    65f6:	a7 c0       	rjmp	.+334    	; 0x6746 <service_twi1_baro+0x1c0>
    65f8:	eb e2       	ldi	r30, 0x2B	; 43
    65fa:	f0 e2       	ldi	r31, 0x20	; 32
    65fc:	11 82       	std	Z+1, r1	; 0x01
    65fe:	83 e0       	ldi	r24, 0x03	; 3
    6600:	90 e0       	ldi	r25, 0x00	; 0
    6602:	80 87       	std	Z+8, r24	; 0x08
    6604:	91 87       	std	Z+9, r25	; 0x09
    6606:	41 e0       	ldi	r20, 0x01	; 1
    6608:	bf 01       	movw	r22, r30
    660a:	80 ea       	ldi	r24, 0xA0	; 160
    660c:	94 e0       	ldi	r25, 0x04	; 4
    660e:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6612:	81 11       	cpse	r24, r1
    6614:	29 c0       	rjmp	.+82     	; 0x6668 <service_twi1_baro+0xe2>
    6616:	e3 e3       	ldi	r30, 0x33	; 51
    6618:	f5 e2       	ldi	r31, 0x25	; 37
    661a:	20 81       	ld	r18, Z
    661c:	81 81       	ldd	r24, Z+1	; 0x01
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	a0 e0       	ldi	r26, 0x00	; 0
    6622:	b0 e0       	ldi	r27, 0x00	; 0
    6624:	ba 2f       	mov	r27, r26
    6626:	a9 2f       	mov	r26, r25
    6628:	98 2f       	mov	r25, r24
    662a:	88 27       	eor	r24, r24
    662c:	a2 2b       	or	r26, r18
    662e:	22 81       	ldd	r18, Z+2	; 0x02
    6630:	82 2b       	or	r24, r18
    6632:	80 93 2b 23 	sts	0x232B, r24	; 0x80232b <s_twi1_baro_d1.7967>
    6636:	90 93 2c 23 	sts	0x232C, r25	; 0x80232c <s_twi1_baro_d1.7967+0x1>
    663a:	a0 93 2d 23 	sts	0x232D, r26	; 0x80232d <s_twi1_baro_d1.7967+0x2>
    663e:	b0 93 2e 23 	sts	0x232E, r27	; 0x80232e <s_twi1_baro_d1.7967+0x3>
    6642:	eb e2       	ldi	r30, 0x2B	; 43
    6644:	f0 e2       	ldi	r31, 0x20	; 32
    6646:	88 e5       	ldi	r24, 0x58	; 88
    6648:	81 83       	std	Z+1, r24	; 0x01
    664a:	10 86       	std	Z+8, r1	; 0x08
    664c:	11 86       	std	Z+9, r1	; 0x09
    664e:	40 e0       	ldi	r20, 0x00	; 0
    6650:	bf 01       	movw	r22, r30
    6652:	80 ea       	ldi	r24, 0xA0	; 160
    6654:	94 e0       	ldi	r25, 0x04	; 4
    6656:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    665a:	81 11       	cpse	r24, r1
    665c:	05 c0       	rjmp	.+10     	; 0x6668 <service_twi1_baro+0xe2>
    665e:	86 e1       	ldi	r24, 0x16	; 22
    6660:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7966>
    6664:	80 e0       	ldi	r24, 0x00	; 0
    6666:	6f c0       	rjmp	.+222    	; 0x6746 <service_twi1_baro+0x1c0>
    6668:	83 ed       	ldi	r24, 0xD3	; 211
    666a:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7966>
    666e:	80 e0       	ldi	r24, 0x00	; 0
    6670:	6a c0       	rjmp	.+212    	; 0x6746 <service_twi1_baro+0x1c0>
    6672:	eb e2       	ldi	r30, 0x2B	; 43
    6674:	f0 e2       	ldi	r31, 0x20	; 32
    6676:	11 82       	std	Z+1, r1	; 0x01
    6678:	83 e0       	ldi	r24, 0x03	; 3
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	80 87       	std	Z+8, r24	; 0x08
    667e:	91 87       	std	Z+9, r25	; 0x09
    6680:	41 e0       	ldi	r20, 0x01	; 1
    6682:	bf 01       	movw	r22, r30
    6684:	80 ea       	ldi	r24, 0xA0	; 160
    6686:	94 e0       	ldi	r25, 0x04	; 4
    6688:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    668c:	81 11       	cpse	r24, r1
    668e:	42 c0       	rjmp	.+132    	; 0x6714 <service_twi1_baro+0x18e>
    6690:	e3 e3       	ldi	r30, 0x33	; 51
    6692:	f5 e2       	ldi	r31, 0x25	; 37
    6694:	20 81       	ld	r18, Z
    6696:	81 81       	ldd	r24, Z+1	; 0x01
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	a0 e0       	ldi	r26, 0x00	; 0
    669c:	b0 e0       	ldi	r27, 0x00	; 0
    669e:	ba 2f       	mov	r27, r26
    66a0:	a9 2f       	mov	r26, r25
    66a2:	98 2f       	mov	r25, r24
    66a4:	88 27       	eor	r24, r24
    66a6:	a2 2b       	or	r26, r18
    66a8:	22 81       	ldd	r18, Z+2	; 0x02
    66aa:	82 2b       	or	r24, r18
    66ac:	80 93 27 23 	sts	0x2327, r24	; 0x802327 <s_twi1_baro_d2.7968>
    66b0:	90 93 28 23 	sts	0x2328, r25	; 0x802328 <s_twi1_baro_d2.7968+0x1>
    66b4:	a0 93 29 23 	sts	0x2329, r26	; 0x802329 <s_twi1_baro_d2.7968+0x2>
    66b8:	b0 93 2a 23 	sts	0x232A, r27	; 0x80232a <s_twi1_baro_d2.7968+0x3>
    66bc:	8f b7       	in	r24, 0x3f	; 63
    66be:	89 83       	std	Y+1, r24	; 0x01
    66c0:	f8 94       	cli
    66c2:	89 81       	ldd	r24, Y+1	; 0x01
    66c4:	40 91 2b 23 	lds	r20, 0x232B	; 0x80232b <s_twi1_baro_d1.7967>
    66c8:	50 91 2c 23 	lds	r21, 0x232C	; 0x80232c <s_twi1_baro_d1.7967+0x1>
    66cc:	60 91 2d 23 	lds	r22, 0x232D	; 0x80232d <s_twi1_baro_d1.7967+0x2>
    66d0:	70 91 2e 23 	lds	r23, 0x232E	; 0x80232e <s_twi1_baro_d1.7967+0x3>
    66d4:	40 93 20 27 	sts	0x2720, r20	; 0x802720 <g_twi1_baro_d1>
    66d8:	50 93 21 27 	sts	0x2721, r21	; 0x802721 <g_twi1_baro_d1+0x1>
    66dc:	60 93 22 27 	sts	0x2722, r22	; 0x802722 <g_twi1_baro_d1+0x2>
    66e0:	70 93 23 27 	sts	0x2723, r23	; 0x802723 <g_twi1_baro_d1+0x3>
    66e4:	40 91 27 23 	lds	r20, 0x2327	; 0x802327 <s_twi1_baro_d2.7968>
    66e8:	50 91 28 23 	lds	r21, 0x2328	; 0x802328 <s_twi1_baro_d2.7968+0x1>
    66ec:	60 91 29 23 	lds	r22, 0x2329	; 0x802329 <s_twi1_baro_d2.7968+0x2>
    66f0:	70 91 2a 23 	lds	r23, 0x232A	; 0x80232a <s_twi1_baro_d2.7968+0x3>
    66f4:	40 93 1c 27 	sts	0x271C, r20	; 0x80271c <g_twi1_baro_d2>
    66f8:	50 93 1d 27 	sts	0x271D, r21	; 0x80271d <g_twi1_baro_d2+0x1>
    66fc:	60 93 1e 27 	sts	0x271E, r22	; 0x80271e <g_twi1_baro_d2+0x2>
    6700:	70 93 1f 27 	sts	0x271F, r23	; 0x80271f <g_twi1_baro_d2+0x3>
    6704:	8f bf       	out	0x3f, r24	; 63
    6706:	8b e7       	ldi	r24, 0x7B	; 123
    6708:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7966>
    670c:	10 92 7d 26 	sts	0x267D, r1	; 0x80267d <g_twi1_lock>
    6710:	81 e0       	ldi	r24, 0x01	; 1
    6712:	19 c0       	rjmp	.+50     	; 0x6746 <service_twi1_baro+0x1c0>
    6714:	8f ed       	ldi	r24, 0xDF	; 223
    6716:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7966>
    671a:	80 e0       	ldi	r24, 0x00	; 0
    671c:	14 c0       	rjmp	.+40     	; 0x6746 <service_twi1_baro+0x1c0>
    671e:	84 36       	cpi	r24, 0x64	; 100
    6720:	28 f4       	brcc	.+10     	; 0x672c <service_twi1_baro+0x1a6>
    6722:	8f 5f       	subi	r24, 0xFF	; 255
    6724:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.7966>
    6728:	80 e0       	ldi	r24, 0x00	; 0
    672a:	0d c0       	rjmp	.+26     	; 0x6746 <service_twi1_baro+0x1c0>
    672c:	10 92 7d 26 	sts	0x267D, r1	; 0x80267d <g_twi1_lock>
    6730:	80 e0       	ldi	r24, 0x00	; 0
    6732:	09 c0       	rjmp	.+18     	; 0x6746 <service_twi1_baro+0x1c0>
    6734:	85 31       	cpi	r24, 0x15	; 21
    6736:	09 f4       	brne	.+2      	; 0x673a <service_twi1_baro+0x1b4>
    6738:	5f cf       	rjmp	.-322    	; 0x65f8 <service_twi1_baro+0x72>
    673a:	8b 32       	cpi	r24, 0x2B	; 43
    673c:	09 f4       	brne	.+2      	; 0x6740 <service_twi1_baro+0x1ba>
    673e:	99 cf       	rjmp	.-206    	; 0x6672 <service_twi1_baro+0xec>
    6740:	81 11       	cpse	r24, r1
    6742:	ef cf       	rjmp	.-34     	; 0x6722 <service_twi1_baro+0x19c>
    6744:	3b cf       	rjmp	.-394    	; 0x65bc <service_twi1_baro+0x36>
    6746:	0f 90       	pop	r0
    6748:	df 91       	pop	r29
    674a:	cf 91       	pop	r28
    674c:	08 95       	ret

0000674e <twi2_waitUntilReady>:
    674e:	cf 92       	push	r12
    6750:	df 92       	push	r13
    6752:	ef 92       	push	r14
    6754:	ff 92       	push	r15
    6756:	0f 93       	push	r16
    6758:	1f 93       	push	r17
    675a:	cf 93       	push	r28
    675c:	e7 e1       	ldi	r30, 0x17	; 23
    675e:	f0 e2       	ldi	r31, 0x20	; 32
    6760:	83 e0       	ldi	r24, 0x03	; 3
    6762:	81 83       	std	Z+1, r24	; 0x01
    6764:	81 e0       	ldi	r24, 0x01	; 1
    6766:	90 e0       	ldi	r25, 0x00	; 0
    6768:	84 83       	std	Z+4, r24	; 0x04
    676a:	95 83       	std	Z+5, r25	; 0x05
    676c:	8f 01       	movw	r16, r30
    676e:	cc 24       	eor	r12, r12
    6770:	c3 94       	inc	r12
    6772:	d1 2c       	mov	r13, r1
    6774:	0f 2e       	mov	r0, r31
    6776:	fb e2       	ldi	r31, 0x2B	; 43
    6778:	ef 2e       	mov	r14, r31
    677a:	f5 e2       	ldi	r31, 0x25	; 37
    677c:	ff 2e       	mov	r15, r31
    677e:	f0 2d       	mov	r31, r0
    6780:	f8 01       	movw	r30, r16
    6782:	c0 86       	std	Z+8, r12	; 0x08
    6784:	d1 86       	std	Z+9, r13	; 0x09
    6786:	41 e0       	ldi	r20, 0x01	; 1
    6788:	b8 01       	movw	r22, r16
    678a:	80 e8       	ldi	r24, 0x80	; 128
    678c:	94 e0       	ldi	r25, 0x04	; 4
    678e:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6792:	f7 01       	movw	r30, r14
    6794:	c0 81       	ld	r28, Z
    6796:	9c 2f       	mov	r25, r28
    6798:	90 78       	andi	r25, 0x80	; 128
    679a:	81 11       	cpse	r24, r1
    679c:	0d c0       	rjmp	.+26     	; 0x67b8 <twi2_waitUntilReady+0x6a>
    679e:	91 f0       	breq	.+36     	; 0x67c4 <twi2_waitUntilReady+0x76>
    67a0:	8c 2f       	mov	r24, r28
    67a2:	81 78       	andi	r24, 0x81	; 129
    67a4:	81 38       	cpi	r24, 0x81	; 129
    67a6:	29 f4       	brne	.+10     	; 0x67b2 <twi2_waitUntilReady+0x64>
    67a8:	65 ef       	ldi	r22, 0xF5	; 245
    67aa:	71 e0       	ldi	r23, 0x01	; 1
    67ac:	80 e0       	ldi	r24, 0x00	; 0
    67ae:	90 e0       	ldi	r25, 0x00	; 0
    67b0:	68 d9       	rcall	.-3376   	; 0x5a82 <__portable_avr_delay_cycles>
    67b2:	c0 fd       	sbrc	r28, 0
    67b4:	e5 cf       	rjmp	.-54     	; 0x6780 <twi2_waitUntilReady+0x32>
    67b6:	0c c0       	rjmp	.+24     	; 0x67d0 <twi2_waitUntilReady+0x82>
    67b8:	65 e0       	ldi	r22, 0x05	; 5
    67ba:	70 e0       	ldi	r23, 0x00	; 0
    67bc:	80 e0       	ldi	r24, 0x00	; 0
    67be:	90 e0       	ldi	r25, 0x00	; 0
    67c0:	60 d9       	rcall	.-3392   	; 0x5a82 <__portable_avr_delay_cycles>
    67c2:	de cf       	rjmp	.-68     	; 0x6780 <twi2_waitUntilReady+0x32>
    67c4:	65 e0       	ldi	r22, 0x05	; 5
    67c6:	70 e0       	ldi	r23, 0x00	; 0
    67c8:	80 e0       	ldi	r24, 0x00	; 0
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    67cc:	5a d9       	rcall	.-3404   	; 0x5a82 <__portable_avr_delay_cycles>
    67ce:	d8 cf       	rjmp	.-80     	; 0x6780 <twi2_waitUntilReady+0x32>
    67d0:	cf 91       	pop	r28
    67d2:	1f 91       	pop	r17
    67d4:	0f 91       	pop	r16
    67d6:	ff 90       	pop	r15
    67d8:	ef 90       	pop	r14
    67da:	df 90       	pop	r13
    67dc:	cf 90       	pop	r12
    67de:	08 95       	ret

000067e0 <twi2_set_leds>:
    67e0:	cf 93       	push	r28
    67e2:	c8 2f       	mov	r28, r24
    67e4:	b4 df       	rcall	.-152    	; 0x674e <twi2_waitUntilReady>
    67e6:	e7 e1       	ldi	r30, 0x17	; 23
    67e8:	f0 e2       	ldi	r31, 0x20	; 32
    67ea:	80 e7       	ldi	r24, 0x70	; 112
    67ec:	81 83       	std	Z+1, r24	; 0x01
    67ee:	c3 70       	andi	r28, 0x03	; 3
    67f0:	c0 93 2b 25 	sts	0x252B, r28	; 0x80252b <twi2_m_data>
    67f4:	81 e0       	ldi	r24, 0x01	; 1
    67f6:	90 e0       	ldi	r25, 0x00	; 0
    67f8:	80 87       	std	Z+8, r24	; 0x08
    67fa:	91 87       	std	Z+9, r25	; 0x09
    67fc:	40 e0       	ldi	r20, 0x00	; 0
    67fe:	bf 01       	movw	r22, r30
    6800:	80 e8       	ldi	r24, 0x80	; 128
    6802:	94 e0       	ldi	r25, 0x04	; 4
    6804:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6808:	65 e0       	ldi	r22, 0x05	; 5
    680a:	70 e0       	ldi	r23, 0x00	; 0
    680c:	80 e0       	ldi	r24, 0x00	; 0
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	38 d9       	rcall	.-3472   	; 0x5a82 <__portable_avr_delay_cycles>
    6812:	cf 91       	pop	r28
    6814:	08 95       	ret

00006816 <twi2_set_ledbl>:
    6816:	cf 93       	push	r28
    6818:	df 93       	push	r29
    681a:	d8 2f       	mov	r29, r24
    681c:	c6 2f       	mov	r28, r22
    681e:	97 df       	rcall	.-210    	; 0x674e <twi2_waitUntilReady>
    6820:	e7 e1       	ldi	r30, 0x17	; 23
    6822:	f0 e2       	ldi	r31, 0x20	; 32
    6824:	84 e7       	ldi	r24, 0x74	; 116
    6826:	81 83       	std	Z+1, r24	; 0x01
    6828:	ab e2       	ldi	r26, 0x2B	; 43
    682a:	b5 e2       	ldi	r27, 0x25	; 37
    682c:	dc 93       	st	X, r29
    682e:	11 96       	adiw	r26, 0x01	; 1
    6830:	cc 93       	st	X, r28
    6832:	82 e0       	ldi	r24, 0x02	; 2
    6834:	90 e0       	ldi	r25, 0x00	; 0
    6836:	80 87       	std	Z+8, r24	; 0x08
    6838:	91 87       	std	Z+9, r25	; 0x09
    683a:	40 e0       	ldi	r20, 0x00	; 0
    683c:	bf 01       	movw	r22, r30
    683e:	80 e8       	ldi	r24, 0x80	; 128
    6840:	94 e0       	ldi	r25, 0x04	; 4
    6842:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6846:	65 e0       	ldi	r22, 0x05	; 5
    6848:	70 e0       	ldi	r23, 0x00	; 0
    684a:	80 e0       	ldi	r24, 0x00	; 0
    684c:	90 e0       	ldi	r25, 0x00	; 0
    684e:	19 d9       	rcall	.-3534   	; 0x5a82 <__portable_avr_delay_cycles>
    6850:	df 91       	pop	r29
    6852:	cf 91       	pop	r28
    6854:	08 95       	ret

00006856 <twi2_set_bias>:
    6856:	cf 93       	push	r28
    6858:	c8 2f       	mov	r28, r24
    685a:	79 df       	rcall	.-270    	; 0x674e <twi2_waitUntilReady>
    685c:	e7 e1       	ldi	r30, 0x17	; 23
    685e:	f0 e2       	ldi	r31, 0x20	; 32
    6860:	85 e7       	ldi	r24, 0x75	; 117
    6862:	81 83       	std	Z+1, r24	; 0x01
    6864:	c0 93 2b 25 	sts	0x252B, r28	; 0x80252b <twi2_m_data>
    6868:	81 e0       	ldi	r24, 0x01	; 1
    686a:	90 e0       	ldi	r25, 0x00	; 0
    686c:	80 87       	std	Z+8, r24	; 0x08
    686e:	91 87       	std	Z+9, r25	; 0x09
    6870:	40 e0       	ldi	r20, 0x00	; 0
    6872:	bf 01       	movw	r22, r30
    6874:	80 e8       	ldi	r24, 0x80	; 128
    6876:	94 e0       	ldi	r25, 0x04	; 4
    6878:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    687c:	65 e0       	ldi	r22, 0x05	; 5
    687e:	70 e0       	ldi	r23, 0x00	; 0
    6880:	80 e0       	ldi	r24, 0x00	; 0
    6882:	90 e0       	ldi	r25, 0x00	; 0
    6884:	fe d8       	rcall	.-3588   	; 0x5a82 <__portable_avr_delay_cycles>
    6886:	cf 91       	pop	r28
    6888:	08 95       	ret

0000688a <twi2_set_beep>:
    688a:	cf 93       	push	r28
    688c:	df 93       	push	r29
    688e:	c8 2f       	mov	r28, r24
    6890:	d6 2f       	mov	r29, r22
    6892:	5d df       	rcall	.-326    	; 0x674e <twi2_waitUntilReady>
    6894:	e7 e1       	ldi	r30, 0x17	; 23
    6896:	f0 e2       	ldi	r31, 0x20	; 32
    6898:	81 e7       	ldi	r24, 0x71	; 113
    689a:	81 83       	std	Z+1, r24	; 0x01
    689c:	ab e2       	ldi	r26, 0x2B	; 43
    689e:	b5 e2       	ldi	r27, 0x25	; 37
    68a0:	dc 93       	st	X, r29
    68a2:	11 96       	adiw	r26, 0x01	; 1
    68a4:	cc 93       	st	X, r28
    68a6:	82 e0       	ldi	r24, 0x02	; 2
    68a8:	90 e0       	ldi	r25, 0x00	; 0
    68aa:	80 87       	std	Z+8, r24	; 0x08
    68ac:	91 87       	std	Z+9, r25	; 0x09
    68ae:	40 e0       	ldi	r20, 0x00	; 0
    68b0:	bf 01       	movw	r22, r30
    68b2:	80 e8       	ldi	r24, 0x80	; 128
    68b4:	94 e0       	ldi	r25, 0x04	; 4
    68b6:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    68ba:	65 e0       	ldi	r22, 0x05	; 5
    68bc:	70 e0       	ldi	r23, 0x00	; 0
    68be:	80 e0       	ldi	r24, 0x00	; 0
    68c0:	90 e0       	ldi	r25, 0x00	; 0
    68c2:	df d8       	rcall	.-3650   	; 0x5a82 <__portable_avr_delay_cycles>
    68c4:	df 91       	pop	r29
    68c6:	cf 91       	pop	r28
    68c8:	08 95       	ret

000068ca <twi_init>:
    68ca:	e0 e8       	ldi	r30, 0x80	; 128
    68cc:	f6 e0       	ldi	r31, 0x06	; 6
    68ce:	88 e3       	ldi	r24, 0x38	; 56
    68d0:	80 8b       	std	Z+16, r24	; 0x10
    68d2:	81 8b       	std	Z+17, r24	; 0x11
    68d4:	e0 e4       	ldi	r30, 0x40	; 64
    68d6:	f6 e0       	ldi	r31, 0x06	; 6
    68d8:	80 8b       	std	Z+16, r24	; 0x10
    68da:	81 8b       	std	Z+17, r24	; 0x11
    68dc:	08 95       	ret

000068de <isr_100ms_twi1_onboard>:
    68de:	cf 92       	push	r12
    68e0:	ef 92       	push	r14
    68e2:	0f 93       	push	r16
    68e4:	78 94       	sei
    68e6:	80 91 72 27 	lds	r24, 0x2772	; 0x802772 <g_twi1_gyro_valid>
    68ea:	88 23       	and	r24, r24
    68ec:	09 f4       	brne	.+2      	; 0x68f0 <isr_100ms_twi1_onboard+0x12>
    68ee:	09 c1       	rjmp	.+530    	; 0x6b02 <isr_100ms_twi1_onboard+0x224>
    68f0:	80 91 7d 26 	lds	r24, 0x267D	; 0x80267d <g_twi1_lock>
    68f4:	81 11       	cpse	r24, r1
    68f6:	05 c1       	rjmp	.+522    	; 0x6b02 <isr_100ms_twi1_onboard+0x224>
    68f8:	eb e2       	ldi	r30, 0x2B	; 43
    68fa:	f0 e2       	ldi	r31, 0x20	; 32
    68fc:	88 e6       	ldi	r24, 0x68	; 104
    68fe:	80 83       	st	Z, r24
    6900:	8b e3       	ldi	r24, 0x3B	; 59
    6902:	81 83       	std	Z+1, r24	; 0x01
    6904:	81 e0       	ldi	r24, 0x01	; 1
    6906:	90 e0       	ldi	r25, 0x00	; 0
    6908:	84 83       	std	Z+4, r24	; 0x04
    690a:	95 83       	std	Z+5, r25	; 0x05
    690c:	88 e0       	ldi	r24, 0x08	; 8
    690e:	90 e0       	ldi	r25, 0x00	; 0
    6910:	80 87       	std	Z+8, r24	; 0x08
    6912:	91 87       	std	Z+9, r25	; 0x09
    6914:	41 e0       	ldi	r20, 0x01	; 1
    6916:	bf 01       	movw	r22, r30
    6918:	80 ea       	ldi	r24, 0xA0	; 160
    691a:	94 e0       	ldi	r25, 0x04	; 4
    691c:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6920:	81 11       	cpse	r24, r1
    6922:	ef c0       	rjmp	.+478    	; 0x6b02 <isr_100ms_twi1_onboard+0x224>
    6924:	e3 e3       	ldi	r30, 0x33	; 51
    6926:	f5 e2       	ldi	r31, 0x25	; 37
    6928:	80 81       	ld	r24, Z
    692a:	90 e0       	ldi	r25, 0x00	; 0
    692c:	98 2f       	mov	r25, r24
    692e:	88 27       	eor	r24, r24
    6930:	21 81       	ldd	r18, Z+1	; 0x01
    6932:	82 2b       	or	r24, r18
    6934:	80 93 69 27 	sts	0x2769, r24	; 0x802769 <g_twi1_gyro_1_accel_x>
    6938:	90 93 6a 27 	sts	0x276A, r25	; 0x80276a <g_twi1_gyro_1_accel_x+0x1>
    693c:	82 81       	ldd	r24, Z+2	; 0x02
    693e:	90 e0       	ldi	r25, 0x00	; 0
    6940:	98 2f       	mov	r25, r24
    6942:	88 27       	eor	r24, r24
    6944:	23 81       	ldd	r18, Z+3	; 0x03
    6946:	82 2b       	or	r24, r18
    6948:	80 93 67 27 	sts	0x2767, r24	; 0x802767 <g_twi1_gyro_1_accel_y>
    694c:	90 93 68 27 	sts	0x2768, r25	; 0x802768 <g_twi1_gyro_1_accel_y+0x1>
    6950:	84 81       	ldd	r24, Z+4	; 0x04
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	98 2f       	mov	r25, r24
    6956:	88 27       	eor	r24, r24
    6958:	25 81       	ldd	r18, Z+5	; 0x05
    695a:	82 2b       	or	r24, r18
    695c:	80 93 65 27 	sts	0x2765, r24	; 0x802765 <g_twi1_gyro_1_accel_z>
    6960:	90 93 66 27 	sts	0x2766, r25	; 0x802766 <g_twi1_gyro_1_accel_z+0x1>
    6964:	86 81       	ldd	r24, Z+6	; 0x06
    6966:	90 e0       	ldi	r25, 0x00	; 0
    6968:	98 2f       	mov	r25, r24
    696a:	88 27       	eor	r24, r24
    696c:	27 81       	ldd	r18, Z+7	; 0x07
    696e:	82 2b       	or	r24, r18
    6970:	80 93 6f 27 	sts	0x276F, r24	; 0x80276f <g_twi1_gyro_1_temp>
    6974:	90 93 70 27 	sts	0x2770, r25	; 0x802770 <g_twi1_gyro_1_temp+0x1>
    6978:	eb e2       	ldi	r30, 0x2B	; 43
    697a:	f0 e2       	ldi	r31, 0x20	; 32
    697c:	88 e6       	ldi	r24, 0x68	; 104
    697e:	80 83       	st	Z, r24
    6980:	83 e4       	ldi	r24, 0x43	; 67
    6982:	81 83       	std	Z+1, r24	; 0x01
    6984:	81 e0       	ldi	r24, 0x01	; 1
    6986:	90 e0       	ldi	r25, 0x00	; 0
    6988:	84 83       	std	Z+4, r24	; 0x04
    698a:	95 83       	std	Z+5, r25	; 0x05
    698c:	86 e0       	ldi	r24, 0x06	; 6
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	80 87       	std	Z+8, r24	; 0x08
    6992:	91 87       	std	Z+9, r25	; 0x09
    6994:	41 e0       	ldi	r20, 0x01	; 1
    6996:	bf 01       	movw	r22, r30
    6998:	80 ea       	ldi	r24, 0xA0	; 160
    699a:	94 e0       	ldi	r25, 0x04	; 4
    699c:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    69a0:	81 11       	cpse	r24, r1
    69a2:	af c0       	rjmp	.+350    	; 0x6b02 <isr_100ms_twi1_onboard+0x224>
    69a4:	e3 e3       	ldi	r30, 0x33	; 51
    69a6:	f5 e2       	ldi	r31, 0x25	; 37
    69a8:	80 81       	ld	r24, Z
    69aa:	90 e0       	ldi	r25, 0x00	; 0
    69ac:	98 2f       	mov	r25, r24
    69ae:	88 27       	eor	r24, r24
    69b0:	21 81       	ldd	r18, Z+1	; 0x01
    69b2:	82 2b       	or	r24, r18
    69b4:	80 93 5d 27 	sts	0x275D, r24	; 0x80275d <g_twi1_gyro_1_gyro_x>
    69b8:	90 93 5e 27 	sts	0x275E, r25	; 0x80275e <g_twi1_gyro_1_gyro_x+0x1>
    69bc:	82 81       	ldd	r24, Z+2	; 0x02
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	98 2f       	mov	r25, r24
    69c2:	88 27       	eor	r24, r24
    69c4:	23 81       	ldd	r18, Z+3	; 0x03
    69c6:	82 2b       	or	r24, r18
    69c8:	80 93 5b 27 	sts	0x275B, r24	; 0x80275b <g_twi1_gyro_1_gyro_y>
    69cc:	90 93 5c 27 	sts	0x275C, r25	; 0x80275c <g_twi1_gyro_1_gyro_y+0x1>
    69d0:	84 81       	ldd	r24, Z+4	; 0x04
    69d2:	90 e0       	ldi	r25, 0x00	; 0
    69d4:	98 2f       	mov	r25, r24
    69d6:	88 27       	eor	r24, r24
    69d8:	25 81       	ldd	r18, Z+5	; 0x05
    69da:	82 2b       	or	r24, r18
    69dc:	80 93 59 27 	sts	0x2759, r24	; 0x802759 <g_twi1_gyro_1_gyro_z>
    69e0:	90 93 5a 27 	sts	0x275A, r25	; 0x80275a <g_twi1_gyro_1_gyro_z+0x1>
    69e4:	eb e2       	ldi	r30, 0x2B	; 43
    69e6:	f0 e2       	ldi	r31, 0x20	; 32
    69e8:	8c e0       	ldi	r24, 0x0C	; 12
    69ea:	80 83       	st	Z, r24
    69ec:	82 e0       	ldi	r24, 0x02	; 2
    69ee:	81 83       	std	Z+1, r24	; 0x01
    69f0:	81 e0       	ldi	r24, 0x01	; 1
    69f2:	90 e0       	ldi	r25, 0x00	; 0
    69f4:	84 83       	std	Z+4, r24	; 0x04
    69f6:	95 83       	std	Z+5, r25	; 0x05
    69f8:	80 87       	std	Z+8, r24	; 0x08
    69fa:	91 87       	std	Z+9, r25	; 0x09
    69fc:	41 e0       	ldi	r20, 0x01	; 1
    69fe:	bf 01       	movw	r22, r30
    6a00:	80 ea       	ldi	r24, 0xA0	; 160
    6a02:	94 e0       	ldi	r25, 0x04	; 4
    6a04:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6a08:	81 11       	cpse	r24, r1
    6a0a:	7b c0       	rjmp	.+246    	; 0x6b02 <isr_100ms_twi1_onboard+0x224>
    6a0c:	80 91 33 25 	lds	r24, 0x2533	; 0x802533 <twi1_m_data>
    6a10:	80 ff       	sbrs	r24, 0
    6a12:	77 c0       	rjmp	.+238    	; 0x6b02 <isr_100ms_twi1_onboard+0x224>
    6a14:	eb e2       	ldi	r30, 0x2B	; 43
    6a16:	f0 e2       	ldi	r31, 0x20	; 32
    6a18:	8c e0       	ldi	r24, 0x0C	; 12
    6a1a:	80 83       	st	Z, r24
    6a1c:	83 e0       	ldi	r24, 0x03	; 3
    6a1e:	81 83       	std	Z+1, r24	; 0x01
    6a20:	81 e0       	ldi	r24, 0x01	; 1
    6a22:	90 e0       	ldi	r25, 0x00	; 0
    6a24:	84 83       	std	Z+4, r24	; 0x04
    6a26:	95 83       	std	Z+5, r25	; 0x05
    6a28:	86 e0       	ldi	r24, 0x06	; 6
    6a2a:	90 e0       	ldi	r25, 0x00	; 0
    6a2c:	80 87       	std	Z+8, r24	; 0x08
    6a2e:	91 87       	std	Z+9, r25	; 0x09
    6a30:	41 e0       	ldi	r20, 0x01	; 1
    6a32:	bf 01       	movw	r22, r30
    6a34:	80 ea       	ldi	r24, 0xA0	; 160
    6a36:	94 e0       	ldi	r25, 0x04	; 4
    6a38:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6a3c:	81 11       	cpse	r24, r1
    6a3e:	61 c0       	rjmp	.+194    	; 0x6b02 <isr_100ms_twi1_onboard+0x224>
    6a40:	e3 e3       	ldi	r30, 0x33	; 51
    6a42:	f5 e2       	ldi	r31, 0x25	; 37
    6a44:	81 81       	ldd	r24, Z+1	; 0x01
    6a46:	90 e0       	ldi	r25, 0x00	; 0
    6a48:	98 2f       	mov	r25, r24
    6a4a:	88 27       	eor	r24, r24
    6a4c:	20 81       	ld	r18, Z
    6a4e:	82 2b       	or	r24, r18
    6a50:	20 91 49 20 	lds	r18, 0x2049	; 0x802049 <g_twi1_gyro_2_ofsx>
    6a54:	30 91 4a 20 	lds	r19, 0x204A	; 0x80204a <g_twi1_gyro_2_ofsx+0x1>
    6a58:	82 0f       	add	r24, r18
    6a5a:	93 1f       	adc	r25, r19
    6a5c:	80 93 47 27 	sts	0x2747, r24	; 0x802747 <g_twi1_gyro_2_mag_x>
    6a60:	90 93 48 27 	sts	0x2748, r25	; 0x802748 <g_twi1_gyro_2_mag_x+0x1>
    6a64:	83 81       	ldd	r24, Z+3	; 0x03
    6a66:	90 e0       	ldi	r25, 0x00	; 0
    6a68:	98 2f       	mov	r25, r24
    6a6a:	88 27       	eor	r24, r24
    6a6c:	22 81       	ldd	r18, Z+2	; 0x02
    6a6e:	82 2b       	or	r24, r18
    6a70:	20 91 47 20 	lds	r18, 0x2047	; 0x802047 <g_twi1_gyro_2_ofsy>
    6a74:	30 91 48 20 	lds	r19, 0x2048	; 0x802048 <g_twi1_gyro_2_ofsy+0x1>
    6a78:	82 0f       	add	r24, r18
    6a7a:	93 1f       	adc	r25, r19
    6a7c:	80 93 45 27 	sts	0x2745, r24	; 0x802745 <g_twi1_gyro_2_mag_y>
    6a80:	90 93 46 27 	sts	0x2746, r25	; 0x802746 <g_twi1_gyro_2_mag_y+0x1>
    6a84:	85 81       	ldd	r24, Z+5	; 0x05
    6a86:	90 e0       	ldi	r25, 0x00	; 0
    6a88:	98 2f       	mov	r25, r24
    6a8a:	88 27       	eor	r24, r24
    6a8c:	24 81       	ldd	r18, Z+4	; 0x04
    6a8e:	82 2b       	or	r24, r18
    6a90:	20 91 45 20 	lds	r18, 0x2045	; 0x802045 <g_twi1_gyro_2_ofsz>
    6a94:	30 91 46 20 	lds	r19, 0x2046	; 0x802046 <g_twi1_gyro_2_ofsz+0x1>
    6a98:	82 0f       	add	r24, r18
    6a9a:	93 1f       	adc	r25, r19
    6a9c:	80 93 43 27 	sts	0x2743, r24	; 0x802743 <g_twi1_gyro_2_mag_z>
    6aa0:	90 93 44 27 	sts	0x2744, r25	; 0x802744 <g_twi1_gyro_2_mag_z+0x1>
    6aa4:	eb e2       	ldi	r30, 0x2B	; 43
    6aa6:	f0 e2       	ldi	r31, 0x20	; 32
    6aa8:	8c e0       	ldi	r24, 0x0C	; 12
    6aaa:	80 83       	st	Z, r24
    6aac:	89 e0       	ldi	r24, 0x09	; 9
    6aae:	81 83       	std	Z+1, r24	; 0x01
    6ab0:	81 e0       	ldi	r24, 0x01	; 1
    6ab2:	90 e0       	ldi	r25, 0x00	; 0
    6ab4:	84 83       	std	Z+4, r24	; 0x04
    6ab6:	95 83       	std	Z+5, r25	; 0x05
    6ab8:	80 87       	std	Z+8, r24	; 0x08
    6aba:	91 87       	std	Z+9, r25	; 0x09
    6abc:	41 e0       	ldi	r20, 0x01	; 1
    6abe:	bf 01       	movw	r22, r30
    6ac0:	80 ea       	ldi	r24, 0xA0	; 160
    6ac2:	94 e0       	ldi	r25, 0x04	; 4
    6ac4:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6ac8:	81 11       	cpse	r24, r1
    6aca:	1b c0       	rjmp	.+54     	; 0x6b02 <isr_100ms_twi1_onboard+0x224>
    6acc:	80 91 33 25 	lds	r24, 0x2533	; 0x802533 <twi1_m_data>
    6ad0:	83 ff       	sbrs	r24, 3
    6ad2:	0c c0       	rjmp	.+24     	; 0x6aec <isr_100ms_twi1_onboard+0x20e>
    6ad4:	10 92 47 27 	sts	0x2747, r1	; 0x802747 <g_twi1_gyro_2_mag_x>
    6ad8:	10 92 48 27 	sts	0x2748, r1	; 0x802748 <g_twi1_gyro_2_mag_x+0x1>
    6adc:	10 92 45 27 	sts	0x2745, r1	; 0x802745 <g_twi1_gyro_2_mag_y>
    6ae0:	10 92 46 27 	sts	0x2746, r1	; 0x802746 <g_twi1_gyro_2_mag_y+0x1>
    6ae4:	10 92 43 27 	sts	0x2743, r1	; 0x802743 <g_twi1_gyro_2_mag_z>
    6ae8:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <g_twi1_gyro_2_mag_z+0x1>
    6aec:	c1 2c       	mov	r12, r1
    6aee:	e1 2c       	mov	r14, r1
    6af0:	01 e0       	ldi	r16, 0x01	; 1
    6af2:	20 e0       	ldi	r18, 0x00	; 0
    6af4:	30 e0       	ldi	r19, 0x00	; 0
    6af6:	a9 01       	movw	r20, r18
    6af8:	60 e0       	ldi	r22, 0x00	; 0
    6afa:	89 e9       	ldi	r24, 0x99	; 153
    6afc:	9d e2       	ldi	r25, 0x2D	; 45
    6afe:	0e 94 dd 67 	call	0xcfba	; 0xcfba <sched_push>
    6b02:	0f 91       	pop	r16
    6b04:	ef 90       	pop	r14
    6b06:	cf 90       	pop	r12
    6b08:	08 95       	ret

00006b0a <isr_500ms_twi1_onboard>:
    6b0a:	8f 92       	push	r8
    6b0c:	9f 92       	push	r9
    6b0e:	af 92       	push	r10
    6b10:	bf 92       	push	r11
    6b12:	cf 92       	push	r12
    6b14:	ef 92       	push	r14
    6b16:	0f 93       	push	r16
    6b18:	4b 01       	movw	r8, r22
    6b1a:	5c 01       	movw	r10, r24
    6b1c:	78 94       	sei
    6b1e:	80 91 13 27 	lds	r24, 0x2713	; 0x802713 <g_twi1_hygro_valid>
    6b22:	88 23       	and	r24, r24
    6b24:	09 f4       	brne	.+2      	; 0x6b28 <isr_500ms_twi1_onboard+0x1e>
    6b26:	52 c0       	rjmp	.+164    	; 0x6bcc <isr_500ms_twi1_onboard+0xc2>
    6b28:	80 91 7d 26 	lds	r24, 0x267D	; 0x80267d <g_twi1_lock>
    6b2c:	81 11       	cpse	r24, r1
    6b2e:	4e c0       	rjmp	.+156    	; 0x6bcc <isr_500ms_twi1_onboard+0xc2>
    6b30:	eb e2       	ldi	r30, 0x2B	; 43
    6b32:	f0 e2       	ldi	r31, 0x20	; 32
    6b34:	84 e4       	ldi	r24, 0x44	; 68
    6b36:	80 83       	st	Z, r24
    6b38:	80 ee       	ldi	r24, 0xE0	; 224
    6b3a:	81 83       	std	Z+1, r24	; 0x01
    6b3c:	12 82       	std	Z+2, r1	; 0x02
    6b3e:	82 e0       	ldi	r24, 0x02	; 2
    6b40:	90 e0       	ldi	r25, 0x00	; 0
    6b42:	84 83       	std	Z+4, r24	; 0x04
    6b44:	95 83       	std	Z+5, r25	; 0x05
    6b46:	85 e0       	ldi	r24, 0x05	; 5
    6b48:	90 e0       	ldi	r25, 0x00	; 0
    6b4a:	80 87       	std	Z+8, r24	; 0x08
    6b4c:	91 87       	std	Z+9, r25	; 0x09
    6b4e:	41 e0       	ldi	r20, 0x01	; 1
    6b50:	bf 01       	movw	r22, r30
    6b52:	80 ea       	ldi	r24, 0xA0	; 160
    6b54:	94 e0       	ldi	r25, 0x04	; 4
    6b56:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6b5a:	81 11       	cpse	r24, r1
    6b5c:	16 c0       	rjmp	.+44     	; 0x6b8a <isr_500ms_twi1_onboard+0x80>
    6b5e:	e3 e3       	ldi	r30, 0x33	; 51
    6b60:	f5 e2       	ldi	r31, 0x25	; 37
    6b62:	80 81       	ld	r24, Z
    6b64:	90 e0       	ldi	r25, 0x00	; 0
    6b66:	98 2f       	mov	r25, r24
    6b68:	88 27       	eor	r24, r24
    6b6a:	21 81       	ldd	r18, Z+1	; 0x01
    6b6c:	82 2b       	or	r24, r18
    6b6e:	80 93 10 27 	sts	0x2710, r24	; 0x802710 <g_twi1_hygro_S_T>
    6b72:	90 93 11 27 	sts	0x2711, r25	; 0x802711 <g_twi1_hygro_S_T+0x1>
    6b76:	83 81       	ldd	r24, Z+3	; 0x03
    6b78:	90 e0       	ldi	r25, 0x00	; 0
    6b7a:	98 2f       	mov	r25, r24
    6b7c:	88 27       	eor	r24, r24
    6b7e:	24 81       	ldd	r18, Z+4	; 0x04
    6b80:	82 2b       	or	r24, r18
    6b82:	80 93 0e 27 	sts	0x270E, r24	; 0x80270e <g_twi1_hygro_S_RH>
    6b86:	90 93 0f 27 	sts	0x270F, r25	; 0x80270f <g_twi1_hygro_S_RH+0x1>
    6b8a:	eb e2       	ldi	r30, 0x2B	; 43
    6b8c:	f0 e2       	ldi	r31, 0x20	; 32
    6b8e:	84 e4       	ldi	r24, 0x44	; 68
    6b90:	80 83       	st	Z, r24
    6b92:	84 e2       	ldi	r24, 0x24	; 36
    6b94:	81 83       	std	Z+1, r24	; 0x01
    6b96:	12 82       	std	Z+2, r1	; 0x02
    6b98:	82 e0       	ldi	r24, 0x02	; 2
    6b9a:	90 e0       	ldi	r25, 0x00	; 0
    6b9c:	84 83       	std	Z+4, r24	; 0x04
    6b9e:	95 83       	std	Z+5, r25	; 0x05
    6ba0:	10 86       	std	Z+8, r1	; 0x08
    6ba2:	11 86       	std	Z+9, r1	; 0x09
    6ba4:	40 e0       	ldi	r20, 0x00	; 0
    6ba6:	bf 01       	movw	r22, r30
    6ba8:	80 ea       	ldi	r24, 0xA0	; 160
    6baa:	94 e0       	ldi	r25, 0x04	; 4
    6bac:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6bb0:	81 11       	cpse	r24, r1
    6bb2:	0c c0       	rjmp	.+24     	; 0x6bcc <isr_500ms_twi1_onboard+0xc2>
    6bb4:	c1 2c       	mov	r12, r1
    6bb6:	e1 2c       	mov	r14, r1
    6bb8:	01 e0       	ldi	r16, 0x01	; 1
    6bba:	26 e4       	ldi	r18, 0x46	; 70
    6bbc:	30 e0       	ldi	r19, 0x00	; 0
    6bbe:	40 e0       	ldi	r20, 0x00	; 0
    6bc0:	50 e0       	ldi	r21, 0x00	; 0
    6bc2:	60 e0       	ldi	r22, 0x00	; 0
    6bc4:	8c e4       	ldi	r24, 0x4C	; 76
    6bc6:	9d e2       	ldi	r25, 0x2D	; 45
    6bc8:	0e 94 dd 67 	call	0xcfba	; 0xcfba <sched_push>
    6bcc:	80 91 36 27 	lds	r24, 0x2736	; 0x802736 <g_twi1_baro_valid>
    6bd0:	88 23       	and	r24, r24
    6bd2:	21 f0       	breq	.+8      	; 0x6bdc <isr_500ms_twi1_onboard+0xd2>
    6bd4:	41 e0       	ldi	r20, 0x01	; 1
    6bd6:	c5 01       	movw	r24, r10
    6bd8:	b4 01       	movw	r22, r8
    6bda:	d5 dc       	rcall	.-1622   	; 0x6586 <service_twi1_baro>
    6bdc:	0f 91       	pop	r16
    6bde:	ef 90       	pop	r14
    6be0:	cf 90       	pop	r12
    6be2:	bf 90       	pop	r11
    6be4:	af 90       	pop	r10
    6be6:	9f 90       	pop	r9
    6be8:	8f 90       	pop	r8
    6bea:	08 95       	ret

00006bec <isr_sparetime_twi1_onboard>:
    6bec:	cf 92       	push	r12
    6bee:	ef 92       	push	r14
    6bf0:	0f 93       	push	r16
    6bf2:	78 94       	sei
    6bf4:	20 91 36 27 	lds	r18, 0x2736	; 0x802736 <g_twi1_baro_valid>
    6bf8:	22 23       	and	r18, r18
    6bfa:	81 f0       	breq	.+32     	; 0x6c1c <isr_sparetime_twi1_onboard+0x30>
    6bfc:	40 e0       	ldi	r20, 0x00	; 0
    6bfe:	c3 dc       	rcall	.-1658   	; 0x6586 <service_twi1_baro>
    6c00:	88 23       	and	r24, r24
    6c02:	61 f0       	breq	.+24     	; 0x6c1c <isr_sparetime_twi1_onboard+0x30>
    6c04:	c1 2c       	mov	r12, r1
    6c06:	e1 2c       	mov	r14, r1
    6c08:	01 e0       	ldi	r16, 0x01	; 1
    6c0a:	26 e4       	ldi	r18, 0x46	; 70
    6c0c:	30 e0       	ldi	r19, 0x00	; 0
    6c0e:	40 e0       	ldi	r20, 0x00	; 0
    6c10:	50 e0       	ldi	r21, 0x00	; 0
    6c12:	60 e0       	ldi	r22, 0x00	; 0
    6c14:	81 e7       	ldi	r24, 0x71	; 113
    6c16:	90 e3       	ldi	r25, 0x30	; 48
    6c18:	0e 94 dd 67 	call	0xcfba	; 0xcfba <sched_push>
    6c1c:	0f 91       	pop	r16
    6c1e:	ef 90       	pop	r14
    6c20:	cf 90       	pop	r12
    6c22:	08 95       	ret

00006c24 <task_twi2_lcd_cls>:
    6c24:	94 dd       	rcall	.-1240   	; 0x674e <twi2_waitUntilReady>
    6c26:	e7 e1       	ldi	r30, 0x17	; 23
    6c28:	f0 e2       	ldi	r31, 0x20	; 32
    6c2a:	81 e1       	ldi	r24, 0x11	; 17
    6c2c:	81 83       	std	Z+1, r24	; 0x01
    6c2e:	10 86       	std	Z+8, r1	; 0x08
    6c30:	11 86       	std	Z+9, r1	; 0x09
    6c32:	40 e0       	ldi	r20, 0x00	; 0
    6c34:	bf 01       	movw	r22, r30
    6c36:	80 e8       	ldi	r24, 0x80	; 128
    6c38:	94 e0       	ldi	r25, 0x04	; 4
    6c3a:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6c3e:	65 e0       	ldi	r22, 0x05	; 5
    6c40:	70 e0       	ldi	r23, 0x00	; 0
    6c42:	80 e0       	ldi	r24, 0x00	; 0
    6c44:	90 e0       	ldi	r25, 0x00	; 0
    6c46:	0c 94 41 2d 	jmp	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    6c4a:	08 95       	ret

00006c4c <task_twi2_lcd_pos_xy>:
    6c4c:	cf 93       	push	r28
    6c4e:	df 93       	push	r29
    6c50:	d8 2f       	mov	r29, r24
    6c52:	c6 2f       	mov	r28, r22
    6c54:	7c dd       	rcall	.-1288   	; 0x674e <twi2_waitUntilReady>
    6c56:	e7 e1       	ldi	r30, 0x17	; 23
    6c58:	f0 e2       	ldi	r31, 0x20	; 32
    6c5a:	80 e2       	ldi	r24, 0x20	; 32
    6c5c:	81 83       	std	Z+1, r24	; 0x01
    6c5e:	ab e2       	ldi	r26, 0x2B	; 43
    6c60:	b5 e2       	ldi	r27, 0x25	; 37
    6c62:	dc 93       	st	X, r29
    6c64:	11 96       	adiw	r26, 0x01	; 1
    6c66:	cc 93       	st	X, r28
    6c68:	82 e0       	ldi	r24, 0x02	; 2
    6c6a:	90 e0       	ldi	r25, 0x00	; 0
    6c6c:	80 87       	std	Z+8, r24	; 0x08
    6c6e:	91 87       	std	Z+9, r25	; 0x09
    6c70:	40 e0       	ldi	r20, 0x00	; 0
    6c72:	bf 01       	movw	r22, r30
    6c74:	80 e8       	ldi	r24, 0x80	; 128
    6c76:	94 e0       	ldi	r25, 0x04	; 4
    6c78:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6c7c:	65 e0       	ldi	r22, 0x05	; 5
    6c7e:	70 e0       	ldi	r23, 0x00	; 0
    6c80:	80 e0       	ldi	r24, 0x00	; 0
    6c82:	90 e0       	ldi	r25, 0x00	; 0
    6c84:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    6c88:	df 91       	pop	r29
    6c8a:	cf 91       	pop	r28
    6c8c:	08 95       	ret

00006c8e <task_twi2_lcd_print_format_float_P>:
    6c8e:	cf 92       	push	r12
    6c90:	df 92       	push	r13
    6c92:	ef 92       	push	r14
    6c94:	ff 92       	push	r15
    6c96:	0f 93       	push	r16
    6c98:	1f 93       	push	r17
    6c9a:	cf 93       	push	r28
    6c9c:	df 93       	push	r29
    6c9e:	f2 2e       	mov	r15, r18
    6ca0:	e3 2e       	mov	r14, r19
    6ca2:	d4 2e       	mov	r13, r20
    6ca4:	c5 2e       	mov	r12, r21
    6ca6:	d2 df       	rcall	.-92     	; 0x6c4c <task_twi2_lcd_pos_xy>
    6ca8:	52 dd       	rcall	.-1372   	; 0x674e <twi2_waitUntilReady>
    6caa:	c7 e1       	ldi	r28, 0x17	; 23
    6cac:	d0 e2       	ldi	r29, 0x20	; 32
    6cae:	80 e3       	ldi	r24, 0x30	; 48
    6cb0:	89 83       	std	Y+1, r24	; 0x01
    6cb2:	cf 92       	push	r12
    6cb4:	df 92       	push	r13
    6cb6:	ef 92       	push	r14
    6cb8:	ff 92       	push	r15
    6cba:	1f 93       	push	r17
    6cbc:	0f 93       	push	r16
    6cbe:	8c e2       	ldi	r24, 0x2C	; 44
    6cc0:	95 e2       	ldi	r25, 0x25	; 37
    6cc2:	9f 93       	push	r25
    6cc4:	8f 93       	push	r24
    6cc6:	0e 94 b6 85 	call	0x10b6c	; 0x10b6c <sprintf_P>
    6cca:	80 93 2b 25 	sts	0x252B, r24	; 0x80252b <twi2_m_data>
    6cce:	99 27       	eor	r25, r25
    6cd0:	01 96       	adiw	r24, 0x01	; 1
    6cd2:	88 87       	std	Y+8, r24	; 0x08
    6cd4:	99 87       	std	Y+9, r25	; 0x09
    6cd6:	40 e0       	ldi	r20, 0x00	; 0
    6cd8:	be 01       	movw	r22, r28
    6cda:	80 e8       	ldi	r24, 0x80	; 128
    6cdc:	94 e0       	ldi	r25, 0x04	; 4
    6cde:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6ce2:	65 e0       	ldi	r22, 0x05	; 5
    6ce4:	70 e0       	ldi	r23, 0x00	; 0
    6ce6:	80 e0       	ldi	r24, 0x00	; 0
    6ce8:	90 e0       	ldi	r25, 0x00	; 0
    6cea:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    6cee:	8d b7       	in	r24, 0x3d	; 61
    6cf0:	9e b7       	in	r25, 0x3e	; 62
    6cf2:	08 96       	adiw	r24, 0x08	; 8
    6cf4:	8d bf       	out	0x3d, r24	; 61
    6cf6:	9e bf       	out	0x3e, r25	; 62
    6cf8:	df 91       	pop	r29
    6cfa:	cf 91       	pop	r28
    6cfc:	1f 91       	pop	r17
    6cfe:	0f 91       	pop	r16
    6d00:	ff 90       	pop	r15
    6d02:	ef 90       	pop	r14
    6d04:	df 90       	pop	r13
    6d06:	cf 90       	pop	r12
    6d08:	08 95       	ret

00006d0a <task_twi2_lcd_str>:
    6d0a:	9f 92       	push	r9
    6d0c:	af 92       	push	r10
    6d0e:	bf 92       	push	r11
    6d10:	cf 92       	push	r12
    6d12:	df 92       	push	r13
    6d14:	ef 92       	push	r14
    6d16:	ff 92       	push	r15
    6d18:	0f 93       	push	r16
    6d1a:	1f 93       	push	r17
    6d1c:	cf 93       	push	r28
    6d1e:	df 93       	push	r29
    6d20:	b8 2e       	mov	r11, r24
    6d22:	a6 2e       	mov	r10, r22
    6d24:	ea 01       	movw	r28, r20
    6d26:	fa 01       	movw	r30, r20
    6d28:	01 90       	ld	r0, Z+
    6d2a:	00 20       	and	r0, r0
    6d2c:	e9 f7       	brne	.-6      	; 0x6d28 <task_twi2_lcd_str+0x1e>
    6d2e:	31 97       	sbiw	r30, 0x01	; 1
    6d30:	ce 2e       	mov	r12, r30
    6d32:	c4 1a       	sub	r12, r20
    6d34:	09 f4       	brne	.+2      	; 0x6d38 <task_twi2_lcd_str+0x2e>
    6d36:	44 c0       	rjmp	.+136    	; 0x6dc0 <task_twi2_lcd_str+0xb6>
    6d38:	07 e1       	ldi	r16, 0x17	; 23
    6d3a:	10 e2       	ldi	r17, 0x20	; 32
    6d3c:	0f 2e       	mov	r0, r31
    6d3e:	f0 e3       	ldi	r31, 0x30	; 48
    6d40:	9f 2e       	mov	r9, r31
    6d42:	f0 2d       	mov	r31, r0
    6d44:	0f 2e       	mov	r0, r31
    6d46:	fb e2       	ldi	r31, 0x2B	; 43
    6d48:	ef 2e       	mov	r14, r31
    6d4a:	f5 e2       	ldi	r31, 0x25	; 37
    6d4c:	ff 2e       	mov	r15, r31
    6d4e:	f0 2d       	mov	r31, r0
    6d50:	dc 2c       	mov	r13, r12
    6d52:	e6 e0       	ldi	r30, 0x06	; 6
    6d54:	ec 15       	cp	r30, r12
    6d56:	20 f4       	brcc	.+8      	; 0x6d60 <task_twi2_lcd_str+0x56>
    6d58:	0f 2e       	mov	r0, r31
    6d5a:	f6 e0       	ldi	r31, 0x06	; 6
    6d5c:	df 2e       	mov	r13, r31
    6d5e:	f0 2d       	mov	r31, r0
    6d60:	6a 2d       	mov	r22, r10
    6d62:	8b 2d       	mov	r24, r11
    6d64:	73 df       	rcall	.-282    	; 0x6c4c <task_twi2_lcd_pos_xy>
    6d66:	f3 dc       	rcall	.-1562   	; 0x674e <twi2_waitUntilReady>
    6d68:	f8 01       	movw	r30, r16
    6d6a:	91 82       	std	Z+1, r9	; 0x01
    6d6c:	f7 01       	movw	r30, r14
    6d6e:	d0 82       	st	Z, r13
    6d70:	dd 20       	and	r13, r13
    6d72:	69 f0       	breq	.+26     	; 0x6d8e <task_twi2_lcd_str+0x84>
    6d74:	81 e0       	ldi	r24, 0x01	; 1
    6d76:	21 96       	adiw	r28, 0x01	; 1
    6d78:	e8 2f       	mov	r30, r24
    6d7a:	f0 e0       	ldi	r31, 0x00	; 0
    6d7c:	e5 5d       	subi	r30, 0xD5	; 213
    6d7e:	fa 4d       	sbci	r31, 0xDA	; 218
    6d80:	de 01       	movw	r26, r28
    6d82:	11 97       	sbiw	r26, 0x01	; 1
    6d84:	9c 91       	ld	r25, X
    6d86:	90 83       	st	Z, r25
    6d88:	8f 5f       	subi	r24, 0xFF	; 255
    6d8a:	d8 16       	cp	r13, r24
    6d8c:	a0 f7       	brcc	.-24     	; 0x6d76 <task_twi2_lcd_str+0x6c>
    6d8e:	8d 2d       	mov	r24, r13
    6d90:	90 e0       	ldi	r25, 0x00	; 0
    6d92:	01 96       	adiw	r24, 0x01	; 1
    6d94:	f8 01       	movw	r30, r16
    6d96:	80 87       	std	Z+8, r24	; 0x08
    6d98:	91 87       	std	Z+9, r25	; 0x09
    6d9a:	40 e0       	ldi	r20, 0x00	; 0
    6d9c:	b8 01       	movw	r22, r16
    6d9e:	80 e8       	ldi	r24, 0x80	; 128
    6da0:	94 e0       	ldi	r25, 0x04	; 4
    6da2:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6da6:	65 e0       	ldi	r22, 0x05	; 5
    6da8:	70 e0       	ldi	r23, 0x00	; 0
    6daa:	80 e0       	ldi	r24, 0x00	; 0
    6dac:	90 e0       	ldi	r25, 0x00	; 0
    6dae:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    6db2:	8d 2d       	mov	r24, r13
    6db4:	88 0f       	add	r24, r24
    6db6:	8d 0d       	add	r24, r13
    6db8:	88 0f       	add	r24, r24
    6dba:	b8 0e       	add	r11, r24
    6dbc:	cd 18       	sub	r12, r13
    6dbe:	41 f6       	brne	.-112    	; 0x6d50 <task_twi2_lcd_str+0x46>
    6dc0:	df 91       	pop	r29
    6dc2:	cf 91       	pop	r28
    6dc4:	1f 91       	pop	r17
    6dc6:	0f 91       	pop	r16
    6dc8:	ff 90       	pop	r15
    6dca:	ef 90       	pop	r14
    6dcc:	df 90       	pop	r13
    6dce:	cf 90       	pop	r12
    6dd0:	bf 90       	pop	r11
    6dd2:	af 90       	pop	r10
    6dd4:	9f 90       	pop	r9
    6dd6:	08 95       	ret

00006dd8 <task_twi2_lcd_line>:
    6dd8:	0f 93       	push	r16
    6dda:	cf 93       	push	r28
    6ddc:	df 93       	push	r29
    6dde:	d4 2f       	mov	r29, r20
    6de0:	c2 2f       	mov	r28, r18
    6de2:	34 df       	rcall	.-408    	; 0x6c4c <task_twi2_lcd_pos_xy>
    6de4:	b4 dc       	rcall	.-1688   	; 0x674e <twi2_waitUntilReady>
    6de6:	a7 e1       	ldi	r26, 0x17	; 23
    6de8:	b0 e2       	ldi	r27, 0x20	; 32
    6dea:	82 e3       	ldi	r24, 0x32	; 50
    6dec:	11 96       	adiw	r26, 0x01	; 1
    6dee:	8c 93       	st	X, r24
    6df0:	11 97       	sbiw	r26, 0x01	; 1
    6df2:	eb e2       	ldi	r30, 0x2B	; 43
    6df4:	f5 e2       	ldi	r31, 0x25	; 37
    6df6:	d0 83       	st	Z, r29
    6df8:	c1 83       	std	Z+1, r28	; 0x01
    6dfa:	02 83       	std	Z+2, r16	; 0x02
    6dfc:	83 e0       	ldi	r24, 0x03	; 3
    6dfe:	90 e0       	ldi	r25, 0x00	; 0
    6e00:	18 96       	adiw	r26, 0x08	; 8
    6e02:	8d 93       	st	X+, r24
    6e04:	9c 93       	st	X, r25
    6e06:	19 97       	sbiw	r26, 0x09	; 9
    6e08:	40 e0       	ldi	r20, 0x00	; 0
    6e0a:	bd 01       	movw	r22, r26
    6e0c:	80 e8       	ldi	r24, 0x80	; 128
    6e0e:	94 e0       	ldi	r25, 0x04	; 4
    6e10:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6e14:	65 e0       	ldi	r22, 0x05	; 5
    6e16:	70 e0       	ldi	r23, 0x00	; 0
    6e18:	80 e0       	ldi	r24, 0x00	; 0
    6e1a:	90 e0       	ldi	r25, 0x00	; 0
    6e1c:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    6e20:	df 91       	pop	r29
    6e22:	cf 91       	pop	r28
    6e24:	0f 91       	pop	r16
    6e26:	08 95       	ret

00006e28 <task_twi2_lcd_rect>:
    6e28:	ef 92       	push	r14
    6e2a:	0f 93       	push	r16
    6e2c:	cf 93       	push	r28
    6e2e:	df 93       	push	r29
    6e30:	d4 2f       	mov	r29, r20
    6e32:	c2 2f       	mov	r28, r18
    6e34:	0b df       	rcall	.-490    	; 0x6c4c <task_twi2_lcd_pos_xy>
    6e36:	8b dc       	rcall	.-1770   	; 0x674e <twi2_waitUntilReady>
    6e38:	01 11       	cpse	r16, r1
    6e3a:	02 c0       	rjmp	.+4      	; 0x6e40 <task_twi2_lcd_rect+0x18>
    6e3c:	84 e3       	ldi	r24, 0x34	; 52
    6e3e:	01 c0       	rjmp	.+2      	; 0x6e42 <task_twi2_lcd_rect+0x1a>
    6e40:	86 e3       	ldi	r24, 0x36	; 54
    6e42:	a7 e1       	ldi	r26, 0x17	; 23
    6e44:	b0 e2       	ldi	r27, 0x20	; 32
    6e46:	11 96       	adiw	r26, 0x01	; 1
    6e48:	8c 93       	st	X, r24
    6e4a:	11 97       	sbiw	r26, 0x01	; 1
    6e4c:	eb e2       	ldi	r30, 0x2B	; 43
    6e4e:	f5 e2       	ldi	r31, 0x25	; 37
    6e50:	d0 83       	st	Z, r29
    6e52:	c1 83       	std	Z+1, r28	; 0x01
    6e54:	e2 82       	std	Z+2, r14	; 0x02
    6e56:	83 e0       	ldi	r24, 0x03	; 3
    6e58:	90 e0       	ldi	r25, 0x00	; 0
    6e5a:	18 96       	adiw	r26, 0x08	; 8
    6e5c:	8d 93       	st	X+, r24
    6e5e:	9c 93       	st	X, r25
    6e60:	19 97       	sbiw	r26, 0x09	; 9
    6e62:	40 e0       	ldi	r20, 0x00	; 0
    6e64:	bd 01       	movw	r22, r26
    6e66:	80 e8       	ldi	r24, 0x80	; 128
    6e68:	94 e0       	ldi	r25, 0x04	; 4
    6e6a:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6e6e:	65 e0       	ldi	r22, 0x05	; 5
    6e70:	70 e0       	ldi	r23, 0x00	; 0
    6e72:	80 e0       	ldi	r24, 0x00	; 0
    6e74:	90 e0       	ldi	r25, 0x00	; 0
    6e76:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    6e7a:	df 91       	pop	r29
    6e7c:	cf 91       	pop	r28
    6e7e:	0f 91       	pop	r16
    6e80:	ef 90       	pop	r14
    6e82:	08 95       	ret

00006e84 <task_twi2_lcd_circ>:
    6e84:	0f 93       	push	r16
    6e86:	cf 93       	push	r28
    6e88:	df 93       	push	r29
    6e8a:	c4 2f       	mov	r28, r20
    6e8c:	d2 2f       	mov	r29, r18
    6e8e:	de de       	rcall	.-580    	; 0x6c4c <task_twi2_lcd_pos_xy>
    6e90:	5e dc       	rcall	.-1860   	; 0x674e <twi2_waitUntilReady>
    6e92:	d1 11       	cpse	r29, r1
    6e94:	02 c0       	rjmp	.+4      	; 0x6e9a <task_twi2_lcd_circ+0x16>
    6e96:	88 e3       	ldi	r24, 0x38	; 56
    6e98:	01 c0       	rjmp	.+2      	; 0x6e9c <task_twi2_lcd_circ+0x18>
    6e9a:	8a e3       	ldi	r24, 0x3A	; 58
    6e9c:	e7 e1       	ldi	r30, 0x17	; 23
    6e9e:	f0 e2       	ldi	r31, 0x20	; 32
    6ea0:	81 83       	std	Z+1, r24	; 0x01
    6ea2:	ab e2       	ldi	r26, 0x2B	; 43
    6ea4:	b5 e2       	ldi	r27, 0x25	; 37
    6ea6:	cc 93       	st	X, r28
    6ea8:	11 96       	adiw	r26, 0x01	; 1
    6eaa:	0c 93       	st	X, r16
    6eac:	82 e0       	ldi	r24, 0x02	; 2
    6eae:	90 e0       	ldi	r25, 0x00	; 0
    6eb0:	80 87       	std	Z+8, r24	; 0x08
    6eb2:	91 87       	std	Z+9, r25	; 0x09
    6eb4:	40 e0       	ldi	r20, 0x00	; 0
    6eb6:	bf 01       	movw	r22, r30
    6eb8:	80 e8       	ldi	r24, 0x80	; 128
    6eba:	94 e0       	ldi	r25, 0x04	; 4
    6ebc:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6ec0:	65 e0       	ldi	r22, 0x05	; 5
    6ec2:	70 e0       	ldi	r23, 0x00	; 0
    6ec4:	80 e0       	ldi	r24, 0x00	; 0
    6ec6:	90 e0       	ldi	r25, 0x00	; 0
    6ec8:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    6ecc:	df 91       	pop	r29
    6ece:	cf 91       	pop	r28
    6ed0:	0f 91       	pop	r16
    6ed2:	08 95       	ret

00006ed4 <task_twi2_lcd_header>:
    6ed4:	ef 92       	push	r14
    6ed6:	0f 93       	push	r16
    6ed8:	a5 de       	rcall	.-694    	; 0x6c24 <task_twi2_lcd_cls>
    6eda:	46 e3       	ldi	r20, 0x36	; 54
    6edc:	51 e2       	ldi	r21, 0x21	; 33
    6ede:	62 e0       	ldi	r22, 0x02	; 2
    6ee0:	8c e3       	ldi	r24, 0x3C	; 60
    6ee2:	13 df       	rcall	.-474    	; 0x6d0a <task_twi2_lcd_str>
    6ee4:	40 e4       	ldi	r20, 0x40	; 64
    6ee6:	51 e2       	ldi	r21, 0x21	; 33
    6ee8:	62 e0       	ldi	r22, 0x02	; 2
    6eea:	84 eb       	ldi	r24, 0xB4	; 180
    6eec:	0e df       	rcall	.-484    	; 0x6d0a <task_twi2_lcd_str>
    6eee:	01 e0       	ldi	r16, 0x01	; 1
    6ef0:	21 e0       	ldi	r18, 0x01	; 1
    6ef2:	43 e0       	ldi	r20, 0x03	; 3
    6ef4:	64 e0       	ldi	r22, 0x04	; 4
    6ef6:	89 e0       	ldi	r24, 0x09	; 9
    6ef8:	c5 df       	rcall	.-118    	; 0x6e84 <task_twi2_lcd_circ>
    6efa:	ee 24       	eor	r14, r14
    6efc:	e3 94       	inc	r14
    6efe:	00 e0       	ldi	r16, 0x00	; 0
    6f00:	24 e0       	ldi	r18, 0x04	; 4
    6f02:	46 e0       	ldi	r20, 0x06	; 6
    6f04:	62 e0       	ldi	r22, 0x02	; 2
    6f06:	81 e0       	ldi	r24, 0x01	; 1
    6f08:	8f df       	rcall	.-226    	; 0x6e28 <task_twi2_lcd_rect>
    6f0a:	24 e0       	ldi	r18, 0x04	; 4
    6f0c:	46 e0       	ldi	r20, 0x06	; 6
    6f0e:	62 e0       	ldi	r22, 0x02	; 2
    6f10:	8c e0       	ldi	r24, 0x0C	; 12
    6f12:	8a df       	rcall	.-236    	; 0x6e28 <task_twi2_lcd_rect>
    6f14:	01 e0       	ldi	r16, 0x01	; 1
    6f16:	2b e0       	ldi	r18, 0x0B	; 11
    6f18:	4f ee       	ldi	r20, 0xEF	; 239
    6f1a:	6b e0       	ldi	r22, 0x0B	; 11
    6f1c:	80 e0       	ldi	r24, 0x00	; 0
    6f1e:	5c df       	rcall	.-328    	; 0x6dd8 <task_twi2_lcd_line>
    6f20:	0f 91       	pop	r16
    6f22:	ef 90       	pop	r14
    6f24:	08 95       	ret

00006f26 <twi_start>:
    6f26:	7f 92       	push	r7
    6f28:	8f 92       	push	r8
    6f2a:	9f 92       	push	r9
    6f2c:	af 92       	push	r10
    6f2e:	bf 92       	push	r11
    6f30:	cf 92       	push	r12
    6f32:	df 92       	push	r13
    6f34:	ef 92       	push	r14
    6f36:	ff 92       	push	r15
    6f38:	0f 93       	push	r16
    6f3a:	1f 93       	push	r17
    6f3c:	cf 93       	push	r28
    6f3e:	df 93       	push	r29
    6f40:	60 e4       	ldi	r22, 0x40	; 64
    6f42:	85 e0       	ldi	r24, 0x05	; 5
    6f44:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    6f48:	66 e3       	ldi	r22, 0x36	; 54
    6f4a:	70 e2       	ldi	r23, 0x20	; 32
    6f4c:	80 ea       	ldi	r24, 0xA0	; 160
    6f4e:	94 e0       	ldi	r25, 0x04	; 4
    6f50:	0e 94 7c 53 	call	0xa6f8	; 0xa6f8 <twi_master_init>
    6f54:	e0 ea       	ldi	r30, 0xA0	; 160
    6f56:	f4 e0       	ldi	r31, 0x04	; 4
    6f58:	81 81       	ldd	r24, Z+1	; 0x01
    6f5a:	88 60       	ori	r24, 0x08	; 8
    6f5c:	81 83       	std	Z+1, r24	; 0x01
    6f5e:	60 e4       	ldi	r22, 0x40	; 64
    6f60:	83 e0       	ldi	r24, 0x03	; 3
    6f62:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    6f66:	62 e2       	ldi	r22, 0x22	; 34
    6f68:	70 e2       	ldi	r23, 0x20	; 32
    6f6a:	80 e8       	ldi	r24, 0x80	; 128
    6f6c:	94 e0       	ldi	r25, 0x04	; 4
    6f6e:	0e 94 7c 53 	call	0xa6f8	; 0xa6f8 <twi_master_init>
    6f72:	e0 e8       	ldi	r30, 0x80	; 128
    6f74:	f4 e0       	ldi	r31, 0x04	; 4
    6f76:	81 81       	ldd	r24, Z+1	; 0x01
    6f78:	88 60       	ori	r24, 0x08	; 8
    6f7a:	81 83       	std	Z+1, r24	; 0x01
    6f7c:	61 e4       	ldi	r22, 0x41	; 65
    6f7e:	7b e4       	ldi	r23, 0x4B	; 75
    6f80:	8c e4       	ldi	r24, 0x4C	; 76
    6f82:	90 e0       	ldi	r25, 0x00	; 0
    6f84:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    6f88:	e7 e1       	ldi	r30, 0x17	; 23
    6f8a:	f0 e2       	ldi	r31, 0x20	; 32
    6f8c:	81 e0       	ldi	r24, 0x01	; 1
    6f8e:	81 83       	std	Z+1, r24	; 0x01
    6f90:	81 e0       	ldi	r24, 0x01	; 1
    6f92:	90 e0       	ldi	r25, 0x00	; 0
    6f94:	84 83       	std	Z+4, r24	; 0x04
    6f96:	95 83       	std	Z+5, r25	; 0x05
    6f98:	80 87       	std	Z+8, r24	; 0x08
    6f9a:	91 87       	std	Z+9, r25	; 0x09
    6f9c:	41 e0       	ldi	r20, 0x01	; 1
    6f9e:	bf 01       	movw	r22, r30
    6fa0:	80 e8       	ldi	r24, 0x80	; 128
    6fa2:	94 e0       	ldi	r25, 0x04	; 4
    6fa4:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6fa8:	80 91 2b 25 	lds	r24, 0x252B	; 0x80252b <twi2_m_data>
    6fac:	80 93 09 27 	sts	0x2709, r24	; 0x802709 <g_twi2_lcd_version>
    6fb0:	81 31       	cpi	r24, 0x11	; 17
    6fb2:	08 f4       	brcc	.+2      	; 0x6fb6 <twi_start+0x90>
    6fb4:	78 c0       	rjmp	.+240    	; 0x70a6 <twi_start+0x180>
    6fb6:	c7 e1       	ldi	r28, 0x17	; 23
    6fb8:	d0 e2       	ldi	r29, 0x20	; 32
    6fba:	82 e0       	ldi	r24, 0x02	; 2
    6fbc:	89 83       	std	Y+1, r24	; 0x01
    6fbe:	0f 2e       	mov	r0, r31
    6fc0:	fb e2       	ldi	r31, 0x2B	; 43
    6fc2:	ef 2e       	mov	r14, r31
    6fc4:	f5 e2       	ldi	r31, 0x25	; 37
    6fc6:	ff 2e       	mov	r15, r31
    6fc8:	f0 2d       	mov	r31, r0
    6fca:	68 94       	set
    6fcc:	dd 24       	eor	r13, r13
    6fce:	d4 f8       	bld	r13, 4
    6fd0:	f7 01       	movw	r30, r14
    6fd2:	d0 82       	st	Z, r13
    6fd4:	01 e0       	ldi	r16, 0x01	; 1
    6fd6:	10 e0       	ldi	r17, 0x00	; 0
    6fd8:	08 87       	std	Y+8, r16	; 0x08
    6fda:	19 87       	std	Y+9, r17	; 0x09
    6fdc:	40 e0       	ldi	r20, 0x00	; 0
    6fde:	be 01       	movw	r22, r28
    6fe0:	80 e8       	ldi	r24, 0x80	; 128
    6fe2:	94 e0       	ldi	r25, 0x04	; 4
    6fe4:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    6fe8:	65 e0       	ldi	r22, 0x05	; 5
    6fea:	70 e0       	ldi	r23, 0x00	; 0
    6fec:	80 e0       	ldi	r24, 0x00	; 0
    6fee:	90 e0       	ldi	r25, 0x00	; 0
    6ff0:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    6ff4:	ac db       	rcall	.-2216   	; 0x674e <twi2_waitUntilReady>
    6ff6:	d9 82       	std	Y+1, r13	; 0x01
    6ff8:	18 86       	std	Y+8, r1	; 0x08
    6ffa:	19 86       	std	Y+9, r1	; 0x09
    6ffc:	40 e0       	ldi	r20, 0x00	; 0
    6ffe:	be 01       	movw	r22, r28
    7000:	80 e8       	ldi	r24, 0x80	; 128
    7002:	94 e0       	ldi	r25, 0x04	; 4
    7004:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    7008:	60 e9       	ldi	r22, 0x90	; 144
    700a:	70 ed       	ldi	r23, 0xD0	; 208
    700c:	83 e0       	ldi	r24, 0x03	; 3
    700e:	90 e0       	ldi	r25, 0x00	; 0
    7010:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    7014:	81 e0       	ldi	r24, 0x01	; 1
    7016:	e4 db       	rcall	.-2104   	; 0x67e0 <twi2_set_leds>
    7018:	9a db       	rcall	.-2252   	; 0x674e <twi2_waitUntilReady>
    701a:	84 e1       	ldi	r24, 0x14	; 20
    701c:	89 83       	std	Y+1, r24	; 0x01
    701e:	81 e0       	ldi	r24, 0x01	; 1
    7020:	f7 01       	movw	r30, r14
    7022:	80 83       	st	Z, r24
    7024:	08 87       	std	Y+8, r16	; 0x08
    7026:	19 87       	std	Y+9, r17	; 0x09
    7028:	40 e0       	ldi	r20, 0x00	; 0
    702a:	be 01       	movw	r22, r28
    702c:	80 e8       	ldi	r24, 0x80	; 128
    702e:	94 e0       	ldi	r25, 0x04	; 4
    7030:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    7034:	65 e0       	ldi	r22, 0x05	; 5
    7036:	70 e0       	ldi	r23, 0x00	; 0
    7038:	80 e0       	ldi	r24, 0x00	; 0
    703a:	90 e0       	ldi	r25, 0x00	; 0
    703c:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    7040:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <g_bias_pm>
    7044:	08 dc       	rcall	.-2032   	; 0x6856 <twi2_set_bias>
    7046:	69 e1       	ldi	r22, 0x19	; 25
    7048:	8c e2       	ldi	r24, 0x2C	; 44
    704a:	1f dc       	rcall	.-1986   	; 0x688a <twi2_set_beep>
    704c:	61 e6       	ldi	r22, 0x61	; 97
    704e:	73 ee       	ldi	r23, 0xE3	; 227
    7050:	86 e1       	ldi	r24, 0x16	; 22
    7052:	90 e0       	ldi	r25, 0x00	; 0
    7054:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    7058:	c0 e8       	ldi	r28, 0x80	; 128
    705a:	6c 2f       	mov	r22, r28
    705c:	80 e0       	ldi	r24, 0x00	; 0
    705e:	db db       	rcall	.-2122   	; 0x6816 <twi2_set_ledbl>
    7060:	68 e8       	ldi	r22, 0x88	; 136
    7062:	73 e1       	ldi	r23, 0x13	; 19
    7064:	80 e0       	ldi	r24, 0x00	; 0
    7066:	90 e0       	ldi	r25, 0x00	; 0
    7068:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    706c:	c2 50       	subi	r28, 0x02	; 2
    706e:	a9 f7       	brne	.-22     	; 0x705a <twi_start+0x134>
    7070:	69 e1       	ldi	r22, 0x19	; 25
    7072:	88 e5       	ldi	r24, 0x58	; 88
    7074:	0a dc       	rcall	.-2028   	; 0x688a <twi2_set_beep>
    7076:	61 e6       	ldi	r22, 0x61	; 97
    7078:	73 ee       	ldi	r23, 0xE3	; 227
    707a:	86 e1       	ldi	r24, 0x16	; 22
    707c:	90 e0       	ldi	r25, 0x00	; 0
    707e:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    7082:	6c 2f       	mov	r22, r28
    7084:	80 e0       	ldi	r24, 0x00	; 0
    7086:	c7 db       	rcall	.-2162   	; 0x6816 <twi2_set_ledbl>
    7088:	68 e8       	ldi	r22, 0x88	; 136
    708a:	73 e1       	ldi	r23, 0x13	; 19
    708c:	80 e0       	ldi	r24, 0x00	; 0
    708e:	90 e0       	ldi	r25, 0x00	; 0
    7090:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    7094:	ce 5f       	subi	r28, 0xFE	; 254
    7096:	c2 38       	cpi	r28, 0x82	; 130
    7098:	a1 f7       	brne	.-24     	; 0x7082 <twi_start+0x15c>
    709a:	60 91 97 28 	lds	r22, 0x2897	; 0x802897 <g_backlight_mode_pwm>
    709e:	80 e0       	ldi	r24, 0x00	; 0
    70a0:	ba db       	rcall	.-2188   	; 0x6816 <twi2_set_ledbl>
    70a2:	83 e0       	ldi	r24, 0x03	; 3
    70a4:	9d db       	rcall	.-2246   	; 0x67e0 <twi2_set_leds>
    70a6:	16 df       	rcall	.-468    	; 0x6ed4 <task_twi2_lcd_header>
    70a8:	1f 92       	push	r1
    70aa:	84 e4       	ldi	r24, 0x44	; 68
    70ac:	8f 93       	push	r24
    70ae:	8a e3       	ldi	r24, 0x3A	; 58
    70b0:	94 e3       	ldi	r25, 0x34	; 52
    70b2:	9f 93       	push	r25
    70b4:	8f 93       	push	r24
    70b6:	1f 92       	push	r1
    70b8:	80 e4       	ldi	r24, 0x40	; 64
    70ba:	8f 93       	push	r24
    70bc:	8b e3       	ldi	r24, 0x3B	; 59
    70be:	95 e2       	ldi	r25, 0x25	; 37
    70c0:	9f 93       	push	r25
    70c2:	8f 93       	push	r24
    70c4:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    70c8:	81 34       	cpi	r24, 0x41	; 65
    70ca:	91 05       	cpc	r25, r1
    70cc:	10 f0       	brcs	.+4      	; 0x70d2 <twi_start+0x1ac>
    70ce:	80 e4       	ldi	r24, 0x40	; 64
    70d0:	90 e0       	ldi	r25, 0x00	; 0
    70d2:	40 e0       	ldi	r20, 0x00	; 0
    70d4:	68 2f       	mov	r22, r24
    70d6:	8b e3       	ldi	r24, 0x3B	; 59
    70d8:	95 e2       	ldi	r25, 0x25	; 37
    70da:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    70de:	10 92 12 27 	sts	0x2712, r1	; 0x802712 <g_twi1_hygro_status>
    70e2:	eb e2       	ldi	r30, 0x2B	; 43
    70e4:	f0 e2       	ldi	r31, 0x20	; 32
    70e6:	84 e4       	ldi	r24, 0x44	; 68
    70e8:	80 83       	st	Z, r24
    70ea:	80 e3       	ldi	r24, 0x30	; 48
    70ec:	81 83       	std	Z+1, r24	; 0x01
    70ee:	83 e9       	ldi	r24, 0x93	; 147
    70f0:	82 83       	std	Z+2, r24	; 0x02
    70f2:	82 e0       	ldi	r24, 0x02	; 2
    70f4:	90 e0       	ldi	r25, 0x00	; 0
    70f6:	84 83       	std	Z+4, r24	; 0x04
    70f8:	95 83       	std	Z+5, r25	; 0x05
    70fa:	10 86       	std	Z+8, r1	; 0x08
    70fc:	11 86       	std	Z+9, r1	; 0x09
    70fe:	40 e0       	ldi	r20, 0x00	; 0
    7100:	bf 01       	movw	r22, r30
    7102:	80 ea       	ldi	r24, 0xA0	; 160
    7104:	94 e0       	ldi	r25, 0x04	; 4
    7106:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    710a:	c8 2f       	mov	r28, r24
    710c:	8d b7       	in	r24, 0x3d	; 61
    710e:	9e b7       	in	r25, 0x3e	; 62
    7110:	08 96       	adiw	r24, 0x08	; 8
    7112:	8d bf       	out	0x3d, r24	; 61
    7114:	9e bf       	out	0x3e, r25	; 62
    7116:	cc 23       	and	r28, r28
    7118:	f9 f0       	breq	.+62     	; 0x7158 <twi_start+0x232>
    711a:	83 ef       	ldi	r24, 0xF3	; 243
    711c:	93 e3       	ldi	r25, 0x33	; 51
    711e:	9f 93       	push	r25
    7120:	8f 93       	push	r24
    7122:	1f 92       	push	r1
    7124:	80 e4       	ldi	r24, 0x40	; 64
    7126:	8f 93       	push	r24
    7128:	8b e3       	ldi	r24, 0x3B	; 59
    712a:	95 e2       	ldi	r25, 0x25	; 37
    712c:	9f 93       	push	r25
    712e:	8f 93       	push	r24
    7130:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    7134:	81 34       	cpi	r24, 0x41	; 65
    7136:	91 05       	cpc	r25, r1
    7138:	10 f0       	brcs	.+4      	; 0x713e <twi_start+0x218>
    713a:	80 e4       	ldi	r24, 0x40	; 64
    713c:	90 e0       	ldi	r25, 0x00	; 0
    713e:	40 e0       	ldi	r20, 0x00	; 0
    7140:	68 2f       	mov	r22, r24
    7142:	8b e3       	ldi	r24, 0x3B	; 59
    7144:	95 e2       	ldi	r25, 0x25	; 37
    7146:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    714a:	0f 90       	pop	r0
    714c:	0f 90       	pop	r0
    714e:	0f 90       	pop	r0
    7150:	0f 90       	pop	r0
    7152:	0f 90       	pop	r0
    7154:	0f 90       	pop	r0
    7156:	a2 c0       	rjmp	.+324    	; 0x729c <twi_start+0x376>
    7158:	60 e1       	ldi	r22, 0x10	; 16
    715a:	77 e2       	ldi	r23, 0x27	; 39
    715c:	80 e0       	ldi	r24, 0x00	; 0
    715e:	90 e0       	ldi	r25, 0x00	; 0
    7160:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    7164:	eb e2       	ldi	r30, 0x2B	; 43
    7166:	f0 e2       	ldi	r31, 0x20	; 32
    7168:	84 e4       	ldi	r24, 0x44	; 68
    716a:	80 83       	st	Z, r24
    716c:	80 e3       	ldi	r24, 0x30	; 48
    716e:	81 83       	std	Z+1, r24	; 0x01
    7170:	82 ea       	ldi	r24, 0xA2	; 162
    7172:	82 83       	std	Z+2, r24	; 0x02
    7174:	82 e0       	ldi	r24, 0x02	; 2
    7176:	90 e0       	ldi	r25, 0x00	; 0
    7178:	84 83       	std	Z+4, r24	; 0x04
    717a:	95 83       	std	Z+5, r25	; 0x05
    717c:	10 86       	std	Z+8, r1	; 0x08
    717e:	11 86       	std	Z+9, r1	; 0x09
    7180:	40 e0       	ldi	r20, 0x00	; 0
    7182:	bf 01       	movw	r22, r30
    7184:	80 ea       	ldi	r24, 0xA0	; 160
    7186:	94 e0       	ldi	r25, 0x04	; 4
    7188:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    718c:	c8 2f       	mov	r28, r24
    718e:	81 11       	cpse	r24, r1
    7190:	85 c0       	rjmp	.+266    	; 0x729c <twi_start+0x376>
    7192:	60 e1       	ldi	r22, 0x10	; 16
    7194:	77 e2       	ldi	r23, 0x27	; 39
    7196:	80 e0       	ldi	r24, 0x00	; 0
    7198:	90 e0       	ldi	r25, 0x00	; 0
    719a:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    719e:	eb e2       	ldi	r30, 0x2B	; 43
    71a0:	f0 e2       	ldi	r31, 0x20	; 32
    71a2:	84 e4       	ldi	r24, 0x44	; 68
    71a4:	80 83       	st	Z, r24
    71a6:	83 ef       	ldi	r24, 0xF3	; 243
    71a8:	81 83       	std	Z+1, r24	; 0x01
    71aa:	8d e2       	ldi	r24, 0x2D	; 45
    71ac:	82 83       	std	Z+2, r24	; 0x02
    71ae:	82 e0       	ldi	r24, 0x02	; 2
    71b0:	90 e0       	ldi	r25, 0x00	; 0
    71b2:	84 83       	std	Z+4, r24	; 0x04
    71b4:	95 83       	std	Z+5, r25	; 0x05
    71b6:	80 87       	std	Z+8, r24	; 0x08
    71b8:	91 87       	std	Z+9, r25	; 0x09
    71ba:	41 e0       	ldi	r20, 0x01	; 1
    71bc:	bf 01       	movw	r22, r30
    71be:	80 ea       	ldi	r24, 0xA0	; 160
    71c0:	94 e0       	ldi	r25, 0x04	; 4
    71c2:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    71c6:	c8 2f       	mov	r28, r24
    71c8:	81 11       	cpse	r24, r1
    71ca:	68 c0       	rjmp	.+208    	; 0x729c <twi_start+0x376>
    71cc:	80 91 34 25 	lds	r24, 0x2534	; 0x802534 <twi1_m_data+0x1>
    71d0:	80 93 12 27 	sts	0x2712, r24	; 0x802712 <g_twi1_hygro_status>
    71d4:	1f 92       	push	r1
    71d6:	8f 93       	push	r24
    71d8:	81 ec       	ldi	r24, 0xC1	; 193
    71da:	93 e3       	ldi	r25, 0x33	; 51
    71dc:	9f 93       	push	r25
    71de:	8f 93       	push	r24
    71e0:	1f 92       	push	r1
    71e2:	80 e4       	ldi	r24, 0x40	; 64
    71e4:	8f 93       	push	r24
    71e6:	8b e3       	ldi	r24, 0x3B	; 59
    71e8:	95 e2       	ldi	r25, 0x25	; 37
    71ea:	9f 93       	push	r25
    71ec:	8f 93       	push	r24
    71ee:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    71f2:	81 34       	cpi	r24, 0x41	; 65
    71f4:	91 05       	cpc	r25, r1
    71f6:	10 f0       	brcs	.+4      	; 0x71fc <twi_start+0x2d6>
    71f8:	80 e4       	ldi	r24, 0x40	; 64
    71fa:	90 e0       	ldi	r25, 0x00	; 0
    71fc:	40 e0       	ldi	r20, 0x00	; 0
    71fe:	68 2f       	mov	r22, r24
    7200:	8b e3       	ldi	r24, 0x3B	; 59
    7202:	95 e2       	ldi	r25, 0x25	; 37
    7204:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    7208:	eb e2       	ldi	r30, 0x2B	; 43
    720a:	f0 e2       	ldi	r31, 0x20	; 32
    720c:	84 e4       	ldi	r24, 0x44	; 68
    720e:	80 83       	st	Z, r24
    7210:	84 e2       	ldi	r24, 0x24	; 36
    7212:	81 83       	std	Z+1, r24	; 0x01
    7214:	12 82       	std	Z+2, r1	; 0x02
    7216:	82 e0       	ldi	r24, 0x02	; 2
    7218:	90 e0       	ldi	r25, 0x00	; 0
    721a:	84 83       	std	Z+4, r24	; 0x04
    721c:	95 83       	std	Z+5, r25	; 0x05
    721e:	10 86       	std	Z+8, r1	; 0x08
    7220:	11 86       	std	Z+9, r1	; 0x09
    7222:	40 e0       	ldi	r20, 0x00	; 0
    7224:	bf 01       	movw	r22, r30
    7226:	80 ea       	ldi	r24, 0xA0	; 160
    7228:	94 e0       	ldi	r25, 0x04	; 4
    722a:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    722e:	c8 2f       	mov	r28, r24
    7230:	ed b7       	in	r30, 0x3d	; 61
    7232:	fe b7       	in	r31, 0x3e	; 62
    7234:	38 96       	adiw	r30, 0x08	; 8
    7236:	ed bf       	out	0x3d, r30	; 61
    7238:	fe bf       	out	0x3e, r31	; 62
    723a:	81 11       	cpse	r24, r1
    723c:	2f c0       	rjmp	.+94     	; 0x729c <twi_start+0x376>
    723e:	81 e0       	ldi	r24, 0x01	; 1
    7240:	80 93 13 27 	sts	0x2713, r24	; 0x802713 <g_twi1_hygro_valid>
    7244:	8e e5       	ldi	r24, 0x5E	; 94
    7246:	93 e3       	ldi	r25, 0x33	; 51
    7248:	9f 93       	push	r25
    724a:	8f 93       	push	r24
    724c:	1f 92       	push	r1
    724e:	10 e4       	ldi	r17, 0x40	; 64
    7250:	1f 93       	push	r17
    7252:	cb e3       	ldi	r28, 0x3B	; 59
    7254:	d5 e2       	ldi	r29, 0x25	; 37
    7256:	df 93       	push	r29
    7258:	cf 93       	push	r28
    725a:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    725e:	ae 01       	movw	r20, r28
    7260:	6e e1       	ldi	r22, 0x1E	; 30
    7262:	88 e0       	ldi	r24, 0x08	; 8
    7264:	52 dd       	rcall	.-1372   	; 0x6d0a <task_twi2_lcd_str>
    7266:	83 ea       	ldi	r24, 0xA3	; 163
    7268:	93 e3       	ldi	r25, 0x33	; 51
    726a:	9f 93       	push	r25
    726c:	8f 93       	push	r24
    726e:	1f 92       	push	r1
    7270:	1f 93       	push	r17
    7272:	df 93       	push	r29
    7274:	cf 93       	push	r28
    7276:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    727a:	81 34       	cpi	r24, 0x41	; 65
    727c:	91 05       	cpc	r25, r1
    727e:	10 f0       	brcs	.+4      	; 0x7284 <twi_start+0x35e>
    7280:	80 e4       	ldi	r24, 0x40	; 64
    7282:	90 e0       	ldi	r25, 0x00	; 0
    7284:	40 e0       	ldi	r20, 0x00	; 0
    7286:	68 2f       	mov	r22, r24
    7288:	8b e3       	ldi	r24, 0x3B	; 59
    728a:	95 e2       	ldi	r25, 0x25	; 37
    728c:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    7290:	8d b7       	in	r24, 0x3d	; 61
    7292:	9e b7       	in	r25, 0x3e	; 62
    7294:	0c 96       	adiw	r24, 0x0c	; 12
    7296:	8d bf       	out	0x3d, r24	; 61
    7298:	9e bf       	out	0x3e, r25	; 62
    729a:	23 c0       	rjmp	.+70     	; 0x72e2 <twi_start+0x3bc>
    729c:	8c 2f       	mov	r24, r28
    729e:	0c 2e       	mov	r0, r28
    72a0:	00 0c       	add	r0, r0
    72a2:	99 0b       	sbc	r25, r25
    72a4:	9f 93       	push	r25
    72a6:	cf 93       	push	r28
    72a8:	82 e7       	ldi	r24, 0x72	; 114
    72aa:	93 e3       	ldi	r25, 0x33	; 51
    72ac:	9f 93       	push	r25
    72ae:	8f 93       	push	r24
    72b0:	1f 92       	push	r1
    72b2:	80 e4       	ldi	r24, 0x40	; 64
    72b4:	8f 93       	push	r24
    72b6:	8b e3       	ldi	r24, 0x3B	; 59
    72b8:	95 e2       	ldi	r25, 0x25	; 37
    72ba:	9f 93       	push	r25
    72bc:	8f 93       	push	r24
    72be:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    72c2:	81 34       	cpi	r24, 0x41	; 65
    72c4:	91 05       	cpc	r25, r1
    72c6:	10 f0       	brcs	.+4      	; 0x72cc <twi_start+0x3a6>
    72c8:	80 e4       	ldi	r24, 0x40	; 64
    72ca:	90 e0       	ldi	r25, 0x00	; 0
    72cc:	40 e0       	ldi	r20, 0x00	; 0
    72ce:	68 2f       	mov	r22, r24
    72d0:	8b e3       	ldi	r24, 0x3B	; 59
    72d2:	95 e2       	ldi	r25, 0x25	; 37
    72d4:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    72d8:	ed b7       	in	r30, 0x3d	; 61
    72da:	fe b7       	in	r31, 0x3e	; 62
    72dc:	38 96       	adiw	r30, 0x08	; 8
    72de:	ed bf       	out	0x3d, r30	; 61
    72e0:	fe bf       	out	0x3e, r31	; 62
    72e2:	1f 92       	push	r1
    72e4:	8c e0       	ldi	r24, 0x0C	; 12
    72e6:	8f 93       	push	r24
    72e8:	1f 92       	push	r1
    72ea:	88 e6       	ldi	r24, 0x68	; 104
    72ec:	8f 93       	push	r24
    72ee:	81 e2       	ldi	r24, 0x21	; 33
    72f0:	93 e3       	ldi	r25, 0x33	; 51
    72f2:	9f 93       	push	r25
    72f4:	8f 93       	push	r24
    72f6:	1f 92       	push	r1
    72f8:	80 e4       	ldi	r24, 0x40	; 64
    72fa:	8f 93       	push	r24
    72fc:	8b e3       	ldi	r24, 0x3B	; 59
    72fe:	95 e2       	ldi	r25, 0x25	; 37
    7300:	9f 93       	push	r25
    7302:	8f 93       	push	r24
    7304:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    7308:	81 34       	cpi	r24, 0x41	; 65
    730a:	91 05       	cpc	r25, r1
    730c:	10 f0       	brcs	.+4      	; 0x7312 <twi_start+0x3ec>
    730e:	80 e4       	ldi	r24, 0x40	; 64
    7310:	90 e0       	ldi	r25, 0x00	; 0
    7312:	40 e0       	ldi	r20, 0x00	; 0
    7314:	68 2f       	mov	r22, r24
    7316:	8b e3       	ldi	r24, 0x3B	; 59
    7318:	95 e2       	ldi	r25, 0x25	; 37
    731a:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    731e:	10 92 71 27 	sts	0x2771, r1	; 0x802771 <g_twi1_gyro_1_version>
    7322:	10 92 4c 27 	sts	0x274C, r1	; 0x80274c <g_twi1_gyro_2_version>
    7326:	eb e2       	ldi	r30, 0x2B	; 43
    7328:	f0 e2       	ldi	r31, 0x20	; 32
    732a:	88 e6       	ldi	r24, 0x68	; 104
    732c:	80 83       	st	Z, r24
    732e:	8b e6       	ldi	r24, 0x6B	; 107
    7330:	81 83       	std	Z+1, r24	; 0x01
    7332:	81 e0       	ldi	r24, 0x01	; 1
    7334:	90 e0       	ldi	r25, 0x00	; 0
    7336:	84 83       	std	Z+4, r24	; 0x04
    7338:	95 83       	std	Z+5, r25	; 0x05
    733a:	21 e8       	ldi	r18, 0x81	; 129
    733c:	20 93 33 25 	sts	0x2533, r18	; 0x802533 <twi1_m_data>
    7340:	80 87       	std	Z+8, r24	; 0x08
    7342:	91 87       	std	Z+9, r25	; 0x09
    7344:	40 e0       	ldi	r20, 0x00	; 0
    7346:	bf 01       	movw	r22, r30
    7348:	80 ea       	ldi	r24, 0xA0	; 160
    734a:	94 e0       	ldi	r25, 0x04	; 4
    734c:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    7350:	c8 2f       	mov	r28, r24
    7352:	8d b7       	in	r24, 0x3d	; 61
    7354:	9e b7       	in	r25, 0x3e	; 62
    7356:	0a 96       	adiw	r24, 0x0a	; 10
    7358:	8d bf       	out	0x3d, r24	; 61
    735a:	9e bf       	out	0x3e, r25	; 62
    735c:	cc 23       	and	r28, r28
    735e:	f9 f0       	breq	.+62     	; 0x739e <twi_start+0x478>
    7360:	87 ee       	ldi	r24, 0xE7	; 231
    7362:	92 e3       	ldi	r25, 0x32	; 50
    7364:	9f 93       	push	r25
    7366:	8f 93       	push	r24
    7368:	1f 92       	push	r1
    736a:	80 e4       	ldi	r24, 0x40	; 64
    736c:	8f 93       	push	r24
    736e:	8b e3       	ldi	r24, 0x3B	; 59
    7370:	95 e2       	ldi	r25, 0x25	; 37
    7372:	9f 93       	push	r25
    7374:	8f 93       	push	r24
    7376:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    737a:	81 34       	cpi	r24, 0x41	; 65
    737c:	91 05       	cpc	r25, r1
    737e:	10 f0       	brcs	.+4      	; 0x7384 <twi_start+0x45e>
    7380:	80 e4       	ldi	r24, 0x40	; 64
    7382:	90 e0       	ldi	r25, 0x00	; 0
    7384:	40 e0       	ldi	r20, 0x00	; 0
    7386:	68 2f       	mov	r22, r24
    7388:	8b e3       	ldi	r24, 0x3B	; 59
    738a:	95 e2       	ldi	r25, 0x25	; 37
    738c:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    7390:	0f 90       	pop	r0
    7392:	0f 90       	pop	r0
    7394:	0f 90       	pop	r0
    7396:	0f 90       	pop	r0
    7398:	0f 90       	pop	r0
    739a:	0f 90       	pop	r0
    739c:	40 c2       	rjmp	.+1152   	; 0x781e <twi_start+0x8f8>
    739e:	61 e5       	ldi	r22, 0x51	; 81
    73a0:	73 ec       	ldi	r23, 0xC3	; 195
    73a2:	80 e0       	ldi	r24, 0x00	; 0
    73a4:	90 e0       	ldi	r25, 0x00	; 0
    73a6:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    73aa:	eb e2       	ldi	r30, 0x2B	; 43
    73ac:	f0 e2       	ldi	r31, 0x20	; 32
    73ae:	88 e6       	ldi	r24, 0x68	; 104
    73b0:	80 83       	st	Z, r24
    73b2:	85 e7       	ldi	r24, 0x75	; 117
    73b4:	81 83       	std	Z+1, r24	; 0x01
    73b6:	81 e0       	ldi	r24, 0x01	; 1
    73b8:	90 e0       	ldi	r25, 0x00	; 0
    73ba:	84 83       	std	Z+4, r24	; 0x04
    73bc:	95 83       	std	Z+5, r25	; 0x05
    73be:	80 87       	std	Z+8, r24	; 0x08
    73c0:	91 87       	std	Z+9, r25	; 0x09
    73c2:	41 e0       	ldi	r20, 0x01	; 1
    73c4:	bf 01       	movw	r22, r30
    73c6:	80 ea       	ldi	r24, 0xA0	; 160
    73c8:	94 e0       	ldi	r25, 0x04	; 4
    73ca:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    73ce:	c8 2f       	mov	r28, r24
    73d0:	81 11       	cpse	r24, r1
    73d2:	25 c2       	rjmp	.+1098   	; 0x781e <twi_start+0x8f8>
    73d4:	a3 e3       	ldi	r26, 0x33	; 51
    73d6:	b5 e2       	ldi	r27, 0x25	; 37
    73d8:	8c 91       	ld	r24, X
    73da:	80 93 71 27 	sts	0x2771, r24	; 0x802771 <g_twi1_gyro_1_version>
    73de:	eb e2       	ldi	r30, 0x2B	; 43
    73e0:	f0 e2       	ldi	r31, 0x20	; 32
    73e2:	88 e6       	ldi	r24, 0x68	; 104
    73e4:	80 83       	st	Z, r24
    73e6:	87 e3       	ldi	r24, 0x37	; 55
    73e8:	81 83       	std	Z+1, r24	; 0x01
    73ea:	81 e0       	ldi	r24, 0x01	; 1
    73ec:	90 e0       	ldi	r25, 0x00	; 0
    73ee:	84 83       	std	Z+4, r24	; 0x04
    73f0:	95 83       	std	Z+5, r25	; 0x05
    73f2:	22 e0       	ldi	r18, 0x02	; 2
    73f4:	2c 93       	st	X, r18
    73f6:	80 87       	std	Z+8, r24	; 0x08
    73f8:	91 87       	std	Z+9, r25	; 0x09
    73fa:	40 e0       	ldi	r20, 0x00	; 0
    73fc:	bf 01       	movw	r22, r30
    73fe:	80 ea       	ldi	r24, 0xA0	; 160
    7400:	94 e0       	ldi	r25, 0x04	; 4
    7402:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    7406:	c8 2f       	mov	r28, r24
    7408:	81 11       	cpse	r24, r1
    740a:	09 c2       	rjmp	.+1042   	; 0x781e <twi_start+0x8f8>
    740c:	eb e2       	ldi	r30, 0x2B	; 43
    740e:	f0 e2       	ldi	r31, 0x20	; 32
    7410:	8c e0       	ldi	r24, 0x0C	; 12
    7412:	80 83       	st	Z, r24
    7414:	8b e0       	ldi	r24, 0x0B	; 11
    7416:	81 83       	std	Z+1, r24	; 0x01
    7418:	81 e0       	ldi	r24, 0x01	; 1
    741a:	90 e0       	ldi	r25, 0x00	; 0
    741c:	84 83       	std	Z+4, r24	; 0x04
    741e:	95 83       	std	Z+5, r25	; 0x05
    7420:	21 e0       	ldi	r18, 0x01	; 1
    7422:	20 93 33 25 	sts	0x2533, r18	; 0x802533 <twi1_m_data>
    7426:	80 87       	std	Z+8, r24	; 0x08
    7428:	91 87       	std	Z+9, r25	; 0x09
    742a:	40 e0       	ldi	r20, 0x00	; 0
    742c:	bf 01       	movw	r22, r30
    742e:	80 ea       	ldi	r24, 0xA0	; 160
    7430:	94 e0       	ldi	r25, 0x04	; 4
    7432:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    7436:	c8 2f       	mov	r28, r24
    7438:	81 11       	cpse	r24, r1
    743a:	f1 c1       	rjmp	.+994    	; 0x781e <twi_start+0x8f8>
    743c:	61 e5       	ldi	r22, 0x51	; 81
    743e:	73 ec       	ldi	r23, 0xC3	; 195
    7440:	80 e0       	ldi	r24, 0x00	; 0
    7442:	90 e0       	ldi	r25, 0x00	; 0
    7444:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    7448:	eb e2       	ldi	r30, 0x2B	; 43
    744a:	f0 e2       	ldi	r31, 0x20	; 32
    744c:	8c e0       	ldi	r24, 0x0C	; 12
    744e:	80 83       	st	Z, r24
    7450:	11 82       	std	Z+1, r1	; 0x01
    7452:	81 e0       	ldi	r24, 0x01	; 1
    7454:	90 e0       	ldi	r25, 0x00	; 0
    7456:	84 83       	std	Z+4, r24	; 0x04
    7458:	95 83       	std	Z+5, r25	; 0x05
    745a:	80 87       	std	Z+8, r24	; 0x08
    745c:	91 87       	std	Z+9, r25	; 0x09
    745e:	41 e0       	ldi	r20, 0x01	; 1
    7460:	bf 01       	movw	r22, r30
    7462:	80 ea       	ldi	r24, 0xA0	; 160
    7464:	94 e0       	ldi	r25, 0x04	; 4
    7466:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    746a:	c8 2f       	mov	r28, r24
    746c:	81 11       	cpse	r24, r1
    746e:	d7 c1       	rjmp	.+942    	; 0x781e <twi_start+0x8f8>
    7470:	80 91 33 25 	lds	r24, 0x2533	; 0x802533 <twi1_m_data>
    7474:	80 93 4c 27 	sts	0x274C, r24	; 0x80274c <g_twi1_gyro_2_version>
    7478:	1f 92       	push	r1
    747a:	8f 93       	push	r24
    747c:	80 91 71 27 	lds	r24, 0x2771	; 0x802771 <g_twi1_gyro_1_version>
    7480:	1f 92       	push	r1
    7482:	8f 93       	push	r24
    7484:	8c ea       	ldi	r24, 0xAC	; 172
    7486:	92 e3       	ldi	r25, 0x32	; 50
    7488:	9f 93       	push	r25
    748a:	8f 93       	push	r24
    748c:	1f 92       	push	r1
    748e:	80 e4       	ldi	r24, 0x40	; 64
    7490:	8f 93       	push	r24
    7492:	8b e3       	ldi	r24, 0x3B	; 59
    7494:	95 e2       	ldi	r25, 0x25	; 37
    7496:	9f 93       	push	r25
    7498:	8f 93       	push	r24
    749a:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    749e:	81 34       	cpi	r24, 0x41	; 65
    74a0:	91 05       	cpc	r25, r1
    74a2:	10 f0       	brcs	.+4      	; 0x74a8 <twi_start+0x582>
    74a4:	80 e4       	ldi	r24, 0x40	; 64
    74a6:	90 e0       	ldi	r25, 0x00	; 0
    74a8:	40 e0       	ldi	r20, 0x00	; 0
    74aa:	68 2f       	mov	r22, r24
    74ac:	8b e3       	ldi	r24, 0x3B	; 59
    74ae:	95 e2       	ldi	r25, 0x25	; 37
    74b0:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    74b4:	eb e2       	ldi	r30, 0x2B	; 43
    74b6:	f0 e2       	ldi	r31, 0x20	; 32
    74b8:	8c e0       	ldi	r24, 0x0C	; 12
    74ba:	80 83       	st	Z, r24
    74bc:	8a e0       	ldi	r24, 0x0A	; 10
    74be:	81 83       	std	Z+1, r24	; 0x01
    74c0:	81 e0       	ldi	r24, 0x01	; 1
    74c2:	90 e0       	ldi	r25, 0x00	; 0
    74c4:	84 83       	std	Z+4, r24	; 0x04
    74c6:	95 83       	std	Z+5, r25	; 0x05
    74c8:	2f e1       	ldi	r18, 0x1F	; 31
    74ca:	20 93 33 25 	sts	0x2533, r18	; 0x802533 <twi1_m_data>
    74ce:	80 87       	std	Z+8, r24	; 0x08
    74d0:	91 87       	std	Z+9, r25	; 0x09
    74d2:	40 e0       	ldi	r20, 0x00	; 0
    74d4:	bf 01       	movw	r22, r30
    74d6:	80 ea       	ldi	r24, 0xA0	; 160
    74d8:	94 e0       	ldi	r25, 0x04	; 4
    74da:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    74de:	c8 2f       	mov	r28, r24
    74e0:	ed b7       	in	r30, 0x3d	; 61
    74e2:	fe b7       	in	r31, 0x3e	; 62
    74e4:	3a 96       	adiw	r30, 0x0a	; 10
    74e6:	ed bf       	out	0x3d, r30	; 61
    74e8:	fe bf       	out	0x3e, r31	; 62
    74ea:	81 11       	cpse	r24, r1
    74ec:	98 c1       	rjmp	.+816    	; 0x781e <twi_start+0x8f8>
    74ee:	eb e2       	ldi	r30, 0x2B	; 43
    74f0:	f0 e2       	ldi	r31, 0x20	; 32
    74f2:	8c e0       	ldi	r24, 0x0C	; 12
    74f4:	80 83       	st	Z, r24
    74f6:	80 e1       	ldi	r24, 0x10	; 16
    74f8:	81 83       	std	Z+1, r24	; 0x01
    74fa:	81 e0       	ldi	r24, 0x01	; 1
    74fc:	90 e0       	ldi	r25, 0x00	; 0
    74fe:	84 83       	std	Z+4, r24	; 0x04
    7500:	95 83       	std	Z+5, r25	; 0x05
    7502:	83 e0       	ldi	r24, 0x03	; 3
    7504:	90 e0       	ldi	r25, 0x00	; 0
    7506:	80 87       	std	Z+8, r24	; 0x08
    7508:	91 87       	std	Z+9, r25	; 0x09
    750a:	41 e0       	ldi	r20, 0x01	; 1
    750c:	bf 01       	movw	r22, r30
    750e:	80 ea       	ldi	r24, 0xA0	; 160
    7510:	94 e0       	ldi	r25, 0x04	; 4
    7512:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    7516:	c8 2f       	mov	r28, r24
    7518:	81 11       	cpse	r24, r1
    751a:	81 c1       	rjmp	.+770    	; 0x781e <twi_start+0x8f8>
    751c:	a3 e3       	ldi	r26, 0x33	; 51
    751e:	b5 e2       	ldi	r27, 0x25	; 37
    7520:	8c 91       	ld	r24, X
    7522:	80 93 4b 27 	sts	0x274B, r24	; 0x80274b <g_twi1_gyro_2_asax>
    7526:	11 96       	adiw	r26, 0x01	; 1
    7528:	8c 91       	ld	r24, X
    752a:	11 97       	sbiw	r26, 0x01	; 1
    752c:	80 93 4a 27 	sts	0x274A, r24	; 0x80274a <g_twi1_gyro_2_asay>
    7530:	12 96       	adiw	r26, 0x02	; 2
    7532:	8c 91       	ld	r24, X
    7534:	12 97       	sbiw	r26, 0x02	; 2
    7536:	80 93 49 27 	sts	0x2749, r24	; 0x802749 <g_twi1_gyro_2_asaz>
    753a:	eb e2       	ldi	r30, 0x2B	; 43
    753c:	f0 e2       	ldi	r31, 0x20	; 32
    753e:	8c e0       	ldi	r24, 0x0C	; 12
    7540:	80 83       	st	Z, r24
    7542:	8a e0       	ldi	r24, 0x0A	; 10
    7544:	81 83       	std	Z+1, r24	; 0x01
    7546:	81 e0       	ldi	r24, 0x01	; 1
    7548:	90 e0       	ldi	r25, 0x00	; 0
    754a:	84 83       	std	Z+4, r24	; 0x04
    754c:	95 83       	std	Z+5, r25	; 0x05
    754e:	20 e1       	ldi	r18, 0x10	; 16
    7550:	2c 93       	st	X, r18
    7552:	80 87       	std	Z+8, r24	; 0x08
    7554:	91 87       	std	Z+9, r25	; 0x09
    7556:	40 e0       	ldi	r20, 0x00	; 0
    7558:	bf 01       	movw	r22, r30
    755a:	80 ea       	ldi	r24, 0xA0	; 160
    755c:	94 e0       	ldi	r25, 0x04	; 4
    755e:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    7562:	c8 2f       	mov	r28, r24
    7564:	81 11       	cpse	r24, r1
    7566:	5b c1       	rjmp	.+694    	; 0x781e <twi_start+0x8f8>
    7568:	61 e5       	ldi	r22, 0x51	; 81
    756a:	73 ec       	ldi	r23, 0xC3	; 195
    756c:	80 e0       	ldi	r24, 0x00	; 0
    756e:	90 e0       	ldi	r25, 0x00	; 0
    7570:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    7574:	eb e2       	ldi	r30, 0x2B	; 43
    7576:	f0 e2       	ldi	r31, 0x20	; 32
    7578:	8c e0       	ldi	r24, 0x0C	; 12
    757a:	80 83       	st	Z, r24
    757c:	8a e0       	ldi	r24, 0x0A	; 10
    757e:	81 83       	std	Z+1, r24	; 0x01
    7580:	81 e0       	ldi	r24, 0x01	; 1
    7582:	90 e0       	ldi	r25, 0x00	; 0
    7584:	84 83       	std	Z+4, r24	; 0x04
    7586:	95 83       	std	Z+5, r25	; 0x05
    7588:	22 e1       	ldi	r18, 0x12	; 18
    758a:	20 93 33 25 	sts	0x2533, r18	; 0x802533 <twi1_m_data>
    758e:	80 87       	std	Z+8, r24	; 0x08
    7590:	91 87       	std	Z+9, r25	; 0x09
    7592:	40 e0       	ldi	r20, 0x00	; 0
    7594:	bf 01       	movw	r22, r30
    7596:	80 ea       	ldi	r24, 0xA0	; 160
    7598:	94 e0       	ldi	r25, 0x04	; 4
    759a:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    759e:	c8 2f       	mov	r28, r24
    75a0:	81 11       	cpse	r24, r1
    75a2:	3d c1       	rjmp	.+634    	; 0x781e <twi_start+0x8f8>
    75a4:	ab e2       	ldi	r26, 0x2B	; 43
    75a6:	b0 e2       	ldi	r27, 0x20	; 32
    75a8:	88 e6       	ldi	r24, 0x68	; 104
    75aa:	8c 93       	st	X, r24
    75ac:	83 e1       	ldi	r24, 0x13	; 19
    75ae:	11 96       	adiw	r26, 0x01	; 1
    75b0:	8c 93       	st	X, r24
    75b2:	11 97       	sbiw	r26, 0x01	; 1
    75b4:	81 e0       	ldi	r24, 0x01	; 1
    75b6:	90 e0       	ldi	r25, 0x00	; 0
    75b8:	14 96       	adiw	r26, 0x04	; 4
    75ba:	8d 93       	st	X+, r24
    75bc:	9c 93       	st	X, r25
    75be:	15 97       	sbiw	r26, 0x05	; 5
    75c0:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <g_twi1_gyro_1_gyro_ofsx>
    75c4:	90 91 50 20 	lds	r25, 0x2050	; 0x802050 <g_twi1_gyro_1_gyro_ofsx+0x1>
    75c8:	e3 e3       	ldi	r30, 0x33	; 51
    75ca:	f5 e2       	ldi	r31, 0x25	; 37
    75cc:	90 83       	st	Z, r25
    75ce:	81 83       	std	Z+1, r24	; 0x01
    75d0:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <g_twi1_gyro_1_gyro_ofsy>
    75d4:	90 91 4e 20 	lds	r25, 0x204E	; 0x80204e <g_twi1_gyro_1_gyro_ofsy+0x1>
    75d8:	92 83       	std	Z+2, r25	; 0x02
    75da:	83 83       	std	Z+3, r24	; 0x03
    75dc:	80 91 4b 20 	lds	r24, 0x204B	; 0x80204b <g_twi1_gyro_1_gyro_ofsz>
    75e0:	90 91 4c 20 	lds	r25, 0x204C	; 0x80204c <g_twi1_gyro_1_gyro_ofsz+0x1>
    75e4:	94 83       	std	Z+4, r25	; 0x04
    75e6:	85 83       	std	Z+5, r24	; 0x05
    75e8:	86 e0       	ldi	r24, 0x06	; 6
    75ea:	90 e0       	ldi	r25, 0x00	; 0
    75ec:	18 96       	adiw	r26, 0x08	; 8
    75ee:	8d 93       	st	X+, r24
    75f0:	9c 93       	st	X, r25
    75f2:	19 97       	sbiw	r26, 0x09	; 9
    75f4:	40 e0       	ldi	r20, 0x00	; 0
    75f6:	bd 01       	movw	r22, r26
    75f8:	80 ea       	ldi	r24, 0xA0	; 160
    75fa:	94 e0       	ldi	r25, 0x04	; 4
    75fc:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    7600:	c8 2f       	mov	r28, r24
    7602:	81 11       	cpse	r24, r1
    7604:	0c c1       	rjmp	.+536    	; 0x781e <twi_start+0x8f8>
    7606:	eb e2       	ldi	r30, 0x2B	; 43
    7608:	f0 e2       	ldi	r31, 0x20	; 32
    760a:	88 e6       	ldi	r24, 0x68	; 104
    760c:	80 83       	st	Z, r24
    760e:	87 e7       	ldi	r24, 0x77	; 119
    7610:	81 83       	std	Z+1, r24	; 0x01
    7612:	81 e0       	ldi	r24, 0x01	; 1
    7614:	90 e0       	ldi	r25, 0x00	; 0
    7616:	84 83       	std	Z+4, r24	; 0x04
    7618:	95 83       	std	Z+5, r25	; 0x05
    761a:	80 91 5b 20 	lds	r24, 0x205B	; 0x80205b <g_twi1_gyro_1_accel_ofsx>
    761e:	90 91 5c 20 	lds	r25, 0x205C	; 0x80205c <g_twi1_gyro_1_accel_ofsx+0x1>
    7622:	a3 e3       	ldi	r26, 0x33	; 51
    7624:	b5 e2       	ldi	r27, 0x25	; 37
    7626:	9c 01       	movw	r18, r24
    7628:	22 0f       	add	r18, r18
    762a:	23 2f       	mov	r18, r19
    762c:	22 1f       	adc	r18, r18
    762e:	33 0b       	sbc	r19, r19
    7630:	31 95       	neg	r19
    7632:	2c 93       	st	X, r18
    7634:	88 0f       	add	r24, r24
    7636:	11 96       	adiw	r26, 0x01	; 1
    7638:	8c 93       	st	X, r24
    763a:	82 e0       	ldi	r24, 0x02	; 2
    763c:	90 e0       	ldi	r25, 0x00	; 0
    763e:	80 87       	std	Z+8, r24	; 0x08
    7640:	91 87       	std	Z+9, r25	; 0x09
    7642:	40 e0       	ldi	r20, 0x00	; 0
    7644:	bf 01       	movw	r22, r30
    7646:	80 ea       	ldi	r24, 0xA0	; 160
    7648:	94 e0       	ldi	r25, 0x04	; 4
    764a:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    764e:	c8 2f       	mov	r28, r24
    7650:	81 11       	cpse	r24, r1
    7652:	e5 c0       	rjmp	.+458    	; 0x781e <twi_start+0x8f8>
    7654:	8a e7       	ldi	r24, 0x7A	; 122
    7656:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <twi1_packet+0x1>
    765a:	80 91 59 20 	lds	r24, 0x2059	; 0x802059 <g_twi1_gyro_1_accel_ofsy>
    765e:	90 91 5a 20 	lds	r25, 0x205A	; 0x80205a <g_twi1_gyro_1_accel_ofsy+0x1>
    7662:	e3 e3       	ldi	r30, 0x33	; 51
    7664:	f5 e2       	ldi	r31, 0x25	; 37
    7666:	9c 01       	movw	r18, r24
    7668:	22 0f       	add	r18, r18
    766a:	23 2f       	mov	r18, r19
    766c:	22 1f       	adc	r18, r18
    766e:	33 0b       	sbc	r19, r19
    7670:	31 95       	neg	r19
    7672:	20 83       	st	Z, r18
    7674:	88 0f       	add	r24, r24
    7676:	81 83       	std	Z+1, r24	; 0x01
    7678:	40 e0       	ldi	r20, 0x00	; 0
    767a:	6b e2       	ldi	r22, 0x2B	; 43
    767c:	70 e2       	ldi	r23, 0x20	; 32
    767e:	80 ea       	ldi	r24, 0xA0	; 160
    7680:	94 e0       	ldi	r25, 0x04	; 4
    7682:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    7686:	c8 2f       	mov	r28, r24
    7688:	81 11       	cpse	r24, r1
    768a:	c9 c0       	rjmp	.+402    	; 0x781e <twi_start+0x8f8>
    768c:	8d e7       	ldi	r24, 0x7D	; 125
    768e:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <twi1_packet+0x1>
    7692:	80 91 57 20 	lds	r24, 0x2057	; 0x802057 <g_twi1_gyro_1_accel_ofsz>
    7696:	90 91 58 20 	lds	r25, 0x2058	; 0x802058 <g_twi1_gyro_1_accel_ofsz+0x1>
    769a:	e3 e3       	ldi	r30, 0x33	; 51
    769c:	f5 e2       	ldi	r31, 0x25	; 37
    769e:	9c 01       	movw	r18, r24
    76a0:	22 0f       	add	r18, r18
    76a2:	23 2f       	mov	r18, r19
    76a4:	22 1f       	adc	r18, r18
    76a6:	33 0b       	sbc	r19, r19
    76a8:	31 95       	neg	r19
    76aa:	20 83       	st	Z, r18
    76ac:	88 0f       	add	r24, r24
    76ae:	81 83       	std	Z+1, r24	; 0x01
    76b0:	40 e0       	ldi	r20, 0x00	; 0
    76b2:	6b e2       	ldi	r22, 0x2B	; 43
    76b4:	70 e2       	ldi	r23, 0x20	; 32
    76b6:	80 ea       	ldi	r24, 0xA0	; 160
    76b8:	94 e0       	ldi	r25, 0x04	; 4
    76ba:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    76be:	c8 2f       	mov	r28, r24
    76c0:	81 11       	cpse	r24, r1
    76c2:	ad c0       	rjmp	.+346    	; 0x781e <twi_start+0x8f8>
    76c4:	eb e2       	ldi	r30, 0x2B	; 43
    76c6:	f0 e2       	ldi	r31, 0x20	; 32
    76c8:	88 e6       	ldi	r24, 0x68	; 104
    76ca:	80 83       	st	Z, r24
    76cc:	89 e1       	ldi	r24, 0x19	; 25
    76ce:	81 83       	std	Z+1, r24	; 0x01
    76d0:	81 e0       	ldi	r24, 0x01	; 1
    76d2:	90 e0       	ldi	r25, 0x00	; 0
    76d4:	84 83       	std	Z+4, r24	; 0x04
    76d6:	95 83       	std	Z+5, r25	; 0x05
    76d8:	23 e6       	ldi	r18, 0x63	; 99
    76da:	20 93 33 25 	sts	0x2533, r18	; 0x802533 <twi1_m_data>
    76de:	80 87       	std	Z+8, r24	; 0x08
    76e0:	91 87       	std	Z+9, r25	; 0x09
    76e2:	40 e0       	ldi	r20, 0x00	; 0
    76e4:	bf 01       	movw	r22, r30
    76e6:	80 ea       	ldi	r24, 0xA0	; 160
    76e8:	94 e0       	ldi	r25, 0x04	; 4
    76ea:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    76ee:	c8 2f       	mov	r28, r24
    76f0:	81 11       	cpse	r24, r1
    76f2:	95 c0       	rjmp	.+298    	; 0x781e <twi_start+0x8f8>
    76f4:	eb e2       	ldi	r30, 0x2B	; 43
    76f6:	f0 e2       	ldi	r31, 0x20	; 32
    76f8:	88 e6       	ldi	r24, 0x68	; 104
    76fa:	80 83       	st	Z, r24
    76fc:	8a e1       	ldi	r24, 0x1A	; 26
    76fe:	81 83       	std	Z+1, r24	; 0x01
    7700:	81 e0       	ldi	r24, 0x01	; 1
    7702:	90 e0       	ldi	r25, 0x00	; 0
    7704:	84 83       	std	Z+4, r24	; 0x04
    7706:	95 83       	std	Z+5, r25	; 0x05
    7708:	26 e0       	ldi	r18, 0x06	; 6
    770a:	20 93 33 25 	sts	0x2533, r18	; 0x802533 <twi1_m_data>
    770e:	80 87       	std	Z+8, r24	; 0x08
    7710:	91 87       	std	Z+9, r25	; 0x09
    7712:	40 e0       	ldi	r20, 0x00	; 0
    7714:	bf 01       	movw	r22, r30
    7716:	80 ea       	ldi	r24, 0xA0	; 160
    7718:	94 e0       	ldi	r25, 0x04	; 4
    771a:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    771e:	c8 2f       	mov	r28, r24
    7720:	81 11       	cpse	r24, r1
    7722:	7d c0       	rjmp	.+250    	; 0x781e <twi_start+0x8f8>
    7724:	eb e2       	ldi	r30, 0x2B	; 43
    7726:	f0 e2       	ldi	r31, 0x20	; 32
    7728:	88 e6       	ldi	r24, 0x68	; 104
    772a:	80 83       	st	Z, r24
    772c:	8d e1       	ldi	r24, 0x1D	; 29
    772e:	81 83       	std	Z+1, r24	; 0x01
    7730:	81 e0       	ldi	r24, 0x01	; 1
    7732:	90 e0       	ldi	r25, 0x00	; 0
    7734:	84 83       	std	Z+4, r24	; 0x04
    7736:	95 83       	std	Z+5, r25	; 0x05
    7738:	26 e0       	ldi	r18, 0x06	; 6
    773a:	20 93 33 25 	sts	0x2533, r18	; 0x802533 <twi1_m_data>
    773e:	80 87       	std	Z+8, r24	; 0x08
    7740:	91 87       	std	Z+9, r25	; 0x09
    7742:	40 e0       	ldi	r20, 0x00	; 0
    7744:	bf 01       	movw	r22, r30
    7746:	80 ea       	ldi	r24, 0xA0	; 160
    7748:	94 e0       	ldi	r25, 0x04	; 4
    774a:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    774e:	c8 2f       	mov	r28, r24
    7750:	81 11       	cpse	r24, r1
    7752:	65 c0       	rjmp	.+202    	; 0x781e <twi_start+0x8f8>
    7754:	eb e2       	ldi	r30, 0x2B	; 43
    7756:	f0 e2       	ldi	r31, 0x20	; 32
    7758:	88 e6       	ldi	r24, 0x68	; 104
    775a:	80 83       	st	Z, r24
    775c:	8f e1       	ldi	r24, 0x1F	; 31
    775e:	81 83       	std	Z+1, r24	; 0x01
    7760:	81 e0       	ldi	r24, 0x01	; 1
    7762:	90 e0       	ldi	r25, 0x00	; 0
    7764:	84 83       	std	Z+4, r24	; 0x04
    7766:	95 83       	std	Z+5, r25	; 0x05
    7768:	29 e1       	ldi	r18, 0x19	; 25
    776a:	20 93 33 25 	sts	0x2533, r18	; 0x802533 <twi1_m_data>
    776e:	80 87       	std	Z+8, r24	; 0x08
    7770:	91 87       	std	Z+9, r25	; 0x09
    7772:	40 e0       	ldi	r20, 0x00	; 0
    7774:	bf 01       	movw	r22, r30
    7776:	80 ea       	ldi	r24, 0xA0	; 160
    7778:	94 e0       	ldi	r25, 0x04	; 4
    777a:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    777e:	c8 2f       	mov	r28, r24
    7780:	81 11       	cpse	r24, r1
    7782:	4d c0       	rjmp	.+154    	; 0x781e <twi_start+0x8f8>
    7784:	eb e2       	ldi	r30, 0x2B	; 43
    7786:	f0 e2       	ldi	r31, 0x20	; 32
    7788:	88 e6       	ldi	r24, 0x68	; 104
    778a:	80 83       	st	Z, r24
    778c:	8a e6       	ldi	r24, 0x6A	; 106
    778e:	81 83       	std	Z+1, r24	; 0x01
    7790:	81 e0       	ldi	r24, 0x01	; 1
    7792:	90 e0       	ldi	r25, 0x00	; 0
    7794:	84 83       	std	Z+4, r24	; 0x04
    7796:	95 83       	std	Z+5, r25	; 0x05
    7798:	21 e0       	ldi	r18, 0x01	; 1
    779a:	20 93 33 25 	sts	0x2533, r18	; 0x802533 <twi1_m_data>
    779e:	80 87       	std	Z+8, r24	; 0x08
    77a0:	91 87       	std	Z+9, r25	; 0x09
    77a2:	40 e0       	ldi	r20, 0x00	; 0
    77a4:	bf 01       	movw	r22, r30
    77a6:	80 ea       	ldi	r24, 0xA0	; 160
    77a8:	94 e0       	ldi	r25, 0x04	; 4
    77aa:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    77ae:	c8 2f       	mov	r28, r24
    77b0:	81 11       	cpse	r24, r1
    77b2:	35 c0       	rjmp	.+106    	; 0x781e <twi_start+0x8f8>
    77b4:	61 e5       	ldi	r22, 0x51	; 81
    77b6:	73 ec       	ldi	r23, 0xC3	; 195
    77b8:	80 e0       	ldi	r24, 0x00	; 0
    77ba:	90 e0       	ldi	r25, 0x00	; 0
    77bc:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    77c0:	81 e0       	ldi	r24, 0x01	; 1
    77c2:	80 93 72 27 	sts	0x2772, r24	; 0x802772 <g_twi1_gyro_valid>
    77c6:	89 e4       	ldi	r24, 0x49	; 73
    77c8:	92 e3       	ldi	r25, 0x32	; 50
    77ca:	9f 93       	push	r25
    77cc:	8f 93       	push	r24
    77ce:	1f 92       	push	r1
    77d0:	10 e4       	ldi	r17, 0x40	; 64
    77d2:	1f 93       	push	r17
    77d4:	cb e3       	ldi	r28, 0x3B	; 59
    77d6:	d5 e2       	ldi	r29, 0x25	; 37
    77d8:	df 93       	push	r29
    77da:	cf 93       	push	r28
    77dc:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    77e0:	ae 01       	movw	r20, r28
    77e2:	68 e2       	ldi	r22, 0x28	; 40
    77e4:	88 e0       	ldi	r24, 0x08	; 8
    77e6:	91 da       	rcall	.-2782   	; 0x6d0a <task_twi2_lcd_str>
    77e8:	8e e8       	ldi	r24, 0x8E	; 142
    77ea:	92 e3       	ldi	r25, 0x32	; 50
    77ec:	9f 93       	push	r25
    77ee:	8f 93       	push	r24
    77f0:	1f 92       	push	r1
    77f2:	1f 93       	push	r17
    77f4:	df 93       	push	r29
    77f6:	cf 93       	push	r28
    77f8:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    77fc:	81 34       	cpi	r24, 0x41	; 65
    77fe:	91 05       	cpc	r25, r1
    7800:	10 f0       	brcs	.+4      	; 0x7806 <twi_start+0x8e0>
    7802:	80 e4       	ldi	r24, 0x40	; 64
    7804:	90 e0       	ldi	r25, 0x00	; 0
    7806:	40 e0       	ldi	r20, 0x00	; 0
    7808:	68 2f       	mov	r22, r24
    780a:	8b e3       	ldi	r24, 0x3B	; 59
    780c:	95 e2       	ldi	r25, 0x25	; 37
    780e:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    7812:	8d b7       	in	r24, 0x3d	; 61
    7814:	9e b7       	in	r25, 0x3e	; 62
    7816:	0c 96       	adiw	r24, 0x0c	; 12
    7818:	8d bf       	out	0x3d, r24	; 61
    781a:	9e bf       	out	0x3e, r25	; 62
    781c:	23 c0       	rjmp	.+70     	; 0x7864 <twi_start+0x93e>
    781e:	8c 2f       	mov	r24, r28
    7820:	0c 2e       	mov	r0, r28
    7822:	00 0c       	add	r0, r0
    7824:	99 0b       	sbc	r25, r25
    7826:	9f 93       	push	r25
    7828:	cf 93       	push	r28
    782a:	8d e5       	ldi	r24, 0x5D	; 93
    782c:	92 e3       	ldi	r25, 0x32	; 50
    782e:	9f 93       	push	r25
    7830:	8f 93       	push	r24
    7832:	1f 92       	push	r1
    7834:	80 e4       	ldi	r24, 0x40	; 64
    7836:	8f 93       	push	r24
    7838:	8b e3       	ldi	r24, 0x3B	; 59
    783a:	95 e2       	ldi	r25, 0x25	; 37
    783c:	9f 93       	push	r25
    783e:	8f 93       	push	r24
    7840:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    7844:	81 34       	cpi	r24, 0x41	; 65
    7846:	91 05       	cpc	r25, r1
    7848:	10 f0       	brcs	.+4      	; 0x784e <twi_start+0x928>
    784a:	80 e4       	ldi	r24, 0x40	; 64
    784c:	90 e0       	ldi	r25, 0x00	; 0
    784e:	40 e0       	ldi	r20, 0x00	; 0
    7850:	68 2f       	mov	r22, r24
    7852:	8b e3       	ldi	r24, 0x3B	; 59
    7854:	95 e2       	ldi	r25, 0x25	; 37
    7856:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    785a:	ed b7       	in	r30, 0x3d	; 61
    785c:	fe b7       	in	r31, 0x3e	; 62
    785e:	38 96       	adiw	r30, 0x08	; 8
    7860:	ed bf       	out	0x3d, r30	; 61
    7862:	fe bf       	out	0x3e, r31	; 62
    7864:	1f 92       	push	r1
    7866:	86 e7       	ldi	r24, 0x76	; 118
    7868:	8f 93       	push	r24
    786a:	8d e0       	ldi	r24, 0x0D	; 13
    786c:	92 e3       	ldi	r25, 0x32	; 50
    786e:	9f 93       	push	r25
    7870:	8f 93       	push	r24
    7872:	1f 92       	push	r1
    7874:	80 e4       	ldi	r24, 0x40	; 64
    7876:	8f 93       	push	r24
    7878:	8b e3       	ldi	r24, 0x3B	; 59
    787a:	95 e2       	ldi	r25, 0x25	; 37
    787c:	9f 93       	push	r25
    787e:	8f 93       	push	r24
    7880:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    7884:	81 34       	cpi	r24, 0x41	; 65
    7886:	91 05       	cpc	r25, r1
    7888:	10 f0       	brcs	.+4      	; 0x788e <twi_start+0x968>
    788a:	80 e4       	ldi	r24, 0x40	; 64
    788c:	90 e0       	ldi	r25, 0x00	; 0
    788e:	40 e0       	ldi	r20, 0x00	; 0
    7890:	68 2f       	mov	r22, r24
    7892:	8b e3       	ldi	r24, 0x3B	; 59
    7894:	95 e2       	ldi	r25, 0x25	; 37
    7896:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    789a:	eb e2       	ldi	r30, 0x2B	; 43
    789c:	f0 e2       	ldi	r31, 0x20	; 32
    789e:	86 e7       	ldi	r24, 0x76	; 118
    78a0:	80 83       	st	Z, r24
    78a2:	8e e1       	ldi	r24, 0x1E	; 30
    78a4:	81 83       	std	Z+1, r24	; 0x01
    78a6:	81 e0       	ldi	r24, 0x01	; 1
    78a8:	90 e0       	ldi	r25, 0x00	; 0
    78aa:	84 83       	std	Z+4, r24	; 0x04
    78ac:	95 83       	std	Z+5, r25	; 0x05
    78ae:	10 86       	std	Z+8, r1	; 0x08
    78b0:	11 86       	std	Z+9, r1	; 0x09
    78b2:	40 e0       	ldi	r20, 0x00	; 0
    78b4:	bf 01       	movw	r22, r30
    78b6:	80 ea       	ldi	r24, 0xA0	; 160
    78b8:	94 e0       	ldi	r25, 0x04	; 4
    78ba:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    78be:	c8 2f       	mov	r28, r24
    78c0:	8d b7       	in	r24, 0x3d	; 61
    78c2:	9e b7       	in	r25, 0x3e	; 62
    78c4:	08 96       	adiw	r24, 0x08	; 8
    78c6:	8d bf       	out	0x3d, r24	; 61
    78c8:	9e bf       	out	0x3e, r25	; 62
    78ca:	c1 11       	cpse	r28, r1
    78cc:	04 c1       	rjmp	.+520    	; 0x7ad6 <twi_start+0xbb0>
    78ce:	68 e9       	ldi	r22, 0x98	; 152
    78d0:	7a e3       	ldi	r23, 0x3A	; 58
    78d2:	80 e0       	ldi	r24, 0x00	; 0
    78d4:	90 e0       	ldi	r25, 0x00	; 0
    78d6:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    78da:	eb e2       	ldi	r30, 0x2B	; 43
    78dc:	f0 e2       	ldi	r31, 0x20	; 32
    78de:	86 e7       	ldi	r24, 0x76	; 118
    78e0:	80 83       	st	Z, r24
    78e2:	8e ea       	ldi	r24, 0xAE	; 174
    78e4:	81 83       	std	Z+1, r24	; 0x01
    78e6:	81 e0       	ldi	r24, 0x01	; 1
    78e8:	90 e0       	ldi	r25, 0x00	; 0
    78ea:	84 83       	std	Z+4, r24	; 0x04
    78ec:	95 83       	std	Z+5, r25	; 0x05
    78ee:	82 e0       	ldi	r24, 0x02	; 2
    78f0:	90 e0       	ldi	r25, 0x00	; 0
    78f2:	80 87       	std	Z+8, r24	; 0x08
    78f4:	91 87       	std	Z+9, r25	; 0x09
    78f6:	41 e0       	ldi	r20, 0x01	; 1
    78f8:	bf 01       	movw	r22, r30
    78fa:	80 ea       	ldi	r24, 0xA0	; 160
    78fc:	94 e0       	ldi	r25, 0x04	; 4
    78fe:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    7902:	c8 2f       	mov	r28, r24
    7904:	88 23       	and	r24, r24
    7906:	21 f1       	breq	.+72     	; 0x7950 <twi_start+0xa2a>
    7908:	8c 2f       	mov	r24, r28
    790a:	0c 2e       	mov	r0, r28
    790c:	00 0c       	add	r0, r0
    790e:	99 0b       	sbc	r25, r25
    7910:	9f 93       	push	r25
    7912:	cf 93       	push	r28
    7914:	88 ed       	ldi	r24, 0xD8	; 216
    7916:	91 e3       	ldi	r25, 0x31	; 49
    7918:	9f 93       	push	r25
    791a:	8f 93       	push	r24
    791c:	1f 92       	push	r1
    791e:	80 e4       	ldi	r24, 0x40	; 64
    7920:	8f 93       	push	r24
    7922:	8b e3       	ldi	r24, 0x3B	; 59
    7924:	95 e2       	ldi	r25, 0x25	; 37
    7926:	9f 93       	push	r25
    7928:	8f 93       	push	r24
    792a:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    792e:	81 34       	cpi	r24, 0x41	; 65
    7930:	91 05       	cpc	r25, r1
    7932:	10 f0       	brcs	.+4      	; 0x7938 <twi_start+0xa12>
    7934:	80 e4       	ldi	r24, 0x40	; 64
    7936:	90 e0       	ldi	r25, 0x00	; 0
    7938:	40 e0       	ldi	r20, 0x00	; 0
    793a:	68 2f       	mov	r22, r24
    793c:	8b e3       	ldi	r24, 0x3B	; 59
    793e:	95 e2       	ldi	r25, 0x25	; 37
    7940:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    7944:	ed b7       	in	r30, 0x3d	; 61
    7946:	fe b7       	in	r31, 0x3e	; 62
    7948:	38 96       	adiw	r30, 0x08	; 8
    794a:	ed bf       	out	0x3d, r30	; 61
    794c:	fe bf       	out	0x3e, r31	; 62
    794e:	c3 c0       	rjmp	.+390    	; 0x7ad6 <twi_start+0xbb0>
    7950:	e3 e3       	ldi	r30, 0x33	; 51
    7952:	f5 e2       	ldi	r31, 0x25	; 37
    7954:	80 81       	ld	r24, Z
    7956:	90 e0       	ldi	r25, 0x00	; 0
    7958:	98 2f       	mov	r25, r24
    795a:	88 27       	eor	r24, r24
    795c:	21 81       	ldd	r18, Z+1	; 0x01
    795e:	82 2b       	or	r24, r18
    7960:	92 95       	swap	r25
    7962:	82 95       	swap	r24
    7964:	8f 70       	andi	r24, 0x0F	; 15
    7966:	89 27       	eor	r24, r25
    7968:	9f 70       	andi	r25, 0x0F	; 15
    796a:	89 27       	eor	r24, r25
    796c:	80 93 34 27 	sts	0x2734, r24	; 0x802734 <g_twi1_baro_version>
    7970:	90 93 35 27 	sts	0x2735, r25	; 0x802735 <g_twi1_baro_version+0x1>
    7974:	9f 93       	push	r25
    7976:	8f 93       	push	r24
    7978:	82 ea       	ldi	r24, 0xA2	; 162
    797a:	91 e3       	ldi	r25, 0x31	; 49
    797c:	9f 93       	push	r25
    797e:	8f 93       	push	r24
    7980:	1f 92       	push	r1
    7982:	80 e4       	ldi	r24, 0x40	; 64
    7984:	8f 93       	push	r24
    7986:	8b e3       	ldi	r24, 0x3B	; 59
    7988:	95 e2       	ldi	r25, 0x25	; 37
    798a:	9f 93       	push	r25
    798c:	8f 93       	push	r24
    798e:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    7992:	81 34       	cpi	r24, 0x41	; 65
    7994:	91 05       	cpc	r25, r1
    7996:	10 f0       	brcs	.+4      	; 0x799c <twi_start+0xa76>
    7998:	80 e4       	ldi	r24, 0x40	; 64
    799a:	90 e0       	ldi	r25, 0x00	; 0
    799c:	40 e0       	ldi	r20, 0x00	; 0
    799e:	68 2f       	mov	r22, r24
    79a0:	8b e3       	ldi	r24, 0x3B	; 59
    79a2:	95 e2       	ldi	r25, 0x25	; 37
    79a4:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    79a8:	0f 2e       	mov	r0, r31
    79aa:	f6 e2       	ldi	r31, 0x26	; 38
    79ac:	ef 2e       	mov	r14, r31
    79ae:	f7 e2       	ldi	r31, 0x27	; 39
    79b0:	ff 2e       	mov	r15, r31
    79b2:	f0 2d       	mov	r31, r0
    79b4:	8d b7       	in	r24, 0x3d	; 61
    79b6:	9e b7       	in	r25, 0x3e	; 62
    79b8:	08 96       	adiw	r24, 0x08	; 8
    79ba:	8d bf       	out	0x3d, r24	; 61
    79bc:	9e bf       	out	0x3e, r25	; 62
    79be:	88 24       	eor	r8, r8
    79c0:	83 94       	inc	r8
    79c2:	91 2c       	mov	r9, r1
    79c4:	cb e2       	ldi	r28, 0x2B	; 43
    79c6:	d0 e2       	ldi	r29, 0x20	; 32
    79c8:	0f 2e       	mov	r0, r31
    79ca:	f6 e7       	ldi	r31, 0x76	; 118
    79cc:	7f 2e       	mov	r7, r31
    79ce:	f0 2d       	mov	r31, r0
    79d0:	aa 24       	eor	r10, r10
    79d2:	a3 94       	inc	r10
    79d4:	b1 2c       	mov	r11, r1
    79d6:	68 94       	set
    79d8:	cc 24       	eor	r12, r12
    79da:	c1 f8       	bld	r12, 1
    79dc:	d1 2c       	mov	r13, r1
    79de:	03 e3       	ldi	r16, 0x33	; 51
    79e0:	15 e2       	ldi	r17, 0x25	; 37
    79e2:	78 82       	st	Y, r7
    79e4:	c4 01       	movw	r24, r8
    79e6:	88 0f       	add	r24, r24
    79e8:	99 1f       	adc	r25, r25
    79ea:	80 6a       	ori	r24, 0xA0	; 160
    79ec:	89 83       	std	Y+1, r24	; 0x01
    79ee:	ac 82       	std	Y+4, r10	; 0x04
    79f0:	bd 82       	std	Y+5, r11	; 0x05
    79f2:	c8 86       	std	Y+8, r12	; 0x08
    79f4:	d9 86       	std	Y+9, r13	; 0x09
    79f6:	41 e0       	ldi	r20, 0x01	; 1
    79f8:	be 01       	movw	r22, r28
    79fa:	80 ea       	ldi	r24, 0xA0	; 160
    79fc:	94 e0       	ldi	r25, 0x04	; 4
    79fe:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    7a02:	88 23       	and	r24, r24
    7a04:	31 f1       	breq	.+76     	; 0x7a52 <twi_start+0xb2c>
    7a06:	28 2f       	mov	r18, r24
    7a08:	08 2e       	mov	r0, r24
    7a0a:	00 0c       	add	r0, r0
    7a0c:	33 0b       	sbc	r19, r19
    7a0e:	3f 93       	push	r19
    7a10:	8f 93       	push	r24
    7a12:	9f 92       	push	r9
    7a14:	8f 92       	push	r8
    7a16:	8d e6       	ldi	r24, 0x6D	; 109
    7a18:	91 e3       	ldi	r25, 0x31	; 49
    7a1a:	9f 93       	push	r25
    7a1c:	8f 93       	push	r24
    7a1e:	1f 92       	push	r1
    7a20:	80 e4       	ldi	r24, 0x40	; 64
    7a22:	8f 93       	push	r24
    7a24:	8b e3       	ldi	r24, 0x3B	; 59
    7a26:	95 e2       	ldi	r25, 0x25	; 37
    7a28:	9f 93       	push	r25
    7a2a:	8f 93       	push	r24
    7a2c:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    7a30:	81 34       	cpi	r24, 0x41	; 65
    7a32:	91 05       	cpc	r25, r1
    7a34:	10 f0       	brcs	.+4      	; 0x7a3a <twi_start+0xb14>
    7a36:	80 e4       	ldi	r24, 0x40	; 64
    7a38:	90 e0       	ldi	r25, 0x00	; 0
    7a3a:	40 e0       	ldi	r20, 0x00	; 0
    7a3c:	68 2f       	mov	r22, r24
    7a3e:	8b e3       	ldi	r24, 0x3B	; 59
    7a40:	95 e2       	ldi	r25, 0x25	; 37
    7a42:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    7a46:	ed b7       	in	r30, 0x3d	; 61
    7a48:	fe b7       	in	r31, 0x3e	; 62
    7a4a:	3a 96       	adiw	r30, 0x0a	; 10
    7a4c:	ed bf       	out	0x3d, r30	; 61
    7a4e:	fe bf       	out	0x3e, r31	; 62
    7a50:	13 c0       	rjmp	.+38     	; 0x7a78 <twi_start+0xb52>
    7a52:	f8 01       	movw	r30, r16
    7a54:	80 81       	ld	r24, Z
    7a56:	90 e0       	ldi	r25, 0x00	; 0
    7a58:	98 2f       	mov	r25, r24
    7a5a:	88 27       	eor	r24, r24
    7a5c:	21 81       	ldd	r18, Z+1	; 0x01
    7a5e:	82 2b       	or	r24, r18
    7a60:	f7 01       	movw	r30, r14
    7a62:	81 93       	st	Z+, r24
    7a64:	91 93       	st	Z+, r25
    7a66:	7f 01       	movw	r14, r30
    7a68:	ff ef       	ldi	r31, 0xFF	; 255
    7a6a:	8f 1a       	sub	r8, r31
    7a6c:	9f 0a       	sbc	r9, r31
    7a6e:	88 e0       	ldi	r24, 0x08	; 8
    7a70:	88 16       	cp	r8, r24
    7a72:	91 04       	cpc	r9, r1
    7a74:	09 f0       	breq	.+2      	; 0x7a78 <twi_start+0xb52>
    7a76:	b5 cf       	rjmp	.-150    	; 0x79e2 <twi_start+0xabc>
    7a78:	81 e0       	ldi	r24, 0x01	; 1
    7a7a:	80 93 36 27 	sts	0x2736, r24	; 0x802736 <g_twi1_baro_valid>
    7a7e:	8a e0       	ldi	r24, 0x0A	; 10
    7a80:	91 e3       	ldi	r25, 0x31	; 49
    7a82:	9f 93       	push	r25
    7a84:	8f 93       	push	r24
    7a86:	1f 92       	push	r1
    7a88:	10 e4       	ldi	r17, 0x40	; 64
    7a8a:	1f 93       	push	r17
    7a8c:	cb e3       	ldi	r28, 0x3B	; 59
    7a8e:	d5 e2       	ldi	r29, 0x25	; 37
    7a90:	df 93       	push	r29
    7a92:	cf 93       	push	r28
    7a94:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    7a98:	ae 01       	movw	r20, r28
    7a9a:	62 e3       	ldi	r22, 0x32	; 50
    7a9c:	88 e0       	ldi	r24, 0x08	; 8
    7a9e:	35 d9       	rcall	.-3478   	; 0x6d0a <task_twi2_lcd_str>
    7aa0:	8f e4       	ldi	r24, 0x4F	; 79
    7aa2:	91 e3       	ldi	r25, 0x31	; 49
    7aa4:	9f 93       	push	r25
    7aa6:	8f 93       	push	r24
    7aa8:	1f 92       	push	r1
    7aaa:	1f 93       	push	r17
    7aac:	df 93       	push	r29
    7aae:	cf 93       	push	r28
    7ab0:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    7ab4:	81 34       	cpi	r24, 0x41	; 65
    7ab6:	91 05       	cpc	r25, r1
    7ab8:	10 f0       	brcs	.+4      	; 0x7abe <twi_start+0xb98>
    7aba:	80 e4       	ldi	r24, 0x40	; 64
    7abc:	90 e0       	ldi	r25, 0x00	; 0
    7abe:	40 e0       	ldi	r20, 0x00	; 0
    7ac0:	68 2f       	mov	r22, r24
    7ac2:	8b e3       	ldi	r24, 0x3B	; 59
    7ac4:	95 e2       	ldi	r25, 0x25	; 37
    7ac6:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    7aca:	ed b7       	in	r30, 0x3d	; 61
    7acc:	fe b7       	in	r31, 0x3e	; 62
    7ace:	3c 96       	adiw	r30, 0x0c	; 12
    7ad0:	ed bf       	out	0x3d, r30	; 61
    7ad2:	fe bf       	out	0x3e, r31	; 62
    7ad4:	23 c0       	rjmp	.+70     	; 0x7b1c <twi_start+0xbf6>
    7ad6:	8c 2f       	mov	r24, r28
    7ad8:	0c 2e       	mov	r0, r28
    7ada:	00 0c       	add	r0, r0
    7adc:	99 0b       	sbc	r25, r25
    7ade:	9f 93       	push	r25
    7ae0:	cf 93       	push	r28
    7ae2:	8e e1       	ldi	r24, 0x1E	; 30
    7ae4:	91 e3       	ldi	r25, 0x31	; 49
    7ae6:	9f 93       	push	r25
    7ae8:	8f 93       	push	r24
    7aea:	1f 92       	push	r1
    7aec:	80 e4       	ldi	r24, 0x40	; 64
    7aee:	8f 93       	push	r24
    7af0:	8b e3       	ldi	r24, 0x3B	; 59
    7af2:	95 e2       	ldi	r25, 0x25	; 37
    7af4:	9f 93       	push	r25
    7af6:	8f 93       	push	r24
    7af8:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    7afc:	81 34       	cpi	r24, 0x41	; 65
    7afe:	91 05       	cpc	r25, r1
    7b00:	10 f0       	brcs	.+4      	; 0x7b06 <twi_start+0xbe0>
    7b02:	80 e4       	ldi	r24, 0x40	; 64
    7b04:	90 e0       	ldi	r25, 0x00	; 0
    7b06:	40 e0       	ldi	r20, 0x00	; 0
    7b08:	68 2f       	mov	r22, r24
    7b0a:	8b e3       	ldi	r24, 0x3B	; 59
    7b0c:	95 e2       	ldi	r25, 0x25	; 37
    7b0e:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    7b12:	8d b7       	in	r24, 0x3d	; 61
    7b14:	9e b7       	in	r25, 0x3e	; 62
    7b16:	08 96       	adiw	r24, 0x08	; 8
    7b18:	8d bf       	out	0x3d, r24	; 61
    7b1a:	9e bf       	out	0x3e, r25	; 62
    7b1c:	8a ef       	ldi	r24, 0xFA	; 250
    7b1e:	90 e3       	ldi	r25, 0x30	; 48
    7b20:	9f 93       	push	r25
    7b22:	8f 93       	push	r24
    7b24:	1f 92       	push	r1
    7b26:	80 e4       	ldi	r24, 0x40	; 64
    7b28:	8f 93       	push	r24
    7b2a:	8b e3       	ldi	r24, 0x3B	; 59
    7b2c:	95 e2       	ldi	r25, 0x25	; 37
    7b2e:	9f 93       	push	r25
    7b30:	8f 93       	push	r24
    7b32:	0e 94 7f 85 	call	0x10afe	; 0x10afe <snprintf_P>
    7b36:	81 34       	cpi	r24, 0x41	; 65
    7b38:	91 05       	cpc	r25, r1
    7b3a:	10 f0       	brcs	.+4      	; 0x7b40 <twi_start+0xc1a>
    7b3c:	80 e4       	ldi	r24, 0x40	; 64
    7b3e:	90 e0       	ldi	r25, 0x00	; 0
    7b40:	40 e0       	ldi	r20, 0x00	; 0
    7b42:	68 2f       	mov	r22, r24
    7b44:	8b e3       	ldi	r24, 0x3B	; 59
    7b46:	95 e2       	ldi	r25, 0x25	; 37
    7b48:	0e 94 19 20 	call	0x4032	; 0x4032 <udi_write_tx_buf>
    7b4c:	0f 90       	pop	r0
    7b4e:	0f 90       	pop	r0
    7b50:	0f 90       	pop	r0
    7b52:	0f 90       	pop	r0
    7b54:	0f 90       	pop	r0
    7b56:	0f 90       	pop	r0
    7b58:	df 91       	pop	r29
    7b5a:	cf 91       	pop	r28
    7b5c:	1f 91       	pop	r17
    7b5e:	0f 91       	pop	r16
    7b60:	ff 90       	pop	r15
    7b62:	ef 90       	pop	r14
    7b64:	df 90       	pop	r13
    7b66:	cf 90       	pop	r12
    7b68:	bf 90       	pop	r11
    7b6a:	af 90       	pop	r10
    7b6c:	9f 90       	pop	r9
    7b6e:	8f 90       	pop	r8
    7b70:	7f 90       	pop	r7
    7b72:	08 95       	ret

00007b74 <task_twi2_lcd__cpu1>:
PROGMEM_DECLARE(const char, PM_FORMAT_4F1[]);
PROGMEM_DECLARE(const char, PM_FORMAT_5F3[]);

/* TWI2 - LCD Port */
void task_twi2_lcd__cpu1(uint8_t col_left)
{
    7b74:	df 92       	push	r13
    7b76:	ef 92       	push	r14
    7b78:	ff 92       	push	r15
    7b7a:	0f 93       	push	r16
    7b7c:	1f 93       	push	r17
    7b7e:	cf 93       	push	r28
    7b80:	df 93       	push	r29
    7b82:	1f 92       	push	r1
    7b84:	cd b7       	in	r28, 0x3d	; 61
    7b86:	de b7       	in	r29, 0x3e	; 62
    7b88:	d8 2e       	mov	r13, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7b8a:	8f b7       	in	r24, 0x3f	; 63
    7b8c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    7b8e:	f8 94       	cli
	return flags;
    7b90:	89 81       	ldd	r24, Y+1	; 0x01
	int16_t l_adc_5v0_volt_1000;

	/* Get up-to-date global data */
	{
		irqflags_t flags			= cpu_irq_save();
		l_adc_temp_deg_100			= g_adc_temp_deg_100;
    7b92:	60 91 8e 26 	lds	r22, 0x268E	; 0x80268e <g_adc_temp_deg_100>
    7b96:	70 91 8f 26 	lds	r23, 0x268F	; 0x80268f <g_adc_temp_deg_100+0x1>
		l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    7b9a:	e0 90 98 26 	lds	r14, 0x2698	; 0x802698 <g_adc_5v0_volt_1000>
    7b9e:	f0 90 99 26 	lds	r15, 0x2699	; 0x802699 <g_adc_5v0_volt_1000+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7ba2:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
	}

	if (s_adc_temp_deg_100 != l_adc_temp_deg_100) {
    7ba4:	80 91 25 23 	lds	r24, 0x2325	; 0x802325 <s_adc_temp_deg_100.8139>
    7ba8:	90 91 26 23 	lds	r25, 0x2326	; 0x802326 <s_adc_temp_deg_100.8139+0x1>
    7bac:	68 17       	cp	r22, r24
    7bae:	79 07       	cpc	r23, r25
    7bb0:	b9 f0       	breq	.+46     	; 0x7be0 <task_twi2_lcd__cpu1+0x6c>
		s_adc_temp_deg_100 = l_adc_temp_deg_100;
    7bb2:	60 93 25 23 	sts	0x2325, r22	; 0x802325 <s_adc_temp_deg_100.8139>
    7bb6:	70 93 26 23 	sts	0x2326, r23	; 0x802326 <s_adc_temp_deg_100.8139+0x1>

		/* ADC_TEMP */
		task_twi2_lcd_print_format_float_P(col_left,  2 * 10, l_adc_temp_deg_100 / 100.f, PM_FORMAT_4F1);
    7bba:	07 2e       	mov	r0, r23
    7bbc:	00 0c       	add	r0, r0
    7bbe:	88 0b       	sbc	r24, r24
    7bc0:	99 0b       	sbc	r25, r25
    7bc2:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    7bc6:	20 e0       	ldi	r18, 0x00	; 0
    7bc8:	30 e0       	ldi	r19, 0x00	; 0
    7bca:	48 ec       	ldi	r20, 0xC8	; 200
    7bcc:	52 e4       	ldi	r21, 0x42	; 66
    7bce:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    7bd2:	9b 01       	movw	r18, r22
    7bd4:	ac 01       	movw	r20, r24
    7bd6:	06 ee       	ldi	r16, 0xE6	; 230
    7bd8:	10 e3       	ldi	r17, 0x30	; 48
    7bda:	64 e1       	ldi	r22, 0x14	; 20
    7bdc:	8d 2d       	mov	r24, r13
    7bde:	57 d8       	rcall	.-3922   	; 0x6c8e <task_twi2_lcd_print_format_float_P>
	}

	if (s_adc_5v0_volt_1000 != l_adc_5v0_volt_1000) {
    7be0:	80 91 23 23 	lds	r24, 0x2323	; 0x802323 <s_adc_5v0_volt_1000.8140>
    7be4:	90 91 24 23 	lds	r25, 0x2324	; 0x802324 <s_adc_5v0_volt_1000.8140+0x1>
    7be8:	e8 16       	cp	r14, r24
    7bea:	f9 06       	cpc	r15, r25
    7bec:	b9 f0       	breq	.+46     	; 0x7c1c <task_twi2_lcd__cpu1+0xa8>
		s_adc_5v0_volt_1000 = l_adc_5v0_volt_1000;
    7bee:	e0 92 23 23 	sts	0x2323, r14	; 0x802323 <s_adc_5v0_volt_1000.8140>
    7bf2:	f0 92 24 23 	sts	0x2324, r15	; 0x802324 <s_adc_5v0_volt_1000.8140+0x1>

		/* ADC_5V0 */
		task_twi2_lcd_print_format_float_P(col_left,  3 * 10, l_adc_5v0_volt_1000 / 1000.f, PM_FORMAT_5F3);
    7bf6:	b7 01       	movw	r22, r14
    7bf8:	ff 0c       	add	r15, r15
    7bfa:	88 0b       	sbc	r24, r24
    7bfc:	99 0b       	sbc	r25, r25
    7bfe:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    7c02:	20 e0       	ldi	r18, 0x00	; 0
    7c04:	30 e0       	ldi	r19, 0x00	; 0
    7c06:	4a e7       	ldi	r20, 0x7A	; 122
    7c08:	54 e4       	ldi	r21, 0x44	; 68
    7c0a:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    7c0e:	9b 01       	movw	r18, r22
    7c10:	ac 01       	movw	r20, r24
    7c12:	00 ee       	ldi	r16, 0xE0	; 224
    7c14:	10 e3       	ldi	r17, 0x30	; 48
    7c16:	6e e1       	ldi	r22, 0x1E	; 30
    7c18:	8d 2d       	mov	r24, r13
    7c1a:	39 d8       	rcall	.-3982   	; 0x6c8e <task_twi2_lcd_print_format_float_P>
	}
}
    7c1c:	0f 90       	pop	r0
    7c1e:	df 91       	pop	r29
    7c20:	cf 91       	pop	r28
    7c22:	1f 91       	pop	r17
    7c24:	0f 91       	pop	r16
    7c26:	ff 90       	pop	r15
    7c28:	ef 90       	pop	r14
    7c2a:	df 90       	pop	r13
    7c2c:	08 95       	ret

00007c2e <task_twi2_lcd__cpu2>:
	delay_ms(50);
}
#endif

void task_twi2_lcd_cls(void)
{
    7c2e:	df 92       	push	r13
    7c30:	ef 92       	push	r14
    7c32:	ff 92       	push	r15
    7c34:	0f 93       	push	r16
    7c36:	1f 93       	push	r17
    7c38:	cf 93       	push	r28
    7c3a:	df 93       	push	r29
    7c3c:	1f 92       	push	r1
    7c3e:	cd b7       	in	r28, 0x3d	; 61
    7c40:	de b7       	in	r29, 0x3e	; 62
    7c42:	d8 2e       	mov	r13, r24
    7c44:	8f b7       	in	r24, 0x3f	; 63
    7c46:	89 83       	std	Y+1, r24	; 0x01
    7c48:	f8 94       	cli
    7c4a:	89 81       	ldd	r24, Y+1	; 0x01
    7c4c:	60 91 96 26 	lds	r22, 0x2696	; 0x802696 <g_adc_vbat_volt_1000>
    7c50:	70 91 97 26 	lds	r23, 0x2697	; 0x802697 <g_adc_vbat_volt_1000+0x1>
    7c54:	e0 90 9a 26 	lds	r14, 0x269A	; 0x80269a <g_adc_vctcxo_volt_1000>
    7c58:	f0 90 9b 26 	lds	r15, 0x269B	; 0x80269b <g_adc_vctcxo_volt_1000+0x1>
    7c5c:	8f bf       	out	0x3f, r24	; 63
    7c5e:	80 91 21 23 	lds	r24, 0x2321	; 0x802321 <s_adc_vbat_volt_1000.8147>
    7c62:	90 91 22 23 	lds	r25, 0x2322	; 0x802322 <s_adc_vbat_volt_1000.8147+0x1>
    7c66:	68 17       	cp	r22, r24
    7c68:	79 07       	cpc	r23, r25
    7c6a:	c1 f0       	breq	.+48     	; 0x7c9c <task_twi2_lcd__cpu2+0x6e>
    7c6c:	60 93 21 23 	sts	0x2321, r22	; 0x802321 <s_adc_vbat_volt_1000.8147>
    7c70:	70 93 22 23 	sts	0x2322, r23	; 0x802322 <s_adc_vbat_volt_1000.8147+0x1>
    7c74:	07 2e       	mov	r0, r23
    7c76:	00 0c       	add	r0, r0
    7c78:	88 0b       	sbc	r24, r24
    7c7a:	99 0b       	sbc	r25, r25
    7c7c:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    7c80:	20 e0       	ldi	r18, 0x00	; 0
    7c82:	30 e0       	ldi	r19, 0x00	; 0
    7c84:	4a e7       	ldi	r20, 0x7A	; 122
    7c86:	54 e4       	ldi	r21, 0x44	; 68
    7c88:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    7c8c:	9b 01       	movw	r18, r22
    7c8e:	ac 01       	movw	r20, r24
    7c90:	00 ee       	ldi	r16, 0xE0	; 224
    7c92:	10 e3       	ldi	r17, 0x30	; 48
    7c94:	68 e2       	ldi	r22, 0x28	; 40
    7c96:	8d 2d       	mov	r24, r13
    7c98:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <task_twi2_lcd_print_format_float_P>
    7c9c:	80 91 1f 23 	lds	r24, 0x231F	; 0x80231f <s_adc_vctcxo_volt_1000.8148>
    7ca0:	90 91 20 23 	lds	r25, 0x2320	; 0x802320 <s_adc_vctcxo_volt_1000.8148+0x1>
    7ca4:	e8 16       	cp	r14, r24
    7ca6:	f9 06       	cpc	r15, r25
    7ca8:	c1 f0       	breq	.+48     	; 0x7cda <task_twi2_lcd__cpu2+0xac>
    7caa:	e0 92 1f 23 	sts	0x231F, r14	; 0x80231f <s_adc_vctcxo_volt_1000.8148>
    7cae:	f0 92 20 23 	sts	0x2320, r15	; 0x802320 <s_adc_vctcxo_volt_1000.8148+0x1>
    7cb2:	b7 01       	movw	r22, r14
    7cb4:	ff 0c       	add	r15, r15
    7cb6:	88 0b       	sbc	r24, r24
    7cb8:	99 0b       	sbc	r25, r25
    7cba:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    7cbe:	20 e0       	ldi	r18, 0x00	; 0
    7cc0:	30 e0       	ldi	r19, 0x00	; 0
    7cc2:	4a e7       	ldi	r20, 0x7A	; 122
    7cc4:	54 e4       	ldi	r21, 0x44	; 68
    7cc6:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    7cca:	9b 01       	movw	r18, r22
    7ccc:	ac 01       	movw	r20, r24
    7cce:	00 ee       	ldi	r16, 0xE0	; 224
    7cd0:	10 e3       	ldi	r17, 0x30	; 48
    7cd2:	62 e3       	ldi	r22, 0x32	; 50
    7cd4:	8d 2d       	mov	r24, r13
    7cd6:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <task_twi2_lcd_print_format_float_P>
    7cda:	0f 90       	pop	r0
    7cdc:	df 91       	pop	r29
    7cde:	cf 91       	pop	r28
    7ce0:	1f 91       	pop	r17
    7ce2:	0f 91       	pop	r16
    7ce4:	ff 90       	pop	r15
    7ce6:	ef 90       	pop	r14
    7ce8:	df 90       	pop	r13
    7cea:	08 95       	ret

00007cec <task_twi2_lcd__cpu3>:
    7cec:	df 92       	push	r13
    7cee:	ef 92       	push	r14
    7cf0:	ff 92       	push	r15
    7cf2:	0f 93       	push	r16
    7cf4:	1f 93       	push	r17
    7cf6:	cf 93       	push	r28
    7cf8:	df 93       	push	r29
    7cfa:	1f 92       	push	r1
    7cfc:	cd b7       	in	r28, 0x3d	; 61
    7cfe:	de b7       	in	r29, 0x3e	; 62
    7d00:	d8 2e       	mov	r13, r24
    7d02:	8f b7       	in	r24, 0x3f	; 63
    7d04:	89 83       	std	Y+1, r24	; 0x01
    7d06:	f8 94       	cli
    7d08:	89 81       	ldd	r24, Y+1	; 0x01
    7d0a:	60 91 94 26 	lds	r22, 0x2694	; 0x802694 <g_adc_io_adc4_volt_1000>
    7d0e:	70 91 95 26 	lds	r23, 0x2695	; 0x802695 <g_adc_io_adc4_volt_1000+0x1>
    7d12:	e0 90 92 26 	lds	r14, 0x2692	; 0x802692 <g_adc_io_adc5_volt_1000>
    7d16:	f0 90 93 26 	lds	r15, 0x2693	; 0x802693 <g_adc_io_adc5_volt_1000+0x1>
    7d1a:	8f bf       	out	0x3f, r24	; 63
    7d1c:	80 91 1d 23 	lds	r24, 0x231D	; 0x80231d <s_adc_io_adc4_volt_1000.8155>
    7d20:	90 91 1e 23 	lds	r25, 0x231E	; 0x80231e <s_adc_io_adc4_volt_1000.8155+0x1>
    7d24:	68 17       	cp	r22, r24
    7d26:	79 07       	cpc	r23, r25
    7d28:	c1 f0       	breq	.+48     	; 0x7d5a <task_twi2_lcd__cpu3+0x6e>
    7d2a:	60 93 1d 23 	sts	0x231D, r22	; 0x80231d <s_adc_io_adc4_volt_1000.8155>
    7d2e:	70 93 1e 23 	sts	0x231E, r23	; 0x80231e <s_adc_io_adc4_volt_1000.8155+0x1>
    7d32:	07 2e       	mov	r0, r23
    7d34:	00 0c       	add	r0, r0
    7d36:	88 0b       	sbc	r24, r24
    7d38:	99 0b       	sbc	r25, r25
    7d3a:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    7d3e:	20 e0       	ldi	r18, 0x00	; 0
    7d40:	30 e0       	ldi	r19, 0x00	; 0
    7d42:	4a e7       	ldi	r20, 0x7A	; 122
    7d44:	54 e4       	ldi	r21, 0x44	; 68
    7d46:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    7d4a:	9b 01       	movw	r18, r22
    7d4c:	ac 01       	movw	r20, r24
    7d4e:	00 ee       	ldi	r16, 0xE0	; 224
    7d50:	10 e3       	ldi	r17, 0x30	; 48
    7d52:	6c e3       	ldi	r22, 0x3C	; 60
    7d54:	8d 2d       	mov	r24, r13
    7d56:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <task_twi2_lcd_print_format_float_P>
    7d5a:	80 91 1b 23 	lds	r24, 0x231B	; 0x80231b <s_adc_io_adc5_volt_1000.8156>
    7d5e:	90 91 1c 23 	lds	r25, 0x231C	; 0x80231c <s_adc_io_adc5_volt_1000.8156+0x1>
    7d62:	e8 16       	cp	r14, r24
    7d64:	f9 06       	cpc	r15, r25
    7d66:	c1 f0       	breq	.+48     	; 0x7d98 <task_twi2_lcd__cpu3+0xac>
    7d68:	e0 92 1b 23 	sts	0x231B, r14	; 0x80231b <s_adc_io_adc5_volt_1000.8156>
    7d6c:	f0 92 1c 23 	sts	0x231C, r15	; 0x80231c <s_adc_io_adc5_volt_1000.8156+0x1>
    7d70:	b7 01       	movw	r22, r14
    7d72:	ff 0c       	add	r15, r15
    7d74:	88 0b       	sbc	r24, r24
    7d76:	99 0b       	sbc	r25, r25
    7d78:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    7d7c:	20 e0       	ldi	r18, 0x00	; 0
    7d7e:	30 e0       	ldi	r19, 0x00	; 0
    7d80:	4a e7       	ldi	r20, 0x7A	; 122
    7d82:	54 e4       	ldi	r21, 0x44	; 68
    7d84:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    7d88:	9b 01       	movw	r18, r22
    7d8a:	ac 01       	movw	r20, r24
    7d8c:	00 ee       	ldi	r16, 0xE0	; 224
    7d8e:	10 e3       	ldi	r17, 0x30	; 48
    7d90:	66 e4       	ldi	r22, 0x46	; 70
    7d92:	8d 2d       	mov	r24, r13
    7d94:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <task_twi2_lcd_print_format_float_P>
    7d98:	0f 90       	pop	r0
    7d9a:	df 91       	pop	r29
    7d9c:	cf 91       	pop	r28
    7d9e:	1f 91       	pop	r17
    7da0:	0f 91       	pop	r16
    7da2:	ff 90       	pop	r15
    7da4:	ef 90       	pop	r14
    7da6:	df 90       	pop	r13
    7da8:	08 95       	ret

00007daa <task_twi2_lcd__hygro>:
    7daa:	df 92       	push	r13
    7dac:	ef 92       	push	r14
    7dae:	ff 92       	push	r15
    7db0:	0f 93       	push	r16
    7db2:	1f 93       	push	r17
    7db4:	cf 93       	push	r28
    7db6:	df 93       	push	r29
    7db8:	1f 92       	push	r1
    7dba:	cd b7       	in	r28, 0x3d	; 61
    7dbc:	de b7       	in	r29, 0x3e	; 62
    7dbe:	d8 2e       	mov	r13, r24
    7dc0:	8f b7       	in	r24, 0x3f	; 63
    7dc2:	89 83       	std	Y+1, r24	; 0x01
    7dc4:	f8 94       	cli
    7dc6:	89 81       	ldd	r24, Y+1	; 0x01
    7dc8:	60 91 0c 27 	lds	r22, 0x270C	; 0x80270c <g_twi1_hygro_T_100>
    7dcc:	70 91 0d 27 	lds	r23, 0x270D	; 0x80270d <g_twi1_hygro_T_100+0x1>
    7dd0:	e0 90 0a 27 	lds	r14, 0x270A	; 0x80270a <g_twi1_hygro_RH_100>
    7dd4:	f0 90 0b 27 	lds	r15, 0x270B	; 0x80270b <g_twi1_hygro_RH_100+0x1>
    7dd8:	8f bf       	out	0x3f, r24	; 63
    7dda:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <s_twi1_hygro_T_100.8163>
    7dde:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <s_twi1_hygro_T_100.8163+0x1>
    7de2:	68 17       	cp	r22, r24
    7de4:	79 07       	cpc	r23, r25
    7de6:	c1 f0       	breq	.+48     	; 0x7e18 <task_twi2_lcd__hygro+0x6e>
    7de8:	60 93 19 23 	sts	0x2319, r22	; 0x802319 <s_twi1_hygro_T_100.8163>
    7dec:	70 93 1a 23 	sts	0x231A, r23	; 0x80231a <s_twi1_hygro_T_100.8163+0x1>
    7df0:	07 2e       	mov	r0, r23
    7df2:	00 0c       	add	r0, r0
    7df4:	88 0b       	sbc	r24, r24
    7df6:	99 0b       	sbc	r25, r25
    7df8:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    7dfc:	20 e0       	ldi	r18, 0x00	; 0
    7dfe:	30 e0       	ldi	r19, 0x00	; 0
    7e00:	48 ec       	ldi	r20, 0xC8	; 200
    7e02:	52 e4       	ldi	r21, 0x42	; 66
    7e04:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    7e08:	9b 01       	movw	r18, r22
    7e0a:	ac 01       	movw	r20, r24
    7e0c:	03 ef       	ldi	r16, 0xF3	; 243
    7e0e:	10 e3       	ldi	r17, 0x30	; 48
    7e10:	6e e6       	ldi	r22, 0x6E	; 110
    7e12:	8d 2d       	mov	r24, r13
    7e14:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <task_twi2_lcd_print_format_float_P>
    7e18:	80 91 17 23 	lds	r24, 0x2317	; 0x802317 <s_twi1_hygro_RH_100.8164>
    7e1c:	90 91 18 23 	lds	r25, 0x2318	; 0x802318 <s_twi1_hygro_RH_100.8164+0x1>
    7e20:	e8 16       	cp	r14, r24
    7e22:	f9 06       	cpc	r15, r25
    7e24:	c1 f0       	breq	.+48     	; 0x7e56 <task_twi2_lcd__hygro+0xac>
    7e26:	e0 92 17 23 	sts	0x2317, r14	; 0x802317 <s_twi1_hygro_RH_100.8164>
    7e2a:	f0 92 18 23 	sts	0x2318, r15	; 0x802318 <s_twi1_hygro_RH_100.8164+0x1>
    7e2e:	b7 01       	movw	r22, r14
    7e30:	ff 0c       	add	r15, r15
    7e32:	88 0b       	sbc	r24, r24
    7e34:	99 0b       	sbc	r25, r25
    7e36:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    7e3a:	20 e0       	ldi	r18, 0x00	; 0
    7e3c:	30 e0       	ldi	r19, 0x00	; 0
    7e3e:	48 ec       	ldi	r20, 0xC8	; 200
    7e40:	52 e4       	ldi	r21, 0x42	; 66
    7e42:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    7e46:	9b 01       	movw	r18, r22
    7e48:	ac 01       	movw	r20, r24
    7e4a:	03 ef       	ldi	r16, 0xF3	; 243
    7e4c:	10 e3       	ldi	r17, 0x30	; 48
    7e4e:	68 e7       	ldi	r22, 0x78	; 120
    7e50:	8d 2d       	mov	r24, r13
    7e52:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <task_twi2_lcd_print_format_float_P>
    7e56:	0f 90       	pop	r0
    7e58:	df 91       	pop	r29
    7e5a:	cf 91       	pop	r28
    7e5c:	1f 91       	pop	r17
    7e5e:	0f 91       	pop	r16
    7e60:	ff 90       	pop	r15
    7e62:	ef 90       	pop	r14
    7e64:	df 90       	pop	r13
    7e66:	08 95       	ret

00007e68 <task_twi2_lcd__gyro_gfxmag>:
    7e68:	2f 92       	push	r2
    7e6a:	3f 92       	push	r3
    7e6c:	4f 92       	push	r4
    7e6e:	5f 92       	push	r5
    7e70:	6f 92       	push	r6
    7e72:	7f 92       	push	r7
    7e74:	8f 92       	push	r8
    7e76:	9f 92       	push	r9
    7e78:	af 92       	push	r10
    7e7a:	bf 92       	push	r11
    7e7c:	cf 92       	push	r12
    7e7e:	df 92       	push	r13
    7e80:	ef 92       	push	r14
    7e82:	ff 92       	push	r15
    7e84:	0f 93       	push	r16
    7e86:	1f 93       	push	r17
    7e88:	cf 93       	push	r28
    7e8a:	df 93       	push	r29
    7e8c:	cd b7       	in	r28, 0x3d	; 61
    7e8e:	de b7       	in	r29, 0x3e	; 62
    7e90:	2d 97       	sbiw	r28, 0x0d	; 13
    7e92:	cd bf       	out	0x3d, r28	; 61
    7e94:	de bf       	out	0x3e, r29	; 62
    7e96:	8f b7       	in	r24, 0x3f	; 63
    7e98:	89 83       	std	Y+1, r24	; 0x01
    7e9a:	f8 94       	cli
    7e9c:	89 81       	ldd	r24, Y+1	; 0x01
    7e9e:	80 90 3f 27 	lds	r8, 0x273F	; 0x80273f <g_twi1_gyro_2_mag_x_nT>
    7ea2:	90 90 40 27 	lds	r9, 0x2740	; 0x802740 <g_twi1_gyro_2_mag_x_nT+0x1>
    7ea6:	a0 90 41 27 	lds	r10, 0x2741	; 0x802741 <g_twi1_gyro_2_mag_x_nT+0x2>
    7eaa:	b0 90 42 27 	lds	r11, 0x2742	; 0x802742 <g_twi1_gyro_2_mag_x_nT+0x3>
    7eae:	40 90 3b 27 	lds	r4, 0x273B	; 0x80273b <g_twi1_gyro_2_mag_y_nT>
    7eb2:	50 90 3c 27 	lds	r5, 0x273C	; 0x80273c <g_twi1_gyro_2_mag_y_nT+0x1>
    7eb6:	60 90 3d 27 	lds	r6, 0x273D	; 0x80273d <g_twi1_gyro_2_mag_y_nT+0x2>
    7eba:	70 90 3e 27 	lds	r7, 0x273E	; 0x80273e <g_twi1_gyro_2_mag_y_nT+0x3>
    7ebe:	20 91 37 27 	lds	r18, 0x2737	; 0x802737 <g_twi1_gyro_2_mag_z_nT>
    7ec2:	30 91 38 27 	lds	r19, 0x2738	; 0x802738 <g_twi1_gyro_2_mag_z_nT+0x1>
    7ec6:	40 91 39 27 	lds	r20, 0x2739	; 0x802739 <g_twi1_gyro_2_mag_z_nT+0x2>
    7eca:	50 91 3a 27 	lds	r21, 0x273A	; 0x80273a <g_twi1_gyro_2_mag_z_nT+0x3>
    7ece:	2a 87       	std	Y+10, r18	; 0x0a
    7ed0:	3b 87       	std	Y+11, r19	; 0x0b
    7ed2:	4c 87       	std	Y+12, r20	; 0x0c
    7ed4:	5d 87       	std	Y+13, r21	; 0x0d
    7ed6:	8f bf       	out	0x3f, r24	; 63
    7ed8:	80 91 13 23 	lds	r24, 0x2313	; 0x802313 <s_twi1_gyro_2_mag_x_nT.8175>
    7edc:	90 91 14 23 	lds	r25, 0x2314	; 0x802314 <s_twi1_gyro_2_mag_x_nT.8175+0x1>
    7ee0:	a0 91 15 23 	lds	r26, 0x2315	; 0x802315 <s_twi1_gyro_2_mag_x_nT.8175+0x2>
    7ee4:	b0 91 16 23 	lds	r27, 0x2316	; 0x802316 <s_twi1_gyro_2_mag_x_nT.8175+0x3>
    7ee8:	88 16       	cp	r8, r24
    7eea:	99 06       	cpc	r9, r25
    7eec:	aa 06       	cpc	r10, r26
    7eee:	bb 06       	cpc	r11, r27
    7ef0:	d9 f4       	brne	.+54     	; 0x7f28 <task_twi2_lcd__gyro_gfxmag+0xc0>
    7ef2:	80 91 0f 23 	lds	r24, 0x230F	; 0x80230f <s_twi1_gyro_2_mag_y_nT.8176>
    7ef6:	90 91 10 23 	lds	r25, 0x2310	; 0x802310 <s_twi1_gyro_2_mag_y_nT.8176+0x1>
    7efa:	a0 91 11 23 	lds	r26, 0x2311	; 0x802311 <s_twi1_gyro_2_mag_y_nT.8176+0x2>
    7efe:	b0 91 12 23 	lds	r27, 0x2312	; 0x802312 <s_twi1_gyro_2_mag_y_nT.8176+0x3>
    7f02:	48 16       	cp	r4, r24
    7f04:	59 06       	cpc	r5, r25
    7f06:	6a 06       	cpc	r6, r26
    7f08:	7b 06       	cpc	r7, r27
    7f0a:	71 f4       	brne	.+28     	; 0x7f28 <task_twi2_lcd__gyro_gfxmag+0xc0>
    7f0c:	80 91 0b 23 	lds	r24, 0x230B	; 0x80230b <s_twi1_gyro_2_mag_z_nT.8177>
    7f10:	90 91 0c 23 	lds	r25, 0x230C	; 0x80230c <s_twi1_gyro_2_mag_z_nT.8177+0x1>
    7f14:	a0 91 0d 23 	lds	r26, 0x230D	; 0x80230d <s_twi1_gyro_2_mag_z_nT.8177+0x2>
    7f18:	b0 91 0e 23 	lds	r27, 0x230E	; 0x80230e <s_twi1_gyro_2_mag_z_nT.8177+0x3>
    7f1c:	28 17       	cp	r18, r24
    7f1e:	39 07       	cpc	r19, r25
    7f20:	4a 07       	cpc	r20, r26
    7f22:	5b 07       	cpc	r21, r27
    7f24:	09 f4       	brne	.+2      	; 0x7f28 <task_twi2_lcd__gyro_gfxmag+0xc0>
    7f26:	9b c1       	rjmp	.+822    	; 0x825e <task_twi2_lcd__gyro_gfxmag+0x3f6>
    7f28:	80 92 13 23 	sts	0x2313, r8	; 0x802313 <s_twi1_gyro_2_mag_x_nT.8175>
    7f2c:	90 92 14 23 	sts	0x2314, r9	; 0x802314 <s_twi1_gyro_2_mag_x_nT.8175+0x1>
    7f30:	a0 92 15 23 	sts	0x2315, r10	; 0x802315 <s_twi1_gyro_2_mag_x_nT.8175+0x2>
    7f34:	b0 92 16 23 	sts	0x2316, r11	; 0x802316 <s_twi1_gyro_2_mag_x_nT.8175+0x3>
    7f38:	40 92 0f 23 	sts	0x230F, r4	; 0x80230f <s_twi1_gyro_2_mag_y_nT.8176>
    7f3c:	50 92 10 23 	sts	0x2310, r5	; 0x802310 <s_twi1_gyro_2_mag_y_nT.8176+0x1>
    7f40:	60 92 11 23 	sts	0x2311, r6	; 0x802311 <s_twi1_gyro_2_mag_y_nT.8176+0x2>
    7f44:	70 92 12 23 	sts	0x2312, r7	; 0x802312 <s_twi1_gyro_2_mag_y_nT.8176+0x3>
    7f48:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    7f4c:	ac 85       	ldd	r26, Y+12	; 0x0c
    7f4e:	bd 85       	ldd	r27, Y+13	; 0x0d
    7f50:	80 93 0b 23 	sts	0x230B, r24	; 0x80230b <s_twi1_gyro_2_mag_z_nT.8177>
    7f54:	90 93 0c 23 	sts	0x230C, r25	; 0x80230c <s_twi1_gyro_2_mag_z_nT.8177+0x1>
    7f58:	a0 93 0d 23 	sts	0x230D, r26	; 0x80230d <s_twi1_gyro_2_mag_z_nT.8177+0x2>
    7f5c:	b0 93 0e 23 	sts	0x230E, r27	; 0x80230e <s_twi1_gyro_2_mag_z_nT.8177+0x3>
    7f60:	20 e0       	ldi	r18, 0x00	; 0
    7f62:	30 e8       	ldi	r19, 0x80	; 128
    7f64:	4b e3       	ldi	r20, 0x3B	; 59
    7f66:	55 e4       	ldi	r21, 0x45	; 69
    7f68:	60 91 07 23 	lds	r22, 0x2307	; 0x802307 <s_length.8178>
    7f6c:	70 91 08 23 	lds	r23, 0x2308	; 0x802308 <s_length.8178+0x1>
    7f70:	80 91 09 23 	lds	r24, 0x2309	; 0x802309 <s_length.8178+0x2>
    7f74:	90 91 0a 23 	lds	r25, 0x230A	; 0x80230a <s_length.8178+0x3>
    7f78:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    7f7c:	6b 01       	movw	r12, r22
    7f7e:	7c 01       	movw	r14, r24
    7f80:	0e 94 3c 7e 	call	0xfc78	; 0xfc78 <__fixunssfsi>
    7f84:	16 2f       	mov	r17, r22
    7f86:	a7 01       	movw	r20, r14
    7f88:	96 01       	movw	r18, r12
    7f8a:	60 e0       	ldi	r22, 0x00	; 0
    7f8c:	70 e0       	ldi	r23, 0x00	; 0
    7f8e:	80 e8       	ldi	r24, 0x80	; 128
    7f90:	92 e4       	ldi	r25, 0x42	; 66
    7f92:	0e 94 63 7d 	call	0xfac6	; 0xfac6 <__subsf3>
    7f96:	0e 94 3c 7e 	call	0xfc78	; 0xfc78 <__fixunssfsi>
    7f9a:	e1 2c       	mov	r14, r1
    7f9c:	01 e0       	ldi	r16, 0x01	; 1
    7f9e:	21 2f       	mov	r18, r17
    7fa0:	43 e0       	ldi	r20, 0x03	; 3
    7fa2:	82 e7       	ldi	r24, 0x72	; 114
    7fa4:	0e 94 14 37 	call	0x6e28	; 0x6e28 <task_twi2_lcd_rect>
    7fa8:	20 91 06 23 	lds	r18, 0x2306	; 0x802306 <s_p1y.8180>
    7fac:	28 5d       	subi	r18, 0xD8	; 216
    7fae:	40 91 05 23 	lds	r20, 0x2305	; 0x802305 <s_p1x.8179>
    7fb2:	4a 56       	subi	r20, 0x6A	; 106
    7fb4:	00 e0       	ldi	r16, 0x00	; 0
    7fb6:	68 e2       	ldi	r22, 0x28	; 40
    7fb8:	86 e9       	ldi	r24, 0x96	; 150
    7fba:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    7fbe:	20 91 04 23 	lds	r18, 0x2304	; 0x802304 <s_p2y.8182>
    7fc2:	28 5d       	subi	r18, 0xD8	; 216
    7fc4:	40 91 03 23 	lds	r20, 0x2303	; 0x802303 <s_p2x.8181>
    7fc8:	4a 56       	subi	r20, 0x6A	; 106
    7fca:	60 91 06 23 	lds	r22, 0x2306	; 0x802306 <s_p1y.8180>
    7fce:	68 5d       	subi	r22, 0xD8	; 216
    7fd0:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <s_p1x.8179>
    7fd4:	8a 56       	subi	r24, 0x6A	; 106
    7fd6:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    7fda:	20 91 02 23 	lds	r18, 0x2302	; 0x802302 <s_p3y.8184>
    7fde:	28 5d       	subi	r18, 0xD8	; 216
    7fe0:	40 91 01 23 	lds	r20, 0x2301	; 0x802301 <s_p3x.8183>
    7fe4:	4a 56       	subi	r20, 0x6A	; 106
    7fe6:	60 91 04 23 	lds	r22, 0x2304	; 0x802304 <s_p2y.8182>
    7fea:	68 5d       	subi	r22, 0xD8	; 216
    7fec:	80 91 03 23 	lds	r24, 0x2303	; 0x802303 <s_p2x.8181>
    7ff0:	8a 56       	subi	r24, 0x6A	; 106
    7ff2:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    7ff6:	01 e0       	ldi	r16, 0x01	; 1
    7ff8:	21 e0       	ldi	r18, 0x01	; 1
    7ffa:	41 e0       	ldi	r20, 0x01	; 1
    7ffc:	68 e2       	ldi	r22, 0x28	; 40
    7ffe:	86 e9       	ldi	r24, 0x96	; 150
    8000:	0e 94 42 37 	call	0x6e84	; 0x6e84 <task_twi2_lcd_circ>
    8004:	c5 01       	movw	r24, r10
    8006:	b4 01       	movw	r22, r8
    8008:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    800c:	6a 83       	std	Y+2, r22	; 0x02
    800e:	7b 83       	std	Y+3, r23	; 0x03
    8010:	8c 83       	std	Y+4, r24	; 0x04
    8012:	9d 83       	std	Y+5, r25	; 0x05
    8014:	c3 01       	movw	r24, r6
    8016:	b2 01       	movw	r22, r4
    8018:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    801c:	6e 83       	std	Y+6, r22	; 0x06
    801e:	7f 83       	std	Y+7, r23	; 0x07
    8020:	88 87       	std	Y+8, r24	; 0x08
    8022:	99 87       	std	Y+9, r25	; 0x09
    8024:	6a 85       	ldd	r22, Y+10	; 0x0a
    8026:	7b 85       	ldd	r23, Y+11	; 0x0b
    8028:	8c 85       	ldd	r24, Y+12	; 0x0c
    802a:	9d 85       	ldd	r25, Y+13	; 0x0d
    802c:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    8030:	6b 01       	movw	r12, r22
    8032:	7c 01       	movw	r14, r24
    8034:	2a 81       	ldd	r18, Y+2	; 0x02
    8036:	3b 81       	ldd	r19, Y+3	; 0x03
    8038:	4c 81       	ldd	r20, Y+4	; 0x04
    803a:	5d 81       	ldd	r21, Y+5	; 0x05
    803c:	ca 01       	movw	r24, r20
    803e:	b9 01       	movw	r22, r18
    8040:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    8044:	4b 01       	movw	r8, r22
    8046:	5c 01       	movw	r10, r24
    8048:	2e 81       	ldd	r18, Y+6	; 0x06
    804a:	3f 81       	ldd	r19, Y+7	; 0x07
    804c:	48 85       	ldd	r20, Y+8	; 0x08
    804e:	59 85       	ldd	r21, Y+9	; 0x09
    8050:	ca 01       	movw	r24, r20
    8052:	b9 01       	movw	r22, r18
    8054:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    8058:	9b 01       	movw	r18, r22
    805a:	ac 01       	movw	r20, r24
    805c:	c5 01       	movw	r24, r10
    805e:	b4 01       	movw	r22, r8
    8060:	0e 94 64 7d 	call	0xfac8	; 0xfac8 <__addsf3>
    8064:	4b 01       	movw	r8, r22
    8066:	5c 01       	movw	r10, r24
    8068:	a7 01       	movw	r20, r14
    806a:	96 01       	movw	r18, r12
    806c:	c7 01       	movw	r24, r14
    806e:	b6 01       	movw	r22, r12
    8070:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    8074:	9b 01       	movw	r18, r22
    8076:	ac 01       	movw	r20, r24
    8078:	c5 01       	movw	r24, r10
    807a:	b4 01       	movw	r22, r8
    807c:	0e 94 64 7d 	call	0xfac8	; 0xfac8 <__addsf3>
    8080:	20 e0       	ldi	r18, 0x00	; 0
    8082:	30 e0       	ldi	r19, 0x00	; 0
    8084:	40 e0       	ldi	r20, 0x00	; 0
    8086:	5f e3       	ldi	r21, 0x3F	; 63
    8088:	0e 94 ba 7f 	call	0xff74	; 0xff74 <pow>
    808c:	96 2e       	mov	r9, r22
    808e:	a7 2e       	mov	r10, r23
    8090:	78 2e       	mov	r7, r24
    8092:	69 2e       	mov	r6, r25
    8094:	20 e0       	ldi	r18, 0x00	; 0
    8096:	30 e0       	ldi	r19, 0x00	; 0
    8098:	a9 01       	movw	r20, r18
    809a:	0e 94 c8 7d 	call	0xfb90	; 0xfb90 <__cmpsf2>
    809e:	81 11       	cpse	r24, r1
    80a0:	09 c0       	rjmp	.+18     	; 0x80b4 <task_twi2_lcd__gyro_gfxmag+0x24c>
    80a2:	91 2c       	mov	r9, r1
    80a4:	a1 2c       	mov	r10, r1
    80a6:	68 94       	set
    80a8:	77 24       	eor	r7, r7
    80aa:	77 f8       	bld	r7, 7
    80ac:	0f 2e       	mov	r0, r31
    80ae:	ff e3       	ldi	r31, 0x3F	; 63
    80b0:	6f 2e       	mov	r6, r31
    80b2:	f0 2d       	mov	r31, r0
    80b4:	29 2d       	mov	r18, r9
    80b6:	3a 2d       	mov	r19, r10
    80b8:	47 2d       	mov	r20, r7
    80ba:	56 2d       	mov	r21, r6
    80bc:	6a 81       	ldd	r22, Y+2	; 0x02
    80be:	7b 81       	ldd	r23, Y+3	; 0x03
    80c0:	8c 81       	ldd	r24, Y+4	; 0x04
    80c2:	9d 81       	ldd	r25, Y+5	; 0x05
    80c4:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    80c8:	20 e0       	ldi	r18, 0x00	; 0
    80ca:	30 e0       	ldi	r19, 0x00	; 0
    80cc:	48 e4       	ldi	r20, 0x48	; 72
    80ce:	51 e4       	ldi	r21, 0x41	; 65
    80d0:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    80d4:	1b 01       	movw	r2, r22
    80d6:	2c 01       	movw	r4, r24
    80d8:	0e 94 3c 7e 	call	0xfc78	; 0xfc78 <__fixunssfsi>
    80dc:	86 2e       	mov	r8, r22
    80de:	c2 01       	movw	r24, r4
    80e0:	b1 01       	movw	r22, r2
    80e2:	90 58       	subi	r25, 0x80	; 128
    80e4:	0e 94 3c 7e 	call	0xfc78	; 0xfc78 <__fixunssfsi>
    80e8:	16 2f       	mov	r17, r22
    80ea:	29 2d       	mov	r18, r9
    80ec:	3a 2d       	mov	r19, r10
    80ee:	47 2d       	mov	r20, r7
    80f0:	56 2d       	mov	r21, r6
    80f2:	6e 81       	ldd	r22, Y+6	; 0x06
    80f4:	7f 81       	ldd	r23, Y+7	; 0x07
    80f6:	88 85       	ldd	r24, Y+8	; 0x08
    80f8:	99 85       	ldd	r25, Y+9	; 0x09
    80fa:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    80fe:	20 e0       	ldi	r18, 0x00	; 0
    8100:	30 e0       	ldi	r19, 0x00	; 0
    8102:	48 ec       	ldi	r20, 0xC8	; 200
    8104:	51 e4       	ldi	r21, 0x41	; 65
    8106:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    810a:	1b 01       	movw	r2, r22
    810c:	2c 01       	movw	r4, r24
    810e:	68 2d       	mov	r22, r8
    8110:	70 e0       	ldi	r23, 0x00	; 0
    8112:	80 e0       	ldi	r24, 0x00	; 0
    8114:	90 e0       	ldi	r25, 0x00	; 0
    8116:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    811a:	9b 01       	movw	r18, r22
    811c:	ac 01       	movw	r20, r24
    811e:	c2 01       	movw	r24, r4
    8120:	b1 01       	movw	r22, r2
    8122:	0e 94 64 7d 	call	0xfac8	; 0xfac8 <__addsf3>
    8126:	0e 94 3c 7e 	call	0xfc78	; 0xfc78 <__fixunssfsi>
    812a:	b6 2e       	mov	r11, r22
    812c:	29 2d       	mov	r18, r9
    812e:	3a 2d       	mov	r19, r10
    8130:	47 2d       	mov	r20, r7
    8132:	56 2d       	mov	r21, r6
    8134:	c7 01       	movw	r24, r14
    8136:	b6 01       	movw	r22, r12
    8138:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    813c:	20 e0       	ldi	r18, 0x00	; 0
    813e:	30 e0       	ldi	r19, 0x00	; 0
    8140:	48 ec       	ldi	r20, 0xC8	; 200
    8142:	51 e4       	ldi	r21, 0x41	; 65
    8144:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    8148:	6b 01       	movw	r12, r22
    814a:	7c 01       	movw	r14, r24
    814c:	61 2f       	mov	r22, r17
    814e:	70 e0       	ldi	r23, 0x00	; 0
    8150:	80 e0       	ldi	r24, 0x00	; 0
    8152:	90 e0       	ldi	r25, 0x00	; 0
    8154:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    8158:	9b 01       	movw	r18, r22
    815a:	ac 01       	movw	r20, r24
    815c:	c7 01       	movw	r24, r14
    815e:	b6 01       	movw	r22, r12
    8160:	0e 94 64 7d 	call	0xfac8	; 0xfac8 <__addsf3>
    8164:	0e 94 3c 7e 	call	0xfc78	; 0xfc78 <__fixunssfsi>
    8168:	f6 2e       	mov	r15, r22
    816a:	20 e0       	ldi	r18, 0x00	; 0
    816c:	30 e5       	ldi	r19, 0x50	; 80
    816e:	43 ec       	ldi	r20, 0xC3	; 195
    8170:	57 e4       	ldi	r21, 0x47	; 71
    8172:	69 2d       	mov	r22, r9
    8174:	7a 2d       	mov	r23, r10
    8176:	87 2d       	mov	r24, r7
    8178:	96 2d       	mov	r25, r6
    817a:	0e 94 53 7f 	call	0xfea6	; 0xfea6 <__gesf2>
    817e:	18 16       	cp	r1, r24
    8180:	6c f4       	brge	.+26     	; 0x819c <task_twi2_lcd__gyro_gfxmag+0x334>
    8182:	91 2c       	mov	r9, r1
    8184:	0f 2e       	mov	r0, r31
    8186:	f0 e5       	ldi	r31, 0x50	; 80
    8188:	af 2e       	mov	r10, r31
    818a:	f0 2d       	mov	r31, r0
    818c:	0f 2e       	mov	r0, r31
    818e:	f3 ec       	ldi	r31, 0xC3	; 195
    8190:	7f 2e       	mov	r7, r31
    8192:	f0 2d       	mov	r31, r0
    8194:	0f 2e       	mov	r0, r31
    8196:	f7 e4       	ldi	r31, 0x47	; 71
    8198:	6f 2e       	mov	r6, r31
    819a:	f0 2d       	mov	r31, r0
    819c:	01 e0       	ldi	r16, 0x01	; 1
    819e:	20 e0       	ldi	r18, 0x00	; 0
    81a0:	42 e0       	ldi	r20, 0x02	; 2
    81a2:	60 e4       	ldi	r22, 0x40	; 64
    81a4:	83 e7       	ldi	r24, 0x73	; 115
    81a6:	0e 94 42 37 	call	0x6e84	; 0x6e84 <task_twi2_lcd_circ>
    81aa:	20 e0       	ldi	r18, 0x00	; 0
    81ac:	30 e8       	ldi	r19, 0x80	; 128
    81ae:	4b e3       	ldi	r20, 0x3B	; 59
    81b0:	55 e4       	ldi	r21, 0x45	; 69
    81b2:	69 2d       	mov	r22, r9
    81b4:	7a 2d       	mov	r23, r10
    81b6:	87 2d       	mov	r24, r7
    81b8:	96 2d       	mov	r25, r6
    81ba:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    81be:	1b 01       	movw	r2, r22
    81c0:	2c 01       	movw	r4, r24
    81c2:	0e 94 3c 7e 	call	0xfc78	; 0xfc78 <__fixunssfsi>
    81c6:	d6 2e       	mov	r13, r22
    81c8:	a2 01       	movw	r20, r4
    81ca:	91 01       	movw	r18, r2
    81cc:	60 e0       	ldi	r22, 0x00	; 0
    81ce:	70 e0       	ldi	r23, 0x00	; 0
    81d0:	80 e8       	ldi	r24, 0x80	; 128
    81d2:	92 e4       	ldi	r25, 0x42	; 66
    81d4:	0e 94 63 7d 	call	0xfac6	; 0xfac6 <__subsf3>
    81d8:	0e 94 3c 7e 	call	0xfc78	; 0xfc78 <__fixunssfsi>
    81dc:	ee 24       	eor	r14, r14
    81de:	e3 94       	inc	r14
    81e0:	2d 2d       	mov	r18, r13
    81e2:	43 e0       	ldi	r20, 0x03	; 3
    81e4:	82 e7       	ldi	r24, 0x72	; 114
    81e6:	0e 94 14 37 	call	0x6e28	; 0x6e28 <task_twi2_lcd_rect>
    81ea:	0f 2e       	mov	r0, r31
    81ec:	f8 e2       	ldi	r31, 0x28	; 40
    81ee:	ef 2e       	mov	r14, r31
    81f0:	f0 2d       	mov	r31, r0
    81f2:	e1 0e       	add	r14, r17
    81f4:	0f 2e       	mov	r0, r31
    81f6:	f6 e9       	ldi	r31, 0x96	; 150
    81f8:	cf 2e       	mov	r12, r31
    81fa:	f0 2d       	mov	r31, r0
    81fc:	c8 0c       	add	r12, r8
    81fe:	2e 2d       	mov	r18, r14
    8200:	4c 2d       	mov	r20, r12
    8202:	68 e2       	ldi	r22, 0x28	; 40
    8204:	86 e9       	ldi	r24, 0x96	; 150
    8206:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    820a:	0f 2e       	mov	r0, r31
    820c:	f6 e9       	ldi	r31, 0x96	; 150
    820e:	df 2e       	mov	r13, r31
    8210:	f0 2d       	mov	r31, r0
    8212:	db 0c       	add	r13, r11
    8214:	2e 2d       	mov	r18, r14
    8216:	4d 2d       	mov	r20, r13
    8218:	6e 2d       	mov	r22, r14
    821a:	8c 2d       	mov	r24, r12
    821c:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    8220:	28 e2       	ldi	r18, 0x28	; 40
    8222:	2f 0d       	add	r18, r15
    8224:	4d 2d       	mov	r20, r13
    8226:	6e 2d       	mov	r22, r14
    8228:	8d 2d       	mov	r24, r13
    822a:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    822e:	89 2d       	mov	r24, r9
    8230:	9a 2d       	mov	r25, r10
    8232:	a7 2d       	mov	r26, r7
    8234:	b6 2d       	mov	r27, r6
    8236:	80 93 07 23 	sts	0x2307, r24	; 0x802307 <s_length.8178>
    823a:	90 93 08 23 	sts	0x2308, r25	; 0x802308 <s_length.8178+0x1>
    823e:	a0 93 09 23 	sts	0x2309, r26	; 0x802309 <s_length.8178+0x2>
    8242:	b0 93 0a 23 	sts	0x230A, r27	; 0x80230a <s_length.8178+0x3>
    8246:	80 92 05 23 	sts	0x2305, r8	; 0x802305 <s_p1x.8179>
    824a:	10 93 06 23 	sts	0x2306, r17	; 0x802306 <s_p1y.8180>
    824e:	b0 92 03 23 	sts	0x2303, r11	; 0x802303 <s_p2x.8181>
    8252:	10 93 04 23 	sts	0x2304, r17	; 0x802304 <s_p2y.8182>
    8256:	b0 92 01 23 	sts	0x2301, r11	; 0x802301 <s_p3x.8183>
    825a:	f0 92 02 23 	sts	0x2302, r15	; 0x802302 <s_p3y.8184>
    825e:	2d 96       	adiw	r28, 0x0d	; 13
    8260:	cd bf       	out	0x3d, r28	; 61
    8262:	de bf       	out	0x3e, r29	; 62
    8264:	df 91       	pop	r29
    8266:	cf 91       	pop	r28
    8268:	1f 91       	pop	r17
    826a:	0f 91       	pop	r16
    826c:	ff 90       	pop	r15
    826e:	ef 90       	pop	r14
    8270:	df 90       	pop	r13
    8272:	cf 90       	pop	r12
    8274:	bf 90       	pop	r11
    8276:	af 90       	pop	r10
    8278:	9f 90       	pop	r9
    827a:	8f 90       	pop	r8
    827c:	7f 90       	pop	r7
    827e:	6f 90       	pop	r6
    8280:	5f 90       	pop	r5
    8282:	4f 90       	pop	r4
    8284:	3f 90       	pop	r3
    8286:	2f 90       	pop	r2
    8288:	08 95       	ret

0000828a <task_twi2_lcd__gyro_gfxaccel>:
    828a:	6f 92       	push	r6
    828c:	7f 92       	push	r7
    828e:	8f 92       	push	r8
    8290:	9f 92       	push	r9
    8292:	af 92       	push	r10
    8294:	bf 92       	push	r11
    8296:	cf 92       	push	r12
    8298:	df 92       	push	r13
    829a:	ef 92       	push	r14
    829c:	ff 92       	push	r15
    829e:	0f 93       	push	r16
    82a0:	1f 93       	push	r17
    82a2:	cf 93       	push	r28
    82a4:	df 93       	push	r29
    82a6:	1f 92       	push	r1
    82a8:	cd b7       	in	r28, 0x3d	; 61
    82aa:	de b7       	in	r29, 0x3e	; 62
    82ac:	8f b7       	in	r24, 0x3f	; 63
    82ae:	89 83       	std	Y+1, r24	; 0x01
    82b0:	f8 94       	cli
    82b2:	89 81       	ldd	r24, Y+1	; 0x01
    82b4:	c0 90 63 27 	lds	r12, 0x2763	; 0x802763 <g_twi1_gyro_1_accel_x_mg>
    82b8:	d0 90 64 27 	lds	r13, 0x2764	; 0x802764 <g_twi1_gyro_1_accel_x_mg+0x1>
    82bc:	a0 90 61 27 	lds	r10, 0x2761	; 0x802761 <g_twi1_gyro_1_accel_y_mg>
    82c0:	b0 90 62 27 	lds	r11, 0x2762	; 0x802762 <g_twi1_gyro_1_accel_y_mg+0x1>
    82c4:	e0 90 5f 27 	lds	r14, 0x275F	; 0x80275f <g_twi1_gyro_1_accel_z_mg>
    82c8:	f0 90 60 27 	lds	r15, 0x2760	; 0x802760 <g_twi1_gyro_1_accel_z_mg+0x1>
    82cc:	80 90 97 28 	lds	r8, 0x2897	; 0x802897 <g_backlight_mode_pwm>
    82d0:	90 90 98 28 	lds	r9, 0x2898	; 0x802898 <g_backlight_mode_pwm+0x1>
    82d4:	8f bf       	out	0x3f, r24	; 63
    82d6:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <s_twi1_gyro_1_accel_x_mg.8204>
    82da:	90 91 00 23 	lds	r25, 0x2300	; 0x802300 <s_twi1_gyro_1_accel_x_mg.8204+0x1>
    82de:	c8 16       	cp	r12, r24
    82e0:	d9 06       	cpc	r13, r25
    82e2:	79 f4       	brne	.+30     	; 0x8302 <task_twi2_lcd__gyro_gfxaccel+0x78>
    82e4:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <s_twi1_gyro_1_accel_y_mg.8205>
    82e8:	90 91 fe 22 	lds	r25, 0x22FE	; 0x8022fe <s_twi1_gyro_1_accel_y_mg.8205+0x1>
    82ec:	a8 16       	cp	r10, r24
    82ee:	b9 06       	cpc	r11, r25
    82f0:	41 f4       	brne	.+16     	; 0x8302 <task_twi2_lcd__gyro_gfxaccel+0x78>
    82f2:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <s_twi1_gyro_1_accel_z_mg.8206>
    82f6:	90 91 fc 22 	lds	r25, 0x22FC	; 0x8022fc <s_twi1_gyro_1_accel_z_mg.8206+0x1>
    82fa:	e8 16       	cp	r14, r24
    82fc:	f9 06       	cpc	r15, r25
    82fe:	09 f4       	brne	.+2      	; 0x8302 <task_twi2_lcd__gyro_gfxaccel+0x78>
    8300:	a6 c0       	rjmp	.+332    	; 0x844e <task_twi2_lcd__gyro_gfxaccel+0x1c4>
    8302:	c0 92 ff 22 	sts	0x22FF, r12	; 0x8022ff <s_twi1_gyro_1_accel_x_mg.8204>
    8306:	d0 92 00 23 	sts	0x2300, r13	; 0x802300 <s_twi1_gyro_1_accel_x_mg.8204+0x1>
    830a:	a0 92 fd 22 	sts	0x22FD, r10	; 0x8022fd <s_twi1_gyro_1_accel_y_mg.8205>
    830e:	b0 92 fe 22 	sts	0x22FE, r11	; 0x8022fe <s_twi1_gyro_1_accel_y_mg.8205+0x1>
    8312:	e0 92 fb 22 	sts	0x22FB, r14	; 0x8022fb <s_twi1_gyro_1_accel_z_mg.8206>
    8316:	f0 92 fc 22 	sts	0x22FC, r15	; 0x8022fc <s_twi1_gyro_1_accel_z_mg.8206+0x1>
    831a:	20 91 fa 22 	lds	r18, 0x22FA	; 0x8022fa <s_p1y.8208>
    831e:	28 5d       	subi	r18, 0xD8	; 216
    8320:	40 91 f9 22 	lds	r20, 0x22F9	; 0x8022f9 <s_p1x.8207>
    8324:	4e 52       	subi	r20, 0x2E	; 46
    8326:	00 e0       	ldi	r16, 0x00	; 0
    8328:	68 e2       	ldi	r22, 0x28	; 40
    832a:	82 ed       	ldi	r24, 0xD2	; 210
    832c:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    8330:	20 91 f8 22 	lds	r18, 0x22F8	; 0x8022f8 <s_p2y.8210>
    8334:	28 5d       	subi	r18, 0xD8	; 216
    8336:	40 91 f7 22 	lds	r20, 0x22F7	; 0x8022f7 <s_p2x.8209>
    833a:	4e 52       	subi	r20, 0x2E	; 46
    833c:	60 91 fa 22 	lds	r22, 0x22FA	; 0x8022fa <s_p1y.8208>
    8340:	68 5d       	subi	r22, 0xD8	; 216
    8342:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <s_p1x.8207>
    8346:	8e 52       	subi	r24, 0x2E	; 46
    8348:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    834c:	20 91 f6 22 	lds	r18, 0x22F6	; 0x8022f6 <s_p3y.8212>
    8350:	28 5d       	subi	r18, 0xD8	; 216
    8352:	40 91 f5 22 	lds	r20, 0x22F5	; 0x8022f5 <s_p3x.8211>
    8356:	4e 52       	subi	r20, 0x2E	; 46
    8358:	60 91 f8 22 	lds	r22, 0x22F8	; 0x8022f8 <s_p2y.8210>
    835c:	68 5d       	subi	r22, 0xD8	; 216
    835e:	80 91 f7 22 	lds	r24, 0x22F7	; 0x8022f7 <s_p2x.8209>
    8362:	8e 52       	subi	r24, 0x2E	; 46
    8364:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    8368:	01 e0       	ldi	r16, 0x01	; 1
    836a:	21 e0       	ldi	r18, 0x01	; 1
    836c:	41 e0       	ldi	r20, 0x01	; 1
    836e:	68 e2       	ldi	r22, 0x28	; 40
    8370:	82 ed       	ldi	r24, 0xD2	; 210
    8372:	0e 94 42 37 	call	0x6e84	; 0x6e84 <task_twi2_lcd_circ>
    8376:	c5 01       	movw	r24, r10
    8378:	60 e5       	ldi	r22, 0x50	; 80
    837a:	70 e0       	ldi	r23, 0x00	; 0
    837c:	0e 94 59 81 	call	0x102b2	; 0x102b2 <__divmodhi4>
    8380:	16 2f       	mov	r17, r22
    8382:	66 2e       	mov	r6, r22
    8384:	61 94       	neg	r6
    8386:	28 e2       	ldi	r18, 0x28	; 40
    8388:	30 e0       	ldi	r19, 0x00	; 0
    838a:	c6 01       	movw	r24, r12
    838c:	b9 01       	movw	r22, r18
    838e:	0e 94 59 81 	call	0x102b2	; 0x102b2 <__divmodhi4>
    8392:	a6 2c       	mov	r10, r6
    8394:	a6 1a       	sub	r10, r22
    8396:	c7 01       	movw	r24, r14
    8398:	b9 01       	movw	r22, r18
    839a:	0e 94 59 81 	call	0x102b2	; 0x102b2 <__divmodhi4>
    839e:	d1 2e       	mov	r13, r17
    83a0:	d6 0e       	add	r13, r22
    83a2:	0f 2e       	mov	r0, r31
    83a4:	f8 e2       	ldi	r31, 0x28	; 40
    83a6:	cf 2e       	mov	r12, r31
    83a8:	f0 2d       	mov	r31, r0
    83aa:	c1 0e       	add	r12, r17
    83ac:	82 ed       	ldi	r24, 0xD2	; 210
    83ae:	b8 2e       	mov	r11, r24
    83b0:	b1 1a       	sub	r11, r17
    83b2:	2c 2d       	mov	r18, r12
    83b4:	4b 2d       	mov	r20, r11
    83b6:	68 e2       	ldi	r22, 0x28	; 40
    83b8:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    83bc:	0f 2e       	mov	r0, r31
    83be:	f2 ed       	ldi	r31, 0xD2	; 210
    83c0:	7f 2e       	mov	r7, r31
    83c2:	f0 2d       	mov	r31, r0
    83c4:	7a 0c       	add	r7, r10
    83c6:	2c 2d       	mov	r18, r12
    83c8:	47 2d       	mov	r20, r7
    83ca:	6c 2d       	mov	r22, r12
    83cc:	8b 2d       	mov	r24, r11
    83ce:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    83d2:	28 e2       	ldi	r18, 0x28	; 40
    83d4:	2d 0d       	add	r18, r13
    83d6:	47 2d       	mov	r20, r7
    83d8:	6c 2d       	mov	r22, r12
    83da:	87 2d       	mov	r24, r7
    83dc:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    83e0:	60 92 f9 22 	sts	0x22F9, r6	; 0x8022f9 <s_p1x.8207>
    83e4:	10 93 fa 22 	sts	0x22FA, r17	; 0x8022fa <s_p1y.8208>
    83e8:	a0 92 f7 22 	sts	0x22F7, r10	; 0x8022f7 <s_p2x.8209>
    83ec:	10 93 f8 22 	sts	0x22F8, r17	; 0x8022f8 <s_p2y.8210>
    83f0:	a0 92 f5 22 	sts	0x22F5, r10	; 0x8022f5 <s_p3x.8211>
    83f4:	d0 92 f6 22 	sts	0x22F6, r13	; 0x8022f6 <s_p3y.8212>
    83f8:	2e ef       	ldi	r18, 0xFE	; 254
    83fa:	82 16       	cp	r8, r18
    83fc:	2f ef       	ldi	r18, 0xFF	; 255
    83fe:	92 06       	cpc	r9, r18
    8400:	31 f5       	brne	.+76     	; 0x844e <task_twi2_lcd__gyro_gfxaccel+0x1c4>
    8402:	97 01       	movw	r18, r14
    8404:	28 51       	subi	r18, 0x18	; 24
    8406:	3c 4f       	sbci	r19, 0xFC	; 252
    8408:	c9 01       	movw	r24, r18
    840a:	33 0f       	add	r19, r19
    840c:	aa 0b       	sbc	r26, r26
    840e:	bb 0b       	sbc	r27, r27
    8410:	81 3d       	cpi	r24, 0xD1	; 209
    8412:	27 e0       	ldi	r18, 0x07	; 7
    8414:	92 07       	cpc	r25, r18
    8416:	a1 05       	cpc	r26, r1
    8418:	b1 05       	cpc	r27, r1
    841a:	24 f0       	brlt	.+8      	; 0x8424 <task_twi2_lcd__gyro_gfxaccel+0x19a>
    841c:	80 ed       	ldi	r24, 0xD0	; 208
    841e:	97 e0       	ldi	r25, 0x07	; 7
    8420:	a0 e0       	ldi	r26, 0x00	; 0
    8422:	b0 e0       	ldi	r27, 0x00	; 0
    8424:	9c 01       	movw	r18, r24
    8426:	ad 01       	movw	r20, r26
    8428:	bb 23       	and	r27, r27
    842a:	1c f4       	brge	.+6      	; 0x8432 <task_twi2_lcd__gyro_gfxaccel+0x1a8>
    842c:	20 e0       	ldi	r18, 0x00	; 0
    842e:	30 e0       	ldi	r19, 0x00	; 0
    8430:	a9 01       	movw	r20, r18
    8432:	af ef       	ldi	r26, 0xFF	; 255
    8434:	b0 e0       	ldi	r27, 0x00	; 0
    8436:	0e 94 cd 81 	call	0x1039a	; 0x1039a <__muluhisi3>
    843a:	20 ed       	ldi	r18, 0xD0	; 208
    843c:	37 e0       	ldi	r19, 0x07	; 7
    843e:	40 e0       	ldi	r20, 0x00	; 0
    8440:	50 e0       	ldi	r21, 0x00	; 0
    8442:	0e 94 8e 81 	call	0x1031c	; 0x1031c <__divmodsi4>
    8446:	62 2f       	mov	r22, r18
    8448:	80 e0       	ldi	r24, 0x00	; 0
    844a:	0e 94 0b 34 	call	0x6816	; 0x6816 <twi2_set_ledbl>
    844e:	0f 90       	pop	r0
    8450:	df 91       	pop	r29
    8452:	cf 91       	pop	r28
    8454:	1f 91       	pop	r17
    8456:	0f 91       	pop	r16
    8458:	ff 90       	pop	r15
    845a:	ef 90       	pop	r14
    845c:	df 90       	pop	r13
    845e:	cf 90       	pop	r12
    8460:	bf 90       	pop	r11
    8462:	af 90       	pop	r10
    8464:	9f 90       	pop	r9
    8466:	8f 90       	pop	r8
    8468:	7f 90       	pop	r7
    846a:	6f 90       	pop	r6
    846c:	08 95       	ret

0000846e <task_twi2_lcd__gyro_gfxgyro>:
    846e:	2f 92       	push	r2
    8470:	3f 92       	push	r3
    8472:	4f 92       	push	r4
    8474:	5f 92       	push	r5
    8476:	6f 92       	push	r6
    8478:	7f 92       	push	r7
    847a:	8f 92       	push	r8
    847c:	9f 92       	push	r9
    847e:	af 92       	push	r10
    8480:	bf 92       	push	r11
    8482:	cf 92       	push	r12
    8484:	df 92       	push	r13
    8486:	ef 92       	push	r14
    8488:	ff 92       	push	r15
    848a:	0f 93       	push	r16
    848c:	1f 93       	push	r17
    848e:	cf 93       	push	r28
    8490:	df 93       	push	r29
    8492:	cd b7       	in	r28, 0x3d	; 61
    8494:	de b7       	in	r29, 0x3e	; 62
    8496:	65 97       	sbiw	r28, 0x15	; 21
    8498:	cd bf       	out	0x3d, r28	; 61
    849a:	de bf       	out	0x3e, r29	; 62
    849c:	8f b7       	in	r24, 0x3f	; 63
    849e:	89 83       	std	Y+1, r24	; 0x01
    84a0:	f8 94       	cli
    84a2:	89 81       	ldd	r24, Y+1	; 0x01
    84a4:	20 90 55 27 	lds	r2, 0x2755	; 0x802755 <g_twi1_gyro_1_gyro_x_mdps>
    84a8:	30 90 56 27 	lds	r3, 0x2756	; 0x802756 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    84ac:	40 90 57 27 	lds	r4, 0x2757	; 0x802757 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    84b0:	50 90 58 27 	lds	r5, 0x2758	; 0x802758 <g_twi1_gyro_1_gyro_x_mdps+0x3>
    84b4:	c0 90 51 27 	lds	r12, 0x2751	; 0x802751 <g_twi1_gyro_1_gyro_y_mdps>
    84b8:	d0 90 52 27 	lds	r13, 0x2752	; 0x802752 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    84bc:	e0 90 53 27 	lds	r14, 0x2753	; 0x802753 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    84c0:	f0 90 54 27 	lds	r15, 0x2754	; 0x802754 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    84c4:	20 91 4d 27 	lds	r18, 0x274D	; 0x80274d <g_twi1_gyro_1_gyro_z_mdps>
    84c8:	30 91 4e 27 	lds	r19, 0x274E	; 0x80274e <g_twi1_gyro_1_gyro_z_mdps+0x1>
    84cc:	40 91 4f 27 	lds	r20, 0x274F	; 0x80274f <g_twi1_gyro_1_gyro_z_mdps+0x2>
    84d0:	50 91 50 27 	lds	r21, 0x2750	; 0x802750 <g_twi1_gyro_1_gyro_z_mdps+0x3>
    84d4:	2a 8b       	std	Y+18, r18	; 0x12
    84d6:	3b 8b       	std	Y+19, r19	; 0x13
    84d8:	4c 8b       	std	Y+20, r20	; 0x14
    84da:	5d 8b       	std	Y+21, r21	; 0x15
    84dc:	8f bf       	out	0x3f, r24	; 63
    84de:	80 91 f1 22 	lds	r24, 0x22F1	; 0x8022f1 <s_twi1_gyro_1_gyro_x_mdps.8236>
    84e2:	90 91 f2 22 	lds	r25, 0x22F2	; 0x8022f2 <s_twi1_gyro_1_gyro_x_mdps.8236+0x1>
    84e6:	a0 91 f3 22 	lds	r26, 0x22F3	; 0x8022f3 <s_twi1_gyro_1_gyro_x_mdps.8236+0x2>
    84ea:	b0 91 f4 22 	lds	r27, 0x22F4	; 0x8022f4 <s_twi1_gyro_1_gyro_x_mdps.8236+0x3>
    84ee:	28 16       	cp	r2, r24
    84f0:	39 06       	cpc	r3, r25
    84f2:	4a 06       	cpc	r4, r26
    84f4:	5b 06       	cpc	r5, r27
    84f6:	d9 f4       	brne	.+54     	; 0x852e <task_twi2_lcd__gyro_gfxgyro+0xc0>
    84f8:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <s_twi1_gyro_1_gyro_y_mdps.8237>
    84fc:	90 91 ee 22 	lds	r25, 0x22EE	; 0x8022ee <s_twi1_gyro_1_gyro_y_mdps.8237+0x1>
    8500:	a0 91 ef 22 	lds	r26, 0x22EF	; 0x8022ef <s_twi1_gyro_1_gyro_y_mdps.8237+0x2>
    8504:	b0 91 f0 22 	lds	r27, 0x22F0	; 0x8022f0 <s_twi1_gyro_1_gyro_y_mdps.8237+0x3>
    8508:	c8 16       	cp	r12, r24
    850a:	d9 06       	cpc	r13, r25
    850c:	ea 06       	cpc	r14, r26
    850e:	fb 06       	cpc	r15, r27
    8510:	71 f4       	brne	.+28     	; 0x852e <task_twi2_lcd__gyro_gfxgyro+0xc0>
    8512:	80 91 e9 22 	lds	r24, 0x22E9	; 0x8022e9 <s_twi1_gyro_1_gyro_z_mdps.8238>
    8516:	90 91 ea 22 	lds	r25, 0x22EA	; 0x8022ea <s_twi1_gyro_1_gyro_z_mdps.8238+0x1>
    851a:	a0 91 eb 22 	lds	r26, 0x22EB	; 0x8022eb <s_twi1_gyro_1_gyro_z_mdps.8238+0x2>
    851e:	b0 91 ec 22 	lds	r27, 0x22EC	; 0x8022ec <s_twi1_gyro_1_gyro_z_mdps.8238+0x3>
    8522:	28 17       	cp	r18, r24
    8524:	39 07       	cpc	r19, r25
    8526:	4a 07       	cpc	r20, r26
    8528:	5b 07       	cpc	r21, r27
    852a:	09 f4       	brne	.+2      	; 0x852e <task_twi2_lcd__gyro_gfxgyro+0xc0>
    852c:	b7 c1       	rjmp	.+878    	; 0x889c <task_twi2_lcd__gyro_gfxgyro+0x42e>
    852e:	20 92 f1 22 	sts	0x22F1, r2	; 0x8022f1 <s_twi1_gyro_1_gyro_x_mdps.8236>
    8532:	30 92 f2 22 	sts	0x22F2, r3	; 0x8022f2 <s_twi1_gyro_1_gyro_x_mdps.8236+0x1>
    8536:	40 92 f3 22 	sts	0x22F3, r4	; 0x8022f3 <s_twi1_gyro_1_gyro_x_mdps.8236+0x2>
    853a:	50 92 f4 22 	sts	0x22F4, r5	; 0x8022f4 <s_twi1_gyro_1_gyro_x_mdps.8236+0x3>
    853e:	c0 92 ed 22 	sts	0x22ED, r12	; 0x8022ed <s_twi1_gyro_1_gyro_y_mdps.8237>
    8542:	d0 92 ee 22 	sts	0x22EE, r13	; 0x8022ee <s_twi1_gyro_1_gyro_y_mdps.8237+0x1>
    8546:	e0 92 ef 22 	sts	0x22EF, r14	; 0x8022ef <s_twi1_gyro_1_gyro_y_mdps.8237+0x2>
    854a:	f0 92 f0 22 	sts	0x22F0, r15	; 0x8022f0 <s_twi1_gyro_1_gyro_y_mdps.8237+0x3>
    854e:	8a 89       	ldd	r24, Y+18	; 0x12
    8550:	9b 89       	ldd	r25, Y+19	; 0x13
    8552:	ac 89       	ldd	r26, Y+20	; 0x14
    8554:	bd 89       	ldd	r27, Y+21	; 0x15
    8556:	80 93 e9 22 	sts	0x22E9, r24	; 0x8022e9 <s_twi1_gyro_1_gyro_z_mdps.8238>
    855a:	90 93 ea 22 	sts	0x22EA, r25	; 0x8022ea <s_twi1_gyro_1_gyro_z_mdps.8238+0x1>
    855e:	a0 93 eb 22 	sts	0x22EB, r26	; 0x8022eb <s_twi1_gyro_1_gyro_z_mdps.8238+0x2>
    8562:	b0 93 ec 22 	sts	0x22EC, r27	; 0x8022ec <s_twi1_gyro_1_gyro_z_mdps.8238+0x3>
    8566:	c2 01       	movw	r24, r4
    8568:	b1 01       	movw	r22, r2
    856a:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    856e:	2b ed       	ldi	r18, 0xDB	; 219
    8570:	3f e0       	ldi	r19, 0x0F	; 15
    8572:	49 e4       	ldi	r20, 0x49	; 73
    8574:	50 e4       	ldi	r21, 0x40	; 64
    8576:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    857a:	20 e0       	ldi	r18, 0x00	; 0
    857c:	38 ec       	ldi	r19, 0xC8	; 200
    857e:	4f e2       	ldi	r20, 0x2F	; 47
    8580:	58 e4       	ldi	r21, 0x48	; 72
    8582:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    8586:	6e 83       	std	Y+6, r22	; 0x06
    8588:	7f 83       	std	Y+7, r23	; 0x07
    858a:	88 87       	std	Y+8, r24	; 0x08
    858c:	99 87       	std	Y+9, r25	; 0x09
    858e:	c7 01       	movw	r24, r14
    8590:	b6 01       	movw	r22, r12
    8592:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    8596:	2b ed       	ldi	r18, 0xDB	; 219
    8598:	3f e0       	ldi	r19, 0x0F	; 15
    859a:	49 e4       	ldi	r20, 0x49	; 73
    859c:	50 e4       	ldi	r21, 0x40	; 64
    859e:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    85a2:	20 e0       	ldi	r18, 0x00	; 0
    85a4:	38 ec       	ldi	r19, 0xC8	; 200
    85a6:	4f e2       	ldi	r20, 0x2F	; 47
    85a8:	58 e4       	ldi	r21, 0x48	; 72
    85aa:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    85ae:	6a 87       	std	Y+10, r22	; 0x0a
    85b0:	7b 87       	std	Y+11, r23	; 0x0b
    85b2:	8c 87       	std	Y+12, r24	; 0x0c
    85b4:	9d 87       	std	Y+13, r25	; 0x0d
    85b6:	6a 89       	ldd	r22, Y+18	; 0x12
    85b8:	7b 89       	ldd	r23, Y+19	; 0x13
    85ba:	8c 89       	ldd	r24, Y+20	; 0x14
    85bc:	9d 89       	ldd	r25, Y+21	; 0x15
    85be:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    85c2:	2b ed       	ldi	r18, 0xDB	; 219
    85c4:	3f e0       	ldi	r19, 0x0F	; 15
    85c6:	49 e4       	ldi	r20, 0x49	; 73
    85c8:	50 e4       	ldi	r21, 0x40	; 64
    85ca:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    85ce:	20 e0       	ldi	r18, 0x00	; 0
    85d0:	38 ec       	ldi	r19, 0xC8	; 200
    85d2:	4f e2       	ldi	r20, 0x2F	; 47
    85d4:	58 e4       	ldi	r21, 0x48	; 72
    85d6:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    85da:	6e 87       	std	Y+14, r22	; 0x0e
    85dc:	7f 87       	std	Y+15, r23	; 0x0f
    85de:	88 8b       	std	Y+16, r24	; 0x10
    85e0:	99 8b       	std	Y+17, r25	; 0x11
    85e2:	80 90 e5 22 	lds	r8, 0x22E5	; 0x8022e5 <s_rads_x.8233>
    85e6:	90 90 e6 22 	lds	r9, 0x22E6	; 0x8022e6 <s_rads_x.8233+0x1>
    85ea:	a0 90 e7 22 	lds	r10, 0x22E7	; 0x8022e7 <s_rads_x.8233+0x2>
    85ee:	b0 90 e8 22 	lds	r11, 0x22E8	; 0x8022e8 <s_rads_x.8233+0x3>
    85f2:	c5 01       	movw	r24, r10
    85f4:	b4 01       	movw	r22, r8
    85f6:	0e 94 cc 7d 	call	0xfb98	; 0xfb98 <cos>
    85fa:	6a 83       	std	Y+2, r22	; 0x02
    85fc:	7b 83       	std	Y+3, r23	; 0x03
    85fe:	8c 83       	std	Y+4, r24	; 0x04
    8600:	9d 83       	std	Y+5, r25	; 0x05
    8602:	c5 01       	movw	r24, r10
    8604:	b4 01       	movw	r22, r8
    8606:	0e 94 06 80 	call	0x1000c	; 0x1000c <sin>
    860a:	4b 01       	movw	r8, r22
    860c:	5c 01       	movw	r10, r24
    860e:	20 e0       	ldi	r18, 0x00	; 0
    8610:	30 e0       	ldi	r19, 0x00	; 0
    8612:	40 e4       	ldi	r20, 0x40	; 64
    8614:	51 e4       	ldi	r21, 0x41	; 65
    8616:	6a 81       	ldd	r22, Y+2	; 0x02
    8618:	7b 81       	ldd	r23, Y+3	; 0x03
    861a:	8c 81       	ldd	r24, Y+4	; 0x04
    861c:	9d 81       	ldd	r25, Y+5	; 0x05
    861e:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    8622:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    8626:	14 e6       	ldi	r17, 0x64	; 100
    8628:	71 2e       	mov	r7, r17
    862a:	76 1a       	sub	r7, r22
    862c:	20 e0       	ldi	r18, 0x00	; 0
    862e:	30 e0       	ldi	r19, 0x00	; 0
    8630:	40 e4       	ldi	r20, 0x40	; 64
    8632:	51 e4       	ldi	r21, 0x41	; 65
    8634:	c5 01       	movw	r24, r10
    8636:	b4 01       	movw	r22, r8
    8638:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    863c:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    8640:	46 e9       	ldi	r20, 0x96	; 150
    8642:	46 1b       	sub	r20, r22
    8644:	00 e0       	ldi	r16, 0x00	; 0
    8646:	27 2d       	mov	r18, r7
    8648:	64 e6       	ldi	r22, 0x64	; 100
    864a:	86 e9       	ldi	r24, 0x96	; 150
    864c:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    8650:	80 90 e1 22 	lds	r8, 0x22E1	; 0x8022e1 <s_rads_y.8234>
    8654:	90 90 e2 22 	lds	r9, 0x22E2	; 0x8022e2 <s_rads_y.8234+0x1>
    8658:	a0 90 e3 22 	lds	r10, 0x22E3	; 0x8022e3 <s_rads_y.8234+0x2>
    865c:	b0 90 e4 22 	lds	r11, 0x22E4	; 0x8022e4 <s_rads_y.8234+0x3>
    8660:	c5 01       	movw	r24, r10
    8662:	b4 01       	movw	r22, r8
    8664:	0e 94 cc 7d 	call	0xfb98	; 0xfb98 <cos>
    8668:	6a 83       	std	Y+2, r22	; 0x02
    866a:	7b 83       	std	Y+3, r23	; 0x03
    866c:	8c 83       	std	Y+4, r24	; 0x04
    866e:	9d 83       	std	Y+5, r25	; 0x05
    8670:	c5 01       	movw	r24, r10
    8672:	b4 01       	movw	r22, r8
    8674:	0e 94 06 80 	call	0x1000c	; 0x1000c <sin>
    8678:	4b 01       	movw	r8, r22
    867a:	5c 01       	movw	r10, r24
    867c:	20 e0       	ldi	r18, 0x00	; 0
    867e:	30 e0       	ldi	r19, 0x00	; 0
    8680:	40 e4       	ldi	r20, 0x40	; 64
    8682:	51 e4       	ldi	r21, 0x41	; 65
    8684:	6a 81       	ldd	r22, Y+2	; 0x02
    8686:	7b 81       	ldd	r23, Y+3	; 0x03
    8688:	8c 81       	ldd	r24, Y+4	; 0x04
    868a:	9d 81       	ldd	r25, Y+5	; 0x05
    868c:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    8690:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    8694:	71 2e       	mov	r7, r17
    8696:	76 1a       	sub	r7, r22
    8698:	20 e0       	ldi	r18, 0x00	; 0
    869a:	30 e0       	ldi	r19, 0x00	; 0
    869c:	40 e4       	ldi	r20, 0x40	; 64
    869e:	51 e4       	ldi	r21, 0x41	; 65
    86a0:	c5 01       	movw	r24, r10
    86a2:	b4 01       	movw	r22, r8
    86a4:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    86a8:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    86ac:	44 eb       	ldi	r20, 0xB4	; 180
    86ae:	46 0f       	add	r20, r22
    86b0:	27 2d       	mov	r18, r7
    86b2:	64 e6       	ldi	r22, 0x64	; 100
    86b4:	84 eb       	ldi	r24, 0xB4	; 180
    86b6:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    86ba:	80 90 dd 22 	lds	r8, 0x22DD	; 0x8022dd <s_rads_z.8235>
    86be:	90 90 de 22 	lds	r9, 0x22DE	; 0x8022de <s_rads_z.8235+0x1>
    86c2:	a0 90 df 22 	lds	r10, 0x22DF	; 0x8022df <s_rads_z.8235+0x2>
    86c6:	b0 90 e0 22 	lds	r11, 0x22E0	; 0x8022e0 <s_rads_z.8235+0x3>
    86ca:	c5 01       	movw	r24, r10
    86cc:	b4 01       	movw	r22, r8
    86ce:	0e 94 cc 7d 	call	0xfb98	; 0xfb98 <cos>
    86d2:	6a 83       	std	Y+2, r22	; 0x02
    86d4:	7b 83       	std	Y+3, r23	; 0x03
    86d6:	8c 83       	std	Y+4, r24	; 0x04
    86d8:	9d 83       	std	Y+5, r25	; 0x05
    86da:	c5 01       	movw	r24, r10
    86dc:	b4 01       	movw	r22, r8
    86de:	0e 94 06 80 	call	0x1000c	; 0x1000c <sin>
    86e2:	4b 01       	movw	r8, r22
    86e4:	5c 01       	movw	r10, r24
    86e6:	20 e0       	ldi	r18, 0x00	; 0
    86e8:	30 e0       	ldi	r19, 0x00	; 0
    86ea:	40 e4       	ldi	r20, 0x40	; 64
    86ec:	51 e4       	ldi	r21, 0x41	; 65
    86ee:	6a 81       	ldd	r22, Y+2	; 0x02
    86f0:	7b 81       	ldd	r23, Y+3	; 0x03
    86f2:	8c 81       	ldd	r24, Y+4	; 0x04
    86f4:	9d 81       	ldd	r25, Y+5	; 0x05
    86f6:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    86fa:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    86fe:	71 2e       	mov	r7, r17
    8700:	76 1a       	sub	r7, r22
    8702:	20 e0       	ldi	r18, 0x00	; 0
    8704:	30 e0       	ldi	r19, 0x00	; 0
    8706:	40 e4       	ldi	r20, 0x40	; 64
    8708:	51 e4       	ldi	r21, 0x41	; 65
    870a:	c5 01       	movw	r24, r10
    870c:	b4 01       	movw	r22, r8
    870e:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    8712:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    8716:	0f 2e       	mov	r0, r31
    8718:	f2 ed       	ldi	r31, 0xD2	; 210
    871a:	6f 2e       	mov	r6, r31
    871c:	f0 2d       	mov	r31, r0
    871e:	46 2d       	mov	r20, r6
    8720:	46 1b       	sub	r20, r22
    8722:	27 2d       	mov	r18, r7
    8724:	64 e6       	ldi	r22, 0x64	; 100
    8726:	82 ed       	ldi	r24, 0xD2	; 210
    8728:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    872c:	6e 81       	ldd	r22, Y+6	; 0x06
    872e:	7f 81       	ldd	r23, Y+7	; 0x07
    8730:	88 85       	ldd	r24, Y+8	; 0x08
    8732:	99 85       	ldd	r25, Y+9	; 0x09
    8734:	0e 94 cc 7d 	call	0xfb98	; 0xfb98 <cos>
    8738:	6a 83       	std	Y+2, r22	; 0x02
    873a:	7b 83       	std	Y+3, r23	; 0x03
    873c:	8c 83       	std	Y+4, r24	; 0x04
    873e:	9d 83       	std	Y+5, r25	; 0x05
    8740:	6e 81       	ldd	r22, Y+6	; 0x06
    8742:	7f 81       	ldd	r23, Y+7	; 0x07
    8744:	88 85       	ldd	r24, Y+8	; 0x08
    8746:	99 85       	ldd	r25, Y+9	; 0x09
    8748:	0e 94 06 80 	call	0x1000c	; 0x1000c <sin>
    874c:	4b 01       	movw	r8, r22
    874e:	5c 01       	movw	r10, r24
    8750:	20 e0       	ldi	r18, 0x00	; 0
    8752:	30 e0       	ldi	r19, 0x00	; 0
    8754:	40 e4       	ldi	r20, 0x40	; 64
    8756:	51 e4       	ldi	r21, 0x41	; 65
    8758:	6a 81       	ldd	r22, Y+2	; 0x02
    875a:	7b 81       	ldd	r23, Y+3	; 0x03
    875c:	8c 81       	ldd	r24, Y+4	; 0x04
    875e:	9d 81       	ldd	r25, Y+5	; 0x05
    8760:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    8764:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    8768:	71 2e       	mov	r7, r17
    876a:	76 1a       	sub	r7, r22
    876c:	20 e0       	ldi	r18, 0x00	; 0
    876e:	30 e0       	ldi	r19, 0x00	; 0
    8770:	40 e4       	ldi	r20, 0x40	; 64
    8772:	51 e4       	ldi	r21, 0x41	; 65
    8774:	c5 01       	movw	r24, r10
    8776:	b4 01       	movw	r22, r8
    8778:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    877c:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    8780:	46 e9       	ldi	r20, 0x96	; 150
    8782:	46 1b       	sub	r20, r22
    8784:	01 e0       	ldi	r16, 0x01	; 1
    8786:	27 2d       	mov	r18, r7
    8788:	64 e6       	ldi	r22, 0x64	; 100
    878a:	86 e9       	ldi	r24, 0x96	; 150
    878c:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    8790:	6a 85       	ldd	r22, Y+10	; 0x0a
    8792:	7b 85       	ldd	r23, Y+11	; 0x0b
    8794:	8c 85       	ldd	r24, Y+12	; 0x0c
    8796:	9d 85       	ldd	r25, Y+13	; 0x0d
    8798:	0e 94 cc 7d 	call	0xfb98	; 0xfb98 <cos>
    879c:	6a 83       	std	Y+2, r22	; 0x02
    879e:	7b 83       	std	Y+3, r23	; 0x03
    87a0:	8c 83       	std	Y+4, r24	; 0x04
    87a2:	9d 83       	std	Y+5, r25	; 0x05
    87a4:	6a 85       	ldd	r22, Y+10	; 0x0a
    87a6:	7b 85       	ldd	r23, Y+11	; 0x0b
    87a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    87aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    87ac:	0e 94 06 80 	call	0x1000c	; 0x1000c <sin>
    87b0:	4b 01       	movw	r8, r22
    87b2:	5c 01       	movw	r10, r24
    87b4:	20 e0       	ldi	r18, 0x00	; 0
    87b6:	30 e0       	ldi	r19, 0x00	; 0
    87b8:	40 e4       	ldi	r20, 0x40	; 64
    87ba:	51 e4       	ldi	r21, 0x41	; 65
    87bc:	6a 81       	ldd	r22, Y+2	; 0x02
    87be:	7b 81       	ldd	r23, Y+3	; 0x03
    87c0:	8c 81       	ldd	r24, Y+4	; 0x04
    87c2:	9d 81       	ldd	r25, Y+5	; 0x05
    87c4:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    87c8:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    87cc:	71 2e       	mov	r7, r17
    87ce:	76 1a       	sub	r7, r22
    87d0:	20 e0       	ldi	r18, 0x00	; 0
    87d2:	30 e0       	ldi	r19, 0x00	; 0
    87d4:	40 e4       	ldi	r20, 0x40	; 64
    87d6:	51 e4       	ldi	r21, 0x41	; 65
    87d8:	c5 01       	movw	r24, r10
    87da:	b4 01       	movw	r22, r8
    87dc:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    87e0:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    87e4:	44 eb       	ldi	r20, 0xB4	; 180
    87e6:	46 0f       	add	r20, r22
    87e8:	27 2d       	mov	r18, r7
    87ea:	64 e6       	ldi	r22, 0x64	; 100
    87ec:	84 eb       	ldi	r24, 0xB4	; 180
    87ee:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    87f2:	6e 85       	ldd	r22, Y+14	; 0x0e
    87f4:	7f 85       	ldd	r23, Y+15	; 0x0f
    87f6:	88 89       	ldd	r24, Y+16	; 0x10
    87f8:	99 89       	ldd	r25, Y+17	; 0x11
    87fa:	0e 94 cc 7d 	call	0xfb98	; 0xfb98 <cos>
    87fe:	6a 83       	std	Y+2, r22	; 0x02
    8800:	7b 83       	std	Y+3, r23	; 0x03
    8802:	8c 83       	std	Y+4, r24	; 0x04
    8804:	9d 83       	std	Y+5, r25	; 0x05
    8806:	6e 85       	ldd	r22, Y+14	; 0x0e
    8808:	7f 85       	ldd	r23, Y+15	; 0x0f
    880a:	88 89       	ldd	r24, Y+16	; 0x10
    880c:	99 89       	ldd	r25, Y+17	; 0x11
    880e:	0e 94 06 80 	call	0x1000c	; 0x1000c <sin>
    8812:	4b 01       	movw	r8, r22
    8814:	5c 01       	movw	r10, r24
    8816:	20 e0       	ldi	r18, 0x00	; 0
    8818:	30 e0       	ldi	r19, 0x00	; 0
    881a:	40 e4       	ldi	r20, 0x40	; 64
    881c:	51 e4       	ldi	r21, 0x41	; 65
    881e:	6a 81       	ldd	r22, Y+2	; 0x02
    8820:	7b 81       	ldd	r23, Y+3	; 0x03
    8822:	8c 81       	ldd	r24, Y+4	; 0x04
    8824:	9d 81       	ldd	r25, Y+5	; 0x05
    8826:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    882a:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    882e:	71 2e       	mov	r7, r17
    8830:	76 1a       	sub	r7, r22
    8832:	20 e0       	ldi	r18, 0x00	; 0
    8834:	30 e0       	ldi	r19, 0x00	; 0
    8836:	40 e4       	ldi	r20, 0x40	; 64
    8838:	51 e4       	ldi	r21, 0x41	; 65
    883a:	c5 01       	movw	r24, r10
    883c:	b4 01       	movw	r22, r8
    883e:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    8842:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    8846:	46 2d       	mov	r20, r6
    8848:	46 1b       	sub	r20, r22
    884a:	27 2d       	mov	r18, r7
    884c:	64 e6       	ldi	r22, 0x64	; 100
    884e:	82 ed       	ldi	r24, 0xD2	; 210
    8850:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <task_twi2_lcd_line>
    8854:	2e 81       	ldd	r18, Y+6	; 0x06
    8856:	3f 81       	ldd	r19, Y+7	; 0x07
    8858:	48 85       	ldd	r20, Y+8	; 0x08
    885a:	59 85       	ldd	r21, Y+9	; 0x09
    885c:	20 93 e5 22 	sts	0x22E5, r18	; 0x8022e5 <s_rads_x.8233>
    8860:	30 93 e6 22 	sts	0x22E6, r19	; 0x8022e6 <s_rads_x.8233+0x1>
    8864:	40 93 e7 22 	sts	0x22E7, r20	; 0x8022e7 <s_rads_x.8233+0x2>
    8868:	50 93 e8 22 	sts	0x22E8, r21	; 0x8022e8 <s_rads_x.8233+0x3>
    886c:	8a 85       	ldd	r24, Y+10	; 0x0a
    886e:	9b 85       	ldd	r25, Y+11	; 0x0b
    8870:	ac 85       	ldd	r26, Y+12	; 0x0c
    8872:	bd 85       	ldd	r27, Y+13	; 0x0d
    8874:	80 93 e1 22 	sts	0x22E1, r24	; 0x8022e1 <s_rads_y.8234>
    8878:	90 93 e2 22 	sts	0x22E2, r25	; 0x8022e2 <s_rads_y.8234+0x1>
    887c:	a0 93 e3 22 	sts	0x22E3, r26	; 0x8022e3 <s_rads_y.8234+0x2>
    8880:	b0 93 e4 22 	sts	0x22E4, r27	; 0x8022e4 <s_rads_y.8234+0x3>
    8884:	2e 85       	ldd	r18, Y+14	; 0x0e
    8886:	3f 85       	ldd	r19, Y+15	; 0x0f
    8888:	48 89       	ldd	r20, Y+16	; 0x10
    888a:	59 89       	ldd	r21, Y+17	; 0x11
    888c:	20 93 dd 22 	sts	0x22DD, r18	; 0x8022dd <s_rads_z.8235>
    8890:	30 93 de 22 	sts	0x22DE, r19	; 0x8022de <s_rads_z.8235+0x1>
    8894:	40 93 df 22 	sts	0x22DF, r20	; 0x8022df <s_rads_z.8235+0x2>
    8898:	50 93 e0 22 	sts	0x22E0, r21	; 0x8022e0 <s_rads_z.8235+0x3>
    889c:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <g_pitch_tone_mode>
    88a0:	81 30       	cpi	r24, 0x01	; 1
    88a2:	81 f5       	brne	.+96     	; 0x8904 <task_twi2_lcd__gyro_gfxgyro+0x496>
    88a4:	d2 01       	movw	r26, r4
    88a6:	c1 01       	movw	r24, r2
    88a8:	8c 0d       	add	r24, r12
    88aa:	9d 1d       	adc	r25, r13
    88ac:	ae 1d       	adc	r26, r14
    88ae:	bf 1d       	adc	r27, r15
    88b0:	2a 89       	ldd	r18, Y+18	; 0x12
    88b2:	3b 89       	ldd	r19, Y+19	; 0x13
    88b4:	4c 89       	ldd	r20, Y+20	; 0x14
    88b6:	5d 89       	ldd	r21, Y+21	; 0x15
    88b8:	82 0f       	add	r24, r18
    88ba:	93 1f       	adc	r25, r19
    88bc:	a4 1f       	adc	r26, r20
    88be:	b5 1f       	adc	r27, r21
    88c0:	ac 01       	movw	r20, r24
    88c2:	bd 01       	movw	r22, r26
    88c4:	bb 23       	and	r27, r27
    88c6:	3c f4       	brge	.+14     	; 0x88d6 <task_twi2_lcd__gyro_gfxgyro+0x468>
    88c8:	44 27       	eor	r20, r20
    88ca:	55 27       	eor	r21, r21
    88cc:	ba 01       	movw	r22, r20
    88ce:	48 1b       	sub	r20, r24
    88d0:	59 0b       	sbc	r21, r25
    88d2:	6a 0b       	sbc	r22, r26
    88d4:	7b 0b       	sbc	r23, r27
    88d6:	cb 01       	movw	r24, r22
    88d8:	ba 01       	movw	r22, r20
    88da:	61 39       	cpi	r22, 0x91	; 145
    88dc:	31 e0       	ldi	r19, 0x01	; 1
    88de:	73 07       	cpc	r23, r19
    88e0:	81 05       	cpc	r24, r1
    88e2:	91 05       	cpc	r25, r1
    88e4:	7c f0       	brlt	.+30     	; 0x8904 <task_twi2_lcd__gyro_gfxgyro+0x496>
    88e6:	2c eb       	ldi	r18, 0xBC	; 188
    88e8:	32 e0       	ldi	r19, 0x02	; 2
    88ea:	40 e0       	ldi	r20, 0x00	; 0
    88ec:	50 e0       	ldi	r21, 0x00	; 0
    88ee:	0e 94 8e 81 	call	0x1031c	; 0x1031c <__divmodsi4>
    88f2:	6a e0       	ldi	r22, 0x0A	; 10
    88f4:	82 e1       	ldi	r24, 0x12	; 18
    88f6:	82 0f       	add	r24, r18
    88f8:	0e 94 45 34 	call	0x688a	; 0x688a <twi2_set_beep>
    88fc:	8d e7       	ldi	r24, 0x7D	; 125
    88fe:	90 e0       	ldi	r25, 0x00	; 0
    8900:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
    8904:	65 96       	adiw	r28, 0x15	; 21
    8906:	cd bf       	out	0x3d, r28	; 61
    8908:	de bf       	out	0x3e, r29	; 62
    890a:	df 91       	pop	r29
    890c:	cf 91       	pop	r28
    890e:	1f 91       	pop	r17
    8910:	0f 91       	pop	r16
    8912:	ff 90       	pop	r15
    8914:	ef 90       	pop	r14
    8916:	df 90       	pop	r13
    8918:	cf 90       	pop	r12
    891a:	bf 90       	pop	r11
    891c:	af 90       	pop	r10
    891e:	9f 90       	pop	r9
    8920:	8f 90       	pop	r8
    8922:	7f 90       	pop	r7
    8924:	6f 90       	pop	r6
    8926:	5f 90       	pop	r5
    8928:	4f 90       	pop	r4
    892a:	3f 90       	pop	r3
    892c:	2f 90       	pop	r2
    892e:	08 95       	ret

00008930 <task_twi2_lcd__gyro_beepvario>:
    8930:	cf 92       	push	r12
    8932:	df 92       	push	r13
    8934:	ef 92       	push	r14
    8936:	ff 92       	push	r15
    8938:	cf 93       	push	r28
    893a:	df 93       	push	r29
    893c:	1f 92       	push	r1
    893e:	cd b7       	in	r28, 0x3d	; 61
    8940:	de b7       	in	r29, 0x3e	; 62
    8942:	8f b7       	in	r24, 0x3f	; 63
    8944:	89 83       	std	Y+1, r24	; 0x01
    8946:	f8 94       	cli
    8948:	89 81       	ldd	r24, Y+1	; 0x01
    894a:	c0 90 14 27 	lds	r12, 0x2714	; 0x802714 <g_twi1_baro_p_100>
    894e:	d0 90 15 27 	lds	r13, 0x2715	; 0x802715 <g_twi1_baro_p_100+0x1>
    8952:	e0 90 16 27 	lds	r14, 0x2716	; 0x802716 <g_twi1_baro_p_100+0x2>
    8956:	f0 90 17 27 	lds	r15, 0x2717	; 0x802717 <g_twi1_baro_p_100+0x3>
    895a:	8f bf       	out	0x3f, r24	; 63
    895c:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <g_pitch_tone_mode>
    8960:	82 30       	cpi	r24, 0x02	; 2
    8962:	99 f5       	brne	.+102    	; 0x89ca <task_twi2_lcd__gyro_beepvario+0x9a>
    8964:	40 91 14 27 	lds	r20, 0x2714	; 0x802714 <g_twi1_baro_p_100>
    8968:	50 91 15 27 	lds	r21, 0x2715	; 0x802715 <g_twi1_baro_p_100+0x1>
    896c:	60 91 16 27 	lds	r22, 0x2716	; 0x802716 <g_twi1_baro_p_100+0x2>
    8970:	70 91 17 27 	lds	r23, 0x2717	; 0x802717 <g_twi1_baro_p_100+0x3>
    8974:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_twi1_baro_p_100.8250>
    8978:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <s_twi1_baro_p_100.8250+0x1>
    897c:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <s_twi1_baro_p_100.8250+0x2>
    8980:	b0 91 09 20 	lds	r27, 0x2009	; 0x802009 <s_twi1_baro_p_100.8250+0x3>
    8984:	84 1b       	sub	r24, r20
    8986:	95 0b       	sbc	r25, r21
    8988:	a6 0b       	sbc	r26, r22
    898a:	b7 0b       	sbc	r27, r23
    898c:	8c 59       	subi	r24, 0x9C	; 156
    898e:	9f 4f       	sbci	r25, 0xFF	; 255
    8990:	af 4f       	sbci	r26, 0xFF	; 255
    8992:	bf 4f       	sbci	r27, 0xFF	; 255
    8994:	8a 30       	cpi	r24, 0x0A	; 10
    8996:	91 05       	cpc	r25, r1
    8998:	a1 05       	cpc	r26, r1
    899a:	b1 05       	cpc	r27, r1
    899c:	58 f0       	brcs	.+22     	; 0x89b4 <task_twi2_lcd__gyro_beepvario+0x84>
    899e:	8f 3f       	cpi	r24, 0xFF	; 255
    89a0:	91 05       	cpc	r25, r1
    89a2:	a1 05       	cpc	r26, r1
    89a4:	b1 05       	cpc	r27, r1
    89a6:	51 f0       	breq	.+20     	; 0x89bc <task_twi2_lcd__gyro_beepvario+0x8c>
    89a8:	48 f0       	brcs	.+18     	; 0x89bc <task_twi2_lcd__gyro_beepvario+0x8c>
    89aa:	8f ef       	ldi	r24, 0xFF	; 255
    89ac:	90 e0       	ldi	r25, 0x00	; 0
    89ae:	a0 e0       	ldi	r26, 0x00	; 0
    89b0:	b0 e0       	ldi	r27, 0x00	; 0
    89b2:	04 c0       	rjmp	.+8      	; 0x89bc <task_twi2_lcd__gyro_beepvario+0x8c>
    89b4:	8a e0       	ldi	r24, 0x0A	; 10
    89b6:	90 e0       	ldi	r25, 0x00	; 0
    89b8:	a0 e0       	ldi	r26, 0x00	; 0
    89ba:	b0 e0       	ldi	r27, 0x00	; 0
    89bc:	6a e0       	ldi	r22, 0x0A	; 10
    89be:	0e 94 45 34 	call	0x688a	; 0x688a <twi2_set_beep>
    89c2:	8d e7       	ldi	r24, 0x7D	; 125
    89c4:	90 e0       	ldi	r25, 0x00	; 0
    89c6:	0e 94 a4 6c 	call	0xd948	; 0xd948 <yield_ms>
    89ca:	c0 92 06 20 	sts	0x2006, r12	; 0x802006 <s_twi1_baro_p_100.8250>
    89ce:	d0 92 07 20 	sts	0x2007, r13	; 0x802007 <s_twi1_baro_p_100.8250+0x1>
    89d2:	e0 92 08 20 	sts	0x2008, r14	; 0x802008 <s_twi1_baro_p_100.8250+0x2>
    89d6:	f0 92 09 20 	sts	0x2009, r15	; 0x802009 <s_twi1_baro_p_100.8250+0x3>
    89da:	0f 90       	pop	r0
    89dc:	df 91       	pop	r29
    89de:	cf 91       	pop	r28
    89e0:	ff 90       	pop	r15
    89e2:	ef 90       	pop	r14
    89e4:	df 90       	pop	r13
    89e6:	cf 90       	pop	r12
    89e8:	08 95       	ret

000089ea <task_twi2_lcd__baro>:
    89ea:	bf 92       	push	r11
    89ec:	cf 92       	push	r12
    89ee:	df 92       	push	r13
    89f0:	ef 92       	push	r14
    89f2:	ff 92       	push	r15
    89f4:	0f 93       	push	r16
    89f6:	1f 93       	push	r17
    89f8:	cf 93       	push	r28
    89fa:	df 93       	push	r29
    89fc:	1f 92       	push	r1
    89fe:	cd b7       	in	r28, 0x3d	; 61
    8a00:	de b7       	in	r29, 0x3e	; 62
    8a02:	b8 2e       	mov	r11, r24
    8a04:	8f b7       	in	r24, 0x3f	; 63
    8a06:	89 83       	std	Y+1, r24	; 0x01
    8a08:	f8 94       	cli
    8a0a:	29 81       	ldd	r18, Y+1	; 0x01
    8a0c:	60 91 18 27 	lds	r22, 0x2718	; 0x802718 <g_twi1_baro_temp_100>
    8a10:	70 91 19 27 	lds	r23, 0x2719	; 0x802719 <g_twi1_baro_temp_100+0x1>
    8a14:	80 91 1a 27 	lds	r24, 0x271A	; 0x80271a <g_twi1_baro_temp_100+0x2>
    8a18:	90 91 1b 27 	lds	r25, 0x271B	; 0x80271b <g_twi1_baro_temp_100+0x3>
    8a1c:	c0 90 14 27 	lds	r12, 0x2714	; 0x802714 <g_twi1_baro_p_100>
    8a20:	d0 90 15 27 	lds	r13, 0x2715	; 0x802715 <g_twi1_baro_p_100+0x1>
    8a24:	e0 90 16 27 	lds	r14, 0x2716	; 0x802716 <g_twi1_baro_p_100+0x2>
    8a28:	f0 90 17 27 	lds	r15, 0x2717	; 0x802717 <g_twi1_baro_p_100+0x3>
    8a2c:	2f bf       	out	0x3f, r18	; 63
    8a2e:	00 91 d9 22 	lds	r16, 0x22D9	; 0x8022d9 <s_twi1_baro_temp_100.8261>
    8a32:	10 91 da 22 	lds	r17, 0x22DA	; 0x8022da <s_twi1_baro_temp_100.8261+0x1>
    8a36:	20 91 db 22 	lds	r18, 0x22DB	; 0x8022db <s_twi1_baro_temp_100.8261+0x2>
    8a3a:	30 91 dc 22 	lds	r19, 0x22DC	; 0x8022dc <s_twi1_baro_temp_100.8261+0x3>
    8a3e:	60 17       	cp	r22, r16
    8a40:	71 07       	cpc	r23, r17
    8a42:	82 07       	cpc	r24, r18
    8a44:	93 07       	cpc	r25, r19
    8a46:	c1 f0       	breq	.+48     	; 0x8a78 <task_twi2_lcd__baro+0x8e>
    8a48:	60 93 d9 22 	sts	0x22D9, r22	; 0x8022d9 <s_twi1_baro_temp_100.8261>
    8a4c:	70 93 da 22 	sts	0x22DA, r23	; 0x8022da <s_twi1_baro_temp_100.8261+0x1>
    8a50:	80 93 db 22 	sts	0x22DB, r24	; 0x8022db <s_twi1_baro_temp_100.8261+0x2>
    8a54:	90 93 dc 22 	sts	0x22DC, r25	; 0x8022dc <s_twi1_baro_temp_100.8261+0x3>
    8a58:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    8a5c:	20 e0       	ldi	r18, 0x00	; 0
    8a5e:	30 e0       	ldi	r19, 0x00	; 0
    8a60:	48 ec       	ldi	r20, 0xC8	; 200
    8a62:	52 e4       	ldi	r21, 0x42	; 66
    8a64:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    8a68:	9b 01       	movw	r18, r22
    8a6a:	ac 01       	movw	r20, r24
    8a6c:	03 ef       	ldi	r16, 0xF3	; 243
    8a6e:	10 e3       	ldi	r17, 0x30	; 48
    8a70:	6a e5       	ldi	r22, 0x5A	; 90
    8a72:	8b 2d       	mov	r24, r11
    8a74:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <task_twi2_lcd_print_format_float_P>
    8a78:	80 91 d5 22 	lds	r24, 0x22D5	; 0x8022d5 <s_twi1_baro_p_100.8262>
    8a7c:	90 91 d6 22 	lds	r25, 0x22D6	; 0x8022d6 <s_twi1_baro_p_100.8262+0x1>
    8a80:	a0 91 d7 22 	lds	r26, 0x22D7	; 0x8022d7 <s_twi1_baro_p_100.8262+0x2>
    8a84:	b0 91 d8 22 	lds	r27, 0x22D8	; 0x8022d8 <s_twi1_baro_p_100.8262+0x3>
    8a88:	c8 16       	cp	r12, r24
    8a8a:	d9 06       	cpc	r13, r25
    8a8c:	ea 06       	cpc	r14, r26
    8a8e:	fb 06       	cpc	r15, r27
    8a90:	d1 f0       	breq	.+52     	; 0x8ac6 <task_twi2_lcd__baro+0xdc>
    8a92:	c0 92 d5 22 	sts	0x22D5, r12	; 0x8022d5 <s_twi1_baro_p_100.8262>
    8a96:	d0 92 d6 22 	sts	0x22D6, r13	; 0x8022d6 <s_twi1_baro_p_100.8262+0x1>
    8a9a:	e0 92 d7 22 	sts	0x22D7, r14	; 0x8022d7 <s_twi1_baro_p_100.8262+0x2>
    8a9e:	f0 92 d8 22 	sts	0x22D8, r15	; 0x8022d8 <s_twi1_baro_p_100.8262+0x3>
    8aa2:	c7 01       	movw	r24, r14
    8aa4:	b6 01       	movw	r22, r12
    8aa6:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <__floatsisf>
    8aaa:	20 e0       	ldi	r18, 0x00	; 0
    8aac:	30 e0       	ldi	r19, 0x00	; 0
    8aae:	48 ec       	ldi	r20, 0xC8	; 200
    8ab0:	52 e4       	ldi	r21, 0x42	; 66
    8ab2:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    8ab6:	9b 01       	movw	r18, r22
    8ab8:	ac 01       	movw	r20, r24
    8aba:	0c ee       	ldi	r16, 0xEC	; 236
    8abc:	10 e3       	ldi	r17, 0x30	; 48
    8abe:	64 e6       	ldi	r22, 0x64	; 100
    8ac0:	8b 2d       	mov	r24, r11
    8ac2:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <task_twi2_lcd_print_format_float_P>
    8ac6:	0f 90       	pop	r0
    8ac8:	df 91       	pop	r29
    8aca:	cf 91       	pop	r28
    8acc:	1f 91       	pop	r17
    8ace:	0f 91       	pop	r16
    8ad0:	ff 90       	pop	r15
    8ad2:	ef 90       	pop	r14
    8ad4:	df 90       	pop	r13
    8ad6:	cf 90       	pop	r12
    8ad8:	bf 90       	pop	r11
    8ada:	08 95       	ret

00008adc <task_twi>:
    8adc:	cf 92       	push	r12
    8ade:	df 92       	push	r13
    8ae0:	ef 92       	push	r14
    8ae2:	0f 93       	push	r16
    8ae4:	cf 93       	push	r28
    8ae6:	df 93       	push	r29
    8ae8:	1f 92       	push	r1
    8aea:	cd b7       	in	r28, 0x3d	; 61
    8aec:	de b7       	in	r29, 0x3e	; 62
    8aee:	80 91 09 27 	lds	r24, 0x2709	; 0x802709 <g_twi2_lcd_version>
    8af2:	81 31       	cpi	r24, 0x11	; 17
    8af4:	08 f4       	brcc	.+2      	; 0x8af8 <task_twi+0x1c>
    8af6:	68 c1       	rjmp	.+720    	; 0x8dc8 <task_twi+0x2ec>
    8af8:	80 91 08 27 	lds	r24, 0x2708	; 0x802708 <g_twi2_lcd_repaint>
    8afc:	88 23       	and	r24, r24
    8afe:	09 f4       	brne	.+2      	; 0x8b02 <task_twi+0x26>
    8b00:	b5 c0       	rjmp	.+362    	; 0x8c6c <task_twi+0x190>
    8b02:	10 92 08 27 	sts	0x2708, r1	; 0x802708 <g_twi2_lcd_repaint>
    8b06:	0e 94 6a 37 	call	0x6ed4	; 0x6ed4 <task_twi2_lcd_header>
    8b0a:	80 91 63 20 	lds	r24, 0x2063	; 0x802063 <g_adc_enabled>
    8b0e:	88 23       	and	r24, r24
    8b10:	21 f1       	breq	.+72     	; 0x8b5a <task_twi+0x7e>
    8b12:	4a e4       	ldi	r20, 0x4A	; 74
    8b14:	51 e2       	ldi	r21, 0x21	; 33
    8b16:	64 e1       	ldi	r22, 0x14	; 20
    8b18:	80 e0       	ldi	r24, 0x00	; 0
    8b1a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8b1e:	44 e5       	ldi	r20, 0x54	; 84
    8b20:	51 e2       	ldi	r21, 0x21	; 33
    8b22:	6e e1       	ldi	r22, 0x1E	; 30
    8b24:	82 e1       	ldi	r24, 0x12	; 18
    8b26:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8b2a:	4b e5       	ldi	r20, 0x5B	; 91
    8b2c:	51 e2       	ldi	r21, 0x21	; 33
    8b2e:	68 e2       	ldi	r22, 0x28	; 40
    8b30:	82 e1       	ldi	r24, 0x12	; 18
    8b32:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8b36:	42 e6       	ldi	r20, 0x62	; 98
    8b38:	51 e2       	ldi	r21, 0x21	; 33
    8b3a:	62 e3       	ldi	r22, 0x32	; 50
    8b3c:	80 e0       	ldi	r24, 0x00	; 0
    8b3e:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8b42:	4c e6       	ldi	r20, 0x6C	; 108
    8b44:	51 e2       	ldi	r21, 0x21	; 33
    8b46:	6c e3       	ldi	r22, 0x3C	; 60
    8b48:	80 e0       	ldi	r24, 0x00	; 0
    8b4a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8b4e:	46 e7       	ldi	r20, 0x76	; 118
    8b50:	51 e2       	ldi	r21, 0x21	; 33
    8b52:	66 e4       	ldi	r22, 0x46	; 70
    8b54:	80 e0       	ldi	r24, 0x00	; 0
    8b56:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8b5a:	40 e8       	ldi	r20, 0x80	; 128
    8b5c:	51 e2       	ldi	r21, 0x21	; 33
    8b5e:	6a e5       	ldi	r22, 0x5A	; 90
    8b60:	80 e0       	ldi	r24, 0x00	; 0
    8b62:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8b66:	4a e8       	ldi	r20, 0x8A	; 138
    8b68:	51 e2       	ldi	r21, 0x21	; 33
    8b6a:	64 e6       	ldi	r22, 0x64	; 100
    8b6c:	80 e0       	ldi	r24, 0x00	; 0
    8b6e:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8b72:	44 e9       	ldi	r20, 0x94	; 148
    8b74:	51 e2       	ldi	r21, 0x21	; 33
    8b76:	6e e6       	ldi	r22, 0x6E	; 110
    8b78:	80 e0       	ldi	r24, 0x00	; 0
    8b7a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8b7e:	4e e9       	ldi	r20, 0x9E	; 158
    8b80:	51 e2       	ldi	r21, 0x21	; 33
    8b82:	68 e7       	ldi	r22, 0x78	; 120
    8b84:	80 e0       	ldi	r24, 0x00	; 0
    8b86:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8b8a:	80 91 63 20 	lds	r24, 0x2063	; 0x802063 <g_adc_enabled>
    8b8e:	88 23       	and	r24, r24
    8b90:	21 f1       	breq	.+72     	; 0x8bda <task_twi+0xfe>
    8b92:	48 ea       	ldi	r20, 0xA8	; 168
    8b94:	51 e2       	ldi	r21, 0x21	; 33
    8b96:	64 e1       	ldi	r22, 0x14	; 20
    8b98:	80 e6       	ldi	r24, 0x60	; 96
    8b9a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8b9e:	4a ea       	ldi	r20, 0xAA	; 170
    8ba0:	51 e2       	ldi	r21, 0x21	; 33
    8ba2:	6e e1       	ldi	r22, 0x1E	; 30
    8ba4:	80 e6       	ldi	r24, 0x60	; 96
    8ba6:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8baa:	4a ea       	ldi	r20, 0xAA	; 170
    8bac:	51 e2       	ldi	r21, 0x21	; 33
    8bae:	68 e2       	ldi	r22, 0x28	; 40
    8bb0:	80 e6       	ldi	r24, 0x60	; 96
    8bb2:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8bb6:	4a ea       	ldi	r20, 0xAA	; 170
    8bb8:	51 e2       	ldi	r21, 0x21	; 33
    8bba:	62 e3       	ldi	r22, 0x32	; 50
    8bbc:	80 e6       	ldi	r24, 0x60	; 96
    8bbe:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8bc2:	4a ea       	ldi	r20, 0xAA	; 170
    8bc4:	51 e2       	ldi	r21, 0x21	; 33
    8bc6:	6c e3       	ldi	r22, 0x3C	; 60
    8bc8:	80 e6       	ldi	r24, 0x60	; 96
    8bca:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8bce:	4a ea       	ldi	r20, 0xAA	; 170
    8bd0:	51 e2       	ldi	r21, 0x21	; 33
    8bd2:	66 e4       	ldi	r22, 0x46	; 70
    8bd4:	80 e6       	ldi	r24, 0x60	; 96
    8bd6:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8bda:	48 ea       	ldi	r20, 0xA8	; 168
    8bdc:	51 e2       	ldi	r21, 0x21	; 33
    8bde:	6a e5       	ldi	r22, 0x5A	; 90
    8be0:	80 e6       	ldi	r24, 0x60	; 96
    8be2:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8be6:	4c ea       	ldi	r20, 0xAC	; 172
    8be8:	51 e2       	ldi	r21, 0x21	; 33
    8bea:	64 e6       	ldi	r22, 0x64	; 100
    8bec:	8c e6       	ldi	r24, 0x6C	; 108
    8bee:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8bf2:	48 ea       	ldi	r20, 0xA8	; 168
    8bf4:	51 e2       	ldi	r21, 0x21	; 33
    8bf6:	6e e6       	ldi	r22, 0x6E	; 110
    8bf8:	80 e6       	ldi	r24, 0x60	; 96
    8bfa:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8bfe:	40 eb       	ldi	r20, 0xB0	; 176
    8c00:	51 e2       	ldi	r21, 0x21	; 33
    8c02:	68 e7       	ldi	r22, 0x78	; 120
    8c04:	80 e6       	ldi	r24, 0x60	; 96
    8c06:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8c0a:	01 e0       	ldi	r16, 0x01	; 1
    8c0c:	20 e0       	ldi	r18, 0x00	; 0
    8c0e:	4e e0       	ldi	r20, 0x0E	; 14
    8c10:	64 e6       	ldi	r22, 0x64	; 100
    8c12:	86 e9       	ldi	r24, 0x96	; 150
    8c14:	0e 94 42 37 	call	0x6e84	; 0x6e84 <task_twi2_lcd_circ>
    8c18:	20 e0       	ldi	r18, 0x00	; 0
    8c1a:	4e e0       	ldi	r20, 0x0E	; 14
    8c1c:	64 e6       	ldi	r22, 0x64	; 100
    8c1e:	84 eb       	ldi	r24, 0xB4	; 180
    8c20:	0e 94 42 37 	call	0x6e84	; 0x6e84 <task_twi2_lcd_circ>
    8c24:	20 e0       	ldi	r18, 0x00	; 0
    8c26:	4e e0       	ldi	r20, 0x0E	; 14
    8c28:	64 e6       	ldi	r22, 0x64	; 100
    8c2a:	82 ed       	ldi	r24, 0xD2	; 210
    8c2c:	0e 94 42 37 	call	0x6e84	; 0x6e84 <task_twi2_lcd_circ>
    8c30:	42 eb       	ldi	r20, 0xB2	; 178
    8c32:	51 e2       	ldi	r21, 0x21	; 33
    8c34:	66 e7       	ldi	r22, 0x76	; 118
    8c36:	82 e9       	ldi	r24, 0x92	; 146
    8c38:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8c3c:	45 eb       	ldi	r20, 0xB5	; 181
    8c3e:	51 e2       	ldi	r21, 0x21	; 33
    8c40:	66 e7       	ldi	r22, 0x76	; 118
    8c42:	80 eb       	ldi	r24, 0xB0	; 176
    8c44:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8c48:	48 eb       	ldi	r20, 0xB8	; 184
    8c4a:	51 e2       	ldi	r21, 0x21	; 33
    8c4c:	66 e7       	ldi	r22, 0x76	; 118
    8c4e:	8e ec       	ldi	r24, 0xCE	; 206
    8c50:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8c54:	4b eb       	ldi	r20, 0xBB	; 187
    8c56:	51 e2       	ldi	r21, 0x21	; 33
    8c58:	68 e4       	ldi	r22, 0x48	; 72
    8c5a:	81 e7       	ldi	r24, 0x71	; 113
    8c5c:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8c60:	45 ec       	ldi	r20, 0xC5	; 197
    8c62:	51 e2       	ldi	r21, 0x21	; 33
    8c64:	68 e4       	ldi	r22, 0x48	; 72
    8c66:	84 ec       	ldi	r24, 0xC4	; 196
    8c68:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <task_twi2_lcd_str>
    8c6c:	fd d8       	rcall	.-3590   	; 0x7e68 <task_twi2_lcd__gyro_gfxmag>
    8c6e:	0d db       	rcall	.-2534   	; 0x828a <task_twi2_lcd__gyro_gfxaccel>
    8c70:	fe db       	rcall	.-2052   	; 0x846e <task_twi2_lcd__gyro_gfxgyro>
    8c72:	5e de       	rcall	.-836    	; 0x8930 <task_twi2_lcd__gyro_beepvario>
    8c74:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <g_1pps_last_new>
    8c78:	88 23       	and	r24, r24
    8c7a:	09 f4       	brne	.+2      	; 0x8c7e <task_twi+0x1a2>
    8c7c:	5e c0       	rjmp	.+188    	; 0x8d3a <task_twi+0x25e>
    8c7e:	8f b7       	in	r24, 0x3f	; 63
    8c80:	89 83       	std	Y+1, r24	; 0x01
    8c82:	f8 94       	cli
    8c84:	89 81       	ldd	r24, Y+1	; 0x01
    8c86:	c0 90 8c 28 	lds	r12, 0x288C	; 0x80288c <g_1pps_last_lo>
    8c8a:	d0 90 8d 28 	lds	r13, 0x288D	; 0x80288d <g_1pps_last_lo+0x1>
    8c8e:	10 92 83 28 	sts	0x2883, r1	; 0x802883 <g_1pps_last_new>
    8c92:	8f bf       	out	0x3f, r24	; 63
    8c94:	81 e0       	ldi	r24, 0x01	; 1
    8c96:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <twi2_set_leds>
    8c9a:	e1 2c       	mov	r14, r1
    8c9c:	01 e0       	ldi	r16, 0x01	; 1
    8c9e:	23 e7       	ldi	r18, 0x73	; 115
    8ca0:	43 e0       	ldi	r20, 0x03	; 3
    8ca2:	6d e0       	ldi	r22, 0x0D	; 13
    8ca4:	8d ee       	ldi	r24, 0xED	; 237
    8ca6:	0e 94 14 37 	call	0x6e28	; 0x6e28 <task_twi2_lcd_rect>
    8caa:	96 01       	movw	r18, r12
    8cac:	a1 e7       	ldi	r26, 0x71	; 113
    8cae:	bf e1       	ldi	r27, 0x1F	; 31
    8cb0:	0e 94 b8 81 	call	0x10370	; 0x10370 <__umulhisi3>
    8cb4:	28 1b       	sub	r18, r24
    8cb6:	39 0b       	sbc	r19, r25
    8cb8:	36 95       	lsr	r19
    8cba:	27 95       	ror	r18
    8cbc:	82 0f       	add	r24, r18
    8cbe:	93 1f       	adc	r25, r19
    8cc0:	96 95       	lsr	r25
    8cc2:	87 95       	ror	r24
    8cc4:	92 95       	swap	r25
    8cc6:	82 95       	swap	r24
    8cc8:	8f 70       	andi	r24, 0x0F	; 15
    8cca:	89 27       	eor	r24, r25
    8ccc:	9f 70       	andi	r25, 0x0F	; 15
    8cce:	89 27       	eor	r24, r25
    8cd0:	49 e3       	ldi	r20, 0x39	; 57
    8cd2:	48 9f       	mul	r20, r24
    8cd4:	90 01       	movw	r18, r0
    8cd6:	49 9f       	mul	r20, r25
    8cd8:	30 0d       	add	r19, r0
    8cda:	11 24       	eor	r1, r1
    8cdc:	c6 01       	movw	r24, r12
    8cde:	82 1b       	sub	r24, r18
    8ce0:	93 0b       	sbc	r25, r19
    8ce2:	4c 97       	sbiw	r24, 0x1c	; 28
    8ce4:	a8 f4       	brcc	.+42     	; 0x8d10 <task_twi+0x234>
    8ce6:	b6 01       	movw	r22, r12
    8ce8:	80 e0       	ldi	r24, 0x00	; 0
    8cea:	90 e0       	ldi	r25, 0x00	; 0
    8cec:	29 e3       	ldi	r18, 0x39	; 57
    8cee:	30 e0       	ldi	r19, 0x00	; 0
    8cf0:	40 e0       	ldi	r20, 0x00	; 0
    8cf2:	50 e0       	ldi	r21, 0x00	; 0
    8cf4:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>
    8cf8:	26 2f       	mov	r18, r22
    8cfa:	86 e4       	ldi	r24, 0x46	; 70
    8cfc:	68 2f       	mov	r22, r24
    8cfe:	62 1b       	sub	r22, r18
    8d00:	ee 24       	eor	r14, r14
    8d02:	e3 94       	inc	r14
    8d04:	00 e0       	ldi	r16, 0x00	; 0
    8d06:	43 e0       	ldi	r20, 0x03	; 3
    8d08:	8d ee       	ldi	r24, 0xED	; 237
    8d0a:	0e 94 14 37 	call	0x6e28	; 0x6e28 <task_twi2_lcd_rect>
    8d0e:	15 c0       	rjmp	.+42     	; 0x8d3a <task_twi+0x25e>
    8d10:	60 e3       	ldi	r22, 0x30	; 48
    8d12:	75 e7       	ldi	r23, 0x75	; 117
    8d14:	6c 19       	sub	r22, r12
    8d16:	7d 09       	sbc	r23, r13
    8d18:	80 e0       	ldi	r24, 0x00	; 0
    8d1a:	90 e0       	ldi	r25, 0x00	; 0
    8d1c:	29 e3       	ldi	r18, 0x39	; 57
    8d1e:	30 e0       	ldi	r19, 0x00	; 0
    8d20:	40 e0       	ldi	r20, 0x00	; 0
    8d22:	50 e0       	ldi	r21, 0x00	; 0
    8d24:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>
    8d28:	26 2f       	mov	r18, r22
    8d2a:	ee 24       	eor	r14, r14
    8d2c:	e3 94       	inc	r14
    8d2e:	00 e0       	ldi	r16, 0x00	; 0
    8d30:	43 e0       	ldi	r20, 0x03	; 3
    8d32:	66 e4       	ldi	r22, 0x46	; 70
    8d34:	8d ee       	ldi	r24, 0xED	; 237
    8d36:	0e 94 14 37 	call	0x6e28	; 0x6e28 <task_twi2_lcd_rect>
    8d3a:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <s_lcd_entry_state.8269>
    8d3e:	82 30       	cpi	r24, 0x02	; 2
    8d40:	29 f1       	breq	.+74     	; 0x8d8c <task_twi+0x2b0>
    8d42:	28 f4       	brcc	.+10     	; 0x8d4e <task_twi+0x272>
    8d44:	88 23       	and	r24, r24
    8d46:	41 f0       	breq	.+16     	; 0x8d58 <task_twi+0x27c>
    8d48:	81 30       	cpi	r24, 0x01	; 1
    8d4a:	99 f0       	breq	.+38     	; 0x8d72 <task_twi+0x296>
    8d4c:	3a c0       	rjmp	.+116    	; 0x8dc2 <task_twi+0x2e6>
    8d4e:	83 30       	cpi	r24, 0x03	; 3
    8d50:	51 f1       	breq	.+84     	; 0x8da6 <task_twi+0x2ca>
    8d52:	84 30       	cpi	r24, 0x04	; 4
    8d54:	81 f1       	breq	.+96     	; 0x8db6 <task_twi+0x2da>
    8d56:	35 c0       	rjmp	.+106    	; 0x8dc2 <task_twi+0x2e6>
    8d58:	80 91 63 20 	lds	r24, 0x2063	; 0x802063 <g_adc_enabled>
    8d5c:	88 23       	and	r24, r24
    8d5e:	19 f0       	breq	.+6      	; 0x8d66 <task_twi+0x28a>
    8d60:	8c e3       	ldi	r24, 0x3C	; 60
    8d62:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <task_twi2_lcd__cpu1>
    8d66:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <s_lcd_entry_state.8269>
    8d6a:	8f 5f       	subi	r24, 0xFF	; 255
    8d6c:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <s_lcd_entry_state.8269>
    8d70:	4a c0       	rjmp	.+148    	; 0x8e06 <task_twi+0x32a>
    8d72:	80 91 63 20 	lds	r24, 0x2063	; 0x802063 <g_adc_enabled>
    8d76:	88 23       	and	r24, r24
    8d78:	19 f0       	breq	.+6      	; 0x8d80 <task_twi+0x2a4>
    8d7a:	8c e3       	ldi	r24, 0x3C	; 60
    8d7c:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <task_twi2_lcd__cpu2>
    8d80:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <s_lcd_entry_state.8269>
    8d84:	8f 5f       	subi	r24, 0xFF	; 255
    8d86:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <s_lcd_entry_state.8269>
    8d8a:	3d c0       	rjmp	.+122    	; 0x8e06 <task_twi+0x32a>
    8d8c:	80 91 63 20 	lds	r24, 0x2063	; 0x802063 <g_adc_enabled>
    8d90:	88 23       	and	r24, r24
    8d92:	19 f0       	breq	.+6      	; 0x8d9a <task_twi+0x2be>
    8d94:	8c e3       	ldi	r24, 0x3C	; 60
    8d96:	0e 94 76 3e 	call	0x7cec	; 0x7cec <task_twi2_lcd__cpu3>
    8d9a:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <s_lcd_entry_state.8269>
    8d9e:	8f 5f       	subi	r24, 0xFF	; 255
    8da0:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <s_lcd_entry_state.8269>
    8da4:	30 c0       	rjmp	.+96     	; 0x8e06 <task_twi+0x32a>
    8da6:	8c e3       	ldi	r24, 0x3C	; 60
    8da8:	20 de       	rcall	.-960    	; 0x89ea <task_twi2_lcd__baro>
    8daa:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <s_lcd_entry_state.8269>
    8dae:	8f 5f       	subi	r24, 0xFF	; 255
    8db0:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <s_lcd_entry_state.8269>
    8db4:	28 c0       	rjmp	.+80     	; 0x8e06 <task_twi+0x32a>
    8db6:	8c e3       	ldi	r24, 0x3C	; 60
    8db8:	0e 94 d5 3e 	call	0x7daa	; 0x7daa <task_twi2_lcd__hygro>
    8dbc:	10 92 d4 22 	sts	0x22D4, r1	; 0x8022d4 <s_lcd_entry_state.8269>
    8dc0:	22 c0       	rjmp	.+68     	; 0x8e06 <task_twi+0x32a>
    8dc2:	10 92 d4 22 	sts	0x22D4, r1	; 0x8022d4 <s_lcd_entry_state.8269>
    8dc6:	1f c0       	rjmp	.+62     	; 0x8e06 <task_twi+0x32a>
    8dc8:	80 31       	cpi	r24, 0x10	; 16
    8dca:	e9 f4       	brne	.+58     	; 0x8e06 <task_twi+0x32a>
    8dcc:	0e 94 a7 33 	call	0x674e	; 0x674e <twi2_waitUntilReady>
    8dd0:	e7 e1       	ldi	r30, 0x17	; 23
    8dd2:	f0 e2       	ldi	r31, 0x20	; 32
    8dd4:	84 e8       	ldi	r24, 0x84	; 132
    8dd6:	81 83       	std	Z+1, r24	; 0x01
    8dd8:	ab e2       	ldi	r26, 0x2B	; 43
    8dda:	b5 e2       	ldi	r27, 0x25	; 37
    8ddc:	81 e0       	ldi	r24, 0x01	; 1
    8dde:	8c 93       	st	X, r24
    8de0:	80 e8       	ldi	r24, 0x80	; 128
    8de2:	11 96       	adiw	r26, 0x01	; 1
    8de4:	8c 93       	st	X, r24
    8de6:	82 e0       	ldi	r24, 0x02	; 2
    8de8:	90 e0       	ldi	r25, 0x00	; 0
    8dea:	80 87       	std	Z+8, r24	; 0x08
    8dec:	91 87       	std	Z+9, r25	; 0x09
    8dee:	40 e0       	ldi	r20, 0x00	; 0
    8df0:	bf 01       	movw	r22, r30
    8df2:	80 e8       	ldi	r24, 0x80	; 128
    8df4:	94 e0       	ldi	r25, 0x04	; 4
    8df6:	0e 94 91 53 	call	0xa722	; 0xa722 <twi_master_transfer>
    8dfa:	69 e8       	ldi	r22, 0x89	; 137
    8dfc:	73 e1       	ldi	r23, 0x13	; 19
    8dfe:	80 e0       	ldi	r24, 0x00	; 0
    8e00:	90 e0       	ldi	r25, 0x00	; 0
    8e02:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__portable_avr_delay_cycles>
    8e06:	80 e0       	ldi	r24, 0x00	; 0
    8e08:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <twi2_set_leds>
    8e0c:	0f 90       	pop	r0
    8e0e:	df 91       	pop	r29
    8e10:	cf 91       	pop	r28
    8e12:	0f 91       	pop	r16
    8e14:	ef 90       	pop	r14
    8e16:	df 90       	pop	r13
    8e18:	cf 90       	pop	r12
    8e1a:	08 95       	ret

00008e1c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    8e1c:	08 95       	ret

00008e1e <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    8e1e:	cf 93       	push	r28
    8e20:	df 93       	push	r29
    8e22:	1f 92       	push	r1
    8e24:	cd b7       	in	r28, 0x3d	; 61
    8e26:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8e28:	2f b7       	in	r18, 0x3f	; 63
    8e2a:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    8e2c:	f8 94       	cli
	return flags;
    8e2e:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    8e30:	28 2f       	mov	r18, r24
    8e32:	39 2f       	mov	r19, r25
    8e34:	21 15       	cp	r18, r1
    8e36:	82 e0       	ldi	r24, 0x02	; 2
    8e38:	38 07       	cpc	r19, r24
    8e3a:	29 f4       	brne	.+10     	; 0x8e46 <adc_set_callback+0x28>
		adca_callback = callback;
    8e3c:	60 93 df 2d 	sts	0x2DDF, r22	; 0x802ddf <adca_callback>
    8e40:	70 93 e0 2d 	sts	0x2DE0, r23	; 0x802de0 <adca_callback+0x1>
    8e44:	07 c0       	rjmp	.+14     	; 0x8e54 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    8e46:	20 34       	cpi	r18, 0x40	; 64
    8e48:	32 40       	sbci	r19, 0x02	; 2
    8e4a:	21 f4       	brne	.+8      	; 0x8e54 <adc_set_callback+0x36>
		adcb_callback = callback;
    8e4c:	60 93 dd 2d 	sts	0x2DDD, r22	; 0x802ddd <adcb_callback>
    8e50:	70 93 de 2d 	sts	0x2DDE, r23	; 0x802dde <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8e54:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    8e56:	0f 90       	pop	r0
    8e58:	df 91       	pop	r29
    8e5a:	cf 91       	pop	r28
    8e5c:	08 95       	ret

00008e5e <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    8e5e:	81 15       	cp	r24, r1
    8e60:	22 e0       	ldi	r18, 0x02	; 2
    8e62:	92 07       	cpc	r25, r18
    8e64:	69 f4       	brne	.+26     	; 0x8e80 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    8e66:	80 91 30 23 	lds	r24, 0x2330	; 0x802330 <adca_enable_count>
    8e6a:	91 e0       	ldi	r25, 0x01	; 1
    8e6c:	98 0f       	add	r25, r24
    8e6e:	90 93 30 23 	sts	0x2330, r25	; 0x802330 <adca_enable_count>
    8e72:	81 11       	cpse	r24, r1
    8e74:	14 c0       	rjmp	.+40     	; 0x8e9e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    8e76:	62 e0       	ldi	r22, 0x02	; 2
    8e78:	81 e0       	ldi	r24, 0x01	; 1
    8e7a:	0c 94 ae 6e 	jmp	0xdd5c	; 0xdd5c <sysclk_enable_module>
    8e7e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    8e80:	80 34       	cpi	r24, 0x40	; 64
    8e82:	92 40       	sbci	r25, 0x02	; 2
    8e84:	61 f4       	brne	.+24     	; 0x8e9e <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    8e86:	80 91 2f 23 	lds	r24, 0x232F	; 0x80232f <adcb_enable_count>
    8e8a:	91 e0       	ldi	r25, 0x01	; 1
    8e8c:	98 0f       	add	r25, r24
    8e8e:	90 93 2f 23 	sts	0x232F, r25	; 0x80232f <adcb_enable_count>
    8e92:	81 11       	cpse	r24, r1
    8e94:	04 c0       	rjmp	.+8      	; 0x8e9e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    8e96:	62 e0       	ldi	r22, 0x02	; 2
    8e98:	82 e0       	ldi	r24, 0x02	; 2
    8e9a:	0c 94 ae 6e 	jmp	0xdd5c	; 0xdd5c <sysclk_enable_module>
    8e9e:	08 95       	ret

00008ea0 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    8ea0:	81 15       	cp	r24, r1
    8ea2:	22 e0       	ldi	r18, 0x02	; 2
    8ea4:	92 07       	cpc	r25, r18
    8ea6:	61 f4       	brne	.+24     	; 0x8ec0 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    8ea8:	80 91 30 23 	lds	r24, 0x2330	; 0x802330 <adca_enable_count>
    8eac:	81 50       	subi	r24, 0x01	; 1
    8eae:	80 93 30 23 	sts	0x2330, r24	; 0x802330 <adca_enable_count>
    8eb2:	81 11       	cpse	r24, r1
    8eb4:	13 c0       	rjmp	.+38     	; 0x8edc <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    8eb6:	62 e0       	ldi	r22, 0x02	; 2
    8eb8:	81 e0       	ldi	r24, 0x01	; 1
    8eba:	0c 94 c4 6e 	jmp	0xdd88	; 0xdd88 <sysclk_disable_module>
    8ebe:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    8ec0:	80 34       	cpi	r24, 0x40	; 64
    8ec2:	92 40       	sbci	r25, 0x02	; 2
    8ec4:	59 f4       	brne	.+22     	; 0x8edc <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    8ec6:	80 91 2f 23 	lds	r24, 0x232F	; 0x80232f <adcb_enable_count>
    8eca:	81 50       	subi	r24, 0x01	; 1
    8ecc:	80 93 2f 23 	sts	0x232F, r24	; 0x80232f <adcb_enable_count>
    8ed0:	81 11       	cpse	r24, r1
    8ed2:	04 c0       	rjmp	.+8      	; 0x8edc <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    8ed4:	62 e0       	ldi	r22, 0x02	; 2
    8ed6:	82 e0       	ldi	r24, 0x02	; 2
    8ed8:	0c 94 c4 6e 	jmp	0xdd88	; 0xdd88 <sysclk_disable_module>
    8edc:	08 95       	ret

00008ede <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    8ede:	ef 92       	push	r14
    8ee0:	ff 92       	push	r15
    8ee2:	1f 93       	push	r17
    8ee4:	cf 93       	push	r28
    8ee6:	df 93       	push	r29
    8ee8:	1f 92       	push	r1
    8eea:	1f 92       	push	r1
    8eec:	cd b7       	in	r28, 0x3d	; 61
    8eee:	de b7       	in	r29, 0x3e	; 62
    8ef0:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8ef2:	8f b7       	in	r24, 0x3f	; 63
    8ef4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    8ef6:	f8 94       	cli
	return flags;
    8ef8:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    8efa:	c7 01       	movw	r24, r14
    8efc:	b0 df       	rcall	.-160    	; 0x8e5e <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    8efe:	f7 01       	movw	r30, r14
    8f00:	80 81       	ld	r24, Z
    8f02:	81 60       	ori	r24, 0x01	; 1
    8f04:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8f06:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    8f08:	80 91 78 2e 	lds	r24, 0x2E78	; 0x802e78 <sleepmgr_locks+0x1>
    8f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    8f0e:	09 f4       	brne	.+2      	; 0x8f12 <adc_enable+0x34>
    8f10:	ff cf       	rjmp	.-2      	; 0x8f10 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8f12:	8f b7       	in	r24, 0x3f	; 63
    8f14:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    8f16:	f8 94       	cli
	return flags;
    8f18:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    8f1a:	e7 e7       	ldi	r30, 0x77	; 119
    8f1c:	fe e2       	ldi	r31, 0x2E	; 46
    8f1e:	81 81       	ldd	r24, Z+1	; 0x01
    8f20:	8f 5f       	subi	r24, 0xFF	; 255
    8f22:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8f24:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    8f26:	0f 90       	pop	r0
    8f28:	0f 90       	pop	r0
    8f2a:	df 91       	pop	r29
    8f2c:	cf 91       	pop	r28
    8f2e:	1f 91       	pop	r17
    8f30:	ff 90       	pop	r15
    8f32:	ef 90       	pop	r14
    8f34:	08 95       	ret

00008f36 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
    8f36:	1f 93       	push	r17
    8f38:	cf 93       	push	r28
    8f3a:	df 93       	push	r29
    8f3c:	1f 92       	push	r1
    8f3e:	1f 92       	push	r1
    8f40:	cd b7       	in	r28, 0x3d	; 61
    8f42:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8f44:	2f b7       	in	r18, 0x3f	; 63
    8f46:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    8f48:	f8 94       	cli
	return flags;
    8f4a:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
    8f4c:	fc 01       	movw	r30, r24
    8f4e:	20 81       	ld	r18, Z
    8f50:	2e 7f       	andi	r18, 0xFE	; 254
	adc_disable_clock(adc);
    8f52:	20 83       	st	Z, r18
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8f54:	a5 df       	rcall	.-182    	; 0x8ea0 <adc_disable_clock>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    8f56:	1f bf       	out	0x3f, r17	; 63
    8f58:	80 91 78 2e 	lds	r24, 0x2E78	; 0x802e78 <sleepmgr_locks+0x1>
    8f5c:	81 11       	cpse	r24, r1
    8f5e:	01 c0       	rjmp	.+2      	; 0x8f62 <adc_disable+0x2c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8f60:	ff cf       	rjmp	.-2      	; 0x8f60 <adc_disable+0x2a>
    8f62:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    8f64:	8a 83       	std	Y+2, r24	; 0x02
	return flags;
    8f66:	f8 94       	cli
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    8f68:	9a 81       	ldd	r25, Y+2	; 0x02
    8f6a:	e7 e7       	ldi	r30, 0x77	; 119
    8f6c:	fe e2       	ldi	r31, 0x2E	; 46
    8f6e:	81 81       	ldd	r24, Z+1	; 0x01
    8f70:	81 50       	subi	r24, 0x01	; 1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8f72:	81 83       	std	Z+1, r24	; 0x01
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    8f74:	9f bf       	out	0x3f, r25	; 63
    8f76:	0f 90       	pop	r0
    8f78:	0f 90       	pop	r0
    8f7a:	df 91       	pop	r29
    8f7c:	cf 91       	pop	r28
    8f7e:	1f 91       	pop	r17
    8f80:	08 95       	ret

00008f82 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    8f82:	1f 92       	push	r1
    8f84:	0f 92       	push	r0
    8f86:	0f b6       	in	r0, 0x3f	; 63
    8f88:	0f 92       	push	r0
    8f8a:	11 24       	eor	r1, r1
    8f8c:	0b b6       	in	r0, 0x3b	; 59
    8f8e:	0f 92       	push	r0
    8f90:	2f 93       	push	r18
    8f92:	3f 93       	push	r19
    8f94:	4f 93       	push	r20
    8f96:	5f 93       	push	r21
    8f98:	6f 93       	push	r22
    8f9a:	7f 93       	push	r23
    8f9c:	8f 93       	push	r24
    8f9e:	9f 93       	push	r25
    8fa0:	af 93       	push	r26
    8fa2:	bf 93       	push	r27
    8fa4:	ef 93       	push	r30
    8fa6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    8fa8:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    8fac:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    8fb0:	e0 91 df 2d 	lds	r30, 0x2DDF	; 0x802ddf <adca_callback>
    8fb4:	f0 91 e0 2d 	lds	r31, 0x2DE0	; 0x802de0 <adca_callback+0x1>
    8fb8:	61 e0       	ldi	r22, 0x01	; 1
    8fba:	80 e0       	ldi	r24, 0x00	; 0
    8fbc:	92 e0       	ldi	r25, 0x02	; 2
    8fbe:	19 95       	eicall
}
    8fc0:	ff 91       	pop	r31
    8fc2:	ef 91       	pop	r30
    8fc4:	bf 91       	pop	r27
    8fc6:	af 91       	pop	r26
    8fc8:	9f 91       	pop	r25
    8fca:	8f 91       	pop	r24
    8fcc:	7f 91       	pop	r23
    8fce:	6f 91       	pop	r22
    8fd0:	5f 91       	pop	r21
    8fd2:	4f 91       	pop	r20
    8fd4:	3f 91       	pop	r19
    8fd6:	2f 91       	pop	r18
    8fd8:	0f 90       	pop	r0
    8fda:	0b be       	out	0x3b, r0	; 59
    8fdc:	0f 90       	pop	r0
    8fde:	0f be       	out	0x3f, r0	; 63
    8fe0:	0f 90       	pop	r0
    8fe2:	1f 90       	pop	r1
    8fe4:	18 95       	reti

00008fe6 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    8fe6:	1f 92       	push	r1
    8fe8:	0f 92       	push	r0
    8fea:	0f b6       	in	r0, 0x3f	; 63
    8fec:	0f 92       	push	r0
    8fee:	11 24       	eor	r1, r1
    8ff0:	0b b6       	in	r0, 0x3b	; 59
    8ff2:	0f 92       	push	r0
    8ff4:	2f 93       	push	r18
    8ff6:	3f 93       	push	r19
    8ff8:	4f 93       	push	r20
    8ffa:	5f 93       	push	r21
    8ffc:	6f 93       	push	r22
    8ffe:	7f 93       	push	r23
    9000:	8f 93       	push	r24
    9002:	9f 93       	push	r25
    9004:	af 93       	push	r26
    9006:	bf 93       	push	r27
    9008:	ef 93       	push	r30
    900a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    900c:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    9010:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    9014:	e0 91 df 2d 	lds	r30, 0x2DDF	; 0x802ddf <adca_callback>
    9018:	f0 91 e0 2d 	lds	r31, 0x2DE0	; 0x802de0 <adca_callback+0x1>
    901c:	62 e0       	ldi	r22, 0x02	; 2
    901e:	80 e0       	ldi	r24, 0x00	; 0
    9020:	92 e0       	ldi	r25, 0x02	; 2
    9022:	19 95       	eicall
}
    9024:	ff 91       	pop	r31
    9026:	ef 91       	pop	r30
    9028:	bf 91       	pop	r27
    902a:	af 91       	pop	r26
    902c:	9f 91       	pop	r25
    902e:	8f 91       	pop	r24
    9030:	7f 91       	pop	r23
    9032:	6f 91       	pop	r22
    9034:	5f 91       	pop	r21
    9036:	4f 91       	pop	r20
    9038:	3f 91       	pop	r19
    903a:	2f 91       	pop	r18
    903c:	0f 90       	pop	r0
    903e:	0b be       	out	0x3b, r0	; 59
    9040:	0f 90       	pop	r0
    9042:	0f be       	out	0x3f, r0	; 63
    9044:	0f 90       	pop	r0
    9046:	1f 90       	pop	r1
    9048:	18 95       	reti

0000904a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    904a:	1f 92       	push	r1
    904c:	0f 92       	push	r0
    904e:	0f b6       	in	r0, 0x3f	; 63
    9050:	0f 92       	push	r0
    9052:	11 24       	eor	r1, r1
    9054:	0b b6       	in	r0, 0x3b	; 59
    9056:	0f 92       	push	r0
    9058:	2f 93       	push	r18
    905a:	3f 93       	push	r19
    905c:	4f 93       	push	r20
    905e:	5f 93       	push	r21
    9060:	6f 93       	push	r22
    9062:	7f 93       	push	r23
    9064:	8f 93       	push	r24
    9066:	9f 93       	push	r25
    9068:	af 93       	push	r26
    906a:	bf 93       	push	r27
    906c:	ef 93       	push	r30
    906e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    9070:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    9074:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    9078:	e0 91 df 2d 	lds	r30, 0x2DDF	; 0x802ddf <adca_callback>
    907c:	f0 91 e0 2d 	lds	r31, 0x2DE0	; 0x802de0 <adca_callback+0x1>
    9080:	64 e0       	ldi	r22, 0x04	; 4
    9082:	80 e0       	ldi	r24, 0x00	; 0
    9084:	92 e0       	ldi	r25, 0x02	; 2
    9086:	19 95       	eicall
}
    9088:	ff 91       	pop	r31
    908a:	ef 91       	pop	r30
    908c:	bf 91       	pop	r27
    908e:	af 91       	pop	r26
    9090:	9f 91       	pop	r25
    9092:	8f 91       	pop	r24
    9094:	7f 91       	pop	r23
    9096:	6f 91       	pop	r22
    9098:	5f 91       	pop	r21
    909a:	4f 91       	pop	r20
    909c:	3f 91       	pop	r19
    909e:	2f 91       	pop	r18
    90a0:	0f 90       	pop	r0
    90a2:	0b be       	out	0x3b, r0	; 59
    90a4:	0f 90       	pop	r0
    90a6:	0f be       	out	0x3f, r0	; 63
    90a8:	0f 90       	pop	r0
    90aa:	1f 90       	pop	r1
    90ac:	18 95       	reti

000090ae <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    90ae:	1f 92       	push	r1
    90b0:	0f 92       	push	r0
    90b2:	0f b6       	in	r0, 0x3f	; 63
    90b4:	0f 92       	push	r0
    90b6:	11 24       	eor	r1, r1
    90b8:	0b b6       	in	r0, 0x3b	; 59
    90ba:	0f 92       	push	r0
    90bc:	2f 93       	push	r18
    90be:	3f 93       	push	r19
    90c0:	4f 93       	push	r20
    90c2:	5f 93       	push	r21
    90c4:	6f 93       	push	r22
    90c6:	7f 93       	push	r23
    90c8:	8f 93       	push	r24
    90ca:	9f 93       	push	r25
    90cc:	af 93       	push	r26
    90ce:	bf 93       	push	r27
    90d0:	ef 93       	push	r30
    90d2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    90d4:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    90d8:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    90dc:	e0 91 df 2d 	lds	r30, 0x2DDF	; 0x802ddf <adca_callback>
    90e0:	f0 91 e0 2d 	lds	r31, 0x2DE0	; 0x802de0 <adca_callback+0x1>
    90e4:	68 e0       	ldi	r22, 0x08	; 8
    90e6:	80 e0       	ldi	r24, 0x00	; 0
    90e8:	92 e0       	ldi	r25, 0x02	; 2
    90ea:	19 95       	eicall
}
    90ec:	ff 91       	pop	r31
    90ee:	ef 91       	pop	r30
    90f0:	bf 91       	pop	r27
    90f2:	af 91       	pop	r26
    90f4:	9f 91       	pop	r25
    90f6:	8f 91       	pop	r24
    90f8:	7f 91       	pop	r23
    90fa:	6f 91       	pop	r22
    90fc:	5f 91       	pop	r21
    90fe:	4f 91       	pop	r20
    9100:	3f 91       	pop	r19
    9102:	2f 91       	pop	r18
    9104:	0f 90       	pop	r0
    9106:	0b be       	out	0x3b, r0	; 59
    9108:	0f 90       	pop	r0
    910a:	0f be       	out	0x3f, r0	; 63
    910c:	0f 90       	pop	r0
    910e:	1f 90       	pop	r1
    9110:	18 95       	reti

00009112 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    9112:	1f 92       	push	r1
    9114:	0f 92       	push	r0
    9116:	0f b6       	in	r0, 0x3f	; 63
    9118:	0f 92       	push	r0
    911a:	11 24       	eor	r1, r1
    911c:	0b b6       	in	r0, 0x3b	; 59
    911e:	0f 92       	push	r0
    9120:	2f 93       	push	r18
    9122:	3f 93       	push	r19
    9124:	4f 93       	push	r20
    9126:	5f 93       	push	r21
    9128:	6f 93       	push	r22
    912a:	7f 93       	push	r23
    912c:	8f 93       	push	r24
    912e:	9f 93       	push	r25
    9130:	af 93       	push	r26
    9132:	bf 93       	push	r27
    9134:	ef 93       	push	r30
    9136:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    9138:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    913c:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    9140:	e0 91 dd 2d 	lds	r30, 0x2DDD	; 0x802ddd <adcb_callback>
    9144:	f0 91 de 2d 	lds	r31, 0x2DDE	; 0x802dde <adcb_callback+0x1>
    9148:	61 e0       	ldi	r22, 0x01	; 1
    914a:	80 e4       	ldi	r24, 0x40	; 64
    914c:	92 e0       	ldi	r25, 0x02	; 2
    914e:	19 95       	eicall
}
    9150:	ff 91       	pop	r31
    9152:	ef 91       	pop	r30
    9154:	bf 91       	pop	r27
    9156:	af 91       	pop	r26
    9158:	9f 91       	pop	r25
    915a:	8f 91       	pop	r24
    915c:	7f 91       	pop	r23
    915e:	6f 91       	pop	r22
    9160:	5f 91       	pop	r21
    9162:	4f 91       	pop	r20
    9164:	3f 91       	pop	r19
    9166:	2f 91       	pop	r18
    9168:	0f 90       	pop	r0
    916a:	0b be       	out	0x3b, r0	; 59
    916c:	0f 90       	pop	r0
    916e:	0f be       	out	0x3f, r0	; 63
    9170:	0f 90       	pop	r0
    9172:	1f 90       	pop	r1
    9174:	18 95       	reti

00009176 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    9176:	1f 92       	push	r1
    9178:	0f 92       	push	r0
    917a:	0f b6       	in	r0, 0x3f	; 63
    917c:	0f 92       	push	r0
    917e:	11 24       	eor	r1, r1
    9180:	0b b6       	in	r0, 0x3b	; 59
    9182:	0f 92       	push	r0
    9184:	2f 93       	push	r18
    9186:	3f 93       	push	r19
    9188:	4f 93       	push	r20
    918a:	5f 93       	push	r21
    918c:	6f 93       	push	r22
    918e:	7f 93       	push	r23
    9190:	8f 93       	push	r24
    9192:	9f 93       	push	r25
    9194:	af 93       	push	r26
    9196:	bf 93       	push	r27
    9198:	ef 93       	push	r30
    919a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    919c:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    91a0:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    91a4:	e0 91 dd 2d 	lds	r30, 0x2DDD	; 0x802ddd <adcb_callback>
    91a8:	f0 91 de 2d 	lds	r31, 0x2DDE	; 0x802dde <adcb_callback+0x1>
    91ac:	62 e0       	ldi	r22, 0x02	; 2
    91ae:	80 e4       	ldi	r24, 0x40	; 64
    91b0:	92 e0       	ldi	r25, 0x02	; 2
    91b2:	19 95       	eicall
}
    91b4:	ff 91       	pop	r31
    91b6:	ef 91       	pop	r30
    91b8:	bf 91       	pop	r27
    91ba:	af 91       	pop	r26
    91bc:	9f 91       	pop	r25
    91be:	8f 91       	pop	r24
    91c0:	7f 91       	pop	r23
    91c2:	6f 91       	pop	r22
    91c4:	5f 91       	pop	r21
    91c6:	4f 91       	pop	r20
    91c8:	3f 91       	pop	r19
    91ca:	2f 91       	pop	r18
    91cc:	0f 90       	pop	r0
    91ce:	0b be       	out	0x3b, r0	; 59
    91d0:	0f 90       	pop	r0
    91d2:	0f be       	out	0x3f, r0	; 63
    91d4:	0f 90       	pop	r0
    91d6:	1f 90       	pop	r1
    91d8:	18 95       	reti

000091da <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    91da:	1f 92       	push	r1
    91dc:	0f 92       	push	r0
    91de:	0f b6       	in	r0, 0x3f	; 63
    91e0:	0f 92       	push	r0
    91e2:	11 24       	eor	r1, r1
    91e4:	0b b6       	in	r0, 0x3b	; 59
    91e6:	0f 92       	push	r0
    91e8:	2f 93       	push	r18
    91ea:	3f 93       	push	r19
    91ec:	4f 93       	push	r20
    91ee:	5f 93       	push	r21
    91f0:	6f 93       	push	r22
    91f2:	7f 93       	push	r23
    91f4:	8f 93       	push	r24
    91f6:	9f 93       	push	r25
    91f8:	af 93       	push	r26
    91fa:	bf 93       	push	r27
    91fc:	ef 93       	push	r30
    91fe:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    9200:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    9204:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    9208:	e0 91 dd 2d 	lds	r30, 0x2DDD	; 0x802ddd <adcb_callback>
    920c:	f0 91 de 2d 	lds	r31, 0x2DDE	; 0x802dde <adcb_callback+0x1>
    9210:	64 e0       	ldi	r22, 0x04	; 4
    9212:	80 e4       	ldi	r24, 0x40	; 64
    9214:	92 e0       	ldi	r25, 0x02	; 2
    9216:	19 95       	eicall
}
    9218:	ff 91       	pop	r31
    921a:	ef 91       	pop	r30
    921c:	bf 91       	pop	r27
    921e:	af 91       	pop	r26
    9220:	9f 91       	pop	r25
    9222:	8f 91       	pop	r24
    9224:	7f 91       	pop	r23
    9226:	6f 91       	pop	r22
    9228:	5f 91       	pop	r21
    922a:	4f 91       	pop	r20
    922c:	3f 91       	pop	r19
    922e:	2f 91       	pop	r18
    9230:	0f 90       	pop	r0
    9232:	0b be       	out	0x3b, r0	; 59
    9234:	0f 90       	pop	r0
    9236:	0f be       	out	0x3f, r0	; 63
    9238:	0f 90       	pop	r0
    923a:	1f 90       	pop	r1
    923c:	18 95       	reti

0000923e <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    923e:	1f 92       	push	r1
    9240:	0f 92       	push	r0
    9242:	0f b6       	in	r0, 0x3f	; 63
    9244:	0f 92       	push	r0
    9246:	11 24       	eor	r1, r1
    9248:	0b b6       	in	r0, 0x3b	; 59
    924a:	0f 92       	push	r0
    924c:	2f 93       	push	r18
    924e:	3f 93       	push	r19
    9250:	4f 93       	push	r20
    9252:	5f 93       	push	r21
    9254:	6f 93       	push	r22
    9256:	7f 93       	push	r23
    9258:	8f 93       	push	r24
    925a:	9f 93       	push	r25
    925c:	af 93       	push	r26
    925e:	bf 93       	push	r27
    9260:	ef 93       	push	r30
    9262:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    9264:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    9268:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    926c:	e0 91 dd 2d 	lds	r30, 0x2DDD	; 0x802ddd <adcb_callback>
    9270:	f0 91 de 2d 	lds	r31, 0x2DDE	; 0x802dde <adcb_callback+0x1>
    9274:	68 e0       	ldi	r22, 0x08	; 8
    9276:	80 e4       	ldi	r24, 0x40	; 64
    9278:	92 e0       	ldi	r25, 0x02	; 2
    927a:	19 95       	eicall
}
    927c:	ff 91       	pop	r31
    927e:	ef 91       	pop	r30
    9280:	bf 91       	pop	r27
    9282:	af 91       	pop	r26
    9284:	9f 91       	pop	r25
    9286:	8f 91       	pop	r24
    9288:	7f 91       	pop	r23
    928a:	6f 91       	pop	r22
    928c:	5f 91       	pop	r21
    928e:	4f 91       	pop	r20
    9290:	3f 91       	pop	r19
    9292:	2f 91       	pop	r18
    9294:	0f 90       	pop	r0
    9296:	0b be       	out	0x3b, r0	; 59
    9298:	0f 90       	pop	r0
    929a:	0f be       	out	0x3f, r0	; 63
    929c:	0f 90       	pop	r0
    929e:	1f 90       	pop	r1
    92a0:	18 95       	reti

000092a2 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    92a2:	bf 92       	push	r11
    92a4:	cf 92       	push	r12
    92a6:	df 92       	push	r13
    92a8:	ef 92       	push	r14
    92aa:	ff 92       	push	r15
    92ac:	0f 93       	push	r16
    92ae:	1f 93       	push	r17
    92b0:	cf 93       	push	r28
    92b2:	df 93       	push	r29
    92b4:	1f 92       	push	r1
    92b6:	cd b7       	in	r28, 0x3d	; 61
    92b8:	de b7       	in	r29, 0x3e	; 62
    92ba:	8c 01       	movw	r16, r24
    92bc:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    92be:	81 15       	cp	r24, r1
    92c0:	22 e0       	ldi	r18, 0x02	; 2
    92c2:	92 07       	cpc	r25, r18
    92c4:	81 f4       	brne	.+32     	; 0x92e6 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    92c6:	61 e2       	ldi	r22, 0x21	; 33
    92c8:	70 e0       	ldi	r23, 0x00	; 0
    92ca:	82 e0       	ldi	r24, 0x02	; 2
    92cc:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    92d0:	c8 2e       	mov	r12, r24
    92d2:	d1 2c       	mov	r13, r1
    92d4:	60 e2       	ldi	r22, 0x20	; 32
    92d6:	70 e0       	ldi	r23, 0x00	; 0
    92d8:	82 e0       	ldi	r24, 0x02	; 2
    92da:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    92de:	dc 2c       	mov	r13, r12
    92e0:	cc 24       	eor	r12, r12
    92e2:	c8 2a       	or	r12, r24
    92e4:	12 c0       	rjmp	.+36     	; 0x930a <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    92e6:	80 34       	cpi	r24, 0x40	; 64
    92e8:	92 40       	sbci	r25, 0x02	; 2
    92ea:	d1 f5       	brne	.+116    	; 0x9360 <adc_write_configuration+0xbe>
    92ec:	65 e2       	ldi	r22, 0x25	; 37
    92ee:	70 e0       	ldi	r23, 0x00	; 0
    92f0:	82 e0       	ldi	r24, 0x02	; 2
    92f2:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    92f6:	c8 2e       	mov	r12, r24
    92f8:	d1 2c       	mov	r13, r1
    92fa:	64 e2       	ldi	r22, 0x24	; 36
    92fc:	70 e0       	ldi	r23, 0x00	; 0
    92fe:	82 e0       	ldi	r24, 0x02	; 2
    9300:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    9304:	dc 2c       	mov	r13, r12
    9306:	cc 24       	eor	r12, r12
    9308:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    930a:	8f b7       	in	r24, 0x3f	; 63
    930c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    930e:	f8 94       	cli
	return flags;
    9310:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    9312:	c8 01       	movw	r24, r16
    9314:	a4 dd       	rcall	.-1208   	; 0x8e5e <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    9316:	f8 01       	movw	r30, r16
    9318:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    931a:	92 e0       	ldi	r25, 0x02	; 2
    931c:	90 83       	st	Z, r25
	adc->CAL = cal;
    931e:	c4 86       	std	Z+12, r12	; 0x0c
    9320:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    9322:	f7 01       	movw	r30, r14
    9324:	25 81       	ldd	r18, Z+5	; 0x05
    9326:	36 81       	ldd	r19, Z+6	; 0x06
    9328:	f8 01       	movw	r30, r16
    932a:	20 8f       	std	Z+24, r18	; 0x18
    932c:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    932e:	f7 01       	movw	r30, r14
    9330:	92 81       	ldd	r25, Z+2	; 0x02
    9332:	f8 01       	movw	r30, r16
    9334:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    9336:	f7 01       	movw	r30, r14
    9338:	94 81       	ldd	r25, Z+4	; 0x04
    933a:	f8 01       	movw	r30, r16
    933c:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    933e:	f7 01       	movw	r30, r14
    9340:	93 81       	ldd	r25, Z+3	; 0x03
    9342:	f8 01       	movw	r30, r16
    9344:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    9346:	f7 01       	movw	r30, r14
    9348:	91 81       	ldd	r25, Z+1	; 0x01
    934a:	f8 01       	movw	r30, r16
    934c:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    934e:	81 70       	andi	r24, 0x01	; 1
    9350:	f7 01       	movw	r30, r14
    9352:	90 81       	ld	r25, Z
    9354:	89 2b       	or	r24, r25
    9356:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    9358:	80 83       	st	Z, r24
    935a:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    935c:	a1 dd       	rcall	.-1214   	; 0x8ea0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    935e:	bf be       	out	0x3f, r11	; 63
    9360:	0f 90       	pop	r0
    9362:	df 91       	pop	r29
    9364:	cf 91       	pop	r28
    9366:	1f 91       	pop	r17
    9368:	0f 91       	pop	r16
    936a:	ff 90       	pop	r15
    936c:	ef 90       	pop	r14
    936e:	df 90       	pop	r13
    9370:	cf 90       	pop	r12
    9372:	bf 90       	pop	r11
    9374:	08 95       	ret

00009376 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    9376:	df 92       	push	r13
    9378:	ef 92       	push	r14
    937a:	ff 92       	push	r15
    937c:	0f 93       	push	r16
    937e:	1f 93       	push	r17
    9380:	cf 93       	push	r28
    9382:	df 93       	push	r29
    9384:	1f 92       	push	r1
    9386:	cd b7       	in	r28, 0x3d	; 61
    9388:	de b7       	in	r29, 0x3e	; 62
    938a:	8c 01       	movw	r16, r24
    938c:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    938e:	8f b7       	in	r24, 0x3f	; 63
    9390:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9392:	f8 94       	cli
	return flags;
    9394:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    9396:	c8 01       	movw	r24, r16
    9398:	62 dd       	rcall	.-1340   	; 0x8e5e <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    939a:	f8 01       	movw	r30, r16
    939c:	80 81       	ld	r24, Z
    939e:	80 7c       	andi	r24, 0xC0	; 192
    93a0:	f7 01       	movw	r30, r14
    93a2:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    93a4:	f8 01       	movw	r30, r16
    93a6:	80 8d       	ldd	r24, Z+24	; 0x18
    93a8:	91 8d       	ldd	r25, Z+25	; 0x19
    93aa:	f7 01       	movw	r30, r14
    93ac:	85 83       	std	Z+5, r24	; 0x05
    93ae:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    93b0:	f8 01       	movw	r30, r16
    93b2:	82 81       	ldd	r24, Z+2	; 0x02
    93b4:	f7 01       	movw	r30, r14
    93b6:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    93b8:	f8 01       	movw	r30, r16
    93ba:	84 81       	ldd	r24, Z+4	; 0x04
    93bc:	f7 01       	movw	r30, r14
    93be:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    93c0:	f8 01       	movw	r30, r16
    93c2:	83 81       	ldd	r24, Z+3	; 0x03
    93c4:	f7 01       	movw	r30, r14
    93c6:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    93c8:	f8 01       	movw	r30, r16
    93ca:	81 81       	ldd	r24, Z+1	; 0x01
    93cc:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    93ce:	81 83       	std	Z+1, r24	; 0x01
    93d0:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    93d2:	66 dd       	rcall	.-1332   	; 0x8ea0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    93d4:	df be       	out	0x3f, r13	; 63
    93d6:	0f 90       	pop	r0
    93d8:	df 91       	pop	r29
    93da:	cf 91       	pop	r28
    93dc:	1f 91       	pop	r17
    93de:	0f 91       	pop	r16
    93e0:	ff 90       	pop	r15
    93e2:	ef 90       	pop	r14
    93e4:	df 90       	pop	r13
    93e6:	08 95       	ret

000093e8 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    93e8:	af 92       	push	r10
    93ea:	bf 92       	push	r11
    93ec:	cf 92       	push	r12
    93ee:	df 92       	push	r13
    93f0:	ef 92       	push	r14
    93f2:	ff 92       	push	r15
    93f4:	0f 93       	push	r16
    93f6:	1f 93       	push	r17
    93f8:	cf 93       	push	r28
    93fa:	df 93       	push	r29
    93fc:	1f 92       	push	r1
    93fe:	cd b7       	in	r28, 0x3d	; 61
    9400:	de b7       	in	r29, 0x3e	; 62
    9402:	6c 01       	movw	r12, r24
    9404:	b6 2e       	mov	r11, r22
    9406:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    9408:	86 2f       	mov	r24, r22
    940a:	83 70       	andi	r24, 0x03	; 3
    940c:	29 f4       	brne	.+10     	; 0x9418 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    940e:	96 2f       	mov	r25, r22
    9410:	96 95       	lsr	r25
    9412:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    9414:	82 e0       	ldi	r24, 0x02	; 2
    9416:	02 c0       	rjmp	.+4      	; 0x941c <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    9418:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    941a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    941c:	90 ff       	sbrs	r25, 0
		index++;
    941e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    9420:	86 01       	movw	r16, r12
    9422:	00 5e       	subi	r16, 0xE0	; 224
    9424:	1f 4f       	sbci	r17, 0xFF	; 255
    9426:	98 e0       	ldi	r25, 0x08	; 8
    9428:	89 9f       	mul	r24, r25
    942a:	00 0d       	add	r16, r0
    942c:	11 1d       	adc	r17, r1
    942e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9430:	8f b7       	in	r24, 0x3f	; 63
    9432:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9434:	f8 94       	cli
	return flags;
    9436:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    9438:	c6 01       	movw	r24, r12
    943a:	11 dd       	rcall	.-1502   	; 0x8e5e <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    943c:	f7 01       	movw	r30, r14
    943e:	80 81       	ld	r24, Z
    9440:	f8 01       	movw	r30, r16
    9442:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    9444:	f7 01       	movw	r30, r14
    9446:	82 81       	ldd	r24, Z+2	; 0x02
    9448:	f8 01       	movw	r30, r16
    944a:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    944c:	f7 01       	movw	r30, r14
    944e:	81 81       	ldd	r24, Z+1	; 0x01
    9450:	f8 01       	movw	r30, r16
    9452:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    9454:	b0 fe       	sbrs	r11, 0
    9456:	04 c0       	rjmp	.+8      	; 0x9460 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    9458:	f7 01       	movw	r30, r14
    945a:	83 81       	ldd	r24, Z+3	; 0x03
    945c:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    945e:	86 83       	std	Z+6, r24	; 0x06
    9460:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9462:	1e dd       	rcall	.-1476   	; 0x8ea0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    9464:	af be       	out	0x3f, r10	; 63
    9466:	0f 90       	pop	r0
    9468:	df 91       	pop	r29
    946a:	cf 91       	pop	r28
    946c:	1f 91       	pop	r17
    946e:	0f 91       	pop	r16
    9470:	ff 90       	pop	r15
    9472:	ef 90       	pop	r14
    9474:	df 90       	pop	r13
    9476:	cf 90       	pop	r12
    9478:	bf 90       	pop	r11
    947a:	af 90       	pop	r10
    947c:	08 95       	ret

0000947e <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    947e:	af 92       	push	r10
    9480:	bf 92       	push	r11
    9482:	cf 92       	push	r12
    9484:	df 92       	push	r13
    9486:	ef 92       	push	r14
    9488:	ff 92       	push	r15
    948a:	0f 93       	push	r16
    948c:	1f 93       	push	r17
    948e:	cf 93       	push	r28
    9490:	df 93       	push	r29
    9492:	1f 92       	push	r1
    9494:	cd b7       	in	r28, 0x3d	; 61
    9496:	de b7       	in	r29, 0x3e	; 62
    9498:	6c 01       	movw	r12, r24
    949a:	b6 2e       	mov	r11, r22
    949c:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    949e:	86 2f       	mov	r24, r22
    94a0:	83 70       	andi	r24, 0x03	; 3
    94a2:	29 f4       	brne	.+10     	; 0x94ae <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    94a4:	96 2f       	mov	r25, r22
    94a6:	96 95       	lsr	r25
    94a8:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    94aa:	82 e0       	ldi	r24, 0x02	; 2
    94ac:	02 c0       	rjmp	.+4      	; 0x94b2 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    94ae:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    94b0:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    94b2:	90 ff       	sbrs	r25, 0
		index++;
    94b4:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    94b6:	86 01       	movw	r16, r12
    94b8:	00 5e       	subi	r16, 0xE0	; 224
    94ba:	1f 4f       	sbci	r17, 0xFF	; 255
    94bc:	98 e0       	ldi	r25, 0x08	; 8
    94be:	89 9f       	mul	r24, r25
    94c0:	00 0d       	add	r16, r0
    94c2:	11 1d       	adc	r17, r1
    94c4:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    94c6:	8f b7       	in	r24, 0x3f	; 63
    94c8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    94ca:	f8 94       	cli
	return flags;
    94cc:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    94ce:	c6 01       	movw	r24, r12
    94d0:	c6 dc       	rcall	.-1652   	; 0x8e5e <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    94d2:	f8 01       	movw	r30, r16
    94d4:	80 81       	ld	r24, Z
    94d6:	f7 01       	movw	r30, r14
    94d8:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    94da:	f8 01       	movw	r30, r16
    94dc:	82 81       	ldd	r24, Z+2	; 0x02
    94de:	f7 01       	movw	r30, r14
    94e0:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    94e2:	f8 01       	movw	r30, r16
    94e4:	81 81       	ldd	r24, Z+1	; 0x01
    94e6:	f7 01       	movw	r30, r14
    94e8:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    94ea:	b0 fe       	sbrs	r11, 0
    94ec:	04 c0       	rjmp	.+8      	; 0x94f6 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    94ee:	f8 01       	movw	r30, r16
    94f0:	86 81       	ldd	r24, Z+6	; 0x06
    94f2:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    94f4:	83 83       	std	Z+3, r24	; 0x03
    94f6:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    94f8:	d3 dc       	rcall	.-1626   	; 0x8ea0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    94fa:	af be       	out	0x3f, r10	; 63
    94fc:	0f 90       	pop	r0
    94fe:	df 91       	pop	r29
    9500:	cf 91       	pop	r28
    9502:	1f 91       	pop	r17
    9504:	0f 91       	pop	r16
    9506:	ff 90       	pop	r15
    9508:	ef 90       	pop	r14
    950a:	df 90       	pop	r13
    950c:	cf 90       	pop	r12
    950e:	bf 90       	pop	r11
    9510:	af 90       	pop	r10
    9512:	08 95       	ret

00009514 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    9514:	80 32       	cpi	r24, 0x20	; 32
    9516:	93 40       	sbci	r25, 0x03	; 3
    9518:	61 f4       	brne	.+24     	; 0x9532 <dac_enable_clock+0x1e>
    951a:	80 91 31 23 	lds	r24, 0x2331	; 0x802331 <dacb_enable_count>
    951e:	91 e0       	ldi	r25, 0x01	; 1
    9520:	98 0f       	add	r25, r24
    9522:	90 93 31 23 	sts	0x2331, r25	; 0x802331 <dacb_enable_count>
    9526:	81 11       	cpse	r24, r1
    9528:	04 c0       	rjmp	.+8      	; 0x9532 <dac_enable_clock+0x1e>
    952a:	64 e0       	ldi	r22, 0x04	; 4
    952c:	82 e0       	ldi	r24, 0x02	; 2
    952e:	0c 94 ae 6e 	jmp	0xdd5c	; 0xdd5c <sysclk_enable_module>
    9532:	08 95       	ret

00009534 <dac_disable_clock>:
    9534:	80 32       	cpi	r24, 0x20	; 32
    9536:	93 40       	sbci	r25, 0x03	; 3
    9538:	59 f4       	brne	.+22     	; 0x9550 <dac_disable_clock+0x1c>
    953a:	80 91 31 23 	lds	r24, 0x2331	; 0x802331 <dacb_enable_count>
    953e:	81 50       	subi	r24, 0x01	; 1
    9540:	80 93 31 23 	sts	0x2331, r24	; 0x802331 <dacb_enable_count>
    9544:	81 11       	cpse	r24, r1
    9546:	04 c0       	rjmp	.+8      	; 0x9550 <dac_disable_clock+0x1c>
    9548:	64 e0       	ldi	r22, 0x04	; 4
    954a:	82 e0       	ldi	r24, 0x02	; 2
    954c:	0c 94 c4 6e 	jmp	0xdd88	; 0xdd88 <sysclk_disable_module>
    9550:	08 95       	ret

00009552 <dac_enable>:
    9552:	ef 92       	push	r14
    9554:	ff 92       	push	r15
    9556:	1f 93       	push	r17
    9558:	cf 93       	push	r28
    955a:	df 93       	push	r29
    955c:	1f 92       	push	r1
    955e:	1f 92       	push	r1
    9560:	cd b7       	in	r28, 0x3d	; 61
    9562:	de b7       	in	r29, 0x3e	; 62
    9564:	2f b7       	in	r18, 0x3f	; 63
    9566:	29 83       	std	Y+1, r18	; 0x01
    9568:	f8 94       	cli
    956a:	19 81       	ldd	r17, Y+1	; 0x01
    956c:	20 91 78 2e 	lds	r18, 0x2E78	; 0x802e78 <sleepmgr_locks+0x1>
    9570:	2f 3f       	cpi	r18, 0xFF	; 255
    9572:	09 f4       	brne	.+2      	; 0x9576 <dac_enable+0x24>
    9574:	ff cf       	rjmp	.-2      	; 0x9574 <dac_enable+0x22>
    9576:	7c 01       	movw	r14, r24
    9578:	8f b7       	in	r24, 0x3f	; 63
    957a:	8a 83       	std	Y+2, r24	; 0x02
    957c:	f8 94       	cli
    957e:	9a 81       	ldd	r25, Y+2	; 0x02
    9580:	e7 e7       	ldi	r30, 0x77	; 119
    9582:	fe e2       	ldi	r31, 0x2E	; 46
    9584:	81 81       	ldd	r24, Z+1	; 0x01
    9586:	8f 5f       	subi	r24, 0xFF	; 255
    9588:	81 83       	std	Z+1, r24	; 0x01
    958a:	9f bf       	out	0x3f, r25	; 63
    958c:	c7 01       	movw	r24, r14
    958e:	c2 df       	rcall	.-124    	; 0x9514 <dac_enable_clock>
    9590:	f7 01       	movw	r30, r14
    9592:	80 81       	ld	r24, Z
    9594:	81 60       	ori	r24, 0x01	; 1
    9596:	80 83       	st	Z, r24
    9598:	1f bf       	out	0x3f, r17	; 63
    959a:	0f 90       	pop	r0
    959c:	0f 90       	pop	r0
    959e:	df 91       	pop	r29
    95a0:	cf 91       	pop	r28
    95a2:	1f 91       	pop	r17
    95a4:	ff 90       	pop	r15
    95a6:	ef 90       	pop	r14
    95a8:	08 95       	ret

000095aa <dac_disable>:
    95aa:	1f 93       	push	r17
    95ac:	cf 93       	push	r28
    95ae:	df 93       	push	r29
    95b0:	1f 92       	push	r1
    95b2:	1f 92       	push	r1
    95b4:	cd b7       	in	r28, 0x3d	; 61
    95b6:	de b7       	in	r29, 0x3e	; 62
    95b8:	2f b7       	in	r18, 0x3f	; 63
    95ba:	29 83       	std	Y+1, r18	; 0x01
    95bc:	f8 94       	cli
    95be:	19 81       	ldd	r17, Y+1	; 0x01
    95c0:	fc 01       	movw	r30, r24
    95c2:	20 81       	ld	r18, Z
    95c4:	2e 7f       	andi	r18, 0xFE	; 254
    95c6:	20 83       	st	Z, r18
    95c8:	b5 df       	rcall	.-150    	; 0x9534 <dac_disable_clock>
    95ca:	80 91 78 2e 	lds	r24, 0x2E78	; 0x802e78 <sleepmgr_locks+0x1>
    95ce:	81 11       	cpse	r24, r1
    95d0:	01 c0       	rjmp	.+2      	; 0x95d4 <dac_disable+0x2a>
    95d2:	ff cf       	rjmp	.-2      	; 0x95d2 <dac_disable+0x28>
    95d4:	8f b7       	in	r24, 0x3f	; 63
    95d6:	8a 83       	std	Y+2, r24	; 0x02
    95d8:	f8 94       	cli
    95da:	9a 81       	ldd	r25, Y+2	; 0x02
    95dc:	e7 e7       	ldi	r30, 0x77	; 119
    95de:	fe e2       	ldi	r31, 0x2E	; 46
    95e0:	81 81       	ldd	r24, Z+1	; 0x01
    95e2:	81 50       	subi	r24, 0x01	; 1
    95e4:	81 83       	std	Z+1, r24	; 0x01
    95e6:	9f bf       	out	0x3f, r25	; 63
    95e8:	1f bf       	out	0x3f, r17	; 63
    95ea:	0f 90       	pop	r0
    95ec:	0f 90       	pop	r0
    95ee:	df 91       	pop	r29
    95f0:	cf 91       	pop	r28
    95f2:	1f 91       	pop	r17
    95f4:	08 95       	ret

000095f6 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    95f6:	9f 92       	push	r9
    95f8:	af 92       	push	r10
    95fa:	bf 92       	push	r11
    95fc:	cf 92       	push	r12
    95fe:	df 92       	push	r13
    9600:	ef 92       	push	r14
    9602:	ff 92       	push	r15
    9604:	0f 93       	push	r16
    9606:	1f 93       	push	r17
    9608:	cf 93       	push	r28
    960a:	df 93       	push	r29
    960c:	1f 92       	push	r1
    960e:	cd b7       	in	r28, 0x3d	; 61
    9610:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    9612:	80 32       	cpi	r24, 0x20	; 32
    9614:	23 e0       	ldi	r18, 0x03	; 3
    9616:	92 07       	cpc	r25, r18
    9618:	09 f0       	breq	.+2      	; 0x961c <dac_write_configuration+0x26>
    961a:	3c c0       	rjmp	.+120    	; 0x9694 <dac_write_configuration+0x9e>
    961c:	7b 01       	movw	r14, r22
    961e:	8c 01       	movw	r16, r24
    9620:	63 e3       	ldi	r22, 0x33	; 51
    9622:	70 e0       	ldi	r23, 0x00	; 0
    9624:	82 e0       	ldi	r24, 0x02	; 2
    9626:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    962a:	98 2e       	mov	r9, r24
    962c:	62 e3       	ldi	r22, 0x32	; 50
    962e:	70 e0       	ldi	r23, 0x00	; 0
    9630:	82 e0       	ldi	r24, 0x02	; 2
    9632:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    9636:	a8 2e       	mov	r10, r24
    9638:	67 e3       	ldi	r22, 0x37	; 55
    963a:	70 e0       	ldi	r23, 0x00	; 0
    963c:	82 e0       	ldi	r24, 0x02	; 2
    963e:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    9642:	b8 2e       	mov	r11, r24
    9644:	66 e3       	ldi	r22, 0x36	; 54
    9646:	70 e0       	ldi	r23, 0x00	; 0
    9648:	82 e0       	ldi	r24, 0x02	; 2
    964a:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    964e:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9650:	8f b7       	in	r24, 0x3f	; 63
    9652:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9654:	f8 94       	cli
	return flags;
    9656:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    9658:	c8 01       	movw	r24, r16
    965a:	5c df       	rcall	.-328    	; 0x9514 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    965c:	f8 01       	movw	r30, r16
    965e:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    9660:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    9662:	f7 01       	movw	r30, r14
    9664:	91 81       	ldd	r25, Z+1	; 0x01
    9666:	f8 01       	movw	r30, r16
    9668:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    966a:	f7 01       	movw	r30, r14
    966c:	92 81       	ldd	r25, Z+2	; 0x02
    966e:	f8 01       	movw	r30, r16
    9670:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    9672:	f7 01       	movw	r30, r14
    9674:	93 81       	ldd	r25, Z+3	; 0x03
    9676:	f8 01       	movw	r30, r16
    9678:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    967a:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    967c:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    967e:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    9680:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    9682:	81 70       	andi	r24, 0x01	; 1
    9684:	f7 01       	movw	r30, r14
    9686:	90 81       	ld	r25, Z
    9688:	89 2b       	or	r24, r25
    968a:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    968c:	80 83       	st	Z, r24
    968e:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9690:	51 df       	rcall	.-350    	; 0x9534 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    9692:	df be       	out	0x3f, r13	; 63
    9694:	0f 90       	pop	r0
    9696:	df 91       	pop	r29
    9698:	cf 91       	pop	r28
    969a:	1f 91       	pop	r17
    969c:	0f 91       	pop	r16
    969e:	ff 90       	pop	r15
    96a0:	ef 90       	pop	r14
    96a2:	df 90       	pop	r13
    96a4:	cf 90       	pop	r12
    96a6:	bf 90       	pop	r11
    96a8:	af 90       	pop	r10
    96aa:	9f 90       	pop	r9
    96ac:	08 95       	ret

000096ae <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    96ae:	df 92       	push	r13
    96b0:	ef 92       	push	r14
    96b2:	ff 92       	push	r15
    96b4:	0f 93       	push	r16
    96b6:	1f 93       	push	r17
    96b8:	cf 93       	push	r28
    96ba:	df 93       	push	r29
    96bc:	1f 92       	push	r1
    96be:	cd b7       	in	r28, 0x3d	; 61
    96c0:	de b7       	in	r29, 0x3e	; 62
    96c2:	8c 01       	movw	r16, r24
    96c4:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    96c6:	8f b7       	in	r24, 0x3f	; 63
    96c8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    96ca:	f8 94       	cli
	return flags;
    96cc:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    96ce:	c8 01       	movw	r24, r16
    96d0:	21 df       	rcall	.-446    	; 0x9514 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    96d2:	f8 01       	movw	r30, r16
    96d4:	80 81       	ld	r24, Z
    96d6:	8e 7f       	andi	r24, 0xFE	; 254
    96d8:	f7 01       	movw	r30, r14
    96da:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    96dc:	f8 01       	movw	r30, r16
    96de:	81 81       	ldd	r24, Z+1	; 0x01
    96e0:	f7 01       	movw	r30, r14
    96e2:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    96e4:	f8 01       	movw	r30, r16
    96e6:	82 81       	ldd	r24, Z+2	; 0x02
    96e8:	f7 01       	movw	r30, r14
    96ea:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    96ec:	f8 01       	movw	r30, r16
    96ee:	83 81       	ldd	r24, Z+3	; 0x03
    96f0:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    96f2:	83 83       	std	Z+3, r24	; 0x03
    96f4:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    96f6:	1e df       	rcall	.-452    	; 0x9534 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    96f8:	df be       	out	0x3f, r13	; 63
    96fa:	0f 90       	pop	r0
    96fc:	df 91       	pop	r29
    96fe:	cf 91       	pop	r28
    9700:	1f 91       	pop	r17
    9702:	0f 91       	pop	r16
    9704:	ff 90       	pop	r15
    9706:	ef 90       	pop	r14
    9708:	df 90       	pop	r13
    970a:	08 95       	ret

0000970c <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    970c:	1f 92       	push	r1
    970e:	0f 92       	push	r0
    9710:	0f b6       	in	r0, 0x3f	; 63
    9712:	0f 92       	push	r0
    9714:	11 24       	eor	r1, r1
    9716:	0b b6       	in	r0, 0x3b	; 59
    9718:	0f 92       	push	r0
    971a:	2f 93       	push	r18
    971c:	3f 93       	push	r19
    971e:	4f 93       	push	r20
    9720:	5f 93       	push	r21
    9722:	6f 93       	push	r22
    9724:	7f 93       	push	r23
    9726:	8f 93       	push	r24
    9728:	9f 93       	push	r25
    972a:	af 93       	push	r26
    972c:	bf 93       	push	r27
    972e:	ef 93       	push	r30
    9730:	ff 93       	push	r31
    9732:	e0 91 78 23 	lds	r30, 0x2378	; 0x802378 <tc_tcc0_ovf_callback>
    9736:	f0 91 79 23 	lds	r31, 0x2379	; 0x802379 <tc_tcc0_ovf_callback+0x1>
    973a:	30 97       	sbiw	r30, 0x00	; 0
    973c:	09 f0       	breq	.+2      	; 0x9740 <__vector_14+0x34>
    973e:	19 95       	eicall
    9740:	ff 91       	pop	r31
    9742:	ef 91       	pop	r30
    9744:	bf 91       	pop	r27
    9746:	af 91       	pop	r26
    9748:	9f 91       	pop	r25
    974a:	8f 91       	pop	r24
    974c:	7f 91       	pop	r23
    974e:	6f 91       	pop	r22
    9750:	5f 91       	pop	r21
    9752:	4f 91       	pop	r20
    9754:	3f 91       	pop	r19
    9756:	2f 91       	pop	r18
    9758:	0f 90       	pop	r0
    975a:	0b be       	out	0x3b, r0	; 59
    975c:	0f 90       	pop	r0
    975e:	0f be       	out	0x3f, r0	; 63
    9760:	0f 90       	pop	r0
    9762:	1f 90       	pop	r1
    9764:	18 95       	reti

00009766 <__vector_15>:
    9766:	1f 92       	push	r1
    9768:	0f 92       	push	r0
    976a:	0f b6       	in	r0, 0x3f	; 63
    976c:	0f 92       	push	r0
    976e:	11 24       	eor	r1, r1
    9770:	0b b6       	in	r0, 0x3b	; 59
    9772:	0f 92       	push	r0
    9774:	2f 93       	push	r18
    9776:	3f 93       	push	r19
    9778:	4f 93       	push	r20
    977a:	5f 93       	push	r21
    977c:	6f 93       	push	r22
    977e:	7f 93       	push	r23
    9780:	8f 93       	push	r24
    9782:	9f 93       	push	r25
    9784:	af 93       	push	r26
    9786:	bf 93       	push	r27
    9788:	ef 93       	push	r30
    978a:	ff 93       	push	r31
    978c:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <tc_tcc0_err_callback>
    9790:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <tc_tcc0_err_callback+0x1>
    9794:	30 97       	sbiw	r30, 0x00	; 0
    9796:	09 f0       	breq	.+2      	; 0x979a <__vector_15+0x34>
    9798:	19 95       	eicall
    979a:	ff 91       	pop	r31
    979c:	ef 91       	pop	r30
    979e:	bf 91       	pop	r27
    97a0:	af 91       	pop	r26
    97a2:	9f 91       	pop	r25
    97a4:	8f 91       	pop	r24
    97a6:	7f 91       	pop	r23
    97a8:	6f 91       	pop	r22
    97aa:	5f 91       	pop	r21
    97ac:	4f 91       	pop	r20
    97ae:	3f 91       	pop	r19
    97b0:	2f 91       	pop	r18
    97b2:	0f 90       	pop	r0
    97b4:	0b be       	out	0x3b, r0	; 59
    97b6:	0f 90       	pop	r0
    97b8:	0f be       	out	0x3f, r0	; 63
    97ba:	0f 90       	pop	r0
    97bc:	1f 90       	pop	r1
    97be:	18 95       	reti

000097c0 <__vector_16>:
    97c0:	1f 92       	push	r1
    97c2:	0f 92       	push	r0
    97c4:	0f b6       	in	r0, 0x3f	; 63
    97c6:	0f 92       	push	r0
    97c8:	11 24       	eor	r1, r1
    97ca:	0b b6       	in	r0, 0x3b	; 59
    97cc:	0f 92       	push	r0
    97ce:	2f 93       	push	r18
    97d0:	3f 93       	push	r19
    97d2:	4f 93       	push	r20
    97d4:	5f 93       	push	r21
    97d6:	6f 93       	push	r22
    97d8:	7f 93       	push	r23
    97da:	8f 93       	push	r24
    97dc:	9f 93       	push	r25
    97de:	af 93       	push	r26
    97e0:	bf 93       	push	r27
    97e2:	ef 93       	push	r30
    97e4:	ff 93       	push	r31
    97e6:	e0 91 74 23 	lds	r30, 0x2374	; 0x802374 <tc_tcc0_cca_callback>
    97ea:	f0 91 75 23 	lds	r31, 0x2375	; 0x802375 <tc_tcc0_cca_callback+0x1>
    97ee:	30 97       	sbiw	r30, 0x00	; 0
    97f0:	09 f0       	breq	.+2      	; 0x97f4 <__vector_16+0x34>
    97f2:	19 95       	eicall
    97f4:	ff 91       	pop	r31
    97f6:	ef 91       	pop	r30
    97f8:	bf 91       	pop	r27
    97fa:	af 91       	pop	r26
    97fc:	9f 91       	pop	r25
    97fe:	8f 91       	pop	r24
    9800:	7f 91       	pop	r23
    9802:	6f 91       	pop	r22
    9804:	5f 91       	pop	r21
    9806:	4f 91       	pop	r20
    9808:	3f 91       	pop	r19
    980a:	2f 91       	pop	r18
    980c:	0f 90       	pop	r0
    980e:	0b be       	out	0x3b, r0	; 59
    9810:	0f 90       	pop	r0
    9812:	0f be       	out	0x3f, r0	; 63
    9814:	0f 90       	pop	r0
    9816:	1f 90       	pop	r1
    9818:	18 95       	reti

0000981a <__vector_17>:
    981a:	1f 92       	push	r1
    981c:	0f 92       	push	r0
    981e:	0f b6       	in	r0, 0x3f	; 63
    9820:	0f 92       	push	r0
    9822:	11 24       	eor	r1, r1
    9824:	0b b6       	in	r0, 0x3b	; 59
    9826:	0f 92       	push	r0
    9828:	2f 93       	push	r18
    982a:	3f 93       	push	r19
    982c:	4f 93       	push	r20
    982e:	5f 93       	push	r21
    9830:	6f 93       	push	r22
    9832:	7f 93       	push	r23
    9834:	8f 93       	push	r24
    9836:	9f 93       	push	r25
    9838:	af 93       	push	r26
    983a:	bf 93       	push	r27
    983c:	ef 93       	push	r30
    983e:	ff 93       	push	r31
    9840:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <tc_tcc0_ccb_callback>
    9844:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <tc_tcc0_ccb_callback+0x1>
    9848:	30 97       	sbiw	r30, 0x00	; 0
    984a:	09 f0       	breq	.+2      	; 0x984e <__vector_17+0x34>
    984c:	19 95       	eicall
    984e:	ff 91       	pop	r31
    9850:	ef 91       	pop	r30
    9852:	bf 91       	pop	r27
    9854:	af 91       	pop	r26
    9856:	9f 91       	pop	r25
    9858:	8f 91       	pop	r24
    985a:	7f 91       	pop	r23
    985c:	6f 91       	pop	r22
    985e:	5f 91       	pop	r21
    9860:	4f 91       	pop	r20
    9862:	3f 91       	pop	r19
    9864:	2f 91       	pop	r18
    9866:	0f 90       	pop	r0
    9868:	0b be       	out	0x3b, r0	; 59
    986a:	0f 90       	pop	r0
    986c:	0f be       	out	0x3f, r0	; 63
    986e:	0f 90       	pop	r0
    9870:	1f 90       	pop	r1
    9872:	18 95       	reti

00009874 <__vector_18>:
    9874:	1f 92       	push	r1
    9876:	0f 92       	push	r0
    9878:	0f b6       	in	r0, 0x3f	; 63
    987a:	0f 92       	push	r0
    987c:	11 24       	eor	r1, r1
    987e:	0b b6       	in	r0, 0x3b	; 59
    9880:	0f 92       	push	r0
    9882:	2f 93       	push	r18
    9884:	3f 93       	push	r19
    9886:	4f 93       	push	r20
    9888:	5f 93       	push	r21
    988a:	6f 93       	push	r22
    988c:	7f 93       	push	r23
    988e:	8f 93       	push	r24
    9890:	9f 93       	push	r25
    9892:	af 93       	push	r26
    9894:	bf 93       	push	r27
    9896:	ef 93       	push	r30
    9898:	ff 93       	push	r31
    989a:	e0 91 70 23 	lds	r30, 0x2370	; 0x802370 <tc_tcc0_ccc_callback>
    989e:	f0 91 71 23 	lds	r31, 0x2371	; 0x802371 <tc_tcc0_ccc_callback+0x1>
    98a2:	30 97       	sbiw	r30, 0x00	; 0
    98a4:	09 f0       	breq	.+2      	; 0x98a8 <__vector_18+0x34>
    98a6:	19 95       	eicall
    98a8:	ff 91       	pop	r31
    98aa:	ef 91       	pop	r30
    98ac:	bf 91       	pop	r27
    98ae:	af 91       	pop	r26
    98b0:	9f 91       	pop	r25
    98b2:	8f 91       	pop	r24
    98b4:	7f 91       	pop	r23
    98b6:	6f 91       	pop	r22
    98b8:	5f 91       	pop	r21
    98ba:	4f 91       	pop	r20
    98bc:	3f 91       	pop	r19
    98be:	2f 91       	pop	r18
    98c0:	0f 90       	pop	r0
    98c2:	0b be       	out	0x3b, r0	; 59
    98c4:	0f 90       	pop	r0
    98c6:	0f be       	out	0x3f, r0	; 63
    98c8:	0f 90       	pop	r0
    98ca:	1f 90       	pop	r1
    98cc:	18 95       	reti

000098ce <__vector_19>:
    98ce:	1f 92       	push	r1
    98d0:	0f 92       	push	r0
    98d2:	0f b6       	in	r0, 0x3f	; 63
    98d4:	0f 92       	push	r0
    98d6:	11 24       	eor	r1, r1
    98d8:	0b b6       	in	r0, 0x3b	; 59
    98da:	0f 92       	push	r0
    98dc:	2f 93       	push	r18
    98de:	3f 93       	push	r19
    98e0:	4f 93       	push	r20
    98e2:	5f 93       	push	r21
    98e4:	6f 93       	push	r22
    98e6:	7f 93       	push	r23
    98e8:	8f 93       	push	r24
    98ea:	9f 93       	push	r25
    98ec:	af 93       	push	r26
    98ee:	bf 93       	push	r27
    98f0:	ef 93       	push	r30
    98f2:	ff 93       	push	r31
    98f4:	e0 91 6e 23 	lds	r30, 0x236E	; 0x80236e <tc_tcc0_ccd_callback>
    98f8:	f0 91 6f 23 	lds	r31, 0x236F	; 0x80236f <tc_tcc0_ccd_callback+0x1>
    98fc:	30 97       	sbiw	r30, 0x00	; 0
    98fe:	09 f0       	breq	.+2      	; 0x9902 <__vector_19+0x34>
    9900:	19 95       	eicall
    9902:	ff 91       	pop	r31
    9904:	ef 91       	pop	r30
    9906:	bf 91       	pop	r27
    9908:	af 91       	pop	r26
    990a:	9f 91       	pop	r25
    990c:	8f 91       	pop	r24
    990e:	7f 91       	pop	r23
    9910:	6f 91       	pop	r22
    9912:	5f 91       	pop	r21
    9914:	4f 91       	pop	r20
    9916:	3f 91       	pop	r19
    9918:	2f 91       	pop	r18
    991a:	0f 90       	pop	r0
    991c:	0b be       	out	0x3b, r0	; 59
    991e:	0f 90       	pop	r0
    9920:	0f be       	out	0x3f, r0	; 63
    9922:	0f 90       	pop	r0
    9924:	1f 90       	pop	r1
    9926:	18 95       	reti

00009928 <__vector_20>:
    9928:	1f 92       	push	r1
    992a:	0f 92       	push	r0
    992c:	0f b6       	in	r0, 0x3f	; 63
    992e:	0f 92       	push	r0
    9930:	11 24       	eor	r1, r1
    9932:	0b b6       	in	r0, 0x3b	; 59
    9934:	0f 92       	push	r0
    9936:	2f 93       	push	r18
    9938:	3f 93       	push	r19
    993a:	4f 93       	push	r20
    993c:	5f 93       	push	r21
    993e:	6f 93       	push	r22
    9940:	7f 93       	push	r23
    9942:	8f 93       	push	r24
    9944:	9f 93       	push	r25
    9946:	af 93       	push	r26
    9948:	bf 93       	push	r27
    994a:	ef 93       	push	r30
    994c:	ff 93       	push	r31
    994e:	e0 91 6c 23 	lds	r30, 0x236C	; 0x80236c <tc_tcc1_ovf_callback>
    9952:	f0 91 6d 23 	lds	r31, 0x236D	; 0x80236d <tc_tcc1_ovf_callback+0x1>
    9956:	30 97       	sbiw	r30, 0x00	; 0
    9958:	09 f0       	breq	.+2      	; 0x995c <__vector_20+0x34>
    995a:	19 95       	eicall
    995c:	ff 91       	pop	r31
    995e:	ef 91       	pop	r30
    9960:	bf 91       	pop	r27
    9962:	af 91       	pop	r26
    9964:	9f 91       	pop	r25
    9966:	8f 91       	pop	r24
    9968:	7f 91       	pop	r23
    996a:	6f 91       	pop	r22
    996c:	5f 91       	pop	r21
    996e:	4f 91       	pop	r20
    9970:	3f 91       	pop	r19
    9972:	2f 91       	pop	r18
    9974:	0f 90       	pop	r0
    9976:	0b be       	out	0x3b, r0	; 59
    9978:	0f 90       	pop	r0
    997a:	0f be       	out	0x3f, r0	; 63
    997c:	0f 90       	pop	r0
    997e:	1f 90       	pop	r1
    9980:	18 95       	reti

00009982 <__vector_21>:
    9982:	1f 92       	push	r1
    9984:	0f 92       	push	r0
    9986:	0f b6       	in	r0, 0x3f	; 63
    9988:	0f 92       	push	r0
    998a:	11 24       	eor	r1, r1
    998c:	0b b6       	in	r0, 0x3b	; 59
    998e:	0f 92       	push	r0
    9990:	2f 93       	push	r18
    9992:	3f 93       	push	r19
    9994:	4f 93       	push	r20
    9996:	5f 93       	push	r21
    9998:	6f 93       	push	r22
    999a:	7f 93       	push	r23
    999c:	8f 93       	push	r24
    999e:	9f 93       	push	r25
    99a0:	af 93       	push	r26
    99a2:	bf 93       	push	r27
    99a4:	ef 93       	push	r30
    99a6:	ff 93       	push	r31
    99a8:	e0 91 6a 23 	lds	r30, 0x236A	; 0x80236a <tc_tcc1_err_callback>
    99ac:	f0 91 6b 23 	lds	r31, 0x236B	; 0x80236b <tc_tcc1_err_callback+0x1>
    99b0:	30 97       	sbiw	r30, 0x00	; 0
    99b2:	09 f0       	breq	.+2      	; 0x99b6 <__vector_21+0x34>
    99b4:	19 95       	eicall
    99b6:	ff 91       	pop	r31
    99b8:	ef 91       	pop	r30
    99ba:	bf 91       	pop	r27
    99bc:	af 91       	pop	r26
    99be:	9f 91       	pop	r25
    99c0:	8f 91       	pop	r24
    99c2:	7f 91       	pop	r23
    99c4:	6f 91       	pop	r22
    99c6:	5f 91       	pop	r21
    99c8:	4f 91       	pop	r20
    99ca:	3f 91       	pop	r19
    99cc:	2f 91       	pop	r18
    99ce:	0f 90       	pop	r0
    99d0:	0b be       	out	0x3b, r0	; 59
    99d2:	0f 90       	pop	r0
    99d4:	0f be       	out	0x3f, r0	; 63
    99d6:	0f 90       	pop	r0
    99d8:	1f 90       	pop	r1
    99da:	18 95       	reti

000099dc <__vector_22>:
    99dc:	1f 92       	push	r1
    99de:	0f 92       	push	r0
    99e0:	0f b6       	in	r0, 0x3f	; 63
    99e2:	0f 92       	push	r0
    99e4:	11 24       	eor	r1, r1
    99e6:	0b b6       	in	r0, 0x3b	; 59
    99e8:	0f 92       	push	r0
    99ea:	2f 93       	push	r18
    99ec:	3f 93       	push	r19
    99ee:	4f 93       	push	r20
    99f0:	5f 93       	push	r21
    99f2:	6f 93       	push	r22
    99f4:	7f 93       	push	r23
    99f6:	8f 93       	push	r24
    99f8:	9f 93       	push	r25
    99fa:	af 93       	push	r26
    99fc:	bf 93       	push	r27
    99fe:	ef 93       	push	r30
    9a00:	ff 93       	push	r31
    9a02:	e0 91 68 23 	lds	r30, 0x2368	; 0x802368 <tc_tcc1_cca_callback>
    9a06:	f0 91 69 23 	lds	r31, 0x2369	; 0x802369 <tc_tcc1_cca_callback+0x1>
    9a0a:	30 97       	sbiw	r30, 0x00	; 0
    9a0c:	09 f0       	breq	.+2      	; 0x9a10 <__vector_22+0x34>
    9a0e:	19 95       	eicall
    9a10:	ff 91       	pop	r31
    9a12:	ef 91       	pop	r30
    9a14:	bf 91       	pop	r27
    9a16:	af 91       	pop	r26
    9a18:	9f 91       	pop	r25
    9a1a:	8f 91       	pop	r24
    9a1c:	7f 91       	pop	r23
    9a1e:	6f 91       	pop	r22
    9a20:	5f 91       	pop	r21
    9a22:	4f 91       	pop	r20
    9a24:	3f 91       	pop	r19
    9a26:	2f 91       	pop	r18
    9a28:	0f 90       	pop	r0
    9a2a:	0b be       	out	0x3b, r0	; 59
    9a2c:	0f 90       	pop	r0
    9a2e:	0f be       	out	0x3f, r0	; 63
    9a30:	0f 90       	pop	r0
    9a32:	1f 90       	pop	r1
    9a34:	18 95       	reti

00009a36 <__vector_23>:
    9a36:	1f 92       	push	r1
    9a38:	0f 92       	push	r0
    9a3a:	0f b6       	in	r0, 0x3f	; 63
    9a3c:	0f 92       	push	r0
    9a3e:	11 24       	eor	r1, r1
    9a40:	0b b6       	in	r0, 0x3b	; 59
    9a42:	0f 92       	push	r0
    9a44:	2f 93       	push	r18
    9a46:	3f 93       	push	r19
    9a48:	4f 93       	push	r20
    9a4a:	5f 93       	push	r21
    9a4c:	6f 93       	push	r22
    9a4e:	7f 93       	push	r23
    9a50:	8f 93       	push	r24
    9a52:	9f 93       	push	r25
    9a54:	af 93       	push	r26
    9a56:	bf 93       	push	r27
    9a58:	ef 93       	push	r30
    9a5a:	ff 93       	push	r31
    9a5c:	e0 91 66 23 	lds	r30, 0x2366	; 0x802366 <tc_tcc1_ccb_callback>
    9a60:	f0 91 67 23 	lds	r31, 0x2367	; 0x802367 <tc_tcc1_ccb_callback+0x1>
    9a64:	30 97       	sbiw	r30, 0x00	; 0
    9a66:	09 f0       	breq	.+2      	; 0x9a6a <__vector_23+0x34>
    9a68:	19 95       	eicall
    9a6a:	ff 91       	pop	r31
    9a6c:	ef 91       	pop	r30
    9a6e:	bf 91       	pop	r27
    9a70:	af 91       	pop	r26
    9a72:	9f 91       	pop	r25
    9a74:	8f 91       	pop	r24
    9a76:	7f 91       	pop	r23
    9a78:	6f 91       	pop	r22
    9a7a:	5f 91       	pop	r21
    9a7c:	4f 91       	pop	r20
    9a7e:	3f 91       	pop	r19
    9a80:	2f 91       	pop	r18
    9a82:	0f 90       	pop	r0
    9a84:	0b be       	out	0x3b, r0	; 59
    9a86:	0f 90       	pop	r0
    9a88:	0f be       	out	0x3f, r0	; 63
    9a8a:	0f 90       	pop	r0
    9a8c:	1f 90       	pop	r1
    9a8e:	18 95       	reti

00009a90 <__vector_77>:
    9a90:	1f 92       	push	r1
    9a92:	0f 92       	push	r0
    9a94:	0f b6       	in	r0, 0x3f	; 63
    9a96:	0f 92       	push	r0
    9a98:	11 24       	eor	r1, r1
    9a9a:	0b b6       	in	r0, 0x3b	; 59
    9a9c:	0f 92       	push	r0
    9a9e:	2f 93       	push	r18
    9aa0:	3f 93       	push	r19
    9aa2:	4f 93       	push	r20
    9aa4:	5f 93       	push	r21
    9aa6:	6f 93       	push	r22
    9aa8:	7f 93       	push	r23
    9aaa:	8f 93       	push	r24
    9aac:	9f 93       	push	r25
    9aae:	af 93       	push	r26
    9ab0:	bf 93       	push	r27
    9ab2:	ef 93       	push	r30
    9ab4:	ff 93       	push	r31
    9ab6:	e0 91 64 23 	lds	r30, 0x2364	; 0x802364 <tc_tcd0_ovf_callback>
    9aba:	f0 91 65 23 	lds	r31, 0x2365	; 0x802365 <tc_tcd0_ovf_callback+0x1>
    9abe:	30 97       	sbiw	r30, 0x00	; 0
    9ac0:	09 f0       	breq	.+2      	; 0x9ac4 <__vector_77+0x34>
    9ac2:	19 95       	eicall
    9ac4:	ff 91       	pop	r31
    9ac6:	ef 91       	pop	r30
    9ac8:	bf 91       	pop	r27
    9aca:	af 91       	pop	r26
    9acc:	9f 91       	pop	r25
    9ace:	8f 91       	pop	r24
    9ad0:	7f 91       	pop	r23
    9ad2:	6f 91       	pop	r22
    9ad4:	5f 91       	pop	r21
    9ad6:	4f 91       	pop	r20
    9ad8:	3f 91       	pop	r19
    9ada:	2f 91       	pop	r18
    9adc:	0f 90       	pop	r0
    9ade:	0b be       	out	0x3b, r0	; 59
    9ae0:	0f 90       	pop	r0
    9ae2:	0f be       	out	0x3f, r0	; 63
    9ae4:	0f 90       	pop	r0
    9ae6:	1f 90       	pop	r1
    9ae8:	18 95       	reti

00009aea <__vector_78>:
    9aea:	1f 92       	push	r1
    9aec:	0f 92       	push	r0
    9aee:	0f b6       	in	r0, 0x3f	; 63
    9af0:	0f 92       	push	r0
    9af2:	11 24       	eor	r1, r1
    9af4:	0b b6       	in	r0, 0x3b	; 59
    9af6:	0f 92       	push	r0
    9af8:	2f 93       	push	r18
    9afa:	3f 93       	push	r19
    9afc:	4f 93       	push	r20
    9afe:	5f 93       	push	r21
    9b00:	6f 93       	push	r22
    9b02:	7f 93       	push	r23
    9b04:	8f 93       	push	r24
    9b06:	9f 93       	push	r25
    9b08:	af 93       	push	r26
    9b0a:	bf 93       	push	r27
    9b0c:	ef 93       	push	r30
    9b0e:	ff 93       	push	r31
    9b10:	e0 91 62 23 	lds	r30, 0x2362	; 0x802362 <tc_tcd0_err_callback>
    9b14:	f0 91 63 23 	lds	r31, 0x2363	; 0x802363 <tc_tcd0_err_callback+0x1>
    9b18:	30 97       	sbiw	r30, 0x00	; 0
    9b1a:	09 f0       	breq	.+2      	; 0x9b1e <__vector_78+0x34>
    9b1c:	19 95       	eicall
    9b1e:	ff 91       	pop	r31
    9b20:	ef 91       	pop	r30
    9b22:	bf 91       	pop	r27
    9b24:	af 91       	pop	r26
    9b26:	9f 91       	pop	r25
    9b28:	8f 91       	pop	r24
    9b2a:	7f 91       	pop	r23
    9b2c:	6f 91       	pop	r22
    9b2e:	5f 91       	pop	r21
    9b30:	4f 91       	pop	r20
    9b32:	3f 91       	pop	r19
    9b34:	2f 91       	pop	r18
    9b36:	0f 90       	pop	r0
    9b38:	0b be       	out	0x3b, r0	; 59
    9b3a:	0f 90       	pop	r0
    9b3c:	0f be       	out	0x3f, r0	; 63
    9b3e:	0f 90       	pop	r0
    9b40:	1f 90       	pop	r1
    9b42:	18 95       	reti

00009b44 <__vector_79>:
    9b44:	1f 92       	push	r1
    9b46:	0f 92       	push	r0
    9b48:	0f b6       	in	r0, 0x3f	; 63
    9b4a:	0f 92       	push	r0
    9b4c:	11 24       	eor	r1, r1
    9b4e:	0b b6       	in	r0, 0x3b	; 59
    9b50:	0f 92       	push	r0
    9b52:	2f 93       	push	r18
    9b54:	3f 93       	push	r19
    9b56:	4f 93       	push	r20
    9b58:	5f 93       	push	r21
    9b5a:	6f 93       	push	r22
    9b5c:	7f 93       	push	r23
    9b5e:	8f 93       	push	r24
    9b60:	9f 93       	push	r25
    9b62:	af 93       	push	r26
    9b64:	bf 93       	push	r27
    9b66:	ef 93       	push	r30
    9b68:	ff 93       	push	r31
    9b6a:	e0 91 60 23 	lds	r30, 0x2360	; 0x802360 <tc_tcd0_cca_callback>
    9b6e:	f0 91 61 23 	lds	r31, 0x2361	; 0x802361 <tc_tcd0_cca_callback+0x1>
    9b72:	30 97       	sbiw	r30, 0x00	; 0
    9b74:	09 f0       	breq	.+2      	; 0x9b78 <__vector_79+0x34>
    9b76:	19 95       	eicall
    9b78:	ff 91       	pop	r31
    9b7a:	ef 91       	pop	r30
    9b7c:	bf 91       	pop	r27
    9b7e:	af 91       	pop	r26
    9b80:	9f 91       	pop	r25
    9b82:	8f 91       	pop	r24
    9b84:	7f 91       	pop	r23
    9b86:	6f 91       	pop	r22
    9b88:	5f 91       	pop	r21
    9b8a:	4f 91       	pop	r20
    9b8c:	3f 91       	pop	r19
    9b8e:	2f 91       	pop	r18
    9b90:	0f 90       	pop	r0
    9b92:	0b be       	out	0x3b, r0	; 59
    9b94:	0f 90       	pop	r0
    9b96:	0f be       	out	0x3f, r0	; 63
    9b98:	0f 90       	pop	r0
    9b9a:	1f 90       	pop	r1
    9b9c:	18 95       	reti

00009b9e <__vector_80>:
    9b9e:	1f 92       	push	r1
    9ba0:	0f 92       	push	r0
    9ba2:	0f b6       	in	r0, 0x3f	; 63
    9ba4:	0f 92       	push	r0
    9ba6:	11 24       	eor	r1, r1
    9ba8:	0b b6       	in	r0, 0x3b	; 59
    9baa:	0f 92       	push	r0
    9bac:	2f 93       	push	r18
    9bae:	3f 93       	push	r19
    9bb0:	4f 93       	push	r20
    9bb2:	5f 93       	push	r21
    9bb4:	6f 93       	push	r22
    9bb6:	7f 93       	push	r23
    9bb8:	8f 93       	push	r24
    9bba:	9f 93       	push	r25
    9bbc:	af 93       	push	r26
    9bbe:	bf 93       	push	r27
    9bc0:	ef 93       	push	r30
    9bc2:	ff 93       	push	r31
    9bc4:	e0 91 5e 23 	lds	r30, 0x235E	; 0x80235e <tc_tcd0_ccb_callback>
    9bc8:	f0 91 5f 23 	lds	r31, 0x235F	; 0x80235f <tc_tcd0_ccb_callback+0x1>
    9bcc:	30 97       	sbiw	r30, 0x00	; 0
    9bce:	09 f0       	breq	.+2      	; 0x9bd2 <__vector_80+0x34>
    9bd0:	19 95       	eicall
    9bd2:	ff 91       	pop	r31
    9bd4:	ef 91       	pop	r30
    9bd6:	bf 91       	pop	r27
    9bd8:	af 91       	pop	r26
    9bda:	9f 91       	pop	r25
    9bdc:	8f 91       	pop	r24
    9bde:	7f 91       	pop	r23
    9be0:	6f 91       	pop	r22
    9be2:	5f 91       	pop	r21
    9be4:	4f 91       	pop	r20
    9be6:	3f 91       	pop	r19
    9be8:	2f 91       	pop	r18
    9bea:	0f 90       	pop	r0
    9bec:	0b be       	out	0x3b, r0	; 59
    9bee:	0f 90       	pop	r0
    9bf0:	0f be       	out	0x3f, r0	; 63
    9bf2:	0f 90       	pop	r0
    9bf4:	1f 90       	pop	r1
    9bf6:	18 95       	reti

00009bf8 <__vector_81>:
    9bf8:	1f 92       	push	r1
    9bfa:	0f 92       	push	r0
    9bfc:	0f b6       	in	r0, 0x3f	; 63
    9bfe:	0f 92       	push	r0
    9c00:	11 24       	eor	r1, r1
    9c02:	0b b6       	in	r0, 0x3b	; 59
    9c04:	0f 92       	push	r0
    9c06:	2f 93       	push	r18
    9c08:	3f 93       	push	r19
    9c0a:	4f 93       	push	r20
    9c0c:	5f 93       	push	r21
    9c0e:	6f 93       	push	r22
    9c10:	7f 93       	push	r23
    9c12:	8f 93       	push	r24
    9c14:	9f 93       	push	r25
    9c16:	af 93       	push	r26
    9c18:	bf 93       	push	r27
    9c1a:	ef 93       	push	r30
    9c1c:	ff 93       	push	r31
    9c1e:	e0 91 5c 23 	lds	r30, 0x235C	; 0x80235c <tc_tcd0_ccc_callback>
    9c22:	f0 91 5d 23 	lds	r31, 0x235D	; 0x80235d <tc_tcd0_ccc_callback+0x1>
    9c26:	30 97       	sbiw	r30, 0x00	; 0
    9c28:	09 f0       	breq	.+2      	; 0x9c2c <__vector_81+0x34>
    9c2a:	19 95       	eicall
    9c2c:	ff 91       	pop	r31
    9c2e:	ef 91       	pop	r30
    9c30:	bf 91       	pop	r27
    9c32:	af 91       	pop	r26
    9c34:	9f 91       	pop	r25
    9c36:	8f 91       	pop	r24
    9c38:	7f 91       	pop	r23
    9c3a:	6f 91       	pop	r22
    9c3c:	5f 91       	pop	r21
    9c3e:	4f 91       	pop	r20
    9c40:	3f 91       	pop	r19
    9c42:	2f 91       	pop	r18
    9c44:	0f 90       	pop	r0
    9c46:	0b be       	out	0x3b, r0	; 59
    9c48:	0f 90       	pop	r0
    9c4a:	0f be       	out	0x3f, r0	; 63
    9c4c:	0f 90       	pop	r0
    9c4e:	1f 90       	pop	r1
    9c50:	18 95       	reti

00009c52 <__vector_82>:
    9c52:	1f 92       	push	r1
    9c54:	0f 92       	push	r0
    9c56:	0f b6       	in	r0, 0x3f	; 63
    9c58:	0f 92       	push	r0
    9c5a:	11 24       	eor	r1, r1
    9c5c:	0b b6       	in	r0, 0x3b	; 59
    9c5e:	0f 92       	push	r0
    9c60:	2f 93       	push	r18
    9c62:	3f 93       	push	r19
    9c64:	4f 93       	push	r20
    9c66:	5f 93       	push	r21
    9c68:	6f 93       	push	r22
    9c6a:	7f 93       	push	r23
    9c6c:	8f 93       	push	r24
    9c6e:	9f 93       	push	r25
    9c70:	af 93       	push	r26
    9c72:	bf 93       	push	r27
    9c74:	ef 93       	push	r30
    9c76:	ff 93       	push	r31
    9c78:	e0 91 5a 23 	lds	r30, 0x235A	; 0x80235a <tc_tcd0_ccd_callback>
    9c7c:	f0 91 5b 23 	lds	r31, 0x235B	; 0x80235b <tc_tcd0_ccd_callback+0x1>
    9c80:	30 97       	sbiw	r30, 0x00	; 0
    9c82:	09 f0       	breq	.+2      	; 0x9c86 <__vector_82+0x34>
    9c84:	19 95       	eicall
    9c86:	ff 91       	pop	r31
    9c88:	ef 91       	pop	r30
    9c8a:	bf 91       	pop	r27
    9c8c:	af 91       	pop	r26
    9c8e:	9f 91       	pop	r25
    9c90:	8f 91       	pop	r24
    9c92:	7f 91       	pop	r23
    9c94:	6f 91       	pop	r22
    9c96:	5f 91       	pop	r21
    9c98:	4f 91       	pop	r20
    9c9a:	3f 91       	pop	r19
    9c9c:	2f 91       	pop	r18
    9c9e:	0f 90       	pop	r0
    9ca0:	0b be       	out	0x3b, r0	; 59
    9ca2:	0f 90       	pop	r0
    9ca4:	0f be       	out	0x3f, r0	; 63
    9ca6:	0f 90       	pop	r0
    9ca8:	1f 90       	pop	r1
    9caa:	18 95       	reti

00009cac <__vector_83>:
    9cac:	1f 92       	push	r1
    9cae:	0f 92       	push	r0
    9cb0:	0f b6       	in	r0, 0x3f	; 63
    9cb2:	0f 92       	push	r0
    9cb4:	11 24       	eor	r1, r1
    9cb6:	0b b6       	in	r0, 0x3b	; 59
    9cb8:	0f 92       	push	r0
    9cba:	2f 93       	push	r18
    9cbc:	3f 93       	push	r19
    9cbe:	4f 93       	push	r20
    9cc0:	5f 93       	push	r21
    9cc2:	6f 93       	push	r22
    9cc4:	7f 93       	push	r23
    9cc6:	8f 93       	push	r24
    9cc8:	9f 93       	push	r25
    9cca:	af 93       	push	r26
    9ccc:	bf 93       	push	r27
    9cce:	ef 93       	push	r30
    9cd0:	ff 93       	push	r31
    9cd2:	e0 91 58 23 	lds	r30, 0x2358	; 0x802358 <tc_tcd1_ovf_callback>
    9cd6:	f0 91 59 23 	lds	r31, 0x2359	; 0x802359 <tc_tcd1_ovf_callback+0x1>
    9cda:	30 97       	sbiw	r30, 0x00	; 0
    9cdc:	09 f0       	breq	.+2      	; 0x9ce0 <__vector_83+0x34>
    9cde:	19 95       	eicall
    9ce0:	ff 91       	pop	r31
    9ce2:	ef 91       	pop	r30
    9ce4:	bf 91       	pop	r27
    9ce6:	af 91       	pop	r26
    9ce8:	9f 91       	pop	r25
    9cea:	8f 91       	pop	r24
    9cec:	7f 91       	pop	r23
    9cee:	6f 91       	pop	r22
    9cf0:	5f 91       	pop	r21
    9cf2:	4f 91       	pop	r20
    9cf4:	3f 91       	pop	r19
    9cf6:	2f 91       	pop	r18
    9cf8:	0f 90       	pop	r0
    9cfa:	0b be       	out	0x3b, r0	; 59
    9cfc:	0f 90       	pop	r0
    9cfe:	0f be       	out	0x3f, r0	; 63
    9d00:	0f 90       	pop	r0
    9d02:	1f 90       	pop	r1
    9d04:	18 95       	reti

00009d06 <__vector_84>:
    9d06:	1f 92       	push	r1
    9d08:	0f 92       	push	r0
    9d0a:	0f b6       	in	r0, 0x3f	; 63
    9d0c:	0f 92       	push	r0
    9d0e:	11 24       	eor	r1, r1
    9d10:	0b b6       	in	r0, 0x3b	; 59
    9d12:	0f 92       	push	r0
    9d14:	2f 93       	push	r18
    9d16:	3f 93       	push	r19
    9d18:	4f 93       	push	r20
    9d1a:	5f 93       	push	r21
    9d1c:	6f 93       	push	r22
    9d1e:	7f 93       	push	r23
    9d20:	8f 93       	push	r24
    9d22:	9f 93       	push	r25
    9d24:	af 93       	push	r26
    9d26:	bf 93       	push	r27
    9d28:	ef 93       	push	r30
    9d2a:	ff 93       	push	r31
    9d2c:	e0 91 56 23 	lds	r30, 0x2356	; 0x802356 <tc_tcd1_err_callback>
    9d30:	f0 91 57 23 	lds	r31, 0x2357	; 0x802357 <tc_tcd1_err_callback+0x1>
    9d34:	30 97       	sbiw	r30, 0x00	; 0
    9d36:	09 f0       	breq	.+2      	; 0x9d3a <__vector_84+0x34>
    9d38:	19 95       	eicall
    9d3a:	ff 91       	pop	r31
    9d3c:	ef 91       	pop	r30
    9d3e:	bf 91       	pop	r27
    9d40:	af 91       	pop	r26
    9d42:	9f 91       	pop	r25
    9d44:	8f 91       	pop	r24
    9d46:	7f 91       	pop	r23
    9d48:	6f 91       	pop	r22
    9d4a:	5f 91       	pop	r21
    9d4c:	4f 91       	pop	r20
    9d4e:	3f 91       	pop	r19
    9d50:	2f 91       	pop	r18
    9d52:	0f 90       	pop	r0
    9d54:	0b be       	out	0x3b, r0	; 59
    9d56:	0f 90       	pop	r0
    9d58:	0f be       	out	0x3f, r0	; 63
    9d5a:	0f 90       	pop	r0
    9d5c:	1f 90       	pop	r1
    9d5e:	18 95       	reti

00009d60 <__vector_85>:
    9d60:	1f 92       	push	r1
    9d62:	0f 92       	push	r0
    9d64:	0f b6       	in	r0, 0x3f	; 63
    9d66:	0f 92       	push	r0
    9d68:	11 24       	eor	r1, r1
    9d6a:	0b b6       	in	r0, 0x3b	; 59
    9d6c:	0f 92       	push	r0
    9d6e:	2f 93       	push	r18
    9d70:	3f 93       	push	r19
    9d72:	4f 93       	push	r20
    9d74:	5f 93       	push	r21
    9d76:	6f 93       	push	r22
    9d78:	7f 93       	push	r23
    9d7a:	8f 93       	push	r24
    9d7c:	9f 93       	push	r25
    9d7e:	af 93       	push	r26
    9d80:	bf 93       	push	r27
    9d82:	ef 93       	push	r30
    9d84:	ff 93       	push	r31
    9d86:	e0 91 54 23 	lds	r30, 0x2354	; 0x802354 <tc_tcd1_cca_callback>
    9d8a:	f0 91 55 23 	lds	r31, 0x2355	; 0x802355 <tc_tcd1_cca_callback+0x1>
    9d8e:	30 97       	sbiw	r30, 0x00	; 0
    9d90:	09 f0       	breq	.+2      	; 0x9d94 <__vector_85+0x34>
    9d92:	19 95       	eicall
    9d94:	ff 91       	pop	r31
    9d96:	ef 91       	pop	r30
    9d98:	bf 91       	pop	r27
    9d9a:	af 91       	pop	r26
    9d9c:	9f 91       	pop	r25
    9d9e:	8f 91       	pop	r24
    9da0:	7f 91       	pop	r23
    9da2:	6f 91       	pop	r22
    9da4:	5f 91       	pop	r21
    9da6:	4f 91       	pop	r20
    9da8:	3f 91       	pop	r19
    9daa:	2f 91       	pop	r18
    9dac:	0f 90       	pop	r0
    9dae:	0b be       	out	0x3b, r0	; 59
    9db0:	0f 90       	pop	r0
    9db2:	0f be       	out	0x3f, r0	; 63
    9db4:	0f 90       	pop	r0
    9db6:	1f 90       	pop	r1
    9db8:	18 95       	reti

00009dba <__vector_86>:
    9dba:	1f 92       	push	r1
    9dbc:	0f 92       	push	r0
    9dbe:	0f b6       	in	r0, 0x3f	; 63
    9dc0:	0f 92       	push	r0
    9dc2:	11 24       	eor	r1, r1
    9dc4:	0b b6       	in	r0, 0x3b	; 59
    9dc6:	0f 92       	push	r0
    9dc8:	2f 93       	push	r18
    9dca:	3f 93       	push	r19
    9dcc:	4f 93       	push	r20
    9dce:	5f 93       	push	r21
    9dd0:	6f 93       	push	r22
    9dd2:	7f 93       	push	r23
    9dd4:	8f 93       	push	r24
    9dd6:	9f 93       	push	r25
    9dd8:	af 93       	push	r26
    9dda:	bf 93       	push	r27
    9ddc:	ef 93       	push	r30
    9dde:	ff 93       	push	r31
    9de0:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <tc_tcd1_ccb_callback>
    9de4:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <tc_tcd1_ccb_callback+0x1>
    9de8:	30 97       	sbiw	r30, 0x00	; 0
    9dea:	09 f0       	breq	.+2      	; 0x9dee <__vector_86+0x34>
    9dec:	19 95       	eicall
    9dee:	ff 91       	pop	r31
    9df0:	ef 91       	pop	r30
    9df2:	bf 91       	pop	r27
    9df4:	af 91       	pop	r26
    9df6:	9f 91       	pop	r25
    9df8:	8f 91       	pop	r24
    9dfa:	7f 91       	pop	r23
    9dfc:	6f 91       	pop	r22
    9dfe:	5f 91       	pop	r21
    9e00:	4f 91       	pop	r20
    9e02:	3f 91       	pop	r19
    9e04:	2f 91       	pop	r18
    9e06:	0f 90       	pop	r0
    9e08:	0b be       	out	0x3b, r0	; 59
    9e0a:	0f 90       	pop	r0
    9e0c:	0f be       	out	0x3f, r0	; 63
    9e0e:	0f 90       	pop	r0
    9e10:	1f 90       	pop	r1
    9e12:	18 95       	reti

00009e14 <__vector_47>:
    9e14:	1f 92       	push	r1
    9e16:	0f 92       	push	r0
    9e18:	0f b6       	in	r0, 0x3f	; 63
    9e1a:	0f 92       	push	r0
    9e1c:	11 24       	eor	r1, r1
    9e1e:	0b b6       	in	r0, 0x3b	; 59
    9e20:	0f 92       	push	r0
    9e22:	2f 93       	push	r18
    9e24:	3f 93       	push	r19
    9e26:	4f 93       	push	r20
    9e28:	5f 93       	push	r21
    9e2a:	6f 93       	push	r22
    9e2c:	7f 93       	push	r23
    9e2e:	8f 93       	push	r24
    9e30:	9f 93       	push	r25
    9e32:	af 93       	push	r26
    9e34:	bf 93       	push	r27
    9e36:	ef 93       	push	r30
    9e38:	ff 93       	push	r31
    9e3a:	e0 91 50 23 	lds	r30, 0x2350	; 0x802350 <tc_tce0_ovf_callback>
    9e3e:	f0 91 51 23 	lds	r31, 0x2351	; 0x802351 <tc_tce0_ovf_callback+0x1>
    9e42:	30 97       	sbiw	r30, 0x00	; 0
    9e44:	09 f0       	breq	.+2      	; 0x9e48 <__vector_47+0x34>
    9e46:	19 95       	eicall
    9e48:	ff 91       	pop	r31
    9e4a:	ef 91       	pop	r30
    9e4c:	bf 91       	pop	r27
    9e4e:	af 91       	pop	r26
    9e50:	9f 91       	pop	r25
    9e52:	8f 91       	pop	r24
    9e54:	7f 91       	pop	r23
    9e56:	6f 91       	pop	r22
    9e58:	5f 91       	pop	r21
    9e5a:	4f 91       	pop	r20
    9e5c:	3f 91       	pop	r19
    9e5e:	2f 91       	pop	r18
    9e60:	0f 90       	pop	r0
    9e62:	0b be       	out	0x3b, r0	; 59
    9e64:	0f 90       	pop	r0
    9e66:	0f be       	out	0x3f, r0	; 63
    9e68:	0f 90       	pop	r0
    9e6a:	1f 90       	pop	r1
    9e6c:	18 95       	reti

00009e6e <__vector_48>:
    9e6e:	1f 92       	push	r1
    9e70:	0f 92       	push	r0
    9e72:	0f b6       	in	r0, 0x3f	; 63
    9e74:	0f 92       	push	r0
    9e76:	11 24       	eor	r1, r1
    9e78:	0b b6       	in	r0, 0x3b	; 59
    9e7a:	0f 92       	push	r0
    9e7c:	2f 93       	push	r18
    9e7e:	3f 93       	push	r19
    9e80:	4f 93       	push	r20
    9e82:	5f 93       	push	r21
    9e84:	6f 93       	push	r22
    9e86:	7f 93       	push	r23
    9e88:	8f 93       	push	r24
    9e8a:	9f 93       	push	r25
    9e8c:	af 93       	push	r26
    9e8e:	bf 93       	push	r27
    9e90:	ef 93       	push	r30
    9e92:	ff 93       	push	r31
    9e94:	e0 91 4e 23 	lds	r30, 0x234E	; 0x80234e <tc_tce0_err_callback>
    9e98:	f0 91 4f 23 	lds	r31, 0x234F	; 0x80234f <tc_tce0_err_callback+0x1>
    9e9c:	30 97       	sbiw	r30, 0x00	; 0
    9e9e:	09 f0       	breq	.+2      	; 0x9ea2 <__vector_48+0x34>
    9ea0:	19 95       	eicall
    9ea2:	ff 91       	pop	r31
    9ea4:	ef 91       	pop	r30
    9ea6:	bf 91       	pop	r27
    9ea8:	af 91       	pop	r26
    9eaa:	9f 91       	pop	r25
    9eac:	8f 91       	pop	r24
    9eae:	7f 91       	pop	r23
    9eb0:	6f 91       	pop	r22
    9eb2:	5f 91       	pop	r21
    9eb4:	4f 91       	pop	r20
    9eb6:	3f 91       	pop	r19
    9eb8:	2f 91       	pop	r18
    9eba:	0f 90       	pop	r0
    9ebc:	0b be       	out	0x3b, r0	; 59
    9ebe:	0f 90       	pop	r0
    9ec0:	0f be       	out	0x3f, r0	; 63
    9ec2:	0f 90       	pop	r0
    9ec4:	1f 90       	pop	r1
    9ec6:	18 95       	reti

00009ec8 <__vector_49>:
    9ec8:	1f 92       	push	r1
    9eca:	0f 92       	push	r0
    9ecc:	0f b6       	in	r0, 0x3f	; 63
    9ece:	0f 92       	push	r0
    9ed0:	11 24       	eor	r1, r1
    9ed2:	0b b6       	in	r0, 0x3b	; 59
    9ed4:	0f 92       	push	r0
    9ed6:	2f 93       	push	r18
    9ed8:	3f 93       	push	r19
    9eda:	4f 93       	push	r20
    9edc:	5f 93       	push	r21
    9ede:	6f 93       	push	r22
    9ee0:	7f 93       	push	r23
    9ee2:	8f 93       	push	r24
    9ee4:	9f 93       	push	r25
    9ee6:	af 93       	push	r26
    9ee8:	bf 93       	push	r27
    9eea:	ef 93       	push	r30
    9eec:	ff 93       	push	r31
    9eee:	e0 91 4c 23 	lds	r30, 0x234C	; 0x80234c <tc_tce0_cca_callback>
    9ef2:	f0 91 4d 23 	lds	r31, 0x234D	; 0x80234d <tc_tce0_cca_callback+0x1>
    9ef6:	30 97       	sbiw	r30, 0x00	; 0
    9ef8:	09 f0       	breq	.+2      	; 0x9efc <__vector_49+0x34>
    9efa:	19 95       	eicall
    9efc:	ff 91       	pop	r31
    9efe:	ef 91       	pop	r30
    9f00:	bf 91       	pop	r27
    9f02:	af 91       	pop	r26
    9f04:	9f 91       	pop	r25
    9f06:	8f 91       	pop	r24
    9f08:	7f 91       	pop	r23
    9f0a:	6f 91       	pop	r22
    9f0c:	5f 91       	pop	r21
    9f0e:	4f 91       	pop	r20
    9f10:	3f 91       	pop	r19
    9f12:	2f 91       	pop	r18
    9f14:	0f 90       	pop	r0
    9f16:	0b be       	out	0x3b, r0	; 59
    9f18:	0f 90       	pop	r0
    9f1a:	0f be       	out	0x3f, r0	; 63
    9f1c:	0f 90       	pop	r0
    9f1e:	1f 90       	pop	r1
    9f20:	18 95       	reti

00009f22 <__vector_50>:
    9f22:	1f 92       	push	r1
    9f24:	0f 92       	push	r0
    9f26:	0f b6       	in	r0, 0x3f	; 63
    9f28:	0f 92       	push	r0
    9f2a:	11 24       	eor	r1, r1
    9f2c:	0b b6       	in	r0, 0x3b	; 59
    9f2e:	0f 92       	push	r0
    9f30:	2f 93       	push	r18
    9f32:	3f 93       	push	r19
    9f34:	4f 93       	push	r20
    9f36:	5f 93       	push	r21
    9f38:	6f 93       	push	r22
    9f3a:	7f 93       	push	r23
    9f3c:	8f 93       	push	r24
    9f3e:	9f 93       	push	r25
    9f40:	af 93       	push	r26
    9f42:	bf 93       	push	r27
    9f44:	ef 93       	push	r30
    9f46:	ff 93       	push	r31
    9f48:	e0 91 4a 23 	lds	r30, 0x234A	; 0x80234a <tc_tce0_ccb_callback>
    9f4c:	f0 91 4b 23 	lds	r31, 0x234B	; 0x80234b <tc_tce0_ccb_callback+0x1>
    9f50:	30 97       	sbiw	r30, 0x00	; 0
    9f52:	09 f0       	breq	.+2      	; 0x9f56 <__vector_50+0x34>
    9f54:	19 95       	eicall
    9f56:	ff 91       	pop	r31
    9f58:	ef 91       	pop	r30
    9f5a:	bf 91       	pop	r27
    9f5c:	af 91       	pop	r26
    9f5e:	9f 91       	pop	r25
    9f60:	8f 91       	pop	r24
    9f62:	7f 91       	pop	r23
    9f64:	6f 91       	pop	r22
    9f66:	5f 91       	pop	r21
    9f68:	4f 91       	pop	r20
    9f6a:	3f 91       	pop	r19
    9f6c:	2f 91       	pop	r18
    9f6e:	0f 90       	pop	r0
    9f70:	0b be       	out	0x3b, r0	; 59
    9f72:	0f 90       	pop	r0
    9f74:	0f be       	out	0x3f, r0	; 63
    9f76:	0f 90       	pop	r0
    9f78:	1f 90       	pop	r1
    9f7a:	18 95       	reti

00009f7c <__vector_51>:
    9f7c:	1f 92       	push	r1
    9f7e:	0f 92       	push	r0
    9f80:	0f b6       	in	r0, 0x3f	; 63
    9f82:	0f 92       	push	r0
    9f84:	11 24       	eor	r1, r1
    9f86:	0b b6       	in	r0, 0x3b	; 59
    9f88:	0f 92       	push	r0
    9f8a:	2f 93       	push	r18
    9f8c:	3f 93       	push	r19
    9f8e:	4f 93       	push	r20
    9f90:	5f 93       	push	r21
    9f92:	6f 93       	push	r22
    9f94:	7f 93       	push	r23
    9f96:	8f 93       	push	r24
    9f98:	9f 93       	push	r25
    9f9a:	af 93       	push	r26
    9f9c:	bf 93       	push	r27
    9f9e:	ef 93       	push	r30
    9fa0:	ff 93       	push	r31
    9fa2:	e0 91 48 23 	lds	r30, 0x2348	; 0x802348 <tc_tce0_ccc_callback>
    9fa6:	f0 91 49 23 	lds	r31, 0x2349	; 0x802349 <tc_tce0_ccc_callback+0x1>
    9faa:	30 97       	sbiw	r30, 0x00	; 0
    9fac:	09 f0       	breq	.+2      	; 0x9fb0 <__vector_51+0x34>
    9fae:	19 95       	eicall
    9fb0:	ff 91       	pop	r31
    9fb2:	ef 91       	pop	r30
    9fb4:	bf 91       	pop	r27
    9fb6:	af 91       	pop	r26
    9fb8:	9f 91       	pop	r25
    9fba:	8f 91       	pop	r24
    9fbc:	7f 91       	pop	r23
    9fbe:	6f 91       	pop	r22
    9fc0:	5f 91       	pop	r21
    9fc2:	4f 91       	pop	r20
    9fc4:	3f 91       	pop	r19
    9fc6:	2f 91       	pop	r18
    9fc8:	0f 90       	pop	r0
    9fca:	0b be       	out	0x3b, r0	; 59
    9fcc:	0f 90       	pop	r0
    9fce:	0f be       	out	0x3f, r0	; 63
    9fd0:	0f 90       	pop	r0
    9fd2:	1f 90       	pop	r1
    9fd4:	18 95       	reti

00009fd6 <__vector_52>:
    9fd6:	1f 92       	push	r1
    9fd8:	0f 92       	push	r0
    9fda:	0f b6       	in	r0, 0x3f	; 63
    9fdc:	0f 92       	push	r0
    9fde:	11 24       	eor	r1, r1
    9fe0:	0b b6       	in	r0, 0x3b	; 59
    9fe2:	0f 92       	push	r0
    9fe4:	2f 93       	push	r18
    9fe6:	3f 93       	push	r19
    9fe8:	4f 93       	push	r20
    9fea:	5f 93       	push	r21
    9fec:	6f 93       	push	r22
    9fee:	7f 93       	push	r23
    9ff0:	8f 93       	push	r24
    9ff2:	9f 93       	push	r25
    9ff4:	af 93       	push	r26
    9ff6:	bf 93       	push	r27
    9ff8:	ef 93       	push	r30
    9ffa:	ff 93       	push	r31
    9ffc:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <tc_tce0_ccd_callback>
    a000:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <tc_tce0_ccd_callback+0x1>
    a004:	30 97       	sbiw	r30, 0x00	; 0
    a006:	09 f0       	breq	.+2      	; 0xa00a <__vector_52+0x34>
    a008:	19 95       	eicall
    a00a:	ff 91       	pop	r31
    a00c:	ef 91       	pop	r30
    a00e:	bf 91       	pop	r27
    a010:	af 91       	pop	r26
    a012:	9f 91       	pop	r25
    a014:	8f 91       	pop	r24
    a016:	7f 91       	pop	r23
    a018:	6f 91       	pop	r22
    a01a:	5f 91       	pop	r21
    a01c:	4f 91       	pop	r20
    a01e:	3f 91       	pop	r19
    a020:	2f 91       	pop	r18
    a022:	0f 90       	pop	r0
    a024:	0b be       	out	0x3b, r0	; 59
    a026:	0f 90       	pop	r0
    a028:	0f be       	out	0x3f, r0	; 63
    a02a:	0f 90       	pop	r0
    a02c:	1f 90       	pop	r1
    a02e:	18 95       	reti

0000a030 <__vector_53>:
    a030:	1f 92       	push	r1
    a032:	0f 92       	push	r0
    a034:	0f b6       	in	r0, 0x3f	; 63
    a036:	0f 92       	push	r0
    a038:	11 24       	eor	r1, r1
    a03a:	0b b6       	in	r0, 0x3b	; 59
    a03c:	0f 92       	push	r0
    a03e:	2f 93       	push	r18
    a040:	3f 93       	push	r19
    a042:	4f 93       	push	r20
    a044:	5f 93       	push	r21
    a046:	6f 93       	push	r22
    a048:	7f 93       	push	r23
    a04a:	8f 93       	push	r24
    a04c:	9f 93       	push	r25
    a04e:	af 93       	push	r26
    a050:	bf 93       	push	r27
    a052:	ef 93       	push	r30
    a054:	ff 93       	push	r31
    a056:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <tc_tce1_ovf_callback>
    a05a:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <tc_tce1_ovf_callback+0x1>
    a05e:	30 97       	sbiw	r30, 0x00	; 0
    a060:	09 f0       	breq	.+2      	; 0xa064 <__vector_53+0x34>
    a062:	19 95       	eicall
    a064:	ff 91       	pop	r31
    a066:	ef 91       	pop	r30
    a068:	bf 91       	pop	r27
    a06a:	af 91       	pop	r26
    a06c:	9f 91       	pop	r25
    a06e:	8f 91       	pop	r24
    a070:	7f 91       	pop	r23
    a072:	6f 91       	pop	r22
    a074:	5f 91       	pop	r21
    a076:	4f 91       	pop	r20
    a078:	3f 91       	pop	r19
    a07a:	2f 91       	pop	r18
    a07c:	0f 90       	pop	r0
    a07e:	0b be       	out	0x3b, r0	; 59
    a080:	0f 90       	pop	r0
    a082:	0f be       	out	0x3f, r0	; 63
    a084:	0f 90       	pop	r0
    a086:	1f 90       	pop	r1
    a088:	18 95       	reti

0000a08a <__vector_54>:
    a08a:	1f 92       	push	r1
    a08c:	0f 92       	push	r0
    a08e:	0f b6       	in	r0, 0x3f	; 63
    a090:	0f 92       	push	r0
    a092:	11 24       	eor	r1, r1
    a094:	0b b6       	in	r0, 0x3b	; 59
    a096:	0f 92       	push	r0
    a098:	2f 93       	push	r18
    a09a:	3f 93       	push	r19
    a09c:	4f 93       	push	r20
    a09e:	5f 93       	push	r21
    a0a0:	6f 93       	push	r22
    a0a2:	7f 93       	push	r23
    a0a4:	8f 93       	push	r24
    a0a6:	9f 93       	push	r25
    a0a8:	af 93       	push	r26
    a0aa:	bf 93       	push	r27
    a0ac:	ef 93       	push	r30
    a0ae:	ff 93       	push	r31
    a0b0:	e0 91 42 23 	lds	r30, 0x2342	; 0x802342 <tc_tce1_err_callback>
    a0b4:	f0 91 43 23 	lds	r31, 0x2343	; 0x802343 <tc_tce1_err_callback+0x1>
    a0b8:	30 97       	sbiw	r30, 0x00	; 0
    a0ba:	09 f0       	breq	.+2      	; 0xa0be <__vector_54+0x34>
    a0bc:	19 95       	eicall
    a0be:	ff 91       	pop	r31
    a0c0:	ef 91       	pop	r30
    a0c2:	bf 91       	pop	r27
    a0c4:	af 91       	pop	r26
    a0c6:	9f 91       	pop	r25
    a0c8:	8f 91       	pop	r24
    a0ca:	7f 91       	pop	r23
    a0cc:	6f 91       	pop	r22
    a0ce:	5f 91       	pop	r21
    a0d0:	4f 91       	pop	r20
    a0d2:	3f 91       	pop	r19
    a0d4:	2f 91       	pop	r18
    a0d6:	0f 90       	pop	r0
    a0d8:	0b be       	out	0x3b, r0	; 59
    a0da:	0f 90       	pop	r0
    a0dc:	0f be       	out	0x3f, r0	; 63
    a0de:	0f 90       	pop	r0
    a0e0:	1f 90       	pop	r1
    a0e2:	18 95       	reti

0000a0e4 <__vector_55>:
    a0e4:	1f 92       	push	r1
    a0e6:	0f 92       	push	r0
    a0e8:	0f b6       	in	r0, 0x3f	; 63
    a0ea:	0f 92       	push	r0
    a0ec:	11 24       	eor	r1, r1
    a0ee:	0b b6       	in	r0, 0x3b	; 59
    a0f0:	0f 92       	push	r0
    a0f2:	2f 93       	push	r18
    a0f4:	3f 93       	push	r19
    a0f6:	4f 93       	push	r20
    a0f8:	5f 93       	push	r21
    a0fa:	6f 93       	push	r22
    a0fc:	7f 93       	push	r23
    a0fe:	8f 93       	push	r24
    a100:	9f 93       	push	r25
    a102:	af 93       	push	r26
    a104:	bf 93       	push	r27
    a106:	ef 93       	push	r30
    a108:	ff 93       	push	r31
    a10a:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <tc_tce1_cca_callback>
    a10e:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <tc_tce1_cca_callback+0x1>
    a112:	30 97       	sbiw	r30, 0x00	; 0
    a114:	09 f0       	breq	.+2      	; 0xa118 <__vector_55+0x34>
    a116:	19 95       	eicall
    a118:	ff 91       	pop	r31
    a11a:	ef 91       	pop	r30
    a11c:	bf 91       	pop	r27
    a11e:	af 91       	pop	r26
    a120:	9f 91       	pop	r25
    a122:	8f 91       	pop	r24
    a124:	7f 91       	pop	r23
    a126:	6f 91       	pop	r22
    a128:	5f 91       	pop	r21
    a12a:	4f 91       	pop	r20
    a12c:	3f 91       	pop	r19
    a12e:	2f 91       	pop	r18
    a130:	0f 90       	pop	r0
    a132:	0b be       	out	0x3b, r0	; 59
    a134:	0f 90       	pop	r0
    a136:	0f be       	out	0x3f, r0	; 63
    a138:	0f 90       	pop	r0
    a13a:	1f 90       	pop	r1
    a13c:	18 95       	reti

0000a13e <__vector_56>:
    a13e:	1f 92       	push	r1
    a140:	0f 92       	push	r0
    a142:	0f b6       	in	r0, 0x3f	; 63
    a144:	0f 92       	push	r0
    a146:	11 24       	eor	r1, r1
    a148:	0b b6       	in	r0, 0x3b	; 59
    a14a:	0f 92       	push	r0
    a14c:	2f 93       	push	r18
    a14e:	3f 93       	push	r19
    a150:	4f 93       	push	r20
    a152:	5f 93       	push	r21
    a154:	6f 93       	push	r22
    a156:	7f 93       	push	r23
    a158:	8f 93       	push	r24
    a15a:	9f 93       	push	r25
    a15c:	af 93       	push	r26
    a15e:	bf 93       	push	r27
    a160:	ef 93       	push	r30
    a162:	ff 93       	push	r31
    a164:	e0 91 3e 23 	lds	r30, 0x233E	; 0x80233e <tc_tce1_ccb_callback>
    a168:	f0 91 3f 23 	lds	r31, 0x233F	; 0x80233f <tc_tce1_ccb_callback+0x1>
    a16c:	30 97       	sbiw	r30, 0x00	; 0
    a16e:	09 f0       	breq	.+2      	; 0xa172 <__vector_56+0x34>
    a170:	19 95       	eicall
    a172:	ff 91       	pop	r31
    a174:	ef 91       	pop	r30
    a176:	bf 91       	pop	r27
    a178:	af 91       	pop	r26
    a17a:	9f 91       	pop	r25
    a17c:	8f 91       	pop	r24
    a17e:	7f 91       	pop	r23
    a180:	6f 91       	pop	r22
    a182:	5f 91       	pop	r21
    a184:	4f 91       	pop	r20
    a186:	3f 91       	pop	r19
    a188:	2f 91       	pop	r18
    a18a:	0f 90       	pop	r0
    a18c:	0b be       	out	0x3b, r0	; 59
    a18e:	0f 90       	pop	r0
    a190:	0f be       	out	0x3f, r0	; 63
    a192:	0f 90       	pop	r0
    a194:	1f 90       	pop	r1
    a196:	18 95       	reti

0000a198 <__vector_108>:
    a198:	1f 92       	push	r1
    a19a:	0f 92       	push	r0
    a19c:	0f b6       	in	r0, 0x3f	; 63
    a19e:	0f 92       	push	r0
    a1a0:	11 24       	eor	r1, r1
    a1a2:	0b b6       	in	r0, 0x3b	; 59
    a1a4:	0f 92       	push	r0
    a1a6:	2f 93       	push	r18
    a1a8:	3f 93       	push	r19
    a1aa:	4f 93       	push	r20
    a1ac:	5f 93       	push	r21
    a1ae:	6f 93       	push	r22
    a1b0:	7f 93       	push	r23
    a1b2:	8f 93       	push	r24
    a1b4:	9f 93       	push	r25
    a1b6:	af 93       	push	r26
    a1b8:	bf 93       	push	r27
    a1ba:	ef 93       	push	r30
    a1bc:	ff 93       	push	r31
    a1be:	e0 91 3c 23 	lds	r30, 0x233C	; 0x80233c <tc_tcf0_ovf_callback>
    a1c2:	f0 91 3d 23 	lds	r31, 0x233D	; 0x80233d <tc_tcf0_ovf_callback+0x1>
    a1c6:	30 97       	sbiw	r30, 0x00	; 0
    a1c8:	09 f0       	breq	.+2      	; 0xa1cc <__vector_108+0x34>
    a1ca:	19 95       	eicall
    a1cc:	ff 91       	pop	r31
    a1ce:	ef 91       	pop	r30
    a1d0:	bf 91       	pop	r27
    a1d2:	af 91       	pop	r26
    a1d4:	9f 91       	pop	r25
    a1d6:	8f 91       	pop	r24
    a1d8:	7f 91       	pop	r23
    a1da:	6f 91       	pop	r22
    a1dc:	5f 91       	pop	r21
    a1de:	4f 91       	pop	r20
    a1e0:	3f 91       	pop	r19
    a1e2:	2f 91       	pop	r18
    a1e4:	0f 90       	pop	r0
    a1e6:	0b be       	out	0x3b, r0	; 59
    a1e8:	0f 90       	pop	r0
    a1ea:	0f be       	out	0x3f, r0	; 63
    a1ec:	0f 90       	pop	r0
    a1ee:	1f 90       	pop	r1
    a1f0:	18 95       	reti

0000a1f2 <__vector_109>:
    a1f2:	1f 92       	push	r1
    a1f4:	0f 92       	push	r0
    a1f6:	0f b6       	in	r0, 0x3f	; 63
    a1f8:	0f 92       	push	r0
    a1fa:	11 24       	eor	r1, r1
    a1fc:	0b b6       	in	r0, 0x3b	; 59
    a1fe:	0f 92       	push	r0
    a200:	2f 93       	push	r18
    a202:	3f 93       	push	r19
    a204:	4f 93       	push	r20
    a206:	5f 93       	push	r21
    a208:	6f 93       	push	r22
    a20a:	7f 93       	push	r23
    a20c:	8f 93       	push	r24
    a20e:	9f 93       	push	r25
    a210:	af 93       	push	r26
    a212:	bf 93       	push	r27
    a214:	ef 93       	push	r30
    a216:	ff 93       	push	r31
    a218:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <tc_tcf0_err_callback>
    a21c:	f0 91 3b 23 	lds	r31, 0x233B	; 0x80233b <tc_tcf0_err_callback+0x1>
    a220:	30 97       	sbiw	r30, 0x00	; 0
    a222:	09 f0       	breq	.+2      	; 0xa226 <__vector_109+0x34>
    a224:	19 95       	eicall
    a226:	ff 91       	pop	r31
    a228:	ef 91       	pop	r30
    a22a:	bf 91       	pop	r27
    a22c:	af 91       	pop	r26
    a22e:	9f 91       	pop	r25
    a230:	8f 91       	pop	r24
    a232:	7f 91       	pop	r23
    a234:	6f 91       	pop	r22
    a236:	5f 91       	pop	r21
    a238:	4f 91       	pop	r20
    a23a:	3f 91       	pop	r19
    a23c:	2f 91       	pop	r18
    a23e:	0f 90       	pop	r0
    a240:	0b be       	out	0x3b, r0	; 59
    a242:	0f 90       	pop	r0
    a244:	0f be       	out	0x3f, r0	; 63
    a246:	0f 90       	pop	r0
    a248:	1f 90       	pop	r1
    a24a:	18 95       	reti

0000a24c <__vector_110>:
    a24c:	1f 92       	push	r1
    a24e:	0f 92       	push	r0
    a250:	0f b6       	in	r0, 0x3f	; 63
    a252:	0f 92       	push	r0
    a254:	11 24       	eor	r1, r1
    a256:	0b b6       	in	r0, 0x3b	; 59
    a258:	0f 92       	push	r0
    a25a:	2f 93       	push	r18
    a25c:	3f 93       	push	r19
    a25e:	4f 93       	push	r20
    a260:	5f 93       	push	r21
    a262:	6f 93       	push	r22
    a264:	7f 93       	push	r23
    a266:	8f 93       	push	r24
    a268:	9f 93       	push	r25
    a26a:	af 93       	push	r26
    a26c:	bf 93       	push	r27
    a26e:	ef 93       	push	r30
    a270:	ff 93       	push	r31
    a272:	e0 91 38 23 	lds	r30, 0x2338	; 0x802338 <tc_tcf0_cca_callback>
    a276:	f0 91 39 23 	lds	r31, 0x2339	; 0x802339 <tc_tcf0_cca_callback+0x1>
    a27a:	30 97       	sbiw	r30, 0x00	; 0
    a27c:	09 f0       	breq	.+2      	; 0xa280 <__vector_110+0x34>
    a27e:	19 95       	eicall
    a280:	ff 91       	pop	r31
    a282:	ef 91       	pop	r30
    a284:	bf 91       	pop	r27
    a286:	af 91       	pop	r26
    a288:	9f 91       	pop	r25
    a28a:	8f 91       	pop	r24
    a28c:	7f 91       	pop	r23
    a28e:	6f 91       	pop	r22
    a290:	5f 91       	pop	r21
    a292:	4f 91       	pop	r20
    a294:	3f 91       	pop	r19
    a296:	2f 91       	pop	r18
    a298:	0f 90       	pop	r0
    a29a:	0b be       	out	0x3b, r0	; 59
    a29c:	0f 90       	pop	r0
    a29e:	0f be       	out	0x3f, r0	; 63
    a2a0:	0f 90       	pop	r0
    a2a2:	1f 90       	pop	r1
    a2a4:	18 95       	reti

0000a2a6 <__vector_111>:
    a2a6:	1f 92       	push	r1
    a2a8:	0f 92       	push	r0
    a2aa:	0f b6       	in	r0, 0x3f	; 63
    a2ac:	0f 92       	push	r0
    a2ae:	11 24       	eor	r1, r1
    a2b0:	0b b6       	in	r0, 0x3b	; 59
    a2b2:	0f 92       	push	r0
    a2b4:	2f 93       	push	r18
    a2b6:	3f 93       	push	r19
    a2b8:	4f 93       	push	r20
    a2ba:	5f 93       	push	r21
    a2bc:	6f 93       	push	r22
    a2be:	7f 93       	push	r23
    a2c0:	8f 93       	push	r24
    a2c2:	9f 93       	push	r25
    a2c4:	af 93       	push	r26
    a2c6:	bf 93       	push	r27
    a2c8:	ef 93       	push	r30
    a2ca:	ff 93       	push	r31
    a2cc:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <tc_tcf0_ccb_callback>
    a2d0:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <tc_tcf0_ccb_callback+0x1>
    a2d4:	30 97       	sbiw	r30, 0x00	; 0
    a2d6:	09 f0       	breq	.+2      	; 0xa2da <__vector_111+0x34>
    a2d8:	19 95       	eicall
    a2da:	ff 91       	pop	r31
    a2dc:	ef 91       	pop	r30
    a2de:	bf 91       	pop	r27
    a2e0:	af 91       	pop	r26
    a2e2:	9f 91       	pop	r25
    a2e4:	8f 91       	pop	r24
    a2e6:	7f 91       	pop	r23
    a2e8:	6f 91       	pop	r22
    a2ea:	5f 91       	pop	r21
    a2ec:	4f 91       	pop	r20
    a2ee:	3f 91       	pop	r19
    a2f0:	2f 91       	pop	r18
    a2f2:	0f 90       	pop	r0
    a2f4:	0b be       	out	0x3b, r0	; 59
    a2f6:	0f 90       	pop	r0
    a2f8:	0f be       	out	0x3f, r0	; 63
    a2fa:	0f 90       	pop	r0
    a2fc:	1f 90       	pop	r1
    a2fe:	18 95       	reti

0000a300 <__vector_112>:
    a300:	1f 92       	push	r1
    a302:	0f 92       	push	r0
    a304:	0f b6       	in	r0, 0x3f	; 63
    a306:	0f 92       	push	r0
    a308:	11 24       	eor	r1, r1
    a30a:	0b b6       	in	r0, 0x3b	; 59
    a30c:	0f 92       	push	r0
    a30e:	2f 93       	push	r18
    a310:	3f 93       	push	r19
    a312:	4f 93       	push	r20
    a314:	5f 93       	push	r21
    a316:	6f 93       	push	r22
    a318:	7f 93       	push	r23
    a31a:	8f 93       	push	r24
    a31c:	9f 93       	push	r25
    a31e:	af 93       	push	r26
    a320:	bf 93       	push	r27
    a322:	ef 93       	push	r30
    a324:	ff 93       	push	r31
    a326:	e0 91 34 23 	lds	r30, 0x2334	; 0x802334 <tc_tcf0_ccc_callback>
    a32a:	f0 91 35 23 	lds	r31, 0x2335	; 0x802335 <tc_tcf0_ccc_callback+0x1>
    a32e:	30 97       	sbiw	r30, 0x00	; 0
    a330:	09 f0       	breq	.+2      	; 0xa334 <__vector_112+0x34>
    a332:	19 95       	eicall
    a334:	ff 91       	pop	r31
    a336:	ef 91       	pop	r30
    a338:	bf 91       	pop	r27
    a33a:	af 91       	pop	r26
    a33c:	9f 91       	pop	r25
    a33e:	8f 91       	pop	r24
    a340:	7f 91       	pop	r23
    a342:	6f 91       	pop	r22
    a344:	5f 91       	pop	r21
    a346:	4f 91       	pop	r20
    a348:	3f 91       	pop	r19
    a34a:	2f 91       	pop	r18
    a34c:	0f 90       	pop	r0
    a34e:	0b be       	out	0x3b, r0	; 59
    a350:	0f 90       	pop	r0
    a352:	0f be       	out	0x3f, r0	; 63
    a354:	0f 90       	pop	r0
    a356:	1f 90       	pop	r1
    a358:	18 95       	reti

0000a35a <__vector_113>:
    a35a:	1f 92       	push	r1
    a35c:	0f 92       	push	r0
    a35e:	0f b6       	in	r0, 0x3f	; 63
    a360:	0f 92       	push	r0
    a362:	11 24       	eor	r1, r1
    a364:	0b b6       	in	r0, 0x3b	; 59
    a366:	0f 92       	push	r0
    a368:	2f 93       	push	r18
    a36a:	3f 93       	push	r19
    a36c:	4f 93       	push	r20
    a36e:	5f 93       	push	r21
    a370:	6f 93       	push	r22
    a372:	7f 93       	push	r23
    a374:	8f 93       	push	r24
    a376:	9f 93       	push	r25
    a378:	af 93       	push	r26
    a37a:	bf 93       	push	r27
    a37c:	ef 93       	push	r30
    a37e:	ff 93       	push	r31
    a380:	e0 91 32 23 	lds	r30, 0x2332	; 0x802332 <tc_tcf0_ccd_callback>
    a384:	f0 91 33 23 	lds	r31, 0x2333	; 0x802333 <tc_tcf0_ccd_callback+0x1>
    a388:	30 97       	sbiw	r30, 0x00	; 0
    a38a:	09 f0       	breq	.+2      	; 0xa38e <__vector_113+0x34>
    a38c:	19 95       	eicall
    a38e:	ff 91       	pop	r31
    a390:	ef 91       	pop	r30
    a392:	bf 91       	pop	r27
    a394:	af 91       	pop	r26
    a396:	9f 91       	pop	r25
    a398:	8f 91       	pop	r24
    a39a:	7f 91       	pop	r23
    a39c:	6f 91       	pop	r22
    a39e:	5f 91       	pop	r21
    a3a0:	4f 91       	pop	r20
    a3a2:	3f 91       	pop	r19
    a3a4:	2f 91       	pop	r18
    a3a6:	0f 90       	pop	r0
    a3a8:	0b be       	out	0x3b, r0	; 59
    a3aa:	0f 90       	pop	r0
    a3ac:	0f be       	out	0x3f, r0	; 63
    a3ae:	0f 90       	pop	r0
    a3b0:	1f 90       	pop	r1
    a3b2:	18 95       	reti

0000a3b4 <tc_enable>:
    a3b4:	1f 93       	push	r17
    a3b6:	cf 93       	push	r28
    a3b8:	df 93       	push	r29
    a3ba:	1f 92       	push	r1
    a3bc:	1f 92       	push	r1
    a3be:	cd b7       	in	r28, 0x3d	; 61
    a3c0:	de b7       	in	r29, 0x3e	; 62
    a3c2:	2f b7       	in	r18, 0x3f	; 63
    a3c4:	2a 83       	std	Y+2, r18	; 0x02
    a3c6:	f8 94       	cli
    a3c8:	1a 81       	ldd	r17, Y+2	; 0x02
    a3ca:	28 2f       	mov	r18, r24
    a3cc:	39 2f       	mov	r19, r25
    a3ce:	21 15       	cp	r18, r1
    a3d0:	88 e0       	ldi	r24, 0x08	; 8
    a3d2:	38 07       	cpc	r19, r24
    a3d4:	49 f4       	brne	.+18     	; 0xa3e8 <tc_enable+0x34>
    a3d6:	61 e0       	ldi	r22, 0x01	; 1
    a3d8:	83 e0       	ldi	r24, 0x03	; 3
    a3da:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a3de:	64 e0       	ldi	r22, 0x04	; 4
    a3e0:	83 e0       	ldi	r24, 0x03	; 3
    a3e2:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a3e6:	4f c0       	rjmp	.+158    	; 0xa486 <tc_enable+0xd2>
    a3e8:	20 34       	cpi	r18, 0x40	; 64
    a3ea:	88 e0       	ldi	r24, 0x08	; 8
    a3ec:	38 07       	cpc	r19, r24
    a3ee:	49 f4       	brne	.+18     	; 0xa402 <tc_enable+0x4e>
    a3f0:	62 e0       	ldi	r22, 0x02	; 2
    a3f2:	83 e0       	ldi	r24, 0x03	; 3
    a3f4:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a3f8:	64 e0       	ldi	r22, 0x04	; 4
    a3fa:	83 e0       	ldi	r24, 0x03	; 3
    a3fc:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a400:	42 c0       	rjmp	.+132    	; 0xa486 <tc_enable+0xd2>
    a402:	21 15       	cp	r18, r1
    a404:	89 e0       	ldi	r24, 0x09	; 9
    a406:	38 07       	cpc	r19, r24
    a408:	49 f4       	brne	.+18     	; 0xa41c <tc_enable+0x68>
    a40a:	61 e0       	ldi	r22, 0x01	; 1
    a40c:	84 e0       	ldi	r24, 0x04	; 4
    a40e:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a412:	64 e0       	ldi	r22, 0x04	; 4
    a414:	84 e0       	ldi	r24, 0x04	; 4
    a416:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a41a:	35 c0       	rjmp	.+106    	; 0xa486 <tc_enable+0xd2>
    a41c:	20 34       	cpi	r18, 0x40	; 64
    a41e:	89 e0       	ldi	r24, 0x09	; 9
    a420:	38 07       	cpc	r19, r24
    a422:	49 f4       	brne	.+18     	; 0xa436 <tc_enable+0x82>
    a424:	62 e0       	ldi	r22, 0x02	; 2
    a426:	84 e0       	ldi	r24, 0x04	; 4
    a428:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a42c:	64 e0       	ldi	r22, 0x04	; 4
    a42e:	84 e0       	ldi	r24, 0x04	; 4
    a430:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a434:	28 c0       	rjmp	.+80     	; 0xa486 <tc_enable+0xd2>
    a436:	21 15       	cp	r18, r1
    a438:	8a e0       	ldi	r24, 0x0A	; 10
    a43a:	38 07       	cpc	r19, r24
    a43c:	49 f4       	brne	.+18     	; 0xa450 <tc_enable+0x9c>
    a43e:	61 e0       	ldi	r22, 0x01	; 1
    a440:	85 e0       	ldi	r24, 0x05	; 5
    a442:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a446:	64 e0       	ldi	r22, 0x04	; 4
    a448:	85 e0       	ldi	r24, 0x05	; 5
    a44a:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a44e:	1b c0       	rjmp	.+54     	; 0xa486 <tc_enable+0xd2>
    a450:	20 34       	cpi	r18, 0x40	; 64
    a452:	8a e0       	ldi	r24, 0x0A	; 10
    a454:	38 07       	cpc	r19, r24
    a456:	49 f4       	brne	.+18     	; 0xa46a <tc_enable+0xb6>
    a458:	62 e0       	ldi	r22, 0x02	; 2
    a45a:	85 e0       	ldi	r24, 0x05	; 5
    a45c:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a460:	64 e0       	ldi	r22, 0x04	; 4
    a462:	85 e0       	ldi	r24, 0x05	; 5
    a464:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a468:	0e c0       	rjmp	.+28     	; 0xa486 <tc_enable+0xd2>
    a46a:	21 15       	cp	r18, r1
    a46c:	3b 40       	sbci	r19, 0x0B	; 11
    a46e:	49 f4       	brne	.+18     	; 0xa482 <tc_enable+0xce>
    a470:	61 e0       	ldi	r22, 0x01	; 1
    a472:	86 e0       	ldi	r24, 0x06	; 6
    a474:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a478:	64 e0       	ldi	r22, 0x04	; 4
    a47a:	86 e0       	ldi	r24, 0x06	; 6
    a47c:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <sysclk_enable_module>
    a480:	02 c0       	rjmp	.+4      	; 0xa486 <tc_enable+0xd2>
    a482:	1f bf       	out	0x3f, r17	; 63
    a484:	10 c0       	rjmp	.+32     	; 0xa4a6 <tc_enable+0xf2>
    a486:	80 91 78 2e 	lds	r24, 0x2E78	; 0x802e78 <sleepmgr_locks+0x1>
    a48a:	8f 3f       	cpi	r24, 0xFF	; 255
    a48c:	09 f4       	brne	.+2      	; 0xa490 <tc_enable+0xdc>
    a48e:	ff cf       	rjmp	.-2      	; 0xa48e <tc_enable+0xda>
    a490:	8f b7       	in	r24, 0x3f	; 63
    a492:	89 83       	std	Y+1, r24	; 0x01
    a494:	f8 94       	cli
    a496:	99 81       	ldd	r25, Y+1	; 0x01
    a498:	e7 e7       	ldi	r30, 0x77	; 119
    a49a:	fe e2       	ldi	r31, 0x2E	; 46
    a49c:	81 81       	ldd	r24, Z+1	; 0x01
    a49e:	8f 5f       	subi	r24, 0xFF	; 255
    a4a0:	81 83       	std	Z+1, r24	; 0x01
    a4a2:	9f bf       	out	0x3f, r25	; 63
    a4a4:	1f bf       	out	0x3f, r17	; 63
    a4a6:	0f 90       	pop	r0
    a4a8:	0f 90       	pop	r0
    a4aa:	df 91       	pop	r29
    a4ac:	cf 91       	pop	r28
    a4ae:	1f 91       	pop	r17
    a4b0:	08 95       	ret

0000a4b2 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    a4b2:	81 15       	cp	r24, r1
    a4b4:	28 e0       	ldi	r18, 0x08	; 8
    a4b6:	92 07       	cpc	r25, r18
    a4b8:	29 f4       	brne	.+10     	; 0xa4c4 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    a4ba:	60 93 78 23 	sts	0x2378, r22	; 0x802378 <tc_tcc0_ovf_callback>
    a4be:	70 93 79 23 	sts	0x2379, r23	; 0x802379 <tc_tcc0_ovf_callback+0x1>
    a4c2:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    a4c4:	80 34       	cpi	r24, 0x40	; 64
    a4c6:	28 e0       	ldi	r18, 0x08	; 8
    a4c8:	92 07       	cpc	r25, r18
    a4ca:	29 f4       	brne	.+10     	; 0xa4d6 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    a4cc:	60 93 6c 23 	sts	0x236C, r22	; 0x80236c <tc_tcc1_ovf_callback>
    a4d0:	70 93 6d 23 	sts	0x236D, r23	; 0x80236d <tc_tcc1_ovf_callback+0x1>
    a4d4:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    a4d6:	81 15       	cp	r24, r1
    a4d8:	29 e0       	ldi	r18, 0x09	; 9
    a4da:	92 07       	cpc	r25, r18
    a4dc:	29 f4       	brne	.+10     	; 0xa4e8 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    a4de:	60 93 64 23 	sts	0x2364, r22	; 0x802364 <tc_tcd0_ovf_callback>
    a4e2:	70 93 65 23 	sts	0x2365, r23	; 0x802365 <tc_tcd0_ovf_callback+0x1>
    a4e6:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    a4e8:	80 34       	cpi	r24, 0x40	; 64
    a4ea:	29 e0       	ldi	r18, 0x09	; 9
    a4ec:	92 07       	cpc	r25, r18
    a4ee:	29 f4       	brne	.+10     	; 0xa4fa <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    a4f0:	60 93 58 23 	sts	0x2358, r22	; 0x802358 <tc_tcd1_ovf_callback>
    a4f4:	70 93 59 23 	sts	0x2359, r23	; 0x802359 <tc_tcd1_ovf_callback+0x1>
    a4f8:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    a4fa:	81 15       	cp	r24, r1
    a4fc:	2a e0       	ldi	r18, 0x0A	; 10
    a4fe:	92 07       	cpc	r25, r18
    a500:	29 f4       	brne	.+10     	; 0xa50c <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    a502:	60 93 50 23 	sts	0x2350, r22	; 0x802350 <tc_tce0_ovf_callback>
    a506:	70 93 51 23 	sts	0x2351, r23	; 0x802351 <tc_tce0_ovf_callback+0x1>
    a50a:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    a50c:	80 34       	cpi	r24, 0x40	; 64
    a50e:	2a e0       	ldi	r18, 0x0A	; 10
    a510:	92 07       	cpc	r25, r18
    a512:	29 f4       	brne	.+10     	; 0xa51e <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    a514:	60 93 44 23 	sts	0x2344, r22	; 0x802344 <tc_tce1_ovf_callback>
    a518:	70 93 45 23 	sts	0x2345, r23	; 0x802345 <tc_tce1_ovf_callback+0x1>
    a51c:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    a51e:	81 15       	cp	r24, r1
    a520:	9b 40       	sbci	r25, 0x0B	; 11
    a522:	21 f4       	brne	.+8      	; 0xa52c <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    a524:	60 93 3c 23 	sts	0x233C, r22	; 0x80233c <tc_tcf0_ovf_callback>
    a528:	70 93 3d 23 	sts	0x233D, r23	; 0x80233d <tc_tcf0_ovf_callback+0x1>
    a52c:	08 95       	ret

0000a52e <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    a52e:	cf 93       	push	r28
    a530:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    a532:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <transfer>
    a536:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <transfer+0x1>
    a53a:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    a53c:	83 ff       	sbrs	r24, 3
    a53e:	08 c0       	rjmp	.+16     	; 0xa550 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    a540:	88 60       	ori	r24, 0x08	; 8
    a542:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    a544:	83 e0       	ldi	r24, 0x03	; 3
    a546:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    a548:	86 ef       	ldi	r24, 0xF6	; 246
    a54a:	80 93 84 23 	sts	0x2384, r24	; 0x802384 <transfer+0xa>
    a54e:	83 c0       	rjmp	.+262    	; 0xa656 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    a550:	98 2f       	mov	r25, r24
    a552:	94 71       	andi	r25, 0x14	; 20
    a554:	31 f0       	breq	.+12     	; 0xa562 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    a556:	83 e0       	ldi	r24, 0x03	; 3
    a558:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    a55a:	8f ef       	ldi	r24, 0xFF	; 255
    a55c:	80 93 84 23 	sts	0x2384, r24	; 0x802384 <transfer+0xa>
    a560:	7a c0       	rjmp	.+244    	; 0xa656 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    a562:	86 ff       	sbrs	r24, 6
    a564:	43 c0       	rjmp	.+134    	; 0xa5ec <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    a566:	ca e7       	ldi	r28, 0x7A	; 122
    a568:	d3 e2       	ldi	r29, 0x23	; 35
    a56a:	aa 81       	ldd	r26, Y+2	; 0x02
    a56c:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    a56e:	8c 81       	ldd	r24, Y+4	; 0x04
    a570:	9d 81       	ldd	r25, Y+5	; 0x05
    a572:	14 96       	adiw	r26, 0x04	; 4
    a574:	2d 91       	ld	r18, X+
    a576:	3c 91       	ld	r19, X
    a578:	15 97       	sbiw	r26, 0x05	; 5
    a57a:	82 17       	cp	r24, r18
    a57c:	93 07       	cpc	r25, r19
    a57e:	6c f4       	brge	.+26     	; 0xa59a <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    a580:	9c 01       	movw	r18, r24
    a582:	2f 5f       	subi	r18, 0xFF	; 255
    a584:	3f 4f       	sbci	r19, 0xFF	; 255
    a586:	20 93 7e 23 	sts	0x237E, r18	; 0x80237e <transfer+0x4>
    a58a:	30 93 7f 23 	sts	0x237F, r19	; 0x80237f <transfer+0x5>
    a58e:	a8 0f       	add	r26, r24
    a590:	b9 1f       	adc	r27, r25
    a592:	11 96       	adiw	r26, 0x01	; 1
    a594:	8c 91       	ld	r24, X
    a596:	87 83       	std	Z+7, r24	; 0x07
    a598:	5e c0       	rjmp	.+188    	; 0xa656 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    a59a:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <transfer+0x6>
    a59e:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <transfer+0x7>
    a5a2:	18 96       	adiw	r26, 0x08	; 8
    a5a4:	2d 91       	ld	r18, X+
    a5a6:	3c 91       	ld	r19, X
    a5a8:	19 97       	sbiw	r26, 0x09	; 9
    a5aa:	82 17       	cp	r24, r18
    a5ac:	93 07       	cpc	r25, r19
    a5ae:	c8 f4       	brcc	.+50     	; 0xa5e2 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    a5b0:	20 91 82 23 	lds	r18, 0x2382	; 0x802382 <transfer+0x8>
    a5b4:	22 23       	and	r18, r18
    a5b6:	21 f0       	breq	.+8      	; 0xa5c0 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    a5b8:	86 81       	ldd	r24, Z+6	; 0x06
    a5ba:	81 60       	ori	r24, 0x01	; 1
    a5bc:	86 83       	std	Z+6, r24	; 0x06
    a5be:	4b c0       	rjmp	.+150    	; 0xa656 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    a5c0:	16 96       	adiw	r26, 0x06	; 6
    a5c2:	2d 91       	ld	r18, X+
    a5c4:	3c 91       	ld	r19, X
    a5c6:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    a5c8:	ac 01       	movw	r20, r24
    a5ca:	4f 5f       	subi	r20, 0xFF	; 255
    a5cc:	5f 4f       	sbci	r21, 0xFF	; 255
    a5ce:	40 93 80 23 	sts	0x2380, r20	; 0x802380 <transfer+0x6>
    a5d2:	50 93 81 23 	sts	0x2381, r21	; 0x802381 <transfer+0x7>
    a5d6:	d9 01       	movw	r26, r18
    a5d8:	a8 0f       	add	r26, r24
    a5da:	b9 1f       	adc	r27, r25
    a5dc:	8c 91       	ld	r24, X
    a5de:	87 83       	std	Z+7, r24	; 0x07
    a5e0:	3a c0       	rjmp	.+116    	; 0xa656 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    a5e2:	83 e0       	ldi	r24, 0x03	; 3
    a5e4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    a5e6:	10 92 84 23 	sts	0x2384, r1	; 0x802384 <transfer+0xa>
    a5ea:	35 c0       	rjmp	.+106    	; 0xa656 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    a5ec:	88 23       	and	r24, r24
    a5ee:	84 f5       	brge	.+96     	; 0xa650 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    a5f0:	aa e7       	ldi	r26, 0x7A	; 122
    a5f2:	b3 e2       	ldi	r27, 0x23	; 35
    a5f4:	12 96       	adiw	r26, 0x02	; 2
    a5f6:	cd 91       	ld	r28, X+
    a5f8:	dc 91       	ld	r29, X
    a5fa:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    a5fc:	16 96       	adiw	r26, 0x06	; 6
    a5fe:	8d 91       	ld	r24, X+
    a600:	9c 91       	ld	r25, X
    a602:	17 97       	sbiw	r26, 0x07	; 7
    a604:	28 85       	ldd	r18, Y+8	; 0x08
    a606:	39 85       	ldd	r19, Y+9	; 0x09
    a608:	82 17       	cp	r24, r18
    a60a:	93 07       	cpc	r25, r19
    a60c:	d8 f4       	brcc	.+54     	; 0xa644 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    a60e:	6e 81       	ldd	r22, Y+6	; 0x06
    a610:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    a612:	9c 01       	movw	r18, r24
    a614:	2f 5f       	subi	r18, 0xFF	; 255
    a616:	3f 4f       	sbci	r19, 0xFF	; 255
    a618:	20 93 80 23 	sts	0x2380, r18	; 0x802380 <transfer+0x6>
    a61c:	30 93 81 23 	sts	0x2381, r19	; 0x802381 <transfer+0x7>
    a620:	47 81       	ldd	r20, Z+7	; 0x07
    a622:	db 01       	movw	r26, r22
    a624:	a8 0f       	add	r26, r24
    a626:	b9 1f       	adc	r27, r25
    a628:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    a62a:	88 85       	ldd	r24, Y+8	; 0x08
    a62c:	99 85       	ldd	r25, Y+9	; 0x09
    a62e:	28 17       	cp	r18, r24
    a630:	39 07       	cpc	r19, r25
    a632:	18 f4       	brcc	.+6      	; 0xa63a <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    a634:	82 e0       	ldi	r24, 0x02	; 2
    a636:	83 83       	std	Z+3, r24	; 0x03
    a638:	0e c0       	rjmp	.+28     	; 0xa656 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    a63a:	87 e0       	ldi	r24, 0x07	; 7
    a63c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    a63e:	10 92 84 23 	sts	0x2384, r1	; 0x802384 <transfer+0xa>
    a642:	09 c0       	rjmp	.+18     	; 0xa656 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    a644:	83 e0       	ldi	r24, 0x03	; 3
    a646:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    a648:	89 ef       	ldi	r24, 0xF9	; 249
    a64a:	80 93 84 23 	sts	0x2384, r24	; 0x802384 <transfer+0xa>
    a64e:	03 c0       	rjmp	.+6      	; 0xa656 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    a650:	8b ef       	ldi	r24, 0xFB	; 251
    a652:	80 93 84 23 	sts	0x2384, r24	; 0x802384 <transfer+0xa>
	}
}
    a656:	df 91       	pop	r29
    a658:	cf 91       	pop	r28
    a65a:	08 95       	ret

0000a65c <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    a65c:	1f 92       	push	r1
    a65e:	0f 92       	push	r0
    a660:	0f b6       	in	r0, 0x3f	; 63
    a662:	0f 92       	push	r0
    a664:	11 24       	eor	r1, r1
    a666:	0b b6       	in	r0, 0x3b	; 59
    a668:	0f 92       	push	r0
    a66a:	2f 93       	push	r18
    a66c:	3f 93       	push	r19
    a66e:	4f 93       	push	r20
    a670:	5f 93       	push	r21
    a672:	6f 93       	push	r22
    a674:	7f 93       	push	r23
    a676:	8f 93       	push	r24
    a678:	9f 93       	push	r25
    a67a:	af 93       	push	r26
    a67c:	bf 93       	push	r27
    a67e:	ef 93       	push	r30
    a680:	ff 93       	push	r31
    a682:	55 df       	rcall	.-342    	; 0xa52e <twim_interrupt_handler>
    a684:	ff 91       	pop	r31
    a686:	ef 91       	pop	r30
    a688:	bf 91       	pop	r27
    a68a:	af 91       	pop	r26
    a68c:	9f 91       	pop	r25
    a68e:	8f 91       	pop	r24
    a690:	7f 91       	pop	r23
    a692:	6f 91       	pop	r22
    a694:	5f 91       	pop	r21
    a696:	4f 91       	pop	r20
    a698:	3f 91       	pop	r19
    a69a:	2f 91       	pop	r18
    a69c:	0f 90       	pop	r0
    a69e:	0b be       	out	0x3b, r0	; 59
    a6a0:	0f 90       	pop	r0
    a6a2:	0f be       	out	0x3f, r0	; 63
    a6a4:	0f 90       	pop	r0
    a6a6:	1f 90       	pop	r1
    a6a8:	18 95       	reti

0000a6aa <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    a6aa:	1f 92       	push	r1
    a6ac:	0f 92       	push	r0
    a6ae:	0f b6       	in	r0, 0x3f	; 63
    a6b0:	0f 92       	push	r0
    a6b2:	11 24       	eor	r1, r1
    a6b4:	0b b6       	in	r0, 0x3b	; 59
    a6b6:	0f 92       	push	r0
    a6b8:	2f 93       	push	r18
    a6ba:	3f 93       	push	r19
    a6bc:	4f 93       	push	r20
    a6be:	5f 93       	push	r21
    a6c0:	6f 93       	push	r22
    a6c2:	7f 93       	push	r23
    a6c4:	8f 93       	push	r24
    a6c6:	9f 93       	push	r25
    a6c8:	af 93       	push	r26
    a6ca:	bf 93       	push	r27
    a6cc:	ef 93       	push	r30
    a6ce:	ff 93       	push	r31
    a6d0:	2e df       	rcall	.-420    	; 0xa52e <twim_interrupt_handler>
    a6d2:	ff 91       	pop	r31
    a6d4:	ef 91       	pop	r30
    a6d6:	bf 91       	pop	r27
    a6d8:	af 91       	pop	r26
    a6da:	9f 91       	pop	r25
    a6dc:	8f 91       	pop	r24
    a6de:	7f 91       	pop	r23
    a6e0:	6f 91       	pop	r22
    a6e2:	5f 91       	pop	r21
    a6e4:	4f 91       	pop	r20
    a6e6:	3f 91       	pop	r19
    a6e8:	2f 91       	pop	r18
    a6ea:	0f 90       	pop	r0
    a6ec:	0b be       	out	0x3b, r0	; 59
    a6ee:	0f 90       	pop	r0
    a6f0:	0f be       	out	0x3f, r0	; 63
    a6f2:	0f 90       	pop	r0
    a6f4:	1f 90       	pop	r1
    a6f6:	18 95       	reti

0000a6f8 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    a6f8:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    a6fa:	db 01       	movw	r26, r22
    a6fc:	14 96       	adiw	r26, 0x04	; 4
    a6fe:	8c 91       	ld	r24, X
    a700:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    a702:	88 eb       	ldi	r24, 0xB8	; 184
    a704:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    a706:	81 e0       	ldi	r24, 0x01	; 1
    a708:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    a70a:	ea e7       	ldi	r30, 0x7A	; 122
    a70c:	f3 e2       	ldi	r31, 0x23	; 35
    a70e:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    a710:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    a712:	e0 ea       	ldi	r30, 0xA0	; 160
    a714:	f0 e0       	ldi	r31, 0x00	; 0
    a716:	82 81       	ldd	r24, Z+2	; 0x02
    a718:	82 60       	ori	r24, 0x02	; 2
    a71a:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    a71c:	78 94       	sei

	return STATUS_OK;
}
    a71e:	80 e0       	ldi	r24, 0x00	; 0
    a720:	08 95       	ret

0000a722 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    a722:	cf 93       	push	r28
    a724:	df 93       	push	r29
    a726:	1f 92       	push	r1
    a728:	cd b7       	in	r28, 0x3d	; 61
    a72a:	de b7       	in	r29, 0x3e	; 62
    a72c:	9c 01       	movw	r18, r24
    a72e:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    a730:	89 2b       	or	r24, r25
    a732:	09 f4       	brne	.+2      	; 0xa736 <twi_master_transfer+0x14>
    a734:	51 c0       	rjmp	.+162    	; 0xa7d8 <twi_master_transfer+0xb6>
    a736:	30 97       	sbiw	r30, 0x00	; 0
    a738:	09 f4       	brne	.+2      	; 0xa73c <twi_master_transfer+0x1a>
    a73a:	50 c0       	rjmp	.+160    	; 0xa7dc <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    a73c:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    a73e:	80 91 83 23 	lds	r24, 0x2383	; 0x802383 <transfer+0x9>
    a742:	88 23       	and	r24, r24
    a744:	19 f0       	breq	.+6      	; 0xa74c <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    a746:	99 23       	and	r25, r25
    a748:	f1 f3       	breq	.-4      	; 0xa746 <twi_master_transfer+0x24>
    a74a:	4a c0       	rjmp	.+148    	; 0xa7e0 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    a74c:	8f b7       	in	r24, 0x3f	; 63
    a74e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    a750:	f8 94       	cli
	return flags;
    a752:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    a754:	aa e7       	ldi	r26, 0x7A	; 122
    a756:	b3 e2       	ldi	r27, 0x23	; 35
    a758:	91 e0       	ldi	r25, 0x01	; 1
    a75a:	19 96       	adiw	r26, 0x09	; 9
    a75c:	9c 93       	st	X, r25
    a75e:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    a760:	90 e8       	ldi	r25, 0x80	; 128
    a762:	1a 96       	adiw	r26, 0x0a	; 10
    a764:	9c 93       	st	X, r25
    a766:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    a768:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    a76a:	2d 93       	st	X+, r18
    a76c:	3c 93       	st	X, r19
    a76e:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    a770:	12 96       	adiw	r26, 0x02	; 2
    a772:	6d 93       	st	X+, r22
    a774:	7c 93       	st	X, r23
    a776:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    a778:	14 96       	adiw	r26, 0x04	; 4
    a77a:	1d 92       	st	X+, r1
    a77c:	1c 92       	st	X, r1
    a77e:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    a780:	16 96       	adiw	r26, 0x06	; 6
    a782:	1d 92       	st	X+, r1
    a784:	1c 92       	st	X, r1
    a786:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    a788:	18 96       	adiw	r26, 0x08	; 8
    a78a:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    a78c:	80 81       	ld	r24, Z
    a78e:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    a790:	64 81       	ldd	r22, Z+4	; 0x04
    a792:	75 81       	ldd	r23, Z+5	; 0x05
    a794:	67 2b       	or	r22, r23
    a796:	11 f4       	brne	.+4      	; 0xa79c <twi_master_transfer+0x7a>
    a798:	41 11       	cpse	r20, r1
    a79a:	03 c0       	rjmp	.+6      	; 0xa7a2 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    a79c:	f9 01       	movw	r30, r18
    a79e:	86 83       	std	Z+6, r24	; 0x06
    a7a0:	03 c0       	rjmp	.+6      	; 0xa7a8 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    a7a2:	81 60       	ori	r24, 0x01	; 1
    a7a4:	f9 01       	movw	r30, r18
    a7a6:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    a7a8:	ea e7       	ldi	r30, 0x7A	; 122
    a7aa:	f3 e2       	ldi	r31, 0x23	; 35
    a7ac:	92 85       	ldd	r25, Z+10	; 0x0a
    a7ae:	90 38       	cpi	r25, 0x80	; 128
    a7b0:	e9 f3       	breq	.-6      	; 0xa7ac <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    a7b2:	f9 01       	movw	r30, r18
    a7b4:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    a7b6:	83 70       	andi	r24, 0x03	; 3
    a7b8:	81 30       	cpi	r24, 0x01	; 1
    a7ba:	49 f0       	breq	.+18     	; 0xa7ce <twi_master_transfer+0xac>
    a7bc:	aa e7       	ldi	r26, 0x7A	; 122
    a7be:	b3 e2       	ldi	r27, 0x23	; 35
    a7c0:	ed 91       	ld	r30, X+
    a7c2:	fc 91       	ld	r31, X
    a7c4:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    a7c6:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    a7c8:	83 70       	andi	r24, 0x03	; 3
    a7ca:	81 30       	cpi	r24, 0x01	; 1
    a7cc:	c9 f7       	brne	.-14     	; 0xa7c0 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    a7ce:	ea e7       	ldi	r30, 0x7A	; 122
    a7d0:	f3 e2       	ldi	r31, 0x23	; 35
    a7d2:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    a7d4:	11 86       	std	Z+9, r1	; 0x09
    a7d6:	05 c0       	rjmp	.+10     	; 0xa7e2 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    a7d8:	88 ef       	ldi	r24, 0xF8	; 248
    a7da:	03 c0       	rjmp	.+6      	; 0xa7e2 <twi_master_transfer+0xc0>
    a7dc:	88 ef       	ldi	r24, 0xF8	; 248
    a7de:	01 c0       	rjmp	.+2      	; 0xa7e2 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    a7e0:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    a7e2:	0f 90       	pop	r0
    a7e4:	df 91       	pop	r29
    a7e6:	cf 91       	pop	r28
    a7e8:	08 95       	ret

0000a7ea <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    a7ea:	cf 93       	push	r28
    a7ec:	df 93       	push	r29
    a7ee:	1f 92       	push	r1
    a7f0:	1f 92       	push	r1
    a7f2:	cd b7       	in	r28, 0x3d	; 61
    a7f4:	de b7       	in	r29, 0x3e	; 62
    a7f6:	81 11       	cpse	r24, r1
    a7f8:	26 c0       	rjmp	.+76     	; 0xa846 <udd_sleep_mode+0x5c>
    a7fa:	90 91 b0 24 	lds	r25, 0x24B0	; 0x8024b0 <udd_b_idle>
    a7fe:	99 23       	and	r25, r25
    a800:	f9 f0       	breq	.+62     	; 0xa840 <udd_sleep_mode+0x56>
    a802:	90 91 78 2e 	lds	r25, 0x2E78	; 0x802e78 <sleepmgr_locks+0x1>
    a806:	91 11       	cpse	r25, r1
    a808:	01 c0       	rjmp	.+2      	; 0xa80c <udd_sleep_mode+0x22>
    a80a:	ff cf       	rjmp	.-2      	; 0xa80a <udd_sleep_mode+0x20>
    a80c:	9f b7       	in	r25, 0x3f	; 63
    a80e:	9a 83       	std	Y+2, r25	; 0x02
    a810:	f8 94       	cli
    a812:	2a 81       	ldd	r18, Y+2	; 0x02
    a814:	e7 e7       	ldi	r30, 0x77	; 119
    a816:	fe e2       	ldi	r31, 0x2E	; 46
    a818:	91 81       	ldd	r25, Z+1	; 0x01
    a81a:	91 50       	subi	r25, 0x01	; 1
    a81c:	91 83       	std	Z+1, r25	; 0x01
    a81e:	2f bf       	out	0x3f, r18	; 63
    a820:	0f c0       	rjmp	.+30     	; 0xa840 <udd_sleep_mode+0x56>
    a822:	90 91 78 2e 	lds	r25, 0x2E78	; 0x802e78 <sleepmgr_locks+0x1>
    a826:	9f 3f       	cpi	r25, 0xFF	; 255
    a828:	09 f4       	brne	.+2      	; 0xa82c <udd_sleep_mode+0x42>
    a82a:	ff cf       	rjmp	.-2      	; 0xa82a <udd_sleep_mode+0x40>
    a82c:	9f b7       	in	r25, 0x3f	; 63
    a82e:	99 83       	std	Y+1, r25	; 0x01
    a830:	f8 94       	cli
    a832:	29 81       	ldd	r18, Y+1	; 0x01
    a834:	e7 e7       	ldi	r30, 0x77	; 119
    a836:	fe e2       	ldi	r31, 0x2E	; 46
    a838:	91 81       	ldd	r25, Z+1	; 0x01
    a83a:	9f 5f       	subi	r25, 0xFF	; 255
    a83c:	91 83       	std	Z+1, r25	; 0x01
    a83e:	2f bf       	out	0x3f, r18	; 63
    a840:	80 93 b0 24 	sts	0x24B0, r24	; 0x8024b0 <udd_b_idle>
    a844:	05 c0       	rjmp	.+10     	; 0xa850 <udd_sleep_mode+0x66>
    a846:	90 91 b0 24 	lds	r25, 0x24B0	; 0x8024b0 <udd_b_idle>
    a84a:	99 23       	and	r25, r25
    a84c:	51 f3       	breq	.-44     	; 0xa822 <udd_sleep_mode+0x38>
    a84e:	f8 cf       	rjmp	.-16     	; 0xa840 <udd_sleep_mode+0x56>
    a850:	0f 90       	pop	r0
    a852:	0f 90       	pop	r0
    a854:	df 91       	pop	r29
    a856:	cf 91       	pop	r28
    a858:	08 95       	ret

0000a85a <udd_ctrl_init>:
    a85a:	0f 93       	push	r16
    a85c:	e8 ec       	ldi	r30, 0xC8	; 200
    a85e:	f4 e0       	ldi	r31, 0x04	; 4
    a860:	80 81       	ld	r24, Z
    a862:	8f 7d       	andi	r24, 0xDF	; 223
    a864:	80 83       	st	Z, r24
    a866:	80 81       	ld	r24, Z
    a868:	8f 7d       	andi	r24, 0xDF	; 223
    a86a:	80 83       	st	Z, r24
    a86c:	e4 e8       	ldi	r30, 0x84	; 132
    a86e:	f4 e2       	ldi	r31, 0x24	; 36
    a870:	02 e0       	ldi	r16, 0x02	; 2
    a872:	05 93       	las	Z, r16
    a874:	10 92 86 24 	sts	0x2486, r1	; 0x802486 <udd_sram+0x16>
    a878:	10 92 87 24 	sts	0x2487, r1	; 0x802487 <udd_sram+0x17>
    a87c:	00 e2       	ldi	r16, 0x20	; 32
    a87e:	06 93       	lac	Z, r16
    a880:	00 e4       	ldi	r16, 0x40	; 64
    a882:	06 93       	lac	Z, r16
    a884:	ec e7       	ldi	r30, 0x7C	; 124
    a886:	f4 e2       	ldi	r31, 0x24	; 36
    a888:	00 e4       	ldi	r16, 0x40	; 64
    a88a:	06 93       	lac	Z, r16
    a88c:	e1 ee       	ldi	r30, 0xE1	; 225
    a88e:	fd e2       	ldi	r31, 0x2D	; 45
    a890:	14 86       	std	Z+12, r1	; 0x0c
    a892:	15 86       	std	Z+13, r1	; 0x0d
    a894:	16 86       	std	Z+14, r1	; 0x0e
    a896:	17 86       	std	Z+15, r1	; 0x0f
    a898:	12 86       	std	Z+10, r1	; 0x0a
    a89a:	13 86       	std	Z+11, r1	; 0x0b
    a89c:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <udd_ep_control_state>
    a8a0:	0f 91       	pop	r16
    a8a2:	08 95       	ret

0000a8a4 <udd_ctrl_stall_data>:
    a8a4:	0f 93       	push	r16
    a8a6:	85 e0       	ldi	r24, 0x05	; 5
    a8a8:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <udd_ep_control_state>
    a8ac:	e5 e8       	ldi	r30, 0x85	; 133
    a8ae:	f4 e2       	ldi	r31, 0x24	; 36
    a8b0:	04 e0       	ldi	r16, 0x04	; 4
    a8b2:	05 93       	las	Z, r16
    a8b4:	ed e7       	ldi	r30, 0x7D	; 125
    a8b6:	f4 e2       	ldi	r31, 0x24	; 36
    a8b8:	04 e0       	ldi	r16, 0x04	; 4
    a8ba:	05 93       	las	Z, r16
    a8bc:	0f 91       	pop	r16
    a8be:	08 95       	ret

0000a8c0 <udd_ctrl_send_zlp_in>:
    a8c0:	0f 93       	push	r16
    a8c2:	83 e0       	ldi	r24, 0x03	; 3
    a8c4:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <udd_ep_control_state>
    a8c8:	10 92 86 24 	sts	0x2486, r1	; 0x802486 <udd_sram+0x16>
    a8cc:	10 92 87 24 	sts	0x2487, r1	; 0x802487 <udd_sram+0x17>
    a8d0:	e4 e8       	ldi	r30, 0x84	; 132
    a8d2:	f4 e2       	ldi	r31, 0x24	; 36
    a8d4:	02 e0       	ldi	r16, 0x02	; 2
    a8d6:	06 93       	lac	Z, r16
    a8d8:	0f 91       	pop	r16
    a8da:	08 95       	ret

0000a8dc <udd_ctrl_endofrequest>:
    a8dc:	e0 91 ed 2d 	lds	r30, 0x2DED	; 0x802ded <udd_g_ctrlreq+0xc>
    a8e0:	f0 91 ee 2d 	lds	r31, 0x2DEE	; 0x802dee <udd_g_ctrlreq+0xd>
    a8e4:	30 97       	sbiw	r30, 0x00	; 0
    a8e6:	09 f0       	breq	.+2      	; 0xa8ea <udd_ctrl_endofrequest+0xe>
    a8e8:	19 95       	eicall
    a8ea:	08 95       	ret

0000a8ec <udd_ctrl_in_sent>:
    a8ec:	0f 93       	push	r16
    a8ee:	cf 93       	push	r28
    a8f0:	df 93       	push	r29
    a8f2:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_ep_control_state>
    a8f6:	83 30       	cpi	r24, 0x03	; 3
    a8f8:	19 f4       	brne	.+6      	; 0xa900 <udd_ctrl_in_sent+0x14>
    a8fa:	f0 df       	rcall	.-32     	; 0xa8dc <udd_ctrl_endofrequest>
    a8fc:	ae df       	rcall	.-164    	; 0xa85a <udd_ctrl_init>
    a8fe:	5e c0       	rjmp	.+188    	; 0xa9bc <udd_ctrl_in_sent+0xd0>
    a900:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_ctrl_payload_nb_trans>
    a904:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udd_ctrl_payload_nb_trans+0x1>
    a908:	c0 91 eb 2d 	lds	r28, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0xa>
    a90c:	d0 91 ec 2d 	lds	r29, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0xb>
    a910:	c8 1b       	sub	r28, r24
    a912:	d9 0b       	sbc	r29, r25
    a914:	71 f5       	brne	.+92     	; 0xa972 <udd_ctrl_in_sent+0x86>
    a916:	20 91 6c 24 	lds	r18, 0x246C	; 0x80246c <udd_ctrl_prev_payload_nb_trans>
    a91a:	30 91 6d 24 	lds	r19, 0x246D	; 0x80246d <udd_ctrl_prev_payload_nb_trans+0x1>
    a91e:	82 0f       	add	r24, r18
    a920:	93 1f       	adc	r25, r19
    a922:	80 93 6c 24 	sts	0x246C, r24	; 0x80246c <udd_ctrl_prev_payload_nb_trans>
    a926:	90 93 6d 24 	sts	0x246D, r25	; 0x80246d <udd_ctrl_prev_payload_nb_trans+0x1>
    a92a:	20 91 e7 2d 	lds	r18, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    a92e:	30 91 e8 2d 	lds	r19, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    a932:	82 17       	cp	r24, r18
    a934:	93 07       	cpc	r25, r19
    a936:	21 f0       	breq	.+8      	; 0xa940 <udd_ctrl_in_sent+0x54>
    a938:	80 91 85 23 	lds	r24, 0x2385	; 0x802385 <b_shortpacket.5472>
    a93c:	88 23       	and	r24, r24
    a93e:	41 f0       	breq	.+16     	; 0xa950 <udd_ctrl_in_sent+0x64>
    a940:	84 e0       	ldi	r24, 0x04	; 4
    a942:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <udd_ep_control_state>
    a946:	ec e7       	ldi	r30, 0x7C	; 124
    a948:	f4 e2       	ldi	r31, 0x24	; 36
    a94a:	02 e0       	ldi	r16, 0x02	; 2
    a94c:	06 93       	lac	Z, r16
    a94e:	36 c0       	rjmp	.+108    	; 0xa9bc <udd_ctrl_in_sent+0xd0>
    a950:	e0 91 ef 2d 	lds	r30, 0x2DEF	; 0x802def <udd_g_ctrlreq+0xe>
    a954:	f0 91 f0 2d 	lds	r31, 0x2DF0	; 0x802df0 <udd_g_ctrlreq+0xf>
    a958:	30 97       	sbiw	r30, 0x00	; 0
    a95a:	99 f0       	breq	.+38     	; 0xa982 <udd_ctrl_in_sent+0x96>
    a95c:	19 95       	eicall
    a95e:	88 23       	and	r24, r24
    a960:	81 f0       	breq	.+32     	; 0xa982 <udd_ctrl_in_sent+0x96>
    a962:	10 92 6a 24 	sts	0x246A, r1	; 0x80246a <udd_ctrl_payload_nb_trans>
    a966:	10 92 6b 24 	sts	0x246B, r1	; 0x80246b <udd_ctrl_payload_nb_trans+0x1>
    a96a:	c0 91 eb 2d 	lds	r28, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0xa>
    a96e:	d0 91 ec 2d 	lds	r29, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0xb>
    a972:	c0 34       	cpi	r28, 0x40	; 64
    a974:	d1 05       	cpc	r29, r1
    a976:	28 f0       	brcs	.+10     	; 0xa982 <udd_ctrl_in_sent+0x96>
    a978:	10 92 85 23 	sts	0x2385, r1	; 0x802385 <b_shortpacket.5472>
    a97c:	c0 e4       	ldi	r28, 0x40	; 64
    a97e:	d0 e0       	ldi	r29, 0x00	; 0
    a980:	03 c0       	rjmp	.+6      	; 0xa988 <udd_ctrl_in_sent+0x9c>
    a982:	81 e0       	ldi	r24, 0x01	; 1
    a984:	80 93 85 23 	sts	0x2385, r24	; 0x802385 <b_shortpacket.5472>
    a988:	e0 e7       	ldi	r30, 0x70	; 112
    a98a:	f4 e2       	ldi	r31, 0x24	; 36
    a98c:	c6 8b       	std	Z+22, r28	; 0x16
    a98e:	d7 8b       	std	Z+23, r29	; 0x17
    a990:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_ctrl_payload_nb_trans>
    a994:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udd_ctrl_payload_nb_trans+0x1>
    a998:	20 91 e9 2d 	lds	r18, 0x2DE9	; 0x802de9 <udd_g_ctrlreq+0x8>
    a99c:	30 91 ea 2d 	lds	r19, 0x2DEA	; 0x802dea <udd_g_ctrlreq+0x9>
    a9a0:	28 0f       	add	r18, r24
    a9a2:	39 1f       	adc	r19, r25
    a9a4:	20 8f       	std	Z+24, r18	; 0x18
    a9a6:	31 8f       	std	Z+25, r19	; 0x19
    a9a8:	c8 0f       	add	r28, r24
    a9aa:	d9 1f       	adc	r29, r25
    a9ac:	c0 93 6a 24 	sts	0x246A, r28	; 0x80246a <udd_ctrl_payload_nb_trans>
    a9b0:	d0 93 6b 24 	sts	0x246B, r29	; 0x80246b <udd_ctrl_payload_nb_trans+0x1>
    a9b4:	e4 e8       	ldi	r30, 0x84	; 132
    a9b6:	f4 e2       	ldi	r31, 0x24	; 36
    a9b8:	02 e0       	ldi	r16, 0x02	; 2
    a9ba:	06 93       	lac	Z, r16
    a9bc:	df 91       	pop	r29
    a9be:	cf 91       	pop	r28
    a9c0:	0f 91       	pop	r16
    a9c2:	08 95       	ret

0000a9c4 <udd_ep_get_size>:
    a9c4:	fc 01       	movw	r30, r24
    a9c6:	81 81       	ldd	r24, Z+1	; 0x01
    a9c8:	e8 2f       	mov	r30, r24
    a9ca:	e7 70       	andi	r30, 0x07	; 7
    a9cc:	8e 2f       	mov	r24, r30
    a9ce:	90 e0       	ldi	r25, 0x00	; 0
    a9d0:	fc 01       	movw	r30, r24
    a9d2:	31 97       	sbiw	r30, 0x01	; 1
    a9d4:	e7 30       	cpi	r30, 0x07	; 7
    a9d6:	f1 05       	cpc	r31, r1
    a9d8:	d8 f4       	brcc	.+54     	; 0xaa10 <udd_ep_get_size+0x4c>
    a9da:	88 27       	eor	r24, r24
    a9dc:	e2 50       	subi	r30, 0x02	; 2
    a9de:	ff 4f       	sbci	r31, 0xFF	; 255
    a9e0:	8f 4f       	sbci	r24, 0xFF	; 255
    a9e2:	0c 94 aa 81 	jmp	0x10354	; 0x10354 <__tablejump2__>
    a9e6:	80 e1       	ldi	r24, 0x10	; 16
    a9e8:	90 e0       	ldi	r25, 0x00	; 0
    a9ea:	08 95       	ret
    a9ec:	80 e2       	ldi	r24, 0x20	; 32
    a9ee:	90 e0       	ldi	r25, 0x00	; 0
    a9f0:	08 95       	ret
    a9f2:	80 e4       	ldi	r24, 0x40	; 64
    a9f4:	90 e0       	ldi	r25, 0x00	; 0
    a9f6:	08 95       	ret
    a9f8:	80 e8       	ldi	r24, 0x80	; 128
    a9fa:	90 e0       	ldi	r25, 0x00	; 0
    a9fc:	08 95       	ret
    a9fe:	80 e0       	ldi	r24, 0x00	; 0
    aa00:	91 e0       	ldi	r25, 0x01	; 1
    aa02:	08 95       	ret
    aa04:	80 e0       	ldi	r24, 0x00	; 0
    aa06:	92 e0       	ldi	r25, 0x02	; 2
    aa08:	08 95       	ret
    aa0a:	8f ef       	ldi	r24, 0xFF	; 255
    aa0c:	93 e0       	ldi	r25, 0x03	; 3
    aa0e:	08 95       	ret
    aa10:	88 e0       	ldi	r24, 0x08	; 8
    aa12:	90 e0       	ldi	r25, 0x00	; 0
    aa14:	08 95       	ret

0000aa16 <udd_ep_get_job>:
    aa16:	28 2f       	mov	r18, r24
    aa18:	2f 70       	andi	r18, 0x0F	; 15
    aa1a:	30 e0       	ldi	r19, 0x00	; 0
    aa1c:	22 0f       	add	r18, r18
    aa1e:	33 1f       	adc	r19, r19
    aa20:	08 2e       	mov	r0, r24
    aa22:	00 0c       	add	r0, r0
    aa24:	99 0b       	sbc	r25, r25
    aa26:	88 27       	eor	r24, r24
    aa28:	99 0f       	add	r25, r25
    aa2a:	88 1f       	adc	r24, r24
    aa2c:	99 27       	eor	r25, r25
    aa2e:	82 0f       	add	r24, r18
    aa30:	93 1f       	adc	r25, r19
    aa32:	02 97       	sbiw	r24, 0x02	; 2
    aa34:	9c 01       	movw	r18, r24
    aa36:	22 0f       	add	r18, r18
    aa38:	33 1f       	adc	r19, r19
    aa3a:	22 0f       	add	r18, r18
    aa3c:	33 1f       	adc	r19, r19
    aa3e:	22 0f       	add	r18, r18
    aa40:	33 1f       	adc	r19, r19
    aa42:	82 0f       	add	r24, r18
    aa44:	93 1f       	adc	r25, r19
    aa46:	8a 5f       	subi	r24, 0xFA	; 250
    aa48:	9b 4d       	sbci	r25, 0xDB	; 219
    aa4a:	08 95       	ret

0000aa4c <udd_ctrl_interrupt_tc_setup>:
    aa4c:	0f 93       	push	r16
    aa4e:	cf 93       	push	r28
    aa50:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    aa54:	80 ff       	sbrs	r24, 0
    aa56:	65 c0       	rjmp	.+202    	; 0xab22 <udd_ctrl_interrupt_tc_setup+0xd6>
    aa58:	81 e0       	ldi	r24, 0x01	; 1
    aa5a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    aa5e:	ec e7       	ldi	r30, 0x7C	; 124
    aa60:	f4 e2       	ldi	r31, 0x24	; 36
    aa62:	00 e8       	ldi	r16, 0x80	; 128
    aa64:	06 93       	lac	Z, r16
    aa66:	e4 e8       	ldi	r30, 0x84	; 132
    aa68:	f4 e2       	ldi	r31, 0x24	; 36
    aa6a:	00 e8       	ldi	r16, 0x80	; 128
    aa6c:	06 93       	lac	Z, r16
    aa6e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    aa72:	ec e7       	ldi	r30, 0x7C	; 124
    aa74:	f4 e2       	ldi	r31, 0x24	; 36
    aa76:	00 e1       	ldi	r16, 0x10	; 16
    aa78:	06 93       	lac	Z, r16
    aa7a:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_ep_control_state>
    aa7e:	88 23       	and	r24, r24
    aa80:	29 f0       	breq	.+10     	; 0xaa8c <udd_ctrl_interrupt_tc_setup+0x40>
    aa82:	83 50       	subi	r24, 0x03	; 3
    aa84:	82 30       	cpi	r24, 0x02	; 2
    aa86:	08 f4       	brcc	.+2      	; 0xaa8a <udd_ctrl_interrupt_tc_setup+0x3e>
    aa88:	29 df       	rcall	.-430    	; 0xa8dc <udd_ctrl_endofrequest>
    aa8a:	e7 de       	rcall	.-562    	; 0xa85a <udd_ctrl_init>
    aa8c:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_sram+0xe>
    aa90:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <udd_sram+0xf>
    aa94:	08 97       	sbiw	r24, 0x08	; 8
    aa96:	09 f0       	breq	.+2      	; 0xaa9a <udd_ctrl_interrupt_tc_setup+0x4e>
    aa98:	46 c0       	rjmp	.+140    	; 0xab26 <udd_ctrl_interrupt_tc_setup+0xda>
    aa9a:	88 e0       	ldi	r24, 0x08	; 8
    aa9c:	ea e2       	ldi	r30, 0x2A	; 42
    aa9e:	f4 e2       	ldi	r31, 0x24	; 36
    aaa0:	a1 ee       	ldi	r26, 0xE1	; 225
    aaa2:	bd e2       	ldi	r27, 0x2D	; 45
    aaa4:	01 90       	ld	r0, Z+
    aaa6:	0d 92       	st	X+, r0
    aaa8:	8a 95       	dec	r24
    aaaa:	e1 f7       	brne	.-8      	; 0xaaa4 <udd_ctrl_interrupt_tc_setup+0x58>
    aaac:	e8 ec       	ldi	r30, 0xC8	; 200
    aaae:	f4 e0       	ldi	r31, 0x04	; 4
    aab0:	80 81       	ld	r24, Z
    aab2:	80 62       	ori	r24, 0x20	; 32
    aab4:	80 83       	st	Z, r24
    aab6:	80 81       	ld	r24, Z
    aab8:	80 62       	ori	r24, 0x20	; 32
    aaba:	80 83       	st	Z, r24
    aabc:	0e 94 1a 74 	call	0xe834	; 0xe834 <udc_process_setup>
    aac0:	c8 2f       	mov	r28, r24
    aac2:	81 11       	cpse	r24, r1
    aac4:	03 c0       	rjmp	.+6      	; 0xaacc <udd_ctrl_interrupt_tc_setup+0x80>
    aac6:	ee de       	rcall	.-548    	; 0xa8a4 <udd_ctrl_stall_data>
    aac8:	c1 e0       	ldi	r28, 0x01	; 1
    aaca:	2e c0       	rjmp	.+92     	; 0xab28 <udd_ctrl_interrupt_tc_setup+0xdc>
    aacc:	80 91 e1 2d 	lds	r24, 0x2DE1	; 0x802de1 <udd_g_ctrlreq>
    aad0:	88 23       	and	r24, r24
    aad2:	6c f4       	brge	.+26     	; 0xaaee <udd_ctrl_interrupt_tc_setup+0xa2>
    aad4:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udd_ctrl_prev_payload_nb_trans>
    aad8:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <udd_ctrl_prev_payload_nb_trans+0x1>
    aadc:	10 92 6a 24 	sts	0x246A, r1	; 0x80246a <udd_ctrl_payload_nb_trans>
    aae0:	10 92 6b 24 	sts	0x246B, r1	; 0x80246b <udd_ctrl_payload_nb_trans+0x1>
    aae4:	82 e0       	ldi	r24, 0x02	; 2
    aae6:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <udd_ep_control_state>
    aaea:	00 df       	rcall	.-512    	; 0xa8ec <udd_ctrl_in_sent>
    aaec:	1d c0       	rjmp	.+58     	; 0xab28 <udd_ctrl_interrupt_tc_setup+0xdc>
    aaee:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    aaf2:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    aaf6:	89 2b       	or	r24, r25
    aaf8:	11 f4       	brne	.+4      	; 0xaafe <udd_ctrl_interrupt_tc_setup+0xb2>
    aafa:	e2 de       	rcall	.-572    	; 0xa8c0 <udd_ctrl_send_zlp_in>
    aafc:	15 c0       	rjmp	.+42     	; 0xab28 <udd_ctrl_interrupt_tc_setup+0xdc>
    aafe:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udd_ctrl_prev_payload_nb_trans>
    ab02:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <udd_ctrl_prev_payload_nb_trans+0x1>
    ab06:	10 92 6a 24 	sts	0x246A, r1	; 0x80246a <udd_ctrl_payload_nb_trans>
    ab0a:	10 92 6b 24 	sts	0x246B, r1	; 0x80246b <udd_ctrl_payload_nb_trans+0x1>
    ab0e:	81 e0       	ldi	r24, 0x01	; 1
    ab10:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <udd_ep_control_state>
    ab14:	ec e7       	ldi	r30, 0x7C	; 124
    ab16:	f4 e2       	ldi	r31, 0x24	; 36
    ab18:	02 e0       	ldi	r16, 0x02	; 2
    ab1a:	06 93       	lac	Z, r16
    ab1c:	00 e2       	ldi	r16, 0x20	; 32
    ab1e:	06 93       	lac	Z, r16
    ab20:	03 c0       	rjmp	.+6      	; 0xab28 <udd_ctrl_interrupt_tc_setup+0xdc>
    ab22:	c0 e0       	ldi	r28, 0x00	; 0
    ab24:	01 c0       	rjmp	.+2      	; 0xab28 <udd_ctrl_interrupt_tc_setup+0xdc>
    ab26:	c1 e0       	ldi	r28, 0x01	; 1
    ab28:	8c 2f       	mov	r24, r28
    ab2a:	cf 91       	pop	r28
    ab2c:	0f 91       	pop	r16
    ab2e:	08 95       	ret

0000ab30 <udd_ep_trans_complet>:
    ab30:	8f 92       	push	r8
    ab32:	9f 92       	push	r9
    ab34:	af 92       	push	r10
    ab36:	bf 92       	push	r11
    ab38:	df 92       	push	r13
    ab3a:	ef 92       	push	r14
    ab3c:	ff 92       	push	r15
    ab3e:	0f 93       	push	r16
    ab40:	1f 93       	push	r17
    ab42:	cf 93       	push	r28
    ab44:	df 93       	push	r29
    ab46:	d8 2e       	mov	r13, r24
    ab48:	66 df       	rcall	.-308    	; 0xaa16 <udd_ep_get_job>
    ab4a:	8c 01       	movw	r16, r24
    ab4c:	cd 2d       	mov	r28, r13
    ab4e:	cf 70       	andi	r28, 0x0F	; 15
    ab50:	d0 e0       	ldi	r29, 0x00	; 0
    ab52:	ce 01       	movw	r24, r28
    ab54:	88 0f       	add	r24, r24
    ab56:	99 1f       	adc	r25, r25
    ab58:	cd 2d       	mov	r28, r13
    ab5a:	0d 2c       	mov	r0, r13
    ab5c:	00 0c       	add	r0, r0
    ab5e:	dd 0b       	sbc	r29, r29
    ab60:	cc 27       	eor	r28, r28
    ab62:	dd 0f       	add	r29, r29
    ab64:	cc 1f       	adc	r28, r28
    ab66:	dd 27       	eor	r29, r29
    ab68:	c8 0f       	add	r28, r24
    ab6a:	d9 1f       	adc	r29, r25
    ab6c:	ce 01       	movw	r24, r28
    ab6e:	88 0f       	add	r24, r24
    ab70:	99 1f       	adc	r25, r25
    ab72:	88 0f       	add	r24, r24
    ab74:	99 1f       	adc	r25, r25
    ab76:	88 0f       	add	r24, r24
    ab78:	99 1f       	adc	r25, r25
    ab7a:	9c 01       	movw	r18, r24
    ab7c:	24 58       	subi	r18, 0x84	; 132
    ab7e:	3b 4d       	sbci	r19, 0xDB	; 219
    ab80:	79 01       	movw	r14, r18
    ab82:	c9 01       	movw	r24, r18
    ab84:	1f df       	rcall	.-450    	; 0xa9c4 <udd_ep_get_size>
    ab86:	4c 01       	movw	r8, r24
    ab88:	dd 20       	and	r13, r13
    ab8a:	0c f0       	brlt	.+2      	; 0xab8e <udd_ep_trans_complet+0x5e>
    ab8c:	7b c0       	rjmp	.+246    	; 0xac84 <udd_ep_trans_complet+0x154>
    ab8e:	fe 01       	movw	r30, r28
    ab90:	ee 0f       	add	r30, r30
    ab92:	ff 1f       	adc	r31, r31
    ab94:	ee 0f       	add	r30, r30
    ab96:	ff 1f       	adc	r31, r31
    ab98:	ee 0f       	add	r30, r30
    ab9a:	ff 1f       	adc	r31, r31
    ab9c:	e0 59       	subi	r30, 0x90	; 144
    ab9e:	fb 4d       	sbci	r31, 0xDB	; 219
    aba0:	22 89       	ldd	r18, Z+18	; 0x12
    aba2:	33 89       	ldd	r19, Z+19	; 0x13
    aba4:	d8 01       	movw	r26, r16
    aba6:	15 96       	adiw	r26, 0x05	; 5
    aba8:	8d 91       	ld	r24, X+
    abaa:	9c 91       	ld	r25, X
    abac:	16 97       	sbiw	r26, 0x06	; 6
    abae:	82 0f       	add	r24, r18
    abb0:	93 1f       	adc	r25, r19
    abb2:	15 96       	adiw	r26, 0x05	; 5
    abb4:	8d 93       	st	X+, r24
    abb6:	9c 93       	st	X, r25
    abb8:	16 97       	sbiw	r26, 0x06	; 6
    abba:	13 96       	adiw	r26, 0x03	; 3
    abbc:	2d 91       	ld	r18, X+
    abbe:	3c 91       	ld	r19, X
    abc0:	14 97       	sbiw	r26, 0x04	; 4
    abc2:	82 17       	cp	r24, r18
    abc4:	93 07       	cpc	r25, r19
    abc6:	09 f4       	brne	.+2      	; 0xabca <udd_ep_trans_complet+0x9a>
    abc8:	47 c0       	rjmp	.+142    	; 0xac58 <udd_ep_trans_complet+0x128>
    abca:	28 1b       	sub	r18, r24
    abcc:	39 0b       	sbc	r19, r25
    abce:	21 15       	cp	r18, r1
    abd0:	b4 e0       	ldi	r27, 0x04	; 4
    abd2:	3b 07       	cpc	r19, r27
    abd4:	40 f0       	brcs	.+16     	; 0xabe6 <udd_ep_trans_complet+0xb6>
    abd6:	2f ef       	ldi	r18, 0xFF	; 255
    abd8:	33 e0       	ldi	r19, 0x03	; 3
    abda:	c9 01       	movw	r24, r18
    abdc:	b4 01       	movw	r22, r8
    abde:	0e 94 45 81 	call	0x1028a	; 0x1028a <__udivmodhi4>
    abe2:	28 1b       	sub	r18, r24
    abe4:	39 0b       	sbc	r19, r25
    abe6:	f8 01       	movw	r30, r16
    abe8:	80 81       	ld	r24, Z
    abea:	81 ff       	sbrs	r24, 1
    abec:	0a c0       	rjmp	.+20     	; 0xac02 <udd_ep_trans_complet+0xd2>
    abee:	c9 01       	movw	r24, r18
    abf0:	b4 01       	movw	r22, r8
    abf2:	0e 94 45 81 	call	0x1028a	; 0x1028a <__udivmodhi4>
    abf6:	41 e0       	ldi	r20, 0x01	; 1
    abf8:	89 2b       	or	r24, r25
    abfa:	09 f0       	breq	.+2      	; 0xabfe <udd_ep_trans_complet+0xce>
    abfc:	40 e0       	ldi	r20, 0x00	; 0
    abfe:	84 2f       	mov	r24, r20
    ac00:	01 c0       	rjmp	.+2      	; 0xac04 <udd_ep_trans_complet+0xd4>
    ac02:	80 e0       	ldi	r24, 0x00	; 0
    ac04:	d8 01       	movw	r26, r16
    ac06:	9c 91       	ld	r25, X
    ac08:	80 fb       	bst	r24, 0
    ac0a:	91 f9       	bld	r25, 1
    ac0c:	9c 93       	st	X, r25
    ac0e:	fe 01       	movw	r30, r28
    ac10:	ee 0f       	add	r30, r30
    ac12:	ff 1f       	adc	r31, r31
    ac14:	ee 0f       	add	r30, r30
    ac16:	ff 1f       	adc	r31, r31
    ac18:	ee 0f       	add	r30, r30
    ac1a:	ff 1f       	adc	r31, r31
    ac1c:	e0 59       	subi	r30, 0x90	; 144
    ac1e:	fb 4d       	sbci	r31, 0xDB	; 219
    ac20:	12 8a       	std	Z+18, r1	; 0x12
    ac22:	13 8a       	std	Z+19, r1	; 0x13
    ac24:	26 87       	std	Z+14, r18	; 0x0e
    ac26:	37 87       	std	Z+15, r19	; 0x0f
    ac28:	11 96       	adiw	r26, 0x01	; 1
    ac2a:	2d 91       	ld	r18, X+
    ac2c:	3c 91       	ld	r19, X
    ac2e:	12 97       	sbiw	r26, 0x02	; 2
    ac30:	15 96       	adiw	r26, 0x05	; 5
    ac32:	8d 91       	ld	r24, X+
    ac34:	9c 91       	ld	r25, X
    ac36:	16 97       	sbiw	r26, 0x06	; 6
    ac38:	82 0f       	add	r24, r18
    ac3a:	93 1f       	adc	r25, r19
    ac3c:	cc 0f       	add	r28, r28
    ac3e:	dd 1f       	adc	r29, r29
    ac40:	cc 0f       	add	r28, r28
    ac42:	dd 1f       	adc	r29, r29
    ac44:	cc 0f       	add	r28, r28
    ac46:	dd 1f       	adc	r29, r29
    ac48:	c0 58       	subi	r28, 0x80	; 128
    ac4a:	db 4d       	sbci	r29, 0xDB	; 219
    ac4c:	88 83       	st	Y, r24
    ac4e:	99 83       	std	Y+1, r25	; 0x01
    ac50:	f7 01       	movw	r30, r14
    ac52:	02 e0       	ldi	r16, 0x02	; 2
    ac54:	06 93       	lac	Z, r16
    ac56:	e4 c0       	rjmp	.+456    	; 0xae20 <udd_ep_trans_complet+0x2f0>
    ac58:	d8 01       	movw	r26, r16
    ac5a:	8c 91       	ld	r24, X
    ac5c:	81 ff       	sbrs	r24, 1
    ac5e:	cd c0       	rjmp	.+410    	; 0xadfa <udd_ep_trans_complet+0x2ca>
    ac60:	8d 7f       	andi	r24, 0xFD	; 253
    ac62:	8c 93       	st	X, r24
    ac64:	cc 0f       	add	r28, r28
    ac66:	dd 1f       	adc	r29, r29
    ac68:	cc 0f       	add	r28, r28
    ac6a:	dd 1f       	adc	r29, r29
    ac6c:	cc 0f       	add	r28, r28
    ac6e:	dd 1f       	adc	r29, r29
    ac70:	c0 59       	subi	r28, 0x90	; 144
    ac72:	db 4d       	sbci	r29, 0xDB	; 219
    ac74:	1a 8a       	std	Y+18, r1	; 0x12
    ac76:	1b 8a       	std	Y+19, r1	; 0x13
    ac78:	1e 86       	std	Y+14, r1	; 0x0e
    ac7a:	1f 86       	std	Y+15, r1	; 0x0f
    ac7c:	f7 01       	movw	r30, r14
    ac7e:	02 e0       	ldi	r16, 0x02	; 2
    ac80:	06 93       	lac	Z, r16
    ac82:	ce c0       	rjmp	.+412    	; 0xae20 <udd_ep_trans_complet+0x2f0>
    ac84:	fe 01       	movw	r30, r28
    ac86:	ee 0f       	add	r30, r30
    ac88:	ff 1f       	adc	r31, r31
    ac8a:	ee 0f       	add	r30, r30
    ac8c:	ff 1f       	adc	r31, r31
    ac8e:	ee 0f       	add	r30, r30
    ac90:	ff 1f       	adc	r31, r31
    ac92:	e0 59       	subi	r30, 0x90	; 144
    ac94:	fb 4d       	sbci	r31, 0xDB	; 219
    ac96:	a6 84       	ldd	r10, Z+14	; 0x0e
    ac98:	b7 84       	ldd	r11, Z+15	; 0x0f
    ac9a:	d8 01       	movw	r26, r16
    ac9c:	8c 91       	ld	r24, X
    ac9e:	82 ff       	sbrs	r24, 2
    aca0:	1b c0       	rjmp	.+54     	; 0xacd8 <udd_ep_trans_complet+0x1a8>
    aca2:	11 96       	adiw	r26, 0x01	; 1
    aca4:	ed 91       	ld	r30, X+
    aca6:	fc 91       	ld	r31, X
    aca8:	12 97       	sbiw	r26, 0x02	; 2
    acaa:	15 96       	adiw	r26, 0x05	; 5
    acac:	2d 91       	ld	r18, X+
    acae:	3c 91       	ld	r19, X
    acb0:	16 97       	sbiw	r26, 0x06	; 6
    acb2:	13 96       	adiw	r26, 0x03	; 3
    acb4:	8d 91       	ld	r24, X+
    acb6:	9c 91       	ld	r25, X
    acb8:	14 97       	sbiw	r26, 0x04	; 4
    acba:	b4 01       	movw	r22, r8
    acbc:	0e 94 45 81 	call	0x1028a	; 0x1028a <__udivmodhi4>
    acc0:	b0 e4       	ldi	r27, 0x40	; 64
    acc2:	db 9e       	mul	r13, r27
    acc4:	b0 01       	movw	r22, r0
    acc6:	11 24       	eor	r1, r1
    acc8:	6a 5b       	subi	r22, 0xBA	; 186
    acca:	7c 4d       	sbci	r23, 0xDC	; 220
    accc:	ac 01       	movw	r20, r24
    acce:	cf 01       	movw	r24, r30
    acd0:	82 0f       	add	r24, r18
    acd2:	93 1f       	adc	r25, r19
    acd4:	0e 94 bd 84 	call	0x1097a	; 0x1097a <memcpy>
    acd8:	f8 01       	movw	r30, r16
    acda:	25 81       	ldd	r18, Z+5	; 0x05
    acdc:	36 81       	ldd	r19, Z+6	; 0x06
    acde:	2a 0d       	add	r18, r10
    ace0:	3b 1d       	adc	r19, r11
    ace2:	25 83       	std	Z+5, r18	; 0x05
    ace4:	36 83       	std	Z+6, r19	; 0x06
    ace6:	83 81       	ldd	r24, Z+3	; 0x03
    ace8:	94 81       	ldd	r25, Z+4	; 0x04
    acea:	82 17       	cp	r24, r18
    acec:	93 07       	cpc	r25, r19
    acee:	68 f4       	brcc	.+26     	; 0xad0a <udd_ep_trans_complet+0x1da>
    acf0:	85 83       	std	Z+5, r24	; 0x05
    acf2:	96 83       	std	Z+6, r25	; 0x06
    acf4:	cc 0f       	add	r28, r28
    acf6:	dd 1f       	adc	r29, r29
    acf8:	cc 0f       	add	r28, r28
    acfa:	dd 1f       	adc	r29, r29
    acfc:	cc 0f       	add	r28, r28
    acfe:	dd 1f       	adc	r29, r29
    ad00:	c0 59       	subi	r28, 0x90	; 144
    ad02:	db 4d       	sbci	r29, 0xDB	; 219
    ad04:	8a 89       	ldd	r24, Y+18	; 0x12
    ad06:	9b 89       	ldd	r25, Y+19	; 0x13
    ad08:	78 c0       	rjmp	.+240    	; 0xadfa <udd_ep_trans_complet+0x2ca>
    ad0a:	fe 01       	movw	r30, r28
    ad0c:	ee 0f       	add	r30, r30
    ad0e:	ff 1f       	adc	r31, r31
    ad10:	ee 0f       	add	r30, r30
    ad12:	ff 1f       	adc	r31, r31
    ad14:	ee 0f       	add	r30, r30
    ad16:	ff 1f       	adc	r31, r31
    ad18:	e0 59       	subi	r30, 0x90	; 144
    ad1a:	fb 4d       	sbci	r31, 0xDB	; 219
    ad1c:	42 89       	ldd	r20, Z+18	; 0x12
    ad1e:	53 89       	ldd	r21, Z+19	; 0x13
    ad20:	a4 16       	cp	r10, r20
    ad22:	b5 06       	cpc	r11, r21
    ad24:	09 f0       	breq	.+2      	; 0xad28 <udd_ep_trans_complet+0x1f8>
    ad26:	69 c0       	rjmp	.+210    	; 0xadfa <udd_ep_trans_complet+0x2ca>
    ad28:	28 17       	cp	r18, r24
    ad2a:	39 07       	cpc	r19, r25
    ad2c:	09 f4       	brne	.+2      	; 0xad30 <udd_ep_trans_complet+0x200>
    ad2e:	65 c0       	rjmp	.+202    	; 0xadfa <udd_ep_trans_complet+0x2ca>
    ad30:	ac 01       	movw	r20, r24
    ad32:	42 1b       	sub	r20, r18
    ad34:	53 0b       	sbc	r21, r19
    ad36:	9a 01       	movw	r18, r20
    ad38:	21 15       	cp	r18, r1
    ad3a:	54 e0       	ldi	r21, 0x04	; 4
    ad3c:	35 07       	cpc	r19, r21
    ad3e:	48 f0       	brcs	.+18     	; 0xad52 <udd_ep_trans_complet+0x222>
    ad40:	2f ef       	ldi	r18, 0xFF	; 255
    ad42:	33 e0       	ldi	r19, 0x03	; 3
    ad44:	c9 01       	movw	r24, r18
    ad46:	b4 01       	movw	r22, r8
    ad48:	0e 94 45 81 	call	0x1028a	; 0x1028a <__udivmodhi4>
    ad4c:	28 1b       	sub	r18, r24
    ad4e:	39 0b       	sbc	r19, r25
    ad50:	06 c0       	rjmp	.+12     	; 0xad5e <udd_ep_trans_complet+0x22e>
    ad52:	c9 01       	movw	r24, r18
    ad54:	b4 01       	movw	r22, r8
    ad56:	0e 94 45 81 	call	0x1028a	; 0x1028a <__udivmodhi4>
    ad5a:	28 1b       	sub	r18, r24
    ad5c:	39 0b       	sbc	r19, r25
    ad5e:	fe 01       	movw	r30, r28
    ad60:	ee 0f       	add	r30, r30
    ad62:	ff 1f       	adc	r31, r31
    ad64:	ee 0f       	add	r30, r30
    ad66:	ff 1f       	adc	r31, r31
    ad68:	ee 0f       	add	r30, r30
    ad6a:	ff 1f       	adc	r31, r31
    ad6c:	e0 59       	subi	r30, 0x90	; 144
    ad6e:	fb 4d       	sbci	r31, 0xDB	; 219
    ad70:	16 86       	std	Z+14, r1	; 0x0e
    ad72:	17 86       	std	Z+15, r1	; 0x0f
    ad74:	28 15       	cp	r18, r8
    ad76:	39 05       	cpc	r19, r9
    ad78:	00 f5       	brcc	.+64     	; 0xadba <udd_ep_trans_complet+0x28a>
    ad7a:	d8 01       	movw	r26, r16
    ad7c:	8c 91       	ld	r24, X
    ad7e:	84 60       	ori	r24, 0x04	; 4
    ad80:	8c 93       	st	X, r24
    ad82:	b0 e4       	ldi	r27, 0x40	; 64
    ad84:	db 9e       	mul	r13, r27
    ad86:	c0 01       	movw	r24, r0
    ad88:	11 24       	eor	r1, r1
    ad8a:	8a 5b       	subi	r24, 0xBA	; 186
    ad8c:	9c 4d       	sbci	r25, 0xDC	; 220
    ad8e:	fe 01       	movw	r30, r28
    ad90:	ee 0f       	add	r30, r30
    ad92:	ff 1f       	adc	r31, r31
    ad94:	ee 0f       	add	r30, r30
    ad96:	ff 1f       	adc	r31, r31
    ad98:	ee 0f       	add	r30, r30
    ad9a:	ff 1f       	adc	r31, r31
    ad9c:	e0 58       	subi	r30, 0x80	; 128
    ad9e:	fb 4d       	sbci	r31, 0xDB	; 219
    ada0:	80 83       	st	Z, r24
    ada2:	91 83       	std	Z+1, r25	; 0x01
    ada4:	cc 0f       	add	r28, r28
    ada6:	dd 1f       	adc	r29, r29
    ada8:	cc 0f       	add	r28, r28
    adaa:	dd 1f       	adc	r29, r29
    adac:	cc 0f       	add	r28, r28
    adae:	dd 1f       	adc	r29, r29
    adb0:	c0 59       	subi	r28, 0x90	; 144
    adb2:	db 4d       	sbci	r29, 0xDB	; 219
    adb4:	8a 8a       	std	Y+18, r8	; 0x12
    adb6:	9b 8a       	std	Y+19, r9	; 0x13
    adb8:	1c c0       	rjmp	.+56     	; 0xadf2 <udd_ep_trans_complet+0x2c2>
    adba:	f8 01       	movw	r30, r16
    adbc:	41 81       	ldd	r20, Z+1	; 0x01
    adbe:	52 81       	ldd	r21, Z+2	; 0x02
    adc0:	85 81       	ldd	r24, Z+5	; 0x05
    adc2:	96 81       	ldd	r25, Z+6	; 0x06
    adc4:	84 0f       	add	r24, r20
    adc6:	95 1f       	adc	r25, r21
    adc8:	fe 01       	movw	r30, r28
    adca:	ee 0f       	add	r30, r30
    adcc:	ff 1f       	adc	r31, r31
    adce:	ee 0f       	add	r30, r30
    add0:	ff 1f       	adc	r31, r31
    add2:	ee 0f       	add	r30, r30
    add4:	ff 1f       	adc	r31, r31
    add6:	e0 58       	subi	r30, 0x80	; 128
    add8:	fb 4d       	sbci	r31, 0xDB	; 219
    adda:	80 83       	st	Z, r24
    addc:	91 83       	std	Z+1, r25	; 0x01
    adde:	cc 0f       	add	r28, r28
    ade0:	dd 1f       	adc	r29, r29
    ade2:	cc 0f       	add	r28, r28
    ade4:	dd 1f       	adc	r29, r29
    ade6:	cc 0f       	add	r28, r28
    ade8:	dd 1f       	adc	r29, r29
    adea:	c0 59       	subi	r28, 0x90	; 144
    adec:	db 4d       	sbci	r29, 0xDB	; 219
    adee:	2a 8b       	std	Y+18, r18	; 0x12
    adf0:	3b 8b       	std	Y+19, r19	; 0x13
    adf2:	f7 01       	movw	r30, r14
    adf4:	02 e0       	ldi	r16, 0x02	; 2
    adf6:	06 93       	lac	Z, r16
    adf8:	13 c0       	rjmp	.+38     	; 0xae20 <udd_ep_trans_complet+0x2f0>
    adfa:	d8 01       	movw	r26, r16
    adfc:	8c 91       	ld	r24, X
    adfe:	80 ff       	sbrs	r24, 0
    ae00:	0f c0       	rjmp	.+30     	; 0xae20 <udd_ep_trans_complet+0x2f0>
    ae02:	8e 7f       	andi	r24, 0xFE	; 254
    ae04:	8c 93       	st	X, r24
    ae06:	17 96       	adiw	r26, 0x07	; 7
    ae08:	ed 91       	ld	r30, X+
    ae0a:	fc 91       	ld	r31, X
    ae0c:	18 97       	sbiw	r26, 0x08	; 8
    ae0e:	30 97       	sbiw	r30, 0x00	; 0
    ae10:	39 f0       	breq	.+14     	; 0xae20 <udd_ep_trans_complet+0x2f0>
    ae12:	15 96       	adiw	r26, 0x05	; 5
    ae14:	6d 91       	ld	r22, X+
    ae16:	7c 91       	ld	r23, X
    ae18:	16 97       	sbiw	r26, 0x06	; 6
    ae1a:	4d 2d       	mov	r20, r13
    ae1c:	80 e0       	ldi	r24, 0x00	; 0
    ae1e:	19 95       	eicall
    ae20:	df 91       	pop	r29
    ae22:	cf 91       	pop	r28
    ae24:	1f 91       	pop	r17
    ae26:	0f 91       	pop	r16
    ae28:	ff 90       	pop	r15
    ae2a:	ef 90       	pop	r14
    ae2c:	df 90       	pop	r13
    ae2e:	bf 90       	pop	r11
    ae30:	af 90       	pop	r10
    ae32:	9f 90       	pop	r9
    ae34:	8f 90       	pop	r8
    ae36:	08 95       	ret

0000ae38 <udd_disable>:
    ae38:	1f 93       	push	r17
    ae3a:	cf 93       	push	r28
    ae3c:	df 93       	push	r29
    ae3e:	1f 92       	push	r1
    ae40:	1f 92       	push	r1
    ae42:	cd b7       	in	r28, 0x3d	; 61
    ae44:	de b7       	in	r29, 0x3e	; 62
    ae46:	8f b7       	in	r24, 0x3f	; 63
    ae48:	89 83       	std	Y+1, r24	; 0x01
    ae4a:	f8 94       	cli
    ae4c:	19 81       	ldd	r17, Y+1	; 0x01
    ae4e:	e1 ec       	ldi	r30, 0xC1	; 193
    ae50:	f4 e0       	ldi	r31, 0x04	; 4
    ae52:	80 81       	ld	r24, Z
    ae54:	8e 7f       	andi	r24, 0xFE	; 254
    ae56:	80 83       	st	Z, r24
    ae58:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    ae5c:	10 82       	st	Z, r1
    ae5e:	0e 94 1f 6f 	call	0xde3e	; 0xde3e <sysclk_disable_usb>
    ae62:	80 e0       	ldi	r24, 0x00	; 0
    ae64:	c2 dc       	rcall	.-1660   	; 0xa7ea <udd_sleep_mode>
    ae66:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x5>
    ae6a:	81 11       	cpse	r24, r1
    ae6c:	01 c0       	rjmp	.+2      	; 0xae70 <udd_disable+0x38>
    ae6e:	ff cf       	rjmp	.-2      	; 0xae6e <udd_disable+0x36>
    ae70:	8f b7       	in	r24, 0x3f	; 63
    ae72:	8a 83       	std	Y+2, r24	; 0x02
    ae74:	f8 94       	cli
    ae76:	9a 81       	ldd	r25, Y+2	; 0x02
    ae78:	e7 e7       	ldi	r30, 0x77	; 119
    ae7a:	fe e2       	ldi	r31, 0x2E	; 46
    ae7c:	85 81       	ldd	r24, Z+5	; 0x05
    ae7e:	81 50       	subi	r24, 0x01	; 1
    ae80:	85 83       	std	Z+5, r24	; 0x05
    ae82:	9f bf       	out	0x3f, r25	; 63
    ae84:	1f bf       	out	0x3f, r17	; 63
    ae86:	0f 90       	pop	r0
    ae88:	0f 90       	pop	r0
    ae8a:	df 91       	pop	r29
    ae8c:	cf 91       	pop	r28
    ae8e:	1f 91       	pop	r17
    ae90:	08 95       	ret

0000ae92 <udd_attach>:
    ae92:	1f 93       	push	r17
    ae94:	cf 93       	push	r28
    ae96:	df 93       	push	r29
    ae98:	1f 92       	push	r1
    ae9a:	cd b7       	in	r28, 0x3d	; 61
    ae9c:	de b7       	in	r29, 0x3e	; 62
    ae9e:	8f b7       	in	r24, 0x3f	; 63
    aea0:	89 83       	std	Y+1, r24	; 0x01
    aea2:	f8 94       	cli
    aea4:	19 81       	ldd	r17, Y+1	; 0x01
    aea6:	81 e0       	ldi	r24, 0x01	; 1
    aea8:	a0 dc       	rcall	.-1728   	; 0xa7ea <udd_sleep_mode>
    aeaa:	ea ec       	ldi	r30, 0xCA	; 202
    aeac:	f4 e0       	ldi	r31, 0x04	; 4
    aeae:	80 e4       	ldi	r24, 0x40	; 64
    aeb0:	80 83       	st	Z, r24
    aeb2:	80 e2       	ldi	r24, 0x20	; 32
    aeb4:	80 83       	st	Z, r24
    aeb6:	e1 ec       	ldi	r30, 0xC1	; 193
    aeb8:	f4 e0       	ldi	r31, 0x04	; 4
    aeba:	80 81       	ld	r24, Z
    aebc:	81 60       	ori	r24, 0x01	; 1
    aebe:	80 83       	st	Z, r24
    aec0:	a9 ec       	ldi	r26, 0xC9	; 201
    aec2:	b4 e0       	ldi	r27, 0x04	; 4
    aec4:	8c 91       	ld	r24, X
    aec6:	82 60       	ori	r24, 0x02	; 2
    aec8:	8c 93       	st	X, r24
    aeca:	e8 ec       	ldi	r30, 0xC8	; 200
    aecc:	f4 e0       	ldi	r31, 0x04	; 4
    aece:	80 81       	ld	r24, Z
    aed0:	80 64       	ori	r24, 0x40	; 64
    aed2:	80 83       	st	Z, r24
    aed4:	8c 91       	ld	r24, X
    aed6:	81 60       	ori	r24, 0x01	; 1
    aed8:	8c 93       	st	X, r24
    aeda:	80 81       	ld	r24, Z
    aedc:	80 68       	ori	r24, 0x80	; 128
    aede:	80 83       	st	Z, r24
    aee0:	1f bf       	out	0x3f, r17	; 63
    aee2:	0f 90       	pop	r0
    aee4:	df 91       	pop	r29
    aee6:	cf 91       	pop	r28
    aee8:	1f 91       	pop	r17
    aeea:	08 95       	ret

0000aeec <udd_enable>:
    aeec:	0f 93       	push	r16
    aeee:	1f 93       	push	r17
    aef0:	cf 93       	push	r28
    aef2:	df 93       	push	r29
    aef4:	1f 92       	push	r1
    aef6:	1f 92       	push	r1
    aef8:	cd b7       	in	r28, 0x3d	; 61
    aefa:	de b7       	in	r29, 0x3e	; 62
    aefc:	00 e6       	ldi	r16, 0x60	; 96
    aefe:	10 e0       	ldi	r17, 0x00	; 0
    af00:	f8 01       	movw	r30, r16
    af02:	10 82       	st	Z, r1
    af04:	80 e3       	ldi	r24, 0x30	; 48
    af06:	0e 94 d9 6e 	call	0xddb2	; 0xddb2 <sysclk_enable_usb>
    af0a:	e0 ec       	ldi	r30, 0xC0	; 192
    af0c:	f4 e0       	ldi	r31, 0x04	; 4
    af0e:	80 81       	ld	r24, Z
    af10:	80 64       	ori	r24, 0x40	; 64
    af12:	80 83       	st	Z, r24
    af14:	81 e0       	ldi	r24, 0x01	; 1
    af16:	f8 01       	movw	r30, r16
    af18:	80 83       	st	Z, r24
    af1a:	8f b7       	in	r24, 0x3f	; 63
    af1c:	8a 83       	std	Y+2, r24	; 0x02
    af1e:	f8 94       	cli
    af20:	1a 81       	ldd	r17, Y+2	; 0x02
    af22:	e0 e7       	ldi	r30, 0x70	; 112
    af24:	f4 e2       	ldi	r31, 0x24	; 36
    af26:	15 86       	std	Z+13, r1	; 0x0d
    af28:	15 8a       	std	Z+21, r1	; 0x15
    af2a:	15 8e       	std	Z+29, r1	; 0x1d
    af2c:	15 a2       	std	Z+37, r1	; 0x25
    af2e:	15 a6       	std	Z+45, r1	; 0x2d
    af30:	15 aa       	std	Z+53, r1	; 0x35
    af32:	e6 e0       	ldi	r30, 0x06	; 6
    af34:	f4 e2       	ldi	r31, 0x24	; 36
    af36:	80 81       	ld	r24, Z
    af38:	8e 7f       	andi	r24, 0xFE	; 254
    af3a:	80 83       	st	Z, r24
    af3c:	ef e0       	ldi	r30, 0x0F	; 15
    af3e:	f4 e2       	ldi	r31, 0x24	; 36
    af40:	80 81       	ld	r24, Z
    af42:	8e 7f       	andi	r24, 0xFE	; 254
    af44:	80 83       	st	Z, r24
    af46:	e8 e1       	ldi	r30, 0x18	; 24
    af48:	f4 e2       	ldi	r31, 0x24	; 36
    af4a:	80 81       	ld	r24, Z
    af4c:	8e 7f       	andi	r24, 0xFE	; 254
    af4e:	80 83       	st	Z, r24
    af50:	e1 e2       	ldi	r30, 0x21	; 33
    af52:	f4 e2       	ldi	r31, 0x24	; 36
    af54:	80 81       	ld	r24, Z
    af56:	8e 7f       	andi	r24, 0xFE	; 254
    af58:	80 83       	st	Z, r24
    af5a:	6a e1       	ldi	r22, 0x1A	; 26
    af5c:	70 e0       	ldi	r23, 0x00	; 0
    af5e:	82 e0       	ldi	r24, 0x02	; 2
    af60:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    af64:	8f 3f       	cpi	r24, 0xFF	; 255
    af66:	19 f0       	breq	.+6      	; 0xaf6e <udd_enable+0x82>
    af68:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    af6c:	03 c0       	rjmp	.+6      	; 0xaf74 <udd_enable+0x88>
    af6e:	8f e1       	ldi	r24, 0x1F	; 31
    af70:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    af74:	6b e1       	ldi	r22, 0x1B	; 27
    af76:	70 e0       	ldi	r23, 0x00	; 0
    af78:	82 e0       	ldi	r24, 0x02	; 2
    af7a:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    af7e:	8f 3f       	cpi	r24, 0xFF	; 255
    af80:	19 f0       	breq	.+6      	; 0xaf88 <udd_enable+0x9c>
    af82:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    af86:	03 c0       	rjmp	.+6      	; 0xaf8e <udd_enable+0xa2>
    af88:	8f e1       	ldi	r24, 0x1F	; 31
    af8a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    af8e:	e0 ec       	ldi	r30, 0xC0	; 192
    af90:	f4 e0       	ldi	r31, 0x04	; 4
    af92:	80 81       	ld	r24, Z
    af94:	82 60       	ori	r24, 0x02	; 2
    af96:	80 83       	st	Z, r24
    af98:	80 81       	ld	r24, Z
    af9a:	80 68       	ori	r24, 0x80	; 128
    af9c:	80 83       	st	Z, r24
    af9e:	80 81       	ld	r24, Z
    afa0:	80 61       	ori	r24, 0x10	; 16
    afa2:	80 83       	st	Z, r24
    afa4:	8c e7       	ldi	r24, 0x7C	; 124
    afa6:	94 e2       	ldi	r25, 0x24	; 36
    afa8:	86 83       	std	Z+6, r24	; 0x06
    afaa:	97 83       	std	Z+7, r25	; 0x07
    afac:	80 81       	ld	r24, Z
    afae:	80 62       	ori	r24, 0x20	; 32
    afb0:	80 83       	st	Z, r24
    afb2:	8f ef       	ldi	r24, 0xFF	; 255
    afb4:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    afb8:	e8 ec       	ldi	r30, 0xC8	; 200
    afba:	f4 e0       	ldi	r31, 0x04	; 4
    afbc:	80 81       	ld	r24, Z
    afbe:	82 60       	ori	r24, 0x02	; 2
    afc0:	80 83       	st	Z, r24
    afc2:	10 92 b0 24 	sts	0x24B0, r1	; 0x8024b0 <udd_b_idle>
    afc6:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x5>
    afca:	8f 3f       	cpi	r24, 0xFF	; 255
    afcc:	09 f4       	brne	.+2      	; 0xafd0 <udd_enable+0xe4>
    afce:	ff cf       	rjmp	.-2      	; 0xafce <udd_enable+0xe2>
    afd0:	8f b7       	in	r24, 0x3f	; 63
    afd2:	89 83       	std	Y+1, r24	; 0x01
    afd4:	f8 94       	cli
    afd6:	99 81       	ldd	r25, Y+1	; 0x01
    afd8:	e7 e7       	ldi	r30, 0x77	; 119
    afda:	fe e2       	ldi	r31, 0x2E	; 46
    afdc:	85 81       	ldd	r24, Z+5	; 0x05
    afde:	8f 5f       	subi	r24, 0xFF	; 255
    afe0:	85 83       	std	Z+5, r24	; 0x05
    afe2:	9f bf       	out	0x3f, r25	; 63
    afe4:	56 df       	rcall	.-340    	; 0xae92 <udd_attach>
    afe6:	1f bf       	out	0x3f, r17	; 63
    afe8:	0f 90       	pop	r0
    afea:	0f 90       	pop	r0
    afec:	df 91       	pop	r29
    afee:	cf 91       	pop	r28
    aff0:	1f 91       	pop	r17
    aff2:	0f 91       	pop	r16
    aff4:	08 95       	ret

0000aff6 <udd_is_high_speed>:
    aff6:	80 e0       	ldi	r24, 0x00	; 0
    aff8:	08 95       	ret

0000affa <udd_set_address>:
    affa:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    affe:	08 95       	ret

0000b000 <udd_getaddress>:
    b000:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    b004:	08 95       	ret

0000b006 <udd_get_frame_number>:
    b006:	80 91 ac 24 	lds	r24, 0x24AC	; 0x8024ac <udd_sram+0x3c>
    b00a:	90 91 ad 24 	lds	r25, 0x24AD	; 0x8024ad <udd_sram+0x3d>
    b00e:	08 95       	ret

0000b010 <udd_get_micro_frame_number>:
    b010:	80 e0       	ldi	r24, 0x00	; 0
    b012:	90 e0       	ldi	r25, 0x00	; 0
    b014:	08 95       	ret

0000b016 <udd_set_setup_payload>:
    b016:	e1 ee       	ldi	r30, 0xE1	; 225
    b018:	fd e2       	ldi	r31, 0x2D	; 45
    b01a:	80 87       	std	Z+8, r24	; 0x08
    b01c:	91 87       	std	Z+9, r25	; 0x09
    b01e:	62 87       	std	Z+10, r22	; 0x0a
    b020:	73 87       	std	Z+11, r23	; 0x0b
    b022:	08 95       	ret

0000b024 <udd_ep_alloc>:
    b024:	28 2f       	mov	r18, r24
    b026:	2f 70       	andi	r18, 0x0F	; 15
    b028:	30 e0       	ldi	r19, 0x00	; 0
    b02a:	22 0f       	add	r18, r18
    b02c:	33 1f       	adc	r19, r19
    b02e:	08 2e       	mov	r0, r24
    b030:	00 0c       	add	r0, r0
    b032:	99 0b       	sbc	r25, r25
    b034:	88 27       	eor	r24, r24
    b036:	99 0f       	add	r25, r25
    b038:	88 1f       	adc	r24, r24
    b03a:	99 27       	eor	r25, r25
    b03c:	82 0f       	add	r24, r18
    b03e:	93 1f       	adc	r25, r19
    b040:	fc 01       	movw	r30, r24
    b042:	ee 0f       	add	r30, r30
    b044:	ff 1f       	adc	r31, r31
    b046:	ee 0f       	add	r30, r30
    b048:	ff 1f       	adc	r31, r31
    b04a:	ee 0f       	add	r30, r30
    b04c:	ff 1f       	adc	r31, r31
    b04e:	e0 59       	subi	r30, 0x90	; 144
    b050:	fb 4d       	sbci	r31, 0xDB	; 219
    b052:	25 85       	ldd	r18, Z+13	; 0x0d
    b054:	20 7c       	andi	r18, 0xC0	; 192
    b056:	09 f0       	breq	.+2      	; 0xb05a <udd_ep_alloc+0x36>
    b058:	69 c0       	rjmp	.+210    	; 0xb12c <udd_ep_alloc+0x108>
    b05a:	63 70       	andi	r22, 0x03	; 3
    b05c:	61 30       	cpi	r22, 0x01	; 1
    b05e:	11 f0       	breq	.+4      	; 0xb064 <udd_ep_alloc+0x40>
    b060:	18 f4       	brcc	.+6      	; 0xb068 <udd_ep_alloc+0x44>
    b062:	04 c0       	rjmp	.+8      	; 0xb06c <udd_ep_alloc+0x48>
    b064:	60 ec       	ldi	r22, 0xC0	; 192
    b066:	03 c0       	rjmp	.+6      	; 0xb06e <udd_ep_alloc+0x4a>
    b068:	60 e8       	ldi	r22, 0x80	; 128
    b06a:	01 c0       	rjmp	.+2      	; 0xb06e <udd_ep_alloc+0x4a>
    b06c:	60 e4       	ldi	r22, 0x40	; 64
    b06e:	40 38       	cpi	r20, 0x80	; 128
    b070:	51 05       	cpc	r21, r1
    b072:	e9 f0       	breq	.+58     	; 0xb0ae <udd_ep_alloc+0x8a>
    b074:	50 f4       	brcc	.+20     	; 0xb08a <udd_ep_alloc+0x66>
    b076:	40 32       	cpi	r20, 0x20	; 32
    b078:	51 05       	cpc	r21, r1
    b07a:	a9 f0       	breq	.+42     	; 0xb0a6 <udd_ep_alloc+0x82>
    b07c:	40 34       	cpi	r20, 0x40	; 64
    b07e:	51 05       	cpc	r21, r1
    b080:	a1 f0       	breq	.+40     	; 0xb0aa <udd_ep_alloc+0x86>
    b082:	40 31       	cpi	r20, 0x10	; 16
    b084:	51 05       	cpc	r21, r1
    b086:	d9 f4       	brne	.+54     	; 0xb0be <udd_ep_alloc+0x9a>
    b088:	0c c0       	rjmp	.+24     	; 0xb0a2 <udd_ep_alloc+0x7e>
    b08a:	41 15       	cp	r20, r1
    b08c:	22 e0       	ldi	r18, 0x02	; 2
    b08e:	52 07       	cpc	r21, r18
    b090:	91 f0       	breq	.+36     	; 0xb0b6 <udd_ep_alloc+0x92>
    b092:	4f 3f       	cpi	r20, 0xFF	; 255
    b094:	23 e0       	ldi	r18, 0x03	; 3
    b096:	52 07       	cpc	r21, r18
    b098:	81 f0       	breq	.+32     	; 0xb0ba <udd_ep_alloc+0x96>
    b09a:	41 15       	cp	r20, r1
    b09c:	51 40       	sbci	r21, 0x01	; 1
    b09e:	79 f4       	brne	.+30     	; 0xb0be <udd_ep_alloc+0x9a>
    b0a0:	08 c0       	rjmp	.+16     	; 0xb0b2 <udd_ep_alloc+0x8e>
    b0a2:	21 e0       	ldi	r18, 0x01	; 1
    b0a4:	0d c0       	rjmp	.+26     	; 0xb0c0 <udd_ep_alloc+0x9c>
    b0a6:	22 e0       	ldi	r18, 0x02	; 2
    b0a8:	0b c0       	rjmp	.+22     	; 0xb0c0 <udd_ep_alloc+0x9c>
    b0aa:	23 e0       	ldi	r18, 0x03	; 3
    b0ac:	09 c0       	rjmp	.+18     	; 0xb0c0 <udd_ep_alloc+0x9c>
    b0ae:	24 e0       	ldi	r18, 0x04	; 4
    b0b0:	07 c0       	rjmp	.+14     	; 0xb0c0 <udd_ep_alloc+0x9c>
    b0b2:	25 e0       	ldi	r18, 0x05	; 5
    b0b4:	05 c0       	rjmp	.+10     	; 0xb0c0 <udd_ep_alloc+0x9c>
    b0b6:	26 e0       	ldi	r18, 0x06	; 6
    b0b8:	03 c0       	rjmp	.+6      	; 0xb0c0 <udd_ep_alloc+0x9c>
    b0ba:	27 e0       	ldi	r18, 0x07	; 7
    b0bc:	01 c0       	rjmp	.+2      	; 0xb0c0 <udd_ep_alloc+0x9c>
    b0be:	20 e0       	ldi	r18, 0x00	; 0
    b0c0:	fc 01       	movw	r30, r24
    b0c2:	ee 0f       	add	r30, r30
    b0c4:	ff 1f       	adc	r31, r31
    b0c6:	ee 0f       	add	r30, r30
    b0c8:	ff 1f       	adc	r31, r31
    b0ca:	ee 0f       	add	r30, r30
    b0cc:	ff 1f       	adc	r31, r31
    b0ce:	e0 59       	subi	r30, 0x90	; 144
    b0d0:	fb 4d       	sbci	r31, 0xDB	; 219
    b0d2:	15 86       	std	Z+13, r1	; 0x0d
    b0d4:	36 e0       	ldi	r19, 0x06	; 6
    b0d6:	34 87       	std	Z+12, r19	; 0x0c
    b0d8:	26 2b       	or	r18, r22
    b0da:	25 87       	std	Z+13, r18	; 0x0d
    b0dc:	fc 01       	movw	r30, r24
    b0de:	ee 0f       	add	r30, r30
    b0e0:	ff 1f       	adc	r31, r31
    b0e2:	ee 0f       	add	r30, r30
    b0e4:	ff 1f       	adc	r31, r31
    b0e6:	ee 0f       	add	r30, r30
    b0e8:	ff 1f       	adc	r31, r31
    b0ea:	e0 59       	subi	r30, 0x90	; 144
    b0ec:	fb 4d       	sbci	r31, 0xDB	; 219
    b0ee:	25 85       	ldd	r18, Z+13	; 0x0d
    b0f0:	20 7c       	andi	r18, 0xC0	; 192
    b0f2:	20 3c       	cpi	r18, 0xC0	; 192
    b0f4:	69 f4       	brne	.+26     	; 0xb110 <udd_ep_alloc+0xec>
    b0f6:	fc 01       	movw	r30, r24
    b0f8:	ee 0f       	add	r30, r30
    b0fa:	ff 1f       	adc	r31, r31
    b0fc:	ee 0f       	add	r30, r30
    b0fe:	ff 1f       	adc	r31, r31
    b100:	ee 0f       	add	r30, r30
    b102:	ff 1f       	adc	r31, r31
    b104:	e0 59       	subi	r30, 0x90	; 144
    b106:	fb 4d       	sbci	r31, 0xDB	; 219
    b108:	25 85       	ldd	r18, Z+13	; 0x0d
    b10a:	27 70       	andi	r18, 0x07	; 7
    b10c:	27 30       	cpi	r18, 0x07	; 7
    b10e:	81 f0       	breq	.+32     	; 0xb130 <udd_ep_alloc+0x10c>
    b110:	88 0f       	add	r24, r24
    b112:	99 1f       	adc	r25, r25
    b114:	88 0f       	add	r24, r24
    b116:	99 1f       	adc	r25, r25
    b118:	88 0f       	add	r24, r24
    b11a:	99 1f       	adc	r25, r25
    b11c:	fc 01       	movw	r30, r24
    b11e:	e0 59       	subi	r30, 0x90	; 144
    b120:	fb 4d       	sbci	r31, 0xDB	; 219
    b122:	85 85       	ldd	r24, Z+13	; 0x0d
    b124:	80 62       	ori	r24, 0x20	; 32
    b126:	85 87       	std	Z+13, r24	; 0x0d
    b128:	81 e0       	ldi	r24, 0x01	; 1
    b12a:	08 95       	ret
    b12c:	80 e0       	ldi	r24, 0x00	; 0
    b12e:	08 95       	ret
    b130:	81 e0       	ldi	r24, 0x01	; 1
    b132:	08 95       	ret

0000b134 <udd_ep_is_halted>:
    b134:	e8 2f       	mov	r30, r24
    b136:	ef 70       	andi	r30, 0x0F	; 15
    b138:	f0 e0       	ldi	r31, 0x00	; 0
    b13a:	ee 0f       	add	r30, r30
    b13c:	ff 1f       	adc	r31, r31
    b13e:	08 2e       	mov	r0, r24
    b140:	00 0c       	add	r0, r0
    b142:	99 0b       	sbc	r25, r25
    b144:	88 27       	eor	r24, r24
    b146:	99 0f       	add	r25, r25
    b148:	88 1f       	adc	r24, r24
    b14a:	99 27       	eor	r25, r25
    b14c:	e8 0f       	add	r30, r24
    b14e:	f9 1f       	adc	r31, r25
    b150:	ee 0f       	add	r30, r30
    b152:	ff 1f       	adc	r31, r31
    b154:	ee 0f       	add	r30, r30
    b156:	ff 1f       	adc	r31, r31
    b158:	ee 0f       	add	r30, r30
    b15a:	ff 1f       	adc	r31, r31
    b15c:	e0 59       	subi	r30, 0x90	; 144
    b15e:	fb 4d       	sbci	r31, 0xDB	; 219
    b160:	85 85       	ldd	r24, Z+13	; 0x0d
    b162:	82 fb       	bst	r24, 2
    b164:	88 27       	eor	r24, r24
    b166:	80 f9       	bld	r24, 0
    b168:	08 95       	ret

0000b16a <udd_ep_clear_halt>:
    b16a:	0f 93       	push	r16
    b16c:	28 2f       	mov	r18, r24
    b16e:	2f 70       	andi	r18, 0x0F	; 15
    b170:	30 e0       	ldi	r19, 0x00	; 0
    b172:	a9 01       	movw	r20, r18
    b174:	44 0f       	add	r20, r20
    b176:	55 1f       	adc	r21, r21
    b178:	28 2f       	mov	r18, r24
    b17a:	08 2e       	mov	r0, r24
    b17c:	00 0c       	add	r0, r0
    b17e:	33 0b       	sbc	r19, r19
    b180:	22 27       	eor	r18, r18
    b182:	33 0f       	add	r19, r19
    b184:	22 1f       	adc	r18, r18
    b186:	33 27       	eor	r19, r19
    b188:	24 0f       	add	r18, r20
    b18a:	35 1f       	adc	r19, r21
    b18c:	a9 01       	movw	r20, r18
    b18e:	44 0f       	add	r20, r20
    b190:	55 1f       	adc	r21, r21
    b192:	44 0f       	add	r20, r20
    b194:	55 1f       	adc	r21, r21
    b196:	44 0f       	add	r20, r20
    b198:	55 1f       	adc	r21, r21
    b19a:	fa 01       	movw	r30, r20
    b19c:	e4 58       	subi	r30, 0x84	; 132
    b19e:	fb 4d       	sbci	r31, 0xDB	; 219
    b1a0:	01 e0       	ldi	r16, 0x01	; 1
    b1a2:	06 93       	lac	Z, r16
    b1a4:	fa 01       	movw	r30, r20
    b1a6:	e0 59       	subi	r30, 0x90	; 144
    b1a8:	fb 4d       	sbci	r31, 0xDB	; 219
    b1aa:	95 85       	ldd	r25, Z+13	; 0x0d
    b1ac:	92 ff       	sbrs	r25, 2
    b1ae:	11 c0       	rjmp	.+34     	; 0xb1d2 <udd_ep_clear_halt+0x68>
    b1b0:	fa 01       	movw	r30, r20
    b1b2:	e0 59       	subi	r30, 0x90	; 144
    b1b4:	fb 4d       	sbci	r31, 0xDB	; 219
    b1b6:	95 85       	ldd	r25, Z+13	; 0x0d
    b1b8:	9b 7f       	andi	r25, 0xFB	; 251
    b1ba:	95 87       	std	Z+13, r25	; 0x0d
    b1bc:	2c dc       	rcall	.-1960   	; 0xaa16 <udd_ep_get_job>
    b1be:	fc 01       	movw	r30, r24
    b1c0:	80 81       	ld	r24, Z
    b1c2:	80 ff       	sbrs	r24, 0
    b1c4:	06 c0       	rjmp	.+12     	; 0xb1d2 <udd_ep_clear_halt+0x68>
    b1c6:	8e 7f       	andi	r24, 0xFE	; 254
    b1c8:	80 83       	st	Z, r24
    b1ca:	07 80       	ldd	r0, Z+7	; 0x07
    b1cc:	f0 85       	ldd	r31, Z+8	; 0x08
    b1ce:	e0 2d       	mov	r30, r0
    b1d0:	19 95       	eicall
    b1d2:	81 e0       	ldi	r24, 0x01	; 1
    b1d4:	0f 91       	pop	r16
    b1d6:	08 95       	ret

0000b1d8 <udd_ep_run>:
    b1d8:	6f 92       	push	r6
    b1da:	7f 92       	push	r7
    b1dc:	8f 92       	push	r8
    b1de:	9f 92       	push	r9
    b1e0:	af 92       	push	r10
    b1e2:	bf 92       	push	r11
    b1e4:	cf 92       	push	r12
    b1e6:	df 92       	push	r13
    b1e8:	ef 92       	push	r14
    b1ea:	ff 92       	push	r15
    b1ec:	0f 93       	push	r16
    b1ee:	1f 93       	push	r17
    b1f0:	cf 93       	push	r28
    b1f2:	df 93       	push	r29
    b1f4:	1f 92       	push	r1
    b1f6:	cd b7       	in	r28, 0x3d	; 61
    b1f8:	de b7       	in	r29, 0x3e	; 62
    b1fa:	78 2e       	mov	r7, r24
    b1fc:	66 2e       	mov	r6, r22
    b1fe:	4a 01       	movw	r8, r20
    b200:	59 01       	movw	r10, r18
    b202:	09 dc       	rcall	.-2030   	; 0xaa16 <udd_ep_get_job>
    b204:	6c 01       	movw	r12, r24
    b206:	27 2d       	mov	r18, r7
    b208:	87 2d       	mov	r24, r7
    b20a:	8f 70       	andi	r24, 0x0F	; 15
    b20c:	e8 2e       	mov	r14, r24
    b20e:	f1 2c       	mov	r15, r1
    b210:	c7 01       	movw	r24, r14
    b212:	88 0f       	add	r24, r24
    b214:	99 1f       	adc	r25, r25
    b216:	e7 2c       	mov	r14, r7
    b218:	07 2c       	mov	r0, r7
    b21a:	00 0c       	add	r0, r0
    b21c:	ff 08       	sbc	r15, r15
    b21e:	ee 24       	eor	r14, r14
    b220:	ff 0c       	add	r15, r15
    b222:	ee 1c       	adc	r14, r14
    b224:	ff 24       	eor	r15, r15
    b226:	e8 0e       	add	r14, r24
    b228:	f9 1e       	adc	r15, r25
    b22a:	f7 01       	movw	r30, r14
    b22c:	ee 0f       	add	r30, r30
    b22e:	ff 1f       	adc	r31, r31
    b230:	ee 0f       	add	r30, r30
    b232:	ff 1f       	adc	r31, r31
    b234:	ee 0f       	add	r30, r30
    b236:	ff 1f       	adc	r31, r31
    b238:	e0 59       	subi	r30, 0x90	; 144
    b23a:	fb 4d       	sbci	r31, 0xDB	; 219
    b23c:	85 85       	ldd	r24, Z+13	; 0x0d
    b23e:	80 7c       	andi	r24, 0xC0	; 192
    b240:	09 f4       	brne	.+2      	; 0xb244 <udd_ep_run+0x6c>
    b242:	82 c0       	rjmp	.+260    	; 0xb348 <udd_ep_run+0x170>
    b244:	f7 01       	movw	r30, r14
    b246:	ee 0f       	add	r30, r30
    b248:	ff 1f       	adc	r31, r31
    b24a:	ee 0f       	add	r30, r30
    b24c:	ff 1f       	adc	r31, r31
    b24e:	ee 0f       	add	r30, r30
    b250:	ff 1f       	adc	r31, r31
    b252:	e0 59       	subi	r30, 0x90	; 144
    b254:	fb 4d       	sbci	r31, 0xDB	; 219
    b256:	85 85       	ldd	r24, Z+13	; 0x0d
    b258:	80 7c       	andi	r24, 0xC0	; 192
    b25a:	80 3c       	cpi	r24, 0xC0	; 192
    b25c:	61 f0       	breq	.+24     	; 0xb276 <udd_ep_run+0x9e>
    b25e:	f7 01       	movw	r30, r14
    b260:	ee 0f       	add	r30, r30
    b262:	ff 1f       	adc	r31, r31
    b264:	ee 0f       	add	r30, r30
    b266:	ff 1f       	adc	r31, r31
    b268:	ee 0f       	add	r30, r30
    b26a:	ff 1f       	adc	r31, r31
    b26c:	e0 59       	subi	r30, 0x90	; 144
    b26e:	fb 4d       	sbci	r31, 0xDB	; 219
    b270:	85 85       	ldd	r24, Z+13	; 0x0d
    b272:	82 fd       	sbrc	r24, 2
    b274:	6b c0       	rjmp	.+214    	; 0xb34c <udd_ep_run+0x174>
    b276:	8f b7       	in	r24, 0x3f	; 63
    b278:	89 83       	std	Y+1, r24	; 0x01
    b27a:	f8 94       	cli
    b27c:	89 81       	ldd	r24, Y+1	; 0x01
    b27e:	f6 01       	movw	r30, r12
    b280:	90 81       	ld	r25, Z
    b282:	90 ff       	sbrs	r25, 0
    b284:	03 c0       	rjmp	.+6      	; 0xb28c <udd_ep_run+0xb4>
    b286:	8f bf       	out	0x3f, r24	; 63
    b288:	80 e0       	ldi	r24, 0x00	; 0
    b28a:	61 c0       	rjmp	.+194    	; 0xb34e <udd_ep_run+0x176>
    b28c:	f6 01       	movw	r30, r12
    b28e:	90 81       	ld	r25, Z
    b290:	91 60       	ori	r25, 0x01	; 1
    b292:	90 83       	st	Z, r25
    b294:	8f bf       	out	0x3f, r24	; 63
    b296:	81 82       	std	Z+1, r8	; 0x01
    b298:	92 82       	std	Z+2, r9	; 0x02
    b29a:	a3 82       	std	Z+3, r10	; 0x03
    b29c:	b4 82       	std	Z+4, r11	; 0x04
    b29e:	15 82       	std	Z+5, r1	; 0x05
    b2a0:	16 82       	std	Z+6, r1	; 0x06
    b2a2:	07 83       	std	Z+7, r16	; 0x07
    b2a4:	10 87       	std	Z+8, r17	; 0x08
    b2a6:	61 10       	cpse	r6, r1
    b2a8:	06 c0       	rjmp	.+12     	; 0xb2b6 <udd_ep_run+0xde>
    b2aa:	91 e0       	ldi	r25, 0x01	; 1
    b2ac:	a1 14       	cp	r10, r1
    b2ae:	b1 04       	cpc	r11, r1
    b2b0:	19 f0       	breq	.+6      	; 0xb2b8 <udd_ep_run+0xe0>
    b2b2:	90 e0       	ldi	r25, 0x00	; 0
    b2b4:	01 c0       	rjmp	.+2      	; 0xb2b8 <udd_ep_run+0xe0>
    b2b6:	91 e0       	ldi	r25, 0x01	; 1
    b2b8:	f6 01       	movw	r30, r12
    b2ba:	80 81       	ld	r24, Z
    b2bc:	90 fb       	bst	r25, 0
    b2be:	81 f9       	bld	r24, 1
    b2c0:	8b 7f       	andi	r24, 0xFB	; 251
    b2c2:	80 83       	st	Z, r24
    b2c4:	22 23       	and	r18, r18
    b2c6:	64 f4       	brge	.+24     	; 0xb2e0 <udd_ep_run+0x108>
    b2c8:	f7 01       	movw	r30, r14
    b2ca:	ee 0f       	add	r30, r30
    b2cc:	ff 1f       	adc	r31, r31
    b2ce:	ee 0f       	add	r30, r30
    b2d0:	ff 1f       	adc	r31, r31
    b2d2:	ee 0f       	add	r30, r30
    b2d4:	ff 1f       	adc	r31, r31
    b2d6:	e0 59       	subi	r30, 0x90	; 144
    b2d8:	fb 4d       	sbci	r31, 0xDB	; 219
    b2da:	12 8a       	std	Z+18, r1	; 0x12
    b2dc:	13 8a       	std	Z+19, r1	; 0x13
    b2de:	30 c0       	rjmp	.+96     	; 0xb340 <udd_ep_run+0x168>
    b2e0:	f7 01       	movw	r30, r14
    b2e2:	ee 0f       	add	r30, r30
    b2e4:	ff 1f       	adc	r31, r31
    b2e6:	ee 0f       	add	r30, r30
    b2e8:	ff 1f       	adc	r31, r31
    b2ea:	ee 0f       	add	r30, r30
    b2ec:	ff 1f       	adc	r31, r31
    b2ee:	e0 59       	subi	r30, 0x90	; 144
    b2f0:	fb 4d       	sbci	r31, 0xDB	; 219
    b2f2:	85 85       	ldd	r24, Z+13	; 0x0d
    b2f4:	80 7c       	andi	r24, 0xC0	; 192
    b2f6:	80 3c       	cpi	r24, 0xC0	; 192
    b2f8:	b1 f4       	brne	.+44     	; 0xb326 <udd_ep_run+0x14e>
    b2fa:	c7 01       	movw	r24, r14
    b2fc:	88 0f       	add	r24, r24
    b2fe:	99 1f       	adc	r25, r25
    b300:	88 0f       	add	r24, r24
    b302:	99 1f       	adc	r25, r25
    b304:	88 0f       	add	r24, r24
    b306:	99 1f       	adc	r25, r25
    b308:	84 58       	subi	r24, 0x84	; 132
    b30a:	9b 4d       	sbci	r25, 0xDB	; 219
    b30c:	5b db       	rcall	.-2378   	; 0xa9c4 <udd_ep_get_size>
    b30e:	bc 01       	movw	r22, r24
    b310:	c5 01       	movw	r24, r10
    b312:	0e 94 45 81 	call	0x1028a	; 0x1028a <__udivmodhi4>
    b316:	89 2b       	or	r24, r25
    b318:	31 f0       	breq	.+12     	; 0xb326 <udd_ep_run+0x14e>
    b31a:	f6 01       	movw	r30, r12
    b31c:	80 81       	ld	r24, Z
    b31e:	8e 7f       	andi	r24, 0xFE	; 254
    b320:	80 83       	st	Z, r24
    b322:	80 e0       	ldi	r24, 0x00	; 0
    b324:	14 c0       	rjmp	.+40     	; 0xb34e <udd_ep_run+0x176>
    b326:	f7 01       	movw	r30, r14
    b328:	ee 0f       	add	r30, r30
    b32a:	ff 1f       	adc	r31, r31
    b32c:	ee 0f       	add	r30, r30
    b32e:	ff 1f       	adc	r31, r31
    b330:	ee 0f       	add	r30, r30
    b332:	ff 1f       	adc	r31, r31
    b334:	e0 59       	subi	r30, 0x90	; 144
    b336:	fb 4d       	sbci	r31, 0xDB	; 219
    b338:	16 86       	std	Z+14, r1	; 0x0e
    b33a:	17 86       	std	Z+15, r1	; 0x0f
    b33c:	12 8a       	std	Z+18, r1	; 0x12
    b33e:	13 8a       	std	Z+19, r1	; 0x13
    b340:	87 2d       	mov	r24, r7
    b342:	f6 db       	rcall	.-2068   	; 0xab30 <udd_ep_trans_complet>
    b344:	81 e0       	ldi	r24, 0x01	; 1
    b346:	03 c0       	rjmp	.+6      	; 0xb34e <udd_ep_run+0x176>
    b348:	80 e0       	ldi	r24, 0x00	; 0
    b34a:	01 c0       	rjmp	.+2      	; 0xb34e <udd_ep_run+0x176>
    b34c:	80 e0       	ldi	r24, 0x00	; 0
    b34e:	0f 90       	pop	r0
    b350:	df 91       	pop	r29
    b352:	cf 91       	pop	r28
    b354:	1f 91       	pop	r17
    b356:	0f 91       	pop	r16
    b358:	ff 90       	pop	r15
    b35a:	ef 90       	pop	r14
    b35c:	df 90       	pop	r13
    b35e:	cf 90       	pop	r12
    b360:	bf 90       	pop	r11
    b362:	af 90       	pop	r10
    b364:	9f 90       	pop	r9
    b366:	8f 90       	pop	r8
    b368:	7f 90       	pop	r7
    b36a:	6f 90       	pop	r6
    b36c:	08 95       	ret

0000b36e <udd_ep_abort>:
    b36e:	ff 92       	push	r15
    b370:	0f 93       	push	r16
    b372:	1f 93       	push	r17
    b374:	cf 93       	push	r28
    b376:	df 93       	push	r29
    b378:	18 2f       	mov	r17, r24
    b37a:	c8 2f       	mov	r28, r24
    b37c:	cf 70       	andi	r28, 0x0F	; 15
    b37e:	d0 e0       	ldi	r29, 0x00	; 0
    b380:	ce 01       	movw	r24, r28
    b382:	88 0f       	add	r24, r24
    b384:	99 1f       	adc	r25, r25
    b386:	c1 2f       	mov	r28, r17
    b388:	01 2e       	mov	r0, r17
    b38a:	00 0c       	add	r0, r0
    b38c:	dd 0b       	sbc	r29, r29
    b38e:	cc 27       	eor	r28, r28
    b390:	dd 0f       	add	r29, r29
    b392:	cc 1f       	adc	r28, r28
    b394:	dd 27       	eor	r29, r29
    b396:	c8 0f       	add	r28, r24
    b398:	d9 1f       	adc	r29, r25
    b39a:	81 2f       	mov	r24, r17
    b39c:	3c db       	rcall	.-2440   	; 0xaa16 <udd_ep_get_job>
    b39e:	dc 01       	movw	r26, r24
    b3a0:	fe 01       	movw	r30, r28
    b3a2:	ee 0f       	add	r30, r30
    b3a4:	ff 1f       	adc	r31, r31
    b3a6:	ee 0f       	add	r30, r30
    b3a8:	ff 1f       	adc	r31, r31
    b3aa:	ee 0f       	add	r30, r30
    b3ac:	ff 1f       	adc	r31, r31
    b3ae:	e4 58       	subi	r30, 0x84	; 132
    b3b0:	fb 4d       	sbci	r31, 0xDB	; 219
    b3b2:	02 e0       	ldi	r16, 0x02	; 2
    b3b4:	05 93       	las	Z, r16
    b3b6:	8c 91       	ld	r24, X
    b3b8:	80 ff       	sbrs	r24, 0
    b3ba:	22 c0       	rjmp	.+68     	; 0xb400 <udd_ep_abort+0x92>
    b3bc:	8e 7f       	andi	r24, 0xFE	; 254
    b3be:	8c 93       	st	X, r24
    b3c0:	17 96       	adiw	r26, 0x07	; 7
    b3c2:	ed 91       	ld	r30, X+
    b3c4:	fc 91       	ld	r31, X
    b3c6:	18 97       	sbiw	r26, 0x08	; 8
    b3c8:	30 97       	sbiw	r30, 0x00	; 0
    b3ca:	d1 f0       	breq	.+52     	; 0xb400 <udd_ep_abort+0x92>
    b3cc:	11 23       	and	r17, r17
    b3ce:	5c f4       	brge	.+22     	; 0xb3e6 <udd_ep_abort+0x78>
    b3d0:	cc 0f       	add	r28, r28
    b3d2:	dd 1f       	adc	r29, r29
    b3d4:	cc 0f       	add	r28, r28
    b3d6:	dd 1f       	adc	r29, r29
    b3d8:	cc 0f       	add	r28, r28
    b3da:	dd 1f       	adc	r29, r29
    b3dc:	c0 59       	subi	r28, 0x90	; 144
    b3de:	db 4d       	sbci	r29, 0xDB	; 219
    b3e0:	6a 89       	ldd	r22, Y+18	; 0x12
    b3e2:	7b 89       	ldd	r23, Y+19	; 0x13
    b3e4:	0a c0       	rjmp	.+20     	; 0xb3fa <udd_ep_abort+0x8c>
    b3e6:	cc 0f       	add	r28, r28
    b3e8:	dd 1f       	adc	r29, r29
    b3ea:	cc 0f       	add	r28, r28
    b3ec:	dd 1f       	adc	r29, r29
    b3ee:	cc 0f       	add	r28, r28
    b3f0:	dd 1f       	adc	r29, r29
    b3f2:	c0 59       	subi	r28, 0x90	; 144
    b3f4:	db 4d       	sbci	r29, 0xDB	; 219
    b3f6:	6e 85       	ldd	r22, Y+14	; 0x0e
    b3f8:	7f 85       	ldd	r23, Y+15	; 0x0f
    b3fa:	41 2f       	mov	r20, r17
    b3fc:	81 e0       	ldi	r24, 0x01	; 1
    b3fe:	19 95       	eicall
    b400:	df 91       	pop	r29
    b402:	cf 91       	pop	r28
    b404:	1f 91       	pop	r17
    b406:	0f 91       	pop	r16
    b408:	ff 90       	pop	r15
    b40a:	08 95       	ret

0000b40c <udd_ep_free>:
    b40c:	cf 93       	push	r28
    b40e:	c8 2f       	mov	r28, r24
    b410:	ae df       	rcall	.-164    	; 0xb36e <udd_ep_abort>
    b412:	ec 2f       	mov	r30, r28
    b414:	ef 70       	andi	r30, 0x0F	; 15
    b416:	f0 e0       	ldi	r31, 0x00	; 0
    b418:	ee 0f       	add	r30, r30
    b41a:	ff 1f       	adc	r31, r31
    b41c:	8c 2f       	mov	r24, r28
    b41e:	cc 0f       	add	r28, r28
    b420:	99 0b       	sbc	r25, r25
    b422:	88 27       	eor	r24, r24
    b424:	99 0f       	add	r25, r25
    b426:	88 1f       	adc	r24, r24
    b428:	99 27       	eor	r25, r25
    b42a:	e8 0f       	add	r30, r24
    b42c:	f9 1f       	adc	r31, r25
    b42e:	ee 0f       	add	r30, r30
    b430:	ff 1f       	adc	r31, r31
    b432:	ee 0f       	add	r30, r30
    b434:	ff 1f       	adc	r31, r31
    b436:	ee 0f       	add	r30, r30
    b438:	ff 1f       	adc	r31, r31
    b43a:	e0 59       	subi	r30, 0x90	; 144
    b43c:	fb 4d       	sbci	r31, 0xDB	; 219
    b43e:	15 86       	std	Z+13, r1	; 0x0d
    b440:	cf 91       	pop	r28
    b442:	08 95       	ret

0000b444 <udd_ep_set_halt>:
    b444:	e8 2f       	mov	r30, r24
    b446:	ef 70       	andi	r30, 0x0F	; 15
    b448:	f0 e0       	ldi	r31, 0x00	; 0
    b44a:	ee 0f       	add	r30, r30
    b44c:	ff 1f       	adc	r31, r31
    b44e:	28 2f       	mov	r18, r24
    b450:	08 2e       	mov	r0, r24
    b452:	00 0c       	add	r0, r0
    b454:	33 0b       	sbc	r19, r19
    b456:	22 27       	eor	r18, r18
    b458:	33 0f       	add	r19, r19
    b45a:	22 1f       	adc	r18, r18
    b45c:	33 27       	eor	r19, r19
    b45e:	e2 0f       	add	r30, r18
    b460:	f3 1f       	adc	r31, r19
    b462:	ee 0f       	add	r30, r30
    b464:	ff 1f       	adc	r31, r31
    b466:	ee 0f       	add	r30, r30
    b468:	ff 1f       	adc	r31, r31
    b46a:	ee 0f       	add	r30, r30
    b46c:	ff 1f       	adc	r31, r31
    b46e:	e0 59       	subi	r30, 0x90	; 144
    b470:	fb 4d       	sbci	r31, 0xDB	; 219
    b472:	95 85       	ldd	r25, Z+13	; 0x0d
    b474:	94 60       	ori	r25, 0x04	; 4
    b476:	95 87       	std	Z+13, r25	; 0x0d
    b478:	7a df       	rcall	.-268    	; 0xb36e <udd_ep_abort>
    b47a:	81 e0       	ldi	r24, 0x01	; 1
    b47c:	08 95       	ret

0000b47e <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    b47e:	1f 92       	push	r1
    b480:	0f 92       	push	r0
    b482:	0f b6       	in	r0, 0x3f	; 63
    b484:	0f 92       	push	r0
    b486:	11 24       	eor	r1, r1
    b488:	0b b6       	in	r0, 0x3b	; 59
    b48a:	0f 92       	push	r0
    b48c:	0f 93       	push	r16
    b48e:	2f 93       	push	r18
    b490:	3f 93       	push	r19
    b492:	4f 93       	push	r20
    b494:	5f 93       	push	r21
    b496:	6f 93       	push	r22
    b498:	7f 93       	push	r23
    b49a:	8f 93       	push	r24
    b49c:	9f 93       	push	r25
    b49e:	af 93       	push	r26
    b4a0:	bf 93       	push	r27
    b4a2:	ef 93       	push	r30
    b4a4:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    b4a6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b4aa:	88 23       	and	r24, r24
    b4ac:	34 f4       	brge	.+12     	; 0xb4ba <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    b4ae:	80 e8       	ldi	r24, 0x80	; 128
    b4b0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    b4b4:	0e 94 ea 73 	call	0xe7d4	; 0xe7d4 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    b4b8:	8a c0       	rjmp	.+276    	; 0xb5ce <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    b4ba:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b4be:	82 ff       	sbrs	r24, 2
    b4c0:	20 c0       	rjmp	.+64     	; 0xb502 <__vector_125+0x84>
		udd_ack_underflow_event();
    b4c2:	84 e0       	ldi	r24, 0x04	; 4
    b4c4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    b4c8:	80 91 84 24 	lds	r24, 0x2484	; 0x802484 <udd_sram+0x14>
    b4cc:	86 ff       	sbrs	r24, 6
    b4ce:	7f c0       	rjmp	.+254    	; 0xb5ce <__vector_125+0x150>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    b4d0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    b4d4:	81 fd       	sbrc	r24, 1
    b4d6:	7b c0       	rjmp	.+246    	; 0xb5ce <__vector_125+0x150>
    b4d8:	b9 da       	rcall	.-2702   	; 0xaa4c <udd_ctrl_interrupt_tc_setup>
    b4da:	81 11       	cpse	r24, r1
    b4dc:	78 c0       	rjmp	.+240    	; 0xb5ce <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    b4de:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_ep_control_state>
    b4e2:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    b4e4:	11 f4       	brne	.+4      	; 0xb4ea <__vector_125+0x6c>
    b4e6:	ec d9       	rcall	.-3112   	; 0xa8c0 <udd_ctrl_send_zlp_in>
    b4e8:	72 c0       	rjmp	.+228    	; 0xb5ce <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    b4ea:	84 30       	cpi	r24, 0x04	; 4
    b4ec:	09 f0       	breq	.+2      	; 0xb4f0 <__vector_125+0x72>
    b4ee:	6f c0       	rjmp	.+222    	; 0xb5ce <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    b4f0:	e5 e8       	ldi	r30, 0x85	; 133
    b4f2:	f4 e2       	ldi	r31, 0x24	; 36
    b4f4:	04 e0       	ldi	r16, 0x04	; 4
    b4f6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    b4f8:	ed e7       	ldi	r30, 0x7D	; 125
    b4fa:	f4 e2       	ldi	r31, 0x24	; 36
    b4fc:	04 e0       	ldi	r16, 0x04	; 4
    b4fe:	05 93       	las	Z, r16
    b500:	66 c0       	rjmp	.+204    	; 0xb5ce <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    b502:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b506:	81 ff       	sbrs	r24, 1
    b508:	5d c0       	rjmp	.+186    	; 0xb5c4 <__vector_125+0x146>
		udd_ack_overflow_event();
    b50a:	82 e0       	ldi	r24, 0x02	; 2
    b50c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    b510:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_sram+0xc>
    b514:	86 ff       	sbrs	r24, 6
    b516:	5b c0       	rjmp	.+182    	; 0xb5ce <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    b518:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    b51c:	81 fd       	sbrc	r24, 1
    b51e:	57 c0       	rjmp	.+174    	; 0xb5ce <__vector_125+0x150>
    b520:	95 da       	rcall	.-2774   	; 0xaa4c <udd_ctrl_interrupt_tc_setup>
    b522:	81 11       	cpse	r24, r1
    b524:	54 c0       	rjmp	.+168    	; 0xb5ce <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    b526:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_ep_control_state>
    b52a:	82 30       	cpi	r24, 0x02	; 2
    b52c:	41 f4       	brne	.+16     	; 0xb53e <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    b52e:	84 e0       	ldi	r24, 0x04	; 4
    b530:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    b534:	ec e7       	ldi	r30, 0x7C	; 124
    b536:	f4 e2       	ldi	r31, 0x24	; 36
    b538:	02 e0       	ldi	r16, 0x02	; 2
    b53a:	06 93       	lac	Z, r16
    b53c:	48 c0       	rjmp	.+144    	; 0xb5ce <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    b53e:	83 30       	cpi	r24, 0x03	; 3
    b540:	09 f0       	breq	.+2      	; 0xb544 <__vector_125+0xc6>
    b542:	45 c0       	rjmp	.+138    	; 0xb5ce <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    b544:	e5 e8       	ldi	r30, 0x85	; 133
    b546:	f4 e2       	ldi	r31, 0x24	; 36
    b548:	04 e0       	ldi	r16, 0x04	; 4
    b54a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    b54c:	ed e7       	ldi	r30, 0x7D	; 125
    b54e:	f4 e2       	ldi	r31, 0x24	; 36
    b550:	04 e0       	ldi	r16, 0x04	; 4
    b552:	05 93       	las	Z, r16
    b554:	3c c0       	rjmp	.+120    	; 0xb5ce <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    b556:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    b558:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    b55c:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    b55e:	07 df       	rcall	.-498    	; 0xb36e <udd_ep_abort>
    b560:	81 e8       	ldi	r24, 0x81	; 129
    b562:	05 df       	rcall	.-502    	; 0xb36e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    b564:	82 e0       	ldi	r24, 0x02	; 2
    b566:	03 df       	rcall	.-506    	; 0xb36e <udd_ep_abort>
    b568:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    b56a:	01 df       	rcall	.-510    	; 0xb36e <udd_ep_abort>
    b56c:	0e 94 bc 73 	call	0xe778	; 0xe778 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    b570:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    b574:	e0 e7       	ldi	r30, 0x70	; 112
    b576:	f4 e2       	ldi	r31, 0x24	; 36
	udd_endpoint_clear_status(ep_ctrl);
    b578:	15 86       	std	Z+13, r1	; 0x0d
    b57a:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    b57c:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    b57e:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    b580:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    b582:	15 8a       	std	Z+21, r1	; 0x15
    b584:	94 8b       	std	Z+20, r25	; 0x14
    b586:	85 8b       	std	Z+21, r24	; 0x15
    b588:	8a e2       	ldi	r24, 0x2A	; 42
		// Reset endpoint control management
		udd_ctrl_init();
    b58a:	94 e2       	ldi	r25, 0x24	; 36
    b58c:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    b58e:	91 8b       	std	Z+17, r25	; 0x11
    b590:	64 d9       	rcall	.-3384   	; 0xa85a <udd_ctrl_init>
    b592:	1d c0       	rjmp	.+58     	; 0xb5ce <__vector_125+0x150>
		udd_ack_suspend_event();
    b594:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b598:	86 ff       	sbrs	r24, 6
		udd_sleep_mode(false); // Enter in SUSPEND mode
    b59a:	08 c0       	rjmp	.+16     	; 0xb5ac <__vector_125+0x12e>
    b59c:	80 e4       	ldi	r24, 0x40	; 64
    b59e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    b5a2:	80 e0       	ldi	r24, 0x00	; 0
    b5a4:	22 d9       	rcall	.-3516   	; 0xa7ea <udd_sleep_mode>
    b5a6:	0e 94 e7 20 	call	0x41ce	; 0x41ce <usb_callback_suspend_action>
		udd_ack_resume_event();
    b5aa:	11 c0       	rjmp	.+34     	; 0xb5ce <__vector_125+0x150>
    b5ac:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    b5b0:	85 ff       	sbrs	r24, 5
    b5b2:	0d c0       	rjmp	.+26     	; 0xb5ce <__vector_125+0x150>
    b5b4:	80 e2       	ldi	r24, 0x20	; 32
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    b5b6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    b5ba:	81 e0       	ldi	r24, 0x01	; 1
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    b5bc:	16 d9       	rcall	.-3540   	; 0xa7ea <udd_sleep_mode>
    b5be:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <usb_callback_resume_action>
    b5c2:	05 c0       	rjmp	.+10     	; 0xb5ce <__vector_125+0x150>
    b5c4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    b5c8:	84 fd       	sbrc	r24, 4
    b5ca:	c5 cf       	rjmp	.-118    	; 0xb556 <__vector_125+0xd8>
    b5cc:	e3 cf       	rjmp	.-58     	; 0xb594 <__vector_125+0x116>
    b5ce:	ff 91       	pop	r31
    b5d0:	ef 91       	pop	r30
    b5d2:	bf 91       	pop	r27
    b5d4:	af 91       	pop	r26
    b5d6:	9f 91       	pop	r25
    b5d8:	8f 91       	pop	r24
    b5da:	7f 91       	pop	r23
    b5dc:	6f 91       	pop	r22
    b5de:	5f 91       	pop	r21
    b5e0:	4f 91       	pop	r20
    b5e2:	3f 91       	pop	r19
    b5e4:	2f 91       	pop	r18
    b5e6:	0f 91       	pop	r16
    b5e8:	0f 90       	pop	r0
    b5ea:	0b be       	out	0x3b, r0	; 59
    b5ec:	0f 90       	pop	r0
    b5ee:	0f be       	out	0x3f, r0	; 63
    b5f0:	0f 90       	pop	r0
    b5f2:	1f 90       	pop	r1
    b5f4:	18 95       	reti

0000b5f6 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    b5f6:	1f 92       	push	r1
    b5f8:	0f 92       	push	r0
    b5fa:	0f b6       	in	r0, 0x3f	; 63
    b5fc:	0f 92       	push	r0
    b5fe:	11 24       	eor	r1, r1
    b600:	0b b6       	in	r0, 0x3b	; 59
    b602:	0f 92       	push	r0
    b604:	0f 93       	push	r16
    b606:	1f 93       	push	r17
    b608:	2f 93       	push	r18
    b60a:	3f 93       	push	r19
    b60c:	4f 93       	push	r20
    b60e:	5f 93       	push	r21
    b610:	6f 93       	push	r22
    b612:	7f 93       	push	r23
    b614:	8f 93       	push	r24
    b616:	9f 93       	push	r25
    b618:	af 93       	push	r26
    b61a:	bf 93       	push	r27
    b61c:	cf 93       	push	r28
    b61e:	df 93       	push	r29
    b620:	ef 93       	push	r30
    b622:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    b624:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    b628:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    b62a:	03 c0       	rjmp	.+6      	; 0xb632 <__vector_126+0x3c>
    b62c:	0f da       	rcall	.-3042   	; 0xaa4c <udd_ctrl_interrupt_tc_setup>
    b62e:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    b630:	c4 c0       	rjmp	.+392    	; 0xb7ba <__vector_126+0x1c4>
    b632:	82 e0       	ldi	r24, 0x02	; 2
    b634:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    b638:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    b63c:	81 95       	neg	r24
    b63e:	88 0f       	add	r24, r24
    b640:	ec e7       	ldi	r30, 0x7C	; 124
    b642:	f4 e2       	ldi	r31, 0x24	; 36
    b644:	e8 1b       	sub	r30, r24
    b646:	f1 09       	sbc	r31, r1
    b648:	20 81       	ld	r18, Z
    b64a:	31 81       	ldd	r19, Z+1	; 0x01
    b64c:	2c 57       	subi	r18, 0x7C	; 124
    b64e:	34 42       	sbci	r19, 0x24	; 36
    b650:	36 95       	lsr	r19
    b652:	27 95       	ror	r18
    b654:	36 95       	lsr	r19
    b656:	27 95       	ror	r18
    b658:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    b65a:	27 95       	ror	r18
    b65c:	82 2f       	mov	r24, r18
    b65e:	86 95       	lsr	r24
    b660:	20 fd       	sbrc	r18, 0
    b662:	02 c0       	rjmp	.+4      	; 0xb668 <__vector_126+0x72>
    b664:	90 e0       	ldi	r25, 0x00	; 0
    b666:	01 c0       	rjmp	.+2      	; 0xb66a <__vector_126+0x74>
    b668:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    b66a:	89 0f       	add	r24, r25
    b66c:	e8 2f       	mov	r30, r24
    b66e:	ef 70       	andi	r30, 0x0F	; 15
    b670:	f0 e0       	ldi	r31, 0x00	; 0
    b672:	ee 0f       	add	r30, r30
    b674:	ff 1f       	adc	r31, r31
    b676:	28 2f       	mov	r18, r24
    b678:	08 2e       	mov	r0, r24
    b67a:	00 0c       	add	r0, r0
    b67c:	33 0b       	sbc	r19, r19
    b67e:	22 27       	eor	r18, r18
    b680:	33 0f       	add	r19, r19
    b682:	22 1f       	adc	r18, r18
    b684:	33 27       	eor	r19, r19
    b686:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    b688:	f3 1f       	adc	r31, r19
    b68a:	df 01       	movw	r26, r30
    b68c:	aa 0f       	add	r26, r26
    b68e:	bb 1f       	adc	r27, r27
    b690:	aa 0f       	add	r26, r26
    b692:	bb 1f       	adc	r27, r27
    b694:	aa 0f       	add	r26, r26
    b696:	bb 1f       	adc	r27, r27
    b698:	a0 59       	subi	r26, 0x90	; 144
    b69a:	bb 4d       	sbci	r27, 0xDB	; 219
    b69c:	1c 96       	adiw	r26, 0x0c	; 12
    b69e:	9c 91       	ld	r25, X
    b6a0:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    b6a2:	8b c0       	rjmp	.+278    	; 0xb7ba <__vector_126+0x1c4>
    b6a4:	ee 0f       	add	r30, r30
    b6a6:	ff 1f       	adc	r31, r31
    b6a8:	ee 0f       	add	r30, r30
    b6aa:	ff 1f       	adc	r31, r31
    b6ac:	ee 0f       	add	r30, r30
    b6ae:	ff 1f       	adc	r31, r31
    b6b0:	e4 58       	subi	r30, 0x84	; 132
    b6b2:	fb 4d       	sbci	r31, 0xDB	; 219
    b6b4:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    b6b6:	06 93       	lac	Z, r16
    b6b8:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    b6ba:	7a c0       	rjmp	.+244    	; 0xb7b0 <__vector_126+0x1ba>
    b6bc:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    b6c0:	84 30       	cpi	r24, 0x04	; 4
    b6c2:	19 f4       	brne	.+6      	; 0xb6ca <__vector_126+0xd4>
    b6c4:	0b d9       	rcall	.-3562   	; 0xa8dc <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    b6c6:	c9 d8       	rcall	.-3694   	; 0xa85a <udd_ctrl_init>
    b6c8:	78 c0       	rjmp	.+240    	; 0xb7ba <__vector_126+0x1c4>
    b6ca:	00 91 7e 24 	lds	r16, 0x247E	; 0x80247e <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    b6ce:	10 91 7f 24 	lds	r17, 0x247F	; 0x80247f <udd_sram+0xf>
    b6d2:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0xa>
    b6d6:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0xb>
    b6da:	c0 91 6a 24 	lds	r28, 0x246A	; 0x80246a <udd_ctrl_payload_nb_trans>
    b6de:	d0 91 6b 24 	lds	r29, 0x246B	; 0x80246b <udd_ctrl_payload_nb_trans+0x1>
    b6e2:	98 01       	movw	r18, r16
    b6e4:	2c 0f       	add	r18, r28
    b6e6:	3d 1f       	adc	r19, r29
    b6e8:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    b6ea:	93 07       	cpc	r25, r19
    b6ec:	18 f4       	brcc	.+6      	; 0xb6f4 <__vector_126+0xfe>
    b6ee:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    b6f0:	0c 1b       	sub	r16, r28
    b6f2:	1d 0b       	sbc	r17, r29
    b6f4:	80 91 e9 2d 	lds	r24, 0x2DE9	; 0x802de9 <udd_g_ctrlreq+0x8>
    b6f8:	90 91 ea 2d 	lds	r25, 0x2DEA	; 0x802dea <udd_g_ctrlreq+0x9>
    b6fc:	a8 01       	movw	r20, r16
    b6fe:	6a e2       	ldi	r22, 0x2A	; 42
    b700:	74 e2       	ldi	r23, 0x24	; 36
    b702:	8c 0f       	add	r24, r28
    b704:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    b706:	0e 94 bd 84 	call	0x1097a	; 0x1097a <memcpy>
    b70a:	c0 0f       	add	r28, r16
    b70c:	d1 1f       	adc	r29, r17
    b70e:	c0 93 6a 24 	sts	0x246A, r28	; 0x80246a <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    b712:	d0 93 6b 24 	sts	0x246B, r29	; 0x80246b <udd_ctrl_payload_nb_trans+0x1>
    b716:	00 34       	cpi	r16, 0x40	; 64
    b718:	11 05       	cpc	r17, r1
    b71a:	69 f4       	brne	.+26     	; 0xb736 <__vector_126+0x140>
    b71c:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udd_ctrl_prev_payload_nb_trans>
    b720:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <udd_ctrl_prev_payload_nb_trans+0x1>
    b724:	8c 0f       	add	r24, r28
    b726:	9d 1f       	adc	r25, r29
    b728:	20 91 e7 2d 	lds	r18, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    b72c:	30 91 e8 2d 	lds	r19, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    b730:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    b732:	93 07       	cpc	r25, r19
    b734:	80 f0       	brcs	.+32     	; 0xb756 <__vector_126+0x160>
    b736:	e1 ee       	ldi	r30, 0xE1	; 225
    b738:	fd e2       	ldi	r31, 0x2D	; 45
		if (NULL != udd_g_ctrlreq.over_under_run) {
    b73a:	c2 87       	std	Z+10, r28	; 0x0a
    b73c:	d3 87       	std	Z+11, r29	; 0x0b
    b73e:	06 84       	ldd	r0, Z+14	; 0x0e
    b740:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    b742:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    b744:	30 97       	sbiw	r30, 0x00	; 0
    b746:	29 f0       	breq	.+10     	; 0xb752 <__vector_126+0x15c>
    b748:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    b74a:	81 11       	cpse	r24, r1
    b74c:	02 c0       	rjmp	.+4      	; 0xb752 <__vector_126+0x15c>
    b74e:	aa d8       	rcall	.-3756   	; 0xa8a4 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    b750:	34 c0       	rjmp	.+104    	; 0xb7ba <__vector_126+0x1c4>
    b752:	b6 d8       	rcall	.-3732   	; 0xa8c0 <udd_ctrl_send_zlp_in>
    b754:	32 c0       	rjmp	.+100    	; 0xb7ba <__vector_126+0x1c4>
    b756:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0xa>
    b75a:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    b75e:	c8 17       	cp	r28, r24
    b760:	d9 07       	cpc	r29, r25
    b762:	f9 f4       	brne	.+62     	; 0xb7a2 <__vector_126+0x1ac>
    b764:	e0 91 ef 2d 	lds	r30, 0x2DEF	; 0x802def <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    b768:	f0 91 f0 2d 	lds	r31, 0x2DF0	; 0x802df0 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    b76c:	30 97       	sbiw	r30, 0x00	; 0
    b76e:	11 f4       	brne	.+4      	; 0xb774 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    b770:	99 d8       	rcall	.-3790   	; 0xa8a4 <udd_ctrl_stall_data>
    b772:	23 c0       	rjmp	.+70     	; 0xb7ba <__vector_126+0x1c4>
    b774:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    b776:	81 11       	cpse	r24, r1
    b778:	02 c0       	rjmp	.+4      	; 0xb77e <__vector_126+0x188>
    b77a:	94 d8       	rcall	.-3800   	; 0xa8a4 <udd_ctrl_stall_data>
    b77c:	1e c0       	rjmp	.+60     	; 0xb7ba <__vector_126+0x1c4>
    b77e:	20 91 6c 24 	lds	r18, 0x246C	; 0x80246c <udd_ctrl_prev_payload_nb_trans>
    b782:	30 91 6d 24 	lds	r19, 0x246D	; 0x80246d <udd_ctrl_prev_payload_nb_trans+0x1>
    b786:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udd_ctrl_payload_nb_trans>
    b78a:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udd_ctrl_payload_nb_trans+0x1>
    b78e:	82 0f       	add	r24, r18
    b790:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    b792:	80 93 6c 24 	sts	0x246C, r24	; 0x80246c <udd_ctrl_prev_payload_nb_trans>
    b796:	90 93 6d 24 	sts	0x246D, r25	; 0x80246d <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    b79a:	10 92 6a 24 	sts	0x246A, r1	; 0x80246a <udd_ctrl_payload_nb_trans>
    b79e:	10 92 6b 24 	sts	0x246B, r1	; 0x80246b <udd_ctrl_payload_nb_trans+0x1>
	udd_control_out_ack_tc();
    b7a2:	ec e7       	ldi	r30, 0x7C	; 124
    b7a4:	f4 e2       	ldi	r31, 0x24	; 36
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    b7a6:	02 e0       	ldi	r16, 0x02	; 2
    b7a8:	06 93       	lac	Z, r16
		udd_ctrl_in_sent();
    b7aa:	00 e2       	ldi	r16, 0x20	; 32
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    b7ac:	06 93       	lac	Z, r16
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    b7ae:	05 c0       	rjmp	.+10     	; 0xb7ba <__vector_126+0x1c4>
    b7b0:	80 38       	cpi	r24, 0x80	; 128
	}
#endif

udd_interrupt_tc_end:
	return;
}
    b7b2:	11 f4       	brne	.+4      	; 0xb7b8 <__vector_126+0x1c2>
    b7b4:	9b d8       	rcall	.-3786   	; 0xa8ec <udd_ctrl_in_sent>
    b7b6:	01 c0       	rjmp	.+2      	; 0xb7ba <__vector_126+0x1c4>
    b7b8:	bb d9       	rcall	.-3210   	; 0xab30 <udd_ep_trans_complet>
    b7ba:	ff 91       	pop	r31
    b7bc:	ef 91       	pop	r30
    b7be:	df 91       	pop	r29
    b7c0:	cf 91       	pop	r28
    b7c2:	bf 91       	pop	r27
    b7c4:	af 91       	pop	r26
    b7c6:	9f 91       	pop	r25
    b7c8:	8f 91       	pop	r24
    b7ca:	7f 91       	pop	r23
    b7cc:	6f 91       	pop	r22
    b7ce:	5f 91       	pop	r21
    b7d0:	4f 91       	pop	r20
    b7d2:	3f 91       	pop	r19
    b7d4:	2f 91       	pop	r18
    b7d6:	1f 91       	pop	r17
    b7d8:	0f 91       	pop	r16
    b7da:	0f 90       	pop	r0
    b7dc:	0b be       	out	0x3b, r0	; 59
    b7de:	0f 90       	pop	r0
    b7e0:	0f be       	out	0x3f, r0	; 63
    b7e2:	0f 90       	pop	r0
    b7e4:	1f 90       	pop	r1
    b7e6:	18 95       	reti

0000b7e8 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    b7e8:	cf 92       	push	r12
    b7ea:	df 92       	push	r13
    b7ec:	ef 92       	push	r14
    b7ee:	ff 92       	push	r15
    b7f0:	cf 93       	push	r28
    b7f2:	df 93       	push	r29
    b7f4:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    b7f6:	6b 01       	movw	r12, r22
    b7f8:	e1 2c       	mov	r14, r1
    b7fa:	f1 2c       	mov	r15, r1
    b7fc:	60 e8       	ldi	r22, 0x80	; 128
    b7fe:	73 ec       	ldi	r23, 0xC3	; 195
    b800:	89 ec       	ldi	r24, 0xC9	; 201
    b802:	91 e0       	ldi	r25, 0x01	; 1
    b804:	a7 01       	movw	r20, r14
    b806:	96 01       	movw	r18, r12
    b808:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>
    b80c:	ca 01       	movw	r24, r20
    b80e:	b9 01       	movw	r22, r18
    b810:	2f ef       	ldi	r18, 0xFF	; 255
    b812:	3f ef       	ldi	r19, 0xFF	; 255
    b814:	40 e0       	ldi	r20, 0x00	; 0
    b816:	50 e0       	ldi	r21, 0x00	; 0
    b818:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>
	if (smallest_div < 1) {
    b81c:	21 15       	cp	r18, r1
    b81e:	31 05       	cpc	r19, r1
    b820:	29 f4       	brne	.+10     	; 0xb82c <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    b822:	81 e0       	ldi	r24, 0x01	; 1
    b824:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    b826:	21 e0       	ldi	r18, 0x01	; 1
    b828:	30 e0       	ldi	r19, 0x00	; 0
    b82a:	2d c0       	rjmp	.+90     	; 0xb886 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    b82c:	22 30       	cpi	r18, 0x02	; 2
    b82e:	31 05       	cpc	r19, r1
    b830:	28 f4       	brcc	.+10     	; 0xb83c <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    b832:	82 e0       	ldi	r24, 0x02	; 2
    b834:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    b836:	22 e0       	ldi	r18, 0x02	; 2
    b838:	30 e0       	ldi	r19, 0x00	; 0
    b83a:	25 c0       	rjmp	.+74     	; 0xb886 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    b83c:	24 30       	cpi	r18, 0x04	; 4
    b83e:	31 05       	cpc	r19, r1
    b840:	28 f4       	brcc	.+10     	; 0xb84c <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    b842:	83 e0       	ldi	r24, 0x03	; 3
    b844:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    b846:	24 e0       	ldi	r18, 0x04	; 4
    b848:	30 e0       	ldi	r19, 0x00	; 0
    b84a:	1d c0       	rjmp	.+58     	; 0xb886 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    b84c:	28 30       	cpi	r18, 0x08	; 8
    b84e:	31 05       	cpc	r19, r1
    b850:	28 f4       	brcc	.+10     	; 0xb85c <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    b852:	84 e0       	ldi	r24, 0x04	; 4
    b854:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    b856:	28 e0       	ldi	r18, 0x08	; 8
    b858:	30 e0       	ldi	r19, 0x00	; 0
    b85a:	15 c0       	rjmp	.+42     	; 0xb886 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    b85c:	20 34       	cpi	r18, 0x40	; 64
    b85e:	31 05       	cpc	r19, r1
    b860:	28 f4       	brcc	.+10     	; 0xb86c <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    b862:	85 e0       	ldi	r24, 0x05	; 5
    b864:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    b866:	20 e4       	ldi	r18, 0x40	; 64
    b868:	30 e0       	ldi	r19, 0x00	; 0
    b86a:	0d c0       	rjmp	.+26     	; 0xb886 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    b86c:	2f 3f       	cpi	r18, 0xFF	; 255
    b86e:	31 05       	cpc	r19, r1
    b870:	09 f0       	breq	.+2      	; 0xb874 <pwm_set_frequency+0x8c>
    b872:	28 f4       	brcc	.+10     	; 0xb87e <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    b874:	86 e0       	ldi	r24, 0x06	; 6
    b876:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    b878:	20 e0       	ldi	r18, 0x00	; 0
    b87a:	31 e0       	ldi	r19, 0x01	; 1
    b87c:	04 c0       	rjmp	.+8      	; 0xb886 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    b87e:	87 e0       	ldi	r24, 0x07	; 7
    b880:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    b882:	20 e0       	ldi	r18, 0x00	; 0
    b884:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    b886:	40 e0       	ldi	r20, 0x00	; 0
    b888:	50 e0       	ldi	r21, 0x00	; 0
    b88a:	60 e8       	ldi	r22, 0x80	; 128
    b88c:	73 ec       	ldi	r23, 0xC3	; 195
    b88e:	89 ec       	ldi	r24, 0xC9	; 201
    b890:	91 e0       	ldi	r25, 0x01	; 1
    b892:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>
    b896:	ca 01       	movw	r24, r20
    b898:	b9 01       	movw	r22, r18
    b89a:	a7 01       	movw	r20, r14
    b89c:	96 01       	movw	r18, r12
    b89e:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>
    b8a2:	2d 83       	std	Y+5, r18	; 0x05
    b8a4:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    b8a6:	24 36       	cpi	r18, 0x64	; 100
    b8a8:	31 05       	cpc	r19, r1
    b8aa:	18 f4       	brcc	.+6      	; 0xb8b2 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    b8ac:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    b8ae:	1d 82       	std	Y+5, r1	; 0x05
    b8b0:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    b8b2:	df 91       	pop	r29
    b8b4:	cf 91       	pop	r28
    b8b6:	ff 90       	pop	r15
    b8b8:	ef 90       	pop	r14
    b8ba:	df 90       	pop	r13
    b8bc:	cf 90       	pop	r12
    b8be:	08 95       	ret

0000b8c0 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    b8c0:	0f 93       	push	r16
    b8c2:	1f 93       	push	r17
    b8c4:	cf 93       	push	r28
    b8c6:	df 93       	push	r29
    b8c8:	ec 01       	movw	r28, r24
    b8ca:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    b8cc:	86 2f       	mov	r24, r22
    b8ce:	90 e0       	ldi	r25, 0x00	; 0
    b8d0:	87 30       	cpi	r24, 0x07	; 7
    b8d2:	91 05       	cpc	r25, r1
    b8d4:	08 f0       	brcs	.+2      	; 0xb8d8 <pwm_init+0x18>
    b8d6:	8b c0       	rjmp	.+278    	; 0xb9ee <pwm_init+0x12e>
    b8d8:	fc 01       	movw	r30, r24
    b8da:	88 27       	eor	r24, r24
    b8dc:	eb 5f       	subi	r30, 0xFB	; 251
    b8de:	fe 4f       	sbci	r31, 0xFE	; 254
    b8e0:	8f 4f       	sbci	r24, 0xFF	; 255
    b8e2:	0c 94 aa 81 	jmp	0x10354	; 0x10354 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    b8e6:	80 e0       	ldi	r24, 0x00	; 0
    b8e8:	98 e0       	ldi	r25, 0x08	; 8
    b8ea:	88 83       	st	Y, r24
    b8ec:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    b8ee:	e0 e4       	ldi	r30, 0x40	; 64
    b8f0:	f6 e0       	ldi	r31, 0x06	; 6
    b8f2:	30 81       	ld	r19, Z
    b8f4:	81 e0       	ldi	r24, 0x01	; 1
    b8f6:	90 e0       	ldi	r25, 0x00	; 0
    b8f8:	2f ef       	ldi	r18, 0xFF	; 255
    b8fa:	24 0f       	add	r18, r20
    b8fc:	02 c0       	rjmp	.+4      	; 0xb902 <pwm_init+0x42>
    b8fe:	88 0f       	add	r24, r24
    b900:	99 1f       	adc	r25, r25
    b902:	2a 95       	dec	r18
    b904:	e2 f7       	brpl	.-8      	; 0xb8fe <pwm_init+0x3e>
    b906:	83 2b       	or	r24, r19
    b908:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    b90a:	71 c0       	rjmp	.+226    	; 0xb9ee <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    b90c:	80 e4       	ldi	r24, 0x40	; 64
    b90e:	98 e0       	ldi	r25, 0x08	; 8
    b910:	88 83       	st	Y, r24
    b912:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    b914:	e0 e4       	ldi	r30, 0x40	; 64
    b916:	f6 e0       	ldi	r31, 0x06	; 6
    b918:	30 81       	ld	r19, Z
    b91a:	81 e0       	ldi	r24, 0x01	; 1
    b91c:	90 e0       	ldi	r25, 0x00	; 0
    b91e:	23 e0       	ldi	r18, 0x03	; 3
    b920:	24 0f       	add	r18, r20
    b922:	02 c0       	rjmp	.+4      	; 0xb928 <pwm_init+0x68>
    b924:	88 0f       	add	r24, r24
    b926:	99 1f       	adc	r25, r25
    b928:	2a 95       	dec	r18
    b92a:	e2 f7       	brpl	.-8      	; 0xb924 <pwm_init+0x64>
    b92c:	83 2b       	or	r24, r19
    b92e:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    b930:	5e c0       	rjmp	.+188    	; 0xb9ee <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    b932:	80 e0       	ldi	r24, 0x00	; 0
    b934:	99 e0       	ldi	r25, 0x09	; 9
    b936:	88 83       	st	Y, r24
    b938:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    b93a:	e0 e6       	ldi	r30, 0x60	; 96
    b93c:	f6 e0       	ldi	r31, 0x06	; 6
    b93e:	30 81       	ld	r19, Z
    b940:	81 e0       	ldi	r24, 0x01	; 1
    b942:	90 e0       	ldi	r25, 0x00	; 0
    b944:	2f ef       	ldi	r18, 0xFF	; 255
    b946:	24 0f       	add	r18, r20
    b948:	02 c0       	rjmp	.+4      	; 0xb94e <pwm_init+0x8e>
    b94a:	88 0f       	add	r24, r24
    b94c:	99 1f       	adc	r25, r25
    b94e:	2a 95       	dec	r18
    b950:	e2 f7       	brpl	.-8      	; 0xb94a <pwm_init+0x8a>
    b952:	83 2b       	or	r24, r19
    b954:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    b956:	4b c0       	rjmp	.+150    	; 0xb9ee <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    b958:	80 e4       	ldi	r24, 0x40	; 64
    b95a:	99 e0       	ldi	r25, 0x09	; 9
    b95c:	88 83       	st	Y, r24
    b95e:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    b960:	e0 e6       	ldi	r30, 0x60	; 96
    b962:	f6 e0       	ldi	r31, 0x06	; 6
    b964:	30 81       	ld	r19, Z
    b966:	81 e0       	ldi	r24, 0x01	; 1
    b968:	90 e0       	ldi	r25, 0x00	; 0
    b96a:	23 e0       	ldi	r18, 0x03	; 3
    b96c:	24 0f       	add	r18, r20
    b96e:	02 c0       	rjmp	.+4      	; 0xb974 <pwm_init+0xb4>
    b970:	88 0f       	add	r24, r24
    b972:	99 1f       	adc	r25, r25
    b974:	2a 95       	dec	r18
    b976:	e2 f7       	brpl	.-8      	; 0xb970 <pwm_init+0xb0>
    b978:	83 2b       	or	r24, r19
    b97a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    b97c:	38 c0       	rjmp	.+112    	; 0xb9ee <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    b97e:	80 e0       	ldi	r24, 0x00	; 0
    b980:	9a e0       	ldi	r25, 0x0A	; 10
    b982:	88 83       	st	Y, r24
    b984:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    b986:	e0 e8       	ldi	r30, 0x80	; 128
    b988:	f6 e0       	ldi	r31, 0x06	; 6
    b98a:	30 81       	ld	r19, Z
    b98c:	81 e0       	ldi	r24, 0x01	; 1
    b98e:	90 e0       	ldi	r25, 0x00	; 0
    b990:	2f ef       	ldi	r18, 0xFF	; 255
    b992:	24 0f       	add	r18, r20
    b994:	02 c0       	rjmp	.+4      	; 0xb99a <pwm_init+0xda>
    b996:	88 0f       	add	r24, r24
    b998:	99 1f       	adc	r25, r25
    b99a:	2a 95       	dec	r18
    b99c:	e2 f7       	brpl	.-8      	; 0xb996 <pwm_init+0xd6>
    b99e:	83 2b       	or	r24, r19
    b9a0:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    b9a2:	25 c0       	rjmp	.+74     	; 0xb9ee <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    b9a4:	80 e4       	ldi	r24, 0x40	; 64
    b9a6:	9a e0       	ldi	r25, 0x0A	; 10
    b9a8:	88 83       	st	Y, r24
    b9aa:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    b9ac:	e0 e8       	ldi	r30, 0x80	; 128
    b9ae:	f6 e0       	ldi	r31, 0x06	; 6
    b9b0:	30 81       	ld	r19, Z
    b9b2:	81 e0       	ldi	r24, 0x01	; 1
    b9b4:	90 e0       	ldi	r25, 0x00	; 0
    b9b6:	23 e0       	ldi	r18, 0x03	; 3
    b9b8:	24 0f       	add	r18, r20
    b9ba:	02 c0       	rjmp	.+4      	; 0xb9c0 <pwm_init+0x100>
    b9bc:	88 0f       	add	r24, r24
    b9be:	99 1f       	adc	r25, r25
    b9c0:	2a 95       	dec	r18
    b9c2:	e2 f7       	brpl	.-8      	; 0xb9bc <pwm_init+0xfc>
    b9c4:	83 2b       	or	r24, r19
    b9c6:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    b9c8:	12 c0       	rjmp	.+36     	; 0xb9ee <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    b9ca:	80 e0       	ldi	r24, 0x00	; 0
    b9cc:	9b e0       	ldi	r25, 0x0B	; 11
    b9ce:	88 83       	st	Y, r24
    b9d0:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    b9d2:	e0 ea       	ldi	r30, 0xA0	; 160
    b9d4:	f6 e0       	ldi	r31, 0x06	; 6
    b9d6:	30 81       	ld	r19, Z
    b9d8:	81 e0       	ldi	r24, 0x01	; 1
    b9da:	90 e0       	ldi	r25, 0x00	; 0
    b9dc:	2f ef       	ldi	r18, 0xFF	; 255
    b9de:	24 0f       	add	r18, r20
    b9e0:	02 c0       	rjmp	.+4      	; 0xb9e6 <pwm_init+0x126>
    b9e2:	88 0f       	add	r24, r24
    b9e4:	99 1f       	adc	r25, r25
    b9e6:	2a 95       	dec	r18
    b9e8:	e2 f7       	brpl	.-8      	; 0xb9e2 <pwm_init+0x122>
    b9ea:	83 2b       	or	r24, r19
    b9ec:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    b9ee:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    b9f0:	42 30       	cpi	r20, 0x02	; 2
    b9f2:	61 f0       	breq	.+24     	; 0xba0c <pwm_init+0x14c>
    b9f4:	18 f4       	brcc	.+6      	; 0xb9fc <pwm_init+0x13c>
    b9f6:	41 30       	cpi	r20, 0x01	; 1
    b9f8:	31 f0       	breq	.+12     	; 0xba06 <pwm_init+0x146>
    b9fa:	10 c0       	rjmp	.+32     	; 0xba1c <pwm_init+0x15c>
    b9fc:	43 30       	cpi	r20, 0x03	; 3
    b9fe:	49 f0       	breq	.+18     	; 0xba12 <pwm_init+0x152>
    ba00:	44 30       	cpi	r20, 0x04	; 4
    ba02:	51 f0       	breq	.+20     	; 0xba18 <pwm_init+0x158>
    ba04:	0b c0       	rjmp	.+22     	; 0xba1c <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    ba06:	80 e1       	ldi	r24, 0x10	; 16
    ba08:	8b 83       	std	Y+3, r24	; 0x03
		break;
    ba0a:	08 c0       	rjmp	.+16     	; 0xba1c <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    ba0c:	80 e2       	ldi	r24, 0x20	; 32
    ba0e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    ba10:	05 c0       	rjmp	.+10     	; 0xba1c <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    ba12:	80 e4       	ldi	r24, 0x40	; 64
    ba14:	8b 83       	std	Y+3, r24	; 0x03
		break;
    ba16:	02 c0       	rjmp	.+4      	; 0xba1c <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    ba18:	80 e8       	ldi	r24, 0x80	; 128
    ba1a:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    ba1c:	88 81       	ld	r24, Y
    ba1e:	99 81       	ldd	r25, Y+1	; 0x01
    ba20:	0e 94 da 51 	call	0xa3b4	; 0xa3b4 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    ba24:	e8 81       	ld	r30, Y
    ba26:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    ba28:	81 81       	ldd	r24, Z+1	; 0x01
    ba2a:	88 7f       	andi	r24, 0xF8	; 248
    ba2c:	83 60       	ori	r24, 0x03	; 3
    ba2e:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    ba30:	1d 82       	std	Y+5, r1	; 0x05
    ba32:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    ba34:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    ba36:	e8 81       	ld	r30, Y
    ba38:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    ba3a:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    ba3c:	80 7f       	andi	r24, 0xF0	; 240
    ba3e:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    ba40:	b8 01       	movw	r22, r16
    ba42:	ce 01       	movw	r24, r28
    ba44:	d1 de       	rcall	.-606    	; 0xb7e8 <pwm_set_frequency>
}
    ba46:	df 91       	pop	r29
    ba48:	cf 91       	pop	r28
    ba4a:	1f 91       	pop	r17
    ba4c:	0f 91       	pop	r16
    ba4e:	08 95       	ret

0000ba50 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    ba50:	cf 93       	push	r28
    ba52:	df 93       	push	r29
    ba54:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    ba56:	2d 81       	ldd	r18, Y+5	; 0x05
    ba58:	3e 81       	ldd	r19, Y+6	; 0x06
    ba5a:	a6 2f       	mov	r26, r22
    ba5c:	b0 e0       	ldi	r27, 0x00	; 0
    ba5e:	0e 94 b8 81 	call	0x10370	; 0x10370 <__umulhisi3>
    ba62:	24 e6       	ldi	r18, 0x64	; 100
    ba64:	30 e0       	ldi	r19, 0x00	; 0
    ba66:	40 e0       	ldi	r20, 0x00	; 0
    ba68:	50 e0       	ldi	r21, 0x00	; 0
    ba6a:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>
    ba6e:	8a 81       	ldd	r24, Y+2	; 0x02
    ba70:	e8 81       	ld	r30, Y
    ba72:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    ba74:	e6 fd       	sbrc	r30, 6
    ba76:	17 c0       	rjmp	.+46     	; 0xbaa6 <pwm_start+0x56>
		switch (channel_index) {
    ba78:	82 30       	cpi	r24, 0x02	; 2
    ba7a:	61 f0       	breq	.+24     	; 0xba94 <pwm_start+0x44>
    ba7c:	18 f4       	brcc	.+6      	; 0xba84 <pwm_start+0x34>
    ba7e:	81 30       	cpi	r24, 0x01	; 1
    ba80:	31 f0       	breq	.+12     	; 0xba8e <pwm_start+0x3e>
    ba82:	1b c0       	rjmp	.+54     	; 0xbaba <pwm_start+0x6a>
    ba84:	83 30       	cpi	r24, 0x03	; 3
    ba86:	49 f0       	breq	.+18     	; 0xba9a <pwm_start+0x4a>
    ba88:	84 30       	cpi	r24, 0x04	; 4
    ba8a:	51 f0       	breq	.+20     	; 0xbaa0 <pwm_start+0x50>
    ba8c:	16 c0       	rjmp	.+44     	; 0xbaba <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    ba8e:	20 af       	std	Z+56, r18	; 0x38
    ba90:	31 af       	std	Z+57, r19	; 0x39
    ba92:	13 c0       	rjmp	.+38     	; 0xbaba <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    ba94:	22 af       	std	Z+58, r18	; 0x3a
    ba96:	33 af       	std	Z+59, r19	; 0x3b
    ba98:	10 c0       	rjmp	.+32     	; 0xbaba <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    ba9a:	24 af       	std	Z+60, r18	; 0x3c
    ba9c:	35 af       	std	Z+61, r19	; 0x3d
    ba9e:	0d c0       	rjmp	.+26     	; 0xbaba <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    baa0:	26 af       	std	Z+62, r18	; 0x3e
    baa2:	37 af       	std	Z+63, r19	; 0x3f
    baa4:	0a c0       	rjmp	.+20     	; 0xbaba <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    baa6:	81 30       	cpi	r24, 0x01	; 1
    baa8:	19 f0       	breq	.+6      	; 0xbab0 <pwm_start+0x60>
    baaa:	82 30       	cpi	r24, 0x02	; 2
    baac:	21 f0       	breq	.+8      	; 0xbab6 <pwm_start+0x66>
    baae:	05 c0       	rjmp	.+10     	; 0xbaba <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    bab0:	20 af       	std	Z+56, r18	; 0x38
    bab2:	31 af       	std	Z+57, r19	; 0x39
    bab4:	02 c0       	rjmp	.+4      	; 0xbaba <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    bab6:	22 af       	std	Z+58, r18	; 0x3a
    bab8:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    baba:	8d 81       	ldd	r24, Y+5	; 0x05
    babc:	9e 81       	ldd	r25, Y+6	; 0x06
    babe:	e8 81       	ld	r30, Y
    bac0:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    bac2:	86 a3       	std	Z+38, r24	; 0x26
    bac4:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    bac6:	8b 81       	ldd	r24, Y+3	; 0x03
    bac8:	e8 81       	ld	r30, Y
    baca:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    bacc:	e6 fd       	sbrc	r30, 6
    bace:	04 c0       	rjmp	.+8      	; 0xbad8 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    bad0:	91 81       	ldd	r25, Z+1	; 0x01
    bad2:	89 2b       	or	r24, r25
    bad4:	81 83       	std	Z+1, r24	; 0x01
    bad6:	04 c0       	rjmp	.+8      	; 0xbae0 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    bad8:	91 81       	ldd	r25, Z+1	; 0x01
    bada:	80 73       	andi	r24, 0x30	; 48
    badc:	89 2b       	or	r24, r25
    bade:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    bae0:	e8 81       	ld	r30, Y
    bae2:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    bae4:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    bae6:	80 7f       	andi	r24, 0xF0	; 240
    bae8:	9c 81       	ldd	r25, Y+4	; 0x04
    baea:	89 2b       	or	r24, r25
    baec:	80 83       	st	Z, r24
}
    baee:	df 91       	pop	r29
    baf0:	cf 91       	pop	r28
    baf2:	08 95       	ret

0000baf4 <yield_ms_cb>:
void halt(void)
{
	/* MAIN Loop Shutdown */
	/* atomic */
	{
		g_workmode = WORKMODE_END;
    baf4:	10 92 7c 26 	sts	0x267C, r1	; 0x80267c <g_sched_yield>
    baf8:	08 95       	ret

0000bafa <isr_tcc1_ovfl>:
    bafa:	20 91 8e 28 	lds	r18, 0x288E	; 0x80288e <g_milliseconds_cnt64>
    bafe:	30 91 8f 28 	lds	r19, 0x288F	; 0x80288f <g_milliseconds_cnt64+0x1>
    bb02:	40 91 90 28 	lds	r20, 0x2890	; 0x802890 <g_milliseconds_cnt64+0x2>
    bb06:	50 91 91 28 	lds	r21, 0x2891	; 0x802891 <g_milliseconds_cnt64+0x3>
    bb0a:	60 91 92 28 	lds	r22, 0x2892	; 0x802892 <g_milliseconds_cnt64+0x4>
    bb0e:	70 91 93 28 	lds	r23, 0x2893	; 0x802893 <g_milliseconds_cnt64+0x5>
    bb12:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <g_milliseconds_cnt64+0x6>
    bb16:	90 91 95 28 	lds	r25, 0x2895	; 0x802895 <g_milliseconds_cnt64+0x7>
    bb1a:	a1 e0       	ldi	r26, 0x01	; 1
    bb1c:	0e 94 32 83 	call	0x10664	; 0x10664 <__adddi3_s8>
    bb20:	20 93 8e 28 	sts	0x288E, r18	; 0x80288e <g_milliseconds_cnt64>
    bb24:	30 93 8f 28 	sts	0x288F, r19	; 0x80288f <g_milliseconds_cnt64+0x1>
    bb28:	40 93 90 28 	sts	0x2890, r20	; 0x802890 <g_milliseconds_cnt64+0x2>
    bb2c:	50 93 91 28 	sts	0x2891, r21	; 0x802891 <g_milliseconds_cnt64+0x3>
    bb30:	60 93 92 28 	sts	0x2892, r22	; 0x802892 <g_milliseconds_cnt64+0x4>
    bb34:	70 93 93 28 	sts	0x2893, r23	; 0x802893 <g_milliseconds_cnt64+0x5>
    bb38:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <g_milliseconds_cnt64+0x6>
    bb3c:	90 93 95 28 	sts	0x2895, r25	; 0x802895 <g_milliseconds_cnt64+0x7>
    bb40:	08 95       	ret

0000bb42 <isr_adc_a>:
    bb42:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    bb46:	4e 5b       	subi	r20, 0xBE	; 190
    bb48:	51 09       	sbc	r21, r1
    bb4a:	60 ff       	sbrs	r22, 0
    bb4c:	d3 c0       	rjmp	.+422    	; 0xbcf4 <isr_adc_a+0x1b2>
    bb4e:	82 95       	swap	r24
    bb50:	8f 70       	andi	r24, 0x0F	; 15
    bb52:	81 30       	cpi	r24, 0x01	; 1
    bb54:	31 f0       	breq	.+12     	; 0xbb62 <isr_adc_a+0x20>
    bb56:	08 f4       	brcc	.+2      	; 0xbb5a <isr_adc_a+0x18>
    bb58:	8a c0       	rjmp	.+276    	; 0xbc6e <isr_adc_a+0x12c>
    bb5a:	82 30       	cpi	r24, 0x02	; 2
    bb5c:	09 f4       	brne	.+2      	; 0xbb60 <isr_adc_a+0x1e>
    bb5e:	44 c0       	rjmp	.+136    	; 0xbbe8 <isr_adc_a+0xa6>
    bb60:	08 95       	ret
    bb62:	80 91 da 26 	lds	r24, 0x26DA	; 0x8026da <g_adc_vctcxo_sum>
    bb66:	90 91 db 26 	lds	r25, 0x26DB	; 0x8026db <g_adc_vctcxo_sum+0x1>
    bb6a:	a0 91 dc 26 	lds	r26, 0x26DC	; 0x8026dc <g_adc_vctcxo_sum+0x2>
    bb6e:	b0 91 dd 26 	lds	r27, 0x26DD	; 0x8026dd <g_adc_vctcxo_sum+0x3>
    bb72:	05 2e       	mov	r0, r21
    bb74:	00 0c       	add	r0, r0
    bb76:	66 0b       	sbc	r22, r22
    bb78:	77 0b       	sbc	r23, r23
    bb7a:	48 0f       	add	r20, r24
    bb7c:	59 1f       	adc	r21, r25
    bb7e:	6a 1f       	adc	r22, r26
    bb80:	7b 1f       	adc	r23, r27
    bb82:	40 93 da 26 	sts	0x26DA, r20	; 0x8026da <g_adc_vctcxo_sum>
    bb86:	50 93 db 26 	sts	0x26DB, r21	; 0x8026db <g_adc_vctcxo_sum+0x1>
    bb8a:	60 93 dc 26 	sts	0x26DC, r22	; 0x8026dc <g_adc_vctcxo_sum+0x2>
    bb8e:	70 93 dd 26 	sts	0x26DD, r23	; 0x8026dd <g_adc_vctcxo_sum+0x3>
    bb92:	80 91 d8 26 	lds	r24, 0x26D8	; 0x8026d8 <g_adc_vctcxo_cnt>
    bb96:	90 91 d9 26 	lds	r25, 0x26D9	; 0x8026d9 <g_adc_vctcxo_cnt+0x1>
    bb9a:	01 96       	adiw	r24, 0x01	; 1
    bb9c:	80 93 d8 26 	sts	0x26D8, r24	; 0x8026d8 <g_adc_vctcxo_cnt>
    bba0:	90 93 d9 26 	sts	0x26D9, r25	; 0x8026d9 <g_adc_vctcxo_cnt+0x1>
    bba4:	8f 3f       	cpi	r24, 0xFF	; 255
    bba6:	91 05       	cpc	r25, r1
    bba8:	09 f0       	breq	.+2      	; 0xbbac <isr_adc_a+0x6a>
    bbaa:	08 f4       	brcc	.+2      	; 0xbbae <isr_adc_a+0x6c>
    bbac:	70 c1       	rjmp	.+736    	; 0xbe8e <isr_adc_a+0x34c>
    bbae:	80 91 da 26 	lds	r24, 0x26DA	; 0x8026da <g_adc_vctcxo_sum>
    bbb2:	90 91 db 26 	lds	r25, 0x26DB	; 0x8026db <g_adc_vctcxo_sum+0x1>
    bbb6:	a0 91 dc 26 	lds	r26, 0x26DC	; 0x8026dc <g_adc_vctcxo_sum+0x2>
    bbba:	b0 91 dd 26 	lds	r27, 0x26DD	; 0x8026dd <g_adc_vctcxo_sum+0x3>
    bbbe:	80 93 de 26 	sts	0x26DE, r24	; 0x8026de <g_adc_vctcxo_cur>
    bbc2:	90 93 df 26 	sts	0x26DF, r25	; 0x8026df <g_adc_vctcxo_cur+0x1>
    bbc6:	a0 93 e0 26 	sts	0x26E0, r26	; 0x8026e0 <g_adc_vctcxo_cur+0x2>
    bbca:	b0 93 e1 26 	sts	0x26E1, r27	; 0x8026e1 <g_adc_vctcxo_cur+0x3>
    bbce:	10 92 d8 26 	sts	0x26D8, r1	; 0x8026d8 <g_adc_vctcxo_cnt>
    bbd2:	10 92 d9 26 	sts	0x26D9, r1	; 0x8026d9 <g_adc_vctcxo_cnt+0x1>
    bbd6:	10 92 da 26 	sts	0x26DA, r1	; 0x8026da <g_adc_vctcxo_sum>
    bbda:	10 92 db 26 	sts	0x26DB, r1	; 0x8026db <g_adc_vctcxo_sum+0x1>
    bbde:	10 92 dc 26 	sts	0x26DC, r1	; 0x8026dc <g_adc_vctcxo_sum+0x2>
    bbe2:	10 92 dd 26 	sts	0x26DD, r1	; 0x8026dd <g_adc_vctcxo_sum+0x3>
    bbe6:	08 95       	ret
    bbe8:	80 91 d0 26 	lds	r24, 0x26D0	; 0x8026d0 <g_adc_5v0_sum>
    bbec:	90 91 d1 26 	lds	r25, 0x26D1	; 0x8026d1 <g_adc_5v0_sum+0x1>
    bbf0:	a0 91 d2 26 	lds	r26, 0x26D2	; 0x8026d2 <g_adc_5v0_sum+0x2>
    bbf4:	b0 91 d3 26 	lds	r27, 0x26D3	; 0x8026d3 <g_adc_5v0_sum+0x3>
    bbf8:	05 2e       	mov	r0, r21
    bbfa:	00 0c       	add	r0, r0
    bbfc:	66 0b       	sbc	r22, r22
    bbfe:	77 0b       	sbc	r23, r23
    bc00:	48 0f       	add	r20, r24
    bc02:	59 1f       	adc	r21, r25
    bc04:	6a 1f       	adc	r22, r26
    bc06:	7b 1f       	adc	r23, r27
    bc08:	40 93 d0 26 	sts	0x26D0, r20	; 0x8026d0 <g_adc_5v0_sum>
    bc0c:	50 93 d1 26 	sts	0x26D1, r21	; 0x8026d1 <g_adc_5v0_sum+0x1>
    bc10:	60 93 d2 26 	sts	0x26D2, r22	; 0x8026d2 <g_adc_5v0_sum+0x2>
    bc14:	70 93 d3 26 	sts	0x26D3, r23	; 0x8026d3 <g_adc_5v0_sum+0x3>
    bc18:	80 91 ce 26 	lds	r24, 0x26CE	; 0x8026ce <g_adc_5v0_cnt>
    bc1c:	90 91 cf 26 	lds	r25, 0x26CF	; 0x8026cf <g_adc_5v0_cnt+0x1>
    bc20:	01 96       	adiw	r24, 0x01	; 1
    bc22:	80 93 ce 26 	sts	0x26CE, r24	; 0x8026ce <g_adc_5v0_cnt>
    bc26:	90 93 cf 26 	sts	0x26CF, r25	; 0x8026cf <g_adc_5v0_cnt+0x1>
    bc2a:	8f 3f       	cpi	r24, 0xFF	; 255
    bc2c:	91 05       	cpc	r25, r1
    bc2e:	09 f0       	breq	.+2      	; 0xbc32 <isr_adc_a+0xf0>
    bc30:	08 f4       	brcc	.+2      	; 0xbc34 <isr_adc_a+0xf2>
    bc32:	2d c1       	rjmp	.+602    	; 0xbe8e <isr_adc_a+0x34c>
    bc34:	80 91 d0 26 	lds	r24, 0x26D0	; 0x8026d0 <g_adc_5v0_sum>
    bc38:	90 91 d1 26 	lds	r25, 0x26D1	; 0x8026d1 <g_adc_5v0_sum+0x1>
    bc3c:	a0 91 d2 26 	lds	r26, 0x26D2	; 0x8026d2 <g_adc_5v0_sum+0x2>
    bc40:	b0 91 d3 26 	lds	r27, 0x26D3	; 0x8026d3 <g_adc_5v0_sum+0x3>
    bc44:	80 93 d4 26 	sts	0x26D4, r24	; 0x8026d4 <g_adc_5v0_cur>
    bc48:	90 93 d5 26 	sts	0x26D5, r25	; 0x8026d5 <g_adc_5v0_cur+0x1>
    bc4c:	a0 93 d6 26 	sts	0x26D6, r26	; 0x8026d6 <g_adc_5v0_cur+0x2>
    bc50:	b0 93 d7 26 	sts	0x26D7, r27	; 0x8026d7 <g_adc_5v0_cur+0x3>
    bc54:	10 92 ce 26 	sts	0x26CE, r1	; 0x8026ce <g_adc_5v0_cnt>
    bc58:	10 92 cf 26 	sts	0x26CF, r1	; 0x8026cf <g_adc_5v0_cnt+0x1>
    bc5c:	10 92 d0 26 	sts	0x26D0, r1	; 0x8026d0 <g_adc_5v0_sum>
    bc60:	10 92 d1 26 	sts	0x26D1, r1	; 0x8026d1 <g_adc_5v0_sum+0x1>
    bc64:	10 92 d2 26 	sts	0x26D2, r1	; 0x8026d2 <g_adc_5v0_sum+0x2>
    bc68:	10 92 d3 26 	sts	0x26D3, r1	; 0x8026d3 <g_adc_5v0_sum+0x3>
    bc6c:	08 95       	ret
    bc6e:	80 91 c6 26 	lds	r24, 0x26C6	; 0x8026c6 <g_adc_vbat_sum>
    bc72:	90 91 c7 26 	lds	r25, 0x26C7	; 0x8026c7 <g_adc_vbat_sum+0x1>
    bc76:	a0 91 c8 26 	lds	r26, 0x26C8	; 0x8026c8 <g_adc_vbat_sum+0x2>
    bc7a:	b0 91 c9 26 	lds	r27, 0x26C9	; 0x8026c9 <g_adc_vbat_sum+0x3>
    bc7e:	05 2e       	mov	r0, r21
    bc80:	00 0c       	add	r0, r0
    bc82:	66 0b       	sbc	r22, r22
    bc84:	77 0b       	sbc	r23, r23
    bc86:	48 0f       	add	r20, r24
    bc88:	59 1f       	adc	r21, r25
    bc8a:	6a 1f       	adc	r22, r26
    bc8c:	7b 1f       	adc	r23, r27
    bc8e:	40 93 c6 26 	sts	0x26C6, r20	; 0x8026c6 <g_adc_vbat_sum>
    bc92:	50 93 c7 26 	sts	0x26C7, r21	; 0x8026c7 <g_adc_vbat_sum+0x1>
    bc96:	60 93 c8 26 	sts	0x26C8, r22	; 0x8026c8 <g_adc_vbat_sum+0x2>
    bc9a:	70 93 c9 26 	sts	0x26C9, r23	; 0x8026c9 <g_adc_vbat_sum+0x3>
    bc9e:	80 91 c4 26 	lds	r24, 0x26C4	; 0x8026c4 <g_adc_vbat_cnt>
    bca2:	90 91 c5 26 	lds	r25, 0x26C5	; 0x8026c5 <g_adc_vbat_cnt+0x1>
    bca6:	01 96       	adiw	r24, 0x01	; 1
    bca8:	80 93 c4 26 	sts	0x26C4, r24	; 0x8026c4 <g_adc_vbat_cnt>
    bcac:	90 93 c5 26 	sts	0x26C5, r25	; 0x8026c5 <g_adc_vbat_cnt+0x1>
    bcb0:	8f 3f       	cpi	r24, 0xFF	; 255
    bcb2:	91 05       	cpc	r25, r1
    bcb4:	09 f0       	breq	.+2      	; 0xbcb8 <isr_adc_a+0x176>
    bcb6:	08 f4       	brcc	.+2      	; 0xbcba <isr_adc_a+0x178>
    bcb8:	ea c0       	rjmp	.+468    	; 0xbe8e <isr_adc_a+0x34c>
    bcba:	80 91 c6 26 	lds	r24, 0x26C6	; 0x8026c6 <g_adc_vbat_sum>
    bcbe:	90 91 c7 26 	lds	r25, 0x26C7	; 0x8026c7 <g_adc_vbat_sum+0x1>
    bcc2:	a0 91 c8 26 	lds	r26, 0x26C8	; 0x8026c8 <g_adc_vbat_sum+0x2>
    bcc6:	b0 91 c9 26 	lds	r27, 0x26C9	; 0x8026c9 <g_adc_vbat_sum+0x3>
    bcca:	80 93 ca 26 	sts	0x26CA, r24	; 0x8026ca <g_adc_vbat_cur>
    bcce:	90 93 cb 26 	sts	0x26CB, r25	; 0x8026cb <g_adc_vbat_cur+0x1>
    bcd2:	a0 93 cc 26 	sts	0x26CC, r26	; 0x8026cc <g_adc_vbat_cur+0x2>
    bcd6:	b0 93 cd 26 	sts	0x26CD, r27	; 0x8026cd <g_adc_vbat_cur+0x3>
    bcda:	10 92 c4 26 	sts	0x26C4, r1	; 0x8026c4 <g_adc_vbat_cnt>
    bcde:	10 92 c5 26 	sts	0x26C5, r1	; 0x8026c5 <g_adc_vbat_cnt+0x1>
    bce2:	10 92 c6 26 	sts	0x26C6, r1	; 0x8026c6 <g_adc_vbat_sum>
    bce6:	10 92 c7 26 	sts	0x26C7, r1	; 0x8026c7 <g_adc_vbat_sum+0x1>
    bcea:	10 92 c8 26 	sts	0x26C8, r1	; 0x8026c8 <g_adc_vbat_sum+0x2>
    bcee:	10 92 c9 26 	sts	0x26C9, r1	; 0x8026c9 <g_adc_vbat_sum+0x3>
    bcf2:	08 95       	ret
    bcf4:	61 ff       	sbrs	r22, 1
    bcf6:	43 c0       	rjmp	.+134    	; 0xbd7e <isr_adc_a+0x23c>
    bcf8:	80 91 bc 26 	lds	r24, 0x26BC	; 0x8026bc <g_adc_io_adc4_sum>
    bcfc:	90 91 bd 26 	lds	r25, 0x26BD	; 0x8026bd <g_adc_io_adc4_sum+0x1>
    bd00:	a0 91 be 26 	lds	r26, 0x26BE	; 0x8026be <g_adc_io_adc4_sum+0x2>
    bd04:	b0 91 bf 26 	lds	r27, 0x26BF	; 0x8026bf <g_adc_io_adc4_sum+0x3>
    bd08:	05 2e       	mov	r0, r21
    bd0a:	00 0c       	add	r0, r0
    bd0c:	66 0b       	sbc	r22, r22
    bd0e:	77 0b       	sbc	r23, r23
    bd10:	48 0f       	add	r20, r24
    bd12:	59 1f       	adc	r21, r25
    bd14:	6a 1f       	adc	r22, r26
    bd16:	7b 1f       	adc	r23, r27
    bd18:	40 93 bc 26 	sts	0x26BC, r20	; 0x8026bc <g_adc_io_adc4_sum>
    bd1c:	50 93 bd 26 	sts	0x26BD, r21	; 0x8026bd <g_adc_io_adc4_sum+0x1>
    bd20:	60 93 be 26 	sts	0x26BE, r22	; 0x8026be <g_adc_io_adc4_sum+0x2>
    bd24:	70 93 bf 26 	sts	0x26BF, r23	; 0x8026bf <g_adc_io_adc4_sum+0x3>
    bd28:	80 91 ba 26 	lds	r24, 0x26BA	; 0x8026ba <g_adc_io_adc4_cnt>
    bd2c:	90 91 bb 26 	lds	r25, 0x26BB	; 0x8026bb <g_adc_io_adc4_cnt+0x1>
    bd30:	01 96       	adiw	r24, 0x01	; 1
    bd32:	80 93 ba 26 	sts	0x26BA, r24	; 0x8026ba <g_adc_io_adc4_cnt>
    bd36:	90 93 bb 26 	sts	0x26BB, r25	; 0x8026bb <g_adc_io_adc4_cnt+0x1>
    bd3a:	8f 3f       	cpi	r24, 0xFF	; 255
    bd3c:	91 05       	cpc	r25, r1
    bd3e:	09 f0       	breq	.+2      	; 0xbd42 <isr_adc_a+0x200>
    bd40:	08 f4       	brcc	.+2      	; 0xbd44 <isr_adc_a+0x202>
    bd42:	a5 c0       	rjmp	.+330    	; 0xbe8e <isr_adc_a+0x34c>
    bd44:	80 91 bc 26 	lds	r24, 0x26BC	; 0x8026bc <g_adc_io_adc4_sum>
    bd48:	90 91 bd 26 	lds	r25, 0x26BD	; 0x8026bd <g_adc_io_adc4_sum+0x1>
    bd4c:	a0 91 be 26 	lds	r26, 0x26BE	; 0x8026be <g_adc_io_adc4_sum+0x2>
    bd50:	b0 91 bf 26 	lds	r27, 0x26BF	; 0x8026bf <g_adc_io_adc4_sum+0x3>
    bd54:	80 93 c0 26 	sts	0x26C0, r24	; 0x8026c0 <g_adc_io_adc4_cur>
    bd58:	90 93 c1 26 	sts	0x26C1, r25	; 0x8026c1 <g_adc_io_adc4_cur+0x1>
    bd5c:	a0 93 c2 26 	sts	0x26C2, r26	; 0x8026c2 <g_adc_io_adc4_cur+0x2>
    bd60:	b0 93 c3 26 	sts	0x26C3, r27	; 0x8026c3 <g_adc_io_adc4_cur+0x3>
    bd64:	10 92 ba 26 	sts	0x26BA, r1	; 0x8026ba <g_adc_io_adc4_cnt>
    bd68:	10 92 bb 26 	sts	0x26BB, r1	; 0x8026bb <g_adc_io_adc4_cnt+0x1>
    bd6c:	10 92 bc 26 	sts	0x26BC, r1	; 0x8026bc <g_adc_io_adc4_sum>
    bd70:	10 92 bd 26 	sts	0x26BD, r1	; 0x8026bd <g_adc_io_adc4_sum+0x1>
    bd74:	10 92 be 26 	sts	0x26BE, r1	; 0x8026be <g_adc_io_adc4_sum+0x2>
    bd78:	10 92 bf 26 	sts	0x26BF, r1	; 0x8026bf <g_adc_io_adc4_sum+0x3>
    bd7c:	08 95       	ret
    bd7e:	62 ff       	sbrs	r22, 2
    bd80:	43 c0       	rjmp	.+134    	; 0xbe08 <isr_adc_a+0x2c6>
    bd82:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <g_adc_io_adc5_sum>
    bd86:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <g_adc_io_adc5_sum+0x1>
    bd8a:	a0 91 b4 26 	lds	r26, 0x26B4	; 0x8026b4 <g_adc_io_adc5_sum+0x2>
    bd8e:	b0 91 b5 26 	lds	r27, 0x26B5	; 0x8026b5 <g_adc_io_adc5_sum+0x3>
    bd92:	05 2e       	mov	r0, r21
    bd94:	00 0c       	add	r0, r0
    bd96:	66 0b       	sbc	r22, r22
    bd98:	77 0b       	sbc	r23, r23
    bd9a:	48 0f       	add	r20, r24
    bd9c:	59 1f       	adc	r21, r25
    bd9e:	6a 1f       	adc	r22, r26
    bda0:	7b 1f       	adc	r23, r27
    bda2:	40 93 b2 26 	sts	0x26B2, r20	; 0x8026b2 <g_adc_io_adc5_sum>
    bda6:	50 93 b3 26 	sts	0x26B3, r21	; 0x8026b3 <g_adc_io_adc5_sum+0x1>
    bdaa:	60 93 b4 26 	sts	0x26B4, r22	; 0x8026b4 <g_adc_io_adc5_sum+0x2>
    bdae:	70 93 b5 26 	sts	0x26B5, r23	; 0x8026b5 <g_adc_io_adc5_sum+0x3>
    bdb2:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <g_adc_io_adc5_cnt>
    bdb6:	90 91 b1 26 	lds	r25, 0x26B1	; 0x8026b1 <g_adc_io_adc5_cnt+0x1>
    bdba:	01 96       	adiw	r24, 0x01	; 1
    bdbc:	80 93 b0 26 	sts	0x26B0, r24	; 0x8026b0 <g_adc_io_adc5_cnt>
    bdc0:	90 93 b1 26 	sts	0x26B1, r25	; 0x8026b1 <g_adc_io_adc5_cnt+0x1>
    bdc4:	8f 3f       	cpi	r24, 0xFF	; 255
    bdc6:	91 05       	cpc	r25, r1
    bdc8:	09 f0       	breq	.+2      	; 0xbdcc <isr_adc_a+0x28a>
    bdca:	08 f4       	brcc	.+2      	; 0xbdce <isr_adc_a+0x28c>
    bdcc:	60 c0       	rjmp	.+192    	; 0xbe8e <isr_adc_a+0x34c>
    bdce:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <g_adc_io_adc5_sum>
    bdd2:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <g_adc_io_adc5_sum+0x1>
    bdd6:	a0 91 b4 26 	lds	r26, 0x26B4	; 0x8026b4 <g_adc_io_adc5_sum+0x2>
    bdda:	b0 91 b5 26 	lds	r27, 0x26B5	; 0x8026b5 <g_adc_io_adc5_sum+0x3>
    bdde:	80 93 b6 26 	sts	0x26B6, r24	; 0x8026b6 <g_adc_io_adc5_cur>
    bde2:	90 93 b7 26 	sts	0x26B7, r25	; 0x8026b7 <g_adc_io_adc5_cur+0x1>
    bde6:	a0 93 b8 26 	sts	0x26B8, r26	; 0x8026b8 <g_adc_io_adc5_cur+0x2>
    bdea:	b0 93 b9 26 	sts	0x26B9, r27	; 0x8026b9 <g_adc_io_adc5_cur+0x3>
    bdee:	10 92 b0 26 	sts	0x26B0, r1	; 0x8026b0 <g_adc_io_adc5_cnt>
    bdf2:	10 92 b1 26 	sts	0x26B1, r1	; 0x8026b1 <g_adc_io_adc5_cnt+0x1>
    bdf6:	10 92 b2 26 	sts	0x26B2, r1	; 0x8026b2 <g_adc_io_adc5_sum>
    bdfa:	10 92 b3 26 	sts	0x26B3, r1	; 0x8026b3 <g_adc_io_adc5_sum+0x1>
    bdfe:	10 92 b4 26 	sts	0x26B4, r1	; 0x8026b4 <g_adc_io_adc5_sum+0x2>
    be02:	10 92 b5 26 	sts	0x26B5, r1	; 0x8026b5 <g_adc_io_adc5_sum+0x3>
    be06:	08 95       	ret
    be08:	63 ff       	sbrs	r22, 3
    be0a:	41 c0       	rjmp	.+130    	; 0xbe8e <isr_adc_a+0x34c>
    be0c:	80 91 a8 26 	lds	r24, 0x26A8	; 0x8026a8 <g_adc_silence_sum>
    be10:	90 91 a9 26 	lds	r25, 0x26A9	; 0x8026a9 <g_adc_silence_sum+0x1>
    be14:	a0 91 aa 26 	lds	r26, 0x26AA	; 0x8026aa <g_adc_silence_sum+0x2>
    be18:	b0 91 ab 26 	lds	r27, 0x26AB	; 0x8026ab <g_adc_silence_sum+0x3>
    be1c:	05 2e       	mov	r0, r21
    be1e:	00 0c       	add	r0, r0
    be20:	66 0b       	sbc	r22, r22
    be22:	77 0b       	sbc	r23, r23
    be24:	48 0f       	add	r20, r24
    be26:	59 1f       	adc	r21, r25
    be28:	6a 1f       	adc	r22, r26
    be2a:	7b 1f       	adc	r23, r27
    be2c:	40 93 a8 26 	sts	0x26A8, r20	; 0x8026a8 <g_adc_silence_sum>
    be30:	50 93 a9 26 	sts	0x26A9, r21	; 0x8026a9 <g_adc_silence_sum+0x1>
    be34:	60 93 aa 26 	sts	0x26AA, r22	; 0x8026aa <g_adc_silence_sum+0x2>
    be38:	70 93 ab 26 	sts	0x26AB, r23	; 0x8026ab <g_adc_silence_sum+0x3>
    be3c:	80 91 a6 26 	lds	r24, 0x26A6	; 0x8026a6 <g_adc_silence_cnt>
    be40:	90 91 a7 26 	lds	r25, 0x26A7	; 0x8026a7 <g_adc_silence_cnt+0x1>
    be44:	01 96       	adiw	r24, 0x01	; 1
    be46:	80 93 a6 26 	sts	0x26A6, r24	; 0x8026a6 <g_adc_silence_cnt>
    be4a:	90 93 a7 26 	sts	0x26A7, r25	; 0x8026a7 <g_adc_silence_cnt+0x1>
    be4e:	8f 3f       	cpi	r24, 0xFF	; 255
    be50:	91 05       	cpc	r25, r1
    be52:	e9 f0       	breq	.+58     	; 0xbe8e <isr_adc_a+0x34c>
    be54:	e0 f0       	brcs	.+56     	; 0xbe8e <isr_adc_a+0x34c>
    be56:	80 91 a8 26 	lds	r24, 0x26A8	; 0x8026a8 <g_adc_silence_sum>
    be5a:	90 91 a9 26 	lds	r25, 0x26A9	; 0x8026a9 <g_adc_silence_sum+0x1>
    be5e:	a0 91 aa 26 	lds	r26, 0x26AA	; 0x8026aa <g_adc_silence_sum+0x2>
    be62:	b0 91 ab 26 	lds	r27, 0x26AB	; 0x8026ab <g_adc_silence_sum+0x3>
    be66:	80 93 ac 26 	sts	0x26AC, r24	; 0x8026ac <g_adc_silence_cur>
    be6a:	90 93 ad 26 	sts	0x26AD, r25	; 0x8026ad <g_adc_silence_cur+0x1>
    be6e:	a0 93 ae 26 	sts	0x26AE, r26	; 0x8026ae <g_adc_silence_cur+0x2>
    be72:	b0 93 af 26 	sts	0x26AF, r27	; 0x8026af <g_adc_silence_cur+0x3>
    be76:	10 92 a6 26 	sts	0x26A6, r1	; 0x8026a6 <g_adc_silence_cnt>
    be7a:	10 92 a7 26 	sts	0x26A7, r1	; 0x8026a7 <g_adc_silence_cnt+0x1>
    be7e:	10 92 a8 26 	sts	0x26A8, r1	; 0x8026a8 <g_adc_silence_sum>
    be82:	10 92 a9 26 	sts	0x26A9, r1	; 0x8026a9 <g_adc_silence_sum+0x1>
    be86:	10 92 aa 26 	sts	0x26AA, r1	; 0x8026aa <g_adc_silence_sum+0x2>
    be8a:	10 92 ab 26 	sts	0x26AB, r1	; 0x8026ab <g_adc_silence_sum+0x3>
    be8e:	08 95       	ret

0000be90 <isr_adc_b>:
    be90:	0f 93       	push	r16
    be92:	1f 93       	push	r17
    be94:	60 ff       	sbrs	r22, 0
    be96:	43 c0       	rjmp	.+134    	; 0xbf1e <isr_adc_b+0x8e>
    be98:	00 91 9e 26 	lds	r16, 0x269E	; 0x80269e <g_adc_temp_sum>
    be9c:	10 91 9f 26 	lds	r17, 0x269F	; 0x80269f <g_adc_temp_sum+0x1>
    bea0:	20 91 a0 26 	lds	r18, 0x26A0	; 0x8026a0 <g_adc_temp_sum+0x2>
    bea4:	30 91 a1 26 	lds	r19, 0x26A1	; 0x8026a1 <g_adc_temp_sum+0x3>
    bea8:	4e 5b       	subi	r20, 0xBE	; 190
    beaa:	51 09       	sbc	r21, r1
    beac:	05 2e       	mov	r0, r21
    beae:	00 0c       	add	r0, r0
    beb0:	66 0b       	sbc	r22, r22
    beb2:	77 0b       	sbc	r23, r23
    beb4:	40 0f       	add	r20, r16
    beb6:	51 1f       	adc	r21, r17
    beb8:	62 1f       	adc	r22, r18
    beba:	73 1f       	adc	r23, r19
    bebc:	40 93 9e 26 	sts	0x269E, r20	; 0x80269e <g_adc_temp_sum>
    bec0:	50 93 9f 26 	sts	0x269F, r21	; 0x80269f <g_adc_temp_sum+0x1>
    bec4:	60 93 a0 26 	sts	0x26A0, r22	; 0x8026a0 <g_adc_temp_sum+0x2>
    bec8:	70 93 a1 26 	sts	0x26A1, r23	; 0x8026a1 <g_adc_temp_sum+0x3>
    becc:	80 91 9c 26 	lds	r24, 0x269C	; 0x80269c <g_adc_temp_cnt>
    bed0:	90 91 9d 26 	lds	r25, 0x269D	; 0x80269d <g_adc_temp_cnt+0x1>
    bed4:	01 96       	adiw	r24, 0x01	; 1
    bed6:	80 93 9c 26 	sts	0x269C, r24	; 0x80269c <g_adc_temp_cnt>
    beda:	90 93 9d 26 	sts	0x269D, r25	; 0x80269d <g_adc_temp_cnt+0x1>
    bede:	8f 3f       	cpi	r24, 0xFF	; 255
    bee0:	91 05       	cpc	r25, r1
    bee2:	e9 f0       	breq	.+58     	; 0xbf1e <isr_adc_b+0x8e>
    bee4:	e0 f0       	brcs	.+56     	; 0xbf1e <isr_adc_b+0x8e>
    bee6:	80 91 9e 26 	lds	r24, 0x269E	; 0x80269e <g_adc_temp_sum>
    beea:	90 91 9f 26 	lds	r25, 0x269F	; 0x80269f <g_adc_temp_sum+0x1>
    beee:	a0 91 a0 26 	lds	r26, 0x26A0	; 0x8026a0 <g_adc_temp_sum+0x2>
    bef2:	b0 91 a1 26 	lds	r27, 0x26A1	; 0x8026a1 <g_adc_temp_sum+0x3>
    bef6:	80 93 a2 26 	sts	0x26A2, r24	; 0x8026a2 <g_adc_temp_cur>
    befa:	90 93 a3 26 	sts	0x26A3, r25	; 0x8026a3 <g_adc_temp_cur+0x1>
    befe:	a0 93 a4 26 	sts	0x26A4, r26	; 0x8026a4 <g_adc_temp_cur+0x2>
    bf02:	b0 93 a5 26 	sts	0x26A5, r27	; 0x8026a5 <g_adc_temp_cur+0x3>
    bf06:	10 92 9c 26 	sts	0x269C, r1	; 0x80269c <g_adc_temp_cnt>
    bf0a:	10 92 9d 26 	sts	0x269D, r1	; 0x80269d <g_adc_temp_cnt+0x1>
    bf0e:	10 92 9e 26 	sts	0x269E, r1	; 0x80269e <g_adc_temp_sum>
    bf12:	10 92 9f 26 	sts	0x269F, r1	; 0x80269f <g_adc_temp_sum+0x1>
    bf16:	10 92 a0 26 	sts	0x26A0, r1	; 0x8026a0 <g_adc_temp_sum+0x2>
    bf1a:	10 92 a1 26 	sts	0x26A1, r1	; 0x8026a1 <g_adc_temp_sum+0x3>
    bf1e:	1f 91       	pop	r17
    bf20:	0f 91       	pop	r16
    bf22:	08 95       	ret

0000bf24 <task_dac>:
    bf24:	2f 92       	push	r2
    bf26:	3f 92       	push	r3
    bf28:	4f 92       	push	r4
    bf2a:	5f 92       	push	r5
    bf2c:	6f 92       	push	r6
    bf2e:	7f 92       	push	r7
    bf30:	8f 92       	push	r8
    bf32:	9f 92       	push	r9
    bf34:	af 92       	push	r10
    bf36:	bf 92       	push	r11
    bf38:	cf 92       	push	r12
    bf3a:	df 92       	push	r13
    bf3c:	ef 92       	push	r14
    bf3e:	ff 92       	push	r15
    bf40:	0f 93       	push	r16
    bf42:	1f 93       	push	r17
    bf44:	cf 93       	push	r28
    bf46:	df 93       	push	r29
    bf48:	cd b7       	in	r28, 0x3d	; 61
    bf4a:	de b7       	in	r29, 0x3e	; 62
    bf4c:	2e 97       	sbiw	r28, 0x0e	; 14
    bf4e:	cd bf       	out	0x3d, r28	; 61
    bf50:	de bf       	out	0x3e, r29	; 62
    bf52:	8f b7       	in	r24, 0x3f	; 63
    bf54:	8a 83       	std	Y+2, r24	; 0x02
    bf56:	f8 94       	cli
    bf58:	8a 81       	ldd	r24, Y+2	; 0x02
    bf5a:	40 90 13 20 	lds	r4, 0x2013	; 0x802013 <dds0_freq_mHz>
    bf5e:	50 90 14 20 	lds	r5, 0x2014	; 0x802014 <dds0_freq_mHz+0x1>
    bf62:	60 90 15 20 	lds	r6, 0x2015	; 0x802015 <dds0_freq_mHz+0x2>
    bf66:	70 90 16 20 	lds	r7, 0x2016	; 0x802016 <dds0_freq_mHz+0x3>
    bf6a:	00 91 0f 20 	lds	r16, 0x200F	; 0x80200f <dds1_freq_mHz>
    bf6e:	10 91 10 20 	lds	r17, 0x2010	; 0x802010 <dds1_freq_mHz+0x1>
    bf72:	20 91 11 20 	lds	r18, 0x2011	; 0x802011 <dds1_freq_mHz+0x2>
    bf76:	30 91 12 20 	lds	r19, 0x2012	; 0x802012 <dds1_freq_mHz+0x3>
    bf7a:	0b 87       	std	Y+11, r16	; 0x0b
    bf7c:	1c 87       	std	Y+12, r17	; 0x0c
    bf7e:	2d 87       	std	Y+13, r18	; 0x0d
    bf80:	3e 87       	std	Y+14, r19	; 0x0e
    bf82:	8f bf       	out	0x3f, r24	; 63
    bf84:	80 91 c1 24 	lds	r24, 0x24C1	; 0x8024c1 <s_dds0_freq_mHz.8134>
    bf88:	90 91 c2 24 	lds	r25, 0x24C2	; 0x8024c2 <s_dds0_freq_mHz.8134+0x1>
    bf8c:	a0 91 c3 24 	lds	r26, 0x24C3	; 0x8024c3 <s_dds0_freq_mHz.8134+0x2>
    bf90:	b0 91 c4 24 	lds	r27, 0x24C4	; 0x8024c4 <s_dds0_freq_mHz.8134+0x3>
    bf94:	48 16       	cp	r4, r24
    bf96:	59 06       	cpc	r5, r25
    bf98:	6a 06       	cpc	r6, r26
    bf9a:	7b 06       	cpc	r7, r27
    bf9c:	71 f4       	brne	.+28     	; 0xbfba <task_dac+0x96>
    bf9e:	80 91 bd 24 	lds	r24, 0x24BD	; 0x8024bd <s_dds1_freq_mHz.8135>
    bfa2:	90 91 be 24 	lds	r25, 0x24BE	; 0x8024be <s_dds1_freq_mHz.8135+0x1>
    bfa6:	a0 91 bf 24 	lds	r26, 0x24BF	; 0x8024bf <s_dds1_freq_mHz.8135+0x2>
    bfaa:	b0 91 c0 24 	lds	r27, 0x24C0	; 0x8024c0 <s_dds1_freq_mHz.8135+0x3>
    bfae:	08 17       	cp	r16, r24
    bfb0:	19 07       	cpc	r17, r25
    bfb2:	2a 07       	cpc	r18, r26
    bfb4:	3b 07       	cpc	r19, r27
    bfb6:	09 f4       	brne	.+2      	; 0xbfba <task_dac+0x96>
    bfb8:	a1 c0       	rjmp	.+322    	; 0xc0fc <task_dac+0x1d8>
    bfba:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <dds0_freq_mHz>
    bfbe:	90 91 14 20 	lds	r25, 0x2014	; 0x802014 <dds0_freq_mHz+0x1>
    bfc2:	a0 91 15 20 	lds	r26, 0x2015	; 0x802015 <dds0_freq_mHz+0x2>
    bfc6:	b0 91 16 20 	lds	r27, 0x2016	; 0x802016 <dds0_freq_mHz+0x3>
    bfca:	8c 01       	movw	r16, r24
    bfcc:	9d 01       	movw	r18, r26
    bfce:	40 e0       	ldi	r20, 0x00	; 0
    bfd0:	50 e0       	ldi	r21, 0x00	; 0
    bfd2:	ba 01       	movw	r22, r20
    bfd4:	8b 83       	std	Y+3, r24	; 0x03
    bfd6:	1c 83       	std	Y+4, r17	; 0x04
    bfd8:	2d 83       	std	Y+5, r18	; 0x05
    bfda:	3e 83       	std	Y+6, r19	; 0x06
    bfdc:	4f 83       	std	Y+7, r20	; 0x07
    bfde:	58 87       	std	Y+8, r21	; 0x08
    bfe0:	69 87       	std	Y+9, r22	; 0x09
    bfe2:	7a 87       	std	Y+10, r23	; 0x0a
    bfe4:	aa 24       	eor	r10, r10
    bfe6:	aa 94       	dec	r10
    bfe8:	bb 24       	eor	r11, r11
    bfea:	ba 94       	dec	r11
    bfec:	cc 24       	eor	r12, r12
    bfee:	ca 94       	dec	r12
    bff0:	dd 24       	eor	r13, r13
    bff2:	da 94       	dec	r13
    bff4:	e1 2c       	mov	r14, r1
    bff6:	f1 2c       	mov	r15, r1
    bff8:	00 e0       	ldi	r16, 0x00	; 0
    bffa:	10 e0       	ldi	r17, 0x00	; 0
    bffc:	2b 81       	ldd	r18, Y+3	; 0x03
    bffe:	3c 81       	ldd	r19, Y+4	; 0x04
    c000:	4d 81       	ldd	r20, Y+5	; 0x05
    c002:	5e 81       	ldd	r21, Y+6	; 0x06
    c004:	60 e0       	ldi	r22, 0x00	; 0
    c006:	70 e0       	ldi	r23, 0x00	; 0
    c008:	80 e0       	ldi	r24, 0x00	; 0
    c00a:	90 e0       	ldi	r25, 0x00	; 0
    c00c:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    c010:	a1 2c       	mov	r10, r1
    c012:	0f 2e       	mov	r0, r31
    c014:	fc e6       	ldi	r31, 0x6C	; 108
    c016:	bf 2e       	mov	r11, r31
    c018:	f0 2d       	mov	r31, r0
    c01a:	0f 2e       	mov	r0, r31
    c01c:	fc ed       	ldi	r31, 0xDC	; 220
    c01e:	cf 2e       	mov	r12, r31
    c020:	f0 2d       	mov	r31, r0
    c022:	68 94       	set
    c024:	dd 24       	eor	r13, r13
    c026:	d1 f8       	bld	r13, 1
    c028:	0e 94 55 82 	call	0x104aa	; 0x104aa <__udivdi3>
    c02c:	92 2e       	mov	r9, r18
    c02e:	83 2e       	mov	r8, r19
    c030:	34 2e       	mov	r3, r20
    c032:	25 2e       	mov	r2, r21
    c034:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <dds1_freq_mHz>
    c038:	90 91 10 20 	lds	r25, 0x2010	; 0x802010 <dds1_freq_mHz+0x1>
    c03c:	a0 91 11 20 	lds	r26, 0x2011	; 0x802011 <dds1_freq_mHz+0x2>
    c040:	b0 91 12 20 	lds	r27, 0x2012	; 0x802012 <dds1_freq_mHz+0x3>
    c044:	8c 01       	movw	r16, r24
    c046:	9d 01       	movw	r18, r26
    c048:	40 e0       	ldi	r20, 0x00	; 0
    c04a:	50 e0       	ldi	r21, 0x00	; 0
    c04c:	ba 01       	movw	r22, r20
    c04e:	8b 83       	std	Y+3, r24	; 0x03
    c050:	1c 83       	std	Y+4, r17	; 0x04
    c052:	2d 83       	std	Y+5, r18	; 0x05
    c054:	3e 83       	std	Y+6, r19	; 0x06
    c056:	4f 83       	std	Y+7, r20	; 0x07
    c058:	58 87       	std	Y+8, r21	; 0x08
    c05a:	69 87       	std	Y+9, r22	; 0x09
    c05c:	7a 87       	std	Y+10, r23	; 0x0a
    c05e:	aa 24       	eor	r10, r10
    c060:	aa 94       	dec	r10
    c062:	bb 24       	eor	r11, r11
    c064:	ba 94       	dec	r11
    c066:	cc 24       	eor	r12, r12
    c068:	ca 94       	dec	r12
    c06a:	dd 24       	eor	r13, r13
    c06c:	da 94       	dec	r13
    c06e:	00 e0       	ldi	r16, 0x00	; 0
    c070:	10 e0       	ldi	r17, 0x00	; 0
    c072:	2b 81       	ldd	r18, Y+3	; 0x03
    c074:	3c 81       	ldd	r19, Y+4	; 0x04
    c076:	4d 81       	ldd	r20, Y+5	; 0x05
    c078:	5e 81       	ldd	r21, Y+6	; 0x06
    c07a:	60 e0       	ldi	r22, 0x00	; 0
    c07c:	70 e0       	ldi	r23, 0x00	; 0
    c07e:	80 e0       	ldi	r24, 0x00	; 0
    c080:	90 e0       	ldi	r25, 0x00	; 0
    c082:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__muldi3>
    c086:	a1 2c       	mov	r10, r1
    c088:	0f 2e       	mov	r0, r31
    c08a:	fc e6       	ldi	r31, 0x6C	; 108
    c08c:	bf 2e       	mov	r11, r31
    c08e:	f0 2d       	mov	r31, r0
    c090:	0f 2e       	mov	r0, r31
    c092:	fc ed       	ldi	r31, 0xDC	; 220
    c094:	cf 2e       	mov	r12, r31
    c096:	f0 2d       	mov	r31, r0
    c098:	68 94       	set
    c09a:	dd 24       	eor	r13, r13
    c09c:	d1 f8       	bld	r13, 1
    c09e:	0e 94 55 82 	call	0x104aa	; 0x104aa <__udivdi3>
    c0a2:	72 2f       	mov	r23, r18
    c0a4:	63 2f       	mov	r22, r19
    c0a6:	94 2f       	mov	r25, r20
    c0a8:	85 2f       	mov	r24, r21
    c0aa:	40 92 c1 24 	sts	0x24C1, r4	; 0x8024c1 <s_dds0_freq_mHz.8134>
    c0ae:	50 92 c2 24 	sts	0x24C2, r5	; 0x8024c2 <s_dds0_freq_mHz.8134+0x1>
    c0b2:	60 92 c3 24 	sts	0x24C3, r6	; 0x8024c3 <s_dds0_freq_mHz.8134+0x2>
    c0b6:	70 92 c4 24 	sts	0x24C4, r7	; 0x8024c4 <s_dds0_freq_mHz.8134+0x3>
    c0ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    c0bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    c0be:	4d 85       	ldd	r20, Y+13	; 0x0d
    c0c0:	5e 85       	ldd	r21, Y+14	; 0x0e
    c0c2:	20 93 bd 24 	sts	0x24BD, r18	; 0x8024bd <s_dds1_freq_mHz.8135>
    c0c6:	30 93 be 24 	sts	0x24BE, r19	; 0x8024be <s_dds1_freq_mHz.8135+0x1>
    c0ca:	40 93 bf 24 	sts	0x24BF, r20	; 0x8024bf <s_dds1_freq_mHz.8135+0x2>
    c0ce:	50 93 c0 24 	sts	0x24C0, r21	; 0x8024c0 <s_dds1_freq_mHz.8135+0x3>
    c0d2:	2f b7       	in	r18, 0x3f	; 63
    c0d4:	29 83       	std	Y+1, r18	; 0x01
    c0d6:	f8 94       	cli
    c0d8:	29 81       	ldd	r18, Y+1	; 0x01
    c0da:	90 92 0d 25 	sts	0x250D, r9	; 0x80250d <dds0_inc>
    c0de:	80 92 0e 25 	sts	0x250E, r8	; 0x80250e <dds0_inc+0x1>
    c0e2:	30 92 0f 25 	sts	0x250F, r3	; 0x80250f <dds0_inc+0x2>
    c0e6:	20 92 10 25 	sts	0x2510, r2	; 0x802510 <dds0_inc+0x3>
    c0ea:	70 93 05 25 	sts	0x2505, r23	; 0x802505 <dds1_inc>
    c0ee:	60 93 06 25 	sts	0x2506, r22	; 0x802506 <dds1_inc+0x1>
    c0f2:	90 93 07 25 	sts	0x2507, r25	; 0x802507 <dds1_inc+0x2>
    c0f6:	80 93 08 25 	sts	0x2508, r24	; 0x802508 <dds1_inc+0x3>
    c0fa:	2f bf       	out	0x3f, r18	; 63
    c0fc:	2e 96       	adiw	r28, 0x0e	; 14
    c0fe:	cd bf       	out	0x3d, r28	; 61
    c100:	de bf       	out	0x3e, r29	; 62
    c102:	df 91       	pop	r29
    c104:	cf 91       	pop	r28
    c106:	1f 91       	pop	r17
    c108:	0f 91       	pop	r16
    c10a:	ff 90       	pop	r15
    c10c:	ef 90       	pop	r14
    c10e:	df 90       	pop	r13
    c110:	cf 90       	pop	r12
    c112:	bf 90       	pop	r11
    c114:	af 90       	pop	r10
    c116:	9f 90       	pop	r9
    c118:	8f 90       	pop	r8
    c11a:	7f 90       	pop	r7
    c11c:	6f 90       	pop	r6
    c11e:	5f 90       	pop	r5
    c120:	4f 90       	pop	r4
    c122:	3f 90       	pop	r3
    c124:	2f 90       	pop	r2
    c126:	08 95       	ret

0000c128 <task_adc>:
    c128:	4f 92       	push	r4
    c12a:	5f 92       	push	r5
    c12c:	6f 92       	push	r6
    c12e:	7f 92       	push	r7
    c130:	8f 92       	push	r8
    c132:	9f 92       	push	r9
    c134:	af 92       	push	r10
    c136:	bf 92       	push	r11
    c138:	cf 92       	push	r12
    c13a:	df 92       	push	r13
    c13c:	ef 92       	push	r14
    c13e:	ff 92       	push	r15
    c140:	cf 93       	push	r28
    c142:	df 93       	push	r29
    c144:	cd b7       	in	r28, 0x3d	; 61
    c146:	de b7       	in	r29, 0x3e	; 62
    c148:	6a 97       	sbiw	r28, 0x1a	; 26
    c14a:	cd bf       	out	0x3d, r28	; 61
    c14c:	de bf       	out	0x3e, r29	; 62
    c14e:	c0 90 b1 24 	lds	r12, 0x24B1	; 0x8024b1 <adc_last.8145>
    c152:	d0 90 b2 24 	lds	r13, 0x24B2	; 0x8024b2 <adc_last.8145+0x1>
    c156:	e0 90 b3 24 	lds	r14, 0x24B3	; 0x8024b3 <adc_last.8145+0x2>
    c15a:	f0 90 b4 24 	lds	r15, 0x24B4	; 0x8024b4 <adc_last.8145+0x3>
    c15e:	4b 01       	movw	r8, r22
    c160:	5c 01       	movw	r10, r24
    c162:	8c 18       	sub	r8, r12
    c164:	9d 08       	sbc	r9, r13
    c166:	ae 08       	sbc	r10, r14
    c168:	bf 08       	sbc	r11, r15
    c16a:	81 14       	cp	r8, r1
    c16c:	22 e0       	ldi	r18, 0x02	; 2
    c16e:	92 06       	cpc	r9, r18
    c170:	a1 04       	cpc	r10, r1
    c172:	b1 04       	cpc	r11, r1
    c174:	30 f4       	brcc	.+12     	; 0xc182 <task_adc+0x5a>
    c176:	6c 15       	cp	r22, r12
    c178:	7d 05       	cpc	r23, r13
    c17a:	8e 05       	cpc	r24, r14
    c17c:	9f 05       	cpc	r25, r15
    c17e:	08 f0       	brcs	.+2      	; 0xc182 <task_adc+0x5a>
    c180:	1a c1       	rjmp	.+564    	; 0xc3b6 <task_adc+0x28e>
    c182:	dc 01       	movw	r26, r24
    c184:	cb 01       	movw	r24, r22
    c186:	80 93 b1 24 	sts	0x24B1, r24	; 0x8024b1 <adc_last.8145>
    c18a:	90 93 b2 24 	sts	0x24B2, r25	; 0x8024b2 <adc_last.8145+0x1>
    c18e:	a0 93 b3 24 	sts	0x24B3, r26	; 0x8024b3 <adc_last.8145+0x2>
    c192:	b0 93 b4 24 	sts	0x24B4, r27	; 0x8024b4 <adc_last.8145+0x3>
    c196:	8f b7       	in	r24, 0x3f	; 63
    c198:	89 83       	std	Y+1, r24	; 0x01
    c19a:	f8 94       	cli
    c19c:	69 81       	ldd	r22, Y+1	; 0x01
    c19e:	20 91 de 26 	lds	r18, 0x26DE	; 0x8026de <g_adc_vctcxo_cur>
    c1a2:	30 91 df 26 	lds	r19, 0x26DF	; 0x8026df <g_adc_vctcxo_cur+0x1>
    c1a6:	40 91 e0 26 	lds	r20, 0x26E0	; 0x8026e0 <g_adc_vctcxo_cur+0x2>
    c1aa:	50 91 e1 26 	lds	r21, 0x26E1	; 0x8026e1 <g_adc_vctcxo_cur+0x3>
    c1ae:	40 90 d4 26 	lds	r4, 0x26D4	; 0x8026d4 <g_adc_5v0_cur>
    c1b2:	50 90 d5 26 	lds	r5, 0x26D5	; 0x8026d5 <g_adc_5v0_cur+0x1>
    c1b6:	60 90 d6 26 	lds	r6, 0x26D6	; 0x8026d6 <g_adc_5v0_cur+0x2>
    c1ba:	70 90 d7 26 	lds	r7, 0x26D7	; 0x8026d7 <g_adc_5v0_cur+0x3>
    c1be:	80 90 ca 26 	lds	r8, 0x26CA	; 0x8026ca <g_adc_vbat_cur>
    c1c2:	90 90 cb 26 	lds	r9, 0x26CB	; 0x8026cb <g_adc_vbat_cur+0x1>
    c1c6:	a0 90 cc 26 	lds	r10, 0x26CC	; 0x8026cc <g_adc_vbat_cur+0x2>
    c1ca:	b0 90 cd 26 	lds	r11, 0x26CD	; 0x8026cd <g_adc_vbat_cur+0x3>
    c1ce:	c0 90 c0 26 	lds	r12, 0x26C0	; 0x8026c0 <g_adc_io_adc4_cur>
    c1d2:	d0 90 c1 26 	lds	r13, 0x26C1	; 0x8026c1 <g_adc_io_adc4_cur+0x1>
    c1d6:	e0 90 c2 26 	lds	r14, 0x26C2	; 0x8026c2 <g_adc_io_adc4_cur+0x2>
    c1da:	f0 90 c3 26 	lds	r15, 0x26C3	; 0x8026c3 <g_adc_io_adc4_cur+0x3>
    c1de:	80 91 b6 26 	lds	r24, 0x26B6	; 0x8026b6 <g_adc_io_adc5_cur>
    c1e2:	90 91 b7 26 	lds	r25, 0x26B7	; 0x8026b7 <g_adc_io_adc5_cur+0x1>
    c1e6:	a0 91 b8 26 	lds	r26, 0x26B8	; 0x8026b8 <g_adc_io_adc5_cur+0x2>
    c1ea:	b0 91 b9 26 	lds	r27, 0x26B9	; 0x8026b9 <g_adc_io_adc5_cur+0x3>
    c1ee:	8b 83       	std	Y+3, r24	; 0x03
    c1f0:	9c 83       	std	Y+4, r25	; 0x04
    c1f2:	ad 83       	std	Y+5, r26	; 0x05
    c1f4:	be 83       	std	Y+6, r27	; 0x06
    c1f6:	80 91 ac 26 	lds	r24, 0x26AC	; 0x8026ac <g_adc_silence_cur>
    c1fa:	90 91 ad 26 	lds	r25, 0x26AD	; 0x8026ad <g_adc_silence_cur+0x1>
    c1fe:	a0 91 ae 26 	lds	r26, 0x26AE	; 0x8026ae <g_adc_silence_cur+0x2>
    c202:	b0 91 af 26 	lds	r27, 0x26AF	; 0x8026af <g_adc_silence_cur+0x3>
    c206:	8f 83       	std	Y+7, r24	; 0x07
    c208:	98 87       	std	Y+8, r25	; 0x08
    c20a:	a9 87       	std	Y+9, r26	; 0x09
    c20c:	ba 87       	std	Y+10, r27	; 0x0a
    c20e:	80 91 a2 26 	lds	r24, 0x26A2	; 0x8026a2 <g_adc_temp_cur>
    c212:	90 91 a3 26 	lds	r25, 0x26A3	; 0x8026a3 <g_adc_temp_cur+0x1>
    c216:	a0 91 a4 26 	lds	r26, 0x26A4	; 0x8026a4 <g_adc_temp_cur+0x2>
    c21a:	b0 91 a5 26 	lds	r27, 0x26A5	; 0x8026a5 <g_adc_temp_cur+0x3>
    c21e:	8b 87       	std	Y+11, r24	; 0x0b
    c220:	9c 87       	std	Y+12, r25	; 0x0c
    c222:	ad 87       	std	Y+13, r26	; 0x0d
    c224:	be 87       	std	Y+14, r27	; 0x0e
    c226:	6f bf       	out	0x3f, r22	; 63
    c228:	a8 eb       	ldi	r26, 0xB8	; 184
    c22a:	bb e0       	ldi	r27, 0x0B	; 11
    c22c:	0e 94 cd 81 	call	0x1039a	; 0x1039a <__muluhisi3>
    c230:	05 2e       	mov	r0, r21
    c232:	54 e1       	ldi	r21, 0x14	; 20
    c234:	96 95       	lsr	r25
    c236:	87 95       	ror	r24
    c238:	77 95       	ror	r23
    c23a:	67 95       	ror	r22
    c23c:	5a 95       	dec	r21
    c23e:	d1 f7       	brne	.-12     	; 0xc234 <task_adc+0x10c>
    c240:	50 2d       	mov	r21, r0
    c242:	0e 94 68 7e 	call	0xfcd0	; 0xfcd0 <__floatunsisf>
    c246:	20 e0       	ldi	r18, 0x00	; 0
    c248:	30 e0       	ldi	r19, 0x00	; 0
    c24a:	4c e3       	ldi	r20, 0x3C	; 60
    c24c:	52 e4       	ldi	r21, 0x42	; 66
    c24e:	0e 94 63 7d 	call	0xfac6	; 0xfac6 <__subsf3>
    c252:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    c256:	6f 87       	std	Y+15, r22	; 0x0f
    c258:	78 8b       	std	Y+16, r23	; 0x10
    c25a:	89 8b       	std	Y+17, r24	; 0x11
    c25c:	9a 8b       	std	Y+18, r25	; 0x12
    c25e:	a8 eb       	ldi	r26, 0xB8	; 184
    c260:	bb e0       	ldi	r27, 0x0B	; 11
    c262:	a3 01       	movw	r20, r6
    c264:	92 01       	movw	r18, r4
    c266:	0e 94 cd 81 	call	0x1039a	; 0x1039a <__muluhisi3>
    c26a:	0e 94 68 7e 	call	0xfcd0	; 0xfcd0 <__floatunsisf>
    c26e:	29 ed       	ldi	r18, 0xD9	; 217
    c270:	38 ed       	ldi	r19, 0xD8	; 216
    c272:	4a e1       	ldi	r20, 0x1A	; 26
    c274:	50 e4       	ldi	r21, 0x40	; 64
    c276:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    c27a:	20 e0       	ldi	r18, 0x00	; 0
    c27c:	30 e0       	ldi	r19, 0x00	; 0
    c27e:	40 e8       	ldi	r20, 0x80	; 128
    c280:	55 e3       	ldi	r21, 0x35	; 53
    c282:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    c286:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    c28a:	6b 8b       	std	Y+19, r22	; 0x13
    c28c:	7c 8b       	std	Y+20, r23	; 0x14
    c28e:	8d 8b       	std	Y+21, r24	; 0x15
    c290:	9e 8b       	std	Y+22, r25	; 0x16
    c292:	a8 eb       	ldi	r26, 0xB8	; 184
    c294:	bb e0       	ldi	r27, 0x0B	; 11
    c296:	a5 01       	movw	r20, r10
    c298:	94 01       	movw	r18, r8
    c29a:	0e 94 cd 81 	call	0x1039a	; 0x1039a <__muluhisi3>
    c29e:	0e 94 68 7e 	call	0xfcd0	; 0xfcd0 <__floatunsisf>
    c2a2:	23 ee       	ldi	r18, 0xE3	; 227
    c2a4:	35 e4       	ldi	r19, 0x45	; 69
    c2a6:	4b e1       	ldi	r20, 0x1B	; 27
    c2a8:	50 e4       	ldi	r21, 0x40	; 64
    c2aa:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    c2ae:	20 e0       	ldi	r18, 0x00	; 0
    c2b0:	30 e0       	ldi	r19, 0x00	; 0
    c2b2:	40 e8       	ldi	r20, 0x80	; 128
    c2b4:	55 e3       	ldi	r21, 0x35	; 53
    c2b6:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    c2ba:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    c2be:	6f 8b       	std	Y+23, r22	; 0x17
    c2c0:	78 8f       	std	Y+24, r23	; 0x18
    c2c2:	89 8f       	std	Y+25, r24	; 0x19
    c2c4:	9a 8f       	std	Y+26, r25	; 0x1a
    c2c6:	a8 eb       	ldi	r26, 0xB8	; 184
    c2c8:	bb e0       	ldi	r27, 0x0B	; 11
    c2ca:	a7 01       	movw	r20, r14
    c2cc:	96 01       	movw	r18, r12
    c2ce:	0e 94 cd 81 	call	0x1039a	; 0x1039a <__muluhisi3>
    c2d2:	6b 01       	movw	r12, r22
    c2d4:	7c 01       	movw	r14, r24
    c2d6:	0b 2e       	mov	r0, r27
    c2d8:	b4 e1       	ldi	r27, 0x14	; 20
    c2da:	f6 94       	lsr	r15
    c2dc:	e7 94       	ror	r14
    c2de:	d7 94       	ror	r13
    c2e0:	c7 94       	ror	r12
    c2e2:	ba 95       	dec	r27
    c2e4:	d1 f7       	brne	.-12     	; 0xc2da <task_adc+0x1b2>
    c2e6:	b0 2d       	mov	r27, r0
    c2e8:	2b 81       	ldd	r18, Y+3	; 0x03
    c2ea:	3c 81       	ldd	r19, Y+4	; 0x04
    c2ec:	4d 81       	ldd	r20, Y+5	; 0x05
    c2ee:	5e 81       	ldd	r21, Y+6	; 0x06
    c2f0:	0e 94 cd 81 	call	0x1039a	; 0x1039a <__muluhisi3>
    c2f4:	2b 01       	movw	r4, r22
    c2f6:	3c 01       	movw	r6, r24
    c2f8:	03 2e       	mov	r0, r19
    c2fa:	34 e1       	ldi	r19, 0x14	; 20
    c2fc:	76 94       	lsr	r7
    c2fe:	67 94       	ror	r6
    c300:	57 94       	ror	r5
    c302:	47 94       	ror	r4
    c304:	3a 95       	dec	r19
    c306:	d1 f7       	brne	.-12     	; 0xc2fc <task_adc+0x1d4>
    c308:	30 2d       	mov	r19, r0
    c30a:	2f 81       	ldd	r18, Y+7	; 0x07
    c30c:	38 85       	ldd	r19, Y+8	; 0x08
    c30e:	49 85       	ldd	r20, Y+9	; 0x09
    c310:	5a 85       	ldd	r21, Y+10	; 0x0a
    c312:	0e 94 cd 81 	call	0x1039a	; 0x1039a <__muluhisi3>
    c316:	4b 01       	movw	r8, r22
    c318:	5c 01       	movw	r10, r24
    c31a:	07 2e       	mov	r0, r23
    c31c:	74 e1       	ldi	r23, 0x14	; 20
    c31e:	b6 94       	lsr	r11
    c320:	a7 94       	ror	r10
    c322:	97 94       	ror	r9
    c324:	87 94       	ror	r8
    c326:	7a 95       	dec	r23
    c328:	d1 f7       	brne	.-12     	; 0xc31e <task_adc+0x1f6>
    c32a:	70 2d       	mov	r23, r0
    c32c:	a4 e6       	ldi	r26, 0x64	; 100
    c32e:	b0 e0       	ldi	r27, 0x00	; 0
    c330:	2b 85       	ldd	r18, Y+11	; 0x0b
    c332:	3c 85       	ldd	r19, Y+12	; 0x0c
    c334:	4d 85       	ldd	r20, Y+13	; 0x0d
    c336:	5e 85       	ldd	r21, Y+14	; 0x0e
    c338:	0e 94 cd 81 	call	0x1039a	; 0x1039a <__muluhisi3>
    c33c:	0e 94 68 7e 	call	0xfcd0	; 0xfcd0 <__floatunsisf>
    c340:	2d ec       	ldi	r18, 0xCD	; 205
    c342:	3c e4       	ldi	r19, 0x4C	; 76
    c344:	4d e1       	ldi	r20, 0x1D	; 29
    c346:	54 e4       	ldi	r21, 0x44	; 68
    c348:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    c34c:	20 e0       	ldi	r18, 0x00	; 0
    c34e:	30 e0       	ldi	r19, 0x00	; 0
    c350:	40 e8       	ldi	r20, 0x80	; 128
    c352:	55 e3       	ldi	r21, 0x35	; 53
    c354:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    c358:	20 e0       	ldi	r18, 0x00	; 0
    c35a:	36 e6       	ldi	r19, 0x66	; 102
    c35c:	45 ed       	ldi	r20, 0xD5	; 213
    c35e:	56 e4       	ldi	r21, 0x46	; 70
    c360:	0e 94 63 7d 	call	0xfac6	; 0xfac6 <__subsf3>
    c364:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    c368:	2f b7       	in	r18, 0x3f	; 63
    c36a:	2a 83       	std	Y+2, r18	; 0x02
    c36c:	f8 94       	cli
    c36e:	2a 81       	ldd	r18, Y+2	; 0x02
    c370:	af 85       	ldd	r26, Y+15	; 0x0f
    c372:	b8 89       	ldd	r27, Y+16	; 0x10
    c374:	a0 93 9a 26 	sts	0x269A, r26	; 0x80269a <g_adc_vctcxo_volt_1000>
    c378:	b0 93 9b 26 	sts	0x269B, r27	; 0x80269b <g_adc_vctcxo_volt_1000+0x1>
    c37c:	4b 89       	ldd	r20, Y+19	; 0x13
    c37e:	5c 89       	ldd	r21, Y+20	; 0x14
    c380:	40 93 98 26 	sts	0x2698, r20	; 0x802698 <g_adc_5v0_volt_1000>
    c384:	50 93 99 26 	sts	0x2699, r21	; 0x802699 <g_adc_5v0_volt_1000+0x1>
    c388:	af 89       	ldd	r26, Y+23	; 0x17
    c38a:	b8 8d       	ldd	r27, Y+24	; 0x18
    c38c:	a0 93 96 26 	sts	0x2696, r26	; 0x802696 <g_adc_vbat_volt_1000>
    c390:	b0 93 97 26 	sts	0x2697, r27	; 0x802697 <g_adc_vbat_volt_1000+0x1>
    c394:	c0 92 94 26 	sts	0x2694, r12	; 0x802694 <g_adc_io_adc4_volt_1000>
    c398:	d0 92 95 26 	sts	0x2695, r13	; 0x802695 <g_adc_io_adc4_volt_1000+0x1>
    c39c:	40 92 92 26 	sts	0x2692, r4	; 0x802692 <g_adc_io_adc5_volt_1000>
    c3a0:	50 92 93 26 	sts	0x2693, r5	; 0x802693 <g_adc_io_adc5_volt_1000+0x1>
    c3a4:	80 92 90 26 	sts	0x2690, r8	; 0x802690 <g_adc_silence_volt_1000>
    c3a8:	90 92 91 26 	sts	0x2691, r9	; 0x802691 <g_adc_silence_volt_1000+0x1>
    c3ac:	60 93 8e 26 	sts	0x268E, r22	; 0x80268e <g_adc_temp_deg_100>
    c3b0:	70 93 8f 26 	sts	0x268F, r23	; 0x80268f <g_adc_temp_deg_100+0x1>
    c3b4:	2f bf       	out	0x3f, r18	; 63
    c3b6:	6a 96       	adiw	r28, 0x1a	; 26
    c3b8:	cd bf       	out	0x3d, r28	; 61
    c3ba:	de bf       	out	0x3e, r29	; 62
    c3bc:	df 91       	pop	r29
    c3be:	cf 91       	pop	r28
    c3c0:	ff 90       	pop	r15
    c3c2:	ef 90       	pop	r14
    c3c4:	df 90       	pop	r13
    c3c6:	cf 90       	pop	r12
    c3c8:	bf 90       	pop	r11
    c3ca:	af 90       	pop	r10
    c3cc:	9f 90       	pop	r9
    c3ce:	8f 90       	pop	r8
    c3d0:	7f 90       	pop	r7
    c3d2:	6f 90       	pop	r6
    c3d4:	5f 90       	pop	r5
    c3d6:	4f 90       	pop	r4
    c3d8:	08 95       	ret

0000c3da <tc_init>:
    c3da:	cf 92       	push	r12
    c3dc:	df 92       	push	r13
    c3de:	ef 92       	push	r14
    c3e0:	ff 92       	push	r15
    c3e2:	0f 93       	push	r16
    c3e4:	1f 93       	push	r17
    c3e6:	cf 93       	push	r28
    c3e8:	df 93       	push	r29
    c3ea:	1f 92       	push	r1
    c3ec:	cd b7       	in	r28, 0x3d	; 61
    c3ee:	de b7       	in	r29, 0x3e	; 62
    c3f0:	8f b7       	in	r24, 0x3f	; 63
    c3f2:	89 83       	std	Y+1, r24	; 0x01
    c3f4:	f8 94       	cli
    c3f6:	89 81       	ldd	r24, Y+1	; 0x01
    c3f8:	c0 90 04 27 	lds	r12, 0x2704	; 0x802704 <g_xo_mode_pwm>
    c3fc:	d0 90 05 27 	lds	r13, 0x2705	; 0x802705 <g_xo_mode_pwm+0x1>
    c400:	e0 90 06 27 	lds	r14, 0x2706	; 0x802706 <g_xo_mode_pwm+0x2>
    c404:	f0 90 07 27 	lds	r15, 0x2707	; 0x802707 <g_xo_mode_pwm+0x3>
    c408:	8f bf       	out	0x3f, r24	; 63
    c40a:	20 e0       	ldi	r18, 0x00	; 0
    c40c:	38 e0       	ldi	r19, 0x08	; 8
    c40e:	43 e0       	ldi	r20, 0x03	; 3
    c410:	60 e0       	ldi	r22, 0x00	; 0
    c412:	87 e8       	ldi	r24, 0x87	; 135
    c414:	96 e2       	ldi	r25, 0x26	; 38
    c416:	54 da       	rcall	.-2904   	; 0xb8c0 <pwm_init>
    c418:	6d e2       	ldi	r22, 0x2D	; 45
    c41a:	87 e8       	ldi	r24, 0x87	; 135
    c41c:	96 e2       	ldi	r25, 0x26	; 38
    c41e:	18 db       	rcall	.-2512   	; 0xba50 <pwm_start>
    c420:	c0 92 3c 08 	sts	0x083C, r12	; 0x80083c <__TEXT_REGION_LENGTH__+0x70083c>
    c424:	d0 92 3d 08 	sts	0x083D, r13	; 0x80083d <__TEXT_REGION_LENGTH__+0x70083d>
    c428:	0f 2e       	mov	r0, r31
    c42a:	f0 e8       	ldi	r31, 0x80	; 128
    c42c:	ef 2e       	mov	r14, r31
    c42e:	f6 e2       	ldi	r31, 0x26	; 38
    c430:	ff 2e       	mov	r15, r31
    c432:	f0 2d       	mov	r31, r0
    c434:	00 e4       	ldi	r16, 0x40	; 64
    c436:	18 e0       	ldi	r17, 0x08	; 8
    c438:	f7 01       	movw	r30, r14
    c43a:	00 83       	st	Z, r16
    c43c:	11 83       	std	Z+1, r17	; 0x01
    c43e:	80 e4       	ldi	r24, 0x40	; 64
    c440:	98 e0       	ldi	r25, 0x08	; 8
    c442:	0e 94 da 51 	call	0xa3b4	; 0xa3b4 <tc_enable>
    c446:	f8 01       	movw	r30, r16
    c448:	81 81       	ldd	r24, Z+1	; 0x01
    c44a:	88 7f       	andi	r24, 0xF8	; 248
    c44c:	81 83       	std	Z+1, r24	; 0x01
    c44e:	80 81       	ld	r24, Z
    c450:	80 7f       	andi	r24, 0xF0	; 240
    c452:	80 83       	st	Z, r24
    c454:	68 ee       	ldi	r22, 0xE8	; 232
    c456:	73 e0       	ldi	r23, 0x03	; 3
    c458:	c7 01       	movw	r24, r14
    c45a:	c6 d9       	rcall	.-3188   	; 0xb7e8 <pwm_set_frequency>
    c45c:	f7 01       	movw	r30, r14
    c45e:	85 81       	ldd	r24, Z+5	; 0x05
    c460:	96 81       	ldd	r25, Z+6	; 0x06
    c462:	f8 01       	movw	r30, r16
    c464:	86 a3       	std	Z+38, r24	; 0x26
    c466:	97 a3       	std	Z+39, r25	; 0x27
    c468:	8f e2       	ldi	r24, 0x2F	; 47
    c46a:	95 e7       	ldi	r25, 0x75	; 117
    c46c:	86 ab       	std	Z+54, r24	; 0x36
    c46e:	97 ab       	std	Z+55, r25	; 0x37
    c470:	80 e4       	ldi	r24, 0x40	; 64
    c472:	9a e0       	ldi	r25, 0x0A	; 10
    c474:	0e 94 da 51 	call	0xa3b4	; 0xa3b4 <tc_enable>
    c478:	e0 e4       	ldi	r30, 0x40	; 64
    c47a:	fa e0       	ldi	r31, 0x0A	; 10
    c47c:	81 81       	ldd	r24, Z+1	; 0x01
    c47e:	88 7f       	andi	r24, 0xF8	; 248
    c480:	81 83       	std	Z+1, r24	; 0x01
    c482:	80 e7       	ldi	r24, 0x70	; 112
    c484:	92 e0       	ldi	r25, 0x02	; 2
    c486:	86 a3       	std	Z+38, r24	; 0x26
    c488:	97 a3       	std	Z+39, r25	; 0x27
    c48a:	0f 90       	pop	r0
    c48c:	df 91       	pop	r29
    c48e:	cf 91       	pop	r28
    c490:	1f 91       	pop	r17
    c492:	0f 91       	pop	r16
    c494:	ff 90       	pop	r15
    c496:	ef 90       	pop	r14
    c498:	df 90       	pop	r13
    c49a:	cf 90       	pop	r12
    c49c:	08 95       	ret

0000c49e <tc_start>:
    c49e:	cf 93       	push	r28
    c4a0:	df 93       	push	r29
    c4a2:	c0 e0       	ldi	r28, 0x00	; 0
    c4a4:	d8 e0       	ldi	r29, 0x08	; 8
    c4a6:	88 81       	ld	r24, Y
    c4a8:	80 7f       	andi	r24, 0xF0	; 240
    c4aa:	81 60       	ori	r24, 0x01	; 1
    c4ac:	88 83       	st	Y, r24
    c4ae:	6e e2       	ldi	r22, 0x2E	; 46
    c4b0:	7b e6       	ldi	r23, 0x6B	; 107
    c4b2:	80 e0       	ldi	r24, 0x00	; 0
    c4b4:	98 e0       	ldi	r25, 0x08	; 8
    c4b6:	0e 94 59 52 	call	0xa4b2	; 0xa4b2 <tc_set_overflow_interrupt_callback>
    c4ba:	8e 81       	ldd	r24, Y+6	; 0x06
    c4bc:	8c 7f       	andi	r24, 0xFC	; 252
    c4be:	8e 83       	std	Y+6, r24	; 0x06
    c4c0:	8e 81       	ldd	r24, Y+6	; 0x06
    c4c2:	81 60       	ori	r24, 0x01	; 1
    c4c4:	8e 83       	std	Y+6, r24	; 0x06
    c4c6:	c0 e4       	ldi	r28, 0x40	; 64
    c4c8:	d8 e0       	ldi	r29, 0x08	; 8
    c4ca:	88 81       	ld	r24, Y
    c4cc:	80 7f       	andi	r24, 0xF0	; 240
    c4ce:	81 60       	ori	r24, 0x01	; 1
    c4d0:	88 83       	st	Y, r24
    c4d2:	6d e7       	ldi	r22, 0x7D	; 125
    c4d4:	7d e5       	ldi	r23, 0x5D	; 93
    c4d6:	80 e4       	ldi	r24, 0x40	; 64
    c4d8:	98 e0       	ldi	r25, 0x08	; 8
    c4da:	0e 94 59 52 	call	0xa4b2	; 0xa4b2 <tc_set_overflow_interrupt_callback>
    c4de:	8e 81       	ldd	r24, Y+6	; 0x06
    c4e0:	8c 7f       	andi	r24, 0xFC	; 252
    c4e2:	8e 83       	std	Y+6, r24	; 0x06
    c4e4:	8e 81       	ldd	r24, Y+6	; 0x06
    c4e6:	83 60       	ori	r24, 0x03	; 3
    c4e8:	8e 83       	std	Y+6, r24	; 0x06
    c4ea:	e0 e4       	ldi	r30, 0x40	; 64
    c4ec:	fa e0       	ldi	r31, 0x0A	; 10
    c4ee:	80 81       	ld	r24, Z
    c4f0:	80 7f       	andi	r24, 0xF0	; 240
    c4f2:	81 60       	ori	r24, 0x01	; 1
    c4f4:	80 83       	st	Z, r24
    c4f6:	df 91       	pop	r29
    c4f8:	cf 91       	pop	r28
    c4fa:	08 95       	ret

0000c4fc <dac_init>:
    c4fc:	cf 93       	push	r28
    c4fe:	df 93       	push	r29
    c500:	67 e2       	ldi	r22, 0x27	; 39
    c502:	75 e2       	ldi	r23, 0x25	; 37
    c504:	80 e2       	ldi	r24, 0x20	; 32
    c506:	93 e0       	ldi	r25, 0x03	; 3
    c508:	0e 94 57 4b 	call	0x96ae	; 0x96ae <dac_read_configuration>
    c50c:	e7 e2       	ldi	r30, 0x27	; 39
    c50e:	f5 e2       	ldi	r31, 0x25	; 37
    c510:	81 e0       	ldi	r24, 0x01	; 1
    c512:	82 83       	std	Z+2, r24	; 0x02
    c514:	8c e0       	ldi	r24, 0x0C	; 12
    c516:	80 83       	st	Z, r24
    c518:	81 81       	ldd	r24, Z+1	; 0x01
    c51a:	8c 79       	andi	r24, 0x9C	; 156
    c51c:	83 64       	ori	r24, 0x43	; 67
    c51e:	81 83       	std	Z+1, r24	; 0x01
    c520:	84 e0       	ldi	r24, 0x04	; 4
    c522:	83 83       	std	Z+3, r24	; 0x03
    c524:	bf 01       	movw	r22, r30
    c526:	80 e2       	ldi	r24, 0x20	; 32
    c528:	93 e0       	ldi	r25, 0x03	; 3
    c52a:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <dac_write_configuration>
    c52e:	62 e3       	ldi	r22, 0x32	; 50
    c530:	70 e0       	ldi	r23, 0x00	; 0
    c532:	82 e0       	ldi	r24, 0x02	; 2
    c534:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    c538:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    c53c:	63 e3       	ldi	r22, 0x33	; 51
    c53e:	70 e0       	ldi	r23, 0x00	; 0
    c540:	82 e0       	ldi	r24, 0x02	; 2
    c542:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    c546:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    c54a:	66 e3       	ldi	r22, 0x36	; 54
    c54c:	70 e0       	ldi	r23, 0x00	; 0
    c54e:	82 e0       	ldi	r24, 0x02	; 2
    c550:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    c554:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    c558:	67 e3       	ldi	r22, 0x37	; 55
    c55a:	70 e0       	ldi	r23, 0x00	; 0
    c55c:	82 e0       	ldi	r24, 0x02	; 2
    c55e:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    c562:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
    c566:	ac e1       	ldi	r26, 0x1C	; 28
    c568:	b5 e2       	ldi	r27, 0x25	; 37
    c56a:	8b e0       	ldi	r24, 0x0B	; 11
    c56c:	ed 01       	movw	r28, r26
    c56e:	e8 2f       	mov	r30, r24
    c570:	19 92       	st	Y+, r1
    c572:	ea 95       	dec	r30
    c574:	e9 f7       	brne	.-6      	; 0xc570 <dac_init+0x74>
    c576:	e1 e1       	ldi	r30, 0x11	; 17
    c578:	f5 e2       	ldi	r31, 0x25	; 37
    c57a:	ef 01       	movw	r28, r30
    c57c:	19 92       	st	Y+, r1
    c57e:	8a 95       	dec	r24
    c580:	e9 f7       	brne	.-6      	; 0xc57c <dac_init+0x80>
    c582:	80 e2       	ldi	r24, 0x20	; 32
    c584:	90 e0       	ldi	r25, 0x00	; 0
    c586:	14 96       	adiw	r26, 0x04	; 4
    c588:	8d 93       	st	X+, r24
    c58a:	9c 93       	st	X, r25
    c58c:	15 97       	sbiw	r26, 0x05	; 5
    c58e:	84 83       	std	Z+4, r24	; 0x04
    c590:	95 83       	std	Z+5, r25	; 0x05
    c592:	85 ec       	ldi	r24, 0xC5	; 197
    c594:	94 e2       	ldi	r25, 0x24	; 36
    c596:	17 96       	adiw	r26, 0x07	; 7
    c598:	8d 93       	st	X+, r24
    c59a:	9c 93       	st	X, r25
    c59c:	18 97       	sbiw	r26, 0x08	; 8
    c59e:	29 ed       	ldi	r18, 0xD9	; 217
    c5a0:	12 96       	adiw	r26, 0x02	; 2
    c5a2:	2c 93       	st	X, r18
    c5a4:	12 97       	sbiw	r26, 0x02	; 2
    c5a6:	88 e3       	ldi	r24, 0x38	; 56
    c5a8:	93 e0       	ldi	r25, 0x03	; 3
    c5aa:	19 96       	adiw	r26, 0x09	; 9
    c5ac:	8d 93       	st	X+, r24
    c5ae:	9c 93       	st	X, r25
    c5b0:	1a 97       	sbiw	r26, 0x0a	; 10
    c5b2:	45 ee       	ldi	r20, 0xE5	; 229
    c5b4:	54 e2       	ldi	r21, 0x24	; 36
    c5b6:	47 83       	std	Z+7, r20	; 0x07
    c5b8:	50 87       	std	Z+8, r21	; 0x08
    c5ba:	22 83       	std	Z+2, r18	; 0x02
    c5bc:	81 87       	std	Z+9, r24	; 0x09
    c5be:	92 87       	std	Z+10, r25	; 0x0a
    c5c0:	95 e2       	ldi	r25, 0x25	; 37
    c5c2:	13 96       	adiw	r26, 0x03	; 3
    c5c4:	9c 93       	st	X, r25
    c5c6:	13 97       	sbiw	r26, 0x03	; 3
    c5c8:	86 e0       	ldi	r24, 0x06	; 6
    c5ca:	8c 93       	st	X, r24
    c5cc:	93 83       	std	Z+3, r25	; 0x03
    c5ce:	80 83       	st	Z, r24
    c5d0:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <rtc_get_time>
    c5d4:	a7 dc       	rcall	.-1714   	; 0xbf24 <task_dac>
    c5d6:	df 91       	pop	r29
    c5d8:	cf 91       	pop	r28
    c5da:	08 95       	ret

0000c5dc <calc_next_frame>:
    c5dc:	8f 92       	push	r8
    c5de:	9f 92       	push	r9
    c5e0:	af 92       	push	r10
    c5e2:	bf 92       	push	r11
    c5e4:	cf 92       	push	r12
    c5e6:	df 92       	push	r13
    c5e8:	ef 92       	push	r14
    c5ea:	ff 92       	push	r15
    c5ec:	0f 93       	push	r16
    c5ee:	1f 93       	push	r17
    c5f0:	cf 93       	push	r28
    c5f2:	df 93       	push	r29
    c5f4:	6b 01       	movw	r12, r22
    c5f6:	5a 01       	movw	r10, r20
    c5f8:	79 01       	movw	r14, r18
    c5fa:	48 01       	movw	r8, r16
    c5fc:	ec 01       	movw	r28, r24
    c5fe:	8c 01       	movw	r16, r24
    c600:	00 5e       	subi	r16, 0xE0	; 224
    c602:	1f 4f       	sbci	r17, 0xFF	; 255
    c604:	f6 01       	movw	r30, r12
    c606:	82 81       	ldd	r24, Z+2	; 0x02
    c608:	93 81       	ldd	r25, Z+3	; 0x03
    c60a:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <get_interpolated_sine>
    c60e:	88 83       	st	Y, r24
    c610:	99 83       	std	Y+1, r25	; 0x01
    c612:	f7 01       	movw	r30, r14
    c614:	82 81       	ldd	r24, Z+2	; 0x02
    c616:	93 81       	ldd	r25, Z+3	; 0x03
    c618:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <get_interpolated_sine>
    c61c:	8a 83       	std	Y+2, r24	; 0x02
    c61e:	9b 83       	std	Y+3, r25	; 0x03
    c620:	f6 01       	movw	r30, r12
    c622:	40 81       	ld	r20, Z
    c624:	51 81       	ldd	r21, Z+1	; 0x01
    c626:	62 81       	ldd	r22, Z+2	; 0x02
    c628:	73 81       	ldd	r23, Z+3	; 0x03
    c62a:	f5 01       	movw	r30, r10
    c62c:	80 81       	ld	r24, Z
    c62e:	91 81       	ldd	r25, Z+1	; 0x01
    c630:	a2 81       	ldd	r26, Z+2	; 0x02
    c632:	b3 81       	ldd	r27, Z+3	; 0x03
    c634:	84 0f       	add	r24, r20
    c636:	95 1f       	adc	r25, r21
    c638:	a6 1f       	adc	r26, r22
    c63a:	b7 1f       	adc	r27, r23
    c63c:	f6 01       	movw	r30, r12
    c63e:	80 83       	st	Z, r24
    c640:	91 83       	std	Z+1, r25	; 0x01
    c642:	a2 83       	std	Z+2, r26	; 0x02
    c644:	b3 83       	std	Z+3, r27	; 0x03
    c646:	f7 01       	movw	r30, r14
    c648:	40 81       	ld	r20, Z
    c64a:	51 81       	ldd	r21, Z+1	; 0x01
    c64c:	62 81       	ldd	r22, Z+2	; 0x02
    c64e:	73 81       	ldd	r23, Z+3	; 0x03
    c650:	f4 01       	movw	r30, r8
    c652:	80 81       	ld	r24, Z
    c654:	91 81       	ldd	r25, Z+1	; 0x01
    c656:	a2 81       	ldd	r26, Z+2	; 0x02
    c658:	b3 81       	ldd	r27, Z+3	; 0x03
    c65a:	84 0f       	add	r24, r20
    c65c:	95 1f       	adc	r25, r21
    c65e:	a6 1f       	adc	r26, r22
    c660:	b7 1f       	adc	r27, r23
    c662:	f7 01       	movw	r30, r14
    c664:	80 83       	st	Z, r24
    c666:	91 83       	std	Z+1, r25	; 0x01
    c668:	a2 83       	std	Z+2, r26	; 0x02
    c66a:	b3 83       	std	Z+3, r27	; 0x03
    c66c:	24 96       	adiw	r28, 0x04	; 4
    c66e:	c0 17       	cp	r28, r16
    c670:	d1 07       	cpc	r29, r17
    c672:	41 f6       	brne	.-112    	; 0xc604 <calc_next_frame+0x28>
    c674:	df 91       	pop	r29
    c676:	cf 91       	pop	r28
    c678:	1f 91       	pop	r17
    c67a:	0f 91       	pop	r16
    c67c:	ff 90       	pop	r15
    c67e:	ef 90       	pop	r14
    c680:	df 90       	pop	r13
    c682:	cf 90       	pop	r12
    c684:	bf 90       	pop	r11
    c686:	af 90       	pop	r10
    c688:	9f 90       	pop	r9
    c68a:	8f 90       	pop	r8
    c68c:	08 95       	ret

0000c68e <dac_start>:
    c68e:	ff 92       	push	r15
    c690:	0f 93       	push	r16
    c692:	1f 93       	push	r17
    c694:	cf 93       	push	r28
    c696:	df 93       	push	r29
    c698:	00 d0       	rcall	.+0      	; 0xc69a <dac_start+0xc>
    c69a:	1f 92       	push	r1
    c69c:	cd b7       	in	r28, 0x3d	; 61
    c69e:	de b7       	in	r29, 0x3e	; 62
    c6a0:	80 e2       	ldi	r24, 0x20	; 32
    c6a2:	93 e0       	ldi	r25, 0x03	; 3
    c6a4:	0e 94 a9 4a 	call	0x9552	; 0x9552 <dac_enable>
    c6a8:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <dma_enable>
    c6ac:	69 ed       	ldi	r22, 0xD9	; 217
    c6ae:	73 e6       	ldi	r23, 0x63	; 99
    c6b0:	80 e0       	ldi	r24, 0x00	; 0
    c6b2:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <dma_set_callback>
    c6b6:	ec e1       	ldi	r30, 0x1C	; 28
    c6b8:	f5 e2       	ldi	r31, 0x25	; 37
    c6ba:	81 81       	ldd	r24, Z+1	; 0x01
    c6bc:	80 7f       	andi	r24, 0xF0	; 240
    c6be:	8a 60       	ori	r24, 0x0A	; 10
    c6c0:	81 83       	std	Z+1, r24	; 0x01
    c6c2:	66 eb       	ldi	r22, 0xB6	; 182
    c6c4:	73 e6       	ldi	r23, 0x63	; 99
    c6c6:	81 e0       	ldi	r24, 0x01	; 1
    c6c8:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <dma_set_callback>
    c6cc:	e1 e1       	ldi	r30, 0x11	; 17
    c6ce:	f5 e2       	ldi	r31, 0x25	; 37
    c6d0:	81 81       	ldd	r24, Z+1	; 0x01
    c6d2:	80 7f       	andi	r24, 0xF0	; 240
    c6d4:	8a 60       	ori	r24, 0x0A	; 10
    c6d6:	81 83       	std	Z+1, r24	; 0x01
    c6d8:	8f b7       	in	r24, 0x3f	; 63
    c6da:	8a 83       	std	Y+2, r24	; 0x02
    c6dc:	f8 94       	cli
    c6de:	9a 81       	ldd	r25, Y+2	; 0x02
    c6e0:	e0 e0       	ldi	r30, 0x00	; 0
    c6e2:	f1 e0       	ldi	r31, 0x01	; 1
    c6e4:	80 81       	ld	r24, Z
    c6e6:	8c 7f       	andi	r24, 0xFC	; 252
    c6e8:	82 60       	ori	r24, 0x02	; 2
    c6ea:	80 83       	st	Z, r24
    c6ec:	9f bf       	out	0x3f, r25	; 63
    c6ee:	8f b7       	in	r24, 0x3f	; 63
    c6f0:	89 83       	std	Y+1, r24	; 0x01
    c6f2:	f8 94       	cli
    c6f4:	99 81       	ldd	r25, Y+1	; 0x01
    c6f6:	80 81       	ld	r24, Z
    c6f8:	83 7f       	andi	r24, 0xF3	; 243
    c6fa:	84 60       	ori	r24, 0x04	; 4
    c6fc:	80 83       	st	Z, r24
    c6fe:	9f bf       	out	0x3f, r25	; 63
    c700:	6c e1       	ldi	r22, 0x1C	; 28
    c702:	75 e2       	ldi	r23, 0x25	; 37
    c704:	80 e0       	ldi	r24, 0x00	; 0
    c706:	0e 94 03 27 	call	0x4e06	; 0x4e06 <dma_channel_write_config>
    c70a:	61 e1       	ldi	r22, 0x11	; 17
    c70c:	75 e2       	ldi	r23, 0x25	; 37
    c70e:	81 e0       	ldi	r24, 0x01	; 1
    c710:	0e 94 03 27 	call	0x4e06	; 0x4e06 <dma_channel_write_config>
    c714:	8f b7       	in	r24, 0x3f	; 63
    c716:	8b 83       	std	Y+3, r24	; 0x03
    c718:	f8 94       	cli
    c71a:	fb 80       	ldd	r15, Y+3	; 0x03
    c71c:	05 e0       	ldi	r16, 0x05	; 5
    c71e:	15 e2       	ldi	r17, 0x25	; 37
    c720:	2b e0       	ldi	r18, 0x0B	; 11
    c722:	30 e2       	ldi	r19, 0x20	; 32
    c724:	4d e0       	ldi	r20, 0x0D	; 13
    c726:	55 e2       	ldi	r21, 0x25	; 37
    c728:	69 e0       	ldi	r22, 0x09	; 9
    c72a:	75 e2       	ldi	r23, 0x25	; 37
    c72c:	85 ec       	ldi	r24, 0xC5	; 197
    c72e:	94 e2       	ldi	r25, 0x24	; 36
    c730:	55 df       	rcall	.-342    	; 0xc5dc <calc_next_frame>
    c732:	2b e0       	ldi	r18, 0x0B	; 11
    c734:	30 e2       	ldi	r19, 0x20	; 32
    c736:	4d e0       	ldi	r20, 0x0D	; 13
    c738:	55 e2       	ldi	r21, 0x25	; 37
    c73a:	69 e0       	ldi	r22, 0x09	; 9
    c73c:	75 e2       	ldi	r23, 0x25	; 37
    c73e:	85 ee       	ldi	r24, 0xE5	; 229
    c740:	94 e2       	ldi	r25, 0x24	; 36
    c742:	4c df       	rcall	.-360    	; 0xc5dc <calc_next_frame>
    c744:	8f b7       	in	r24, 0x3f	; 63
    c746:	8c 83       	std	Y+4, r24	; 0x04
    c748:	f8 94       	cli
    c74a:	9c 81       	ldd	r25, Y+4	; 0x04
    c74c:	e0 e1       	ldi	r30, 0x10	; 16
    c74e:	f1 e0       	ldi	r31, 0x01	; 1
    c750:	80 81       	ld	r24, Z
    c752:	80 68       	ori	r24, 0x80	; 128
    c754:	80 83       	st	Z, r24
    c756:	9f bf       	out	0x3f, r25	; 63
    c758:	ff be       	out	0x3f, r15	; 63
    c75a:	24 96       	adiw	r28, 0x04	; 4
    c75c:	cd bf       	out	0x3d, r28	; 61
    c75e:	de bf       	out	0x3e, r29	; 62
    c760:	df 91       	pop	r29
    c762:	cf 91       	pop	r28
    c764:	1f 91       	pop	r17
    c766:	0f 91       	pop	r16
    c768:	ff 90       	pop	r15
    c76a:	08 95       	ret

0000c76c <isr_dma_dac_ch0_B>:
    c76c:	0f 93       	push	r16
    c76e:	1f 93       	push	r17
    c770:	cf 93       	push	r28
    c772:	df 93       	push	r29
    c774:	1f 92       	push	r1
    c776:	cd b7       	in	r28, 0x3d	; 61
    c778:	de b7       	in	r29, 0x3e	; 62
    c77a:	8f b7       	in	r24, 0x3f	; 63
    c77c:	89 83       	std	Y+1, r24	; 0x01
    c77e:	f8 94       	cli
    c780:	99 81       	ldd	r25, Y+1	; 0x01
    c782:	e0 e1       	ldi	r30, 0x10	; 16
    c784:	f1 e0       	ldi	r31, 0x01	; 1
    c786:	80 81       	ld	r24, Z
    c788:	80 68       	ori	r24, 0x80	; 128
    c78a:	80 83       	st	Z, r24
    c78c:	9f bf       	out	0x3f, r25	; 63
    c78e:	78 94       	sei
    c790:	05 e0       	ldi	r16, 0x05	; 5
    c792:	15 e2       	ldi	r17, 0x25	; 37
    c794:	2b e0       	ldi	r18, 0x0B	; 11
    c796:	30 e2       	ldi	r19, 0x20	; 32
    c798:	4d e0       	ldi	r20, 0x0D	; 13
    c79a:	55 e2       	ldi	r21, 0x25	; 37
    c79c:	69 e0       	ldi	r22, 0x09	; 9
    c79e:	75 e2       	ldi	r23, 0x25	; 37
    c7a0:	85 ee       	ldi	r24, 0xE5	; 229
    c7a2:	94 e2       	ldi	r25, 0x24	; 36
    c7a4:	1b df       	rcall	.-458    	; 0xc5dc <calc_next_frame>
    c7a6:	0f 90       	pop	r0
    c7a8:	df 91       	pop	r29
    c7aa:	cf 91       	pop	r28
    c7ac:	1f 91       	pop	r17
    c7ae:	0f 91       	pop	r16
    c7b0:	08 95       	ret

0000c7b2 <isr_dma_dac_ch0_A>:
    c7b2:	0f 93       	push	r16
    c7b4:	1f 93       	push	r17
    c7b6:	cf 93       	push	r28
    c7b8:	df 93       	push	r29
    c7ba:	1f 92       	push	r1
    c7bc:	cd b7       	in	r28, 0x3d	; 61
    c7be:	de b7       	in	r29, 0x3e	; 62
    c7c0:	8f b7       	in	r24, 0x3f	; 63
    c7c2:	89 83       	std	Y+1, r24	; 0x01
    c7c4:	f8 94       	cli
    c7c6:	99 81       	ldd	r25, Y+1	; 0x01
    c7c8:	e0 e2       	ldi	r30, 0x20	; 32
    c7ca:	f1 e0       	ldi	r31, 0x01	; 1
    c7cc:	80 81       	ld	r24, Z
    c7ce:	80 68       	ori	r24, 0x80	; 128
    c7d0:	80 83       	st	Z, r24
    c7d2:	9f bf       	out	0x3f, r25	; 63
    c7d4:	78 94       	sei
    c7d6:	05 e0       	ldi	r16, 0x05	; 5
    c7d8:	15 e2       	ldi	r17, 0x25	; 37
    c7da:	2b e0       	ldi	r18, 0x0B	; 11
    c7dc:	30 e2       	ldi	r19, 0x20	; 32
    c7de:	4d e0       	ldi	r20, 0x0D	; 13
    c7e0:	55 e2       	ldi	r21, 0x25	; 37
    c7e2:	69 e0       	ldi	r22, 0x09	; 9
    c7e4:	75 e2       	ldi	r23, 0x25	; 37
    c7e6:	85 ec       	ldi	r24, 0xC5	; 197
    c7e8:	94 e2       	ldi	r25, 0x24	; 36
    c7ea:	f8 de       	rcall	.-528    	; 0xc5dc <calc_next_frame>
    c7ec:	0f 90       	pop	r0
    c7ee:	df 91       	pop	r29
    c7f0:	cf 91       	pop	r28
    c7f2:	1f 91       	pop	r17
    c7f4:	0f 91       	pop	r16
    c7f6:	08 95       	ret

0000c7f8 <adc_init>:
    c7f8:	8f 92       	push	r8
    c7fa:	9f 92       	push	r9
    c7fc:	af 92       	push	r10
    c7fe:	bf 92       	push	r11
    c800:	cf 92       	push	r12
    c802:	df 92       	push	r13
    c804:	ef 92       	push	r14
    c806:	ff 92       	push	r15
    c808:	0f 93       	push	r16
    c80a:	1f 93       	push	r17
    c80c:	cf 93       	push	r28
    c80e:	df 93       	push	r29
    c810:	e0 e1       	ldi	r30, 0x10	; 16
    c812:	f6 e0       	ldi	r31, 0x06	; 6
    c814:	80 81       	ld	r24, Z
    c816:	87 60       	ori	r24, 0x07	; 7
    c818:	80 83       	st	Z, r24
    c81a:	e1 e1       	ldi	r30, 0x11	; 17
    c81c:	f6 e0       	ldi	r31, 0x06	; 6
    c81e:	80 81       	ld	r24, Z
    c820:	87 60       	ori	r24, 0x07	; 7
    c822:	80 83       	st	Z, r24
    c824:	e2 e1       	ldi	r30, 0x12	; 18
    c826:	f6 e0       	ldi	r31, 0x06	; 6
    c828:	80 81       	ld	r24, Z
    c82a:	87 60       	ori	r24, 0x07	; 7
    c82c:	80 83       	st	Z, r24
    c82e:	e3 e1       	ldi	r30, 0x13	; 19
    c830:	f6 e0       	ldi	r31, 0x06	; 6
    c832:	80 81       	ld	r24, Z
    c834:	87 60       	ori	r24, 0x07	; 7
    c836:	80 83       	st	Z, r24
    c838:	e4 e1       	ldi	r30, 0x14	; 20
    c83a:	f6 e0       	ldi	r31, 0x06	; 6
    c83c:	80 81       	ld	r24, Z
    c83e:	87 60       	ori	r24, 0x07	; 7
    c840:	80 83       	st	Z, r24
    c842:	e5 e1       	ldi	r30, 0x15	; 21
    c844:	f6 e0       	ldi	r31, 0x06	; 6
    c846:	80 81       	ld	r24, Z
    c848:	87 60       	ori	r24, 0x07	; 7
    c84a:	80 83       	st	Z, r24
    c84c:	e2 e3       	ldi	r30, 0x32	; 50
    c84e:	f6 e0       	ldi	r31, 0x06	; 6
    c850:	80 81       	ld	r24, Z
    c852:	87 60       	ori	r24, 0x07	; 7
    c854:	80 83       	st	Z, r24
    c856:	e3 e3       	ldi	r30, 0x33	; 51
    c858:	f6 e0       	ldi	r31, 0x06	; 6
    c85a:	80 81       	ld	r24, Z
    c85c:	87 60       	ori	r24, 0x07	; 7
    c85e:	80 83       	st	Z, r24
    c860:	6d ef       	ldi	r22, 0xFD	; 253
    c862:	76 e2       	ldi	r23, 0x26	; 38
    c864:	80 e0       	ldi	r24, 0x00	; 0
    c866:	92 e0       	ldi	r25, 0x02	; 2
    c868:	0e 94 bb 49 	call	0x9376	; 0x9376 <adc_read_configuration>
    c86c:	49 ef       	ldi	r20, 0xF9	; 249
    c86e:	56 e2       	ldi	r21, 0x26	; 38
    c870:	61 e0       	ldi	r22, 0x01	; 1
    c872:	80 e0       	ldi	r24, 0x00	; 0
    c874:	92 e0       	ldi	r25, 0x02	; 2
    c876:	0e 94 3f 4a 	call	0x947e	; 0x947e <adcch_read_configuration>
    c87a:	45 ef       	ldi	r20, 0xF5	; 245
    c87c:	56 e2       	ldi	r21, 0x26	; 38
    c87e:	62 e0       	ldi	r22, 0x02	; 2
    c880:	80 e0       	ldi	r24, 0x00	; 0
    c882:	92 e0       	ldi	r25, 0x02	; 2
    c884:	0e 94 3f 4a 	call	0x947e	; 0x947e <adcch_read_configuration>
    c888:	41 ef       	ldi	r20, 0xF1	; 241
    c88a:	56 e2       	ldi	r21, 0x26	; 38
    c88c:	64 e0       	ldi	r22, 0x04	; 4
    c88e:	80 e0       	ldi	r24, 0x00	; 0
    c890:	92 e0       	ldi	r25, 0x02	; 2
    c892:	0e 94 3f 4a 	call	0x947e	; 0x947e <adcch_read_configuration>
    c896:	4d ee       	ldi	r20, 0xED	; 237
    c898:	56 e2       	ldi	r21, 0x26	; 38
    c89a:	68 e0       	ldi	r22, 0x08	; 8
    c89c:	80 e0       	ldi	r24, 0x00	; 0
    c89e:	92 e0       	ldi	r25, 0x02	; 2
    c8a0:	0e 94 3f 4a 	call	0x947e	; 0x947e <adcch_read_configuration>
    c8a4:	66 ee       	ldi	r22, 0xE6	; 230
    c8a6:	76 e2       	ldi	r23, 0x26	; 38
    c8a8:	80 e4       	ldi	r24, 0x40	; 64
    c8aa:	92 e0       	ldi	r25, 0x02	; 2
    c8ac:	0e 94 bb 49 	call	0x9376	; 0x9376 <adc_read_configuration>
    c8b0:	42 ee       	ldi	r20, 0xE2	; 226
    c8b2:	56 e2       	ldi	r21, 0x26	; 38
    c8b4:	61 e0       	ldi	r22, 0x01	; 1
    c8b6:	80 e4       	ldi	r24, 0x40	; 64
    c8b8:	92 e0       	ldi	r25, 0x02	; 2
    c8ba:	0e 94 3f 4a 	call	0x947e	; 0x947e <adcch_read_configuration>
    c8be:	ad ef       	ldi	r26, 0xFD	; 253
    c8c0:	b6 e2       	ldi	r27, 0x26	; 38
    c8c2:	83 e0       	ldi	r24, 0x03	; 3
    c8c4:	14 96       	adiw	r26, 0x04	; 4
    c8c6:	8c 93       	st	X, r24
    c8c8:	14 97       	sbiw	r26, 0x04	; 4
    c8ca:	e6 ee       	ldi	r30, 0xE6	; 230
    c8cc:	f6 e2       	ldi	r31, 0x26	; 38
    c8ce:	87 e0       	ldi	r24, 0x07	; 7
    c8d0:	84 83       	std	Z+4, r24	; 0x04
    c8d2:	12 96       	adiw	r26, 0x02	; 2
    c8d4:	3c 91       	ld	r19, X
    c8d6:	12 97       	sbiw	r26, 0x02	; 2
    c8d8:	22 81       	ldd	r18, Z+2	; 0x02
    c8da:	11 96       	adiw	r26, 0x01	; 1
    c8dc:	9c 91       	ld	r25, X
    c8de:	11 97       	sbiw	r26, 0x01	; 1
    c8e0:	81 81       	ldd	r24, Z+1	; 0x01
    c8e2:	0f 2e       	mov	r0, r31
    c8e4:	f9 ef       	ldi	r31, 0xF9	; 249
    c8e6:	8f 2e       	mov	r8, r31
    c8e8:	f6 e2       	ldi	r31, 0x26	; 38
    c8ea:	9f 2e       	mov	r9, r31
    c8ec:	f0 2d       	mov	r31, r0
    c8ee:	41 e0       	ldi	r20, 0x01	; 1
    c8f0:	e4 01       	movw	r28, r8
    c8f2:	48 83       	st	Y, r20
    c8f4:	58 e0       	ldi	r21, 0x08	; 8
    c8f6:	59 83       	std	Y+1, r21	; 0x01
    c8f8:	0f 2e       	mov	r0, r31
    c8fa:	f5 ef       	ldi	r31, 0xF5	; 245
    c8fc:	af 2e       	mov	r10, r31
    c8fe:	f6 e2       	ldi	r31, 0x26	; 38
    c900:	bf 2e       	mov	r11, r31
    c902:	f0 2d       	mov	r31, r0
    c904:	e5 01       	movw	r28, r10
    c906:	48 83       	st	Y, r20
    c908:	60 e2       	ldi	r22, 0x20	; 32
    c90a:	69 83       	std	Y+1, r22	; 0x01
    c90c:	0f 2e       	mov	r0, r31
    c90e:	f1 ef       	ldi	r31, 0xF1	; 241
    c910:	cf 2e       	mov	r12, r31
    c912:	f6 e2       	ldi	r31, 0x26	; 38
    c914:	df 2e       	mov	r13, r31
    c916:	f0 2d       	mov	r31, r0
    c918:	e6 01       	movw	r28, r12
    c91a:	48 83       	st	Y, r20
    c91c:	68 e2       	ldi	r22, 0x28	; 40
    c91e:	69 83       	std	Y+1, r22	; 0x01
    c920:	0f 2e       	mov	r0, r31
    c922:	fd ee       	ldi	r31, 0xED	; 237
    c924:	ef 2e       	mov	r14, r31
    c926:	f6 e2       	ldi	r31, 0x26	; 38
    c928:	ff 2e       	mov	r15, r31
    c92a:	f0 2d       	mov	r31, r0
    c92c:	e7 01       	movw	r28, r14
    c92e:	18 82       	st	Y, r1
    c930:	59 83       	std	Y+1, r21	; 0x01
    c932:	02 ee       	ldi	r16, 0xE2	; 226
    c934:	16 e2       	ldi	r17, 0x26	; 38
    c936:	e8 01       	movw	r28, r16
    c938:	18 82       	st	Y, r1
    c93a:	19 82       	std	Y+1, r1	; 0x01
    c93c:	3e 78       	andi	r19, 0x8E	; 142
    c93e:	32 62       	ori	r19, 0x22	; 34
    c940:	12 96       	adiw	r26, 0x02	; 2
    c942:	3c 93       	st	X, r19
    c944:	12 97       	sbiw	r26, 0x02	; 2
    c946:	2f 78       	andi	r18, 0x8F	; 143
    c948:	23 60       	ori	r18, 0x03	; 3
    c94a:	22 83       	std	Z+2, r18	; 0x02
    c94c:	22 e0       	ldi	r18, 0x02	; 2
    c94e:	e4 01       	movw	r28, r8
    c950:	2b 83       	std	Y+3, r18	; 0x03
    c952:	91 70       	andi	r25, 0x01	; 1
    c954:	90 64       	ori	r25, 0x40	; 64
    c956:	11 96       	adiw	r26, 0x01	; 1
    c958:	9c 93       	st	X, r25
    c95a:	11 97       	sbiw	r26, 0x01	; 1
    c95c:	9c e0       	ldi	r25, 0x0C	; 12
    c95e:	13 96       	adiw	r26, 0x03	; 3
    c960:	9c 93       	st	X, r25
    c962:	81 70       	andi	r24, 0x01	; 1
    c964:	80 66       	ori	r24, 0x60	; 96
    c966:	81 83       	std	Z+1, r24	; 0x01
    c968:	43 83       	std	Z+3, r20	; 0x03
    c96a:	61 ea       	ldi	r22, 0xA1	; 161
    c96c:	7d e5       	ldi	r23, 0x5D	; 93
    c96e:	80 e0       	ldi	r24, 0x00	; 0
    c970:	92 e0       	ldi	r25, 0x02	; 2
    c972:	0e 94 0f 47 	call	0x8e1e	; 0x8e1e <adc_set_callback>
    c976:	68 e4       	ldi	r22, 0x48	; 72
    c978:	7f e5       	ldi	r23, 0x5F	; 95
    c97a:	80 e4       	ldi	r24, 0x40	; 64
    c97c:	92 e0       	ldi	r25, 0x02	; 2
    c97e:	0e 94 0f 47 	call	0x8e1e	; 0x8e1e <adc_set_callback>
    c982:	f5 01       	movw	r30, r10
    c984:	32 81       	ldd	r19, Z+2	; 0x02
    c986:	e6 01       	movw	r28, r12
    c988:	2a 81       	ldd	r18, Y+2	; 0x02
    c98a:	f7 01       	movw	r30, r14
    c98c:	92 81       	ldd	r25, Z+2	; 0x02
    c98e:	e8 01       	movw	r28, r16
    c990:	8a 81       	ldd	r24, Y+2	; 0x02
    c992:	f4 01       	movw	r30, r8
    c994:	42 81       	ldd	r20, Z+2	; 0x02
    c996:	40 7f       	andi	r20, 0xF0	; 240
    c998:	41 60       	ori	r20, 0x01	; 1
    c99a:	42 83       	std	Z+2, r20	; 0x02
    c99c:	30 7f       	andi	r19, 0xF0	; 240
    c99e:	31 60       	ori	r19, 0x01	; 1
    c9a0:	e5 01       	movw	r28, r10
    c9a2:	3a 83       	std	Y+2, r19	; 0x02
    c9a4:	20 7f       	andi	r18, 0xF0	; 240
    c9a6:	21 60       	ori	r18, 0x01	; 1
    c9a8:	f6 01       	movw	r30, r12
    c9aa:	22 83       	std	Z+2, r18	; 0x02
    c9ac:	90 7f       	andi	r25, 0xF0	; 240
    c9ae:	91 60       	ori	r25, 0x01	; 1
    c9b0:	e7 01       	movw	r28, r14
    c9b2:	9a 83       	std	Y+2, r25	; 0x02
    c9b4:	80 7f       	andi	r24, 0xF0	; 240
    c9b6:	81 60       	ori	r24, 0x01	; 1
    c9b8:	f8 01       	movw	r30, r16
    c9ba:	82 83       	std	Z+2, r24	; 0x02
    c9bc:	6d ef       	ldi	r22, 0xFD	; 253
    c9be:	76 e2       	ldi	r23, 0x26	; 38
    c9c0:	80 e0       	ldi	r24, 0x00	; 0
    c9c2:	92 e0       	ldi	r25, 0x02	; 2
    c9c4:	0e 94 51 49 	call	0x92a2	; 0x92a2 <adc_write_configuration>
    c9c8:	a4 01       	movw	r20, r8
    c9ca:	61 e0       	ldi	r22, 0x01	; 1
    c9cc:	80 e0       	ldi	r24, 0x00	; 0
    c9ce:	92 e0       	ldi	r25, 0x02	; 2
    c9d0:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <adcch_write_configuration>
    c9d4:	a5 01       	movw	r20, r10
    c9d6:	62 e0       	ldi	r22, 0x02	; 2
    c9d8:	80 e0       	ldi	r24, 0x00	; 0
    c9da:	92 e0       	ldi	r25, 0x02	; 2
    c9dc:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <adcch_write_configuration>
    c9e0:	a6 01       	movw	r20, r12
    c9e2:	64 e0       	ldi	r22, 0x04	; 4
    c9e4:	80 e0       	ldi	r24, 0x00	; 0
    c9e6:	92 e0       	ldi	r25, 0x02	; 2
    c9e8:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <adcch_write_configuration>
    c9ec:	a7 01       	movw	r20, r14
    c9ee:	68 e0       	ldi	r22, 0x08	; 8
    c9f0:	80 e0       	ldi	r24, 0x00	; 0
    c9f2:	92 e0       	ldi	r25, 0x02	; 2
    c9f4:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <adcch_write_configuration>
    c9f8:	66 ee       	ldi	r22, 0xE6	; 230
    c9fa:	76 e2       	ldi	r23, 0x26	; 38
    c9fc:	80 e4       	ldi	r24, 0x40	; 64
    c9fe:	92 e0       	ldi	r25, 0x02	; 2
    ca00:	0e 94 51 49 	call	0x92a2	; 0x92a2 <adc_write_configuration>
    ca04:	a8 01       	movw	r20, r16
    ca06:	61 e0       	ldi	r22, 0x01	; 1
    ca08:	80 e4       	ldi	r24, 0x40	; 64
    ca0a:	92 e0       	ldi	r25, 0x02	; 2
    ca0c:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <adcch_write_configuration>
    ca10:	61 e2       	ldi	r22, 0x21	; 33
    ca12:	70 e0       	ldi	r23, 0x00	; 0
    ca14:	82 e0       	ldi	r24, 0x02	; 2
    ca16:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    ca1a:	c8 2f       	mov	r28, r24
    ca1c:	d0 e0       	ldi	r29, 0x00	; 0
    ca1e:	dc 2f       	mov	r29, r28
    ca20:	cc 27       	eor	r28, r28
    ca22:	60 e2       	ldi	r22, 0x20	; 32
    ca24:	70 e0       	ldi	r23, 0x00	; 0
    ca26:	82 e0       	ldi	r24, 0x02	; 2
    ca28:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    ca2c:	c8 2b       	or	r28, r24
    ca2e:	c0 93 0c 02 	sts	0x020C, r28	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    ca32:	d0 93 0d 02 	sts	0x020D, r29	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    ca36:	65 e2       	ldi	r22, 0x25	; 37
    ca38:	70 e0       	ldi	r23, 0x00	; 0
    ca3a:	82 e0       	ldi	r24, 0x02	; 2
    ca3c:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    ca40:	c8 2f       	mov	r28, r24
    ca42:	d0 e0       	ldi	r29, 0x00	; 0
    ca44:	dc 2f       	mov	r29, r28
    ca46:	cc 27       	eor	r28, r28
    ca48:	64 e2       	ldi	r22, 0x24	; 36
    ca4a:	70 e0       	ldi	r23, 0x00	; 0
    ca4c:	82 e0       	ldi	r24, 0x02	; 2
    ca4e:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
    ca52:	c8 2b       	or	r28, r24
    ca54:	c0 93 4c 02 	sts	0x024C, r28	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
    ca58:	d0 93 4d 02 	sts	0x024D, r29	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
    ca5c:	df 91       	pop	r29
    ca5e:	cf 91       	pop	r28
    ca60:	1f 91       	pop	r17
    ca62:	0f 91       	pop	r16
    ca64:	ff 90       	pop	r15
    ca66:	ef 90       	pop	r14
    ca68:	df 90       	pop	r13
    ca6a:	cf 90       	pop	r12
    ca6c:	bf 90       	pop	r11
    ca6e:	af 90       	pop	r10
    ca70:	9f 90       	pop	r9
    ca72:	8f 90       	pop	r8
    ca74:	08 95       	ret

0000ca76 <save_globals>:
    ca76:	4f 92       	push	r4
    ca78:	5f 92       	push	r5
    ca7a:	6f 92       	push	r6
    ca7c:	7f 92       	push	r7
    ca7e:	9f 92       	push	r9
    ca80:	af 92       	push	r10
    ca82:	bf 92       	push	r11
    ca84:	cf 92       	push	r12
    ca86:	df 92       	push	r13
    ca88:	ef 92       	push	r14
    ca8a:	ff 92       	push	r15
    ca8c:	0f 93       	push	r16
    ca8e:	1f 93       	push	r17
    ca90:	cf 93       	push	r28
    ca92:	df 93       	push	r29
    ca94:	00 d0       	rcall	.+0      	; 0xca96 <save_globals+0x20>
    ca96:	00 d0       	rcall	.+0      	; 0xca98 <save_globals+0x22>
    ca98:	cd b7       	in	r28, 0x3d	; 61
    ca9a:	de b7       	in	r29, 0x3e	; 62
    ca9c:	98 2e       	mov	r9, r24
    ca9e:	0f 2e       	mov	r0, r31
    caa0:	f7 e0       	ldi	r31, 0x07	; 7
    caa2:	4f 2e       	mov	r4, r31
    caa4:	51 2c       	mov	r5, r1
    caa6:	61 2c       	mov	r6, r1
    caa8:	71 2c       	mov	r7, r1
    caaa:	f0 2d       	mov	r31, r0
    caac:	62 e4       	ldi	r22, 0x42	; 66
    caae:	78 ec       	ldi	r23, 0xC8	; 200
    cab0:	83 e3       	ldi	r24, 0x33	; 51
    cab2:	91 e0       	ldi	r25, 0x01	; 1
    cab4:	2a e0       	ldi	r18, 0x0A	; 10
    cab6:	30 e0       	ldi	r19, 0x00	; 0
    cab8:	40 e0       	ldi	r20, 0x00	; 0
    caba:	50 e0       	ldi	r21, 0x00	; 0
    cabc:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>
    cac0:	a2 2e       	mov	r10, r18
    cac2:	b3 2e       	mov	r11, r19
    cac4:	c4 2e       	mov	r12, r20
    cac6:	d5 2e       	mov	r13, r21
    cac8:	60 5d       	subi	r22, 0xD0	; 208
    caca:	69 83       	std	Y+1, r22	; 0x01
    cacc:	e1 2c       	mov	r14, r1
    cace:	f1 2c       	mov	r15, r1
    cad0:	87 01       	movw	r16, r14
    cad2:	e3 94       	inc	r14
    cad4:	9e 01       	movw	r18, r28
    cad6:	2f 5f       	subi	r18, 0xFF	; 255
    cad8:	3f 4f       	sbci	r19, 0xFF	; 255
    cada:	b3 01       	movw	r22, r6
    cadc:	a2 01       	movw	r20, r4
    cade:	82 e0       	ldi	r24, 0x02	; 2
    cae0:	0e 94 83 25 	call	0x4b06	; 0x4b06 <nvm_write>
    cae4:	6a 2d       	mov	r22, r10
    cae6:	7b 2d       	mov	r23, r11
    cae8:	8c 2d       	mov	r24, r12
    caea:	9d 2d       	mov	r25, r13
    caec:	21 e0       	ldi	r18, 0x01	; 1
    caee:	42 1a       	sub	r4, r18
    caf0:	51 08       	sbc	r5, r1
    caf2:	61 08       	sbc	r6, r1
    caf4:	71 08       	sbc	r7, r1
    caf6:	2f ef       	ldi	r18, 0xFF	; 255
    caf8:	42 16       	cp	r4, r18
    cafa:	52 06       	cpc	r5, r18
    cafc:	62 06       	cpc	r6, r18
    cafe:	72 06       	cpc	r7, r18
    cb00:	c9 f6       	brne	.-78     	; 0xcab4 <save_globals+0x3e>
    cb02:	90 fe       	sbrs	r9, 0
    cb04:	20 c0       	rjmp	.+64     	; 0xcb46 <save_globals+0xd0>
    cb06:	8f b7       	in	r24, 0x3f	; 63
    cb08:	8e 83       	std	Y+6, r24	; 0x06
    cb0a:	f8 94       	cli
    cb0c:	8e 81       	ldd	r24, Y+6	; 0x06
    cb0e:	40 91 04 27 	lds	r20, 0x2704	; 0x802704 <g_xo_mode_pwm>
    cb12:	50 91 05 27 	lds	r21, 0x2705	; 0x802705 <g_xo_mode_pwm+0x1>
    cb16:	60 91 06 27 	lds	r22, 0x2706	; 0x802706 <g_xo_mode_pwm+0x2>
    cb1a:	70 91 07 27 	lds	r23, 0x2707	; 0x802707 <g_xo_mode_pwm+0x3>
    cb1e:	49 83       	std	Y+1, r20	; 0x01
    cb20:	5a 83       	std	Y+2, r21	; 0x02
    cb22:	6b 83       	std	Y+3, r22	; 0x03
    cb24:	7c 83       	std	Y+4, r23	; 0x04
    cb26:	8f bf       	out	0x3f, r24	; 63
    cb28:	14 e0       	ldi	r17, 0x04	; 4
    cb2a:	e1 2e       	mov	r14, r17
    cb2c:	f1 2c       	mov	r15, r1
    cb2e:	00 e0       	ldi	r16, 0x00	; 0
    cb30:	10 e0       	ldi	r17, 0x00	; 0
    cb32:	9e 01       	movw	r18, r28
    cb34:	2f 5f       	subi	r18, 0xFF	; 255
    cb36:	3f 4f       	sbci	r19, 0xFF	; 255
    cb38:	40 e1       	ldi	r20, 0x10	; 16
    cb3a:	50 e0       	ldi	r21, 0x00	; 0
    cb3c:	60 e0       	ldi	r22, 0x00	; 0
    cb3e:	70 e0       	ldi	r23, 0x00	; 0
    cb40:	82 e0       	ldi	r24, 0x02	; 2
    cb42:	0e 94 83 25 	call	0x4b06	; 0x4b06 <nvm_write>
    cb46:	91 fe       	sbrs	r9, 1
    cb48:	1a c0       	rjmp	.+52     	; 0xcb7e <save_globals+0x108>
    cb4a:	8f b7       	in	r24, 0x3f	; 63
    cb4c:	8d 83       	std	Y+5, r24	; 0x05
    cb4e:	f8 94       	cli
    cb50:	8d 81       	ldd	r24, Y+5	; 0x05
    cb52:	20 91 97 28 	lds	r18, 0x2897	; 0x802897 <g_backlight_mode_pwm>
    cb56:	30 91 98 28 	lds	r19, 0x2898	; 0x802898 <g_backlight_mode_pwm+0x1>
    cb5a:	29 83       	std	Y+1, r18	; 0x01
    cb5c:	3a 83       	std	Y+2, r19	; 0x02
    cb5e:	8f bf       	out	0x3f, r24	; 63
    cb60:	12 e0       	ldi	r17, 0x02	; 2
    cb62:	e1 2e       	mov	r14, r17
    cb64:	f1 2c       	mov	r15, r1
    cb66:	00 e0       	ldi	r16, 0x00	; 0
    cb68:	10 e0       	ldi	r17, 0x00	; 0
    cb6a:	9e 01       	movw	r18, r28
    cb6c:	2f 5f       	subi	r18, 0xFF	; 255
    cb6e:	3f 4f       	sbci	r19, 0xFF	; 255
    cb70:	44 e1       	ldi	r20, 0x14	; 20
    cb72:	50 e0       	ldi	r21, 0x00	; 0
    cb74:	60 e0       	ldi	r22, 0x00	; 0
    cb76:	70 e0       	ldi	r23, 0x00	; 0
    cb78:	82 e0       	ldi	r24, 0x02	; 2
    cb7a:	0e 94 83 25 	call	0x4b06	; 0x4b06 <nvm_write>
    cb7e:	26 96       	adiw	r28, 0x06	; 6
    cb80:	cd bf       	out	0x3d, r28	; 61
    cb82:	de bf       	out	0x3e, r29	; 62
    cb84:	df 91       	pop	r29
    cb86:	cf 91       	pop	r28
    cb88:	1f 91       	pop	r17
    cb8a:	0f 91       	pop	r16
    cb8c:	ff 90       	pop	r15
    cb8e:	ef 90       	pop	r14
    cb90:	df 90       	pop	r13
    cb92:	cf 90       	pop	r12
    cb94:	bf 90       	pop	r11
    cb96:	af 90       	pop	r10
    cb98:	9f 90       	pop	r9
    cb9a:	7f 90       	pop	r7
    cb9c:	6f 90       	pop	r6
    cb9e:	5f 90       	pop	r5
    cba0:	4f 90       	pop	r4
    cba2:	08 95       	ret

0000cba4 <myStringToVar>:
    cba4:	2f 92       	push	r2
    cba6:	3f 92       	push	r3
    cba8:	4f 92       	push	r4
    cbaa:	5f 92       	push	r5
    cbac:	6f 92       	push	r6
    cbae:	7f 92       	push	r7
    cbb0:	8f 92       	push	r8
    cbb2:	9f 92       	push	r9
    cbb4:	af 92       	push	r10
    cbb6:	bf 92       	push	r11
    cbb8:	cf 92       	push	r12
    cbba:	df 92       	push	r13
    cbbc:	ef 92       	push	r14
    cbbe:	ff 92       	push	r15
    cbc0:	0f 93       	push	r16
    cbc2:	1f 93       	push	r17
    cbc4:	cf 93       	push	r28
    cbc6:	df 93       	push	r29
    cbc8:	00 d0       	rcall	.+0      	; 0xcbca <myStringToVar+0x26>
    cbca:	1f 92       	push	r1
    cbcc:	cd b7       	in	r28, 0x3d	; 61
    cbce:	de b7       	in	r29, 0x3e	; 62
    cbd0:	6c 01       	movw	r12, r24
    cbd2:	4a 01       	movw	r8, r20
    cbd4:	5b 01       	movw	r10, r22
    cbd6:	29 83       	std	Y+1, r18	; 0x01
    cbd8:	3a 83       	std	Y+2, r19	; 0x02
    cbda:	18 01       	movw	r2, r16
    cbdc:	27 01       	movw	r4, r14
    cbde:	84 2f       	mov	r24, r20
    cbe0:	83 70       	andi	r24, 0x03	; 3
    cbe2:	09 f4       	brne	.+2      	; 0xcbe6 <myStringToVar+0x42>
    cbe4:	66 c0       	rjmp	.+204    	; 0xccb2 <myStringToVar+0x10e>
    cbe6:	1b 82       	std	Y+3, r1	; 0x03
    cbe8:	1c 82       	std	Y+4, r1	; 0x04
    cbea:	61 2c       	mov	r6, r1
    cbec:	71 2c       	mov	r7, r1
    cbee:	eb 80       	ldd	r14, Y+3	; 0x03
    cbf0:	fc 80       	ldd	r15, Y+4	; 0x04
    cbf2:	ec 0c       	add	r14, r12
    cbf4:	fd 1c       	adc	r15, r13
    cbf6:	82 30       	cpi	r24, 0x02	; 2
    cbf8:	e1 f0       	breq	.+56     	; 0xcc32 <myStringToVar+0x8e>
    cbfa:	83 30       	cpi	r24, 0x03	; 3
    cbfc:	69 f1       	breq	.+90     	; 0xcc58 <myStringToVar+0xb4>
    cbfe:	81 30       	cpi	r24, 0x01	; 1
    cc00:	09 f0       	breq	.+2      	; 0xcc04 <myStringToVar+0x60>
    cc02:	59 c0       	rjmp	.+178    	; 0xccb6 <myStringToVar+0x112>
    cc04:	29 81       	ldd	r18, Y+1	; 0x01
    cc06:	3a 81       	ldd	r19, Y+2	; 0x02
    cc08:	21 15       	cp	r18, r1
    cc0a:	31 05       	cpc	r19, r1
    cc0c:	a9 f1       	breq	.+106    	; 0xcc78 <myStringToVar+0xd4>
    cc0e:	89 01       	movw	r16, r18
    cc10:	0c 5f       	subi	r16, 0xFC	; 252
    cc12:	1f 4f       	sbci	r17, 0xFF	; 255
    cc14:	c7 01       	movw	r24, r14
    cc16:	0e 94 47 83 	call	0x1068e	; 0x1068e <atof>
    cc1a:	e9 81       	ldd	r30, Y+1	; 0x01
    cc1c:	fa 81       	ldd	r31, Y+2	; 0x02
    cc1e:	60 83       	st	Z, r22
    cc20:	71 83       	std	Z+1, r23	; 0x01
    cc22:	82 83       	std	Z+2, r24	; 0x02
    cc24:	93 83       	std	Z+3, r25	; 0x03
    cc26:	ff ef       	ldi	r31, 0xFF	; 255
    cc28:	6f 1a       	sub	r6, r31
    cc2a:	7f 0a       	sbc	r7, r31
    cc2c:	09 83       	std	Y+1, r16	; 0x01
    cc2e:	1a 83       	std	Y+2, r17	; 0x02
    cc30:	23 c0       	rjmp	.+70     	; 0xcc78 <myStringToVar+0xd4>
    cc32:	21 14       	cp	r2, r1
    cc34:	31 04       	cpc	r3, r1
    cc36:	01 f1       	breq	.+64     	; 0xcc78 <myStringToVar+0xd4>
    cc38:	81 01       	movw	r16, r2
    cc3a:	0c 5f       	subi	r16, 0xFC	; 252
    cc3c:	1f 4f       	sbci	r17, 0xFF	; 255
    cc3e:	c7 01       	movw	r24, r14
    cc40:	0e 94 67 83 	call	0x106ce	; 0x106ce <atol>
    cc44:	f1 01       	movw	r30, r2
    cc46:	60 83       	st	Z, r22
    cc48:	71 83       	std	Z+1, r23	; 0x01
    cc4a:	82 83       	std	Z+2, r24	; 0x02
    cc4c:	93 83       	std	Z+3, r25	; 0x03
    cc4e:	ff ef       	ldi	r31, 0xFF	; 255
    cc50:	6f 1a       	sub	r6, r31
    cc52:	7f 0a       	sbc	r7, r31
    cc54:	18 01       	movw	r2, r16
    cc56:	10 c0       	rjmp	.+32     	; 0xcc78 <myStringToVar+0xd4>
    cc58:	41 14       	cp	r4, r1
    cc5a:	51 04       	cpc	r5, r1
    cc5c:	69 f0       	breq	.+26     	; 0xcc78 <myStringToVar+0xd4>
    cc5e:	82 01       	movw	r16, r4
    cc60:	0e 5f       	subi	r16, 0xFE	; 254
    cc62:	1f 4f       	sbci	r17, 0xFF	; 255
    cc64:	c7 01       	movw	r24, r14
    cc66:	0e 94 4a 83 	call	0x10694	; 0x10694 <atoi>
    cc6a:	f2 01       	movw	r30, r4
    cc6c:	80 83       	st	Z, r24
    cc6e:	91 83       	std	Z+1, r25	; 0x01
    cc70:	ff ef       	ldi	r31, 0xFF	; 255
    cc72:	6f 1a       	sub	r6, r31
    cc74:	7f 0a       	sbc	r7, r31
    cc76:	28 01       	movw	r4, r16
    cc78:	6c e2       	ldi	r22, 0x2C	; 44
    cc7a:	70 e0       	ldi	r23, 0x00	; 0
    cc7c:	c7 01       	movw	r24, r14
    cc7e:	0e 94 c6 84 	call	0x1098c	; 0x1098c <strchr>
    cc82:	00 97       	sbiw	r24, 0x00	; 0
    cc84:	c1 f0       	breq	.+48     	; 0xccb6 <myStringToVar+0x112>
    cc86:	01 96       	adiw	r24, 0x01	; 1
    cc88:	8e 19       	sub	r24, r14
    cc8a:	9f 09       	sbc	r25, r15
    cc8c:	2b 81       	ldd	r18, Y+3	; 0x03
    cc8e:	3c 81       	ldd	r19, Y+4	; 0x04
    cc90:	28 0f       	add	r18, r24
    cc92:	39 1f       	adc	r19, r25
    cc94:	2b 83       	std	Y+3, r18	; 0x03
    cc96:	3c 83       	std	Y+4, r19	; 0x04
    cc98:	b6 94       	lsr	r11
    cc9a:	a7 94       	ror	r10
    cc9c:	97 94       	ror	r9
    cc9e:	87 94       	ror	r8
    cca0:	b6 94       	lsr	r11
    cca2:	a7 94       	ror	r10
    cca4:	97 94       	ror	r9
    cca6:	87 94       	ror	r8
    cca8:	88 2d       	mov	r24, r8
    ccaa:	83 70       	andi	r24, 0x03	; 3
    ccac:	09 f0       	breq	.+2      	; 0xccb0 <myStringToVar+0x10c>
    ccae:	9f cf       	rjmp	.-194    	; 0xcbee <myStringToVar+0x4a>
    ccb0:	02 c0       	rjmp	.+4      	; 0xccb6 <myStringToVar+0x112>
    ccb2:	61 2c       	mov	r6, r1
    ccb4:	71 2c       	mov	r7, r1
    ccb6:	c3 01       	movw	r24, r6
    ccb8:	24 96       	adiw	r28, 0x04	; 4
    ccba:	cd bf       	out	0x3d, r28	; 61
    ccbc:	de bf       	out	0x3e, r29	; 62
    ccbe:	df 91       	pop	r29
    ccc0:	cf 91       	pop	r28
    ccc2:	1f 91       	pop	r17
    ccc4:	0f 91       	pop	r16
    ccc6:	ff 90       	pop	r15
    ccc8:	ef 90       	pop	r14
    ccca:	df 90       	pop	r13
    cccc:	cf 90       	pop	r12
    ccce:	bf 90       	pop	r11
    ccd0:	af 90       	pop	r10
    ccd2:	9f 90       	pop	r9
    ccd4:	8f 90       	pop	r8
    ccd6:	7f 90       	pop	r7
    ccd8:	6f 90       	pop	r6
    ccda:	5f 90       	pop	r5
    ccdc:	4f 90       	pop	r4
    ccde:	3f 90       	pop	r3
    cce0:	2f 90       	pop	r2
    cce2:	08 95       	ret

0000cce4 <adc_app_enable>:
    cce4:	cf 93       	push	r28
    cce6:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <g_adc_enabled>
    ccea:	98 17       	cp	r25, r24
    ccec:	e1 f0       	breq	.+56     	; 0xcd26 <adc_app_enable+0x42>
    ccee:	c8 2f       	mov	r28, r24
    ccf0:	88 23       	and	r24, r24
    ccf2:	61 f0       	breq	.+24     	; 0xcd0c <adc_app_enable+0x28>
    ccf4:	72 db       	rcall	.-2332   	; 0xc3da <tc_init>
    ccf6:	80 dd       	rcall	.-1280   	; 0xc7f8 <adc_init>
    ccf8:	d2 db       	rcall	.-2140   	; 0xc49e <tc_start>
    ccfa:	80 e0       	ldi	r24, 0x00	; 0
    ccfc:	92 e0       	ldi	r25, 0x02	; 2
    ccfe:	0e 94 6f 47 	call	0x8ede	; 0x8ede <adc_enable>
    cd02:	80 e4       	ldi	r24, 0x40	; 64
    cd04:	92 e0       	ldi	r25, 0x02	; 2
    cd06:	0e 94 6f 47 	call	0x8ede	; 0x8ede <adc_enable>
    cd0a:	08 c0       	rjmp	.+16     	; 0xcd1c <adc_app_enable+0x38>
    cd0c:	80 e0       	ldi	r24, 0x00	; 0
    cd0e:	92 e0       	ldi	r25, 0x02	; 2
    cd10:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <adc_disable>
    cd14:	80 e4       	ldi	r24, 0x40	; 64
    cd16:	92 e0       	ldi	r25, 0x02	; 2
    cd18:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <adc_disable>
    cd1c:	c0 93 63 20 	sts	0x2063, r28	; 0x802063 <g_adc_enabled>
    cd20:	81 e0       	ldi	r24, 0x01	; 1
    cd22:	80 93 08 27 	sts	0x2708, r24	; 0x802708 <g_twi2_lcd_repaint>
    cd26:	cf 91       	pop	r28
    cd28:	08 95       	ret

0000cd2a <backlight_mode_pwm>:
    cd2a:	cf 93       	push	r28
    cd2c:	df 93       	push	r29
    cd2e:	ec 01       	movw	r28, r24
    cd30:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <g_backlight_mode_pwm>
    cd34:	90 93 98 28 	sts	0x2898, r25	; 0x802898 <g_backlight_mode_pwm+0x1>
    cd38:	82 e0       	ldi	r24, 0x02	; 2
    cd3a:	9d de       	rcall	.-710    	; 0xca76 <save_globals>
    cd3c:	ce 3f       	cpi	r28, 0xFE	; 254
    cd3e:	8f ef       	ldi	r24, 0xFF	; 255
    cd40:	d8 07       	cpc	r29, r24
    cd42:	69 f0       	breq	.+26     	; 0xcd5e <backlight_mode_pwm+0x34>
    cd44:	cf 3f       	cpi	r28, 0xFF	; 255
    cd46:	8f ef       	ldi	r24, 0xFF	; 255
    cd48:	d8 07       	cpc	r29, r24
    cd4a:	29 f4       	brne	.+10     	; 0xcd56 <backlight_mode_pwm+0x2c>
    cd4c:	60 e0       	ldi	r22, 0x00	; 0
    cd4e:	81 e0       	ldi	r24, 0x01	; 1
    cd50:	0e 94 0b 34 	call	0x6816	; 0x6816 <twi2_set_ledbl>
    cd54:	04 c0       	rjmp	.+8      	; 0xcd5e <backlight_mode_pwm+0x34>
    cd56:	6c 2f       	mov	r22, r28
    cd58:	80 e0       	ldi	r24, 0x00	; 0
    cd5a:	0e 94 0b 34 	call	0x6816	; 0x6816 <twi2_set_ledbl>
    cd5e:	df 91       	pop	r29
    cd60:	cf 91       	pop	r28
    cd62:	08 95       	ret

0000cd64 <bias_update>:
    cd64:	8f 73       	andi	r24, 0x3F	; 63
    cd66:	80 93 62 20 	sts	0x2062, r24	; 0x802062 <g_bias_pm>
    cd6a:	0c 94 2b 34 	jmp	0x6856	; 0x6856 <twi2_set_bias>
    cd6e:	08 95       	ret

0000cd70 <dac_app_enable>:
    cd70:	1f 93       	push	r17
    cd72:	cf 93       	push	r28
    cd74:	df 93       	push	r29
    cd76:	1f 92       	push	r1
    cd78:	cd b7       	in	r28, 0x3d	; 61
    cd7a:	de b7       	in	r29, 0x3e	; 62
    cd7c:	90 91 99 28 	lds	r25, 0x2899	; 0x802899 <g_dac_enabled>
    cd80:	98 17       	cp	r25, r24
    cd82:	09 f4       	brne	.+2      	; 0xcd86 <dac_app_enable+0x16>
    cd84:	40 c0       	rjmp	.+128    	; 0xce06 <dac_app_enable+0x96>
    cd86:	18 2f       	mov	r17, r24
    cd88:	88 23       	and	r24, r24
    cd8a:	a9 f1       	breq	.+106    	; 0xcdf6 <dac_app_enable+0x86>
    cd8c:	8f b7       	in	r24, 0x3f	; 63
    cd8e:	89 83       	std	Y+1, r24	; 0x01
    cd90:	f8 94       	cli
    cd92:	89 81       	ldd	r24, Y+1	; 0x01
    cd94:	40 e8       	ldi	r20, 0x80	; 128
    cd96:	54 e8       	ldi	r21, 0x84	; 132
    cd98:	6e e1       	ldi	r22, 0x1E	; 30
    cd9a:	70 e0       	ldi	r23, 0x00	; 0
    cd9c:	40 93 13 20 	sts	0x2013, r20	; 0x802013 <dds0_freq_mHz>
    cda0:	50 93 14 20 	sts	0x2014, r21	; 0x802014 <dds0_freq_mHz+0x1>
    cda4:	60 93 15 20 	sts	0x2015, r22	; 0x802015 <dds0_freq_mHz+0x2>
    cda8:	70 93 16 20 	sts	0x2016, r23	; 0x802016 <dds0_freq_mHz+0x3>
    cdac:	10 92 09 25 	sts	0x2509, r1	; 0x802509 <dds0_reg>
    cdb0:	10 92 0a 25 	sts	0x250A, r1	; 0x80250a <dds0_reg+0x1>
    cdb4:	10 92 0b 25 	sts	0x250B, r1	; 0x80250b <dds0_reg+0x2>
    cdb8:	10 92 0c 25 	sts	0x250C, r1	; 0x80250c <dds0_reg+0x3>
    cdbc:	4a e0       	ldi	r20, 0x0A	; 10
    cdbe:	59 e0       	ldi	r21, 0x09	; 9
    cdc0:	6d e3       	ldi	r22, 0x3D	; 61
    cdc2:	70 e0       	ldi	r23, 0x00	; 0
    cdc4:	40 93 0f 20 	sts	0x200F, r20	; 0x80200f <dds1_freq_mHz>
    cdc8:	50 93 10 20 	sts	0x2010, r21	; 0x802010 <dds1_freq_mHz+0x1>
    cdcc:	60 93 11 20 	sts	0x2011, r22	; 0x802011 <dds1_freq_mHz+0x2>
    cdd0:	70 93 12 20 	sts	0x2012, r23	; 0x802012 <dds1_freq_mHz+0x3>
    cdd4:	40 e0       	ldi	r20, 0x00	; 0
    cdd6:	50 e0       	ldi	r21, 0x00	; 0
    cdd8:	60 e0       	ldi	r22, 0x00	; 0
    cdda:	70 e4       	ldi	r23, 0x40	; 64
    cddc:	40 93 0b 20 	sts	0x200B, r20	; 0x80200b <dds1_reg>
    cde0:	50 93 0c 20 	sts	0x200C, r21	; 0x80200c <dds1_reg+0x1>
    cde4:	60 93 0d 20 	sts	0x200D, r22	; 0x80200d <dds1_reg+0x2>
    cde8:	70 93 0e 20 	sts	0x200E, r23	; 0x80200e <dds1_reg+0x3>
    cdec:	8f bf       	out	0x3f, r24	; 63
    cdee:	86 db       	rcall	.-2292   	; 0xc4fc <dac_init>
    cdf0:	56 db       	rcall	.-2388   	; 0xc49e <tc_start>
    cdf2:	4d dc       	rcall	.-1894   	; 0xc68e <dac_start>
    cdf4:	06 c0       	rjmp	.+12     	; 0xce02 <dac_app_enable+0x92>
    cdf6:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <dma_disable>
    cdfa:	80 e2       	ldi	r24, 0x20	; 32
    cdfc:	93 e0       	ldi	r25, 0x03	; 3
    cdfe:	0e 94 d5 4a 	call	0x95aa	; 0x95aa <dac_disable>
    ce02:	10 93 99 28 	sts	0x2899, r17	; 0x802899 <g_dac_enabled>
    ce06:	0f 90       	pop	r0
    ce08:	df 91       	pop	r29
    ce0a:	cf 91       	pop	r28
    ce0c:	1f 91       	pop	r17
    ce0e:	08 95       	ret

0000ce10 <errorBeep_enable>:
    ce10:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <g_errorBeep_enable>
    ce14:	08 95       	ret

0000ce16 <keyBeep_enable>:
    ce16:	80 93 96 28 	sts	0x2896, r24	; 0x802896 <g_keyBeep_enable>
    ce1a:	08 95       	ret

0000ce1c <pitchTone_mode>:
    ce1c:	80 93 61 20 	sts	0x2061, r24	; 0x802061 <g_pitch_tone_mode>
    ce20:	08 95       	ret

0000ce22 <printStatusLines_bitfield>:
    ce22:	91 e0       	ldi	r25, 0x01	; 1
    ce24:	80 ff       	sbrs	r24, 0
    ce26:	90 e0       	ldi	r25, 0x00	; 0
    ce28:	90 93 81 28 	sts	0x2881, r25	; 0x802881 <g_usb_cdc_printStatusLines_atxmega>
    ce2c:	91 e0       	ldi	r25, 0x01	; 1
    ce2e:	81 ff       	sbrs	r24, 1
    ce30:	90 e0       	ldi	r25, 0x00	; 0
    ce32:	90 93 5f 20 	sts	0x205F, r25	; 0x80205f <g_usb_cdc_printStatusLines_sim808>
    ce36:	08 95       	ret

0000ce38 <xoPwm_set>:
    ce38:	0f 93       	push	r16
    ce3a:	1f 93       	push	r17
    ce3c:	cf 93       	push	r28
    ce3e:	df 93       	push	r29
    ce40:	1f 92       	push	r1
    ce42:	1f 92       	push	r1
    ce44:	cd b7       	in	r28, 0x3d	; 61
    ce46:	de b7       	in	r29, 0x3e	; 62
    ce48:	99 23       	and	r25, r25
    ce4a:	4c f0       	brlt	.+18     	; 0xce5e <xoPwm_set+0x26>
    ce4c:	8b 01       	movw	r16, r22
    ce4e:	9c 01       	movw	r18, r24
    ce50:	22 27       	eor	r18, r18
    ce52:	33 27       	eor	r19, r19
    ce54:	60 93 3c 08 	sts	0x083C, r22	; 0x80083c <__TEXT_REGION_LENGTH__+0x70083c>
    ce58:	70 93 3d 08 	sts	0x083D, r23	; 0x80083d <__TEXT_REGION_LENGTH__+0x70083d>
    ce5c:	46 c0       	rjmp	.+140    	; 0xceea <xoPwm_set+0xb2>
    ce5e:	6e 3f       	cpi	r22, 0xFE	; 254
    ce60:	2f ef       	ldi	r18, 0xFF	; 255
    ce62:	72 07       	cpc	r23, r18
    ce64:	82 07       	cpc	r24, r18
    ce66:	92 07       	cpc	r25, r18
    ce68:	31 f0       	breq	.+12     	; 0xce76 <xoPwm_set+0x3e>
    ce6a:	6f 3f       	cpi	r22, 0xFF	; 255
    ce6c:	7f 4f       	sbci	r23, 0xFF	; 255
    ce6e:	8f 4f       	sbci	r24, 0xFF	; 255
    ce70:	9f 4f       	sbci	r25, 0xFF	; 255
    ce72:	31 f1       	breq	.+76     	; 0xcec0 <xoPwm_set+0x88>
    ce74:	36 c0       	rjmp	.+108    	; 0xcee2 <xoPwm_set+0xaa>
    ce76:	60 91 8c 26 	lds	r22, 0x268C	; 0x80268c <g_pwm_vctcxo_cfg+0x5>
    ce7a:	70 91 8d 26 	lds	r23, 0x268D	; 0x80268d <g_pwm_vctcxo_cfg+0x6>
    ce7e:	80 e0       	ldi	r24, 0x00	; 0
    ce80:	90 e0       	ldi	r25, 0x00	; 0
    ce82:	0e 94 68 7e 	call	0xfcd0	; 0xfcd0 <__floatunsisf>
    ce86:	20 e0       	ldi	r18, 0x00	; 0
    ce88:	30 e0       	ldi	r19, 0x00	; 0
    ce8a:	40 ec       	ldi	r20, 0xC0	; 192
    ce8c:	5f e3       	ldi	r21, 0x3F	; 63
    ce8e:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    ce92:	27 e2       	ldi	r18, 0x27	; 39
    ce94:	31 e3       	ldi	r19, 0x31	; 49
    ce96:	40 e5       	ldi	r20, 0x50	; 80
    ce98:	50 e4       	ldi	r21, 0x40	; 64
    ce9a:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    ce9e:	20 e0       	ldi	r18, 0x00	; 0
    cea0:	30 e0       	ldi	r19, 0x00	; 0
    cea2:	40 e0       	ldi	r20, 0x00	; 0
    cea4:	5f e3       	ldi	r21, 0x3F	; 63
    cea6:	0e 94 64 7d 	call	0xfac8	; 0xfac8 <__addsf3>
    ceaa:	0e 94 37 7e 	call	0xfc6e	; 0xfc6e <__fixsfsi>
    ceae:	8b 01       	movw	r16, r22
    ceb0:	9c 01       	movw	r18, r24
    ceb2:	22 27       	eor	r18, r18
    ceb4:	33 27       	eor	r19, r19
    ceb6:	60 93 3c 08 	sts	0x083C, r22	; 0x80083c <__TEXT_REGION_LENGTH__+0x70083c>
    ceba:	70 93 3d 08 	sts	0x083D, r23	; 0x80083d <__TEXT_REGION_LENGTH__+0x70083d>
    cebe:	15 c0       	rjmp	.+42     	; 0xceea <xoPwm_set+0xb2>
    cec0:	8f b7       	in	r24, 0x3f	; 63
    cec2:	8a 83       	std	Y+2, r24	; 0x02
    cec4:	f8 94       	cli
    cec6:	8a 81       	ldd	r24, Y+2	; 0x02
    cec8:	00 91 04 27 	lds	r16, 0x2704	; 0x802704 <g_xo_mode_pwm>
    cecc:	10 91 05 27 	lds	r17, 0x2705	; 0x802705 <g_xo_mode_pwm+0x1>
    ced0:	20 91 06 27 	lds	r18, 0x2706	; 0x802706 <g_xo_mode_pwm+0x2>
    ced4:	30 91 07 27 	lds	r19, 0x2707	; 0x802707 <g_xo_mode_pwm+0x3>
    ced8:	8f bf       	out	0x3f, r24	; 63
    ceda:	22 27       	eor	r18, r18
    cedc:	33 27       	eor	r19, r19
    cede:	30 64       	ori	r19, 0x40	; 64
    cee0:	04 c0       	rjmp	.+8      	; 0xceea <xoPwm_set+0xb2>
    cee2:	00 e0       	ldi	r16, 0x00	; 0
    cee4:	10 e8       	ldi	r17, 0x80	; 128
    cee6:	2f ef       	ldi	r18, 0xFF	; 255
    cee8:	3f ef       	ldi	r19, 0xFF	; 255
    ceea:	01 15       	cp	r16, r1
    ceec:	80 e8       	ldi	r24, 0x80	; 128
    ceee:	18 07       	cpc	r17, r24
    cef0:	8f ef       	ldi	r24, 0xFF	; 255
    cef2:	28 07       	cpc	r18, r24
    cef4:	38 07       	cpc	r19, r24
    cef6:	79 f0       	breq	.+30     	; 0xcf16 <xoPwm_set+0xde>
    cef8:	8f b7       	in	r24, 0x3f	; 63
    cefa:	89 83       	std	Y+1, r24	; 0x01
    cefc:	f8 94       	cli
    cefe:	89 81       	ldd	r24, Y+1	; 0x01
    cf00:	00 93 04 27 	sts	0x2704, r16	; 0x802704 <g_xo_mode_pwm>
    cf04:	10 93 05 27 	sts	0x2705, r17	; 0x802705 <g_xo_mode_pwm+0x1>
    cf08:	20 93 06 27 	sts	0x2706, r18	; 0x802706 <g_xo_mode_pwm+0x2>
    cf0c:	30 93 07 27 	sts	0x2707, r19	; 0x802707 <g_xo_mode_pwm+0x3>
    cf10:	8f bf       	out	0x3f, r24	; 63
    cf12:	81 e0       	ldi	r24, 0x01	; 1
    cf14:	b0 dd       	rcall	.-1184   	; 0xca76 <save_globals>
    cf16:	0f 90       	pop	r0
    cf18:	0f 90       	pop	r0
    cf1a:	df 91       	pop	r29
    cf1c:	cf 91       	pop	r28
    cf1e:	1f 91       	pop	r17
    cf20:	0f 91       	pop	r16
    cf22:	08 95       	ret

0000cf24 <sched_getLock>:


/* Simple scheduler concept */

bool sched_getLock(volatile uint8_t* lockVar)
{
    cf24:	cf 93       	push	r28
    cf26:	df 93       	push	r29
    cf28:	1f 92       	push	r1
    cf2a:	cd b7       	in	r28, 0x3d	; 61
    cf2c:	de b7       	in	r29, 0x3e	; 62
    cf2e:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    cf30:	8f b7       	in	r24, 0x3f	; 63
    cf32:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    cf34:	f8 94       	cli
	return flags;
    cf36:	99 81       	ldd	r25, Y+1	; 0x01

	/* IRQ secured access */	
	{
		irqflags_t flags = cpu_irq_save();
		barrier();
		if (!*lockVar) {	// No use before
    cf38:	80 81       	ld	r24, Z
    cf3a:	81 11       	cpse	r24, r1
    cf3c:	05 c0       	rjmp	.+10     	; 0xcf48 <sched_getLock+0x24>
			++*lockVar;
    cf3e:	80 81       	ld	r24, Z
    cf40:	8f 5f       	subi	r24, 0xFF	; 255
    cf42:	80 83       	st	Z, r24
			barrier();
			status = true;
    cf44:	81 e0       	ldi	r24, 0x01	; 1
    cf46:	01 c0       	rjmp	.+2      	; 0xcf4a <sched_getLock+0x26>

/* Simple scheduler concept */

bool sched_getLock(volatile uint8_t* lockVar)
{
	bool status = false;
    cf48:	80 e0       	ldi	r24, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    cf4a:	9f bf       	out	0x3f, r25	; 63
			status = true;
		}
		cpu_irq_restore(flags);
	}
	return status;
}
    cf4c:	0f 90       	pop	r0
    cf4e:	df 91       	pop	r29
    cf50:	cf 91       	pop	r28
    cf52:	08 95       	ret

0000cf54 <sched_freeLock>:
    cf54:	cf 93       	push	r28
    cf56:	df 93       	push	r29
    cf58:	1f 92       	push	r1
    cf5a:	cd b7       	in	r28, 0x3d	; 61
    cf5c:	de b7       	in	r29, 0x3e	; 62
    cf5e:	fc 01       	movw	r30, r24
    cf60:	8f b7       	in	r24, 0x3f	; 63
    cf62:	89 83       	std	Y+1, r24	; 0x01
    cf64:	f8 94       	cli
    cf66:	99 81       	ldd	r25, Y+1	; 0x01
    cf68:	10 82       	st	Z, r1
    cf6a:	9f bf       	out	0x3f, r25	; 63
    cf6c:	0f 90       	pop	r0
    cf6e:	df 91       	pop	r29
    cf70:	cf 91       	pop	r28
    cf72:	08 95       	ret

0000cf74 <sched_doSleep>:
    cf74:	f8 94       	cli
    cf76:	80 91 77 2e 	lds	r24, 0x2E77	; 0x802e77 <sleepmgr_locks>
    cf7a:	81 11       	cpse	r24, r1
    cf7c:	09 c0       	rjmp	.+18     	; 0xcf90 <sched_doSleep+0x1c>
    cf7e:	a8 e7       	ldi	r26, 0x78	; 120
    cf80:	be e2       	ldi	r27, 0x2E	; 46
    cf82:	e0 e0       	ldi	r30, 0x00	; 0
    cf84:	ef 5f       	subi	r30, 0xFF	; 255
    cf86:	8d 91       	ld	r24, X+
    cf88:	88 23       	and	r24, r24
    cf8a:	e1 f3       	breq	.-8      	; 0xcf84 <sched_doSleep+0x10>
    cf8c:	e1 11       	cpse	r30, r1
    cf8e:	02 c0       	rjmp	.+4      	; 0xcf94 <sched_doSleep+0x20>
    cf90:	78 94       	sei
    cf92:	08 95       	ret
    cf94:	a8 e4       	ldi	r26, 0x48	; 72
    cf96:	b0 e0       	ldi	r27, 0x00	; 0
    cf98:	8c 91       	ld	r24, X
    cf9a:	f0 e0       	ldi	r31, 0x00	; 0
    cf9c:	ed 59       	subi	r30, 0x9D	; 157
    cf9e:	ff 4d       	sbci	r31, 0xDF	; 223
    cfa0:	81 7f       	andi	r24, 0xF1	; 241
    cfa2:	90 81       	ld	r25, Z
    cfa4:	89 2b       	or	r24, r25
    cfa6:	8c 93       	st	X, r24
    cfa8:	8c 91       	ld	r24, X
    cfaa:	81 60       	ori	r24, 0x01	; 1
    cfac:	8c 93       	st	X, r24
    cfae:	78 94       	sei
    cfb0:	88 95       	sleep
    cfb2:	8c 91       	ld	r24, X
    cfb4:	8e 7f       	andi	r24, 0xFE	; 254
    cfb6:	8c 93       	st	X, r24
    cfb8:	08 95       	ret

0000cfba <sched_push>:
    cfba:	2f 92       	push	r2
    cfbc:	3f 92       	push	r3
    cfbe:	4f 92       	push	r4
    cfc0:	5f 92       	push	r5
    cfc2:	6f 92       	push	r6
    cfc4:	7f 92       	push	r7
    cfc6:	8f 92       	push	r8
    cfc8:	9f 92       	push	r9
    cfca:	af 92       	push	r10
    cfcc:	bf 92       	push	r11
    cfce:	cf 92       	push	r12
    cfd0:	ef 92       	push	r14
    cfd2:	ff 92       	push	r15
    cfd4:	0f 93       	push	r16
    cfd6:	1f 93       	push	r17
    cfd8:	cf 93       	push	r28
    cfda:	df 93       	push	r29
    cfdc:	cd b7       	in	r28, 0x3d	; 61
    cfde:	de b7       	in	r29, 0x3e	; 62
    cfe0:	2b 97       	sbiw	r28, 0x0b	; 11
    cfe2:	cd bf       	out	0x3d, r28	; 61
    cfe4:	de bf       	out	0x3e, r29	; 62
    cfe6:	3c 01       	movw	r6, r24
    cfe8:	16 2f       	mov	r17, r22
    cfea:	49 01       	movw	r8, r18
    cfec:	5a 01       	movw	r10, r20
    cfee:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <rtc_get_time>
    cff2:	6c 83       	std	Y+4, r22	; 0x04
    cff4:	7d 83       	std	Y+5, r23	; 0x05
    cff6:	8e 83       	std	Y+6, r24	; 0x06
    cff8:	9f 83       	std	Y+7, r25	; 0x07
    cffa:	e1 10       	cpse	r14, r1
    cffc:	08 c0       	rjmp	.+16     	; 0xd00e <sched_push+0x54>
    cffe:	0f 2e       	mov	r0, r31
    d000:	21 2c       	mov	r2, r1
    d002:	31 2c       	mov	r3, r1
    d004:	f0 ef       	ldi	r31, 0xF0	; 240
    d006:	4f 2e       	mov	r4, r31
    d008:	51 2c       	mov	r5, r1
    d00a:	f0 2d       	mov	r31, r0
    d00c:	07 c0       	rjmp	.+14     	; 0xd01c <sched_push+0x62>
    d00e:	0f 2e       	mov	r0, r31
    d010:	21 2c       	mov	r2, r1
    d012:	31 2c       	mov	r3, r1
    d014:	41 2c       	mov	r4, r1
    d016:	ff e8       	ldi	r31, 0x8F	; 143
    d018:	5f 2e       	mov	r5, r31
    d01a:	f0 2d       	mov	r31, r0
    d01c:	c1 10       	cpse	r12, r1
    d01e:	05 c0       	rjmp	.+10     	; 0xd02a <sched_push+0x70>
    d020:	18 86       	std	Y+8, r1	; 0x08
    d022:	19 86       	std	Y+9, r1	; 0x09
    d024:	1a 86       	std	Y+10, r1	; 0x0a
    d026:	1b 86       	std	Y+11, r1	; 0x0b
    d028:	08 c0       	rjmp	.+16     	; 0xd03a <sched_push+0x80>
    d02a:	80 e0       	ldi	r24, 0x00	; 0
    d02c:	90 e0       	ldi	r25, 0x00	; 0
    d02e:	a0 e0       	ldi	r26, 0x00	; 0
    d030:	b0 e4       	ldi	r27, 0x40	; 64
    d032:	88 87       	std	Y+8, r24	; 0x08
    d034:	99 87       	std	Y+9, r25	; 0x09
    d036:	aa 87       	std	Y+10, r26	; 0x0a
    d038:	bb 87       	std	Y+11, r27	; 0x0b
    d03a:	00 23       	and	r16, r16
    d03c:	09 f4       	brne	.+2      	; 0xd040 <sched_push+0x86>
    d03e:	13 c2       	rjmp	.+1062   	; 0xd466 <sched_push+0x4ac>
    d040:	92 e0       	ldi	r25, 0x02	; 2
    d042:	89 16       	cp	r8, r25
    d044:	91 04       	cpc	r9, r1
    d046:	a1 04       	cpc	r10, r1
    d048:	b1 04       	cpc	r11, r1
    d04a:	c8 f0       	brcs	.+50     	; 0xd07e <sched_push+0xc4>
    d04c:	a1 e3       	ldi	r26, 0x31	; 49
    d04e:	8a 16       	cp	r8, r26
    d050:	a5 e7       	ldi	r26, 0x75	; 117
    d052:	9a 06       	cpc	r9, r26
    d054:	a1 04       	cpc	r10, r1
    d056:	b1 04       	cpc	r11, r1
    d058:	b8 f4       	brcc	.+46     	; 0xd088 <sched_push+0xce>
    d05a:	c5 01       	movw	r24, r10
    d05c:	b4 01       	movw	r22, r8
    d05e:	05 2e       	mov	r0, r21
    d060:	5a e0       	ldi	r21, 0x0A	; 10
    d062:	66 0f       	add	r22, r22
    d064:	77 1f       	adc	r23, r23
    d066:	88 1f       	adc	r24, r24
    d068:	99 1f       	adc	r25, r25
    d06a:	5a 95       	dec	r21
    d06c:	d1 f7       	brne	.-12     	; 0xd062 <sched_push+0xa8>
    d06e:	50 2d       	mov	r21, r0
    d070:	28 ee       	ldi	r18, 0xE8	; 232
    d072:	33 e0       	ldi	r19, 0x03	; 3
    d074:	40 e0       	ldi	r20, 0x00	; 0
    d076:	50 e0       	ldi	r21, 0x00	; 0
    d078:	0e 94 6c 81 	call	0x102d8	; 0x102d8 <__udivmodsi4>
    d07c:	09 c0       	rjmp	.+18     	; 0xd090 <sched_push+0xd6>
    d07e:	22 e0       	ldi	r18, 0x02	; 2
    d080:	30 e0       	ldi	r19, 0x00	; 0
    d082:	40 e0       	ldi	r20, 0x00	; 0
    d084:	50 e0       	ldi	r21, 0x00	; 0
    d086:	04 c0       	rjmp	.+8      	; 0xd090 <sched_push+0xd6>
    d088:	21 e3       	ldi	r18, 0x31	; 49
    d08a:	30 e0       	ldi	r19, 0x00	; 0
    d08c:	40 e0       	ldi	r20, 0x00	; 0
    d08e:	50 e0       	ldi	r21, 0x00	; 0
    d090:	8c 80       	ldd	r8, Y+4	; 0x04
    d092:	9d 80       	ldd	r9, Y+5	; 0x05
    d094:	ae 80       	ldd	r10, Y+6	; 0x06
    d096:	bf 80       	ldd	r11, Y+7	; 0x07
    d098:	82 0e       	add	r8, r18
    d09a:	93 1e       	adc	r9, r19
    d09c:	a4 1e       	adc	r10, r20
    d09e:	b5 1e       	adc	r11, r21
    d0a0:	e2 c1       	rjmp	.+964    	; 0xd466 <sched_push+0x4ac>
    d0a2:	e1 ef       	ldi	r30, 0xF1	; 241
    d0a4:	fd e2       	ldi	r31, 0x2D	; 45
    d0a6:	83 81       	ldd	r24, Z+3	; 0x03
    d0a8:	92 81       	ldd	r25, Z+2	; 0x02
    d0aa:	89 1b       	sub	r24, r25
    d0ac:	98 2f       	mov	r25, r24
    d0ae:	85 81       	ldd	r24, Z+5	; 0x05
    d0b0:	89 23       	and	r24, r25
    d0b2:	94 81       	ldd	r25, Z+4	; 0x04
    d0b4:	89 17       	cp	r24, r25
    d0b6:	09 f4       	brne	.+2      	; 0xd0ba <sched_push+0x100>
    d0b8:	dd c1       	rjmp	.+954    	; 0xd474 <sched_push+0x4ba>
    d0ba:	8f b7       	in	r24, 0x3f	; 63
    d0bc:	8b 83       	std	Y+3, r24	; 0x03
    d0be:	f8 94       	cli
    d0c0:	8b 81       	ldd	r24, Y+3	; 0x03
    d0c2:	93 81       	ldd	r25, Z+3	; 0x03
    d0c4:	32 81       	ldd	r19, Z+2	; 0x02
    d0c6:	25 81       	ldd	r18, Z+5	; 0x05
    d0c8:	93 1b       	sub	r25, r19
    d0ca:	92 23       	and	r25, r18
    d0cc:	34 81       	ldd	r19, Z+4	; 0x04
    d0ce:	93 17       	cp	r25, r19
    d0d0:	99 f0       	breq	.+38     	; 0xd0f8 <sched_push+0x13e>
    d0d2:	93 81       	ldd	r25, Z+3	; 0x03
    d0d4:	26 95       	lsr	r18
    d0d6:	29 23       	and	r18, r25
    d0d8:	a0 81       	ld	r26, Z
    d0da:	b1 81       	ldd	r27, Z+1	; 0x01
    d0dc:	04 e0       	ldi	r16, 0x04	; 4
    d0de:	20 9f       	mul	r18, r16
    d0e0:	a0 0d       	add	r26, r0
    d0e2:	b1 1d       	adc	r27, r1
    d0e4:	11 24       	eor	r1, r1
    d0e6:	8d 92       	st	X+, r8
    d0e8:	9d 92       	st	X+, r9
    d0ea:	ad 92       	st	X+, r10
    d0ec:	bc 92       	st	X, r11
    d0ee:	13 97       	sbiw	r26, 0x03	; 3
    d0f0:	9f 5f       	subi	r25, 0xFF	; 255
    d0f2:	25 81       	ldd	r18, Z+5	; 0x05
    d0f4:	92 23       	and	r25, r18
    d0f6:	93 83       	std	Z+3, r25	; 0x03
    d0f8:	e1 ef       	ldi	r30, 0xF1	; 241
    d0fa:	fd e2       	ldi	r31, 0x2D	; 45
    d0fc:	93 81       	ldd	r25, Z+3	; 0x03
    d0fe:	32 81       	ldd	r19, Z+2	; 0x02
    d100:	25 81       	ldd	r18, Z+5	; 0x05
    d102:	93 1b       	sub	r25, r19
    d104:	92 23       	and	r25, r18
    d106:	34 81       	ldd	r19, Z+4	; 0x04
    d108:	93 17       	cp	r25, r19
    d10a:	19 f1       	breq	.+70     	; 0xd152 <sched_push+0x198>
    d10c:	93 81       	ldd	r25, Z+3	; 0x03
    d10e:	26 95       	lsr	r18
    d110:	29 23       	and	r18, r25
    d112:	a0 81       	ld	r26, Z
    d114:	b1 81       	ldd	r27, Z+1	; 0x01
    d116:	34 e0       	ldi	r19, 0x04	; 4
    d118:	23 9f       	mul	r18, r19
    d11a:	a0 0d       	add	r26, r0
    d11c:	b1 1d       	adc	r27, r1
    d11e:	11 24       	eor	r1, r1
    d120:	a3 01       	movw	r20, r6
    d122:	60 e0       	ldi	r22, 0x00	; 0
    d124:	70 e0       	ldi	r23, 0x00	; 0
    d126:	71 2b       	or	r23, r17
    d128:	42 29       	or	r20, r2
    d12a:	53 29       	or	r21, r3
    d12c:	64 29       	or	r22, r4
    d12e:	75 29       	or	r23, r5
    d130:	08 85       	ldd	r16, Y+8	; 0x08
    d132:	19 85       	ldd	r17, Y+9	; 0x09
    d134:	2a 85       	ldd	r18, Y+10	; 0x0a
    d136:	3b 85       	ldd	r19, Y+11	; 0x0b
    d138:	40 2b       	or	r20, r16
    d13a:	51 2b       	or	r21, r17
    d13c:	62 2b       	or	r22, r18
    d13e:	73 2b       	or	r23, r19
    d140:	4d 93       	st	X+, r20
    d142:	5d 93       	st	X+, r21
    d144:	6d 93       	st	X+, r22
    d146:	7c 93       	st	X, r23
    d148:	13 97       	sbiw	r26, 0x03	; 3
    d14a:	9f 5f       	subi	r25, 0xFF	; 255
    d14c:	25 81       	ldd	r18, Z+5	; 0x05
    d14e:	92 23       	and	r25, r18
    d150:	93 83       	std	Z+3, r25	; 0x03
    d152:	8f bf       	out	0x3f, r24	; 63
    d154:	8f c1       	rjmp	.+798    	; 0xd474 <sched_push+0x4ba>
    d156:	81 e0       	ldi	r24, 0x01	; 1
    d158:	90 e0       	ldi	r25, 0x00	; 0
    d15a:	fc 01       	movw	r30, r24
    d15c:	ee 0f       	add	r30, r30
    d15e:	ff 1f       	adc	r31, r31
    d160:	ee 0f       	add	r30, r30
    d162:	ff 1f       	adc	r31, r31
    d164:	ee 0f       	add	r30, r30
    d166:	ff 1f       	adc	r31, r31
    d168:	e8 1b       	sub	r30, r24
    d16a:	f9 0b       	sbc	r31, r25
    d16c:	ef 55       	subi	r30, 0x5F	; 95
    d16e:	fa 4d       	sbci	r31, 0xDA	; 218
    d170:	20 81       	ld	r18, Z
    d172:	20 fd       	sbrc	r18, 0
    d174:	32 c0       	rjmp	.+100    	; 0xd1da <sched_push+0x220>
    d176:	dc 01       	movw	r26, r24
    d178:	aa 0f       	add	r26, r26
    d17a:	bb 1f       	adc	r27, r27
    d17c:	aa 0f       	add	r26, r26
    d17e:	bb 1f       	adc	r27, r27
    d180:	aa 0f       	add	r26, r26
    d182:	bb 1f       	adc	r27, r27
    d184:	a8 1b       	sub	r26, r24
    d186:	b9 0b       	sbc	r27, r25
    d188:	fd 01       	movw	r30, r26
    d18a:	ef 55       	subi	r30, 0x5F	; 95
    d18c:	fa 4d       	sbci	r31, 0xDA	; 218
    d18e:	90 81       	ld	r25, Z
    d190:	91 60       	ori	r25, 0x01	; 1
    d192:	90 83       	st	Z, r25
    d194:	a5 56       	subi	r26, 0x65	; 101
    d196:	ba 4d       	sbci	r27, 0xDA	; 218
    d198:	14 96       	adiw	r26, 0x04	; 4
    d19a:	6d 92       	st	X+, r6
    d19c:	7c 92       	st	X, r7
    d19e:	15 97       	sbiw	r26, 0x05	; 5
    d1a0:	13 70       	andi	r17, 0x03	; 3
    d1a2:	11 0f       	add	r17, r17
    d1a4:	11 0f       	add	r17, r17
    d1a6:	11 0f       	add	r17, r17
    d1a8:	90 81       	ld	r25, Z
    d1aa:	97 7e       	andi	r25, 0xE7	; 231
    d1ac:	91 2b       	or	r25, r17
    d1ae:	90 83       	st	Z, r25
    d1b0:	90 81       	ld	r25, Z
    d1b2:	e0 fa       	bst	r14, 0
    d1b4:	91 f9       	bld	r25, 1
    d1b6:	90 83       	st	Z, r25
    d1b8:	90 81       	ld	r25, Z
    d1ba:	c0 fa       	bst	r12, 0
    d1bc:	92 f9       	bld	r25, 2
    d1be:	90 83       	st	Z, r25
    d1c0:	8d 92       	st	X+, r8
    d1c2:	9d 92       	st	X+, r9
    d1c4:	ad 92       	st	X+, r10
    d1c6:	bc 92       	st	X, r11
    d1c8:	13 97       	sbiw	r26, 0x03	; 3
    d1ca:	8f 5f       	subi	r24, 0xFF	; 255
    d1cc:	e0 91 7b 25 	lds	r30, 0x257B	; 0x80257b <g_sched_sort>
    d1d0:	ee 23       	and	r30, r30
    d1d2:	a1 f0       	breq	.+40     	; 0xd1fc <sched_push+0x242>
    d1d4:	20 e0       	ldi	r18, 0x00	; 0
    d1d6:	30 e0       	ldi	r19, 0x00	; 0
    d1d8:	18 c0       	rjmp	.+48     	; 0xd20a <sched_push+0x250>
    d1da:	01 96       	adiw	r24, 0x01	; 1
    d1dc:	80 32       	cpi	r24, 0x20	; 32
    d1de:	91 05       	cpc	r25, r1
    d1e0:	09 f0       	breq	.+2      	; 0xd1e4 <sched_push+0x22a>
    d1e2:	bb cf       	rjmp	.-138    	; 0xd15a <sched_push+0x1a0>
    d1e4:	1c 82       	std	Y+4, r1	; 0x04
    d1e6:	1d 82       	std	Y+5, r1	; 0x05
    d1e8:	1e 82       	std	Y+6, r1	; 0x06
    d1ea:	1f 82       	std	Y+7, r1	; 0x07
    d1ec:	62 c0       	rjmp	.+196    	; 0xd2b2 <sched_push+0x2f8>
    d1ee:	f9 01       	movw	r30, r18
    d1f0:	e5 58       	subi	r30, 0x85	; 133
    d1f2:	fa 4d       	sbci	r31, 0xDA	; 218
    d1f4:	e0 81       	ld	r30, Z
    d1f6:	e1 11       	cpse	r30, r1
    d1f8:	08 c0       	rjmp	.+16     	; 0xd20a <sched_push+0x250>
    d1fa:	02 c0       	rjmp	.+4      	; 0xd200 <sched_push+0x246>
    d1fc:	20 e0       	ldi	r18, 0x00	; 0
    d1fe:	30 e0       	ldi	r19, 0x00	; 0
    d200:	f9 01       	movw	r30, r18
    d202:	e5 58       	subi	r30, 0x85	; 133
    d204:	fa 4d       	sbci	r31, 0xDA	; 218
    d206:	80 83       	st	Z, r24
    d208:	3d c0       	rjmp	.+122    	; 0xd284 <sched_push+0x2ca>
    d20a:	e1 50       	subi	r30, 0x01	; 1
    d20c:	4e 2f       	mov	r20, r30
    d20e:	50 e0       	ldi	r21, 0x00	; 0
    d210:	17 e0       	ldi	r17, 0x07	; 7
    d212:	e1 9f       	mul	r30, r17
    d214:	f0 01       	movw	r30, r0
    d216:	11 24       	eor	r1, r1
    d218:	ef 55       	subi	r30, 0x5F	; 95
    d21a:	fa 4d       	sbci	r31, 0xDA	; 218
    d21c:	90 81       	ld	r25, Z
    d21e:	90 ff       	sbrs	r25, 0
    d220:	2b c0       	rjmp	.+86     	; 0xd278 <sched_push+0x2be>
    d222:	fa 01       	movw	r30, r20
    d224:	ee 0f       	add	r30, r30
    d226:	ff 1f       	adc	r31, r31
    d228:	ee 0f       	add	r30, r30
    d22a:	ff 1f       	adc	r31, r31
    d22c:	ee 0f       	add	r30, r30
    d22e:	ff 1f       	adc	r31, r31
    d230:	e4 1b       	sub	r30, r20
    d232:	f5 0b       	sbc	r31, r21
    d234:	e5 56       	subi	r30, 0x65	; 101
    d236:	fa 4d       	sbci	r31, 0xDA	; 218
    d238:	40 81       	ld	r20, Z
    d23a:	51 81       	ldd	r21, Z+1	; 0x01
    d23c:	62 81       	ldd	r22, Z+2	; 0x02
    d23e:	73 81       	ldd	r23, Z+3	; 0x03
    d240:	84 16       	cp	r8, r20
    d242:	95 06       	cpc	r9, r21
    d244:	a6 06       	cpc	r10, r22
    d246:	b7 06       	cpc	r11, r23
    d248:	b8 f4       	brcc	.+46     	; 0xd278 <sched_push+0x2be>
    d24a:	2f 31       	cpi	r18, 0x1F	; 31
    d24c:	31 05       	cpc	r19, r1
    d24e:	7c f4       	brge	.+30     	; 0xd26e <sched_push+0x2b4>
    d250:	4e e1       	ldi	r20, 0x1E	; 30
    d252:	50 e0       	ldi	r21, 0x00	; 0
    d254:	fa 01       	movw	r30, r20
    d256:	e5 58       	subi	r30, 0x85	; 133
    d258:	fa 4d       	sbci	r31, 0xDA	; 218
    d25a:	90 81       	ld	r25, Z
    d25c:	fa 01       	movw	r30, r20
    d25e:	e4 58       	subi	r30, 0x84	; 132
    d260:	fa 4d       	sbci	r31, 0xDA	; 218
    d262:	90 83       	st	Z, r25
    d264:	41 50       	subi	r20, 0x01	; 1
    d266:	51 09       	sbc	r21, r1
    d268:	42 17       	cp	r20, r18
    d26a:	53 07       	cpc	r21, r19
    d26c:	9c f7       	brge	.-26     	; 0xd254 <sched_push+0x29a>
    d26e:	f9 01       	movw	r30, r18
    d270:	e5 58       	subi	r30, 0x85	; 133
    d272:	fa 4d       	sbci	r31, 0xDA	; 218
    d274:	80 83       	st	Z, r24
    d276:	06 c0       	rjmp	.+12     	; 0xd284 <sched_push+0x2ca>
    d278:	2f 5f       	subi	r18, 0xFF	; 255
    d27a:	3f 4f       	sbci	r19, 0xFF	; 255
    d27c:	20 32       	cpi	r18, 0x20	; 32
    d27e:	31 05       	cpc	r19, r1
    d280:	09 f0       	breq	.+2      	; 0xd284 <sched_push+0x2ca>
    d282:	b5 cf       	rjmp	.-150    	; 0xd1ee <sched_push+0x234>
    d284:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <g_sched_sort>
    d288:	90 e0       	ldi	r25, 0x00	; 0
    d28a:	01 97       	sbiw	r24, 0x01	; 1
    d28c:	fc 01       	movw	r30, r24
    d28e:	ee 0f       	add	r30, r30
    d290:	ff 1f       	adc	r31, r31
    d292:	ee 0f       	add	r30, r30
    d294:	ff 1f       	adc	r31, r31
    d296:	ee 0f       	add	r30, r30
    d298:	ff 1f       	adc	r31, r31
    d29a:	e8 1b       	sub	r30, r24
    d29c:	f9 0b       	sbc	r31, r25
    d29e:	e5 56       	subi	r30, 0x65	; 101
    d2a0:	fa 4d       	sbci	r31, 0xDA	; 218
    d2a2:	80 81       	ld	r24, Z
    d2a4:	91 81       	ldd	r25, Z+1	; 0x01
    d2a6:	a2 81       	ldd	r26, Z+2	; 0x02
    d2a8:	b3 81       	ldd	r27, Z+3	; 0x03
    d2aa:	8c 83       	std	Y+4, r24	; 0x04
    d2ac:	9d 83       	std	Y+5, r25	; 0x05
    d2ae:	ae 83       	std	Y+6, r26	; 0x06
    d2b0:	bf 83       	std	Y+7, r27	; 0x07
    d2b2:	8f e7       	ldi	r24, 0x7F	; 127
    d2b4:	96 e2       	ldi	r25, 0x26	; 38
    d2b6:	4e de       	rcall	.-868    	; 0xcf54 <sched_freeLock>
    d2b8:	0f 2e       	mov	r0, r31
    d2ba:	f1 ef       	ldi	r31, 0xF1	; 241
    d2bc:	af 2e       	mov	r10, r31
    d2be:	fd e2       	ldi	r31, 0x2D	; 45
    d2c0:	bf 2e       	mov	r11, r31
    d2c2:	f0 2d       	mov	r31, r0
    d2c4:	a3 c0       	rjmp	.+326    	; 0xd40c <sched_push+0x452>
    d2c6:	8f b7       	in	r24, 0x3f	; 63
    d2c8:	8a 83       	std	Y+2, r24	; 0x02
    d2ca:	f8 94       	cli
    d2cc:	2a 81       	ldd	r18, Y+2	; 0x02
    d2ce:	d5 01       	movw	r26, r10
    d2d0:	13 96       	adiw	r26, 0x03	; 3
    d2d2:	9c 91       	ld	r25, X
    d2d4:	13 97       	sbiw	r26, 0x03	; 3
    d2d6:	12 96       	adiw	r26, 0x02	; 2
    d2d8:	8c 91       	ld	r24, X
    d2da:	12 97       	sbiw	r26, 0x02	; 2
    d2dc:	98 17       	cp	r25, r24
    d2de:	c9 f0       	breq	.+50     	; 0xd312 <sched_push+0x358>
    d2e0:	12 96       	adiw	r26, 0x02	; 2
    d2e2:	9c 91       	ld	r25, X
    d2e4:	12 97       	sbiw	r26, 0x02	; 2
    d2e6:	15 96       	adiw	r26, 0x05	; 5
    d2e8:	8c 91       	ld	r24, X
    d2ea:	15 97       	sbiw	r26, 0x05	; 5
    d2ec:	38 2f       	mov	r19, r24
    d2ee:	36 95       	lsr	r19
    d2f0:	39 23       	and	r19, r25
    d2f2:	ed 91       	ld	r30, X+
    d2f4:	fc 91       	ld	r31, X
    d2f6:	b4 e0       	ldi	r27, 0x04	; 4
    d2f8:	3b 9f       	mul	r19, r27
    d2fa:	e0 0d       	add	r30, r0
    d2fc:	f1 1d       	adc	r31, r1
    d2fe:	11 24       	eor	r1, r1
    d300:	40 81       	ld	r20, Z
    d302:	51 81       	ldd	r21, Z+1	; 0x01
    d304:	62 81       	ldd	r22, Z+2	; 0x02
    d306:	73 81       	ldd	r23, Z+3	; 0x03
    d308:	9f 5f       	subi	r25, 0xFF	; 255
    d30a:	89 23       	and	r24, r25
    d30c:	f5 01       	movw	r30, r10
    d30e:	82 83       	std	Z+2, r24	; 0x02
    d310:	03 c0       	rjmp	.+6      	; 0xd318 <sched_push+0x35e>
    d312:	40 e0       	ldi	r20, 0x00	; 0
    d314:	50 e0       	ldi	r21, 0x00	; 0
    d316:	ba 01       	movw	r22, r20
    d318:	d5 01       	movw	r26, r10
    d31a:	13 96       	adiw	r26, 0x03	; 3
    d31c:	8c 91       	ld	r24, X
    d31e:	13 97       	sbiw	r26, 0x03	; 3
    d320:	12 96       	adiw	r26, 0x02	; 2
    d322:	9c 91       	ld	r25, X
    d324:	12 97       	sbiw	r26, 0x02	; 2
    d326:	98 17       	cp	r25, r24
    d328:	c9 f0       	breq	.+50     	; 0xd35c <sched_push+0x3a2>
    d32a:	12 96       	adiw	r26, 0x02	; 2
    d32c:	3c 91       	ld	r19, X
    d32e:	12 97       	sbiw	r26, 0x02	; 2
    d330:	15 96       	adiw	r26, 0x05	; 5
    d332:	9c 91       	ld	r25, X
    d334:	15 97       	sbiw	r26, 0x05	; 5
    d336:	89 2f       	mov	r24, r25
    d338:	86 95       	lsr	r24
    d33a:	83 23       	and	r24, r19
    d33c:	ed 91       	ld	r30, X+
    d33e:	fc 91       	ld	r31, X
    d340:	b4 e0       	ldi	r27, 0x04	; 4
    d342:	8b 9f       	mul	r24, r27
    d344:	e0 0d       	add	r30, r0
    d346:	f1 1d       	adc	r31, r1
    d348:	11 24       	eor	r1, r1
    d34a:	40 80       	ld	r4, Z
    d34c:	51 80       	ldd	r5, Z+1	; 0x01
    d34e:	62 80       	ldd	r6, Z+2	; 0x02
    d350:	73 80       	ldd	r7, Z+3	; 0x03
    d352:	3f 5f       	subi	r19, 0xFF	; 255
    d354:	93 23       	and	r25, r19
    d356:	f5 01       	movw	r30, r10
    d358:	92 83       	std	Z+2, r25	; 0x02
    d35a:	03 c0       	rjmp	.+6      	; 0xd362 <sched_push+0x3a8>
    d35c:	41 2c       	mov	r4, r1
    d35e:	51 2c       	mov	r5, r1
    d360:	32 01       	movw	r6, r4
    d362:	2f bf       	out	0x3f, r18	; 63
    d364:	d3 01       	movw	r26, r6
    d366:	c2 01       	movw	r24, r4
    d368:	88 27       	eor	r24, r24
    d36a:	99 27       	eor	r25, r25
    d36c:	aa 27       	eor	r26, r26
    d36e:	bf 70       	andi	r27, 0x0F	; 15
    d370:	00 97       	sbiw	r24, 0x00	; 0
    d372:	a1 05       	cpc	r26, r1
    d374:	bf 40       	sbci	r27, 0x0F	; 15
    d376:	09 f1       	breq	.+66     	; 0xd3ba <sched_push+0x400>
    d378:	8f b7       	in	r24, 0x3f	; 63
    d37a:	89 83       	std	Y+1, r24	; 0x01
    d37c:	f8 94       	cli
    d37e:	29 81       	ldd	r18, Y+1	; 0x01
    d380:	12 c0       	rjmp	.+36     	; 0xd3a6 <sched_push+0x3ec>
    d382:	d5 01       	movw	r26, r10
    d384:	13 96       	adiw	r26, 0x03	; 3
    d386:	9c 91       	ld	r25, X
    d388:	13 97       	sbiw	r26, 0x03	; 3
    d38a:	12 96       	adiw	r26, 0x02	; 2
    d38c:	8c 91       	ld	r24, X
    d38e:	12 97       	sbiw	r26, 0x02	; 2
    d390:	98 17       	cp	r25, r24
    d392:	49 f0       	breq	.+18     	; 0xd3a6 <sched_push+0x3ec>
    d394:	12 96       	adiw	r26, 0x02	; 2
    d396:	8c 91       	ld	r24, X
    d398:	12 97       	sbiw	r26, 0x02	; 2
    d39a:	8f 5f       	subi	r24, 0xFF	; 255
    d39c:	15 96       	adiw	r26, 0x05	; 5
    d39e:	9c 91       	ld	r25, X
    d3a0:	89 23       	and	r24, r25
    d3a2:	f5 01       	movw	r30, r10
    d3a4:	82 83       	std	Z+2, r24	; 0x02
    d3a6:	d5 01       	movw	r26, r10
    d3a8:	13 96       	adiw	r26, 0x03	; 3
    d3aa:	9c 91       	ld	r25, X
    d3ac:	13 97       	sbiw	r26, 0x03	; 3
    d3ae:	12 96       	adiw	r26, 0x02	; 2
    d3b0:	8c 91       	ld	r24, X
    d3b2:	98 13       	cpse	r25, r24
    d3b4:	e6 cf       	rjmp	.-52     	; 0xd382 <sched_push+0x3c8>
    d3b6:	2f bf       	out	0x3f, r18	; 63
    d3b8:	29 c0       	rjmp	.+82     	; 0xd40c <sched_push+0x452>
    d3ba:	d3 01       	movw	r26, r6
    d3bc:	c2 01       	movw	r24, r4
    d3be:	aa 27       	eor	r26, r26
    d3c0:	bb 27       	eor	r27, r27
    d3c2:	89 2b       	or	r24, r25
    d3c4:	8a 2b       	or	r24, r26
    d3c6:	8b 2b       	or	r24, r27
    d3c8:	09 f1       	breq	.+66     	; 0xd40c <sched_push+0x452>
    d3ca:	41 15       	cp	r20, r1
    d3cc:	51 05       	cpc	r21, r1
    d3ce:	61 05       	cpc	r22, r1
    d3d0:	71 05       	cpc	r23, r1
    d3d2:	e1 f0       	breq	.+56     	; 0xd40c <sched_push+0x452>
    d3d4:	d3 01       	movw	r26, r6
    d3d6:	c2 01       	movw	r24, r4
    d3d8:	07 2e       	mov	r0, r23
    d3da:	7e e1       	ldi	r23, 0x1E	; 30
    d3dc:	b6 95       	lsr	r27
    d3de:	a7 95       	ror	r26
    d3e0:	97 95       	ror	r25
    d3e2:	87 95       	ror	r24
    d3e4:	7a 95       	dec	r23
    d3e6:	d1 f7       	brne	.-12     	; 0xd3dc <sched_push+0x422>
    d3e8:	70 2d       	mov	r23, r0
    d3ea:	e8 2f       	mov	r30, r24
    d3ec:	e1 70       	andi	r30, 0x01	; 1
    d3ee:	ce 2e       	mov	r12, r30
    d3f0:	83 01       	movw	r16, r6
    d3f2:	72 01       	movw	r14, r4
    d3f4:	ee 24       	eor	r14, r14
    d3f6:	17 fd       	sbrc	r17, 7
    d3f8:	e3 94       	inc	r14
    d3fa:	ff 24       	eor	r15, r15
    d3fc:	00 27       	eor	r16, r16
    d3fe:	11 27       	eor	r17, r17
    d400:	00 e0       	ldi	r16, 0x00	; 0
    d402:	9a 01       	movw	r18, r20
    d404:	ab 01       	movw	r20, r22
    d406:	60 e0       	ldi	r22, 0x00	; 0
    d408:	c2 01       	movw	r24, r4
    d40a:	d7 dd       	rcall	.-1106   	; 0xcfba <sched_push>
    d40c:	d5 01       	movw	r26, r10
    d40e:	13 96       	adiw	r26, 0x03	; 3
    d410:	8c 91       	ld	r24, X
    d412:	13 97       	sbiw	r26, 0x03	; 3
    d414:	12 96       	adiw	r26, 0x02	; 2
    d416:	9c 91       	ld	r25, X
    d418:	98 13       	cpse	r25, r24
    d41a:	55 cf       	rjmp	.-342    	; 0xd2c6 <sched_push+0x30c>
    d41c:	0c 81       	ldd	r16, Y+4	; 0x04
    d41e:	1d 81       	ldd	r17, Y+5	; 0x05
    d420:	2e 81       	ldd	r18, Y+6	; 0x06
    d422:	3f 81       	ldd	r19, Y+7	; 0x07
    d424:	01 2b       	or	r16, r17
    d426:	02 2b       	or	r16, r18
    d428:	03 2b       	or	r16, r19
    d42a:	21 f1       	breq	.+72     	; 0xd474 <sched_push+0x4ba>
    d42c:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <rtc_get_time>
    d430:	8b 01       	movw	r16, r22
    d432:	9c 01       	movw	r18, r24
    d434:	0e 5f       	subi	r16, 0xFE	; 254
    d436:	1f 4f       	sbci	r17, 0xFF	; 255
    d438:	2f 4f       	sbci	r18, 0xFF	; 255
    d43a:	3f 4f       	sbci	r19, 0xFF	; 255
    d43c:	6c 81       	ldd	r22, Y+4	; 0x04
    d43e:	7d 81       	ldd	r23, Y+5	; 0x05
    d440:	8e 81       	ldd	r24, Y+6	; 0x06
    d442:	9f 81       	ldd	r25, Y+7	; 0x07
    d444:	60 17       	cp	r22, r16
    d446:	71 07       	cpc	r23, r17
    d448:	82 07       	cpc	r24, r18
    d44a:	93 07       	cpc	r25, r19
    d44c:	10 f4       	brcc	.+4      	; 0xd452 <sched_push+0x498>
    d44e:	c9 01       	movw	r24, r18
    d450:	b8 01       	movw	r22, r16
    d452:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <rtc_set_alarm>
    d456:	0e c0       	rjmp	.+28     	; 0xd474 <sched_push+0x4ba>
    d458:	80 91 a1 25 	lds	r24, 0x25A1	; 0x8025a1 <g_sched_data+0x6>
    d45c:	80 fd       	sbrc	r24, 0
    d45e:	7b ce       	rjmp	.-778    	; 0xd156 <sched_push+0x19c>
    d460:	80 e0       	ldi	r24, 0x00	; 0
    d462:	90 e0       	ldi	r25, 0x00	; 0
    d464:	88 ce       	rjmp	.-752    	; 0xd176 <sched_push+0x1bc>
    d466:	8f e7       	ldi	r24, 0x7F	; 127
    d468:	96 e2       	ldi	r25, 0x26	; 38
    d46a:	5c dd       	rcall	.-1352   	; 0xcf24 <sched_getLock>
    d46c:	88 23       	and	r24, r24
    d46e:	09 f4       	brne	.+2      	; 0xd472 <sched_push+0x4b8>
    d470:	18 ce       	rjmp	.-976    	; 0xd0a2 <sched_push+0xe8>
    d472:	f2 cf       	rjmp	.-28     	; 0xd458 <sched_push+0x49e>
    d474:	2b 96       	adiw	r28, 0x0b	; 11
    d476:	cd bf       	out	0x3d, r28	; 61
    d478:	de bf       	out	0x3e, r29	; 62
    d47a:	df 91       	pop	r29
    d47c:	cf 91       	pop	r28
    d47e:	1f 91       	pop	r17
    d480:	0f 91       	pop	r16
    d482:	ff 90       	pop	r15
    d484:	ef 90       	pop	r14
    d486:	cf 90       	pop	r12
    d488:	bf 90       	pop	r11
    d48a:	af 90       	pop	r10
    d48c:	9f 90       	pop	r9
    d48e:	8f 90       	pop	r8
    d490:	7f 90       	pop	r7
    d492:	6f 90       	pop	r6
    d494:	5f 90       	pop	r5
    d496:	4f 90       	pop	r4
    d498:	3f 90       	pop	r3
    d49a:	2f 90       	pop	r2
    d49c:	08 95       	ret

0000d49e <dds_update>:
    d49e:	4f 92       	push	r4
    d4a0:	5f 92       	push	r5
    d4a2:	6f 92       	push	r6
    d4a4:	7f 92       	push	r7
    d4a6:	8f 92       	push	r8
    d4a8:	9f 92       	push	r9
    d4aa:	af 92       	push	r10
    d4ac:	bf 92       	push	r11
    d4ae:	cf 92       	push	r12
    d4b0:	df 92       	push	r13
    d4b2:	ef 92       	push	r14
    d4b4:	ff 92       	push	r15
    d4b6:	0f 93       	push	r16
    d4b8:	1f 93       	push	r17
    d4ba:	cf 93       	push	r28
    d4bc:	df 93       	push	r29
    d4be:	cd b7       	in	r28, 0x3d	; 61
    d4c0:	de b7       	in	r29, 0x3e	; 62
    d4c2:	2d 97       	sbiw	r28, 0x0d	; 13
    d4c4:	cd bf       	out	0x3d, r28	; 61
    d4c6:	de bf       	out	0x3e, r29	; 62
    d4c8:	6a 83       	std	Y+2, r22	; 0x02
    d4ca:	7b 83       	std	Y+3, r23	; 0x03
    d4cc:	8c 83       	std	Y+4, r24	; 0x04
    d4ce:	9d 83       	std	Y+5, r25	; 0x05
    d4d0:	2e 83       	std	Y+6, r18	; 0x06
    d4d2:	3f 83       	std	Y+7, r19	; 0x07
    d4d4:	48 87       	std	Y+8, r20	; 0x08
    d4d6:	59 87       	std	Y+9, r21	; 0x09
    d4d8:	ea 86       	std	Y+10, r14	; 0x0a
    d4da:	fb 86       	std	Y+11, r15	; 0x0b
    d4dc:	0c 87       	std	Y+12, r16	; 0x0c
    d4de:	1d 87       	std	Y+13, r17	; 0x0d
    d4e0:	20 e0       	ldi	r18, 0x00	; 0
    d4e2:	30 e0       	ldi	r19, 0x00	; 0
    d4e4:	a9 01       	movw	r20, r18
    d4e6:	0e 94 53 7f 	call	0xfea6	; 0xfea6 <__gesf2>
    d4ea:	88 23       	and	r24, r24
    d4ec:	7c f0       	brlt	.+30     	; 0xd50c <dds_update+0x6e>
    d4ee:	20 e0       	ldi	r18, 0x00	; 0
    d4f0:	30 e0       	ldi	r19, 0x00	; 0
    d4f2:	4a e7       	ldi	r20, 0x7A	; 122
    d4f4:	54 e4       	ldi	r21, 0x44	; 68
    d4f6:	6a 81       	ldd	r22, Y+2	; 0x02
    d4f8:	7b 81       	ldd	r23, Y+3	; 0x03
    d4fa:	8c 81       	ldd	r24, Y+4	; 0x04
    d4fc:	9d 81       	ldd	r25, Y+5	; 0x05
    d4fe:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    d502:	0e 94 3c 7e 	call	0xfc78	; 0xfc78 <__fixunssfsi>
    d506:	2b 01       	movw	r4, r22
    d508:	3c 01       	movw	r6, r24
    d50a:	03 c0       	rjmp	.+6      	; 0xd512 <dds_update+0x74>
    d50c:	41 2c       	mov	r4, r1
    d50e:	51 2c       	mov	r5, r1
    d510:	32 01       	movw	r6, r4
    d512:	20 e0       	ldi	r18, 0x00	; 0
    d514:	30 e0       	ldi	r19, 0x00	; 0
    d516:	a9 01       	movw	r20, r18
    d518:	6e 81       	ldd	r22, Y+6	; 0x06
    d51a:	7f 81       	ldd	r23, Y+7	; 0x07
    d51c:	88 85       	ldd	r24, Y+8	; 0x08
    d51e:	99 85       	ldd	r25, Y+9	; 0x09
    d520:	0e 94 53 7f 	call	0xfea6	; 0xfea6 <__gesf2>
    d524:	88 23       	and	r24, r24
    d526:	7c f0       	brlt	.+30     	; 0xd546 <dds_update+0xa8>
    d528:	20 e0       	ldi	r18, 0x00	; 0
    d52a:	30 e0       	ldi	r19, 0x00	; 0
    d52c:	4a e7       	ldi	r20, 0x7A	; 122
    d52e:	54 e4       	ldi	r21, 0x44	; 68
    d530:	6e 81       	ldd	r22, Y+6	; 0x06
    d532:	7f 81       	ldd	r23, Y+7	; 0x07
    d534:	88 85       	ldd	r24, Y+8	; 0x08
    d536:	99 85       	ldd	r25, Y+9	; 0x09
    d538:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    d53c:	0e 94 3c 7e 	call	0xfc78	; 0xfc78 <__fixunssfsi>
    d540:	4b 01       	movw	r8, r22
    d542:	5c 01       	movw	r10, r24
    d544:	03 c0       	rjmp	.+6      	; 0xd54c <dds_update+0xae>
    d546:	81 2c       	mov	r8, r1
    d548:	91 2c       	mov	r9, r1
    d54a:	54 01       	movw	r10, r8
    d54c:	20 e0       	ldi	r18, 0x00	; 0
    d54e:	30 e0       	ldi	r19, 0x00	; 0
    d550:	a9 01       	movw	r20, r18
    d552:	6a 85       	ldd	r22, Y+10	; 0x0a
    d554:	7b 85       	ldd	r23, Y+11	; 0x0b
    d556:	8c 85       	ldd	r24, Y+12	; 0x0c
    d558:	9d 85       	ldd	r25, Y+13	; 0x0d
    d55a:	0e 94 53 7f 	call	0xfea6	; 0xfea6 <__gesf2>
    d55e:	88 23       	and	r24, r24
    d560:	ac f0       	brlt	.+42     	; 0xd58c <dds_update+0xee>
    d562:	20 e0       	ldi	r18, 0x00	; 0
    d564:	30 e0       	ldi	r19, 0x00	; 0
    d566:	44 eb       	ldi	r20, 0xB4	; 180
    d568:	52 e4       	ldi	r21, 0x42	; 66
    d56a:	6a 85       	ldd	r22, Y+10	; 0x0a
    d56c:	7b 85       	ldd	r23, Y+11	; 0x0b
    d56e:	8c 85       	ldd	r24, Y+12	; 0x0c
    d570:	9d 85       	ldd	r25, Y+13	; 0x0d
    d572:	0e 94 cf 7d 	call	0xfb9e	; 0xfb9e <__divsf3>
    d576:	20 e0       	ldi	r18, 0x00	; 0
    d578:	30 e0       	ldi	r19, 0x00	; 0
    d57a:	40 e8       	ldi	r20, 0x80	; 128
    d57c:	5e e4       	ldi	r21, 0x4E	; 78
    d57e:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
    d582:	0e 94 3c 7e 	call	0xfc78	; 0xfc78 <__fixunssfsi>
    d586:	6b 01       	movw	r12, r22
    d588:	7c 01       	movw	r14, r24
    d58a:	03 c0       	rjmp	.+6      	; 0xd592 <dds_update+0xf4>
    d58c:	c1 2c       	mov	r12, r1
    d58e:	d1 2c       	mov	r13, r1
    d590:	76 01       	movw	r14, r12
    d592:	8f b7       	in	r24, 0x3f	; 63
    d594:	89 83       	std	Y+1, r24	; 0x01
    d596:	f8 94       	cli
    d598:	19 81       	ldd	r17, Y+1	; 0x01
    d59a:	20 e0       	ldi	r18, 0x00	; 0
    d59c:	30 e0       	ldi	r19, 0x00	; 0
    d59e:	a9 01       	movw	r20, r18
    d5a0:	6a 81       	ldd	r22, Y+2	; 0x02
    d5a2:	7b 81       	ldd	r23, Y+3	; 0x03
    d5a4:	8c 81       	ldd	r24, Y+4	; 0x04
    d5a6:	9d 81       	ldd	r25, Y+5	; 0x05
    d5a8:	0e 94 53 7f 	call	0xfea6	; 0xfea6 <__gesf2>
    d5ac:	88 23       	and	r24, r24
    d5ae:	44 f0       	brlt	.+16     	; 0xd5c0 <dds_update+0x122>
    d5b0:	40 92 13 20 	sts	0x2013, r4	; 0x802013 <dds0_freq_mHz>
    d5b4:	50 92 14 20 	sts	0x2014, r5	; 0x802014 <dds0_freq_mHz+0x1>
    d5b8:	60 92 15 20 	sts	0x2015, r6	; 0x802015 <dds0_freq_mHz+0x2>
    d5bc:	70 92 16 20 	sts	0x2016, r7	; 0x802016 <dds0_freq_mHz+0x3>
    d5c0:	20 e0       	ldi	r18, 0x00	; 0
    d5c2:	30 e0       	ldi	r19, 0x00	; 0
    d5c4:	a9 01       	movw	r20, r18
    d5c6:	6e 81       	ldd	r22, Y+6	; 0x06
    d5c8:	7f 81       	ldd	r23, Y+7	; 0x07
    d5ca:	88 85       	ldd	r24, Y+8	; 0x08
    d5cc:	99 85       	ldd	r25, Y+9	; 0x09
    d5ce:	0e 94 53 7f 	call	0xfea6	; 0xfea6 <__gesf2>
    d5d2:	88 23       	and	r24, r24
    d5d4:	44 f0       	brlt	.+16     	; 0xd5e6 <dds_update+0x148>
    d5d6:	80 92 0f 20 	sts	0x200F, r8	; 0x80200f <dds1_freq_mHz>
    d5da:	90 92 10 20 	sts	0x2010, r9	; 0x802010 <dds1_freq_mHz+0x1>
    d5de:	a0 92 11 20 	sts	0x2011, r10	; 0x802011 <dds1_freq_mHz+0x2>
    d5e2:	b0 92 12 20 	sts	0x2012, r11	; 0x802012 <dds1_freq_mHz+0x3>
    d5e6:	20 e0       	ldi	r18, 0x00	; 0
    d5e8:	30 e0       	ldi	r19, 0x00	; 0
    d5ea:	a9 01       	movw	r20, r18
    d5ec:	6a 85       	ldd	r22, Y+10	; 0x0a
    d5ee:	7b 85       	ldd	r23, Y+11	; 0x0b
    d5f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    d5f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    d5f4:	0e 94 53 7f 	call	0xfea6	; 0xfea6 <__gesf2>
    d5f8:	88 23       	and	r24, r24
    d5fa:	84 f0       	brlt	.+32     	; 0xd61c <dds_update+0x17e>
    d5fc:	10 92 09 25 	sts	0x2509, r1	; 0x802509 <dds0_reg>
    d600:	10 92 0a 25 	sts	0x250A, r1	; 0x80250a <dds0_reg+0x1>
    d604:	10 92 0b 25 	sts	0x250B, r1	; 0x80250b <dds0_reg+0x2>
    d608:	10 92 0c 25 	sts	0x250C, r1	; 0x80250c <dds0_reg+0x3>
    d60c:	c0 92 0b 20 	sts	0x200B, r12	; 0x80200b <dds1_reg>
    d610:	d0 92 0c 20 	sts	0x200C, r13	; 0x80200c <dds1_reg+0x1>
    d614:	e0 92 0d 20 	sts	0x200D, r14	; 0x80200d <dds1_reg+0x2>
    d618:	f0 92 0e 20 	sts	0x200E, r15	; 0x80200e <dds1_reg+0x3>
    d61c:	1f bf       	out	0x3f, r17	; 63
    d61e:	c1 2c       	mov	r12, r1
    d620:	e1 2c       	mov	r14, r1
    d622:	01 e0       	ldi	r16, 0x01	; 1
    d624:	2a e0       	ldi	r18, 0x0A	; 10
    d626:	30 e0       	ldi	r19, 0x00	; 0
    d628:	40 e0       	ldi	r20, 0x00	; 0
    d62a:	50 e0       	ldi	r21, 0x00	; 0
    d62c:	60 e0       	ldi	r22, 0x00	; 0
    d62e:	82 e9       	ldi	r24, 0x92	; 146
    d630:	9f e5       	ldi	r25, 0x5F	; 95
    d632:	c3 dc       	rcall	.-1658   	; 0xcfba <sched_push>
    d634:	2d 96       	adiw	r28, 0x0d	; 13
    d636:	cd bf       	out	0x3d, r28	; 61
    d638:	de bf       	out	0x3e, r29	; 62
    d63a:	df 91       	pop	r29
    d63c:	cf 91       	pop	r28
    d63e:	1f 91       	pop	r17
    d640:	0f 91       	pop	r16
    d642:	ff 90       	pop	r15
    d644:	ef 90       	pop	r14
    d646:	df 90       	pop	r13
    d648:	cf 90       	pop	r12
    d64a:	bf 90       	pop	r11
    d64c:	af 90       	pop	r10
    d64e:	9f 90       	pop	r9
    d650:	8f 90       	pop	r8
    d652:	7f 90       	pop	r7
    d654:	6f 90       	pop	r6
    d656:	5f 90       	pop	r5
    d658:	4f 90       	pop	r4
    d65a:	08 95       	ret

0000d65c <isr_tcc0_ovfl>:
    d65c:	cf 92       	push	r12
    d65e:	df 92       	push	r13
    d660:	ef 92       	push	r14
    d662:	ff 92       	push	r15
    d664:	0f 93       	push	r16
    d666:	1f 93       	push	r17
    d668:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <rtc_get_time>
    d66c:	21 e0       	ldi	r18, 0x01	; 1
    d66e:	20 93 0c 08 	sts	0x080C, r18	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    d672:	20 91 7d 28 	lds	r18, 0x287D	; 0x80287d <g_workmode>
    d676:	22 30       	cpi	r18, 0x02	; 2
    d678:	09 f0       	breq	.+2      	; 0xd67c <isr_tcc0_ovfl+0x20>
    d67a:	65 c0       	rjmp	.+202    	; 0xd746 <isr_tcc0_ovfl+0xea>
    d67c:	00 91 b9 24 	lds	r16, 0x24B9	; 0x8024b9 <last_100ms.8062>
    d680:	10 91 ba 24 	lds	r17, 0x24BA	; 0x8024ba <last_100ms.8062+0x1>
    d684:	20 91 bb 24 	lds	r18, 0x24BB	; 0x8024bb <last_100ms.8062+0x2>
    d688:	30 91 bc 24 	lds	r19, 0x24BC	; 0x8024bc <last_100ms.8062+0x3>
    d68c:	6b 01       	movw	r12, r22
    d68e:	7c 01       	movw	r14, r24
    d690:	c0 1a       	sub	r12, r16
    d692:	d1 0a       	sbc	r13, r17
    d694:	e2 0a       	sbc	r14, r18
    d696:	f3 0a       	sbc	r15, r19
    d698:	46 e6       	ldi	r20, 0x66	; 102
    d69a:	c4 16       	cp	r12, r20
    d69c:	d1 04       	cpc	r13, r1
    d69e:	e1 04       	cpc	r14, r1
    d6a0:	f1 04       	cpc	r15, r1
    d6a2:	28 f4       	brcc	.+10     	; 0xd6ae <isr_tcc0_ovfl+0x52>
    d6a4:	60 17       	cp	r22, r16
    d6a6:	71 07       	cpc	r23, r17
    d6a8:	82 07       	cpc	r24, r18
    d6aa:	93 07       	cpc	r25, r19
    d6ac:	58 f4       	brcc	.+22     	; 0xd6c4 <isr_tcc0_ovfl+0x68>
    d6ae:	60 93 b9 24 	sts	0x24B9, r22	; 0x8024b9 <last_100ms.8062>
    d6b2:	70 93 ba 24 	sts	0x24BA, r23	; 0x8024ba <last_100ms.8062+0x1>
    d6b6:	80 93 bb 24 	sts	0x24BB, r24	; 0x8024bb <last_100ms.8062+0x2>
    d6ba:	90 93 bc 24 	sts	0x24BC, r25	; 0x8024bc <last_100ms.8062+0x3>
    d6be:	0e 94 6f 34 	call	0x68de	; 0x68de <isr_100ms_twi1_onboard>
    d6c2:	41 c0       	rjmp	.+130    	; 0xd746 <isr_tcc0_ovfl+0xea>
    d6c4:	00 91 b5 24 	lds	r16, 0x24B5	; 0x8024b5 <last_500ms.8063>
    d6c8:	10 91 b6 24 	lds	r17, 0x24B6	; 0x8024b6 <last_500ms.8063+0x1>
    d6cc:	20 91 b7 24 	lds	r18, 0x24B7	; 0x8024b7 <last_500ms.8063+0x2>
    d6d0:	30 91 b8 24 	lds	r19, 0x24B8	; 0x8024b8 <last_500ms.8063+0x3>
    d6d4:	6b 01       	movw	r12, r22
    d6d6:	7c 01       	movw	r14, r24
    d6d8:	c0 1a       	sub	r12, r16
    d6da:	d1 0a       	sbc	r13, r17
    d6dc:	e2 0a       	sbc	r14, r18
    d6de:	f3 0a       	sbc	r15, r19
    d6e0:	c1 14       	cp	r12, r1
    d6e2:	42 e0       	ldi	r20, 0x02	; 2
    d6e4:	d4 06       	cpc	r13, r20
    d6e6:	e1 04       	cpc	r14, r1
    d6e8:	f1 04       	cpc	r15, r1
    d6ea:	28 f4       	brcc	.+10     	; 0xd6f6 <isr_tcc0_ovfl+0x9a>
    d6ec:	60 17       	cp	r22, r16
    d6ee:	71 07       	cpc	r23, r17
    d6f0:	82 07       	cpc	r24, r18
    d6f2:	93 07       	cpc	r25, r19
    d6f4:	30 f5       	brcc	.+76     	; 0xd742 <isr_tcc0_ovfl+0xe6>
    d6f6:	60 93 b5 24 	sts	0x24B5, r22	; 0x8024b5 <last_500ms.8063>
    d6fa:	70 93 b6 24 	sts	0x24B6, r23	; 0x8024b6 <last_500ms.8063+0x1>
    d6fe:	80 93 b7 24 	sts	0x24B7, r24	; 0x8024b7 <last_500ms.8063+0x2>
    d702:	90 93 b8 24 	sts	0x24B8, r25	; 0x8024b8 <last_500ms.8063+0x3>
    d706:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <isr_500ms_twi1_onboard>
    d70a:	c1 2c       	mov	r12, r1
    d70c:	e1 2c       	mov	r14, r1
    d70e:	01 e0       	ldi	r16, 0x01	; 1
    d710:	24 e6       	ldi	r18, 0x64	; 100
    d712:	30 e0       	ldi	r19, 0x00	; 0
    d714:	40 e0       	ldi	r20, 0x00	; 0
    d716:	50 e0       	ldi	r21, 0x00	; 0
    d718:	60 e0       	ldi	r22, 0x00	; 0
    d71a:	84 e9       	ldi	r24, 0x94	; 148
    d71c:	90 e6       	ldi	r25, 0x60	; 96
    d71e:	4d dc       	rcall	.-1894   	; 0xcfba <sched_push>
    d720:	24 e6       	ldi	r18, 0x64	; 100
    d722:	30 e0       	ldi	r19, 0x00	; 0
    d724:	40 e0       	ldi	r20, 0x00	; 0
    d726:	50 e0       	ldi	r21, 0x00	; 0
    d728:	60 e0       	ldi	r22, 0x00	; 0
    d72a:	82 e9       	ldi	r24, 0x92	; 146
    d72c:	9f e5       	ldi	r25, 0x5F	; 95
    d72e:	45 dc       	rcall	.-1910   	; 0xcfba <sched_push>
    d730:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <rtc_get_time>
    d734:	6e 5f       	subi	r22, 0xFE	; 254
    d736:	7f 4f       	sbci	r23, 0xFF	; 255
    d738:	8f 4f       	sbci	r24, 0xFF	; 255
    d73a:	9f 4f       	sbci	r25, 0xFF	; 255
    d73c:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <rtc_set_alarm>
    d740:	02 c0       	rjmp	.+4      	; 0xd746 <isr_tcc0_ovfl+0xea>
    d742:	0e 94 f6 35 	call	0x6bec	; 0x6bec <isr_sparetime_twi1_onboard>
    d746:	1f 91       	pop	r17
    d748:	0f 91       	pop	r16
    d74a:	ff 90       	pop	r15
    d74c:	ef 90       	pop	r14
    d74e:	df 90       	pop	r13
    d750:	cf 90       	pop	r12
    d752:	08 95       	ret

0000d754 <sched_pop>:
    d754:	7f 92       	push	r7
    d756:	8f 92       	push	r8
    d758:	9f 92       	push	r9
    d75a:	af 92       	push	r10
    d75c:	bf 92       	push	r11
    d75e:	cf 92       	push	r12
    d760:	df 92       	push	r13
    d762:	ef 92       	push	r14
    d764:	ff 92       	push	r15
    d766:	0f 93       	push	r16
    d768:	1f 93       	push	r17
    d76a:	cf 93       	push	r28
    d76c:	df 93       	push	r29
    d76e:	1f 92       	push	r1
    d770:	cd b7       	in	r28, 0x3d	; 61
    d772:	de b7       	in	r29, 0x3e	; 62
    d774:	4b 01       	movw	r8, r22
    d776:	5c 01       	movw	r10, r24
    d778:	8f e7       	ldi	r24, 0x7F	; 127
    d77a:	96 e2       	ldi	r25, 0x26	; 38
    d77c:	d3 db       	rcall	.-2138   	; 0xcf24 <sched_getLock>
    d77e:	81 11       	cpse	r24, r1
    d780:	04 c0       	rjmp	.+8      	; 0xd78a <sched_pop+0x36>
    d782:	81 e0       	ldi	r24, 0x01	; 1
    d784:	80 93 7b 26 	sts	0x267B, r24	; 0x80267b <g_sched_pop_again>
    d788:	cd c0       	rjmp	.+410    	; 0xd924 <sched_pop+0x1d0>
    d78a:	70 90 7b 25 	lds	r7, 0x257B	; 0x80257b <g_sched_sort>
    d78e:	77 20       	and	r7, r7
    d790:	09 f4       	brne	.+2      	; 0xd794 <sched_pop+0x40>
    d792:	c4 c0       	rjmp	.+392    	; 0xd91c <sched_pop+0x1c8>
    d794:	87 2d       	mov	r24, r7
    d796:	90 e0       	ldi	r25, 0x00	; 0
    d798:	01 97       	sbiw	r24, 0x01	; 1
    d79a:	fc 01       	movw	r30, r24
    d79c:	ee 0f       	add	r30, r30
    d79e:	ff 1f       	adc	r31, r31
    d7a0:	ee 0f       	add	r30, r30
    d7a2:	ff 1f       	adc	r31, r31
    d7a4:	ee 0f       	add	r30, r30
    d7a6:	ff 1f       	adc	r31, r31
    d7a8:	e8 1b       	sub	r30, r24
    d7aa:	f9 0b       	sbc	r31, r25
    d7ac:	ef 55       	subi	r30, 0x5F	; 95
    d7ae:	fa 4d       	sbci	r31, 0xDA	; 218
    d7b0:	20 81       	ld	r18, Z
    d7b2:	20 ff       	sbrs	r18, 0
    d7b4:	b3 c0       	rjmp	.+358    	; 0xd91c <sched_pop+0x1c8>
    d7b6:	fc 01       	movw	r30, r24
    d7b8:	ee 0f       	add	r30, r30
    d7ba:	ff 1f       	adc	r31, r31
    d7bc:	ee 0f       	add	r30, r30
    d7be:	ff 1f       	adc	r31, r31
    d7c0:	ee 0f       	add	r30, r30
    d7c2:	ff 1f       	adc	r31, r31
    d7c4:	e8 1b       	sub	r30, r24
    d7c6:	f9 0b       	sbc	r31, r25
    d7c8:	e5 56       	subi	r30, 0x65	; 101
    d7ca:	fa 4d       	sbci	r31, 0xDA	; 218
    d7cc:	c0 80       	ld	r12, Z
    d7ce:	d1 80       	ldd	r13, Z+1	; 0x01
    d7d0:	e2 80       	ldd	r14, Z+2	; 0x02
    d7d2:	f3 80       	ldd	r15, Z+3	; 0x03
    d7d4:	0b e7       	ldi	r16, 0x7B	; 123
    d7d6:	15 e2       	ldi	r17, 0x25	; 37
    d7d8:	74 c0       	rjmp	.+232    	; 0xd8c2 <sched_pop+0x16e>
    d7da:	87 2d       	mov	r24, r7
    d7dc:	90 e0       	ldi	r25, 0x00	; 0
    d7de:	01 97       	sbiw	r24, 0x01	; 1
    d7e0:	dc 01       	movw	r26, r24
    d7e2:	aa 0f       	add	r26, r26
    d7e4:	bb 1f       	adc	r27, r27
    d7e6:	aa 0f       	add	r26, r26
    d7e8:	bb 1f       	adc	r27, r27
    d7ea:	aa 0f       	add	r26, r26
    d7ec:	bb 1f       	adc	r27, r27
    d7ee:	a8 1b       	sub	r26, r24
    d7f0:	b9 0b       	sbc	r27, r25
    d7f2:	fd 01       	movw	r30, r26
    d7f4:	e5 56       	subi	r30, 0x65	; 101
    d7f6:	fa 4d       	sbci	r31, 0xDA	; 218
    d7f8:	04 80       	ldd	r0, Z+4	; 0x04
    d7fa:	f5 81       	ldd	r31, Z+5	; 0x05
    d7fc:	e0 2d       	mov	r30, r0
    d7fe:	af 55       	subi	r26, 0x5F	; 95
    d800:	ba 4d       	sbci	r27, 0xDA	; 218
    d802:	6c 91       	ld	r22, X
    d804:	66 95       	lsr	r22
    d806:	66 95       	lsr	r22
    d808:	66 95       	lsr	r22
    d80a:	63 70       	andi	r22, 0x03	; 3
    d80c:	8c 91       	ld	r24, X
    d80e:	81 fb       	bst	r24, 1
    d810:	77 27       	eor	r23, r23
    d812:	70 f9       	bld	r23, 0
    d814:	4c 91       	ld	r20, X
    d816:	42 fb       	bst	r20, 2
    d818:	44 27       	eor	r20, r20
    d81a:	40 f9       	bld	r20, 0
    d81c:	8c 91       	ld	r24, X
    d81e:	8e 7f       	andi	r24, 0xFE	; 254
    d820:	8c 93       	st	X, r24
    d822:	80 e0       	ldi	r24, 0x00	; 0
    d824:	90 e0       	ldi	r25, 0x00	; 0
    d826:	9c 01       	movw	r18, r24
    d828:	2f 5f       	subi	r18, 0xFF	; 255
    d82a:	3f 4f       	sbci	r19, 0xFF	; 255
    d82c:	d9 01       	movw	r26, r18
    d82e:	a5 58       	subi	r26, 0x85	; 133
    d830:	ba 4d       	sbci	r27, 0xDA	; 218
    d832:	5c 91       	ld	r21, X
    d834:	dc 01       	movw	r26, r24
    d836:	a5 58       	subi	r26, 0x85	; 133
    d838:	ba 4d       	sbci	r27, 0xDA	; 218
    d83a:	5c 93       	st	X, r21
    d83c:	c9 01       	movw	r24, r18
    d83e:	2f 31       	cpi	r18, 0x1F	; 31
    d840:	31 05       	cpc	r19, r1
    d842:	89 f7       	brne	.-30     	; 0xd826 <sched_pop+0xd2>
    d844:	d8 01       	movw	r26, r16
    d846:	5f 96       	adiw	r26, 0x1f	; 31
    d848:	1c 92       	st	X, r1
    d84a:	30 97       	sbiw	r30, 0x00	; 0
    d84c:	b1 f0       	breq	.+44     	; 0xd87a <sched_pop+0x126>
    d84e:	8f b7       	in	r24, 0x3f	; 63
    d850:	89 83       	std	Y+1, r24	; 0x01
    d852:	f8 94       	cli
    d854:	79 80       	ldd	r7, Y+1	; 0x01
    d856:	77 23       	and	r23, r23
    d858:	11 f0       	breq	.+4      	; 0xd85e <sched_pop+0x10a>
    d85a:	f8 94       	cli
    d85c:	01 c0       	rjmp	.+2      	; 0xd860 <sched_pop+0x10c>
    d85e:	78 94       	sei
    d860:	66 23       	and	r22, r22
    d862:	19 f0       	breq	.+6      	; 0xd86a <sched_pop+0x116>
    d864:	61 30       	cpi	r22, 0x01	; 1
    d866:	29 f0       	breq	.+10     	; 0xd872 <sched_pop+0x11e>
    d868:	07 c0       	rjmp	.+14     	; 0xd878 <sched_pop+0x124>
    d86a:	c7 01       	movw	r24, r14
    d86c:	b6 01       	movw	r22, r12
    d86e:	19 95       	eicall
    d870:	03 c0       	rjmp	.+6      	; 0xd878 <sched_pop+0x124>
    d872:	c7 01       	movw	r24, r14
    d874:	b6 01       	movw	r22, r12
    d876:	19 95       	eicall
    d878:	7f be       	out	0x3f, r7	; 63
    d87a:	f8 01       	movw	r30, r16
    d87c:	70 80       	ld	r7, Z
    d87e:	77 20       	and	r7, r7
    d880:	41 f1       	breq	.+80     	; 0xd8d2 <sched_pop+0x17e>
    d882:	87 2d       	mov	r24, r7
    d884:	90 e0       	ldi	r25, 0x00	; 0
    d886:	01 97       	sbiw	r24, 0x01	; 1
    d888:	fc 01       	movw	r30, r24
    d88a:	ee 0f       	add	r30, r30
    d88c:	ff 1f       	adc	r31, r31
    d88e:	ee 0f       	add	r30, r30
    d890:	ff 1f       	adc	r31, r31
    d892:	ee 0f       	add	r30, r30
    d894:	ff 1f       	adc	r31, r31
    d896:	e8 1b       	sub	r30, r24
    d898:	f9 0b       	sbc	r31, r25
    d89a:	ef 55       	subi	r30, 0x5F	; 95
    d89c:	fa 4d       	sbci	r31, 0xDA	; 218
    d89e:	20 81       	ld	r18, Z
    d8a0:	20 ff       	sbrs	r18, 0
    d8a2:	17 c0       	rjmp	.+46     	; 0xd8d2 <sched_pop+0x17e>
    d8a4:	fc 01       	movw	r30, r24
    d8a6:	ee 0f       	add	r30, r30
    d8a8:	ff 1f       	adc	r31, r31
    d8aa:	ee 0f       	add	r30, r30
    d8ac:	ff 1f       	adc	r31, r31
    d8ae:	ee 0f       	add	r30, r30
    d8b0:	ff 1f       	adc	r31, r31
    d8b2:	e8 1b       	sub	r30, r24
    d8b4:	f9 0b       	sbc	r31, r25
    d8b6:	e5 56       	subi	r30, 0x65	; 101
    d8b8:	fa 4d       	sbci	r31, 0xDA	; 218
    d8ba:	c0 80       	ld	r12, Z
    d8bc:	d1 80       	ldd	r13, Z+1	; 0x01
    d8be:	e2 80       	ldd	r14, Z+2	; 0x02
    d8c0:	f3 80       	ldd	r15, Z+3	; 0x03
    d8c2:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <rtc_get_time>
    d8c6:	6c 15       	cp	r22, r12
    d8c8:	7d 05       	cpc	r23, r13
    d8ca:	8e 05       	cpc	r24, r14
    d8cc:	9f 05       	cpc	r25, r15
    d8ce:	08 f0       	brcs	.+2      	; 0xd8d2 <sched_pop+0x17e>
    d8d0:	84 cf       	rjmp	.-248    	; 0xd7da <sched_pop+0x86>
    d8d2:	8f e7       	ldi	r24, 0x7F	; 127
    d8d4:	96 e2       	ldi	r25, 0x26	; 38
    d8d6:	3e db       	rcall	.-2436   	; 0xcf54 <sched_freeLock>
    d8d8:	c1 14       	cp	r12, r1
    d8da:	d1 04       	cpc	r13, r1
    d8dc:	e1 04       	cpc	r14, r1
    d8de:	f1 04       	cpc	r15, r1
    d8e0:	99 f0       	breq	.+38     	; 0xd908 <sched_pop+0x1b4>
    d8e2:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <rtc_get_time>
    d8e6:	8b 01       	movw	r16, r22
    d8e8:	9c 01       	movw	r18, r24
    d8ea:	0e 5f       	subi	r16, 0xFE	; 254
    d8ec:	1f 4f       	sbci	r17, 0xFF	; 255
    d8ee:	2f 4f       	sbci	r18, 0xFF	; 255
    d8f0:	3f 4f       	sbci	r19, 0xFF	; 255
    d8f2:	c7 01       	movw	r24, r14
    d8f4:	b6 01       	movw	r22, r12
    d8f6:	c0 16       	cp	r12, r16
    d8f8:	d1 06       	cpc	r13, r17
    d8fa:	e2 06       	cpc	r14, r18
    d8fc:	f3 06       	cpc	r15, r19
    d8fe:	10 f4       	brcc	.+4      	; 0xd904 <sched_pop+0x1b0>
    d900:	c9 01       	movw	r24, r18
    d902:	b8 01       	movw	r22, r16
    d904:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <rtc_set_alarm>
    d908:	80 91 7b 26 	lds	r24, 0x267B	; 0x80267b <g_sched_pop_again>
    d90c:	88 23       	and	r24, r24
    d90e:	51 f0       	breq	.+20     	; 0xd924 <sched_pop+0x1d0>
    d910:	10 92 7b 26 	sts	0x267B, r1	; 0x80267b <g_sched_pop_again>
    d914:	c5 01       	movw	r24, r10
    d916:	b4 01       	movw	r22, r8
    d918:	1d df       	rcall	.-454    	; 0xd754 <sched_pop>
    d91a:	04 c0       	rjmp	.+8      	; 0xd924 <sched_pop+0x1d0>
    d91c:	8f e7       	ldi	r24, 0x7F	; 127
    d91e:	96 e2       	ldi	r25, 0x26	; 38
    d920:	19 db       	rcall	.-2510   	; 0xcf54 <sched_freeLock>
    d922:	f2 cf       	rjmp	.-28     	; 0xd908 <sched_pop+0x1b4>
    d924:	0f 90       	pop	r0
    d926:	df 91       	pop	r29
    d928:	cf 91       	pop	r28
    d92a:	1f 91       	pop	r17
    d92c:	0f 91       	pop	r16
    d92e:	ff 90       	pop	r15
    d930:	ef 90       	pop	r14
    d932:	df 90       	pop	r13
    d934:	cf 90       	pop	r12
    d936:	bf 90       	pop	r11
    d938:	af 90       	pop	r10
    d93a:	9f 90       	pop	r9
    d93c:	8f 90       	pop	r8
    d93e:	7f 90       	pop	r7
    d940:	08 95       	ret

0000d942 <isr_rtc_alarm>:
    d942:	78 94       	sei
    d944:	07 cf       	rjmp	.-498    	; 0xd754 <sched_pop>
    d946:	08 95       	ret

0000d948 <yield_ms>:
    d948:	cf 92       	push	r12
    d94a:	ef 92       	push	r14
    d94c:	0f 93       	push	r16
    d94e:	1f 93       	push	r17
    d950:	cf 93       	push	r28
    d952:	df 93       	push	r29
    d954:	1f 92       	push	r1
    d956:	cd b7       	in	r28, 0x3d	; 61
    d958:	de b7       	in	r29, 0x3e	; 62
    d95a:	2f b7       	in	r18, 0x3f	; 63
    d95c:	29 83       	std	Y+1, r18	; 0x01
    d95e:	f8 94       	cli
    d960:	19 81       	ldd	r17, Y+1	; 0x01
    d962:	78 94       	sei
    d964:	21 e0       	ldi	r18, 0x01	; 1
    d966:	20 93 7c 26 	sts	0x267C, r18	; 0x80267c <g_sched_yield>
    d96a:	9c 01       	movw	r18, r24
    d96c:	40 e0       	ldi	r20, 0x00	; 0
    d96e:	50 e0       	ldi	r21, 0x00	; 0
    d970:	c1 2c       	mov	r12, r1
    d972:	e1 2c       	mov	r14, r1
    d974:	01 e0       	ldi	r16, 0x01	; 1
    d976:	60 e0       	ldi	r22, 0x00	; 0
    d978:	8a e7       	ldi	r24, 0x7A	; 122
    d97a:	9d e5       	ldi	r25, 0x5D	; 93
    d97c:	1e db       	rcall	.-2500   	; 0xcfba <sched_push>
    d97e:	fa da       	rcall	.-2572   	; 0xcf74 <sched_doSleep>
    d980:	80 91 7c 26 	lds	r24, 0x267C	; 0x80267c <g_sched_yield>
    d984:	81 11       	cpse	r24, r1
    d986:	fb cf       	rjmp	.-10     	; 0xd97e <yield_ms+0x36>
    d988:	1f bf       	out	0x3f, r17	; 63
    d98a:	0f 90       	pop	r0
    d98c:	df 91       	pop	r29
    d98e:	cf 91       	pop	r28
    d990:	1f 91       	pop	r17
    d992:	0f 91       	pop	r16
    d994:	ef 90       	pop	r14
    d996:	cf 90       	pop	r12
    d998:	08 95       	ret

0000d99a <__vector_4>:
    d99a:	1f 92       	push	r1
    d99c:	0f 92       	push	r0
    d99e:	0f b6       	in	r0, 0x3f	; 63
    d9a0:	0f 92       	push	r0
    d9a2:	11 24       	eor	r1, r1
    d9a4:	8f 93       	push	r24
    d9a6:	9f 93       	push	r25
    d9a8:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    d9ac:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    d9b0:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <g_1pps_last_lo>
    d9b4:	90 93 8d 28 	sts	0x288D, r25	; 0x80288d <g_1pps_last_lo+0x1>
    d9b8:	80 91 8e 28 	lds	r24, 0x288E	; 0x80288e <g_milliseconds_cnt64>
    d9bc:	80 93 84 28 	sts	0x2884, r24	; 0x802884 <g_1pps_last_hi>
    d9c0:	80 91 8f 28 	lds	r24, 0x288F	; 0x80288f <g_milliseconds_cnt64+0x1>
    d9c4:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <g_1pps_last_hi+0x1>
    d9c8:	80 91 90 28 	lds	r24, 0x2890	; 0x802890 <g_milliseconds_cnt64+0x2>
    d9cc:	80 93 86 28 	sts	0x2886, r24	; 0x802886 <g_1pps_last_hi+0x2>
    d9d0:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <g_milliseconds_cnt64+0x3>
    d9d4:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <g_1pps_last_hi+0x3>
    d9d8:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <g_milliseconds_cnt64+0x4>
    d9dc:	80 93 88 28 	sts	0x2888, r24	; 0x802888 <g_1pps_last_hi+0x4>
    d9e0:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <g_milliseconds_cnt64+0x5>
    d9e4:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <g_1pps_last_hi+0x5>
    d9e8:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <g_milliseconds_cnt64+0x6>
    d9ec:	80 93 8a 28 	sts	0x288A, r24	; 0x80288a <g_1pps_last_hi+0x6>
    d9f0:	80 91 95 28 	lds	r24, 0x2895	; 0x802895 <g_milliseconds_cnt64+0x7>
    d9f4:	80 93 8b 28 	sts	0x288B, r24	; 0x80288b <g_1pps_last_hi+0x7>
    d9f8:	81 e0       	ldi	r24, 0x01	; 1
    d9fa:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <g_1pps_last_new>
    d9fe:	9f 91       	pop	r25
    da00:	8f 91       	pop	r24
    da02:	0f 90       	pop	r0
    da04:	0f be       	out	0x3f, r0	; 63
    da06:	0f 90       	pop	r0
    da08:	1f 90       	pop	r1
    da0a:	18 95       	reti

0000da0c <main>:
    da0c:	cf 92       	push	r12
    da0e:	df 92       	push	r13
    da10:	ef 92       	push	r14
    da12:	ff 92       	push	r15
    da14:	0f 93       	push	r16
    da16:	1f 93       	push	r17
    da18:	cf 93       	push	r28
    da1a:	df 93       	push	r29
    da1c:	00 d0       	rcall	.+0      	; 0xda1e <main+0x12>
    da1e:	00 d0       	rcall	.+0      	; 0xda20 <main+0x14>
    da20:	cd b7       	in	r28, 0x3d	; 61
    da22:	de b7       	in	r29, 0x3e	; 62
    da24:	40 e2       	ldi	r20, 0x20	; 32
    da26:	67 ef       	ldi	r22, 0xF7	; 247
    da28:	7d e2       	ldi	r23, 0x2D	; 45
    da2a:	81 ef       	ldi	r24, 0xF1	; 241
    da2c:	9d e2       	ldi	r25, 0x2D	; 45
    da2e:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <fifo_init>
    da32:	11 e0       	ldi	r17, 0x01	; 1
    da34:	10 93 7d 28 	sts	0x287D, r17	; 0x80287d <g_workmode>
    da38:	e0 ea       	ldi	r30, 0xA0	; 160
    da3a:	f0 e0       	ldi	r31, 0x00	; 0
    da3c:	87 e0       	ldi	r24, 0x07	; 7
    da3e:	82 83       	std	Z+2, r24	; 0x02
    da40:	82 83       	std	Z+2, r24	; 0x02
    da42:	82 81       	ldd	r24, Z+2	; 0x02
    da44:	8f 77       	andi	r24, 0x7F	; 127
    da46:	82 83       	std	Z+2, r24	; 0x02
    da48:	11 82       	std	Z+1, r1	; 0x01
    da4a:	07 d1       	rcall	.+526    	; 0xdc5a <sysclk_init>
    da4c:	e7 e7       	ldi	r30, 0x77	; 119
    da4e:	fe e2       	ldi	r31, 0x2E	; 46
    da50:	10 82       	st	Z, r1
    da52:	11 82       	std	Z+1, r1	; 0x01
    da54:	12 82       	std	Z+2, r1	; 0x02
    da56:	13 82       	std	Z+3, r1	; 0x03
    da58:	14 82       	std	Z+4, r1	; 0x04
    da5a:	15 83       	std	Z+5, r17	; 0x05
    da5c:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <rtc_init>
    da60:	81 ea       	ldi	r24, 0xA1	; 161
    da62:	9c e6       	ldi	r25, 0x6C	; 108
    da64:	0e 94 6d 27 	call	0x4eda	; 0x4eda <rtc_set_callback>
    da68:	19 82       	std	Y+1, r1	; 0x01
    da6a:	1a 82       	std	Y+2, r1	; 0x02
    da6c:	1b 82       	std	Y+3, r1	; 0x03
    da6e:	1c 82       	std	Y+4, r1	; 0x04
    da70:	14 e0       	ldi	r17, 0x04	; 4
    da72:	e1 2e       	mov	r14, r17
    da74:	f1 2c       	mov	r15, r1
    da76:	00 e0       	ldi	r16, 0x00	; 0
    da78:	10 e0       	ldi	r17, 0x00	; 0
    da7a:	9e 01       	movw	r18, r28
    da7c:	2f 5f       	subi	r18, 0xFF	; 255
    da7e:	3f 4f       	sbci	r19, 0xFF	; 255
    da80:	40 e1       	ldi	r20, 0x10	; 16
    da82:	50 e0       	ldi	r21, 0x00	; 0
    da84:	60 e0       	ldi	r22, 0x00	; 0
    da86:	70 e0       	ldi	r23, 0x00	; 0
    da88:	82 e0       	ldi	r24, 0x02	; 2
    da8a:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <nvm_read>
    da8e:	81 11       	cpse	r24, r1
    da90:	11 c0       	rjmp	.+34     	; 0xdab4 <main+0xa8>
    da92:	8f b7       	in	r24, 0x3f	; 63
    da94:	8e 83       	std	Y+6, r24	; 0x06
    da96:	f8 94       	cli
    da98:	8e 81       	ldd	r24, Y+6	; 0x06
    da9a:	49 81       	ldd	r20, Y+1	; 0x01
    da9c:	5a 81       	ldd	r21, Y+2	; 0x02
    da9e:	6b 81       	ldd	r22, Y+3	; 0x03
    daa0:	7c 81       	ldd	r23, Y+4	; 0x04
    daa2:	40 93 04 27 	sts	0x2704, r20	; 0x802704 <g_xo_mode_pwm>
    daa6:	50 93 05 27 	sts	0x2705, r21	; 0x802705 <g_xo_mode_pwm+0x1>
    daaa:	60 93 06 27 	sts	0x2706, r22	; 0x802706 <g_xo_mode_pwm+0x2>
    daae:	70 93 07 27 	sts	0x2707, r23	; 0x802707 <g_xo_mode_pwm+0x3>
    dab2:	8f bf       	out	0x3f, r24	; 63
    dab4:	19 82       	std	Y+1, r1	; 0x01
    dab6:	1a 82       	std	Y+2, r1	; 0x02
    dab8:	12 e0       	ldi	r17, 0x02	; 2
    daba:	e1 2e       	mov	r14, r17
    dabc:	f1 2c       	mov	r15, r1
    dabe:	00 e0       	ldi	r16, 0x00	; 0
    dac0:	10 e0       	ldi	r17, 0x00	; 0
    dac2:	9e 01       	movw	r18, r28
    dac4:	2f 5f       	subi	r18, 0xFF	; 255
    dac6:	3f 4f       	sbci	r19, 0xFF	; 255
    dac8:	44 e1       	ldi	r20, 0x14	; 20
    daca:	50 e0       	ldi	r21, 0x00	; 0
    dacc:	60 e0       	ldi	r22, 0x00	; 0
    dace:	70 e0       	ldi	r23, 0x00	; 0
    dad0:	82 e0       	ldi	r24, 0x02	; 2
    dad2:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <nvm_read>
    dad6:	81 11       	cpse	r24, r1
    dad8:	0b c0       	rjmp	.+22     	; 0xdaf0 <main+0xe4>
    dada:	8f b7       	in	r24, 0x3f	; 63
    dadc:	8d 83       	std	Y+5, r24	; 0x05
    dade:	f8 94       	cli
    dae0:	8d 81       	ldd	r24, Y+5	; 0x05
    dae2:	29 81       	ldd	r18, Y+1	; 0x01
    dae4:	3a 81       	ldd	r19, Y+2	; 0x02
    dae6:	20 93 97 28 	sts	0x2897, r18	; 0x802897 <g_backlight_mode_pwm>
    daea:	30 93 98 28 	sts	0x2898, r19	; 0x802898 <g_backlight_mode_pwm+0x1>
    daee:	8f bf       	out	0x3f, r24	; 63
    daf0:	81 e0       	ldi	r24, 0x01	; 1
    daf2:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <__TEXT_REGION_LENGTH__+0x7007e2>
    daf6:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7007f0>
    dafa:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7007ea>
    dafe:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7007eb>
    db02:	80 93 e9 07 	sts	0x07E9, r24	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7007e9>
    db06:	62 e0       	ldi	r22, 0x02	; 2
    db08:	80 e0       	ldi	r24, 0x00	; 0
    db0a:	28 d1       	rcall	.+592    	; 0xdd5c <sysclk_enable_module>
    db0c:	e0 e8       	ldi	r30, 0x80	; 128
    db0e:	f1 e0       	ldi	r31, 0x01	; 1
    db10:	86 ec       	ldi	r24, 0xC6	; 198
    db12:	80 83       	st	Z, r24
    db14:	10 86       	std	Z+8, r1	; 0x08
    db16:	81 83       	std	Z+1, r24	; 0x01
    db18:	11 86       	std	Z+9, r1	; 0x09
    db1a:	82 83       	std	Z+2, r24	; 0x02
    db1c:	12 86       	std	Z+10, r1	; 0x0a
    db1e:	83 83       	std	Z+3, r24	; 0x03
    db20:	13 86       	std	Z+11, r1	; 0x0b
    db22:	88 ee       	ldi	r24, 0xE8	; 232
    db24:	84 83       	std	Z+4, r24	; 0x04
    db26:	14 86       	std	Z+12, r1	; 0x0c
    db28:	0e 94 ed 61 	call	0xc3da	; 0xc3da <tc_init>
    db2c:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <serial_init>
    db30:	80 91 63 20 	lds	r24, 0x2063	; 0x802063 <g_adc_enabled>
    db34:	81 11       	cpse	r24, r1
    db36:	0e 94 fc 63 	call	0xc7f8	; 0xc7f8 <adc_init>
    db3a:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <g_dac_enabled>
    db3e:	81 11       	cpse	r24, r1
    db40:	0e 94 7e 62 	call	0xc4fc	; 0xc4fc <dac_init>
    db44:	0e 94 65 34 	call	0x68ca	; 0x68ca <twi_init>
    db48:	0e 94 0e 47 	call	0x8e1c	; 0x8e1c <board_init>
    db4c:	80 e0       	ldi	r24, 0x00	; 0
    db4e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <nvm_init>
    db52:	78 94       	sei
    db54:	0e 94 4f 62 	call	0xc49e	; 0xc49e <tc_start>
    db58:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <g_dac_enabled>
    db5c:	81 11       	cpse	r24, r1
    db5e:	0e 94 47 63 	call	0xc68e	; 0xc68e <dac_start>
    db62:	80 91 63 20 	lds	r24, 0x2063	; 0x802063 <g_adc_enabled>
    db66:	88 23       	and	r24, r24
    db68:	09 f4       	brne	.+2      	; 0xdb6c <main+0x160>
    db6a:	57 c0       	rjmp	.+174    	; 0xdc1a <main+0x20e>
    db6c:	80 e0       	ldi	r24, 0x00	; 0
    db6e:	92 e0       	ldi	r25, 0x02	; 2
    db70:	0e 94 6f 47 	call	0x8ede	; 0x8ede <adc_enable>
    db74:	80 e4       	ldi	r24, 0x40	; 64
    db76:	92 e0       	ldi	r25, 0x02	; 2
    db78:	0e 94 6f 47 	call	0x8ede	; 0x8ede <adc_enable>
    db7c:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <usb_init>
    db80:	0e 94 93 37 	call	0x6f26	; 0x6f26 <twi_start>
    db84:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <serial_start>
    db88:	0e 94 1c 28 	call	0x5038	; 0x5038 <printHelp>
    db8c:	82 e0       	ldi	r24, 0x02	; 2
    db8e:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <twi2_set_leds>
    db92:	81 e0       	ldi	r24, 0x01	; 1
    db94:	80 93 08 27 	sts	0x2708, r24	; 0x802708 <g_twi2_lcd_repaint>
    db98:	82 e0       	ldi	r24, 0x02	; 2
    db9a:	80 93 7d 28 	sts	0x287D, r24	; 0x80287d <g_workmode>
    db9e:	82 e0       	ldi	r24, 0x02	; 2
    dba0:	82 30       	cpi	r24, 0x02	; 2
    dba2:	71 f4       	brne	.+28     	; 0xdbc0 <main+0x1b4>
    dba4:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <rtc_get_time>
    dba8:	6b 01       	movw	r12, r22
    dbaa:	7c 01       	movw	r14, r24
    dbac:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <task_serial>
    dbb0:	c7 01       	movw	r24, r14
    dbb2:	b6 01       	movw	r22, r12
    dbb4:	0e 94 6e 45 	call	0x8adc	; 0x8adc <task_twi>
    dbb8:	c7 01       	movw	r24, r14
    dbba:	b6 01       	movw	r22, r12
    dbbc:	0e 94 02 21 	call	0x4204	; 0x4204 <task_usb>
    dbc0:	80 e0       	ldi	r24, 0x00	; 0
    dbc2:	90 e0       	ldi	r25, 0x00	; 0
    dbc4:	c1 de       	rcall	.-638    	; 0xd948 <yield_ms>
    dbc6:	80 91 7d 28 	lds	r24, 0x287D	; 0x80287d <g_workmode>
    dbca:	81 11       	cpse	r24, r1
    dbcc:	e9 cf       	rjmp	.-46     	; 0xdba0 <main+0x194>
    dbce:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <twi2_set_leds>
    dbd2:	f8 94       	cli
    dbd4:	f8 94       	cli
    dbd6:	80 91 77 2e 	lds	r24, 0x2E77	; 0x802e77 <sleepmgr_locks>
    dbda:	81 11       	cpse	r24, r1
    dbdc:	09 c0       	rjmp	.+18     	; 0xdbf0 <main+0x1e4>
    dbde:	a8 e7       	ldi	r26, 0x78	; 120
    dbe0:	be e2       	ldi	r27, 0x2E	; 46
    dbe2:	e0 e0       	ldi	r30, 0x00	; 0
    dbe4:	ef 5f       	subi	r30, 0xFF	; 255
    dbe6:	8d 91       	ld	r24, X+
    dbe8:	88 23       	and	r24, r24
    dbea:	e1 f3       	breq	.-8      	; 0xdbe4 <main+0x1d8>
    dbec:	e1 11       	cpse	r30, r1
    dbee:	02 c0       	rjmp	.+4      	; 0xdbf4 <main+0x1e8>
    dbf0:	78 94       	sei
    dbf2:	25 c0       	rjmp	.+74     	; 0xdc3e <main+0x232>
    dbf4:	a8 e4       	ldi	r26, 0x48	; 72
    dbf6:	b0 e0       	ldi	r27, 0x00	; 0
    dbf8:	8c 91       	ld	r24, X
    dbfa:	f0 e0       	ldi	r31, 0x00	; 0
    dbfc:	ed 59       	subi	r30, 0x9D	; 157
    dbfe:	ff 4d       	sbci	r31, 0xDF	; 223
    dc00:	81 7f       	andi	r24, 0xF1	; 241
    dc02:	90 81       	ld	r25, Z
    dc04:	89 2b       	or	r24, r25
    dc06:	8c 93       	st	X, r24
    dc08:	8c 91       	ld	r24, X
    dc0a:	81 60       	ori	r24, 0x01	; 1
    dc0c:	8c 93       	st	X, r24
    dc0e:	78 94       	sei
    dc10:	88 95       	sleep
    dc12:	8c 91       	ld	r24, X
    dc14:	8e 7f       	andi	r24, 0xFE	; 254
    dc16:	8c 93       	st	X, r24
    dc18:	12 c0       	rjmp	.+36     	; 0xdc3e <main+0x232>
    dc1a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <usb_init>
    dc1e:	0e 94 93 37 	call	0x6f26	; 0x6f26 <twi_start>
    dc22:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <serial_start>
    dc26:	0e 94 1c 28 	call	0x5038	; 0x5038 <printHelp>
    dc2a:	82 e0       	ldi	r24, 0x02	; 2
    dc2c:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <twi2_set_leds>
    dc30:	81 e0       	ldi	r24, 0x01	; 1
    dc32:	80 93 08 27 	sts	0x2708, r24	; 0x802708 <g_twi2_lcd_repaint>
    dc36:	82 e0       	ldi	r24, 0x02	; 2
    dc38:	80 93 7d 28 	sts	0x287D, r24	; 0x80287d <g_workmode>
    dc3c:	b0 cf       	rjmp	.-160    	; 0xdb9e <main+0x192>
    dc3e:	80 e0       	ldi	r24, 0x00	; 0
    dc40:	90 e0       	ldi	r25, 0x00	; 0
    dc42:	26 96       	adiw	r28, 0x06	; 6
    dc44:	cd bf       	out	0x3d, r28	; 61
    dc46:	de bf       	out	0x3e, r29	; 62
    dc48:	df 91       	pop	r29
    dc4a:	cf 91       	pop	r28
    dc4c:	1f 91       	pop	r17
    dc4e:	0f 91       	pop	r16
    dc50:	ff 90       	pop	r15
    dc52:	ef 90       	pop	r14
    dc54:	df 90       	pop	r13
    dc56:	cf 90       	pop	r12
    dc58:	08 95       	ret

0000dc5a <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    dc5a:	cf 93       	push	r28
    dc5c:	df 93       	push	r29
    dc5e:	cd b7       	in	r28, 0x3d	; 61
    dc60:	de b7       	in	r29, 0x3e	; 62
    dc62:	28 97       	sbiw	r28, 0x08	; 8
    dc64:	cd bf       	out	0x3d, r28	; 61
    dc66:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    dc68:	8f ef       	ldi	r24, 0xFF	; 255
    dc6a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    dc6e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    dc72:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    dc76:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    dc7a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    dc7e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    dc82:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    dc86:	61 e0       	ldi	r22, 0x01	; 1
    dc88:	81 e4       	ldi	r24, 0x41	; 65
    dc8a:	90 e0       	ldi	r25, 0x00	; 0
    dc8c:	0e 94 bd 79 	call	0xf37a	; 0xf37a <ccp_write_io>
    dc90:	6c e1       	ldi	r22, 0x1C	; 28
    dc92:	70 e0       	ldi	r23, 0x00	; 0
    dc94:	82 e0       	ldi	r24, 0x02	; 2
    dc96:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    dc9a:	8a 83       	std	Y+2, r24	; 0x02
    dc9c:	6d e1       	ldi	r22, 0x1D	; 29
    dc9e:	70 e0       	ldi	r23, 0x00	; 0
    dca0:	82 e0       	ldi	r24, 0x02	; 2
    dca2:	0e 94 b3 79 	call	0xf366	; 0xf366 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    dca6:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    dca8:	89 81       	ldd	r24, Y+1	; 0x01
    dcaa:	9a 81       	ldd	r25, Y+2	; 0x02
    dcac:	01 96       	adiw	r24, 0x01	; 1
    dcae:	21 f4       	brne	.+8      	; 0xdcb8 <sysclk_init+0x5e>
		cal = 0x2340;
    dcb0:	80 e4       	ldi	r24, 0x40	; 64
    dcb2:	93 e2       	ldi	r25, 0x23	; 35
    dcb4:	89 83       	std	Y+1, r24	; 0x01
    dcb6:	9a 83       	std	Y+2, r25	; 0x02
    dcb8:	89 81       	ldd	r24, Y+1	; 0x01
    dcba:	9a 81       	ldd	r25, Y+2	; 0x02
    dcbc:	8b 83       	std	Y+3, r24	; 0x03
    dcbe:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    dcc0:	e0 e6       	ldi	r30, 0x60	; 96
    dcc2:	f0 e0       	ldi	r31, 0x00	; 0
    dcc4:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    dcc6:	8c 81       	ldd	r24, Y+4	; 0x04
    dcc8:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    dcca:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    dcce:	84 fd       	sbrc	r24, 4
    dcd0:	21 c0       	rjmp	.+66     	; 0xdd14 <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    dcd2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    dcd6:	83 fd       	sbrc	r24, 3
    dcd8:	0e c0       	rjmp	.+28     	; 0xdcf6 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    dcda:	e0 e5       	ldi	r30, 0x50	; 80
    dcdc:	f0 e0       	ldi	r31, 0x00	; 0
    dcde:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dce0:	8f b7       	in	r24, 0x3f	; 63
    dce2:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    dce4:	f8 94       	cli
	return flags;
    dce6:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    dce8:	80 81       	ld	r24, Z
    dcea:	88 60       	ori	r24, 0x08	; 8
    dcec:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dcee:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    dcf0:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    dcf2:	83 ff       	sbrs	r24, 3
    dcf4:	fd cf       	rjmp	.-6      	; 0xdcf0 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dcf6:	8f b7       	in	r24, 0x3f	; 63
    dcf8:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    dcfa:	f8 94       	cli
	return flags;
    dcfc:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    dcfe:	e0 e5       	ldi	r30, 0x50	; 80
    dd00:	f0 e0       	ldi	r31, 0x00	; 0
    dd02:	83 ec       	ldi	r24, 0xC3	; 195
    dd04:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    dd06:	80 81       	ld	r24, Z
    dd08:	80 61       	ori	r24, 0x10	; 16
    dd0a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dd0c:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    dd0e:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    dd10:	84 ff       	sbrs	r24, 4
    dd12:	fd cf       	rjmp	.-6      	; 0xdd0e <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    dd14:	64 e0       	ldi	r22, 0x04	; 4
    dd16:	80 e4       	ldi	r24, 0x40	; 64
    dd18:	90 e0       	ldi	r25, 0x00	; 0
    dd1a:	0e 94 bd 79 	call	0xf37a	; 0xf37a <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dd1e:	8f b7       	in	r24, 0x3f	; 63
    dd20:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    dd22:	f8 94       	cli
	return flags;
    dd24:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    dd26:	e0 e5       	ldi	r30, 0x50	; 80
    dd28:	f0 e0       	ldi	r31, 0x00	; 0
    dd2a:	80 81       	ld	r24, Z
    dd2c:	8e 7f       	andi	r24, 0xFE	; 254
    dd2e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dd30:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    dd32:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dd34:	8f b7       	in	r24, 0x3f	; 63
    dd36:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    dd38:	f8 94       	cli
	return flags;
    dd3a:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    dd3c:	80 81       	ld	r24, Z
    dd3e:	88 60       	ori	r24, 0x08	; 8
    dd40:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dd42:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    dd44:	81 81       	ldd	r24, Z+1	; 0x01
    dd46:	83 ff       	sbrs	r24, 3
    dd48:	fd cf       	rjmp	.-6      	; 0xdd44 <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    dd4a:	8b e0       	ldi	r24, 0x0B	; 11
    dd4c:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    dd50:	28 96       	adiw	r28, 0x08	; 8
    dd52:	cd bf       	out	0x3d, r28	; 61
    dd54:	de bf       	out	0x3e, r29	; 62
    dd56:	df 91       	pop	r29
    dd58:	cf 91       	pop	r28
    dd5a:	08 95       	ret

0000dd5c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    dd5c:	cf 93       	push	r28
    dd5e:	df 93       	push	r29
    dd60:	1f 92       	push	r1
    dd62:	cd b7       	in	r28, 0x3d	; 61
    dd64:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dd66:	9f b7       	in	r25, 0x3f	; 63
    dd68:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    dd6a:	f8 94       	cli
	return flags;
    dd6c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    dd6e:	e8 2f       	mov	r30, r24
    dd70:	f0 e0       	ldi	r31, 0x00	; 0
    dd72:	e0 59       	subi	r30, 0x90	; 144
    dd74:	ff 4f       	sbci	r31, 0xFF	; 255
    dd76:	60 95       	com	r22
    dd78:	80 81       	ld	r24, Z
    dd7a:	68 23       	and	r22, r24
    dd7c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dd7e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    dd80:	0f 90       	pop	r0
    dd82:	df 91       	pop	r29
    dd84:	cf 91       	pop	r28
    dd86:	08 95       	ret

0000dd88 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    dd88:	cf 93       	push	r28
    dd8a:	df 93       	push	r29
    dd8c:	1f 92       	push	r1
    dd8e:	cd b7       	in	r28, 0x3d	; 61
    dd90:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    dd92:	9f b7       	in	r25, 0x3f	; 63
    dd94:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    dd96:	f8 94       	cli
	return flags;
    dd98:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    dd9a:	e8 2f       	mov	r30, r24
    dd9c:	f0 e0       	ldi	r31, 0x00	; 0
    dd9e:	e0 59       	subi	r30, 0x90	; 144
    dda0:	ff 4f       	sbci	r31, 0xFF	; 255
    dda2:	80 81       	ld	r24, Z
    dda4:	68 2b       	or	r22, r24
    dda6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dda8:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    ddaa:	0f 90       	pop	r0
    ddac:	df 91       	pop	r29
    ddae:	cf 91       	pop	r28
    ddb0:	08 95       	ret

0000ddb2 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    ddb2:	cf 93       	push	r28
    ddb4:	df 93       	push	r29
    ddb6:	1f 92       	push	r1
    ddb8:	1f 92       	push	r1
    ddba:	cd b7       	in	r28, 0x3d	; 61
    ddbc:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    ddbe:	86 30       	cpi	r24, 0x06	; 6
    ddc0:	11 f0       	breq	.+4      	; 0xddc6 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    ddc2:	60 e0       	ldi	r22, 0x00	; 0
    ddc4:	01 c0       	rjmp	.+2      	; 0xddc8 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    ddc6:	68 e1       	ldi	r22, 0x18	; 24
    ddc8:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    ddcc:	81 fd       	sbrc	r24, 1
    ddce:	2a c0       	rjmp	.+84     	; 0xde24 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    ddd0:	8f b7       	in	r24, 0x3f	; 63
    ddd2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    ddd4:	f8 94       	cli
	return flags;
    ddd6:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    ddd8:	e0 e5       	ldi	r30, 0x50	; 80
    ddda:	f0 e0       	ldi	r31, 0x00	; 0
    dddc:	80 81       	ld	r24, Z
    ddde:	82 60       	ori	r24, 0x02	; 2
    dde0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    dde2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    dde4:	81 81       	ldd	r24, Z+1	; 0x01
    dde6:	81 ff       	sbrs	r24, 1
    dde8:	fd cf       	rjmp	.-6      	; 0xdde4 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    ddea:	8f b7       	in	r24, 0x3f	; 63
    ddec:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    ddee:	f8 94       	cli
	return flags;
    ddf0:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    ddf2:	a0 e5       	ldi	r26, 0x50	; 80
    ddf4:	b0 e0       	ldi	r27, 0x00	; 0
    ddf6:	16 96       	adiw	r26, 0x06	; 6
    ddf8:	8c 91       	ld	r24, X
    ddfa:	16 97       	sbiw	r26, 0x06	; 6
    ddfc:	89 7f       	andi	r24, 0xF9	; 249
    ddfe:	16 96       	adiw	r26, 0x06	; 6
    de00:	8c 93       	st	X, r24
    de02:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    de04:	e0 e6       	ldi	r30, 0x60	; 96
    de06:	f0 e0       	ldi	r31, 0x00	; 0
    de08:	80 e8       	ldi	r24, 0x80	; 128
    de0a:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    de0c:	8b eb       	ldi	r24, 0xBB	; 187
    de0e:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    de10:	16 96       	adiw	r26, 0x06	; 6
    de12:	8c 91       	ld	r24, X
    de14:	16 97       	sbiw	r26, 0x06	; 6
    de16:	84 60       	ori	r24, 0x04	; 4
    de18:	16 96       	adiw	r26, 0x06	; 6
    de1a:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    de1c:	80 81       	ld	r24, Z
    de1e:	81 60       	ori	r24, 0x01	; 1
    de20:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    de22:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    de24:	63 60       	ori	r22, 0x03	; 3
    de26:	84 e4       	ldi	r24, 0x44	; 68
    de28:	90 e0       	ldi	r25, 0x00	; 0
    de2a:	0e 94 bd 79 	call	0xf37a	; 0xf37a <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    de2e:	60 e4       	ldi	r22, 0x40	; 64
    de30:	80 e0       	ldi	r24, 0x00	; 0
    de32:	94 df       	rcall	.-216    	; 0xdd5c <sysclk_enable_module>
}
    de34:	0f 90       	pop	r0
    de36:	0f 90       	pop	r0
    de38:	df 91       	pop	r29
    de3a:	cf 91       	pop	r28
    de3c:	08 95       	ret

0000de3e <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    de3e:	60 e4       	ldi	r22, 0x40	; 64
    de40:	80 e0       	ldi	r24, 0x00	; 0
    de42:	a2 df       	rcall	.-188    	; 0xdd88 <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    de44:	60 e0       	ldi	r22, 0x00	; 0
    de46:	84 e4       	ldi	r24, 0x44	; 68
    de48:	90 e0       	ldi	r25, 0x00	; 0
    de4a:	0c 94 bd 79 	jmp	0xf37a	; 0xf37a <ccp_write_io>
    de4e:	08 95       	ret

0000de50 <udi_cdc_comm_disable>:
    de50:	80 91 b0 2d 	lds	r24, 0x2DB0	; 0x802db0 <udi_cdc_nb_comm_enabled>
    de54:	81 50       	subi	r24, 0x01	; 1
    de56:	80 93 b0 2d 	sts	0x2DB0, r24	; 0x802db0 <udi_cdc_nb_comm_enabled>
    de5a:	08 95       	ret

0000de5c <udi_cdc_data_setup>:
    de5c:	80 e0       	ldi	r24, 0x00	; 0
    de5e:	08 95       	ret

0000de60 <udi_cdc_getsetting>:
    de60:	80 e0       	ldi	r24, 0x00	; 0
    de62:	08 95       	ret

0000de64 <udi_cdc_line_coding_received>:
    de64:	6e eb       	ldi	r22, 0xBE	; 190
    de66:	7d e2       	ldi	r23, 0x2D	; 45
    de68:	80 e0       	ldi	r24, 0x00	; 0
    de6a:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <usb_callback_config>
    de6e:	08 95       	ret

0000de70 <udi_cdc_comm_enable>:
    de70:	10 92 b0 2d 	sts	0x2DB0, r1	; 0x802db0 <udi_cdc_nb_comm_enabled>
    de74:	10 92 bc 2d 	sts	0x2DBC, r1	; 0x802dbc <udi_cdc_state>
    de78:	10 92 bd 2d 	sts	0x2DBD, r1	; 0x802dbd <udi_cdc_state+0x1>
    de7c:	e2 eb       	ldi	r30, 0xB2	; 178
    de7e:	fd e2       	ldi	r31, 0x2D	; 45
    de80:	81 ea       	ldi	r24, 0xA1	; 161
    de82:	80 83       	st	Z, r24
    de84:	80 e2       	ldi	r24, 0x20	; 32
    de86:	81 83       	std	Z+1, r24	; 0x01
    de88:	12 82       	std	Z+2, r1	; 0x02
    de8a:	13 82       	std	Z+3, r1	; 0x03
    de8c:	14 82       	std	Z+4, r1	; 0x04
    de8e:	15 82       	std	Z+5, r1	; 0x05
    de90:	82 e0       	ldi	r24, 0x02	; 2
    de92:	90 e0       	ldi	r25, 0x00	; 0
    de94:	86 83       	std	Z+6, r24	; 0x06
    de96:	97 83       	std	Z+7, r25	; 0x07
    de98:	10 86       	std	Z+8, r1	; 0x08
    de9a:	11 86       	std	Z+9, r1	; 0x09
    de9c:	ee eb       	ldi	r30, 0xBE	; 190
    de9e:	fd e2       	ldi	r31, 0x2D	; 45
    dea0:	80 e0       	ldi	r24, 0x00	; 0
    dea2:	92 ec       	ldi	r25, 0xC2	; 194
    dea4:	a1 e0       	ldi	r26, 0x01	; 1
    dea6:	b0 e0       	ldi	r27, 0x00	; 0
    dea8:	80 83       	st	Z, r24
    deaa:	91 83       	std	Z+1, r25	; 0x01
    deac:	a2 83       	std	Z+2, r26	; 0x02
    deae:	b3 83       	std	Z+3, r27	; 0x03
    deb0:	14 82       	std	Z+4, r1	; 0x04
    deb2:	15 82       	std	Z+5, r1	; 0x05
    deb4:	88 e0       	ldi	r24, 0x08	; 8
    deb6:	86 83       	std	Z+6, r24	; 0x06
    deb8:	bf 01       	movw	r22, r30
    deba:	80 e0       	ldi	r24, 0x00	; 0
    debc:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <usb_callback_config>
    dec0:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <usb_callback_cdc_enable>
    dec4:	88 23       	and	r24, r24
    dec6:	29 f0       	breq	.+10     	; 0xded2 <udi_cdc_comm_enable+0x62>
    dec8:	90 91 b0 2d 	lds	r25, 0x2DB0	; 0x802db0 <udi_cdc_nb_comm_enabled>
    decc:	9f 5f       	subi	r25, 0xFF	; 255
    dece:	90 93 b0 2d 	sts	0x2DB0, r25	; 0x802db0 <udi_cdc_nb_comm_enabled>
    ded2:	08 95       	ret

0000ded4 <udi_cdc_tx_send>:
    ded4:	ff 92       	push	r15
    ded6:	0f 93       	push	r16
    ded8:	1f 93       	push	r17
    deda:	cf 93       	push	r28
    dedc:	df 93       	push	r29
    dede:	1f 92       	push	r1
    dee0:	cd b7       	in	r28, 0x3d	; 61
    dee2:	de b7       	in	r29, 0x3e	; 62
    dee4:	80 91 9d 28 	lds	r24, 0x289D	; 0x80289d <udi_cdc_tx_trans_ongoing>
    dee8:	81 11       	cpse	r24, r1
    deea:	9f c0       	rjmp	.+318    	; 0xe02a <udi_cdc_tx_send+0x156>
    deec:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <udd_is_high_speed>
    def0:	88 23       	and	r24, r24
    def2:	51 f0       	breq	.+20     	; 0xdf08 <udi_cdc_tx_send+0x34>
    def4:	00 91 9e 28 	lds	r16, 0x289E	; 0x80289e <udi_cdc_tx_sof_num>
    def8:	10 91 9f 28 	lds	r17, 0x289F	; 0x80289f <udi_cdc_tx_sof_num+0x1>
    defc:	0e 94 08 58 	call	0xb010	; 0xb010 <udd_get_micro_frame_number>
    df00:	08 17       	cp	r16, r24
    df02:	19 07       	cpc	r17, r25
    df04:	59 f4       	brne	.+22     	; 0xdf1c <udi_cdc_tx_send+0x48>
    df06:	91 c0       	rjmp	.+290    	; 0xe02a <udi_cdc_tx_send+0x156>
    df08:	00 91 9e 28 	lds	r16, 0x289E	; 0x80289e <udi_cdc_tx_sof_num>
    df0c:	10 91 9f 28 	lds	r17, 0x289F	; 0x80289f <udi_cdc_tx_sof_num+0x1>
    df10:	0e 94 03 58 	call	0xb006	; 0xb006 <udd_get_frame_number>
    df14:	08 17       	cp	r16, r24
    df16:	19 07       	cpc	r17, r25
    df18:	09 f4       	brne	.+2      	; 0xdf1c <udi_cdc_tx_send+0x48>
    df1a:	87 c0       	rjmp	.+270    	; 0xe02a <udi_cdc_tx_send+0x156>
    df1c:	8f b7       	in	r24, 0x3f	; 63
    df1e:	89 83       	std	Y+1, r24	; 0x01
    df20:	f8 94       	cli
    df22:	19 81       	ldd	r17, Y+1	; 0x01
    df24:	00 91 a0 28 	lds	r16, 0x28A0	; 0x8028a0 <udi_cdc_tx_buf_sel>
    df28:	e0 2f       	mov	r30, r16
    df2a:	f0 e0       	ldi	r31, 0x00	; 0
    df2c:	ee 0f       	add	r30, r30
    df2e:	ff 1f       	adc	r31, r31
    df30:	ef 55       	subi	r30, 0x5F	; 95
    df32:	f7 4d       	sbci	r31, 0xD7	; 215
    df34:	80 81       	ld	r24, Z
    df36:	91 81       	ldd	r25, Z+1	; 0x01
    df38:	89 2b       	or	r24, r25
    df3a:	09 f5       	brne	.+66     	; 0xdf7e <udi_cdc_tx_send+0xaa>
    df3c:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <sof_zlp_counter.5059>
    df40:	90 91 9b 28 	lds	r25, 0x289B	; 0x80289b <sof_zlp_counter.5059+0x1>
    df44:	01 96       	adiw	r24, 0x01	; 1
    df46:	80 93 9a 28 	sts	0x289A, r24	; 0x80289a <sof_zlp_counter.5059>
    df4a:	90 93 9b 28 	sts	0x289B, r25	; 0x80289b <sof_zlp_counter.5059+0x1>
    df4e:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <udd_is_high_speed>
    df52:	81 11       	cpse	r24, r1
    df54:	07 c0       	rjmp	.+14     	; 0xdf64 <udi_cdc_tx_send+0x90>
    df56:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <sof_zlp_counter.5059>
    df5a:	90 91 9b 28 	lds	r25, 0x289B	; 0x80289b <sof_zlp_counter.5059+0x1>
    df5e:	84 36       	cpi	r24, 0x64	; 100
    df60:	91 05       	cpc	r25, r1
    df62:	58 f0       	brcs	.+22     	; 0xdf7a <udi_cdc_tx_send+0xa6>
    df64:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <udd_is_high_speed>
    df68:	88 23       	and	r24, r24
    df6a:	49 f0       	breq	.+18     	; 0xdf7e <udi_cdc_tx_send+0xaa>
    df6c:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <sof_zlp_counter.5059>
    df70:	90 91 9b 28 	lds	r25, 0x289B	; 0x80289b <sof_zlp_counter.5059+0x1>
    df74:	80 32       	cpi	r24, 0x20	; 32
    df76:	93 40       	sbci	r25, 0x03	; 3
    df78:	10 f4       	brcc	.+4      	; 0xdf7e <udi_cdc_tx_send+0xaa>
    df7a:	1f bf       	out	0x3f, r17	; 63
    df7c:	56 c0       	rjmp	.+172    	; 0xe02a <udi_cdc_tx_send+0x156>
    df7e:	10 92 9a 28 	sts	0x289A, r1	; 0x80289a <sof_zlp_counter.5059>
    df82:	10 92 9b 28 	sts	0x289B, r1	; 0x80289b <sof_zlp_counter.5059+0x1>
    df86:	80 91 9c 28 	lds	r24, 0x289C	; 0x80289c <udi_cdc_tx_both_buf_to_send>
    df8a:	81 11       	cpse	r24, r1
    df8c:	06 c0       	rjmp	.+12     	; 0xdf9a <udi_cdc_tx_send+0xc6>
    df8e:	81 e0       	ldi	r24, 0x01	; 1
    df90:	01 11       	cpse	r16, r1
    df92:	80 e0       	ldi	r24, 0x00	; 0
    df94:	80 93 a0 28 	sts	0x28A0, r24	; 0x8028a0 <udi_cdc_tx_buf_sel>
    df98:	04 c0       	rjmp	.+8      	; 0xdfa2 <udi_cdc_tx_send+0xce>
    df9a:	81 e0       	ldi	r24, 0x01	; 1
    df9c:	01 11       	cpse	r16, r1
    df9e:	80 e0       	ldi	r24, 0x00	; 0
    dfa0:	08 2f       	mov	r16, r24
    dfa2:	81 e0       	ldi	r24, 0x01	; 1
    dfa4:	80 93 9d 28 	sts	0x289D, r24	; 0x80289d <udi_cdc_tx_trans_ongoing>
    dfa8:	1f bf       	out	0x3f, r17	; 63
    dfaa:	10 e0       	ldi	r17, 0x00	; 0
    dfac:	f8 01       	movw	r30, r16
    dfae:	ee 0f       	add	r30, r30
    dfb0:	ff 1f       	adc	r31, r31
    dfb2:	ef 55       	subi	r30, 0x5F	; 95
    dfb4:	f7 4d       	sbci	r31, 0xD7	; 215
    dfb6:	80 81       	ld	r24, Z
    dfb8:	91 81       	ldd	r25, Z+1	; 0x01
    dfba:	ff 24       	eor	r15, r15
    dfbc:	f3 94       	inc	r15
    dfbe:	80 34       	cpi	r24, 0x40	; 64
    dfc0:	21 e0       	ldi	r18, 0x01	; 1
    dfc2:	92 07       	cpc	r25, r18
    dfc4:	09 f4       	brne	.+2      	; 0xdfc8 <udi_cdc_tx_send+0xf4>
    dfc6:	f1 2c       	mov	r15, r1
    dfc8:	80 34       	cpi	r24, 0x40	; 64
    dfca:	91 40       	sbci	r25, 0x01	; 1
    dfcc:	91 f0       	breq	.+36     	; 0xdff2 <udi_cdc_tx_send+0x11e>
    dfce:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <udd_is_high_speed>
    dfd2:	88 23       	and	r24, r24
    dfd4:	39 f0       	breq	.+14     	; 0xdfe4 <udi_cdc_tx_send+0x110>
    dfd6:	0e 94 08 58 	call	0xb010	; 0xb010 <udd_get_micro_frame_number>
    dfda:	80 93 9e 28 	sts	0x289E, r24	; 0x80289e <udi_cdc_tx_sof_num>
    dfde:	90 93 9f 28 	sts	0x289F, r25	; 0x80289f <udi_cdc_tx_sof_num+0x1>
    dfe2:	0b c0       	rjmp	.+22     	; 0xdffa <udi_cdc_tx_send+0x126>
    dfe4:	0e 94 03 58 	call	0xb006	; 0xb006 <udd_get_frame_number>
    dfe8:	80 93 9e 28 	sts	0x289E, r24	; 0x80289e <udi_cdc_tx_sof_num>
    dfec:	90 93 9f 28 	sts	0x289F, r25	; 0x80289f <udi_cdc_tx_sof_num+0x1>
    dff0:	04 c0       	rjmp	.+8      	; 0xdffa <udi_cdc_tx_send+0x126>
    dff2:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <udi_cdc_tx_sof_num>
    dff6:	10 92 9f 28 	sts	0x289F, r1	; 0x80289f <udi_cdc_tx_sof_num+0x1>
    dffa:	f8 01       	movw	r30, r16
    dffc:	ee 0f       	add	r30, r30
    dffe:	ff 1f       	adc	r31, r31
    e000:	ef 55       	subi	r30, 0x5F	; 95
    e002:	f7 4d       	sbci	r31, 0xD7	; 215
    e004:	20 81       	ld	r18, Z
    e006:	31 81       	ldd	r19, Z+1	; 0x01
    e008:	80 e4       	ldi	r24, 0x40	; 64
    e00a:	91 e0       	ldi	r25, 0x01	; 1
    e00c:	08 9f       	mul	r16, r24
    e00e:	a0 01       	movw	r20, r0
    e010:	09 9f       	mul	r16, r25
    e012:	50 0d       	add	r21, r0
    e014:	18 9f       	mul	r17, r24
    e016:	50 0d       	add	r21, r0
    e018:	11 24       	eor	r1, r1
    e01a:	4a 55       	subi	r20, 0x5A	; 90
    e01c:	57 4d       	sbci	r21, 0xD7	; 215
    e01e:	0f e1       	ldi	r16, 0x1F	; 31
    e020:	10 e7       	ldi	r17, 0x70	; 112
    e022:	6f 2d       	mov	r22, r15
    e024:	81 e8       	ldi	r24, 0x81	; 129
    e026:	0e 94 ec 58 	call	0xb1d8	; 0xb1d8 <udd_ep_run>
    e02a:	0f 90       	pop	r0
    e02c:	df 91       	pop	r29
    e02e:	cf 91       	pop	r28
    e030:	1f 91       	pop	r17
    e032:	0f 91       	pop	r16
    e034:	ff 90       	pop	r15
    e036:	08 95       	ret

0000e038 <udi_cdc_data_sof_notify>:
    e038:	80 e0       	ldi	r24, 0x00	; 0
    e03a:	4c cf       	rjmp	.-360    	; 0xded4 <udi_cdc_tx_send>
    e03c:	08 95       	ret

0000e03e <udi_cdc_data_sent>:
    e03e:	81 11       	cpse	r24, r1
    e040:	1a c0       	rjmp	.+52     	; 0xe076 <udi_cdc_data_sent+0x38>
    e042:	20 91 a0 28 	lds	r18, 0x28A0	; 0x8028a0 <udi_cdc_tx_buf_sel>
    e046:	81 e0       	ldi	r24, 0x01	; 1
    e048:	90 e0       	ldi	r25, 0x00	; 0
    e04a:	22 23       	and	r18, r18
    e04c:	11 f0       	breq	.+4      	; 0xe052 <udi_cdc_data_sent+0x14>
    e04e:	80 e0       	ldi	r24, 0x00	; 0
    e050:	90 e0       	ldi	r25, 0x00	; 0
    e052:	88 0f       	add	r24, r24
    e054:	99 1f       	adc	r25, r25
    e056:	fc 01       	movw	r30, r24
    e058:	ef 55       	subi	r30, 0x5F	; 95
    e05a:	f7 4d       	sbci	r31, 0xD7	; 215
    e05c:	10 82       	st	Z, r1
    e05e:	11 82       	std	Z+1, r1	; 0x01
    e060:	10 92 9c 28 	sts	0x289C, r1	; 0x80289c <udi_cdc_tx_both_buf_to_send>
    e064:	10 92 9d 28 	sts	0x289D, r1	; 0x80289d <udi_cdc_tx_trans_ongoing>
    e068:	67 2b       	or	r22, r23
    e06a:	19 f0       	breq	.+6      	; 0xe072 <udi_cdc_data_sent+0x34>
    e06c:	80 e0       	ldi	r24, 0x00	; 0
    e06e:	0e 94 ff 20 	call	0x41fe	; 0x41fe <usb_callback_tx_empty_notify>
    e072:	80 e0       	ldi	r24, 0x00	; 0
    e074:	2f cf       	rjmp	.-418    	; 0xded4 <udi_cdc_tx_send>
    e076:	08 95       	ret

0000e078 <udi_cdc_data_disable>:
    e078:	80 91 af 2d 	lds	r24, 0x2DAF	; 0x802daf <udi_cdc_nb_data_enabled>
    e07c:	81 50       	subi	r24, 0x01	; 1
    e07e:	80 93 af 2d 	sts	0x2DAF, r24	; 0x802daf <udi_cdc_nb_data_enabled>
    e082:	80 91 af 2d 	lds	r24, 0x2DAF	; 0x802daf <udi_cdc_nb_data_enabled>
    e086:	0e 94 f5 20 	call	0x41ea	; 0x41ea <usb_callback_cdc_disable>
    e08a:	10 92 ae 2d 	sts	0x2DAE, r1	; 0x802dae <udi_cdc_data_running>
    e08e:	08 95       	ret

0000e090 <udi_cdc_comm_setup>:
    e090:	cf 93       	push	r28
    e092:	df 93       	push	r29
    e094:	80 91 e1 2d 	lds	r24, 0x2DE1	; 0x802de1 <udd_g_ctrlreq>
    e098:	88 23       	and	r24, r24
    e09a:	e4 f4       	brge	.+56     	; 0xe0d4 <udi_cdc_comm_setup+0x44>
    e09c:	80 76       	andi	r24, 0x60	; 96
    e09e:	80 32       	cpi	r24, 0x20	; 32
    e0a0:	09 f0       	breq	.+2      	; 0xe0a4 <udi_cdc_comm_setup+0x14>
    e0a2:	49 c0       	rjmp	.+146    	; 0xe136 <udi_cdc_comm_setup+0xa6>
    e0a4:	80 91 e2 2d 	lds	r24, 0x2DE2	; 0x802de2 <udd_g_ctrlreq+0x1>
    e0a8:	81 32       	cpi	r24, 0x21	; 33
    e0aa:	09 f0       	breq	.+2      	; 0xe0ae <udi_cdc_comm_setup+0x1e>
    e0ac:	46 c0       	rjmp	.+140    	; 0xe13a <udi_cdc_comm_setup+0xaa>
    e0ae:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    e0b2:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    e0b6:	07 97       	sbiw	r24, 0x07	; 7
    e0b8:	09 f0       	breq	.+2      	; 0xe0bc <udi_cdc_comm_setup+0x2c>
    e0ba:	41 c0       	rjmp	.+130    	; 0xe13e <udi_cdc_comm_setup+0xae>
    e0bc:	e1 ee       	ldi	r30, 0xE1	; 225
    e0be:	fd e2       	ldi	r31, 0x2D	; 45
    e0c0:	8e eb       	ldi	r24, 0xBE	; 190
    e0c2:	9d e2       	ldi	r25, 0x2D	; 45
    e0c4:	80 87       	std	Z+8, r24	; 0x08
    e0c6:	91 87       	std	Z+9, r25	; 0x09
    e0c8:	87 e0       	ldi	r24, 0x07	; 7
    e0ca:	90 e0       	ldi	r25, 0x00	; 0
    e0cc:	82 87       	std	Z+10, r24	; 0x0a
    e0ce:	93 87       	std	Z+11, r25	; 0x0b
    e0d0:	81 e0       	ldi	r24, 0x01	; 1
    e0d2:	3c c0       	rjmp	.+120    	; 0xe14c <udi_cdc_comm_setup+0xbc>
    e0d4:	80 76       	andi	r24, 0x60	; 96
    e0d6:	80 32       	cpi	r24, 0x20	; 32
    e0d8:	a1 f5       	brne	.+104    	; 0xe142 <udi_cdc_comm_setup+0xb2>
    e0da:	80 91 e2 2d 	lds	r24, 0x2DE2	; 0x802de2 <udd_g_ctrlreq+0x1>
    e0de:	80 32       	cpi	r24, 0x20	; 32
    e0e0:	19 f0       	breq	.+6      	; 0xe0e8 <udi_cdc_comm_setup+0x58>
    e0e2:	82 32       	cpi	r24, 0x22	; 34
    e0e4:	b9 f0       	breq	.+46     	; 0xe114 <udi_cdc_comm_setup+0x84>
    e0e6:	2f c0       	rjmp	.+94     	; 0xe146 <udi_cdc_comm_setup+0xb6>
    e0e8:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    e0ec:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    e0f0:	07 97       	sbiw	r24, 0x07	; 7
    e0f2:	59 f5       	brne	.+86     	; 0xe14a <udi_cdc_comm_setup+0xba>
    e0f4:	e1 ee       	ldi	r30, 0xE1	; 225
    e0f6:	fd e2       	ldi	r31, 0x2D	; 45
    e0f8:	82 e3       	ldi	r24, 0x32	; 50
    e0fa:	9f e6       	ldi	r25, 0x6F	; 111
    e0fc:	84 87       	std	Z+12, r24	; 0x0c
    e0fe:	95 87       	std	Z+13, r25	; 0x0d
    e100:	8e eb       	ldi	r24, 0xBE	; 190
    e102:	9d e2       	ldi	r25, 0x2D	; 45
    e104:	80 87       	std	Z+8, r24	; 0x08
    e106:	91 87       	std	Z+9, r25	; 0x09
    e108:	87 e0       	ldi	r24, 0x07	; 7
    e10a:	90 e0       	ldi	r25, 0x00	; 0
    e10c:	82 87       	std	Z+10, r24	; 0x0a
    e10e:	93 87       	std	Z+11, r25	; 0x0b
    e110:	81 e0       	ldi	r24, 0x01	; 1
    e112:	1c c0       	rjmp	.+56     	; 0xe14c <udi_cdc_comm_setup+0xbc>
    e114:	c1 ee       	ldi	r28, 0xE1	; 225
    e116:	dd e2       	ldi	r29, 0x2D	; 45
    e118:	6a 81       	ldd	r22, Y+2	; 0x02
    e11a:	61 70       	andi	r22, 0x01	; 1
    e11c:	80 e0       	ldi	r24, 0x00	; 0
    e11e:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <usb_callback_cdc_set_dtr>
    e122:	6a 81       	ldd	r22, Y+2	; 0x02
    e124:	7b 81       	ldd	r23, Y+3	; 0x03
    e126:	76 95       	lsr	r23
    e128:	67 95       	ror	r22
    e12a:	61 70       	andi	r22, 0x01	; 1
    e12c:	80 e0       	ldi	r24, 0x00	; 0
    e12e:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <usb_callback_cdc_set_rts>
    e132:	81 e0       	ldi	r24, 0x01	; 1
    e134:	0b c0       	rjmp	.+22     	; 0xe14c <udi_cdc_comm_setup+0xbc>
    e136:	80 e0       	ldi	r24, 0x00	; 0
    e138:	09 c0       	rjmp	.+18     	; 0xe14c <udi_cdc_comm_setup+0xbc>
    e13a:	80 e0       	ldi	r24, 0x00	; 0
    e13c:	07 c0       	rjmp	.+14     	; 0xe14c <udi_cdc_comm_setup+0xbc>
    e13e:	80 e0       	ldi	r24, 0x00	; 0
    e140:	05 c0       	rjmp	.+10     	; 0xe14c <udi_cdc_comm_setup+0xbc>
    e142:	80 e0       	ldi	r24, 0x00	; 0
    e144:	03 c0       	rjmp	.+6      	; 0xe14c <udi_cdc_comm_setup+0xbc>
    e146:	80 e0       	ldi	r24, 0x00	; 0
    e148:	01 c0       	rjmp	.+2      	; 0xe14c <udi_cdc_comm_setup+0xbc>
    e14a:	80 e0       	ldi	r24, 0x00	; 0
    e14c:	df 91       	pop	r29
    e14e:	cf 91       	pop	r28
    e150:	08 95       	ret

0000e152 <udi_cdc_multi_get_nb_received_data>:
    e152:	cf 93       	push	r28
    e154:	df 93       	push	r29
    e156:	1f 92       	push	r1
    e158:	cd b7       	in	r28, 0x3d	; 61
    e15a:	de b7       	in	r29, 0x3e	; 62
    e15c:	8f b7       	in	r24, 0x3f	; 63
    e15e:	89 83       	std	Y+1, r24	; 0x01
    e160:	f8 94       	cli
    e162:	49 81       	ldd	r20, Y+1	; 0x01
    e164:	20 91 27 2b 	lds	r18, 0x2B27	; 0x802b27 <udi_cdc_rx_pos>
    e168:	30 91 28 2b 	lds	r19, 0x2B28	; 0x802b28 <udi_cdc_rx_pos+0x1>
    e16c:	e0 91 29 2b 	lds	r30, 0x2B29	; 0x802b29 <udi_cdc_rx_buf_sel>
    e170:	f0 e0       	ldi	r31, 0x00	; 0
    e172:	ee 0f       	add	r30, r30
    e174:	ff 1f       	adc	r31, r31
    e176:	e6 5d       	subi	r30, 0xD6	; 214
    e178:	f4 4d       	sbci	r31, 0xD4	; 212
    e17a:	80 81       	ld	r24, Z
    e17c:	91 81       	ldd	r25, Z+1	; 0x01
    e17e:	4f bf       	out	0x3f, r20	; 63
    e180:	82 1b       	sub	r24, r18
    e182:	93 0b       	sbc	r25, r19
    e184:	0f 90       	pop	r0
    e186:	df 91       	pop	r29
    e188:	cf 91       	pop	r28
    e18a:	08 95       	ret

0000e18c <udi_cdc_get_nb_received_data>:
    e18c:	80 e0       	ldi	r24, 0x00	; 0
    e18e:	e1 cf       	rjmp	.-62     	; 0xe152 <udi_cdc_multi_get_nb_received_data>
    e190:	08 95       	ret

0000e192 <udi_cdc_multi_is_rx_ready>:
    e192:	df df       	rcall	.-66     	; 0xe152 <udi_cdc_multi_get_nb_received_data>
    e194:	21 e0       	ldi	r18, 0x01	; 1
    e196:	89 2b       	or	r24, r25
    e198:	09 f4       	brne	.+2      	; 0xe19c <udi_cdc_multi_is_rx_ready+0xa>
    e19a:	20 e0       	ldi	r18, 0x00	; 0
    e19c:	82 2f       	mov	r24, r18
    e19e:	08 95       	ret

0000e1a0 <udi_cdc_rx_start>:
    e1a0:	0f 93       	push	r16
    e1a2:	1f 93       	push	r17
    e1a4:	cf 93       	push	r28
    e1a6:	df 93       	push	r29
    e1a8:	1f 92       	push	r1
    e1aa:	cd b7       	in	r28, 0x3d	; 61
    e1ac:	de b7       	in	r29, 0x3e	; 62
    e1ae:	8f b7       	in	r24, 0x3f	; 63
    e1b0:	89 83       	std	Y+1, r24	; 0x01
    e1b2:	f8 94       	cli
    e1b4:	99 81       	ldd	r25, Y+1	; 0x01
    e1b6:	20 91 29 2b 	lds	r18, 0x2B29	; 0x802b29 <udi_cdc_rx_buf_sel>
    e1ba:	80 91 26 2b 	lds	r24, 0x2B26	; 0x802b26 <udi_cdc_rx_trans_ongoing>
    e1be:	81 11       	cpse	r24, r1
    e1c0:	10 c0       	rjmp	.+32     	; 0xe1e2 <udi_cdc_rx_start+0x42>
    e1c2:	60 91 27 2b 	lds	r22, 0x2B27	; 0x802b27 <udi_cdc_rx_pos>
    e1c6:	70 91 28 2b 	lds	r23, 0x2B28	; 0x802b28 <udi_cdc_rx_pos+0x1>
    e1ca:	02 2f       	mov	r16, r18
    e1cc:	10 e0       	ldi	r17, 0x00	; 0
    e1ce:	f8 01       	movw	r30, r16
    e1d0:	ee 0f       	add	r30, r30
    e1d2:	ff 1f       	adc	r31, r31
    e1d4:	e6 5d       	subi	r30, 0xD6	; 214
    e1d6:	f4 4d       	sbci	r31, 0xD4	; 212
    e1d8:	40 81       	ld	r20, Z
    e1da:	51 81       	ldd	r21, Z+1	; 0x01
    e1dc:	64 17       	cp	r22, r20
    e1de:	75 07       	cpc	r23, r21
    e1e0:	18 f4       	brcc	.+6      	; 0xe1e8 <udi_cdc_rx_start+0x48>
    e1e2:	9f bf       	out	0x3f, r25	; 63
    e1e4:	80 e0       	ldi	r24, 0x00	; 0
    e1e6:	27 c0       	rjmp	.+78     	; 0xe236 <udi_cdc_rx_start+0x96>
    e1e8:	10 92 27 2b 	sts	0x2B27, r1	; 0x802b27 <udi_cdc_rx_pos>
    e1ec:	10 92 28 2b 	sts	0x2B28, r1	; 0x802b28 <udi_cdc_rx_pos+0x1>
    e1f0:	81 e0       	ldi	r24, 0x01	; 1
    e1f2:	21 11       	cpse	r18, r1
    e1f4:	80 e0       	ldi	r24, 0x00	; 0
    e1f6:	80 93 29 2b 	sts	0x2B29, r24	; 0x802b29 <udi_cdc_rx_buf_sel>
    e1fa:	81 e0       	ldi	r24, 0x01	; 1
    e1fc:	80 93 26 2b 	sts	0x2B26, r24	; 0x802b26 <udi_cdc_rx_trans_ongoing>
    e200:	9f bf       	out	0x3f, r25	; 63
    e202:	80 e0       	ldi	r24, 0x00	; 0
    e204:	c6 df       	rcall	.-116    	; 0xe192 <udi_cdc_multi_is_rx_ready>
    e206:	88 23       	and	r24, r24
    e208:	19 f0       	breq	.+6      	; 0xe210 <udi_cdc_rx_start+0x70>
    e20a:	80 e0       	ldi	r24, 0x00	; 0
    e20c:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <usb_callback_rx_notify>
    e210:	80 e4       	ldi	r24, 0x40	; 64
    e212:	91 e0       	ldi	r25, 0x01	; 1
    e214:	08 9f       	mul	r16, r24
    e216:	a0 01       	movw	r20, r0
    e218:	09 9f       	mul	r16, r25
    e21a:	50 0d       	add	r21, r0
    e21c:	18 9f       	mul	r17, r24
    e21e:	50 0d       	add	r21, r0
    e220:	11 24       	eor	r1, r1
    e222:	42 5d       	subi	r20, 0xD2	; 210
    e224:	54 4d       	sbci	r21, 0xD4	; 212
    e226:	03 e5       	ldi	r16, 0x53	; 83
    e228:	11 e7       	ldi	r17, 0x71	; 113
    e22a:	20 e4       	ldi	r18, 0x40	; 64
    e22c:	31 e0       	ldi	r19, 0x01	; 1
    e22e:	61 e0       	ldi	r22, 0x01	; 1
    e230:	82 e0       	ldi	r24, 0x02	; 2
    e232:	0e 94 ec 58 	call	0xb1d8	; 0xb1d8 <udd_ep_run>
    e236:	0f 90       	pop	r0
    e238:	df 91       	pop	r29
    e23a:	cf 91       	pop	r28
    e23c:	1f 91       	pop	r17
    e23e:	0f 91       	pop	r16
    e240:	08 95       	ret

0000e242 <udi_cdc_data_enable>:
    e242:	10 92 af 2d 	sts	0x2DAF, r1	; 0x802daf <udi_cdc_nb_data_enabled>
    e246:	10 92 9d 28 	sts	0x289D, r1	; 0x80289d <udi_cdc_tx_trans_ongoing>
    e24a:	10 92 9c 28 	sts	0x289C, r1	; 0x80289c <udi_cdc_tx_both_buf_to_send>
    e24e:	10 92 a0 28 	sts	0x28A0, r1	; 0x8028a0 <udi_cdc_tx_buf_sel>
    e252:	e1 ea       	ldi	r30, 0xA1	; 161
    e254:	f8 e2       	ldi	r31, 0x28	; 40
    e256:	10 82       	st	Z, r1
    e258:	11 82       	std	Z+1, r1	; 0x01
    e25a:	12 82       	std	Z+2, r1	; 0x02
    e25c:	13 82       	std	Z+3, r1	; 0x03
    e25e:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <udi_cdc_tx_sof_num>
    e262:	10 92 9f 28 	sts	0x289F, r1	; 0x80289f <udi_cdc_tx_sof_num+0x1>
    e266:	80 e0       	ldi	r24, 0x00	; 0
    e268:	35 de       	rcall	.-918    	; 0xded4 <udi_cdc_tx_send>
    e26a:	10 92 26 2b 	sts	0x2B26, r1	; 0x802b26 <udi_cdc_rx_trans_ongoing>
    e26e:	10 92 29 2b 	sts	0x2B29, r1	; 0x802b29 <udi_cdc_rx_buf_sel>
    e272:	ea e2       	ldi	r30, 0x2A	; 42
    e274:	fb e2       	ldi	r31, 0x2B	; 43
    e276:	10 82       	st	Z, r1
    e278:	11 82       	std	Z+1, r1	; 0x01
    e27a:	12 82       	std	Z+2, r1	; 0x02
    e27c:	13 82       	std	Z+3, r1	; 0x03
    e27e:	10 92 27 2b 	sts	0x2B27, r1	; 0x802b27 <udi_cdc_rx_pos>
    e282:	10 92 28 2b 	sts	0x2B28, r1	; 0x802b28 <udi_cdc_rx_pos+0x1>
    e286:	80 e0       	ldi	r24, 0x00	; 0
    e288:	8b df       	rcall	.-234    	; 0xe1a0 <udi_cdc_rx_start>
    e28a:	88 23       	and	r24, r24
    e28c:	59 f0       	breq	.+22     	; 0xe2a4 <udi_cdc_data_enable+0x62>
    e28e:	90 91 af 2d 	lds	r25, 0x2DAF	; 0x802daf <udi_cdc_nb_data_enabled>
    e292:	9f 5f       	subi	r25, 0xFF	; 255
    e294:	90 93 af 2d 	sts	0x2DAF, r25	; 0x802daf <udi_cdc_nb_data_enabled>
    e298:	90 91 af 2d 	lds	r25, 0x2DAF	; 0x802daf <udi_cdc_nb_data_enabled>
    e29c:	91 30       	cpi	r25, 0x01	; 1
    e29e:	11 f4       	brne	.+4      	; 0xe2a4 <udi_cdc_data_enable+0x62>
    e2a0:	90 93 ae 2d 	sts	0x2DAE, r25	; 0x802dae <udi_cdc_data_running>
    e2a4:	08 95       	ret

0000e2a6 <udi_cdc_data_received>:
    e2a6:	0f 93       	push	r16
    e2a8:	1f 93       	push	r17
    e2aa:	81 11       	cpse	r24, r1
    e2ac:	26 c0       	rjmp	.+76     	; 0xe2fa <udi_cdc_data_received+0x54>
    e2ae:	80 91 29 2b 	lds	r24, 0x2B29	; 0x802b29 <udi_cdc_rx_buf_sel>
    e2b2:	e1 e0       	ldi	r30, 0x01	; 1
    e2b4:	81 11       	cpse	r24, r1
    e2b6:	e0 e0       	ldi	r30, 0x00	; 0
    e2b8:	84 2f       	mov	r24, r20
    e2ba:	61 15       	cp	r22, r1
    e2bc:	71 05       	cpc	r23, r1
    e2be:	91 f4       	brne	.+36     	; 0xe2e4 <udi_cdc_data_received+0x3e>
    e2c0:	f0 e0       	ldi	r31, 0x00	; 0
    e2c2:	20 e4       	ldi	r18, 0x40	; 64
    e2c4:	31 e0       	ldi	r19, 0x01	; 1
    e2c6:	e2 9f       	mul	r30, r18
    e2c8:	a0 01       	movw	r20, r0
    e2ca:	e3 9f       	mul	r30, r19
    e2cc:	50 0d       	add	r21, r0
    e2ce:	f2 9f       	mul	r31, r18
    e2d0:	50 0d       	add	r21, r0
    e2d2:	11 24       	eor	r1, r1
    e2d4:	42 5d       	subi	r20, 0xD2	; 210
    e2d6:	54 4d       	sbci	r21, 0xD4	; 212
    e2d8:	03 e5       	ldi	r16, 0x53	; 83
    e2da:	11 e7       	ldi	r17, 0x71	; 113
    e2dc:	61 e0       	ldi	r22, 0x01	; 1
    e2de:	0e 94 ec 58 	call	0xb1d8	; 0xb1d8 <udd_ep_run>
    e2e2:	0b c0       	rjmp	.+22     	; 0xe2fa <udi_cdc_data_received+0x54>
    e2e4:	f0 e0       	ldi	r31, 0x00	; 0
    e2e6:	ee 0f       	add	r30, r30
    e2e8:	ff 1f       	adc	r31, r31
    e2ea:	e6 5d       	subi	r30, 0xD6	; 214
    e2ec:	f4 4d       	sbci	r31, 0xD4	; 212
    e2ee:	60 83       	st	Z, r22
    e2f0:	71 83       	std	Z+1, r23	; 0x01
    e2f2:	10 92 26 2b 	sts	0x2B26, r1	; 0x802b26 <udi_cdc_rx_trans_ongoing>
    e2f6:	80 e0       	ldi	r24, 0x00	; 0
    e2f8:	53 df       	rcall	.-346    	; 0xe1a0 <udi_cdc_rx_start>
    e2fa:	1f 91       	pop	r17
    e2fc:	0f 91       	pop	r16
    e2fe:	08 95       	ret

0000e300 <udi_cdc_multi_getc>:
    e300:	cf 92       	push	r12
    e302:	df 92       	push	r13
    e304:	ff 92       	push	r15
    e306:	0f 93       	push	r16
    e308:	1f 93       	push	r17
    e30a:	cf 93       	push	r28
    e30c:	df 93       	push	r29
    e30e:	1f 92       	push	r1
    e310:	cd b7       	in	r28, 0x3d	; 61
    e312:	de b7       	in	r29, 0x3e	; 62
    e314:	ff 24       	eor	r15, r15
    e316:	f3 94       	inc	r15
    e318:	80 91 c4 2d 	lds	r24, 0x2DC4	; 0x802dc4 <udi_cdc_line_coding+0x6>
    e31c:	89 30       	cpi	r24, 0x09	; 9
    e31e:	09 f0       	breq	.+2      	; 0xe322 <udi_cdc_multi_getc+0x22>
    e320:	f1 2c       	mov	r15, r1
    e322:	a0 e0       	ldi	r26, 0x00	; 0
    e324:	b0 e0       	ldi	r27, 0x00	; 0
    e326:	00 e4       	ldi	r16, 0x40	; 64
    e328:	11 e0       	ldi	r17, 0x01	; 1
    e32a:	8f b7       	in	r24, 0x3f	; 63
    e32c:	89 83       	std	Y+1, r24	; 0x01
    e32e:	f8 94       	cli
    e330:	69 81       	ldd	r22, Y+1	; 0x01
    e332:	20 91 27 2b 	lds	r18, 0x2B27	; 0x802b27 <udi_cdc_rx_pos>
    e336:	30 91 28 2b 	lds	r19, 0x2B28	; 0x802b28 <udi_cdc_rx_pos+0x1>
    e33a:	80 91 29 2b 	lds	r24, 0x2B29	; 0x802b29 <udi_cdc_rx_buf_sel>
    e33e:	90 e0       	ldi	r25, 0x00	; 0
    e340:	fc 01       	movw	r30, r24
    e342:	ee 0f       	add	r30, r30
    e344:	ff 1f       	adc	r31, r31
    e346:	e6 5d       	subi	r30, 0xD6	; 214
    e348:	f4 4d       	sbci	r31, 0xD4	; 212
    e34a:	40 81       	ld	r20, Z
    e34c:	51 81       	ldd	r21, Z+1	; 0x01
    e34e:	6f bf       	out	0x3f, r22	; 63
    e350:	24 17       	cp	r18, r20
    e352:	35 07       	cpc	r19, r21
    e354:	30 f0       	brcs	.+12     	; 0xe362 <udi_cdc_multi_getc+0x62>
    e356:	80 91 ae 2d 	lds	r24, 0x2DAE	; 0x802dae <udi_cdc_data_running>
    e35a:	81 11       	cpse	r24, r1
    e35c:	e6 cf       	rjmp	.-52     	; 0xe32a <udi_cdc_multi_getc+0x2a>
    e35e:	90 e0       	ldi	r25, 0x00	; 0
    e360:	1e c0       	rjmp	.+60     	; 0xe39e <udi_cdc_multi_getc+0x9e>
    e362:	80 9f       	mul	r24, r16
    e364:	f0 01       	movw	r30, r0
    e366:	81 9f       	mul	r24, r17
    e368:	f0 0d       	add	r31, r0
    e36a:	90 9f       	mul	r25, r16
    e36c:	f0 0d       	add	r31, r0
    e36e:	11 24       	eor	r1, r1
    e370:	e2 5d       	subi	r30, 0xD2	; 210
    e372:	f4 4d       	sbci	r31, 0xD4	; 212
    e374:	e2 0f       	add	r30, r18
    e376:	f3 1f       	adc	r31, r19
    e378:	80 81       	ld	r24, Z
    e37a:	6d 01       	movw	r12, r26
    e37c:	c8 2a       	or	r12, r24
    e37e:	2f 5f       	subi	r18, 0xFF	; 255
    e380:	3f 4f       	sbci	r19, 0xFF	; 255
    e382:	20 93 27 2b 	sts	0x2B27, r18	; 0x802b27 <udi_cdc_rx_pos>
    e386:	30 93 28 2b 	sts	0x2B28, r19	; 0x802b28 <udi_cdc_rx_pos+0x1>
    e38a:	80 e0       	ldi	r24, 0x00	; 0
    e38c:	09 df       	rcall	.-494    	; 0xe1a0 <udi_cdc_rx_start>
    e38e:	ff 20       	and	r15, r15
    e390:	21 f0       	breq	.+8      	; 0xe39a <udi_cdc_multi_getc+0x9a>
    e392:	bc 2d       	mov	r27, r12
    e394:	aa 27       	eor	r26, r26
    e396:	f1 2c       	mov	r15, r1
    e398:	c8 cf       	rjmp	.-112    	; 0xe32a <udi_cdc_multi_getc+0x2a>
    e39a:	8c 2d       	mov	r24, r12
    e39c:	9d 2d       	mov	r25, r13
    e39e:	0f 90       	pop	r0
    e3a0:	df 91       	pop	r29
    e3a2:	cf 91       	pop	r28
    e3a4:	1f 91       	pop	r17
    e3a6:	0f 91       	pop	r16
    e3a8:	ff 90       	pop	r15
    e3aa:	df 90       	pop	r13
    e3ac:	cf 90       	pop	r12
    e3ae:	08 95       	ret

0000e3b0 <udi_cdc_getc>:
    e3b0:	80 e0       	ldi	r24, 0x00	; 0
    e3b2:	a6 cf       	rjmp	.-180    	; 0xe300 <udi_cdc_multi_getc>
    e3b4:	08 95       	ret

0000e3b6 <udi_cdc_read_no_polling>:
    e3b6:	ef 92       	push	r14
    e3b8:	ff 92       	push	r15
    e3ba:	0f 93       	push	r16
    e3bc:	1f 93       	push	r17
    e3be:	cf 93       	push	r28
    e3c0:	df 93       	push	r29
    e3c2:	1f 92       	push	r1
    e3c4:	1f 92       	push	r1
    e3c6:	cd b7       	in	r28, 0x3d	; 61
    e3c8:	de b7       	in	r29, 0x3e	; 62
    e3ca:	dc 01       	movw	r26, r24
    e3cc:	90 91 ae 2d 	lds	r25, 0x2DAE	; 0x802dae <udi_cdc_data_running>
    e3d0:	99 23       	and	r25, r25
    e3d2:	09 f4       	brne	.+2      	; 0xe3d6 <udi_cdc_read_no_polling+0x20>
    e3d4:	43 c0       	rjmp	.+134    	; 0xe45c <udi_cdc_read_no_polling+0xa6>
    e3d6:	8f b7       	in	r24, 0x3f	; 63
    e3d8:	89 83       	std	Y+1, r24	; 0x01
    e3da:	f8 94       	cli
    e3dc:	89 81       	ldd	r24, Y+1	; 0x01
    e3de:	40 91 27 2b 	lds	r20, 0x2B27	; 0x802b27 <udi_cdc_rx_pos>
    e3e2:	50 91 28 2b 	lds	r21, 0x2B28	; 0x802b28 <udi_cdc_rx_pos+0x1>
    e3e6:	20 91 29 2b 	lds	r18, 0x2B29	; 0x802b29 <udi_cdc_rx_buf_sel>
    e3ea:	30 e0       	ldi	r19, 0x00	; 0
    e3ec:	f9 01       	movw	r30, r18
    e3ee:	ee 0f       	add	r30, r30
    e3f0:	ff 1f       	adc	r31, r31
    e3f2:	e6 5d       	subi	r30, 0xD6	; 214
    e3f4:	f4 4d       	sbci	r31, 0xD4	; 212
    e3f6:	e0 80       	ld	r14, Z
    e3f8:	f1 80       	ldd	r15, Z+1	; 0x01
    e3fa:	e4 1a       	sub	r14, r20
    e3fc:	f5 0a       	sbc	r15, r21
    e3fe:	8f bf       	out	0x3f, r24	; 63
    e400:	06 2f       	mov	r16, r22
    e402:	17 2f       	mov	r17, r23
    e404:	e0 16       	cp	r14, r16
    e406:	f1 06       	cpc	r15, r17
    e408:	08 f4       	brcc	.+2      	; 0xe40c <udi_cdc_read_no_polling+0x56>
    e40a:	87 01       	movw	r16, r14
    e40c:	01 15       	cp	r16, r1
    e40e:	11 05       	cpc	r17, r1
    e410:	41 f1       	breq	.+80     	; 0xe462 <udi_cdc_read_no_polling+0xac>
    e412:	cd 01       	movw	r24, r26
    e414:	e0 e4       	ldi	r30, 0x40	; 64
    e416:	f1 e0       	ldi	r31, 0x01	; 1
    e418:	2e 9f       	mul	r18, r30
    e41a:	b0 01       	movw	r22, r0
    e41c:	2f 9f       	mul	r18, r31
    e41e:	70 0d       	add	r23, r0
    e420:	3e 9f       	mul	r19, r30
    e422:	70 0d       	add	r23, r0
    e424:	11 24       	eor	r1, r1
    e426:	64 0f       	add	r22, r20
    e428:	75 1f       	adc	r23, r21
    e42a:	62 5d       	subi	r22, 0xD2	; 210
    e42c:	74 4d       	sbci	r23, 0xD4	; 212
    e42e:	a8 01       	movw	r20, r16
    e430:	0e 94 bd 84 	call	0x1097a	; 0x1097a <memcpy>
    e434:	8f b7       	in	r24, 0x3f	; 63
    e436:	8a 83       	std	Y+2, r24	; 0x02
    e438:	f8 94       	cli
    e43a:	8a 81       	ldd	r24, Y+2	; 0x02
    e43c:	20 91 27 2b 	lds	r18, 0x2B27	; 0x802b27 <udi_cdc_rx_pos>
    e440:	30 91 28 2b 	lds	r19, 0x2B28	; 0x802b28 <udi_cdc_rx_pos+0x1>
    e444:	02 0f       	add	r16, r18
    e446:	13 1f       	adc	r17, r19
    e448:	00 93 27 2b 	sts	0x2B27, r16	; 0x802b27 <udi_cdc_rx_pos>
    e44c:	10 93 28 2b 	sts	0x2B28, r17	; 0x802b28 <udi_cdc_rx_pos+0x1>
    e450:	8f bf       	out	0x3f, r24	; 63
    e452:	80 e0       	ldi	r24, 0x00	; 0
    e454:	a5 de       	rcall	.-694    	; 0xe1a0 <udi_cdc_rx_start>
    e456:	8e 2d       	mov	r24, r14
    e458:	9f 2d       	mov	r25, r15
    e45a:	05 c0       	rjmp	.+10     	; 0xe466 <udi_cdc_read_no_polling+0xb0>
    e45c:	80 e0       	ldi	r24, 0x00	; 0
    e45e:	90 e0       	ldi	r25, 0x00	; 0
    e460:	02 c0       	rjmp	.+4      	; 0xe466 <udi_cdc_read_no_polling+0xb0>
    e462:	8e 2d       	mov	r24, r14
    e464:	9f 2d       	mov	r25, r15
    e466:	0f 90       	pop	r0
    e468:	0f 90       	pop	r0
    e46a:	df 91       	pop	r29
    e46c:	cf 91       	pop	r28
    e46e:	1f 91       	pop	r17
    e470:	0f 91       	pop	r16
    e472:	ff 90       	pop	r15
    e474:	ef 90       	pop	r14
    e476:	08 95       	ret

0000e478 <udi_cdc_multi_get_free_tx_buffer>:
    e478:	cf 93       	push	r28
    e47a:	df 93       	push	r29
    e47c:	1f 92       	push	r1
    e47e:	cd b7       	in	r28, 0x3d	; 61
    e480:	de b7       	in	r29, 0x3e	; 62
    e482:	8f b7       	in	r24, 0x3f	; 63
    e484:	89 83       	std	Y+1, r24	; 0x01
    e486:	f8 94       	cli
    e488:	99 81       	ldd	r25, Y+1	; 0x01
    e48a:	80 91 a0 28 	lds	r24, 0x28A0	; 0x8028a0 <udi_cdc_tx_buf_sel>
    e48e:	e8 2f       	mov	r30, r24
    e490:	f0 e0       	ldi	r31, 0x00	; 0
    e492:	ee 0f       	add	r30, r30
    e494:	ff 1f       	adc	r31, r31
    e496:	ef 55       	subi	r30, 0x5F	; 95
    e498:	f7 4d       	sbci	r31, 0xD7	; 215
    e49a:	20 81       	ld	r18, Z
    e49c:	31 81       	ldd	r19, Z+1	; 0x01
    e49e:	20 34       	cpi	r18, 0x40	; 64
    e4a0:	41 e0       	ldi	r20, 0x01	; 1
    e4a2:	34 07       	cpc	r19, r20
    e4a4:	89 f4       	brne	.+34     	; 0xe4c8 <udi_cdc_multi_get_free_tx_buffer+0x50>
    e4a6:	40 91 9d 28 	lds	r20, 0x289D	; 0x80289d <udi_cdc_tx_trans_ongoing>
    e4aa:	41 11       	cpse	r20, r1
    e4ac:	0d c0       	rjmp	.+26     	; 0xe4c8 <udi_cdc_multi_get_free_tx_buffer+0x50>
    e4ae:	40 91 9c 28 	lds	r20, 0x289C	; 0x80289c <udi_cdc_tx_both_buf_to_send>
    e4b2:	41 11       	cpse	r20, r1
    e4b4:	09 c0       	rjmp	.+18     	; 0xe4c8 <udi_cdc_multi_get_free_tx_buffer+0x50>
    e4b6:	21 e0       	ldi	r18, 0x01	; 1
    e4b8:	20 93 9c 28 	sts	0x289C, r18	; 0x80289c <udi_cdc_tx_both_buf_to_send>
    e4bc:	81 11       	cpse	r24, r1
    e4be:	20 e0       	ldi	r18, 0x00	; 0
    e4c0:	20 93 a0 28 	sts	0x28A0, r18	; 0x8028a0 <udi_cdc_tx_buf_sel>
    e4c4:	20 e0       	ldi	r18, 0x00	; 0
    e4c6:	30 e0       	ldi	r19, 0x00	; 0
    e4c8:	9f bf       	out	0x3f, r25	; 63
    e4ca:	80 e4       	ldi	r24, 0x40	; 64
    e4cc:	91 e0       	ldi	r25, 0x01	; 1
    e4ce:	82 1b       	sub	r24, r18
    e4d0:	93 0b       	sbc	r25, r19
    e4d2:	0f 90       	pop	r0
    e4d4:	df 91       	pop	r29
    e4d6:	cf 91       	pop	r28
    e4d8:	08 95       	ret

0000e4da <udi_cdc_multi_is_tx_ready>:
    e4da:	ce df       	rcall	.-100    	; 0xe478 <udi_cdc_multi_get_free_tx_buffer>
    e4dc:	21 e0       	ldi	r18, 0x01	; 1
    e4de:	89 2b       	or	r24, r25
    e4e0:	09 f4       	brne	.+2      	; 0xe4e4 <udi_cdc_multi_is_tx_ready+0xa>
    e4e2:	20 e0       	ldi	r18, 0x00	; 0
    e4e4:	82 2f       	mov	r24, r18
    e4e6:	08 95       	ret

0000e4e8 <udi_cdc_is_tx_ready>:
    e4e8:	80 e0       	ldi	r24, 0x00	; 0
    e4ea:	f7 cf       	rjmp	.-18     	; 0xe4da <udi_cdc_multi_is_tx_ready>
    e4ec:	08 95       	ret

0000e4ee <udi_cdc_multi_putc>:
    e4ee:	df 92       	push	r13
    e4f0:	ef 92       	push	r14
    e4f2:	ff 92       	push	r15
    e4f4:	0f 93       	push	r16
    e4f6:	1f 93       	push	r17
    e4f8:	cf 93       	push	r28
    e4fa:	df 93       	push	r29
    e4fc:	1f 92       	push	r1
    e4fe:	cd b7       	in	r28, 0x3d	; 61
    e500:	de b7       	in	r29, 0x3e	; 62
    e502:	d6 2e       	mov	r13, r22
    e504:	f7 2e       	mov	r15, r23
    e506:	ee 24       	eor	r14, r14
    e508:	e3 94       	inc	r14
    e50a:	80 91 c4 2d 	lds	r24, 0x2DC4	; 0x802dc4 <udi_cdc_line_coding+0x6>
    e50e:	89 30       	cpi	r24, 0x09	; 9
    e510:	09 f0       	breq	.+2      	; 0xe514 <udi_cdc_multi_putc+0x26>
    e512:	e1 2c       	mov	r14, r1
    e514:	00 e4       	ldi	r16, 0x40	; 64
    e516:	11 e0       	ldi	r17, 0x01	; 1
    e518:	80 e0       	ldi	r24, 0x00	; 0
    e51a:	df df       	rcall	.-66     	; 0xe4da <udi_cdc_multi_is_tx_ready>
    e51c:	81 11       	cpse	r24, r1
    e51e:	07 c0       	rjmp	.+14     	; 0xe52e <udi_cdc_multi_putc+0x40>
    e520:	80 91 ae 2d 	lds	r24, 0x2DAE	; 0x802dae <udi_cdc_data_running>
    e524:	81 11       	cpse	r24, r1
    e526:	f8 cf       	rjmp	.-16     	; 0xe518 <udi_cdc_multi_putc+0x2a>
    e528:	80 e0       	ldi	r24, 0x00	; 0
    e52a:	90 e0       	ldi	r25, 0x00	; 0
    e52c:	2b c0       	rjmp	.+86     	; 0xe584 <udi_cdc_multi_putc+0x96>
    e52e:	8f b7       	in	r24, 0x3f	; 63
    e530:	89 83       	std	Y+1, r24	; 0x01
    e532:	f8 94       	cli
    e534:	69 81       	ldd	r22, Y+1	; 0x01
    e536:	20 91 a0 28 	lds	r18, 0x28A0	; 0x8028a0 <udi_cdc_tx_buf_sel>
    e53a:	30 e0       	ldi	r19, 0x00	; 0
    e53c:	f9 01       	movw	r30, r18
    e53e:	ee 0f       	add	r30, r30
    e540:	ff 1f       	adc	r31, r31
    e542:	ef 55       	subi	r30, 0x5F	; 95
    e544:	f7 4d       	sbci	r31, 0xD7	; 215
    e546:	80 81       	ld	r24, Z
    e548:	91 81       	ldd	r25, Z+1	; 0x01
    e54a:	ac 01       	movw	r20, r24
    e54c:	4f 5f       	subi	r20, 0xFF	; 255
    e54e:	5f 4f       	sbci	r21, 0xFF	; 255
    e550:	40 83       	st	Z, r20
    e552:	51 83       	std	Z+1, r21	; 0x01
    e554:	20 9f       	mul	r18, r16
    e556:	a0 01       	movw	r20, r0
    e558:	21 9f       	mul	r18, r17
    e55a:	50 0d       	add	r21, r0
    e55c:	30 9f       	mul	r19, r16
    e55e:	50 0d       	add	r21, r0
    e560:	11 24       	eor	r1, r1
    e562:	9a 01       	movw	r18, r20
    e564:	2a 55       	subi	r18, 0x5A	; 90
    e566:	37 4d       	sbci	r19, 0xD7	; 215
    e568:	f9 01       	movw	r30, r18
    e56a:	e8 0f       	add	r30, r24
    e56c:	f9 1f       	adc	r31, r25
    e56e:	d0 82       	st	Z, r13
    e570:	6f bf       	out	0x3f, r22	; 63
    e572:	ee 20       	and	r14, r14
    e574:	29 f0       	breq	.+10     	; 0xe580 <udi_cdc_multi_putc+0x92>
    e576:	df 2c       	mov	r13, r15
    e578:	ff 0c       	add	r15, r15
    e57a:	ff 08       	sbc	r15, r15
    e57c:	e1 2c       	mov	r14, r1
    e57e:	cc cf       	rjmp	.-104    	; 0xe518 <udi_cdc_multi_putc+0x2a>
    e580:	81 e0       	ldi	r24, 0x01	; 1
    e582:	90 e0       	ldi	r25, 0x00	; 0
    e584:	0f 90       	pop	r0
    e586:	df 91       	pop	r29
    e588:	cf 91       	pop	r28
    e58a:	1f 91       	pop	r17
    e58c:	0f 91       	pop	r16
    e58e:	ff 90       	pop	r15
    e590:	ef 90       	pop	r14
    e592:	df 90       	pop	r13
    e594:	08 95       	ret

0000e596 <udi_cdc_putc>:
    e596:	bc 01       	movw	r22, r24
    e598:	80 e0       	ldi	r24, 0x00	; 0
    e59a:	a9 cf       	rjmp	.-174    	; 0xe4ee <udi_cdc_multi_putc>
    e59c:	08 95       	ret

0000e59e <udc_next_desc_in_iface>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
    e59e:	e0 91 ca 2d 	lds	r30, 0x2DCA	; 0x802dca <udc_ptr_conf>
    e5a2:	f0 91 cb 2d 	lds	r31, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    e5a6:	01 90       	ld	r0, Z+
    e5a8:	f0 81       	ld	r31, Z
    e5aa:	e0 2d       	mov	r30, r0
    e5ac:	22 81       	ldd	r18, Z+2	; 0x02
    e5ae:	33 81       	ldd	r19, Z+3	; 0x03
    e5b0:	2e 0f       	add	r18, r30
    e5b2:	3f 1f       	adc	r19, r31
    e5b4:	fc 01       	movw	r30, r24
    e5b6:	40 81       	ld	r20, Z
    e5b8:	e4 0f       	add	r30, r20
    e5ba:	f1 1d       	adc	r31, r1
    e5bc:	e2 17       	cp	r30, r18
    e5be:	f3 07       	cpc	r31, r19
    e5c0:	a0 f4       	brcc	.+40     	; 0xe5ea <udc_next_desc_in_iface+0x4c>
    e5c2:	81 81       	ldd	r24, Z+1	; 0x01
    e5c4:	84 30       	cpi	r24, 0x04	; 4
    e5c6:	a1 f0       	breq	.+40     	; 0xe5f0 <udc_next_desc_in_iface+0x52>
    e5c8:	86 13       	cpse	r24, r22
    e5ca:	06 c0       	rjmp	.+12     	; 0xe5d8 <udc_next_desc_in_iface+0x3a>
    e5cc:	14 c0       	rjmp	.+40     	; 0xe5f6 <udc_next_desc_in_iface+0x58>
    e5ce:	81 81       	ldd	r24, Z+1	; 0x01
    e5d0:	84 30       	cpi	r24, 0x04	; 4
    e5d2:	a1 f0       	breq	.+40     	; 0xe5fc <udc_next_desc_in_iface+0x5e>
    e5d4:	86 17       	cp	r24, r22
    e5d6:	a9 f0       	breq	.+42     	; 0xe602 <udc_next_desc_in_iface+0x64>
    e5d8:	80 81       	ld	r24, Z
    e5da:	e8 0f       	add	r30, r24
    e5dc:	f1 1d       	adc	r31, r1
    e5de:	e2 17       	cp	r30, r18
    e5e0:	f3 07       	cpc	r31, r19
    e5e2:	a8 f3       	brcs	.-22     	; 0xe5ce <udc_next_desc_in_iface+0x30>
    e5e4:	80 e0       	ldi	r24, 0x00	; 0
    e5e6:	90 e0       	ldi	r25, 0x00	; 0
    e5e8:	08 95       	ret
    e5ea:	80 e0       	ldi	r24, 0x00	; 0
    e5ec:	90 e0       	ldi	r25, 0x00	; 0
    e5ee:	08 95       	ret
    e5f0:	80 e0       	ldi	r24, 0x00	; 0
    e5f2:	90 e0       	ldi	r25, 0x00	; 0
    e5f4:	08 95       	ret
    e5f6:	8e 2f       	mov	r24, r30
    e5f8:	9f 2f       	mov	r25, r31
    e5fa:	08 95       	ret
    e5fc:	80 e0       	ldi	r24, 0x00	; 0
    e5fe:	90 e0       	ldi	r25, 0x00	; 0
    e600:	08 95       	ret
    e602:	8e 2f       	mov	r24, r30
    e604:	9f 2f       	mov	r25, r31
    e606:	08 95       	ret

0000e608 <udc_valid_address>:
    e608:	80 91 e3 2d 	lds	r24, 0x2DE3	; 0x802de3 <udd_g_ctrlreq+0x2>
    e60c:	8f 77       	andi	r24, 0x7F	; 127
    e60e:	0c 94 fd 57 	jmp	0xaffa	; 0xaffa <udd_set_address>
    e612:	08 95       	ret

0000e614 <udc_update_iface_desc>:
    e614:	90 91 cc 2d 	lds	r25, 0x2DCC	; 0x802dcc <udc_num_configuration>
    e618:	99 23       	and	r25, r25
    e61a:	81 f1       	breq	.+96     	; 0xe67c <udc_update_iface_desc+0x68>
    e61c:	e0 91 ca 2d 	lds	r30, 0x2DCA	; 0x802dca <udc_ptr_conf>
    e620:	f0 91 cb 2d 	lds	r31, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    e624:	01 90       	ld	r0, Z+
    e626:	f0 81       	ld	r31, Z
    e628:	e0 2d       	mov	r30, r0
    e62a:	94 81       	ldd	r25, Z+4	; 0x04
    e62c:	89 17       	cp	r24, r25
    e62e:	40 f5       	brcc	.+80     	; 0xe680 <udc_update_iface_desc+0x6c>
    e630:	e0 93 c8 2d 	sts	0x2DC8, r30	; 0x802dc8 <udc_ptr_iface>
    e634:	f0 93 c9 2d 	sts	0x2DC9, r31	; 0x802dc9 <udc_ptr_iface+0x1>
    e638:	22 81       	ldd	r18, Z+2	; 0x02
    e63a:	33 81       	ldd	r19, Z+3	; 0x03
    e63c:	2e 0f       	add	r18, r30
    e63e:	3f 1f       	adc	r19, r31
    e640:	e2 17       	cp	r30, r18
    e642:	f3 07       	cpc	r31, r19
    e644:	f8 f4       	brcc	.+62     	; 0xe684 <udc_update_iface_desc+0x70>
    e646:	91 81       	ldd	r25, Z+1	; 0x01
    e648:	94 30       	cpi	r25, 0x04	; 4
    e64a:	61 f4       	brne	.+24     	; 0xe664 <udc_update_iface_desc+0x50>
    e64c:	92 81       	ldd	r25, Z+2	; 0x02
    e64e:	89 13       	cpse	r24, r25
    e650:	09 c0       	rjmp	.+18     	; 0xe664 <udc_update_iface_desc+0x50>
    e652:	93 81       	ldd	r25, Z+3	; 0x03
    e654:	96 13       	cpse	r25, r22
    e656:	06 c0       	rjmp	.+12     	; 0xe664 <udc_update_iface_desc+0x50>
    e658:	e0 93 c8 2d 	sts	0x2DC8, r30	; 0x802dc8 <udc_ptr_iface>
    e65c:	f0 93 c9 2d 	sts	0x2DC9, r31	; 0x802dc9 <udc_ptr_iface+0x1>
    e660:	81 e0       	ldi	r24, 0x01	; 1
    e662:	08 95       	ret
    e664:	90 81       	ld	r25, Z
    e666:	e9 0f       	add	r30, r25
    e668:	f1 1d       	adc	r31, r1
    e66a:	e2 17       	cp	r30, r18
    e66c:	f3 07       	cpc	r31, r19
    e66e:	58 f3       	brcs	.-42     	; 0xe646 <udc_update_iface_desc+0x32>
    e670:	e0 93 c8 2d 	sts	0x2DC8, r30	; 0x802dc8 <udc_ptr_iface>
    e674:	f0 93 c9 2d 	sts	0x2DC9, r31	; 0x802dc9 <udc_ptr_iface+0x1>
    e678:	80 e0       	ldi	r24, 0x00	; 0
    e67a:	08 95       	ret
    e67c:	80 e0       	ldi	r24, 0x00	; 0
    e67e:	08 95       	ret
    e680:	80 e0       	ldi	r24, 0x00	; 0
    e682:	08 95       	ret
    e684:	80 e0       	ldi	r24, 0x00	; 0
    e686:	08 95       	ret

0000e688 <udc_iface_disable>:
    e688:	ef 92       	push	r14
    e68a:	ff 92       	push	r15
    e68c:	1f 93       	push	r17
    e68e:	cf 93       	push	r28
    e690:	df 93       	push	r29
    e692:	c8 2f       	mov	r28, r24
    e694:	60 e0       	ldi	r22, 0x00	; 0
    e696:	be df       	rcall	.-132    	; 0xe614 <udc_update_iface_desc>
    e698:	18 2f       	mov	r17, r24
    e69a:	88 23       	and	r24, r24
    e69c:	81 f1       	breq	.+96     	; 0xe6fe <udc_iface_disable+0x76>
    e69e:	a0 91 ca 2d 	lds	r26, 0x2DCA	; 0x802dca <udc_ptr_conf>
    e6a2:	b0 91 cb 2d 	lds	r27, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    e6a6:	ec 2f       	mov	r30, r28
    e6a8:	f0 e0       	ldi	r31, 0x00	; 0
    e6aa:	ee 0f       	add	r30, r30
    e6ac:	ff 1f       	adc	r31, r31
    e6ae:	12 96       	adiw	r26, 0x02	; 2
    e6b0:	8d 91       	ld	r24, X+
    e6b2:	9c 91       	ld	r25, X
    e6b4:	13 97       	sbiw	r26, 0x03	; 3
    e6b6:	e8 0f       	add	r30, r24
    e6b8:	f9 1f       	adc	r31, r25
    e6ba:	e0 80       	ld	r14, Z
    e6bc:	f1 80       	ldd	r15, Z+1	; 0x01
    e6be:	d7 01       	movw	r26, r14
    e6c0:	16 96       	adiw	r26, 0x06	; 6
    e6c2:	ed 91       	ld	r30, X+
    e6c4:	fc 91       	ld	r31, X
    e6c6:	17 97       	sbiw	r26, 0x07	; 7
    e6c8:	19 95       	eicall
    e6ca:	68 2f       	mov	r22, r24
    e6cc:	8c 2f       	mov	r24, r28
    e6ce:	a2 df       	rcall	.-188    	; 0xe614 <udc_update_iface_desc>
    e6d0:	18 2f       	mov	r17, r24
    e6d2:	88 23       	and	r24, r24
    e6d4:	a1 f0       	breq	.+40     	; 0xe6fe <udc_iface_disable+0x76>
    e6d6:	c0 91 c8 2d 	lds	r28, 0x2DC8	; 0x802dc8 <udc_ptr_iface>
    e6da:	d0 91 c9 2d 	lds	r29, 0x2DC9	; 0x802dc9 <udc_ptr_iface+0x1>
    e6de:	65 e0       	ldi	r22, 0x05	; 5
    e6e0:	ce 01       	movw	r24, r28
    e6e2:	5d df       	rcall	.-326    	; 0xe59e <udc_next_desc_in_iface>
    e6e4:	ec 01       	movw	r28, r24
    e6e6:	89 2b       	or	r24, r25
    e6e8:	21 f0       	breq	.+8      	; 0xe6f2 <udc_iface_disable+0x6a>
    e6ea:	8a 81       	ldd	r24, Y+2	; 0x02
    e6ec:	0e 94 06 5a 	call	0xb40c	; 0xb40c <udd_ep_free>
    e6f0:	f6 cf       	rjmp	.-20     	; 0xe6de <udc_iface_disable+0x56>
    e6f2:	d7 01       	movw	r26, r14
    e6f4:	12 96       	adiw	r26, 0x02	; 2
    e6f6:	ed 91       	ld	r30, X+
    e6f8:	fc 91       	ld	r31, X
    e6fa:	13 97       	sbiw	r26, 0x03	; 3
    e6fc:	19 95       	eicall
    e6fe:	81 2f       	mov	r24, r17
    e700:	df 91       	pop	r29
    e702:	cf 91       	pop	r28
    e704:	1f 91       	pop	r17
    e706:	ff 90       	pop	r15
    e708:	ef 90       	pop	r14
    e70a:	08 95       	ret

0000e70c <udc_iface_enable>:
    e70c:	1f 93       	push	r17
    e70e:	cf 93       	push	r28
    e710:	df 93       	push	r29
    e712:	18 2f       	mov	r17, r24
    e714:	7f df       	rcall	.-258    	; 0xe614 <udc_update_iface_desc>
    e716:	88 23       	and	r24, r24
    e718:	41 f1       	breq	.+80     	; 0xe76a <udc_iface_enable+0x5e>
    e71a:	c0 91 c8 2d 	lds	r28, 0x2DC8	; 0x802dc8 <udc_ptr_iface>
    e71e:	d0 91 c9 2d 	lds	r29, 0x2DC9	; 0x802dc9 <udc_ptr_iface+0x1>
    e722:	65 e0       	ldi	r22, 0x05	; 5
    e724:	ce 01       	movw	r24, r28
    e726:	3b df       	rcall	.-394    	; 0xe59e <udc_next_desc_in_iface>
    e728:	ec 01       	movw	r28, r24
    e72a:	89 2b       	or	r24, r25
    e72c:	49 f0       	breq	.+18     	; 0xe740 <udc_iface_enable+0x34>
    e72e:	4c 81       	ldd	r20, Y+4	; 0x04
    e730:	5d 81       	ldd	r21, Y+5	; 0x05
    e732:	6b 81       	ldd	r22, Y+3	; 0x03
    e734:	8a 81       	ldd	r24, Y+2	; 0x02
    e736:	0e 94 12 58 	call	0xb024	; 0xb024 <udd_ep_alloc>
    e73a:	81 11       	cpse	r24, r1
    e73c:	f2 cf       	rjmp	.-28     	; 0xe722 <udc_iface_enable+0x16>
    e73e:	15 c0       	rjmp	.+42     	; 0xe76a <udc_iface_enable+0x5e>
    e740:	a0 91 ca 2d 	lds	r26, 0x2DCA	; 0x802dca <udc_ptr_conf>
    e744:	b0 91 cb 2d 	lds	r27, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    e748:	e1 2f       	mov	r30, r17
    e74a:	f0 e0       	ldi	r31, 0x00	; 0
    e74c:	ee 0f       	add	r30, r30
    e74e:	ff 1f       	adc	r31, r31
    e750:	12 96       	adiw	r26, 0x02	; 2
    e752:	8d 91       	ld	r24, X+
    e754:	9c 91       	ld	r25, X
    e756:	13 97       	sbiw	r26, 0x03	; 3
    e758:	e8 0f       	add	r30, r24
    e75a:	f9 1f       	adc	r31, r25
    e75c:	01 90       	ld	r0, Z+
    e75e:	f0 81       	ld	r31, Z
    e760:	e0 2d       	mov	r30, r0
    e762:	01 90       	ld	r0, Z+
    e764:	f0 81       	ld	r31, Z
    e766:	e0 2d       	mov	r30, r0
    e768:	19 95       	eicall
    e76a:	df 91       	pop	r29
    e76c:	cf 91       	pop	r28
    e76e:	1f 91       	pop	r17
    e770:	08 95       	ret

0000e772 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
    e772:	0c 94 76 57 	jmp	0xaeec	; 0xaeec <udd_enable>
    e776:	08 95       	ret

0000e778 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    e778:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    e77a:	80 91 cc 2d 	lds	r24, 0x2DCC	; 0x802dcc <udc_num_configuration>
    e77e:	88 23       	and	r24, r24
    e780:	c1 f0       	breq	.+48     	; 0xe7b2 <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e782:	e0 91 ca 2d 	lds	r30, 0x2DCA	; 0x802dca <udc_ptr_conf>
    e786:	f0 91 cb 2d 	lds	r31, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    e78a:	01 90       	ld	r0, Z+
    e78c:	f0 81       	ld	r31, Z
    e78e:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    e790:	84 81       	ldd	r24, Z+4	; 0x04
    e792:	88 23       	and	r24, r24
    e794:	71 f0       	breq	.+28     	; 0xe7b2 <udc_reset+0x3a>
    e796:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    e798:	8c 2f       	mov	r24, r28
    e79a:	76 df       	rcall	.-276    	; 0xe688 <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    e79c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e79e:	e0 91 ca 2d 	lds	r30, 0x2DCA	; 0x802dca <udc_ptr_conf>
    e7a2:	f0 91 cb 2d 	lds	r31, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    e7a6:	01 90       	ld	r0, Z+
    e7a8:	f0 81       	ld	r31, Z
    e7aa:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    e7ac:	84 81       	ldd	r24, Z+4	; 0x04
    e7ae:	c8 17       	cp	r28, r24
    e7b0:	98 f3       	brcs	.-26     	; 0xe798 <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    e7b2:	10 92 cc 2d 	sts	0x2DCC, r1	; 0x802dcc <udc_num_configuration>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    e7b6:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_device_status>
    e7ba:	81 fd       	sbrc	r24, 1
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    e7bc:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <usb_callback_remotewakeup_disable>
	}
#endif
	udc_device_status =
    e7c0:	10 92 d0 2d 	sts	0x2DD0, r1	; 0x802dd0 <udc_device_status>
    e7c4:	10 92 d1 2d 	sts	0x2DD1, r1	; 0x802dd1 <udc_device_status+0x1>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    e7c8:	cf 91       	pop	r28
    e7ca:	08 95       	ret

0000e7cc <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    e7cc:	0e 94 1c 57 	call	0xae38	; 0xae38 <udd_disable>
	udc_reset();
    e7d0:	d3 cf       	rjmp	.-90     	; 0xe778 <udc_reset>
    e7d2:	08 95       	ret

0000e7d4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    e7d4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    e7d6:	80 91 cc 2d 	lds	r24, 0x2DCC	; 0x802dcc <udc_num_configuration>
    e7da:	88 23       	and	r24, r24
    e7dc:	49 f1       	breq	.+82     	; 0xe830 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e7de:	a0 91 ca 2d 	lds	r26, 0x2DCA	; 0x802dca <udc_ptr_conf>
    e7e2:	b0 91 cb 2d 	lds	r27, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    e7e6:	ed 91       	ld	r30, X+
    e7e8:	fc 91       	ld	r31, X
    e7ea:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    e7ec:	84 81       	ldd	r24, Z+4	; 0x04
    e7ee:	88 23       	and	r24, r24
    e7f0:	f9 f0       	breq	.+62     	; 0xe830 <udc_sof_notify+0x5c>
    e7f2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    e7f4:	ec 2f       	mov	r30, r28
    e7f6:	f0 e0       	ldi	r31, 0x00	; 0
    e7f8:	ee 0f       	add	r30, r30
    e7fa:	ff 1f       	adc	r31, r31
    e7fc:	12 96       	adiw	r26, 0x02	; 2
    e7fe:	8d 91       	ld	r24, X+
    e800:	9c 91       	ld	r25, X
    e802:	13 97       	sbiw	r26, 0x03	; 3
    e804:	e8 0f       	add	r30, r24
    e806:	f9 1f       	adc	r31, r25
    e808:	01 90       	ld	r0, Z+
    e80a:	f0 81       	ld	r31, Z
    e80c:	e0 2d       	mov	r30, r0
    e80e:	00 84       	ldd	r0, Z+8	; 0x08
    e810:	f1 85       	ldd	r31, Z+9	; 0x09
    e812:	e0 2d       	mov	r30, r0
    e814:	30 97       	sbiw	r30, 0x00	; 0
    e816:	09 f0       	breq	.+2      	; 0xe81a <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    e818:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    e81a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e81c:	a0 91 ca 2d 	lds	r26, 0x2DCA	; 0x802dca <udc_ptr_conf>
    e820:	b0 91 cb 2d 	lds	r27, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    e824:	ed 91       	ld	r30, X+
    e826:	fc 91       	ld	r31, X
    e828:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    e82a:	84 81       	ldd	r24, Z+4	; 0x04
    e82c:	c8 17       	cp	r28, r24
    e82e:	10 f3       	brcs	.-60     	; 0xe7f4 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    e830:	cf 91       	pop	r28
    e832:	08 95       	ret

0000e834 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    e834:	0f 93       	push	r16
    e836:	1f 93       	push	r17
    e838:	cf 93       	push	r28
    e83a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    e83c:	e1 ee       	ldi	r30, 0xE1	; 225
    e83e:	fd e2       	ldi	r31, 0x2D	; 45
    e840:	12 86       	std	Z+10, r1	; 0x0a
    e842:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    e844:	14 86       	std	Z+12, r1	; 0x0c
    e846:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    e848:	16 86       	std	Z+14, r1	; 0x0e
    e84a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    e84c:	80 81       	ld	r24, Z
    e84e:	88 23       	and	r24, r24
    e850:	0c f0       	brlt	.+2      	; 0xe854 <udc_process_setup+0x20>
    e852:	95 c2       	rjmp	.+1322   	; 0xed7e <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    e854:	20 91 e7 2d 	lds	r18, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    e858:	30 91 e8 2d 	lds	r19, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    e85c:	21 15       	cp	r18, r1
    e85e:	31 05       	cpc	r19, r1
    e860:	09 f0       	breq	.+2      	; 0xe864 <udc_process_setup+0x30>
    e862:	88 c2       	rjmp	.+1296   	; 0xed74 <udc_process_setup+0x540>
    e864:	7f c2       	rjmp	.+1278   	; 0xed64 <udc_process_setup+0x530>
    e866:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    e868:	09 f0       	breq	.+2      	; 0xe86c <udc_process_setup+0x38>
    e86a:	ab c0       	rjmp	.+342    	; 0xe9c2 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    e86c:	90 91 e2 2d 	lds	r25, 0x2DE2	; 0x802de2 <udd_g_ctrlreq+0x1>
    e870:	96 30       	cpi	r25, 0x06	; 6
    e872:	81 f0       	breq	.+32     	; 0xe894 <udc_process_setup+0x60>
    e874:	98 30       	cpi	r25, 0x08	; 8
    e876:	09 f4       	brne	.+2      	; 0xe87a <udc_process_setup+0x46>
    e878:	99 c0       	rjmp	.+306    	; 0xe9ac <udc_process_setup+0x178>
    e87a:	91 11       	cpse	r25, r1
    e87c:	a2 c0       	rjmp	.+324    	; 0xe9c2 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    e87e:	22 30       	cpi	r18, 0x02	; 2
    e880:	31 05       	cpc	r19, r1
    e882:	09 f0       	breq	.+2      	; 0xe886 <udc_process_setup+0x52>
    e884:	2b c2       	rjmp	.+1110   	; 0xecdc <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    e886:	62 e0       	ldi	r22, 0x02	; 2
    e888:	70 e0       	ldi	r23, 0x00	; 0
    e88a:	80 ed       	ldi	r24, 0xD0	; 208
    e88c:	9d e2       	ldi	r25, 0x2D	; 45
    e88e:	0e 94 0b 58 	call	0xb016	; 0xb016 <udd_set_setup_payload>
    e892:	7e c2       	rjmp	.+1276   	; 0xed90 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    e894:	80 91 e3 2d 	lds	r24, 0x2DE3	; 0x802de3 <udd_g_ctrlreq+0x2>
    e898:	90 91 e4 2d 	lds	r25, 0x2DE4	; 0x802de4 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    e89c:	29 2f       	mov	r18, r25
    e89e:	33 27       	eor	r19, r19
    e8a0:	22 30       	cpi	r18, 0x02	; 2
    e8a2:	31 05       	cpc	r19, r1
    e8a4:	b1 f0       	breq	.+44     	; 0xe8d2 <udc_process_setup+0x9e>
    e8a6:	20 f4       	brcc	.+8      	; 0xe8b0 <udc_process_setup+0x7c>
    e8a8:	21 30       	cpi	r18, 0x01	; 1
    e8aa:	31 05       	cpc	r19, r1
    e8ac:	41 f0       	breq	.+16     	; 0xe8be <udc_process_setup+0x8a>
    e8ae:	d8 c1       	rjmp	.+944    	; 0xec60 <udc_process_setup+0x42c>
    e8b0:	23 30       	cpi	r18, 0x03	; 3
    e8b2:	31 05       	cpc	r19, r1
    e8b4:	f1 f1       	breq	.+124    	; 0xe932 <udc_process_setup+0xfe>
    e8b6:	2f 30       	cpi	r18, 0x0F	; 15
    e8b8:	31 05       	cpc	r19, r1
    e8ba:	61 f1       	breq	.+88     	; 0xe914 <udc_process_setup+0xe0>
    e8bc:	d1 c1       	rjmp	.+930    	; 0xec60 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    e8be:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <udc_config>
    e8c2:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    e8c6:	dc 01       	movw	r26, r24
    e8c8:	6c 91       	ld	r22, X
    e8ca:	70 e0       	ldi	r23, 0x00	; 0
    e8cc:	0e 94 0b 58 	call	0xb016	; 0xb016 <udd_set_setup_payload>
    e8d0:	5e c0       	rjmp	.+188    	; 0xe98e <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    e8d2:	e0 91 7e 20 	lds	r30, 0x207E	; 0x80207e <udc_config>
    e8d6:	f0 91 7f 20 	lds	r31, 0x207F	; 0x80207f <udc_config+0x1>
    e8da:	21 89       	ldd	r18, Z+17	; 0x11
    e8dc:	82 17       	cp	r24, r18
    e8de:	08 f0       	brcs	.+2      	; 0xe8e2 <udc_process_setup+0xae>
    e8e0:	fd c1       	rjmp	.+1018   	; 0xecdc <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    e8e2:	99 27       	eor	r25, r25
    e8e4:	88 0f       	add	r24, r24
    e8e6:	99 1f       	adc	r25, r25
    e8e8:	88 0f       	add	r24, r24
    e8ea:	99 1f       	adc	r25, r25
    e8ec:	e0 91 80 20 	lds	r30, 0x2080	; 0x802080 <udc_config+0x2>
    e8f0:	f0 91 81 20 	lds	r31, 0x2081	; 0x802081 <udc_config+0x3>
    e8f4:	e8 0f       	add	r30, r24
    e8f6:	f9 1f       	adc	r31, r25
    e8f8:	80 81       	ld	r24, Z
    e8fa:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    e8fc:	fc 01       	movw	r30, r24
    e8fe:	62 81       	ldd	r22, Z+2	; 0x02
    e900:	73 81       	ldd	r23, Z+3	; 0x03
    e902:	0e 94 0b 58 	call	0xb016	; 0xb016 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    e906:	e0 91 e9 2d 	lds	r30, 0x2DE9	; 0x802de9 <udd_g_ctrlreq+0x8>
    e90a:	f0 91 ea 2d 	lds	r31, 0x2DEA	; 0x802dea <udd_g_ctrlreq+0x9>
    e90e:	82 e0       	ldi	r24, 0x02	; 2
    e910:	81 83       	std	Z+1, r24	; 0x01
    e912:	3d c0       	rjmp	.+122    	; 0xe98e <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    e914:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <udc_config+0x4>
    e918:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <udc_config+0x5>
    e91c:	00 97       	sbiw	r24, 0x00	; 0
    e91e:	09 f4       	brne	.+2      	; 0xe922 <udc_process_setup+0xee>
    e920:	dd c1       	rjmp	.+954    	; 0xecdc <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    e922:	dc 01       	movw	r26, r24
    e924:	12 96       	adiw	r26, 0x02	; 2
    e926:	6d 91       	ld	r22, X+
    e928:	7c 91       	ld	r23, X
    e92a:	13 97       	sbiw	r26, 0x03	; 3
    e92c:	0e 94 0b 58 	call	0xb016	; 0xb016 <udd_set_setup_payload>
    e930:	2e c0       	rjmp	.+92     	; 0xe98e <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    e932:	99 27       	eor	r25, r25
    e934:	81 30       	cpi	r24, 0x01	; 1
    e936:	91 05       	cpc	r25, r1
    e938:	99 f0       	breq	.+38     	; 0xe960 <udc_process_setup+0x12c>
    e93a:	58 f0       	brcs	.+22     	; 0xe952 <udc_process_setup+0x11e>
    e93c:	82 30       	cpi	r24, 0x02	; 2
    e93e:	91 05       	cpc	r25, r1
    e940:	09 f4       	brne	.+2      	; 0xe944 <udc_process_setup+0x110>
    e942:	22 c2       	rjmp	.+1092   	; 0xed88 <udc_process_setup+0x554>
    e944:	03 97       	sbiw	r24, 0x03	; 3
    e946:	09 f0       	breq	.+2      	; 0xe94a <udc_process_setup+0x116>
    e948:	94 c1       	rjmp	.+808    	; 0xec72 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    e94a:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    e94c:	ec ec       	ldi	r30, 0xCC	; 204
    e94e:	f1 e2       	ldi	r31, 0x21	; 33
    e950:	0a c0       	rjmp	.+20     	; 0xe966 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    e952:	64 e0       	ldi	r22, 0x04	; 4
    e954:	70 e0       	ldi	r23, 0x00	; 0
    e956:	82 e2       	ldi	r24, 0x22	; 34
    e958:	91 e2       	ldi	r25, 0x21	; 33
    e95a:	0e 94 0b 58 	call	0xb016	; 0xb016 <udd_set_setup_payload>
    e95e:	17 c0       	rjmp	.+46     	; 0xe98e <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    e960:	e1 e1       	ldi	r30, 0x11	; 17
    e962:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    e964:	30 e1       	ldi	r19, 0x10	; 16
    e966:	a4 ee       	ldi	r26, 0xE4	; 228
    e968:	b0 e2       	ldi	r27, 0x20	; 32
    e96a:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    e96c:	81 91       	ld	r24, Z+
    e96e:	90 e0       	ldi	r25, 0x00	; 0
    e970:	8d 93       	st	X+, r24
    e972:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    e974:	2f 5f       	subi	r18, 0xFF	; 255
    e976:	23 17       	cp	r18, r19
    e978:	c8 f3       	brcs	.-14     	; 0xe96c <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    e97a:	63 2f       	mov	r22, r19
    e97c:	66 0f       	add	r22, r22
    e97e:	6e 5f       	subi	r22, 0xFE	; 254
    e980:	60 93 e2 20 	sts	0x20E2, r22	; 0x8020e2 <udc_string_desc>
		udd_set_setup_payload(
    e984:	70 e0       	ldi	r23, 0x00	; 0
    e986:	82 ee       	ldi	r24, 0xE2	; 226
    e988:	90 e2       	ldi	r25, 0x20	; 32
    e98a:	0e 94 0b 58 	call	0xb016	; 0xb016 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    e98e:	e1 ee       	ldi	r30, 0xE1	; 225
    e990:	fd e2       	ldi	r31, 0x2D	; 45
    e992:	86 81       	ldd	r24, Z+6	; 0x06
    e994:	97 81       	ldd	r25, Z+7	; 0x07
    e996:	22 85       	ldd	r18, Z+10	; 0x0a
    e998:	33 85       	ldd	r19, Z+11	; 0x0b
    e99a:	82 17       	cp	r24, r18
    e99c:	93 07       	cpc	r25, r19
    e99e:	08 f0       	brcs	.+2      	; 0xe9a2 <udc_process_setup+0x16e>
    e9a0:	f7 c1       	rjmp	.+1006   	; 0xed90 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    e9a2:	80 93 eb 2d 	sts	0x2DEB, r24	; 0x802deb <udd_g_ctrlreq+0xa>
    e9a6:	90 93 ec 2d 	sts	0x2DEC, r25	; 0x802dec <udd_g_ctrlreq+0xb>
    e9aa:	f2 c1       	rjmp	.+996    	; 0xed90 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    e9ac:	21 30       	cpi	r18, 0x01	; 1
    e9ae:	31 05       	cpc	r19, r1
    e9b0:	09 f0       	breq	.+2      	; 0xe9b4 <udc_process_setup+0x180>
    e9b2:	94 c1       	rjmp	.+808    	; 0xecdc <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    e9b4:	61 e0       	ldi	r22, 0x01	; 1
    e9b6:	70 e0       	ldi	r23, 0x00	; 0
    e9b8:	8c ec       	ldi	r24, 0xCC	; 204
    e9ba:	9d e2       	ldi	r25, 0x2D	; 45
    e9bc:	0e 94 0b 58 	call	0xb016	; 0xb016 <udd_set_setup_payload>
    e9c0:	e7 c1       	rjmp	.+974    	; 0xed90 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    e9c2:	81 30       	cpi	r24, 0x01	; 1
    e9c4:	e9 f5       	brne	.+122    	; 0xea40 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    e9c6:	90 91 e2 2d 	lds	r25, 0x2DE2	; 0x802de2 <udd_g_ctrlreq+0x1>
    e9ca:	9a 30       	cpi	r25, 0x0A	; 10
    e9cc:	c9 f5       	brne	.+114    	; 0xea40 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    e9ce:	21 30       	cpi	r18, 0x01	; 1
    e9d0:	31 05       	cpc	r19, r1
    e9d2:	09 f0       	breq	.+2      	; 0xe9d6 <udc_process_setup+0x1a2>
    e9d4:	53 c1       	rjmp	.+678    	; 0xec7c <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    e9d6:	80 91 cc 2d 	lds	r24, 0x2DCC	; 0x802dcc <udc_num_configuration>
    e9da:	88 23       	and	r24, r24
    e9dc:	09 f4       	brne	.+2      	; 0xe9e0 <udc_process_setup+0x1ac>
    e9de:	4e c1       	rjmp	.+668    	; 0xec7c <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    e9e0:	c0 91 e5 2d 	lds	r28, 0x2DE5	; 0x802de5 <udd_g_ctrlreq+0x4>
    e9e4:	d0 91 e6 2d 	lds	r29, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    e9e8:	00 91 ca 2d 	lds	r16, 0x2DCA	; 0x802dca <udc_ptr_conf>
    e9ec:	10 91 cb 2d 	lds	r17, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    e9f0:	d8 01       	movw	r26, r16
    e9f2:	ed 91       	ld	r30, X+
    e9f4:	fc 91       	ld	r31, X
    e9f6:	84 81       	ldd	r24, Z+4	; 0x04
    e9f8:	c8 17       	cp	r28, r24
    e9fa:	08 f0       	brcs	.+2      	; 0xe9fe <udc_process_setup+0x1ca>
    e9fc:	3f c1       	rjmp	.+638    	; 0xec7c <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    e9fe:	60 e0       	ldi	r22, 0x00	; 0
    ea00:	8c 2f       	mov	r24, r28
    ea02:	08 de       	rcall	.-1008   	; 0xe614 <udc_update_iface_desc>
    ea04:	88 23       	and	r24, r24
    ea06:	09 f4       	brne	.+2      	; 0xea0a <udc_process_setup+0x1d6>
    ea08:	34 c1       	rjmp	.+616    	; 0xec72 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    ea0a:	ce 01       	movw	r24, r28
    ea0c:	99 27       	eor	r25, r25
    ea0e:	88 0f       	add	r24, r24
    ea10:	99 1f       	adc	r25, r25
    ea12:	d8 01       	movw	r26, r16
    ea14:	12 96       	adiw	r26, 0x02	; 2
    ea16:	ed 91       	ld	r30, X+
    ea18:	fc 91       	ld	r31, X
    ea1a:	13 97       	sbiw	r26, 0x03	; 3
    ea1c:	e8 0f       	add	r30, r24
    ea1e:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    ea20:	01 90       	ld	r0, Z+
    ea22:	f0 81       	ld	r31, Z
    ea24:	e0 2d       	mov	r30, r0
    ea26:	86 81       	ldd	r24, Z+6	; 0x06
    ea28:	97 81       	ldd	r25, Z+7	; 0x07
    ea2a:	fc 01       	movw	r30, r24
    ea2c:	19 95       	eicall
    ea2e:	80 93 ce 2d 	sts	0x2DCE, r24	; 0x802dce <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    ea32:	61 e0       	ldi	r22, 0x01	; 1
    ea34:	70 e0       	ldi	r23, 0x00	; 0
    ea36:	8e ec       	ldi	r24, 0xCE	; 206
    ea38:	9d e2       	ldi	r25, 0x2D	; 45
    ea3a:	0e 94 0b 58 	call	0xb016	; 0xb016 <udd_set_setup_payload>
    ea3e:	a8 c1       	rjmp	.+848    	; 0xed90 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    ea40:	82 30       	cpi	r24, 0x02	; 2
    ea42:	09 f0       	breq	.+2      	; 0xea46 <udc_process_setup+0x212>
    ea44:	16 c1       	rjmp	.+556    	; 0xec72 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    ea46:	80 91 e2 2d 	lds	r24, 0x2DE2	; 0x802de2 <udd_g_ctrlreq+0x1>
    ea4a:	81 11       	cpse	r24, r1
    ea4c:	0b c1       	rjmp	.+534    	; 0xec64 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    ea4e:	22 30       	cpi	r18, 0x02	; 2
    ea50:	31 05       	cpc	r19, r1
    ea52:	09 f0       	breq	.+2      	; 0xea56 <udc_process_setup+0x222>
    ea54:	43 c1       	rjmp	.+646    	; 0xecdc <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    ea56:	80 91 e5 2d 	lds	r24, 0x2DE5	; 0x802de5 <udd_g_ctrlreq+0x4>
    ea5a:	0e 94 9a 58 	call	0xb134	; 0xb134 <udd_ep_is_halted>
    ea5e:	90 e0       	ldi	r25, 0x00	; 0
    ea60:	80 93 c6 2d 	sts	0x2DC6, r24	; 0x802dc6 <udc_ep_status.4757>
    ea64:	90 93 c7 2d 	sts	0x2DC7, r25	; 0x802dc7 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    ea68:	62 e0       	ldi	r22, 0x02	; 2
    ea6a:	70 e0       	ldi	r23, 0x00	; 0
    ea6c:	86 ec       	ldi	r24, 0xC6	; 198
    ea6e:	9d e2       	ldi	r25, 0x2D	; 45
    ea70:	0e 94 0b 58 	call	0xb016	; 0xb016 <udd_set_setup_payload>
    ea74:	8d c1       	rjmp	.+794    	; 0xed90 <udc_process_setup+0x55c>
    ea76:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    ea78:	09 f0       	breq	.+2      	; 0xea7c <udc_process_setup+0x248>
    ea7a:	a0 c0       	rjmp	.+320    	; 0xebbc <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    ea7c:	90 91 e2 2d 	lds	r25, 0x2DE2	; 0x802de2 <udd_g_ctrlreq+0x1>
    ea80:	93 30       	cpi	r25, 0x03	; 3
    ea82:	91 f1       	breq	.+100    	; 0xeae8 <udc_process_setup+0x2b4>
    ea84:	18 f4       	brcc	.+6      	; 0xea8c <udc_process_setup+0x258>
    ea86:	91 30       	cpi	r25, 0x01	; 1
    ea88:	a9 f0       	breq	.+42     	; 0xeab4 <udc_process_setup+0x280>
    ea8a:	98 c0       	rjmp	.+304    	; 0xebbc <udc_process_setup+0x388>
    ea8c:	95 30       	cpi	r25, 0x05	; 5
    ea8e:	21 f0       	breq	.+8      	; 0xea98 <udc_process_setup+0x264>
    ea90:	99 30       	cpi	r25, 0x09	; 9
    ea92:	09 f4       	brne	.+2      	; 0xea96 <udc_process_setup+0x262>
    ea94:	43 c0       	rjmp	.+134    	; 0xeb1c <udc_process_setup+0x2e8>
    ea96:	92 c0       	rjmp	.+292    	; 0xebbc <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    ea98:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    ea9c:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    eaa0:	89 2b       	or	r24, r25
    eaa2:	09 f0       	breq	.+2      	; 0xeaa6 <udc_process_setup+0x272>
    eaa4:	1b c1       	rjmp	.+566    	; 0xecdc <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    eaa6:	84 e0       	ldi	r24, 0x04	; 4
    eaa8:	93 e7       	ldi	r25, 0x73	; 115
    eaaa:	80 93 ed 2d 	sts	0x2DED, r24	; 0x802ded <udd_g_ctrlreq+0xc>
    eaae:	90 93 ee 2d 	sts	0x2DEE, r25	; 0x802dee <udd_g_ctrlreq+0xd>
    eab2:	6e c1       	rjmp	.+732    	; 0xed90 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    eab4:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    eab8:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    eabc:	89 2b       	or	r24, r25
    eabe:	09 f0       	breq	.+2      	; 0xeac2 <udc_process_setup+0x28e>
    eac0:	0d c1       	rjmp	.+538    	; 0xecdc <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    eac2:	80 91 e3 2d 	lds	r24, 0x2DE3	; 0x802de3 <udd_g_ctrlreq+0x2>
    eac6:	90 91 e4 2d 	lds	r25, 0x2DE4	; 0x802de4 <udd_g_ctrlreq+0x3>
    eaca:	01 97       	sbiw	r24, 0x01	; 1
    eacc:	09 f0       	breq	.+2      	; 0xead0 <udc_process_setup+0x29c>
    eace:	06 c1       	rjmp	.+524    	; 0xecdc <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    ead0:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_device_status>
    ead4:	90 91 d1 2d 	lds	r25, 0x2DD1	; 0x802dd1 <udc_device_status+0x1>
    ead8:	8d 7f       	andi	r24, 0xFD	; 253
    eada:	80 93 d0 2d 	sts	0x2DD0, r24	; 0x802dd0 <udc_device_status>
    eade:	90 93 d1 2d 	sts	0x2DD1, r25	; 0x802dd1 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    eae2:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <usb_callback_remotewakeup_disable>
    eae6:	54 c1       	rjmp	.+680    	; 0xed90 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    eae8:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    eaec:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    eaf0:	89 2b       	or	r24, r25
    eaf2:	09 f0       	breq	.+2      	; 0xeaf6 <udc_process_setup+0x2c2>
    eaf4:	f3 c0       	rjmp	.+486    	; 0xecdc <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    eaf6:	80 91 e3 2d 	lds	r24, 0x2DE3	; 0x802de3 <udd_g_ctrlreq+0x2>
    eafa:	90 91 e4 2d 	lds	r25, 0x2DE4	; 0x802de4 <udd_g_ctrlreq+0x3>
    eafe:	01 97       	sbiw	r24, 0x01	; 1
    eb00:	09 f0       	breq	.+2      	; 0xeb04 <udc_process_setup+0x2d0>
    eb02:	b2 c0       	rjmp	.+356    	; 0xec68 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    eb04:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_device_status>
    eb08:	90 91 d1 2d 	lds	r25, 0x2DD1	; 0x802dd1 <udc_device_status+0x1>
    eb0c:	82 60       	ori	r24, 0x02	; 2
    eb0e:	80 93 d0 2d 	sts	0x2DD0, r24	; 0x802dd0 <udc_device_status>
    eb12:	90 93 d1 2d 	sts	0x2DD1, r25	; 0x802dd1 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    eb16:	0e 94 ef 20 	call	0x41de	; 0x41de <usb_callback_remotewakeup_enable>
    eb1a:	3a c1       	rjmp	.+628    	; 0xed90 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    eb1c:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    eb20:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    eb24:	89 2b       	or	r24, r25
    eb26:	09 f0       	breq	.+2      	; 0xeb2a <udc_process_setup+0x2f6>
    eb28:	d9 c0       	rjmp	.+434    	; 0xecdc <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    eb2a:	0e 94 00 58 	call	0xb000	; 0xb000 <udd_getaddress>
    eb2e:	88 23       	and	r24, r24
    eb30:	09 f4       	brne	.+2      	; 0xeb34 <udc_process_setup+0x300>
    eb32:	9f c0       	rjmp	.+318    	; 0xec72 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    eb34:	20 91 e3 2d 	lds	r18, 0x2DE3	; 0x802de3 <udd_g_ctrlreq+0x2>
    eb38:	30 91 e4 2d 	lds	r19, 0x2DE4	; 0x802de4 <udd_g_ctrlreq+0x3>
    eb3c:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    eb3e:	e0 91 7e 20 	lds	r30, 0x207E	; 0x80207e <udc_config>
    eb42:	f0 91 7f 20 	lds	r31, 0x207F	; 0x80207f <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    eb46:	81 89       	ldd	r24, Z+17	; 0x11
    eb48:	90 e0       	ldi	r25, 0x00	; 0
    eb4a:	82 17       	cp	r24, r18
    eb4c:	93 07       	cpc	r25, r19
    eb4e:	08 f4       	brcc	.+2      	; 0xeb52 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    eb50:	90 c0       	rjmp	.+288    	; 0xec72 <udc_process_setup+0x43e>
    eb52:	12 de       	rcall	.-988    	; 0xe778 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    eb54:	80 91 e3 2d 	lds	r24, 0x2DE3	; 0x802de3 <udd_g_ctrlreq+0x2>
    eb58:	90 91 e4 2d 	lds	r25, 0x2DE4	; 0x802de4 <udd_g_ctrlreq+0x3>
    eb5c:	80 93 cc 2d 	sts	0x2DCC, r24	; 0x802dcc <udc_num_configuration>
	if (udc_num_configuration == 0) {
    eb60:	88 23       	and	r24, r24
    eb62:	09 f4       	brne	.+2      	; 0xeb66 <udc_process_setup+0x332>
    eb64:	15 c1       	rjmp	.+554    	; 0xed90 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    eb66:	99 27       	eor	r25, r25
    eb68:	81 50       	subi	r24, 0x01	; 1
    eb6a:	90 4c       	sbci	r25, 0xC0	; 192
    eb6c:	88 0f       	add	r24, r24
    eb6e:	99 1f       	adc	r25, r25
    eb70:	88 0f       	add	r24, r24
    eb72:	99 1f       	adc	r25, r25
    eb74:	e0 91 80 20 	lds	r30, 0x2080	; 0x802080 <udc_config+0x2>
    eb78:	f0 91 81 20 	lds	r31, 0x2081	; 0x802081 <udc_config+0x3>
    eb7c:	e8 0f       	add	r30, r24
    eb7e:	f9 1f       	adc	r31, r25
    eb80:	e0 93 ca 2d 	sts	0x2DCA, r30	; 0x802dca <udc_ptr_conf>
    eb84:	f0 93 cb 2d 	sts	0x2DCB, r31	; 0x802dcb <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    eb88:	01 90       	ld	r0, Z+
    eb8a:	f0 81       	ld	r31, Z
    eb8c:	e0 2d       	mov	r30, r0
    eb8e:	84 81       	ldd	r24, Z+4	; 0x04
    eb90:	88 23       	and	r24, r24
    eb92:	09 f4       	brne	.+2      	; 0xeb96 <udc_process_setup+0x362>
    eb94:	fd c0       	rjmp	.+506    	; 0xed90 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    eb96:	c0 e0       	ldi	r28, 0x00	; 0
    eb98:	60 e0       	ldi	r22, 0x00	; 0
    eb9a:	8c 2f       	mov	r24, r28
    eb9c:	b7 dd       	rcall	.-1170   	; 0xe70c <udc_iface_enable>
    eb9e:	88 23       	and	r24, r24
    eba0:	09 f4       	brne	.+2      	; 0xeba4 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    eba2:	67 c0       	rjmp	.+206    	; 0xec72 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    eba4:	cf 5f       	subi	r28, 0xFF	; 255
    eba6:	e0 91 ca 2d 	lds	r30, 0x2DCA	; 0x802dca <udc_ptr_conf>
    ebaa:	f0 91 cb 2d 	lds	r31, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    ebae:	01 90       	ld	r0, Z+
    ebb0:	f0 81       	ld	r31, Z
    ebb2:	e0 2d       	mov	r30, r0
    ebb4:	84 81       	ldd	r24, Z+4	; 0x04
    ebb6:	c8 17       	cp	r28, r24
    ebb8:	78 f3       	brcs	.-34     	; 0xeb98 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    ebba:	ea c0       	rjmp	.+468    	; 0xed90 <udc_process_setup+0x55c>
    ebbc:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    ebbe:	e9 f4       	brne	.+58     	; 0xebfa <udc_process_setup+0x3c6>
    ebc0:	90 91 e2 2d 	lds	r25, 0x2DE2	; 0x802de2 <udd_g_ctrlreq+0x1>
    ebc4:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    ebc6:	c9 f4       	brne	.+50     	; 0xebfa <udc_process_setup+0x3c6>
    ebc8:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    ebcc:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    ebd0:	89 2b       	or	r24, r25
    ebd2:	09 f0       	breq	.+2      	; 0xebd6 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    ebd4:	53 c0       	rjmp	.+166    	; 0xec7c <udc_process_setup+0x448>
    ebd6:	80 91 cc 2d 	lds	r24, 0x2DCC	; 0x802dcc <udc_num_configuration>
    ebda:	88 23       	and	r24, r24
    ebdc:	09 f4       	brne	.+2      	; 0xebe0 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    ebde:	4e c0       	rjmp	.+156    	; 0xec7c <udc_process_setup+0x448>
    ebe0:	e1 ee       	ldi	r30, 0xE1	; 225
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    ebe2:	fd e2       	ldi	r31, 0x2D	; 45

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    ebe4:	c4 81       	ldd	r28, Z+4	; 0x04
    ebe6:	d2 81       	ldd	r29, Z+2	; 0x02
    ebe8:	8c 2f       	mov	r24, r28
    ebea:	4e dd       	rcall	.-1380   	; 0xe688 <udc_iface_disable>
    ebec:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    ebee:	09 f4       	brne	.+2      	; 0xebf2 <udc_process_setup+0x3be>
    ebf0:	40 c0       	rjmp	.+128    	; 0xec72 <udc_process_setup+0x43e>
    ebf2:	6d 2f       	mov	r22, r29
    ebf4:	8c 2f       	mov	r24, r28
    ebf6:	8a dd       	rcall	.-1260   	; 0xe70c <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    ebf8:	3a c0       	rjmp	.+116    	; 0xec6e <udc_process_setup+0x43a>
    ebfa:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    ebfc:	d1 f5       	brne	.+116    	; 0xec72 <udc_process_setup+0x43e>
    ebfe:	80 91 e2 2d 	lds	r24, 0x2DE2	; 0x802de2 <udd_g_ctrlreq+0x1>
    ec02:	81 30       	cpi	r24, 0x01	; 1
    ec04:	19 f0       	breq	.+6      	; 0xec0c <udc_process_setup+0x3d8>
    ec06:	83 30       	cpi	r24, 0x03	; 3
    ec08:	a1 f0       	breq	.+40     	; 0xec32 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    ec0a:	30 c0       	rjmp	.+96     	; 0xec6c <udc_process_setup+0x438>
    ec0c:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    ec10:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    ec14:	89 2b       	or	r24, r25
    ec16:	09 f0       	breq	.+2      	; 0xec1a <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    ec18:	61 c0       	rjmp	.+194    	; 0xecdc <udc_process_setup+0x4a8>
    ec1a:	80 91 e3 2d 	lds	r24, 0x2DE3	; 0x802de3 <udd_g_ctrlreq+0x2>
    ec1e:	90 91 e4 2d 	lds	r25, 0x2DE4	; 0x802de4 <udd_g_ctrlreq+0x3>
    ec22:	89 2b       	or	r24, r25
    ec24:	09 f0       	breq	.+2      	; 0xec28 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    ec26:	5a c0       	rjmp	.+180    	; 0xecdc <udc_process_setup+0x4a8>
    ec28:	80 91 e5 2d 	lds	r24, 0x2DE5	; 0x802de5 <udd_g_ctrlreq+0x4>
    ec2c:	0e 94 b5 58 	call	0xb16a	; 0xb16a <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    ec30:	1e c0       	rjmp	.+60     	; 0xec6e <udc_process_setup+0x43a>
    ec32:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x6>
    ec36:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x7>
    ec3a:	89 2b       	or	r24, r25
    ec3c:	09 f0       	breq	.+2      	; 0xec40 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    ec3e:	4e c0       	rjmp	.+156    	; 0xecdc <udc_process_setup+0x4a8>
    ec40:	80 91 e3 2d 	lds	r24, 0x2DE3	; 0x802de3 <udd_g_ctrlreq+0x2>
    ec44:	90 91 e4 2d 	lds	r25, 0x2DE4	; 0x802de4 <udd_g_ctrlreq+0x3>
    ec48:	89 2b       	or	r24, r25
    ec4a:	09 f0       	breq	.+2      	; 0xec4e <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    ec4c:	47 c0       	rjmp	.+142    	; 0xecdc <udc_process_setup+0x4a8>
    ec4e:	c1 ee       	ldi	r28, 0xE1	; 225
    ec50:	dd e2       	ldi	r29, 0x2D	; 45
    ec52:	8c 81       	ldd	r24, Y+4	; 0x04
    ec54:	0e 94 b7 59 	call	0xb36e	; 0xb36e <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    ec58:	8c 81       	ldd	r24, Y+4	; 0x04
    ec5a:	0e 94 22 5a 	call	0xb444	; 0xb444 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    ec5e:	07 c0       	rjmp	.+14     	; 0xec6e <udc_process_setup+0x43a>
    ec60:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    ec62:	05 c0       	rjmp	.+10     	; 0xec6e <udc_process_setup+0x43a>
    ec64:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    ec66:	03 c0       	rjmp	.+6      	; 0xec6e <udc_process_setup+0x43a>
    ec68:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    ec6a:	01 c0       	rjmp	.+2      	; 0xec6e <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    ec6c:	80 e0       	ldi	r24, 0x00	; 0
    ec6e:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    ec70:	90 c0       	rjmp	.+288    	; 0xed92 <udc_process_setup+0x55e>
    ec72:	80 91 e1 2d 	lds	r24, 0x2DE1	; 0x802de1 <udd_g_ctrlreq>
    ec76:	8f 71       	andi	r24, 0x1F	; 31
    ec78:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    ec7a:	81 f5       	brne	.+96     	; 0xecdc <udc_process_setup+0x4a8>
    ec7c:	80 91 cc 2d 	lds	r24, 0x2DCC	; 0x802dcc <udc_num_configuration>
    ec80:	88 23       	and	r24, r24
    ec82:	09 f4       	brne	.+2      	; 0xec86 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    ec84:	71 c0       	rjmp	.+226    	; 0xed68 <udc_process_setup+0x534>
    ec86:	00 91 e5 2d 	lds	r16, 0x2DE5	; 0x802de5 <udd_g_ctrlreq+0x4>
    ec8a:	10 91 e6 2d 	lds	r17, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    ec8e:	c0 91 ca 2d 	lds	r28, 0x2DCA	; 0x802dca <udc_ptr_conf>
    ec92:	d0 91 cb 2d 	lds	r29, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    ec96:	e8 81       	ld	r30, Y
    ec98:	f9 81       	ldd	r31, Y+1	; 0x01
    ec9a:	84 81       	ldd	r24, Z+4	; 0x04
    ec9c:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    ec9e:	08 f0       	brcs	.+2      	; 0xeca2 <udc_process_setup+0x46e>
    eca0:	65 c0       	rjmp	.+202    	; 0xed6c <udc_process_setup+0x538>
    eca2:	60 e0       	ldi	r22, 0x00	; 0
    eca4:	80 2f       	mov	r24, r16
    eca6:	b6 dc       	rcall	.-1684   	; 0xe614 <udc_update_iface_desc>
    eca8:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    ecaa:	c1 f0       	breq	.+48     	; 0xecdc <udc_process_setup+0x4a8>
    ecac:	f8 01       	movw	r30, r16
    ecae:	ff 27       	eor	r31, r31
    ecb0:	cf 01       	movw	r24, r30
    ecb2:	88 0f       	add	r24, r24
    ecb4:	99 1f       	adc	r25, r25
    ecb6:	ea 81       	ldd	r30, Y+2	; 0x02
    ecb8:	fb 81       	ldd	r31, Y+3	; 0x03
    ecba:	e8 0f       	add	r30, r24
    ecbc:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    ecbe:	c0 81       	ld	r28, Z
    ecc0:	d1 81       	ldd	r29, Z+1	; 0x01
    ecc2:	ee 81       	ldd	r30, Y+6	; 0x06
    ecc4:	ff 81       	ldd	r31, Y+7	; 0x07
    ecc6:	19 95       	eicall
    ecc8:	68 2f       	mov	r22, r24
    ecca:	80 2f       	mov	r24, r16
    eccc:	a3 dc       	rcall	.-1722   	; 0xe614 <udc_update_iface_desc>
    ecce:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    ecd0:	29 f0       	breq	.+10     	; 0xecdc <udc_process_setup+0x4a8>
    ecd2:	ec 81       	ldd	r30, Y+4	; 0x04
    ecd4:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    ecd6:	19 95       	eicall
    ecd8:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    ecda:	5b c0       	rjmp	.+182    	; 0xed92 <udc_process_setup+0x55e>
    ecdc:	80 91 e1 2d 	lds	r24, 0x2DE1	; 0x802de1 <udd_g_ctrlreq>
    ece0:	8f 71       	andi	r24, 0x1F	; 31
    ece2:	82 30       	cpi	r24, 0x02	; 2
    ece4:	09 f0       	breq	.+2      	; 0xece8 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    ece6:	44 c0       	rjmp	.+136    	; 0xed70 <udc_process_setup+0x53c>
    ece8:	80 91 cc 2d 	lds	r24, 0x2DCC	; 0x802dcc <udc_num_configuration>
    ecec:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    ecee:	b1 f1       	breq	.+108    	; 0xed5c <udc_process_setup+0x528>
    ecf0:	a0 91 ca 2d 	lds	r26, 0x2DCA	; 0x802dca <udc_ptr_conf>
    ecf4:	b0 91 cb 2d 	lds	r27, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    ecf8:	ed 91       	ld	r30, X+
    ecfa:	fc 91       	ld	r31, X
    ecfc:	11 97       	sbiw	r26, 0x01	; 1
    ecfe:	84 81       	ldd	r24, Z+4	; 0x04
    ed00:	88 23       	and	r24, r24
    ed02:	71 f1       	breq	.+92     	; 0xed60 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    ed04:	c0 e0       	ldi	r28, 0x00	; 0
    ed06:	ec 2f       	mov	r30, r28
    ed08:	f0 e0       	ldi	r31, 0x00	; 0
    ed0a:	ee 0f       	add	r30, r30
    ed0c:	ff 1f       	adc	r31, r31
    ed0e:	12 96       	adiw	r26, 0x02	; 2
    ed10:	8d 91       	ld	r24, X+
    ed12:	9c 91       	ld	r25, X
    ed14:	13 97       	sbiw	r26, 0x03	; 3
    ed16:	e8 0f       	add	r30, r24
    ed18:	f9 1f       	adc	r31, r25
    ed1a:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    ed1c:	11 81       	ldd	r17, Z+1	; 0x01
    ed1e:	d8 01       	movw	r26, r16
    ed20:	16 96       	adiw	r26, 0x06	; 6
    ed22:	ed 91       	ld	r30, X+
    ed24:	fc 91       	ld	r31, X
    ed26:	17 97       	sbiw	r26, 0x07	; 7
    ed28:	19 95       	eicall
    ed2a:	68 2f       	mov	r22, r24
    ed2c:	8c 2f       	mov	r24, r28
    ed2e:	72 dc       	rcall	.-1820   	; 0xe614 <udc_update_iface_desc>
    ed30:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    ed32:	79 f1       	breq	.+94     	; 0xed92 <udc_process_setup+0x55e>
    ed34:	d8 01       	movw	r26, r16
    ed36:	14 96       	adiw	r26, 0x04	; 4
    ed38:	ed 91       	ld	r30, X+
    ed3a:	fc 91       	ld	r31, X
    ed3c:	15 97       	sbiw	r26, 0x05	; 5
    ed3e:	19 95       	eicall
    ed40:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    ed42:	27 c0       	rjmp	.+78     	; 0xed92 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    ed44:	cf 5f       	subi	r28, 0xFF	; 255
    ed46:	a0 91 ca 2d 	lds	r26, 0x2DCA	; 0x802dca <udc_ptr_conf>
    ed4a:	b0 91 cb 2d 	lds	r27, 0x2DCB	; 0x802dcb <udc_ptr_conf+0x1>
    ed4e:	ed 91       	ld	r30, X+
    ed50:	fc 91       	ld	r31, X
    ed52:	11 97       	sbiw	r26, 0x01	; 1
    ed54:	94 81       	ldd	r25, Z+4	; 0x04
    ed56:	c9 17       	cp	r28, r25
    ed58:	b0 f2       	brcs	.-84     	; 0xed06 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    ed5a:	1b c0       	rjmp	.+54     	; 0xed92 <udc_process_setup+0x55e>
    ed5c:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    ed5e:	19 c0       	rjmp	.+50     	; 0xed92 <udc_process_setup+0x55e>
    ed60:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    ed62:	17 c0       	rjmp	.+46     	; 0xed92 <udc_process_setup+0x55e>
    ed64:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    ed66:	15 c0       	rjmp	.+42     	; 0xed92 <udc_process_setup+0x55e>
    ed68:	80 e0       	ldi	r24, 0x00	; 0
    ed6a:	13 c0       	rjmp	.+38     	; 0xed92 <udc_process_setup+0x55e>
    ed6c:	80 e0       	ldi	r24, 0x00	; 0
    ed6e:	11 c0       	rjmp	.+34     	; 0xed92 <udc_process_setup+0x55e>
    ed70:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    ed72:	0f c0       	rjmp	.+30     	; 0xed92 <udc_process_setup+0x55e>
    ed74:	98 2f       	mov	r25, r24
    ed76:	90 76       	andi	r25, 0x60	; 96
    ed78:	09 f0       	breq	.+2      	; 0xed7c <udc_process_setup+0x548>
    ed7a:	7b cf       	rjmp	.-266    	; 0xec72 <udc_process_setup+0x43e>
    ed7c:	74 cd       	rjmp	.-1304   	; 0xe866 <udc_process_setup+0x32>
    ed7e:	98 2f       	mov	r25, r24
    ed80:	90 76       	andi	r25, 0x60	; 96
    ed82:	09 f0       	breq	.+2      	; 0xed86 <udc_process_setup+0x552>
    ed84:	76 cf       	rjmp	.-276    	; 0xec72 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    ed86:	77 ce       	rjmp	.-786    	; 0xea76 <udc_process_setup+0x242>
		str = udc_string_product_name;
    ed88:	3c e0       	ldi	r19, 0x0C	; 12
    ed8a:	e4 e0       	ldi	r30, 0x04	; 4
    ed8c:	f1 e2       	ldi	r31, 0x21	; 33
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    ed8e:	eb cd       	rjmp	.-1066   	; 0xe966 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    ed90:	81 e0       	ldi	r24, 0x01	; 1
    ed92:	df 91       	pop	r29
    ed94:	cf 91       	pop	r28
    ed96:	1f 91       	pop	r17
    ed98:	0f 91       	pop	r16
    ed9a:	08 95       	ret

0000ed9c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    ed9c:	cf 93       	push	r28
    ed9e:	df 93       	push	r29
    eda0:	1f 92       	push	r1
    eda2:	cd b7       	in	r28, 0x3d	; 61
    eda4:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    eda6:	80 91 81 2e 	lds	r24, 0x2E81	; 0x802e81 <stdio_base>
    edaa:	90 91 82 2e 	lds	r25, 0x2E82	; 0x802e82 <stdio_base+0x1>
    edae:	e0 91 7d 2e 	lds	r30, 0x2E7D	; 0x802e7d <ptr_get>
    edb2:	f0 91 7e 2e 	lds	r31, 0x2E7E	; 0x802e7e <ptr_get+0x1>
    edb6:	be 01       	movw	r22, r28
    edb8:	6f 5f       	subi	r22, 0xFF	; 255
    edba:	7f 4f       	sbci	r23, 0xFF	; 255
    edbc:	19 95       	eicall
	return c;
    edbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    edc0:	08 2e       	mov	r0, r24
    edc2:	00 0c       	add	r0, r0
    edc4:	99 0b       	sbc	r25, r25
    edc6:	0f 90       	pop	r0
    edc8:	df 91       	pop	r29
    edca:	cf 91       	pop	r28
    edcc:	08 95       	ret

0000edce <stdio_usb_putchar>:
int stdio_usb_putchar (volatile void * unused, char data)
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    edce:	80 91 d2 2d 	lds	r24, 0x2DD2	; 0x802dd2 <stdio_usb_interface_enable>
    edd2:	88 23       	and	r24, r24
    edd4:	81 f0       	breq	.+32     	; 0xedf6 <stdio_usb_putchar+0x28>
    edd6:	86 2f       	mov	r24, r22
		return 0;  // -1
	}

	return udi_cdc_putc(data) ? 0 : -1;
    edd8:	08 2e       	mov	r0, r24
    edda:	00 0c       	add	r0, r0
    eddc:	99 0b       	sbc	r25, r25
    edde:	db db       	rcall	.-2122   	; 0xe596 <udi_cdc_putc>
    ede0:	21 e0       	ldi	r18, 0x01	; 1
    ede2:	30 e0       	ldi	r19, 0x00	; 0
    ede4:	89 2b       	or	r24, r25
    ede6:	11 f0       	breq	.+4      	; 0xedec <stdio_usb_putchar+0x1e>
    ede8:	20 e0       	ldi	r18, 0x00	; 0
    edea:	30 e0       	ldi	r19, 0x00	; 0
    edec:	88 27       	eor	r24, r24
    edee:	99 27       	eor	r25, r25
    edf0:	82 1b       	sub	r24, r18
    edf2:	93 0b       	sbc	r25, r19
    edf4:	08 95       	ret
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
		return 0;  // -1
    edf6:	80 e0       	ldi	r24, 0x00	; 0
    edf8:	90 e0       	ldi	r25, 0x00	; 0
	}

	return udi_cdc_putc(data) ? 0 : -1;
}
    edfa:	08 95       	ret

0000edfc <stdio_usb_getchar>:

void stdio_usb_getchar (void volatile * unused, char *data)
{
    edfc:	cf 93       	push	r28
    edfe:	df 93       	push	r29
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    ee00:	80 91 d2 2d 	lds	r24, 0x2DD2	; 0x802dd2 <stdio_usb_interface_enable>
    ee04:	81 11       	cpse	r24, r1
    ee06:	03 c0       	rjmp	.+6      	; 0xee0e <stdio_usb_getchar+0x12>
		*data = 0;  // -1
    ee08:	fb 01       	movw	r30, r22
    ee0a:	10 82       	st	Z, r1
		return;
    ee0c:	03 c0       	rjmp	.+6      	; 0xee14 <stdio_usb_getchar+0x18>
	}

	*data = (char)udi_cdc_getc();
    ee0e:	eb 01       	movw	r28, r22
    ee10:	cf da       	rcall	.-2658   	; 0xe3b0 <udi_cdc_getc>
}
    ee12:	88 83       	st	Y, r24
    ee14:	df 91       	pop	r29
    ee16:	cf 91       	pop	r28
    ee18:	08 95       	ret

0000ee1a <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
    ee1a:	81 e0       	ldi	r24, 0x01	; 1
    ee1c:	80 93 d2 2d 	sts	0x2DD2, r24	; 0x802dd2 <stdio_usb_interface_enable>
	return true;
}
    ee20:	08 95       	ret

0000ee22 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    ee22:	10 92 d2 2d 	sts	0x2DD2, r1	; 0x802dd2 <stdio_usb_interface_enable>
    ee26:	08 95       	ret

0000ee28 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    ee28:	10 92 81 2e 	sts	0x2E81, r1	; 0x802e81 <stdio_base>
    ee2c:	10 92 82 2e 	sts	0x2E82, r1	; 0x802e82 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    ee30:	87 ee       	ldi	r24, 0xE7	; 231
    ee32:	96 e7       	ldi	r25, 0x76	; 118
    ee34:	80 93 7f 2e 	sts	0x2E7F, r24	; 0x802e7f <ptr_put>
    ee38:	90 93 80 2e 	sts	0x2E80, r25	; 0x802e80 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    ee3c:	8e ef       	ldi	r24, 0xFE	; 254
    ee3e:	96 e7       	ldi	r25, 0x76	; 118
    ee40:	80 93 7d 2e 	sts	0x2E7D, r24	; 0x802e7d <ptr_get>
    ee44:	90 93 7e 2e 	sts	0x2E7E, r25	; 0x802e7e <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    ee48:	94 dc       	rcall	.-1752   	; 0xe772 <udc_start>
    ee4a:	6e ec       	ldi	r22, 0xCE	; 206
    ee4c:	76 e7       	ldi	r23, 0x76	; 118
    ee4e:	8c e2       	ldi	r24, 0x2C	; 44
    ee50:	97 e7       	ldi	r25, 0x77	; 119
    ee52:	0c 94 f9 84 	jmp	0x109f2	; 0x109f2 <fdevopen>
    ee56:	08 95       	ret

0000ee58 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    ee58:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    ee5a:	80 91 81 2e 	lds	r24, 0x2E81	; 0x802e81 <stdio_base>
    ee5e:	90 91 82 2e 	lds	r25, 0x2E82	; 0x802e82 <stdio_base+0x1>
    ee62:	e0 91 7f 2e 	lds	r30, 0x2E7F	; 0x802e7f <ptr_put>
    ee66:	f0 91 80 2e 	lds	r31, 0x2E80	; 0x802e80 <ptr_put+0x1>
    ee6a:	19 95       	eicall
    ee6c:	99 23       	and	r25, r25
    ee6e:	1c f0       	brlt	.+6      	; 0xee76 <_write+0x1e>
		return -1;
	}
	return 1;
    ee70:	81 e0       	ldi	r24, 0x01	; 1
    ee72:	90 e0       	ldi	r25, 0x00	; 0
    ee74:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    ee76:	8f ef       	ldi	r24, 0xFF	; 255
    ee78:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    ee7a:	08 95       	ret

0000ee7c <nvm_eeprom_read_buffer>:
    ee7c:	cf 93       	push	r28
    ee7e:	df 93       	push	r29
    ee80:	9c 01       	movw	r18, r24
    ee82:	db 01       	movw	r26, r22
    ee84:	e0 ec       	ldi	r30, 0xC0	; 192
    ee86:	f1 e0       	ldi	r31, 0x01	; 1
    ee88:	97 85       	ldd	r25, Z+15	; 0x0f
    ee8a:	99 23       	and	r25, r25
    ee8c:	ec f3       	brlt	.-6      	; 0xee88 <nvm_eeprom_read_buffer+0xc>
    ee8e:	cc ec       	ldi	r28, 0xCC	; 204
    ee90:	d1 e0       	ldi	r29, 0x01	; 1
    ee92:	98 81       	ld	r25, Y
    ee94:	98 60       	ori	r25, 0x08	; 8
    ee96:	98 83       	st	Y, r25
    ee98:	b9 01       	movw	r22, r18
    ee9a:	70 5f       	subi	r23, 0xF0	; 240
    ee9c:	cd 01       	movw	r24, r26
    ee9e:	0e 94 bd 84 	call	0x1097a	; 0x1097a <memcpy>
    eea2:	88 81       	ld	r24, Y
    eea4:	87 7f       	andi	r24, 0xF7	; 247
    eea6:	88 83       	st	Y, r24
    eea8:	df 91       	pop	r29
    eeaa:	cf 91       	pop	r28
    eeac:	08 95       	ret

0000eeae <nvm_eeprom_flush_buffer>:
    eeae:	e0 ec       	ldi	r30, 0xC0	; 192
    eeb0:	f1 e0       	ldi	r31, 0x01	; 1
    eeb2:	87 85       	ldd	r24, Z+15	; 0x0f
    eeb4:	88 23       	and	r24, r24
    eeb6:	ec f3       	brlt	.-6      	; 0xeeb2 <nvm_eeprom_flush_buffer+0x4>
    eeb8:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    eebc:	81 ff       	sbrs	r24, 1
    eebe:	07 c0       	rjmp	.+14     	; 0xeece <nvm_eeprom_flush_buffer+0x20>
    eec0:	86 e3       	ldi	r24, 0x36	; 54
    eec2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    eec6:	61 e0       	ldi	r22, 0x01	; 1
    eec8:	8b ec       	ldi	r24, 0xCB	; 203
    eeca:	91 e0       	ldi	r25, 0x01	; 1
    eecc:	56 c2       	rjmp	.+1196   	; 0xf37a <ccp_write_io>
    eece:	08 95       	ret

0000eed0 <nvm_eeprom_load_byte_to_buffer>:
    eed0:	e0 ec       	ldi	r30, 0xC0	; 192
    eed2:	f1 e0       	ldi	r31, 0x01	; 1
    eed4:	97 85       	ldd	r25, Z+15	; 0x0f
    eed6:	99 23       	and	r25, r25
    eed8:	ec f3       	brlt	.-6      	; 0xeed4 <nvm_eeprom_load_byte_to_buffer+0x4>
    eeda:	ac ec       	ldi	r26, 0xCC	; 204
    eedc:	b1 e0       	ldi	r27, 0x01	; 1
    eede:	9c 91       	ld	r25, X
    eee0:	98 60       	ori	r25, 0x08	; 8
    eee2:	9c 93       	st	X, r25
    eee4:	e8 2f       	mov	r30, r24
    eee6:	f0 e0       	ldi	r31, 0x00	; 0
    eee8:	f0 5f       	subi	r31, 0xF0	; 240
    eeea:	60 83       	st	Z, r22
    eeec:	8c 91       	ld	r24, X
    eeee:	87 7f       	andi	r24, 0xF7	; 247
    eef0:	8c 93       	st	X, r24
    eef2:	08 95       	ret

0000eef4 <nvm_eeprom_write_byte>:
    eef4:	ff 92       	push	r15
    eef6:	0f 93       	push	r16
    eef8:	1f 93       	push	r17
    eefa:	cf 93       	push	r28
    eefc:	df 93       	push	r29
    eefe:	18 2f       	mov	r17, r24
    ef00:	f9 2e       	mov	r15, r25
    ef02:	c6 2f       	mov	r28, r22
    ef04:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    ef08:	d2 df       	rcall	.-92     	; 0xeeae <nvm_eeprom_flush_buffer>
    ef0a:	e0 ec       	ldi	r30, 0xC0	; 192
    ef0c:	f1 e0       	ldi	r31, 0x01	; 1
    ef0e:	87 85       	ldd	r24, Z+15	; 0x0f
    ef10:	88 23       	and	r24, r24
    ef12:	ec f3       	brlt	.-6      	; 0xef0e <nvm_eeprom_write_byte+0x1a>
    ef14:	6c 2f       	mov	r22, r28
    ef16:	81 2f       	mov	r24, r17
    ef18:	db df       	rcall	.-74     	; 0xeed0 <nvm_eeprom_load_byte_to_buffer>
    ef1a:	c0 ec       	ldi	r28, 0xC0	; 192
    ef1c:	d1 e0       	ldi	r29, 0x01	; 1
    ef1e:	1a 82       	std	Y+2, r1	; 0x02
    ef20:	f9 82       	std	Y+1, r15	; 0x01
    ef22:	18 83       	st	Y, r17
    ef24:	85 e3       	ldi	r24, 0x35	; 53
    ef26:	8a 87       	std	Y+10, r24	; 0x0a
    ef28:	61 e0       	ldi	r22, 0x01	; 1
    ef2a:	8b ec       	ldi	r24, 0xCB	; 203
    ef2c:	91 e0       	ldi	r25, 0x01	; 1
    ef2e:	25 d2       	rcall	.+1098   	; 0xf37a <ccp_write_io>
    ef30:	0a 87       	std	Y+10, r16	; 0x0a
    ef32:	df 91       	pop	r29
    ef34:	cf 91       	pop	r28
    ef36:	1f 91       	pop	r17
    ef38:	0f 91       	pop	r16
    ef3a:	ff 90       	pop	r15
    ef3c:	08 95       	ret

0000ef3e <nvm_eeprom_load_page_to_buffer>:
    ef3e:	0f 93       	push	r16
    ef40:	1f 93       	push	r17
    ef42:	cf 93       	push	r28
    ef44:	8c 01       	movw	r16, r24
    ef46:	e0 ec       	ldi	r30, 0xC0	; 192
    ef48:	f1 e0       	ldi	r31, 0x01	; 1
    ef4a:	87 85       	ldd	r24, Z+15	; 0x0f
    ef4c:	88 23       	and	r24, r24
    ef4e:	ec f3       	brlt	.-6      	; 0xef4a <nvm_eeprom_load_page_to_buffer+0xc>
    ef50:	c0 e0       	ldi	r28, 0x00	; 0
    ef52:	f8 01       	movw	r30, r16
    ef54:	61 91       	ld	r22, Z+
    ef56:	8f 01       	movw	r16, r30
    ef58:	8c 2f       	mov	r24, r28
    ef5a:	ba df       	rcall	.-140    	; 0xeed0 <nvm_eeprom_load_byte_to_buffer>
    ef5c:	cf 5f       	subi	r28, 0xFF	; 255
    ef5e:	c0 32       	cpi	r28, 0x20	; 32
    ef60:	c1 f7       	brne	.-16     	; 0xef52 <nvm_eeprom_load_page_to_buffer+0x14>
    ef62:	cf 91       	pop	r28
    ef64:	1f 91       	pop	r17
    ef66:	0f 91       	pop	r16
    ef68:	08 95       	ret

0000ef6a <nvm_eeprom_atomic_write_page>:
    ef6a:	1f 93       	push	r17
    ef6c:	cf 93       	push	r28
    ef6e:	df 93       	push	r29
    ef70:	e0 ec       	ldi	r30, 0xC0	; 192
    ef72:	f1 e0       	ldi	r31, 0x01	; 1
    ef74:	97 85       	ldd	r25, Z+15	; 0x0f
    ef76:	99 23       	and	r25, r25
    ef78:	ec f3       	brlt	.-6      	; 0xef74 <nvm_eeprom_atomic_write_page+0xa>
    ef7a:	20 e2       	ldi	r18, 0x20	; 32
    ef7c:	82 9f       	mul	r24, r18
    ef7e:	c0 01       	movw	r24, r0
    ef80:	11 24       	eor	r1, r1
    ef82:	c0 ec       	ldi	r28, 0xC0	; 192
    ef84:	d1 e0       	ldi	r29, 0x01	; 1
    ef86:	1a 82       	std	Y+2, r1	; 0x02
    ef88:	99 83       	std	Y+1, r25	; 0x01
    ef8a:	88 83       	st	Y, r24
    ef8c:	1a 85       	ldd	r17, Y+10	; 0x0a
    ef8e:	85 e3       	ldi	r24, 0x35	; 53
    ef90:	8a 87       	std	Y+10, r24	; 0x0a
    ef92:	61 e0       	ldi	r22, 0x01	; 1
    ef94:	8b ec       	ldi	r24, 0xCB	; 203
    ef96:	91 e0       	ldi	r25, 0x01	; 1
    ef98:	f0 d1       	rcall	.+992    	; 0xf37a <ccp_write_io>
    ef9a:	1a 87       	std	Y+10, r17	; 0x0a
    ef9c:	df 91       	pop	r29
    ef9e:	cf 91       	pop	r28
    efa0:	1f 91       	pop	r17
    efa2:	08 95       	ret

0000efa4 <nvm_eeprom_erase_and_write_buffer>:
    efa4:	cf 92       	push	r12
    efa6:	df 92       	push	r13
    efa8:	ef 92       	push	r14
    efaa:	ff 92       	push	r15
    efac:	0f 93       	push	r16
    efae:	1f 93       	push	r17
    efb0:	cf 93       	push	r28
    efb2:	df 93       	push	r29
    efb4:	ec 01       	movw	r28, r24
    efb6:	7b 01       	movw	r14, r22
    efb8:	8a 01       	movw	r16, r20
    efba:	45 2b       	or	r20, r21
    efbc:	51 f1       	breq	.+84     	; 0xf012 <nvm_eeprom_erase_and_write_buffer+0x6e>
    efbe:	ce 01       	movw	r24, r28
    efc0:	8f 71       	andi	r24, 0x1F	; 31
    efc2:	99 27       	eor	r25, r25
    efc4:	89 2b       	or	r24, r25
    efc6:	b1 f4       	brne	.+44     	; 0xeff4 <nvm_eeprom_erase_and_write_buffer+0x50>
    efc8:	00 32       	cpi	r16, 0x20	; 32
    efca:	11 05       	cpc	r17, r1
    efcc:	98 f0       	brcs	.+38     	; 0xeff4 <nvm_eeprom_erase_and_write_buffer+0x50>
    efce:	c7 01       	movw	r24, r14
    efd0:	b6 df       	rcall	.-148    	; 0xef3e <nvm_eeprom_load_page_to_buffer>
    efd2:	ce 01       	movw	r24, r28
    efd4:	96 95       	lsr	r25
    efd6:	87 95       	ror	r24
    efd8:	92 95       	swap	r25
    efda:	82 95       	swap	r24
    efdc:	8f 70       	andi	r24, 0x0F	; 15
    efde:	89 27       	eor	r24, r25
    efe0:	9f 70       	andi	r25, 0x0F	; 15
    efe2:	89 27       	eor	r24, r25
    efe4:	c2 df       	rcall	.-124    	; 0xef6a <nvm_eeprom_atomic_write_page>
    efe6:	a0 96       	adiw	r28, 0x20	; 32
    efe8:	80 e2       	ldi	r24, 0x20	; 32
    efea:	e8 0e       	add	r14, r24
    efec:	f1 1c       	adc	r15, r1
    efee:	00 52       	subi	r16, 0x20	; 32
    eff0:	11 09       	sbc	r17, r1
    eff2:	0c c0       	rjmp	.+24     	; 0xf00c <nvm_eeprom_erase_and_write_buffer+0x68>
    eff4:	6e 01       	movw	r12, r28
    eff6:	ef ef       	ldi	r30, 0xFF	; 255
    eff8:	ce 1a       	sub	r12, r30
    effa:	de 0a       	sbc	r13, r30
    effc:	f7 01       	movw	r30, r14
    effe:	61 91       	ld	r22, Z+
    f000:	7f 01       	movw	r14, r30
    f002:	ce 01       	movw	r24, r28
    f004:	77 df       	rcall	.-274    	; 0xeef4 <nvm_eeprom_write_byte>
    f006:	01 50       	subi	r16, 0x01	; 1
    f008:	11 09       	sbc	r17, r1
    f00a:	e6 01       	movw	r28, r12
    f00c:	01 15       	cp	r16, r1
    f00e:	11 05       	cpc	r17, r1
    f010:	b1 f6       	brne	.-84     	; 0xefbe <nvm_eeprom_erase_and_write_buffer+0x1a>
    f012:	df 91       	pop	r29
    f014:	cf 91       	pop	r28
    f016:	1f 91       	pop	r17
    f018:	0f 91       	pop	r16
    f01a:	ff 90       	pop	r15
    f01c:	ef 90       	pop	r14
    f01e:	df 90       	pop	r13
    f020:	cf 90       	pop	r12
    f022:	08 95       	ret

0000f024 <nvm_flash_read_buffer>:
    f024:	da 01       	movw	r26, r20
    f026:	a9 01       	movw	r20, r18
    f028:	e0 ec       	ldi	r30, 0xC0	; 192
    f02a:	f1 e0       	ldi	r31, 0x01	; 1
    f02c:	37 85       	ldd	r19, Z+15	; 0x0f
    f02e:	33 23       	and	r19, r19
    f030:	ec f3       	brlt	.-6      	; 0xf02c <nvm_flash_read_buffer+0x8>
    f032:	41 15       	cp	r20, r1
    f034:	51 05       	cpc	r21, r1
    f036:	69 f0       	breq	.+26     	; 0xf052 <nvm_flash_read_buffer+0x2e>
    f038:	4a 0f       	add	r20, r26
    f03a:	5b 1f       	adc	r21, r27
    f03c:	8b bf       	out	0x3b, r24	; 59
    f03e:	fb 01       	movw	r30, r22
    f040:	37 91       	elpm	r19, Z+
    f042:	3d 93       	st	X+, r19
    f044:	6f 5f       	subi	r22, 0xFF	; 255
    f046:	7f 4f       	sbci	r23, 0xFF	; 255
    f048:	8f 4f       	sbci	r24, 0xFF	; 255
    f04a:	9f 4f       	sbci	r25, 0xFF	; 255
    f04c:	a4 17       	cp	r26, r20
    f04e:	b5 07       	cpc	r27, r21
    f050:	a9 f7       	brne	.-22     	; 0xf03c <nvm_flash_read_buffer+0x18>
    f052:	08 95       	ret

0000f054 <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    f054:	ef 92       	push	r14
    f056:	ff 92       	push	r15
    f058:	0f 93       	push	r16
    f05a:	1f 93       	push	r17
    f05c:	cf 93       	push	r28
    f05e:	df 93       	push	r29
    f060:	7a 01       	movw	r14, r20
    f062:	89 01       	movw	r16, r18
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    f064:	eb 01       	movw	r28, r22
    f066:	d1 70       	andi	r29, 0x01	; 1
	while ( len ) {
    f068:	23 2b       	or	r18, r19
    f06a:	51 f0       	breq	.+20     	; 0xf080 <nvm_user_sig_read_buffer+0x2c>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    f06c:	be 01       	movw	r22, r28
    f06e:	81 e0       	ldi	r24, 0x01	; 1
    f070:	7a d1       	rcall	.+756    	; 0xf366 <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    f072:	f7 01       	movw	r30, r14
    f074:	81 93       	st	Z+, r24
    f076:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    f078:	21 96       	adiw	r28, 0x01	; 1
		len--;
    f07a:	01 50       	subi	r16, 0x01	; 1
    f07c:	11 09       	sbc	r17, r1
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
    f07e:	b1 f7       	brne	.-20     	; 0xf06c <nvm_user_sig_read_buffer+0x18>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    f080:	df 91       	pop	r29
    f082:	cf 91       	pop	r28
    f084:	1f 91       	pop	r17
    f086:	0f 91       	pop	r16
    f088:	ff 90       	pop	r15
    f08a:	ef 90       	pop	r14
    f08c:	08 95       	ret

0000f08e <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    f08e:	2f 92       	push	r2
    f090:	3f 92       	push	r3
    f092:	4f 92       	push	r4
    f094:	5f 92       	push	r5
    f096:	6f 92       	push	r6
    f098:	7f 92       	push	r7
    f09a:	8f 92       	push	r8
    f09c:	9f 92       	push	r9
    f09e:	af 92       	push	r10
    f0a0:	bf 92       	push	r11
    f0a2:	cf 92       	push	r12
    f0a4:	df 92       	push	r13
    f0a6:	ef 92       	push	r14
    f0a8:	ff 92       	push	r15
    f0aa:	0f 93       	push	r16
    f0ac:	1f 93       	push	r17
    f0ae:	cf 93       	push	r28
    f0b0:	df 93       	push	r29
    f0b2:	00 d0       	rcall	.+0      	; 0xf0b4 <nvm_user_sig_write_buffer+0x26>
    f0b4:	1f 92       	push	r1
    f0b6:	cd b7       	in	r28, 0x3d	; 61
    f0b8:	de b7       	in	r29, 0x3e	; 62
    f0ba:	4b 83       	std	Y+3, r20	; 0x03
    f0bc:	5c 83       	std	Y+4, r21	; 0x04
    f0be:	79 01       	movw	r14, r18
    f0c0:	30 2e       	mov	r3, r16
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    f0c2:	6b 01       	movw	r12, r22
	bool b_flag_erase = false;

	while ( len ) {
    f0c4:	23 2b       	or	r18, r19
    f0c6:	09 f0       	breq	.+2      	; 0xf0ca <nvm_user_sig_write_buffer+0x3c>
    f0c8:	4f c0       	rjmp	.+158    	; 0xf168 <nvm_user_sig_write_buffer+0xda>
    f0ca:	65 c0       	rjmp	.+202    	; 0xf196 <nvm_user_sig_write_buffer+0x108>
    f0cc:	52 01       	movw	r10, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    f0ce:	33 20       	and	r3, r3
    f0d0:	79 f0       	breq	.+30     	; 0xf0f0 <nvm_user_sig_write_buffer+0x62>
    f0d2:	b2 01       	movw	r22, r4
    f0d4:	81 e0       	ldi	r24, 0x01	; 1
    f0d6:	47 d1       	rcall	.+654    	; 0xf366 <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    f0d8:	89 83       	std	Y+1, r24	; 0x01
    f0da:	b8 01       	movw	r22, r16
    f0dc:	81 e0       	ldi	r24, 0x01	; 1
    f0de:	43 d1       	rcall	.+646    	; 0xf366 <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    f0e0:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    f0e2:	89 81       	ldd	r24, Y+1	; 0x01
    f0e4:	9a 81       	ldd	r25, Y+2	; 0x02
    f0e6:	01 96       	adiw	r24, 0x01	; 1
    f0e8:	29 f0       	breq	.+10     	; 0xf0f4 <nvm_user_sig_write_buffer+0x66>
					b_flag_erase = true; // The page is not empty
    f0ea:	22 24       	eor	r2, r2
    f0ec:	23 94       	inc	r2
    f0ee:	02 c0       	rjmp	.+4      	; 0xf0f4 <nvm_user_sig_write_buffer+0x66>
				}
			}else{
				w_value = 0xFFFF;
    f0f0:	89 82       	std	Y+1, r8	; 0x01
    f0f2:	9a 82       	std	Y+2, r9	; 0x02
			}
			// Update flash buffer
			if (len) {
    f0f4:	e1 14       	cp	r14, r1
    f0f6:	f1 04       	cpc	r15, r1
    f0f8:	09 f1       	breq	.+66     	; 0xf13c <nvm_user_sig_write_buffer+0xae>
				if (opt_address == page_pos) {
    f0fa:	ac 14       	cp	r10, r12
    f0fc:	bd 04       	cpc	r11, r13
    f0fe:	79 f4       	brne	.+30     	; 0xf11e <nvm_user_sig_write_buffer+0x90>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    f100:	81 e0       	ldi	r24, 0x01	; 1
    f102:	e8 1a       	sub	r14, r24
    f104:	f1 08       	sbc	r15, r1
					opt_address++;
    f106:	ef ef       	ldi	r30, 0xFF	; 255
    f108:	ce 1a       	sub	r12, r30
    f10a:	de 0a       	sbc	r13, r30
					LSB(w_value)=*(uint8_t*)buf;
    f10c:	eb 81       	ldd	r30, Y+3	; 0x03
    f10e:	fc 81       	ldd	r31, Y+4	; 0x04
    f110:	81 91       	ld	r24, Z+
    f112:	eb 83       	std	Y+3, r30	; 0x03
    f114:	fc 83       	std	Y+4, r31	; 0x04
    f116:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    f118:	e1 14       	cp	r14, r1
    f11a:	f1 04       	cpc	r15, r1
    f11c:	79 f0       	breq	.+30     	; 0xf13c <nvm_user_sig_write_buffer+0xae>
				if (opt_address == (page_pos+1)) {
    f11e:	c0 16       	cp	r12, r16
    f120:	d1 06       	cpc	r13, r17
    f122:	61 f4       	brne	.+24     	; 0xf13c <nvm_user_sig_write_buffer+0xae>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    f124:	f1 e0       	ldi	r31, 0x01	; 1
    f126:	ef 1a       	sub	r14, r31
    f128:	f1 08       	sbc	r15, r1
					opt_address++;
    f12a:	2f ef       	ldi	r18, 0xFF	; 255
    f12c:	c2 1a       	sub	r12, r18
    f12e:	d2 0a       	sbc	r13, r18
					MSB(w_value)=*(uint8_t*)buf;
    f130:	eb 81       	ldd	r30, Y+3	; 0x03
    f132:	fc 81       	ldd	r31, Y+4	; 0x04
    f134:	81 91       	ld	r24, Z+
    f136:	eb 83       	std	Y+3, r30	; 0x03
    f138:	fc 83       	std	Y+4, r31	; 0x04
    f13a:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
    f13c:	49 81       	ldd	r20, Y+1	; 0x01
    f13e:	5a 81       	ldd	r21, Y+2	; 0x02
    f140:	c3 01       	movw	r24, r6
    f142:	b2 01       	movw	r22, r4
    f144:	0e 94 f2 88 	call	0x111e4	; 0x111e4 <nvm_flash_load_word_to_buffer>
    f148:	f2 e0       	ldi	r31, 0x02	; 2
    f14a:	4f 0e       	add	r4, r31
    f14c:	51 1c       	adc	r5, r1
    f14e:	61 1c       	adc	r6, r1
    f150:	71 1c       	adc	r7, r1
    f152:	0e 5f       	subi	r16, 0xFE	; 254
    f154:	1f 4f       	sbci	r17, 0xFF	; 255
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    f156:	01 30       	cpi	r16, 0x01	; 1
    f158:	22 e0       	ldi	r18, 0x02	; 2
    f15a:	12 07       	cpc	r17, r18
    f15c:	09 f0       	breq	.+2      	; 0xf160 <nvm_user_sig_write_buffer+0xd2>
    f15e:	b6 cf       	rjmp	.-148    	; 0xf0cc <nvm_user_sig_write_buffer+0x3e>
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
    f160:	e1 14       	cp	r14, r1
    f162:	f1 04       	cpc	r15, r1
    f164:	29 f4       	brne	.+10     	; 0xf170 <nvm_user_sig_write_buffer+0xe2>
    f166:	0a c0       	rjmp	.+20     	; 0xf17c <nvm_user_sig_write_buffer+0xee>
    f168:	21 2c       	mov	r2, r1
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    f16a:	88 24       	eor	r8, r8
    f16c:	8a 94       	dec	r8
    f16e:	98 2c       	mov	r9, r8
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    f170:	01 e0       	ldi	r16, 0x01	; 1
    f172:	10 e0       	ldi	r17, 0x00	; 0
    f174:	41 2c       	mov	r4, r1
    f176:	51 2c       	mov	r5, r1
    f178:	32 01       	movw	r6, r4
    f17a:	a8 cf       	rjmp	.-176    	; 0xf0cc <nvm_user_sig_write_buffer+0x3e>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
    f17c:	22 20       	and	r2, r2
    f17e:	59 f0       	breq	.+22     	; 0xf196 <nvm_user_sig_write_buffer+0x108>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    f180:	e0 ec       	ldi	r30, 0xC0	; 192
    f182:	f1 e0       	ldi	r31, 0x01	; 1
    f184:	87 85       	ldd	r24, Z+15	; 0x0f
    f186:	88 23       	and	r24, r24
    f188:	ec f3       	brlt	.-6      	; 0xf184 <nvm_user_sig_write_buffer+0xf6>
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
    f18a:	48 e1       	ldi	r20, 0x18	; 24
    f18c:	60 e0       	ldi	r22, 0x00	; 0
    f18e:	70 e0       	ldi	r23, 0x00	; 0
    f190:	cb 01       	movw	r24, r22
    f192:	0e 94 e3 88 	call	0x111c6	; 0x111c6 <_etext>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    f196:	e0 ec       	ldi	r30, 0xC0	; 192
    f198:	f1 e0       	ldi	r31, 0x01	; 1
    f19a:	87 85       	ldd	r24, Z+15	; 0x0f
    f19c:	88 23       	and	r24, r24
    f19e:	ec f3       	brlt	.-6      	; 0xf19a <nvm_user_sig_write_buffer+0x10c>
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
    f1a0:	4a e1       	ldi	r20, 0x1A	; 26
    f1a2:	60 e0       	ldi	r22, 0x00	; 0
    f1a4:	70 e0       	ldi	r23, 0x00	; 0
    f1a6:	cb 01       	movw	r24, r22
    f1a8:	0e 94 e3 88 	call	0x111c6	; 0x111c6 <_etext>
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
    f1ac:	24 96       	adiw	r28, 0x04	; 4
    f1ae:	cd bf       	out	0x3d, r28	; 61
    f1b0:	de bf       	out	0x3e, r29	; 62
    f1b2:	df 91       	pop	r29
    f1b4:	cf 91       	pop	r28
    f1b6:	1f 91       	pop	r17
    f1b8:	0f 91       	pop	r16
    f1ba:	ff 90       	pop	r15
    f1bc:	ef 90       	pop	r14
    f1be:	df 90       	pop	r13
    f1c0:	cf 90       	pop	r12
    f1c2:	bf 90       	pop	r11
    f1c4:	af 90       	pop	r10
    f1c6:	9f 90       	pop	r9
    f1c8:	8f 90       	pop	r8
    f1ca:	7f 90       	pop	r7
    f1cc:	6f 90       	pop	r6
    f1ce:	5f 90       	pop	r5
    f1d0:	4f 90       	pop	r4
    f1d2:	3f 90       	pop	r3
    f1d4:	2f 90       	pop	r2
    f1d6:	08 95       	ret

0000f1d8 <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    f1d8:	2f 92       	push	r2
    f1da:	3f 92       	push	r3
    f1dc:	4f 92       	push	r4
    f1de:	5f 92       	push	r5
    f1e0:	6f 92       	push	r6
    f1e2:	7f 92       	push	r7
    f1e4:	8f 92       	push	r8
    f1e6:	9f 92       	push	r9
    f1e8:	af 92       	push	r10
    f1ea:	bf 92       	push	r11
    f1ec:	cf 92       	push	r12
    f1ee:	df 92       	push	r13
    f1f0:	ef 92       	push	r14
    f1f2:	ff 92       	push	r15
    f1f4:	0f 93       	push	r16
    f1f6:	1f 93       	push	r17
    f1f8:	cf 93       	push	r28
    f1fa:	df 93       	push	r29
    f1fc:	cd b7       	in	r28, 0x3d	; 61
    f1fe:	de b7       	in	r29, 0x3e	; 62
    f200:	2a 97       	sbiw	r28, 0x0a	; 10
    f202:	cd bf       	out	0x3d, r28	; 61
    f204:	de bf       	out	0x3e, r29	; 62
    f206:	2b 01       	movw	r4, r22
    f208:	3c 01       	movw	r6, r24
    f20a:	1a 01       	movw	r2, r20
    f20c:	59 01       	movw	r10, r18
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
    f20e:	dc 01       	movw	r26, r24
    f210:	cb 01       	movw	r24, r22
    f212:	88 27       	eor	r24, r24
    f214:	9e 7f       	andi	r25, 0xFE	; 254
    f216:	8f 83       	std	Y+7, r24	; 0x07
    f218:	98 87       	std	Y+8, r25	; 0x08
    f21a:	a9 87       	std	Y+9, r26	; 0x09
    f21c:	ba 87       	std	Y+10, r27	; 0x0a

	// For each page
	while ( len ) {
    f21e:	23 2b       	or	r18, r19
    f220:	09 f4       	brne	.+2      	; 0xf224 <nvm_flash_erase_and_write_buffer+0x4c>
    f222:	8b c0       	rjmp	.+278    	; 0xf33a <nvm_flash_erase_and_write_buffer+0x162>
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    f224:	88 24       	eor	r8, r8
    f226:	8a 94       	dec	r8
    f228:	98 2c       	mov	r9, r8
    f22a:	04 c0       	rjmp	.+8      	; 0xf234 <nvm_flash_erase_and_write_buffer+0x5c>
    f22c:	cf 82       	std	Y+7, r12	; 0x07
    f22e:	d8 86       	std	Y+8, r13	; 0x08
    f230:	e9 86       	std	Y+9, r14	; 0x09
    f232:	fa 86       	std	Y+10, r15	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    f234:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    f238:	88 23       	and	r24, r24
    f23a:	e4 f3       	brlt	.-8      	; 0xf234 <nvm_flash_erase_and_write_buffer+0x5c>
    f23c:	8f 81       	ldd	r24, Y+7	; 0x07
    f23e:	98 85       	ldd	r25, Y+8	; 0x08
    f240:	a9 85       	ldd	r26, Y+9	; 0x09
    f242:	ba 85       	ldd	r27, Y+10	; 0x0a
    f244:	9e 5f       	subi	r25, 0xFE	; 254
    f246:	af 4f       	sbci	r26, 0xFF	; 255
    f248:	bf 4f       	sbci	r27, 0xFF	; 255
    f24a:	8b 83       	std	Y+3, r24	; 0x03
    f24c:	9c 83       	std	Y+4, r25	; 0x04
    f24e:	ad 83       	std	Y+5, r26	; 0x05
    f250:	be 83       	std	Y+6, r27	; 0x06
    f252:	cf 80       	ldd	r12, Y+7	; 0x07
    f254:	d8 84       	ldd	r13, Y+8	; 0x08
    f256:	e9 84       	ldd	r14, Y+9	; 0x09
    f258:	fa 84       	ldd	r15, Y+10	; 0x0a
    f25a:	10 e0       	ldi	r17, 0x00	; 0
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    f25c:	00 23       	and	r16, r16
    f25e:	51 f0       	breq	.+20     	; 0xf274 <nvm_flash_erase_and_write_buffer+0x9c>
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_word_far(addr);
    f260:	eb be       	out	0x3b, r14	; 59
    f262:	f6 01       	movw	r30, r12
    f264:	87 91       	elpm	r24, Z+
    f266:	96 91       	elpm	r25, Z
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    f268:	89 83       	std	Y+1, r24	; 0x01
    f26a:	9a 83       	std	Y+2, r25	; 0x02
				if (w_value!=0xFFFF) {
    f26c:	01 96       	adiw	r24, 0x01	; 1
    f26e:	21 f0       	breq	.+8      	; 0xf278 <nvm_flash_erase_and_write_buffer+0xa0>
					b_flag_erase = true; // The page is not empty
    f270:	11 e0       	ldi	r17, 0x01	; 1
    f272:	02 c0       	rjmp	.+4      	; 0xf278 <nvm_flash_erase_and_write_buffer+0xa0>
				}
			}else{
				w_value = 0xFFFF;
    f274:	89 82       	std	Y+1, r8	; 0x01
    f276:	9a 82       	std	Y+2, r9	; 0x02
			}

			// Update flash buffer
			if (len) {
    f278:	a1 14       	cp	r10, r1
    f27a:	b1 04       	cpc	r11, r1
    f27c:	61 f1       	breq	.+88     	; 0xf2d6 <nvm_flash_erase_and_write_buffer+0xfe>
				if (opt_address == page_address) {
    f27e:	c4 14       	cp	r12, r4
    f280:	d5 04       	cpc	r13, r5
    f282:	e6 04       	cpc	r14, r6
    f284:	f7 04       	cpc	r15, r7
    f286:	79 f4       	brne	.+30     	; 0xf2a6 <nvm_flash_erase_and_write_buffer+0xce>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    f288:	b1 e0       	ldi	r27, 0x01	; 1
    f28a:	ab 1a       	sub	r10, r27
    f28c:	b1 08       	sbc	r11, r1
					opt_address++;
    f28e:	ef ef       	ldi	r30, 0xFF	; 255
    f290:	4e 1a       	sub	r4, r30
    f292:	5e 0a       	sbc	r5, r30
    f294:	6e 0a       	sbc	r6, r30
    f296:	7e 0a       	sbc	r7, r30
					LSB(w_value)=*(uint8_t*)buf;
    f298:	d1 01       	movw	r26, r2
    f29a:	8d 91       	ld	r24, X+
    f29c:	1d 01       	movw	r2, r26
    f29e:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    f2a0:	a1 14       	cp	r10, r1
    f2a2:	b1 04       	cpc	r11, r1
    f2a4:	c1 f0       	breq	.+48     	; 0xf2d6 <nvm_flash_erase_and_write_buffer+0xfe>
				if (opt_address == (page_address+1)) {
    f2a6:	d7 01       	movw	r26, r14
    f2a8:	c6 01       	movw	r24, r12
    f2aa:	01 96       	adiw	r24, 0x01	; 1
    f2ac:	a1 1d       	adc	r26, r1
    f2ae:	b1 1d       	adc	r27, r1
    f2b0:	84 15       	cp	r24, r4
    f2b2:	95 05       	cpc	r25, r5
    f2b4:	a6 05       	cpc	r26, r6
    f2b6:	b7 05       	cpc	r27, r7
    f2b8:	71 f4       	brne	.+28     	; 0xf2d6 <nvm_flash_erase_and_write_buffer+0xfe>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    f2ba:	b1 e0       	ldi	r27, 0x01	; 1
    f2bc:	ab 1a       	sub	r10, r27
    f2be:	b1 08       	sbc	r11, r1
					opt_address++;
    f2c0:	26 01       	movw	r4, r12
    f2c2:	37 01       	movw	r6, r14
    f2c4:	e2 e0       	ldi	r30, 0x02	; 2
    f2c6:	4e 0e       	add	r4, r30
    f2c8:	51 1c       	adc	r5, r1
    f2ca:	61 1c       	adc	r6, r1
    f2cc:	71 1c       	adc	r7, r1
					MSB(w_value)=*(uint8_t*)buf;
    f2ce:	d1 01       	movw	r26, r2
    f2d0:	8d 91       	ld	r24, X+
    f2d2:	1d 01       	movw	r2, r26
    f2d4:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
    f2d6:	49 81       	ldd	r20, Y+1	; 0x01
    f2d8:	5a 81       	ldd	r21, Y+2	; 0x02
    f2da:	c7 01       	movw	r24, r14
    f2dc:	b6 01       	movw	r22, r12
    f2de:	0e 94 f2 88 	call	0x111e4	; 0x111e4 <nvm_flash_load_word_to_buffer>
			page_address+=2;
    f2e2:	b2 e0       	ldi	r27, 0x02	; 2
    f2e4:	cb 0e       	add	r12, r27
    f2e6:	d1 1c       	adc	r13, r1
    f2e8:	e1 1c       	adc	r14, r1
    f2ea:	f1 1c       	adc	r15, r1
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    f2ec:	8b 81       	ldd	r24, Y+3	; 0x03
    f2ee:	9c 81       	ldd	r25, Y+4	; 0x04
    f2f0:	ad 81       	ldd	r26, Y+5	; 0x05
    f2f2:	be 81       	ldd	r27, Y+6	; 0x06
    f2f4:	c8 16       	cp	r12, r24
    f2f6:	d9 06       	cpc	r13, r25
    f2f8:	ea 06       	cpc	r14, r26
    f2fa:	fb 06       	cpc	r15, r27
    f2fc:	09 f0       	breq	.+2      	; 0xf300 <nvm_flash_erase_and_write_buffer+0x128>
    f2fe:	ae cf       	rjmp	.-164    	; 0xf25c <nvm_flash_erase_and_write_buffer+0x84>
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
    f300:	11 23       	and	r17, r17
    f302:	61 f0       	breq	.+24     	; 0xf31c <nvm_flash_erase_and_write_buffer+0x144>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
    f304:	6f 81       	ldd	r22, Y+7	; 0x07
    f306:	78 85       	ldd	r23, Y+8	; 0x08
    f308:	89 85       	ldd	r24, Y+9	; 0x09
    f30a:	9a 85       	ldd	r25, Y+10	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    f30c:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    f310:	22 23       	and	r18, r18
    f312:	e4 f3       	brlt	.-8      	; 0xf30c <nvm_flash_erase_and_write_buffer+0x134>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
    f314:	45 e2       	ldi	r20, 0x25	; 37
    f316:	0e 94 e3 88 	call	0x111c6	; 0x111c6 <_etext>
    f31a:	0b c0       	rjmp	.+22     	; 0xf332 <nvm_flash_erase_and_write_buffer+0x15a>
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
    f31c:	6f 81       	ldd	r22, Y+7	; 0x07
    f31e:	78 85       	ldd	r23, Y+8	; 0x08
    f320:	89 85       	ldd	r24, Y+9	; 0x09
    f322:	9a 85       	ldd	r25, Y+10	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    f324:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    f328:	22 23       	and	r18, r18
    f32a:	e4 f3       	brlt	.-8      	; 0xf324 <nvm_flash_erase_and_write_buffer+0x14c>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
    f32c:	44 e2       	ldi	r20, 0x24	; 36
    f32e:	0e 94 e3 88 	call	0x111c6	; 0x111c6 <_etext>

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    f332:	a1 14       	cp	r10, r1
    f334:	b1 04       	cpc	r11, r1
    f336:	09 f0       	breq	.+2      	; 0xf33a <nvm_flash_erase_and_write_buffer+0x162>
    f338:	79 cf       	rjmp	.-270    	; 0xf22c <nvm_flash_erase_and_write_buffer+0x54>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
}
    f33a:	2a 96       	adiw	r28, 0x0a	; 10
    f33c:	cd bf       	out	0x3d, r28	; 61
    f33e:	de bf       	out	0x3e, r29	; 62
    f340:	df 91       	pop	r29
    f342:	cf 91       	pop	r28
    f344:	1f 91       	pop	r17
    f346:	0f 91       	pop	r16
    f348:	ff 90       	pop	r15
    f34a:	ef 90       	pop	r14
    f34c:	df 90       	pop	r13
    f34e:	cf 90       	pop	r12
    f350:	bf 90       	pop	r11
    f352:	af 90       	pop	r10
    f354:	9f 90       	pop	r9
    f356:	8f 90       	pop	r8
    f358:	7f 90       	pop	r7
    f35a:	6f 90       	pop	r6
    f35c:	5f 90       	pop	r5
    f35e:	4f 90       	pop	r4
    f360:	3f 90       	pop	r3
    f362:	2f 90       	pop	r2
    f364:	08 95       	ret

0000f366 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    f366:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    f36a:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    f36c:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    f36e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    f372:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    f374:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    f378:	08 95       	ret

0000f37a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    f37a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    f37c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    f37e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    f380:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    f382:	60 83       	st	Z, r22
	ret                             // Return to caller
    f384:	08 95       	ret

0000f386 <vfprintf>:
    f386:	2f 92       	push	r2
    f388:	3f 92       	push	r3
    f38a:	4f 92       	push	r4
    f38c:	5f 92       	push	r5
    f38e:	6f 92       	push	r6
    f390:	7f 92       	push	r7
    f392:	8f 92       	push	r8
    f394:	9f 92       	push	r9
    f396:	af 92       	push	r10
    f398:	bf 92       	push	r11
    f39a:	cf 92       	push	r12
    f39c:	df 92       	push	r13
    f39e:	ef 92       	push	r14
    f3a0:	ff 92       	push	r15
    f3a2:	0f 93       	push	r16
    f3a4:	1f 93       	push	r17
    f3a6:	cf 93       	push	r28
    f3a8:	df 93       	push	r29
    f3aa:	cd b7       	in	r28, 0x3d	; 61
    f3ac:	de b7       	in	r29, 0x3e	; 62
    f3ae:	60 97       	sbiw	r28, 0x10	; 16
    f3b0:	cd bf       	out	0x3d, r28	; 61
    f3b2:	de bf       	out	0x3e, r29	; 62
    f3b4:	7c 01       	movw	r14, r24
    f3b6:	1b 01       	movw	r2, r22
    f3b8:	6a 01       	movw	r12, r20
    f3ba:	fc 01       	movw	r30, r24
    f3bc:	16 82       	std	Z+6, r1	; 0x06
    f3be:	17 82       	std	Z+7, r1	; 0x07
    f3c0:	83 81       	ldd	r24, Z+3	; 0x03
    f3c2:	81 ff       	sbrs	r24, 1
    f3c4:	44 c3       	rjmp	.+1672   	; 0xfa4e <vfprintf+0x6c8>
    f3c6:	9e 01       	movw	r18, r28
    f3c8:	2f 5f       	subi	r18, 0xFF	; 255
    f3ca:	3f 4f       	sbci	r19, 0xFF	; 255
    f3cc:	39 01       	movw	r6, r18
    f3ce:	f7 01       	movw	r30, r14
    f3d0:	93 81       	ldd	r25, Z+3	; 0x03
    f3d2:	f1 01       	movw	r30, r2
    f3d4:	93 fd       	sbrc	r25, 3
    f3d6:	85 91       	lpm	r24, Z+
    f3d8:	93 ff       	sbrs	r25, 3
    f3da:	81 91       	ld	r24, Z+
    f3dc:	1f 01       	movw	r2, r30
    f3de:	88 23       	and	r24, r24
    f3e0:	09 f4       	brne	.+2      	; 0xf3e4 <vfprintf+0x5e>
    f3e2:	31 c3       	rjmp	.+1634   	; 0xfa46 <vfprintf+0x6c0>
    f3e4:	85 32       	cpi	r24, 0x25	; 37
    f3e6:	39 f4       	brne	.+14     	; 0xf3f6 <vfprintf+0x70>
    f3e8:	93 fd       	sbrc	r25, 3
    f3ea:	85 91       	lpm	r24, Z+
    f3ec:	93 ff       	sbrs	r25, 3
    f3ee:	81 91       	ld	r24, Z+
    f3f0:	1f 01       	movw	r2, r30
    f3f2:	85 32       	cpi	r24, 0x25	; 37
    f3f4:	39 f4       	brne	.+14     	; 0xf404 <vfprintf+0x7e>
    f3f6:	b7 01       	movw	r22, r14
    f3f8:	90 e0       	ldi	r25, 0x00	; 0
    f3fa:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f3fe:	56 01       	movw	r10, r12
    f400:	65 01       	movw	r12, r10
    f402:	e5 cf       	rjmp	.-54     	; 0xf3ce <vfprintf+0x48>
    f404:	10 e0       	ldi	r17, 0x00	; 0
    f406:	51 2c       	mov	r5, r1
    f408:	91 2c       	mov	r9, r1
    f40a:	ff e1       	ldi	r31, 0x1F	; 31
    f40c:	f9 15       	cp	r31, r9
    f40e:	d8 f0       	brcs	.+54     	; 0xf446 <vfprintf+0xc0>
    f410:	8b 32       	cpi	r24, 0x2B	; 43
    f412:	79 f0       	breq	.+30     	; 0xf432 <vfprintf+0xac>
    f414:	38 f4       	brcc	.+14     	; 0xf424 <vfprintf+0x9e>
    f416:	80 32       	cpi	r24, 0x20	; 32
    f418:	79 f0       	breq	.+30     	; 0xf438 <vfprintf+0xb2>
    f41a:	83 32       	cpi	r24, 0x23	; 35
    f41c:	a1 f4       	brne	.+40     	; 0xf446 <vfprintf+0xc0>
    f41e:	f9 2d       	mov	r31, r9
    f420:	f0 61       	ori	r31, 0x10	; 16
    f422:	2e c0       	rjmp	.+92     	; 0xf480 <vfprintf+0xfa>
    f424:	8d 32       	cpi	r24, 0x2D	; 45
    f426:	61 f0       	breq	.+24     	; 0xf440 <vfprintf+0xba>
    f428:	80 33       	cpi	r24, 0x30	; 48
    f42a:	69 f4       	brne	.+26     	; 0xf446 <vfprintf+0xc0>
    f42c:	29 2d       	mov	r18, r9
    f42e:	21 60       	ori	r18, 0x01	; 1
    f430:	2d c0       	rjmp	.+90     	; 0xf48c <vfprintf+0x106>
    f432:	39 2d       	mov	r19, r9
    f434:	32 60       	ori	r19, 0x02	; 2
    f436:	93 2e       	mov	r9, r19
    f438:	89 2d       	mov	r24, r9
    f43a:	84 60       	ori	r24, 0x04	; 4
    f43c:	98 2e       	mov	r9, r24
    f43e:	2a c0       	rjmp	.+84     	; 0xf494 <vfprintf+0x10e>
    f440:	e9 2d       	mov	r30, r9
    f442:	e8 60       	ori	r30, 0x08	; 8
    f444:	15 c0       	rjmp	.+42     	; 0xf470 <vfprintf+0xea>
    f446:	97 fc       	sbrc	r9, 7
    f448:	2d c0       	rjmp	.+90     	; 0xf4a4 <vfprintf+0x11e>
    f44a:	20 ed       	ldi	r18, 0xD0	; 208
    f44c:	28 0f       	add	r18, r24
    f44e:	2a 30       	cpi	r18, 0x0A	; 10
    f450:	88 f4       	brcc	.+34     	; 0xf474 <vfprintf+0xee>
    f452:	96 fe       	sbrs	r9, 6
    f454:	06 c0       	rjmp	.+12     	; 0xf462 <vfprintf+0xdc>
    f456:	3a e0       	ldi	r19, 0x0A	; 10
    f458:	13 9f       	mul	r17, r19
    f45a:	20 0d       	add	r18, r0
    f45c:	11 24       	eor	r1, r1
    f45e:	12 2f       	mov	r17, r18
    f460:	19 c0       	rjmp	.+50     	; 0xf494 <vfprintf+0x10e>
    f462:	8a e0       	ldi	r24, 0x0A	; 10
    f464:	58 9e       	mul	r5, r24
    f466:	20 0d       	add	r18, r0
    f468:	11 24       	eor	r1, r1
    f46a:	52 2e       	mov	r5, r18
    f46c:	e9 2d       	mov	r30, r9
    f46e:	e0 62       	ori	r30, 0x20	; 32
    f470:	9e 2e       	mov	r9, r30
    f472:	10 c0       	rjmp	.+32     	; 0xf494 <vfprintf+0x10e>
    f474:	8e 32       	cpi	r24, 0x2E	; 46
    f476:	31 f4       	brne	.+12     	; 0xf484 <vfprintf+0xfe>
    f478:	96 fc       	sbrc	r9, 6
    f47a:	e5 c2       	rjmp	.+1482   	; 0xfa46 <vfprintf+0x6c0>
    f47c:	f9 2d       	mov	r31, r9
    f47e:	f0 64       	ori	r31, 0x40	; 64
    f480:	9f 2e       	mov	r9, r31
    f482:	08 c0       	rjmp	.+16     	; 0xf494 <vfprintf+0x10e>
    f484:	8c 36       	cpi	r24, 0x6C	; 108
    f486:	21 f4       	brne	.+8      	; 0xf490 <vfprintf+0x10a>
    f488:	29 2d       	mov	r18, r9
    f48a:	20 68       	ori	r18, 0x80	; 128
    f48c:	92 2e       	mov	r9, r18
    f48e:	02 c0       	rjmp	.+4      	; 0xf494 <vfprintf+0x10e>
    f490:	88 36       	cpi	r24, 0x68	; 104
    f492:	41 f4       	brne	.+16     	; 0xf4a4 <vfprintf+0x11e>
    f494:	f1 01       	movw	r30, r2
    f496:	93 fd       	sbrc	r25, 3
    f498:	85 91       	lpm	r24, Z+
    f49a:	93 ff       	sbrs	r25, 3
    f49c:	81 91       	ld	r24, Z+
    f49e:	1f 01       	movw	r2, r30
    f4a0:	81 11       	cpse	r24, r1
    f4a2:	b3 cf       	rjmp	.-154    	; 0xf40a <vfprintf+0x84>
    f4a4:	9b eb       	ldi	r25, 0xBB	; 187
    f4a6:	98 0f       	add	r25, r24
    f4a8:	93 30       	cpi	r25, 0x03	; 3
    f4aa:	20 f4       	brcc	.+8      	; 0xf4b4 <vfprintf+0x12e>
    f4ac:	99 2d       	mov	r25, r9
    f4ae:	90 61       	ori	r25, 0x10	; 16
    f4b0:	80 5e       	subi	r24, 0xE0	; 224
    f4b2:	07 c0       	rjmp	.+14     	; 0xf4c2 <vfprintf+0x13c>
    f4b4:	9b e9       	ldi	r25, 0x9B	; 155
    f4b6:	98 0f       	add	r25, r24
    f4b8:	93 30       	cpi	r25, 0x03	; 3
    f4ba:	08 f0       	brcs	.+2      	; 0xf4be <vfprintf+0x138>
    f4bc:	66 c1       	rjmp	.+716    	; 0xf78a <vfprintf+0x404>
    f4be:	99 2d       	mov	r25, r9
    f4c0:	9f 7e       	andi	r25, 0xEF	; 239
    f4c2:	96 ff       	sbrs	r25, 6
    f4c4:	16 e0       	ldi	r17, 0x06	; 6
    f4c6:	9f 73       	andi	r25, 0x3F	; 63
    f4c8:	99 2e       	mov	r9, r25
    f4ca:	85 36       	cpi	r24, 0x65	; 101
    f4cc:	19 f4       	brne	.+6      	; 0xf4d4 <vfprintf+0x14e>
    f4ce:	90 64       	ori	r25, 0x40	; 64
    f4d0:	99 2e       	mov	r9, r25
    f4d2:	08 c0       	rjmp	.+16     	; 0xf4e4 <vfprintf+0x15e>
    f4d4:	86 36       	cpi	r24, 0x66	; 102
    f4d6:	21 f4       	brne	.+8      	; 0xf4e0 <vfprintf+0x15a>
    f4d8:	39 2f       	mov	r19, r25
    f4da:	30 68       	ori	r19, 0x80	; 128
    f4dc:	93 2e       	mov	r9, r19
    f4de:	02 c0       	rjmp	.+4      	; 0xf4e4 <vfprintf+0x15e>
    f4e0:	11 11       	cpse	r17, r1
    f4e2:	11 50       	subi	r17, 0x01	; 1
    f4e4:	97 fe       	sbrs	r9, 7
    f4e6:	07 c0       	rjmp	.+14     	; 0xf4f6 <vfprintf+0x170>
    f4e8:	1c 33       	cpi	r17, 0x3C	; 60
    f4ea:	50 f4       	brcc	.+20     	; 0xf500 <vfprintf+0x17a>
    f4ec:	44 24       	eor	r4, r4
    f4ee:	43 94       	inc	r4
    f4f0:	41 0e       	add	r4, r17
    f4f2:	27 e0       	ldi	r18, 0x07	; 7
    f4f4:	0b c0       	rjmp	.+22     	; 0xf50c <vfprintf+0x186>
    f4f6:	18 30       	cpi	r17, 0x08	; 8
    f4f8:	38 f0       	brcs	.+14     	; 0xf508 <vfprintf+0x182>
    f4fa:	27 e0       	ldi	r18, 0x07	; 7
    f4fc:	17 e0       	ldi	r17, 0x07	; 7
    f4fe:	05 c0       	rjmp	.+10     	; 0xf50a <vfprintf+0x184>
    f500:	27 e0       	ldi	r18, 0x07	; 7
    f502:	9c e3       	ldi	r25, 0x3C	; 60
    f504:	49 2e       	mov	r4, r25
    f506:	02 c0       	rjmp	.+4      	; 0xf50c <vfprintf+0x186>
    f508:	21 2f       	mov	r18, r17
    f50a:	41 2c       	mov	r4, r1
    f50c:	56 01       	movw	r10, r12
    f50e:	84 e0       	ldi	r24, 0x04	; 4
    f510:	a8 0e       	add	r10, r24
    f512:	b1 1c       	adc	r11, r1
    f514:	f6 01       	movw	r30, r12
    f516:	60 81       	ld	r22, Z
    f518:	71 81       	ldd	r23, Z+1	; 0x01
    f51a:	82 81       	ldd	r24, Z+2	; 0x02
    f51c:	93 81       	ldd	r25, Z+3	; 0x03
    f51e:	04 2d       	mov	r16, r4
    f520:	a3 01       	movw	r20, r6
    f522:	0e 94 8d 83 	call	0x1071a	; 0x1071a <__ftoa_engine>
    f526:	6c 01       	movw	r12, r24
    f528:	f9 81       	ldd	r31, Y+1	; 0x01
    f52a:	fc 87       	std	Y+12, r31	; 0x0c
    f52c:	f0 ff       	sbrs	r31, 0
    f52e:	02 c0       	rjmp	.+4      	; 0xf534 <vfprintf+0x1ae>
    f530:	f3 ff       	sbrs	r31, 3
    f532:	06 c0       	rjmp	.+12     	; 0xf540 <vfprintf+0x1ba>
    f534:	91 fc       	sbrc	r9, 1
    f536:	06 c0       	rjmp	.+12     	; 0xf544 <vfprintf+0x1be>
    f538:	92 fe       	sbrs	r9, 2
    f53a:	06 c0       	rjmp	.+12     	; 0xf548 <vfprintf+0x1c2>
    f53c:	00 e2       	ldi	r16, 0x20	; 32
    f53e:	05 c0       	rjmp	.+10     	; 0xf54a <vfprintf+0x1c4>
    f540:	0d e2       	ldi	r16, 0x2D	; 45
    f542:	03 c0       	rjmp	.+6      	; 0xf54a <vfprintf+0x1c4>
    f544:	0b e2       	ldi	r16, 0x2B	; 43
    f546:	01 c0       	rjmp	.+2      	; 0xf54a <vfprintf+0x1c4>
    f548:	00 e0       	ldi	r16, 0x00	; 0
    f54a:	8c 85       	ldd	r24, Y+12	; 0x0c
    f54c:	8c 70       	andi	r24, 0x0C	; 12
    f54e:	19 f0       	breq	.+6      	; 0xf556 <vfprintf+0x1d0>
    f550:	01 11       	cpse	r16, r1
    f552:	5a c2       	rjmp	.+1204   	; 0xfa08 <vfprintf+0x682>
    f554:	9b c2       	rjmp	.+1334   	; 0xfa8c <vfprintf+0x706>
    f556:	97 fe       	sbrs	r9, 7
    f558:	10 c0       	rjmp	.+32     	; 0xf57a <vfprintf+0x1f4>
    f55a:	4c 0c       	add	r4, r12
    f55c:	fc 85       	ldd	r31, Y+12	; 0x0c
    f55e:	f4 ff       	sbrs	r31, 4
    f560:	04 c0       	rjmp	.+8      	; 0xf56a <vfprintf+0x1e4>
    f562:	8a 81       	ldd	r24, Y+2	; 0x02
    f564:	81 33       	cpi	r24, 0x31	; 49
    f566:	09 f4       	brne	.+2      	; 0xf56a <vfprintf+0x1e4>
    f568:	4a 94       	dec	r4
    f56a:	14 14       	cp	r1, r4
    f56c:	74 f5       	brge	.+92     	; 0xf5ca <vfprintf+0x244>
    f56e:	28 e0       	ldi	r18, 0x08	; 8
    f570:	24 15       	cp	r18, r4
    f572:	78 f5       	brcc	.+94     	; 0xf5d2 <vfprintf+0x24c>
    f574:	88 e0       	ldi	r24, 0x08	; 8
    f576:	48 2e       	mov	r4, r24
    f578:	2c c0       	rjmp	.+88     	; 0xf5d2 <vfprintf+0x24c>
    f57a:	96 fc       	sbrc	r9, 6
    f57c:	2a c0       	rjmp	.+84     	; 0xf5d2 <vfprintf+0x24c>
    f57e:	81 2f       	mov	r24, r17
    f580:	90 e0       	ldi	r25, 0x00	; 0
    f582:	8c 15       	cp	r24, r12
    f584:	9d 05       	cpc	r25, r13
    f586:	9c f0       	brlt	.+38     	; 0xf5ae <vfprintf+0x228>
    f588:	3c ef       	ldi	r19, 0xFC	; 252
    f58a:	c3 16       	cp	r12, r19
    f58c:	3f ef       	ldi	r19, 0xFF	; 255
    f58e:	d3 06       	cpc	r13, r19
    f590:	74 f0       	brlt	.+28     	; 0xf5ae <vfprintf+0x228>
    f592:	89 2d       	mov	r24, r9
    f594:	80 68       	ori	r24, 0x80	; 128
    f596:	98 2e       	mov	r9, r24
    f598:	0a c0       	rjmp	.+20     	; 0xf5ae <vfprintf+0x228>
    f59a:	e2 e0       	ldi	r30, 0x02	; 2
    f59c:	f0 e0       	ldi	r31, 0x00	; 0
    f59e:	ec 0f       	add	r30, r28
    f5a0:	fd 1f       	adc	r31, r29
    f5a2:	e1 0f       	add	r30, r17
    f5a4:	f1 1d       	adc	r31, r1
    f5a6:	80 81       	ld	r24, Z
    f5a8:	80 33       	cpi	r24, 0x30	; 48
    f5aa:	19 f4       	brne	.+6      	; 0xf5b2 <vfprintf+0x22c>
    f5ac:	11 50       	subi	r17, 0x01	; 1
    f5ae:	11 11       	cpse	r17, r1
    f5b0:	f4 cf       	rjmp	.-24     	; 0xf59a <vfprintf+0x214>
    f5b2:	97 fe       	sbrs	r9, 7
    f5b4:	0e c0       	rjmp	.+28     	; 0xf5d2 <vfprintf+0x24c>
    f5b6:	44 24       	eor	r4, r4
    f5b8:	43 94       	inc	r4
    f5ba:	41 0e       	add	r4, r17
    f5bc:	81 2f       	mov	r24, r17
    f5be:	90 e0       	ldi	r25, 0x00	; 0
    f5c0:	c8 16       	cp	r12, r24
    f5c2:	d9 06       	cpc	r13, r25
    f5c4:	2c f4       	brge	.+10     	; 0xf5d0 <vfprintf+0x24a>
    f5c6:	1c 19       	sub	r17, r12
    f5c8:	04 c0       	rjmp	.+8      	; 0xf5d2 <vfprintf+0x24c>
    f5ca:	44 24       	eor	r4, r4
    f5cc:	43 94       	inc	r4
    f5ce:	01 c0       	rjmp	.+2      	; 0xf5d2 <vfprintf+0x24c>
    f5d0:	10 e0       	ldi	r17, 0x00	; 0
    f5d2:	97 fe       	sbrs	r9, 7
    f5d4:	06 c0       	rjmp	.+12     	; 0xf5e2 <vfprintf+0x25c>
    f5d6:	1c 14       	cp	r1, r12
    f5d8:	1d 04       	cpc	r1, r13
    f5da:	34 f4       	brge	.+12     	; 0xf5e8 <vfprintf+0x262>
    f5dc:	c6 01       	movw	r24, r12
    f5de:	01 96       	adiw	r24, 0x01	; 1
    f5e0:	05 c0       	rjmp	.+10     	; 0xf5ec <vfprintf+0x266>
    f5e2:	85 e0       	ldi	r24, 0x05	; 5
    f5e4:	90 e0       	ldi	r25, 0x00	; 0
    f5e6:	02 c0       	rjmp	.+4      	; 0xf5ec <vfprintf+0x266>
    f5e8:	81 e0       	ldi	r24, 0x01	; 1
    f5ea:	90 e0       	ldi	r25, 0x00	; 0
    f5ec:	01 11       	cpse	r16, r1
    f5ee:	01 96       	adiw	r24, 0x01	; 1
    f5f0:	11 23       	and	r17, r17
    f5f2:	31 f0       	breq	.+12     	; 0xf600 <vfprintf+0x27a>
    f5f4:	21 2f       	mov	r18, r17
    f5f6:	30 e0       	ldi	r19, 0x00	; 0
    f5f8:	2f 5f       	subi	r18, 0xFF	; 255
    f5fa:	3f 4f       	sbci	r19, 0xFF	; 255
    f5fc:	82 0f       	add	r24, r18
    f5fe:	93 1f       	adc	r25, r19
    f600:	25 2d       	mov	r18, r5
    f602:	30 e0       	ldi	r19, 0x00	; 0
    f604:	82 17       	cp	r24, r18
    f606:	93 07       	cpc	r25, r19
    f608:	14 f4       	brge	.+4      	; 0xf60e <vfprintf+0x288>
    f60a:	58 1a       	sub	r5, r24
    f60c:	01 c0       	rjmp	.+2      	; 0xf610 <vfprintf+0x28a>
    f60e:	51 2c       	mov	r5, r1
    f610:	89 2d       	mov	r24, r9
    f612:	89 70       	andi	r24, 0x09	; 9
    f614:	49 f4       	brne	.+18     	; 0xf628 <vfprintf+0x2a2>
    f616:	55 20       	and	r5, r5
    f618:	39 f0       	breq	.+14     	; 0xf628 <vfprintf+0x2a2>
    f61a:	b7 01       	movw	r22, r14
    f61c:	80 e2       	ldi	r24, 0x20	; 32
    f61e:	90 e0       	ldi	r25, 0x00	; 0
    f620:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f624:	5a 94       	dec	r5
    f626:	f7 cf       	rjmp	.-18     	; 0xf616 <vfprintf+0x290>
    f628:	00 23       	and	r16, r16
    f62a:	29 f0       	breq	.+10     	; 0xf636 <vfprintf+0x2b0>
    f62c:	b7 01       	movw	r22, r14
    f62e:	80 2f       	mov	r24, r16
    f630:	90 e0       	ldi	r25, 0x00	; 0
    f632:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f636:	93 fc       	sbrc	r9, 3
    f638:	09 c0       	rjmp	.+18     	; 0xf64c <vfprintf+0x2c6>
    f63a:	55 20       	and	r5, r5
    f63c:	39 f0       	breq	.+14     	; 0xf64c <vfprintf+0x2c6>
    f63e:	b7 01       	movw	r22, r14
    f640:	80 e3       	ldi	r24, 0x30	; 48
    f642:	90 e0       	ldi	r25, 0x00	; 0
    f644:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f648:	5a 94       	dec	r5
    f64a:	f7 cf       	rjmp	.-18     	; 0xf63a <vfprintf+0x2b4>
    f64c:	97 fe       	sbrs	r9, 7
    f64e:	4c c0       	rjmp	.+152    	; 0xf6e8 <vfprintf+0x362>
    f650:	46 01       	movw	r8, r12
    f652:	d7 fe       	sbrs	r13, 7
    f654:	02 c0       	rjmp	.+4      	; 0xf65a <vfprintf+0x2d4>
    f656:	81 2c       	mov	r8, r1
    f658:	91 2c       	mov	r9, r1
    f65a:	c6 01       	movw	r24, r12
    f65c:	88 19       	sub	r24, r8
    f65e:	99 09       	sbc	r25, r9
    f660:	f3 01       	movw	r30, r6
    f662:	e8 0f       	add	r30, r24
    f664:	f9 1f       	adc	r31, r25
    f666:	ed 87       	std	Y+13, r30	; 0x0d
    f668:	fe 87       	std	Y+14, r31	; 0x0e
    f66a:	96 01       	movw	r18, r12
    f66c:	24 19       	sub	r18, r4
    f66e:	31 09       	sbc	r19, r1
    f670:	2f 87       	std	Y+15, r18	; 0x0f
    f672:	38 8b       	std	Y+16, r19	; 0x10
    f674:	01 2f       	mov	r16, r17
    f676:	10 e0       	ldi	r17, 0x00	; 0
    f678:	11 95       	neg	r17
    f67a:	01 95       	neg	r16
    f67c:	11 09       	sbc	r17, r1
    f67e:	3f ef       	ldi	r19, 0xFF	; 255
    f680:	83 16       	cp	r8, r19
    f682:	93 06       	cpc	r9, r19
    f684:	29 f4       	brne	.+10     	; 0xf690 <vfprintf+0x30a>
    f686:	b7 01       	movw	r22, r14
    f688:	8e e2       	ldi	r24, 0x2E	; 46
    f68a:	90 e0       	ldi	r25, 0x00	; 0
    f68c:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f690:	c8 14       	cp	r12, r8
    f692:	d9 04       	cpc	r13, r9
    f694:	4c f0       	brlt	.+18     	; 0xf6a8 <vfprintf+0x322>
    f696:	8f 85       	ldd	r24, Y+15	; 0x0f
    f698:	98 89       	ldd	r25, Y+16	; 0x10
    f69a:	88 15       	cp	r24, r8
    f69c:	99 05       	cpc	r25, r9
    f69e:	24 f4       	brge	.+8      	; 0xf6a8 <vfprintf+0x322>
    f6a0:	ed 85       	ldd	r30, Y+13	; 0x0d
    f6a2:	fe 85       	ldd	r31, Y+14	; 0x0e
    f6a4:	81 81       	ldd	r24, Z+1	; 0x01
    f6a6:	01 c0       	rjmp	.+2      	; 0xf6aa <vfprintf+0x324>
    f6a8:	80 e3       	ldi	r24, 0x30	; 48
    f6aa:	f1 e0       	ldi	r31, 0x01	; 1
    f6ac:	8f 1a       	sub	r8, r31
    f6ae:	91 08       	sbc	r9, r1
    f6b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    f6b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    f6b4:	2f 5f       	subi	r18, 0xFF	; 255
    f6b6:	3f 4f       	sbci	r19, 0xFF	; 255
    f6b8:	2d 87       	std	Y+13, r18	; 0x0d
    f6ba:	3e 87       	std	Y+14, r19	; 0x0e
    f6bc:	80 16       	cp	r8, r16
    f6be:	91 06       	cpc	r9, r17
    f6c0:	2c f0       	brlt	.+10     	; 0xf6cc <vfprintf+0x346>
    f6c2:	b7 01       	movw	r22, r14
    f6c4:	90 e0       	ldi	r25, 0x00	; 0
    f6c6:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f6ca:	d9 cf       	rjmp	.-78     	; 0xf67e <vfprintf+0x2f8>
    f6cc:	c8 14       	cp	r12, r8
    f6ce:	d9 04       	cpc	r13, r9
    f6d0:	41 f4       	brne	.+16     	; 0xf6e2 <vfprintf+0x35c>
    f6d2:	9a 81       	ldd	r25, Y+2	; 0x02
    f6d4:	96 33       	cpi	r25, 0x36	; 54
    f6d6:	20 f4       	brcc	.+8      	; 0xf6e0 <vfprintf+0x35a>
    f6d8:	95 33       	cpi	r25, 0x35	; 53
    f6da:	19 f4       	brne	.+6      	; 0xf6e2 <vfprintf+0x35c>
    f6dc:	3c 85       	ldd	r19, Y+12	; 0x0c
    f6de:	34 ff       	sbrs	r19, 4
    f6e0:	81 e3       	ldi	r24, 0x31	; 49
    f6e2:	b7 01       	movw	r22, r14
    f6e4:	90 e0       	ldi	r25, 0x00	; 0
    f6e6:	4e c0       	rjmp	.+156    	; 0xf784 <vfprintf+0x3fe>
    f6e8:	8a 81       	ldd	r24, Y+2	; 0x02
    f6ea:	81 33       	cpi	r24, 0x31	; 49
    f6ec:	19 f0       	breq	.+6      	; 0xf6f4 <vfprintf+0x36e>
    f6ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    f6f0:	9f 7e       	andi	r25, 0xEF	; 239
    f6f2:	9c 87       	std	Y+12, r25	; 0x0c
    f6f4:	b7 01       	movw	r22, r14
    f6f6:	90 e0       	ldi	r25, 0x00	; 0
    f6f8:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f6fc:	11 11       	cpse	r17, r1
    f6fe:	05 c0       	rjmp	.+10     	; 0xf70a <vfprintf+0x384>
    f700:	94 fc       	sbrc	r9, 4
    f702:	18 c0       	rjmp	.+48     	; 0xf734 <vfprintf+0x3ae>
    f704:	85 e6       	ldi	r24, 0x65	; 101
    f706:	90 e0       	ldi	r25, 0x00	; 0
    f708:	17 c0       	rjmp	.+46     	; 0xf738 <vfprintf+0x3b2>
    f70a:	b7 01       	movw	r22, r14
    f70c:	8e e2       	ldi	r24, 0x2E	; 46
    f70e:	90 e0       	ldi	r25, 0x00	; 0
    f710:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f714:	1e 5f       	subi	r17, 0xFE	; 254
    f716:	82 e0       	ldi	r24, 0x02	; 2
    f718:	01 e0       	ldi	r16, 0x01	; 1
    f71a:	08 0f       	add	r16, r24
    f71c:	f3 01       	movw	r30, r6
    f71e:	e8 0f       	add	r30, r24
    f720:	f1 1d       	adc	r31, r1
    f722:	80 81       	ld	r24, Z
    f724:	b7 01       	movw	r22, r14
    f726:	90 e0       	ldi	r25, 0x00	; 0
    f728:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f72c:	80 2f       	mov	r24, r16
    f72e:	01 13       	cpse	r16, r17
    f730:	f3 cf       	rjmp	.-26     	; 0xf718 <vfprintf+0x392>
    f732:	e6 cf       	rjmp	.-52     	; 0xf700 <vfprintf+0x37a>
    f734:	85 e4       	ldi	r24, 0x45	; 69
    f736:	90 e0       	ldi	r25, 0x00	; 0
    f738:	b7 01       	movw	r22, r14
    f73a:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f73e:	d7 fc       	sbrc	r13, 7
    f740:	06 c0       	rjmp	.+12     	; 0xf74e <vfprintf+0x3c8>
    f742:	c1 14       	cp	r12, r1
    f744:	d1 04       	cpc	r13, r1
    f746:	41 f4       	brne	.+16     	; 0xf758 <vfprintf+0x3d2>
    f748:	ec 85       	ldd	r30, Y+12	; 0x0c
    f74a:	e4 ff       	sbrs	r30, 4
    f74c:	05 c0       	rjmp	.+10     	; 0xf758 <vfprintf+0x3d2>
    f74e:	d1 94       	neg	r13
    f750:	c1 94       	neg	r12
    f752:	d1 08       	sbc	r13, r1
    f754:	8d e2       	ldi	r24, 0x2D	; 45
    f756:	01 c0       	rjmp	.+2      	; 0xf75a <vfprintf+0x3d4>
    f758:	8b e2       	ldi	r24, 0x2B	; 43
    f75a:	b7 01       	movw	r22, r14
    f75c:	90 e0       	ldi	r25, 0x00	; 0
    f75e:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f762:	80 e3       	ldi	r24, 0x30	; 48
    f764:	2a e0       	ldi	r18, 0x0A	; 10
    f766:	c2 16       	cp	r12, r18
    f768:	d1 04       	cpc	r13, r1
    f76a:	2c f0       	brlt	.+10     	; 0xf776 <vfprintf+0x3f0>
    f76c:	8f 5f       	subi	r24, 0xFF	; 255
    f76e:	fa e0       	ldi	r31, 0x0A	; 10
    f770:	cf 1a       	sub	r12, r31
    f772:	d1 08       	sbc	r13, r1
    f774:	f7 cf       	rjmp	.-18     	; 0xf764 <vfprintf+0x3de>
    f776:	b7 01       	movw	r22, r14
    f778:	90 e0       	ldi	r25, 0x00	; 0
    f77a:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f77e:	b7 01       	movw	r22, r14
    f780:	c6 01       	movw	r24, r12
    f782:	c0 96       	adiw	r24, 0x30	; 48
    f784:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f788:	54 c1       	rjmp	.+680    	; 0xfa32 <vfprintf+0x6ac>
    f78a:	83 36       	cpi	r24, 0x63	; 99
    f78c:	31 f0       	breq	.+12     	; 0xf79a <vfprintf+0x414>
    f78e:	83 37       	cpi	r24, 0x73	; 115
    f790:	79 f0       	breq	.+30     	; 0xf7b0 <vfprintf+0x42a>
    f792:	83 35       	cpi	r24, 0x53	; 83
    f794:	09 f0       	breq	.+2      	; 0xf798 <vfprintf+0x412>
    f796:	56 c0       	rjmp	.+172    	; 0xf844 <vfprintf+0x4be>
    f798:	20 c0       	rjmp	.+64     	; 0xf7da <vfprintf+0x454>
    f79a:	56 01       	movw	r10, r12
    f79c:	32 e0       	ldi	r19, 0x02	; 2
    f79e:	a3 0e       	add	r10, r19
    f7a0:	b1 1c       	adc	r11, r1
    f7a2:	f6 01       	movw	r30, r12
    f7a4:	80 81       	ld	r24, Z
    f7a6:	89 83       	std	Y+1, r24	; 0x01
    f7a8:	01 e0       	ldi	r16, 0x01	; 1
    f7aa:	10 e0       	ldi	r17, 0x00	; 0
    f7ac:	63 01       	movw	r12, r6
    f7ae:	12 c0       	rjmp	.+36     	; 0xf7d4 <vfprintf+0x44e>
    f7b0:	56 01       	movw	r10, r12
    f7b2:	f2 e0       	ldi	r31, 0x02	; 2
    f7b4:	af 0e       	add	r10, r31
    f7b6:	b1 1c       	adc	r11, r1
    f7b8:	f6 01       	movw	r30, r12
    f7ba:	c0 80       	ld	r12, Z
    f7bc:	d1 80       	ldd	r13, Z+1	; 0x01
    f7be:	96 fe       	sbrs	r9, 6
    f7c0:	03 c0       	rjmp	.+6      	; 0xf7c8 <vfprintf+0x442>
    f7c2:	61 2f       	mov	r22, r17
    f7c4:	70 e0       	ldi	r23, 0x00	; 0
    f7c6:	02 c0       	rjmp	.+4      	; 0xf7cc <vfprintf+0x446>
    f7c8:	6f ef       	ldi	r22, 0xFF	; 255
    f7ca:	7f ef       	ldi	r23, 0xFF	; 255
    f7cc:	c6 01       	movw	r24, r12
    f7ce:	0e 94 d1 84 	call	0x109a2	; 0x109a2 <strnlen>
    f7d2:	8c 01       	movw	r16, r24
    f7d4:	f9 2d       	mov	r31, r9
    f7d6:	ff 77       	andi	r31, 0x7F	; 127
    f7d8:	14 c0       	rjmp	.+40     	; 0xf802 <vfprintf+0x47c>
    f7da:	56 01       	movw	r10, r12
    f7dc:	22 e0       	ldi	r18, 0x02	; 2
    f7de:	a2 0e       	add	r10, r18
    f7e0:	b1 1c       	adc	r11, r1
    f7e2:	f6 01       	movw	r30, r12
    f7e4:	c0 80       	ld	r12, Z
    f7e6:	d1 80       	ldd	r13, Z+1	; 0x01
    f7e8:	96 fe       	sbrs	r9, 6
    f7ea:	03 c0       	rjmp	.+6      	; 0xf7f2 <vfprintf+0x46c>
    f7ec:	61 2f       	mov	r22, r17
    f7ee:	70 e0       	ldi	r23, 0x00	; 0
    f7f0:	02 c0       	rjmp	.+4      	; 0xf7f6 <vfprintf+0x470>
    f7f2:	6f ef       	ldi	r22, 0xFF	; 255
    f7f4:	7f ef       	ldi	r23, 0xFF	; 255
    f7f6:	c6 01       	movw	r24, r12
    f7f8:	0e 94 8b 84 	call	0x10916	; 0x10916 <strnlen_P>
    f7fc:	8c 01       	movw	r16, r24
    f7fe:	f9 2d       	mov	r31, r9
    f800:	f0 68       	ori	r31, 0x80	; 128
    f802:	9f 2e       	mov	r9, r31
    f804:	f3 fd       	sbrc	r31, 3
    f806:	1a c0       	rjmp	.+52     	; 0xf83c <vfprintf+0x4b6>
    f808:	85 2d       	mov	r24, r5
    f80a:	90 e0       	ldi	r25, 0x00	; 0
    f80c:	08 17       	cp	r16, r24
    f80e:	19 07       	cpc	r17, r25
    f810:	a8 f4       	brcc	.+42     	; 0xf83c <vfprintf+0x4b6>
    f812:	b7 01       	movw	r22, r14
    f814:	80 e2       	ldi	r24, 0x20	; 32
    f816:	90 e0       	ldi	r25, 0x00	; 0
    f818:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f81c:	5a 94       	dec	r5
    f81e:	f4 cf       	rjmp	.-24     	; 0xf808 <vfprintf+0x482>
    f820:	f6 01       	movw	r30, r12
    f822:	97 fc       	sbrc	r9, 7
    f824:	85 91       	lpm	r24, Z+
    f826:	97 fe       	sbrs	r9, 7
    f828:	81 91       	ld	r24, Z+
    f82a:	6f 01       	movw	r12, r30
    f82c:	b7 01       	movw	r22, r14
    f82e:	90 e0       	ldi	r25, 0x00	; 0
    f830:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f834:	51 10       	cpse	r5, r1
    f836:	5a 94       	dec	r5
    f838:	01 50       	subi	r16, 0x01	; 1
    f83a:	11 09       	sbc	r17, r1
    f83c:	01 15       	cp	r16, r1
    f83e:	11 05       	cpc	r17, r1
    f840:	79 f7       	brne	.-34     	; 0xf820 <vfprintf+0x49a>
    f842:	f7 c0       	rjmp	.+494    	; 0xfa32 <vfprintf+0x6ac>
    f844:	84 36       	cpi	r24, 0x64	; 100
    f846:	11 f0       	breq	.+4      	; 0xf84c <vfprintf+0x4c6>
    f848:	89 36       	cpi	r24, 0x69	; 105
    f84a:	61 f5       	brne	.+88     	; 0xf8a4 <vfprintf+0x51e>
    f84c:	56 01       	movw	r10, r12
    f84e:	97 fe       	sbrs	r9, 7
    f850:	09 c0       	rjmp	.+18     	; 0xf864 <vfprintf+0x4de>
    f852:	24 e0       	ldi	r18, 0x04	; 4
    f854:	a2 0e       	add	r10, r18
    f856:	b1 1c       	adc	r11, r1
    f858:	f6 01       	movw	r30, r12
    f85a:	60 81       	ld	r22, Z
    f85c:	71 81       	ldd	r23, Z+1	; 0x01
    f85e:	82 81       	ldd	r24, Z+2	; 0x02
    f860:	93 81       	ldd	r25, Z+3	; 0x03
    f862:	0a c0       	rjmp	.+20     	; 0xf878 <vfprintf+0x4f2>
    f864:	f2 e0       	ldi	r31, 0x02	; 2
    f866:	af 0e       	add	r10, r31
    f868:	b1 1c       	adc	r11, r1
    f86a:	f6 01       	movw	r30, r12
    f86c:	60 81       	ld	r22, Z
    f86e:	71 81       	ldd	r23, Z+1	; 0x01
    f870:	07 2e       	mov	r0, r23
    f872:	00 0c       	add	r0, r0
    f874:	88 0b       	sbc	r24, r24
    f876:	99 0b       	sbc	r25, r25
    f878:	f9 2d       	mov	r31, r9
    f87a:	ff 76       	andi	r31, 0x6F	; 111
    f87c:	9f 2e       	mov	r9, r31
    f87e:	97 ff       	sbrs	r25, 7
    f880:	09 c0       	rjmp	.+18     	; 0xf894 <vfprintf+0x50e>
    f882:	90 95       	com	r25
    f884:	80 95       	com	r24
    f886:	70 95       	com	r23
    f888:	61 95       	neg	r22
    f88a:	7f 4f       	sbci	r23, 0xFF	; 255
    f88c:	8f 4f       	sbci	r24, 0xFF	; 255
    f88e:	9f 4f       	sbci	r25, 0xFF	; 255
    f890:	f0 68       	ori	r31, 0x80	; 128
    f892:	9f 2e       	mov	r9, r31
    f894:	2a e0       	ldi	r18, 0x0A	; 10
    f896:	30 e0       	ldi	r19, 0x00	; 0
    f898:	a3 01       	movw	r20, r6
    f89a:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <__ultoa_invert>
    f89e:	c8 2e       	mov	r12, r24
    f8a0:	c6 18       	sub	r12, r6
    f8a2:	3f c0       	rjmp	.+126    	; 0xf922 <vfprintf+0x59c>
    f8a4:	09 2d       	mov	r16, r9
    f8a6:	85 37       	cpi	r24, 0x75	; 117
    f8a8:	21 f4       	brne	.+8      	; 0xf8b2 <vfprintf+0x52c>
    f8aa:	0f 7e       	andi	r16, 0xEF	; 239
    f8ac:	2a e0       	ldi	r18, 0x0A	; 10
    f8ae:	30 e0       	ldi	r19, 0x00	; 0
    f8b0:	1d c0       	rjmp	.+58     	; 0xf8ec <vfprintf+0x566>
    f8b2:	09 7f       	andi	r16, 0xF9	; 249
    f8b4:	8f 36       	cpi	r24, 0x6F	; 111
    f8b6:	91 f0       	breq	.+36     	; 0xf8dc <vfprintf+0x556>
    f8b8:	18 f4       	brcc	.+6      	; 0xf8c0 <vfprintf+0x53a>
    f8ba:	88 35       	cpi	r24, 0x58	; 88
    f8bc:	59 f0       	breq	.+22     	; 0xf8d4 <vfprintf+0x54e>
    f8be:	c3 c0       	rjmp	.+390    	; 0xfa46 <vfprintf+0x6c0>
    f8c0:	80 37       	cpi	r24, 0x70	; 112
    f8c2:	19 f0       	breq	.+6      	; 0xf8ca <vfprintf+0x544>
    f8c4:	88 37       	cpi	r24, 0x78	; 120
    f8c6:	11 f0       	breq	.+4      	; 0xf8cc <vfprintf+0x546>
    f8c8:	be c0       	rjmp	.+380    	; 0xfa46 <vfprintf+0x6c0>
    f8ca:	00 61       	ori	r16, 0x10	; 16
    f8cc:	04 ff       	sbrs	r16, 4
    f8ce:	09 c0       	rjmp	.+18     	; 0xf8e2 <vfprintf+0x55c>
    f8d0:	04 60       	ori	r16, 0x04	; 4
    f8d2:	07 c0       	rjmp	.+14     	; 0xf8e2 <vfprintf+0x55c>
    f8d4:	94 fe       	sbrs	r9, 4
    f8d6:	08 c0       	rjmp	.+16     	; 0xf8e8 <vfprintf+0x562>
    f8d8:	06 60       	ori	r16, 0x06	; 6
    f8da:	06 c0       	rjmp	.+12     	; 0xf8e8 <vfprintf+0x562>
    f8dc:	28 e0       	ldi	r18, 0x08	; 8
    f8de:	30 e0       	ldi	r19, 0x00	; 0
    f8e0:	05 c0       	rjmp	.+10     	; 0xf8ec <vfprintf+0x566>
    f8e2:	20 e1       	ldi	r18, 0x10	; 16
    f8e4:	30 e0       	ldi	r19, 0x00	; 0
    f8e6:	02 c0       	rjmp	.+4      	; 0xf8ec <vfprintf+0x566>
    f8e8:	20 e1       	ldi	r18, 0x10	; 16
    f8ea:	32 e0       	ldi	r19, 0x02	; 2
    f8ec:	56 01       	movw	r10, r12
    f8ee:	07 ff       	sbrs	r16, 7
    f8f0:	09 c0       	rjmp	.+18     	; 0xf904 <vfprintf+0x57e>
    f8f2:	84 e0       	ldi	r24, 0x04	; 4
    f8f4:	a8 0e       	add	r10, r24
    f8f6:	b1 1c       	adc	r11, r1
    f8f8:	f6 01       	movw	r30, r12
    f8fa:	60 81       	ld	r22, Z
    f8fc:	71 81       	ldd	r23, Z+1	; 0x01
    f8fe:	82 81       	ldd	r24, Z+2	; 0x02
    f900:	93 81       	ldd	r25, Z+3	; 0x03
    f902:	08 c0       	rjmp	.+16     	; 0xf914 <vfprintf+0x58e>
    f904:	f2 e0       	ldi	r31, 0x02	; 2
    f906:	af 0e       	add	r10, r31
    f908:	b1 1c       	adc	r11, r1
    f90a:	f6 01       	movw	r30, r12
    f90c:	60 81       	ld	r22, Z
    f90e:	71 81       	ldd	r23, Z+1	; 0x01
    f910:	80 e0       	ldi	r24, 0x00	; 0
    f912:	90 e0       	ldi	r25, 0x00	; 0
    f914:	a3 01       	movw	r20, r6
    f916:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <__ultoa_invert>
    f91a:	c8 2e       	mov	r12, r24
    f91c:	c6 18       	sub	r12, r6
    f91e:	0f 77       	andi	r16, 0x7F	; 127
    f920:	90 2e       	mov	r9, r16
    f922:	96 fe       	sbrs	r9, 6
    f924:	0b c0       	rjmp	.+22     	; 0xf93c <vfprintf+0x5b6>
    f926:	09 2d       	mov	r16, r9
    f928:	0e 7f       	andi	r16, 0xFE	; 254
    f92a:	c1 16       	cp	r12, r17
    f92c:	50 f4       	brcc	.+20     	; 0xf942 <vfprintf+0x5bc>
    f92e:	94 fe       	sbrs	r9, 4
    f930:	0a c0       	rjmp	.+20     	; 0xf946 <vfprintf+0x5c0>
    f932:	92 fc       	sbrc	r9, 2
    f934:	08 c0       	rjmp	.+16     	; 0xf946 <vfprintf+0x5c0>
    f936:	09 2d       	mov	r16, r9
    f938:	0e 7e       	andi	r16, 0xEE	; 238
    f93a:	05 c0       	rjmp	.+10     	; 0xf946 <vfprintf+0x5c0>
    f93c:	dc 2c       	mov	r13, r12
    f93e:	09 2d       	mov	r16, r9
    f940:	03 c0       	rjmp	.+6      	; 0xf948 <vfprintf+0x5c2>
    f942:	dc 2c       	mov	r13, r12
    f944:	01 c0       	rjmp	.+2      	; 0xf948 <vfprintf+0x5c2>
    f946:	d1 2e       	mov	r13, r17
    f948:	04 ff       	sbrs	r16, 4
    f94a:	0d c0       	rjmp	.+26     	; 0xf966 <vfprintf+0x5e0>
    f94c:	fe 01       	movw	r30, r28
    f94e:	ec 0d       	add	r30, r12
    f950:	f1 1d       	adc	r31, r1
    f952:	80 81       	ld	r24, Z
    f954:	80 33       	cpi	r24, 0x30	; 48
    f956:	11 f4       	brne	.+4      	; 0xf95c <vfprintf+0x5d6>
    f958:	09 7e       	andi	r16, 0xE9	; 233
    f95a:	09 c0       	rjmp	.+18     	; 0xf96e <vfprintf+0x5e8>
    f95c:	02 ff       	sbrs	r16, 2
    f95e:	06 c0       	rjmp	.+12     	; 0xf96c <vfprintf+0x5e6>
    f960:	d3 94       	inc	r13
    f962:	d3 94       	inc	r13
    f964:	04 c0       	rjmp	.+8      	; 0xf96e <vfprintf+0x5e8>
    f966:	80 2f       	mov	r24, r16
    f968:	86 78       	andi	r24, 0x86	; 134
    f96a:	09 f0       	breq	.+2      	; 0xf96e <vfprintf+0x5e8>
    f96c:	d3 94       	inc	r13
    f96e:	03 fd       	sbrc	r16, 3
    f970:	11 c0       	rjmp	.+34     	; 0xf994 <vfprintf+0x60e>
    f972:	00 ff       	sbrs	r16, 0
    f974:	06 c0       	rjmp	.+12     	; 0xf982 <vfprintf+0x5fc>
    f976:	1c 2d       	mov	r17, r12
    f978:	d5 14       	cp	r13, r5
    f97a:	80 f4       	brcc	.+32     	; 0xf99c <vfprintf+0x616>
    f97c:	15 0d       	add	r17, r5
    f97e:	1d 19       	sub	r17, r13
    f980:	0d c0       	rjmp	.+26     	; 0xf99c <vfprintf+0x616>
    f982:	d5 14       	cp	r13, r5
    f984:	58 f4       	brcc	.+22     	; 0xf99c <vfprintf+0x616>
    f986:	b7 01       	movw	r22, r14
    f988:	80 e2       	ldi	r24, 0x20	; 32
    f98a:	90 e0       	ldi	r25, 0x00	; 0
    f98c:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f990:	d3 94       	inc	r13
    f992:	f7 cf       	rjmp	.-18     	; 0xf982 <vfprintf+0x5fc>
    f994:	d5 14       	cp	r13, r5
    f996:	10 f4       	brcc	.+4      	; 0xf99c <vfprintf+0x616>
    f998:	5d 18       	sub	r5, r13
    f99a:	01 c0       	rjmp	.+2      	; 0xf99e <vfprintf+0x618>
    f99c:	51 2c       	mov	r5, r1
    f99e:	04 ff       	sbrs	r16, 4
    f9a0:	10 c0       	rjmp	.+32     	; 0xf9c2 <vfprintf+0x63c>
    f9a2:	b7 01       	movw	r22, r14
    f9a4:	80 e3       	ldi	r24, 0x30	; 48
    f9a6:	90 e0       	ldi	r25, 0x00	; 0
    f9a8:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f9ac:	02 ff       	sbrs	r16, 2
    f9ae:	17 c0       	rjmp	.+46     	; 0xf9de <vfprintf+0x658>
    f9b0:	01 fd       	sbrc	r16, 1
    f9b2:	03 c0       	rjmp	.+6      	; 0xf9ba <vfprintf+0x634>
    f9b4:	88 e7       	ldi	r24, 0x78	; 120
    f9b6:	90 e0       	ldi	r25, 0x00	; 0
    f9b8:	02 c0       	rjmp	.+4      	; 0xf9be <vfprintf+0x638>
    f9ba:	88 e5       	ldi	r24, 0x58	; 88
    f9bc:	90 e0       	ldi	r25, 0x00	; 0
    f9be:	b7 01       	movw	r22, r14
    f9c0:	0c c0       	rjmp	.+24     	; 0xf9da <vfprintf+0x654>
    f9c2:	80 2f       	mov	r24, r16
    f9c4:	86 78       	andi	r24, 0x86	; 134
    f9c6:	59 f0       	breq	.+22     	; 0xf9de <vfprintf+0x658>
    f9c8:	01 ff       	sbrs	r16, 1
    f9ca:	02 c0       	rjmp	.+4      	; 0xf9d0 <vfprintf+0x64a>
    f9cc:	8b e2       	ldi	r24, 0x2B	; 43
    f9ce:	01 c0       	rjmp	.+2      	; 0xf9d2 <vfprintf+0x64c>
    f9d0:	80 e2       	ldi	r24, 0x20	; 32
    f9d2:	07 fd       	sbrc	r16, 7
    f9d4:	8d e2       	ldi	r24, 0x2D	; 45
    f9d6:	b7 01       	movw	r22, r14
    f9d8:	90 e0       	ldi	r25, 0x00	; 0
    f9da:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f9de:	c1 16       	cp	r12, r17
    f9e0:	38 f4       	brcc	.+14     	; 0xf9f0 <vfprintf+0x66a>
    f9e2:	b7 01       	movw	r22, r14
    f9e4:	80 e3       	ldi	r24, 0x30	; 48
    f9e6:	90 e0       	ldi	r25, 0x00	; 0
    f9e8:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    f9ec:	11 50       	subi	r17, 0x01	; 1
    f9ee:	f7 cf       	rjmp	.-18     	; 0xf9de <vfprintf+0x658>
    f9f0:	ca 94       	dec	r12
    f9f2:	f3 01       	movw	r30, r6
    f9f4:	ec 0d       	add	r30, r12
    f9f6:	f1 1d       	adc	r31, r1
    f9f8:	80 81       	ld	r24, Z
    f9fa:	b7 01       	movw	r22, r14
    f9fc:	90 e0       	ldi	r25, 0x00	; 0
    f9fe:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    fa02:	c1 10       	cpse	r12, r1
    fa04:	f5 cf       	rjmp	.-22     	; 0xf9f0 <vfprintf+0x66a>
    fa06:	15 c0       	rjmp	.+42     	; 0xfa32 <vfprintf+0x6ac>
    fa08:	f4 e0       	ldi	r31, 0x04	; 4
    fa0a:	f5 15       	cp	r31, r5
    fa0c:	60 f5       	brcc	.+88     	; 0xfa66 <vfprintf+0x6e0>
    fa0e:	84 e0       	ldi	r24, 0x04	; 4
    fa10:	58 1a       	sub	r5, r24
    fa12:	93 fe       	sbrs	r9, 3
    fa14:	1f c0       	rjmp	.+62     	; 0xfa54 <vfprintf+0x6ce>
    fa16:	01 11       	cpse	r16, r1
    fa18:	27 c0       	rjmp	.+78     	; 0xfa68 <vfprintf+0x6e2>
    fa1a:	2c 85       	ldd	r18, Y+12	; 0x0c
    fa1c:	23 ff       	sbrs	r18, 3
    fa1e:	2a c0       	rjmp	.+84     	; 0xfa74 <vfprintf+0x6ee>
    fa20:	08 eb       	ldi	r16, 0xB8	; 184
    fa22:	12 e0       	ldi	r17, 0x02	; 2
    fa24:	39 2d       	mov	r19, r9
    fa26:	30 71       	andi	r19, 0x10	; 16
    fa28:	93 2e       	mov	r9, r19
    fa2a:	f8 01       	movw	r30, r16
    fa2c:	84 91       	lpm	r24, Z
    fa2e:	81 11       	cpse	r24, r1
    fa30:	24 c0       	rjmp	.+72     	; 0xfa7a <vfprintf+0x6f4>
    fa32:	55 20       	and	r5, r5
    fa34:	09 f4       	brne	.+2      	; 0xfa38 <vfprintf+0x6b2>
    fa36:	e4 cc       	rjmp	.-1592   	; 0xf400 <vfprintf+0x7a>
    fa38:	b7 01       	movw	r22, r14
    fa3a:	80 e2       	ldi	r24, 0x20	; 32
    fa3c:	90 e0       	ldi	r25, 0x00	; 0
    fa3e:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    fa42:	5a 94       	dec	r5
    fa44:	f6 cf       	rjmp	.-20     	; 0xfa32 <vfprintf+0x6ac>
    fa46:	f7 01       	movw	r30, r14
    fa48:	86 81       	ldd	r24, Z+6	; 0x06
    fa4a:	97 81       	ldd	r25, Z+7	; 0x07
    fa4c:	26 c0       	rjmp	.+76     	; 0xfa9a <vfprintf+0x714>
    fa4e:	8f ef       	ldi	r24, 0xFF	; 255
    fa50:	9f ef       	ldi	r25, 0xFF	; 255
    fa52:	23 c0       	rjmp	.+70     	; 0xfa9a <vfprintf+0x714>
    fa54:	b7 01       	movw	r22, r14
    fa56:	80 e2       	ldi	r24, 0x20	; 32
    fa58:	90 e0       	ldi	r25, 0x00	; 0
    fa5a:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    fa5e:	5a 94       	dec	r5
    fa60:	51 10       	cpse	r5, r1
    fa62:	f8 cf       	rjmp	.-16     	; 0xfa54 <vfprintf+0x6ce>
    fa64:	d8 cf       	rjmp	.-80     	; 0xfa16 <vfprintf+0x690>
    fa66:	51 2c       	mov	r5, r1
    fa68:	b7 01       	movw	r22, r14
    fa6a:	80 2f       	mov	r24, r16
    fa6c:	90 e0       	ldi	r25, 0x00	; 0
    fa6e:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    fa72:	d3 cf       	rjmp	.-90     	; 0xfa1a <vfprintf+0x694>
    fa74:	0c eb       	ldi	r16, 0xBC	; 188
    fa76:	12 e0       	ldi	r17, 0x02	; 2
    fa78:	d5 cf       	rjmp	.-86     	; 0xfa24 <vfprintf+0x69e>
    fa7a:	91 10       	cpse	r9, r1
    fa7c:	80 52       	subi	r24, 0x20	; 32
    fa7e:	b7 01       	movw	r22, r14
    fa80:	90 e0       	ldi	r25, 0x00	; 0
    fa82:	0e 94 43 85 	call	0x10a86	; 0x10a86 <fputc>
    fa86:	0f 5f       	subi	r16, 0xFF	; 255
    fa88:	1f 4f       	sbci	r17, 0xFF	; 255
    fa8a:	cf cf       	rjmp	.-98     	; 0xfa2a <vfprintf+0x6a4>
    fa8c:	23 e0       	ldi	r18, 0x03	; 3
    fa8e:	25 15       	cp	r18, r5
    fa90:	10 f4       	brcc	.+4      	; 0xfa96 <vfprintf+0x710>
    fa92:	83 e0       	ldi	r24, 0x03	; 3
    fa94:	bd cf       	rjmp	.-134    	; 0xfa10 <vfprintf+0x68a>
    fa96:	51 2c       	mov	r5, r1
    fa98:	c0 cf       	rjmp	.-128    	; 0xfa1a <vfprintf+0x694>
    fa9a:	60 96       	adiw	r28, 0x10	; 16
    fa9c:	cd bf       	out	0x3d, r28	; 61
    fa9e:	de bf       	out	0x3e, r29	; 62
    faa0:	df 91       	pop	r29
    faa2:	cf 91       	pop	r28
    faa4:	1f 91       	pop	r17
    faa6:	0f 91       	pop	r16
    faa8:	ff 90       	pop	r15
    faaa:	ef 90       	pop	r14
    faac:	df 90       	pop	r13
    faae:	cf 90       	pop	r12
    fab0:	bf 90       	pop	r11
    fab2:	af 90       	pop	r10
    fab4:	9f 90       	pop	r9
    fab6:	8f 90       	pop	r8
    fab8:	7f 90       	pop	r7
    faba:	6f 90       	pop	r6
    fabc:	5f 90       	pop	r5
    fabe:	4f 90       	pop	r4
    fac0:	3f 90       	pop	r3
    fac2:	2f 90       	pop	r2
    fac4:	08 95       	ret

0000fac6 <__subsf3>:
    fac6:	50 58       	subi	r21, 0x80	; 128

0000fac8 <__addsf3>:
    fac8:	bb 27       	eor	r27, r27
    faca:	aa 27       	eor	r26, r26
    facc:	0e d0       	rcall	.+28     	; 0xfaea <__addsf3x>
    face:	a0 c1       	rjmp	.+832    	; 0xfe10 <__fp_round>
    fad0:	69 d1       	rcall	.+722    	; 0xfda4 <__fp_pscA>
    fad2:	30 f0       	brcs	.+12     	; 0xfae0 <__addsf3+0x18>
    fad4:	6e d1       	rcall	.+732    	; 0xfdb2 <__fp_pscB>
    fad6:	20 f0       	brcs	.+8      	; 0xfae0 <__addsf3+0x18>
    fad8:	31 f4       	brne	.+12     	; 0xfae6 <__addsf3+0x1e>
    fada:	9f 3f       	cpi	r25, 0xFF	; 255
    fadc:	11 f4       	brne	.+4      	; 0xfae2 <__addsf3+0x1a>
    fade:	1e f4       	brtc	.+6      	; 0xfae6 <__addsf3+0x1e>
    fae0:	5e c1       	rjmp	.+700    	; 0xfd9e <__fp_nan>
    fae2:	0e f4       	brtc	.+2      	; 0xfae6 <__addsf3+0x1e>
    fae4:	e0 95       	com	r30
    fae6:	e7 fb       	bst	r30, 7
    fae8:	54 c1       	rjmp	.+680    	; 0xfd92 <__fp_inf>

0000faea <__addsf3x>:
    faea:	e9 2f       	mov	r30, r25
    faec:	b3 d1       	rcall	.+870    	; 0xfe54 <__fp_split3>
    faee:	80 f3       	brcs	.-32     	; 0xfad0 <__addsf3+0x8>
    faf0:	ba 17       	cp	r27, r26
    faf2:	62 07       	cpc	r22, r18
    faf4:	73 07       	cpc	r23, r19
    faf6:	84 07       	cpc	r24, r20
    faf8:	95 07       	cpc	r25, r21
    fafa:	18 f0       	brcs	.+6      	; 0xfb02 <__addsf3x+0x18>
    fafc:	71 f4       	brne	.+28     	; 0xfb1a <__addsf3x+0x30>
    fafe:	9e f5       	brtc	.+102    	; 0xfb66 <__addsf3x+0x7c>
    fb00:	cb c1       	rjmp	.+918    	; 0xfe98 <__fp_zero>
    fb02:	0e f4       	brtc	.+2      	; 0xfb06 <__addsf3x+0x1c>
    fb04:	e0 95       	com	r30
    fb06:	0b 2e       	mov	r0, r27
    fb08:	ba 2f       	mov	r27, r26
    fb0a:	a0 2d       	mov	r26, r0
    fb0c:	0b 01       	movw	r0, r22
    fb0e:	b9 01       	movw	r22, r18
    fb10:	90 01       	movw	r18, r0
    fb12:	0c 01       	movw	r0, r24
    fb14:	ca 01       	movw	r24, r20
    fb16:	a0 01       	movw	r20, r0
    fb18:	11 24       	eor	r1, r1
    fb1a:	ff 27       	eor	r31, r31
    fb1c:	59 1b       	sub	r21, r25
    fb1e:	99 f0       	breq	.+38     	; 0xfb46 <__addsf3x+0x5c>
    fb20:	59 3f       	cpi	r21, 0xF9	; 249
    fb22:	50 f4       	brcc	.+20     	; 0xfb38 <__addsf3x+0x4e>
    fb24:	50 3e       	cpi	r21, 0xE0	; 224
    fb26:	68 f1       	brcs	.+90     	; 0xfb82 <__addsf3x+0x98>
    fb28:	1a 16       	cp	r1, r26
    fb2a:	f0 40       	sbci	r31, 0x00	; 0
    fb2c:	a2 2f       	mov	r26, r18
    fb2e:	23 2f       	mov	r18, r19
    fb30:	34 2f       	mov	r19, r20
    fb32:	44 27       	eor	r20, r20
    fb34:	58 5f       	subi	r21, 0xF8	; 248
    fb36:	f3 cf       	rjmp	.-26     	; 0xfb1e <__addsf3x+0x34>
    fb38:	46 95       	lsr	r20
    fb3a:	37 95       	ror	r19
    fb3c:	27 95       	ror	r18
    fb3e:	a7 95       	ror	r26
    fb40:	f0 40       	sbci	r31, 0x00	; 0
    fb42:	53 95       	inc	r21
    fb44:	c9 f7       	brne	.-14     	; 0xfb38 <__addsf3x+0x4e>
    fb46:	7e f4       	brtc	.+30     	; 0xfb66 <__addsf3x+0x7c>
    fb48:	1f 16       	cp	r1, r31
    fb4a:	ba 0b       	sbc	r27, r26
    fb4c:	62 0b       	sbc	r22, r18
    fb4e:	73 0b       	sbc	r23, r19
    fb50:	84 0b       	sbc	r24, r20
    fb52:	ba f0       	brmi	.+46     	; 0xfb82 <__addsf3x+0x98>
    fb54:	91 50       	subi	r25, 0x01	; 1
    fb56:	a1 f0       	breq	.+40     	; 0xfb80 <__addsf3x+0x96>
    fb58:	ff 0f       	add	r31, r31
    fb5a:	bb 1f       	adc	r27, r27
    fb5c:	66 1f       	adc	r22, r22
    fb5e:	77 1f       	adc	r23, r23
    fb60:	88 1f       	adc	r24, r24
    fb62:	c2 f7       	brpl	.-16     	; 0xfb54 <__addsf3x+0x6a>
    fb64:	0e c0       	rjmp	.+28     	; 0xfb82 <__addsf3x+0x98>
    fb66:	ba 0f       	add	r27, r26
    fb68:	62 1f       	adc	r22, r18
    fb6a:	73 1f       	adc	r23, r19
    fb6c:	84 1f       	adc	r24, r20
    fb6e:	48 f4       	brcc	.+18     	; 0xfb82 <__addsf3x+0x98>
    fb70:	87 95       	ror	r24
    fb72:	77 95       	ror	r23
    fb74:	67 95       	ror	r22
    fb76:	b7 95       	ror	r27
    fb78:	f7 95       	ror	r31
    fb7a:	9e 3f       	cpi	r25, 0xFE	; 254
    fb7c:	08 f0       	brcs	.+2      	; 0xfb80 <__addsf3x+0x96>
    fb7e:	b3 cf       	rjmp	.-154    	; 0xfae6 <__addsf3+0x1e>
    fb80:	93 95       	inc	r25
    fb82:	88 0f       	add	r24, r24
    fb84:	08 f0       	brcs	.+2      	; 0xfb88 <__addsf3x+0x9e>
    fb86:	99 27       	eor	r25, r25
    fb88:	ee 0f       	add	r30, r30
    fb8a:	97 95       	ror	r25
    fb8c:	87 95       	ror	r24
    fb8e:	08 95       	ret

0000fb90 <__cmpsf2>:
    fb90:	dc d0       	rcall	.+440    	; 0xfd4a <__fp_cmp>
    fb92:	08 f4       	brcc	.+2      	; 0xfb96 <__cmpsf2+0x6>
    fb94:	81 e0       	ldi	r24, 0x01	; 1
    fb96:	08 95       	ret

0000fb98 <cos>:
    fb98:	14 d1       	rcall	.+552    	; 0xfdc2 <__fp_rempio2>
    fb9a:	e3 95       	inc	r30
    fb9c:	4a c1       	rjmp	.+660    	; 0xfe32 <__fp_sinus>

0000fb9e <__divsf3>:
    fb9e:	0c d0       	rcall	.+24     	; 0xfbb8 <__divsf3x>
    fba0:	37 c1       	rjmp	.+622    	; 0xfe10 <__fp_round>
    fba2:	07 d1       	rcall	.+526    	; 0xfdb2 <__fp_pscB>
    fba4:	40 f0       	brcs	.+16     	; 0xfbb6 <__divsf3+0x18>
    fba6:	fe d0       	rcall	.+508    	; 0xfda4 <__fp_pscA>
    fba8:	30 f0       	brcs	.+12     	; 0xfbb6 <__divsf3+0x18>
    fbaa:	21 f4       	brne	.+8      	; 0xfbb4 <__divsf3+0x16>
    fbac:	5f 3f       	cpi	r21, 0xFF	; 255
    fbae:	19 f0       	breq	.+6      	; 0xfbb6 <__divsf3+0x18>
    fbb0:	f0 c0       	rjmp	.+480    	; 0xfd92 <__fp_inf>
    fbb2:	51 11       	cpse	r21, r1
    fbb4:	72 c1       	rjmp	.+740    	; 0xfe9a <__fp_szero>
    fbb6:	f3 c0       	rjmp	.+486    	; 0xfd9e <__fp_nan>

0000fbb8 <__divsf3x>:
    fbb8:	4d d1       	rcall	.+666    	; 0xfe54 <__fp_split3>
    fbba:	98 f3       	brcs	.-26     	; 0xfba2 <__divsf3+0x4>

0000fbbc <__divsf3_pse>:
    fbbc:	99 23       	and	r25, r25
    fbbe:	c9 f3       	breq	.-14     	; 0xfbb2 <__divsf3+0x14>
    fbc0:	55 23       	and	r21, r21
    fbc2:	b1 f3       	breq	.-20     	; 0xfbb0 <__divsf3+0x12>
    fbc4:	95 1b       	sub	r25, r21
    fbc6:	55 0b       	sbc	r21, r21
    fbc8:	bb 27       	eor	r27, r27
    fbca:	aa 27       	eor	r26, r26
    fbcc:	62 17       	cp	r22, r18
    fbce:	73 07       	cpc	r23, r19
    fbd0:	84 07       	cpc	r24, r20
    fbd2:	38 f0       	brcs	.+14     	; 0xfbe2 <__divsf3_pse+0x26>
    fbd4:	9f 5f       	subi	r25, 0xFF	; 255
    fbd6:	5f 4f       	sbci	r21, 0xFF	; 255
    fbd8:	22 0f       	add	r18, r18
    fbda:	33 1f       	adc	r19, r19
    fbdc:	44 1f       	adc	r20, r20
    fbde:	aa 1f       	adc	r26, r26
    fbe0:	a9 f3       	breq	.-22     	; 0xfbcc <__divsf3_pse+0x10>
    fbe2:	33 d0       	rcall	.+102    	; 0xfc4a <__divsf3_pse+0x8e>
    fbe4:	0e 2e       	mov	r0, r30
    fbe6:	3a f0       	brmi	.+14     	; 0xfbf6 <__divsf3_pse+0x3a>
    fbe8:	e0 e8       	ldi	r30, 0x80	; 128
    fbea:	30 d0       	rcall	.+96     	; 0xfc4c <__divsf3_pse+0x90>
    fbec:	91 50       	subi	r25, 0x01	; 1
    fbee:	50 40       	sbci	r21, 0x00	; 0
    fbf0:	e6 95       	lsr	r30
    fbf2:	00 1c       	adc	r0, r0
    fbf4:	ca f7       	brpl	.-14     	; 0xfbe8 <__divsf3_pse+0x2c>
    fbf6:	29 d0       	rcall	.+82     	; 0xfc4a <__divsf3_pse+0x8e>
    fbf8:	fe 2f       	mov	r31, r30
    fbfa:	27 d0       	rcall	.+78     	; 0xfc4a <__divsf3_pse+0x8e>
    fbfc:	66 0f       	add	r22, r22
    fbfe:	77 1f       	adc	r23, r23
    fc00:	88 1f       	adc	r24, r24
    fc02:	bb 1f       	adc	r27, r27
    fc04:	26 17       	cp	r18, r22
    fc06:	37 07       	cpc	r19, r23
    fc08:	48 07       	cpc	r20, r24
    fc0a:	ab 07       	cpc	r26, r27
    fc0c:	b0 e8       	ldi	r27, 0x80	; 128
    fc0e:	09 f0       	breq	.+2      	; 0xfc12 <__divsf3_pse+0x56>
    fc10:	bb 0b       	sbc	r27, r27
    fc12:	80 2d       	mov	r24, r0
    fc14:	bf 01       	movw	r22, r30
    fc16:	ff 27       	eor	r31, r31
    fc18:	93 58       	subi	r25, 0x83	; 131
    fc1a:	5f 4f       	sbci	r21, 0xFF	; 255
    fc1c:	2a f0       	brmi	.+10     	; 0xfc28 <__divsf3_pse+0x6c>
    fc1e:	9e 3f       	cpi	r25, 0xFE	; 254
    fc20:	51 05       	cpc	r21, r1
    fc22:	68 f0       	brcs	.+26     	; 0xfc3e <__divsf3_pse+0x82>
    fc24:	b6 c0       	rjmp	.+364    	; 0xfd92 <__fp_inf>
    fc26:	39 c1       	rjmp	.+626    	; 0xfe9a <__fp_szero>
    fc28:	5f 3f       	cpi	r21, 0xFF	; 255
    fc2a:	ec f3       	brlt	.-6      	; 0xfc26 <__divsf3_pse+0x6a>
    fc2c:	98 3e       	cpi	r25, 0xE8	; 232
    fc2e:	dc f3       	brlt	.-10     	; 0xfc26 <__divsf3_pse+0x6a>
    fc30:	86 95       	lsr	r24
    fc32:	77 95       	ror	r23
    fc34:	67 95       	ror	r22
    fc36:	b7 95       	ror	r27
    fc38:	f7 95       	ror	r31
    fc3a:	9f 5f       	subi	r25, 0xFF	; 255
    fc3c:	c9 f7       	brne	.-14     	; 0xfc30 <__divsf3_pse+0x74>
    fc3e:	88 0f       	add	r24, r24
    fc40:	91 1d       	adc	r25, r1
    fc42:	96 95       	lsr	r25
    fc44:	87 95       	ror	r24
    fc46:	97 f9       	bld	r25, 7
    fc48:	08 95       	ret
    fc4a:	e1 e0       	ldi	r30, 0x01	; 1
    fc4c:	66 0f       	add	r22, r22
    fc4e:	77 1f       	adc	r23, r23
    fc50:	88 1f       	adc	r24, r24
    fc52:	bb 1f       	adc	r27, r27
    fc54:	62 17       	cp	r22, r18
    fc56:	73 07       	cpc	r23, r19
    fc58:	84 07       	cpc	r24, r20
    fc5a:	ba 07       	cpc	r27, r26
    fc5c:	20 f0       	brcs	.+8      	; 0xfc66 <__divsf3_pse+0xaa>
    fc5e:	62 1b       	sub	r22, r18
    fc60:	73 0b       	sbc	r23, r19
    fc62:	84 0b       	sbc	r24, r20
    fc64:	ba 0b       	sbc	r27, r26
    fc66:	ee 1f       	adc	r30, r30
    fc68:	88 f7       	brcc	.-30     	; 0xfc4c <__divsf3_pse+0x90>
    fc6a:	e0 95       	com	r30
    fc6c:	08 95       	ret

0000fc6e <__fixsfsi>:
    fc6e:	04 d0       	rcall	.+8      	; 0xfc78 <__fixunssfsi>
    fc70:	68 94       	set
    fc72:	b1 11       	cpse	r27, r1
    fc74:	12 c1       	rjmp	.+548    	; 0xfe9a <__fp_szero>
    fc76:	08 95       	ret

0000fc78 <__fixunssfsi>:
    fc78:	f5 d0       	rcall	.+490    	; 0xfe64 <__fp_splitA>
    fc7a:	88 f0       	brcs	.+34     	; 0xfc9e <__fixunssfsi+0x26>
    fc7c:	9f 57       	subi	r25, 0x7F	; 127
    fc7e:	90 f0       	brcs	.+36     	; 0xfca4 <__fixunssfsi+0x2c>
    fc80:	b9 2f       	mov	r27, r25
    fc82:	99 27       	eor	r25, r25
    fc84:	b7 51       	subi	r27, 0x17	; 23
    fc86:	a0 f0       	brcs	.+40     	; 0xfcb0 <__fixunssfsi+0x38>
    fc88:	d1 f0       	breq	.+52     	; 0xfcbe <__fixunssfsi+0x46>
    fc8a:	66 0f       	add	r22, r22
    fc8c:	77 1f       	adc	r23, r23
    fc8e:	88 1f       	adc	r24, r24
    fc90:	99 1f       	adc	r25, r25
    fc92:	1a f0       	brmi	.+6      	; 0xfc9a <__fixunssfsi+0x22>
    fc94:	ba 95       	dec	r27
    fc96:	c9 f7       	brne	.-14     	; 0xfc8a <__fixunssfsi+0x12>
    fc98:	12 c0       	rjmp	.+36     	; 0xfcbe <__fixunssfsi+0x46>
    fc9a:	b1 30       	cpi	r27, 0x01	; 1
    fc9c:	81 f0       	breq	.+32     	; 0xfcbe <__fixunssfsi+0x46>
    fc9e:	fc d0       	rcall	.+504    	; 0xfe98 <__fp_zero>
    fca0:	b1 e0       	ldi	r27, 0x01	; 1
    fca2:	08 95       	ret
    fca4:	f9 c0       	rjmp	.+498    	; 0xfe98 <__fp_zero>
    fca6:	67 2f       	mov	r22, r23
    fca8:	78 2f       	mov	r23, r24
    fcaa:	88 27       	eor	r24, r24
    fcac:	b8 5f       	subi	r27, 0xF8	; 248
    fcae:	39 f0       	breq	.+14     	; 0xfcbe <__fixunssfsi+0x46>
    fcb0:	b9 3f       	cpi	r27, 0xF9	; 249
    fcb2:	cc f3       	brlt	.-14     	; 0xfca6 <__fixunssfsi+0x2e>
    fcb4:	86 95       	lsr	r24
    fcb6:	77 95       	ror	r23
    fcb8:	67 95       	ror	r22
    fcba:	b3 95       	inc	r27
    fcbc:	d9 f7       	brne	.-10     	; 0xfcb4 <__fixunssfsi+0x3c>
    fcbe:	3e f4       	brtc	.+14     	; 0xfcce <__fixunssfsi+0x56>
    fcc0:	90 95       	com	r25
    fcc2:	80 95       	com	r24
    fcc4:	70 95       	com	r23
    fcc6:	61 95       	neg	r22
    fcc8:	7f 4f       	sbci	r23, 0xFF	; 255
    fcca:	8f 4f       	sbci	r24, 0xFF	; 255
    fccc:	9f 4f       	sbci	r25, 0xFF	; 255
    fcce:	08 95       	ret

0000fcd0 <__floatunsisf>:
    fcd0:	e8 94       	clt
    fcd2:	09 c0       	rjmp	.+18     	; 0xfce6 <__floatsisf+0x12>

0000fcd4 <__floatsisf>:
    fcd4:	97 fb       	bst	r25, 7
    fcd6:	3e f4       	brtc	.+14     	; 0xfce6 <__floatsisf+0x12>
    fcd8:	90 95       	com	r25
    fcda:	80 95       	com	r24
    fcdc:	70 95       	com	r23
    fcde:	61 95       	neg	r22
    fce0:	7f 4f       	sbci	r23, 0xFF	; 255
    fce2:	8f 4f       	sbci	r24, 0xFF	; 255
    fce4:	9f 4f       	sbci	r25, 0xFF	; 255
    fce6:	99 23       	and	r25, r25
    fce8:	a9 f0       	breq	.+42     	; 0xfd14 <__floatsisf+0x40>
    fcea:	f9 2f       	mov	r31, r25
    fcec:	96 e9       	ldi	r25, 0x96	; 150
    fcee:	bb 27       	eor	r27, r27
    fcf0:	93 95       	inc	r25
    fcf2:	f6 95       	lsr	r31
    fcf4:	87 95       	ror	r24
    fcf6:	77 95       	ror	r23
    fcf8:	67 95       	ror	r22
    fcfa:	b7 95       	ror	r27
    fcfc:	f1 11       	cpse	r31, r1
    fcfe:	f8 cf       	rjmp	.-16     	; 0xfcf0 <__floatsisf+0x1c>
    fd00:	fa f4       	brpl	.+62     	; 0xfd40 <__floatsisf+0x6c>
    fd02:	bb 0f       	add	r27, r27
    fd04:	11 f4       	brne	.+4      	; 0xfd0a <__floatsisf+0x36>
    fd06:	60 ff       	sbrs	r22, 0
    fd08:	1b c0       	rjmp	.+54     	; 0xfd40 <__floatsisf+0x6c>
    fd0a:	6f 5f       	subi	r22, 0xFF	; 255
    fd0c:	7f 4f       	sbci	r23, 0xFF	; 255
    fd0e:	8f 4f       	sbci	r24, 0xFF	; 255
    fd10:	9f 4f       	sbci	r25, 0xFF	; 255
    fd12:	16 c0       	rjmp	.+44     	; 0xfd40 <__floatsisf+0x6c>
    fd14:	88 23       	and	r24, r24
    fd16:	11 f0       	breq	.+4      	; 0xfd1c <__floatsisf+0x48>
    fd18:	96 e9       	ldi	r25, 0x96	; 150
    fd1a:	11 c0       	rjmp	.+34     	; 0xfd3e <__floatsisf+0x6a>
    fd1c:	77 23       	and	r23, r23
    fd1e:	21 f0       	breq	.+8      	; 0xfd28 <__floatsisf+0x54>
    fd20:	9e e8       	ldi	r25, 0x8E	; 142
    fd22:	87 2f       	mov	r24, r23
    fd24:	76 2f       	mov	r23, r22
    fd26:	05 c0       	rjmp	.+10     	; 0xfd32 <__floatsisf+0x5e>
    fd28:	66 23       	and	r22, r22
    fd2a:	71 f0       	breq	.+28     	; 0xfd48 <__floatsisf+0x74>
    fd2c:	96 e8       	ldi	r25, 0x86	; 134
    fd2e:	86 2f       	mov	r24, r22
    fd30:	70 e0       	ldi	r23, 0x00	; 0
    fd32:	60 e0       	ldi	r22, 0x00	; 0
    fd34:	2a f0       	brmi	.+10     	; 0xfd40 <__floatsisf+0x6c>
    fd36:	9a 95       	dec	r25
    fd38:	66 0f       	add	r22, r22
    fd3a:	77 1f       	adc	r23, r23
    fd3c:	88 1f       	adc	r24, r24
    fd3e:	da f7       	brpl	.-10     	; 0xfd36 <__floatsisf+0x62>
    fd40:	88 0f       	add	r24, r24
    fd42:	96 95       	lsr	r25
    fd44:	87 95       	ror	r24
    fd46:	97 f9       	bld	r25, 7
    fd48:	08 95       	ret

0000fd4a <__fp_cmp>:
    fd4a:	99 0f       	add	r25, r25
    fd4c:	00 08       	sbc	r0, r0
    fd4e:	55 0f       	add	r21, r21
    fd50:	aa 0b       	sbc	r26, r26
    fd52:	e0 e8       	ldi	r30, 0x80	; 128
    fd54:	fe ef       	ldi	r31, 0xFE	; 254
    fd56:	16 16       	cp	r1, r22
    fd58:	17 06       	cpc	r1, r23
    fd5a:	e8 07       	cpc	r30, r24
    fd5c:	f9 07       	cpc	r31, r25
    fd5e:	c0 f0       	brcs	.+48     	; 0xfd90 <__fp_cmp+0x46>
    fd60:	12 16       	cp	r1, r18
    fd62:	13 06       	cpc	r1, r19
    fd64:	e4 07       	cpc	r30, r20
    fd66:	f5 07       	cpc	r31, r21
    fd68:	98 f0       	brcs	.+38     	; 0xfd90 <__fp_cmp+0x46>
    fd6a:	62 1b       	sub	r22, r18
    fd6c:	73 0b       	sbc	r23, r19
    fd6e:	84 0b       	sbc	r24, r20
    fd70:	95 0b       	sbc	r25, r21
    fd72:	39 f4       	brne	.+14     	; 0xfd82 <__fp_cmp+0x38>
    fd74:	0a 26       	eor	r0, r26
    fd76:	61 f0       	breq	.+24     	; 0xfd90 <__fp_cmp+0x46>
    fd78:	23 2b       	or	r18, r19
    fd7a:	24 2b       	or	r18, r20
    fd7c:	25 2b       	or	r18, r21
    fd7e:	21 f4       	brne	.+8      	; 0xfd88 <__fp_cmp+0x3e>
    fd80:	08 95       	ret
    fd82:	0a 26       	eor	r0, r26
    fd84:	09 f4       	brne	.+2      	; 0xfd88 <__fp_cmp+0x3e>
    fd86:	a1 40       	sbci	r26, 0x01	; 1
    fd88:	a6 95       	lsr	r26
    fd8a:	8f ef       	ldi	r24, 0xFF	; 255
    fd8c:	81 1d       	adc	r24, r1
    fd8e:	81 1d       	adc	r24, r1
    fd90:	08 95       	ret

0000fd92 <__fp_inf>:
    fd92:	97 f9       	bld	r25, 7
    fd94:	9f 67       	ori	r25, 0x7F	; 127
    fd96:	80 e8       	ldi	r24, 0x80	; 128
    fd98:	70 e0       	ldi	r23, 0x00	; 0
    fd9a:	60 e0       	ldi	r22, 0x00	; 0
    fd9c:	08 95       	ret

0000fd9e <__fp_nan>:
    fd9e:	9f ef       	ldi	r25, 0xFF	; 255
    fda0:	80 ec       	ldi	r24, 0xC0	; 192
    fda2:	08 95       	ret

0000fda4 <__fp_pscA>:
    fda4:	00 24       	eor	r0, r0
    fda6:	0a 94       	dec	r0
    fda8:	16 16       	cp	r1, r22
    fdaa:	17 06       	cpc	r1, r23
    fdac:	18 06       	cpc	r1, r24
    fdae:	09 06       	cpc	r0, r25
    fdb0:	08 95       	ret

0000fdb2 <__fp_pscB>:
    fdb2:	00 24       	eor	r0, r0
    fdb4:	0a 94       	dec	r0
    fdb6:	12 16       	cp	r1, r18
    fdb8:	13 06       	cpc	r1, r19
    fdba:	14 06       	cpc	r1, r20
    fdbc:	05 06       	cpc	r0, r21
    fdbe:	08 95       	ret
    fdc0:	ee cf       	rjmp	.-36     	; 0xfd9e <__fp_nan>

0000fdc2 <__fp_rempio2>:
    fdc2:	50 d0       	rcall	.+160    	; 0xfe64 <__fp_splitA>
    fdc4:	e8 f3       	brcs	.-6      	; 0xfdc0 <__fp_pscB+0xe>
    fdc6:	e8 94       	clt
    fdc8:	e0 e0       	ldi	r30, 0x00	; 0
    fdca:	bb 27       	eor	r27, r27
    fdcc:	9f 57       	subi	r25, 0x7F	; 127
    fdce:	f0 f0       	brcs	.+60     	; 0xfe0c <__fp_rempio2+0x4a>
    fdd0:	2a ed       	ldi	r18, 0xDA	; 218
    fdd2:	3f e0       	ldi	r19, 0x0F	; 15
    fdd4:	49 ec       	ldi	r20, 0xC9	; 201
    fdd6:	06 c0       	rjmp	.+12     	; 0xfde4 <__fp_rempio2+0x22>
    fdd8:	ee 0f       	add	r30, r30
    fdda:	bb 0f       	add	r27, r27
    fddc:	66 1f       	adc	r22, r22
    fdde:	77 1f       	adc	r23, r23
    fde0:	88 1f       	adc	r24, r24
    fde2:	28 f0       	brcs	.+10     	; 0xfdee <__fp_rempio2+0x2c>
    fde4:	b2 3a       	cpi	r27, 0xA2	; 162
    fde6:	62 07       	cpc	r22, r18
    fde8:	73 07       	cpc	r23, r19
    fdea:	84 07       	cpc	r24, r20
    fdec:	28 f0       	brcs	.+10     	; 0xfdf8 <__fp_rempio2+0x36>
    fdee:	b2 5a       	subi	r27, 0xA2	; 162
    fdf0:	62 0b       	sbc	r22, r18
    fdf2:	73 0b       	sbc	r23, r19
    fdf4:	84 0b       	sbc	r24, r20
    fdf6:	e3 95       	inc	r30
    fdf8:	9a 95       	dec	r25
    fdfa:	72 f7       	brpl	.-36     	; 0xfdd8 <__fp_rempio2+0x16>
    fdfc:	80 38       	cpi	r24, 0x80	; 128
    fdfe:	30 f4       	brcc	.+12     	; 0xfe0c <__fp_rempio2+0x4a>
    fe00:	9a 95       	dec	r25
    fe02:	bb 0f       	add	r27, r27
    fe04:	66 1f       	adc	r22, r22
    fe06:	77 1f       	adc	r23, r23
    fe08:	88 1f       	adc	r24, r24
    fe0a:	d2 f7       	brpl	.-12     	; 0xfe00 <__fp_rempio2+0x3e>
    fe0c:	90 48       	sbci	r25, 0x80	; 128
    fe0e:	37 c1       	rjmp	.+622    	; 0x1007e <__fp_mpack_finite>

0000fe10 <__fp_round>:
    fe10:	09 2e       	mov	r0, r25
    fe12:	03 94       	inc	r0
    fe14:	00 0c       	add	r0, r0
    fe16:	11 f4       	brne	.+4      	; 0xfe1c <__fp_round+0xc>
    fe18:	88 23       	and	r24, r24
    fe1a:	52 f0       	brmi	.+20     	; 0xfe30 <__fp_round+0x20>
    fe1c:	bb 0f       	add	r27, r27
    fe1e:	40 f4       	brcc	.+16     	; 0xfe30 <__fp_round+0x20>
    fe20:	bf 2b       	or	r27, r31
    fe22:	11 f4       	brne	.+4      	; 0xfe28 <__fp_round+0x18>
    fe24:	60 ff       	sbrs	r22, 0
    fe26:	04 c0       	rjmp	.+8      	; 0xfe30 <__fp_round+0x20>
    fe28:	6f 5f       	subi	r22, 0xFF	; 255
    fe2a:	7f 4f       	sbci	r23, 0xFF	; 255
    fe2c:	8f 4f       	sbci	r24, 0xFF	; 255
    fe2e:	9f 4f       	sbci	r25, 0xFF	; 255
    fe30:	08 95       	ret

0000fe32 <__fp_sinus>:
    fe32:	ef 93       	push	r30
    fe34:	e0 ff       	sbrs	r30, 0
    fe36:	06 c0       	rjmp	.+12     	; 0xfe44 <__fp_sinus+0x12>
    fe38:	a2 ea       	ldi	r26, 0xA2	; 162
    fe3a:	2a ed       	ldi	r18, 0xDA	; 218
    fe3c:	3f e0       	ldi	r19, 0x0F	; 15
    fe3e:	49 ec       	ldi	r20, 0xC9	; 201
    fe40:	5f eb       	ldi	r21, 0xBF	; 191
    fe42:	53 de       	rcall	.-858    	; 0xfaea <__addsf3x>
    fe44:	e5 df       	rcall	.-54     	; 0xfe10 <__fp_round>
    fe46:	0f 90       	pop	r0
    fe48:	03 94       	inc	r0
    fe4a:	01 fc       	sbrc	r0, 1
    fe4c:	90 58       	subi	r25, 0x80	; 128
    fe4e:	e8 e1       	ldi	r30, 0x18	; 24
    fe50:	f2 e0       	ldi	r31, 0x02	; 2
    fe52:	46 c1       	rjmp	.+652    	; 0x100e0 <__fp_powsodd>

0000fe54 <__fp_split3>:
    fe54:	57 fd       	sbrc	r21, 7
    fe56:	90 58       	subi	r25, 0x80	; 128
    fe58:	44 0f       	add	r20, r20
    fe5a:	55 1f       	adc	r21, r21
    fe5c:	59 f0       	breq	.+22     	; 0xfe74 <__fp_splitA+0x10>
    fe5e:	5f 3f       	cpi	r21, 0xFF	; 255
    fe60:	71 f0       	breq	.+28     	; 0xfe7e <__fp_splitA+0x1a>
    fe62:	47 95       	ror	r20

0000fe64 <__fp_splitA>:
    fe64:	88 0f       	add	r24, r24
    fe66:	97 fb       	bst	r25, 7
    fe68:	99 1f       	adc	r25, r25
    fe6a:	61 f0       	breq	.+24     	; 0xfe84 <__fp_splitA+0x20>
    fe6c:	9f 3f       	cpi	r25, 0xFF	; 255
    fe6e:	79 f0       	breq	.+30     	; 0xfe8e <__fp_splitA+0x2a>
    fe70:	87 95       	ror	r24
    fe72:	08 95       	ret
    fe74:	12 16       	cp	r1, r18
    fe76:	13 06       	cpc	r1, r19
    fe78:	14 06       	cpc	r1, r20
    fe7a:	55 1f       	adc	r21, r21
    fe7c:	f2 cf       	rjmp	.-28     	; 0xfe62 <__fp_split3+0xe>
    fe7e:	46 95       	lsr	r20
    fe80:	f1 df       	rcall	.-30     	; 0xfe64 <__fp_splitA>
    fe82:	08 c0       	rjmp	.+16     	; 0xfe94 <__fp_splitA+0x30>
    fe84:	16 16       	cp	r1, r22
    fe86:	17 06       	cpc	r1, r23
    fe88:	18 06       	cpc	r1, r24
    fe8a:	99 1f       	adc	r25, r25
    fe8c:	f1 cf       	rjmp	.-30     	; 0xfe70 <__fp_splitA+0xc>
    fe8e:	86 95       	lsr	r24
    fe90:	71 05       	cpc	r23, r1
    fe92:	61 05       	cpc	r22, r1
    fe94:	08 94       	sec
    fe96:	08 95       	ret

0000fe98 <__fp_zero>:
    fe98:	e8 94       	clt

0000fe9a <__fp_szero>:
    fe9a:	bb 27       	eor	r27, r27
    fe9c:	66 27       	eor	r22, r22
    fe9e:	77 27       	eor	r23, r23
    fea0:	cb 01       	movw	r24, r22
    fea2:	97 f9       	bld	r25, 7
    fea4:	08 95       	ret

0000fea6 <__gesf2>:
    fea6:	51 df       	rcall	.-350    	; 0xfd4a <__fp_cmp>
    fea8:	08 f4       	brcc	.+2      	; 0xfeac <__gesf2+0x6>
    feaa:	8f ef       	ldi	r24, 0xFF	; 255
    feac:	08 95       	ret

0000feae <__mulsf3>:
    feae:	0b d0       	rcall	.+22     	; 0xfec6 <__mulsf3x>
    feb0:	af cf       	rjmp	.-162    	; 0xfe10 <__fp_round>
    feb2:	78 df       	rcall	.-272    	; 0xfda4 <__fp_pscA>
    feb4:	28 f0       	brcs	.+10     	; 0xfec0 <__mulsf3+0x12>
    feb6:	7d df       	rcall	.-262    	; 0xfdb2 <__fp_pscB>
    feb8:	18 f0       	brcs	.+6      	; 0xfec0 <__mulsf3+0x12>
    feba:	95 23       	and	r25, r21
    febc:	09 f0       	breq	.+2      	; 0xfec0 <__mulsf3+0x12>
    febe:	69 cf       	rjmp	.-302    	; 0xfd92 <__fp_inf>
    fec0:	6e cf       	rjmp	.-292    	; 0xfd9e <__fp_nan>
    fec2:	11 24       	eor	r1, r1
    fec4:	ea cf       	rjmp	.-44     	; 0xfe9a <__fp_szero>

0000fec6 <__mulsf3x>:
    fec6:	c6 df       	rcall	.-116    	; 0xfe54 <__fp_split3>
    fec8:	a0 f3       	brcs	.-24     	; 0xfeb2 <__mulsf3+0x4>

0000feca <__mulsf3_pse>:
    feca:	95 9f       	mul	r25, r21
    fecc:	d1 f3       	breq	.-12     	; 0xfec2 <__mulsf3+0x14>
    fece:	95 0f       	add	r25, r21
    fed0:	50 e0       	ldi	r21, 0x00	; 0
    fed2:	55 1f       	adc	r21, r21
    fed4:	62 9f       	mul	r22, r18
    fed6:	f0 01       	movw	r30, r0
    fed8:	72 9f       	mul	r23, r18
    feda:	bb 27       	eor	r27, r27
    fedc:	f0 0d       	add	r31, r0
    fede:	b1 1d       	adc	r27, r1
    fee0:	63 9f       	mul	r22, r19
    fee2:	aa 27       	eor	r26, r26
    fee4:	f0 0d       	add	r31, r0
    fee6:	b1 1d       	adc	r27, r1
    fee8:	aa 1f       	adc	r26, r26
    feea:	64 9f       	mul	r22, r20
    feec:	66 27       	eor	r22, r22
    feee:	b0 0d       	add	r27, r0
    fef0:	a1 1d       	adc	r26, r1
    fef2:	66 1f       	adc	r22, r22
    fef4:	82 9f       	mul	r24, r18
    fef6:	22 27       	eor	r18, r18
    fef8:	b0 0d       	add	r27, r0
    fefa:	a1 1d       	adc	r26, r1
    fefc:	62 1f       	adc	r22, r18
    fefe:	73 9f       	mul	r23, r19
    ff00:	b0 0d       	add	r27, r0
    ff02:	a1 1d       	adc	r26, r1
    ff04:	62 1f       	adc	r22, r18
    ff06:	83 9f       	mul	r24, r19
    ff08:	a0 0d       	add	r26, r0
    ff0a:	61 1d       	adc	r22, r1
    ff0c:	22 1f       	adc	r18, r18
    ff0e:	74 9f       	mul	r23, r20
    ff10:	33 27       	eor	r19, r19
    ff12:	a0 0d       	add	r26, r0
    ff14:	61 1d       	adc	r22, r1
    ff16:	23 1f       	adc	r18, r19
    ff18:	84 9f       	mul	r24, r20
    ff1a:	60 0d       	add	r22, r0
    ff1c:	21 1d       	adc	r18, r1
    ff1e:	82 2f       	mov	r24, r18
    ff20:	76 2f       	mov	r23, r22
    ff22:	6a 2f       	mov	r22, r26
    ff24:	11 24       	eor	r1, r1
    ff26:	9f 57       	subi	r25, 0x7F	; 127
    ff28:	50 40       	sbci	r21, 0x00	; 0
    ff2a:	8a f0       	brmi	.+34     	; 0xff4e <__mulsf3_pse+0x84>
    ff2c:	e1 f0       	breq	.+56     	; 0xff66 <__mulsf3_pse+0x9c>
    ff2e:	88 23       	and	r24, r24
    ff30:	4a f0       	brmi	.+18     	; 0xff44 <__mulsf3_pse+0x7a>
    ff32:	ee 0f       	add	r30, r30
    ff34:	ff 1f       	adc	r31, r31
    ff36:	bb 1f       	adc	r27, r27
    ff38:	66 1f       	adc	r22, r22
    ff3a:	77 1f       	adc	r23, r23
    ff3c:	88 1f       	adc	r24, r24
    ff3e:	91 50       	subi	r25, 0x01	; 1
    ff40:	50 40       	sbci	r21, 0x00	; 0
    ff42:	a9 f7       	brne	.-22     	; 0xff2e <__mulsf3_pse+0x64>
    ff44:	9e 3f       	cpi	r25, 0xFE	; 254
    ff46:	51 05       	cpc	r21, r1
    ff48:	70 f0       	brcs	.+28     	; 0xff66 <__mulsf3_pse+0x9c>
    ff4a:	23 cf       	rjmp	.-442    	; 0xfd92 <__fp_inf>
    ff4c:	a6 cf       	rjmp	.-180    	; 0xfe9a <__fp_szero>
    ff4e:	5f 3f       	cpi	r21, 0xFF	; 255
    ff50:	ec f3       	brlt	.-6      	; 0xff4c <__mulsf3_pse+0x82>
    ff52:	98 3e       	cpi	r25, 0xE8	; 232
    ff54:	dc f3       	brlt	.-10     	; 0xff4c <__mulsf3_pse+0x82>
    ff56:	86 95       	lsr	r24
    ff58:	77 95       	ror	r23
    ff5a:	67 95       	ror	r22
    ff5c:	b7 95       	ror	r27
    ff5e:	f7 95       	ror	r31
    ff60:	e7 95       	ror	r30
    ff62:	9f 5f       	subi	r25, 0xFF	; 255
    ff64:	c1 f7       	brne	.-16     	; 0xff56 <__mulsf3_pse+0x8c>
    ff66:	fe 2b       	or	r31, r30
    ff68:	88 0f       	add	r24, r24
    ff6a:	91 1d       	adc	r25, r1
    ff6c:	96 95       	lsr	r25
    ff6e:	87 95       	ror	r24
    ff70:	97 f9       	bld	r25, 7
    ff72:	08 95       	ret

0000ff74 <pow>:
    ff74:	fa 01       	movw	r30, r20
    ff76:	ee 0f       	add	r30, r30
    ff78:	ff 1f       	adc	r31, r31
    ff7a:	30 96       	adiw	r30, 0x00	; 0
    ff7c:	21 05       	cpc	r18, r1
    ff7e:	31 05       	cpc	r19, r1
    ff80:	99 f1       	breq	.+102    	; 0xffe8 <__DATA_REGION_LENGTH__+0x48>
    ff82:	61 15       	cp	r22, r1
    ff84:	71 05       	cpc	r23, r1
    ff86:	61 f4       	brne	.+24     	; 0xffa0 <__DATA_REGION_LENGTH__>
    ff88:	80 38       	cpi	r24, 0x80	; 128
    ff8a:	bf e3       	ldi	r27, 0x3F	; 63
    ff8c:	9b 07       	cpc	r25, r27
    ff8e:	49 f1       	breq	.+82     	; 0xffe2 <__DATA_REGION_LENGTH__+0x42>
    ff90:	68 94       	set
    ff92:	90 38       	cpi	r25, 0x80	; 128
    ff94:	81 05       	cpc	r24, r1
    ff96:	61 f0       	breq	.+24     	; 0xffb0 <__DATA_REGION_LENGTH__+0x10>
    ff98:	80 38       	cpi	r24, 0x80	; 128
    ff9a:	bf ef       	ldi	r27, 0xFF	; 255
    ff9c:	9b 07       	cpc	r25, r27
    ff9e:	41 f0       	breq	.+16     	; 0xffb0 <__DATA_REGION_LENGTH__+0x10>
    ffa0:	99 23       	and	r25, r25
    ffa2:	42 f5       	brpl	.+80     	; 0xfff4 <__DATA_REGION_LENGTH__+0x54>
    ffa4:	ff 3f       	cpi	r31, 0xFF	; 255
    ffa6:	e1 05       	cpc	r30, r1
    ffa8:	31 05       	cpc	r19, r1
    ffaa:	21 05       	cpc	r18, r1
    ffac:	11 f1       	breq	.+68     	; 0xfff2 <__DATA_REGION_LENGTH__+0x52>
    ffae:	e8 94       	clt
    ffb0:	08 94       	sec
    ffb2:	e7 95       	ror	r30
    ffb4:	d9 01       	movw	r26, r18
    ffb6:	aa 23       	and	r26, r26
    ffb8:	29 f4       	brne	.+10     	; 0xffc4 <__DATA_REGION_LENGTH__+0x24>
    ffba:	ab 2f       	mov	r26, r27
    ffbc:	be 2f       	mov	r27, r30
    ffbe:	f8 5f       	subi	r31, 0xF8	; 248
    ffc0:	d0 f3       	brcs	.-12     	; 0xffb6 <__DATA_REGION_LENGTH__+0x16>
    ffc2:	10 c0       	rjmp	.+32     	; 0xffe4 <__DATA_REGION_LENGTH__+0x44>
    ffc4:	ff 5f       	subi	r31, 0xFF	; 255
    ffc6:	70 f4       	brcc	.+28     	; 0xffe4 <__DATA_REGION_LENGTH__+0x44>
    ffc8:	a6 95       	lsr	r26
    ffca:	e0 f7       	brcc	.-8      	; 0xffc4 <__DATA_REGION_LENGTH__+0x24>
    ffcc:	f7 39       	cpi	r31, 0x97	; 151
    ffce:	50 f0       	brcs	.+20     	; 0xffe4 <__DATA_REGION_LENGTH__+0x44>
    ffd0:	19 f0       	breq	.+6      	; 0xffd8 <__DATA_REGION_LENGTH__+0x38>
    ffd2:	ff 3a       	cpi	r31, 0xAF	; 175
    ffd4:	38 f4       	brcc	.+14     	; 0xffe4 <__DATA_REGION_LENGTH__+0x44>
    ffd6:	9f 77       	andi	r25, 0x7F	; 127
    ffd8:	9f 93       	push	r25
    ffda:	0c d0       	rcall	.+24     	; 0xfff4 <__DATA_REGION_LENGTH__+0x54>
    ffdc:	0f 90       	pop	r0
    ffde:	07 fc       	sbrc	r0, 7
    ffe0:	90 58       	subi	r25, 0x80	; 128
    ffe2:	08 95       	ret
    ffe4:	3e f0       	brts	.+14     	; 0xfff4 <__DATA_REGION_LENGTH__+0x54>
    ffe6:	db ce       	rjmp	.-586    	; 0xfd9e <__fp_nan>
    ffe8:	60 e0       	ldi	r22, 0x00	; 0
    ffea:	70 e0       	ldi	r23, 0x00	; 0
    ffec:	80 e8       	ldi	r24, 0x80	; 128
    ffee:	9f e3       	ldi	r25, 0x3F	; 63
    fff0:	08 95       	ret
    fff2:	4f e7       	ldi	r20, 0x7F	; 127
    fff4:	9f 77       	andi	r25, 0x7F	; 127
    fff6:	5f 93       	push	r21
    fff8:	4f 93       	push	r20
    fffa:	3f 93       	push	r19
    fffc:	2f 93       	push	r18
    fffe:	c3 d0       	rcall	.+390    	; 0x10186 <log>
   10000:	2f 91       	pop	r18
   10002:	3f 91       	pop	r19
   10004:	4f 91       	pop	r20
   10006:	5f 91       	pop	r21
   10008:	52 df       	rcall	.-348    	; 0xfeae <__mulsf3>
   1000a:	0b c0       	rjmp	.+22     	; 0x10022 <exp>

0001000c <sin>:
   1000c:	9f 93       	push	r25
   1000e:	d9 de       	rcall	.-590    	; 0xfdc2 <__fp_rempio2>
   10010:	0f 90       	pop	r0
   10012:	07 fc       	sbrc	r0, 7
   10014:	ee 5f       	subi	r30, 0xFE	; 254
   10016:	0d cf       	rjmp	.-486    	; 0xfe32 <__fp_sinus>
   10018:	19 f4       	brne	.+6      	; 0x10020 <sin+0x14>
   1001a:	0e f0       	brts	.+2      	; 0x1001e <sin+0x12>
   1001c:	ba ce       	rjmp	.-652    	; 0xfd92 <__fp_inf>
   1001e:	3c cf       	rjmp	.-392    	; 0xfe98 <__fp_zero>
   10020:	be ce       	rjmp	.-644    	; 0xfd9e <__fp_nan>

00010022 <exp>:
   10022:	20 df       	rcall	.-448    	; 0xfe64 <__fp_splitA>
   10024:	c8 f3       	brcs	.-14     	; 0x10018 <sin+0xc>
   10026:	96 38       	cpi	r25, 0x86	; 134
   10028:	c0 f7       	brcc	.-16     	; 0x1001a <sin+0xe>
   1002a:	07 f8       	bld	r0, 7
   1002c:	0f 92       	push	r0
   1002e:	e8 94       	clt
   10030:	2b e3       	ldi	r18, 0x3B	; 59
   10032:	3a ea       	ldi	r19, 0xAA	; 170
   10034:	48 eb       	ldi	r20, 0xB8	; 184
   10036:	5f e7       	ldi	r21, 0x7F	; 127
   10038:	48 df       	rcall	.-368    	; 0xfeca <__mulsf3_pse>
   1003a:	0f 92       	push	r0
   1003c:	0f 92       	push	r0
   1003e:	0f 92       	push	r0
   10040:	4d b7       	in	r20, 0x3d	; 61
   10042:	5e b7       	in	r21, 0x3e	; 62
   10044:	0f 92       	push	r0
   10046:	df d0       	rcall	.+446    	; 0x10206 <modf>
   10048:	e6 e3       	ldi	r30, 0x36	; 54
   1004a:	f2 e0       	ldi	r31, 0x02	; 2
   1004c:	24 d0       	rcall	.+72     	; 0x10096 <__fp_powser>
   1004e:	4f 91       	pop	r20
   10050:	5f 91       	pop	r21
   10052:	ef 91       	pop	r30
   10054:	ff 91       	pop	r31
   10056:	e5 95       	asr	r30
   10058:	ee 1f       	adc	r30, r30
   1005a:	ff 1f       	adc	r31, r31
   1005c:	49 f0       	breq	.+18     	; 0x10070 <exp+0x4e>
   1005e:	fe 57       	subi	r31, 0x7E	; 126
   10060:	e0 68       	ori	r30, 0x80	; 128
   10062:	44 27       	eor	r20, r20
   10064:	ee 0f       	add	r30, r30
   10066:	44 1f       	adc	r20, r20
   10068:	fa 95       	dec	r31
   1006a:	e1 f7       	brne	.-8      	; 0x10064 <exp+0x42>
   1006c:	41 95       	neg	r20
   1006e:	55 0b       	sbc	r21, r21
   10070:	51 d0       	rcall	.+162    	; 0x10114 <ldexp>
   10072:	0f 90       	pop	r0
   10074:	07 fe       	sbrs	r0, 7
   10076:	45 c0       	rjmp	.+138    	; 0x10102 <inverse>
   10078:	08 95       	ret

0001007a <__fp_mpack>:
   1007a:	9f 3f       	cpi	r25, 0xFF	; 255
   1007c:	31 f0       	breq	.+12     	; 0x1008a <__fp_mpack_finite+0xc>

0001007e <__fp_mpack_finite>:
   1007e:	91 50       	subi	r25, 0x01	; 1
   10080:	20 f4       	brcc	.+8      	; 0x1008a <__fp_mpack_finite+0xc>
   10082:	87 95       	ror	r24
   10084:	77 95       	ror	r23
   10086:	67 95       	ror	r22
   10088:	b7 95       	ror	r27
   1008a:	88 0f       	add	r24, r24
   1008c:	91 1d       	adc	r25, r1
   1008e:	96 95       	lsr	r25
   10090:	87 95       	ror	r24
   10092:	97 f9       	bld	r25, 7
   10094:	08 95       	ret

00010096 <__fp_powser>:
   10096:	df 93       	push	r29
   10098:	cf 93       	push	r28
   1009a:	1f 93       	push	r17
   1009c:	0f 93       	push	r16
   1009e:	ff 92       	push	r15
   100a0:	ef 92       	push	r14
   100a2:	df 92       	push	r13
   100a4:	7b 01       	movw	r14, r22
   100a6:	8c 01       	movw	r16, r24
   100a8:	68 94       	set
   100aa:	05 c0       	rjmp	.+10     	; 0x100b6 <__fp_powser+0x20>
   100ac:	da 2e       	mov	r13, r26
   100ae:	ef 01       	movw	r28, r30
   100b0:	0a df       	rcall	.-492    	; 0xfec6 <__mulsf3x>
   100b2:	fe 01       	movw	r30, r28
   100b4:	e8 94       	clt
   100b6:	a5 91       	lpm	r26, Z+
   100b8:	25 91       	lpm	r18, Z+
   100ba:	35 91       	lpm	r19, Z+
   100bc:	45 91       	lpm	r20, Z+
   100be:	55 91       	lpm	r21, Z+
   100c0:	ae f3       	brts	.-22     	; 0x100ac <__fp_powser+0x16>
   100c2:	ef 01       	movw	r28, r30
   100c4:	12 dd       	rcall	.-1500   	; 0xfaea <__addsf3x>
   100c6:	fe 01       	movw	r30, r28
   100c8:	97 01       	movw	r18, r14
   100ca:	a8 01       	movw	r20, r16
   100cc:	da 94       	dec	r13
   100ce:	79 f7       	brne	.-34     	; 0x100ae <__fp_powser+0x18>
   100d0:	df 90       	pop	r13
   100d2:	ef 90       	pop	r14
   100d4:	ff 90       	pop	r15
   100d6:	0f 91       	pop	r16
   100d8:	1f 91       	pop	r17
   100da:	cf 91       	pop	r28
   100dc:	df 91       	pop	r29
   100de:	08 95       	ret

000100e0 <__fp_powsodd>:
   100e0:	9f 93       	push	r25
   100e2:	8f 93       	push	r24
   100e4:	7f 93       	push	r23
   100e6:	6f 93       	push	r22
   100e8:	ff 93       	push	r31
   100ea:	ef 93       	push	r30
   100ec:	9b 01       	movw	r18, r22
   100ee:	ac 01       	movw	r20, r24
   100f0:	de de       	rcall	.-580    	; 0xfeae <__mulsf3>
   100f2:	ef 91       	pop	r30
   100f4:	ff 91       	pop	r31
   100f6:	cf df       	rcall	.-98     	; 0x10096 <__fp_powser>
   100f8:	2f 91       	pop	r18
   100fa:	3f 91       	pop	r19
   100fc:	4f 91       	pop	r20
   100fe:	5f 91       	pop	r21
   10100:	d6 ce       	rjmp	.-596    	; 0xfeae <__mulsf3>

00010102 <inverse>:
   10102:	9b 01       	movw	r18, r22
   10104:	ac 01       	movw	r20, r24
   10106:	60 e0       	ldi	r22, 0x00	; 0
   10108:	70 e0       	ldi	r23, 0x00	; 0
   1010a:	80 e8       	ldi	r24, 0x80	; 128
   1010c:	9f e3       	ldi	r25, 0x3F	; 63
   1010e:	47 cd       	rjmp	.-1394   	; 0xfb9e <__divsf3>
   10110:	40 ce       	rjmp	.-896    	; 0xfd92 <__fp_inf>
   10112:	b3 cf       	rjmp	.-154    	; 0x1007a <__fp_mpack>

00010114 <ldexp>:
   10114:	a7 de       	rcall	.-690    	; 0xfe64 <__fp_splitA>
   10116:	e8 f3       	brcs	.-6      	; 0x10112 <inverse+0x10>
   10118:	99 23       	and	r25, r25
   1011a:	d9 f3       	breq	.-10     	; 0x10112 <inverse+0x10>
   1011c:	94 0f       	add	r25, r20
   1011e:	51 1d       	adc	r21, r1
   10120:	bb f3       	brvs	.-18     	; 0x10110 <inverse+0xe>
   10122:	91 50       	subi	r25, 0x01	; 1
   10124:	50 40       	sbci	r21, 0x00	; 0
   10126:	94 f0       	brlt	.+36     	; 0x1014c <ldexp+0x38>
   10128:	59 f0       	breq	.+22     	; 0x10140 <ldexp+0x2c>
   1012a:	88 23       	and	r24, r24
   1012c:	32 f0       	brmi	.+12     	; 0x1013a <ldexp+0x26>
   1012e:	66 0f       	add	r22, r22
   10130:	77 1f       	adc	r23, r23
   10132:	88 1f       	adc	r24, r24
   10134:	91 50       	subi	r25, 0x01	; 1
   10136:	50 40       	sbci	r21, 0x00	; 0
   10138:	c1 f7       	brne	.-16     	; 0x1012a <ldexp+0x16>
   1013a:	9e 3f       	cpi	r25, 0xFE	; 254
   1013c:	51 05       	cpc	r21, r1
   1013e:	44 f7       	brge	.-48     	; 0x10110 <inverse+0xe>
   10140:	88 0f       	add	r24, r24
   10142:	91 1d       	adc	r25, r1
   10144:	96 95       	lsr	r25
   10146:	87 95       	ror	r24
   10148:	97 f9       	bld	r25, 7
   1014a:	08 95       	ret
   1014c:	5f 3f       	cpi	r21, 0xFF	; 255
   1014e:	ac f0       	brlt	.+42     	; 0x1017a <ldexp+0x66>
   10150:	98 3e       	cpi	r25, 0xE8	; 232
   10152:	9c f0       	brlt	.+38     	; 0x1017a <ldexp+0x66>
   10154:	bb 27       	eor	r27, r27
   10156:	86 95       	lsr	r24
   10158:	77 95       	ror	r23
   1015a:	67 95       	ror	r22
   1015c:	b7 95       	ror	r27
   1015e:	08 f4       	brcc	.+2      	; 0x10162 <ldexp+0x4e>
   10160:	b1 60       	ori	r27, 0x01	; 1
   10162:	93 95       	inc	r25
   10164:	c1 f7       	brne	.-16     	; 0x10156 <ldexp+0x42>
   10166:	bb 0f       	add	r27, r27
   10168:	58 f7       	brcc	.-42     	; 0x10140 <ldexp+0x2c>
   1016a:	11 f4       	brne	.+4      	; 0x10170 <ldexp+0x5c>
   1016c:	60 ff       	sbrs	r22, 0
   1016e:	e8 cf       	rjmp	.-48     	; 0x10140 <ldexp+0x2c>
   10170:	6f 5f       	subi	r22, 0xFF	; 255
   10172:	7f 4f       	sbci	r23, 0xFF	; 255
   10174:	8f 4f       	sbci	r24, 0xFF	; 255
   10176:	9f 4f       	sbci	r25, 0xFF	; 255
   10178:	e3 cf       	rjmp	.-58     	; 0x10140 <ldexp+0x2c>
   1017a:	8f ce       	rjmp	.-738    	; 0xfe9a <__fp_szero>
   1017c:	0e f0       	brts	.+2      	; 0x10180 <ldexp+0x6c>
   1017e:	7d cf       	rjmp	.-262    	; 0x1007a <__fp_mpack>
   10180:	0e ce       	rjmp	.-996    	; 0xfd9e <__fp_nan>
   10182:	68 94       	set
   10184:	06 ce       	rjmp	.-1012   	; 0xfd92 <__fp_inf>

00010186 <log>:
   10186:	6e de       	rcall	.-804    	; 0xfe64 <__fp_splitA>
   10188:	c8 f3       	brcs	.-14     	; 0x1017c <ldexp+0x68>
   1018a:	99 23       	and	r25, r25
   1018c:	d1 f3       	breq	.-12     	; 0x10182 <ldexp+0x6e>
   1018e:	c6 f3       	brts	.-16     	; 0x10180 <ldexp+0x6c>
   10190:	df 93       	push	r29
   10192:	cf 93       	push	r28
   10194:	1f 93       	push	r17
   10196:	0f 93       	push	r16
   10198:	ff 92       	push	r15
   1019a:	c9 2f       	mov	r28, r25
   1019c:	dd 27       	eor	r29, r29
   1019e:	88 23       	and	r24, r24
   101a0:	2a f0       	brmi	.+10     	; 0x101ac <log+0x26>
   101a2:	21 97       	sbiw	r28, 0x01	; 1
   101a4:	66 0f       	add	r22, r22
   101a6:	77 1f       	adc	r23, r23
   101a8:	88 1f       	adc	r24, r24
   101aa:	da f7       	brpl	.-10     	; 0x101a2 <log+0x1c>
   101ac:	20 e0       	ldi	r18, 0x00	; 0
   101ae:	30 e0       	ldi	r19, 0x00	; 0
   101b0:	40 e8       	ldi	r20, 0x80	; 128
   101b2:	5f eb       	ldi	r21, 0xBF	; 191
   101b4:	9f e3       	ldi	r25, 0x3F	; 63
   101b6:	88 39       	cpi	r24, 0x98	; 152
   101b8:	20 f0       	brcs	.+8      	; 0x101c2 <log+0x3c>
   101ba:	80 3e       	cpi	r24, 0xE0	; 224
   101bc:	30 f0       	brcs	.+12     	; 0x101ca <log+0x44>
   101be:	21 96       	adiw	r28, 0x01	; 1
   101c0:	8f 77       	andi	r24, 0x7F	; 127
   101c2:	82 dc       	rcall	.-1788   	; 0xfac8 <__addsf3>
   101c4:	ee e5       	ldi	r30, 0x5E	; 94
   101c6:	f2 e0       	ldi	r31, 0x02	; 2
   101c8:	03 c0       	rjmp	.+6      	; 0x101d0 <log+0x4a>
   101ca:	7e dc       	rcall	.-1796   	; 0xfac8 <__addsf3>
   101cc:	eb e8       	ldi	r30, 0x8B	; 139
   101ce:	f2 e0       	ldi	r31, 0x02	; 2
   101d0:	62 df       	rcall	.-316    	; 0x10096 <__fp_powser>
   101d2:	8b 01       	movw	r16, r22
   101d4:	be 01       	movw	r22, r28
   101d6:	ec 01       	movw	r28, r24
   101d8:	fb 2e       	mov	r15, r27
   101da:	6f 57       	subi	r22, 0x7F	; 127
   101dc:	71 09       	sbc	r23, r1
   101de:	75 95       	asr	r23
   101e0:	77 1f       	adc	r23, r23
   101e2:	88 0b       	sbc	r24, r24
   101e4:	99 0b       	sbc	r25, r25
   101e6:	76 dd       	rcall	.-1300   	; 0xfcd4 <__floatsisf>
   101e8:	28 e1       	ldi	r18, 0x18	; 24
   101ea:	32 e7       	ldi	r19, 0x72	; 114
   101ec:	41 e3       	ldi	r20, 0x31	; 49
   101ee:	5f e3       	ldi	r21, 0x3F	; 63
   101f0:	6a de       	rcall	.-812    	; 0xfec6 <__mulsf3x>
   101f2:	af 2d       	mov	r26, r15
   101f4:	98 01       	movw	r18, r16
   101f6:	ae 01       	movw	r20, r28
   101f8:	ff 90       	pop	r15
   101fa:	0f 91       	pop	r16
   101fc:	1f 91       	pop	r17
   101fe:	cf 91       	pop	r28
   10200:	df 91       	pop	r29
   10202:	73 dc       	rcall	.-1818   	; 0xfaea <__addsf3x>
   10204:	05 ce       	rjmp	.-1014   	; 0xfe10 <__fp_round>

00010206 <modf>:
   10206:	fa 01       	movw	r30, r20
   10208:	dc 01       	movw	r26, r24
   1020a:	aa 0f       	add	r26, r26
   1020c:	bb 1f       	adc	r27, r27
   1020e:	9b 01       	movw	r18, r22
   10210:	ac 01       	movw	r20, r24
   10212:	bf 57       	subi	r27, 0x7F	; 127
   10214:	28 f4       	brcc	.+10     	; 0x10220 <modf+0x1a>
   10216:	22 27       	eor	r18, r18
   10218:	33 27       	eor	r19, r19
   1021a:	44 27       	eor	r20, r20
   1021c:	50 78       	andi	r21, 0x80	; 128
   1021e:	1f c0       	rjmp	.+62     	; 0x1025e <modf+0x58>
   10220:	b7 51       	subi	r27, 0x17	; 23
   10222:	88 f4       	brcc	.+34     	; 0x10246 <modf+0x40>
   10224:	ab 2f       	mov	r26, r27
   10226:	00 24       	eor	r0, r0
   10228:	46 95       	lsr	r20
   1022a:	37 95       	ror	r19
   1022c:	27 95       	ror	r18
   1022e:	01 1c       	adc	r0, r1
   10230:	a3 95       	inc	r26
   10232:	d2 f3       	brmi	.-12     	; 0x10228 <modf+0x22>
   10234:	00 20       	and	r0, r0
   10236:	69 f0       	breq	.+26     	; 0x10252 <modf+0x4c>
   10238:	22 0f       	add	r18, r18
   1023a:	33 1f       	adc	r19, r19
   1023c:	44 1f       	adc	r20, r20
   1023e:	b3 95       	inc	r27
   10240:	da f3       	brmi	.-10     	; 0x10238 <modf+0x32>
   10242:	0d d0       	rcall	.+26     	; 0x1025e <modf+0x58>
   10244:	40 cc       	rjmp	.-1920   	; 0xfac6 <__subsf3>
   10246:	61 30       	cpi	r22, 0x01	; 1
   10248:	71 05       	cpc	r23, r1
   1024a:	a0 e8       	ldi	r26, 0x80	; 128
   1024c:	8a 07       	cpc	r24, r26
   1024e:	b9 46       	sbci	r27, 0x69	; 105
   10250:	30 f4       	brcc	.+12     	; 0x1025e <modf+0x58>
   10252:	9b 01       	movw	r18, r22
   10254:	ac 01       	movw	r20, r24
   10256:	66 27       	eor	r22, r22
   10258:	77 27       	eor	r23, r23
   1025a:	88 27       	eor	r24, r24
   1025c:	90 78       	andi	r25, 0x80	; 128
   1025e:	30 96       	adiw	r30, 0x00	; 0
   10260:	21 f0       	breq	.+8      	; 0x1026a <modf+0x64>
   10262:	20 83       	st	Z, r18
   10264:	31 83       	std	Z+1, r19	; 0x01
   10266:	42 83       	std	Z+2, r20	; 0x02
   10268:	53 83       	std	Z+3, r21	; 0x03
   1026a:	08 95       	ret

0001026c <__mulsi3>:
   1026c:	db 01       	movw	r26, r22
   1026e:	8f 93       	push	r24
   10270:	9f 93       	push	r25
   10272:	93 d0       	rcall	.+294    	; 0x1039a <__muluhisi3>
   10274:	bf 91       	pop	r27
   10276:	af 91       	pop	r26
   10278:	a2 9f       	mul	r26, r18
   1027a:	80 0d       	add	r24, r0
   1027c:	91 1d       	adc	r25, r1
   1027e:	a3 9f       	mul	r26, r19
   10280:	90 0d       	add	r25, r0
   10282:	b2 9f       	mul	r27, r18
   10284:	90 0d       	add	r25, r0
   10286:	11 24       	eor	r1, r1
   10288:	08 95       	ret

0001028a <__udivmodhi4>:
   1028a:	aa 1b       	sub	r26, r26
   1028c:	bb 1b       	sub	r27, r27
   1028e:	51 e1       	ldi	r21, 0x11	; 17
   10290:	07 c0       	rjmp	.+14     	; 0x102a0 <__udivmodhi4_ep>

00010292 <__udivmodhi4_loop>:
   10292:	aa 1f       	adc	r26, r26
   10294:	bb 1f       	adc	r27, r27
   10296:	a6 17       	cp	r26, r22
   10298:	b7 07       	cpc	r27, r23
   1029a:	10 f0       	brcs	.+4      	; 0x102a0 <__udivmodhi4_ep>
   1029c:	a6 1b       	sub	r26, r22
   1029e:	b7 0b       	sbc	r27, r23

000102a0 <__udivmodhi4_ep>:
   102a0:	88 1f       	adc	r24, r24
   102a2:	99 1f       	adc	r25, r25
   102a4:	5a 95       	dec	r21
   102a6:	a9 f7       	brne	.-22     	; 0x10292 <__udivmodhi4_loop>
   102a8:	80 95       	com	r24
   102aa:	90 95       	com	r25
   102ac:	bc 01       	movw	r22, r24
   102ae:	cd 01       	movw	r24, r26
   102b0:	08 95       	ret

000102b2 <__divmodhi4>:
   102b2:	97 fb       	bst	r25, 7
   102b4:	07 2e       	mov	r0, r23
   102b6:	16 f4       	brtc	.+4      	; 0x102bc <__divmodhi4+0xa>
   102b8:	00 94       	com	r0
   102ba:	06 d0       	rcall	.+12     	; 0x102c8 <__divmodhi4_neg1>
   102bc:	77 fd       	sbrc	r23, 7
   102be:	08 d0       	rcall	.+16     	; 0x102d0 <__divmodhi4_neg2>
   102c0:	e4 df       	rcall	.-56     	; 0x1028a <__udivmodhi4>
   102c2:	07 fc       	sbrc	r0, 7
   102c4:	05 d0       	rcall	.+10     	; 0x102d0 <__divmodhi4_neg2>
   102c6:	3e f4       	brtc	.+14     	; 0x102d6 <__divmodhi4_exit>

000102c8 <__divmodhi4_neg1>:
   102c8:	90 95       	com	r25
   102ca:	81 95       	neg	r24
   102cc:	9f 4f       	sbci	r25, 0xFF	; 255
   102ce:	08 95       	ret

000102d0 <__divmodhi4_neg2>:
   102d0:	70 95       	com	r23
   102d2:	61 95       	neg	r22
   102d4:	7f 4f       	sbci	r23, 0xFF	; 255

000102d6 <__divmodhi4_exit>:
   102d6:	08 95       	ret

000102d8 <__udivmodsi4>:
   102d8:	a1 e2       	ldi	r26, 0x21	; 33
   102da:	1a 2e       	mov	r1, r26
   102dc:	aa 1b       	sub	r26, r26
   102de:	bb 1b       	sub	r27, r27
   102e0:	fd 01       	movw	r30, r26
   102e2:	0d c0       	rjmp	.+26     	; 0x102fe <__udivmodsi4_ep>

000102e4 <__udivmodsi4_loop>:
   102e4:	aa 1f       	adc	r26, r26
   102e6:	bb 1f       	adc	r27, r27
   102e8:	ee 1f       	adc	r30, r30
   102ea:	ff 1f       	adc	r31, r31
   102ec:	a2 17       	cp	r26, r18
   102ee:	b3 07       	cpc	r27, r19
   102f0:	e4 07       	cpc	r30, r20
   102f2:	f5 07       	cpc	r31, r21
   102f4:	20 f0       	brcs	.+8      	; 0x102fe <__udivmodsi4_ep>
   102f6:	a2 1b       	sub	r26, r18
   102f8:	b3 0b       	sbc	r27, r19
   102fa:	e4 0b       	sbc	r30, r20
   102fc:	f5 0b       	sbc	r31, r21

000102fe <__udivmodsi4_ep>:
   102fe:	66 1f       	adc	r22, r22
   10300:	77 1f       	adc	r23, r23
   10302:	88 1f       	adc	r24, r24
   10304:	99 1f       	adc	r25, r25
   10306:	1a 94       	dec	r1
   10308:	69 f7       	brne	.-38     	; 0x102e4 <__udivmodsi4_loop>
   1030a:	60 95       	com	r22
   1030c:	70 95       	com	r23
   1030e:	80 95       	com	r24
   10310:	90 95       	com	r25
   10312:	9b 01       	movw	r18, r22
   10314:	ac 01       	movw	r20, r24
   10316:	bd 01       	movw	r22, r26
   10318:	cf 01       	movw	r24, r30
   1031a:	08 95       	ret

0001031c <__divmodsi4>:
   1031c:	05 2e       	mov	r0, r21
   1031e:	97 fb       	bst	r25, 7
   10320:	16 f4       	brtc	.+4      	; 0x10326 <__divmodsi4+0xa>
   10322:	00 94       	com	r0
   10324:	0f d0       	rcall	.+30     	; 0x10344 <__negsi2>
   10326:	57 fd       	sbrc	r21, 7
   10328:	05 d0       	rcall	.+10     	; 0x10334 <__divmodsi4_neg2>
   1032a:	d6 df       	rcall	.-84     	; 0x102d8 <__udivmodsi4>
   1032c:	07 fc       	sbrc	r0, 7
   1032e:	02 d0       	rcall	.+4      	; 0x10334 <__divmodsi4_neg2>
   10330:	46 f4       	brtc	.+16     	; 0x10342 <__divmodsi4_exit>
   10332:	08 c0       	rjmp	.+16     	; 0x10344 <__negsi2>

00010334 <__divmodsi4_neg2>:
   10334:	50 95       	com	r21
   10336:	40 95       	com	r20
   10338:	30 95       	com	r19
   1033a:	21 95       	neg	r18
   1033c:	3f 4f       	sbci	r19, 0xFF	; 255
   1033e:	4f 4f       	sbci	r20, 0xFF	; 255
   10340:	5f 4f       	sbci	r21, 0xFF	; 255

00010342 <__divmodsi4_exit>:
   10342:	08 95       	ret

00010344 <__negsi2>:
   10344:	90 95       	com	r25
   10346:	80 95       	com	r24
   10348:	70 95       	com	r23
   1034a:	61 95       	neg	r22
   1034c:	7f 4f       	sbci	r23, 0xFF	; 255
   1034e:	8f 4f       	sbci	r24, 0xFF	; 255
   10350:	9f 4f       	sbci	r25, 0xFF	; 255
   10352:	08 95       	ret

00010354 <__tablejump2__>:
   10354:	ee 0f       	add	r30, r30
   10356:	ff 1f       	adc	r31, r31
   10358:	88 1f       	adc	r24, r24
   1035a:	8b bf       	out	0x3b, r24	; 59
   1035c:	07 90       	elpm	r0, Z+
   1035e:	f6 91       	elpm	r31, Z
   10360:	e0 2d       	mov	r30, r0
   10362:	19 94       	eijmp

00010364 <__mulhisi3>:
   10364:	05 d0       	rcall	.+10     	; 0x10370 <__umulhisi3>
   10366:	33 23       	and	r19, r19
   10368:	12 f4       	brpl	.+4      	; 0x1036e <__mulhisi3+0xa>
   1036a:	8a 1b       	sub	r24, r26
   1036c:	9b 0b       	sbc	r25, r27
   1036e:	10 c0       	rjmp	.+32     	; 0x10390 <__usmulhisi3_tail>

00010370 <__umulhisi3>:
   10370:	a2 9f       	mul	r26, r18
   10372:	b0 01       	movw	r22, r0
   10374:	b3 9f       	mul	r27, r19
   10376:	c0 01       	movw	r24, r0
   10378:	a3 9f       	mul	r26, r19
   1037a:	70 0d       	add	r23, r0
   1037c:	81 1d       	adc	r24, r1
   1037e:	11 24       	eor	r1, r1
   10380:	91 1d       	adc	r25, r1
   10382:	b2 9f       	mul	r27, r18
   10384:	70 0d       	add	r23, r0
   10386:	81 1d       	adc	r24, r1
   10388:	11 24       	eor	r1, r1
   1038a:	91 1d       	adc	r25, r1
   1038c:	08 95       	ret

0001038e <__usmulhisi3>:
   1038e:	f0 df       	rcall	.-32     	; 0x10370 <__umulhisi3>

00010390 <__usmulhisi3_tail>:
   10390:	b7 ff       	sbrs	r27, 7
   10392:	08 95       	ret
   10394:	82 1b       	sub	r24, r18
   10396:	93 0b       	sbc	r25, r19
   10398:	08 95       	ret

0001039a <__muluhisi3>:
   1039a:	ea df       	rcall	.-44     	; 0x10370 <__umulhisi3>
   1039c:	a5 9f       	mul	r26, r21
   1039e:	90 0d       	add	r25, r0
   103a0:	b4 9f       	mul	r27, r20
   103a2:	90 0d       	add	r25, r0
   103a4:	a4 9f       	mul	r26, r20
   103a6:	80 0d       	add	r24, r0
   103a8:	91 1d       	adc	r25, r1
   103aa:	11 24       	eor	r1, r1
   103ac:	08 95       	ret

000103ae <__muldi3>:
   103ae:	df 93       	push	r29
   103b0:	cf 93       	push	r28
   103b2:	1f 93       	push	r17
   103b4:	0f 93       	push	r16
   103b6:	9a 9d       	mul	r25, r10
   103b8:	f0 2d       	mov	r31, r0
   103ba:	21 9f       	mul	r18, r17
   103bc:	f0 0d       	add	r31, r0
   103be:	8b 9d       	mul	r24, r11
   103c0:	f0 0d       	add	r31, r0
   103c2:	8a 9d       	mul	r24, r10
   103c4:	e0 2d       	mov	r30, r0
   103c6:	f1 0d       	add	r31, r1
   103c8:	03 9f       	mul	r16, r19
   103ca:	f0 0d       	add	r31, r0
   103cc:	02 9f       	mul	r16, r18
   103ce:	e0 0d       	add	r30, r0
   103d0:	f1 1d       	adc	r31, r1
   103d2:	4e 9d       	mul	r20, r14
   103d4:	e0 0d       	add	r30, r0
   103d6:	f1 1d       	adc	r31, r1
   103d8:	5e 9d       	mul	r21, r14
   103da:	f0 0d       	add	r31, r0
   103dc:	4f 9d       	mul	r20, r15
   103de:	f0 0d       	add	r31, r0
   103e0:	7f 93       	push	r23
   103e2:	6f 93       	push	r22
   103e4:	bf 92       	push	r11
   103e6:	af 92       	push	r10
   103e8:	5f 93       	push	r21
   103ea:	4f 93       	push	r20
   103ec:	d5 01       	movw	r26, r10
   103ee:	c0 df       	rcall	.-128    	; 0x10370 <__umulhisi3>
   103f0:	8b 01       	movw	r16, r22
   103f2:	ac 01       	movw	r20, r24
   103f4:	d7 01       	movw	r26, r14
   103f6:	bc df       	rcall	.-136    	; 0x10370 <__umulhisi3>
   103f8:	eb 01       	movw	r28, r22
   103fa:	e8 0f       	add	r30, r24
   103fc:	f9 1f       	adc	r31, r25
   103fe:	d6 01       	movw	r26, r12
   10400:	1f d0       	rcall	.+62     	; 0x10440 <__muldi3_6>
   10402:	2f 91       	pop	r18
   10404:	3f 91       	pop	r19
   10406:	d6 01       	movw	r26, r12
   10408:	b3 df       	rcall	.-154    	; 0x10370 <__umulhisi3>
   1040a:	c6 0f       	add	r28, r22
   1040c:	d7 1f       	adc	r29, r23
   1040e:	e8 1f       	adc	r30, r24
   10410:	f9 1f       	adc	r31, r25
   10412:	af 91       	pop	r26
   10414:	bf 91       	pop	r27
   10416:	14 d0       	rcall	.+40     	; 0x10440 <__muldi3_6>
   10418:	2f 91       	pop	r18
   1041a:	3f 91       	pop	r19
   1041c:	a9 df       	rcall	.-174    	; 0x10370 <__umulhisi3>
   1041e:	c6 0f       	add	r28, r22
   10420:	d7 1f       	adc	r29, r23
   10422:	e8 1f       	adc	r30, r24
   10424:	f9 1f       	adc	r31, r25
   10426:	d6 01       	movw	r26, r12
   10428:	a3 df       	rcall	.-186    	; 0x10370 <__umulhisi3>
   1042a:	e6 0f       	add	r30, r22
   1042c:	f7 1f       	adc	r31, r23
   1042e:	98 01       	movw	r18, r16
   10430:	be 01       	movw	r22, r28
   10432:	cf 01       	movw	r24, r30
   10434:	11 24       	eor	r1, r1
   10436:	0f 91       	pop	r16
   10438:	1f 91       	pop	r17
   1043a:	cf 91       	pop	r28
   1043c:	df 91       	pop	r29
   1043e:	08 95       	ret

00010440 <__muldi3_6>:
   10440:	97 df       	rcall	.-210    	; 0x10370 <__umulhisi3>
   10442:	46 0f       	add	r20, r22
   10444:	57 1f       	adc	r21, r23
   10446:	c8 1f       	adc	r28, r24
   10448:	d9 1f       	adc	r29, r25
   1044a:	08 f4       	brcc	.+2      	; 0x1044e <__muldi3_6+0xe>
   1044c:	31 96       	adiw	r30, 0x01	; 1
   1044e:	08 95       	ret

00010450 <__moddi3>:
   10450:	68 94       	set
   10452:	01 c0       	rjmp	.+2      	; 0x10456 <__divdi3_moddi3>

00010454 <__divdi3>:
   10454:	e8 94       	clt

00010456 <__divdi3_moddi3>:
   10456:	f9 2f       	mov	r31, r25
   10458:	f1 2b       	or	r31, r17
   1045a:	0a f0       	brmi	.+2      	; 0x1045e <__divdi3_moddi3+0x8>
   1045c:	27 c0       	rjmp	.+78     	; 0x104ac <__udivdi3_umoddi3>
   1045e:	a0 e0       	ldi	r26, 0x00	; 0
   10460:	b0 e0       	ldi	r27, 0x00	; 0
   10462:	e4 e3       	ldi	r30, 0x34	; 52
   10464:	f2 e8       	ldi	r31, 0x82	; 130
   10466:	93 c0       	rjmp	.+294    	; 0x1058e <__prologue_saves__+0xc>
   10468:	09 2e       	mov	r0, r25
   1046a:	05 94       	asr	r0
   1046c:	1a f4       	brpl	.+6      	; 0x10474 <__divdi3_moddi3+0x1e>
   1046e:	79 d0       	rcall	.+242    	; 0x10562 <__negdi2>
   10470:	11 23       	and	r17, r17
   10472:	92 f4       	brpl	.+36     	; 0x10498 <__divdi3_moddi3+0x42>
   10474:	f0 e8       	ldi	r31, 0x80	; 128
   10476:	0f 26       	eor	r0, r31
   10478:	ff ef       	ldi	r31, 0xFF	; 255
   1047a:	e0 94       	com	r14
   1047c:	f0 94       	com	r15
   1047e:	00 95       	com	r16
   10480:	10 95       	com	r17
   10482:	b0 94       	com	r11
   10484:	c0 94       	com	r12
   10486:	d0 94       	com	r13
   10488:	a1 94       	neg	r10
   1048a:	bf 0a       	sbc	r11, r31
   1048c:	cf 0a       	sbc	r12, r31
   1048e:	df 0a       	sbc	r13, r31
   10490:	ef 0a       	sbc	r14, r31
   10492:	ff 0a       	sbc	r15, r31
   10494:	0f 0b       	sbc	r16, r31
   10496:	1f 0b       	sbc	r17, r31
   10498:	13 d0       	rcall	.+38     	; 0x104c0 <__udivmod64>
   1049a:	07 fc       	sbrc	r0, 7
   1049c:	62 d0       	rcall	.+196    	; 0x10562 <__negdi2>
   1049e:	cd b7       	in	r28, 0x3d	; 61
   104a0:	de b7       	in	r29, 0x3e	; 62
   104a2:	ec e0       	ldi	r30, 0x0C	; 12
   104a4:	8d c0       	rjmp	.+282    	; 0x105c0 <__epilogue_restores__+0xc>

000104a6 <__umoddi3>:
   104a6:	68 94       	set
   104a8:	01 c0       	rjmp	.+2      	; 0x104ac <__udivdi3_umoddi3>

000104aa <__udivdi3>:
   104aa:	e8 94       	clt

000104ac <__udivdi3_umoddi3>:
   104ac:	8f 92       	push	r8
   104ae:	9f 92       	push	r9
   104b0:	cf 93       	push	r28
   104b2:	df 93       	push	r29
   104b4:	05 d0       	rcall	.+10     	; 0x104c0 <__udivmod64>
   104b6:	df 91       	pop	r29
   104b8:	cf 91       	pop	r28
   104ba:	9f 90       	pop	r9
   104bc:	8f 90       	pop	r8
   104be:	08 95       	ret

000104c0 <__udivmod64>:
   104c0:	88 24       	eor	r8, r8
   104c2:	99 24       	eor	r9, r9
   104c4:	f4 01       	movw	r30, r8
   104c6:	e4 01       	movw	r28, r8
   104c8:	b0 e4       	ldi	r27, 0x40	; 64
   104ca:	9f 93       	push	r25
   104cc:	aa 27       	eor	r26, r26
   104ce:	9a 15       	cp	r25, r10
   104d0:	8b 04       	cpc	r8, r11
   104d2:	9c 04       	cpc	r9, r12
   104d4:	ed 05       	cpc	r30, r13
   104d6:	fe 05       	cpc	r31, r14
   104d8:	cf 05       	cpc	r28, r15
   104da:	d0 07       	cpc	r29, r16
   104dc:	a1 07       	cpc	r26, r17
   104de:	98 f4       	brcc	.+38     	; 0x10506 <__udivmod64+0x46>
   104e0:	ad 2f       	mov	r26, r29
   104e2:	dc 2f       	mov	r29, r28
   104e4:	cf 2f       	mov	r28, r31
   104e6:	fe 2f       	mov	r31, r30
   104e8:	e9 2d       	mov	r30, r9
   104ea:	98 2c       	mov	r9, r8
   104ec:	89 2e       	mov	r8, r25
   104ee:	98 2f       	mov	r25, r24
   104f0:	87 2f       	mov	r24, r23
   104f2:	76 2f       	mov	r23, r22
   104f4:	65 2f       	mov	r22, r21
   104f6:	54 2f       	mov	r21, r20
   104f8:	43 2f       	mov	r20, r19
   104fa:	32 2f       	mov	r19, r18
   104fc:	22 27       	eor	r18, r18
   104fe:	b8 50       	subi	r27, 0x08	; 8
   10500:	31 f7       	brne	.-52     	; 0x104ce <__udivmod64+0xe>
   10502:	bf 91       	pop	r27
   10504:	27 c0       	rjmp	.+78     	; 0x10554 <__udivmod64+0x94>
   10506:	1b 2e       	mov	r1, r27
   10508:	bf 91       	pop	r27
   1050a:	bb 27       	eor	r27, r27
   1050c:	22 0f       	add	r18, r18
   1050e:	33 1f       	adc	r19, r19
   10510:	44 1f       	adc	r20, r20
   10512:	55 1f       	adc	r21, r21
   10514:	66 1f       	adc	r22, r22
   10516:	77 1f       	adc	r23, r23
   10518:	88 1f       	adc	r24, r24
   1051a:	99 1f       	adc	r25, r25
   1051c:	88 1c       	adc	r8, r8
   1051e:	99 1c       	adc	r9, r9
   10520:	ee 1f       	adc	r30, r30
   10522:	ff 1f       	adc	r31, r31
   10524:	cc 1f       	adc	r28, r28
   10526:	dd 1f       	adc	r29, r29
   10528:	aa 1f       	adc	r26, r26
   1052a:	bb 1f       	adc	r27, r27
   1052c:	8a 14       	cp	r8, r10
   1052e:	9b 04       	cpc	r9, r11
   10530:	ec 05       	cpc	r30, r12
   10532:	fd 05       	cpc	r31, r13
   10534:	ce 05       	cpc	r28, r14
   10536:	df 05       	cpc	r29, r15
   10538:	a0 07       	cpc	r26, r16
   1053a:	b1 07       	cpc	r27, r17
   1053c:	48 f0       	brcs	.+18     	; 0x10550 <__udivmod64+0x90>
   1053e:	8a 18       	sub	r8, r10
   10540:	9b 08       	sbc	r9, r11
   10542:	ec 09       	sbc	r30, r12
   10544:	fd 09       	sbc	r31, r13
   10546:	ce 09       	sbc	r28, r14
   10548:	df 09       	sbc	r29, r15
   1054a:	a0 0b       	sbc	r26, r16
   1054c:	b1 0b       	sbc	r27, r17
   1054e:	21 60       	ori	r18, 0x01	; 1
   10550:	1a 94       	dec	r1
   10552:	e1 f6       	brne	.-72     	; 0x1050c <__udivmod64+0x4c>
   10554:	2e f4       	brtc	.+10     	; 0x10560 <__udivmod64+0xa0>
   10556:	94 01       	movw	r18, r8
   10558:	af 01       	movw	r20, r30
   1055a:	be 01       	movw	r22, r28
   1055c:	cd 01       	movw	r24, r26
   1055e:	00 0c       	add	r0, r0
   10560:	08 95       	ret

00010562 <__negdi2>:
   10562:	60 95       	com	r22
   10564:	70 95       	com	r23
   10566:	80 95       	com	r24
   10568:	90 95       	com	r25
   1056a:	30 95       	com	r19
   1056c:	40 95       	com	r20
   1056e:	50 95       	com	r21
   10570:	21 95       	neg	r18
   10572:	3f 4f       	sbci	r19, 0xFF	; 255
   10574:	4f 4f       	sbci	r20, 0xFF	; 255
   10576:	5f 4f       	sbci	r21, 0xFF	; 255
   10578:	6f 4f       	sbci	r22, 0xFF	; 255
   1057a:	7f 4f       	sbci	r23, 0xFF	; 255
   1057c:	8f 4f       	sbci	r24, 0xFF	; 255
   1057e:	9f 4f       	sbci	r25, 0xFF	; 255
   10580:	08 95       	ret

00010582 <__prologue_saves__>:
   10582:	2f 92       	push	r2
   10584:	3f 92       	push	r3
   10586:	4f 92       	push	r4
   10588:	5f 92       	push	r5
   1058a:	6f 92       	push	r6
   1058c:	7f 92       	push	r7
   1058e:	8f 92       	push	r8
   10590:	9f 92       	push	r9
   10592:	af 92       	push	r10
   10594:	bf 92       	push	r11
   10596:	cf 92       	push	r12
   10598:	df 92       	push	r13
   1059a:	ef 92       	push	r14
   1059c:	ff 92       	push	r15
   1059e:	0f 93       	push	r16
   105a0:	1f 93       	push	r17
   105a2:	cf 93       	push	r28
   105a4:	df 93       	push	r29
   105a6:	cd b7       	in	r28, 0x3d	; 61
   105a8:	de b7       	in	r29, 0x3e	; 62
   105aa:	ca 1b       	sub	r28, r26
   105ac:	db 0b       	sbc	r29, r27
   105ae:	cd bf       	out	0x3d, r28	; 61
   105b0:	de bf       	out	0x3e, r29	; 62
   105b2:	19 94       	eijmp

000105b4 <__epilogue_restores__>:
   105b4:	2a 88       	ldd	r2, Y+18	; 0x12
   105b6:	39 88       	ldd	r3, Y+17	; 0x11
   105b8:	48 88       	ldd	r4, Y+16	; 0x10
   105ba:	5f 84       	ldd	r5, Y+15	; 0x0f
   105bc:	6e 84       	ldd	r6, Y+14	; 0x0e
   105be:	7d 84       	ldd	r7, Y+13	; 0x0d
   105c0:	8c 84       	ldd	r8, Y+12	; 0x0c
   105c2:	9b 84       	ldd	r9, Y+11	; 0x0b
   105c4:	aa 84       	ldd	r10, Y+10	; 0x0a
   105c6:	b9 84       	ldd	r11, Y+9	; 0x09
   105c8:	c8 84       	ldd	r12, Y+8	; 0x08
   105ca:	df 80       	ldd	r13, Y+7	; 0x07
   105cc:	ee 80       	ldd	r14, Y+6	; 0x06
   105ce:	fd 80       	ldd	r15, Y+5	; 0x05
   105d0:	0c 81       	ldd	r16, Y+4	; 0x04
   105d2:	1b 81       	ldd	r17, Y+3	; 0x03
   105d4:	aa 81       	ldd	r26, Y+2	; 0x02
   105d6:	b9 81       	ldd	r27, Y+1	; 0x01
   105d8:	ce 0f       	add	r28, r30
   105da:	d1 1d       	adc	r29, r1
   105dc:	cd bf       	out	0x3d, r28	; 61
   105de:	de bf       	out	0x3e, r29	; 62
   105e0:	ed 01       	movw	r28, r26
   105e2:	08 95       	ret

000105e4 <__ashldi3>:
   105e4:	0f 93       	push	r16
   105e6:	08 30       	cpi	r16, 0x08	; 8
   105e8:	90 f0       	brcs	.+36     	; 0x1060e <__ashldi3+0x2a>
   105ea:	98 2f       	mov	r25, r24
   105ec:	87 2f       	mov	r24, r23
   105ee:	76 2f       	mov	r23, r22
   105f0:	65 2f       	mov	r22, r21
   105f2:	54 2f       	mov	r21, r20
   105f4:	43 2f       	mov	r20, r19
   105f6:	32 2f       	mov	r19, r18
   105f8:	22 27       	eor	r18, r18
   105fa:	08 50       	subi	r16, 0x08	; 8
   105fc:	f4 cf       	rjmp	.-24     	; 0x105e6 <__ashldi3+0x2>
   105fe:	22 0f       	add	r18, r18
   10600:	33 1f       	adc	r19, r19
   10602:	44 1f       	adc	r20, r20
   10604:	55 1f       	adc	r21, r21
   10606:	66 1f       	adc	r22, r22
   10608:	77 1f       	adc	r23, r23
   1060a:	88 1f       	adc	r24, r24
   1060c:	99 1f       	adc	r25, r25
   1060e:	0a 95       	dec	r16
   10610:	b2 f7       	brpl	.-20     	; 0x105fe <__ashldi3+0x1a>
   10612:	0f 91       	pop	r16
   10614:	08 95       	ret

00010616 <__ashrdi3>:
   10616:	97 fb       	bst	r25, 7
   10618:	10 f8       	bld	r1, 0

0001061a <__lshrdi3>:
   1061a:	16 94       	lsr	r1
   1061c:	00 08       	sbc	r0, r0
   1061e:	0f 93       	push	r16
   10620:	08 30       	cpi	r16, 0x08	; 8
   10622:	98 f0       	brcs	.+38     	; 0x1064a <__lshrdi3+0x30>
   10624:	08 50       	subi	r16, 0x08	; 8
   10626:	23 2f       	mov	r18, r19
   10628:	34 2f       	mov	r19, r20
   1062a:	45 2f       	mov	r20, r21
   1062c:	56 2f       	mov	r21, r22
   1062e:	67 2f       	mov	r22, r23
   10630:	78 2f       	mov	r23, r24
   10632:	89 2f       	mov	r24, r25
   10634:	90 2d       	mov	r25, r0
   10636:	f4 cf       	rjmp	.-24     	; 0x10620 <__lshrdi3+0x6>
   10638:	05 94       	asr	r0
   1063a:	97 95       	ror	r25
   1063c:	87 95       	ror	r24
   1063e:	77 95       	ror	r23
   10640:	67 95       	ror	r22
   10642:	57 95       	ror	r21
   10644:	47 95       	ror	r20
   10646:	37 95       	ror	r19
   10648:	27 95       	ror	r18
   1064a:	0a 95       	dec	r16
   1064c:	aa f7       	brpl	.-22     	; 0x10638 <__lshrdi3+0x1e>
   1064e:	0f 91       	pop	r16
   10650:	08 95       	ret

00010652 <__adddi3>:
   10652:	2a 0d       	add	r18, r10
   10654:	3b 1d       	adc	r19, r11
   10656:	4c 1d       	adc	r20, r12
   10658:	5d 1d       	adc	r21, r13
   1065a:	6e 1d       	adc	r22, r14
   1065c:	7f 1d       	adc	r23, r15
   1065e:	80 1f       	adc	r24, r16
   10660:	91 1f       	adc	r25, r17
   10662:	08 95       	ret

00010664 <__adddi3_s8>:
   10664:	00 24       	eor	r0, r0
   10666:	a7 fd       	sbrc	r26, 7
   10668:	00 94       	com	r0
   1066a:	2a 0f       	add	r18, r26
   1066c:	30 1d       	adc	r19, r0
   1066e:	40 1d       	adc	r20, r0
   10670:	50 1d       	adc	r21, r0
   10672:	60 1d       	adc	r22, r0
   10674:	70 1d       	adc	r23, r0
   10676:	80 1d       	adc	r24, r0
   10678:	90 1d       	adc	r25, r0
   1067a:	08 95       	ret

0001067c <__subdi3>:
   1067c:	2a 19       	sub	r18, r10
   1067e:	3b 09       	sbc	r19, r11
   10680:	4c 09       	sbc	r20, r12
   10682:	5d 09       	sbc	r21, r13
   10684:	6e 09       	sbc	r22, r14
   10686:	7f 09       	sbc	r23, r15
   10688:	80 0b       	sbc	r24, r16
   1068a:	91 0b       	sbc	r25, r17
   1068c:	08 95       	ret

0001068e <atof>:
   1068e:	66 27       	eor	r22, r22
   10690:	77 27       	eor	r23, r23
   10692:	2e c4       	rjmp	.+2140   	; 0x10ef0 <strtod>

00010694 <atoi>:
   10694:	fc 01       	movw	r30, r24
   10696:	88 27       	eor	r24, r24
   10698:	99 27       	eor	r25, r25
   1069a:	e8 94       	clt
   1069c:	21 91       	ld	r18, Z+
   1069e:	20 32       	cpi	r18, 0x20	; 32
   106a0:	e9 f3       	breq	.-6      	; 0x1069c <atoi+0x8>
   106a2:	29 30       	cpi	r18, 0x09	; 9
   106a4:	10 f0       	brcs	.+4      	; 0x106aa <atoi+0x16>
   106a6:	2e 30       	cpi	r18, 0x0E	; 14
   106a8:	c8 f3       	brcs	.-14     	; 0x1069c <atoi+0x8>
   106aa:	2b 32       	cpi	r18, 0x2B	; 43
   106ac:	39 f0       	breq	.+14     	; 0x106bc <atoi+0x28>
   106ae:	2d 32       	cpi	r18, 0x2D	; 45
   106b0:	31 f4       	brne	.+12     	; 0x106be <atoi+0x2a>
   106b2:	68 94       	set
   106b4:	03 c0       	rjmp	.+6      	; 0x106bc <atoi+0x28>
   106b6:	95 d1       	rcall	.+810    	; 0x109e2 <__mulhi_const_10>
   106b8:	82 0f       	add	r24, r18
   106ba:	91 1d       	adc	r25, r1
   106bc:	21 91       	ld	r18, Z+
   106be:	20 53       	subi	r18, 0x30	; 48
   106c0:	2a 30       	cpi	r18, 0x0A	; 10
   106c2:	c8 f3       	brcs	.-14     	; 0x106b6 <atoi+0x22>
   106c4:	1e f4       	brtc	.+6      	; 0x106cc <atoi+0x38>
   106c6:	90 95       	com	r25
   106c8:	81 95       	neg	r24
   106ca:	9f 4f       	sbci	r25, 0xFF	; 255
   106cc:	08 95       	ret

000106ce <atol>:
   106ce:	1f 93       	push	r17
   106d0:	fc 01       	movw	r30, r24
   106d2:	99 27       	eor	r25, r25
   106d4:	88 27       	eor	r24, r24
   106d6:	bc 01       	movw	r22, r24
   106d8:	e8 94       	clt
   106da:	11 91       	ld	r17, Z+
   106dc:	10 32       	cpi	r17, 0x20	; 32
   106de:	e9 f3       	breq	.-6      	; 0x106da <atol+0xc>
   106e0:	19 30       	cpi	r17, 0x09	; 9
   106e2:	10 f0       	brcs	.+4      	; 0x106e8 <atol+0x1a>
   106e4:	1e 30       	cpi	r17, 0x0E	; 14
   106e6:	c8 f3       	brcs	.-14     	; 0x106da <atol+0xc>
   106e8:	1b 32       	cpi	r17, 0x2B	; 43
   106ea:	49 f0       	breq	.+18     	; 0x106fe <atol+0x30>
   106ec:	1d 32       	cpi	r17, 0x2D	; 45
   106ee:	41 f4       	brne	.+16     	; 0x10700 <atol+0x32>
   106f0:	68 94       	set
   106f2:	05 c0       	rjmp	.+10     	; 0x106fe <atol+0x30>
   106f4:	61 d1       	rcall	.+706    	; 0x109b8 <__mulsi_const_10>
   106f6:	61 0f       	add	r22, r17
   106f8:	71 1d       	adc	r23, r1
   106fa:	81 1d       	adc	r24, r1
   106fc:	91 1d       	adc	r25, r1
   106fe:	11 91       	ld	r17, Z+
   10700:	10 53       	subi	r17, 0x30	; 48
   10702:	1a 30       	cpi	r17, 0x0A	; 10
   10704:	b8 f3       	brcs	.-18     	; 0x106f4 <atol+0x26>
   10706:	3e f4       	brtc	.+14     	; 0x10716 <atol+0x48>
   10708:	90 95       	com	r25
   1070a:	80 95       	com	r24
   1070c:	70 95       	com	r23
   1070e:	61 95       	neg	r22
   10710:	7f 4f       	sbci	r23, 0xFF	; 255
   10712:	8f 4f       	sbci	r24, 0xFF	; 255
   10714:	9f 4f       	sbci	r25, 0xFF	; 255
   10716:	1f 91       	pop	r17
   10718:	08 95       	ret

0001071a <__ftoa_engine>:
   1071a:	28 30       	cpi	r18, 0x08	; 8
   1071c:	08 f0       	brcs	.+2      	; 0x10720 <__ftoa_engine+0x6>
   1071e:	27 e0       	ldi	r18, 0x07	; 7
   10720:	33 27       	eor	r19, r19
   10722:	da 01       	movw	r26, r20
   10724:	99 0f       	add	r25, r25
   10726:	31 1d       	adc	r19, r1
   10728:	87 fd       	sbrc	r24, 7
   1072a:	91 60       	ori	r25, 0x01	; 1
   1072c:	00 96       	adiw	r24, 0x00	; 0
   1072e:	61 05       	cpc	r22, r1
   10730:	71 05       	cpc	r23, r1
   10732:	39 f4       	brne	.+14     	; 0x10742 <__ftoa_engine+0x28>
   10734:	32 60       	ori	r19, 0x02	; 2
   10736:	2e 5f       	subi	r18, 0xFE	; 254
   10738:	3d 93       	st	X+, r19
   1073a:	30 e3       	ldi	r19, 0x30	; 48
   1073c:	2a 95       	dec	r18
   1073e:	e1 f7       	brne	.-8      	; 0x10738 <__ftoa_engine+0x1e>
   10740:	08 95       	ret
   10742:	9f 3f       	cpi	r25, 0xFF	; 255
   10744:	30 f0       	brcs	.+12     	; 0x10752 <__ftoa_engine+0x38>
   10746:	80 38       	cpi	r24, 0x80	; 128
   10748:	71 05       	cpc	r23, r1
   1074a:	61 05       	cpc	r22, r1
   1074c:	09 f0       	breq	.+2      	; 0x10750 <__ftoa_engine+0x36>
   1074e:	3c 5f       	subi	r19, 0xFC	; 252
   10750:	3c 5f       	subi	r19, 0xFC	; 252
   10752:	3d 93       	st	X+, r19
   10754:	91 30       	cpi	r25, 0x01	; 1
   10756:	08 f0       	brcs	.+2      	; 0x1075a <__ftoa_engine+0x40>
   10758:	80 68       	ori	r24, 0x80	; 128
   1075a:	91 1d       	adc	r25, r1
   1075c:	df 93       	push	r29
   1075e:	cf 93       	push	r28
   10760:	1f 93       	push	r17
   10762:	0f 93       	push	r16
   10764:	ff 92       	push	r15
   10766:	ef 92       	push	r14
   10768:	19 2f       	mov	r17, r25
   1076a:	98 7f       	andi	r25, 0xF8	; 248
   1076c:	96 95       	lsr	r25
   1076e:	e9 2f       	mov	r30, r25
   10770:	96 95       	lsr	r25
   10772:	96 95       	lsr	r25
   10774:	e9 0f       	add	r30, r25
   10776:	ff 27       	eor	r31, r31
   10778:	e6 5e       	subi	r30, 0xE6	; 230
   1077a:	fc 4f       	sbci	r31, 0xFC	; 252
   1077c:	99 27       	eor	r25, r25
   1077e:	33 27       	eor	r19, r19
   10780:	ee 24       	eor	r14, r14
   10782:	ff 24       	eor	r15, r15
   10784:	a7 01       	movw	r20, r14
   10786:	e7 01       	movw	r28, r14
   10788:	05 90       	lpm	r0, Z+
   1078a:	08 94       	sec
   1078c:	07 94       	ror	r0
   1078e:	28 f4       	brcc	.+10     	; 0x1079a <__ftoa_engine+0x80>
   10790:	36 0f       	add	r19, r22
   10792:	e7 1e       	adc	r14, r23
   10794:	f8 1e       	adc	r15, r24
   10796:	49 1f       	adc	r20, r25
   10798:	51 1d       	adc	r21, r1
   1079a:	66 0f       	add	r22, r22
   1079c:	77 1f       	adc	r23, r23
   1079e:	88 1f       	adc	r24, r24
   107a0:	99 1f       	adc	r25, r25
   107a2:	06 94       	lsr	r0
   107a4:	a1 f7       	brne	.-24     	; 0x1078e <__ftoa_engine+0x74>
   107a6:	05 90       	lpm	r0, Z+
   107a8:	07 94       	ror	r0
   107aa:	28 f4       	brcc	.+10     	; 0x107b6 <__ftoa_engine+0x9c>
   107ac:	e7 0e       	add	r14, r23
   107ae:	f8 1e       	adc	r15, r24
   107b0:	49 1f       	adc	r20, r25
   107b2:	56 1f       	adc	r21, r22
   107b4:	c1 1d       	adc	r28, r1
   107b6:	77 0f       	add	r23, r23
   107b8:	88 1f       	adc	r24, r24
   107ba:	99 1f       	adc	r25, r25
   107bc:	66 1f       	adc	r22, r22
   107be:	06 94       	lsr	r0
   107c0:	a1 f7       	brne	.-24     	; 0x107aa <__ftoa_engine+0x90>
   107c2:	05 90       	lpm	r0, Z+
   107c4:	07 94       	ror	r0
   107c6:	28 f4       	brcc	.+10     	; 0x107d2 <__ftoa_engine+0xb8>
   107c8:	f8 0e       	add	r15, r24
   107ca:	49 1f       	adc	r20, r25
   107cc:	56 1f       	adc	r21, r22
   107ce:	c7 1f       	adc	r28, r23
   107d0:	d1 1d       	adc	r29, r1
   107d2:	88 0f       	add	r24, r24
   107d4:	99 1f       	adc	r25, r25
   107d6:	66 1f       	adc	r22, r22
   107d8:	77 1f       	adc	r23, r23
   107da:	06 94       	lsr	r0
   107dc:	a1 f7       	brne	.-24     	; 0x107c6 <__ftoa_engine+0xac>
   107de:	05 90       	lpm	r0, Z+
   107e0:	07 94       	ror	r0
   107e2:	20 f4       	brcc	.+8      	; 0x107ec <__ftoa_engine+0xd2>
   107e4:	49 0f       	add	r20, r25
   107e6:	56 1f       	adc	r21, r22
   107e8:	c7 1f       	adc	r28, r23
   107ea:	d8 1f       	adc	r29, r24
   107ec:	99 0f       	add	r25, r25
   107ee:	66 1f       	adc	r22, r22
   107f0:	77 1f       	adc	r23, r23
   107f2:	88 1f       	adc	r24, r24
   107f4:	06 94       	lsr	r0
   107f6:	a9 f7       	brne	.-22     	; 0x107e2 <__ftoa_engine+0xc8>
   107f8:	84 91       	lpm	r24, Z
   107fa:	10 95       	com	r17
   107fc:	17 70       	andi	r17, 0x07	; 7
   107fe:	41 f0       	breq	.+16     	; 0x10810 <__ftoa_engine+0xf6>
   10800:	d6 95       	lsr	r29
   10802:	c7 95       	ror	r28
   10804:	57 95       	ror	r21
   10806:	47 95       	ror	r20
   10808:	f7 94       	ror	r15
   1080a:	e7 94       	ror	r14
   1080c:	1a 95       	dec	r17
   1080e:	c1 f7       	brne	.-16     	; 0x10800 <__ftoa_engine+0xe6>
   10810:	e0 ec       	ldi	r30, 0xC0	; 192
   10812:	f2 e0       	ldi	r31, 0x02	; 2
   10814:	68 94       	set
   10816:	15 90       	lpm	r1, Z+
   10818:	15 91       	lpm	r17, Z+
   1081a:	35 91       	lpm	r19, Z+
   1081c:	65 91       	lpm	r22, Z+
   1081e:	95 91       	lpm	r25, Z+
   10820:	05 90       	lpm	r0, Z+
   10822:	7f e2       	ldi	r23, 0x2F	; 47
   10824:	73 95       	inc	r23
   10826:	e1 18       	sub	r14, r1
   10828:	f1 0a       	sbc	r15, r17
   1082a:	43 0b       	sbc	r20, r19
   1082c:	56 0b       	sbc	r21, r22
   1082e:	c9 0b       	sbc	r28, r25
   10830:	d0 09       	sbc	r29, r0
   10832:	c0 f7       	brcc	.-16     	; 0x10824 <__ftoa_engine+0x10a>
   10834:	e1 0c       	add	r14, r1
   10836:	f1 1e       	adc	r15, r17
   10838:	43 1f       	adc	r20, r19
   1083a:	56 1f       	adc	r21, r22
   1083c:	c9 1f       	adc	r28, r25
   1083e:	d0 1d       	adc	r29, r0
   10840:	7e f4       	brtc	.+30     	; 0x10860 <__ftoa_engine+0x146>
   10842:	70 33       	cpi	r23, 0x30	; 48
   10844:	11 f4       	brne	.+4      	; 0x1084a <__ftoa_engine+0x130>
   10846:	8a 95       	dec	r24
   10848:	e6 cf       	rjmp	.-52     	; 0x10816 <__ftoa_engine+0xfc>
   1084a:	e8 94       	clt
   1084c:	01 50       	subi	r16, 0x01	; 1
   1084e:	30 f0       	brcs	.+12     	; 0x1085c <__ftoa_engine+0x142>
   10850:	08 0f       	add	r16, r24
   10852:	0a f4       	brpl	.+2      	; 0x10856 <__ftoa_engine+0x13c>
   10854:	00 27       	eor	r16, r16
   10856:	02 17       	cp	r16, r18
   10858:	08 f4       	brcc	.+2      	; 0x1085c <__ftoa_engine+0x142>
   1085a:	20 2f       	mov	r18, r16
   1085c:	23 95       	inc	r18
   1085e:	02 2f       	mov	r16, r18
   10860:	7a 33       	cpi	r23, 0x3A	; 58
   10862:	28 f0       	brcs	.+10     	; 0x1086e <__ftoa_engine+0x154>
   10864:	79 e3       	ldi	r23, 0x39	; 57
   10866:	7d 93       	st	X+, r23
   10868:	2a 95       	dec	r18
   1086a:	e9 f7       	brne	.-6      	; 0x10866 <__ftoa_engine+0x14c>
   1086c:	10 c0       	rjmp	.+32     	; 0x1088e <__ftoa_engine+0x174>
   1086e:	7d 93       	st	X+, r23
   10870:	2a 95       	dec	r18
   10872:	89 f6       	brne	.-94     	; 0x10816 <__ftoa_engine+0xfc>
   10874:	06 94       	lsr	r0
   10876:	97 95       	ror	r25
   10878:	67 95       	ror	r22
   1087a:	37 95       	ror	r19
   1087c:	17 95       	ror	r17
   1087e:	17 94       	ror	r1
   10880:	e1 18       	sub	r14, r1
   10882:	f1 0a       	sbc	r15, r17
   10884:	43 0b       	sbc	r20, r19
   10886:	56 0b       	sbc	r21, r22
   10888:	c9 0b       	sbc	r28, r25
   1088a:	d0 09       	sbc	r29, r0
   1088c:	98 f0       	brcs	.+38     	; 0x108b4 <__ftoa_engine+0x19a>
   1088e:	23 95       	inc	r18
   10890:	7e 91       	ld	r23, -X
   10892:	73 95       	inc	r23
   10894:	7a 33       	cpi	r23, 0x3A	; 58
   10896:	08 f0       	brcs	.+2      	; 0x1089a <__ftoa_engine+0x180>
   10898:	70 e3       	ldi	r23, 0x30	; 48
   1089a:	7c 93       	st	X, r23
   1089c:	20 13       	cpse	r18, r16
   1089e:	b8 f7       	brcc	.-18     	; 0x1088e <__ftoa_engine+0x174>
   108a0:	7e 91       	ld	r23, -X
   108a2:	70 61       	ori	r23, 0x10	; 16
   108a4:	7d 93       	st	X+, r23
   108a6:	30 f0       	brcs	.+12     	; 0x108b4 <__ftoa_engine+0x19a>
   108a8:	83 95       	inc	r24
   108aa:	71 e3       	ldi	r23, 0x31	; 49
   108ac:	7d 93       	st	X+, r23
   108ae:	70 e3       	ldi	r23, 0x30	; 48
   108b0:	2a 95       	dec	r18
   108b2:	e1 f7       	brne	.-8      	; 0x108ac <__ftoa_engine+0x192>
   108b4:	11 24       	eor	r1, r1
   108b6:	ef 90       	pop	r14
   108b8:	ff 90       	pop	r15
   108ba:	0f 91       	pop	r16
   108bc:	1f 91       	pop	r17
   108be:	cf 91       	pop	r28
   108c0:	df 91       	pop	r29
   108c2:	99 27       	eor	r25, r25
   108c4:	87 fd       	sbrc	r24, 7
   108c6:	90 95       	com	r25
   108c8:	08 95       	ret

000108ca <strncasecmp_P>:
   108ca:	fb 01       	movw	r30, r22
   108cc:	dc 01       	movw	r26, r24
   108ce:	41 50       	subi	r20, 0x01	; 1
   108d0:	50 40       	sbci	r21, 0x00	; 0
   108d2:	88 f0       	brcs	.+34     	; 0x108f6 <strncasecmp_P+0x2c>
   108d4:	8d 91       	ld	r24, X+
   108d6:	81 34       	cpi	r24, 0x41	; 65
   108d8:	1c f0       	brlt	.+6      	; 0x108e0 <strncasecmp_P+0x16>
   108da:	8b 35       	cpi	r24, 0x5B	; 91
   108dc:	0c f4       	brge	.+2      	; 0x108e0 <strncasecmp_P+0x16>
   108de:	80 5e       	subi	r24, 0xE0	; 224
   108e0:	65 91       	lpm	r22, Z+
   108e2:	61 34       	cpi	r22, 0x41	; 65
   108e4:	1c f0       	brlt	.+6      	; 0x108ec <strncasecmp_P+0x22>
   108e6:	6b 35       	cpi	r22, 0x5B	; 91
   108e8:	0c f4       	brge	.+2      	; 0x108ec <strncasecmp_P+0x22>
   108ea:	60 5e       	subi	r22, 0xE0	; 224
   108ec:	86 1b       	sub	r24, r22
   108ee:	61 11       	cpse	r22, r1
   108f0:	71 f3       	breq	.-36     	; 0x108ce <strncasecmp_P+0x4>
   108f2:	99 0b       	sbc	r25, r25
   108f4:	08 95       	ret
   108f6:	88 1b       	sub	r24, r24
   108f8:	fc cf       	rjmp	.-8      	; 0x108f2 <strncasecmp_P+0x28>

000108fa <strncmp_P>:
   108fa:	fb 01       	movw	r30, r22
   108fc:	dc 01       	movw	r26, r24
   108fe:	41 50       	subi	r20, 0x01	; 1
   10900:	50 40       	sbci	r21, 0x00	; 0
   10902:	30 f0       	brcs	.+12     	; 0x10910 <strncmp_P+0x16>
   10904:	8d 91       	ld	r24, X+
   10906:	05 90       	lpm	r0, Z+
   10908:	80 19       	sub	r24, r0
   1090a:	19 f4       	brne	.+6      	; 0x10912 <strncmp_P+0x18>
   1090c:	00 20       	and	r0, r0
   1090e:	b9 f7       	brne	.-18     	; 0x108fe <strncmp_P+0x4>
   10910:	88 1b       	sub	r24, r24
   10912:	99 0b       	sbc	r25, r25
   10914:	08 95       	ret

00010916 <strnlen_P>:
   10916:	fc 01       	movw	r30, r24
   10918:	05 90       	lpm	r0, Z+
   1091a:	61 50       	subi	r22, 0x01	; 1
   1091c:	70 40       	sbci	r23, 0x00	; 0
   1091e:	01 10       	cpse	r0, r1
   10920:	d8 f7       	brcc	.-10     	; 0x10918 <strnlen_P+0x2>
   10922:	80 95       	com	r24
   10924:	90 95       	com	r25
   10926:	8e 0f       	add	r24, r30
   10928:	9f 1f       	adc	r25, r31
   1092a:	08 95       	ret

0001092c <strstr_P>:
   1092c:	fb 01       	movw	r30, r22
   1092e:	55 91       	lpm	r21, Z+
   10930:	55 23       	and	r21, r21
   10932:	a9 f0       	breq	.+42     	; 0x1095e <strstr_P+0x32>
   10934:	bf 01       	movw	r22, r30
   10936:	dc 01       	movw	r26, r24
   10938:	4d 91       	ld	r20, X+
   1093a:	45 17       	cp	r20, r21
   1093c:	41 11       	cpse	r20, r1
   1093e:	e1 f7       	brne	.-8      	; 0x10938 <strstr_P+0xc>
   10940:	59 f4       	brne	.+22     	; 0x10958 <strstr_P+0x2c>
   10942:	cd 01       	movw	r24, r26
   10944:	05 90       	lpm	r0, Z+
   10946:	00 20       	and	r0, r0
   10948:	49 f0       	breq	.+18     	; 0x1095c <strstr_P+0x30>
   1094a:	4d 91       	ld	r20, X+
   1094c:	40 15       	cp	r20, r0
   1094e:	41 11       	cpse	r20, r1
   10950:	c9 f3       	breq	.-14     	; 0x10944 <strstr_P+0x18>
   10952:	fb 01       	movw	r30, r22
   10954:	41 11       	cpse	r20, r1
   10956:	ef cf       	rjmp	.-34     	; 0x10936 <strstr_P+0xa>
   10958:	81 e0       	ldi	r24, 0x01	; 1
   1095a:	90 e0       	ldi	r25, 0x00	; 0
   1095c:	01 97       	sbiw	r24, 0x01	; 1
   1095e:	08 95       	ret

00010960 <memchr>:
   10960:	fc 01       	movw	r30, r24
   10962:	41 50       	subi	r20, 0x01	; 1
   10964:	50 40       	sbci	r21, 0x00	; 0
   10966:	30 f0       	brcs	.+12     	; 0x10974 <memchr+0x14>
   10968:	01 90       	ld	r0, Z+
   1096a:	06 16       	cp	r0, r22
   1096c:	d1 f7       	brne	.-12     	; 0x10962 <memchr+0x2>
   1096e:	31 97       	sbiw	r30, 0x01	; 1
   10970:	cf 01       	movw	r24, r30
   10972:	08 95       	ret
   10974:	88 27       	eor	r24, r24
   10976:	99 27       	eor	r25, r25
   10978:	08 95       	ret

0001097a <memcpy>:
   1097a:	fb 01       	movw	r30, r22
   1097c:	dc 01       	movw	r26, r24
   1097e:	02 c0       	rjmp	.+4      	; 0x10984 <memcpy+0xa>
   10980:	01 90       	ld	r0, Z+
   10982:	0d 92       	st	X+, r0
   10984:	41 50       	subi	r20, 0x01	; 1
   10986:	50 40       	sbci	r21, 0x00	; 0
   10988:	d8 f7       	brcc	.-10     	; 0x10980 <memcpy+0x6>
   1098a:	08 95       	ret

0001098c <strchr>:
   1098c:	fc 01       	movw	r30, r24
   1098e:	81 91       	ld	r24, Z+
   10990:	86 17       	cp	r24, r22
   10992:	21 f0       	breq	.+8      	; 0x1099c <strchr+0x10>
   10994:	88 23       	and	r24, r24
   10996:	d9 f7       	brne	.-10     	; 0x1098e <strchr+0x2>
   10998:	99 27       	eor	r25, r25
   1099a:	08 95       	ret
   1099c:	31 97       	sbiw	r30, 0x01	; 1
   1099e:	cf 01       	movw	r24, r30
   109a0:	08 95       	ret

000109a2 <strnlen>:
   109a2:	fc 01       	movw	r30, r24
   109a4:	61 50       	subi	r22, 0x01	; 1
   109a6:	70 40       	sbci	r23, 0x00	; 0
   109a8:	01 90       	ld	r0, Z+
   109aa:	01 10       	cpse	r0, r1
   109ac:	d8 f7       	brcc	.-10     	; 0x109a4 <strnlen+0x2>
   109ae:	80 95       	com	r24
   109b0:	90 95       	com	r25
   109b2:	8e 0f       	add	r24, r30
   109b4:	9f 1f       	adc	r25, r31
   109b6:	08 95       	ret

000109b8 <__mulsi_const_10>:
   109b8:	59 2f       	mov	r21, r25
   109ba:	48 2f       	mov	r20, r24
   109bc:	37 2f       	mov	r19, r23
   109be:	26 2f       	mov	r18, r22
   109c0:	66 0f       	add	r22, r22
   109c2:	77 1f       	adc	r23, r23
   109c4:	88 1f       	adc	r24, r24
   109c6:	99 1f       	adc	r25, r25
   109c8:	66 0f       	add	r22, r22
   109ca:	77 1f       	adc	r23, r23
   109cc:	88 1f       	adc	r24, r24
   109ce:	99 1f       	adc	r25, r25
   109d0:	62 0f       	add	r22, r18
   109d2:	73 1f       	adc	r23, r19
   109d4:	84 1f       	adc	r24, r20
   109d6:	95 1f       	adc	r25, r21
   109d8:	66 0f       	add	r22, r22
   109da:	77 1f       	adc	r23, r23
   109dc:	88 1f       	adc	r24, r24
   109de:	99 1f       	adc	r25, r25
   109e0:	08 95       	ret

000109e2 <__mulhi_const_10>:
   109e2:	7a e0       	ldi	r23, 0x0A	; 10
   109e4:	97 9f       	mul	r25, r23
   109e6:	90 2d       	mov	r25, r0
   109e8:	87 9f       	mul	r24, r23
   109ea:	80 2d       	mov	r24, r0
   109ec:	91 0d       	add	r25, r1
   109ee:	11 24       	eor	r1, r1
   109f0:	08 95       	ret

000109f2 <fdevopen>:
   109f2:	0f 93       	push	r16
   109f4:	1f 93       	push	r17
   109f6:	cf 93       	push	r28
   109f8:	df 93       	push	r29
   109fa:	00 97       	sbiw	r24, 0x00	; 0
   109fc:	31 f4       	brne	.+12     	; 0x10a0a <fdevopen+0x18>
   109fe:	61 15       	cp	r22, r1
   10a00:	71 05       	cpc	r23, r1
   10a02:	19 f4       	brne	.+6      	; 0x10a0a <fdevopen+0x18>
   10a04:	80 e0       	ldi	r24, 0x00	; 0
   10a06:	90 e0       	ldi	r25, 0x00	; 0
   10a08:	39 c0       	rjmp	.+114    	; 0x10a7c <fdevopen+0x8a>
   10a0a:	8b 01       	movw	r16, r22
   10a0c:	ec 01       	movw	r28, r24
   10a0e:	6e e0       	ldi	r22, 0x0E	; 14
   10a10:	70 e0       	ldi	r23, 0x00	; 0
   10a12:	81 e0       	ldi	r24, 0x01	; 1
   10a14:	90 e0       	ldi	r25, 0x00	; 0
   10a16:	31 d1       	rcall	.+610    	; 0x10c7a <calloc>
   10a18:	fc 01       	movw	r30, r24
   10a1a:	89 2b       	or	r24, r25
   10a1c:	99 f3       	breq	.-26     	; 0x10a04 <fdevopen+0x12>
   10a1e:	80 e8       	ldi	r24, 0x80	; 128
   10a20:	83 83       	std	Z+3, r24	; 0x03
   10a22:	01 15       	cp	r16, r1
   10a24:	11 05       	cpc	r17, r1
   10a26:	71 f0       	breq	.+28     	; 0x10a44 <fdevopen+0x52>
   10a28:	02 87       	std	Z+10, r16	; 0x0a
   10a2a:	13 87       	std	Z+11, r17	; 0x0b
   10a2c:	81 e8       	ldi	r24, 0x81	; 129
   10a2e:	83 83       	std	Z+3, r24	; 0x03
   10a30:	80 91 83 2e 	lds	r24, 0x2E83	; 0x802e83 <__iob>
   10a34:	90 91 84 2e 	lds	r25, 0x2E84	; 0x802e84 <__iob+0x1>
   10a38:	89 2b       	or	r24, r25
   10a3a:	21 f4       	brne	.+8      	; 0x10a44 <fdevopen+0x52>
   10a3c:	e0 93 83 2e 	sts	0x2E83, r30	; 0x802e83 <__iob>
   10a40:	f0 93 84 2e 	sts	0x2E84, r31	; 0x802e84 <__iob+0x1>
   10a44:	20 97       	sbiw	r28, 0x00	; 0
   10a46:	c9 f0       	breq	.+50     	; 0x10a7a <fdevopen+0x88>
   10a48:	c0 87       	std	Z+8, r28	; 0x08
   10a4a:	d1 87       	std	Z+9, r29	; 0x09
   10a4c:	83 81       	ldd	r24, Z+3	; 0x03
   10a4e:	82 60       	ori	r24, 0x02	; 2
   10a50:	83 83       	std	Z+3, r24	; 0x03
   10a52:	80 91 85 2e 	lds	r24, 0x2E85	; 0x802e85 <__iob+0x2>
   10a56:	90 91 86 2e 	lds	r25, 0x2E86	; 0x802e86 <__iob+0x3>
   10a5a:	89 2b       	or	r24, r25
   10a5c:	71 f4       	brne	.+28     	; 0x10a7a <fdevopen+0x88>
   10a5e:	e0 93 85 2e 	sts	0x2E85, r30	; 0x802e85 <__iob+0x2>
   10a62:	f0 93 86 2e 	sts	0x2E86, r31	; 0x802e86 <__iob+0x3>
   10a66:	80 91 87 2e 	lds	r24, 0x2E87	; 0x802e87 <__iob+0x4>
   10a6a:	90 91 88 2e 	lds	r25, 0x2E88	; 0x802e88 <__iob+0x5>
   10a6e:	89 2b       	or	r24, r25
   10a70:	21 f4       	brne	.+8      	; 0x10a7a <fdevopen+0x88>
   10a72:	e0 93 87 2e 	sts	0x2E87, r30	; 0x802e87 <__iob+0x4>
   10a76:	f0 93 88 2e 	sts	0x2E88, r31	; 0x802e88 <__iob+0x5>
   10a7a:	cf 01       	movw	r24, r30
   10a7c:	df 91       	pop	r29
   10a7e:	cf 91       	pop	r28
   10a80:	1f 91       	pop	r17
   10a82:	0f 91       	pop	r16
   10a84:	08 95       	ret

00010a86 <fputc>:
   10a86:	0f 93       	push	r16
   10a88:	1f 93       	push	r17
   10a8a:	cf 93       	push	r28
   10a8c:	df 93       	push	r29
   10a8e:	fb 01       	movw	r30, r22
   10a90:	23 81       	ldd	r18, Z+3	; 0x03
   10a92:	21 fd       	sbrc	r18, 1
   10a94:	03 c0       	rjmp	.+6      	; 0x10a9c <fputc+0x16>
   10a96:	8f ef       	ldi	r24, 0xFF	; 255
   10a98:	9f ef       	ldi	r25, 0xFF	; 255
   10a9a:	2c c0       	rjmp	.+88     	; 0x10af4 <fputc+0x6e>
   10a9c:	22 ff       	sbrs	r18, 2
   10a9e:	16 c0       	rjmp	.+44     	; 0x10acc <fputc+0x46>
   10aa0:	46 81       	ldd	r20, Z+6	; 0x06
   10aa2:	57 81       	ldd	r21, Z+7	; 0x07
   10aa4:	24 81       	ldd	r18, Z+4	; 0x04
   10aa6:	35 81       	ldd	r19, Z+5	; 0x05
   10aa8:	42 17       	cp	r20, r18
   10aaa:	53 07       	cpc	r21, r19
   10aac:	44 f4       	brge	.+16     	; 0x10abe <fputc+0x38>
   10aae:	a0 81       	ld	r26, Z
   10ab0:	b1 81       	ldd	r27, Z+1	; 0x01
   10ab2:	9d 01       	movw	r18, r26
   10ab4:	2f 5f       	subi	r18, 0xFF	; 255
   10ab6:	3f 4f       	sbci	r19, 0xFF	; 255
   10ab8:	20 83       	st	Z, r18
   10aba:	31 83       	std	Z+1, r19	; 0x01
   10abc:	8c 93       	st	X, r24
   10abe:	26 81       	ldd	r18, Z+6	; 0x06
   10ac0:	37 81       	ldd	r19, Z+7	; 0x07
   10ac2:	2f 5f       	subi	r18, 0xFF	; 255
   10ac4:	3f 4f       	sbci	r19, 0xFF	; 255
   10ac6:	26 83       	std	Z+6, r18	; 0x06
   10ac8:	37 83       	std	Z+7, r19	; 0x07
   10aca:	14 c0       	rjmp	.+40     	; 0x10af4 <fputc+0x6e>
   10acc:	8b 01       	movw	r16, r22
   10ace:	ec 01       	movw	r28, r24
   10ad0:	fb 01       	movw	r30, r22
   10ad2:	00 84       	ldd	r0, Z+8	; 0x08
   10ad4:	f1 85       	ldd	r31, Z+9	; 0x09
   10ad6:	e0 2d       	mov	r30, r0
   10ad8:	19 95       	eicall
   10ada:	89 2b       	or	r24, r25
   10adc:	e1 f6       	brne	.-72     	; 0x10a96 <fputc+0x10>
   10ade:	d8 01       	movw	r26, r16
   10ae0:	16 96       	adiw	r26, 0x06	; 6
   10ae2:	8d 91       	ld	r24, X+
   10ae4:	9c 91       	ld	r25, X
   10ae6:	17 97       	sbiw	r26, 0x07	; 7
   10ae8:	01 96       	adiw	r24, 0x01	; 1
   10aea:	16 96       	adiw	r26, 0x06	; 6
   10aec:	8d 93       	st	X+, r24
   10aee:	9c 93       	st	X, r25
   10af0:	17 97       	sbiw	r26, 0x07	; 7
   10af2:	ce 01       	movw	r24, r28
   10af4:	df 91       	pop	r29
   10af6:	cf 91       	pop	r28
   10af8:	1f 91       	pop	r17
   10afa:	0f 91       	pop	r16
   10afc:	08 95       	ret

00010afe <snprintf_P>:
   10afe:	0f 93       	push	r16
   10b00:	1f 93       	push	r17
   10b02:	cf 93       	push	r28
   10b04:	df 93       	push	r29
   10b06:	cd b7       	in	r28, 0x3d	; 61
   10b08:	de b7       	in	r29, 0x3e	; 62
   10b0a:	2e 97       	sbiw	r28, 0x0e	; 14
   10b0c:	cd bf       	out	0x3d, r28	; 61
   10b0e:	de bf       	out	0x3e, r29	; 62
   10b10:	0e 89       	ldd	r16, Y+22	; 0x16
   10b12:	1f 89       	ldd	r17, Y+23	; 0x17
   10b14:	88 8d       	ldd	r24, Y+24	; 0x18
   10b16:	99 8d       	ldd	r25, Y+25	; 0x19
   10b18:	2e e0       	ldi	r18, 0x0E	; 14
   10b1a:	2c 83       	std	Y+4, r18	; 0x04
   10b1c:	09 83       	std	Y+1, r16	; 0x01
   10b1e:	1a 83       	std	Y+2, r17	; 0x02
   10b20:	97 ff       	sbrs	r25, 7
   10b22:	02 c0       	rjmp	.+4      	; 0x10b28 <snprintf_P+0x2a>
   10b24:	80 e0       	ldi	r24, 0x00	; 0
   10b26:	90 e8       	ldi	r25, 0x80	; 128
   10b28:	01 97       	sbiw	r24, 0x01	; 1
   10b2a:	8d 83       	std	Y+5, r24	; 0x05
   10b2c:	9e 83       	std	Y+6, r25	; 0x06
   10b2e:	ae 01       	movw	r20, r28
   10b30:	44 5e       	subi	r20, 0xE4	; 228
   10b32:	5f 4f       	sbci	r21, 0xFF	; 255
   10b34:	6a 8d       	ldd	r22, Y+26	; 0x1a
   10b36:	7b 8d       	ldd	r23, Y+27	; 0x1b
   10b38:	ce 01       	movw	r24, r28
   10b3a:	01 96       	adiw	r24, 0x01	; 1
   10b3c:	0e 94 c3 79 	call	0xf386	; 0xf386 <vfprintf>
   10b40:	4d 81       	ldd	r20, Y+5	; 0x05
   10b42:	5e 81       	ldd	r21, Y+6	; 0x06
   10b44:	57 fd       	sbrc	r21, 7
   10b46:	0a c0       	rjmp	.+20     	; 0x10b5c <snprintf_P+0x5e>
   10b48:	2f 81       	ldd	r18, Y+7	; 0x07
   10b4a:	38 85       	ldd	r19, Y+8	; 0x08
   10b4c:	42 17       	cp	r20, r18
   10b4e:	53 07       	cpc	r21, r19
   10b50:	0c f4       	brge	.+2      	; 0x10b54 <snprintf_P+0x56>
   10b52:	9a 01       	movw	r18, r20
   10b54:	f8 01       	movw	r30, r16
   10b56:	e2 0f       	add	r30, r18
   10b58:	f3 1f       	adc	r31, r19
   10b5a:	10 82       	st	Z, r1
   10b5c:	2e 96       	adiw	r28, 0x0e	; 14
   10b5e:	cd bf       	out	0x3d, r28	; 61
   10b60:	de bf       	out	0x3e, r29	; 62
   10b62:	df 91       	pop	r29
   10b64:	cf 91       	pop	r28
   10b66:	1f 91       	pop	r17
   10b68:	0f 91       	pop	r16
   10b6a:	08 95       	ret

00010b6c <sprintf_P>:
   10b6c:	0f 93       	push	r16
   10b6e:	1f 93       	push	r17
   10b70:	cf 93       	push	r28
   10b72:	df 93       	push	r29
   10b74:	cd b7       	in	r28, 0x3d	; 61
   10b76:	de b7       	in	r29, 0x3e	; 62
   10b78:	2e 97       	sbiw	r28, 0x0e	; 14
   10b7a:	cd bf       	out	0x3d, r28	; 61
   10b7c:	de bf       	out	0x3e, r29	; 62
   10b7e:	0e 89       	ldd	r16, Y+22	; 0x16
   10b80:	1f 89       	ldd	r17, Y+23	; 0x17
   10b82:	8e e0       	ldi	r24, 0x0E	; 14
   10b84:	8c 83       	std	Y+4, r24	; 0x04
   10b86:	09 83       	std	Y+1, r16	; 0x01
   10b88:	1a 83       	std	Y+2, r17	; 0x02
   10b8a:	8f ef       	ldi	r24, 0xFF	; 255
   10b8c:	9f e7       	ldi	r25, 0x7F	; 127
   10b8e:	8d 83       	std	Y+5, r24	; 0x05
   10b90:	9e 83       	std	Y+6, r25	; 0x06
   10b92:	ae 01       	movw	r20, r28
   10b94:	46 5e       	subi	r20, 0xE6	; 230
   10b96:	5f 4f       	sbci	r21, 0xFF	; 255
   10b98:	68 8d       	ldd	r22, Y+24	; 0x18
   10b9a:	79 8d       	ldd	r23, Y+25	; 0x19
   10b9c:	ce 01       	movw	r24, r28
   10b9e:	01 96       	adiw	r24, 0x01	; 1
   10ba0:	0e 94 c3 79 	call	0xf386	; 0xf386 <vfprintf>
   10ba4:	ef 81       	ldd	r30, Y+7	; 0x07
   10ba6:	f8 85       	ldd	r31, Y+8	; 0x08
   10ba8:	e0 0f       	add	r30, r16
   10baa:	f1 1f       	adc	r31, r17
   10bac:	10 82       	st	Z, r1
   10bae:	2e 96       	adiw	r28, 0x0e	; 14
   10bb0:	cd bf       	out	0x3d, r28	; 61
   10bb2:	de bf       	out	0x3e, r29	; 62
   10bb4:	df 91       	pop	r29
   10bb6:	cf 91       	pop	r28
   10bb8:	1f 91       	pop	r17
   10bba:	0f 91       	pop	r16
   10bbc:	08 95       	ret

00010bbe <__ultoa_invert>:
   10bbe:	fa 01       	movw	r30, r20
   10bc0:	aa 27       	eor	r26, r26
   10bc2:	28 30       	cpi	r18, 0x08	; 8
   10bc4:	51 f1       	breq	.+84     	; 0x10c1a <__ultoa_invert+0x5c>
   10bc6:	20 31       	cpi	r18, 0x10	; 16
   10bc8:	81 f1       	breq	.+96     	; 0x10c2a <__ultoa_invert+0x6c>
   10bca:	e8 94       	clt
   10bcc:	6f 93       	push	r22
   10bce:	6e 7f       	andi	r22, 0xFE	; 254
   10bd0:	6e 5f       	subi	r22, 0xFE	; 254
   10bd2:	7f 4f       	sbci	r23, 0xFF	; 255
   10bd4:	8f 4f       	sbci	r24, 0xFF	; 255
   10bd6:	9f 4f       	sbci	r25, 0xFF	; 255
   10bd8:	af 4f       	sbci	r26, 0xFF	; 255
   10bda:	b1 e0       	ldi	r27, 0x01	; 1
   10bdc:	3e d0       	rcall	.+124    	; 0x10c5a <__ultoa_invert+0x9c>
   10bde:	b4 e0       	ldi	r27, 0x04	; 4
   10be0:	3c d0       	rcall	.+120    	; 0x10c5a <__ultoa_invert+0x9c>
   10be2:	67 0f       	add	r22, r23
   10be4:	78 1f       	adc	r23, r24
   10be6:	89 1f       	adc	r24, r25
   10be8:	9a 1f       	adc	r25, r26
   10bea:	a1 1d       	adc	r26, r1
   10bec:	68 0f       	add	r22, r24
   10bee:	79 1f       	adc	r23, r25
   10bf0:	8a 1f       	adc	r24, r26
   10bf2:	91 1d       	adc	r25, r1
   10bf4:	a1 1d       	adc	r26, r1
   10bf6:	6a 0f       	add	r22, r26
   10bf8:	71 1d       	adc	r23, r1
   10bfa:	81 1d       	adc	r24, r1
   10bfc:	91 1d       	adc	r25, r1
   10bfe:	a1 1d       	adc	r26, r1
   10c00:	20 d0       	rcall	.+64     	; 0x10c42 <__ultoa_invert+0x84>
   10c02:	09 f4       	brne	.+2      	; 0x10c06 <__ultoa_invert+0x48>
   10c04:	68 94       	set
   10c06:	3f 91       	pop	r19
   10c08:	2a e0       	ldi	r18, 0x0A	; 10
   10c0a:	26 9f       	mul	r18, r22
   10c0c:	11 24       	eor	r1, r1
   10c0e:	30 19       	sub	r19, r0
   10c10:	30 5d       	subi	r19, 0xD0	; 208
   10c12:	31 93       	st	Z+, r19
   10c14:	de f6       	brtc	.-74     	; 0x10bcc <__ultoa_invert+0xe>
   10c16:	cf 01       	movw	r24, r30
   10c18:	08 95       	ret
   10c1a:	46 2f       	mov	r20, r22
   10c1c:	47 70       	andi	r20, 0x07	; 7
   10c1e:	40 5d       	subi	r20, 0xD0	; 208
   10c20:	41 93       	st	Z+, r20
   10c22:	b3 e0       	ldi	r27, 0x03	; 3
   10c24:	0f d0       	rcall	.+30     	; 0x10c44 <__ultoa_invert+0x86>
   10c26:	c9 f7       	brne	.-14     	; 0x10c1a <__ultoa_invert+0x5c>
   10c28:	f6 cf       	rjmp	.-20     	; 0x10c16 <__ultoa_invert+0x58>
   10c2a:	46 2f       	mov	r20, r22
   10c2c:	4f 70       	andi	r20, 0x0F	; 15
   10c2e:	40 5d       	subi	r20, 0xD0	; 208
   10c30:	4a 33       	cpi	r20, 0x3A	; 58
   10c32:	18 f0       	brcs	.+6      	; 0x10c3a <__ultoa_invert+0x7c>
   10c34:	49 5d       	subi	r20, 0xD9	; 217
   10c36:	31 fd       	sbrc	r19, 1
   10c38:	40 52       	subi	r20, 0x20	; 32
   10c3a:	41 93       	st	Z+, r20
   10c3c:	02 d0       	rcall	.+4      	; 0x10c42 <__ultoa_invert+0x84>
   10c3e:	a9 f7       	brne	.-22     	; 0x10c2a <__ultoa_invert+0x6c>
   10c40:	ea cf       	rjmp	.-44     	; 0x10c16 <__ultoa_invert+0x58>
   10c42:	b4 e0       	ldi	r27, 0x04	; 4
   10c44:	a6 95       	lsr	r26
   10c46:	97 95       	ror	r25
   10c48:	87 95       	ror	r24
   10c4a:	77 95       	ror	r23
   10c4c:	67 95       	ror	r22
   10c4e:	ba 95       	dec	r27
   10c50:	c9 f7       	brne	.-14     	; 0x10c44 <__ultoa_invert+0x86>
   10c52:	00 97       	sbiw	r24, 0x00	; 0
   10c54:	61 05       	cpc	r22, r1
   10c56:	71 05       	cpc	r23, r1
   10c58:	08 95       	ret
   10c5a:	9b 01       	movw	r18, r22
   10c5c:	ac 01       	movw	r20, r24
   10c5e:	0a 2e       	mov	r0, r26
   10c60:	06 94       	lsr	r0
   10c62:	57 95       	ror	r21
   10c64:	47 95       	ror	r20
   10c66:	37 95       	ror	r19
   10c68:	27 95       	ror	r18
   10c6a:	ba 95       	dec	r27
   10c6c:	c9 f7       	brne	.-14     	; 0x10c60 <__ultoa_invert+0xa2>
   10c6e:	62 0f       	add	r22, r18
   10c70:	73 1f       	adc	r23, r19
   10c72:	84 1f       	adc	r24, r20
   10c74:	95 1f       	adc	r25, r21
   10c76:	a0 1d       	adc	r26, r0
   10c78:	08 95       	ret

00010c7a <calloc>:
   10c7a:	0f 93       	push	r16
   10c7c:	1f 93       	push	r17
   10c7e:	cf 93       	push	r28
   10c80:	df 93       	push	r29
   10c82:	86 9f       	mul	r24, r22
   10c84:	80 01       	movw	r16, r0
   10c86:	87 9f       	mul	r24, r23
   10c88:	10 0d       	add	r17, r0
   10c8a:	96 9f       	mul	r25, r22
   10c8c:	10 0d       	add	r17, r0
   10c8e:	11 24       	eor	r1, r1
   10c90:	c8 01       	movw	r24, r16
   10c92:	0d d0       	rcall	.+26     	; 0x10cae <malloc>
   10c94:	ec 01       	movw	r28, r24
   10c96:	00 97       	sbiw	r24, 0x00	; 0
   10c98:	21 f0       	breq	.+8      	; 0x10ca2 <calloc+0x28>
   10c9a:	a8 01       	movw	r20, r16
   10c9c:	60 e0       	ldi	r22, 0x00	; 0
   10c9e:	70 e0       	ldi	r23, 0x00	; 0
   10ca0:	86 d2       	rcall	.+1292   	; 0x111ae <memset>
   10ca2:	ce 01       	movw	r24, r28
   10ca4:	df 91       	pop	r29
   10ca6:	cf 91       	pop	r28
   10ca8:	1f 91       	pop	r17
   10caa:	0f 91       	pop	r16
   10cac:	08 95       	ret

00010cae <malloc>:
   10cae:	0f 93       	push	r16
   10cb0:	1f 93       	push	r17
   10cb2:	cf 93       	push	r28
   10cb4:	df 93       	push	r29
   10cb6:	82 30       	cpi	r24, 0x02	; 2
   10cb8:	91 05       	cpc	r25, r1
   10cba:	10 f4       	brcc	.+4      	; 0x10cc0 <malloc+0x12>
   10cbc:	82 e0       	ldi	r24, 0x02	; 2
   10cbe:	90 e0       	ldi	r25, 0x00	; 0
   10cc0:	e0 91 8b 2e 	lds	r30, 0x2E8B	; 0x802e8b <__flp>
   10cc4:	f0 91 8c 2e 	lds	r31, 0x2E8C	; 0x802e8c <__flp+0x1>
   10cc8:	20 e0       	ldi	r18, 0x00	; 0
   10cca:	30 e0       	ldi	r19, 0x00	; 0
   10ccc:	a0 e0       	ldi	r26, 0x00	; 0
   10cce:	b0 e0       	ldi	r27, 0x00	; 0
   10cd0:	30 97       	sbiw	r30, 0x00	; 0
   10cd2:	19 f1       	breq	.+70     	; 0x10d1a <malloc+0x6c>
   10cd4:	40 81       	ld	r20, Z
   10cd6:	51 81       	ldd	r21, Z+1	; 0x01
   10cd8:	02 81       	ldd	r16, Z+2	; 0x02
   10cda:	13 81       	ldd	r17, Z+3	; 0x03
   10cdc:	48 17       	cp	r20, r24
   10cde:	59 07       	cpc	r21, r25
   10ce0:	c8 f0       	brcs	.+50     	; 0x10d14 <malloc+0x66>
   10ce2:	84 17       	cp	r24, r20
   10ce4:	95 07       	cpc	r25, r21
   10ce6:	69 f4       	brne	.+26     	; 0x10d02 <malloc+0x54>
   10ce8:	10 97       	sbiw	r26, 0x00	; 0
   10cea:	31 f0       	breq	.+12     	; 0x10cf8 <malloc+0x4a>
   10cec:	12 96       	adiw	r26, 0x02	; 2
   10cee:	0c 93       	st	X, r16
   10cf0:	12 97       	sbiw	r26, 0x02	; 2
   10cf2:	13 96       	adiw	r26, 0x03	; 3
   10cf4:	1c 93       	st	X, r17
   10cf6:	27 c0       	rjmp	.+78     	; 0x10d46 <malloc+0x98>
   10cf8:	00 93 8b 2e 	sts	0x2E8B, r16	; 0x802e8b <__flp>
   10cfc:	10 93 8c 2e 	sts	0x2E8C, r17	; 0x802e8c <__flp+0x1>
   10d00:	22 c0       	rjmp	.+68     	; 0x10d46 <malloc+0x98>
   10d02:	21 15       	cp	r18, r1
   10d04:	31 05       	cpc	r19, r1
   10d06:	19 f0       	breq	.+6      	; 0x10d0e <malloc+0x60>
   10d08:	42 17       	cp	r20, r18
   10d0a:	53 07       	cpc	r21, r19
   10d0c:	18 f4       	brcc	.+6      	; 0x10d14 <malloc+0x66>
   10d0e:	9a 01       	movw	r18, r20
   10d10:	bd 01       	movw	r22, r26
   10d12:	ef 01       	movw	r28, r30
   10d14:	df 01       	movw	r26, r30
   10d16:	f8 01       	movw	r30, r16
   10d18:	db cf       	rjmp	.-74     	; 0x10cd0 <malloc+0x22>
   10d1a:	21 15       	cp	r18, r1
   10d1c:	31 05       	cpc	r19, r1
   10d1e:	f9 f0       	breq	.+62     	; 0x10d5e <malloc+0xb0>
   10d20:	28 1b       	sub	r18, r24
   10d22:	39 0b       	sbc	r19, r25
   10d24:	24 30       	cpi	r18, 0x04	; 4
   10d26:	31 05       	cpc	r19, r1
   10d28:	80 f4       	brcc	.+32     	; 0x10d4a <malloc+0x9c>
   10d2a:	8a 81       	ldd	r24, Y+2	; 0x02
   10d2c:	9b 81       	ldd	r25, Y+3	; 0x03
   10d2e:	61 15       	cp	r22, r1
   10d30:	71 05       	cpc	r23, r1
   10d32:	21 f0       	breq	.+8      	; 0x10d3c <malloc+0x8e>
   10d34:	fb 01       	movw	r30, r22
   10d36:	82 83       	std	Z+2, r24	; 0x02
   10d38:	93 83       	std	Z+3, r25	; 0x03
   10d3a:	04 c0       	rjmp	.+8      	; 0x10d44 <malloc+0x96>
   10d3c:	80 93 8b 2e 	sts	0x2E8B, r24	; 0x802e8b <__flp>
   10d40:	90 93 8c 2e 	sts	0x2E8C, r25	; 0x802e8c <__flp+0x1>
   10d44:	fe 01       	movw	r30, r28
   10d46:	32 96       	adiw	r30, 0x02	; 2
   10d48:	44 c0       	rjmp	.+136    	; 0x10dd2 <malloc+0x124>
   10d4a:	fe 01       	movw	r30, r28
   10d4c:	e2 0f       	add	r30, r18
   10d4e:	f3 1f       	adc	r31, r19
   10d50:	81 93       	st	Z+, r24
   10d52:	91 93       	st	Z+, r25
   10d54:	22 50       	subi	r18, 0x02	; 2
   10d56:	31 09       	sbc	r19, r1
   10d58:	28 83       	st	Y, r18
   10d5a:	39 83       	std	Y+1, r19	; 0x01
   10d5c:	3a c0       	rjmp	.+116    	; 0x10dd2 <malloc+0x124>
   10d5e:	20 91 89 2e 	lds	r18, 0x2E89	; 0x802e89 <__brkval>
   10d62:	30 91 8a 2e 	lds	r19, 0x2E8A	; 0x802e8a <__brkval+0x1>
   10d66:	23 2b       	or	r18, r19
   10d68:	41 f4       	brne	.+16     	; 0x10d7a <malloc+0xcc>
   10d6a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
   10d6e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
   10d72:	20 93 89 2e 	sts	0x2E89, r18	; 0x802e89 <__brkval>
   10d76:	30 93 8a 2e 	sts	0x2E8A, r19	; 0x802e8a <__brkval+0x1>
   10d7a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
   10d7e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
   10d82:	21 15       	cp	r18, r1
   10d84:	31 05       	cpc	r19, r1
   10d86:	41 f4       	brne	.+16     	; 0x10d98 <malloc+0xea>
   10d88:	2d b7       	in	r18, 0x3d	; 61
   10d8a:	3e b7       	in	r19, 0x3e	; 62
   10d8c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
   10d90:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
   10d94:	24 1b       	sub	r18, r20
   10d96:	35 0b       	sbc	r19, r21
   10d98:	e0 91 89 2e 	lds	r30, 0x2E89	; 0x802e89 <__brkval>
   10d9c:	f0 91 8a 2e 	lds	r31, 0x2E8A	; 0x802e8a <__brkval+0x1>
   10da0:	e2 17       	cp	r30, r18
   10da2:	f3 07       	cpc	r31, r19
   10da4:	a0 f4       	brcc	.+40     	; 0x10dce <malloc+0x120>
   10da6:	2e 1b       	sub	r18, r30
   10da8:	3f 0b       	sbc	r19, r31
   10daa:	28 17       	cp	r18, r24
   10dac:	39 07       	cpc	r19, r25
   10dae:	78 f0       	brcs	.+30     	; 0x10dce <malloc+0x120>
   10db0:	ac 01       	movw	r20, r24
   10db2:	4e 5f       	subi	r20, 0xFE	; 254
   10db4:	5f 4f       	sbci	r21, 0xFF	; 255
   10db6:	24 17       	cp	r18, r20
   10db8:	35 07       	cpc	r19, r21
   10dba:	48 f0       	brcs	.+18     	; 0x10dce <malloc+0x120>
   10dbc:	4e 0f       	add	r20, r30
   10dbe:	5f 1f       	adc	r21, r31
   10dc0:	40 93 89 2e 	sts	0x2E89, r20	; 0x802e89 <__brkval>
   10dc4:	50 93 8a 2e 	sts	0x2E8A, r21	; 0x802e8a <__brkval+0x1>
   10dc8:	81 93       	st	Z+, r24
   10dca:	91 93       	st	Z+, r25
   10dcc:	02 c0       	rjmp	.+4      	; 0x10dd2 <malloc+0x124>
   10dce:	e0 e0       	ldi	r30, 0x00	; 0
   10dd0:	f0 e0       	ldi	r31, 0x00	; 0
   10dd2:	cf 01       	movw	r24, r30
   10dd4:	df 91       	pop	r29
   10dd6:	cf 91       	pop	r28
   10dd8:	1f 91       	pop	r17
   10dda:	0f 91       	pop	r16
   10ddc:	08 95       	ret

00010dde <free>:
   10dde:	cf 93       	push	r28
   10de0:	df 93       	push	r29
   10de2:	00 97       	sbiw	r24, 0x00	; 0
   10de4:	09 f4       	brne	.+2      	; 0x10de8 <free+0xa>
   10de6:	81 c0       	rjmp	.+258    	; 0x10eea <free+0x10c>
   10de8:	fc 01       	movw	r30, r24
   10dea:	32 97       	sbiw	r30, 0x02	; 2
   10dec:	12 82       	std	Z+2, r1	; 0x02
   10dee:	13 82       	std	Z+3, r1	; 0x03
   10df0:	a0 91 8b 2e 	lds	r26, 0x2E8B	; 0x802e8b <__flp>
   10df4:	b0 91 8c 2e 	lds	r27, 0x2E8C	; 0x802e8c <__flp+0x1>
   10df8:	10 97       	sbiw	r26, 0x00	; 0
   10dfa:	81 f4       	brne	.+32     	; 0x10e1c <free+0x3e>
   10dfc:	20 81       	ld	r18, Z
   10dfe:	31 81       	ldd	r19, Z+1	; 0x01
   10e00:	82 0f       	add	r24, r18
   10e02:	93 1f       	adc	r25, r19
   10e04:	20 91 89 2e 	lds	r18, 0x2E89	; 0x802e89 <__brkval>
   10e08:	30 91 8a 2e 	lds	r19, 0x2E8A	; 0x802e8a <__brkval+0x1>
   10e0c:	28 17       	cp	r18, r24
   10e0e:	39 07       	cpc	r19, r25
   10e10:	51 f5       	brne	.+84     	; 0x10e66 <free+0x88>
   10e12:	e0 93 89 2e 	sts	0x2E89, r30	; 0x802e89 <__brkval>
   10e16:	f0 93 8a 2e 	sts	0x2E8A, r31	; 0x802e8a <__brkval+0x1>
   10e1a:	67 c0       	rjmp	.+206    	; 0x10eea <free+0x10c>
   10e1c:	ed 01       	movw	r28, r26
   10e1e:	20 e0       	ldi	r18, 0x00	; 0
   10e20:	30 e0       	ldi	r19, 0x00	; 0
   10e22:	ce 17       	cp	r28, r30
   10e24:	df 07       	cpc	r29, r31
   10e26:	40 f4       	brcc	.+16     	; 0x10e38 <free+0x5a>
   10e28:	4a 81       	ldd	r20, Y+2	; 0x02
   10e2a:	5b 81       	ldd	r21, Y+3	; 0x03
   10e2c:	9e 01       	movw	r18, r28
   10e2e:	41 15       	cp	r20, r1
   10e30:	51 05       	cpc	r21, r1
   10e32:	f1 f0       	breq	.+60     	; 0x10e70 <free+0x92>
   10e34:	ea 01       	movw	r28, r20
   10e36:	f5 cf       	rjmp	.-22     	; 0x10e22 <free+0x44>
   10e38:	c2 83       	std	Z+2, r28	; 0x02
   10e3a:	d3 83       	std	Z+3, r29	; 0x03
   10e3c:	40 81       	ld	r20, Z
   10e3e:	51 81       	ldd	r21, Z+1	; 0x01
   10e40:	84 0f       	add	r24, r20
   10e42:	95 1f       	adc	r25, r21
   10e44:	c8 17       	cp	r28, r24
   10e46:	d9 07       	cpc	r29, r25
   10e48:	59 f4       	brne	.+22     	; 0x10e60 <free+0x82>
   10e4a:	88 81       	ld	r24, Y
   10e4c:	99 81       	ldd	r25, Y+1	; 0x01
   10e4e:	84 0f       	add	r24, r20
   10e50:	95 1f       	adc	r25, r21
   10e52:	02 96       	adiw	r24, 0x02	; 2
   10e54:	80 83       	st	Z, r24
   10e56:	91 83       	std	Z+1, r25	; 0x01
   10e58:	8a 81       	ldd	r24, Y+2	; 0x02
   10e5a:	9b 81       	ldd	r25, Y+3	; 0x03
   10e5c:	82 83       	std	Z+2, r24	; 0x02
   10e5e:	93 83       	std	Z+3, r25	; 0x03
   10e60:	21 15       	cp	r18, r1
   10e62:	31 05       	cpc	r19, r1
   10e64:	29 f4       	brne	.+10     	; 0x10e70 <free+0x92>
   10e66:	e0 93 8b 2e 	sts	0x2E8B, r30	; 0x802e8b <__flp>
   10e6a:	f0 93 8c 2e 	sts	0x2E8C, r31	; 0x802e8c <__flp+0x1>
   10e6e:	3d c0       	rjmp	.+122    	; 0x10eea <free+0x10c>
   10e70:	e9 01       	movw	r28, r18
   10e72:	ea 83       	std	Y+2, r30	; 0x02
   10e74:	fb 83       	std	Y+3, r31	; 0x03
   10e76:	49 91       	ld	r20, Y+
   10e78:	59 91       	ld	r21, Y+
   10e7a:	c4 0f       	add	r28, r20
   10e7c:	d5 1f       	adc	r29, r21
   10e7e:	ec 17       	cp	r30, r28
   10e80:	fd 07       	cpc	r31, r29
   10e82:	61 f4       	brne	.+24     	; 0x10e9c <free+0xbe>
   10e84:	80 81       	ld	r24, Z
   10e86:	91 81       	ldd	r25, Z+1	; 0x01
   10e88:	84 0f       	add	r24, r20
   10e8a:	95 1f       	adc	r25, r21
   10e8c:	02 96       	adiw	r24, 0x02	; 2
   10e8e:	e9 01       	movw	r28, r18
   10e90:	88 83       	st	Y, r24
   10e92:	99 83       	std	Y+1, r25	; 0x01
   10e94:	82 81       	ldd	r24, Z+2	; 0x02
   10e96:	93 81       	ldd	r25, Z+3	; 0x03
   10e98:	8a 83       	std	Y+2, r24	; 0x02
   10e9a:	9b 83       	std	Y+3, r25	; 0x03
   10e9c:	e0 e0       	ldi	r30, 0x00	; 0
   10e9e:	f0 e0       	ldi	r31, 0x00	; 0
   10ea0:	12 96       	adiw	r26, 0x02	; 2
   10ea2:	8d 91       	ld	r24, X+
   10ea4:	9c 91       	ld	r25, X
   10ea6:	13 97       	sbiw	r26, 0x03	; 3
   10ea8:	00 97       	sbiw	r24, 0x00	; 0
   10eaa:	19 f0       	breq	.+6      	; 0x10eb2 <free+0xd4>
   10eac:	fd 01       	movw	r30, r26
   10eae:	dc 01       	movw	r26, r24
   10eb0:	f7 cf       	rjmp	.-18     	; 0x10ea0 <free+0xc2>
   10eb2:	8d 91       	ld	r24, X+
   10eb4:	9c 91       	ld	r25, X
   10eb6:	11 97       	sbiw	r26, 0x01	; 1
   10eb8:	9d 01       	movw	r18, r26
   10eba:	2e 5f       	subi	r18, 0xFE	; 254
   10ebc:	3f 4f       	sbci	r19, 0xFF	; 255
   10ebe:	82 0f       	add	r24, r18
   10ec0:	93 1f       	adc	r25, r19
   10ec2:	20 91 89 2e 	lds	r18, 0x2E89	; 0x802e89 <__brkval>
   10ec6:	30 91 8a 2e 	lds	r19, 0x2E8A	; 0x802e8a <__brkval+0x1>
   10eca:	28 17       	cp	r18, r24
   10ecc:	39 07       	cpc	r19, r25
   10ece:	69 f4       	brne	.+26     	; 0x10eea <free+0x10c>
   10ed0:	30 97       	sbiw	r30, 0x00	; 0
   10ed2:	29 f4       	brne	.+10     	; 0x10ede <free+0x100>
   10ed4:	10 92 8b 2e 	sts	0x2E8B, r1	; 0x802e8b <__flp>
   10ed8:	10 92 8c 2e 	sts	0x2E8C, r1	; 0x802e8c <__flp+0x1>
   10edc:	02 c0       	rjmp	.+4      	; 0x10ee2 <free+0x104>
   10ede:	12 82       	std	Z+2, r1	; 0x02
   10ee0:	13 82       	std	Z+3, r1	; 0x03
   10ee2:	a0 93 89 2e 	sts	0x2E89, r26	; 0x802e89 <__brkval>
   10ee6:	b0 93 8a 2e 	sts	0x2E8A, r27	; 0x802e8a <__brkval+0x1>
   10eea:	df 91       	pop	r29
   10eec:	cf 91       	pop	r28
   10eee:	08 95       	ret

00010ef0 <strtod>:
   10ef0:	8f 92       	push	r8
   10ef2:	9f 92       	push	r9
   10ef4:	af 92       	push	r10
   10ef6:	bf 92       	push	r11
   10ef8:	cf 92       	push	r12
   10efa:	df 92       	push	r13
   10efc:	ef 92       	push	r14
   10efe:	ff 92       	push	r15
   10f00:	0f 93       	push	r16
   10f02:	1f 93       	push	r17
   10f04:	cf 93       	push	r28
   10f06:	df 93       	push	r29
   10f08:	ec 01       	movw	r28, r24
   10f0a:	6b 01       	movw	r12, r22
   10f0c:	61 15       	cp	r22, r1
   10f0e:	71 05       	cpc	r23, r1
   10f10:	19 f0       	breq	.+6      	; 0x10f18 <strtod+0x28>
   10f12:	fb 01       	movw	r30, r22
   10f14:	80 83       	st	Z, r24
   10f16:	91 83       	std	Z+1, r25	; 0x01
   10f18:	7e 01       	movw	r14, r28
   10f1a:	ff ef       	ldi	r31, 0xFF	; 255
   10f1c:	ef 1a       	sub	r14, r31
   10f1e:	ff 0a       	sbc	r15, r31
   10f20:	08 81       	ld	r16, Y
   10f22:	80 2f       	mov	r24, r16
   10f24:	90 e0       	ldi	r25, 0x00	; 0
   10f26:	3b d1       	rcall	.+630    	; 0x1119e <isspace>
   10f28:	89 2b       	or	r24, r25
   10f2a:	11 f0       	breq	.+4      	; 0x10f30 <strtod+0x40>
   10f2c:	e7 01       	movw	r28, r14
   10f2e:	f4 cf       	rjmp	.-24     	; 0x10f18 <strtod+0x28>
   10f30:	0d 32       	cpi	r16, 0x2D	; 45
   10f32:	39 f4       	brne	.+14     	; 0x10f42 <strtod+0x52>
   10f34:	7e 01       	movw	r14, r28
   10f36:	82 e0       	ldi	r24, 0x02	; 2
   10f38:	e8 0e       	add	r14, r24
   10f3a:	f1 1c       	adc	r15, r1
   10f3c:	09 81       	ldd	r16, Y+1	; 0x01
   10f3e:	11 e0       	ldi	r17, 0x01	; 1
   10f40:	08 c0       	rjmp	.+16     	; 0x10f52 <strtod+0x62>
   10f42:	0b 32       	cpi	r16, 0x2B	; 43
   10f44:	29 f4       	brne	.+10     	; 0x10f50 <strtod+0x60>
   10f46:	7e 01       	movw	r14, r28
   10f48:	92 e0       	ldi	r25, 0x02	; 2
   10f4a:	e9 0e       	add	r14, r25
   10f4c:	f1 1c       	adc	r15, r1
   10f4e:	09 81       	ldd	r16, Y+1	; 0x01
   10f50:	10 e0       	ldi	r17, 0x00	; 0
   10f52:	e7 01       	movw	r28, r14
   10f54:	21 97       	sbiw	r28, 0x01	; 1
   10f56:	43 e0       	ldi	r20, 0x03	; 3
   10f58:	50 e0       	ldi	r21, 0x00	; 0
   10f5a:	62 ec       	ldi	r22, 0xC2	; 194
   10f5c:	73 e0       	ldi	r23, 0x03	; 3
   10f5e:	ce 01       	movw	r24, r28
   10f60:	b4 dc       	rcall	.-1688   	; 0x108ca <strncasecmp_P>
   10f62:	89 2b       	or	r24, r25
   10f64:	b9 f4       	brne	.+46     	; 0x10f94 <strtod+0xa4>
   10f66:	23 96       	adiw	r28, 0x03	; 3
   10f68:	45 e0       	ldi	r20, 0x05	; 5
   10f6a:	50 e0       	ldi	r21, 0x00	; 0
   10f6c:	6d eb       	ldi	r22, 0xBD	; 189
   10f6e:	73 e0       	ldi	r23, 0x03	; 3
   10f70:	ce 01       	movw	r24, r28
   10f72:	ab dc       	rcall	.-1706   	; 0x108ca <strncasecmp_P>
   10f74:	89 2b       	or	r24, r25
   10f76:	09 f4       	brne	.+2      	; 0x10f7a <strtod+0x8a>
   10f78:	25 96       	adiw	r28, 0x05	; 5
   10f7a:	c1 14       	cp	r12, r1
   10f7c:	d1 04       	cpc	r13, r1
   10f7e:	19 f0       	breq	.+6      	; 0x10f86 <strtod+0x96>
   10f80:	f6 01       	movw	r30, r12
   10f82:	c0 83       	st	Z, r28
   10f84:	d1 83       	std	Z+1, r29	; 0x01
   10f86:	11 11       	cpse	r17, r1
   10f88:	f4 c0       	rjmp	.+488    	; 0x11172 <strtod+0x282>
   10f8a:	60 e0       	ldi	r22, 0x00	; 0
   10f8c:	70 e0       	ldi	r23, 0x00	; 0
   10f8e:	80 e8       	ldi	r24, 0x80	; 128
   10f90:	9f e7       	ldi	r25, 0x7F	; 127
   10f92:	f8 c0       	rjmp	.+496    	; 0x11184 <strtod+0x294>
   10f94:	43 e0       	ldi	r20, 0x03	; 3
   10f96:	50 e0       	ldi	r21, 0x00	; 0
   10f98:	6a eb       	ldi	r22, 0xBA	; 186
   10f9a:	73 e0       	ldi	r23, 0x03	; 3
   10f9c:	ce 01       	movw	r24, r28
   10f9e:	95 dc       	rcall	.-1750   	; 0x108ca <strncasecmp_P>
   10fa0:	89 2b       	or	r24, r25
   10fa2:	59 f4       	brne	.+22     	; 0x10fba <strtod+0xca>
   10fa4:	c1 14       	cp	r12, r1
   10fa6:	d1 04       	cpc	r13, r1
   10fa8:	09 f4       	brne	.+2      	; 0x10fac <strtod+0xbc>
   10faa:	e8 c0       	rjmp	.+464    	; 0x1117c <strtod+0x28c>
   10fac:	f2 e0       	ldi	r31, 0x02	; 2
   10fae:	ef 0e       	add	r14, r31
   10fb0:	f1 1c       	adc	r15, r1
   10fb2:	f6 01       	movw	r30, r12
   10fb4:	e0 82       	st	Z, r14
   10fb6:	f1 82       	std	Z+1, r15	; 0x01
   10fb8:	e1 c0       	rjmp	.+450    	; 0x1117c <strtod+0x28c>
   10fba:	20 e0       	ldi	r18, 0x00	; 0
   10fbc:	30 e0       	ldi	r19, 0x00	; 0
   10fbe:	a9 01       	movw	r20, r18
   10fc0:	c0 e0       	ldi	r28, 0x00	; 0
   10fc2:	d0 e0       	ldi	r29, 0x00	; 0
   10fc4:	f7 01       	movw	r30, r14
   10fc6:	60 ed       	ldi	r22, 0xD0	; 208
   10fc8:	a6 2e       	mov	r10, r22
   10fca:	a0 0e       	add	r10, r16
   10fcc:	89 e0       	ldi	r24, 0x09	; 9
   10fce:	8a 15       	cp	r24, r10
   10fd0:	28 f1       	brcs	.+74     	; 0x1101c <strtod+0x12c>
   10fd2:	91 2f       	mov	r25, r17
   10fd4:	92 60       	ori	r25, 0x02	; 2
   10fd6:	b9 2e       	mov	r11, r25
   10fd8:	81 2f       	mov	r24, r17
   10fda:	88 70       	andi	r24, 0x08	; 8
   10fdc:	12 ff       	sbrs	r17, 2
   10fde:	04 c0       	rjmp	.+8      	; 0x10fe8 <strtod+0xf8>
   10fe0:	81 11       	cpse	r24, r1
   10fe2:	23 c0       	rjmp	.+70     	; 0x1102a <strtod+0x13a>
   10fe4:	21 96       	adiw	r28, 0x01	; 1
   10fe6:	21 c0       	rjmp	.+66     	; 0x1102a <strtod+0x13a>
   10fe8:	81 11       	cpse	r24, r1
   10fea:	21 97       	sbiw	r28, 0x01	; 1
   10fec:	a5 e0       	ldi	r26, 0x05	; 5
   10fee:	b0 e0       	ldi	r27, 0x00	; 0
   10ff0:	d4 d9       	rcall	.-3160   	; 0x1039a <__muluhisi3>
   10ff2:	dc 01       	movw	r26, r24
   10ff4:	cb 01       	movw	r24, r22
   10ff6:	88 0f       	add	r24, r24
   10ff8:	99 1f       	adc	r25, r25
   10ffa:	aa 1f       	adc	r26, r26
   10ffc:	bb 1f       	adc	r27, r27
   10ffe:	9c 01       	movw	r18, r24
   11000:	ad 01       	movw	r20, r26
   11002:	2a 0d       	add	r18, r10
   11004:	31 1d       	adc	r19, r1
   11006:	41 1d       	adc	r20, r1
   11008:	51 1d       	adc	r21, r1
   1100a:	28 39       	cpi	r18, 0x98	; 152
   1100c:	89 e9       	ldi	r24, 0x99	; 153
   1100e:	38 07       	cpc	r19, r24
   11010:	48 07       	cpc	r20, r24
   11012:	89 e1       	ldi	r24, 0x19	; 25
   11014:	58 07       	cpc	r21, r24
   11016:	48 f0       	brcs	.+18     	; 0x1102a <strtod+0x13a>
   11018:	16 60       	ori	r17, 0x06	; 6
   1101a:	06 c0       	rjmp	.+12     	; 0x11028 <strtod+0x138>
   1101c:	9e ef       	ldi	r25, 0xFE	; 254
   1101e:	a9 12       	cpse	r10, r25
   11020:	0a c0       	rjmp	.+20     	; 0x11036 <strtod+0x146>
   11022:	13 fd       	sbrc	r17, 3
   11024:	40 c0       	rjmp	.+128    	; 0x110a6 <strtod+0x1b6>
   11026:	18 60       	ori	r17, 0x08	; 8
   11028:	b1 2e       	mov	r11, r17
   1102a:	8f ef       	ldi	r24, 0xFF	; 255
   1102c:	e8 1a       	sub	r14, r24
   1102e:	f8 0a       	sbc	r15, r24
   11030:	00 81       	ld	r16, Z
   11032:	1b 2d       	mov	r17, r11
   11034:	c7 cf       	rjmp	.-114    	; 0x10fc4 <strtod+0xd4>
   11036:	80 2f       	mov	r24, r16
   11038:	8f 7d       	andi	r24, 0xDF	; 223
   1103a:	85 34       	cpi	r24, 0x45	; 69
   1103c:	a1 f5       	brne	.+104    	; 0x110a6 <strtod+0x1b6>
   1103e:	80 81       	ld	r24, Z
   11040:	8d 32       	cpi	r24, 0x2D	; 45
   11042:	11 f4       	brne	.+4      	; 0x11048 <strtod+0x158>
   11044:	10 61       	ori	r17, 0x10	; 16
   11046:	06 c0       	rjmp	.+12     	; 0x11054 <strtod+0x164>
   11048:	8b 32       	cpi	r24, 0x2B	; 43
   1104a:	21 f0       	breq	.+8      	; 0x11054 <strtod+0x164>
   1104c:	31 96       	adiw	r30, 0x01	; 1
   1104e:	61 e0       	ldi	r22, 0x01	; 1
   11050:	70 e0       	ldi	r23, 0x00	; 0
   11052:	04 c0       	rjmp	.+8      	; 0x1105c <strtod+0x16c>
   11054:	81 81       	ldd	r24, Z+1	; 0x01
   11056:	32 96       	adiw	r30, 0x02	; 2
   11058:	62 e0       	ldi	r22, 0x02	; 2
   1105a:	70 e0       	ldi	r23, 0x00	; 0
   1105c:	80 53       	subi	r24, 0x30	; 48
   1105e:	8a 30       	cpi	r24, 0x0A	; 10
   11060:	18 f0       	brcs	.+6      	; 0x11068 <strtod+0x178>
   11062:	e6 1b       	sub	r30, r22
   11064:	f7 0b       	sbc	r31, r23
   11066:	1f c0       	rjmp	.+62     	; 0x110a6 <strtod+0x1b6>
   11068:	60 e0       	ldi	r22, 0x00	; 0
   1106a:	70 e0       	ldi	r23, 0x00	; 0
   1106c:	60 38       	cpi	r22, 0x80	; 128
   1106e:	9c e0       	ldi	r25, 0x0C	; 12
   11070:	79 07       	cpc	r23, r25
   11072:	5c f4       	brge	.+22     	; 0x1108a <strtod+0x19a>
   11074:	db 01       	movw	r26, r22
   11076:	aa 0f       	add	r26, r26
   11078:	bb 1f       	adc	r27, r27
   1107a:	aa 0f       	add	r26, r26
   1107c:	bb 1f       	adc	r27, r27
   1107e:	6a 0f       	add	r22, r26
   11080:	7b 1f       	adc	r23, r27
   11082:	66 0f       	add	r22, r22
   11084:	77 1f       	adc	r23, r23
   11086:	68 0f       	add	r22, r24
   11088:	71 1d       	adc	r23, r1
   1108a:	31 96       	adiw	r30, 0x01	; 1
   1108c:	df 01       	movw	r26, r30
   1108e:	11 97       	sbiw	r26, 0x01	; 1
   11090:	8c 91       	ld	r24, X
   11092:	80 53       	subi	r24, 0x30	; 48
   11094:	8a 30       	cpi	r24, 0x0A	; 10
   11096:	50 f3       	brcs	.-44     	; 0x1106c <strtod+0x17c>
   11098:	14 ff       	sbrs	r17, 4
   1109a:	03 c0       	rjmp	.+6      	; 0x110a2 <strtod+0x1b2>
   1109c:	71 95       	neg	r23
   1109e:	61 95       	neg	r22
   110a0:	71 09       	sbc	r23, r1
   110a2:	c6 0f       	add	r28, r22
   110a4:	d7 1f       	adc	r29, r23
   110a6:	11 ff       	sbrs	r17, 1
   110a8:	08 c0       	rjmp	.+16     	; 0x110ba <strtod+0x1ca>
   110aa:	c1 14       	cp	r12, r1
   110ac:	d1 04       	cpc	r13, r1
   110ae:	29 f0       	breq	.+10     	; 0x110ba <strtod+0x1ca>
   110b0:	cf 01       	movw	r24, r30
   110b2:	01 97       	sbiw	r24, 0x01	; 1
   110b4:	f6 01       	movw	r30, r12
   110b6:	80 83       	st	Z, r24
   110b8:	91 83       	std	Z+1, r25	; 0x01
   110ba:	ca 01       	movw	r24, r20
   110bc:	b9 01       	movw	r22, r18
   110be:	0e 94 68 7e 	call	0xfcd0	; 0xfcd0 <__floatunsisf>
   110c2:	21 2f       	mov	r18, r17
   110c4:	23 70       	andi	r18, 0x03	; 3
   110c6:	23 30       	cpi	r18, 0x03	; 3
   110c8:	19 f0       	breq	.+6      	; 0x110d0 <strtod+0x1e0>
   110ca:	4b 01       	movw	r8, r22
   110cc:	5c 01       	movw	r10, r24
   110ce:	06 c0       	rjmp	.+12     	; 0x110dc <strtod+0x1ec>
   110d0:	4b 01       	movw	r8, r22
   110d2:	5c 01       	movw	r10, r24
   110d4:	b7 fa       	bst	r11, 7
   110d6:	b0 94       	com	r11
   110d8:	b7 f8       	bld	r11, 7
   110da:	b0 94       	com	r11
   110dc:	20 e0       	ldi	r18, 0x00	; 0
   110de:	30 e0       	ldi	r19, 0x00	; 0
   110e0:	a9 01       	movw	r20, r18
   110e2:	c5 01       	movw	r24, r10
   110e4:	b4 01       	movw	r22, r8
   110e6:	0e 94 c8 7d 	call	0xfb90	; 0xfb90 <__cmpsf2>
   110ea:	88 23       	and	r24, r24
   110ec:	09 f4       	brne	.+2      	; 0x110f0 <strtod+0x200>
   110ee:	3e c0       	rjmp	.+124    	; 0x1116c <strtod+0x27c>
   110f0:	d7 ff       	sbrs	r29, 7
   110f2:	06 c0       	rjmp	.+12     	; 0x11100 <strtod+0x210>
   110f4:	d1 95       	neg	r29
   110f6:	c1 95       	neg	r28
   110f8:	d1 09       	sbc	r29, r1
   110fa:	09 ed       	ldi	r16, 0xD9	; 217
   110fc:	13 e0       	ldi	r17, 0x03	; 3
   110fe:	02 c0       	rjmp	.+4      	; 0x11104 <strtod+0x214>
   11100:	01 ef       	ldi	r16, 0xF1	; 241
   11102:	13 e0       	ldi	r17, 0x03	; 3
   11104:	68 01       	movw	r12, r16
   11106:	f8 e1       	ldi	r31, 0x18	; 24
   11108:	cf 1a       	sub	r12, r31
   1110a:	d1 08       	sbc	r13, r1
   1110c:	90 e2       	ldi	r25, 0x20	; 32
   1110e:	e9 2e       	mov	r14, r25
   11110:	f1 2c       	mov	r15, r1
   11112:	ce 15       	cp	r28, r14
   11114:	df 05       	cpc	r29, r15
   11116:	74 f0       	brlt	.+28     	; 0x11134 <strtod+0x244>
   11118:	f8 01       	movw	r30, r16
   1111a:	25 91       	lpm	r18, Z+
   1111c:	35 91       	lpm	r19, Z+
   1111e:	45 91       	lpm	r20, Z+
   11120:	54 91       	lpm	r21, Z
   11122:	c5 01       	movw	r24, r10
   11124:	b4 01       	movw	r22, r8
   11126:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__mulsf3>
   1112a:	4b 01       	movw	r8, r22
   1112c:	5c 01       	movw	r10, r24
   1112e:	ce 19       	sub	r28, r14
   11130:	df 09       	sbc	r29, r15
   11132:	ef cf       	rjmp	.-34     	; 0x11112 <strtod+0x222>
   11134:	04 50       	subi	r16, 0x04	; 4
   11136:	11 09       	sbc	r17, r1
   11138:	f5 94       	asr	r15
   1113a:	e7 94       	ror	r14
   1113c:	0c 15       	cp	r16, r12
   1113e:	1d 05       	cpc	r17, r13
   11140:	41 f7       	brne	.-48     	; 0x11112 <strtod+0x222>
   11142:	8a 2d       	mov	r24, r10
   11144:	88 0f       	add	r24, r24
   11146:	8b 2d       	mov	r24, r11
   11148:	88 1f       	adc	r24, r24
   1114a:	8f 3f       	cpi	r24, 0xFF	; 255
   1114c:	49 f0       	breq	.+18     	; 0x11160 <strtod+0x270>
   1114e:	20 e0       	ldi	r18, 0x00	; 0
   11150:	30 e0       	ldi	r19, 0x00	; 0
   11152:	a9 01       	movw	r20, r18
   11154:	c5 01       	movw	r24, r10
   11156:	b4 01       	movw	r22, r8
   11158:	0e 94 c8 7d 	call	0xfb90	; 0xfb90 <__cmpsf2>
   1115c:	81 11       	cpse	r24, r1
   1115e:	06 c0       	rjmp	.+12     	; 0x1116c <strtod+0x27c>
   11160:	82 e2       	ldi	r24, 0x22	; 34
   11162:	90 e0       	ldi	r25, 0x00	; 0
   11164:	80 93 8d 2e 	sts	0x2E8D, r24	; 0x802e8d <errno>
   11168:	90 93 8e 2e 	sts	0x2E8E, r25	; 0x802e8e <errno+0x1>
   1116c:	c5 01       	movw	r24, r10
   1116e:	b4 01       	movw	r22, r8
   11170:	09 c0       	rjmp	.+18     	; 0x11184 <strtod+0x294>
   11172:	60 e0       	ldi	r22, 0x00	; 0
   11174:	70 e0       	ldi	r23, 0x00	; 0
   11176:	80 e8       	ldi	r24, 0x80	; 128
   11178:	9f ef       	ldi	r25, 0xFF	; 255
   1117a:	04 c0       	rjmp	.+8      	; 0x11184 <strtod+0x294>
   1117c:	60 e0       	ldi	r22, 0x00	; 0
   1117e:	70 e0       	ldi	r23, 0x00	; 0
   11180:	80 ec       	ldi	r24, 0xC0	; 192
   11182:	9f e7       	ldi	r25, 0x7F	; 127
   11184:	df 91       	pop	r29
   11186:	cf 91       	pop	r28
   11188:	1f 91       	pop	r17
   1118a:	0f 91       	pop	r16
   1118c:	ff 90       	pop	r15
   1118e:	ef 90       	pop	r14
   11190:	df 90       	pop	r13
   11192:	cf 90       	pop	r12
   11194:	bf 90       	pop	r11
   11196:	af 90       	pop	r10
   11198:	9f 90       	pop	r9
   1119a:	8f 90       	pop	r8
   1119c:	08 95       	ret

0001119e <isspace>:
   1119e:	91 11       	cpse	r25, r1
   111a0:	0d c0       	rjmp	.+26     	; 0x111bc <__ctype_isfalse>
   111a2:	80 32       	cpi	r24, 0x20	; 32
   111a4:	19 f0       	breq	.+6      	; 0x111ac <isspace+0xe>
   111a6:	89 50       	subi	r24, 0x09	; 9
   111a8:	85 50       	subi	r24, 0x05	; 5
   111aa:	d0 f7       	brcc	.-12     	; 0x111a0 <isspace+0x2>
   111ac:	08 95       	ret

000111ae <memset>:
   111ae:	dc 01       	movw	r26, r24
   111b0:	01 c0       	rjmp	.+2      	; 0x111b4 <memset+0x6>
   111b2:	6d 93       	st	X+, r22
   111b4:	41 50       	subi	r20, 0x01	; 1
   111b6:	50 40       	sbci	r21, 0x00	; 0
   111b8:	e0 f7       	brcc	.-8      	; 0x111b2 <memset+0x4>
   111ba:	08 95       	ret

000111bc <__ctype_isfalse>:
   111bc:	99 27       	eor	r25, r25
   111be:	88 27       	eor	r24, r24

000111c0 <__ctype_istrue>:
   111c0:	08 95       	ret

000111c2 <_exit>:
   111c2:	f8 94       	cli

000111c4 <__stop_program>:
   111c4:	ff cf       	rjmp	.-2      	; 0x111c4 <__stop_program>

Disassembly of section .BOOT:

000111c6 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   111c6:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   111c8:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   111ca:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   111cc:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   111d0:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   111d4:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   111d6:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
   111da:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   111dc:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   111e0:	9b bf       	out	0x3b, r25	; 59
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   111e2:	08 95       	ret

000111e4 <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   111e4:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
   111e8:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   111ea:	fc cf       	rjmp	.-8      	; 0x111e4 <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   111ec:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   111ee:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   111f0:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   111f2:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   111f6:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   111f8:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
   111fc:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   111fe:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   11200:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   11202:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   11206:	9b bf       	out	0x3b, r25	; 59

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   11208:	08 95       	ret
